// File: /data/jenkins/jenkins_hk4e/workspace/hk4e_3.4_dev/gameserver/src/scene/scene.cpp

// Line 70: range 00000000159711E8-00000000159714BC
int32_t __cdecl SceneEntity::addInitLevelConfig(SceneEntity *const this, const std::string *level_config_name)
{
  unsigned __int64 v2; // rbx
  __int64 v3; // rax
  unsigned __int64 v4; // r12
  std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v5; // rax
  common::milog::MiLogStream *v6; // rdx
  int32_t v7; // r14d
  int32_t result; // eax
  std::vector<data::ConfigEntityAbilityEntry>::iterator __for_begin; // [rsp+10h] [rbp-C0h] BYREF
  std::vector<data::ConfigEntityAbilityEntry>::iterator __for_end; // [rsp+18h] [rbp-B8h] BYREF
  std::vector<data::ConfigEntityAbilityEntry> *__for_range; // [rsp+20h] [rbp-B0h]
  const data::ConfigEntityAbilityEntry *ability; // [rsp+28h] [rbp-A8h]
  std::shared_ptr<Config> v13; // [rsp+30h] [rbp-A0h] BYREF
  common::milog::MiLogStream v14; // [rsp+40h] [rbp-90h] BYREF
  char v15[112]; // [rsp+60h] [rbp-70h] BYREF

  v2 = (unsigned __int64)v15;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_0(64LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "1 32 16 26 config_level_entity_ptr:71";
  *(_QWORD *)(v2 + 16) = SceneEntity::addInitLevelConfig;
  v4 = v2 >> 3;
  *(_DWORD *)(v4 + 2147450880) = -235802127;
  *(_DWORD *)(v4 + 2147450884) = -202178560;
  ServiceBox::findService<GameserverService>();
  GameserverService::getConfig((GameserverService *const)&v13);
  v5 = std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false> *const)&v13);
  JsonConfigMgr::findLevelEntityConfig(
    (const JsonConfigMgr *const)(v2 + 32),
    (const std::string *)&v5->design_config.json_config_mgr);
  std::shared_ptr<Config>::~shared_ptr(&v13);
  if ( std::operator==<data::ConfigLevelEntity>((const std::shared_ptr<data::ConfigLevelEntity> *)(v2 + 32), 0LL) )
  {
    common::milog::MiLogStream::create(
      &v14,
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/scene/scene.cpp",
      "addInitLevelConfig",
      74);
    v6 = common::milog::MiLogStream::operator<<<char [50],(char *[50])0>(
           &v14,
           (const char (*)[50])"findLevelEntityConfig fails, level_entity_config:");
    common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v6, level_config_name);
    common::milog::MiLogStream::~MiLogStream(&v14);
    v7 = -1;
  }
  else
  {
    __for_range = &std::__shared_ptr_access<data::ConfigLevelEntity,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<data::ConfigLevelEntity,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 32))->abilities;
    __for_begin._M_current = std::vector<data::ConfigEntityAbilityEntry>::begin(__for_range)._M_current;
    __for_end._M_current = std::vector<data::ConfigEntityAbilityEntry>::end(__for_range)._M_current;
    while ( __gnu_cxx::operator!=<data::ConfigEntityAbilityEntry *,std::vector<data::ConfigEntityAbilityEntry>>(
              &__for_begin,
              &__for_end) )
    {
      ability = __gnu_cxx::__normal_iterator<data::ConfigEntityAbilityEntry *,std::vector<data::ConfigEntityAbilityEntry>>::operator*(&__for_begin);
      AbilityComp::addInitAbility(&this->ability_comp_, ability);
      __gnu_cxx::__normal_iterator<data::ConfigEntityAbilityEntry *,std::vector<data::ConfigEntityAbilityEntry>>::operator++(&__for_begin);
    }
    std::vector<std::string>::push_back(&this->level_config_name_vec_, level_config_name);
    v7 = 0;
  }
  std::shared_ptr<data::ConfigLevelEntity>::~shared_ptr((std::shared_ptr<data::ConfigLevelEntity> *const)(v2 + 32));
  result = v7;
  if ( v15 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 87: range 00000000159714BE-0000000015971713
std::vector<std::shared_ptr<data::ConfigLevelEntity>> *__cdecl SceneEntity::findConfigLevelEntityPtrVec(
        std::vector<std::shared_ptr<data::ConfigLevelEntity>> *retstr,
        const SceneEntity *const this)
{
  unsigned __int64 v2; // rbx
  __int64 v3; // rax
  unsigned __int64 v4; // r13
  std::vector<std::string>::size_type v5; // rdx
  std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v6; // rax
  std::shared_ptr<data::ConfigLevelEntity> *v7; // rdx
  std::vector<std::string>::const_iterator __for_begin; // [rsp+10h] [rbp-90h] BYREF
  std::vector<std::string>::const_iterator __for_end; // [rsp+18h] [rbp-88h] BYREF
  const std::vector<std::string> *__for_range; // [rsp+20h] [rbp-80h]
  const std::string *name; // [rsp+28h] [rbp-78h]
  std::shared_ptr<Config> v13; // [rsp+30h] [rbp-70h] BYREF
  char v14[96]; // [rsp+40h] [rbp-60h] BYREF

  v2 = (unsigned __int64)v14;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_0(64LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "1 32 16 26 config_level_entity_ptr:92";
  *(_QWORD *)(v2 + 16) = SceneEntity::findConfigLevelEntityPtrVec;
  v4 = v2 >> 3;
  *(_DWORD *)(v4 + 2147450880) = -235802127;
  *(_DWORD *)(v4 + 2147450884) = -202178560;
  std::vector<std::shared_ptr<data::ConfigLevelEntity>>::vector(retstr);
  v5 = std::vector<std::string>::size(&this->level_config_name_vec_);
  std::vector<std::shared_ptr<data::ConfigLevelEntity>>::reserve(retstr, v5);
  __for_range = &this->level_config_name_vec_;
  __for_begin._M_current = std::vector<std::string>::begin(&this->level_config_name_vec_)._M_current;
  __for_end._M_current = std::vector<std::string>::end(&this->level_config_name_vec_)._M_current;
  while ( __gnu_cxx::operator!=<std::string const*,std::vector<std::string>>(&__for_begin, &__for_end) )
  {
    name = __gnu_cxx::__normal_iterator<std::string const*,std::vector<std::string>>::operator*(&__for_begin);
    ServiceBox::findService<GameserverService>();
    GameserverService::getConfig((GameserverService *const)&v13);
    v6 = std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false> *const)&v13);
    JsonConfigMgr::findLevelEntityConfig(
      (const JsonConfigMgr *const)(v2 + 32),
      (const std::string *)&v6->design_config.json_config_mgr);
    std::shared_ptr<Config>::~shared_ptr(&v13);
    if ( std::operator!=<data::ConfigLevelEntity>((const std::shared_ptr<data::ConfigLevelEntity> *)(v2 + 32), 0LL) )
    {
      v7 = std::move<std::shared_ptr<data::ConfigLevelEntity> &>((std::shared_ptr<data::ConfigLevelEntity> *)(v2 + 32));
      std::vector<std::shared_ptr<data::ConfigLevelEntity>>::emplace_back<std::shared_ptr<data::ConfigLevelEntity>>(
        retstr,
        v7,
        v7);
    }
    std::shared_ptr<data::ConfigLevelEntity>::~shared_ptr((std::shared_ptr<data::ConfigLevelEntity> *const)(v2 + 32));
    __gnu_cxx::__normal_iterator<std::string const*,std::vector<std::string>>::operator++(&__for_begin);
  }
  if ( v14 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return retstr;
};

// Line 102: range 0000000015971714-000000001597192E
SceneEntityMovesInfo *__fastcall SceneEntityMovesInfo::getNotifyPtr(
        SceneEntityMovesInfo *const this,
        std::unordered_map<unsigned int,std::shared_ptr<proto::SceneEntitiesMoveCombineNotify>> *uid,
        int a3)
{
  unsigned __int64 v3; // r12
  __int64 v4; // rax
  _DWORD *v5; // r13
  std::__detail::_Node_iterator<std::pair<unsigned int const,std::shared_ptr<proto::SceneEntitiesMoveCombineNotify> >,false,false>::pointer v6; // rax
  std::__detail::_Node_iterator<std::pair<unsigned int const,std::shared_ptr<proto::SceneEntitiesMoveCombineNotify> >,false,false>::pointer v8; // rax
  std::shared_ptr<proto::SceneEntitiesMoveCombineNotify> *v9; // r8
  std::__detail::_Node_iterator_base<std::pair<unsigned int const,std::shared_ptr<proto::SceneEntitiesMoveCombineNotify> >,false> __y; // [rsp+28h] [rbp-A8h] BYREF
  char v13[160]; // [rsp+30h] [rbp-A0h] BYREF

  v3 = (unsigned __int64)v13;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_1(128LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "3 48 4 7 uid:101 64 8 8 iter:103 96 16 14 notify_ptr:108";
  *(_QWORD *)(v3 + 16) = SceneEntityMovesInfo::getNotifyPtr;
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = -234556943;
  v5[536862722] = -218959360;
  v5[536862723] = -202178560;
  *(_DWORD *)(v3 + 48) = a3;
  *(std::unordered_map<unsigned int,std::shared_ptr<proto::SceneEntitiesMoveCombineNotify>>::iterator *)(v3 + 64) = std::unordered_map<unsigned int,std::shared_ptr<proto::SceneEntitiesMoveCombineNotify>>::find(uid, (const std::unordered_map<unsigned int,std::shared_ptr<proto::SceneEntitiesMoveCombineNotify>>::key_type *)(v3 + 48));
  __y._M_cur = std::unordered_map<unsigned int,std::shared_ptr<proto::SceneEntitiesMoveCombineNotify>>::end(uid)._M_cur;
  if ( std::__detail::operator!=<std::pair<unsigned int const,std::shared_ptr<proto::SceneEntitiesMoveCombineNotify>>,false>(
         (const std::__detail::_Node_iterator_base<std::pair<unsigned int const,std::shared_ptr<proto::SceneEntitiesMoveCombineNotify> >,false> *)(v3 + 64),
         &__y)
    && (v6 = std::__detail::_Node_iterator<std::pair<unsigned int const,std::shared_ptr<proto::SceneEntitiesMoveCombineNotify>>,false,false>::operator->((const std::__detail::_Node_iterator<std::pair<unsigned int const,std::shared_ptr<proto::SceneEntitiesMoveCombineNotify> >,false,false> *const)(v3 + 64)),
        std::operator!=<proto::SceneEntitiesMoveCombineNotify>(&v6->second, 0LL)) )
  {
    v8 = std::__detail::_Node_iterator<std::pair<unsigned int const,std::shared_ptr<proto::SceneEntitiesMoveCombineNotify>>,false,false>::operator->((const std::__detail::_Node_iterator<std::pair<unsigned int const,std::shared_ptr<proto::SceneEntitiesMoveCombineNotify> >,false,false> *const)(v3 + 64));
    std::shared_ptr<proto::SceneEntitiesMoveCombineNotify>::shared_ptr(
      (std::shared_ptr<proto::SceneEntitiesMoveCombineNotify> *const)this,
      &v8->second);
  }
  else
  {
    common::tools::perf::make_shared<proto::SceneEntitiesMoveCombineNotify>();
    std::unordered_map<unsigned int,std::shared_ptr<proto::SceneEntitiesMoveCombineNotify>>::emplace<unsigned int &,std::shared_ptr<proto::SceneEntitiesMoveCombineNotify>&>(
      uid,
      (unsigned int *)(v3 + 48),
      (std::shared_ptr<proto::SceneEntitiesMoveCombineNotify> *)(v3 + 96),
      (unsigned int *)(v3 + 48),
      v9);
    std::shared_ptr<proto::SceneEntitiesMoveCombineNotify>::shared_ptr(
      (std::shared_ptr<proto::SceneEntitiesMoveCombineNotify> *const)this,
      (std::shared_ptr<proto::SceneEntitiesMoveCombineNotify> *)(v3 + 96));
    std::shared_ptr<proto::SceneEntitiesMoveCombineNotify>::~shared_ptr((std::shared_ptr<proto::SceneEntitiesMoveCombineNotify> *const)(v3 + 96));
  }
  if ( v13 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return this;
};

// Line 114: range 0000000015971930-0000000015971B9D
void __cdecl SceneEntityMovesInfo::flushAllNotify(SceneEntityMovesInfo *const this)
{
  unsigned __int64 v1; // rbx
  __int64 v2; // rax
  unsigned __int64 v3; // r13
  GameserverService *v4; // rax
  uint32_t v5; // ecx
  Player *v6; // r14
  std::unordered_map<unsigned int,std::shared_ptr<proto::SceneEntitiesMoveCombineNotify>>::iterator __for_begin; // [rsp+10h] [rbp-B0h] BYREF
  std::unordered_map<unsigned int,std::shared_ptr<proto::SceneEntitiesMoveCombineNotify>>::iterator __for_end; // [rsp+18h] [rbp-A8h] BYREF
  std::unordered_map<unsigned int,std::shared_ptr<proto::SceneEntitiesMoveCombineNotify>> *__for_range; // [rsp+20h] [rbp-A0h]
  std::pair<unsigned int const,std::shared_ptr<proto::SceneEntitiesMoveCombineNotify> > *__in; // [rsp+28h] [rbp-98h]
  std::tuple_element<0,std::pair<unsigned int const,std::shared_ptr<proto::SceneEntitiesMoveCombineNotify> > >::type *uid; // [rsp+30h] [rbp-90h]
  std::tuple_element<1,std::pair<unsigned int const,std::shared_ptr<proto::SceneEntitiesMoveCombineNotify> > >::type *moves_notify_ptr; // [rsp+38h] [rbp-88h]
  std::shared_ptr<const google::protobuf::Message> p_msg_ptr; // [rsp+40h] [rbp-80h] BYREF
  char v14[112]; // [rsp+50h] [rbp-70h] BYREF

  v1 = (unsigned __int64)v14;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_0(64LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "1 32 16 14 player_ptr:117";
  *(_QWORD *)(v1 + 16) = SceneEntityMovesInfo::flushAllNotify;
  v3 = v1 >> 3;
  *(_DWORD *)(v3 + 2147450880) = -235802127;
  *(_DWORD *)(v3 + 2147450884) = -202178560;
  __for_range = &this->uid_notify_map;
  __for_begin._M_cur = std::unordered_map<unsigned int,std::shared_ptr<proto::SceneEntitiesMoveCombineNotify>>::begin(&this->uid_notify_map)._M_cur;
  __for_end._M_cur = std::unordered_map<unsigned int,std::shared_ptr<proto::SceneEntitiesMoveCombineNotify>>::end(&this->uid_notify_map)._M_cur;
  while ( std::__detail::operator!=<std::pair<unsigned int const,std::shared_ptr<proto::SceneEntitiesMoveCombineNotify>>,false>(
            &__for_begin,
            &__for_end) )
  {
    __in = std::__detail::_Node_iterator<std::pair<unsigned int const,std::shared_ptr<proto::SceneEntitiesMoveCombineNotify>>,false,false>::operator*(&__for_begin);
    uid = std::get<0ul,unsigned int const,std::shared_ptr<proto::SceneEntitiesMoveCombineNotify>>(__in);
    moves_notify_ptr = std::get<1ul,unsigned int const,std::shared_ptr<proto::SceneEntitiesMoveCombineNotify>>(__in);
    v4 = ServiceBox::findService<GameserverService>();
    v5 = (unsigned int)GameserverService::getGameThreadLocal(v4) + 16;
    if ( *(_BYTE *)(((unsigned __int64)uid >> 3) + 0x7FFF8000) != 0
      && (char)(((unsigned __int8)uid & 7) + 3) >= *(_BYTE *)(((unsigned __int64)uid >> 3) + 0x7FFF8000) )
    {
      __asan_report_load4(uid);
    }
    PlayerMgr::findOnlinePlayer((PlayerMgr *const)(v1 + 32), v5);
    if ( std::operator!=<Player>((const std::shared_ptr<Player> *)(v1 + 32), 0LL) )
    {
      v6 = std::__shared_ptr_access<Player,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Player,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v1 + 32));
      std::shared_ptr<google::protobuf::Message const>::shared_ptr<proto::SceneEntitiesMoveCombineNotify,void>(
        &p_msg_ptr,
        moves_notify_ptr);
      Player::sendMessage(v6, &p_msg_ptr, 0LL);
      std::shared_ptr<google::protobuf::Message const>::~shared_ptr(&p_msg_ptr);
    }
    std::shared_ptr<Player>::~shared_ptr((std::shared_ptr<Player> *const)(v1 + 32));
    std::__detail::_Node_iterator<std::pair<unsigned int const,std::shared_ptr<proto::SceneEntitiesMoveCombineNotify>>,false,false>::operator++(&__for_begin);
  }
  if ( v14 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
  }
};

// Line 128: range 0000000015971B9E-0000000015971C18
int32_t __cdecl MPLevelEntity::toClient(MPLevelEntity *const this, proto::MPLevelEntityInfo *team_info)
{
  uint32_t EntityId; // edx
  uint32_t AuthorityPeerId; // edx
  AbilityComp *AbilityComp; // rbx
  proto::AbilitySyncStateInfo *v5; // rax

  EntityId = Entity::getEntityId((const Entity *const)this);
  proto::MPLevelEntityInfo::set_entity_id(team_info, EntityId);
  AuthorityPeerId = Creature::getAuthorityPeerId(this);
  proto::MPLevelEntityInfo::set_authority_peer_id(team_info, AuthorityPeerId);
  AbilityComp = Creature::getAbilityComp(this);
  v5 = proto::MPLevelEntityInfo::mutable_ability_info(team_info);
  AbilityComp::toClient(AbilityComp, v5);
  return 0;
};

// Line 136: range 0000000015971C1A-0000000015971C28
int32_t __cdecl MPLevelEntity::initAbility(MPLevelEntity *const this)
{
  return 0;
};

// Line 142: range 0000000015971C2A-0000000015972D29
int32_t __cdecl Scene::fromBin(Scene *const this, const proto::SceneBin *scene_bin)
{
  unsigned __int64 v2; // r13
  __int64 v3; // rax
  _DWORD *v4; // r12
  unsigned __int64 v5; // rax
  unsigned __int64 v6; // rdx
  common::milog::MiLogStream *v7; // rax
  common::milog::MiLogStream *v8; // rax
  int32_t result; // eax
  const proto::ScenePlayerLocationBin *v10; // rax
  const proto::VectorBin *v11; // rax
  const proto::ScenePlayerLocationBin *v12; // rax
  const proto::VectorBin *v13; // rax
  const proto::ScenePlayerLocationBin *v14; // rax
  const proto::VectorBin *valid_pos; // rax
  const proto::ScenePlayerLocationBin *v16; // rax
  const proto::VectorBin *valid_rot; // rax
  unsigned __int64 n; // rax
  __int64 v19; // rdi
  __int64 v20; // rdi
  __int64 v21; // rdi
  const proto::SceneVehicleBin *v22; // rax
  const proto::VectorBin *v23; // rax
  const proto::VectorBin *v24; // rax
  unsigned __int64 v25; // rax
  __int64 v26; // rdi
  proto::SceneTagOpType v27; // r14d
  char *v28; // rsi
  std::unordered_map<unsigned int,proto::SceneTagOpType>::mapped_type *v29; // rax
  proto::SceneTagOpType *v30; // rdx
  char v31; // cl
  google::protobuf::RepeatedPtrField<proto::SceneVehicleBin>::const_iterator __for_begin_7; // [rsp+20h] [rbp-240h] BYREF
  google::protobuf::RepeatedPtrField<proto::SceneVehicleBin>::const_iterator __for_end_7; // [rsp+28h] [rbp-238h] BYREF
  google::protobuf::RepeatedField<unsigned int>::const_iterator __for_begin_0; // [rsp+30h] [rbp-230h]
  google::protobuf::RepeatedField<unsigned int>::const_iterator __for_begin_1; // [rsp+38h] [rbp-228h]
  google::protobuf::RepeatedField<unsigned int>::const_iterator __for_begin_2; // [rsp+40h] [rbp-220h]
  google::protobuf::RepeatedField<unsigned int>::const_iterator __for_begin_3; // [rsp+48h] [rbp-218h]
  google::protobuf::RepeatedField<unsigned int>::const_iterator __for_begin_4; // [rsp+50h] [rbp-210h]
  google::protobuf::RepeatedField<unsigned int>::const_iterator __for_begin_5; // [rsp+58h] [rbp-208h]
  google::protobuf::RepeatedField<unsigned int>::const_iterator __for_begin_6; // [rsp+60h] [rbp-200h]
  Scene *__for_range; // [rsp+68h] [rbp-1F8h]
  const google::protobuf::RepeatedField<unsigned int> *__for_range_0; // [rsp+70h] [rbp-1F0h]
  google::protobuf::RepeatedField<unsigned int>::const_iterator __for_end_0; // [rsp+78h] [rbp-1E8h]
  const google::protobuf::RepeatedField<unsigned int> *__for_range_1; // [rsp+80h] [rbp-1E0h]
  google::protobuf::RepeatedField<unsigned int>::const_iterator __for_end_1; // [rsp+88h] [rbp-1D8h]
  const google::protobuf::RepeatedField<unsigned int> *__for_range_2; // [rsp+90h] [rbp-1D0h]
  google::protobuf::RepeatedField<unsigned int>::const_iterator __for_end_2; // [rsp+98h] [rbp-1C8h]
  const google::protobuf::RepeatedField<unsigned int> *__for_range_3; // [rsp+A0h] [rbp-1C0h]
  google::protobuf::RepeatedField<unsigned int>::const_iterator __for_end_3; // [rsp+A8h] [rbp-1B8h]
  const google::protobuf::RepeatedField<unsigned int> *__for_range_4; // [rsp+B0h] [rbp-1B0h]
  google::protobuf::RepeatedField<unsigned int>::const_iterator __for_end_4; // [rsp+B8h] [rbp-1A8h]
  const google::protobuf::RepeatedField<unsigned int> *__for_range_5; // [rsp+C0h] [rbp-1A0h]
  google::protobuf::RepeatedField<unsigned int>::const_iterator __for_end_5; // [rsp+C8h] [rbp-198h]
  ScenePlayerLocationPtr *player_location_ptr; // [rsp+D0h] [rbp-190h]
  const google::protobuf::RepeatedField<unsigned int> *__for_range_6; // [rsp+D8h] [rbp-188h]
  google::protobuf::RepeatedField<unsigned int>::const_iterator __for_end_6; // [rsp+E0h] [rbp-180h]
  const google::protobuf::RepeatedPtrField<proto::SceneVehicleBin> *__for_range_7; // [rsp+E8h] [rbp-178h]
  const google::protobuf::RepeatedPtrField<proto::SceneTagOp> *__for_range_8; // [rsp+F0h] [rbp-170h]
  const proto::SceneTagOp *scene_tag_op; // [rsp+F8h] [rbp-168h]
  const std::pair<unsigned int,std::shared_ptr<SceneCompBase> > *v61; // [rsp+100h] [rbp-160h]
  std::tuple_element<0,const std::pair<unsigned int,std::shared_ptr<SceneCompBase> > >::type *comp_type; // [rsp+108h] [rbp-158h]
  std::tuple_element<1,const std::pair<unsigned int,std::shared_ptr<SceneCompBase> > >::type *comp_ptr; // [rsp+110h] [rbp-150h]
  Vector3 v64; // [rsp+118h] [rbp-148h] BYREF
  Vector3 v65; // [rsp+124h] [rbp-13Ch] BYREF
  EcsBase<Scene,SceneCompBase,12>::Iterator __for_begin; // [rsp+130h] [rbp-130h] BYREF
  EcsBase<Scene,SceneCompBase,12>::Iterator __for_end; // [rsp+140h] [rbp-120h] BYREF
  common::milog::MiLogStream v68; // [rsp+150h] [rbp-110h] BYREF
  char v69[240]; // [rsp+170h] [rbp-F0h] BYREF

  v2 = (unsigned __int64)v69;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_2(192LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "3 32 4 16 unlock_point:152 48 28 17 scene_vehicle:188 112 40 11 vehicle:186";
  *(_QWORD *)(v2 + 16) = Scene::fromBin;
  v4 = (_DWORD *)(v2 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = 61956;
  v4[536862722] = -219020288;
  v4[536862723] = 62194;
  v4[536862724] = -218103808;
  v4[536862725] = -202116109;
  __for_range = this;
  EcsBase<Scene,SceneCompBase,12u>::begin((const EcsBase<Scene,SceneCompBase,12> *const)&__for_begin);
  EcsBase<Scene,SceneCompBase,12u>::end((const EcsBase<Scene,SceneCompBase,12> *const)&__for_end);
  while ( EcsBase<Scene,SceneCompBase,12u>::Iterator::operator!=(&__for_begin, &__for_end) )
  {
    v61 = EcsBase<Scene,SceneCompBase,12u>::Iterator::operator*(&__for_begin);
    comp_type = (std::tuple_element<0,const std::pair<unsigned int,std::shared_ptr<SceneCompBase> > >::type *)std::get<0ul,unsigned int,std::shared_ptr<SceneCompBase>>(v61);
    comp_ptr = (std::tuple_element<1,const std::pair<unsigned int,std::shared_ptr<SceneCompBase> > >::type *)std::get<1ul,unsigned int,std::shared_ptr<SceneCompBase>>(v61);
    v5 = (unsigned __int64)std::__shared_ptr_access<SceneCompBase,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<SceneCompBase,(__gnu_cxx::_Lock_policy)2,false,false> *const)comp_ptr);
    if ( *(_BYTE *)((v5 >> 3) + 0x7FFF8000) )
      v5 = __asan_report_load8();
    v6 = *(_QWORD *)v5 + 16LL;
    if ( *(_BYTE *)((v6 >> 3) + 0x7FFF8000) )
      v5 = __asan_report_load8();
    if ( (*(unsigned int (__fastcall **)(unsigned __int64, const proto::SceneBin *))v6)(v5, scene_bin) )
    {
      common::milog::MiLogStream::create(
        &v68,
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/scene/scene.cpp",
        "fromBin",
        147);
      v7 = common::milog::MiLogStream::operator<<<char [12],(char *[12])0>(&v68, (const char (*)[12])"comp_type: ");
      v8 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v7, comp_type);
      common::milog::MiLogStream::operator<<<char [15],(char *[15])0>(v8, (const char (*)[15])" fromBin fails");
      common::milog::MiLogStream::~MiLogStream(&v68);
      result = -1;
      goto LABEL_75;
    }
    EcsBase<Scene,SceneCompBase,12u>::Iterator::operator++(&__for_begin);
  }
  __for_range_0 = proto::SceneBin::unlocked_point_list(scene_bin);
  __for_begin_0 = google::protobuf::RepeatedField<unsigned int>::begin(__for_range_0);
  __for_end_0 = google::protobuf::RepeatedField<unsigned int>::end(__for_range_0);
  while ( __for_begin_0 != __for_end_0 )
  {
    if ( *(_BYTE *)(((unsigned __int64)__for_begin_0 >> 3) + 0x7FFF8000) != 0
      && (char)(((unsigned __int8)__for_begin_0 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)__for_begin_0 >> 3)
                                                                      + 0x7FFF8000) )
    {
      __asan_report_load4(__for_begin_0);
    }
    *(_DWORD *)(v2 + 32) = *__for_begin_0;
    std::unordered_set<unsigned int>::insert(
      &this->unlock_info_.unlocked_point_set,
      (const std::unordered_set<unsigned int>::value_type *)(v2 + 32));
    ++__for_begin_0;
  }
  __for_range_1 = proto::SceneBin::unlocked_force_list(scene_bin);
  __for_begin_1 = google::protobuf::RepeatedField<unsigned int>::begin(__for_range_1);
  __for_end_1 = google::protobuf::RepeatedField<unsigned int>::end(__for_range_1);
  while ( __for_begin_1 != __for_end_1 )
  {
    if ( *(_BYTE *)(((unsigned __int64)__for_begin_1 >> 3) + 0x7FFF8000) != 0
      && (char)(((unsigned __int8)__for_begin_1 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)__for_begin_1 >> 3)
                                                                      + 0x7FFF8000) )
    {
      __asan_report_load4(__for_begin_1);
    }
    *(_DWORD *)(v2 + 32) = *__for_begin_1;
    std::unordered_set<unsigned int>::insert(
      &this->unlock_info_.unlocked_force_set,
      (const std::unordered_set<unsigned int>::value_type *)(v2 + 32));
    ++__for_begin_1;
  }
  __for_range_2 = proto::SceneBin::locked_point_list(scene_bin);
  __for_begin_2 = google::protobuf::RepeatedField<unsigned int>::begin(__for_range_2);
  __for_end_2 = google::protobuf::RepeatedField<unsigned int>::end(__for_range_2);
  while ( __for_begin_2 != __for_end_2 )
  {
    if ( *(_BYTE *)(((unsigned __int64)__for_begin_2 >> 3) + 0x7FFF8000) != 0
      && (char)(((unsigned __int8)__for_begin_2 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)__for_begin_2 >> 3)
                                                                      + 0x7FFF8000) )
    {
      __asan_report_load4(__for_begin_2);
    }
    *(_DWORD *)(v2 + 32) = *__for_begin_2;
    std::unordered_set<unsigned int>::insert(
      &this->unlock_info_.locked_point_set,
      (const std::unordered_set<unsigned int>::value_type *)(v2 + 32));
    ++__for_begin_2;
  }
  __for_range_3 = proto::SceneBin::group_unlimit_point_list(scene_bin);
  __for_begin_3 = google::protobuf::RepeatedField<unsigned int>::begin(__for_range_3);
  __for_end_3 = google::protobuf::RepeatedField<unsigned int>::end(__for_range_3);
  while ( __for_begin_3 != __for_end_3 )
  {
    if ( *(_BYTE *)(((unsigned __int64)__for_begin_3 >> 3) + 0x7FFF8000) != 0
      && (char)(((unsigned __int8)__for_begin_3 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)__for_begin_3 >> 3)
                                                                      + 0x7FFF8000) )
    {
      __asan_report_load4(__for_begin_3);
    }
    *(_DWORD *)(v2 + 32) = *__for_begin_3;
    std::unordered_set<unsigned int>::insert(
      &this->unlock_info_.group_unlimit_point_set,
      (const std::unordered_set<unsigned int>::value_type *)(v2 + 32));
    ++__for_begin_3;
  }
  __for_range_4 = proto::SceneBin::hide_point_list(scene_bin);
  __for_begin_4 = google::protobuf::RepeatedField<unsigned int>::begin(__for_range_4);
  __for_end_4 = google::protobuf::RepeatedField<unsigned int>::end(__for_range_4);
  while ( __for_begin_4 != __for_end_4 )
  {
    if ( *(_BYTE *)(((unsigned __int64)__for_begin_4 >> 3) + 0x7FFF8000) != 0
      && (char)(((unsigned __int8)__for_begin_4 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)__for_begin_4 >> 3)
                                                                      + 0x7FFF8000) )
    {
      __asan_report_load4(__for_begin_4);
    }
    *(_DWORD *)(v2 + 32) = *__for_begin_4;
    std::unordered_set<unsigned int>::insert(
      &this->unlock_info_.hide_point_set,
      (const std::unordered_set<unsigned int>::value_type *)(v2 + 32));
    ++__for_begin_4;
  }
  __for_range_5 = proto::SceneBin::unhide_point_list(scene_bin);
  __for_begin_5 = google::protobuf::RepeatedField<unsigned int>::begin(__for_range_5);
  __for_end_5 = google::protobuf::RepeatedField<unsigned int>::end(__for_range_5);
  while ( __for_begin_5 != __for_end_5 )
  {
    if ( *(_BYTE *)(((unsigned __int64)__for_begin_5 >> 3) + 0x7FFF8000) != 0
      && (char)(((unsigned __int8)__for_begin_5 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)__for_begin_5 >> 3)
                                                                      + 0x7FFF8000) )
    {
      __asan_report_load4(__for_begin_5);
    }
    *(_DWORD *)(v2 + 32) = *__for_begin_5;
    std::unordered_set<unsigned int>::insert(
      &this->unlock_info_.unhide_point_set,
      (const std::unordered_set<unsigned int>::value_type *)(v2 + 32));
    ++__for_begin_5;
  }
  v10 = proto::SceneBin::owner_player_location(scene_bin);
  v11 = proto::ScenePlayerLocationBin::cur_pos(v10);
  Vector3::Vector3(&v65, v11);
  if ( *(char *)(((unsigned __int64)&this->owner_player_location_ >> 3) + 0x7FFF8000) < 0
    || *(_BYTE *)((((unsigned __int64)&this->owner_player_location_.cur_pos.z + 3) >> 3) + 0x7FFF8000) != 0
    && (((unsigned __int8)this + 107) & 7) >= *(_BYTE *)((((unsigned __int64)&this->owner_player_location_.cur_pos.z + 3) >> 3)
                                                       + 0x7FFF8000) )
  {
    __asan_report_store_n(&this->owner_player_location_, 12LL);
  }
  this->owner_player_location_.cur_pos = v65;
  v12 = proto::SceneBin::owner_player_location(scene_bin);
  v13 = proto::ScenePlayerLocationBin::cur_rot(v12);
  Vector3::Vector3(&v65, v13);
  if ( (((unsigned __int8)this + 108) & 7) >= *(_BYTE *)(((unsigned __int64)&this->owner_player_location_.cur_rot >> 3)
                                                       + 0x7FFF8000)
    && *(_BYTE *)(((unsigned __int64)&this->owner_player_location_.cur_rot >> 3) + 0x7FFF8000) != 0
    || *(_BYTE *)((((unsigned __int64)&this->owner_player_location_.cur_rot.z + 3) >> 3) + 0x7FFF8000) != 0
    && (((unsigned __int8)this + 119) & 7) >= *(_BYTE *)((((unsigned __int64)&this->owner_player_location_.cur_rot.z + 3) >> 3)
                                                       + 0x7FFF8000) )
  {
    __asan_report_store_n(&this->owner_player_location_.cur_rot, 12LL);
  }
  this->owner_player_location_.cur_rot = v65;
  v14 = proto::SceneBin::owner_player_location(scene_bin);
  valid_pos = proto::ScenePlayerLocationBin::last_valid_pos(v14);
  Vector3::Vector3(&v65, valid_pos);
  if ( *(char *)(((unsigned __int64)&this->owner_player_location_.last_valid_pos >> 3) + 0x7FFF8000) < 0
    || *(_BYTE *)((((unsigned __int64)&this->owner_player_location_.last_valid_pos.z + 3) >> 3) + 0x7FFF8000) != 0
    && (((unsigned __int8)this - 125) & 7) >= *(_BYTE *)((((unsigned __int64)&this->owner_player_location_.last_valid_pos.z
                                                         + 3) >> 3)
                                                       + 0x7FFF8000) )
  {
    __asan_report_store_n(&this->owner_player_location_.last_valid_pos, 12LL);
  }
  this->owner_player_location_.last_valid_pos = v65;
  v16 = proto::SceneBin::owner_player_location(scene_bin);
  valid_rot = proto::ScenePlayerLocationBin::last_valid_rot(v16);
  Vector3::Vector3(&v65, valid_rot);
  if ( (((unsigned __int8)this - 124) & 7) >= *(_BYTE *)(((unsigned __int64)&this->owner_player_location_.last_valid_rot >> 3)
                                                       + 0x7FFF8000)
    && *(_BYTE *)(((unsigned __int64)&this->owner_player_location_.last_valid_rot >> 3) + 0x7FFF8000) != 0
    || *(_BYTE *)((((unsigned __int64)&this->owner_player_location_.last_valid_rot.z + 3) >> 3) + 0x7FFF8000) != 0
    && (((unsigned __int8)this - 113) & 7) >= *(_BYTE *)((((unsigned __int64)&this->owner_player_location_.last_valid_rot.z
                                                         + 3) >> 3)
                                                       + 0x7FFF8000) )
  {
    __asan_report_store_n(&this->owner_player_location_.last_valid_rot, 12LL);
  }
  this->owner_player_location_.last_valid_rot = v65;
  *(_DWORD *)(v2 + 32) = Scene::getOwnerUid(this);
  player_location_ptr = std::map<unsigned int,std::shared_ptr<ScenePlayerLocation>>::operator[](
                          &this->player_location_map_,
                          (std::map<unsigned int,std::shared_ptr<ScenePlayerLocation>>::key_type *)(v2 + 32));
  if ( std::operator==<ScenePlayerLocation>(player_location_ptr, 0LL) )
  {
    common::tools::perf::make_shared<ScenePlayerLocation>();
    std::shared_ptr<ScenePlayerLocation>::operator=(
      player_location_ptr,
      (std::shared_ptr<ScenePlayerLocation> *)&__for_end);
    std::shared_ptr<ScenePlayerLocation>::~shared_ptr((std::shared_ptr<ScenePlayerLocation> *const)&__for_end);
  }
  if ( std::operator==<ScenePlayerLocation>(player_location_ptr, 0LL) )
  {
    common::milog::MiLogStream::create(
      &v68,
      &common::milog::MiLogDefault::default_log_obj_,
      4u,
      "./src/scene/scene.cpp",
      "fromBin",
      178);
    common::milog::MiLogStream::operator<<<char [31],(char *[31])0>(
      &v68,
      (const char (*)[31])"player_location_ptr is nullptr");
    common::milog::MiLogStream::~MiLogStream(&v68);
    result = -1;
  }
  else
  {
    n = (unsigned __int64)std::__shared_ptr_access<ScenePlayerLocation,(__gnu_cxx::_Lock_policy)2,false,false>::operator*((const std::__shared_ptr_access<ScenePlayerLocation,(__gnu_cxx::_Lock_policy)2,false,false> *const)player_location_ptr);
    if ( (char)(n & 7) >= *(_BYTE *)((n >> 3) + 0x7FFF8000) && *(_BYTE *)((n >> 3) + 0x7FFF8000) != 0
      || *(_BYTE *)(((n + 47) >> 3) + 0x7FFF8000) != 0
      && (char)((n + 47) & 7) >= *(_BYTE *)(((n + 47) >> 3) + 0x7FFF8000) )
    {
      n = __asan_report_store_n(n, 48LL);
    }
    if ( *(char *)(((unsigned __int64)&this->owner_player_location_ >> 3) + 0x7FFF8000) < 0
      || *(_BYTE *)((((unsigned __int64)&this->owner_player_location_.last_valid_rot.z + 3) >> 3) + 0x7FFF8000) != 0
      && (((unsigned __int8)this - 113) & 7) >= *(_BYTE *)((((unsigned __int64)&this->owner_player_location_.last_valid_rot.z
                                                           + 3) >> 3)
                                                         + 0x7FFF8000) )
    {
      n = __asan_report_load_n(&this->owner_player_location_, 48LL);
    }
    v19 = *(_QWORD *)&this->owner_player_location_.cur_pos.z;
    *(_QWORD *)n = *(_QWORD *)&this->owner_player_location_.cur_pos.x;
    *(_QWORD *)(n + 8) = v19;
    v20 = *(_QWORD *)&this->owner_player_location_.last_valid_pos.x;
    *(_QWORD *)(n + 16) = *(_QWORD *)&this->owner_player_location_.cur_rot.y;
    *(_QWORD *)(n + 24) = v20;
    v21 = *(_QWORD *)&this->owner_player_location_.last_valid_rot.y;
    *(_QWORD *)(n + 32) = *(_QWORD *)&this->owner_player_location_.last_valid_pos.z;
    *(_QWORD *)(n + 40) = v21;
    __for_range_6 = proto::SceneBin::interacted_to_be_explored_point_list(scene_bin);
    __for_begin_6 = google::protobuf::RepeatedField<unsigned int>::begin(__for_range_6);
    __for_end_6 = google::protobuf::RepeatedField<unsigned int>::end(__for_range_6);
    while ( __for_begin_6 != __for_end_6 )
    {
      if ( *(_BYTE *)(((unsigned __int64)__for_begin_6 >> 3) + 0x7FFF8000) != 0
        && (char)(((unsigned __int8)__for_begin_6 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)__for_begin_6 >> 3)
                                                                        + 0x7FFF8000) )
      {
        __asan_report_load4(__for_begin_6);
      }
      *(_DWORD *)(v2 + 32) = *__for_begin_6;
      std::unordered_set<unsigned int>::insert(
        &this->interacted_to_be_explored_dungeon_entry_config_id_set_,
        (const std::unordered_set<unsigned int>::value_type *)(v2 + 32));
      ++__for_begin_6;
    }
    __for_range_7 = proto::SceneBin::vehicle_list(scene_bin);
    __for_begin_7.it_ = google::protobuf::RepeatedPtrField<proto::SceneVehicleBin>::begin(__for_range_7).it_;
    __for_end_7.it_ = google::protobuf::RepeatedPtrField<proto::SceneVehicleBin>::end(__for_range_7).it_;
    while ( google::protobuf::internal::RepeatedPtrIterator<proto::SceneVehicleBin const>::operator!=(
              &__for_begin_7,
              &__for_end_7) )
    {
      v22 = google::protobuf::internal::RepeatedPtrIterator<proto::SceneVehicleBin const>::operator*(&__for_begin_7);
      proto::SceneVehicleBin::SceneVehicleBin((proto::SceneVehicleBin *const)(v2 + 112), v22);
      SceneVehicle::SceneVehicle((SceneVehicle *const)(v2 + 48));
      *(_DWORD *)(v2 + 48) = proto::SceneVehicleBin::config_id((const proto::SceneVehicleBin *const)(v2 + 112));
      v23 = proto::SceneVehicleBin::cur_pos((const proto::SceneVehicleBin *const)(v2 + 112));
      Vector3::Vector3(&v64, v23);
      *(Vector3 *)(v2 + 52) = v64;
      v24 = proto::SceneVehicleBin::cur_rot((const proto::SceneVehicleBin *const)(v2 + 112));
      Vector3::Vector3(&v65, v24);
      *(Vector3 *)(v2 + 64) = v65;
      v25 = (unsigned __int64)std::map<unsigned int,SceneVehicle>::operator[](
                                &this->vehicle_map_,
                                (const std::map<unsigned int,SceneVehicle>::key_type *)(v2 + 48));
      if ( (char)(v25 & 7) >= *(_BYTE *)((v25 >> 3) + 0x7FFF8000) && *(_BYTE *)((v25 >> 3) + 0x7FFF8000) != 0
        || *(_BYTE *)(((v25 + 27) >> 3) + 0x7FFF8000) != 0
        && (char)((v25 + 27) & 7) >= *(_BYTE *)(((v25 + 27) >> 3) + 0x7FFF8000) )
      {
        v25 = __asan_report_store_n(v25, 28LL);
      }
      v26 = *(_QWORD *)(v2 + 56);
      *(_QWORD *)v25 = *(_QWORD *)(v2 + 48);
      *(_QWORD *)(v25 + 8) = v26;
      *(_QWORD *)(v25 + 16) = *(_QWORD *)(v2 + 64);
      *(_DWORD *)(v25 + 24) = *(_DWORD *)(v2 + 72);
      proto::SceneVehicleBin::~SceneVehicleBin((proto::SceneVehicleBin *const)(v2 + 112));
      google::protobuf::internal::RepeatedPtrIterator<proto::SceneVehicleBin const>::operator++(&__for_begin_7);
    }
    __for_range_8 = proto::SceneBin::scene_tag_op_list(scene_bin);
    __for_begin_7.it_ = google::protobuf::RepeatedPtrField<proto::SceneTagOp>::begin(__for_range_8).it_;
    __for_end_7.it_ = google::protobuf::RepeatedPtrField<proto::SceneTagOp>::end(__for_range_8).it_;
    while ( google::protobuf::internal::RepeatedPtrIterator<proto::SceneTagOp const>::operator!=(
              (const google::protobuf::internal::RepeatedPtrIterator<const proto::SceneTagOp> *const)&__for_begin_7,
              (const google::protobuf::internal::RepeatedPtrIterator<const proto::SceneTagOp>::iterator *)&__for_end_7) )
    {
      scene_tag_op = google::protobuf::internal::RepeatedPtrIterator<proto::SceneTagOp const>::operator*((const google::protobuf::internal::RepeatedPtrIterator<const proto::SceneTagOp> *const)&__for_begin_7);
      v27 = proto::SceneTagOp::op_type(scene_tag_op);
      *(_DWORD *)(v2 + 32) = proto::SceneTagOp::id(scene_tag_op);
      v28 = (char *)(v2 + 32);
      v29 = std::unordered_map<unsigned int,proto::SceneTagOpType>::operator[](
              &this->scene_tag_op_map_,
              (std::unordered_map<unsigned int,proto::SceneTagOpType>::key_type *)(v2 + 32));
      v30 = v29;
      v31 = *(_BYTE *)(((unsigned __int64)v29 >> 3) + 0x7FFF8000);
      if ( v31 != 0 && (char)(((unsigned __int8)v29 & 7) + 3) >= v31 )
      {
        LOBYTE(v28) = v31 != 0;
        __asan_report_store4(v29, v28, (_BYTE)v29);
      }
      *v30 = v27;
      google::protobuf::internal::RepeatedPtrIterator<proto::SceneTagOp const>::operator++((google::protobuf::internal::RepeatedPtrIterator<const proto::SceneTagOp> *const)&__for_begin_7);
    }
    result = 0;
  }
LABEL_75:
  if ( v69 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8010) = 0LL;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 204: range 0000000015972D2A-0000000015973C3B
int32_t __cdecl Scene::toBin(const Scene *const this, proto::SceneBin *scene_bin)
{
  unsigned __int64 v2; // r12
  __int64 v3; // rax
  _DWORD *v4; // r13
  unsigned __int64 v5; // rax
  unsigned __int64 v6; // rdx
  common::milog::MiLogStream *v7; // rax
  common::milog::MiLogStream *v8; // rax
  int32_t result; // eax
  unsigned int *v10; // rax
  google::protobuf::uint32 *v11; // rdx
  unsigned int *v12; // rax
  google::protobuf::uint32 *v13; // rdx
  unsigned int *v14; // rax
  google::protobuf::uint32 *v15; // rdx
  unsigned int *v16; // rax
  google::protobuf::uint32 *v17; // rdx
  unsigned int *v18; // rax
  google::protobuf::uint32 *v19; // rdx
  unsigned int *v20; // rax
  google::protobuf::uint32 *v21; // rdx
  proto::VectorBin *v22; // rax
  proto::VectorBin *v23; // rax
  proto::VectorBin *valid_pos; // rax
  proto::VectorBin *valid_rot; // rax
  unsigned int *v26; // rax
  google::protobuf::uint32 *v27; // rdx
  std::tuple_element<0,const std::pair<unsigned int const,std::map<unsigned int,std::weak_ptr<Gadget>> > >::type v28; // ecx
  std::__shared_ptr_access<Gadget,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v29; // rax
  std::__shared_ptr_access<Gadget,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v30; // rax
  unsigned __int64 Position; // rax
  std::__shared_ptr_access<Gadget,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v32; // rax
  unsigned __int64 Rotation; // rax
  proto::VectorBin *v34; // rax
  proto::VectorBin *v35; // rax
  google::protobuf::uint32 config_id; // [rsp+10h] [rbp-1F0h]
  std::map<unsigned int,std::map<unsigned int,std::weak_ptr<Gadget>>>::const_iterator __for_begin_1; // [rsp+30h] [rbp-1D0h] BYREF
  std::map<unsigned int,std::map<unsigned int,std::weak_ptr<Gadget>>>::const_iterator __for_end_0; // [rsp+38h] [rbp-1C8h] BYREF
  std::unordered_set<unsigned int>::const_iterator __for_begin_0; // [rsp+40h] [rbp-1C0h] BYREF
  std::unordered_set<unsigned int>::const_iterator __for_end; // [rsp+48h] [rbp-1B8h] BYREF
  const Scene *__for_range; // [rsp+50h] [rbp-1B0h]
  const std::unordered_set<unsigned int> *__for_range_0; // [rsp+58h] [rbp-1A8h]
  const std::unordered_set<unsigned int> *__for_range_1; // [rsp+60h] [rbp-1A0h]
  const std::unordered_set<unsigned int> *__for_range_2; // [rsp+68h] [rbp-198h]
  const std::unordered_set<unsigned int> *__for_range_3; // [rsp+70h] [rbp-190h]
  const std::unordered_set<unsigned int> *__for_range_4; // [rsp+78h] [rbp-188h]
  const std::unordered_set<unsigned int> *__for_range_5; // [rsp+80h] [rbp-180h]
  proto::ScenePlayerLocationBin *player_location_bin; // [rsp+88h] [rbp-178h]
  const std::unordered_set<unsigned int> *__for_range_6; // [rsp+90h] [rbp-170h]
  const std::map<unsigned int,std::map<unsigned int,std::weak_ptr<Gadget>>> *__for_range_7; // [rsp+98h] [rbp-168h]
  const std::unordered_map<unsigned int,proto::SceneTagOpType> *__for_range_9; // [rsp+A0h] [rbp-160h]
  const std::pair<unsigned int const,proto::SceneTagOpType> *v52; // [rsp+A8h] [rbp-158h]
  std::tuple_element<0,const std::pair<unsigned int const,proto::SceneTagOpType> >::type *id; // [rsp+B0h] [rbp-150h]
  std::tuple_element<1,const std::pair<unsigned int const,proto::SceneTagOpType> >::type *op_type; // [rsp+B8h] [rbp-148h]
  proto::SceneTagOp *proto_scene_tag_op; // [rsp+C0h] [rbp-140h]
  const std::pair<unsigned int const,std::map<unsigned int,std::weak_ptr<Gadget>> > *v56; // [rsp+C8h] [rbp-138h]
  std::tuple_element<0,const std::pair<unsigned int const,std::map<unsigned int,std::weak_ptr<Gadget>> > >::type *uid; // [rsp+D0h] [rbp-130h]
  std::tuple_element<1,const std::pair<unsigned int const,std::map<unsigned int,std::weak_ptr<Gadget>> > >::type *vehicle_map; // [rsp+D8h] [rbp-128h]
  const std::map<unsigned int,std::weak_ptr<Gadget>> *__for_range_8; // [rsp+E0h] [rbp-120h]
  const std::pair<unsigned int const,std::weak_ptr<Gadget> > *v60; // [rsp+E8h] [rbp-118h]
  std::tuple_element<0,const std::pair<unsigned int const,std::weak_ptr<Gadget> > >::type *_; // [rsp+F0h] [rbp-110h]
  std::tuple_element<1,const std::pair<unsigned int const,std::weak_ptr<Gadget> > >::type *gadget_wtr; // [rsp+F8h] [rbp-108h]
  proto::SceneVehicleBin *vehicle_proto; // [rsp+100h] [rbp-100h]
  const std::pair<unsigned int,std::shared_ptr<SceneCompBase> > *v64; // [rsp+108h] [rbp-F8h]
  std::tuple_element<0,const std::pair<unsigned int,std::shared_ptr<SceneCompBase> > >::type *comp_type; // [rsp+110h] [rbp-F0h]
  std::tuple_element<1,const std::pair<unsigned int,std::shared_ptr<SceneCompBase> > >::type *comp_ptr; // [rsp+118h] [rbp-E8h]
  EcsBase<Scene,SceneCompBase,12>::Iterator __for_begin; // [rsp+120h] [rbp-E0h] BYREF
  common::milog::MiLogStream v68; // [rsp+130h] [rbp-D0h] BYREF
  char v69[176]; // [rsp+150h] [rbp-B0h] BYREF

  v2 = (unsigned __int64)v69;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_1(128LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "3 32 12 11 cur_pos:254 64 12 11 cur_rot:255 96 16 14 gadget_ptr:244";
  *(_QWORD *)(v2 + 16) = Scene::toBin;
  v4 = (_DWORD *)(v2 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = -219020288;
  v4[536862722] = -219020288;
  v4[536862723] = -202178560;
  __for_range = this;
  EcsBase<Scene,SceneCompBase,12u>::begin((const EcsBase<Scene,SceneCompBase,12> *const)&__for_begin);
  EcsBase<Scene,SceneCompBase,12u>::end((const EcsBase<Scene,SceneCompBase,12> *const)(v2 + 96));
  while ( EcsBase<Scene,SceneCompBase,12u>::Iterator::operator!=(
            &__for_begin,
            (const EcsBase<Scene,SceneCompBase,12>::Iterator *)(v2 + 96)) )
  {
    v64 = EcsBase<Scene,SceneCompBase,12u>::Iterator::operator*(&__for_begin);
    comp_type = (std::tuple_element<0,const std::pair<unsigned int,std::shared_ptr<SceneCompBase> > >::type *)std::get<0ul,unsigned int,std::shared_ptr<SceneCompBase>>(v64);
    comp_ptr = (std::tuple_element<1,const std::pair<unsigned int,std::shared_ptr<SceneCompBase> > >::type *)std::get<1ul,unsigned int,std::shared_ptr<SceneCompBase>>(v64);
    v5 = (unsigned __int64)std::__shared_ptr_access<SceneCompBase,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<SceneCompBase,(__gnu_cxx::_Lock_policy)2,false,false> *const)comp_ptr);
    if ( *(_BYTE *)((v5 >> 3) + 0x7FFF8000) )
      v5 = __asan_report_load8();
    v6 = *(_QWORD *)v5 + 24LL;
    if ( *(_BYTE *)((v6 >> 3) + 0x7FFF8000) )
      v5 = __asan_report_load8();
    if ( (*(unsigned int (__fastcall **)(unsigned __int64, proto::SceneBin *))v6)(v5, scene_bin) )
    {
      common::milog::MiLogStream::create(
        &v68,
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/scene/scene.cpp",
        "toBin",
        209);
      v7 = common::milog::MiLogStream::operator<<<char [12],(char *[12])0>(&v68, (const char (*)[12])"comp_type: ");
      v8 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v7, comp_type);
      common::milog::MiLogStream::operator<<<char [13],(char *[13])0>(v8, (const char (*)[13])" toBin fails");
      common::milog::MiLogStream::~MiLogStream(&v68);
      result = -1;
      goto LABEL_74;
    }
    EcsBase<Scene,SceneCompBase,12u>::Iterator::operator++(&__for_begin);
  }
  __for_range_0 = &this->unlock_info_.unlocked_point_set;
  __for_begin_0._M_cur = std::unordered_set<unsigned int>::begin(&this->unlock_info_.unlocked_point_set)._M_cur;
  __for_end._M_cur = std::unordered_set<unsigned int>::end(&this->unlock_info_.unlocked_point_set)._M_cur;
  while ( std::__detail::operator!=<unsigned int,false>(&__for_begin_0, &__for_end) )
  {
    v10 = (unsigned int *)std::__detail::_Node_const_iterator<unsigned int,true,false>::operator*(&__for_begin_0);
    v11 = v10;
    if ( *(_BYTE *)(((unsigned __int64)v10 >> 3) + 0x7FFF8000) != 0
      && (char)(((unsigned __int8)v10 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)v10 >> 3) + 0x7FFF8000) )
    {
      __asan_report_load4(v10);
    }
    proto::SceneBin::add_unlocked_point_list(scene_bin, *v11);
    std::__detail::_Node_const_iterator<unsigned int,true,false>::operator++(&__for_begin_0);
  }
  __for_range_1 = &this->unlock_info_.unlocked_force_set;
  __for_begin_0._M_cur = std::unordered_set<unsigned int>::begin(&this->unlock_info_.unlocked_force_set)._M_cur;
  __for_end._M_cur = std::unordered_set<unsigned int>::end(__for_range_1)._M_cur;
  while ( std::__detail::operator!=<unsigned int,false>(&__for_begin_0, &__for_end) )
  {
    v12 = (unsigned int *)std::__detail::_Node_const_iterator<unsigned int,true,false>::operator*(&__for_begin_0);
    v13 = v12;
    if ( *(_BYTE *)(((unsigned __int64)v12 >> 3) + 0x7FFF8000) != 0
      && (char)(((unsigned __int8)v12 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)v12 >> 3) + 0x7FFF8000) )
    {
      __asan_report_load4(v12);
    }
    proto::SceneBin::add_unlocked_force_list(scene_bin, *v13);
    std::__detail::_Node_const_iterator<unsigned int,true,false>::operator++(&__for_begin_0);
  }
  __for_range_2 = &this->unlock_info_.locked_point_set;
  __for_begin_0._M_cur = std::unordered_set<unsigned int>::begin(&this->unlock_info_.locked_point_set)._M_cur;
  __for_end._M_cur = std::unordered_set<unsigned int>::end(__for_range_2)._M_cur;
  while ( std::__detail::operator!=<unsigned int,false>(&__for_begin_0, &__for_end) )
  {
    v14 = (unsigned int *)std::__detail::_Node_const_iterator<unsigned int,true,false>::operator*(&__for_begin_0);
    v15 = v14;
    if ( *(_BYTE *)(((unsigned __int64)v14 >> 3) + 0x7FFF8000) != 0
      && (char)(((unsigned __int8)v14 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)v14 >> 3) + 0x7FFF8000) )
    {
      __asan_report_load4(v14);
    }
    proto::SceneBin::add_locked_point_list(scene_bin, *v15);
    std::__detail::_Node_const_iterator<unsigned int,true,false>::operator++(&__for_begin_0);
  }
  __for_range_3 = &this->unlock_info_.group_unlimit_point_set;
  __for_begin_0._M_cur = std::unordered_set<unsigned int>::begin(&this->unlock_info_.group_unlimit_point_set)._M_cur;
  __for_end._M_cur = std::unordered_set<unsigned int>::end(__for_range_3)._M_cur;
  while ( std::__detail::operator!=<unsigned int,false>(&__for_begin_0, &__for_end) )
  {
    v16 = (unsigned int *)std::__detail::_Node_const_iterator<unsigned int,true,false>::operator*(&__for_begin_0);
    v17 = v16;
    if ( *(_BYTE *)(((unsigned __int64)v16 >> 3) + 0x7FFF8000) != 0
      && (char)(((unsigned __int8)v16 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)v16 >> 3) + 0x7FFF8000) )
    {
      __asan_report_load4(v16);
    }
    proto::SceneBin::add_group_unlimit_point_list(scene_bin, *v17);
    std::__detail::_Node_const_iterator<unsigned int,true,false>::operator++(&__for_begin_0);
  }
  __for_range_4 = &this->unlock_info_.hide_point_set;
  __for_begin_0._M_cur = std::unordered_set<unsigned int>::begin(&this->unlock_info_.hide_point_set)._M_cur;
  __for_end._M_cur = std::unordered_set<unsigned int>::end(__for_range_4)._M_cur;
  while ( std::__detail::operator!=<unsigned int,false>(&__for_begin_0, &__for_end) )
  {
    v18 = (unsigned int *)std::__detail::_Node_const_iterator<unsigned int,true,false>::operator*(&__for_begin_0);
    v19 = v18;
    if ( *(_BYTE *)(((unsigned __int64)v18 >> 3) + 0x7FFF8000) != 0
      && (char)(((unsigned __int8)v18 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)v18 >> 3) + 0x7FFF8000) )
    {
      __asan_report_load4(v18);
    }
    proto::SceneBin::add_hide_point_list(scene_bin, *v19);
    std::__detail::_Node_const_iterator<unsigned int,true,false>::operator++(&__for_begin_0);
  }
  __for_range_5 = &this->unlock_info_.unhide_point_set;
  __for_begin_0._M_cur = std::unordered_set<unsigned int>::begin(&this->unlock_info_.unhide_point_set)._M_cur;
  __for_end._M_cur = std::unordered_set<unsigned int>::end(__for_range_5)._M_cur;
  while ( std::__detail::operator!=<unsigned int,false>(&__for_begin_0, &__for_end) )
  {
    v20 = (unsigned int *)std::__detail::_Node_const_iterator<unsigned int,true,false>::operator*(&__for_begin_0);
    v21 = v20;
    if ( *(_BYTE *)(((unsigned __int64)v20 >> 3) + 0x7FFF8000) != 0
      && (char)(((unsigned __int8)v20 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)v20 >> 3) + 0x7FFF8000) )
    {
      __asan_report_load4(v20);
    }
    proto::SceneBin::add_unhide_point_list(scene_bin, *v21);
    std::__detail::_Node_const_iterator<unsigned int,true,false>::operator++(&__for_begin_0);
  }
  player_location_bin = proto::SceneBin::mutable_owner_player_location(scene_bin);
  v22 = proto::ScenePlayerLocationBin::mutable_cur_pos(player_location_bin);
  Vector3::toBin(&this->owner_player_location_.cur_pos, v22);
  v23 = proto::ScenePlayerLocationBin::mutable_cur_rot(player_location_bin);
  Vector3::toBin(&this->owner_player_location_.cur_rot, v23);
  valid_pos = proto::ScenePlayerLocationBin::mutable_last_valid_pos(player_location_bin);
  Vector3::toBin(&this->owner_player_location_.last_valid_pos, valid_pos);
  valid_rot = proto::ScenePlayerLocationBin::mutable_last_valid_rot(player_location_bin);
  Vector3::toBin(&this->owner_player_location_.last_valid_rot, valid_rot);
  __for_range_6 = &this->interacted_to_be_explored_dungeon_entry_config_id_set_;
  __for_begin_0._M_cur = std::unordered_set<unsigned int>::begin(&this->interacted_to_be_explored_dungeon_entry_config_id_set_)._M_cur;
  __for_end._M_cur = std::unordered_set<unsigned int>::end(__for_range_6)._M_cur;
  while ( std::__detail::operator!=<unsigned int,false>(&__for_begin_0, &__for_end) )
  {
    v26 = (unsigned int *)std::__detail::_Node_const_iterator<unsigned int,true,false>::operator*(&__for_begin_0);
    v27 = v26;
    if ( *(_BYTE *)(((unsigned __int64)v26 >> 3) + 0x7FFF8000) != 0
      && (char)(((unsigned __int8)v26 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)v26 >> 3) + 0x7FFF8000) )
    {
      __asan_report_load4(v26);
    }
    proto::SceneBin::add_interacted_to_be_explored_point_list(scene_bin, *v27);
    std::__detail::_Node_const_iterator<unsigned int,true,false>::operator++(&__for_begin_0);
  }
  __for_range_7 = &this->player_vehicle_map_;
  __for_begin_1._M_node = std::map<unsigned int,std::map<unsigned int,std::weak_ptr<Gadget>>>::begin(&this->player_vehicle_map_)._M_node;
  __for_end_0._M_node = std::map<unsigned int,std::map<unsigned int,std::weak_ptr<Gadget>>>::end(__for_range_7)._M_node;
  while ( std::operator!=(&__for_begin_1, &__for_end_0) )
  {
    v56 = std::_Rb_tree_const_iterator<std::pair<unsigned int const,std::map<unsigned int,std::weak_ptr<Gadget>>>>::operator*(&__for_begin_1);
    uid = std::get<0ul,unsigned int const,std::map<unsigned int,std::weak_ptr<Gadget>>>(v56);
    vehicle_map = (std::tuple_element<1,const std::pair<unsigned int const,std::map<unsigned int,std::weak_ptr<Gadget>> > >::type *)std::get<1ul,unsigned int const,std::map<unsigned int,std::weak_ptr<Gadget>>>(v56);
    if ( *(_BYTE *)(((unsigned __int64)uid >> 3) + 0x7FFF8000) != 0
      && (char)(((unsigned __int8)uid & 7) + 3) >= *(_BYTE *)(((unsigned __int64)uid >> 3) + 0x7FFF8000) )
    {
      __asan_report_load4(uid);
    }
    v28 = *uid;
    if ( *(_BYTE *)(((unsigned __int64)&this->owner_uid_ >> 3) + 0x7FFF8000) != 0
      && *(_BYTE *)(((unsigned __int64)&this->owner_uid_ >> 3) + 0x7FFF8000) <= 3 )
    {
      __asan_report_load4(&this->owner_uid_);
    }
    if ( v28 == this->owner_uid_ )
    {
      __for_range_8 = vehicle_map;
      __for_begin_0._M_cur = (std::__detail::_Node_iterator_base<unsigned int,false>::__node_type *)std::map<unsigned int,std::weak_ptr<Gadget>>::begin(vehicle_map)._M_node;
      __for_end._M_cur = (std::__detail::_Node_iterator_base<unsigned int,false>::__node_type *)std::map<unsigned int,std::weak_ptr<Gadget>>::end(__for_range_8)._M_node;
      while ( std::operator!=(
                (const std::_Rb_tree_const_iterator<std::pair<unsigned int const,std::weak_ptr<Gadget> > >::_Self *)&__for_begin_0,
                (const std::_Rb_tree_const_iterator<std::pair<unsigned int const,std::weak_ptr<Gadget> > >::_Self *)&__for_end) )
      {
        v60 = std::_Rb_tree_const_iterator<std::pair<unsigned int const,std::weak_ptr<Gadget>>>::operator*((const std::_Rb_tree_const_iterator<std::pair<unsigned int const,std::weak_ptr<Gadget> > > *const)&__for_begin_0);
        _ = std::get<0ul,unsigned int const,std::weak_ptr<Gadget>>(v60);
        gadget_wtr = (std::tuple_element<1,const std::pair<unsigned int const,std::weak_ptr<Gadget> > >::type *)std::get<1ul,unsigned int const,std::weak_ptr<Gadget>>(v60);
        std::weak_ptr<Gadget>::lock((const std::weak_ptr<Gadget> *const)(v2 + 96));
        if ( !std::operator==<Gadget>(0LL, (const std::shared_ptr<Gadget> *)(v2 + 96)) )
        {
          v29 = std::__shared_ptr_access<Gadget,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Gadget,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 96));
          config_id = Gadget::getGadgetId(v29);
          if ( config_id )
          {
            v30 = std::__shared_ptr_access<Gadget,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Gadget,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 96));
            Position = (unsigned __int64)Entity::getPosition((const Entity *const)v30);
            if ( (char)(Position & 7) >= *(_BYTE *)((Position >> 3) + 0x7FFF8000)
              && *(_BYTE *)((Position >> 3) + 0x7FFF8000) != 0
              || *(_BYTE *)(((Position + 11) >> 3) + 0x7FFF8000) != 0
              && (char)((Position + 11) & 7) >= *(_BYTE *)(((Position + 11) >> 3) + 0x7FFF8000) )
            {
              Position = __asan_report_load_n(Position, 12LL);
            }
            *(_QWORD *)(v2 + 32) = *(_QWORD *)Position;
            *(_DWORD *)(v2 + 40) = *(_DWORD *)(Position + 8);
            v32 = std::__shared_ptr_access<Gadget,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Gadget,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 96));
            Rotation = (unsigned __int64)Entity::getRotation((const Entity *const)v32);
            if ( (char)(Rotation & 7) >= *(_BYTE *)((Rotation >> 3) + 0x7FFF8000)
              && *(_BYTE *)((Rotation >> 3) + 0x7FFF8000) != 0
              || *(_BYTE *)(((Rotation + 11) >> 3) + 0x7FFF8000) != 0
              && (char)((Rotation + 11) & 7) >= *(_BYTE *)(((Rotation + 11) >> 3) + 0x7FFF8000) )
            {
              Rotation = __asan_report_load_n(Rotation, 12LL);
            }
            *(_QWORD *)(v2 + 64) = *(_QWORD *)Rotation;
            *(_DWORD *)(v2 + 72) = *(_DWORD *)(Rotation + 8);
            vehicle_proto = proto::SceneBin::add_vehicle_list(scene_bin);
            proto::SceneVehicleBin::set_config_id(vehicle_proto, config_id);
            v34 = proto::SceneVehicleBin::mutable_cur_pos(vehicle_proto);
            Vector3::toBin((const Vector3 *const)(v2 + 32), v34);
            v35 = proto::SceneVehicleBin::mutable_cur_rot(vehicle_proto);
            Vector3::toBin((const Vector3 *const)(v2 + 64), v35);
          }
        }
        std::shared_ptr<Gadget>::~shared_ptr((std::shared_ptr<Gadget> *const)(v2 + 96));
        std::_Rb_tree_const_iterator<std::pair<unsigned int const,std::weak_ptr<Gadget>>>::operator++((std::_Rb_tree_const_iterator<std::pair<unsigned int const,std::weak_ptr<Gadget> > > *const)&__for_begin_0);
      }
    }
    std::_Rb_tree_const_iterator<std::pair<unsigned int const,std::map<unsigned int,std::weak_ptr<Gadget>>>>::operator++(&__for_begin_1);
  }
  __for_range_9 = &this->scene_tag_op_map_;
  __for_begin_0._M_cur = (std::__detail::_Node_iterator_base<unsigned int,false>::__node_type *)std::unordered_map<unsigned int,proto::SceneTagOpType>::begin(&this->scene_tag_op_map_)._M_cur;
  __for_end._M_cur = (std::__detail::_Node_iterator_base<unsigned int,false>::__node_type *)std::unordered_map<unsigned int,proto::SceneTagOpType>::end(__for_range_9)._M_cur;
  while ( std::__detail::operator!=<std::pair<unsigned int const,proto::SceneTagOpType>,false>(
            (const std::__detail::_Node_iterator_base<std::pair<unsigned int const,proto::SceneTagOpType>,false> *)&__for_begin_0,
            (const std::__detail::_Node_iterator_base<std::pair<unsigned int const,proto::SceneTagOpType>,false> *)&__for_end) )
  {
    v52 = std::__detail::_Node_const_iterator<std::pair<unsigned int const,proto::SceneTagOpType>,false,false>::operator*((const std::__detail::_Node_const_iterator<std::pair<unsigned int const,proto::SceneTagOpType>,false,false> *const)&__for_begin_0);
    id = std::get<0ul,unsigned int const,proto::SceneTagOpType>(v52);
    op_type = (std::tuple_element<1,const std::pair<unsigned int const,proto::SceneTagOpType> >::type *)std::get<1ul,unsigned int const,proto::SceneTagOpType>(v52);
    proto_scene_tag_op = proto::SceneBin::add_scene_tag_op_list(scene_bin);
    if ( *(_BYTE *)(((unsigned __int64)id >> 3) + 0x7FFF8000) != 0
      && (char)(((unsigned __int8)id & 7) + 3) >= *(_BYTE *)(((unsigned __int64)id >> 3) + 0x7FFF8000) )
    {
      __asan_report_load4(id);
    }
    proto::SceneTagOp::set_id(proto_scene_tag_op, *id);
    if ( *(_BYTE *)(((unsigned __int64)op_type >> 3) + 0x7FFF8000) != 0
      && (char)(((unsigned __int8)op_type & 7) + 3) >= *(_BYTE *)(((unsigned __int64)op_type >> 3) + 0x7FFF8000) )
    {
      __asan_report_load4(op_type);
    }
    proto::SceneTagOp::set_op_type(proto_scene_tag_op, *op_type);
    std::__detail::_Node_const_iterator<std::pair<unsigned int const,proto::SceneTagOpType>,false,false>::operator++((std::__detail::_Node_const_iterator<std::pair<unsigned int const,proto::SceneTagOpType>,false,false> *const)&__for_begin_0);
  }
  result = 0;
LABEL_74:
  if ( v69 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 275: range 0000000015973C3C-0000000015973E10
std::string *__cdecl Scene::getDesc[abi:cxx11](std::string *retstr, const Scene *const this)
{
  unsigned __int64 v2; // rbx
  __int64 v3; // rax
  unsigned __int64 v4; // r12
  common::tools::StringStream<common::tools::FixedBuffer<4096> > *v5; // rcx
  common::tools::StringStream<common::tools::FixedBuffer<4096> > *v6; // rax
  char v8[96]; // [rsp+10h] [rbp-60h] BYREF

  v2 = (unsigned __int64)v8;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_0(64LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "1 32 16 8 ostr:276";
  *(_QWORD *)(v2 + 16) = Scene::getDesc[abi:cxx11];
  v4 = v2 >> 3;
  *(_DWORD *)(v4 + 2147450880) = -235802127;
  *(_DWORD *)(v4 + 2147450884) = -202178560;
  common::tools::StringStream<common::tools::FixedBuffer<4096>>::StringStream((common::tools::StringStream<common::tools::FixedBuffer<4096> > *const)(v2 + 32));
  v5 = common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(
         (common::tools::StringStream<common::tools::FixedBuffer<4096> > *const)(v2 + 32),
         "[scene_id:");
  if ( *(_BYTE *)(((unsigned __int64)&this->scene_id_ >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->scene_id_ >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4(&this->scene_id_);
  }
  v6 = common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(v5, this->scene_id_);
  common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(v6, "]");
  if ( *(char *)(((unsigned __int64)retstr >> 3) + 0x7FFF8000) < 0
    || *(_BYTE *)((((unsigned __int64)&retstr->_anon_0._M_allocated_capacity + 15) >> 3) + 0x7FFF8000) != 0
    && (((unsigned __int8)retstr + 31) & 7) >= *(_BYTE *)((((unsigned __int64)&retstr->_anon_0._M_allocated_capacity + 15) >> 3)
                                                        + 0x7FFF8000) )
  {
    __asan_report_store_n(retstr, 32LL);
  }
  common::tools::StringStream<common::tools::FixedBuffer<4096>>::str[abi:cxx11](
    retstr,
    (common::tools::StringStream<common::tools::FixedBuffer<4096> > *const)(v2 + 32));
  common::tools::StringStream<common::tools::FixedBuffer<4096>>::~StringStream((common::tools::StringStream<common::tools::FixedBuffer<4096> > *const)(v2 + 32));
  if ( v8 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return retstr;
};

// Line 283: range 0000000015973E12-00000000159742FB
int32_t __cdecl Scene::constructComps(Scene *const this)
{
  bool v1; // bl
  bool v3; // bl
  bool v4; // bl
  EcsBase<Scene,SceneCompBase,12> v5; // [rsp+10h] [rbp-40h] BYREF

  EcsBase<Scene,SceneCompBase,12u>::findComp<SceneBlockGroupComp>(&v5);
  v1 = std::operator==<SceneBlockGroupComp>(0LL, (const std::shared_ptr<SceneBlockGroupComp> *)&v5);
  std::shared_ptr<SceneBlockGroupComp>::~shared_ptr((std::shared_ptr<SceneBlockGroupComp> *const)&v5);
  if ( v1 && EcsBase<Scene,SceneCompBase,12u>::addComp<SceneBlockGroupComp>(&this->EcsBase<Scene,SceneCompBase,12>) )
  {
    common::milog::MiLogStream::create(
      (common::milog::MiLogStream *)&v5.comp_vec_._M_impl._M_end_of_storage,
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/scene/scene.cpp",
      "constructComps",
      288);
    common::milog::MiLogStream::operator<<<char [35],(char *[35])0>(
      (common::milog::MiLogStream *const)&v5.comp_vec_._M_impl._M_end_of_storage,
      (const char (*)[35])"addComp SceneBlockGroupComp failed");
    common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)&v5.comp_vec_._M_impl._M_end_of_storage);
    return -1;
  }
  else if ( EcsBase<Scene,SceneCompBase,12u>::addComp<SceneAreaComp>(&this->EcsBase<Scene,SceneCompBase,12>) )
  {
    common::milog::MiLogStream::create(
      (common::milog::MiLogStream *)&v5.comp_vec_._M_impl._M_end_of_storage,
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/scene/scene.cpp",
      "constructComps",
      294);
    common::milog::MiLogStream::operator<<<char [29],(char *[29])0>(
      (common::milog::MiLogStream *const)&v5.comp_vec_._M_impl._M_end_of_storage,
      (const char (*)[29])"addComp SceneAreaComp failed");
    common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)&v5.comp_vec_._M_impl._M_end_of_storage);
    return -1;
  }
  else if ( EcsBase<Scene,SceneCompBase,12u>::addComp<SceneMiscComp>(&this->EcsBase<Scene,SceneCompBase,12>) )
  {
    common::milog::MiLogStream::create(
      (common::milog::MiLogStream *)&v5.comp_vec_._M_impl._M_end_of_storage,
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/scene/scene.cpp",
      "constructComps",
      299);
    common::milog::MiLogStream::operator<<<char [29],(char *[29])0>(
      (common::milog::MiLogStream *const)&v5.comp_vec_._M_impl._M_end_of_storage,
      (const char (*)[29])"addComp SceneMiscComp failed");
    common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)&v5.comp_vec_._M_impl._M_end_of_storage);
    return -1;
  }
  else if ( EcsBase<Scene,SceneCompBase,12u>::addComp<SceneMultistagePlayComp>(&this->EcsBase<Scene,SceneCompBase,12>) )
  {
    common::milog::MiLogStream::create(
      (common::milog::MiLogStream *)&v5.comp_vec_._M_impl._M_end_of_storage,
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/scene/scene.cpp",
      "constructComps",
      304);
    common::milog::MiLogStream::operator<<<char [39],(char *[39])0>(
      (common::milog::MiLogStream *const)&v5.comp_vec_._M_impl._M_end_of_storage,
      (const char (*)[39])"addComp SceneMultistagePlayComp failed");
    common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)&v5.comp_vec_._M_impl._M_end_of_storage);
    return -1;
  }
  else if ( EcsBase<Scene,SceneCompBase,12u>::addComp<SceneGalleryComp>(&this->EcsBase<Scene,SceneCompBase,12>) )
  {
    common::milog::MiLogStream::create(
      (common::milog::MiLogStream *)&v5.comp_vec_._M_impl._M_end_of_storage,
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/scene/scene.cpp",
      "constructComps",
      309);
    common::milog::MiLogStream::operator<<<char [32],(char *[32])0>(
      (common::milog::MiLogStream *const)&v5.comp_vec_._M_impl._M_end_of_storage,
      (const char (*)[32])"addComp SceneGalleryComp failed");
    common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)&v5.comp_vec_._M_impl._M_end_of_storage);
    return -1;
  }
  else if ( EcsBase<Scene,SceneCompBase,12u>::addComp<SceneTransferGuardComp>(&this->EcsBase<Scene,SceneCompBase,12>) )
  {
    common::milog::MiLogStream::create(
      (common::milog::MiLogStream *)&v5.comp_vec_._M_impl._M_end_of_storage,
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/scene/scene.cpp",
      "constructComps",
      314);
    common::milog::MiLogStream::operator<<<char [38],(char *[38])0>(
      (common::milog::MiLogStream *const)&v5.comp_vec_._M_impl._M_end_of_storage,
      (const char (*)[38])"addComp SceneTransferGuardComp failed");
    common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)&v5.comp_vec_._M_impl._M_end_of_storage);
    return -1;
  }
  else
  {
    EcsBase<Scene,SceneCompBase,12u>::findComp<SceneBlockGroupComp>(&v5);
    v3 = std::operator==<SceneBlockGroupComp>(0LL, (const std::shared_ptr<SceneBlockGroupComp> *)&v5);
    std::shared_ptr<SceneBlockGroupComp>::~shared_ptr((std::shared_ptr<SceneBlockGroupComp> *const)&v5);
    if ( v3 )
    {
      common::milog::MiLogStream::create(
        (common::milog::MiLogStream *)&v5.comp_vec_._M_impl._M_end_of_storage,
        &common::milog::MiLogDefault::default_log_obj_,
        4u,
        "./src/scene/scene.cpp",
        "constructComps",
        319);
      common::milog::MiLogStream::operator<<<char [35],(char *[35])0>(
        (common::milog::MiLogStream *const)&v5.comp_vec_._M_impl._M_end_of_storage,
        (const char (*)[35])"findComp SceneBlockGroupComp fails");
      common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)&v5.comp_vec_._M_impl._M_end_of_storage);
      return -1;
    }
    else
    {
      EcsBase<Scene,SceneCompBase,12u>::findComp<SceneSightComp>(&v5);
      v4 = std::operator==<SceneSightComp>(0LL, (const std::shared_ptr<SceneSightComp> *)&v5);
      std::shared_ptr<SceneSightComp>::~shared_ptr((std::shared_ptr<SceneSightComp> *const)&v5);
      if ( v4 )
      {
        common::milog::MiLogStream::create(
          (common::milog::MiLogStream *)&v5.comp_vec_._M_impl._M_end_of_storage,
          &common::milog::MiLogDefault::default_log_obj_,
          4u,
          "./src/scene/scene.cpp",
          "constructComps",
          325);
        common::milog::MiLogStream::operator<<<char [30],(char *[30])0>(
          (common::milog::MiLogStream *const)&v5.comp_vec_._M_impl._M_end_of_storage,
          (const char (*)[30])"findComp SceneSightComp fails");
        common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)&v5.comp_vec_._M_impl._M_end_of_storage);
        return -1;
      }
      else
      {
        return 0;
      }
    }
  }
};

// Line 332: range 0000000015974512-0000000015974962
int32_t __cdecl Scene::constructTimerMgr(Scene *const this)
{
  std::weak_ptr<Scene> *v1; // rbx
  __int64 v2; // rax
  unsigned __int64 v3; // r12
  int32_t v4; // r14d
  int32_t result; // eax
  std::enable_shared_from_this<Scene> v6; // [rsp+10h] [rbp-B0h] BYREF
  std::shared_ptr<Scene> __r; // [rsp+20h] [rbp-A0h] BYREF
  common::milog::MiLogStream v8; // [rsp+30h] [rbp-90h] BYREF
  char v9[112]; // [rsp+50h] [rbp-70h] BYREF

  v1 = (std::weak_ptr<Scene> *)v9;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_0(64LL);
    if ( v2 )
      v1 = (std::weak_ptr<Scene> *)v2;
  }
  v1->_M_ptr = (std::__weak_ptr<Scene,(__gnu_cxx::_Lock_policy)2>::element_type *)1102416563;
  v1->_M_refcount._M_pi = (std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)2> *)"1 32 16 13 scene_wtr:347";
  v1[1]._M_ptr = (std::__weak_ptr<Scene,(__gnu_cxx::_Lock_policy)2>::element_type *)Scene::constructTimerMgr;
  v3 = (unsigned __int64)v1 >> 3;
  *(_DWORD *)(v3 + 2147450880) = -235802127;
  *(_DWORD *)(v3 + 2147450884) = -202178560;
  std::enable_shared_from_this<Scene>::shared_from_this(&v6);
  common::tools::perf::make_shared<SceneTimerMgr,std::shared_ptr<Scene>>(&__r, (std::shared_ptr<Scene> *)&v6);
  std::shared_ptr<SceneTimerMgr>::operator=(&this->scene_timer_mgr_ptr_, (std::shared_ptr<SceneTimerMgr> *)&__r);
  std::shared_ptr<SceneTimerMgr>::~shared_ptr((std::shared_ptr<SceneTimerMgr> *const)&__r);
  std::shared_ptr<Scene>::~shared_ptr((std::shared_ptr<Scene> *const)&v6);
  if ( std::operator==<SceneTimerMgr>(&this->scene_timer_mgr_ptr_, 0LL) )
  {
    common::milog::MiLogStream::create(
      &v8,
      &common::milog::MiLogDefault::default_log_obj_,
      4u,
      "./src/scene/scene.cpp",
      "constructTimerMgr",
      336);
    common::milog::MiLogStream::operator<<<char [25],(char *[25])0>(&v8, (const char (*)[25])"constructTimerMgr failed");
    common::milog::MiLogStream::~MiLogStream(&v8);
    v4 = -1;
  }
  else
  {
    common::tools::perf::make_shared<UnixTimerMgr>();
    std::shared_ptr<UnixTimerMgr>::operator=(&this->unix_timer_mgr_ptr_, (std::shared_ptr<UnixTimerMgr> *)&__r);
    std::shared_ptr<UnixTimerMgr>::~shared_ptr((std::shared_ptr<UnixTimerMgr> *const)&__r);
    if ( std::operator==<UnixTimerMgr>(&this->unix_timer_mgr_ptr_, 0LL) )
    {
      common::milog::MiLogStream::create(
        &v8,
        &common::milog::MiLogDefault::default_log_obj_,
        4u,
        "./src/scene/scene.cpp",
        "constructTimerMgr",
        343);
      common::milog::MiLogStream::operator<<<char [29],(char *[29])0>(
        &v8,
        (const char (*)[29])"constructUnixTimerMgr failed");
      common::milog::MiLogStream::~MiLogStream(&v8);
      v4 = -1;
    }
    else
    {
      toThisPtr<Scene>((Scene *)&__r);
      std::weak_ptr<Scene>::weak_ptr<Scene,void>(v1 + 2, &__r);
      std::shared_ptr<Scene>::~shared_ptr(&__r);
      std::weak_ptr<Scene>::weak_ptr(&v6._M_weak_this, v1 + 2);
      common::tools::perf::make_shared<UnixTimer,Scene::constructTimerMgr(void)::{lambda(unsigned long)#1}>(
        (Scene::constructTimerMgr::<lambda(uint64_t)> *)&__r,
        (Scene::constructTimerMgr::<lambda(uint64_t)> *)&v6);
      std::shared_ptr<UnixTimer>::operator=(&this->timer_ptr_, (std::shared_ptr<UnixTimer> *)&__r);
      std::shared_ptr<UnixTimer>::~shared_ptr((std::shared_ptr<UnixTimer> *const)&__r);
      Scene::constructTimerMgr(void)::{lambda(unsigned long)#1}::~constructTimerMgr((Scene::constructTimerMgr::<lambda(uint64_t)> *const)&v6);
      if ( std::operator==<UnixTimer>(&this->timer_ptr_, 0LL) )
      {
        common::milog::MiLogStream::create(
          &v8,
          &common::milog::MiLogDefault::default_log_obj_,
          4u,
          "./src/scene/scene.cpp",
          "constructTimerMgr",
          361);
        common::milog::MiLogStream::operator<<<char [22],(char *[22])0>(
          &v8,
          (const char (*)[22])"constructTimer failed");
        common::milog::MiLogStream::~MiLogStream(&v8);
        v4 = -1;
      }
      else
      {
        v4 = 0;
      }
      std::weak_ptr<Scene>::~weak_ptr(v1 + 2);
    }
  }
  result = v4;
  if ( v9 == (char *)v1 )
  {
    *(_QWORD *)(((unsigned __int64)v1 >> 3) + 0x7FFF8000) = 0LL;
  }
  else
  {
    v1->_M_ptr = (std::__weak_ptr<Scene,(__gnu_cxx::_Lock_policy)2>::element_type *)1172321806;
    *(_QWORD *)(((unsigned __int64)v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 348: range 0000000015A0D06A-0000000015A0D08F
void __cdecl Scene::constructTimerMgr(void)::{lambda(unsigned long)#1}::constructTimerMgr(
        Scene::constructTimerMgr::<lambda(uint64_t)> *const this,
        Scene::constructTimerMgr::<lambda(uint64_t)> *a2)
{
  std::weak_ptr<Scene>::weak_ptr(&this->__scene_wtr, &a2->__scene_wtr);
};

// Line 348: range 0000000015A0D648-0000000015A0D66D
void __cdecl Scene::constructTimerMgr(void)::{lambda(unsigned long)#1}::constructTimerMgr(
        Scene::constructTimerMgr::<lambda(uint64_t)> *const this,
        const Scene::constructTimerMgr::<lambda(uint64_t)> *a2)
{
  std::weak_ptr<Scene>::weak_ptr(&this->__scene_wtr, &a2->__scene_wtr);
};

// Line 348: range 00000000159742FC-00000000159744F5
void __cdecl Scene::constructTimerMgr(void)::{lambda(unsigned long)#1}::operator()(
        const Scene::constructTimerMgr::<lambda(uint64_t)> *const __closure,
        uint64_t now_ms)
{
  unsigned __int64 v2; // rbx
  __int64 v3; // rax
  unsigned __int64 v4; // r12
  unsigned __int64 v5; // rax
  unsigned __int64 v6; // rdx
  common::milog::MiLogStream v7; // [rsp+10h] [rbp-90h] BYREF
  char v8[112]; // [rsp+30h] [rbp-70h] BYREF

  v2 = (unsigned __int64)v8;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_0(64LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "1 32 16 13 scene_ptr:350";
  *(_QWORD *)(v2 + 16) = Scene::constructTimerMgr(void)::{lambda(unsigned long)#1}::operator();
  v4 = v2 >> 3;
  *(_DWORD *)(v4 + 2147450880) = -235802127;
  *(_DWORD *)(v4 + 2147450884) = -202178560;
  std::weak_ptr<Scene>::lock((const std::weak_ptr<Scene> *const)(v2 + 32));
  if ( std::operator==<Scene>((const std::shared_ptr<Scene> *)(v2 + 32), 0LL) )
  {
    common::milog::MiLogStream::create(
      &v7,
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/scene/scene.cpp",
      "operator()",
      353);
    common::milog::MiLogStream::operator<<<char [18],(char *[18])0>(&v7, (const char (*)[18])"scene_ptr is null");
    common::milog::MiLogStream::~MiLogStream(&v7);
  }
  else
  {
    v5 = (unsigned __int64)std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 32));
    if ( *(_BYTE *)((v5 >> 3) + 0x7FFF8000) )
      v5 = __asan_report_load8();
    v6 = *(_QWORD *)v5 + 232LL;
    if ( *(_BYTE *)((v6 >> 3) + 0x7FFF8000) )
      v5 = __asan_report_load8();
    (*(void (__fastcall **)(unsigned __int64, uint64_t))v6)(v5, now_ms);
  }
  std::shared_ptr<Scene>::~shared_ptr((std::shared_ptr<Scene> *const)(v2 + 32));
  if ( v8 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
  }
};

// Line 348: range 00000000159744F6-0000000015974510
void __cdecl Scene::constructTimerMgr(void)::{lambda(unsigned long)#1}::~constructTimerMgr(
        Scene::constructTimerMgr::<lambda(uint64_t)> *const this)
{
  std::weak_ptr<Scene>::~weak_ptr(&this->__scene_wtr);
};

// Line 370: range 0000000015974964-0000000015974972
int32_t __cdecl Scene::updateScene(Scene *const this)
{
  return 0;
};

// Line 376: range 0000000015974974-0000000015974A8A
int32_t __cdecl Scene::init(Scene *const this)
{
  unsigned __int64 v1; // rbx
  __int64 v2; // rax
  char *v3; // rcx
  unsigned __int64 v4; // r12
  unsigned __int64 v5; // rax
  int32_t result; // eax
  char v7[96]; // [rsp+10h] [rbp-60h] BYREF

  v1 = (unsigned __int64)v7;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_0(64LL);
    if ( v2 )
      v1 = v2;
  }
  v3 = (char *)(v1 + 64);
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "1 32 4 9 param:378";
  *(_QWORD *)(v1 + 16) = Scene::init;
  v4 = v1 >> 3;
  *(_DWORD *)(v4 + 2147450880) = -235802127;
  *(_DWORD *)(v4 + 2147450884) = -202116348;
  *(_DWORD *)(v1 + 32) = 0;
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_load8();
  v5 = (unsigned __int64)(this->_vptr_DescribalBase + 4);
  if ( *(_BYTE *)((v5 >> 3) + 0x7FFF8000) )
    v5 = __asan_report_load8();
  result = (*(__int64 (__fastcall **)(Scene *const, char *))v5)(this, v3 - 32);
  if ( v7 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 383: range 0000000015974A8C-00000000159753C2
int32_t __cdecl Scene::init(Scene *const this, const SceneInitParam *init_param)
{
  common::tools::TimeUtils::Timer *v2; // rbx
  __int64 v3; // rax
  unsigned __int64 v4; // r13
  int32_t v5; // r14d
  uint64_t NowMs; // rax
  unsigned __int64 SightComp; // rax
  unsigned __int64 v8; // rdx
  common::milog::MiLogStream *v9; // r14
  common::milog::MiLogStream *v10; // rdx
  unsigned __int64 v11; // rax
  SceneBlockGroupComp *BlockGroupComp; // rax
  SceneAreaComp *AreaComp; // rax
  unsigned __int64 v14; // rax
  __int64 Now; // rsi
  common::milog::MiLogStream *v16; // r14
  common::milog::MiLogStream *v17; // rdx
  int32_t result; // eax
  int val; // [rsp+1Ch] [rbp-A4h] BYREF
  const SceneScriptConfig *scene_script_config_ptr; // [rsp+28h] [rbp-98h]
  std::string v22; // [rsp+30h] [rbp-90h] BYREF
  char v23[112]; // [rsp+50h] [rbp-70h] BYREF

  v2 = (common::tools::TimeUtils::Timer *)v23;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_0(64LL);
    if ( v3 )
      v2 = (common::tools::TimeUtils::Timer *)v3;
  }
  v2->start_tv_.tv_sec = 1102416563LL;
  v2->start_tv_.tv_usec = (__suseconds_t)"1 32 16 9 timer:386";
  v2[1].start_tv_.tv_sec = (__time_t)Scene::init;
  v4 = (unsigned __int64)v2 >> 3;
  *(_DWORD *)(v4 + 2147450880) = -235802127;
  *(_DWORD *)(v4 + 2147450884) = -202178560;
  Scene::createSceneTransactionOnInit[abi:cxx11](&v22, this);
  std::string::operator=(&this->scene_transaction_, &v22);
  std::string::~string(&v22);
  common::tools::TimeUtils::Timer::Timer(v2 + 2);
  common::tools::TimeUtils::Timer::reset(v2 + 2);
  if ( std::operator==<SceneTimerMgr>(&this->scene_timer_mgr_ptr_, 0LL) )
  {
    common::milog::MiLogStream::create(
      (common::milog::MiLogStream *)&v22,
      &common::milog::MiLogDefault::default_log_obj_,
      4u,
      "./src/scene/scene.cpp",
      "init",
      391);
    common::milog::MiLogStream::operator<<<char [31],(char *[31])0>(
      (common::milog::MiLogStream *const)&v22,
      (const char (*)[31])"scene_timer_mgr_ptr is nullptr");
    common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)&v22);
    v5 = -1;
  }
  else if ( Scene::getConfig(this) )
  {
    scene_script_config_ptr = Scene::getScriptConfig(this);
    if ( scene_script_config_ptr )
    {
      NowMs = common::tools::TimeUtils::getNowMs();
      if ( *(_BYTE *)(((unsigned __int64)&this->begin_time_ms_ >> 3) + 0x7FFF8000) )
        NowMs = __asan_report_store8(&this->begin_time_ms_, 0LL);
      this->begin_time_ms_ = NowMs;
      SightComp = (unsigned __int64)Scene::getSightComp(this);
      if ( *(_BYTE *)((SightComp >> 3) + 0x7FFF8000) )
        SightComp = __asan_report_load8();
      v8 = *(_QWORD *)SightComp + 48LL;
      if ( *(_BYTE *)((v8 >> 3) + 0x7FFF8000) )
        SightComp = __asan_report_load8();
      if ( (*(unsigned int (__fastcall **)(unsigned __int64, Vector2 *, Vector2 *))v8)(
             SightComp,
             &scene_script_config_ptr->grid_map_begin_pos,
             &scene_script_config_ptr->grid_map_size) )
      {
        common::milog::MiLogStream::create(
          (common::milog::MiLogStream *)&v22,
          &common::milog::MiLogDefault::default_log_obj_,
          3u,
          "./src/scene/scene.cpp",
          "init",
          410);
        common::milog::MiLogStream::operator<<<char [23],(char *[23])0>(
          (common::milog::MiLogStream *const)&v22,
          (const char (*)[23])"grid_comp_.init failed");
        common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)&v22);
        v5 = -1;
      }
      else
      {
        common::milog::MiLogStream::create(
          (common::milog::MiLogStream *)&v22,
          &common::milog::MiLogDefault::default_log_obj_,
          2u,
          "./src/scene/scene.cpp",
          "init",
          414);
        v9 = common::milog::MiLogStream::operator<<<char [28],(char *[28])0>(
               (common::milog::MiLogStream *const)&v22,
               (const char (*)[28])"[PERF] grid_comp init cost:");
        val = common::tools::TimeUtils::Timer::time(v2 + 2);
        v10 = common::milog::MiLogStream::operator<<<int,(int *)0>(v9, &val);
        common::milog::MiLogStream::operator<<<Scene,(Scene*)0>(v10, this);
        common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)&v22);
        common::tools::TimeUtils::Timer::reset(v2 + 2);
        if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
          __asan_report_load8();
        v11 = (unsigned __int64)(this->_vptr_DescribalBase + 62);
        if ( *(_BYTE *)((v11 >> 3) + 0x7FFF8000) )
          v11 = __asan_report_load8();
        if ( (*(unsigned int (__fastcall **)(Scene *const))v11)(this) )
        {
          common::milog::MiLogStream::create(
            (common::milog::MiLogStream *)&v22,
            &common::milog::MiLogDefault::default_log_obj_,
            3u,
            "./src/scene/scene.cpp",
            "init",
            419);
          common::milog::MiLogStream::operator<<<char [18],(char *[18])0>(
            (common::milog::MiLogStream *const)&v22,
            (const char (*)[18])"updateScene fails");
          common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)&v22);
          v5 = -1;
        }
        else
        {
          BlockGroupComp = Scene::getBlockGroupComp(this);
          if ( SceneBlockGroupComp::init(BlockGroupComp) )
          {
            common::milog::MiLogStream::create(
              (common::milog::MiLogStream *)&v22,
              &common::milog::MiLogDefault::default_log_obj_,
              3u,
              "./src/scene/scene.cpp",
              "init",
              425);
            common::milog::MiLogStream::operator<<<char [30],(char *[30])0>(
              (common::milog::MiLogStream *const)&v22,
              (const char (*)[30])"block_group_comp_ init failed");
            common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)&v22);
            v5 = -1;
          }
          else
          {
            AreaComp = Scene::getAreaComp(this);
            if ( SceneAreaComp::init(AreaComp) )
            {
              common::milog::MiLogStream::create(
                (common::milog::MiLogStream *)&v22,
                &common::milog::MiLogDefault::default_log_obj_,
                3u,
                "./src/scene/scene.cpp",
                "init",
                431);
              common::milog::MiLogStream::operator<<<char [28],(char *[28])0>(
                (common::milog::MiLogStream *const)&v22,
                (const char (*)[28])"scene_area_comp init failed");
              common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)&v22);
              v5 = -1;
            }
            else
            {
              Scene::createSceneEntity(this);
              if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
                __asan_report_load8();
              v14 = (unsigned __int64)(this->_vptr_DescribalBase + 37);
              if ( *(_BYTE *)((v14 >> 3) + 0x7FFF8000) )
                v14 = __asan_report_load8();
              if ( (*(unsigned int (__fastcall **)(Scene *const))v14)(this) )
              {
                common::milog::MiLogStream::create(
                  (common::milog::MiLogStream *)&v22,
                  &common::milog::MiLogDefault::default_log_obj_,
                  3u,
                  "./src/scene/scene.cpp",
                  "init",
                  439);
                common::milog::MiLogStream::operator<<<char [21],(char *[21])0>(
                  (common::milog::MiLogStream *const)&v22,
                  (const char (*)[21])"initWeatherArea fail");
                common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)&v22);
                v5 = -1;
              }
              else
              {
                Scene::initVehicleEntity(this);
                Now = (unsigned int)common::tools::TimeUtils::getNow();
                if ( *(_BYTE *)(((unsigned __int64)&this->last_check_time_ >> 3) + 0x7FFF8000) != 0
                  && *(_BYTE *)(((unsigned __int64)&this->last_check_time_ >> 3) + 0x7FFF8000) <= 3 )
                {
                  __asan_report_store4(&this->last_check_time_, Now, (_BYTE)this + 40);
                }
                this->last_check_time_ = Now;
                if ( *(char *)(((unsigned __int64)&this->is_inited_ >> 3) + 0x7FFF8000) < 0 )
                  __asan_report_store1(&this->is_inited_, Now, &this->is_inited_);
                this->is_inited_ = 1;
                common::milog::MiLogStream::create(
                  (common::milog::MiLogStream *)&v22,
                  &common::milog::MiLogDefault::default_log_obj_,
                  2u,
                  "./src/scene/scene.cpp",
                  "init",
                  449);
                v16 = common::milog::MiLogStream::operator<<<char [24],(char *[24])0>(
                        (common::milog::MiLogStream *const)&v22,
                        (const char (*)[24])"[PERF] scene init cost:");
                val = common::tools::TimeUtils::Timer::time(v2 + 2);
                v17 = common::milog::MiLogStream::operator<<<int,(int *)0>(v16, &val);
                common::milog::MiLogStream::operator<<<Scene,(Scene*)0>(v17, this);
                common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)&v22);
                v5 = 0;
              }
            }
          }
        }
      }
    }
    else
    {
      common::milog::MiLogStream::create(
        (common::milog::MiLogStream *)&v22,
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/scene/scene.cpp",
        "init",
        403);
      common::milog::MiLogStream::operator<<<char [22],(char *[22])0>(
        (common::milog::MiLogStream *const)&v22,
        (const char (*)[22])"getScriptConfig fails");
      common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)&v22);
      v5 = -1;
    }
  }
  else
  {
    common::milog::MiLogStream::create(
      (common::milog::MiLogStream *)&v22,
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/scene/scene.cpp",
      "init",
      397);
    common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
      (common::milog::MiLogStream *const)&v22,
      (const char (*)[16])"getConfig fails");
    common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)&v22);
    v5 = -1;
  }
  common::tools::TimeUtils::Timer::~Timer(v2 + 2);
  result = v5;
  if ( v23 == (char *)v2 )
  {
    *(_QWORD *)(((unsigned __int64)v2 >> 3) + 0x7FFF8000) = 0LL;
  }
  else
  {
    v2->start_tv_.tv_sec = 1172321806LL;
    *(_QWORD *)(((unsigned __int64)v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 455: range 00000000159753C4-0000000015975661
void __cdecl Scene::initVehicleEntity(Scene *const this)
{
  unsigned __int64 v1; // rbx
  __int64 v2; // rax
  unsigned __int64 v3; // r12
  Vector3 *p_cur_rot; // r8
  Vector3 *p_cur_pos; // rcx
  std::map<unsigned int,SceneVehicle>::iterator __for_begin; // [rsp+10h] [rbp-C0h] BYREF
  std::map<unsigned int,SceneVehicle>::iterator __for_end; // [rsp+18h] [rbp-B8h] BYREF
  std::map<unsigned int,SceneVehicle> *__for_range; // [rsp+20h] [rbp-B0h]
  std::pair<unsigned int const,SceneVehicle> *__in; // [rsp+28h] [rbp-A8h]
  std::tuple_element<0,std::pair<unsigned int const,SceneVehicle> >::type *config_id; // [rsp+30h] [rbp-A0h]
  std::tuple_element<1,std::pair<unsigned int const,SceneVehicle> >::type *vehicle; // [rsp+38h] [rbp-98h]
  std::shared_ptr<Player> v12; // [rsp+40h] [rbp-90h] BYREF
  std::shared_ptr<Gadget> v13; // [rsp+50h] [rbp-80h] BYREF
  char v14[112]; // [rsp+60h] [rbp-70h] BYREF

  v1 = (unsigned __int64)v14;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_0(64LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "1 32 16 14 player_ptr:457";
  *(_QWORD *)(v1 + 16) = Scene::initVehicleEntity;
  v3 = v1 >> 3;
  *(_DWORD *)(v3 + 2147450880) = -235802127;
  *(_DWORD *)(v3 + 2147450884) = -202178560;
  Scene::getOwnPlayer((const Scene *const)(v1 + 32));
  if ( !std::operator==<Player>(0LL, (const std::shared_ptr<Player> *)(v1 + 32)) )
  {
    __for_range = &this->vehicle_map_;
    __for_begin._M_node = std::map<unsigned int,SceneVehicle>::begin(&this->vehicle_map_)._M_node;
    __for_end._M_node = std::map<unsigned int,SceneVehicle>::end(&this->vehicle_map_)._M_node;
    while ( std::operator!=(&__for_begin, &__for_end) )
    {
      __in = std::_Rb_tree_iterator<std::pair<unsigned int const,SceneVehicle>>::operator*(&__for_begin);
      config_id = std::get<0ul,unsigned int const,SceneVehicle>(__in);
      vehicle = std::get<1ul,unsigned int const,SceneVehicle>(__in);
      std::shared_ptr<Player>::shared_ptr(&v12, (const std::shared_ptr<Player> *)(v1 + 32));
      p_cur_rot = &vehicle->cur_rot;
      p_cur_pos = &vehicle->cur_pos;
      if ( *(_BYTE *)(((unsigned __int64)config_id >> 3) + 0x7FFF8000) != 0
        && (char)(((unsigned __int8)config_id & 7) + 3) >= *(_BYTE *)(((unsigned __int64)config_id >> 3) + 0x7FFF8000) )
      {
        __asan_report_load4(config_id);
      }
      Scene::createPlayerVehicle(
        (Scene *const)&v13,
        (uint32_t)this,
        (const Vector3 *)*config_id,
        p_cur_pos,
        (PlayerPtr *)p_cur_rot,
        (proto::CreateGadgetReason)&v12,
        0);
      std::shared_ptr<Gadget>::~shared_ptr(&v13);
      std::shared_ptr<Player>::~shared_ptr(&v12);
      std::_Rb_tree_iterator<std::pair<unsigned int const,SceneVehicle>>::operator++(&__for_begin);
    }
  }
  std::shared_ptr<Player>::~shared_ptr((std::shared_ptr<Player> *const)(v1 + 32));
  if ( v14 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
  }
};

// Line 470: range 0000000015975662-0000000015975A73
int32_t __cdecl Scene::start(Scene *const this)
{
  SceneTimerMgr *v2; // rax
  UnixTimerMgr *v3; // rbx
  uint32_t scene_id; // r12d
  uint32_t OwnerUid; // eax
  unsigned __int64 v6; // rax
  unsigned __int64 v7; // rdx
  common::milog::MiLogStream *v8; // rdx
  common::milog::MiLogStream *v9; // rax
  const EcsBase<Scene,SceneCompBase,12>::CompBasePair *v10; // [rsp+18h] [rbp-68h]
  std::tuple_element<0,const std::pair<unsigned int,std::shared_ptr<SceneCompBase> > >::type *comp_type; // [rsp+20h] [rbp-60h]
  std::tuple_element<1,const std::pair<unsigned int,std::shared_ptr<SceneCompBase> > >::type *comp_ptr; // [rsp+28h] [rbp-58h]
  EcsBase<Scene,SceneCompBase,12>::Iterator __for_begin; // [rsp+30h] [rbp-50h] BYREF
  EcsBase<Scene,SceneCompBase,12>::Iterator __for_end; // [rsp+40h] [rbp-40h] BYREF
  common::milog::MiLogStream v15; // [rsp+50h] [rbp-30h] BYREF

  if ( std::operator==<SceneTimerMgr>(&this->scene_timer_mgr_ptr_, 0LL) )
  {
    common::milog::MiLogStream::create(
      &v15,
      &common::milog::MiLogDefault::default_log_obj_,
      4u,
      "./src/scene/scene.cpp",
      "start",
      473);
    common::milog::MiLogStream::operator<<<char [31],(char *[31])0>(
      &v15,
      (const char (*)[31])"scene_timer_mgr_ptr is nullptr");
    common::milog::MiLogStream::~MiLogStream(&v15);
    return -1;
  }
  else
  {
    v2 = std::__shared_ptr_access<SceneTimerMgr,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<SceneTimerMgr,(__gnu_cxx::_Lock_policy)2,false,false> *const)&this->scene_timer_mgr_ptr_);
    if ( SceneTimerMgr::start(v2, "./src/scene/scene.cpp", "start", 477) )
    {
      common::milog::MiLogStream::create(
        &v15,
        &common::milog::MiLogDefault::default_log_obj_,
        4u,
        "./src/scene/scene.cpp",
        "start",
        479);
      common::milog::MiLogStream::operator<<<char [33],(char *[33])0>(
        &v15,
        (const char (*)[33])"scene_timer_mgr_ptr start failed");
      common::milog::MiLogStream::~MiLogStream(&v15);
      return -1;
    }
    else
    {
      v3 = std::__shared_ptr_access<UnixTimerMgr,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<UnixTimerMgr,(__gnu_cxx::_Lock_policy)2,false,false> *const)&this->unix_timer_mgr_ptr_);
      if ( *(_BYTE *)(((unsigned __int64)&this->scene_id_ >> 3) + 0x7FFF8000) != 0
        && *(_BYTE *)(((unsigned __int64)&this->scene_id_ >> 3) + 0x7FFF8000) <= 3 )
      {
        __asan_report_load4(&this->scene_id_);
      }
      scene_id = this->scene_id_;
      OwnerUid = Scene::getOwnerUid(this);
      if ( UnixTimerMgr::start(v3, "./src/scene/scene.cpp", "start", 484, OwnerUid, scene_id) )
      {
        common::milog::MiLogStream::create(
          &v15,
          &common::milog::MiLogDefault::default_log_obj_,
          4u,
          "./src/scene/scene.cpp",
          "start",
          487);
        common::milog::MiLogStream::operator<<<char [32],(char *[32])0>(
          &v15,
          (const char (*)[32])"unix_timer_mgr_ptr start failed");
        common::milog::MiLogStream::~MiLogStream(&v15);
        return -1;
      }
      else
      {
        EcsBase<Scene,SceneCompBase,12u>::begin((const EcsBase<Scene,SceneCompBase,12> *const)&__for_begin);
        EcsBase<Scene,SceneCompBase,12u>::end((const EcsBase<Scene,SceneCompBase,12> *const)&__for_end);
        while ( EcsBase<Scene,SceneCompBase,12u>::Iterator::operator!=(&__for_begin, &__for_end) )
        {
          v10 = EcsBase<Scene,SceneCompBase,12u>::Iterator::operator*(&__for_begin);
          comp_type = (std::tuple_element<0,const std::pair<unsigned int,std::shared_ptr<SceneCompBase> > >::type *)std::get<0ul,unsigned int,std::shared_ptr<SceneCompBase>>(v10);
          comp_ptr = (std::tuple_element<1,const std::pair<unsigned int,std::shared_ptr<SceneCompBase> > >::type *)std::get<1ul,unsigned int,std::shared_ptr<SceneCompBase>>(v10);
          v6 = (unsigned __int64)std::__shared_ptr_access<SceneCompBase,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<SceneCompBase,(__gnu_cxx::_Lock_policy)2,false,false> *const)comp_ptr);
          if ( *(_BYTE *)((v6 >> 3) + 0x7FFF8000) )
            v6 = __asan_report_load8();
          v7 = *(_QWORD *)v6 + 32LL;
          if ( *(_BYTE *)((v7 >> 3) + 0x7FFF8000) )
            v6 = __asan_report_load8();
          if ( (*(unsigned int (__fastcall **)(unsigned __int64))v7)(v6) )
          {
            common::milog::MiLogStream::create(
              &v15,
              &common::milog::MiLogDefault::default_log_obj_,
              4u,
              "./src/scene/scene.cpp",
              "start",
              495);
            v8 = common::milog::MiLogStream::operator<<<char [12],(char *[12])0>(
                   &v15,
                   (const char (*)[12])"comp_type: ");
            v9 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v8, comp_type);
            common::milog::MiLogStream::operator<<<char [14],(char *[14])0>(v9, (const char (*)[14])" start failed");
            common::milog::MiLogStream::~MiLogStream(&v15);
            return -1;
          }
          EcsBase<Scene,SceneCompBase,12u>::Iterator::operator++(&__for_begin);
        }
        if ( *(char *)(((unsigned __int64)&this->is_started_ >> 3) + 0x7FFF8000) < 0 )
          __asan_report_store1(&this->is_started_, &__for_end, &this->is_started_);
        this->is_started_ = 1;
        return 0;
      }
    }
  }
};

// Line 506: range 0000000015975A74-0000000015975AE9
void __cdecl Scene::prePlayerLogin(Scene *const this, bool is_relogin)
{
  unsigned __int64 BlockGroupComp; // rax
  unsigned __int64 v3; // rdx

  BlockGroupComp = (unsigned __int64)Scene::getBlockGroupComp(this);
  if ( *(_BYTE *)((BlockGroupComp >> 3) + 0x7FFF8000) )
    BlockGroupComp = __asan_report_load8();
  v3 = *(_QWORD *)BlockGroupComp + 56LL;
  if ( *(_BYTE *)((v3 >> 3) + 0x7FFF8000) )
    BlockGroupComp = __asan_report_load8();
  (*(void (__fastcall **)(unsigned __int64, bool))v3)(BlockGroupComp, is_relogin);
};

// Line 511: range 0000000015975AEA-0000000015975B54
void __cdecl Scene::afterPlayerLogin(Scene *const this)
{
  unsigned __int64 BlockGroupComp; // rax
  unsigned __int64 v2; // rdx

  BlockGroupComp = (unsigned __int64)Scene::getBlockGroupComp(this);
  if ( *(_BYTE *)((BlockGroupComp >> 3) + 0x7FFF8000) )
    BlockGroupComp = __asan_report_load8();
  v2 = *(_QWORD *)BlockGroupComp + 64LL;
  if ( *(_BYTE *)((v2 >> 3) + 0x7FFF8000) )
    BlockGroupComp = __asan_report_load8();
  (*(void (__fastcall **)(unsigned __int64))v2)(BlockGroupComp);
};

// Line 516: range 0000000015975B56-0000000015976762
int32_t __cdecl Scene::updateDungeonEntryExploreStateOnLogin(Scene *const this)
{
  unsigned __int64 p_pending_que; // r12
  __int64 v2; // rax
  _DWORD *v3; // r13
  int32_t v4; // r14d
  std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v5; // rax
  common::milog::MiLogStream *v6; // rdx
  std::pair<unsigned int const,unsigned int> *v7; // rax
  std::pair<unsigned int const,unsigned int> *v8; // rdx
  DungeonEntryExcelConfigMgr *p_dungeon_entry_config_mgr; // rcx
  common::milog::MiLogStream *v10; // rax
  common::milog::MiLogStream *v11; // rax
  common::milog::MiLogStream *v12; // rdx
  common::milog::MiLogStream *v13; // rax
  data::DungeonEntrySatisfiedConditionType type; // eax
  Player *v15; // rax
  std::weak_ptr<Observer> *v16; // rax
  Player *v17; // rax
  std::weak_ptr<Observer> *v18; // rax
  common::milog::MiLogStream *v19; // rax
  int32_t result; // eax
  std::weak_ptr<Scene> *key; // [rsp+20h] [rbp-170h]
  std::weak_ptr<Scene> *keya; // [rsp+20h] [rbp-170h]
  std::map<unsigned int,unsigned int>::const_iterator __for_begin; // [rsp+38h] [rbp-158h] BYREF
  std::map<unsigned int,unsigned int>::const_iterator __for_end; // [rsp+40h] [rbp-150h] BYREF
  std::vector<data::DungeonEntrySatisfiedCond>::const_iterator __for_begin_0; // [rsp+48h] [rbp-148h] BYREF
  std::vector<data::DungeonEntrySatisfiedCond>::const_iterator __for_end_0; // [rsp+50h] [rbp-140h] BYREF
  std::type_index value; // [rsp+58h] [rbp-138h] BYREF
  const std::map<unsigned int,unsigned int> *point_id_map_ptr; // [rsp+60h] [rbp-130h]
  const std::map<unsigned int,unsigned int> *__for_range; // [rsp+68h] [rbp-128h]
  std::tuple_element<0,std::pair<unsigned int const,unsigned int> >::type *dungeon_entry_id; // [rsp+70h] [rbp-120h]
  std::tuple_element<1,std::pair<unsigned int const,unsigned int> >::type *config_id; // [rsp+78h] [rbp-118h]
  const data::DungeonEntryExcelConfig *dungeon_entry_config_ptr; // [rsp+80h] [rbp-110h]
  const std::vector<data::DungeonEntrySatisfiedCond> *__for_range_0; // [rsp+88h] [rbp-108h]
  const data::DungeonEntrySatisfiedCond *dungeon_entry_cond; // [rsp+90h] [rbp-100h]
  std::pair<unsigned int const,unsigned int> __in; // [rsp+98h] [rbp-F8h] BYREF
  std::weak_ptr<Scene> v36; // [rsp+A0h] [rbp-F0h] BYREF
  PlayerEventComp v37; // [rsp+B0h] [rbp-E0h] BYREF

  p_pending_que = (unsigned __int64)&v37.event_center_.context_.pending_que_;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_1(128LL);
    if ( v2 )
      p_pending_que = v2;
  }
  *(_QWORD *)p_pending_que = 1102416563LL;
  *(_QWORD *)(p_pending_que + 8) = "3 32 16 14 player_ptr:517 64 16 12 this_ptr:523 96 16 12 this_wtr:529";
  *(_QWORD *)(p_pending_que + 16) = Scene::updateDungeonEntryExploreStateOnLogin;
  v3 = (_DWORD *)(p_pending_que >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -219021312;
  v3[536862722] = -219021312;
  v3[536862723] = -202178560;
  Scene::getOwnPlayer((const Scene *const)(p_pending_que + 32));
  if ( std::operator==<Player>(0LL, (const std::shared_ptr<Player> *)(p_pending_que + 32)) )
  {
    v4 = -1;
  }
  else
  {
    toThisPtr<Scene>((Scene *)(p_pending_que + 64));
    if ( std::operator==<Scene>(0LL, (const std::shared_ptr<Scene> *)(p_pending_que + 64)) )
    {
      common::milog::MiLogStream::create(
        (common::milog::MiLogStream *)&v37._M_weak_this._M_refcount,
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/scene/scene.cpp",
        "updateDungeonEntryExploreStateOnLogin",
        526);
      common::milog::MiLogStream::operator<<<char [17],(char *[17])0>(
        (common::milog::MiLogStream *const)&v37._M_weak_this._M_refcount,
        (const char (*)[17])"toThisPtr failed");
      common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)&v37._M_weak_this._M_refcount);
      v4 = -1;
    }
    else
    {
      std::weak_ptr<Scene>::weak_ptr<Scene,void>(
        (std::weak_ptr<Scene> *const)(p_pending_que + 96),
        (const std::shared_ptr<Scene> *)(p_pending_que + 64));
      ServiceBox::findService<GameserverService>();
      GameserverService::getConfig((GameserverService *const)&v37);
      v5 = std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false> *const)&v37);
      point_id_map_ptr = common::tools::MiscUtils::findMapValuePointer<std::map<unsigned int,std::map<unsigned int,unsigned int>> const>(
                           &v5->design_config.txt_config_mgr.dungeon_entry_config_mgr.scene_dungeon_entry_id_map,
                           &this->scene_id_);
      std::shared_ptr<Config>::~shared_ptr((std::shared_ptr<Config> *const)&v37);
      if ( point_id_map_ptr )
      {
        __for_range = point_id_map_ptr;
        __for_begin._M_node = std::map<unsigned int,unsigned int>::begin(point_id_map_ptr)._M_node;
        __for_end._M_node = std::map<unsigned int,unsigned int>::end(point_id_map_ptr)._M_node;
        while ( std::operator!=(&__for_begin, &__for_end) )
        {
          v7 = (std::pair<unsigned int const,unsigned int> *)std::_Rb_tree_const_iterator<std::pair<unsigned int const,unsigned int>>::operator*(&__for_begin);
          v8 = v7;
          if ( ((unsigned __int8)v7 & 7) >= *(_BYTE *)(((unsigned __int64)v7 >> 3) + 0x7FFF8000)
            && *(_BYTE *)(((unsigned __int64)v7 >> 3) + 0x7FFF8000) != 0
            || *(_BYTE *)((((unsigned __int64)&v7->second + 3) >> 3) + 0x7FFF8000) != 0
            && (((unsigned __int8)v7 + 7) & 7) >= *(_BYTE *)((((unsigned __int64)&v7->second + 3) >> 3) + 0x7FFF8000) )
          {
            __asan_report_load_n(v7, 8LL);
          }
          __in = *v8;
          dungeon_entry_id = std::get<0ul,unsigned int const,unsigned int>(&__in);
          config_id = std::get<1ul,unsigned int const,unsigned int>(&__in);
          ServiceBox::findService<GameserverService>();
          GameserverService::getConfig((GameserverService *const)&v37);
          p_dungeon_entry_config_mgr = &std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false> *const)&v37)->design_config.txt_config_mgr.dungeon_entry_config_mgr;
          if ( *(_BYTE *)(((unsigned __int64)config_id >> 3) + 0x7FFF8000) != 0
            && (char)(((unsigned __int8)config_id & 7) + 3) >= *(_BYTE *)(((unsigned __int64)config_id >> 3) + 0x7FFF8000) )
          {
            __asan_report_load4(config_id);
          }
          dungeon_entry_config_ptr = data::DungeonEntryDataConfigMgrBase::findDungeonEntryExcelConfig(
                                       p_dungeon_entry_config_mgr,
                                       *config_id);
          std::shared_ptr<Config>::~shared_ptr((std::shared_ptr<Config> *const)&v37);
          if ( dungeon_entry_config_ptr )
          {
            if ( DungeonEntryExcelConfigMgr::isExploreDungeonEntry(dungeon_entry_config_ptr) )
            {
              if ( *(_BYTE *)(((unsigned __int64)dungeon_entry_id >> 3) + 0x7FFF8000) != 0
                && (char)(((unsigned __int8)dungeon_entry_id & 7) + 3) >= *(_BYTE *)(((unsigned __int64)dungeon_entry_id >> 3)
                                                                                   + 0x7FFF8000) )
              {
                __asan_report_load4(dungeon_entry_id);
              }
              if ( Scene::checkDungeonEntryCanBeExplore(this, *dungeon_entry_id, dungeon_entry_config_ptr) )
              {
                if ( *(_BYTE *)(((unsigned __int64)dungeon_entry_id >> 3) + 0x7FFF8000) != 0
                  && (char)(((unsigned __int8)dungeon_entry_id & 7) + 3) >= *(_BYTE *)(((unsigned __int64)dungeon_entry_id >> 3)
                                                                                     + 0x7FFF8000) )
                {
                  __asan_report_load4(dungeon_entry_id);
                }
                if ( !Scene::isPointUnlocked(this, *dungeon_entry_id) )
                  std::unordered_set<unsigned int>::insert(&this->unlock_info_.to_be_explored_set, dungeon_entry_id);
              }
              else
              {
                if ( *(_BYTE *)(((unsigned __int64)dungeon_entry_id >> 3) + 0x7FFF8000) != 0
                  && (char)(((unsigned __int8)dungeon_entry_id & 7) + 3) >= *(_BYTE *)(((unsigned __int64)dungeon_entry_id >> 3)
                                                                                     + 0x7FFF8000) )
                {
                  __asan_report_load4(dungeon_entry_id);
                }
                if ( Scene::isPointUnlocked(this, *dungeon_entry_id) )
                {
                  common::milog::MiLogStream::create(
                    (common::milog::MiLogStream *)&v37._M_weak_this._M_refcount,
                    &common::milog::MiLogDefault::default_log_obj_,
                    1u,
                    "./src/scene/scene.cpp",
                    "updateDungeonEntryExploreStateOnLogin",
                    565);
                  v13 = common::milog::MiLogStream::operator<<<char [46],(char *[46])0>(
                          (common::milog::MiLogStream *const)&v37._M_weak_this._M_refcount,
                          (const char (*)[46])"[Dungeon Entry] dunegon entry become locked: ");
                  common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v13, dungeon_entry_id);
                  common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)&v37._M_weak_this._M_refcount);
                  std::unordered_set<unsigned int>::erase(&this->unlock_info_.unlocked_point_set, dungeon_entry_id);
                }
                __for_range_0 = &dungeon_entry_config_ptr->satisfied_cond;
                __for_begin_0._M_current = std::vector<data::DungeonEntrySatisfiedCond>::begin(&dungeon_entry_config_ptr->satisfied_cond)._M_current;
                __for_end_0._M_current = std::vector<data::DungeonEntrySatisfiedCond>::end(__for_range_0)._M_current;
                while ( __gnu_cxx::operator!=<data::DungeonEntrySatisfiedCond const*,std::vector<data::DungeonEntrySatisfiedCond>>(
                          &__for_begin_0,
                          &__for_end_0) )
                {
                  dungeon_entry_cond = __gnu_cxx::__normal_iterator<data::DungeonEntrySatisfiedCond const*,std::vector<data::DungeonEntrySatisfiedCond>>::operator*(&__for_begin_0);
                  if ( *(_BYTE *)(((unsigned __int64)&dungeon_entry_cond->type >> 3) + 0x7FFF8000) != 0
                    && *(_BYTE *)(((unsigned __int64)&dungeon_entry_cond->type >> 3) + 0x7FFF8000) <= 3 )
                  {
                    __asan_report_load4(&dungeon_entry_cond->type);
                  }
                  type = dungeon_entry_cond->type;
                  if ( type == DUNGEON_ENTRY_CONDITION_LEVEL )
                  {
                    value._M_target = getInternalPlayerEventType<PlayerLevelupEvent>()._M_target;
                    if ( !common::tools::MiscUtils::isContains<std::unordered_map<std::type_index,std::weak_ptr<Observer>>,std::type_index>(
                            &this->observer_map_,
                            &value) )
                    {
                      v15 = std::__shared_ptr_access<Player,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Player,(__gnu_cxx::_Lock_policy)2,false,false> *const)(p_pending_que + 32));
                      key = (std::weak_ptr<Scene> *)Player::getEventComp(v15);
                      std::weak_ptr<Scene>::weak_ptr(&v36, (const std::weak_ptr<Scene> *)(p_pending_que + 96));
                      PlayerEventComp::registerObserver<Scene,PlayerLevelupEvent>(
                        &v37,
                        key,
                        (void (*)(Scene *, const PlayerLevelupEvent *))&v36);
                      value._M_target = getInternalPlayerEventType<PlayerLevelupEvent>()._M_target;
                      v16 = std::unordered_map<std::type_index,std::weak_ptr<Observer>>::operator[](
                              &this->observer_map_,
                              &value);
                      std::weak_ptr<Observer>::operator=(v16, (std::weak_ptr<Observer> *)&v37);
                      std::weak_ptr<Observer>::~weak_ptr((std::weak_ptr<Observer> *const)&v37);
                      std::weak_ptr<Scene>::~weak_ptr(&v36);
                    }
                  }
                  else if ( type == DUNGEON_ENTRY_CONDITION_QUEST )
                  {
                    value._M_target = getInternalPlayerEventType<FinishQuestEvent>()._M_target;
                    if ( !common::tools::MiscUtils::isContains<std::unordered_map<std::type_index,std::weak_ptr<Observer>>,std::type_index>(
                            &this->observer_map_,
                            &value) )
                    {
                      v17 = std::__shared_ptr_access<Player,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Player,(__gnu_cxx::_Lock_policy)2,false,false> *const)(p_pending_que + 32));
                      keya = (std::weak_ptr<Scene> *)Player::getEventComp(v17);
                      std::weak_ptr<Scene>::weak_ptr(&v36, (const std::weak_ptr<Scene> *)(p_pending_que + 96));
                      PlayerEventComp::registerObserver<Scene,FinishQuestEvent>(
                        &v37,
                        keya,
                        (void (*)(Scene *, const FinishQuestEvent *))&v36);
                      value._M_target = getInternalPlayerEventType<FinishQuestEvent>()._M_target;
                      v18 = std::unordered_map<std::type_index,std::weak_ptr<Observer>>::operator[](
                              &this->observer_map_,
                              &value);
                      std::weak_ptr<Observer>::operator=(v18, (std::weak_ptr<Observer> *)&v37);
                      std::weak_ptr<Observer>::~weak_ptr((std::weak_ptr<Observer> *const)&v37);
                      std::weak_ptr<Scene>::~weak_ptr(&v36);
                    }
                  }
                  __gnu_cxx::__normal_iterator<data::DungeonEntrySatisfiedCond const*,std::vector<data::DungeonEntrySatisfiedCond>>::operator++(&__for_begin_0);
                }
                common::milog::MiLogStream::create(
                  (common::milog::MiLogStream *)&v37._M_weak_this._M_refcount,
                  &common::milog::MiLogDefault::default_log_obj_,
                  1u,
                  "./src/scene/scene.cpp",
                  "updateDungeonEntryExploreStateOnLogin",
                  588);
                v19 = common::milog::MiLogStream::operator<<<char [60],(char *[60])0>(
                        (common::milog::MiLogStream *const)&v37._M_weak_this._M_refcount,
                        (const char (*)[60])"[Dungeon Entry] dungeon entry added into not_explored_set: ");
                common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v19, dungeon_entry_id);
                common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)&v37._M_weak_this._M_refcount);
                std::unordered_set<unsigned int>::insert(&this->unlock_info_.not_explored_set, dungeon_entry_id);
              }
            }
          }
          else
          {
            common::milog::MiLogStream::create(
              (common::milog::MiLogStream *)&v37._M_weak_this._M_refcount,
              &common::milog::MiLogDefault::default_log_obj_,
              4u,
              "./src/scene/scene.cpp",
              "updateDungeonEntryExploreStateOnLogin",
              542);
            v10 = common::milog::MiLogStream::operator<<<char [45],(char *[45])0>(
                    (common::milog::MiLogStream *const)&v37._M_weak_this._M_refcount,
                    (const char (*)[45])"findDungeonEntryExcelConfig fail, config_id:");
            v11 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v10, config_id);
            v12 = common::milog::MiLogStream::operator<<<char [8],(char *[8])0>(v11, (const char (*)[8])" scene:");
            common::milog::MiLogStream::operator<<<Scene,(Scene*)0>(v12, this);
            common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)&v37._M_weak_this._M_refcount);
          }
          std::_Rb_tree_const_iterator<std::pair<unsigned int const,unsigned int>>::operator++(&__for_begin);
        }
        v4 = 0;
      }
      else
      {
        common::milog::MiLogStream::create(
          (common::milog::MiLogStream *)&v37._M_weak_this._M_refcount,
          &common::milog::MiLogDefault::default_log_obj_,
          3u,
          "./src/scene/scene.cpp",
          "updateDungeonEntryExploreStateOnLogin",
          534);
        v6 = common::milog::MiLogStream::operator<<<char [42],(char *[42])0>(
               (common::milog::MiLogStream *const)&v37._M_weak_this._M_refcount,
               (const char (*)[42])"dungeon_entry_point_map not found, scene:");
        common::milog::MiLogStream::operator<<<Scene,(Scene*)0>(v6, this);
        common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)&v37._M_weak_this._M_refcount);
        v4 = -1;
      }
      std::weak_ptr<Scene>::~weak_ptr((std::weak_ptr<Scene> *const)(p_pending_que + 96));
    }
    std::shared_ptr<Scene>::~shared_ptr((std::shared_ptr<Scene> *const)(p_pending_que + 64));
  }
  std::shared_ptr<Player>::~shared_ptr((std::shared_ptr<Player> *const)(p_pending_que + 32));
  result = v4;
  if ( &v37.event_center_.context_.pending_que_ == (std::queue<std::variant<std::weak_ptr<Observer>,std::shared_ptr<BaseEvent> >> *)p_pending_que )
  {
    *(_QWORD *)((p_pending_que >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((p_pending_que >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)p_pending_que = 1172321806LL;
    *(_QWORD *)((p_pending_que >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((p_pending_que >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 597: range 0000000015976764-00000000159770FB
int32_t __cdecl Scene::checkAndUpdateTempleExploreExpOnLogin(Scene *const this, Player *player)
{
  unsigned __int64 v2; // r12
  __int64 v3; // rax
  _DWORD *v4; // r13
  common::milog::MiLogStream *v5; // rax
  common::milog::MiLogStream *v6; // rax
  common::milog::MiLogStream *v7; // rdx
  common::milog::MiLogStream *v8; // rax
  common::milog::MiLogStream *v9; // rdx
  std::pair<unsigned int const,unsigned int> *v10; // rax
  std::pair<unsigned int const,unsigned int> *v11; // rdx
  std::__shared_ptr_access<Group,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v12; // rcx
  common::milog::MiLogStream *v13; // rax
  common::milog::MiLogStream *v14; // rax
  common::milog::MiLogStream *v15; // rdx
  common::milog::MiLogStream *v16; // rax
  common::milog::MiLogStream *v17; // rdx
  const Area *v18; // rdi
  uint32_t v19; // ecx
  Area *v20; // rdi
  uint32_t v21; // ecx
  common::milog::MiLogStream *v22; // rax
  common::milog::MiLogStream *v23; // rax
  common::milog::MiLogStream *v24; // rax
  common::milog::MiLogStream *v25; // rax
  common::milog::MiLogStream *v26; // rax
  common::milog::MiLogStream *v27; // rax
  common::milog::MiLogStream *v28; // rdx
  int32_t result; // eax
  std::unordered_map<unsigned int,std::unordered_map<unsigned int,unsigned int>>::const_iterator __for_begin; // [rsp+10h] [rbp-110h] BYREF
  std::unordered_map<unsigned int,std::unordered_map<unsigned int,unsigned int>>::const_iterator __for_end; // [rsp+18h] [rbp-108h] BYREF
  std::unordered_map<unsigned int,unsigned int>::const_iterator __for_begin_0; // [rsp+20h] [rbp-100h] BYREF
  std::unordered_map<unsigned int,unsigned int>::const_iterator __for_end_0; // [rsp+28h] [rbp-F8h] BYREF
  const std::unordered_map<unsigned int,std::unordered_map<unsigned int,unsigned int>> *__for_range; // [rsp+30h] [rbp-F0h]
  const std::pair<unsigned int const,std::unordered_map<unsigned int,unsigned int> > *v36; // [rsp+38h] [rbp-E8h]
  std::tuple_element<0,const std::pair<unsigned int const,std::unordered_map<unsigned int,unsigned int> > >::type *group_id; // [rsp+40h] [rbp-E0h]
  std::tuple_element<1,const std::pair<unsigned int const,std::unordered_map<unsigned int,unsigned int> > >::type *config_id_area_id_map; // [rsp+48h] [rbp-D8h]
  const std::unordered_map<unsigned int,unsigned int> *__for_range_0; // [rsp+50h] [rbp-D0h]
  std::tuple_element<0,std::pair<unsigned int const,unsigned int> >::type *config_id; // [rsp+58h] [rbp-C8h]
  std::tuple_element<1,std::pair<unsigned int const,unsigned int> >::type *area_id; // [rsp+60h] [rbp-C0h]
  std::pair<unsigned int const,unsigned int> __in; // [rsp+68h] [rbp-B8h] BYREF
  common::milog::MiLogStream v43; // [rsp+70h] [rbp-B0h] BYREF
  char v44[144]; // [rsp+90h] [rbp-90h] BYREF

  v2 = (unsigned __int64)v44;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_1(96LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "2 32 16 13 group_ptr:600 64 16 12 area_ptr:612";
  *(_QWORD *)(v2 + 16) = Scene::checkAndUpdateTempleExploreExpOnLogin;
  v4 = (_DWORD *)(v2 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = -219021312;
  v4[536862722] = -202178560;
  ServiceBox::findService<GameserverService>();
  GameserverService::getConfig((GameserverService *const)(v2 + 64));
  __for_range = &std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 64))->design_config.lua_config_mgr.world_scene_group_temples_map;
  std::shared_ptr<Config>::~shared_ptr((std::shared_ptr<Config> *const)(v2 + 64));
  __for_begin._M_cur = std::unordered_map<unsigned int,std::unordered_map<unsigned int,unsigned int>>::begin(__for_range)._M_cur;
  __for_end._M_cur = std::unordered_map<unsigned int,std::unordered_map<unsigned int,unsigned int>>::end(__for_range)._M_cur;
  while ( std::__detail::operator!=<std::pair<unsigned int const,std::unordered_map<unsigned int,unsigned int>>,false>(
            &__for_begin,
            &__for_end) )
  {
    v36 = std::__detail::_Node_const_iterator<std::pair<unsigned int const,std::unordered_map<unsigned int,unsigned int>>,false,false>::operator*(&__for_begin);
    group_id = std::get<0ul,unsigned int const,std::unordered_map<unsigned int,unsigned int>>(v36);
    config_id_area_id_map = (std::tuple_element<1,const std::pair<unsigned int const,std::unordered_map<unsigned int,unsigned int> > >::type *)std::get<1ul,unsigned int const,std::unordered_map<unsigned int,unsigned int>>(v36);
    if ( *(_BYTE *)(((unsigned __int64)group_id >> 3) + 0x7FFF8000) != 0
      && (char)(((unsigned __int8)group_id & 7) + 3) >= *(_BYTE *)(((unsigned __int64)group_id >> 3) + 0x7FFF8000) )
    {
      __asan_report_load4(group_id);
    }
    Scene::findGroup((Scene *const)(v2 + 32), (uint32_t)this);
    if ( std::operator==<Group>(0LL, (const std::shared_ptr<Group> *)(v2 + 32)) )
    {
      common::milog::MiLogStream::create(
        &v43,
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/scene/scene.cpp",
        "checkAndUpdateTempleExploreExpOnLogin",
        603);
      v5 = common::milog::MiLogStream::operator<<<char [26],(char *[26])0>(
             &v43,
             (const char (*)[26])"findGroup fail, group_id:");
      v6 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v5, group_id);
      v7 = common::milog::MiLogStream::operator<<<char [8],(char *[8])0>(v6, (const char (*)[8])" scene:");
      v8 = common::milog::MiLogStream::operator<<<Scene,(Scene*)0>(v7, this);
      v9 = common::milog::MiLogStream::operator<<<char [9],(char *[9])0>(v8, (const char (*)[9])" player:");
      operator<<(v9, player);
      common::milog::MiLogStream::~MiLogStream(&v43);
    }
    else
    {
      __for_range_0 = config_id_area_id_map;
      __for_begin_0._M_cur = std::unordered_map<unsigned int,unsigned int>::begin(config_id_area_id_map)._M_cur;
      __for_end_0._M_cur = std::unordered_map<unsigned int,unsigned int>::end(__for_range_0)._M_cur;
      while ( std::__detail::operator!=<std::pair<unsigned int const,unsigned int>,false>(&__for_begin_0, &__for_end_0) )
      {
        v10 = (std::pair<unsigned int const,unsigned int> *)std::__detail::_Node_const_iterator<std::pair<unsigned int const,unsigned int>,false,false>::operator*(&__for_begin_0);
        v11 = v10;
        if ( ((unsigned __int8)v10 & 7) >= *(_BYTE *)(((unsigned __int64)v10 >> 3) + 0x7FFF8000)
          && *(_BYTE *)(((unsigned __int64)v10 >> 3) + 0x7FFF8000) != 0
          || *(_BYTE *)((((unsigned __int64)&v10->second + 3) >> 3) + 0x7FFF8000) != 0
          && (((unsigned __int8)v10 + 7) & 7) >= *(_BYTE *)((((unsigned __int64)&v10->second + 3) >> 3) + 0x7FFF8000) )
        {
          __asan_report_load_n(v10, 8LL);
        }
        __in = *v11;
        config_id = std::get<0ul,unsigned int const,unsigned int>(&__in);
        area_id = std::get<1ul,unsigned int const,unsigned int>(&__in);
        v12 = std::__shared_ptr_access<Group,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Group,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 32));
        if ( *(_BYTE *)(((unsigned __int64)config_id >> 3) + 0x7FFF8000) != 0
          && (char)(((unsigned __int8)config_id & 7) + 3) >= *(_BYTE *)(((unsigned __int64)config_id >> 3) + 0x7FFF8000) )
        {
          __asan_report_load4(config_id);
        }
        if ( Group::isEntityDeleted(v12, PROT_ENTITY_GADGET, *config_id) )
        {
          if ( *(_BYTE *)(((unsigned __int64)area_id >> 3) + 0x7FFF8000) != 0
            && (char)(((unsigned __int8)area_id & 7) + 3) >= *(_BYTE *)(((unsigned __int64)area_id >> 3) + 0x7FFF8000) )
          {
            __asan_report_load4(area_id);
          }
          Scene::getArea((Scene *const)(v2 + 64), (uint32_t)this);
          if ( std::operator==<Area>(0LL, (const std::shared_ptr<Area> *)(v2 + 64)) )
          {
            common::milog::MiLogStream::create(
              &v43,
              &common::milog::MiLogDefault::default_log_obj_,
              3u,
              "./src/scene/scene.cpp",
              "checkAndUpdateTempleExploreExpOnLogin",
              615);
            v13 = common::milog::MiLogStream::operator<<<char [23],(char *[23])0>(
                    &v43,
                    (const char (*)[23])"getArea fail, area_id:");
            v14 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v13, area_id);
            v15 = common::milog::MiLogStream::operator<<<char [8],(char *[8])0>(v14, (const char (*)[8])" scene:");
            v16 = common::milog::MiLogStream::operator<<<Scene,(Scene*)0>(v15, this);
            v17 = common::milog::MiLogStream::operator<<<char [9],(char *[9])0>(v16, (const char (*)[9])" player:");
            operator<<(v17, player);
            common::milog::MiLogStream::~MiLogStream(&v43);
          }
          else
          {
            v18 = std::__shared_ptr_access<Area,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Area,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 64));
            if ( *(_BYTE *)(((unsigned __int64)config_id >> 3) + 0x7FFF8000) != 0
              && (char)(((unsigned __int8)config_id & 7) + 3) >= *(_BYTE *)(((unsigned __int64)config_id >> 3)
                                                                          + 0x7FFF8000) )
            {
              v18 = (const Area *)config_id;
              __asan_report_load4(config_id);
            }
            v19 = *config_id;
            if ( *(_BYTE *)(((unsigned __int64)group_id >> 3) + 0x7FFF8000) != 0
              && (char)(((unsigned __int8)group_id & 7) + 3) >= *(_BYTE *)(((unsigned __int64)group_id >> 3) + 0x7FFF8000) )
            {
              v18 = (const Area *)group_id;
              __asan_report_load4(group_id);
            }
            if ( !Area::isTempleInteracted(v18, *group_id, v19) )
            {
              v20 = std::__shared_ptr_access<Area,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Area,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 64));
              if ( *(_BYTE *)(((unsigned __int64)config_id >> 3) + 0x7FFF8000) != 0
                && (char)(((unsigned __int8)config_id & 7) + 3) >= *(_BYTE *)(((unsigned __int64)config_id >> 3)
                                                                            + 0x7FFF8000) )
              {
                v20 = (Area *)config_id;
                __asan_report_load4(config_id);
              }
              v21 = *config_id;
              if ( *(_BYTE *)(((unsigned __int64)group_id >> 3) + 0x7FFF8000) != 0
                && (char)(((unsigned __int8)group_id & 7) + 3) >= *(_BYTE *)(((unsigned __int64)group_id >> 3)
                                                                           + 0x7FFF8000) )
              {
                v20 = (Area *)group_id;
                __asan_report_load4(group_id);
              }
              if ( (unsigned int)Area::tryAddExplorePointOnTempleInteract(v20, *group_id, v21) )
              {
                common::milog::MiLogStream::create(
                  &v43,
                  &common::milog::MiLogDefault::default_log_obj_,
                  3u,
                  "./src/scene/scene.cpp",
                  "checkAndUpdateTempleExploreExpOnLogin",
                  624);
                v22 = common::milog::MiLogStream::operator<<<char [48],(char *[48])0>(
                        &v43,
                        (const char (*)[48])"tryAddExplorePointOnInteraction fail, group_id:");
              }
              else
              {
                common::milog::MiLogStream::create(
                  &v43,
                  &common::milog::MiLogDefault::default_log_obj_,
                  1u,
                  "./src/scene/scene.cpp",
                  "checkAndUpdateTempleExploreExpOnLogin",
                  627);
                v22 = common::milog::MiLogStream::operator<<<char [48],(char *[48])0>(
                        &v43,
                        (const char (*)[48])"tryAddExplorePointOnInteraction succ, group_id:");
              }
              v23 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v22, group_id);
              v24 = common::milog::MiLogStream::operator<<<char [12],(char *[12])0>(
                      v23,
                      (const char (*)[12])" config_id:");
              v25 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v24, config_id);
              v26 = common::milog::MiLogStream::operator<<<char [10],(char *[10])0>(
                      v25,
                      (const char (*)[10])" area_id:");
              v27 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v26, area_id);
              v28 = common::milog::MiLogStream::operator<<<char [9],(char *[9])0>(v27, (const char (*)[9])" player:");
              operator<<(v28, player);
              common::milog::MiLogStream::~MiLogStream(&v43);
            }
          }
          std::shared_ptr<Area>::~shared_ptr((std::shared_ptr<Area> *const)(v2 + 64));
        }
        std::__detail::_Node_const_iterator<std::pair<unsigned int const,unsigned int>,false,false>::operator++(&__for_begin_0);
      }
    }
    std::shared_ptr<Group>::~shared_ptr((std::shared_ptr<Group> *const)(v2 + 32));
    std::__detail::_Node_const_iterator<std::pair<unsigned int const,std::unordered_map<unsigned int,unsigned int>>,false,false>::operator++(&__for_begin);
  }
  result = 0;
  if ( v44 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8008) = 0;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8008) = -168430091;
  }
  return result;
};

// Line 634: range 00000000159770FC-0000000015977283
int32_t __cdecl Scene::clientInteractsDailyDungeonInfo(Scene *const this)
{
  unsigned int *v1; // rax
  uint32_t *v2; // rdx
  DungeonEntryExcelConfigMgr *p_dungeon_entry_config_mgr; // rcx
  uint32_t point_id; // [rsp+1Ch] [rbp-44h]
  std::unordered_set<unsigned int>::iterator __for_begin; // [rsp+20h] [rbp-40h] BYREF
  std::unordered_set<unsigned int>::iterator __for_end; // [rsp+28h] [rbp-38h] BYREF
  std::unordered_set<unsigned int> *__for_range; // [rsp+30h] [rbp-30h]
  const data::DungeonEntryExcelConfig *dungeon_entry_config_ptr; // [rsp+38h] [rbp-28h]
  std::shared_ptr<Config> v10[2]; // [rsp+40h] [rbp-20h] BYREF

  __for_range = &this->unlock_info_.to_be_explored_set;
  __for_begin._M_cur = std::unordered_set<unsigned int>::begin(&this->unlock_info_.to_be_explored_set)._M_cur;
  __for_end._M_cur = std::unordered_set<unsigned int>::end(&this->unlock_info_.to_be_explored_set)._M_cur;
  while ( std::__detail::operator!=<unsigned int,false>(&__for_begin, &__for_end) )
  {
    v1 = (unsigned int *)std::__detail::_Node_iterator<unsigned int,true,false>::operator*(&__for_begin);
    v2 = v1;
    if ( *(_BYTE *)(((unsigned __int64)v1 >> 3) + 0x7FFF8000) != 0
      && (char)(((unsigned __int8)v1 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)v1 >> 3) + 0x7FFF8000) )
    {
      __asan_report_load4(v1);
    }
    point_id = *v2;
    ServiceBox::findService<GameserverService>();
    GameserverService::getConfig((GameserverService *const)v10);
    p_dungeon_entry_config_mgr = &std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false> *const)v10)->design_config.txt_config_mgr.dungeon_entry_config_mgr;
    if ( *(_BYTE *)(((unsigned __int64)&this->scene_id_ >> 3) + 0x7FFF8000) != 0
      && *(_BYTE *)(((unsigned __int64)&this->scene_id_ >> 3) + 0x7FFF8000) <= 3 )
    {
      __asan_report_load4(&this->scene_id_);
    }
    dungeon_entry_config_ptr = DungeonEntryExcelConfigMgr::findDungeonEntryConfig(
                                 p_dungeon_entry_config_mgr,
                                 this->scene_id_,
                                 point_id);
    std::shared_ptr<Config>::~shared_ptr(v10);
    if ( dungeon_entry_config_ptr )
      std::unordered_set<unsigned int>::insert(
        &this->interacted_to_be_explored_dungeon_entry_config_id_set_,
        &dungeon_entry_config_ptr->id);
    std::__detail::_Node_iterator<unsigned int,true,false>::operator++(&__for_begin);
  }
  return 0;
};

// Line 647: range 0000000015977284-0000000015977326
void __cdecl Scene::onPlayerLevelUp(Scene *const this, const PlayerLevelupEvent *event)
{
  common::milog::MiLogStream *v2; // rax
  common::milog::MiLogStream v3; // [rsp+10h] [rbp-30h] BYREF

  common::milog::MiLogStream::create(
    &v3,
    &common::milog::MiLogDefault::default_log_obj_,
    1u,
    "./src/scene/scene.cpp",
    "onPlayerLevelUp",
    648);
  v2 = common::milog::MiLogStream::operator<<<char [34],(char *[34])0>(
         &v3,
         (const char (*)[34])"[Dungeon Entry] onPlayerLevelUp: ");
  common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v2, &event->cur_level);
  common::milog::MiLogStream::~MiLogStream(&v3);
  Scene::onTriggerDungeonEntryEvent(this);
};

// Line 653: range 0000000015977328-0000000015977B94
void __cdecl Scene::onTriggerDungeonEntryEvent(Scene *const this)
{
  unsigned __int64 v1; // r13
  __int64 v2; // rax
  _DWORD *v3; // r12
  std::__detail::_Node_iterator<unsigned int,true,false>::reference v4; // rax
  _DWORD *v5; // rdx
  const DungeonEntryExcelConfigMgr *p_dungeon_entry_config_mgr; // rdi
  uint32_t v7; // edx
  common::milog::MiLogStream *v8; // rax
  unsigned __int64 v9; // rax
  common::milog::MiLogStream *v10; // rdx
  common::milog::MiLogStream *v11; // rax
  std::__shared_ptr_access<proto::DungeonEntryToBeExploreNotify,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v12; // r14
  uint32_t SceneId; // eax
  std::__shared_ptr_access<proto::DungeonEntryToBeExploreNotify,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v14; // rax
  std::__shared_ptr_access<proto::DungeonEntryToBeExploreNotify,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v15; // rax
  Player *v16; // r14
  Player *v17; // rax
  PlayerEventComp *EventComp; // r14
  std::unordered_set<unsigned int>::iterator __for_begin; // [rsp+18h] [rbp-1A8h] BYREF
  std::vector<const data::DungeonEntryExcelConfig*>::iterator __for_begin_0; // [rsp+20h] [rbp-1A0h] BYREF
  std::unordered_set<unsigned int> *__for_range; // [rsp+28h] [rbp-198h]
  std::vector<const data::DungeonEntryExcelConfig*> *__for_range_0; // [rsp+30h] [rbp-190h]
  const data::DungeonEntryExcelConfig *dungeon_entry_config_ptr; // [rsp+38h] [rbp-188h]
  std::shared_ptr<const google::protobuf::Message> v25; // [rsp+40h] [rbp-180h] BYREF
  common::milog::MiLogStream v26; // [rsp+50h] [rbp-170h] BYREF
  common::milog::MiLogStream v27; // [rsp+70h] [rbp-150h] BYREF
  char v28[304]; // [rsp+90h] [rbp-130h] BYREF

  v1 = (unsigned __int64)v28;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_2(256LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "7 32 4 20 dungeon_entry_id:682 48 4 13 config_id:683 64 8 28 dungeon_entry_config_ptr:663 96 16 "
                        "14 player_ptr:654 128 16 14 notify_ptr:688 160 16 9 event:694 192 24 46 change_to_explore_dungeo"
                        "n_entry_config_vec:660";
  *(_QWORD *)(v1 + 16) = Scene::onTriggerDungeonEntryEvent;
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234556924;
  v3[536862722] = -218959360;
  v3[536862723] = -219021312;
  v3[536862724] = -219021312;
  v3[536862725] = -219021312;
  v3[536862726] = -218103808;
  v3[536862727] = -202116109;
  Scene::getOwnPlayer((const Scene *const)(v1 + 96));
  if ( !std::operator==<Player>(0LL, (const std::shared_ptr<Player> *)(v1 + 96)) )
  {
    std::vector<data::DungeonEntryExcelConfig const*>::vector((std::vector<const data::DungeonEntryExcelConfig*> *const)(v1 + 192));
    __for_range = &this->unlock_info_.not_explored_set;
    __for_begin._M_cur = std::unordered_set<unsigned int>::begin(&this->unlock_info_.not_explored_set)._M_cur;
    __for_begin_0._M_current = (const data::DungeonEntryExcelConfig **)std::unordered_set<unsigned int>::end(&this->unlock_info_.not_explored_set)._M_cur;
    while ( std::__detail::operator!=<unsigned int,false>(
              &__for_begin,
              (const std::__detail::_Node_iterator_base<unsigned int,false> *)&__for_begin_0) )
    {
      v4 = std::__detail::_Node_iterator<unsigned int,true,false>::operator*(&__for_begin);
      v5 = v4;
      if ( *(_BYTE *)(((unsigned __int64)v4 >> 3) + 0x7FFF8000) != 0
        && (char)(((unsigned __int8)v4 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)v4 >> 3) + 0x7FFF8000) )
      {
        __asan_report_load4(v4);
      }
      *(_DWORD *)(v1 + 48) = *v5;
      ServiceBox::findService<GameserverService>();
      GameserverService::getConfig((GameserverService *const)&v25);
      p_dungeon_entry_config_mgr = &std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false> *const)&v25)->design_config.txt_config_mgr.dungeon_entry_config_mgr;
      v7 = *(_DWORD *)(v1 + 48);
      if ( *(_BYTE *)(((unsigned __int64)&this->scene_id_ >> 3) + 0x7FFF8000) != 0
        && *(_BYTE *)(((unsigned __int64)&this->scene_id_ >> 3) + 0x7FFF8000) <= 3 )
      {
        p_dungeon_entry_config_mgr = (const DungeonEntryExcelConfigMgr *)&this->scene_id_;
        __asan_report_load4(&this->scene_id_);
      }
      *(_QWORD *)(v1 + 64) = DungeonEntryExcelConfigMgr::findDungeonEntryConfig(
                               p_dungeon_entry_config_mgr,
                               this->scene_id_,
                               v7);
      std::shared_ptr<Config>::~shared_ptr((std::shared_ptr<Config> *const)&v25);
      if ( !*(_QWORD *)(v1 + 64) )
      {
        common::milog::MiLogStream::create(
          &v27,
          &common::milog::MiLogDefault::default_log_obj_,
          3u,
          "./src/scene/scene.cpp",
          "onTriggerDungeonEntryEvent",
          666);
        v8 = common::milog::MiLogStream::operator<<<char [52],(char *[52])0>(
               &v27,
               (const char (*)[52])"[Dungeon Entry] dungeon entry not found in config: ");
        common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v8, (const unsigned int *)(v1 + 48));
        common::milog::MiLogStream::~MiLogStream(&v27);
        goto LABEL_28;
      }
      if ( Scene::checkDungeonEntryCanBeExplore(
             this,
             *(_DWORD *)(v1 + 48),
             *(const data::DungeonEntryExcelConfig **)(v1 + 64)) )
      {
        std::vector<data::DungeonEntryExcelConfig const*>::push_back(
          (std::vector<const data::DungeonEntryExcelConfig*> *const)(v1 + 192),
          (const std::vector<const data::DungeonEntryExcelConfig*>::value_type *)(v1 + 64));
      }
      std::__detail::_Node_iterator<unsigned int,true,false>::operator++(&__for_begin);
    }
    __for_range_0 = (std::vector<const data::DungeonEntryExcelConfig*> *)(v1 + 192);
    __for_begin_0._M_current = std::vector<data::DungeonEntryExcelConfig const*>::begin((std::vector<const data::DungeonEntryExcelConfig*> *const)(v1 + 192))._M_current;
    *(std::vector<const data::DungeonEntryExcelConfig*>::iterator *)(v1 + 64) = std::vector<data::DungeonEntryExcelConfig const*>::end(__for_range_0);
    while ( __gnu_cxx::operator!=<data::DungeonEntryExcelConfig const**,std::vector<data::DungeonEntryExcelConfig const*>>(
              &__for_begin_0,
              (const __gnu_cxx::__normal_iterator<const data::DungeonEntryExcelConfig**,std::vector<const data::DungeonEntryExcelConfig*> > *)(v1 + 64)) )
    {
      v9 = (unsigned __int64)__gnu_cxx::__normal_iterator<data::DungeonEntryExcelConfig const**,std::vector<data::DungeonEntryExcelConfig const*>>::operator*(&__for_begin_0);
      if ( *(_BYTE *)((v9 >> 3) + 0x7FFF8000) )
        v9 = __asan_report_load8();
      dungeon_entry_config_ptr = *(const data::DungeonEntryExcelConfig **)v9;
      if ( dungeon_entry_config_ptr )
      {
        if ( *(_BYTE *)(((unsigned __int64)&dungeon_entry_config_ptr->dungeon_entry_id >> 3) + 0x7FFF8000) != 0
          && *(_BYTE *)(((unsigned __int64)&dungeon_entry_config_ptr->dungeon_entry_id >> 3) + 0x7FFF8000) <= 3 )
        {
          __asan_report_load4(&dungeon_entry_config_ptr->dungeon_entry_id);
        }
        *(_DWORD *)(v1 + 32) = dungeon_entry_config_ptr->dungeon_entry_id;
        if ( *(_BYTE *)(((unsigned __int64)&dungeon_entry_config_ptr->id >> 3) + 0x7FFF8000) != 0
          && *(_BYTE *)(((unsigned __int64)&dungeon_entry_config_ptr->id >> 3) + 0x7FFF8000) <= 3 )
        {
          __asan_report_load4(&dungeon_entry_config_ptr->id);
        }
        *(_DWORD *)(v1 + 48) = dungeon_entry_config_ptr->id;
        common::milog::MiLogStream::create(
          &v27,
          &common::milog::MiLogDefault::default_log_obj_,
          1u,
          "./src/scene/scene.cpp",
          "onTriggerDungeonEntryEvent",
          684);
        v11 = common::milog::MiLogStream::operator<<<char [62],(char *[62])0>(
                &v27,
                (const char (*)[62])"[Dungeon Entry] dungeon entry is changed to explored status: ");
        common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v11, (const unsigned int *)(v1 + 32));
        common::milog::MiLogStream::~MiLogStream(&v27);
        std::unordered_set<unsigned int>::insert(
          &this->unlock_info_.to_be_explored_set,
          (const std::unordered_set<unsigned int>::value_type *)(v1 + 32));
        std::unordered_set<unsigned int>::erase(
          &this->unlock_info_.not_explored_set,
          (const std::unordered_set<unsigned int>::key_type *)(v1 + 32));
        common::tools::perf::make_shared<proto::DungeonEntryToBeExploreNotify>();
        v12 = std::__shared_ptr_access<proto::DungeonEntryToBeExploreNotify,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<proto::DungeonEntryToBeExploreNotify,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v1 + 128));
        SceneId = Scene::getSceneId(this);
        proto::DungeonEntryToBeExploreNotify::set_scene_id(v12, SceneId);
        v14 = std::__shared_ptr_access<proto::DungeonEntryToBeExploreNotify,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<proto::DungeonEntryToBeExploreNotify,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v1 + 128));
        proto::DungeonEntryToBeExploreNotify::set_dungeon_entry_config_id(v14, *(_DWORD *)(v1 + 48));
        v15 = std::__shared_ptr_access<proto::DungeonEntryToBeExploreNotify,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<proto::DungeonEntryToBeExploreNotify,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v1 + 128));
        proto::DungeonEntryToBeExploreNotify::set_dungeon_entry_scene_point_id(v15, *(_DWORD *)(v1 + 32));
        v16 = std::__shared_ptr_access<Player,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Player,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v1 + 96));
        std::dynamic_pointer_cast<google::protobuf::Message const,proto::DungeonEntryToBeExploreNotify>((const std::shared_ptr<proto::DungeonEntryToBeExploreNotify> *)&v25);
        Player::sendMessage(v16, &v25, 0LL);
        std::shared_ptr<google::protobuf::Message const>::~shared_ptr(&v25);
        common::tools::perf::make_shared<DungeonEntryChangeToBeExploredEvent,unsigned int &,unsigned int &>(
          (unsigned int *)(v1 + 160),
          (unsigned int *)(v1 + 32),
          (unsigned int *)(v1 + 48),
          (unsigned int *)(v1 + 32));
        v17 = std::__shared_ptr_access<Player,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Player,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v1 + 96));
        EventComp = Player::getEventComp(v17);
        std::shared_ptr<BaseEvent>::shared_ptr<DungeonEntryChangeToBeExploredEvent,void>(
          (std::shared_ptr<BaseEvent> *const)&v25,
          (const std::shared_ptr<DungeonEntryChangeToBeExploredEvent> *)(v1 + 160));
        PlayerEventComp::notifyEvent(EventComp, (BaseEventPtr *)&v25);
        std::shared_ptr<BaseEvent>::~shared_ptr((std::shared_ptr<BaseEvent> *const)&v25);
        std::shared_ptr<DungeonEntryChangeToBeExploredEvent>::~shared_ptr((std::shared_ptr<DungeonEntryChangeToBeExploredEvent> *const)(v1 + 160));
        std::shared_ptr<proto::DungeonEntryToBeExploreNotify>::~shared_ptr((std::shared_ptr<proto::DungeonEntryToBeExploreNotify> *const)(v1 + 128));
      }
      else
      {
        common::milog::MiLogStream::create(
          &v26,
          &common::milog::MiLogDefault::default_log_obj_,
          4u,
          "./src/scene/scene.cpp",
          "onTriggerDungeonEntryEvent",
          679);
        v10 = common::milog::MiLogStream::operator<<<char [41],(char *[41])0>(
                &v26,
                (const char (*)[41])"dungeon_entry_config_ptr is null, scene:");
        common::milog::MiLogStream::operator<<<Scene,(Scene*)0>(v10, this);
        common::milog::MiLogStream::~MiLogStream(&v26);
      }
      __gnu_cxx::__normal_iterator<data::DungeonEntryExcelConfig const**,std::vector<data::DungeonEntryExcelConfig const*>>::operator++(&__for_begin_0);
    }
LABEL_28:
    std::vector<data::DungeonEntryExcelConfig const*>::~vector((std::vector<const data::DungeonEntryExcelConfig*> *const)(v1 + 192));
  }
  std::shared_ptr<Player>::~shared_ptr((std::shared_ptr<Player> *const)(v1 + 96));
  if ( v28 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8010) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8018) = 0LL;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
  }
};

// Line 700: range 0000000015977B96-0000000015977BB4
void __cdecl Scene::onQuestFinish(Scene *const this, const FinishQuestEvent *event)
{
  Scene::onTriggerDungeonEntryEvent(this);
};

// Line 705: range 0000000015977BB6-000000001597817C
__int64 __fastcall Scene::checkDungeonEntryCanBeExplore(
        Scene *const this,
        uint32_t dungeon_entry_id,
        const data::DungeonEntryExcelConfig *dungeon_entry_config)
{
  unsigned __int64 v3; // r12
  __int64 v4; // rax
  _DWORD *v5; // r13
  uint32_t v6; // esi
  common::milog::MiLogStream *v7; // rax
  common::milog::MiLogStream *v8; // rax
  common::milog::MiLogStream *v9; // rax
  unsigned int v10; // r14d
  data::LogicType cond_comb; // eax
  common::milog::MiLogStream *v12; // rax
  const data::DungeonEntrySatisfiedCond *v13; // rax
  unsigned int v14; // eax
  __int64 v15; // rax
  bool result; // [rsp+2Eh] [rbp-F2h]
  bool result_0; // [rsp+2Fh] [rbp-F1h]
  std::vector<data::DungeonEntrySatisfiedCond>::const_iterator __for_begin; // [rsp+30h] [rbp-F0h] BYREF
  std::vector<data::DungeonEntrySatisfiedCond>::const_iterator __for_end; // [rsp+38h] [rbp-E8h] BYREF
  const std::vector<data::DungeonEntrySatisfiedCond> *__for_range_0; // [rsp+40h] [rbp-E0h]
  const data::DungeonEntrySatisfiedCond *cond_0; // [rsp+48h] [rbp-D8h]
  const std::vector<data::DungeonEntrySatisfiedCond> *__for_range; // [rsp+50h] [rbp-D0h]
  const data::DungeonEntrySatisfiedCond *cond; // [rsp+58h] [rbp-C8h]
  std::shared_ptr<Config> v25; // [rsp+60h] [rbp-C0h] BYREF
  common::milog::MiLogStream v26; // [rsp+70h] [rbp-B0h] BYREF
  char v27[144]; // [rsp+90h] [rbp-90h] BYREF

  v3 = (unsigned __int64)v27;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_1(96LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "2 48 4 20 dungeon_entry_id:704 64 16 21 dungeon_entry_ptr:706";
  *(_QWORD *)(v3 + 16) = Scene::checkDungeonEntryCanBeExplore;
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = -234556943;
  v5[536862722] = -202178560;
  *(_DWORD *)(v3 + 48) = dungeon_entry_id;
  ServiceBox::findService<GameserverService>();
  GameserverService::getConfig((GameserverService *const)&v25);
  v6 = (unsigned int)std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false> *const)&v25)
     + 93080;
  if ( *(_BYTE *)(((unsigned __int64)&this->scene_id_ >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->scene_id_ >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4(&this->scene_id_);
  }
  JsonConfigMgr::findScenePoint<data::DungeonEntry>((const JsonConfigMgr *const)(v3 + 64), v6, this->scene_id_);
  std::shared_ptr<Config>::~shared_ptr(&v25);
  if ( std::operator==<data::DungeonEntry>(0LL, (const std::shared_ptr<data::DungeonEntry> *)(v3 + 64)) )
  {
    common::milog::MiLogStream::create(
      &v26,
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/scene/scene.cpp",
      "checkDungeonEntryCanBeExplore",
      709);
    v7 = common::milog::MiLogStream::operator<<<char [43],(char *[43])0>(
           &v26,
           (const char (*)[43])"[Dungeon Entry] dungeon entry not exists: ");
    v8 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v7, &this->scene_id_);
    v9 = common::milog::MiLogStream::operator<<<char [3],(char *[3])0>(v8, (const char (*)[3])", ");
    common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v9, (const unsigned int *)(v3 + 48));
    common::milog::MiLogStream::~MiLogStream(&v26);
    v10 = 0;
  }
  else
  {
    if ( *(char *)(((unsigned __int64)&dungeon_entry_config->is_default_open >> 3) + 0x7FFF8000) < 0 )
      __asan_report_load1(&dungeon_entry_config->is_default_open);
    if ( dungeon_entry_config->is_default_open )
    {
      v10 = 1;
    }
    else
    {
      if ( *(_BYTE *)(((unsigned __int64)&dungeon_entry_config->cond_comb >> 3) + 0x7FFF8000) != 0
        && (char)((((_BYTE)dungeon_entry_config + 60) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&dungeon_entry_config->cond_comb >> 3)
                                                                            + 0x7FFF8000) )
      {
        __asan_report_load4(&dungeon_entry_config->cond_comb);
      }
      cond_comb = dungeon_entry_config->cond_comb;
      if ( cond_comb == LOGIC_OR )
      {
        result_0 = 0;
        __for_range_0 = &dungeon_entry_config->satisfied_cond;
        __for_begin._M_current = std::vector<data::DungeonEntrySatisfiedCond>::begin(&dungeon_entry_config->satisfied_cond)._M_current;
        __for_end._M_current = std::vector<data::DungeonEntrySatisfiedCond>::end(&dungeon_entry_config->satisfied_cond)._M_current;
        while ( __gnu_cxx::operator!=<data::DungeonEntrySatisfiedCond const*,std::vector<data::DungeonEntrySatisfiedCond>>(
                  &__for_begin,
                  &__for_end) )
        {
          cond_0 = __gnu_cxx::__normal_iterator<data::DungeonEntrySatisfiedCond const*,std::vector<data::DungeonEntrySatisfiedCond>>::operator*(&__for_begin);
          result_0 = (result_0 | Scene::isSingleDungeonEntrySatifyExploreCond(this, *(_DWORD *)(v3 + 48), cond_0)) != 0;
          __gnu_cxx::__normal_iterator<data::DungeonEntrySatisfiedCond const*,std::vector<data::DungeonEntrySatisfiedCond>>::operator++(&__for_begin);
        }
        v10 = result_0;
        goto LABEL_31;
      }
      if ( cond_comb > LOGIC_OR )
        goto LABEL_30;
      if ( cond_comb == LOGIC_NONE )
      {
        if ( std::vector<data::DungeonEntrySatisfiedCond>::empty(&dungeon_entry_config->satisfied_cond) )
        {
          common::milog::MiLogStream::create(
            &v26,
            &common::milog::MiLogDefault::default_log_obj_,
            4u,
            "./src/scene/scene.cpp",
            "checkDungeonEntryCanBeExplore",
            723);
          v12 = common::milog::MiLogStream::operator<<<char [53],(char *[53])0>(
                  &v26,
                  (const char (*)[53])"dungeon_entry_config.satisfied_cond is empty, scene:");
          common::milog::MiLogStream::operator<<<Scene,(Scene*)0>(v12, this);
          common::milog::MiLogStream::~MiLogStream(&v26);
          v10 = 0;
        }
        else
        {
          v13 = std::vector<data::DungeonEntrySatisfiedCond>::operator[](&dungeon_entry_config->satisfied_cond, 0LL);
          LOBYTE(v14) = Scene::isSingleDungeonEntrySatifyExploreCond(this, *(_DWORD *)(v3 + 48), v13);
          v10 = v14;
        }
        goto LABEL_31;
      }
      if ( cond_comb == LOGIC_AND )
      {
        result = 1;
        __for_range = &dungeon_entry_config->satisfied_cond;
        __for_begin._M_current = std::vector<data::DungeonEntrySatisfiedCond>::begin(&dungeon_entry_config->satisfied_cond)._M_current;
        __for_end._M_current = std::vector<data::DungeonEntrySatisfiedCond>::end(&dungeon_entry_config->satisfied_cond)._M_current;
        while ( __gnu_cxx::operator!=<data::DungeonEntrySatisfiedCond const*,std::vector<data::DungeonEntrySatisfiedCond>>(
                  &__for_begin,
                  &__for_end) )
        {
          cond = __gnu_cxx::__normal_iterator<data::DungeonEntrySatisfiedCond const*,std::vector<data::DungeonEntrySatisfiedCond>>::operator*(&__for_begin);
          result = (result & Scene::isSingleDungeonEntrySatifyExploreCond(this, *(_DWORD *)(v3 + 48), cond)) != 0;
          __gnu_cxx::__normal_iterator<data::DungeonEntrySatisfiedCond const*,std::vector<data::DungeonEntrySatisfiedCond>>::operator++(&__for_begin);
        }
        v10 = result;
      }
      else
      {
LABEL_30:
        v10 = 0;
      }
    }
  }
LABEL_31:
  std::shared_ptr<data::DungeonEntry>::~shared_ptr((std::shared_ptr<data::DungeonEntry> *const)(v3 + 64));
  v15 = v10;
  if ( v27 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8008) = 0;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8008) = -168430091;
  }
  return v15;
};

// Line 753: range 000000001597817E-0000000015978191
std::unordered_set<unsigned int> *__cdecl Scene::getAllToBeExplorePoint(Scene *const this)
{
  return &this->unlock_info_.to_be_explored_set;
};

// Line 758: range 0000000015978192-00000000159781A5
std::unordered_set<unsigned int> *__cdecl Scene::getAllNotExploredPoint(Scene *const this)
{
  return &this->unlock_info_.not_explored_set;
};

// Line 763: range 00000000159781A6-00000000159781B9
std::unordered_set<unsigned int> *__cdecl Scene::getAllGroupUnlimitPoint(Scene *const this)
{
  return &this->unlock_info_.group_unlimit_point_set;
};

// Line 768: range 00000000159781BA-00000000159781CD
std::unordered_set<unsigned int> *__cdecl Scene::getAllHidePoint(Scene *const this)
{
  return &this->unlock_info_.hide_point_set;
};

// Line 773: range 00000000159781CE-00000000159781E1
std::unordered_set<unsigned int> *__cdecl Scene::getAllUnHidePoint(Scene *const this)
{
  return &this->unlock_info_.unhide_point_set;
};

// Line 778: range 00000000159781E2-000000001597843B
bool __cdecl Scene::isSingleDungeonEntrySatifyExploreCond(
        Scene *const this,
        uint32_t dungeon_entry_id,
        const data::DungeonEntrySatisfiedCond *cond)
{
  unsigned __int64 v3; // rbx
  __int64 v4; // rax
  unsigned __int64 v5; // r13
  bool v6; // r14
  data::DungeonEntrySatisfiedConditionType type; // eax
  Player *v8; // rax
  PlayerBasicComp *BasicComp; // rax
  uint32_t Level; // ecx
  Player *v11; // rax
  PlayerQuestComp *QuestComp; // rcx
  bool result; // al
  char v15[112]; // [rsp+20h] [rbp-70h] BYREF

  v3 = (unsigned __int64)v15;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_0(64LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "1 32 16 14 player_ptr:779";
  *(_QWORD *)(v3 + 16) = Scene::isSingleDungeonEntrySatifyExploreCond;
  v5 = v3 >> 3;
  *(_DWORD *)(v5 + 2147450880) = -235802127;
  *(_DWORD *)(v5 + 2147450884) = -202178560;
  Scene::getOwnPlayer((const Scene *const)(v3 + 32));
  if ( std::operator==<Player>(0LL, (const std::shared_ptr<Player> *)(v3 + 32)) )
  {
    v6 = 0;
  }
  else
  {
    if ( *(_BYTE *)(((unsigned __int64)&cond->type >> 3) + 0x7FFF8000) != 0
      && *(_BYTE *)(((unsigned __int64)&cond->type >> 3) + 0x7FFF8000) <= 3 )
    {
      __asan_report_load4(&cond->type);
    }
    type = cond->type;
    if ( type == DUNGEON_ENTRY_CONDITION_LEVEL )
    {
      v8 = std::__shared_ptr_access<Player,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Player,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 32));
      BasicComp = Player::getBasicComp(v8);
      Level = PlayerBasicComp::getLevel(BasicComp);
      if ( *(_BYTE *)(((unsigned __int64)&cond->param1 >> 3) + 0x7FFF8000) != 0
        && (char)((((_BYTE)cond + 12) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&cond->param1 >> 3) + 0x7FFF8000) )
      {
        __asan_report_load4(&cond->param1);
      }
      v6 = Level >= cond->param1;
    }
    else if ( type == DUNGEON_ENTRY_CONDITION_QUEST )
    {
      v11 = std::__shared_ptr_access<Player,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Player,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 32));
      QuestComp = Player::getQuestComp(v11);
      if ( *(_BYTE *)(((unsigned __int64)&cond->param1 >> 3) + 0x7FFF8000) != 0
        && (char)((((_BYTE)cond + 12) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&cond->param1 >> 3) + 0x7FFF8000) )
      {
        __asan_report_load4(&cond->param1);
      }
      v6 = PlayerQuestComp::getQuestState(QuestComp, cond->param1) == QUEST_STATE_FINISHED;
    }
    else
    {
      v6 = 0;
    }
  }
  std::shared_ptr<Player>::~shared_ptr((std::shared_ptr<Player> *const)(v3 + 32));
  result = v6;
  if ( v15 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 799: range 000000001597843C-00000000159787D3
int32_t __cdecl Scene::stop(Scene *const this)
{
  __int64 v1; // rsi
  unsigned __int64 v2; // rbx
  __int64 v3; // rax
  unsigned __int64 v4; // r12
  std::__shared_ptr_access<UnixTimer,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v5; // rax
  std::__shared_ptr_access<SceneTimerMgr,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v6; // rax
  UnixTimerMgr *v7; // rax
  Player *v8; // rax
  PlayerEventComp *EventComp; // rax
  int32_t result; // eax
  std::unordered_map<std::type_index,std::weak_ptr<Observer>>::iterator __for_begin; // [rsp+10h] [rbp-C0h] BYREF
  std::unordered_map<std::type_index,std::weak_ptr<Observer>>::iterator __for_end; // [rsp+18h] [rbp-B8h] BYREF
  std::unordered_map<std::type_index,std::weak_ptr<Observer>> *__for_range; // [rsp+20h] [rbp-B0h]
  std::pair<const std::type_index,std::weak_ptr<Observer> > *__in; // [rsp+28h] [rbp-A8h]
  std::tuple_element<0,std::pair<const std::type_index,std::weak_ptr<Observer> > >::type *type; // [rsp+30h] [rbp-A0h]
  std::tuple_element<1,std::pair<const std::type_index,std::weak_ptr<Observer> > >::type *observer_wtr; // [rsp+38h] [rbp-98h]
  common::milog::MiLogStream v17; // [rsp+40h] [rbp-90h] BYREF
  char v18[112]; // [rsp+60h] [rbp-70h] BYREF

  v2 = (unsigned __int64)v18;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_0(64LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "1 32 16 14 player_ptr:822";
  *(_QWORD *)(v2 + 16) = Scene::stop;
  v4 = v2 >> 3;
  *(_DWORD *)(v4 + 2147450880) = -235802127;
  *(_DWORD *)(v4 + 2147450884) = -202178560;
  if ( *(char *)(((unsigned __int64)&this->is_started_ >> 3) + 0x7FFF8000) < 0 )
    __asan_report_store1(&this->is_started_, v1, &this->is_started_);
  this->is_started_ = 0;
  if ( std::operator!=<UnixTimer>(&this->timer_ptr_, 0LL) )
  {
    v5 = std::__shared_ptr_access<UnixTimer,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<UnixTimer,(__gnu_cxx::_Lock_policy)2,false,false> *const)&this->timer_ptr_);
    common::tools::MiTimer::cancel(v5);
  }
  if ( std::operator!=<SceneTimerMgr>(&this->scene_timer_mgr_ptr_, 0LL) )
  {
    v6 = std::__shared_ptr_access<SceneTimerMgr,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<SceneTimerMgr,(__gnu_cxx::_Lock_policy)2,false,false> *const)&this->scene_timer_mgr_ptr_);
    PausableTimerMgr::cancel(v6);
  }
  if ( std::operator!=<UnixTimerMgr>(&this->unix_timer_mgr_ptr_, 0LL) )
  {
    v7 = std::__shared_ptr_access<UnixTimerMgr,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<UnixTimerMgr,(__gnu_cxx::_Lock_policy)2,false,false> *const)&this->unix_timer_mgr_ptr_);
    UnixTimerMgr::cancel(v7);
  }
  if ( !Scene::isHomeScene(this) )
  {
    Scene::getOwnPlayer((const Scene *const)(v2 + 32));
    if ( std::operator==<Player>(0LL, (const std::shared_ptr<Player> *)(v2 + 32)) )
    {
      common::milog::MiLogStream::create(
        &v17,
        &common::milog::MiLogDefault::default_log_obj_,
        1u,
        "./src/scene/scene.cpp",
        "stop",
        825);
      common::milog::MiLogStream::operator<<<char [19],(char *[19])0>(&v17, (const char (*)[19])"player ptr is null");
      common::milog::MiLogStream::~MiLogStream(&v17);
    }
    else
    {
      __for_range = &this->observer_map_;
      __for_begin._M_cur = std::unordered_map<std::type_index,std::weak_ptr<Observer>>::begin(&this->observer_map_)._M_cur;
      __for_end._M_cur = std::unordered_map<std::type_index,std::weak_ptr<Observer>>::end(&this->observer_map_)._M_cur;
      while ( std::__detail::operator!=<std::pair<std::type_index const,std::weak_ptr<Observer>>,false>(
                &__for_begin,
                &__for_end) )
      {
        __in = std::__detail::_Node_iterator<std::pair<std::type_index const,std::weak_ptr<Observer>>,false,false>::operator*(&__for_begin);
        type = std::get<0ul,std::type_index const,std::weak_ptr<Observer>>(__in);
        observer_wtr = std::get<1ul,std::type_index const,std::weak_ptr<Observer>>(__in);
        v8 = std::__shared_ptr_access<Player,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Player,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 32));
        EventComp = Player::getEventComp(v8);
        PlayerEventComp::unregisterObserver(EventComp, observer_wtr);
        std::__detail::_Node_iterator<std::pair<std::type_index const,std::weak_ptr<Observer>>,false,false>::operator++(&__for_begin);
      }
      std::unordered_map<std::type_index,std::weak_ptr<Observer>>::clear(&this->observer_map_);
    }
    std::shared_ptr<Player>::~shared_ptr((std::shared_ptr<Player> *const)(v2 + 32));
  }
  result = 0;
  if ( v18 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 842: range 00000000159787D4-0000000015978B6C
__int64 __fastcall Scene::isPointUnlocked(const Scene *const this, uint32_t point_id)
{
  unsigned int v2; // r14d
  unsigned __int64 v3; // r12
  __int64 v4; // rax
  _DWORD *v5; // r13
  JsonConfigMgr *p_json_config_mgr; // rcx
  std::__detail::_Node_const_iterator<std::pair<unsigned int const,std::shared_ptr<data::ConfigScenePoint> >,false,false>::pointer v7; // rax
  std::__shared_ptr_access<data::ConfigScenePoint,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v8; // rdx
  bool *p_unlocked; // rax
  char v10; // al
  int v11; // r15d
  __int64 result; // rax
  std::__detail::_Node_iterator_base<unsigned int,false> __y; // [rsp+20h] [rbp-C0h] BYREF
  const SceneJsonConfig *scene_json_config_ptr; // [rsp+28h] [rbp-B8h]
  char v15[176]; // [rsp+30h] [rbp-B0h] BYREF

  v3 = (unsigned __int64)v15;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_1(128LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "3 48 4 12 point_id:841 64 8 6 it:850 96 16 20 config_point_ptr:853";
  *(_QWORD *)(v3 + 16) = Scene::isPointUnlocked;
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = -234556943;
  v5[536862722] = -218959360;
  v5[536862723] = -202178560;
  *(_DWORD *)(v3 + 48) = point_id;
  __y._M_cur = std::unordered_set<unsigned int>::end(&this->unlock_info_.locked_point_set)._M_cur;
  *(std::unordered_set<unsigned int>::const_iterator *)(v3 + 64) = std::unordered_set<unsigned int>::find(
                                                                     &this->unlock_info_.locked_point_set,
                                                                     (const std::unordered_set<unsigned int>::key_type *)(v3 + 48));
  if ( std::__detail::operator!=<unsigned int,false>(
         (const std::__detail::_Node_iterator_base<unsigned int,false> *)(v3 + 64),
         &__y) )
  {
    v2 = 0;
  }
  else
  {
    __y._M_cur = std::unordered_set<unsigned int>::end(&this->unlock_info_.unlocked_point_set)._M_cur;
    *(std::unordered_set<unsigned int>::const_iterator *)(v3 + 64) = std::unordered_set<unsigned int>::find(
                                                                       &this->unlock_info_.unlocked_point_set,
                                                                       (const std::unordered_set<unsigned int>::key_type *)(v3 + 48));
    if ( std::__detail::operator!=<unsigned int,false>(
           (const std::__detail::_Node_iterator_base<unsigned int,false> *)(v3 + 64),
           &__y) )
    {
      v2 = 1;
    }
    else
    {
      ServiceBox::findService<GameserverService>();
      GameserverService::getConfig((GameserverService *const)(v3 + 96));
      p_json_config_mgr = &std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 96))->design_config.json_config_mgr;
      if ( *(_BYTE *)(((unsigned __int64)&this->scene_id_ >> 3) + 0x7FFF8000) != 0
        && *(_BYTE *)(((unsigned __int64)&this->scene_id_ >> 3) + 0x7FFF8000) <= 3 )
      {
        __asan_report_load4(&this->scene_id_);
      }
      scene_json_config_ptr = JsonConfigMgr::findSceneJsonConfig(p_json_config_mgr, this->scene_id_);
      std::shared_ptr<Config>::~shared_ptr((std::shared_ptr<Config> *const)(v3 + 96));
      if ( !scene_json_config_ptr )
        goto LABEL_22;
      *(std::unordered_map<unsigned int,std::shared_ptr<data::ConfigScenePoint>>::const_iterator *)(v3 + 64) = std::unordered_map<unsigned int,std::shared_ptr<data::ConfigScenePoint>>::find(&scene_json_config_ptr->point_map, (const std::unordered_map<unsigned int,std::shared_ptr<data::ConfigScenePoint>>::key_type *)(v3 + 48));
      __y._M_cur = (std::__detail::_Node_iterator_base<unsigned int,false>::__node_type *)std::unordered_map<unsigned int,std::shared_ptr<data::ConfigScenePoint>>::end(&scene_json_config_ptr->point_map)._M_cur;
      if ( !std::__detail::operator!=<std::pair<unsigned int const,std::shared_ptr<data::ConfigScenePoint>>,false>(
              (const std::__detail::_Node_iterator_base<std::pair<unsigned int const,std::shared_ptr<data::ConfigScenePoint> >,false> *)(v3 + 64),
              (const std::__detail::_Node_iterator_base<std::pair<unsigned int const,std::shared_ptr<data::ConfigScenePoint> >,false> *)&__y) )
        goto LABEL_22;
      v7 = std::__detail::_Node_const_iterator<std::pair<unsigned int const,std::shared_ptr<data::ConfigScenePoint>>,false,false>::operator->((const std::__detail::_Node_const_iterator<std::pair<unsigned int const,std::shared_ptr<data::ConfigScenePoint> >,false,false> *const)(v3 + 64));
      std::shared_ptr<data::ConfigScenePoint>::shared_ptr(
        (std::shared_ptr<data::ConfigScenePoint> *const)(v3 + 96),
        &v7->second);
      if ( !std::operator!=<data::ConfigScenePoint>((const std::shared_ptr<data::ConfigScenePoint> *)(v3 + 96), 0LL) )
        goto LABEL_17;
      v8 = std::__shared_ptr_access<data::ConfigScenePoint,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<data::ConfigScenePoint,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 96));
      p_unlocked = &v8->unlocked;
      if ( *(_BYTE *)(((unsigned __int64)p_unlocked >> 3) + 0x7FFF8000) != 0
        && ((unsigned __int8)p_unlocked & 7) >= *(_BYTE *)(((unsigned __int64)p_unlocked >> 3) + 0x7FFF8000) )
      {
        __asan_report_load1(p_unlocked);
      }
      if ( v8->unlocked )
        v10 = 1;
      else
LABEL_17:
        v10 = 0;
      if ( v10 )
      {
        v2 = 1;
        v11 = 0;
      }
      else
      {
        v11 = 1;
      }
      std::shared_ptr<data::ConfigScenePoint>::~shared_ptr((std::shared_ptr<data::ConfigScenePoint> *const)(v3 + 96));
      if ( v11 == 1 )
LABEL_22:
        v2 = 0;
    }
  }
  result = v2;
  if ( v15 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 864: range 0000000015978B6E-000000001597902B
__int64 __fastcall Scene::unfreezeGroupLimit(Scene *const this, uint32_t point_id, bool is_notify)
{
  unsigned __int64 v3; // r13
  __int64 v4; // rax
  _DWORD *v5; // r12
  unsigned int v6; // r14d
  uint32_t v7; // esi
  common::milog::MiLogStream *v8; // rax
  std::__shared_ptr_access<proto::UnfreezeGroupLimitNotify,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v9; // rax
  std::__shared_ptr_access<proto::UnfreezeGroupLimitNotify,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v10; // rcx
  Player *v11; // r14
  __int64 result; // rax
  std::shared_ptr<const google::protobuf::Message> v14; // [rsp+10h] [rbp-100h] BYREF
  common::milog::MiLogStream v15; // [rsp+20h] [rbp-F0h] BYREF
  char v16[208]; // [rsp+40h] [rbp-D0h] BYREF

  v3 = (unsigned __int64)v16;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_2(160LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "4 48 4 12 point_id:863 64 16 14 player_ptr:865 96 16 19 scene_point_ptr:872 128 16 14 notify_ptr:887";
  *(_QWORD *)(v3 + 16) = Scene::unfreezeGroupLimit;
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = -234556943;
  v5[536862722] = -219021312;
  v5[536862723] = -219021312;
  v5[536862724] = -202178560;
  *(_DWORD *)(v3 + 48) = point_id;
  Scene::getOwnPlayer((const Scene *const)(v3 + 64));
  if ( std::operator==<Player>(0LL, (const std::shared_ptr<Player> *)(v3 + 64)) )
  {
    common::milog::MiLogStream::create(
      &v15,
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/scene/scene.cpp",
      "unfreezeGroupLimit",
      868);
    common::milog::MiLogStream::operator<<<char [15],(char *[15])0>(&v15, (const char (*)[15])"player is null");
    common::milog::MiLogStream::~MiLogStream(&v15);
    v6 = -1;
  }
  else
  {
    ServiceBox::findService<GameserverService>();
    GameserverService::getConfig((GameserverService *const)&v14);
    v7 = (unsigned int)std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false> *const)&v14)
       + 93080;
    if ( *(_BYTE *)(((unsigned __int64)&this->scene_id_ >> 3) + 0x7FFF8000) != 0
      && *(_BYTE *)(((unsigned __int64)&this->scene_id_ >> 3) + 0x7FFF8000) <= 3 )
    {
      __asan_report_load4(&this->scene_id_);
    }
    JsonConfigMgr::findScenePoint((const JsonConfigMgr *const)(v3 + 96), v7, this->scene_id_);
    std::shared_ptr<Config>::~shared_ptr((std::shared_ptr<Config> *const)&v14);
    if ( std::operator==<data::ConfigScenePoint>(0LL, (const std::shared_ptr<data::ConfigScenePoint> *)(v3 + 96)) )
    {
      common::milog::MiLogStream::create(
        &v15,
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/scene/scene.cpp",
        "unfreezeGroupLimit",
        875);
      v8 = common::milog::MiLogStream::operator<<<char [24],(char *[24])0>(
             &v15,
             (const char (*)[24])"scene point not found: ");
      common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v8, (const unsigned int *)(v3 + 48));
      common::milog::MiLogStream::~MiLogStream(&v15);
      v6 = -1;
    }
    else if ( common::tools::MiscUtils::isContains<std::unordered_set<unsigned int>,unsigned int>(
                &this->unlock_info_.group_unlimit_point_set,
                (const unsigned int *)(v3 + 48)) )
    {
      v6 = 0;
    }
    else
    {
      std::unordered_set<unsigned int>::insert(
        &this->unlock_info_.group_unlimit_point_set,
        (const std::unordered_set<unsigned int>::value_type *)(v3 + 48));
      if ( is_notify )
      {
        common::tools::perf::make_shared<proto::UnfreezeGroupLimitNotify>();
        v9 = std::__shared_ptr_access<proto::UnfreezeGroupLimitNotify,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<proto::UnfreezeGroupLimitNotify,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 128));
        proto::UnfreezeGroupLimitNotify::set_point_id(v9, *(_DWORD *)(v3 + 48));
        v10 = std::__shared_ptr_access<proto::UnfreezeGroupLimitNotify,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<proto::UnfreezeGroupLimitNotify,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 128));
        if ( *(_BYTE *)(((unsigned __int64)&this->scene_id_ >> 3) + 0x7FFF8000) != 0
          && *(_BYTE *)(((unsigned __int64)&this->scene_id_ >> 3) + 0x7FFF8000) <= 3 )
        {
          __asan_report_load4(&this->scene_id_);
        }
        proto::UnfreezeGroupLimitNotify::set_scene_id(v10, this->scene_id_);
        v11 = std::__shared_ptr_access<Player,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Player,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 64));
        std::dynamic_pointer_cast<google::protobuf::Message const,proto::UnfreezeGroupLimitNotify>((const std::shared_ptr<proto::UnfreezeGroupLimitNotify> *)&v14);
        Player::sendMessage(v11, &v14, 0LL);
        std::shared_ptr<google::protobuf::Message const>::~shared_ptr(&v14);
        std::shared_ptr<proto::UnfreezeGroupLimitNotify>::~shared_ptr((std::shared_ptr<proto::UnfreezeGroupLimitNotify> *const)(v3 + 128));
      }
      v6 = 0;
    }
    std::shared_ptr<data::ConfigScenePoint>::~shared_ptr((std::shared_ptr<data::ConfigScenePoint> *const)(v3 + 96));
  }
  std::shared_ptr<Player>::~shared_ptr((std::shared_ptr<Player> *const)(v3 + 64));
  result = v6;
  if ( v16 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8010) = 0;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8010) = -168430091;
  }
  return result;
};

// Line 896: range 000000001597902C-000000001597913F
_BOOL8 __fastcall Scene::isDungeonEntryCanBeUnlocked(const Scene *const this, uint32_t point_id)
{
  unsigned __int64 v2; // rbx
  __int64 v3; // rax
  unsigned __int64 v4; // r12
  _BOOL8 result; // rax
  std::__detail::_Node_iterator_base<unsigned int,false> __x; // [rsp+10h] [rbp-70h] BYREF
  std::__detail::_Node_iterator_base<unsigned int,false> __y; // [rsp+18h] [rbp-68h] BYREF
  char v8[96]; // [rsp+20h] [rbp-60h] BYREF

  v2 = (unsigned __int64)v8;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_0(64LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "1 32 4 12 point_id:895";
  *(_QWORD *)(v2 + 16) = Scene::isDungeonEntryCanBeUnlocked;
  v4 = v2 >> 3;
  *(_DWORD *)(v4 + 2147450880) = -235802127;
  *(_DWORD *)(v4 + 2147450884) = -202116348;
  *(_DWORD *)(v2 + 32) = point_id;
  __y._M_cur = std::unordered_set<unsigned int>::end(&this->unlock_info_.not_explored_set)._M_cur;
  __x._M_cur = std::unordered_set<unsigned int>::find(
                 &this->unlock_info_.not_explored_set,
                 (const std::unordered_set<unsigned int>::key_type *)(v2 + 32))._M_cur;
  result = !std::__detail::operator!=<unsigned int,false>(&__x, &__y);
  if ( v8 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 904: range 0000000015979140-0000000015979688
__int64 __fastcall Scene::unlockPoint(Scene *const this, uint32_t point_id, bool is_force)
{
  unsigned __int64 v3; // r12
  __int64 v4; // rax
  _DWORD *v5; // r13
  common::milog::MiLogStream *v6; // rax
  unsigned int v7; // r14d
  std::pair<std::__detail::_Node_iterator<unsigned int,true,false>,bool> v8; // rax
  common::milog::MiLogStream *v9; // rax
  common::milog::MiLogStream *v10; // rax
  common::milog::MiLogStream *v11; // rax
  uint32_t v12; // esi
  std::__shared_ptr_access<data::SceneTransPoint,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v13; // rax
  __int64 result; // rax
  std::__detail::_Node_iterator_base<unsigned int,false> __x; // [rsp+10h] [rbp-D0h] BYREF
  std::__detail::_Node_iterator_base<unsigned int,false> __y; // [rsp+18h] [rbp-C8h] BYREF
  std::shared_ptr<Config> v18; // [rsp+20h] [rbp-C0h] BYREF
  common::milog::MiLogStream v19; // [rsp+30h] [rbp-B0h] BYREF
  char v20[144]; // [rsp+50h] [rbp-90h] BYREF

  v3 = (unsigned __int64)v20;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_1(96LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "2 48 4 12 point_id:903 64 16 19 trans_point_ptr:933";
  *(_QWORD *)(v3 + 16) = Scene::unlockPoint;
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = -234556943;
  v5[536862722] = -202178560;
  *(_DWORD *)(v3 + 48) = point_id;
  if ( !is_force )
  {
    __y._M_cur = std::unordered_set<unsigned int>::end(&this->unlock_info_.not_explored_set)._M_cur;
    __x._M_cur = std::unordered_set<unsigned int>::find(
                   &this->unlock_info_.not_explored_set,
                   (const std::unordered_set<unsigned int>::key_type *)(v3 + 48))._M_cur;
    if ( std::__detail::operator!=<unsigned int,false>(&__x, &__y) )
    {
      common::milog::MiLogStream::create(
        &v19,
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/scene/scene.cpp",
        "unlockPoint",
        909);
      v6 = common::milog::MiLogStream::operator<<<char [40],(char *[40])0>(&v19, (const char (*)[40])off_258DA0C0);
      common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v6, (const unsigned int *)(v3 + 48));
      common::milog::MiLogStream::~MiLogStream(&v19);
      v7 = -1;
      goto LABEL_20;
    }
  }
  else
  {
    __y._M_cur = std::unordered_set<unsigned int>::end(&this->unlock_info_.not_explored_set)._M_cur;
    __x._M_cur = std::unordered_set<unsigned int>::find(
                   &this->unlock_info_.not_explored_set,
                   (const std::unordered_set<unsigned int>::key_type *)(v3 + 48))._M_cur;
    if ( std::__detail::operator!=<unsigned int,false>(&__x, &__y) )
      std::unordered_set<unsigned int>::erase(
        &this->unlock_info_.not_explored_set,
        (const std::unordered_set<unsigned int>::key_type *)(v3 + 48));
  }
  __y._M_cur = std::unordered_set<unsigned int>::end(&this->unlock_info_.to_be_explored_set)._M_cur;
  __x._M_cur = std::unordered_set<unsigned int>::find(
                 &this->unlock_info_.to_be_explored_set,
                 (const std::unordered_set<unsigned int>::key_type *)(v3 + 48))._M_cur;
  if ( std::__detail::operator!=<unsigned int,false>(&__x, &__y) )
    std::unordered_set<unsigned int>::erase(
      &this->unlock_info_.to_be_explored_set,
      (const std::unordered_set<unsigned int>::key_type *)(v3 + 48));
  std::unordered_set<unsigned int>::erase(
    &this->unlock_info_.locked_point_set,
    (const std::unordered_set<unsigned int>::key_type *)(v3 + 48));
  v8 = std::unordered_set<unsigned int>::insert(
         &this->unlock_info_.unlocked_point_set,
         (const std::unordered_set<unsigned int>::value_type *)(v3 + 48));
  if ( !v8.second )
  {
    common::milog::MiLogStream::create(
      &v19,
      &common::milog::MiLogDefault::default_log_obj_,
      1u,
      "./src/scene/scene.cpp",
      "unlockPoint",
      929);
    v9 = common::milog::MiLogStream::operator<<<char [37],(char *[37])0>(
           &v19,
           (const char (*)[37])"point is already unlocked, point_id:");
    v10 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v9, (const unsigned int *)(v3 + 48));
    v11 = common::milog::MiLogStream::operator<<<char [12],(char *[12])0>(v10, (const char (*)[12])", scene_id:");
    common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v11, &this->scene_id_);
    common::milog::MiLogStream::~MiLogStream(&v19);
    v7 = 0;
  }
  else
  {
    ServiceBox::findService<GameserverService>();
    GameserverService::getConfig((GameserverService *const)&v18);
    v12 = (unsigned int)std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false> *const)&v18)
        + 93080;
    if ( *(_BYTE *)(((unsigned __int64)&this->scene_id_ >> 3) + 0x7FFF8000) != 0
      && *(_BYTE *)(((unsigned __int64)&this->scene_id_ >> 3) + 0x7FFF8000) <= 3 )
    {
      __asan_report_load4(&this->scene_id_);
    }
    JsonConfigMgr::findScenePoint<data::SceneTransPoint>((const JsonConfigMgr *const)(v3 + 64), v12, this->scene_id_);
    std::shared_ptr<Config>::~shared_ptr(&v18);
    if ( std::operator!=<data::SceneTransPoint>(0LL, (const std::shared_ptr<data::SceneTransPoint> *)(v3 + 64)) )
    {
      v13 = std::__shared_ptr_access<data::SceneTransPoint,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<data::SceneTransPoint,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 64));
      if ( *(_BYTE *)(((unsigned __int64)&v13->area_id >> 3) + 0x7FFF8000) != 0
        && *(_BYTE *)(((unsigned __int64)&v13->area_id >> 3) + 0x7FFF8000) <= 1 )
      {
        v13 = (std::__shared_ptr_access<data::SceneTransPoint,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *)__asan_report_load2(&v13->area_id);
      }
      Scene::onTransferPointUnlocked(this, *(_DWORD *)(v3 + 48), v13->area_id);
    }
    v7 = 0;
    std::shared_ptr<data::SceneTransPoint>::~shared_ptr((std::shared_ptr<data::SceneTransPoint> *const)(v3 + 64));
  }
LABEL_20:
  result = v7;
  if ( v20 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8008) = 0;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8008) = -168430091;
  }
  return result;
};

// Line 943: range 000000001597968A-00000000159796FF
int32_t __cdecl Scene::forceUnlockPoint(Scene *const this, uint32_t point_id)
{
  unsigned __int64 v2; // rax

  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_load8();
  v2 = (unsigned __int64)(this->_vptr_DescribalBase + 18);
  if ( *(_BYTE *)((v2 >> 3) + 0x7FFF8000) )
    v2 = __asan_report_load8();
  return (*(__int64 (__fastcall **)(Scene *const, _QWORD, __int64))v2)(this, point_id, 1LL);
};

// Line 949: range 0000000015979700-0000000015979B2D
__int64 __fastcall Scene::lockPoint(Scene *const this, uint32_t point_id)
{
  unsigned __int64 v2; // r12
  __int64 v3; // rax
  _DWORD *v4; // r13
  uint32_t v5; // esi
  common::milog::MiLogStream *v6; // rax
  common::milog::MiLogStream *v7; // rax
  common::milog::MiLogStream *v8; // rax
  unsigned int v9; // r14d
  std::pair<std::__detail::_Node_iterator<unsigned int,true,false>,bool> v10; // rax
  common::milog::MiLogStream *v11; // rax
  common::milog::MiLogStream *v12; // rax
  common::milog::MiLogStream *v13; // rax
  common::milog::MiLogStream *v14; // rax
  common::milog::MiLogStream *v15; // rax
  common::milog::MiLogStream *v16; // rax
  __int64 result; // rax
  std::shared_ptr<Config> v18; // [rsp+10h] [rbp-C0h] BYREF
  common::milog::MiLogStream v19; // [rsp+20h] [rbp-B0h] BYREF
  char v20[144]; // [rsp+40h] [rbp-90h] BYREF

  v2 = (unsigned __int64)v20;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_1(96LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "2 48 4 12 point_id:948 64 16 20 config_point_ptr:951";
  *(_QWORD *)(v2 + 16) = Scene::lockPoint;
  v4 = (_DWORD *)(v2 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = -234556943;
  v4[536862722] = -202178560;
  *(_DWORD *)(v2 + 48) = point_id;
  ServiceBox::findService<GameserverService>();
  GameserverService::getConfig((GameserverService *const)&v18);
  v5 = (unsigned int)std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false> *const)&v18)
     + 93080;
  if ( *(_BYTE *)(((unsigned __int64)&this->scene_id_ >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->scene_id_ >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4(&this->scene_id_);
  }
  JsonConfigMgr::findScenePoint((const JsonConfigMgr *const)(v2 + 64), v5, this->scene_id_);
  std::shared_ptr<Config>::~shared_ptr(&v18);
  if ( std::operator==<data::ConfigScenePoint>(0LL, (const std::shared_ptr<data::ConfigScenePoint> *)(v2 + 64)) )
  {
    common::milog::MiLogStream::create(
      &v19,
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/scene/scene.cpp",
      "lockPoint",
      954);
    v6 = common::milog::MiLogStream::operator<<<char [32],(char *[32])0>(
           &v19,
           (const char (*)[32])"findScenePoint fails, scene_id:");
    v7 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v6, &this->scene_id_);
    v8 = common::milog::MiLogStream::operator<<<char [12],(char *[12])0>(v7, (const char (*)[12])", point_id:");
    common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v8, (const unsigned int *)(v2 + 48));
    common::milog::MiLogStream::~MiLogStream(&v19);
    v9 = -1;
  }
  else
  {
    std::unordered_set<unsigned int>::erase(
      &this->unlock_info_.unlocked_point_set,
      (const std::unordered_set<unsigned int>::key_type *)(v2 + 48));
    v10 = std::unordered_set<unsigned int>::insert(
            &this->unlock_info_.locked_point_set,
            (const std::unordered_set<unsigned int>::value_type *)(v2 + 48));
    if ( !v10.second )
    {
      common::milog::MiLogStream::create(
        &v19,
        &common::milog::MiLogDefault::default_log_obj_,
        1u,
        "./src/scene/scene.cpp",
        "lockPoint",
        960);
      v11 = common::milog::MiLogStream::operator<<<char [35],(char *[35])0>(
              &v19,
              (const char (*)[35])"point is already locked. point_id:");
      v12 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v11, (const unsigned int *)(v2 + 48));
      v13 = common::milog::MiLogStream::operator<<<char [12],(char *[12])0>(v12, (const char (*)[12])", scene_id:");
      common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v13, &this->scene_id_);
      common::milog::MiLogStream::~MiLogStream(&v19);
    }
    common::milog::MiLogStream::create(
      &v19,
      &common::milog::MiLogDefault::default_log_obj_,
      1u,
      "./src/scene/scene.cpp",
      "lockPoint",
      962);
    v14 = common::milog::MiLogStream::operator<<<char [24],(char *[24])0>(
            &v19,
            (const char (*)[24])"locked point. scene_id:");
    v15 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v14, &this->scene_id_);
    v16 = common::milog::MiLogStream::operator<<<char [11],(char *[11])0>(v15, (const char (*)[11])" point_id:");
    common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v16, (const unsigned int *)(v2 + 48));
    common::milog::MiLogStream::~MiLogStream(&v19);
    v9 = 0;
  }
  std::shared_ptr<data::ConfigScenePoint>::~shared_ptr((std::shared_ptr<data::ConfigScenePoint> *const)(v2 + 64));
  result = v9;
  if ( v20 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8008) = 0;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8008) = -168430091;
  }
  return result;
};

// Line 967: range 0000000015979B2E-0000000015979CDF
void __fastcall Scene::hidePoint(Scene *const this, uint32_t point_id)
{
  unsigned __int64 v2; // rbx
  __int64 v3; // rax
  unsigned __int64 v4; // r12
  std::pair<std::__detail::_Node_iterator<unsigned int,true,false>,bool> v5; // rax
  common::milog::MiLogStream *v6; // rax
  common::milog::MiLogStream *v7; // rax
  common::milog::MiLogStream *v8; // rax
  common::milog::MiLogStream v9; // [rsp+10h] [rbp-80h] BYREF
  char v10[96]; // [rsp+30h] [rbp-60h] BYREF

  v2 = (unsigned __int64)v10;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_0(64LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "1 32 4 12 point_id:966";
  *(_QWORD *)(v2 + 16) = Scene::hidePoint;
  v4 = v2 >> 3;
  *(_DWORD *)(v4 + 2147450880) = -235802127;
  *(_DWORD *)(v4 + 2147450884) = -202116348;
  *(_DWORD *)(v2 + 32) = point_id;
  std::unordered_set<unsigned int>::erase(
    &this->unlock_info_.unhide_point_set,
    (const std::unordered_set<unsigned int>::key_type *)(v2 + 32));
  v5 = std::unordered_set<unsigned int>::insert(
         &this->unlock_info_.hide_point_set,
         (const std::unordered_set<unsigned int>::value_type *)(v2 + 32));
  if ( !v5.second )
  {
    common::milog::MiLogStream::create(
      &v9,
      &common::milog::MiLogDefault::default_log_obj_,
      1u,
      "./src/scene/scene.cpp",
      "hidePoint",
      971);
    v6 = common::milog::MiLogStream::operator<<<char [34],(char *[34])0>(
           &v9,
           (const char (*)[34])"point is already hided. point_id:");
    v7 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v6, (const unsigned int *)(v2 + 32));
    v8 = common::milog::MiLogStream::operator<<<char [12],(char *[12])0>(v7, (const char (*)[12])", scene_id:");
    common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v8, &this->scene_id_);
    common::milog::MiLogStream::~MiLogStream(&v9);
  }
  if ( v10 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
  }
};

// Line 976: range 0000000015979CE0-0000000015979E91
void __fastcall Scene::unhidePoint(Scene *const this, uint32_t point_id)
{
  unsigned __int64 v2; // rbx
  __int64 v3; // rax
  unsigned __int64 v4; // r12
  std::pair<std::__detail::_Node_iterator<unsigned int,true,false>,bool> v5; // rax
  common::milog::MiLogStream *v6; // rax
  common::milog::MiLogStream *v7; // rax
  common::milog::MiLogStream *v8; // rax
  common::milog::MiLogStream v9; // [rsp+10h] [rbp-80h] BYREF
  char v10[96]; // [rsp+30h] [rbp-60h] BYREF

  v2 = (unsigned __int64)v10;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_0(64LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "1 32 4 12 point_id:975";
  *(_QWORD *)(v2 + 16) = Scene::unhidePoint;
  v4 = v2 >> 3;
  *(_DWORD *)(v4 + 2147450880) = -235802127;
  *(_DWORD *)(v4 + 2147450884) = -202116348;
  *(_DWORD *)(v2 + 32) = point_id;
  std::unordered_set<unsigned int>::erase(
    &this->unlock_info_.hide_point_set,
    (const std::unordered_set<unsigned int>::key_type *)(v2 + 32));
  v5 = std::unordered_set<unsigned int>::insert(
         &this->unlock_info_.unhide_point_set,
         (const std::unordered_set<unsigned int>::value_type *)(v2 + 32));
  if ( !v5.second )
  {
    common::milog::MiLogStream::create(
      &v9,
      &common::milog::MiLogDefault::default_log_obj_,
      1u,
      "./src/scene/scene.cpp",
      "unhidePoint",
      980);
    v6 = common::milog::MiLogStream::operator<<<char [34],(char *[34])0>(
           &v9,
           (const char (*)[34])"point is already hided. point_id:");
    v7 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v6, (const unsigned int *)(v2 + 32));
    v8 = common::milog::MiLogStream::operator<<<char [12],(char *[12])0>(v7, (const char (*)[12])", scene_id:");
    common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v8, &this->scene_id_);
    common::milog::MiLogStream::~MiLogStream(&v9);
  }
  if ( v10 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
  }
};

// Line 986: range 0000000015979E92-0000000015979EB6
int32_t __cdecl Scene::revertUnlockAllPoint(Scene *const this)
{
  std::unordered_set<unsigned int>::clear(&this->unlock_info_.unlocked_point_set);
  return 0;
};

// Line 993: range 0000000015979EB8-0000000015979ECB
std::unordered_set<unsigned int> *__cdecl Scene::getAllUnlockPoint(Scene *const this)
{
  return &this->unlock_info_.unlocked_point_set;
};

// Line 999: range 0000000015979ECC-0000000015979EDF
std::unordered_set<unsigned int> *__cdecl Scene::getAllLockedPoint(Scene *const this)
{
  return &this->unlock_info_.locked_point_set;
};

// Line 1004: range 0000000015979EE0-0000000015979FCF
std::pair<Vector3,Vector3> *__cdecl Scene::getBornPoint(std::pair<Vector3,Vector3> *retstr, Scene *const this)
{
  common::milog::MiLogStream *v2; // rbx
  unsigned int val; // [rsp+14h] [rbp-3Ch] BYREF
  const SceneScriptConfig *config_ptr; // [rsp+18h] [rbp-38h]
  common::milog::MiLogStream v6; // [rsp+20h] [rbp-30h] BYREF

  config_ptr = Scene::getScriptConfig(this);
  if ( config_ptr )
  {
    std::make_pair<Vector3 const&,Vector3 const&>(retstr, &config_ptr->born_pos, &config_ptr->born_rot);
  }
  else
  {
    common::milog::MiLogStream::create(
      &v6,
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/scene/scene.cpp",
      "getBornPoint",
      1008);
    v2 = common::milog::MiLogStream::operator<<<char [34],(char *[34])0>(&v6, (const char (*)[34])off_258DA500);
    val = Scene::getSceneId(this);
    common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v2, &val);
    common::milog::MiLogStream::~MiLogStream(&v6);
    std::pair<Vector3,Vector3>::pair<Vector3,Vector3,true>(retstr);
  }
  return retstr;
};

// Line 1015: range 0000000015979FD0-0000000015979FFC
int32_t __cdecl Scene::unlockArea(Scene *const this, uint32_t area_id)
{
  SceneAreaComp *AreaComp; // rax

  AreaComp = Scene::getAreaComp(this);
  return SceneAreaComp::unlockArea(AreaComp, area_id);
};

// Line 1021: range 0000000015979FFE-000000001597A02B
void __cdecl Scene::lockAreaByGm(Scene *const this, uint32_t area_id)
{
  SceneAreaComp *AreaComp; // rax

  AreaComp = Scene::getAreaComp(this);
  SceneAreaComp::lockAreaByGm(AreaComp, area_id);
};

// Line 1026: range 000000001597A02C-000000001597A04D
std::unordered_set<unsigned int> *__cdecl Scene::getAllUnlockArea(Scene *const this)
{
  SceneAreaComp *AreaComp; // rax

  AreaComp = Scene::getAreaComp(this);
  return SceneAreaComp::getAllUnlockArea(AreaComp);
};

// Line 1032: range 000000001597A04E-000000001597A07A
bool __cdecl Scene::isAreaUnlocked(Scene *const this, uint32_t area_id)
{
  SceneAreaComp *AreaComp; // rax

  AreaComp = Scene::getAreaComp(this);
  return SceneAreaComp::isAreaUnlocked(AreaComp, area_id);
};

// Line 1037: range 000000001597A07C-000000001597A2DD
__int64 __fastcall Scene::lockForce(Scene *const this, uint32_t force_id, bool is_notify)
{
  unsigned __int64 v3; // rbx
  __int64 v4; // rax
  _DWORD *v5; // r13
  common::milog::MiLogStream *v6; // rax
  common::milog::MiLogStream *v7; // rax
  common::milog::MiLogStream *v8; // rax
  __int64 result; // rax
  common::milog::MiLogStream v11; // [rsp+10h] [rbp-C0h] BYREF
  char v12[160]; // [rsp+30h] [rbp-A0h] BYREF

  v3 = (unsigned __int64)v12;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_1(128LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "2 32 4 13 force_id:1036 48 40 16 lock_notify:1045";
  *(_QWORD *)(v3 + 16) = Scene::lockForce;
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = 61956;
  v5[536862722] = -218103808;
  v5[536862723] = -202116109;
  *(_DWORD *)(v3 + 32) = force_id;
  if ( std::unordered_set<unsigned int>::erase(
         &this->unlock_info_.unlocked_force_set,
         (const std::unordered_set<unsigned int>::key_type *)(v3 + 32)) )
  {
    if ( is_notify )
    {
      proto::SceneForceLockNotify::SceneForceLockNotify((proto::SceneForceLockNotify *const)(v3 + 48));
      proto::SceneForceLockNotify::add_force_id_list(
        (proto::SceneForceLockNotify *const)(v3 + 48),
        *(_DWORD *)(v3 + 32));
      Scene::notifyAllPlayer<proto::SceneForceLockNotify>(this, (proto::SceneForceLockNotify *)(v3 + 48), 0);
      proto::SceneForceLockNotify::~SceneForceLockNotify((proto::SceneForceLockNotify *const)(v3 + 48));
    }
    result = 0LL;
  }
  else
  {
    common::milog::MiLogStream::create(
      &v11,
      &common::milog::MiLogDefault::default_log_obj_,
      1u,
      "./src/scene/scene.cpp",
      "lockForce",
      1040);
    v6 = common::milog::MiLogStream::operator<<<char [33],(char *[33])0>(
           &v11,
           (const char (*)[33])"force is not unlocked, force_id:");
    v7 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v6, (const unsigned int *)(v3 + 32));
    v8 = common::milog::MiLogStream::operator<<<char [12],(char *[12])0>(v7, (const char (*)[12])", scene_id:");
    common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v8, &this->scene_id_);
    common::milog::MiLogStream::~MiLogStream(&v11);
    result = 0xFFFFFFFFLL;
  }
  if ( v12 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 1053: range 000000001597A2DE-000000001597A545
__int64 __fastcall Scene::unlockForce(Scene *const this, int force_id, bool is_notify)
{
  unsigned __int64 v3; // rbx
  __int64 v4; // rax
  _DWORD *v5; // r13
  std::pair<std::__detail::_Node_iterator<unsigned int,true,false>,bool> v6; // rax
  common::milog::MiLogStream *v7; // rax
  common::milog::MiLogStream *v8; // rax
  common::milog::MiLogStream *v9; // rax
  __int64 result; // rax
  common::milog::MiLogStream v12; // [rsp+10h] [rbp-C0h] BYREF
  char v13[160]; // [rsp+30h] [rbp-A0h] BYREF

  v3 = (unsigned __int64)v13;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_1(128LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "2 32 4 13 force_id:1052 48 48 18 unlock_notify:1061";
  *(_QWORD *)(v3 + 16) = Scene::unlockForce;
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = 61956;
  v5[536862723] = -202116109;
  *(_DWORD *)(v3 + 32) = force_id;
  v6 = std::unordered_set<unsigned int>::insert(
         &this->unlock_info_.unlocked_force_set,
         (const std::unordered_set<unsigned int>::value_type *)(v3 + 32));
  if ( !v6.second )
  {
    common::milog::MiLogStream::create(
      &v12,
      &common::milog::MiLogDefault::default_log_obj_,
      1u,
      "./src/scene/scene.cpp",
      "unlockForce",
      1056);
    v7 = common::milog::MiLogStream::operator<<<char [36],(char *[36])0>(
           &v12,
           (const char (*)[36])"force is already unlocked, area_id:");
    v8 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v7, (const unsigned int *)(v3 + 32));
    v9 = common::milog::MiLogStream::operator<<<char [12],(char *[12])0>(v8, (const char (*)[12])", scene_id:");
    common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v9, &this->scene_id_);
    common::milog::MiLogStream::~MiLogStream(&v12);
    result = 0xFFFFFFFFLL;
  }
  else
  {
    if ( is_notify )
    {
      proto::SceneForceUnlockNotify::SceneForceUnlockNotify((proto::SceneForceUnlockNotify *const)(v3 + 48));
      proto::SceneForceUnlockNotify::add_force_id_list(
        (proto::SceneForceUnlockNotify *const)(v3 + 48),
        *(_DWORD *)(v3 + 32));
      proto::SceneForceUnlockNotify::set_is_add((proto::SceneForceUnlockNotify *const)(v3 + 48), 1);
      Scene::notifyAllPlayer<proto::SceneForceUnlockNotify>(this, (proto::SceneForceUnlockNotify *)(v3 + 48), 0);
      proto::SceneForceUnlockNotify::~SceneForceUnlockNotify((proto::SceneForceUnlockNotify *const)(v3 + 48));
    }
    result = 0LL;
  }
  if ( v13 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF800C) = 0;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 1071: range 000000001597A546-000000001597A779
int32_t __cdecl Scene::notifyAllUnlockedForce(Scene *const this, Player *player)
{
  unsigned __int64 v2; // rbx
  __int64 v3; // rax
  unsigned __int64 v4; // r12
  unsigned int *v5; // rax
  uint32_t *v6; // rdx
  std::__shared_ptr_access<proto::SceneForceUnlockNotify,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v7; // rax
  int32_t v8; // r14d
  int32_t result; // eax
  uint32_t force_id; // [rsp+14h] [rbp-9Ch]
  std::unordered_set<unsigned int>::iterator __for_begin; // [rsp+18h] [rbp-98h] BYREF
  std::unordered_set<unsigned int>::iterator __for_end; // [rsp+20h] [rbp-90h] BYREF
  std::unordered_set<unsigned int> *__for_range; // [rsp+28h] [rbp-88h]
  std::shared_ptr<proto::SceneForceUnlockNotify> __r; // [rsp+30h] [rbp-80h] BYREF
  char v15[112]; // [rsp+40h] [rbp-70h] BYREF

  v2 = (unsigned __int64)v15;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_0(64LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "1 32 16 22 unlock_notify_ptr:1072";
  *(_QWORD *)(v2 + 16) = Scene::notifyAllUnlockedForce;
  v4 = v2 >> 3;
  *(_DWORD *)(v4 + 2147450880) = -235802127;
  *(_DWORD *)(v4 + 2147450884) = -202178560;
  common::tools::perf::make_shared<proto::SceneForceUnlockNotify>();
  __for_range = &this->unlock_info_.unlocked_force_set;
  __for_begin._M_cur = std::unordered_set<unsigned int>::begin(&this->unlock_info_.unlocked_force_set)._M_cur;
  __for_end._M_cur = std::unordered_set<unsigned int>::end(&this->unlock_info_.unlocked_force_set)._M_cur;
  while ( std::__detail::operator!=<unsigned int,false>(&__for_begin, &__for_end) )
  {
    v5 = (unsigned int *)std::__detail::_Node_iterator<unsigned int,true,false>::operator*(&__for_begin);
    v6 = v5;
    if ( *(_BYTE *)(((unsigned __int64)v5 >> 3) + 0x7FFF8000) != 0
      && (char)(((unsigned __int8)v5 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)v5 >> 3) + 0x7FFF8000) )
    {
      __asan_report_load4(v5);
    }
    force_id = *v6;
    v7 = std::__shared_ptr_access<proto::SceneForceUnlockNotify,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<proto::SceneForceUnlockNotify,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 32));
    proto::SceneForceUnlockNotify::add_force_id_list(v7, force_id);
    std::__detail::_Node_iterator<unsigned int,true,false>::operator++(&__for_begin);
  }
  std::dynamic_pointer_cast<google::protobuf::Message const,proto::SceneForceUnlockNotify>(&__r);
  v8 = Player::sendMessage(player, (common::minet::ConstMessagePtr *)&__r, 0LL);
  std::shared_ptr<google::protobuf::Message const>::~shared_ptr((std::shared_ptr<const google::protobuf::Message> *const)&__r);
  std::shared_ptr<proto::SceneForceUnlockNotify>::~shared_ptr((std::shared_ptr<proto::SceneForceUnlockNotify> *const)(v2 + 32));
  result = v8;
  if ( v15 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 1079: range 000000001597A77A-000000001597A7D5
// local variable allocation has failed, the output may be wrong!
AreaPtr __cdecl Scene::findArea(Scene *const this, uint32_t area_id)
{
  uint32_t AreaComp; // ecx
  AreaPtr result; // rax

  AreaComp = (unsigned int)Scene::getAreaComp(*(Scene *const *)&area_id);
  if ( *(_WORD *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store16(this, *(_QWORD *)&area_id);
  result = SceneAreaComp::findArea((SceneAreaComp *const)this, AreaComp);
  result._M_ptr = (std::__shared_ptr<Area,(__gnu_cxx::_Lock_policy)2>::element_type *)this;
  return result;
};

// Line 1084: range 000000001597A7D6-000000001597A831
// local variable allocation has failed, the output may be wrong!
AreaPtr __cdecl Scene::getArea(Scene *const this, uint32_t area_id)
{
  uint32_t AreaComp; // ecx
  AreaPtr result; // rax

  AreaComp = (unsigned int)Scene::getAreaComp(*(Scene *const *)&area_id);
  if ( *(_WORD *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store16(this, *(_QWORD *)&area_id);
  result = SceneAreaComp::getArea((SceneAreaComp *const)this, AreaComp);
  result._M_ptr = (std::__shared_ptr<Area,(__gnu_cxx::_Lock_policy)2>::element_type *)this;
  return result;
};

// Line 1089: range 000000001597A832-000000001597B612
__int64 __fastcall Scene::onTransferPointUnlocked(Scene *const this, uint32_t point_id, uint32_t area_id)
{
  unsigned int v3; // r15d
  unsigned __int64 v4; // r13
  __int64 v5; // rax
  _DWORD *v6; // r12
  common::milog::MiLogStream *v7; // rax
  uint32_t AreaComp; // eax
  Area *v9; // rax
  common::milog::MiLogStream *v11; // rax
  common::milog::MiLogStream *v12; // rax
  common::milog::MiLogStream *v13; // rax
  std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v14; // rax
  unsigned int *v15; // r9
  Player *v16; // rax
  PlayerEventComp *EventComp; // r14
  const WorldAreaExcelConfigMgr *p_world_area_config_mgr; // rdi
  uint32_t v19; // edx
  Player *v20; // rax
  PlayerItemComp *ItemComp; // rdi
  __int64 v22; // rsi
  std::__shared_ptr_access<Player,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v23; // rax
  uint32_t Uid; // r14d
  std::__shared_ptr_access<Event,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v25; // rdx
  char v26; // cl
  uint32_t scene_id; // r14d
  std::__shared_ptr_access<Event,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v28; // rdx
  char v29; // cl
  unsigned int v30; // r14d
  __int64 v31; // rax
  char v32; // dl
  bool v33; // dl
  std::__shared_ptr_access<Event,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v34; // rax
  unsigned int *v35; // rax
  unsigned int *v36; // rdx
  common::milog::MiLogStream *v37; // rax
  Group *v38; // rax
  Player *v39; // rax
  PlayerSceneComp *SceneComp; // rdi
  std::vector<unsigned int> *p_unlock_area_id_vec; // rsi
  common::milog::MiLogStream *v42; // r14
  std::__shared_ptr_access<Player,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v43; // rax
  common::milog::MiLogStream *v44; // rax
  common::milog::MiLogStream *v45; // rax
  int v46; // r14d
  const DungeonEntryExcelConfigMgr *p_dungeon_entry_config_mgr; // rdi
  uint32_t v48; // edx
  common::milog::MiLogStream *v49; // rax
  Player *v50; // rax
  PlayerItemComp *p_reward_data_id; // rdi
  __int64 result; // rax
  unsigned int *v53; // [rsp+0h] [rbp-1E0h]
  unsigned int *v54; // [rsp+8h] [rbp-1D8h]
  std::vector<unsigned int>::const_iterator __for_begin; // [rsp+28h] [rbp-1B8h] BYREF
  std::vector<unsigned int>::const_iterator __for_end; // [rsp+30h] [rbp-1B0h] BYREF
  const data::TransPointRewardConfig *reward_config_ptr; // [rsp+38h] [rbp-1A8h]
  const data::DungeonEntryExcelConfig *dungeon_entry_config_ptr; // [rsp+40h] [rbp-1A0h]
  const std::vector<unsigned int> *__for_range; // [rsp+48h] [rbp-198h]
  common::milog::MiLogStream v62; // [rsp+50h] [rbp-190h] BYREF
  unsigned int v63[92]; // [rsp+70h] [rbp-170h] BYREF

  v4 = (unsigned __int64)v63;
  v54 = v63;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v5 = __asan_stack_malloc_3(320LL);
    if ( v5 )
      v4 = v5;
  }
  *(_QWORD *)v4 = 1102416563LL;
  *(_QWORD *)(v4 + 8) = "10 32 4 12 city_id:1102 48 4 13 group_id:1127 64 4 13 point_id:1088 80 4 12 area_id:1088 96 16 1"
                        "5 player_ptr:1090 128 16 13 area_ptr:1097 160 16 14 event_ptr:1104 192 16 12 evt_ptr:1120 224 16"
                        " 14 group_ptr:1129 256 24 18 action_reason:1155";
  *(_QWORD *)(v4 + 16) = Scene::onTransferPointUnlocked;
  v6 = (_DWORD *)(v4 >> 3);
  v6[536862720] = -235802127;
  v6[536862721] = -234556924;
  v6[536862722] = -234556924;
  v6[536862723] = -219021312;
  v6[536862724] = -219021312;
  v6[536862725] = -219021312;
  v6[536862726] = -219021312;
  v6[536862727] = -219021312;
  v6[536862728] = -218103808;
  v6[536862729] = -202116109;
  *(_DWORD *)(v4 + 64) = point_id;
  *(_DWORD *)(v4 + 80) = area_id;
  Scene::getOwnPlayer((const Scene *const)(v4 + 96));
  if ( std::operator==<Player>((const std::shared_ptr<Player> *)(v4 + 96), 0LL) )
  {
    common::milog::MiLogStream::create(
      &v62,
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/scene/scene.cpp",
      "onTransferPointUnlocked",
      1093);
    v7 = common::milog::MiLogStream::operator<<<char [20],(char *[20])0>(
           &v62,
           (const char (*)[20])"getOwnPlayer fails ");
    common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v7, &this->scene_id_);
    common::milog::MiLogStream::~MiLogStream(&v62);
    v3 = -1;
    goto LABEL_59;
  }
  AreaComp = (unsigned int)Scene::getAreaComp(this);
  SceneAreaComp::getArea((SceneAreaComp *const)(v4 + 128), AreaComp);
  if ( std::operator==<Area>((const std::shared_ptr<Area> *)(v4 + 128), 0LL)
    || (v9 = std::__shared_ptr_access<Area,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Area,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 128)),
        (unsigned int)Area::onTransferPointUnlocked(v9, *(_DWORD *)(v4 + 64))) )
  {
    common::milog::MiLogStream::create(
      &v62,
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/scene/scene.cpp",
      "onTransferPointUnlocked",
      1100);
    v11 = common::milog::MiLogStream::operator<<<char [41],(char *[41])0>(
            &v62,
            (const char (*)[41])"onTransferPointUnlocked failed, area_id:");
    v12 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v11, (const unsigned int *)(v4 + 80));
    v13 = common::milog::MiLogStream::operator<<<char [8],(char *[8])0>(v12, (const char (*)[8])" scene:");
    common::milog::MiLogStream::operator<<<Scene,(Scene*)0>(v13, this);
    common::milog::MiLogStream::~MiLogStream(&v62);
  }
  ServiceBox::findService<GameserverService>();
  GameserverService::getConfig((GameserverService *const)(v4 + 224));
  v14 = std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 224));
  *(_DWORD *)(v4 + 32) = WorldAreaExcelConfigMgr::findAreaCityId(
                           &v14->design_config.txt_config_mgr.world_area_config_mgr,
                           *(_DWORD *)(v4 + 80));
  std::shared_ptr<Config>::~shared_ptr((std::shared_ptr<Config> *const)(v4 + 224));
  common::tools::perf::make_shared<UnlockTransPointEvent,unsigned int &,unsigned int &,unsigned int &,unsigned int &>(
    (unsigned int *)(v4 + 224),
    &this->scene_id_,
    (unsigned int *)(v4 + 64),
    (unsigned int *)(v4 + 32),
    (unsigned int *)(v4 + 80),
    v15,
    v53,
    v63);
  std::shared_ptr<BaseEvent>::shared_ptr<UnlockTransPointEvent,void>(
    (std::shared_ptr<BaseEvent> *const)(v4 + 160),
    (std::shared_ptr<UnlockTransPointEvent> *)(v4 + 224));
  std::shared_ptr<UnlockTransPointEvent>::~shared_ptr((std::shared_ptr<UnlockTransPointEvent> *const)(v4 + 224));
  if ( std::operator!=<BaseEvent>((const std::shared_ptr<BaseEvent> *)(v4 + 160), 0LL) )
  {
    v16 = std::__shared_ptr_access<Player,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Player,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 96));
    EventComp = Player::getEventComp(v16);
    std::shared_ptr<BaseEvent>::shared_ptr(
      (std::shared_ptr<BaseEvent> *const)(v4 + 224),
      (const std::shared_ptr<BaseEvent> *)(v4 + 160));
    PlayerEventComp::notifyEvent(EventComp, (BaseEventPtr *)(v4 + 224));
    std::shared_ptr<BaseEvent>::~shared_ptr((std::shared_ptr<BaseEvent> *const)(v4 + 224));
  }
  ServiceBox::findService<GameserverService>();
  GameserverService::getConfig((GameserverService *const)(v4 + 224));
  p_world_area_config_mgr = &std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 224))->design_config.txt_config_mgr.world_area_config_mgr;
  v19 = *(_DWORD *)(v4 + 64);
  if ( *(_BYTE *)(((unsigned __int64)&this->scene_id_ >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->scene_id_ >> 3) + 0x7FFF8000) <= 3 )
  {
    p_world_area_config_mgr = (const WorldAreaExcelConfigMgr *)&this->scene_id_;
    __asan_report_load4(&this->scene_id_);
  }
  reward_config_ptr = WorldAreaExcelConfigMgr::findTransPointRewardConfig(p_world_area_config_mgr, this->scene_id_, v19);
  std::shared_ptr<Config>::~shared_ptr((std::shared_ptr<Config> *const)(v4 + 224));
  if ( reward_config_ptr )
  {
    if ( *(_BYTE *)(((unsigned __int64)&reward_config_ptr->reward_id >> 3) + 0x7FFF8000) != 0
      && *(_BYTE *)(((unsigned __int64)&reward_config_ptr->reward_id >> 3) + 0x7FFF8000) <= 3 )
    {
      __asan_report_load4(&reward_config_ptr->reward_id);
    }
    if ( reward_config_ptr->reward_id )
    {
      ActionReason::ActionReason(
        (ActionReason *const)(v4 + 256),
        ACTION_REASON_UNLOCK_POINT_REWARD,
        ITEM_LIMIT_UNLOCK_TRANS_POINT);
      v20 = std::__shared_ptr_access<Player,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Player,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 96));
      ItemComp = Player::getItemComp(v20);
      if ( *(_BYTE *)(((unsigned __int64)&reward_config_ptr->reward_id >> 3) + 0x7FFF8000) != 0
        && *(_BYTE *)(((unsigned __int64)&reward_config_ptr->reward_id >> 3) + 0x7FFF8000) <= 3 )
      {
        ItemComp = (PlayerItemComp *)&reward_config_ptr->reward_id;
        __asan_report_load4(&reward_config_ptr->reward_id);
      }
      PlayerItemComp::grantReward(ItemComp, reward_config_ptr->reward_id, (const ActionReason *)(v4 + 256), 0LL);
    }
    EventUtil::createEvent((data::EventType)(v4 + 192));
    v22 = 0LL;
    if ( std::operator!=<Event>((const std::shared_ptr<Event> *)(v4 + 192), 0LL) )
    {
      v23 = std::__shared_ptr_access<Player,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Player,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 96));
      Uid = Player::getUid(v23);
      v25 = std::__shared_ptr_access<Event,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Event,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 192));
      v26 = *(_BYTE *)(((unsigned __int64)&v25->uid >> 3) + 0x7FFF8000);
      if ( v26 != 0 && (char)((((_BYTE)v25 + 60) & 7) + 3) >= v26 )
      {
        LOBYTE(v22) = v26 != 0;
        __asan_report_store4(&v25->uid, v22, (_BYTE)v25);
      }
      v25->uid = Uid;
      if ( *(_BYTE *)(((unsigned __int64)&this->scene_id_ >> 3) + 0x7FFF8000) != 0
        && *(_BYTE *)(((unsigned __int64)&this->scene_id_ >> 3) + 0x7FFF8000) <= 3 )
      {
        __asan_report_load4(&this->scene_id_);
      }
      scene_id = this->scene_id_;
      v28 = std::__shared_ptr_access<Event,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Event,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 192));
      v29 = *(_BYTE *)(((unsigned __int64)&v28->param1 >> 3) + 0x7FFF8000);
      if ( v29 != 0 && (char)((((_BYTE)v28 + 44) & 7) + 3) >= v29 )
      {
        LOBYTE(v22) = v29 != 0;
        __asan_report_store4(&v28->param1, v22, (_BYTE)v28);
      }
      v28->param1 = scene_id;
      v30 = *(_DWORD *)(v4 + 64);
      v31 = (__int64)std::__shared_ptr_access<Event,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Event,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 192));
      v32 = *(_BYTE *)(((unsigned __int64)(v31 + 48) >> 3) + 0x7FFF8000);
      LOBYTE(v22) = v32 != 0;
      v33 = v32 != 0 && v32 <= 3;
      if ( v33 )
        v31 = __asan_report_store4(v31 + 48, v22, v33);
      *(_DWORD *)(v31 + 48) = v30;
      std::to_string((std::string *)&v62, *(_DWORD *)(v4 + 64));
      v34 = std::__shared_ptr_access<Event,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Event,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 192));
      std::string::operator=(&v34->source_name, &v62);
      std::string::~string(&v62);
      __for_range = &reward_config_ptr->group_id_vec;
      __for_begin._M_current = std::vector<unsigned int>::begin(&reward_config_ptr->group_id_vec)._M_current;
      __for_end._M_current = std::vector<unsigned int>::end(&reward_config_ptr->group_id_vec)._M_current;
      while ( __gnu_cxx::operator!=<unsigned int const*,std::vector<unsigned int>>(&__for_begin, &__for_end) )
      {
        v35 = (unsigned int *)__gnu_cxx::__normal_iterator<unsigned int const*,std::vector<unsigned int>>::operator*(&__for_begin);
        v36 = v35;
        if ( *(_BYTE *)(((unsigned __int64)v35 >> 3) + 0x7FFF8000) != 0
          && (char)(((unsigned __int8)v35 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)v35 >> 3) + 0x7FFF8000) )
        {
          __asan_report_load4(v35);
        }
        *(_DWORD *)(v4 + 48) = *v36;
        Scene::findGroup((Scene *const)(v4 + 224), (uint32_t)this);
        if ( std::operator==<Group>((const std::shared_ptr<Group> *)(v4 + 224), 0LL) )
        {
          common::milog::MiLogStream::create(
            &v62,
            &common::milog::MiLogDefault::default_log_obj_,
            3u,
            "./src/scene/scene.cpp",
            "onTransferPointUnlocked",
            1132);
          v37 = common::milog::MiLogStream::operator<<<char [23],(char *[23])0>(
                  &v62,
                  (const char (*)[23])"findGroupProxy fails: ");
          common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v37, (const unsigned int *)(v4 + 48));
          common::milog::MiLogStream::~MiLogStream(&v62);
        }
        else
        {
          v38 = std::__shared_ptr_access<Group,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Group,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 224));
          Group::handleEvent(v38, (EventPtr *)(v4 + 192));
        }
        std::shared_ptr<Group>::~shared_ptr((std::shared_ptr<Group> *const)(v4 + 224));
        __gnu_cxx::__normal_iterator<unsigned int const*,std::vector<unsigned int>>::operator++(&__for_begin);
      }
    }
    if ( std::vector<unsigned int>::empty(&reward_config_ptr->unlock_area_id_vec) )
      goto LABEL_45;
    v39 = std::__shared_ptr_access<Player,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Player,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 96));
    SceneComp = Player::getSceneComp(v39);
    p_unlock_area_id_vec = &reward_config_ptr->unlock_area_id_vec;
    if ( *(_BYTE *)(((unsigned __int64)&this->scene_id_ >> 3) + 0x7FFF8000) != 0
      && *(_BYTE *)(((unsigned __int64)&this->scene_id_ >> 3) + 0x7FFF8000) <= 3 )
    {
      SceneComp = (PlayerSceneComp *)&this->scene_id_;
      __asan_report_load4(&this->scene_id_);
    }
    if ( PlayerSceneComp::unlockArea(SceneComp, this->scene_id_, p_unlock_area_id_vec, 1) )
    {
      common::milog::MiLogStream::create(
        &v62,
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/scene/scene.cpp",
        "onTransferPointUnlocked",
        1143);
      v42 = common::milog::MiLogStream::operator<<<char [50],(char *[50])0>(
              &v62,
              (const char (*)[50])"onTransferPointUnlocked, unlockArea failed, uid: ");
      v43 = std::__shared_ptr_access<Player,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Player,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 96));
      *(_DWORD *)(v4 + 48) = Player::getUid(v43);
      v44 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v42, (const unsigned int *)(v4 + 48));
      v45 = common::milog::MiLogStream::operator<<<char [13],(char *[13])0>(v44, (const char (*)[13])" ,point_id: ");
      common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v45, (const unsigned int *)(v4 + 64));
      common::milog::MiLogStream::~MiLogStream(&v62);
      v3 = -1;
      v46 = 0;
    }
    else
    {
LABEL_45:
      v46 = 1;
    }
    std::shared_ptr<Event>::~shared_ptr((std::shared_ptr<Event> *const)(v4 + 192));
    if ( v46 != 1 )
      goto LABEL_58;
  }
  else
  {
    ServiceBox::findService<GameserverService>();
    GameserverService::getConfig((GameserverService *const)(v4 + 224));
    p_dungeon_entry_config_mgr = &std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 224))->design_config.txt_config_mgr.dungeon_entry_config_mgr;
    v48 = *(_DWORD *)(v4 + 64);
    if ( *(_BYTE *)(((unsigned __int64)&this->scene_id_ >> 3) + 0x7FFF8000) != 0
      && *(_BYTE *)(((unsigned __int64)&this->scene_id_ >> 3) + 0x7FFF8000) <= 3 )
    {
      p_dungeon_entry_config_mgr = (const DungeonEntryExcelConfigMgr *)&this->scene_id_;
      __asan_report_load4(&this->scene_id_);
    }
    dungeon_entry_config_ptr = DungeonEntryExcelConfigMgr::findDungeonEntryConfig(
                                 p_dungeon_entry_config_mgr,
                                 this->scene_id_,
                                 v48);
    std::shared_ptr<Config>::~shared_ptr((std::shared_ptr<Config> *const)(v4 + 224));
    if ( dungeon_entry_config_ptr )
    {
      if ( *(_BYTE *)(((unsigned __int64)&dungeon_entry_config_ptr->reward_data_id >> 3) + 0x7FFF8000) != 0
        && (char)((((_BYTE)dungeon_entry_config_ptr + 92) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&dungeon_entry_config_ptr->reward_data_id >> 3)
                                                                                + 0x7FFF8000) )
      {
        __asan_report_load4(&dungeon_entry_config_ptr->reward_data_id);
      }
      if ( dungeon_entry_config_ptr->reward_data_id )
      {
        common::milog::MiLogStream::create(
          &v62,
          &common::milog::MiLogDefault::default_log_obj_,
          1u,
          "./src/scene/scene.cpp",
          "onTransferPointUnlocked",
          1154);
        v49 = common::milog::MiLogStream::operator<<<char [48],(char *[48])0>(
                &v62,
                (const char (*)[48])"[Dungeon Entry] unlock point and grant reward: ");
        common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v49, (const unsigned int *)(v4 + 64));
        common::milog::MiLogStream::~MiLogStream(&v62);
        ActionReason::ActionReason(
          (ActionReason *const)(v4 + 256),
          ACTION_REASON_UNLOCK_POINT_REWARD,
          ITEM_LIMIT_UNLOCK_DUNGEON);
        v50 = std::__shared_ptr_access<Player,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Player,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 96));
        p_reward_data_id = Player::getItemComp(v50);
        if ( *(_BYTE *)(((unsigned __int64)&dungeon_entry_config_ptr->reward_data_id >> 3) + 0x7FFF8000) != 0
          && (char)((((_BYTE)dungeon_entry_config_ptr + 92) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&dungeon_entry_config_ptr->reward_data_id >> 3)
                                                                                  + 0x7FFF8000) )
        {
          p_reward_data_id = (PlayerItemComp *)&dungeon_entry_config_ptr->reward_data_id;
          __asan_report_load4(&dungeon_entry_config_ptr->reward_data_id);
        }
        PlayerItemComp::grantReward(
          p_reward_data_id,
          dungeon_entry_config_ptr->reward_data_id,
          (const ActionReason *)(v4 + 256),
          0LL);
      }
    }
  }
  v3 = 0;
LABEL_58:
  std::shared_ptr<BaseEvent>::~shared_ptr((std::shared_ptr<BaseEvent> *const)(v4 + 160));
  std::shared_ptr<Area>::~shared_ptr((std::shared_ptr<Area> *const)(v4 + 128));
LABEL_59:
  std::shared_ptr<Player>::~shared_ptr((std::shared_ptr<Player> *const)(v4 + 96));
  result = v3;
  if ( v54 == (unsigned int *)v4 )
  {
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8008) = 0LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8010) = 0LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8018) = 0LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8020) = 0LL;
  }
  else
  {
    *(_QWORD *)v4 = 1172321806LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8020) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 1164: range 000000001597B614-000000001597B891
__int64 __fastcall Scene::tryAddExplorePointOnTempleInteract(
        Scene *const this,
        Player *player,
        uint32_t group_id,
        uint32_t config_id,
        uint32_t area_id)
{
  unsigned __int64 v5; // rbx
  __int64 v6; // rax
  _DWORD *v7; // r12
  uint32_t OwnerUid; // r14d
  unsigned int v9; // r14d
  uint32_t AreaComp; // eax
  common::milog::MiLogStream *v11; // rax
  common::milog::MiLogStream *v12; // rax
  common::milog::MiLogStream *v13; // rax
  Area *v14; // rax
  __int64 result; // rax
  common::milog::MiLogStream v19; // [rsp+20h] [rbp-B0h] BYREF
  char v20[144]; // [rsp+40h] [rbp-90h] BYREF

  v5 = (unsigned __int64)v20;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v6 = __asan_stack_malloc_1(96LL);
    if ( v6 )
      v5 = v6;
  }
  *(_QWORD *)v5 = 1102416563LL;
  *(_QWORD *)(v5 + 8) = "2 48 4 12 area_id:1163 64 16 13 area_ptr:1169";
  *(_QWORD *)(v5 + 16) = Scene::tryAddExplorePointOnTempleInteract;
  v7 = (_DWORD *)(v5 >> 3);
  v7[536862720] = -235802127;
  v7[536862721] = -234556943;
  v7[536862722] = -202178560;
  *(_DWORD *)(v5 + 48) = area_id;
  OwnerUid = Scene::getOwnerUid(this);
  if ( OwnerUid == Player::getUid(player) )
  {
    AreaComp = (unsigned int)Scene::getAreaComp(this);
    SceneAreaComp::getArea((SceneAreaComp *const)(v5 + 64), AreaComp);
    if ( std::operator==<Area>((const std::shared_ptr<Area> *)(v5 + 64), 0LL) )
    {
      common::milog::MiLogStream::create(
        &v19,
        &common::milog::MiLogDefault::default_log_obj_,
        1u,
        "./src/scene/scene.cpp",
        "tryAddExplorePointOnTempleInteract",
        1172);
      v11 = common::milog::MiLogStream::operator<<<char [25],(char *[25])0>(
              &v19,
              (const char (*)[25])"getArea failed, area_id:");
      v12 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v11, (const unsigned int *)(v5 + 48));
      v13 = common::milog::MiLogStream::operator<<<char [8],(char *[8])0>(v12, (const char (*)[8])" scene:");
      common::milog::MiLogStream::operator<<<Scene,(Scene*)0>(v13, this);
      common::milog::MiLogStream::~MiLogStream(&v19);
      v9 = -1;
    }
    else
    {
      v14 = std::__shared_ptr_access<Area,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Area,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v5 + 64));
      Area::tryAddExplorePointOnTempleInteract(v14, group_id, config_id);
      v9 = 0;
    }
    std::shared_ptr<Area>::~shared_ptr((std::shared_ptr<Area> *const)(v5 + 64));
  }
  else
  {
    v9 = 0;
  }
  result = v9;
  if ( v20 == (char *)v5 )
  {
    *(_QWORD *)((v5 >> 3) + 0x7FFF8000) = 0LL;
    *(_DWORD *)((v5 >> 3) + 0x7FFF8008) = 0;
  }
  else
  {
    *(_QWORD *)v5 = 1172321806LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v5 >> 3) + 0x7FFF8008) = -168430091;
  }
  return result;
};

// Line 1180: range 000000001597B892-000000001597BBBD
int32_t __cdecl Scene::tryAddExplorePointOnChestOpen(
        Scene *const this,
        Player *player,
        uint32_t group_id,
        const GadgetScriptConfig *gadget_script_config)
{
  unsigned __int64 v4; // rbx
  __int64 v5; // rax
  unsigned __int64 v6; // r12
  int32_t v7; // r14d
  uint32_t OwnerUid; // r14d
  uint32_t AreaComp; // ecx
  common::milog::MiLogStream *v10; // rax
  common::milog::MiLogStream *v11; // rax
  common::milog::MiLogStream *v12; // rdx
  Area *p_scene_id; // rdi
  uint32_t config_id; // ecx
  int32_t result; // eax
  common::milog::MiLogStream v19; // [rsp+20h] [rbp-90h] BYREF
  char v20[112]; // [rsp+40h] [rbp-70h] BYREF

  v4 = (unsigned __int64)v20;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v5 = __asan_stack_malloc_0(64LL);
    if ( v5 )
      v4 = v5;
  }
  *(_QWORD *)v4 = 1102416563LL;
  *(_QWORD *)(v4 + 8) = "1 32 16 13 area_ptr:1189";
  *(_QWORD *)(v4 + 16) = Scene::tryAddExplorePointOnChestOpen;
  v6 = v4 >> 3;
  *(_DWORD *)(v6 + 2147450880) = -235802127;
  *(_DWORD *)(v6 + 2147450884) = -202178560;
  if ( ExploreScriptConfig::isEmpty(&gadget_script_config->explore_config) )
  {
    v7 = 0;
  }
  else
  {
    OwnerUid = Scene::getOwnerUid(this);
    if ( OwnerUid == Player::getUid(player) )
    {
      AreaComp = (unsigned int)Scene::getAreaComp(this);
      if ( *(_BYTE *)(((unsigned __int64)&gadget_script_config->area_id >> 3) + 0x7FFF8000) != 0
        && *(_BYTE *)(((unsigned __int64)&gadget_script_config->area_id >> 3) + 0x7FFF8000) <= 3 )
      {
        __asan_report_load4(&gadget_script_config->area_id);
      }
      SceneAreaComp::getArea((SceneAreaComp *const)(v4 + 32), AreaComp);
      if ( std::operator==<Area>((const std::shared_ptr<Area> *)(v4 + 32), 0LL) )
      {
        common::milog::MiLogStream::create(
          &v19,
          &common::milog::MiLogDefault::default_log_obj_,
          1u,
          "./src/scene/scene.cpp",
          "tryAddExplorePointOnChestOpen",
          1192);
        v10 = common::milog::MiLogStream::operator<<<char [25],(char *[25])0>(
                &v19,
                (const char (*)[25])"getArea failed, area_id:");
        v11 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                v10,
                &gadget_script_config->area_id);
        v12 = common::milog::MiLogStream::operator<<<char [8],(char *[8])0>(v11, (const char (*)[8])" scene:");
        common::milog::MiLogStream::operator<<<Scene,(Scene*)0>(v12, this);
        common::milog::MiLogStream::~MiLogStream(&v19);
        v7 = -1;
      }
      else
      {
        p_scene_id = std::__shared_ptr_access<Area,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Area,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 32));
        if ( *(_BYTE *)(((unsigned __int64)gadget_script_config >> 3) + 0x7FFF8000) != 0
          && *(_BYTE *)(((unsigned __int64)gadget_script_config >> 3) + 0x7FFF8000) <= 3 )
        {
          p_scene_id = (Area *)gadget_script_config;
          __asan_report_load4(gadget_script_config);
        }
        config_id = gadget_script_config->config_id;
        if ( *(_BYTE *)(((unsigned __int64)&this->scene_id_ >> 3) + 0x7FFF8000) != 0
          && *(_BYTE *)(((unsigned __int64)&this->scene_id_ >> 3) + 0x7FFF8000) <= 3 )
        {
          p_scene_id = (Area *)&this->scene_id_;
          __asan_report_load4(&this->scene_id_);
        }
        Area::tryAddExplorePointOnChestOpen(p_scene_id, this->scene_id_, group_id, config_id);
        v7 = 0;
      }
      std::shared_ptr<Area>::~shared_ptr((std::shared_ptr<Area> *const)(v4 + 32));
    }
    else
    {
      v7 = 0;
    }
  }
  result = v7;
  if ( v20 == (char *)v4 )
  {
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0LL;
  }
  else
  {
    *(_QWORD *)v4 = 1172321806LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 1200: range 000000001597BBBE-000000001597BE2E
__int64 __fastcall Scene::onGather(Scene *const this, Player *player, uint32_t area_id, uint32_t explore_exp)
{
  unsigned __int64 v4; // rbx
  __int64 v5; // rax
  _DWORD *v6; // r12
  uint32_t OwnerUid; // r14d
  unsigned int v8; // r14d
  uint32_t AreaComp; // eax
  common::milog::MiLogStream *v10; // rax
  common::milog::MiLogStream *v11; // rax
  common::milog::MiLogStream *v12; // rax
  Area *v13; // rax
  __int64 result; // rax
  common::milog::MiLogStream v17; // [rsp+20h] [rbp-B0h] BYREF
  char v18[144]; // [rsp+40h] [rbp-90h] BYREF

  v4 = (unsigned __int64)v18;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v5 = __asan_stack_malloc_1(96LL);
    if ( v5 )
      v4 = v5;
  }
  *(_QWORD *)v4 = 1102416563LL;
  *(_QWORD *)(v4 + 8) = "2 48 4 12 area_id:1199 64 16 13 area_ptr:1205";
  *(_QWORD *)(v4 + 16) = Scene::onGather;
  v6 = (_DWORD *)(v4 >> 3);
  v6[536862720] = -235802127;
  v6[536862721] = -234556943;
  v6[536862722] = -202178560;
  *(_DWORD *)(v4 + 48) = area_id;
  OwnerUid = Scene::getOwnerUid(this);
  if ( OwnerUid == Player::getUid(player) )
  {
    AreaComp = (unsigned int)Scene::getAreaComp(this);
    SceneAreaComp::getArea((SceneAreaComp *const)(v4 + 64), AreaComp);
    if ( std::operator==<Area>((const std::shared_ptr<Area> *)(v4 + 64), 0LL) )
    {
      common::milog::MiLogStream::create(
        &v17,
        &common::milog::MiLogDefault::default_log_obj_,
        1u,
        "./src/scene/scene.cpp",
        "onGather",
        1208);
      v10 = common::milog::MiLogStream::operator<<<char [25],(char *[25])0>(
              &v17,
              (const char (*)[25])"getArea failed, area_id:");
      v11 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v10, (const unsigned int *)(v4 + 48));
      v12 = common::milog::MiLogStream::operator<<<char [8],(char *[8])0>(v11, (const char (*)[8])" scene:");
      common::milog::MiLogStream::operator<<<Scene,(Scene*)0>(v12, this);
      common::milog::MiLogStream::~MiLogStream(&v17);
      v8 = -1;
    }
    else
    {
      v13 = std::__shared_ptr_access<Area,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Area,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 64));
      Area::onGather(v13, explore_exp);
      v8 = 0;
    }
    std::shared_ptr<Area>::~shared_ptr((std::shared_ptr<Area> *const)(v4 + 64));
  }
  else
  {
    v8 = 0;
  }
  result = v8;
  if ( v18 == (char *)v4 )
  {
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0LL;
    *(_DWORD *)((v4 >> 3) + 0x7FFF8008) = 0;
  }
  else
  {
    *(_QWORD *)v4 = 1172321806LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v4 >> 3) + 0x7FFF8008) = -168430091;
  }
  return result;
};

// Line 1217: range 000000001597BE30-000000001597BF75
const data::SceneExcelConfig *__cdecl Scene::getConfig(const Scene *const this)
{
  SceneExcelConfigMgr *p_scene_config_mgr; // rcx
  common::milog::MiLogStream *v2; // rax
  const data::SceneExcelConfig *scene_config_ptr; // [rsp+18h] [rbp-48h]
  std::shared_ptr<Config> v5; // [rsp+20h] [rbp-40h] BYREF
  common::milog::MiLogStream v6; // [rsp+30h] [rbp-30h] BYREF

  ServiceBox::findService<GameserverService>();
  GameserverService::getConfig((GameserverService *const)&v5);
  p_scene_config_mgr = &std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false> *const)&v5)->design_config.txt_config_mgr.scene_config_mgr;
  if ( *(_BYTE *)(((unsigned __int64)&this->scene_id_ >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->scene_id_ >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4(&this->scene_id_);
  }
  scene_config_ptr = data::SceneExcelConfigMgrBase::findSceneExcelConfig(p_scene_config_mgr, this->scene_id_);
  std::shared_ptr<Config>::~shared_ptr(&v5);
  if ( scene_config_ptr )
    return scene_config_ptr;
  common::milog::MiLogStream::create(
    &v6,
    &common::milog::MiLogDefault::default_log_obj_,
    3u,
    "./src/scene/scene.cpp",
    "getConfig",
    1221);
  v2 = common::milog::MiLogStream::operator<<<char [38],(char *[38])0>(
         &v6,
         (const char (*)[38])"findSceneExcelConfig fails, scene_id:");
  common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v2, &this->scene_id_);
  common::milog::MiLogStream::~MiLogStream(&v6);
  return 0LL;
};

// Line 1229: range 000000001597BF76-000000001597C0B5
const SceneScriptConfig *__cdecl Scene::getScriptConfig(const Scene *const this)
{
  LuaConfigMgr *p_lua_config_mgr; // rcx
  common::milog::MiLogStream *v2; // rax
  const SceneScriptConfig *script_config_ptr; // [rsp+18h] [rbp-48h]
  std::shared_ptr<Config> v5; // [rsp+20h] [rbp-40h] BYREF
  common::milog::MiLogStream v6; // [rsp+30h] [rbp-30h] BYREF

  ServiceBox::findService<GameserverService>();
  GameserverService::getConfig((GameserverService *const)&v5);
  p_lua_config_mgr = &std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false> *const)&v5)->design_config.lua_config_mgr;
  if ( *(_BYTE *)(((unsigned __int64)&this->scene_id_ >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->scene_id_ >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4(&this->scene_id_);
  }
  script_config_ptr = LuaConfigMgr::findSceneScriptConfig(p_lua_config_mgr, this->scene_id_);
  std::shared_ptr<Config>::~shared_ptr(&v5);
  if ( script_config_ptr )
    return script_config_ptr;
  common::milog::MiLogStream::create(
    &v6,
    &common::milog::MiLogDefault::default_log_obj_,
    3u,
    "./src/scene/scene.cpp",
    "getScriptConfig",
    1233);
  v2 = common::milog::MiLogStream::operator<<<char [39],(char *[39])0>(
         &v6,
         (const char (*)[39])"findSceneScriptConfig fails, scene_id:");
  common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v2, &this->scene_id_);
  common::milog::MiLogStream::~MiLogStream(&v6);
  return 0LL;
};

// Line 1241: range 000000001597C0B6-000000001597C1F5
const SceneJsonConfig *__cdecl Scene::getJsonConfig(const Scene *const this)
{
  JsonConfigMgr *p_json_config_mgr; // rcx
  common::milog::MiLogStream *v2; // rax
  const SceneJsonConfig *json_config_ptr; // [rsp+18h] [rbp-48h]
  std::shared_ptr<Config> v5; // [rsp+20h] [rbp-40h] BYREF
  common::milog::MiLogStream v6; // [rsp+30h] [rbp-30h] BYREF

  ServiceBox::findService<GameserverService>();
  GameserverService::getConfig((GameserverService *const)&v5);
  p_json_config_mgr = &std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false> *const)&v5)->design_config.json_config_mgr;
  if ( *(_BYTE *)(((unsigned __int64)&this->scene_id_ >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->scene_id_ >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4(&this->scene_id_);
  }
  json_config_ptr = JsonConfigMgr::findSceneJsonConfig(p_json_config_mgr, this->scene_id_);
  std::shared_ptr<Config>::~shared_ptr(&v5);
  if ( json_config_ptr )
    return json_config_ptr;
  common::milog::MiLogStream::create(
    &v6,
    &common::milog::MiLogDefault::default_log_obj_,
    3u,
    "./src/scene/scene.cpp",
    "getJsonConfig",
    1245);
  v2 = common::milog::MiLogStream::operator<<<char [37],(char *[37])0>(
         &v6,
         (const char (*)[37])"findSceneJsonConfig fails, scene_id:");
  common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v2, &this->scene_id_);
  common::milog::MiLogStream::~MiLogStream(&v6);
  return 0LL;
};

// Line 1253: range 000000001597C1F6-000000001597C2B9
bool __cdecl Scene::isPosValid(const Scene *const this, const Vector3 *pos)
{
  common::milog::MiLogStream *v2; // rdx
  const SceneScriptConfig *scene_script_config_ptr; // [rsp+18h] [rbp-38h]
  common::milog::MiLogStream v5; // [rsp+20h] [rbp-30h] BYREF

  scene_script_config_ptr = Scene::getScriptConfig(this);
  if ( scene_script_config_ptr )
    return SceneScriptConfig::isPosValid(scene_script_config_ptr, pos);
  common::milog::MiLogStream::create(
    &v5,
    &common::milog::MiLogDefault::default_log_obj_,
    3u,
    "./src/scene/scene.cpp",
    "isPosValid",
    1257);
  v2 = common::milog::MiLogStream::operator<<<char [22],(char *[22])0>(&v5, (const char (*)[22])"getScriptConfig fails");
  common::milog::MiLogStream::operator<<<Scene,(Scene*)0>(v2, this);
  common::milog::MiLogStream::~MiLogStream(&v5);
  return 0;
};

// Line 1265: range 000000001597C2BA-000000001597C396
data::SceneType __cdecl Scene::getSceneType(const Scene *const this)
{
  const data::SceneExcelConfig *scene_config_ptr; // [rsp+18h] [rbp-38h]
  common::milog::MiLogStream v3; // [rsp+20h] [rbp-30h] BYREF

  scene_config_ptr = Scene::getConfig(this);
  if ( scene_config_ptr )
  {
    if ( *(_BYTE *)(((unsigned __int64)&scene_config_ptr->type >> 3) + 0x7FFF8000) != 0
      && (char)((((_BYTE)scene_config_ptr + 12) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&scene_config_ptr->type >> 3)
                                                                      + 0x7FFF8000) )
    {
      __asan_report_load4(&scene_config_ptr->type);
    }
    return scene_config_ptr->type;
  }
  else
  {
    common::milog::MiLogStream::create(
      &v3,
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/scene/scene.cpp",
      "getSceneType",
      1269);
    common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(&v3, (const char (*)[16])"getConfig fails");
    common::milog::MiLogStream::~MiLogStream(&v3);
    return 0;
  }
};

// Line 1276: range 000000001597C398-000000001597C474
data::SceneMpType __cdecl Scene::getSceneMpType(const Scene *const this)
{
  const data::SceneExcelConfig *scene_config_ptr; // [rsp+18h] [rbp-38h]
  common::milog::MiLogStream v3; // [rsp+20h] [rbp-30h] BYREF

  scene_config_ptr = Scene::getConfig(this);
  if ( scene_config_ptr )
  {
    if ( *(_BYTE *)(((unsigned __int64)&scene_config_ptr->mp_type >> 3) + 0x7FFF8000) != 0
      && (char)((((_BYTE)scene_config_ptr + 108) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&scene_config_ptr->mp_type >> 3)
                                                                       + 0x7FFF8000) )
    {
      __asan_report_load4(&scene_config_ptr->mp_type);
    }
    return scene_config_ptr->mp_type;
  }
  else
  {
    common::milog::MiLogStream::create(
      &v3,
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/scene/scene.cpp",
      "getSceneMpType",
      1280);
    common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(&v3, (const char (*)[16])"getConfig fails");
    common::milog::MiLogStream::~MiLogStream(&v3);
    return 0;
  }
};

// Line 1287: range 000000001597C476-000000001597C496
bool __cdecl Scene::isPlayerScene(const Scene *const this)
{
  data::SceneType SceneType; // eax

  SceneType = Scene::getSceneType(this);
  return SceneExcelConfigMgr::isPlayerScene(SceneType);
};

// Line 1292: range 000000001597C498-000000001597C4B8
bool __cdecl Scene::isHomeScene(const Scene *const this)
{
  data::SceneType SceneType; // eax

  SceneType = Scene::getSceneType(this);
  return SceneExcelConfigMgr::isHomeScene(SceneType);
};

// Line 1297: range 000000001597C4BA-000000001597C551
void __cdecl Scene::setOwnPlayer(Scene *const this, PlayerPtr *p_player_ptr)
{
  __int64 v2; // rsi
  std::__shared_ptr_access<Player,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v3; // rax
  uint32_t Uid; // edx
  char v5; // al

  std::weak_ptr<Player>::operator=<Player>(&this->player_wtr_, p_player_ptr);
  v2 = 0LL;
  if ( std::operator!=<Player>(p_player_ptr, 0LL) )
  {
    v3 = std::__shared_ptr_access<Player,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Player,(__gnu_cxx::_Lock_policy)2,false,false> *const)p_player_ptr);
    Uid = Player::getUid(v3);
    v5 = *(_BYTE *)(((unsigned __int64)&this->owner_uid_ >> 3) + 0x7FFF8000);
    if ( v5 != 0 && v5 <= 3 )
    {
      LOBYTE(v2) = v5 != 0;
      __asan_report_store4(&this->owner_uid_, v2, Uid);
    }
    this->owner_uid_ = Uid;
  }
};

// Line 1306: range 000000001597C552-000000001597C62E
void __cdecl Scene::setOwnHome(Scene *const this, HomePtr *p_home_ptr, uint32_t home_module_id)
{
  __int64 v3; // rsi
  std::__shared_ptr_access<Home,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v4; // rax
  uint32_t HomeUid; // edx
  char v6; // al

  std::weak_ptr<Home>::operator=<Home>(&this->home_wtr_, p_home_ptr);
  if ( *(_BYTE *)(((unsigned __int64)&this->home_module_id_ >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->home_module_id_ >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_store4(&this->home_module_id_, p_home_ptr, (_BYTE)this - 24);
  }
  this->home_module_id_ = home_module_id;
  v3 = 0LL;
  if ( std::operator!=<Home>(p_home_ptr, 0LL) )
  {
    v4 = std::__shared_ptr_access<Home,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Home,(__gnu_cxx::_Lock_policy)2,false,false> *const)p_home_ptr);
    HomeUid = Home::getHomeUid(v4);
    v6 = *(_BYTE *)(((unsigned __int64)&this->owner_uid_ >> 3) + 0x7FFF8000);
    if ( v6 != 0 && v6 <= 3 )
    {
      LOBYTE(v3) = v6 != 0;
      __asan_report_store4(&this->owner_uid_, v3, HomeUid);
    }
    this->owner_uid_ = HomeUid;
  }
};

// Line 1316: range 000000001597C688-000000001597CBB8
__int64 __fastcall Scene::notifySceneAndHostData(Scene *const this, uint32_t uid)
{
  unsigned __int64 v2; // r13
  __int64 v3; // rax
  _DWORD *v4; // r12
  common::milog::MiLogStream *v5; // rax
  unsigned int v6; // r14d
  Player *v7; // rax
  Player *v8; // rax
  Player *v9; // rax
  bool isPaused; // al
  DungeonScene *v11; // r14
  Player *v12; // rax
  Home *v13; // rax
  HomeBasicComp *BasicComp; // r14
  Player *v15; // rax
  Scene::notifySceneAndHostData::<lambda(const Avatar&)> v16; // si
  Player *v17; // rax
  PlayerBasicComp *v18; // r14
  Player *v19; // rax
  Player *v20; // rax
  PlayerAvatarComp *AvatarComp; // rax
  Player *v22; // rax
  PlayerAvatarComp *v23; // r14
  Player *v24; // rax
  PlayerAvatarComp *v25; // r14
  __int64 result; // rax
  uint64_t scene_time_ms; // [rsp+18h] [rbp-118h]
  common::milog::MiLogStream v28; // [rsp+20h] [rbp-110h] BYREF
  char v29[240]; // [rsp+40h] [rbp-F0h] BYREF

  v2 = (unsigned __int64)v29;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_2(192LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "5 48 4 8 uid:1315 64 16 15 player_ptr:1317 96 16 22 dungeon_scene_ptr:1331 128 16 13 home_ptr:13"
                        "38 160 16 21 owner_player_ptr:1345";
  *(_QWORD *)(v2 + 16) = Scene::notifySceneAndHostData;
  v4 = (_DWORD *)(v2 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = -234556943;
  v4[536862722] = -219021312;
  v4[536862723] = -219021312;
  v4[536862724] = -219021312;
  v4[536862725] = -202178560;
  *(_DWORD *)(v2 + 48) = uid;
  Scene::findPlayer((const Scene *const)(v2 + 64), (uint32_t)this);
  if ( std::operator==<Player>((const std::shared_ptr<Player> *)(v2 + 64), 0LL) )
  {
    common::milog::MiLogStream::create(
      &v28,
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/scene/scene.cpp",
      "notifySceneAndHostData",
      1320);
    v5 = common::milog::MiLogStream::operator<<<char [24],(char *[24])0>(
           &v28,
           (const char (*)[24])"findPlayer failed, uid:");
    common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v5, (const unsigned int *)(v2 + 48));
    common::milog::MiLogStream::~MiLogStream(&v28);
    v6 = -1;
  }
  else
  {
    v7 = std::__shared_ptr_access<Player,(__gnu_cxx::_Lock_policy)2,false,false>::operator*((const std::__shared_ptr_access<Player,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 64));
    Scene::notifyAllUnlockedForce(this, v7);
    v8 = std::__shared_ptr_access<Player,(__gnu_cxx::_Lock_policy)2,false,false>::operator*((const std::__shared_ptr_access<Player,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 64));
    Scene::notifyHostToPlayer(this, v8);
    v9 = std::__shared_ptr_access<Player,(__gnu_cxx::_Lock_policy)2,false,false>::operator*((const std::__shared_ptr_access<Player,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 64));
    Scene::notifySceneData(this, v9);
    scene_time_ms = Scene::getSceneDiscreteTimeMs(this);
    isPaused = Scene::isPaused(this);
    Scene::notifySceneTime(this, isPaused, scene_time_ms);
    std::enable_shared_from_this<Scene>::shared_from_this((std::enable_shared_from_this<Scene> *const)(v2 + 160));
    std::dynamic_pointer_cast<DungeonScene,Scene>((const std::shared_ptr<Scene> *)(v2 + 96));
    std::shared_ptr<Scene>::~shared_ptr((std::shared_ptr<Scene> *const)(v2 + 160));
    if ( std::operator!=<DungeonScene>((const std::shared_ptr<DungeonScene> *)(v2 + 96), 0LL) )
    {
      v11 = std::__shared_ptr_access<DungeonScene,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<DungeonScene,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 96));
      v12 = std::__shared_ptr_access<Player,(__gnu_cxx::_Lock_policy)2,false,false>::operator*((const std::__shared_ptr_access<Player,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 64));
      DungeonScene::notifyDungeonData(v11, v12);
    }
    Scene::getOwnHome((const Scene *const)(v2 + 128));
    if ( std::operator!=<Home>(0LL, (const std::shared_ptr<Home> *)(v2 + 128)) )
    {
      v13 = std::__shared_ptr_access<Home,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Home,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 128));
      BasicComp = Home::getBasicComp(v13);
      v15 = std::__shared_ptr_access<Player,(__gnu_cxx::_Lock_policy)2,false,false>::operator*((const std::__shared_ptr_access<Player,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 64));
      v16.gap0[0] = (char)v15;
      HomeBasicComp::notifyGameTime(BasicComp, v15);
    }
    else
    {
      Scene::getOwnPlayer((const Scene *const)(v2 + 160));
      v16.gap0[0] = 0;
      if ( std::operator!=<Player>((const std::shared_ptr<Player> *)(v2 + 160), 0LL) )
      {
        v17 = std::__shared_ptr_access<Player,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Player,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 160));
        v18 = Player::getBasicComp(v17);
        v19 = std::__shared_ptr_access<Player,(__gnu_cxx::_Lock_policy)2,false,false>::operator*((const std::__shared_ptr_access<Player,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 64));
        v16.gap0[0] = (char)v19;
        PlayerBasicComp::notifyGameTime(v18, v19);
      }
      std::shared_ptr<Player>::~shared_ptr((std::shared_ptr<Player> *const)(v2 + 160));
    }
    v20 = std::__shared_ptr_access<Player,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Player,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 64));
    AvatarComp = Player::getAvatarComp(v20);
    PlayerAvatarComp::tryRecoverAllTeamBuff(AvatarComp);
    v22 = std::__shared_ptr_access<Player,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Player,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 64));
    v23 = Player::getAvatarComp(v22);
    std::function<ForeachPolicy ()(Avatar const&)>::function<Scene::notifySceneAndHostData(unsigned int)::{lambda(Avatar const&)#1},void,void>(
      (std::function<ForeachPolicy(const Avatar&)> *const)&v28,
      v16);
    PlayerAvatarComp::foreachAvatar(v23, (std::function<ForeachPolicy(const Avatar&)> *)&v28);
    std::function<ForeachPolicy ()(Avatar const&)>::~function((std::function<ForeachPolicy(const Avatar&)> *const)&v28);
    v24 = std::__shared_ptr_access<Player,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Player,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 64));
    v25 = Player::getAvatarComp(v24);
    std::function<ForeachPolicy ()(Avatar &)>::function<Scene::notifySceneAndHostData(unsigned int)::{lambda(Avatar &)#2},void,void>(
      (std::function<ForeachPolicy(Avatar&)> *const)&v28,
      (Scene::notifySceneAndHostData::<lambda(Avatar&)>)&v28);
    PlayerAvatarComp::foreachMyAvatarInSceneTeam(v25, (std::function<ForeachPolicy(Avatar&)> *)&v28);
    std::function<ForeachPolicy ()(Avatar &)>::~function((std::function<ForeachPolicy(Avatar&)> *const)&v28);
    v6 = 0;
    std::shared_ptr<Home>::~shared_ptr((std::shared_ptr<Home> *const)(v2 + 128));
    std::shared_ptr<DungeonScene>::~shared_ptr((std::shared_ptr<DungeonScene> *const)(v2 + 96));
  }
  std::shared_ptr<Player>::~shared_ptr((std::shared_ptr<Player> *const)(v2 + 64));
  result = v6;
  if ( v29 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8010) = 0LL;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 1356: range 000000001597C630-000000001597C65A
ForeachPolicy __cdecl Scene::notifySceneAndHostData(unsigned int)::{lambda(Avatar const&)#1}::operator()(
        const Scene::notifySceneAndHostData::<lambda(const Avatar&)> *const __closure,
        const Avatar *avatar)
{
  BuffComp *BuffComp; // rax

  BuffComp = Avatar::getBuffComp(avatar);
  BuffComp::tryRecoverAllBuff(BuffComp);
  return 0;
};

// Line 1361: range 000000001597C65C-000000001597C686
ForeachPolicy __cdecl Scene::notifySceneAndHostData(unsigned int)::{lambda(Avatar &)#2}::operator()(
        const Scene::notifySceneAndHostData::<lambda(Avatar&)> *const __closure,
        Avatar *avatar)
{
  SkillComp *SkillComp; // rax

  SkillComp = Avatar::getSkillComp(avatar);
  SkillComp::notifySkillInfo(SkillComp);
  return 0;
};

// Line 1374: range 000000001597CBBA-000000001597D321
int32_t __cdecl Scene::playerPreEnter(Scene *const this, Player *player)
{
  unsigned __int64 v2; // r12
  __int64 v3; // rax
  _DWORD *v4; // r13
  common::milog::MiLogStream *v5; // rax
  common::milog::MiLogStream *v6; // rax
  common::milog::MiLogStream *v7; // rax
  int32_t v8; // r14d
  common::milog::MiLogStream *v9; // rax
  common::milog::MiLogStream *v10; // rax
  common::milog::MiLogStream *v11; // rax
  std::pair<unsigned int const,ScenePlayerPeerInfo> *v12; // rax
  common::milog::MiLogStream *v13; // rax
  ScenePlayerPeerInfo *v14; // rax
  uint32_t v15; // ecx
  char v16; // dl
  char *v17; // rsi
  bool v18; // dl
  uint32_t Now; // edi
  bool v20; // dl
  common::milog::MiLogStream *v21; // rax
  common::milog::MiLogStream *v22; // rax
  common::milog::MiLogStream *v23; // rax
  common::milog::MiLogStream *v24; // rax
  common::milog::MiLogStream *v25; // rax
  Player *v26; // rax
  PlayerMpComp *MpComp; // rax
  int32_t result; // eax
  std::map<unsigned int,ScenePlayerPeerInfo>::iterator __for_begin; // [rsp+18h] [rbp-F8h] BYREF
  std::map<unsigned int,ScenePlayerPeerInfo>::iterator __for_end; // [rsp+20h] [rbp-F0h] BYREF
  std::map<unsigned int,ScenePlayerPeerInfo> *__for_range; // [rsp+28h] [rbp-E8h]
  std::pair<unsigned int const,ScenePlayerPeerInfo> *p; // [rsp+30h] [rbp-E0h]
  ScenePlayerPeerInfo *player_peer_info; // [rsp+38h] [rbp-D8h]
  common::milog::MiLogStream v35; // [rsp+40h] [rbp-D0h] BYREF
  char v36[176]; // [rsp+60h] [rbp-B0h] BYREF

  v2 = (unsigned __int64)v36;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_1(128LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "4 32 4 8 uid:1375 48 4 12 peer_id:1394 64 16 20 host_player_ptr:1415 96 16 17 owner_player:1424";
  *(_QWORD *)(v2 + 16) = Scene::playerPreEnter;
  v4 = (_DWORD *)(v2 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = -234556924;
  v4[536862722] = -219021312;
  v4[536862723] = -202178560;
  *(_DWORD *)(v2 + 32) = Player::getUid(player);
  if ( Scene::getPeerId(this, *(_DWORD *)(v2 + 32)) )
  {
    Scene::getHostPlayer((const Scene *const)(v2 + 64));
    if ( std::operator==<Player>((const std::shared_ptr<Player> *)(v2 + 64), 0LL) )
    {
      toThisPtr<Player>((Player *)(v2 + 96));
      Scene::setHostPlayer(this, (PlayerPtr *)(v2 + 96));
      std::shared_ptr<Player>::~shared_ptr((std::shared_ptr<Player> *const)(v2 + 96));
    }
    common::milog::MiLogStream::create(
      &v35,
      &common::milog::MiLogDefault::default_log_obj_,
      1u,
      "./src/scene/scene.cpp",
      "playerPreEnter",
      1384);
    v5 = common::milog::MiLogStream::operator<<<char [34],(char *[34])0>(
           &v35,
           (const char (*)[34])"peer_id exist in scene, scene_id:");
    v6 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v5, &this->scene_id_);
    v7 = common::milog::MiLogStream::operator<<<char [7],(char *[7])0>(v6, (const char (*)[7])", uid:");
    common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v7, (const unsigned int *)(v2 + 32));
    common::milog::MiLogStream::~MiLogStream(&v35);
    v8 = 0;
    std::shared_ptr<Player>::~shared_ptr((std::shared_ptr<Player> *const)(v2 + 64));
  }
  else if ( std::map<unsigned int,ScenePlayerPeerInfo>::size(&this->peer_map_) <= 3 )
  {
    *(_DWORD *)(v2 + 48) = 1;
    __for_range = &this->peer_map_;
    __for_begin._M_node = std::map<unsigned int,ScenePlayerPeerInfo>::begin(&this->peer_map_)._M_node;
    __for_end._M_node = std::map<unsigned int,ScenePlayerPeerInfo>::end(&this->peer_map_)._M_node;
    while ( std::operator!=(&__for_begin, &__for_end) )
    {
      v12 = std::_Rb_tree_iterator<std::pair<unsigned int const,ScenePlayerPeerInfo>>::operator*(&__for_begin);
      p = v12;
      if ( *(_BYTE *)(((unsigned __int64)v12 >> 3) + 0x7FFF8000) != 0
        && (char)(((unsigned __int8)v12 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)v12 >> 3) + 0x7FFF8000) )
      {
        __asan_report_load4(v12);
      }
      if ( p->first != *(_DWORD *)(v2 + 48) )
        break;
      ++*(_DWORD *)(v2 + 48);
      std::_Rb_tree_iterator<std::pair<unsigned int const,ScenePlayerPeerInfo>>::operator++(&__for_begin);
    }
    if ( *(_DWORD *)(v2 + 48) <= 7u )
    {
      v17 = (char *)(v2 + 48);
      v14 = std::map<unsigned int,ScenePlayerPeerInfo>::operator[](
              &this->peer_map_,
              (const std::map<unsigned int,ScenePlayerPeerInfo>::key_type *)(v2 + 48));
      player_peer_info = v14;
      v15 = *(_DWORD *)(v2 + 32);
      v16 = *(_BYTE *)(((unsigned __int64)v14 >> 3) + 0x7FFF8000);
      LOBYTE(v17) = v16 != 0;
      v18 = v16 != 0 && (char)(((unsigned __int8)v14 & 7) + 3) >= v16;
      if ( v18 )
        __asan_report_store4(v14, v17, v18);
      player_peer_info->uid = v15;
      Now = common::tools::TimeUtils::getNow();
      v20 = *(_BYTE *)(((unsigned __int64)&player_peer_info->enter_time >> 3) + 0x7FFF8000) != 0
         && (char)((((_BYTE)player_peer_info + 4) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&player_peer_info->enter_time >> 3)
                                                                        + 0x7FFF8000);
      if ( v20 )
      {
        Now = (_DWORD)player_peer_info + 4;
        __asan_report_store4(&player_peer_info->enter_time, (((_BYTE)player_peer_info + 4) & 7u) + 3, v20);
      }
      player_peer_info->enter_time = Now;
      Scene::getHostPlayer((const Scene *const)(v2 + 64));
      if ( std::operator==<Player>((const std::shared_ptr<Player> *)(v2 + 64), 0LL) )
      {
        toThisPtr<Player>((Player *)(v2 + 96));
        Scene::setHostPlayer(this, (PlayerPtr *)(v2 + 96));
        std::shared_ptr<Player>::~shared_ptr((std::shared_ptr<Player> *const)(v2 + 96));
      }
      common::milog::MiLogStream::create(
        &v35,
        &common::milog::MiLogDefault::default_log_obj_,
        2u,
        "./src/scene/scene.cpp",
        "playerPreEnter",
        1421);
      v21 = common::milog::MiLogStream::operator<<<char [46],(char *[46])0>(
              &v35,
              (const char (*)[46])"[EnterScene] player preEnter scene, scene_id:");
      v22 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v21, &this->scene_id_);
      v23 = common::milog::MiLogStream::operator<<<char [11],(char *[11])0>(v22, (const char (*)[11])", peer_id:");
      v24 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v23, (const unsigned int *)(v2 + 48));
      v25 = common::milog::MiLogStream::operator<<<char [7],(char *[7])0>(v24, (const char (*)[7])", uid:");
      common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v25, (const unsigned int *)(v2 + 32));
      common::milog::MiLogStream::~MiLogStream(&v35);
      Scene::getOwnPlayer((const Scene *const)(v2 + 96));
      if ( std::operator!=<Player>(0LL, (const std::shared_ptr<Player> *)(v2 + 96)) )
      {
        v26 = std::__shared_ptr_access<Player,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Player,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 96));
        MpComp = Player::getMpComp(v26);
        PlayerMpComp::updateMpPlayerInfo(MpComp);
      }
      v8 = 0;
      std::shared_ptr<Player>::~shared_ptr((std::shared_ptr<Player> *const)(v2 + 96));
      std::shared_ptr<Player>::~shared_ptr((std::shared_ptr<Player> *const)(v2 + 64));
    }
    else
    {
      common::milog::MiLogStream::create(
        &v35,
        &common::milog::MiLogDefault::default_log_obj_,
        4u,
        "./src/scene/scene.cpp",
        "playerPreEnter",
        1406);
      v13 = common::milog::MiLogStream::operator<<<char [17],(char *[17])0>(
              &v35,
              (const char (*)[17])"invalid peer_id:");
      common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v13, (const unsigned int *)(v2 + 48));
      common::milog::MiLogStream::~MiLogStream(&v35);
      v8 = -1;
    }
  }
  else
  {
    common::milog::MiLogStream::create(
      &v35,
      &common::milog::MiLogDefault::default_log_obj_,
      1u,
      "./src/scene/scene.cpp",
      "playerPreEnter",
      1390);
    v9 = common::milog::MiLogStream::operator<<<char [25],(char *[25])0>(
           &v35,
           (const char (*)[25])"scene is full, scene_id:");
    v10 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v9, &this->scene_id_);
    v11 = common::milog::MiLogStream::operator<<<char [7],(char *[7])0>(v10, (const char (*)[7])", uid:");
    common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v11, (const unsigned int *)(v2 + 32));
    common::milog::MiLogStream::~MiLogStream(&v35);
    v8 = 1203;
  }
  result = v8;
  if ( v36 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 1435: range 000000001597D39C-000000001597F742
int32_t __cdecl Scene::playerEnter(
        Scene *const this,
        Player *player,
        const Vector3 *pos,
        const Vector3 *rot,
        bool is_relogin,
        const std::vector<std::shared_ptr<Avatar>> *enter_scene_avatar_vec,
        AvatarPtr *p_appear_avatar_ptr)
{
  unsigned __int64 v7; // r13
  __int64 v8; // rax
  _DWORD *v9; // r12
  common::milog::MiLogStream *v10; // r14
  common::milog::MiLogStream *v11; // rax
  int32_t v12; // r14d
  common::milog::MiLogStream *v13; // r14
  common::milog::MiLogStream *v14; // rax
  std::__shared_ptr_access<World,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v15; // rax
  uint32_t v16; // r14d
  common::milog::MiLogStream *v18; // r14
  common::milog::MiLogStream *v19; // rax
  common::milog::MiLogStream *v20; // r14
  std::__shared_ptr_access<World,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v21; // rax
  common::milog::MiLogStream *v22; // rax
  common::milog::MiLogStream *v23; // r14
  common::milog::MiLogStream *v24; // r14
  common::milog::MiLogStream *v25; // rax
  common::milog::MiLogStream *v26; // rax
  common::milog::MiLogStream *v27; // rax
  common::milog::MiLogStream *v28; // rax
  unsigned __int64 v29; // rax
  common::milog::MiLogStream *v30; // r14
  bool v31; // r14
  std::weak_ptr<Player> *v32; // rax
  Player *v33; // rax
  char v34; // r14
  char v35; // r15
  common::milog::MiLogStream *v36; // rax
  const std::shared_ptr<Avatar> *v37; // rax
  common::milog::MiLogStream *v38; // rax
  std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v39; // rax
  std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v40; // rax
  common::milog::MiLogStream *v42; // rax
  PlayerSceneComp *SceneComp; // r14
  Player *v44; // rax
  PlayerAvatarComp *AvatarComp; // r14
  std::__shared_ptr_access<SceneTeam,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v46; // rax
  unsigned __int64 v47; // rax
  Player *v48; // rax
  PlayerAvatarComp *v49; // rax
  SceneTeam *v50; // r14
  unsigned __int64 v51; // rax
  proto_log::ChangeSceneTeamReason v52; // r15d
  std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v53; // rax
  uint64_t v54; // rax
  common::milog::MiLogStream *v55; // rax
  std::__shared_ptr_access<SceneTeam,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v56; // rax
  unsigned __int64 v57; // rax
  unsigned __int64 *M_current; // r14
  std::vector<long unsigned int>::iterator v59; // rax
  Player *v60; // rax
  PlayerAvatarComp *v61; // rax
  char v62; // r15
  bool v63; // r14
  bool v64; // r14
  common::milog::MiLogStream *v65; // r14
  std::__shared_ptr_access<Player,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v66; // rax
  common::milog::MiLogStream *v67; // rax
  common::milog::MiLogStream *v68; // r14
  std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v69; // rax
  Scene *v70; // r14
  Avatar *v71; // rax
  common::milog::MiLogStream *v72; // rax
  common::milog::MiLogStream *v73; // rax
  common::milog::MiLogStream *v74; // rax
  common::milog::MiLogStream *v75; // rax
  common::milog::MiLogStream *v76; // rax
  common::milog::MiLogStream *v77; // rax
  common::milog::MiLogStream *v78; // rax
  uint32_t OwnerUid; // r14d
  PlayerSceneComp *v80; // r14
  uint32_t SceneId; // eax
  PlayerSceneComp *v82; // r14
  uint32_t v83; // eax
  PlayerSceneComp *v84; // r14
  uint32_t v85; // eax
  PlayerSceneComp *v86; // r14
  uint32_t v87; // eax
  PlayerSceneComp *v88; // rax
  Player *v90; // rax
  PlayerAvatarComp *v91; // r14
  SceneMiscComp *MiscComp; // rax
  common::milog::MiLogStream *v93; // rax
  unsigned __int64 v94; // rax
  unsigned __int64 v95; // rdx
  Entity *v96; // rax
  Avatar *v97; // rax
  Avatar *v98; // rax
  common::milog::MiLogStream *v99; // rax
  bool v100; // r14
  common::milog::MiLogStream *v101; // rax
  PlayerAvatarComp *v102; // rax
  PlayerAvatarComp *v103; // rax
  SceneGalleryComp *GalleryComp; // rax
  SceneMultistagePlayComp *MultistagePlayComp; // rax
  PlayerSceneComp *v106; // r14
  unsigned __int64 v107; // rax
  unsigned __int64 v108; // rax
  unsigned __int64 v109; // rdx
  SceneTeam *v110; // rax
  std::__shared_ptr_access<UnixTimer,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v111; // rax
  std::__shared_ptr_access<UnixTimer,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v112; // r14
  unsigned __int64 v113; // rax
  unsigned int (__fastcall *v114)(std::__shared_ptr_access<UnixTimer,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *, __int64, __int64, const char *, const char *, __int64, __int64, _QWORD); // r15
  __int64 v115; // rax
  char v116; // al
  common::milog::MiLogStream *v117; // rax
  common::milog::MiLogStream *v118; // rax
  common::milog::MiLogStream *v119; // rax
  common::milog::MiLogStream *v120; // rax
  common::milog::MiLogStream *v121; // rax
  bool v124; // [rsp+18h] [rbp-3D8h]
  uint32_t scene_id; // [rsp+18h] [rbp-3D8h]
  unsigned int val; // [rsp+48h] [rbp-3A8h] BYREF
  data::SceneType scene_type; // [rsp+4Ch] [rbp-3A4h]
  std::vector<long unsigned int>::iterator __for_begin_1; // [rsp+50h] [rbp-3A0h] BYREF
  std::vector<long unsigned int>::iterator __for_end_0; // [rsp+58h] [rbp-398h] BYREF
  std::vector<long unsigned int>::iterator __for_begin_0; // [rsp+60h] [rbp-390h] BYREF
  std::vector<long unsigned int>::iterator __for_end; // [rsp+68h] [rbp-388h] BYREF
  const std::vector<std::shared_ptr<Avatar>> *__for_range; // [rsp+70h] [rbp-380h]
  std::vector<long unsigned int> *__for_range_0; // [rsp+78h] [rbp-378h]
  std::vector<long unsigned int> *__for_range_1; // [rsp+80h] [rbp-370h]
  unsigned __int64 guid; // [rsp+88h] [rbp-368h]
  std::shared_ptr<Player> __a; // [rsp+90h] [rbp-360h] BYREF
  common::milog::MiLogStream v140; // [rsp+A0h] [rbp-350h] BYREF
  char v141[816]; // [rsp+C0h] [rbp-330h] BYREF

  v7 = (unsigned __int64)v141;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v8 = __asan_stack_malloc_4(768LL);
    if ( v8 )
      v7 = v8;
  }
  *(_QWORD *)v7 = 1102416563LL;
  *(_QWORD *)(v7 + 8) = "18 32 4 8 uid:1464 48 4 12 peer_id:1465 64 8 9 guid:1537 96 16 14 world_ptr:1436 128 16 19 scene"
                        "_team_ptr:1472 160 16 15 player_ptr:1479 192 16 20 host_player_ptr:1485 224 16 24 cur_team_entit"
                        "y_ptr:1491 256 16 19 cur_avatar_ptr:1513 288 16 19 this_scene_ptr:1519 320 16 18 cur_scene_ptr:1"
                        "520 352 16 23 now_cur_avatar_ptr:1610 384 16 15 avatar_ptr:1502 416 24 25 team_avatar_guid_vec:1"
                        "501 480 24 17 old_guid_vec:1525 544 24 17 now_guid_vec:1536 608 48 10 guard:1526 688 48 20 player_location:1599";
  *(_QWORD *)(v7 + 16) = Scene::playerEnter;
  v9 = (_DWORD *)(v7 >> 3);
  v9[536862720] = -235802127;
  v9[536862721] = -234556924;
  v9[536862722] = -218959360;
  v9[536862723] = -219021312;
  v9[536862724] = -219021312;
  v9[536862725] = -219021312;
  v9[536862726] = -219021312;
  v9[536862727] = -219021312;
  v9[536862728] = -219021312;
  v9[536862729] = -219021312;
  v9[536862730] = -219021312;
  v9[536862731] = -219021312;
  v9[536862732] = -219021312;
  v9[536862733] = -234881024;
  v9[536862734] = -218959118;
  v9[536862735] = -234881024;
  v9[536862736] = -218959118;
  v9[536862737] = -234881024;
  v9[536862738] = -218959118;
  v9[536862740] = -219021312;
  v9[536862741] = 62194;
  v9[536862743] = -202116109;
  Player::getSceneComp(player);
  PlayerSceneComp::getCurWorld((const PlayerSceneComp *const)(v7 + 96));
  if ( std::operator==<World>((const std::shared_ptr<World> *)(v7 + 96), 0LL) )
  {
    if ( Scene::getSceneType(this) != SCENE_DUNGEON )
    {
      common::milog::MiLogStream::create(
        &v140,
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/scene/scene.cpp",
        "playerEnter",
        1441);
      v10 = common::milog::MiLogStream::operator<<<char [6],(char *[6])0>(&v140, (const char (*)[6])"uid: ");
      val = Player::getUid(player);
      v11 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v10, &val);
      common::milog::MiLogStream::operator<<<char [24],(char *[24])0>(
        v11,
        (const char (*)[24])" getCurWorld is nullptr");
      common::milog::MiLogStream::~MiLogStream(&v140);
      v12 = -1;
      goto LABEL_140;
    }
    common::milog::MiLogStream::create(
      &v140,
      &common::milog::MiLogDefault::default_log_obj_,
      1u,
      "./src/scene/scene.cpp",
      "playerEnter",
      1448);
    v13 = common::milog::MiLogStream::operator<<<char [6],(char *[6])0>(&v140, (const char (*)[6])"uid: ");
    val = Player::getUid(player);
    v14 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v13, &val);
    common::milog::MiLogStream::operator<<<char [37],(char *[37])0>(
      v14,
      (const char (*)[37])" enter dungeon, cur world is nullptr");
    common::milog::MiLogStream::~MiLogStream(&v140);
  }
  if ( std::operator!=<World>((const std::shared_ptr<World> *)(v7 + 96), 0LL)
    && Scene::getSceneType(this) != SCENE_DUNGEON
    && (v15 = std::__shared_ptr_access<World,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<World,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v7 + 96)),
        v16 = World::getOwnerUid(v15),
        v16 != Scene::getOwnerUid(this)) )
  {
    common::milog::MiLogStream::create(
      &v140,
      &common::milog::MiLogDefault::default_log_obj_,
      4u,
      "./src/scene/scene.cpp",
      "playerEnter",
      1455);
    v18 = common::milog::MiLogStream::operator<<<char [6],(char *[6])0>(&v140, (const char (*)[6])"uid: ");
    *(_DWORD *)(v7 + 32) = Player::getUid(player);
    v19 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v18, (const unsigned int *)(v7 + 32));
    v20 = common::milog::MiLogStream::operator<<<char [15],(char *[15])0>(v19, (const char (*)[15])" world owner: ");
    v21 = std::__shared_ptr_access<World,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<World,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v7 + 96));
    *(_DWORD *)(v7 + 48) = World::getOwnerUid(v21);
    v22 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v20, (const unsigned int *)(v7 + 48));
    v23 = common::milog::MiLogStream::operator<<<char [15],(char *[15])0>(v22, (const char (*)[15])" scene owner: ");
    val = Scene::getOwnerUid(this);
    common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v23, &val);
    common::milog::MiLogStream::~MiLogStream(&v140);
    v12 = -1;
  }
  else if ( std::operator==<Avatar>(p_appear_avatar_ptr, 0LL) )
  {
    common::milog::MiLogStream::create(
      &v140,
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/scene/scene.cpp",
      "playerEnter",
      1460);
    v24 = common::milog::MiLogStream::operator<<<char [6],(char *[6])0>(&v140, (const char (*)[6])"uid: ");
    val = Player::getUid(player);
    v25 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v24, &val);
    common::milog::MiLogStream::operator<<<char [30],(char *[30])0>(
      v25,
      (const char (*)[30])" appear_avatar_ptr is nullptr");
    common::milog::MiLogStream::~MiLogStream(&v140);
    v12 = -1;
  }
  else
  {
    *(_DWORD *)(v7 + 32) = Player::getUid(player);
    *(_DWORD *)(v7 + 48) = Scene::getPeerId(this, *(_DWORD *)(v7 + 32));
    if ( *(_DWORD *)(v7 + 48) )
    {
      if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
        __asan_report_load8();
      v29 = (unsigned __int64)(this->_vptr_DescribalBase + 35);
      if ( *(_BYTE *)((v29 >> 3) + 0x7FFF8000) )
        v29 = __asan_report_load8();
      (*(void (__fastcall **)(unsigned __int64, Scene *const))v29)(v7 + 128, this);
      if ( std::operator==<SceneTeam>((const std::shared_ptr<SceneTeam> *)(v7 + 128), 0LL) )
      {
        common::milog::MiLogStream::create(
          &v140,
          &common::milog::MiLogDefault::default_log_obj_,
          3u,
          "./src/scene/scene.cpp",
          "playerEnter",
          1475);
        v30 = common::milog::MiLogStream::operator<<<char [33],(char *[33])0>(
                &v140,
                (const char (*)[33])"scene team ptr is null scene_id:");
        val = Scene::getSceneId(this);
        common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v30, &val);
        common::milog::MiLogStream::~MiLogStream(&v140);
        v12 = -1;
      }
      else
      {
        toThisPtr<Player>((Player *)(v7 + 160));
        Scene::findPlayer((const Scene *const)&__a, (uint32_t)this);
        v31 = std::operator==<Player>(0LL, &__a);
        std::shared_ptr<Player>::~shared_ptr(&__a);
        if ( v31 )
        {
          v32 = std::map<unsigned int,std::weak_ptr<Player>>::operator[](
                  &this->player_map_,
                  (const std::map<unsigned int,std::weak_ptr<Player>>::key_type *)(v7 + 32));
          std::weak_ptr<Player>::operator=<Player>(v32, (const std::shared_ptr<Player> *)(v7 + 160));
        }
        Scene::getHostPlayer((const Scene *const)(v7 + 192));
        if ( std::operator==<Player>((const std::shared_ptr<Player> *)(v7 + 192), 0LL) )
        {
          std::shared_ptr<Player>::shared_ptr(
            (std::shared_ptr<Player> *const)(v7 + 384),
            (const std::shared_ptr<Player> *)(v7 + 160));
          Scene::setHostPlayer(this, (PlayerPtr *)(v7 + 384));
          std::shared_ptr<Player>::~shared_ptr((std::shared_ptr<Player> *const)(v7 + 384));
        }
        v33 = std::__shared_ptr_access<Player,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Player,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v7 + 160));
        Player::getAvatarComp(v33);
        PlayerAvatarComp::getTeamEntity((const PlayerAvatarComp *const)(v7 + 224));
        v34 = 0;
        v35 = 0;
        v124 = 1;
        if ( !std::operator==<AvatarTeamEntity>((const std::shared_ptr<AvatarTeamEntity> *)(v7 + 224), 0LL) )
        {
          std::enable_shared_from_this<Scene>::shared_from_this((std::enable_shared_from_this<Scene> *const)(v7 + 384));
          v34 = 1;
          std::__shared_ptr_access<AvatarTeamEntity,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<AvatarTeamEntity,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v7 + 224));
          Entity::getScene((const Entity *const)(v7 + 352));
          v35 = 1;
          if ( !std::operator!=<Scene,Scene>(
                  (const std::shared_ptr<Scene> *)(v7 + 352),
                  (const std::shared_ptr<Scene> *)(v7 + 384)) )
            v124 = 0;
        }
        if ( v35 )
          std::shared_ptr<Scene>::~shared_ptr((std::shared_ptr<Scene> *const)(v7 + 352));
        if ( v34 )
          std::shared_ptr<Scene>::~shared_ptr((std::shared_ptr<Scene> *const)(v7 + 384));
        if ( v124 && Scene::addAvatarTeamEntity(this, player) )
        {
          common::milog::MiLogStream::create(
            &v140,
            &common::milog::MiLogDefault::default_log_obj_,
            3u,
            "./src/scene/scene.cpp",
            "playerEnter",
            1496);
          v36 = common::milog::MiLogStream::operator<<<char [26],(char *[26])0>(
                  &v140,
                  (const char (*)[26])"addAvatarTeamEntity fails");
          operator<<(v36, player);
          common::milog::MiLogStream::~MiLogStream(&v140);
          v12 = -1;
        }
        else
        {
          std::vector<unsigned long>::vector((std::vector<long unsigned int> *const)(v7 + 416));
          __for_range = enter_scene_avatar_vec;
          __for_end_0._M_current = (unsigned __int64 *)std::vector<std::shared_ptr<Avatar>>::begin(enter_scene_avatar_vec)._M_current;
          __for_begin_0._M_current = (unsigned __int64 *)std::vector<std::shared_ptr<Avatar>>::end(__for_range)._M_current;
          while ( __gnu_cxx::operator!=<std::shared_ptr<Avatar> const*,std::vector<std::shared_ptr<Avatar>>>(
                    (const __gnu_cxx::__normal_iterator<const std::shared_ptr<Avatar>*,std::vector<std::shared_ptr<Avatar>> > *)&__for_end_0,
                    (const __gnu_cxx::__normal_iterator<const std::shared_ptr<Avatar>*,std::vector<std::shared_ptr<Avatar>> > *)&__for_begin_0) )
          {
            v37 = __gnu_cxx::__normal_iterator<std::shared_ptr<Avatar> const*,std::vector<std::shared_ptr<Avatar>>>::operator*((const __gnu_cxx::__normal_iterator<const std::shared_ptr<Avatar>*,std::vector<std::shared_ptr<Avatar>> > *const)&__for_end_0);
            std::shared_ptr<Avatar>::shared_ptr((std::shared_ptr<Avatar> *const)(v7 + 384), v37);
            if ( std::operator==<Avatar>((const std::shared_ptr<Avatar> *)(v7 + 384), 0LL) )
            {
              common::milog::MiLogStream::create(
                &v140,
                &common::milog::MiLogDefault::default_log_obj_,
                4u,
                "./src/scene/scene.cpp",
                "playerEnter",
                1506);
              v38 = common::milog::MiLogStream::operator<<<char [22],(char *[22])0>(
                      &v140,
                      (const char (*)[22])"avatar_ptr is nullptr");
              operator<<(v38, player);
              common::milog::MiLogStream::~MiLogStream(&v140);
            }
            else
            {
              v39 = std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v7 + 384));
              __for_end._M_current = (unsigned __int64 *)Avatar::getGuid(v39);
              std::vector<unsigned long>::emplace_back<unsigned long>(
                (std::vector<long unsigned int> *const)(v7 + 416),
                (unsigned __int64 *)&__for_end,
                (unsigned __int64 *)&__for_end);
            }
            std::shared_ptr<Avatar>::~shared_ptr((std::shared_ptr<Avatar> *const)(v7 + 384));
            __gnu_cxx::__normal_iterator<std::shared_ptr<Avatar> const*,std::vector<std::shared_ptr<Avatar>>>::operator++((__gnu_cxx::__normal_iterator<const std::shared_ptr<Avatar>*,std::vector<std::shared_ptr<Avatar>> > *const)&__for_end_0);
          }
          Player::getCurAvatar((Player *const)(v7 + 256));
          if ( std::operator!=<Avatar>((const std::shared_ptr<Avatar> *)(v7 + 256), 0LL) )
          {
            v40 = std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v7 + 256));
            if ( Entity::isOnScene((const Entity *const)v40) )
            {
              common::milog::MiLogStream::create(
                &v140,
                &common::milog::MiLogDefault::default_log_obj_,
                4u,
                "./src/scene/scene.cpp",
                "playerEnter",
                1516);
              v42 = common::milog::MiLogStream::operator<<<char [42],(char *[42])0>(
                      &v140,
                      (const char (*)[42])"[ENTER]last cur avatar is on scene!, uid:");
              common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                v42,
                (const unsigned int *)(v7 + 32));
              common::milog::MiLogStream::~MiLogStream(&v140);
            }
          }
          std::enable_shared_from_this<Scene>::shared_from_this((std::enable_shared_from_this<Scene> *const)(v7 + 288));
          Player::getSceneComp(player);
          PlayerSceneComp::getCurScene((const PlayerSceneComp *const)(v7 + 320));
          SceneComp = Player::getSceneComp(player);
          std::shared_ptr<Scene>::shared_ptr(
            (std::shared_ptr<Scene> *const)(v7 + 384),
            (const std::shared_ptr<Scene> *)(v7 + 288));
          PlayerSceneComp::setCurScene(SceneComp, (ScenePtr *)(v7 + 384));
          std::shared_ptr<Scene>::~shared_ptr((std::shared_ptr<Scene> *const)(v7 + 384));
          v44 = std::__shared_ptr_access<Player,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Player,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v7 + 160));
          AvatarComp = Player::getAvatarComp(v44);
          std::shared_ptr<Avatar>::shared_ptr((std::shared_ptr<Avatar> *const)(v7 + 384), p_appear_avatar_ptr);
          PlayerAvatarComp::setCurAvatar(AvatarComp, (AvatarPtr *)(v7 + 384));
          std::shared_ptr<Avatar>::~shared_ptr((std::shared_ptr<Avatar> *const)(v7 + 384));
          v46 = std::__shared_ptr_access<SceneTeam,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<SceneTeam,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v7 + 128));
          SceneTeam::getAvatarGuidVec((std::vector<long unsigned int> *)(v7 + 480), v46, *(_DWORD *)(v7 + 32));
          RefreshAbilityGuard::RefreshAbilityGuard((RefreshAbilityGuard *const)(v7 + 608));
          __for_range_0 = (std::vector<long unsigned int> *)(v7 + 416);
          __for_begin_0._M_current = std::vector<unsigned long>::begin((std::vector<long unsigned int> *const)(v7 + 416))._M_current;
          __for_end._M_current = std::vector<unsigned long>::end(__for_range_0)._M_current;
          while ( __gnu_cxx::operator!=<unsigned long *,std::vector<unsigned long>>(&__for_begin_0, &__for_end) )
          {
            v47 = (unsigned __int64)__gnu_cxx::__normal_iterator<unsigned long *,std::vector<unsigned long>>::operator*(&__for_begin_0);
            if ( *(_BYTE *)((v47 >> 3) + 0x7FFF8000) )
              v47 = __asan_report_load8();
            guid = *(_QWORD *)v47;
            v48 = std::__shared_ptr_access<Player,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Player,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v7 + 160));
            v49 = Player::getAvatarComp(v48);
            PlayerAvatarComp::findAvatar((const PlayerAvatarComp *const)(v7 + 352), (uint64_t)v49);
            std::shared_ptr<Creature>::shared_ptr<Avatar,void>(
              (std::shared_ptr<Creature> *const)(v7 + 384),
              (std::shared_ptr<Avatar> *)(v7 + 352));
            RefreshAbilityGuard::addCreature((RefreshAbilityGuard *const)(v7 + 608), (CreaturePtr *)(v7 + 384));
            std::shared_ptr<Creature>::~shared_ptr((std::shared_ptr<Creature> *const)(v7 + 384));
            std::shared_ptr<Avatar>::~shared_ptr((std::shared_ptr<Avatar> *const)(v7 + 352));
            __gnu_cxx::__normal_iterator<unsigned long *,std::vector<unsigned long>>::operator++(&__for_begin_0);
          }
          v50 = std::__shared_ptr_access<SceneTeam,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<SceneTeam,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v7 + 128));
          if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
            __asan_report_load8();
          v51 = (unsigned __int64)(this->_vptr_DescribalBase + 55);
          if ( *(_BYTE *)((v51 >> 3) + 0x7FFF8000) )
            v51 = __asan_report_load8();
          v52 = (*(unsigned int (__fastcall **)(Scene *const))v51)(this);
          v53 = std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false> *const)p_appear_avatar_ptr);
          v54 = Avatar::getGuid(v53);
          if ( SceneTeam::setPlayerAvatarTeamAndAddToScene(
                 v50,
                 *(_DWORD *)(v7 + 32),
                 (const std::vector<long unsigned int> *)(v7 + 416),
                 v54,
                 this,
                 v52,
                 0) )
          {
            common::milog::MiLogStream::create(
              &v140,
              &common::milog::MiLogDefault::default_log_obj_,
              4u,
              "./src/scene/scene.cpp",
              "playerEnter",
              1533);
            v55 = common::milog::MiLogStream::operator<<<char [46],(char *[46])0>(
                    &v140,
                    (const char (*)[46])"setPlayerAvatarTeamAndAddToScene failed, uid:");
            common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v55, (const unsigned int *)(v7 + 32));
            common::milog::MiLogStream::~MiLogStream(&v140);
            v12 = -1;
          }
          else
          {
            v56 = std::__shared_ptr_access<SceneTeam,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<SceneTeam,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v7 + 128));
            SceneTeam::getAvatarGuidVec((std::vector<long unsigned int> *)(v7 + 544), v56, *(_DWORD *)(v7 + 32));
            __for_range_1 = (std::vector<long unsigned int> *)(v7 + 480);
            __for_begin_1._M_current = std::vector<unsigned long>::begin((std::vector<long unsigned int> *const)(v7 + 480))._M_current;
            __for_end_0._M_current = std::vector<unsigned long>::end(__for_range_1)._M_current;
            while ( __gnu_cxx::operator!=<unsigned long *,std::vector<unsigned long>>(&__for_begin_1, &__for_end_0) )
            {
              v57 = (unsigned __int64)__gnu_cxx::__normal_iterator<unsigned long *,std::vector<unsigned long>>::operator*(&__for_begin_1);
              if ( *(_BYTE *)((v57 >> 3) + 0x7FFF8000) )
                v57 = __asan_report_load8();
              *(_QWORD *)(v7 + 64) = *(_QWORD *)v57;
              __for_end._M_current = std::vector<unsigned long>::end((std::vector<long unsigned int> *const)(v7 + 544))._M_current;
              M_current = std::vector<unsigned long>::end((std::vector<long unsigned int> *const)(v7 + 544))._M_current;
              v59._M_current = std::vector<unsigned long>::begin((std::vector<long unsigned int> *const)(v7 + 544))._M_current;
              __for_begin_0._M_current = std::find<__gnu_cxx::__normal_iterator<unsigned long *,std::vector<unsigned long>>,unsigned long>(
                                           v59,
                                           (__gnu_cxx::__normal_iterator<long unsigned int*,std::vector<long unsigned int> >)M_current,
                                           (const unsigned __int64 *)(v7 + 64))._M_current;
              if ( !__gnu_cxx::operator!=<unsigned long *,std::vector<unsigned long>>(&__for_begin_0, &__for_end) )
              {
                v60 = std::__shared_ptr_access<Player,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Player,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v7 + 160));
                v61 = Player::getAvatarComp(v60);
                PlayerAvatarComp::findAvatar((const PlayerAvatarComp *const)(v7 + 352), (uint64_t)v61);
                v62 = 0;
                v63 = 0;
                if ( std::operator!=<Avatar>((const std::shared_ptr<Avatar> *)(v7 + 352), 0LL) )
                {
                  std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v7 + 352));
                  Entity::getScene((const Entity *const)(v7 + 384));
                  v62 = 1;
                  if ( std::operator==<Scene,Scene>(
                         (const std::shared_ptr<Scene> *)(v7 + 384),
                         (const std::shared_ptr<Scene> *)(v7 + 288)) )
                  {
                    v63 = 1;
                  }
                }
                if ( v62 )
                  std::shared_ptr<Scene>::~shared_ptr((std::shared_ptr<Scene> *const)(v7 + 384));
                if ( v63 )
                {
                  std::__shared_ptr_access<Player,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Player,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v7 + 160));
                  Player::getCurAvatar((Player *const)(v7 + 384));
                  v64 = std::operator==<Avatar,Avatar>(
                          (const std::shared_ptr<Avatar> *)(v7 + 352),
                          (const std::shared_ptr<Avatar> *)(v7 + 384));
                  std::shared_ptr<Avatar>::~shared_ptr((std::shared_ptr<Avatar> *const)(v7 + 384));
                  if ( v64 )
                  {
                    common::milog::MiLogStream::create(
                      &v140,
                      &common::milog::MiLogDefault::default_log_obj_,
                      4u,
                      "./src/scene/scene.cpp",
                      "playerEnter",
                      1551);
                    v65 = common::milog::MiLogStream::operator<<<char [62],(char *[62])0>(
                            &v140,
                            (const char (*)[62])off_258DB7E0);
                    v66 = std::__shared_ptr_access<Player,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Player,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v7 + 160));
                    val = Player::getUid(v66);
                    v67 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v65, &val);
                    v68 = common::milog::MiLogStream::operator<<<char [9],(char *[9])0>(
                            v67,
                            (const char (*)[9])" avatar:");
                    v69 = std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::operator*((const std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v7 + 352));
                    common::milog::MiLogStream::operator<<<Avatar,(Avatar*)0>(v68, v69);
                    common::milog::MiLogStream::~MiLogStream(&v140);
                  }
                  else if ( std::operator!=<Scene>((const std::shared_ptr<Scene> *)(v7 + 288), 0LL) )
                  {
                    v70 = std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v7 + 288));
                    v71 = std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::operator*((const std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v7 + 352));
                    Scene::delAvatarAndWeaponEntity(v70, v71);
                  }
                }
                std::shared_ptr<Avatar>::~shared_ptr((std::shared_ptr<Avatar> *const)(v7 + 352));
              }
              __gnu_cxx::__normal_iterator<unsigned long *,std::vector<unsigned long>>::operator++(&__for_begin_1);
            }
            common::milog::MiLogStream::create(
              &v140,
              &common::milog::MiLogDefault::default_log_obj_,
              1u,
              "./src/scene/scene.cpp",
              "playerEnter",
              1560);
            v72 = common::milog::MiLogStream::operator<<<char [29],(char *[29])0>(
                    &v140,
                    (const char (*)[29])"[EnterScene] set_avatar_vec:");
            v73 = common::milog::MiLogStream::operator<<<unsigned long>(
                    v72,
                    (const std::vector<long unsigned int> *)(v7 + 416));
            v74 = common::milog::MiLogStream::operator<<<char [12],(char *[12])0>(
                    v73,
                    (const char (*)[12])", old_team:");
            v75 = common::milog::MiLogStream::operator<<<unsigned long>(
                    v74,
                    (const std::vector<long unsigned int> *)(v7 + 480));
            v76 = common::milog::MiLogStream::operator<<<char [12],(char *[12])0>(
                    v75,
                    (const char (*)[12])", cur_team:");
            v77 = common::milog::MiLogStream::operator<<<unsigned long>(
                    v76,
                    (const std::vector<long unsigned int> *)(v7 + 544));
            v78 = common::milog::MiLogStream::operator<<<char [7],(char *[7])0>(v77, (const char (*)[7])", uid:");
            common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v78, (const unsigned int *)(v7 + 32));
            common::milog::MiLogStream::~MiLogStream(&v140);
            OwnerUid = Scene::getOwnerUid(this);
            if ( OwnerUid == Player::getUid(player) )
            {
              scene_type = Scene::getSceneType(this);
              if ( SceneExcelConfigMgr::isPlayerScene(scene_type) )
              {
                v80 = Player::getSceneComp(player);
                SceneId = Scene::getSceneId(this);
                PlayerSceneComp::setMyCurPlayerSceneId(v80, SceneId);
                v82 = Player::getSceneComp(player);
                v83 = Scene::getSceneId(this);
                PlayerSceneComp::setMyCurSceneId(v82, v83);
              }
              else if ( SceneExcelConfigMgr::isHomeScene(scene_type) )
              {
                v84 = Player::getSceneComp(player);
                v85 = Scene::getSceneId(this);
                PlayerSceneComp::setMyCurHomeSceneId(v84, v85);
                v86 = Player::getSceneComp(player);
                v87 = Scene::getSceneId(this);
                PlayerSceneComp::setMyCurSceneId(v86, v87);
              }
            }
            if ( std::operator!=<Scene,Scene>(
                   (const std::shared_ptr<Scene> *)(v7 + 288),
                   (const std::shared_ptr<Scene> *)(v7 + 320))
              || is_relogin
              || (v88 = Player::getSceneComp(player), PlayerSceneComp::getDestEnterType(v88) == ENTER_GOTO_RECREATE) )
            {
              Scene::notifySceneAndHostData(this, *(_DWORD *)(v7 + 32));
              Player::notifyPlayerEnterSceneInfo(player);
              Player::setIsDataResVersionChanged(player, 0);
            }
            else if ( std::operator==<Scene,Scene>(
                        (const std::shared_ptr<Scene> *)(v7 + 288),
                        (const std::shared_ptr<Scene> *)(v7 + 320)) )
            {
              v90 = std::__shared_ptr_access<Player,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Player,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v7 + 160));
              v91 = Player::getAvatarComp(v90);
              std::function<ForeachPolicy ()(Avatar &)>::function<Scene::playerEnter(Player &,Vector3 const&,Vector3 const&,bool,std::vector<std::shared_ptr<Avatar>> const&,std::shared_ptr<Avatar>)::{lambda(Avatar &)#1},void,void>(
                (std::function<ForeachPolicy(Avatar&)> *const)&v140,
                (Scene::playerEnter::<lambda(Avatar&)>)(v7 + 480));
              PlayerAvatarComp::foreachMyAvatarInSceneTeam(v91, (std::function<ForeachPolicy(Avatar&)> *)&v140);
              std::function<ForeachPolicy ()(Avatar &)>::~function((std::function<ForeachPolicy(Avatar&)> *const)&v140);
            }
            MiscComp = Scene::getMiscComp(this);
            SceneMiscComp::onPlayerEnter(MiscComp, *(_DWORD *)(v7 + 32));
            ScenePlayerLocation::ScenePlayerLocation((ScenePlayerLocation *const)(v7 + 688));
            if ( ((unsigned __int8)pos & 7) >= *(_BYTE *)(((unsigned __int64)pos >> 3) + 0x7FFF8000)
              && *(_BYTE *)(((unsigned __int64)pos >> 3) + 0x7FFF8000) != 0
              || *(_BYTE *)((((unsigned __int64)&pos->z + 3) >> 3) + 0x7FFF8000) != 0
              && (((unsigned __int8)pos + 11) & 7) >= *(_BYTE *)((((unsigned __int64)&pos->z + 3) >> 3) + 0x7FFF8000) )
            {
              __asan_report_load_n(pos, 12LL);
            }
            *(_QWORD *)(v7 + 688) = *(_QWORD *)&pos->x;
            *(float *)(v7 + 696) = pos->z;
            if ( ((unsigned __int8)rot & 7) >= *(_BYTE *)(((unsigned __int64)rot >> 3) + 0x7FFF8000)
              && *(_BYTE *)(((unsigned __int64)rot >> 3) + 0x7FFF8000) != 0
              || *(_BYTE *)((((unsigned __int64)&rot->z + 3) >> 3) + 0x7FFF8000) != 0
              && (((unsigned __int8)rot + 11) & 7) >= *(_BYTE *)((((unsigned __int64)&rot->z + 3) >> 3) + 0x7FFF8000) )
            {
              __asan_report_load_n(rot, 12LL);
            }
            *(_QWORD *)(v7 + 700) = *(_QWORD *)&rot->x;
            *(float *)(v7 + 708) = rot->z;
            *(_QWORD *)(v7 + 712) = *(_QWORD *)&pos->x;
            *(float *)(v7 + 720) = pos->z;
            *(_QWORD *)(v7 + 724) = *(_QWORD *)&rot->x;
            *(float *)(v7 + 732) = rot->z;
            if ( Scene::setPlayerLocation(this, *(_DWORD *)(v7 + 32), (const ScenePlayerLocation *)(v7 + 688)) )
            {
              common::milog::MiLogStream::create(
                &v140,
                &common::milog::MiLogDefault::default_log_obj_,
                3u,
                "./src/scene/scene.cpp",
                "playerEnter",
                1606);
              v93 = common::milog::MiLogStream::operator<<<char [33],(char *[33])0>(
                      &v140,
                      (const char (*)[33])off_258DB940);
              common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                v93,
                (const unsigned int *)(v7 + 32));
              common::milog::MiLogStream::~MiLogStream(&v140);
              v12 = -1;
            }
            else
            {
              Player::getCurAvatar((Player *const)(v7 + 352));
              if ( std::operator!=<Avatar>(0LL, (const std::shared_ptr<Avatar> *)(v7 + 352)) )
              {
                v94 = (unsigned __int64)std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v7 + 352));
                if ( *(_BYTE *)((v94 >> 3) + 0x7FFF8000) )
                  v94 = __asan_report_load8();
                v95 = *(_QWORD *)v94 + 80LL;
                if ( *(_BYTE *)((v95 >> 3) + 0x7FFF8000) )
                  v94 = __asan_report_load8();
                (*(void (__fastcall **)(unsigned __int64, const Vector3 *))v95)(v94, pos);
                v96 = (Entity *)std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v7 + 352));
                Entity::setRotation(v96, rot);
                v97 = std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v7 + 352));
                Avatar::setLastValidPos(v97, pos);
                v98 = std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v7 + 352));
                Avatar::setLastValidRot(v98, rot);
              }
              if ( !Scene::getIsStarted(this) )
              {
                common::milog::MiLogStream::create(
                  &v140,
                  &common::milog::MiLogDefault::default_log_obj_,
                  3u,
                  "./src/scene/scene.cpp",
                  "playerEnter",
                  1622);
                v99 = common::milog::MiLogStream::operator<<<char [28],(char *[28])0>(
                        &v140,
                        (const char (*)[28])"scene is not started, uid: ");
                common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                  v99,
                  (const unsigned int *)(v7 + 32));
                common::milog::MiLogStream::~MiLogStream(&v140);
                v12 = -1;
              }
              else
              {
                Player::getSceneComp(player);
                PlayerSceneComp::getCurScene((const PlayerSceneComp *const)(v7 + 384));
                v100 = std::operator!=<Scene,Scene>(
                         (const std::shared_ptr<Scene> *)(v7 + 384),
                         (const std::shared_ptr<Scene> *)(v7 + 288));
                std::shared_ptr<Scene>::~shared_ptr((std::shared_ptr<Scene> *const)(v7 + 384));
                if ( v100 )
                {
                  common::milog::MiLogStream::create(
                    &v140,
                    &common::milog::MiLogDefault::default_log_obj_,
                    3u,
                    "./src/scene/scene.cpp",
                    "playerEnter",
                    1628);
                  v101 = common::milog::MiLogStream::operator<<<char [25],(char *[25])0>(
                           &v140,
                           (const char (*)[25])off_258DB9E0);
                  common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                    v101,
                    (const unsigned int *)(v7 + 32));
                  common::milog::MiLogStream::~MiLogStream(&v140);
                  v12 = -1;
                }
                else
                {
                  v102 = Player::getAvatarComp(player);
                  PlayerAvatarComp::resetMoveSpeedCheck(v102);
                  v103 = Player::getAvatarComp(player);
                  PlayerAvatarComp::resetSceneTimeMoveSpeedCheck(v103);
                  GalleryComp = Scene::getGalleryComp(this);
                  SceneGalleryComp::onPlayerEnter(GalleryComp, player);
                  MultistagePlayComp = Scene::getMultistagePlayComp(this);
                  SceneMultistagePlayComp::onPlayerEnter(MultistagePlayComp, player);
                  v106 = Player::getSceneComp(player);
                  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
                    __asan_report_load8();
                  v107 = (unsigned __int64)(this->_vptr_DescribalBase + 47);
                  if ( *(_BYTE *)((v107 >> 3) + 0x7FFF8000) )
                    v107 = __asan_report_load8();
                  (*(void (__fastcall **)(unsigned __int64, Scene *const, const Vector3 *, _QWORD))v107)(
                    v7 + 384,
                    this,
                    pos,
                    0LL);
                  PlayerSceneComp::updateCurrentWeatherArea(v106, (WeatherAreaPtr *)(v7 + 384));
                  std::shared_ptr<WeatherArea>::~shared_ptr((std::shared_ptr<WeatherArea> *const)(v7 + 384));
                  Scene::notifyAllPlayerInfo(this);
                  if ( std::operator!=<World>((const std::shared_ptr<World> *)(v7 + 96), 0LL) )
                  {
                    v108 = (unsigned __int64)std::__shared_ptr_access<World,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<World,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v7 + 96));
                    if ( *(_BYTE *)((v108 >> 3) + 0x7FFF8000) )
                      v108 = __asan_report_load8();
                    v109 = *(_QWORD *)v108 + 152LL;
                    if ( *(_BYTE *)((v109 >> 3) + 0x7FFF8000) )
                      v108 = __asan_report_load8();
                    (*(void (__fastcall **)(unsigned __int64, Player *, Scene *const))v109)(v108, player, this);
                  }
                  v110 = std::__shared_ptr_access<SceneTeam,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<SceneTeam,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v7 + 128));
                  SceneTeam::notifySceneTeamUpdate(v110);
                  Scene::notifyAllTeamEntity(this);
                  Scene::notifyAllPlayTeamEntity(this);
                  if ( !std::operator!=<UnixTimer>(&this->timer_ptr_, 0LL) )
                    goto LABEL_134;
                  v111 = std::__shared_ptr_access<UnixTimer,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<UnixTimer,(__gnu_cxx::_Lock_policy)2,false,false> *const)&this->timer_ptr_);
                  if ( common::tools::MiTimer::isActive(v111) )
                    goto LABEL_131;
                  v112 = std::__shared_ptr_access<UnixTimer,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<UnixTimer,(__gnu_cxx::_Lock_policy)2,false,false> *const)&this->timer_ptr_);
                  if ( *(_BYTE *)(((unsigned __int64)v112 >> 3) + 0x7FFF8000) )
                    __asan_report_load8();
                  v113 = (unsigned __int64)(v112->_vptr_MiTimer + 2);
                  if ( *(_BYTE *)((v113 >> 3) + 0x7FFF8000) )
                    v113 = __asan_report_load8();
                  v114 = *(unsigned int (__fastcall **)(std::__shared_ptr_access<UnixTimer,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *, __int64, __int64, const char *, const char *, __int64, __int64, _QWORD))v113;
                  if ( *(_BYTE *)(((unsigned __int64)&this->scene_id_ >> 3) + 0x7FFF8000) != 0
                    && *(_BYTE *)(((unsigned __int64)&this->scene_id_ >> 3) + 0x7FFF8000) <= 3 )
                  {
                    __asan_report_load4(&this->scene_id_);
                  }
                  scene_id = this->scene_id_;
                  LODWORD(v115) = Scene::getOwnerUid(this);
                  if ( v114(v112, 1LL, 1LL, "./src/scene/scene.cpp", "playerEnter", 1654LL, v115, scene_id) )
                    v116 = 1;
                  else
LABEL_131:
                    v116 = 0;
                  if ( v116 )
                  {
                    common::milog::MiLogStream::create(
                      &v140,
                      &common::milog::MiLogDefault::default_log_obj_,
                      4u,
                      "./src/scene/scene.cpp",
                      "playerEnter",
                      1656);
                    common::milog::MiLogStream::operator<<<char [15],(char *[15])0>(
                      &v140,
                      (const char (*)[15])"addTimer fails");
                    common::milog::MiLogStream::~MiLogStream(&v140);
                    v12 = -1;
                  }
                  else
                  {
LABEL_134:
                    common::milog::MiLogStream::create(
                      &v140,
                      &common::milog::MiLogDefault::default_log_obj_,
                      2u,
                      "./src/scene/scene.cpp",
                      "playerEnter",
                      1661);
                    v117 = common::milog::MiLogStream::operator<<<char [43],(char *[43])0>(
                             &v140,
                             (const char (*)[43])"[EnterScene] player Enter scene, scene_id:");
                    v118 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                             v117,
                             &this->scene_id_);
                    v119 = common::milog::MiLogStream::operator<<<char [11],(char *[11])0>(
                             v118,
                             (const char (*)[11])", peer_id:");
                    v120 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                             v119,
                             (const unsigned int *)(v7 + 48));
                    v121 = common::milog::MiLogStream::operator<<<char [7],(char *[7])0>(
                             v120,
                             (const char (*)[7])", uid:");
                    common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                      v121,
                      (const unsigned int *)(v7 + 32));
                    common::milog::MiLogStream::~MiLogStream(&v140);
                    v12 = 0;
                  }
                }
              }
              std::shared_ptr<Avatar>::~shared_ptr((std::shared_ptr<Avatar> *const)(v7 + 352));
            }
            std::vector<unsigned long>::~vector((std::vector<long unsigned int> *const)(v7 + 544));
          }
          RefreshAbilityGuard::~RefreshAbilityGuard((RefreshAbilityGuard *const)(v7 + 608));
          std::vector<unsigned long>::~vector((std::vector<long unsigned int> *const)(v7 + 480));
          std::shared_ptr<Scene>::~shared_ptr((std::shared_ptr<Scene> *const)(v7 + 320));
          std::shared_ptr<Scene>::~shared_ptr((std::shared_ptr<Scene> *const)(v7 + 288));
          std::shared_ptr<Avatar>::~shared_ptr((std::shared_ptr<Avatar> *const)(v7 + 256));
          std::vector<unsigned long>::~vector((std::vector<long unsigned int> *const)(v7 + 416));
        }
        std::shared_ptr<AvatarTeamEntity>::~shared_ptr((std::shared_ptr<AvatarTeamEntity> *const)(v7 + 224));
        std::shared_ptr<Player>::~shared_ptr((std::shared_ptr<Player> *const)(v7 + 192));
        std::shared_ptr<Player>::~shared_ptr((std::shared_ptr<Player> *const)(v7 + 160));
      }
      std::shared_ptr<SceneTeam>::~shared_ptr((std::shared_ptr<SceneTeam> *const)(v7 + 128));
    }
    else
    {
      common::milog::MiLogStream::create(
        &v140,
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/scene/scene.cpp",
        "playerEnter",
        1468);
      v26 = common::milog::MiLogStream::operator<<<char [38],(char *[38])0>(
              &v140,
              (const char (*)[38])"peer_id not exist in scene, scene_id:");
      v27 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v26, &this->scene_id_);
      v28 = common::milog::MiLogStream::operator<<<char [7],(char *[7])0>(v27, (const char (*)[7])", uid:");
      common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v28, (const unsigned int *)(v7 + 32));
      common::milog::MiLogStream::~MiLogStream(&v140);
      v12 = -1;
    }
  }
LABEL_140:
  std::shared_ptr<World>::~shared_ptr((std::shared_ptr<World> *const)(v7 + 96));
  if ( v141 == (char *)v7 )
  {
    *(_QWORD *)((v7 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v7 >> 3) + 0x7FFF8044) = 0LL;
    memset(
      (void *)((unsigned __int64)(v9 + 536862722) & 0xFFFFFFFFFFFFFFF8LL),
      0,
      8LL * ((((_DWORD)v9 + 2147450880 - (((_DWORD)v9 + 2147450888) & 0xFFFFFFF8) + 76) & 0xFFFFFFF8) >> 3));
    *(_QWORD *)((v7 >> 3) + 0x7FFF8050) = 0LL;
    *(_DWORD *)((v7 >> 3) + 0x7FFF805C) = 0;
  }
  else
  {
    *(_QWORD *)v7 = 1172321806LL;
    *(_QWORD *)((v7 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v7 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v7 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v7 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v7 >> 3) + 0x7FFF8020) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v7 >> 3) + 0x7FFF8028) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v7 >> 3) + 0x7FFF8030) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v7 >> 3) + 0x7FFF8038) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v7 >> 3) + 0x7FFF8040) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v7 >> 3) + 0x7FFF8048) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v7 >> 3) + 0x7FFF8050) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v7 >> 3) + 0x7FFF8058) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return v12;
};

// Line 1587: range 000000001597D322-000000001597D39A
ForeachPolicy __cdecl Scene::playerEnter(Player &,Vector3 const&,Vector3 const&,bool,std::vector<std::shared_ptr<Avatar>> const&,std::shared_ptr<Avatar>)::{lambda(Avatar&)#1}::operator()(
        const Scene::playerEnter::<lambda(Avatar&)> *const __closure,
        Avatar *avatar)
{
  SkillComp *SkillComp; // rax
  unsigned __int64 value; // [rsp+18h] [rbp-8h] BYREF

  value = Avatar::getGuid(avatar);
  if ( *(_BYTE *)(((unsigned __int64)__closure >> 3) + 0x7FFF8000) )
    __asan_report_load8();
  if ( !common::tools::MiscUtils::isContains<unsigned long>(__closure->__old_guid_vec, &value) )
  {
    SkillComp = Avatar::getSkillComp(avatar);
    SkillComp::notifySkillInfo(SkillComp);
  }
  return 0;
};

// Line 1667: range 000000001597F744-0000000015980FCB
void __fastcall Scene::playerLeave(Scene *const this, uint32_t uid)
{
  unsigned __int64 v2; // r13
  __int64 v3; // rax
  _DWORD *v4; // r12
  common::milog::MiLogStream *v5; // rax
  common::milog::MiLogStream *v6; // rax
  common::milog::MiLogStream *v7; // r14
  common::milog::MiLogStream *v8; // rax
  uint32_t OwnerUid; // r14d
  std::__shared_ptr_access<World,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v10; // rax
  common::milog::MiLogStream *v11; // r14
  common::milog::MiLogStream *v12; // rax
  common::milog::MiLogStream *v13; // r14
  std::__shared_ptr_access<World,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v14; // rax
  common::milog::MiLogStream *v15; // rax
  common::milog::MiLogStream *v16; // r14
  common::milog::MiLogStream *v17; // rax
  std::__detail::_Node_iterator<std::pair<unsigned int const,std::shared_ptr<WindSeedSpawner> >,false,false>::pointer v18; // rax
  std::__detail::_Node_iterator<std::pair<unsigned int const,std::shared_ptr<WindSeedSpawner> >,false,false>::pointer v20; // rax
  WindSeedSpawner *v21; // r14
  uint32_t v22; // eax
  PlayerAvatarComp *AvatarComp; // rax
  const std::weak_ptr<Avatar> *v24; // rax
  Avatar *v25; // rax
  common::milog::MiLogStream *v26; // r14
  std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v27; // rax
  common::milog::MiLogStream *v28; // rax
  common::milog::MiLogStream *v29; // rax
  bool v30; // r14
  std::__shared_ptr_access<Player,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v31; // rax
  int v33; // r14d
  PlayerEventComp *EventComp; // r14
  SceneMiscComp *MiscComp; // rax
  SceneMultistagePlayComp *MultistagePlayComp; // rax
  SceneGalleryComp *GalleryComp; // rax
  SceneTransferGuardComp *TransferGuardComp; // rax
  unsigned __int64 BlockGroupComp; // rax
  unsigned __int64 v40; // rdx
  bool v41; // r14
  common::milog::MiLogStream *v42; // r14
  common::milog::MiLogStream *v43; // rax
  common::milog::MiLogStream *v44; // r14
  PlayerSceneComp *SceneComp; // rax
  PlayerSceneComp *v46; // r14
  PlayerAvatarComp *v47; // rax
  const std::weak_ptr<Avatar> *v48; // rax
  Avatar *v49; // rax
  common::milog::MiLogStream *v50; // r14
  std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v51; // rax
  common::milog::MiLogStream *v52; // rax
  common::milog::MiLogStream *v53; // rax
  common::milog::MiLogStream *v54; // rax
  common::milog::MiLogStream *v55; // rax
  common::milog::MiLogStream *v56; // rax
  unsigned __int64 v57; // rax
  unsigned __int64 v58; // rdx
  char v59; // r14
  std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v60; // rax
  unsigned __int64 v61; // rax
  unsigned __int64 v62; // rdx
  char v63; // r15
  PlayerSceneComp *v64; // rax
  unsigned __int64 v66; // rax
  unsigned __int64 v67; // rdx
  void (__fastcall *v68)(unsigned __int64, Player *, _QWORD, _QWORD); // r8
  int v69; // r14d
  unsigned __int64 v70; // rax
  common::milog::MiLogStream *v71; // r14
  SceneTeam *v72; // rax
  SceneTeam *v73; // rax
  unsigned int SceneId; // [rsp+2Ch] [rbp-244h] BYREF
  unsigned int val; // [rsp+30h] [rbp-240h] BYREF
  proto::LeaveWorldReason leave_reason; // [rsp+34h] [rbp-23Ch]
  std::vector<std::weak_ptr<Avatar>>::iterator __for_begin; // [rsp+38h] [rbp-238h] BYREF
  std::vector<std::weak_ptr<Avatar>>::iterator __for_end; // [rsp+40h] [rbp-230h] BYREF
  Player *player; // [rsp+48h] [rbp-228h]
  std::vector<std::weak_ptr<Avatar>> *__for_range; // [rsp+50h] [rbp-220h]
  std::map<unsigned int,std::weak_ptr<Player>> *__for_range_0; // [rsp+58h] [rbp-218h]
  std::pair<unsigned int const,std::weak_ptr<Player> > *p; // [rsp+60h] [rbp-210h]
  std::vector<std::weak_ptr<Avatar>> *__for_range_1; // [rsp+68h] [rbp-208h]
  std::shared_ptr<Player> __b; // [rsp+70h] [rbp-200h] BYREF
  std::vector<std::weak_ptr<Avatar>> __x; // [rsp+80h] [rbp-1F0h] BYREF
  common::milog::MiLogStream v86; // [rsp+A0h] [rbp-1D0h] BYREF
  char v87[432]; // [rsp+C0h] [rbp-1B0h] BYREF

  v2 = (unsigned __int64)v87;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_3(384LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "11 32 4 12 peer_id:1719 48 4 8 uid:1666 64 8 17 spawner_iter:1699 96 16 15 player_ptr:1668 128 1"
                        "6 14 world_ptr:1676 160 16 20 host_player_ptr:1730 192 16 14 event_ptr:1753 224 16 19 this_scene"
                        "_ptr:1766 256 16 19 dest_scene_ptr:1804 288 16 19 scene_team_ptr:1821 320 24 15 avatar_vec:1705";
  *(_QWORD *)(v2 + 16) = Scene::playerLeave;
  v4 = (_DWORD *)(v2 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = -234556924;
  v4[536862722] = -218959360;
  v4[536862723] = -219021312;
  v4[536862724] = -219021312;
  v4[536862725] = -219021312;
  v4[536862726] = -219021312;
  v4[536862727] = -219021312;
  v4[536862728] = -219021312;
  v4[536862729] = -219021312;
  v4[536862730] = -218103808;
  v4[536862731] = -202116109;
  *(_DWORD *)(v2 + 48) = uid;
  Scene::findPlayer((const Scene *const)(v2 + 96), (uint32_t)this);
  if ( std::operator==<Player>((const std::shared_ptr<Player> *)(v2 + 96), 0LL) )
  {
    common::milog::MiLogStream::create(
      &v86,
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/scene/scene.cpp",
      "playerLeave",
      1671);
    v5 = common::milog::MiLogStream::operator<<<char [24],(char *[24])0>(
           &v86,
           (const char (*)[24])"findPlayer failed, uid:");
    v6 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v5, (const unsigned int *)(v2 + 48));
    v7 = common::milog::MiLogStream::operator<<<char [11],(char *[11])0>(v6, (const char (*)[11])" scene_id:");
    val = Scene::getSceneId(this);
    common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v7, &val);
    common::milog::MiLogStream::~MiLogStream(&v86);
    goto LABEL_101;
  }
  player = std::__shared_ptr_access<Player,(__gnu_cxx::_Lock_policy)2,false,false>::operator*((const std::__shared_ptr_access<Player,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 96));
  Player::getSceneComp(player);
  PlayerSceneComp::getCurWorld((const PlayerSceneComp *const)(v2 + 128));
  if ( Scene::getSceneType(this) == SCENE_DUNGEON )
    goto LABEL_11;
  if ( !std::operator==<World>((const std::shared_ptr<World> *)(v2 + 128), 0LL) )
  {
    OwnerUid = Scene::getOwnerUid(this);
    v10 = std::__shared_ptr_access<World,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<World,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 128));
    if ( OwnerUid != World::getOwnerUid(v10) )
    {
      common::milog::MiLogStream::create(
        &v86,
        &common::milog::MiLogDefault::default_log_obj_,
        4u,
        "./src/scene/scene.cpp",
        "playerLeave",
        1688);
      v11 = common::milog::MiLogStream::operator<<<char [6],(char *[6])0>(&v86, (const char (*)[6])"uid: ");
      *(_DWORD *)(v2 + 32) = Player::getUid(player);
      v12 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v11, (const unsigned int *)(v2 + 32));
      v13 = common::milog::MiLogStream::operator<<<char [15],(char *[15])0>(v12, (const char (*)[15])" world owner: ");
      v14 = std::__shared_ptr_access<World,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<World,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 128));
      SceneId = World::getOwnerUid(v14);
      v15 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v13, &SceneId);
      v16 = common::milog::MiLogStream::operator<<<char [15],(char *[15])0>(v15, (const char (*)[15])" scene owner: ");
      val = Scene::getOwnerUid(this);
      common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v16, &val);
      common::milog::MiLogStream::~MiLogStream(&v86);
      goto LABEL_100;
    }
LABEL_11:
    if ( Scene::delAvatarTeamEntity(this, player) )
    {
      common::milog::MiLogStream::create(
        &v86,
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/scene/scene.cpp",
        "playerLeave",
        1696);
      v17 = common::milog::MiLogStream::operator<<<char [26],(char *[26])0>(
              &v86,
              (const char (*)[26])"delAvatarTeamEntity fails");
      operator<<(v17, player);
      common::milog::MiLogStream::~MiLogStream(&v86);
    }
    val = Player::getUid(player);
    *(std::unordered_map<unsigned int,std::shared_ptr<WindSeedSpawner>>::iterator *)(v2 + 64) = std::unordered_map<unsigned int,std::shared_ptr<WindSeedSpawner>>::find(
                                                                                                  &this->wind_seed_spawner_map_,
                                                                                                  &val);
    __for_end._M_current = (std::weak_ptr<Avatar> *)std::unordered_map<unsigned int,std::shared_ptr<WindSeedSpawner>>::end(&this->wind_seed_spawner_map_)._M_cur;
    if ( std::__detail::operator!=<std::pair<unsigned int const,std::shared_ptr<WindSeedSpawner>>,false>(
           (const std::__detail::_Node_iterator_base<std::pair<unsigned int const,std::shared_ptr<WindSeedSpawner> >,false> *)(v2 + 64),
           (const std::__detail::_Node_iterator_base<std::pair<unsigned int const,std::shared_ptr<WindSeedSpawner> >,false> *)&__for_end) )
    {
      v18 = std::__detail::_Node_iterator<std::pair<unsigned int const,std::shared_ptr<WindSeedSpawner>>,false,false>::operator->((const std::__detail::_Node_iterator<std::pair<unsigned int const,std::shared_ptr<WindSeedSpawner> >,false,false> *const)(v2 + 64));
      if ( std::operator!=<WindSeedSpawner>(&v18->second, 0LL) )
      {
        v20 = std::__detail::_Node_iterator<std::pair<unsigned int const,std::shared_ptr<WindSeedSpawner>>,false,false>::operator->((const std::__detail::_Node_iterator<std::pair<unsigned int const,std::shared_ptr<WindSeedSpawner> >,false,false> *const)(v2 + 64));
        v21 = std::__shared_ptr_access<WindSeedSpawner,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<WindSeedSpawner,(__gnu_cxx::_Lock_policy)2,false,false> *const)&v20->second);
        v22 = Player::getUid(player);
        WindSeedSpawner::delPlayer(v21, v22);
        val = Player::getUid(player);
        std::unordered_map<unsigned int,std::shared_ptr<WindSeedSpawner>>::erase(&this->wind_seed_spawner_map_, &val);
      }
    }
    AvatarComp = Player::getAvatarComp(player);
    PlayerAvatarComp::getAllAvatarVec((std::vector<std::weak_ptr<Avatar>> *)(v2 + 320), AvatarComp);
    __for_range = (std::vector<std::weak_ptr<Avatar>> *)(v2 + 320);
    __for_begin._M_current = std::vector<std::weak_ptr<Avatar>>::begin((std::vector<std::weak_ptr<Avatar>> *const)(v2 + 320))._M_current;
    __for_end._M_current = std::vector<std::weak_ptr<Avatar>>::end(__for_range)._M_current;
    while ( __gnu_cxx::operator!=<std::weak_ptr<Avatar> *,std::vector<std::weak_ptr<Avatar>>>(&__for_begin, &__for_end) )
    {
      v24 = __gnu_cxx::__normal_iterator<std::weak_ptr<Avatar> *,std::vector<std::weak_ptr<Avatar>>>::operator*(&__for_begin);
      std::weak_ptr<Avatar>::weak_ptr((std::weak_ptr<Avatar> *const)(v2 + 256), v24);
      std::weak_ptr<Avatar>::lock((const std::weak_ptr<Avatar> *const)(v2 + 288));
      if ( !std::operator==<Avatar>(0LL, (const std::shared_ptr<Avatar> *)(v2 + 288)) )
      {
        v25 = std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::operator*((const std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 288));
        if ( Scene::delAvatarAndWeaponEntity(this, v25) )
        {
          common::milog::MiLogStream::create(
            &v86,
            &common::milog::MiLogDefault::default_log_obj_,
            3u,
            "./src/scene/scene.cpp",
            "playerLeave",
            1715);
          v26 = common::milog::MiLogStream::operator<<<char [31],(char *[31])0>(
                  &v86,
                  (const char (*)[31])"delAvatarAndWeaponEntity fails");
          v27 = std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::operator*((const std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 288));
          common::milog::MiLogStream::operator<<<Avatar,(Avatar*)0>(v26, v27);
          common::milog::MiLogStream::~MiLogStream(&v86);
        }
      }
      std::shared_ptr<Avatar>::~shared_ptr((std::shared_ptr<Avatar> *const)(v2 + 288));
      std::weak_ptr<Avatar>::~weak_ptr((std::weak_ptr<Avatar> *const)(v2 + 256));
      __gnu_cxx::__normal_iterator<std::weak_ptr<Avatar> *,std::vector<std::weak_ptr<Avatar>>>::operator++(&__for_begin);
    }
    *(_DWORD *)(v2 + 32) = Scene::getPeerId(this, *(_DWORD *)(v2 + 48));
    if ( !std::map<unsigned int,ScenePlayerPeerInfo>::erase(
            &this->peer_map_,
            (const std::map<unsigned int,ScenePlayerPeerInfo>::key_type *)(v2 + 32)) )
    {
      common::milog::MiLogStream::create(
        &v86,
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/scene/scene.cpp",
        "playerLeave",
        1722);
      v28 = common::milog::MiLogStream::operator<<<char [20],(char *[20])0>(&v86, (const char (*)[20])off_258DBCE0);
      common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v28, (const unsigned int *)(v2 + 32));
      common::milog::MiLogStream::~MiLogStream(&v86);
    }
    std::map<unsigned int,std::unordered_set<unsigned int>>::erase(
      &this->peer_authority_entity_map_,
      (const std::map<unsigned int,std::unordered_set<unsigned int>>::key_type *)(v2 + 32));
    if ( !std::map<unsigned int,std::weak_ptr<Player>>::erase(
            &this->player_map_,
            (const std::map<unsigned int,std::weak_ptr<Player>>::key_type *)(v2 + 48)) )
    {
      common::milog::MiLogStream::create(
        &v86,
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/scene/scene.cpp",
        "playerLeave",
        1727);
      v29 = common::milog::MiLogStream::operator<<<char [28],(char *[28])0>(
              &v86,
              (const char (*)[28])"player_map_ can't find uid:");
      common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v29, (const unsigned int *)(v2 + 48));
      common::milog::MiLogStream::~MiLogStream(&v86);
    }
    Scene::getHostPlayer((const Scene *const)(v2 + 160));
    toThisPtr<Player>((Player *)&__b);
    v30 = std::operator==<Player,Player>((const std::shared_ptr<Player> *)(v2 + 160), &__b);
    std::shared_ptr<Player>::~shared_ptr(&__b);
    if ( v30 )
    {
      std::shared_ptr<Player>::shared_ptr((std::shared_ptr<Player> *const)(v2 + 256), 0LL);
      __for_range_0 = &this->player_map_;
      __for_begin._M_current = (std::weak_ptr<Avatar> *)std::map<unsigned int,std::weak_ptr<Player>>::begin(&this->player_map_)._M_node;
      __for_end._M_current = (std::weak_ptr<Avatar> *)std::map<unsigned int,std::weak_ptr<Player>>::end(__for_range_0)._M_node;
      while ( std::operator!=(
                (const std::_Rb_tree_iterator<std::pair<unsigned int const,std::weak_ptr<Player> > >::_Self *)&__for_begin,
                (const std::_Rb_tree_iterator<std::pair<unsigned int const,std::weak_ptr<Player> > >::_Self *)&__for_end) )
      {
        p = std::_Rb_tree_iterator<std::pair<unsigned int const,std::weak_ptr<Player>>>::operator*((const std::_Rb_tree_iterator<std::pair<unsigned int const,std::weak_ptr<Player> > > *const)&__for_begin);
        std::weak_ptr<Player>::lock((const std::weak_ptr<Player> *const)(v2 + 288));
        if ( std::operator!=<Player>((const std::shared_ptr<Player> *)(v2 + 288), 0LL)
          && (v31 = std::__shared_ptr_access<Player,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Player,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 288)),
              Player::isConnected(v31)) )
        {
          std::shared_ptr<Player>::operator=(
            (std::shared_ptr<Player> *const)(v2 + 256),
            (const std::shared_ptr<Player> *)(v2 + 288));
          v33 = 0;
        }
        else
        {
          v33 = 1;
        }
        std::shared_ptr<Player>::~shared_ptr((std::shared_ptr<Player> *const)(v2 + 288));
        if ( v33 != 1 )
          break;
        std::_Rb_tree_iterator<std::pair<unsigned int const,std::weak_ptr<Player>>>::operator++((std::_Rb_tree_iterator<std::pair<unsigned int const,std::weak_ptr<Player> > > *const)&__for_begin);
      }
      if ( std::operator!=<Player>((const std::shared_ptr<Player> *)(v2 + 256), 0LL) )
      {
        std::shared_ptr<Player>::shared_ptr(
          (std::shared_ptr<Player> *const)(v2 + 288),
          (const std::shared_ptr<Player> *)(v2 + 256));
        Scene::setHostPlayer(this, (PlayerPtr *)(v2 + 288));
        std::shared_ptr<Player>::~shared_ptr((std::shared_ptr<Player> *const)(v2 + 288));
      }
      else
      {
        std::__weak_ptr<Player,(__gnu_cxx::_Lock_policy)2>::reset(&this->host_player_wtr_);
      }
      std::shared_ptr<Player>::~shared_ptr((std::shared_ptr<Player> *const)(v2 + 256));
    }
    common::tools::perf::make_shared<LeaveSceneEvent,unsigned int &>((unsigned int *)(v2 + 256), &this->scene_id_);
    std::shared_ptr<BaseEvent>::shared_ptr<LeaveSceneEvent,void>(
      (std::shared_ptr<BaseEvent> *const)(v2 + 192),
      (std::shared_ptr<LeaveSceneEvent> *)(v2 + 256));
    std::shared_ptr<LeaveSceneEvent>::~shared_ptr((std::shared_ptr<LeaveSceneEvent> *const)(v2 + 256));
    if ( std::operator!=<BaseEvent>((const std::shared_ptr<BaseEvent> *)(v2 + 192), 0LL) )
    {
      EventComp = Player::getEventComp(player);
      std::shared_ptr<BaseEvent>::shared_ptr(
        (std::shared_ptr<BaseEvent> *const)(v2 + 288),
        (const std::shared_ptr<BaseEvent> *)(v2 + 192));
      PlayerEventComp::notifyEvent(EventComp, (BaseEventPtr *)(v2 + 288));
      std::shared_ptr<BaseEvent>::~shared_ptr((std::shared_ptr<BaseEvent> *const)(v2 + 288));
    }
    MiscComp = Scene::getMiscComp(this);
    SceneMiscComp::onPlayerLeave(MiscComp, *(_DWORD *)(v2 + 48));
    MultistagePlayComp = Scene::getMultistagePlayComp(this);
    SceneMultistagePlayComp::onLeaveScene(MultistagePlayComp, player);
    GalleryComp = Scene::getGalleryComp(this);
    SceneGalleryComp::onLeaveScene(GalleryComp, player);
    TransferGuardComp = Scene::getTransferGuardComp(this);
    SceneTransferGuardComp::onPlayerLeaveScene(TransferGuardComp, player);
    std::enable_shared_from_this<Scene>::shared_from_this((std::enable_shared_from_this<Scene> *const)(v2 + 224));
    BlockGroupComp = (unsigned __int64)Scene::getBlockGroupComp(this);
    if ( *(_BYTE *)((BlockGroupComp >> 3) + 0x7FFF8000) )
      BlockGroupComp = __asan_report_load8();
    v40 = *(_QWORD *)BlockGroupComp + 72LL;
    if ( *(_BYTE *)((v40 >> 3) + 0x7FFF8000) )
      BlockGroupComp = __asan_report_load8();
    (*(void (__fastcall **)(unsigned __int64, Player *))v40)(BlockGroupComp, player);
    Player::getSceneComp(player);
    PlayerSceneComp::getCurScene((const PlayerSceneComp *const)(v2 + 288));
    v41 = std::operator!=<Scene,Scene>(
            (const std::shared_ptr<Scene> *)(v2 + 224),
            (const std::shared_ptr<Scene> *)(v2 + 288));
    std::shared_ptr<Scene>::~shared_ptr((std::shared_ptr<Scene> *const)(v2 + 288));
    if ( v41 )
    {
      common::milog::MiLogStream::create(
        &v86,
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/scene/scene.cpp",
        "playerLeave",
        1771);
      v42 = common::milog::MiLogStream::operator<<<char [52],(char *[52])0>(&v86, (const char (*)[52])off_258DBD60);
      SceneId = Scene::getSceneId(this);
      v43 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v42, &SceneId);
      v44 = common::milog::MiLogStream::operator<<<char [7],(char *[7])0>(v43, (const char (*)[7])", uid:");
      val = Player::getUid(player);
      common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v44, &val);
      common::milog::MiLogStream::~MiLogStream(&v86);
    }
    else
    {
      SceneComp = Player::getSceneComp(player);
      PlayerSceneComp::playerLeaveScene(SceneComp);
      v46 = Player::getSceneComp(player);
      std::shared_ptr<WeatherArea>::shared_ptr((std::shared_ptr<WeatherArea> *const)(v2 + 288), 0LL);
      PlayerSceneComp::updateCurrentWeatherArea(v46, (WeatherAreaPtr *)(v2 + 288));
      std::shared_ptr<WeatherArea>::~shared_ptr((std::shared_ptr<WeatherArea> *const)(v2 + 288));
      Scene::clearPlayerVehicle(this, *(_DWORD *)(v2 + 48));
      Scene::tryClearMassiveData(this, 0);
      std::vector<std::weak_ptr<Avatar>>::clear((std::vector<std::weak_ptr<Avatar>> *const)(v2 + 320));
      v47 = Player::getAvatarComp(player);
      PlayerAvatarComp::getAllAvatarVec(&__x, v47);
      std::vector<std::weak_ptr<Avatar>>::operator=((std::vector<std::weak_ptr<Avatar>> *const)(v2 + 320), &__x);
      std::vector<std::weak_ptr<Avatar>>::~vector(&__x);
      __for_range_1 = (std::vector<std::weak_ptr<Avatar>> *)(v2 + 320);
      __for_begin._M_current = std::vector<std::weak_ptr<Avatar>>::begin((std::vector<std::weak_ptr<Avatar>> *const)(v2 + 320))._M_current;
      __for_end._M_current = std::vector<std::weak_ptr<Avatar>>::end(__for_range_1)._M_current;
      while ( __gnu_cxx::operator!=<std::weak_ptr<Avatar> *,std::vector<std::weak_ptr<Avatar>>>(
                &__for_begin,
                &__for_end) )
      {
        v48 = __gnu_cxx::__normal_iterator<std::weak_ptr<Avatar> *,std::vector<std::weak_ptr<Avatar>>>::operator*(&__for_begin);
        std::weak_ptr<Avatar>::weak_ptr((std::weak_ptr<Avatar> *const)(v2 + 256), v48);
        std::weak_ptr<Avatar>::lock((const std::weak_ptr<Avatar> *const)(v2 + 288));
        if ( !std::operator==<Avatar>(0LL, (const std::shared_ptr<Avatar> *)(v2 + 288)) )
        {
          v49 = std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::operator*((const std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 288));
          if ( Scene::delAvatarAndWeaponEntity(this, v49) )
          {
            common::milog::MiLogStream::create(
              &v86,
              &common::milog::MiLogDefault::default_log_obj_,
              3u,
              "./src/scene/scene.cpp",
              "playerLeave",
              1791);
            v50 = common::milog::MiLogStream::operator<<<char [31],(char *[31])0>(
                    &v86,
                    (const char (*)[31])"delAvatarAndWeaponEntity fails");
            v51 = std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::operator*((const std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 288));
            common::milog::MiLogStream::operator<<<Avatar,(Avatar*)0>(v50, v51);
            common::milog::MiLogStream::~MiLogStream(&v86);
          }
        }
        std::shared_ptr<Avatar>::~shared_ptr((std::shared_ptr<Avatar> *const)(v2 + 288));
        std::weak_ptr<Avatar>::~weak_ptr((std::weak_ptr<Avatar> *const)(v2 + 256));
        __gnu_cxx::__normal_iterator<std::weak_ptr<Avatar> *,std::vector<std::weak_ptr<Avatar>>>::operator++(&__for_begin);
      }
      Scene::notifyAllPlayerInfo(this);
      common::milog::MiLogStream::create(
        &v86,
        &common::milog::MiLogDefault::default_log_obj_,
        1u,
        "./src/scene/scene.cpp",
        "playerLeave",
        1798);
      v52 = common::milog::MiLogStream::operator<<<char [20],(char *[20])0>(
              &v86,
              (const char (*)[20])"[PEER] del peer_id:");
      v53 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v52, (const unsigned int *)(v2 + 32));
      v54 = common::milog::MiLogStream::operator<<<char [12],(char *[12])0>(v53, (const char (*)[12])", scene_id:");
      v55 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v54, &this->scene_id_);
      v56 = common::milog::MiLogStream::operator<<<char [7],(char *[7])0>(v55, (const char (*)[7])", uid:");
      common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v56, (const unsigned int *)(v2 + 48));
      common::milog::MiLogStream::~MiLogStream(&v86);
      if ( !std::operator!=<World>((const std::shared_ptr<World> *)(v2 + 128), 0LL) )
        goto LABEL_106;
      v57 = (unsigned __int64)std::__shared_ptr_access<World,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<World,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 128));
      if ( *(_BYTE *)((v57 >> 3) + 0x7FFF8000) )
        v57 = __asan_report_load8();
      v58 = *(_QWORD *)v57 + 160LL;
      if ( *(_BYTE *)((v58 >> 3) + 0x7FFF8000) )
        v57 = __asan_report_load8();
      (*(void (__fastcall **)(unsigned __int64, Player *, Scene *const))v58)(v57, player, this);
      Player::getSceneComp(player);
      PlayerSceneComp::getDestScene((const PlayerSceneComp *const)(v2 + 256));
      v59 = 0;
      if ( std::operator==<Scene>((const std::shared_ptr<Scene> *)(v2 + 256), 0LL) )
        goto LABEL_71;
      v60 = std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 256));
      if ( Scene::getSceneType(v60) == SCENE_DUNGEON )
        goto LABEL_72;
      v61 = (unsigned __int64)std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 256));
      if ( *(_BYTE *)((v61 >> 3) + 0x7FFF8000) )
        v61 = __asan_report_load8();
      v62 = *(_QWORD *)v61 + 56LL;
      if ( *(_BYTE *)((v62 >> 3) + 0x7FFF8000) )
        v61 = __asan_report_load8();
      (*(void (__fastcall **)(unsigned __int64, unsigned __int64))v62)(v2 + 288, v61);
      v59 = 1;
      if ( std::operator!=<World,World>(
             (const std::shared_ptr<World> *)(v2 + 288),
             (const std::shared_ptr<World> *)(v2 + 128)) )
      {
LABEL_71:
        v63 = 1;
      }
      else
      {
LABEL_72:
        v63 = 0;
      }
      if ( v59 )
        std::shared_ptr<World>::~shared_ptr((std::shared_ptr<World> *const)(v2 + 288));
      if ( v63 )
      {
        v64 = Player::getSceneComp(player);
        leave_reason = PlayerSceneComp::getLeaveWorldReason(v64);
        if ( std::operator==<Scene>((const std::shared_ptr<Scene> *)(v2 + 256), 0LL)
          && leave_reason == LEAVE_WORLD_REASON_NONE )
        {
          leave_reason = LEAVE_WORLD_REASON_LOGOUT;
        }
        v66 = (unsigned __int64)std::__shared_ptr_access<World,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<World,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 128));
        if ( *(_BYTE *)((v66 >> 3) + 0x7FFF8000) )
          v66 = __asan_report_load8();
        v67 = *(_QWORD *)v66 + 144LL;
        if ( *(_BYTE *)((v67 >> 3) + 0x7FFF8000) )
          v66 = __asan_report_load8();
        v68 = *(void (__fastcall **)(unsigned __int64, Player *, _QWORD, _QWORD))v67;
        if ( *(_BYTE *)(((unsigned __int64)&this->scene_id_ >> 3) + 0x7FFF8000) != 0
          && *(_BYTE *)(((unsigned __int64)&this->scene_id_ >> 3) + 0x7FFF8000) <= 3 )
        {
          v66 = __asan_report_load4(&this->scene_id_);
        }
        v68(v66, player, this->scene_id_, (unsigned int)leave_reason);
        v69 = 0;
      }
      else
      {
        v69 = 1;
      }
      std::shared_ptr<Scene>::~shared_ptr((std::shared_ptr<Scene> *const)(v2 + 256));
      if ( v69 == 1 )
      {
LABEL_106:
        if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
          __asan_report_load8();
        v70 = (unsigned __int64)(this->_vptr_DescribalBase + 35);
        if ( *(_BYTE *)((v70 >> 3) + 0x7FFF8000) )
          v70 = __asan_report_load8();
        (*(void (__fastcall **)(unsigned __int64, Scene *const))v70)(v2 + 288, this);
        if ( std::operator==<SceneTeam>((const std::shared_ptr<SceneTeam> *)(v2 + 288), 0LL) )
        {
          common::milog::MiLogStream::create(
            &v86,
            &common::milog::MiLogDefault::default_log_obj_,
            3u,
            "./src/scene/scene.cpp",
            "playerLeave",
            1824);
          v71 = common::milog::MiLogStream::operator<<<char [33],(char *[33])0>(
                  &v86,
                  (const char (*)[33])"scene team ptr is null scene_id:");
          val = Scene::getSceneId(this);
          common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v71, &val);
          common::milog::MiLogStream::~MiLogStream(&v86);
        }
        else
        {
          v72 = std::__shared_ptr_access<SceneTeam,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<SceneTeam,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 288));
          SceneTeam::refreshCurTeamResonances(v72);
          v73 = std::__shared_ptr_access<SceneTeam,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<SceneTeam,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 288));
          SceneTeam::notifySceneTeamUpdate(v73);
        }
        std::shared_ptr<SceneTeam>::~shared_ptr((std::shared_ptr<SceneTeam> *const)(v2 + 288));
      }
    }
    std::shared_ptr<Scene>::~shared_ptr((std::shared_ptr<Scene> *const)(v2 + 224));
    std::shared_ptr<BaseEvent>::~shared_ptr((std::shared_ptr<BaseEvent> *const)(v2 + 192));
    std::shared_ptr<Player>::~shared_ptr((std::shared_ptr<Player> *const)(v2 + 160));
    std::vector<std::weak_ptr<Avatar>>::~vector((std::vector<std::weak_ptr<Avatar>> *const)(v2 + 320));
    goto LABEL_100;
  }
  common::milog::MiLogStream::create(
    &v86,
    &common::milog::MiLogDefault::default_log_obj_,
    3u,
    "./src/scene/scene.cpp",
    "playerLeave",
    1682);
  v8 = common::milog::MiLogStream::operator<<<char [25],(char *[25])0>(
         &v86,
         (const char (*)[25])"getCurWorld fails, uid: ");
  common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v8, (const unsigned int *)(v2 + 48));
  common::milog::MiLogStream::~MiLogStream(&v86);
LABEL_100:
  std::shared_ptr<World>::~shared_ptr((std::shared_ptr<World> *const)(v2 + 128));
LABEL_101:
  std::shared_ptr<Player>::~shared_ptr((std::shared_ptr<Player> *const)(v2 + 96));
  if ( v87 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8010) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8018) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8020) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8028) = 0LL;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8020) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8028) = 0xF5F5F5F5F5F5F5F5LL;
  }
};

// Line 1833: range 0000000015980FCC-0000000015981180
void __cdecl Scene::onPlayerLeaveWorld(Scene *const this, Player *player, proto::LeaveWorldReason leave_world_reason)
{
  unsigned __int64 v3; // rbx
  __int64 v4; // rax
  unsigned __int64 v5; // r12
  std::__shared_ptr_access<Player,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v6; // rax
  SceneMultistagePlayComp *MultistagePlayComp; // rcx
  SceneTransferGuardComp *TransferGuardComp; // rcx
  uint32_t uid; // [rsp+2Ch] [rbp-64h]
  char v12[96]; // [rsp+30h] [rbp-60h] BYREF

  v3 = (unsigned __int64)v12;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_0(64LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "1 32 16 14 owner_ptr:1835";
  *(_QWORD *)(v3 + 16) = Scene::onPlayerLeaveWorld;
  v5 = v3 >> 3;
  *(_DWORD *)(v5 + 2147450880) = -235802127;
  *(_DWORD *)(v5 + 2147450884) = -202178560;
  uid = Player::getUid(player);
  Scene::getOwnPlayer((const Scene *const)(v3 + 32));
  if ( std::operator==<Player>((const std::shared_ptr<Player> *)(v3 + 32), 0LL)
    || (v6 = std::__shared_ptr_access<Player,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Player,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 32)),
        uid != Player::getUid(v6)) )
  {
    Scene::erasePlayerLocation(this, uid);
  }
  Scene::delPlayTeamEntity(this, player);
  MultistagePlayComp = Scene::getMultistagePlayComp(this);
  SceneMultistagePlayComp::onPlayerLeaveWorld(MultistagePlayComp, player, leave_world_reason);
  TransferGuardComp = Scene::getTransferGuardComp(this);
  SceneTransferGuardComp::onPlayerLeaveWorld(TransferGuardComp, player, leave_world_reason);
  std::shared_ptr<Player>::~shared_ptr((std::shared_ptr<Player> *const)(v3 + 32));
  if ( v12 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
  }
};

// Line 1852: range 0000000015981182-000000001598185D
void __fastcall Scene::playerDisconnect(Scene *const this, uint32_t uid)
{
  unsigned __int64 v2; // r13
  __int64 v3; // rax
  _DWORD *v4; // r12
  common::milog::MiLogStream *v5; // rax
  common::milog::MiLogStream *v6; // rax
  common::milog::MiLogStream *v7; // r14
  SceneMultistagePlayComp *MultistagePlayComp; // r14
  Player *v9; // rax
  std::__shared_ptr_access<Player,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v10; // rax
  common::milog::MiLogStream *v12; // r14
  std::__shared_ptr_access<Player,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v13; // rax
  common::milog::MiLogStream *v14; // rax
  common::milog::MiLogStream *v15; // r14
  std::__shared_ptr_access<Player,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v16; // rax
  int v17; // r14d
  common::milog::MiLogStream *v18; // r14
  std::__shared_ptr_access<Player,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v19; // rax
  common::milog::MiLogStream *v20; // rax
  bool v21; // r14
  SceneBlockGroupComp *BlockGroupComp; // rax
  std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v23; // rax
  char v24; // al
  SceneBlockGroupComp *v25; // rax
  bool new_host_selected; // [rsp+1Bh] [rbp-135h]
  unsigned int val; // [rsp+1Ch] [rbp-134h] BYREF
  std::map<unsigned int,std::weak_ptr<Player>>::iterator __for_begin; // [rsp+20h] [rbp-130h] BYREF
  std::map<unsigned int,std::weak_ptr<Player>>::iterator __for_end; // [rsp+28h] [rbp-128h] BYREF
  std::map<unsigned int,std::weak_ptr<Player>> *__for_range; // [rsp+30h] [rbp-120h]
  std::pair<unsigned int const,std::weak_ptr<Player> > *p; // [rsp+38h] [rbp-118h]
  common::milog::MiLogStream v32; // [rsp+40h] [rbp-110h] BYREF
  char v33[240]; // [rsp+60h] [rbp-F0h] BYREF

  v2 = (unsigned __int64)v33;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_2(192LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "5 48 4 8 uid:1851 64 16 26 disconnect_player_ptr:1853 96 16 20 host_player_ptr:1862 128 16 15 pl"
                        "ayer_ptr:1868 160 16 15 config_ptr:1894";
  *(_QWORD *)(v2 + 16) = Scene::playerDisconnect;
  v4 = (_DWORD *)(v2 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = -234556943;
  v4[536862722] = -219021312;
  v4[536862723] = -219021312;
  v4[536862724] = -219021312;
  v4[536862725] = -202178560;
  *(_DWORD *)(v2 + 48) = uid;
  Scene::findPlayer((const Scene *const)(v2 + 64), (uint32_t)this);
  if ( std::operator==<Player>((const std::shared_ptr<Player> *)(v2 + 64), 0LL) )
  {
    common::milog::MiLogStream::create(
      &v32,
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/scene/scene.cpp",
      "playerDisconnect",
      1856);
    v5 = common::milog::MiLogStream::operator<<<char [24],(char *[24])0>(
           &v32,
           (const char (*)[24])"findPlayer failed, uid:");
    v6 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v5, (const unsigned int *)(v2 + 48));
    v7 = common::milog::MiLogStream::operator<<<char [11],(char *[11])0>(v6, (const char (*)[11])" scene_id:");
    val = Scene::getSceneId(this);
    common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v7, &val);
    common::milog::MiLogStream::~MiLogStream(&v32);
  }
  else
  {
    MultistagePlayComp = Scene::getMultistagePlayComp(this);
    v9 = std::__shared_ptr_access<Player,(__gnu_cxx::_Lock_policy)2,false,false>::operator*((const std::__shared_ptr_access<Player,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 64));
    SceneMultistagePlayComp::onPlayerDisconnect(MultistagePlayComp, v9);
    Scene::getHostPlayer((const Scene *const)(v2 + 96));
    if ( std::operator==<Player,Player>(
           (const std::shared_ptr<Player> *)(v2 + 96),
           (const std::shared_ptr<Player> *)(v2 + 64)) )
    {
      new_host_selected = 0;
      __for_range = &this->player_map_;
      __for_begin._M_node = std::map<unsigned int,std::weak_ptr<Player>>::begin(&this->player_map_)._M_node;
      __for_end._M_node = std::map<unsigned int,std::weak_ptr<Player>>::end(&this->player_map_)._M_node;
      while ( std::operator!=(&__for_begin, &__for_end) )
      {
        p = std::_Rb_tree_iterator<std::pair<unsigned int const,std::weak_ptr<Player>>>::operator*(&__for_begin);
        std::weak_ptr<Player>::lock((const std::weak_ptr<Player> *const)(v2 + 128));
        if ( std::operator!=<Player>((const std::shared_ptr<Player> *)(v2 + 128), 0LL)
          && (v10 = std::__shared_ptr_access<Player,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Player,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 128)),
              Player::isConnected(v10)) )
        {
          std::shared_ptr<Player>::shared_ptr(
            (std::shared_ptr<Player> *const)(v2 + 160),
            (const std::shared_ptr<Player> *)(v2 + 128));
          Scene::setHostPlayer(this, (PlayerPtr *)(v2 + 160));
          std::shared_ptr<Player>::~shared_ptr((std::shared_ptr<Player> *const)(v2 + 160));
          new_host_selected = 1;
          common::milog::MiLogStream::create(
            &v32,
            &common::milog::MiLogDefault::default_log_obj_,
            1u,
            "./src/scene/scene.cpp",
            "playerDisconnect",
            1874);
          v12 = common::milog::MiLogStream::operator<<<char [17],(char *[17])0>(
                  &v32,
                  (const char (*)[17])"old_host_player:");
          v13 = std::__shared_ptr_access<Player,(__gnu_cxx::_Lock_policy)2,false,false>::operator*((const std::__shared_ptr_access<Player,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 64));
          v14 = operator<<(v12, v13);
          v15 = common::milog::MiLogStream::operator<<<char [17],(char *[17])0>(
                  v14,
                  (const char (*)[17])"new_host_player:");
          v16 = std::__shared_ptr_access<Player,(__gnu_cxx::_Lock_policy)2,false,false>::operator*((const std::__shared_ptr_access<Player,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 128));
          operator<<(v15, v16);
          common::milog::MiLogStream::~MiLogStream(&v32);
          v17 = 0;
        }
        else
        {
          v17 = 1;
        }
        std::shared_ptr<Player>::~shared_ptr((std::shared_ptr<Player> *const)(v2 + 128));
        if ( v17 != 1 )
          break;
        std::_Rb_tree_iterator<std::pair<unsigned int const,std::weak_ptr<Player>>>::operator++(&__for_begin);
      }
      if ( !new_host_selected )
      {
        std::__weak_ptr<Player,(__gnu_cxx::_Lock_policy)2>::reset(&this->host_player_wtr_);
        common::milog::MiLogStream::create(
          &v32,
          &common::milog::MiLogDefault::default_log_obj_,
          1u,
          "./src/scene/scene.cpp",
          "playerDisconnect",
          1884);
        v18 = common::milog::MiLogStream::operator<<<char [17],(char *[17])0>(
                &v32,
                (const char (*)[17])"old_host_player:");
        v19 = std::__shared_ptr_access<Player,(__gnu_cxx::_Lock_policy)2,false,false>::operator*((const std::__shared_ptr_access<Player,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 64));
        v20 = operator<<(v18, v19);
        common::milog::MiLogStream::operator<<<char [9],(char *[9])0>(v20, (const char (*)[9])"reseted.");
        common::milog::MiLogStream::~MiLogStream(&v32);
      }
    }
    Scene::getHostPlayer((const Scene *const)(v2 + 160));
    v21 = std::operator==<Player>((const std::shared_ptr<Player> *)(v2 + 160), 0LL);
    std::shared_ptr<Player>::~shared_ptr((std::shared_ptr<Player> *const)(v2 + 160));
    if ( v21 )
    {
      BlockGroupComp = Scene::getBlockGroupComp(this);
      SceneBlockGroupComp::unloadGroupWhenDisconnect(BlockGroupComp);
      ServiceBox::findService<GameserverService>();
      GameserverService::getConfig((GameserverService *const)(v2 + 160));
      if ( !std::operator!=<Config>((const std::shared_ptr<Config> *)(v2 + 160), 0LL) )
        goto LABEL_26;
      v23 = std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 160));
      if ( *(char *)(((unsigned __int64)&v23->is_delete_reload_pos_when_disconnect >> 3) + 0x7FFF8000) < 0 )
        v23 = (std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *)__asan_report_load1(&v23->is_delete_reload_pos_when_disconnect);
      if ( v23->is_delete_reload_pos_when_disconnect )
        v24 = 1;
      else
LABEL_26:
        v24 = 0;
      if ( v24 )
      {
        v25 = Scene::getBlockGroupComp(this);
        SceneBlockGroupComp::erasePlayerReloadPos(v25, *(_DWORD *)(v2 + 48));
      }
      std::shared_ptr<Config>::~shared_ptr((std::shared_ptr<Config> *const)(v2 + 160));
    }
    std::shared_ptr<Player>::~shared_ptr((std::shared_ptr<Player> *const)(v2 + 96));
  }
  std::shared_ptr<Player>::~shared_ptr((std::shared_ptr<Player> *const)(v2 + 64));
  if ( v33 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8010) = 0LL;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
  }
};

// Line 1905: range 000000001598185E-00000000159819C9
uint32_t __cdecl Scene::getPlayerCount(const Scene *const this)
{
  unsigned __int64 v1; // rbx
  __int64 v2; // rax
  unsigned __int64 v3; // r12
  uint32_t result; // eax
  uint32_t player_count; // [rsp+1Ch] [rbp-84h]
  std::map<unsigned int,std::weak_ptr<Player>>::const_iterator __for_begin; // [rsp+20h] [rbp-80h] BYREF
  std::map<unsigned int,std::weak_ptr<Player>>::const_iterator __for_end; // [rsp+28h] [rbp-78h] BYREF
  const std::map<unsigned int,std::weak_ptr<Player>> *__for_range; // [rsp+30h] [rbp-70h]
  const std::pair<unsigned int const,std::weak_ptr<Player> > *p; // [rsp+38h] [rbp-68h]
  char v10[96]; // [rsp+40h] [rbp-60h] BYREF

  v1 = (unsigned __int64)v10;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_0(64LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "1 32 16 15 player_ptr:1909";
  *(_QWORD *)(v1 + 16) = Scene::getPlayerCount;
  v3 = v1 >> 3;
  *(_DWORD *)(v3 + 2147450880) = -235802127;
  *(_DWORD *)(v3 + 2147450884) = -202178560;
  player_count = 0;
  __for_range = &this->player_map_;
  __for_begin._M_node = std::map<unsigned int,std::weak_ptr<Player>>::begin(&this->player_map_)._M_node;
  __for_end._M_node = std::map<unsigned int,std::weak_ptr<Player>>::end(&this->player_map_)._M_node;
  while ( std::operator!=(&__for_begin, &__for_end) )
  {
    p = std::_Rb_tree_const_iterator<std::pair<unsigned int const,std::weak_ptr<Player>>>::operator*(&__for_begin);
    std::weak_ptr<Player>::lock((const std::weak_ptr<Player> *const)(v1 + 32));
    if ( std::operator!=<Player>((const std::shared_ptr<Player> *)(v1 + 32), 0LL) )
      ++player_count;
    std::shared_ptr<Player>::~shared_ptr((std::shared_ptr<Player> *const)(v1 + 32));
    std::_Rb_tree_const_iterator<std::pair<unsigned int const,std::weak_ptr<Player>>>::operator++(&__for_begin);
  }
  result = player_count;
  if ( v10 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 1917: range 00000000159819CA-0000000015981B7D
void __cdecl Scene::getPlayerUidSet(Scene *const this, std::set<unsigned int> *uid_set)
{
  unsigned __int64 v2; // rbx
  __int64 v3; // rax
  unsigned __int64 v4; // r13
  std::__shared_ptr_access<Player,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v5; // rax
  std::set<unsigned int>::value_type __x; // [rsp+1Ch] [rbp-84h] BYREF
  std::map<unsigned int,std::weak_ptr<Player>>::iterator __for_begin; // [rsp+20h] [rbp-80h] BYREF
  std::map<unsigned int,std::weak_ptr<Player>>::iterator __for_end; // [rsp+28h] [rbp-78h] BYREF
  std::map<unsigned int,std::weak_ptr<Player>> *__for_range; // [rsp+30h] [rbp-70h]
  std::pair<unsigned int const,std::weak_ptr<Player> > *p; // [rsp+38h] [rbp-68h]
  char v11[96]; // [rsp+40h] [rbp-60h] BYREF

  v2 = (unsigned __int64)v11;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_0(64LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "1 32 16 15 player_ptr:1920";
  *(_QWORD *)(v2 + 16) = Scene::getPlayerUidSet;
  v4 = v2 >> 3;
  *(_DWORD *)(v4 + 2147450880) = -235802127;
  *(_DWORD *)(v4 + 2147450884) = -202178560;
  __for_range = &this->player_map_;
  __for_begin._M_node = std::map<unsigned int,std::weak_ptr<Player>>::begin(&this->player_map_)._M_node;
  __for_end._M_node = std::map<unsigned int,std::weak_ptr<Player>>::end(&this->player_map_)._M_node;
  while ( std::operator!=(&__for_begin, &__for_end) )
  {
    p = std::_Rb_tree_iterator<std::pair<unsigned int const,std::weak_ptr<Player>>>::operator*(&__for_begin);
    std::weak_ptr<Player>::lock((const std::weak_ptr<Player> *const)(v2 + 32));
    if ( std::operator!=<Player>((const std::shared_ptr<Player> *)(v2 + 32), 0LL) )
    {
      v5 = std::__shared_ptr_access<Player,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Player,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 32));
      __x = Player::getUid(v5);
      std::set<unsigned int>::insert(uid_set, &__x);
    }
    std::shared_ptr<Player>::~shared_ptr((std::shared_ptr<Player> *const)(v2 + 32));
    std::_Rb_tree_iterator<std::pair<unsigned int const,std::weak_ptr<Player>>>::operator++(&__for_begin);
  }
  if ( v11 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
  }
};

// Line 1930: range 0000000015981B7E-0000000015981D30
const Scene *__fastcall Scene::findPlayer(const Scene *const this, __int64 uid, int a3)
{
  unsigned __int64 v3; // rbx
  __int64 v4; // rax
  _DWORD *v5; // r12
  std::_Rb_tree_const_iterator<std::pair<unsigned int const,std::weak_ptr<Player> > >::_Self __y; // [rsp+28h] [rbp-88h] BYREF
  char v9[128]; // [rsp+30h] [rbp-80h] BYREF

  v3 = (unsigned __int64)v9;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_1(96LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "2 48 4 8 uid:1929 64 8 7 it:1931";
  *(_QWORD *)(v3 + 16) = Scene::findPlayer;
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = -234556943;
  v5[536862722] = -202116352;
  *(_DWORD *)(v3 + 48) = a3;
  *(std::map<unsigned int,std::weak_ptr<Player>>::const_iterator *)(v3 + 64) = std::map<unsigned int,std::weak_ptr<Player>>::find(
                                                                                 (const std::map<unsigned int,std::weak_ptr<Player>> *const)(uid + 424),
                                                                                 (const std::map<unsigned int,std::weak_ptr<Player>>::key_type *)(v3 + 48));
  __y._M_node = std::map<unsigned int,std::weak_ptr<Player>>::end((const std::map<unsigned int,std::weak_ptr<Player>> *const)(uid + 424))._M_node;
  if ( std::operator!=(
         (const std::_Rb_tree_const_iterator<std::pair<unsigned int const,std::weak_ptr<Player> > >::_Self *)(v3 + 64),
         &__y) )
  {
    std::_Rb_tree_const_iterator<std::pair<unsigned int const,std::weak_ptr<Player>>>::operator->((const std::_Rb_tree_const_iterator<std::pair<unsigned int const,std::weak_ptr<Player> > > *const)(v3 + 64));
    if ( *(_WORD *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
      __asan_report_store16(this, &__y);
    std::weak_ptr<Player>::lock((const std::weak_ptr<Player> *const)this);
  }
  else
  {
    std::shared_ptr<Player>::shared_ptr((std::shared_ptr<Player> *const)this, 0LL);
  }
  if ( v9 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8008) = 0;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8008) = -168430091;
  }
  return this;
};

// Line 1939: range 0000000015981D32-0000000015981DD8
bool __cdecl Scene::isLastPlayer(const Scene *const this, uint32_t uid)
{
  char v2; // bl
  bool v3; // r12
  std::shared_ptr<Player> __a; // [rsp+10h] [rbp-20h] BYREF

  v2 = 0;
  v3 = 0;
  if ( Scene::getPlayerCount(this) == 1 )
  {
    Scene::findPlayer((const Scene *const)&__a, (__int64)this, uid);
    v2 = 1;
    if ( std::operator!=<Player>(&__a, 0LL) )
      v3 = 1;
  }
  if ( v2 )
    std::shared_ptr<Player>::~shared_ptr(&__a);
  return v3;
};

// Line 1945: range 0000000015981DDA-0000000015982057
const Scene *__fastcall Scene::findPeerPlayer(const Scene *const this, __int64 peer_id, int a3)
{
  unsigned __int64 v3; // rbx
  __int64 v4; // rax
  _DWORD *v5; // r12
  std::_Rb_tree_const_iterator<std::pair<unsigned int const,ScenePlayerPeerInfo> >::_Self *p_y; // rsi
  common::milog::MiLogStream *v7; // rax
  std::_Rb_tree_const_iterator<std::pair<unsigned int const,ScenePlayerPeerInfo> >::pointer v8; // rdx
  char v9; // cl
  int uid; // edx
  std::_Rb_tree_const_iterator<std::pair<unsigned int const,ScenePlayerPeerInfo> >::_Self __y; // [rsp+28h] [rbp-A8h] BYREF
  common::milog::MiLogStream v15; // [rsp+30h] [rbp-A0h] BYREF
  char v16[128]; // [rsp+50h] [rbp-80h] BYREF

  v3 = (unsigned __int64)v16;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_1(96LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "2 48 4 12 peer_id:1944 64 8 7 it:1946";
  *(_QWORD *)(v3 + 16) = Scene::findPeerPlayer;
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = -234556943;
  v5[536862722] = -202116352;
  *(_DWORD *)(v3 + 48) = a3;
  *(std::map<unsigned int,ScenePlayerPeerInfo>::const_iterator *)(v3 + 64) = std::map<unsigned int,ScenePlayerPeerInfo>::find(
                                                                               (const std::map<unsigned int,ScenePlayerPeerInfo> *const)(peer_id + 520),
                                                                               (const std::map<unsigned int,ScenePlayerPeerInfo>::key_type *)(v3 + 48));
  __y._M_node = std::map<unsigned int,ScenePlayerPeerInfo>::end((const std::map<unsigned int,ScenePlayerPeerInfo> *const)(peer_id + 520))._M_node;
  p_y = &__y;
  if ( std::operator==(
         (const std::_Rb_tree_const_iterator<std::pair<unsigned int const,ScenePlayerPeerInfo> >::_Self *)(v3 + 64),
         &__y) )
  {
    common::milog::MiLogStream::create(
      &v15,
      &common::milog::MiLogDefault::default_log_obj_,
      1u,
      "./src/scene/scene.cpp",
      "findPeerPlayer",
      1949);
    v7 = common::milog::MiLogStream::operator<<<char [20],(char *[20])0>(&v15, (const char (*)[20])off_258DBCE0);
    common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v7, (const unsigned int *)(v3 + 48));
    common::milog::MiLogStream::~MiLogStream(&v15);
    std::shared_ptr<Player>::shared_ptr((std::shared_ptr<Player> *const)this, 0LL);
  }
  else
  {
    v8 = std::_Rb_tree_const_iterator<std::pair<unsigned int const,ScenePlayerPeerInfo>>::operator->((const std::_Rb_tree_const_iterator<std::pair<unsigned int const,ScenePlayerPeerInfo> > *const)(v3 + 64));
    v9 = *(_BYTE *)(((unsigned __int64)&v8->second >> 3) + 0x7FFF8000);
    LOBYTE(p_y) = v9 != 0;
    if ( v9 != 0 && (char)((((_BYTE)v8 + 4) & 7) + 3) >= v9 )
      __asan_report_load4(&v8->second);
    uid = v8->second.uid;
    if ( *(_WORD *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
      __asan_report_store16(this, p_y);
    Scene::findPlayer(this, peer_id, uid);
  }
  if ( v16 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8008) = 0;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8008) = -168430091;
  }
  return this;
};

// Line 1957: range 0000000015982058-0000000015982178
uint32_t __cdecl Scene::getPeerId(const Scene *const this, uint32_t target_uid)
{
  std::tuple_element<1,const std::pair<unsigned int const,ScenePlayerPeerInfo> >::type *v2; // rax
  std::map<unsigned int,ScenePlayerPeerInfo>::const_iterator __for_begin; // [rsp+10h] [rbp-30h] BYREF
  std::map<unsigned int,ScenePlayerPeerInfo>::const_iterator __for_end; // [rsp+18h] [rbp-28h] BYREF
  const std::map<unsigned int,ScenePlayerPeerInfo> *__for_range; // [rsp+20h] [rbp-20h]
  const std::pair<unsigned int const,ScenePlayerPeerInfo> *v7; // [rsp+28h] [rbp-18h]
  std::tuple_element<0,const std::pair<unsigned int const,ScenePlayerPeerInfo> >::type *peer_id; // [rsp+30h] [rbp-10h]
  std::tuple_element<1,const std::pair<unsigned int const,ScenePlayerPeerInfo> >::type *peer_info; // [rsp+38h] [rbp-8h]

  __for_range = &this->peer_map_;
  __for_begin._M_node = std::map<unsigned int,ScenePlayerPeerInfo>::begin(&this->peer_map_)._M_node;
  __for_end._M_node = std::map<unsigned int,ScenePlayerPeerInfo>::end(&this->peer_map_)._M_node;
  while ( 1 )
  {
    if ( !std::operator!=(&__for_begin, &__for_end) )
      return 0;
    v7 = std::_Rb_tree_const_iterator<std::pair<unsigned int const,ScenePlayerPeerInfo>>::operator*(&__for_begin);
    peer_id = std::get<0ul,unsigned int const,ScenePlayerPeerInfo>(v7);
    v2 = (std::tuple_element<1,const std::pair<unsigned int const,ScenePlayerPeerInfo> >::type *)std::get<1ul,unsigned int const,ScenePlayerPeerInfo>(v7);
    peer_info = v2;
    if ( *(_BYTE *)(((unsigned __int64)v2 >> 3) + 0x7FFF8000) != 0
      && (char)(((unsigned __int8)v2 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)v2 >> 3) + 0x7FFF8000) )
    {
      __asan_report_load4(v2);
    }
    if ( target_uid == peer_info->uid )
      break;
    std::_Rb_tree_const_iterator<std::pair<unsigned int const,ScenePlayerPeerInfo>>::operator++(&__for_begin);
  }
  if ( *(_BYTE *)(((unsigned __int64)peer_id >> 3) + 0x7FFF8000) != 0
    && (char)(((unsigned __int8)peer_id & 7) + 3) >= *(_BYTE *)(((unsigned __int64)peer_id >> 3) + 0x7FFF8000) )
  {
    __asan_report_load4(peer_id);
  }
  return *peer_id;
};

// Line 1971: range 000000001598217A-00000000159822B5
uint32_t __cdecl Scene::getHostPeerId(const Scene *const this)
{
  unsigned __int64 v1; // rbx
  __int64 v2; // rax
  unsigned __int64 v3; // r12
  uint32_t PeerId; // r14d
  std::__shared_ptr_access<Player,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v5; // rax
  uint32_t Uid; // edx
  uint32_t result; // eax
  char v8[112]; // [rsp+10h] [rbp-70h] BYREF

  v1 = (unsigned __int64)v8;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_0(64LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "1 32 16 20 host_player_ptr:1972";
  *(_QWORD *)(v1 + 16) = Scene::getHostPeerId;
  v3 = v1 >> 3;
  *(_DWORD *)(v3 + 2147450880) = -235802127;
  *(_DWORD *)(v3 + 2147450884) = -202178560;
  Scene::getHostPlayer((const Scene *const)(v1 + 32));
  if ( std::operator==<Player>((const std::shared_ptr<Player> *)(v1 + 32), 0LL) )
  {
    PeerId = 0;
  }
  else
  {
    v5 = std::__shared_ptr_access<Player,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Player,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v1 + 32));
    Uid = Player::getUid(v5);
    PeerId = Scene::getPeerId(this, Uid);
  }
  std::shared_ptr<Player>::~shared_ptr((std::shared_ptr<Player> *const)(v1 + 32));
  result = PeerId;
  if ( v8 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 1983: range 00000000159822B6-0000000015982309
bool __cdecl Scene::isHostPlayer(const Scene *const this, const Player *player)
{
  uint32_t Uid; // edx
  bool result; // al
  uint32_t host_peer_id; // [rsp+1Ch] [rbp-4h]

  host_peer_id = Scene::getHostPeerId(this);
  result = 0;
  if ( host_peer_id )
  {
    Uid = Player::getUid(player);
    if ( host_peer_id == Scene::getPeerId(this, Uid) )
      return 1;
  }
  return result;
};

// Line 1989: range 000000001598230A-0000000015982497
const Scene *__fastcall Scene::findPlayerViewMgr(const Scene *const this, __int64 uid, int a3)
{
  unsigned __int64 v3; // rbx
  __int64 v4; // rax
  _DWORD *v5; // r12
  std::_Rb_tree_const_iterator<std::pair<unsigned int const,std::shared_ptr<PlayerViewMgr> > >::pointer v6; // rax
  std::_Rb_tree_const_iterator<std::pair<unsigned int const,std::shared_ptr<PlayerViewMgr> > >::_Self __y; // [rsp+28h] [rbp-88h] BYREF
  char v10[128]; // [rsp+30h] [rbp-80h] BYREF

  v3 = (unsigned __int64)v10;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_1(96LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "2 48 4 8 uid:1988 64 8 7 it:1990";
  *(_QWORD *)(v3 + 16) = Scene::findPlayerViewMgr;
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = -234556943;
  v5[536862722] = -202116352;
  *(_DWORD *)(v3 + 48) = a3;
  *(std::map<unsigned int,std::shared_ptr<PlayerViewMgr>>::const_iterator *)(v3 + 64) = std::map<unsigned int,std::shared_ptr<PlayerViewMgr>>::find(
                                                                                          (const std::map<unsigned int,std::shared_ptr<PlayerViewMgr>> *const)(uid + 472),
                                                                                          (const std::map<unsigned int,std::shared_ptr<PlayerViewMgr>>::key_type *)(v3 + 48));
  __y._M_node = std::map<unsigned int,std::shared_ptr<PlayerViewMgr>>::end((const std::map<unsigned int,std::shared_ptr<PlayerViewMgr>> *const)(uid + 472))._M_node;
  if ( std::operator!=(
         (const std::_Rb_tree_const_iterator<std::pair<unsigned int const,std::shared_ptr<PlayerViewMgr> > >::_Self *)(v3 + 64),
         &__y) )
  {
    v6 = std::_Rb_tree_const_iterator<std::pair<unsigned int const,std::shared_ptr<PlayerViewMgr>>>::operator->((const std::_Rb_tree_const_iterator<std::pair<unsigned int const,std::shared_ptr<PlayerViewMgr> > > *const)(v3 + 64));
    std::shared_ptr<PlayerViewMgr>::shared_ptr((std::shared_ptr<PlayerViewMgr> *const)this, &v6->second);
  }
  else
  {
    std::shared_ptr<PlayerViewMgr>::shared_ptr((std::shared_ptr<PlayerViewMgr> *const)this, 0LL);
  }
  if ( v10 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8008) = 0;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8008) = -168430091;
  }
  return this;
};

// Line 1997: range 0000000015982498-00000000159825CC
void __cdecl Scene::insertPlayerViewMgr(Scene *const this, Player *player)
{
  unsigned __int64 v2; // rbx
  __int64 v3; // rax
  unsigned __int64 v4; // r12
  std::shared_ptr<PlayerViewMgr> *v5; // rax
  std::shared_ptr<PlayerViewMgr> __r; // [rsp+10h] [rbp-70h] BYREF
  char v7[96]; // [rsp+20h] [rbp-60h] BYREF

  v2 = (unsigned __int64)v7;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_0(64LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "1 32 4 8 uid:1998";
  *(_QWORD *)(v2 + 16) = Scene::insertPlayerViewMgr;
  v4 = v2 >> 3;
  *(_DWORD *)(v4 + 2147450880) = -235802127;
  *(_DWORD *)(v4 + 2147450884) = -202116348;
  *(_DWORD *)(v2 + 32) = Player::getUid(player);
  common::tools::perf::make_shared<PlayerViewMgr,Scene &,Player &>(
    (Scene *)&__r,
    (Player *)this,
    (Scene *)player,
    (Player *)this);
  v5 = std::map<unsigned int,std::shared_ptr<PlayerViewMgr>>::operator[](
         &this->player_view_mgr_map_,
         (const std::map<unsigned int,std::shared_ptr<PlayerViewMgr>>::key_type *)(v2 + 32));
  std::shared_ptr<PlayerViewMgr>::operator=(v5, &__r);
  std::shared_ptr<PlayerViewMgr>::~shared_ptr(&__r);
  if ( v7 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
  }
};

// Line 2003: range 00000000159825CE-00000000159826A0
void __fastcall Scene::erasePlayerViewMgr(Scene *const this, uint32_t uid)
{
  unsigned __int64 v2; // rbx
  __int64 v3; // rax
  unsigned __int64 v4; // r12
  char v5[96]; // [rsp+10h] [rbp-60h] BYREF

  v2 = (unsigned __int64)v5;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_0(64LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "1 32 4 8 uid:2002";
  *(_QWORD *)(v2 + 16) = Scene::erasePlayerViewMgr;
  v4 = v2 >> 3;
  *(_DWORD *)(v4 + 2147450880) = -235802127;
  *(_DWORD *)(v4 + 2147450884) = -202116348;
  *(_DWORD *)(v2 + 32) = uid;
  std::map<unsigned int,std::shared_ptr<PlayerViewMgr>>::erase(
    &this->player_view_mgr_map_,
    (const std::map<unsigned int,std::shared_ptr<PlayerViewMgr>>::key_type *)(v2 + 32));
  if ( v5 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
  }
};

// Line 2008: range 00000000159826A2-0000000015982AC2
// local variable allocation has failed, the output may be wrong!
EntityPtr __cdecl Scene::getPlayerEyeEntity(Scene *const this, uint32_t uid)
{
  unsigned int v2; // edx
  unsigned __int64 v3; // r13
  __int64 v4; // rax
  _DWORD *v5; // r12
  std::__shared_ptr_access<PlayerEyePoint,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v6; // rax
  std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v8; // rax
  EntityPtr result; // rax
  unsigned int uida; // [rsp+Ch] [rbp-F4h]
  common::milog::MiLogStream v12; // [rsp+20h] [rbp-E0h] BYREF
  char v13[192]; // [rsp+40h] [rbp-C0h] BYREF

  uida = v2;
  v3 = (unsigned __int64)v13;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_2(160LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "4 32 16 17 view_mgr_ptr:2009 64 16 18 eye_point_ptr:2016 96 16 15 player_ptr:2022 128 16 15 avatar_ptr:2029";
  *(_QWORD *)(v3 + 16) = Scene::getPlayerEyeEntity;
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = -219021312;
  v5[536862722] = -219021312;
  v5[536862723] = -219021312;
  v5[536862724] = -202178560;
  Scene::findPlayerViewMgr((const Scene *const)(v3 + 32), *(__int64 *)&uid, uida);
  if ( std::operator==<PlayerViewMgr>((const std::shared_ptr<PlayerViewMgr> *)(v3 + 32), 0LL) )
  {
    common::milog::MiLogStream::create(
      &v12,
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/scene/scene.cpp",
      "getPlayerEyeEntity",
      2012);
    common::milog::MiLogStream::operator()(&v12, "uid:%u view_mgr is null", uida);
    common::milog::MiLogStream::~MiLogStream(&v12);
    std::shared_ptr<Entity>::shared_ptr((std::shared_ptr<Entity> *const)this, 0LL);
  }
  else
  {
    std::__shared_ptr_access<PlayerViewMgr,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<PlayerViewMgr,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 32));
    PlayerViewMgr::getEyePointAsEye((const PlayerViewMgr *const)(v3 + 64));
    if ( std::operator!=<PlayerEyePoint>((const std::shared_ptr<PlayerEyePoint> *)(v3 + 64), 0LL)
      && (v6 = std::__shared_ptr_access<PlayerEyePoint,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<PlayerEyePoint,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 64)),
          Entity::isOnScene(v6)) )
    {
      std::shared_ptr<Entity>::shared_ptr<PlayerEyePoint,void>(
        (std::shared_ptr<Entity> *const)this,
        (std::shared_ptr<PlayerEyePoint> *)(v3 + 64));
    }
    else
    {
      Scene::findPlayer((const Scene *const)(v3 + 96), *(__int64 *)&uid, uida);
      if ( std::operator==<Player>((const std::shared_ptr<Player> *)(v3 + 96), 0LL) )
      {
        common::milog::MiLogStream::create(
          &v12,
          &common::milog::MiLogDefault::default_log_obj_,
          1u,
          "./src/scene/scene.cpp",
          "getPlayerEyeEntity",
          2025);
        common::milog::MiLogStream::operator()(&v12, "uid:%u player_ptr is null", uida);
        common::milog::MiLogStream::~MiLogStream(&v12);
        std::shared_ptr<Entity>::shared_ptr((std::shared_ptr<Entity> *const)this, 0LL);
      }
      else
      {
        std::__shared_ptr_access<Player,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Player,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 96));
        Player::getCurAvatar((Player *const)(v3 + 128));
        if ( std::operator!=<Avatar>((const std::shared_ptr<Avatar> *)(v3 + 128), 0LL)
          && (v8 = std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 128)),
              Entity::isOnScene((const Entity *const)v8)) )
        {
          std::shared_ptr<Entity>::shared_ptr<Avatar,void>(
            (std::shared_ptr<Entity> *const)this,
            (std::shared_ptr<Avatar> *)(v3 + 128));
        }
        else
        {
          std::shared_ptr<Entity>::shared_ptr((std::shared_ptr<Entity> *const)this, 0LL);
        }
        std::shared_ptr<Avatar>::~shared_ptr((std::shared_ptr<Avatar> *const)(v3 + 128));
      }
      std::shared_ptr<Player>::~shared_ptr((std::shared_ptr<Player> *const)(v3 + 96));
    }
    std::shared_ptr<PlayerEyePoint>::~shared_ptr((std::shared_ptr<PlayerEyePoint> *const)(v3 + 64));
  }
  std::shared_ptr<PlayerViewMgr>::~shared_ptr((std::shared_ptr<PlayerViewMgr> *const)(v3 + 32));
  if ( v13 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8010) = 0;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    result._M_refcount._M_pi = (std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)2> *)0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8010) = -168430091;
  }
  result._M_ptr = (std::__shared_ptr<Entity,(__gnu_cxx::_Lock_policy)2>::element_type *)this;
  return result;
};

// Line 2042: range 0000000015982AC4-00000000159830DF
std::vector<unsigned int> *__cdecl Scene::getPlayerUidVecByViewEntity(
        std::vector<unsigned int> *retstr,
        Scene *const this,
        const std::vector<std::shared_ptr<Entity>> *entity_vec,
        uint32_t exclude_uid)
{
  unsigned __int64 v4; // r13
  __int64 v5; // rax
  _DWORD *v6; // r12
  unsigned __int64 v7; // rax
  unsigned __int64 v8; // rdx
  std::__shared_ptr_access<Player,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v9; // rax
  unsigned __int64 v10; // rax
  void (__fastcall **v11)(common::milog::MiLogStream *, unsigned __int64); // rdx
  const char *v12; // r14
  std::__shared_ptr_access<Player,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v13; // rax
  uint32_t Uid; // eax
  unsigned int *M_current; // r14
  std::vector<unsigned int>::iterator v16; // rax
  unsigned int *v17; // r14
  std::vector<unsigned int>::iterator v18; // rax
  common::milog::MiLogStream *v19; // rdx
  common::milog::MiLogStream *v20; // rdx
  __gnu_cxx::__normal_iterator<unsigned int*,std::vector<unsigned int> > __i; // [rsp+28h] [rbp-138h] BYREF
  std::vector<std::shared_ptr<Entity>>::const_iterator __for_begin; // [rsp+30h] [rbp-130h] BYREF
  std::vector<std::shared_ptr<Entity>>::const_iterator __for_end; // [rsp+38h] [rbp-128h] BYREF
  const std::vector<std::shared_ptr<Entity>> *__for_range; // [rsp+40h] [rbp-120h]
  const std::shared_ptr<Entity> *entity_ptr; // [rsp+48h] [rbp-118h]
  common::milog::MiLogStream v29; // [rsp+50h] [rbp-110h] BYREF
  common::milog::MiLogStream v30; // [rsp+70h] [rbp-F0h] BYREF
  char v31[208]; // [rsp+90h] [rbp-D0h] BYREF

  v4 = (unsigned __int64)v31;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v5 = __asan_stack_malloc_2(160LL);
    if ( v5 )
      v4 = v5;
  }
  *(_QWORD *)v4 = 1102416563LL;
  *(_QWORD *)(v4 + 8) = "4 48 4 8 uid:2049 64 8 7 it:2070 96 16 15 player_ptr:2046 128 16 26 player_eye_entity_ptr:2055";
  *(_QWORD *)(v4 + 16) = Scene::getPlayerUidVecByViewEntity;
  v6 = (_DWORD *)(v4 >> 3);
  v6[536862720] = -235802127;
  v6[536862721] = -234556943;
  v6[536862722] = -218959360;
  v6[536862723] = -219021312;
  v6[536862724] = -202178560;
  std::vector<unsigned int>::vector(retstr);
  __for_range = entity_vec;
  __for_begin._M_current = std::vector<std::shared_ptr<Entity>>::begin(entity_vec)._M_current;
  __for_end._M_current = std::vector<std::shared_ptr<Entity>>::end(entity_vec)._M_current;
  while ( __gnu_cxx::operator!=<std::shared_ptr<Entity> const*,std::vector<std::shared_ptr<Entity>>>(
            &__for_begin,
            &__for_end) )
  {
    entity_ptr = __gnu_cxx::__normal_iterator<std::shared_ptr<Entity> const*,std::vector<std::shared_ptr<Entity>>>::operator*(&__for_begin);
    v7 = (unsigned __int64)std::__shared_ptr_access<Entity,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Entity,(__gnu_cxx::_Lock_policy)2,false,false> *const)entity_ptr);
    if ( *(_BYTE *)((v7 >> 3) + 0x7FFF8000) )
      v7 = __asan_report_load8();
    v8 = *(_QWORD *)v7 + 152LL;
    if ( *(_BYTE *)((v8 >> 3) + 0x7FFF8000) )
      v7 = __asan_report_load8();
    (*(void (__fastcall **)(unsigned __int64, unsigned __int64))v8)(v4 + 96, v7);
    if ( std::operator!=<Player>((const std::shared_ptr<Player> *)(v4 + 96), 0LL) )
    {
      v9 = std::__shared_ptr_access<Player,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Player,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 96));
      *(_DWORD *)(v4 + 48) = Player::getUid(v9);
      if ( !exclude_uid || exclude_uid != *(_DWORD *)(v4 + 48) )
      {
        Scene::getPlayerEyeEntity((Scene *const)(v4 + 128), (uint32_t)this);
        if ( std::operator==<Entity>((const std::shared_ptr<Entity> *)(v4 + 128), 0LL) )
        {
          common::milog::MiLogStream::create(
            &v29,
            &common::milog::MiLogDefault::default_log_obj_,
            3u,
            "./src/scene/scene.cpp",
            "getPlayerUidVecByViewEntity",
            2058);
          v10 = (unsigned __int64)std::__shared_ptr_access<Entity,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Entity,(__gnu_cxx::_Lock_policy)2,false,false> *const)entity_ptr);
          if ( *(_BYTE *)((v10 >> 3) + 0x7FFF8000) )
            v10 = __asan_report_load8();
          v11 = *(void (__fastcall ***)(common::milog::MiLogStream *, unsigned __int64))v10;
          if ( *(_BYTE *)((*(_QWORD *)v10 >> 3) + 0x7FFF8000LL) )
            v10 = __asan_report_load8();
          (*v11)(&v30, v10);
          v12 = (const char *)std::string::c_str(&v30);
          v13 = std::__shared_ptr_access<Player,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Player,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 96));
          Uid = Player::getUid(v13);
          common::milog::MiLogStream::operator()(&v29, "uid:%u get eye_entity failed. entity:%s", Uid, v12);
          std::string::~string(&v30);
          common::milog::MiLogStream::~MiLogStream(&v29);
        }
        else if ( std::operator==<Entity,Entity>((const std::shared_ptr<Entity> *)(v4 + 128), entity_ptr) )
        {
          std::vector<unsigned int>::push_back(retstr, (const std::vector<unsigned int>::value_type *)(v4 + 48));
        }
        std::shared_ptr<Entity>::~shared_ptr((std::shared_ptr<Entity> *const)(v4 + 128));
      }
    }
    std::shared_ptr<Player>::~shared_ptr((std::shared_ptr<Player> *const)(v4 + 96));
    __gnu_cxx::__normal_iterator<std::shared_ptr<Entity> const*,std::vector<std::shared_ptr<Entity>>>::operator++(&__for_begin);
  }
  M_current = std::vector<unsigned int>::end(retstr)._M_current;
  v16._M_current = std::vector<unsigned int>::begin(retstr)._M_current;
  std::sort<__gnu_cxx::__normal_iterator<unsigned int *,std::vector<unsigned int>>>(
    v16,
    (__gnu_cxx::__normal_iterator<unsigned int*,std::vector<unsigned int> >)M_current);
  v17 = std::vector<unsigned int>::end(retstr)._M_current;
  v18._M_current = std::vector<unsigned int>::begin(retstr)._M_current;
  *(__gnu_cxx::__normal_iterator<unsigned int*,std::vector<unsigned int> > *)(v4 + 64) = std::unique<__gnu_cxx::__normal_iterator<unsigned int *,std::vector<unsigned int>>>(
                                                                                           v18,
                                                                                           (__gnu_cxx::__normal_iterator<unsigned int*,std::vector<unsigned int> >)v17);
  __for_end._M_current = (const std::shared_ptr<Entity> *)std::vector<unsigned int>::end(retstr)._M_current;
  if ( __gnu_cxx::operator!=<unsigned int *,std::vector<unsigned int>>(
         (const __gnu_cxx::__normal_iterator<unsigned int*,std::vector<unsigned int> > *)(v4 + 64),
         (const __gnu_cxx::__normal_iterator<unsigned int*,std::vector<unsigned int> > *)&__for_end) )
  {
    common::milog::MiLogStream::create(
      &v30,
      &common::milog::MiLogDefault::default_log_obj_,
      4u,
      "./src/scene/scene.cpp",
      "getPlayerUidVecByViewEntity",
      2073);
    v19 = common::milog::MiLogStream::operator<<<char [15],(char *[15])0>(&v30, (const char (*)[15])"duplicate uid:");
    v20 = common::milog::MiLogStream::operator<<<unsigned int>(v19, retstr);
    common::milog::MiLogStream::operator<<<Scene,(Scene*)0>(v20, this);
    common::milog::MiLogStream::~MiLogStream(&v30);
    __i._M_current = std::vector<unsigned int>::end(retstr)._M_current;
    __gnu_cxx::__normal_iterator<unsigned int const*,std::vector<unsigned int>>::__normal_iterator<unsigned int *>(
      (__gnu_cxx::__normal_iterator<unsigned int const*,std::vector<unsigned int> > *const)&__for_end,
      &__i);
    __gnu_cxx::__normal_iterator<unsigned int const*,std::vector<unsigned int>>::__normal_iterator<unsigned int *>(
      (__gnu_cxx::__normal_iterator<unsigned int const*,std::vector<unsigned int> > *const)&__for_begin,
      (const __gnu_cxx::__normal_iterator<unsigned int*,std::vector<unsigned int> > *)(v4 + 64));
    std::vector<unsigned int>::erase(
      retstr,
      (std::vector<unsigned int>::const_iterator)__for_begin._M_current,
      (std::vector<unsigned int>::const_iterator)__for_end._M_current);
  }
  if ( v31 == (char *)v4 )
  {
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8008) = 0LL;
    *(_DWORD *)((v4 >> 3) + 0x7FFF8010) = 0;
  }
  else
  {
    *(_QWORD *)v4 = 1172321806LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v4 >> 3) + 0x7FFF8010) = -168430091;
  }
  return retstr;
};

// Line 2082: range 00000000159832D2-00000000159835A5
void __cdecl Scene::getAvatarsInRange(
        Scene *const this,
        const Vector3 *pos,
        std::vector<std::shared_ptr<Avatar>> *avatar_vec,
        float vision_range)
{
  unsigned __int64 v4; // rbx
  __int64 v5; // rax
  unsigned __int64 v6; // r13
  char v7; // r14
  std::__shared_ptr_access<Player,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v8; // rax
  bool v9; // r15
  Scene::getAvatarsInRange::<lambda(Player&)> v10; // [rsp-20h] [rbp-110h]
  std::shared_ptr<Avatar> __a; // [rsp+30h] [rbp-C0h] BYREF
  Scene::getAvatarsInRange::<lambda(Player&)> __f; // [rsp+40h] [rbp-B0h]
  std::function<ForeachPolicy(Player&)> p_func; // [rsp+60h] [rbp-90h] BYREF
  char v15[112]; // [rsp+80h] [rbp-70h] BYREF

  v4 = (unsigned __int64)v15;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v5 = __asan_stack_malloc_0(64LL);
    if ( v5 )
      v4 = v5;
  }
  *(_QWORD *)v4 = 1102416563LL;
  *(_QWORD *)(v4 + 8) = "1 32 16 15 player_ptr:2084";
  *(_QWORD *)(v4 + 16) = Scene::getAvatarsInRange;
  v6 = v4 >> 3;
  *(_DWORD *)(v6 + 2147450880) = -235802127;
  *(_DWORD *)(v6 + 2147450884) = -202178560;
  Scene::getOwnPlayer((const Scene *const)(v4 + 32));
  v7 = 0;
  v9 = 0;
  if ( std::operator!=<Player>((const std::shared_ptr<Player> *)(v4 + 32), 0LL) )
  {
    v8 = std::__shared_ptr_access<Player,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Player,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 32));
    if ( Player::getIsInSimulation(v8) )
    {
      std::__shared_ptr_access<Player,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Player,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 32));
      Player::getCurAvatar((Player *const)&__a);
      v7 = 1;
      if ( std::operator!=<Avatar>(&__a, 0LL) )
        v9 = 1;
    }
  }
  if ( v7 )
    std::shared_ptr<Avatar>::~shared_ptr(&__a);
  if ( v9 )
  {
    std::__shared_ptr_access<Player,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Player,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 32));
    Player::getCurAvatar((Player *const)&__a);
    std::vector<std::shared_ptr<Avatar>>::push_back(avatar_vec, &__a);
    std::shared_ptr<Avatar>::~shared_ptr(&__a);
  }
  else
  {
    __f.__pos = pos;
    __f.__avatar_vec = avatar_vec;
    __f.__vision_range = vision_range;
    *(_OWORD *)&v10.__avatar_vec = __PAIR128__(*(unsigned __int64 *)&__f.__vision_range, (unsigned __int64)avatar_vec);
    v10.__pos = pos;
    std::function<ForeachPolicy ()(Player &)>::function<Scene::getAvatarsInRange(Vector3 const&,std::vector<std::shared_ptr<Avatar>> &,float)::{lambda(Player &)#1},void,void>(
      &p_func,
      v10);
    Scene::foreachPlayer(this, &p_func);
    std::function<ForeachPolicy ()(Player &)>::~function(&p_func);
  }
  std::shared_ptr<Player>::~shared_ptr((std::shared_ptr<Player> *const)(v4 + 32));
  if ( v15 == (char *)v4 )
  {
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0LL;
  }
  else
  {
    *(_QWORD *)v4 = 1172321806LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
  }
};

// Line 2091: range 00000000159830E0-00000000159832D0
ForeachPolicy __cdecl Scene::getAvatarsInRange(Vector3 const&,std::vector<std::shared_ptr<Avatar>> &,float)::{lambda(Player &)#1}::operator()(
        const Scene::getAvatarsInRange::<lambda(Player&)> *const __closure,
        Player *player)
{
  unsigned __int64 v2; // rbx
  __int64 v3; // rax
  unsigned __int64 v4; // r13
  const Vector3 *pos; // r14
  std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v6; // rax
  const Vector3 *Position; // rax
  float Distance; // xmm0_4
  char v9; // al
  ForeachPolicy result; // eax
  char v11[112]; // [rsp+10h] [rbp-70h] BYREF

  v2 = (unsigned __int64)v11;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_0(64LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "1 32 16 15 avatar_ptr:2093";
  *(_QWORD *)(v2 + 16) = Scene::getAvatarsInRange(Vector3 const&,std::vector<std::shared_ptr<Avatar>> &,float)::{lambda(Player &)#1}::operator();
  v4 = v2 >> 3;
  *(_DWORD *)(v4 + 2147450880) = -235802127;
  *(_DWORD *)(v4 + 2147450884) = -202178560;
  Player::getCurAvatar((Player *const)(v2 + 32));
  if ( !std::operator!=<Avatar>((const std::shared_ptr<Avatar> *)(v2 + 32), 0LL) )
    goto LABEL_11;
  if ( *(_BYTE *)(((unsigned __int64)__closure >> 3) + 0x7FFF8000) )
    __asan_report_load8();
  pos = __closure->__pos;
  v6 = std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 32));
  Position = Entity::getPosition((const Entity *const)v6);
  Distance = getDistance(Position, pos);
  if ( *(_BYTE *)(((unsigned __int64)&__closure->__vision_range >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&__closure->__vision_range >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4(&__closure->__vision_range);
  }
  if ( __closure->__vision_range > Distance )
    v9 = 1;
  else
LABEL_11:
    v9 = 0;
  if ( v9 )
  {
    if ( *(_BYTE *)(((unsigned __int64)&__closure->__avatar_vec >> 3) + 0x7FFF8000) )
      __asan_report_load8();
    std::vector<std::shared_ptr<Avatar>>::push_back(
      __closure->__avatar_vec,
      (const std::vector<std::shared_ptr<Avatar>>::value_type *)(v2 + 32));
  }
  std::shared_ptr<Avatar>::~shared_ptr((std::shared_ptr<Avatar> *const)(v2 + 32));
  result = FOREACH_CONTINUE;
  if ( v11 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 2104: range 00000000159835A6-0000000015984DEF
int32_t __cdecl Scene::entityAppear(Scene *const this, Entity *entity, const VisionContext *context)
{
  int32_t v3; // r14d
  unsigned __int64 v4; // r13
  __int64 v5; // rax
  _DWORD *v6; // r12
  std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v7; // rax
  common::milog::MiLogStream *v8; // r15
  std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v9; // rax
  common::milog::MiLogStream *v10; // rdx
  std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v11; // rdx
  uint32_t *p_error_scene_entity_limit_num; // rax
  common::milog::MiLogStream *v13; // r14
  std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v14; // rax
  common::milog::MiLogStream *v15; // rdx
  unsigned __int64 SightComp; // rax
  unsigned __int64 v17; // rdx
  common::milog::MiLogStream *v18; // rdx
  std::__shared_ptr_access<Entity,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v19; // rax
  unsigned int EntityId; // eax
  common::tools::StringStream<common::tools::FixedBuffer<4096> > *v21; // rax
  common::milog::MiLogStream *v22; // r15
  common::milog::MiLogStream *v23; // rax
  common::milog::MiLogStream *v24; // rdx
  common::milog::MiLogStream *v25; // rax
  common::milog::MiLogStream *v26; // r15
  const Coordinate *Coordinate; // rax
  unsigned int *v28; // rcx
  std::shared_ptr<Entity> *v29; // r8
  std::pair<std::__detail::_Node_iterator<std::pair<unsigned int const,std::shared_ptr<Entity> >,false,false>,bool> v30; // rax
  common::milog::MiLogStream *v31; // rdx
  unsigned __int64 v32; // rax
  int v33; // r15d
  unsigned __int64 v34; // rax
  std::__shared_ptr_access<Player,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v35; // rax
  Avatar *v36; // rax
  std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v37; // rax
  unsigned __int64 Position; // rax
  std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v39; // rax
  unsigned __int64 Rotation; // rax
  std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v41; // rax
  unsigned __int64 LastValidPos; // rax
  std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v43; // rax
  unsigned __int64 LastValidRot; // rax
  Avatar *v45; // rax
  Avatar *v46; // rax
  unsigned __int64 v47; // rax
  std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v48; // rax
  bool v49; // r14
  std::__shared_ptr_access<Player,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v50; // rax
  int Uid; // eax
  PlayerViewMgr *v52; // rax
  common::milog::MiLogStream *v53; // r14
  std::__shared_ptr_access<Player,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v54; // rax
  std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v55; // rax
  EntitySightGroup *v57; // rax
  EntitySightGroup *v58; // rax
  std::__shared_ptr_access<Player,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v59; // rax
  unsigned int *M_current; // r14
  std::vector<unsigned int>::iterator v61; // rax
  Player *v62; // rsi
  std::shared_ptr<Entity> *i; // r14
  Player *v65; // rsi
  int32_t result; // eax
  std::initializer_list<std::shared_ptr<Entity> > __l; // [rsp+0h] [rbp-380h]
  std::allocator<std::shared_ptr<Entity> > __a; // [rsp+36h] [rbp-34Ah] BYREF
  bool is_replace; // [rsp+37h] [rbp-349h]
  uint32_t size; // [rsp+38h] [rbp-348h]
  proto::ProtEntityType entity_type; // [rsp+3Ch] [rbp-344h]
  std::vector<std::shared_ptr<Player>>::iterator __for_begin_0; // [rsp+40h] [rbp-340h] BYREF
  std::vector<std::shared_ptr<Player>>::iterator __for_end_0; // [rsp+48h] [rbp-338h] BYREF
  std::vector<std::shared_ptr<Entity>>::iterator __for_begin; // [rsp+50h] [rbp-330h] BYREF
  std::vector<std::shared_ptr<Entity>>::iterator __for_end; // [rsp+58h] [rbp-328h] BYREF
  std::vector<std::shared_ptr<Entity>> *__for_range; // [rsp+60h] [rbp-320h]
  std::vector<std::shared_ptr<Player>> *__for_range_0; // [rsp+68h] [rbp-318h]
  std::shared_ptr<Player> *group_view_player_ptr; // [rsp+70h] [rbp-310h]
  const std::shared_ptr<Entity> *entity_ptr; // [rsp+78h] [rbp-308h]
  std::shared_ptr<Player> __r; // [rsp+80h] [rbp-300h] BYREF
  std::vector<std::shared_ptr<Player>> v83; // [rsp+90h] [rbp-2F0h] BYREF
  std::vector<std::shared_ptr<Entity>> entity_vec; // [rsp+B0h] [rbp-2D0h] BYREF
  common::milog::MiLogStream v85; // [rsp+D0h] [rbp-2B0h] BYREF
  std::string val; // [rsp+F0h] [rbp-290h] BYREF
  common::milog::MiLogStream v87; // [rsp+110h] [rbp-270h] BYREF
  char v88[592]; // [rsp+130h] [rbp-250h] BYREF

  v4 = (unsigned __int64)v88;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v5 = __asan_stack_malloc_4(544LL);
    if ( v5 )
      v4 = v5;
  }
  *(_QWORD *)v4 = 1102416563LL;
  *(_QWORD *)(v4 + 8) = "12 32 4 8 uid:2157 48 12 19 appear_context:2214 80 16 15 config_ptr:2105 112 16 8 oss:2127 144 1"
                        "6 15 player_ptr:2140 176 16 15 entity_ptr:2200 208 16 31 preinstall_sight_group_ptr:2201 240 16 "
                        "15 avatar_ptr:2144 272 20 16 check_param:2227 336 24 20 meet_entity_vec:2120 400 24 12 uid_vec:2"
                        "134 464 48 20 player_location:2161";
  *(_QWORD *)(v4 + 16) = Scene::entityAppear;
  v6 = (_DWORD *)(v4 >> 3);
  v6[536862720] = -235802127;
  v6[536862721] = 61956;
  v6[536862721] = 0x4000000;
  v6[536862722] = 62194;
  v6[536862723] = 62194;
  v6[536862724] = 62194;
  v6[536862725] = 62194;
  v6[536862726] = 62194;
  v6[536862727] = 62194;
  v6[536862728] = 62194;
  v6[536862729] = -218959356;
  v6[536862730] = 62194;
  v6[536862731] = -218959360;
  v6[536862732] = 62194;
  v6[536862733] = -218959360;
  v6[536862734] = 62194;
  v6[536862736] = -202116109;
  ServiceBox::findService<GameserverService>();
  GameserverService::getConfig((GameserverService *const)(v4 + 80));
  if ( std::operator!=<Config>((const std::shared_ptr<Config> *)(v4 + 80), 0LL) )
  {
    size = std::unordered_map<unsigned int,std::shared_ptr<Entity>>::size(&this->entity_map_);
    v7 = std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 80));
    if ( *(_BYTE *)(((unsigned __int64)&v7->warn_scene_entity_limit_num >> 3) + 0x7FFF8000) != 0
      && *(_BYTE *)(((unsigned __int64)&v7->warn_scene_entity_limit_num >> 3) + 0x7FFF8000) <= 3 )
    {
      v7 = (std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *)__asan_report_load4(&v7->warn_scene_entity_limit_num);
    }
    if ( size >= v7->warn_scene_entity_limit_num )
    {
      common::milog::MiLogStream::create(
        &v87,
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/scene/scene.cpp",
        "entityAppear",
        2111);
      v8 = common::milog::MiLogStream::operator<<<char [32],(char *[32])0>(
             &v87,
             (const char (*)[32])"EntityMap size >= WarnLimitNum:");
      v9 = std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 80));
      v10 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v8, &v9->warn_scene_entity_limit_num);
      common::milog::MiLogStream::operator<<<Scene,(Scene*)0>(v10, this);
      common::milog::MiLogStream::~MiLogStream(&v87);
    }
    v11 = std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 80));
    p_error_scene_entity_limit_num = &v11->error_scene_entity_limit_num;
    if ( *(_BYTE *)(((unsigned __int64)p_error_scene_entity_limit_num >> 3) + 0x7FFF8000) != 0
      && (char)(((unsigned __int8)p_error_scene_entity_limit_num & 7) + 3) >= *(_BYTE *)(((unsigned __int64)p_error_scene_entity_limit_num >> 3)
                                                                                       + 0x7FFF8000) )
    {
      __asan_report_load4(p_error_scene_entity_limit_num);
    }
    if ( size >= v11->error_scene_entity_limit_num )
    {
      common::milog::MiLogStream::create(
        &v87,
        &common::milog::MiLogDefault::default_log_obj_,
        4u,
        "./src/scene/scene.cpp",
        "entityAppear",
        2115);
      v13 = common::milog::MiLogStream::operator<<<char [33],(char *[33])0>(
              &v87,
              (const char (*)[33])"EntityMap size >= ErrorLimitNum:");
      v14 = std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 80));
      v15 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
              v13,
              &v14->error_scene_entity_limit_num);
      common::milog::MiLogStream::operator<<<Scene,(Scene*)0>(v15, this);
      common::milog::MiLogStream::~MiLogStream(&v87);
      v3 = -1;
      goto LABEL_94;
    }
  }
  std::vector<std::shared_ptr<Entity>>::vector((std::vector<std::shared_ptr<Entity>> *const)(v4 + 336));
  SightComp = (unsigned __int64)Scene::getSightComp(this);
  if ( *(_BYTE *)((SightComp >> 3) + 0x7FFF8000) )
    SightComp = __asan_report_load8();
  v17 = *(_QWORD *)SightComp + 56LL;
  if ( *(_BYTE *)((v17 >> 3) + 0x7FFF8000) )
    SightComp = __asan_report_load8();
  if ( !(*(unsigned int (__fastcall **)(unsigned __int64, Entity *, unsigned __int64))v17)(SightComp, entity, v4 + 336) )
  {
    common::tools::StringStream<common::tools::FixedBuffer<4096>>::StringStream((common::tools::StringStream<common::tools::FixedBuffer<4096> > *const)(v4 + 112));
    __for_range = (std::vector<std::shared_ptr<Entity>> *)(v4 + 336);
    __for_begin._M_current = std::vector<std::shared_ptr<Entity>>::begin((std::vector<std::shared_ptr<Entity>> *const)(v4 + 336))._M_current;
    __for_end._M_current = std::vector<std::shared_ptr<Entity>>::end((std::vector<std::shared_ptr<Entity>> *const)(v4 + 336))._M_current;
    while ( __gnu_cxx::operator!=<std::shared_ptr<Entity> *,std::vector<std::shared_ptr<Entity>>>(
              &__for_begin,
              &__for_end) )
    {
      entity_ptr = __gnu_cxx::__normal_iterator<std::shared_ptr<Entity> *,std::vector<std::shared_ptr<Entity>>>::operator*(&__for_begin);
      v19 = std::__shared_ptr_access<Entity,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Entity,(__gnu_cxx::_Lock_policy)2,false,false> *const)entity_ptr);
      EntityId = Entity::getEntityId(v19);
      v21 = common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(
              (common::tools::StringStream<common::tools::FixedBuffer<4096> > *const)(v4 + 112),
              EntityId);
      common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(v21, ",");
      __gnu_cxx::__normal_iterator<std::shared_ptr<Entity> *,std::vector<std::shared_ptr<Entity>>>::operator++(&__for_begin);
    }
    common::milog::MiLogStream::create(
      &v85,
      &common::milog::MiLogDefault::default_log_obj_,
      1u,
      "./src/scene/scene.cpp",
      "entityAppear",
      2132);
    v22 = common::milog::MiLogStream::operator<<<char [23],(char *[23])0>(
            &v85,
            (const char (*)[23])"[FY] meet entity vec: ");
    common::tools::StringStream<common::tools::FixedBuffer<4096>>::str[abi:cxx11](
      &val,
      (common::tools::StringStream<common::tools::FixedBuffer<4096> > *const)(v4 + 112));
    v23 = common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v22, &val);
    v24 = common::milog::MiLogStream::operator<<<char [2],(char *[2])0>(v23, (const char (*)[2])" ");
    v25 = common::milog::MiLogStream::operator<<<Entity,(Entity*)0>(v24, entity);
    v26 = common::milog::MiLogStream::operator<<<char [4],(char *[4])0>(v25, (const char (*)[4])" @ ");
    Coordinate = Entity::getCoordinate(entity);
    Coordinate::toString[abi:cxx11]((std::string *)&v87, Coordinate);
    common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v26, (const std::string *)&v87);
    std::string::~string(&v87);
    std::string::~string(&val);
    common::milog::MiLogStream::~MiLogStream(&v85);
    Scene::getPlayerUidVecByViewEntity(
      (std::vector<unsigned int> *)(v4 + 400),
      this,
      (const std::vector<std::shared_ptr<Entity>> *)(v4 + 336),
      0);
    toThisPtr<Entity>((Entity *)(v4 + 240));
    *(_DWORD *)(v4 + 32) = Entity::getEntityId(entity);
    v30 = std::unordered_map<unsigned int,std::shared_ptr<Entity>>::emplace<unsigned int,std::shared_ptr<Entity>>(
            &this->entity_map_,
            (unsigned int *)(v4 + 32),
            (std::shared_ptr<Entity> *)(v4 + 240),
            v28,
            v29);
    LOBYTE(v26) = !v30.second;
    std::shared_ptr<Entity>::~shared_ptr((std::shared_ptr<Entity> *const)(v4 + 240));
    if ( (_BYTE)v26 )
    {
      common::milog::MiLogStream::create(
        &v87,
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/scene/scene.cpp",
        "entityAppear",
        2137);
      v31 = common::milog::MiLogStream::operator<<<char [23],(char *[23])0>(
              &v87,
              (const char (*)[23])"entity already exists:");
      common::milog::MiLogStream::operator<<<Entity,(Entity*)0>(v31, entity);
      common::milog::MiLogStream::~MiLogStream(&v87);
      v3 = -1;
LABEL_92:
      std::vector<unsigned int>::~vector((std::vector<unsigned int> *const)(v4 + 400));
      common::tools::StringStream<common::tools::FixedBuffer<4096>>::~StringStream((common::tools::StringStream<common::tools::FixedBuffer<4096> > *const)(v4 + 112));
      goto LABEL_93;
    }
    *(_QWORD *)(v4 + 144) = 0LL;
    *(_QWORD *)(v4 + 152) = 0LL;
    if ( *(_BYTE *)(((unsigned __int64)entity >> 3) + 0x7FFF8000) )
      __asan_report_load8();
    v32 = (unsigned __int64)(entity->_vptr_DescribalBase + 3);
    if ( *(_BYTE *)((v32 >> 3) + 0x7FFF8000) )
      v32 = __asan_report_load8();
    entity_type = (*(unsigned int (__fastcall **)(Entity *))v32)(entity);
    if ( entity_type == PROT_ENTITY_AVATAR )
    {
      toPtr<Avatar,Entity>((Entity *)(v4 + 240));
      if ( std::operator==<Avatar>((const std::shared_ptr<Avatar> *)(v4 + 240), 0LL) )
      {
        common::milog::MiLogStream::create(
          &v87,
          &common::milog::MiLogDefault::default_log_obj_,
          4u,
          "./src/scene/scene.cpp",
          "entityAppear",
          2147);
        common::milog::MiLogStream::operator<<<char [22],(char *[22])0>(
          &v87,
          (const char (*)[22])"avatar_ptr is nullptr");
        common::milog::MiLogStream::~MiLogStream(&v87);
        v3 = -1;
        v33 = 0;
      }
      else
      {
        if ( *(_BYTE *)(((unsigned __int64)entity >> 3) + 0x7FFF8000) )
          __asan_report_load8();
        v34 = (unsigned __int64)(entity->_vptr_DescribalBase + 19);
        if ( *(_BYTE *)((v34 >> 3) + 0x7FFF8000) )
          v34 = __asan_report_load8();
        (*(void (__fastcall **)(std::shared_ptr<Player> *, Entity *))v34)(&__r, entity);
        std::shared_ptr<Player>::operator=((std::shared_ptr<Player> *const)(v4 + 144), &__r);
        std::shared_ptr<Player>::~shared_ptr(&__r);
        if ( std::operator==<Player>((const std::shared_ptr<Player> *)(v4 + 144), 0LL) )
        {
          common::milog::MiLogStream::create(
            &v87,
            &common::milog::MiLogDefault::default_log_obj_,
            4u,
            "./src/scene/scene.cpp",
            "entityAppear",
            2153);
          common::milog::MiLogStream::operator<<<char [22],(char *[22])0>(
            &v87,
            (const char (*)[22])"player_ptr is nullptr");
          common::milog::MiLogStream::~MiLogStream(&v87);
          v3 = -1;
          v33 = 0;
        }
        else
        {
          v35 = std::__shared_ptr_access<Player,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Player,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 144));
          *(_DWORD *)(v4 + 32) = Player::getUid(v35);
          std::vector<unsigned int>::push_back(
            (std::vector<unsigned int> *const)(v4 + 400),
            (const std::vector<unsigned int>::value_type *)(v4 + 32));
          v36 = std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 240));
          Avatar::startTimer(v36);
          ScenePlayerLocation::ScenePlayerLocation((ScenePlayerLocation *const)(v4 + 464));
          v37 = std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 240));
          Position = (unsigned __int64)Entity::getPosition((const Entity *const)v37);
          if ( (char)(Position & 7) >= *(_BYTE *)((Position >> 3) + 0x7FFF8000)
            && *(_BYTE *)((Position >> 3) + 0x7FFF8000) != 0
            || *(_BYTE *)(((Position + 11) >> 3) + 0x7FFF8000) != 0
            && (char)((Position + 11) & 7) >= *(_BYTE *)(((Position + 11) >> 3) + 0x7FFF8000) )
          {
            Position = __asan_report_load_n(Position, 12LL);
          }
          *(_QWORD *)(v4 + 464) = *(_QWORD *)Position;
          *(_DWORD *)(v4 + 472) = *(_DWORD *)(Position + 8);
          v39 = std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 240));
          Rotation = (unsigned __int64)Entity::getRotation((const Entity *const)v39);
          if ( (char)(Rotation & 7) >= *(_BYTE *)((Rotation >> 3) + 0x7FFF8000)
            && *(_BYTE *)((Rotation >> 3) + 0x7FFF8000) != 0
            || *(_BYTE *)(((Rotation + 11) >> 3) + 0x7FFF8000) != 0
            && (char)((Rotation + 11) & 7) >= *(_BYTE *)(((Rotation + 11) >> 3) + 0x7FFF8000) )
          {
            Rotation = __asan_report_load_n(Rotation, 12LL);
          }
          *(_QWORD *)(v4 + 476) = *(_QWORD *)Rotation;
          *(_DWORD *)(v4 + 484) = *(_DWORD *)(Rotation + 8);
          v41 = std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 240));
          LastValidPos = (unsigned __int64)Avatar::getLastValidPos(v41);
          if ( (char)(LastValidPos & 7) >= *(_BYTE *)((LastValidPos >> 3) + 0x7FFF8000)
            && *(_BYTE *)((LastValidPos >> 3) + 0x7FFF8000) != 0
            || *(_BYTE *)(((LastValidPos + 11) >> 3) + 0x7FFF8000) != 0
            && (char)((LastValidPos + 11) & 7) >= *(_BYTE *)(((LastValidPos + 11) >> 3) + 0x7FFF8000) )
          {
            LastValidPos = __asan_report_load_n(LastValidPos, 12LL);
          }
          *(_QWORD *)(v4 + 488) = *(_QWORD *)LastValidPos;
          *(_DWORD *)(v4 + 496) = *(_DWORD *)(LastValidPos + 8);
          v43 = std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 240));
          LastValidRot = (unsigned __int64)Avatar::getLastValidRot(v43);
          if ( (char)(LastValidRot & 7) >= *(_BYTE *)((LastValidRot >> 3) + 0x7FFF8000)
            && *(_BYTE *)((LastValidRot >> 3) + 0x7FFF8000) != 0
            || *(_BYTE *)(((LastValidRot + 11) >> 3) + 0x7FFF8000) != 0
            && (char)((LastValidRot + 11) & 7) >= *(_BYTE *)(((LastValidRot + 11) >> 3) + 0x7FFF8000) )
          {
            LastValidRot = __asan_report_load_n(LastValidRot, 12LL);
          }
          *(_QWORD *)(v4 + 500) = *(_QWORD *)LastValidRot;
          *(_DWORD *)(v4 + 508) = *(_DWORD *)(LastValidRot + 8);
          Scene::setPlayerLocation(this, *(_DWORD *)(v4 + 32), (const ScenePlayerLocation *)(v4 + 464));
          v45 = std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 240));
          Avatar::setLastValidPos(v45, (const Vector3 *)(v4 + 488));
          v46 = std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 240));
          Avatar::setLastValidRot(v46, (const Vector3 *)(v4 + 500));
          v33 = 1;
        }
      }
      std::shared_ptr<Avatar>::~shared_ptr((std::shared_ptr<Avatar> *const)(v4 + 240));
      if ( v33 != 1 )
        goto LABEL_91;
    }
    else if ( entity_type == PROT_ENTITY_EYE_POINT )
    {
      if ( *(_BYTE *)(((unsigned __int64)entity >> 3) + 0x7FFF8000) )
        __asan_report_load8();
      v47 = (unsigned __int64)(entity->_vptr_DescribalBase + 19);
      if ( *(_BYTE *)((v47 >> 3) + 0x7FFF8000) )
        v47 = __asan_report_load8();
      (*(void (__fastcall **)(unsigned __int64, Entity *))v47)(v4 + 240, entity);
      std::shared_ptr<Player>::operator=(
        (std::shared_ptr<Player> *const)(v4 + 144),
        (std::shared_ptr<Player> *)(v4 + 240));
      std::shared_ptr<Player>::~shared_ptr((std::shared_ptr<Player> *const)(v4 + 240));
      if ( std::operator==<Player>((const std::shared_ptr<Player> *)(v4 + 144), 0LL) )
      {
        common::milog::MiLogStream::create(
          &v87,
          &common::milog::MiLogDefault::default_log_obj_,
          4u,
          "./src/scene/scene.cpp",
          "entityAppear",
          2175);
        common::milog::MiLogStream::operator<<<char [22],(char *[22])0>(
          &v87,
          (const char (*)[22])"player_ptr is nullptr");
        common::milog::MiLogStream::~MiLogStream(&v87);
        v3 = -1;
LABEL_91:
        std::shared_ptr<Player>::~shared_ptr((std::shared_ptr<Player> *const)(v4 + 144));
        goto LABEL_92;
      }
      ServiceBox::findService<GameserverService>();
      GameserverService::getConfig((GameserverService *const)(v4 + 240));
      v48 = std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 240));
      v49 = !FeatureSwitchMgr::isEyePointAsEyeClosed(&v48->feature_switch_mgr);
      std::shared_ptr<Config>::~shared_ptr((std::shared_ptr<Config> *const)(v4 + 240));
      if ( v49 )
      {
        v50 = std::__shared_ptr_access<Player,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Player,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 144));
        Uid = Player::getUid(v50);
        Scene::findPlayerViewMgr((const Scene *const)(v4 + 240), (__int64)this, Uid);
        if ( std::operator!=<PlayerViewMgr>((const std::shared_ptr<PlayerViewMgr> *)(v4 + 240), 0LL) )
        {
          v52 = std::__shared_ptr_access<PlayerViewMgr,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<PlayerViewMgr,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 240));
          PlayerViewMgr::clearViewContainer(v52);
        }
        else
        {
          common::milog::MiLogStream::create(
            &v87,
            &common::milog::MiLogDefault::default_log_obj_,
            3u,
            "./src/scene/scene.cpp",
            "entityAppear",
            2188);
          v53 = common::milog::MiLogStream::operator<<<char [34],(char *[34])0>(
                  &v87,
                  (const char (*)[34])"player_view_mgr_ptr is null. uid:");
          v54 = std::__shared_ptr_access<Player,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Player,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 144));
          *(_DWORD *)(v4 + 32) = Player::getUid(v54);
          common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v53, (const unsigned int *)(v4 + 32));
          common::milog::MiLogStream::~MiLogStream(&v87);
        }
        std::shared_ptr<PlayerViewMgr>::~shared_ptr((std::shared_ptr<PlayerViewMgr> *const)(v4 + 240));
      }
      std::__shared_ptr_access<Player,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Player,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 144));
      Player::getCurAvatar((Player *const)(v4 + 208));
      if ( std::operator!=<Avatar>((const std::shared_ptr<Avatar> *)(v4 + 208), 0LL) )
      {
        v55 = std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 208));
        if ( Entity::isOnScene((const Entity *const)v55) )
        {
          std::shared_ptr<Entity>::shared_ptr<Avatar,void>(
            (std::shared_ptr<Entity> *const)(v4 + 240),
            (const std::shared_ptr<Avatar> *)(v4 + 208));
          std::vector<std::shared_ptr<Entity>>::push_back(
            (std::vector<std::shared_ptr<Entity>> *const)(v4 + 336),
            (std::vector<std::shared_ptr<Entity>>::value_type *)(v4 + 240));
          std::shared_ptr<Entity>::~shared_ptr((std::shared_ptr<Entity> *const)(v4 + 240));
        }
      }
      std::shared_ptr<Avatar>::~shared_ptr((std::shared_ptr<Avatar> *const)(v4 + 208));
    }
    toThisPtr<Entity>((Entity *)(v4 + 176));
    Entity::getPreIntallSightGroup((const Entity *const)(v4 + 208));
    if ( std::operator!=<EntitySightGroup>((const std::shared_ptr<EntitySightGroup> *)(v4 + 208), 0LL) )
    {
      v57 = std::__shared_ptr_access<EntitySightGroup,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<EntitySightGroup,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 208));
      EntitySightGroup::addEntityInSightGroup(v57, (const EntityPtr *)(v4 + 176));
      v58 = std::__shared_ptr_access<EntitySightGroup,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<EntitySightGroup,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 208));
      EntitySightGroup::validateAndGetViewingPlayers(&v83, v58);
      __for_range_0 = &v83;
      __for_begin_0._M_current = std::vector<std::shared_ptr<Player>>::begin(&v83)._M_current;
      __for_end_0._M_current = std::vector<std::shared_ptr<Player>>::end(__for_range_0)._M_current;
      while ( __gnu_cxx::operator!=<std::shared_ptr<Player> *,std::vector<std::shared_ptr<Player>>>(
                &__for_begin_0,
                &__for_end_0) )
      {
        group_view_player_ptr = __gnu_cxx::__normal_iterator<std::shared_ptr<Player> *,std::vector<std::shared_ptr<Player>>>::operator*(&__for_begin_0);
        __for_end._M_current = (std::shared_ptr<Entity> *)std::vector<unsigned int>::end((std::vector<unsigned int> *const)(v4 + 400))._M_current;
        v59 = std::__shared_ptr_access<Player,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Player,(__gnu_cxx::_Lock_policy)2,false,false> *const)group_view_player_ptr);
        *(_DWORD *)(v4 + 32) = Player::getUid(v59);
        M_current = std::vector<unsigned int>::end((std::vector<unsigned int> *const)(v4 + 400))._M_current;
        v61._M_current = std::vector<unsigned int>::begin((std::vector<unsigned int> *const)(v4 + 400))._M_current;
        __for_begin._M_current = (std::shared_ptr<Entity> *)std::find<__gnu_cxx::__normal_iterator<unsigned int *,std::vector<unsigned int>>,unsigned int>(
                                                              v61,
                                                              (__gnu_cxx::__normal_iterator<unsigned int*,std::vector<unsigned int> >)M_current,
                                                              (const unsigned int *)(v4 + 32))._M_current;
        if ( __gnu_cxx::operator==<unsigned int *,std::vector<unsigned int>>(
               (const __gnu_cxx::__normal_iterator<unsigned int*,std::vector<unsigned int> > *)&__for_begin,
               (const __gnu_cxx::__normal_iterator<unsigned int*,std::vector<unsigned int> > *)&__for_end) )
        {
          std::shared_ptr<Entity>::shared_ptr(
            (std::shared_ptr<Entity> *const)(v4 + 240),
            (const std::shared_ptr<Entity> *)(v4 + 176));
          __l._M_array = (std::initializer_list<std::shared_ptr<Entity> >::iterator)(v4 + 240);
          __l._M_len = 1LL;
          std::allocator<std::shared_ptr<Entity>>::allocator(&__a);
          std::vector<std::shared_ptr<Entity>>::vector(&entity_vec, __l, &__a);
          v62 = std::__shared_ptr_access<Player,(__gnu_cxx::_Lock_policy)2,false,false>::operator*((const std::__shared_ptr_access<Player,(__gnu_cxx::_Lock_policy)2,false,false> *const)group_view_player_ptr);
          Scene::notifyEntityAppear(this, v62, &entity_vec, context);
          std::vector<std::shared_ptr<Entity>>::~vector(&entity_vec);
          std::allocator<std::shared_ptr<Entity>>::~allocator(&__a);
          for ( i = (std::shared_ptr<Entity> *)(v4 + 256);
                i != (std::shared_ptr<Entity> *)(v4 + 240);
                std::shared_ptr<Entity>::~shared_ptr(i) )
          {
            --i;
          }
        }
        __gnu_cxx::__normal_iterator<std::shared_ptr<Player> *,std::vector<std::shared_ptr<Player>>>::operator++(&__for_begin_0);
      }
      std::vector<std::shared_ptr<Player>>::~vector(&v83);
      std::__shared_ptr<EntitySightGroup,(__gnu_cxx::_Lock_policy)2>::reset((std::__shared_ptr<EntitySightGroup,(__gnu_cxx::_Lock_policy)2> *const)(v4 + 208));
    }
    if ( ((unsigned __int8)context & 7) >= *(_BYTE *)(((unsigned __int64)context >> 3) + 0x7FFF8000)
      && *(_BYTE *)(((unsigned __int64)context >> 3) + 0x7FFF8000) != 0
      || *(_BYTE *)((((unsigned __int64)&context->exclude_uid + 3) >> 3) + 0x7FFF8000) != 0
      && (((unsigned __int8)context + 11) & 7) >= *(_BYTE *)((((unsigned __int64)&context->exclude_uid + 3) >> 3)
                                                           + 0x7FFF8000) )
    {
      __asan_report_load_n(context, 12LL);
    }
    *(_QWORD *)(v4 + 48) = *(_QWORD *)&context->type;
    *(_DWORD *)(v4 + 56) = context->exclude_uid;
    if ( *(_DWORD *)(v4 + 48) == 1 )
      *(_DWORD *)(v4 + 48) = 12;
    Scene::entityEnterPlayersSightRange(
      this,
      (const std::vector<unsigned int> *)(v4 + 400),
      (const EntityPtr *)(v4 + 176),
      (const VisionContext *)(v4 + 48));
    if ( *(_BYTE *)(((unsigned __int64)context >> 3) + 0x7FFF8000) != 0
      && (char)(((unsigned __int8)context & 7) + 3) >= *(_BYTE *)(((unsigned __int64)context >> 3) + 0x7FFF8000) )
    {
      __asan_report_load4(context);
    }
    is_replace = SceneUtils::isVisionTypeReplace(context->type);
    if ( !is_replace && std::operator!=<Player>((const std::shared_ptr<Player> *)(v4 + 144), 0LL) )
    {
      v65 = std::__shared_ptr_access<Player,(__gnu_cxx::_Lock_policy)2,false,false>::operator*((const std::__shared_ptr_access<Player,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 144));
      Scene::entitiesEnterPlayerSightRange(this, v65, (const std::vector<std::shared_ptr<Entity>> *)(v4 + 336), context);
    }
    CheckRegionParam::CheckRegionParam((CheckRegionParam *const)(v4 + 272), CHECK_REGION_BORN);
    if ( *(_BYTE *)(((unsigned __int64)context >> 3) + 0x7FFF8000) != 0
      && (char)(((unsigned __int8)context & 7) + 3) >= *(_BYTE *)(((unsigned __int64)context >> 3) + 0x7FFF8000) )
    {
      __asan_report_load4(context);
    }
    Scene::checkRegion(this, entity, context->type, (const CheckRegionParam *)(v4 + 272));
    v3 = 0;
    std::shared_ptr<EntitySightGroup>::~shared_ptr((std::shared_ptr<EntitySightGroup> *const)(v4 + 208));
    std::shared_ptr<Entity>::~shared_ptr((std::shared_ptr<Entity> *const)(v4 + 176));
    goto LABEL_91;
  }
  common::milog::MiLogStream::create(
    &v87,
    &common::milog::MiLogDefault::default_log_obj_,
    4u,
    "./src/scene/scene.cpp",
    "entityAppear",
    2123);
  v18 = common::milog::MiLogStream::operator<<<char [18],(char *[18])0>(&v87, (const char (*)[18])"placeEntity fails");
  common::milog::MiLogStream::operator<<<Entity,(Entity*)0>(v18, entity);
  common::milog::MiLogStream::~MiLogStream(&v87);
  v3 = -1;
LABEL_93:
  std::vector<std::shared_ptr<Entity>>::~vector((std::vector<std::shared_ptr<Entity>> *const)(v4 + 336));
LABEL_94:
  std::shared_ptr<Config>::~shared_ptr((std::shared_ptr<Config> *const)(v4 + 80));
  result = v3;
  if ( v88 == (char *)v4 )
  {
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8008) = 0LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8010) = 0LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8018) = 0LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8020) = 0LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8028) = 0LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8030) = 0LL;
    *(_DWORD *)((v4 >> 3) + 0x7FFF8038) = 0;
    *(_DWORD *)((v4 >> 3) + 0x7FFF8040) = 0;
  }
  else
  {
    *(_QWORD *)v4 = 1172321806LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8020) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8028) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8030) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8038) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v4 >> 3) + 0x7FFF8040) = -168430091;
  }
  return result;
};

// Line 2234: range 0000000015984DF0-000000001598600E
int32_t __cdecl Scene::entityDisappear(Scene *const this, Entity *entity, const VisionContext *context)
{
  unsigned __int64 v3; // r13
  __int64 v4; // rax
  _DWORD *v5; // r12
  common::milog::MiLogStream *v6; // rdx
  int32_t v7; // r14d
  bool v8; // r14
  common::milog::MiLogStream *v9; // rdx
  unsigned __int64 SightComp; // rax
  unsigned __int64 v11; // rdx
  common::milog::MiLogStream *v12; // rdx
  EntityViewMgr *ViewMgr; // rax
  std::__shared_ptr_access<Player,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v14; // rax
  unsigned __int64 v15; // rax
  common::milog::MiLogStream *v16; // rdx
  unsigned __int64 v17; // rax
  Avatar *v18; // rax
  Avatar *v19; // rax
  unsigned __int64 v20; // rax
  std::__shared_ptr_access<Player,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v21; // rax
  std::_Rb_tree_const_iterator<unsigned int>::_Base_ptr M_node; // r14
  std::set<unsigned int>::iterator v23; // rax
  EntitySightGroup *v24; // rax
  EntitySightGroup *v25; // rax
  Player *v26; // rsi
  std::shared_ptr<Entity> *i; // r14
  std::__shared_ptr_access<Player,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v29; // rax
  int Uid; // eax
  PlayerViewMgr *v31; // rax
  Player *v32; // rsi
  std::__shared_ptr_access<Player,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v33; // rax
  uint32_t v34; // eax
  Group *v35; // rcx
  common::milog::MiLogStream *v36; // r14
  Creature *v37; // r14
  int32_t result; // eax
  std::initializer_list<std::shared_ptr<Entity> > __l; // [rsp+0h] [rbp-330h]
  std::allocator<unsigned int> __a; // [rsp+36h] [rbp-2FAh] BYREF
  bool is_replace; // [rsp+37h] [rbp-2F9h]
  std::set<unsigned int>::value_type __x; // [rsp+38h] [rbp-2F8h] BYREF
  proto::ProtEntityType entity_type; // [rsp+3Ch] [rbp-2F4h]
  std::vector<std::shared_ptr<Player>>::iterator __for_begin; // [rsp+40h] [rbp-2F0h] BYREF
  std::vector<std::shared_ptr<Player>>::iterator __for_end; // [rsp+48h] [rbp-2E8h] BYREF
  std::vector<std::shared_ptr<Player>> *__for_range; // [rsp+50h] [rbp-2E0h]
  std::vector<std::shared_ptr<Player>> *__for_range_0; // [rsp+58h] [rbp-2D8h]
  std::shared_ptr<Player> *group_view_player_ptr; // [rsp+60h] [rbp-2D0h]
  std::shared_ptr<Player> *player_ptr; // [rsp+68h] [rbp-2C8h]
  std::enable_shared_from_this<Scene> v52; // [rsp+70h] [rbp-2C0h] BYREF
  std::vector<std::shared_ptr<Player>> v53; // [rsp+80h] [rbp-2B0h] BYREF
  std::vector<std::shared_ptr<Entity>> entity_vec; // [rsp+A0h] [rbp-290h] BYREF
  common::milog::MiLogStream v55; // [rsp+C0h] [rbp-270h] BYREF
  char v56[592]; // [rsp+E0h] [rbp-250h] BYREF

  v3 = (unsigned __int64)v56;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_4(544LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "11 48 16 14 scene_ptr:2243 80 16 15 player_ptr:2276 112 16 15 entity_ptr:2302 144 16 20 sight_gr"
                        "oup_ptr:2305 176 16 14 group_ptr:2332 208 16 17 creature_ptr:2343 240 16 24 player_view_mgr_ptr:"
                        "2317 272 20 16 check_param:2329 336 24 23 viewing_player_vec:2257 400 24 12 uid_vec:2301 464 48 12 uid_set:2256";
  *(_QWORD *)(v3 + 16) = Scene::entityDisappear;
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = 61937;
  v5[536862722] = 62194;
  v5[536862723] = 62194;
  v5[536862724] = 62194;
  v5[536862725] = 62194;
  v5[536862726] = 62194;
  v5[536862727] = 62194;
  v5[536862728] = 62194;
  v5[536862729] = -218959356;
  v5[536862730] = 62194;
  v5[536862731] = -218959360;
  v5[536862732] = 62194;
  v5[536862733] = -218959360;
  v5[536862734] = 62194;
  v5[536862736] = -202116109;
  if ( !Entity::isOnScene(entity) )
  {
    common::milog::MiLogStream::create(
      &v55,
      &common::milog::MiLogDefault::default_log_obj_,
      1u,
      "./src/scene/scene.cpp",
      "entityDisappear",
      2237);
    v6 = common::milog::MiLogStream::operator<<<char [23],(char *[23])0>(
           &v55,
           (const char (*)[23])"entity is not on scene");
    common::milog::MiLogStream::operator<<<Entity,(Entity*)0>(v6, entity);
    common::milog::MiLogStream::~MiLogStream(&v55);
    v7 = 0;
  }
  else
  {
    if ( *(_BYTE *)(((unsigned __int64)context >> 3) + 0x7FFF8000) != 0
      && (char)(((unsigned __int8)context & 7) + 3) >= *(_BYTE *)(((unsigned __int64)context >> 3) + 0x7FFF8000) )
    {
      __asan_report_load4(context);
    }
    is_replace = SceneUtils::isVisionTypeReplace(context->type);
    Entity::getScene((const Entity *const)(v3 + 48));
    std::enable_shared_from_this<Scene>::shared_from_this(&v52);
    v8 = std::operator!=<Scene,Scene>((const std::shared_ptr<Scene> *)(v3 + 48), (const std::shared_ptr<Scene> *)&v52);
    std::shared_ptr<Scene>::~shared_ptr((std::shared_ptr<Scene> *const)&v52);
    if ( v8 )
    {
      common::milog::MiLogStream::create(
        &v55,
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/scene/scene.cpp",
        "entityDisappear",
        2246);
      v9 = common::milog::MiLogStream::operator<<<char [28],(char *[28])0>(
             &v55,
             (const char (*)[28])"entity is not on this scene");
      common::milog::MiLogStream::operator<<<Entity,(Entity*)0>(v9, entity);
      common::milog::MiLogStream::~MiLogStream(&v55);
      v7 = -1;
    }
    else
    {
      SightComp = (unsigned __int64)Scene::getSightComp(this);
      if ( *(_BYTE *)((SightComp >> 3) + 0x7FFF8000) )
        SightComp = __asan_report_load8();
      v11 = *(_QWORD *)SightComp + 64LL;
      if ( *(_BYTE *)((v11 >> 3) + 0x7FFF8000) )
        SightComp = __asan_report_load8();
      if ( (*(unsigned int (__fastcall **)(unsigned __int64, Entity *))v11)(SightComp, entity) )
      {
        common::milog::MiLogStream::create(
          &v55,
          &common::milog::MiLogDefault::default_log_obj_,
          4u,
          "./src/scene/scene.cpp",
          "entityDisappear",
          2252);
        v12 = common::milog::MiLogStream::operator<<<char [19],(char *[19])0>(
                &v55,
                (const char (*)[19])"removeEntity fails");
        common::milog::MiLogStream::operator<<<Entity,(Entity*)0>(v12, entity);
        common::milog::MiLogStream::~MiLogStream(&v55);
        v7 = -1;
      }
      else
      {
        std::set<unsigned int>::set((std::set<unsigned int> *const)(v3 + 464));
        ViewMgr = Entity::getViewMgr(entity);
        EntityViewMgr::validateAndGetViewingPlayers((std::vector<std::shared_ptr<Player>> *)(v3 + 336), ViewMgr);
        __for_range = (std::vector<std::shared_ptr<Player>> *)(v3 + 336);
        __for_begin._M_current = std::vector<std::shared_ptr<Player>>::begin((std::vector<std::shared_ptr<Player>> *const)(v3 + 336))._M_current;
        __for_end._M_current = std::vector<std::shared_ptr<Player>>::end((std::vector<std::shared_ptr<Player>> *const)(v3 + 336))._M_current;
        while ( __gnu_cxx::operator!=<std::shared_ptr<Player> *,std::vector<std::shared_ptr<Player>>>(
                  &__for_begin,
                  &__for_end) )
        {
          player_ptr = __gnu_cxx::__normal_iterator<std::shared_ptr<Player> *,std::vector<std::shared_ptr<Player>>>::operator*(&__for_begin);
          v14 = std::__shared_ptr_access<Player,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Player,(__gnu_cxx::_Lock_policy)2,false,false> *const)player_ptr);
          __x = Player::getUid(v14);
          std::set<unsigned int>::insert((std::set<unsigned int> *const)(v3 + 464), &__x);
          __gnu_cxx::__normal_iterator<std::shared_ptr<Player> *,std::vector<std::shared_ptr<Player>>>::operator++(&__for_begin);
        }
        if ( *(_BYTE *)(((unsigned __int64)entity >> 3) + 0x7FFF8000) )
          __asan_report_load8();
        v15 = (unsigned __int64)(entity->_vptr_DescribalBase + 3);
        if ( *(_BYTE *)((v15 >> 3) + 0x7FFF8000) )
          v15 = __asan_report_load8();
        if ( (*(unsigned int (__fastcall **)(Entity *))v15)(entity) != 1 )
        {
          std::shared_ptr<Scene>::shared_ptr((std::shared_ptr<Scene> *const)(v3 + 240), 0LL);
          Entity::setScene(entity, (ScenePtr *)(v3 + 240));
          std::shared_ptr<Scene>::~shared_ptr((std::shared_ptr<Scene> *const)(v3 + 240));
        }
        __x = Entity::getEntityId(entity);
        if ( std::unordered_map<unsigned int,std::shared_ptr<Entity>>::erase(&this->entity_map_, &__x) )
        {
          Scene::addDeadEntity(this, entity);
          *(_QWORD *)(v3 + 80) = 0LL;
          *(_QWORD *)(v3 + 88) = 0LL;
          if ( *(_BYTE *)(((unsigned __int64)entity >> 3) + 0x7FFF8000) )
            __asan_report_load8();
          v17 = (unsigned __int64)(entity->_vptr_DescribalBase + 3);
          if ( *(_BYTE *)((v17 >> 3) + 0x7FFF8000) )
            v17 = __asan_report_load8();
          entity_type = (*(unsigned int (__fastcall **)(Entity *))v17)(entity);
          if ( entity_type == PROT_ENTITY_AVATAR )
          {
            toPtr<Avatar,Entity>((Entity *)(v3 + 208));
            if ( std::operator!=<Avatar>((const std::shared_ptr<Avatar> *)(v3 + 208), 0LL) )
            {
              v18 = std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 208));
              Avatar::stopTimer(v18);
              v19 = std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 208));
              Avatar::clearMotionState(v19);
            }
            if ( *(_BYTE *)(((unsigned __int64)entity >> 3) + 0x7FFF8000) )
              __asan_report_load8();
            v20 = (unsigned __int64)(entity->_vptr_DescribalBase + 19);
            if ( *(_BYTE *)((v20 >> 3) + 0x7FFF8000) )
              v20 = __asan_report_load8();
            (*(void (__fastcall **)(unsigned __int64, Entity *))v20)(v3 + 240, entity);
            std::shared_ptr<Player>::operator=(
              (std::shared_ptr<Player> *const)(v3 + 80),
              (std::shared_ptr<Player> *)(v3 + 240));
            std::shared_ptr<Player>::~shared_ptr((std::shared_ptr<Player> *const)(v3 + 240));
            if ( std::operator!=<Player>((const std::shared_ptr<Player> *)(v3 + 80), 0LL) )
            {
              v21 = std::__shared_ptr_access<Player,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Player,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 80));
              __x = Player::getUid(v21);
              if ( is_replace )
                std::set<unsigned int>::insert((std::set<unsigned int> *const)(v3 + 464), &__x);
              else
                std::set<unsigned int>::erase((std::set<unsigned int> *const)(v3 + 464), &__x);
            }
            std::shared_ptr<Avatar>::~shared_ptr((std::shared_ptr<Avatar> *const)(v3 + 208));
          }
          std::allocator<unsigned int>::allocator(&__a);
          M_node = std::set<unsigned int>::end((const std::set<unsigned int> *const)(v3 + 464))._M_node;
          v23._M_node = std::set<unsigned int>::begin((const std::set<unsigned int> *const)(v3 + 464))._M_node;
          std::vector<unsigned int>::vector<std::_Rb_tree_const_iterator<unsigned int>,void>(
            (std::vector<unsigned int> *const)(v3 + 400),
            v23,
            (std::_Rb_tree_const_iterator<unsigned int>)M_node,
            &__a);
          std::allocator<unsigned int>::~allocator(&__a);
          toThisPtr<Entity>((Entity *)(v3 + 112));
          Scene::entityLeavePlayersSightRange(
            this,
            (const std::vector<unsigned int> *)(v3 + 400),
            (const EntityPtr *)(v3 + 112),
            context);
          Entity::getSightGroup((const Entity *const)(v3 + 144));
          if ( std::operator!=<EntitySightGroup>((const std::shared_ptr<EntitySightGroup> *)(v3 + 144), 0LL) )
          {
            v24 = std::__shared_ptr_access<EntitySightGroup,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<EntitySightGroup,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 144));
            EntitySightGroup::delEntityInSightGroup(v24, (const EntityPtr *)(v3 + 112));
            v25 = std::__shared_ptr_access<EntitySightGroup,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<EntitySightGroup,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 144));
            EntitySightGroup::validateAndGetViewingPlayers(&v53, v25);
            __for_range_0 = &v53;
            __for_begin._M_current = std::vector<std::shared_ptr<Player>>::begin(&v53)._M_current;
            __for_end._M_current = std::vector<std::shared_ptr<Player>>::end(__for_range_0)._M_current;
            while ( __gnu_cxx::operator!=<std::shared_ptr<Player> *,std::vector<std::shared_ptr<Player>>>(
                      &__for_begin,
                      &__for_end) )
            {
              group_view_player_ptr = __gnu_cxx::__normal_iterator<std::shared_ptr<Player> *,std::vector<std::shared_ptr<Player>>>::operator*(&__for_begin);
              std::shared_ptr<Entity>::shared_ptr(
                (std::shared_ptr<Entity> *const)(v3 + 240),
                (const std::shared_ptr<Entity> *)(v3 + 112));
              __l._M_array = (std::initializer_list<std::shared_ptr<Entity> >::iterator)(v3 + 240);
              __l._M_len = 1LL;
              std::allocator<std::shared_ptr<Entity>>::allocator((std::allocator<std::shared_ptr<Entity> > *const)&__a);
              std::vector<std::shared_ptr<Entity>>::vector(
                &entity_vec,
                __l,
                (const std::vector<std::shared_ptr<Entity>>::allocator_type *)&__a);
              v26 = std::__shared_ptr_access<Player,(__gnu_cxx::_Lock_policy)2,false,false>::operator*((const std::__shared_ptr_access<Player,(__gnu_cxx::_Lock_policy)2,false,false> *const)group_view_player_ptr);
              Scene::notifyEntityDisappear(this, v26, &entity_vec, context);
              std::vector<std::shared_ptr<Entity>>::~vector(&entity_vec);
              std::allocator<std::shared_ptr<Entity>>::~allocator((std::allocator<std::shared_ptr<Entity> > *const)&__a);
              for ( i = (std::shared_ptr<Entity> *)(v3 + 256);
                    i != (std::shared_ptr<Entity> *)(v3 + 240);
                    std::shared_ptr<Entity>::~shared_ptr(i) )
              {
                --i;
              }
              __gnu_cxx::__normal_iterator<std::shared_ptr<Player> *,std::vector<std::shared_ptr<Player>>>::operator++(&__for_begin);
            }
            std::vector<std::shared_ptr<Player>>::~vector(&v53);
          }
          if ( !is_replace
            && entity_type == PROT_ENTITY_AVATAR
            && std::operator!=<Player>((const std::shared_ptr<Player> *)(v3 + 80), 0LL) )
          {
            v29 = std::__shared_ptr_access<Player,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Player,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 80));
            Uid = Player::getUid(v29);
            Scene::findPlayerViewMgr((const Scene *const)(v3 + 240), (__int64)this, Uid);
            if ( std::operator!=<PlayerViewMgr>((const std::shared_ptr<PlayerViewMgr> *)(v3 + 240), 0LL) )
            {
              v31 = std::__shared_ptr_access<PlayerViewMgr,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<PlayerViewMgr,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 240));
              PlayerViewMgr::validateAndGetEntitiesInView(&entity_vec, v31);
              v32 = std::__shared_ptr_access<Player,(__gnu_cxx::_Lock_policy)2,false,false>::operator*((const std::__shared_ptr_access<Player,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 80));
              Scene::entitiesLeavePlayerSightRange(this, v32, &entity_vec, &VisionContext::miss_context);
              std::vector<std::shared_ptr<Entity>>::~vector(&entity_vec);
            }
            else
            {
              common::milog::MiLogStream::create(
                &v55,
                &common::milog::MiLogDefault::default_log_obj_,
                3u,
                "./src/scene/scene.cpp",
                "entityDisappear",
                2324);
              v33 = std::__shared_ptr_access<Player,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Player,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 80));
              v34 = Player::getUid(v33);
              common::milog::MiLogStream::operator()(&v55, "uid:%u view_mgr is null", v34);
              common::milog::MiLogStream::~MiLogStream(&v55);
            }
            std::shared_ptr<PlayerViewMgr>::~shared_ptr((std::shared_ptr<PlayerViewMgr> *const)(v3 + 240));
          }
          CheckRegionParam::CheckRegionParam((CheckRegionParam *const)(v3 + 272), CHECK_REGION_LEAVE);
          if ( *(_BYTE *)(((unsigned __int64)context >> 3) + 0x7FFF8000) != 0
            && (char)(((unsigned __int8)context & 7) + 3) >= *(_BYTE *)(((unsigned __int64)context >> 3) + 0x7FFF8000) )
          {
            __asan_report_load4(context);
          }
          Scene::checkRegion(this, entity, context->type, (const CheckRegionParam *)(v3 + 272));
          Entity::getGroup((const Entity *const)(v3 + 176));
          if ( std::operator!=<Group>((const std::shared_ptr<Group> *)(v3 + 176), 0LL) )
          {
            v35 = std::__shared_ptr_access<Group,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Group,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 176));
            if ( *(_BYTE *)(((unsigned __int64)context >> 3) + 0x7FFF8000) != 0
              && (char)(((unsigned __int8)context & 7) + 3) >= *(_BYTE *)(((unsigned __int64)context >> 3) + 0x7FFF8000) )
            {
              __asan_report_load4(context);
            }
            Group::delEntity(v35, entity, context->type);
          }
          else if ( Entity::getConfigId(entity) )
          {
            common::milog::MiLogStream::create(
              &v55,
              &common::milog::MiLogDefault::default_log_obj_,
              1u,
              "./src/scene/scene.cpp",
              "entityDisappear",
              2339);
            v36 = common::milog::MiLogStream::operator<<<char [30],(char *[30])0>(
                    &v55,
                    (const char (*)[30])"group is nullptr, config_id: ");
            __x = Entity::getConfigId(entity);
            common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v36, &__x);
            common::milog::MiLogStream::~MiLogStream(&v55);
          }
          toPtr<Creature,Entity>((Entity *)(v3 + 208));
          if ( std::operator!=<Creature>(0LL, (const std::shared_ptr<Creature> *)(v3 + 208)) )
          {
            v37 = std::__shared_ptr_access<Creature,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Creature,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 208));
            std::enable_shared_from_this<Scene>::shared_from_this((std::enable_shared_from_this<Scene> *const)(v3 + 240));
            Creature::notifyLocalGadgetOwnerLeaveScene(v37, (ScenePtr *)(v3 + 240));
            std::shared_ptr<Scene>::~shared_ptr((std::shared_ptr<Scene> *const)(v3 + 240));
          }
          v7 = 0;
          std::shared_ptr<Creature>::~shared_ptr((std::shared_ptr<Creature> *const)(v3 + 208));
          std::shared_ptr<Group>::~shared_ptr((std::shared_ptr<Group> *const)(v3 + 176));
          std::shared_ptr<EntitySightGroup>::~shared_ptr((std::shared_ptr<EntitySightGroup> *const)(v3 + 144));
          std::shared_ptr<Entity>::~shared_ptr((std::shared_ptr<Entity> *const)(v3 + 112));
          std::vector<unsigned int>::~vector((std::vector<unsigned int> *const)(v3 + 400));
          std::shared_ptr<Player>::~shared_ptr((std::shared_ptr<Player> *const)(v3 + 80));
        }
        else
        {
          common::milog::MiLogStream::create(
            &v55,
            &common::milog::MiLogDefault::default_log_obj_,
            3u,
            "./src/scene/scene.cpp",
            "entityDisappear",
            2270);
          v16 = common::milog::MiLogStream::operator<<<char [19],(char *[19])0>(
                  &v55,
                  (const char (*)[19])"entity not exists ");
          common::milog::MiLogStream::operator<<<Entity,(Entity*)0>(v16, entity);
          common::milog::MiLogStream::~MiLogStream(&v55);
          v7 = -1;
        }
        std::vector<std::shared_ptr<Player>>::~vector((std::vector<std::shared_ptr<Player>> *const)(v3 + 336));
        std::set<unsigned int>::~set((std::set<unsigned int> *const)(v3 + 464));
      }
    }
    std::shared_ptr<Scene>::~shared_ptr((std::shared_ptr<Scene> *const)(v3 + 48));
  }
  result = v7;
  if ( v56 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8010) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8018) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8020) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8028) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8030) = 0LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8038) = 0;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8040) = 0;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8020) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8028) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8030) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8038) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8040) = -168430091;
  }
  return result;
};

// Line 2354: range 0000000015986010-0000000015986BCB
int32_t __cdecl Scene::entityMoveTo(Scene *const this, Entity *entity, const Vector3 *pos)
{
  unsigned __int64 v3; // r13
  __int64 v4; // rax
  _DWORD *v5; // r12
  common::milog::MiLogStream *v6; // rdx
  int32_t v7; // r14d
  bool v8; // r14
  common::milog::MiLogStream *v9; // rdx
  unsigned __int64 v10; // rax
  common::milog::MiLogStream *v11; // rax
  common::milog::MiLogStream *v12; // rax
  common::milog::MiLogStream *v13; // rdx
  common::milog::MiLogStream *v14; // rdx
  unsigned __int64 SightComp; // rax
  unsigned __int64 v16; // rdx
  common::milog::MiLogStream *v17; // rdx
  unsigned __int64 Position; // rax
  unsigned __int64 v19; // rax
  unsigned __int64 v20; // rax
  unsigned __int64 v21; // rax
  std::__shared_ptr_access<Player,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v22; // rax
  int Uid; // eax
  std::__shared_ptr_access<Player,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v24; // rax
  uint32_t v25; // eax
  std::__shared_ptr_access<PlayerViewMgr,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v26; // rax
  Player *v27; // rsi
  Player *v28; // rsi
  int32_t result; // eax
  common::milog::MiLogStream v32; // [rsp+20h] [rbp-250h] BYREF
  char v33[560]; // [rsp+40h] [rbp-230h] BYREF

  v3 = (unsigned __int64)v33;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_3(512LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "10 32 12 13 prev_pos:2382 64 16 14 scene_ptr:2360 96 16 15 entity_ptr:2385 128 16 15 player_ptr:"
                        "2395 160 16 24 player_view_mgr_ptr:2401 192 20 16 check_param:2419 256 24 20 miss_entity_vec:237"
                        "2 320 24 20 meet_entity_vec:2373 384 24 17 miss_uid_vec:2379 448 24 17 meet_uid_vec:2380";
  *(_QWORD *)(v3 + 16) = Scene::entityMoveTo;
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = -219020288;
  v5[536862722] = -219021312;
  v5[536862723] = -219021312;
  v5[536862724] = -219021312;
  v5[536862725] = -219021312;
  v5[536862726] = -234618880;
  v5[536862727] = -218959118;
  v5[536862728] = -234881024;
  v5[536862729] = -218959118;
  v5[536862730] = -234881024;
  v5[536862731] = -218959118;
  v5[536862732] = -234881024;
  v5[536862733] = -218959118;
  v5[536862734] = -218103808;
  v5[536862735] = -202116109;
  if ( !Entity::isOnScene(entity) )
  {
    common::milog::MiLogStream::create(
      &v32,
      &common::milog::MiLogDefault::default_log_obj_,
      1u,
      "./src/scene/scene.cpp",
      "entityMoveTo",
      2357);
    v6 = common::milog::MiLogStream::operator<<<char [23],(char *[23])0>(
           &v32,
           (const char (*)[23])"entity is not on scene");
    common::milog::MiLogStream::operator<<<Entity,(Entity*)0>(v6, entity);
    common::milog::MiLogStream::~MiLogStream(&v32);
    v7 = -1;
  }
  else
  {
    Entity::getScene((const Entity *const)(v3 + 64));
    std::enable_shared_from_this<Scene>::shared_from_this((std::enable_shared_from_this<Scene> *const)(v3 + 160));
    v8 = std::operator!=<Scene,Scene>(
           (const std::shared_ptr<Scene> *)(v3 + 64),
           (const std::shared_ptr<Scene> *)(v3 + 160));
    std::shared_ptr<Scene>::~shared_ptr((std::shared_ptr<Scene> *const)(v3 + 160));
    if ( v8 )
    {
      common::milog::MiLogStream::create(
        &v32,
        &common::milog::MiLogDefault::default_log_obj_,
        1u,
        "./src/scene/scene.cpp",
        "entityMoveTo",
        2363);
      v9 = common::milog::MiLogStream::operator<<<char [28],(char *[28])0>(
             &v32,
             (const char (*)[28])"entity is not on this scene");
      common::milog::MiLogStream::operator<<<Entity,(Entity*)0>(v9, entity);
      common::milog::MiLogStream::~MiLogStream(&v32);
      v7 = -1;
    }
    else
    {
      if ( *(_BYTE *)(((unsigned __int64)entity >> 3) + 0x7FFF8000) )
        __asan_report_load8();
      v10 = (unsigned __int64)(entity->_vptr_DescribalBase + 11);
      if ( *(_BYTE *)((v10 >> 3) + 0x7FFF8000) )
        v10 = __asan_report_load8();
      if ( (*(unsigned int (__fastcall **)(Entity *, const Vector3 *))v10)(entity, pos) )
      {
        common::milog::MiLogStream::create(
          &v32,
          &common::milog::MiLogDefault::default_log_obj_,
          1u,
          "./src/scene/scene.cpp",
          "entityMoveTo",
          2368);
        v11 = common::milog::MiLogStream::operator<<<char [11],(char *[11])0>(&v32, (const char (*)[11])"scene_id: ");
        v12 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v11, &this->scene_id_);
        v13 = common::milog::MiLogStream::operator<<<char [20],(char *[20])0>(
                v12,
                (const char (*)[20])"checkPosition fails");
        v14 = operator<<(v13, pos);
        common::milog::MiLogStream::operator<<<Entity,(Entity*)0>(v14, entity);
        common::milog::MiLogStream::~MiLogStream(&v32);
        v7 = -1;
      }
      else
      {
        std::vector<std::shared_ptr<Entity>>::vector((std::vector<std::shared_ptr<Entity>> *const)(v3 + 256));
        std::vector<std::shared_ptr<Entity>>::vector((std::vector<std::shared_ptr<Entity>> *const)(v3 + 320));
        SightComp = (unsigned __int64)Scene::getSightComp(this);
        if ( *(_BYTE *)((SightComp >> 3) + 0x7FFF8000) )
          SightComp = __asan_report_load8();
        v16 = *(_QWORD *)SightComp + 72LL;
        if ( *(_BYTE *)((v16 >> 3) + 0x7FFF8000) )
          SightComp = __asan_report_load8();
        if ( (*(unsigned int (__fastcall **)(unsigned __int64, Entity *, const Vector3 *, unsigned __int64, unsigned __int64))v16)(
               SightComp,
               entity,
               pos,
               v3 + 256,
               v3 + 320) )
        {
          common::milog::MiLogStream::create(
            &v32,
            &common::milog::MiLogDefault::default_log_obj_,
            3u,
            "./src/scene/scene.cpp",
            "entityMoveTo",
            2376);
          v17 = common::milog::MiLogStream::operator<<<char [21],(char *[21])0>(
                  &v32,
                  (const char (*)[21])"entityMoveTo failed ");
          common::milog::MiLogStream::operator<<<Entity,(Entity*)0>(v17, entity);
          common::milog::MiLogStream::~MiLogStream(&v32);
          v7 = -1;
        }
        else
        {
          Scene::getPlayerUidVecByViewEntity(
            (std::vector<unsigned int> *)(v3 + 384),
            this,
            (const std::vector<std::shared_ptr<Entity>> *)(v3 + 256),
            0);
          Scene::getPlayerUidVecByViewEntity(
            (std::vector<unsigned int> *)(v3 + 448),
            this,
            (const std::vector<std::shared_ptr<Entity>> *)(v3 + 320),
            0);
          Position = (unsigned __int64)Entity::getPosition(entity);
          if ( (char)(Position & 7) >= *(_BYTE *)((Position >> 3) + 0x7FFF8000)
            && *(_BYTE *)((Position >> 3) + 0x7FFF8000) != 0
            || *(_BYTE *)(((Position + 11) >> 3) + 0x7FFF8000) != 0
            && (char)((Position + 11) & 7) >= *(_BYTE *)(((Position + 11) >> 3) + 0x7FFF8000) )
          {
            Position = __asan_report_load_n(Position, 12LL);
          }
          *(_QWORD *)(v3 + 32) = *(_QWORD *)Position;
          *(_DWORD *)(v3 + 40) = *(_DWORD *)(Position + 8);
          if ( *(_BYTE *)(((unsigned __int64)entity >> 3) + 0x7FFF8000) )
            __asan_report_load8();
          v19 = (unsigned __int64)(entity->_vptr_DescribalBase + 10);
          if ( *(_BYTE *)((v19 >> 3) + 0x7FFF8000) )
            v19 = __asan_report_load8();
          (*(void (__fastcall **)(Entity *, const Vector3 *))v19)(entity, pos);
          toThisPtr<Entity>((Entity *)(v3 + 96));
          Scene::entityLeavePlayersSightRange(
            this,
            (const std::vector<unsigned int> *)(v3 + 384),
            (const EntityPtr *)(v3 + 96),
            &VisionContext::miss_context);
          Scene::entityEnterPlayersSightRange(
            this,
            (const std::vector<unsigned int> *)(v3 + 448),
            (const EntityPtr *)(v3 + 96),
            &VisionContext::meet_context);
          if ( *(_BYTE *)(((unsigned __int64)entity >> 3) + 0x7FFF8000) )
            __asan_report_load8();
          v20 = (unsigned __int64)(entity->_vptr_DescribalBase + 3);
          if ( *(_BYTE *)((v20 >> 3) + 0x7FFF8000) )
            v20 = __asan_report_load8();
          if ( (*(unsigned int (__fastcall **)(Entity *))v20)(entity) == 1 )
          {
            if ( *(_BYTE *)(((unsigned __int64)entity >> 3) + 0x7FFF8000) )
              __asan_report_load8();
            v21 = (unsigned __int64)(entity->_vptr_DescribalBase + 19);
            if ( *(_BYTE *)((v21 >> 3) + 0x7FFF8000) )
              v21 = __asan_report_load8();
            (*(void (__fastcall **)(unsigned __int64, Entity *))v21)(v3 + 128, entity);
            if ( !std::operator==<Player>((const std::shared_ptr<Player> *)(v3 + 128), 0LL) )
            {
              v22 = std::__shared_ptr_access<Player,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Player,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 128));
              Uid = Player::getUid(v22);
              Scene::findPlayerViewMgr((const Scene *const)(v3 + 160), (__int64)this, Uid);
              if ( std::operator==<PlayerViewMgr>((const std::shared_ptr<PlayerViewMgr> *)(v3 + 160), 0LL) )
              {
                common::milog::MiLogStream::create(
                  &v32,
                  &common::milog::MiLogDefault::default_log_obj_,
                  3u,
                  "./src/scene/scene.cpp",
                  "entityMoveTo",
                  2404);
                v24 = std::__shared_ptr_access<Player,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Player,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 128));
                v25 = Player::getUid(v24);
                common::milog::MiLogStream::operator()(&v32, "uid:%u view_mgr is null", v25);
                common::milog::MiLogStream::~MiLogStream(&v32);
              }
              else
              {
                v26 = std::__shared_ptr_access<PlayerViewMgr,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<PlayerViewMgr,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 160));
                if ( !PlayerViewMgr::isHasEyePointAsEye(v26) )
                {
                  v27 = std::__shared_ptr_access<Player,(__gnu_cxx::_Lock_policy)2,false,false>::operator*((const std::__shared_ptr_access<Player,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 128));
                  Scene::entitiesLeavePlayerSightRange(
                    this,
                    v27,
                    (const std::vector<std::shared_ptr<Entity>> *)(v3 + 256),
                    &VisionContext::miss_context);
                  v28 = std::__shared_ptr_access<Player,(__gnu_cxx::_Lock_policy)2,false,false>::operator*((const std::__shared_ptr_access<Player,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 128));
                  Scene::entitiesEnterPlayerSightRange(
                    this,
                    v28,
                    (const std::vector<std::shared_ptr<Entity>> *)(v3 + 320),
                    &VisionContext::meet_context);
                }
              }
              std::shared_ptr<PlayerViewMgr>::~shared_ptr((std::shared_ptr<PlayerViewMgr> *const)(v3 + 160));
            }
            std::shared_ptr<Player>::~shared_ptr((std::shared_ptr<Player> *const)(v3 + 128));
          }
          CheckRegionParam::CheckRegionParam((CheckRegionParam *const)(v3 + 192), CHECK_REGION_MOVE);
          *(_QWORD *)(v3 + 196) = *(_QWORD *)(v3 + 32);
          *(_DWORD *)(v3 + 204) = *(_DWORD *)(v3 + 40);
          *(_DWORD *)(v3 + 208) = Entity::getRoomId(entity);
          Scene::checkRegion(this, entity, VISION_NONE, (const CheckRegionParam *)(v3 + 192));
          v7 = 0;
          std::shared_ptr<Entity>::~shared_ptr((std::shared_ptr<Entity> *const)(v3 + 96));
          std::vector<unsigned int>::~vector((std::vector<unsigned int> *const)(v3 + 448));
          std::vector<unsigned int>::~vector((std::vector<unsigned int> *const)(v3 + 384));
        }
        std::vector<std::shared_ptr<Entity>>::~vector((std::vector<std::shared_ptr<Entity>> *const)(v3 + 320));
        std::vector<std::shared_ptr<Entity>>::~vector((std::vector<std::shared_ptr<Entity>> *const)(v3 + 256));
      }
    }
    std::shared_ptr<Scene>::~shared_ptr((std::shared_ptr<Scene> *const)(v3 + 64));
  }
  result = v7;
  if ( v33 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8010) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8018) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8020) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8028) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8030) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8038) = 0LL;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8020) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8028) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8030) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8038) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 2428: range 0000000015986BCC-0000000015987A2C
int32_t __cdecl Scene::checkRegion(
        Scene *const this,
        Entity *entity,
        proto::VisionType vision_type,
        const CheckRegionParam *check_param)
{
  unsigned __int64 v4; // r13
  __int64 v5; // rax
  _DWORD *v6; // r12
  unsigned __int64 v7; // rax
  unsigned __int64 v8; // rax
  void (__fastcall *v9)(unsigned __int64, SceneSightComp *, const Vector3 *, _QWORD); // r14
  uint32_t RoomId; // eax
  unsigned __int64 v11; // rax
  unsigned __int8 (__fastcall *v12)(SceneSightComp *, Entity *, Vector3 *, _QWORD); // r8
  unsigned __int64 v13; // rax
  void (__fastcall *v14)(unsigned __int64, SceneSightComp *, Vector3 *, _QWORD); // r8
  const std::shared_ptr<Region> *v15; // rax
  std::__shared_ptr_access<Region,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v16; // rax
  common::milog::MiLogStream *v17; // r14
  std::__shared_ptr_access<Region,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v18; // rax
  common::milog::MiLogStream *v19; // rdx
  common::milog::MiLogStream *v20; // rax
  common::milog::MiLogStream *v21; // rax
  CheckRegionType type; // eax
  std::__shared_ptr_access<Region,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v23; // rax
  common::milog::MiLogStream *v24; // r14
  std::__shared_ptr_access<Region,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v25; // rax
  common::milog::MiLogStream *v26; // rdx
  common::milog::MiLogStream *v27; // rax
  common::milog::MiLogStream *v28; // rax
  Region *v29; // rdi
  std::__shared_ptr_access<Region,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v30; // rax
  common::milog::MiLogStream *v31; // r14
  std::__shared_ptr_access<Region,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v32; // rax
  common::milog::MiLogStream *v33; // rdx
  common::milog::MiLogStream *v34; // rax
  common::milog::MiLogStream *v35; // rax
  common::milog::MiLogStream *v36; // r14
  std::__shared_ptr_access<Region,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v37; // rax
  common::milog::MiLogStream *v38; // rdx
  common::milog::MiLogStream *v39; // rax
  common::milog::MiLogStream *v40; // rax
  Region *v41; // rdi
  unsigned __int64 v42; // rax
  unsigned __int64 v43; // rdx
  common::milog::MiLogStream *v44; // r14
  std::__shared_ptr_access<Region,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v45; // rax
  common::milog::MiLogStream *v46; // rdx
  common::milog::MiLogStream *v47; // rax
  common::milog::MiLogStream *v48; // rax
  Region *v49; // rdi
  unsigned __int64 v50; // rax
  unsigned __int64 v51; // rdx
  common::milog::MiLogStream *v52; // r14
  std::__shared_ptr_access<Region,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v53; // rax
  common::milog::MiLogStream *v54; // rdx
  common::milog::MiLogStream *v55; // rax
  common::milog::MiLogStream *v56; // rax
  Region *v57; // rdi
  unsigned __int64 v58; // rax
  unsigned __int64 v59; // rdx
  Player *v60; // rax
  PlayerAbilityGroupComp *AbilityGroupComp; // rax
  int32_t result; // eax
  bool is_trigger_enter_leave_evt; // [rsp+23h] [rbp-18Dh]
  IntersectType intersect_type; // [rsp+24h] [rbp-18Ch]
  std::set<std::shared_ptr<Region>>::iterator __for_begin; // [rsp+28h] [rbp-188h] BYREF
  std::set<std::shared_ptr<Region>>::iterator __for_end; // [rsp+30h] [rbp-180h] BYREF
  SceneSightComp *sight_comp; // [rsp+38h] [rbp-178h]
  const Vector3 *cur_pos; // [rsp+40h] [rbp-170h]
  std::set<std::shared_ptr<Region>> *__for_range; // [rsp+48h] [rbp-168h]
  const std::shared_ptr<Region> *region_ptr; // [rsp+50h] [rbp-160h]
  std::set<std::shared_ptr<Region>> *__for_range_0; // [rsp+58h] [rbp-158h]
  common::milog::MiLogStream v74; // [rsp+60h] [rbp-150h] BYREF
  char v75[304]; // [rsp+80h] [rbp-130h] BYREF

  v4 = (unsigned __int64)v75;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v5 = __asan_stack_malloc_2(256LL);
    if ( v5 )
      v4 = v5;
  }
  *(_QWORD *)v4 = 1102416563LL;
  *(_QWORD *)(v4 + 8) = "4 32 16 15 avatar_ptr:2501 64 16 15 player_ptr:2504 96 48 15 region_set:2438 176 48 20 prev_region_set:2444";
  *(_QWORD *)(v4 + 16) = Scene::checkRegion;
  v6 = (_DWORD *)(v4 >> 3);
  v6[536862720] = -235802127;
  v6[536862721] = -219021312;
  v6[536862722] = -219021312;
  v6[536862724] = -219021312;
  v6[536862725] = 62194;
  v6[536862727] = -202116109;
  if ( *(_BYTE *)(((unsigned __int64)entity >> 3) + 0x7FFF8000) )
    __asan_report_load8();
  v7 = (unsigned __int64)(entity->_vptr_DescribalBase + 28);
  if ( *(_BYTE *)((v7 >> 3) + 0x7FFF8000) )
    v7 = __asan_report_load8();
  if ( (*(unsigned __int8 (__fastcall **)(Entity *))v7)(entity) == 1 )
  {
    is_trigger_enter_leave_evt = Region::isTriggerEnterLeaveEvtByVisionType(vision_type);
    sight_comp = Scene::getSightComp(this);
    cur_pos = Entity::getPosition(entity);
    if ( *(_BYTE *)(((unsigned __int64)sight_comp >> 3) + 0x7FFF8000) )
      __asan_report_load8();
    v8 = (unsigned __int64)(sight_comp->_vptr_SceneCompBase + 12);
    if ( *(_BYTE *)((v8 >> 3) + 0x7FFF8000) )
      v8 = __asan_report_load8();
    v9 = *(void (__fastcall **)(unsigned __int64, SceneSightComp *, const Vector3 *, _QWORD))v8;
    RoomId = Entity::getRoomId(entity);
    v9(v4 + 96, sight_comp, cur_pos, RoomId);
    if ( *(_BYTE *)(((unsigned __int64)check_param >> 3) + 0x7FFF8000) != 0
      && (char)(((unsigned __int8)check_param & 7) + 3) >= *(_BYTE *)(((unsigned __int64)check_param >> 3) + 0x7FFF8000) )
    {
      __asan_report_load4(check_param);
    }
    if ( check_param->type == CHECK_REGION_MOVE )
    {
      if ( *(_BYTE *)(((unsigned __int64)sight_comp >> 3) + 0x7FFF8000) )
        __asan_report_load8();
      v11 = (unsigned __int64)(sight_comp->_vptr_SceneCompBase + 11);
      if ( *(_BYTE *)((v11 >> 3) + 0x7FFF8000) )
        v11 = __asan_report_load8();
      v12 = *(unsigned __int8 (__fastcall **)(SceneSightComp *, Entity *, Vector3 *, _QWORD))v11;
      if ( *(_BYTE *)(((unsigned __int64)&check_param->prev_room >> 3) + 0x7FFF8000) != 0
        && (char)((((_BYTE)check_param + 16) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&check_param->prev_room >> 3)
                                                                   + 0x7FFF8000) )
      {
        __asan_report_load4(&check_param->prev_room);
      }
      if ( v12(sight_comp, entity, &check_param->prev_pos, check_param->prev_room) )
      {
        if ( *(_BYTE *)(((unsigned __int64)sight_comp >> 3) + 0x7FFF8000) )
          __asan_report_load8();
        v13 = (unsigned __int64)(sight_comp->_vptr_SceneCompBase + 12);
        if ( *(_BYTE *)((v13 >> 3) + 0x7FFF8000) )
          v13 = __asan_report_load8();
        v14 = *(void (__fastcall **)(unsigned __int64, SceneSightComp *, Vector3 *, _QWORD))v13;
        if ( *(_BYTE *)(((unsigned __int64)&check_param->prev_room >> 3) + 0x7FFF8000) != 0
          && (char)((((_BYTE)check_param + 16) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&check_param->prev_room >> 3)
                                                                     + 0x7FFF8000) )
        {
          __asan_report_load4(&check_param->prev_room);
        }
        v14(v4 + 176, sight_comp, &check_param->prev_pos, check_param->prev_room);
        __for_range = (std::set<std::shared_ptr<Region>> *)(v4 + 176);
        __for_begin._M_node = std::set<std::shared_ptr<Region>>::begin((const std::set<std::shared_ptr<Region>> *const)(v4 + 176))._M_node;
        __for_end._M_node = std::set<std::shared_ptr<Region>>::end((const std::set<std::shared_ptr<Region>> *const)(v4 + 176))._M_node;
        while ( std::operator!=(&__for_begin, &__for_end) )
        {
          region_ptr = std::_Rb_tree_const_iterator<std::shared_ptr<Region>>::operator*(&__for_begin);
          std::set<std::shared_ptr<Region>>::insert((std::set<std::shared_ptr<Region>> *const)(v4 + 96), region_ptr);
          std::_Rb_tree_const_iterator<std::shared_ptr<Region>>::operator++(&__for_begin);
        }
        std::set<std::shared_ptr<Region>>::~set((std::set<std::shared_ptr<Region>> *const)(v4 + 176));
      }
    }
    __for_range_0 = (std::set<std::shared_ptr<Region>> *)(v4 + 96);
    __for_begin._M_node = std::set<std::shared_ptr<Region>>::begin((const std::set<std::shared_ptr<Region>> *const)(v4 + 96))._M_node;
    __for_end._M_node = std::set<std::shared_ptr<Region>>::end(__for_range_0)._M_node;
    while ( std::operator!=(&__for_begin, &__for_end) )
    {
      v15 = std::_Rb_tree_const_iterator<std::shared_ptr<Region>>::operator*(&__for_begin);
      std::shared_ptr<Region>::shared_ptr((std::shared_ptr<Region> *const)(v4 + 64), v15);
      v16 = std::__shared_ptr_access<Region,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Region,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 64));
      if ( !Entity::isOnScene(v16) )
      {
        common::milog::MiLogStream::create(
          &v74,
          &common::milog::MiLogDefault::default_log_obj_,
          1u,
          "./src/scene/scene.cpp",
          "checkRegion",
          2455);
        v17 = common::milog::MiLogStream::operator<<<char [34],(char *[34])0>(
                &v74,
                (const char (*)[34])"[REGION] region is not on scene. ");
        v18 = std::__shared_ptr_access<Region,(__gnu_cxx::_Lock_policy)2,false,false>::operator*((const std::__shared_ptr_access<Region,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 64));
        v19 = common::milog::MiLogStream::operator<<<Region,(Region*)0>(v17, v18);
        v20 = common::milog::MiLogStream::operator<<<Entity,(Entity*)0>(v19, entity);
        v21 = common::milog::MiLogStream::operator<<<char [14],(char *[14])0>(v20, (const char (*)[14])" trigger_evt:");
        common::milog::MiLogStream::operator<<(v21, is_trigger_enter_leave_evt);
        common::milog::MiLogStream::~MiLogStream(&v74);
      }
      else
      {
        if ( *(_BYTE *)(((unsigned __int64)check_param >> 3) + 0x7FFF8000) != 0
          && (char)(((unsigned __int8)check_param & 7) + 3) >= *(_BYTE *)(((unsigned __int64)check_param >> 3)
                                                                        + 0x7FFF8000) )
        {
          __asan_report_load4(check_param);
        }
        type = check_param->type;
        if ( check_param->type == CHECK_REGION_LEAVE )
        {
          v50 = (unsigned __int64)std::__shared_ptr_access<Region,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Region,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 64));
          if ( *(_BYTE *)((v50 >> 3) + 0x7FFF8000) )
            v50 = __asan_report_load8();
          v51 = *(_QWORD *)v50 + 248LL;
          if ( *(_BYTE *)((v51 >> 3) + 0x7FFF8000) )
            v50 = __asan_report_load8();
          if ( (*(unsigned __int8 (__fastcall **)(unsigned __int64, const Vector3 *))v51)(v50, cur_pos) )
          {
            common::milog::MiLogStream::create(
              &v74,
              &common::milog::MiLogDefault::default_log_obj_,
              1u,
              "./src/scene/scene.cpp",
              "checkRegion",
              2492);
            v52 = common::milog::MiLogStream::operator<<<char [32],(char *[32])0>(
                    &v74,
                    (const char (*)[32])"[REGION] entity is leave region");
            v53 = std::__shared_ptr_access<Region,(__gnu_cxx::_Lock_policy)2,false,false>::operator*((const std::__shared_ptr_access<Region,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 64));
            v54 = common::milog::MiLogStream::operator<<<Region,(Region*)0>(v52, v53);
            v55 = common::milog::MiLogStream::operator<<<Entity,(Entity*)0>(v54, entity);
            v56 = common::milog::MiLogStream::operator<<<char [14],(char *[14])0>(
                    v55,
                    (const char (*)[14])" trigger_evt:");
            common::milog::MiLogStream::operator<<(v56, is_trigger_enter_leave_evt);
            common::milog::MiLogStream::~MiLogStream(&v74);
            v57 = std::__shared_ptr_access<Region,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Region,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 64));
            Region::delEntity(v57, entity, is_trigger_enter_leave_evt, vision_type);
          }
        }
        else if ( type <= CHECK_REGION_LEAVE )
        {
          if ( type == CHECK_REGION_MOVE )
          {
            v23 = std::__shared_ptr_access<Region,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Region,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 64));
            intersect_type = Region::getIntersectType(v23, &check_param->prev_pos, cur_pos);
            if ( intersect_type == INTERSECT_INWARD || intersect_type == INTERSECT_CROSS )
            {
              common::milog::MiLogStream::create(
                &v74,
                &common::milog::MiLogDefault::default_log_obj_,
                1u,
                "./src/scene/scene.cpp",
                "checkRegion",
                2465);
              v24 = common::milog::MiLogStream::operator<<<char [35],(char *[35])0>(
                      &v74,
                      (const char (*)[35])"[REGION] entity is entering region");
              v25 = std::__shared_ptr_access<Region,(__gnu_cxx::_Lock_policy)2,false,false>::operator*((const std::__shared_ptr_access<Region,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 64));
              v26 = common::milog::MiLogStream::operator<<<Region,(Region*)0>(v24, v25);
              v27 = common::milog::MiLogStream::operator<<<Entity,(Entity*)0>(v26, entity);
              v28 = common::milog::MiLogStream::operator<<<char [14],(char *[14])0>(
                      v27,
                      (const char (*)[14])" trigger_evt:");
              common::milog::MiLogStream::operator<<(v28, is_trigger_enter_leave_evt);
              common::milog::MiLogStream::~MiLogStream(&v74);
              v29 = std::__shared_ptr_access<Region,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Region,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 64));
              Region::addEntity(v29, entity, is_trigger_enter_leave_evt, vision_type);
            }
            if ( intersect_type == INTERSECT_OUTWARD || intersect_type == INTERSECT_CROSS )
            {
              v30 = std::__shared_ptr_access<Region,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Region,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 64));
              if ( !Entity::isOnScene(v30) )
              {
                common::milog::MiLogStream::create(
                  &v74,
                  &common::milog::MiLogDefault::default_log_obj_,
                  1u,
                  "./src/scene/scene.cpp",
                  "checkRegion",
                  2472);
                v31 = common::milog::MiLogStream::operator<<<char [34],(char *[34])0>(
                        &v74,
                        (const char (*)[34])"[REGION] region is not on scene. ");
                v32 = std::__shared_ptr_access<Region,(__gnu_cxx::_Lock_policy)2,false,false>::operator*((const std::__shared_ptr_access<Region,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 64));
                v33 = common::milog::MiLogStream::operator<<<Region,(Region*)0>(v31, v32);
                v34 = common::milog::MiLogStream::operator<<<Entity,(Entity*)0>(v33, entity);
                v35 = common::milog::MiLogStream::operator<<<char [14],(char *[14])0>(
                        v34,
                        (const char (*)[14])" trigger_evt:");
                common::milog::MiLogStream::operator<<(v35, is_trigger_enter_leave_evt);
                common::milog::MiLogStream::~MiLogStream(&v74);
              }
              else
              {
                common::milog::MiLogStream::create(
                  &v74,
                  &common::milog::MiLogDefault::default_log_obj_,
                  1u,
                  "./src/scene/scene.cpp",
                  "checkRegion",
                  2476);
                v36 = common::milog::MiLogStream::operator<<<char [34],(char *[34])0>(
                        &v74,
                        (const char (*)[34])"[REGION] entity is exiting region");
                v37 = std::__shared_ptr_access<Region,(__gnu_cxx::_Lock_policy)2,false,false>::operator*((const std::__shared_ptr_access<Region,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 64));
                v38 = common::milog::MiLogStream::operator<<<Region,(Region*)0>(v36, v37);
                v39 = common::milog::MiLogStream::operator<<<Entity,(Entity*)0>(v38, entity);
                v40 = common::milog::MiLogStream::operator<<<char [14],(char *[14])0>(
                        v39,
                        (const char (*)[14])" trigger_evt:");
                common::milog::MiLogStream::operator<<(v40, is_trigger_enter_leave_evt);
                common::milog::MiLogStream::~MiLogStream(&v74);
                v41 = std::__shared_ptr_access<Region,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Region,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 64));
                Region::delEntity(v41, entity, is_trigger_enter_leave_evt, vision_type);
              }
            }
          }
          else if ( type == CHECK_REGION_BORN )
          {
            v42 = (unsigned __int64)std::__shared_ptr_access<Region,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Region,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 64));
            if ( *(_BYTE *)((v42 >> 3) + 0x7FFF8000) )
              v42 = __asan_report_load8();
            v43 = *(_QWORD *)v42 + 248LL;
            if ( *(_BYTE *)((v43 >> 3) + 0x7FFF8000) )
              v42 = __asan_report_load8();
            if ( (*(unsigned __int8 (__fastcall **)(unsigned __int64, const Vector3 *))v43)(v42, cur_pos) )
            {
              common::milog::MiLogStream::create(
                &v74,
                &common::milog::MiLogDefault::default_log_obj_,
                1u,
                "./src/scene/scene.cpp",
                "checkRegion",
                2485);
              v44 = common::milog::MiLogStream::operator<<<char [34],(char *[34])0>(
                      &v74,
                      (const char (*)[34])"[REGION] entity is born in region");
              v45 = std::__shared_ptr_access<Region,(__gnu_cxx::_Lock_policy)2,false,false>::operator*((const std::__shared_ptr_access<Region,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 64));
              v46 = common::milog::MiLogStream::operator<<<Region,(Region*)0>(v44, v45);
              v47 = common::milog::MiLogStream::operator<<<Entity,(Entity*)0>(v46, entity);
              v48 = common::milog::MiLogStream::operator<<<char [14],(char *[14])0>(
                      v47,
                      (const char (*)[14])" trigger_evt:");
              common::milog::MiLogStream::operator<<(v48, is_trigger_enter_leave_evt);
              common::milog::MiLogStream::~MiLogStream(&v74);
              v49 = std::__shared_ptr_access<Region,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Region,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 64));
              Region::addEntity(v49, entity, is_trigger_enter_leave_evt, vision_type);
            }
          }
        }
      }
      std::shared_ptr<Region>::~shared_ptr((std::shared_ptr<Region> *const)(v4 + 64));
      std::_Rb_tree_const_iterator<std::shared_ptr<Region>>::operator++(&__for_begin);
    }
    toPtr<Avatar,Entity>((Entity *)(v4 + 32));
    if ( std::operator!=<Avatar>((const std::shared_ptr<Avatar> *)(v4 + 32), 0LL) )
    {
      v58 = (unsigned __int64)std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 32));
      if ( *(_BYTE *)((v58 >> 3) + 0x7FFF8000) )
        v58 = __asan_report_load8();
      v59 = *(_QWORD *)v58 + 152LL;
      if ( *(_BYTE *)((v59 >> 3) + 0x7FFF8000) )
        v58 = __asan_report_load8();
      (*(void (__fastcall **)(unsigned __int64, unsigned __int64))v59)(v4 + 64, v58);
      if ( std::operator!=<Player>((const std::shared_ptr<Player> *)(v4 + 64), 0LL) )
      {
        v60 = std::__shared_ptr_access<Player,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Player,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 64));
        AbilityGroupComp = Player::getAbilityGroupComp(v60);
        PlayerAbilityGroupComp::tryRefreshAbilityGroup(AbilityGroupComp);
      }
      std::shared_ptr<Player>::~shared_ptr((std::shared_ptr<Player> *const)(v4 + 64));
    }
    std::shared_ptr<Avatar>::~shared_ptr((std::shared_ptr<Avatar> *const)(v4 + 32));
    std::set<std::shared_ptr<Region>>::~set((std::set<std::shared_ptr<Region>> *const)(v4 + 96));
  }
  result = 0;
  if ( v75 == (char *)v4 )
  {
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0LL;
    *(_DWORD *)((v4 >> 3) + 0x7FFF8008) = 0;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8010) = 0LL;
    *(_DWORD *)((v4 >> 3) + 0x7FFF801C) = 0;
  }
  else
  {
    *(_QWORD *)v4 = 1172321806LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 2515: range 0000000015987A2E-0000000015987E94
uint32_t __cdecl Scene::genNewEntityId(Scene *const this, proto::ProtEntityType type)
{
  unsigned __int64 v2; // rbx
  __int64 v3; // rax
  _DWORD *v4; // r13
  common::milog::MiLogStream *v5; // rax
  common::milog::MiLogStream *v6; // rax
  common::milog::MiLogStream *v7; // r14
  common::milog::MiLogStream *v8; // rax
  common::milog::MiLogStream *v9; // r14
  char v10; // r14
  std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v11; // rdx
  bool *p_is_entity_id_circle_kick_out; // rax
  char v13; // r15
  Player *v14; // rax
  uint32_t result; // eax
  bool is_rewind; // [rsp+27h] [rbp-C9h]
  unsigned int val; // [rsp+28h] [rbp-C8h] BYREF
  uint32_t next_entity_index; // [rsp+2Ch] [rbp-C4h]
  std::shared_ptr<Config> v19; // [rsp+30h] [rbp-C0h] BYREF
  common::milog::MiLogStream v20; // [rsp+40h] [rbp-B0h] BYREF
  char v21[144]; // [rsp+60h] [rbp-90h] BYREF

  v2 = (unsigned __int64)v21;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_1(96LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "2 32 8 9 lock:2520 64 16 15 player_ptr:2534";
  *(_QWORD *)(v2 + 16) = Scene::genNewEntityId;
  v4 = (_DWORD *)(v2 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = -218959360;
  v4[536862722] = -202178560;
  is_rewind = 0;
  next_entity_index = 0;
  std::lock_guard<std::mutex>::lock_guard((std::lock_guard<std::mutex> *const)(v2 + 32), &this->entity_id_mu_);
  if ( *(_BYTE *)(((unsigned __int64)&this->next_entity_index_ >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)this - 68) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&this->next_entity_index_ >> 3) + 0x7FFF8000) )
  {
    __asan_report_load4(&this->next_entity_index_);
  }
  if ( this->next_entity_index_ <= 0xFFFFFE )
  {
    if ( *(_BYTE *)(((unsigned __int64)&this->next_entity_index_ >> 3) + 0x7FFF8000) != 0
      && (char)((((_BYTE)this - 68) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&this->next_entity_index_ >> 3)
                                                          + 0x7FFF8000) )
    {
      __asan_report_load4(&this->next_entity_index_);
    }
    next_entity_index = ++this->next_entity_index_;
  }
  else
  {
    this->next_entity_index_ = 1;
    next_entity_index = this->next_entity_index_;
    is_rewind = 1;
  }
  std::lock_guard<std::mutex>::~lock_guard((std::lock_guard<std::mutex> *const)(v2 + 32));
  if ( is_rewind )
  {
    common::milog::MiLogStream::create(
      &v20,
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/scene/scene.cpp",
      "genNewEntityId",
      2533);
    v5 = common::milog::MiLogStream::operator<<<char [37],(char *[37])0>(
           &v20,
           (const char (*)[37])"next_entity_index_ rewind. scene_id:");
    v6 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v5, &this->scene_id_);
    v7 = common::milog::MiLogStream::operator<<<char [12],(char *[12])0>(v6, (const char (*)[12])" owner_uid:");
    val = Scene::getOwnerUid(this);
    v8 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v7, &val);
    v9 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(v8, (const char (*)[16])" scene_time_ms:");
    *(_QWORD *)(v2 + 32) = Scene::getSceneTimeMs(this);
    common::milog::MiLogStream::operator<<<unsigned long,(unsigned long *)0>(v9, (const unsigned __int64 *)(v2 + 32));
    common::milog::MiLogStream::~MiLogStream(&v20);
    Scene::getOwnPlayer((const Scene *const)(v2 + 64));
    v10 = 0;
    if ( !std::operator!=<Player>(0LL, (const std::shared_ptr<Player> *)(v2 + 64)) )
      goto LABEL_17;
    ServiceBox::findService<GameserverService>();
    GameserverService::getConfig((GameserverService *const)&v19);
    v10 = 1;
    v11 = std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false> *const)&v19);
    p_is_entity_id_circle_kick_out = &v11->is_entity_id_circle_kick_out;
    if ( *(_BYTE *)(((unsigned __int64)p_is_entity_id_circle_kick_out >> 3) + 0x7FFF8000) != 0
      && ((unsigned __int8)p_is_entity_id_circle_kick_out & 7) >= *(_BYTE *)(((unsigned __int64)p_is_entity_id_circle_kick_out >> 3)
                                                                           + 0x7FFF8000) )
    {
      __asan_report_load1(p_is_entity_id_circle_kick_out);
    }
    if ( v11->is_entity_id_circle_kick_out )
      v13 = 1;
    else
LABEL_17:
      v13 = 0;
    if ( v10 )
      std::shared_ptr<Config>::~shared_ptr(&v19);
    if ( v13 )
    {
      v14 = std::__shared_ptr_access<Player,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Player,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 64));
      Player::genAndPushLogoutReq(v14, PlayerLogoutReq_Reason_ADMIN_REQ);
    }
    std::shared_ptr<Player>::~shared_ptr((std::shared_ptr<Player> *const)(v2 + 64));
  }
  result = EntityUtils::getEntityId(type, next_entity_index);
  if ( v21 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8008) = 0;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8008) = -168430091;
  }
  return result;
};

// Line 2545: range 0000000015987E96-000000001598865E
int32_t __cdecl Scene::addAvatarAndWeaponEntity(Scene *const this, Avatar *avatar, bool is_enter_scene)
{
  int32_t v3; // r14d
  unsigned __int64 v4; // r13
  __int64 v5; // rax
  _DWORD *v6; // r12
  std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v7; // rax
  uint32_t SceneId; // r15d
  common::milog::MiLogStream *v10; // r15
  common::milog::MiLogStream *v11; // rax
  common::milog::MiLogStream *v12; // r15
  common::milog::MiLogStream *v13; // rax
  common::milog::MiLogStream *v14; // r15
  common::milog::MiLogStream *v15; // rdx
  common::milog::MiLogStream *v16; // rdx
  std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v17; // rax
  uint32_t v18; // r15d
  std::__shared_ptr_access<WeaponGadget,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v19; // rax
  Entity *v21; // rax
  unsigned __int64 v22; // rax
  unsigned __int64 v23; // rdx
  common::milog::MiLogStream *v24; // r14
  std::__shared_ptr_access<WeaponGadget,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v25; // rax
  Entity *v26; // rdx
  common::milog::MiLogStream *v27; // rax
  common::milog::MiLogStream *v28; // r14
  std::__shared_ptr_access<WeaponGadget,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v29; // rax
  EquipComp *EquipComp; // rax
  int v31; // r15d
  int32_t result; // eax
  unsigned int val; // [rsp+20h] [rbp-100h] BYREF
  uint32_t avatar_entity_id; // [rsp+24h] [rbp-FCh]
  unsigned __int64 Guid; // [rsp+28h] [rbp-F8h] BYREF
  common::milog::MiLogStream v36; // [rsp+30h] [rbp-F0h] BYREF
  char v37[208]; // [rsp+50h] [rbp-D0h] BYREF

  v4 = (unsigned __int64)v37;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v5 = __asan_stack_malloc_2(160LL);
    if ( v5 )
      v4 = v5;
  }
  *(_QWORD *)v4 = 1102416563LL;
  *(_QWORD *)(v4 + 8) = "4 48 4 21 weapon_entity_id:2572 64 16 14 scene_ptr:2547 96 16 22 weapon_gadget_ptr:2566 128 16 2"
                        "1 weapon_scene_ptr:2569";
  *(_QWORD *)(v4 + 16) = Scene::addAvatarAndWeaponEntity;
  v6 = (_DWORD *)(v4 >> 3);
  v6[536862720] = -235802127;
  v6[536862721] = -234556943;
  v6[536862722] = -219021312;
  v6[536862723] = -219021312;
  v6[536862724] = -202178560;
  avatar_entity_id = Entity::getEntityId((const Entity *const)avatar);
  Entity::getScene((const Entity *const)(v4 + 64));
  if ( std::operator==<Scene>((const std::shared_ptr<Scene> *)(v4 + 64), 0LL)
    || (v7 = std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 64)),
        SceneId = Scene::getSceneId(v7),
        SceneId != Scene::getSceneId(this))
    || !avatar_entity_id )
  {
    avatar_entity_id = Scene::genNewEntityId(this, PROT_ENTITY_AVATAR);
    Entity::setEntityId((Entity *const)avatar, avatar_entity_id);
    common::milog::MiLogStream::create(
      &v36,
      &common::milog::MiLogDefault::default_log_obj_,
      1u,
      "./src/scene/scene.cpp",
      "addAvatarAndWeaponEntity",
      2553);
    v10 = common::milog::MiLogStream::operator<<<char [42],(char *[42])0>(
            &v36,
            (const char (*)[42])"[LR] addAvatarAndWeaponEntity, avatar_id:");
    val = Avatar::getAvatarId(avatar);
    v11 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v10, &val);
    v12 = common::milog::MiLogStream::operator<<<char [14],(char *[14])0>(v11, (const char (*)[14])" avatar_guid:");
    Guid = Avatar::getGuid(avatar);
    v13 = common::milog::MiLogStream::operator<<<unsigned long,(unsigned long *)0>(v12, &Guid);
    v14 = common::milog::MiLogStream::operator<<<char [12],(char *[12])0>(v13, (const char (*)[12])" entity_id:");
    *(_DWORD *)(v4 + 48) = Entity::getEntityId((const Entity *const)avatar);
    common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v14, (const unsigned int *)(v4 + 48));
    common::milog::MiLogStream::~MiLogStream(&v36);
    if ( Scene::addGridlessEntity(this, (Entity *)avatar) )
    {
      common::milog::MiLogStream::create(
        &v36,
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/scene/scene.cpp",
        "addAvatarAndWeaponEntity",
        2557);
      v15 = common::milog::MiLogStream::operator<<<char [24],(char *[24])0>(
              &v36,
              (const char (*)[24])"addGridlessEntity fails");
      common::milog::MiLogStream::operator<<<Avatar,(Avatar*)0>(v15, avatar);
      common::milog::MiLogStream::~MiLogStream(&v36);
      v3 = -1;
      goto LABEL_35;
    }
    if ( Avatar::initAbility(avatar, this, 1) )
    {
      common::milog::MiLogStream::create(
        &v36,
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/scene/scene.cpp",
        "addAvatarAndWeaponEntity",
        2562);
      v16 = common::milog::MiLogStream::operator<<<char [18],(char *[18])0>(
              &v36,
              (const char (*)[18])"initAbility fails");
      common::milog::MiLogStream::operator<<<Avatar,(Avatar*)0>(v16, avatar);
      common::milog::MiLogStream::~MiLogStream(&v36);
      v3 = -1;
      goto LABEL_35;
    }
  }
  Avatar::getEquipComp(avatar);
  EquipComp::getWeaponGadget((const EquipComp *const)(v4 + 128));
  std::shared_ptr<WeaponGadget>::shared_ptr<AvatarWeaponGadget,void>(
    (std::shared_ptr<WeaponGadget> *const)(v4 + 96),
    (std::shared_ptr<AvatarWeaponGadget> *)(v4 + 128));
  std::shared_ptr<AvatarWeaponGadget>::~shared_ptr((std::shared_ptr<AvatarWeaponGadget> *const)(v4 + 128));
  if ( !std::operator!=<WeaponGadget>((const std::shared_ptr<WeaponGadget> *)(v4 + 96), 0LL) )
    goto LABEL_33;
  std::__shared_ptr_access<WeaponGadget,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<WeaponGadget,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 96));
  Entity::getScene((const Entity *const)(v4 + 128));
  if ( std::operator==<Scene>((const std::shared_ptr<Scene> *)(v4 + 128), 0LL)
    || (v17 = std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 128)),
        v18 = Scene::getSceneId(v17),
        v18 != Scene::getSceneId(this))
    || (v19 = std::__shared_ptr_access<WeaponGadget,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<WeaponGadget,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 96)),
        !Entity::getEntityId((const Entity *const)v19)) )
  {
    *(_DWORD *)(v4 + 48) = Scene::genNewEntityId(this, PROT_ENTITY_WEAPON);
    v21 = (Entity *)std::__shared_ptr_access<WeaponGadget,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<WeaponGadget,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 96));
    Entity::setEntityId(v21, *(_DWORD *)(v4 + 48));
    v22 = (unsigned __int64)std::__shared_ptr_access<WeaponGadget,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<WeaponGadget,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 96));
    if ( *(_BYTE *)((v22 >> 3) + 0x7FFF8000) )
      v22 = __asan_report_load8();
    v23 = *(_QWORD *)v22 + 408LL;
    if ( *(_BYTE *)((v23 >> 3) + 0x7FFF8000) )
      v22 = __asan_report_load8();
    if ( (*(unsigned int (__fastcall **)(unsigned __int64, __int64))v23)(v22, 1LL) )
    {
      common::milog::MiLogStream::create(
        &v36,
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/scene/scene.cpp",
        "addAvatarAndWeaponEntity",
        2576);
      v24 = common::milog::MiLogStream::operator<<<char [18],(char *[18])0>(
              &v36,
              (const char (*)[18])"initAbility fails");
      v25 = std::__shared_ptr_access<WeaponGadget,(__gnu_cxx::_Lock_policy)2,false,false>::operator*((const std::__shared_ptr_access<WeaponGadget,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 96));
      common::milog::MiLogStream::operator<<<WeaponGadget,(WeaponGadget*)0>(v24, v25);
      common::milog::MiLogStream::~MiLogStream(&v36);
      v3 = -1;
LABEL_30:
      v31 = 0;
      goto LABEL_32;
    }
    v26 = (Entity *)std::__shared_ptr_access<WeaponGadget,(__gnu_cxx::_Lock_policy)2,false,false>::operator*((const std::__shared_ptr_access<WeaponGadget,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 96));
    if ( Scene::addGridlessEntity(this, v26) )
    {
      common::milog::MiLogStream::create(
        &v36,
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/scene/scene.cpp",
        "addAvatarAndWeaponEntity",
        2581);
      v27 = common::milog::MiLogStream::operator<<<char [43],(char *[43])0>(
              &v36,
              (const char (*)[43])"addGridlessEntity fails, weapon_entity_id:");
      v28 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v27, (const unsigned int *)(v4 + 48));
      v29 = std::__shared_ptr_access<WeaponGadget,(__gnu_cxx::_Lock_policy)2,false,false>::operator*((const std::__shared_ptr_access<WeaponGadget,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 96));
      common::milog::MiLogStream::operator<<<WeaponGadget,(WeaponGadget*)0>(v28, v29);
      common::milog::MiLogStream::~MiLogStream(&v36);
      v3 = -1;
      goto LABEL_30;
    }
    EquipComp = Avatar::getEquipComp(avatar);
    EquipComp::equipChangeNotify(EquipComp, EQUIP_WEAPON);
  }
  v31 = 1;
LABEL_32:
  std::shared_ptr<Scene>::~shared_ptr((std::shared_ptr<Scene> *const)(v4 + 128));
  if ( v31 == 1 )
LABEL_33:
    v3 = 0;
  std::shared_ptr<WeaponGadget>::~shared_ptr((std::shared_ptr<WeaponGadget> *const)(v4 + 96));
LABEL_35:
  std::shared_ptr<Scene>::~shared_ptr((std::shared_ptr<Scene> *const)(v4 + 64));
  result = v3;
  if ( v37 == (char *)v4 )
  {
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8008) = 0LL;
    *(_DWORD *)((v4 >> 3) + 0x7FFF8010) = 0;
  }
  else
  {
    *(_QWORD *)v4 = 1172321806LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v4 >> 3) + 0x7FFF8010) = -168430091;
  }
  return result;
};

// Line 2593: range 0000000015988660-0000000015988EA2
int32_t __cdecl Scene::delAvatarAndWeaponEntity(Scene *const this, Avatar *avatar)
{
  int32_t v2; // r14d
  unsigned __int64 v3; // r12
  __int64 v4; // rax
  _DWORD *v5; // r13
  common::milog::MiLogStream *v6; // rdx
  AbilityComp *AbilityComp; // rax
  EntityAnimatorComp *AnimatorComp; // rax
  unsigned __int64 v9; // rax
  common::milog::MiLogStream *v10; // rax
  common::milog::MiLogStream *v11; // rdx
  int v12; // r15d
  common::milog::MiLogStream *v13; // rax
  common::milog::MiLogStream *v14; // rax
  common::milog::MiLogStream *v15; // rdx
  common::milog::MiLogStream *v16; // rdx
  std::__shared_ptr_access<WeaponGadget,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v17; // rax
  common::milog::MiLogStream *v18; // r14
  std::__shared_ptr_access<WeaponGadget,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v19; // rax
  common::milog::MiLogStream *v20; // rax
  common::milog::MiLogStream *v21; // rdx
  std::__shared_ptr_access<WeaponGadget,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v22; // rax
  Entity *v23; // rax
  std::__shared_ptr_access<WeaponGadget,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v24; // rax
  AbilityComp *v25; // rax
  Entity *v26; // rax
  EntityAnimatorComp *v27; // rax
  common::milog::MiLogStream *v28; // rax
  common::milog::MiLogStream *v29; // rdx
  common::milog::MiLogStream *v30; // rax
  common::milog::MiLogStream *v31; // rax
  common::milog::MiLogStream *v32; // r14
  int32_t result; // eax
  int32_t ret; // [rsp+24h] [rbp-DCh]
  unsigned __int64 val; // [rsp+28h] [rbp-D8h] BYREF
  common::milog::MiLogStream v36; // [rsp+30h] [rbp-D0h] BYREF
  char v37[176]; // [rsp+50h] [rbp-B0h] BYREF

  v3 = (unsigned __int64)v37;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_1(128LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "4 32 4 21 avatar_entity_id:2600 48 4 21 weapon_entity_id:2636 64 16 22 weapon_gadget_ptr:2629 96"
                        " 16 15 entity_ptr:2612";
  *(_QWORD *)(v3 + 16) = Scene::delAvatarAndWeaponEntity;
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = -234556924;
  v5[536862722] = -219021312;
  v5[536862723] = -202178560;
  if ( Entity::isOnScene((const Entity *const)avatar) )
  {
    common::milog::MiLogStream::create(
      &v36,
      &common::milog::MiLogDefault::default_log_obj_,
      4u,
      "./src/scene/scene.cpp",
      "delAvatarAndWeaponEntity",
      2596);
    v6 = common::milog::MiLogStream::operator<<<char [21],(char *[21])0>(
           &v36,
           (const char (*)[21])"avatar is on scene. ");
    common::milog::MiLogStream::operator<<<Avatar,(Avatar*)0>(v6, avatar);
    common::milog::MiLogStream::~MiLogStream(&v36);
  }
  ret = 0;
  *(_DWORD *)(v3 + 32) = Entity::getEntityId((const Entity *const)avatar);
  if ( *(_DWORD *)(v3 + 32) )
  {
    AbilityComp = Creature::getAbilityComp(avatar);
    AbilityComp::clearAbilityComp(AbilityComp);
    Avatar::clearAllTeamBuffAndDynamicTalent(avatar);
    Entity::setEntityId((Entity *const)avatar, 0);
    Entity::setLastMoveSceneTimeMs((Entity *const)avatar, 0);
    AnimatorComp = Entity::getAnimatorComp((Entity *const)avatar);
    EntityAnimatorComp::clearRendererChangedInfo(AnimatorComp);
    if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
      __asan_report_load8();
    v9 = (unsigned __int64)(this->_vptr_DescribalBase + 15);
    if ( *(_BYTE *)((v9 >> 3) + 0x7FFF8000) )
      v9 = __asan_report_load8();
    (*(void (__fastcall **)(unsigned __int64, Scene *const, _QWORD))v9)(v3 + 96, this, *(unsigned int *)(v3 + 32));
    if ( std::operator==<Entity>((const std::shared_ptr<Entity> *)(v3 + 96), 0LL) )
    {
      common::milog::MiLogStream::create(
        &v36,
        &common::milog::MiLogDefault::default_log_obj_,
        4u,
        "./src/scene/scene.cpp",
        "delAvatarAndWeaponEntity",
        2615);
      v10 = common::milog::MiLogStream::operator<<<char [31],(char *[31])0>(&v36, (const char (*)[31])off_258DD480);
      v11 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v10, (const unsigned int *)(v3 + 32));
      common::milog::MiLogStream::operator<<<Avatar,(Avatar*)0>(v11, avatar);
      common::milog::MiLogStream::~MiLogStream(&v36);
      v2 = -1;
      v12 = 0;
    }
    else if ( std::__shared_ptr<Entity,(__gnu_cxx::_Lock_policy)2>::get((const std::__shared_ptr<Entity,(__gnu_cxx::_Lock_policy)2> *const)(v3 + 96)) == (std::__shared_ptr<Entity,(__gnu_cxx::_Lock_policy)2>::element_type *)avatar )
    {
      v12 = 1;
    }
    else
    {
      common::milog::MiLogStream::create(
        &v36,
        &common::milog::MiLogDefault::default_log_obj_,
        4u,
        "./src/scene/scene.cpp",
        "delAvatarAndWeaponEntity",
        2620);
      v13 = common::milog::MiLogStream::operator<<<char [19],(char *[19])0>(
              &v36,
              (const char (*)[19])"entity not match. ");
      v14 = common::milog::MiLogStream::operator<<<Entity,(Entity*)0>(v13, (const std::shared_ptr<Entity> *)(v3 + 96));
      v15 = common::milog::MiLogStream::operator<<<char [2],(char *[2])0>(v14, (const char (*)[2])"|");
      common::milog::MiLogStream::operator<<<Avatar,(Avatar*)0>(v15, avatar);
      common::milog::MiLogStream::~MiLogStream(&v36);
      v2 = -1;
      v12 = 0;
    }
    std::shared_ptr<Entity>::~shared_ptr((std::shared_ptr<Entity> *const)(v3 + 96));
    if ( v12 == 1 )
    {
      if ( Scene::delGridlessEntity(this, *(_DWORD *)(v3 + 32)) )
      {
        common::milog::MiLogStream::create(
          &v36,
          &common::milog::MiLogDefault::default_log_obj_,
          3u,
          "./src/scene/scene.cpp",
          "delAvatarAndWeaponEntity",
          2626);
        v16 = common::milog::MiLogStream::operator<<<char [24],(char *[24])0>(
                &v36,
                (const char (*)[24])"delGridlessEntity fails");
        common::milog::MiLogStream::operator<<<Avatar,(Avatar*)0>(v16, avatar);
        common::milog::MiLogStream::~MiLogStream(&v36);
        ret = -1;
      }
      Avatar::getEquipComp(avatar);
      EquipComp::getWeaponGadget((const EquipComp *const)(v3 + 96));
      std::shared_ptr<WeaponGadget>::shared_ptr<AvatarWeaponGadget,void>(
        (std::shared_ptr<WeaponGadget> *const)(v3 + 64),
        (std::shared_ptr<AvatarWeaponGadget> *)(v3 + 96));
      std::shared_ptr<AvatarWeaponGadget>::~shared_ptr((std::shared_ptr<AvatarWeaponGadget> *const)(v3 + 96));
      if ( std::operator!=<WeaponGadget>((const std::shared_ptr<WeaponGadget> *)(v3 + 64), 0LL) )
      {
        v17 = std::__shared_ptr_access<WeaponGadget,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<WeaponGadget,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 64));
        if ( Entity::isOnScene((const Entity *const)v17) )
        {
          common::milog::MiLogStream::create(
            &v36,
            &common::milog::MiLogDefault::default_log_obj_,
            4u,
            "./src/scene/scene.cpp",
            "delAvatarAndWeaponEntity",
            2634);
          v18 = common::milog::MiLogStream::operator<<<char [28],(char *[28])0>(
                  &v36,
                  (const char (*)[28])"weapon_gadget is on scene. ");
          v19 = std::__shared_ptr_access<WeaponGadget,(__gnu_cxx::_Lock_policy)2,false,false>::operator*((const std::__shared_ptr_access<WeaponGadget,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 64));
          v20 = common::milog::MiLogStream::operator<<<WeaponGadget,(WeaponGadget*)0>(v18, v19);
          v21 = common::milog::MiLogStream::operator<<<char [2],(char *[2])0>(v20, (const char (*)[2])" ");
          common::milog::MiLogStream::operator<<<Avatar,(Avatar*)0>(v21, avatar);
          common::milog::MiLogStream::~MiLogStream(&v36);
        }
        v22 = std::__shared_ptr_access<WeaponGadget,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<WeaponGadget,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 64));
        *(_DWORD *)(v3 + 48) = Entity::getEntityId((const Entity *const)v22);
        v23 = (Entity *)std::__shared_ptr_access<WeaponGadget,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<WeaponGadget,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 64));
        Entity::setEntityId(v23, 0);
        v24 = std::__shared_ptr_access<WeaponGadget,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<WeaponGadget,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 64));
        v25 = Creature::getAbilityComp(v24);
        AbilityComp::clearAbilityComp(v25);
        v26 = (Entity *)std::__shared_ptr_access<WeaponGadget,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<WeaponGadget,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 64));
        v27 = Entity::getAnimatorComp(v26);
        EntityAnimatorComp::clearRendererChangedInfo(v27);
        if ( Scene::delGridlessEntity(this, *(_DWORD *)(v3 + 48)) )
        {
          common::milog::MiLogStream::create(
            &v36,
            &common::milog::MiLogDefault::default_log_obj_,
            3u,
            "./src/scene/scene.cpp",
            "delAvatarAndWeaponEntity",
            2642);
          v28 = common::milog::MiLogStream::operator<<<char [43],(char *[43])0>(
                  &v36,
                  (const char (*)[43])"delGridlessEntity fails, weapon_entity_id:");
          v29 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                  v28,
                  (const unsigned int *)(v3 + 48));
          common::milog::MiLogStream::operator<<<Avatar,(Avatar*)0>(v29, avatar);
          common::milog::MiLogStream::~MiLogStream(&v36);
          ret = -1;
        }
      }
      common::milog::MiLogStream::create(
        &v36,
        &common::milog::MiLogDefault::default_log_obj_,
        1u,
        "./src/scene/scene.cpp",
        "delAvatarAndWeaponEntity",
        2646);
      v30 = common::milog::MiLogStream::operator<<<char [53],(char *[53])0>(
              &v36,
              (const char (*)[53])"delAvatarAndWeaponEntity finished, avatar_entity_id:");
      v31 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v30, (const unsigned int *)(v3 + 32));
      v32 = common::milog::MiLogStream::operator<<<char [8],(char *[8])0>(v31, (const char (*)[8])", guid:");
      val = Avatar::getGuid(avatar);
      common::milog::MiLogStream::operator<<<unsigned long,(unsigned long *)0>(v32, &val);
      common::milog::MiLogStream::~MiLogStream(&v36);
      v2 = ret;
      std::shared_ptr<WeaponGadget>::~shared_ptr((std::shared_ptr<WeaponGadget> *const)(v3 + 64));
    }
  }
  else
  {
    v2 = 0;
  }
  result = v2;
  if ( v37 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 2652: range 0000000015988EA4-00000000159892EE
int32_t __cdecl Scene::addAvatarTeamEntity(Scene *const this, Player *player)
{
  unsigned __int64 v2; // r12
  __int64 v3; // rax
  unsigned __int64 v4; // r13
  common::milog::MiLogStream *v5; // rdx
  int32_t v6; // r14d
  Entity *v7; // rdx
  common::milog::MiLogStream *v8; // r14
  std::__shared_ptr_access<AvatarTeamEntity,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v9; // rax
  Entity *v10; // r14
  AvatarTeamEntity *v11; // r14
  std::__shared_ptr_access<AvatarTeamEntity,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v12; // r14
  uint32_t Uid; // edx
  uint32_t PeerId; // eax
  AvatarTeamEntity *v15; // rdx
  common::milog::MiLogStream *v16; // r14
  std::__shared_ptr_access<AvatarTeamEntity,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v17; // rax
  PlayerAvatarComp *AvatarComp; // r14
  int32_t result; // eax
  ScenePtr p_scene_ptr; // [rsp+10h] [rbp-A0h] BYREF
  common::milog::MiLogStream v21; // [rsp+20h] [rbp-90h] BYREF
  char v22[112]; // [rsp+40h] [rbp-70h] BYREF

  v2 = (unsigned __int64)v22;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_0(64LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "1 32 16 20 team_entity_ptr:2653";
  *(_QWORD *)(v2 + 16) = Scene::addAvatarTeamEntity;
  v4 = v2 >> 3;
  *(_DWORD *)(v4 + 2147450880) = -235802127;
  *(_DWORD *)(v4 + 2147450884) = -202178560;
  EntityMgr::createAvatarTeamEntity((Scene *)(v2 + 32));
  if ( std::operator==<AvatarTeamEntity>((const std::shared_ptr<AvatarTeamEntity> *)(v2 + 32), 0LL) )
  {
    common::milog::MiLogStream::create(
      &v21,
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/scene/scene.cpp",
      "addAvatarTeamEntity",
      2656);
    v5 = common::milog::MiLogStream::operator<<<char [24],(char *[24])0>(
           &v21,
           (const char (*)[24])"team_entity_ptr is null");
    operator<<(v5, player);
    common::milog::MiLogStream::~MiLogStream(&v21);
    v6 = -1;
  }
  else
  {
    v7 = (Entity *)std::__shared_ptr_access<AvatarTeamEntity,(__gnu_cxx::_Lock_policy)2,false,false>::operator*((const std::__shared_ptr_access<AvatarTeamEntity,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 32));
    if ( Scene::addGridlessEntity(this, v7) )
    {
      common::milog::MiLogStream::create(
        &v21,
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/scene/scene.cpp",
        "addAvatarTeamEntity",
        2661);
      v8 = common::milog::MiLogStream::operator<<<char [24],(char *[24])0>(
             &v21,
             (const char (*)[24])"addGridlessEntity fails");
      v9 = std::__shared_ptr_access<AvatarTeamEntity,(__gnu_cxx::_Lock_policy)2,false,false>::operator*((const std::__shared_ptr_access<AvatarTeamEntity,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 32));
      common::milog::MiLogStream::operator<<<AvatarTeamEntity,(AvatarTeamEntity*)0>(v8, v9);
      common::milog::MiLogStream::~MiLogStream(&v21);
      v6 = -1;
    }
    else
    {
      v10 = (Entity *)std::__shared_ptr_access<AvatarTeamEntity,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<AvatarTeamEntity,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 32));
      toThisPtr<Scene>((Scene *)&p_scene_ptr);
      Entity::setScene(v10, &p_scene_ptr);
      std::shared_ptr<Scene>::~shared_ptr(&p_scene_ptr);
      v11 = std::__shared_ptr_access<AvatarTeamEntity,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<AvatarTeamEntity,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 32));
      toThisPtr<Player>((Player *)&p_scene_ptr);
      AvatarTeamEntity::setPlayer(v11, (PlayerPtr *)&p_scene_ptr);
      std::shared_ptr<Player>::~shared_ptr((std::shared_ptr<Player> *const)&p_scene_ptr);
      v12 = std::__shared_ptr_access<AvatarTeamEntity,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<AvatarTeamEntity,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 32));
      Uid = Player::getUid(player);
      PeerId = Scene::getPeerId(this, Uid);
      Creature::setAuthorityPeerId(v12, PeerId);
      v15 = std::__shared_ptr_access<AvatarTeamEntity,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<AvatarTeamEntity,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 32));
      if ( AvatarTeamEntity::initAbility(v15, this) )
      {
        common::milog::MiLogStream::create(
          &v21,
          &common::milog::MiLogDefault::default_log_obj_,
          3u,
          "./src/scene/scene.cpp",
          "addAvatarTeamEntity",
          2670);
        v16 = common::milog::MiLogStream::operator<<<char [18],(char *[18])0>(
                &v21,
                (const char (*)[18])"initAbility fails");
        v17 = std::__shared_ptr_access<AvatarTeamEntity,(__gnu_cxx::_Lock_policy)2,false,false>::operator*((const std::__shared_ptr_access<AvatarTeamEntity,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 32));
        common::milog::MiLogStream::operator<<<AvatarTeamEntity,(AvatarTeamEntity*)0>(v16, v17);
        common::milog::MiLogStream::~MiLogStream(&v21);
        v6 = -1;
      }
      else
      {
        AvatarComp = Player::getAvatarComp(player);
        std::shared_ptr<AvatarTeamEntity>::shared_ptr(
          (std::shared_ptr<AvatarTeamEntity> *const)&p_scene_ptr,
          (const std::shared_ptr<AvatarTeamEntity> *)(v2 + 32));
        PlayerAvatarComp::setTeamEntity(AvatarComp, (AvatarTeamEntityPtr *)&p_scene_ptr);
        std::shared_ptr<AvatarTeamEntity>::~shared_ptr((std::shared_ptr<AvatarTeamEntity> *const)&p_scene_ptr);
        v6 = 0;
      }
    }
  }
  std::shared_ptr<AvatarTeamEntity>::~shared_ptr((std::shared_ptr<AvatarTeamEntity> *const)(v2 + 32));
  result = v6;
  if ( v22 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 2679: range 00000000159892F0-00000000159895CC
int32_t __cdecl Scene::delAvatarTeamEntity(Scene *const this, Player *player)
{
  unsigned __int64 v2; // rbx
  __int64 v3; // rax
  unsigned __int64 v4; // r13
  common::milog::MiLogStream *v5; // rdx
  int32_t v6; // r14d
  std::__shared_ptr_access<AvatarTeamEntity,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v7; // rax
  PlayerAvatarComp *AvatarComp; // r14
  common::milog::MiLogStream *v9; // r14
  std::__shared_ptr_access<AvatarTeamEntity,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v10; // rax
  int32_t result; // eax
  uint32_t team_entity_id; // [rsp+1Ch] [rbp-A4h]
  std::shared_ptr<AvatarTeamEntity> p_team_entity_ptr__out; // [rsp+20h] [rbp-A0h] BYREF
  common::milog::MiLogStream v14; // [rsp+30h] [rbp-90h] BYREF
  char v15[112]; // [rsp+50h] [rbp-70h] BYREF

  v2 = (unsigned __int64)v15;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_0(64LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "1 32 16 20 team_entity_ptr:2680";
  *(_QWORD *)(v2 + 16) = Scene::delAvatarTeamEntity;
  v4 = v2 >> 3;
  *(_DWORD *)(v4 + 2147450880) = -235802127;
  *(_DWORD *)(v4 + 2147450884) = -202178560;
  Player::getAvatarComp(player);
  PlayerAvatarComp::getTeamEntity((const PlayerAvatarComp *const)(v2 + 32));
  if ( std::operator==<AvatarTeamEntity>((const std::shared_ptr<AvatarTeamEntity> *)(v2 + 32), 0LL) )
  {
    common::milog::MiLogStream::create(
      &v14,
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/scene/scene.cpp",
      "delAvatarTeamEntity",
      2683);
    v5 = common::milog::MiLogStream::operator<<<char [24],(char *[24])0>(
           &v14,
           (const char (*)[24])"team_entity_ptr is null");
    operator<<(v5, player);
    common::milog::MiLogStream::~MiLogStream(&v14);
    v6 = -1;
  }
  else
  {
    v7 = std::__shared_ptr_access<AvatarTeamEntity,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<AvatarTeamEntity,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 32));
    team_entity_id = Entity::getEntityId((const Entity *const)v7);
    AvatarComp = Player::getAvatarComp(player);
    std::shared_ptr<AvatarTeamEntity>::shared_ptr(&p_team_entity_ptr__out, 0LL);
    PlayerAvatarComp::setTeamEntity(AvatarComp, &p_team_entity_ptr__out);
    std::shared_ptr<AvatarTeamEntity>::~shared_ptr(&p_team_entity_ptr__out);
    if ( Scene::delGridlessEntity(this, team_entity_id) )
    {
      common::milog::MiLogStream::create(
        &v14,
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/scene/scene.cpp",
        "delAvatarTeamEntity",
        2691);
      v9 = common::milog::MiLogStream::operator<<<char [24],(char *[24])0>(
             &v14,
             (const char (*)[24])"delGridlessEntity fails");
      v10 = std::__shared_ptr_access<AvatarTeamEntity,(__gnu_cxx::_Lock_policy)2,false,false>::operator*((const std::__shared_ptr_access<AvatarTeamEntity,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 32));
      common::milog::MiLogStream::operator<<<AvatarTeamEntity,(AvatarTeamEntity*)0>(v9, v10);
      common::milog::MiLogStream::~MiLogStream(&v14);
      v6 = -1;
    }
    else
    {
      Scene::notifyDelTeamEntity(this, team_entity_id);
      v6 = 0;
    }
  }
  std::shared_ptr<AvatarTeamEntity>::~shared_ptr((std::shared_ptr<AvatarTeamEntity> *const)(v2 + 32));
  result = v6;
  if ( v15 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 2700: range 00000000159895CE-00000000159898FE
int32_t __cdecl Scene::addGridlessEntity(Scene *const this, Entity *entity)
{
  unsigned __int64 v2; // rbx
  __int64 v3; // rax
  unsigned __int64 v4; // r12
  common::milog::MiLogStream *v5; // r14
  unsigned int *v6; // rcx
  std::shared_ptr<Entity> *v7; // r8
  std::pair<std::__detail::_Node_iterator<std::pair<unsigned int const,std::shared_ptr<Entity> >,false,false>,bool> v8; // rax
  common::milog::MiLogStream *v9; // r14
  common::milog::MiLogStream *v10; // rdx
  int32_t v11; // r14d
  int32_t result; // eax
  unsigned int val; // [rsp+1Ch] [rbp-A4h] BYREF
  std::shared_ptr<Scene> p_scene_ptr; // [rsp+20h] [rbp-A0h] BYREF
  common::milog::MiLogStream v15; // [rsp+30h] [rbp-90h] BYREF
  char v16[112]; // [rsp+50h] [rbp-70h] BYREF

  v2 = (unsigned __int64)v16;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_0(64LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "1 32 16 14 scene_ptr:2701";
  *(_QWORD *)(v2 + 16) = Scene::addGridlessEntity;
  v4 = v2 >> 3;
  *(_DWORD *)(v4 + 2147450880) = -235802127;
  *(_DWORD *)(v4 + 2147450884) = -202178560;
  toThisPtr<Scene>((Scene *)(v2 + 32));
  std::shared_ptr<Scene>::shared_ptr(&p_scene_ptr, (const std::shared_ptr<Scene> *)(v2 + 32));
  Entity::setScene(entity, &p_scene_ptr);
  std::shared_ptr<Scene>::~shared_ptr(&p_scene_ptr);
  common::milog::MiLogStream::create(
    &v15,
    &common::milog::MiLogDefault::default_log_obj_,
    1u,
    "./src/scene/scene.cpp",
    "addGridlessEntity",
    2703);
  v5 = common::milog::MiLogStream::operator<<<char [35],(char *[35])0>(
         &v15,
         (const char (*)[35])"[LR] addGridlessEntity, entity_id:");
  val = Entity::getEntityId(entity);
  common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v5, &val);
  common::milog::MiLogStream::~MiLogStream(&v15);
  toThisPtr<Entity>((Entity *)&p_scene_ptr);
  val = Entity::getEntityId(entity);
  v8 = std::unordered_map<unsigned int,std::shared_ptr<Entity>>::emplace<unsigned int,std::shared_ptr<Entity>>(
         &this->gridless_entity_map_,
         &val,
         (std::shared_ptr<Entity> *)&p_scene_ptr,
         v6,
         v7);
  LOBYTE(v5) = !v8.second;
  std::shared_ptr<Entity>::~shared_ptr((std::shared_ptr<Entity> *const)&p_scene_ptr);
  if ( (_BYTE)v5 )
  {
    common::milog::MiLogStream::create(
      &v15,
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/scene/scene.cpp",
      "addGridlessEntity",
      2706);
    v9 = common::milog::MiLogStream::operator<<<char [30],(char *[30])0>(
           &v15,
           (const char (*)[30])"duplicate gridless entity_id:");
    val = Entity::getEntityId(entity);
    v10 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v9, &val);
    common::milog::MiLogStream::operator<<<Entity,(Entity*)0>(v10, entity);
    common::milog::MiLogStream::~MiLogStream(&v15);
    v11 = -1;
  }
  else
  {
    v11 = 0;
  }
  std::shared_ptr<Scene>::~shared_ptr((std::shared_ptr<Scene> *const)(v2 + 32));
  result = v11;
  if ( v16 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 2714: range 0000000015989900-0000000015989CB3
__int64 __fastcall Scene::delGridlessEntity(Scene *const this, uint32_t entity_id)
{
  unsigned __int64 v2; // rbx
  __int64 v3; // rax
  _DWORD *v4; // r13
  common::milog::MiLogStream *v5; // rax
  __int64 result; // rax
  std::__shared_ptr_access<Entity,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v7; // rax
  common::milog::MiLogStream *v8; // r14
  std::__shared_ptr_access<Entity,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v9; // rax
  common::milog::MiLogStream *v10; // rax
  Entity *v11; // r14
  std::__detail::_Node_iterator_base<std::pair<unsigned int const,std::shared_ptr<Entity> >,false> __y; // [rsp+10h] [rbp-D0h] BYREF
  EntityPtr *entity_ptr; // [rsp+18h] [rbp-C8h]
  std::shared_ptr<Scene> p_scene_ptr; // [rsp+20h] [rbp-C0h] BYREF
  common::milog::MiLogStream v15; // [rsp+30h] [rbp-B0h] BYREF
  char v16[144]; // [rsp+50h] [rbp-90h] BYREF

  v2 = (unsigned __int64)v16;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_1(96LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "2 48 4 14 entity_id:2713 64 8 7 it:2715";
  *(_QWORD *)(v2 + 16) = Scene::delGridlessEntity;
  v4 = (_DWORD *)(v2 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = -234556943;
  v4[536862722] = -202116352;
  *(_DWORD *)(v2 + 48) = entity_id;
  *(std::unordered_map<unsigned int,std::shared_ptr<Entity>>::iterator *)(v2 + 64) = std::unordered_map<unsigned int,std::shared_ptr<Entity>>::find(
                                                                                       &this->gridless_entity_map_,
                                                                                       (const std::unordered_map<unsigned int,std::shared_ptr<Entity>>::key_type *)(v2 + 48));
  __y._M_cur = std::unordered_map<unsigned int,std::shared_ptr<Entity>>::end(&this->gridless_entity_map_)._M_cur;
  if ( std::__detail::operator==<std::pair<unsigned int const,std::shared_ptr<Entity>>,false>(
         (const std::__detail::_Node_iterator_base<std::pair<unsigned int const,std::shared_ptr<Entity> >,false> *)(v2 + 64),
         &__y) )
  {
    common::milog::MiLogStream::create(
      &v15,
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/scene/scene.cpp",
      "delGridlessEntity",
      2718);
    v5 = common::milog::MiLogStream::operator<<<char [22],(char *[22])0>(&v15, (const char (*)[22])off_258DD940);
    common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v5, (const unsigned int *)(v2 + 48));
    common::milog::MiLogStream::~MiLogStream(&v15);
    result = 0xFFFFFFFFLL;
  }
  else
  {
    entity_ptr = &std::__detail::_Node_iterator<std::pair<unsigned int const,std::shared_ptr<Entity>>,false,false>::operator->((const std::__detail::_Node_iterator<std::pair<unsigned int const,std::shared_ptr<Entity> >,false,false> *const)(v2 + 64))->second;
    v7 = std::__shared_ptr_access<Entity,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Entity,(__gnu_cxx::_Lock_policy)2,false,false> *const)entity_ptr);
    if ( Entity::isOnScene(v7) )
    {
      common::milog::MiLogStream::create(
        &v15,
        &common::milog::MiLogDefault::default_log_obj_,
        4u,
        "./src/scene/scene.cpp",
        "delGridlessEntity",
        2724);
      v8 = common::milog::MiLogStream::operator<<<char [21],(char *[21])0>(
             &v15,
             (const char (*)[21])"entity is on scene. ");
      v9 = std::__shared_ptr_access<Entity,(__gnu_cxx::_Lock_policy)2,false,false>::operator*((const std::__shared_ptr_access<Entity,(__gnu_cxx::_Lock_policy)2,false,false> *const)entity_ptr);
      common::milog::MiLogStream::operator<<<Entity,(Entity*)0>(v8, v9);
      common::milog::MiLogStream::~MiLogStream(&v15);
    }
    common::milog::MiLogStream::create(
      &v15,
      &common::milog::MiLogDefault::default_log_obj_,
      1u,
      "./src/scene/scene.cpp",
      "delGridlessEntity",
      2726);
    v10 = common::milog::MiLogStream::operator<<<char [35],(char *[35])0>(
            &v15,
            (const char (*)[35])"[LR] delGridlessEntity, entity_id:");
    common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v10, (const unsigned int *)(v2 + 48));
    common::milog::MiLogStream::~MiLogStream(&v15);
    v11 = std::__shared_ptr_access<Entity,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Entity,(__gnu_cxx::_Lock_policy)2,false,false> *const)entity_ptr);
    std::shared_ptr<Scene>::shared_ptr(&p_scene_ptr, 0LL);
    Entity::setScene(v11, &p_scene_ptr);
    std::shared_ptr<Scene>::~shared_ptr(&p_scene_ptr);
    std::unordered_map<unsigned int,std::shared_ptr<Entity>>::erase(
      &this->gridless_entity_map_,
      *(std::unordered_map<unsigned int,std::shared_ptr<Entity>>::iterator *)(v2 + 64));
    result = 0LL;
  }
  if ( v16 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8008) = 0;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8008) = -168430091;
  }
  return result;
};

// Line 2734: range 0000000015989CB4-0000000015989F0C
const Scene *__fastcall Scene::findEntity(const Scene *const this, __int64 entity_id, int a3)
{
  unsigned __int64 v3; // r12
  __int64 v4; // rax
  _DWORD *v5; // r13
  std::__detail::_Node_const_iterator<std::pair<unsigned int const,std::shared_ptr<Entity> >,false,false>::pointer v6; // rax
  std::__detail::_Node_iterator_base<std::pair<unsigned int const,std::shared_ptr<Entity> >,false> __y; // [rsp+28h] [rbp-98h] BYREF
  std::shared_ptr<SceneEntity> __r; // [rsp+30h] [rbp-90h] BYREF
  char v11[128]; // [rsp+40h] [rbp-80h] BYREF

  v3 = (unsigned __int64)v11;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_1(96LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "2 48 4 14 entity_id:2733 64 8 7 it:2739";
  *(_QWORD *)(v3 + 16) = Scene::findEntity;
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = -234556943;
  v5[536862722] = -202116352;
  *(_DWORD *)(v3 + 48) = a3;
  if ( *(_DWORD *)(v3 + 48) == 327155713 )
  {
    Scene::getSceneEntity((const Scene *const)&__r);
    std::shared_ptr<Entity>::shared_ptr<SceneEntity,void>((std::shared_ptr<Entity> *const)this, &__r);
    std::shared_ptr<SceneEntity>::~shared_ptr(&__r);
  }
  else
  {
    *(std::unordered_map<unsigned int,std::shared_ptr<Entity>>::const_iterator *)(v3 + 64) = std::unordered_map<unsigned int,std::shared_ptr<Entity>>::find(
                                                                                               (const std::unordered_map<unsigned int,std::shared_ptr<Entity>> *const)(entity_id + 256),
                                                                                               (const std::unordered_map<unsigned int,std::shared_ptr<Entity>>::key_type *)(v3 + 48));
    __y._M_cur = std::unordered_map<unsigned int,std::shared_ptr<Entity>>::end((const std::unordered_map<unsigned int,std::shared_ptr<Entity>> *const)(entity_id + 256))._M_cur;
    if ( std::__detail::operator!=<std::pair<unsigned int const,std::shared_ptr<Entity>>,false>(
           (const std::__detail::_Node_iterator_base<std::pair<unsigned int const,std::shared_ptr<Entity> >,false> *)(v3 + 64),
           &__y)
      || (*(std::unordered_map<unsigned int,std::shared_ptr<Entity>>::const_iterator *)(v3 + 64) = std::unordered_map<unsigned int,std::shared_ptr<Entity>>::find(
                                                                                                     (const std::unordered_map<unsigned int,std::shared_ptr<Entity>> *const)(entity_id + 312),
                                                                                                     (const std::unordered_map<unsigned int,std::shared_ptr<Entity>>::key_type *)(v3 + 48)),
          __y._M_cur = std::unordered_map<unsigned int,std::shared_ptr<Entity>>::end((const std::unordered_map<unsigned int,std::shared_ptr<Entity>> *const)(entity_id + 312))._M_cur,
          std::__detail::operator!=<std::pair<unsigned int const,std::shared_ptr<Entity>>,false>(
            (const std::__detail::_Node_iterator_base<std::pair<unsigned int const,std::shared_ptr<Entity> >,false> *)(v3 + 64),
            &__y)) )
    {
      v6 = std::__detail::_Node_const_iterator<std::pair<unsigned int const,std::shared_ptr<Entity>>,false,false>::operator->((const std::__detail::_Node_const_iterator<std::pair<unsigned int const,std::shared_ptr<Entity> >,false,false> *const)(v3 + 64));
      std::shared_ptr<Entity>::shared_ptr((std::shared_ptr<Entity> *const)this, &v6->second);
    }
    else
    {
      std::shared_ptr<Entity>::shared_ptr((std::shared_ptr<Entity> *const)this, 0LL);
    }
  }
  if ( v11 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8008) = 0;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8008) = -168430091;
  }
  return this;
};

// Line 2750: range 0000000015989F0E-000000001598A178
const Scene *__fastcall Scene::findEntityWithDead(const Scene *const this, unsigned __int64 entity_id, int a3)
{
  unsigned __int64 v3; // r12
  __int64 v4; // rax
  _DWORD *v5; // r13
  unsigned __int64 v6; // rax
  std::__detail::_Node_const_iterator<std::pair<unsigned int const,std::shared_ptr<Entity> >,false,false>::pointer v7; // rax
  std::__detail::_Node_iterator_base<std::pair<unsigned int const,std::shared_ptr<Entity> >,false> __y; // [rsp+28h] [rbp-A8h] BYREF
  char v11[160]; // [rsp+30h] [rbp-A0h] BYREF

  v3 = (unsigned __int64)v11;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_1(128LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "3 48 4 14 entity_id:2749 64 8 9 iter:2756 96 16 15 entity_ptr:2751";
  *(_QWORD *)(v3 + 16) = Scene::findEntityWithDead;
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = -234556943;
  v5[536862722] = -218959360;
  v5[536862723] = -202178560;
  *(_DWORD *)(v3 + 48) = a3;
  if ( *(_BYTE *)((entity_id >> 3) + 0x7FFF8000) )
    __asan_report_load8();
  v6 = *(_QWORD *)entity_id + 120LL;
  if ( *(_BYTE *)((v6 >> 3) + 0x7FFF8000) )
    v6 = __asan_report_load8();
  (*(void (__fastcall **)(unsigned __int64, unsigned __int64, _QWORD))v6)(
    v3 + 96,
    entity_id,
    *(unsigned int *)(v3 + 48));
  if ( std::operator!=<Entity>(0LL, (const std::shared_ptr<Entity> *)(v3 + 96)) )
  {
    std::shared_ptr<Entity>::shared_ptr((std::shared_ptr<Entity> *const)this, (std::shared_ptr<Entity> *)(v3 + 96));
  }
  else
  {
    *(std::unordered_map<unsigned int,std::shared_ptr<Entity>>::const_iterator *)(v3 + 64) = std::unordered_map<unsigned int,std::shared_ptr<Entity>>::find(
                                                                                               (const std::unordered_map<unsigned int,std::shared_ptr<Entity>> *const)(entity_id + 368),
                                                                                               (const std::unordered_map<unsigned int,std::shared_ptr<Entity>>::key_type *)(v3 + 48));
    __y._M_cur = std::unordered_map<unsigned int,std::shared_ptr<Entity>>::end((const std::unordered_map<unsigned int,std::shared_ptr<Entity>> *const)(entity_id + 368))._M_cur;
    if ( std::__detail::operator==<std::pair<unsigned int const,std::shared_ptr<Entity>>,false>(
           (const std::__detail::_Node_iterator_base<std::pair<unsigned int const,std::shared_ptr<Entity> >,false> *)(v3 + 64),
           &__y) )
    {
      std::shared_ptr<Entity>::shared_ptr((std::shared_ptr<Entity> *const)this, 0LL);
    }
    else
    {
      v7 = std::__detail::_Node_const_iterator<std::pair<unsigned int const,std::shared_ptr<Entity>>,false,false>::operator->((const std::__detail::_Node_const_iterator<std::pair<unsigned int const,std::shared_ptr<Entity> >,false,false> *const)(v3 + 64));
      std::shared_ptr<Entity>::shared_ptr((std::shared_ptr<Entity> *const)this, &v7->second);
    }
  }
  std::shared_ptr<Entity>::~shared_ptr((std::shared_ptr<Entity> *const)(v3 + 96));
  if ( v11 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return this;
};

// Line 2766: range 000000001598A17A-000000001598A38D
void __cdecl Scene::addDeadEntity(Scene *const this, Entity *entity)
{
  time_t Now; // rbx
  common::milog::MiLogStream *v4; // rbx
  common::milog::MiLogStream *v5; // rax
  common::milog::MiLogStream *v6; // rdx
  unsigned int *v7; // rcx
  std::shared_ptr<Entity> *v8; // r8
  std::pair<std::__detail::_Node_iterator<std::pair<unsigned int const,std::shared_ptr<Entity> >,false,false>,bool> v9; // rax
  common::milog::MiLogStream *v10; // rbx
  common::milog::MiLogStream *v11; // rdx
  unsigned int val; // [rsp+1Ch] [rbp-44h] BYREF
  std::shared_ptr<Entity> v13; // [rsp+20h] [rbp-40h] BYREF
  common::milog::MiLogStream v14; // [rsp+30h] [rbp-30h] BYREF

  if ( Entity::getDeadClearTime(entity) )
  {
    Now = common::tools::TimeUtils::getNow();
    if ( Now <= Entity::getDeadClearTime(entity) )
    {
      common::milog::MiLogStream::create(
        &v14,
        &common::milog::MiLogDefault::default_log_obj_,
        1u,
        "./src/scene/scene.cpp",
        "addDeadEntity",
        2772);
      v4 = common::milog::MiLogStream::operator<<<char [20],(char *[20])0>(&v14, (const char (*)[20])off_258DDAE0);
      val = Entity::getEntityId(entity);
      v5 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v4, &val);
      v6 = common::milog::MiLogStream::operator<<<char [7],(char *[7])0>(v5, (const char (*)[7])" desc:");
      common::milog::MiLogStream::operator<<<Entity,(Entity*)0>(v6, entity);
      common::milog::MiLogStream::~MiLogStream(&v14);
      toThisPtr<Entity>((Entity *)&v13);
      val = Entity::getEntityId(entity);
      v9 = std::unordered_map<unsigned int,std::shared_ptr<Entity>>::emplace<unsigned int,std::shared_ptr<Entity>>(
             &this->dead_entity_map_,
             &val,
             &v13,
             v7,
             v8);
      LOBYTE(v4) = !v9.second;
      std::shared_ptr<Entity>::~shared_ptr(&v13);
      if ( (_BYTE)v4 )
      {
        common::milog::MiLogStream::create(
          &v14,
          &common::milog::MiLogDefault::default_log_obj_,
          3u,
          "./src/scene/scene.cpp",
          "addDeadEntity",
          2776);
        v10 = common::milog::MiLogStream::operator<<<char [26],(char *[26])0>(
                &v14,
                (const char (*)[26])"duplicate dead entity_id:");
        val = Entity::getEntityId(entity);
        v11 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v10, &val);
        common::milog::MiLogStream::operator<<<Entity,(Entity*)0>(v11, entity);
        common::milog::MiLogStream::~MiLogStream(&v14);
      }
    }
  }
};

// Line 2782: range 000000001598A38E-000000001598A68D
void __cdecl Scene::clearDeadEntity(Scene *const this, uint32_t now)
{
  unsigned __int64 v2; // r12
  __int64 v3; // rax
  _DWORD *v4; // r13
  std::__detail::_Node_iterator<std::pair<unsigned int const,std::shared_ptr<Entity> >,false,false>::pointer v5; // rax
  std::__shared_ptr_access<Entity,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v6; // rax
  common::milog::MiLogStream *v7; // r14
  std::__shared_ptr_access<Entity,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v8; // rax
  common::milog::MiLogStream *v9; // rax
  common::milog::MiLogStream *v10; // r14
  std::__shared_ptr_access<Entity,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v11; // rax
  unsigned int val; // [rsp+14h] [rbp-BCh] BYREF
  std::__detail::_Node_iterator_base<std::pair<unsigned int const,std::shared_ptr<Entity> >,false> __y; // [rsp+18h] [rbp-B8h] BYREF
  common::milog::MiLogStream v14; // [rsp+20h] [rbp-B0h] BYREF
  char v15[144]; // [rsp+40h] [rbp-90h] BYREF

  v2 = (unsigned __int64)v15;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_1(96LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "2 32 8 9 iter:2787 64 16 15 entity_ptr:2789";
  *(_QWORD *)(v2 + 16) = Scene::clearDeadEntity;
  v4 = (_DWORD *)(v2 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = -218959360;
  v4[536862722] = -202178560;
  if ( !std::unordered_map<unsigned int,std::shared_ptr<Entity>>::empty(&this->dead_entity_map_) )
  {
    *(std::unordered_map<unsigned int,std::shared_ptr<Entity>>::iterator *)(v2 + 32) = std::unordered_map<unsigned int,std::shared_ptr<Entity>>::begin(&this->dead_entity_map_);
    while ( 1 )
    {
      __y._M_cur = std::unordered_map<unsigned int,std::shared_ptr<Entity>>::end(&this->dead_entity_map_)._M_cur;
      if ( !std::__detail::operator!=<std::pair<unsigned int const,std::shared_ptr<Entity>>,false>(
              (const std::__detail::_Node_iterator_base<std::pair<unsigned int const,std::shared_ptr<Entity> >,false> *)(v2 + 32),
              &__y) )
        break;
      v5 = std::__detail::_Node_iterator<std::pair<unsigned int const,std::shared_ptr<Entity>>,false,false>::operator->((const std::__detail::_Node_iterator<std::pair<unsigned int const,std::shared_ptr<Entity> >,false,false> *const)(v2 + 32));
      std::shared_ptr<Entity>::shared_ptr((std::shared_ptr<Entity> *const)(v2 + 64), &v5->second);
      if ( std::operator==<Entity>(0LL, (const std::shared_ptr<Entity> *)(v2 + 64)) )
      {
        *(std::unordered_map<unsigned int,std::shared_ptr<Entity>>::iterator *)(v2 + 32) = std::unordered_map<unsigned int,std::shared_ptr<Entity>>::erase(
                                                                                             &this->dead_entity_map_,
                                                                                             *(std::unordered_map<unsigned int,std::shared_ptr<Entity>>::iterator *)(v2 + 32));
      }
      else
      {
        v6 = std::__shared_ptr_access<Entity,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Entity,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 64));
        if ( now <= Entity::getDeadClearTime(v6) )
        {
          std::__detail::_Node_iterator<std::pair<unsigned int const,std::shared_ptr<Entity>>,false,false>::operator++(
            (std::__detail::_Node_iterator<std::pair<unsigned int const,std::shared_ptr<Entity> >,false,false> *const)(v2 + 32),
            0);
        }
        else
        {
          common::milog::MiLogStream::create(
            &v14,
            &common::milog::MiLogDefault::default_log_obj_,
            1u,
            "./src/scene/scene.cpp",
            "clearDeadEntity",
            2797);
          v7 = common::milog::MiLogStream::operator<<<char [22],(char *[22])0>(
                 &v14,
                 (const char (*)[22])"clear dead entity_id:");
          v8 = std::__shared_ptr_access<Entity,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Entity,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 64));
          val = Entity::getEntityId(v8);
          v9 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v7, &val);
          v10 = common::milog::MiLogStream::operator<<<char [7],(char *[7])0>(v9, (const char (*)[7])" desc:");
          v11 = std::__shared_ptr_access<Entity,(__gnu_cxx::_Lock_policy)2,false,false>::operator*((const std::__shared_ptr_access<Entity,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 64));
          common::milog::MiLogStream::operator<<<Entity,(Entity*)0>(v10, v11);
          common::milog::MiLogStream::~MiLogStream(&v14);
          *(std::unordered_map<unsigned int,std::shared_ptr<Entity>>::iterator *)(v2 + 32) = std::unordered_map<unsigned int,std::shared_ptr<Entity>>::erase(
                                                                                               &this->dead_entity_map_,
                                                                                               *(std::unordered_map<unsigned int,std::shared_ptr<Entity>>::iterator *)(v2 + 32));
        }
      }
      std::shared_ptr<Entity>::~shared_ptr((std::shared_ptr<Entity> *const)(v2 + 64));
    }
  }
  if ( v15 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8008) = 0;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8008) = -168430091;
  }
};

// Line 2810: range 000000001598A68E-000000001598A728
bool __cdecl Scene::isEntityExist(const Scene *const this, uint32_t entity_id)
{
  unsigned __int64 v2; // rax
  bool v3; // bl
  std::shared_ptr<Entity> __a; // [rsp+10h] [rbp-20h] BYREF

  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_load8();
  v2 = (unsigned __int64)(this->_vptr_DescribalBase + 15);
  if ( *(_BYTE *)((v2 >> 3) + 0x7FFF8000) )
    v2 = __asan_report_load8();
  (*(void (__fastcall **)(std::shared_ptr<Entity> *, const Scene *const, _QWORD))v2)(&__a, this, entity_id);
  v3 = std::operator!=<Entity>(&__a, 0LL);
  std::shared_ptr<Entity>::~shared_ptr(&__a);
  return v3;
};

// Line 2815: range 000000001598A72A-000000001598A757
bool __cdecl Scene::isEntityExist(const Scene *const this, Entity *entity)
{
  uint32_t EntityId; // edx

  EntityId = Entity::getEntityId(entity);
  return Scene::isEntityExist(this, EntityId);
};

// Line 2821: range 000000001598A758-000000001598AA2A
__int64 __fastcall Scene::delEntity(Scene *const this, uint32_t entity_id, const VisionContext *context)
{
  unsigned __int64 v3; // rbx
  __int64 v4; // rax
  _DWORD *v5; // r13
  unsigned __int64 v6; // rax
  unsigned int v7; // r14d
  unsigned __int64 v8; // rax
  unsigned __int64 v9; // rdx
  common::milog::MiLogStream *v10; // r14
  std::__shared_ptr_access<Entity,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v11; // rax
  __int64 result; // rax
  common::milog::MiLogStream v14; // [rsp+20h] [rbp-B0h] BYREF
  char v15[144]; // [rsp+40h] [rbp-90h] BYREF

  v3 = (unsigned __int64)v15;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_1(96LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "2 48 4 14 entity_id:2820 64 16 15 entity_ptr:2822";
  *(_QWORD *)(v3 + 16) = Scene::delEntity;
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = -234556943;
  v5[536862722] = -202178560;
  *(_DWORD *)(v3 + 48) = entity_id;
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_load8();
  v6 = (unsigned __int64)(this->_vptr_DescribalBase + 15);
  if ( *(_BYTE *)((v6 >> 3) + 0x7FFF8000) )
    v6 = __asan_report_load8();
  (*(void (__fastcall **)(unsigned __int64, Scene *const, _QWORD))v6)(v3 + 64, this, *(unsigned int *)(v3 + 48));
  if ( std::operator==<Entity>((const std::shared_ptr<Entity> *)(v3 + 64), 0LL) )
  {
    v7 = -1;
  }
  else
  {
    v8 = (unsigned __int64)std::__shared_ptr_access<Entity,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Entity,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 64));
    if ( *(_BYTE *)((v8 >> 3) + 0x7FFF8000) )
      v8 = __asan_report_load8();
    v9 = *(_QWORD *)v8 + 128LL;
    if ( *(_BYTE *)((v9 >> 3) + 0x7FFF8000) )
      v8 = __asan_report_load8();
    if ( (*(unsigned int (__fastcall **)(unsigned __int64, const VisionContext *))v9)(v8, context) )
    {
      common::milog::MiLogStream::create(
        &v14,
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/scene/scene.cpp",
        "delEntity",
        2829);
      v10 = common::milog::MiLogStream::operator<<<char [24],(char *[24])0>(
              &v14,
              (const char (*)[24])"entity leaveScene fails");
      v11 = std::__shared_ptr_access<Entity,(__gnu_cxx::_Lock_policy)2,false,false>::operator*((const std::__shared_ptr_access<Entity,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 64));
      common::milog::MiLogStream::operator<<<Entity,(Entity*)0>(v10, v11);
      common::milog::MiLogStream::~MiLogStream(&v14);
      std::unordered_map<unsigned int,std::shared_ptr<Entity>>::erase(
        &this->entity_map_,
        (const std::unordered_map<unsigned int,std::shared_ptr<Entity>>::key_type *)(v3 + 48));
    }
    v7 = 0;
  }
  std::shared_ptr<Entity>::~shared_ptr((std::shared_ptr<Entity> *const)(v3 + 64));
  result = v7;
  if ( v15 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8008) = 0;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8008) = -168430091;
  }
  return result;
};

// Line 2837: range 000000001598AA2C-000000001598B05F
int32_t __cdecl Scene::entityEnterPlayerSightRange(
        Scene *const this,
        Player *player,
        const EntityPtr *entity_ptr,
        const VisionContext *context)
{
  unsigned __int64 v4; // r13
  __int64 v5; // rax
  _DWORD *v6; // r12
  int Uid; // eax
  uint32_t v8; // eax
  int32_t v9; // r14d
  PlayerViewMgr *v10; // rdx
  std::__shared_ptr_access<PlayerViewMgr,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v11; // rdx
  std::remove_reference<const std::shared_ptr<Entity>&>::type *v12; // rax
  std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v13; // rax
  std::__shared_ptr_access<EntitySightGroup,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v14; // rax
  std::__shared_ptr_access<PlayerViewMgr,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v15; // rax
  common::milog::MiLogStream *v17; // r14
  std::__shared_ptr_access<EntitySightGroup,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v18; // rax
  common::milog::MiLogStream *v19; // rax
  common::milog::MiLogStream *v20; // rax
  common::milog::MiLogStream *v21; // rax
  EntitySightGroup *v22; // rax
  PlayerViewMgr *v23; // rax
  std::__shared_ptr_access<PlayerViewMgr,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v24; // rax
  EntitySightGroup *v25; // rdx
  common::milog::MiLogStream *v26; // r14
  int32_t result; // eax
  bool is_group_vision_type_closed; // [rsp+23h] [rbp-14Dh]
  unsigned int val; // [rsp+24h] [rbp-14Ch] BYREF
  unsigned __int64 v32; // [rsp+28h] [rbp-148h] BYREF
  std::shared_ptr<Config> v33; // [rsp+30h] [rbp-140h] BYREF
  std::vector<std::shared_ptr<Entity>> __x; // [rsp+40h] [rbp-130h] BYREF
  common::milog::MiLogStream v35; // [rsp+60h] [rbp-110h] BYREF
  char v36[240]; // [rsp+80h] [rbp-F0h] BYREF

  v4 = (unsigned __int64)v36;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v5 = __asan_stack_malloc_2(192LL);
    if ( v5 )
      v4 = v5;
  }
  *(_QWORD *)v4 = 1102416563LL;
  *(_QWORD *)(v4 + 8) = "4 48 4 25 sg_group_vision_type:2863 64 16 17 view_mgr_ptr:2840 96 16 20 sight_group_ptr:2849 128"
                        " 24 19 real_enter_vec:2838";
  *(_QWORD *)(v4 + 16) = Scene::entityEnterPlayerSightRange;
  v6 = (_DWORD *)(v4 >> 3);
  v6[536862720] = -235802127;
  v6[536862721] = -234556943;
  v6[536862722] = -219021312;
  v6[536862723] = -219021312;
  v6[536862724] = -218103808;
  v6[536862725] = -202116109;
  std::vector<std::shared_ptr<Entity>>::vector((std::vector<std::shared_ptr<Entity>> *const)(v4 + 128));
  Uid = Player::getUid(player);
  Scene::findPlayerViewMgr((const Scene *const)(v4 + 64), (__int64)this, Uid);
  if ( std::operator==<PlayerViewMgr>((const std::shared_ptr<PlayerViewMgr> *)(v4 + 64), 0LL) )
  {
    common::milog::MiLogStream::create(
      &v35,
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/scene/scene.cpp",
      "entityEnterPlayerSightRange",
      2843);
    v8 = Player::getUid(player);
    common::milog::MiLogStream::operator()(&v35, "uid:%u view_mgr is null", v8);
    common::milog::MiLogStream::~MiLogStream(&v35);
    v9 = -1;
    goto LABEL_22;
  }
  v10 = std::__shared_ptr_access<PlayerViewMgr,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<PlayerViewMgr,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 64));
  PlayerViewMgr::addEntityInSightRange(v10, entity_ptr);
  std::__shared_ptr_access<Entity,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Entity,(__gnu_cxx::_Lock_policy)2,false,false> *const)entity_ptr);
  Entity::getSightGroup((const Entity *const)(v4 + 96));
  if ( !std::operator==<EntitySightGroup>((const std::shared_ptr<EntitySightGroup> *)(v4 + 96), 0LL) )
  {
    ServiceBox::findService<GameserverService>();
    GameserverService::getConfig((GameserverService *const)&v33);
    v13 = std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false> *const)&v33);
    is_group_vision_type_closed = FeatureSwitchMgr::isGroupVisionTypeClosed(&v13->feature_switch_mgr);
    std::shared_ptr<Config>::~shared_ptr(&v33);
    if ( !is_group_vision_type_closed )
    {
      v14 = std::__shared_ptr_access<EntitySightGroup,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<EntitySightGroup,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 96));
      *(_DWORD *)(v4 + 48) = EntitySightGroup::getGroupVisionType(v14);
      if ( *(_DWORD *)(v4 + 48) )
      {
        v15 = std::__shared_ptr_access<PlayerViewMgr,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<PlayerViewMgr,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 64));
        if ( !PlayerViewMgr::isContainGroupVisionType(v15, *(_DWORD *)(v4 + 48)) )
        {
          common::milog::MiLogStream::create(
            &v35,
            &common::milog::MiLogDefault::default_log_obj_,
            0x19u,
            "./src/scene/scene.cpp",
            "entityEnterPlayerSightRange",
            2867);
          v17 = common::milog::MiLogStream::operator<<<char [13],(char *[13])0>(
                  &v35,
                  (const char (*)[13])"sight_group:");
          v18 = std::__shared_ptr_access<EntitySightGroup,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<EntitySightGroup,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 96));
          val = EntitySightGroup::getSelfId(v18);
          v19 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v17, &val);
          v20 = common::milog::MiLogStream::operator<<<char [20],(char *[20])0>(
                  v19,
                  (const char (*)[20])" group_vision_type:");
          v21 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                  v20,
                  (const unsigned int *)(v4 + 48));
          common::milog::MiLogStream::operator<<<char [23],(char *[23])0>(
            v21,
            (const char (*)[23])" not match with player");
          common::milog::MiLogStream::~MiLogStream(&v35);
          v9 = 0;
          goto LABEL_21;
        }
      }
    }
    v22 = std::__shared_ptr_access<EntitySightGroup,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<EntitySightGroup,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 96));
    EntitySightGroup::validateAndGetEntitiesInSightGroup(&__x, v22);
    std::vector<std::shared_ptr<Entity>>::operator=((std::vector<std::shared_ptr<Entity>> *const)(v4 + 128), &__x);
    std::vector<std::shared_ptr<Entity>>::~vector(&__x);
    v23 = std::__shared_ptr_access<PlayerViewMgr,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<PlayerViewMgr,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 64));
    PlayerViewMgr::addSightGroupInView(v23, (const EntitySightGroupPtr *)(v4 + 96));
    v24 = std::__shared_ptr_access<PlayerViewMgr,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<PlayerViewMgr,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 64));
    if ( PlayerViewMgr::getChangeEyePropGuardState(v24) == PLAYER_CHANGE_EYE_PROP_GUARD_STATE_NONE )
    {
      v25 = std::__shared_ptr_access<EntitySightGroup,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<EntitySightGroup,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 96));
      EntitySightGroup::onEnterPlayerView(v25, player);
    }
    common::milog::MiLogStream::create(
      &v35,
      &common::milog::MiLogDefault::default_log_obj_,
      0x19u,
      "./src/scene/scene.cpp",
      "entityEnterPlayerSightRange",
      2881);
    v26 = common::milog::MiLogStream::operator<<<char [24],(char *[24])0>(
            &v35,
            (const char (*)[24])" group_entity_vec size:");
    v32 = std::vector<std::shared_ptr<Entity>>::size((const std::vector<std::shared_ptr<Entity>> *const)(v4 + 128));
    common::milog::MiLogStream::operator<<<unsigned long,(unsigned long *)0>(v26, &v32);
    common::milog::MiLogStream::~MiLogStream(&v35);
LABEL_20:
    v9 = Scene::notifyEntityAppear(this, player, (const std::vector<std::shared_ptr<Entity>> *)(v4 + 128), context);
    goto LABEL_21;
  }
  v11 = std::__shared_ptr_access<PlayerViewMgr,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<PlayerViewMgr,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 64));
  if ( !PlayerViewMgr::isContainEntityInView(v11, entity_ptr) )
  {
    v12 = std::move<std::shared_ptr<Entity> const&>(entity_ptr);
    std::vector<std::shared_ptr<Entity>>::emplace_back<std::shared_ptr<Entity> const>(
      (std::vector<std::shared_ptr<Entity>> *const)(v4 + 128),
      v12,
      v12);
    goto LABEL_20;
  }
  v9 = 0;
LABEL_21:
  std::shared_ptr<EntitySightGroup>::~shared_ptr((std::shared_ptr<EntitySightGroup> *const)(v4 + 96));
LABEL_22:
  std::shared_ptr<PlayerViewMgr>::~shared_ptr((std::shared_ptr<PlayerViewMgr> *const)(v4 + 64));
  std::vector<std::shared_ptr<Entity>>::~vector((std::vector<std::shared_ptr<Entity>> *const)(v4 + 128));
  result = v9;
  if ( v36 == (char *)v4 )
  {
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8008) = 0LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8010) = 0LL;
  }
  else
  {
    *(_QWORD *)v4 = 1172321806LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 2890: range 000000001598B060-000000001598B882
int32_t __cdecl Scene::entityLeavePlayerSightRange(
        Scene *const this,
        Player *player,
        const EntityPtr *entity_ptr,
        const VisionContext *context)
{
  unsigned __int64 v4; // r13
  __int64 v5; // rax
  _DWORD *v6; // r12
  int Uid; // eax
  uint32_t v8; // eax
  int32_t v9; // r15d
  PlayerViewMgr *v10; // rdx
  std::__shared_ptr_access<PlayerViewMgr,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v11; // rdx
  std::remove_reference<const std::shared_ptr<Entity>&>::type *v12; // rax
  EntitySightGroup *v13; // rax
  std::__shared_ptr_access<PlayerViewMgr,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v14; // rax
  std::vector<std::shared_ptr<Entity>> *v15; // rax
  PlayerViewMgr *v16; // rax
  std::__shared_ptr_access<PlayerViewMgr,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v17; // rax
  EntitySightGroup *v18; // rdx
  common::milog::MiLogStream *v19; // rax
  std::shared_ptr<Entity> *i; // r14
  int32_t result; // eax
  common::milog::MiLogStream *v23; // [rsp+8h] [rbp-1B8h]
  common::milog::MiLogStream *v24; // [rsp+8h] [rbp-1B8h]
  std::allocator<std::shared_ptr<Entity> > __a; // [rsp+3Eh] [rbp-182h] BYREF
  bool all_leave; // [rsp+3Fh] [rbp-181h]
  std::vector<std::shared_ptr<Entity>>::iterator __for_begin; // [rsp+40h] [rbp-180h] BYREF
  std::vector<std::shared_ptr<Entity>>::iterator __for_end; // [rsp+48h] [rbp-178h] BYREF
  std::vector<std::shared_ptr<Entity>> *__for_range; // [rsp+50h] [rbp-170h]
  std::shared_ptr<Entity> *group_entity_ptr; // [rsp+58h] [rbp-168h]
  std::shared_ptr<Entity> v33; // [rsp+60h] [rbp-160h] BYREF
  std::vector<std::shared_ptr<Entity>> entity_vec; // [rsp+70h] [rbp-150h] BYREF
  common::milog::MiLogStream v35; // [rsp+90h] [rbp-130h] BYREF
  char v36[272]; // [rsp+B0h] [rbp-110h] BYREF

  v4 = (unsigned __int64)v36;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v5 = __asan_stack_malloc_2(224LL);
    if ( v5 )
      v4 = v5;
  }
  *(_QWORD *)v4 = 1102416563LL;
  *(_QWORD *)(v4 + 8) = "4 32 16 17 view_mgr_ptr:2893 64 16 20 sight_group_ptr:2902 96 24 19 real_leave_vec:2891 160 24 2"
                        "1 group_entity_vec:2914";
  *(_QWORD *)(v4 + 16) = Scene::entityLeavePlayerSightRange;
  v6 = (_DWORD *)(v4 >> 3);
  v6[536862720] = -235802127;
  v6[536862721] = -219021312;
  v6[536862722] = -219021312;
  v6[536862723] = -234881024;
  v6[536862724] = -218959118;
  v6[536862725] = -218103808;
  v6[536862726] = -202116109;
  std::vector<std::shared_ptr<Entity>>::vector((std::vector<std::shared_ptr<Entity>> *const)(v4 + 96));
  Uid = Player::getUid(player);
  Scene::findPlayerViewMgr((const Scene *const)(v4 + 32), (__int64)this, Uid);
  if ( std::operator==<PlayerViewMgr>((const std::shared_ptr<PlayerViewMgr> *)(v4 + 32), 0LL) )
  {
    common::milog::MiLogStream::create(
      &v35,
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/scene/scene.cpp",
      "entityLeavePlayerSightRange",
      2896);
    v8 = Player::getUid(player);
    common::milog::MiLogStream::operator()(&v35, "uid:%u view_mgr is null", v8);
    common::milog::MiLogStream::~MiLogStream(&v35);
    v9 = -1;
  }
  else
  {
    v10 = std::__shared_ptr_access<PlayerViewMgr,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<PlayerViewMgr,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 32));
    PlayerViewMgr::delEntityInSightRange(v10, entity_ptr);
    std::__shared_ptr_access<Entity,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Entity,(__gnu_cxx::_Lock_policy)2,false,false> *const)entity_ptr);
    Entity::getSightGroup((const Entity *const)(v4 + 64));
    if ( std::operator==<EntitySightGroup>((const std::shared_ptr<EntitySightGroup> *)(v4 + 64), 0LL) )
    {
      v11 = std::__shared_ptr_access<PlayerViewMgr,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<PlayerViewMgr,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 32));
      if ( !PlayerViewMgr::isContainEntityInView(v11, entity_ptr) )
      {
        v9 = 0;
      }
      else
      {
        v12 = std::move<std::shared_ptr<Entity> const&>(entity_ptr);
        std::vector<std::shared_ptr<Entity>>::emplace_back<std::shared_ptr<Entity> const>(
          (std::vector<std::shared_ptr<Entity>> *const)(v4 + 96),
          v12,
          v12);
        v9 = Scene::notifyEntityDisappear(
               this,
               player,
               (const std::vector<std::shared_ptr<Entity>> *)(v4 + 96),
               context);
      }
    }
    else
    {
      all_leave = 1;
      v13 = std::__shared_ptr_access<EntitySightGroup,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<EntitySightGroup,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 64));
      EntitySightGroup::validateAndGetEntitiesInSightGroup((std::vector<std::shared_ptr<Entity>> *)(v4 + 160), v13);
      __for_range = (std::vector<std::shared_ptr<Entity>> *)(v4 + 160);
      __for_begin._M_current = std::vector<std::shared_ptr<Entity>>::begin((std::vector<std::shared_ptr<Entity>> *const)(v4 + 160))._M_current;
      __for_end._M_current = std::vector<std::shared_ptr<Entity>>::end((std::vector<std::shared_ptr<Entity>> *const)(v4 + 160))._M_current;
      while ( __gnu_cxx::operator!=<std::shared_ptr<Entity> *,std::vector<std::shared_ptr<Entity>>>(
                &__for_begin,
                &__for_end) )
      {
        group_entity_ptr = __gnu_cxx::__normal_iterator<std::shared_ptr<Entity> *,std::vector<std::shared_ptr<Entity>>>::operator*(&__for_begin);
        if ( !std::operator==<Entity,Entity>(group_entity_ptr, entity_ptr) )
        {
          v14 = std::__shared_ptr_access<PlayerViewMgr,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<PlayerViewMgr,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 32));
          if ( PlayerViewMgr::isContainEntityInSightRange(v14, group_entity_ptr) )
          {
            all_leave = 0;
            break;
          }
        }
        __gnu_cxx::__normal_iterator<std::shared_ptr<Entity> *,std::vector<std::shared_ptr<Entity>>>::operator++(&__for_begin);
      }
      if ( !all_leave )
      {
        v9 = 0;
      }
      else
      {
        v15 = std::move<std::vector<std::shared_ptr<Entity>> &>((std::vector<std::shared_ptr<Entity>> *)(v4 + 160));
        std::vector<std::shared_ptr<Entity>>::operator=((std::vector<std::shared_ptr<Entity>> *const)(v4 + 96), v15);
        v16 = std::__shared_ptr_access<PlayerViewMgr,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<PlayerViewMgr,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 32));
        PlayerViewMgr::delSightGroupInView(v16, (const EntitySightGroupPtr *)(v4 + 64));
        v17 = std::__shared_ptr_access<PlayerViewMgr,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<PlayerViewMgr,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 32));
        if ( PlayerViewMgr::getChangeEyePropGuardState(v17) == PLAYER_CHANGE_EYE_PROP_GUARD_STATE_NONE )
        {
          v18 = std::__shared_ptr_access<EntitySightGroup,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<EntitySightGroup,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 64));
          EntitySightGroup::onExitPlayerView(v18, player);
        }
        common::milog::MiLogStream::create(
          &v35,
          &common::milog::MiLogDefault::default_log_obj_,
          0x19u,
          "./src/scene/scene.cpp",
          "entityLeavePlayerSightRange",
          2939);
        v23 = common::milog::MiLogStream::operator<<<char [24],(char *[24])0>(
                &v35,
                (const char (*)[24])" group_entity_vec size:");
        __for_begin._M_current = (std::shared_ptr<Entity> *)std::vector<std::shared_ptr<Entity>>::size((const std::vector<std::shared_ptr<Entity>> *const)(v4 + 160));
        v19 = common::milog::MiLogStream::operator<<<unsigned long,(unsigned long *)0>(
                v23,
                (const unsigned __int64 *)&__for_begin);
        v24 = common::milog::MiLogStream::operator<<<char [22],(char *[22])0>(
                v19,
                (const char (*)[22])" real_leave_vec size:");
        __for_end._M_current = (std::shared_ptr<Entity> *)std::vector<std::shared_ptr<Entity>>::size((const std::vector<std::shared_ptr<Entity>> *const)(v4 + 96));
        common::milog::MiLogStream::operator<<<unsigned long,(unsigned long *)0>(
          v24,
          (const unsigned __int64 *)&__for_end);
        common::milog::MiLogStream::~MiLogStream(&v35);
        if ( *(_BYTE *)(((unsigned __int64)context >> 3) + 0x7FFF8000) != 0
          && (char)(((unsigned __int8)context & 7) + 3) >= *(_BYTE *)(((unsigned __int64)context >> 3) + 0x7FFF8000) )
        {
          __asan_report_load4(context);
        }
        if ( context->type == VISION_MISS
          || std::vector<std::shared_ptr<Entity>>::size((const std::vector<std::shared_ptr<Entity>> *const)(v4 + 96)) <= 1 )
        {
          v9 = Scene::notifyEntityDisappear(
                 this,
                 player,
                 (const std::vector<std::shared_ptr<Entity>> *)(v4 + 96),
                 context);
        }
        else
        {
          common::tools::MiscUtils::removeValues<std::vector<std::shared_ptr<Entity>>,std::shared_ptr<Entity>>(
            (std::vector<std::shared_ptr<Entity>> *)(v4 + 96),
            entity_ptr);
          Scene::notifyEntityDisappear(
            this,
            player,
            (const std::vector<std::shared_ptr<Entity>> *)(v4 + 96),
            &VisionContext::miss_context);
          std::shared_ptr<Entity>::shared_ptr(&v33, entity_ptr);
          std::allocator<std::shared_ptr<Entity>>::allocator(&__a);
          std::vector<std::shared_ptr<Entity>>::vector(
            &entity_vec,
            (std::initializer_list<std::shared_ptr<Entity> >)__PAIR128__(1LL, &v33),
            &__a);
          v9 = Scene::notifyEntityDisappear(this, player, &entity_vec, context);
          std::vector<std::shared_ptr<Entity>>::~vector(&entity_vec);
          std::allocator<std::shared_ptr<Entity>>::~allocator(&__a);
          for ( i = (std::shared_ptr<Entity> *)&entity_vec; i != &v33; std::shared_ptr<Entity>::~shared_ptr(i) )
            --i;
        }
      }
      std::vector<std::shared_ptr<Entity>>::~vector((std::vector<std::shared_ptr<Entity>> *const)(v4 + 160));
    }
    std::shared_ptr<EntitySightGroup>::~shared_ptr((std::shared_ptr<EntitySightGroup> *const)(v4 + 64));
  }
  std::shared_ptr<PlayerViewMgr>::~shared_ptr((std::shared_ptr<PlayerViewMgr> *const)(v4 + 32));
  std::vector<std::shared_ptr<Entity>>::~vector((std::vector<std::shared_ptr<Entity>> *const)(v4 + 96));
  result = v9;
  if ( v36 == (char *)v4 )
  {
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8008) = 0LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8010) = 0LL;
    *(_DWORD *)((v4 >> 3) + 0x7FFF8018) = 0;
  }
  else
  {
    *(_QWORD *)v4 = 1172321806LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v4 >> 3) + 0x7FFF8018) = -168430091;
  }
  return result;
};

// Line 2955: range 000000001598B884-000000001598C0A7
int32_t __cdecl Scene::entitiesEnterPlayerSightRange(
        Scene *const this,
        Player *player,
        const std::vector<std::shared_ptr<Entity>> *entity_vec,
        const VisionContext *context)
{
  unsigned __int64 v4; // r13
  __int64 v5; // rax
  _DWORD *v6; // r12
  int Uid; // eax
  uint32_t v8; // eax
  int32_t v9; // r14d
  std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v10; // rax
  PlayerViewMgr *v11; // rax
  std::__shared_ptr_access<PlayerViewMgr,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v12; // rax
  std::remove_reference<const std::shared_ptr<Entity>&>::type *v13; // rax
  std::pair<std::_Rb_tree_const_iterator<std::shared_ptr<EntitySightGroup> >,bool> v14; // rax
  std::__shared_ptr_access<EntitySightGroup,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v15; // rax
  std::__shared_ptr_access<PlayerViewMgr,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v16; // rax
  char v17; // al
  common::milog::MiLogStream *v18; // r14
  std::__shared_ptr_access<EntitySightGroup,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v19; // rax
  common::milog::MiLogStream *v20; // rax
  common::milog::MiLogStream *v21; // rax
  common::milog::MiLogStream *v22; // rax
  EntitySightGroup *v23; // rax
  std::shared_ptr<Entity> *M_current; // r15
  std::shared_ptr<Entity> *v25; // r14
  PlayerViewMgr *v26; // rax
  std::__shared_ptr_access<PlayerViewMgr,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v27; // rax
  EntitySightGroup *v28; // rdx
  common::milog::MiLogStream *v29; // r14
  int32_t result; // eax
  bool is_group_vision_type_closed; // [rsp+3Bh] [rbp-1C5h]
  unsigned int val; // [rsp+3Ch] [rbp-1C4h] BYREF
  std::vector<std::shared_ptr<Entity>>::const_iterator __for_begin; // [rsp+40h] [rbp-1C0h] BYREF
  std::vector<std::shared_ptr<Entity>>::const_iterator __for_end; // [rsp+48h] [rbp-1B8h] BYREF
  __gnu_cxx::__normal_iterator<std::shared_ptr<Entity>*,std::vector<std::shared_ptr<Entity>> > __i; // [rsp+50h] [rbp-1B0h] BYREF
  __gnu_cxx::__normal_iterator<const std::shared_ptr<Entity>*,std::vector<std::shared_ptr<Entity>> > __position; // [rsp+58h] [rbp-1A8h] BYREF
  const std::vector<std::shared_ptr<Entity>> *__for_range; // [rsp+60h] [rbp-1A0h]
  const std::shared_ptr<Entity> *entity_ptr; // [rsp+68h] [rbp-198h]
  common::milog::MiLogStream v41; // [rsp+70h] [rbp-190h] BYREF
  char v42[368]; // [rsp+90h] [rbp-170h] BYREF

  v4 = (unsigned __int64)v42;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v5 = __asan_stack_malloc_3(320LL);
    if ( v5 )
      v4 = v5;
  }
  *(_QWORD *)v4 = 1102416563LL;
  *(_QWORD *)(v4 + 8) = "6 32 4 25 sg_group_vision_type:2986 48 16 17 view_mgr_ptr:2957 80 16 20 sight_group_ptr:2970 112"
                        " 24 19 real_enter_vec:2956 176 24 21 group_entity_vec:2996 240 48 30 processed_sight_group_set:2964";
  *(_QWORD *)(v4 + 16) = Scene::entitiesEnterPlayerSightRange;
  v6 = (_DWORD *)(v4 >> 3);
  v6[536862720] = -235802127;
  v6[536862721] = 61956;
  v6[536862722] = 62194;
  v6[536862723] = 62194;
  v6[536862724] = -218959360;
  v6[536862725] = 62194;
  v6[536862726] = -218959360;
  v6[536862727] = 62194;
  v6[536862729] = -202116109;
  std::vector<std::shared_ptr<Entity>>::vector((std::vector<std::shared_ptr<Entity>> *const)(v4 + 112));
  Uid = Player::getUid(player);
  Scene::findPlayerViewMgr((const Scene *const)(v4 + 48), (__int64)this, Uid);
  if ( std::operator==<PlayerViewMgr>((const std::shared_ptr<PlayerViewMgr> *)(v4 + 48), 0LL) )
  {
    common::milog::MiLogStream::create(
      &v41,
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/scene/scene.cpp",
      "entitiesEnterPlayerSightRange",
      2960);
    v8 = Player::getUid(player);
    common::milog::MiLogStream::operator()(&v41, "uid:%u view_mgr is null", v8);
    common::milog::MiLogStream::~MiLogStream(&v41);
    v9 = -1;
  }
  else
  {
    std::set<std::shared_ptr<EntitySightGroup>>::set((std::set<std::shared_ptr<EntitySightGroup>> *const)(v4 + 240));
    ServiceBox::findService<GameserverService>();
    GameserverService::getConfig((GameserverService *const)(v4 + 80));
    v10 = std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 80));
    is_group_vision_type_closed = FeatureSwitchMgr::isGroupVisionTypeClosed(&v10->feature_switch_mgr);
    std::shared_ptr<Config>::~shared_ptr((std::shared_ptr<Config> *const)(v4 + 80));
    __for_range = entity_vec;
    __for_begin._M_current = std::vector<std::shared_ptr<Entity>>::begin(entity_vec)._M_current;
    __for_end._M_current = std::vector<std::shared_ptr<Entity>>::end(entity_vec)._M_current;
    while ( __gnu_cxx::operator!=<std::shared_ptr<Entity> const*,std::vector<std::shared_ptr<Entity>>>(
              &__for_begin,
              &__for_end) )
    {
      entity_ptr = __gnu_cxx::__normal_iterator<std::shared_ptr<Entity> const*,std::vector<std::shared_ptr<Entity>>>::operator*(&__for_begin);
      v11 = std::__shared_ptr_access<PlayerViewMgr,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<PlayerViewMgr,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 48));
      PlayerViewMgr::addEntityInSightRange(v11, entity_ptr);
      std::__shared_ptr_access<Entity,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Entity,(__gnu_cxx::_Lock_policy)2,false,false> *const)entity_ptr);
      Entity::getSightGroup((const Entity *const)(v4 + 80));
      if ( std::operator==<EntitySightGroup>((const std::shared_ptr<EntitySightGroup> *)(v4 + 80), 0LL) )
      {
        v12 = std::__shared_ptr_access<PlayerViewMgr,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<PlayerViewMgr,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 48));
        if ( !PlayerViewMgr::isContainEntityInView(v12, entity_ptr) )
        {
          v13 = std::move<std::shared_ptr<Entity> const&>(entity_ptr);
          std::vector<std::shared_ptr<Entity>>::emplace_back<std::shared_ptr<Entity> const>(
            (std::vector<std::shared_ptr<Entity>> *const)(v4 + 112),
            v13,
            v13);
        }
      }
      else
      {
        v14 = std::set<std::shared_ptr<EntitySightGroup>>::insert(
                (std::set<std::shared_ptr<EntitySightGroup>> *const)(v4 + 240),
                (const std::set<std::shared_ptr<EntitySightGroup>>::value_type *)(v4 + 80));
        if ( v14.second )
        {
          if ( !is_group_vision_type_closed
            && ((v15 = std::__shared_ptr_access<EntitySightGroup,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<EntitySightGroup,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 80)),
                 (*(_DWORD *)(v4 + 32) = EntitySightGroup::getGroupVisionType(v15)) == 0)
             || (v16 = std::__shared_ptr_access<PlayerViewMgr,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<PlayerViewMgr,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 48)),
                 PlayerViewMgr::isContainGroupVisionType(v16, *(_DWORD *)(v4 + 32)))
              ? (v17 = 0)
              : (v17 = 1),
                v17) )
          {
            common::milog::MiLogStream::create(
              &v41,
              &common::milog::MiLogDefault::default_log_obj_,
              0x19u,
              "./src/scene/scene.cpp",
              "entitiesEnterPlayerSightRange",
              2990);
            v18 = common::milog::MiLogStream::operator<<<char [13],(char *[13])0>(
                    &v41,
                    (const char (*)[13])"sight_group:");
            v19 = std::__shared_ptr_access<EntitySightGroup,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<EntitySightGroup,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 80));
            val = EntitySightGroup::getSelfId(v19);
            v20 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v18, &val);
            v21 = common::milog::MiLogStream::operator<<<char [20],(char *[20])0>(
                    v20,
                    (const char (*)[20])" group_vision_type:");
            v22 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                    v21,
                    (const unsigned int *)(v4 + 32));
            common::milog::MiLogStream::operator<<<char [23],(char *[23])0>(
              v22,
              (const char (*)[23])" not match with player");
            common::milog::MiLogStream::~MiLogStream(&v41);
          }
          else
          {
            v23 = std::__shared_ptr_access<EntitySightGroup,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<EntitySightGroup,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 80));
            EntitySightGroup::validateAndGetEntitiesInSightGroup(
              (std::vector<std::shared_ptr<Entity>> *)(v4 + 176),
              v23);
            M_current = std::vector<std::shared_ptr<Entity>>::end((std::vector<std::shared_ptr<Entity>> *const)(v4 + 176))._M_current;
            v25 = std::vector<std::shared_ptr<Entity>>::begin((std::vector<std::shared_ptr<Entity>> *const)(v4 + 176))._M_current;
            __i._M_current = std::vector<std::shared_ptr<Entity>>::end((std::vector<std::shared_ptr<Entity>> *const)(v4 + 112))._M_current;
            __gnu_cxx::__normal_iterator<std::shared_ptr<Entity> const*,std::vector<std::shared_ptr<Entity>>>::__normal_iterator<std::shared_ptr<Entity>*>(
              &__position,
              &__i);
            std::vector<std::shared_ptr<Entity>>::insert<__gnu_cxx::__normal_iterator<std::shared_ptr<Entity>*,std::vector<std::shared_ptr<Entity>>>,void>(
              (std::vector<std::shared_ptr<Entity>> *const)(v4 + 112),
              __position,
              (__gnu_cxx::__normal_iterator<std::shared_ptr<Entity>*,std::vector<std::shared_ptr<Entity>> >)v25,
              (__gnu_cxx::__normal_iterator<std::shared_ptr<Entity>*,std::vector<std::shared_ptr<Entity>> >)M_current);
            v26 = std::__shared_ptr_access<PlayerViewMgr,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<PlayerViewMgr,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 48));
            PlayerViewMgr::addSightGroupInView(v26, (const EntitySightGroupPtr *)(v4 + 80));
            v27 = std::__shared_ptr_access<PlayerViewMgr,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<PlayerViewMgr,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 48));
            if ( PlayerViewMgr::getChangeEyePropGuardState(v27) == PLAYER_CHANGE_EYE_PROP_GUARD_STATE_NONE )
            {
              v28 = std::__shared_ptr_access<EntitySightGroup,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<EntitySightGroup,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 80));
              EntitySightGroup::onEnterPlayerView(v28, player);
            }
            common::milog::MiLogStream::create(
              &v41,
              &common::milog::MiLogDefault::default_log_obj_,
              0x19u,
              "./src/scene/scene.cpp",
              "entitiesEnterPlayerSightRange",
              3005);
            v29 = common::milog::MiLogStream::operator<<<char [24],(char *[24])0>(
                    &v41,
                    (const char (*)[24])" group_entity_vec size:");
            __position._M_current = (const std::shared_ptr<Entity> *)std::vector<std::shared_ptr<Entity>>::size((const std::vector<std::shared_ptr<Entity>> *const)(v4 + 176));
            common::milog::MiLogStream::operator<<<unsigned long,(unsigned long *)0>(
              v29,
              (const unsigned __int64 *)&__position);
            common::milog::MiLogStream::~MiLogStream(&v41);
            std::vector<std::shared_ptr<Entity>>::~vector((std::vector<std::shared_ptr<Entity>> *const)(v4 + 176));
          }
        }
      }
      std::shared_ptr<EntitySightGroup>::~shared_ptr((std::shared_ptr<EntitySightGroup> *const)(v4 + 80));
      __gnu_cxx::__normal_iterator<std::shared_ptr<Entity> const*,std::vector<std::shared_ptr<Entity>>>::operator++(&__for_begin);
    }
    v9 = Scene::notifyEntityAppear(this, player, (const std::vector<std::shared_ptr<Entity>> *)(v4 + 112), context);
    std::set<std::shared_ptr<EntitySightGroup>>::~set((std::set<std::shared_ptr<EntitySightGroup>> *const)(v4 + 240));
  }
  std::shared_ptr<PlayerViewMgr>::~shared_ptr((std::shared_ptr<PlayerViewMgr> *const)(v4 + 48));
  std::vector<std::shared_ptr<Entity>>::~vector((std::vector<std::shared_ptr<Entity>> *const)(v4 + 112));
  result = v9;
  if ( v42 == (char *)v4 )
  {
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8008) = 0LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8010) = 0LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8018) = 0LL;
    *(_DWORD *)((v4 >> 3) + 0x7FFF8024) = 0;
  }
  else
  {
    *(_QWORD *)v4 = 1172321806LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8020) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 3015: range 000000001598C0A8-000000001598C970
int32_t __cdecl Scene::entitiesLeavePlayerSightRange(
        Scene *const this,
        Player *player,
        const std::vector<std::shared_ptr<Entity>> *entity_vec,
        const VisionContext *context)
{
  unsigned __int64 v4; // r13
  __int64 v5; // rax
  _DWORD *v6; // r12
  int Uid; // eax
  uint32_t v8; // eax
  int32_t v9; // r14d
  std::__shared_ptr_access<Entity,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v10; // rax
  PlayerViewMgr *v11; // rax
  std::__shared_ptr_access<PlayerViewMgr,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v12; // rax
  std::remove_reference<const std::shared_ptr<Entity>&>::type *v13; // rax
  std::pair<std::_Rb_tree_const_iterator<std::shared_ptr<EntitySightGroup> >,bool> v14; // rax
  EntitySightGroup *v15; // rax
  std::__shared_ptr_access<Entity,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v16; // rax
  std::__shared_ptr_access<PlayerViewMgr,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v17; // rax
  std::shared_ptr<Entity> *M_current; // r15
  std::shared_ptr<Entity> *v19; // r14
  PlayerViewMgr *v20; // rax
  std::__shared_ptr_access<PlayerViewMgr,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v21; // rax
  EntitySightGroup *v22; // rdx
  common::milog::MiLogStream *v23; // r14
  common::milog::MiLogStream *v24; // rax
  common::milog::MiLogStream *v25; // r14
  int32_t result; // eax
  bool all_leave; // [rsp+3Bh] [rbp-225h]
  std::set<unsigned int>::value_type __x; // [rsp+3Ch] [rbp-224h] BYREF
  std::vector<std::shared_ptr<Entity>>::const_iterator __for_begin_0; // [rsp+40h] [rbp-220h] BYREF
  std::vector<std::shared_ptr<Entity>>::const_iterator __for_end_0; // [rsp+48h] [rbp-218h] BYREF
  std::vector<std::shared_ptr<Entity>>::const_iterator __for_begin; // [rsp+50h] [rbp-210h] BYREF
  std::vector<std::shared_ptr<Entity>>::const_iterator __for_end; // [rsp+58h] [rbp-208h] BYREF
  const std::vector<std::shared_ptr<Entity>> *__for_range; // [rsp+60h] [rbp-200h]
  const std::vector<std::shared_ptr<Entity>> *__for_range_0; // [rsp+68h] [rbp-1F8h]
  const std::shared_ptr<Entity> *entity_ptr_0; // [rsp+70h] [rbp-1F0h]
  std::vector<std::shared_ptr<Entity>> *__for_range_1; // [rsp+78h] [rbp-1E8h]
  std::shared_ptr<Entity> *group_entity_ptr; // [rsp+80h] [rbp-1E0h]
  const std::shared_ptr<Entity> *entity_ptr; // [rsp+88h] [rbp-1D8h]
  common::milog::MiLogStream v41; // [rsp+90h] [rbp-1D0h] BYREF
  char v42[432]; // [rsp+B0h] [rbp-1B0h] BYREF

  v4 = (unsigned __int64)v42;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v5 = __asan_stack_malloc_3(384LL);
    if ( v5 )
      v4 = v5;
  }
  *(_QWORD *)v4 = 1102416563LL;
  *(_QWORD *)(v4 + 8) = "6 32 16 17 view_mgr_ptr:3017 64 16 20 sight_group_ptr:3035 96 24 19 real_leave_vec:3016 160 24 2"
                        "1 group_entity_vec:3050 224 48 18 entity_id_set:3024 304 48 30 processed_sight_group_set:3025";
  *(_QWORD *)(v4 + 16) = Scene::entitiesLeavePlayerSightRange;
  v6 = (_DWORD *)(v4 >> 3);
  v6[536862720] = -235802127;
  v6[536862721] = -219021312;
  v6[536862722] = -219021312;
  v6[536862723] = -234881024;
  v6[536862724] = -218959118;
  v6[536862725] = -234881024;
  v6[536862726] = -218959118;
  v6[536862728] = -219021312;
  v6[536862729] = 62194;
  v6[536862731] = -202116109;
  std::vector<std::shared_ptr<Entity>>::vector((std::vector<std::shared_ptr<Entity>> *const)(v4 + 96));
  Uid = Player::getUid(player);
  Scene::findPlayerViewMgr((const Scene *const)(v4 + 32), (__int64)this, Uid);
  if ( std::operator==<PlayerViewMgr>((const std::shared_ptr<PlayerViewMgr> *)(v4 + 32), 0LL) )
  {
    common::milog::MiLogStream::create(
      &v41,
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/scene/scene.cpp",
      "entitiesLeavePlayerSightRange",
      3020);
    v8 = Player::getUid(player);
    common::milog::MiLogStream::operator()(&v41, "uid:%u view_mgr is null", v8);
    common::milog::MiLogStream::~MiLogStream(&v41);
    v9 = -1;
  }
  else
  {
    std::set<unsigned int>::set((std::set<unsigned int> *const)(v4 + 224));
    std::set<std::shared_ptr<EntitySightGroup>>::set((std::set<std::shared_ptr<EntitySightGroup>> *const)(v4 + 304));
    __for_range = entity_vec;
    __for_begin._M_current = std::vector<std::shared_ptr<Entity>>::begin(entity_vec)._M_current;
    __for_end._M_current = std::vector<std::shared_ptr<Entity>>::end(entity_vec)._M_current;
    while ( __gnu_cxx::operator!=<std::shared_ptr<Entity> const*,std::vector<std::shared_ptr<Entity>>>(
              &__for_begin,
              &__for_end) )
    {
      entity_ptr = __gnu_cxx::__normal_iterator<std::shared_ptr<Entity> const*,std::vector<std::shared_ptr<Entity>>>::operator*(&__for_begin);
      v10 = std::__shared_ptr_access<Entity,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Entity,(__gnu_cxx::_Lock_policy)2,false,false> *const)entity_ptr);
      __x = Entity::getEntityId(v10);
      std::set<unsigned int>::insert((std::set<unsigned int> *const)(v4 + 224), &__x);
      v11 = std::__shared_ptr_access<PlayerViewMgr,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<PlayerViewMgr,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 32));
      PlayerViewMgr::delEntityInSightRange(v11, entity_ptr);
      __gnu_cxx::__normal_iterator<std::shared_ptr<Entity> const*,std::vector<std::shared_ptr<Entity>>>::operator++(&__for_begin);
    }
    __for_range_0 = entity_vec;
    __for_begin_0._M_current = std::vector<std::shared_ptr<Entity>>::begin(entity_vec)._M_current;
    __for_end_0._M_current = std::vector<std::shared_ptr<Entity>>::end(__for_range_0)._M_current;
    while ( __gnu_cxx::operator!=<std::shared_ptr<Entity> const*,std::vector<std::shared_ptr<Entity>>>(
              &__for_begin_0,
              &__for_end_0) )
    {
      entity_ptr_0 = __gnu_cxx::__normal_iterator<std::shared_ptr<Entity> const*,std::vector<std::shared_ptr<Entity>>>::operator*(&__for_begin_0);
      std::__shared_ptr_access<Entity,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Entity,(__gnu_cxx::_Lock_policy)2,false,false> *const)entity_ptr_0);
      Entity::getSightGroup((const Entity *const)(v4 + 64));
      if ( std::operator==<EntitySightGroup>((const std::shared_ptr<EntitySightGroup> *)(v4 + 64), 0LL) )
      {
        v12 = std::__shared_ptr_access<PlayerViewMgr,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<PlayerViewMgr,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 32));
        if ( PlayerViewMgr::isContainEntityInView(v12, entity_ptr_0) )
        {
          v13 = std::move<std::shared_ptr<Entity> const&>(entity_ptr_0);
          std::vector<std::shared_ptr<Entity>>::emplace_back<std::shared_ptr<Entity> const>(
            (std::vector<std::shared_ptr<Entity>> *const)(v4 + 96),
            v13,
            v13);
        }
      }
      else
      {
        v14 = std::set<std::shared_ptr<EntitySightGroup>>::insert(
                (std::set<std::shared_ptr<EntitySightGroup>> *const)(v4 + 304),
                (const std::set<std::shared_ptr<EntitySightGroup>>::value_type *)(v4 + 64));
        if ( v14.second )
        {
          all_leave = 1;
          v15 = std::__shared_ptr_access<EntitySightGroup,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<EntitySightGroup,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 64));
          EntitySightGroup::validateAndGetEntitiesInSightGroup((std::vector<std::shared_ptr<Entity>> *)(v4 + 160), v15);
          __for_range_1 = (std::vector<std::shared_ptr<Entity>> *)(v4 + 160);
          __for_begin._M_current = std::vector<std::shared_ptr<Entity>>::begin((std::vector<std::shared_ptr<Entity>> *const)(v4 + 160))._M_current;
          __for_end._M_current = std::vector<std::shared_ptr<Entity>>::end(__for_range_1)._M_current;
          while ( __gnu_cxx::operator!=<std::shared_ptr<Entity> *,std::vector<std::shared_ptr<Entity>>>(
                    (const __gnu_cxx::__normal_iterator<std::shared_ptr<Entity>*,std::vector<std::shared_ptr<Entity>> > *)&__for_begin,
                    (const __gnu_cxx::__normal_iterator<std::shared_ptr<Entity>*,std::vector<std::shared_ptr<Entity>> > *)&__for_end) )
          {
            group_entity_ptr = __gnu_cxx::__normal_iterator<std::shared_ptr<Entity> *,std::vector<std::shared_ptr<Entity>>>::operator*((const __gnu_cxx::__normal_iterator<std::shared_ptr<Entity>*,std::vector<std::shared_ptr<Entity>> > *const)&__for_begin);
            v16 = std::__shared_ptr_access<Entity,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Entity,(__gnu_cxx::_Lock_policy)2,false,false> *const)group_entity_ptr);
            __x = Entity::getEntityId(v16);
            if ( !std::set<unsigned int>::count((const std::set<unsigned int> *const)(v4 + 224), &__x) )
            {
              v17 = std::__shared_ptr_access<PlayerViewMgr,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<PlayerViewMgr,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 32));
              if ( PlayerViewMgr::isContainEntityInSightRange(v17, group_entity_ptr) )
              {
                all_leave = 0;
                break;
              }
            }
            __gnu_cxx::__normal_iterator<std::shared_ptr<Entity> *,std::vector<std::shared_ptr<Entity>>>::operator++((__gnu_cxx::__normal_iterator<std::shared_ptr<Entity>*,std::vector<std::shared_ptr<Entity>> > *const)&__for_begin);
          }
          if ( all_leave )
          {
            M_current = std::vector<std::shared_ptr<Entity>>::end((std::vector<std::shared_ptr<Entity>> *const)(v4 + 160))._M_current;
            v19 = std::vector<std::shared_ptr<Entity>>::begin((std::vector<std::shared_ptr<Entity>> *const)(v4 + 160))._M_current;
            __for_begin._M_current = std::vector<std::shared_ptr<Entity>>::end((std::vector<std::shared_ptr<Entity>> *const)(v4 + 96))._M_current;
            __gnu_cxx::__normal_iterator<std::shared_ptr<Entity> const*,std::vector<std::shared_ptr<Entity>>>::__normal_iterator<std::shared_ptr<Entity>*>(
              &__for_end,
              (const __gnu_cxx::__normal_iterator<std::shared_ptr<Entity>*,std::vector<std::shared_ptr<Entity>> > *)&__for_begin);
            std::vector<std::shared_ptr<Entity>>::insert<__gnu_cxx::__normal_iterator<std::shared_ptr<Entity>*,std::vector<std::shared_ptr<Entity>>>,void>(
              (std::vector<std::shared_ptr<Entity>> *const)(v4 + 96),
              __for_end,
              (__gnu_cxx::__normal_iterator<std::shared_ptr<Entity>*,std::vector<std::shared_ptr<Entity>> >)v19,
              (__gnu_cxx::__normal_iterator<std::shared_ptr<Entity>*,std::vector<std::shared_ptr<Entity>> >)M_current);
            v20 = std::__shared_ptr_access<PlayerViewMgr,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<PlayerViewMgr,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 32));
            PlayerViewMgr::delSightGroupInView(v20, (const EntitySightGroupPtr *)(v4 + 64));
            v21 = std::__shared_ptr_access<PlayerViewMgr,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<PlayerViewMgr,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 32));
            if ( PlayerViewMgr::getChangeEyePropGuardState(v21) == PLAYER_CHANGE_EYE_PROP_GUARD_STATE_NONE )
            {
              v22 = std::__shared_ptr_access<EntitySightGroup,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<EntitySightGroup,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 64));
              EntitySightGroup::onExitPlayerView(v22, player);
            }
            common::milog::MiLogStream::create(
              &v41,
              &common::milog::MiLogDefault::default_log_obj_,
              0x19u,
              "./src/scene/scene.cpp",
              "entitiesLeavePlayerSightRange",
              3075);
            v23 = common::milog::MiLogStream::operator<<<char [24],(char *[24])0>(
                    &v41,
                    (const char (*)[24])" group_entity_vec size:");
            __for_begin._M_current = (const std::shared_ptr<Entity> *)std::vector<std::shared_ptr<Entity>>::size((const std::vector<std::shared_ptr<Entity>> *const)(v4 + 160));
            v24 = common::milog::MiLogStream::operator<<<unsigned long,(unsigned long *)0>(
                    v23,
                    (const unsigned __int64 *)&__for_begin);
            v25 = common::milog::MiLogStream::operator<<<char [22],(char *[22])0>(
                    v24,
                    (const char (*)[22])" real_leave_vec size:");
            __for_end._M_current = (const std::shared_ptr<Entity> *)std::vector<std::shared_ptr<Entity>>::size((const std::vector<std::shared_ptr<Entity>> *const)(v4 + 96));
            common::milog::MiLogStream::operator<<<unsigned long,(unsigned long *)0>(
              v25,
              (const unsigned __int64 *)&__for_end);
            common::milog::MiLogStream::~MiLogStream(&v41);
          }
          std::vector<std::shared_ptr<Entity>>::~vector((std::vector<std::shared_ptr<Entity>> *const)(v4 + 160));
        }
      }
      std::shared_ptr<EntitySightGroup>::~shared_ptr((std::shared_ptr<EntitySightGroup> *const)(v4 + 64));
      __gnu_cxx::__normal_iterator<std::shared_ptr<Entity> const*,std::vector<std::shared_ptr<Entity>>>::operator++(&__for_begin_0);
    }
    v9 = Scene::notifyEntityDisappear(this, player, (const std::vector<std::shared_ptr<Entity>> *)(v4 + 96), context);
    std::set<std::shared_ptr<EntitySightGroup>>::~set((std::set<std::shared_ptr<EntitySightGroup>> *const)(v4 + 304));
    std::set<unsigned int>::~set((std::set<unsigned int> *const)(v4 + 224));
  }
  std::shared_ptr<PlayerViewMgr>::~shared_ptr((std::shared_ptr<PlayerViewMgr> *const)(v4 + 32));
  std::vector<std::shared_ptr<Entity>>::~vector((std::vector<std::shared_ptr<Entity>> *const)(v4 + 96));
  result = v9;
  if ( v42 == (char *)v4 )
  {
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8008) = 0LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8010) = 0LL;
    *(_DWORD *)((v4 >> 3) + 0x7FFF8018) = 0;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8020) = 0LL;
    *(_DWORD *)((v4 >> 3) + 0x7FFF802C) = 0;
  }
  else
  {
    *(_QWORD *)v4 = 1172321806LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8020) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8028) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 3085: range 000000001598C972-000000001598CCD6
void __cdecl Scene::entityEnterPlayersSightRange(
        Scene *const this,
        const std::vector<unsigned int> *uid_vec,
        const EntityPtr *entity_ptr,
        const VisionContext *context)
{
  unsigned __int64 v4; // rbx
  __int64 v5; // rax
  unsigned __int64 v6; // r13
  common::milog::MiLogStream *v7; // r14
  std::__shared_ptr_access<Entity,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v8; // rax
  common::milog::MiLogStream *v9; // rax
  common::milog::MiLogStream *v10; // rdx
  common::milog::MiLogStream *v11; // rax
  common::milog::MiLogStream *v12; // r14
  std::__shared_ptr_access<Entity,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v13; // rax
  common::milog::MiLogStream *v14; // rax
  common::milog::MiLogStream *v15; // r14
  std::__shared_ptr_access<Entity,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v16; // rax
  bool IsClientVisible; // al
  unsigned int *v18; // rax
  uint32_t *v19; // rdx
  Player *v20; // rsi
  unsigned int val; // [rsp+2Ch] [rbp-B4h] BYREF
  unsigned int OnlyVisionUid; // [rsp+30h] [rbp-B0h] BYREF
  uint32_t uid; // [rsp+34h] [rbp-ACh]
  std::vector<unsigned int>::const_iterator __for_begin; // [rsp+38h] [rbp-A8h] BYREF
  std::vector<unsigned int>::const_iterator __for_end; // [rsp+40h] [rbp-A0h] BYREF
  const std::vector<unsigned int> *__for_range; // [rsp+48h] [rbp-98h]
  common::milog::MiLogStream v29; // [rsp+50h] [rbp-90h] BYREF
  char v30[112]; // [rsp+70h] [rbp-70h] BYREF

  v4 = (unsigned __int64)v30;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v5 = __asan_stack_malloc_0(64LL);
    if ( v5 )
      v4 = v5;
  }
  *(_QWORD *)v4 = 1102416563LL;
  *(_QWORD *)(v4 + 8) = "1 32 16 15 player_ptr:3093";
  *(_QWORD *)(v4 + 16) = Scene::entityEnterPlayersSightRange;
  v6 = v4 >> 3;
  *(_DWORD *)(v6 + 2147450880) = -235802127;
  *(_DWORD *)(v6 + 2147450884) = -202178560;
  common::milog::MiLogStream::create(
    &v29,
    &common::milog::MiLogDefault::default_log_obj_,
    1u,
    "./src/scene/scene.cpp",
    "entityEnterPlayersSightRange",
    3087);
  v7 = common::milog::MiLogStream::operator<<<char [32],(char *[32])0>(
         &v29,
         (const char (*)[32])"notify entity appear,entity_id:");
  v8 = std::__shared_ptr_access<Entity,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Entity,(__gnu_cxx::_Lock_policy)2,false,false> *const)entity_ptr);
  val = Entity::getEntityId(v8);
  v9 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v7, &val);
  v10 = common::milog::MiLogStream::operator<<<char [10],(char *[10])0>(v9, (const char (*)[10])"uid_list:");
  v11 = common::milog::MiLogStream::operator<<<unsigned int>(v10, uid_vec);
  v12 = common::milog::MiLogStream::operator<<<char [17],(char *[17])0>(v11, (const char (*)[17])"only_vision_uid:");
  v13 = std::__shared_ptr_access<Entity,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Entity,(__gnu_cxx::_Lock_policy)2,false,false> *const)entity_ptr);
  OnlyVisionUid = Entity::getOnlyVisionUid(v13);
  v14 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v12, &OnlyVisionUid);
  v15 = common::milog::MiLogStream::operator<<<char [19],(char *[19])0>(v14, (const char (*)[19])"is_client_version:");
  v16 = std::__shared_ptr_access<Entity,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Entity,(__gnu_cxx::_Lock_policy)2,false,false> *const)entity_ptr);
  IsClientVisible = Entity::getIsClientVisible(v16);
  common::milog::MiLogStream::operator<<(v15, IsClientVisible);
  common::milog::MiLogStream::~MiLogStream(&v29);
  __for_range = uid_vec;
  __for_begin._M_current = std::vector<unsigned int>::begin(uid_vec)._M_current;
  __for_end._M_current = std::vector<unsigned int>::end(__for_range)._M_current;
  while ( __gnu_cxx::operator!=<unsigned int const*,std::vector<unsigned int>>(&__for_begin, &__for_end) )
  {
    v18 = (unsigned int *)__gnu_cxx::__normal_iterator<unsigned int const*,std::vector<unsigned int>>::operator*(&__for_begin);
    v19 = v18;
    if ( *(_BYTE *)(((unsigned __int64)v18 >> 3) + 0x7FFF8000) != 0
      && (char)(((unsigned __int8)v18 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)v18 >> 3) + 0x7FFF8000) )
    {
      __asan_report_load4(v18);
    }
    uid = *v19;
    Scene::findPlayer((const Scene *const)(v4 + 32), (__int64)this, uid);
    if ( std::operator!=<Player>((const std::shared_ptr<Player> *)(v4 + 32), 0LL) )
    {
      v20 = std::__shared_ptr_access<Player,(__gnu_cxx::_Lock_policy)2,false,false>::operator*((const std::__shared_ptr_access<Player,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 32));
      Scene::entityEnterPlayerSightRange(this, v20, entity_ptr, context);
    }
    std::shared_ptr<Player>::~shared_ptr((std::shared_ptr<Player> *const)(v4 + 32));
    __gnu_cxx::__normal_iterator<unsigned int const*,std::vector<unsigned int>>::operator++(&__for_begin);
  }
  if ( v30 == (char *)v4 )
  {
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0LL;
  }
  else
  {
    *(_QWORD *)v4 = 1172321806LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
  }
};

// Line 3101: range 000000001598CCD8-000000001598D03C
void __cdecl Scene::entityLeavePlayersSightRange(
        Scene *const this,
        const std::vector<unsigned int> *uid_vec,
        const EntityPtr *entity_ptr,
        const VisionContext *context)
{
  unsigned __int64 v4; // rbx
  __int64 v5; // rax
  unsigned __int64 v6; // r13
  common::milog::MiLogStream *v7; // r14
  std::__shared_ptr_access<Entity,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v8; // rax
  common::milog::MiLogStream *v9; // rax
  common::milog::MiLogStream *v10; // rdx
  common::milog::MiLogStream *v11; // rax
  common::milog::MiLogStream *v12; // r14
  std::__shared_ptr_access<Entity,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v13; // rax
  common::milog::MiLogStream *v14; // rax
  common::milog::MiLogStream *v15; // r14
  std::__shared_ptr_access<Entity,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v16; // rax
  bool IsClientVisible; // al
  unsigned int *v18; // rax
  uint32_t *v19; // rdx
  Player *v20; // rsi
  unsigned int val; // [rsp+2Ch] [rbp-B4h] BYREF
  unsigned int OnlyVisionUid; // [rsp+30h] [rbp-B0h] BYREF
  uint32_t uid; // [rsp+34h] [rbp-ACh]
  std::vector<unsigned int>::const_iterator __for_begin; // [rsp+38h] [rbp-A8h] BYREF
  std::vector<unsigned int>::const_iterator __for_end; // [rsp+40h] [rbp-A0h] BYREF
  const std::vector<unsigned int> *__for_range; // [rsp+48h] [rbp-98h]
  common::milog::MiLogStream v29; // [rsp+50h] [rbp-90h] BYREF
  char v30[112]; // [rsp+70h] [rbp-70h] BYREF

  v4 = (unsigned __int64)v30;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v5 = __asan_stack_malloc_0(64LL);
    if ( v5 )
      v4 = v5;
  }
  *(_QWORD *)v4 = 1102416563LL;
  *(_QWORD *)(v4 + 8) = "1 32 16 15 player_ptr:3109";
  *(_QWORD *)(v4 + 16) = Scene::entityLeavePlayersSightRange;
  v6 = v4 >> 3;
  *(_DWORD *)(v6 + 2147450880) = -235802127;
  *(_DWORD *)(v6 + 2147450884) = -202178560;
  common::milog::MiLogStream::create(
    &v29,
    &common::milog::MiLogDefault::default_log_obj_,
    1u,
    "./src/scene/scene.cpp",
    "entityLeavePlayersSightRange",
    3103);
  v7 = common::milog::MiLogStream::operator<<<char [35],(char *[35])0>(
         &v29,
         (const char (*)[35])"notify entity disappear,entity_id:");
  v8 = std::__shared_ptr_access<Entity,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Entity,(__gnu_cxx::_Lock_policy)2,false,false> *const)entity_ptr);
  val = Entity::getEntityId(v8);
  v9 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v7, &val);
  v10 = common::milog::MiLogStream::operator<<<char [10],(char *[10])0>(v9, (const char (*)[10])"uid_list:");
  v11 = common::milog::MiLogStream::operator<<<unsigned int>(v10, uid_vec);
  v12 = common::milog::MiLogStream::operator<<<char [17],(char *[17])0>(v11, (const char (*)[17])"only_vision_uid:");
  v13 = std::__shared_ptr_access<Entity,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Entity,(__gnu_cxx::_Lock_policy)2,false,false> *const)entity_ptr);
  OnlyVisionUid = Entity::getOnlyVisionUid(v13);
  v14 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v12, &OnlyVisionUid);
  v15 = common::milog::MiLogStream::operator<<<char [19],(char *[19])0>(v14, (const char (*)[19])"is_client_version:");
  v16 = std::__shared_ptr_access<Entity,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Entity,(__gnu_cxx::_Lock_policy)2,false,false> *const)entity_ptr);
  IsClientVisible = Entity::getIsClientVisible(v16);
  common::milog::MiLogStream::operator<<(v15, IsClientVisible);
  common::milog::MiLogStream::~MiLogStream(&v29);
  __for_range = uid_vec;
  __for_begin._M_current = std::vector<unsigned int>::begin(uid_vec)._M_current;
  __for_end._M_current = std::vector<unsigned int>::end(__for_range)._M_current;
  while ( __gnu_cxx::operator!=<unsigned int const*,std::vector<unsigned int>>(&__for_begin, &__for_end) )
  {
    v18 = (unsigned int *)__gnu_cxx::__normal_iterator<unsigned int const*,std::vector<unsigned int>>::operator*(&__for_begin);
    v19 = v18;
    if ( *(_BYTE *)(((unsigned __int64)v18 >> 3) + 0x7FFF8000) != 0
      && (char)(((unsigned __int8)v18 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)v18 >> 3) + 0x7FFF8000) )
    {
      __asan_report_load4(v18);
    }
    uid = *v19;
    Scene::findPlayer((const Scene *const)(v4 + 32), (__int64)this, uid);
    if ( std::operator!=<Player>((const std::shared_ptr<Player> *)(v4 + 32), 0LL) )
    {
      v20 = std::__shared_ptr_access<Player,(__gnu_cxx::_Lock_policy)2,false,false>::operator*((const std::__shared_ptr_access<Player,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 32));
      Scene::entityLeavePlayerSightRange(this, v20, entity_ptr, context);
    }
    std::shared_ptr<Player>::~shared_ptr((std::shared_ptr<Player> *const)(v4 + 32));
    __gnu_cxx::__normal_iterator<unsigned int const*,std::vector<unsigned int>>::operator++(&__for_begin);
  }
  if ( v30 == (char *)v4 )
  {
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0LL;
  }
  else
  {
    *(_QWORD *)v4 = 1172321806LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
  }
};

// Line 3117: range 000000001598D03E-000000001598DDEE
int32_t __cdecl Scene::notifyEntityAppear(
        Scene *const this,
        Player *player,
        const std::vector<std::shared_ptr<Entity>> *entity_vec,
        const VisionContext *context)
{
  unsigned __int64 v4; // r13
  __int64 v5; // rax
  _DWORD *v6; // r12
  int32_t v7; // r14d
  int Uid; // eax
  uint32_t v9; // eax
  std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v10; // rax
  std::__shared_ptr_access<PlayerViewMgr,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v11; // rax
  std::__shared_ptr_access<Entity,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v12; // rax
  std::__shared_ptr_access<Entity,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v13; // rax
  uint32_t v14; // eax
  std::__shared_ptr_access<Entity,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v16; // rax
  std::__shared_ptr_access<PlayerViewMgr,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v17; // rax
  char v18; // al
  std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v19; // rdx
  char v20; // al
  PlayerViewMgr *v21; // rax
  common::milog::MiLogStream *v22; // r14
  std::__shared_ptr_access<Entity,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v23; // rax
  common::milog::MiLogStream *v24; // rax
  common::milog::MiLogStream *v25; // rax
  common::milog::MiLogStream *v26; // rax
  PlayerViewMgr *v27; // rax
  std::vector<std::shared_ptr<Entity>>::size_type v28; // rax
  std::vector<std::shared_ptr<Entity>>::size_type v29; // rax
  std::__shared_ptr_access<Entity,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v30; // rax
  std::__shared_ptr_access<Entity,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v31; // rax
  uint32_t v32; // eax
  std::__shared_ptr_access<Entity,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v34; // rax
  std::__shared_ptr_access<PlayerViewMgr,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v35; // rax
  char v36; // al
  std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v37; // rdx
  char v38; // al
  PlayerViewMgr *v39; // rax
  common::milog::MiLogStream *v40; // r14
  std::__shared_ptr_access<Entity,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v41; // rax
  common::milog::MiLogStream *v42; // rax
  common::milog::MiLogStream *v43; // rax
  common::milog::MiLogStream *v44; // rax
  PlayerViewMgr *v45; // rax
  common::milog::MiLogStream *v46; // r14
  std::__shared_ptr_access<Entity,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v47; // rax
  common::milog::MiLogStream *v48; // rax
  common::milog::MiLogStream *v49; // r14
  unsigned __int64 v50; // rax
  unsigned __int64 v51; // rdx
  std::__shared_ptr_access<Entity,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v52; // rax
  uint32_t exclude_uid; // r14d
  char v54; // al
  std::remove_reference<const std::shared_ptr<Entity>&>::type *v55; // rax
  const std::shared_ptr<Entity> *v56; // rax
  unsigned __int64 v57; // rax
  unsigned __int64 v58; // rdx
  int32_t result; // eax
  bool is_group_vision_type_closed; // [rsp+26h] [rbp-19Ah]
  bool ret; // [rsp+27h] [rbp-199h]
  unsigned int val; // [rsp+28h] [rbp-198h] BYREF
  PlayerChangeEyePropGuardState player_view_sync_guard_state; // [rsp+2Ch] [rbp-194h]
  uint32_t only_vision_uid_0; // [rsp+30h] [rbp-190h]
  uint32_t only_vision_uid; // [rsp+34h] [rbp-18Ch]
  std::vector<std::shared_ptr<Entity>>::const_iterator __for_begin; // [rsp+38h] [rbp-188h] BYREF
  std::vector<std::shared_ptr<Entity>>::const_iterator __for_end; // [rsp+40h] [rbp-180h] BYREF
  const std::vector<std::shared_ptr<Entity>> *__for_range_0; // [rsp+48h] [rbp-178h]
  std::vector<std::shared_ptr<Entity>> *__for_range_1; // [rsp+50h] [rbp-170h]
  const std::shared_ptr<Entity> *entity_ptr_0; // [rsp+58h] [rbp-168h]
  const std::vector<std::shared_ptr<Entity>> *__for_range; // [rsp+60h] [rbp-160h]
  const std::shared_ptr<Entity> *entity_ptr; // [rsp+68h] [rbp-158h]
  common::milog::MiLogStream v75; // [rsp+70h] [rbp-150h] BYREF
  char v76[304]; // [rsp+90h] [rbp-130h] BYREF

  v4 = (unsigned __int64)v76;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v5 = __asan_stack_malloc_2(256LL);
    if ( v5 )
      v4 = v5;
  }
  *(_QWORD *)v4 = 1102416563LL;
  *(_QWORD *)(v4 + 8) = "5 48 4 29 entity_group_vision_type:3183 64 16 17 view_mgr_ptr:3123 96 16 15 entity_ptr:3216 128 "
                        "24 20 send_entity_vec:3167 192 24 19 entity_ptr_vec:3167";
  *(_QWORD *)(v4 + 16) = Scene::notifyEntityAppear;
  v6 = (_DWORD *)(v4 >> 3);
  v6[536862720] = -235802127;
  v6[536862721] = -234556943;
  v6[536862722] = -219021312;
  v6[536862723] = -219021312;
  v6[536862724] = -234881024;
  v6[536862725] = -218959118;
  v6[536862726] = -218103808;
  v6[536862727] = -202116109;
  if ( std::vector<std::shared_ptr<Entity>>::empty(entity_vec) )
  {
    v7 = 0;
  }
  else
  {
    Uid = Player::getUid(player);
    Scene::findPlayerViewMgr((const Scene *const)(v4 + 64), (__int64)this, Uid);
    if ( std::operator==<PlayerViewMgr>((const std::shared_ptr<PlayerViewMgr> *)(v4 + 64), 0LL) )
    {
      common::milog::MiLogStream::create(
        &v75,
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/scene/scene.cpp",
        "notifyEntityAppear",
        3126);
      v9 = Player::getUid(player);
      common::milog::MiLogStream::operator()(&v75, "uid:%u view_mgr is null", v9);
      common::milog::MiLogStream::~MiLogStream(&v75);
      v7 = -1;
    }
    else
    {
      ServiceBox::findService<GameserverService>();
      GameserverService::getConfig((GameserverService *const)(v4 + 96));
      v10 = std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 96));
      is_group_vision_type_closed = FeatureSwitchMgr::isGroupVisionTypeClosed(&v10->feature_switch_mgr);
      std::shared_ptr<Config>::~shared_ptr((std::shared_ptr<Config> *const)(v4 + 96));
      v11 = std::__shared_ptr_access<PlayerViewMgr,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<PlayerViewMgr,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 64));
      player_view_sync_guard_state = PlayerViewMgr::getChangeEyePropGuardState(v11);
      if ( player_view_sync_guard_state == PLAYER_CHANGE_EYE_PROP_GUARD_STATE_GUARDING )
      {
        __for_range = entity_vec;
        __for_begin._M_current = std::vector<std::shared_ptr<Entity>>::begin(entity_vec)._M_current;
        __for_end._M_current = std::vector<std::shared_ptr<Entity>>::end(entity_vec)._M_current;
        while ( __gnu_cxx::operator!=<std::shared_ptr<Entity> const*,std::vector<std::shared_ptr<Entity>>>(
                  &__for_begin,
                  &__for_end) )
        {
          entity_ptr = __gnu_cxx::__normal_iterator<std::shared_ptr<Entity> const*,std::vector<std::shared_ptr<Entity>>>::operator*(&__for_begin);
          v12 = std::__shared_ptr_access<Entity,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Entity,(__gnu_cxx::_Lock_policy)2,false,false> *const)entity_ptr);
          if ( Entity::getIsClientVisible(v12) )
          {
            v13 = std::__shared_ptr_access<Entity,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Entity,(__gnu_cxx::_Lock_policy)2,false,false> *const)entity_ptr);
            only_vision_uid = Entity::getOnlyVisionUid(v13);
            if ( !only_vision_uid || (v14 = Player::getUid(player), only_vision_uid == v14) )
            {
              if ( !is_group_vision_type_closed
                && ((v16 = std::__shared_ptr_access<Entity,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Entity,(__gnu_cxx::_Lock_policy)2,false,false> *const)entity_ptr),
                     (*(_DWORD *)(v4 + 48) = Entity::getGroupVisionType(v16)) == 0)
                 || (v17 = std::__shared_ptr_access<PlayerViewMgr,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<PlayerViewMgr,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 64)),
                     PlayerViewMgr::isContainGroupVisionType(v17, *(_DWORD *)(v4 + 48)))
                  ? (v18 = 0)
                  : (v18 = 1),
                    v18) )
              {
                ServiceBox::findService<GameserverService>();
                GameserverService::getConfig((GameserverService *const)(v4 + 96));
                if ( !std::operator!=<Config>(0LL, (const std::shared_ptr<Config> *)(v4 + 96)) )
                  goto LABEL_28;
                v19 = std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 96));
                if ( *(_BYTE *)(((unsigned __int64)&v19->is_delete_in_sight_when_appear >> 3) + 0x7FFF8000) != 0
                  && (((unsigned __int8)v19 - 85) & 7) >= *(_BYTE *)(((unsigned __int64)&v19->is_delete_in_sight_when_appear >> 3)
                                                                   + 0x7FFF8000) )
                {
                  __asan_report_load1(&v19->is_delete_in_sight_when_appear);
                }
                if ( v19->is_delete_in_sight_when_appear )
                  v20 = 1;
                else
LABEL_28:
                  v20 = 0;
                if ( v20 )
                {
                  v21 = std::__shared_ptr_access<PlayerViewMgr,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<PlayerViewMgr,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 64));
                  PlayerViewMgr::delEntityInSightRange(v21, entity_ptr);
                }
                common::milog::MiLogStream::create(
                  &v75,
                  &common::milog::MiLogDefault::default_log_obj_,
                  0x19u,
                  "./src/scene/scene.cpp",
                  "notifyEntityAppear",
                  3156);
                v22 = common::milog::MiLogStream::operator<<<char [8],(char *[8])0>(&v75, (const char (*)[8])"entity:");
                v23 = std::__shared_ptr_access<Entity,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Entity,(__gnu_cxx::_Lock_policy)2,false,false> *const)entity_ptr);
                val = Entity::getEntityId(v23);
                v24 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v22, &val);
                v25 = common::milog::MiLogStream::operator<<<char [20],(char *[20])0>(
                        v24,
                        (const char (*)[20])" group_vision_type:");
                v26 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                        v25,
                        (const unsigned int *)(v4 + 48));
                common::milog::MiLogStream::operator<<<char [23],(char *[23])0>(
                  v26,
                  (const char (*)[23])" not match with player");
                common::milog::MiLogStream::~MiLogStream(&v75);
                std::shared_ptr<Config>::~shared_ptr((std::shared_ptr<Config> *const)(v4 + 96));
              }
              else
              {
                v27 = std::__shared_ptr_access<PlayerViewMgr,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<PlayerViewMgr,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 64));
                PlayerViewMgr::addEntityInView(v27, entity_ptr);
              }
            }
          }
          __gnu_cxx::__normal_iterator<std::shared_ptr<Entity> const*,std::vector<std::shared_ptr<Entity>>>::operator++(&__for_begin);
        }
      }
      else
      {
        std::vector<std::shared_ptr<Entity>>::vector((std::vector<std::shared_ptr<Entity>> *const)(v4 + 128));
        std::vector<std::shared_ptr<Entity>>::vector((std::vector<std::shared_ptr<Entity>> *const)(v4 + 192));
        v28 = std::vector<std::shared_ptr<Entity>>::size(entity_vec);
        std::vector<std::shared_ptr<Entity>>::reserve((std::vector<std::shared_ptr<Entity>> *const)(v4 + 128), v28);
        v29 = std::vector<std::shared_ptr<Entity>>::size(entity_vec);
        std::vector<std::shared_ptr<Entity>>::reserve((std::vector<std::shared_ptr<Entity>> *const)(v4 + 192), v29);
        __for_range_0 = entity_vec;
        __for_begin._M_current = std::vector<std::shared_ptr<Entity>>::begin(entity_vec)._M_current;
        __for_end._M_current = std::vector<std::shared_ptr<Entity>>::end(entity_vec)._M_current;
        while ( __gnu_cxx::operator!=<std::shared_ptr<Entity> const*,std::vector<std::shared_ptr<Entity>>>(
                  &__for_begin,
                  &__for_end) )
        {
          entity_ptr_0 = __gnu_cxx::__normal_iterator<std::shared_ptr<Entity> const*,std::vector<std::shared_ptr<Entity>>>::operator*(&__for_begin);
          v30 = std::__shared_ptr_access<Entity,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Entity,(__gnu_cxx::_Lock_policy)2,false,false> *const)entity_ptr_0);
          if ( Entity::getIsClientVisible(v30) )
          {
            v31 = std::__shared_ptr_access<Entity,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Entity,(__gnu_cxx::_Lock_policy)2,false,false> *const)entity_ptr_0);
            only_vision_uid_0 = Entity::getOnlyVisionUid(v31);
            if ( !only_vision_uid_0 || (v32 = Player::getUid(player), only_vision_uid_0 == v32) )
            {
              if ( !is_group_vision_type_closed
                && ((v34 = std::__shared_ptr_access<Entity,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Entity,(__gnu_cxx::_Lock_policy)2,false,false> *const)entity_ptr_0),
                     (*(_DWORD *)(v4 + 48) = Entity::getGroupVisionType(v34)) == 0)
                 || (v35 = std::__shared_ptr_access<PlayerViewMgr,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<PlayerViewMgr,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 64)),
                     PlayerViewMgr::isContainGroupVisionType(v35, *(_DWORD *)(v4 + 48)))
                  ? (v36 = 0)
                  : (v36 = 1),
                    v36) )
              {
                ServiceBox::findService<GameserverService>();
                GameserverService::getConfig((GameserverService *const)(v4 + 96));
                if ( !std::operator!=<Config>(0LL, (const std::shared_ptr<Config> *)(v4 + 96)) )
                  goto LABEL_53;
                v37 = std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 96));
                if ( *(_BYTE *)(((unsigned __int64)&v37->is_delete_in_sight_when_appear >> 3) + 0x7FFF8000) != 0
                  && (((unsigned __int8)v37 - 85) & 7) >= *(_BYTE *)(((unsigned __int64)&v37->is_delete_in_sight_when_appear >> 3)
                                                                   + 0x7FFF8000) )
                {
                  __asan_report_load1(&v37->is_delete_in_sight_when_appear);
                }
                if ( v37->is_delete_in_sight_when_appear )
                  v38 = 1;
                else
LABEL_53:
                  v38 = 0;
                if ( v38 )
                {
                  v39 = std::__shared_ptr_access<PlayerViewMgr,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<PlayerViewMgr,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 64));
                  PlayerViewMgr::delEntityInSightRange(v39, entity_ptr_0);
                }
                common::milog::MiLogStream::create(
                  &v75,
                  &common::milog::MiLogDefault::default_log_obj_,
                  0x19u,
                  "./src/scene/scene.cpp",
                  "notifyEntityAppear",
                  3192);
                v40 = common::milog::MiLogStream::operator<<<char [8],(char *[8])0>(&v75, (const char (*)[8])"entity:");
                v41 = std::__shared_ptr_access<Entity,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Entity,(__gnu_cxx::_Lock_policy)2,false,false> *const)entity_ptr_0);
                val = Entity::getEntityId(v41);
                v42 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v40, &val);
                v43 = common::milog::MiLogStream::operator<<<char [20],(char *[20])0>(
                        v42,
                        (const char (*)[20])" group_vision_type:");
                v44 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                        v43,
                        (const unsigned int *)(v4 + 48));
                common::milog::MiLogStream::operator<<<char [23],(char *[23])0>(
                  v44,
                  (const char (*)[23])" not match with player");
                common::milog::MiLogStream::~MiLogStream(&v75);
                std::shared_ptr<Config>::~shared_ptr((std::shared_ptr<Config> *const)(v4 + 96));
              }
              else
              {
                v45 = std::__shared_ptr_access<PlayerViewMgr,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<PlayerViewMgr,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 64));
                ret = PlayerViewMgr::addEntityInView(v45, entity_ptr_0);
                if ( player_view_sync_guard_state || ret )
                {
                  v50 = (unsigned __int64)std::__shared_ptr_access<Entity,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Entity,(__gnu_cxx::_Lock_policy)2,false,false> *const)entity_ptr_0);
                  if ( *(_BYTE *)((v50 >> 3) + 0x7FFF8000) )
                    v50 = __asan_report_load8();
                  v51 = *(_QWORD *)v50 + 168LL;
                  if ( *(_BYTE *)((v51 >> 3) + 0x7FFF8000) )
                    v50 = __asan_report_load8();
                  (*(void (__fastcall **)(unsigned __int64, Player *))v51)(v50, player);
                  std::vector<std::shared_ptr<Entity>>::push_back(
                    (std::vector<std::shared_ptr<Entity>> *const)(v4 + 192),
                    entity_ptr_0);
                  v52 = std::__shared_ptr_access<Entity,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Entity,(__gnu_cxx::_Lock_policy)2,false,false> *const)entity_ptr_0);
                  if ( !Entity::getIsClientCreated(v52) )
                    goto LABEL_69;
                  if ( *(_BYTE *)(((unsigned __int64)&context->exclude_uid >> 3) + 0x7FFF8000) != 0
                    && (char)((((_BYTE)context + 8) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&context->exclude_uid >> 3)
                                                                          + 0x7FFF8000) )
                  {
                    __asan_report_load4(&context->exclude_uid);
                  }
                  exclude_uid = context->exclude_uid;
                  if ( exclude_uid == Player::getUid(player) )
                    v54 = 1;
                  else
LABEL_69:
                    v54 = 0;
                  if ( !v54 )
                  {
                    v55 = std::move<std::shared_ptr<Entity> const&>(entity_ptr_0);
                    std::vector<std::shared_ptr<Entity>>::push_back(
                      (std::vector<std::shared_ptr<Entity>> *const)(v4 + 128),
                      v55);
                  }
                }
                else
                {
                  common::milog::MiLogStream::create(
                    &v75,
                    &common::milog::MiLogDefault::default_log_obj_,
                    1u,
                    "./src/scene/scene.cpp",
                    "notifyEntityAppear",
                    3201);
                  v46 = common::milog::MiLogStream::operator<<<char [8],(char *[8])0>(
                          &v75,
                          (const char (*)[8])"entity:");
                  v47 = std::__shared_ptr_access<Entity,(__gnu_cxx::_Lock_policy)2,false,false>::operator*((const std::__shared_ptr_access<Entity,(__gnu_cxx::_Lock_policy)2,false,false> *const)entity_ptr_0);
                  v48 = common::milog::MiLogStream::operator<<<Entity,(Entity*)0>(v46, v47);
                  v49 = common::milog::MiLogStream::operator<<<char [6],(char *[6])0>(v48, (const char (*)[6])" uid:");
                  val = Player::getUid(player);
                  common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v49, &val);
                  common::milog::MiLogStream::~MiLogStream(&v75);
                }
              }
            }
          }
          __gnu_cxx::__normal_iterator<std::shared_ptr<Entity> const*,std::vector<std::shared_ptr<Entity>>>::operator++(&__for_begin);
        }
        Scene::sendNotifyEntityAppear(this, player, (const std::vector<std::shared_ptr<Entity>> *)(v4 + 128), context);
        __for_range_1 = (std::vector<std::shared_ptr<Entity>> *)(v4 + 192);
        __for_begin._M_current = std::vector<std::shared_ptr<Entity>>::begin((std::vector<std::shared_ptr<Entity>> *const)(v4 + 192))._M_current;
        __for_end._M_current = std::vector<std::shared_ptr<Entity>>::end(__for_range_1)._M_current;
        while ( __gnu_cxx::operator!=<std::shared_ptr<Entity> *,std::vector<std::shared_ptr<Entity>>>(
                  (const __gnu_cxx::__normal_iterator<std::shared_ptr<Entity>*,std::vector<std::shared_ptr<Entity>> > *)&__for_begin,
                  (const __gnu_cxx::__normal_iterator<std::shared_ptr<Entity>*,std::vector<std::shared_ptr<Entity>> > *)&__for_end) )
        {
          v56 = __gnu_cxx::__normal_iterator<std::shared_ptr<Entity> *,std::vector<std::shared_ptr<Entity>>>::operator*((const __gnu_cxx::__normal_iterator<std::shared_ptr<Entity>*,std::vector<std::shared_ptr<Entity>> > *const)&__for_begin);
          std::shared_ptr<Entity>::shared_ptr((std::shared_ptr<Entity> *const)(v4 + 96), v56);
          if ( std::operator!=<Entity>(0LL, (const std::shared_ptr<Entity> *)(v4 + 96)) )
          {
            v57 = (unsigned __int64)std::__shared_ptr_access<Entity,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Entity,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 96));
            if ( *(_BYTE *)((v57 >> 3) + 0x7FFF8000) )
              v57 = __asan_report_load8();
            v58 = *(_QWORD *)v57 + 176LL;
            if ( *(_BYTE *)((v58 >> 3) + 0x7FFF8000) )
              v57 = __asan_report_load8();
            (*(void (__fastcall **)(unsigned __int64, Player *))v58)(v57, player);
          }
          std::shared_ptr<Entity>::~shared_ptr((std::shared_ptr<Entity> *const)(v4 + 96));
          __gnu_cxx::__normal_iterator<std::shared_ptr<Entity> *,std::vector<std::shared_ptr<Entity>>>::operator++((__gnu_cxx::__normal_iterator<std::shared_ptr<Entity>*,std::vector<std::shared_ptr<Entity>> > *const)&__for_begin);
        }
        std::vector<std::shared_ptr<Entity>>::~vector((std::vector<std::shared_ptr<Entity>> *const)(v4 + 192));
        std::vector<std::shared_ptr<Entity>>::~vector((std::vector<std::shared_ptr<Entity>> *const)(v4 + 128));
      }
      v7 = 0;
    }
    std::shared_ptr<PlayerViewMgr>::~shared_ptr((std::shared_ptr<PlayerViewMgr> *const)(v4 + 64));
  }
  result = v7;
  if ( v76 == (char *)v4 )
  {
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8008) = 0LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8010) = 0LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8018) = 0LL;
  }
  else
  {
    *(_QWORD *)v4 = 1172321806LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 3230: range 000000001598DFB2-000000001598ECCB
int32_t __cdecl Scene::sendNotifyEntityAppear(
        Scene *const this,
        Player *player,
        const std::vector<std::shared_ptr<Entity>> *entity_vec,
        const VisionContext *context)
{
  unsigned __int64 v4; // r13
  __int64 v5; // rax
  _DWORD *v6; // r12
  std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v7; // rdx
  bool *p_is_print_entity_debug_log; // rax
  std::__shared_ptr_access<Entity,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v9; // rax
  unsigned int EntityId; // eax
  common::tools::StringStream<common::tools::FixedBuffer<4096> > *v11; // rax
  common::milog::MiLogStream *v12; // r14
  common::milog::MiLogStream *v13; // rax
  common::milog::MiLogStream *v14; // r14
  std::__shared_ptr_access<proto::SceneEntityAppearNotify,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v15; // rax
  unsigned __int64 v16; // rax
  unsigned __int64 v17; // rdx
  common::milog::MiLogStream *v18; // r14
  std::__shared_ptr_access<Entity,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v19; // rax
  unsigned __int64 v20; // rax
  unsigned __int64 v21; // rdx
  int v22; // eax
  std::__shared_ptr_access<Entity,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v23; // rax
  uint32_t PlayerUid; // r14d
  common::milog::MiLogStream *v25; // r14
  common::milog::MiLogStream *v26; // rax
  common::milog::MiLogStream *v27; // r14
  std::__shared_ptr_access<Entity,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v28; // rax
  unsigned __int64 v29; // rax
  unsigned __int64 v30; // rdx
  Player *v31; // rax
  PlayerAvatarComp *AvatarComp; // r14
  std::remove_reference<const std::shared_ptr<Entity>&>::type *v33; // rax
  std::__shared_ptr_access<proto::SceneEntityAppearNotify,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v34; // rcx
  std::__shared_ptr_access<proto::SceneEntityAppearNotify,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v35; // rcx
  std::__shared_ptr_access<proto::ScenePlayerBackgroundAvatarRefreshNotify,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v36; // rax
  std::__shared_ptr_access<proto::ScenePlayerBackgroundAvatarRefreshNotify,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v37; // rcx
  std::__shared_ptr_access<proto::ScenePlayerBackgroundAvatarRefreshNotify,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v38; // rcx
  Entity *v39; // rax
  int32_t result; // eax
  Scene::sendNotifyEntityAppear::<lambda(Avatar&)> v41; // [rsp-20h] [rbp-200h]
  unsigned int v44; // [rsp+20h] [rbp-1C0h] BYREF
  unsigned int Uid; // [rsp+24h] [rbp-1BCh] BYREF
  std::vector<std::shared_ptr<Entity>>::const_iterator __for_begin; // [rsp+28h] [rbp-1B8h] BYREF
  std::vector<std::shared_ptr<Entity>>::const_iterator __for_end; // [rsp+30h] [rbp-1B0h] BYREF
  const std::vector<std::shared_ptr<Entity>> *__for_range; // [rsp+38h] [rbp-1A8h]
  const std::shared_ptr<Entity> *entity_ptr; // [rsp+40h] [rbp-1A0h]
  const std::vector<std::shared_ptr<Entity>> *__for_range_0; // [rsp+48h] [rbp-198h]
  std::vector<std::shared_ptr<Entity>> *__for_range_1; // [rsp+50h] [rbp-190h]
  std::shared_ptr<Entity> *entity_ptr_1; // [rsp+58h] [rbp-188h]
  const std::shared_ptr<Entity> *entity_ptr_0; // [rsp+60h] [rbp-180h]
  proto::SceneEntityInfo *entity_info; // [rsp+68h] [rbp-178h]
  Scene::sendNotifyEntityAppear::<lambda(Avatar&)> __f; // [rsp+70h] [rbp-170h]
  common::milog::MiLogStream v56; // [rsp+90h] [rbp-150h] BYREF
  std::string val; // [rsp+B0h] [rbp-130h] BYREF
  char v58[272]; // [rsp+D0h] [rbp-110h] BYREF

  v4 = (unsigned __int64)v58;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v5 = __asan_stack_malloc_2(224LL);
    if ( v5 )
      v4 = v5;
  }
  *(_QWORD *)v4 = 1102416563LL;
  *(_QWORD *)(v4 + 8) = "5 32 16 15 config_ptr:3240 64 16 22 appear_notify_ptr:3252 96 16 34 refresh_background_notify_pt"
                        "r:3253 128 16 8 oss:3243 160 24 23 movable_entity_vec:3251";
  *(_QWORD *)(v4 + 16) = Scene::sendNotifyEntityAppear;
  v6 = (_DWORD *)(v4 >> 3);
  v6[536862720] = -235802127;
  v6[536862721] = -219021312;
  v6[536862722] = -219021312;
  v6[536862723] = -219021312;
  v6[536862724] = -219021312;
  v6[536862725] = -218103808;
  v6[536862726] = -202116109;
  if ( *(_BYTE *)(((unsigned __int64)context >> 3) + 0x7FFF8000) != 0
    && (char)(((unsigned __int8)context & 7) + 3) >= *(_BYTE *)(((unsigned __int64)context >> 3) + 0x7FFF8000) )
  {
    __asan_report_load4(context);
  }
  if ( context->type != VISION_REPLACE_NO_NOTIFY && !std::vector<std::shared_ptr<Entity>>::empty(entity_vec) )
  {
    ServiceBox::findService<GameserverService>();
    GameserverService::getConfig((GameserverService *const)(v4 + 32));
    v7 = std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 32));
    p_is_print_entity_debug_log = &v7->is_print_entity_debug_log;
    if ( *(_BYTE *)(((unsigned __int64)p_is_print_entity_debug_log >> 3) + 0x7FFF8000) != 0
      && ((unsigned __int8)p_is_print_entity_debug_log & 7) >= *(_BYTE *)(((unsigned __int64)p_is_print_entity_debug_log >> 3)
                                                                        + 0x7FFF8000) )
    {
      __asan_report_load1(p_is_print_entity_debug_log);
    }
    if ( v7->is_print_entity_debug_log )
    {
      common::tools::StringStream<common::tools::FixedBuffer<4096>>::StringStream((common::tools::StringStream<common::tools::FixedBuffer<4096> > *const)(v4 + 128));
      __for_range = entity_vec;
      __for_begin._M_current = std::vector<std::shared_ptr<Entity>>::begin(entity_vec)._M_current;
      __for_end._M_current = std::vector<std::shared_ptr<Entity>>::end(entity_vec)._M_current;
      while ( __gnu_cxx::operator!=<std::shared_ptr<Entity> const*,std::vector<std::shared_ptr<Entity>>>(
                &__for_begin,
                &__for_end) )
      {
        entity_ptr = __gnu_cxx::__normal_iterator<std::shared_ptr<Entity> const*,std::vector<std::shared_ptr<Entity>>>::operator*(&__for_begin);
        v9 = std::__shared_ptr_access<Entity,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Entity,(__gnu_cxx::_Lock_policy)2,false,false> *const)entity_ptr);
        EntityId = Entity::getEntityId(v9);
        v11 = common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(
                (common::tools::StringStream<common::tools::FixedBuffer<4096> > *const)(v4 + 128),
                EntityId);
        common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(v11, ",");
        __gnu_cxx::__normal_iterator<std::shared_ptr<Entity> const*,std::vector<std::shared_ptr<Entity>>>::operator++(&__for_begin);
      }
      common::milog::MiLogStream::create(
        &v56,
        &common::milog::MiLogDefault::default_log_obj_,
        1u,
        "./src/scene/scene.cpp",
        "sendNotifyEntityAppear",
        3248);
      v12 = common::milog::MiLogStream::operator<<<char [34],(char *[34])0>(
              &v56,
              (const char (*)[34])"send notify appear, entity_list:{");
      common::tools::StringStream<common::tools::FixedBuffer<4096>>::str[abi:cxx11](
        &val,
        (common::tools::StringStream<common::tools::FixedBuffer<4096> > *const)(v4 + 128));
      v13 = common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v12, &val);
      v14 = common::milog::MiLogStream::operator<<<char [10],(char *[10])0>(v13, (const char (*)[10])"} to uid:");
      Uid = Player::getUid(player);
      common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v14, &Uid);
      std::string::~string(&val);
      common::milog::MiLogStream::~MiLogStream(&v56);
      common::tools::StringStream<common::tools::FixedBuffer<4096>>::~StringStream((common::tools::StringStream<common::tools::FixedBuffer<4096> > *const)(v4 + 128));
    }
    std::vector<std::shared_ptr<Entity>>::vector((std::vector<std::shared_ptr<Entity>> *const)(v4 + 160));
    common::tools::perf::make_shared<proto::SceneEntityAppearNotify>();
    common::tools::perf::make_shared<proto::ScenePlayerBackgroundAvatarRefreshNotify>();
    __for_range_0 = entity_vec;
    __for_begin._M_current = std::vector<std::shared_ptr<Entity>>::begin(entity_vec)._M_current;
    __for_end._M_current = std::vector<std::shared_ptr<Entity>>::end(__for_range_0)._M_current;
    while ( 1 )
    {
      if ( !__gnu_cxx::operator!=<std::shared_ptr<Entity> const*,std::vector<std::shared_ptr<Entity>>>(
              &__for_begin,
              &__for_end) )
      {
        v34 = std::__shared_ptr_access<proto::SceneEntityAppearNotify,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<proto::SceneEntityAppearNotify,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 64));
        if ( *(_BYTE *)(((unsigned __int64)context >> 3) + 0x7FFF8000) != 0
          && (char)(((unsigned __int8)context & 7) + 3) >= *(_BYTE *)(((unsigned __int64)context >> 3) + 0x7FFF8000) )
        {
          __asan_report_load4(context);
        }
        proto::SceneEntityAppearNotify::set_appear_type(v34, context->type);
        v35 = std::__shared_ptr_access<proto::SceneEntityAppearNotify,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<proto::SceneEntityAppearNotify,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 64));
        if ( *(_BYTE *)(((unsigned __int64)&context->param >> 3) + 0x7FFF8000) != 0
          && (char)((((_BYTE)context + 4) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&context->param >> 3) + 0x7FFF8000) )
        {
          __asan_report_load4(&context->param);
        }
        proto::SceneEntityAppearNotify::set_param(v35, context->param);
        std::dynamic_pointer_cast<google::protobuf::Message const,proto::SceneEntityAppearNotify>((const std::shared_ptr<proto::SceneEntityAppearNotify> *)(v4 + 128));
        Player::sendMessage(player, (common::minet::ConstMessagePtr *)(v4 + 128), 0LL);
        std::shared_ptr<google::protobuf::Message const>::~shared_ptr((std::shared_ptr<const google::protobuf::Message> *const)(v4 + 128));
        v36 = std::__shared_ptr_access<proto::ScenePlayerBackgroundAvatarRefreshNotify,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<proto::ScenePlayerBackgroundAvatarRefreshNotify,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 96));
        if ( proto::ScenePlayerBackgroundAvatarRefreshNotify::entity_list_size(v36) > 0 )
        {
          v37 = std::__shared_ptr_access<proto::ScenePlayerBackgroundAvatarRefreshNotify,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<proto::ScenePlayerBackgroundAvatarRefreshNotify,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 96));
          if ( *(_BYTE *)(((unsigned __int64)context >> 3) + 0x7FFF8000) != 0
            && (char)(((unsigned __int8)context & 7) + 3) >= *(_BYTE *)(((unsigned __int64)context >> 3) + 0x7FFF8000) )
          {
            __asan_report_load4(context);
          }
          proto::ScenePlayerBackgroundAvatarRefreshNotify::set_appear_type(v37, context->type);
          v38 = std::__shared_ptr_access<proto::ScenePlayerBackgroundAvatarRefreshNotify,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<proto::ScenePlayerBackgroundAvatarRefreshNotify,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 96));
          if ( *(_BYTE *)(((unsigned __int64)&context->param >> 3) + 0x7FFF8000) != 0
            && (char)((((_BYTE)context + 4) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&context->param >> 3) + 0x7FFF8000) )
          {
            __asan_report_load4(&context->param);
          }
          proto::ScenePlayerBackgroundAvatarRefreshNotify::set_param(v38, context->param);
          std::dynamic_pointer_cast<google::protobuf::Message const,proto::ScenePlayerBackgroundAvatarRefreshNotify>((const std::shared_ptr<proto::ScenePlayerBackgroundAvatarRefreshNotify> *)(v4 + 128));
          Player::sendMessage(player, (common::minet::ConstMessagePtr *)(v4 + 128), 0LL);
          std::shared_ptr<google::protobuf::Message const>::~shared_ptr((std::shared_ptr<const google::protobuf::Message> *const)(v4 + 128));
        }
        __for_range_1 = (std::vector<std::shared_ptr<Entity>> *)(v4 + 160);
        __for_begin._M_current = std::vector<std::shared_ptr<Entity>>::begin((std::vector<std::shared_ptr<Entity>> *const)(v4 + 160))._M_current;
        __for_end._M_current = std::vector<std::shared_ptr<Entity>>::end(__for_range_1)._M_current;
        while ( __gnu_cxx::operator!=<std::shared_ptr<Entity> *,std::vector<std::shared_ptr<Entity>>>(
                  (const __gnu_cxx::__normal_iterator<std::shared_ptr<Entity>*,std::vector<std::shared_ptr<Entity>> > *)&__for_begin,
                  (const __gnu_cxx::__normal_iterator<std::shared_ptr<Entity>*,std::vector<std::shared_ptr<Entity>> > *)&__for_end) )
        {
          entity_ptr_1 = __gnu_cxx::__normal_iterator<std::shared_ptr<Entity> *,std::vector<std::shared_ptr<Entity>>>::operator*((const __gnu_cxx::__normal_iterator<std::shared_ptr<Entity>*,std::vector<std::shared_ptr<Entity>> > *const)&__for_begin);
          v39 = std::__shared_ptr_access<Entity,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Entity,(__gnu_cxx::_Lock_policy)2,false,false> *const)entity_ptr_1);
          Entity::notifyLastMotionInfo(v39, player);
          __gnu_cxx::__normal_iterator<std::shared_ptr<Entity> *,std::vector<std::shared_ptr<Entity>>>::operator++((__gnu_cxx::__normal_iterator<std::shared_ptr<Entity>*,std::vector<std::shared_ptr<Entity>> > *const)&__for_begin);
        }
        std::shared_ptr<proto::ScenePlayerBackgroundAvatarRefreshNotify>::~shared_ptr((std::shared_ptr<proto::ScenePlayerBackgroundAvatarRefreshNotify> *const)(v4 + 96));
        std::shared_ptr<proto::SceneEntityAppearNotify>::~shared_ptr((std::shared_ptr<proto::SceneEntityAppearNotify> *const)(v4 + 64));
        std::vector<std::shared_ptr<Entity>>::~vector((std::vector<std::shared_ptr<Entity>> *const)(v4 + 160));
        std::shared_ptr<Config>::~shared_ptr((std::shared_ptr<Config> *const)(v4 + 32));
        goto LABEL_59;
      }
      entity_ptr_0 = __gnu_cxx::__normal_iterator<std::shared_ptr<Entity> const*,std::vector<std::shared_ptr<Entity>>>::operator*(&__for_begin);
      v15 = std::__shared_ptr_access<proto::SceneEntityAppearNotify,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<proto::SceneEntityAppearNotify,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 64));
      entity_info = proto::SceneEntityAppearNotify::add_entity_list(v15);
      v16 = (unsigned __int64)std::__shared_ptr_access<Entity,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Entity,(__gnu_cxx::_Lock_policy)2,false,false> *const)entity_ptr_0);
      if ( *(_BYTE *)((v16 >> 3) + 0x7FFF8000) )
        v16 = __asan_report_load8();
      v17 = *(_QWORD *)v16 + 40LL;
      if ( *(_BYTE *)((v17 >> 3) + 0x7FFF8000) )
        v16 = __asan_report_load8();
      if ( (*(unsigned int (__fastcall **)(unsigned __int64, proto::SceneEntityInfo *, Player *))v17)(
             v16,
             entity_info,
             player) )
      {
        common::milog::MiLogStream::create(
          (common::milog::MiLogStream *)&val,
          &common::milog::MiLogDefault::default_log_obj_,
          3u,
          "./src/scene/scene.cpp",
          "sendNotifyEntityAppear",
          3259);
        v18 = common::milog::MiLogStream::operator<<<char [15],(char *[15])0>(
                (common::milog::MiLogStream *const)&val,
                (const char (*)[15])"toClient fails");
        v19 = std::__shared_ptr_access<Entity,(__gnu_cxx::_Lock_policy)2,false,false>::operator*((const std::__shared_ptr_access<Entity,(__gnu_cxx::_Lock_policy)2,false,false> *const)entity_ptr_0);
        common::milog::MiLogStream::operator<<<Entity,(Entity*)0>(v18, v19);
        common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)&val);
      }
      v20 = (unsigned __int64)std::__shared_ptr_access<Entity,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Entity,(__gnu_cxx::_Lock_policy)2,false,false> *const)entity_ptr_0);
      if ( *(_BYTE *)((v20 >> 3) + 0x7FFF8000) )
        v20 = __asan_report_load8();
      v21 = *(_QWORD *)v20 + 24LL;
      if ( *(_BYTE *)((v21 >> 3) + 0x7FFF8000) )
        v20 = __asan_report_load8();
      v22 = (*(__int64 (__fastcall **)(unsigned __int64))v21)(v20);
      if ( v22 == 1 )
        break;
      if ( v22 == 2 )
        goto LABEL_43;
LABEL_44:
      __gnu_cxx::__normal_iterator<std::shared_ptr<Entity> const*,std::vector<std::shared_ptr<Entity>>>::operator++(&__for_begin);
    }
    v23 = std::__shared_ptr_access<Entity,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Entity,(__gnu_cxx::_Lock_policy)2,false,false> *const)entity_ptr_0);
    PlayerUid = Entity::getPlayerUid(v23);
    if ( PlayerUid == Player::getUid(player) )
    {
      common::milog::MiLogStream::create(
        (common::milog::MiLogStream *)&val,
        &common::milog::MiLogDefault::default_log_obj_,
        1u,
        "./src/scene/scene.cpp",
        "sendNotifyEntityAppear",
        3268);
      v25 = common::milog::MiLogStream::operator<<<char [39],(char *[39])0>(
              (common::milog::MiLogStream *const)&val,
              (const char (*)[39])"[VIEW] notify self avatar appear. uid:");
      v44 = Player::getUid(player);
      v26 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v25, &v44);
      v27 = common::milog::MiLogStream::operator<<<char [12],(char *[12])0>(v26, (const char (*)[12])" entity_id:");
      v28 = std::__shared_ptr_access<Entity,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Entity,(__gnu_cxx::_Lock_policy)2,false,false> *const)entity_ptr_0);
      Uid = Entity::getEntityId(v28);
      common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v27, &Uid);
      common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)&val);
    }
    else
    {
      if ( *(_BYTE *)(((unsigned __int64)context >> 3) + 0x7FFF8000) != 0
        && (char)(((unsigned __int8)context & 7) + 3) >= *(_BYTE *)(((unsigned __int64)context >> 3) + 0x7FFF8000) )
      {
        __asan_report_load4(context);
      }
      if ( context->type == VISION_MEET )
      {
        v29 = (unsigned __int64)std::__shared_ptr_access<Entity,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Entity,(__gnu_cxx::_Lock_policy)2,false,false> *const)entity_ptr_0);
        if ( *(_BYTE *)((v29 >> 3) + 0x7FFF8000) )
          v29 = __asan_report_load8();
        v30 = *(_QWORD *)v29 + 152LL;
        if ( *(_BYTE *)((v30 >> 3) + 0x7FFF8000) )
          v29 = __asan_report_load8();
        (*(void (__fastcall **)(unsigned __int64, unsigned __int64))v30)(v4 + 128, v29);
        if ( std::operator==<Player>(0LL, (const std::shared_ptr<Player> *)(v4 + 128)) )
        {
          common::milog::MiLogStream::create(
            (common::milog::MiLogStream *)&val,
            &common::milog::MiLogDefault::default_log_obj_,
            3u,
            "./src/scene/scene.cpp",
            "sendNotifyEntityAppear",
            3276);
          common::milog::MiLogStream::operator<<<char [22],(char *[22])0>(
            (common::milog::MiLogStream *const)&val,
            (const char (*)[22])"avatar player is null");
          common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)&val);
        }
        else
        {
          v31 = std::__shared_ptr_access<Player,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Player,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 128));
          AvatarComp = Player::getAvatarComp(v31);
          __f.__refresh_background_notify_ptr = (std::shared_ptr<proto::ScenePlayerBackgroundAvatarRefreshNotify> *)(v4 + 96);
          __f.__player = player;
          __f.__entity_ptr = entity_ptr_0;
          v41.__entity_ptr = entity_ptr_0;
          v41.__player = player;
          v41.__refresh_background_notify_ptr = (std::shared_ptr<proto::ScenePlayerBackgroundAvatarRefreshNotify> *)(v4 + 96);
          std::function<ForeachPolicy ()(Avatar &)>::function<Scene::sendNotifyEntityAppear(Player &,std::vector<std::shared_ptr<Entity>> const&,VisionContext const&)::{lambda(Avatar &)#1},void,void>(
            (std::function<ForeachPolicy(Avatar&)> *const)&val,
            v41);
          PlayerAvatarComp::foreachMyAvatarInSceneTeam(AvatarComp, (std::function<ForeachPolicy(Avatar&)> *)&val);
          std::function<ForeachPolicy ()(Avatar &)>::~function((std::function<ForeachPolicy(Avatar&)> *const)&val);
        }
        std::shared_ptr<Player>::~shared_ptr((std::shared_ptr<Player> *const)(v4 + 128));
      }
    }
LABEL_43:
    v33 = std::move<std::shared_ptr<Entity> const&>(entity_ptr_0);
    std::vector<std::shared_ptr<Entity>>::push_back((std::vector<std::shared_ptr<Entity>> *const)(v4 + 160), v33);
    goto LABEL_44;
  }
LABEL_59:
  result = 0;
  if ( v58 == (char *)v4 )
  {
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8008) = 0LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8010) = 0LL;
    *(_DWORD *)((v4 >> 3) + 0x7FFF8018) = 0;
  }
  else
  {
    *(_QWORD *)v4 = 1172321806LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v4 >> 3) + 0x7FFF8018) = -168430091;
  }
  return result;
};

// Line 3280: range 000000001598DDF0-000000001598DFB1
ForeachPolicy __cdecl Scene::sendNotifyEntityAppear(Player &,std::vector<std::shared_ptr<Entity>> const&,VisionContext const&)::{lambda(Avatar &)#1}::operator()(
        const Scene::sendNotifyEntityAppear::<lambda(Avatar&)> *const __closure,
        Avatar *avatar)
{
  uint32_t EntityId; // ebx
  std::__shared_ptr_access<Entity,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v3; // rax
  std::__shared_ptr_access<proto::ScenePlayerBackgroundAvatarRefreshNotify,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v4; // rax
  unsigned __int64 v5; // rax
  unsigned int (__fastcall *v6)(Avatar *, proto::SceneEntityInfo *, Player *); // r8
  common::milog::MiLogStream *v7; // rdx
  proto::SceneEntityInfo *avatar_info; // [rsp+18h] [rbp-38h]
  common::milog::MiLogStream v10; // [rsp+20h] [rbp-30h] BYREF

  EntityId = Entity::getEntityId((const Entity *const)avatar);
  if ( *(_BYTE *)(((unsigned __int64)&__closure->__entity_ptr >> 3) + 0x7FFF8000) )
    __asan_report_load8();
  v3 = std::__shared_ptr_access<Entity,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Entity,(__gnu_cxx::_Lock_policy)2,false,false> *const)__closure->__entity_ptr);
  if ( EntityId != Entity::getEntityId(v3) )
  {
    if ( *(_BYTE *)(((unsigned __int64)__closure >> 3) + 0x7FFF8000) )
      __asan_report_load8();
    v4 = std::__shared_ptr_access<proto::ScenePlayerBackgroundAvatarRefreshNotify,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<proto::ScenePlayerBackgroundAvatarRefreshNotify,(__gnu_cxx::_Lock_policy)2,false,false> *const)__closure->__refresh_background_notify_ptr);
    avatar_info = proto::ScenePlayerBackgroundAvatarRefreshNotify::add_entity_list(v4);
    if ( *(_BYTE *)(((unsigned __int64)avatar >> 3) + 0x7FFF8000) )
      __asan_report_load8();
    v5 = *(_QWORD *)avatar->baseclass_0 + 40LL;
    if ( *(_BYTE *)((v5 >> 3) + 0x7FFF8000) )
      v5 = __asan_report_load8();
    v6 = *(unsigned int (__fastcall **)(Avatar *, proto::SceneEntityInfo *, Player *))v5;
    if ( *(_BYTE *)(((unsigned __int64)&__closure->__player >> 3) + 0x7FFF8000) )
      __asan_report_load8();
    if ( v6(avatar, avatar_info, __closure->__player) )
    {
      common::milog::MiLogStream::create(
        &v10,
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/scene/scene.cpp",
        "operator()",
        3287);
      v7 = common::milog::MiLogStream::operator<<<char [15],(char *[15])0>(&v10, (const char (*)[15])"toClient fails");
      common::milog::MiLogStream::operator<<<Avatar,(Avatar*)0>(v7, avatar);
      common::milog::MiLogStream::~MiLogStream(&v10);
    }
  }
  return 0;
};

// Line 3326: range 000000001598ECCC-000000001598F3C7
int32_t __cdecl Scene::notifyEntityDisappear(
        Scene *const this,
        Player *player,
        const std::vector<std::shared_ptr<Entity>> *entity_vec,
        const VisionContext *context)
{
  unsigned __int64 v4; // r13
  __int64 v5; // rax
  _DWORD *v6; // r12
  int32_t v7; // r14d
  int Uid; // eax
  uint32_t v9; // eax
  std::__shared_ptr_access<PlayerViewMgr,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v10; // rax
  PlayerViewMgr *v11; // rax
  std::vector<unsigned int>::size_type v12; // rax
  std::vector<std::shared_ptr<Entity>>::size_type v13; // rax
  PlayerViewMgr *v14; // rax
  std::__shared_ptr_access<Entity,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v15; // rax
  common::milog::MiLogStream *v16; // rax
  common::milog::MiLogStream *v17; // rax
  common::milog::MiLogStream *v18; // rax
  const std::shared_ptr<Entity> *v19; // rax
  unsigned __int64 v20; // rax
  unsigned __int64 v21; // rdx
  int32_t result; // eax
  std::vector<unsigned int>::value_type __x; // [rsp+2Ch] [rbp-194h] BYREF
  std::vector<std::shared_ptr<Entity>>::const_iterator __for_begin; // [rsp+30h] [rbp-190h] BYREF
  std::vector<std::shared_ptr<Entity>>::const_iterator __for_end; // [rsp+38h] [rbp-188h] BYREF
  const std::vector<std::shared_ptr<Entity>> *__for_range_0; // [rsp+40h] [rbp-180h]
  std::vector<std::shared_ptr<Entity>> *__for_range_1; // [rsp+48h] [rbp-178h]
  const std::shared_ptr<Entity> *entity_ptr_0; // [rsp+50h] [rbp-170h]
  unsigned __int64 ret; // [rsp+58h] [rbp-168h]
  const std::vector<std::shared_ptr<Entity>> *__for_range; // [rsp+60h] [rbp-160h]
  const std::shared_ptr<Entity> *entity_ptr; // [rsp+68h] [rbp-158h]
  common::milog::MiLogStream v34; // [rsp+70h] [rbp-150h] BYREF
  char v35[304]; // [rsp+90h] [rbp-130h] BYREF

  v4 = (unsigned __int64)v35;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v5 = __asan_stack_malloc_2(256LL);
    if ( v5 )
      v4 = v5;
  }
  *(_QWORD *)v4 = 1102416563LL;
  *(_QWORD *)(v4 + 8) = "5 48 4 33 player_view_sync_guard_state:3339 64 16 17 view_mgr_ptr:3332 96 16 15 entity_ptr:3368 "
                        "128 24 18 entity_id_vec:3349 192 24 19 entity_ptr_vec:3350";
  *(_QWORD *)(v4 + 16) = Scene::notifyEntityDisappear;
  v6 = (_DWORD *)(v4 >> 3);
  v6[536862720] = -235802127;
  v6[536862721] = -234556943;
  v6[536862722] = -219021312;
  v6[536862723] = -219021312;
  v6[536862724] = -234881024;
  v6[536862725] = -218959118;
  v6[536862726] = -218103808;
  v6[536862727] = -202116109;
  if ( std::vector<std::shared_ptr<Entity>>::empty(entity_vec) )
  {
    v7 = 0;
  }
  else
  {
    Uid = Player::getUid(player);
    Scene::findPlayerViewMgr((const Scene *const)(v4 + 64), (__int64)this, Uid);
    if ( std::operator==<PlayerViewMgr>((const std::shared_ptr<PlayerViewMgr> *)(v4 + 64), 0LL) )
    {
      common::milog::MiLogStream::create(
        &v34,
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/scene/scene.cpp",
        "notifyEntityDisappear",
        3335);
      v9 = Player::getUid(player);
      common::milog::MiLogStream::operator()(&v34, "uid:%u view_mgr is null", v9);
      common::milog::MiLogStream::~MiLogStream(&v34);
      v7 = -1;
    }
    else
    {
      v10 = std::__shared_ptr_access<PlayerViewMgr,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<PlayerViewMgr,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 64));
      *(_DWORD *)(v4 + 48) = PlayerViewMgr::getChangeEyePropGuardState(v10);
      if ( *(_DWORD *)(v4 + 48) == 1 )
      {
        __for_range = entity_vec;
        __for_begin._M_current = std::vector<std::shared_ptr<Entity>>::begin(entity_vec)._M_current;
        __for_end._M_current = std::vector<std::shared_ptr<Entity>>::end(entity_vec)._M_current;
        while ( __gnu_cxx::operator!=<std::shared_ptr<Entity> const*,std::vector<std::shared_ptr<Entity>>>(
                  &__for_begin,
                  &__for_end) )
        {
          entity_ptr = __gnu_cxx::__normal_iterator<std::shared_ptr<Entity> const*,std::vector<std::shared_ptr<Entity>>>::operator*(&__for_begin);
          v11 = std::__shared_ptr_access<PlayerViewMgr,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<PlayerViewMgr,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 64));
          PlayerViewMgr::delEntityInView(v11, entity_ptr);
          __gnu_cxx::__normal_iterator<std::shared_ptr<Entity> const*,std::vector<std::shared_ptr<Entity>>>::operator++(&__for_begin);
        }
      }
      else
      {
        std::vector<unsigned int>::vector((std::vector<unsigned int> *const)(v4 + 128));
        std::vector<std::shared_ptr<Entity>>::vector((std::vector<std::shared_ptr<Entity>> *const)(v4 + 192));
        v12 = std::vector<std::shared_ptr<Entity>>::size(entity_vec);
        std::vector<unsigned int>::reserve((std::vector<unsigned int> *const)(v4 + 128), v12);
        v13 = std::vector<std::shared_ptr<Entity>>::size(entity_vec);
        std::vector<std::shared_ptr<Entity>>::reserve((std::vector<std::shared_ptr<Entity>> *const)(v4 + 192), v13);
        __for_range_0 = entity_vec;
        __for_begin._M_current = std::vector<std::shared_ptr<Entity>>::begin(entity_vec)._M_current;
        __for_end._M_current = std::vector<std::shared_ptr<Entity>>::end(entity_vec)._M_current;
        while ( __gnu_cxx::operator!=<std::shared_ptr<Entity> const*,std::vector<std::shared_ptr<Entity>>>(
                  &__for_begin,
                  &__for_end) )
        {
          entity_ptr_0 = __gnu_cxx::__normal_iterator<std::shared_ptr<Entity> const*,std::vector<std::shared_ptr<Entity>>>::operator*(&__for_begin);
          v14 = std::__shared_ptr_access<PlayerViewMgr,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<PlayerViewMgr,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 64));
          ret = PlayerViewMgr::delEntityInView(v14, entity_ptr_0);
          if ( *(_DWORD *)(v4 + 48) || ret )
          {
            v15 = std::__shared_ptr_access<Entity,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Entity,(__gnu_cxx::_Lock_policy)2,false,false> *const)entity_ptr_0);
            __x = Entity::getEntityId(v15);
            std::vector<unsigned int>::push_back((std::vector<unsigned int> *const)(v4 + 128), &__x);
            std::vector<std::shared_ptr<Entity>>::push_back(
              (std::vector<std::shared_ptr<Entity>> *const)(v4 + 192),
              entity_ptr_0);
          }
          __gnu_cxx::__normal_iterator<std::shared_ptr<Entity> const*,std::vector<std::shared_ptr<Entity>>>::operator++(&__for_begin);
        }
        common::milog::MiLogStream::create(
          &v34,
          &common::milog::MiLogDefault::default_log_obj_,
          1u,
          "./src/scene/scene.cpp",
          "notifyEntityDisappear",
          3365);
        v16 = common::milog::MiLogStream::operator<<<char [33],(char *[33])0>(
                &v34,
                (const char (*)[33])"notify disappear entity_id_list:");
        v17 = common::milog::MiLogStream::operator<<<unsigned int>(v16, (const std::vector<unsigned int> *)(v4 + 128));
        v18 = common::milog::MiLogStream::operator<<<char [19],(char *[19])0>(
                v17,
                (const char (*)[19])" view_guard_state:");
        common::milog::MiLogStream::operator<<<PlayerChangeEyePropGuardState,(PlayerChangeEyePropGuardState*)0>(
          v18,
          (const PlayerChangeEyePropGuardState *)(v4 + 48));
        common::milog::MiLogStream::~MiLogStream(&v34);
        Scene::sendNotifyEntityDisappear(this, player, (const std::vector<unsigned int> *)(v4 + 128), context);
        __for_range_1 = (std::vector<std::shared_ptr<Entity>> *)(v4 + 192);
        __for_begin._M_current = std::vector<std::shared_ptr<Entity>>::begin((std::vector<std::shared_ptr<Entity>> *const)(v4 + 192))._M_current;
        __for_end._M_current = std::vector<std::shared_ptr<Entity>>::end(__for_range_1)._M_current;
        while ( __gnu_cxx::operator!=<std::shared_ptr<Entity> *,std::vector<std::shared_ptr<Entity>>>(
                  (const __gnu_cxx::__normal_iterator<std::shared_ptr<Entity>*,std::vector<std::shared_ptr<Entity>> > *)&__for_begin,
                  (const __gnu_cxx::__normal_iterator<std::shared_ptr<Entity>*,std::vector<std::shared_ptr<Entity>> > *)&__for_end) )
        {
          v19 = __gnu_cxx::__normal_iterator<std::shared_ptr<Entity> *,std::vector<std::shared_ptr<Entity>>>::operator*((const __gnu_cxx::__normal_iterator<std::shared_ptr<Entity>*,std::vector<std::shared_ptr<Entity>> > *const)&__for_begin);
          std::shared_ptr<Entity>::shared_ptr((std::shared_ptr<Entity> *const)(v4 + 96), v19);
          if ( std::operator!=<Entity>(0LL, (const std::shared_ptr<Entity> *)(v4 + 96)) )
          {
            v20 = (unsigned __int64)std::__shared_ptr_access<Entity,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Entity,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 96));
            if ( *(_BYTE *)((v20 >> 3) + 0x7FFF8000) )
              v20 = __asan_report_load8();
            v21 = *(_QWORD *)v20 + 184LL;
            if ( *(_BYTE *)((v21 >> 3) + 0x7FFF8000) )
              v20 = __asan_report_load8();
            (*(void (__fastcall **)(unsigned __int64, Player *))v21)(v20, player);
          }
          std::shared_ptr<Entity>::~shared_ptr((std::shared_ptr<Entity> *const)(v4 + 96));
          __gnu_cxx::__normal_iterator<std::shared_ptr<Entity> *,std::vector<std::shared_ptr<Entity>>>::operator++((__gnu_cxx::__normal_iterator<std::shared_ptr<Entity>*,std::vector<std::shared_ptr<Entity>> > *const)&__for_begin);
        }
        std::vector<std::shared_ptr<Entity>>::~vector((std::vector<std::shared_ptr<Entity>> *const)(v4 + 192));
        std::vector<unsigned int>::~vector((std::vector<unsigned int> *const)(v4 + 128));
      }
      v7 = 0;
    }
    std::shared_ptr<PlayerViewMgr>::~shared_ptr((std::shared_ptr<PlayerViewMgr> *const)(v4 + 64));
  }
  result = v7;
  if ( v35 == (char *)v4 )
  {
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8008) = 0LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8010) = 0LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8018) = 0LL;
  }
  else
  {
    *(_QWORD *)v4 = 1172321806LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 3382: range 000000001598F3C8-000000001598F8B1
int32_t __cdecl Scene::sendNotifyEntityDisappear(
        Scene *const this,
        Player *player,
        const std::vector<unsigned int> *entity_id_vec,
        const VisionContext *context)
{
  unsigned __int64 v4; // r12
  __int64 v5; // rax
  _DWORD *v6; // r13
  std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v7; // rdx
  bool *p_is_print_entity_debug_log; // rax
  common::milog::MiLogStream *v9; // rdx
  common::milog::MiLogStream *v10; // rax
  common::milog::MiLogStream *v11; // r14
  std::__shared_ptr_access<proto::SceneEntityDisappearNotify,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v12; // rcx
  std::__shared_ptr_access<proto::SceneEntityDisappearNotify,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v13; // rcx
  std::__shared_ptr_access<proto::SceneEntityDisappearNotify,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v14; // rcx
  int32_t result; // eax
  unsigned int val; // [rsp+2Ch] [rbp-E4h] BYREF
  std::vector<unsigned int>::const_iterator __for_begin; // [rsp+30h] [rbp-E0h] BYREF
  std::vector<unsigned int>::const_iterator __for_end; // [rsp+38h] [rbp-D8h] BYREF
  const std::vector<unsigned int> *__for_range; // [rsp+40h] [rbp-D0h]
  const unsigned int *entity_id; // [rsp+48h] [rbp-C8h]
  std::shared_ptr<proto::SceneEntityDisappearNotify> __r; // [rsp+50h] [rbp-C0h] BYREF
  common::milog::MiLogStream v24; // [rsp+60h] [rbp-B0h] BYREF
  char v25[144]; // [rsp+80h] [rbp-90h] BYREF

  v4 = (unsigned __int64)v25;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v5 = __asan_stack_malloc_1(96LL);
    if ( v5 )
      v4 = v5;
  }
  *(_QWORD *)v4 = 1102416563LL;
  *(_QWORD *)(v4 + 8) = "2 32 16 15 config_ptr:3392 64 16 25 disappear_notify_ptr:3398";
  *(_QWORD *)(v4 + 16) = Scene::sendNotifyEntityDisappear;
  v6 = (_DWORD *)(v4 >> 3);
  v6[536862720] = -235802127;
  v6[536862721] = -219021312;
  v6[536862722] = -202178560;
  if ( *(_BYTE *)(((unsigned __int64)context >> 3) + 0x7FFF8000) != 0
    && (char)(((unsigned __int8)context & 7) + 3) >= *(_BYTE *)(((unsigned __int64)context >> 3) + 0x7FFF8000) )
  {
    __asan_report_load4(context);
  }
  if ( context->type != VISION_REPLACE_NO_NOTIFY && !std::vector<unsigned int>::empty(entity_id_vec) )
  {
    ServiceBox::findService<GameserverService>();
    GameserverService::getConfig((GameserverService *const)(v4 + 32));
    v7 = std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 32));
    p_is_print_entity_debug_log = &v7->is_print_entity_debug_log;
    if ( *(_BYTE *)(((unsigned __int64)p_is_print_entity_debug_log >> 3) + 0x7FFF8000) != 0
      && ((unsigned __int8)p_is_print_entity_debug_log & 7) >= *(_BYTE *)(((unsigned __int64)p_is_print_entity_debug_log >> 3)
                                                                        + 0x7FFF8000) )
    {
      __asan_report_load1(p_is_print_entity_debug_log);
    }
    if ( v7->is_print_entity_debug_log )
    {
      common::milog::MiLogStream::create(
        &v24,
        &common::milog::MiLogDefault::default_log_obj_,
        1u,
        "./src/scene/scene.cpp",
        "sendNotifyEntityDisappear",
        3395);
      v9 = common::milog::MiLogStream::operator<<<char [36],(char *[36])0>(
             &v24,
             (const char (*)[36])"send disappear notify, entity_list:");
      v10 = common::milog::MiLogStream::operator<<<unsigned int>(v9, entity_id_vec);
      v11 = common::milog::MiLogStream::operator<<<char [9],(char *[9])0>(v10, (const char (*)[9])off_258DEA00);
      val = Player::getUid(player);
      common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v11, &val);
      common::milog::MiLogStream::~MiLogStream(&v24);
    }
    common::tools::perf::make_shared<proto::SceneEntityDisappearNotify>();
    __for_range = entity_id_vec;
    __for_begin._M_current = std::vector<unsigned int>::begin(entity_id_vec)._M_current;
    __for_end._M_current = std::vector<unsigned int>::end(__for_range)._M_current;
    while ( __gnu_cxx::operator!=<unsigned int const*,std::vector<unsigned int>>(&__for_begin, &__for_end) )
    {
      entity_id = __gnu_cxx::__normal_iterator<unsigned int const*,std::vector<unsigned int>>::operator*(&__for_begin);
      v12 = std::__shared_ptr_access<proto::SceneEntityDisappearNotify,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<proto::SceneEntityDisappearNotify,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 64));
      if ( *(_BYTE *)(((unsigned __int64)entity_id >> 3) + 0x7FFF8000) != 0
        && (char)(((unsigned __int8)entity_id & 7) + 3) >= *(_BYTE *)(((unsigned __int64)entity_id >> 3) + 0x7FFF8000) )
      {
        __asan_report_load4(entity_id);
      }
      proto::SceneEntityDisappearNotify::add_entity_list(v12, *entity_id);
      __gnu_cxx::__normal_iterator<unsigned int const*,std::vector<unsigned int>>::operator++(&__for_begin);
    }
    v13 = std::__shared_ptr_access<proto::SceneEntityDisappearNotify,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<proto::SceneEntityDisappearNotify,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 64));
    if ( *(_BYTE *)(((unsigned __int64)context >> 3) + 0x7FFF8000) != 0
      && (char)(((unsigned __int8)context & 7) + 3) >= *(_BYTE *)(((unsigned __int64)context >> 3) + 0x7FFF8000) )
    {
      __asan_report_load4(context);
    }
    proto::SceneEntityDisappearNotify::set_disappear_type(v13, context->type);
    v14 = std::__shared_ptr_access<proto::SceneEntityDisappearNotify,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<proto::SceneEntityDisappearNotify,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 64));
    if ( *(_BYTE *)(((unsigned __int64)&context->param >> 3) + 0x7FFF8000) != 0
      && (char)((((_BYTE)context + 4) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&context->param >> 3) + 0x7FFF8000) )
    {
      __asan_report_load4(&context->param);
    }
    proto::SceneEntityDisappearNotify::set_param(v14, context->param);
    std::dynamic_pointer_cast<google::protobuf::Message const,proto::SceneEntityDisappearNotify>(&__r);
    Player::sendMessage(player, (common::minet::ConstMessagePtr *)&__r, 0LL);
    std::shared_ptr<google::protobuf::Message const>::~shared_ptr((std::shared_ptr<const google::protobuf::Message> *const)&__r);
    std::shared_ptr<proto::SceneEntityDisappearNotify>::~shared_ptr((std::shared_ptr<proto::SceneEntityDisappearNotify> *const)(v4 + 64));
    std::shared_ptr<Config>::~shared_ptr((std::shared_ptr<Config> *const)(v4 + 32));
  }
  result = 0;
  if ( v25 == (char *)v4 )
  {
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0LL;
    *(_DWORD *)((v4 >> 3) + 0x7FFF8008) = 0;
  }
  else
  {
    *(_QWORD *)v4 = 1172321806LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v4 >> 3) + 0x7FFF8008) = -168430091;
  }
  return result;
};

// Line 3412: range 000000001598F8B2-000000001598FEC4
int32_t __cdecl Scene::refreshPlayerInSightRangeEntitiesAndEnter(Scene *const this, Player *player)
{
  unsigned __int64 v2; // r13
  __int64 v3; // rax
  _DWORD *v4; // r12
  common::milog::MiLogStream *v5; // rax
  common::milog::MiLogStream *v6; // r14
  int32_t v7; // r14d
  int Uid; // eax
  common::milog::MiLogStream *v9; // rax
  common::milog::MiLogStream *v10; // r14
  PlayerViewMgr *v11; // rax
  SceneSightComp *SightComp; // r14
  unsigned __int64 v13; // rax
  void (__fastcall *v14)(SceneSightComp *, std::__shared_ptr_access<Entity,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *, unsigned __int64); // r15
  std::__shared_ptr_access<Entity,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v15; // rax
  std::vector<std::shared_ptr<Entity>> *EntityVec; // rax
  std::vector<std::shared_ptr<Entity>> *v17; // rax
  std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v18; // rax
  int32_t result; // eax
  unsigned int val; // [rsp+2Ch] [rbp-184h] BYREF
  std::shared_ptr<Entity> p_; // [rsp+30h] [rbp-180h] BYREF
  common::milog::MiLogStream v23; // [rsp+40h] [rbp-170h] BYREF
  char v24[336]; // [rsp+60h] [rbp-150h] BYREF

  v2 = (unsigned __int64)v24;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_3(288LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "5 48 16 26 player_eye_entity_ptr:3413 80 16 24 player_view_mgr_ptr:3420 112 16 15 avatar_ptr:343"
                        "2 144 24 20 meet_entity_vec:3431 208 48 12 visitor:3429";
  *(_QWORD *)(v2 + 16) = Scene::refreshPlayerInSightRangeEntitiesAndEnter;
  v4 = (_DWORD *)(v2 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = 61937;
  v4[536862722] = 62194;
  v4[536862723] = 62194;
  v4[536862724] = 62194;
  v4[536862725] = -218959360;
  v4[536862726] = 62194;
  v4[536862728] = -202116109;
  Player::getUid(player);
  Scene::getPlayerEyeEntity((Scene *const)(v2 + 48), (uint32_t)this);
  if ( std::operator==<Entity>((const std::shared_ptr<Entity> *)(v2 + 48), 0LL) )
  {
    common::milog::MiLogStream::create(
      &v23,
      &common::milog::MiLogDefault::default_log_obj_,
      1u,
      "./src/scene/scene.cpp",
      "refreshPlayerInSightRangeEntitiesAndEnter",
      3416);
    v5 = common::milog::MiLogStream::operator<<<char [30],(char *[30])0>(
           &v23,
           (const char (*)[30])"player_eye_entity_ptr is null");
    v6 = common::milog::MiLogStream::operator<<<char [6],(char *[6])0>(v5, (const char (*)[6])" uid:");
    val = Player::getUid(player);
    common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v6, &val);
    common::milog::MiLogStream::~MiLogStream(&v23);
    v7 = -1;
  }
  else
  {
    Uid = Player::getUid(player);
    Scene::findPlayerViewMgr((const Scene *const)(v2 + 80), (__int64)this, Uid);
    if ( std::operator==<PlayerViewMgr>((const std::shared_ptr<PlayerViewMgr> *)(v2 + 80), 0LL) )
    {
      common::milog::MiLogStream::create(
        &v23,
        &common::milog::MiLogDefault::default_log_obj_,
        1u,
        "./src/scene/scene.cpp",
        "refreshPlayerInSightRangeEntitiesAndEnter",
        3423);
      v9 = common::milog::MiLogStream::operator<<<char [28],(char *[28])0>(
             &v23,
             (const char (*)[28])"player_view_mgr_ptr is null");
      v10 = common::milog::MiLogStream::operator<<<char [6],(char *[6])0>(v9, (const char (*)[6])" uid:");
      val = Player::getUid(player);
      common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v10, &val);
      common::milog::MiLogStream::~MiLogStream(&v23);
      v7 = -1;
    }
    else
    {
      v11 = std::__shared_ptr_access<PlayerViewMgr,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<PlayerViewMgr,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 80));
      PlayerViewMgr::clearViewContainer(v11);
      std::shared_ptr<Entity>::shared_ptr(&p_, (const std::shared_ptr<Entity> *)(v2 + 48));
      ZN13EntityVisitorCI27VisitorESt10shared_ptrI6EntityE((EntityVisitor *const)(v2 + 208), &p_);
      std::shared_ptr<Entity>::~shared_ptr(&p_);
      SightComp = Scene::getSightComp(this);
      if ( *(_BYTE *)(((unsigned __int64)SightComp >> 3) + 0x7FFF8000) )
        __asan_report_load8();
      v13 = (unsigned __int64)(SightComp->_vptr_SceneCompBase + 10);
      if ( *(_BYTE *)((v13 >> 3) + 0x7FFF8000) )
        v13 = __asan_report_load8();
      v14 = *(void (__fastcall **)(SceneSightComp *, std::__shared_ptr_access<Entity,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *, unsigned __int64))v13;
      v15 = std::__shared_ptr_access<Entity,(__gnu_cxx::_Lock_policy)2,false,false>::operator*((const std::__shared_ptr_access<Entity,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 48));
      v14(SightComp, v15, v2 + 208);
      EntityVec = Visitor::getEntityVec((Visitor *const)(v2 + 208));
      v17 = std::move<std::vector<std::shared_ptr<Entity>> &>(EntityVec);
      std::vector<std::shared_ptr<Entity>>::vector((std::vector<std::shared_ptr<Entity>> *const)(v2 + 144), v17);
      Player::getCurAvatar((Player *const)(v2 + 112));
      if ( std::operator!=<Avatar>((const std::shared_ptr<Avatar> *)(v2 + 112), 0LL) )
      {
        v18 = std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 112));
        if ( Entity::isOnScene((const Entity *const)v18) )
        {
          std::shared_ptr<Entity>::shared_ptr<Avatar,void>(&p_, (const std::shared_ptr<Avatar> *)(v2 + 112));
          std::vector<std::shared_ptr<Entity>>::push_back((std::vector<std::shared_ptr<Entity>> *const)(v2 + 144), &p_);
          std::shared_ptr<Entity>::~shared_ptr(&p_);
        }
      }
      Scene::entitiesEnterPlayerSightRange(
        this,
        player,
        (const std::vector<std::shared_ptr<Entity>> *)(v2 + 144),
        &VisionContext::meet_context);
      v7 = 0;
      std::shared_ptr<Avatar>::~shared_ptr((std::shared_ptr<Avatar> *const)(v2 + 112));
      std::vector<std::shared_ptr<Entity>>::~vector((std::vector<std::shared_ptr<Entity>> *const)(v2 + 144));
      EntityVisitor::~EntityVisitor((EntityVisitor *const)(v2 + 208));
    }
    std::shared_ptr<PlayerViewMgr>::~shared_ptr((std::shared_ptr<PlayerViewMgr> *const)(v2 + 80));
  }
  std::shared_ptr<Entity>::~shared_ptr((std::shared_ptr<Entity> *const)(v2 + 48));
  result = v7;
  if ( v24 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8010) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8018) = 0;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8020) = 0;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8020) = -168430091;
  }
  return result;
};

// Line 3442: range 000000001598FEC6-0000000015990088
int32_t __cdecl Scene::notifyViewingPlayersExclude(
        Scene *const this,
        Entity *entity,
        common::minet::ConstMessagePtr *p_msg_ptr,
        uint32_t exclude_uid,
        bool include_me)
{
  unsigned __int64 v5; // rbx
  __int64 v6; // rax
  _DWORD *v7; // r12
  GameserverService *v8; // rax
  PlayerMgr *p_player_mgr; // r14
  int32_t result; // eax
  std::shared_ptr<const google::protobuf::Message> v14; // [rsp+20h] [rbp-A0h] BYREF
  char v15[144]; // [rsp+30h] [rbp-90h] BYREF

  v5 = (unsigned __int64)v15;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v6 = __asan_stack_malloc_1(96LL);
    if ( v6 )
      v5 = v6;
  }
  *(_QWORD *)v5 = 1102416563LL;
  *(_QWORD *)(v5 + 8) = "1 32 24 12 uid_vec:3443";
  *(_QWORD *)(v5 + 16) = Scene::notifyViewingPlayersExclude;
  v7 = (_DWORD *)(v5 >> 3);
  v7[536862720] = -235802127;
  v7[536862721] = -218103808;
  v7[536862722] = -202116109;
  Scene::getViewingPlayers((std::vector<unsigned int> *)(v5 + 32), this, entity, exclude_uid, include_me);
  v8 = ServiceBox::findService<GameserverService>();
  p_player_mgr = &GameserverService::getGameThreadLocal(v8)->player_mgr;
  std::shared_ptr<google::protobuf::Message const>::shared_ptr(&v14, p_msg_ptr);
  LODWORD(p_player_mgr) = PlayerMgr::sendToPlayerList<google::protobuf::Message>(
                            p_player_mgr,
                            (const std::vector<unsigned int> *)(v5 + 32),
                            &v14);
  std::shared_ptr<google::protobuf::Message const>::~shared_ptr(&v14);
  std::vector<unsigned int>::~vector((std::vector<unsigned int> *const)(v5 + 32));
  result = (int)p_player_mgr;
  if ( v15 == (char *)v5 )
  {
    *(_QWORD *)((v5 >> 3) + 0x7FFF8000) = 0LL;
    *(_DWORD *)((v5 >> 3) + 0x7FFF8008) = 0;
  }
  else
  {
    *(_QWORD *)v5 = 1172321806LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v5 >> 3) + 0x7FFF8008) = -168430091;
  }
  return result;
};

// Line 3449: range 000000001599008A-000000001599056B
std::vector<unsigned int> *__cdecl Scene::getViewingPlayers(
        std::vector<unsigned int> *retstr,
        Scene *const this,
        Entity *entity,
        uint32_t exclude_uid,
        bool include_me)
{
  unsigned __int64 v5; // r13
  __int64 v6; // rax
  _DWORD *v7; // r12
  common::milog::MiLogStream *v8; // rdx
  EntityViewMgr *ViewMgr; // rax
  std::__shared_ptr_access<Player,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v10; // rax
  std::_Rb_tree_const_iterator<unsigned int>::_Base_ptr M_node; // r14
  std::set<unsigned int>::iterator v12; // rax
  std::allocator<unsigned int> __a; // [rsp+2Fh] [rbp-171h] BYREF
  std::vector<std::shared_ptr<Player>>::iterator __for_begin; // [rsp+30h] [rbp-170h] BYREF
  std::vector<std::shared_ptr<Player>>::iterator __for_end; // [rsp+38h] [rbp-168h] BYREF
  std::vector<std::shared_ptr<Player>> *__for_range; // [rsp+40h] [rbp-160h]
  std::shared_ptr<Player> *player_ptr; // [rsp+48h] [rbp-158h]
  common::milog::MiLogStream v22; // [rsp+50h] [rbp-150h] BYREF
  char v23[304]; // [rsp+70h] [rbp-130h] BYREF

  v5 = (unsigned __int64)v23;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v6 = __asan_stack_malloc_2(256LL);
    if ( v6 )
      v5 = v6;
  }
  *(_QWORD *)v5 = 1102416563LL;
  *(_QWORD *)(v5 + 8) = "4 32 4 13 self_uid:3467 48 24 15 player_vec:3455 112 24 12 uid_vec:3479 176 48 12 uid_set:3456";
  *(_QWORD *)(v5 + 16) = Scene::getViewingPlayers;
  v7 = (_DWORD *)(v5 >> 3);
  v7[536862720] = -235802127;
  v7[536862721] = 61956;
  v7[536862722] = -218959360;
  v7[536862723] = 62194;
  v7[536862724] = -218959360;
  v7[536862725] = 62194;
  v7[536862727] = -202116109;
  if ( !Entity::isOnScene(entity) )
  {
    common::milog::MiLogStream::create(
      &v22,
      &common::milog::MiLogDefault::default_log_obj_,
      1u,
      "./src/scene/scene.cpp",
      "getViewingPlayers",
      3452);
    v8 = common::milog::MiLogStream::operator<<<char [23],(char *[23])0>(
           &v22,
           (const char (*)[23])"entity is not on scene");
    common::milog::MiLogStream::operator<<<Entity,(Entity*)0>(v8, entity);
    common::milog::MiLogStream::~MiLogStream(&v22);
    if ( *(char *)(((unsigned __int64)retstr >> 3) + 0x7FFF8000) < 0
      || *(_BYTE *)((((unsigned __int64)&retstr->_M_impl._M_end_of_storage + 7) >> 3) + 0x7FFF8000) != 0
      && (((unsigned __int8)retstr + 23) & 7) >= *(_BYTE *)((((unsigned __int64)&retstr->_M_impl._M_end_of_storage + 7) >> 3)
                                                          + 0x7FFF8000) )
    {
      __asan_report_store_n(retstr, 24LL);
    }
    retstr->_M_impl._M_start = 0LL;
    retstr->_M_impl._M_finish = 0LL;
    retstr->_M_impl._M_end_of_storage = 0LL;
    std::vector<unsigned int>::vector(retstr);
  }
  else
  {
    ViewMgr = Entity::getViewMgr(entity);
    EntityViewMgr::validateAndGetViewingPlayers((std::vector<std::shared_ptr<Player>> *)(v5 + 48), ViewMgr);
    std::set<unsigned int>::set((std::set<unsigned int> *const)(v5 + 176));
    __for_range = (std::vector<std::shared_ptr<Player>> *)(v5 + 48);
    __for_begin._M_current = std::vector<std::shared_ptr<Player>>::begin((std::vector<std::shared_ptr<Player>> *const)(v5 + 48))._M_current;
    __for_end._M_current = std::vector<std::shared_ptr<Player>>::end((std::vector<std::shared_ptr<Player>> *const)(v5 + 48))._M_current;
    while ( __gnu_cxx::operator!=<std::shared_ptr<Player> *,std::vector<std::shared_ptr<Player>>>(
              &__for_begin,
              &__for_end) )
    {
      player_ptr = __gnu_cxx::__normal_iterator<std::shared_ptr<Player> *,std::vector<std::shared_ptr<Player>>>::operator*(&__for_begin);
      v10 = std::__shared_ptr_access<Player,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Player,(__gnu_cxx::_Lock_policy)2,false,false> *const)player_ptr);
      *(_DWORD *)(v5 + 32) = Player::getUid(v10);
      if ( exclude_uid != *(_DWORD *)(v5 + 32) )
        std::set<unsigned int>::insert(
          (std::set<unsigned int> *const)(v5 + 176),
          (const std::set<unsigned int>::value_type *)(v5 + 32));
      __gnu_cxx::__normal_iterator<std::shared_ptr<Player> *,std::vector<std::shared_ptr<Player>>>::operator++(&__for_begin);
    }
    *(_DWORD *)(v5 + 32) = Entity::getPlayerUid(entity);
    if ( *(_DWORD *)(v5 + 32) )
    {
      if ( !include_me || exclude_uid == *(_DWORD *)(v5 + 32) )
        std::set<unsigned int>::erase(
          (std::set<unsigned int> *const)(v5 + 176),
          (const std::set<unsigned int>::key_type *)(v5 + 32));
      else
        std::set<unsigned int>::insert(
          (std::set<unsigned int> *const)(v5 + 176),
          (const std::set<unsigned int>::value_type *)(v5 + 32));
    }
    std::allocator<unsigned int>::allocator(&__a);
    M_node = std::set<unsigned int>::end((const std::set<unsigned int> *const)(v5 + 176))._M_node;
    v12._M_node = std::set<unsigned int>::begin((const std::set<unsigned int> *const)(v5 + 176))._M_node;
    std::vector<unsigned int>::vector<std::_Rb_tree_const_iterator<unsigned int>,void>(
      (std::vector<unsigned int> *const)(v5 + 112),
      v12,
      (std::_Rb_tree_const_iterator<unsigned int>)M_node,
      &__a);
    std::allocator<unsigned int>::~allocator(&__a);
    std::vector<unsigned int>::vector(retstr, (std::vector<unsigned int> *)(v5 + 112));
    std::vector<unsigned int>::~vector((std::vector<unsigned int> *const)(v5 + 112));
    std::set<unsigned int>::~set((std::set<unsigned int> *const)(v5 + 176));
    std::vector<std::shared_ptr<Player>>::~vector((std::vector<std::shared_ptr<Player>> *const)(v5 + 48));
  }
  if ( v23 == (char *)v5 )
  {
    *(_QWORD *)((v5 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8008) = 0LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8010) = 0LL;
    *(_DWORD *)((v5 >> 3) + 0x7FFF801C) = 0;
  }
  else
  {
    *(_QWORD *)v5 = 1172321806LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return retstr;
};

// Line 3485: range 000000001599056C-000000001599073D
// local variable allocation has failed, the output may be wrong!
std::vector<std::shared_ptr<Player>> *__fastcall Scene::getDropSurroundPlayers(
        std::vector<std::shared_ptr<Player>> *retstr,
        Scene *const this,
        Vector3 pos)
{
  __int64 v3; // rax
  __m128i v4; // xmm0
  unsigned __int64 v5; // rbx
  __int64 v6; // rax
  unsigned __int64 v7; // r12
  int v8; // xmm1_4
  std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v9; // rax
  __int64 v11; // [rsp+0h] [rbp-A0h]
  float sight_range; // [rsp+2Ch] [rbp-74h]
  std::shared_ptr<Config> v13; // [rsp+30h] [rbp-70h] BYREF
  char v14[96]; // [rsp+40h] [rbp-60h] BYREF

  v3 = *(_QWORD *)&pos.x;
  v4 = *(__m128i *)&pos.z;
  v11 = v3;
  v5 = (unsigned __int64)v14;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v6 = __asan_stack_malloc_0(64LL);
    if ( v6 )
      v5 = v6;
  }
  *(_QWORD *)v5 = 1102416563LL;
  *(_QWORD *)(v5 + 8) = "1 32 12 8 pos:3484";
  *(_QWORD *)(v5 + 16) = Scene::getDropSurroundPlayers;
  v7 = v5 >> 3;
  *(_DWORD *)(v7 + 2147450880) = -235802127;
  *(_DWORD *)(v7 + 2147450884) = -202177536;
  *(_QWORD *)(v5 + 32) = v11;
  *(_DWORD *)(v5 + 40) = v8;
  ServiceBox::findService<GameserverService>();
  GameserverService::getConfig((GameserverService *const)&v13);
  v9 = std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false> *const)&v13);
  *(float *)v4.m128i_i32 = ConstValueExcelConfigMgr::getKillDropSightRange(&v9->design_config.txt_config_mgr.const_value_config_mgr);
  sight_range = COERCE_FLOAT(_mm_cvtsi128_si32(v4));
  std::shared_ptr<Config>::~shared_ptr(&v13);
  if ( *(char *)(((unsigned __int64)retstr >> 3) + 0x7FFF8000) < 0
    || *(_BYTE *)((((unsigned __int64)&retstr->_M_impl._M_end_of_storage + 7) >> 3) + 0x7FFF8000) != 0
    && (((unsigned __int8)retstr + 23) & 7) >= *(_BYTE *)((((unsigned __int64)&retstr->_M_impl._M_end_of_storage + 7) >> 3)
                                                        + 0x7FFF8000) )
  {
    __asan_report_store_n(retstr, 24LL);
  }
  Scene::getSurroundPlayersInRange(retstr, this, *(Vector3 *)(v5 + 32), sight_range);
  if ( v14 == (char *)v5 )
  {
    *(_QWORD *)((v5 >> 3) + 0x7FFF8000) = 0LL;
  }
  else
  {
    *(_QWORD *)v5 = 1172321806LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return retstr;
};

// Line 3491: range 000000001599073E-0000000015990B04
// local variable allocation has failed, the output may be wrong!
std::vector<std::shared_ptr<Player>> *__fastcall Scene::getSurroundPlayersInRange(
        std::vector<std::shared_ptr<Player>> *retstr,
        Scene *const this,
        Vector3 pos,
        float sight_range)
{
  unsigned __int64 v4; // r13
  __int64 v5; // rax
  _DWORD *v6; // r12
  const std::shared_ptr<Avatar> *v7; // rax
  common::milog::MiLogStream *v8; // rax
  unsigned __int64 v9; // rax
  unsigned __int64 v10; // rdx
  std::vector<std::shared_ptr<Avatar>>::iterator __for_begin; // [rsp+38h] [rbp-108h] BYREF
  std::vector<std::shared_ptr<Avatar>>::iterator __for_end; // [rsp+40h] [rbp-100h] BYREF
  std::vector<std::shared_ptr<Avatar>> *__for_range; // [rsp+48h] [rbp-F8h]
  std::vector<std::shared_ptr<Player>>::value_type __x; // [rsp+50h] [rbp-F0h] BYREF
  common::milog::MiLogStream v16; // [rsp+60h] [rbp-E0h] BYREF
  char v17[192]; // [rsp+80h] [rbp-C0h] BYREF

  v4 = (unsigned __int64)v17;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v5 = __asan_stack_malloc_2(160LL);
    if ( v5 )
      v4 = v5;
  }
  *(_QWORD *)v4 = 1102416563LL;
  *(_QWORD *)(v4 + 8) = "3 32 12 8 pos:3490 64 16 15 avatar_ptr:3495 96 24 15 avatar_vec:3493";
  *(_QWORD *)(v4 + 16) = Scene::getSurroundPlayersInRange;
  v6 = (_DWORD *)(v4 >> 3);
  v6[536862720] = -235802127;
  v6[536862721] = -219020288;
  v6[536862722] = -219021312;
  v6[536862723] = -218103808;
  v6[536862724] = -202116109;
  *(Vector3 *)(v4 + 32) = pos;
  std::vector<std::shared_ptr<Player>>::vector(retstr);
  std::vector<std::shared_ptr<Avatar>>::vector((std::vector<std::shared_ptr<Avatar>> *const)(v4 + 96));
  Scene::getAvatarsInRange(
    this,
    (const Vector3 *)(v4 + 32),
    (std::vector<std::shared_ptr<Avatar>> *)(v4 + 96),
    sight_range);
  __for_range = (std::vector<std::shared_ptr<Avatar>> *)(v4 + 96);
  __for_begin._M_current = std::vector<std::shared_ptr<Avatar>>::begin((std::vector<std::shared_ptr<Avatar>> *const)(v4 + 96))._M_current;
  __for_end._M_current = std::vector<std::shared_ptr<Avatar>>::end((std::vector<std::shared_ptr<Avatar>> *const)(v4 + 96))._M_current;
  while ( __gnu_cxx::operator!=<std::shared_ptr<Avatar> *,std::vector<std::shared_ptr<Avatar>>>(
            &__for_begin,
            &__for_end) )
  {
    v7 = __gnu_cxx::__normal_iterator<std::shared_ptr<Avatar> *,std::vector<std::shared_ptr<Avatar>>>::operator*(&__for_begin);
    std::shared_ptr<Avatar>::shared_ptr((std::shared_ptr<Avatar> *const)(v4 + 64), v7);
    if ( std::operator==<Avatar>((const std::shared_ptr<Avatar> *)(v4 + 64), 0LL) )
    {
      common::milog::MiLogStream::create(
        &v16,
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/scene/scene.cpp",
        "getSurroundPlayersInRange",
        3499);
      v8 = common::milog::MiLogStream::operator<<<char [28],(char *[28])0>(
             &v16,
             (const char (*)[28])"avatar_ptr is null, entity:");
      common::milog::MiLogStream::operator<<<Scene,(Scene*)0>(v8, this);
      common::milog::MiLogStream::~MiLogStream(&v16);
    }
    else
    {
      v9 = (unsigned __int64)std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 64));
      if ( *(_BYTE *)((v9 >> 3) + 0x7FFF8000) )
        v9 = __asan_report_load8();
      v10 = *(_QWORD *)v9 + 152LL;
      if ( *(_BYTE *)((v10 >> 3) + 0x7FFF8000) )
        v9 = __asan_report_load8();
      (*(void (__fastcall **)(std::vector<std::shared_ptr<Player>>::value_type *, unsigned __int64))v10)(&__x, v9);
      std::vector<std::shared_ptr<Player>>::push_back(retstr, &__x);
      std::shared_ptr<Player>::~shared_ptr(&__x);
    }
    std::shared_ptr<Avatar>::~shared_ptr((std::shared_ptr<Avatar> *const)(v4 + 64));
    __gnu_cxx::__normal_iterator<std::shared_ptr<Avatar> *,std::vector<std::shared_ptr<Avatar>>>::operator++(&__for_begin);
  }
  std::vector<std::shared_ptr<Avatar>>::~vector((std::vector<std::shared_ptr<Avatar>> *const)(v4 + 96));
  if ( v17 == (char *)v4 )
  {
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8008) = 0LL;
    *(_DWORD *)((v4 >> 3) + 0x7FFF8010) = 0;
  }
  else
  {
    *(_QWORD *)v4 = 1172321806LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v4 >> 3) + 0x7FFF8010) = -168430091;
  }
  return retstr;
};

// Line 3509: range 0000000015990B06-0000000015990BB5
// local variable allocation has failed, the output may be wrong!
GroupPtr __cdecl Scene::findGroup(Scene *const this, uint32_t group_id)
{
  uint32_t v2; // edx
  unsigned __int64 BlockGroupComp; // rax
  unsigned __int64 v4; // rdx
  __int64 v5; // rsi
  void (__fastcall *v6)(Scene *const, unsigned __int64, _QWORD, _QWORD, _QWORD, _QWORD); // r10
  GroupPtr result; // rax
  uint32_t group_ida; // [rsp+Ch] [rbp-14h]

  group_ida = v2;
  BlockGroupComp = (unsigned __int64)Scene::getBlockGroupComp(*(Scene *const *)&group_id);
  if ( *(_BYTE *)((BlockGroupComp >> 3) + 0x7FFF8000) )
    BlockGroupComp = __asan_report_load8();
  v4 = *(_QWORD *)BlockGroupComp + 80LL;
  v5 = *(unsigned __int8 *)((v4 >> 3) + 0x7FFF8000);
  if ( (_BYTE)v5 )
    BlockGroupComp = __asan_report_load8();
  v6 = *(void (__fastcall **)(Scene *const, unsigned __int64, _QWORD, _QWORD, _QWORD, _QWORD))v4;
  if ( *(_WORD *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    BlockGroupComp = __asan_report_store16(this, v5);
  v6(this, BlockGroupComp, group_ida, 0LL, 0LL, 0LL);
  result._M_ptr = (std::__shared_ptr<Group,(__gnu_cxx::_Lock_policy)2>::element_type *)this;
  return result;
};

// Line 3515: range 0000000015990BB6-0000000015990C2C
int32_t __cdecl Scene::foreachGroup(Scene *const this, std::function<ForeachPolicy(Group&)> *p_func)
{
  SceneBlockGroupComp *BlockGroupComp; // rbx
  std::function<ForeachPolicy(Group&)> v4; // [rsp+10h] [rbp-30h] BYREF

  BlockGroupComp = Scene::getBlockGroupComp(this);
  std::function<ForeachPolicy ()(Group &)>::function(&v4, p_func);
  LODWORD(BlockGroupComp) = SceneBlockGroupComp::foreachGroup(BlockGroupComp, &v4);
  std::function<ForeachPolicy ()(Group &)>::~function(&v4);
  return (int)BlockGroupComp;
};

// Line 3521: range 0000000015990C2E-0000000015990F83
int32_t __cdecl Scene::foreachPlayer(Scene *const this, std::function<ForeachPolicy(Player&)> *p_func)
{
  int32_t v2; // r15d
  unsigned __int64 v3; // r12
  __int64 v4; // rax
  _DWORD *v5; // r13
  std::map<unsigned int,std::weak_ptr<Player>>::size_type v6; // rax
  int v7; // r14d
  Player *v8; // rdx
  int32_t result; // eax
  std::map<unsigned int,std::weak_ptr<Player>>::iterator __for_begin; // [rsp+20h] [rbp-F0h] BYREF
  std::map<unsigned int,std::weak_ptr<Player>>::iterator __for_end; // [rsp+28h] [rbp-E8h] BYREF
  std::map<unsigned int,std::weak_ptr<Player>> *__for_range; // [rsp+30h] [rbp-E0h]
  std::vector<std::weak_ptr<Player>> *__for_range_0; // [rsp+38h] [rbp-D8h]
  std::weak_ptr<Player> *player_wtr; // [rsp+40h] [rbp-D0h]
  std::pair<unsigned int const,std::weak_ptr<Player> > *__in; // [rsp+48h] [rbp-C8h]
  std::tuple_element<0,std::pair<unsigned int const,std::weak_ptr<Player> > >::type *player_id; // [rsp+50h] [rbp-C0h]
  std::tuple_element<1,std::pair<unsigned int const,std::weak_ptr<Player> > >::type *player_ptr; // [rsp+58h] [rbp-B8h]
  char v18[176]; // [rsp+60h] [rbp-B0h] BYREF

  v3 = (unsigned __int64)v18;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_1(128LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "2 32 16 15 player_ptr:3531 64 24 15 player_vec:3523";
  *(_QWORD *)(v3 + 16) = Scene::foreachPlayer;
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = -219021312;
  v5[536862722] = -218103808;
  v5[536862723] = -202116109;
  std::vector<std::weak_ptr<Player>>::vector((std::vector<std::weak_ptr<Player>> *const)(v3 + 64));
  v6 = std::map<unsigned int,std::weak_ptr<Player>>::size(&this->player_map_);
  std::vector<std::weak_ptr<Player>>::reserve((std::vector<std::weak_ptr<Player>> *const)(v3 + 64), v6);
  __for_range = &this->player_map_;
  __for_begin._M_node = std::map<unsigned int,std::weak_ptr<Player>>::begin(&this->player_map_)._M_node;
  __for_end._M_node = std::map<unsigned int,std::weak_ptr<Player>>::end(&this->player_map_)._M_node;
  while ( std::operator!=(&__for_begin, &__for_end) )
  {
    __in = std::_Rb_tree_iterator<std::pair<unsigned int const,std::weak_ptr<Player>>>::operator*(&__for_begin);
    player_id = std::get<0ul,unsigned int const,std::weak_ptr<Player>>(__in);
    player_ptr = std::get<1ul,unsigned int const,std::weak_ptr<Player>>(__in);
    std::vector<std::weak_ptr<Player>>::emplace_back<std::weak_ptr<Player>&>(
      (std::vector<std::weak_ptr<Player>> *const)(v3 + 64),
      player_ptr,
      player_ptr);
    std::_Rb_tree_iterator<std::pair<unsigned int const,std::weak_ptr<Player>>>::operator++(&__for_begin);
  }
  __for_range_0 = (std::vector<std::weak_ptr<Player>> *)(v3 + 64);
  __for_begin._M_node = (std::_Rb_tree_iterator<std::pair<unsigned int const,std::weak_ptr<Player> > >::_Base_ptr)std::vector<std::weak_ptr<Player>>::begin((std::vector<std::weak_ptr<Player>> *const)(v3 + 64))._M_current;
  __for_end._M_node = (std::_Rb_tree_iterator<std::pair<unsigned int const,std::weak_ptr<Player> > >::_Base_ptr)std::vector<std::weak_ptr<Player>>::end(__for_range_0)._M_current;
  while ( __gnu_cxx::operator!=<std::weak_ptr<Player> *,std::vector<std::weak_ptr<Player>>>(
            (const __gnu_cxx::__normal_iterator<std::weak_ptr<Player>*,std::vector<std::weak_ptr<Player>> > *)&__for_begin,
            (const __gnu_cxx::__normal_iterator<std::weak_ptr<Player>*,std::vector<std::weak_ptr<Player>> > *)&__for_end) )
  {
    player_wtr = __gnu_cxx::__normal_iterator<std::weak_ptr<Player> *,std::vector<std::weak_ptr<Player>>>::operator*((const __gnu_cxx::__normal_iterator<std::weak_ptr<Player>*,std::vector<std::weak_ptr<Player>> > *const)&__for_begin);
    std::weak_ptr<Player>::lock((const std::weak_ptr<Player> *const)(v3 + 32));
    if ( std::operator==<Player>((const std::shared_ptr<Player> *)(v3 + 32), 0LL) )
    {
      v7 = 0;
    }
    else
    {
      v8 = std::__shared_ptr_access<Player,(__gnu_cxx::_Lock_policy)2,false,false>::operator*((const std::__shared_ptr_access<Player,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 32));
      if ( std::function<ForeachPolicy ()(Player &)>::operator()(p_func, v8) )
      {
        v2 = 1;
        v7 = 1;
      }
      else
      {
        v7 = 2;
      }
    }
    std::shared_ptr<Player>::~shared_ptr((std::shared_ptr<Player> *const)(v3 + 32));
    if ( v7 && v7 != 2 )
      goto LABEL_18;
    __gnu_cxx::__normal_iterator<std::weak_ptr<Player> *,std::vector<std::weak_ptr<Player>>>::operator++((__gnu_cxx::__normal_iterator<std::weak_ptr<Player>*,std::vector<std::weak_ptr<Player>> > *const)&__for_begin);
  }
  v2 = 0;
LABEL_18:
  std::vector<std::weak_ptr<Player>>::~vector((std::vector<std::weak_ptr<Player>> *const)(v3 + 64));
  result = v2;
  if ( v18 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 3546: range 0000000015990F84-0000000015991232
int32_t __cdecl Scene::notifyHostToPlayer(Scene *const this, Player *player)
{
  unsigned __int64 v2; // r12
  __int64 v3; // rax
  _DWORD *v4; // r13
  int32_t v5; // r14d
  std::__shared_ptr_access<proto::HostPlayerNotify,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v6; // r14
  std::__shared_ptr_access<Player,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v7; // rax
  uint32_t Uid; // eax
  std::__shared_ptr_access<proto::HostPlayerNotify,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v9; // r14
  std::__shared_ptr_access<Player,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v10; // rax
  uint32_t v11; // edx
  uint32_t PeerId; // eax
  int32_t result; // eax
  std::shared_ptr<proto::HostPlayerNotify> __r; // [rsp+10h] [rbp-C0h] BYREF
  common::milog::MiLogStream v15; // [rsp+20h] [rbp-B0h] BYREF
  char v16[144]; // [rsp+40h] [rbp-90h] BYREF

  v2 = (unsigned __int64)v16;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_1(96LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "2 32 16 20 host_player_ptr:3547 64 16 15 notify_ptr:3553";
  *(_QWORD *)(v2 + 16) = Scene::notifyHostToPlayer;
  v4 = (_DWORD *)(v2 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = -219021312;
  v4[536862722] = -202178560;
  Scene::getHostPlayer((const Scene *const)(v2 + 32));
  if ( std::operator==<Player>((const std::shared_ptr<Player> *)(v2 + 32), 0LL) )
  {
    common::milog::MiLogStream::create(
      &v15,
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/scene/scene.cpp",
      "notifyHostToPlayer",
      3550);
    common::milog::MiLogStream::operator<<<char [24],(char *[24])0>(&v15, (const char (*)[24])"host_player_ptr is null");
    common::milog::MiLogStream::~MiLogStream(&v15);
    v5 = -1;
  }
  else
  {
    common::tools::perf::make_shared<proto::HostPlayerNotify>();
    v6 = std::__shared_ptr_access<proto::HostPlayerNotify,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<proto::HostPlayerNotify,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 64));
    v7 = std::__shared_ptr_access<Player,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Player,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 32));
    Uid = Player::getUid(v7);
    proto::HostPlayerNotify::set_host_uid(v6, Uid);
    v9 = std::__shared_ptr_access<proto::HostPlayerNotify,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<proto::HostPlayerNotify,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 64));
    v10 = std::__shared_ptr_access<Player,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Player,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 32));
    v11 = Player::getUid(v10);
    PeerId = Scene::getPeerId(this, v11);
    proto::HostPlayerNotify::set_host_peer_id(v9, PeerId);
    std::dynamic_pointer_cast<google::protobuf::Message const,proto::HostPlayerNotify>(&__r);
    v5 = Player::sendMessage(player, (common::minet::ConstMessagePtr *)&__r, 0LL);
    std::shared_ptr<google::protobuf::Message const>::~shared_ptr((std::shared_ptr<const google::protobuf::Message> *const)&__r);
    std::shared_ptr<proto::HostPlayerNotify>::~shared_ptr((std::shared_ptr<proto::HostPlayerNotify> *const)(v2 + 64));
  }
  std::shared_ptr<Player>::~shared_ptr((std::shared_ptr<Player> *const)(v2 + 32));
  result = v5;
  if ( v16 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8008) = 0;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8008) = -168430091;
  }
  return result;
};

// Line 3561: range 00000000159912C6-00000000159916E0
void __cdecl Scene::setHostPlayer(Scene *const this, PlayerPtr *p_player_ptr)
{
  unsigned __int64 v2; // r13
  __int64 v3; // rax
  _DWORD *v4; // r12
  std::__shared_ptr_access<Player,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v5; // rax
  uint32_t Uid; // eax
  std::__shared_ptr_access<Player,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v7; // rax
  uint32_t v8; // edx
  uint32_t PeerId; // eax
  std::__shared_ptr_access<MPLevelEntity,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v10; // r14
  std::shared_ptr<Player> p_authority_player_ptr; // [rsp+10h] [rbp-120h] BYREF
  common::milog::MiLogStream v12; // [rsp+20h] [rbp-110h] BYREF
  char v13[240]; // [rsp+40h] [rbp-F0h] BYREF

  v2 = (unsigned __int64)v13;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_2(192LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "3 32 16 20 host_player_ptr:3562 64 24 15 player_vec:3581 128 32 11 notify:3573";
  *(_QWORD *)(v2 + 16) = Scene::setHostPlayer;
  v4 = (_DWORD *)(v2 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = -219021312;
  v4[536862722] = -234881024;
  v4[536862723] = -218959118;
  v4[536862725] = -202116109;
  std::weak_ptr<Player>::lock((const std::weak_ptr<Player> *const)(v2 + 32));
  if ( std::operator==<Player,Player>((const std::shared_ptr<Player> *)(v2 + 32), p_player_ptr) )
  {
    common::milog::MiLogStream::create(
      &v12,
      &common::milog::MiLogDefault::default_log_obj_,
      1u,
      "./src/scene/scene.cpp",
      "setHostPlayer",
      3565);
    common::milog::MiLogStream::operator<<<char [24],(char *[24])0>(&v12, (const char (*)[24])"host player is the same");
    common::milog::MiLogStream::~MiLogStream(&v12);
  }
  else
  {
    std::weak_ptr<Player>::operator=<Player>(&this->host_player_wtr_, p_player_ptr);
    if ( !std::operator==<Player>(p_player_ptr, 0LL) )
    {
      proto::HostPlayerNotify::HostPlayerNotify((proto::HostPlayerNotify *const)(v2 + 128));
      v5 = std::__shared_ptr_access<Player,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Player,(__gnu_cxx::_Lock_policy)2,false,false> *const)p_player_ptr);
      Uid = Player::getUid(v5);
      proto::HostPlayerNotify::set_host_uid((proto::HostPlayerNotify *const)(v2 + 128), Uid);
      v7 = std::__shared_ptr_access<Player,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Player,(__gnu_cxx::_Lock_policy)2,false,false> *const)p_player_ptr);
      v8 = Player::getUid(v7);
      PeerId = Scene::getPeerId(this, v8);
      proto::HostPlayerNotify::set_host_peer_id((proto::HostPlayerNotify *const)(v2 + 128), PeerId);
      Scene::notifyAllPlayer<proto::HostPlayerNotify>(this, (proto::HostPlayerNotify *)(v2 + 128), 0);
      if ( std::operator!=<MPLevelEntity>(&this->mp_level_entity_ptr_, 0LL) )
      {
        std::vector<std::shared_ptr<Player>>::vector((std::vector<std::shared_ptr<Player>> *const)(v2 + 64));
        std::function<ForeachPolicy ()(Player &)>::function<Scene::setHostPlayer(std::shared_ptr<Player>)::{lambda(Player &)#1},void,void>(
          (std::function<ForeachPolicy(Player&)> *const)&v12,
          (Scene::setHostPlayer::<lambda(Player&)>)(v2 + 64));
        Scene::foreachPlayer(this, (std::function<ForeachPolicy(Player&)> *)&v12);
        std::function<ForeachPolicy ()(Player &)>::~function((std::function<ForeachPolicy(Player&)> *const)&v12);
        v10 = std::__shared_ptr_access<MPLevelEntity,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<MPLevelEntity,(__gnu_cxx::_Lock_policy)2,false,false> *const)&this->mp_level_entity_ptr_);
        std::shared_ptr<Player>::shared_ptr(&p_authority_player_ptr, p_player_ptr);
        Creature::onAuthorityChangedToPlayer(
          v10,
          &p_authority_player_ptr,
          (const std::vector<std::shared_ptr<Player>> *)(v2 + 64),
          0);
        std::shared_ptr<Player>::~shared_ptr(&p_authority_player_ptr);
        std::vector<std::shared_ptr<Player>>::~vector((std::vector<std::shared_ptr<Player>> *const)(v2 + 64));
      }
      proto::HostPlayerNotify::~HostPlayerNotify((proto::HostPlayerNotify *const)(v2 + 128));
    }
  }
  std::shared_ptr<Player>::~shared_ptr((std::shared_ptr<Player> *const)(v2 + 32));
  if ( v13 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8014) = 0;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
  }
};

// Line 3582: range 0000000015991234-00000000159912C4
ForeachPolicy __cdecl Scene::setHostPlayer(std::shared_ptr<Player>)::{lambda(Player&)#1}::operator()(
        const Scene::setHostPlayer::<lambda(Player&)> *const __closure,
        Player *player)
{
  std::vector<std::shared_ptr<Player>> *player_vec; // rbx
  std::shared_ptr<Player> v3; // rax
  std::shared_ptr<Player> v5; // [rsp+10h] [rbp-20h] BYREF

  if ( *(_BYTE *)(((unsigned __int64)__closure >> 3) + 0x7FFF8000) )
    __asan_report_load8();
  player_vec = __closure->__player_vec;
  v3 = toThisPtr<Player>((Player *)&v5);
  std::vector<std::shared_ptr<Player>>::emplace_back<std::shared_ptr<Player>>(
    player_vec,
    &v5,
    (std::shared_ptr<Player> *)v3._M_refcount._M_pi);
  std::shared_ptr<Player>::~shared_ptr(&v5);
  return 0;
};

// Line 3593: range 0000000015991800-0000000015992353
void __cdecl Scene::onTimer(Scene *const this, uint64_t now_ms)
{
  unsigned __int64 v2; // r13
  __int64 v3; // rax
  _DWORD *v4; // r12
  std::_Rb_tree_iterator<std::pair<unsigned int const,ScenePlayerPeerInfo> >::pointer v5; // rdx
  ScenePlayerPeerInfo *p_second; // rax
  std::_Rb_tree_iterator<std::pair<unsigned int const,ScenePlayerPeerInfo> >::pointer v7; // rdx
  uint32_t *p_enter_time; // rax
  common::milog::MiLogStream *v9; // rax
  common::milog::MiLogStream *v10; // rax
  std::_Rb_tree_iterator<std::pair<unsigned int const,ScenePlayerPeerInfo> >::pointer v11; // rax
  common::milog::MiLogStream *v12; // rax
  common::milog::MiLogStream *v13; // rax
  std::_Rb_tree_iterator<std::pair<unsigned int const,std::shared_ptr<PlayerViewMgr> > >::pointer v14; // rax
  std::_Rb_tree_iterator<std::pair<unsigned int const,std::shared_ptr<PlayerViewMgr> > >::pointer v15; // rax
  PlayerViewMgr *v16; // rax
  unsigned __int64 v17; // rax
  std::_Rb_tree_iterator<std::pair<unsigned int const,unsigned int> >::reference v18; // rax
  std::pair<unsigned int const,unsigned int> *v19; // rdx
  unsigned __int64 v20; // rax
  common::milog::MiLogStream *v21; // rax
  std::tuple_element<0,std::pair<unsigned int const,unsigned int> >::type *v22; // rsi
  unsigned __int64 v23; // rax
  unsigned __int64 TransferGuardComp; // rax
  unsigned __int64 v25; // rdx
  char v26; // [rsp+17h] [rbp-179h]
  char v27; // [rsp+18h] [rbp-178h]
  common::milog::MiLogStream *v28; // [rsp+18h] [rbp-178h]
  common::milog::MiLogStream *v29; // [rsp+18h] [rbp-178h]
  std::map<unsigned int,unsigned int>::iterator __for_begin; // [rsp+38h] [rbp-158h] BYREF
  std::map<unsigned int,unsigned int> *__for_range; // [rsp+40h] [rbp-150h]
  std::tuple_element<0,std::pair<unsigned int const,unsigned int> >::type *uid; // [rsp+48h] [rbp-148h]
  std::tuple_element<1,std::pair<unsigned int const,unsigned int> >::type *peer_id; // [rsp+50h] [rbp-140h]
  std::pair<unsigned int const,unsigned int> __in; // [rsp+58h] [rbp-138h] BYREF
  common::milog::MiLogStream v36; // [rsp+60h] [rbp-130h] BYREF
  char v37[272]; // [rsp+80h] [rbp-110h] BYREF
  Scene::onTimer::<lambda(Player&)> v38; // 0:esi.4,8:rdx.8

  v2 = (unsigned __int64)v37;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_2(224LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "5 48 4 8 now:3594 64 4 8 uid:3601 80 8 9 iter:3599 112 16 24 player_view_mgr_ptr:3616 144 48 24 "
                        "player_uid_peer_map:3634";
  *(_QWORD *)(v2 + 16) = Scene::onTimer;
  v4 = (_DWORD *)(v2 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = -234556943;
  v4[536862722] = 61956;
  v4[536862722] = -234881024;
  v4[536862723] = 62194;
  v4[536862724] = 62194;
  v4[536862726] = -202116109;
  *(_DWORD *)(v2 + 48) = now_ms / 0x3E8;
  if ( *(_BYTE *)(((unsigned __int64)&this->last_check_time_ >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->last_check_time_ >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4(&this->last_check_time_);
  }
  if ( this->last_check_time_ + 5 < *(_DWORD *)(v2 + 48) )
  {
    this->last_check_time_ = *(_DWORD *)(v2 + 48);
    *(std::map<unsigned int,ScenePlayerPeerInfo>::iterator *)(v2 + 80) = std::map<unsigned int,ScenePlayerPeerInfo>::begin(&this->peer_map_);
    while ( 1 )
    {
      __in = (std::pair<unsigned int const,unsigned int>)std::map<unsigned int,ScenePlayerPeerInfo>::end(&this->peer_map_)._M_node;
      if ( !std::operator!=(
              (const std::_Rb_tree_iterator<std::pair<unsigned int const,ScenePlayerPeerInfo> >::_Self *)(v2 + 80),
              (const std::_Rb_tree_iterator<std::pair<unsigned int const,ScenePlayerPeerInfo> >::_Self *)&__in) )
        break;
      v5 = std::_Rb_tree_iterator<std::pair<unsigned int const,ScenePlayerPeerInfo>>::operator->((const std::_Rb_tree_iterator<std::pair<unsigned int const,ScenePlayerPeerInfo> > *const)(v2 + 80));
      p_second = &v5->second;
      if ( *(_BYTE *)(((unsigned __int64)p_second >> 3) + 0x7FFF8000) != 0
        && (char)(((unsigned __int8)p_second & 7) + 3) >= *(_BYTE *)(((unsigned __int64)p_second >> 3) + 0x7FFF8000) )
      {
        __asan_report_load4(p_second);
      }
      *(_DWORD *)(v2 + 64) = v5->second.uid;
      v27 = 0;
      if ( Scene::getOwnerUid(this) == *(_DWORD *)(v2 + 64) )
        goto LABEL_17;
      Scene::findPlayer((const Scene *const)(v2 + 112), (__int64)this, *(_DWORD *)(v2 + 64));
      v27 = 1;
      if ( !std::operator==<Player>(0LL, (const std::shared_ptr<Player> *)(v2 + 112)) )
        goto LABEL_17;
      v7 = std::_Rb_tree_iterator<std::pair<unsigned int const,ScenePlayerPeerInfo>>::operator->((const std::_Rb_tree_iterator<std::pair<unsigned int const,ScenePlayerPeerInfo> > *const)(v2 + 80));
      p_enter_time = &v7->second.enter_time;
      if ( *(_BYTE *)(((unsigned __int64)p_enter_time >> 3) + 0x7FFF8000) != 0
        && (char)(((unsigned __int8)p_enter_time & 7) + 3) >= *(_BYTE *)(((unsigned __int64)p_enter_time >> 3)
                                                                       + 0x7FFF8000) )
      {
        __asan_report_load4(p_enter_time);
      }
      if ( v7->second.enter_time + 300 >= *(_DWORD *)(v2 + 48) )
LABEL_17:
        v26 = 0;
      else
        v26 = 1;
      if ( v27 )
        std::shared_ptr<Player>::~shared_ptr((std::shared_ptr<Player> *const)(v2 + 112));
      if ( v26 )
      {
        common::milog::MiLogStream::create(
          &v36,
          &common::milog::MiLogDefault::default_log_obj_,
          1u,
          "./src/scene/scene.cpp",
          "onTimer",
          3605);
        v9 = common::milog::MiLogStream::operator<<<char [24],(char *[24])0>(
               &v36,
               (const char (*)[24])"erase player peer, uid:");
        v10 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                v9,
                (const unsigned int *)(v2 + 64));
        v28 = common::milog::MiLogStream::operator<<<char [13],(char *[13])0>(v10, (const char (*)[13])" enter_time:");
        v11 = std::_Rb_tree_iterator<std::pair<unsigned int const,ScenePlayerPeerInfo>>::operator->((const std::_Rb_tree_iterator<std::pair<unsigned int const,ScenePlayerPeerInfo> > *const)(v2 + 80));
        v12 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v28, &v11->second.enter_time);
        v13 = common::milog::MiLogStream::operator<<<char [6],(char *[6])0>(v12, (const char (*)[6])" now:");
        common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v13, (const unsigned int *)(v2 + 48));
        common::milog::MiLogStream::~MiLogStream(&v36);
        *(std::map<unsigned int,ScenePlayerPeerInfo>::iterator *)(v2 + 80) = std::map<unsigned int,ScenePlayerPeerInfo>::erase[abi:cxx11](
                                                                               &this->peer_map_,
                                                                               *(std::map<unsigned int,ScenePlayerPeerInfo>::iterator *)(v2 + 80));
      }
      else
      {
        std::_Rb_tree_iterator<std::pair<unsigned int const,ScenePlayerPeerInfo>>::operator++(
          (std::_Rb_tree_iterator<std::pair<unsigned int const,ScenePlayerPeerInfo> > *const)(v2 + 80),
          0);
      }
    }
    *(std::map<unsigned int,std::shared_ptr<PlayerViewMgr>>::iterator *)(v2 + 80) = std::map<unsigned int,std::shared_ptr<PlayerViewMgr>>::begin(&this->player_view_mgr_map_);
    while ( 1 )
    {
      __in = (std::pair<unsigned int const,unsigned int>)std::map<unsigned int,std::shared_ptr<PlayerViewMgr>>::end(&this->player_view_mgr_map_)._M_node;
      if ( !std::operator!=(
              (const std::_Rb_tree_iterator<std::pair<unsigned int const,std::shared_ptr<PlayerViewMgr> > >::_Self *)(v2 + 80),
              (const std::_Rb_tree_iterator<std::pair<unsigned int const,std::shared_ptr<PlayerViewMgr> > >::_Self *)&__in) )
        break;
      v14 = std::_Rb_tree_iterator<std::pair<unsigned int const,std::shared_ptr<PlayerViewMgr>>>::operator->((const std::_Rb_tree_iterator<std::pair<unsigned int const,std::shared_ptr<PlayerViewMgr> > > *const)(v2 + 80));
      std::shared_ptr<PlayerViewMgr>::shared_ptr((std::shared_ptr<PlayerViewMgr> *const)(v2 + 112), &v14->second);
      if ( std::operator==<PlayerViewMgr>((const std::shared_ptr<PlayerViewMgr> *)(v2 + 112), 0LL) )
      {
        common::milog::MiLogStream::create(
          &v36,
          &common::milog::MiLogDefault::default_log_obj_,
          1u,
          "./src/scene/scene.cpp",
          "onTimer",
          3619);
        v29 = common::milog::MiLogStream::operator<<<char [46],(char *[46])0>(
                &v36,
                (const char (*)[46])"player_view_mgr_ptr is null, erase this, uid:");
        v15 = std::_Rb_tree_iterator<std::pair<unsigned int const,std::shared_ptr<PlayerViewMgr>>>::operator->((const std::_Rb_tree_iterator<std::pair<unsigned int const,std::shared_ptr<PlayerViewMgr> > > *const)(v2 + 80));
        common::milog::MiLogStream::operator<<<PlayerViewMgr,(PlayerViewMgr*)0>(v29, &v15->second);
        common::milog::MiLogStream::~MiLogStream(&v36);
        *(std::map<unsigned int,std::shared_ptr<PlayerViewMgr>>::iterator *)(v2 + 80) = std::map<unsigned int,std::shared_ptr<PlayerViewMgr>>::erase[abi:cxx11](
                                                                                          &this->player_view_mgr_map_,
                                                                                          *(std::map<unsigned int,std::shared_ptr<PlayerViewMgr>>::iterator *)(v2 + 80));
      }
      else
      {
        v16 = std::__shared_ptr_access<PlayerViewMgr,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<PlayerViewMgr,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 112));
        PlayerViewMgr::onTimer(v16);
        std::_Rb_tree_iterator<std::pair<unsigned int const,std::shared_ptr<PlayerViewMgr>>>::operator++((std::_Rb_tree_iterator<std::pair<unsigned int const,std::shared_ptr<PlayerViewMgr> > > *const)(v2 + 80));
      }
      std::shared_ptr<PlayerViewMgr>::~shared_ptr((std::shared_ptr<PlayerViewMgr> *const)(v2 + 112));
    }
  }
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_load8();
  v17 = (unsigned __int64)(this->_vptr_DescribalBase + 49);
  if ( *(_BYTE *)((v17 >> 3) + 0x7FFF8000) )
    v17 = __asan_report_load8();
  if ( (*(unsigned __int8 (__fastcall **)(Scene *const))v17)(this) )
  {
    std::map<unsigned int,unsigned int>::map((std::map<unsigned int,unsigned int> *const)(v2 + 144));
    v38.__player_uid_peer_map = (std::map<unsigned int,unsigned int> *)(v2 + 144);
    v38.__now = *(_DWORD *)(v2 + 48);
    std::function<ForeachPolicy ()(Player &)>::function<Scene::onTimer(unsigned long)::{lambda(Player &)#1},void,void>(
      (std::function<ForeachPolicy(Player&)> *const)&v36,
      v38);
    Scene::foreachPlayer(this, (std::function<ForeachPolicy(Player&)> *)&v36);
    std::function<ForeachPolicy ()(Player &)>::~function((std::function<ForeachPolicy(Player&)> *const)&v36);
    __for_range = (std::map<unsigned int,unsigned int> *)(v2 + 144);
    __for_begin._M_node = std::map<unsigned int,unsigned int>::begin((std::map<unsigned int,unsigned int> *const)(v2 + 144))._M_node;
    *(std::map<unsigned int,unsigned int>::iterator *)(v2 + 80) = std::map<unsigned int,unsigned int>::end((std::map<unsigned int,unsigned int> *const)(v2 + 144));
    while ( std::operator!=(
              &__for_begin,
              (const std::_Rb_tree_iterator<std::pair<unsigned int const,unsigned int> >::_Self *)(v2 + 80)) )
    {
      v18 = std::_Rb_tree_iterator<std::pair<unsigned int const,unsigned int>>::operator*(&__for_begin);
      v19 = v18;
      if ( ((unsigned __int8)v18 & 7) >= *(_BYTE *)(((unsigned __int64)v18 >> 3) + 0x7FFF8000)
        && *(_BYTE *)(((unsigned __int64)v18 >> 3) + 0x7FFF8000) != 0
        || *(_BYTE *)((((unsigned __int64)&v18->second + 3) >> 3) + 0x7FFF8000) != 0
        && (((unsigned __int8)v18 + 7) & 7) >= *(_BYTE *)((((unsigned __int64)&v18->second + 3) >> 3) + 0x7FFF8000) )
      {
        __asan_report_load_n(v18, 8LL);
      }
      __in = *v19;
      uid = std::get<0ul,unsigned int const,unsigned int>(&__in);
      peer_id = std::get<1ul,unsigned int const,unsigned int>(&__in);
      v20 = (unsigned __int64)std::map<unsigned int,unsigned long>::operator[](
                                &this->last_force_refresh_authority_time_map_,
                                uid);
      if ( *(_BYTE *)((v20 >> 3) + 0x7FFF8000) )
        v20 = __asan_report_load8();
      if ( now_ms - *(_QWORD *)v20 > 0xBB8 )
      {
        common::milog::MiLogStream::create(
          &v36,
          &common::milog::MiLogDefault::default_log_obj_,
          1u,
          "./src/scene/scene.cpp",
          "onTimer",
          3650);
        v21 = common::milog::MiLogStream::operator<<<char [48],(char *[48])0>(
                &v36,
                (const char (*)[48])"[AUTHORITY] force refrehs authority for player:");
        common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v21, uid);
        common::milog::MiLogStream::~MiLogStream(&v36);
        v22 = uid;
        v23 = (unsigned __int64)std::map<unsigned int,unsigned long>::operator[](
                                  &this->last_force_refresh_authority_time_map_,
                                  uid);
        if ( *(_BYTE *)((v23 >> 3) + 0x7FFF8000) )
          v23 = __asan_report_store8(v23, v22);
        *(_QWORD *)v23 = now_ms;
        if ( *(_BYTE *)(((unsigned __int64)peer_id >> 3) + 0x7FFF8000) != 0
          && (char)(((unsigned __int8)peer_id & 7) + 3) >= *(_BYTE *)(((unsigned __int64)peer_id >> 3) + 0x7FFF8000) )
        {
          __asan_report_load4(peer_id);
        }
        Scene::refreshAuthorityByPeerId(this, *peer_id);
      }
      std::_Rb_tree_iterator<std::pair<unsigned int const,unsigned int>>::operator++(&__for_begin);
    }
    std::map<unsigned int,unsigned int>::~map((std::map<unsigned int,unsigned int> *const)(v2 + 144));
  }
  Scene::clearDieCreatureRecord(this, now_ms);
  Scene::clearDeadEntity(this, *(_DWORD *)(v2 + 48));
  if ( *(_BYTE *)(((unsigned __int64)&this->last_clear_challenge_time_ >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->last_clear_challenge_time_ >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4(&this->last_clear_challenge_time_);
  }
  if ( this->last_clear_challenge_time_ + 30 < *(_DWORD *)(v2 + 48) )
  {
    this->last_clear_challenge_time_ = *(_DWORD *)(v2 + 48);
    Scene::clearUndeletedFinishedChallenge(this);
  }
  TransferGuardComp = (unsigned __int64)Scene::getTransferGuardComp(this);
  if ( *(_BYTE *)((TransferGuardComp >> 3) + 0x7FFF8000) )
    TransferGuardComp = __asan_report_load8();
  v25 = *(_QWORD *)TransferGuardComp + 40LL;
  if ( *(_BYTE *)((v25 >> 3) + 0x7FFF8000) )
    TransferGuardComp = __asan_report_load8();
  (*(void (__fastcall **)(unsigned __int64, _QWORD))v25)(TransferGuardComp, *(unsigned int *)(v2 + 48));
  if ( v37 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8010) = 0;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8018) = 0;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8018) = -168430091;
  }
};

// Line 3635: range 00000000159916E2-00000000159917FE
ForeachPolicy __cdecl Scene::onTimer(unsigned long)::{lambda(Player &)#1}::operator()(
        const Scene::onTimer::<lambda(Player&)> *const __closure,
        Player *player)
{
  uint32_t now; // ebx
  unsigned int v3; // ebx
  PlayerGmComp *GmComp; // rax
  std::map<unsigned int,unsigned int> *player_uid_peer_map; // rbx
  PlayerSceneComp *SceneComp; // rax
  unsigned int *v8; // rcx
  unsigned int *v9; // r8
  unsigned int Uid; // [rsp+18h] [rbp-18h] BYREF
  unsigned int v12[5]; // [rsp+1Ch] [rbp-14h] BYREF

  if ( *(_BYTE *)(((unsigned __int64)__closure >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)__closure >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4(__closure);
  }
  now = __closure->__now;
  v3 = now - Player::getLastRecvPingTime(player);
  Player::setIsValidForAuthority(player, v3 <= 2);
  if ( !Player::getIsValidForAuthority(player) )
  {
    GmComp = Player::getGmComp(player);
    if ( !PlayerGmComp::getIsForceAuthority(GmComp) )
    {
      if ( *(_BYTE *)(((unsigned __int64)&__closure->__player_uid_peer_map >> 3) + 0x7FFF8000) )
        __asan_report_load8();
      player_uid_peer_map = __closure->__player_uid_peer_map;
      SceneComp = Player::getSceneComp(player);
      v12[0] = PlayerSceneComp::getPeerId(SceneComp);
      Uid = Player::getUid(player);
      std::map<unsigned int,unsigned int>::emplace<unsigned int,unsigned int>(player_uid_peer_map, &Uid, v12, v8, v9);
    }
  }
  return 0;
};

// Line 3670: range 0000000015992354-00000000159924EE
void __cdecl Scene::notifyAllPlayerLocation(Scene *const this)
{
  unsigned __int64 v1; // rbx
  __int64 v2; // rax
  _DWORD *v3; // r12
  uint32_t SceneId; // eax
  char v5[192]; // [rsp+20h] [rbp-C0h] BYREF

  v1 = (unsigned __int64)v5;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_2(160LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "1 48 72 11 notify:3671";
  *(_QWORD *)(v1 + 16) = Scene::notifyAllPlayerLocation;
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = 61937;
  v3[536862723] = -218103808;
  v3[536862724] = -202116109;
  proto::ScenePlayerLocationNotify::ScenePlayerLocationNotify((proto::ScenePlayerLocationNotify *const)(v1 + 48));
  if ( Scene::fillScenePlayerLocationNotify(this, (proto::ScenePlayerLocationNotify *)(v1 + 48)) > 1 )
  {
    SceneId = Scene::getSceneId(this);
    proto::ScenePlayerLocationNotify::set_scene_id((proto::ScenePlayerLocationNotify *const)(v1 + 48), SceneId);
    Scene::notifyAllPlayer<proto::ScenePlayerLocationNotify>(this, (proto::ScenePlayerLocationNotify *)(v1 + 48), 0);
  }
  proto::ScenePlayerLocationNotify::~ScenePlayerLocationNotify((proto::ScenePlayerLocationNotify *const)(v1 + 48));
  if ( v5 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF800C) = 0LL;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v1 >> 3) + 0x7FFF8010) = -168430091;
  }
};

// Line 3681: range 000000001599281E-0000000015992EB5
uint32_t __cdecl Scene::fillScenePlayerLocationNotify(Scene *const this, proto::ScenePlayerLocationNotify *notify)
{
  unsigned __int64 v2; // r13
  __int64 v3; // rax
  _DWORD *v4; // r12
  GadgetVehicleComp *v5; // rax
  std::__shared_ptr_access<Gadget,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v6; // rax
  uint32_t EntityId; // eax
  std::__shared_ptr_access<Gadget,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v8; // rax
  const Vector3 *Position; // rax
  proto::Vector *v10; // rax
  std::__shared_ptr_access<Gadget,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v11; // rax
  const Vector3 *Rotation; // rax
  proto::Vector *v13; // rax
  std::__shared_ptr_access<Gadget,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v14; // rax
  float CurHp; // xmm0_4
  std::__shared_ptr_access<Gadget,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v16; // rax
  float MaxHp; // xmm0_4
  google::protobuf::RepeatedField<unsigned int> *v18; // rax
  uint32_t result; // eax
  Scene::fillScenePlayerLocationNotify::<lambda(Player&)> v20; // [rsp-20h] [rbp-1D0h]
  std::map<unsigned int,std::map<unsigned int,std::weak_ptr<Gadget>>>::iterator __for_begin; // [rsp+18h] [rbp-198h] BYREF
  std::map<unsigned int,std::map<unsigned int,std::weak_ptr<Gadget>>>::iterator __for_end; // [rsp+20h] [rbp-190h] BYREF
  std::map<unsigned int,std::weak_ptr<Gadget>>::iterator __for_begin_0; // [rsp+28h] [rbp-188h] BYREF
  std::map<unsigned int,std::weak_ptr<Gadget>>::iterator __for_end_0; // [rsp+30h] [rbp-180h] BYREF
  std::map<unsigned int,std::map<unsigned int,std::weak_ptr<Gadget>>> *__for_range; // [rsp+38h] [rbp-178h]
  std::pair<unsigned int const,std::map<unsigned int,std::weak_ptr<Gadget>> > *__in; // [rsp+40h] [rbp-170h]
  std::tuple_element<0,std::pair<unsigned int const,std::map<unsigned int,std::weak_ptr<Gadget>> > >::type *uid; // [rsp+48h] [rbp-168h]
  std::tuple_element<1,std::pair<unsigned int const,std::map<unsigned int,std::weak_ptr<Gadget>> > >::type *gadget_map; // [rsp+50h] [rbp-160h]
  std::map<unsigned int,std::weak_ptr<Gadget>> *__for_range_0; // [rsp+58h] [rbp-158h]
  std::pair<unsigned int const,std::weak_ptr<Gadget> > *v30; // [rsp+60h] [rbp-150h]
  std::tuple_element<0,std::pair<unsigned int const,std::weak_ptr<Gadget> > >::type *gadget_id; // [rsp+68h] [rbp-148h]
  std::tuple_element<1,std::pair<unsigned int const,std::weak_ptr<Gadget> > >::type *gadget_wtr; // [rsp+70h] [rbp-140h]
  proto::VehicleLocationInfo *vehicle_loc; // [rsp+78h] [rbp-138h]
  Scene::fillScenePlayerLocationNotify::<lambda(Player&)> __f; // [rsp+80h] [rbp-130h]
  std::function<ForeachPolicy(Player&)> p_func; // [rsp+A0h] [rbp-110h] BYREF
  char v36[240]; // [rsp+C0h] [rbp-F0h] BYREF

  v2 = (unsigned __int64)v36;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_2(192LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "4 48 4 17 player_count:3682 64 16 15 gadget_ptr:3702 96 16 16 vehicle_ptr:3707 128 24 12 uid_vec:3712";
  *(_QWORD *)(v2 + 16) = Scene::fillScenePlayerLocationNotify;
  v4 = (_DWORD *)(v2 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = -234556943;
  v4[536862722] = -219021312;
  v4[536862723] = -219021312;
  v4[536862724] = -218103808;
  v4[536862725] = -202116109;
  *(_DWORD *)(v2 + 48) = 0;
  __f.__notify = notify;
  __f.__player_count = (uint32_t *)(v2 + 48);
  __f.__this = this;
  v20.__this = this;
  v20.__player_count = (uint32_t *)(v2 + 48);
  v20.__notify = notify;
  std::function<ForeachPolicy ()(Player &)>::function<Scene::fillScenePlayerLocationNotify(proto::ScenePlayerLocationNotify &)::{lambda(Player &)#1},void,void>(
    &p_func,
    v20);
  Scene::foreachPlayer(this, &p_func);
  std::function<ForeachPolicy ()(Player &)>::~function(&p_func);
  __for_range = &this->player_vehicle_map_;
  __for_begin._M_node = std::map<unsigned int,std::map<unsigned int,std::weak_ptr<Gadget>>>::begin(&this->player_vehicle_map_)._M_node;
  __for_end._M_node = std::map<unsigned int,std::map<unsigned int,std::weak_ptr<Gadget>>>::end(&this->player_vehicle_map_)._M_node;
  while ( std::operator!=(&__for_begin, &__for_end) )
  {
    __in = std::_Rb_tree_iterator<std::pair<unsigned int const,std::map<unsigned int,std::weak_ptr<Gadget>>>>::operator*(&__for_begin);
    uid = std::get<0ul,unsigned int const,std::map<unsigned int,std::weak_ptr<Gadget>>>(__in);
    gadget_map = std::get<1ul,unsigned int const,std::map<unsigned int,std::weak_ptr<Gadget>>>(__in);
    __for_range_0 = gadget_map;
    __for_begin_0._M_node = std::map<unsigned int,std::weak_ptr<Gadget>>::begin(gadget_map)._M_node;
    __for_end_0._M_node = std::map<unsigned int,std::weak_ptr<Gadget>>::end(__for_range_0)._M_node;
    while ( std::operator!=(&__for_begin_0, &__for_end_0) )
    {
      v30 = std::_Rb_tree_iterator<std::pair<unsigned int const,std::weak_ptr<Gadget>>>::operator*(&__for_begin_0);
      gadget_id = std::get<0ul,unsigned int const,std::weak_ptr<Gadget>>(v30);
      gadget_wtr = std::get<1ul,unsigned int const,std::weak_ptr<Gadget>>(v30);
      std::weak_ptr<Gadget>::lock((const std::weak_ptr<Gadget> *const)(v2 + 64));
      if ( !std::operator==<Gadget>(0LL, (const std::shared_ptr<Gadget> *)(v2 + 64)) )
      {
        std::__shared_ptr_access<Gadget,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Gadget,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 64));
        EcsBase<Gadget,GadgetCompBase,28u>::findComp<GadgetVehicleComp>((const EcsBase<Gadget,GadgetCompBase,28> *const)(v2 + 96));
        if ( !std::operator==<GadgetVehicleComp>(0LL, (const std::shared_ptr<GadgetVehicleComp> *)(v2 + 96)) )
        {
          std::vector<unsigned int>::vector((std::vector<unsigned int> *const)(v2 + 128));
          v5 = std::__shared_ptr_access<GadgetVehicleComp,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<GadgetVehicleComp,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 96));
          GadgetVehicleComp::getInVehicleUidVec(v5, (std::vector<unsigned int> *)(v2 + 128));
          vehicle_loc = proto::ScenePlayerLocationNotify::add_vehicle_loc_list(notify);
          if ( *(_BYTE *)(((unsigned __int64)uid >> 3) + 0x7FFF8000) != 0
            && (char)(((unsigned __int8)uid & 7) + 3) >= *(_BYTE *)(((unsigned __int64)uid >> 3) + 0x7FFF8000) )
          {
            __asan_report_load4(uid);
          }
          proto::VehicleLocationInfo::set_owner_uid(vehicle_loc, *uid);
          if ( *(_BYTE *)(((unsigned __int64)gadget_id >> 3) + 0x7FFF8000) != 0
            && (char)(((unsigned __int8)gadget_id & 7) + 3) >= *(_BYTE *)(((unsigned __int64)gadget_id >> 3) + 0x7FFF8000) )
          {
            __asan_report_load4(gadget_id);
          }
          proto::VehicleLocationInfo::set_gadget_id(vehicle_loc, *gadget_id);
          v6 = std::__shared_ptr_access<Gadget,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Gadget,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 64));
          EntityId = Entity::getEntityId((const Entity *const)v6);
          proto::VehicleLocationInfo::set_entity_id(vehicle_loc, EntityId);
          v8 = std::__shared_ptr_access<Gadget,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Gadget,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 64));
          Position = Entity::getPosition((const Entity *const)v8);
          Vector3::operator proto::Vector((proto::Vector *)&p_func, Position);
          v10 = proto::VehicleLocationInfo::mutable_pos(vehicle_loc);
          proto::Vector::operator=(v10, (proto::Vector *)&p_func);
          proto::Vector::~Vector((proto::Vector *const)&p_func);
          v11 = std::__shared_ptr_access<Gadget,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Gadget,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 64));
          Rotation = Entity::getRotation((const Entity *const)v11);
          Vector3::operator proto::Vector((proto::Vector *)&p_func, Rotation);
          v13 = proto::VehicleLocationInfo::mutable_rot(vehicle_loc);
          proto::Vector::operator=(v13, (proto::Vector *)&p_func);
          proto::Vector::~Vector((proto::Vector *const)&p_func);
          v14 = std::__shared_ptr_access<Gadget,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Gadget,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 64));
          CurHp = Creature::getCurHp(v14);
          proto::VehicleLocationInfo::set_cur_hp(vehicle_loc, CurHp);
          v16 = std::__shared_ptr_access<Gadget,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Gadget,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 64));
          MaxHp = Creature::getMaxHp(v16);
          proto::VehicleLocationInfo::set_max_hp(vehicle_loc, MaxHp);
          v18 = proto::VehicleLocationInfo::mutable_uid_list(vehicle_loc);
          common::tools::MiscUtils::vectorToRepeated<unsigned int,unsigned int>(
            (const std::vector<unsigned int> *)(v2 + 128),
            v18);
          std::vector<unsigned int>::~vector((std::vector<unsigned int> *const)(v2 + 128));
        }
        std::shared_ptr<GadgetVehicleComp>::~shared_ptr((std::shared_ptr<GadgetVehicleComp> *const)(v2 + 96));
      }
      std::shared_ptr<Gadget>::~shared_ptr((std::shared_ptr<Gadget> *const)(v2 + 64));
      std::_Rb_tree_iterator<std::pair<unsigned int const,std::weak_ptr<Gadget>>>::operator++(&__for_begin_0);
    }
    std::_Rb_tree_iterator<std::pair<unsigned int const,std::map<unsigned int,std::weak_ptr<Gadget>>>>::operator++(&__for_begin);
  }
  result = *(_DWORD *)(v2 + 48);
  if ( v36 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8010) = 0LL;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 3683: range 00000000159924F0-000000001599281C
ForeachPolicy __cdecl Scene::fillScenePlayerLocationNotify(proto::ScenePlayerLocationNotify &)::{lambda(Player &)#1}::operator()(
        const Scene::fillScenePlayerLocationNotify::<lambda(Player&)> *const __closure,
        Player *player)
{
  unsigned __int64 v2; // rbx
  __int64 v3; // rax
  unsigned __int64 v4; // r13
  Scene *this; // r14
  uint32_t Uid; // edx
  std::__shared_ptr_access<ScenePlayerLocation,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v8; // rax
  proto::Vector *v9; // rax
  std::__shared_ptr_access<ScenePlayerLocation,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v10; // rax
  proto::Vector *v11; // rax
  unsigned __int64 player_count; // rax
  ForeachPolicy result; // eax
  proto::PlayerLocationInfo *player_loc; // [rsp+18h] [rbp-98h]
  proto::Vector from; // [rsp+20h] [rbp-90h] BYREF
  char v16[112]; // [rsp+40h] [rbp-70h] BYREF

  v2 = (unsigned __int64)v16;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_0(64LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "1 32 16 17 location_ptr:3685";
  *(_QWORD *)(v2 + 16) = Scene::fillScenePlayerLocationNotify(proto::ScenePlayerLocationNotify &)::{lambda(Player &)#1}::operator();
  v4 = v2 >> 3;
  *(_DWORD *)(v4 + 2147450880) = -235802127;
  *(_DWORD *)(v4 + 2147450884) = -202178560;
  if ( *(_BYTE *)(((unsigned __int64)&__closure->__this >> 3) + 0x7FFF8000) )
    __asan_report_load8();
  this = __closure->__this;
  Player::getUid(player);
  Scene::getPlayerLocation((Scene *const)(v2 + 32), (uint32_t)this);
  if ( Player::isConnected(player)
    && std::operator!=<ScenePlayerLocation>((const std::shared_ptr<ScenePlayerLocation> *)(v2 + 32), 0LL) )
  {
    if ( *(_BYTE *)(((unsigned __int64)__closure >> 3) + 0x7FFF8000) )
      __asan_report_load8();
    player_loc = proto::ScenePlayerLocationNotify::add_player_loc_list(__closure->__notify);
    Uid = Player::getUid(player);
    proto::PlayerLocationInfo::set_uid(player_loc, Uid);
    v8 = std::__shared_ptr_access<ScenePlayerLocation,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<ScenePlayerLocation,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 32));
    Vector3::operator proto::Vector(&from, &v8->cur_pos);
    v9 = proto::PlayerLocationInfo::mutable_pos(player_loc);
    proto::Vector::operator=(v9, &from);
    proto::Vector::~Vector(&from);
    v10 = std::__shared_ptr_access<ScenePlayerLocation,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<ScenePlayerLocation,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 32));
    Vector3::operator proto::Vector(&from, &v10->cur_rot);
    v11 = proto::PlayerLocationInfo::mutable_rot(player_loc);
    proto::Vector::operator=(v11, &from);
    proto::Vector::~Vector(&from);
    if ( *(_BYTE *)(((unsigned __int64)&__closure->__player_count >> 3) + 0x7FFF8000) )
      __asan_report_load8();
    player_count = (unsigned __int64)__closure->__player_count;
    if ( *(_BYTE *)((player_count >> 3) + 0x7FFF8000) != 0
      && (char)((player_count & 7) + 3) >= *(_BYTE *)((player_count >> 3) + 0x7FFF8000) )
    {
      player_count = __asan_report_load4(__closure->__player_count);
    }
    ++*(_DWORD *)player_count;
  }
  std::shared_ptr<ScenePlayerLocation>::~shared_ptr((std::shared_ptr<ScenePlayerLocation> *const)(v2 + 32));
  result = FOREACH_CONTINUE;
  if ( v16 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 3731: range 0000000015992EB6-0000000015993177
void __cdecl Scene::notifyAllPlayerInfo(Scene *const this)
{
  unsigned __int64 v1; // r13
  __int64 v2; // rax
  _DWORD *v3; // rbx
  Player *v4; // rax
  proto::ScenePlayerInfo *v5; // rax
  std::map<unsigned int,std::weak_ptr<Player>>::iterator __for_begin; // [rsp+10h] [rbp-130h] BYREF
  std::map<unsigned int,std::weak_ptr<Player>>::iterator __for_end; // [rsp+18h] [rbp-128h] BYREF
  std::map<unsigned int,std::weak_ptr<Player>> *__for_range; // [rsp+20h] [rbp-120h]
  std::pair<unsigned int const,std::weak_ptr<Player> > *__in; // [rsp+28h] [rbp-118h]
  std::tuple_element<0,std::pair<unsigned int const,std::weak_ptr<Player> > >::type *_; // [rsp+30h] [rbp-110h]
  std::tuple_element<1,std::pair<unsigned int const,std::weak_ptr<Player> > >::type *player_wtr; // [rsp+38h] [rbp-108h]
  proto::ScenePlayerInfo from; // [rsp+40h] [rbp-100h] BYREF
  char v13[192]; // [rsp+80h] [rbp-C0h] BYREF

  v1 = (unsigned __int64)v13;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_2(160LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "2 48 16 15 player_ptr:3735 80 48 11 notify:3732";
  *(_QWORD *)(v1 + 16) = Scene::notifyAllPlayerInfo;
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = 61937;
  v3[536862722] = 62194;
  v3[536862724] = -202116109;
  proto::ScenePlayerInfoNotify::ScenePlayerInfoNotify((proto::ScenePlayerInfoNotify *const)(v1 + 80));
  __for_range = &this->player_map_;
  __for_begin._M_node = std::map<unsigned int,std::weak_ptr<Player>>::begin(&this->player_map_)._M_node;
  __for_end._M_node = std::map<unsigned int,std::weak_ptr<Player>>::end(&this->player_map_)._M_node;
  while ( std::operator!=(&__for_begin, &__for_end) )
  {
    __in = std::_Rb_tree_iterator<std::pair<unsigned int const,std::weak_ptr<Player>>>::operator*(&__for_begin);
    _ = std::get<0ul,unsigned int const,std::weak_ptr<Player>>(__in);
    player_wtr = std::get<1ul,unsigned int const,std::weak_ptr<Player>>(__in);
    std::weak_ptr<Player>::lock((const std::weak_ptr<Player> *const)(v1 + 48));
    if ( std::operator!=<Player>((const std::shared_ptr<Player> *)(v1 + 48), 0LL) )
    {
      v4 = std::__shared_ptr_access<Player,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Player,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v1 + 48));
      Player::getScenePlayerInfo(&from, v4);
      v5 = proto::ScenePlayerInfoNotify::add_player_info_list((proto::ScenePlayerInfoNotify *const)(v1 + 80));
      proto::ScenePlayerInfo::operator=(v5, &from);
      proto::ScenePlayerInfo::~ScenePlayerInfo(&from);
    }
    std::shared_ptr<Player>::~shared_ptr((std::shared_ptr<Player> *const)(v1 + 48));
    std::_Rb_tree_iterator<std::pair<unsigned int const,std::weak_ptr<Player>>>::operator++(&__for_begin);
  }
  Scene::notifyAllPlayer<proto::ScenePlayerInfoNotify>(this, (proto::ScenePlayerInfoNotify *)(v1 + 80), 0);
  proto::ScenePlayerInfoNotify::~ScenePlayerInfoNotify((proto::ScenePlayerInfoNotify *const)(v1 + 80));
  if ( v13 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_DWORD *)((v1 >> 3) + 0x7FFF8008) = 0;
    *(_DWORD *)((v1 >> 3) + 0x7FFF8010) = 0;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v1 >> 3) + 0x7FFF8010) = -168430091;
  }
};

// Line 3746: range 0000000015993178-000000001599378C
void __cdecl Scene::notifyAllTeamEntity(Scene *const this)
{
  unsigned __int64 v1; // r13
  __int64 v2; // rax
  _DWORD *v3; // r12
  Player *v4; // rax
  std::__shared_ptr_access<Player,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v5; // rax
  std::shared_ptr<AvatarTeamEntity> *v6; // r8
  uint32_t SceneId; // eax
  std::tuple_element<0,std::pair<unsigned int const,std::shared_ptr<AvatarTeamEntity> > >::type v8; // r14d
  std::__shared_ptr_access<Player,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v9; // rax
  char v10; // al
  std::__shared_ptr_access<AvatarTeamEntity,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v11; // r14
  proto::TeamEntityInfo *v12; // rax
  Player *v13; // rax
  unsigned int __args_0; // [rsp+1Ch] [rbp-1B4h] BYREF
  std::map<unsigned int,std::weak_ptr<Player>>::iterator __for_begin_0; // [rsp+20h] [rbp-1B0h] BYREF
  std::map<unsigned int,std::weak_ptr<Player>>::iterator __for_end_0; // [rsp+28h] [rbp-1A8h] BYREF
  std::map<unsigned int,std::weak_ptr<Player>>::iterator __for_begin; // [rsp+30h] [rbp-1A0h] BYREF
  std::map<unsigned int,std::weak_ptr<Player>>::iterator __for_end; // [rsp+38h] [rbp-198h] BYREF
  std::map<unsigned int,std::weak_ptr<Player>> *__for_range; // [rsp+40h] [rbp-190h]
  std::map<unsigned int,std::weak_ptr<Player>> *__for_range_0; // [rsp+48h] [rbp-188h]
  std::pair<unsigned int const,std::weak_ptr<Player> > *v21; // [rsp+50h] [rbp-180h]
  std::tuple_element<0,std::pair<unsigned int const,std::weak_ptr<Player> > >::type *__0; // [rsp+58h] [rbp-178h]
  std::tuple_element<1,std::pair<unsigned int const,std::weak_ptr<Player> > >::type *player_wtr_0; // [rsp+60h] [rbp-170h]
  std::map<unsigned int,std::shared_ptr<AvatarTeamEntity>> *__for_range_1; // [rsp+68h] [rbp-168h]
  std::pair<unsigned int const,std::shared_ptr<AvatarTeamEntity> > *v25; // [rsp+70h] [rbp-160h]
  std::tuple_element<0,std::pair<unsigned int const,std::shared_ptr<AvatarTeamEntity> > >::type *uid; // [rsp+78h] [rbp-158h]
  std::tuple_element<1,std::pair<unsigned int const,std::shared_ptr<AvatarTeamEntity> > >::type *team_ptr; // [rsp+80h] [rbp-150h]
  std::pair<unsigned int const,std::weak_ptr<Player> > *__in; // [rsp+88h] [rbp-148h]
  std::tuple_element<0,std::pair<unsigned int const,std::weak_ptr<Player> > >::type *_; // [rsp+90h] [rbp-140h]
  std::tuple_element<1,std::pair<unsigned int const,std::weak_ptr<Player> > >::type *player_wtr; // [rsp+98h] [rbp-138h]
  char v31[304]; // [rsp+A0h] [rbp-130h] BYREF

  v1 = (unsigned __int64)v31;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_2(256LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "4 32 16 15 player_ptr:3750 64 16 15 player_ptr:3760 96 48 13 team_map:3747 176 48 11 notify:3765";
  *(_QWORD *)(v1 + 16) = Scene::notifyAllTeamEntity;
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -219021312;
  v3[536862722] = -219021312;
  v3[536862724] = -219021312;
  v3[536862725] = 62194;
  v3[536862727] = -202116109;
  std::map<unsigned int,std::shared_ptr<AvatarTeamEntity>>::map((std::map<unsigned int,std::shared_ptr<AvatarTeamEntity>> *const)(v1 + 96));
  __for_range = &this->player_map_;
  __for_begin._M_node = std::map<unsigned int,std::weak_ptr<Player>>::begin(&this->player_map_)._M_node;
  __for_end._M_node = std::map<unsigned int,std::weak_ptr<Player>>::end(&this->player_map_)._M_node;
  while ( std::operator!=(&__for_begin, &__for_end) )
  {
    __in = std::_Rb_tree_iterator<std::pair<unsigned int const,std::weak_ptr<Player>>>::operator*(&__for_begin);
    _ = std::get<0ul,unsigned int const,std::weak_ptr<Player>>(__in);
    player_wtr = std::get<1ul,unsigned int const,std::weak_ptr<Player>>(__in);
    std::weak_ptr<Player>::lock((const std::weak_ptr<Player> *const)(v1 + 32));
    if ( !std::operator==<Player>(0LL, (const std::shared_ptr<Player> *)(v1 + 32)) )
    {
      v4 = std::__shared_ptr_access<Player,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Player,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v1 + 32));
      Player::getAvatarComp(v4);
      PlayerAvatarComp::getTeamEntity((const PlayerAvatarComp *const)(v1 + 64));
      v5 = std::__shared_ptr_access<Player,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Player,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v1 + 32));
      __args_0 = Player::getUid(v5);
      std::map<unsigned int,std::shared_ptr<AvatarTeamEntity>>::emplace<unsigned int,std::shared_ptr<AvatarTeamEntity>&>(
        (std::map<unsigned int,std::shared_ptr<AvatarTeamEntity>> *const)(v1 + 96),
        &__args_0,
        (std::shared_ptr<AvatarTeamEntity> *)(v1 + 64),
        &__args_0,
        v6);
      std::shared_ptr<AvatarTeamEntity>::~shared_ptr((std::shared_ptr<AvatarTeamEntity> *const)(v1 + 64));
    }
    std::shared_ptr<Player>::~shared_ptr((std::shared_ptr<Player> *const)(v1 + 32));
    std::_Rb_tree_iterator<std::pair<unsigned int const,std::weak_ptr<Player>>>::operator++(&__for_begin);
  }
  __for_range_0 = &this->player_map_;
  __for_begin_0._M_node = std::map<unsigned int,std::weak_ptr<Player>>::begin(&this->player_map_)._M_node;
  __for_end_0._M_node = std::map<unsigned int,std::weak_ptr<Player>>::end(__for_range_0)._M_node;
  while ( std::operator!=(&__for_begin_0, &__for_end_0) )
  {
    v21 = std::_Rb_tree_iterator<std::pair<unsigned int const,std::weak_ptr<Player>>>::operator*(&__for_begin_0);
    __0 = std::get<0ul,unsigned int const,std::weak_ptr<Player>>(v21);
    player_wtr_0 = std::get<1ul,unsigned int const,std::weak_ptr<Player>>(v21);
    std::weak_ptr<Player>::lock((const std::weak_ptr<Player> *const)(v1 + 64));
    if ( !std::operator==<Player>(0LL, (const std::shared_ptr<Player> *)(v1 + 64)) )
    {
      proto::SyncTeamEntityNotify::SyncTeamEntityNotify((proto::SyncTeamEntityNotify *const)(v1 + 176));
      SceneId = Scene::getSceneId(this);
      proto::SyncTeamEntityNotify::set_scene_id((proto::SyncTeamEntityNotify *const)(v1 + 176), SceneId);
      __for_range_1 = (std::map<unsigned int,std::shared_ptr<AvatarTeamEntity>> *)(v1 + 96);
      __for_begin._M_node = std::map<unsigned int,std::shared_ptr<AvatarTeamEntity>>::begin((std::map<unsigned int,std::shared_ptr<AvatarTeamEntity>> *const)(v1 + 96))._M_node;
      __for_end._M_node = std::map<unsigned int,std::shared_ptr<AvatarTeamEntity>>::end(__for_range_1)._M_node;
      while ( std::operator!=(
                (const std::_Rb_tree_iterator<std::pair<unsigned int const,std::shared_ptr<AvatarTeamEntity> > >::_Self *)&__for_begin,
                (const std::_Rb_tree_iterator<std::pair<unsigned int const,std::shared_ptr<AvatarTeamEntity> > >::_Self *)&__for_end) )
      {
        v25 = std::_Rb_tree_iterator<std::pair<unsigned int const,std::shared_ptr<AvatarTeamEntity>>>::operator*((const std::_Rb_tree_iterator<std::pair<unsigned int const,std::shared_ptr<AvatarTeamEntity> > > *const)&__for_begin);
        uid = std::get<0ul,unsigned int const,std::shared_ptr<AvatarTeamEntity>>(v25);
        team_ptr = std::get<1ul,unsigned int const,std::shared_ptr<AvatarTeamEntity>>(v25);
        if ( !std::operator!=<AvatarTeamEntity>(team_ptr, 0LL) )
          goto LABEL_19;
        if ( *(_BYTE *)(((unsigned __int64)uid >> 3) + 0x7FFF8000) != 0
          && (char)(((unsigned __int8)uid & 7) + 3) >= *(_BYTE *)(((unsigned __int64)uid >> 3) + 0x7FFF8000) )
        {
          __asan_report_load4(uid);
        }
        v8 = *uid;
        v9 = std::__shared_ptr_access<Player,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Player,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v1 + 64));
        if ( v8 == Player::getUid(v9) )
LABEL_19:
          v10 = 0;
        else
          v10 = 1;
        if ( v10 )
        {
          v11 = std::__shared_ptr_access<AvatarTeamEntity,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<AvatarTeamEntity,(__gnu_cxx::_Lock_policy)2,false,false> *const)team_ptr);
          v12 = proto::SyncTeamEntityNotify::add_team_entity_info_list((proto::SyncTeamEntityNotify *const)(v1 + 176));
          AvatarTeamEntity::toClient(v11, v12);
        }
        std::_Rb_tree_iterator<std::pair<unsigned int const,std::shared_ptr<AvatarTeamEntity>>>::operator++((std::_Rb_tree_iterator<std::pair<unsigned int const,std::shared_ptr<AvatarTeamEntity> > > *const)&__for_begin);
      }
      v13 = std::__shared_ptr_access<Player,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Player,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v1 + 64));
      Player::sendProto(v13, (const google::protobuf::Message *)(v1 + 176));
      proto::SyncTeamEntityNotify::~SyncTeamEntityNotify((proto::SyncTeamEntityNotify *const)(v1 + 176));
    }
    std::shared_ptr<Player>::~shared_ptr((std::shared_ptr<Player> *const)(v1 + 64));
    std::_Rb_tree_iterator<std::pair<unsigned int const,std::weak_ptr<Player>>>::operator++(&__for_begin_0);
  }
  std::map<unsigned int,std::shared_ptr<AvatarTeamEntity>>::~map((std::map<unsigned int,std::shared_ptr<AvatarTeamEntity>> *const)(v1 + 96));
  if ( v31 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_DWORD *)((v1 >> 3) + 0x7FFF8008) = 0;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8010) = 0LL;
    *(_DWORD *)((v1 >> 3) + 0x7FFF801C) = 0;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
  }
};

// Line 3779: range 000000001599378E-0000000015993905
void __cdecl Scene::notifyDelTeamEntity(Scene *const this, uint32_t entity_id)
{
  unsigned __int64 v2; // rbx
  __int64 v3; // rax
  _DWORD *v4; // r12
  uint32_t SceneId; // eax
  char v6[160]; // [rsp+10h] [rbp-A0h] BYREF

  v2 = (unsigned __int64)v6;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_1(128LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "1 48 48 11 notify:3780";
  *(_QWORD *)(v2 + 16) = Scene::notifyDelTeamEntity;
  v4 = (_DWORD *)(v2 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = 61937;
  v4[536862723] = -202116109;
  proto::DelTeamEntityNotify::DelTeamEntityNotify((proto::DelTeamEntityNotify *const)(v2 + 48));
  proto::DelTeamEntityNotify::add_del_entity_id_list((proto::DelTeamEntityNotify *const)(v2 + 48), entity_id);
  SceneId = Scene::getSceneId(this);
  proto::DelTeamEntityNotify::set_scene_id((proto::DelTeamEntityNotify *const)(v2 + 48), SceneId);
  Scene::notifyAllPlayer<proto::DelTeamEntityNotify>(this, (proto::DelTeamEntityNotify *)(v2 + 48), 0);
  proto::DelTeamEntityNotify::~DelTeamEntityNotify((proto::DelTeamEntityNotify *const)(v2 + 48));
  if ( v6 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF800C) = 0;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
};

// Line 3787: range 0000000015993906-0000000015993E39
MPLevelEntityPtr __cdecl Scene::getOrCreateMPLevelEntity(Scene *const this)
{
  Scene *v1; // rsi
  unsigned __int64 v2; // r12
  __int64 v3; // rax
  _DWORD *v4; // r13
  MPLevelEntityPtr result; // rax
  Entity *v6; // r14
  uint32_t v7; // eax
  Entity *v8; // r14
  std::__shared_ptr_access<MPLevelEntity,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v9; // r14
  std::__shared_ptr_access<Player,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v10; // rax
  uint32_t Uid; // edx
  uint32_t PeerId; // eax
  Entity *v13; // rdx
  MPLevelEntity *v14; // rax
  std::__shared_ptr_access<MPLevelEntity,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v15; // rax
  common::milog::MiLogStream v16; // [rsp+10h] [rbp-B0h] BYREF
  char v17[144]; // [rsp+30h] [rbp-90h] BYREF

  v2 = (unsigned __int64)v17;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_1(96LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "2 32 16 24 mp_level_entity_ptr:3792 64 16 15 player_ptr:3800";
  *(_QWORD *)(v2 + 16) = Scene::getOrCreateMPLevelEntity;
  v4 = (_DWORD *)(v2 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = -219021312;
  v4[536862722] = -202178560;
  if ( std::operator!=<MPLevelEntity>(&v1->mp_level_entity_ptr_, 0LL) )
  {
    std::shared_ptr<MPLevelEntity>::shared_ptr((std::shared_ptr<MPLevelEntity> *const)this, &v1->mp_level_entity_ptr_);
  }
  else
  {
    common::tools::perf::make_shared<MPLevelEntity>();
    if ( std::operator==<MPLevelEntity>((const std::shared_ptr<MPLevelEntity> *)(v2 + 32), 0LL) )
    {
      common::milog::MiLogStream::create(
        &v16,
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/scene/scene.cpp",
        "getOrCreateMPLevelEntity",
        3795);
      common::milog::MiLogStream::operator<<<char [28],(char *[28])0>(
        &v16,
        (const char (*)[28])"create MPLevelEntity failed");
      common::milog::MiLogStream::~MiLogStream(&v16);
      std::shared_ptr<MPLevelEntity>::shared_ptr((std::shared_ptr<MPLevelEntity> *const)this, 0LL);
    }
    else
    {
      v6 = (Entity *)std::__shared_ptr_access<MPLevelEntity,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<MPLevelEntity,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 32));
      v7 = Scene::genNewEntityId(v1, PROT_ENTITY_MP_LEVEL);
      Entity::setEntityId(v6, v7);
      v8 = (Entity *)std::__shared_ptr_access<MPLevelEntity,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<MPLevelEntity,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 32));
      std::enable_shared_from_this<Scene>::shared_from_this((std::enable_shared_from_this<Scene> *const)(v2 + 64));
      Entity::setScene(v8, (ScenePtr *)(v2 + 64));
      std::shared_ptr<Scene>::~shared_ptr((std::shared_ptr<Scene> *const)(v2 + 64));
      Scene::getHostPlayer((const Scene *const)(v2 + 64));
      if ( std::operator==<Player>(0LL, (const std::shared_ptr<Player> *)(v2 + 64)) )
      {
        common::milog::MiLogStream::create(
          &v16,
          &common::milog::MiLogDefault::default_log_obj_,
          3u,
          "./src/scene/scene.cpp",
          "getOrCreateMPLevelEntity",
          3803);
        common::milog::MiLogStream::operator<<<char [23],(char *[23])0>(
          &v16,
          (const char (*)[23])"host palyer is nullptr");
        common::milog::MiLogStream::~MiLogStream(&v16);
        std::shared_ptr<MPLevelEntity>::shared_ptr((std::shared_ptr<MPLevelEntity> *const)this, 0LL);
      }
      else
      {
        v9 = std::__shared_ptr_access<MPLevelEntity,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<MPLevelEntity,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 32));
        v10 = std::__shared_ptr_access<Player,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Player,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 64));
        Uid = Player::getUid(v10);
        PeerId = Scene::getPeerId(v1, Uid);
        Creature::setAuthorityPeerId(v9, PeerId);
        v13 = (Entity *)std::__shared_ptr_access<MPLevelEntity,(__gnu_cxx::_Lock_policy)2,false,false>::operator*((const std::__shared_ptr_access<MPLevelEntity,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 32));
        if ( Scene::addGridlessEntity(v1, v13) )
        {
          common::milog::MiLogStream::create(
            &v16,
            &common::milog::MiLogDefault::default_log_obj_,
            3u,
            "./src/scene/scene.cpp",
            "getOrCreateMPLevelEntity",
            3809);
          common::milog::MiLogStream::operator<<<char [27],(char *[27])0>(&v16, (const char (*)[27])off_258DF460);
          common::milog::MiLogStream::~MiLogStream(&v16);
          std::shared_ptr<MPLevelEntity>::shared_ptr((std::shared_ptr<MPLevelEntity> *const)this, 0LL);
        }
        else
        {
          v14 = std::__shared_ptr_access<MPLevelEntity,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<MPLevelEntity,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 32));
          if ( MPLevelEntity::initAbility(v14) )
          {
            common::milog::MiLogStream::create(
              &v16,
              &common::milog::MiLogDefault::default_log_obj_,
              3u,
              "./src/scene/scene.cpp",
              "getOrCreateMPLevelEntity",
              3814);
            common::milog::MiLogStream::operator<<<char [19],(char *[19])0>(
              &v16,
              (const char (*)[19])"initAbility failed");
            common::milog::MiLogStream::~MiLogStream(&v16);
            std::shared_ptr<MPLevelEntity>::shared_ptr((std::shared_ptr<MPLevelEntity> *const)this, 0LL);
          }
          else
          {
            std::shared_ptr<MPLevelEntity>::operator=(
              &v1->mp_level_entity_ptr_,
              (const std::shared_ptr<MPLevelEntity> *)(v2 + 32));
            v15 = std::__shared_ptr_access<MPLevelEntity,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<MPLevelEntity,(__gnu_cxx::_Lock_policy)2,false,false> *const)&v1->mp_level_entity_ptr_);
            Creature::calcProp(v15);
            std::shared_ptr<MPLevelEntity>::shared_ptr(
              (std::shared_ptr<MPLevelEntity> *const)this,
              &v1->mp_level_entity_ptr_);
          }
        }
      }
      std::shared_ptr<Player>::~shared_ptr((std::shared_ptr<Player> *const)(v2 + 64));
    }
    std::shared_ptr<MPLevelEntity>::~shared_ptr((std::shared_ptr<MPLevelEntity> *const)(v2 + 32));
  }
  if ( v17 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8008) = 0;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8008) = -168430091;
  }
  result._M_ptr = (std::__shared_ptr<MPLevelEntity,(__gnu_cxx::_Lock_policy)2>::element_type *)this;
  return result;
};

// Line 3823: range 0000000015993E3A-000000001599425D
int32_t __cdecl Scene::fillSceneDataNotify(Scene *const this, proto::SceneDataNotify *notify)
{
  unsigned __int64 v2; // rbx
  __int64 v3; // rax
  _DWORD *v4; // r12
  int32_t v5; // r14d
  std::__shared_ptr_access<SceneEntity,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v6; // rax
  __gnu_cxx::__normal_iterator<unsigned int*,std::vector<unsigned int> >::reference v7; // rax
  google::protobuf::uint32 *v8; // rdx
  int32_t result; // eax
  std::vector<std::string>::const_iterator __for_begin; // [rsp+18h] [rbp-E8h] BYREF
  std::vector<std::string>::const_iterator __for_end; // [rsp+20h] [rbp-E0h] BYREF
  const data::SceneExcelConfig *scene_config_ptr; // [rsp+28h] [rbp-D8h]
  const std::vector<std::string> *level_config_vec; // [rsp+30h] [rbp-D0h]
  const std::vector<std::string> *__for_range; // [rsp+38h] [rbp-C8h]
  std::vector<unsigned int> *__for_range_0; // [rsp+40h] [rbp-C0h]
  const std::string *name; // [rsp+48h] [rbp-B8h]
  common::milog::MiLogStream v17; // [rsp+50h] [rbp-B0h] BYREF
  char v18[144]; // [rsp+70h] [rbp-90h] BYREF

  v2 = (unsigned __int64)v18;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_1(96LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "1 32 24 21 scene_tag_id_vec:3848";
  *(_QWORD *)(v2 + 16) = Scene::fillSceneDataNotify;
  v4 = (_DWORD *)(v2 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = -218103808;
  v4[536862722] = -202116109;
  if ( std::operator==<SceneEntity>(&this->scene_entity_ptr_, 0LL) )
  {
    common::milog::MiLogStream::create(
      &v17,
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/scene/scene.cpp",
      "fillSceneDataNotify",
      3826);
    common::milog::MiLogStream::operator<<<char [29],(char *[29])0>(
      &v17,
      (const char (*)[29])"scene_entity_ptr_ is nullptr");
    common::milog::MiLogStream::~MiLogStream(&v17);
    v5 = -1;
  }
  else
  {
    scene_config_ptr = Scene::getConfig(this);
    if ( scene_config_ptr )
    {
      v6 = std::__shared_ptr_access<SceneEntity,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<SceneEntity,(__gnu_cxx::_Lock_policy)2,false,false> *const)&this->scene_entity_ptr_);
      level_config_vec = SceneEntity::getLevelConfigNameVec[abi:cxx11](v6);
      __for_range = level_config_vec;
      __for_begin._M_current = std::vector<std::string>::begin(level_config_vec)._M_current;
      __for_end._M_current = std::vector<std::string>::end(level_config_vec)._M_current;
      while ( __gnu_cxx::operator!=<std::string const*,std::vector<std::string>>(&__for_begin, &__for_end) )
      {
        name = __gnu_cxx::__normal_iterator<std::string const*,std::vector<std::string>>::operator*(&__for_begin);
        if ( !std::operator==<char>(&scene_config_ptr->level_entity_config, name) )
          proto::SceneDataNotify::add_level_config_name_list(notify, name);
        __gnu_cxx::__normal_iterator<std::string const*,std::vector<std::string>>::operator++(&__for_begin);
      }
      Scene::getActiveSceneTagList((std::vector<unsigned int> *)(v2 + 32), this);
      __for_range_0 = (std::vector<unsigned int> *)(v2 + 32);
      __for_begin._M_current = (const std::string *)std::vector<unsigned int>::begin((std::vector<unsigned int> *const)(v2 + 32))._M_current;
      __for_end._M_current = (const std::string *)std::vector<unsigned int>::end(__for_range_0)._M_current;
      while ( __gnu_cxx::operator!=<unsigned int *,std::vector<unsigned int>>(
                (const __gnu_cxx::__normal_iterator<unsigned int*,std::vector<unsigned int> > *)&__for_begin,
                (const __gnu_cxx::__normal_iterator<unsigned int*,std::vector<unsigned int> > *)&__for_end) )
      {
        v7 = __gnu_cxx::__normal_iterator<unsigned int *,std::vector<unsigned int>>::operator*((const __gnu_cxx::__normal_iterator<unsigned int*,std::vector<unsigned int> > *const)&__for_begin);
        v8 = v7;
        if ( *(_BYTE *)(((unsigned __int64)v7 >> 3) + 0x7FFF8000) != 0
          && (char)(((unsigned __int8)v7 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)v7 >> 3) + 0x7FFF8000) )
        {
          __asan_report_load4(v7);
        }
        proto::SceneDataNotify::add_scene_tag_id_list(notify, *v8);
        __gnu_cxx::__normal_iterator<unsigned int *,std::vector<unsigned int>>::operator++((__gnu_cxx::__normal_iterator<unsigned int*,std::vector<unsigned int> > *const)&__for_begin);
      }
      v5 = 0;
      std::vector<unsigned int>::~vector((std::vector<unsigned int> *const)(v2 + 32));
    }
    else
    {
      common::milog::MiLogStream::create(
        &v17,
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/scene/scene.cpp",
        "fillSceneDataNotify",
        3833);
      common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(&v17, (const char (*)[16])"getConfig fails");
      common::milog::MiLogStream::~MiLogStream(&v17);
      v5 = -1;
    }
  }
  result = v5;
  if ( v18 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8008) = 0;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8008) = -168430091;
  }
  return result;
};

// Line 3859: range 000000001599425E-000000001599444E
int32_t __cdecl Scene::notifySceneData(Scene *const this, Player *player)
{
  unsigned __int64 v2; // rbx
  __int64 v3; // rax
  _DWORD *v4; // r12
  int32_t v5; // r14d
  int32_t result; // eax
  common::milog::MiLogStream v7; // [rsp+10h] [rbp-F0h] BYREF
  char v8[208]; // [rsp+30h] [rbp-D0h] BYREF

  v2 = (unsigned __int64)v8;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_2(160LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "1 48 72 11 notify:3860";
  *(_QWORD *)(v2 + 16) = Scene::notifySceneData;
  v4 = (_DWORD *)(v2 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = 61937;
  v4[536862723] = -218103808;
  v4[536862724] = -202116109;
  proto::SceneDataNotify::SceneDataNotify((proto::SceneDataNotify *const)(v2 + 48));
  if ( Scene::fillSceneDataNotify(this, (proto::SceneDataNotify *)(v2 + 48)) )
  {
    common::milog::MiLogStream::create(
      &v7,
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/scene/scene.cpp",
      "notifySceneData",
      3863);
    common::milog::MiLogStream::operator<<<char [27],(char *[27])0>(
      &v7,
      (const char (*)[27])"fillSceneDataNotify failed");
    common::milog::MiLogStream::~MiLogStream(&v7);
    v5 = -1;
  }
  else
  {
    v5 = Player::sendProto(player, (const google::protobuf::Message *)(v2 + 48));
  }
  proto::SceneDataNotify::~SceneDataNotify((proto::SceneDataNotify *const)(v2 + 48));
  result = v5;
  if ( v8 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF800C) = 0LL;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8010) = -168430091;
  }
  return result;
};

// Line 3871: range 0000000015994450-0000000015994641
int32_t __cdecl Scene::broadcastSceneDataNotify(Scene *const this)
{
  unsigned __int64 v1; // rbx
  __int64 v2; // rax
  _DWORD *v3; // r12
  int32_t v4; // r14d
  int32_t result; // eax
  common::milog::MiLogStream v6; // [rsp+10h] [rbp-F0h] BYREF
  char v7[208]; // [rsp+30h] [rbp-D0h] BYREF

  v1 = (unsigned __int64)v7;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_2(160LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "1 48 72 11 notify:3872";
  *(_QWORD *)(v1 + 16) = Scene::broadcastSceneDataNotify;
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = 61937;
  v3[536862723] = -218103808;
  v3[536862724] = -202116109;
  proto::SceneDataNotify::SceneDataNotify((proto::SceneDataNotify *const)(v1 + 48));
  if ( Scene::fillSceneDataNotify(this, (proto::SceneDataNotify *)(v1 + 48)) )
  {
    common::milog::MiLogStream::create(
      &v6,
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/scene/scene.cpp",
      "broadcastSceneDataNotify",
      3875);
    common::milog::MiLogStream::operator<<<char [27],(char *[27])0>(
      &v6,
      (const char (*)[27])"fillSceneDataNotify failed");
    common::milog::MiLogStream::~MiLogStream(&v6);
    v4 = -1;
  }
  else
  {
    Scene::notifyAllPlayer<proto::SceneDataNotify>(this, (proto::SceneDataNotify *)(v1 + 48), 0);
    v4 = 0;
  }
  proto::SceneDataNotify::~SceneDataNotify((proto::SceneDataNotify *const)(v1 + 48));
  result = v4;
  if ( v7 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF800C) = 0LL;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v1 >> 3) + 0x7FFF8010) = -168430091;
  }
  return result;
};

// Line 3884: range 0000000015994642-0000000015994A93
int32_t __cdecl Scene::dropItems(
        Scene *const this,
        const std::vector<ItemParam> *item_param_vec,
        const DropParam *drop_param,
        const ActionReason *reason)
{
  unsigned __int64 v4; // r12
  __int64 v5; // rax
  _DWORD *v6; // r13
  int32_t v7; // r14d
  Player *v8; // rax
  PlayerItemComp *ItemComp; // rax
  const std::shared_ptr<Item> *v10; // rax
  bool v11; // r14
  common::milog::MiLogStream *v12; // rdx
  common::milog::MiLogStream *v13; // rax
  common::milog::MiLogStream *v14; // rax
  int32_t result; // eax
  uint32_t idx; // [rsp+3Ch] [rbp-E4h]
  std::shared_ptr<Item> p_item_ptr; // [rsp+40h] [rbp-E0h] BYREF
  common::milog::MiLogStream v20; // [rsp+50h] [rbp-D0h] BYREF
  char v21[176]; // [rsp+70h] [rbp-B0h] BYREF

  v4 = (unsigned __int64)v21;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v5 = __asan_stack_malloc_1(128LL);
    if ( v5 )
      v4 = v5;
  }
  *(_QWORD *)v4 = 1102416563LL;
  *(_QWORD *)(v4 + 8) = "2 32 16 15 player_ptr:3885 64 24 13 item_vec:3892";
  *(_QWORD *)(v4 + 16) = Scene::dropItems;
  v6 = (_DWORD *)(v4 >> 3);
  v6[536862720] = -235802127;
  v6[536862721] = -219021312;
  v6[536862722] = -218103808;
  v6[536862723] = -202116109;
  Scene::getOwnPlayer((const Scene *const)(v4 + 32));
  if ( std::operator==<Player>((const std::shared_ptr<Player> *)(v4 + 32), 0LL) )
  {
    common::milog::MiLogStream::create(
      &v20,
      &common::milog::MiLogDefault::default_log_obj_,
      4u,
      "./src/scene/scene.cpp",
      "dropItems",
      3888);
    common::milog::MiLogStream::operator<<<char [19],(char *[19])0>(&v20, (const char (*)[19])"player_ptr is null");
    common::milog::MiLogStream::~MiLogStream(&v20);
    v7 = -1;
  }
  else
  {
    v8 = std::__shared_ptr_access<Player,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Player,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 32));
    ItemComp = Player::getItemComp(v8);
    PlayerItemComp::createItemBatch((std::vector<std::shared_ptr<Item>> *)(v4 + 64), ItemComp, item_param_vec);
    if ( std::vector<std::shared_ptr<Item>>::empty((const std::vector<std::shared_ptr<Item>> *const)(v4 + 64)) )
    {
      common::milog::MiLogStream::create(
        &v20,
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/scene/scene.cpp",
        "dropItems",
        3895);
      common::milog::MiLogStream::operator<<<char [23],(char *[23])0>(
        &v20,
        (const char (*)[23])"createItemBatch failed");
      common::milog::MiLogStream::~MiLogStream(&v20);
      v7 = -1;
    }
    else
    {
      for ( idx = 0;
            idx < std::vector<std::shared_ptr<Item>>::size((const std::vector<std::shared_ptr<Item>> *const)(v4 + 64));
            ++idx )
      {
        v10 = std::vector<std::shared_ptr<Item>>::operator[]((std::vector<std::shared_ptr<Item>> *const)(v4 + 64), idx);
        std::shared_ptr<Item>::shared_ptr(&p_item_ptr, v10);
        v11 = Scene::dropItem(this, &p_item_ptr, drop_param, reason, (float)(int)idx) != 0;
        std::shared_ptr<Item>::~shared_ptr(&p_item_ptr);
        if ( v11 )
        {
          common::milog::MiLogStream::create(
            &v20,
            &common::milog::MiLogDefault::default_log_obj_,
            3u,
            "./src/scene/scene.cpp",
            "dropItems",
            3903);
          v12 = common::milog::MiLogStream::operator<<<char [26],(char *[26])0>(
                  &v20,
                  (const char (*)[26])"dropItem failed. drop_id:");
          v13 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v12, &drop_param->drop_id);
          v14 = common::milog::MiLogStream::operator<<<char [13],(char *[13])0>(v13, (const char (*)[13])" drop_count:");
          common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v14, &drop_param->drop_count);
          common::milog::MiLogStream::~MiLogStream(&v20);
        }
      }
      v7 = 0;
    }
    std::vector<std::shared_ptr<Item>>::~vector((std::vector<std::shared_ptr<Item>> *const)(v4 + 64));
  }
  std::shared_ptr<Player>::~shared_ptr((std::shared_ptr<Player> *const)(v4 + 32));
  result = v7;
  if ( v21 == (char *)v4 )
  {
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v4 = 1172321806LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 3912: range 0000000015994A94-0000000015994C45
Vector3 __cdecl Scene::randDropItemPoint(Scene *const this, const Vector3 *origin_pos, float drop_count)
{
  __m128i v3; // xmm0
  __m128i v4; // xmm0
  float v5; // xmm0_4
  float z; // xmm1_4
  __int64 v7; // xmm0_8
  float x; // [rsp+0h] [rbp-60h]
  float y_; // [rsp+4h] [rbp-5Ch]
  float z_a; // [rsp+8h] [rbp-58h]
  float z_; // [rsp+8h] [rbp-58h]
  float deg; // [rsp+40h] [rbp-20h]
  float dist; // [rsp+44h] [rbp-1Ch]
  Vector3 v15; // [rsp+48h] [rbp-18h] BYREF
  Vector3 result; // 0:xmm0_8.8,8:xmm1_4.4

  v3 = 0LL;
  *(float *)v3.m128i_i32 = common::tools::RandomUtils::rand<float>(0.0, 6.2831855);
  deg = COERCE_FLOAT(_mm_cvtsi128_si32(v3));
  v4 = (__m128i)0x3DCCCCCDu;
  *(float *)v4.m128i_i32 = common::tools::RandomUtils::rand<float>(0.1, 6.0 - (float)(5.0 / (float)(drop_count + 1.0)));
  dist = COERCE_FLOAT(_mm_cvtsi128_si32(v4));
  if ( *(_BYTE *)(((unsigned __int64)&origin_pos->z >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)origin_pos + 8) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&origin_pos->z >> 3) + 0x7FFF8000) )
  {
    __asan_report_load4(&origin_pos->z);
  }
  z_a = origin_pos->z;
  z_ = (float)(std::sin(deg) * dist) + z_a;
  if ( *(_BYTE *)(((unsigned __int64)&origin_pos->y >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)origin_pos + 4) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&origin_pos->y >> 3) + 0x7FFF8000) )
  {
    __asan_report_load4(&origin_pos->y);
  }
  y_ = origin_pos->y;
  if ( *(_BYTE *)(((unsigned __int64)origin_pos >> 3) + 0x7FFF8000) != 0
    && (char)(((unsigned __int8)origin_pos & 7) + 3) >= *(_BYTE *)(((unsigned __int64)origin_pos >> 3) + 0x7FFF8000) )
  {
    __asan_report_load4(origin_pos);
  }
  x = origin_pos->x;
  v5 = std::cos(deg);
  Vector3::Vector3(&v15, (float)(v5 * dist) + x, y_, z_);
  z = v15.z;
  v7 = *(_QWORD *)&v15.x;
  result.x = *(float *)&v7;
  result.y = *((float *)&v7 + 1);
  result.z = z;
  return result;
};

// Line 3920: range 0000000015994C46-0000000015994D66
bool __cdecl Scene::checkIsDirectAddDropItem(Player *player, const Item *item)
{
  std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v3; // rax
  uint32_t item_id; // [rsp+14h] [rbp-2Ch]
  const data::MaterialExcelConfig *material_config_ptr; // [rsp+18h] [rbp-28h]
  std::shared_ptr<Config> v6[2]; // [rsp+20h] [rbp-20h] BYREF

  item_id = Item::getItemId(item);
  if ( item_id == 101 || item_id == 102 || item_id == 105 )
    return 1;
  ServiceBox::findService<GameserverService>();
  GameserverService::getConfig((GameserverService *const)v6);
  v3 = std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false> *const)v6);
  material_config_ptr = data::MaterialExcelConfigMgrBase::findMaterialExcelConfig(
                          &v3->design_config.txt_config_mgr.material_config_mgr,
                          item_id);
  std::shared_ptr<Config>::~shared_ptr(v6);
  if ( !material_config_ptr )
    return Player::getIsInSimulation(player);
  if ( *(_BYTE *)(((unsigned __int64)&material_config_ptr->auto_enter_bag >> 3) + 0x7FFF8000) != 0
    && (((unsigned __int8)material_config_ptr - 124) & 7) >= *(_BYTE *)(((unsigned __int64)&material_config_ptr->auto_enter_bag >> 3)
                                                                      + 0x7FFF8000) )
  {
    __asan_report_load1(&material_config_ptr->auto_enter_bag);
  }
  return material_config_ptr->auto_enter_bag || Player::getIsInSimulation(player);
};

// Line 3943: range 0000000015994D68-0000000015995A8E
int32_t __cdecl Scene::dropItem(
        Scene *const this,
        ItemPtr *p_item_ptr,
        const DropParam *drop_param,
        const ActionReason *reason,
        float drop_count)
{
  unsigned __int64 v5; // r13
  __int64 v6; // rax
  _DWORD *v7; // r12
  common::milog::MiLogStream *v9; // rdx
  common::milog::MiLogStream *v10; // rax
  common::milog::MiLogStream *v11; // rdx
  common::milog::MiLogStream *v12; // rax
  std::__shared_ptr_access<Item,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v13; // rax
  Player *v14; // rax
  Player *v16; // rax
  PlayerBasicComp *BasicComp; // rax
  Player *v18; // rax
  std::shared_ptr<Item> *i; // r14
  Player *v20; // rax
  PlayerItemComp *ItemComp; // r15
  std::__shared_ptr_access<Item,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v22; // rax
  uint32_t ItemId; // eax
  MaterialExcelConfigMgr *p_material_config_mgr; // r14
  std::__shared_ptr_access<Item,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v25; // rax
  uint32_t v26; // eax
  unsigned __int64 v27; // rax
  std::__shared_ptr_access<Entity,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v28; // rax
  common::milog::MiLogStream *v29; // r14
  std::__shared_ptr_access<Item,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v30; // rax
  common::milog::MiLogStream *v31; // rax
  common::milog::MiLogStream *v32; // r14
  std::__shared_ptr_access<Item,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v33; // rax
  int v34; // r14d
  unsigned __int64 v35; // rax
  unsigned __int64 v36; // rdx
  common::milog::MiLogStream *v37; // r14
  std::__shared_ptr_access<Item,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v38; // rax
  common::milog::MiLogStream *v39; // rax
  common::milog::MiLogStream *v40; // r14
  std::__shared_ptr_access<Gadget,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v41; // rax
  common::milog::MiLogStream *v42; // rax
  common::milog::MiLogStream *v43; // rax
  int32_t result; // eax
  std::string v45; // [rsp+0h] [rbp-1F0h]
  std::allocator<std::shared_ptr<Item> > __a; // [rsp+49h] [rbp-1A7h] BYREF
  bool is_spawn_trifle; // [rsp+4Ah] [rbp-1A6h]
  bool is_fake; // [rsp+4Bh] [rbp-1A5h]
  unsigned int val; // [rsp+4Ch] [rbp-1A4h] BYREF
  unsigned __int64 Guid; // [rsp+50h] [rbp-1A0h] BYREF
  const data::MaterialExcelConfig *material_config_ptr; // [rsp+58h] [rbp-198h]
  std::vector<std::shared_ptr<Item>> item_vec; // [rsp+60h] [rbp-190h] BYREF
  common::milog::MiLogStream v55; // [rsp+80h] [rbp-170h] BYREF
  char v56[336]; // [rsp+A0h] [rbp-150h] BYREF

  *((float *)&v45._anon_0._M_allocated_capacity + 3) = drop_count;
  v5 = (unsigned __int64)v56;
  v45._M_string_length = (std::string::size_type)v56;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v6 = __asan_stack_malloc_3(288LL);
    if ( v6 )
      v5 = v6;
  }
  *(_QWORD *)v5 = 1102416563LL;
  *(_QWORD *)(v5 + 8) = "5 32 1 11 holder:3959 48 16 15 player_ptr:3956 80 16 15 entity_ptr:3986 112 16 15 trifle_ptr:399"
                        "2 144 112 17 trifle_param:3977";
  *(_QWORD *)(v5 + 16) = Scene::dropItem;
  v7 = (_DWORD *)(v5 >> 3);
  v7[536862720] = -235802127;
  v7[536862721] = 61953;
  v7[536862722] = 62194;
  v7[536862723] = 62194;
  v7[536862724] = 62194;
  v7[536862728] = -202116109;
  if ( std::operator==<Item>(p_item_ptr, 0LL) )
  {
    common::milog::MiLogStream::create(
      &v55,
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/scene/scene.cpp",
      "dropItem",
      3946);
    common::milog::MiLogStream::operator<<<char [20],(char *[20])0>(&v55, (const char (*)[20])"item_ptr is nullptr");
    common::milog::MiLogStream::~MiLogStream(&v55);
    *((_DWORD *)&v45._anon_0._M_allocated_capacity + 2) = -1;
  }
  else
  {
    if ( *(_BYTE *)(((unsigned __int64)reason >> 3) + 0x7FFF8000) != 0
      && (char)(((unsigned __int8)reason & 7) + 3) >= *(_BYTE *)(((unsigned __int64)reason >> 3) + 0x7FFF8000) )
    {
      __asan_report_load4(reason);
    }
    if ( reason->reason_type == ACTION_REASON_NONE || !proto::ActionReasonType_IsValid(reason->reason_type) )
    {
      common::milog::MiLogStream::create(
        &v55,
        &common::milog::MiLogDefault::default_log_obj_,
        4u,
        "./src/scene/scene.cpp",
        "dropItem",
        3951);
      v9 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(&v55, (const char (*)[16])"invalid reason:");
      v10 = operator<<(v9, reason);
      v11 = common::milog::MiLogStream::operator<<<char [8],(char *[8])0>(v10, (const char (*)[8])" scene:");
      v12 = common::milog::MiLogStream::operator<<<Scene,(Scene*)0>(v11, this);
      v45._anon_0._M_allocated_capacity = (std::string::size_type)common::milog::MiLogStream::operator<<<char [10],(char *[10])0>(
                                                                    v12,
                                                                    (const char (*)[10])" item_id:");
      v13 = std::__shared_ptr_access<Item,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Item,(__gnu_cxx::_Lock_policy)2,false,false> *const)p_item_ptr);
      val = Item::getItemId(v13);
      common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
        (common::milog::MiLogStream *const)v45._anon_0._M_allocated_capacity,
        &val);
      common::milog::MiLogStream::~MiLogStream(&v55);
    }
    is_spawn_trifle = 1;
    is_fake = 0;
    if ( *(_BYTE *)(((unsigned __int64)&drop_param->only_vision_uid >> 3) + 0x7FFF8000) != 0
      && (char)((((_BYTE)drop_param + 12) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&drop_param->only_vision_uid >> 3)
                                                                + 0x7FFF8000) )
    {
      __asan_report_load4(&drop_param->only_vision_uid);
    }
    Scene::findPlayer((const Scene *const)(v5 + 48), (__int64)this, drop_param->only_vision_uid);
    if ( std::operator!=<Player>((const std::shared_ptr<Player> *)(v5 + 48), 0LL) )
    {
      v45._anon_0._M_allocated_capacity = (std::string::size_type)std::__shared_ptr_access<Item,(__gnu_cxx::_Lock_policy)2,false,false>::operator*((const std::__shared_ptr_access<Item,(__gnu_cxx::_Lock_policy)2,false,false> *const)p_item_ptr);
      v14 = std::__shared_ptr_access<Player,(__gnu_cxx::_Lock_policy)2,false,false>::operator*((const std::__shared_ptr_access<Player,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v5 + 48));
      if ( Scene::checkIsDirectAddDropItem(v14, (const Item *)v45._anon_0._M_allocated_capacity) )
      {
        v16 = std::__shared_ptr_access<Player,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Player,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v5 + 48));
        BasicComp = Player::getBasicComp(v16);
        PlayerBasicComp::getNextTransNo[abi:cxx11]((std::string *)&v55, BasicComp);
        StatLogUtils::ContextHolder::ContextHolder((StatLogUtils::ContextHolder *const)(v5 + 32), 0x5F3u, v45);
        std::string::~string(&v55);
        v18 = std::__shared_ptr_access<Player,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Player,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v5 + 48));
        v45._anon_0._M_allocated_capacity = (std::string::size_type)Player::getItemComp(v18);
        std::shared_ptr<Item>::shared_ptr((std::shared_ptr<Item> *const)(v5 + 112), p_item_ptr);
        std::allocator<std::shared_ptr<Item>>::allocator(&__a);
        std::vector<std::shared_ptr<Item>>::vector(
          &item_vec,
          (std::initializer_list<std::shared_ptr<Item> >)__PAIR128__(1LL, v5 + 112),
          &__a);
        PlayerItemComp::addItemBatchWithStackLimit(
          (PlayerItemComp *const)v45._anon_0._M_allocated_capacity,
          &item_vec,
          reason,
          0LL);
        std::vector<std::shared_ptr<Item>>::~vector(&item_vec);
        std::allocator<std::shared_ptr<Item>>::~allocator(&__a);
        for ( i = (std::shared_ptr<Item> *)(v5 + 128);
              i != (std::shared_ptr<Item> *)(v5 + 112);
              std::shared_ptr<Item>::~shared_ptr(i) )
        {
          --i;
        }
        v20 = std::__shared_ptr_access<Player,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Player,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v5 + 48));
        ItemComp = Player::getItemComp(v20);
        v22 = std::__shared_ptr_access<Item,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Item,(__gnu_cxx::_Lock_policy)2,false,false> *const)p_item_ptr);
        ItemId = Item::getItemId(v22);
        PlayerItemComp::notifyDropHint(ItemComp, ItemId, &drop_param->pos);
        ServiceBox::findService<GameserverService>();
        GameserverService::getConfig((GameserverService *const)(v5 + 112));
        p_material_config_mgr = &std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v5 + 112))->design_config.txt_config_mgr.material_config_mgr;
        v25 = std::__shared_ptr_access<Item,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Item,(__gnu_cxx::_Lock_policy)2,false,false> *const)p_item_ptr);
        v26 = Item::getItemId(v25);
        material_config_ptr = data::MaterialExcelConfigMgrBase::findMaterialExcelConfig(p_material_config_mgr, v26);
        std::shared_ptr<Config>::~shared_ptr((std::shared_ptr<Config> *const)(v5 + 112));
        if ( !material_config_ptr )
          goto LABEL_30;
        if ( *(_BYTE *)(((unsigned __int64)&material_config_ptr->material_type >> 3) + 0x7FFF8000) != 0
          && (char)((((_BYTE)material_config_ptr + 76) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&material_config_ptr->material_type >> 3)
                                                                             + 0x7FFF8000) )
        {
          __asan_report_load4(&material_config_ptr->material_type);
        }
        if ( material_config_ptr->material_type == MATERIAL_FAKE_ABSORBATE
          || material_config_ptr->material_type == MATERIAL_WOOD )
        {
          is_fake = 1;
        }
        else
        {
LABEL_30:
          is_spawn_trifle = 0;
        }
        StatLogUtils::ContextHolder::~ContextHolder((StatLogUtils::ContextHolder *const)(v5 + 32));
      }
    }
    if ( !is_spawn_trifle )
      goto LABEL_53;
    TrifleParam::TrifleParam((TrifleParam *const)(v5 + 144), reason);
    std::shared_ptr<Item>::operator=((std::shared_ptr<Item> *const)(v5 + 152), p_item_ptr);
    *(Vector3 *)(v5 + 168) = Scene::randDropItemPoint(
                               this,
                               &drop_param->pos,
                               *((float *)&v45._anon_0._M_allocated_capacity + 3));
    if ( (((unsigned __int8)drop_param + 28) & 7) >= *(_BYTE *)(((unsigned __int64)&drop_param->rot >> 3) + 0x7FFF8000)
      && *(_BYTE *)(((unsigned __int64)&drop_param->rot >> 3) + 0x7FFF8000) != 0
      || *(_BYTE *)((((unsigned __int64)&drop_param->rot.z + 3) >> 3) + 0x7FFF8000) != 0
      && (((unsigned __int8)drop_param + 39) & 7) >= *(_BYTE *)((((unsigned __int64)&drop_param->rot.z + 3) >> 3)
                                                              + 0x7FFF8000) )
    {
      __asan_report_load_n(&drop_param->rot, 12LL);
    }
    *(_QWORD *)(v5 + 180) = *(_QWORD *)&drop_param->rot.x;
    *(float *)(v5 + 188) = drop_param->rot.z;
    if ( *(_BYTE *)(((unsigned __int64)&drop_param->source_entity_id >> 3) + 0x7FFF8000) != 0
      && (char)((((_BYTE)drop_param + 8) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&drop_param->source_entity_id >> 3)
                                                               + 0x7FFF8000) )
    {
      __asan_report_load4(&drop_param->source_entity_id);
    }
    *(_DWORD *)(v5 + 208) = drop_param->source_entity_id;
    if ( *(_BYTE *)(((unsigned __int64)&drop_param->only_vision_uid >> 3) + 0x7FFF8000) != 0
      && (char)((((_BYTE)drop_param + 12) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&drop_param->only_vision_uid >> 3)
                                                                + 0x7FFF8000) )
    {
      __asan_report_load4(&drop_param->only_vision_uid);
    }
    *(_DWORD *)(v5 + 212) = drop_param->only_vision_uid;
    *(_DWORD *)(v5 + 144) = Scene::genNewEntityId(this, PROT_ENTITY_GADGET);
    *(_BYTE *)(v5 + 224) = 1;
    *(_BYTE *)(v5 + 225) = is_fake;
    if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
      __asan_report_load8();
    v27 = (unsigned __int64)(this->_vptr_DescribalBase + 15);
    if ( *(_BYTE *)((v27 >> 3) + 0x7FFF8000) )
      v27 = __asan_report_load8();
    (*(void (__fastcall **)(unsigned __int64, Scene *const, _QWORD))v27)(v5 + 80, this, *(unsigned int *)(v5 + 208));
    if ( std::operator!=<Entity>((const std::shared_ptr<Entity> *)(v5 + 80), 0LL) )
    {
      *(_DWORD *)(v5 + 216) = EntityMgr::getBornTypeFromSourceEntity((const EntityPtr *)(v5 + 80));
      v28 = std::__shared_ptr_access<Entity,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Entity,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v5 + 80));
      *(_DWORD *)(v5 + 220) = Entity::getRoomId(v28);
    }
    EntityMgr::createTrifle((const TrifleParam *)(v5 + 112));
    if ( std::operator==<Gadget>((const std::shared_ptr<Gadget> *)(v5 + 112), 0LL) )
    {
      common::milog::MiLogStream::create(
        &v55,
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/scene/scene.cpp",
        "dropItem",
        3995);
      v29 = common::milog::MiLogStream::operator<<<char [26],(char *[26])0>(
              &v55,
              (const char (*)[26])"createTrifle fails, guid:");
      v30 = std::__shared_ptr_access<Item,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Item,(__gnu_cxx::_Lock_policy)2,false,false> *const)p_item_ptr);
      Guid = Item::getGuid(v30);
      v31 = common::milog::MiLogStream::operator<<<unsigned long,(unsigned long *)0>(v29, &Guid);
      v32 = common::milog::MiLogStream::operator<<<char [10],(char *[10])0>(v31, (const char (*)[10])" item_id:");
      v33 = std::__shared_ptr_access<Item,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Item,(__gnu_cxx::_Lock_policy)2,false,false> *const)p_item_ptr);
      val = Item::getItemId(v33);
      common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v32, &val);
      common::milog::MiLogStream::~MiLogStream(&v55);
      *((_DWORD *)&v45._anon_0._M_allocated_capacity + 2) = -1;
      v34 = 0;
    }
    else
    {
      v35 = (unsigned __int64)std::__shared_ptr_access<Gadget,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Gadget,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v5 + 112));
      if ( *(_BYTE *)((v35 >> 3) + 0x7FFF8000) )
        v35 = __asan_report_load8();
      v36 = *(_QWORD *)v35 + 56LL;
      if ( *(_BYTE *)((v36 >> 3) + 0x7FFF8000) )
        v35 = __asan_report_load8();
      (*(void (__fastcall **)(unsigned __int64, Scene *const, VisionContext *))v36)(
        v35,
        this,
        &VisionContext::meet_context);
      common::milog::MiLogStream::create(
        &v55,
        &common::milog::MiLogDefault::default_log_obj_,
        1u,
        "./src/scene/scene.cpp",
        "dropItem",
        3999);
      v37 = common::milog::MiLogStream::operator<<<char [20],(char *[20])0>(
              &v55,
              (const char (*)[20])"dropTrifle item_id:");
      v38 = std::__shared_ptr_access<Item,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Item,(__gnu_cxx::_Lock_policy)2,false,false> *const)p_item_ptr);
      val = Item::getItemId(v38);
      v39 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v37, &val);
      v40 = common::milog::MiLogStream::operator<<<char [10],(char *[10])0>(v39, (const char (*)[10])" entity: ");
      v41 = std::__shared_ptr_access<Gadget,(__gnu_cxx::_Lock_policy)2,false,false>::operator*((const std::__shared_ptr_access<Gadget,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v5 + 112));
      v42 = common::milog::MiLogStream::operator<<<Gadget,(Gadget*)0>(v40, v41);
      v43 = common::milog::MiLogStream::operator<<<char [10],(char *[10])0>(v42, (const char (*)[10])" is_fake:");
      common::milog::MiLogStream::operator<<(v43, is_fake);
      common::milog::MiLogStream::~MiLogStream(&v55);
      v34 = 1;
    }
    std::shared_ptr<Gadget>::~shared_ptr((std::shared_ptr<Gadget> *const)(v5 + 112));
    std::shared_ptr<Entity>::~shared_ptr((std::shared_ptr<Entity> *const)(v5 + 80));
    TrifleParam::~TrifleParam((TrifleParam *const)(v5 + 144));
    if ( v34 == 1 )
LABEL_53:
      *((_DWORD *)&v45._anon_0._M_allocated_capacity + 2) = 0;
    std::shared_ptr<Player>::~shared_ptr((std::shared_ptr<Player> *const)(v5 + 48));
  }
  result = *((_DWORD *)&v45._anon_0._M_allocated_capacity + 2);
  if ( v45._M_string_length == v5 )
  {
    *(_QWORD *)((v5 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8008) = 0LL;
    *(_DWORD *)((v5 >> 3) + 0x7FFF8010) = 0;
    *(_DWORD *)((v5 >> 3) + 0x7FFF8020) = 0;
  }
  else
  {
    *(_QWORD *)v5 = 1172321806LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v5 >> 3) + 0x7FFF8020) = -168430091;
  }
  return result;
};

// Line 4006: range 0000000015995A90-000000001599612F
__int64 __fastcall Scene::setPlayerLocation(Scene *const this, uint32_t uid, unsigned __int64 location)
{
  unsigned __int64 v3; // r12
  __int64 v4; // rax
  _DWORD *v5; // r13
  unsigned int v6; // r14d
  common::milog::MiLogStream *v7; // rax
  common::milog::MiLogStream *v8; // rax
  common::milog::MiLogStream *v9; // rax
  unsigned __int64 n; // rax
  __int64 v11; // rdi
  __int64 v12; // rdi
  __int64 v13; // rdi
  __int64 v14; // rdi
  __int64 v15; // rdi
  __int64 v16; // rdi
  std::__shared_ptr_access<PlayerViewMgr,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v17; // rax
  SceneBlockGroupComp *BlockGroupComp; // rdx
  unsigned __int64 v20; // rax
  void (__fastcall *v21)(SceneBlockGroupComp *, _QWORD, double, float); // r8
  unsigned int v22; // edi
  __int64 result; // rax
  ScenePlayerLocationPtr *player_location_ptr; // [rsp+28h] [rbp-B8h]
  common::milog::MiLogStream v27; // [rsp+30h] [rbp-B0h] BYREF
  char v28[144]; // [rsp+50h] [rbp-90h] BYREF

  v3 = (unsigned __int64)v28;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_1(96LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "2 48 4 8 uid:4005 64 16 24 player_view_mgr_ptr:4025";
  *(_QWORD *)(v3 + 16) = Scene::setPlayerLocation;
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = -234556943;
  v5[536862722] = -202178560;
  *(_DWORD *)(v3 + 48) = uid;
  player_location_ptr = std::map<unsigned int,std::shared_ptr<ScenePlayerLocation>>::operator[](
                          &this->player_location_map_,
                          (const std::map<unsigned int,std::shared_ptr<ScenePlayerLocation>>::key_type *)(v3 + 48));
  if ( std::operator==<ScenePlayerLocation>(player_location_ptr, 0LL) )
  {
    common::tools::perf::make_shared<ScenePlayerLocation>();
    std::shared_ptr<ScenePlayerLocation>::operator=(
      player_location_ptr,
      (std::shared_ptr<ScenePlayerLocation> *)(v3 + 64));
    std::shared_ptr<ScenePlayerLocation>::~shared_ptr((std::shared_ptr<ScenePlayerLocation> *const)(v3 + 64));
  }
  if ( std::operator==<ScenePlayerLocation>(player_location_ptr, 0LL) )
  {
    common::milog::MiLogStream::create(
      &v27,
      &common::milog::MiLogDefault::default_log_obj_,
      4u,
      "./src/scene/scene.cpp",
      "setPlayerLocation",
      4015);
    common::milog::MiLogStream::operator<<<char [31],(char *[31])0>(
      &v27,
      (const char (*)[31])"player_location_ptr is nullptr");
    common::milog::MiLogStream::~MiLogStream(&v27);
    v6 = -1;
  }
  else
  {
    common::milog::MiLogStream::create(
      &v27,
      &common::milog::MiLogDefault::default_log_obj_,
      1u,
      "./src/scene/scene.cpp",
      "setPlayerLocation",
      4018);
    v7 = common::milog::MiLogStream::operator<<<char [49],(char *[49])0>(
           &v27,
           (const char (*)[49])"[ENTER_SCENE] setPlayerLocation, last_valid_pos:");
    v8 = operator<<(v7, (const Vector3 *)(location + 24));
    v9 = common::milog::MiLogStream::operator<<<char [10],(char *[10])0>(v8, (const char (*)[10])" cur_pos:");
    operator<<(v9, (const Vector3 *)location);
    common::milog::MiLogStream::~MiLogStream(&v27);
    n = (unsigned __int64)std::__shared_ptr_access<ScenePlayerLocation,(__gnu_cxx::_Lock_policy)2,false,false>::operator*((const std::__shared_ptr_access<ScenePlayerLocation,(__gnu_cxx::_Lock_policy)2,false,false> *const)player_location_ptr);
    if ( (char)(n & 7) >= *(_BYTE *)((n >> 3) + 0x7FFF8000) && *(_BYTE *)((n >> 3) + 0x7FFF8000) != 0
      || *(_BYTE *)(((n + 47) >> 3) + 0x7FFF8000) != 0
      && (char)((n + 47) & 7) >= *(_BYTE *)(((n + 47) >> 3) + 0x7FFF8000) )
    {
      n = __asan_report_store_n(n, 48LL);
    }
    if ( (char)(location & 7) >= *(_BYTE *)((location >> 3) + 0x7FFF8000)
      && *(_BYTE *)((location >> 3) + 0x7FFF8000) != 0
      || *(_BYTE *)(((location + 47) >> 3) + 0x7FFF8000) != 0
      && (char)((location + 47) & 7) >= *(_BYTE *)(((location + 47) >> 3) + 0x7FFF8000) )
    {
      n = __asan_report_load_n(location, 48LL);
    }
    v11 = *(_QWORD *)(location + 8);
    *(_QWORD *)n = *(_QWORD *)location;
    *(_QWORD *)(n + 8) = v11;
    v12 = *(_QWORD *)(location + 24);
    *(_QWORD *)(n + 16) = *(_QWORD *)(location + 16);
    *(_QWORD *)(n + 24) = v12;
    v13 = *(_QWORD *)(location + 40);
    *(_QWORD *)(n + 32) = *(_QWORD *)(location + 32);
    *(_QWORD *)(n + 40) = v13;
    if ( Scene::getOwnerUid(this) == *(_DWORD *)(v3 + 48) )
    {
      if ( *(char *)(((unsigned __int64)&this->owner_player_location_ >> 3) + 0x7FFF8000) < 0
        || *(_BYTE *)((((unsigned __int64)&this->owner_player_location_.last_valid_rot.z + 3) >> 3) + 0x7FFF8000) != 0
        && (((unsigned __int8)this - 113) & 7) >= *(_BYTE *)((((unsigned __int64)&this->owner_player_location_.last_valid_rot.z
                                                             + 3) >> 3)
                                                           + 0x7FFF8000) )
      {
        __asan_report_store_n(&this->owner_player_location_, 48LL);
      }
      if ( (char)(location & 7) >= *(_BYTE *)((location >> 3) + 0x7FFF8000)
        && *(_BYTE *)((location >> 3) + 0x7FFF8000) != 0
        || *(_BYTE *)(((location + 47) >> 3) + 0x7FFF8000) != 0
        && (char)((location + 47) & 7) >= *(_BYTE *)(((location + 47) >> 3) + 0x7FFF8000) )
      {
        __asan_report_load_n(location, 48LL);
      }
      v14 = *(_QWORD *)(location + 8);
      *(_QWORD *)&this->owner_player_location_.cur_pos.x = *(_QWORD *)location;
      *(_QWORD *)&this->owner_player_location_.cur_pos.z = v14;
      v15 = *(_QWORD *)(location + 24);
      *(_QWORD *)&this->owner_player_location_.cur_rot.y = *(_QWORD *)(location + 16);
      *(_QWORD *)&this->owner_player_location_.last_valid_pos.x = v15;
      v16 = *(_QWORD *)(location + 40);
      *(_QWORD *)&this->owner_player_location_.last_valid_pos.z = *(_QWORD *)(location + 32);
      *(_QWORD *)&this->owner_player_location_.last_valid_rot.y = v16;
    }
    Scene::findPlayerViewMgr((const Scene *const)(v3 + 64), (__int64)this, *(_DWORD *)(v3 + 48));
    if ( std::operator==<PlayerViewMgr>((const std::shared_ptr<PlayerViewMgr> *)(v3 + 64), 0LL)
      || (v17 = std::__shared_ptr_access<PlayerViewMgr,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<PlayerViewMgr,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 64)),
          !PlayerViewMgr::isHasEyePointAsEye(v17)) )
    {
      BlockGroupComp = Scene::getBlockGroupComp(this);
      if ( *(_BYTE *)(((unsigned __int64)BlockGroupComp >> 3) + 0x7FFF8000) )
        __asan_report_load8();
      v20 = (unsigned __int64)(BlockGroupComp->_vptr_SceneCompBase + 11);
      if ( *(_BYTE *)((v20 >> 3) + 0x7FFF8000) )
        v20 = __asan_report_load8();
      v21 = *(void (__fastcall **)(SceneBlockGroupComp *, _QWORD, double, float))v20;
      v22 = *(_DWORD *)(v3 + 48);
      if ( (char)(location & 7) >= *(_BYTE *)((location >> 3) + 0x7FFF8000)
        && *(_BYTE *)((location >> 3) + 0x7FFF8000) != 0
        || *(_BYTE *)(((location + 11) >> 3) + 0x7FFF8000) != 0
        && (char)((location + 11) & 7) >= *(_BYTE *)(((location + 11) >> 3) + 0x7FFF8000) )
      {
        v22 = location;
        __asan_report_load_n(location, 12LL);
      }
      v21(BlockGroupComp, v22, *(double *)location, *(float *)(location + 8));
    }
    v6 = 0;
    std::shared_ptr<PlayerViewMgr>::~shared_ptr((std::shared_ptr<PlayerViewMgr> *const)(v3 + 64));
  }
  result = v6;
  if ( v28 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8008) = 0;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8008) = -168430091;
  }
  return result;
};

// Line 4034: range 0000000015996130-0000000015996659
int32_t __cdecl Scene::setPlayerLastValidLocation(
        Scene *const this,
        uint32_t uid,
        const Vector3 *pos,
        const Vector3 *rot)
{
  unsigned __int64 v4; // rbx
  __int64 v5; // rax
  unsigned __int64 v6; // r13
  int32_t v7; // r14d
  std::__shared_ptr_access<ScenePlayerLocation,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v8; // rdx
  Vector3 *p_last_valid_pos; // rax
  std::__shared_ptr_access<ScenePlayerLocation,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v10; // rdx
  Vector3 *p_last_valid_rot; // rax
  int32_t result; // eax
  char v15[112]; // [rsp+20h] [rbp-70h] BYREF

  v4 = (unsigned __int64)v15;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v5 = __asan_stack_malloc_0(64LL);
    if ( v5 )
      v4 = v5;
  }
  *(_QWORD *)v4 = 1102416563LL;
  *(_QWORD *)(v4 + 8) = "1 32 16 17 location_ptr:4035";
  *(_QWORD *)(v4 + 16) = Scene::setPlayerLastValidLocation;
  v6 = v4 >> 3;
  *(_DWORD *)(v6 + 2147450880) = -235802127;
  *(_DWORD *)(v6 + 2147450884) = -202178560;
  Scene::getPlayerLocation((Scene *const)(v4 + 32), (uint32_t)this);
  if ( std::operator==<ScenePlayerLocation>(0LL, (const std::shared_ptr<ScenePlayerLocation> *)(v4 + 32)) )
  {
    v7 = -1;
  }
  else
  {
    v8 = std::__shared_ptr_access<ScenePlayerLocation,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<ScenePlayerLocation,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 32));
    p_last_valid_pos = &v8->last_valid_pos;
    if ( ((unsigned __int8)p_last_valid_pos & 7) >= *(_BYTE *)(((unsigned __int64)p_last_valid_pos >> 3) + 0x7FFF8000)
      && *(_BYTE *)(((unsigned __int64)p_last_valid_pos >> 3) + 0x7FFF8000) != 0
      || *(_BYTE *)((((unsigned __int64)&p_last_valid_pos->z + 3) >> 3) + 0x7FFF8000) != 0
      && (((unsigned __int8)p_last_valid_pos + 11) & 7) >= *(_BYTE *)((((unsigned __int64)&p_last_valid_pos->z + 3) >> 3)
                                                                    + 0x7FFF8000) )
    {
      __asan_report_store_n(p_last_valid_pos, 12LL);
    }
    if ( ((unsigned __int8)pos & 7) >= *(_BYTE *)(((unsigned __int64)pos >> 3) + 0x7FFF8000)
      && *(_BYTE *)(((unsigned __int64)pos >> 3) + 0x7FFF8000) != 0
      || *(_BYTE *)((((unsigned __int64)&pos->z + 3) >> 3) + 0x7FFF8000) != 0
      && (((unsigned __int8)pos + 11) & 7) >= *(_BYTE *)((((unsigned __int64)&pos->z + 3) >> 3) + 0x7FFF8000) )
    {
      __asan_report_load_n(pos, 12LL);
    }
    *(_QWORD *)&v8->last_valid_pos.x = *(_QWORD *)&pos->x;
    v8->last_valid_pos.z = pos->z;
    v10 = std::__shared_ptr_access<ScenePlayerLocation,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<ScenePlayerLocation,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 32));
    p_last_valid_rot = &v10->last_valid_rot;
    if ( ((unsigned __int8)p_last_valid_rot & 7) >= *(_BYTE *)(((unsigned __int64)p_last_valid_rot >> 3) + 0x7FFF8000)
      && *(_BYTE *)(((unsigned __int64)p_last_valid_rot >> 3) + 0x7FFF8000) != 0
      || *(_BYTE *)((((unsigned __int64)&p_last_valid_rot->z + 3) >> 3) + 0x7FFF8000) != 0
      && (((unsigned __int8)p_last_valid_rot + 11) & 7) >= *(_BYTE *)((((unsigned __int64)&p_last_valid_rot->z + 3) >> 3)
                                                                    + 0x7FFF8000) )
    {
      __asan_report_store_n(p_last_valid_rot, 12LL);
    }
    if ( ((unsigned __int8)rot & 7) >= *(_BYTE *)(((unsigned __int64)rot >> 3) + 0x7FFF8000)
      && *(_BYTE *)(((unsigned __int64)rot >> 3) + 0x7FFF8000) != 0
      || *(_BYTE *)((((unsigned __int64)&rot->z + 3) >> 3) + 0x7FFF8000) != 0
      && (((unsigned __int8)rot + 11) & 7) >= *(_BYTE *)((((unsigned __int64)&rot->z + 3) >> 3) + 0x7FFF8000) )
    {
      __asan_report_load_n(rot, 12LL);
    }
    *(_QWORD *)&v10->last_valid_rot.x = *(_QWORD *)&rot->x;
    v10->last_valid_rot.z = rot->z;
    if ( uid == Scene::getOwnerUid(this) )
    {
      if ( *(char *)(((unsigned __int64)&this->owner_player_location_.last_valid_pos >> 3) + 0x7FFF8000) < 0
        || *(_BYTE *)((((unsigned __int64)&this->owner_player_location_.last_valid_pos.z + 3) >> 3) + 0x7FFF8000) != 0
        && (((unsigned __int8)this - 125) & 7) >= *(_BYTE *)((((unsigned __int64)&this->owner_player_location_.last_valid_pos.z
                                                             + 3) >> 3)
                                                           + 0x7FFF8000) )
      {
        __asan_report_store_n(&this->owner_player_location_.last_valid_pos, 12LL);
      }
      if ( ((unsigned __int8)pos & 7) >= *(_BYTE *)(((unsigned __int64)pos >> 3) + 0x7FFF8000)
        && *(_BYTE *)(((unsigned __int64)pos >> 3) + 0x7FFF8000) != 0
        || *(_BYTE *)((((unsigned __int64)&pos->z + 3) >> 3) + 0x7FFF8000) != 0
        && (((unsigned __int8)pos + 11) & 7) >= *(_BYTE *)((((unsigned __int64)&pos->z + 3) >> 3) + 0x7FFF8000) )
      {
        __asan_report_load_n(pos, 12LL);
      }
      this->owner_player_location_.last_valid_pos = *pos;
      if ( (((unsigned __int8)this - 124) & 7) >= *(_BYTE *)(((unsigned __int64)&this->owner_player_location_.last_valid_rot >> 3)
                                                           + 0x7FFF8000)
        && *(_BYTE *)(((unsigned __int64)&this->owner_player_location_.last_valid_rot >> 3) + 0x7FFF8000) != 0
        || *(_BYTE *)((((unsigned __int64)&this->owner_player_location_.last_valid_rot.z + 3) >> 3) + 0x7FFF8000) != 0
        && (((unsigned __int8)this - 113) & 7) >= *(_BYTE *)((((unsigned __int64)&this->owner_player_location_.last_valid_rot.z
                                                             + 3) >> 3)
                                                           + 0x7FFF8000) )
      {
        __asan_report_store_n(&this->owner_player_location_.last_valid_rot, 12LL);
      }
      if ( ((unsigned __int8)rot & 7) >= *(_BYTE *)(((unsigned __int64)rot >> 3) + 0x7FFF8000)
        && *(_BYTE *)(((unsigned __int64)rot >> 3) + 0x7FFF8000) != 0
        || *(_BYTE *)((((unsigned __int64)&rot->z + 3) >> 3) + 0x7FFF8000) != 0
        && (((unsigned __int8)rot + 11) & 7) >= *(_BYTE *)((((unsigned __int64)&rot->z + 3) >> 3) + 0x7FFF8000) )
      {
        __asan_report_load_n(rot, 12LL);
      }
      this->owner_player_location_.last_valid_rot = *rot;
    }
    v7 = 0;
  }
  std::shared_ptr<ScenePlayerLocation>::~shared_ptr((std::shared_ptr<ScenePlayerLocation> *const)(v4 + 32));
  result = v7;
  if ( v15 == (char *)v4 )
  {
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0LL;
  }
  else
  {
    *(_QWORD *)v4 = 1172321806LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 4051: range 000000001599665A-0000000015996D44
int32_t __cdecl Scene::setPlayerLastValidLocationOnFirstLogin(Scene *const this)
{
  unsigned __int64 v1; // rbx
  __int64 v2; // rax
  unsigned __int64 v3; // r12
  common::milog::MiLogStream *v4; // rax
  int32_t result; // eax
  LuaConfigMgr *p_lua_config_mgr; // rcx
  common::milog::MiLogStream *v7; // rax
  std::__shared_ptr_access<ScenePlayerLocation,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *n; // rax
  std::__shared_ptr_access<ScenePlayerLocation,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v9; // rax
  ScenePlayerLocationPtr *player_location_ptr; // [rsp+10h] [rbp-A0h]
  const SceneScriptConfig *scene_script_config_ptr; // [rsp+18h] [rbp-98h]
  std::shared_ptr<ScenePlayerLocation> __r; // [rsp+20h] [rbp-90h] BYREF
  common::milog::MiLogStream v13; // [rsp+30h] [rbp-80h] BYREF
  char v14[96]; // [rsp+50h] [rbp-60h] BYREF

  v1 = (unsigned __int64)v14;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_0(64LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "1 32 4 8 uid:4052";
  *(_QWORD *)(v1 + 16) = Scene::setPlayerLastValidLocationOnFirstLogin;
  v3 = v1 >> 3;
  *(_DWORD *)(v3 + 2147450880) = -235802127;
  *(_DWORD *)(v3 + 2147450884) = -202116348;
  *(_DWORD *)(v1 + 32) = Scene::getOwnerUid(this);
  player_location_ptr = std::map<unsigned int,std::shared_ptr<ScenePlayerLocation>>::operator[](
                          &this->player_location_map_,
                          (const std::map<unsigned int,std::shared_ptr<ScenePlayerLocation>>::key_type *)(v1 + 32));
  if ( std::operator==<ScenePlayerLocation>(0LL, player_location_ptr) )
  {
    common::tools::perf::make_shared<ScenePlayerLocation>();
    std::shared_ptr<ScenePlayerLocation>::operator=(player_location_ptr, &__r);
    std::shared_ptr<ScenePlayerLocation>::~shared_ptr(&__r);
  }
  if ( std::operator==<ScenePlayerLocation>(0LL, player_location_ptr) )
  {
    common::milog::MiLogStream::create(
      &v13,
      &common::milog::MiLogDefault::default_log_obj_,
      4u,
      "./src/scene/scene.cpp",
      "setPlayerLastValidLocationOnFirstLogin",
      4062);
    v4 = common::milog::MiLogStream::operator<<<char [37],(char *[37])0>(
           &v13,
           (const char (*)[37])"player_location_ptr is nullptr, uid:");
    common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v4, (const unsigned int *)(v1 + 32));
    common::milog::MiLogStream::~MiLogStream(&v13);
    result = -1;
  }
  else
  {
    ServiceBox::findService<GameserverService>();
    GameserverService::getConfig((GameserverService *const)&__r);
    p_lua_config_mgr = &std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false> *const)&__r)->design_config.lua_config_mgr;
    if ( *(_BYTE *)(((unsigned __int64)&this->scene_id_ >> 3) + 0x7FFF8000) != 0
      && *(_BYTE *)(((unsigned __int64)&this->scene_id_ >> 3) + 0x7FFF8000) <= 3 )
    {
      __asan_report_load4(&this->scene_id_);
    }
    scene_script_config_ptr = LuaConfigMgr::findSceneScriptConfig(p_lua_config_mgr, this->scene_id_);
    std::shared_ptr<Config>::~shared_ptr((std::shared_ptr<Config> *const)&__r);
    if ( scene_script_config_ptr )
    {
      n = std::__shared_ptr_access<ScenePlayerLocation,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<ScenePlayerLocation,(__gnu_cxx::_Lock_policy)2,false,false> *const)player_location_ptr);
      if ( (((unsigned __int8)n + 24) & 7) >= *(_BYTE *)(((unsigned __int64)&n->last_valid_pos >> 3) + 0x7FFF8000)
        && *(_BYTE *)(((unsigned __int64)&n->last_valid_pos >> 3) + 0x7FFF8000) != 0
        || *(_BYTE *)((((unsigned __int64)&n->last_valid_pos.z + 3) >> 3) + 0x7FFF8000) != 0
        && (((unsigned __int8)n + 35) & 7) >= *(_BYTE *)((((unsigned __int64)&n->last_valid_pos.z + 3) >> 3) + 0x7FFF8000) )
      {
        n = (std::__shared_ptr_access<ScenePlayerLocation,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *)__asan_report_store_n(&n->last_valid_pos, 12LL);
      }
      if ( (((unsigned __int8)scene_script_config_ptr - 52) & 7) >= *(_BYTE *)(((unsigned __int64)&scene_script_config_ptr->born_pos >> 3)
                                                                             + 0x7FFF8000)
        && *(_BYTE *)(((unsigned __int64)&scene_script_config_ptr->born_pos >> 3) + 0x7FFF8000) != 0
        || *(_BYTE *)((((unsigned __int64)&scene_script_config_ptr->born_pos.z + 3) >> 3) + 0x7FFF8000) != 0
        && (((unsigned __int8)scene_script_config_ptr - 41) & 7) >= *(_BYTE *)((((unsigned __int64)&scene_script_config_ptr->born_pos.z
                                                                               + 3) >> 3)
                                                                             + 0x7FFF8000) )
      {
        n = (std::__shared_ptr_access<ScenePlayerLocation,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *)__asan_report_load_n(&scene_script_config_ptr->born_pos, 12LL);
      }
      *(_QWORD *)&n->last_valid_pos.x = *(_QWORD *)&scene_script_config_ptr->born_pos.x;
      n->last_valid_pos.z = scene_script_config_ptr->born_pos.z;
      v9 = std::__shared_ptr_access<ScenePlayerLocation,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<ScenePlayerLocation,(__gnu_cxx::_Lock_policy)2,false,false> *const)player_location_ptr);
      if ( (((unsigned __int8)v9 + 36) & 7) >= *(_BYTE *)(((unsigned __int64)&v9->last_valid_rot >> 3) + 0x7FFF8000)
        && *(_BYTE *)(((unsigned __int64)&v9->last_valid_rot >> 3) + 0x7FFF8000) != 0
        || *(_BYTE *)((((unsigned __int64)&v9->last_valid_rot.z + 3) >> 3) + 0x7FFF8000) != 0
        && (((unsigned __int8)v9 + 47) & 7) >= *(_BYTE *)((((unsigned __int64)&v9->last_valid_rot.z + 3) >> 3)
                                                        + 0x7FFF8000) )
      {
        v9 = (std::__shared_ptr_access<ScenePlayerLocation,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *)__asan_report_store_n(&v9->last_valid_rot, 12LL);
      }
      if ( *(char *)(((unsigned __int64)&scene_script_config_ptr->born_rot >> 3) + 0x7FFF8000) < 0
        || *(_BYTE *)((((unsigned __int64)&scene_script_config_ptr->born_rot.z + 3) >> 3) + 0x7FFF8000) != 0
        && (((unsigned __int8)scene_script_config_ptr - 29) & 7) >= *(_BYTE *)((((unsigned __int64)&scene_script_config_ptr->born_rot.z
                                                                               + 3) >> 3)
                                                                             + 0x7FFF8000) )
      {
        v9 = (std::__shared_ptr_access<ScenePlayerLocation,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *)__asan_report_load_n(&scene_script_config_ptr->born_rot, 12LL);
      }
      *(_QWORD *)&v9->last_valid_rot.x = *(_QWORD *)&scene_script_config_ptr->born_rot.x;
      v9->last_valid_rot.z = scene_script_config_ptr->born_rot.z;
      if ( *(char *)(((unsigned __int64)&this->owner_player_location_.last_valid_pos >> 3) + 0x7FFF8000) < 0
        || *(_BYTE *)((((unsigned __int64)&this->owner_player_location_.last_valid_pos.z + 3) >> 3) + 0x7FFF8000) != 0
        && (((unsigned __int8)this - 125) & 7) >= *(_BYTE *)((((unsigned __int64)&this->owner_player_location_.last_valid_pos.z
                                                             + 3) >> 3)
                                                           + 0x7FFF8000) )
      {
        __asan_report_store_n(&this->owner_player_location_.last_valid_pos, 12LL);
      }
      if ( (((unsigned __int8)scene_script_config_ptr - 52) & 7) >= *(_BYTE *)(((unsigned __int64)&scene_script_config_ptr->born_pos >> 3)
                                                                             + 0x7FFF8000)
        && *(_BYTE *)(((unsigned __int64)&scene_script_config_ptr->born_pos >> 3) + 0x7FFF8000) != 0
        || *(_BYTE *)((((unsigned __int64)&scene_script_config_ptr->born_pos.z + 3) >> 3) + 0x7FFF8000) != 0
        && (((unsigned __int8)scene_script_config_ptr - 41) & 7) >= *(_BYTE *)((((unsigned __int64)&scene_script_config_ptr->born_pos.z
                                                                               + 3) >> 3)
                                                                             + 0x7FFF8000) )
      {
        __asan_report_load_n(&scene_script_config_ptr->born_pos, 12LL);
      }
      this->owner_player_location_.last_valid_pos = scene_script_config_ptr->born_pos;
      if ( (((unsigned __int8)this - 124) & 7) >= *(_BYTE *)(((unsigned __int64)&this->owner_player_location_.last_valid_rot >> 3)
                                                           + 0x7FFF8000)
        && *(_BYTE *)(((unsigned __int64)&this->owner_player_location_.last_valid_rot >> 3) + 0x7FFF8000) != 0
        || *(_BYTE *)((((unsigned __int64)&this->owner_player_location_.last_valid_rot.z + 3) >> 3) + 0x7FFF8000) != 0
        && (((unsigned __int8)this - 113) & 7) >= *(_BYTE *)((((unsigned __int64)&this->owner_player_location_.last_valid_rot.z
                                                             + 3) >> 3)
                                                           + 0x7FFF8000) )
      {
        __asan_report_store_n(&this->owner_player_location_.last_valid_rot, 12LL);
      }
      this->owner_player_location_.last_valid_rot = scene_script_config_ptr->born_rot;
      result = 0;
    }
    else
    {
      common::milog::MiLogStream::create(
        &v13,
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/scene/scene.cpp",
        "setPlayerLastValidLocationOnFirstLogin",
        4069);
      v7 = common::milog::MiLogStream::operator<<<char [40],(char *[40])0>(
             &v13,
             (const char (*)[40])"findSceneScriptConfig failed, scene_id:");
      common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v7, &this->scene_id_);
      common::milog::MiLogStream::~MiLogStream(&v13);
      result = -1;
    }
  }
  if ( v14 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 4083: range 0000000015996D46-0000000015996E3B
void __fastcall Scene::erasePlayerLocation(Scene *const this, uint32_t uid)
{
  unsigned __int64 v2; // rbx
  __int64 v3; // rax
  unsigned __int64 v4; // r12
  SceneBlockGroupComp *BlockGroupComp; // rax
  char v6[96]; // [rsp+10h] [rbp-60h] BYREF

  v2 = (unsigned __int64)v6;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_0(64LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "1 32 4 8 uid:4082";
  *(_QWORD *)(v2 + 16) = Scene::erasePlayerLocation;
  v4 = v2 >> 3;
  *(_DWORD *)(v4 + 2147450880) = -235802127;
  *(_DWORD *)(v4 + 2147450884) = -202116348;
  *(_DWORD *)(v2 + 32) = uid;
  std::map<unsigned int,std::shared_ptr<ScenePlayerLocation>>::erase(
    &this->player_location_map_,
    (const std::map<unsigned int,std::shared_ptr<ScenePlayerLocation>>::key_type *)(v2 + 32));
  BlockGroupComp = Scene::getBlockGroupComp(this);
  SceneBlockGroupComp::erasePlayerReloadPos(BlockGroupComp, *(_DWORD *)(v2 + 32));
  if ( v6 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
  }
};

// Line 4089: range 0000000015996E3C-0000000015996FC9
Scene *__fastcall Scene::getPlayerLocation(Scene *const this, __int64 uid, int a3)
{
  unsigned __int64 v3; // rbx
  __int64 v4; // rax
  _DWORD *v5; // r12
  std::_Rb_tree_iterator<std::pair<unsigned int const,std::shared_ptr<ScenePlayerLocation> > >::pointer v6; // rax
  std::_Rb_tree_iterator<std::pair<unsigned int const,std::shared_ptr<ScenePlayerLocation> > >::_Self __y; // [rsp+28h] [rbp-88h] BYREF
  char v10[128]; // [rsp+30h] [rbp-80h] BYREF

  v3 = (unsigned __int64)v10;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_1(96LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "2 48 4 8 uid:4088 64 8 7 it:4090";
  *(_QWORD *)(v3 + 16) = Scene::getPlayerLocation;
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = -234556943;
  v5[536862722] = -202116352;
  *(_DWORD *)(v3 + 48) = a3;
  *(std::map<unsigned int,std::shared_ptr<ScenePlayerLocation>>::iterator *)(v3 + 64) = std::map<unsigned int,std::shared_ptr<ScenePlayerLocation>>::find(
                                                                                          (std::map<unsigned int,std::shared_ptr<ScenePlayerLocation>> *const)(uid + 1072),
                                                                                          (const std::map<unsigned int,std::shared_ptr<ScenePlayerLocation>>::key_type *)(v3 + 48));
  __y._M_node = std::map<unsigned int,std::shared_ptr<ScenePlayerLocation>>::end((std::map<unsigned int,std::shared_ptr<ScenePlayerLocation>> *const)(uid + 1072))._M_node;
  if ( std::operator==(
         (const std::_Rb_tree_iterator<std::pair<unsigned int const,std::shared_ptr<ScenePlayerLocation> > >::_Self *)(v3 + 64),
         &__y) )
  {
    std::shared_ptr<ScenePlayerLocation>::shared_ptr((std::shared_ptr<ScenePlayerLocation> *const)this, 0LL);
  }
  else
  {
    v6 = std::_Rb_tree_iterator<std::pair<unsigned int const,std::shared_ptr<ScenePlayerLocation>>>::operator->((const std::_Rb_tree_iterator<std::pair<unsigned int const,std::shared_ptr<ScenePlayerLocation> > > *const)(v3 + 64));
    std::shared_ptr<ScenePlayerLocation>::shared_ptr((std::shared_ptr<ScenePlayerLocation> *const)this, &v6->second);
  }
  if ( v10 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8008) = 0;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8008) = -168430091;
  }
  return this;
};

// Line 4102: range 0000000015996FCA-000000001599787B
int32_t __cdecl Scene::getPlayerLocation(Scene *const this, uint32_t uid, Vector3 *pos, Vector3 *rot)
{
  unsigned __int64 v4; // rbx
  __int64 v5; // rax
  unsigned __int64 v6; // r13
  LuaConfigMgr *p_lua_config_mgr; // rcx
  common::milog::MiLogStream *v8; // rax
  int32_t v9; // r14d
  std::__shared_ptr_access<ScenePlayerLocation,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v10; // rdx
  std::__shared_ptr_access<ScenePlayerLocation,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v11; // rdx
  int32_t result; // eax
  const SceneScriptConfig *scene_script_config_ptr; // [rsp+28h] [rbp-98h]
  common::milog::MiLogStream v16; // [rsp+30h] [rbp-90h] BYREF
  char v17[112]; // [rsp+50h] [rbp-70h] BYREF

  v4 = (unsigned __int64)v17;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v5 = __asan_stack_malloc_0(64LL);
    if ( v5 )
      v4 = v5;
  }
  *(_QWORD *)v4 = 1102416563LL;
  *(_QWORD *)(v4 + 8) = "1 32 16 24 player_location_ptr:4112";
  *(_QWORD *)(v4 + 16) = Scene::getPlayerLocation;
  v6 = v4 >> 3;
  *(_DWORD *)(v6 + 2147450880) = -235802127;
  *(_DWORD *)(v6 + 2147450884) = -202178560;
  ServiceBox::findService<GameserverService>();
  GameserverService::getConfig((GameserverService *const)(v4 + 32));
  p_lua_config_mgr = &std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 32))->design_config.lua_config_mgr;
  if ( *(_BYTE *)(((unsigned __int64)&this->scene_id_ >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->scene_id_ >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4(&this->scene_id_);
  }
  scene_script_config_ptr = LuaConfigMgr::findSceneScriptConfig(p_lua_config_mgr, this->scene_id_);
  std::shared_ptr<Config>::~shared_ptr((std::shared_ptr<Config> *const)(v4 + 32));
  if ( scene_script_config_ptr )
  {
    if ( ((unsigned __int8)pos & 7) >= *(_BYTE *)(((unsigned __int64)pos >> 3) + 0x7FFF8000)
      && *(_BYTE *)(((unsigned __int64)pos >> 3) + 0x7FFF8000) != 0
      || *(_BYTE *)((((unsigned __int64)&pos->z + 3) >> 3) + 0x7FFF8000) != 0
      && (((unsigned __int8)pos + 11) & 7) >= *(_BYTE *)((((unsigned __int64)&pos->z + 3) >> 3) + 0x7FFF8000) )
    {
      __asan_report_store_n(pos, 12LL);
    }
    if ( (((unsigned __int8)scene_script_config_ptr - 52) & 7) >= *(_BYTE *)(((unsigned __int64)&scene_script_config_ptr->born_pos >> 3)
                                                                           + 0x7FFF8000)
      && *(_BYTE *)(((unsigned __int64)&scene_script_config_ptr->born_pos >> 3) + 0x7FFF8000) != 0
      || *(_BYTE *)((((unsigned __int64)&scene_script_config_ptr->born_pos.z + 3) >> 3) + 0x7FFF8000) != 0
      && (((unsigned __int8)scene_script_config_ptr - 41) & 7) >= *(_BYTE *)((((unsigned __int64)&scene_script_config_ptr->born_pos.z
                                                                             + 3) >> 3)
                                                                           + 0x7FFF8000) )
    {
      __asan_report_load_n(&scene_script_config_ptr->born_pos, 12LL);
    }
    *(_QWORD *)&pos->x = *(_QWORD *)&scene_script_config_ptr->born_pos.x;
    pos->z = scene_script_config_ptr->born_pos.z;
    if ( ((unsigned __int8)rot & 7) >= *(_BYTE *)(((unsigned __int64)rot >> 3) + 0x7FFF8000)
      && *(_BYTE *)(((unsigned __int64)rot >> 3) + 0x7FFF8000) != 0
      || *(_BYTE *)((((unsigned __int64)&rot->z + 3) >> 3) + 0x7FFF8000) != 0
      && (((unsigned __int8)rot + 11) & 7) >= *(_BYTE *)((((unsigned __int64)&rot->z + 3) >> 3) + 0x7FFF8000) )
    {
      __asan_report_store_n(rot, 12LL);
    }
    if ( *(char *)(((unsigned __int64)&scene_script_config_ptr->born_rot >> 3) + 0x7FFF8000) < 0
      || *(_BYTE *)((((unsigned __int64)&scene_script_config_ptr->born_rot.z + 3) >> 3) + 0x7FFF8000) != 0
      && (((unsigned __int8)scene_script_config_ptr - 29) & 7) >= *(_BYTE *)((((unsigned __int64)&scene_script_config_ptr->born_rot.z
                                                                             + 3) >> 3)
                                                                           + 0x7FFF8000) )
    {
      __asan_report_load_n(&scene_script_config_ptr->born_rot, 12LL);
    }
    *(_QWORD *)&rot->x = *(_QWORD *)&scene_script_config_ptr->born_rot.x;
    rot->z = scene_script_config_ptr->born_rot.z;
    Scene::getPlayerLocation((Scene *const)(v4 + 32), (__int64)this, uid);
    if ( std::operator!=<ScenePlayerLocation>((const std::shared_ptr<ScenePlayerLocation> *)(v4 + 32), 0LL) )
    {
      v10 = std::__shared_ptr_access<ScenePlayerLocation,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<ScenePlayerLocation,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 32));
      if ( ((unsigned __int8)pos & 7) >= *(_BYTE *)(((unsigned __int64)pos >> 3) + 0x7FFF8000)
        && *(_BYTE *)(((unsigned __int64)pos >> 3) + 0x7FFF8000) != 0
        || *(_BYTE *)((((unsigned __int64)&pos->z + 3) >> 3) + 0x7FFF8000) != 0
        && (((unsigned __int8)pos + 11) & 7) >= *(_BYTE *)((((unsigned __int64)&pos->z + 3) >> 3) + 0x7FFF8000) )
      {
        __asan_report_store_n(pos, 12LL);
      }
      if ( (((unsigned __int8)v10 + 24) & 7) >= *(_BYTE *)(((unsigned __int64)&v10->last_valid_pos >> 3) + 0x7FFF8000)
        && *(_BYTE *)(((unsigned __int64)&v10->last_valid_pos >> 3) + 0x7FFF8000) != 0
        || *(_BYTE *)((((unsigned __int64)&v10->last_valid_pos.z + 3) >> 3) + 0x7FFF8000) != 0
        && (((unsigned __int8)v10 + 35) & 7) >= *(_BYTE *)((((unsigned __int64)&v10->last_valid_pos.z + 3) >> 3)
                                                         + 0x7FFF8000) )
      {
        __asan_report_load_n(&v10->last_valid_pos, 12LL);
      }
      *(_QWORD *)&pos->x = *(_QWORD *)&v10->last_valid_pos.x;
      pos->z = v10->last_valid_pos.z;
      v11 = std::__shared_ptr_access<ScenePlayerLocation,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<ScenePlayerLocation,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 32));
      if ( ((unsigned __int8)rot & 7) >= *(_BYTE *)(((unsigned __int64)rot >> 3) + 0x7FFF8000)
        && *(_BYTE *)(((unsigned __int64)rot >> 3) + 0x7FFF8000) != 0
        || *(_BYTE *)((((unsigned __int64)&rot->z + 3) >> 3) + 0x7FFF8000) != 0
        && (((unsigned __int8)rot + 11) & 7) >= *(_BYTE *)((((unsigned __int64)&rot->z + 3) >> 3) + 0x7FFF8000) )
      {
        __asan_report_store_n(rot, 12LL);
      }
      if ( (((unsigned __int8)v11 + 36) & 7) >= *(_BYTE *)(((unsigned __int64)&v11->last_valid_rot >> 3) + 0x7FFF8000)
        && *(_BYTE *)(((unsigned __int64)&v11->last_valid_rot >> 3) + 0x7FFF8000) != 0
        || *(_BYTE *)((((unsigned __int64)&v11->last_valid_rot.z + 3) >> 3) + 0x7FFF8000) != 0
        && (((unsigned __int8)v11 + 47) & 7) >= *(_BYTE *)((((unsigned __int64)&v11->last_valid_rot.z + 3) >> 3)
                                                         + 0x7FFF8000) )
      {
        __asan_report_load_n(&v11->last_valid_rot, 12LL);
      }
      *(_QWORD *)&rot->x = *(_QWORD *)&v11->last_valid_rot.x;
      rot->z = v11->last_valid_rot.z;
      if ( !SceneScriptConfig::isPosValid(scene_script_config_ptr, pos) )
      {
        if ( ((unsigned __int8)pos & 7) >= *(_BYTE *)(((unsigned __int64)pos >> 3) + 0x7FFF8000)
          && *(_BYTE *)(((unsigned __int64)pos >> 3) + 0x7FFF8000) != 0
          || *(_BYTE *)((((unsigned __int64)&pos->z + 3) >> 3) + 0x7FFF8000) != 0
          && (((unsigned __int8)pos + 11) & 7) >= *(_BYTE *)((((unsigned __int64)&pos->z + 3) >> 3) + 0x7FFF8000) )
        {
          __asan_report_store_n(pos, 12LL);
        }
        if ( (((unsigned __int8)scene_script_config_ptr - 52) & 7) >= *(_BYTE *)(((unsigned __int64)&scene_script_config_ptr->born_pos >> 3)
                                                                               + 0x7FFF8000)
          && *(_BYTE *)(((unsigned __int64)&scene_script_config_ptr->born_pos >> 3) + 0x7FFF8000) != 0
          || *(_BYTE *)((((unsigned __int64)&scene_script_config_ptr->born_pos.z + 3) >> 3) + 0x7FFF8000) != 0
          && (((unsigned __int8)scene_script_config_ptr - 41) & 7) >= *(_BYTE *)((((unsigned __int64)&scene_script_config_ptr->born_pos.z
                                                                                 + 3) >> 3)
                                                                               + 0x7FFF8000) )
        {
          __asan_report_load_n(&scene_script_config_ptr->born_pos, 12LL);
        }
        *(_QWORD *)&pos->x = *(_QWORD *)&scene_script_config_ptr->born_pos.x;
        pos->z = scene_script_config_ptr->born_pos.z;
        if ( ((unsigned __int8)rot & 7) >= *(_BYTE *)(((unsigned __int64)rot >> 3) + 0x7FFF8000)
          && *(_BYTE *)(((unsigned __int64)rot >> 3) + 0x7FFF8000) != 0
          || *(_BYTE *)((((unsigned __int64)&rot->z + 3) >> 3) + 0x7FFF8000) != 0
          && (((unsigned __int8)rot + 11) & 7) >= *(_BYTE *)((((unsigned __int64)&rot->z + 3) >> 3) + 0x7FFF8000) )
        {
          __asan_report_store_n(rot, 12LL);
        }
        if ( *(char *)(((unsigned __int64)&scene_script_config_ptr->born_rot >> 3) + 0x7FFF8000) < 0
          || *(_BYTE *)((((unsigned __int64)&scene_script_config_ptr->born_rot.z + 3) >> 3) + 0x7FFF8000) != 0
          && (((unsigned __int8)scene_script_config_ptr - 29) & 7) >= *(_BYTE *)((((unsigned __int64)&scene_script_config_ptr->born_rot.z
                                                                                 + 3) >> 3)
                                                                               + 0x7FFF8000) )
        {
          __asan_report_load_n(&scene_script_config_ptr->born_rot, 12LL);
        }
        *(_QWORD *)&rot->x = *(_QWORD *)&scene_script_config_ptr->born_rot.x;
        rot->z = scene_script_config_ptr->born_rot.z;
      }
    }
    v9 = 0;
    std::shared_ptr<ScenePlayerLocation>::~shared_ptr((std::shared_ptr<ScenePlayerLocation> *const)(v4 + 32));
  }
  else
  {
    common::milog::MiLogStream::create(
      &v16,
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/scene/scene.cpp",
      "getPlayerLocation",
      4106);
    v8 = common::milog::MiLogStream::operator<<<char [39],(char *[39])0>(
           &v16,
           (const char (*)[39])"findSceneScriptConfig fails, scene_id:");
    common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v8, &this->scene_id_);
    common::milog::MiLogStream::~MiLogStream(&v16);
    v9 = -1;
  }
  result = v9;
  if ( v17 == (char *)v4 )
  {
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0LL;
  }
  else
  {
    *(_QWORD *)v4 = 1172321806LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 4128: range 000000001599787C-00000000159979E3
bool __cdecl Scene::isPaused(const Scene *const this)
{
  unsigned __int64 v1; // rbx
  __int64 v2; // rax
  unsigned __int64 v3; // r12
  bool isPaused; // r14
  Player *v5; // rax
  PlayerBasicComp *BasicComp; // rax
  bool result; // al
  uint32_t player_count; // [rsp+1Ch] [rbp-74h]
  char v9[112]; // [rsp+20h] [rbp-70h] BYREF

  v1 = (unsigned __int64)v9;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_0(64LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "1 32 16 15 player_ptr:4140";
  *(_QWORD *)(v1 + 16) = Scene::isPaused;
  v3 = v1 >> 3;
  *(_DWORD *)(v3 + 2147450880) = -235802127;
  *(_DWORD *)(v3 + 2147450884) = -202178560;
  player_count = Scene::getPlayerCount(this);
  if ( player_count <= 1 )
  {
    if ( player_count )
    {
      Scene::getOwnPlayer((const Scene *const)(v1 + 32));
      if ( std::operator==<Player>((const std::shared_ptr<Player> *)(v1 + 32), 0LL) )
      {
        isPaused = 0;
      }
      else
      {
        v5 = std::__shared_ptr_access<Player,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Player,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v1 + 32));
        BasicComp = Player::getBasicComp(v5);
        isPaused = PlayerBasicComp::isPaused(BasicComp);
      }
      std::shared_ptr<Player>::~shared_ptr((std::shared_ptr<Player> *const)(v1 + 32));
    }
    else
    {
      isPaused = 1;
    }
  }
  else
  {
    isPaused = 0;
  }
  result = isPaused;
  if ( v9 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 4150: range 0000000015997A36-0000000015997C41
void __cdecl Scene::notifySceneTime(Scene *const this, bool is_paused, uint64_t scene_time_ms)
{
  unsigned __int64 v3; // rbx
  __int64 v4; // rax
  _DWORD *v5; // r13
  std::function<ForeachPolicy(Player&)> p_func; // [rsp+20h] [rbp-C0h] BYREF
  char v8[160]; // [rsp+40h] [rbp-A0h] BYREF

  v3 = (unsigned __int64)v8;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_1(128LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "1 48 40 11 notify:4151";
  *(_QWORD *)(v3 + 16) = Scene::notifySceneTime;
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = 61937;
  v5[536862722] = -218103808;
  v5[536862723] = -202116109;
  proto::SceneTimeNotify::SceneTimeNotify((proto::SceneTimeNotify *const)(v3 + 48));
  if ( *(_BYTE *)(((unsigned __int64)&this->scene_id_ >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->scene_id_ >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4(&this->scene_id_);
  }
  proto::SceneTimeNotify::set_scene_id((proto::SceneTimeNotify *const)(v3 + 48), this->scene_id_);
  proto::SceneTimeNotify::set_is_paused((proto::SceneTimeNotify *const)(v3 + 48), is_paused);
  proto::SceneTimeNotify::set_scene_time((proto::SceneTimeNotify *const)(v3 + 48), scene_time_ms);
  std::function<ForeachPolicy ()(Player &)>::function<Scene::notifySceneTime(bool,unsigned long)::{lambda(Player &)#1},void,void>(
    &p_func,
    (Scene::notifySceneTime::<lambda(Player&)>)(v3 + 48));
  Scene::foreachPlayer(this, &p_func);
  std::function<ForeachPolicy ()(Player &)>::~function(&p_func);
  proto::SceneTimeNotify::~SceneTimeNotify((proto::SceneTimeNotify *const)(v3 + 48));
  if ( v8 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
};

// Line 4156: range 00000000159979E4-0000000015997A34
ForeachPolicy __cdecl Scene::notifySceneTime(bool,unsigned long)::{lambda(Player &)#1}::operator()(
        const Scene::notifySceneTime::<lambda(Player&)> *const __closure,
        Player *player)
{
  if ( *(_BYTE *)(((unsigned __int64)__closure >> 3) + 0x7FFF8000) )
    __asan_report_load8();
  Player::sendProto(player, __closure->__notify);
  return 0;
};

// Line 4164: range 0000000015997C42-0000000015997E1F
uint64_t __cdecl Scene::getSceneTimeMs(Scene *const this)
{
  uint64_t v2; // rcx
  uint64_t now_ms; // [rsp+18h] [rbp-8h]

  if ( *(char *)(((unsigned __int64)&this->is_scene_timer_mgr_paused_ >> 3) + 0x7FFF8000) < 0 )
    __asan_report_load1(&this->is_scene_timer_mgr_paused_);
  if ( this->is_scene_timer_mgr_paused_ )
  {
    if ( *(_BYTE *)(((unsigned __int64)&this->scene_discrete_time_ms_ >> 3) + 0x7FFF8000) )
      __asan_report_load8();
    return this->scene_discrete_time_ms_;
  }
  else
  {
    if ( *(_BYTE *)(((unsigned __int64)&this->scene_discrete_last_update_time_ms >> 3) + 0x7FFF8000) )
      __asan_report_load8();
    if ( this->scene_discrete_last_update_time_ms )
    {
      now_ms = common::tools::TimeUtils::getNowMs();
      if ( *(_BYTE *)(((unsigned __int64)&this->scene_discrete_last_update_time_ms >> 3) + 0x7FFF8000) )
        __asan_report_load8();
      if ( now_ms > this->scene_discrete_last_update_time_ms )
      {
        if ( *(_BYTE *)(((unsigned __int64)&this->scene_discrete_time_ms_ >> 3) + 0x7FFF8000) )
          __asan_report_load8();
        v2 = this->scene_discrete_time_ms_ + now_ms;
        if ( *(_BYTE *)(((unsigned __int64)&this->scene_discrete_last_update_time_ms >> 3) + 0x7FFF8000) )
          __asan_report_load8();
        return v2 - this->scene_discrete_last_update_time_ms;
      }
      else
      {
        if ( *(_BYTE *)(((unsigned __int64)&this->scene_discrete_time_ms_ >> 3) + 0x7FFF8000) )
          __asan_report_load8();
        return this->scene_discrete_time_ms_;
      }
    }
    else
    {
      if ( *(_BYTE *)(((unsigned __int64)&this->scene_discrete_time_ms_ >> 3) + 0x7FFF8000) )
        __asan_report_load8();
      return this->scene_discrete_time_ms_;
    }
  }
};

// Line 4191: range 0000000015997E20-0000000015997EEA
void __cdecl Scene::setSceneDiscreteTimeMs(Scene *const this, uint64_t ms, bool is_paused, uint64_t last_update_ms)
{
  if ( *(_BYTE *)(((unsigned __int64)&this->scene_discrete_time_ms_ >> 3) + 0x7FFF8000) )
    __asan_report_store8(&this->scene_discrete_time_ms_, ms);
  this->scene_discrete_time_ms_ = ms;
  if ( *(char *)(((unsigned __int64)&this->is_scene_timer_mgr_paused_ >> 3) + 0x7FFF8000) < 0 )
    __asan_report_store1(&this->is_scene_timer_mgr_paused_, ms, &this->is_scene_timer_mgr_paused_);
  this->is_scene_timer_mgr_paused_ = is_paused;
  if ( *(_BYTE *)(((unsigned __int64)&this->scene_discrete_last_update_time_ms >> 3) + 0x7FFF8000) )
    __asan_report_store8(&this->scene_discrete_last_update_time_ms, ms);
  this->scene_discrete_last_update_time_ms = last_update_ms;
};

// Line 4199: range 0000000015997EEC-0000000015998257
// local variable allocation has failed, the output may be wrong!
common::tools::TimerProxyPtr __cdecl Scene::addSceneTimerS(
        Scene *const this,
        common::tools::TimeoutFunc *p_callback,
        uint32_t interval,
        bool is_repeated)
{
  bool v4; // r8
  unsigned __int64 v5; // rbx
  __int64 v6; // rax
  unsigned __int64 v7; // r12
  common::milog::MiLogStream *v8; // rax
  common::tools::TimerProxyPtr result; // rax
  void (*SceneId)(const std::_Any_data *, unsigned __int64 *); // r15
  bool (*OwnerUid)(std::_Any_data *, const std::_Any_data *, std::_Manager_operation); // r14
  common::milog::MiLogStream *v12; // rax
  common::tools::TimeoutFunc v13; // [rsp-20h] [rbp-F0h]
  uint32_t v14; // [rsp+0h] [rbp-D0h]
  char *v15; // [rsp+8h] [rbp-C8h]
  uint32_t func_4; // [rsp+18h] [rbp-B8h]
  bool is_repeateda; // [rsp+20h] [rbp-B0h]
  _BOOL4 intervala; // [rsp+24h] [rbp-ACh]
  common::tools::TimeoutFunc *p_callbacka; // [rsp+28h] [rbp-A8h]
  common::milog::MiLogStream v20; // [rsp+40h] [rbp-90h] BYREF
  char v21[112]; // [rsp+60h] [rbp-70h] BYREF

  p_callbacka = *(common::tools::TimeoutFunc **)&interval;
  intervala = is_repeated;
  is_repeateda = v4;
  v5 = (unsigned __int64)v21;
  v15 = v21;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v6 = __asan_stack_malloc_0(64LL);
    if ( v6 )
      v5 = v6;
  }
  *(_QWORD *)v5 = 1102416563LL;
  *(_QWORD *)(v5 + 8) = "1 32 16 20 timer_proxy_ptr:4205";
  *(_QWORD *)(v5 + 16) = Scene::addSceneTimerS;
  v7 = v5 >> 3;
  *(_DWORD *)(v7 + 2147450880) = -235802127;
  *(_DWORD *)(v7 + 2147450884) = -202178560;
  if ( std::operator==<SceneTimerMgr>((const std::shared_ptr<SceneTimerMgr> *)&p_callback[41], 0LL) )
  {
    common::milog::MiLogStream::create(
      &v20,
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/scene/scene.cpp",
      (const char *)&timeout_callback,
      4202);
    v8 = common::milog::MiLogStream::operator<<<char [32],(char *[32])0>(
           &v20,
           (const char (*)[32])"scene_timer_mgr_ptr_ is nullptr");
    common::milog::MiLogStream::operator<<<Scene,(Scene*)0>(v8, (const Scene *)p_callback);
    common::milog::MiLogStream::~MiLogStream(&v20);
    std::shared_ptr<common::tools::TimerProxy>::shared_ptr((std::shared_ptr<common::tools::TimerProxy> *const)this, 0LL);
  }
  else
  {
    func_4 = (unsigned int)std::__shared_ptr_access<SceneTimerMgr,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<SceneTimerMgr,(__gnu_cxx::_Lock_policy)2,false,false> *const)&p_callback[41]);
    SceneId = (void (*)(const std::_Any_data *, unsigned __int64 *))Scene::getSceneId((const Scene *const)p_callback);
    OwnerUid = (bool (*)(std::_Any_data *, const std::_Any_data *, std::_Manager_operation))Scene::getOwnerUid((const Scene *const)p_callback);
    std::function<void ()(unsigned long)>::function((std::function<void(long unsigned int)> *const)&v20, p_callbacka);
    v13._M_invoker = SceneId;
    v13._M_manager = OwnerUid;
    *(_QWORD *)&v13._M_functor._M_pod_data[8] = 4205LL;
    v13._M_functor._M_unused._M_object = (void *)&timeout_callback;
    common::tools::TimerMgr::addTimerS(
      (common::tools::TimerMgr *const)(v5 + 32),
      v13,
      func_4,
      (bool)&v20,
      (const char *)intervala,
      (const char *)is_repeateda,
      (int32_t)"./src/scene/scene.cpp",
      v14,
      (uint32_t)v21);
    std::function<void ()(unsigned long)>::~function((std::function<void(long unsigned int)> *const)&v20);
    if ( std::operator==<common::tools::TimerProxy>(0LL, (const std::shared_ptr<common::tools::TimerProxy> *)(v5 + 32)) )
    {
      common::milog::MiLogStream::create(
        &v20,
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/scene/scene.cpp",
        (const char *)&timeout_callback,
        4208);
      v12 = common::milog::MiLogStream::operator<<<char [17],(char *[17])0>(
              &v20,
              (const char (*)[17])"addTimerS failed");
      common::milog::MiLogStream::operator<<<Scene,(Scene*)0>(v12, (const Scene *)p_callback);
      common::milog::MiLogStream::~MiLogStream(&v20);
      std::shared_ptr<common::tools::TimerProxy>::shared_ptr(
        (std::shared_ptr<common::tools::TimerProxy> *const)this,
        0LL);
    }
    else
    {
      std::shared_ptr<common::tools::TimerProxy>::shared_ptr(
        (std::shared_ptr<common::tools::TimerProxy> *const)this,
        (std::shared_ptr<common::tools::TimerProxy> *)(v5 + 32));
    }
    std::shared_ptr<common::tools::TimerProxy>::~shared_ptr((std::shared_ptr<common::tools::TimerProxy> *const)(v5 + 32));
  }
  if ( v15 == (char *)v5 )
  {
    *(_QWORD *)((v5 >> 3) + 0x7FFF8000) = 0LL;
  }
  else
  {
    *(_QWORD *)v5 = 1172321806LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
  }
  result._M_ptr = (std::__shared_ptr<common::tools::TimerProxy,(__gnu_cxx::_Lock_policy)2>::element_type *)this;
  return result;
};

// Line 4216: range 0000000015998258-00000000159985C3
// local variable allocation has failed, the output may be wrong!
common::tools::TimerProxyPtr __cdecl Scene::addSceneTimerMS(
        Scene *const this,
        common::tools::TimeoutFunc *p_callback,
        uint32_t interval_ms,
        bool is_repeated)
{
  bool v4; // r8
  unsigned __int64 v5; // rbx
  __int64 v6; // rax
  unsigned __int64 v7; // r12
  common::milog::MiLogStream *v8; // rax
  common::tools::TimerProxyPtr result; // rax
  void (*SceneId)(const std::_Any_data *, unsigned __int64 *); // r15
  bool (*OwnerUid)(std::_Any_data *, const std::_Any_data *, std::_Manager_operation); // r14
  common::milog::MiLogStream *v12; // rax
  common::tools::TimeoutFunc v13; // [rsp-20h] [rbp-F0h]
  uint32_t v14; // [rsp+0h] [rbp-D0h]
  char *v15; // [rsp+8h] [rbp-C8h]
  uint32_t func_4; // [rsp+18h] [rbp-B8h]
  bool is_repeateda; // [rsp+20h] [rbp-B0h]
  _BOOL4 interval_msa; // [rsp+24h] [rbp-ACh]
  common::tools::TimeoutFunc *p_callbacka; // [rsp+28h] [rbp-A8h]
  common::milog::MiLogStream v20; // [rsp+40h] [rbp-90h] BYREF
  char v21[112]; // [rsp+60h] [rbp-70h] BYREF

  p_callbacka = *(common::tools::TimeoutFunc **)&interval_ms;
  interval_msa = is_repeated;
  is_repeateda = v4;
  v5 = (unsigned __int64)v21;
  v15 = v21;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v6 = __asan_stack_malloc_0(64LL);
    if ( v6 )
      v5 = v6;
  }
  *(_QWORD *)v5 = 1102416563LL;
  *(_QWORD *)(v5 + 8) = "1 32 16 20 timer_proxy_ptr:4222";
  *(_QWORD *)(v5 + 16) = Scene::addSceneTimerMS;
  v7 = v5 >> 3;
  *(_DWORD *)(v7 + 2147450880) = -235802127;
  *(_DWORD *)(v7 + 2147450884) = -202178560;
  if ( std::operator==<SceneTimerMgr>((const std::shared_ptr<SceneTimerMgr> *)&p_callback[41], 0LL) )
  {
    common::milog::MiLogStream::create(
      &v20,
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/scene/scene.cpp",
      (const char *)&stru_258DFF20,
      4219);
    v8 = common::milog::MiLogStream::operator<<<char [32],(char *[32])0>(
           &v20,
           (const char (*)[32])"scene_timer_mgr_ptr_ is nullptr");
    common::milog::MiLogStream::operator<<<Scene,(Scene*)0>(v8, (const Scene *)p_callback);
    common::milog::MiLogStream::~MiLogStream(&v20);
    std::shared_ptr<common::tools::TimerProxy>::shared_ptr((std::shared_ptr<common::tools::TimerProxy> *const)this, 0LL);
  }
  else
  {
    func_4 = (unsigned int)std::__shared_ptr_access<SceneTimerMgr,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<SceneTimerMgr,(__gnu_cxx::_Lock_policy)2,false,false> *const)&p_callback[41]);
    SceneId = (void (*)(const std::_Any_data *, unsigned __int64 *))Scene::getSceneId((const Scene *const)p_callback);
    OwnerUid = (bool (*)(std::_Any_data *, const std::_Any_data *, std::_Manager_operation))Scene::getOwnerUid((const Scene *const)p_callback);
    std::function<void ()(unsigned long)>::function((std::function<void(long unsigned int)> *const)&v20, p_callbacka);
    v13._M_invoker = SceneId;
    v13._M_manager = OwnerUid;
    *(_QWORD *)&v13._M_functor._M_pod_data[8] = 4222LL;
    v13._M_functor._M_unused._M_object = (void *)&stru_258DFF20;
    common::tools::TimerMgr::addTimerMS(
      (common::tools::TimerMgr *const)(v5 + 32),
      v13,
      func_4,
      (bool)&v20,
      (const char *)interval_msa,
      (const char *)is_repeateda,
      (int32_t)"./src/scene/scene.cpp",
      v14,
      (uint32_t)v21);
    std::function<void ()(unsigned long)>::~function((std::function<void(long unsigned int)> *const)&v20);
    if ( std::operator==<common::tools::TimerProxy>(0LL, (const std::shared_ptr<common::tools::TimerProxy> *)(v5 + 32)) )
    {
      common::milog::MiLogStream::create(
        &v20,
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/scene/scene.cpp",
        (const char *)&stru_258DFF20,
        4225);
      v12 = common::milog::MiLogStream::operator<<<char [17],(char *[17])0>(
              &v20,
              (const char (*)[17])"addTimerS failed");
      common::milog::MiLogStream::operator<<<Scene,(Scene*)0>(v12, (const Scene *)p_callback);
      common::milog::MiLogStream::~MiLogStream(&v20);
      std::shared_ptr<common::tools::TimerProxy>::shared_ptr(
        (std::shared_ptr<common::tools::TimerProxy> *const)this,
        0LL);
    }
    else
    {
      std::shared_ptr<common::tools::TimerProxy>::shared_ptr(
        (std::shared_ptr<common::tools::TimerProxy> *const)this,
        (std::shared_ptr<common::tools::TimerProxy> *)(v5 + 32));
    }
    std::shared_ptr<common::tools::TimerProxy>::~shared_ptr((std::shared_ptr<common::tools::TimerProxy> *const)(v5 + 32));
  }
  if ( v15 == (char *)v5 )
  {
    *(_QWORD *)((v5 >> 3) + 0x7FFF8000) = 0LL;
  }
  else
  {
    *(_QWORD *)v5 = 1172321806LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
  }
  result._M_ptr = (std::__shared_ptr<common::tools::TimerProxy,(__gnu_cxx::_Lock_policy)2>::element_type *)this;
  return result;
};

// Line 4233: range 00000000159985C4-000000001599892F
// local variable allocation has failed, the output may be wrong!
common::tools::TimerProxyPtr __cdecl Scene::addSceneUnixTimerS(
        Scene *const this,
        common::tools::TimeoutFunc *p_callback,
        uint32_t interval,
        bool is_repeated)
{
  bool v4; // r8
  unsigned __int64 v5; // rbx
  __int64 v6; // rax
  unsigned __int64 v7; // r12
  common::milog::MiLogStream *v8; // rax
  common::tools::TimerProxyPtr result; // rax
  void (*SceneId)(const std::_Any_data *, unsigned __int64 *); // r15
  bool (*OwnerUid)(std::_Any_data *, const std::_Any_data *, std::_Manager_operation); // r14
  common::milog::MiLogStream *v12; // rax
  common::tools::TimeoutFunc v13; // [rsp-20h] [rbp-F0h]
  uint32_t v14; // [rsp+0h] [rbp-D0h]
  char *v15; // [rsp+8h] [rbp-C8h]
  uint32_t func_4; // [rsp+18h] [rbp-B8h]
  bool is_repeateda; // [rsp+20h] [rbp-B0h]
  _BOOL4 intervala; // [rsp+24h] [rbp-ACh]
  common::tools::TimeoutFunc *p_callbacka; // [rsp+28h] [rbp-A8h]
  common::milog::MiLogStream v20; // [rsp+40h] [rbp-90h] BYREF
  char v21[112]; // [rsp+60h] [rbp-70h] BYREF

  p_callbacka = *(common::tools::TimeoutFunc **)&interval;
  intervala = is_repeated;
  is_repeateda = v4;
  v5 = (unsigned __int64)v21;
  v15 = v21;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v6 = __asan_stack_malloc_0(64LL);
    if ( v6 )
      v5 = v6;
  }
  *(_QWORD *)v5 = 1102416563LL;
  *(_QWORD *)(v5 + 8) = "1 32 16 20 timer_proxy_ptr:4239";
  *(_QWORD *)(v5 + 16) = Scene::addSceneUnixTimerS;
  v7 = v5 >> 3;
  *(_DWORD *)(v7 + 2147450880) = -235802127;
  *(_DWORD *)(v7 + 2147450884) = -202178560;
  if ( std::operator==<UnixTimerMgr>((const std::shared_ptr<UnixTimerMgr> *)&p_callback[41]._M_manager, 0LL) )
  {
    common::milog::MiLogStream::create(
      &v20,
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/scene/scene.cpp",
      (const char *)&stru_258DFF80,
      4236);
    v8 = common::milog::MiLogStream::operator<<<char [31],(char *[31])0>(
           &v20,
           (const char (*)[31])"unix_timer_mgr_ptr_ is nullptr");
    common::milog::MiLogStream::operator<<<Scene,(Scene*)0>(v8, (const Scene *)p_callback);
    common::milog::MiLogStream::~MiLogStream(&v20);
    std::shared_ptr<common::tools::TimerProxy>::shared_ptr((std::shared_ptr<common::tools::TimerProxy> *const)this, 0LL);
  }
  else
  {
    func_4 = (unsigned int)std::__shared_ptr_access<UnixTimerMgr,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<UnixTimerMgr,(__gnu_cxx::_Lock_policy)2,false,false> *const)&p_callback[41]._M_manager);
    SceneId = (void (*)(const std::_Any_data *, unsigned __int64 *))Scene::getSceneId((const Scene *const)p_callback);
    OwnerUid = (bool (*)(std::_Any_data *, const std::_Any_data *, std::_Manager_operation))Scene::getOwnerUid((const Scene *const)p_callback);
    std::function<void ()(unsigned long)>::function((std::function<void(long unsigned int)> *const)&v20, p_callbacka);
    v13._M_invoker = SceneId;
    v13._M_manager = OwnerUid;
    *(_QWORD *)&v13._M_functor._M_pod_data[8] = 4239LL;
    v13._M_functor._M_unused._M_object = (void *)&stru_258DFF80;
    common::tools::TimerMgr::addTimerS(
      (common::tools::TimerMgr *const)(v5 + 32),
      v13,
      func_4,
      (bool)&v20,
      (const char *)intervala,
      (const char *)is_repeateda,
      (int32_t)"./src/scene/scene.cpp",
      v14,
      (uint32_t)v21);
    std::function<void ()(unsigned long)>::~function((std::function<void(long unsigned int)> *const)&v20);
    if ( std::operator==<common::tools::TimerProxy>(0LL, (const std::shared_ptr<common::tools::TimerProxy> *)(v5 + 32)) )
    {
      common::milog::MiLogStream::create(
        &v20,
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/scene/scene.cpp",
        (const char *)&stru_258DFF80,
        4242);
      v12 = common::milog::MiLogStream::operator<<<char [17],(char *[17])0>(
              &v20,
              (const char (*)[17])"addTimerS failed");
      common::milog::MiLogStream::operator<<<Scene,(Scene*)0>(v12, (const Scene *)p_callback);
      common::milog::MiLogStream::~MiLogStream(&v20);
      std::shared_ptr<common::tools::TimerProxy>::shared_ptr(
        (std::shared_ptr<common::tools::TimerProxy> *const)this,
        0LL);
    }
    else
    {
      std::shared_ptr<common::tools::TimerProxy>::shared_ptr(
        (std::shared_ptr<common::tools::TimerProxy> *const)this,
        (std::shared_ptr<common::tools::TimerProxy> *)(v5 + 32));
    }
    std::shared_ptr<common::tools::TimerProxy>::~shared_ptr((std::shared_ptr<common::tools::TimerProxy> *const)(v5 + 32));
  }
  if ( v15 == (char *)v5 )
  {
    *(_QWORD *)((v5 >> 3) + 0x7FFF8000) = 0LL;
  }
  else
  {
    *(_QWORD *)v5 = 1172321806LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
  }
  result._M_ptr = (std::__shared_ptr<common::tools::TimerProxy,(__gnu_cxx::_Lock_policy)2>::element_type *)this;
  return result;
};

// Line 4250: range 0000000015998930-0000000015998C9B
// local variable allocation has failed, the output may be wrong!
common::tools::TimerProxyPtr __cdecl Scene::addSceneUnixTimerMS(
        Scene *const this,
        common::tools::TimeoutFunc *p_callback,
        uint32_t interval_ms,
        bool is_repeated)
{
  bool v4; // r8
  unsigned __int64 v5; // rbx
  __int64 v6; // rax
  unsigned __int64 v7; // r12
  common::milog::MiLogStream *v8; // rax
  common::tools::TimerProxyPtr result; // rax
  void (*SceneId)(const std::_Any_data *, unsigned __int64 *); // r15
  bool (*OwnerUid)(std::_Any_data *, const std::_Any_data *, std::_Manager_operation); // r14
  common::milog::MiLogStream *v12; // rax
  common::tools::TimeoutFunc v13; // [rsp-20h] [rbp-F0h]
  uint32_t v14; // [rsp+0h] [rbp-D0h]
  char *v15; // [rsp+8h] [rbp-C8h]
  uint32_t func_4; // [rsp+18h] [rbp-B8h]
  bool is_repeateda; // [rsp+20h] [rbp-B0h]
  _BOOL4 interval_msa; // [rsp+24h] [rbp-ACh]
  common::tools::TimeoutFunc *p_callbacka; // [rsp+28h] [rbp-A8h]
  common::milog::MiLogStream v20; // [rsp+40h] [rbp-90h] BYREF
  char v21[112]; // [rsp+60h] [rbp-70h] BYREF

  p_callbacka = *(common::tools::TimeoutFunc **)&interval_ms;
  interval_msa = is_repeated;
  is_repeateda = v4;
  v5 = (unsigned __int64)v21;
  v15 = v21;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v6 = __asan_stack_malloc_0(64LL);
    if ( v6 )
      v5 = v6;
  }
  *(_QWORD *)v5 = 1102416563LL;
  *(_QWORD *)(v5 + 8) = "1 32 16 20 timer_proxy_ptr:4256";
  *(_QWORD *)(v5 + 16) = Scene::addSceneUnixTimerMS;
  v7 = v5 >> 3;
  *(_DWORD *)(v7 + 2147450880) = -235802127;
  *(_DWORD *)(v7 + 2147450884) = -202178560;
  if ( std::operator==<UnixTimerMgr>((const std::shared_ptr<UnixTimerMgr> *)&p_callback[41]._M_manager, 0LL) )
  {
    common::milog::MiLogStream::create(
      &v20,
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/scene/scene.cpp",
      (const char *)&stru_258E0020,
      4253);
    v8 = common::milog::MiLogStream::operator<<<char [31],(char *[31])0>(
           &v20,
           (const char (*)[31])"unix_timer_mgr_ptr_ is nullptr");
    common::milog::MiLogStream::operator<<<Scene,(Scene*)0>(v8, (const Scene *)p_callback);
    common::milog::MiLogStream::~MiLogStream(&v20);
    std::shared_ptr<common::tools::TimerProxy>::shared_ptr((std::shared_ptr<common::tools::TimerProxy> *const)this, 0LL);
  }
  else
  {
    func_4 = (unsigned int)std::__shared_ptr_access<UnixTimerMgr,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<UnixTimerMgr,(__gnu_cxx::_Lock_policy)2,false,false> *const)&p_callback[41]._M_manager);
    SceneId = (void (*)(const std::_Any_data *, unsigned __int64 *))Scene::getSceneId((const Scene *const)p_callback);
    OwnerUid = (bool (*)(std::_Any_data *, const std::_Any_data *, std::_Manager_operation))Scene::getOwnerUid((const Scene *const)p_callback);
    std::function<void ()(unsigned long)>::function((std::function<void(long unsigned int)> *const)&v20, p_callbacka);
    v13._M_invoker = SceneId;
    v13._M_manager = OwnerUid;
    *(_QWORD *)&v13._M_functor._M_pod_data[8] = 4256LL;
    v13._M_functor._M_unused._M_object = (void *)&stru_258E0020;
    common::tools::TimerMgr::addTimerMS(
      (common::tools::TimerMgr *const)(v5 + 32),
      v13,
      func_4,
      (bool)&v20,
      (const char *)interval_msa,
      (const char *)is_repeateda,
      (int32_t)"./src/scene/scene.cpp",
      v14,
      (uint32_t)v21);
    std::function<void ()(unsigned long)>::~function((std::function<void(long unsigned int)> *const)&v20);
    if ( std::operator==<common::tools::TimerProxy>(0LL, (const std::shared_ptr<common::tools::TimerProxy> *)(v5 + 32)) )
    {
      common::milog::MiLogStream::create(
        &v20,
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/scene/scene.cpp",
        (const char *)&stru_258E0020,
        4259);
      v12 = common::milog::MiLogStream::operator<<<char [18],(char *[18])0>(
              &v20,
              (const char (*)[18])"addTimerMS failed");
      common::milog::MiLogStream::operator<<<Scene,(Scene*)0>(v12, (const Scene *)p_callback);
      common::milog::MiLogStream::~MiLogStream(&v20);
      std::shared_ptr<common::tools::TimerProxy>::shared_ptr(
        (std::shared_ptr<common::tools::TimerProxy> *const)this,
        0LL);
    }
    else
    {
      std::shared_ptr<common::tools::TimerProxy>::shared_ptr(
        (std::shared_ptr<common::tools::TimerProxy> *const)this,
        (std::shared_ptr<common::tools::TimerProxy> *)(v5 + 32));
    }
    std::shared_ptr<common::tools::TimerProxy>::~shared_ptr((std::shared_ptr<common::tools::TimerProxy> *const)(v5 + 32));
  }
  if ( v15 == (char *)v5 )
  {
    *(_QWORD *)((v5 >> 3) + 0x7FFF8000) = 0LL;
  }
  else
  {
    *(_QWORD *)v5 = 1172321806LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
  }
  result._M_ptr = (std::__shared_ptr<common::tools::TimerProxy,(__gnu_cxx::_Lock_policy)2>::element_type *)this;
  return result;
};

// Line 4267: range 0000000015998C9C-0000000015998E05
int32_t __cdecl Scene::delTimer(Scene *const this, common::tools::TimerProxy *timer)
{
  common::milog::MiLogStream *v2; // rdx
  std::__shared_ptr_access<SceneTimerMgr,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v4; // rdx
  common::milog::MiLogStream *v5; // rdx
  common::milog::MiLogStream v6; // [rsp+10h] [rbp-30h] BYREF

  if ( std::operator==<SceneTimerMgr>(&this->scene_timer_mgr_ptr_, 0LL) )
  {
    common::milog::MiLogStream::create(
      &v6,
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/scene/scene.cpp",
      "delTimer",
      4270);
    v2 = common::milog::MiLogStream::operator<<<char [32],(char *[32])0>(
           &v6,
           (const char (*)[32])"scene_timer_mgr_ptr_ is nullptr");
    common::milog::MiLogStream::operator<<<Scene,(Scene*)0>(v2, this);
    common::milog::MiLogStream::~MiLogStream(&v6);
    return -1;
  }
  else
  {
    v4 = std::__shared_ptr_access<SceneTimerMgr,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<SceneTimerMgr,(__gnu_cxx::_Lock_policy)2,false,false> *const)&this->scene_timer_mgr_ptr_);
    if ( common::tools::TimerMgr::delTimer(v4, timer) )
    {
      common::milog::MiLogStream::create(
        &v6,
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/scene/scene.cpp",
        "delTimer",
        4275);
      v5 = common::milog::MiLogStream::operator<<<char [15],(char *[15])0>(&v6, (const char (*)[15])"delTimer fails");
      common::milog::MiLogStream::operator<<<Scene,(Scene*)0>(v5, this);
      common::milog::MiLogStream::~MiLogStream(&v6);
      return -1;
    }
    else
    {
      return 0;
    }
  }
};

// Line 4282: range 0000000015998E06-0000000015999596
__int64 __fastcall Scene::kickPlayer(Scene *const this, __int32 target_uid, __int8 can_kick_owner)
{
  unsigned __int64 v3; // r13
  __int64 v4; // rax
  _DWORD *v5; // r12
  common::milog::MiLogStream *v6; // rax
  unsigned int v7; // r14d
  common::milog::MiLogStream *v8; // rax
  common::milog::MiLogStream *v9; // rax
  common::milog::MiLogStream *v10; // rax
  Player *v11; // rax
  PlayerBasicComp *BasicComp; // rax
  Player *v13; // rax
  common::milog::MiLogStream *v14; // rax
  common::milog::MiLogStream *v15; // rax
  common::milog::MiLogStream *v16; // rax
  Scene *v17; // rax
  bool v18; // r14
  common::milog::MiLogStream *v19; // rax
  common::milog::MiLogStream *v20; // rax
  common::milog::MiLogStream *v21; // rax
  __int64 result; // rax
  std::string can_kick_ownera; // [rsp+0h] [rbp-1D0h]
  Scene *thisa; // [rsp+8h] [rbp-1C8h]
  PlayerSceneComp *target_scene_comp; // [rsp+18h] [rbp-1B8h]
  common::milog::MiLogStream v26; // [rsp+20h] [rbp-1B0h] BYREF
  TransferReason p_reason; // [rsp+40h] [rbp-190h] BYREF
  char v28[336]; // [rsp+80h] [rbp-150h] BYREF

  can_kick_ownera._M_string_length = (std::string::size_type)this;
  HIDWORD(can_kick_ownera._M_dataplus._M_p) = target_uid;
  LOBYTE(can_kick_ownera._M_dataplus._M_p) = can_kick_owner;
  v3 = (unsigned __int64)v28;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_3(288LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "9 32 1 11 holder:4297 48 4 14 owner_uid:4283 64 4 18 prev_scene_id:4300 80 4 15 target_uid:4281 "
                        "96 12 8 pos:4301 128 12 8 rot:4302 160 16 22 target_player_ptr:4290 192 16 19 dest_scene_ptr:430"
                        "8 224 32 11 notify:4316";
  *(_QWORD *)(v3 + 16) = Scene::kickPlayer;
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = -234556927;
  v5[536862722] = -234556924;
  v5[536862723] = -219020288;
  v5[536862724] = -219020288;
  v5[536862725] = -219021312;
  v5[536862726] = -219021312;
  v5[536862728] = -202116109;
  *(_DWORD *)(v3 + 80) = target_uid;
  *(_DWORD *)(v3 + 48) = Scene::getOwnerUid(this);
  if ( LOBYTE(can_kick_ownera._M_dataplus._M_p) != 1 && *(_DWORD *)(v3 + 80) == *(_DWORD *)(v3 + 48) )
  {
    common::milog::MiLogStream::create(
      &v26,
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/scene/scene.cpp",
      "kickPlayer",
      4286);
    v6 = common::milog::MiLogStream::operator<<<char [37],(char *[37])0>(
           &v26,
           (const char (*)[37])"kick target_uid cannot be self, uid:");
    common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v6, (const unsigned int *)(v3 + 48));
    common::milog::MiLogStream::~MiLogStream(&v26);
    v7 = -1;
  }
  else
  {
    Scene::findPlayer((const Scene *const)(v3 + 160), (__int64)this, *(_DWORD *)(v3 + 80));
    if ( std::operator==<Player>((const std::shared_ptr<Player> *)(v3 + 160), 0LL) )
    {
      common::milog::MiLogStream::create(
        &v26,
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/scene/scene.cpp",
        "kickPlayer",
        4293);
      v8 = common::milog::MiLogStream::operator<<<char [39],(char *[39])0>(
             &v26,
             (const char (*)[39])"find target player failed, target_uid:");
      v9 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v8, (const unsigned int *)(v3 + 80));
      v10 = common::milog::MiLogStream::operator<<<char [6],(char *[6])0>(v9, (const char (*)[6])" uid:");
      common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v10, (const unsigned int *)(v3 + 48));
      common::milog::MiLogStream::~MiLogStream(&v26);
      v7 = -1;
    }
    else
    {
      v11 = std::__shared_ptr_access<Player,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Player,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 160));
      BasicComp = Player::getBasicComp(v11);
      PlayerBasicComp::getNextTransNo[abi:cxx11]((std::string *)&v26, BasicComp);
      StatLogUtils::ContextHolder::ContextHolder((StatLogUtils::ContextHolder *const)(v3 + 32), 0x709u, can_kick_ownera);
      std::string::~string(&v26);
      v13 = std::__shared_ptr_access<Player,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Player,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 160));
      target_scene_comp = Player::getSceneComp(v13);
      *(_DWORD *)(v3 + 64) = 0;
      Vector3::Vector3((Vector3 *const)(v3 + 96), 0.0, 0.0, 0.0);
      Vector3::Vector3((Vector3 *const)(v3 + 128), 0.0, 0.0, 0.0);
      if ( PlayerSceneComp::getMyPrevSceneInfo(
             target_scene_comp,
             (uint32_t *)(v3 + 64),
             (Vector3 *)(v3 + 96),
             (Vector3 *)(v3 + 128)) )
      {
        common::milog::MiLogStream::create(
          &v26,
          &common::milog::MiLogDefault::default_log_obj_,
          3u,
          "./src/scene/scene.cpp",
          "kickPlayer",
          4305);
        common::milog::MiLogStream::operator<<<char [25],(char *[25])0>(
          &v26,
          (const char (*)[25])"getMyPrevSceneInfo fails");
        common::milog::MiLogStream::~MiLogStream(&v26);
        v7 = -1;
      }
      else
      {
        PlayerSceneComp::getPersonalScene((PlayerSceneComp *const)(v3 + 192), (uint32_t)target_scene_comp);
        if ( std::operator==<Scene>((const std::shared_ptr<Scene> *)(v3 + 192), 0LL) )
        {
          common::milog::MiLogStream::create(
            &v26,
            &common::milog::MiLogDefault::default_log_obj_,
            3u,
            "./src/scene/scene.cpp",
            "kickPlayer",
            4311);
          v14 = common::milog::MiLogStream::operator<<<char [37],(char *[37])0>(
                  &v26,
                  (const char (*)[37])"getPersonalScene failed, target_uid:");
          v15 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                  v14,
                  (const unsigned int *)(v3 + 80));
          v16 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                  v15,
                  (const char (*)[16])" prev_scene_id:");
          common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v16, (const unsigned int *)(v3 + 64));
          common::milog::MiLogStream::~MiLogStream(&v26);
          v7 = -1;
        }
        else
        {
          proto::SceneKickPlayerNotify::SceneKickPlayerNotify((proto::SceneKickPlayerNotify *const)(v3 + 224));
          proto::SceneKickPlayerNotify::set_kicker_uid(
            (proto::SceneKickPlayerNotify *const)(v3 + 224),
            *(_DWORD *)(v3 + 48));
          proto::SceneKickPlayerNotify::set_target_uid(
            (proto::SceneKickPlayerNotify *const)(v3 + 224),
            *(_DWORD *)(v3 + 80));
          Scene::notifyAllPlayer<proto::SceneKickPlayerNotify>(thisa, (proto::SceneKickPlayerNotify *)(v3 + 224), 0);
          TransferReason::TransferReason(&p_reason, ENTER_REASON_TEAM_KICK);
          v17 = std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::operator*((const std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 192));
          v18 = PlayerSceneComp::jumpToScene(
                  target_scene_comp,
                  v17,
                  (const Vector3 *)(v3 + 96),
                  (const Vector3 *)(v3 + 128),
                  0,
                  &p_reason) != 0;
          TransferReason::~TransferReason(&p_reason);
          if ( v18 )
          {
            common::milog::MiLogStream::create(
              &v26,
              &common::milog::MiLogDefault::default_log_obj_,
              3u,
              "./src/scene/scene.cpp",
              "kickPlayer",
              4322);
            v19 = common::milog::MiLogStream::operator<<<char [24],(char *[24])0>(
                    &v26,
                    (const char (*)[24])"jumpToScene fails, uid:");
            v20 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                    v19,
                    (const unsigned int *)(v3 + 48));
            v21 = common::milog::MiLogStream::operator<<<char [13],(char *[13])0>(
                    v20,
                    (const char (*)[13])" target_uid:");
            common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v21, (const unsigned int *)(v3 + 80));
            common::milog::MiLogStream::~MiLogStream(&v26);
            v7 = -1;
          }
          else
          {
            v7 = 0;
          }
          proto::SceneKickPlayerNotify::~SceneKickPlayerNotify((proto::SceneKickPlayerNotify *const)(v3 + 224));
        }
        std::shared_ptr<Scene>::~shared_ptr((std::shared_ptr<Scene> *const)(v3 + 192));
      }
      StatLogUtils::ContextHolder::~ContextHolder((StatLogUtils::ContextHolder *const)(v3 + 32));
    }
    std::shared_ptr<Player>::~shared_ptr((std::shared_ptr<Player> *const)(v3 + 160));
  }
  result = v7;
  if ( v28 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8010) = 0LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8018) = 0;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8020) = 0;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8020) = -168430091;
  }
  return result;
};

// Line 4330: range 0000000015999598-00000000159995BE
bool __cdecl Scene::isSceneFull(const Scene *const this)
{
  return std::map<unsigned int,ScenePlayerPeerInfo>::size(&this->peer_map_) > 3;
};

// Line 4335: range 00000000159995C0-00000000159995CE
proto_log::ChangeSceneTeamReason __cdecl Scene::getChangeSceneTeamReason(Scene *const this)
{
  return 1;
};

// Line 4340: range 00000000159995D0-000000001599975E
SceneTeamPtr __cdecl Scene::findSceneTeam(Scene *const this)
{
  unsigned __int64 v1; // rsi
  unsigned __int64 v2; // rbx
  __int64 v3; // rax
  unsigned __int64 v4; // r12
  unsigned __int64 v5; // rax
  SceneTeamPtr result; // rax
  char v7[96]; // [rsp+10h] [rbp-60h] BYREF

  v2 = (unsigned __int64)v7;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_0(64LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "1 32 16 14 world_ptr:4341";
  *(_QWORD *)(v2 + 16) = Scene::findSceneTeam;
  v4 = v2 >> 3;
  *(_DWORD *)(v4 + 2147450880) = -235802127;
  *(_DWORD *)(v4 + 2147450884) = -202178560;
  if ( *(_BYTE *)((v1 >> 3) + 0x7FFF8000) )
    __asan_report_load8();
  v5 = *(_QWORD *)v1 + 56LL;
  if ( *(_BYTE *)((v5 >> 3) + 0x7FFF8000) )
    v5 = __asan_report_load8();
  (*(void (__fastcall **)(unsigned __int64))v5)(v2 + 32);
  if ( std::operator==<World>((const std::shared_ptr<World> *)(v2 + 32), 0LL) )
  {
    std::shared_ptr<SceneTeam>::shared_ptr((std::shared_ptr<SceneTeam> *const)this, 0LL);
  }
  else
  {
    std::__shared_ptr_access<World,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<World,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 32));
    if ( *(_WORD *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
      __asan_report_store16(this, 0LL);
    World::getSceneTeam((World *const)this);
  }
  std::shared_ptr<World>::~shared_ptr((std::shared_ptr<World> *const)(v2 + 32));
  if ( v7 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
  }
  result._M_ptr = (std::__shared_ptr<SceneTeam,(__gnu_cxx::_Lock_policy)2>::element_type *)this;
  return result;
};

// Line 4350: range 0000000015999760-0000000015999970
int32_t __cdecl Scene::addChatInfo(Scene *const this, uint32_t channel_id, const proto::ChatInfo *chat_info)
{
  unsigned __int64 v3; // rbx
  __int64 v4; // rax
  unsigned __int64 v5; // r12
  unsigned __int64 v6; // rax
  int32_t v7; // r14d
  World *v8; // rax
  int32_t result; // eax
  common::milog::MiLogStream v11; // [rsp+20h] [rbp-90h] BYREF
  char v12[112]; // [rsp+40h] [rbp-70h] BYREF

  v3 = (unsigned __int64)v12;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_0(64LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "1 32 16 14 world_ptr:4351";
  *(_QWORD *)(v3 + 16) = Scene::addChatInfo;
  v5 = v3 >> 3;
  *(_DWORD *)(v5 + 2147450880) = -235802127;
  *(_DWORD *)(v5 + 2147450884) = -202178560;
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_load8();
  v6 = (unsigned __int64)(this->_vptr_DescribalBase + 7);
  if ( *(_BYTE *)((v6 >> 3) + 0x7FFF8000) )
    v6 = __asan_report_load8();
  (*(void (__fastcall **)(unsigned __int64, Scene *const))v6)(v3 + 32, this);
  if ( std::operator==<World>((const std::shared_ptr<World> *)(v3 + 32), 0LL) )
  {
    common::milog::MiLogStream::create(
      &v11,
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/scene/scene.cpp",
      "addChatInfo",
      4354);
    common::milog::MiLogStream::operator<<<char [18],(char *[18])0>(&v11, (const char (*)[18])"getOwnWorld fails");
    common::milog::MiLogStream::~MiLogStream(&v11);
    v7 = -1;
  }
  else
  {
    v8 = std::__shared_ptr_access<World,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<World,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 32));
    v7 = World::addChatInfo(v8, channel_id, chat_info);
  }
  std::shared_ptr<World>::~shared_ptr((std::shared_ptr<World> *const)(v3 + 32));
  result = v7;
  if ( v12 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 4361: range 0000000015999972-0000000015999A8A
void __cdecl Scene::getEntityVecByType(
        Scene *const this,
        std::vector<std::shared_ptr<Entity>> *entity_vec,
        data::EntityType entity_type)
{
  unsigned __int64 v3; // rax
  unsigned __int64 v4; // rdx
  std::unordered_map<unsigned int,std::shared_ptr<Entity>>::iterator __for_begin; // [rsp+20h] [rbp-30h] BYREF
  std::unordered_map<unsigned int,std::shared_ptr<Entity>>::iterator __for_end; // [rsp+28h] [rbp-28h] BYREF
  std::unordered_map<unsigned int,std::shared_ptr<Entity>> *__for_range; // [rsp+30h] [rbp-20h]
  std::pair<unsigned int const,std::shared_ptr<Entity> > *__in; // [rsp+38h] [rbp-18h]
  std::tuple_element<0,std::pair<unsigned int const,std::shared_ptr<Entity> > >::type *entiy_id; // [rsp+40h] [rbp-10h]
  std::tuple_element<1,std::pair<unsigned int const,std::shared_ptr<Entity> > >::type *entity_ptr; // [rsp+48h] [rbp-8h]

  __for_range = &this->entity_map_;
  __for_begin._M_cur = std::unordered_map<unsigned int,std::shared_ptr<Entity>>::begin(&this->entity_map_)._M_cur;
  __for_end._M_cur = std::unordered_map<unsigned int,std::shared_ptr<Entity>>::end(&this->entity_map_)._M_cur;
  while ( std::__detail::operator!=<std::pair<unsigned int const,std::shared_ptr<Entity>>,false>(
            &__for_begin,
            &__for_end) )
  {
    __in = std::__detail::_Node_iterator<std::pair<unsigned int const,std::shared_ptr<Entity>>,false,false>::operator*(&__for_begin);
    entiy_id = std::get<0ul,unsigned int const,std::shared_ptr<Entity>>(__in);
    entity_ptr = std::get<1ul,unsigned int const,std::shared_ptr<Entity>>(__in);
    v3 = (unsigned __int64)std::__shared_ptr_access<Entity,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Entity,(__gnu_cxx::_Lock_policy)2,false,false> *const)entity_ptr);
    if ( *(_BYTE *)((v3 >> 3) + 0x7FFF8000) )
      v3 = __asan_report_load8();
    v4 = *(_QWORD *)v3 + 32LL;
    if ( *(_BYTE *)((v4 >> 3) + 0x7FFF8000) )
      v3 = __asan_report_load8();
    if ( entity_type == (*(unsigned int (__fastcall **)(unsigned __int64))v4)(v3) )
      std::vector<std::shared_ptr<Entity>>::push_back(entity_vec, entity_ptr);
    std::__detail::_Node_iterator<std::pair<unsigned int const,std::shared_ptr<Entity>>,false,false>::operator++(&__for_begin);
  }
};

// Line 4372: range 0000000015999A8C-0000000015999CE5
void __fastcall Scene::addMassiveEntity(Scene *const this, uint32_t entity_type, int64_t obj_id, uint32_t entity_id)
{
  unsigned __int64 v4; // rbx
  __int64 v5; // rax
  _DWORD *v6; // r12
  std::unordered_map<long int,unsigned int> *v7; // rax
  char *v8; // rsi
  std::unordered_map<long int,unsigned int>::mapped_type *v9; // rax
  _DWORD *v10; // rdx
  char v11; // cl
  common::milog::MiLogStream *v12; // rax
  common::milog::MiLogStream *v13; // rax
  common::milog::MiLogStream *v14; // r14
  std::unordered_map<unsigned int,std::unordered_map<long int,unsigned int>>::mapped_type *v15; // rax
  unsigned __int64 val; // [rsp+28h] [rbp-B8h] BYREF
  common::milog::MiLogStream v19; // [rsp+30h] [rbp-B0h] BYREF
  char v20[144]; // [rsp+50h] [rbp-90h] BYREF

  v4 = (unsigned __int64)v20;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v5 = __asan_stack_malloc_1(96LL);
    if ( v5 )
      v4 = v5;
  }
  *(_QWORD *)v4 = 1102416563LL;
  *(_QWORD *)(v4 + 8) = "2 48 4 16 entity_type:4371 64 8 11 obj_id:4371";
  *(_QWORD *)(v4 + 16) = Scene::addMassiveEntity;
  v6 = (_DWORD *)(v4 >> 3);
  v6[536862720] = -235802127;
  v6[536862721] = -234556943;
  v6[536862722] = -202116352;
  *(_DWORD *)(v4 + 48) = entity_type;
  *(_QWORD *)(v4 + 64) = obj_id;
  v7 = std::unordered_map<unsigned int,std::unordered_map<long,unsigned int>>::operator[](
         &this->massive_entity_obj_map_,
         (const std::unordered_map<unsigned int,std::unordered_map<long int,unsigned int>>::key_type *)(v4 + 48));
  v8 = (char *)(v4 + 64);
  v9 = std::unordered_map<long,unsigned int>::operator[](
         v7,
         (const std::unordered_map<long int,unsigned int>::key_type *)(v4 + 64));
  v10 = v9;
  v11 = *(_BYTE *)(((unsigned __int64)v9 >> 3) + 0x7FFF8000);
  if ( v11 != 0 && (char)(((unsigned __int8)v9 & 7) + 3) >= v11 )
  {
    LOBYTE(v8) = v11 != 0;
    __asan_report_store4(v9, v8, (_BYTE)v9);
  }
  *v10 = entity_id;
  common::milog::MiLogStream::create(
    &v19,
    &common::milog::MiLogDefault::default_log_obj_,
    1u,
    "./src/scene/scene.cpp",
    "addMassiveEntity",
    4375);
  v12 = common::milog::MiLogStream::operator<<<char [44],(char *[44])0>(
          &v19,
          (const char (*)[44])"[PERF][MASSIVE_ENTITY] massive entity type:");
  v13 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v12, (const unsigned int *)(v4 + 48));
  v14 = common::milog::MiLogStream::operator<<<char [6],(char *[6])0>(v13, (const char (*)[6])" num:");
  v15 = std::unordered_map<unsigned int,std::unordered_map<long,unsigned int>>::operator[](
          &this->massive_entity_obj_map_,
          (const std::unordered_map<unsigned int,std::unordered_map<long int,unsigned int>>::key_type *)(v4 + 48));
  val = std::unordered_map<long,unsigned int>::size(v15);
  common::milog::MiLogStream::operator<<<unsigned long,(unsigned long *)0>(v14, &val);
  common::milog::MiLogStream::~MiLogStream(&v19);
  if ( v20 == (char *)v4 )
  {
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0LL;
    *(_DWORD *)((v4 >> 3) + 0x7FFF8008) = 0;
  }
  else
  {
    *(_QWORD *)v4 = 1172321806LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v4 >> 3) + 0x7FFF8008) = -168430091;
  }
};

// Line 4380: range 0000000015999CE6-0000000015999E12
void __fastcall Scene::deleteMassiveEntity(Scene *const this, uint32_t entity_type, int64_t obj_id)
{
  unsigned __int64 v3; // rbx
  __int64 v4; // rax
  _DWORD *v5; // r12
  std::unordered_map<long int,unsigned int> *v6; // rax
  char v8[128]; // [rsp+20h] [rbp-80h] BYREF

  v3 = (unsigned __int64)v8;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_1(96LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "2 48 4 16 entity_type:4379 64 8 11 obj_id:4379";
  *(_QWORD *)(v3 + 16) = Scene::deleteMassiveEntity;
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = -234556943;
  v5[536862722] = -202116352;
  *(_DWORD *)(v3 + 48) = entity_type;
  *(_QWORD *)(v3 + 64) = obj_id;
  v6 = std::unordered_map<unsigned int,std::unordered_map<long,unsigned int>>::operator[](
         &this->massive_entity_obj_map_,
         (const std::unordered_map<unsigned int,std::unordered_map<long int,unsigned int>>::key_type *)(v3 + 48));
  std::unordered_map<long,unsigned int>::erase(
    v6,
    (const std::unordered_map<long int,unsigned int>::key_type *)(v3 + 64));
  if ( v8 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8008) = 0;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8008) = -168430091;
  }
};

// Line 4385: range 0000000015999E14-0000000015999F3F
bool __fastcall Scene::hasMassiveEntity(Scene *const this, uint32_t entity_type, int64_t obj_id)
{
  unsigned __int64 v3; // rbx
  __int64 v4; // rax
  _DWORD *v5; // r12
  std::unordered_map<long int,unsigned int> *v6; // rax
  bool result; // al
  char v9[128]; // [rsp+20h] [rbp-80h] BYREF

  v3 = (unsigned __int64)v9;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_1(96LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "2 48 4 16 entity_type:4384 64 8 11 obj_id:4384";
  *(_QWORD *)(v3 + 16) = Scene::hasMassiveEntity;
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = -234556943;
  v5[536862722] = -202116352;
  *(_DWORD *)(v3 + 48) = entity_type;
  *(_QWORD *)(v3 + 64) = obj_id;
  v6 = std::unordered_map<unsigned int,std::unordered_map<long,unsigned int>>::operator[](
         &this->massive_entity_obj_map_,
         (const std::unordered_map<unsigned int,std::unordered_map<long int,unsigned int>>::key_type *)(v3 + 48));
  result = common::tools::MiscUtils::isContains<std::unordered_map<long,unsigned int>,long>(
             v6,
             (const __int64 *)(v3 + 64));
  if ( v9 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8008) = 0;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8008) = -168430091;
  }
  return result;
};

// Line 4390: range 0000000015999F40-000000001599A1F8
Scene *__fastcall Scene::findMassiveEntity(Scene *const this, unsigned __int64 entity_type, int64_t obj_id, __int64 a4)
{
  unsigned __int64 v4; // rbx
  __int64 v5; // rax
  _DWORD *v6; // r13
  std::unordered_map<long int,unsigned int> *v7; // rax
  std::unordered_map<long int,unsigned int> *v8; // rax
  unsigned __int64 v9; // rax
  void (__fastcall *v10)(std::shared_ptr<Entity> *, unsigned __int64, _QWORD); // r14
  std::__detail::_Node_iterator<std::pair<long int const,unsigned int>,false,false>::pointer v11; // rax
  int v14; // [rsp+Ch] [rbp-E4h]
  std::__detail::_Node_iterator_base<std::pair<long int const,unsigned int>,false> __y; // [rsp+28h] [rbp-C8h] BYREF
  std::shared_ptr<Entity> v16; // [rsp+30h] [rbp-C0h] BYREF
  char v17[176]; // [rsp+40h] [rbp-B0h] BYREF

  v14 = obj_id;
  v4 = (unsigned __int64)v17;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v5 = __asan_stack_malloc_1(128LL);
    if ( v5 )
      v4 = v5;
  }
  *(_QWORD *)v4 = 1102416563LL;
  *(_QWORD *)(v4 + 8) = "3 48 4 16 entity_type:4389 64 8 9 iter:4391 96 8 11 obj_id:4389";
  *(_QWORD *)(v4 + 16) = Scene::findMassiveEntity;
  v6 = (_DWORD *)(v4 >> 3);
  v6[536862720] = -235802127;
  v6[536862721] = -234556943;
  v6[536862722] = -218959360;
  v6[536862723] = -202116352;
  *(_DWORD *)(v4 + 48) = v14;
  *(_QWORD *)(v4 + 96) = a4;
  v7 = std::unordered_map<unsigned int,std::unordered_map<long,unsigned int>>::operator[](
         (std::unordered_map<unsigned int,std::unordered_map<long int,unsigned int>> *const)(entity_type + 1168),
         (const std::unordered_map<unsigned int,std::unordered_map<long int,unsigned int>>::key_type *)(v4 + 48));
  *(std::unordered_map<long int,unsigned int>::iterator *)(v4 + 64) = std::unordered_map<long,unsigned int>::find(
                                                                        v7,
                                                                        (const std::unordered_map<long int,unsigned int>::key_type *)(v4 + 96));
  v8 = std::unordered_map<unsigned int,std::unordered_map<long,unsigned int>>::operator[](
         (std::unordered_map<unsigned int,std::unordered_map<long int,unsigned int>> *const)(entity_type + 1168),
         (const std::unordered_map<unsigned int,std::unordered_map<long int,unsigned int>>::key_type *)(v4 + 48));
  __y._M_cur = std::unordered_map<long,unsigned int>::end(v8)._M_cur;
  if ( std::__detail::operator==<std::pair<long const,unsigned int>,false>(
         (const std::__detail::_Node_iterator_base<std::pair<long int const,unsigned int>,false> *)(v4 + 64),
         &__y) )
  {
    std::shared_ptr<MassiveEntity>::shared_ptr((std::shared_ptr<MassiveEntity> *const)this, 0LL);
  }
  else
  {
    if ( *(_BYTE *)((entity_type >> 3) + 0x7FFF8000) )
      __asan_report_load8();
    v9 = *(_QWORD *)entity_type + 120LL;
    if ( *(_BYTE *)((v9 >> 3) + 0x7FFF8000) )
      v9 = __asan_report_load8();
    v10 = *(void (__fastcall **)(std::shared_ptr<Entity> *, unsigned __int64, _QWORD))v9;
    v11 = std::__detail::_Node_iterator<std::pair<long const,unsigned int>,false,false>::operator->((const std::__detail::_Node_iterator<std::pair<long int const,unsigned int>,false,false> *const)(v4 + 64));
    if ( *(_BYTE *)(((unsigned __int64)&v11->second >> 3) + 0x7FFF8000) != 0
      && *(_BYTE *)(((unsigned __int64)&v11->second >> 3) + 0x7FFF8000) <= 3 )
    {
      v11 = (std::__detail::_Node_iterator<std::pair<long int const,unsigned int>,false,false>::pointer)__asan_report_load4(&v11->second);
    }
    v10(&v16, entity_type, v11->second);
    if ( *(_WORD *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
      __asan_report_store16(this, entity_type);
    std::dynamic_pointer_cast<MassiveEntity,Entity>((const std::shared_ptr<Entity> *)this);
    std::shared_ptr<Entity>::~shared_ptr(&v16);
  }
  if ( v17 == (char *)v4 )
  {
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v4 = 1172321806LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return this;
};

// Line 4401: range 000000001599A1FA-000000001599A3C3
bool __cdecl Scene::isInMpMode(Scene *const this)
{
  unsigned __int64 v1; // rbx
  __int64 v2; // rax
  unsigned __int64 v3; // r12
  unsigned __int64 v4; // rax
  unsigned __int64 v5; // rax
  unsigned __int64 v6; // rdx
  bool v7; // r15
  bool result; // al
  char v9[112]; // [rsp+10h] [rbp-70h] BYREF

  v1 = (unsigned __int64)v9;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_0(64LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "1 32 16 14 world_ptr:4402";
  *(_QWORD *)(v1 + 16) = Scene::isInMpMode;
  v3 = v1 >> 3;
  *(_DWORD *)(v3 + 2147450880) = -235802127;
  *(_DWORD *)(v3 + 2147450884) = -202178560;
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_load8();
  v4 = (unsigned __int64)(this->_vptr_DescribalBase + 7);
  if ( *(_BYTE *)((v4 >> 3) + 0x7FFF8000) )
    v4 = __asan_report_load8();
  (*(void (__fastcall **)(unsigned __int64, Scene *const))v4)(v1 + 32, this);
  if ( !std::operator!=<World>((const std::shared_ptr<World> *)(v1 + 32), 0LL) )
    goto LABEL_15;
  v5 = (unsigned __int64)std::__shared_ptr_access<World,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<World,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v1 + 32));
  if ( *(_BYTE *)((v5 >> 3) + 0x7FFF8000) )
    v5 = __asan_report_load8();
  v6 = *(_QWORD *)v5 + 184LL;
  if ( *(_BYTE *)((v6 >> 3) + 0x7FFF8000) )
    v5 = __asan_report_load8();
  if ( (*(unsigned __int8 (__fastcall **)(unsigned __int64))v6)(v5) )
    v7 = 1;
  else
LABEL_15:
    v7 = 0;
  std::shared_ptr<World>::~shared_ptr((std::shared_ptr<World> *const)(v1 + 32));
  result = v7;
  if ( v9 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 4408: range 000000001599A3C4-000000001599A51D
uint32_t __cdecl Scene::getGroupInitWorldLevel(Scene *const this)
{
  unsigned __int64 v1; // rbx
  __int64 v2; // rax
  unsigned __int64 v3; // r12
  unsigned __int64 v4; // rax
  uint32_t Level; // r14d
  std::__shared_ptr_access<PlayerWorld,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v6; // rax
  uint32_t result; // eax
  char v8[112]; // [rsp+10h] [rbp-70h] BYREF

  v1 = (unsigned __int64)v8;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_0(64LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "1 32 16 14 world_ptr:4409";
  *(_QWORD *)(v1 + 16) = Scene::getGroupInitWorldLevel;
  v3 = v1 >> 3;
  *(_DWORD *)(v3 + 2147450880) = -235802127;
  *(_DWORD *)(v3 + 2147450884) = -202178560;
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_load8();
  v4 = (unsigned __int64)(this->_vptr_DescribalBase + 8);
  if ( *(_BYTE *)((v4 >> 3) + 0x7FFF8000) )
    v4 = __asan_report_load8();
  (*(void (__fastcall **)(unsigned __int64, Scene *const))v4)(v1 + 32, this);
  if ( std::operator==<PlayerWorld>(0LL, (const std::shared_ptr<PlayerWorld> *)(v1 + 32)) )
  {
    Level = 0;
  }
  else
  {
    v6 = std::__shared_ptr_access<PlayerWorld,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<PlayerWorld,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v1 + 32));
    Level = PlayerWorld::getLevel(v6);
  }
  std::shared_ptr<PlayerWorld>::~shared_ptr((std::shared_ptr<PlayerWorld> *const)(v1 + 32));
  result = Level;
  if ( v8 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 4418: range 000000001599A51E-000000001599A6D8
uint32_t __cdecl Scene::getGroupInitWorldLevelLimit(Scene *const this)
{
  unsigned __int64 v1; // rbx
  __int64 v2; // rax
  unsigned __int64 v3; // r12
  common::milog::MiLogStream *v4; // rax
  uint32_t v5; // r14d
  Player *v6; // rax
  PlayerBasicComp *BasicComp; // rax
  uint32_t result; // eax
  common::milog::MiLogStream v9; // [rsp+10h] [rbp-90h] BYREF
  char v10[112]; // [rsp+30h] [rbp-70h] BYREF

  v1 = (unsigned __int64)v10;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_0(64LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "1 32 16 15 player_ptr:4419";
  *(_QWORD *)(v1 + 16) = Scene::getGroupInitWorldLevelLimit;
  v3 = v1 >> 3;
  *(_DWORD *)(v3 + 2147450880) = -235802127;
  *(_DWORD *)(v3 + 2147450884) = -202178560;
  Scene::getOwnPlayer((const Scene *const)(v1 + 32));
  if ( std::operator==<Player>((const std::shared_ptr<Player> *)(v1 + 32), 0LL) )
  {
    common::milog::MiLogStream::create(
      &v9,
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/scene/scene.cpp",
      "getGroupInitWorldLevelLimit",
      4422);
    v4 = common::milog::MiLogStream::operator<<<char [33],(char *[33])0>(
           &v9,
           (const char (*)[33])"find own player failed,scene_id:");
    common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v4, &this->scene_id_);
    common::milog::MiLogStream::~MiLogStream(&v9);
    v5 = 0;
  }
  else
  {
    v6 = std::__shared_ptr_access<Player,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Player,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v1 + 32));
    BasicComp = Player::getBasicComp(v6);
    v5 = PlayerBasicComp::calcWorldLevelLimit(BasicComp);
  }
  std::shared_ptr<Player>::~shared_ptr((std::shared_ptr<Player> *const)(v1 + 32));
  result = v5;
  if ( v10 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 4430: range 000000001599A6DA-000000001599A833
uint32_t __cdecl Scene::getGroupInitMpPlayerNum(Scene *const this)
{
  unsigned __int64 v1; // rbx
  __int64 v2; // rax
  unsigned __int64 v3; // r12
  unsigned __int64 v4; // rax
  uint32_t PlayerCount; // r14d
  std::__shared_ptr_access<PlayerWorld,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v6; // rax
  uint32_t result; // eax
  char v8[112]; // [rsp+10h] [rbp-70h] BYREF

  v1 = (unsigned __int64)v8;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_0(64LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "1 32 16 14 world_ptr:4431";
  *(_QWORD *)(v1 + 16) = Scene::getGroupInitMpPlayerNum;
  v3 = v1 >> 3;
  *(_DWORD *)(v3 + 2147450880) = -235802127;
  *(_DWORD *)(v3 + 2147450884) = -202178560;
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_load8();
  v4 = (unsigned __int64)(this->_vptr_DescribalBase + 8);
  if ( *(_BYTE *)((v4 >> 3) + 0x7FFF8000) )
    v4 = __asan_report_load8();
  (*(void (__fastcall **)(unsigned __int64, Scene *const))v4)(v1 + 32, this);
  if ( std::operator==<PlayerWorld>(0LL, (const std::shared_ptr<PlayerWorld> *)(v1 + 32)) )
  {
    PlayerCount = 0;
  }
  else
  {
    v6 = std::__shared_ptr_access<PlayerWorld,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<PlayerWorld,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v1 + 32));
    PlayerCount = World::getPlayerCount(v6);
  }
  std::shared_ptr<PlayerWorld>::~shared_ptr((std::shared_ptr<PlayerWorld> *const)(v1 + 32));
  result = PlayerCount;
  if ( v8 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 4440: range 000000001599A834-000000001599AB97
int32_t __cdecl Scene::saveGroupToBin(Scene *const this, GroupPtr *p_group_ptr)
{
  unsigned __int64 v2; // rbx
  __int64 v3; // rax
  unsigned __int64 v4; // r12
  int32_t v5; // r14d
  common::milog::MiLogStream *v6; // r14
  common::milog::MiLogStream *v7; // rax
  common::milog::MiLogStream *v8; // r14
  SceneBlockGroupComp *BlockGroupComp; // r14
  std::__shared_ptr_access<Group,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v10; // rax
  uint32_t GroupId; // eax
  std::__shared_ptr_access<Group,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v12; // rax
  common::milog::MiLogStream *v13; // rax
  Player *v14; // rax
  uint32_t SceneId; // eax
  int32_t result; // eax
  unsigned int val; // [rsp+10h] [rbp-B0h] BYREF
  unsigned int OwnerUid; // [rsp+14h] [rbp-ACh] BYREF
  BlockDataMgr *block_data_mgr; // [rsp+18h] [rbp-A8h]
  std::shared_ptr<Group> v20; // [rsp+20h] [rbp-A0h] BYREF
  common::milog::MiLogStream v21; // [rsp+30h] [rbp-90h] BYREF
  char v22[112]; // [rsp+50h] [rbp-70h] BYREF

  v2 = (unsigned __int64)v22;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_0(64LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "1 32 16 15 player_ptr:4443";
  *(_QWORD *)(v2 + 16) = Scene::saveGroupToBin;
  v4 = v2 >> 3;
  *(_DWORD *)(v4 + 2147450880) = -235802127;
  *(_DWORD *)(v4 + 2147450884) = -202178560;
  if ( std::operator==<Group>(p_group_ptr, 0LL) )
  {
    v5 = -1;
  }
  else
  {
    Scene::getOwnPlayer((const Scene *const)(v2 + 32));
    if ( std::operator==<Player>((const std::shared_ptr<Player> *)(v2 + 32), 0LL) )
    {
      common::milog::MiLogStream::create(
        &v21,
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/scene/scene.cpp",
        "saveGroupToBin",
        4446);
      v6 = common::milog::MiLogStream::operator<<<char [17],(char *[17])0>(&v21, (const char (*)[17])"player not exist");
      val = Scene::getSceneId(this);
      v7 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v6, &val);
      v8 = common::milog::MiLogStream::operator<<<char [7],(char *[7])0>(v7, (const char (*)[7])", uid:");
      OwnerUid = Scene::getOwnerUid(this);
      common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v8, &OwnerUid);
      common::milog::MiLogStream::~MiLogStream(&v21);
      v5 = -1;
    }
    else
    {
      BlockGroupComp = Scene::getBlockGroupComp(this);
      v10 = std::__shared_ptr_access<Group,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Group,(__gnu_cxx::_Lock_policy)2,false,false> *const)p_group_ptr);
      GroupId = Group::getGroupId(v10);
      if ( SceneBlockGroupComp::isGroupDelayUnregister(BlockGroupComp, GroupId) )
      {
        common::milog::MiLogStream::create(
          &v21,
          &common::milog::MiLogDefault::default_log_obj_,
          4u,
          "./src/scene/scene.cpp",
          "saveGroupToBin",
          4453);
        v12 = std::__shared_ptr_access<Group,(__gnu_cxx::_Lock_policy)2,false,false>::operator*((const std::__shared_ptr_access<Group,(__gnu_cxx::_Lock_policy)2,false,false> *const)p_group_ptr);
        v13 = common::milog::MiLogStream::operator<<<Group,(Group*)0>(&v21, v12);
        common::milog::MiLogStream::operator<<<char [36],(char *[36])0>(v13, (const char (*)[36])off_258E08A0);
        common::milog::MiLogStream::~MiLogStream(&v21);
        v5 = 0;
      }
      else
      {
        v14 = std::__shared_ptr_access<Player,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Player,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 32));
        block_data_mgr = Player::getBlockDataMgr(v14);
        std::shared_ptr<Group>::shared_ptr(&v20, p_group_ptr);
        SceneId = Scene::getSceneId(this);
        v5 = BlockDataMgr::saveGroupBin(block_data_mgr, SceneId, &v20);
        std::shared_ptr<Group>::~shared_ptr(&v20);
      }
    }
    std::shared_ptr<Player>::~shared_ptr((std::shared_ptr<Player> *const)(v2 + 32));
  }
  result = v5;
  if ( v22 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 4463: range 000000001599AB98-000000001599AE73
std::pair<int,proto::GroupBin*> __cdecl Scene::findGroupBin(Scene *const this, uint32_t group_id)
{
  __int64 v2; // rax
  unsigned __int64 v3; // r14
  common::milog::MiLogStream *v4; // r12
  common::milog::MiLogStream *v5; // rax
  common::milog::MiLogStream *v6; // r12
  std::pair<int,std::nullptr_t> v7; // rax
  int first; // r12d
  proto::GroupBin *second; // r13
  Player *v10; // rax
  uint32_t SceneId; // eax
  std::pair<int,proto::GroupBin*> GroupBin; // rax
  proto::GroupBin *v13; // rdx
  int v14; // eax
  unsigned __int64 v15; // [rsp+8h] [rbp-E8h]
  unsigned int val; // [rsp+28h] [rbp-C8h] BYREF
  unsigned int OwnerUid; // [rsp+2Ch] [rbp-C4h] BYREF
  __int64 __y; // [rsp+30h] [rbp-C0h] BYREF
  BlockDataMgr *block_data_mgr; // [rsp+38h] [rbp-B8h]
  std::pair<int,std::nullptr_t> __p; // [rsp+40h] [rbp-B0h] BYREF
  std::pair<int,proto::GroupBin*> v21; // [rsp+50h] [rbp-A0h] BYREF
  common::milog::MiLogStream v22; // [rsp+60h] [rbp-90h] BYREF
  char v23[112]; // [rsp+80h] [rbp-70h] BYREF
  std::pair<int,proto::GroupBin*> result; // 0:eax.4,8:rdx.8

  v15 = (unsigned __int64)v23;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_0(64LL);
    if ( v2 )
      v15 = v2;
  }
  *(_QWORD *)v15 = 1102416563LL;
  *(_QWORD *)(v15 + 8) = "1 32 16 15 player_ptr:4464";
  *(_QWORD *)(v15 + 16) = Scene::findGroupBin;
  v3 = v15 >> 3;
  *(_DWORD *)(v3 + 2147450880) = -235802127;
  *(_DWORD *)(v3 + 2147450884) = -202178560;
  Scene::getOwnPlayer((const Scene *const)(v15 + 32));
  if ( std::operator==<Player>((const std::shared_ptr<Player> *)(v15 + 32), 0LL) )
  {
    common::milog::MiLogStream::create(
      &v22,
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/scene/scene.cpp",
      "findGroupBin",
      4467);
    v4 = common::milog::MiLogStream::operator<<<char [17],(char *[17])0>(&v22, (const char (*)[17])"player not exist");
    val = Scene::getSceneId(this);
    v5 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v4, &val);
    v6 = common::milog::MiLogStream::operator<<<char [7],(char *[7])0>(v5, (const char (*)[7])", uid:");
    OwnerUid = Scene::getOwnerUid(this);
    common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v6, &OwnerUid);
    common::milog::MiLogStream::~MiLogStream(&v22);
    __y = 0LL;
    OwnerUid = -1;
    v7 = std::make_pair<int,decltype(nullptr)>((int *)&OwnerUid, &__y);
    __p.first = v7.first;
    __p.second = v7.second;
    std::pair<int,proto::GroupBin *>::pair<int,decltype(nullptr),true>(&v21, &__p);
    first = v21.first;
    second = v21.second;
  }
  else
  {
    v10 = std::__shared_ptr_access<Player,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Player,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v15 + 32));
    block_data_mgr = Player::getBlockDataMgr(v10);
    SceneId = Scene::getSceneId(this);
    GroupBin = BlockDataMgr::findGroupBin(block_data_mgr, SceneId, group_id);
    first = GroupBin.first;
    second = GroupBin.second;
  }
  std::shared_ptr<Player>::~shared_ptr((std::shared_ptr<Player> *const)(v15 + 32));
  v13 = second;
  if ( v23 == (char *)v15 )
  {
    *(_QWORD *)((v15 >> 3) + 0x7FFF8000) = 0LL;
  }
  else
  {
    *(_QWORD *)v15 = 1172321806LL;
    *(_QWORD *)((v15 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
  }
  v14 = first;
  result.second = v13;
  result.first = v14;
  return result;
};

// Line 4475: range 000000001599AE74-000000001599B0AF
int32_t __cdecl Scene::clearGroupBin(Scene *const this, uint32_t group_id)
{
  unsigned __int64 v2; // rbx
  __int64 v3; // rax
  unsigned __int64 v4; // r12
  common::milog::MiLogStream *v5; // r14
  common::milog::MiLogStream *v6; // rax
  common::milog::MiLogStream *v7; // r14
  int32_t v8; // r14d
  Player *v9; // rax
  uint32_t SceneId; // eax
  int32_t result; // eax
  unsigned int val; // [rsp+10h] [rbp-A0h] BYREF
  unsigned int OwnerUid; // [rsp+14h] [rbp-9Ch] BYREF
  BlockDataMgr *block_data_mgr; // [rsp+18h] [rbp-98h]
  common::milog::MiLogStream v15; // [rsp+20h] [rbp-90h] BYREF
  char v16[112]; // [rsp+40h] [rbp-70h] BYREF

  v2 = (unsigned __int64)v16;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_0(64LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "1 32 16 15 player_ptr:4476";
  *(_QWORD *)(v2 + 16) = Scene::clearGroupBin;
  v4 = v2 >> 3;
  *(_DWORD *)(v4 + 2147450880) = -235802127;
  *(_DWORD *)(v4 + 2147450884) = -202178560;
  Scene::getOwnPlayer((const Scene *const)(v2 + 32));
  if ( std::operator==<Player>((const std::shared_ptr<Player> *)(v2 + 32), 0LL) )
  {
    common::milog::MiLogStream::create(
      &v15,
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/scene/scene.cpp",
      "clearGroupBin",
      4479);
    v5 = common::milog::MiLogStream::operator<<<char [17],(char *[17])0>(&v15, (const char (*)[17])"player not exist");
    val = Scene::getSceneId(this);
    v6 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v5, &val);
    v7 = common::milog::MiLogStream::operator<<<char [7],(char *[7])0>(v6, (const char (*)[7])", uid:");
    OwnerUid = Scene::getOwnerUid(this);
    common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v7, &OwnerUid);
    common::milog::MiLogStream::~MiLogStream(&v15);
    v8 = -1;
  }
  else
  {
    v9 = std::__shared_ptr_access<Player,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Player,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 32));
    block_data_mgr = Player::getBlockDataMgr(v9);
    SceneId = Scene::getSceneId(this);
    v8 = BlockDataMgr::clearGroupBin(block_data_mgr, SceneId, group_id);
  }
  std::shared_ptr<Player>::~shared_ptr((std::shared_ptr<Player> *const)(v2 + 32));
  result = v8;
  if ( v16 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 4487: range 000000001599B0B0-000000001599B2DA
int32_t __cdecl Scene::saveGroupByMUIP(Scene *const this, uint32_t group_id)
{
  unsigned __int64 v2; // rbx
  __int64 v3; // rax
  unsigned __int64 v4; // r12
  common::milog::MiLogStream *v5; // r14
  common::milog::MiLogStream *v6; // rax
  common::milog::MiLogStream *v7; // r14
  int32_t v8; // r14d
  Player *v9; // rax
  int32_t result; // eax
  unsigned int val; // [rsp+10h] [rbp-A0h] BYREF
  unsigned int OwnerUid; // [rsp+14h] [rbp-9Ch] BYREF
  BlockDataMgr *block_data_mgr; // [rsp+18h] [rbp-98h]
  common::milog::MiLogStream v14; // [rsp+20h] [rbp-90h] BYREF
  char v15[112]; // [rsp+40h] [rbp-70h] BYREF

  v2 = (unsigned __int64)v15;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_0(64LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "1 32 16 15 player_ptr:4488";
  *(_QWORD *)(v2 + 16) = Scene::saveGroupByMUIP;
  v4 = v2 >> 3;
  *(_DWORD *)(v4 + 2147450880) = -235802127;
  *(_DWORD *)(v4 + 2147450884) = -202178560;
  Scene::getOwnPlayer((const Scene *const)(v2 + 32));
  if ( std::operator==<Player>((const std::shared_ptr<Player> *)(v2 + 32), 0LL) )
  {
    common::milog::MiLogStream::create(
      &v14,
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/scene/scene.cpp",
      "saveGroupByMUIP",
      4491);
    v5 = common::milog::MiLogStream::operator<<<char [17],(char *[17])0>(&v14, (const char (*)[17])"player not exist");
    val = Scene::getSceneId(this);
    v6 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v5, &val);
    v7 = common::milog::MiLogStream::operator<<<char [7],(char *[7])0>(v6, (const char (*)[7])", uid:");
    OwnerUid = Scene::getOwnerUid(this);
    common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v7, &OwnerUid);
    common::milog::MiLogStream::~MiLogStream(&v14);
    v8 = -1;
  }
  else
  {
    v9 = std::__shared_ptr_access<Player,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Player,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 32));
    block_data_mgr = Player::getBlockDataMgr(v9);
    v8 = BlockDataMgr::forceSaveGroupBinByMUIP(block_data_mgr, group_id);
  }
  std::shared_ptr<Player>::~shared_ptr((std::shared_ptr<Player> *const)(v2 + 32));
  result = v8;
  if ( v15 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 4499: range 000000001599B2DC-000000001599B30B
int32_t __cdecl Scene::saveAllGroup(Scene *const this, bool is_force)
{
  SceneBlockGroupComp *BlockGroupComp; // rax

  BlockGroupComp = Scene::getBlockGroupComp(this);
  return SceneBlockGroupComp::saveAllGroup(BlockGroupComp, is_force);
};

// Line 4504: range 000000001599B30C-000000001599B32D
int32_t __cdecl Scene::getActiveGroupCount(Scene *const this)
{
  SceneBlockGroupComp *BlockGroupComp; // rax

  BlockGroupComp = Scene::getBlockGroupComp(this);
  return SceneBlockGroupComp::getActiveGroupCount(BlockGroupComp);
};

// Line 4510: range 000000001599B32E-000000001599BDE3
Scene *__fastcall Scene::findPlayerWindSeedSpawner(Scene *const this, Scene *player_uid, float range, int a4)
{
  unsigned __int64 v4; // r13
  __int64 v5; // rax
  _DWORD *v6; // r12
  common::milog::MiLogStream *v7; // rax
  std::shared_ptr<WindSeedSpawner> *v8; // rax
  WindSeedSpawner *v9; // r14
  Player *v10; // rax
  std::__detail::_Node_iterator<std::pair<unsigned int const,std::shared_ptr<WindSeedSpawner> >,false,false>::pointer v11; // rax
  std::__shared_ptr_access<WindSeedSpawner,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v12; // rax
  WindSeedSpawner *v14; // rax
  std::shared_ptr<WindSeedSpawner> *v15; // rax
  WindSeedSpawner *v16; // r14
  Player *v17; // rax
  common::milog::MiLogStream *v18; // r14
  std::__shared_ptr_access<Player,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v19; // rax
  std::__shared_ptr_access<Player,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v20; // rax
  std::__shared_ptr_access<Player,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v21; // rax
  std::shared_ptr<WindSeedSpawner> *v22; // rax
  common::milog::MiLogStream *v23; // r14
  std::__shared_ptr_access<Player,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v24; // rax
  common::milog::MiLogStream *v25; // rax
  common::milog::MiLogStream *v26; // r14
  std::__shared_ptr_access<Player,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v27; // rax
  std::__detail::_Node_iterator<std::pair<unsigned int const,std::shared_ptr<WindSeedSpawner> >,false,false>::pointer v28; // rax
  std::__detail::_Node_iterator<std::pair<unsigned int const,std::shared_ptr<WindSeedSpawner> >,false,false>::pointer v29; // rax
  WindSeedSpawner *v31; // r14
  std::__detail::_Node_iterator<std::pair<unsigned int const,std::shared_ptr<WindSeedSpawner> >,false,false>::pointer v32; // rax
  WindSeedSpawner *v33; // rax
  std::__shared_ptr_access<Player,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v34; // rax
  std::shared_ptr<WindSeedSpawner> *v35; // rax
  common::milog::MiLogStream *v36; // r14
  std::__shared_ptr_access<Player,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v37; // rax
  common::milog::MiLogStream *v38; // rax
  common::milog::MiLogStream *v39; // r14
  std::__shared_ptr_access<Player,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v40; // rax
  std::unordered_map<unsigned int,std::shared_ptr<WindSeedSpawner>>::key_type __x; // [rsp+2Ch] [rbp-204h] BYREF
  std::unordered_map<unsigned int,std::shared_ptr<WindSeedSpawner>>::key_type __k; // [rsp+30h] [rbp-200h] BYREF
  std::unordered_map<unsigned int,std::shared_ptr<WindSeedSpawner>>::key_type Uid; // [rsp+34h] [rbp-1FCh] BYREF
  std::vector<std::shared_ptr<Player>>::iterator __for_begin; // [rsp+38h] [rbp-1F8h] BYREF
  std::vector<std::shared_ptr<Player>>::iterator __for_end; // [rsp+40h] [rbp-1F0h] BYREF
  std::__detail::_Node_iterator_base<std::pair<unsigned int const,std::shared_ptr<WindSeedSpawner> >,false> __y; // [rsp+48h] [rbp-1E8h] BYREF
  std::vector<std::shared_ptr<Player>> *__for_range; // [rsp+50h] [rbp-1E0h]
  std::shared_ptr<Player> *surround_player_ptr; // [rsp+58h] [rbp-1D8h]
  std::shared_ptr<WindSeedSpawner> __r; // [rsp+60h] [rbp-1D0h] BYREF
  std::shared_ptr<WindSeedSpawner> v52; // [rsp+70h] [rbp-1C0h] BYREF
  common::milog::MiLogStream v53; // [rsp+80h] [rbp-1B0h] BYREF
  common::milog::MiLogStream v54; // [rsp+A0h] [rbp-190h] BYREF
  char v55[368]; // [rsp+C0h] [rbp-170h] BYREF

  v4 = (unsigned __int64)v55;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v5 = __asan_stack_malloc_3(320LL);
    if ( v5 )
      v4 = v5;
  }
  *(_QWORD *)v4 = 1102416563LL;
  *(_QWORD *)(v4 + 8) = "8 48 4 15 player_uid:4509 64 8 9 iter:4518 96 8 9 iter:4562 128 12 8 pos:4536 160 12 8 rot:4537 "
                        "192 16 15 player_ptr:4511 224 16 16 spawner_ptr:4519 256 24 24 surround_player_vec:4540";
  *(_QWORD *)(v4 + 16) = Scene::findPlayerWindSeedSpawner;
  v6 = (_DWORD *)(v4 >> 3);
  v6[536862720] = -235802127;
  v6[536862721] = -234556943;
  v6[536862722] = -218959360;
  v6[536862723] = -218959360;
  v6[536862724] = -219020288;
  v6[536862725] = -219020288;
  v6[536862726] = -219021312;
  v6[536862727] = -219021312;
  v6[536862728] = -218103808;
  v6[536862729] = -202116109;
  *(_DWORD *)(v4 + 48) = a4;
  Scene::findPlayer((const Scene *const)(v4 + 192), (__int64)player_uid, *(_DWORD *)(v4 + 48));
  if ( std::operator==<Player>(0LL, (const std::shared_ptr<Player> *)(v4 + 192)) )
  {
    common::milog::MiLogStream::create(
      &v54,
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/scene/scene.cpp",
      "findPlayerWindSeedSpawner",
      4514);
    v7 = common::milog::MiLogStream::operator<<<char [29],(char *[29])0>(
           &v54,
           (const char (*)[29])"player is not in scene, uid:");
    common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v7, (const unsigned int *)(v4 + 48));
    common::milog::MiLogStream::~MiLogStream(&v54);
    std::shared_ptr<WindSeedSpawner>::shared_ptr((std::shared_ptr<WindSeedSpawner> *const)this, 0LL);
  }
  else
  {
    *(std::unordered_map<unsigned int,std::shared_ptr<WindSeedSpawner>>::iterator *)(v4 + 64) = std::unordered_map<unsigned int,std::shared_ptr<WindSeedSpawner>>::find(
                                                                                                  &player_uid->wind_seed_spawner_map_,
                                                                                                  (const std::unordered_map<unsigned int,std::shared_ptr<WindSeedSpawner>>::key_type *)(v4 + 48));
    *(_QWORD *)(v4 + 224) = 0LL;
    *(_QWORD *)(v4 + 232) = 0LL;
    __y._M_cur = std::unordered_map<unsigned int,std::shared_ptr<WindSeedSpawner>>::end(&player_uid->wind_seed_spawner_map_)._M_cur;
    if ( std::__detail::operator==<std::pair<unsigned int const,std::shared_ptr<WindSeedSpawner>>,false>(
           (const std::__detail::_Node_iterator_base<std::pair<unsigned int const,std::shared_ptr<WindSeedSpawner> >,false> *)(v4 + 64),
           &__y) )
    {
      common::tools::perf::make_shared<WindSeedSpawner,Scene &>((Scene *)&__r, player_uid);
      std::shared_ptr<WindSeedSpawner>::operator=((std::shared_ptr<WindSeedSpawner> *const)(v4 + 224), &__r);
      std::shared_ptr<WindSeedSpawner>::~shared_ptr(&__r);
      v8 = std::unordered_map<unsigned int,std::shared_ptr<WindSeedSpawner>>::operator[](
             &player_uid->wind_seed_spawner_map_,
             (const std::unordered_map<unsigned int,std::shared_ptr<WindSeedSpawner>>::key_type *)(v4 + 48));
      std::shared_ptr<WindSeedSpawner>::operator=(v8, (const std::shared_ptr<WindSeedSpawner> *)(v4 + 224));
      v9 = std::__shared_ptr_access<WindSeedSpawner,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<WindSeedSpawner,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 224));
      v10 = std::__shared_ptr_access<Player,(__gnu_cxx::_Lock_policy)2,false,false>::operator*((const std::__shared_ptr_access<Player,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 192));
      WindSeedSpawner::addPlayer(v9, v10);
    }
    else
    {
      v11 = std::__detail::_Node_iterator<std::pair<unsigned int const,std::shared_ptr<WindSeedSpawner>>,false,false>::operator->((const std::__detail::_Node_iterator<std::pair<unsigned int const,std::shared_ptr<WindSeedSpawner> >,false,false> *const)(v4 + 64));
      std::shared_ptr<WindSeedSpawner>::operator=((std::shared_ptr<WindSeedSpawner> *const)(v4 + 224), &v11->second);
    }
    if ( std::operator==<WindSeedSpawner>((const std::shared_ptr<WindSeedSpawner> *)(v4 + 224), 0LL) )
    {
      common::milog::MiLogStream::create(
        &v54,
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/scene/scene.cpp",
        "findPlayerWindSeedSpawner",
        4532);
      common::milog::MiLogStream::operator<<<char [23],(char *[23])0>(
        &v54,
        (const char (*)[23])"spawner_ptr is nullptr");
      common::milog::MiLogStream::~MiLogStream(&v54);
      std::shared_ptr<WindSeedSpawner>::shared_ptr((std::shared_ptr<WindSeedSpawner> *const)this, 0LL);
    }
    else
    {
      Vector3::Vector3((Vector3 *const)(v4 + 128), 0.0, 0.0, 0.0);
      Vector3::Vector3((Vector3 *const)(v4 + 160), 0.0, 0.0, 0.0);
      if ( !Scene::getPlayerLocation(player_uid, *(_DWORD *)(v4 + 48), (Vector3 *)(v4 + 128), (Vector3 *)(v4 + 160)) )
      {
        Scene::getSurroundPlayersInRange(
          (std::vector<std::shared_ptr<Player>> *)(v4 + 256),
          player_uid,
          *(Vector3 *)(v4 + 128),
          range);
        if ( std::vector<std::shared_ptr<Player>>::size((const std::vector<std::shared_ptr<Player>> *const)(v4 + 256)) == 1 )
        {
          v12 = std::__shared_ptr_access<WindSeedSpawner,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<WindSeedSpawner,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 224));
          if ( WindSeedSpawner::getPlayerNum(v12) > 1 )
          {
            v14 = std::__shared_ptr_access<WindSeedSpawner,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<WindSeedSpawner,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 224));
            WindSeedSpawner::delPlayer(v14, *(_DWORD *)(v4 + 48));
            common::tools::perf::make_shared<WindSeedSpawner,Scene &>((Scene *)&v52, player_uid);
            std::shared_ptr<WindSeedSpawner>::operator=((std::shared_ptr<WindSeedSpawner> *const)(v4 + 224), &v52);
            std::shared_ptr<WindSeedSpawner>::~shared_ptr(&v52);
            v15 = std::unordered_map<unsigned int,std::shared_ptr<WindSeedSpawner>>::operator[](
                    &player_uid->wind_seed_spawner_map_,
                    (const std::unordered_map<unsigned int,std::shared_ptr<WindSeedSpawner>>::key_type *)(v4 + 48));
            std::shared_ptr<WindSeedSpawner>::operator=(v15, (const std::shared_ptr<WindSeedSpawner> *)(v4 + 224));
            v16 = std::__shared_ptr_access<WindSeedSpawner,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<WindSeedSpawner,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 224));
            v17 = std::__shared_ptr_access<Player,(__gnu_cxx::_Lock_policy)2,false,false>::operator*((const std::__shared_ptr_access<Player,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 192));
            WindSeedSpawner::addPlayer(v16, v17);
            common::milog::MiLogStream::create(
              &v54,
              &common::milog::MiLogDefault::default_log_obj_,
              1u,
              "./src/scene/scene.cpp",
              "findPlayerWindSeedSpawner",
              4550);
            v18 = common::milog::MiLogStream::operator<<<char [49],(char *[49])0>(
                    &v54,
                    (const char (*)[49])"[WIND_SEED] spawner split from original, player:");
            v19 = std::__shared_ptr_access<Player,(__gnu_cxx::_Lock_policy)2,false,false>::operator*((const std::__shared_ptr_access<Player,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 192));
            operator<<(v18, v19);
            common::milog::MiLogStream::~MiLogStream(&v54);
          }
        }
        if ( std::vector<std::shared_ptr<Player>>::size((const std::vector<std::shared_ptr<Player>> *const)(v4 + 256)) > 1 )
        {
          __for_range = (std::vector<std::shared_ptr<Player>> *)(v4 + 256);
          __for_begin._M_current = std::vector<std::shared_ptr<Player>>::begin((std::vector<std::shared_ptr<Player>> *const)(v4 + 256))._M_current;
          __for_end._M_current = std::vector<std::shared_ptr<Player>>::end(__for_range)._M_current;
          while ( __gnu_cxx::operator!=<std::shared_ptr<Player> *,std::vector<std::shared_ptr<Player>>>(
                    &__for_begin,
                    &__for_end) )
          {
            surround_player_ptr = __gnu_cxx::__normal_iterator<std::shared_ptr<Player> *,std::vector<std::shared_ptr<Player>>>::operator*(&__for_begin);
            if ( !std::operator==<Player>(0LL, surround_player_ptr) )
            {
              v20 = std::__shared_ptr_access<Player,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Player,(__gnu_cxx::_Lock_policy)2,false,false> *const)surround_player_ptr);
              __x = Player::getUid(v20);
              *(std::unordered_map<unsigned int,std::shared_ptr<WindSeedSpawner>>::iterator *)(v4 + 96) = std::unordered_map<unsigned int,std::shared_ptr<WindSeedSpawner>>::find(&player_uid->wind_seed_spawner_map_, &__x);
              __y._M_cur = std::unordered_map<unsigned int,std::shared_ptr<WindSeedSpawner>>::end(&player_uid->wind_seed_spawner_map_)._M_cur;
              if ( std::__detail::operator==<std::pair<unsigned int const,std::shared_ptr<WindSeedSpawner>>,false>(
                     (const std::__detail::_Node_iterator_base<std::pair<unsigned int const,std::shared_ptr<WindSeedSpawner> >,false> *)(v4 + 96),
                     &__y) )
              {
                v21 = std::__shared_ptr_access<Player,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Player,(__gnu_cxx::_Lock_policy)2,false,false> *const)surround_player_ptr);
                __k = Player::getUid(v21);
                v22 = std::unordered_map<unsigned int,std::shared_ptr<WindSeedSpawner>>::operator[](
                        &player_uid->wind_seed_spawner_map_,
                        &__k);
                std::shared_ptr<WindSeedSpawner>::operator=(v22, (const std::shared_ptr<WindSeedSpawner> *)(v4 + 224));
                common::milog::MiLogStream::create(
                  &v53,
                  &common::milog::MiLogDefault::default_log_obj_,
                  1u,
                  "./src/scene/scene.cpp",
                  "findPlayerWindSeedSpawner",
                  4567);
                v23 = common::milog::MiLogStream::operator<<<char [37],(char *[37])0>(
                        &v53,
                        (const char (*)[37])"[WIND_SEED] spawner merge to player:");
                v24 = std::__shared_ptr_access<Player,(__gnu_cxx::_Lock_policy)2,false,false>::operator*((const std::__shared_ptr_access<Player,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 192));
                v25 = operator<<(v23, v24);
                v26 = common::milog::MiLogStream::operator<<<char [5],(char *[5])0>(v25, (const char (*)[5])" me:");
                v27 = std::__shared_ptr_access<Player,(__gnu_cxx::_Lock_policy)2,false,false>::operator*((const std::__shared_ptr_access<Player,(__gnu_cxx::_Lock_policy)2,false,false> *const)surround_player_ptr);
                operator<<(v26, v27);
                common::milog::MiLogStream::~MiLogStream(&v53);
              }
              else
              {
                v28 = std::__detail::_Node_iterator<std::pair<unsigned int const,std::shared_ptr<WindSeedSpawner>>,false,false>::operator->((const std::__detail::_Node_iterator<std::pair<unsigned int const,std::shared_ptr<WindSeedSpawner> >,false,false> *const)(v4 + 96));
                if ( std::operator!=<WindSeedSpawner>(&v28->second, 0LL) )
                {
                  v29 = std::__detail::_Node_iterator<std::pair<unsigned int const,std::shared_ptr<WindSeedSpawner>>,false,false>::operator->((const std::__detail::_Node_iterator<std::pair<unsigned int const,std::shared_ptr<WindSeedSpawner> >,false,false> *const)(v4 + 96));
                  if ( std::operator!=<WindSeedSpawner,WindSeedSpawner>(
                         (const std::shared_ptr<WindSeedSpawner> *)(v4 + 224),
                         &v29->second) )
                  {
                    v31 = std::__shared_ptr_access<WindSeedSpawner,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<WindSeedSpawner,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 224));
                    v32 = std::__detail::_Node_iterator<std::pair<unsigned int const,std::shared_ptr<WindSeedSpawner>>,false,false>::operator->((const std::__detail::_Node_iterator<std::pair<unsigned int const,std::shared_ptr<WindSeedSpawner> >,false,false> *const)(v4 + 96));
                    v33 = std::__shared_ptr_access<WindSeedSpawner,(__gnu_cxx::_Lock_policy)2,false,false>::operator*((const std::__shared_ptr_access<WindSeedSpawner,(__gnu_cxx::_Lock_policy)2,false,false> *const)&v32->second);
                    WindSeedSpawner::merge(v31, v33);
                    v34 = std::__shared_ptr_access<Player,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Player,(__gnu_cxx::_Lock_policy)2,false,false> *const)surround_player_ptr);
                    Uid = Player::getUid(v34);
                    v35 = std::unordered_map<unsigned int,std::shared_ptr<WindSeedSpawner>>::operator[](
                            &player_uid->wind_seed_spawner_map_,
                            &Uid);
                    std::shared_ptr<WindSeedSpawner>::operator=(
                      v35,
                      (const std::shared_ptr<WindSeedSpawner> *)(v4 + 224));
                    common::milog::MiLogStream::create(
                      &v54,
                      &common::milog::MiLogDefault::default_log_obj_,
                      1u,
                      "./src/scene/scene.cpp",
                      "findPlayerWindSeedSpawner",
                      4575);
                    v36 = common::milog::MiLogStream::operator<<<char [37],(char *[37])0>(
                            &v54,
                            (const char (*)[37])"[WIND_SEED] spawner merge to player:");
                    v37 = std::__shared_ptr_access<Player,(__gnu_cxx::_Lock_policy)2,false,false>::operator*((const std::__shared_ptr_access<Player,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 192));
                    v38 = operator<<(v36, v37);
                    v39 = common::milog::MiLogStream::operator<<<char [5],(char *[5])0>(v38, (const char (*)[5])" me:");
                    v40 = std::__shared_ptr_access<Player,(__gnu_cxx::_Lock_policy)2,false,false>::operator*((const std::__shared_ptr_access<Player,(__gnu_cxx::_Lock_policy)2,false,false> *const)surround_player_ptr);
                    operator<<(v39, v40);
                    common::milog::MiLogStream::~MiLogStream(&v54);
                  }
                }
              }
            }
            __gnu_cxx::__normal_iterator<std::shared_ptr<Player> *,std::vector<std::shared_ptr<Player>>>::operator++(&__for_begin);
          }
        }
        std::vector<std::shared_ptr<Player>>::~vector((std::vector<std::shared_ptr<Player>> *const)(v4 + 256));
      }
      std::shared_ptr<WindSeedSpawner>::shared_ptr(
        (std::shared_ptr<WindSeedSpawner> *const)this,
        (std::shared_ptr<WindSeedSpawner> *)(v4 + 224));
    }
    std::shared_ptr<WindSeedSpawner>::~shared_ptr((std::shared_ptr<WindSeedSpawner> *const)(v4 + 224));
  }
  std::shared_ptr<Player>::~shared_ptr((std::shared_ptr<Player> *const)(v4 + 192));
  if ( v55 == (char *)v4 )
  {
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8008) = 0LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8010) = 0LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8018) = 0LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8020) = 0LL;
  }
  else
  {
    *(_QWORD *)v4 = 1172321806LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8020) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return this;
};

// Line 4585: range 000000001599BDE4-000000001599C207
void __fastcall Scene::recordCreatureAuthorityPeerChange(
        Scene *const this,
        const Entity *creature,
        uint32_t old_peer_id,
        uint32_t new_peer_id)
{
  unsigned __int64 v4; // r12
  __int64 v5; // rax
  _DWORD *v6; // r13
  std::unordered_set<unsigned int> *v7; // r14
  std::unordered_set<unsigned int> *v8; // r14
  std::__shared_ptr_access<Player,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v9; // rax
  std::__shared_ptr_access<Player,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v10; // rax
  common::milog::MiLogStream *v11; // r14
  const Entity *v12; // rdx
  void (__fastcall **vptr_DescribalBase)(std::string *, const Entity *); // rax
  common::milog::MiLogStream *v14; // rax
  common::milog::MiLogStream *v15; // rax
  common::milog::MiLogStream *v16; // rax
  common::milog::MiLogStream *v17; // rax
  common::milog::MiLogStream *v18; // rax
  common::milog::MiLogStream *v19; // rax
  common::milog::MiLogStream *v20; // rax
  common::milog::MiLogStream *v21; // rax
  common::milog::MiLogStream *v22; // rax
  common::milog::MiLogStream v25; // [rsp+20h] [rbp-F0h] BYREF
  std::string val; // [rsp+40h] [rbp-D0h] BYREF
  char v27[176]; // [rsp+60h] [rbp-B0h] BYREF

  v4 = (unsigned __int64)v27;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v5 = __asan_stack_malloc_1(128LL);
    if ( v5 )
      v4 = v5;
  }
  *(_QWORD *)v4 = 1102416563LL;
  *(_QWORD *)(v4 + 8) = "5 32 4 19 old_player_uid:4601 48 4 19 new_player_uid:4602 64 4 16 old_peer_id:4584 80 4 16 new_p"
                        "eer_id:4584 96 16 15 player_ptr:4613";
  *(_QWORD *)(v4 + 16) = Scene::recordCreatureAuthorityPeerChange;
  v6 = (_DWORD *)(v4 >> 3);
  v6[536862720] = -235802127;
  v6[536862721] = -234556924;
  v6[536862722] = -234556924;
  v6[536862723] = -202178560;
  *(_DWORD *)(v4 + 64) = old_peer_id;
  *(_DWORD *)(v4 + 80) = new_peer_id;
  if ( *(_DWORD *)(v4 + 64) != *(_DWORD *)(v4 + 80) )
  {
    if ( *(_DWORD *)(v4 + 64) )
    {
      v7 = std::map<unsigned int,std::unordered_set<unsigned int>>::operator[](
             &this->peer_authority_entity_map_,
             (const std::map<unsigned int,std::unordered_set<unsigned int>>::key_type *)(v4 + 64));
      *(_DWORD *)(v4 + 48) = Entity::getEntityId(creature);
      std::unordered_set<unsigned int>::erase(v7, (const std::unordered_set<unsigned int>::key_type *)(v4 + 48));
    }
    if ( *(_DWORD *)(v4 + 80) )
    {
      v8 = std::map<unsigned int,std::unordered_set<unsigned int>>::operator[](
             &this->peer_authority_entity_map_,
             (const std::map<unsigned int,std::unordered_set<unsigned int>>::key_type *)(v4 + 80));
      *(_DWORD *)(v4 + 48) = Entity::getEntityId(creature);
      std::unordered_set<unsigned int>::insert(v8, (std::unordered_set<unsigned int>::value_type *)(v4 + 48));
    }
    *(_DWORD *)(v4 + 32) = 0;
    *(_DWORD *)(v4 + 48) = 0;
    if ( *(_DWORD *)(v4 + 64) )
    {
      Scene::findPeerPlayer((const Scene *const)(v4 + 96), (__int64)this, *(_DWORD *)(v4 + 64));
      if ( std::operator!=<Player>((const std::shared_ptr<Player> *)(v4 + 96), 0LL) )
      {
        v9 = std::__shared_ptr_access<Player,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Player,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 96));
        *(_DWORD *)(v4 + 32) = Player::getUid(v9);
      }
      std::shared_ptr<Player>::~shared_ptr((std::shared_ptr<Player> *const)(v4 + 96));
    }
    if ( *(_DWORD *)(v4 + 80) )
    {
      Scene::findPeerPlayer((const Scene *const)(v4 + 96), (__int64)this, *(_DWORD *)(v4 + 80));
      if ( std::operator!=<Player>((const std::shared_ptr<Player> *)(v4 + 96), 0LL) )
      {
        v10 = std::__shared_ptr_access<Player,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Player,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 96));
        *(_DWORD *)(v4 + 48) = Player::getUid(v10);
      }
      std::shared_ptr<Player>::~shared_ptr((std::shared_ptr<Player> *const)(v4 + 96));
    }
    common::milog::MiLogStream::create(
      &v25,
      &common::milog::MiLogDefault::default_log_obj_,
      2u,
      "./src/scene/scene.cpp",
      "recordCreatureAuthorityPeerChange",
      4619);
    v11 = common::milog::MiLogStream::operator<<<char [29],(char *[29])0>(
            &v25,
            (const char (*)[29])"[AUTHORITY_CHANGE] creature:");
    v12 = creature;
    if ( *(_BYTE *)(((unsigned __int64)creature >> 3) + 0x7FFF8000) )
      __asan_report_load8();
    vptr_DescribalBase = (void (__fastcall **)(std::string *, const Entity *))creature->_vptr_DescribalBase;
    if ( *(_BYTE *)(((unsigned __int64)creature->_vptr_DescribalBase >> 3) + 0x7FFF8000) )
      vptr_DescribalBase = (void (__fastcall **)(std::string *, const Entity *))__asan_report_load8();
    (*vptr_DescribalBase)(&val, v12);
    v14 = common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v11, &val);
    v15 = common::milog::MiLogStream::operator<<<char [8],(char *[8])0>(v14, (const char (*)[8])" from:(");
    v16 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v15, (const unsigned int *)(v4 + 64));
    v17 = common::milog::MiLogStream::operator<<<char [2],(char *[2])0>(v16, (const char (*)[2])",");
    v18 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v17, (const unsigned int *)(v4 + 32));
    v19 = common::milog::MiLogStream::operator<<<char [8],(char *[8])0>(v18, (const char (*)[8])"), to:(");
    v20 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v19, (const unsigned int *)(v4 + 80));
    v21 = common::milog::MiLogStream::operator<<<char [2],(char *[2])0>(v20, (const char (*)[2])",");
    v22 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v21, (const unsigned int *)(v4 + 48));
    common::milog::MiLogStream::operator<<<char [2],(char *[2])0>(v22, (const char (*)[2])")");
    std::string::~string(&val);
    common::milog::MiLogStream::~MiLogStream(&v25);
  }
  if ( v27 == (char *)v4 )
  {
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v4 = 1172321806LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
};

// Line 4625: range 000000001599C208-000000001599C6F8
void __fastcall Scene::refreshAuthorityByPeerId(Scene *const this, uint32_t peer_id)
{
  unsigned __int64 v2; // r13
  __int64 v3; // rax
  _DWORD *v4; // r12
  std::map<unsigned int,std::unordered_set<unsigned int>>::mapped_type *v5; // rax
  std::__detail::_Node_iterator<unsigned int,true,false>::reference v6; // rax
  Creature *v7; // r14
  EntitySightGroup *v8; // r14
  GameserverService *v9; // rax
  GameThreadLocal *GameThreadLocal; // rax
  std::unordered_set<unsigned int>::iterator __for_begin; // [rsp+18h] [rbp-188h] BYREF
  std::unordered_set<unsigned int>::iterator __for_end; // [rsp+20h] [rbp-180h] BYREF
  std::unordered_set<unsigned int> *__for_range; // [rsp+28h] [rbp-178h]
  std::set<std::shared_ptr<EntitySightGroup>> *__for_range_0; // [rsp+30h] [rbp-170h]
  const std::shared_ptr<EntitySightGroup> *sight_group_ptr; // [rsp+38h] [rbp-168h]
  std::shared_ptr<Player> p_authority_player_ptr; // [rsp+40h] [rbp-160h] BYREF
  char v17[336]; // [rsp+50h] [rbp-150h] BYREF

  v2 = (unsigned __int64)v17;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_3(288LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "5 32 4 12 peer_id:4624 48 16 17 creature_ptr:4630 80 16 20 sight_group_ptr:4633 112 48 20 sight_"
                        "group_set:4627 192 56 6 s:4626";
  *(_QWORD *)(v2 + 16) = Scene::refreshAuthorityByPeerId;
  v4 = (_DWORD *)(v2 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = 61956;
  v4[536862722] = 62194;
  v4[536862723] = 62194;
  v4[536862725] = -218959118;
  v4[536862727] = -218103808;
  v4[536862728] = -202116109;
  *(_DWORD *)(v2 + 32) = peer_id;
  v5 = std::map<unsigned int,std::unordered_set<unsigned int>>::operator[](
         &this->peer_authority_entity_map_,
         (const std::map<unsigned int,std::unordered_set<unsigned int>>::key_type *)(v2 + 32));
  std::unordered_set<unsigned int>::unordered_set((std::unordered_set<unsigned int> *const)(v2 + 192), v5);
  std::set<std::shared_ptr<EntitySightGroup>>::set((std::set<std::shared_ptr<EntitySightGroup>> *const)(v2 + 112));
  __for_range = (std::unordered_set<unsigned int> *)(v2 + 192);
  __for_begin._M_cur = std::unordered_set<unsigned int>::begin((std::unordered_set<unsigned int> *const)(v2 + 192))._M_cur;
  __for_end._M_cur = std::unordered_set<unsigned int>::end((std::unordered_set<unsigned int> *const)(v2 + 192))._M_cur;
  while ( std::__detail::operator!=<unsigned int,false>(&__for_begin, &__for_end) )
  {
    v6 = std::__detail::_Node_iterator<unsigned int,true,false>::operator*(&__for_begin);
    if ( *(_BYTE *)(((unsigned __int64)v6 >> 3) + 0x7FFF8000) != 0
      && (char)(((unsigned __int8)v6 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)v6 >> 3) + 0x7FFF8000) )
    {
      __asan_report_load4(v6);
    }
    Scene::findEntity<Creature>((const Scene *const)(v2 + 48), (uint32_t)this);
    if ( std::operator!=<Creature>(0LL, (const std::shared_ptr<Creature> *)(v2 + 48)) )
    {
      std::__shared_ptr_access<Creature,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Creature,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 48));
      Entity::getSightGroup((const Entity *const)(v2 + 80));
      if ( std::operator!=<EntitySightGroup>((const std::shared_ptr<EntitySightGroup> *)(v2 + 80), 0LL) )
      {
        std::set<std::shared_ptr<EntitySightGroup>>::insert(
          (std::set<std::shared_ptr<EntitySightGroup>> *const)(v2 + 112),
          (const std::set<std::shared_ptr<EntitySightGroup>>::value_type *)(v2 + 80));
      }
      else
      {
        v7 = std::__shared_ptr_access<Creature,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Creature,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 48));
        std::shared_ptr<Player>::shared_ptr(&p_authority_player_ptr, 0LL);
        Creature::refreshAuthority(v7, &p_authority_player_ptr, 1);
        std::shared_ptr<Player>::~shared_ptr(&p_authority_player_ptr);
      }
      std::shared_ptr<EntitySightGroup>::~shared_ptr((std::shared_ptr<EntitySightGroup> *const)(v2 + 80));
    }
    std::shared_ptr<Creature>::~shared_ptr((std::shared_ptr<Creature> *const)(v2 + 48));
    std::__detail::_Node_iterator<unsigned int,true,false>::operator++(&__for_begin);
  }
  __for_range_0 = (std::set<std::shared_ptr<EntitySightGroup>> *)(v2 + 112);
  __for_begin._M_cur = (std::__detail::_Node_iterator_base<unsigned int,false>::__node_type *)std::set<std::shared_ptr<EntitySightGroup>>::begin((const std::set<std::shared_ptr<EntitySightGroup>> *const)(v2 + 112))._M_node;
  __for_end._M_cur = (std::__detail::_Node_iterator_base<unsigned int,false>::__node_type *)std::set<std::shared_ptr<EntitySightGroup>>::end(__for_range_0)._M_node;
  while ( std::operator!=(
            (const std::_Rb_tree_const_iterator<std::shared_ptr<EntitySightGroup> >::_Self *)&__for_begin,
            (const std::_Rb_tree_const_iterator<std::shared_ptr<EntitySightGroup> >::_Self *)&__for_end) )
  {
    sight_group_ptr = std::_Rb_tree_const_iterator<std::shared_ptr<EntitySightGroup>>::operator*((const std::_Rb_tree_const_iterator<std::shared_ptr<EntitySightGroup> > *const)&__for_begin);
    v8 = std::__shared_ptr_access<EntitySightGroup,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<EntitySightGroup,(__gnu_cxx::_Lock_policy)2,false,false> *const)sight_group_ptr);
    std::shared_ptr<Player>::shared_ptr(&p_authority_player_ptr, 0LL);
    EntitySightGroup::refreshAuthority(v8, &p_authority_player_ptr, 1);
    std::shared_ptr<Player>::~shared_ptr(&p_authority_player_ptr);
    std::_Rb_tree_const_iterator<std::shared_ptr<EntitySightGroup>>::operator++((std::_Rb_tree_const_iterator<std::shared_ptr<EntitySightGroup> > *const)&__for_begin);
  }
  v9 = ServiceBox::findService<GameserverService>();
  GameThreadLocal = GameserverService::getGameThreadLocal(v9);
  PlayerSendPacketController::forceFlushAll(&GameThreadLocal->player_send_packet_controller);
  std::set<std::shared_ptr<EntitySightGroup>>::~set((std::set<std::shared_ptr<EntitySightGroup>> *const)(v2 + 112));
  std::unordered_set<unsigned int>::~unordered_set((std::unordered_set<unsigned int> *const)(v2 + 192));
  if ( v17 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8014) = 0;
    *(_QWORD *)((v2 >> 3) + 0x7FFF801C) = 0LL;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8020) = -168430091;
  }
};

// Line 4652: range 000000001599C6FA-000000001599CB24
void __cdecl Scene::batchRefreshAuthority(
        Scene *const this,
        const std::vector<std::shared_ptr<Entity>> *entity_vec,
        PlayerPtr *p_authority_player_ptr)
{
  unsigned __int64 v3; // r13
  __int64 v4; // rax
  _DWORD *v5; // r12
  Creature *v6; // r14
  EntitySightGroup *v7; // r14
  GameserverService *v8; // rax
  GameThreadLocal *GameThreadLocal; // rax
  std::vector<std::shared_ptr<Entity>>::const_iterator __for_begin; // [rsp+20h] [rbp-130h] BYREF
  std::vector<std::shared_ptr<Entity>>::const_iterator __for_end; // [rsp+28h] [rbp-128h] BYREF
  const std::vector<std::shared_ptr<Entity>> *__for_range; // [rsp+30h] [rbp-120h]
  std::set<std::shared_ptr<EntitySightGroup>> *__for_range_0; // [rsp+38h] [rbp-118h]
  const std::shared_ptr<EntitySightGroup> *sight_group_ptr; // [rsp+40h] [rbp-110h]
  const std::shared_ptr<Entity> *entity_ptr; // [rsp+48h] [rbp-108h]
  std::shared_ptr<Player> v17; // [rsp+50h] [rbp-100h] BYREF
  char v18[240]; // [rsp+60h] [rbp-F0h] BYREF

  v3 = (unsigned __int64)v18;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_2(192LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "3 48 16 17 creature_ptr:4656 80 16 20 sight_group_ptr:4659 112 48 20 sight_group_set:4653";
  *(_QWORD *)(v3 + 16) = Scene::batchRefreshAuthority;
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = 61937;
  v5[536862722] = 62194;
  v5[536862723] = 62194;
  v5[536862725] = -202116109;
  std::set<std::shared_ptr<EntitySightGroup>>::set((std::set<std::shared_ptr<EntitySightGroup>> *const)(v3 + 112));
  __for_range = entity_vec;
  __for_begin._M_current = std::vector<std::shared_ptr<Entity>>::begin(entity_vec)._M_current;
  __for_end._M_current = std::vector<std::shared_ptr<Entity>>::end(entity_vec)._M_current;
  while ( __gnu_cxx::operator!=<std::shared_ptr<Entity> const*,std::vector<std::shared_ptr<Entity>>>(
            &__for_begin,
            &__for_end) )
  {
    entity_ptr = __gnu_cxx::__normal_iterator<std::shared_ptr<Entity> const*,std::vector<std::shared_ptr<Entity>>>::operator*(&__for_begin);
    std::__shared_ptr_access<Entity,(__gnu_cxx::_Lock_policy)2,false,false>::operator*((const std::__shared_ptr_access<Entity,(__gnu_cxx::_Lock_policy)2,false,false> *const)entity_ptr);
    toPtr<Creature,Entity>((Entity *)(v3 + 48));
    if ( std::operator!=<Creature>((const std::shared_ptr<Creature> *)(v3 + 48), 0LL) )
    {
      std::__shared_ptr_access<Creature,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Creature,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 48));
      Entity::getSightGroup((const Entity *const)(v3 + 80));
      if ( std::operator!=<EntitySightGroup>((const std::shared_ptr<EntitySightGroup> *)(v3 + 80), 0LL) )
      {
        std::set<std::shared_ptr<EntitySightGroup>>::insert(
          (std::set<std::shared_ptr<EntitySightGroup>> *const)(v3 + 112),
          (const std::set<std::shared_ptr<EntitySightGroup>>::value_type *)(v3 + 80));
      }
      else
      {
        v6 = std::__shared_ptr_access<Creature,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Creature,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 48));
        std::shared_ptr<Player>::shared_ptr(&v17, p_authority_player_ptr);
        Creature::refreshAuthority(v6, &v17, 1);
        std::shared_ptr<Player>::~shared_ptr(&v17);
      }
      std::shared_ptr<EntitySightGroup>::~shared_ptr((std::shared_ptr<EntitySightGroup> *const)(v3 + 80));
    }
    std::shared_ptr<Creature>::~shared_ptr((std::shared_ptr<Creature> *const)(v3 + 48));
    __gnu_cxx::__normal_iterator<std::shared_ptr<Entity> const*,std::vector<std::shared_ptr<Entity>>>::operator++(&__for_begin);
  }
  __for_range_0 = (std::set<std::shared_ptr<EntitySightGroup>> *)(v3 + 112);
  __for_begin._M_current = (const std::shared_ptr<Entity> *)std::set<std::shared_ptr<EntitySightGroup>>::begin((const std::set<std::shared_ptr<EntitySightGroup>> *const)(v3 + 112))._M_node;
  __for_end._M_current = (const std::shared_ptr<Entity> *)std::set<std::shared_ptr<EntitySightGroup>>::end(__for_range_0)._M_node;
  while ( std::operator!=(
            (const std::_Rb_tree_const_iterator<std::shared_ptr<EntitySightGroup> >::_Self *)&__for_begin,
            (const std::_Rb_tree_const_iterator<std::shared_ptr<EntitySightGroup> >::_Self *)&__for_end) )
  {
    sight_group_ptr = std::_Rb_tree_const_iterator<std::shared_ptr<EntitySightGroup>>::operator*((const std::_Rb_tree_const_iterator<std::shared_ptr<EntitySightGroup> > *const)&__for_begin);
    v7 = std::__shared_ptr_access<EntitySightGroup,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<EntitySightGroup,(__gnu_cxx::_Lock_policy)2,false,false> *const)sight_group_ptr);
    std::shared_ptr<Player>::shared_ptr(&v17, p_authority_player_ptr);
    EntitySightGroup::refreshAuthority(v7, &v17, 1);
    std::shared_ptr<Player>::~shared_ptr(&v17);
    std::_Rb_tree_const_iterator<std::shared_ptr<EntitySightGroup>>::operator++((std::_Rb_tree_const_iterator<std::shared_ptr<EntitySightGroup> > *const)&__for_begin);
  }
  v8 = ServiceBox::findService<GameserverService>();
  GameThreadLocal = GameserverService::getGameThreadLocal(v8);
  PlayerSendPacketController::forceFlushAll(&GameThreadLocal->player_send_packet_controller);
  std::set<std::shared_ptr<EntitySightGroup>>::~set((std::set<std::shared_ptr<EntitySightGroup>> *const)(v3 + 112));
  if ( v18 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8014) = 0;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
  }
};

// Line 4679: range 000000001599CB26-000000001599CD7E
float __cdecl Scene::getElementAmplifyDamage(
        Scene *const this,
        data::ElementReactionType reaction_type,
        data::ElementType element_type)
{
  unsigned __int64 v3; // rbx
  __int64 v4; // rax
  _DWORD *v5; // r12
  std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v6; // rax
  float result; // xmm0_4
  std::__detail::_Node_const_iterator<std::pair<unsigned int const,std::unordered_map<unsigned int,float> >,false,false>::pointer v8; // rax
  std::__detail::_Node_const_iterator<std::pair<unsigned int const,std::unordered_map<unsigned int,float> >,false,false>::pointer v9; // rax
  std::__detail::_Node_const_iterator<std::pair<unsigned int const,float>,false,false>::pointer v10; // rdx
  float *p_second; // rax
  std::unordered_map<unsigned int,std::unordered_map<unsigned int,float>>::key_type __x; // [rsp+1Ch] [rbp-A4h] BYREF
  std::__detail::_Node_iterator_base<std::pair<unsigned int const,std::unordered_map<unsigned int,float> >,false> __y; // [rsp+20h] [rbp-A0h] BYREF
  const std::unordered_map<unsigned int,std::unordered_map<unsigned int,float>> *elem_amplify_damage_map; // [rsp+28h] [rbp-98h]
  std::shared_ptr<Config> v16; // [rsp+30h] [rbp-90h] BYREF
  char v17[128]; // [rsp+40h] [rbp-80h] BYREF

  v3 = (unsigned __int64)v17;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_1(96LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "2 32 8 9 iter:4681 64 8 16 result_iter:4686";
  *(_QWORD *)(v3 + 16) = Scene::getElementAmplifyDamage;
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = -218959360;
  v5[536862722] = -202116352;
  ServiceBox::findService<GameserverService>();
  GameserverService::getConfig((GameserverService *const)&v16);
  v6 = std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false> *const)&v16);
  elem_amplify_damage_map = JsonConfigMgr::getGlobalCombatElemAmplifyDamageMap(&v6->design_config.json_config_mgr);
  std::shared_ptr<Config>::~shared_ptr(&v16);
  __x = reaction_type;
  *(std::unordered_map<unsigned int,std::unordered_map<unsigned int,float>>::const_iterator *)(v3 + 32) = std::unordered_map<unsigned int,std::unordered_map<unsigned int,float>>::find(elem_amplify_damage_map, &__x);
  __y._M_cur = std::unordered_map<unsigned int,std::unordered_map<unsigned int,float>>::end(elem_amplify_damage_map)._M_cur;
  if ( std::__detail::operator==<std::pair<unsigned int const,std::unordered_map<unsigned int,float>>,false>(
         (const std::__detail::_Node_iterator_base<std::pair<unsigned int const,std::unordered_map<unsigned int,float> >,false> *)(v3 + 32),
         &__y) )
  {
    result = 0.0;
  }
  else
  {
    v8 = std::__detail::_Node_const_iterator<std::pair<unsigned int const,std::unordered_map<unsigned int,float>>,false,false>::operator->((const std::__detail::_Node_const_iterator<std::pair<unsigned int const,std::unordered_map<unsigned int,float> >,false,false> *const)(v3 + 32));
    __x = element_type;
    *(std::unordered_map<unsigned int,float>::const_iterator *)(v3 + 64) = std::unordered_map<unsigned int,float>::find(
                                                                             &v8->second,
                                                                             &__x);
    v9 = std::__detail::_Node_const_iterator<std::pair<unsigned int const,std::unordered_map<unsigned int,float>>,false,false>::operator->((const std::__detail::_Node_const_iterator<std::pair<unsigned int const,std::unordered_map<unsigned int,float> >,false,false> *const)(v3 + 32));
    __y._M_cur = (std::__detail::_Node_iterator_base<std::pair<unsigned int const,std::unordered_map<unsigned int,float> >,false>::__node_type *)std::unordered_map<unsigned int,float>::end(&v9->second)._M_cur;
    if ( std::__detail::operator==<std::pair<unsigned int const,float>,false>(
           (const std::__detail::_Node_iterator_base<std::pair<unsigned int const,float>,false> *)(v3 + 64),
           (const std::__detail::_Node_iterator_base<std::pair<unsigned int const,float>,false> *)&__y) )
    {
      result = 0.0;
    }
    else
    {
      v10 = std::__detail::_Node_const_iterator<std::pair<unsigned int const,float>,false,false>::operator->((const std::__detail::_Node_const_iterator<std::pair<unsigned int const,float>,false,false> *const)(v3 + 64));
      p_second = &v10->second;
      if ( *(_BYTE *)(((unsigned __int64)p_second >> 3) + 0x7FFF8000) != 0
        && (char)(((unsigned __int8)p_second & 7) + 3) >= *(_BYTE *)(((unsigned __int64)p_second >> 3) + 0x7FFF8000) )
      {
        __asan_report_load4(p_second);
      }
      result = v10->second;
    }
  }
  if ( v17 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8008) = 0;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8008) = -168430091;
  }
  return result;
};

// Line 4696: range 000000001599CD80-000000001599CF0D
const Scene *__fastcall Scene::findWeatherArea(const Scene *const this, __int64 height_area_id, int a3)
{
  unsigned __int64 v3; // rbx
  __int64 v4; // rax
  _DWORD *v5; // r12
  std::__detail::_Node_const_iterator<std::pair<unsigned int const,std::shared_ptr<WeatherArea> >,false,false>::pointer v6; // rax
  std::__detail::_Node_iterator_base<std::pair<unsigned int const,std::shared_ptr<WeatherArea> >,false> __y; // [rsp+28h] [rbp-88h] BYREF
  char v10[128]; // [rsp+30h] [rbp-80h] BYREF

  v3 = (unsigned __int64)v10;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_1(96LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "2 48 4 19 height_area_id:4695 64 8 9 iter:4697";
  *(_QWORD *)(v3 + 16) = Scene::findWeatherArea;
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = -234556943;
  v5[536862722] = -202116352;
  *(_DWORD *)(v3 + 48) = a3;
  *(std::unordered_map<unsigned int,std::shared_ptr<WeatherArea>>::const_iterator *)(v3 + 64) = std::unordered_map<unsigned int,std::shared_ptr<WeatherArea>>::find(
                                                                                                  (const std::unordered_map<unsigned int,std::shared_ptr<WeatherArea>> *const)(height_area_id + 1600),
                                                                                                  (const std::unordered_map<unsigned int,std::shared_ptr<WeatherArea>>::key_type *)(v3 + 48));
  __y._M_cur = std::unordered_map<unsigned int,std::shared_ptr<WeatherArea>>::end((const std::unordered_map<unsigned int,std::shared_ptr<WeatherArea>> *const)(height_area_id + 1600))._M_cur;
  if ( std::__detail::operator==<std::pair<unsigned int const,std::shared_ptr<WeatherArea>>,false>(
         (const std::__detail::_Node_iterator_base<std::pair<unsigned int const,std::shared_ptr<WeatherArea> >,false> *)(v3 + 64),
         &__y) )
  {
    std::shared_ptr<WeatherArea>::shared_ptr((std::shared_ptr<WeatherArea> *const)this, 0LL);
  }
  else
  {
    v6 = std::__detail::_Node_const_iterator<std::pair<unsigned int const,std::shared_ptr<WeatherArea>>,false,false>::operator->((const std::__detail::_Node_const_iterator<std::pair<unsigned int const,std::shared_ptr<WeatherArea> >,false,false> *const)(v3 + 64));
    std::shared_ptr<WeatherArea>::shared_ptr((std::shared_ptr<WeatherArea> *const)this, &v6->second);
  }
  if ( v10 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8008) = 0;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8008) = -168430091;
  }
  return this;
};

// Line 4707: range 000000001599CF0E-000000001599D50F
Scene *__fastcall Scene::addWeatherArea(Scene *const this, Scene *height_area_id, int a3)
{
  unsigned __int64 v3; // r12
  __int64 v4; // rax
  _DWORD *v5; // r13
  unsigned __int64 v6; // rax
  bool v7; // r14
  common::milog::MiLogStream *v8; // rax
  common::milog::MiLogStream *v9; // rax
  WeatherArea *v10; // rax
  std::shared_ptr<WeatherArea> *v11; // r8
  common::milog::MiLogStream *v12; // r14
  std::__shared_ptr_access<WeatherArea,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v13; // rax
  std::pair<std::__detail::_Node_iterator<std::pair<unsigned int const,std::shared_ptr<WeatherArea> >,false,false>,bool> v14; // rax
  common::milog::MiLogStream *v15; // r14
  std::__shared_ptr_access<WeatherArea,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v16; // rax
  std::__shared_ptr_access<WeatherArea,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v17; // rax
  common::milog::MiLogStream *v18; // rax
  common::milog::MiLogStream *v19; // rax
  common::milog::MiLogStream *v20; // rax
  unsigned __int64 v21; // rax
  std::unordered_set<unsigned int>::key_type __x; // [rsp+2Ch] [rbp-B4h] BYREF
  common::milog::MiLogStream v25; // [rsp+30h] [rbp-B0h] BYREF
  char v26[144]; // [rsp+50h] [rbp-90h] BYREF

  v3 = (unsigned __int64)v26;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_1(96LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "2 48 4 19 height_area_id:4706 64 16 21 weather_area_ptr:4714";
  *(_QWORD *)(v3 + 16) = Scene::addWeatherArea;
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = -234556943;
  v5[536862722] = -202178560;
  *(_DWORD *)(v3 + 48) = a3;
  if ( *(_BYTE *)(((unsigned __int64)height_area_id >> 3) + 0x7FFF8000) )
    __asan_report_load8();
  v6 = (unsigned __int64)(height_area_id->_vptr_DescribalBase + 43);
  if ( *(_BYTE *)((v6 >> 3) + 0x7FFF8000) )
    v6 = __asan_report_load8();
  (*(void (__fastcall **)(unsigned __int64, Scene *, _QWORD))v6)(v3 + 64, height_area_id, *(unsigned int *)(v3 + 48));
  v7 = std::operator!=<WeatherArea>((const std::shared_ptr<WeatherArea> *)(v3 + 64), 0LL);
  std::shared_ptr<WeatherArea>::~shared_ptr((std::shared_ptr<WeatherArea> *const)(v3 + 64));
  if ( v7 )
  {
    common::milog::MiLogStream::create(
      &v25,
      &common::milog::MiLogDefault::default_log_obj_,
      1u,
      "./src/scene/scene.cpp",
      "addWeatherArea",
      4710);
    v8 = common::milog::MiLogStream::operator<<<char [44],(char *[44])0>(
           &v25,
           (const char (*)[44])"weather area already exist, height_area_id:");
    common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v8, (const unsigned int *)(v3 + 48));
    common::milog::MiLogStream::~MiLogStream(&v25);
    std::shared_ptr<WeatherArea>::shared_ptr((std::shared_ptr<WeatherArea> *const)this, 0LL);
  }
  else
  {
    common::tools::perf::make_shared<WeatherArea,unsigned int &>((unsigned int *)(v3 + 64), (unsigned int *)(v3 + 48));
    if ( std::operator==<WeatherArea>((const std::shared_ptr<WeatherArea> *)(v3 + 64), 0LL) )
    {
      common::milog::MiLogStream::create(
        &v25,
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/scene/scene.cpp",
        "addWeatherArea",
        4717);
      v9 = common::milog::MiLogStream::operator<<<char [40],(char *[40])0>(
             &v25,
             (const char (*)[40])"createWeatherArea fail, height_area_id:");
      common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v9, (const unsigned int *)(v3 + 48));
      common::milog::MiLogStream::~MiLogStream(&v25);
      std::shared_ptr<WeatherArea>::shared_ptr((std::shared_ptr<WeatherArea> *const)this, 0LL);
    }
    else
    {
      v10 = std::__shared_ptr_access<WeatherArea,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<WeatherArea,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 64));
      if ( WeatherArea::init(v10, height_area_id) )
      {
        common::milog::MiLogStream::create(
          &v25,
          &common::milog::MiLogDefault::default_log_obj_,
          3u,
          "./src/scene/scene.cpp",
          "addWeatherArea",
          4723);
        v12 = common::milog::MiLogStream::operator<<<char [26],(char *[26])0>(
                &v25,
                (const char (*)[26])"init fails, weather_area:");
        v13 = std::__shared_ptr_access<WeatherArea,(__gnu_cxx::_Lock_policy)2,false,false>::operator*((const std::__shared_ptr_access<WeatherArea,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 64));
        operator<<(v12, v13);
        common::milog::MiLogStream::~MiLogStream(&v25);
        std::shared_ptr<WeatherArea>::shared_ptr((std::shared_ptr<WeatherArea> *const)this, 0LL);
      }
      else
      {
        v14 = std::unordered_map<unsigned int,std::shared_ptr<WeatherArea>>::emplace<unsigned int &,std::shared_ptr<WeatherArea>&>(
                &height_area_id->weather_area_map_,
                (unsigned int *)(v3 + 48),
                (std::shared_ptr<WeatherArea> *)(v3 + 64),
                (unsigned int *)&height_area_id->weather_area_map_,
                v11);
        if ( !v14.second )
        {
          common::milog::MiLogStream::create(
            &v25,
            &common::milog::MiLogDefault::default_log_obj_,
            3u,
            "./src/scene/scene.cpp",
            "addWeatherArea",
            4729);
          v15 = common::milog::MiLogStream::operator<<<char [24],(char *[24])0>(
                  &v25,
                  (const char (*)[24])"duplicate weather_area:");
          v16 = std::__shared_ptr_access<WeatherArea,(__gnu_cxx::_Lock_policy)2,false,false>::operator*((const std::__shared_ptr_access<WeatherArea,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 64));
          operator<<(v15, v16);
          common::milog::MiLogStream::~MiLogStream(&v25);
          std::shared_ptr<WeatherArea>::shared_ptr((std::shared_ptr<WeatherArea> *const)this, 0LL);
        }
        else
        {
          v17 = std::__shared_ptr_access<WeatherArea,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<WeatherArea,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 64));
          __x = WeatherArea::getWeatherAreaId(v17);
          std::unordered_set<unsigned int>::erase(&height_area_id->closed_weather_area_set_, &__x);
          common::milog::MiLogStream::create(
            &v25,
            &common::milog::MiLogDefault::default_log_obj_,
            1u,
            "./src/scene/scene.cpp",
            "addWeatherArea",
            4734);
          v18 = common::milog::MiLogStream::operator<<<char [18],(char *[18])0>(&v25, (const char (*)[18])off_258E1160);
          v19 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                  v18,
                  (const unsigned int *)(v3 + 48));
          v20 = common::milog::MiLogStream::operator<<<char [8],(char *[8])0>(v19, (const char (*)[8])" scene:");
          common::milog::MiLogStream::operator<<<Scene,(Scene*)0>(v20, height_area_id);
          common::milog::MiLogStream::~MiLogStream(&v25);
          if ( *(_BYTE *)(((unsigned __int64)height_area_id >> 3) + 0x7FFF8000) )
            __asan_report_load8();
          v21 = (unsigned __int64)(height_area_id->_vptr_DescribalBase + 44);
          if ( *(_BYTE *)((v21 >> 3) + 0x7FFF8000) )
            v21 = __asan_report_load8();
          (*(void (__fastcall **)(Scene *))v21)(height_area_id);
          std::shared_ptr<WeatherArea>::shared_ptr(
            (std::shared_ptr<WeatherArea> *const)this,
            (std::shared_ptr<WeatherArea> *)(v3 + 64));
        }
      }
    }
    std::shared_ptr<WeatherArea>::~shared_ptr((std::shared_ptr<WeatherArea> *const)(v3 + 64));
  }
  if ( v26 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8008) = 0;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8008) = -168430091;
  }
  return this;
};

// Line 4742: range 000000001599D510-000000001599D84B
__int64 __fastcall Scene::removeWeatherArea(Scene *const this, uint32_t height_area_id)
{
  unsigned __int64 v2; // r12
  __int64 v3; // rax
  _DWORD *v4; // r13
  unsigned __int64 v5; // rax
  common::milog::MiLogStream *v6; // rax
  unsigned int v7; // r14d
  std::__shared_ptr_access<WeatherArea,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v8; // rax
  WeatherArea *v9; // rax
  common::milog::MiLogStream *v10; // rax
  common::milog::MiLogStream *v11; // rax
  common::milog::MiLogStream *v12; // rax
  __int64 result; // rax
  std::unordered_set<unsigned int>::value_type __x; // [rsp+1Ch] [rbp-B4h] BYREF
  common::milog::MiLogStream v15; // [rsp+20h] [rbp-B0h] BYREF
  char v16[144]; // [rsp+40h] [rbp-90h] BYREF

  v2 = (unsigned __int64)v16;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_1(96LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "2 48 4 19 height_area_id:4741 64 16 21 weather_area_ptr:4743";
  *(_QWORD *)(v2 + 16) = Scene::removeWeatherArea;
  v4 = (_DWORD *)(v2 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = -234556943;
  v4[536862722] = -202178560;
  *(_DWORD *)(v2 + 48) = height_area_id;
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_load8();
  v5 = (unsigned __int64)(this->_vptr_DescribalBase + 43);
  if ( *(_BYTE *)((v5 >> 3) + 0x7FFF8000) )
    v5 = __asan_report_load8();
  (*(void (__fastcall **)(unsigned __int64, Scene *const, _QWORD))v5)(v2 + 64, this, *(unsigned int *)(v2 + 48));
  if ( std::operator==<WeatherArea>((const std::shared_ptr<WeatherArea> *)(v2 + 64), 0LL) )
  {
    common::milog::MiLogStream::create(
      &v15,
      &common::milog::MiLogDefault::default_log_obj_,
      1u,
      "./src/scene/scene.cpp",
      "removeWeatherArea",
      4746);
    v6 = common::milog::MiLogStream::operator<<<char [38],(char *[38])0>(
           &v15,
           (const char (*)[38])"findWeatherArea fail. height_area_id:");
    common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v6, (const unsigned int *)(v2 + 48));
    common::milog::MiLogStream::~MiLogStream(&v15);
    v7 = -1;
  }
  else
  {
    std::unordered_map<unsigned int,std::shared_ptr<WeatherArea>>::erase(
      &this->weather_area_map_,
      (const std::unordered_map<unsigned int,std::shared_ptr<WeatherArea>>::key_type *)(v2 + 48));
    v8 = std::__shared_ptr_access<WeatherArea,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<WeatherArea,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 64));
    __x = WeatherArea::getWeatherAreaId(v8);
    std::unordered_set<unsigned int>::insert(&this->closed_weather_area_set_, &__x);
    v9 = std::__shared_ptr_access<WeatherArea,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<WeatherArea,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 64));
    WeatherArea::removeAllPlayers(v9);
    common::milog::MiLogStream::create(
      &v15,
      &common::milog::MiLogDefault::default_log_obj_,
      1u,
      "./src/scene/scene.cpp",
      "removeWeatherArea",
      4754);
    v10 = common::milog::MiLogStream::operator<<<char [21],(char *[21])0>(
            &v15,
            (const char (*)[21])"remove weather area:");
    v11 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v10, (const unsigned int *)(v2 + 48));
    v12 = common::milog::MiLogStream::operator<<<char [8],(char *[8])0>(v11, (const char (*)[8])" scene:");
    common::milog::MiLogStream::operator<<<Scene,(Scene*)0>(v12, this);
    common::milog::MiLogStream::~MiLogStream(&v15);
    v7 = 0;
  }
  std::shared_ptr<WeatherArea>::~shared_ptr((std::shared_ptr<WeatherArea> *const)(v2 + 64));
  result = v7;
  if ( v16 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8008) = 0;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8008) = -168430091;
  }
  return result;
};

// Line 4759: range 000000001599D84C-000000001599E31D
int32_t __cdecl Scene::initWeatherArea(Scene *const this)
{
  int32_t v1; // r14d
  unsigned __int64 v2; // r12
  __int64 v3; // rax
  unsigned __int64 v4; // r13
  common::milog::MiLogStream *v5; // rax
  WeatherArea *v6; // rdx
  common::milog::MiLogStream *v7; // rax
  uint32_t scene_id; // ecx
  unsigned __int64 v10; // rax
  void (__fastcall *v11)(Scene *const, _QWORD); // rcx
  unsigned __int64 v12; // rax
  void (__fastcall *v13)(unsigned __int64, Scene *const, _QWORD); // r8
  common::milog::MiLogStream *v14; // rax
  int v15; // r15d
  JsonConfigMgr *p_json_config_mgr; // rcx
  unsigned int *v17; // r8
  std::unordered_map<unsigned int,unsigned int> *p_climate_area_map; // rcx
  std::pair<std::__detail::_Node_iterator<std::pair<unsigned int const,unsigned int>,false,false>,bool> v20; // rax
  common::milog::MiLogStream *v21; // rax
  common::milog::MiLogStream *v22; // rax
  common::milog::MiLogStream *v23; // rax
  int32_t result; // eax
  unsigned int climate_type; // [rsp+14h] [rbp-10Ch] BYREF
  std::unordered_map<unsigned int,std::shared_ptr<WeatherArea>>::iterator __for_begin; // [rsp+18h] [rbp-108h] BYREF
  std::unordered_map<unsigned int,std::shared_ptr<WeatherArea>>::iterator __for_end; // [rsp+20h] [rbp-100h] BYREF
  std::unordered_map<unsigned int,std::shared_ptr<WeatherArea>> *__for_range; // [rsp+28h] [rbp-F8h]
  const std::unordered_map<unsigned int,data::WeatherExcelConfig> *__for_range_0; // [rsp+30h] [rbp-F0h]
  const SceneJsonConfig *scene_json_config_ptr; // [rsp+38h] [rbp-E8h]
  const std::unordered_map<unsigned int,data::ConfigClimateArea> *__for_range_1; // [rsp+40h] [rbp-E0h]
  const std::pair<unsigned int const,data::ConfigClimateArea> *v32; // [rsp+48h] [rbp-D8h]
  std::tuple_element<0,const std::pair<unsigned int const,data::ConfigClimateArea> >::type *climate_area_id; // [rsp+50h] [rbp-D0h]
  std::tuple_element<1,const std::pair<unsigned int const,data::ConfigClimateArea> >::type *climate_area_config; // [rsp+58h] [rbp-C8h]
  const std::pair<unsigned int const,data::WeatherExcelConfig> *v35; // [rsp+60h] [rbp-C0h]
  std::tuple_element<0,const std::pair<unsigned int const,data::WeatherExcelConfig> >::type *height_area_id_0; // [rsp+68h] [rbp-B8h]
  std::tuple_element<1,const std::pair<unsigned int const,data::WeatherExcelConfig> >::type *weather_config; // [rsp+70h] [rbp-B0h]
  std::pair<unsigned int const,std::shared_ptr<WeatherArea> > *__in; // [rsp+78h] [rbp-A8h]
  std::tuple_element<0,std::pair<unsigned int const,std::shared_ptr<WeatherArea> > >::type *height_area_id; // [rsp+80h] [rbp-A0h]
  std::tuple_element<1,std::pair<unsigned int const,std::shared_ptr<WeatherArea> > >::type *weather_area_ptr; // [rsp+88h] [rbp-98h]
  common::milog::MiLogStream v41; // [rsp+90h] [rbp-90h] BYREF
  char v42[112]; // [rsp+B0h] [rbp-70h] BYREF

  v2 = (unsigned __int64)v42;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_0(64LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "1 32 16 21 weather_area_ptr:4800";
  *(_QWORD *)(v2 + 16) = Scene::initWeatherArea;
  v4 = v2 >> 3;
  *(_DWORD *)(v4 + 2147450880) = -235802127;
  *(_DWORD *)(v4 + 2147450884) = -202178560;
  __for_range = &this->weather_area_map_;
  __for_begin._M_cur = std::unordered_map<unsigned int,std::shared_ptr<WeatherArea>>::begin(&this->weather_area_map_)._M_cur;
  __for_end._M_cur = std::unordered_map<unsigned int,std::shared_ptr<WeatherArea>>::end(&this->weather_area_map_)._M_cur;
  while ( std::__detail::operator!=<std::pair<unsigned int const,std::shared_ptr<WeatherArea>>,false>(
            &__for_begin,
            &__for_end) )
  {
    __in = std::__detail::_Node_iterator<std::pair<unsigned int const,std::shared_ptr<WeatherArea>>,false,false>::operator*(&__for_begin);
    height_area_id = std::get<0ul,unsigned int const,std::shared_ptr<WeatherArea>>(__in);
    weather_area_ptr = std::get<1ul,unsigned int const,std::shared_ptr<WeatherArea>>(__in);
    if ( std::operator==<WeatherArea>(0LL, weather_area_ptr) )
    {
      common::milog::MiLogStream::create(
        &v41,
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/scene/scene.cpp",
        "initWeatherArea",
        4765);
      v5 = common::milog::MiLogStream::operator<<<char [42],(char *[42])0>(
             &v41,
             (const char (*)[42])"weather_area_ptr is null. height_area_id:");
      common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v5, height_area_id);
      common::milog::MiLogStream::~MiLogStream(&v41);
      v1 = -1;
      goto LABEL_64;
    }
    v6 = std::__shared_ptr_access<WeatherArea,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<WeatherArea,(__gnu_cxx::_Lock_policy)2,false,false> *const)weather_area_ptr);
    if ( WeatherArea::init(v6, this) )
    {
      common::milog::MiLogStream::create(
        &v41,
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/scene/scene.cpp",
        "initWeatherArea",
        4771);
      v7 = common::milog::MiLogStream::operator<<<char [43],(char *[43])0>(
             &v41,
             (const char (*)[43])"weather_area fromBin fail, height_area_id:");
      common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v7, height_area_id);
      common::milog::MiLogStream::~MiLogStream(&v41);
      v1 = -1;
      goto LABEL_64;
    }
    std::__detail::_Node_iterator<std::pair<unsigned int const,std::shared_ptr<WeatherArea>>,false,false>::operator++(&__for_begin);
  }
  ServiceBox::findService<GameserverService>();
  GameserverService::getConfig((GameserverService *const)(v2 + 32));
  __for_range_0 = &std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 32))->design_config.txt_config_mgr.weather_config_mgr.weather_excel_config_map;
  std::shared_ptr<Config>::~shared_ptr((std::shared_ptr<Config> *const)(v2 + 32));
  __for_begin._M_cur = (std::__detail::_Node_iterator_base<std::pair<unsigned int const,std::shared_ptr<WeatherArea> >,false>::__node_type *)std::unordered_map<unsigned int,data::WeatherExcelConfig>::begin(__for_range_0)._M_cur;
  __for_end._M_cur = (std::__detail::_Node_iterator_base<std::pair<unsigned int const,std::shared_ptr<WeatherArea> >,false>::__node_type *)std::unordered_map<unsigned int,data::WeatherExcelConfig>::end(__for_range_0)._M_cur;
  while ( std::__detail::operator!=<std::pair<unsigned int const,data::WeatherExcelConfig>,false>(
            (const std::__detail::_Node_iterator_base<std::pair<unsigned int const,data::WeatherExcelConfig>,false> *)&__for_begin,
            (const std::__detail::_Node_iterator_base<std::pair<unsigned int const,data::WeatherExcelConfig>,false> *)&__for_end) )
  {
    v35 = std::__detail::_Node_const_iterator<std::pair<unsigned int const,data::WeatherExcelConfig>,false,false>::operator*((const std::__detail::_Node_const_iterator<std::pair<unsigned int const,data::WeatherExcelConfig>,false,false> *const)&__for_begin);
    height_area_id_0 = std::get<0ul,unsigned int const,data::WeatherExcelConfig>(v35);
    weather_config = (std::tuple_element<1,const std::pair<unsigned int const,data::WeatherExcelConfig> >::type *)std::get<1ul,unsigned int const,data::WeatherExcelConfig>(v35);
    if ( *(_BYTE *)(((unsigned __int64)&this->scene_id_ >> 3) + 0x7FFF8000) != 0
      && *(_BYTE *)(((unsigned __int64)&this->scene_id_ >> 3) + 0x7FFF8000) <= 3 )
    {
      __asan_report_load4(&this->scene_id_);
    }
    scene_id = this->scene_id_;
    if ( *(_BYTE *)(((unsigned __int64)&weather_config->scene_id >> 3) + 0x7FFF8000) != 0
      && *(_BYTE *)(((unsigned __int64)&weather_config->scene_id >> 3) + 0x7FFF8000) <= 3 )
    {
      __asan_report_load4(&weather_config->scene_id);
    }
    if ( scene_id == weather_config->scene_id
      && !common::tools::MiscUtils::isContains<std::unordered_map<unsigned int,std::shared_ptr<WeatherArea>>,unsigned int>(
            &this->weather_area_map_,
            height_area_id_0)
      && !common::tools::MiscUtils::isContains<std::unordered_set<unsigned int>,unsigned int>(
            &this->closed_weather_area_set_,
            &weather_config->weather_area_id) )
    {
      if ( *(_BYTE *)(((unsigned __int64)&weather_config->is_default_valid >> 3) + 0x7FFF8000) != 0
        && (((unsigned __int8)weather_config + 52) & 7) >= *(_BYTE *)(((unsigned __int64)&weather_config->is_default_valid >> 3)
                                                                    + 0x7FFF8000) )
      {
        __asan_report_load1(&weather_config->is_default_valid);
      }
      if ( !weather_config->is_default_valid )
      {
        if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
          __asan_report_load8();
        v10 = (unsigned __int64)(this->_vptr_DescribalBase + 40);
        if ( *(_BYTE *)((v10 >> 3) + 0x7FFF8000) )
          v10 = __asan_report_load8();
        v11 = *(void (__fastcall **)(Scene *const, _QWORD))v10;
        if ( *(_BYTE *)(((unsigned __int64)&weather_config->weather_area_id >> 3) + 0x7FFF8000) != 0
          && (char)((((_BYTE)weather_config + 12) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&weather_config->weather_area_id >> 3)
                                                                        + 0x7FFF8000) )
        {
          __asan_report_load4(&weather_config->weather_area_id);
        }
        v11(this, weather_config->weather_area_id);
      }
      else
      {
        if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
          __asan_report_load8();
        v12 = (unsigned __int64)(this->_vptr_DescribalBase + 45);
        if ( *(_BYTE *)((v12 >> 3) + 0x7FFF8000) )
          v12 = __asan_report_load8();
        v13 = *(void (__fastcall **)(unsigned __int64, Scene *const, _QWORD))v12;
        if ( *(_BYTE *)(((unsigned __int64)height_area_id_0 >> 3) + 0x7FFF8000) != 0
          && (char)(((unsigned __int8)height_area_id_0 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)height_area_id_0 >> 3)
                                                                             + 0x7FFF8000) )
        {
          __asan_report_load4(height_area_id_0);
        }
        v13(v2 + 32, this, *height_area_id_0);
        if ( std::operator==<WeatherArea>((const std::shared_ptr<WeatherArea> *)(v2 + 32), 0LL) )
        {
          common::milog::MiLogStream::create(
            &v41,
            &common::milog::MiLogDefault::default_log_obj_,
            3u,
            "./src/scene/scene.cpp",
            "initWeatherArea",
            4803);
          v14 = common::milog::MiLogStream::operator<<<char [39],(char *[39])0>(&v41, (const char (*)[39])off_258E1400);
          common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v14, height_area_id_0);
          common::milog::MiLogStream::~MiLogStream(&v41);
          v1 = -1;
          v15 = 0;
        }
        else
        {
          v15 = 1;
        }
        std::shared_ptr<WeatherArea>::~shared_ptr((std::shared_ptr<WeatherArea> *const)(v2 + 32));
        if ( v15 != 1 )
          goto LABEL_64;
      }
    }
    std::__detail::_Node_const_iterator<std::pair<unsigned int const,data::WeatherExcelConfig>,false,false>::operator++((std::__detail::_Node_const_iterator<std::pair<unsigned int const,data::WeatherExcelConfig>,false,false> *const)&__for_begin);
  }
  ServiceBox::findService<GameserverService>();
  GameserverService::getConfig((GameserverService *const)(v2 + 32));
  p_json_config_mgr = &std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 32))->design_config.json_config_mgr;
  if ( *(_BYTE *)(((unsigned __int64)&this->scene_id_ >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->scene_id_ >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4(&this->scene_id_);
  }
  scene_json_config_ptr = JsonConfigMgr::findSceneJsonConfig(p_json_config_mgr, this->scene_id_);
  std::shared_ptr<Config>::~shared_ptr((std::shared_ptr<Config> *const)(v2 + 32));
  if ( scene_json_config_ptr )
  {
    __for_range_1 = &scene_json_config_ptr->config_climate_area_map;
    __for_begin._M_cur = (std::__detail::_Node_iterator_base<std::pair<unsigned int const,std::shared_ptr<WeatherArea> >,false>::__node_type *)std::unordered_map<unsigned int,data::ConfigClimateArea>::begin(&scene_json_config_ptr->config_climate_area_map)._M_cur;
    __for_end._M_cur = (std::__detail::_Node_iterator_base<std::pair<unsigned int const,std::shared_ptr<WeatherArea> >,false>::__node_type *)std::unordered_map<unsigned int,data::ConfigClimateArea>::end(__for_range_1)._M_cur;
    while ( std::__detail::operator!=<std::pair<unsigned int const,data::ConfigClimateArea>,false>(
              (const std::__detail::_Node_iterator_base<std::pair<unsigned int const,data::ConfigClimateArea>,false> *)&__for_begin,
              (const std::__detail::_Node_iterator_base<std::pair<unsigned int const,data::ConfigClimateArea>,false> *)&__for_end) )
    {
      v32 = std::__detail::_Node_const_iterator<std::pair<unsigned int const,data::ConfigClimateArea>,false,false>::operator*((const std::__detail::_Node_const_iterator<std::pair<unsigned int const,data::ConfigClimateArea>,false,false> *const)&__for_begin);
      climate_area_id = std::get<0ul,unsigned int const,data::ConfigClimateArea>(v32);
      climate_area_config = (std::tuple_element<1,const std::pair<unsigned int const,data::ConfigClimateArea> >::type *)std::get<1ul,unsigned int const,data::ConfigClimateArea>(v32);
      if ( !common::tools::MiscUtils::isContains<std::unordered_map<unsigned int,unsigned int>,unsigned int>(
              &this->climate_area_map_,
              climate_area_id)
        && !common::tools::MiscUtils::isContains<std::unordered_set<unsigned int>,unsigned int>(
              &this->closed_climate_area_set_,
              climate_area_id) )
      {
        if ( *(_BYTE *)(((unsigned __int64)&climate_area_config->climate_type >> 3) + 0x7FFF8000) != 0
          && (char)((((_BYTE)climate_area_config + 4) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&climate_area_config->climate_type >> 3)
                                                                            + 0x7FFF8000) )
        {
          __asan_report_load4(&climate_area_config->climate_type);
        }
        if ( climate_area_config->climate_type )
        {
          p_climate_area_map = &this->climate_area_map_;
          if ( *(_BYTE *)(((unsigned __int64)&climate_area_config->climate_type >> 3) + 0x7FFF8000) != 0
            && (char)((((_BYTE)climate_area_config + 4) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&climate_area_config->climate_type >> 3)
                                                                              + 0x7FFF8000) )
          {
            __asan_report_load4(&climate_area_config->climate_type);
          }
          climate_type = climate_area_config->climate_type;
          v20 = std::unordered_map<unsigned int,unsigned int>::emplace<unsigned int const&,unsigned int>(
                  p_climate_area_map,
                  climate_area_id,
                  &climate_type,
                  (const unsigned int *)p_climate_area_map,
                  v17);
          if ( !v20.second )
          {
            common::milog::MiLogStream::create(
              &v41,
              &common::milog::MiLogDefault::default_log_obj_,
              3u,
              "./src/scene/scene.cpp",
              "initWeatherArea",
              4824);
            v21 = common::milog::MiLogStream::operator<<<char [18],(char *[18])0>(
                    &v41,
                    (const char (*)[18])off_258E1460);
            v22 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v21, climate_area_id);
            v23 = common::milog::MiLogStream::operator<<<char [17],(char *[17])0>(
                    v22,
                    (const char (*)[17])" fail, scene_id:");
            common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v23, &this->scene_id_);
            common::milog::MiLogStream::~MiLogStream(&v41);
          }
        }
        else
        {
          std::unordered_set<unsigned int>::insert(&this->closed_climate_area_set_, climate_area_id);
        }
      }
      std::__detail::_Node_const_iterator<std::pair<unsigned int const,data::ConfigClimateArea>,false,false>::operator++((std::__detail::_Node_const_iterator<std::pair<unsigned int const,data::ConfigClimateArea>,false,false> *const)&__for_begin);
    }
  }
  v1 = 0;
LABEL_64:
  result = v1;
  if ( v42 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 4834: range 000000001599E31E-000000001599ECD3
// local variable allocation has failed, the output may be wrong!
WeatherAreaPtr __cdecl Scene::findWeatherAreaByPosition(
        const Scene *const this,
        const Vector3 *position,
        uint32_t prev_weather_area_id)
{
  uint32_t v3; // ecx
  unsigned __int64 v4; // rbx
  __int64 v5; // rax
  _DWORD *v6; // r12
  WeatherAreaPtr result; // rax
  std::pair<unsigned int,bool> *v8; // rax
  std::pair<unsigned int,bool> *v9; // rdx
  unsigned __int64 v10; // rax
  unsigned __int8 (__fastcall *v11)(const Vector3 *, _QWORD); // rcx
  common::milog::MiLogStream *v12; // rax
  common::milog::MiLogStream *v13; // rax
  common::milog::MiLogStream *v14; // rdx
  std::__shared_ptr_access<InteriorCheckablePolygon,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v15; // r14
  char v16; // al
  unsigned __int64 v17; // rax
  void (__fastcall *v18)(const Scene *const, const Vector3 *, _QWORD); // r13
  WeatherExcelConfigMgr *p_weather_config_mgr; // rcx
  __int64 HeightAreaIdByWeatherAreaIdAndHeight; // rsi
  uint32_t prev_weather_area_ida; // [rsp+4h] [rbp-15Ch]
  const Vector3 *positiona; // [rsp+8h] [rbp-158h]
  float height; // [rsp+2Ch] [rbp-134h]
  std::vector<std::pair<unsigned int,bool>>::const_iterator __for_begin; // [rsp+30h] [rbp-130h] BYREF
  std::vector<std::pair<unsigned int,bool>>::const_iterator __for_end; // [rsp+38h] [rbp-128h] BYREF
  const SceneJsonConfig *scene_json_config_ptr; // [rsp+40h] [rbp-120h]
  const std::unordered_map<unsigned int,ConfigSceneWeatherArea> *config_scene_weather_area_map; // [rsp+48h] [rbp-118h]
  const SceneScriptConfig *scene_script_config_ptr; // [rsp+50h] [rbp-110h]
  const std::vector<std::pair<unsigned int,bool>> *weather_grid_vec_ptr; // [rsp+58h] [rbp-108h]
  const std::vector<std::pair<unsigned int,bool>> *__for_range; // [rsp+60h] [rbp-100h]
  std::tuple_element<0,const std::pair<unsigned int,bool> >::type *weather_area_id; // [rsp+68h] [rbp-F8h]
  std::tuple_element<1,const std::pair<unsigned int,bool> >::type *is_border; // [rsp+70h] [rbp-F0h]
  const ConfigSceneWeatherArea *config_scene_weather_area; // [rsp+78h] [rbp-E8h]
  std::pair<unsigned int,bool> v35; // [rsp+80h] [rbp-E0h] BYREF
  Vector2 pos; // [rsp+88h] [rbp-D8h] BYREF
  data::Point2D point; // [rsp+94h] [rbp-CCh] BYREF
  std::shared_ptr<Config> v38; // [rsp+A0h] [rbp-C0h] BYREF
  common::milog::MiLogStream v39; // [rsp+B0h] [rbp-B0h] BYREF
  char v40[144]; // [rsp+D0h] [rbp-90h] BYREF
  Vector2 v41; // 0:xmm0_8.8

  positiona = *(const Vector3 **)&prev_weather_area_id;
  prev_weather_area_ida = v3;
  v4 = (unsigned __int64)v40;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v5 = __asan_stack_malloc_1(96LL);
    if ( v5 )
      v4 = v5;
  }
  *(_QWORD *)v4 = 1102416563LL;
  *(_QWORD *)(v4 + 8) = "2 32 8 9 iter:4863 64 8 10 coord:4848";
  *(_QWORD *)(v4 + 16) = Scene::findWeatherAreaByPosition;
  v6 = (_DWORD *)(v4 >> 3);
  v6[536862720] = -235802127;
  v6[536862721] = -218959360;
  v6[536862722] = -202116352;
  scene_json_config_ptr = Scene::getJsonConfig((const Scene *const)position);
  if ( !scene_json_config_ptr
    || (config_scene_weather_area_map = &scene_json_config_ptr->config_scene_weather_area_map,
        (scene_script_config_ptr = Scene::getScriptConfig((const Scene *const)position)) == 0LL) )
  {
    std::shared_ptr<WeatherArea>::shared_ptr((std::shared_ptr<WeatherArea> *const)this, 0LL);
    goto LABEL_63;
  }
  Vector2::Vector2(&pos, positiona);
  v41 = pos;
  *(Coordinate *)(v4 + 64) = SceneScriptConfig::getCoordinate(scene_script_config_ptr, VISION_LEVEL_NORMAL, v41);
  weather_grid_vec_ptr = SceneScriptConfig::getWeatherGridVec(scene_script_config_ptr, (const Coordinate *)(v4 + 64));
  if ( !weather_grid_vec_ptr )
  {
    std::shared_ptr<WeatherArea>::shared_ptr((std::shared_ptr<WeatherArea> *const)this, 0LL);
    goto LABEL_63;
  }
  if ( *(_BYTE *)(((unsigned __int64)&positiona->y >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)positiona + 4) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&positiona->y >> 3) + 0x7FFF8000) )
  {
    __asan_report_load4(&positiona->y);
  }
  height = positiona->y;
  __for_range = weather_grid_vec_ptr;
  __for_begin._M_current = std::vector<std::pair<unsigned int,bool>>::begin(weather_grid_vec_ptr)._M_current;
  __for_end._M_current = std::vector<std::pair<unsigned int,bool>>::end(weather_grid_vec_ptr)._M_current;
  while ( 1 )
  {
    if ( !__gnu_cxx::operator!=<std::pair<unsigned int,bool> const*,std::vector<std::pair<unsigned int,bool>>>(
            &__for_begin,
            &__for_end) )
    {
      std::shared_ptr<WeatherArea>::shared_ptr((std::shared_ptr<WeatherArea> *const)this, 0LL);
      goto LABEL_63;
    }
    v8 = (std::pair<unsigned int,bool> *)__gnu_cxx::__normal_iterator<std::pair<unsigned int,bool> const*,std::vector<std::pair<unsigned int,bool>>>::operator*(&__for_begin);
    v9 = v8;
    if ( ((unsigned __int8)v8 & 7) >= *(_BYTE *)(((unsigned __int64)v8 >> 3) + 0x7FFF8000)
      && *(_BYTE *)(((unsigned __int64)v8 >> 3) + 0x7FFF8000) != 0
      || *(_BYTE *)(((unsigned __int64)(&v8->second + 3) >> 3) + 0x7FFF8000) != 0
      && (((unsigned __int8)v8 + 7) & 7) >= *(_BYTE *)(((unsigned __int64)(&v8->second + 3) >> 3) + 0x7FFF8000) )
    {
      __asan_report_load_n(v8, 8LL);
    }
    v35 = *v9;
    weather_area_id = (std::tuple_element<0,const std::pair<unsigned int,bool> >::type *)std::get<0ul,unsigned int,bool>(&v35);
    is_border = (std::tuple_element<1,const std::pair<unsigned int,bool> >::type *)std::get<1ul,unsigned int,bool>(&v35);
    if ( *(_BYTE *)(((unsigned __int64)position >> 3) + 0x7FFF8000) )
      __asan_report_load8();
    v10 = *(_QWORD *)&position->x + 328LL;
    if ( *(_BYTE *)((v10 >> 3) + 0x7FFF8000) )
      v10 = __asan_report_load8();
    v11 = *(unsigned __int8 (__fastcall **)(const Vector3 *, _QWORD))v10;
    if ( *(_BYTE *)(((unsigned __int64)weather_area_id >> 3) + 0x7FFF8000) != 0
      && (char)(((unsigned __int8)weather_area_id & 7) + 3) >= *(_BYTE *)(((unsigned __int64)weather_area_id >> 3)
                                                                        + 0x7FFF8000) )
    {
      __asan_report_load4(weather_area_id);
    }
    if ( v11(position, *weather_area_id) )
      goto LABEL_61;
    *(std::unordered_map<unsigned int,ConfigSceneWeatherArea>::const_iterator *)(v4 + 32) = std::unordered_map<unsigned int,ConfigSceneWeatherArea>::find(
                                                                                              config_scene_weather_area_map,
                                                                                              weather_area_id);
    pos = (Vector2)std::unordered_map<unsigned int,ConfigSceneWeatherArea>::end(config_scene_weather_area_map)._M_cur;
    if ( std::__detail::operator==<std::pair<unsigned int const,ConfigSceneWeatherArea>,false>(
           (const std::__detail::_Node_iterator_base<std::pair<unsigned int const,ConfigSceneWeatherArea>,false> *)(v4 + 32),
           (const std::__detail::_Node_iterator_base<std::pair<unsigned int const,ConfigSceneWeatherArea>,false> *)&pos) )
    {
      common::milog::MiLogStream::create(
        &v39,
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/scene/scene.cpp",
        "findWeatherAreaByPosition",
        4866);
      v12 = common::milog::MiLogStream::operator<<<char [17],(char *[17])0>(
              &v39,
              (const char (*)[17])"weather_area_id:");
      v13 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v12, weather_area_id);
      v14 = common::milog::MiLogStream::operator<<<char [19],(char *[19])0>(
              v13,
              (const char (*)[19])" not found! scene:");
      common::milog::MiLogStream::operator<<<Scene,(Scene*)0>(v14, (const Scene *)position);
      common::milog::MiLogStream::~MiLogStream(&v39);
      goto LABEL_61;
    }
    config_scene_weather_area = &std::__detail::_Node_const_iterator<std::pair<unsigned int const,ConfigSceneWeatherArea>,false,false>::operator->((const std::__detail::_Node_const_iterator<std::pair<unsigned int const,ConfigSceneWeatherArea>,false,false> *const)(v4 + 32))->second;
    if ( *(_BYTE *)(((unsigned __int64)is_border >> 3) + 0x7FFF8000) != 0
      && ((unsigned __int8)is_border & 7) >= *(_BYTE *)(((unsigned __int64)is_border >> 3) + 0x7FFF8000) )
    {
      __asan_report_load1(is_border);
    }
    if ( !*is_border )
      break;
    if ( *(_BYTE *)(((unsigned __int64)&config_scene_weather_area->config_weather_area.is_accurate_border >> 3)
                  + 0x7FFF8000) != 0
      && (((unsigned __int8)config_scene_weather_area + 4) & 7) >= *(_BYTE *)(((unsigned __int64)&config_scene_weather_area->config_weather_area.is_accurate_border >> 3)
                                                                            + 0x7FFF8000) )
    {
      __asan_report_load1(&config_scene_weather_area->config_weather_area.is_accurate_border);
    }
    if ( config_scene_weather_area->config_weather_area.is_accurate_border )
    {
      if ( !std::operator!=<InteriorCheckablePolygon>(0LL, &config_scene_weather_area->polygon_ptr) )
        goto LABEL_37;
      v15 = std::__shared_ptr_access<InteriorCheckablePolygon,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<InteriorCheckablePolygon,(__gnu_cxx::_Lock_policy)2,false,false> *const)&config_scene_weather_area->polygon_ptr);
      if ( *(_BYTE *)(((unsigned __int64)positiona >> 3) + 0x7FFF8000) != 0
        && (char)(((unsigned __int8)positiona & 7) + 3) >= *(_BYTE *)(((unsigned __int64)positiona >> 3) + 0x7FFF8000) )
      {
        __asan_report_load4(positiona);
      }
      point.x = positiona->x;
      if ( *(_BYTE *)(((unsigned __int64)&positiona->z >> 3) + 0x7FFF8000) != 0
        && (char)((((_BYTE)positiona + 8) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&positiona->z >> 3) + 0x7FFF8000) )
      {
        __asan_report_load4(&positiona->z);
      }
      point.y = positiona->z;
      point.is_json_loaded = 0;
      Vector2::Vector2(&pos, &point);
      if ( !InteriorCheckablePolygon::isPointInsidePolygon(v15, &pos) )
        v16 = 1;
      else
LABEL_37:
        v16 = 0;
      if ( !v16 )
        break;
    }
    else
    {
      if ( *(_BYTE *)(((unsigned __int64)weather_area_id >> 3) + 0x7FFF8000) != 0
        && (char)(((unsigned __int8)weather_area_id & 7) + 3) >= *(_BYTE *)(((unsigned __int64)weather_area_id >> 3)
                                                                          + 0x7FFF8000) )
      {
        __asan_report_load4(weather_area_id);
      }
      if ( prev_weather_area_ida == *weather_area_id )
        break;
    }
LABEL_61:
    __gnu_cxx::__normal_iterator<std::pair<unsigned int,bool> const*,std::vector<std::pair<unsigned int,bool>>>::operator++(&__for_begin);
  }
  if ( *(char *)(((unsigned __int64)&config_scene_weather_area->config_weather_area.is_use_height_border >> 3)
               + 0x7FFF8000) < 0 )
    __asan_report_load1(&config_scene_weather_area->config_weather_area.is_use_height_border);
  if ( config_scene_weather_area->config_weather_area.is_use_height_border )
  {
    if ( *(_BYTE *)(((unsigned __int64)&config_scene_weather_area->config_weather_area.bottom >> 3) + 0x7FFF8000) != 0
      && (char)((((_BYTE)config_scene_weather_area + 36) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&config_scene_weather_area->config_weather_area.bottom >> 3)
                                                                               + 0x7FFF8000) )
    {
      __asan_report_load4(&config_scene_weather_area->config_weather_area.bottom);
    }
    if ( config_scene_weather_area->config_weather_area.bottom > height )
      goto LABEL_61;
    if ( *(_BYTE *)(((unsigned __int64)&config_scene_weather_area->config_weather_area.top >> 3) + 0x7FFF8000) != 0
      && *(_BYTE *)(((unsigned __int64)&config_scene_weather_area->config_weather_area.top >> 3) + 0x7FFF8000) <= 3 )
    {
      __asan_report_load4(&config_scene_weather_area->config_weather_area.top);
    }
    if ( height > config_scene_weather_area->config_weather_area.top )
      goto LABEL_61;
  }
  if ( *(_BYTE *)(((unsigned __int64)position >> 3) + 0x7FFF8000) )
    __asan_report_load8();
  v17 = *(_QWORD *)&position->x + 344LL;
  if ( *(_BYTE *)((v17 >> 3) + 0x7FFF8000) )
    v17 = __asan_report_load8();
  v18 = *(void (__fastcall **)(const Scene *const, const Vector3 *, _QWORD))v17;
  ServiceBox::findService<GameserverService>();
  GameserverService::getConfig((GameserverService *const)&v38);
  p_weather_config_mgr = &std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false> *const)&v38)->design_config.txt_config_mgr.weather_config_mgr;
  if ( *(_BYTE *)(((unsigned __int64)weather_area_id >> 3) + 0x7FFF8000) != 0
    && (char)(((unsigned __int8)weather_area_id & 7) + 3) >= *(_BYTE *)(((unsigned __int64)weather_area_id >> 3)
                                                                      + 0x7FFF8000) )
  {
    __asan_report_load4(weather_area_id);
  }
  HeightAreaIdByWeatherAreaIdAndHeight = WeatherExcelConfigMgr::findHeightAreaIdByWeatherAreaIdAndHeight(
                                           p_weather_config_mgr,
                                           *weather_area_id,
                                           height);
  if ( *(_WORD *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store16(this, HeightAreaIdByWeatherAreaIdAndHeight);
  v18(this, position, (unsigned int)HeightAreaIdByWeatherAreaIdAndHeight);
  std::shared_ptr<Config>::~shared_ptr(&v38);
LABEL_63:
  if ( v40 == (char *)v4 )
  {
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0LL;
    *(_DWORD *)((v4 >> 3) + 0x7FFF8008) = 0;
  }
  else
  {
    *(_QWORD *)v4 = 1172321806LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v4 >> 3) + 0x7FFF8008) = -168430091;
  }
  result._M_ptr = (std::__shared_ptr<WeatherArea,(__gnu_cxx::_Lock_policy)2>::element_type *)this;
  return result;
};

// Line 4900: range 000000001599ECD4-000000001599EE73
uint32_t __cdecl Scene::findWeatherByPosition(const Scene *const this, const Vector3 *position)
{
  unsigned __int64 v2; // rbx
  __int64 v3; // rax
  unsigned __int64 v4; // r13
  unsigned __int64 v5; // rax
  uint32_t CurClimateType; // r14d
  WeatherArea *v7; // rax
  std::__shared_ptr_access<WeatherArea,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v8; // rax
  uint32_t result; // eax
  char v10[112]; // [rsp+10h] [rbp-70h] BYREF

  v2 = (unsigned __int64)v10;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_0(64LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "1 32 16 21 weather_area_ptr:4901";
  *(_QWORD *)(v2 + 16) = Scene::findWeatherByPosition;
  v4 = v2 >> 3;
  *(_DWORD *)(v4 + 2147450880) = -235802127;
  *(_DWORD *)(v4 + 2147450884) = -202178560;
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_load8();
  v5 = (unsigned __int64)(this->_vptr_DescribalBase + 47);
  if ( *(_BYTE *)((v5 >> 3) + 0x7FFF8000) )
    v5 = __asan_report_load8();
  (*(void (__fastcall **)(unsigned __int64, const Scene *const, const Vector3 *, _QWORD))v5)(
    v2 + 32,
    this,
    position,
    0LL);
  if ( std::operator==<WeatherArea>((const std::shared_ptr<WeatherArea> *)(v2 + 32), 0LL) )
  {
    CurClimateType = 0;
  }
  else
  {
    v7 = std::__shared_ptr_access<WeatherArea,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<WeatherArea,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 32));
    WeatherArea::refreshWeatherArea(v7, REFRESH_WEATHER_QUERY);
    v8 = std::__shared_ptr_access<WeatherArea,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<WeatherArea,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 32));
    CurClimateType = WeatherArea::getCurClimateType(v8);
  }
  std::shared_ptr<WeatherArea>::~shared_ptr((std::shared_ptr<WeatherArea> *const)(v2 + 32));
  result = CurClimateType;
  if ( v10 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 4913: range 000000001599EE74-000000001599F3CE
void __cdecl Scene::onAddWeather(Scene *const this)
{
  unsigned __int64 v1; // r12
  __int64 v2; // rax
  _DWORD *v3; // r13
  common::milog::MiLogStream *v4; // rdx
  common::milog::MiLogStream *v5; // rdx
  Player *v6; // rax
  common::milog::MiLogStream *v7; // r14
  std::__shared_ptr_access<Player,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v8; // rax
  common::milog::MiLogStream *v9; // rdx
  unsigned __int64 v10; // rax
  void (__fastcall *v11)(unsigned __int64, Scene *const, const Vector3 *, _QWORD); // r14
  std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v12; // rax
  const Vector3 *Position; // rax
  Player *v14; // rax
  PlayerSceneComp *SceneComp; // r14
  std::map<unsigned int,std::weak_ptr<Player>>::iterator __for_begin; // [rsp+18h] [rbp-118h] BYREF
  std::map<unsigned int,std::weak_ptr<Player>>::iterator __for_end; // [rsp+20h] [rbp-110h] BYREF
  std::map<unsigned int,std::weak_ptr<Player>> *__for_range; // [rsp+30h] [rbp-100h]
  const std::pair<unsigned int const,std::weak_ptr<Player> > *v20; // [rsp+38h] [rbp-F8h]
  std::tuple_element<0,const std::pair<unsigned int const,std::weak_ptr<Player> > >::type *uid; // [rsp+40h] [rbp-F0h]
  std::tuple_element<1,const std::pair<unsigned int const,std::weak_ptr<Player> > >::type *player_wtr; // [rsp+48h] [rbp-E8h]
  std::shared_ptr<WeatherArea> p_weather_area_ptr; // [rsp+50h] [rbp-E0h] BYREF
  common::milog::MiLogStream v24; // [rsp+60h] [rbp-D0h] BYREF
  char v25[176]; // [rsp+80h] [rbp-B0h] BYREF

  v1 = (unsigned __int64)v25;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_1(128LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "3 32 16 15 player_ptr:4923 64 16 15 avatar_ptr:4930 96 16 21 weather_area_ptr:4937";
  *(_QWORD *)(v1 + 16) = Scene::onAddWeather;
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -219021312;
  v3[536862722] = -219021312;
  v3[536862723] = -202178560;
  if ( Scene::getScriptConfig(this) )
  {
    __for_range = &this->player_map_;
    __for_begin._M_node = std::map<unsigned int,std::weak_ptr<Player>>::begin(&this->player_map_)._M_node;
    __for_end._M_node = std::map<unsigned int,std::weak_ptr<Player>>::end(&this->player_map_)._M_node;
    while ( std::operator!=(&__for_begin, &__for_end) )
    {
      v20 = std::_Rb_tree_iterator<std::pair<unsigned int const,std::weak_ptr<Player>>>::operator*(&__for_begin);
      uid = std::get<0ul,unsigned int const,std::weak_ptr<Player>>(v20);
      player_wtr = (std::tuple_element<1,const std::pair<unsigned int const,std::weak_ptr<Player> > >::type *)std::get<1ul,unsigned int const,std::weak_ptr<Player>>(v20);
      std::weak_ptr<Player>::lock((const std::weak_ptr<Player> *const)(v1 + 32));
      if ( std::operator==<Player>((const std::shared_ptr<Player> *)(v1 + 32), 0LL) )
      {
        common::milog::MiLogStream::create(
          &v24,
          &common::milog::MiLogDefault::default_log_obj_,
          3u,
          "./src/scene/scene.cpp",
          "onAddWeather",
          4926);
        v5 = common::milog::MiLogStream::operator<<<char [15],(char *[15])0>(&v24, (const char (*)[15])"player is null");
        common::milog::MiLogStream::operator<<<Scene,(Scene*)0>(v5, this);
        common::milog::MiLogStream::~MiLogStream(&v24);
      }
      else
      {
        v6 = std::__shared_ptr_access<Player,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Player,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v1 + 32));
        Player::getAvatarComp(v6);
        PlayerAvatarComp::getCurAvatar((const PlayerAvatarComp *const)(v1 + 64));
        if ( std::operator==<Avatar>((const std::shared_ptr<Avatar> *)(v1 + 64), 0LL) )
        {
          common::milog::MiLogStream::create(
            &v24,
            &common::milog::MiLogDefault::default_log_obj_,
            3u,
            "./src/scene/scene.cpp",
            "onAddWeather",
            4933);
          v7 = common::milog::MiLogStream::operator<<<char [19],(char *[19])0>(&v24, (const char (*)[19])off_258E16E0);
          v8 = std::__shared_ptr_access<Player,(__gnu_cxx::_Lock_policy)2,false,false>::operator*((const std::__shared_ptr_access<Player,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v1 + 32));
          v9 = operator<<(v7, v8);
          common::milog::MiLogStream::operator<<<Scene,(Scene*)0>(v9, this);
          common::milog::MiLogStream::~MiLogStream(&v24);
        }
        else
        {
          if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
            __asan_report_load8();
          v10 = (unsigned __int64)(this->_vptr_DescribalBase + 47);
          if ( *(_BYTE *)((v10 >> 3) + 0x7FFF8000) )
            v10 = __asan_report_load8();
          v11 = *(void (__fastcall **)(unsigned __int64, Scene *const, const Vector3 *, _QWORD))v10;
          v12 = std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v1 + 64));
          Position = Entity::getPosition((const Entity *const)v12);
          v11(v1 + 96, this, Position, 0LL);
          v14 = std::__shared_ptr_access<Player,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Player,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v1 + 32));
          SceneComp = Player::getSceneComp(v14);
          std::shared_ptr<WeatherArea>::shared_ptr(&p_weather_area_ptr, (const std::shared_ptr<WeatherArea> *)(v1 + 96));
          PlayerSceneComp::updateCurrentWeatherArea(SceneComp, &p_weather_area_ptr);
          std::shared_ptr<WeatherArea>::~shared_ptr(&p_weather_area_ptr);
          std::shared_ptr<WeatherArea>::~shared_ptr((std::shared_ptr<WeatherArea> *const)(v1 + 96));
        }
        std::shared_ptr<Avatar>::~shared_ptr((std::shared_ptr<Avatar> *const)(v1 + 64));
      }
      std::shared_ptr<Player>::~shared_ptr((std::shared_ptr<Player> *const)(v1 + 32));
      std::_Rb_tree_iterator<std::pair<unsigned int const,std::weak_ptr<Player>>>::operator++(&__for_begin);
    }
  }
  else
  {
    common::milog::MiLogStream::create(
      &v24,
      &common::milog::MiLogDefault::default_log_obj_,
      4u,
      "./src/scene/scene.cpp",
      "onAddWeather",
      4917);
    v4 = common::milog::MiLogStream::operator<<<char [29],(char *[29])0>(
           &v24,
           (const char (*)[29])"getScriptConfig fail, scene:");
    common::milog::MiLogStream::operator<<<Scene,(Scene*)0>(v4, this);
    common::milog::MiLogStream::~MiLogStream(&v24);
  }
  if ( v25 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
};

// Line 4943: range 000000001599F3D0-000000001599F455
bool __cdecl Scene::emplaceWeatherArea(Scene *const this, WeatherArea *weather_area)
{
  unsigned int *v2; // rcx
  std::shared_ptr<WeatherArea> *v3; // r8
  std::pair<std::__detail::_Node_iterator<std::pair<unsigned int const,std::shared_ptr<WeatherArea> >,false,false>,bool> v4; // rax
  bool second; // bl
  unsigned int HeightAreaId; // [rsp+1Ch] [rbp-24h] BYREF
  std::enable_shared_from_this<WeatherArea> v8; // [rsp+20h] [rbp-20h] BYREF

  std::enable_shared_from_this<WeatherArea>::shared_from_this(&v8);
  HeightAreaId = WeatherArea::getHeightAreaId(weather_area);
  v4 = std::unordered_map<unsigned int,std::shared_ptr<WeatherArea>>::emplace<unsigned int,std::shared_ptr<WeatherArea>>(
         &this->weather_area_map_,
         &HeightAreaId,
         (std::shared_ptr<WeatherArea> *)&v8,
         v2,
         v3);
  second = v4.second;
  std::shared_ptr<WeatherArea>::~shared_ptr((std::shared_ptr<WeatherArea> *const)&v8);
  return second;
};

// Line 4948: range 000000001599F4BE-000000001599FA64
__int64 __fastcall Scene::modifyClimateAreaType(
        Scene *const this,
        uint32_t climate_area_id,
        uint32_t json_climate_type,
        float meter_inherit_ratio)
{
  unsigned __int64 v4; // r12
  __int64 v5; // rax
  _DWORD *v6; // r13
  const JsonConfigMgr *p_json_config_mgr; // rdi
  uint32_t v8; // edx
  common::milog::MiLogStream *v9; // rax
  common::milog::MiLogStream *v10; // rax
  common::milog::MiLogStream *v11; // rax
  __int64 result; // rax
  common::milog::MiLogStream *v13; // rax
  common::milog::MiLogStream *v14; // rax
  common::milog::MiLogStream *v15; // rax
  std::unordered_map<unsigned int,unsigned int>::mapped_type *v16; // rax
  common::milog::MiLogStream *v17; // rax
  common::milog::MiLogStream *v18; // rax
  common::milog::MiLogStream *v19; // rax
  common::milog::MiLogStream *v20; // rax
  common::milog::MiLogStream *v21; // rax
  common::milog::MiLogStream *v22; // rax
  common::milog::MiLogStream *v23; // rax
  const data::ConfigClimateArea *config_climate_area_ptr; // [rsp+20h] [rbp-D0h]
  uint32_t *climate_type; // [rsp+28h] [rbp-C8h]
  std::shared_ptr<Config> v28; // [rsp+30h] [rbp-C0h] BYREF
  common::milog::MiLogStream v29; // [rsp+40h] [rbp-B0h] BYREF
  char v30[144]; // [rsp+60h] [rbp-90h] BYREF
  Scene::modifyClimateAreaType::<lambda(Player&)> v31; // 0:xmm0_4.4,8:rsi.8

  v4 = (unsigned __int64)v30;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v5 = __asan_stack_malloc_1(96LL);
    if ( v5 )
      v4 = v5;
  }
  *(_QWORD *)v4 = 1102416563LL;
  *(_QWORD *)(v4 + 8) = "3 32 4 21 old_climate_type:4965 48 4 20 climate_area_id:4947 64 4 22 json_climate_type:4947";
  *(_QWORD *)(v4 + 16) = Scene::modifyClimateAreaType;
  v6 = (_DWORD *)(v4 >> 3);
  v6[536862720] = -235802127;
  v6[536862721] = -234556924;
  v6[536862722] = -202116348;
  *(_DWORD *)(v4 + 48) = climate_area_id;
  *(_DWORD *)(v4 + 64) = json_climate_type;
  ServiceBox::findService<GameserverService>();
  GameserverService::getConfig((GameserverService *const)&v28);
  p_json_config_mgr = &std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false> *const)&v28)->design_config.json_config_mgr;
  v8 = *(_DWORD *)(v4 + 48);
  if ( *(_BYTE *)(((unsigned __int64)&this->scene_id_ >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->scene_id_ >> 3) + 0x7FFF8000) <= 3 )
  {
    p_json_config_mgr = (const JsonConfigMgr *)&this->scene_id_;
    __asan_report_load4(&this->scene_id_);
  }
  config_climate_area_ptr = JsonConfigMgr::findClimateAreaConfig(p_json_config_mgr, this->scene_id_, v8);
  std::shared_ptr<Config>::~shared_ptr(&v28);
  if ( config_climate_area_ptr )
  {
    if ( *(_DWORD *)(v4 + 64) )
    {
      v16 = std::unordered_map<unsigned int,unsigned int>::operator[](
              &this->climate_area_map_,
              (const std::unordered_map<unsigned int,unsigned int>::key_type *)(v4 + 48));
      climate_type = v16;
      if ( *(_BYTE *)(((unsigned __int64)v16 >> 3) + 0x7FFF8000) != 0
        && (char)(((unsigned __int8)v16 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)v16 >> 3) + 0x7FFF8000) )
      {
        __asan_report_load4(v16);
      }
      *(_DWORD *)(v4 + 32) = *climate_type;
      *climate_type = *(_DWORD *)(v4 + 64);
      std::unordered_set<unsigned int>::erase(
        &this->closed_climate_area_set_,
        (const std::unordered_set<unsigned int>::key_type *)(v4 + 48));
      common::milog::MiLogStream::create(
        &v29,
        &common::milog::MiLogDefault::default_log_obj_,
        1u,
        "./src/scene/scene.cpp",
        "modifyClimateAreaType",
        4968);
      v17 = common::milog::MiLogStream::operator<<<char [39],(char *[39])0>(
              &v29,
              (const char (*)[39])"change or open climate_area, scene_id:");
      v18 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v17, &this->scene_id_);
      v19 = common::milog::MiLogStream::operator<<<char [18],(char *[18])0>(
              v18,
              (const char (*)[18])" climate_area_id:");
      v20 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v19, (const unsigned int *)(v4 + 48));
      v21 = common::milog::MiLogStream::operator<<<char [19],(char *[19])0>(
              v20,
              (const char (*)[19])" old_climate_type:");
      v22 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v21, (const unsigned int *)(v4 + 32));
      v23 = common::milog::MiLogStream::operator<<<char [20],(char *[20])0>(
              v22,
              (const char (*)[20])" json_climate_type:");
      common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v23, (const unsigned int *)(v4 + 64));
      common::milog::MiLogStream::~MiLogStream(&v29);
    }
    else
    {
      std::unordered_map<unsigned int,unsigned int>::erase(
        &this->climate_area_map_,
        (const std::unordered_map<unsigned int,unsigned int>::key_type *)(v4 + 48));
      std::unordered_set<unsigned int>::insert(
        &this->closed_climate_area_set_,
        (const std::unordered_set<unsigned int>::value_type *)(v4 + 48));
      common::milog::MiLogStream::create(
        &v29,
        &common::milog::MiLogDefault::default_log_obj_,
        1u,
        "./src/scene/scene.cpp",
        "modifyClimateAreaType",
        4960);
      v13 = common::milog::MiLogStream::operator<<<char [30],(char *[30])0>(
              &v29,
              (const char (*)[30])"close climate_area, scene_id:");
      v14 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v13, &this->scene_id_);
      v15 = common::milog::MiLogStream::operator<<<char [18],(char *[18])0>(
              v14,
              (const char (*)[18])" climate_area_id:");
      common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v15, (const unsigned int *)(v4 + 48));
      common::milog::MiLogStream::~MiLogStream(&v29);
    }
    LODWORD(v31.__meter_inherit_ratio) = _mm_cvtsi128_si32((__m128i)LODWORD(meter_inherit_ratio));
    v31.__this = this;
    std::function<ForeachPolicy ()(Player &)>::function<Scene::modifyClimateAreaType(unsigned int,unsigned int,float)::{lambda(Player &)#1},void,void>(
      (std::function<ForeachPolicy(Player&)> *const)&v29,
      v31);
    Scene::foreachPlayer(this, (std::function<ForeachPolicy(Player&)> *)&v29);
    std::function<ForeachPolicy ()(Player &)>::~function((std::function<ForeachPolicy(Player&)> *const)&v29);
    result = 0LL;
  }
  else
  {
    common::milog::MiLogStream::create(
      &v29,
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/scene/scene.cpp",
      "modifyClimateAreaType",
      4952);
    v9 = common::milog::MiLogStream::operator<<<char [38],(char *[38])0>(
           &v29,
           (const char (*)[38])"findClimateAreaConfig fail, scene_id:");
    v10 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v9, &this->scene_id_);
    v11 = common::milog::MiLogStream::operator<<<char [18],(char *[18])0>(v10, (const char (*)[18])" climate_area_id:");
    common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v11, (const unsigned int *)(v4 + 48));
    common::milog::MiLogStream::~MiLogStream(&v29);
    result = 0xFFFFFFFFLL;
  }
  if ( v30 == (char *)v4 )
  {
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0LL;
    *(_DWORD *)((v4 >> 3) + 0x7FFF8008) = 0;
  }
  else
  {
    *(_QWORD *)v4 = 1172321806LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v4 >> 3) + 0x7FFF8008) = -168430091;
  }
  return result;
};

// Line 4973: range 000000001599F456-000000001599F4BD
ForeachPolicy __cdecl Scene::modifyClimateAreaType(unsigned int,unsigned int,float)::{lambda(Player &)#1}::operator()(
        const Scene::modifyClimateAreaType::<lambda(Player&)> *const __closure,
        Player *player)
{
  PlayerBasicComp *BasicComp; // rcx

  BasicComp = Player::getBasicComp(player);
  if ( *(_BYTE *)(((unsigned __int64)__closure >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)__closure >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4(__closure);
  }
  PlayerBasicComp::onClimateAreaChange(BasicComp, __closure->__meter_inherit_ratio);
  return 0;
};

// Line 4984: range 000000001599FA66-000000001599FB36
int32_t __cdecl Scene::getJsonClimateInfoByPos(
        const Scene *const this,
        const Vector3 *pos,
        data::JsonClimateType prev_area_json_climate_type,
        uint32_t *climate_area_id,
        data::JsonClimateType *json_climate_type)
{
  uint32_t ClimateAreaIdByPos; // ecx
  char v6; // dl
  bool v7; // dl
  data::JsonClimateType ClimateTypeByClimateAreaId; // ecx
  char v9; // dl
  __int64 v10; // rsi
  bool v11; // dl

  ClimateAreaIdByPos = Scene::getClimateAreaIdByPos(this, pos, prev_area_json_climate_type);
  v6 = *(_BYTE *)(((unsigned __int64)climate_area_id >> 3) + 0x7FFF8000);
  LOBYTE(pos) = v6 != 0;
  v7 = v6 != 0 && (char)(((unsigned __int8)climate_area_id & 7) + 3) >= v6;
  if ( v7 )
    __asan_report_store4(climate_area_id, pos, v7);
  *climate_area_id = ClimateAreaIdByPos;
  v10 = *climate_area_id;
  ClimateTypeByClimateAreaId = Scene::getClimateTypeByClimateAreaId(this, v10, 0LL);
  v9 = *(_BYTE *)(((unsigned __int64)json_climate_type >> 3) + 0x7FFF8000);
  LOBYTE(v10) = v9 != 0;
  v11 = v9 != 0 && (char)(((unsigned __int8)json_climate_type & 7) + 3) >= v9;
  if ( v11 )
    __asan_report_store4(json_climate_type, v10, v11);
  *json_climate_type = ClimateTypeByClimateAreaId;
  return 0;
};

// Line 4992: range 000000001599FB38-00000000159A047C
uint32_t __cdecl Scene::getClimateAreaIdByPos(
        const Scene *const this,
        const Vector3 *pos,
        data::JsonClimateType prev_area_json_climate_type)
{
  unsigned __int64 v3; // r12
  __int64 v4; // rax
  _DWORD *v5; // r13
  common::milog::MiLogStream *v6; // rdx
  uint32_t climate_area_id; // r14d
  common::milog::MiLogStream *v8; // rdx
  std::__shared_ptr_access<Mesh<SceneGridConfig,MeshAllocator<SceneGridConfig> >,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v9; // rax
  float y; // xmm1_4
  float v11; // xmm0_4
  char v12; // al
  std::__shared_ptr_access<InteriorCheckablePolygon,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v13; // r14
  float v15; // xmm1_4
  float v16; // xmm0_4
  char v17; // al
  std::__shared_ptr_access<InteriorCheckablePolygon,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v18; // r14
  uint32_t result; // eax
  std::vector<ClimateGridConfig>::const_iterator __for_begin; // [rsp+28h] [rbp-118h] BYREF
  std::vector<ClimateGridConfig>::const_iterator __for_end; // [rsp+30h] [rbp-110h] BYREF
  const SceneScriptConfig *scene_script_config_ptr; // [rsp+38h] [rbp-108h]
  const SceneGridConfig *grid_config_ptr; // [rsp+40h] [rbp-100h]
  const std::vector<ClimateGridConfig> *__for_range; // [rsp+48h] [rbp-F8h]
  const std::vector<ClimateGridConfig> *__for_range_0; // [rsp+50h] [rbp-F0h]
  const ClimateGridConfig *climate_grid_config_0; // [rsp+58h] [rbp-E8h]
  const ClimateGridConfig *climate_grid_config; // [rsp+60h] [rbp-E0h]
  Vector2 point; // [rsp+68h] [rbp-D8h] BYREF
  common::milog::MiLogStream v31; // [rsp+70h] [rbp-D0h] BYREF
  char v32[176]; // [rsp+90h] [rbp-B0h] BYREF
  Vector2 v33; // 0:xmm0_8.8

  v3 = (unsigned __int64)v32;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_1(128LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "3 32 8 10 coord:5007 64 12 10 point:5016 96 16 31 static_group_load_mesh_ptr:5000";
  *(_QWORD *)(v3 + 16) = Scene::getClimateAreaIdByPos;
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = -218959360;
  v5[536862722] = -219020288;
  v5[536862723] = -202178560;
  scene_script_config_ptr = Scene::getScriptConfig(this);
  if ( scene_script_config_ptr )
  {
    SceneScriptConfig::getStaticGroupMeshPtr(
      (const SceneScriptConfig *const)(v3 + 96),
      (data::VisionLevelType)scene_script_config_ptr);
    if ( std::operator==<Mesh<SceneGridConfig,MeshAllocator<SceneGridConfig>>>(
           (const std::shared_ptr<Mesh<SceneGridConfig,MeshAllocator<SceneGridConfig> > > *)(v3 + 96),
           0LL) )
    {
      common::milog::MiLogStream::create(
        &v31,
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/scene/scene.cpp",
        "getClimateAreaIdByPos",
        5003);
      v8 = common::milog::MiLogStream::operator<<<char [35],(char *[35])0>(
             &v31,
             (const char (*)[35])"getStaticGroupMeshPtr fail, scene:");
      common::milog::MiLogStream::operator<<<Scene,(Scene*)0>(v8, this);
      common::milog::MiLogStream::~MiLogStream(&v31);
      climate_area_id = 0;
    }
    else
    {
      Vector2::Vector2(&point, pos);
      v33 = point;
      *(Coordinate *)(v3 + 32) = SceneScriptConfig::getCoordinate(scene_script_config_ptr, VISION_LEVEL_NORMAL, v33);
      v9 = std::__shared_ptr_access<Mesh<SceneGridConfig,MeshAllocator<SceneGridConfig>>,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Mesh<SceneGridConfig,MeshAllocator<SceneGridConfig> >,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 96));
      grid_config_ptr = Mesh<SceneGridConfig,MeshAllocator<SceneGridConfig>>::findGrid(
                          v9,
                          *(_DWORD *)(v3 + 32),
                          *(_DWORD *)(v3 + 36));
      if ( grid_config_ptr )
      {
        *(_QWORD *)(v3 + 64) = 0LL;
        *(_DWORD *)(v3 + 72) = 0;
        if ( *(_BYTE *)(((unsigned __int64)pos >> 3) + 0x7FFF8000) != 0
          && (char)(((unsigned __int8)pos & 7) + 3) >= *(_BYTE *)(((unsigned __int64)pos >> 3) + 0x7FFF8000) )
        {
          __asan_report_load4(pos);
        }
        *(float *)(v3 + 64) = pos->x;
        if ( *(_BYTE *)(((unsigned __int64)&pos->z >> 3) + 0x7FFF8000) != 0
          && (char)((((_BYTE)pos + 8) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&pos->z >> 3) + 0x7FFF8000) )
        {
          __asan_report_load4(&pos->z);
        }
        *(float *)(v3 + 68) = pos->z;
        __for_range = &grid_config_ptr->climate_grid_vec;
        __for_begin._M_current = std::vector<ClimateGridConfig>::begin(&grid_config_ptr->climate_grid_vec)._M_current;
        __for_end._M_current = std::vector<ClimateGridConfig>::end(&grid_config_ptr->climate_grid_vec)._M_current;
        while ( __gnu_cxx::operator!=<ClimateGridConfig const*,std::vector<ClimateGridConfig>>(&__for_begin, &__for_end) )
        {
          climate_grid_config = __gnu_cxx::__normal_iterator<ClimateGridConfig const*,std::vector<ClimateGridConfig>>::operator*(&__for_begin);
          if ( common::tools::MiscUtils::isContains<std::unordered_set<unsigned int> const,unsigned int>(
                 &this->closed_climate_area_set_,
                 &climate_grid_config->climate_area_id) )
          {
            goto LABEL_28;
          }
          if ( *(_BYTE *)(((unsigned __int64)climate_grid_config >> 3) + 0x7FFF8000) != 0
            && *(_BYTE *)(((unsigned __int64)climate_grid_config >> 3) + 0x7FFF8000) <= 3 )
          {
            __asan_report_load4(climate_grid_config);
          }
          if ( prev_area_json_climate_type != Scene::getClimateTypeByClimateAreaId(
                                                this,
                                                climate_grid_config->climate_area_id,
                                                0LL) )
            goto LABEL_28;
          if ( *(_BYTE *)(((unsigned __int64)&pos->y >> 3) + 0x7FFF8000) != 0
            && (char)((((_BYTE)pos + 4) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&pos->y >> 3) + 0x7FFF8000) )
          {
            __asan_report_load4(&pos->y);
          }
          y = pos->y;
          if ( *(_BYTE *)(((unsigned __int64)&climate_grid_config->min_height >> 3) + 0x7FFF8000) != 0
            && (char)((((_BYTE)climate_grid_config + 4) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&climate_grid_config->min_height >> 3)
                                                                              + 0x7FFF8000) )
          {
            __asan_report_load4(&climate_grid_config->min_height);
          }
          if ( climate_grid_config->min_height > y )
            goto LABEL_28;
          v11 = pos->y;
          if ( *(_BYTE *)(((unsigned __int64)&climate_grid_config->max_height >> 3) + 0x7FFF8000) != 0
            && *(_BYTE *)(((unsigned __int64)&climate_grid_config->max_height >> 3) + 0x7FFF8000) <= 3 )
          {
            __asan_report_load4(&climate_grid_config->max_height);
          }
          if ( v11 <= climate_grid_config->max_height )
            v12 = 0;
          else
LABEL_28:
            v12 = 1;
          if ( !v12 )
          {
            if ( std::operator==<InteriorCheckablePolygon>(0LL, &climate_grid_config->polygon_ptr)
              || (v13 = std::__shared_ptr_access<InteriorCheckablePolygon,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<InteriorCheckablePolygon,(__gnu_cxx::_Lock_policy)2,false,false> *const)&climate_grid_config->polygon_ptr),
                  Vector2::Vector2(&point, (const data::Point2D *)(v3 + 64)),
                  InteriorCheckablePolygon::isPointInsidePolygon(v13, &point)) )
            {
              if ( *(_BYTE *)(((unsigned __int64)climate_grid_config >> 3) + 0x7FFF8000) != 0
                && *(_BYTE *)(((unsigned __int64)climate_grid_config >> 3) + 0x7FFF8000) <= 3 )
              {
                __asan_report_load4(climate_grid_config);
              }
              climate_area_id = climate_grid_config->climate_area_id;
              goto LABEL_67;
            }
          }
          __gnu_cxx::__normal_iterator<ClimateGridConfig const*,std::vector<ClimateGridConfig>>::operator++(&__for_begin);
        }
        __for_range_0 = &grid_config_ptr->climate_grid_vec;
        __for_begin._M_current = std::vector<ClimateGridConfig>::begin(&grid_config_ptr->climate_grid_vec)._M_current;
        __for_end._M_current = std::vector<ClimateGridConfig>::end(__for_range_0)._M_current;
        while ( 1 )
        {
          if ( !__gnu_cxx::operator!=<ClimateGridConfig const*,std::vector<ClimateGridConfig>>(&__for_begin, &__for_end) )
          {
            climate_area_id = 0;
            goto LABEL_67;
          }
          climate_grid_config_0 = __gnu_cxx::__normal_iterator<ClimateGridConfig const*,std::vector<ClimateGridConfig>>::operator*(&__for_begin);
          if ( common::tools::MiscUtils::isContains<std::unordered_set<unsigned int> const,unsigned int>(
                 &this->closed_climate_area_set_,
                 &climate_grid_config_0->climate_area_id) )
          {
            goto LABEL_54;
          }
          if ( *(_BYTE *)(((unsigned __int64)climate_grid_config_0 >> 3) + 0x7FFF8000) != 0
            && *(_BYTE *)(((unsigned __int64)climate_grid_config_0 >> 3) + 0x7FFF8000) <= 3 )
          {
            __asan_report_load4(climate_grid_config_0);
          }
          if ( prev_area_json_climate_type == Scene::getClimateTypeByClimateAreaId(
                                                this,
                                                climate_grid_config_0->climate_area_id,
                                                0LL) )
            goto LABEL_54;
          if ( *(_BYTE *)(((unsigned __int64)&pos->y >> 3) + 0x7FFF8000) != 0
            && (char)((((_BYTE)pos + 4) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&pos->y >> 3) + 0x7FFF8000) )
          {
            __asan_report_load4(&pos->y);
          }
          v15 = pos->y;
          if ( *(_BYTE *)(((unsigned __int64)&climate_grid_config_0->min_height >> 3) + 0x7FFF8000) != 0
            && (char)((((_BYTE)climate_grid_config_0 + 4) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&climate_grid_config_0->min_height >> 3)
                                                                                + 0x7FFF8000) )
          {
            __asan_report_load4(&climate_grid_config_0->min_height);
          }
          if ( climate_grid_config_0->min_height > v15 )
            goto LABEL_54;
          v16 = pos->y;
          if ( *(_BYTE *)(((unsigned __int64)&climate_grid_config_0->max_height >> 3) + 0x7FFF8000) != 0
            && *(_BYTE *)(((unsigned __int64)&climate_grid_config_0->max_height >> 3) + 0x7FFF8000) <= 3 )
          {
            __asan_report_load4(&climate_grid_config_0->max_height);
          }
          if ( v16 > climate_grid_config_0->max_height )
LABEL_54:
            v17 = 1;
          else
            v17 = 0;
          if ( !v17 )
          {
            if ( std::operator==<InteriorCheckablePolygon>(0LL, &climate_grid_config_0->polygon_ptr) )
              break;
            v18 = std::__shared_ptr_access<InteriorCheckablePolygon,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<InteriorCheckablePolygon,(__gnu_cxx::_Lock_policy)2,false,false> *const)&climate_grid_config_0->polygon_ptr);
            Vector2::Vector2(&point, (const data::Point2D *)(v3 + 64));
            if ( InteriorCheckablePolygon::isPointInsidePolygon(v18, &point) )
              break;
          }
          __gnu_cxx::__normal_iterator<ClimateGridConfig const*,std::vector<ClimateGridConfig>>::operator++(&__for_begin);
        }
        if ( *(_BYTE *)(((unsigned __int64)climate_grid_config_0 >> 3) + 0x7FFF8000) != 0
          && *(_BYTE *)(((unsigned __int64)climate_grid_config_0 >> 3) + 0x7FFF8000) <= 3 )
        {
          __asan_report_load4(climate_grid_config_0);
        }
        climate_area_id = climate_grid_config_0->climate_area_id;
      }
      else
      {
        climate_area_id = 0;
      }
    }
LABEL_67:
    std::shared_ptr<Mesh<SceneGridConfig,MeshAllocator<SceneGridConfig>>>::~shared_ptr((std::shared_ptr<Mesh<SceneGridConfig,MeshAllocator<SceneGridConfig> > > *const)(v3 + 96));
  }
  else
  {
    common::milog::MiLogStream::create(
      &v31,
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/scene/scene.cpp",
      "getClimateAreaIdByPos",
      4996);
    v6 = common::milog::MiLogStream::operator<<<char [29],(char *[29])0>(
           &v31,
           (const char (*)[29])"getScriptConfig fail, scene:");
    common::milog::MiLogStream::operator<<<Scene,(Scene*)0>(v6, this);
    common::milog::MiLogStream::~MiLogStream(&v31);
    climate_area_id = 0;
  }
  result = climate_area_id;
  if ( v32 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 5049: range 00000000159A047E-00000000159A08A8
__int64 __fastcall Scene::getClimateTypeByClimateAreaId(
        const Scene *const this,
        uint32_t climate_area_id,
        unsigned __int64 is_force_clear_different_climate_meter_ptr)
{
  unsigned __int64 v3; // rbx
  __int64 v4; // rax
  _DWORD *v5; // r13
  __int64 result; // rax
  std::__detail::_Node_const_iterator<std::pair<unsigned int const,unsigned int>,false,false>::pointer v8; // rdx
  unsigned int *p_second; // rax
  common::milog::MiLogStream *v10; // rax
  common::milog::MiLogStream *v11; // rax
  common::milog::MiLogStream *v12; // rax
  const JsonConfigMgr *p_json_config_mgr; // rdi
  uint32_t v14; // edx
  __int64 scene_id; // rsi
  bool is_force_clear_different_climate_meter; // cl
  char v17; // dl
  __int64 v18; // rdx
  std::__detail::_Node_iterator_base<std::pair<unsigned int const,unsigned int>,false> __y; // [rsp+20h] [rbp-C0h] BYREF
  const data::ConfigClimateArea *climate_area_config_ptr; // [rsp+28h] [rbp-B8h]
  std::shared_ptr<Config> v23; // [rsp+30h] [rbp-B0h] BYREF
  common::milog::MiLogStream v24; // [rsp+40h] [rbp-A0h] BYREF
  char v25[128]; // [rsp+60h] [rbp-80h] BYREF

  v3 = (unsigned __int64)v25;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_1(96LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "2 48 4 20 climate_area_id:5048 64 8 9 iter:5054";
  *(_QWORD *)(v3 + 16) = Scene::getClimateTypeByClimateAreaId;
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = -234556943;
  v5[536862722] = -202116352;
  *(_DWORD *)(v3 + 48) = climate_area_id;
  if ( !*(_DWORD *)(v3 + 48)
    || common::tools::MiscUtils::isContains<std::unordered_set<unsigned int> const,unsigned int>(
         &this->closed_climate_area_set_,
         (const unsigned int *)(v3 + 48)) )
  {
    result = 0LL;
  }
  else
  {
    *(std::unordered_map<unsigned int,unsigned int>::const_iterator *)(v3 + 64) = std::unordered_map<unsigned int,unsigned int>::find(
                                                                                    &this->climate_area_map_,
                                                                                    (const std::unordered_map<unsigned int,unsigned int>::key_type *)(v3 + 48));
    __y._M_cur = std::unordered_map<unsigned int,unsigned int>::end(&this->climate_area_map_)._M_cur;
    if ( std::__detail::operator!=<std::pair<unsigned int const,unsigned int>,false>(
           (const std::__detail::_Node_iterator_base<std::pair<unsigned int const,unsigned int>,false> *)(v3 + 64),
           &__y) )
    {
      v8 = std::__detail::_Node_const_iterator<std::pair<unsigned int const,unsigned int>,false,false>::operator->((const std::__detail::_Node_const_iterator<std::pair<unsigned int const,unsigned int>,false,false> *const)(v3 + 64));
      p_second = &v8->second;
      if ( *(_BYTE *)(((unsigned __int64)p_second >> 3) + 0x7FFF8000) != 0
        && (char)(((unsigned __int8)p_second & 7) + 3) >= *(_BYTE *)(((unsigned __int64)p_second >> 3) + 0x7FFF8000) )
      {
        __asan_report_load4(p_second);
      }
      result = v8->second;
    }
    else
    {
      common::milog::MiLogStream::create(
        &v24,
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/scene/scene.cpp",
        "getClimateTypeByClimateAreaId",
        5059);
      v10 = common::milog::MiLogStream::operator<<<char [37],(char *[37])0>(
              &v24,
              (const char (*)[37])"climate area state not found. scene:");
      v11 = common::milog::MiLogStream::operator<<<Scene,(Scene*)0>(v10, this);
      v12 = common::milog::MiLogStream::operator<<<char [18],(char *[18])0>(
              v11,
              (const char (*)[18])" climate_area_id:");
      common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v12, (const unsigned int *)(v3 + 48));
      common::milog::MiLogStream::~MiLogStream(&v24);
      ServiceBox::findService<GameserverService>();
      GameserverService::getConfig((GameserverService *const)&v23);
      p_json_config_mgr = &std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false> *const)&v23)->design_config.json_config_mgr;
      v14 = *(_DWORD *)(v3 + 48);
      if ( *(_BYTE *)(((unsigned __int64)&this->scene_id_ >> 3) + 0x7FFF8000) != 0
        && *(_BYTE *)(((unsigned __int64)&this->scene_id_ >> 3) + 0x7FFF8000) <= 3 )
      {
        p_json_config_mgr = (const JsonConfigMgr *)&this->scene_id_;
        __asan_report_load4(&this->scene_id_);
      }
      scene_id = this->scene_id_;
      climate_area_config_ptr = JsonConfigMgr::findClimateAreaConfig(p_json_config_mgr, scene_id, v14);
      std::shared_ptr<Config>::~shared_ptr(&v23);
      if ( climate_area_config_ptr )
      {
        if ( is_force_clear_different_climate_meter_ptr )
        {
          if ( *(char *)(((unsigned __int64)&climate_area_config_ptr->is_force_clear_different_climate_meter >> 3)
                       + 0x7FFF8000) < 0 )
            __asan_report_load1(&climate_area_config_ptr->is_force_clear_different_climate_meter);
          is_force_clear_different_climate_meter = climate_area_config_ptr->is_force_clear_different_climate_meter;
          v17 = *(_BYTE *)((is_force_clear_different_climate_meter_ptr >> 3) + 0x7FFF8000);
          LOBYTE(scene_id) = v17 != 0;
          v18 = (v17 != 0) & (unsigned __int8)((char)(is_force_clear_different_climate_meter_ptr & 7) >= v17);
          if ( (_BYTE)v18 )
            __asan_report_store1(is_force_clear_different_climate_meter_ptr, scene_id, v18);
          *(_BYTE *)is_force_clear_different_climate_meter_ptr = is_force_clear_different_climate_meter;
        }
        if ( *(_BYTE *)(((unsigned __int64)&climate_area_config_ptr->climate_type >> 3) + 0x7FFF8000) != 0
          && (char)((((_BYTE)climate_area_config_ptr + 4) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&climate_area_config_ptr->climate_type >> 3)
                                                                                + 0x7FFF8000) )
        {
          __asan_report_load4(&climate_area_config_ptr->climate_type);
        }
        result = (unsigned int)climate_area_config_ptr->climate_type;
      }
      else
      {
        result = 0LL;
      }
    }
  }
  if ( v25 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8008) = 0;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8008) = -168430091;
  }
  return result;
};

// Line 5073: range 00000000159A08AA-00000000159A11B2
uint32_t __cdecl Scene::getPolygonIdByPos(const Scene *const this, const Vector3 *pos)
{
  unsigned __int64 v2; // r13
  __int64 v3; // rax
  _DWORD *v4; // r12
  common::milog::MiLogStream *v5; // rdx
  uint32_t polygon_id; // r14d
  common::milog::MiLogStream *v7; // rdx
  common::milog::MiLogStream *v8; // rdx
  std::__shared_ptr_access<Mesh<SceneGridConfig,MeshAllocator<SceneGridConfig> >,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v9; // rax
  common::milog::MiLogStream *v10; // rax
  common::milog::MiLogStream *v11; // rax
  common::milog::MiLogStream *v12; // rax
  common::milog::MiLogStream *v13; // rax
  common::milog::MiLogStream *v14; // rdx
  common::milog::MiLogStream *v15; // rax
  common::milog::MiLogStream *v16; // rax
  common::milog::MiLogStream *v17; // rdx
  std::__detail::_Node_const_iterator<std::pair<unsigned int const,data::ConfigCommonPolygon>,false,false>::pointer v18; // rax
  float y; // xmm1_4
  float v20; // xmm0_4
  std::__shared_ptr_access<InteriorCheckablePolygon,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v21; // r14
  uint32_t result; // eax
  std::vector<PolygonGridConfig>::const_iterator __for_begin; // [rsp+10h] [rbp-140h] BYREF
  std::vector<PolygonGridConfig>::const_iterator __for_end; // [rsp+18h] [rbp-138h] BYREF
  const SceneJsonConfig *scene_json_config_ptr; // [rsp+20h] [rbp-130h]
  const SceneScriptConfig *scene_script_config_ptr; // [rsp+28h] [rbp-128h]
  const SceneGridConfig *grid_config_ptr; // [rsp+30h] [rbp-120h]
  const std::unordered_map<unsigned int,data::ConfigCommonPolygon> *config_common_polygon_map; // [rsp+38h] [rbp-118h]
  const std::vector<PolygonGridConfig> *__for_range; // [rsp+40h] [rbp-110h]
  const PolygonGridConfig *polygon_grid_config; // [rsp+48h] [rbp-108h]
  const data::ConfigCommonPolygon *config_common_polygon; // [rsp+50h] [rbp-100h]
  std::__detail::_Node_iterator_base<std::pair<unsigned int const,data::ConfigCommonPolygon>,false> __y; // [rsp+58h] [rbp-F8h] BYREF
  common::milog::MiLogStream v34; // [rsp+60h] [rbp-F0h] BYREF
  char v35[208]; // [rsp+80h] [rbp-D0h] BYREF
  Vector2 M_cur; // 0:xmm0_8.8

  v2 = (unsigned __int64)v35;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_2(160LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "4 32 8 9 iter:5107 64 8 10 coord:5095 96 12 10 point:5103 128 16 31 static_group_load_mesh_ptr:5088";
  *(_QWORD *)(v2 + 16) = Scene::getPolygonIdByPos;
  v4 = (_DWORD *)(v2 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = -218959360;
  v4[536862722] = -218959360;
  v4[536862723] = -219020288;
  v4[536862724] = -202178560;
  scene_json_config_ptr = Scene::getJsonConfig(this);
  if ( !scene_json_config_ptr )
  {
    common::milog::MiLogStream::create(
      &v34,
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/scene/scene.cpp",
      "getPolygonIdByPos",
      5077);
    v5 = common::milog::MiLogStream::operator<<<char [27],(char *[27])0>(
           &v34,
           (const char (*)[27])"getJsonConfig fail, scene:");
    common::milog::MiLogStream::operator<<<Scene,(Scene*)0>(v5, this);
    common::milog::MiLogStream::~MiLogStream(&v34);
    polygon_id = 0;
    goto LABEL_42;
  }
  scene_script_config_ptr = Scene::getScriptConfig(this);
  if ( !scene_script_config_ptr )
  {
    common::milog::MiLogStream::create(
      &v34,
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/scene/scene.cpp",
      "getPolygonIdByPos",
      5084);
    v7 = common::milog::MiLogStream::operator<<<char [29],(char *[29])0>(
           &v34,
           (const char (*)[29])"getScriptConfig fail, scene:");
    common::milog::MiLogStream::operator<<<Scene,(Scene*)0>(v7, this);
    common::milog::MiLogStream::~MiLogStream(&v34);
    polygon_id = 0;
    goto LABEL_42;
  }
  SceneScriptConfig::getStaticGroupMeshPtr(
    (const SceneScriptConfig *const)(v2 + 128),
    (data::VisionLevelType)scene_script_config_ptr);
  if ( std::operator==<Mesh<SceneGridConfig,MeshAllocator<SceneGridConfig>>>(
         (const std::shared_ptr<Mesh<SceneGridConfig,MeshAllocator<SceneGridConfig> > > *)(v2 + 128),
         0LL) )
  {
    common::milog::MiLogStream::create(
      &v34,
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/scene/scene.cpp",
      "getPolygonIdByPos",
      5091);
    v8 = common::milog::MiLogStream::operator<<<char [35],(char *[35])0>(
           &v34,
           (const char (*)[35])"getStaticGroupMeshPtr fail, scene:");
    common::milog::MiLogStream::operator<<<Scene,(Scene*)0>(v8, this);
    common::milog::MiLogStream::~MiLogStream(&v34);
    polygon_id = 0;
    goto LABEL_41;
  }
  Vector2::Vector2((Vector2 *const)&__y, pos);
  M_cur = (Vector2)__y._M_cur;
  *(Coordinate *)(v2 + 64) = SceneScriptConfig::getCoordinate(scene_script_config_ptr, VISION_LEVEL_NORMAL, M_cur);
  v9 = std::__shared_ptr_access<Mesh<SceneGridConfig,MeshAllocator<SceneGridConfig>>,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Mesh<SceneGridConfig,MeshAllocator<SceneGridConfig> >,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 128));
  grid_config_ptr = Mesh<SceneGridConfig,MeshAllocator<SceneGridConfig>>::findGrid(
                      v9,
                      *(_DWORD *)(v2 + 64),
                      *(_DWORD *)(v2 + 68));
  if ( !grid_config_ptr )
  {
    common::milog::MiLogStream::create(
      &v34,
      &common::milog::MiLogDefault::default_log_obj_,
      1u,
      "./src/scene/scene.cpp",
      "getPolygonIdByPos",
      5099);
    v10 = common::milog::MiLogStream::operator<<<char [23],(char *[23])0>(
            &v34,
            (const char (*)[23])"findGrid fail, coord:(");
    v11 = common::milog::MiLogStream::operator<<<int,(int *)0>(v10, (const int *)(v2 + 64));
    v12 = common::milog::MiLogStream::operator<<<char [2],(char *[2])0>(v11, (const char (*)[2])",");
    v13 = common::milog::MiLogStream::operator<<<int,(int *)0>(v12, (const int *)(v2 + 68));
    v14 = common::milog::MiLogStream::operator<<<char [9],(char *[9])0>(v13, (const char (*)[9])") scene:");
    common::milog::MiLogStream::operator<<<Scene,(Scene*)0>(v14, this);
    common::milog::MiLogStream::~MiLogStream(&v34);
    polygon_id = 0;
    goto LABEL_41;
  }
  *(_QWORD *)(v2 + 96) = 0LL;
  *(_DWORD *)(v2 + 104) = 0;
  if ( *(_BYTE *)(((unsigned __int64)pos >> 3) + 0x7FFF8000) != 0
    && (char)(((unsigned __int8)pos & 7) + 3) >= *(_BYTE *)(((unsigned __int64)pos >> 3) + 0x7FFF8000) )
  {
    __asan_report_load4(pos);
  }
  *(float *)(v2 + 96) = pos->x;
  if ( *(_BYTE *)(((unsigned __int64)&pos->z >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)pos + 8) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&pos->z >> 3) + 0x7FFF8000) )
  {
    __asan_report_load4(&pos->z);
  }
  *(float *)(v2 + 100) = pos->z;
  config_common_polygon_map = &scene_json_config_ptr->config_common_polygon_map;
  __for_range = &grid_config_ptr->polygon_grid_vec;
  __for_begin._M_current = std::vector<PolygonGridConfig>::begin(&grid_config_ptr->polygon_grid_vec)._M_current;
  __for_end._M_current = std::vector<PolygonGridConfig>::end(&grid_config_ptr->polygon_grid_vec)._M_current;
  while ( 1 )
  {
    if ( !__gnu_cxx::operator!=<PolygonGridConfig const*,std::vector<PolygonGridConfig>>(&__for_begin, &__for_end) )
    {
      polygon_id = 0;
      goto LABEL_41;
    }
    polygon_grid_config = __gnu_cxx::__normal_iterator<PolygonGridConfig const*,std::vector<PolygonGridConfig>>::operator*(&__for_begin);
    *(std::unordered_map<unsigned int,data::ConfigCommonPolygon>::const_iterator *)(v2 + 32) = std::unordered_map<unsigned int,data::ConfigCommonPolygon>::find(
                                                                                                 config_common_polygon_map,
                                                                                                 &polygon_grid_config->polygon_id);
    __y._M_cur = std::unordered_map<unsigned int,data::ConfigCommonPolygon>::end(config_common_polygon_map)._M_cur;
    if ( std::__detail::operator==<std::pair<unsigned int const,data::ConfigCommonPolygon>,false>(
           (const std::__detail::_Node_iterator_base<std::pair<unsigned int const,data::ConfigCommonPolygon>,false> *)(v2 + 32),
           &__y) )
    {
      common::milog::MiLogStream::create(
        &v34,
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/scene/scene.cpp",
        "getPolygonIdByPos",
        5110);
      v15 = common::milog::MiLogStream::operator<<<char [12],(char *[12])0>(&v34, (const char (*)[12])"polygon_id:");
      v16 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
              v15,
              &polygon_grid_config->polygon_id);
      v17 = common::milog::MiLogStream::operator<<<char [19],(char *[19])0>(
              v16,
              (const char (*)[19])" not found! scene:");
      common::milog::MiLogStream::operator<<<Scene,(Scene*)0>(v17, this);
      common::milog::MiLogStream::~MiLogStream(&v34);
      goto LABEL_39;
    }
    v18 = std::__detail::_Node_const_iterator<std::pair<unsigned int const,data::ConfigCommonPolygon>,false,false>::operator->((const std::__detail::_Node_const_iterator<std::pair<unsigned int const,data::ConfigCommonPolygon>,false,false> *const)(v2 + 32));
    config_common_polygon = &v18->second;
    if ( *(char *)(((unsigned __int64)&v18->second.is_use_height_border >> 3) + 0x7FFF8000) < 0 )
      __asan_report_load1(&v18->second.is_use_height_border);
    if ( !config_common_polygon->is_use_height_border )
      goto LABEL_35;
    if ( *(_BYTE *)(((unsigned __int64)&pos->y >> 3) + 0x7FFF8000) != 0
      && (char)((((_BYTE)pos + 4) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&pos->y >> 3) + 0x7FFF8000) )
    {
      __asan_report_load4(&pos->y);
    }
    y = pos->y;
    if ( *(_BYTE *)(((unsigned __int64)&polygon_grid_config->min_height >> 3) + 0x7FFF8000) != 0
      && (char)((((_BYTE)polygon_grid_config + 4) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&polygon_grid_config->min_height >> 3)
                                                                        + 0x7FFF8000) )
    {
      __asan_report_load4(&polygon_grid_config->min_height);
    }
    if ( polygon_grid_config->min_height <= y )
    {
      v20 = pos->y;
      if ( *(_BYTE *)(((unsigned __int64)&polygon_grid_config->max_height >> 3) + 0x7FFF8000) != 0
        && *(_BYTE *)(((unsigned __int64)&polygon_grid_config->max_height >> 3) + 0x7FFF8000) <= 3 )
      {
        __asan_report_load4(&polygon_grid_config->max_height);
      }
      if ( v20 <= polygon_grid_config->max_height )
      {
LABEL_35:
        if ( std::operator==<InteriorCheckablePolygon>(0LL, &polygon_grid_config->polygon_ptr) )
          break;
        v21 = std::__shared_ptr_access<InteriorCheckablePolygon,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<InteriorCheckablePolygon,(__gnu_cxx::_Lock_policy)2,false,false> *const)&polygon_grid_config->polygon_ptr);
        Vector2::Vector2((Vector2 *const)&__y, (const data::Point2D *)(v2 + 96));
        if ( InteriorCheckablePolygon::isPointInsidePolygon(v21, (const Vector2 *)&__y) )
          break;
      }
    }
LABEL_39:
    __gnu_cxx::__normal_iterator<PolygonGridConfig const*,std::vector<PolygonGridConfig>>::operator++(&__for_begin);
  }
  if ( *(_BYTE *)(((unsigned __int64)polygon_grid_config >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)polygon_grid_config >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4(polygon_grid_config);
  }
  polygon_id = polygon_grid_config->polygon_id;
LABEL_41:
  std::shared_ptr<Mesh<SceneGridConfig,MeshAllocator<SceneGridConfig>>>::~shared_ptr((std::shared_ptr<Mesh<SceneGridConfig,MeshAllocator<SceneGridConfig> > > *const)(v2 + 128));
LABEL_42:
  result = polygon_id;
  if ( v35 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8010) = 0;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8010) = -168430091;
  }
  return result;
};

// Line 5129: range 00000000159A11B4-00000000159A12B8
std::vector<std::pair<std::shared_ptr<LuaScript>,ScriptContext>> *__cdecl Scene::getLuaCallScriptAndCtxVec(
        std::vector<std::pair<std::shared_ptr<LuaScript>,ScriptContext>> *retstr,
        Scene *const this,
        const data::ServerLuaCall *config,
        CreaturePtr *p_src_ptr,
        ActionParam *param)
{
  data::UInt32List *p_call_param_list; // r10
  const data::LuaCallType *p_lua_call_type; // rdi
  std::shared_ptr<Creature> v11; // [rsp+30h] [rbp-20h] BYREF

  std::shared_ptr<Creature>::shared_ptr(&v11, p_src_ptr);
  p_call_param_list = &config->call_param_list;
  p_lua_call_type = &config->lua_call_type;
  if ( *(char *)(((unsigned __int64)retstr >> 3) + 0x7FFF8000) < 0
    || *(_BYTE *)((((unsigned __int64)&retstr->_M_impl._M_end_of_storage + 7) >> 3) + 0x7FFF8000) != 0
    && (((unsigned __int8)retstr + 23) & 7) >= *(_BYTE *)((((unsigned __int64)&retstr->_M_impl._M_end_of_storage + 7) >> 3)
                                                        + 0x7FFF8000) )
  {
    p_lua_call_type = (const data::LuaCallType *)retstr;
    __asan_report_store_n(retstr, 24LL);
  }
  Scene::getLuaCallScriptAndCtxVec(retstr, this, p_lua_call_type, p_call_param_list, &v11, param);
  std::shared_ptr<Creature>::~shared_ptr(&v11);
  return retstr;
};

// Line 5134: range 00000000159A12BA-00000000159A13BE
std::vector<std::pair<std::shared_ptr<LuaScript>,ScriptContext>> *__cdecl Scene::getLuaCallScriptAndCtxVec(
        std::vector<std::pair<std::shared_ptr<LuaScript>,ScriptContext>> *retstr,
        Scene *const this,
        const data::ServerLuaTriggerEvent *config,
        CreaturePtr *p_src_ptr,
        ActionParam *param)
{
  data::UInt32List *p_call_param_list; // r10
  const data::LuaCallType *p_lua_call_type; // rdi
  std::shared_ptr<Creature> v11; // [rsp+30h] [rbp-20h] BYREF

  std::shared_ptr<Creature>::shared_ptr(&v11, p_src_ptr);
  p_call_param_list = &config->call_param_list;
  p_lua_call_type = &config->lua_call_type;
  if ( *(char *)(((unsigned __int64)retstr >> 3) + 0x7FFF8000) < 0
    || *(_BYTE *)((((unsigned __int64)&retstr->_M_impl._M_end_of_storage + 7) >> 3) + 0x7FFF8000) != 0
    && (((unsigned __int8)retstr + 23) & 7) >= *(_BYTE *)((((unsigned __int64)&retstr->_M_impl._M_end_of_storage + 7) >> 3)
                                                        + 0x7FFF8000) )
  {
    p_lua_call_type = (const data::LuaCallType *)retstr;
    __asan_report_store_n(retstr, 24LL);
  }
  Scene::getLuaCallScriptAndCtxVec(retstr, this, p_lua_call_type, p_call_param_list, &v11, param);
  std::shared_ptr<Creature>::~shared_ptr(&v11);
  return retstr;
};

// Line 5140: range 00000000159A147E-00000000159A33CB
std::vector<std::pair<std::shared_ptr<LuaScript>,ScriptContext>> *__cdecl Scene::getLuaCallScriptAndCtxVec(
        std::vector<std::pair<std::shared_ptr<LuaScript>,ScriptContext>> *retstr,
        Scene *const this,
        const data::LuaCallType *lua_call_type,
        const data::UInt32List *call_param_list,
        CreaturePtr *p_src_ptr,
        ActionParam *param)
{
  unsigned __int64 v6; // r13
  __int64 v7; // rax
  _DWORD *v8; // r12
  uint32_t Uid; // eax
  std::__shared_ptr_access<Player,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v10; // rax
  ScriptContext *v11; // r14
  uint32_t v12; // eax
  std::__shared_ptr_access<Player,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v13; // rax
  ScriptContext *v14; // r14
  unsigned int *v15; // rax
  unsigned int *v16; // rdx
  uint32_t v17; // eax
  std::__shared_ptr_access<Player,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v18; // rax
  ScriptContext *v19; // r14
  Player *v20; // rax
  PlayerScenePlayComp *ScenePlayComp; // rax
  unsigned int *v22; // rax
  unsigned int *v23; // rdx
  uint32_t v24; // eax
  std::__shared_ptr_access<Player,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v25; // rax
  ScriptContext *v26; // r14
  Player *v27; // rax
  PlayerSceneComp *SceneComp; // r14
  const std::shared_ptr<Group> *v29; // rax
  uint32_t v30; // eax
  std::__shared_ptr_access<Player,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v31; // rax
  ScriptContext *v32; // r14
  SceneGalleryComp *GalleryComp; // rax
  unsigned int *v34; // rax
  unsigned int *v35; // rdx
  int v36; // r14d
  uint32_t v37; // eax
  std::__shared_ptr_access<Player,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v38; // rax
  ScriptContext *v39; // r14
  int v40; // r14d
  std::__shared_ptr_access<DungeonScene,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v41; // rax
  std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v42; // rax
  bool v43; // r14
  std::unordered_map<unsigned int,unsigned int> *p_dungeon_boss_group_map; // r14
  std::__shared_ptr_access<DungeonScene,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v45; // rax
  uint32_t *v46; // rax
  uint32_t *v47; // rdx
  uint32_t v48; // eax
  std::__shared_ptr_access<Player,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v49; // rax
  ScriptContext *v50; // r14
  unsigned __int64 v52; // rax
  unsigned __int64 v53; // rdx
  unsigned __int64 v54; // rax
  unsigned __int64 v55; // rdx
  Player *v56; // rax
  PlayerAbilityGroupComp *AbilityGroupComp; // r14
  std::__shared_ptr_access<ActorAbility,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v58; // rax
  int32_t AbilityNameHash; // eax
  unsigned __int64 v60; // rax
  unsigned __int64 v61; // rdx
  unsigned __int64 v62; // rax
  unsigned __int64 v63; // rdx
  Player *v64; // rax
  PlayerAbilityGroupComp *v65; // r14
  std::__shared_ptr_access<ActorAbility,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v66; // rax
  int32_t v67; // eax
  uint32_t v68; // eax
  std::__shared_ptr_access<Player,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v69; // rax
  ScriptContext *v70; // r14
  unsigned int value; // [rsp+38h] [rbp-308h] BYREF
  uint32_t group_id_3; // [rsp+3Ch] [rbp-304h]
  uint32_t group_id_2; // [rsp+40h] [rbp-300h]
  unsigned int group_id_1; // [rsp+44h] [rbp-2FCh]
  unsigned int group_id_0; // [rsp+48h] [rbp-2F8h]
  unsigned int group_id; // [rsp+4Ch] [rbp-2F4h]
  std::vector<unsigned int>::const_iterator __for_begin; // [rsp+50h] [rbp-2F0h] BYREF
  std::vector<unsigned int>::const_iterator __for_end; // [rsp+58h] [rbp-2E8h] BYREF
  std::set<unsigned int> *__for_range_2; // [rsp+60h] [rbp-2E0h]
  std::set<std::shared_ptr<Group>,std::owner_less<std::shared_ptr<Group> >,std::allocator<std::shared_ptr<Group> > > *__for_range_1; // [rsp+68h] [rbp-2D8h]
  std::set<unsigned int> *__for_range_0; // [rsp+70h] [rbp-2D0h]
  const std::vector<unsigned int> *__for_range; // [rsp+78h] [rbp-2C8h]
  common::milog::MiLogStream v88; // [rsp+80h] [rbp-2C0h] BYREF
  std::pair<std::shared_ptr<LuaScript>,ScriptContext> __args_0; // [rsp+A0h] [rbp-2A0h] BYREF
  char v90[496]; // [rsp+150h] [rbp-1F0h] BYREF

  v6 = (unsigned __int64)v90;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v7 = __asan_stack_malloc_3(448LL);
    if ( v7 )
      v6 = v7;
  }
  *(_QWORD *)v6 = 1102416563LL;
  *(_QWORD *)(v6 + 8) = "5 48 16 22 dungeon_scene_ptr:5287 80 16 14 group_ptr:5344 112 16 14 owner_ptr:5318 144 48 17 gro"
                        "up_id_set:5263 224 160 8 ctx:5347";
  *(_QWORD *)(v6 + 16) = Scene::getLuaCallScriptAndCtxVec;
  v8 = (_DWORD *)(v6 >> 3);
  v8[536862720] = -235802127;
  v8[536862721] = 61937;
  v8[536862722] = 62194;
  v8[536862723] = 62194;
  v8[536862724] = 62194;
  v8[536862726] = -218959118;
  v8[536862732] = -202116109;
  v8[536862733] = -202116109;
  std::vector<std::pair<std::shared_ptr<LuaScript>,ScriptContext>>::vector(retstr);
  if ( std::operator!=<Creature>(p_src_ptr, 0LL) )
  {
    if ( *(_BYTE *)(((unsigned __int64)lua_call_type >> 3) + 0x7FFF8000) != 0
      && (char)(((unsigned __int8)lua_call_type & 7) + 3) >= *(_BYTE *)(((unsigned __int64)lua_call_type >> 3)
                                                                      + 0x7FFF8000) )
    {
      __asan_report_load4(lua_call_type);
    }
    if ( *lua_call_type == OwnerGadegt || *lua_call_type == OwnerFromGroup )
    {
      std::__shared_ptr_access<Creature,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Creature,(__gnu_cxx::_Lock_policy)2,false,false> *const)p_src_ptr);
      Creature::getOwner((const Creature *const)(v6 + 80));
      std::shared_ptr<Creature>::operator=(p_src_ptr, (std::shared_ptr<Creature> *)(v6 + 80));
      std::shared_ptr<Creature>::~shared_ptr((std::shared_ptr<Creature> *const)(v6 + 80));
    }
  }
  if ( *(_BYTE *)(((unsigned __int64)lua_call_type >> 3) + 0x7FFF8000) != 0
    && (char)(((unsigned __int8)lua_call_type & 7) + 3) >= *(_BYTE *)(((unsigned __int64)lua_call_type >> 3) + 0x7FFF8000) )
  {
    __asan_report_load4(lua_call_type);
  }
  switch ( *lua_call_type )
  {
    case Gadget_0:
    case OwnerGadegt:
      std::dynamic_pointer_cast<Gadget,Creature>((const std::shared_ptr<Creature> *)(v6 + 80));
      if ( std::operator!=<Gadget>((const std::shared_ptr<Gadget> *)(v6 + 80), 0LL) )
      {
        ScriptContext::ScriptContext((ScriptContext *const)(v6 + 224));
        toThisPtr<Scene>((Scene *)(v6 + 112));
        ScriptContext::setSceneAndOwnerUid((ScriptContext *const)(v6 + 224), (ScenePtr *)(v6 + 112));
        std::shared_ptr<Scene>::~shared_ptr((std::shared_ptr<Scene> *const)(v6 + 112));
        std::weak_ptr<Gadget>::operator=<Gadget>(
          (std::weak_ptr<Gadget> *const)(v6 + 272),
          (const std::shared_ptr<Gadget> *)(v6 + 80));
        if ( std::operator!=<Creature>(p_src_ptr, 0LL) )
        {
          std::__shared_ptr_access<Creature,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Creature,(__gnu_cxx::_Lock_policy)2,false,false> *const)p_src_ptr);
          Entity::getGroup((const Entity *const)(v6 + 112));
          std::weak_ptr<Group>::operator=<Group>(
            (std::weak_ptr<Group> *const)(v6 + 240),
            (const std::shared_ptr<Group> *)(v6 + 112));
          std::shared_ptr<Group>::~shared_ptr((std::shared_ptr<Group> *const)(v6 + 112));
        }
        if ( std::operator==<Player>(&param->from_player_ptr, 0LL) )
        {
          Uid = 0;
        }
        else
        {
          v10 = std::__shared_ptr_access<Player,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Player,(__gnu_cxx::_Lock_policy)2,false,false> *const)&param->from_player_ptr);
          Uid = Player::getUid(v10);
        }
        *(_DWORD *)(v6 + 312) = Uid;
        v11 = std::move<ScriptContext &>((ScriptContext *)(v6 + 224));
        std::__shared_ptr_access<Gadget,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Gadget,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v6 + 80));
        Gadget::getScript((const Gadget *const)(v6 + 112));
        std::make_pair<std::shared_ptr<LuaScript>,ScriptContext>(
          &__args_0,
          (std::shared_ptr<LuaScript> *)(v6 + 112),
          v11);
        std::vector<std::pair<std::shared_ptr<LuaScript>,ScriptContext>>::emplace_back<std::pair<std::shared_ptr<LuaScript>,ScriptContext>>(
          retstr,
          &__args_0,
          &__args_0);
        std::pair<std::shared_ptr<LuaScript>,ScriptContext>::~pair(&__args_0);
        std::shared_ptr<LuaScript>::~shared_ptr((std::shared_ptr<LuaScript> *const)(v6 + 112));
        ScriptContext::~ScriptContext((ScriptContext *const)(v6 + 224));
      }
      std::shared_ptr<Gadget>::~shared_ptr((std::shared_ptr<Gadget> *const)(v6 + 80));
      goto LABEL_131;
    case FromGroup:
    case OwnerFromGroup:
      if ( !std::operator==<Creature>(p_src_ptr, 0LL) )
      {
        std::__shared_ptr_access<Creature,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Creature,(__gnu_cxx::_Lock_policy)2,false,false> *const)p_src_ptr);
        Entity::getGroup((const Entity *const)(v6 + 80));
        if ( std::operator!=<Group>((const std::shared_ptr<Group> *)(v6 + 80), 0LL) )
        {
          ScriptContext::ScriptContext((ScriptContext *const)(v6 + 224));
          toThisPtr<Scene>((Scene *)(v6 + 112));
          ScriptContext::setSceneAndOwnerUid((ScriptContext *const)(v6 + 224), (ScenePtr *)(v6 + 112));
          std::shared_ptr<Scene>::~shared_ptr((std::shared_ptr<Scene> *const)(v6 + 112));
          std::weak_ptr<Group>::operator=<Group>(
            (std::weak_ptr<Group> *const)(v6 + 240),
            (const std::shared_ptr<Group> *)(v6 + 80));
          if ( std::operator==<Player>(&param->from_player_ptr, 0LL) )
          {
            v12 = 0;
          }
          else
          {
            v13 = std::__shared_ptr_access<Player,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Player,(__gnu_cxx::_Lock_policy)2,false,false> *const)&param->from_player_ptr);
            v12 = Player::getUid(v13);
          }
          *(_DWORD *)(v6 + 312) = v12;
          v14 = std::move<ScriptContext &>((ScriptContext *)(v6 + 224));
          std::__shared_ptr_access<Group,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Group,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v6 + 80));
          Group::getScript((const Group *const)(v6 + 112));
          std::make_pair<std::shared_ptr<LuaScript>,ScriptContext>(
            &__args_0,
            (std::shared_ptr<LuaScript> *)(v6 + 112),
            v14);
          std::vector<std::pair<std::shared_ptr<LuaScript>,ScriptContext>>::emplace_back<std::pair<std::shared_ptr<LuaScript>,ScriptContext>>(
            retstr,
            &__args_0,
            &__args_0);
          std::pair<std::shared_ptr<LuaScript>,ScriptContext>::~pair(&__args_0);
          std::shared_ptr<LuaScript>::~shared_ptr((std::shared_ptr<LuaScript> *const)(v6 + 112));
          ScriptContext::~ScriptContext((ScriptContext *const)(v6 + 224));
        }
        goto LABEL_130;
      }
      common::milog::MiLogStream::create(
        &v88,
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/scene/scene.cpp",
        "getLuaCallScriptAndCtxVec",
        5183);
      common::milog::MiLogStream::operator<<<char [19],(char *[19])0>(&v88, (const char (*)[19])"src_ptr is nullptr");
      common::milog::MiLogStream::~MiLogStream(&v88);
      goto LABEL_131;
    case SpecificGroup:
      __for_range = call_param_list;
      __for_begin._M_current = std::vector<unsigned int>::begin(call_param_list)._M_current;
      __for_end._M_current = std::vector<unsigned int>::end(call_param_list)._M_current;
      while ( __gnu_cxx::operator!=<unsigned int const*,std::vector<unsigned int>>(&__for_begin, &__for_end) )
      {
        v15 = (unsigned int *)__gnu_cxx::__normal_iterator<unsigned int const*,std::vector<unsigned int>>::operator*(&__for_begin);
        v16 = v15;
        if ( *(_BYTE *)(((unsigned __int64)v15 >> 3) + 0x7FFF8000) != 0
          && (char)(((unsigned __int8)v15 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)v15 >> 3) + 0x7FFF8000) )
        {
          __asan_report_load4(v15);
        }
        group_id = *v16;
        Scene::findGroup((Scene *const)(v6 + 80), (uint32_t)this);
        if ( std::operator!=<Group>((const std::shared_ptr<Group> *)(v6 + 80), 0LL) )
        {
          ScriptContext::ScriptContext((ScriptContext *const)(v6 + 224));
          toThisPtr<Scene>((Scene *)(v6 + 112));
          ScriptContext::setSceneAndOwnerUid((ScriptContext *const)(v6 + 224), (ScenePtr *)(v6 + 112));
          std::shared_ptr<Scene>::~shared_ptr((std::shared_ptr<Scene> *const)(v6 + 112));
          std::weak_ptr<Group>::operator=<Group>(
            (std::weak_ptr<Group> *const)(v6 + 240),
            (const std::shared_ptr<Group> *)(v6 + 80));
          if ( std::operator==<Player>(&param->from_player_ptr, 0LL) )
          {
            v17 = 0;
          }
          else
          {
            v18 = std::__shared_ptr_access<Player,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Player,(__gnu_cxx::_Lock_policy)2,false,false> *const)&param->from_player_ptr);
            v17 = Player::getUid(v18);
          }
          *(_DWORD *)(v6 + 312) = v17;
          v19 = std::move<ScriptContext &>((ScriptContext *)(v6 + 224));
          std::__shared_ptr_access<Group,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Group,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v6 + 80));
          Group::getScript((const Group *const)(v6 + 112));
          std::make_pair<std::shared_ptr<LuaScript>,ScriptContext>(
            &__args_0,
            (std::shared_ptr<LuaScript> *)(v6 + 112),
            v19);
          std::vector<std::pair<std::shared_ptr<LuaScript>,ScriptContext>>::emplace_back<std::pair<std::shared_ptr<LuaScript>,ScriptContext>>(
            retstr,
            &__args_0,
            &__args_0);
          std::pair<std::shared_ptr<LuaScript>,ScriptContext>::~pair(&__args_0);
          std::shared_ptr<LuaScript>::~shared_ptr((std::shared_ptr<LuaScript> *const)(v6 + 112));
          ScriptContext::~ScriptContext((ScriptContext *const)(v6 + 224));
        }
        std::shared_ptr<Group>::~shared_ptr((std::shared_ptr<Group> *const)(v6 + 80));
        __gnu_cxx::__normal_iterator<unsigned int const*,std::vector<unsigned int>>::operator++(&__for_begin);
      }
      goto LABEL_131;
    case CurScenePlay:
      Scene::getOwnPlayer((const Scene *const)(v6 + 48));
      if ( std::operator!=<Player>(0LL, (const std::shared_ptr<Player> *)(v6 + 48)) )
      {
        std::set<unsigned int>::set((std::set<unsigned int> *const)(v6 + 144));
        v20 = std::__shared_ptr_access<Player,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Player,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v6 + 48));
        ScenePlayComp = Player::getScenePlayComp(v20);
        PlayerScenePlayComp::fillServerLuaCallGroupSet(ScenePlayComp, (std::set<unsigned int> *)(v6 + 144));
        __for_range_0 = (std::set<unsigned int> *)(v6 + 144);
        __for_begin._M_current = (const unsigned int *)std::set<unsigned int>::begin((const std::set<unsigned int> *const)(v6 + 144))._M_node;
        __for_end._M_current = (const unsigned int *)std::set<unsigned int>::end((const std::set<unsigned int> *const)(v6 + 144))._M_node;
        while ( std::operator!=(
                  (const std::_Rb_tree_const_iterator<unsigned int>::_Self *)&__for_begin,
                  (const std::_Rb_tree_const_iterator<unsigned int>::_Self *)&__for_end) )
        {
          v22 = (unsigned int *)std::_Rb_tree_const_iterator<unsigned int>::operator*((const std::_Rb_tree_const_iterator<unsigned int> *const)&__for_begin);
          v23 = v22;
          if ( *(_BYTE *)(((unsigned __int64)v22 >> 3) + 0x7FFF8000) != 0
            && (char)(((unsigned __int8)v22 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)v22 >> 3) + 0x7FFF8000) )
          {
            __asan_report_load4(v22);
          }
          group_id_0 = *v23;
          Scene::findGroup((Scene *const)(v6 + 80), (uint32_t)this);
          if ( std::operator!=<Group>((const std::shared_ptr<Group> *)(v6 + 80), 0LL) )
          {
            ScriptContext::ScriptContext((ScriptContext *const)(v6 + 224));
            toThisPtr<Scene>((Scene *)(v6 + 112));
            ScriptContext::setSceneAndOwnerUid((ScriptContext *const)(v6 + 224), (ScenePtr *)(v6 + 112));
            std::shared_ptr<Scene>::~shared_ptr((std::shared_ptr<Scene> *const)(v6 + 112));
            std::weak_ptr<Group>::operator=<Group>(
              (std::weak_ptr<Group> *const)(v6 + 240),
              (const std::shared_ptr<Group> *)(v6 + 80));
            if ( std::operator==<Player>(&param->from_player_ptr, 0LL) )
            {
              v24 = 0;
            }
            else
            {
              v25 = std::__shared_ptr_access<Player,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Player,(__gnu_cxx::_Lock_policy)2,false,false> *const)&param->from_player_ptr);
              v24 = Player::getUid(v25);
            }
            *(_DWORD *)(v6 + 312) = v24;
            v26 = std::move<ScriptContext &>((ScriptContext *)(v6 + 224));
            std::__shared_ptr_access<Group,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Group,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v6 + 80));
            Group::getScript((const Group *const)(v6 + 112));
            std::make_pair<std::shared_ptr<LuaScript>,ScriptContext>(
              &__args_0,
              (std::shared_ptr<LuaScript> *)(v6 + 112),
              v26);
            std::vector<std::pair<std::shared_ptr<LuaScript>,ScriptContext>>::emplace_back<std::pair<std::shared_ptr<LuaScript>,ScriptContext>>(
              retstr,
              &__args_0,
              &__args_0);
            std::pair<std::shared_ptr<LuaScript>,ScriptContext>::~pair(&__args_0);
            std::shared_ptr<LuaScript>::~shared_ptr((std::shared_ptr<LuaScript> *const)(v6 + 112));
            ScriptContext::~ScriptContext((ScriptContext *const)(v6 + 224));
          }
          std::shared_ptr<Group>::~shared_ptr((std::shared_ptr<Group> *const)(v6 + 80));
          std::_Rb_tree_const_iterator<unsigned int>::operator++((std::_Rb_tree_const_iterator<unsigned int> *const)&__for_begin);
        }
        std::set<unsigned int>::~set((std::set<unsigned int> *const)(v6 + 144));
      }
      goto LABEL_51;
    case CurChallengeGroup:
      Scene::getOwnPlayer((const Scene *const)(v6 + 48));
      if ( std::operator!=<Player>(0LL, (const std::shared_ptr<Player> *)(v6 + 48)) )
      {
        std::set<std::shared_ptr<Group>,std::owner_less<std::shared_ptr<Group>>,std::allocator<std::shared_ptr<Group>>>::set((std::set<std::shared_ptr<Group>,std::owner_less<std::shared_ptr<Group> >,std::allocator<std::shared_ptr<Group> > > *const)(v6 + 144));
        v27 = std::__shared_ptr_access<Player,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Player,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v6 + 48));
        SceneComp = Player::getSceneComp(v27);
        std::function<ForeachPolicy ()(Challenge &)>::function<Scene::getLuaCallScriptAndCtxVec(data::LuaCallType const&,std::vector<unsigned int> const&,std::shared_ptr<Creature>,ActionParam &)::{lambda(Challenge &)#1},void,void>(
          (std::function<ForeachPolicy(Challenge&)> *const)&v88,
          (Scene::getLuaCallScriptAndCtxVec::<lambda(Challenge&)>)(v6 + 144));
        PlayerSceneComp::foreachChallenge(SceneComp, (std::function<ForeachPolicy(Challenge&)> *)&v88);
        std::function<ForeachPolicy ()(Challenge &)>::~function((std::function<ForeachPolicy(Challenge&)> *const)&v88);
        __for_range_1 = (std::set<std::shared_ptr<Group>,std::owner_less<std::shared_ptr<Group> >,std::allocator<std::shared_ptr<Group> > > *)(v6 + 144);
        __for_begin._M_current = (const unsigned int *)std::set<std::shared_ptr<Group>,std::owner_less<std::shared_ptr<Group>>,std::allocator<std::shared_ptr<Group>>>::begin((const std::set<std::shared_ptr<Group>,std::owner_less<std::shared_ptr<Group> >,std::allocator<std::shared_ptr<Group> > > *const)(v6 + 144))._M_node;
        __for_end._M_current = (const unsigned int *)std::set<std::shared_ptr<Group>,std::owner_less<std::shared_ptr<Group>>,std::allocator<std::shared_ptr<Group>>>::end((const std::set<std::shared_ptr<Group>,std::owner_less<std::shared_ptr<Group> >,std::allocator<std::shared_ptr<Group> > > *const)(v6 + 144))._M_node;
        while ( std::operator!=(
                  (const std::_Rb_tree_const_iterator<std::shared_ptr<Group> >::_Self *)&__for_begin,
                  (const std::_Rb_tree_const_iterator<std::shared_ptr<Group> >::_Self *)&__for_end) )
        {
          v29 = std::_Rb_tree_const_iterator<std::shared_ptr<Group>>::operator*((const std::_Rb_tree_const_iterator<std::shared_ptr<Group> > *const)&__for_begin);
          std::shared_ptr<Group>::shared_ptr((std::shared_ptr<Group> *const)(v6 + 80), v29);
          if ( std::operator!=<Group>((const std::shared_ptr<Group> *)(v6 + 80), 0LL) )
          {
            ScriptContext::ScriptContext((ScriptContext *const)(v6 + 224));
            toThisPtr<Scene>((Scene *)(v6 + 112));
            ScriptContext::setSceneAndOwnerUid((ScriptContext *const)(v6 + 224), (ScenePtr *)(v6 + 112));
            std::shared_ptr<Scene>::~shared_ptr((std::shared_ptr<Scene> *const)(v6 + 112));
            std::weak_ptr<Group>::operator=<Group>(
              (std::weak_ptr<Group> *const)(v6 + 240),
              (const std::shared_ptr<Group> *)(v6 + 80));
            if ( std::operator==<Player>(&param->from_player_ptr, 0LL) )
            {
              v30 = 0;
            }
            else
            {
              v31 = std::__shared_ptr_access<Player,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Player,(__gnu_cxx::_Lock_policy)2,false,false> *const)&param->from_player_ptr);
              v30 = Player::getUid(v31);
            }
            *(_DWORD *)(v6 + 312) = v30;
            v32 = std::move<ScriptContext &>((ScriptContext *)(v6 + 224));
            std::__shared_ptr_access<Group,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Group,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v6 + 80));
            Group::getScript((const Group *const)(v6 + 112));
            std::make_pair<std::shared_ptr<LuaScript>,ScriptContext>(
              &__args_0,
              (std::shared_ptr<LuaScript> *)(v6 + 112),
              v32);
            std::vector<std::pair<std::shared_ptr<LuaScript>,ScriptContext>>::emplace_back<std::pair<std::shared_ptr<LuaScript>,ScriptContext>>(
              retstr,
              &__args_0,
              &__args_0);
            std::pair<std::shared_ptr<LuaScript>,ScriptContext>::~pair(&__args_0);
            std::shared_ptr<LuaScript>::~shared_ptr((std::shared_ptr<LuaScript> *const)(v6 + 112));
            ScriptContext::~ScriptContext((ScriptContext *const)(v6 + 224));
          }
          std::shared_ptr<Group>::~shared_ptr((std::shared_ptr<Group> *const)(v6 + 80));
          std::_Rb_tree_const_iterator<std::shared_ptr<Group>>::operator++((std::_Rb_tree_const_iterator<std::shared_ptr<Group> > *const)&__for_begin);
        }
        std::set<std::shared_ptr<Group>,std::owner_less<std::shared_ptr<Group>>,std::allocator<std::shared_ptr<Group>>>::~set((std::set<std::shared_ptr<Group>,std::owner_less<std::shared_ptr<Group> >,std::allocator<std::shared_ptr<Group> > > *const)(v6 + 144));
      }
LABEL_51:
      std::shared_ptr<Player>::~shared_ptr((std::shared_ptr<Player> *const)(v6 + 48));
      goto LABEL_131;
    case CurGalleryControlGroup:
      std::set<unsigned int>::set((std::set<unsigned int> *const)(v6 + 144));
      GalleryComp = Scene::getGalleryComp(this);
      SceneGalleryComp::fillControlGroupSet(GalleryComp, (std::set<unsigned int> *)(v6 + 144));
      __for_range_2 = (std::set<unsigned int> *)(v6 + 144);
      __for_begin._M_current = (const unsigned int *)std::set<unsigned int>::begin((const std::set<unsigned int> *const)(v6 + 144))._M_node;
      __for_end._M_current = (const unsigned int *)std::set<unsigned int>::end((const std::set<unsigned int> *const)(v6 + 144))._M_node;
      while ( std::operator!=(
                (const std::_Rb_tree_const_iterator<unsigned int>::_Self *)&__for_begin,
                (const std::_Rb_tree_const_iterator<unsigned int>::_Self *)&__for_end) )
      {
        v34 = (unsigned int *)std::_Rb_tree_const_iterator<unsigned int>::operator*((const std::_Rb_tree_const_iterator<unsigned int> *const)&__for_begin);
        v35 = v34;
        if ( *(_BYTE *)(((unsigned __int64)v34 >> 3) + 0x7FFF8000) != 0
          && (char)(((unsigned __int8)v34 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)v34 >> 3) + 0x7FFF8000) )
        {
          __asan_report_load4(v34);
        }
        group_id_1 = *v35;
        Scene::findGroup((Scene *const)(v6 + 48), (uint32_t)this);
        if ( !std::operator!=<Group>((const std::shared_ptr<Group> *)(v6 + 48), 0LL) )
          goto LABEL_76;
        ScriptContext::ScriptContext((ScriptContext *const)(v6 + 224));
        toThisPtr<Scene>((Scene *)(v6 + 112));
        ScriptContext::setSceneAndOwnerUid((ScriptContext *const)(v6 + 224), (ScenePtr *)(v6 + 112));
        std::shared_ptr<Scene>::~shared_ptr((std::shared_ptr<Scene> *const)(v6 + 112));
        std::weak_ptr<Group>::operator=<Group>(
          (std::weak_ptr<Group> *const)(v6 + 240),
          (const std::shared_ptr<Group> *)(v6 + 48));
        if ( std::operator==<Creature>(p_src_ptr, 0LL) )
        {
          common::milog::MiLogStream::create(
            &v88,
            &common::milog::MiLogDefault::default_log_obj_,
            3u,
            "./src/scene/scene.cpp",
            "getLuaCallScriptAndCtxVec",
            5275);
          common::milog::MiLogStream::operator<<<char [26],(char *[26])0>(
            &v88,
            (const char (*)[26])"[GALLERY] src_ptr is null");
          common::milog::MiLogStream::~MiLogStream(&v88);
          v36 = 0;
        }
        else
        {
          std::__shared_ptr_access<Creature,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Creature,(__gnu_cxx::_Lock_policy)2,false,false> *const)p_src_ptr);
          Creature::getAncestryOwnerPlayer((Creature *const)(v6 + 80));
          if ( std::operator==<Player>((const std::shared_ptr<Player> *)(v6 + 80), 0LL) )
          {
            v37 = 0;
          }
          else
          {
            v38 = std::__shared_ptr_access<Player,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Player,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v6 + 80));
            v37 = Player::getUid(v38);
          }
          *(_DWORD *)(v6 + 312) = v37;
          v39 = std::move<ScriptContext &>((ScriptContext *)(v6 + 224));
          std::__shared_ptr_access<Group,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Group,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v6 + 48));
          Group::getScript((const Group *const)(v6 + 112));
          std::make_pair<std::shared_ptr<LuaScript>,ScriptContext>(
            &__args_0,
            (std::shared_ptr<LuaScript> *)(v6 + 112),
            v39);
          std::vector<std::pair<std::shared_ptr<LuaScript>,ScriptContext>>::emplace_back<std::pair<std::shared_ptr<LuaScript>,ScriptContext>>(
            retstr,
            &__args_0,
            &__args_0);
          std::pair<std::shared_ptr<LuaScript>,ScriptContext>::~pair(&__args_0);
          std::shared_ptr<LuaScript>::~shared_ptr((std::shared_ptr<LuaScript> *const)(v6 + 112));
          std::shared_ptr<Player>::~shared_ptr((std::shared_ptr<Player> *const)(v6 + 80));
          v36 = 1;
        }
        ScriptContext::~ScriptContext((ScriptContext *const)(v6 + 224));
        if ( v36 == 1 )
LABEL_76:
          v40 = 1;
        else
          v40 = 0;
        std::shared_ptr<Group>::~shared_ptr((std::shared_ptr<Group> *const)(v6 + 48));
        if ( v40 != 1 )
          break;
        std::_Rb_tree_const_iterator<unsigned int>::operator++((std::_Rb_tree_const_iterator<unsigned int> *const)&__for_begin);
      }
      std::set<unsigned int>::~set((std::set<unsigned int> *const)(v6 + 144));
      goto LABEL_131;
    case CurRogueBossGroup:
      std::enable_shared_from_this<Scene>::shared_from_this((std::enable_shared_from_this<Scene> *const)(v6 + 112));
      std::dynamic_pointer_cast<DungeonScene,Scene>((const std::shared_ptr<Scene> *)(v6 + 48));
      std::shared_ptr<Scene>::~shared_ptr((std::shared_ptr<Scene> *const)(v6 + 112));
      if ( std::operator!=<DungeonScene>((const std::shared_ptr<DungeonScene> *)(v6 + 48), 0LL) )
      {
        v41 = std::__shared_ptr_access<DungeonScene,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<DungeonScene,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v6 + 48));
        value = DungeonScene::getDungeonId(v41);
        ServiceBox::findService<GameserverService>();
        GameserverService::getConfig((GameserverService *const)(v6 + 112));
        v42 = std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v6 + 112));
        v43 = common::tools::MiscUtils::isContains<std::unordered_map<unsigned int,unsigned int> const,unsigned int>(
                &v42->design_config.txt_config_mgr.activity_rogue_config_mgr.dungeon_boss_group_map,
                &value);
        std::shared_ptr<Config>::~shared_ptr((std::shared_ptr<Config> *const)(v6 + 112));
        if ( v43 )
        {
          ServiceBox::findService<GameserverService>();
          GameserverService::getConfig((GameserverService *const)(v6 + 112));
          p_dungeon_boss_group_map = &std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v6 + 112))->design_config.txt_config_mgr.activity_rogue_config_mgr.dungeon_boss_group_map;
          v45 = std::__shared_ptr_access<DungeonScene,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<DungeonScene,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v6 + 48));
          value = DungeonScene::getDungeonId(v45);
          v46 = (uint32_t *)std::unordered_map<unsigned int,unsigned int>::at(p_dungeon_boss_group_map, &value);
          v47 = v46;
          if ( *(_BYTE *)(((unsigned __int64)v46 >> 3) + 0x7FFF8000) != 0
            && (char)(((unsigned __int8)v46 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)v46 >> 3) + 0x7FFF8000) )
          {
            __asan_report_load4(v46);
          }
          group_id_2 = *v47;
          std::shared_ptr<Config>::~shared_ptr((std::shared_ptr<Config> *const)(v6 + 112));
          Scene::findGroup((Scene *const)(v6 + 80), (uint32_t)this);
          if ( std::operator!=<Group>((const std::shared_ptr<Group> *)(v6 + 80), 0LL) )
          {
            ScriptContext::ScriptContext((ScriptContext *const)(v6 + 224));
            toThisPtr<Scene>((Scene *)(v6 + 112));
            ScriptContext::setSceneAndOwnerUid((ScriptContext *const)(v6 + 224), (ScenePtr *)(v6 + 112));
            std::shared_ptr<Scene>::~shared_ptr((std::shared_ptr<Scene> *const)(v6 + 112));
            std::weak_ptr<Group>::operator=<Group>(
              (std::weak_ptr<Group> *const)(v6 + 240),
              (const std::shared_ptr<Group> *)(v6 + 80));
            if ( std::operator==<Player>(&param->from_player_ptr, 0LL) )
            {
              v48 = 0;
            }
            else
            {
              v49 = std::__shared_ptr_access<Player,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Player,(__gnu_cxx::_Lock_policy)2,false,false> *const)&param->from_player_ptr);
              v48 = Player::getUid(v49);
            }
            *(_DWORD *)(v6 + 312) = v48;
            v50 = std::move<ScriptContext &>((ScriptContext *)(v6 + 224));
            std::__shared_ptr_access<Group,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Group,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v6 + 80));
            Group::getScript((const Group *const)(v6 + 112));
            std::make_pair<std::shared_ptr<LuaScript>,ScriptContext>(
              &__args_0,
              (std::shared_ptr<LuaScript> *)(v6 + 112),
              v50);
            std::vector<std::pair<std::shared_ptr<LuaScript>,ScriptContext>>::emplace_back<std::pair<std::shared_ptr<LuaScript>,ScriptContext>>(
              retstr,
              &__args_0,
              &__args_0);
            std::pair<std::shared_ptr<LuaScript>,ScriptContext>::~pair(&__args_0);
            std::shared_ptr<LuaScript>::~shared_ptr((std::shared_ptr<LuaScript> *const)(v6 + 112));
            ScriptContext::~ScriptContext((ScriptContext *const)(v6 + 224));
          }
          std::shared_ptr<Group>::~shared_ptr((std::shared_ptr<Group> *const)(v6 + 80));
        }
      }
      std::shared_ptr<DungeonScene>::~shared_ptr((std::shared_ptr<DungeonScene> *const)(v6 + 48));
      goto LABEL_131;
    case AbilityGroupSourceGroup:
      if ( std::operator==<Creature>(p_src_ptr, 0LL) || std::operator==<ActorAbility>(&param->ability_ptr, 0LL) )
        goto LABEL_131;
      group_id_3 = 0;
      v52 = (unsigned __int64)std::__shared_ptr_access<Creature,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Creature,(__gnu_cxx::_Lock_policy)2,false,false> *const)p_src_ptr);
      if ( *(_BYTE *)((v52 >> 3) + 0x7FFF8000) )
        v52 = __asan_report_load8();
      v53 = *(_QWORD *)v52 + 24LL;
      if ( *(_BYTE *)((v53 >> 3) + 0x7FFF8000) )
        v52 = __asan_report_load8();
      if ( (*(unsigned int (__fastcall **)(unsigned __int64))v53)(v52) == 9 )
      {
        std::dynamic_pointer_cast<AvatarTeamEntity,Creature>((const std::shared_ptr<Creature> *)(v6 + 80));
        if ( std::operator!=<AvatarTeamEntity>((const std::shared_ptr<AvatarTeamEntity> *)(v6 + 80), 0LL) )
        {
          v54 = (unsigned __int64)std::__shared_ptr_access<AvatarTeamEntity,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<AvatarTeamEntity,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v6 + 80));
          if ( *(_BYTE *)((v54 >> 3) + 0x7FFF8000) )
            v54 = __asan_report_load8();
          v55 = *(_QWORD *)v54 + 152LL;
          if ( *(_BYTE *)((v55 >> 3) + 0x7FFF8000) )
            v54 = __asan_report_load8();
          (*(void (__fastcall **)(unsigned __int64, unsigned __int64))v55)(v6 + 112, v54);
          if ( std::operator!=<Player>((const std::shared_ptr<Player> *)(v6 + 112), 0LL) )
          {
            v56 = std::__shared_ptr_access<Player,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Player,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v6 + 112));
            AbilityGroupComp = Player::getAbilityGroupComp(v56);
            v58 = std::__shared_ptr_access<ActorAbility,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<ActorAbility,(__gnu_cxx::_Lock_policy)2,false,false> *const)param);
            AbilityNameHash = ActorAbility::getAbilityNameHash(v58);
            group_id_3 = PlayerAbilityGroupComp::getTeamAbilitySourceGroupId(AbilityGroupComp, AbilityNameHash);
          }
          std::shared_ptr<Player>::~shared_ptr((std::shared_ptr<Player> *const)(v6 + 112));
        }
        std::shared_ptr<AvatarTeamEntity>::~shared_ptr((std::shared_ptr<AvatarTeamEntity> *const)(v6 + 80));
      }
      else
      {
        v60 = (unsigned __int64)std::__shared_ptr_access<Creature,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Creature,(__gnu_cxx::_Lock_policy)2,false,false> *const)p_src_ptr);
        if ( *(_BYTE *)((v60 >> 3) + 0x7FFF8000) )
          v60 = __asan_report_load8();
        v61 = *(_QWORD *)v60 + 24LL;
        if ( *(_BYTE *)((v61 >> 3) + 0x7FFF8000) )
          v60 = __asan_report_load8();
        if ( (*(unsigned int (__fastcall **)(unsigned __int64))v61)(v60) != 1 )
          goto LABEL_131;
        std::dynamic_pointer_cast<Avatar,Creature>((const std::shared_ptr<Creature> *)(v6 + 80));
        if ( std::operator!=<Avatar>((const std::shared_ptr<Avatar> *)(v6 + 80), 0LL) )
        {
          v62 = (unsigned __int64)std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v6 + 80));
          if ( *(_BYTE *)((v62 >> 3) + 0x7FFF8000) )
            v62 = __asan_report_load8();
          v63 = *(_QWORD *)v62 + 152LL;
          if ( *(_BYTE *)((v63 >> 3) + 0x7FFF8000) )
            v62 = __asan_report_load8();
          (*(void (__fastcall **)(unsigned __int64, unsigned __int64))v63)(v6 + 112, v62);
          if ( std::operator!=<Player>((const std::shared_ptr<Player> *)(v6 + 112), 0LL) )
          {
            v64 = std::__shared_ptr_access<Player,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Player,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v6 + 112));
            v65 = Player::getAbilityGroupComp(v64);
            v66 = std::__shared_ptr_access<ActorAbility,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<ActorAbility,(__gnu_cxx::_Lock_policy)2,false,false> *const)param);
            v67 = ActorAbility::getAbilityNameHash(v66);
            group_id_3 = PlayerAbilityGroupComp::getAvatarAbilitySourceGroupId(v65, v67);
          }
          std::shared_ptr<Player>::~shared_ptr((std::shared_ptr<Player> *const)(v6 + 112));
        }
        std::shared_ptr<Avatar>::~shared_ptr((std::shared_ptr<Avatar> *const)(v6 + 80));
      }
      if ( group_id_3 )
      {
        Scene::findGroup((Scene *const)(v6 + 80), (uint32_t)this);
        if ( std::operator!=<Group>((const std::shared_ptr<Group> *)(v6 + 80), 0LL) )
        {
          ScriptContext::ScriptContext((ScriptContext *const)(v6 + 224));
          toThisPtr<Scene>((Scene *)(v6 + 112));
          ScriptContext::setSceneAndOwnerUid((ScriptContext *const)(v6 + 224), (ScenePtr *)(v6 + 112));
          std::shared_ptr<Scene>::~shared_ptr((std::shared_ptr<Scene> *const)(v6 + 112));
          std::weak_ptr<Group>::operator=<Group>(
            (std::weak_ptr<Group> *const)(v6 + 240),
            (const std::shared_ptr<Group> *)(v6 + 80));
          if ( std::operator==<Player>(&param->from_player_ptr, 0LL) )
          {
            v68 = 0;
          }
          else
          {
            v69 = std::__shared_ptr_access<Player,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Player,(__gnu_cxx::_Lock_policy)2,false,false> *const)&param->from_player_ptr);
            v68 = Player::getUid(v69);
          }
          *(_DWORD *)(v6 + 312) = v68;
          v70 = std::move<ScriptContext &>((ScriptContext *)(v6 + 224));
          std::__shared_ptr_access<Group,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Group,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v6 + 80));
          Group::getScript((const Group *const)(v6 + 112));
          std::make_pair<std::shared_ptr<LuaScript>,ScriptContext>(
            &__args_0,
            (std::shared_ptr<LuaScript> *)(v6 + 112),
            v70);
          std::vector<std::pair<std::shared_ptr<LuaScript>,ScriptContext>>::emplace_back<std::pair<std::shared_ptr<LuaScript>,ScriptContext>>(
            retstr,
            &__args_0,
            &__args_0);
          std::pair<std::shared_ptr<LuaScript>,ScriptContext>::~pair(&__args_0);
          std::shared_ptr<LuaScript>::~shared_ptr((std::shared_ptr<LuaScript> *const)(v6 + 112));
          ScriptContext::~ScriptContext((ScriptContext *const)(v6 + 224));
        }
LABEL_130:
        std::shared_ptr<Group>::~shared_ptr((std::shared_ptr<Group> *const)(v6 + 80));
      }
LABEL_131:
      if ( v90 == (char *)v6 )
      {
        *(_QWORD *)((v6 >> 3) + 0x7FFF8000) = 0LL;
        *(_QWORD *)((v6 >> 3) + 0x7FFF8008) = 0LL;
        *(_DWORD *)((v6 >> 3) + 0x7FFF8010) = 0;
        *(_DWORD *)((v6 >> 3) + 0x7FFF8018) = 0;
        *(_QWORD *)((v6 >> 3) + 0x7FFF8030) = 0LL;
      }
      else
      {
        *(_QWORD *)v6 = 1172321806LL;
        *(_QWORD *)((v6 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
        *(_QWORD *)((v6 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
        *(_QWORD *)((v6 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
        *(_QWORD *)((v6 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
        *(_QWORD *)((v6 >> 3) + 0x7FFF8020) = 0xF5F5F5F5F5F5F5F5LL;
        *(_QWORD *)((v6 >> 3) + 0x7FFF8028) = 0xF5F5F5F5F5F5F5F5LL;
        *(_QWORD *)((v6 >> 3) + 0x7FFF8030) = 0xF5F5F5F5F5F5F5F5LL;
      }
      return retstr;
    default:
      goto LABEL_131;
  }
};

// Line 5242: range 00000000159A13C0-00000000159A147D
ForeachPolicy __cdecl Scene::getLuaCallScriptAndCtxVec(data::LuaCallType const&,std::vector<unsigned int> const&,std::shared_ptr<Creature>,ActionParam &)::{lambda(Challenge &)#1}::operator()(
        const Scene::getLuaCallScriptAndCtxVec::<lambda(Challenge&)> *const __closure,
        Challenge *challenge)
{
  std::set<std::shared_ptr<Group>,std::owner_less<std::shared_ptr<Group> >,std::allocator<std::shared_ptr<Group> > > *group_ptr_set; // rbx
  std::enable_shared_from_this<Group> v4; // [rsp+10h] [rbp-20h] BYREF

  if ( *(_BYTE *)(((unsigned __int64)__closure >> 3) + 0x7FFF8000) )
    __asan_report_load8();
  group_ptr_set = __closure->__group_ptr_set;
  if ( *(_BYTE *)(((unsigned __int64)&challenge->group_ >> 3) + 0x7FFF8000) )
    __asan_report_load8();
  std::enable_shared_from_this<Group>::shared_from_this(&v4);
  std::set<std::shared_ptr<Group>,std::owner_less<std::shared_ptr<Group>>,std::allocator<std::shared_ptr<Group>>>::insert(
    group_ptr_set,
    (std::set<std::shared_ptr<Group>,std::owner_less<std::shared_ptr<Group> >,std::allocator<std::shared_ptr<Group> > >::value_type *)&v4);
  std::shared_ptr<Group>::~shared_ptr((std::shared_ptr<Group> *const)&v4);
  return 0;
};

// Line 5360: range 00000000159A33CC-00000000159A4B8B
int32_t __cdecl Scene::handleAbilityLuaCall(Scene *const this, const data::ServerLuaCall *config, ActionParam *param)
{
  unsigned __int64 v3; // r13
  __int64 v4; // rax
  _DWORD *v5; // r12
  const std::shared_ptr<Creature> *p_target_ptr; // rax
  char v7; // r14
  unsigned __int64 v8; // rax
  void (__fastcall **v9)(__int64, unsigned __int64); // rdx
  common::tools::StringStream<common::tools::FixedBuffer<4096> > *v10; // rax
  common::tools::StringStream<common::tools::FixedBuffer<4096> > *v11; // rax
  common::tools::StringStream<common::tools::FixedBuffer<4096> > *v12; // rax
  common::tools::StringStream<common::tools::FixedBuffer<4096> > *v13; // rax
  common::tools::StringStream<common::tools::FixedBuffer<4096> > *v14; // rcx
  Player *v15; // r14
  int32_t v16; // r14d
  char v17; // r14
  unsigned __int64 v18; // rax
  void (__fastcall **v19)(__int64, unsigned __int64); // rdx
  common::tools::StringStream<common::tools::FixedBuffer<4096> > *v20; // rax
  common::tools::StringStream<common::tools::FixedBuffer<4096> > *v21; // rax
  common::tools::StringStream<common::tools::FixedBuffer<4096> > *v22; // rax
  common::tools::StringStream<common::tools::FixedBuffer<4096> > *v23; // rax
  common::tools::StringStream<common::tools::FixedBuffer<4096> > *v24; // rcx
  common::tools::StringStream<common::tools::FixedBuffer<4096> > *v25; // rax
  common::tools::StringStream<common::tools::FixedBuffer<4096> > *v26; // r14
  unsigned __int64 v27; // rax
  LuaScript *v28; // rax
  char v30; // r14
  unsigned __int64 v31; // rax
  void (__fastcall **v32)(__int64, unsigned __int64); // rdx
  common::tools::StringStream<common::tools::FixedBuffer<4096> > *v33; // rax
  common::tools::StringStream<common::tools::FixedBuffer<4096> > *v34; // rax
  common::tools::StringStream<common::tools::FixedBuffer<4096> > *v35; // rax
  common::tools::StringStream<common::tools::FixedBuffer<4096> > *v36; // rax
  common::tools::StringStream<common::tools::FixedBuffer<4096> > *v37; // rcx
  Player *v38; // r14
  __int64 v39; // rsi
  uint32_t EntityId; // edx
  std::__shared_ptr_access<Creature,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v41; // rax
  char v42; // al
  __int64 v43; // rsi
  uint32_t v44; // ecx
  std::__shared_ptr_access<Creature,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v45; // rax
  char v46; // dl
  bool v47; // dl
  __m128i v48; // xmm0
  char v49; // al
  ActorAbility *v50; // r14
  ActorAbility *v51; // r14
  ActorAbility *v52; // r14
  ScriptContext *v53; // r14
  LuaScript *v54; // rax
  ScriptContext *v55; // r14
  LuaScript *v56; // rax
  float *v57; // r9
  ScriptContext *v58; // r14
  LuaScript *v59; // rax
  ScriptContext *v60; // r14
  LuaScript *v61; // rax
  common::milog::MiLogStream *v62; // rax
  common::milog::MiLogStream *v63; // rax
  common::milog::MiLogStream *v64; // rax
  __int64 v65; // rax
  __int64 v66; // rax
  Player *v67; // r14
  int32_t result; // eax
  float *v69; // [rsp-8h] [rbp-478h]
  float *v70; // [rsp+0h] [rbp-470h]
  ActionParam *parama; // [rsp+8h] [rbp-468h]
  std::allocator<char> __a; // [rsp+2Fh] [rbp-441h] BYREF
  std::vector<std::pair<std::shared_ptr<LuaScript>,ScriptContext>>::iterator __for_begin; // [rsp+30h] [rbp-440h] BYREF
  std::vector<std::pair<std::shared_ptr<LuaScript>,ScriptContext>>::iterator __for_end; // [rsp+38h] [rbp-438h] BYREF
  ScriptContext *context; // [rsp+40h] [rbp-430h]
  ScriptContext *v77; // [rsp+48h] [rbp-428h]
  ScriptContext *v78; // [rsp+50h] [rbp-420h]
  ScriptContext *v79; // [rsp+58h] [rbp-418h]
  std::vector<std::pair<std::shared_ptr<LuaScript>,ScriptContext>> *__for_range; // [rsp+60h] [rbp-410h]
  std::pair<std::shared_ptr<LuaScript>,ScriptContext> *__in; // [rsp+68h] [rbp-408h]
  std::tuple_element<0,std::pair<std::shared_ptr<LuaScript>,ScriptContext> >::type *lua_script_ptr; // [rsp+70h] [rbp-400h]
  std::tuple_element<1,std::pair<std::shared_ptr<LuaScript>,ScriptContext> >::type *ctx; // [rsp+78h] [rbp-3F8h]
  std::tuple_element<1,std::pair<std::shared_ptr<LuaScript>,ScriptContext> >::type *v84; // [rsp+80h] [rbp-3F0h]
  ScriptContext *o; // [rsp+88h] [rbp-3E8h]
  std::tuple_element<1,std::pair<std::shared_ptr<LuaScript>,ScriptContext> >::type *v86; // [rsp+90h] [rbp-3E0h]
  ScriptContext *v87; // [rsp+98h] [rbp-3D8h]
  std::tuple_element<1,std::pair<std::shared_ptr<LuaScript>,ScriptContext> >::type *v88; // [rsp+A0h] [rbp-3D0h]
  ScriptContext *v89; // [rsp+A8h] [rbp-3C8h]
  std::tuple_element<1,std::pair<std::shared_ptr<LuaScript>,ScriptContext> >::type *v90; // [rsp+B0h] [rbp-3C0h]
  ScriptContext *v91; // [rsp+B8h] [rbp-3B8h]
  std::shared_ptr<DieCreatureRecord> p_record_ptr; // [rsp+C0h] [rbp-3B0h] BYREF
  std::shared_ptr<DieCreatureRecord> v93; // [rsp+D0h] [rbp-3A0h] BYREF
  common::milog::MiLogStream v94; // [rsp+E0h] [rbp-390h] BYREF
  std::string val; // [rsp+100h] [rbp-370h] BYREF
  char v96[848]; // [rsp+120h] [rbp-350h] BYREF

  parama = param;
  v3 = (unsigned __int64)v96;
  v70 = (float *)v96;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_4(800LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "10 48 4 8 ret:5379 64 4 11 param1:5410 80 4 11 param2:5411 96 4 11 param3:5412 112 16 12 src_ptr"
                        ":5361 144 16 7 ss:5394 176 16 7 ss:5365 208 24 15 script_vec:5362 272 32 15 source_str:5396 336 392 7 ss:5442";
  *(_QWORD *)(v3 + 16) = Scene::handleAbilityLuaCall;
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = -234556943;
  v5[536862722] = -234556924;
  v5[536862723] = 61956;
  v5[536862724] = 62194;
  v5[536862725] = 62194;
  v5[536862726] = 62194;
  v5[536862727] = -218959360;
  v5[536862728] = 62194;
  v5[536862729] = -219021312;
  v5[536862730] = 62194;
  v5[536862742] = -218103808;
  v5[536862743] = -202116109;
  v5[536862744] = -202116109;
  if ( *(_BYTE *)(((unsigned __int64)&config->is_target >> 3) + 0x7FFF8000) != 0
    && (((unsigned __int8)config - 116) & 7) >= *(_BYTE *)(((unsigned __int64)&config->is_target >> 3) + 0x7FFF8000) )
  {
    __asan_report_load1(&config->is_target);
  }
  if ( config->is_target )
    p_target_ptr = &parama->target_ptr;
  else
    p_target_ptr = &parama->source_ptr;
  std::shared_ptr<Creature>::shared_ptr((std::shared_ptr<Creature> *const)(v3 + 112), p_target_ptr);
  std::shared_ptr<Creature>::shared_ptr(
    (std::shared_ptr<Creature> *const)(v3 + 176),
    (const std::shared_ptr<Creature> *)(v3 + 112));
  Scene::getLuaCallScriptAndCtxVec(
    (std::vector<std::pair<std::shared_ptr<LuaScript>,ScriptContext>> *)(v3 + 208),
    this,
    config,
    (CreaturePtr *)(v3 + 176),
    parama);
  std::shared_ptr<Creature>::~shared_ptr((std::shared_ptr<Creature> *const)(v3 + 176));
  if ( std::vector<std::pair<std::shared_ptr<LuaScript>,ScriptContext>>::empty((const std::vector<std::pair<std::shared_ptr<LuaScript>,ScriptContext>> *const)(v3 + 208)) )
  {
    common::tools::StringStream<common::tools::FixedBuffer<4096>>::StringStream((common::tools::StringStream<common::tools::FixedBuffer<4096> > *const)(v3 + 176));
    v7 = 0;
    if ( std::operator==<Creature>((const std::shared_ptr<Creature> *)(v3 + 112), 0LL) )
    {
      std::allocator<char>::allocator(&__a);
      v7 = 1;
      std::string::basic_string<std::allocator<char>>((std::string *const)(v3 + 272), byte_2586B880, &__a);
    }
    else
    {
      v8 = (unsigned __int64)std::__shared_ptr_access<Creature,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Creature,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 112));
      if ( *(_BYTE *)((v8 >> 3) + 0x7FFF8000) )
        v8 = __asan_report_load8();
      v9 = *(void (__fastcall ***)(__int64, unsigned __int64))v8;
      if ( *(_BYTE *)((*(_QWORD *)v8 >> 3) + 0x7FFF8000LL) )
        v8 = __asan_report_load8();
      (*v9)(v3 + 272, v8);
    }
    if ( v7 )
      std::allocator<char>::~allocator(&__a);
    v10 = common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(
            (common::tools::StringStream<common::tools::FixedBuffer<4096> > *const)(v3 + 176),
            aAbilitylua);
    v11 = common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(v10, &config->func_name);
    v12 = common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(v11, ", src:");
    v13 = common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(
            v12,
            (const std::string *)(v3 + 272));
    v14 = common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(v13, asc_258E2080);
    if ( *(_BYTE *)(((unsigned __int64)&config->is_target >> 3) + 0x7FFF8000) != 0
      && (((unsigned __int8)config - 116) & 7) >= *(_BYTE *)(((unsigned __int64)&config->is_target >> 3) + 0x7FFF8000) )
    {
      __asan_report_load1(&config->is_target);
    }
    common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(v14, config->is_target);
    common::milog::MiLogStream::create(
      &v94,
      &common::milog::MiLogDefault::default_log_obj_,
      1u,
      "./src/scene/scene.cpp",
      "handleAbilityLuaCall",
      5370);
    common::tools::StringStream<common::tools::FixedBuffer<4096>>::str[abi:cxx11](
      &val,
      (common::tools::StringStream<common::tools::FixedBuffer<4096> > *const)(v3 + 176));
    common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(&v94, &val);
    std::string::~string(&val);
    common::milog::MiLogStream::~MiLogStream(&v94);
    if ( std::operator!=<Player>(&parama->from_player_ptr, 0LL) )
    {
      v15 = std::__shared_ptr_access<Player,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Player,(__gnu_cxx::_Lock_policy)2,false,false> *const)&parama->from_player_ptr);
      common::tools::StringStream<common::tools::FixedBuffer<4096>>::str[abi:cxx11](
        &val,
        (common::tools::StringStream<common::tools::FixedBuffer<4096> > *const)(v3 + 176));
      Player::notifyGMServerLog(v15, SERVER_LOG_NONE, LOG_LEVEL_INFO_0, &val);
      std::string::~string(&val);
    }
    v16 = -1;
    std::string::~string((void *)(v3 + 272));
    common::tools::StringStream<common::tools::FixedBuffer<4096>>::~StringStream((common::tools::StringStream<common::tools::FixedBuffer<4096> > *const)(v3 + 176));
  }
  else
  {
    *(_DWORD *)(v3 + 48) = 0;
    if ( std::vector<std::pair<std::shared_ptr<LuaScript>,ScriptContext>>::size((const std::vector<std::pair<std::shared_ptr<LuaScript>,ScriptContext>> *const)(v3 + 208)) > 0x10 )
    {
      common::tools::StringStream<common::tools::FixedBuffer<4096>>::StringStream((common::tools::StringStream<common::tools::FixedBuffer<4096> > *const)(v3 + 176));
      v17 = 0;
      if ( std::operator==<Creature>((const std::shared_ptr<Creature> *)(v3 + 112), 0LL) )
      {
        std::allocator<char>::allocator(&__a);
        v17 = 1;
        std::string::basic_string<std::allocator<char>>((std::string *const)(v3 + 272), byte_2586B880, &__a);
      }
      else
      {
        v18 = (unsigned __int64)std::__shared_ptr_access<Creature,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Creature,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 112));
        if ( *(_BYTE *)((v18 >> 3) + 0x7FFF8000) )
          v18 = __asan_report_load8();
        v19 = *(void (__fastcall ***)(__int64, unsigned __int64))v18;
        if ( *(_BYTE *)((*(_QWORD *)v18 >> 3) + 0x7FFF8000LL) )
          v18 = __asan_report_load8();
        (*v19)(v3 + 272, v18);
      }
      if ( v17 )
        std::allocator<char>::~allocator(&__a);
      v20 = common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(
              (common::tools::StringStream<common::tools::FixedBuffer<4096> > *const)(v3 + 176),
              aAbilitylua_0);
      v21 = common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(v20, &config->func_name);
      v22 = common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(v21, ", src:");
      v23 = common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(
              v22,
              (const std::string *)(v3 + 272));
      v24 = common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(v23, asc_258E2080);
      if ( *(_BYTE *)(((unsigned __int64)&config->is_target >> 3) + 0x7FFF8000) != 0
        && (((unsigned __int8)config - 116) & 7) >= *(_BYTE *)(((unsigned __int64)&config->is_target >> 3) + 0x7FFF8000) )
      {
        __asan_report_load1(&config->is_target);
      }
      v25 = common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(v24, config->is_target);
      v26 = common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(v25, asc_258E2160);
      v27 = std::vector<std::pair<std::shared_ptr<LuaScript>,ScriptContext>>::size((const std::vector<std::pair<std::shared_ptr<LuaScript>,ScriptContext>> *const)(v3 + 208));
      common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(v26, v27);
      common::milog::MiLogStream::create(
        &v94,
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/scene/scene.cpp",
        "handleAbilityLuaCall",
        5388);
      common::tools::StringStream<common::tools::FixedBuffer<4096>>::str[abi:cxx11](
        &val,
        (common::tools::StringStream<common::tools::FixedBuffer<4096> > *const)(v3 + 176));
      common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(&v94, &val);
      std::string::~string(&val);
      common::milog::MiLogStream::~MiLogStream(&v94);
      std::string::~string((void *)(v3 + 272));
      common::tools::StringStream<common::tools::FixedBuffer<4096>>::~StringStream((common::tools::StringStream<common::tools::FixedBuffer<4096> > *const)(v3 + 176));
    }
    __for_range = (std::vector<std::pair<std::shared_ptr<LuaScript>,ScriptContext>> *)(v3 + 208);
    __for_begin._M_current = std::vector<std::pair<std::shared_ptr<LuaScript>,ScriptContext>>::begin((std::vector<std::pair<std::shared_ptr<LuaScript>,ScriptContext>> *const)(v3 + 208))._M_current;
    __for_end._M_current = std::vector<std::pair<std::shared_ptr<LuaScript>,ScriptContext>>::end(__for_range)._M_current;
    while ( __gnu_cxx::operator!=<std::pair<std::shared_ptr<LuaScript>,ScriptContext> *,std::vector<std::pair<std::shared_ptr<LuaScript>,ScriptContext>>>(
              &__for_begin,
              &__for_end) )
    {
      __in = __gnu_cxx::__normal_iterator<std::pair<std::shared_ptr<LuaScript>,ScriptContext> *,std::vector<std::pair<std::shared_ptr<LuaScript>,ScriptContext>>>::operator*(&__for_begin);
      lua_script_ptr = std::get<0ul,std::shared_ptr<LuaScript>,ScriptContext>(__in);
      ctx = std::get<1ul,std::shared_ptr<LuaScript>,ScriptContext>(__in);
      if ( std::operator==<LuaScript>(lua_script_ptr, 0LL)
        || (v28 = std::__shared_ptr_access<LuaScript,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<LuaScript,(__gnu_cxx::_Lock_policy)2,false,false> *const)lua_script_ptr),
            !LuaScript::hasFunction(v28, &config->func_name)) )
      {
        common::tools::StringStream<common::tools::FixedBuffer<4096>>::StringStream((common::tools::StringStream<common::tools::FixedBuffer<4096> > *const)(v3 + 144));
        v30 = 0;
        if ( std::operator==<Creature>((const std::shared_ptr<Creature> *)(v3 + 112), 0LL) )
        {
          std::allocator<char>::allocator(&__a);
          v30 = 1;
          std::string::basic_string<std::allocator<char>>((std::string *const)(v3 + 272), byte_2586B880, &__a);
        }
        else
        {
          v31 = (unsigned __int64)std::__shared_ptr_access<Creature,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Creature,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 112));
          if ( *(_BYTE *)((v31 >> 3) + 0x7FFF8000) )
            v31 = __asan_report_load8();
          v32 = *(void (__fastcall ***)(__int64, unsigned __int64))v31;
          if ( *(_BYTE *)((*(_QWORD *)v31 >> 3) + 0x7FFF8000LL) )
            v31 = __asan_report_load8();
          (*v32)(v3 + 272, v31);
        }
        if ( v30 )
          std::allocator<char>::~allocator(&__a);
        v33 = common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(
                (common::tools::StringStream<common::tools::FixedBuffer<4096> > *const)(v3 + 144),
                aAbilitylua_1);
        v34 = common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(v33, &config->func_name);
        v35 = common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(v34, ", src:");
        v36 = common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(
                v35,
                (const std::string *)(v3 + 272));
        v37 = common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(v36, asc_258E2080);
        if ( *(_BYTE *)(((unsigned __int64)&config->is_target >> 3) + 0x7FFF8000) != 0
          && (((unsigned __int8)config - 116) & 7) >= *(_BYTE *)(((unsigned __int64)&config->is_target >> 3) + 0x7FFF8000) )
        {
          __asan_report_load1(&config->is_target);
        }
        common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(v37, config->is_target);
        common::milog::MiLogStream::create(
          &v94,
          &common::milog::MiLogDefault::default_log_obj_,
          3u,
          "./src/scene/scene.cpp",
          "handleAbilityLuaCall",
          5399);
        common::tools::StringStream<common::tools::FixedBuffer<4096>>::str[abi:cxx11](
          &val,
          (common::tools::StringStream<common::tools::FixedBuffer<4096> > *const)(v3 + 144));
        common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(&v94, &val);
        std::string::~string(&val);
        common::milog::MiLogStream::~MiLogStream(&v94);
        if ( std::operator!=<Player>(&parama->from_player_ptr, 0LL) )
        {
          v38 = std::__shared_ptr_access<Player,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Player,(__gnu_cxx::_Lock_policy)2,false,false> *const)&parama->from_player_ptr);
          common::tools::StringStream<common::tools::FixedBuffer<4096>>::str[abi:cxx11](
            &val,
            (common::tools::StringStream<common::tools::FixedBuffer<4096> > *const)(v3 + 144));
          Player::notifyGMServerLog(v38, SERVER_LOG_NONE, LOG_LEVEL_ERROR_0, &val);
          std::string::~string(&val);
        }
        std::string::~string((void *)(v3 + 272));
        common::tools::StringStream<common::tools::FixedBuffer<4096>>::~StringStream((common::tools::StringStream<common::tools::FixedBuffer<4096> > *const)(v3 + 144));
      }
      else
      {
        v39 = 0LL;
        if ( std::operator==<Creature>(&parama->source_ptr, 0LL) )
        {
          EntityId = 0;
        }
        else
        {
          v41 = std::__shared_ptr_access<Creature,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Creature,(__gnu_cxx::_Lock_policy)2,false,false> *const)&parama->source_ptr);
          EntityId = Entity::getEntityId((const Entity *const)v41);
        }
        v42 = *(_BYTE *)(((unsigned __int64)&ctx->source_entity_id >> 3) + 0x7FFF8000);
        if ( v42 != 0 && v42 <= 3 )
        {
          LOBYTE(v39) = v42 != 0;
          __asan_report_store4(&ctx->source_entity_id, v39, EntityId);
        }
        ctx->source_entity_id = EntityId;
        v43 = 0LL;
        if ( std::operator==<Creature>(&parama->target_ptr, 0LL) )
        {
          v44 = 0;
        }
        else
        {
          v45 = std::__shared_ptr_access<Creature,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Creature,(__gnu_cxx::_Lock_policy)2,false,false> *const)&parama->target_ptr);
          v44 = Entity::getEntityId((const Entity *const)v45);
        }
        v46 = *(_BYTE *)(((unsigned __int64)&ctx->target_entity_id >> 3) + 0x7FFF8000);
        LOBYTE(v43) = v46 != 0;
        v47 = v46 != 0 && (char)((((_BYTE)ctx + 84) & 7) + 3) >= v46;
        if ( v47 )
          __asan_report_store4(&ctx->target_entity_id, v43, v47);
        ctx->target_entity_id = v44;
        *(_DWORD *)(v3 + 64) = 0;
        *(_DWORD *)(v3 + 80) = 0;
        v48 = 0LL;
        *(_DWORD *)(v3 + 96) = 0;
        if ( !std::operator!=<ActorAbility>(0LL, &parama->ability_ptr) )
          goto LABEL_73;
        if ( *(_BYTE *)(((unsigned __int64)&config->param_num >> 3) + 0x7FFF8000) != 0
          && *(_BYTE *)(((unsigned __int64)&config->param_num >> 3) + 0x7FFF8000) <= 3 )
        {
          __asan_report_load4(&config->param_num);
        }
        if ( config->param_num )
          v49 = 1;
        else
LABEL_73:
          v49 = 0;
        if ( v49 )
        {
          v50 = std::__shared_ptr_access<ActorAbility,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<ActorAbility,(__gnu_cxx::_Lock_policy)2,false,false> *const)parama);
          std::shared_ptr<DieCreatureRecord>::shared_ptr(&p_record_ptr, 0LL);
          std::shared_ptr<Creature>::shared_ptr((std::shared_ptr<Creature> *const)(v3 + 176), 0LL);
          *(float *)v48.m128i_i32 = ActorAbility::evaluate(
                                      v50,
                                      &config->param1,
                                      (CreaturePtr *)(v3 + 176),
                                      &p_record_ptr);
          *(_DWORD *)(v3 + 64) = _mm_cvtsi128_si32(v48);
          std::shared_ptr<Creature>::~shared_ptr((std::shared_ptr<Creature> *const)(v3 + 176));
          std::shared_ptr<DieCreatureRecord>::~shared_ptr(&p_record_ptr);
          v51 = std::__shared_ptr_access<ActorAbility,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<ActorAbility,(__gnu_cxx::_Lock_policy)2,false,false> *const)parama);
          std::shared_ptr<DieCreatureRecord>::shared_ptr(&v93, 0LL);
          std::shared_ptr<Creature>::shared_ptr((std::shared_ptr<Creature> *const)(v3 + 176), 0LL);
          *(float *)v48.m128i_i32 = ActorAbility::evaluate(v51, &config->param2, (CreaturePtr *)(v3 + 176), &v93);
          *(_DWORD *)(v3 + 80) = _mm_cvtsi128_si32(v48);
          std::shared_ptr<Creature>::~shared_ptr((std::shared_ptr<Creature> *const)(v3 + 176));
          std::shared_ptr<DieCreatureRecord>::~shared_ptr(&v93);
          v52 = std::__shared_ptr_access<ActorAbility,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<ActorAbility,(__gnu_cxx::_Lock_policy)2,false,false> *const)parama);
          std::shared_ptr<DieCreatureRecord>::shared_ptr((std::shared_ptr<DieCreatureRecord> *const)(v3 + 176), 0LL);
          std::shared_ptr<Creature>::shared_ptr((std::shared_ptr<Creature> *const)&v93, 0LL);
          *(float *)v48.m128i_i32 = ActorAbility::evaluate(
                                      v52,
                                      &config->param3,
                                      (CreaturePtr *)&v93,
                                      (DieCreatureRecordPtr *)(v3 + 176));
          *(_DWORD *)(v3 + 96) = _mm_cvtsi128_si32(v48);
          std::shared_ptr<Creature>::~shared_ptr((std::shared_ptr<Creature> *const)&v93);
          std::shared_ptr<DieCreatureRecord>::~shared_ptr((std::shared_ptr<DieCreatureRecord> *const)(v3 + 176));
        }
        if ( *(_BYTE *)(((unsigned __int64)&config->param_num >> 3) + 0x7FFF8000) != 0
          && *(_BYTE *)(((unsigned __int64)&config->param_num >> 3) + 0x7FFF8000) <= 3 )
        {
          __asan_report_load4(&config->param_num);
        }
        if ( config->param_num )
        {
          if ( *(_BYTE *)(((unsigned __int64)&config->param_num >> 3) + 0x7FFF8000) != 0
            && *(_BYTE *)(((unsigned __int64)&config->param_num >> 3) + 0x7FFF8000) <= 3 )
          {
            __asan_report_load4(&config->param_num);
          }
          if ( config->param_num == 1 )
          {
            v86 = ctx;
            v87 = ctx;
            v79 = boost::addressof<ScriptContext>(ctx);
            v77 = v79;
            v55 = v79;
            v56 = std::__shared_ptr_access<LuaScript,(__gnu_cxx::_Lock_policy)2,false,false>::operator*((const std::__shared_ptr_access<LuaScript,(__gnu_cxx::_Lock_policy)2,false,false> *const)lua_script_ptr);
            *(_DWORD *)(v3 + 48) = ScriptLib::executeFuncWithErrorNotify<int,float &>(
                                     v56,
                                     &config->func_name,
                                     (int *)(v3 + 48),
                                     v55,
                                     (float *)(v3 + 64),
                                     v57);
          }
          else
          {
            if ( *(_BYTE *)(((unsigned __int64)&config->param_num >> 3) + 0x7FFF8000) != 0
              && *(_BYTE *)(((unsigned __int64)&config->param_num >> 3) + 0x7FFF8000) <= 3 )
            {
              __asan_report_load4(&config->param_num);
            }
            if ( config->param_num == 2 )
            {
              v88 = ctx;
              v89 = ctx;
              v79 = boost::addressof<ScriptContext>(ctx);
              v78 = v79;
              v58 = v79;
              v59 = std::__shared_ptr_access<LuaScript,(__gnu_cxx::_Lock_policy)2,false,false>::operator*((const std::__shared_ptr_access<LuaScript,(__gnu_cxx::_Lock_policy)2,false,false> *const)lua_script_ptr);
              *(_DWORD *)(v3 + 48) = ScriptLib::executeFuncWithErrorNotify<int,float &,float &>(
                                       v59,
                                       &config->func_name,
                                       (int *)(v3 + 48),
                                       v58,
                                       (float *)(v3 + 64),
                                       (float *)(v3 + 80),
                                       v70,
                                       (float *)parama);
            }
            else
            {
              if ( *(_BYTE *)(((unsigned __int64)&config->param_num >> 3) + 0x7FFF8000) != 0
                && *(_BYTE *)(((unsigned __int64)&config->param_num >> 3) + 0x7FFF8000) <= 3 )
              {
                __asan_report_load4(&config->param_num);
              }
              if ( config->param_num == 3 )
              {
                v90 = ctx;
                v91 = ctx;
                v79 = boost::addressof<ScriptContext>(ctx);
                v60 = v79;
                v61 = std::__shared_ptr_access<LuaScript,(__gnu_cxx::_Lock_policy)2,false,false>::operator*((const std::__shared_ptr_access<LuaScript,(__gnu_cxx::_Lock_policy)2,false,false> *const)lua_script_ptr);
                *(_DWORD *)(v3 + 48) = ScriptLib::executeFuncWithErrorNotify<int,float &,float &,float &>(
                                         v61,
                                         &config->func_name,
                                         (int *)(v3 + 48),
                                         v60,
                                         (float *)(v3 + 64),
                                         (float *)(v3 + 80),
                                         (float *)(v3 + 96),
                                         v69,
                                         v70,
                                         (float *)parama);
              }
              else
              {
                common::milog::MiLogStream::create(
                  (common::milog::MiLogStream *)&val,
                  &common::milog::MiLogDefault::default_log_obj_,
                  3u,
                  "./src/scene/scene.cpp",
                  "handleAbilityLuaCall",
                  5437);
                v62 = common::milog::MiLogStream::operator<<<char [25],(char *[25])0>(
                        (common::milog::MiLogStream *const)&val,
                        (const char (*)[25])"server lua call param = ");
                v63 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v62, &config->param_num);
                v64 = common::milog::MiLogStream::operator<<<char [21],(char *[21])0>(
                        v63,
                        (const char (*)[21])" invalid, func_name:");
                common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v64, &config->func_name);
                common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)&val);
                *(_DWORD *)(v3 + 48) = -1;
              }
            }
          }
        }
        else
        {
          v84 = ctx;
          o = ctx;
          v79 = boost::addressof<ScriptContext>(ctx);
          context = v79;
          v53 = v79;
          v54 = std::__shared_ptr_access<LuaScript,(__gnu_cxx::_Lock_policy)2,false,false>::operator*((const std::__shared_ptr_access<LuaScript,(__gnu_cxx::_Lock_policy)2,false,false> *const)lua_script_ptr);
          *(_DWORD *)(v3 + 48) = ScriptLib::executeFuncWithErrorNotify<int>(
                                   v54,
                                   &config->func_name,
                                   (int *)(v3 + 48),
                                   v53);
        }
        if ( *(_DWORD *)(v3 + 48) )
        {
          std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream(v3 + 336);
          v65 = std::operator<<<std::char_traits<char>>(v3 + 352, "[AbilityFunc] ");
          v66 = std::operator<<<char>(v65, &config->func_name);
          std::operator<<<std::char_traits<char>>(v66, " execute fails");
          common::milog::MiLogStream::create(
            &v94,
            &common::milog::MiLogDefault::default_log_obj_,
            0x10u,
            "./src/scene/scene.cpp",
            "handleAbilityLuaCall",
            5444);
          std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::str(&val, v3 + 336);
          common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(&v94, &val);
          std::string::~string(&val);
          common::milog::MiLogStream::~MiLogStream(&v94);
          if ( std::operator!=<Player>(&parama->from_player_ptr, 0LL) )
          {
            v67 = std::__shared_ptr_access<Player,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Player,(__gnu_cxx::_Lock_policy)2,false,false> *const)&parama->from_player_ptr);
            std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::str(&val, v3 + 336);
            Player::notifyGMServerLog(v67, SERVER_LOG_LUA, LOG_LEVEL_WARNING_0, &val);
            std::string::~string(&val);
          }
          std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream(v3 + 336);
        }
      }
      __gnu_cxx::__normal_iterator<std::pair<std::shared_ptr<LuaScript>,ScriptContext> *,std::vector<std::pair<std::shared_ptr<LuaScript>,ScriptContext>>>::operator++(&__for_begin);
    }
    v16 = *(_DWORD *)(v3 + 48);
  }
  std::vector<std::pair<std::shared_ptr<LuaScript>,ScriptContext>>::~vector((std::vector<std::pair<std::shared_ptr<LuaScript>,ScriptContext>> *const)(v3 + 208));
  std::shared_ptr<Creature>::~shared_ptr((std::shared_ptr<Creature> *const)(v3 + 112));
  result = v16;
  if ( v70 == (float *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8010) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8018) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8020) = 0LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8028) = 0;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8058) = 0LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8060) = 0;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8020) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8028) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8030) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8038) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8040) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8048) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8050) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8058) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8060) = -168430091;
  }
  return result;
};

// Line 5457: range 00000000159A4B8C-00000000159A5DFE
int32_t __cdecl Scene::handleAbilityLuaTriggerEvent(
        Scene *const this,
        const data::ServerLuaTriggerEvent *config,
        ActionParam *param)
{
  unsigned __int64 v3; // r13
  __int64 v4; // rax
  _DWORD *v5; // r12
  CreaturePtr *p_target_ptr; // rax
  char v7; // r14
  unsigned __int64 v8; // rax
  void (__fastcall **v9)(__int64, unsigned __int64); // rdx
  common::tools::StringStream<common::tools::FixedBuffer<4096> > *v10; // rax
  common::tools::StringStream<common::tools::FixedBuffer<4096> > *v11; // rax
  common::tools::StringStream<common::tools::FixedBuffer<4096> > *v12; // rax
  common::tools::StringStream<common::tools::FixedBuffer<4096> > *v13; // rax
  common::tools::StringStream<common::tools::FixedBuffer<4096> > *v14; // rcx
  Player *v15; // r14
  int32_t v16; // r14d
  char v17; // al
  ActorAbility *v18; // r14
  ActorAbility *v19; // r14
  ActorAbility *v20; // r14
  std::__shared_ptr_access<Event,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v21; // rax
  __int64 v22; // rsi
  uint32_t EntityId; // r14d
  std::__shared_ptr_access<Creature,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v24; // rax
  std::__shared_ptr_access<Event,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v25; // rdx
  char v26; // cl
  __int64 v27; // rsi
  uint32_t v28; // r14d
  std::__shared_ptr_access<Creature,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v29; // rax
  __int64 v30; // rax
  char v31; // dl
  bool v32; // dl
  std::__shared_ptr_access<Event,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v33; // rdx
  char v34; // cl
  __int64 v35; // rax
  char v36; // dl
  bool v37; // dl
  std::__shared_ptr_access<Event,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v38; // rdx
  char v39; // cl
  char v40; // r14
  unsigned __int64 v41; // rax
  void (__fastcall **v42)(__int64, unsigned __int64); // rdx
  common::tools::StringStream<common::tools::FixedBuffer<4096> > *v43; // rax
  common::tools::StringStream<common::tools::FixedBuffer<4096> > *v44; // rax
  common::tools::StringStream<common::tools::FixedBuffer<4096> > *v45; // rax
  common::tools::StringStream<common::tools::FixedBuffer<4096> > *v46; // rax
  common::tools::StringStream<common::tools::FixedBuffer<4096> > *v47; // rcx
  common::tools::StringStream<common::tools::FixedBuffer<4096> > *v48; // rax
  common::tools::StringStream<common::tools::FixedBuffer<4096> > *v49; // r14
  unsigned __int64 v50; // rax
  char v51; // r14
  unsigned __int64 v52; // rax
  void (__fastcall **v53)(__int64, unsigned __int64); // rdx
  common::tools::StringStream<common::tools::FixedBuffer<4096> > *v54; // rax
  common::tools::StringStream<common::tools::FixedBuffer<4096> > *v55; // rax
  common::tools::StringStream<common::tools::FixedBuffer<4096> > *v56; // rax
  common::tools::StringStream<common::tools::FixedBuffer<4096> > *v57; // rax
  common::tools::StringStream<common::tools::FixedBuffer<4096> > *v58; // rcx
  Player *v59; // r14
  Group *v60; // rax
  int32_t result; // eax
  std::allocator<char> __a; // [rsp+2Fh] [rbp-1D1h] BYREF
  uint32_t param1; // [rsp+30h] [rbp-1D0h]
  uint32_t param2; // [rsp+34h] [rbp-1CCh]
  uint32_t param3; // [rsp+38h] [rbp-1C8h]
  int32_t ret; // [rsp+3Ch] [rbp-1C4h]
  std::vector<std::pair<std::shared_ptr<LuaScript>,ScriptContext>>::iterator __for_begin; // [rsp+40h] [rbp-1C0h] BYREF
  std::vector<std::pair<std::shared_ptr<LuaScript>,ScriptContext>>::iterator __for_end; // [rsp+48h] [rbp-1B8h] BYREF
  std::vector<std::pair<std::shared_ptr<LuaScript>,ScriptContext>> *__for_range; // [rsp+50h] [rbp-1B0h]
  std::pair<std::shared_ptr<LuaScript>,ScriptContext> *__in; // [rsp+58h] [rbp-1A8h]
  std::tuple_element<0,std::pair<std::shared_ptr<LuaScript>,ScriptContext> >::type *lua_script_ptr; // [rsp+60h] [rbp-1A0h]
  std::tuple_element<1,std::pair<std::shared_ptr<LuaScript>,ScriptContext> >::type *ctx; // [rsp+68h] [rbp-198h]
  common::milog::MiLogStream v75; // [rsp+70h] [rbp-190h] BYREF
  std::string val; // [rsp+90h] [rbp-170h] BYREF
  char v77[336]; // [rsp+B0h] [rbp-150h] BYREF

  v3 = (unsigned __int64)v77;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_3(288LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "6 32 16 12 src_ptr:5458 64 16 14 event_ptr:5490 96 16 7 ss:5515 128 16 14 group_ptr:5530 160 24 "
                        "15 script_vec:5460 224 32 15 source_str:5517";
  *(_QWORD *)(v3 + 16) = Scene::handleAbilityLuaTriggerEvent;
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = -219021312;
  v5[536862722] = -219021312;
  v5[536862723] = -219021312;
  v5[536862724] = -219021312;
  v5[536862725] = -234881024;
  v5[536862726] = -218959118;
  v5[536862728] = -202116109;
  if ( *(_BYTE *)(((unsigned __int64)&config->is_target >> 3) + 0x7FFF8000) != 0
    && (((unsigned __int8)config - 116) & 7) >= *(_BYTE *)(((unsigned __int64)&config->is_target >> 3) + 0x7FFF8000) )
  {
    __asan_report_load1(&config->is_target);
  }
  if ( config->is_target )
    p_target_ptr = &param->target_ptr;
  else
    p_target_ptr = &param->source_ptr;
  std::shared_ptr<Creature>::shared_ptr((std::shared_ptr<Creature> *const)(v3 + 32), p_target_ptr);
  std::shared_ptr<Creature>::shared_ptr(
    (std::shared_ptr<Creature> *const)(v3 + 128),
    (const std::shared_ptr<Creature> *)(v3 + 32));
  Scene::getLuaCallScriptAndCtxVec(
    (std::vector<std::pair<std::shared_ptr<LuaScript>,ScriptContext>> *)(v3 + 160),
    this,
    config,
    (CreaturePtr *)(v3 + 128),
    param);
  std::shared_ptr<Creature>::~shared_ptr((std::shared_ptr<Creature> *const)(v3 + 128));
  if ( std::vector<std::pair<std::shared_ptr<LuaScript>,ScriptContext>>::empty((const std::vector<std::pair<std::shared_ptr<LuaScript>,ScriptContext>> *const)(v3 + 160)) )
  {
    common::tools::StringStream<common::tools::FixedBuffer<4096>>::StringStream((common::tools::StringStream<common::tools::FixedBuffer<4096> > *const)(v3 + 128));
    v7 = 0;
    if ( std::operator==<Creature>((const std::shared_ptr<Creature> *)(v3 + 32), 0LL) )
    {
      std::allocator<char>::allocator(&__a);
      v7 = 1;
      std::string::basic_string<std::allocator<char>>((std::string *const)(v3 + 224), byte_2586B880, &__a);
    }
    else
    {
      v8 = (unsigned __int64)std::__shared_ptr_access<Creature,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Creature,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 32));
      if ( *(_BYTE *)((v8 >> 3) + 0x7FFF8000) )
        v8 = __asan_report_load8();
      v9 = *(void (__fastcall ***)(__int64, unsigned __int64))v8;
      if ( *(_BYTE *)((*(_QWORD *)v8 >> 3) + 0x7FFF8000LL) )
        v8 = __asan_report_load8();
      (*v9)(v3 + 224, v8);
    }
    if ( v7 )
      std::allocator<char>::~allocator(&__a);
    v10 = common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(
            (common::tools::StringStream<common::tools::FixedBuffer<4096> > *const)(v3 + 128),
            aAbilitylua_2);
    v11 = common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(v10, &config->source_name);
    v12 = common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(v11, ", src:");
    v13 = common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(
            v12,
            (const std::string *)(v3 + 224));
    v14 = common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(v13, asc_258E2080);
    if ( *(_BYTE *)(((unsigned __int64)&config->is_target >> 3) + 0x7FFF8000) != 0
      && (((unsigned __int8)config - 116) & 7) >= *(_BYTE *)(((unsigned __int64)&config->is_target >> 3) + 0x7FFF8000) )
    {
      __asan_report_load1(&config->is_target);
    }
    common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(v14, config->is_target);
    common::milog::MiLogStream::create(
      &v75,
      &common::milog::MiLogDefault::default_log_obj_,
      1u,
      "./src/scene/scene.cpp",
      "handleAbilityLuaTriggerEvent",
      5468);
    common::tools::StringStream<common::tools::FixedBuffer<4096>>::str[abi:cxx11](
      &val,
      (common::tools::StringStream<common::tools::FixedBuffer<4096> > *const)(v3 + 128));
    common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(&v75, &val);
    std::string::~string(&val);
    common::milog::MiLogStream::~MiLogStream(&v75);
    if ( std::operator!=<Player>(&param->from_player_ptr, 0LL) )
    {
      v15 = std::__shared_ptr_access<Player,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Player,(__gnu_cxx::_Lock_policy)2,false,false> *const)&param->from_player_ptr);
      common::tools::StringStream<common::tools::FixedBuffer<4096>>::str[abi:cxx11](
        &val,
        (common::tools::StringStream<common::tools::FixedBuffer<4096> > *const)(v3 + 128));
      Player::notifyGMServerLog(v15, SERVER_LOG_NONE, LOG_LEVEL_INFO_0, &val);
      std::string::~string(&val);
    }
    v16 = -1;
    std::string::~string((void *)(v3 + 224));
    common::tools::StringStream<common::tools::FixedBuffer<4096>>::~StringStream((common::tools::StringStream<common::tools::FixedBuffer<4096> > *const)(v3 + 128));
  }
  else
  {
    ret = 0;
    param1 = 0;
    param2 = 0;
    param3 = 0;
    if ( !std::operator!=<ActorAbility>(0LL, &param->ability_ptr) )
      goto LABEL_29;
    if ( *(_BYTE *)(((unsigned __int64)&config->param_num >> 3) + 0x7FFF8000) != 0
      && *(_BYTE *)(((unsigned __int64)&config->param_num >> 3) + 0x7FFF8000) <= 3 )
    {
      __asan_report_load4(&config->param_num);
    }
    if ( config->param_num )
      v17 = 1;
    else
LABEL_29:
      v17 = 0;
    if ( v17 )
    {
      v18 = std::__shared_ptr_access<ActorAbility,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<ActorAbility,(__gnu_cxx::_Lock_policy)2,false,false> *const)param);
      std::shared_ptr<DieCreatureRecord>::shared_ptr((std::shared_ptr<DieCreatureRecord> *const)(v3 + 128), 0LL);
      std::shared_ptr<Creature>::shared_ptr((std::shared_ptr<Creature> *const)(v3 + 96), 0LL);
      param1 = (int)ActorAbility::evaluate(
                      v18,
                      &config->param1,
                      (CreaturePtr *)(v3 + 96),
                      (DieCreatureRecordPtr *)(v3 + 128));
      std::shared_ptr<Creature>::~shared_ptr((std::shared_ptr<Creature> *const)(v3 + 96));
      std::shared_ptr<DieCreatureRecord>::~shared_ptr((std::shared_ptr<DieCreatureRecord> *const)(v3 + 128));
      v19 = std::__shared_ptr_access<ActorAbility,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<ActorAbility,(__gnu_cxx::_Lock_policy)2,false,false> *const)param);
      std::shared_ptr<DieCreatureRecord>::shared_ptr((std::shared_ptr<DieCreatureRecord> *const)(v3 + 128), 0LL);
      std::shared_ptr<Creature>::shared_ptr((std::shared_ptr<Creature> *const)(v3 + 96), 0LL);
      param2 = (int)ActorAbility::evaluate(
                      v19,
                      &config->param2,
                      (CreaturePtr *)(v3 + 96),
                      (DieCreatureRecordPtr *)(v3 + 128));
      std::shared_ptr<Creature>::~shared_ptr((std::shared_ptr<Creature> *const)(v3 + 96));
      std::shared_ptr<DieCreatureRecord>::~shared_ptr((std::shared_ptr<DieCreatureRecord> *const)(v3 + 128));
      v20 = std::__shared_ptr_access<ActorAbility,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<ActorAbility,(__gnu_cxx::_Lock_policy)2,false,false> *const)param);
      std::shared_ptr<DieCreatureRecord>::shared_ptr((std::shared_ptr<DieCreatureRecord> *const)(v3 + 128), 0LL);
      std::shared_ptr<Creature>::shared_ptr((std::shared_ptr<Creature> *const)(v3 + 96), 0LL);
      param3 = (int)ActorAbility::evaluate(
                      v20,
                      &config->param3,
                      (CreaturePtr *)(v3 + 96),
                      (DieCreatureRecordPtr *)(v3 + 128));
      std::shared_ptr<Creature>::~shared_ptr((std::shared_ptr<Creature> *const)(v3 + 96));
      std::shared_ptr<DieCreatureRecord>::~shared_ptr((std::shared_ptr<DieCreatureRecord> *const)(v3 + 128));
    }
    EventUtil::createEvent((data::EventType)(v3 + 64));
    if ( std::operator!=<Event>(0LL, (const std::shared_ptr<Event> *)(v3 + 64)) )
    {
      v21 = std::__shared_ptr_access<Event,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Event,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 64));
      std::string::operator=(&v21->source_name, &config->source_name);
      v22 = 0LL;
      if ( std::operator==<Creature>(&param->source_ptr, 0LL) )
      {
        EntityId = 0;
      }
      else
      {
        v24 = std::__shared_ptr_access<Creature,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Creature,(__gnu_cxx::_Lock_policy)2,false,false> *const)&param->source_ptr);
        EntityId = Entity::getEntityId((const Entity *const)v24);
      }
      v25 = std::__shared_ptr_access<Event,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Event,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 64));
      v26 = *(_BYTE *)(((unsigned __int64)&v25->source_entity_id >> 3) + 0x7FFF8000);
      if ( v26 != 0 && (char)((((_BYTE)v25 + 4) & 7) + 3) >= v26 )
      {
        LOBYTE(v22) = v26 != 0;
        __asan_report_store4(&v25->source_entity_id, v22, (_BYTE)v25);
      }
      v25->source_entity_id = EntityId;
      v27 = 0LL;
      if ( std::operator==<Creature>(&param->target_ptr, 0LL) )
      {
        v28 = 0;
      }
      else
      {
        v29 = std::__shared_ptr_access<Creature,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Creature,(__gnu_cxx::_Lock_policy)2,false,false> *const)&param->target_ptr);
        v28 = Entity::getEntityId((const Entity *const)v29);
      }
      v30 = (__int64)std::__shared_ptr_access<Event,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Event,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 64));
      v31 = *(_BYTE *)(((unsigned __int64)(v30 + 40) >> 3) + 0x7FFF8000);
      LOBYTE(v27) = v31 != 0;
      v32 = v31 != 0 && v31 <= 3;
      if ( v32 )
        v30 = __asan_report_store4(v30 + 40, v27, v32);
      *(_DWORD *)(v30 + 40) = v28;
      v33 = std::__shared_ptr_access<Event,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Event,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 64));
      v34 = *(_BYTE *)(((unsigned __int64)&v33->param1 >> 3) + 0x7FFF8000);
      if ( v34 != 0 && (char)((((_BYTE)v33 + 44) & 7) + 3) >= v34 )
      {
        LOBYTE(v27) = v34 != 0;
        __asan_report_store4(&v33->param1, v27, (_BYTE)v33);
      }
      v33->param1 = param1;
      v35 = (__int64)std::__shared_ptr_access<Event,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Event,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 64));
      v36 = *(_BYTE *)(((unsigned __int64)(v35 + 48) >> 3) + 0x7FFF8000);
      LOBYTE(v27) = v36 != 0;
      v37 = v36 != 0 && v36 <= 3;
      if ( v37 )
        v35 = __asan_report_store4(v35 + 48, v27, v37);
      *(_DWORD *)(v35 + 48) = param2;
      v38 = std::__shared_ptr_access<Event,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Event,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 64));
      v39 = *(_BYTE *)(((unsigned __int64)&v38->param3 >> 3) + 0x7FFF8000);
      if ( v39 != 0 && (char)((((_BYTE)v38 + 52) & 7) + 3) >= v39 )
      {
        LOBYTE(v27) = v39 != 0;
        __asan_report_store4(&v38->param3, v27, (_BYTE)v38);
      }
      v38->param3 = param3;
    }
    if ( std::vector<std::pair<std::shared_ptr<LuaScript>,ScriptContext>>::size((const std::vector<std::pair<std::shared_ptr<LuaScript>,ScriptContext>> *const)(v3 + 160)) > 0x10 )
    {
      common::tools::StringStream<common::tools::FixedBuffer<4096>>::StringStream((common::tools::StringStream<common::tools::FixedBuffer<4096> > *const)(v3 + 128));
      v40 = 0;
      if ( std::operator==<Creature>((const std::shared_ptr<Creature> *)(v3 + 32), 0LL) )
      {
        std::allocator<char>::allocator(&__a);
        v40 = 1;
        std::string::basic_string<std::allocator<char>>((std::string *const)(v3 + 224), byte_2586B880, &__a);
      }
      else
      {
        v41 = (unsigned __int64)std::__shared_ptr_access<Creature,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Creature,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 32));
        if ( *(_BYTE *)((v41 >> 3) + 0x7FFF8000) )
          v41 = __asan_report_load8();
        v42 = *(void (__fastcall ***)(__int64, unsigned __int64))v41;
        if ( *(_BYTE *)((*(_QWORD *)v41 >> 3) + 0x7FFF8000LL) )
          v41 = __asan_report_load8();
        (*v42)(v3 + 224, v41);
      }
      if ( v40 )
        std::allocator<char>::~allocator(&__a);
      v43 = common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(
              (common::tools::StringStream<common::tools::FixedBuffer<4096> > *const)(v3 + 128),
              aAbilitylua_3);
      v44 = common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(v43, &config->source_name);
      v45 = common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(v44, ", src:");
      v46 = common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(
              v45,
              (const std::string *)(v3 + 224));
      v47 = common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(v46, asc_258E2080);
      if ( *(_BYTE *)(((unsigned __int64)&config->is_target >> 3) + 0x7FFF8000) != 0
        && (((unsigned __int8)config - 116) & 7) >= *(_BYTE *)(((unsigned __int64)&config->is_target >> 3) + 0x7FFF8000) )
      {
        __asan_report_load1(&config->is_target);
      }
      v48 = common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(v47, config->is_target);
      v49 = common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(v48, asc_258E2160);
      v50 = std::vector<std::pair<std::shared_ptr<LuaScript>,ScriptContext>>::size((const std::vector<std::pair<std::shared_ptr<LuaScript>,ScriptContext>> *const)(v3 + 160));
      common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(v49, v50);
      common::milog::MiLogStream::create(
        &v75,
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/scene/scene.cpp",
        "handleAbilityLuaTriggerEvent",
        5509);
      common::tools::StringStream<common::tools::FixedBuffer<4096>>::str[abi:cxx11](
        &val,
        (common::tools::StringStream<common::tools::FixedBuffer<4096> > *const)(v3 + 128));
      common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(&v75, &val);
      std::string::~string(&val);
      common::milog::MiLogStream::~MiLogStream(&v75);
      std::string::~string((void *)(v3 + 224));
      common::tools::StringStream<common::tools::FixedBuffer<4096>>::~StringStream((common::tools::StringStream<common::tools::FixedBuffer<4096> > *const)(v3 + 128));
    }
    __for_range = (std::vector<std::pair<std::shared_ptr<LuaScript>,ScriptContext>> *)(v3 + 160);
    __for_begin._M_current = std::vector<std::pair<std::shared_ptr<LuaScript>,ScriptContext>>::begin((std::vector<std::pair<std::shared_ptr<LuaScript>,ScriptContext>> *const)(v3 + 160))._M_current;
    __for_end._M_current = std::vector<std::pair<std::shared_ptr<LuaScript>,ScriptContext>>::end(__for_range)._M_current;
    while ( __gnu_cxx::operator!=<std::pair<std::shared_ptr<LuaScript>,ScriptContext> *,std::vector<std::pair<std::shared_ptr<LuaScript>,ScriptContext>>>(
              &__for_begin,
              &__for_end) )
    {
      __in = __gnu_cxx::__normal_iterator<std::pair<std::shared_ptr<LuaScript>,ScriptContext> *,std::vector<std::pair<std::shared_ptr<LuaScript>,ScriptContext>>>::operator*(&__for_begin);
      lua_script_ptr = std::get<0ul,std::shared_ptr<LuaScript>,ScriptContext>(__in);
      ctx = std::get<1ul,std::shared_ptr<LuaScript>,ScriptContext>(__in);
      if ( std::operator==<LuaScript>(lua_script_ptr, 0LL) )
      {
        common::tools::StringStream<common::tools::FixedBuffer<4096>>::StringStream((common::tools::StringStream<common::tools::FixedBuffer<4096> > *const)(v3 + 96));
        v51 = 0;
        if ( std::operator==<Creature>((const std::shared_ptr<Creature> *)(v3 + 32), 0LL) )
        {
          std::allocator<char>::allocator(&__a);
          v51 = 1;
          std::string::basic_string<std::allocator<char>>((std::string *const)(v3 + 224), byte_2586B880, &__a);
        }
        else
        {
          v52 = (unsigned __int64)std::__shared_ptr_access<Creature,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Creature,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 32));
          if ( *(_BYTE *)((v52 >> 3) + 0x7FFF8000) )
            v52 = __asan_report_load8();
          v53 = *(void (__fastcall ***)(__int64, unsigned __int64))v52;
          if ( *(_BYTE *)((*(_QWORD *)v52 >> 3) + 0x7FFF8000LL) )
            v52 = __asan_report_load8();
          (*v53)(v3 + 224, v52);
        }
        if ( v51 )
          std::allocator<char>::~allocator(&__a);
        v54 = common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(
                (common::tools::StringStream<common::tools::FixedBuffer<4096> > *const)(v3 + 96),
                aAbilitylua_2);
        v55 = common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(v54, &config->source_name);
        v56 = common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(v55, ", src:");
        v57 = common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(
                v56,
                (const std::string *)(v3 + 224));
        v58 = common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(v57, asc_258E2080);
        if ( *(_BYTE *)(((unsigned __int64)&config->is_target >> 3) + 0x7FFF8000) != 0
          && (((unsigned __int8)config - 116) & 7) >= *(_BYTE *)(((unsigned __int64)&config->is_target >> 3) + 0x7FFF8000) )
        {
          __asan_report_load1(&config->is_target);
        }
        common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(v58, config->is_target);
        common::milog::MiLogStream::create(
          &v75,
          &common::milog::MiLogDefault::default_log_obj_,
          3u,
          "./src/scene/scene.cpp",
          "handleAbilityLuaTriggerEvent",
          5520);
        common::tools::StringStream<common::tools::FixedBuffer<4096>>::str[abi:cxx11](
          &val,
          (common::tools::StringStream<common::tools::FixedBuffer<4096> > *const)(v3 + 96));
        common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(&v75, &val);
        std::string::~string(&val);
        common::milog::MiLogStream::~MiLogStream(&v75);
        if ( std::operator!=<Player>(&param->from_player_ptr, 0LL) )
        {
          v59 = std::__shared_ptr_access<Player,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Player,(__gnu_cxx::_Lock_policy)2,false,false> *const)&param->from_player_ptr);
          common::tools::StringStream<common::tools::FixedBuffer<4096>>::str[abi:cxx11](
            &val,
            (common::tools::StringStream<common::tools::FixedBuffer<4096> > *const)(v3 + 96));
          Player::notifyGMServerLog(v59, SERVER_LOG_NONE, LOG_LEVEL_ERROR_0, &val);
          std::string::~string(&val);
        }
        std::string::~string((void *)(v3 + 224));
        common::tools::StringStream<common::tools::FixedBuffer<4096>>::~StringStream((common::tools::StringStream<common::tools::FixedBuffer<4096> > *const)(v3 + 96));
      }
      else
      {
        std::weak_ptr<Group>::lock((const std::weak_ptr<Group> *const)(v3 + 128));
        if ( std::operator!=<Group>(0LL, (const std::shared_ptr<Group> *)(v3 + 128)) )
        {
          v60 = std::__shared_ptr_access<Group,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Group,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 128));
          Group::handleEvent(v60, (EventPtr *)(v3 + 64));
        }
        std::shared_ptr<Group>::~shared_ptr((std::shared_ptr<Group> *const)(v3 + 128));
      }
      __gnu_cxx::__normal_iterator<std::pair<std::shared_ptr<LuaScript>,ScriptContext> *,std::vector<std::pair<std::shared_ptr<LuaScript>,ScriptContext>>>::operator++(&__for_begin);
    }
    v16 = ret;
    std::shared_ptr<Event>::~shared_ptr((std::shared_ptr<Event> *const)(v3 + 64));
  }
  std::vector<std::pair<std::shared_ptr<LuaScript>,ScriptContext>>::~vector((std::vector<std::pair<std::shared_ptr<LuaScript>,ScriptContext>> *const)(v3 + 160));
  std::shared_ptr<Creature>::~shared_ptr((std::shared_ptr<Creature> *const)(v3 + 32));
  result = v16;
  if ( v77 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8010) = 0LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8018) = 0;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8020) = 0;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8020) = -168430091;
  }
  return result;
};

// Line 5542: range 00000000159A5E00-00000000159A6423
Scene *__fastcall Scene::addPlayTeamEntity(Scene *const this, Scene *player, const Player *gadget_config_id, int a4)
{
  unsigned __int64 v4; // r12
  __int64 v5; // rax
  _DWORD *v6; // r13
  Entity *v7; // r14
  uint32_t v8; // eax
  Entity *v9; // r14
  PlayTeamEntity *v10; // r14
  std::__shared_ptr_access<PlayTeamEntity,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v11; // r14
  uint32_t Uid; // eax
  uint32_t PeerId; // eax
  PlayTeamEntity *v14; // rax
  Entity *v15; // rax
  common::milog::MiLogStream *v16; // r14
  std::__shared_ptr_access<PlayTeamEntity,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v17; // rax
  PlayTeamEntity *v18; // rax
  common::milog::MiLogStream *v19; // r14
  std::__shared_ptr_access<PlayTeamEntity,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v20; // rax
  common::milog::MiLogStream *v21; // r14
  common::milog::MiLogStream *v22; // rax
  common::milog::MiLogStream *v23; // rax
  common::milog::MiLogStream *v24; // rax
  common::milog::MiLogStream *v25; // r14
  std::__shared_ptr_access<PlayTeamEntity,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v26; // rax
  std::unordered_set<unsigned int> *v27; // r14
  std::__shared_ptr_access<PlayTeamEntity,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v28; // rax
  std::unordered_map<unsigned int,std::unordered_set<unsigned int>>::key_type __k; // [rsp+28h] [rbp-C8h] BYREF
  unsigned int val; // [rsp+2Ch] [rbp-C4h] BYREF
  ScenePtr p_scene_ptr; // [rsp+30h] [rbp-C0h] BYREF
  common::milog::MiLogStream v35; // [rsp+40h] [rbp-B0h] BYREF
  char v36[144]; // [rsp+60h] [rbp-90h] BYREF

  v4 = (unsigned __int64)v36;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v5 = __asan_stack_malloc_1(96LL);
    if ( v5 )
      v4 = v5;
  }
  *(_QWORD *)v4 = 1102416563LL;
  *(_QWORD *)(v4 + 8) = "2 48 4 21 gadget_config_id:5541 64 16 20 team_entity_ptr:5543";
  *(_QWORD *)(v4 + 16) = Scene::addPlayTeamEntity;
  v6 = (_DWORD *)(v4 >> 3);
  v6[536862720] = -235802127;
  v6[536862721] = -234556943;
  v6[536862722] = -202178560;
  *(_DWORD *)(v4 + 48) = a4;
  common::tools::perf::make_shared<PlayTeamEntity>();
  if ( std::operator==<PlayTeamEntity>(0LL, (const std::shared_ptr<PlayTeamEntity> *)(v4 + 64)) )
  {
    common::milog::MiLogStream::create(
      &v35,
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/scene/scene.cpp",
      "addPlayTeamEntity",
      5546);
    common::milog::MiLogStream::operator<<<char [34],(char *[34])0>(
      &v35,
      (const char (*)[34])"make_shared<PlayTeamEntity> fails");
    common::milog::MiLogStream::~MiLogStream(&v35);
    std::shared_ptr<PlayTeamEntity>::shared_ptr((std::shared_ptr<PlayTeamEntity> *const)this, 0LL);
  }
  else
  {
    v7 = (Entity *)std::__shared_ptr_access<PlayTeamEntity,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<PlayTeamEntity,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 64));
    v8 = Scene::genNewEntityId(player, PROT_ENTITY_PLAY_TEAM_ENTITY);
    Entity::setEntityId(v7, v8);
    v9 = (Entity *)std::__shared_ptr_access<PlayTeamEntity,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<PlayTeamEntity,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 64));
    toThisPtr<Scene>((Scene *)&p_scene_ptr);
    Entity::setScene(v9, &p_scene_ptr);
    std::shared_ptr<Scene>::~shared_ptr(&p_scene_ptr);
    v10 = std::__shared_ptr_access<PlayTeamEntity,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<PlayTeamEntity,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 64));
    toThisPtr<Player>((Player *)&p_scene_ptr);
    PlayTeamEntity::setPlayer(v10, (PlayerPtr *)&p_scene_ptr);
    std::shared_ptr<Player>::~shared_ptr((std::shared_ptr<Player> *const)&p_scene_ptr);
    v11 = std::__shared_ptr_access<PlayTeamEntity,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<PlayTeamEntity,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 64));
    Uid = Player::getUid(gadget_config_id);
    PeerId = Scene::getPeerId(player, Uid);
    Creature::setAuthorityPeerId(v11, PeerId);
    v14 = std::__shared_ptr_access<PlayTeamEntity,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<PlayTeamEntity,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 64));
    PlayTeamEntity::setGadgetConfigId(v14, *(_DWORD *)(v4 + 48));
    v15 = (Entity *)std::__shared_ptr_access<PlayTeamEntity,(__gnu_cxx::_Lock_policy)2,false,false>::operator*((const std::__shared_ptr_access<PlayTeamEntity,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 64));
    if ( Scene::addGridlessEntity(player, v15) )
    {
      common::milog::MiLogStream::create(
        &v35,
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/scene/scene.cpp",
        "addPlayTeamEntity",
        5556);
      v16 = common::milog::MiLogStream::operator<<<char [24],(char *[24])0>(
              &v35,
              (const char (*)[24])"addGridlessEntity fails");
      v17 = std::__shared_ptr_access<PlayTeamEntity,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<PlayTeamEntity,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 64));
      val = Entity::getEntityId((const Entity *const)v17);
      common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v16, &val);
      common::milog::MiLogStream::~MiLogStream(&v35);
      std::shared_ptr<PlayTeamEntity>::shared_ptr((std::shared_ptr<PlayTeamEntity> *const)this, 0LL);
    }
    else
    {
      v18 = std::__shared_ptr_access<PlayTeamEntity,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<PlayTeamEntity,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 64));
      if ( PlayTeamEntity::initAbility(v18) )
      {
        common::milog::MiLogStream::create(
          &v35,
          &common::milog::MiLogDefault::default_log_obj_,
          3u,
          "./src/scene/scene.cpp",
          "addPlayTeamEntity",
          5561);
        v19 = common::milog::MiLogStream::operator<<<char [24],(char *[24])0>(
                &v35,
                (const char (*)[24])"addGridlessEntity fails");
        v20 = std::__shared_ptr_access<PlayTeamEntity,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<PlayTeamEntity,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 64));
        val = Entity::getEntityId((const Entity *const)v20);
        common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v19, &val);
        common::milog::MiLogStream::~MiLogStream(&v35);
        std::shared_ptr<PlayTeamEntity>::shared_ptr((std::shared_ptr<PlayTeamEntity> *const)this, 0LL);
      }
      else
      {
        common::milog::MiLogStream::create(
          &v35,
          &common::milog::MiLogDefault::default_log_obj_,
          1u,
          "./src/scene/scene.cpp",
          "addPlayTeamEntity",
          5564);
        v21 = common::milog::MiLogStream::operator<<<char [23],(char *[23])0>(
                &v35,
                (const char (*)[23])"addPlayTeamEntity uid:");
        __k = Player::getUid(gadget_config_id);
        v22 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v21, &__k);
        v23 = common::milog::MiLogStream::operator<<<char [19],(char *[19])0>(
                v22,
                (const char (*)[19])" gadget_config_id:");
        v24 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                v23,
                (const unsigned int *)(v4 + 48));
        v25 = common::milog::MiLogStream::operator<<<char [6],(char *[6])0>(v24, (const char (*)[6])" eid:");
        v26 = std::__shared_ptr_access<PlayTeamEntity,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<PlayTeamEntity,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 64));
        val = Entity::getEntityId((const Entity *const)v26);
        common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v25, &val);
        common::milog::MiLogStream::~MiLogStream(&v35);
        __k = Player::getUid(gadget_config_id);
        v27 = std::unordered_map<unsigned int,std::unordered_set<unsigned int>>::operator[](
                &player->play_team_entity_map_,
                &__k);
        v28 = std::__shared_ptr_access<PlayTeamEntity,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<PlayTeamEntity,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 64));
        val = Entity::getEntityId((const Entity *const)v28);
        std::unordered_set<unsigned int>::insert(v27, &val);
        std::shared_ptr<PlayTeamEntity>::shared_ptr(
          (std::shared_ptr<PlayTeamEntity> *const)this,
          (std::shared_ptr<PlayTeamEntity> *)(v4 + 64));
      }
    }
  }
  std::shared_ptr<PlayTeamEntity>::~shared_ptr((std::shared_ptr<PlayTeamEntity> *const)(v4 + 64));
  if ( v36 == (char *)v4 )
  {
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0LL;
    *(_DWORD *)((v4 >> 3) + 0x7FFF8008) = 0;
  }
  else
  {
    *(_QWORD *)v4 = 1172321806LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v4 >> 3) + 0x7FFF8008) = -168430091;
  }
  return this;
};

// Line 5571: range 00000000159A6424-00000000159A67B2
int32_t __cdecl Scene::delPlayTeamEntity(Scene *const this, Player *player)
{
  unsigned __int64 v2; // r12
  __int64 v3; // rax
  _DWORD *v4; // r13
  std::__detail::_Node_const_iterator<unsigned int,true,false>::reference v5; // rax
  _DWORD *v6; // rdx
  common::milog::MiLogStream *v7; // rax
  std::__detail::_Node_iterator_base<unsigned int,false>::__node_type *M_cur; // r14
  std::unordered_set<unsigned int>::const_iterator v9; // rax
  int32_t result; // eax
  std::allocator<unsigned int> __a; // [rsp+1Fh] [rbp-F1h] BYREF
  std::unordered_set<unsigned int>::const_iterator __for_begin; // [rsp+20h] [rbp-F0h] BYREF
  std::unordered_set<unsigned int>::const_iterator __for_end; // [rsp+28h] [rbp-E8h] BYREF
  const std::unordered_set<unsigned int> *entity_set; // [rsp+30h] [rbp-E0h]
  const std::unordered_set<unsigned int> *__for_range; // [rsp+38h] [rbp-D8h]
  common::milog::MiLogStream v16; // [rsp+40h] [rbp-D0h] BYREF
  char v17[176]; // [rsp+60h] [rbp-B0h] BYREF

  v2 = (unsigned __int64)v17;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_1(128LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "2 48 4 14 entity_id:5573 64 24 15 entity_vec:5580";
  *(_QWORD *)(v2 + 16) = Scene::delPlayTeamEntity;
  v4 = (_DWORD *)(v2 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = -234556943;
  v4[536862722] = -218103808;
  v4[536862723] = -202116109;
  *(_DWORD *)(v2 + 48) = Player::getUid(player);
  entity_set = std::unordered_map<unsigned int,std::unordered_set<unsigned int>>::operator[](
                 &this->play_team_entity_map_,
                 (std::unordered_map<unsigned int,std::unordered_set<unsigned int>>::key_type *)(v2 + 48));
  __for_range = entity_set;
  __for_begin._M_cur = std::unordered_set<unsigned int>::begin(entity_set)._M_cur;
  __for_end._M_cur = std::unordered_set<unsigned int>::end(entity_set)._M_cur;
  while ( std::__detail::operator!=<unsigned int,false>(&__for_begin, &__for_end) )
  {
    v5 = std::__detail::_Node_const_iterator<unsigned int,true,false>::operator*(&__for_begin);
    v6 = v5;
    if ( *(_BYTE *)(((unsigned __int64)v5 >> 3) + 0x7FFF8000) != 0
      && (char)(((unsigned __int8)v5 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)v5 >> 3) + 0x7FFF8000) )
    {
      __asan_report_load4(v5);
    }
    *(_DWORD *)(v2 + 48) = *v6;
    if ( (unsigned int)Scene::delGridlessEntity(this, *(_DWORD *)(v2 + 48)) )
    {
      common::milog::MiLogStream::create(
        &v16,
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/scene/scene.cpp",
        "delPlayTeamEntity",
        5577);
      v7 = common::milog::MiLogStream::operator<<<char [24],(char *[24])0>(
             &v16,
             (const char (*)[24])"delGridlessEntity fails");
      common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v7, (const unsigned int *)(v2 + 48));
      common::milog::MiLogStream::~MiLogStream(&v16);
    }
    std::__detail::_Node_const_iterator<unsigned int,true,false>::operator++(&__for_begin);
  }
  std::allocator<unsigned int>::allocator(&__a);
  M_cur = std::unordered_set<unsigned int>::end(entity_set)._M_cur;
  v9._M_cur = std::unordered_set<unsigned int>::begin(entity_set)._M_cur;
  std::vector<unsigned int>::vector<std::__detail::_Node_const_iterator<unsigned int,true,false>,void>(
    (std::vector<unsigned int> *const)(v2 + 64),
    v9,
    (std::__detail::_Node_const_iterator<unsigned int,true,false>)M_cur,
    &__a);
  std::allocator<unsigned int>::~allocator(&__a);
  Scene::notifyDelPlayTeamEntity(this, (const std::vector<unsigned int> *)(v2 + 64));
  *(_DWORD *)(v2 + 48) = Player::getUid(player);
  std::unordered_map<unsigned int,std::unordered_set<unsigned int>>::erase(
    &this->play_team_entity_map_,
    (const std::unordered_map<unsigned int,std::unordered_set<unsigned int>>::key_type *)(v2 + 48));
  std::vector<unsigned int>::~vector((std::vector<unsigned int> *const)(v2 + 64));
  result = 0;
  if ( v17 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 5588: range 00000000159A67B4-00000000159A6B3A
__int64 __fastcall Scene::delPlayTeamEntity(
        Scene *const this,
        uint32_t uid,
        const std::__shared_ptr_access<Entity,(__gnu_cxx::_Lock_policy)2,false,false> *entity_ptr)
{
  unsigned __int64 v3; // rbx
  __int64 v4; // rax
  _DWORD *v5; // r13
  __int64 result; // rax
  std::__shared_ptr_access<Entity,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v7; // rax
  std::unordered_set<unsigned int> *v8; // rax
  common::milog::MiLogStream *v9; // rax
  common::milog::MiLogStream *v10; // rax
  common::milog::MiLogStream *v11; // rax
  common::milog::MiLogStream *v12; // rax
  std::allocator<unsigned int> __a; // [rsp+2Bh] [rbp-D5h] BYREF
  std::initializer_list<unsigned int> __l; // [rsp+2Ch] [rbp-D4h] BYREF
  common::milog::MiLogStream v16; // [rsp+50h] [rbp-B0h] BYREF
  char v17[144]; // [rsp+70h] [rbp-90h] BYREF

  v3 = (unsigned __int64)v17;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_1(96LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "2 48 4 14 entity_id:5593 64 4 8 uid:5587";
  *(_QWORD *)(v3 + 16) = Scene::delPlayTeamEntity;
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = -234556943;
  v5[536862722] = -202116348;
  *(_DWORD *)(v3 + 64) = uid;
  if ( std::operator==<Entity>(0LL, (const std::shared_ptr<Entity> *)entity_ptr) )
  {
    result = 0xFFFFFFFFLL;
  }
  else
  {
    v7 = std::__shared_ptr_access<Entity,(__gnu_cxx::_Lock_policy)2,false,false>::operator->(entity_ptr);
    *(_DWORD *)(v3 + 48) = Entity::getEntityId(v7);
    v8 = std::unordered_map<unsigned int,std::unordered_set<unsigned int>>::operator[](
           &this->play_team_entity_map_,
           (const std::unordered_map<unsigned int,std::unordered_set<unsigned int>>::key_type *)(v3 + 64));
    std::unordered_set<unsigned int>::erase(v8, (const std::unordered_set<unsigned int>::key_type *)(v3 + 48));
    if ( (unsigned int)Scene::delGridlessEntity(this, *(_DWORD *)(v3 + 48)) )
    {
      common::milog::MiLogStream::create(
        &v16,
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/scene/scene.cpp",
        "delPlayTeamEntity",
        5597);
      v9 = common::milog::MiLogStream::operator<<<char [24],(char *[24])0>(
             &v16,
             (const char (*)[24])"delGridlessEntity fails");
      common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v9, (const unsigned int *)(v3 + 48));
      common::milog::MiLogStream::~MiLogStream(&v16);
    }
    LODWORD(__l._M_array) = *(_DWORD *)(v3 + 48);
    std::allocator<unsigned int>::allocator(&__a);
    std::vector<unsigned int>::vector(
      (std::vector<unsigned int> *const)((char *)&__l._M_array + 4),
      (std::initializer_list<unsigned int>)__PAIR128__(1LL, &__l),
      &__a);
    Scene::notifyDelPlayTeamEntity(this, (const std::vector<unsigned int> *)((char *)&__l._M_array + 4));
    std::vector<unsigned int>::~vector((std::vector<unsigned int> *const)((char *)&__l._M_array + 4));
    std::allocator<unsigned int>::~allocator(&__a);
    common::milog::MiLogStream::create(
      &v16,
      &common::milog::MiLogDefault::default_log_obj_,
      1u,
      "./src/scene/scene.cpp",
      "delPlayTeamEntity",
      5601);
    v10 = common::milog::MiLogStream::operator<<<char [23],(char *[23])0>(
            &v16,
            (const char (*)[23])"delPlayTeamEntity uid:");
    v11 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v10, (const unsigned int *)(v3 + 64));
    v12 = common::milog::MiLogStream::operator<<<char [6],(char *[6])0>(v11, (const char (*)[6])" eid:");
    common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v12, (const unsigned int *)(v3 + 48));
    common::milog::MiLogStream::~MiLogStream(&v16);
    result = 0LL;
  }
  if ( v17 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8008) = 0;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8008) = -168430091;
  }
  return result;
};

// Line 5606: range 00000000159A6B3C-00000000159A6F3E
void __cdecl Scene::notifyAllPlayTeamEntity(Scene *const this)
{
  unsigned __int64 v1; // r13
  __int64 v2; // rax
  _DWORD *v3; // r12
  std::__detail::_Node_const_iterator<unsigned int,true,false>::reference v4; // rax
  _DWORD *v5; // rdx
  PlayTeamEntity *v6; // r14
  proto::PlayTeamEntityInfo *v7; // rax
  uint32_t SceneId; // eax
  std::unordered_map<unsigned int,std::unordered_set<unsigned int>>::iterator __for_begin; // [rsp+10h] [rbp-140h] BYREF
  std::unordered_map<unsigned int,std::unordered_set<unsigned int>>::iterator __for_end; // [rsp+18h] [rbp-138h] BYREF
  std::unordered_set<unsigned int>::const_iterator __for_begin_0; // [rsp+20h] [rbp-130h] BYREF
  std::unordered_set<unsigned int>::const_iterator __for_end_0; // [rsp+28h] [rbp-128h] BYREF
  std::__detail::_Node_iterator_base<std::pair<unsigned int const,std::shared_ptr<Entity> >,false> __y; // [rsp+30h] [rbp-120h] BYREF
  std::unordered_map<unsigned int,std::unordered_set<unsigned int>> *__for_range; // [rsp+38h] [rbp-118h]
  const std::pair<unsigned int const,std::unordered_set<unsigned int> > *v15; // [rsp+40h] [rbp-110h]
  std::tuple_element<0,const std::pair<unsigned int const,std::unordered_set<unsigned int> > >::type *_; // [rsp+48h] [rbp-108h]
  std::tuple_element<1,const std::pair<unsigned int const,std::unordered_set<unsigned int> > >::type *entity_id_vec; // [rsp+50h] [rbp-100h]
  const std::unordered_set<unsigned int> *__for_range_0; // [rsp+58h] [rbp-F8h]
  char v19[240]; // [rsp+60h] [rbp-F0h] BYREF

  v1 = (unsigned __int64)v19;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_2(192LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "4 32 4 14 entity_id:5610 48 8 9 iter:5612 80 16 15 entity_ptr:5615 112 48 11 notify:5607";
  *(_QWORD *)(v1 + 16) = Scene::notifyAllPlayTeamEntity;
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = 61956;
  v3[536862721] = -234881024;
  v3[536862722] = 62194;
  v3[536862723] = 62194;
  v3[536862725] = -202116109;
  proto::SyncScenePlayTeamEntityNotify::SyncScenePlayTeamEntityNotify((proto::SyncScenePlayTeamEntityNotify *const)(v1 + 112));
  __for_range = &this->play_team_entity_map_;
  __for_begin._M_cur = std::unordered_map<unsigned int,std::unordered_set<unsigned int>>::begin(&this->play_team_entity_map_)._M_cur;
  __for_end._M_cur = std::unordered_map<unsigned int,std::unordered_set<unsigned int>>::end(&this->play_team_entity_map_)._M_cur;
  while ( std::__detail::operator!=<std::pair<unsigned int const,std::unordered_set<unsigned int>>,false>(
            &__for_begin,
            &__for_end) )
  {
    v15 = std::__detail::_Node_iterator<std::pair<unsigned int const,std::unordered_set<unsigned int>>,false,false>::operator*(&__for_begin);
    _ = std::get<0ul,unsigned int const,std::unordered_set<unsigned int>>(v15);
    entity_id_vec = (std::tuple_element<1,const std::pair<unsigned int const,std::unordered_set<unsigned int> > >::type *)std::get<1ul,unsigned int const,std::unordered_set<unsigned int>>(v15);
    __for_range_0 = entity_id_vec;
    __for_begin_0._M_cur = std::unordered_set<unsigned int>::begin(entity_id_vec)._M_cur;
    __for_end_0._M_cur = std::unordered_set<unsigned int>::end(__for_range_0)._M_cur;
    while ( std::__detail::operator!=<unsigned int,false>(&__for_begin_0, &__for_end_0) )
    {
      v4 = std::__detail::_Node_const_iterator<unsigned int,true,false>::operator*(&__for_begin_0);
      v5 = v4;
      if ( *(_BYTE *)(((unsigned __int64)v4 >> 3) + 0x7FFF8000) != 0
        && (char)(((unsigned __int8)v4 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)v4 >> 3) + 0x7FFF8000) )
      {
        __asan_report_load4(v4);
      }
      *(_DWORD *)(v1 + 32) = *v5;
      *(std::unordered_map<unsigned int,std::shared_ptr<Entity>>::iterator *)(v1 + 48) = std::unordered_map<unsigned int,std::shared_ptr<Entity>>::find(
                                                                                           &this->gridless_entity_map_,
                                                                                           (const std::unordered_map<unsigned int,std::shared_ptr<Entity>>::key_type *)(v1 + 32));
      __y._M_cur = std::unordered_map<unsigned int,std::shared_ptr<Entity>>::end(&this->gridless_entity_map_)._M_cur;
      if ( std::__detail::operator!=<std::pair<unsigned int const,std::shared_ptr<Entity>>,false>(
             (const std::__detail::_Node_iterator_base<std::pair<unsigned int const,std::shared_ptr<Entity> >,false> *)(v1 + 48),
             &__y) )
      {
        std::__detail::_Node_iterator<std::pair<unsigned int const,std::shared_ptr<Entity>>,false,false>::operator->((const std::__detail::_Node_iterator<std::pair<unsigned int const,std::shared_ptr<Entity> >,false,false> *const)(v1 + 48));
        std::dynamic_pointer_cast<PlayTeamEntity,Entity>((const std::shared_ptr<Entity> *)(v1 + 80));
        if ( std::operator!=<PlayTeamEntity>((const std::shared_ptr<PlayTeamEntity> *)(v1 + 80), 0LL) )
        {
          v6 = std::__shared_ptr_access<PlayTeamEntity,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<PlayTeamEntity,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v1 + 80));
          v7 = proto::SyncScenePlayTeamEntityNotify::add_entity_info_list((proto::SyncScenePlayTeamEntityNotify *const)(v1 + 112));
          PlayTeamEntity::toClient(v6, v7);
        }
        std::shared_ptr<PlayTeamEntity>::~shared_ptr((std::shared_ptr<PlayTeamEntity> *const)(v1 + 80));
      }
      std::__detail::_Node_const_iterator<unsigned int,true,false>::operator++(&__for_begin_0);
    }
    std::__detail::_Node_iterator<std::pair<unsigned int const,std::unordered_set<unsigned int>>,false,false>::operator++(&__for_begin);
  }
  SceneId = Scene::getSceneId(this);
  proto::SyncScenePlayTeamEntityNotify::set_scene_id((proto::SyncScenePlayTeamEntityNotify *const)(v1 + 112), SceneId);
  Scene::notifyAllPlayer<proto::SyncScenePlayTeamEntityNotify>(
    this,
    (proto::SyncScenePlayTeamEntityNotify *)(v1 + 112),
    0);
  proto::SyncScenePlayTeamEntityNotify::~SyncScenePlayTeamEntityNotify((proto::SyncScenePlayTeamEntityNotify *const)(v1 + 112));
  if ( v19 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0LL;
    *(_DWORD *)((v1 >> 3) + 0x7FFF8014) = 0;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
  }
};

// Line 5629: range 00000000159A6F40-00000000159A7225
void __cdecl Scene::notifyPlayTeamEntity(Scene *const this, const std::vector<unsigned int> *entity_id_vec)
{
  unsigned __int64 v2; // r13
  __int64 v3; // rax
  _DWORD *v4; // r12
  __gnu_cxx::__normal_iterator<unsigned int const*,std::vector<unsigned int> >::reference v5; // rax
  PlayTeamEntity *v6; // r14
  proto::PlayTeamEntityInfo *v7; // rax
  uint32_t SceneId; // eax
  std::vector<unsigned int>::const_iterator __for_begin; // [rsp+18h] [rbp-E8h] BYREF
  std::vector<unsigned int>::const_iterator __for_end; // [rsp+20h] [rbp-E0h] BYREF
  const std::vector<unsigned int> *__for_range; // [rsp+28h] [rbp-D8h]
  char v12[208]; // [rsp+30h] [rbp-D0h] BYREF

  v2 = (unsigned __int64)v12;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_2(160LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "2 48 16 20 team_entity_ptr:5637 80 48 11 notify:5634";
  *(_QWORD *)(v2 + 16) = Scene::notifyPlayTeamEntity;
  v4 = (_DWORD *)(v2 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = 61937;
  v4[536862722] = 62194;
  v4[536862724] = -202116109;
  if ( !std::vector<unsigned int>::empty(entity_id_vec) )
  {
    proto::SyncScenePlayTeamEntityNotify::SyncScenePlayTeamEntityNotify((proto::SyncScenePlayTeamEntityNotify *const)(v2 + 80));
    __for_range = entity_id_vec;
    __for_begin._M_current = std::vector<unsigned int>::begin(entity_id_vec)._M_current;
    __for_end._M_current = std::vector<unsigned int>::end(entity_id_vec)._M_current;
    while ( __gnu_cxx::operator!=<unsigned int const*,std::vector<unsigned int>>(&__for_begin, &__for_end) )
    {
      v5 = __gnu_cxx::__normal_iterator<unsigned int const*,std::vector<unsigned int>>::operator*(&__for_begin);
      if ( *(_BYTE *)(((unsigned __int64)v5 >> 3) + 0x7FFF8000) != 0
        && (char)(((unsigned __int8)v5 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)v5 >> 3) + 0x7FFF8000) )
      {
        __asan_report_load4(v5);
      }
      Scene::findEntity<PlayTeamEntity>((const Scene *const)(v2 + 48), (uint32_t)this);
      if ( std::operator!=<PlayTeamEntity>((const std::shared_ptr<PlayTeamEntity> *)(v2 + 48), 0LL) )
      {
        v6 = std::__shared_ptr_access<PlayTeamEntity,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<PlayTeamEntity,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 48));
        v7 = proto::SyncScenePlayTeamEntityNotify::add_entity_info_list((proto::SyncScenePlayTeamEntityNotify *const)(v2 + 80));
        PlayTeamEntity::toClient(v6, v7);
      }
      std::shared_ptr<PlayTeamEntity>::~shared_ptr((std::shared_ptr<PlayTeamEntity> *const)(v2 + 48));
      __gnu_cxx::__normal_iterator<unsigned int const*,std::vector<unsigned int>>::operator++(&__for_begin);
    }
    SceneId = Scene::getSceneId(this);
    proto::SyncScenePlayTeamEntityNotify::set_scene_id((proto::SyncScenePlayTeamEntityNotify *const)(v2 + 80), SceneId);
    Scene::notifyAllPlayer<proto::SyncScenePlayTeamEntityNotify>(
      this,
      (proto::SyncScenePlayTeamEntityNotify *)(v2 + 80),
      0);
    proto::SyncScenePlayTeamEntityNotify::~SyncScenePlayTeamEntityNotify((proto::SyncScenePlayTeamEntityNotify *const)(v2 + 80));
  }
  if ( v12 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8008) = 0;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8010) = 0;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8010) = -168430091;
  }
};

// Line 5649: range 00000000159A7226-00000000159A745B
void __cdecl Scene::notifyDelPlayTeamEntity(Scene *const this, const std::vector<unsigned int> *entity_id_vec)
{
  unsigned __int64 v2; // rbx
  __int64 v3; // rax
  _DWORD *v4; // r12
  unsigned int *v5; // rax
  google::protobuf::uint32 *v6; // rdx
  uint32_t SceneId; // eax
  std::vector<unsigned int>::const_iterator __for_begin; // [rsp+18h] [rbp-B8h] BYREF
  std::vector<unsigned int>::const_iterator __for_end; // [rsp+20h] [rbp-B0h] BYREF
  const std::vector<unsigned int> *__for_range; // [rsp+28h] [rbp-A8h]
  char v11[160]; // [rsp+30h] [rbp-A0h] BYREF

  v2 = (unsigned __int64)v11;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_1(128LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "1 48 48 11 notify:5650";
  *(_QWORD *)(v2 + 16) = Scene::notifyDelPlayTeamEntity;
  v4 = (_DWORD *)(v2 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = 61937;
  v4[536862723] = -202116109;
  proto::DelScenePlayTeamEntityNotify::DelScenePlayTeamEntityNotify((proto::DelScenePlayTeamEntityNotify *const)(v2 + 48));
  __for_range = entity_id_vec;
  __for_begin._M_current = std::vector<unsigned int>::begin(entity_id_vec)._M_current;
  __for_end._M_current = std::vector<unsigned int>::end(entity_id_vec)._M_current;
  while ( __gnu_cxx::operator!=<unsigned int const*,std::vector<unsigned int>>(&__for_begin, &__for_end) )
  {
    v5 = (unsigned int *)__gnu_cxx::__normal_iterator<unsigned int const*,std::vector<unsigned int>>::operator*(&__for_begin);
    v6 = v5;
    if ( *(_BYTE *)(((unsigned __int64)v5 >> 3) + 0x7FFF8000) != 0
      && (char)(((unsigned __int8)v5 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)v5 >> 3) + 0x7FFF8000) )
    {
      __asan_report_load4(v5);
    }
    proto::DelScenePlayTeamEntityNotify::add_del_entity_id_list(
      (proto::DelScenePlayTeamEntityNotify *const)(v2 + 48),
      *v6);
    __gnu_cxx::__normal_iterator<unsigned int const*,std::vector<unsigned int>>::operator++(&__for_begin);
  }
  SceneId = Scene::getSceneId(this);
  proto::DelScenePlayTeamEntityNotify::set_scene_id((proto::DelScenePlayTeamEntityNotify *const)(v2 + 48), SceneId);
  Scene::notifyAllPlayer<proto::DelScenePlayTeamEntityNotify>(this, (proto::DelScenePlayTeamEntityNotify *)(v2 + 48), 0);
  proto::DelScenePlayTeamEntityNotify::~DelScenePlayTeamEntityNotify((proto::DelScenePlayTeamEntityNotify *const)(v2 + 48));
  if ( v11 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF800C) = 0;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
};

// Line 5661: range 00000000159A745C-00000000159A7687
int32_t __cdecl Scene::createSceneEntity(Scene *const this)
{
  common::milog::MiLogStream *v1; // rdx
  common::milog::MiLogStream *v3; // rdx
  SceneEntity *v4; // rax
  std::__shared_ptr_access<SceneEntity,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v5; // rax
  const data::SceneExcelConfig *scene_config_ptr; // [rsp+18h] [rbp-38h]
  common::milog::MiLogStream v7; // [rsp+20h] [rbp-30h] BYREF

  if ( Scene::createSceneEntityWithoutInitConfig(this) )
  {
    common::milog::MiLogStream::create(
      &v7,
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/scene/scene.cpp",
      "createSceneEntity",
      5664);
    v1 = common::milog::MiLogStream::operator<<<char [24],(char *[24])0>(
           &v7,
           (const char (*)[24])"createSceneEntity fails");
    common::milog::MiLogStream::operator<<<Scene,(Scene*)0>(v1, this);
    common::milog::MiLogStream::~MiLogStream(&v7);
    return -1;
  }
  else if ( std::operator==<SceneEntity>(&this->scene_entity_ptr_, 0LL) )
  {
    common::milog::MiLogStream::create(
      &v7,
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/scene/scene.cpp",
      "createSceneEntity",
      5669);
    v3 = common::milog::MiLogStream::operator<<<char [24],(char *[24])0>(
           &v7,
           (const char (*)[24])"createSceneEntity fails");
    common::milog::MiLogStream::operator<<<Scene,(Scene*)0>(v3, this);
    common::milog::MiLogStream::~MiLogStream(&v7);
    return -1;
  }
  else
  {
    scene_config_ptr = Scene::getConfig(this);
    if ( scene_config_ptr )
    {
      if ( (unsigned __int8)std::string::empty(&scene_config_ptr->level_entity_config) != 1 )
      {
        v4 = std::__shared_ptr_access<SceneEntity,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<SceneEntity,(__gnu_cxx::_Lock_policy)2,false,false> *const)&this->scene_entity_ptr_);
        SceneEntity::addInitLevelConfig(v4, &scene_config_ptr->level_entity_config);
      }
      v5 = std::__shared_ptr_access<SceneEntity,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<SceneEntity,(__gnu_cxx::_Lock_policy)2,false,false> *const)&this->scene_entity_ptr_);
      Creature::calcProp(v5);
      return 0;
    }
    else
    {
      common::milog::MiLogStream::create(
        &v7,
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/scene/scene.cpp",
        "createSceneEntity",
        5675);
      common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(&v7, (const char (*)[16])"getConfig fails");
      common::milog::MiLogStream::~MiLogStream(&v7);
      return -1;
    }
  }
};

// Line 5687: range 00000000159A7688-00000000159A7771
int32_t __cdecl Scene::createSceneEntityWithoutInitConfig(Scene *const this)
{
  common::milog::MiLogStream *v1; // rdx
  std::shared_ptr<SceneEntity> __r; // [rsp+10h] [rbp-40h] BYREF
  common::milog::MiLogStream v4; // [rsp+20h] [rbp-30h] BYREF

  EntityMgr::createSceneEntity((Scene *)&__r);
  std::shared_ptr<SceneEntity>::operator=(&this->scene_entity_ptr_, &__r);
  std::shared_ptr<SceneEntity>::~shared_ptr(&__r);
  if ( !std::operator==<SceneEntity>(&this->scene_entity_ptr_, 0LL) )
    return 0;
  common::milog::MiLogStream::create(
    &v4,
    &common::milog::MiLogDefault::default_log_obj_,
    3u,
    "./src/scene/scene.cpp",
    "createSceneEntityWithoutInitConfig",
    5691);
  v1 = common::milog::MiLogStream::operator<<<char [24],(char *[24])0>(
         &v4,
         (const char (*)[24])"createSceneEntity fails");
  common::milog::MiLogStream::operator<<<Scene,(Scene*)0>(v1, this);
  common::milog::MiLogStream::~MiLogStream(&v4);
  return -1;
};

// Line 5699: range 00000000159A7772-00000000159A7DA2
void __fastcall Scene::addDieCreatureRecord(Scene *const this, Entity *creature, uint64_t now_ms)
{
  unsigned __int64 v3; // r13
  __int64 v4; // rax
  _DWORD *v5; // r12
  common::milog::MiLogStream *v6; // rbx
  void (__fastcall **vptr_DescribalBase)(std::string *, Scene *const); // rax
  common::milog::MiLogStream *v8; // rax
  common::milog::MiLogStream *v9; // rax
  common::milog::MiLogStream *v10; // rax
  AbilityComp *AbilityComp; // rax
  DieCreatureRecord *v12; // rcx
  DieCreatureRecord *v13; // rax
  std::pair<std::shared_ptr<DieCreatureRecord>,long unsigned int> *v14; // rax
  unsigned int value; // [rsp+2Ch] [rbp-184h] BYREF
  std::map<std::string,float>::iterator __for_begin; // [rsp+30h] [rbp-180h] BYREF
  std::map<std::string,float>::iterator __for_end; // [rsp+38h] [rbp-178h] BYREF
  std::map<std::string,float> *__for_range; // [rsp+40h] [rbp-170h]
  std::pair<const std::string,float> *__in; // [rsp+48h] [rbp-168h]
  std::tuple_element<0,std::pair<const std::string,float> >::type *k; // [rsp+50h] [rbp-160h]
  std::tuple_element<1,std::pair<const std::string,float> >::type *v; // [rsp+58h] [rbp-158h]
  std::pair<std::shared_ptr<DieCreatureRecord>,long unsigned int> __p; // [rsp+60h] [rbp-150h] BYREF
  common::milog::MiLogStream v24; // [rsp+80h] [rbp-130h] BYREF
  std::string val; // [rsp+A0h] [rbp-110h] BYREF
  char v26[240]; // [rsp+C0h] [rbp-F0h] BYREF

  v3 = (unsigned __int64)v26;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_2(192LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "3 48 8 11 now_ms:5698 80 16 15 record_ptr:5716 112 48 24 reaction_damage_map:5722";
  *(_QWORD *)(v3 + 16) = Scene::addDieCreatureRecord;
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = 61937;
  v5[536862721] = -234881024;
  v5[536862722] = 62194;
  v5[536862723] = 62194;
  v5[536862725] = -202116109;
  *(_QWORD *)(v3 + 48) = now_ms;
  if ( std::map<unsigned int,std::pair<std::shared_ptr<DieCreatureRecord>,unsigned long>>::size(&this->die_creature_record_map_) > 0x1F4 )
    Scene::clearDieCreatureRecord(this, *(_QWORD *)(v3 + 48));
  if ( std::map<unsigned int,std::pair<std::shared_ptr<DieCreatureRecord>,unsigned long>>::size(&this->die_creature_record_map_) <= 0x3E8 )
  {
    value = Entity::getEntityId(creature);
    if ( common::tools::MiscUtils::isContains<std::map<unsigned int,std::pair<std::shared_ptr<DieCreatureRecord>,unsigned long>>,unsigned int>(
           &this->die_creature_record_map_,
           &value) )
    {
      common::milog::MiLogStream::create(
        (common::milog::MiLogStream *)&val,
        &common::milog::MiLogDefault::default_log_obj_,
        1u,
        "./src/scene/scene.cpp",
        "addDieCreatureRecord",
        5713);
      v10 = common::milog::MiLogStream::operator<<<char [45],(char *[45])0>(
              (common::milog::MiLogStream *const)&val,
              (const char (*)[45])"duplicate die_creature_record_map, creature:");
      common::milog::MiLogStream::operator<<<Creature,(Creature*)0>(v10, (const Creature *)creature);
      common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)&val);
    }
    else
    {
      common::tools::perf::make_shared<DieCreatureRecord>();
      if ( !std::operator==<DieCreatureRecord>((const std::shared_ptr<DieCreatureRecord> *)(v3 + 80), 0LL) )
      {
        AbilityComp = Creature::getAbilityComp((Creature *const)creature);
        AbilityComp::getReactionDamageMap[abi:cxx11]((std::map<std::string,float> *)(v3 + 112), AbilityComp);
        __for_range = (std::map<std::string,float> *)(v3 + 112);
        __for_begin._M_node = std::map<std::string,float>::begin((std::map<std::string,float> *const)(v3 + 112))._M_node;
        __for_end._M_node = std::map<std::string,float>::end(__for_range)._M_node;
        while ( std::operator!=(&__for_begin, &__for_end) )
        {
          __in = std::_Rb_tree_iterator<std::pair<std::string const,float>>::operator*(&__for_begin);
          k = std::get<0ul,std::string const,float>(__in);
          v = std::get<1ul,std::string const,float>(__in);
          v12 = std::__shared_ptr_access<DieCreatureRecord,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<DieCreatureRecord,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 80));
          if ( *(_BYTE *)(((unsigned __int64)v >> 3) + 0x7FFF8000) != 0
            && (char)(((unsigned __int8)v & 7) + 3) >= *(_BYTE *)(((unsigned __int64)v >> 3) + 0x7FFF8000) )
          {
            __asan_report_load4(v);
          }
          DieCreatureRecord::setGlobalValue(v12, k, *v);
          std::_Rb_tree_iterator<std::pair<std::string const,float>>::operator++(&__for_begin);
        }
        v13 = std::__shared_ptr_access<DieCreatureRecord,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<DieCreatureRecord,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 80));
        if ( !DieCreatureRecord::isEmpty(v13) )
        {
          std::make_pair<std::shared_ptr<DieCreatureRecord> &,unsigned long &>(
            &__p,
            (std::shared_ptr<DieCreatureRecord> *)(v3 + 80),
            (unsigned __int64 *)(v3 + 48));
          value = Entity::getEntityId(creature);
          v14 = std::map<unsigned int,std::pair<std::shared_ptr<DieCreatureRecord>,unsigned long>>::operator[](
                  &this->die_creature_record_map_,
                  &value);
          std::pair<std::shared_ptr<DieCreatureRecord>,unsigned long>::operator=(v14, &__p);
          std::pair<std::shared_ptr<DieCreatureRecord>,unsigned long>::~pair(&__p);
        }
        std::map<std::string,float>::~map((std::map<std::string,float> *const)(v3 + 112));
      }
      std::shared_ptr<DieCreatureRecord>::~shared_ptr((std::shared_ptr<DieCreatureRecord> *const)(v3 + 80));
    }
  }
  else
  {
    common::milog::MiLogStream::create(
      &v24,
      &common::milog::MiLogDefault::default_log_obj_,
      1u,
      "./src/scene/scene.cpp",
      "addDieCreatureRecord",
      5708);
    v6 = common::milog::MiLogStream::operator<<<char [52],(char *[52])0>(
           &v24,
           (const char (*)[52])" try add more than 1000 die creature record. scene:");
    if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
      __asan_report_load8();
    vptr_DescribalBase = (void (__fastcall **)(std::string *, Scene *const))this->_vptr_DescribalBase;
    if ( *(_BYTE *)(((unsigned __int64)this->_vptr_DescribalBase >> 3) + 0x7FFF8000) )
      vptr_DescribalBase = (void (__fastcall **)(std::string *, Scene *const))__asan_report_load8();
    (*vptr_DescribalBase)(&val, this);
    v8 = common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v6, &val);
    v9 = common::milog::MiLogStream::operator<<<char [11],(char *[11])0>(v8, (const char (*)[11])" creature:");
    common::milog::MiLogStream::operator<<<Creature,(Creature*)0>(v9, (const Creature *)creature);
    std::string::~string(&val);
    common::milog::MiLogStream::~MiLogStream(&v24);
  }
  if ( v26 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8014) = 0;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
  }
};

// Line 5735: range 00000000159A7DA4-00000000159A826B
void __fastcall Scene::tryUpdateDieCreatureRecord(
        Scene *const this,
        uint32_t entity_id,
        const std::string *key,
        float value,
        uint64_t now_ms)
{
  unsigned __int64 v5; // r13
  __int64 v6; // rax
  _DWORD *v7; // r12
  common::milog::MiLogStream *v8; // r14
  void (__fastcall **vptr_DescribalBase)(std::string *, Scene *const); // rax
  common::milog::MiLogStream *v10; // rax
  common::milog::MiLogStream *v11; // rax
  std::pair<std::shared_ptr<DieCreatureRecord>,long unsigned int> *v12; // rax
  common::milog::MiLogStream *v13; // rax
  DieCreatureRecord *v14; // rax
  std::pair<std::shared_ptr<DieCreatureRecord>,long unsigned int> __p; // [rsp+20h] [rbp-130h] BYREF
  common::milog::MiLogStream v18; // [rsp+40h] [rbp-110h] BYREF
  std::string val; // [rsp+60h] [rbp-F0h] BYREF
  char v20[208]; // [rsp+80h] [rbp-D0h] BYREF

  v5 = (unsigned __int64)v20;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v6 = __asan_stack_malloc_2(160LL);
    if ( v6 )
      v5 = v6;
  }
  *(_QWORD *)v5 = 1102416563LL;
  *(_QWORD *)(v5 + 8) = "4 48 4 14 entity_id:5734 64 8 11 now_ms:5734 96 16 15 record_ptr:5747 128 16 19 new_record_ptr:5750";
  *(_QWORD *)(v5 + 16) = Scene::tryUpdateDieCreatureRecord;
  v7 = (_DWORD *)(v5 >> 3);
  v7[536862720] = -235802127;
  v7[536862721] = -234556943;
  v7[536862722] = -218959360;
  v7[536862723] = -219021312;
  v7[536862724] = -202178560;
  *(_DWORD *)(v5 + 48) = entity_id;
  *(_QWORD *)(v5 + 64) = now_ms;
  if ( std::map<unsigned int,std::pair<std::shared_ptr<DieCreatureRecord>,unsigned long>>::size(&this->die_creature_record_map_) > 0x1F4 )
    Scene::clearDieCreatureRecord(this, *(_QWORD *)(v5 + 64));
  if ( std::map<unsigned int,std::pair<std::shared_ptr<DieCreatureRecord>,unsigned long>>::size(&this->die_creature_record_map_) <= 0x3E8 )
  {
    Scene::findDieCreatureRecord((Scene *const)(v5 + 96), (uint32_t)this);
    if ( std::operator==<DieCreatureRecord>((const std::shared_ptr<DieCreatureRecord> *)(v5 + 96), 0LL) )
    {
      common::tools::perf::make_shared<DieCreatureRecord>();
      if ( std::operator!=<DieCreatureRecord>((const std::shared_ptr<DieCreatureRecord> *)(v5 + 128), 0LL) )
      {
        std::make_pair<std::shared_ptr<DieCreatureRecord> &,unsigned long &>(
          &__p,
          (std::shared_ptr<DieCreatureRecord> *)(v5 + 128),
          (unsigned __int64 *)(v5 + 64));
        v12 = std::map<unsigned int,std::pair<std::shared_ptr<DieCreatureRecord>,unsigned long>>::operator[](
                &this->die_creature_record_map_,
                (const std::map<unsigned int,std::pair<std::shared_ptr<DieCreatureRecord>,long unsigned int>>::key_type *)(v5 + 48));
        std::pair<std::shared_ptr<DieCreatureRecord>,unsigned long>::operator=(v12, &__p);
        std::pair<std::shared_ptr<DieCreatureRecord>,unsigned long>::~pair(&__p);
      }
      std::shared_ptr<DieCreatureRecord>::operator=(
        (std::shared_ptr<DieCreatureRecord> *const)(v5 + 96),
        (const std::shared_ptr<DieCreatureRecord> *)(v5 + 128));
      std::shared_ptr<DieCreatureRecord>::~shared_ptr((std::shared_ptr<DieCreatureRecord> *const)(v5 + 128));
    }
    if ( std::operator==<DieCreatureRecord>((const std::shared_ptr<DieCreatureRecord> *)(v5 + 96), 0LL) )
    {
      common::milog::MiLogStream::create(
        (common::milog::MiLogStream *)&val,
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/scene/scene.cpp",
        "tryUpdateDieCreatureRecord",
        5759);
      v13 = common::milog::MiLogStream::operator<<<char [53],(char *[53])0>(
              (common::milog::MiLogStream *const)&val,
              (const char (*)[53])off_258E2CA0);
      common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v13, (const unsigned int *)(v5 + 48));
      common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)&val);
    }
    else
    {
      v14 = std::__shared_ptr_access<DieCreatureRecord,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<DieCreatureRecord,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v5 + 96));
      DieCreatureRecord::setGlobalValue(v14, key, value);
    }
    std::shared_ptr<DieCreatureRecord>::~shared_ptr((std::shared_ptr<DieCreatureRecord> *const)(v5 + 96));
  }
  else
  {
    common::milog::MiLogStream::create(
      &v18,
      &common::milog::MiLogDefault::default_log_obj_,
      1u,
      "./src/scene/scene.cpp",
      "tryUpdateDieCreatureRecord",
      5744);
    v8 = common::milog::MiLogStream::operator<<<char [52],(char *[52])0>(
           &v18,
           (const char (*)[52])" try add more than 1000 die creature record. scene:");
    if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
      __asan_report_load8();
    vptr_DescribalBase = (void (__fastcall **)(std::string *, Scene *const))this->_vptr_DescribalBase;
    if ( *(_BYTE *)(((unsigned __int64)this->_vptr_DescribalBase >> 3) + 0x7FFF8000) )
      vptr_DescribalBase = (void (__fastcall **)(std::string *, Scene *const))__asan_report_load8();
    (*vptr_DescribalBase)(&val, this);
    v10 = common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v8, &val);
    v11 = common::milog::MiLogStream::operator<<<char [12],(char *[12])0>(v10, (const char (*)[12])" entity_id:");
    common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v11, (const unsigned int *)(v5 + 48));
    std::string::~string(&val);
    common::milog::MiLogStream::~MiLogStream(&v18);
  }
  if ( v20 == (char *)v5 )
  {
    *(_QWORD *)((v5 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8008) = 0LL;
    *(_DWORD *)((v5 >> 3) + 0x7FFF8010) = 0;
  }
  else
  {
    *(_QWORD *)v5 = 1172321806LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v5 >> 3) + 0x7FFF8010) = -168430091;
  }
};

// Line 5766: range 00000000159A826C-00000000159A86BF
void __cdecl Scene::tryUpdateDieCreatureRecord(Scene *const this, const proto::AbilityInvokeEntry *entry)
{
  unsigned __int64 v2; // r13
  __int64 v3; // rax
  _DWORD *v4; // r12
  const proto::AbilityInvokeEntryHead *v5; // rax
  common::milog::MiLogStream *v6; // r14
  const proto::AbilityString *v7; // rax
  common::milog::MiLogStream *v8; // r14
  uint32_t v9; // esi
  float value; // [rsp+Ch] [rbp-144h]
  unsigned int val; // [rsp+20h] [rbp-130h] BYREF
  proto::AbilityScalarType value_type; // [rsp+24h] [rbp-12Ch]
  const proto::AbilityInvokeEntryHead *head; // [rsp+28h] [rbp-128h]
  const std::string *ability_data_str; // [rsp+30h] [rbp-120h]
  uint64_t now_ms; // [rsp+38h] [rbp-118h]
  common::milog::MiLogStream v16; // [rsp+40h] [rbp-110h] BYREF
  char v17[240]; // [rsp+60h] [rbp-F0h] BYREF

  v2 = (unsigned __int64)v17;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_2(192LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "2 48 32 8 key:5788 112 48 36 meta_ability_scalar_value_entry:5777";
  *(_QWORD *)(v2 + 16) = Scene::tryUpdateDieCreatureRecord;
  v4 = (_DWORD *)(v2 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = 61937;
  v4[536862722] = -219021312;
  v4[536862723] = 62194;
  v4[536862725] = -202116109;
  v5 = proto::AbilityInvokeEntry::head(entry);
  if ( !proto::AbilityInvokeEntryHead::local_id(v5)
    && proto::AbilityInvokeEntry::argument_type(entry) == ABILITY_META_GLOBAL_FLOAT_VALUE )
  {
    head = proto::AbilityInvokeEntry::head(entry);
    ability_data_str = proto::AbilityInvokeEntry::ability_data[abi:cxx11](entry);
    proto::AbilityScalarValueEntry::AbilityScalarValueEntry((proto::AbilityScalarValueEntry *const)(v2 + 112));
    if ( (unsigned __int8)google::protobuf::MessageLite::ParseFromString(v2 + 112, ability_data_str) != 1 )
    {
      common::milog::MiLogStream::create(
        &v16,
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/scene/scene.cpp",
        "tryUpdateDieCreatureRecord",
        5780);
      v6 = common::milog::MiLogStream::operator<<<char [58],(char *[58])0>(
             &v16,
             (const char (*)[58])"AbilityScalarValueEntry ParseFromString fails, entity_id:");
      val = proto::AbilityInvokeEntry::entity_id(entry);
      common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v6, &val);
      common::milog::MiLogStream::~MiLogStream(&v16);
    }
    else
    {
      value_type = proto::AbilityScalarValueEntry::value_type((const proto::AbilityScalarValueEntry *const)(v2 + 112));
      if ( value_type == ABILITY_SCALAR_TYPE_FLOAT )
      {
        std::string::basic_string(v2 + 48);
        v7 = proto::AbilityScalarValueEntry::key((const proto::AbilityScalarValueEntry *const)(v2 + 112));
        if ( abilityStringToStdString(v7, (std::string *)(v2 + 48)) )
        {
          common::milog::MiLogStream::create(
            &v16,
            &common::milog::MiLogDefault::default_log_obj_,
            3u,
            "./src/scene/scene.cpp",
            "tryUpdateDieCreatureRecord",
            5791);
          v8 = common::milog::MiLogStream::operator<<<char [43],(char *[43])0>(
                 &v16,
                 (const char (*)[43])"abilityStringToStdString fails, entity_id:");
          val = proto::AbilityInvokeEntry::entity_id(entry);
          common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v8, &val);
          common::milog::MiLogStream::~MiLogStream(&v16);
        }
        else if ( common::tools::StringUtils::isEndsWith((const std::string *)(v2 + 48), "BaseReactionDamage") )
        {
          now_ms = common::tools::TimeUtils::getNowMs();
          value = proto::AbilityScalarValueEntry::float_value((const proto::AbilityScalarValueEntry *const)(v2 + 112));
          v9 = proto::AbilityInvokeEntry::entity_id(entry);
          Scene::tryUpdateDieCreatureRecord(this, v9, (const std::string *)(v2 + 48), value, now_ms);
        }
        std::string::~string((void *)(v2 + 48));
      }
    }
    proto::AbilityScalarValueEntry::~AbilityScalarValueEntry((proto::AbilityScalarValueEntry *const)(v2 + 112));
  }
  if ( v17 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8014) = 0;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
  }
};

// Line 5803: range 00000000159A86C0-00000000159A884D
Scene *__fastcall Scene::findDieCreatureRecord(Scene *const this, __int64 entity_id, int a3)
{
  unsigned __int64 v3; // rbx
  __int64 v4; // rax
  _DWORD *v5; // r12
  std::_Rb_tree_iterator<std::pair<unsigned int const,std::pair<std::shared_ptr<DieCreatureRecord>,long unsigned int> > >::pointer v6; // rax
  std::_Rb_tree_iterator<std::pair<unsigned int const,std::pair<std::shared_ptr<DieCreatureRecord>,long unsigned int> > >::_Self __y; // [rsp+28h] [rbp-88h] BYREF
  char v10[128]; // [rsp+30h] [rbp-80h] BYREF

  v3 = (unsigned __int64)v10;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_1(96LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "2 48 4 14 entity_id:5802 64 8 9 iter:5804";
  *(_QWORD *)(v3 + 16) = Scene::findDieCreatureRecord;
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = -234556943;
  v5[536862722] = -202116352;
  *(_DWORD *)(v3 + 48) = a3;
  *(std::map<unsigned int,std::pair<std::shared_ptr<DieCreatureRecord>,long unsigned int>>::iterator *)(v3 + 64) = std::map<unsigned int,std::pair<std::shared_ptr<DieCreatureRecord>,unsigned long>>::find((std::map<unsigned int,std::pair<std::shared_ptr<DieCreatureRecord>,long unsigned int>> *const)(entity_id + 1880), (const std::map<unsigned int,std::pair<std::shared_ptr<DieCreatureRecord>,long unsigned int>>::key_type *)(v3 + 48));
  __y._M_node = std::map<unsigned int,std::pair<std::shared_ptr<DieCreatureRecord>,unsigned long>>::end((std::map<unsigned int,std::pair<std::shared_ptr<DieCreatureRecord>,long unsigned int>> *const)(entity_id + 1880))._M_node;
  if ( std::operator==(
         (const std::_Rb_tree_iterator<std::pair<unsigned int const,std::pair<std::shared_ptr<DieCreatureRecord>,long unsigned int> > >::_Self *)(v3 + 64),
         &__y) )
  {
    std::shared_ptr<DieCreatureRecord>::shared_ptr((std::shared_ptr<DieCreatureRecord> *const)this, 0LL);
  }
  else
  {
    v6 = std::_Rb_tree_iterator<std::pair<unsigned int const,std::pair<std::shared_ptr<DieCreatureRecord>,unsigned long>>>::operator->((const std::_Rb_tree_iterator<std::pair<unsigned int const,std::pair<std::shared_ptr<DieCreatureRecord>,long unsigned int> > > *const)(v3 + 64));
    std::shared_ptr<DieCreatureRecord>::shared_ptr((std::shared_ptr<DieCreatureRecord> *const)this, &v6->second.first);
  }
  if ( v10 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8008) = 0;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8008) = -168430091;
  }
  return this;
};

// Line 5813: range 00000000159A884E-00000000159A8B92
void __cdecl Scene::clearDieCreatureRecord(Scene *const this, uint64_t now_ms)
{
  unsigned __int64 v2; // rbx
  __int64 v3; // rax
  _DWORD *v4; // r13
  char v5; // al
  __gnu_cxx::__normal_iterator<unsigned int*,std::vector<unsigned int> >::reference v6; // rax
  _DWORD *v7; // rdx
  std::map<unsigned int,std::pair<std::shared_ptr<DieCreatureRecord>,long unsigned int>>::iterator __for_begin; // [rsp+18h] [rbp-D8h] BYREF
  std::map<unsigned int,std::pair<std::shared_ptr<DieCreatureRecord>,long unsigned int>>::iterator __for_end; // [rsp+20h] [rbp-D0h] BYREF
  std::map<unsigned int,std::pair<std::shared_ptr<DieCreatureRecord>,long unsigned int>> *__for_range; // [rsp+28h] [rbp-C8h]
  std::vector<unsigned int> *__for_range_0; // [rsp+30h] [rbp-C0h]
  std::pair<unsigned int const,std::pair<std::shared_ptr<DieCreatureRecord>,long unsigned int> > *__in; // [rsp+38h] [rbp-B8h]
  std::tuple_element<0,std::pair<unsigned int const,std::pair<std::shared_ptr<DieCreatureRecord>,long unsigned int> > >::type *id; // [rsp+40h] [rbp-B0h]
  std::tuple_element<1,std::pair<unsigned int const,std::pair<std::shared_ptr<DieCreatureRecord>,long unsigned int> > >::type *p; // [rsp+48h] [rbp-A8h]
  char v15[160]; // [rsp+50h] [rbp-A0h] BYREF

  v2 = (unsigned __int64)v15;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_1(128LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "2 48 4 7 id:5823 64 24 17 erase_id_vec:5815";
  *(_QWORD *)(v2 + 16) = Scene::clearDieCreatureRecord;
  v4 = (_DWORD *)(v2 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = -234556943;
  v4[536862722] = -218103808;
  v4[536862723] = -202116109;
  std::vector<unsigned int>::vector((std::vector<unsigned int> *const)(v2 + 64));
  __for_range = &this->die_creature_record_map_;
  __for_begin._M_node = std::map<unsigned int,std::pair<std::shared_ptr<DieCreatureRecord>,unsigned long>>::begin(&this->die_creature_record_map_)._M_node;
  __for_end._M_node = std::map<unsigned int,std::pair<std::shared_ptr<DieCreatureRecord>,unsigned long>>::end(&this->die_creature_record_map_)._M_node;
  while ( std::operator!=(&__for_begin, &__for_end) )
  {
    __in = std::_Rb_tree_iterator<std::pair<unsigned int const,std::pair<std::shared_ptr<DieCreatureRecord>,unsigned long>>>::operator*(&__for_begin);
    id = std::get<0ul,unsigned int const,std::pair<std::shared_ptr<DieCreatureRecord>,unsigned long>>(__in);
    p = std::get<1ul,unsigned int const,std::pair<std::shared_ptr<DieCreatureRecord>,unsigned long>>(__in);
    if ( std::operator==<DieCreatureRecord>(&p->first, 0LL) )
      goto LABEL_10;
    if ( *(_BYTE *)(((unsigned __int64)&p->second >> 3) + 0x7FFF8000) )
      __asan_report_load8();
    if ( now_ms > p->second + 1000 )
LABEL_10:
      v5 = 1;
    else
      v5 = 0;
    if ( v5 )
      std::vector<unsigned int>::push_back((std::vector<unsigned int> *const)(v2 + 64), id);
    std::_Rb_tree_iterator<std::pair<unsigned int const,std::pair<std::shared_ptr<DieCreatureRecord>,unsigned long>>>::operator++(&__for_begin);
  }
  __for_range_0 = (std::vector<unsigned int> *)(v2 + 64);
  __for_begin._M_node = (std::_Rb_tree_iterator<std::pair<unsigned int const,std::pair<std::shared_ptr<DieCreatureRecord>,long unsigned int> > >::_Base_ptr)std::vector<unsigned int>::begin((std::vector<unsigned int> *const)(v2 + 64))._M_current;
  __for_end._M_node = (std::_Rb_tree_iterator<std::pair<unsigned int const,std::pair<std::shared_ptr<DieCreatureRecord>,long unsigned int> > >::_Base_ptr)std::vector<unsigned int>::end(__for_range_0)._M_current;
  while ( __gnu_cxx::operator!=<unsigned int *,std::vector<unsigned int>>(
            (const __gnu_cxx::__normal_iterator<unsigned int*,std::vector<unsigned int> > *)&__for_begin,
            (const __gnu_cxx::__normal_iterator<unsigned int*,std::vector<unsigned int> > *)&__for_end) )
  {
    v6 = __gnu_cxx::__normal_iterator<unsigned int *,std::vector<unsigned int>>::operator*((const __gnu_cxx::__normal_iterator<unsigned int*,std::vector<unsigned int> > *const)&__for_begin);
    v7 = v6;
    if ( *(_BYTE *)(((unsigned __int64)v6 >> 3) + 0x7FFF8000) != 0
      && (char)(((unsigned __int8)v6 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)v6 >> 3) + 0x7FFF8000) )
    {
      __asan_report_load4(v6);
    }
    *(_DWORD *)(v2 + 48) = *v7;
    std::map<unsigned int,std::pair<std::shared_ptr<DieCreatureRecord>,unsigned long>>::erase(
      &this->die_creature_record_map_,
      (const std::map<unsigned int,std::pair<std::shared_ptr<DieCreatureRecord>,long unsigned int>>::key_type *)(v2 + 48));
    __gnu_cxx::__normal_iterator<unsigned int *,std::vector<unsigned int>>::operator++((__gnu_cxx::__normal_iterator<unsigned int*,std::vector<unsigned int> > *const)&__for_begin);
  }
  std::vector<unsigned int>::~vector((std::vector<unsigned int> *const)(v2 + 64));
  if ( v15 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
};

// Line 5831: range 00000000159A955C-00000000159A96AA
void __cdecl Scene::notifyClientReloadTerrain(Scene *const this, const SceneTagOpParam *op_param_ptr)
{
  unsigned __int64 v2; // rbx
  __int64 v3; // rax
  unsigned __int64 v4; // r12
  Scene::notifyClientReloadTerrain::<lambda(Player&)> v5; // [rsp-20h] [rbp-D0h]
  std::function<ForeachPolicy(Player&)> p_func; // [rsp+30h] [rbp-80h] BYREF
  char v7[96]; // [rsp+50h] [rbp-60h] BYREF

  v2 = (unsigned __int64)v7;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_0(64LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "1 32 4 17 player_index:5832";
  *(_QWORD *)(v2 + 16) = Scene::notifyClientReloadTerrain;
  v4 = v2 >> 3;
  *(_DWORD *)(v4 + 2147450880) = -235802127;
  *(_DWORD *)(v4 + 2147450884) = -202116348;
  *(_DWORD *)(v2 + 32) = 0;
  v5.__player_index = (uint32_t *)(v2 + 32);
  v5.__op_param_ptr = op_param_ptr;
  v5.__this = this;
  std::function<ForeachPolicy ()(Player &)>::function<Scene::notifyClientReloadTerrain(SceneTagOpParam const*)::{lambda(Player &)#1},void,void>(
    &p_func,
    v5);
  Scene::foreachPlayer(this, &p_func);
  std::function<ForeachPolicy ()(Player &)>::~function(&p_func);
  if ( v7 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
  }
};

// Line 5833: range 00000000159A8B94-00000000159A955A
ForeachPolicy __cdecl Scene::notifyClientReloadTerrain(SceneTagOpParam const*)::{lambda(Player &)#1}::operator()(
        const Scene::notifyClientReloadTerrain::<lambda(Player&)> *const __closure,
        Player *player)
{
  unsigned __int64 v2; // r12
  __int64 v3; // rax
  _DWORD *v4; // r13
  std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v5; // rax
  unsigned __int64 Position; // rax
  std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v7; // rax
  unsigned __int64 Rotation; // rax
  Scene *this; // r14
  uint32_t Uid; // eax
  common::milog::MiLogStream *v11; // r14
  common::milog::MiLogStream *v12; // rax
  char v13; // al
  uint32_t *player_index; // rdx
  std::vector<Vector3>::size_type v15; // r14
  unsigned __int64 v16; // rax
  uint32_t v17; // edx
  unsigned __int64 v18; // rax
  common::milog::MiLogStream *v19; // rcx
  common::milog::MiLogStream *v20; // rax
  common::milog::MiLogStream *v21; // r14
  unsigned __int64 n; // rax
  unsigned __int64 v23; // rax
  PlayerSceneComp *SceneComp; // r14
  bool v25; // r14
  common::milog::MiLogStream *v26; // r14
  ForeachPolicy result; // eax
  unsigned int val; // [rsp+1Ch] [rbp-124h] BYREF
  unsigned __int64 v29; // [rsp+20h] [rbp-120h] BYREF
  const std::vector<Vector3> *trans_pos_vec; // [rsp+28h] [rbp-118h]
  common::milog::MiLogStream v31; // [rsp+30h] [rbp-110h] BYREF
  TransferReason p_reason; // [rsp+50h] [rbp-F0h] BYREF
  char v33[176]; // [rsp+90h] [rbp-B0h] BYREF

  v2 = (unsigned __int64)v33;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_1(128LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "3 32 12 8 pos:5835 64 12 8 rot:5835 96 16 15 avatar_ptr:5836";
  *(_QWORD *)(v2 + 16) = Scene::notifyClientReloadTerrain(SceneTagOpParam const*)::{lambda(Player &)#1}::operator();
  v4 = (_DWORD *)(v2 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = -219020288;
  v4[536862722] = -219020288;
  v4[536862723] = -202178560;
  Vector3::Vector3((Vector3 *const)(v2 + 32), 0.0, 0.0, 0.0);
  Vector3::Vector3((Vector3 *const)(v2 + 64), 0.0, 0.0, 0.0);
  Player::getAvatarComp(player);
  PlayerAvatarComp::getCurAvatar((const PlayerAvatarComp *const)(v2 + 96));
  if ( std::operator!=<Avatar>((const std::shared_ptr<Avatar> *)(v2 + 96), 0LL) )
  {
    v5 = std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 96));
    Position = (unsigned __int64)Entity::getPosition((const Entity *const)v5);
    if ( (char)(Position & 7) >= *(_BYTE *)((Position >> 3) + 0x7FFF8000)
      && *(_BYTE *)((Position >> 3) + 0x7FFF8000) != 0
      || *(_BYTE *)(((Position + 11) >> 3) + 0x7FFF8000) != 0
      && (char)((Position + 11) & 7) >= *(_BYTE *)(((Position + 11) >> 3) + 0x7FFF8000) )
    {
      Position = __asan_report_load_n(Position, 12LL);
    }
    *(_QWORD *)(v2 + 32) = *(_QWORD *)Position;
    *(_DWORD *)(v2 + 40) = *(_DWORD *)(Position + 8);
    v7 = std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 96));
    Rotation = (unsigned __int64)Entity::getRotation((const Entity *const)v7);
    if ( (char)(Rotation & 7) >= *(_BYTE *)((Rotation >> 3) + 0x7FFF8000)
      && *(_BYTE *)((Rotation >> 3) + 0x7FFF8000) != 0
      || *(_BYTE *)(((Rotation + 11) >> 3) + 0x7FFF8000) != 0
      && (char)((Rotation + 11) & 7) >= *(_BYTE *)(((Rotation + 11) >> 3) + 0x7FFF8000) )
    {
      Rotation = __asan_report_load_n(Rotation, 12LL);
    }
    *(_QWORD *)(v2 + 64) = *(_QWORD *)Rotation;
    *(_DWORD *)(v2 + 72) = *(_DWORD *)(Rotation + 8);
  }
  else
  {
    if ( *(_BYTE *)(((unsigned __int64)__closure >> 3) + 0x7FFF8000) )
      __asan_report_load8();
    this = __closure->__this;
    Uid = Player::getUid(player);
    if ( Scene::getPlayerLocation(this, Uid, (Vector3 *)(v2 + 32), (Vector3 *)(v2 + 64)) )
    {
      common::milog::MiLogStream::create(
        &v31,
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/scene/scene.cpp",
        "operator()",
        5846);
      v11 = common::milog::MiLogStream::operator<<<char [6],(char *[6])0>(&v31, (const char (*)[6])" uid:");
      val = Player::getUid(player);
      v12 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v11, &val);
      common::milog::MiLogStream::operator<<<char [25],(char *[25])0>(
        v12,
        (const char (*)[25])" getPlayerLocation fails");
      common::milog::MiLogStream::~MiLogStream(&v31);
      goto LABEL_53;
    }
  }
  if ( *(_BYTE *)(((unsigned __int64)&__closure->__op_param_ptr >> 3) + 0x7FFF8000) )
    __asan_report_load8();
  if ( !__closure->__op_param_ptr
    || !std::optional<std::vector<Vector3>>::has_value(&__closure->__op_param_ptr->trans_pos_vec_opt) )
  {
    goto LABEL_22;
  }
  if ( *(_BYTE *)(((unsigned __int64)&__closure->__op_param_ptr >> 3) + 0x7FFF8000) )
    __asan_report_load8();
  if ( std::optional<Vector3>::has_value(&__closure->__op_param_ptr->trans_rot_opt) )
    v13 = 1;
  else
LABEL_22:
    v13 = 0;
  if ( v13 )
  {
    if ( *(_BYTE *)(((unsigned __int64)&__closure->__op_param_ptr >> 3) + 0x7FFF8000) )
      __asan_report_load8();
    trans_pos_vec = std::optional<std::vector<Vector3>>::value(&__closure->__op_param_ptr->trans_pos_vec_opt);
    if ( !std::vector<Vector3>::empty(trans_pos_vec) )
    {
      if ( *(_BYTE *)(((unsigned __int64)&__closure->__player_index >> 3) + 0x7FFF8000) )
        __asan_report_load8();
      player_index = __closure->__player_index;
      if ( *(_BYTE *)(((unsigned __int64)player_index >> 3) + 0x7FFF8000) != 0
        && (char)(((unsigned __int8)player_index & 7) + 3) >= *(_BYTE *)(((unsigned __int64)player_index >> 3)
                                                                       + 0x7FFF8000) )
      {
        __asan_report_load4(__closure->__player_index);
      }
      v15 = *player_index;
      if ( v15 >= std::vector<Vector3>::size(trans_pos_vec) )
      {
        common::milog::MiLogStream::create(
          &v31,
          &common::milog::MiLogDefault::default_log_obj_,
          3u,
          "./src/scene/scene.cpp",
          "operator()",
          5863);
        v19 = common::milog::MiLogStream::operator<<<char [41],(char *[41])0>(
                &v31,
                (const char (*)[41])"notifyClientReloadTerrain player_index: ");
        if ( *(_BYTE *)(((unsigned __int64)&__closure->__player_index >> 3) + 0x7FFF8000) )
          __asan_report_load8();
        v20 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v19, __closure->__player_index);
        v21 = common::milog::MiLogStream::operator<<<char [23],(char *[23])0>(
                v20,
                (const char (*)[23])" ,trans_pos_vec.size: ");
        v29 = std::vector<Vector3>::size(trans_pos_vec);
        common::milog::MiLogStream::operator<<<unsigned long,(unsigned long *)0>(v21, &v29);
        common::milog::MiLogStream::~MiLogStream(&v31);
        n = (unsigned __int64)std::vector<Vector3>::back(trans_pos_vec);
        if ( (char)(n & 7) >= *(_BYTE *)((n >> 3) + 0x7FFF8000) && *(_BYTE *)((n >> 3) + 0x7FFF8000) != 0
          || *(_BYTE *)(((n + 11) >> 3) + 0x7FFF8000) != 0
          && (char)((n + 11) & 7) >= *(_BYTE *)(((n + 11) >> 3) + 0x7FFF8000) )
        {
          n = __asan_report_load_n(n, 12LL);
        }
        *(_QWORD *)(v2 + 32) = *(_QWORD *)n;
        *(_DWORD *)(v2 + 40) = *(_DWORD *)(n + 8);
      }
      else
      {
        if ( *(_BYTE *)(((unsigned __int64)&__closure->__player_index >> 3) + 0x7FFF8000) )
          __asan_report_load8();
        v16 = (unsigned __int64)__closure->__player_index;
        if ( *(_BYTE *)((v16 >> 3) + 0x7FFF8000) != 0 && (char)((v16 & 7) + 3) >= *(_BYTE *)((v16 >> 3) + 0x7FFF8000) )
          v16 = __asan_report_load4(__closure->__player_index);
        v17 = (*(_DWORD *)v16)++;
        v18 = (unsigned __int64)std::vector<Vector3>::operator[](trans_pos_vec, v17);
        if ( (char)(v18 & 7) >= *(_BYTE *)((v18 >> 3) + 0x7FFF8000) && *(_BYTE *)((v18 >> 3) + 0x7FFF8000) != 0
          || *(_BYTE *)(((v18 + 11) >> 3) + 0x7FFF8000) != 0
          && (char)((v18 + 11) & 7) >= *(_BYTE *)(((v18 + 11) >> 3) + 0x7FFF8000) )
        {
          v18 = __asan_report_load_n(v18, 12LL);
        }
        *(_QWORD *)(v2 + 32) = *(_QWORD *)v18;
        *(_DWORD *)(v2 + 40) = *(_DWORD *)(v18 + 8);
      }
      if ( *(_BYTE *)(((unsigned __int64)&__closure->__op_param_ptr >> 3) + 0x7FFF8000) )
        __asan_report_load8();
      v23 = (unsigned __int64)std::optional<Vector3>::value(&__closure->__op_param_ptr->trans_rot_opt);
      if ( (char)(v23 & 7) >= *(_BYTE *)((v23 >> 3) + 0x7FFF8000) && *(_BYTE *)((v23 >> 3) + 0x7FFF8000) != 0
        || *(_BYTE *)(((v23 + 11) >> 3) + 0x7FFF8000) != 0
        && (char)((v23 + 11) & 7) >= *(_BYTE *)(((v23 + 11) >> 3) + 0x7FFF8000) )
      {
        v23 = __asan_report_load_n(v23, 12LL);
      }
      *(_QWORD *)(v2 + 64) = *(_QWORD *)v23;
      *(_DWORD *)(v2 + 72) = *(_DWORD *)(v23 + 8);
    }
  }
  SceneComp = Player::getSceneComp(player);
  TransferReason::TransferReason(&p_reason, ENTER_REASON_RELOAD_TERRAIN);
  if ( *(_BYTE *)(((unsigned __int64)__closure >> 3) + 0x7FFF8000) )
    __asan_report_load8();
  v25 = PlayerSceneComp::jumpToScene(
          SceneComp,
          __closure->__this,
          (const Vector3 *)(v2 + 32),
          (const Vector3 *)(v2 + 64),
          0,
          &p_reason) != 0;
  TransferReason::~TransferReason(&p_reason);
  if ( v25 )
  {
    common::milog::MiLogStream::create(
      &v31,
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/scene/scene.cpp",
      "operator()",
      5873);
    v26 = common::milog::MiLogStream::operator<<<char [25],(char *[25])0>(
            &v31,
            (const char (*)[25])"jumpToScene failed, uid:");
    val = Player::getUid(player);
    common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v26, &val);
    common::milog::MiLogStream::~MiLogStream(&v31);
  }
LABEL_53:
  std::shared_ptr<Avatar>::~shared_ptr((std::shared_ptr<Avatar> *const)(v2 + 96));
  result = FOREACH_CONTINUE;
  if ( v33 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 5880: range 00000000159A96AC-00000000159A9ABC
uint32_t __cdecl Scene::getAreaLevel(const Scene *const this, const Vector3 *pos)
{
  unsigned __int64 v2; // rbx
  __int64 v3; // rax
  unsigned __int64 v4; // r13
  JsonConfigMgr *p_json_config_mgr; // rcx
  common::milog::MiLogStream *v6; // rax
  common::milog::MiLogStream *v7; // rax
  common::milog::MiLogStream *v8; // rdx
  common::milog::MiLogStream *v9; // rax
  uint32_t AdjustedLevel; // r14d
  unsigned __int64 v11; // rax
  common::milog::MiLogStream *v12; // rax
  common::milog::MiLogStream *v13; // rax
  std::__shared_ptr_access<PlayerWorld,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v14; // rax
  uint32_t Level; // eax
  uint32_t result; // eax
  uint32_t area_level; // [rsp+14h] [rbp-9Ch]
  const data::ConfigLevelArea *level_area_config_ptr; // [rsp+18h] [rbp-98h]
  common::milog::MiLogStream v19; // [rsp+20h] [rbp-90h] BYREF
  char v20[112]; // [rsp+40h] [rbp-70h] BYREF

  v2 = (unsigned __int64)v20;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_0(64LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "1 32 16 14 world_ptr:5888";
  *(_QWORD *)(v2 + 16) = Scene::getAreaLevel;
  v4 = v2 >> 3;
  *(_DWORD *)(v4 + 2147450880) = -235802127;
  *(_DWORD *)(v4 + 2147450884) = -202178560;
  ServiceBox::findService<GameserverService>();
  GameserverService::getConfig((GameserverService *const)(v2 + 32));
  p_json_config_mgr = &std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 32))->design_config.json_config_mgr;
  if ( *(_BYTE *)(((unsigned __int64)&this->scene_id_ >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->scene_id_ >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4(&this->scene_id_);
  }
  level_area_config_ptr = JsonConfigMgr::findLevelAreaConfig(p_json_config_mgr, this->scene_id_, pos);
  std::shared_ptr<Config>::~shared_ptr((std::shared_ptr<Config> *const)(v2 + 32));
  if ( level_area_config_ptr )
  {
    if ( *(_BYTE *)(((unsigned __int64)&level_area_config_ptr->level >> 3) + 0x7FFF8000) != 0
      && (char)((((_BYTE)level_area_config_ptr + 4) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&level_area_config_ptr->level >> 3)
                                                                          + 0x7FFF8000) )
    {
      __asan_report_load4(&level_area_config_ptr->level);
    }
    area_level = level_area_config_ptr->level;
    if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
      __asan_report_load8();
    v11 = (unsigned __int64)(this->_vptr_DescribalBase + 8);
    if ( *(_BYTE *)((v11 >> 3) + 0x7FFF8000) )
      v11 = __asan_report_load8();
    (*(void (__fastcall **)(unsigned __int64, const Scene *const))v11)(v2 + 32, this);
    if ( std::operator==<PlayerWorld>(0LL, (const std::shared_ptr<PlayerWorld> *)(v2 + 32)) )
    {
      common::milog::MiLogStream::create(
        &v19,
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/scene/scene.cpp",
        "getAreaLevel",
        5891);
      v12 = common::milog::MiLogStream::operator<<<char [10],(char *[10])0>(&v19, (const char (*)[10])"scene id=");
      v13 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v12, &this->scene_id_);
      common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(v13, (const char (*)[16])" own world null");
      common::milog::MiLogStream::~MiLogStream(&v19);
      AdjustedLevel = area_level;
    }
    else
    {
      v14 = std::__shared_ptr_access<PlayerWorld,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<PlayerWorld,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 32));
      Level = PlayerWorld::getLevel(v14);
      AdjustedLevel = PlayerWorld::getAdjustedLevel(Level, area_level);
    }
    std::shared_ptr<PlayerWorld>::~shared_ptr((std::shared_ptr<PlayerWorld> *const)(v2 + 32));
  }
  else
  {
    common::milog::MiLogStream::create(
      &v19,
      &common::milog::MiLogDefault::default_log_obj_,
      1u,
      "./src/scene/scene.cpp",
      "getAreaLevel",
      5884);
    v6 = common::milog::MiLogStream::operator<<<char [10],(char *[10])0>(&v19, (const char (*)[10])"scene_id=");
    v7 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v6, &this->scene_id_);
    v8 = common::milog::MiLogStream::operator<<<char [6],(char *[6])0>(v7, (const char (*)[6])" pos=");
    v9 = operator<<(v8, pos);
    common::milog::MiLogStream::operator<<<char [24],(char *[24])0>(v9, (const char (*)[24])" area level config fail");
    common::milog::MiLogStream::~MiLogStream(&v19);
    AdjustedLevel = 0;
  }
  result = AdjustedLevel;
  if ( v20 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 5898: range 00000000159A9ABE-00000000159A9C8F
uint32_t __cdecl Scene::getAreaLevel(const Scene *const this, uint32_t world_level, const Vector3 *pos)
{
  JsonConfigMgr *p_json_config_mgr; // rcx
  common::milog::MiLogStream *v4; // rax
  common::milog::MiLogStream *v5; // rax
  common::milog::MiLogStream *v6; // rdx
  common::milog::MiLogStream *v7; // rax
  const data::ConfigLevelArea *level_area_config_ptr; // [rsp+28h] [rbp-48h]
  std::shared_ptr<Config> v11; // [rsp+30h] [rbp-40h] BYREF
  common::milog::MiLogStream v12; // [rsp+40h] [rbp-30h] BYREF

  ServiceBox::findService<GameserverService>();
  GameserverService::getConfig((GameserverService *const)&v11);
  p_json_config_mgr = &std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false> *const)&v11)->design_config.json_config_mgr;
  if ( *(_BYTE *)(((unsigned __int64)&this->scene_id_ >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->scene_id_ >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4(&this->scene_id_);
  }
  level_area_config_ptr = JsonConfigMgr::findLevelAreaConfig(p_json_config_mgr, this->scene_id_, pos);
  std::shared_ptr<Config>::~shared_ptr(&v11);
  if ( level_area_config_ptr )
  {
    if ( *(_BYTE *)(((unsigned __int64)&level_area_config_ptr->level >> 3) + 0x7FFF8000) != 0
      && (char)((((_BYTE)level_area_config_ptr + 4) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&level_area_config_ptr->level >> 3)
                                                                          + 0x7FFF8000) )
    {
      __asan_report_load4(&level_area_config_ptr->level);
    }
    return PlayerWorld::getAdjustedLevel(world_level, level_area_config_ptr->level);
  }
  else
  {
    common::milog::MiLogStream::create(
      &v12,
      &common::milog::MiLogDefault::default_log_obj_,
      1u,
      "./src/scene/scene.cpp",
      "getAreaLevel",
      5902);
    v4 = common::milog::MiLogStream::operator<<<char [10],(char *[10])0>(&v12, (const char (*)[10])"scene_id=");
    v5 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v4, &this->scene_id_);
    v6 = common::milog::MiLogStream::operator<<<char [6],(char *[6])0>(v5, (const char (*)[6])" pos=");
    v7 = operator<<(v6, pos);
    common::milog::MiLogStream::operator<<<char [24],(char *[24])0>(v7, (const char (*)[24])" area level config fail");
    common::milog::MiLogStream::~MiLogStream(&v12);
    return 0;
  }
};

// Line 5910: range 00000000159A9C90-00000000159AA133
void __cdecl Scene::onCreatureHurt(Scene *const this, Creature *attacker, Creature *defenser, HurtContext *context)
{
  unsigned __int64 v4; // r12
  __int64 v5; // rax
  _DWORD *v6; // r13
  SceneMultistagePlayComp *MultistagePlayComp; // r15
  float final_damage; // r14d
  Monster *v9; // rax
  SceneMultistagePlayComp *v10; // r15
  float v11; // r14d
  Monster *v12; // rax
  Player *v13; // rax
  PlayerExhibitionComp *ExhibitionComp; // r15
  float v15; // r14d
  Monster *v16; // rax
  std::__shared_ptr_access<Creature,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v17; // [rsp+8h] [rbp-D8h]
  std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v18; // [rsp+8h] [rbp-D8h]
  char v20[176]; // [rsp+30h] [rbp-B0h] BYREF

  v4 = (unsigned __int64)v20;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v5 = __asan_stack_malloc_1(128LL);
    if ( v5 )
      v4 = v5;
  }
  *(_QWORD *)v4 = 1102416563LL;
  *(_QWORD *)(v4 + 8) = "3 32 16 16 monster_ptr:5917 64 16 24 attacker_avatar_ptr:5920 96 16 30 attacker_owner_player_ptr:5934";
  *(_QWORD *)(v4 + 16) = Scene::onCreatureHurt;
  v6 = (_DWORD *)(v4 >> 3);
  v6[536862720] = -235802127;
  v6[536862721] = -219021312;
  v6[536862722] = -219021312;
  v6[536862723] = -202178560;
  if ( *(_BYTE *)(((unsigned __int64)&context->final_damage >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)context + 76) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&context->final_damage >> 3) + 0x7FFF8000) )
  {
    __asan_report_load4(&context->final_damage);
  }
  if ( context->final_damage > 0.0 )
  {
    toThisPtr<Creature>((Creature *)(v4 + 96));
    std::dynamic_pointer_cast<Monster,Creature>((const std::shared_ptr<Creature> *)(v4 + 32));
    std::shared_ptr<Creature>::~shared_ptr((std::shared_ptr<Creature> *const)(v4 + 96));
    if ( std::operator!=<Monster>((const std::shared_ptr<Monster> *)(v4 + 32), 0LL) )
    {
      toThisPtr<Creature>((Creature *)(v4 + 96));
      std::dynamic_pointer_cast<Avatar,Creature>((const std::shared_ptr<Creature> *)(v4 + 64));
      std::shared_ptr<Creature>::~shared_ptr((std::shared_ptr<Creature> *const)(v4 + 96));
      if ( std::operator==<Avatar>(0LL, (const std::shared_ptr<Avatar> *)(v4 + 64)) )
      {
        Creature::findTopOwner((const Creature *const)(v4 + 96));
        if ( std::operator!=<Creature>(0LL, (const std::shared_ptr<Creature> *)(v4 + 96)) )
        {
          MultistagePlayComp = Scene::getMultistagePlayComp(this);
          if ( *(_BYTE *)(((unsigned __int64)&context->final_damage >> 3) + 0x7FFF8000) != 0
            && (char)((((_BYTE)context + 76) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&context->final_damage >> 3)
                                                                   + 0x7FFF8000) )
          {
            __asan_report_load4(&context->final_damage);
          }
          final_damage = context->final_damage;
          v17 = std::__shared_ptr_access<Creature,(__gnu_cxx::_Lock_policy)2,false,false>::operator*((const std::__shared_ptr_access<Creature,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 96));
          v9 = std::__shared_ptr_access<Monster,(__gnu_cxx::_Lock_policy)2,false,false>::operator*((const std::__shared_ptr_access<Monster,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 32));
          SceneMultistagePlayComp::onMonsterHurt(MultistagePlayComp, v9, v17, final_damage);
        }
        std::shared_ptr<Creature>::~shared_ptr((std::shared_ptr<Creature> *const)(v4 + 96));
      }
      else
      {
        v10 = Scene::getMultistagePlayComp(this);
        if ( *(_BYTE *)(((unsigned __int64)&context->final_damage >> 3) + 0x7FFF8000) != 0
          && (char)((((_BYTE)context + 76) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&context->final_damage >> 3)
                                                                 + 0x7FFF8000) )
        {
          __asan_report_load4(&context->final_damage);
        }
        v11 = context->final_damage;
        v18 = std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::operator*((const std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 64));
        v12 = std::__shared_ptr_access<Monster,(__gnu_cxx::_Lock_policy)2,false,false>::operator*((const std::__shared_ptr_access<Monster,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 32));
        SceneMultistagePlayComp::onMonsterHurt(v10, v12, v18, v11);
      }
      Creature::findOriginalPlayerIncludeTrialAvatar((Creature *const)(v4 + 96));
      if ( std::operator!=<Player>(0LL, (const std::shared_ptr<Player> *)(v4 + 96)) )
      {
        v13 = std::__shared_ptr_access<Player,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Player,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 96));
        ExhibitionComp = Player::getExhibitionComp(v13);
        if ( *(_BYTE *)(((unsigned __int64)&context->final_damage >> 3) + 0x7FFF8000) != 0
          && (char)((((_BYTE)context + 76) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&context->final_damage >> 3)
                                                                 + 0x7FFF8000) )
        {
          __asan_report_load4(&context->final_damage);
        }
        v15 = context->final_damage;
        v16 = std::__shared_ptr_access<Monster,(__gnu_cxx::_Lock_policy)2,false,false>::operator*((const std::__shared_ptr_access<Monster,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 32));
        PlayerExhibitionComp::onMonsterHurt(ExhibitionComp, v16, v15);
      }
      std::shared_ptr<Player>::~shared_ptr((std::shared_ptr<Player> *const)(v4 + 96));
      std::shared_ptr<Avatar>::~shared_ptr((std::shared_ptr<Avatar> *const)(v4 + 64));
    }
    std::shared_ptr<Monster>::~shared_ptr((std::shared_ptr<Monster> *const)(v4 + 32));
  }
  if ( v20 == (char *)v4 )
  {
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v4 = 1172321806LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
};

// Line 5943: range 00000000159AA134-00000000159AA15C
bool __cdecl Scene::isForbidOtherPlayerEnter(Scene *const this)
{
  SceneGalleryComp *GalleryComp; // rax

  GalleryComp = Scene::getGalleryComp(this);
  return SceneGalleryComp::isAnyGalleryStarted(GalleryComp);
};

// Line 5950: range 00000000159AA15E-00000000159AA3B9
int32_t __cdecl Scene::getGatherCountForPerf(Scene *const this)
{
  unsigned __int64 p_M_end_of_storage; // rbx
  __int64 v2; // rax
  unsigned __int64 v3; // r12
  char v4; // r15
  bool v5; // r14
  int32_t result; // eax
  int32_t gather_count; // [rsp+1Ch] [rbp-B4h]
  std::unordered_map<unsigned int,std::shared_ptr<Entity>>::iterator __for_begin; // [rsp+20h] [rbp-B0h] BYREF
  std::unordered_map<unsigned int,std::shared_ptr<Entity>>::iterator __for_end; // [rsp+28h] [rbp-A8h] BYREF
  std::unordered_map<unsigned int,std::shared_ptr<Entity>> *__for_range; // [rsp+30h] [rbp-A0h]
  std::pair<unsigned int const,std::shared_ptr<Entity> > *__in; // [rsp+38h] [rbp-98h]
  std::tuple_element<0,std::pair<unsigned int const,std::shared_ptr<Entity> > >::type *entity_id; // [rsp+40h] [rbp-90h]
  std::tuple_element<1,std::pair<unsigned int const,std::shared_ptr<Entity> > >::type *entity_ptr; // [rsp+48h] [rbp-88h]
  EcsBase<Gadget,GadgetCompBase,28> v14; // [rsp+50h] [rbp-80h] BYREF

  p_M_end_of_storage = (unsigned __int64)&v14.comp_vec_._M_impl._M_end_of_storage;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_0(64LL);
    if ( v2 )
      p_M_end_of_storage = v2;
  }
  *(_QWORD *)p_M_end_of_storage = 1102416563LL;
  *(_QWORD *)(p_M_end_of_storage + 8) = "1 32 16 15 gadget_ptr:5955";
  *(_QWORD *)(p_M_end_of_storage + 16) = Scene::getGatherCountForPerf;
  v3 = p_M_end_of_storage >> 3;
  *(_DWORD *)(v3 + 2147450880) = -235802127;
  *(_DWORD *)(v3 + 2147450884) = -202178560;
  gather_count = 0;
  __for_range = &this->entity_map_;
  __for_begin._M_cur = std::unordered_map<unsigned int,std::shared_ptr<Entity>>::begin(&this->entity_map_)._M_cur;
  __for_end._M_cur = std::unordered_map<unsigned int,std::shared_ptr<Entity>>::end(&this->entity_map_)._M_cur;
  while ( std::__detail::operator!=<std::pair<unsigned int const,std::shared_ptr<Entity>>,false>(
            &__for_begin,
            &__for_end) )
  {
    __in = std::__detail::_Node_iterator<std::pair<unsigned int const,std::shared_ptr<Entity>>,false,false>::operator*(&__for_begin);
    entity_id = std::get<0ul,unsigned int const,std::shared_ptr<Entity>>(__in);
    entity_ptr = std::get<1ul,unsigned int const,std::shared_ptr<Entity>>(__in);
    if ( !std::operator==<Entity>(entity_ptr, 0LL) )
    {
      std::__shared_ptr_access<Entity,(__gnu_cxx::_Lock_policy)2,false,false>::operator*((const std::__shared_ptr_access<Entity,(__gnu_cxx::_Lock_policy)2,false,false> *const)entity_ptr);
      toPtr<Gadget,Entity>((Entity *)(p_M_end_of_storage + 32));
      v4 = 0;
      v5 = 0;
      if ( std::operator!=<Gadget>((const std::shared_ptr<Gadget> *)(p_M_end_of_storage + 32), 0LL) )
      {
        std::__shared_ptr_access<Gadget,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Gadget,(__gnu_cxx::_Lock_policy)2,false,false> *const)(p_M_end_of_storage + 32));
        EcsBase<Gadget,GadgetCompBase,28u>::findComp<GatherComp>(&v14);
        v4 = 1;
        if ( std::operator!=<GatherComp>((const std::shared_ptr<GatherComp> *)&v14, 0LL) )
          v5 = 1;
      }
      if ( v4 )
        std::shared_ptr<GatherComp>::~shared_ptr((std::shared_ptr<GatherComp> *const)&v14);
      if ( v5 )
        ++gather_count;
      std::shared_ptr<Gadget>::~shared_ptr((std::shared_ptr<Gadget> *const)(p_M_end_of_storage + 32));
    }
    std::__detail::_Node_iterator<std::pair<unsigned int const,std::shared_ptr<Entity>>,false,false>::operator++(&__for_begin);
  }
  result = gather_count;
  if ( &v14.comp_vec_._M_impl._M_end_of_storage == (std::_Vector_base<std::pair<unsigned int,std::shared_ptr<GadgetCompBase> >>::pointer *)p_M_end_of_storage )
  {
    *(_QWORD *)((p_M_end_of_storage >> 3) + 0x7FFF8000) = 0LL;
  }
  else
  {
    *(_QWORD *)p_M_end_of_storage = 1172321806LL;
    *(_QWORD *)((p_M_end_of_storage >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 5965: range 00000000159AA784-00000000159AA8C6
int32_t __cdecl Scene::getGatherCountInSightForPerf(Scene *const this)
{
  unsigned __int64 v1; // rbx
  __int64 v2; // rax
  unsigned __int64 v3; // r14
  int32_t result; // eax
  std::function<ForeachPolicy(Player&)> p_func; // [rsp+10h] [rbp-90h] BYREF
  char v6[112]; // [rsp+30h] [rbp-70h] BYREF

  v1 = (unsigned __int64)v6;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_0(64LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "1 32 4 17 gather_count:5966";
  *(_QWORD *)(v1 + 16) = Scene::getGatherCountInSightForPerf;
  v3 = v1 >> 3;
  *(_DWORD *)(v3 + 2147450880) = -235802127;
  *(_DWORD *)(v3 + 2147450884) = -202116348;
  *(_DWORD *)(v1 + 32) = 0;
  std::function<ForeachPolicy ()(Player &)>::function<Scene::getGatherCountInSightForPerf(void)::{lambda(Player &)#1},void,void>(
    &p_func,
    (Scene::getGatherCountInSightForPerf::<lambda(Player&)>)__PAIR128__((unsigned __int64)this, v1 + 32));
  Scene::foreachPlayer(this, &p_func);
  std::function<ForeachPolicy ()(Player &)>::~function(&p_func);
  result = *(_DWORD *)(v1 + 32);
  if ( v6 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 5967: range 00000000159AA3BA-00000000159AA783
ForeachPolicy __cdecl Scene::getGatherCountInSightForPerf(void)::{lambda(Player &)#1}::operator()(
        const Scene::getGatherCountInSightForPerf::<lambda(Player&)> *const __closure,
        Player *player)
{
  unsigned __int64 v2; // r13
  __int64 v3; // rax
  _DWORD *v4; // r12
  Scene *this; // r14
  Entity *v6; // rax
  int v7; // esi
  uint32_t *gather_count; // rdx
  uint32_t v9; // ecx
  uint32_t *v10; // rdx
  __int64 v11; // rsi
  ForeachPolicy result; // eax
  std::shared_ptr<Avatar> __r; // [rsp+10h] [rbp-130h] BYREF
  std::shared_ptr<Entity> p_; // [rsp+20h] [rbp-120h] BYREF
  char v15[272]; // [rsp+30h] [rbp-110h] BYREF

  v2 = (unsigned __int64)v15;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_2(224LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "3 48 16 15 avatar_ptr:5969 80 24 15 gadget_vec:5972 144 48 12 visitor:5973";
  *(_QWORD *)(v2 + 16) = Scene::getGatherCountInSightForPerf(void)::{lambda(Player &)#1}::operator();
  v4 = (_DWORD *)(v2 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = 61937;
  v4[536862722] = 62194;
  v4[536862723] = -218959360;
  v4[536862724] = 62194;
  v4[536862726] = -202116109;
  Player::getCurAvatar((Player *const)(v2 + 48));
  if ( std::operator!=<Avatar>((const std::shared_ptr<Avatar> *)(v2 + 48), 0LL) )
  {
    std::vector<std::shared_ptr<Gadget>>::vector((std::vector<std::shared_ptr<Gadget>> *const)(v2 + 80));
    std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::operator*((const std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 48));
    toThisPtr<Avatar>((Avatar *)&__r);
    std::shared_ptr<Entity>::shared_ptr<Avatar,void>(&p_, &__r);
    ZN13GatherVisitorCI27VisitorESt10shared_ptrI6EntityE((GatherVisitor *const)(v2 + 144), &p_);
    std::shared_ptr<Entity>::~shared_ptr(&p_);
    std::shared_ptr<Avatar>::~shared_ptr(&__r);
    if ( *(_BYTE *)(((unsigned __int64)&__closure->__this >> 3) + 0x7FFF8000) )
      __asan_report_load8();
    this = __closure->__this;
    v6 = (Entity *)std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::operator*((const std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 48));
    Scene::getSurroundEntities<std::shared_ptr<Gadget>>(
      this,
      (Visitor *)(v2 + 144),
      v6,
      (std::vector<std::shared_ptr<Gadget>> *)(v2 + 80));
    v7 = std::vector<std::shared_ptr<Gadget>>::size((const std::vector<std::shared_ptr<Gadget>> *const)(v2 + 80));
    if ( *(_BYTE *)(((unsigned __int64)__closure >> 3) + 0x7FFF8000) )
      __asan_report_load8();
    gather_count = __closure->__gather_count;
    if ( *(_BYTE *)(((unsigned __int64)__closure->__gather_count >> 3) + 0x7FFF8000) != 0
      && (char)(((__int64)__closure->__gather_count & 7) + 3) >= *(_BYTE *)(((unsigned __int64)__closure->__gather_count >> 3)
                                                                          + 0x7FFF8000) )
    {
      __asan_report_load4(__closure->__gather_count);
    }
    v9 = *gather_count;
    v10 = __closure->__gather_count;
    v11 = v9 + v7;
    if ( *(_BYTE *)(((unsigned __int64)__closure->__gather_count >> 3) + 0x7FFF8000) != 0
      && (char)(((__int64)__closure->__gather_count & 7) + 3) >= *(_BYTE *)(((unsigned __int64)__closure->__gather_count >> 3)
                                                                          + 0x7FFF8000) )
    {
      __asan_report_store4(__closure->__gather_count, v11, (_BYTE)v10);
    }
    *v10 = v11;
    GatherVisitor::~GatherVisitor((GatherVisitor *const)(v2 + 144));
    std::vector<std::shared_ptr<Gadget>>::~vector((std::vector<std::shared_ptr<Gadget>> *const)(v2 + 80));
  }
  std::shared_ptr<Avatar>::~shared_ptr((std::shared_ptr<Avatar> *const)(v2 + 48));
  result = FOREACH_CONTINUE;
  if ( v15 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8010) = 0;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8018) = 0;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8018) = -168430091;
  }
  return result;
};

// Line 5983: range 00000000159AA8C8-00000000159AA9E8
int32_t __cdecl Scene::getGadgetCountForPerf(Scene *const this)
{
  unsigned __int64 v1; // rax
  unsigned __int64 v2; // rdx
  int32_t gadget_count; // [rsp+1Ch] [rbp-34h]
  std::unordered_map<unsigned int,std::shared_ptr<Entity>>::iterator __for_begin; // [rsp+20h] [rbp-30h] BYREF
  std::unordered_map<unsigned int,std::shared_ptr<Entity>>::iterator __for_end; // [rsp+28h] [rbp-28h] BYREF
  std::unordered_map<unsigned int,std::shared_ptr<Entity>> *__for_range; // [rsp+30h] [rbp-20h]
  std::pair<unsigned int const,std::shared_ptr<Entity> > *__in; // [rsp+38h] [rbp-18h]
  std::tuple_element<0,std::pair<unsigned int const,std::shared_ptr<Entity> > >::type *entity_id; // [rsp+40h] [rbp-10h]
  std::tuple_element<1,std::pair<unsigned int const,std::shared_ptr<Entity> > >::type *entity_ptr; // [rsp+48h] [rbp-8h]

  gadget_count = 0;
  __for_range = &this->entity_map_;
  __for_begin._M_cur = std::unordered_map<unsigned int,std::shared_ptr<Entity>>::begin(&this->entity_map_)._M_cur;
  __for_end._M_cur = std::unordered_map<unsigned int,std::shared_ptr<Entity>>::end(&this->entity_map_)._M_cur;
  while ( std::__detail::operator!=<std::pair<unsigned int const,std::shared_ptr<Entity>>,false>(
            &__for_begin,
            &__for_end) )
  {
    __in = std::__detail::_Node_iterator<std::pair<unsigned int const,std::shared_ptr<Entity>>,false,false>::operator*(&__for_begin);
    entity_id = std::get<0ul,unsigned int const,std::shared_ptr<Entity>>(__in);
    entity_ptr = std::get<1ul,unsigned int const,std::shared_ptr<Entity>>(__in);
    if ( !std::operator==<Entity>(entity_ptr, 0LL) )
    {
      v1 = (unsigned __int64)std::__shared_ptr_access<Entity,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Entity,(__gnu_cxx::_Lock_policy)2,false,false> *const)entity_ptr);
      if ( *(_BYTE *)((v1 >> 3) + 0x7FFF8000) )
        v1 = __asan_report_load8();
      v2 = *(_QWORD *)v1 + 24LL;
      if ( *(_BYTE *)((v2 >> 3) + 0x7FFF8000) )
        v1 = __asan_report_load8();
      if ( (*(unsigned int (__fastcall **)(unsigned __int64))v2)(v1) == 4 )
        ++gadget_count;
    }
    std::__detail::_Node_iterator<std::pair<unsigned int const,std::shared_ptr<Entity>>,false,false>::operator++(&__for_begin);
  }
  return gadget_count;
};

// Line 5997: range 00000000159AA9EA-00000000159AAB0A
int32_t __cdecl Scene::getMonsterCountForPerf(Scene *const this)
{
  unsigned __int64 v1; // rax
  unsigned __int64 v2; // rdx
  int32_t monster_count; // [rsp+1Ch] [rbp-34h]
  std::unordered_map<unsigned int,std::shared_ptr<Entity>>::iterator __for_begin; // [rsp+20h] [rbp-30h] BYREF
  std::unordered_map<unsigned int,std::shared_ptr<Entity>>::iterator __for_end; // [rsp+28h] [rbp-28h] BYREF
  std::unordered_map<unsigned int,std::shared_ptr<Entity>> *__for_range; // [rsp+30h] [rbp-20h]
  std::pair<unsigned int const,std::shared_ptr<Entity> > *__in; // [rsp+38h] [rbp-18h]
  std::tuple_element<0,std::pair<unsigned int const,std::shared_ptr<Entity> > >::type *entity_id; // [rsp+40h] [rbp-10h]
  std::tuple_element<1,std::pair<unsigned int const,std::shared_ptr<Entity> > >::type *entity_ptr; // [rsp+48h] [rbp-8h]

  monster_count = 0;
  __for_range = &this->entity_map_;
  __for_begin._M_cur = std::unordered_map<unsigned int,std::shared_ptr<Entity>>::begin(&this->entity_map_)._M_cur;
  __for_end._M_cur = std::unordered_map<unsigned int,std::shared_ptr<Entity>>::end(&this->entity_map_)._M_cur;
  while ( std::__detail::operator!=<std::pair<unsigned int const,std::shared_ptr<Entity>>,false>(
            &__for_begin,
            &__for_end) )
  {
    __in = std::__detail::_Node_iterator<std::pair<unsigned int const,std::shared_ptr<Entity>>,false,false>::operator*(&__for_begin);
    entity_id = std::get<0ul,unsigned int const,std::shared_ptr<Entity>>(__in);
    entity_ptr = std::get<1ul,unsigned int const,std::shared_ptr<Entity>>(__in);
    if ( !std::operator==<Entity>(entity_ptr, 0LL) )
    {
      v1 = (unsigned __int64)std::__shared_ptr_access<Entity,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Entity,(__gnu_cxx::_Lock_policy)2,false,false> *const)entity_ptr);
      if ( *(_BYTE *)((v1 >> 3) + 0x7FFF8000) )
        v1 = __asan_report_load8();
      v2 = *(_QWORD *)v1 + 24LL;
      if ( *(_BYTE *)((v2 >> 3) + 0x7FFF8000) )
        v1 = __asan_report_load8();
      if ( (*(unsigned int (__fastcall **)(unsigned __int64))v2)(v1) == 2 )
        ++monster_count;
    }
    std::__detail::_Node_iterator<std::pair<unsigned int const,std::shared_ptr<Entity>>,false,false>::operator++(&__for_begin);
  }
  return monster_count;
};

// Line 6011: range 00000000159AAB0C-00000000159AB05C
void __cdecl Scene::onVehicleEnterScene(Scene *const this, PlayerPtr *p_player_ptr, GadgetPtr *p_gadget_ptr)
{
  unsigned __int64 v3; // r12
  __int64 v4; // rax
  _DWORD *v5; // r13
  common::milog::MiLogStream *v6; // rax
  common::milog::MiLogStream *v7; // rax
  std::__shared_ptr_access<Player,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v8; // rax
  std::__shared_ptr_access<Gadget,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v9; // rax
  common::milog::MiLogStream *v10; // rax
  common::milog::MiLogStream *v11; // rax
  common::milog::MiLogStream *v12; // r14
  std::__shared_ptr_access<Gadget,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v13; // rax
  common::milog::MiLogStream *v14; // rax
  std::__shared_ptr_access<Gadget,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v15; // rax
  common::milog::MiLogStream *v16; // rax
  common::milog::MiLogStream *v17; // rax
  common::milog::MiLogStream *v18; // r14
  std::__shared_ptr_access<Gadget,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v19; // rax
  common::milog::MiLogStream *v20; // rax
  std::weak_ptr<Gadget> *v21; // rdx
  unsigned int val; // [rsp+2Ch] [rbp-E4h] BYREF
  std::_Rb_tree_iterator<std::pair<unsigned int const,std::weak_ptr<Gadget> > >::_Self __y; // [rsp+30h] [rbp-E0h] BYREF
  std::map<unsigned int,std::weak_ptr<Gadget>> *vehicle_map; // [rsp+38h] [rbp-D8h]
  common::milog::MiLogStream v26; // [rsp+40h] [rbp-D0h] BYREF
  char v27[176]; // [rsp+60h] [rbp-B0h] BYREF

  v3 = (unsigned __int64)v27;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_1(128LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "4 32 4 8 uid:6022 48 4 14 config_id:6023 64 8 9 iter:6025 96 16 20 old_vehicle_ptr:6029";
  *(_QWORD *)(v3 + 16) = Scene::onVehicleEnterScene;
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = -234556924;
  v5[536862722] = -218959360;
  v5[536862723] = -202178560;
  if ( std::operator==<Player>(0LL, p_player_ptr) )
  {
    common::milog::MiLogStream::create(
      &v26,
      &common::milog::MiLogDefault::default_log_obj_,
      1u,
      "./src/scene/scene.cpp",
      "onVehicleEnterScene",
      6014);
    v6 = common::milog::MiLogStream::operator<<<char [49],(char *[49])0>(
           &v26,
           (const char (*)[49])"vehicle enter but player_ptr is null, owner_uid:");
    common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v6, &this->owner_uid_);
    common::milog::MiLogStream::~MiLogStream(&v26);
  }
  else if ( std::operator==<Gadget>(0LL, p_gadget_ptr) )
  {
    common::milog::MiLogStream::create(
      &v26,
      &common::milog::MiLogDefault::default_log_obj_,
      1u,
      "./src/scene/scene.cpp",
      "onVehicleEnterScene",
      6019);
    v7 = common::milog::MiLogStream::operator<<<char [49],(char *[49])0>(
           &v26,
           (const char (*)[49])"vehicle enter but gadget_ptr is null, owner_uid:");
    common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v7, &this->owner_uid_);
    common::milog::MiLogStream::~MiLogStream(&v26);
  }
  else
  {
    v8 = std::__shared_ptr_access<Player,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Player,(__gnu_cxx::_Lock_policy)2,false,false> *const)p_player_ptr);
    *(_DWORD *)(v3 + 32) = Player::getUid(v8);
    v9 = std::__shared_ptr_access<Gadget,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Gadget,(__gnu_cxx::_Lock_policy)2,false,false> *const)p_gadget_ptr);
    *(_DWORD *)(v3 + 48) = Gadget::getGadgetId(v9);
    vehicle_map = std::map<unsigned int,std::map<unsigned int,std::weak_ptr<Gadget>>>::operator[](
                    &this->player_vehicle_map_,
                    (const std::map<unsigned int,std::map<unsigned int,std::weak_ptr<Gadget>>>::key_type *)(v3 + 32));
    *(std::map<unsigned int,std::weak_ptr<Gadget>>::iterator *)(v3 + 64) = std::map<unsigned int,std::weak_ptr<Gadget>>::find(
                                                                             vehicle_map,
                                                                             (const std::map<unsigned int,std::weak_ptr<Gadget>>::key_type *)(v3 + 48));
    __y._M_node = std::map<unsigned int,std::weak_ptr<Gadget>>::end(vehicle_map)._M_node;
    if ( std::operator!=(
           (const std::_Rb_tree_iterator<std::pair<unsigned int const,std::weak_ptr<Gadget> > >::_Self *)(v3 + 64),
           &__y) )
    {
      std::_Rb_tree_iterator<std::pair<unsigned int const,std::weak_ptr<Gadget>>>::operator->((const std::_Rb_tree_iterator<std::pair<unsigned int const,std::weak_ptr<Gadget> > > *const)(v3 + 64));
      std::weak_ptr<Gadget>::lock((const std::weak_ptr<Gadget> *const)(v3 + 96));
      if ( std::operator!=<Gadget>(0LL, (const std::shared_ptr<Gadget> *)(v3 + 96)) )
      {
        common::milog::MiLogStream::create(
          &v26,
          &common::milog::MiLogDefault::default_log_obj_,
          1u,
          "./src/scene/scene.cpp",
          "onVehicleEnterScene",
          6032);
        v10 = common::milog::MiLogStream::operator<<<char [5],(char *[5])0>(&v26, (const char (*)[5])"uid:");
        v11 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                v10,
                (const unsigned int *)(v3 + 32));
        v12 = common::milog::MiLogStream::operator<<<char [14],(char *[14])0>(v11, (const char (*)[14])" old vehicle:");
        v13 = std::__shared_ptr_access<Gadget,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Gadget,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 96));
        val = Entity::getEntityId((const Entity *const)v13);
        v14 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v12, &val);
        common::milog::MiLogStream::operator<<<char [13],(char *[13])0>(v14, (const char (*)[13])" leave scene");
        common::milog::MiLogStream::~MiLogStream(&v26);
        v15 = std::__shared_ptr_access<Gadget,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Gadget,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 96));
        Creature::subCurHpToZero(v15, CHANGE_HP_SUB_REPLACE, 1);
      }
      std::shared_ptr<Gadget>::~shared_ptr((std::shared_ptr<Gadget> *const)(v3 + 96));
    }
    common::milog::MiLogStream::create(
      &v26,
      &common::milog::MiLogDefault::default_log_obj_,
      1u,
      "./src/scene/scene.cpp",
      "onVehicleEnterScene",
      6036);
    v16 = common::milog::MiLogStream::operator<<<char [5],(char *[5])0>(&v26, (const char (*)[5])"uid:");
    v17 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v16, (const unsigned int *)(v3 + 32));
    v18 = common::milog::MiLogStream::operator<<<char [14],(char *[14])0>(v17, (const char (*)[14])" new vehicle:");
    v19 = std::__shared_ptr_access<Gadget,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Gadget,(__gnu_cxx::_Lock_policy)2,false,false> *const)p_gadget_ptr);
    val = Entity::getEntityId((const Entity *const)v19);
    v20 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v18, &val);
    common::milog::MiLogStream::operator<<<char [13],(char *[13])0>(v20, (const char (*)[13])" enter scene");
    common::milog::MiLogStream::~MiLogStream(&v26);
    v21 = std::map<unsigned int,std::weak_ptr<Gadget>>::operator[](
            vehicle_map,
            (const std::map<unsigned int,std::weak_ptr<Gadget>>::key_type *)(v3 + 48));
    std::weak_ptr<Gadget>::operator=<Gadget>(v21, p_gadget_ptr);
  }
  if ( v27 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
};

// Line 6041: range 00000000159AB05E-00000000159AB2AD
Scene *__fastcall Scene::getVehicleByUidAndConfigid(Scene *const this, __int64 uid, uint32_t config_id, int a4)
{
  unsigned __int64 v4; // r12
  __int64 v5; // rax
  _DWORD *v6; // r13
  std::_Rb_tree_iterator<std::pair<unsigned int const,std::map<unsigned int,std::weak_ptr<Gadget>> > >::_Self __y; // [rsp+20h] [rbp-B0h] BYREF
  std::map<unsigned int,std::weak_ptr<Gadget>> *vehicle_map; // [rsp+28h] [rbp-A8h]
  char v12[160]; // [rsp+30h] [rbp-A0h] BYREF

  v4 = (unsigned __int64)v12;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v5 = __asan_stack_malloc_1(128LL);
    if ( v5 )
      v4 = v5;
  }
  *(_QWORD *)v4 = 1102416563LL;
  *(_QWORD *)(v4 + 8) = "4 32 4 8 uid:6040 48 4 14 config_id:6040 64 8 9 iter:6042 96 8 17 vehicle_iter:6048";
  *(_QWORD *)(v4 + 16) = Scene::getVehicleByUidAndConfigid;
  v6 = (_DWORD *)(v4 >> 3);
  v6[536862720] = -235802127;
  v6[536862721] = -234556924;
  v6[536862722] = -218959360;
  v6[536862723] = -202116352;
  *(_DWORD *)(v4 + 32) = config_id;
  *(_DWORD *)(v4 + 48) = a4;
  *(std::map<unsigned int,std::map<unsigned int,std::weak_ptr<Gadget>>>::iterator *)(v4 + 64) = std::map<unsigned int,std::map<unsigned int,std::weak_ptr<Gadget>>>::find(
                                                                                                  (std::map<unsigned int,std::map<unsigned int,std::weak_ptr<Gadget>>> *const)(uid + 1984),
                                                                                                  (const std::map<unsigned int,std::map<unsigned int,std::weak_ptr<Gadget>>>::key_type *)(v4 + 32));
  __y._M_node = std::map<unsigned int,std::map<unsigned int,std::weak_ptr<Gadget>>>::end((std::map<unsigned int,std::map<unsigned int,std::weak_ptr<Gadget>>> *const)(uid + 1984))._M_node;
  if ( std::operator==(
         (const std::_Rb_tree_iterator<std::pair<unsigned int const,std::map<unsigned int,std::weak_ptr<Gadget>> > >::_Self *)(v4 + 64),
         &__y)
    || (vehicle_map = &std::_Rb_tree_iterator<std::pair<unsigned int const,std::map<unsigned int,std::weak_ptr<Gadget>>>>::operator->((const std::_Rb_tree_iterator<std::pair<unsigned int const,std::map<unsigned int,std::weak_ptr<Gadget>> > > *const)(v4 + 64))->second,
        *(std::map<unsigned int,std::weak_ptr<Gadget>>::iterator *)(v4 + 96) = std::map<unsigned int,std::weak_ptr<Gadget>>::find(
                                                                                 vehicle_map,
                                                                                 (const std::map<unsigned int,std::weak_ptr<Gadget>>::key_type *)(v4 + 48)),
        __y._M_node = std::map<unsigned int,std::weak_ptr<Gadget>>::end(vehicle_map)._M_node,
        std::operator==(
          (const std::_Rb_tree_iterator<std::pair<unsigned int const,std::weak_ptr<Gadget> > >::_Self *)(v4 + 96),
          (const std::_Rb_tree_iterator<std::pair<unsigned int const,std::weak_ptr<Gadget> > >::_Self *)&__y)) )
  {
    std::shared_ptr<Gadget>::shared_ptr((std::shared_ptr<Gadget> *const)this, 0LL);
  }
  else
  {
    std::_Rb_tree_iterator<std::pair<unsigned int const,std::weak_ptr<Gadget>>>::operator->((const std::_Rb_tree_iterator<std::pair<unsigned int const,std::weak_ptr<Gadget> > > *const)(v4 + 96));
    if ( *(_WORD *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
      __asan_report_store16(this, &__y);
    std::weak_ptr<Gadget>::lock((const std::weak_ptr<Gadget> *const)this);
  }
  if ( v12 == (char *)v4 )
  {
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v4 = 1172321806LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return this;
};

// Line 6057: range 00000000159AB2AE-00000000159AB4DC
__int64 __fastcall Scene::clearVehicleByUidAndConfigid(
        Scene *const this,
        uint32_t uid,
        uint32_t config_id,
        proto::ChangHpReason reason)
{
  unsigned __int64 v4; // r12
  __int64 v5; // rax
  _DWORD *v6; // r13
  unsigned int v7; // r14d
  std::__shared_ptr_access<Gadget,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v8; // rax
  std::_Rb_tree_iterator<std::pair<unsigned int const,std::map<unsigned int,std::weak_ptr<Gadget>> > >::pointer v9; // rax
  __int64 result; // rax
  std::_Rb_tree_iterator<std::pair<unsigned int const,std::map<unsigned int,std::weak_ptr<Gadget>> > >::_Self __y; // [rsp+28h] [rbp-B8h] BYREF
  char v14[176]; // [rsp+30h] [rbp-B0h] BYREF

  v4 = (unsigned __int64)v14;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v5 = __asan_stack_malloc_1(128LL);
    if ( v5 )
      v4 = v5;
  }
  *(_QWORD *)v4 = 1102416563LL;
  *(_QWORD *)(v4 + 8) = "4 32 4 8 uid:6056 48 4 14 config_id:6056 64 8 9 iter:6065 96 16 16 vehicle_ptr:6059";
  *(_QWORD *)(v4 + 16) = Scene::clearVehicleByUidAndConfigid;
  v6 = (_DWORD *)(v4 >> 3);
  v6[536862720] = -235802127;
  v6[536862721] = -234556924;
  v6[536862722] = -218959360;
  v6[536862723] = -202178560;
  *(_DWORD *)(v4 + 32) = uid;
  *(_DWORD *)(v4 + 48) = config_id;
  Scene::getVehicleByUidAndConfigid((Scene *const)(v4 + 96), (__int64)this, *(_DWORD *)(v4 + 32), *(_DWORD *)(v4 + 48));
  if ( std::operator==<Gadget>(0LL, (const std::shared_ptr<Gadget> *)(v4 + 96)) )
  {
    v7 = 1;
  }
  else
  {
    v8 = std::__shared_ptr_access<Gadget,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Gadget,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 96));
    Creature::subCurHpToZero(v8, reason, 1);
    *(std::map<unsigned int,std::map<unsigned int,std::weak_ptr<Gadget>>>::iterator *)(v4 + 64) = std::map<unsigned int,std::map<unsigned int,std::weak_ptr<Gadget>>>::find(
                                                                                                    &this->player_vehicle_map_,
                                                                                                    (const std::map<unsigned int,std::map<unsigned int,std::weak_ptr<Gadget>>>::key_type *)(v4 + 32));
    __y._M_node = std::map<unsigned int,std::map<unsigned int,std::weak_ptr<Gadget>>>::end(&this->player_vehicle_map_)._M_node;
    if ( std::operator==(
           (const std::_Rb_tree_iterator<std::pair<unsigned int const,std::map<unsigned int,std::weak_ptr<Gadget>> > >::_Self *)(v4 + 64),
           &__y) )
    {
      v7 = 1;
    }
    else
    {
      v9 = std::_Rb_tree_iterator<std::pair<unsigned int const,std::map<unsigned int,std::weak_ptr<Gadget>>>>::operator->((const std::_Rb_tree_iterator<std::pair<unsigned int const,std::map<unsigned int,std::weak_ptr<Gadget>> > > *const)(v4 + 64));
      std::map<unsigned int,std::weak_ptr<Gadget>>::erase(
        &v9->second,
        (const std::map<unsigned int,std::weak_ptr<Gadget>>::key_type *)(v4 + 48));
      v7 = 0;
    }
  }
  std::shared_ptr<Gadget>::~shared_ptr((std::shared_ptr<Gadget> *const)(v4 + 96));
  result = v7;
  if ( v14 == (char *)v4 )
  {
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v4 = 1172321806LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 6075: range 00000000159AB4DE-00000000159AB8A3
void __fastcall Scene::clearPlayerVehicle(Scene *const this, uint32_t uid)
{
  unsigned __int64 v2; // r12
  __int64 v3; // rax
  _DWORD *v4; // r13
  std::__shared_ptr_access<Gadget,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v5; // rax
  common::milog::MiLogStream *v6; // rax
  common::milog::MiLogStream *v7; // rax
  common::milog::MiLogStream *v8; // rax
  std::map<unsigned int,std::weak_ptr<Gadget>>::iterator __for_begin; // [rsp+18h] [rbp-108h] BYREF
  std::map<unsigned int,std::weak_ptr<Gadget>>::iterator __for_end; // [rsp+20h] [rbp-100h] BYREF
  std::map<unsigned int,std::weak_ptr<Gadget>> *vehicle_map; // [rsp+28h] [rbp-F8h]
  std::map<unsigned int,std::weak_ptr<Gadget>> *__for_range; // [rsp+30h] [rbp-F0h]
  std::pair<unsigned int const,std::weak_ptr<Gadget> > *__in; // [rsp+38h] [rbp-E8h]
  std::tuple_element<0,std::pair<unsigned int const,std::weak_ptr<Gadget> > >::type *config_id; // [rsp+40h] [rbp-E0h]
  std::tuple_element<1,std::pair<unsigned int const,std::weak_ptr<Gadget> > >::type *vehicle_wtr; // [rsp+48h] [rbp-D8h]
  common::milog::MiLogStream v16; // [rsp+50h] [rbp-D0h] BYREF
  char v17[176]; // [rsp+70h] [rbp-B0h] BYREF

  v2 = (unsigned __int64)v17;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_1(128LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "3 48 4 8 uid:6074 64 8 9 iter:6080 96 16 16 vehicle_ptr:6088";
  *(_QWORD *)(v2 + 16) = Scene::clearPlayerVehicle;
  v4 = (_DWORD *)(v2 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = -234556943;
  v4[536862722] = -218959360;
  v4[536862723] = -202178560;
  *(_DWORD *)(v2 + 48) = uid;
  if ( *(_BYTE *)(((unsigned __int64)&this->owner_uid_ >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->owner_uid_ >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4(&this->owner_uid_);
  }
  if ( this->owner_uid_ != *(_DWORD *)(v2 + 48) )
  {
    *(std::map<unsigned int,std::map<unsigned int,std::weak_ptr<Gadget>>>::iterator *)(v2 + 64) = std::map<unsigned int,std::map<unsigned int,std::weak_ptr<Gadget>>>::find(
                                                                                                    &this->player_vehicle_map_,
                                                                                                    (const std::map<unsigned int,std::map<unsigned int,std::weak_ptr<Gadget>>>::key_type *)(v2 + 48));
    __for_end._M_node = std::map<unsigned int,std::map<unsigned int,std::weak_ptr<Gadget>>>::end(&this->player_vehicle_map_)._M_node;
    if ( !std::operator==(
            (const std::_Rb_tree_iterator<std::pair<unsigned int const,std::map<unsigned int,std::weak_ptr<Gadget>> > >::_Self *)(v2 + 64),
            (const std::_Rb_tree_iterator<std::pair<unsigned int const,std::map<unsigned int,std::weak_ptr<Gadget>> > >::_Self *)&__for_end) )
    {
      vehicle_map = &std::_Rb_tree_iterator<std::pair<unsigned int const,std::map<unsigned int,std::weak_ptr<Gadget>>>>::operator->((const std::_Rb_tree_iterator<std::pair<unsigned int const,std::map<unsigned int,std::weak_ptr<Gadget>> > > *const)(v2 + 64))->second;
      __for_range = vehicle_map;
      __for_begin._M_node = std::map<unsigned int,std::weak_ptr<Gadget>>::begin(vehicle_map)._M_node;
      __for_end._M_node = std::map<unsigned int,std::weak_ptr<Gadget>>::end(__for_range)._M_node;
      while ( std::operator!=(&__for_begin, &__for_end) )
      {
        __in = std::_Rb_tree_iterator<std::pair<unsigned int const,std::weak_ptr<Gadget>>>::operator*(&__for_begin);
        config_id = std::get<0ul,unsigned int const,std::weak_ptr<Gadget>>(__in);
        vehicle_wtr = std::get<1ul,unsigned int const,std::weak_ptr<Gadget>>(__in);
        std::weak_ptr<Gadget>::lock((const std::weak_ptr<Gadget> *const)(v2 + 96));
        if ( !std::operator==<Gadget>(0LL, (const std::shared_ptr<Gadget> *)(v2 + 96)) )
        {
          v5 = std::__shared_ptr_access<Gadget,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Gadget,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 96));
          Creature::subCurHpToZero(v5, CHANGE_HP_SUB_PLAYER_LEAVE, 1);
          common::milog::MiLogStream::create(
            &v16,
            &common::milog::MiLogDefault::default_log_obj_,
            1u,
            "./src/scene/scene.cpp",
            "clearPlayerVehicle",
            6094);
          v6 = common::milog::MiLogStream::operator<<<char [5],(char *[5])0>(&v16, (const char (*)[5])"uid:");
          v7 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                 v6,
                 (const unsigned int *)(v2 + 48));
          v8 = common::milog::MiLogStream::operator<<<char [29],(char *[29])0>(
                 v7,
                 (const char (*)[29])" leave scene leave vehicle: ");
          common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v8, config_id);
          common::milog::MiLogStream::~MiLogStream(&v16);
        }
        std::shared_ptr<Gadget>::~shared_ptr((std::shared_ptr<Gadget> *const)(v2 + 96));
        std::_Rb_tree_iterator<std::pair<unsigned int const,std::weak_ptr<Gadget>>>::operator++(&__for_begin);
      }
      std::map<unsigned int,std::map<unsigned int,std::weak_ptr<Gadget>>>::erase[abi:cxx11](
        &this->player_vehicle_map_,
        *(std::map<unsigned int,std::map<unsigned int,std::weak_ptr<Gadget>>>::iterator *)(v2 + 64));
    }
  }
  if ( v17 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
};

// Line 6100: range 00000000159AB8A4-00000000159ABEEF
Scene *__fastcall Scene::createPlayerVehicle(
        Scene *const this,
        Scene *vehicle_id,
        const Vector3 *pos,
        unsigned __int64 rot,
        unsigned __int64 p_player_ptr,
        const std::shared_ptr<Player> *reason,
        proto::CreateGadgetReason reason_extra,
        uint32_t reason_extraa)
{
  unsigned __int64 v8; // r13
  __int64 v9; // rax
  _DWORD *v10; // r12
  unsigned int v11; // eax
  common::milog::MiLogStream *v12; // rax
  common::milog::MiLogStream *v13; // rax
  std::__shared_ptr_access<data::ConfigGadget,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v14; // rax
  common::milog::MiLogStream *v15; // rax
  common::milog::MiLogStream *v16; // rax
  unsigned __int64 v17; // rax
  unsigned __int64 v18; // rdx
  int v23; // [rsp+1Ch] [rbp-474h]
  common::milog::MiLogStream v24; // [rsp+30h] [rbp-460h] BYREF
  char v25[1088]; // [rsp+50h] [rbp-440h] BYREF

  v23 = (int)pos;
  v8 = (unsigned __int64)v25;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v9 = __asan_stack_malloc_5(1056LL);
    if ( v9 )
      v8 = v9;
  }
  *(_QWORD *)v8 = 1102416563LL;
  *(_QWORD *)(v8 + 8) = "4 32 4 15 vehicle_id:6099 48 16 22 config_gadget_ptr:6102 80 16 15 gadget_ptr:6122 112 816 17 gadget_param:6113";
  *(_QWORD *)(v8 + 16) = Scene::createPlayerVehicle;
  v10 = (_DWORD *)(v8 >> 3);
  v10[536862720] = -235802127;
  v10[536862721] = 61956;
  v10[536862722] = 62194;
  v10[536862723] = 62194;
  v10[536862749] = -202116109;
  v10[536862750] = -202116109;
  v10[536862751] = -202116109;
  v10[536862752] = -202116109;
  *(_DWORD *)(v8 + 32) = v23;
  ServiceBox::findService<GameserverService>();
  GameserverService::getConfig((GameserverService *const)(v8 + 80));
  v11 = (unsigned int)std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v8 + 80));
  JsonConfigMgr::findGadgetConfig((const JsonConfigMgr *const)(v8 + 48), v11 + 93080);
  std::shared_ptr<Config>::~shared_ptr((std::shared_ptr<Config> *const)(v8 + 80));
  if ( std::operator==<data::ConfigGadget>(0LL, (const std::shared_ptr<data::ConfigGadget> *)(v8 + 48)) )
  {
    common::milog::MiLogStream::create(
      &v24,
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/scene/scene.cpp",
      "createPlayerVehicle",
      6105);
    v12 = common::milog::MiLogStream::operator<<<char [12],(char *[12])0>(&v24, (const char (*)[12])"gadget_id: ");
    v13 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v12, (const unsigned int *)(v8 + 32));
    common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(v13, (const char (*)[16])off_258E3860);
    common::milog::MiLogStream::~MiLogStream(&v24);
    std::shared_ptr<Gadget>::shared_ptr((std::shared_ptr<Gadget> *const)this, 0LL);
  }
  else
  {
    v14 = std::__shared_ptr_access<data::ConfigGadget,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<data::ConfigGadget,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v8 + 48));
    if ( *(_BYTE *)(((unsigned __int64)&v14->vehicle >> 3) + 0x7FFF8000) != 0
      && *(_BYTE *)(((unsigned __int64)&v14->vehicle >> 3) + 0x7FFF8000) <= 3 )
    {
      v14 = (std::__shared_ptr_access<data::ConfigGadget,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *)__asan_report_load4(&v14->vehicle);
    }
    if ( v14->vehicle.vehicle_type )
    {
      GadgetParam::GadgetParam((GadgetParam *const)(v8 + 112));
      std::shared_ptr<Player>::operator=((std::shared_ptr<Player> *const)(v8 + 304), reason);
      *(_DWORD *)(v8 + 112) = *(_DWORD *)(v8 + 32);
      *(_DWORD *)(v8 + 120) = Scene::genNewEntityId(vehicle_id, PROT_ENTITY_GADGET);
      if ( (char)(rot & 7) >= *(_BYTE *)((rot >> 3) + 0x7FFF8000) && *(_BYTE *)((rot >> 3) + 0x7FFF8000) != 0
        || *(_BYTE *)(((rot + 11) >> 3) + 0x7FFF8000) != 0
        && (char)((rot + 11) & 7) >= *(_BYTE *)(((rot + 11) >> 3) + 0x7FFF8000) )
      {
        __asan_report_load_n(rot, 12LL);
      }
      *(_QWORD *)(v8 + 124) = *(_QWORD *)rot;
      *(_DWORD *)(v8 + 132) = *(_DWORD *)(rot + 8);
      if ( (char)(p_player_ptr & 7) >= *(_BYTE *)((p_player_ptr >> 3) + 0x7FFF8000)
        && *(_BYTE *)((p_player_ptr >> 3) + 0x7FFF8000) != 0
        || *(_BYTE *)(((p_player_ptr + 11) >> 3) + 0x7FFF8000) != 0
        && (char)((p_player_ptr + 11) & 7) >= *(_BYTE *)(((p_player_ptr + 11) >> 3) + 0x7FFF8000) )
      {
        __asan_report_load_n(p_player_ptr, 12LL);
      }
      *(_QWORD *)(v8 + 136) = *(_QWORD *)p_player_ptr;
      *(_DWORD *)(v8 + 144) = *(_DWORD *)(p_player_ptr + 8);
      *(_DWORD *)(v8 + 320) = reason_extra;
      *(_DWORD *)(v8 + 324) = reason_extraa;
      EntityMgr::createGadget((const GadgetParam *)(v8 + 80));
      if ( std::operator!=<Gadget>(0LL, (const std::shared_ptr<Gadget> *)(v8 + 80)) )
      {
        v17 = (unsigned __int64)std::__shared_ptr_access<Gadget,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Gadget,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v8 + 80));
        if ( *(_BYTE *)((v17 >> 3) + 0x7FFF8000) )
          v17 = __asan_report_load8();
        v18 = *(_QWORD *)v17 + 56LL;
        if ( *(_BYTE *)((v18 >> 3) + 0x7FFF8000) )
          v17 = __asan_report_load8();
        (*(void (__fastcall **)(unsigned __int64, Scene *, VisionContext *))v18)(
          v17,
          vehicle_id,
          &VisionContext::meet_context);
      }
      std::shared_ptr<Gadget>::shared_ptr((std::shared_ptr<Gadget> *const)this, (std::shared_ptr<Gadget> *)(v8 + 80));
      std::shared_ptr<Gadget>::~shared_ptr((std::shared_ptr<Gadget> *const)(v8 + 80));
      GadgetParam::~GadgetParam((GadgetParam *const)(v8 + 112));
    }
    else
    {
      common::milog::MiLogStream::create(
        &v24,
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/scene/scene.cpp",
        "createPlayerVehicle",
        6110);
      v15 = common::milog::MiLogStream::operator<<<char [12],(char *[12])0>(&v24, (const char (*)[12])"gadget_id: ");
      v16 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v15, (const unsigned int *)(v8 + 32));
      common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(v16, (const char (*)[16])off_258E38A0);
      common::milog::MiLogStream::~MiLogStream(&v24);
      std::shared_ptr<Gadget>::shared_ptr((std::shared_ptr<Gadget> *const)this, 0LL);
    }
  }
  std::shared_ptr<data::ConfigGadget>::~shared_ptr((std::shared_ptr<data::ConfigGadget> *const)(v8 + 48));
  if ( v25 == (char *)v8 )
  {
    *(_QWORD *)((v8 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v8 >> 3) + 0x7FFF8008) = 0LL;
    *(_QWORD *)((v8 >> 3) + 0x7FFF8074) = 0LL;
    *(_QWORD *)((v8 >> 3) + 0x7FFF807C) = 0LL;
  }
  else
  {
    *(_QWORD *)v8 = 1172321806LL;
    __asan_stack_free_5(v8, 1056LL, v25);
  }
  return this;
};

// Line 6132: range 00000000159ABF52-00000000159AC01F
void __cdecl Scene::tryClearMassiveData(Scene *const this, bool is_force)
{
  bool v2; // al
  std::__shared_ptr_access<MPLevelEntity,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v3; // rax
  AbilityComp *ability_comp; // [rsp+18h] [rbp-38h]
  std::function<ForeachPolicy(BaseAbilityMixin&)> p_func; // [rsp+20h] [rbp-30h] BYREF

  v2 = Scene::getPlayerCount(this) && !is_force;
  if ( !v2 && !std::operator==<MPLevelEntity>(0LL, &this->mp_level_entity_ptr_) )
  {
    v3 = std::__shared_ptr_access<MPLevelEntity,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<MPLevelEntity,(__gnu_cxx::_Lock_policy)2,false,false> *const)&this->mp_level_entity_ptr_);
    ability_comp = Creature::getAbilityComp(v3);
    std::function<ForeachPolicy ()(BaseAbilityMixin &)>::function<Scene::tryClearMassiveData(bool)::{lambda(BaseAbilityMixin &)#1},void,void>(
      &p_func,
      (Scene::tryClearMassiveData::<lambda(BaseAbilityMixin&)>)((_BYTE)this - 56));
    AbilityComp::foreachMixin(ability_comp, &p_func);
    std::function<ForeachPolicy ()(BaseAbilityMixin &)>::~function(&p_func);
  }
};

// Line 6142: range 00000000159ABEF0-00000000159ABF51
ForeachPolicy __cdecl Scene::tryClearMassiveData(bool)::{lambda(BaseAbilityMixin &)#1}::operator()(
        const Scene::tryClearMassiveData::<lambda(BaseAbilityMixin&)> *const __closure,
        BaseAbilityMixin *mixin)
{
  AbilityScenePropSyncMixin *v2; // rax

  if ( mixin )
    v2 = (AbilityScenePropSyncMixin *)__dynamic_cast(
                                        mixin,
                                        (const struct __class_type_info *)&`typeinfo for'BaseAbilityMixin,
                                        (const struct __class_type_info *)&`typeinfo for'AbilityScenePropSyncMixin,
                                        0LL);
  else
    v2 = 0LL;
  if ( v2 )
    AbilityScenePropSyncMixin::clearData(v2);
  return 0;
};

// Line 6155: range 00000000159AC020-00000000159ACD1B
int32_t __cdecl Scene::processSceneTag(
        Scene *const this,
        const std::vector<unsigned int> *add_id_vec,
        const std::vector<unsigned int> *del_id_vec,
        const SceneTagOpParam *op_param_ptr)
{
  unsigned __int64 v4; // r13
  __int64 v5; // rax
  _DWORD *v6; // r12
  int32_t v7; // r14d
  __gnu_cxx::__normal_iterator<unsigned int const*,std::vector<unsigned int> >::reference v8; // rax
  proto::SceneTagOpType *v9; // r8
  _DWORD *v10; // rdx
  std::pair<std::_Rb_tree_iterator<std::pair<unsigned int const,proto::SceneTagOpType> >,bool> v11; // rax
  common::milog::MiLogStream *v12; // rax
  __gnu_cxx::__normal_iterator<unsigned int const*,std::vector<unsigned int> >::reference v13; // rax
  proto::SceneTagOpType *v14; // r8
  _DWORD *v15; // rdx
  std::pair<std::_Rb_tree_iterator<std::pair<unsigned int const,proto::SceneTagOpType> >,bool> v16; // rax
  common::milog::MiLogStream *v17; // rax
  SceneExcelConfigMgr *p_scene_config_mgr; // rcx
  common::milog::MiLogStream *v20; // rax
  std::__detail::_Node_iterator<std::pair<unsigned int const,proto::SceneTagOpType>,false,false>::pointer v21; // rdx
  proto::SceneTagOpType *p_second; // rax
  std::tuple_element<1,const std::pair<unsigned int const,proto::SceneTagOpType> >::type v23; // r14d
  std::tuple_element<0,const std::pair<unsigned int const,proto::SceneTagOpType> >::type *v24; // rsi
  std::unordered_map<unsigned int,proto::SceneTagOpType>::mapped_type *v25; // rax
  proto::SceneTagOpType *v26; // r8
  const proto::SceneTagOpType *v27; // r9
  std::tuple_element<1,const std::pair<unsigned int const,proto::SceneTagOpType> >::type *v28; // rdx
  char v29; // cl
  Player *v30; // rax
  PlayerEventComp *EventComp; // r14
  common::milog::MiLogStream *v32; // rax
  common::milog::MiLogStream *v33; // rax
  common::milog::MiLogStream *v34; // rax
  common::milog::MiLogStream *v35; // rax
  common::milog::MiLogStream *v36; // rax
  common::milog::MiLogStream *v37; // rax
  common::milog::MiLogStream *v38; // rax
  Player *v39; // rax
  PlayerSceneComp *SceneComp; // rax
  int32_t result; // eax
  bool is_need_loading; // [rsp+2Fh] [rbp-1F1h]
  std::map<unsigned int,proto::SceneTagOpType>::iterator __for_begin; // [rsp+30h] [rbp-1F0h] BYREF
  std::map<unsigned int,proto::SceneTagOpType>::iterator __for_end_0; // [rsp+38h] [rbp-1E8h] BYREF
  std::vector<unsigned int>::const_iterator __for_end; // [rsp+40h] [rbp-1E0h] BYREF
  const std::vector<unsigned int> *__for_range; // [rsp+48h] [rbp-1D8h]
  const std::vector<unsigned int> *__for_range_0; // [rsp+50h] [rbp-1D0h]
  std::map<unsigned int,proto::SceneTagOpType> *__for_range_1; // [rsp+58h] [rbp-1C8h]
  const std::pair<unsigned int const,proto::SceneTagOpType> *v51; // [rsp+60h] [rbp-1C0h]
  std::tuple_element<0,const std::pair<unsigned int const,proto::SceneTagOpType> >::type *scene_tag_id; // [rsp+68h] [rbp-1B8h]
  std::tuple_element<1,const std::pair<unsigned int const,proto::SceneTagOpType> >::type *op_type; // [rsp+70h] [rbp-1B0h]
  const data::SceneTagConfig *scene_tag_config_ptr; // [rsp+78h] [rbp-1A8h]
  std::shared_ptr<Config> v55; // [rsp+80h] [rbp-1A0h] BYREF
  common::milog::MiLogStream v56; // [rsp+90h] [rbp-190h] BYREF
  common::milog::MiLogStream v57; // [rsp+B0h] [rbp-170h] BYREF
  common::milog::MiLogStream v58; // [rsp+D0h] [rbp-150h] BYREF
  char v59[304]; // [rsp+F0h] [rbp-130h] BYREF

  v4 = (unsigned __int64)v59;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v5 = __asan_stack_malloc_2(256LL);
    if ( v5 )
      v4 = v5;
  }
  *(_QWORD *)v4 = 1102416563LL;
  *(_QWORD *)(v4 + 8) = "6 48 4 13 scene_id:6181 64 4 13 old_type:6210 80 8 9 iter:6211 112 16 15 player_ptr:6156 144 16 "
                        "14 event_ptr:6225 176 48 26 scene_tag_op_type_map:6163";
  *(_QWORD *)(v4 + 16) = Scene::processSceneTag;
  v6 = (_DWORD *)(v4 >> 3);
  v6[536862720] = -235802127;
  v6[536862721] = -234556943;
  v6[536862722] = 61956;
  v6[536862722] = -234881024;
  v6[536862723] = 62194;
  v6[536862724] = 62194;
  v6[536862725] = 62194;
  v6[536862727] = -202116109;
  Scene::getOwnPlayer((const Scene *const)(v4 + 112));
  if ( std::operator==<Player>(0LL, (const std::shared_ptr<Player> *)(v4 + 112)) )
  {
    common::milog::MiLogStream::create(
      &v58,
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/scene/scene.cpp",
      "processSceneTag",
      6159);
    common::milog::MiLogStream::operator<<<char [15],(char *[15])0>(&v58, (const char (*)[15])"player is null");
    common::milog::MiLogStream::~MiLogStream(&v58);
    v7 = -1;
  }
  else
  {
    std::map<unsigned int,proto::SceneTagOpType>::map((std::map<unsigned int,proto::SceneTagOpType> *const)(v4 + 176));
    __for_range = add_id_vec;
    *(std::vector<unsigned int>::const_iterator *)(v4 + 80) = std::vector<unsigned int>::begin(add_id_vec);
    __for_end._M_current = std::vector<unsigned int>::end(__for_range)._M_current;
    while ( __gnu_cxx::operator!=<unsigned int const*,std::vector<unsigned int>>(
              (const __gnu_cxx::__normal_iterator<unsigned int const*,std::vector<unsigned int> > *)(v4 + 80),
              &__for_end) )
    {
      v8 = __gnu_cxx::__normal_iterator<unsigned int const*,std::vector<unsigned int>>::operator*((const __gnu_cxx::__normal_iterator<unsigned int const*,std::vector<unsigned int> > *const)(v4 + 80));
      v10 = v8;
      if ( *(_BYTE *)(((unsigned __int64)v8 >> 3) + 0x7FFF8000) != 0
        && (char)(((unsigned __int8)v8 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)v8 >> 3) + 0x7FFF8000) )
      {
        __asan_report_load4(v8);
      }
      *(_DWORD *)(v4 + 48) = *v10;
      *(_DWORD *)(v4 + 64) = 1;
      v11 = std::map<unsigned int,proto::SceneTagOpType>::emplace<unsigned int &,proto::SceneTagOpType>(
              (std::map<unsigned int,proto::SceneTagOpType> *const)(v4 + 176),
              (unsigned int *)(v4 + 48),
              (proto::SceneTagOpType *)(v4 + 64),
              (unsigned int *)(v4 + 48),
              v9);
      if ( !v11.second )
      {
        common::milog::MiLogStream::create(
          &v58,
          &common::milog::MiLogDefault::default_log_obj_,
          3u,
          "./src/scene/scene.cpp",
          "processSceneTag",
          6168);
        v12 = common::milog::MiLogStream::operator<<<char [25],(char *[25])0>(
                &v58,
                (const char (*)[25])"duplicate scene_tag_id: ");
        common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v12, (const unsigned int *)(v4 + 48));
        common::milog::MiLogStream::~MiLogStream(&v58);
        v7 = -1;
        goto LABEL_61;
      }
      __gnu_cxx::__normal_iterator<unsigned int const*,std::vector<unsigned int>>::operator++((__gnu_cxx::__normal_iterator<unsigned int const*,std::vector<unsigned int> > *const)(v4 + 80));
    }
    __for_range_0 = del_id_vec;
    *(std::vector<unsigned int>::const_iterator *)(v4 + 80) = std::vector<unsigned int>::begin(del_id_vec);
    __for_end._M_current = std::vector<unsigned int>::end(__for_range_0)._M_current;
    while ( __gnu_cxx::operator!=<unsigned int const*,std::vector<unsigned int>>(
              (const __gnu_cxx::__normal_iterator<unsigned int const*,std::vector<unsigned int> > *)(v4 + 80),
              &__for_end) )
    {
      v13 = __gnu_cxx::__normal_iterator<unsigned int const*,std::vector<unsigned int>>::operator*((const __gnu_cxx::__normal_iterator<unsigned int const*,std::vector<unsigned int> > *const)(v4 + 80));
      v15 = v13;
      if ( *(_BYTE *)(((unsigned __int64)v13 >> 3) + 0x7FFF8000) != 0
        && (char)(((unsigned __int8)v13 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)v13 >> 3) + 0x7FFF8000) )
      {
        __asan_report_load4(v13);
      }
      *(_DWORD *)(v4 + 48) = *v15;
      *(_DWORD *)(v4 + 64) = 2;
      v16 = std::map<unsigned int,proto::SceneTagOpType>::emplace<unsigned int &,proto::SceneTagOpType>(
              (std::map<unsigned int,proto::SceneTagOpType> *const)(v4 + 176),
              (unsigned int *)(v4 + 48),
              (proto::SceneTagOpType *)(v4 + 64),
              (unsigned int *)(v4 + 48),
              v14);
      if ( !v16.second )
      {
        common::milog::MiLogStream::create(
          &v58,
          &common::milog::MiLogDefault::default_log_obj_,
          3u,
          "./src/scene/scene.cpp",
          "processSceneTag",
          6176);
        v17 = common::milog::MiLogStream::operator<<<char [25],(char *[25])0>(
                &v58,
                (const char (*)[25])"duplicate scene_tag_id: ");
        common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v17, (const unsigned int *)(v4 + 48));
        common::milog::MiLogStream::~MiLogStream(&v58);
        v7 = -1;
        goto LABEL_61;
      }
      __gnu_cxx::__normal_iterator<unsigned int const*,std::vector<unsigned int>>::operator++((__gnu_cxx::__normal_iterator<unsigned int const*,std::vector<unsigned int> > *const)(v4 + 80));
    }
    *(_DWORD *)(v4 + 48) = Scene::getSceneId(this);
    is_need_loading = 0;
    if ( op_param_ptr
      && std::optional<std::vector<Vector3>>::has_value(&op_param_ptr->trans_pos_vec_opt)
      && std::optional<Vector3>::has_value(&op_param_ptr->trans_rot_opt) )
    {
      is_need_loading = 1;
    }
    __for_range_1 = (std::map<unsigned int,proto::SceneTagOpType> *)(v4 + 176);
    __for_begin._M_node = std::map<unsigned int,proto::SceneTagOpType>::begin((std::map<unsigned int,proto::SceneTagOpType> *const)(v4 + 176))._M_node;
    __for_end_0._M_node = std::map<unsigned int,proto::SceneTagOpType>::end(__for_range_1)._M_node;
    while ( std::operator!=(&__for_begin, &__for_end_0) )
    {
      v51 = std::_Rb_tree_iterator<std::pair<unsigned int const,proto::SceneTagOpType>>::operator*(&__for_begin);
      scene_tag_id = std::get<0ul,unsigned int const,proto::SceneTagOpType>(v51);
      op_type = (std::tuple_element<1,const std::pair<unsigned int const,proto::SceneTagOpType> >::type *)std::get<1ul,unsigned int const,proto::SceneTagOpType>(v51);
      ServiceBox::findService<GameserverService>();
      GameserverService::getConfig((GameserverService *const)&v55);
      p_scene_config_mgr = &std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false> *const)&v55)->design_config.txt_config_mgr.scene_config_mgr;
      if ( *(_BYTE *)(((unsigned __int64)scene_tag_id >> 3) + 0x7FFF8000) != 0
        && (char)(((unsigned __int8)scene_tag_id & 7) + 3) >= *(_BYTE *)(((unsigned __int64)scene_tag_id >> 3)
                                                                       + 0x7FFF8000) )
      {
        __asan_report_load4(scene_tag_id);
      }
      scene_tag_config_ptr = data::SceneExcelConfigMgrBase::findSceneTagConfig(p_scene_config_mgr, *scene_tag_id);
      std::shared_ptr<Config>::~shared_ptr(&v55);
      if ( scene_tag_config_ptr )
      {
        if ( *(_BYTE *)(((unsigned __int64)&scene_tag_config_ptr->scene_id >> 3) + 0x7FFF8000) != 0
          && *(_BYTE *)(((unsigned __int64)&scene_tag_config_ptr->scene_id >> 3) + 0x7FFF8000) <= 3 )
        {
          __asan_report_load4(&scene_tag_config_ptr->scene_id);
        }
        if ( scene_tag_config_ptr->scene_id == *(_DWORD *)(v4 + 48) )
        {
          if ( *(_BYTE *)(((unsigned __int64)op_type >> 3) + 0x7FFF8000) != 0
            && (char)(((unsigned __int8)op_type & 7) + 3) >= *(_BYTE *)(((unsigned __int64)op_type >> 3) + 0x7FFF8000) )
          {
            __asan_report_load4(op_type);
          }
          if ( *op_type == SCENE_TAG_OP_ADD || *op_type == SCENE_TAG_OP_DEL )
          {
            *(_DWORD *)(v4 + 64) = 0;
            *(std::unordered_map<unsigned int,proto::SceneTagOpType>::iterator *)(v4 + 80) = std::unordered_map<unsigned int,proto::SceneTagOpType>::find(
                                                                                               &this->scene_tag_op_map_,
                                                                                               scene_tag_id);
            __for_end._M_current = (const unsigned int *)std::unordered_map<unsigned int,proto::SceneTagOpType>::end(&this->scene_tag_op_map_)._M_cur;
            if ( std::__detail::operator!=<std::pair<unsigned int const,proto::SceneTagOpType>,false>(
                   (const std::__detail::_Node_iterator_base<std::pair<unsigned int const,proto::SceneTagOpType>,false> *)(v4 + 80),
                   (const std::__detail::_Node_iterator_base<std::pair<unsigned int const,proto::SceneTagOpType>,false> *)&__for_end) )
            {
              v21 = std::__detail::_Node_iterator<std::pair<unsigned int const,proto::SceneTagOpType>,false,false>::operator->((const std::__detail::_Node_iterator<std::pair<unsigned int const,proto::SceneTagOpType>,false,false> *const)(v4 + 80));
              p_second = &v21->second;
              if ( *(_BYTE *)(((unsigned __int64)p_second >> 3) + 0x7FFF8000) != 0
                && (char)(((unsigned __int8)p_second & 7) + 3) >= *(_BYTE *)(((unsigned __int64)p_second >> 3)
                                                                           + 0x7FFF8000) )
              {
                __asan_report_load4(p_second);
              }
              *(_DWORD *)(v4 + 64) = v21->second;
            }
            if ( *(_BYTE *)(((unsigned __int64)op_type >> 3) + 0x7FFF8000) != 0
              && (char)(((unsigned __int8)op_type & 7) + 3) >= *(_BYTE *)(((unsigned __int64)op_type >> 3) + 0x7FFF8000) )
            {
              __asan_report_load4(op_type);
            }
            v23 = *op_type;
            v24 = scene_tag_id;
            v25 = std::unordered_map<unsigned int,proto::SceneTagOpType>::operator[](
                    &this->scene_tag_op_map_,
                    scene_tag_id);
            v28 = v25;
            v29 = *(_BYTE *)(((unsigned __int64)v25 >> 3) + 0x7FFF8000);
            if ( v29 != 0 && (char)(((unsigned __int8)v25 & 7) + 3) >= v29 )
            {
              LOBYTE(v24) = v29 != 0;
              __asan_report_store4(v25, v24, (_BYTE)v25);
            }
            *v28 = v23;
            if ( *(_BYTE *)(((unsigned __int64)&scene_tag_config_ptr->is_skip_loading >> 3) + 0x7FFF8000) != 0
              && (((unsigned __int8)scene_tag_config_ptr + 53) & 7) >= *(_BYTE *)(((unsigned __int64)&scene_tag_config_ptr->is_skip_loading >> 3)
                                                                                + 0x7FFF8000) )
            {
              __asan_report_load1(&scene_tag_config_ptr->is_skip_loading);
            }
            if ( !scene_tag_config_ptr->is_skip_loading )
              is_need_loading = 1;
            common::tools::perf::make_shared<SceneTagChangeEvent,unsigned int const&,proto::SceneTagOpType &,proto::SceneTagOpType const&>(
              (const unsigned int *)(v4 + 144),
              (proto::SceneTagOpType *)scene_tag_id,
              (const proto::SceneTagOpType *)(v4 + 64),
              (const unsigned int *)op_type,
              v26,
              v27);
            v30 = std::__shared_ptr_access<Player,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Player,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 112));
            EventComp = Player::getEventComp(v30);
            std::shared_ptr<BaseEvent>::shared_ptr<SceneTagChangeEvent,void>(
              (std::shared_ptr<BaseEvent> *const)&v55,
              (const std::shared_ptr<SceneTagChangeEvent> *)(v4 + 144));
            PlayerEventComp::notifyEvent(EventComp, (BaseEventPtr *)&v55);
            std::shared_ptr<BaseEvent>::~shared_ptr((std::shared_ptr<BaseEvent> *const)&v55);
            common::milog::MiLogStream::create(
              &v58,
              &common::milog::MiLogDefault::default_log_obj_,
              1u,
              "./src/scene/scene.cpp",
              "processSceneTag",
              6227);
            v32 = common::milog::MiLogStream::operator<<<char [27],(char *[27])0>(
                    &v58,
                    (const char (*)[27])"procSceneTagOp, scene_id: ");
            v33 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                    v32,
                    (const unsigned int *)(v4 + 48));
            v34 = common::milog::MiLogStream::operator<<<char [17],(char *[17])0>(
                    v33,
                    (const char (*)[17])" ,scene_tag_id: ");
            v35 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v34, scene_tag_id);
            v36 = common::milog::MiLogStream::operator<<<char [11],(char *[11])0>(v35, (const char (*)[11])" ,op_type:");
            v37 = common::milog::MiLogStream::operator<<<proto::SceneTagOpType,(proto::SceneTagOpType*)0>(
                    v36,
                    (const proto::SceneTagOpType *)(v4 + 64));
            v38 = common::milog::MiLogStream::operator<<<char [6],(char *[6])0>(v37, (const char (*)[6])" ==> ");
            common::milog::MiLogStream::operator<<<proto::SceneTagOpType,(proto::SceneTagOpType*)0>(v38, op_type);
            common::milog::MiLogStream::~MiLogStream(&v58);
            std::shared_ptr<SceneTagChangeEvent>::~shared_ptr((std::shared_ptr<SceneTagChangeEvent> *const)(v4 + 144));
          }
          else
          {
            common::milog::MiLogStream::create(
              &v58,
              &common::milog::MiLogDefault::default_log_obj_,
              3u,
              "./src/scene/scene.cpp",
              "processSceneTag",
              6205);
            common::milog::MiLogStream::operator<<<char [26],(char *[26])0>(
              &v58,
              (const char (*)[26])"scene tag op type invalid");
            common::milog::MiLogStream::~MiLogStream(&v58);
          }
        }
        else
        {
          common::milog::MiLogStream::create(
            &v57,
            &common::milog::MiLogDefault::default_log_obj_,
            3u,
            "./src/scene/scene.cpp",
            "processSceneTag",
            6199);
          common::milog::MiLogStream::operator<<<char [19],(char *[19])0>(
            &v57,
            (const char (*)[19])"scene_id not match");
          common::milog::MiLogStream::~MiLogStream(&v57);
        }
      }
      else
      {
        common::milog::MiLogStream::create(
          &v56,
          &common::milog::MiLogDefault::default_log_obj_,
          3u,
          "./src/scene/scene.cpp",
          "processSceneTag",
          6193);
        v20 = common::milog::MiLogStream::operator<<<char [42],(char *[42])0>(
                &v56,
                (const char (*)[42])"findSceneTagConfig failed, scene_tag_id: ");
        common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v20, scene_tag_id);
        common::milog::MiLogStream::~MiLogStream(&v56);
      }
      std::_Rb_tree_iterator<std::pair<unsigned int const,proto::SceneTagOpType>>::operator++(&__for_begin);
    }
    if ( is_need_loading )
      Scene::notifyClientReloadTerrain(this, op_param_ptr);
    Scene::broadcastSceneDataNotify(this);
    if ( Scene::getSceneType(this) == SCENE_WORLD )
    {
      v39 = std::__shared_ptr_access<Player,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Player,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 112));
      SceneComp = Player::getSceneComp(v39);
      PlayerSceneComp::broadcastPlayerWorldSceneInfoListNotify(SceneComp);
    }
    v7 = 0;
LABEL_61:
    std::map<unsigned int,proto::SceneTagOpType>::~map((std::map<unsigned int,proto::SceneTagOpType> *const)(v4 + 176));
  }
  std::shared_ptr<Player>::~shared_ptr((std::shared_ptr<Player> *const)(v4 + 112));
  result = v7;
  if ( v59 == (char *)v4 )
  {
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8008) = 0LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8010) = 0LL;
    *(_DWORD *)((v4 >> 3) + 0x7FFF801C) = 0;
  }
  else
  {
    *(_QWORD *)v4 = 1172321806LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 6249: range 00000000159ACD1C-00000000159AD092
_BOOL8 __fastcall Scene::isSceneTagValid(const Scene *const this, uint32_t scene_tag_id)
{
  unsigned __int64 v2; // rbx
  __int64 v3; // rax
  _DWORD *v4; // r12
  std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v5; // rax
  common::milog::MiLogStream *v6; // rax
  _BOOL8 result; // rax
  uint32_t SceneId; // ecx
  std::__detail::_Node_const_iterator<std::pair<unsigned int const,proto::SceneTagOpType>,false,false>::pointer v9; // rdx
  proto::SceneTagOpType *p_second; // rax
  proto::SceneTagOpType op_type; // [rsp+1Ch] [rbp-C4h]
  std::__detail::_Node_iterator_base<std::pair<unsigned int const,proto::SceneTagOpType>,false> __y; // [rsp+20h] [rbp-C0h] BYREF
  const data::SceneTagConfig *scene_tag_config_ptr; // [rsp+28h] [rbp-B8h]
  std::shared_ptr<Config> v14; // [rsp+30h] [rbp-B0h] BYREF
  common::milog::MiLogStream v15; // [rsp+40h] [rbp-A0h] BYREF
  char v16[128]; // [rsp+60h] [rbp-80h] BYREF

  v2 = (unsigned __int64)v16;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_1(96LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "2 48 4 17 scene_tag_id:6248 64 8 9 iter:6262";
  *(_QWORD *)(v2 + 16) = Scene::isSceneTagValid;
  v4 = (_DWORD *)(v2 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = -234556943;
  v4[536862722] = -202116352;
  *(_DWORD *)(v2 + 48) = scene_tag_id;
  ServiceBox::findService<GameserverService>();
  GameserverService::getConfig((GameserverService *const)&v14);
  v5 = std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false> *const)&v14);
  scene_tag_config_ptr = data::SceneExcelConfigMgrBase::findSceneTagConfig(
                           &v5->design_config.txt_config_mgr.scene_config_mgr,
                           *(_DWORD *)(v2 + 48));
  std::shared_ptr<Config>::~shared_ptr(&v14);
  if ( !scene_tag_config_ptr )
  {
    common::milog::MiLogStream::create(
      &v15,
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/scene/scene.cpp",
      "isSceneTagValid",
      6253);
    v6 = common::milog::MiLogStream::operator<<<char [42],(char *[42])0>(
           &v15,
           (const char (*)[42])"findSceneTagConfig failed, scene_tag_id: ");
    common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v6, (const unsigned int *)(v2 + 48));
    common::milog::MiLogStream::~MiLogStream(&v15);
    result = 0LL;
    goto LABEL_20;
  }
  SceneId = Scene::getSceneId(this);
  if ( *(_BYTE *)(((unsigned __int64)&scene_tag_config_ptr->scene_id >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&scene_tag_config_ptr->scene_id >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4(&scene_tag_config_ptr->scene_id);
  }
  if ( SceneId != scene_tag_config_ptr->scene_id )
  {
    result = 0LL;
    goto LABEL_20;
  }
  *(std::unordered_map<unsigned int,proto::SceneTagOpType>::const_iterator *)(v2 + 64) = std::unordered_map<unsigned int,proto::SceneTagOpType>::find(
                                                                                           &this->scene_tag_op_map_,
                                                                                           (const std::unordered_map<unsigned int,proto::SceneTagOpType>::key_type *)(v2 + 48));
  __y._M_cur = std::unordered_map<unsigned int,proto::SceneTagOpType>::end(&this->scene_tag_op_map_)._M_cur;
  if ( !std::__detail::operator!=<std::pair<unsigned int const,proto::SceneTagOpType>,false>(
          (const std::__detail::_Node_iterator_base<std::pair<unsigned int const,proto::SceneTagOpType>,false> *)(v2 + 64),
          &__y) )
    goto LABEL_17;
  v9 = std::__detail::_Node_const_iterator<std::pair<unsigned int const,proto::SceneTagOpType>,false,false>::operator->((const std::__detail::_Node_const_iterator<std::pair<unsigned int const,proto::SceneTagOpType>,false,false> *const)(v2 + 64));
  p_second = &v9->second;
  if ( *(_BYTE *)(((unsigned __int64)p_second >> 3) + 0x7FFF8000) != 0
    && (char)(((unsigned __int8)p_second & 7) + 3) >= *(_BYTE *)(((unsigned __int64)p_second >> 3) + 0x7FFF8000) )
  {
    __asan_report_load4(p_second);
  }
  op_type = v9->second;
  if ( op_type == SCENE_TAG_OP_ADD )
  {
    result = 1LL;
    goto LABEL_20;
  }
  if ( op_type == SCENE_TAG_OP_DEL )
  {
    result = 0LL;
  }
  else
  {
LABEL_17:
    if ( *(_BYTE *)(((unsigned __int64)&scene_tag_config_ptr->is_default_valid >> 3) + 0x7FFF8000) != 0
      && (((unsigned __int8)scene_tag_config_ptr + 52) & 7) >= *(_BYTE *)(((unsigned __int64)&scene_tag_config_ptr->is_default_valid >> 3)
                                                                        + 0x7FFF8000) )
    {
      __asan_report_load1(&scene_tag_config_ptr->is_default_valid);
    }
    result = scene_tag_config_ptr->is_default_valid;
  }
LABEL_20:
  if ( v16 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8008) = 0;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8008) = -168430091;
  }
  return result;
};

// Line 6280: range 00000000159AD094-00000000159AD2EB
std::vector<unsigned int> *__cdecl Scene::getActiveSceneTagList(std::vector<unsigned int> *retstr, Scene *const this)
{
  uint32_t scene_id; // ebx
  unsigned int *M_current; // rbx
  std::vector<unsigned int>::iterator v4; // rax
  unsigned int *v5; // rbx
  std::vector<unsigned int>::iterator v6; // rax
  __gnu_cxx::__normal_iterator<unsigned int*,std::vector<unsigned int> > v8; // [rsp+10h] [rbp-60h] BYREF
  __gnu_cxx::__normal_iterator<unsigned int*,std::vector<unsigned int> > __i; // [rsp+18h] [rbp-58h] BYREF
  std::unordered_map<unsigned int,data::SceneTagConfig>::const_iterator __for_begin; // [rsp+20h] [rbp-50h] BYREF
  std::unordered_map<unsigned int,data::SceneTagConfig>::const_iterator __for_end; // [rsp+28h] [rbp-48h] BYREF
  const std::unordered_map<unsigned int,data::SceneTagConfig> *__for_range; // [rsp+30h] [rbp-40h]
  const std::pair<unsigned int const,data::SceneTagConfig> *v13; // [rsp+38h] [rbp-38h]
  std::tuple_element<0,const std::pair<unsigned int const,data::SceneTagConfig> >::type *_; // [rsp+40h] [rbp-30h]
  std::tuple_element<1,const std::pair<unsigned int const,data::SceneTagConfig> >::type *config; // [rsp+48h] [rbp-28h]
  std::shared_ptr<Config> v16[2]; // [rsp+50h] [rbp-20h] BYREF

  std::vector<unsigned int>::vector(retstr);
  ServiceBox::findService<GameserverService>();
  GameserverService::getConfig((GameserverService *const)v16);
  __for_range = &std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false> *const)v16)->design_config.txt_config_mgr.scene_config_mgr.scene_tag_config_map;
  std::shared_ptr<Config>::~shared_ptr(v16);
  __for_begin._M_cur = std::unordered_map<unsigned int,data::SceneTagConfig>::begin(__for_range)._M_cur;
  __for_end._M_cur = std::unordered_map<unsigned int,data::SceneTagConfig>::end(__for_range)._M_cur;
  while ( std::__detail::operator!=<std::pair<unsigned int const,data::SceneTagConfig>,false>(&__for_begin, &__for_end) )
  {
    v13 = std::__detail::_Node_const_iterator<std::pair<unsigned int const,data::SceneTagConfig>,false,false>::operator*(&__for_begin);
    _ = std::get<0ul,unsigned int const,data::SceneTagConfig>(v13);
    config = (std::tuple_element<1,const std::pair<unsigned int const,data::SceneTagConfig> >::type *)std::get<1ul,unsigned int const,data::SceneTagConfig>(v13);
    if ( *(_BYTE *)(((unsigned __int64)&config->scene_id >> 3) + 0x7FFF8000) != 0
      && *(_BYTE *)(((unsigned __int64)&config->scene_id >> 3) + 0x7FFF8000) <= 3 )
    {
      __asan_report_load4(&config->scene_id);
    }
    scene_id = config->scene_id;
    if ( scene_id == Scene::getSceneId(this) )
    {
      if ( *(_BYTE *)(((unsigned __int64)&config->id >> 3) + 0x7FFF8000) != 0
        && *(_BYTE *)(((unsigned __int64)&config->id >> 3) + 0x7FFF8000) <= 3 )
      {
        __asan_report_load4(&config->id);
      }
      if ( Scene::isSceneTagValid(this, config->id) )
        std::vector<unsigned int>::push_back(retstr, &config->id);
    }
    std::__detail::_Node_const_iterator<std::pair<unsigned int const,data::SceneTagConfig>,false,false>::operator++(&__for_begin);
  }
  M_current = std::vector<unsigned int>::end(retstr)._M_current;
  v4._M_current = std::vector<unsigned int>::begin(retstr)._M_current;
  std::sort<__gnu_cxx::__normal_iterator<unsigned int *,std::vector<unsigned int>>>(
    v4,
    (__gnu_cxx::__normal_iterator<unsigned int*,std::vector<unsigned int> >)M_current);
  __i._M_current = std::vector<unsigned int>::end(retstr)._M_current;
  __gnu_cxx::__normal_iterator<unsigned int const*,std::vector<unsigned int>>::__normal_iterator<unsigned int *>(
    (__gnu_cxx::__normal_iterator<unsigned int const*,std::vector<unsigned int> > *const)&__for_end,
    &__i);
  v5 = std::vector<unsigned int>::end(retstr)._M_current;
  v6._M_current = std::vector<unsigned int>::begin(retstr)._M_current;
  v8._M_current = std::unique<__gnu_cxx::__normal_iterator<unsigned int *,std::vector<unsigned int>>>(
                    v6,
                    (__gnu_cxx::__normal_iterator<unsigned int*,std::vector<unsigned int> >)v5)._M_current;
  __gnu_cxx::__normal_iterator<unsigned int const*,std::vector<unsigned int>>::__normal_iterator<unsigned int *>(
    (__gnu_cxx::__normal_iterator<unsigned int const*,std::vector<unsigned int> > *const)&__for_begin,
    &v8);
  std::vector<unsigned int>::erase(
    retstr,
    (std::vector<unsigned int>::const_iterator)__for_begin._M_cur,
    (std::vector<unsigned int>::const_iterator)__for_end._M_cur);
  return retstr;
};

// Line 6302: range 00000000159AD2EC-00000000159AD3DC
void __cdecl Scene::clearSceneTagOpMapByGm(Scene *const this)
{
  common::milog::MiLogStream *v1; // rbx
  common::milog::MiLogStream *v2; // rax
  common::milog::MiLogStream *v3; // rbx
  unsigned int val; // [rsp+18h] [rbp-38h] BYREF
  unsigned int SceneId; // [rsp+1Ch] [rbp-34h] BYREF
  common::milog::MiLogStream v6; // [rsp+20h] [rbp-30h] BYREF

  common::milog::MiLogStream::create(
    &v6,
    &common::milog::MiLogDefault::default_log_obj_,
    1u,
    "./src/scene/scene.cpp",
    "clearSceneTagOpMapByGm",
    6303);
  v1 = common::milog::MiLogStream::operator<<<char [30],(char *[30])0>(
         &v6,
         (const char (*)[30])"clearSceneTagOpMapByGm, uid: ");
  val = Scene::getOwnerUid(this);
  v2 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v1, &val);
  v3 = common::milog::MiLogStream::operator<<<char [13],(char *[13])0>(v2, (const char (*)[13])" ,scene_id: ");
  SceneId = Scene::getSceneId(this);
  common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v3, &SceneId);
  common::milog::MiLogStream::~MiLogStream(&v6);
  std::unordered_map<unsigned int,proto::SceneTagOpType>::clear(&this->scene_tag_op_map_);
  Scene::notifyClientReloadTerrain(this, 0LL);
};

// Line 6311: range 00000000159AD3DE-00000000159AD712
std::string *__cdecl Scene::createSceneTransactionOnInit[abi:cxx11](std::string *retstr, const Scene *const this)
{
  unsigned __int64 v2; // r12
  __int64 v3; // rax
  _DWORD *v4; // rbx
  __int64 v5; // rax
  __int64 v6; // rcx
  __int64 v7; // rax
  __int64 v8; // r14
  time_t Now; // rax
  __int64 v10; // rax
  __int64 v11; // rax
  char v13[560]; // [rsp+20h] [rbp-230h] BYREF

  v2 = (unsigned __int64)v13;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_3(512LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "1 48 392 7 ss:6313";
  *(_QWORD *)(v2 + 16) = Scene::createSceneTransactionOnInit[abi:cxx11];
  v4 = (_DWORD *)(v2 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = 61937;
  v4[536862733] = -218103808;
  v4[536862734] = -202116109;
  v4[536862735] = -202116109;
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream(v2 + 48);
  if ( *(_BYTE *)(((unsigned __int64)&this->scene_id_ >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->scene_id_ >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4(&this->scene_id_);
  }
  v5 = std::ostream::operator<<(v2 + 64, this->scene_id_);
  v6 = std::operator<<<std::char_traits<char>>(v5, 45LL);
  if ( *(_BYTE *)(((unsigned __int64)&this->owner_uid_ >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->owner_uid_ >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4(&this->owner_uid_);
  }
  v7 = std::ostream::operator<<(v6, this->owner_uid_);
  v8 = std::operator<<<std::char_traits<char>>(v7, 45LL);
  Now = common::tools::TimeUtils::getNow();
  v10 = std::ostream::operator<<(v8, Now);
  v11 = std::operator<<<std::char_traits<char>>(v10, 45LL);
  *(_DWORD *)(__readfsqword(0) - 944) = *(_DWORD *)(__readfsqword(0) - 944) + 1;
  std::ostream::operator<<(v11, *(unsigned int *)(__readfsqword(0) - 944));
  if ( *(char *)(((unsigned __int64)retstr >> 3) + 0x7FFF8000) < 0
    || *(_BYTE *)((((unsigned __int64)&retstr->_anon_0._M_allocated_capacity + 15) >> 3) + 0x7FFF8000) != 0
    && (((unsigned __int8)retstr + 31) & 7) >= *(_BYTE *)((((unsigned __int64)&retstr->_anon_0._M_allocated_capacity + 15) >> 3)
                                                        + 0x7FFF8000) )
  {
    __asan_report_store_n(retstr, 32LL);
  }
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::str(retstr, v2 + 48);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream(v2 + 48);
  if ( v13 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8034) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF803C) = 0;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8020) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8028) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8030) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8038) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return retstr;
};

// Line 6319: range 00000000159AD714-00000000159AD808
bool __cdecl Scene::checkEnterable(Scene *const this, Player *player)
{
  unsigned __int64 v2; // rax
  uint32_t owner_uid; // ebx

  if ( Scene::getSceneMpType(this) != SCENE_MP_SINGLE_PLAYER_SINGLE_MODE )
    return 1;
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_load8();
  v2 = (unsigned __int64)(this->_vptr_DescribalBase + 49);
  if ( *(_BYTE *)((v2 >> 3) + 0x7FFF8000) )
    v2 = __asan_report_load8();
  if ( (*(unsigned __int8 (__fastcall **)(Scene *const))v2)(this) == 1 )
    return 0;
  if ( *(_BYTE *)(((unsigned __int64)&this->owner_uid_ >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->owner_uid_ >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4(&this->owner_uid_);
  }
  owner_uid = this->owner_uid_;
  return owner_uid == Player::getUid(player);
};

// Line 6329: range 00000000159AD80A-00000000159AD9E7
__int64 __fastcall Scene::getNoGroupEntityLevel(Scene *const this, uint32_t config_level)
{
  unsigned __int64 v2; // rbx
  __int64 v3; // rax
  unsigned __int64 v4; // r12
  const unsigned int *v5; // rax
  _DWORD *v6; // rdx
  unsigned __int64 v7; // rax
  uint32_t v8; // r13d
  unsigned __int64 v9; // rax
  uint32_t v10; // eax
  __int64 result; // rax
  unsigned int __b; // [rsp+1Ch] [rbp-64h] BYREF
  char v13[96]; // [rsp+20h] [rbp-60h] BYREF

  v2 = (unsigned __int64)v13;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_0(64LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "1 32 4 17 config_level:6328";
  *(_QWORD *)(v2 + 16) = Scene::getNoGroupEntityLevel;
  v4 = v2 >> 3;
  *(_DWORD *)(v4 + 2147450880) = -235802127;
  *(_DWORD *)(v4 + 2147450884) = -202116348;
  *(_DWORD *)(v2 + 32) = config_level;
  __b = 1;
  v5 = std::max<unsigned int>((const unsigned int *)(v2 + 32), &__b);
  v6 = v5;
  if ( *(_BYTE *)(((unsigned __int64)v5 >> 3) + 0x7FFF8000) != 0
    && (char)(((unsigned __int8)v5 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)v5 >> 3) + 0x7FFF8000) )
  {
    __asan_report_load4(v5);
  }
  *(_DWORD *)(v2 + 32) = *v6;
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_load8();
  v7 = (unsigned __int64)(this->_vptr_DescribalBase + 33);
  if ( *(_BYTE *)((v7 >> 3) + 0x7FFF8000) )
    v7 = __asan_report_load8();
  v8 = (*(__int64 (__fastcall **)(Scene *const))v7)(this) + *(_DWORD *)(v2 + 32);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_load8();
  v9 = (unsigned __int64)(this->_vptr_DescribalBase + 50);
  if ( *(_BYTE *)((v9 >> 3) + 0x7FFF8000) )
    v9 = __asan_report_load8();
  v10 = (*(__int64 (__fastcall **)(Scene *const))v9)(this);
  result = PlayerWorld::getAdjustedLevel(v10, v8);
  if ( v13 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 6337: range 00000000159AD9E8-00000000159ADB4C
void __fastcall Scene::addOnGoingChallenge(
        Scene *const this,
        uint32_t challenge_id,
        uint32_t group_id,
        uint32_t challenge_index)
{
  unsigned __int64 v4; // rbx
  __int64 v5; // rax
  _DWORD *v6; // r12
  std::set<std::pair<unsigned int,unsigned int>> *v7; // r14
  std::pair<unsigned int,unsigned int> __x; // [rsp+28h] [rbp-98h] BYREF
  char v11[144]; // [rsp+30h] [rbp-90h] BYREF

  v4 = (unsigned __int64)v11;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v5 = __asan_stack_malloc_1(96LL);
    if ( v5 )
      v4 = v5;
  }
  *(_QWORD *)v4 = 1102416563LL;
  *(_QWORD *)(v4 + 8) = "3 32 4 17 challenge_id:6336 48 4 13 group_id:6336 64 4 20 challenge_index:6336";
  *(_QWORD *)(v4 + 16) = Scene::addOnGoingChallenge;
  v6 = (_DWORD *)(v4 >> 3);
  v6[536862720] = -235802127;
  v6[536862721] = -234556924;
  v6[536862722] = -202116348;
  *(_DWORD *)(v4 + 32) = challenge_id;
  *(_DWORD *)(v4 + 48) = group_id;
  *(_DWORD *)(v4 + 64) = challenge_index;
  v7 = std::map<unsigned int,std::set<std::pair<unsigned int,unsigned int>>>::operator[](
         &this->ongoing_challenge_id_2_pair_set_map_,
         (const std::map<unsigned int,std::set<std::pair<unsigned int,unsigned int>>>::key_type *)(v4 + 32));
  std::pair<unsigned int,unsigned int>::pair<unsigned int &,unsigned int &,true>(
    &__x,
    (unsigned int *)(v4 + 48),
    (unsigned int *)(v4 + 64));
  std::set<std::pair<unsigned int,unsigned int>>::insert(v7, &__x);
  if ( v11 == (char *)v4 )
  {
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0LL;
    *(_DWORD *)((v4 >> 3) + 0x7FFF8008) = 0;
  }
  else
  {
    *(_QWORD *)v4 = 1172321806LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v4 >> 3) + 0x7FFF8008) = -168430091;
  }
};

// Line 6342: range 00000000159ADB4E-00000000159ADD20
void __fastcall Scene::delOnGoingChallenge(
        Scene *const this,
        uint32_t challenge_id,
        uint32_t group_id,
        uint32_t challenge_index)
{
  unsigned __int64 v4; // rbx
  __int64 v5; // rax
  _DWORD *v6; // r13
  std::set<std::pair<unsigned int,unsigned int>> *v7; // r14
  std::map<unsigned int,std::set<std::pair<unsigned int,unsigned int>>>::mapped_type *v8; // rax
  std::pair<unsigned int,unsigned int> __x; // [rsp+28h] [rbp-98h] BYREF
  char v12[144]; // [rsp+30h] [rbp-90h] BYREF

  v4 = (unsigned __int64)v12;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v5 = __asan_stack_malloc_1(96LL);
    if ( v5 )
      v4 = v5;
  }
  *(_QWORD *)v4 = 1102416563LL;
  *(_QWORD *)(v4 + 8) = "3 32 4 17 challenge_id:6341 48 4 13 group_id:6341 64 4 20 challenge_index:6341";
  *(_QWORD *)(v4 + 16) = Scene::delOnGoingChallenge;
  v6 = (_DWORD *)(v4 >> 3);
  v6[536862720] = -235802127;
  v6[536862721] = -234556924;
  v6[536862722] = -202116348;
  *(_DWORD *)(v4 + 32) = challenge_id;
  *(_DWORD *)(v4 + 48) = group_id;
  *(_DWORD *)(v4 + 64) = challenge_index;
  if ( common::tools::MiscUtils::isContains<std::map<unsigned int,std::set<std::pair<unsigned int,unsigned int>>>,unsigned int>(
         &this->ongoing_challenge_id_2_pair_set_map_,
         (const unsigned int *)(v4 + 32)) )
  {
    v7 = std::map<unsigned int,std::set<std::pair<unsigned int,unsigned int>>>::operator[](
           &this->ongoing_challenge_id_2_pair_set_map_,
           (const std::map<unsigned int,std::set<std::pair<unsigned int,unsigned int>>>::key_type *)(v4 + 32));
    std::pair<unsigned int,unsigned int>::pair<unsigned int &,unsigned int &,true>(
      &__x,
      (unsigned int *)(v4 + 48),
      (unsigned int *)(v4 + 64));
    std::set<std::pair<unsigned int,unsigned int>>::erase(v7, &__x);
    v8 = std::map<unsigned int,std::set<std::pair<unsigned int,unsigned int>>>::operator[](
           &this->ongoing_challenge_id_2_pair_set_map_,
           (const std::map<unsigned int,std::set<std::pair<unsigned int,unsigned int>>>::key_type *)(v4 + 32));
    if ( std::set<std::pair<unsigned int,unsigned int>>::empty(v8) )
      std::map<unsigned int,std::set<std::pair<unsigned int,unsigned int>>>::erase(
        &this->ongoing_challenge_id_2_pair_set_map_,
        (const std::map<unsigned int,std::set<std::pair<unsigned int,unsigned int>>>::key_type *)(v4 + 32));
  }
  if ( v12 == (char *)v4 )
  {
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0LL;
    *(_DWORD *)((v4 >> 3) + 0x7FFF8008) = 0;
  }
  else
  {
    *(_QWORD *)v4 = 1172321806LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v4 >> 3) + 0x7FFF8008) = -168430091;
  }
};

// Line 6352: range 00000000159ADD22-00000000159ADE85
__int64 __fastcall Scene::isChallengeOnGoingByChallengeId(Scene *const this, uint32_t challenge_id)
{
  unsigned __int64 v2; // rbx
  __int64 v3; // rax
  _DWORD *v4; // r12
  __int64 result; // rax
  std::_Rb_tree_iterator<std::pair<unsigned int const,std::set<std::pair<unsigned int,unsigned int>> > >::pointer v6; // rax
  int v7; // eax
  std::_Rb_tree_iterator<std::pair<unsigned int const,std::set<std::pair<unsigned int,unsigned int>> > >::_Self __y; // [rsp+18h] [rbp-88h] BYREF
  char v9[128]; // [rsp+20h] [rbp-80h] BYREF

  v2 = (unsigned __int64)v9;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_1(96LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "2 48 4 17 challenge_id:6351 64 8 9 iter:6353";
  *(_QWORD *)(v2 + 16) = Scene::isChallengeOnGoingByChallengeId;
  v4 = (_DWORD *)(v2 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = -234556943;
  v4[536862722] = -202116352;
  *(_DWORD *)(v2 + 48) = challenge_id;
  *(std::map<unsigned int,std::set<std::pair<unsigned int,unsigned int>>>::iterator *)(v2 + 64) = std::map<unsigned int,std::set<std::pair<unsigned int,unsigned int>>>::find(
                                                                                                    &this->ongoing_challenge_id_2_pair_set_map_,
                                                                                                    (const std::map<unsigned int,std::set<std::pair<unsigned int,unsigned int>>>::key_type *)(v2 + 48));
  __y._M_node = std::map<unsigned int,std::set<std::pair<unsigned int,unsigned int>>>::end(&this->ongoing_challenge_id_2_pair_set_map_)._M_node;
  if ( std::operator==(
         (const std::_Rb_tree_iterator<std::pair<unsigned int const,std::set<std::pair<unsigned int,unsigned int>> > >::_Self *)(v2 + 64),
         &__y) )
  {
    result = 0LL;
  }
  else
  {
    v6 = std::_Rb_tree_iterator<std::pair<unsigned int const,std::set<std::pair<unsigned int,unsigned int>>>>::operator->((const std::_Rb_tree_iterator<std::pair<unsigned int const,std::set<std::pair<unsigned int,unsigned int>> > > *const)(v2 + 64));
    LOBYTE(v7) = std::set<std::pair<unsigned int,unsigned int>>::empty(&v6->second);
    result = v7 ^ 1u;
  }
  if ( v9 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8008) = 0;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8008) = -168430091;
  }
  return result;
};

// Line 6363: range 00000000159ADE86-00000000159AE5E0
void __cdecl Scene::clearUndeletedFinishedChallenge(Scene *const this)
{
  unsigned __int64 v1; // r13
  __int64 v2; // rax
  _DWORD *v3; // rbx
  uint32_t BlockGroupComp; // ecx
  Group *v5; // rax
  ChallengeComp *ChallengeComp; // rcx
  char v7; // al
  common::milog::MiLogStream *v8; // rax
  common::milog::MiLogStream *v9; // rax
  common::milog::MiLogStream *v10; // rdx
  common::milog::MiLogStream *v11; // rax
  common::milog::MiLogStream *v12; // rax
  common::milog::MiLogStream *v13; // rax
  common::milog::MiLogStream *v14; // rax
  std::set<std::pair<unsigned int,unsigned int>> *v15; // r14
  std::tuple_element<1,const std::pair<unsigned int,unsigned int> >::type *v16; // rax
  uint32_t v17; // ecx
  uint32_t v18; // edi
  std::map<unsigned int,std::set<std::pair<unsigned int,unsigned int>>>::iterator __for_begin; // [rsp+18h] [rbp-198h] BYREF
  std::map<unsigned int,std::set<std::pair<unsigned int,unsigned int>>>::iterator __for_begin_1; // [rsp+20h] [rbp-190h] BYREF
  std::map<unsigned int,std::set<std::pair<unsigned int,unsigned int>>>::iterator __for_end; // [rsp+28h] [rbp-188h] BYREF
  std::set<std::pair<unsigned int,unsigned int>>::iterator __for_begin_0; // [rsp+30h] [rbp-180h] BYREF
  std::map<unsigned int,std::set<std::pair<unsigned int,unsigned int>>> *__for_range; // [rsp+38h] [rbp-178h]
  std::map<unsigned int,std::set<std::pair<unsigned int,unsigned int>>> *__for_range_1; // [rsp+40h] [rbp-170h]
  const std::pair<unsigned int const,std::set<std::pair<unsigned int,unsigned int>> > *v26; // [rsp+48h] [rbp-168h]
  std::tuple_element<0,const std::pair<unsigned int const,std::set<std::pair<unsigned int,unsigned int>> > >::type *challenge_id_0; // [rsp+50h] [rbp-160h]
  std::tuple_element<1,const std::pair<unsigned int const,std::set<std::pair<unsigned int,unsigned int>> > >::type *pair_set_0; // [rsp+58h] [rbp-158h]
  const std::set<std::pair<unsigned int,unsigned int>> *__for_range_2; // [rsp+60h] [rbp-150h]
  const std::pair<unsigned int,unsigned int> *v30; // [rsp+68h] [rbp-148h]
  std::tuple_element<0,const std::pair<unsigned int,unsigned int> >::type *group_id_0; // [rsp+70h] [rbp-140h]
  std::tuple_element<1,const std::pair<unsigned int,unsigned int> >::type *challenge_index_0; // [rsp+78h] [rbp-138h]
  const std::pair<unsigned int const,std::set<std::pair<unsigned int,unsigned int>> > *v33; // [rsp+80h] [rbp-130h]
  std::tuple_element<0,const std::pair<unsigned int const,std::set<std::pair<unsigned int,unsigned int>> > >::type *challenge_id; // [rsp+88h] [rbp-128h]
  std::tuple_element<1,const std::pair<unsigned int const,std::set<std::pair<unsigned int,unsigned int>> > >::type *pair_set; // [rsp+90h] [rbp-120h]
  const std::set<std::pair<unsigned int,unsigned int>> *__for_range_0; // [rsp+98h] [rbp-118h]
  const std::pair<unsigned int,unsigned int> *v37; // [rsp+A0h] [rbp-110h]
  std::tuple_element<0,const std::pair<unsigned int,unsigned int> >::type *group_id; // [rsp+A8h] [rbp-108h]
  std::tuple_element<1,const std::pair<unsigned int,unsigned int> >::type *challenge_index; // [rsp+B0h] [rbp-100h]
  std::set<std::pair<unsigned int,unsigned int>>::iterator __for_end_0; // [rsp+B8h] [rbp-F8h] BYREF
  common::milog::MiLogStream v41; // [rsp+C0h] [rbp-F0h] BYREF
  char v42[208]; // [rsp+E0h] [rbp-D0h] BYREF

  v1 = (unsigned __int64)v42;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_2(160LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "2 48 16 14 group_ptr:6372 80 48 32 ongoing_challenge_to_delete:6367";
  *(_QWORD *)(v1 + 16) = Scene::clearUndeletedFinishedChallenge;
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = 61937;
  v3[536862722] = 62194;
  v3[536862724] = -202116109;
  if ( !std::map<unsigned int,std::set<std::pair<unsigned int,unsigned int>>>::empty(&this->ongoing_challenge_id_2_pair_set_map_) )
  {
    std::map<unsigned int,std::set<std::pair<unsigned int,unsigned int>>>::map((std::map<unsigned int,std::set<std::pair<unsigned int,unsigned int>>> *const)(v1 + 80));
    __for_range = &this->ongoing_challenge_id_2_pair_set_map_;
    __for_begin._M_node = std::map<unsigned int,std::set<std::pair<unsigned int,unsigned int>>>::begin(&this->ongoing_challenge_id_2_pair_set_map_)._M_node;
    __for_begin_1._M_node = std::map<unsigned int,std::set<std::pair<unsigned int,unsigned int>>>::end(&this->ongoing_challenge_id_2_pair_set_map_)._M_node;
    while ( std::operator!=(&__for_begin, &__for_begin_1) )
    {
      v33 = std::_Rb_tree_iterator<std::pair<unsigned int const,std::set<std::pair<unsigned int,unsigned int>>>>::operator*(&__for_begin);
      challenge_id = std::get<0ul,unsigned int const,std::set<std::pair<unsigned int,unsigned int>>>(v33);
      pair_set = (std::tuple_element<1,const std::pair<unsigned int const,std::set<std::pair<unsigned int,unsigned int>> > >::type *)std::get<1ul,unsigned int const,std::set<std::pair<unsigned int,unsigned int>>>(v33);
      __for_range_0 = pair_set;
      __for_end._M_node = (std::_Rb_tree_iterator<std::pair<unsigned int const,std::set<std::pair<unsigned int,unsigned int>> > >::_Base_ptr)std::set<std::pair<unsigned int,unsigned int>>::begin(pair_set)._M_node;
      __for_begin_0._M_node = std::set<std::pair<unsigned int,unsigned int>>::end(__for_range_0)._M_node;
      while ( std::operator!=(
                (const std::_Rb_tree_const_iterator<std::pair<unsigned int,unsigned int> >::_Self *)&__for_end,
                &__for_begin_0) )
      {
        v37 = std::_Rb_tree_const_iterator<std::pair<unsigned int,unsigned int>>::operator*((const std::_Rb_tree_const_iterator<std::pair<unsigned int,unsigned int> > *const)&__for_end);
        group_id = (std::tuple_element<0,const std::pair<unsigned int,unsigned int> >::type *)std::get<0ul,unsigned int,unsigned int>(v37);
        challenge_index = (std::tuple_element<1,const std::pair<unsigned int,unsigned int> >::type *)std::get<1ul,unsigned int,unsigned int>(v37);
        BlockGroupComp = (unsigned int)Scene::getBlockGroupComp(this);
        if ( *(_BYTE *)(((unsigned __int64)group_id >> 3) + 0x7FFF8000) != 0
          && (char)(((unsigned __int8)group_id & 7) + 3) >= *(_BYTE *)(((unsigned __int64)group_id >> 3) + 0x7FFF8000) )
        {
          __asan_report_load4(group_id);
        }
        SceneBlockGroupComp::getActiveGroup((SceneBlockGroupComp *const)(v1 + 48), BlockGroupComp);
        if ( std::operator==<Group>(0LL, (const std::shared_ptr<Group> *)(v1 + 48)) )
          goto LABEL_15;
        v5 = std::__shared_ptr_access<Group,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Group,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v1 + 48));
        ChallengeComp = Group::getChallengeComp(v5);
        if ( *(_BYTE *)(((unsigned __int64)challenge_index >> 3) + 0x7FFF8000) != 0
          && (char)(((unsigned __int8)challenge_index & 7) + 3) >= *(_BYTE *)(((unsigned __int64)challenge_index >> 3)
                                                                            + 0x7FFF8000) )
        {
          __asan_report_load4(challenge_index);
        }
        if ( !ChallengeComp::isChallengeOnGoing(ChallengeComp, *challenge_index) )
LABEL_15:
          v7 = 1;
        else
          v7 = 0;
        if ( v7 )
        {
          common::milog::MiLogStream::create(
            &v41,
            &common::milog::MiLogDefault::default_log_obj_,
            3u,
            "./src/scene/scene.cpp",
            "clearUndeletedFinishedChallenge",
            6375);
          v8 = common::milog::MiLogStream::operator<<<char [41],(char *[41])0>(
                 &v41,
                 (const char (*)[41])"A challenge remains undeleted, group_id:");
          v9 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v8, group_id);
          v10 = common::milog::MiLogStream::operator<<<char [8],(char *[8])0>(v9, (const char (*)[8])" scene:");
          v11 = common::milog::MiLogStream::operator<<<Scene,(Scene*)0>(v10, this);
          v12 = common::milog::MiLogStream::operator<<<char [17],(char *[17])0>(
                  v11,
                  (const char (*)[17])", challenge_id: ");
          v13 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v12, challenge_id);
          v14 = common::milog::MiLogStream::operator<<<char [20],(char *[20])0>(
                  v13,
                  (const char (*)[20])", challenge_index: ");
          common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v14, challenge_index);
          common::milog::MiLogStream::~MiLogStream(&v41);
          v15 = std::map<unsigned int,std::set<std::pair<unsigned int,unsigned int>>>::operator[](
                  (std::map<unsigned int,std::set<std::pair<unsigned int,unsigned int>>> *const)(v1 + 80),
                  challenge_id);
          std::pair<unsigned int,unsigned int>::pair<unsigned int,unsigned int,true>(
            (std::pair<unsigned int,unsigned int> *const)&__for_end_0,
            group_id,
            challenge_index);
          std::set<std::pair<unsigned int,unsigned int>>::insert(
            v15,
            (std::set<std::pair<unsigned int,unsigned int>>::value_type *)&__for_end_0);
        }
        std::shared_ptr<Group>::~shared_ptr((std::shared_ptr<Group> *const)(v1 + 48));
        std::_Rb_tree_const_iterator<std::pair<unsigned int,unsigned int>>::operator++((std::_Rb_tree_const_iterator<std::pair<unsigned int,unsigned int> > *const)&__for_end);
      }
      std::_Rb_tree_iterator<std::pair<unsigned int const,std::set<std::pair<unsigned int,unsigned int>>>>::operator++(&__for_begin);
    }
    __for_range_1 = (std::map<unsigned int,std::set<std::pair<unsigned int,unsigned int>>> *)(v1 + 80);
    __for_begin_1._M_node = std::map<unsigned int,std::set<std::pair<unsigned int,unsigned int>>>::begin((std::map<unsigned int,std::set<std::pair<unsigned int,unsigned int>>> *const)(v1 + 80))._M_node;
    __for_end._M_node = std::map<unsigned int,std::set<std::pair<unsigned int,unsigned int>>>::end(__for_range_1)._M_node;
    while ( std::operator!=(&__for_begin_1, &__for_end) )
    {
      v26 = std::_Rb_tree_iterator<std::pair<unsigned int const,std::set<std::pair<unsigned int,unsigned int>>>>::operator*(&__for_begin_1);
      challenge_id_0 = std::get<0ul,unsigned int const,std::set<std::pair<unsigned int,unsigned int>>>(v26);
      pair_set_0 = (std::tuple_element<1,const std::pair<unsigned int const,std::set<std::pair<unsigned int,unsigned int>> > >::type *)std::get<1ul,unsigned int const,std::set<std::pair<unsigned int,unsigned int>>>(v26);
      __for_range_2 = pair_set_0;
      __for_begin_0._M_node = std::set<std::pair<unsigned int,unsigned int>>::begin(pair_set_0)._M_node;
      __for_end_0._M_node = std::set<std::pair<unsigned int,unsigned int>>::end(__for_range_2)._M_node;
      while ( std::operator!=(&__for_begin_0, &__for_end_0) )
      {
        v30 = std::_Rb_tree_const_iterator<std::pair<unsigned int,unsigned int>>::operator*(&__for_begin_0);
        group_id_0 = (std::tuple_element<0,const std::pair<unsigned int,unsigned int> >::type *)std::get<0ul,unsigned int,unsigned int>(v30);
        v16 = (std::tuple_element<1,const std::pair<unsigned int,unsigned int> >::type *)std::get<1ul,unsigned int,unsigned int>(v30);
        challenge_index_0 = v16;
        if ( *(_BYTE *)(((unsigned __int64)v16 >> 3) + 0x7FFF8000) != 0
          && (char)(((unsigned __int8)v16 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)v16 >> 3) + 0x7FFF8000) )
        {
          __asan_report_load4(v16);
        }
        v17 = *challenge_index_0;
        if ( *(_BYTE *)(((unsigned __int64)group_id_0 >> 3) + 0x7FFF8000) != 0
          && (char)(((unsigned __int8)group_id_0 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)group_id_0 >> 3) + 0x7FFF8000) )
        {
          __asan_report_load4(group_id_0);
        }
        v18 = *group_id_0;
        if ( *(_BYTE *)(((unsigned __int64)challenge_id_0 >> 3) + 0x7FFF8000) != 0
          && (char)(((unsigned __int8)challenge_id_0 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)challenge_id_0 >> 3)
                                                                           + 0x7FFF8000) )
        {
          v18 = (unsigned int)challenge_id_0;
          __asan_report_load4(challenge_id_0);
        }
        Scene::delOnGoingChallenge(this, *challenge_id_0, v18, v17);
        std::_Rb_tree_const_iterator<std::pair<unsigned int,unsigned int>>::operator++(&__for_begin_0);
      }
      std::_Rb_tree_iterator<std::pair<unsigned int const,std::set<std::pair<unsigned int,unsigned int>>>>::operator++(&__for_begin_1);
    }
    std::map<unsigned int,std::set<std::pair<unsigned int,unsigned int>>>::~map((std::map<unsigned int,std::set<std::pair<unsigned int,unsigned int>>> *const)(v1 + 80));
  }
  if ( v42 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_DWORD *)((v1 >> 3) + 0x7FFF8008) = 0;
    *(_DWORD *)((v1 >> 3) + 0x7FFF8010) = 0;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v1 >> 3) + 0x7FFF8010) = -168430091;
  }
};

// Line 6392: range 00000000159AE5E2-00000000159AEAA1
bool __cdecl Scene::isGroupVisionTypeValidInScene(const Scene *const this, uint32_t group_vision_type)
{
  unsigned __int64 v2; // r12
  __int64 v3; // rax
  _DWORD *v4; // r13
  common::milog::MiLogStream *v5; // r14
  int v6; // r14d
  std::__shared_ptr_access<Player,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v7; // rax
  int v8; // eax
  int v9; // r14d
  std::__shared_ptr_access<PlayerViewMgr,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v10; // rax
  bool result; // al
  bool v13; // [rsp+3h] [rbp-EDh]
  std::map<unsigned int,std::weak_ptr<Player>>::const_iterator __for_begin; // [rsp+10h] [rbp-E0h] BYREF
  std::map<unsigned int,std::weak_ptr<Player>>::const_iterator __for_end; // [rsp+18h] [rbp-D8h] BYREF
  const std::map<unsigned int,std::weak_ptr<Player>> *__for_range; // [rsp+20h] [rbp-D0h]
  const std::pair<unsigned int const,std::weak_ptr<Player> > *v17; // [rsp+28h] [rbp-C8h]
  std::tuple_element<0,const std::pair<unsigned int const,std::weak_ptr<Player> > >::type *uid; // [rsp+30h] [rbp-C0h]
  std::tuple_element<1,const std::pair<unsigned int const,std::weak_ptr<Player> > >::type *player_wtr; // [rsp+38h] [rbp-B8h]
  common::milog::MiLogStream v20; // [rsp+40h] [rbp-B0h] BYREF
  char v21[144]; // [rsp+60h] [rbp-90h] BYREF

  v2 = (unsigned __int64)v21;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_1(96LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "2 32 16 15 player_ptr:6397 64 16 17 view_mgr_ptr:6402";
  *(_QWORD *)(v2 + 16) = Scene::isGroupVisionTypeValidInScene;
  v4 = (_DWORD *)(v2 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = -219021312;
  v4[536862722] = -202178560;
  common::milog::MiLogStream::create(
    &v20,
    &common::milog::MiLogDefault::default_log_obj_,
    1u,
    "./src/scene/scene.cpp",
    "isGroupVisionTypeValidInScene",
    6394);
  v5 = common::milog::MiLogStream::operator<<<char [19],(char *[19])0>(&v20, (const char (*)[19])"player_map_ size: ");
  __for_end._M_node = (std::_Rb_tree_const_iterator<std::pair<unsigned int const,std::weak_ptr<Player> > >::_Base_ptr)std::map<unsigned int,std::weak_ptr<Player>>::size(&this->player_map_);
  common::milog::MiLogStream::operator<<<unsigned long,(unsigned long *)0>(v5, (const unsigned __int64 *)&__for_end);
  common::milog::MiLogStream::~MiLogStream(&v20);
  __for_range = &this->player_map_;
  __for_begin._M_node = std::map<unsigned int,std::weak_ptr<Player>>::begin(&this->player_map_)._M_node;
  __for_end._M_node = std::map<unsigned int,std::weak_ptr<Player>>::end(__for_range)._M_node;
  while ( std::operator!=(&__for_begin, &__for_end) )
  {
    v17 = std::_Rb_tree_const_iterator<std::pair<unsigned int const,std::weak_ptr<Player>>>::operator*(&__for_begin);
    uid = std::get<0ul,unsigned int const,std::weak_ptr<Player>>(v17);
    player_wtr = (std::tuple_element<1,const std::pair<unsigned int const,std::weak_ptr<Player> > >::type *)std::get<1ul,unsigned int const,std::weak_ptr<Player>>(v17);
    std::weak_ptr<Player>::lock((const std::weak_ptr<Player> *const)(v2 + 32));
    if ( std::operator==<Player>((const std::shared_ptr<Player> *)(v2 + 32), 0LL) )
    {
      v6 = 0;
    }
    else
    {
      v7 = std::__shared_ptr_access<Player,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Player,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 32));
      v8 = Player::getUid(v7);
      Scene::findPlayerViewMgr((const Scene *const)(v2 + 64), (__int64)this, v8);
      if ( std::operator==<PlayerViewMgr>(0LL, (const std::shared_ptr<PlayerViewMgr> *)(v2 + 64)) )
      {
        common::milog::MiLogStream::create(
          &v20,
          &common::milog::MiLogDefault::default_log_obj_,
          3u,
          "./src/scene/scene.cpp",
          "isGroupVisionTypeValidInScene",
          6405);
        if ( *(_BYTE *)(((unsigned __int64)uid >> 3) + 0x7FFF8000) != 0
          && (char)(((unsigned __int8)uid & 7) + 3) >= *(_BYTE *)(((unsigned __int64)uid >> 3) + 0x7FFF8000) )
        {
          __asan_report_load4(uid);
        }
        common::milog::MiLogStream::operator()(&v20, "uid:%u view_mgr is null", *uid);
        common::milog::MiLogStream::~MiLogStream(&v20);
        v9 = 0;
      }
      else
      {
        v10 = std::__shared_ptr_access<PlayerViewMgr,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<PlayerViewMgr,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 64));
        if ( PlayerViewMgr::isContainGroupVisionType(v10, group_vision_type) || !group_vision_type )
        {
          common::milog::MiLogStream::create(
            &v20,
            &common::milog::MiLogDefault::default_log_obj_,
            1u,
            "./src/scene/scene.cpp",
            "isGroupVisionTypeValidInScene",
            6411);
          common::milog::MiLogStream::operator<<<char [37],(char *[37])0>(
            &v20,
            (const char (*)[37])"isContainGroupVisionType return true");
          common::milog::MiLogStream::~MiLogStream(&v20);
          v13 = 1;
          v9 = 1;
        }
        else
        {
          v9 = 2;
        }
      }
      std::shared_ptr<PlayerViewMgr>::~shared_ptr((std::shared_ptr<PlayerViewMgr> *const)(v2 + 64));
      if ( v9 )
      {
        if ( v9 == 2 )
          v6 = 2;
        else
          v6 = 1;
      }
      else
      {
        v6 = 0;
      }
    }
    std::shared_ptr<Player>::~shared_ptr((std::shared_ptr<Player> *const)(v2 + 32));
    if ( v6 && v6 != 2 )
      goto LABEL_28;
    std::_Rb_tree_const_iterator<std::pair<unsigned int const,std::weak_ptr<Player>>>::operator++(&__for_begin);
  }
  v13 = 0;
LABEL_28:
  result = v13;
  if ( v21 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8008) = 0;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8008) = -168430091;
  }
  return result;
};
