// File: /data/jenkins/jenkins_hk4e/workspace/hk4e_3.4_dev/gameserver/src/scene/player_scene_comp.cpp

// Line 74: range 0000000013E38956-0000000013E38A4A
void __cdecl LevelTagInfo::fromBin(LevelTagInfo *const this, const proto::LevelTagBin *proto_bin)
{
  google::protobuf::uint32 v2; // ebx
  std::map<unsigned int,unsigned int>::key_type *p_k; // rsi
  std::map<unsigned int,unsigned int>::mapped_type *v4; // rax
  google::protobuf::uint32 *v5; // rdx
  char v6; // cl
  std::map<unsigned int,unsigned int>::key_type __k; // [rsp+1Ch] [rbp-34h] BYREF
  google::protobuf::RepeatedPtrField<proto::LevelTagChangeBin>::const_iterator __for_begin; // [rsp+20h] [rbp-30h] BYREF
  google::protobuf::RepeatedPtrField<proto::LevelTagChangeBin>::const_iterator __for_end; // [rsp+28h] [rbp-28h] BYREF
  const google::protobuf::RepeatedPtrField<proto::LevelTagChangeBin> *__for_range; // [rsp+30h] [rbp-20h]
  const proto::LevelTagChangeBin *change_bin; // [rsp+38h] [rbp-18h]

  __for_range = proto::LevelTagBin::level_tag_change_list(proto_bin);
  __for_begin.it_ = google::protobuf::RepeatedPtrField<proto::LevelTagChangeBin>::begin(__for_range).it_;
  __for_end.it_ = google::protobuf::RepeatedPtrField<proto::LevelTagChangeBin>::end(__for_range).it_;
  while ( google::protobuf::internal::RepeatedPtrIterator<proto::LevelTagChangeBin const>::operator!=(
            &__for_begin,
            &__for_end) )
  {
    change_bin = google::protobuf::internal::RepeatedPtrIterator<proto::LevelTagChangeBin const>::operator*(&__for_begin);
    v2 = proto::LevelTagChangeBin::change_time(change_bin);
    __k = proto::LevelTagChangeBin::level_tag_id(change_bin);
    p_k = &__k;
    v4 = std::map<unsigned int,unsigned int>::operator[](&this->level_tag_change_map, &__k);
    v5 = v4;
    v6 = *(_BYTE *)(((unsigned __int64)v4 >> 3) + 0x7FFF8000);
    if ( v6 != 0 && (char)(((unsigned __int8)v4 & 7) + 3) >= v6 )
    {
      LOBYTE(p_k) = v6 != 0;
      __asan_report_store4(v4, p_k, (_BYTE)v4);
    }
    *v5 = v2;
    google::protobuf::internal::RepeatedPtrIterator<proto::LevelTagChangeBin const>::operator++(&__for_begin);
  }
};

// Line 82: range 0000000013E38A4C-0000000013E38BFC
void __cdecl LevelTagInfo::toBin(const LevelTagInfo *const this, proto::LevelTagBin *proto_bin)
{
  std::pair<unsigned int const,unsigned int> *v2; // rax
  std::pair<unsigned int const,unsigned int> *v3; // rdx
  std::map<unsigned int,unsigned int>::const_iterator __for_begin; // [rsp+18h] [rbp-38h] BYREF
  std::map<unsigned int,unsigned int>::const_iterator __for_end; // [rsp+20h] [rbp-30h] BYREF
  const std::map<unsigned int,unsigned int> *__for_range; // [rsp+28h] [rbp-28h]
  std::tuple_element<0,std::pair<unsigned int const,unsigned int> >::type *level_tag_id; // [rsp+30h] [rbp-20h]
  std::tuple_element<1,std::pair<unsigned int const,unsigned int> >::type *change_time; // [rsp+38h] [rbp-18h]
  proto::LevelTagChangeBin *proto_change_bin; // [rsp+40h] [rbp-10h]
  std::pair<unsigned int const,unsigned int> __in; // [rsp+48h] [rbp-8h] BYREF

  __for_range = &this->level_tag_change_map;
  __for_begin._M_node = std::map<unsigned int,unsigned int>::begin(&this->level_tag_change_map)._M_node;
  __for_end._M_node = std::map<unsigned int,unsigned int>::end(&this->level_tag_change_map)._M_node;
  while ( std::operator!=(&__for_begin, &__for_end) )
  {
    v2 = (std::pair<unsigned int const,unsigned int> *)std::_Rb_tree_const_iterator<std::pair<unsigned int const,unsigned int>>::operator*(&__for_begin);
    v3 = v2;
    if ( ((unsigned __int8)v2 & 7) >= *(_BYTE *)(((unsigned __int64)v2 >> 3) + 0x7FFF8000)
      && *(_BYTE *)(((unsigned __int64)v2 >> 3) + 0x7FFF8000) != 0
      || *(_BYTE *)((((unsigned __int64)&v2->second + 3) >> 3) + 0x7FFF8000) != 0
      && (((unsigned __int8)v2 + 7) & 7) >= *(_BYTE *)((((unsigned __int64)&v2->second + 3) >> 3) + 0x7FFF8000) )
    {
      __asan_report_load_n(v2, 8LL);
    }
    __in = *v3;
    level_tag_id = std::get<0ul,unsigned int const,unsigned int>(&__in);
    change_time = std::get<1ul,unsigned int const,unsigned int>(&__in);
    proto_change_bin = proto::LevelTagBin::add_level_tag_change_list(proto_bin);
    if ( *(_BYTE *)(((unsigned __int64)level_tag_id >> 3) + 0x7FFF8000) != 0
      && (char)(((unsigned __int8)level_tag_id & 7) + 3) >= *(_BYTE *)(((unsigned __int64)level_tag_id >> 3) + 0x7FFF8000) )
    {
      __asan_report_load4(level_tag_id);
    }
    proto::LevelTagChangeBin::set_level_tag_id(proto_change_bin, *level_tag_id);
    if ( *(_BYTE *)(((unsigned __int64)change_time >> 3) + 0x7FFF8000) != 0
      && (char)(((unsigned __int8)change_time & 7) + 3) >= *(_BYTE *)(((unsigned __int64)change_time >> 3) + 0x7FFF8000) )
    {
      __asan_report_load4(change_time);
    }
    proto::LevelTagChangeBin::set_change_time(proto_change_bin, *change_time);
    std::_Rb_tree_const_iterator<std::pair<unsigned int const,unsigned int>>::operator++(&__for_begin);
  }
};

// Line 92: range 0000000013E38BFE-0000000013E38F26
void __cdecl LevelTagInfo::init(LevelTagInfo *const this)
{
  unsigned __int64 v1; // rbx
  __int64 v2; // rax
  unsigned __int64 v3; // r12
  LevelTagExcelConfigMgr *p_level_tag_config_mgr; // rcx
  std::map<unsigned int,unsigned int>::mapped_type *v5; // rax
  std::tuple_element<1,const std::pair<unsigned int const,unsigned int> >::type *v6; // rdx
  std::tuple_element<1,const std::pair<unsigned int const,unsigned int> >::type v7; // ecx
  std::tuple_element<1,const std::pair<unsigned int const,unsigned int> >::type v8; // r14d
  char *v9; // rsi
  std::map<unsigned int,unsigned int>::mapped_type *v10; // rax
  std::tuple_element<1,const std::pair<unsigned int const,unsigned int> >::type *v11; // rdx
  char v12; // cl
  std::map<unsigned int,unsigned int>::iterator __for_begin; // [rsp+10h] [rbp-B0h] BYREF
  std::map<unsigned int,unsigned int>::iterator __for_end; // [rsp+18h] [rbp-A8h] BYREF
  std::map<unsigned int,unsigned int> *__for_range; // [rsp+20h] [rbp-A0h]
  const std::pair<unsigned int const,unsigned int> *v16; // [rsp+28h] [rbp-98h]
  std::tuple_element<0,const std::pair<unsigned int const,unsigned int> >::type *level_tag_id; // [rsp+30h] [rbp-90h]
  std::tuple_element<1,const std::pair<unsigned int const,unsigned int> >::type *change_time; // [rsp+38h] [rbp-88h]
  std::shared_ptr<Config> v19; // [rsp+40h] [rbp-80h] BYREF
  char v20[112]; // [rsp+50h] [rbp-70h] BYREF

  v1 = (unsigned __int64)v20;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_0(64LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "1 32 4 12 series_id:95";
  *(_QWORD *)(v1 + 16) = LevelTagInfo::init;
  v3 = v1 >> 3;
  *(_DWORD *)(v3 + 2147450880) = -235802127;
  *(_DWORD *)(v3 + 2147450884) = -202116348;
  __for_range = &this->level_tag_change_map;
  __for_begin._M_node = std::map<unsigned int,unsigned int>::begin(&this->level_tag_change_map)._M_node;
  __for_end._M_node = std::map<unsigned int,unsigned int>::end(&this->level_tag_change_map)._M_node;
  while ( std::operator!=(&__for_begin, &__for_end) )
  {
    v16 = std::_Rb_tree_iterator<std::pair<unsigned int const,unsigned int>>::operator*(&__for_begin);
    level_tag_id = std::get<0ul,unsigned int const,unsigned int>(v16);
    change_time = (std::tuple_element<1,const std::pair<unsigned int const,unsigned int> >::type *)std::get<1ul,unsigned int const,unsigned int>(v16);
    ServiceBox::findService<GameserverService>();
    GameserverService::getConfig((GameserverService *const)&v19);
    p_level_tag_config_mgr = &std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false> *const)&v19)->design_config.txt_config_mgr.level_tag_config_mgr;
    if ( *(_BYTE *)(((unsigned __int64)level_tag_id >> 3) + 0x7FFF8000) != 0
      && (char)(((unsigned __int8)level_tag_id & 7) + 3) >= *(_BYTE *)(((unsigned __int64)level_tag_id >> 3) + 0x7FFF8000) )
    {
      __asan_report_load4(level_tag_id);
    }
    *(_DWORD *)(v1 + 32) = LevelTagExcelConfigMgr::getLevelTagSeriesId(p_level_tag_config_mgr, *level_tag_id);
    std::shared_ptr<Config>::~shared_ptr(&v19);
    v5 = std::map<unsigned int,unsigned int>::operator[](
           &this->series_change_map,
           (const std::map<unsigned int,unsigned int>::key_type *)(v1 + 32));
    v6 = v5;
    if ( *(_BYTE *)(((unsigned __int64)v5 >> 3) + 0x7FFF8000) != 0
      && (char)(((unsigned __int8)v5 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)v5 >> 3) + 0x7FFF8000) )
    {
      __asan_report_load4(v5);
    }
    v7 = *v6;
    if ( *(_BYTE *)(((unsigned __int64)change_time >> 3) + 0x7FFF8000) != 0
      && (char)(((unsigned __int8)change_time & 7) + 3) >= *(_BYTE *)(((unsigned __int64)change_time >> 3) + 0x7FFF8000) )
    {
      __asan_report_load4(change_time);
    }
    if ( v7 < *change_time )
    {
      v8 = *change_time;
      v9 = (char *)(v1 + 32);
      v10 = std::map<unsigned int,unsigned int>::operator[](
              &this->series_change_map,
              (const std::map<unsigned int,unsigned int>::key_type *)(v1 + 32));
      v11 = v10;
      v12 = *(_BYTE *)(((unsigned __int64)v10 >> 3) + 0x7FFF8000);
      if ( v12 != 0 && (char)(((unsigned __int8)v10 & 7) + 3) >= v12 )
      {
        LOBYTE(v9) = v12 != 0;
        __asan_report_store4(v10, v9, (_BYTE)v10);
      }
      *v11 = v8;
    }
    std::_Rb_tree_iterator<std::pair<unsigned int const,unsigned int>>::operator++(&__for_begin);
  }
  if ( v20 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
  }
};

// Line 106: range 0000000013E38F28-0000000013E3A32C
void __cdecl PlayerSceneComp::PlayerSceneComp(PlayerSceneComp *const this, Player *player)
{
  unsigned __int64 v2; // rbx
  __int64 v3; // rax
  unsigned __int64 v4; // r12
  int (**v5)(...); // rdx
  __int64 v6; // rsi
  bool v7; // dl
  __int64 v8; // rsi
  bool v9; // dl
  __int64 v10; // rsi
  bool v11; // dl
  __int64 v12; // rsi
  bool v13; // dl
  __int64 v14; // rsi
  bool v15; // dl
  __int64 v16; // rsi
  __int64 v17; // rdx
  __int64 v18; // rsi
  __int64 v19; // rdx
  __int64 v20; // rsi
  bool v21; // dl
  __int64 v22; // rsi
  bool v23; // dl
  __int64 v24; // rsi
  __int64 v25; // rdx
  __int64 v26; // rsi
  __int64 v27; // rdx
  __int64 v28; // rsi
  bool v29; // dl
  __int64 v30; // rsi
  bool v31; // dl
  __int64 v32; // rsi
  bool v33; // dl
  __int64 v34; // rsi
  bool v35; // dl
  common::milog::MiLogStream *v36; // r13
  PlayerWorld *v37; // r13
  unsigned int val; // [rsp+1Ch] [rbp-94h] BYREF
  std::shared_ptr<PlayerWorld> __r; // [rsp+20h] [rbp-90h] BYREF
  common::milog::MiLogStream v41; // [rsp+30h] [rbp-80h] BYREF
  char v42[96]; // [rsp+50h] [rbp-60h] BYREF

  v2 = (unsigned __int64)v42;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_0(64LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "1 32 4 12 world_id:109";
  *(_QWORD *)(v2 + 16) = PlayerSceneComp::PlayerSceneComp;
  v4 = v2 >> 3;
  *(_DWORD *)(v4 + 2147450880) = -235802127;
  *(_DWORD *)(v4 + 2147450884) = -202116348;
  PlayerCompBase::PlayerCompBase(this, player);
  v5 = (int (**)(...))(&`vtable for'PlayerSceneComp + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, player);
  this->_vptr_PlayerCompBase = v5;
  if ( *(_BYTE *)(((unsigned __int64)&this->my_cur_scene_id_ >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->my_cur_scene_id_ >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_store4(&this->my_cur_scene_id_, player, (_BYTE)this + 32);
  }
  this->my_cur_scene_id_ = 0;
  v6 = (((_BYTE)this + 36) & 7u) + 3;
  v7 = *(_BYTE *)(((unsigned __int64)&this->my_cur_player_scene_id_ >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)this + 36) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&this->my_cur_player_scene_id_ >> 3)
                                                        + 0x7FFF8000);
  if ( v7 )
    __asan_report_store4(&this->my_cur_player_scene_id_, v6, v7);
  this->my_cur_player_scene_id_ = 0;
  if ( *(_BYTE *)(((unsigned __int64)&this->my_cur_home_scene_id_ >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->my_cur_home_scene_id_ >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_store4(&this->my_cur_home_scene_id_, v6, (_BYTE)this + 40);
  }
  this->my_cur_home_scene_id_ = 0;
  v8 = (((_BYTE)this + 44) & 7u) + 3;
  v9 = *(_BYTE *)(((unsigned __int64)&this->my_cur_area_id_ >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)this + 44) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&this->my_cur_area_id_ >> 3) + 0x7FFF8000);
  if ( v9 )
    __asan_report_store4(&this->my_cur_area_id_, v8, v9);
  this->my_cur_area_id_ = 0;
  if ( *(_BYTE *)(((unsigned __int64)&this->my_prev_scene_id_ >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->my_prev_scene_id_ >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_store4(&this->my_prev_scene_id_, v8, (_BYTE)this + 48);
  }
  this->my_prev_scene_id_ = 0;
  std::shared_ptr<PlayerWorld>::shared_ptr(&this->my_player_world_ptr_);
  std::set<unsigned int>::set(&this->monster_seen_set_);
  std::map<unsigned int,unsigned int>::map(&this->monster_killed_num_map_);
  std::unordered_map<unsigned int,std::unordered_set<proto::MapMarkPoint>>::unordered_map(&this->mark_point_set_map_);
  std::unordered_map<unsigned int,proto::SceneProductBin>::unordered_map(&this->world_product_map_);
  std::unordered_map<unsigned int,std::unordered_map<unsigned int,proto::SceneProductBin>>::unordered_map(&this->dungeon_product_map_);
  if ( *(_BYTE *)(((unsigned __int64)&this->trivial_entity_drop_num_ >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->trivial_entity_drop_num_ >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_store4(&this->trivial_entity_drop_num_, v8, (_BYTE)this + 80);
  }
  this->trivial_entity_drop_num_ = 0;
  v10 = (((_BYTE)this + 84) & 7u) + 3;
  v11 = *(_BYTE *)(((unsigned __int64)&this->trivial_entity_drop_time_ >> 3) + 0x7FFF8000) != 0
     && (char)((((_BYTE)this + 84) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&this->trivial_entity_drop_time_ >> 3)
                                                         + 0x7FFF8000);
  if ( v11 )
    __asan_report_store4(&this->trivial_entity_drop_time_, v10, v11);
  this->trivial_entity_drop_time_ = 0;
  std::unordered_map<unsigned int,proto::SceneBossChestBin>::unordered_map(&this->scene_boss_chest_map_);
  std::unordered_map<unsigned int,proto::SubfieldDropBin>::unordered_map(&this->subfield_drop_map_);
  if ( *(_BYTE *)(((unsigned __int64)&this->subfield_drop_time_ >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->subfield_drop_time_ >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_store4(&this->subfield_drop_time_, v10, (_BYTE)this - 56);
  }
  this->subfield_drop_time_ = 0;
  std::unordered_map<unsigned int,unsigned int>::unordered_map(&this->chest_open_num_map_);
  std::unordered_map<unsigned int,unsigned int>::unordered_map(&this->gadget_interact_num_map_);
  std::unordered_map<std::string,unsigned int>::unordered_map(&this->daily_gadget_drop_category_count_map_);
  if ( *(_BYTE *)(((unsigned __int64)&this->last_refresh_daily_gadget_drop_category_count_map_time_ >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->last_refresh_daily_gadget_drop_category_count_map_time_ >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_store4(&this->last_refresh_daily_gadget_drop_category_count_map_time_, v10, (_BYTE)this + 120);
  }
  this->last_refresh_daily_gadget_drop_category_count_map_time_ = 0;
  std::unordered_map<unsigned int,bool>::unordered_map(&this->map_area_info_map_);
  std::map<unsigned int,unsigned int>::map(&this->monster_captured_num_map_);
  std::unordered_map<unsigned int,std::weak_ptr<DungeonScene>>::unordered_map(&this->create_persistent_dungeon_scene_map_);
  std::unordered_map<unsigned int,proto::SceneBin>::unordered_map(&this->persistent_dungeon_scene_bin_map_);
  std::pair<unsigned int,unsigned int>::pair<unsigned int,unsigned int,true>(&this->cur_deshret_obelisk_);
  std::weak_ptr<Scene>::weak_ptr(&this->cur_scene_wtr_);
  if ( *(_BYTE *)(((unsigned __int64)&this->cur_scene_id_ >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->cur_scene_id_ >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_store4(&this->cur_scene_id_, v10, (_BYTE)this + 112);
  }
  this->cur_scene_id_ = 0;
  v12 = (((_BYTE)this + 116) & 7u) + 3;
  v13 = *(_BYTE *)(((unsigned __int64)&this->first_trans_point_id_ >> 3) + 0x7FFF8000) != 0
     && (char)((((_BYTE)this + 116) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&this->first_trans_point_id_ >> 3)
                                                          + 0x7FFF8000);
  if ( v13 )
    __asan_report_store4(&this->first_trans_point_id_, v12, v13);
  this->first_trans_point_id_ = 0;
  if ( *(_BYTE *)(((unsigned __int64)&this->enter_first_trans_point_time_ >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->enter_first_trans_point_time_ >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_store4(&this->enter_first_trans_point_time_, v12, (_BYTE)this + 120);
  }
  this->enter_first_trans_point_time_ = 0;
  std::weak_ptr<World>::weak_ptr(&this->cur_world_wtr_);
  if ( *(_BYTE *)(((unsigned __int64)&this->cur_world_owner_uid_ >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->cur_world_owner_uid_ >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_store4(&this->cur_world_owner_uid_, v12, (_BYTE)this - 112);
  }
  this->cur_world_owner_uid_ = 0;
  std::set<std::weak_ptr<Entity>,std::owner_less<std::weak_ptr<Entity>>,std::allocator<std::weak_ptr<Entity>>>::set(&this->disconnect_destroy_entity_set_);
  std::set<std::weak_ptr<Entity>,std::owner_less<std::weak_ptr<Entity>>,std::allocator<std::weak_ptr<Entity>>>::set(&this->leave_scene_destroy_entity_set_);
  std::unordered_map<unsigned long,std::weak_ptr<Npc>>::unordered_map(&this->quest_npc_entity_map_);
  std::weak_ptr<Scene>::weak_ptr(&this->dest_scene_wtr_);
  Vector3::Vector3(&this->dest_pos_, 0.0, 0.0, 0.0);
  Vector3::Vector3(&this->dest_rot_, 0.0, 0.0, 0.0);
  v14 = (((_BYTE)this + 92) & 7u) + 3;
  v15 = *(_BYTE *)(((unsigned __int64)&this->dest_enter_type_ >> 3) + 0x7FFF8000) != 0
     && (char)((((_BYTE)this + 92) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&this->dest_enter_type_ >> 3) + 0x7FFF8000);
  if ( v15 )
    __asan_report_store4(&this->dest_enter_type_, v14, v15);
  this->dest_enter_type_ = ENTER_NONE;
  if ( *(_BYTE *)(((unsigned __int64)&this->dest_vision_type_ >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->dest_vision_type_ >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_store4(&this->dest_vision_type_, v14, (_BYTE)this + 96);
  }
  this->dest_vision_type_ = VISION_NONE;
  v16 = ((_BYTE)this + 100) & 7;
  v17 = (*(_BYTE *)(((unsigned __int64)&this->is_enter_relogin_ >> 3) + 0x7FFF8000) != 0) & (unsigned __int8)((char)v16 >= *(_BYTE *)(((unsigned __int64)&this->is_enter_relogin_ >> 3) + 0x7FFF8000));
  if ( (_BYTE)v17 )
    __asan_report_store1(&this->is_enter_relogin_, v16, v17);
  this->is_enter_relogin_ = 0;
  v18 = ((_BYTE)this + 101) & 7;
  v19 = (*(_BYTE *)(((unsigned __int64)&this->is_client_relogin_ >> 3) + 0x7FFF8000) != 0) & (unsigned __int8)((char)v18 >= *(_BYTE *)(((unsigned __int64)&this->is_client_relogin_ >> 3) + 0x7FFF8000));
  if ( (_BYTE)v19 )
    __asan_report_store1(&this->is_client_relogin_, v18, v19);
  this->is_client_relogin_ = 0;
  if ( *(_BYTE *)(((unsigned __int64)&this->dest_enter_reason_ >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->dest_enter_reason_ >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_store4(&this->dest_enter_reason_, v18, (_BYTE)this + 104);
  }
  this->dest_enter_reason_ = ENTER_REASON_NONE;
  v20 = (((_BYTE)this + 108) & 7u) + 3;
  v21 = *(_BYTE *)(((unsigned __int64)&this->enter_scene_state_ >> 3) + 0x7FFF8000) != 0
     && (char)((((_BYTE)this + 108) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&this->enter_scene_state_ >> 3)
                                                          + 0x7FFF8000);
  if ( v21 )
    __asan_report_store4(&this->enter_scene_state_, v20, v21);
  this->enter_scene_state_ = ENTER_SCENE_NONE;
  if ( *(_BYTE *)(((unsigned __int64)&this->enter_scene_token_ >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->enter_scene_token_ >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_store4(&this->enter_scene_token_, v20, (_BYTE)this + 112);
  }
  this->enter_scene_token_ = 0;
  v22 = (((_BYTE)this + 116) & 7u) + 3;
  v23 = *(_BYTE *)(((unsigned __int64)&this->last_check_weather_height_ >> 3) + 0x7FFF8000) != 0
     && (char)((((_BYTE)this + 116) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&this->last_check_weather_height_ >> 3)
                                                          + 0x7FFF8000);
  if ( v23 )
    __asan_report_store4(&this->last_check_weather_height_, v22, v23);
  this->last_check_weather_height_ = 0.0;
  if ( *(_BYTE *)(((unsigned __int64)&this->total_boss_chest_take_num_ >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->total_boss_chest_take_num_ >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_store4(&this->total_boss_chest_take_num_, v22, (_BYTE)this + 120);
  }
  this->total_boss_chest_take_num_ = 0;
  v24 = ((_BYTE)this + 124) & 7;
  v25 = (*(_BYTE *)(((unsigned __int64)&this->is_has_transfer_mark_for_speed_check_ >> 3) + 0x7FFF8000) != 0) & (unsigned __int8)((char)v24 >= *(_BYTE *)(((unsigned __int64)&this->is_has_transfer_mark_for_speed_check_ >> 3) + 0x7FFF8000));
  if ( (_BYTE)v25 )
    __asan_report_store1(&this->is_has_transfer_mark_for_speed_check_, v24, v25);
  this->is_has_transfer_mark_for_speed_check_ = 0;
  v26 = ((_BYTE)this + 125) & 7;
  v27 = (*(_BYTE *)(((unsigned __int64)&this->is_has_transfer_mark_for_scene_time_speed_check_ >> 3) + 0x7FFF8000) != 0) & (unsigned __int8)((char)v26 >= *(_BYTE *)(((unsigned __int64)&this->is_has_transfer_mark_for_scene_time_speed_check_ >> 3) + 0x7FFF8000));
  if ( (_BYTE)v27 )
    __asan_report_store1(&this->is_has_transfer_mark_for_scene_time_speed_check_, v26, v27);
  this->is_has_transfer_mark_for_scene_time_speed_check_ = 0;
  if ( *(_BYTE *)(((unsigned __int64)&this->prev_weather_area_id_ >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->prev_weather_area_id_ >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_store4(&this->prev_weather_area_id_, v26, (_BYTE)this + 0x80);
  }
  this->prev_weather_area_id_ = 0;
  v28 = (((_BYTE)this - 124) & 7u) + 3;
  v29 = *(_BYTE *)(((unsigned __int64)&this->city_id_ >> 3) + 0x7FFF8000) != 0
     && (char)((((_BYTE)this - 124) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&this->city_id_ >> 3) + 0x7FFF8000);
  if ( v29 )
    __asan_report_store4(&this->city_id_, v28, v29);
  this->city_id_ = 0;
  if ( *(_BYTE *)(((unsigned __int64)&this->level1_area_id_ >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->level1_area_id_ >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_store4(&this->level1_area_id_, v28, (_BYTE)this - 120);
  }
  this->level1_area_id_ = 0;
  v30 = (((_BYTE)this - 116) & 7u) + 3;
  v31 = *(_BYTE *)(((unsigned __int64)&this->level2_area_id_ >> 3) + 0x7FFF8000) != 0
     && (char)((((_BYTE)this - 116) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&this->level2_area_id_ >> 3) + 0x7FFF8000);
  if ( v31 )
    __asan_report_store4(&this->level2_area_id_, v30, v31);
  this->level2_area_id_ = 0;
  std::weak_ptr<WeatherArea>::weak_ptr(&this->weather_area_wtr_);
  std::string::basic_string(&this->enter_world_tran_);
  std::weak_ptr<Observer>::weak_ptr(&this->skill_event_observer_);
  std::weak_ptr<Observer>::weak_ptr(&this->change_avatar_observer_);
  std::weak_ptr<Observer>::weak_ptr(&this->kill_monster_observer_);
  std::weak_ptr<Observer>::weak_ptr(&this->world_player_change_observer_);
  std::weak_ptr<Observer>::weak_ptr(&this->fishing_succ_observer_);
  std::weak_ptr<Observer>::weak_ptr(&this->capture_succ_observer_);
  std::unordered_map<unsigned int,std::set<std::pair<unsigned int,unsigned int>>>::unordered_map(&this->oneoff_gather_point_type_to_group_configs_map_);
  if ( *(_BYTE *)(((unsigned __int64)&this->chat_block_end_time_ >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->chat_block_end_time_ >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_store4(&this->chat_block_end_time_, v30, (_BYTE)this + 88);
  }
  this->chat_block_end_time_ = 0;
  v32 = (((_BYTE)this + 92) & 7u) + 3;
  v33 = *(_BYTE *)(((unsigned __int64)&this->client_silence_version_ >> 3) + 0x7FFF8000) != 0
     && (char)((((_BYTE)this + 92) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&this->client_silence_version_ >> 3)
                                                         + 0x7FFF8000);
  if ( v33 )
    __asan_report_store4(&this->client_silence_version_, v32, v33);
  this->client_silence_version_ = 0;
  std::set<std::weak_ptr<Challenge>,std::owner_less<std::weak_ptr<Challenge>>,std::allocator<std::weak_ptr<Challenge>>>::set(&this->challenge_wtr_set_);
  std::weak_ptr<Challenge>::weak_ptr(&this->current_combat_stat_challenge_wtr_);
  if ( *(_BYTE *)(((unsigned __int64)&this->quit_mp_begin_time_ >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->quit_mp_begin_time_ >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_store4(&this->quit_mp_begin_time_, v32, (_BYTE)this - 96);
  }
  this->quit_mp_begin_time_ = 0;
  if ( *(_BYTE *)(((unsigned __int64)&this->last_hit_tree_drop_ms_ >> 3) + 0x7FFF8000) )
    __asan_report_store8(&this->last_hit_tree_drop_ms_, v32);
  this->last_hit_tree_drop_ms_ = 0LL;
  std::vector<HitTreePos>::vector(&this->hit_tree_pos_vec_);
  std::set<unsigned int>::set(&this->obtained_wood_type_set_);
  if ( *(_BYTE *)(((unsigned __int64)&this->weekly_boss_resin_discount_num_ >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->weekly_boss_resin_discount_num_ >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_store4(&this->weekly_boss_resin_discount_num_, v32, (_BYTE)this - 8);
  }
  this->weekly_boss_resin_discount_num_ = 0;
  v34 = (((_BYTE)this - 4) & 7u) + 3;
  v35 = *(_BYTE *)(((unsigned __int64)&this->last_weekly_boss_resin_discount_time_ >> 3) + 0x7FFF8000) != 0
     && (char)((((_BYTE)this - 4) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&this->last_weekly_boss_resin_discount_time_ >> 3)
                                                        + 0x7FFF8000);
  if ( v35 )
    __asan_report_store4(&this->last_weekly_boss_resin_discount_time_, v34, v35);
  this->last_weekly_boss_resin_discount_time_ = 0;
  std::deque<Vector3>::deque(&this->bush_drop_pos_deque_);
  if ( *(_BYTE *)(((unsigned __int64)&this->last_record_gadget_interact_beyond_distance_log_time_ >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->last_record_gadget_interact_beyond_distance_log_time_ >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_store4(&this->last_record_gadget_interact_beyond_distance_log_time_, v34, (_BYTE)this + 80);
  }
  this->last_record_gadget_interact_beyond_distance_log_time_ = 0;
  std::shared_ptr<proto_log::AntiCheatBodyGadgetInteractBeyondDistance>::shared_ptr(&this->gadget_interact_beyond_distance_log_ptr_);
  AntiCheatLogRecord::AntiCheatLogRecord(&this->gadget_interact_beyond_check_distance_log_record_);
  std::shared_ptr<proto_log::AntiCheatBodyGadgetInteractBeyondCheckDistance>::shared_ptr(&this->gadget_interact_beyond_check_distance_log_ptr_);
  std::map<unsigned int,unsigned int>::map(&this->gadget_chain_level_map_);
  std::set<std::pair<unsigned int,unsigned int>>::set(&this->player_in_region_set_);
  LevelTagInfo::LevelTagInfo(&this->level_tag_info_);
  if ( *(_BYTE *)(((unsigned __int64)&this->last_area_play_type_ >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->last_area_play_type_ >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_store4(&this->last_area_play_type_, v34, (_BYTE)this + 72);
  }
  this->last_area_play_type_ = 0;
  *(_DWORD *)(v2 + 32) = PlayerWorld::getDefaultWorldId();
  common::tools::perf::make_shared<PlayerWorld,unsigned int &>((unsigned int *)&__r, (unsigned int *)(v2 + 32));
  std::shared_ptr<PlayerWorld>::operator=(&this->my_player_world_ptr_, &__r);
  std::shared_ptr<PlayerWorld>::~shared_ptr(&__r);
  if ( std::operator==<PlayerWorld>(&this->my_player_world_ptr_, 0LL) )
  {
    common::milog::MiLogStream::create(
      &v41,
      &common::milog::MiLogDefault::default_log_obj_,
      4u,
      "./src/scene/player_scene_comp.cpp",
      "PlayerSceneComp",
      113);
    v36 = common::milog::MiLogStream::operator<<<char [29],(char *[29])0>(&v41, (const char (*)[29])off_2517D5E0);
    val = Player::getUid(player);
    common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v36, &val);
    common::milog::MiLogStream::~MiLogStream(&v41);
  }
  v37 = std::__shared_ptr_access<PlayerWorld,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<PlayerWorld,(__gnu_cxx::_Lock_policy)2,false,false> *const)&this->my_player_world_ptr_);
  toThisPtr<Player>((Player *)&__r);
  PlayerWorld::setOwnPlayer(v37, (PlayerPtr *)&__r);
  std::shared_ptr<Player>::~shared_ptr((std::shared_ptr<Player> *const)&__r);
  if ( v42 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
  }
};

// Line 120: range 0000000013E3A32E-0000000013E3BB5C
int32_t __cdecl PlayerSceneComp::fromBin(PlayerSceneComp *const this, const proto::PlayerDataBin *player_data_bin)
{
  unsigned __int64 v2; // r12
  __int64 v3; // rax
  _DWORD *v4; // r13
  common::milog::MiLogStream *v5; // r14
  int32_t result; // eax
  PlayerWorld *v7; // r14
  const proto::WorldBin *v8; // rsi
  uint32_t v9; // edx
  char v10; // al
  uint32_t v11; // ecx
  char v12; // dl
  bool v13; // dl
  uint32_t v14; // edx
  char v15; // al
  uint32_t v16; // ecx
  char v17; // dl
  bool v18; // dl
  uint32_t scene_id; // edx
  char v20; // al
  std::unordered_set<proto::MapMarkPoint> *v21; // rax
  const proto::SceneProductBin *v22; // r14
  proto::SceneProductBin *v23; // rax
  google::protobuf::Map<unsigned int,proto::DungeonProductBin>::const_iterator *p_for_end_2; // rsi
  const proto::SceneProductBin *v25; // r14
  proto::SceneProductBin *v26; // rax
  uint32_t v27; // edx
  char v28; // al
  uint32_t v29; // ecx
  char v30; // dl
  bool v31; // dl
  const proto::SceneBossChestBin *v32; // r14
  proto::SceneBossChestBin *v33; // rax
  google::protobuf::Map<unsigned int,unsigned int>::const_iterator *p_for_end_0; // rsi
  const proto::SubfieldDropBin *v35; // r14
  proto::SubfieldDropBin *v36; // rax
  uint32_t v37; // edx
  char v38; // al
  const google::protobuf::MapPair<unsigned int,unsigned int> *v39; // rax
  int it_high; // r14d
  google::protobuf::RepeatedPtrField<proto::MonsterBeKilledNumBin>::const_iterator *p_for_end_1; // rsi
  std::unordered_map<unsigned int,unsigned int>::mapped_type *v42; // rax
  _DWORD *v43; // rdx
  char v44; // cl
  google::protobuf::Map<unsigned int,unsigned int>::const_iterator *v45; // rsi
  const google::protobuf::MapPair<unsigned int,unsigned int> *v46; // rax
  int v47; // r14d
  google::protobuf::RepeatedPtrField<proto::MonsterBeKilledNumBin>::const_iterator *v48; // rsi
  std::unordered_map<unsigned int,unsigned int>::mapped_type *v49; // rax
  _DWORD *v50; // rdx
  char v51; // cl
  uint32_t v52; // edx
  char v53; // al
  google::protobuf::Map<unsigned int,unsigned int>::const_iterator *v54; // rsi
  int M_p; // r14d
  const std::string *v56; // rsi
  std::unordered_map<std::string,unsigned int>::mapped_type *v57; // rax
  _DWORD *v58; // rdx
  char v59; // cl
  uint32_t refresh_daily_gadget_drop_category_count_map_time; // edx
  char v61; // al
  void *v62; // rsi
  google::protobuf::uint32 v63; // r14d
  char *v64; // rsi
  std::map<unsigned int,unsigned int>::mapped_type *v65; // rax
  google::protobuf::uint32 *v66; // rdx
  char v67; // cl
  uint32_t v68; // edx
  char v69; // al
  uint32_t weekly_boss_resin_discount_time; // ecx
  char v71; // dl
  bool v72; // dl
  unsigned __int64 v73; // rax
  unsigned int v74; // r14d
  const unsigned int *v75; // rsi
  std::map<unsigned int,unsigned int>::mapped_type *v76; // rax
  unsigned int *v77; // rdx
  char v78; // cl
  bool is_open; // r14
  char *v80; // rsi
  std::unordered_map<unsigned int,bool>::mapped_type *v81; // rax
  bool *v82; // rdx
  char v83; // cl
  google::protobuf::uint32 v84; // r14d
  char *v85; // rsi
  std::map<unsigned int,unsigned int>::mapped_type *v86; // rax
  google::protobuf::uint32 *v87; // rdx
  char v88; // cl
  const proto::LevelTagBin *v89; // rax
  google::protobuf::RepeatedPtrField<proto::MonsterBeKilledNumBin>::const_iterator *v90; // rsi
  const proto::SceneBin *v91; // r15
  unsigned int *v92; // rcx
  const proto::SceneBin *v93; // r8
  std::pair<std::__detail::_Node_iterator<std::pair<unsigned int const,proto::SceneBin>,false,false>,bool> v94; // rax
  common::milog::MiLogStream *v95; // r14
  common::milog::MiLogStream *v96; // rax
  common::milog::MiLogStream *v97; // r14
  uint32_t area_play_type; // edx
  char v99; // al
  unsigned int val; // [rsp+24h] [rbp-2ACh] BYREF
  google::protobuf::RepeatedPtrField<proto::MapMarkPointBin>::const_iterator __for_begin_0; // [rsp+28h] [rbp-2A8h] BYREF
  google::protobuf::RepeatedField<unsigned int>::const_iterator __for_begin; // [rsp+30h] [rbp-2A0h]
  google::protobuf::RepeatedField<unsigned int>::const_iterator __for_begin_3; // [rsp+38h] [rbp-298h]
  const proto::PlayerSceneCompBin *proto_comp; // [rsp+40h] [rbp-290h]
  const google::protobuf::RepeatedField<unsigned int> *__for_range; // [rsp+48h] [rbp-288h]
  google::protobuf::RepeatedField<unsigned int>::const_iterator __for_end; // [rsp+50h] [rbp-280h]
  const google::protobuf::RepeatedPtrField<proto::MapMarkPointBin> *__for_range_0; // [rsp+58h] [rbp-278h]
  const google::protobuf::Map<unsigned int,proto::SceneProductBin> *__for_range_1; // [rsp+60h] [rbp-270h]
  const google::protobuf::Map<unsigned int,proto::DungeonProductBin> *__for_range_2; // [rsp+68h] [rbp-268h]
  const google::protobuf::Map<unsigned int,proto::SceneBossChestBin> *__for_range_4; // [rsp+70h] [rbp-260h]
  const google::protobuf::Map<unsigned int,proto::SubfieldDropBin> *__for_range_5; // [rsp+78h] [rbp-258h]
  const google::protobuf::Map<unsigned int,unsigned int> *__for_range_6; // [rsp+80h] [rbp-250h]
  const google::protobuf::Map<unsigned int,unsigned int> *__for_range_7; // [rsp+88h] [rbp-248h]
  const google::protobuf::Map<std::string,unsigned int> *__for_range_8; // [rsp+90h] [rbp-240h]
  const google::protobuf::RepeatedPtrField<proto::MonsterBeKilledNumBin> *__for_range_9; // [rsp+98h] [rbp-238h]
  const google::protobuf::RepeatedField<unsigned int> *__for_range_10; // [rsp+A0h] [rbp-230h]
  google::protobuf::RepeatedField<unsigned int>::const_iterator __for_end_3; // [rsp+A8h] [rbp-228h]
  const unsigned int *wood_type; // [rsp+B0h] [rbp-220h]
  const google::protobuf::Map<unsigned int,unsigned int> *__for_range_11; // [rsp+B8h] [rbp-218h]
  const google::protobuf::RepeatedPtrField<proto::MapAreaInfoBin> *__for_range_12; // [rsp+C0h] [rbp-210h]
  const google::protobuf::RepeatedPtrField<proto::MonsterBeCapturedNumBin> *__for_range_13; // [rsp+C8h] [rbp-208h]
  const google::protobuf::RepeatedPtrField<proto::PersistentDungeonSceneBin> *__for_range_14; // [rsp+D0h] [rbp-200h]
  const proto::DeshretObeliskBin *deshret_obelisk_bin; // [rsp+D8h] [rbp-1F8h]
  const proto::PersistentDungeonSceneBin *persistent_dungeon_scene_bin; // [rsp+E0h] [rbp-1F0h]
  const proto::MonsterBeCapturedNumBin *captured_num_bin; // [rsp+E8h] [rbp-1E8h]
  const proto::MapAreaInfoBin *map_area_info_bin; // [rsp+F0h] [rbp-1E0h]
  const unsigned int *p_chain_id; // [rsp+F8h] [rbp-1D8h]
  const proto::MonsterBeKilledNumBin *killed_num_bin; // [rsp+100h] [rbp-1D0h]
  const std::string *p_drop_category; // [rsp+108h] [rbp-1C8h]
  const unsigned int *p_entity_type; // [rsp+110h] [rbp-1C0h]
  const unsigned int *p_scene_id_1; // [rsp+118h] [rbp-1B8h]
  const unsigned int *p_dungeon_id; // [rsp+120h] [rbp-1B0h]
  const google::protobuf::Map<unsigned int,proto::SceneProductBin> *scene_product_map_bin; // [rsp+128h] [rbp-1A8h]
  SceneProductMap *scene_product_map; // [rsp+130h] [rbp-1A0h]
  const google::protobuf::Map<unsigned int,proto::SceneProductBin> *__for_range_3; // [rsp+138h] [rbp-198h]
  const unsigned int *p_scene_id_0; // [rsp+140h] [rbp-190h]
  const unsigned int *p_scene_id; // [rsp+148h] [rbp-188h]
  const proto::MapMarkPointBin *mark; // [rsp+150h] [rbp-180h]
  google::protobuf::RepeatedPtrField<proto::MonsterBeKilledNumBin>::const_iterator __for_end_1; // [rsp+158h] [rbp-178h] BYREF
  google::protobuf::Map<unsigned int,proto::DungeonProductBin>::const_iterator __for_begin_2; // [rsp+160h] [rbp-170h] BYREF
  google::protobuf::Map<unsigned int,proto::DungeonProductBin>::const_iterator __for_end_2; // [rsp+180h] [rbp-150h] BYREF
  google::protobuf::Map<unsigned int,proto::SceneProductBin>::const_iterator __for_begin_1; // [rsp+1A0h] [rbp-130h] BYREF
  google::protobuf::Map<unsigned int,unsigned int>::const_iterator __for_end_0; // [rsp+1C0h] [rbp-110h] BYREF
  common::milog::MiLogStream v144; // [rsp+1E0h] [rbp-F0h] BYREF
  char v145[208]; // [rsp+200h] [rbp-D0h] BYREF

  v2 = (unsigned __int64)v145;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_2(160LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "2 48 4 14 monster_id:141 64 56 8 temp:147";
  *(_QWORD *)(v2 + 16) = PlayerSceneComp::fromBin;
  v4 = (_DWORD *)(v2 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = -234556943;
  v4[536862723] = -218103808;
  v4[536862724] = -202116109;
  proto_comp = proto::PlayerDataBin::scene_bin(player_data_bin);
  if ( std::operator==<PlayerWorld>(&this->my_player_world_ptr_, 0LL) )
  {
    common::milog::MiLogStream::create(
      &v144,
      &common::milog::MiLogDefault::default_log_obj_,
      4u,
      "./src/scene/player_scene_comp.cpp",
      "fromBin",
      126);
    v5 = common::milog::MiLogStream::operator<<<char [28],(char *[28])0>(
           &v144,
           (const char (*)[28])"world_ptr is nullptr, uid: ");
    if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
      __asan_report_load8();
    *(_DWORD *)(v2 + 48) = Player::getUid(this->player_);
    common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v5, (const unsigned int *)(v2 + 48));
    common::milog::MiLogStream::~MiLogStream(&v144);
    result = -1;
  }
  else
  {
    v7 = std::__shared_ptr_access<PlayerWorld,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<PlayerWorld,(__gnu_cxx::_Lock_policy)2,false,false> *const)&this->my_player_world_ptr_);
    v8 = proto::PlayerSceneCompBin::world(proto_comp);
    if ( PlayerWorld::fromBin(v7, v8) )
    {
      common::milog::MiLogStream::create(
        &v144,
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/scene/player_scene_comp.cpp",
        "fromBin",
        131);
      common::milog::MiLogStream::operator<<<char [25],(char *[25])0>(
        &v144,
        (const char (*)[25])"world_ptr->fromBin fails");
      common::milog::MiLogStream::~MiLogStream(&v144);
      result = -1;
    }
    else
    {
      v9 = proto::PlayerSceneCompBin::my_cur_scene_id(proto_comp);
      v10 = *(_BYTE *)(((unsigned __int64)&this->my_cur_scene_id_ >> 3) + 0x7FFF8000);
      if ( v10 != 0 && v10 <= 3 )
      {
        LOBYTE(v8) = v10 != 0;
        __asan_report_store4(&this->my_cur_scene_id_, v8, v9);
      }
      this->my_cur_scene_id_ = v9;
      v11 = proto::PlayerSceneCompBin::my_cur_player_scene_id(proto_comp);
      v12 = *(_BYTE *)(((unsigned __int64)&this->my_cur_player_scene_id_ >> 3) + 0x7FFF8000);
      LOBYTE(v8) = v12 != 0;
      v13 = v12 != 0 && (char)((((_BYTE)this + 36) & 7) + 3) >= v12;
      if ( v13 )
        __asan_report_store4(&this->my_cur_player_scene_id_, v8, v13);
      this->my_cur_player_scene_id_ = v11;
      v14 = proto::PlayerSceneCompBin::my_cur_home_scene_id(proto_comp);
      v15 = *(_BYTE *)(((unsigned __int64)&this->my_cur_home_scene_id_ >> 3) + 0x7FFF8000);
      if ( v15 != 0 && v15 <= 3 )
      {
        LOBYTE(v8) = v15 != 0;
        __asan_report_store4(&this->my_cur_home_scene_id_, v8, v14);
      }
      this->my_cur_home_scene_id_ = v14;
      v16 = proto::PlayerSceneCompBin::my_cur_area_id(proto_comp);
      v17 = *(_BYTE *)(((unsigned __int64)&this->my_cur_area_id_ >> 3) + 0x7FFF8000);
      LOBYTE(v8) = v17 != 0;
      v18 = v17 != 0 && (char)((((_BYTE)this + 44) & 7) + 3) >= v17;
      if ( v18 )
        __asan_report_store4(&this->my_cur_area_id_, v8, v18);
      this->my_cur_area_id_ = v16;
      scene_id = proto::PlayerSceneCompBin::my_prev_scene_id(proto_comp);
      v20 = *(_BYTE *)(((unsigned __int64)&this->my_prev_scene_id_ >> 3) + 0x7FFF8000);
      if ( v20 != 0 && v20 <= 3 )
      {
        LOBYTE(v8) = v20 != 0;
        __asan_report_store4(&this->my_prev_scene_id_, v8, scene_id);
      }
      this->my_prev_scene_id_ = scene_id;
      __for_range = proto::PlayerSceneCompBin::monster_seen_list(proto_comp);
      __for_begin = google::protobuf::RepeatedField<unsigned int>::begin(__for_range);
      __for_end = google::protobuf::RepeatedField<unsigned int>::end(__for_range);
      while ( __for_begin != __for_end )
      {
        if ( *(_BYTE *)(((unsigned __int64)__for_begin >> 3) + 0x7FFF8000) != 0
          && (char)(((unsigned __int8)__for_begin & 7) + 3) >= *(_BYTE *)(((unsigned __int64)__for_begin >> 3)
                                                                        + 0x7FFF8000) )
        {
          __asan_report_load4(__for_begin);
        }
        *(_DWORD *)(v2 + 48) = *__for_begin;
        std::set<unsigned int>::insert(&this->monster_seen_set_, (const std::set<unsigned int>::value_type *)(v2 + 48));
        ++__for_begin;
      }
      __for_range_0 = proto::PlayerSceneCompBin::mark_point_list(proto_comp);
      __for_begin_0.it_ = google::protobuf::RepeatedPtrField<proto::MapMarkPointBin>::begin(__for_range_0).it_;
      __for_end_1.it_ = google::protobuf::RepeatedPtrField<proto::MapMarkPointBin>::end(__for_range_0).it_;
      while ( google::protobuf::internal::RepeatedPtrIterator<proto::MapMarkPointBin const>::operator!=(
                &__for_begin_0,
                (const google::protobuf::internal::RepeatedPtrIterator<const proto::MapMarkPointBin>::iterator *)&__for_end_1) )
      {
        mark = google::protobuf::internal::RepeatedPtrIterator<proto::MapMarkPointBin const>::operator*(&__for_begin_0);
        proto::MapMarkPoint::MapMarkPoint((proto::MapMarkPoint *const)(v2 + 64));
        PlayerSceneComp::copyMapMarkFromMapMarkBin(this, (proto::MapMarkPoint *)(v2 + 64), mark);
        *(_DWORD *)(v2 + 48) = proto::MapMarkPoint::scene_id((const proto::MapMarkPoint *const)(v2 + 64));
        v21 = std::unordered_map<unsigned int,std::unordered_set<proto::MapMarkPoint>>::operator[](
                &this->mark_point_set_map_,
                (std::unordered_map<unsigned int,std::unordered_set<proto::MapMarkPoint>>::key_type *)(v2 + 48));
        std::unordered_set<proto::MapMarkPoint>::emplace<proto::MapMarkPoint&>(
          v21,
          (proto::MapMarkPoint *)(v2 + 64),
          (proto::MapMarkPoint *)v21);
        proto::MapMarkPoint::~MapMarkPoint((proto::MapMarkPoint *const)(v2 + 64));
        google::protobuf::internal::RepeatedPtrIterator<proto::MapMarkPointBin const>::operator++(&__for_begin_0);
      }
      __for_range_1 = proto::PlayerSceneCompBin::world_product_map(proto_comp);
      google::protobuf::Map<unsigned int,proto::SceneProductBin>::begin(&__for_begin_1, __for_range_1);
      google::protobuf::Map<unsigned int,proto::SceneProductBin>::end(
        (google::protobuf::Map<unsigned int,proto::SceneProductBin>::const_iterator *)&__for_end_0,
        __for_range_1);
      while ( google::protobuf::operator!=(
                &__for_begin_1,
                (const google::protobuf::Map<unsigned int,proto::SceneProductBin>::const_iterator *)&__for_end_0) )
      {
        p_scene_id = (const unsigned int *)google::protobuf::Map<unsigned int,proto::SceneProductBin>::const_iterator::operator*(&__for_begin_1);
        v22 = (const proto::SceneProductBin *)(p_scene_id + 2);
        v23 = std::unordered_map<unsigned int,proto::SceneProductBin>::operator[](&this->world_product_map_, p_scene_id);
        proto::SceneProductBin::operator=(v23, v22);
        google::protobuf::Map<unsigned int,proto::SceneProductBin>::const_iterator::operator++(&__for_begin_1);
      }
      __for_range_2 = proto::PlayerSceneCompBin::dungeon_product_map(proto_comp);
      google::protobuf::Map<unsigned int,proto::DungeonProductBin>::begin(&__for_begin_2, __for_range_2);
      google::protobuf::Map<unsigned int,proto::DungeonProductBin>::end(&__for_end_2, __for_range_2);
      while ( 1 )
      {
        p_for_end_2 = &__for_end_2;
        if ( !google::protobuf::operator!=(&__for_begin_2, &__for_end_2) )
          break;
        p_dungeon_id = (const unsigned int *)google::protobuf::Map<unsigned int,proto::DungeonProductBin>::const_iterator::operator*(&__for_begin_2);
        scene_product_map_bin = proto::DungeonProductBin::scene_product_map((const proto::DungeonProductBin *const)(p_dungeon_id + 2));
        scene_product_map = std::unordered_map<unsigned int,std::unordered_map<unsigned int,proto::SceneProductBin>>::operator[](
                              &this->dungeon_product_map_,
                              p_dungeon_id);
        __for_range_3 = scene_product_map_bin;
        google::protobuf::Map<unsigned int,proto::SceneProductBin>::begin(&__for_begin_1, scene_product_map_bin);
        google::protobuf::Map<unsigned int,proto::SceneProductBin>::end(
          (google::protobuf::Map<unsigned int,proto::SceneProductBin>::const_iterator *)&__for_end_0,
          __for_range_3);
        while ( google::protobuf::operator!=(
                  &__for_begin_1,
                  (const google::protobuf::Map<unsigned int,proto::SceneProductBin>::const_iterator *)&__for_end_0) )
        {
          p_scene_id_0 = (const unsigned int *)google::protobuf::Map<unsigned int,proto::SceneProductBin>::const_iterator::operator*(&__for_begin_1);
          v25 = (const proto::SceneProductBin *)(p_scene_id_0 + 2);
          v26 = std::unordered_map<unsigned int,proto::SceneProductBin>::operator[](scene_product_map, p_scene_id_0);
          proto::SceneProductBin::operator=(v26, v25);
          google::protobuf::Map<unsigned int,proto::SceneProductBin>::const_iterator::operator++(&__for_begin_1);
        }
        google::protobuf::Map<unsigned int,proto::DungeonProductBin>::const_iterator::operator++(&__for_begin_2);
      }
      v27 = proto::PlayerSceneCompBin::trivial_entity_drop_num(proto_comp);
      v28 = *(_BYTE *)(((unsigned __int64)&this->trivial_entity_drop_num_ >> 3) + 0x7FFF8000);
      if ( v28 != 0 && v28 <= 3 )
      {
        LOBYTE(p_for_end_2) = v28 != 0;
        __asan_report_store4(&this->trivial_entity_drop_num_, p_for_end_2, v27);
      }
      this->trivial_entity_drop_num_ = v27;
      v29 = proto::PlayerSceneCompBin::trivial_entity_drop_time(proto_comp);
      v30 = *(_BYTE *)(((unsigned __int64)&this->trivial_entity_drop_time_ >> 3) + 0x7FFF8000);
      LOBYTE(p_for_end_2) = v30 != 0;
      v31 = v30 != 0 && (char)((((_BYTE)this + 84) & 7) + 3) >= v30;
      if ( v31 )
        __asan_report_store4(&this->trivial_entity_drop_time_, p_for_end_2, v31);
      this->trivial_entity_drop_time_ = v29;
      std::unordered_map<unsigned int,proto::SceneBossChestBin>::clear(&this->scene_boss_chest_map_);
      __for_range_4 = proto::PlayerSceneCompBin::scene_boss_chest_map(proto_comp);
      google::protobuf::Map<unsigned int,proto::SceneBossChestBin>::begin(
        (google::protobuf::Map<unsigned int,proto::SceneBossChestBin>::const_iterator *)&__for_begin_1,
        __for_range_4);
      google::protobuf::Map<unsigned int,proto::SceneBossChestBin>::end(
        (google::protobuf::Map<unsigned int,proto::SceneBossChestBin>::const_iterator *)&__for_end_0,
        __for_range_4);
      while ( google::protobuf::operator!=(
                (const google::protobuf::Map<unsigned int,proto::SceneBossChestBin>::const_iterator *)&__for_begin_1,
                (const google::protobuf::Map<unsigned int,proto::SceneBossChestBin>::const_iterator *)&__for_end_0) )
      {
        p_scene_id_1 = (const unsigned int *)google::protobuf::Map<unsigned int,proto::SceneBossChestBin>::const_iterator::operator*((const google::protobuf::Map<unsigned int,proto::SceneBossChestBin>::const_iterator *const)&__for_begin_1);
        v32 = (const proto::SceneBossChestBin *)(p_scene_id_1 + 2);
        v33 = std::unordered_map<unsigned int,proto::SceneBossChestBin>::operator[](
                &this->scene_boss_chest_map_,
                p_scene_id_1);
        proto::SceneBossChestBin::operator=(v33, v32);
        google::protobuf::Map<unsigned int,proto::SceneBossChestBin>::const_iterator::operator++((google::protobuf::Map<unsigned int,proto::SceneBossChestBin>::const_iterator *const)&__for_begin_1);
      }
      std::unordered_map<unsigned int,proto::SubfieldDropBin>::clear(&this->subfield_drop_map_);
      __for_range_5 = proto::PlayerSceneCompBin::subfield_drop_map(proto_comp);
      google::protobuf::Map<unsigned int,proto::SubfieldDropBin>::begin(
        (google::protobuf::Map<unsigned int,proto::SubfieldDropBin>::const_iterator *)&__for_begin_1,
        __for_range_5);
      google::protobuf::Map<unsigned int,proto::SubfieldDropBin>::end(
        (google::protobuf::Map<unsigned int,proto::SubfieldDropBin>::const_iterator *)&__for_end_0,
        __for_range_5);
      while ( 1 )
      {
        p_for_end_0 = &__for_end_0;
        if ( !google::protobuf::operator!=(
                (const google::protobuf::Map<unsigned int,proto::SubfieldDropBin>::const_iterator *)&__for_begin_1,
                (const google::protobuf::Map<unsigned int,proto::SubfieldDropBin>::const_iterator *)&__for_end_0) )
          break;
        p_entity_type = (const unsigned int *)google::protobuf::Map<unsigned int,proto::SubfieldDropBin>::const_iterator::operator*((const google::protobuf::Map<unsigned int,proto::SubfieldDropBin>::const_iterator *const)&__for_begin_1);
        v35 = (const proto::SubfieldDropBin *)(p_entity_type + 2);
        v36 = std::unordered_map<unsigned int,proto::SubfieldDropBin>::operator[](
                &this->subfield_drop_map_,
                p_entity_type);
        proto::SubfieldDropBin::operator=(v36, v35);
        google::protobuf::Map<unsigned int,proto::SubfieldDropBin>::const_iterator::operator++((google::protobuf::Map<unsigned int,proto::SubfieldDropBin>::const_iterator *const)&__for_begin_1);
      }
      v37 = proto::PlayerSceneCompBin::subfield_drop_time(proto_comp);
      v38 = *(_BYTE *)(((unsigned __int64)&this->subfield_drop_time_ >> 3) + 0x7FFF8000);
      if ( v38 != 0 && v38 <= 3 )
      {
        LOBYTE(p_for_end_0) = v38 != 0;
        __asan_report_store4(&this->subfield_drop_time_, p_for_end_0, v37);
      }
      this->subfield_drop_time_ = v37;
      __for_range_6 = proto::PlayerSceneCompBin::chest_open_num_map(proto_comp);
      google::protobuf::Map<unsigned int,unsigned int>::begin(
        (google::protobuf::Map<unsigned int,unsigned int>::const_iterator *)&__for_begin_1,
        __for_range_6);
      google::protobuf::Map<unsigned int,unsigned int>::end(&__for_end_0, __for_range_6);
      while ( google::protobuf::operator!=(
                (const google::protobuf::Map<unsigned int,unsigned int>::const_iterator *)&__for_begin_1,
                &__for_end_0) )
      {
        v39 = google::protobuf::Map<unsigned int,unsigned int>::const_iterator::operator*((const google::protobuf::Map<unsigned int,unsigned int>::const_iterator *const)&__for_begin_1);
        google::protobuf::MapPair<unsigned int,unsigned int>::MapPair(
          (google::protobuf::MapPair<unsigned int,unsigned int> *const)&__for_end_1,
          v39);
        it_high = HIDWORD(__for_end_1.it_);
        p_for_end_1 = &__for_end_1;
        v42 = std::unordered_map<unsigned int,unsigned int>::operator[](
                &this->chest_open_num_map_,
                (const std::unordered_map<unsigned int,unsigned int>::key_type *)&__for_end_1);
        v43 = v42;
        v44 = *(_BYTE *)(((unsigned __int64)v42 >> 3) + 0x7FFF8000);
        if ( v44 != 0 && (char)(((unsigned __int8)v42 & 7) + 3) >= v44 )
        {
          LOBYTE(p_for_end_1) = v44 != 0;
          __asan_report_store4(v42, p_for_end_1, (_BYTE)v42);
        }
        *v43 = it_high;
        google::protobuf::MapPair<unsigned int,unsigned int>::~MapPair((google::protobuf::MapPair<unsigned int,unsigned int> *const)&__for_end_1);
        google::protobuf::Map<unsigned int,unsigned int>::const_iterator::operator++((google::protobuf::Map<unsigned int,unsigned int>::const_iterator *const)&__for_begin_1);
      }
      __for_range_7 = proto::PlayerSceneCompBin::gadget_interact_num_map(proto_comp);
      google::protobuf::Map<unsigned int,unsigned int>::begin(
        (google::protobuf::Map<unsigned int,unsigned int>::const_iterator *)&__for_begin_1,
        __for_range_7);
      google::protobuf::Map<unsigned int,unsigned int>::end(&__for_end_0, __for_range_7);
      while ( 1 )
      {
        v45 = &__for_end_0;
        if ( !google::protobuf::operator!=(
                (const google::protobuf::Map<unsigned int,unsigned int>::const_iterator *)&__for_begin_1,
                &__for_end_0) )
          break;
        v46 = google::protobuf::Map<unsigned int,unsigned int>::const_iterator::operator*((const google::protobuf::Map<unsigned int,unsigned int>::const_iterator *const)&__for_begin_1);
        google::protobuf::MapPair<unsigned int,unsigned int>::MapPair(
          (google::protobuf::MapPair<unsigned int,unsigned int> *const)&__for_end_1,
          v46);
        v47 = HIDWORD(__for_end_1.it_);
        v48 = &__for_end_1;
        v49 = std::unordered_map<unsigned int,unsigned int>::operator[](
                &this->gadget_interact_num_map_,
                (const std::unordered_map<unsigned int,unsigned int>::key_type *)&__for_end_1);
        v50 = v49;
        v51 = *(_BYTE *)(((unsigned __int64)v49 >> 3) + 0x7FFF8000);
        if ( v51 != 0 && (char)(((unsigned __int8)v49 & 7) + 3) >= v51 )
        {
          LOBYTE(v48) = v51 != 0;
          __asan_report_store4(v49, v48, (_BYTE)v49);
        }
        *v50 = v47;
        google::protobuf::MapPair<unsigned int,unsigned int>::~MapPair((google::protobuf::MapPair<unsigned int,unsigned int> *const)&__for_end_1);
        google::protobuf::Map<unsigned int,unsigned int>::const_iterator::operator++((google::protobuf::Map<unsigned int,unsigned int>::const_iterator *const)&__for_begin_1);
      }
      v52 = proto::PlayerSceneCompBin::total_boss_chest_take_num(proto_comp);
      v53 = *(_BYTE *)(((unsigned __int64)&this->total_boss_chest_take_num_ >> 3) + 0x7FFF8000);
      if ( v53 != 0 && v53 <= 3 )
      {
        LOBYTE(v45) = v53 != 0;
        __asan_report_store4(&this->total_boss_chest_take_num_, v45, v52);
      }
      this->total_boss_chest_take_num_ = v52;
      __for_range_8 = proto::PlayerSceneCompBin::daily_gadget_drop_category_count_map[abi:cxx11](proto_comp);
      google::protobuf::Map<std::string,unsigned int>::begin(
        (google::protobuf::Map<std::string,unsigned int>::const_iterator *)&__for_begin_1,
        __for_range_8);
      google::protobuf::Map<std::string,unsigned int>::end(
        (google::protobuf::Map<std::string,unsigned int>::const_iterator *)&__for_end_0,
        __for_range_8);
      while ( 1 )
      {
        v54 = &__for_end_0;
        if ( !google::protobuf::operator!=(
                (const google::protobuf::Map<std::string,unsigned int>::const_iterator *)&__for_begin_1,
                (const google::protobuf::Map<std::string,unsigned int>::const_iterator *)&__for_end_0) )
          break;
        p_drop_category = (const std::string *)google::protobuf::Map<std::string,unsigned int>::const_iterator::operator*((const google::protobuf::Map<std::string,unsigned int>::const_iterator *const)&__for_begin_1);
        if ( *(_BYTE *)(((unsigned __int64)&p_drop_category[1] >> 3) + 0x7FFF8000) != 0
          && *(_BYTE *)(((unsigned __int64)&p_drop_category[1] >> 3) + 0x7FFF8000) <= 3 )
        {
          __asan_report_load4(&p_drop_category[1]);
        }
        M_p = (int)p_drop_category[1]._M_dataplus._M_p;
        v56 = p_drop_category;
        v57 = std::unordered_map<std::string,unsigned int>::operator[](
                &this->daily_gadget_drop_category_count_map_,
                p_drop_category);
        v58 = v57;
        v59 = *(_BYTE *)(((unsigned __int64)v57 >> 3) + 0x7FFF8000);
        if ( v59 != 0 && (char)(((unsigned __int8)v57 & 7) + 3) >= v59 )
        {
          LOBYTE(v56) = v59 != 0;
          __asan_report_store4(v57, v56, (_BYTE)v57);
        }
        *v58 = M_p;
        google::protobuf::Map<std::string,unsigned int>::const_iterator::operator++((google::protobuf::Map<std::string,unsigned int>::const_iterator *const)&__for_begin_1);
      }
      refresh_daily_gadget_drop_category_count_map_time = proto::PlayerSceneCompBin::last_refresh_daily_gadget_drop_category_count_map_time(proto_comp);
      v61 = *(_BYTE *)(((unsigned __int64)&this->last_refresh_daily_gadget_drop_category_count_map_time_ >> 3)
                     + 0x7FFF8000);
      if ( v61 != 0 && v61 <= 3 )
      {
        LOBYTE(v54) = v61 != 0;
        __asan_report_store4(
          &this->last_refresh_daily_gadget_drop_category_count_map_time_,
          v54,
          refresh_daily_gadget_drop_category_count_map_time);
      }
      this->last_refresh_daily_gadget_drop_category_count_map_time_ = refresh_daily_gadget_drop_category_count_map_time;
      __for_range_9 = proto::PlayerSceneCompBin::monster_killed_num_list(proto_comp);
      __for_begin_0.it_ = google::protobuf::RepeatedPtrField<proto::MonsterBeKilledNumBin>::begin(__for_range_9).it_;
      __for_end_1.it_ = google::protobuf::RepeatedPtrField<proto::MonsterBeKilledNumBin>::end(__for_range_9).it_;
      while ( 1 )
      {
        v62 = &__for_end_1;
        if ( !google::protobuf::internal::RepeatedPtrIterator<proto::MonsterBeKilledNumBin const>::operator!=(
                (const google::protobuf::internal::RepeatedPtrIterator<const proto::MonsterBeKilledNumBin> *const)&__for_begin_0,
                &__for_end_1) )
          break;
        killed_num_bin = google::protobuf::internal::RepeatedPtrIterator<proto::MonsterBeKilledNumBin const>::operator*((const google::protobuf::internal::RepeatedPtrIterator<const proto::MonsterBeKilledNumBin> *const)&__for_begin_0);
        v63 = proto::MonsterBeKilledNumBin::be_killed_num(killed_num_bin);
        *(_DWORD *)(v2 + 48) = proto::MonsterBeKilledNumBin::monster_id(killed_num_bin);
        v64 = (char *)(v2 + 48);
        v65 = std::map<unsigned int,unsigned int>::operator[](
                &this->monster_killed_num_map_,
                (std::map<unsigned int,unsigned int>::key_type *)(v2 + 48));
        v66 = v65;
        v67 = *(_BYTE *)(((unsigned __int64)v65 >> 3) + 0x7FFF8000);
        if ( v67 != 0 && (char)(((unsigned __int8)v65 & 7) + 3) >= v67 )
        {
          LOBYTE(v64) = v67 != 0;
          __asan_report_store4(v65, v64, (_BYTE)v65);
        }
        *v66 = v63;
        google::protobuf::internal::RepeatedPtrIterator<proto::MonsterBeKilledNumBin const>::operator++((google::protobuf::internal::RepeatedPtrIterator<const proto::MonsterBeKilledNumBin> *const)&__for_begin_0);
      }
      __for_range_10 = proto::PlayerSceneCompBin::obtained_wood_type_list(proto_comp);
      __for_begin_3 = google::protobuf::RepeatedField<unsigned int>::begin(__for_range_10);
      __for_end_3 = google::protobuf::RepeatedField<unsigned int>::end(__for_range_10);
      while ( __for_begin_3 != __for_end_3 )
      {
        wood_type = __for_begin_3;
        v62 = (void *)__for_begin_3;
        std::set<unsigned int>::insert(&this->obtained_wood_type_set_, __for_begin_3++);
      }
      v68 = proto::PlayerSceneCompBin::weekly_boss_resin_discount_num(proto_comp);
      v69 = *(_BYTE *)(((unsigned __int64)&this->weekly_boss_resin_discount_num_ >> 3) + 0x7FFF8000);
      if ( v69 != 0 && v69 <= 3 )
      {
        LOBYTE(v62) = v69 != 0;
        __asan_report_store4(&this->weekly_boss_resin_discount_num_, v62, v68);
      }
      this->weekly_boss_resin_discount_num_ = v68;
      weekly_boss_resin_discount_time = proto::PlayerSceneCompBin::last_weekly_boss_resin_discount_time(proto_comp);
      v71 = *(_BYTE *)(((unsigned __int64)&this->last_weekly_boss_resin_discount_time_ >> 3) + 0x7FFF8000);
      LOBYTE(v62) = v71 != 0;
      v72 = v71 != 0 && (char)((((_BYTE)this - 4) & 7) + 3) >= v71;
      if ( v72 )
        __asan_report_store4(&this->last_weekly_boss_resin_discount_time_, v62, v72);
      this->last_weekly_boss_resin_discount_time_ = weekly_boss_resin_discount_time;
      __for_range_11 = proto::PlayerSceneCompBin::gadget_chain_level_map(proto_comp);
      google::protobuf::Map<unsigned int,unsigned int>::begin(
        (google::protobuf::Map<unsigned int,unsigned int>::const_iterator *)&__for_begin_1,
        __for_range_11);
      google::protobuf::Map<unsigned int,unsigned int>::end(&__for_end_0, __for_range_11);
      while ( google::protobuf::operator!=(
                (const google::protobuf::Map<unsigned int,unsigned int>::const_iterator *)&__for_begin_1,
                &__for_end_0) )
      {
        p_chain_id = (const unsigned int *)google::protobuf::Map<unsigned int,unsigned int>::const_iterator::operator*((const google::protobuf::Map<unsigned int,unsigned int>::const_iterator *const)&__for_begin_1);
        v73 = (unsigned __int64)(p_chain_id + 1);
        if ( *(_BYTE *)((v73 >> 3) + 0x7FFF8000) != 0 && (char)((v73 & 7) + 3) >= *(_BYTE *)((v73 >> 3) + 0x7FFF8000) )
          __asan_report_load4(v73);
        v74 = p_chain_id[1];
        v75 = p_chain_id;
        v76 = std::map<unsigned int,unsigned int>::operator[](&this->gadget_chain_level_map_, p_chain_id);
        v77 = v76;
        v78 = *(_BYTE *)(((unsigned __int64)v76 >> 3) + 0x7FFF8000);
        if ( v78 != 0 && (char)(((unsigned __int8)v76 & 7) + 3) >= v78 )
        {
          LOBYTE(v75) = v78 != 0;
          __asan_report_store4(v76, v75, (_BYTE)v76);
        }
        *v77 = v74;
        google::protobuf::Map<unsigned int,unsigned int>::const_iterator::operator++((google::protobuf::Map<unsigned int,unsigned int>::const_iterator *const)&__for_begin_1);
      }
      __for_range_12 = proto::PlayerSceneCompBin::map_area_info_list(proto_comp);
      __for_begin_0.it_ = google::protobuf::RepeatedPtrField<proto::MapAreaInfoBin>::begin(__for_range_12).it_;
      __for_end_1.it_ = google::protobuf::RepeatedPtrField<proto::MapAreaInfoBin>::end(__for_range_12).it_;
      while ( google::protobuf::internal::RepeatedPtrIterator<proto::MapAreaInfoBin const>::operator!=(
                (const google::protobuf::internal::RepeatedPtrIterator<const proto::MapAreaInfoBin> *const)&__for_begin_0,
                (const google::protobuf::internal::RepeatedPtrIterator<const proto::MapAreaInfoBin>::iterator *)&__for_end_1) )
      {
        map_area_info_bin = google::protobuf::internal::RepeatedPtrIterator<proto::MapAreaInfoBin const>::operator*((const google::protobuf::internal::RepeatedPtrIterator<const proto::MapAreaInfoBin> *const)&__for_begin_0);
        is_open = proto::MapAreaInfoBin::is_open(map_area_info_bin);
        *(_DWORD *)(v2 + 48) = proto::MapAreaInfoBin::map_area_id(map_area_info_bin);
        v80 = (char *)(v2 + 48);
        v81 = std::unordered_map<unsigned int,bool>::operator[](
                &this->map_area_info_map_,
                (std::unordered_map<unsigned int,bool>::key_type *)(v2 + 48));
        v82 = v81;
        v83 = *(_BYTE *)(((unsigned __int64)v81 >> 3) + 0x7FFF8000);
        if ( v83 != 0 && ((unsigned __int8)v81 & 7) >= v83 )
        {
          LOBYTE(v80) = v83 != 0;
          __asan_report_store1(v81, v80, v81);
        }
        *v82 = is_open;
        google::protobuf::internal::RepeatedPtrIterator<proto::MapAreaInfoBin const>::operator++((google::protobuf::internal::RepeatedPtrIterator<const proto::MapAreaInfoBin> *const)&__for_begin_0);
      }
      __for_range_13 = proto::PlayerSceneCompBin::monster_captured_num_list(proto_comp);
      __for_begin_0.it_ = google::protobuf::RepeatedPtrField<proto::MonsterBeCapturedNumBin>::begin(__for_range_13).it_;
      __for_end_1.it_ = google::protobuf::RepeatedPtrField<proto::MonsterBeCapturedNumBin>::end(__for_range_13).it_;
      while ( google::protobuf::internal::RepeatedPtrIterator<proto::MonsterBeCapturedNumBin const>::operator!=(
                (const google::protobuf::internal::RepeatedPtrIterator<const proto::MonsterBeCapturedNumBin> *const)&__for_begin_0,
                (const google::protobuf::internal::RepeatedPtrIterator<const proto::MonsterBeCapturedNumBin>::iterator *)&__for_end_1) )
      {
        captured_num_bin = google::protobuf::internal::RepeatedPtrIterator<proto::MonsterBeCapturedNumBin const>::operator*((const google::protobuf::internal::RepeatedPtrIterator<const proto::MonsterBeCapturedNumBin> *const)&__for_begin_0);
        v84 = proto::MonsterBeCapturedNumBin::be_captured_num(captured_num_bin);
        *(_DWORD *)(v2 + 48) = proto::MonsterBeCapturedNumBin::monster_id(captured_num_bin);
        v85 = (char *)(v2 + 48);
        v86 = std::map<unsigned int,unsigned int>::operator[](
                &this->monster_captured_num_map_,
                (std::map<unsigned int,unsigned int>::key_type *)(v2 + 48));
        v87 = v86;
        v88 = *(_BYTE *)(((unsigned __int64)v86 >> 3) + 0x7FFF8000);
        if ( v88 != 0 && (char)(((unsigned __int8)v86 & 7) + 3) >= v88 )
        {
          LOBYTE(v85) = v88 != 0;
          __asan_report_store4(v86, v85, (_BYTE)v86);
        }
        *v87 = v84;
        google::protobuf::internal::RepeatedPtrIterator<proto::MonsterBeCapturedNumBin const>::operator++((google::protobuf::internal::RepeatedPtrIterator<const proto::MonsterBeCapturedNumBin> *const)&__for_begin_0);
      }
      v89 = proto::PlayerSceneCompBin::level_tag_bin(proto_comp);
      LevelTagInfo::fromBin(&this->level_tag_info_, v89);
      std::unordered_map<unsigned int,proto::SceneBin>::clear(&this->persistent_dungeon_scene_bin_map_);
      __for_range_14 = proto::PlayerSceneCompBin::persistent_dungeon_scene_bin_list(proto_comp);
      __for_begin_0.it_ = google::protobuf::RepeatedPtrField<proto::PersistentDungeonSceneBin>::begin(__for_range_14).it_;
      __for_end_1.it_ = google::protobuf::RepeatedPtrField<proto::PersistentDungeonSceneBin>::end(__for_range_14).it_;
      while ( 1 )
      {
        v90 = &__for_end_1;
        if ( !google::protobuf::internal::RepeatedPtrIterator<proto::PersistentDungeonSceneBin const>::operator!=(
                (const google::protobuf::internal::RepeatedPtrIterator<const proto::PersistentDungeonSceneBin> *const)&__for_begin_0,
                (const google::protobuf::internal::RepeatedPtrIterator<const proto::PersistentDungeonSceneBin>::iterator *)&__for_end_1) )
          break;
        persistent_dungeon_scene_bin = google::protobuf::internal::RepeatedPtrIterator<proto::PersistentDungeonSceneBin const>::operator*((const google::protobuf::internal::RepeatedPtrIterator<const proto::PersistentDungeonSceneBin> *const)&__for_begin_0);
        v91 = proto::PersistentDungeonSceneBin::dungeon_scene_bin(persistent_dungeon_scene_bin);
        *(_DWORD *)(v2 + 48) = proto::PersistentDungeonSceneBin::scene_id(persistent_dungeon_scene_bin);
        v94 = std::unordered_map<unsigned int,proto::SceneBin>::emplace<unsigned int,proto::SceneBin const&>(
                &this->persistent_dungeon_scene_bin_map_,
                (unsigned int *)(v2 + 48),
                v91,
                v92,
                v93);
        if ( !v94.second )
        {
          common::milog::MiLogStream::create(
            &v144,
            &common::milog::MiLogDefault::default_log_obj_,
            4u,
            "./src/scene/player_scene_comp.cpp",
            "fromBin",
            234);
          v95 = common::milog::MiLogStream::operator<<<char [46],(char *[46])0>(
                  &v144,
                  (const char (*)[46])"persistent_dungeon_scene_bin exist, scene_id:");
          val = proto::PersistentDungeonSceneBin::scene_id(persistent_dungeon_scene_bin);
          v96 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v95, &val);
          v97 = common::milog::MiLogStream::operator<<<char [8],(char *[8])0>(v96, (const char (*)[8])", uid: ");
          if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
            __asan_report_load8();
          *(_DWORD *)(v2 + 48) = Player::getUid(this->player_);
          common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v97, (const unsigned int *)(v2 + 48));
          common::milog::MiLogStream::~MiLogStream(&v144);
          result = -1;
          goto LABEL_109;
        }
        google::protobuf::internal::RepeatedPtrIterator<proto::PersistentDungeonSceneBin const>::operator++((google::protobuf::internal::RepeatedPtrIterator<const proto::PersistentDungeonSceneBin> *const)&__for_begin_0);
      }
      area_play_type = proto::PlayerSceneCompBin::last_area_play_type(proto_comp);
      v99 = *(_BYTE *)(((unsigned __int64)&this->last_area_play_type_ >> 3) + 0x7FFF8000);
      if ( v99 != 0 && v99 <= 3 )
      {
        LOBYTE(v90) = v99 != 0;
        __asan_report_store4(&this->last_area_play_type_, v90, area_play_type);
      }
      this->last_area_play_type_ = area_play_type;
      deshret_obelisk_bin = proto::PlayerSceneCompBin::deshret_obelisk_bin(proto_comp);
      *(_DWORD *)(v2 + 48) = proto::DeshretObeliskBin::config_id(deshret_obelisk_bin);
      val = proto::DeshretObeliskBin::group_id(deshret_obelisk_bin);
      std::pair<unsigned int,unsigned int>::pair<unsigned int,unsigned int,true>(
        (std::pair<unsigned int,unsigned int> *const)&__for_end_1,
        &val,
        (unsigned int *)(v2 + 48));
      std::pair<unsigned int,unsigned int>::operator=(
        &this->cur_deshret_obelisk_,
        (std::conditional<true,std::pair<unsigned int,unsigned int>&&,std::__nonesuch_no_braces&&>::type)&__for_end_1);
      result = 0;
    }
  }
LABEL_109:
  if ( v145 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF800C) = 0LL;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8010) = -168430091;
  }
  return result;
};

// Line 248: range 0000000013E3BB5E-0000000013E3DD79
int32_t __cdecl PlayerSceneComp::toBin(PlayerSceneComp *const this, proto::PlayerDataBin *player_data_bin)
{
  int32_t v2; // r15d
  unsigned __int64 v3; // r13
  __int64 v4; // rax
  _DWORD *v5; // rbx
  std::__shared_ptr_access<PlayerWorld,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v6; // rax
  int v7; // eax
  unsigned int *v8; // rax
  unsigned int *v9; // rdx
  proto::MapMarkPointBin *v10; // rcx
  proto::SceneProductBin *v11; // rax
  proto::SceneProductBin *v12; // rax
  proto::SceneBossChestBin *v13; // rax
  proto::SubfieldDropBin *v14; // rax
  std::__detail::_Node_iterator<std::pair<unsigned int const,unsigned int>,false,false>::reference v15; // rax
  std::pair<unsigned int const,unsigned int> *v16; // rdx
  std::tuple_element<1,std::pair<unsigned int const,unsigned int> >::type *v17; // rax
  std::tuple_element<1,std::pair<unsigned int const,unsigned int> >::type v18; // r14d
  std::tuple_element<0,std::pair<unsigned int const,unsigned int> >::type *v19; // rsi
  unsigned int *v20; // rax
  std::tuple_element<1,std::pair<unsigned int const,unsigned int> >::type *v21; // rdx
  char v22; // cl
  std::__detail::_Node_iterator<std::pair<unsigned int const,unsigned int>,false,false>::reference v23; // rax
  std::pair<unsigned int const,unsigned int> *v24; // rdx
  std::tuple_element<1,std::pair<unsigned int const,unsigned int> >::type *v25; // rax
  std::tuple_element<1,std::pair<unsigned int const,unsigned int> >::type v26; // r14d
  std::tuple_element<0,std::pair<unsigned int const,unsigned int> >::type *v27; // rsi
  unsigned int *v28; // rax
  std::tuple_element<1,std::pair<unsigned int const,unsigned int> >::type *v29; // rdx
  char v30; // cl
  std::tuple_element<1,const std::pair<const std::string,unsigned int> >::type *v31; // rax
  std::tuple_element<1,const std::pair<const std::string,unsigned int> >::type v32; // r14d
  std::tuple_element<0,const std::pair<const std::string,unsigned int> >::type *v33; // rsi
  unsigned int *v34; // rax
  std::tuple_element<1,const std::pair<const std::string,unsigned int> >::type *v35; // rdx
  char v36; // cl
  const unsigned int *v37; // rax
  std::tuple_element<1,const std::pair<unsigned int const,unsigned int> >::type *v38; // rax
  std::tuple_element<1,const std::pair<unsigned int const,unsigned int> >::type v39; // r14d
  std::tuple_element<0,const std::pair<unsigned int const,unsigned int> >::type *v40; // rsi
  unsigned int *v41; // rax
  std::tuple_element<1,const std::pair<unsigned int const,unsigned int> >::type *v42; // rdx
  char v43; // cl
  std::__detail::_Node_iterator<std::pair<unsigned int const,bool>,false,false>::reference v44; // rax
  std::pair<unsigned int const,unsigned int> *v45; // rdx
  std::_Rb_tree_iterator<std::pair<unsigned int const,unsigned int> >::reference v46; // rax
  std::pair<unsigned int const,unsigned int> *v47; // rdx
  proto::LevelTagBin *v48; // rax
  int v49; // r14d
  unsigned __int64 v50; // rax
  unsigned __int64 v51; // rdx
  unsigned __int64 v52; // rax
  unsigned __int64 v53; // rdx
  common::milog::MiLogStream *v54; // r14
  common::milog::MiLogStream *v55; // rax
  common::milog::MiLogStream *v56; // r14
  unsigned __int64 v57; // rax
  void (__fastcall **v58)(common::milog::MiLogStream *, unsigned __int64); // rdx
  int v59; // r14d
  proto::SceneBin *v60; // r14
  proto::SceneBin *v61; // rax
  proto::SceneBin *v62; // rax
  int32_t result; // eax
  unsigned int val; // [rsp+28h] [rbp-4C8h] BYREF
  unsigned int monster_id; // [rsp+2Ch] [rbp-4C4h]
  std::unordered_map<unsigned int,std::unordered_set<proto::MapMarkPoint>>::iterator __for_begin_0; // [rsp+30h] [rbp-4C0h] BYREF
  std::unordered_map<unsigned int,unsigned int>::iterator __for_begin; // [rsp+38h] [rbp-4B8h] BYREF
  std::unordered_map<unsigned int,std::weak_ptr<DungeonScene>>::iterator __for_begin_1; // [rsp+40h] [rbp-4B0h] BYREF
  proto::PlayerSceneCompBin *proto_comp; // [rsp+48h] [rbp-4A8h]
  proto::WorldBin *world_bin; // [rsp+50h] [rbp-4A0h]
  std::set<unsigned int> *__for_range; // [rsp+58h] [rbp-498h]
  std::unordered_map<unsigned int,std::unordered_set<proto::MapMarkPoint>> *__for_range_0; // [rsp+60h] [rbp-490h]
  google::protobuf::Map<unsigned int,proto::SceneProductBin> *world_product_map_bin; // [rsp+68h] [rbp-488h]
  std::unordered_map<unsigned int,proto::SceneProductBin> *__for_range_2; // [rsp+70h] [rbp-480h]
  google::protobuf::Map<unsigned int,proto::DungeonProductBin> *dungeon_product_map_bin; // [rsp+78h] [rbp-478h]
  std::unordered_map<unsigned int,std::unordered_map<unsigned int,proto::SceneProductBin>> *__for_range_3; // [rsp+80h] [rbp-470h]
  google::protobuf::Map<unsigned int,proto::SceneBossChestBin> *scene_boss_chest_map_bin; // [rsp+88h] [rbp-468h]
  std::unordered_map<unsigned int,proto::SceneBossChestBin> *__for_range_5; // [rsp+90h] [rbp-460h]
  google::protobuf::Map<unsigned int,proto::SubfieldDropBin> *subfield_drop_map_bin; // [rsp+98h] [rbp-458h]
  std::unordered_map<unsigned int,proto::SubfieldDropBin> *__for_range_6; // [rsp+A0h] [rbp-450h]
  google::protobuf::Map<unsigned int,unsigned int> *chest_open_num_map_bin; // [rsp+A8h] [rbp-448h]
  std::unordered_map<unsigned int,unsigned int> *__for_range_7; // [rsp+B0h] [rbp-440h]
  google::protobuf::Map<unsigned int,unsigned int> *gadget_interact_num_map_bin; // [rsp+B8h] [rbp-438h]
  std::unordered_map<unsigned int,unsigned int> *__for_range_8; // [rsp+C0h] [rbp-430h]
  google::protobuf::Map<std::string,unsigned int> *daily_gadget_drop_category_count_map; // [rsp+C8h] [rbp-428h]
  std::unordered_map<std::string,unsigned int> *__for_range_9; // [rsp+D0h] [rbp-420h]
  std::map<unsigned int,unsigned int> *__for_range_10; // [rsp+D8h] [rbp-418h]
  std::set<unsigned int> *__for_range_11; // [rsp+E0h] [rbp-410h]
  google::protobuf::Map<unsigned int,unsigned int> *proto_chain_level_map; // [rsp+E8h] [rbp-408h]
  std::map<unsigned int,unsigned int> *__for_range_12; // [rsp+F0h] [rbp-400h]
  std::unordered_map<unsigned int,bool> *__for_range_13; // [rsp+F8h] [rbp-3F8h]
  std::map<unsigned int,unsigned int> *__for_range_14; // [rsp+100h] [rbp-3F0h]
  std::unordered_map<unsigned int,std::weak_ptr<DungeonScene>> *__for_range_15; // [rsp+108h] [rbp-3E8h]
  std::unordered_map<unsigned int,proto::SceneBin> *__for_range_16; // [rsp+110h] [rbp-3E0h]
  proto::DeshretObeliskBin *deshret_obelisk_bin; // [rsp+118h] [rbp-3D8h]
  const std::pair<unsigned int const,proto::SceneBin> *v96; // [rsp+120h] [rbp-3D0h]
  std::tuple_element<0,const std::pair<unsigned int const,proto::SceneBin> >::type *scene_id_3; // [rsp+128h] [rbp-3C8h]
  std::tuple_element<1,const std::pair<unsigned int const,proto::SceneBin> >::type *proto_dungeon_scene_bin; // [rsp+130h] [rbp-3C0h]
  proto::PersistentDungeonSceneBin *persistent_dungeon_scene_bin; // [rsp+138h] [rbp-3B8h]
  const std::pair<unsigned int const,std::weak_ptr<DungeonScene> > *v100; // [rsp+140h] [rbp-3B0h]
  std::tuple_element<0,const std::pair<unsigned int const,std::weak_ptr<DungeonScene> > >::type *scene_id_2; // [rsp+148h] [rbp-3A8h]
  std::tuple_element<1,const std::pair<unsigned int const,std::weak_ptr<DungeonScene> > >::type *dungeon_scene_wtr; // [rsp+150h] [rbp-3A0h]
  std::tuple_element<0,std::pair<unsigned int const,unsigned int> >::type *monster_id_1; // [rsp+158h] [rbp-398h]
  std::tuple_element<1,std::pair<unsigned int const,unsigned int> >::type *captured_num; // [rsp+160h] [rbp-390h]
  proto::MonsterBeCapturedNumBin *captured_num_bin; // [rsp+168h] [rbp-388h]
  std::tuple_element<0,std::pair<unsigned int const,bool> >::type *map_area_id; // [rsp+170h] [rbp-380h]
  std::tuple_element<1,std::pair<unsigned int const,bool> >::type *is_open; // [rsp+178h] [rbp-378h]
  proto::MapAreaInfoBin *map_area_info_bin; // [rsp+180h] [rbp-370h]
  const std::pair<unsigned int const,unsigned int> *v109; // [rsp+188h] [rbp-368h]
  std::tuple_element<0,const std::pair<unsigned int const,unsigned int> >::type *chain_id; // [rsp+190h] [rbp-360h]
  std::tuple_element<1,const std::pair<unsigned int const,unsigned int> >::type *chain_level; // [rsp+198h] [rbp-358h]
  const unsigned int *wood_type; // [rsp+1A0h] [rbp-350h]
  std::pair<unsigned int const,unsigned int> *__in; // [rsp+1A8h] [rbp-348h]
  std::tuple_element<0,std::pair<unsigned int const,unsigned int> >::type *monster_id_0; // [rsp+1B0h] [rbp-340h]
  std::tuple_element<1,std::pair<unsigned int const,unsigned int> >::type *killed_num; // [rsp+1B8h] [rbp-338h]
  proto::MonsterBeKilledNumBin *killed_num_bin; // [rsp+1C0h] [rbp-330h]
  const std::pair<const std::string,unsigned int> *v117; // [rsp+1C8h] [rbp-328h]
  std::tuple_element<0,const std::pair<const std::string,unsigned int> >::type *drop_category; // [rsp+1D0h] [rbp-320h]
  std::tuple_element<1,const std::pair<const std::string,unsigned int> >::type *drop_count; // [rsp+1D8h] [rbp-318h]
  std::tuple_element<0,std::pair<unsigned int const,unsigned int> >::type *gadget_id_0; // [rsp+1E0h] [rbp-310h]
  std::tuple_element<1,std::pair<unsigned int const,unsigned int> >::type *interact_num; // [rsp+1E8h] [rbp-308h]
  std::tuple_element<0,std::pair<unsigned int const,unsigned int> >::type *gadget_id; // [rsp+1F0h] [rbp-300h]
  std::tuple_element<1,std::pair<unsigned int const,unsigned int> >::type *open_num; // [rsp+1F8h] [rbp-2F8h]
  const std::pair<unsigned int const,proto::SubfieldDropBin> *v124; // [rsp+200h] [rbp-2F0h]
  std::tuple_element<0,const std::pair<unsigned int const,proto::SubfieldDropBin> >::type *entity_type; // [rsp+208h] [rbp-2E8h]
  std::tuple_element<1,const std::pair<unsigned int const,proto::SubfieldDropBin> >::type *subfield_drop_bin; // [rsp+210h] [rbp-2E0h]
  const std::pair<unsigned int const,proto::SceneBossChestBin> *v127; // [rsp+218h] [rbp-2D8h]
  std::tuple_element<0,const std::pair<unsigned int const,proto::SceneBossChestBin> >::type *scene_id_1; // [rsp+220h] [rbp-2D0h]
  std::tuple_element<1,const std::pair<unsigned int const,proto::SceneBossChestBin> >::type *boss_chest_bin; // [rsp+228h] [rbp-2C8h]
  const std::pair<unsigned int const,std::unordered_map<unsigned int,proto::SceneProductBin> > *v130; // [rsp+230h] [rbp-2C0h]
  std::tuple_element<0,const std::pair<unsigned int const,std::unordered_map<unsigned int,proto::SceneProductBin> > >::type *dungeon_id; // [rsp+238h] [rbp-2B8h]
  std::tuple_element<1,const std::pair<unsigned int const,std::unordered_map<unsigned int,proto::SceneProductBin> > >::type *scene_product_map; // [rsp+240h] [rbp-2B0h]
  proto::DungeonProductBin *dungeon_product_bin; // [rsp+248h] [rbp-2A8h]
  google::protobuf::Map<unsigned int,proto::SceneProductBin> *scene_product_map_bin; // [rsp+250h] [rbp-2A0h]
  const std::unordered_map<unsigned int,proto::SceneProductBin> *__for_range_4; // [rsp+258h] [rbp-298h]
  const std::pair<unsigned int const,proto::SceneProductBin> *v136; // [rsp+260h] [rbp-290h]
  std::tuple_element<0,const std::pair<unsigned int const,proto::SceneProductBin> >::type *scene_id_0; // [rsp+268h] [rbp-288h]
  std::tuple_element<1,const std::pair<unsigned int const,proto::SceneProductBin> >::type *scene_product_bin_0; // [rsp+270h] [rbp-280h]
  const std::pair<unsigned int const,proto::SceneProductBin> *v139; // [rsp+278h] [rbp-278h]
  std::tuple_element<0,const std::pair<unsigned int const,proto::SceneProductBin> >::type *scene_id; // [rsp+280h] [rbp-270h]
  std::tuple_element<1,const std::pair<unsigned int const,proto::SceneProductBin> >::type *scene_product_bin; // [rsp+288h] [rbp-268h]
  const std::pair<unsigned int const,std::unordered_set<proto::MapMarkPoint> > *v142; // [rsp+290h] [rbp-260h]
  std::tuple_element<0,const std::pair<unsigned int const,std::unordered_set<proto::MapMarkPoint> > >::type *_; // [rsp+298h] [rbp-258h]
  std::tuple_element<1,const std::pair<unsigned int const,std::unordered_set<proto::MapMarkPoint> > >::type *mark_point_set; // [rsp+2A0h] [rbp-250h]
  const std::unordered_set<proto::MapMarkPoint> *__for_range_1; // [rsp+2A8h] [rbp-248h]
  const proto::MapMarkPoint *mark; // [rsp+2B0h] [rbp-240h]
  std::pair<unsigned int const,unsigned int> __for_end; // [rsp+2B8h] [rbp-238h] BYREF
  common::milog::MiLogStream v148; // [rsp+2C0h] [rbp-230h] BYREF
  common::milog::MiLogStream v149; // [rsp+2E0h] [rbp-210h] BYREF
  char v150[496]; // [rsp+300h] [rbp-1F0h] BYREF

  v3 = (unsigned __int64)v150;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_3(448LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "2 32 16 21 dungeon_scene_ptr:372 64 312 21 dungeon_scene_bin:383";
  *(_QWORD *)(v3 + 16) = PlayerSceneComp::toBin;
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = -219021312;
  v5[536862731] = -218103808;
  v5[536862732] = -202116109;
  v5[536862733] = -202116109;
  proto_comp = proto::PlayerDataBin::mutable_scene_bin(player_data_bin);
  world_bin = proto::PlayerSceneCompBin::mutable_world(proto_comp);
  if ( std::operator==<PlayerWorld>(&this->my_player_world_ptr_, 0LL) )
  {
    common::milog::MiLogStream::create(
      &v149,
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/scene/player_scene_comp.cpp",
      "toBin",
      255);
    common::milog::MiLogStream::operator<<<char [32],(char *[32])0>(
      &v149,
      (const char (*)[32])"my_player_world_ptr_ is nullptr");
    common::milog::MiLogStream::~MiLogStream(&v149);
    v2 = -1;
  }
  else
  {
    v6 = std::__shared_ptr_access<PlayerWorld,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<PlayerWorld,(__gnu_cxx::_Lock_policy)2,false,false> *const)&this->my_player_world_ptr_);
    if ( PlayerWorld::toBin(v6, world_bin) )
    {
      common::milog::MiLogStream::create(
        &v149,
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/scene/player_scene_comp.cpp",
        "toBin",
        260);
      common::milog::MiLogStream::operator<<<char [23],(char *[23])0>(
        &v149,
        (const char (*)[23])"world_ptr->toBin fails");
      common::milog::MiLogStream::~MiLogStream(&v149);
      v2 = -1;
    }
    else
    {
      v7 = *(unsigned __int8 *)(((unsigned __int64)&this->my_cur_scene_id_ >> 3) + 0x7FFF8000);
      if ( (_BYTE)v7 != 0 && (char)v7 <= 3 )
        __asan_report_load4(&this->my_cur_scene_id_);
      proto::PlayerSceneCompBin::set_my_cur_scene_id(proto_comp, this->my_cur_scene_id_);
      if ( *(_BYTE *)(((unsigned __int64)&this->my_cur_player_scene_id_ >> 3) + 0x7FFF8000) != 0
        && (char)((((_BYTE)this + 36) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&this->my_cur_player_scene_id_ >> 3)
                                                            + 0x7FFF8000) )
      {
        __asan_report_load4(&this->my_cur_player_scene_id_);
      }
      proto::PlayerSceneCompBin::set_my_cur_player_scene_id(proto_comp, this->my_cur_player_scene_id_);
      if ( *(_BYTE *)(((unsigned __int64)&this->my_cur_home_scene_id_ >> 3) + 0x7FFF8000) != 0
        && *(_BYTE *)(((unsigned __int64)&this->my_cur_home_scene_id_ >> 3) + 0x7FFF8000) <= 3 )
      {
        __asan_report_load4(&this->my_cur_home_scene_id_);
      }
      proto::PlayerSceneCompBin::set_my_cur_home_scene_id(proto_comp, this->my_cur_home_scene_id_);
      if ( *(_BYTE *)(((unsigned __int64)&this->my_cur_area_id_ >> 3) + 0x7FFF8000) != 0
        && (char)((((_BYTE)this + 44) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&this->my_cur_area_id_ >> 3)
                                                            + 0x7FFF8000) )
      {
        __asan_report_load4(&this->my_cur_area_id_);
      }
      proto::PlayerSceneCompBin::set_my_cur_area_id(proto_comp, this->my_cur_area_id_);
      if ( *(_BYTE *)(((unsigned __int64)&this->my_prev_scene_id_ >> 3) + 0x7FFF8000) != 0
        && *(_BYTE *)(((unsigned __int64)&this->my_prev_scene_id_ >> 3) + 0x7FFF8000) <= 3 )
      {
        __asan_report_load4(&this->my_prev_scene_id_);
      }
      proto::PlayerSceneCompBin::set_my_prev_scene_id(proto_comp, this->my_prev_scene_id_);
      __for_range = &this->monster_seen_set_;
      __for_begin_1._M_cur = (std::__detail::_Node_iterator_base<std::pair<unsigned int const,std::weak_ptr<DungeonScene> >,false>::__node_type *)std::set<unsigned int>::begin(&this->monster_seen_set_)._M_node;
      __for_end = (std::pair<unsigned int const,unsigned int>)std::set<unsigned int>::end(&this->monster_seen_set_)._M_node;
      while ( std::operator!=(
                (const std::_Rb_tree_const_iterator<unsigned int>::_Self *)&__for_begin_1,
                (const std::_Rb_tree_const_iterator<unsigned int>::_Self *)&__for_end) )
      {
        v8 = (unsigned int *)std::_Rb_tree_const_iterator<unsigned int>::operator*((const std::_Rb_tree_const_iterator<unsigned int> *const)&__for_begin_1);
        v9 = v8;
        if ( *(_BYTE *)(((unsigned __int64)v8 >> 3) + 0x7FFF8000) != 0
          && (char)(((unsigned __int8)v8 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)v8 >> 3) + 0x7FFF8000) )
        {
          __asan_report_load4(v8);
        }
        monster_id = *v9;
        proto::PlayerSceneCompBin::add_monster_seen_list(proto_comp, monster_id);
        std::_Rb_tree_const_iterator<unsigned int>::operator++((std::_Rb_tree_const_iterator<unsigned int> *const)&__for_begin_1);
      }
      __for_range_0 = &this->mark_point_set_map_;
      __for_begin_0._M_cur = std::unordered_map<unsigned int,std::unordered_set<proto::MapMarkPoint>>::begin(&this->mark_point_set_map_)._M_cur;
      __for_begin._M_cur = (std::__detail::_Node_iterator_base<std::pair<unsigned int const,unsigned int>,false>::__node_type *)std::unordered_map<unsigned int,std::unordered_set<proto::MapMarkPoint>>::end(__for_range_0)._M_cur;
      while ( std::__detail::operator!=<std::pair<unsigned int const,std::unordered_set<proto::MapMarkPoint>>,false>(
                &__for_begin_0,
                (const std::__detail::_Node_iterator_base<std::pair<unsigned int const,std::unordered_set<proto::MapMarkPoint> >,false> *)&__for_begin) )
      {
        v142 = std::__detail::_Node_iterator<std::pair<unsigned int const,std::unordered_set<proto::MapMarkPoint>>,false,false>::operator*(&__for_begin_0);
        _ = std::get<0ul,unsigned int const,std::unordered_set<proto::MapMarkPoint>>(v142);
        mark_point_set = (std::tuple_element<1,const std::pair<unsigned int const,std::unordered_set<proto::MapMarkPoint> > >::type *)std::get<1ul,unsigned int const,std::unordered_set<proto::MapMarkPoint>>(v142);
        __for_range_1 = mark_point_set;
        __for_begin_1._M_cur = (std::__detail::_Node_iterator_base<std::pair<unsigned int const,std::weak_ptr<DungeonScene> >,false>::__node_type *)std::unordered_set<proto::MapMarkPoint>::begin(mark_point_set)._M_cur;
        __for_end = (std::pair<unsigned int const,unsigned int>)std::unordered_set<proto::MapMarkPoint>::end(__for_range_1)._M_cur;
        while ( std::__detail::operator!=<proto::MapMarkPoint,true>(
                  (const std::__detail::_Node_iterator_base<proto::MapMarkPoint,true> *)&__for_begin_1,
                  (const std::__detail::_Node_iterator_base<proto::MapMarkPoint,true> *)&__for_end) )
        {
          mark = std::__detail::_Node_const_iterator<proto::MapMarkPoint,true,true>::operator*((const std::__detail::_Node_const_iterator<proto::MapMarkPoint,true,true> *const)&__for_begin_1);
          v10 = proto::PlayerSceneCompBin::add_mark_point_list(proto_comp);
          PlayerSceneComp::copyMapMarkBinFromMapMark(this, v10, mark);
          std::__detail::_Node_const_iterator<proto::MapMarkPoint,true,true>::operator++((std::__detail::_Node_const_iterator<proto::MapMarkPoint,true,true> *const)&__for_begin_1);
        }
        std::__detail::_Node_iterator<std::pair<unsigned int const,std::unordered_set<proto::MapMarkPoint>>,false,false>::operator++(&__for_begin_0);
      }
      world_product_map_bin = proto::PlayerSceneCompBin::mutable_world_product_map(proto_comp);
      __for_range_2 = &this->world_product_map_;
      __for_begin_1._M_cur = (std::__detail::_Node_iterator_base<std::pair<unsigned int const,std::weak_ptr<DungeonScene> >,false>::__node_type *)std::unordered_map<unsigned int,proto::SceneProductBin>::begin(&this->world_product_map_)._M_cur;
      __for_end = (std::pair<unsigned int const,unsigned int>)std::unordered_map<unsigned int,proto::SceneProductBin>::end(__for_range_2)._M_cur;
      while ( std::__detail::operator!=<std::pair<unsigned int const,proto::SceneProductBin>,false>(
                (const std::__detail::_Node_iterator_base<std::pair<unsigned int const,proto::SceneProductBin>,false> *)&__for_begin_1,
                (const std::__detail::_Node_iterator_base<std::pair<unsigned int const,proto::SceneProductBin>,false> *)&__for_end) )
      {
        v139 = std::__detail::_Node_iterator<std::pair<unsigned int const,proto::SceneProductBin>,false,false>::operator*((const std::__detail::_Node_iterator<std::pair<unsigned int const,proto::SceneProductBin>,false,false> *const)&__for_begin_1);
        scene_id = std::get<0ul,unsigned int const,proto::SceneProductBin>(v139);
        scene_product_bin = (std::tuple_element<1,const std::pair<unsigned int const,proto::SceneProductBin> >::type *)std::get<1ul,unsigned int const,proto::SceneProductBin>(v139);
        v11 = google::protobuf::Map<unsigned int,proto::SceneProductBin>::operator[](world_product_map_bin, scene_id);
        proto::SceneProductBin::operator=(v11, scene_product_bin);
        std::__detail::_Node_iterator<std::pair<unsigned int const,proto::SceneProductBin>,false,false>::operator++((std::__detail::_Node_iterator<std::pair<unsigned int const,proto::SceneProductBin>,false,false> *const)&__for_begin_1);
      }
      dungeon_product_map_bin = proto::PlayerSceneCompBin::mutable_dungeon_product_map(proto_comp);
      __for_range_3 = &this->dungeon_product_map_;
      __for_begin_0._M_cur = (std::__detail::_Node_iterator_base<std::pair<unsigned int const,std::unordered_set<proto::MapMarkPoint> >,false>::__node_type *)std::unordered_map<unsigned int,std::unordered_map<unsigned int,proto::SceneProductBin>>::begin(&this->dungeon_product_map_)._M_cur;
      __for_begin._M_cur = (std::__detail::_Node_iterator_base<std::pair<unsigned int const,unsigned int>,false>::__node_type *)std::unordered_map<unsigned int,std::unordered_map<unsigned int,proto::SceneProductBin>>::end(__for_range_3)._M_cur;
      while ( std::__detail::operator!=<std::pair<unsigned int const,std::unordered_map<unsigned int,proto::SceneProductBin>>,false>(
                (const std::__detail::_Node_iterator_base<std::pair<unsigned int const,std::unordered_map<unsigned int,proto::SceneProductBin> >,false> *)&__for_begin_0,
                (const std::__detail::_Node_iterator_base<std::pair<unsigned int const,std::unordered_map<unsigned int,proto::SceneProductBin> >,false> *)&__for_begin) )
      {
        v130 = std::__detail::_Node_iterator<std::pair<unsigned int const,std::unordered_map<unsigned int,proto::SceneProductBin>>,false,false>::operator*((const std::__detail::_Node_iterator<std::pair<unsigned int const,std::unordered_map<unsigned int,proto::SceneProductBin> >,false,false> *const)&__for_begin_0);
        dungeon_id = std::get<0ul,unsigned int const,std::unordered_map<unsigned int,proto::SceneProductBin>>(v130);
        scene_product_map = (std::tuple_element<1,const std::pair<unsigned int const,std::unordered_map<unsigned int,proto::SceneProductBin> > >::type *)std::get<1ul,unsigned int const,std::unordered_map<unsigned int,proto::SceneProductBin>>(v130);
        dungeon_product_bin = google::protobuf::Map<unsigned int,proto::DungeonProductBin>::operator[](
                                dungeon_product_map_bin,
                                dungeon_id);
        scene_product_map_bin = proto::DungeonProductBin::mutable_scene_product_map(dungeon_product_bin);
        __for_range_4 = scene_product_map;
        __for_begin_1._M_cur = (std::__detail::_Node_iterator_base<std::pair<unsigned int const,std::weak_ptr<DungeonScene> >,false>::__node_type *)std::unordered_map<unsigned int,proto::SceneProductBin>::begin(scene_product_map)._M_cur;
        __for_end = (std::pair<unsigned int const,unsigned int>)std::unordered_map<unsigned int,proto::SceneProductBin>::end(__for_range_4)._M_cur;
        while ( std::__detail::operator!=<std::pair<unsigned int const,proto::SceneProductBin>,false>(
                  (const std::__detail::_Node_iterator_base<std::pair<unsigned int const,proto::SceneProductBin>,false> *)&__for_begin_1,
                  (const std::__detail::_Node_iterator_base<std::pair<unsigned int const,proto::SceneProductBin>,false> *)&__for_end) )
        {
          v136 = std::__detail::_Node_const_iterator<std::pair<unsigned int const,proto::SceneProductBin>,false,false>::operator*((const std::__detail::_Node_const_iterator<std::pair<unsigned int const,proto::SceneProductBin>,false,false> *const)&__for_begin_1);
          scene_id_0 = std::get<0ul,unsigned int const,proto::SceneProductBin>(v136);
          scene_product_bin_0 = (std::tuple_element<1,const std::pair<unsigned int const,proto::SceneProductBin> >::type *)std::get<1ul,unsigned int const,proto::SceneProductBin>(v136);
          v12 = google::protobuf::Map<unsigned int,proto::SceneProductBin>::operator[](
                  scene_product_map_bin,
                  scene_id_0);
          proto::SceneProductBin::operator=(v12, scene_product_bin_0);
          std::__detail::_Node_const_iterator<std::pair<unsigned int const,proto::SceneProductBin>,false,false>::operator++((std::__detail::_Node_const_iterator<std::pair<unsigned int const,proto::SceneProductBin>,false,false> *const)&__for_begin_1);
        }
        std::__detail::_Node_iterator<std::pair<unsigned int const,std::unordered_map<unsigned int,proto::SceneProductBin>>,false,false>::operator++((std::__detail::_Node_iterator<std::pair<unsigned int const,std::unordered_map<unsigned int,proto::SceneProductBin> >,false,false> *const)&__for_begin_0);
      }
      if ( *(_BYTE *)(((unsigned __int64)&this->trivial_entity_drop_num_ >> 3) + 0x7FFF8000) != 0
        && *(_BYTE *)(((unsigned __int64)&this->trivial_entity_drop_num_ >> 3) + 0x7FFF8000) <= 3 )
      {
        __asan_report_load4(&this->trivial_entity_drop_num_);
      }
      proto::PlayerSceneCompBin::set_trivial_entity_drop_num(proto_comp, this->trivial_entity_drop_num_);
      if ( *(_BYTE *)(((unsigned __int64)&this->trivial_entity_drop_time_ >> 3) + 0x7FFF8000) != 0
        && (char)((((_BYTE)this + 84) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&this->trivial_entity_drop_time_ >> 3)
                                                            + 0x7FFF8000) )
      {
        __asan_report_load4(&this->trivial_entity_drop_time_);
      }
      proto::PlayerSceneCompBin::set_trivial_entity_drop_time(proto_comp, this->trivial_entity_drop_time_);
      scene_boss_chest_map_bin = proto::PlayerSceneCompBin::mutable_scene_boss_chest_map(proto_comp);
      __for_range_5 = &this->scene_boss_chest_map_;
      __for_begin_1._M_cur = (std::__detail::_Node_iterator_base<std::pair<unsigned int const,std::weak_ptr<DungeonScene> >,false>::__node_type *)std::unordered_map<unsigned int,proto::SceneBossChestBin>::begin(&this->scene_boss_chest_map_)._M_cur;
      __for_end = (std::pair<unsigned int const,unsigned int>)std::unordered_map<unsigned int,proto::SceneBossChestBin>::end(__for_range_5)._M_cur;
      while ( std::__detail::operator!=<std::pair<unsigned int const,proto::SceneBossChestBin>,false>(
                (const std::__detail::_Node_iterator_base<std::pair<unsigned int const,proto::SceneBossChestBin>,false> *)&__for_begin_1,
                (const std::__detail::_Node_iterator_base<std::pair<unsigned int const,proto::SceneBossChestBin>,false> *)&__for_end) )
      {
        v127 = std::__detail::_Node_iterator<std::pair<unsigned int const,proto::SceneBossChestBin>,false,false>::operator*((const std::__detail::_Node_iterator<std::pair<unsigned int const,proto::SceneBossChestBin>,false,false> *const)&__for_begin_1);
        scene_id_1 = std::get<0ul,unsigned int const,proto::SceneBossChestBin>(v127);
        boss_chest_bin = (std::tuple_element<1,const std::pair<unsigned int const,proto::SceneBossChestBin> >::type *)std::get<1ul,unsigned int const,proto::SceneBossChestBin>(v127);
        v13 = google::protobuf::Map<unsigned int,proto::SceneBossChestBin>::operator[](
                scene_boss_chest_map_bin,
                scene_id_1);
        proto::SceneBossChestBin::operator=(v13, boss_chest_bin);
        std::__detail::_Node_iterator<std::pair<unsigned int const,proto::SceneBossChestBin>,false,false>::operator++((std::__detail::_Node_iterator<std::pair<unsigned int const,proto::SceneBossChestBin>,false,false> *const)&__for_begin_1);
      }
      subfield_drop_map_bin = proto::PlayerSceneCompBin::mutable_subfield_drop_map(proto_comp);
      __for_range_6 = &this->subfield_drop_map_;
      __for_begin_1._M_cur = (std::__detail::_Node_iterator_base<std::pair<unsigned int const,std::weak_ptr<DungeonScene> >,false>::__node_type *)std::unordered_map<unsigned int,proto::SubfieldDropBin>::begin(&this->subfield_drop_map_)._M_cur;
      __for_end = (std::pair<unsigned int const,unsigned int>)std::unordered_map<unsigned int,proto::SubfieldDropBin>::end(__for_range_6)._M_cur;
      while ( std::__detail::operator!=<std::pair<unsigned int const,proto::SubfieldDropBin>,false>(
                (const std::__detail::_Node_iterator_base<std::pair<unsigned int const,proto::SubfieldDropBin>,false> *)&__for_begin_1,
                (const std::__detail::_Node_iterator_base<std::pair<unsigned int const,proto::SubfieldDropBin>,false> *)&__for_end) )
      {
        v124 = std::__detail::_Node_iterator<std::pair<unsigned int const,proto::SubfieldDropBin>,false,false>::operator*((const std::__detail::_Node_iterator<std::pair<unsigned int const,proto::SubfieldDropBin>,false,false> *const)&__for_begin_1);
        entity_type = std::get<0ul,unsigned int const,proto::SubfieldDropBin>(v124);
        subfield_drop_bin = (std::tuple_element<1,const std::pair<unsigned int const,proto::SubfieldDropBin> >::type *)std::get<1ul,unsigned int const,proto::SubfieldDropBin>(v124);
        v14 = google::protobuf::Map<unsigned int,proto::SubfieldDropBin>::operator[](subfield_drop_map_bin, entity_type);
        proto::SubfieldDropBin::operator=(v14, subfield_drop_bin);
        std::__detail::_Node_iterator<std::pair<unsigned int const,proto::SubfieldDropBin>,false,false>::operator++((std::__detail::_Node_iterator<std::pair<unsigned int const,proto::SubfieldDropBin>,false,false> *const)&__for_begin_1);
      }
      if ( *(_BYTE *)(((unsigned __int64)&this->subfield_drop_time_ >> 3) + 0x7FFF8000) != 0
        && *(_BYTE *)(((unsigned __int64)&this->subfield_drop_time_ >> 3) + 0x7FFF8000) <= 3 )
      {
        __asan_report_load4(&this->subfield_drop_time_);
      }
      proto::PlayerSceneCompBin::set_subfield_drop_time(proto_comp, this->subfield_drop_time_);
      chest_open_num_map_bin = proto::PlayerSceneCompBin::mutable_chest_open_num_map(proto_comp);
      __for_range_7 = &this->chest_open_num_map_;
      __for_begin._M_cur = std::unordered_map<unsigned int,unsigned int>::begin(&this->chest_open_num_map_)._M_cur;
      __for_begin_1._M_cur = (std::__detail::_Node_iterator_base<std::pair<unsigned int const,std::weak_ptr<DungeonScene> >,false>::__node_type *)std::unordered_map<unsigned int,unsigned int>::end(__for_range_7)._M_cur;
      while ( std::__detail::operator!=<std::pair<unsigned int const,unsigned int>,false>(
                &__for_begin,
                (const std::__detail::_Node_iterator_base<std::pair<unsigned int const,unsigned int>,false> *)&__for_begin_1) )
      {
        v15 = std::__detail::_Node_iterator<std::pair<unsigned int const,unsigned int>,false,false>::operator*(&__for_begin);
        v16 = v15;
        if ( ((unsigned __int8)v15 & 7) >= *(_BYTE *)(((unsigned __int64)v15 >> 3) + 0x7FFF8000)
          && *(_BYTE *)(((unsigned __int64)v15 >> 3) + 0x7FFF8000) != 0
          || *(_BYTE *)((((unsigned __int64)&v15->second + 3) >> 3) + 0x7FFF8000) != 0
          && (((unsigned __int8)v15 + 7) & 7) >= *(_BYTE *)((((unsigned __int64)&v15->second + 3) >> 3) + 0x7FFF8000) )
        {
          __asan_report_load_n(v15, 8LL);
        }
        __for_end = *v16;
        gadget_id = std::get<0ul,unsigned int const,unsigned int>(&__for_end);
        v17 = std::get<1ul,unsigned int const,unsigned int>(&__for_end);
        open_num = v17;
        if ( *(_BYTE *)(((unsigned __int64)v17 >> 3) + 0x7FFF8000) != 0
          && (char)(((unsigned __int8)v17 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)v17 >> 3) + 0x7FFF8000) )
        {
          __asan_report_load4(v17);
        }
        v18 = *open_num;
        v19 = gadget_id;
        v20 = google::protobuf::Map<unsigned int,unsigned int>::operator[](chest_open_num_map_bin, gadget_id);
        v21 = v20;
        v22 = *(_BYTE *)(((unsigned __int64)v20 >> 3) + 0x7FFF8000);
        if ( v22 != 0 && (char)(((unsigned __int8)v20 & 7) + 3) >= v22 )
        {
          LOBYTE(v19) = v22 != 0;
          __asan_report_store4(v20, v19, (_BYTE)v20);
        }
        *v21 = v18;
        std::__detail::_Node_iterator<std::pair<unsigned int const,unsigned int>,false,false>::operator++(&__for_begin);
      }
      gadget_interact_num_map_bin = proto::PlayerSceneCompBin::mutable_gadget_interact_num_map(proto_comp);
      __for_range_8 = &this->gadget_interact_num_map_;
      __for_begin._M_cur = std::unordered_map<unsigned int,unsigned int>::begin(&this->gadget_interact_num_map_)._M_cur;
      __for_begin_1._M_cur = (std::__detail::_Node_iterator_base<std::pair<unsigned int const,std::weak_ptr<DungeonScene> >,false>::__node_type *)std::unordered_map<unsigned int,unsigned int>::end(__for_range_8)._M_cur;
      while ( std::__detail::operator!=<std::pair<unsigned int const,unsigned int>,false>(
                &__for_begin,
                (const std::__detail::_Node_iterator_base<std::pair<unsigned int const,unsigned int>,false> *)&__for_begin_1) )
      {
        v23 = std::__detail::_Node_iterator<std::pair<unsigned int const,unsigned int>,false,false>::operator*(&__for_begin);
        v24 = v23;
        if ( ((unsigned __int8)v23 & 7) >= *(_BYTE *)(((unsigned __int64)v23 >> 3) + 0x7FFF8000)
          && *(_BYTE *)(((unsigned __int64)v23 >> 3) + 0x7FFF8000) != 0
          || *(_BYTE *)((((unsigned __int64)&v23->second + 3) >> 3) + 0x7FFF8000) != 0
          && (((unsigned __int8)v23 + 7) & 7) >= *(_BYTE *)((((unsigned __int64)&v23->second + 3) >> 3) + 0x7FFF8000) )
        {
          __asan_report_load_n(v23, 8LL);
        }
        __for_end = *v24;
        gadget_id_0 = std::get<0ul,unsigned int const,unsigned int>(&__for_end);
        v25 = std::get<1ul,unsigned int const,unsigned int>(&__for_end);
        interact_num = v25;
        if ( *(_BYTE *)(((unsigned __int64)v25 >> 3) + 0x7FFF8000) != 0
          && (char)(((unsigned __int8)v25 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)v25 >> 3) + 0x7FFF8000) )
        {
          __asan_report_load4(v25);
        }
        v26 = *interact_num;
        v27 = gadget_id_0;
        v28 = google::protobuf::Map<unsigned int,unsigned int>::operator[](gadget_interact_num_map_bin, gadget_id_0);
        v29 = v28;
        v30 = *(_BYTE *)(((unsigned __int64)v28 >> 3) + 0x7FFF8000);
        if ( v30 != 0 && (char)(((unsigned __int8)v28 & 7) + 3) >= v30 )
        {
          LOBYTE(v27) = v30 != 0;
          __asan_report_store4(v28, v27, (_BYTE)v28);
        }
        *v29 = v26;
        std::__detail::_Node_iterator<std::pair<unsigned int const,unsigned int>,false,false>::operator++(&__for_begin);
      }
      if ( *(_BYTE *)(((unsigned __int64)&this->total_boss_chest_take_num_ >> 3) + 0x7FFF8000) != 0
        && *(_BYTE *)(((unsigned __int64)&this->total_boss_chest_take_num_ >> 3) + 0x7FFF8000) <= 3 )
      {
        __asan_report_load4(&this->total_boss_chest_take_num_);
      }
      proto::PlayerSceneCompBin::set_total_boss_chest_take_num(proto_comp, this->total_boss_chest_take_num_);
      daily_gadget_drop_category_count_map = proto::PlayerSceneCompBin::mutable_daily_gadget_drop_category_count_map[abi:cxx11](proto_comp);
      __for_range_9 = &this->daily_gadget_drop_category_count_map_;
      __for_begin_1._M_cur = (std::__detail::_Node_iterator_base<std::pair<unsigned int const,std::weak_ptr<DungeonScene> >,false>::__node_type *)std::unordered_map<std::string,unsigned int>::begin(&this->daily_gadget_drop_category_count_map_)._M_cur;
      __for_end = (std::pair<unsigned int const,unsigned int>)std::unordered_map<std::string,unsigned int>::end(__for_range_9)._M_cur;
      while ( std::__detail::operator!=<std::pair<std::string const,unsigned int>,true>(
                (const std::__detail::_Node_iterator_base<std::pair<const std::string,unsigned int>,true> *)&__for_begin_1,
                (const std::__detail::_Node_iterator_base<std::pair<const std::string,unsigned int>,true> *)&__for_end) )
      {
        v117 = std::__detail::_Node_iterator<std::pair<std::string const,unsigned int>,false,true>::operator*((const std::__detail::_Node_iterator<std::pair<const std::string,unsigned int>,false,true> *const)&__for_begin_1);
        drop_category = std::get<0ul,std::string const,unsigned int>(v117);
        v31 = (std::tuple_element<1,const std::pair<const std::string,unsigned int> >::type *)std::get<1ul,std::string const,unsigned int>(v117);
        drop_count = v31;
        if ( *(_BYTE *)(((unsigned __int64)v31 >> 3) + 0x7FFF8000) != 0
          && (char)(((unsigned __int8)v31 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)v31 >> 3) + 0x7FFF8000) )
        {
          __asan_report_load4(v31);
        }
        v32 = *drop_count;
        v33 = drop_category;
        v34 = google::protobuf::Map<std::string,unsigned int>::operator[](
                daily_gadget_drop_category_count_map,
                drop_category);
        v35 = v34;
        v36 = *(_BYTE *)(((unsigned __int64)v34 >> 3) + 0x7FFF8000);
        if ( v36 != 0 && (char)(((unsigned __int8)v34 & 7) + 3) >= v36 )
        {
          LOBYTE(v33) = v36 != 0;
          __asan_report_store4(v34, v33, (_BYTE)v34);
        }
        *v35 = v32;
        std::__detail::_Node_iterator<std::pair<std::string const,unsigned int>,false,true>::operator++((std::__detail::_Node_iterator<std::pair<const std::string,unsigned int>,false,true> *const)&__for_begin_1);
      }
      if ( *(_BYTE *)(((unsigned __int64)&this->last_refresh_daily_gadget_drop_category_count_map_time_ >> 3)
                    + 0x7FFF8000) != 0
        && *(_BYTE *)(((unsigned __int64)&this->last_refresh_daily_gadget_drop_category_count_map_time_ >> 3)
                    + 0x7FFF8000) <= 3 )
      {
        __asan_report_load4(&this->last_refresh_daily_gadget_drop_category_count_map_time_);
      }
      proto::PlayerSceneCompBin::set_last_refresh_daily_gadget_drop_category_count_map_time(
        proto_comp,
        this->last_refresh_daily_gadget_drop_category_count_map_time_);
      __for_range_10 = &this->monster_killed_num_map_;
      __for_begin_1._M_cur = (std::__detail::_Node_iterator_base<std::pair<unsigned int const,std::weak_ptr<DungeonScene> >,false>::__node_type *)std::map<unsigned int,unsigned int>::begin(&this->monster_killed_num_map_)._M_node;
      __for_end = (std::pair<unsigned int const,unsigned int>)std::map<unsigned int,unsigned int>::end(__for_range_10)._M_node;
      while ( std::operator!=(
                (const std::_Rb_tree_iterator<std::pair<unsigned int const,unsigned int> >::_Self *)&__for_begin_1,
                (const std::_Rb_tree_iterator<std::pair<unsigned int const,unsigned int> >::_Self *)&__for_end) )
      {
        __in = std::_Rb_tree_iterator<std::pair<unsigned int const,unsigned int>>::operator*((const std::_Rb_tree_iterator<std::pair<unsigned int const,unsigned int> > *const)&__for_begin_1);
        monster_id_0 = std::get<0ul,unsigned int const,unsigned int>(__in);
        killed_num = std::get<1ul,unsigned int const,unsigned int>(__in);
        killed_num_bin = proto::PlayerSceneCompBin::add_monster_killed_num_list(proto_comp);
        if ( *(_BYTE *)(((unsigned __int64)monster_id_0 >> 3) + 0x7FFF8000) != 0
          && (char)(((unsigned __int8)monster_id_0 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)monster_id_0 >> 3)
                                                                         + 0x7FFF8000) )
        {
          __asan_report_load4(monster_id_0);
        }
        proto::MonsterBeKilledNumBin::set_monster_id(killed_num_bin, *monster_id_0);
        if ( *(_BYTE *)(((unsigned __int64)killed_num >> 3) + 0x7FFF8000) != 0
          && (char)(((unsigned __int8)killed_num & 7) + 3) >= *(_BYTE *)(((unsigned __int64)killed_num >> 3) + 0x7FFF8000) )
        {
          __asan_report_load4(killed_num);
        }
        proto::MonsterBeKilledNumBin::set_be_killed_num(killed_num_bin, *killed_num);
        std::_Rb_tree_iterator<std::pair<unsigned int const,unsigned int>>::operator++((std::_Rb_tree_iterator<std::pair<unsigned int const,unsigned int> > *const)&__for_begin_1);
      }
      __for_range_11 = &this->obtained_wood_type_set_;
      __for_begin_1._M_cur = (std::__detail::_Node_iterator_base<std::pair<unsigned int const,std::weak_ptr<DungeonScene> >,false>::__node_type *)std::set<unsigned int>::begin(&this->obtained_wood_type_set_)._M_node;
      __for_end = (std::pair<unsigned int const,unsigned int>)std::set<unsigned int>::end(__for_range_11)._M_node;
      while ( std::operator!=(
                (const std::_Rb_tree_const_iterator<unsigned int>::_Self *)&__for_begin_1,
                (const std::_Rb_tree_const_iterator<unsigned int>::_Self *)&__for_end) )
      {
        v37 = std::_Rb_tree_const_iterator<unsigned int>::operator*((const std::_Rb_tree_const_iterator<unsigned int> *const)&__for_begin_1);
        wood_type = v37;
        if ( *(_BYTE *)(((unsigned __int64)v37 >> 3) + 0x7FFF8000) != 0
          && (char)(((unsigned __int8)v37 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)v37 >> 3) + 0x7FFF8000) )
        {
          __asan_report_load4(v37);
        }
        proto::PlayerSceneCompBin::add_obtained_wood_type_list(proto_comp, *wood_type);
        std::_Rb_tree_const_iterator<unsigned int>::operator++((std::_Rb_tree_const_iterator<unsigned int> *const)&__for_begin_1);
      }
      if ( *(_BYTE *)(((unsigned __int64)&this->weekly_boss_resin_discount_num_ >> 3) + 0x7FFF8000) != 0
        && *(_BYTE *)(((unsigned __int64)&this->weekly_boss_resin_discount_num_ >> 3) + 0x7FFF8000) <= 3 )
      {
        __asan_report_load4(&this->weekly_boss_resin_discount_num_);
      }
      proto::PlayerSceneCompBin::set_weekly_boss_resin_discount_num(proto_comp, this->weekly_boss_resin_discount_num_);
      if ( *(_BYTE *)(((unsigned __int64)&this->last_weekly_boss_resin_discount_time_ >> 3) + 0x7FFF8000) != 0
        && (char)((((_BYTE)this - 4) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&this->last_weekly_boss_resin_discount_time_ >> 3)
                                                           + 0x7FFF8000) )
      {
        __asan_report_load4(&this->last_weekly_boss_resin_discount_time_);
      }
      proto::PlayerSceneCompBin::set_last_weekly_boss_resin_discount_time(
        proto_comp,
        this->last_weekly_boss_resin_discount_time_);
      proto_chain_level_map = proto::PlayerSceneCompBin::mutable_gadget_chain_level_map(proto_comp);
      __for_range_12 = &this->gadget_chain_level_map_;
      __for_begin_1._M_cur = (std::__detail::_Node_iterator_base<std::pair<unsigned int const,std::weak_ptr<DungeonScene> >,false>::__node_type *)std::map<unsigned int,unsigned int>::begin(&this->gadget_chain_level_map_)._M_node;
      __for_end = (std::pair<unsigned int const,unsigned int>)std::map<unsigned int,unsigned int>::end(__for_range_12)._M_node;
      while ( std::operator!=(
                (const std::_Rb_tree_iterator<std::pair<unsigned int const,unsigned int> >::_Self *)&__for_begin_1,
                (const std::_Rb_tree_iterator<std::pair<unsigned int const,unsigned int> >::_Self *)&__for_end) )
      {
        v109 = std::_Rb_tree_iterator<std::pair<unsigned int const,unsigned int>>::operator*((const std::_Rb_tree_iterator<std::pair<unsigned int const,unsigned int> > *const)&__for_begin_1);
        chain_id = std::get<0ul,unsigned int const,unsigned int>(v109);
        v38 = (std::tuple_element<1,const std::pair<unsigned int const,unsigned int> >::type *)std::get<1ul,unsigned int const,unsigned int>(v109);
        chain_level = v38;
        if ( *(_BYTE *)(((unsigned __int64)v38 >> 3) + 0x7FFF8000) != 0
          && (char)(((unsigned __int8)v38 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)v38 >> 3) + 0x7FFF8000) )
        {
          __asan_report_load4(v38);
        }
        v39 = *chain_level;
        v40 = chain_id;
        v41 = google::protobuf::Map<unsigned int,unsigned int>::operator[](proto_chain_level_map, chain_id);
        v42 = v41;
        v43 = *(_BYTE *)(((unsigned __int64)v41 >> 3) + 0x7FFF8000);
        if ( v43 != 0 && (char)(((unsigned __int8)v41 & 7) + 3) >= v43 )
        {
          LOBYTE(v40) = v43 != 0;
          __asan_report_store4(v41, v40, (_BYTE)v41);
        }
        *v42 = v39;
        std::_Rb_tree_iterator<std::pair<unsigned int const,unsigned int>>::operator++((std::_Rb_tree_iterator<std::pair<unsigned int const,unsigned int> > *const)&__for_begin_1);
      }
      __for_range_13 = &this->map_area_info_map_;
      __for_begin._M_cur = (std::__detail::_Node_iterator_base<std::pair<unsigned int const,unsigned int>,false>::__node_type *)std::unordered_map<unsigned int,bool>::begin(&this->map_area_info_map_)._M_cur;
      __for_begin_1._M_cur = (std::__detail::_Node_iterator_base<std::pair<unsigned int const,std::weak_ptr<DungeonScene> >,false>::__node_type *)std::unordered_map<unsigned int,bool>::end(__for_range_13)._M_cur;
      while ( std::__detail::operator!=<std::pair<unsigned int const,bool>,false>(
                (const std::__detail::_Node_iterator_base<std::pair<unsigned int const,bool>,false> *)&__for_begin,
                (const std::__detail::_Node_iterator_base<std::pair<unsigned int const,bool>,false> *)&__for_begin_1) )
      {
        v44 = std::__detail::_Node_iterator<std::pair<unsigned int const,bool>,false,false>::operator*((const std::__detail::_Node_iterator<std::pair<unsigned int const,bool>,false,false> *const)&__for_begin);
        v45 = (std::pair<unsigned int const,unsigned int> *)v44;
        if ( ((unsigned __int8)v44 & 7) >= *(_BYTE *)(((unsigned __int64)v44 >> 3) + 0x7FFF8000)
          && *(_BYTE *)(((unsigned __int64)v44 >> 3) + 0x7FFF8000) != 0
          || *(_BYTE *)(((unsigned __int64)(&v44->second + 3) >> 3) + 0x7FFF8000) != 0
          && (((unsigned __int8)v44 + 7) & 7) >= *(_BYTE *)(((unsigned __int64)(&v44->second + 3) >> 3) + 0x7FFF8000) )
        {
          __asan_report_load_n(v44, 8LL);
        }
        __for_end = *v45;
        map_area_id = std::get<0ul,unsigned int const,bool>((std::pair<unsigned int const,bool> *)&__for_end);
        is_open = std::get<1ul,unsigned int const,bool>((std::pair<unsigned int const,bool> *)&__for_end);
        map_area_info_bin = proto::PlayerSceneCompBin::add_map_area_info_list(proto_comp);
        if ( *(_BYTE *)(((unsigned __int64)map_area_id >> 3) + 0x7FFF8000) != 0
          && (char)(((unsigned __int8)map_area_id & 7) + 3) >= *(_BYTE *)(((unsigned __int64)map_area_id >> 3)
                                                                        + 0x7FFF8000) )
        {
          __asan_report_load4(map_area_id);
        }
        proto::MapAreaInfoBin::set_map_area_id(map_area_info_bin, *map_area_id);
        if ( *(_BYTE *)(((unsigned __int64)is_open >> 3) + 0x7FFF8000) != 0
          && ((unsigned __int8)is_open & 7) >= *(_BYTE *)(((unsigned __int64)is_open >> 3) + 0x7FFF8000) )
        {
          __asan_report_load1(is_open);
        }
        proto::MapAreaInfoBin::set_is_open(map_area_info_bin, *is_open);
        std::__detail::_Node_iterator<std::pair<unsigned int const,bool>,false,false>::operator++((std::__detail::_Node_iterator<std::pair<unsigned int const,bool>,false,false> *const)&__for_begin);
      }
      __for_range_14 = &this->monster_captured_num_map_;
      __for_begin._M_cur = (std::__detail::_Node_iterator_base<std::pair<unsigned int const,unsigned int>,false>::__node_type *)std::map<unsigned int,unsigned int>::begin(&this->monster_captured_num_map_)._M_node;
      __for_begin_1._M_cur = (std::__detail::_Node_iterator_base<std::pair<unsigned int const,std::weak_ptr<DungeonScene> >,false>::__node_type *)std::map<unsigned int,unsigned int>::end(__for_range_14)._M_node;
      while ( std::operator!=(
                (const std::_Rb_tree_iterator<std::pair<unsigned int const,unsigned int> >::_Self *)&__for_begin,
                (const std::_Rb_tree_iterator<std::pair<unsigned int const,unsigned int> >::_Self *)&__for_begin_1) )
      {
        v46 = std::_Rb_tree_iterator<std::pair<unsigned int const,unsigned int>>::operator*((const std::_Rb_tree_iterator<std::pair<unsigned int const,unsigned int> > *const)&__for_begin);
        v47 = v46;
        if ( ((unsigned __int8)v46 & 7) >= *(_BYTE *)(((unsigned __int64)v46 >> 3) + 0x7FFF8000)
          && *(_BYTE *)(((unsigned __int64)v46 >> 3) + 0x7FFF8000) != 0
          || *(_BYTE *)((((unsigned __int64)&v46->second + 3) >> 3) + 0x7FFF8000) != 0
          && (((unsigned __int8)v46 + 7) & 7) >= *(_BYTE *)((((unsigned __int64)&v46->second + 3) >> 3) + 0x7FFF8000) )
        {
          __asan_report_load_n(v46, 8LL);
        }
        __for_end = *v47;
        monster_id_1 = std::get<0ul,unsigned int const,unsigned int>(&__for_end);
        captured_num = std::get<1ul,unsigned int const,unsigned int>(&__for_end);
        captured_num_bin = proto::PlayerSceneCompBin::add_monster_captured_num_list(proto_comp);
        if ( *(_BYTE *)(((unsigned __int64)monster_id_1 >> 3) + 0x7FFF8000) != 0
          && (char)(((unsigned __int8)monster_id_1 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)monster_id_1 >> 3)
                                                                         + 0x7FFF8000) )
        {
          __asan_report_load4(monster_id_1);
        }
        proto::MonsterBeCapturedNumBin::set_monster_id(captured_num_bin, *monster_id_1);
        if ( *(_BYTE *)(((unsigned __int64)captured_num >> 3) + 0x7FFF8000) != 0
          && (char)(((unsigned __int8)captured_num & 7) + 3) >= *(_BYTE *)(((unsigned __int64)captured_num >> 3)
                                                                         + 0x7FFF8000) )
        {
          __asan_report_load4(captured_num);
        }
        proto::MonsterBeCapturedNumBin::set_be_captured_num(captured_num_bin, *captured_num);
        std::_Rb_tree_iterator<std::pair<unsigned int const,unsigned int>>::operator++((std::_Rb_tree_iterator<std::pair<unsigned int const,unsigned int> > *const)&__for_begin);
      }
      v48 = proto::PlayerSceneCompBin::mutable_level_tag_bin(proto_comp);
      LevelTagInfo::toBin(&this->level_tag_info_, v48);
      __for_range_15 = &this->create_persistent_dungeon_scene_map_;
      __for_begin_1._M_cur = std::unordered_map<unsigned int,std::weak_ptr<DungeonScene>>::begin(&this->create_persistent_dungeon_scene_map_)._M_cur;
      __for_end = (std::pair<unsigned int const,unsigned int>)std::unordered_map<unsigned int,std::weak_ptr<DungeonScene>>::end(__for_range_15)._M_cur;
      while ( std::__detail::operator!=<std::pair<unsigned int const,std::weak_ptr<DungeonScene>>,false>(
                &__for_begin_1,
                (const std::__detail::_Node_iterator_base<std::pair<unsigned int const,std::weak_ptr<DungeonScene> >,false> *)&__for_end) )
      {
        v100 = std::__detail::_Node_iterator<std::pair<unsigned int const,std::weak_ptr<DungeonScene>>,false,false>::operator*(&__for_begin_1);
        scene_id_2 = std::get<0ul,unsigned int const,std::weak_ptr<DungeonScene>>(v100);
        dungeon_scene_wtr = (std::tuple_element<1,const std::pair<unsigned int const,std::weak_ptr<DungeonScene> > >::type *)std::get<1ul,unsigned int const,std::weak_ptr<DungeonScene>>(v100);
        std::weak_ptr<DungeonScene>::lock((const std::weak_ptr<DungeonScene> *const)(v3 + 32));
        if ( std::operator==<DungeonScene>(0LL, (const std::shared_ptr<DungeonScene> *)(v3 + 32)) )
        {
          common::milog::MiLogStream::create(
            &v149,
            &common::milog::MiLogDefault::default_log_obj_,
            3u,
            "./src/scene/player_scene_comp.cpp",
            "toBin",
            375);
          common::milog::MiLogStream::operator<<<char [26],(char *[26])0>(
            &v149,
            (const char (*)[26])"dungeon_scene_ptr is null");
          common::milog::MiLogStream::~MiLogStream(&v149);
          v49 = 0;
        }
        else
        {
          v50 = (unsigned __int64)std::__shared_ptr_access<DungeonScene,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<DungeonScene,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 32));
          if ( *(_BYTE *)((v50 >> 3) + 0x7FFF8000) )
            v50 = __asan_report_load8();
          v51 = *(_QWORD *)v50 + 504LL;
          if ( *(_BYTE *)((v51 >> 3) + 0x7FFF8000) )
            v50 = __asan_report_load8();
          if ( (*(unsigned __int8 (__fastcall **)(unsigned __int64))v51)(v50) != 1 )
          {
            common::milog::MiLogStream::create(
              &v149,
              &common::milog::MiLogDefault::default_log_obj_,
              3u,
              "./src/scene/player_scene_comp.cpp",
              "toBin",
              380);
            common::milog::MiLogStream::operator<<<char [26],(char *[26])0>(
              &v149,
              (const char (*)[26])"dungeon_scene_ptr is null");
            common::milog::MiLogStream::~MiLogStream(&v149);
            v49 = 0;
          }
          else
          {
            proto::SceneBin::SceneBin((proto::SceneBin *const)(v3 + 64));
            v52 = (unsigned __int64)std::__shared_ptr_access<DungeonScene,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<DungeonScene,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 32));
            if ( *(_BYTE *)((v52 >> 3) + 0x7FFF8000) )
              v52 = __asan_report_load8();
            v53 = *(_QWORD *)v52 + 16LL;
            if ( *(_BYTE *)((v53 >> 3) + 0x7FFF8000) )
              v52 = __asan_report_load8();
            if ( (*(unsigned int (__fastcall **)(unsigned __int64, unsigned __int64))v53)(v52, v3 + 64) )
            {
              common::milog::MiLogStream::create(
                &v148,
                &common::milog::MiLogDefault::default_log_obj_,
                4u,
                "./src/scene/player_scene_comp.cpp",
                "toBin",
                386);
              v54 = common::milog::MiLogStream::operator<<<char [38],(char *[38])0>(
                      &v148,
                      (const char (*)[38])"dungeon_scene_ptr->toBin failed, uid:");
              if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
                __asan_report_load8();
              val = Player::getUid(this->player_);
              v55 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v54, &val);
              v56 = common::milog::MiLogStream::operator<<<char [11],(char *[11])0>(
                      v55,
                      (const char (*)[11])", dungeon:");
              v57 = (unsigned __int64)std::__shared_ptr_access<DungeonScene,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<DungeonScene,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 32));
              if ( *(_BYTE *)((v57 >> 3) + 0x7FFF8000) )
                v57 = __asan_report_load8();
              v58 = *(void (__fastcall ***)(common::milog::MiLogStream *, unsigned __int64))v57;
              if ( *(_BYTE *)((*(_QWORD *)v57 >> 3) + 0x7FFF8000LL) )
                v57 = __asan_report_load8();
              (*v58)(&v149, v57);
              common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v56, (const std::string *)&v149);
              std::string::~string(&v149);
              common::milog::MiLogStream::~MiLogStream(&v148);
              v2 = -1;
              v59 = 0;
            }
            else
            {
              v60 = std::move<proto::SceneBin &>((proto::SceneBin *)(v3 + 64));
              v61 = std::unordered_map<unsigned int,proto::SceneBin>::operator[](
                      &this->persistent_dungeon_scene_bin_map_,
                      scene_id_2);
              proto::SceneBin::operator=(v61, v60);
              v59 = 1;
            }
            proto::SceneBin::~SceneBin((proto::SceneBin *const)(v3 + 64));
            if ( v59 == 1 )
              v49 = 2;
            else
              v49 = 1;
          }
        }
        std::shared_ptr<DungeonScene>::~shared_ptr((std::shared_ptr<DungeonScene> *const)(v3 + 32));
        if ( v49 && v49 != 2 )
          goto LABEL_161;
        std::__detail::_Node_iterator<std::pair<unsigned int const,std::weak_ptr<DungeonScene>>,false,false>::operator++(&__for_begin_1);
      }
      __for_range_16 = &this->persistent_dungeon_scene_bin_map_;
      __for_begin_1._M_cur = (std::__detail::_Node_iterator_base<std::pair<unsigned int const,std::weak_ptr<DungeonScene> >,false>::__node_type *)std::unordered_map<unsigned int,proto::SceneBin>::begin(&this->persistent_dungeon_scene_bin_map_)._M_cur;
      __for_end = (std::pair<unsigned int const,unsigned int>)std::unordered_map<unsigned int,proto::SceneBin>::end(__for_range_16)._M_cur;
      while ( std::__detail::operator!=<std::pair<unsigned int const,proto::SceneBin>,false>(
                (const std::__detail::_Node_iterator_base<std::pair<unsigned int const,proto::SceneBin>,false> *)&__for_begin_1,
                (const std::__detail::_Node_iterator_base<std::pair<unsigned int const,proto::SceneBin>,false> *)&__for_end) )
      {
        v96 = std::__detail::_Node_iterator<std::pair<unsigned int const,proto::SceneBin>,false,false>::operator*((const std::__detail::_Node_iterator<std::pair<unsigned int const,proto::SceneBin>,false,false> *const)&__for_begin_1);
        scene_id_3 = std::get<0ul,unsigned int const,proto::SceneBin>(v96);
        proto_dungeon_scene_bin = (std::tuple_element<1,const std::pair<unsigned int const,proto::SceneBin> >::type *)std::get<1ul,unsigned int const,proto::SceneBin>(v96);
        persistent_dungeon_scene_bin = proto::PlayerSceneCompBin::add_persistent_dungeon_scene_bin_list(proto_comp);
        if ( *(_BYTE *)(((unsigned __int64)scene_id_3 >> 3) + 0x7FFF8000) != 0
          && (char)(((unsigned __int8)scene_id_3 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)scene_id_3 >> 3) + 0x7FFF8000) )
        {
          __asan_report_load4(scene_id_3);
        }
        proto::PersistentDungeonSceneBin::set_scene_id(persistent_dungeon_scene_bin, *scene_id_3);
        v62 = proto::PersistentDungeonSceneBin::mutable_dungeon_scene_bin(persistent_dungeon_scene_bin);
        proto::SceneBin::operator=(v62, proto_dungeon_scene_bin);
        std::__detail::_Node_iterator<std::pair<unsigned int const,proto::SceneBin>,false,false>::operator++((std::__detail::_Node_iterator<std::pair<unsigned int const,proto::SceneBin>,false,false> *const)&__for_begin_1);
      }
      if ( *(_BYTE *)(((unsigned __int64)&this->last_area_play_type_ >> 3) + 0x7FFF8000) != 0
        && *(_BYTE *)(((unsigned __int64)&this->last_area_play_type_ >> 3) + 0x7FFF8000) <= 3 )
      {
        __asan_report_load4(&this->last_area_play_type_);
      }
      proto::PlayerSceneCompBin::set_last_area_play_type(proto_comp, this->last_area_play_type_);
      deshret_obelisk_bin = proto::PlayerSceneCompBin::mutable_deshret_obelisk_bin(proto_comp);
      if ( *(_BYTE *)(((unsigned __int64)&this->cur_deshret_obelisk_ >> 3) + 0x7FFF8000) != 0
        && *(_BYTE *)(((unsigned __int64)&this->cur_deshret_obelisk_ >> 3) + 0x7FFF8000) <= 3 )
      {
        __asan_report_load4(&this->cur_deshret_obelisk_);
      }
      proto::DeshretObeliskBin::set_group_id(deshret_obelisk_bin, this->cur_deshret_obelisk_.first);
      if ( *(_BYTE *)(((unsigned __int64)&this->cur_deshret_obelisk_.second >> 3) + 0x7FFF8000) != 0
        && (char)((((_BYTE)this + 92) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&this->cur_deshret_obelisk_.second >> 3)
                                                            + 0x7FFF8000) )
      {
        __asan_report_load4(&this->cur_deshret_obelisk_.second);
      }
      proto::DeshretObeliskBin::set_config_id(deshret_obelisk_bin, this->cur_deshret_obelisk_.second);
      v2 = 0;
    }
  }
LABEL_161:
  result = v2;
  if ( v150 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF802C) = 0LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8034) = 0;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8020) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8028) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8030) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 408: range 0000000013E3DD7A-0000000013E3DFBB
int32_t __cdecl PlayerSceneComp::init(PlayerSceneComp *const this)
{
  common::milog::MiLogStream *v1; // rbx
  unsigned __int64 v3; // rax
  unsigned __int64 v4; // rdx
  unsigned int val; // [rsp+1Ch] [rbp-34h] BYREF
  common::milog::MiLogStream v6; // [rsp+20h] [rbp-30h] BYREF

  if ( std::operator==<PlayerWorld>(&this->my_player_world_ptr_, 0LL) )
  {
    common::milog::MiLogStream::create(
      &v6,
      &common::milog::MiLogDefault::default_log_obj_,
      4u,
      "./src/scene/player_scene_comp.cpp",
      "init",
      411);
    v1 = common::milog::MiLogStream::operator<<<char [28],(char *[28])0>(
           &v6,
           (const char (*)[28])"world_ptr is nullptr, uid: ");
    if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
      __asan_report_load8();
LABEL_4:
    val = Player::getUid(this->player_);
    common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v1, &val);
    common::milog::MiLogStream::~MiLogStream(&v6);
    return -1;
  }
  v3 = (unsigned __int64)std::__shared_ptr_access<PlayerWorld,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<PlayerWorld,(__gnu_cxx::_Lock_policy)2,false,false> *const)&this->my_player_world_ptr_);
  if ( *(_BYTE *)((v3 >> 3) + 0x7FFF8000) )
    v3 = __asan_report_load8();
  v4 = *(_QWORD *)v3 + 24LL;
  if ( *(_BYTE *)((v4 >> 3) + 0x7FFF8000) )
    v3 = __asan_report_load8();
  if ( (*(unsigned int (__fastcall **)(unsigned __int64))v4)(v3) )
  {
    common::milog::MiLogStream::create(
      &v6,
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/scene/player_scene_comp.cpp",
      "init",
      416);
    v1 = common::milog::MiLogStream::operator<<<char [24],(char *[24])0>(
           &v6,
           (const char (*)[24])"world init fails, uid: ");
    if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
      __asan_report_load8();
    goto LABEL_4;
  }
  PlayerSceneComp::initEventObservers(this);
  PlayerSceneComp::initOneoffGatherPointInfos(this);
  LevelTagInfo::init(&this->level_tag_info_);
  return 0;
};

// Line 426: range 0000000013E3DFBC-0000000013E3E1D3
int32_t __cdecl PlayerSceneComp::start(PlayerSceneComp *const this)
{
  common::milog::MiLogStream *v1; // rbx
  unsigned __int64 v3; // rax
  unsigned __int64 v4; // rdx
  unsigned int val; // [rsp+1Ch] [rbp-34h] BYREF
  common::milog::MiLogStream v6; // [rsp+20h] [rbp-30h] BYREF

  if ( std::operator==<PlayerWorld>(&this->my_player_world_ptr_, 0LL) )
  {
    common::milog::MiLogStream::create(
      &v6,
      &common::milog::MiLogDefault::default_log_obj_,
      4u,
      "./src/scene/player_scene_comp.cpp",
      "start",
      429);
    v1 = common::milog::MiLogStream::operator<<<char [28],(char *[28])0>(
           &v6,
           (const char (*)[28])"world_ptr is nullptr, uid: ");
    if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
      __asan_report_load8();
LABEL_4:
    val = Player::getUid(this->player_);
    common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v1, &val);
    common::milog::MiLogStream::~MiLogStream(&v6);
    return -1;
  }
  v3 = (unsigned __int64)std::__shared_ptr_access<PlayerWorld,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<PlayerWorld,(__gnu_cxx::_Lock_policy)2,false,false> *const)&this->my_player_world_ptr_);
  if ( *(_BYTE *)((v3 >> 3) + 0x7FFF8000) )
    v3 = __asan_report_load8();
  v4 = *(_QWORD *)v3 + 32LL;
  if ( *(_BYTE *)((v4 >> 3) + 0x7FFF8000) )
    v3 = __asan_report_load8();
  if ( (*(unsigned int (__fastcall **)(unsigned __int64))v4)(v3) )
  {
    common::milog::MiLogStream::create(
      &v6,
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/scene/player_scene_comp.cpp",
      "start",
      434);
    v1 = common::milog::MiLogStream::operator<<<char [25],(char *[25])0>(
           &v6,
           (const char (*)[25])"world start fials, uid: ");
    if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
      __asan_report_load8();
    goto LABEL_4;
  }
  return 0;
};

// Line 441: range 0000000013E3E1D4-0000000013E3E221
void __cdecl PlayerSceneComp::preLogin(PlayerSceneComp *const this, bool is_relogin)
{
  PlayerWorld *v2; // rax

  if ( std::operator!=<PlayerWorld>(&this->my_player_world_ptr_, 0LL) )
  {
    v2 = std::__shared_ptr_access<PlayerWorld,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<PlayerWorld,(__gnu_cxx::_Lock_policy)2,false,false> *const)&this->my_player_world_ptr_);
    PlayerWorld::prePlayerLogin(v2, is_relogin);
  }
};

// Line 450: range 0000000013E3E222-0000000013E3E51C
int32_t __cdecl PlayerSceneComp::onFirstLogin(PlayerSceneComp *const this)
{
  std::shared_ptr<Scene> *v1; // rbx
  __int64 v2; // rax
  unsigned __int64 v3; // r12
  common::milog::MiLogStream *v4; // r14
  int32_t v5; // r14d
  Scene *v6; // rax
  int32_t result; // eax
  unsigned int val; // [rsp+1Ch] [rbp-A4h] BYREF
  std::shared_ptr<PlayerWorldScene> __r; // [rsp+20h] [rbp-A0h] BYREF
  common::milog::MiLogStream v10; // [rsp+30h] [rbp-90h] BYREF
  char v11[112]; // [rsp+50h] [rbp-70h] BYREF

  v1 = (std::shared_ptr<Scene> *)v11;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_0(64LL);
    if ( v2 )
      v1 = (std::shared_ptr<Scene> *)v2;
  }
  v1->_M_ptr = (std::__shared_ptr<Scene,(__gnu_cxx::_Lock_policy)2>::element_type *)1102416563;
  v1->_M_refcount._M_pi = (std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)2> *)"1 32 16 24 main_world_scene_ptr:451";
  v1[1]._M_ptr = (std::__shared_ptr<Scene,(__gnu_cxx::_Lock_policy)2>::element_type *)PlayerSceneComp::onFirstLogin;
  v3 = (unsigned __int64)v1 >> 3;
  *(_DWORD *)(v3 + 2147450880) = -235802127;
  *(_DWORD *)(v3 + 2147450884) = -202178560;
  PlayerSceneComp::getMainWorldScene((PlayerSceneComp *const)&__r);
  std::shared_ptr<Scene>::shared_ptr<PlayerWorldScene,void>(v1 + 2, &__r);
  std::shared_ptr<PlayerWorldScene>::~shared_ptr(&__r);
  if ( std::operator==<Scene>(0LL, v1 + 2) )
  {
    common::milog::MiLogStream::create(
      &v10,
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/scene/player_scene_comp.cpp",
      "onFirstLogin",
      454);
    v4 = common::milog::MiLogStream::operator<<<char [31],(char *[31])0>(
           &v10,
           (const char (*)[31])"getMainWorldScene failed, uid:");
    if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
      __asan_report_load8();
LABEL_7:
    val = Player::getUid(this->player_);
    common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v4, &val);
    common::milog::MiLogStream::~MiLogStream(&v10);
    v5 = -1;
    goto LABEL_13;
  }
  v6 = std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false> *const)&v1[2]);
  if ( Scene::setPlayerLastValidLocationOnFirstLogin(v6) )
  {
    common::milog::MiLogStream::create(
      &v10,
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/scene/player_scene_comp.cpp",
      "onFirstLogin",
      460);
    v4 = common::milog::MiLogStream::operator<<<char [52],(char *[52])0>(
           &v10,
           (const char (*)[52])"setPlayerLastValidLocationOnFirstLogin failed, uid:");
    if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
      __asan_report_load8();
    goto LABEL_7;
  }
  v5 = 0;
LABEL_13:
  std::shared_ptr<Scene>::~shared_ptr(v1 + 2);
  result = v5;
  if ( v11 == (char *)v1 )
  {
    *(_QWORD *)(((unsigned __int64)v1 >> 3) + 0x7FFF8000) = 0LL;
  }
  else
  {
    v1->_M_ptr = (std::__shared_ptr<Scene,(__gnu_cxx::_Lock_policy)2>::element_type *)1172321806;
    *(_QWORD *)(((unsigned __int64)v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 469: range 0000000013E3E51E-0000000013E3E901
int32_t __cdecl PlayerSceneComp::onLogin(PlayerSceneComp *const this, bool is_new_player)
{
  unsigned __int64 v2; // r12
  __int64 v3; // rax
  _DWORD *v4; // r13
  int32_t v5; // r14d
  Scene *v6; // rax
  Scene *v7; // rcx
  __gnu_cxx::__normal_iterator<unsigned int*,std::vector<unsigned int> >::reference v8; // rax
  uint32_t *v9; // rdx
  int32_t result; // eax
  std::vector<unsigned int>::iterator __for_begin; // [rsp+18h] [rbp-F8h] BYREF
  std::vector<unsigned int>::iterator __for_end; // [rsp+20h] [rbp-F0h] BYREF
  std::vector<unsigned int> *__for_range; // [rsp+28h] [rbp-E8h]
  std::shared_ptr<PlayerWorldScene> __r; // [rsp+30h] [rbp-E0h] BYREF
  common::milog::MiLogStream v15; // [rsp+40h] [rbp-D0h] BYREF
  char v16[176]; // [rsp+60h] [rbp-B0h] BYREF

  v2 = (unsigned __int64)v16;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_1(128LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "2 32 16 24 main_world_scene_ptr:472 64 24 20 level_tag_id_vec:491";
  *(_QWORD *)(v2 + 16) = PlayerSceneComp::onLogin;
  v4 = (_DWORD *)(v2 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = -219021312;
  v4[536862722] = -218103808;
  v4[536862723] = -202116109;
  PlayerSceneComp::resetDestScene(this);
  PlayerSceneComp::getMainWorldScene((PlayerSceneComp *const)&__r);
  std::shared_ptr<Scene>::shared_ptr<PlayerWorldScene,void>((std::shared_ptr<Scene> *const)(v2 + 32), &__r);
  std::shared_ptr<PlayerWorldScene>::~shared_ptr(&__r);
  if ( std::operator==<Scene>(0LL, (const std::shared_ptr<Scene> *)(v2 + 32)) )
  {
    common::milog::MiLogStream::create(
      &v15,
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/scene/player_scene_comp.cpp",
      "onLogin",
      475);
    common::milog::MiLogStream::operator<<<char [25],(char *[25])0>(
      &v15,
      (const char (*)[25])"getMainWorldScene failed");
    common::milog::MiLogStream::~MiLogStream(&v15);
    v5 = -1;
  }
  else
  {
    v6 = std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 32));
    Scene::updateDungeonEntryExploreStateOnLogin(v6);
    v7 = std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 32));
    if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
      __asan_report_load8();
    Scene::checkAndUpdateTempleExploreExpOnLogin(v7, this->player_);
    PlayerSceneComp::initGagdetChain(this);
    PlayerSceneComp::initMapAreaInfoOnLogin(this);
    if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
      __asan_report_load8();
    if ( !Player::isRelogin(this->player_) )
    {
      PlayerSceneComp::clearDeprecatedSceneMarkPoint(this);
      PlayerSceneComp::getCurLevelTagIdVec((std::vector<unsigned int> *)(v2 + 64), this);
      __for_range = (std::vector<unsigned int> *)(v2 + 64);
      __for_begin._M_current = std::vector<unsigned int>::begin((std::vector<unsigned int> *const)(v2 + 64))._M_current;
      __for_end._M_current = std::vector<unsigned int>::end((std::vector<unsigned int> *const)(v2 + 64))._M_current;
      while ( __gnu_cxx::operator!=<unsigned int *,std::vector<unsigned int>>(&__for_begin, &__for_end) )
      {
        v8 = __gnu_cxx::__normal_iterator<unsigned int *,std::vector<unsigned int>>::operator*(&__for_begin);
        v9 = v8;
        if ( *(_BYTE *)(((unsigned __int64)v8 >> 3) + 0x7FFF8000) != 0
          && (char)(((unsigned __int8)v8 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)v8 >> 3) + 0x7FFF8000) )
        {
          __asan_report_load4(v8);
        }
        PlayerSceneComp::registerGroupsByLevelTagId(this, *v9);
        __gnu_cxx::__normal_iterator<unsigned int *,std::vector<unsigned int>>::operator++(&__for_begin);
      }
      std::vector<unsigned int>::~vector((std::vector<unsigned int> *const)(v2 + 64));
    }
    v5 = 0;
  }
  std::shared_ptr<Scene>::~shared_ptr((std::shared_ptr<Scene> *const)(v2 + 32));
  result = v5;
  if ( v16 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 501: range 0000000013E3E902-0000000013E3E989
void __cdecl PlayerSceneComp::afterLogin(PlayerSceneComp *const this)
{
  PlayerWorld *v1; // rax

  if ( std::operator!=<PlayerWorld>(&this->my_player_world_ptr_, 0LL) )
  {
    v1 = std::__shared_ptr_access<PlayerWorld,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<PlayerWorld,(__gnu_cxx::_Lock_policy)2,false,false> *const)&this->my_player_world_ptr_);
    PlayerWorld::afterPlayerLogin(v1);
  }
  if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
    __asan_report_load8();
  if ( !Player::isRelogin(this->player_) )
    PlayerSceneComp::cleanPersistentDungeonAbandonBin(this);
};

// Line 514: range 0000000013E3E98A-0000000013E3EC57
int32_t __cdecl PlayerSceneComp::onDisconnect(PlayerSceneComp *const this)
{
  unsigned __int64 v1; // r12
  __int64 v2; // rax
  _DWORD *v3; // r13
  std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v4; // r14
  unsigned __int64 v5; // rax
  void (__fastcall *v6)(std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *, _QWORD); // r15
  uint32_t Uid; // eax
  PlayerWorld *v8; // rax
  int32_t result; // eax
  DungeonCandidateTeam *candidate_team; // [rsp+18h] [rbp-98h]
  char v11[144]; // [rsp+20h] [rbp-90h] BYREF

  v1 = (unsigned __int64)v11;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_1(96LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "2 32 16 17 cur_scene_ptr:516 64 16 17 cur_world_ptr:522";
  *(_QWORD *)(v1 + 16) = PlayerSceneComp::onDisconnect;
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -219021312;
  v3[536862722] = -202178560;
  PlayerSceneComp::destroyEntityWhenDisconnect(this);
  PlayerSceneComp::getCurScene((const PlayerSceneComp *const)(v1 + 32));
  if ( std::operator!=<Scene>((const std::shared_ptr<Scene> *)(v1 + 32), 0LL) )
  {
    v4 = std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v1 + 32));
    if ( *(_BYTE *)(((unsigned __int64)v4 >> 3) + 0x7FFF8000) )
      __asan_report_load8();
    v5 = (unsigned __int64)(v4->_vptr_DescribalBase + 12);
    if ( *(_BYTE *)((v5 >> 3) + 0x7FFF8000) )
      v5 = __asan_report_load8();
    v6 = *(void (__fastcall **)(std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *, _QWORD))v5;
    if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
      __asan_report_load8();
    Uid = Player::getUid(this->player_);
    v6(v4, Uid);
  }
  PlayerSceneComp::getCurWorld<PlayerWorld>((const PlayerSceneComp *const)(v1 + 64));
  if ( std::operator!=<PlayerWorld>((const std::shared_ptr<PlayerWorld> *)(v1 + 64), 0LL) )
  {
    v8 = std::__shared_ptr_access<PlayerWorld,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<PlayerWorld,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v1 + 64));
    candidate_team = PlayerWorld::getDungeonCandidateTeam(v8);
    if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
      __asan_report_load8();
    DungeonCandidateTeam::onPlayerDisconnect(candidate_team, this->player_);
  }
  PlayerSceneComp::checkAndFlushRecordedGadgetInteractBeyondDistanceLog(this, 1);
  PlayerSceneComp::checkAndFlushRecordedGadgetInteractBeyondCheckDistanceLog(this, 1);
  std::shared_ptr<PlayerWorld>::~shared_ptr((std::shared_ptr<PlayerWorld> *const)(v1 + 64));
  std::shared_ptr<Scene>::~shared_ptr((std::shared_ptr<Scene> *const)(v1 + 32));
  result = 0;
  if ( v11 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_DWORD *)((v1 >> 3) + 0x7FFF8008) = 0;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v1 >> 3) + 0x7FFF8008) = -168430091;
  }
  return result;
};

// Line 536: range 0000000013E3EC58-0000000013E3F0E6
int32_t __cdecl PlayerSceneComp::onLogout(PlayerSceneComp *const this)
{
  unsigned __int64 v1; // rbx
  __int64 v2; // rax
  _DWORD *v3; // r13
  common::milog::MiLogStream *v4; // r14
  unsigned __int64 v5; // rax
  unsigned __int64 v6; // rdx
  void (__fastcall *v7)(unsigned __int64, Player *, _QWORD, __int64); // r8
  common::milog::MiLogStream *v8; // r14
  PlayerWorld *v9; // rax
  int32_t result; // eax
  unsigned int val; // [rsp+1Ch] [rbp-B4h] BYREF
  common::milog::MiLogStream v12; // [rsp+20h] [rbp-B0h] BYREF
  char v13[144]; // [rsp+40h] [rbp-90h] BYREF

  v1 = (unsigned __int64)v13;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_1(96LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "2 32 16 17 cur_scene_ptr:538 64 16 17 cur_world_ptr:546";
  *(_QWORD *)(v1 + 16) = PlayerSceneComp::onLogout;
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -219021312;
  v3[536862722] = -202178560;
  PlayerSceneComp::destroyEntityWhenDisconnect(this);
  PlayerSceneComp::getCurScene((const PlayerSceneComp *const)(v1 + 32));
  if ( std::operator!=<Scene>((const std::shared_ptr<Scene> *)(v1 + 32), 0LL) )
  {
    if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
      __asan_report_load8();
    Player::leaveCurScene(this->player_);
  }
  else
  {
    PlayerSceneComp::getCurWorld((const PlayerSceneComp *const)(v1 + 64));
    if ( std::operator!=<World>((const std::shared_ptr<World> *)(v1 + 64), 0LL) )
    {
      common::milog::MiLogStream::create(
        &v12,
        &common::milog::MiLogDefault::default_log_obj_,
        1u,
        "./src/scene/player_scene_comp.cpp",
        "onLogout",
        549);
      v4 = common::milog::MiLogStream::operator<<<char [32],(char *[32])0>(
             &v12,
             (const char (*)[32])"cur_world_ptr != nullptr, uid: ");
      if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
        __asan_report_load8();
      val = Player::getUid(this->player_);
      common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v4, &val);
      common::milog::MiLogStream::~MiLogStream(&v12);
      v5 = (unsigned __int64)std::__shared_ptr_access<World,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<World,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v1 + 64));
      if ( *(_BYTE *)((v5 >> 3) + 0x7FFF8000) )
        v5 = __asan_report_load8();
      v6 = *(_QWORD *)v5 + 144LL;
      if ( *(_BYTE *)((v6 >> 3) + 0x7FFF8000) )
        v5 = __asan_report_load8();
      v7 = *(void (__fastcall **)(unsigned __int64, Player *, _QWORD, __int64))v6;
      if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
        v5 = __asan_report_load8();
      v7(v5, this->player_, 0LL, 1LL);
    }
    else if ( PlayerSceneComp::getCurWorldOwnerUid(this) )
    {
      common::milog::MiLogStream::create(
        &v12,
        &common::milog::MiLogDefault::default_log_obj_,
        1u,
        "./src/scene/player_scene_comp.cpp",
        "onLogout",
        554);
      v8 = common::milog::MiLogStream::operator<<<char [31],(char *[31])0>(
             &v12,
             (const char (*)[31])"getCurWorldOwnerUid > 0, uid: ");
      if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
        __asan_report_load8();
      val = Player::getUid(this->player_);
      common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v8, &val);
      common::milog::MiLogStream::~MiLogStream(&v12);
      if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
        __asan_report_load8();
      Player::leaveDestroyedWorld(this->player_);
    }
    std::shared_ptr<World>::~shared_ptr((std::shared_ptr<World> *const)(v1 + 64));
  }
  if ( std::operator!=<PlayerWorld>(&this->my_player_world_ptr_, 0LL) )
  {
    v9 = std::__shared_ptr_access<PlayerWorld,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<PlayerWorld,(__gnu_cxx::_Lock_policy)2,false,false> *const)&this->my_player_world_ptr_);
    PlayerWorld::onLogout(v9);
  }
  std::shared_ptr<Scene>::~shared_ptr((std::shared_ptr<Scene> *const)(v1 + 32));
  result = 0;
  if ( v13 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_DWORD *)((v1 >> 3) + 0x7FFF8008) = 0;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v1 >> 3) + 0x7FFF8008) = -168430091;
  }
  return result;
};

// Line 568: range 0000000013E3F0E8-0000000013E3F12A
int32_t __cdecl PlayerSceneComp::notifyAllData(PlayerSceneComp *const this)
{
  PlayerSceneComp::notifySeenMonster(this);
  PlayerSceneComp::notifyAllGadgetChainData(this);
  PlayerSceneComp::notifyLevelTagData(this);
  PlayerSceneComp::notifyAreaPlayData(this);
  return 0;
};

// Line 577: range 0000000013E3F12C-0000000013E3F518
std::pair<int,std::vector<unsigned int> > *__cdecl PlayerSceneComp::checkMpModeAvailability(
        std::pair<int,std::vector<unsigned int> > *retstr,
        const PlayerSceneComp *const this)
{
  unsigned __int64 v2; // rbx
  __int64 v3; // rax
  unsigned __int64 v4; // r13
  std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v5; // rax
  uint32_t OwnerUid; // r14d
  std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v7; // rax
  char v8; // al
  Scene *v9; // rax
  SceneGalleryComp *GalleryComp; // rax
  std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v11; // rax
  proto::Retcode __x; // [rsp+1Ch] [rbp-F4h] BYREF
  std::vector<unsigned int> __y; // [rsp+20h] [rbp-F0h] BYREF
  std::pair<proto::Retcode,std::vector<unsigned int> > __p; // [rsp+40h] [rbp-D0h] BYREF
  std::pair<proto::Retcode,std::vector<unsigned int> > v16; // [rsp+60h] [rbp-B0h] BYREF
  std::pair<proto::Retcode,std::vector<unsigned int> > v17; // [rsp+80h] [rbp-90h] BYREF
  char v18[112]; // [rsp+A0h] [rbp-70h] BYREF

  v2 = (unsigned __int64)v18;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_0(64LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "1 32 16 13 scene_ptr:578";
  *(_QWORD *)(v2 + 16) = PlayerSceneComp::checkMpModeAvailability;
  v4 = v2 >> 3;
  *(_DWORD *)(v4 + 2147450880) = -235802127;
  *(_DWORD *)(v4 + 2147450884) = -202178560;
  PlayerSceneComp::getCurScene((const PlayerSceneComp *const)(v2 + 32));
  if ( !std::operator!=<Scene>((const std::shared_ptr<Scene> *)(v2 + 32), 0LL) )
    goto LABEL_10;
  v5 = std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 32));
  OwnerUid = Scene::getOwnerUid(v5);
  if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
    __asan_report_load8();
  if ( OwnerUid == Player::getUid(this->player_)
    && (v7 = std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 32)),
        !Scene::isHomeScene(v7)) )
  {
    v8 = 1;
  }
  else
  {
LABEL_10:
    v8 = 0;
  }
  if ( !v8 )
    goto LABEL_16;
  v9 = std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 32));
  GalleryComp = Scene::getGalleryComp(v9);
  if ( SceneGalleryComp::isAnyGalleryStarted(GalleryComp) )
  {
    memset(&__y, 0, sizeof(__y));
    std::vector<unsigned int>::vector(&__y);
    __x = RET_MP_ANY_GALLERY_STARTED;
    std::make_pair<proto::Retcode,std::vector<unsigned int>>(&__p, &__x, &__y);
    std::pair<int,std::vector<unsigned int>>::pair<proto::Retcode,std::vector<unsigned int>,true>(retstr, &__p);
    std::pair<proto::Retcode,std::vector<unsigned int>>::~pair(&__p);
    std::vector<unsigned int>::~vector(&__y);
    goto LABEL_17;
  }
  v11 = std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 32));
  if ( Scene::getSceneMpType(v11) == SCENE_MP_SINGLE_PLAYER_SINGLE_MODE )
  {
    memset(&__y, 0, sizeof(__y));
    std::vector<unsigned int>::vector(&__y);
    __x = RET_MP_IN_SINGLE_SCENE;
    std::make_pair<proto::Retcode,std::vector<unsigned int>>(&v16, &__x, &__y);
    std::pair<int,std::vector<unsigned int>>::pair<proto::Retcode,std::vector<unsigned int>,true>(retstr, &v16);
    std::pair<proto::Retcode,std::vector<unsigned int>>::~pair(&v16);
    std::vector<unsigned int>::~vector(&__y);
  }
  else
  {
LABEL_16:
    memset(&__y, 0, sizeof(__y));
    std::vector<unsigned int>::vector(&__y);
    __x = RET_SUCC;
    std::make_pair<proto::Retcode,std::vector<unsigned int>>(&v17, &__x, &__y);
    std::pair<int,std::vector<unsigned int>>::pair<proto::Retcode,std::vector<unsigned int>,true>(retstr, &v17);
    std::pair<proto::Retcode,std::vector<unsigned int>>::~pair(&v17);
    std::vector<unsigned int>::~vector(&__y);
  }
LABEL_17:
  std::shared_ptr<Scene>::~shared_ptr((std::shared_ptr<Scene> *const)(v2 + 32));
  if ( v18 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return retstr;
};

// Line 594: range 0000000013E3F51A-0000000013E3F839
std::pair<int,std::vector<unsigned int> > *__cdecl PlayerSceneComp::checkHomeAvailability(
        std::pair<int,std::vector<unsigned int> > *retstr,
        const PlayerSceneComp *const this)
{
  unsigned __int64 v2; // rbx
  __int64 v3; // rax
  unsigned __int64 v4; // r13
  std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v5; // rax
  uint32_t OwnerUid; // r14d
  std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v7; // rax
  char v8; // al
  Scene *v9; // rax
  SceneGalleryComp *GalleryComp; // rax
  proto::Retcode __x; // [rsp+1Ch] [rbp-D4h] BYREF
  std::vector<unsigned int> __y; // [rsp+20h] [rbp-D0h] BYREF
  std::pair<proto::Retcode,std::vector<unsigned int> > __p; // [rsp+40h] [rbp-B0h] BYREF
  std::pair<proto::Retcode,std::vector<unsigned int> > v15; // [rsp+60h] [rbp-90h] BYREF
  char v16[112]; // [rsp+80h] [rbp-70h] BYREF

  v2 = (unsigned __int64)v16;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_0(64LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "1 32 16 13 scene_ptr:595";
  *(_QWORD *)(v2 + 16) = PlayerSceneComp::checkHomeAvailability;
  v4 = v2 >> 3;
  *(_DWORD *)(v4 + 2147450880) = -235802127;
  *(_DWORD *)(v4 + 2147450884) = -202178560;
  PlayerSceneComp::getCurScene((const PlayerSceneComp *const)(v2 + 32));
  if ( !std::operator!=<Scene>((const std::shared_ptr<Scene> *)(v2 + 32), 0LL) )
    goto LABEL_10;
  v5 = std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 32));
  OwnerUid = Scene::getOwnerUid(v5);
  if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
    __asan_report_load8();
  if ( OwnerUid == Player::getUid(this->player_)
    && (v7 = std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 32)),
        !Scene::isHomeScene(v7)) )
  {
    v8 = 1;
  }
  else
  {
LABEL_10:
    v8 = 0;
  }
  if ( v8
    && (v9 = std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 32)),
        GalleryComp = Scene::getGalleryComp(v9),
        SceneGalleryComp::isAnyGalleryStarted(GalleryComp)) )
  {
    memset(&__y, 0, sizeof(__y));
    std::vector<unsigned int>::vector(&__y);
    __x = RET_HOME_ANY_GALLERY_STARTED;
    std::make_pair<proto::Retcode,std::vector<unsigned int>>(&__p, &__x, &__y);
    std::pair<int,std::vector<unsigned int>>::pair<proto::Retcode,std::vector<unsigned int>,true>(retstr, &__p);
    std::pair<proto::Retcode,std::vector<unsigned int>>::~pair(&__p);
    std::vector<unsigned int>::~vector(&__y);
  }
  else
  {
    memset(&__y, 0, sizeof(__y));
    std::vector<unsigned int>::vector(&__y);
    __x = RET_SUCC;
    std::make_pair<proto::Retcode,std::vector<unsigned int>>(&v15, &__x, &__y);
    std::pair<int,std::vector<unsigned int>>::pair<proto::Retcode,std::vector<unsigned int>,true>(retstr, &v15);
    std::pair<proto::Retcode,std::vector<unsigned int>>::~pair(&v15);
    std::vector<unsigned int>::~vector(&__y);
  }
  std::shared_ptr<Scene>::~shared_ptr((std::shared_ptr<Scene> *const)(v2 + 32));
  if ( v16 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return retstr;
};

// Line 611: range 0000000013E3F83A-0000000013E402D4
void __cdecl PlayerSceneComp::initEventObservers(PlayerSceneComp *const this)
{
  __int64 v1; // rax
  PlayerEventComp *EventComp; // r12
  PlayerEventComp *v3; // r12
  PlayerEventComp *v4; // r12
  PlayerEventComp *v5; // r12
  PlayerEventComp *v6; // r12
  PlayerEventComp *v7; // r12
  PlayerEventComp *v8; // r12
  PlayerEventComp *v9; // r12
  PlayerEventComp *v10; // r12
  PlayerEventComp *v11; // r12
  PlayerEventComp *v12; // r12
  unsigned __int64 v13; // [rsp+8h] [rbp-1D8h]
  unsigned __int64 p_M_next_resize; // [rsp+B0h] [rbp-130h]
  PlayerEventComp v15; // [rsp+C0h] [rbp-120h] BYREF

  p_M_next_resize = (unsigned __int64)&v15.event_center_.observer_list_map_._M_h._M_rehash_policy._M_next_resize;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v1 = __asan_stack_malloc_0(64LL);
    if ( v1 )
      p_M_next_resize = v1;
  }
  *(_QWORD *)p_M_next_resize = 1102416563LL;
  *(_QWORD *)(p_M_next_resize + 8) = "1 32 16 12 this_wtr:612";
  *(_QWORD *)(p_M_next_resize + 16) = PlayerSceneComp::initEventObservers;
  v13 = p_M_next_resize >> 3;
  *(_DWORD *)(v13 + 2147450880) = -235802127;
  *(_DWORD *)(v13 + 2147450884) = -202178560;
  toThisPtr<PlayerSceneComp>((PlayerSceneComp *)&v15.event_center_.observer_list_map_._M_h._M_element_count);
  std::weak_ptr<PlayerSceneComp>::weak_ptr<PlayerSceneComp,void>(
    (std::weak_ptr<PlayerSceneComp> *const)(p_M_next_resize + 32),
    (const std::shared_ptr<PlayerSceneComp> *)&v15.event_center_.observer_list_map_._M_h._M_element_count);
  std::shared_ptr<PlayerSceneComp>::~shared_ptr((std::shared_ptr<PlayerSceneComp> *const)&v15.event_center_.observer_list_map_._M_h._M_element_count);
  if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
    __asan_report_load8();
  EventComp = Player::getEventComp(this->player_);
  std::weak_ptr<PlayerSceneComp>::weak_ptr(
    (std::weak_ptr<PlayerSceneComp> *const)&v15.event_center_.observer_list_map_._M_h._M_element_count,
    (const std::weak_ptr<PlayerSceneComp> *)(p_M_next_resize + 32));
  PlayerEventComp::registerObserver<PlayerSceneComp,SkillEvent>(
    &v15,
    (std::weak_ptr<PlayerSceneComp> *)EventComp,
    (void (*)(PlayerSceneComp *, const SkillEvent *))&v15.event_center_.observer_list_map_._M_h._M_element_count);
  std::weak_ptr<Observer>::operator=(&this->skill_event_observer_, (std::weak_ptr<Observer> *)&v15);
  std::weak_ptr<Observer>::~weak_ptr((std::weak_ptr<Observer> *const)&v15);
  std::weak_ptr<PlayerSceneComp>::~weak_ptr((std::weak_ptr<PlayerSceneComp> *const)&v15.event_center_.observer_list_map_._M_h._M_element_count);
  if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
    __asan_report_load8();
  v3 = Player::getEventComp(this->player_);
  std::weak_ptr<PlayerSceneComp>::weak_ptr(
    (std::weak_ptr<PlayerSceneComp> *const)&v15.event_center_.observer_list_map_._M_h._M_element_count,
    (const std::weak_ptr<PlayerSceneComp> *)(p_M_next_resize + 32));
  PlayerEventComp::registerObserver<PlayerSceneComp,ChangeAvatarEvent>(
    (PlayerEventComp *const)&v15._M_weak_this._M_refcount,
    (std::weak_ptr<PlayerSceneComp> *)v3,
    (void (*)(PlayerSceneComp *, const ChangeAvatarEvent *))&v15.event_center_.observer_list_map_._M_h._M_element_count);
  std::weak_ptr<Observer>::operator=(
    &this->change_avatar_observer_,
    (std::weak_ptr<Observer> *)&v15._M_weak_this._M_refcount);
  std::weak_ptr<Observer>::~weak_ptr((std::weak_ptr<Observer> *const)&v15._M_weak_this._M_refcount);
  std::weak_ptr<PlayerSceneComp>::~weak_ptr((std::weak_ptr<PlayerSceneComp> *const)&v15.event_center_.observer_list_map_._M_h._M_element_count);
  if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
    __asan_report_load8();
  v4 = Player::getEventComp(this->player_);
  std::weak_ptr<PlayerSceneComp>::weak_ptr(
    (std::weak_ptr<PlayerSceneComp> *const)&v15.event_center_.observer_list_map_._M_h._M_element_count,
    (const std::weak_ptr<PlayerSceneComp> *)(p_M_next_resize + 32));
  PlayerEventComp::registerObserver<PlayerSceneComp,MonsterBeKilledByHateListEvent>(
    (PlayerEventComp *const)&v15.event_center_,
    (std::weak_ptr<PlayerSceneComp> *)v4,
    (void (*)(PlayerSceneComp *, const MonsterBeKilledByHateListEvent *))&v15.event_center_.observer_list_map_._M_h._M_element_count);
  std::weak_ptr<Observer>::operator=(&this->kill_monster_observer_, (std::weak_ptr<Observer> *)&v15.event_center_);
  std::weak_ptr<Observer>::~weak_ptr((std::weak_ptr<Observer> *const)&v15.event_center_);
  std::weak_ptr<PlayerSceneComp>::~weak_ptr((std::weak_ptr<PlayerSceneComp> *const)&v15.event_center_.observer_list_map_._M_h._M_element_count);
  if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
    __asan_report_load8();
  v5 = Player::getEventComp(this->player_);
  std::weak_ptr<PlayerSceneComp>::weak_ptr(
    (std::weak_ptr<PlayerSceneComp> *const)&v15.event_center_.observer_list_map_._M_h._M_element_count,
    (const std::weak_ptr<PlayerSceneComp> *)(p_M_next_resize + 32));
  PlayerEventComp::registerObserver<PlayerSceneComp,FishingSuccEvent>(
    (PlayerEventComp *const)&v15.event_center_.context_.pending_que_,
    (std::weak_ptr<PlayerSceneComp> *)v5,
    (void (*)(PlayerSceneComp *, const FishingSuccEvent *))&v15.event_center_.observer_list_map_._M_h._M_element_count);
  std::weak_ptr<Observer>::operator=(
    &this->fishing_succ_observer_,
    (std::weak_ptr<Observer> *)&v15.event_center_.context_.pending_que_);
  std::weak_ptr<Observer>::~weak_ptr((std::weak_ptr<Observer> *const)&v15.event_center_.context_.pending_que_);
  std::weak_ptr<PlayerSceneComp>::~weak_ptr((std::weak_ptr<PlayerSceneComp> *const)&v15.event_center_.observer_list_map_._M_h._M_element_count);
  if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
    __asan_report_load8();
  v6 = Player::getEventComp(this->player_);
  std::weak_ptr<PlayerSceneComp>::weak_ptr(
    (std::weak_ptr<PlayerSceneComp> *const)&v15.event_center_.observer_list_map_._M_h._M_element_count,
    (const std::weak_ptr<PlayerSceneComp> *)(p_M_next_resize + 32));
  PlayerEventComp::registerObserver<PlayerSceneComp,WorldPlayerChangeEvent>(
    (PlayerEventComp *const)&v15.event_center_.context_.pending_que_.c._M_impl._M_start,
    (std::weak_ptr<PlayerSceneComp> *)v6,
    (void (*)(PlayerSceneComp *, const WorldPlayerChangeEvent *))&v15.event_center_.observer_list_map_._M_h._M_element_count);
  std::weak_ptr<Observer>::operator=(
    &this->world_player_change_observer_,
    (std::weak_ptr<Observer> *)&v15.event_center_.context_.pending_que_.c._M_impl._M_start);
  std::weak_ptr<Observer>::~weak_ptr((std::weak_ptr<Observer> *const)&v15.event_center_.context_.pending_que_.c._M_impl._M_start);
  std::weak_ptr<PlayerSceneComp>::~weak_ptr((std::weak_ptr<PlayerSceneComp> *const)&v15.event_center_.observer_list_map_._M_h._M_element_count);
  if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
    __asan_report_load8();
  v7 = Player::getEventComp(this->player_);
  std::weak_ptr<PlayerSceneComp>::weak_ptr(
    (std::weak_ptr<PlayerSceneComp> *const)&v15.event_center_.observer_list_map_._M_h._M_element_count,
    (const std::weak_ptr<PlayerSceneComp> *)(p_M_next_resize + 32));
  PlayerEventComp::registerObserver<PlayerSceneComp,CaptureSuccEvent>(
    (PlayerEventComp *const)&v15.event_center_.context_.pending_que_.c._M_impl._M_start._M_last,
    (std::weak_ptr<PlayerSceneComp> *)v7,
    (void (*)(PlayerSceneComp *, const CaptureSuccEvent *))&v15.event_center_.observer_list_map_._M_h._M_element_count);
  std::weak_ptr<Observer>::operator=(
    &this->capture_succ_observer_,
    (std::weak_ptr<Observer> *)&v15.event_center_.context_.pending_que_.c._M_impl._M_start._M_last);
  std::weak_ptr<Observer>::~weak_ptr((std::weak_ptr<Observer> *const)&v15.event_center_.context_.pending_que_.c._M_impl._M_start._M_last);
  std::weak_ptr<PlayerSceneComp>::~weak_ptr((std::weak_ptr<PlayerSceneComp> *const)&v15.event_center_.observer_list_map_._M_h._M_element_count);
  if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
    __asan_report_load8();
  v8 = Player::getEventComp(this->player_);
  std::weak_ptr<PlayerSceneComp>::weak_ptr(
    (std::weak_ptr<PlayerSceneComp> *const)&v15.event_center_.observer_list_map_._M_h._M_element_count,
    (const std::weak_ptr<PlayerSceneComp> *)(p_M_next_resize + 32));
  PlayerEventComp::registerObserver<PlayerSceneComp,ChangeClimateAreaEvent>(
    (PlayerEventComp *const)&v15.event_center_.context_.pending_que_.c._M_impl._M_finish,
    (std::weak_ptr<PlayerSceneComp> *)v8,
    (void (*)(PlayerSceneComp *, const ChangeClimateAreaEvent *))&v15.event_center_.observer_list_map_._M_h._M_element_count);
  std::weak_ptr<Observer>::~weak_ptr((std::weak_ptr<Observer> *const)&v15.event_center_.context_.pending_que_.c._M_impl._M_finish);
  std::weak_ptr<PlayerSceneComp>::~weak_ptr((std::weak_ptr<PlayerSceneComp> *const)&v15.event_center_.observer_list_map_._M_h._M_element_count);
  if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
    __asan_report_load8();
  v9 = Player::getEventComp(this->player_);
  std::weak_ptr<PlayerSceneComp>::weak_ptr(
    (std::weak_ptr<PlayerSceneComp> *const)&v15.event_center_.observer_list_map_._M_h._M_element_count,
    (const std::weak_ptr<PlayerSceneComp> *)(p_M_next_resize + 32));
  PlayerEventComp::registerObserver<PlayerSceneComp,ChangeClimateTypeEvent>(
    (PlayerEventComp *const)&v15.event_center_.context_.pending_que_.c._M_impl._M_finish._M_last,
    (std::weak_ptr<PlayerSceneComp> *)v9,
    (void (*)(PlayerSceneComp *, const ChangeClimateTypeEvent *))&v15.event_center_.observer_list_map_._M_h._M_element_count);
  std::weak_ptr<Observer>::~weak_ptr((std::weak_ptr<Observer> *const)&v15.event_center_.context_.pending_que_.c._M_impl._M_finish._M_last);
  std::weak_ptr<PlayerSceneComp>::~weak_ptr((std::weak_ptr<PlayerSceneComp> *const)&v15.event_center_.observer_list_map_._M_h._M_element_count);
  if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
    __asan_report_load8();
  v10 = Player::getEventComp(this->player_);
  std::weak_ptr<PlayerSceneComp>::weak_ptr(
    (std::weak_ptr<PlayerSceneComp> *const)&v15.event_center_.observer_list_map_._M_h._M_element_count,
    (const std::weak_ptr<PlayerSceneComp> *)(p_M_next_resize + 32));
  PlayerEventComp::registerObserver<PlayerSceneComp,RegionalPlayStatusChangeEvent>(
    (PlayerEventComp *const)&v15.event_center_.context_.event_center_,
    (std::weak_ptr<PlayerSceneComp> *)v10,
    (void (*)(PlayerSceneComp *, const RegionalPlayStatusChangeEvent *))&v15.event_center_.observer_list_map_._M_h._M_element_count);
  std::weak_ptr<Observer>::~weak_ptr((std::weak_ptr<Observer> *const)&v15.event_center_.context_.event_center_);
  std::weak_ptr<PlayerSceneComp>::~weak_ptr((std::weak_ptr<PlayerSceneComp> *const)&v15.event_center_.observer_list_map_._M_h._M_element_count);
  if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
    __asan_report_load8();
  v11 = Player::getEventComp(this->player_);
  std::weak_ptr<PlayerSceneComp>::weak_ptr(
    (std::weak_ptr<PlayerSceneComp> *const)&v15.event_center_.observer_list_map_._M_h._M_element_count,
    (const std::weak_ptr<PlayerSceneComp> *)(p_M_next_resize + 32));
  PlayerEventComp::registerObserver<PlayerSceneComp,SetGameTimeEvent>(
    (PlayerEventComp *const)&v15.event_center_.observer_list_map_._M_h._M_bucket_count,
    (std::weak_ptr<PlayerSceneComp> *)v11,
    (void (*)(PlayerSceneComp *, const SetGameTimeEvent *))&v15.event_center_.observer_list_map_._M_h._M_element_count);
  std::weak_ptr<Observer>::~weak_ptr((std::weak_ptr<Observer> *const)&v15.event_center_.observer_list_map_._M_h._M_bucket_count);
  std::weak_ptr<PlayerSceneComp>::~weak_ptr((std::weak_ptr<PlayerSceneComp> *const)&v15.event_center_.observer_list_map_._M_h._M_element_count);
  if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
    __asan_report_load8();
  v12 = Player::getEventComp(this->player_);
  std::weak_ptr<PlayerSceneComp>::weak_ptr(
    (std::weak_ptr<PlayerSceneComp> *const)&v15.event_center_.observer_list_map_._M_h._M_bucket_count,
    (const std::weak_ptr<PlayerSceneComp> *)(p_M_next_resize + 32));
  PlayerEventComp::registerObserver<PlayerSceneComp,ChestOpenEvent>(
    (PlayerEventComp *const)&v15.event_center_.observer_list_map_._M_h._M_element_count,
    (std::weak_ptr<PlayerSceneComp> *)v12,
    (void (*)(PlayerSceneComp *, const ChestOpenEvent *))&v15.event_center_.observer_list_map_._M_h._M_bucket_count);
  std::weak_ptr<Observer>::~weak_ptr((std::weak_ptr<Observer> *const)&v15.event_center_.observer_list_map_._M_h._M_element_count);
  std::weak_ptr<PlayerSceneComp>::~weak_ptr((std::weak_ptr<PlayerSceneComp> *const)&v15.event_center_.observer_list_map_._M_h._M_bucket_count);
  std::weak_ptr<PlayerSceneComp>::~weak_ptr((std::weak_ptr<PlayerSceneComp> *const)(p_M_next_resize + 32));
  if ( &v15.event_center_.observer_list_map_._M_h._M_rehash_policy._M_next_resize == (std::size_t *)p_M_next_resize )
  {
    *(_QWORD *)((p_M_next_resize >> 3) + 0x7FFF8000) = 0LL;
  }
  else
  {
    *(_QWORD *)p_M_next_resize = 1172321806LL;
    *(_QWORD *)((p_M_next_resize >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
  }
};

// Line 627: range 0000000013E402D6-0000000013E40561
void __cdecl PlayerSceneComp::onAvatarDie(PlayerSceneComp *const this, uint64_t avatar_guid, bool is_cur_use_avatar)
{
  unsigned __int64 v3; // rbx
  __int64 v4; // rax
  unsigned __int64 v5; // r12
  unsigned __int64 v6; // rax
  unsigned __int64 v7; // rdx
  void (__fastcall *v8)(unsigned __int64, Player *, uint64_t, _BOOL8); // r8
  _BOOL8 v9; // rcx
  common::milog::MiLogStream *v10; // r14
  unsigned int val; // [rsp+2Ch] [rbp-94h] BYREF
  common::milog::MiLogStream v13; // [rsp+30h] [rbp-90h] BYREF
  char v14[112]; // [rsp+50h] [rbp-70h] BYREF

  v3 = (unsigned __int64)v14;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_0(64LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "1 32 16 17 cur_world_ptr:628";
  *(_QWORD *)(v3 + 16) = PlayerSceneComp::onAvatarDie;
  v5 = v3 >> 3;
  *(_DWORD *)(v5 + 2147450880) = -235802127;
  *(_DWORD *)(v5 + 2147450884) = -202178560;
  PlayerSceneComp::getCurWorld((const PlayerSceneComp *const)(v3 + 32));
  if ( std::operator!=<World>((const std::shared_ptr<World> *)(v3 + 32), 0LL) )
  {
    v6 = (unsigned __int64)std::__shared_ptr_access<World,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<World,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 32));
    if ( *(_BYTE *)((v6 >> 3) + 0x7FFF8000) )
      v6 = __asan_report_load8();
    v7 = *(_QWORD *)v6 + 56LL;
    if ( *(_BYTE *)((v7 >> 3) + 0x7FFF8000) )
      v6 = __asan_report_load8();
    v8 = *(void (__fastcall **)(unsigned __int64, Player *, uint64_t, _BOOL8))v7;
    v9 = is_cur_use_avatar;
    if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
      v6 = __asan_report_load8();
    v8(v6, this->player_, avatar_guid, v9);
  }
  else
  {
    common::milog::MiLogStream::create(
      &v13,
      &common::milog::MiLogDefault::default_log_obj_,
      1u,
      "./src/scene/player_scene_comp.cpp",
      "onAvatarDie",
      635);
    v10 = common::milog::MiLogStream::operator<<<char [38],(char *[38])0>(&v13, (const char (*)[38])off_2517DD80);
    if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
      __asan_report_load8();
    val = Player::getUid(this->player_);
    common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v10, &val);
    common::milog::MiLogStream::~MiLogStream(&v13);
  }
  std::shared_ptr<World>::~shared_ptr((std::shared_ptr<World> *const)(v3 + 32));
  if ( v14 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
  }
};

// Line 640: range 0000000013E40562-0000000013E407E0
void __cdecl PlayerSceneComp::onDelAvatar(PlayerSceneComp *const this, uint64_t avatar_guid)
{
  unsigned __int64 v2; // rbx
  __int64 v3; // rax
  unsigned __int64 v4; // r12
  unsigned __int64 v5; // rax
  unsigned __int64 v6; // rdx
  void (__fastcall *v7)(unsigned __int64, Player *, uint64_t); // r8
  common::milog::MiLogStream *v8; // r14
  unsigned int val; // [rsp+1Ch] [rbp-94h] BYREF
  common::milog::MiLogStream v10; // [rsp+20h] [rbp-90h] BYREF
  char v11[112]; // [rsp+40h] [rbp-70h] BYREF

  v2 = (unsigned __int64)v11;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_0(64LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "1 32 16 17 cur_world_ptr:641";
  *(_QWORD *)(v2 + 16) = PlayerSceneComp::onDelAvatar;
  v4 = v2 >> 3;
  *(_DWORD *)(v4 + 2147450880) = -235802127;
  *(_DWORD *)(v4 + 2147450884) = -202178560;
  PlayerSceneComp::getCurWorld((const PlayerSceneComp *const)(v2 + 32));
  if ( std::operator!=<World>((const std::shared_ptr<World> *)(v2 + 32), 0LL) )
  {
    v5 = (unsigned __int64)std::__shared_ptr_access<World,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<World,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 32));
    if ( *(_BYTE *)((v5 >> 3) + 0x7FFF8000) )
      v5 = __asan_report_load8();
    v6 = *(_QWORD *)v5 + 64LL;
    if ( *(_BYTE *)((v6 >> 3) + 0x7FFF8000) )
      v5 = __asan_report_load8();
    v7 = *(void (__fastcall **)(unsigned __int64, Player *, uint64_t))v6;
    if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
      v5 = __asan_report_load8();
    v7(v5, this->player_, avatar_guid);
  }
  else
  {
    common::milog::MiLogStream::create(
      &v10,
      &common::milog::MiLogDefault::default_log_obj_,
      1u,
      "./src/scene/player_scene_comp.cpp",
      "onDelAvatar",
      648);
    v8 = common::milog::MiLogStream::operator<<<char [38],(char *[38])0>(&v10, (const char (*)[38])off_2517DD80);
    if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
      __asan_report_load8();
    val = Player::getUid(this->player_);
    common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v8, &val);
    common::milog::MiLogStream::~MiLogStream(&v10);
  }
  std::shared_ptr<World>::~shared_ptr((std::shared_ptr<World> *const)(v2 + 32));
  if ( v11 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
  }
};

// Line 654: range 0000000013E407E2-0000000013E408DC
// local variable allocation has failed, the output may be wrong!
ScenePtr __cdecl PlayerSceneComp::findScene(const PlayerSceneComp *const this, uint32_t scene_id)
{
  ScenePtr result; // rax
  uint32_t v3; // ecx
  common::milog::MiLogStream v4; // [rsp+20h] [rbp-30h] BYREF

  if ( std::operator==<PlayerWorld>((const std::shared_ptr<PlayerWorld> *)(*(_QWORD *)&scene_id + 56LL), 0LL) )
  {
    common::milog::MiLogStream::create(
      &v4,
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/scene/player_scene_comp.cpp",
      "findScene",
      657);
    common::milog::MiLogStream::operator<<<char [32],(char *[32])0>(
      &v4,
      (const char (*)[32])"my_player_world_ptr_ is nullptr");
    common::milog::MiLogStream::~MiLogStream(&v4);
    std::shared_ptr<Scene>::shared_ptr((std::shared_ptr<Scene> *const)this, 0LL);
  }
  else
  {
    v3 = (unsigned int)std::__shared_ptr_access<PlayerWorld,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<PlayerWorld,(__gnu_cxx::_Lock_policy)2,false,false> *const)(*(_QWORD *)&scene_id + 56LL));
    if ( *(_WORD *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
      __asan_report_store16(this, 0LL);
    result = World::findScene((World *const)this, v3);
  }
  result._M_ptr = (std::__shared_ptr<Scene,(__gnu_cxx::_Lock_policy)2>::element_type *)this;
  return result;
};

// Line 665: range 0000000013E408DE-0000000013E40A21
// local variable allocation has failed, the output may be wrong!
ScenePtr __cdecl PlayerSceneComp::getPersonalScene(PlayerSceneComp *const this, uint32_t scene_id)
{
  uint32_t v2; // edx
  ScenePtr result; // rax
  unsigned __int64 v4; // rax
  unsigned __int64 v5; // rdx
  __int64 v6; // rsi
  void (__fastcall *v7)(PlayerSceneComp *const, unsigned __int64, _QWORD); // r8
  uint32_t scene_ida; // [rsp+Ch] [rbp-44h]
  common::milog::MiLogStream v9; // [rsp+20h] [rbp-30h] BYREF

  scene_ida = v2;
  if ( std::operator==<PlayerWorld>((const std::shared_ptr<PlayerWorld> *)(*(_QWORD *)&scene_id + 56LL), 0LL) )
  {
    common::milog::MiLogStream::create(
      &v9,
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/scene/player_scene_comp.cpp",
      "getPersonalScene",
      668);
    common::milog::MiLogStream::operator<<<char [32],(char *[32])0>(
      &v9,
      (const char (*)[32])"my_player_world_ptr_ is nullptr");
    common::milog::MiLogStream::~MiLogStream(&v9);
    std::shared_ptr<Scene>::shared_ptr((std::shared_ptr<Scene> *const)this, 0LL);
  }
  else
  {
    v4 = (unsigned __int64)std::__shared_ptr_access<PlayerWorld,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<PlayerWorld,(__gnu_cxx::_Lock_policy)2,false,false> *const)(*(_QWORD *)&scene_id + 56LL));
    if ( *(_BYTE *)((v4 >> 3) + 0x7FFF8000) )
      v4 = __asan_report_load8();
    v5 = *(_QWORD *)v4 + 80LL;
    v6 = *(unsigned __int8 *)((v5 >> 3) + 0x7FFF8000);
    if ( (_BYTE)v6 )
      v4 = __asan_report_load8();
    v7 = *(void (__fastcall **)(PlayerSceneComp *const, unsigned __int64, _QWORD))v5;
    if ( *(_WORD *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
      v4 = __asan_report_store16(this, v6);
    v7(this, v4, scene_ida);
  }
  result._M_ptr = (std::__shared_ptr<Scene,(__gnu_cxx::_Lock_policy)2>::element_type *)this;
  return result;
};

// Line 676: range 0000000013E40A22-0000000013E40B16
PlayerWorldScenePtr __cdecl PlayerSceneComp::findMainWorldScene(const PlayerSceneComp *const this)
{
  const std::__shared_ptr_access<PlayerWorld,(__gnu_cxx::_Lock_policy)2,false,false> *v1; // rsi
  PlayerWorldScenePtr result; // rax
  common::milog::MiLogStream v3; // [rsp+10h] [rbp-30h] BYREF

  if ( std::operator==<PlayerWorld>((const std::shared_ptr<PlayerWorld> *)&v1[56], 0LL) )
  {
    common::milog::MiLogStream::create(
      &v3,
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/scene/player_scene_comp.cpp",
      "findMainWorldScene",
      679);
    common::milog::MiLogStream::operator<<<char [32],(char *[32])0>(
      &v3,
      (const char (*)[32])"my_player_world_ptr_ is nullptr");
    common::milog::MiLogStream::~MiLogStream(&v3);
    std::shared_ptr<PlayerWorldScene>::shared_ptr((std::shared_ptr<PlayerWorldScene> *const)this, 0LL);
  }
  else
  {
    std::__shared_ptr_access<PlayerWorld,(__gnu_cxx::_Lock_policy)2,false,false>::operator->(v1 + 56);
    if ( *(_WORD *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
      __asan_report_store16(this, 0LL);
    result = PlayerWorld::getMainWorldScene((PlayerWorld *const)this);
  }
  result._M_ptr = (std::__shared_ptr<PlayerWorldScene,(__gnu_cxx::_Lock_policy)2>::element_type *)this;
  return result;
};

// Line 687: range 0000000013E40B18-0000000013E40C0C
PlayerWorldScenePtr __cdecl PlayerSceneComp::getMainWorldScene(PlayerSceneComp *const this)
{
  const std::__shared_ptr_access<PlayerWorld,(__gnu_cxx::_Lock_policy)2,false,false> *v1; // rsi
  PlayerWorldScenePtr result; // rax
  common::milog::MiLogStream v3; // [rsp+10h] [rbp-30h] BYREF

  if ( std::operator==<PlayerWorld>((const std::shared_ptr<PlayerWorld> *)&v1[56], 0LL) )
  {
    common::milog::MiLogStream::create(
      &v3,
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/scene/player_scene_comp.cpp",
      "getMainWorldScene",
      690);
    common::milog::MiLogStream::operator<<<char [32],(char *[32])0>(
      &v3,
      (const char (*)[32])"my_player_world_ptr_ is nullptr");
    common::milog::MiLogStream::~MiLogStream(&v3);
    std::shared_ptr<PlayerWorldScene>::shared_ptr((std::shared_ptr<PlayerWorldScene> *const)this, 0LL);
  }
  else
  {
    std::__shared_ptr_access<PlayerWorld,(__gnu_cxx::_Lock_policy)2,false,false>::operator->(v1 + 56);
    if ( *(_WORD *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
      __asan_report_store16(this, 0LL);
    result = PlayerWorld::getMainWorldScene((PlayerWorld *const)this);
  }
  result._M_ptr = (std::__shared_ptr<PlayerWorldScene,(__gnu_cxx::_Lock_policy)2>::element_type *)this;
  return result;
};

// Line 698: range 0000000013E40C0E-0000000013E40E72
void __cdecl PlayerSceneComp::setCurScene(PlayerSceneComp *const this, ScenePtr *p_scene_ptr)
{
  unsigned __int64 v2; // rbx
  __int64 v3; // rax
  unsigned __int64 v4; // r13
  Scene *v5; // r14
  Player *Player; // rax
  uint32_t Uid; // eax
  Scene *v8; // r14
  Player *v9; // rsi
  std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v10; // rax
  uint32_t SceneId; // edx
  char v12; // al
  char v14[112]; // [rsp+10h] [rbp-70h] BYREF

  v2 = (unsigned __int64)v14;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_0(64LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "1 32 16 17 cur_scene_ptr:699";
  *(_QWORD *)(v2 + 16) = PlayerSceneComp::setCurScene;
  v4 = v2 >> 3;
  *(_DWORD *)(v4 + 2147450880) = -235802127;
  *(_DWORD *)(v4 + 2147450884) = -202178560;
  PlayerSceneComp::getCurScene((const PlayerSceneComp *const)(v2 + 32));
  if ( !std::operator==<Scene,Scene>((const std::shared_ptr<Scene> *)(v2 + 32), p_scene_ptr) )
  {
    if ( std::operator!=<Scene>((const std::shared_ptr<Scene> *)(v2 + 32), 0LL) )
    {
      v5 = std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 32));
      Player = PlayerCompBase::getPlayer(this);
      Uid = Player::getUid(Player);
      Scene::erasePlayerViewMgr(v5, Uid);
      PlayerSceneComp::destroyEntityWhenLeaveScene(this);
    }
    std::weak_ptr<Scene>::operator=<Scene>(&this->cur_scene_wtr_, p_scene_ptr);
    if ( std::operator!=<Scene>(p_scene_ptr, 0LL) )
    {
      v8 = std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false> *const)p_scene_ptr);
      v9 = PlayerCompBase::getPlayer(this);
      Scene::insertPlayerViewMgr(v8, v9);
      v10 = std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false> *const)p_scene_ptr);
      SceneId = Scene::getSceneId(v10);
      v12 = *(_BYTE *)(((unsigned __int64)&this->cur_scene_id_ >> 3) + 0x7FFF8000);
      if ( v12 != 0 && v12 <= 3 )
      {
        LOBYTE(v9) = v12 != 0;
        __asan_report_store4(&this->cur_scene_id_, v9, SceneId);
      }
      this->cur_scene_id_ = SceneId;
    }
    else
    {
      if ( *(_BYTE *)(((unsigned __int64)&this->cur_scene_id_ >> 3) + 0x7FFF8000) != 0
        && *(_BYTE *)(((unsigned __int64)&this->cur_scene_id_ >> 3) + 0x7FFF8000) <= 3 )
      {
        __asan_report_store4(&this->cur_scene_id_, 0LL, (_BYTE)this + 112);
      }
      this->cur_scene_id_ = 0;
    }
  }
  std::shared_ptr<Scene>::~shared_ptr((std::shared_ptr<Scene> *const)(v2 + 32));
  if ( v14 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
  }
};

// Line 725: range 0000000013E40E74-0000000013E40FE3
const SceneProductMap *__fastcall PlayerSceneComp::findSceneProductMap(
        const PlayerSceneComp *const this,
        uint32_t dungeon_id)
{
  unsigned __int64 v2; // rbx
  __int64 v3; // rax
  _DWORD *v4; // r12
  const SceneProductMap *result; // rax
  std::__detail::_Node_iterator_base<std::pair<unsigned int const,std::unordered_map<unsigned int,proto::SceneProductBin> >,false> __y; // [rsp+18h] [rbp-88h] BYREF
  char v7[128]; // [rsp+20h] [rbp-80h] BYREF

  v2 = (unsigned __int64)v7;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_1(96LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "2 48 4 14 dungeon_id:724 64 8 8 iter:727";
  *(_QWORD *)(v2 + 16) = PlayerSceneComp::findSceneProductMap;
  v4 = (_DWORD *)(v2 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = -234556943;
  v4[536862722] = -202116352;
  *(_DWORD *)(v2 + 48) = dungeon_id;
  if ( *(_DWORD *)(v2 + 48) )
  {
    *(std::unordered_map<unsigned int,std::unordered_map<unsigned int,proto::SceneProductBin>>::const_iterator *)(v2 + 64) = std::unordered_map<unsigned int,std::unordered_map<unsigned int,proto::SceneProductBin>>::find(&this->dungeon_product_map_, (const std::unordered_map<unsigned int,std::unordered_map<unsigned int,proto::SceneProductBin>>::key_type *)(v2 + 48));
    __y._M_cur = std::unordered_map<unsigned int,std::unordered_map<unsigned int,proto::SceneProductBin>>::end(&this->dungeon_product_map_)._M_cur;
    if ( std::__detail::operator==<std::pair<unsigned int const,std::unordered_map<unsigned int,proto::SceneProductBin>>,false>(
           (const std::__detail::_Node_iterator_base<std::pair<unsigned int const,std::unordered_map<unsigned int,proto::SceneProductBin> >,false> *)(v2 + 64),
           &__y) )
    {
      result = 0LL;
    }
    else
    {
      result = &std::__detail::_Node_const_iterator<std::pair<unsigned int const,std::unordered_map<unsigned int,proto::SceneProductBin>>,false,false>::operator->((const std::__detail::_Node_const_iterator<std::pair<unsigned int const,std::unordered_map<unsigned int,proto::SceneProductBin> >,false,false> *const)(v2 + 64))->second;
    }
  }
  else
  {
    result = &this->world_product_map_;
  }
  if ( v7 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8008) = 0;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8008) = -168430091;
  }
  return result;
};

// Line 733: range 0000000013E40FE4-0000000013E410C6
SceneProductMap *__fastcall PlayerSceneComp::getSceneProductMap(PlayerSceneComp *const this, uint32_t dungeon_id)
{
  unsigned __int64 v2; // rbx
  __int64 v3; // rax
  unsigned __int64 v4; // r12
  SceneProductMap *result; // rax
  char v6[96]; // [rsp+10h] [rbp-60h] BYREF

  v2 = (unsigned __int64)v6;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_0(64LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "1 32 4 14 dungeon_id:732";
  *(_QWORD *)(v2 + 16) = PlayerSceneComp::getSceneProductMap;
  v4 = v2 >> 3;
  *(_DWORD *)(v4 + 2147450880) = -235802127;
  *(_DWORD *)(v4 + 2147450884) = -202116348;
  *(_DWORD *)(v2 + 32) = dungeon_id;
  if ( *(_DWORD *)(v2 + 32) )
    result = std::unordered_map<unsigned int,std::unordered_map<unsigned int,proto::SceneProductBin>>::operator[](
               &this->dungeon_product_map_,
               (const std::unordered_map<unsigned int,std::unordered_map<unsigned int,proto::SceneProductBin>>::key_type *)(v2 + 32));
  else
    result = &this->world_product_map_;
  if ( v6 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 739: range 0000000013E410C8-0000000013E41321
const proto::GroupProductBin *__fastcall PlayerSceneComp::findGroupProductBin(
        const PlayerSceneComp *const this,
        uint32_t scene_id,
        uint32_t dungeon_id,
        uint32_t group_id)
{
  unsigned __int64 v4; // r13
  __int64 v5; // rax
  _DWORD *v6; // r12
  const proto::GroupProductBin *result; // rax
  const google::protobuf::Map<unsigned int,proto::GroupProductBin> *v8; // rax
  const google::protobuf::Map<unsigned int,proto::GroupProductBin> *v9; // rax
  std::__detail::_Node_iterator_base<std::pair<unsigned int const,proto::SceneProductBin>,false> __y; // [rsp+28h] [rbp-F8h] BYREF
  const SceneProductMap *scene_product_map; // [rsp+30h] [rbp-F0h]
  const proto::SceneProductBin *scene_product_bin; // [rsp+38h] [rbp-E8h]
  google::protobuf::Map<unsigned int,proto::GroupProductBin>::const_iterator b; // [rsp+40h] [rbp-E0h] BYREF
  char v16[192]; // [rsp+60h] [rbp-C0h] BYREF

  v4 = (unsigned __int64)v16;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v5 = __asan_stack_malloc_2(160LL);
    if ( v5 )
      v4 = v5;
  }
  *(_QWORD *)v4 = 1102416563LL;
  *(_QWORD *)(v4 + 8) = "4 32 4 12 scene_id:738 48 4 12 group_id:738 64 8 12 it_scene:742 96 24 12 it_group:745";
  *(_QWORD *)(v4 + 16) = PlayerSceneComp::findGroupProductBin;
  v6 = (_DWORD *)(v4 >> 3);
  v6[536862720] = -235802127;
  v6[536862721] = -234556924;
  v6[536862722] = -218959360;
  v6[536862723] = -218103808;
  v6[536862724] = -202116109;
  *(_DWORD *)(v4 + 32) = scene_id;
  *(_DWORD *)(v4 + 48) = group_id;
  scene_product_map = PlayerSceneComp::findSceneProductMap(this, dungeon_id);
  if ( scene_product_map )
  {
    *(std::unordered_map<unsigned int,proto::SceneProductBin>::const_iterator *)(v4 + 64) = std::unordered_map<unsigned int,proto::SceneProductBin>::find(
                                                                                              scene_product_map,
                                                                                              (const std::unordered_map<unsigned int,proto::SceneProductBin>::key_type *)(v4 + 32));
    __y._M_cur = std::unordered_map<unsigned int,proto::SceneProductBin>::end(scene_product_map)._M_cur;
    if ( std::__detail::operator==<std::pair<unsigned int const,proto::SceneProductBin>,false>(
           (const std::__detail::_Node_iterator_base<std::pair<unsigned int const,proto::SceneProductBin>,false> *)(v4 + 64),
           &__y) )
    {
      result = 0LL;
    }
    else
    {
      scene_product_bin = &std::__detail::_Node_const_iterator<std::pair<unsigned int const,proto::SceneProductBin>,false,false>::operator->((const std::__detail::_Node_const_iterator<std::pair<unsigned int const,proto::SceneProductBin>,false,false> *const)(v4 + 64))->second;
      v8 = proto::SceneProductBin::group_product_map(scene_product_bin);
      google::protobuf::Map<unsigned int,proto::GroupProductBin>::find(
        (google::protobuf::Map<unsigned int,proto::GroupProductBin>::const_iterator *)(v4 + 96),
        v8,
        (const google::protobuf::Map<unsigned int,proto::GroupProductBin>::key_type *)(v4 + 48));
      v9 = proto::SceneProductBin::group_product_map(scene_product_bin);
      google::protobuf::Map<unsigned int,proto::GroupProductBin>::end(&b, v9);
      if ( google::protobuf::operator==(
             (const google::protobuf::Map<unsigned int,proto::GroupProductBin>::const_iterator *)(v4 + 96),
             &b) )
      {
        result = 0LL;
      }
      else
      {
        result = &google::protobuf::Map<unsigned int,proto::GroupProductBin>::const_iterator::operator->((const google::protobuf::Map<unsigned int,proto::GroupProductBin>::const_iterator *const)(v4 + 96))->second;
      }
    }
  }
  else
  {
    result = 0LL;
  }
  if ( v16 == (char *)v4 )
  {
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8008) = 0LL;
    *(_DWORD *)((v4 >> 3) + 0x7FFF8010) = 0;
  }
  else
  {
    *(_QWORD *)v4 = 1172321806LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v4 >> 3) + 0x7FFF8010) = -168430091;
  }
  return result;
};

// Line 751: range 0000000013E41322-0000000013E4148F
proto::GroupProductBin *__fastcall PlayerSceneComp::getGroupProductBin(
        PlayerSceneComp *const this,
        uint32_t scene_id,
        uint32_t dungeon_id,
        uint32_t group_id)
{
  unsigned __int64 v4; // rbx
  __int64 v5; // rax
  _DWORD *v6; // r12
  proto::GroupProductBin *result; // rax
  std::unordered_map<unsigned int,proto::SceneProductBin> *scene_product_map; // [rsp+28h] [rbp-98h]
  std::unordered_map<unsigned int,proto::SceneProductBin>::mapped_type *scene_product_bin; // [rsp+30h] [rbp-90h]
  google::protobuf::Map<unsigned int,proto::GroupProductBin> *group_product_map; // [rsp+38h] [rbp-88h]
  char v13[128]; // [rsp+40h] [rbp-80h] BYREF

  v4 = (unsigned __int64)v13;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v5 = __asan_stack_malloc_1(96LL);
    if ( v5 )
      v4 = v5;
  }
  *(_QWORD *)v4 = 1102416563LL;
  *(_QWORD *)(v4 + 8) = "2 48 4 12 scene_id:750 64 4 12 group_id:750";
  *(_QWORD *)(v4 + 16) = PlayerSceneComp::getGroupProductBin;
  v6 = (_DWORD *)(v4 >> 3);
  v6[536862720] = -235802127;
  v6[536862721] = -234556943;
  v6[536862722] = -202116348;
  *(_DWORD *)(v4 + 48) = scene_id;
  *(_DWORD *)(v4 + 64) = group_id;
  scene_product_map = PlayerSceneComp::getSceneProductMap(this, dungeon_id);
  scene_product_bin = std::unordered_map<unsigned int,proto::SceneProductBin>::operator[](
                        scene_product_map,
                        (const std::unordered_map<unsigned int,proto::SceneProductBin>::key_type *)(v4 + 48));
  group_product_map = proto::SceneProductBin::mutable_group_product_map(scene_product_bin);
  result = google::protobuf::Map<unsigned int,proto::GroupProductBin>::operator[](
             group_product_map,
             (const google::protobuf::Map<unsigned int,proto::GroupProductBin>::key_type *)(v4 + 64));
  if ( v13 == (char *)v4 )
  {
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0LL;
    *(_DWORD *)((v4 >> 3) + 0x7FFF8008) = 0;
  }
  else
  {
    *(_QWORD *)v4 = 1172321806LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v4 >> 3) + 0x7FFF8008) = -168430091;
  }
  return result;
};

// Line 760: range 0000000013E41490-0000000013E41673
bool __cdecl PlayerSceneComp::isInOneOffRecord(
        PlayerSceneComp *const this,
        proto::ProtEntityType type,
        uint32_t scene_id,
        uint32_t dungeon_id,
        uint32_t group_id,
        uint32_t config_id)
{
  unsigned __int64 v6; // rbx
  __int64 v7; // rax
  unsigned __int64 v8; // r12
  __int64 v9; // r13
  const std::string *v10; // rax
  const char *v11; // rax
  bool result; // al
  common::milog::MiLogStream v17; // [rsp+20h] [rbp-80h] BYREF
  char v18[96]; // [rsp+40h] [rbp-60h] BYREF

  v6 = (unsigned __int64)v18;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v7 = __asan_stack_malloc_0(64LL);
    if ( v7 )
      v6 = v7;
  }
  *(_QWORD *)v6 = 1102416563LL;
  *(_QWORD *)(v6 + 8) = "1 32 4 11 version:761";
  *(_QWORD *)(v6 + 16) = PlayerSceneComp::isInOneOffRecord;
  v8 = v6 >> 3;
  *(_DWORD *)(v8 + 2147450880) = -235802127;
  *(_DWORD *)(v8 + 2147450884) = -202116348;
  *(_DWORD *)(v6 + 32) = 0;
  if ( PlayerSceneComp::getOneoffVersion(this, type, scene_id, dungeon_id, group_id, config_id, (uint32_t *)(v6 + 32)) )
  {
    common::milog::MiLogStream::create(
      &v17,
      &common::milog::MiLogDefault::default_log_obj_,
      1u,
      "./src/scene/player_scene_comp.cpp",
      "isInOneOffRecord",
      764);
    v9 = *(unsigned int *)(v6 + 32);
    v10 = proto::ProtEntityType_Name[abi:cxx11](type);
    v11 = (const char *)std::string::c_str(v10);
    common::milog::MiLogStream::operator()(
      &v17,
      "type=%s scene_id=%u dungeon_id=%u group_id=%u config_id=%u version=%u found in oneoff record",
      v11,
      scene_id,
      dungeon_id,
      group_id,
      config_id,
      v9);
    common::milog::MiLogStream::~MiLogStream(&v17);
    result = 1;
  }
  else
  {
    result = 0;
  }
  if ( v18 == (char *)v6 )
  {
    *(_QWORD *)((v6 >> 3) + 0x7FFF8000) = 0LL;
  }
  else
  {
    *(_QWORD *)v6 = 1172321806LL;
    *(_QWORD *)((v6 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 774: range 0000000013E41674-0000000013E420B5
int32_t __fastcall PlayerSceneComp::addOneOffRecord(
        PlayerSceneComp *const this,
        proto::ProtEntityType type,
        uint32_t scene_id,
        uint32_t dungeon_id,
        uint32_t group_id,
        uint32_t config_id,
        uint32_t version)
{
  unsigned __int64 v7; // r12
  __int64 v8; // rax
  _DWORD *v9; // r13
  std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v10; // rax
  BlockDataMgr *BlockDataMgr; // rax
  int32_t result; // eax
  unsigned int *v13; // rax
  __int64 v14; // r15
  unsigned int v15; // r14d
  const std::string *v16; // rax
  const char *v17; // rax
  bool v18; // dl
  std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v19; // rax
  common::milog::MiLogStream *v20; // rax
  std::set<std::pair<unsigned int,unsigned int>>::size_type v21; // rax
  PlayerWidgetComp *WidgetComp; // rax
  std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v23; // rax
  unsigned int *v24; // rax
  __int64 v25; // r15
  unsigned int v26; // r14d
  const std::string *v27; // rax
  const char *v28; // rax
  bool v29; // dl
  common::milog::MiLogStream *v30; // rax
  unsigned int v31; // [rsp+Ch] [rbp-164h]
  unsigned int v32; // [rsp+Ch] [rbp-164h]
  unsigned int v33; // [rsp+10h] [rbp-160h]
  unsigned int v34; // [rsp+10h] [rbp-160h]
  const MonsterScriptConfig *monster_config_ptr; // [rsp+38h] [rbp-138h]
  proto::GroupProductBin *group_product_bin_0; // [rsp+40h] [rbp-130h]
  google::protobuf::Map<unsigned int,unsigned int> *monster_one_off_map; // [rsp+48h] [rbp-128h]
  unsigned int *old_version_0; // [rsp+50h] [rbp-120h]
  const GadgetScriptConfig *gadget_config_ptr; // [rsp+58h] [rbp-118h]
  proto::GroupProductBin *group_product_bin; // [rsp+60h] [rbp-110h]
  google::protobuf::Map<unsigned int,unsigned int> *gadget_one_off_map; // [rsp+68h] [rbp-108h]
  unsigned int *old_version; // [rsp+70h] [rbp-100h]
  const SceneScriptConfig *script_config_ptr; // [rsp+78h] [rbp-F8h]
  std::set<std::pair<unsigned int,unsigned int>> *group_config_set; // [rsp+80h] [rbp-F0h]
  std::pair<unsigned int,unsigned int> __x; // [rsp+88h] [rbp-E8h] BYREF
  std::shared_ptr<Config> v50; // [rsp+90h] [rbp-E0h] BYREF
  common::milog::MiLogStream v51; // [rsp+A0h] [rbp-D0h] BYREF
  char v52[176]; // [rsp+C0h] [rbp-B0h] BYREF

  v7 = (unsigned __int64)v52;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v8 = __asan_stack_malloc_1(128LL);
    if ( v8 )
      v7 = v8;
  }
  *(_QWORD *)v7 = 1102416563LL;
  *(_QWORD *)(v7 + 8) = "5 32 4 21 gather_point_type:802 48 4 8 type:773 64 4 12 scene_id:773 80 4 12 group_id:773 96 4 13 config_id:773";
  *(_QWORD *)(v7 + 16) = PlayerSceneComp::addOneOffRecord;
  v9 = (_DWORD *)(v7 >> 3);
  v9[536862720] = -235802127;
  v9[536862721] = -234556924;
  v9[536862722] = -234556924;
  v9[536862723] = -202116348;
  *(_DWORD *)(v7 + 48) = type;
  *(_DWORD *)(v7 + 64) = scene_id;
  *(_DWORD *)(v7 + 80) = group_id;
  *(_DWORD *)(v7 + 96) = config_id;
  if ( *(_DWORD *)(v7 + 48) == 4 )
  {
    ServiceBox::findService<GameserverService>();
    GameserverService::getConfig((GameserverService *const)&v50);
    v10 = std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false> *const)&v50);
    gadget_config_ptr = LuaConfigMgr::findGadgetScriptConfig(
                          &v10->design_config.lua_config_mgr,
                          *(_DWORD *)(v7 + 80),
                          *(_DWORD *)(v7 + 96));
    std::shared_ptr<Config>::~shared_ptr(&v50);
    if ( gadget_config_ptr )
    {
      if ( *(_BYTE *)(((unsigned __int64)&gadget_config_ptr->is_block_oneoff >> 3) + 0x7FFF8000) != 0
        && (((unsigned __int8)gadget_config_ptr + 75) & 7) >= *(_BYTE *)(((unsigned __int64)&gadget_config_ptr->is_block_oneoff >> 3)
                                                                       + 0x7FFF8000) )
      {
        __asan_report_load1(&gadget_config_ptr->is_block_oneoff);
      }
      if ( gadget_config_ptr->is_block_oneoff )
      {
        if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
          __asan_report_load8();
LABEL_11:
        BlockDataMgr = Player::getBlockDataMgr(this->player_);
        result = BlockDataMgr::addOneOffRecord(
                   BlockDataMgr,
                   *(proto::ProtEntityType *)(v7 + 48),
                   *(_DWORD *)(v7 + 80),
                   *(_DWORD *)(v7 + 96),
                   version);
        goto LABEL_41;
      }
    }
    group_product_bin = PlayerSceneComp::getGroupProductBin(
                          this,
                          *(_DWORD *)(v7 + 64),
                          dungeon_id,
                          *(_DWORD *)(v7 + 80));
    gadget_one_off_map = proto::GroupProductBin::mutable_gadget_one_off_map(group_product_bin);
    v13 = google::protobuf::Map<unsigned int,unsigned int>::operator[](
            gadget_one_off_map,
            (const google::protobuf::Map<unsigned int,unsigned int>::key_type *)(v7 + 96));
    old_version = v13;
    if ( *(_BYTE *)(((unsigned __int64)v13 >> 3) + 0x7FFF8000) != 0
      && (char)(((unsigned __int8)v13 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)v13 >> 3) + 0x7FFF8000) )
    {
      __asan_report_load4(v13);
    }
    if ( version < *old_version )
    {
      common::milog::MiLogStream::create(
        &v51,
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/scene/player_scene_comp.cpp",
        "addOneOffRecord",
        789);
      v33 = *old_version;
      v14 = *(unsigned int *)(v7 + 96);
      v31 = *(_DWORD *)(v7 + 80);
      v15 = *(_DWORD *)(v7 + 64);
      v16 = proto::ProtEntityType_Name[abi:cxx11]((proto::ProtEntityType)*(_DWORD *)(v7 + 48));
      v17 = (const char *)std::string::c_str(v16);
      common::milog::MiLogStream::operator()(
        &v51,
        "type=%s scene_id=%u dungeon_id=%u group_id=%u config_id=%u version=%u can NOT be smaller than current version=%u",
        v17,
        v15,
        dungeon_id,
        v31,
        v14,
        version,
        v33);
      common::milog::MiLogStream::~MiLogStream(&v51);
      result = -1;
      goto LABEL_41;
    }
    v18 = *(_BYTE *)(((unsigned __int64)old_version >> 3) + 0x7FFF8000) != 0
       && (char)(((unsigned __int8)old_version & 7) + 3) >= *(_BYTE *)(((unsigned __int64)old_version >> 3) + 0x7FFF8000);
    if ( v18 )
      __asan_report_store4(old_version, ((unsigned __int8)old_version & 7u) + 3, v18);
    *old_version = version;
    ServiceBox::findService<GameserverService>();
    GameserverService::getConfig((GameserverService *const)&v50);
    v19 = std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false> *const)&v50);
    script_config_ptr = LuaConfigMgr::findSceneScriptConfig(&v19->design_config.lua_config_mgr, *(_DWORD *)(v7 + 64));
    std::shared_ptr<Config>::~shared_ptr(&v50);
    if ( script_config_ptr )
    {
      *(_DWORD *)(v7 + 32) = 0;
      if ( SceneScriptConfig::queryOneoffGatherPointTypeByGroupConfigId(
             script_config_ptr,
             *(_DWORD *)(v7 + 80),
             *(_DWORD *)(v7 + 96),
             (uint32_t *)(v7 + 32)) )
      {
        group_config_set = std::unordered_map<unsigned int,std::set<std::pair<unsigned int,unsigned int>>>::operator[](
                             &this->oneoff_gather_point_type_to_group_configs_map_,
                             (const std::unordered_map<unsigned int,std::set<std::pair<unsigned int,unsigned int>>>::key_type *)(v7 + 32));
        std::pair<unsigned int,unsigned int>::pair<unsigned int &,unsigned int &,true>(
          &__x,
          (unsigned int *)(v7 + 80),
          (unsigned int *)(v7 + 96));
        std::set<std::pair<unsigned int,unsigned int>>::insert(group_config_set, &__x);
        common::milog::MiLogStream::create(
          &v51,
          &common::milog::MiLogDefault::default_log_obj_,
          1u,
          "./src/scene/player_scene_comp.cpp",
          "addOneOffRecord",
          807);
        v21 = std::set<std::pair<unsigned int,unsigned int>>::size(group_config_set);
        common::milog::MiLogStream::operator()(
          &v51,
          "config_id=%u group_id=%u ==> @point_type=%u of size=%lu",
          *(unsigned int *)(v7 + 96),
          *(unsigned int *)(v7 + 80),
          *(unsigned int *)(v7 + 32),
          v21);
        common::milog::MiLogStream::~MiLogStream(&v51);
        if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
          __asan_report_load8();
        WidgetComp = Player::getWidgetComp(this->player_);
        PlayerWidgetComp::onOneoffGatherCollected(
          WidgetComp,
          *(_DWORD *)(v7 + 80),
          *(_DWORD *)(v7 + 96),
          *(_DWORD *)(v7 + 32));
      }
    }
    else
    {
      common::milog::MiLogStream::create(
        &v51,
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/scene/player_scene_comp.cpp",
        "addOneOffRecord",
        798);
      v20 = common::milog::MiLogStream::operator<<<char [39],(char *[39])0>(
              &v51,
              (const char (*)[39])"findSceneScriptConfig fails, scene_id:");
      common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v20, (const unsigned int *)(v7 + 64));
      common::milog::MiLogStream::~MiLogStream(&v51);
    }
  }
  else
  {
    if ( *(_DWORD *)(v7 + 48) != 2 )
    {
      common::milog::MiLogStream::create(
        &v51,
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/scene/player_scene_comp.cpp",
        "addOneOffRecord",
        836);
      v30 = common::milog::MiLogStream::operator<<<char [40],(char *[40])0>(
              &v51,
              (const char (*)[40])"OneOffRecord not contains entity type: ");
      common::milog::MiLogStream::operator<<<proto::ProtEntityType,(proto::ProtEntityType*)0>(
        v30,
        (const proto::ProtEntityType *)(v7 + 48));
      common::milog::MiLogStream::~MiLogStream(&v51);
      result = -1;
      goto LABEL_41;
    }
    ServiceBox::findService<GameserverService>();
    GameserverService::getConfig((GameserverService *const)&v50);
    v23 = std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false> *const)&v50);
    monster_config_ptr = LuaConfigMgr::findMonsterScriptConfig(
                           &v23->design_config.lua_config_mgr,
                           *(_DWORD *)(v7 + 80),
                           *(_DWORD *)(v7 + 96));
    std::shared_ptr<Config>::~shared_ptr(&v50);
    if ( monster_config_ptr )
    {
      if ( *(_BYTE *)(((unsigned __int64)&monster_config_ptr->is_block_oneoff >> 3) + 0x7FFF8000) != 0
        && (((unsigned __int8)monster_config_ptr + 98) & 7) >= *(_BYTE *)(((unsigned __int64)&monster_config_ptr->is_block_oneoff >> 3)
                                                                        + 0x7FFF8000) )
      {
        __asan_report_load1(&monster_config_ptr->is_block_oneoff);
      }
      if ( monster_config_ptr->is_block_oneoff )
      {
        if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
          __asan_report_load8();
        goto LABEL_11;
      }
    }
    group_product_bin_0 = PlayerSceneComp::getGroupProductBin(
                            this,
                            *(_DWORD *)(v7 + 64),
                            dungeon_id,
                            *(_DWORD *)(v7 + 80));
    monster_one_off_map = proto::GroupProductBin::mutable_monster_one_off_map(group_product_bin_0);
    v24 = google::protobuf::Map<unsigned int,unsigned int>::operator[](
            monster_one_off_map,
            (const google::protobuf::Map<unsigned int,unsigned int>::key_type *)(v7 + 96));
    old_version_0 = v24;
    if ( *(_BYTE *)(((unsigned __int64)v24 >> 3) + 0x7FFF8000) != 0
      && (char)(((unsigned __int8)v24 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)v24 >> 3) + 0x7FFF8000) )
    {
      __asan_report_load4(v24);
    }
    if ( version < *old_version_0 )
    {
      common::milog::MiLogStream::create(
        &v51,
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/scene/player_scene_comp.cpp",
        "addOneOffRecord",
        827);
      v34 = *old_version_0;
      v25 = *(unsigned int *)(v7 + 96);
      v32 = *(_DWORD *)(v7 + 80);
      v26 = *(_DWORD *)(v7 + 64);
      v27 = proto::ProtEntityType_Name[abi:cxx11]((proto::ProtEntityType)*(_DWORD *)(v7 + 48));
      v28 = (const char *)std::string::c_str(v27);
      common::milog::MiLogStream::operator()(
        &v51,
        "type=%s scene_id=%u dungeon_id=%u group_id=%u config_id=%u version=%u can NOT be smaller than current version=%u",
        v28,
        v26,
        dungeon_id,
        v32,
        v25,
        version,
        v34);
      common::milog::MiLogStream::~MiLogStream(&v51);
      result = -1;
      goto LABEL_41;
    }
    v29 = *(_BYTE *)(((unsigned __int64)old_version_0 >> 3) + 0x7FFF8000) != 0
       && (char)(((unsigned __int8)old_version_0 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)old_version_0 >> 3)
                                                                       + 0x7FFF8000);
    if ( v29 )
      __asan_report_store4(old_version_0, ((unsigned __int8)old_version_0 & 7u) + 3, v29);
    *old_version_0 = version;
  }
  result = 0;
LABEL_41:
  if ( v52 == (char *)v7 )
  {
    *(_QWORD *)((v7 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v7 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v7 = 1172321806LL;
    *(_QWORD *)((v7 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v7 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 844: range 0000000013E420B6-0000000013E42BC2
std::map<unsigned int,unsigned int> *__fastcall PlayerSceneComp::getOneOffRecord(
        std::map<unsigned int,unsigned int> *retstr,
        PlayerSceneComp *const this,
        proto::ProtEntityType type,
        uint32_t scene_id,
        uint32_t dungeon_id,
        uint32_t group_id)
{
  unsigned __int64 v6; // rbx
  __int64 v7; // rax
  unsigned __int64 v8; // r12
  BlockDataMgr *BlockDataMgr; // rax
  std::map<unsigned int,unsigned int>::mapped_type *v10; // rax
  unsigned int *v11; // rdx
  unsigned int v12; // ecx
  std::map<unsigned int,unsigned int>::mapped_type *v13; // rax
  unsigned int *v14; // rdx
  unsigned int second; // r13d
  google::protobuf::Map<unsigned int,unsigned int>::const_reference v16; // rsi
  std::map<unsigned int,unsigned int>::mapped_type *v17; // rax
  unsigned int *v18; // rdx
  char v19; // cl
  std::map<unsigned int,unsigned int>::mapped_type *v20; // rax
  unsigned int *v21; // rdx
  unsigned int v22; // ecx
  std::map<unsigned int,unsigned int>::mapped_type *v23; // rax
  unsigned int *v24; // rdx
  unsigned int v25; // r13d
  google::protobuf::Map<unsigned int,unsigned int>::const_reference v26; // rsi
  std::map<unsigned int,unsigned int>::mapped_type *v27; // rax
  unsigned int *v28; // rdx
  char v29; // cl
  std::map<unsigned int,unsigned int>::mapped_type *v30; // rax
  unsigned int *v31; // rdx
  unsigned int v32; // ecx
  std::map<unsigned int,unsigned int>::mapped_type *v33; // rax
  unsigned int *v34; // rdx
  unsigned int v35; // r13d
  google::protobuf::Map<unsigned int,unsigned int>::const_reference v36; // rsi
  std::map<unsigned int,unsigned int>::mapped_type *v37; // rax
  unsigned int *v38; // rdx
  char v39; // cl
  std::map<unsigned int,unsigned int>::mapped_type *v40; // rax
  unsigned int *v41; // rdx
  unsigned int v42; // ecx
  std::map<unsigned int,unsigned int>::mapped_type *v43; // rax
  unsigned int *v44; // rdx
  unsigned int v45; // r13d
  google::protobuf::Map<unsigned int,unsigned int>::const_reference v46; // rsi
  std::map<unsigned int,unsigned int>::mapped_type *v47; // rax
  unsigned int *v48; // rdx
  char v49; // cl
  common::milog::MiLogStream *v50; // rax
  const proto::GroupProductBin *group_product_bin; // [rsp+20h] [rbp-110h]
  const proto::GroupProductBin *block_product_bin_ptr; // [rsp+28h] [rbp-108h]
  const google::protobuf::Map<unsigned int,unsigned int> *__for_range_1; // [rsp+30h] [rbp-100h]
  google::protobuf::Map<unsigned int,unsigned int>::const_reference p_config_id_1; // [rsp+38h] [rbp-F8h]
  const google::protobuf::Map<unsigned int,unsigned int> *__for_range_2; // [rsp+40h] [rbp-F0h]
  google::protobuf::Map<unsigned int,unsigned int>::const_reference p_config_id_2; // [rsp+48h] [rbp-E8h]
  const google::protobuf::Map<unsigned int,unsigned int> *__for_range; // [rsp+50h] [rbp-E0h]
  google::protobuf::Map<unsigned int,unsigned int>::const_reference p_config_id; // [rsp+58h] [rbp-D8h]
  const google::protobuf::Map<unsigned int,unsigned int> *__for_range_0; // [rsp+60h] [rbp-D0h]
  google::protobuf::Map<unsigned int,unsigned int>::const_reference p_config_id_0; // [rsp+68h] [rbp-C8h]
  google::protobuf::Map<unsigned int,unsigned int>::const_iterator __for_begin; // [rsp+70h] [rbp-C0h] BYREF
  google::protobuf::Map<unsigned int,unsigned int>::const_iterator __for_end; // [rsp+90h] [rbp-A0h] BYREF
  common::milog::MiLogStream v68; // [rsp+B0h] [rbp-80h] BYREF
  char v69[96]; // [rsp+D0h] [rbp-60h] BYREF

  v6 = (unsigned __int64)v69;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v7 = __asan_stack_malloc_0(64LL);
    if ( v7 )
      v6 = v7;
  }
  *(_QWORD *)v6 = 1102416563LL;
  *(_QWORD *)(v6 + 8) = "1 32 4 8 type:843";
  *(_QWORD *)(v6 + 16) = PlayerSceneComp::getOneOffRecord;
  v8 = v6 >> 3;
  *(_DWORD *)(v8 + 2147450880) = -235802127;
  *(_DWORD *)(v8 + 2147450884) = -202116348;
  *(_DWORD *)(v6 + 32) = type;
  std::map<unsigned int,unsigned int>::map(retstr);
  group_product_bin = PlayerSceneComp::findGroupProductBin(this, scene_id, dungeon_id, group_id);
  if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
    __asan_report_load8();
  BlockDataMgr = Player::getBlockDataMgr(this->player_);
  block_product_bin_ptr = BlockDataMgr::findGroupProductBin(BlockDataMgr, group_id);
  if ( *(_DWORD *)(v6 + 32) == 4 )
  {
    if ( group_product_bin )
    {
      __for_range = proto::GroupProductBin::gadget_one_off_map(group_product_bin);
      google::protobuf::Map<unsigned int,unsigned int>::begin(&__for_begin, __for_range);
      google::protobuf::Map<unsigned int,unsigned int>::end(&__for_end, __for_range);
      while ( google::protobuf::operator!=(&__for_begin, &__for_end) )
      {
        p_config_id = google::protobuf::Map<unsigned int,unsigned int>::const_iterator::operator*(&__for_begin);
        v10 = std::map<unsigned int,unsigned int>::operator[](
                retstr,
                (const std::map<unsigned int,unsigned int>::key_type *)p_config_id);
        v11 = v10;
        if ( *(_BYTE *)(((unsigned __int64)v10 >> 3) + 0x7FFF8000) != 0
          && (char)(((unsigned __int8)v10 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)v10 >> 3) + 0x7FFF8000) )
        {
          __asan_report_load4(v10);
        }
        v12 = *v11;
        if ( *(_BYTE *)(((unsigned __int64)&p_config_id->second >> 3) + 0x7FFF8000) != 0
          && (char)((((_BYTE)p_config_id + 4) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&p_config_id->second >> 3)
                                                                    + 0x7FFF8000) )
        {
          __asan_report_load4(&p_config_id->second);
        }
        if ( v12 < p_config_id->second )
        {
          if ( *(_BYTE *)(((unsigned __int64)&p_config_id->second >> 3) + 0x7FFF8000) != 0
            && (char)((((_BYTE)p_config_id + 4) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&p_config_id->second >> 3)
                                                                      + 0x7FFF8000) )
          {
            __asan_report_load4(&p_config_id->second);
          }
          second = p_config_id->second;
        }
        else
        {
          v13 = std::map<unsigned int,unsigned int>::operator[](
                  retstr,
                  (const std::map<unsigned int,unsigned int>::key_type *)p_config_id);
          v14 = v13;
          if ( *(_BYTE *)(((unsigned __int64)v13 >> 3) + 0x7FFF8000) != 0
            && (char)(((unsigned __int8)v13 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)v13 >> 3) + 0x7FFF8000) )
          {
            __asan_report_load4(v13);
          }
          second = *v14;
        }
        v16 = p_config_id;
        v17 = std::map<unsigned int,unsigned int>::operator[](
                retstr,
                (const std::map<unsigned int,unsigned int>::key_type *)p_config_id);
        v18 = v17;
        v19 = *(_BYTE *)(((unsigned __int64)v17 >> 3) + 0x7FFF8000);
        if ( v19 != 0 && (char)(((unsigned __int8)v17 & 7) + 3) >= v19 )
        {
          LOBYTE(v16) = v19 != 0;
          __asan_report_store4(v17, v16, (_BYTE)v17);
        }
        *v18 = second;
        google::protobuf::Map<unsigned int,unsigned int>::const_iterator::operator++(&__for_begin);
      }
    }
    if ( block_product_bin_ptr )
    {
      __for_range_0 = proto::GroupProductBin::gadget_one_off_map(block_product_bin_ptr);
      google::protobuf::Map<unsigned int,unsigned int>::begin(&__for_begin, __for_range_0);
      google::protobuf::Map<unsigned int,unsigned int>::end(&__for_end, __for_range_0);
      while ( google::protobuf::operator!=(&__for_begin, &__for_end) )
      {
        p_config_id_0 = google::protobuf::Map<unsigned int,unsigned int>::const_iterator::operator*(&__for_begin);
        v20 = std::map<unsigned int,unsigned int>::operator[](
                retstr,
                (const std::map<unsigned int,unsigned int>::key_type *)p_config_id_0);
        v21 = v20;
        if ( *(_BYTE *)(((unsigned __int64)v20 >> 3) + 0x7FFF8000) != 0
          && (char)(((unsigned __int8)v20 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)v20 >> 3) + 0x7FFF8000) )
        {
          __asan_report_load4(v20);
        }
        v22 = *v21;
        if ( *(_BYTE *)(((unsigned __int64)&p_config_id_0->second >> 3) + 0x7FFF8000) != 0
          && (char)((((_BYTE)p_config_id_0 + 4) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&p_config_id_0->second >> 3)
                                                                      + 0x7FFF8000) )
        {
          __asan_report_load4(&p_config_id_0->second);
        }
        if ( v22 < p_config_id_0->second )
        {
          if ( *(_BYTE *)(((unsigned __int64)&p_config_id_0->second >> 3) + 0x7FFF8000) != 0
            && (char)((((_BYTE)p_config_id_0 + 4) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&p_config_id_0->second >> 3)
                                                                        + 0x7FFF8000) )
          {
            __asan_report_load4(&p_config_id_0->second);
          }
          v25 = p_config_id_0->second;
        }
        else
        {
          v23 = std::map<unsigned int,unsigned int>::operator[](
                  retstr,
                  (const std::map<unsigned int,unsigned int>::key_type *)p_config_id_0);
          v24 = v23;
          if ( *(_BYTE *)(((unsigned __int64)v23 >> 3) + 0x7FFF8000) != 0
            && (char)(((unsigned __int8)v23 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)v23 >> 3) + 0x7FFF8000) )
          {
            __asan_report_load4(v23);
          }
          v25 = *v24;
        }
        v26 = p_config_id_0;
        v27 = std::map<unsigned int,unsigned int>::operator[](
                retstr,
                (const std::map<unsigned int,unsigned int>::key_type *)p_config_id_0);
        v28 = v27;
        v29 = *(_BYTE *)(((unsigned __int64)v27 >> 3) + 0x7FFF8000);
        if ( v29 != 0 && (char)(((unsigned __int8)v27 & 7) + 3) >= v29 )
        {
          LOBYTE(v26) = v29 != 0;
          __asan_report_store4(v27, v26, (_BYTE)v27);
        }
        *v28 = v25;
        google::protobuf::Map<unsigned int,unsigned int>::const_iterator::operator++(&__for_begin);
      }
    }
  }
  else if ( *(_DWORD *)(v6 + 32) == 2 )
  {
    if ( group_product_bin )
    {
      __for_range_1 = proto::GroupProductBin::monster_one_off_map(group_product_bin);
      google::protobuf::Map<unsigned int,unsigned int>::begin(&__for_begin, __for_range_1);
      google::protobuf::Map<unsigned int,unsigned int>::end(&__for_end, __for_range_1);
      while ( google::protobuf::operator!=(&__for_begin, &__for_end) )
      {
        p_config_id_1 = google::protobuf::Map<unsigned int,unsigned int>::const_iterator::operator*(&__for_begin);
        v30 = std::map<unsigned int,unsigned int>::operator[](
                retstr,
                (const std::map<unsigned int,unsigned int>::key_type *)p_config_id_1);
        v31 = v30;
        if ( *(_BYTE *)(((unsigned __int64)v30 >> 3) + 0x7FFF8000) != 0
          && (char)(((unsigned __int8)v30 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)v30 >> 3) + 0x7FFF8000) )
        {
          __asan_report_load4(v30);
        }
        v32 = *v31;
        if ( *(_BYTE *)(((unsigned __int64)&p_config_id_1->second >> 3) + 0x7FFF8000) != 0
          && (char)((((_BYTE)p_config_id_1 + 4) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&p_config_id_1->second >> 3)
                                                                      + 0x7FFF8000) )
        {
          __asan_report_load4(&p_config_id_1->second);
        }
        if ( v32 < p_config_id_1->second )
        {
          if ( *(_BYTE *)(((unsigned __int64)&p_config_id_1->second >> 3) + 0x7FFF8000) != 0
            && (char)((((_BYTE)p_config_id_1 + 4) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&p_config_id_1->second >> 3)
                                                                        + 0x7FFF8000) )
          {
            __asan_report_load4(&p_config_id_1->second);
          }
          v35 = p_config_id_1->second;
        }
        else
        {
          v33 = std::map<unsigned int,unsigned int>::operator[](
                  retstr,
                  (const std::map<unsigned int,unsigned int>::key_type *)p_config_id_1);
          v34 = v33;
          if ( *(_BYTE *)(((unsigned __int64)v33 >> 3) + 0x7FFF8000) != 0
            && (char)(((unsigned __int8)v33 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)v33 >> 3) + 0x7FFF8000) )
          {
            __asan_report_load4(v33);
          }
          v35 = *v34;
        }
        v36 = p_config_id_1;
        v37 = std::map<unsigned int,unsigned int>::operator[](
                retstr,
                (const std::map<unsigned int,unsigned int>::key_type *)p_config_id_1);
        v38 = v37;
        v39 = *(_BYTE *)(((unsigned __int64)v37 >> 3) + 0x7FFF8000);
        if ( v39 != 0 && (char)(((unsigned __int8)v37 & 7) + 3) >= v39 )
        {
          LOBYTE(v36) = v39 != 0;
          __asan_report_store4(v37, v36, (_BYTE)v37);
        }
        *v38 = v35;
        google::protobuf::Map<unsigned int,unsigned int>::const_iterator::operator++(&__for_begin);
      }
    }
    if ( block_product_bin_ptr )
    {
      __for_range_2 = proto::GroupProductBin::monster_one_off_map(block_product_bin_ptr);
      google::protobuf::Map<unsigned int,unsigned int>::begin(&__for_begin, __for_range_2);
      google::protobuf::Map<unsigned int,unsigned int>::end(&__for_end, __for_range_2);
      while ( google::protobuf::operator!=(&__for_begin, &__for_end) )
      {
        p_config_id_2 = google::protobuf::Map<unsigned int,unsigned int>::const_iterator::operator*(&__for_begin);
        v40 = std::map<unsigned int,unsigned int>::operator[](
                retstr,
                (const std::map<unsigned int,unsigned int>::key_type *)p_config_id_2);
        v41 = v40;
        if ( *(_BYTE *)(((unsigned __int64)v40 >> 3) + 0x7FFF8000) != 0
          && (char)(((unsigned __int8)v40 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)v40 >> 3) + 0x7FFF8000) )
        {
          __asan_report_load4(v40);
        }
        v42 = *v41;
        if ( *(_BYTE *)(((unsigned __int64)&p_config_id_2->second >> 3) + 0x7FFF8000) != 0
          && (char)((((_BYTE)p_config_id_2 + 4) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&p_config_id_2->second >> 3)
                                                                      + 0x7FFF8000) )
        {
          __asan_report_load4(&p_config_id_2->second);
        }
        if ( v42 < p_config_id_2->second )
        {
          if ( *(_BYTE *)(((unsigned __int64)&p_config_id_2->second >> 3) + 0x7FFF8000) != 0
            && (char)((((_BYTE)p_config_id_2 + 4) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&p_config_id_2->second >> 3)
                                                                        + 0x7FFF8000) )
          {
            __asan_report_load4(&p_config_id_2->second);
          }
          v45 = p_config_id_2->second;
        }
        else
        {
          v43 = std::map<unsigned int,unsigned int>::operator[](
                  retstr,
                  (const std::map<unsigned int,unsigned int>::key_type *)p_config_id_2);
          v44 = v43;
          if ( *(_BYTE *)(((unsigned __int64)v43 >> 3) + 0x7FFF8000) != 0
            && (char)(((unsigned __int8)v43 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)v43 >> 3) + 0x7FFF8000) )
          {
            __asan_report_load4(v43);
          }
          v45 = *v44;
        }
        v46 = p_config_id_2;
        v47 = std::map<unsigned int,unsigned int>::operator[](
                retstr,
                (const std::map<unsigned int,unsigned int>::key_type *)p_config_id_2);
        v48 = v47;
        v49 = *(_BYTE *)(((unsigned __int64)v47 >> 3) + 0x7FFF8000);
        if ( v49 != 0 && (char)(((unsigned __int8)v47 & 7) + 3) >= v49 )
        {
          LOBYTE(v46) = v49 != 0;
          __asan_report_store4(v47, v46, (_BYTE)v47);
        }
        *v48 = v45;
        google::protobuf::Map<unsigned int,unsigned int>::const_iterator::operator++(&__for_begin);
      }
    }
  }
  else
  {
    common::milog::MiLogStream::create(
      &v68,
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/scene/player_scene_comp.cpp",
      "getOneOffRecord",
      887);
    v50 = common::milog::MiLogStream::operator<<<char [40],(char *[40])0>(
            &v68,
            (const char (*)[40])"OneOffRecord not contains entity type: ");
    common::milog::MiLogStream::operator<<<proto::ProtEntityType,(proto::ProtEntityType*)0>(
      v50,
      (const proto::ProtEntityType *)(v6 + 32));
    common::milog::MiLogStream::~MiLogStream(&v68);
  }
  if ( v69 == (char *)v6 )
  {
    *(_QWORD *)((v6 >> 3) + 0x7FFF8000) = 0LL;
  }
  else
  {
    *(_QWORD *)v6 = 1172321806LL;
    *(_QWORD *)((v6 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return retstr;
};

// Line 894: range 0000000013E42BC4-0000000013E42EA3
void __fastcall PlayerSceneComp::delOneOffRecordByMuip(
        PlayerSceneComp *const this,
        proto::ProtEntityType type,
        uint32_t scene_id,
        uint32_t dungeon_id,
        uint32_t group_id,
        uint32_t config_id)
{
  unsigned __int64 v6; // rbx
  __int64 v7; // rax
  unsigned __int64 v8; // r13
  BlockDataMgr *BlockDataMgr; // rax
  proto::GroupProductBin *group_product_bin; // [rsp+28h] [rbp-98h]
  google::protobuf::Map<unsigned int,unsigned int> *one_off_map_0; // [rsp+30h] [rbp-90h]
  google::protobuf::Map<unsigned int,unsigned int> *one_off_map; // [rsp+38h] [rbp-88h]
  common::milog::MiLogStream v17; // [rsp+40h] [rbp-80h] BYREF
  char v18[96]; // [rsp+60h] [rbp-60h] BYREF

  v6 = (unsigned __int64)v18;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v7 = __asan_stack_malloc_0(64LL);
    if ( v7 )
      v6 = v7;
  }
  *(_QWORD *)v6 = 1102416563LL;
  *(_QWORD *)(v6 + 8) = "1 32 4 13 config_id:893";
  *(_QWORD *)(v6 + 16) = PlayerSceneComp::delOneOffRecordByMuip;
  v8 = v6 >> 3;
  *(_DWORD *)(v8 + 2147450880) = -235802127;
  *(_DWORD *)(v8 + 2147450884) = -202116348;
  *(_DWORD *)(v6 + 32) = config_id;
  group_product_bin = PlayerSceneComp::getGroupProductBin(this, scene_id, dungeon_id, group_id);
  if ( type == PROT_ENTITY_GADGET )
  {
    one_off_map = proto::GroupProductBin::mutable_gadget_one_off_map(group_product_bin);
    google::protobuf::Map<unsigned int,unsigned int>::erase(
      one_off_map,
      (const google::protobuf::Map<unsigned int,unsigned int>::key_type *)(v6 + 32));
  }
  else if ( type == PROT_ENTITY_MONSTER )
  {
    one_off_map_0 = proto::GroupProductBin::mutable_monster_one_off_map(group_product_bin);
    google::protobuf::Map<unsigned int,unsigned int>::erase(
      one_off_map_0,
      (const google::protobuf::Map<unsigned int,unsigned int>::key_type *)(v6 + 32));
  }
  else
  {
    common::milog::MiLogStream::create(
      &v17,
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/scene/player_scene_comp.cpp",
      "delOneOffRecordByMuip",
      908);
    common::milog::MiLogStream::operator()(&v17, "invalid type %u", (unsigned int)type);
    common::milog::MiLogStream::~MiLogStream(&v17);
  }
  if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
    __asan_report_load8();
  BlockDataMgr = Player::getBlockDataMgr(this->player_);
  BlockDataMgr::delOneOffRecordByMuip(BlockDataMgr, type, group_id, *(_DWORD *)(v6 + 32));
  common::milog::MiLogStream::create(
    &v17,
    &common::milog::MiLogDefault::default_log_obj_,
    1u,
    "./src/scene/player_scene_comp.cpp",
    "delOneOffRecordByMuip",
    911);
  common::milog::MiLogStream::operator()(
    &v17,
    "type %u scene_id %u dungeon_id %u group_id %u config_id %u",
    (unsigned int)type,
    scene_id,
    dungeon_id,
    group_id,
    *(unsigned int *)(v6 + 32));
  common::milog::MiLogStream::~MiLogStream(&v17);
  if ( v18 == (char *)v6 )
  {
    *(_QWORD *)((v6 >> 3) + 0x7FFF8000) = 0LL;
  }
  else
  {
    *(_QWORD *)v6 = 1172321806LL;
    *(_QWORD *)((v6 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
  }
};

// Line 916: range 0000000013E42EA4-0000000013E42F1D
void __cdecl PlayerSceneComp::removeProductRecordByGm(
        PlayerSceneComp *const this,
        uint32_t scene_id,
        uint32_t dungeon_id,
        uint32_t group_id)
{
  proto::GroupProductBin *GroupProductBin; // rax
  BlockDataMgr *BlockDataMgr; // rax

  GroupProductBin = PlayerSceneComp::getGroupProductBin(this, scene_id, dungeon_id, group_id);
  proto::GroupProductBin::Clear(GroupProductBin);
  if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
    __asan_report_load8();
  BlockDataMgr = Player::getBlockDataMgr(this->player_);
  BlockDataMgr::removeProductRecordByGm(BlockDataMgr, group_id);
};

// Line 923: range 0000000013E42F1E-0000000013E43164
bool __cdecl PlayerSceneComp::setOneOffRecordVersion(
        PlayerSceneComp *const this,
        proto::ProtEntityType type,
        uint32_t scene_id,
        uint32_t dungeon_id,
        uint32_t group_id,
        uint32_t config_id,
        uint32_t version)
{
  BlockDataMgr *BlockDataMgr; // rax
  const std::string *v9; // rax
  const char *v10; // rax
  const std::string *v11; // rax
  const char *v12; // rax
  proto::GroupProductBin *group_product_bin; // [rsp+28h] [rbp-38h]
  common::milog::MiLogStream v18; // [rsp+30h] [rbp-30h] BYREF

  if ( PlayerSceneComp::isOneOffSaveInBlockBin(this, type, group_id, config_id) )
  {
    if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
      __asan_report_load8();
    BlockDataMgr = Player::getBlockDataMgr(this->player_);
    return BlockDataMgr::setOneOffRecordVersion(BlockDataMgr, type, group_id, config_id, version);
  }
  else if ( PlayerSceneComp::findGroupProductBin(this, scene_id, dungeon_id, group_id) )
  {
    group_product_bin = PlayerSceneComp::getGroupProductBin(this, scene_id, dungeon_id, group_id);
    if ( PlayerSceneComp::setOneOffVersionOnGroupProductBin(this, group_product_bin, type, config_id, version) )
    {
      return 1;
    }
    else
    {
      common::milog::MiLogStream::create(
        &v18,
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/scene/player_scene_comp.cpp",
        "setOneOffRecordVersion",
        943);
      v11 = proto::ProtEntityType_Name[abi:cxx11](type);
      v12 = (const char *)std::string::c_str(v11);
      common::milog::MiLogStream::operator()(
        &v18,
        "oneoff record does NOT exist for type=%s scene_id=%u dungeon_id=%u group_id=%u config_id=%u version=%u",
        v12,
        scene_id,
        dungeon_id,
        group_id,
        config_id,
        version);
      common::milog::MiLogStream::~MiLogStream(&v18);
      return 0;
    }
  }
  else
  {
    common::milog::MiLogStream::create(
      &v18,
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/scene/player_scene_comp.cpp",
      "setOneOffRecordVersion",
      932);
    v9 = proto::ProtEntityType_Name[abi:cxx11](type);
    v10 = (const char *)std::string::c_str(v9);
    common::milog::MiLogStream::operator()(
      &v18,
      "oneoff record does NOT exist for type=%s scene_id=%u dungeon_id=%u group_id=%u config_id=%u version=%u",
      v10,
      scene_id,
      dungeon_id,
      group_id,
      config_id,
      version);
    common::milog::MiLogStream::~MiLogStream(&v18);
    return 0;
  }
};

// Line 950: range 0000000013E43166-0000000013E43318
bool __cdecl PlayerSceneComp::isOneOffSaveInBlockBin(
        PlayerSceneComp *const this,
        proto::ProtEntityType type,
        uint32_t group_id,
        uint32_t config_id)
{
  std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v4; // rax
  std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v6; // rax
  const MonsterScriptConfig *monster_config_ptr; // [rsp+20h] [rbp-30h]
  const GadgetScriptConfig *gadget_config_ptr; // [rsp+28h] [rbp-28h]
  std::shared_ptr<Config> v11[2]; // [rsp+30h] [rbp-20h] BYREF

  if ( type == PROT_ENTITY_GADGET )
  {
    ServiceBox::findService<GameserverService>();
    GameserverService::getConfig((GameserverService *const)v11);
    v4 = std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false> *const)v11);
    gadget_config_ptr = LuaConfigMgr::findGadgetScriptConfig(&v4->design_config.lua_config_mgr, group_id, config_id);
    std::shared_ptr<Config>::~shared_ptr(v11);
    if ( gadget_config_ptr )
    {
      if ( *(_BYTE *)(((unsigned __int64)&gadget_config_ptr->is_block_oneoff >> 3) + 0x7FFF8000) != 0
        && (((unsigned __int8)gadget_config_ptr + 75) & 7) >= *(_BYTE *)(((unsigned __int64)&gadget_config_ptr->is_block_oneoff >> 3)
                                                                       + 0x7FFF8000) )
      {
        __asan_report_load1(&gadget_config_ptr->is_block_oneoff);
      }
      if ( gadget_config_ptr->is_block_oneoff )
        return 1;
    }
  }
  else if ( type == PROT_ENTITY_MONSTER )
  {
    ServiceBox::findService<GameserverService>();
    GameserverService::getConfig((GameserverService *const)v11);
    v6 = std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false> *const)v11);
    monster_config_ptr = LuaConfigMgr::findMonsterScriptConfig(&v6->design_config.lua_config_mgr, group_id, config_id);
    std::shared_ptr<Config>::~shared_ptr(v11);
    if ( monster_config_ptr )
    {
      if ( *(_BYTE *)(((unsigned __int64)&monster_config_ptr->is_block_oneoff >> 3) + 0x7FFF8000) != 0
        && (((unsigned __int8)monster_config_ptr + 98) & 7) >= *(_BYTE *)(((unsigned __int64)&monster_config_ptr->is_block_oneoff >> 3)
                                                                        + 0x7FFF8000) )
      {
        __asan_report_load1(&monster_config_ptr->is_block_oneoff);
      }
      if ( monster_config_ptr->is_block_oneoff )
        return 1;
    }
  }
  return 0;
};

// Line 972: range 0000000013E4331A-0000000013E43E8F
__int64 __fastcall PlayerSceneComp::jumpToScene(
        PlayerSceneComp *const this,
        uint32_t scene_id,
        uint32_t point_id,
        TransferReason *p_reason)
{
  unsigned __int64 v4; // r13
  __int64 v5; // rax
  _DWORD *v6; // r12
  std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v7; // rax
  common::milog::MiLogStream *v8; // rax
  unsigned int v9; // r14d
  common::milog::MiLogStream *v10; // rax
  common::milog::MiLogStream *v11; // rax
  common::milog::MiLogStream *v12; // rbx
  common::milog::MiLogStream *v13; // r14
  unsigned __int64 v14; // rax
  unsigned __int64 v15; // rdx
  std::__shared_ptr_access<proto::PlayerQuitFromHomeNotify,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v16; // rax
  Player *player; // r14
  unsigned __int64 v18; // rax
  unsigned __int64 v19; // rdx
  common::milog::MiLogStream *v20; // r14
  common::milog::MiLogStream *v21; // rax
  common::milog::MiLogStream *v22; // rax
  common::milog::MiLogStream *v23; // rcx
  Scene *v24; // rax
  unsigned int v25; // eax
  common::milog::MiLogStream *v26; // rax
  common::milog::MiLogStream *v27; // rax
  common::milog::MiLogStream *v28; // rax
  uint32_t v29; // r14d
  Scene *v30; // rax
  __int64 result; // rax
  unsigned int Uid; // [rsp+28h] [rbp-178h] BYREF
  data::WorldType cur_world_type; // [rsp+2Ch] [rbp-174h]
  char *val; // [rsp+30h] [rbp-170h] BYREF
  const data::SceneExcelConfig *scene_config_ptr; // [rsp+38h] [rbp-168h]
  std::shared_ptr<const google::protobuf::Message> v38; // [rsp+40h] [rbp-160h] BYREF
  common::milog::MiLogStream v39; // [rsp+50h] [rbp-150h] BYREF
  TransferReason v40; // [rsp+70h] [rbp-130h] BYREF
  char v41[240]; // [rsp+B0h] [rbp-F0h] BYREF

  v4 = (unsigned __int64)v41;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v5 = __asan_stack_malloc_2(192LL);
    if ( v5 )
      v4 = v5;
  }
  *(_QWORD *)v4 = 1102416563LL;
  *(_QWORD *)(v4 + 8) = "6 32 4 12 scene_id:971 48 4 12 point_id:971 64 16 18 dest_world_ptr:985 96 16 17 cur_world_ptr:9"
                        "86 128 16 19 dest_scene_ptr:1009 160 16 19 tran_point_ptr:1019";
  *(_QWORD *)(v4 + 16) = PlayerSceneComp::jumpToScene;
  v6 = (_DWORD *)(v4 >> 3);
  v6[536862720] = -235802127;
  v6[536862721] = -234556924;
  v6[536862722] = -219021312;
  v6[536862723] = -219021312;
  v6[536862724] = -219021312;
  v6[536862725] = -202178560;
  *(_DWORD *)(v4 + 32) = scene_id;
  *(_DWORD *)(v4 + 48) = point_id;
  ServiceBox::findService<GameserverService>();
  GameserverService::getConfig((GameserverService *const)&v38);
  v7 = std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false> *const)&v38);
  scene_config_ptr = data::SceneExcelConfigMgrBase::findSceneExcelConfig(
                       &v7->design_config.txt_config_mgr.scene_config_mgr,
                       *(_DWORD *)(v4 + 32));
  std::shared_ptr<Config>::~shared_ptr((std::shared_ptr<Config> *const)&v38);
  if ( !scene_config_ptr )
  {
    common::milog::MiLogStream::create(
      &v39,
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/scene/player_scene_comp.cpp",
      "jumpToScene",
      976);
    v8 = common::milog::MiLogStream::operator<<<char [38],(char *[38])0>(
           &v39,
           (const char (*)[38])"findSceneExcelConfig fails, scene_id:");
    common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v8, (const unsigned int *)(v4 + 32));
    common::milog::MiLogStream::~MiLogStream(&v39);
    v9 = -1;
    goto LABEL_45;
  }
  if ( *(_BYTE *)(((unsigned __int64)&scene_config_ptr->type >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)scene_config_ptr + 12) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&scene_config_ptr->type >> 3)
                                                                    + 0x7FFF8000) )
  {
    __asan_report_load4(&scene_config_ptr->type);
  }
  if ( SceneExcelConfigMgr::isPlayerScene(scene_config_ptr->type) )
  {
    std::shared_ptr<World>::shared_ptr((std::shared_ptr<World> *const)(v4 + 64), 0LL);
    PlayerSceneComp::getCurWorld((const PlayerSceneComp *const)(v4 + 96));
    if ( std::operator==<World>((const std::shared_ptr<World> *)(v4 + 96), 0LL) )
    {
      common::milog::MiLogStream::create(
        &v39,
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/scene/player_scene_comp.cpp",
        "jumpToScene",
        989);
      v13 = common::milog::MiLogStream::operator<<<char [25],(char *[25])0>(
              &v39,
              (const char (*)[25])"getCurWorld fails, uid: ");
      if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
        __asan_report_load8();
    }
    else
    {
      v14 = (unsigned __int64)std::__shared_ptr_access<World,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<World,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 96));
      if ( *(_BYTE *)((v14 >> 3) + 0x7FFF8000) )
        v14 = __asan_report_load8();
      v15 = *(_QWORD *)v14 + 16LL;
      if ( *(_BYTE *)((v15 >> 3) + 0x7FFF8000) )
        v14 = __asan_report_load8();
      cur_world_type = (*(unsigned int (__fastcall **)(unsigned __int64))v15)(v14);
      if ( cur_world_type == WORLD_HOME )
      {
        PlayerSceneComp::getMyPlayerWorld((const PlayerSceneComp *const)&v38);
        std::shared_ptr<World>::operator=<PlayerWorld>(
          (std::shared_ptr<World> *const)(v4 + 64),
          (std::shared_ptr<PlayerWorld> *)&v38);
        std::shared_ptr<PlayerWorld>::~shared_ptr((std::shared_ptr<PlayerWorld> *const)&v38);
        common::tools::perf::make_shared<proto::PlayerQuitFromHomeNotify>();
        v16 = std::__shared_ptr_access<proto::PlayerQuitFromHomeNotify,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<proto::PlayerQuitFromHomeNotify,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 160));
        proto::PlayerQuitFromHomeNotify::set_reason(v16, PlayerQuitFromHomeNotify_QuitReason_BACK_TO_MY_WORLD);
        if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
          __asan_report_load8();
        player = this->player_;
        std::dynamic_pointer_cast<google::protobuf::Message const,proto::PlayerQuitFromHomeNotify>((const std::shared_ptr<proto::PlayerQuitFromHomeNotify> *)&v38);
        Player::sendMessage(player, &v38, 0LL);
        std::shared_ptr<google::protobuf::Message const>::~shared_ptr(&v38);
        std::shared_ptr<proto::PlayerQuitFromHomeNotify>::~shared_ptr((std::shared_ptr<proto::PlayerQuitFromHomeNotify> *const)(v4 + 160));
      }
      else
      {
        std::shared_ptr<World>::operator=(
          (std::shared_ptr<World> *const)(v4 + 64),
          (const std::shared_ptr<World> *)(v4 + 96));
      }
      if ( !std::operator==<World>((const std::shared_ptr<World> *)(v4 + 64), 0LL) )
      {
        v18 = (unsigned __int64)std::__shared_ptr_access<World,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<World,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 64));
        if ( *(_BYTE *)((v18 >> 3) + 0x7FFF8000) )
          v18 = __asan_report_load8();
        v19 = *(_QWORD *)v18 + 80LL;
        if ( *(_BYTE *)((v19 >> 3) + 0x7FFF8000) )
          v18 = __asan_report_load8();
        (*(void (__fastcall **)(unsigned __int64, unsigned __int64, _QWORD))v19)(
          v4 + 128,
          v18,
          *(unsigned int *)(v4 + 32));
        if ( std::operator==<Scene>((const std::shared_ptr<Scene> *)(v4 + 128), 0LL) )
        {
          common::milog::MiLogStream::create(
            &v39,
            &common::milog::MiLogDefault::default_log_obj_,
            3u,
            "./src/scene/player_scene_comp.cpp",
            "jumpToScene",
            1012);
          v20 = common::milog::MiLogStream::operator<<<char [36],(char *[36])0>(&v39, (const char (*)[36])off_2517E7A0);
          val = (char *)data::enumValToStr(cur_world_type);
          v21 = common::milog::MiLogStream::operator<<<char const*,(char const**)0>(v20, (const char *const *)&val);
          v22 = common::milog::MiLogStream::operator<<<char [11],(char *[11])0>(v21, (const char (*)[11])" scene_id:");
          v23 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                  v22,
                  (const unsigned int *)(v4 + 32));
          if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
            __asan_report_load8();
          operator<<(v23, this->player_);
          common::milog::MiLogStream::~MiLogStream(&v39);
          v9 = -1;
        }
        else if ( *(_DWORD *)(v4 + 48) )
        {
          ServiceBox::findService<GameserverService>();
          GameserverService::getConfig((GameserverService *const)&v38);
          v25 = (unsigned int)std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false> *const)&v38);
          JsonConfigMgr::findScenePoint<data::SceneTransPoint>(
            (const JsonConfigMgr *const)(v4 + 160),
            v25 + 93080,
            *(_DWORD *)(v4 + 32));
          std::shared_ptr<Config>::~shared_ptr((std::shared_ptr<Config> *const)&v38);
          if ( std::operator==<data::SceneTransPoint>((const std::shared_ptr<data::SceneTransPoint> *)(v4 + 160), 0LL) )
          {
            common::milog::MiLogStream::create(
              &v39,
              &common::milog::MiLogDefault::default_log_obj_,
              3u,
              "./src/scene/player_scene_comp.cpp",
              "jumpToScene",
              1022);
            v26 = common::milog::MiLogStream::operator<<<char [32],(char *[32])0>(
                    &v39,
                    (const char (*)[32])"findScenePoint fails, scene_id:");
            v27 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                    v26,
                    (const unsigned int *)(v4 + 32));
            v28 = common::milog::MiLogStream::operator<<<char [12],(char *[12])0>(
                    v27,
                    (const char (*)[12])", point_id:");
            common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v28, (const unsigned int *)(v4 + 48));
            common::milog::MiLogStream::~MiLogStream(&v39);
            v9 = -1;
          }
          else
          {
            TransferReason::TransferReason(&v40, p_reason);
            v29 = *(_DWORD *)(v4 + 48);
            v30 = std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::operator*((const std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 128));
            v9 = PlayerSceneComp::jumpToScene(this, v30, v29, &v40);
            TransferReason::~TransferReason(&v40);
          }
          std::shared_ptr<data::SceneTransPoint>::~shared_ptr((std::shared_ptr<data::SceneTransPoint> *const)(v4 + 160));
        }
        else
        {
          TransferReason::TransferReason(&v40, p_reason);
          v24 = std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::operator*((const std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 128));
          v9 = PlayerSceneComp::jumpToSceneBornPosition(this, v24, &v40);
          TransferReason::~TransferReason(&v40);
        }
        std::shared_ptr<Scene>::~shared_ptr((std::shared_ptr<Scene> *const)(v4 + 128));
        goto LABEL_44;
      }
      common::milog::MiLogStream::create(
        &v39,
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/scene/player_scene_comp.cpp",
        "jumpToScene",
        1006);
      v13 = common::milog::MiLogStream::operator<<<char [30],(char *[30])0>(
              &v39,
              (const char (*)[30])"dest_world_ptr is null, uid: ");
      if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
        __asan_report_load8();
    }
    Uid = Player::getUid(this->player_);
    common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v13, &Uid);
    common::milog::MiLogStream::~MiLogStream(&v39);
    v9 = -1;
LABEL_44:
    std::shared_ptr<World>::~shared_ptr((std::shared_ptr<World> *const)(v4 + 96));
    std::shared_ptr<World>::~shared_ptr((std::shared_ptr<World> *const)(v4 + 64));
    goto LABEL_45;
  }
  common::milog::MiLogStream::create(
    &v39,
    &common::milog::MiLogDefault::default_log_obj_,
    3u,
    "./src/scene/player_scene_comp.cpp",
    "jumpToScene",
    981);
  v10 = common::milog::MiLogStream::operator<<<char [42],(char *[42])0>(
          &v39,
          (const char (*)[42])"dest_scene is not player scene, scene_id:");
  v11 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v10, (const unsigned int *)(v4 + 32));
  v12 = common::milog::MiLogStream::operator<<<char [13],(char *[13])0>(v11, (const char (*)[13])" scene_type:");
  if ( *(_BYTE *)(((unsigned __int64)&scene_config_ptr->type >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)scene_config_ptr + 12) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&scene_config_ptr->type >> 3)
                                                                    + 0x7FFF8000) )
  {
    __asan_report_load4(&scene_config_ptr->type);
  }
  val = (char *)data::enumValToStr(scene_config_ptr->type);
  common::milog::MiLogStream::operator<<<char const*,(char const**)0>(v12, (const char *const *)&val);
  common::milog::MiLogStream::~MiLogStream(&v39);
  v9 = -1;
LABEL_45:
  result = v9;
  if ( v41 == (char *)v4 )
  {
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8008) = 0LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8010) = 0LL;
  }
  else
  {
    *(_QWORD *)v4 = 1172321806LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 1029: range 0000000013E43E90-0000000013E444D0
__int64 __fastcall PlayerSceneComp::jumpToScene(
        PlayerSceneComp *const this,
        Scene *scene,
        uint32_t point_id,
        TransferReason *p_reason)
{
  unsigned __int64 v4; // r13
  __int64 v5; // rax
  _DWORD *v6; // r12
  common::milog::MiLogStream *v7; // rax
  common::milog::MiLogStream *v8; // rax
  common::milog::MiLogStream *v9; // rax
  common::milog::MiLogStream *v10; // rcx
  unsigned int v11; // r14d
  unsigned int v12; // eax
  common::milog::MiLogStream *v13; // rax
  common::milog::MiLogStream *v14; // rax
  common::milog::MiLogStream *v15; // rax
  std::__shared_ptr_access<data::SceneTransPoint,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v16; // rax
  data::Vector *p_tran_rot; // rsi
  std::__shared_ptr_access<data::SceneTransPoint,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v18; // rax
  std::__shared_ptr_access<data::SceneTransPoint,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v19; // rax
  uint32_t v20; // ecx
  char v21; // dl
  bool v22; // dl
  unsigned __int64 v23; // rax
  unsigned __int64 v24; // rdx
  __int64 v25; // rax
  __int64 result; // rax
  uint32_t point_type; // [rsp+20h] [rbp-150h]
  Vector3 v31; // [rsp+24h] [rbp-14Ch] BYREF
  std::shared_ptr<Config> v32; // [rsp+30h] [rbp-140h] BYREF
  common::milog::MiLogStream v33; // [rsp+40h] [rbp-130h] BYREF
  TransferReason v34; // [rsp+60h] [rbp-110h] BYREF
  char v35[208]; // [rsp+A0h] [rbp-D0h] BYREF

  v4 = (unsigned __int64)v35;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v5 = __asan_stack_malloc_2(160LL);
    if ( v5 )
      v4 = v5;
  }
  *(_QWORD *)v4 = 1102416563LL;
  *(_QWORD *)(v4 + 8) = "5 32 4 13 scene_id:1030 48 4 13 point_id:1028 64 12 13 tran_pos:1042 96 12 13 tran_rot:1043 128 "
                        "16 19 tran_point_ptr:1036";
  *(_QWORD *)(v4 + 16) = PlayerSceneComp::jumpToScene;
  v6 = (_DWORD *)(v4 >> 3);
  v6[536862720] = -235802127;
  v6[536862721] = -234556924;
  v6[536862722] = -219020288;
  v6[536862723] = -219020288;
  v6[536862724] = -202178560;
  *(_DWORD *)(v4 + 48) = point_id;
  *(_DWORD *)(v4 + 32) = Scene::getSceneId(scene);
  if ( !Scene::isPointUnlocked(scene, *(_DWORD *)(v4 + 48)) )
  {
    common::milog::MiLogStream::create(
      &v33,
      &common::milog::MiLogDefault::default_log_obj_,
      1u,
      "./src/scene/player_scene_comp.cpp",
      "jumpToScene",
      1033);
    v7 = common::milog::MiLogStream::operator<<<char [33],(char *[33])0>(
           &v33,
           (const char (*)[33])"point is not unlocked, scene_id:");
    v8 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v7, (const unsigned int *)(v4 + 32));
    v9 = common::milog::MiLogStream::operator<<<char [12],(char *[12])0>(v8, (const char (*)[12])", point_id:");
    v10 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v9, (const unsigned int *)(v4 + 48));
    if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
      __asan_report_load8();
    operator<<(v10, this->player_);
    common::milog::MiLogStream::~MiLogStream(&v33);
    v11 = 501;
  }
  else
  {
    ServiceBox::findService<GameserverService>();
    GameserverService::getConfig((GameserverService *const)&v32);
    v12 = (unsigned int)std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false> *const)&v32);
    JsonConfigMgr::findScenePoint<data::SceneTransPoint>(
      (const JsonConfigMgr *const)(v4 + 128),
      v12 + 93080,
      *(_DWORD *)(v4 + 32));
    std::shared_ptr<Config>::~shared_ptr(&v32);
    if ( std::operator==<data::SceneTransPoint>((const std::shared_ptr<data::SceneTransPoint> *)(v4 + 128), 0LL) )
    {
      common::milog::MiLogStream::create(
        &v33,
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/scene/player_scene_comp.cpp",
        "jumpToScene",
        1039);
      v13 = common::milog::MiLogStream::operator<<<char [32],(char *[32])0>(
              &v33,
              (const char (*)[32])"findScenePoint fails, scene_id:");
      v14 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v13, (const unsigned int *)(v4 + 32));
      v15 = common::milog::MiLogStream::operator<<<char [12],(char *[12])0>(v14, (const char (*)[12])", point_id:");
      common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v15, (const unsigned int *)(v4 + 48));
      common::milog::MiLogStream::~MiLogStream(&v33);
      v11 = -1;
    }
    else
    {
      v16 = std::__shared_ptr_access<data::SceneTransPoint,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<data::SceneTransPoint,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 128));
      Vector3::Vector3((Vector3 *const)(v4 + 64), &v16->tran_pos);
      p_tran_rot = &std::__shared_ptr_access<data::SceneTransPoint,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<data::SceneTransPoint,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 128))->tran_rot;
      Vector3::Vector3((Vector3 *const)(v4 + 96), p_tran_rot);
      if ( Vector3::isZero((const Vector3 *const)(v4 + 64)) )
      {
        v18 = std::__shared_ptr_access<data::SceneTransPoint,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<data::SceneTransPoint,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 128));
        Vector3::Vector3(&v31, &v18->pos);
        *(Vector3 *)(v4 + 64) = v31;
        p_tran_rot = &std::__shared_ptr_access<data::SceneTransPoint,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<data::SceneTransPoint,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 128))->rot;
        Vector3::Vector3(&v31, p_tran_rot);
        *(Vector3 *)(v4 + 96) = v31;
      }
      v19 = std::__shared_ptr_access<data::SceneTransPoint,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<data::SceneTransPoint,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 128));
      if ( *(_BYTE *)(((unsigned __int64)&v19->type >> 3) + 0x7FFF8000) != 0
        && *(_BYTE *)(((unsigned __int64)&v19->type >> 3) + 0x7FFF8000) <= 3 )
      {
        v19 = (std::__shared_ptr_access<data::SceneTransPoint,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *)__asan_report_load4(&v19->type);
      }
      point_type = v19->type;
      v20 = *(_DWORD *)(v4 + 48);
      v21 = *(_BYTE *)(((unsigned __int64)&p_reason->point_id >> 3) + 0x7FFF8000);
      LOBYTE(p_tran_rot) = v21 != 0;
      v22 = v21 != 0 && (char)((((_BYTE)p_reason + 4) & 7) + 3) >= v21;
      if ( v22 )
        __asan_report_store4(&p_reason->point_id, p_tran_rot, v22);
      p_reason->point_id = v20;
      if ( *(_BYTE *)(((unsigned __int64)&p_reason->type >> 3) + 0x7FFF8000) != 0
        && *(_BYTE *)(((unsigned __int64)&p_reason->type >> 3) + 0x7FFF8000) <= 3 )
      {
        __asan_report_store4(&p_reason->type, p_tran_rot, (_BYTE)p_reason + 8);
      }
      p_reason->type = point_type;
      v23 = (unsigned __int64)std::__shared_ptr_access<data::SceneTransPoint,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<data::SceneTransPoint,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 128));
      if ( *(_BYTE *)((v23 >> 3) + 0x7FFF8000) )
        v23 = __asan_report_load8();
      v24 = *(_QWORD *)v23 + 32LL;
      if ( *(_BYTE *)((v24 >> 3) + 0x7FFF8000) )
        v23 = __asan_report_load8();
      v25 = (*(__int64 (__fastcall **)(unsigned __int64))v24)(v23);
      std::string::operator=(&p_reason->point_type_name, v25);
      TransferReason::TransferReason(&v34, p_reason);
      v11 = PlayerSceneComp::jumpToScene(
              this,
              scene,
              (const Vector3 *)(v4 + 64),
              (const Vector3 *)(v4 + 96),
              point_type,
              &v34);
      TransferReason::~TransferReason(&v34);
    }
    std::shared_ptr<data::SceneTransPoint>::~shared_ptr((std::shared_ptr<data::SceneTransPoint> *const)(v4 + 128));
  }
  result = v11;
  if ( v35 == (char *)v4 )
  {
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8008) = 0LL;
    *(_DWORD *)((v4 >> 3) + 0x7FFF8010) = 0;
  }
  else
  {
    *(_QWORD *)v4 = 1172321806LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v4 >> 3) + 0x7FFF8010) = -168430091;
  }
  return result;
};

// Line 1057: range 0000000013E444D2-0000000013E447E8
int32_t __cdecl PlayerSceneComp::jumpToSceneBornPosition(
        PlayerSceneComp *const this,
        Scene *scene,
        TransferReason *p_reason)
{
  unsigned __int64 v3; // rbx
  __int64 v4; // rax
  unsigned __int64 v5; // r12
  common::milog::MiLogStream *v6; // rcx
  int32_t v7; // r14d
  unsigned __int64 v8; // rax
  int32_t result; // eax
  const Vector3 *pos; // [rsp+20h] [rbp-100h]
  const Vector3 *rot; // [rsp+28h] [rbp-F8h]
  std::pair<Vector3,Vector3> __in; // [rsp+30h] [rbp-F0h] BYREF
  common::milog::MiLogStream v14; // [rsp+50h] [rbp-D0h] BYREF
  TransferReason v15; // [rsp+70h] [rbp-B0h] BYREF
  char v16[112]; // [rsp+B0h] [rbp-70h] BYREF

  v3 = (unsigned __int64)v16;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_0(64LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "1 32 16 19 cur_avatar_ptr:1058";
  *(_QWORD *)(v3 + 16) = PlayerSceneComp::jumpToSceneBornPosition;
  v5 = v3 >> 3;
  *(_DWORD *)(v5 + 2147450880) = -235802127;
  *(_DWORD *)(v5 + 2147450884) = -202178560;
  if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
    __asan_report_load8();
  Player::getCurAvatar((Player *const)(v3 + 32));
  if ( std::operator==<Avatar>((const std::shared_ptr<Avatar> *)(v3 + 32), 0LL) )
  {
    common::milog::MiLogStream::create(
      &v14,
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/scene/player_scene_comp.cpp",
      "jumpToSceneBornPosition",
      1061);
    v6 = common::milog::MiLogStream::operator<<<char [19],(char *[19])0>(&v14, (const char (*)[19])"getCurAvatar fails");
    if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
      __asan_report_load8();
    operator<<(v6, this->player_);
    common::milog::MiLogStream::~MiLogStream(&v14);
    v7 = -1;
  }
  else
  {
    if ( *(_BYTE *)(((unsigned __int64)scene >> 3) + 0x7FFF8000) )
      __asan_report_load8();
    v8 = (unsigned __int64)(scene->_vptr_DescribalBase + 17);
    if ( *(_BYTE *)((v8 >> 3) + 0x7FFF8000) )
      v8 = __asan_report_load8();
    (*(void (__fastcall **)(std::pair<Vector3,Vector3> *, Scene *))v8)(&__in, scene);
    pos = std::get<0ul,Vector3,Vector3>(&__in);
    rot = std::get<1ul,Vector3,Vector3>(&__in);
    TransferReason::TransferReason(&v15, p_reason);
    v7 = PlayerSceneComp::jumpToScene(this, scene, pos, rot, 0, &v15);
    TransferReason::~TransferReason(&v15);
  }
  std::shared_ptr<Avatar>::~shared_ptr((std::shared_ptr<Avatar> *const)(v3 + 32));
  result = v7;
  if ( v16 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 1070: range 0000000013E447EA-0000000013E4685D
int32_t __cdecl PlayerSceneComp::jumpToScene(
        PlayerSceneComp *const this,
        Scene *scene,
        const Vector3 *pos,
        const Vector3 *rot,
        uint32_t point_type,
        TransferReason *p_reason)
{
  int32_t v6; // r14d
  unsigned __int64 v7; // r13
  __int64 v8; // rax
  _DWORD *v9; // r12
  PlayerBasicComp *BasicComp; // rax
  common::milog::MiLogStream *v11; // rcx
  unsigned __int64 v12; // rax
  common::milog::MiLogStream *v13; // r15
  common::milog::MiLogStream *v14; // rax
  common::milog::MiLogStream *v15; // r15
  common::milog::MiLogStream *v16; // rax
  common::milog::MiLogStream *v17; // r15
  common::milog::MiLogStream *v18; // r14
  common::milog::MiLogStream *v19; // rax
  common::milog::MiLogStream *v20; // r14
  common::milog::MiLogStream *v21; // rax
  common::milog::MiLogStream *v22; // r14
  SceneMultistagePlayComp *MultistagePlayComp; // r15
  uint32_t Uid; // eax
  common::milog::MiLogStream *v25; // rcx
  common::milog::MiLogStream *v26; // rax
  common::milog::MiLogStream *v27; // r14
  SceneTransferGuardComp *TransferGuardComp; // r15
  uint32_t v29; // eax
  common::milog::MiLogStream *v30; // rcx
  common::milog::MiLogStream *v31; // rax
  std::__shared_ptr_access<SceneTransferAwaiter,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v32; // rax
  std::__shared_ptr_access<SceneTransferAwaiter,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v34; // r15
  unsigned __int64 v35; // rax
  __int64 v36; // rsi
  common::milog::MiLogStream *v37; // rcx
  common::milog::MiLogStream *v38; // rax
  common::milog::MiLogStream *v39; // r14
  int v40; // r15d
  char v41; // r15
  Scene *v42; // rax
  uint32_t v43; // eax
  common::milog::MiLogStream *v44; // rcx
  common::milog::MiLogStream *v45; // rax
  common::milog::MiLogStream *v46; // r14
  char v47; // r15
  Scene *v48; // rax
  uint32_t v49; // eax
  common::milog::MiLogStream *v50; // rcx
  common::milog::MiLogStream *v51; // rax
  Scene *v52; // rax
  std::__shared_ptr_access<SceneTransferAwaiter,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v53; // rax
  std::__shared_ptr_access<SceneTransferAwaiter,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v55; // r15
  unsigned __int64 v56; // rax
  __int64 v57; // rsi
  common::milog::MiLogStream *v58; // rcx
  common::milog::MiLogStream *v59; // rax
  common::milog::MiLogStream *v60; // r14
  int v61; // r15d
  uint32_t v62; // r14d
  uint32_t cur_world_owner_uid; // r14d
  char v64; // al
  std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v65; // rax
  common::milog::MiLogStream *v67; // rcx
  common::milog::MiLogStream *v68; // rax
  common::milog::MiLogStream *v69; // r14
  std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v70; // rax
  proto::ServerLogNotify *v71; // rax
  unsigned __int64 v72; // rax
  void (__fastcall **v73)(std::string *, unsigned __int64); // rdx
  proto::ServerLogNotify *v74; // rax
  Player *player; // r14
  int v76; // r15d
  Player *v77; // r14
  proto::EnterReason enter_reason; // r15d
  common::milog::MiLogStream *v79; // rax
  std::__shared_ptr_access<proto_log::PlayerLogBodyTransport,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v80; // rax
  uint32_t v81; // eax
  std::__shared_ptr_access<proto_log::PlayerLogBodyTransport,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v82; // rcx
  Player *v83; // r14
  PlayerWatcherComp *WatcherComp; // r14
  uint32_t v85; // ecx
  int32_t result; // eax
  std::string v87; // [rsp+0h] [rbp-240h]
  char *v88; // [rsp+0h] [rbp-240h]
  SceneMultistagePlayComp *v89; // [rsp+8h] [rbp-238h]
  SceneMultistagePlayComp *v90; // [rsp+8h] [rbp-238h]
  char v91; // [rsp+8h] [rbp-238h]
  SceneTransferGuardComp *v92; // [rsp+8h] [rbp-238h]
  char v93; // [rsp+8h] [rbp-238h]
  SceneMultistagePlayComp *v94; // [rsp+8h] [rbp-238h]
  TransferReason *p_reasona; // [rsp+10h] [rbp-230h]
  uint32_t point_typea; // [rsp+1Ch] [rbp-224h]
  unsigned int val; // [rsp+4Ch] [rbp-1F4h] BYREF
  unsigned int SceneId; // [rsp+50h] [rbp-1F0h] BYREF
  unsigned int OwnerUid; // [rsp+54h] [rbp-1ECh] BYREF
  int32_t ret; // [rsp+58h] [rbp-1E8h]
  proto::EnterType enter_scene_type; // [rsp+5Ch] [rbp-1E4h]
  proto::VisionType vision_type; // [rsp+60h] [rbp-1E0h]
  data::SceneType dest_scene_type; // [rsp+64h] [rbp-1DCh]
  proto_log::ScenePointLog *point_log; // [rsp+68h] [rbp-1D8h]
  std::string __rhs; // [rsp+70h] [rbp-1D0h] BYREF
  TransferReason v109; // [rsp+90h] [rbp-1B0h] BYREF
  char v110[368]; // [rsp+D0h] [rbp-170h] BYREF

  *((_DWORD *)&v87._anon_0._M_allocated_capacity + 3) = point_type;
  v87._anon_0._M_allocated_capacity = (std::string::size_type)p_reason;
  v7 = (unsigned __int64)v110;
  v87._M_dataplus._M_p = v110;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v8 = __asan_stack_malloc_3(320LL);
    if ( v8 )
      v7 = v8;
  }
  *(_QWORD *)v7 = 1102416563LL;
  *(_QWORD *)(v7 + 8) = "8 48 1 11 holder:1071 64 16 19 cur_avatar_ptr:1072 96 16 14 scene_ptr:1119 128 16 18 cur_scene_p"
                        "tr:1122 160 16 22 transport_log_ptr:1220 192 16 21 owner_player_ptr:1168 224 16 16 awaiter_ptr:1"
                        "107 256 32 15 server_log:1207";
  *(_QWORD *)(v7 + 16) = PlayerSceneComp::jumpToScene;
  v9 = (_DWORD *)(v7 >> 3);
  v9[536862720] = -235802127;
  v9[536862721] = -234753551;
  v9[536862722] = -219021312;
  v9[536862723] = -219021312;
  v9[536862724] = -219021312;
  v9[536862725] = -219021312;
  v9[536862726] = -219021312;
  v9[536862727] = -219021312;
  v9[536862729] = -202116109;
  if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
    __asan_report_load8();
  BasicComp = Player::getBasicComp(this->player_);
  PlayerBasicComp::getNextTransNo[abi:cxx11](&__rhs, BasicComp);
  StatLogUtils::ContextHolder::ContextHolder((StatLogUtils::ContextHolder *const)(v7 + 48), 0x5E0u, v87);
  std::string::~string(&__rhs);
  if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
    __asan_report_load8();
  Player::getCurAvatar((Player *const)(v7 + 64));
  if ( std::operator==<Avatar>((const std::shared_ptr<Avatar> *)(v7 + 64), 0LL) )
  {
    common::milog::MiLogStream::create(
      (common::milog::MiLogStream *)&__rhs,
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/scene/player_scene_comp.cpp",
      "jumpToScene",
      1075);
    v11 = common::milog::MiLogStream::operator<<<char [19],(char *[19])0>(
            (common::milog::MiLogStream *const)&__rhs,
            (const char (*)[19])"getCurAvatar fails");
    if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
      __asan_report_load8();
    operator<<(v11, this->player_);
    common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)&__rhs);
    v6 = -1;
    goto LABEL_185;
  }
  if ( *(_BYTE *)(((unsigned __int64)scene >> 3) + 0x7FFF8000) )
    __asan_report_load8();
  v12 = (unsigned __int64)(scene->_vptr_DescribalBase + 54);
  if ( *(_BYTE *)((v12 >> 3) + 0x7FFF8000) )
    v12 = __asan_report_load8();
  ret = (*(__int64 (__fastcall **)(Scene *))v12)(scene);
  if ( ret )
  {
    common::milog::MiLogStream::create(
      (common::milog::MiLogStream *)&__rhs,
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/scene/player_scene_comp.cpp",
      "jumpToScene",
      1083);
    v13 = common::milog::MiLogStream::operator<<<char [24],(char *[24])0>(
            (common::milog::MiLogStream *const)&__rhs,
            (const char (*)[24])"scene is invalid, uid: ");
    if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
      __asan_report_load8();
    val = Player::getUid(this->player_);
    v14 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v13, &val);
    v15 = common::milog::MiLogStream::operator<<<char [13],(char *[13])0>(v14, (const char (*)[13])" ,scene_id: ");
    SceneId = Scene::getSceneId(scene);
    v16 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v15, &SceneId);
    v17 = common::milog::MiLogStream::operator<<<char [14],(char *[14])0>(v16, (const char (*)[14])" ,owner uid: ");
    OwnerUid = Scene::getOwnerUid(scene);
    common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v17, &OwnerUid);
    common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)&__rhs);
  }
  if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
    __asan_report_load8();
  if ( !Scene::checkEnterable(scene, this->player_) )
  {
    common::milog::MiLogStream::create(
      (common::milog::MiLogStream *)&__rhs,
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/scene/player_scene_comp.cpp",
      "jumpToScene",
      1088);
    v18 = common::milog::MiLogStream::operator<<<char [29],(char *[29])0>(
            (common::milog::MiLogStream *const)&__rhs,
            (const char (*)[29])"checkEnterable failed, uid: ");
    if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
      __asan_report_load8();
    val = Player::getUid(this->player_);
    v19 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v18, &val);
    v20 = common::milog::MiLogStream::operator<<<char [13],(char *[13])0>(v19, (const char (*)[13])" ,scene_id: ");
    SceneId = Scene::getSceneId(scene);
    v21 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v20, &SceneId);
    v22 = common::milog::MiLogStream::operator<<<char [14],(char *[14])0>(v21, (const char (*)[14])" ,owner uid: ");
    OwnerUid = Scene::getOwnerUid(scene);
    common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v22, &OwnerUid);
    common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)&__rhs);
    v6 = 562;
    goto LABEL_185;
  }
  MultistagePlayComp = Scene::getMultistagePlayComp(scene);
  TransferReason::TransferReason(&v109, p_reasona);
  if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
    __asan_report_load8();
  Uid = Player::getUid(this->player_);
  ret = SceneMultistagePlayComp::checkJumpToSceneValid(MultistagePlayComp, Uid, &v109);
  TransferReason::~TransferReason(&v109);
  if ( ret )
  {
    common::milog::MiLogStream::create(
      (common::milog::MiLogStream *)&__rhs,
      &common::milog::MiLogDefault::default_log_obj_,
      1u,
      "./src/scene/player_scene_comp.cpp",
      "jumpToScene",
      1096);
    v25 = common::milog::MiLogStream::operator<<<char [41],(char *[41])0>(
            (common::milog::MiLogStream *const)&__rhs,
            (const char (*)[41])"checkJumpSceneValid failed, reason_type:");
    if ( *(_BYTE *)(((unsigned __int64)p_reasona >> 3) + 0x7FFF8000) != 0
      && *(_BYTE *)(((unsigned __int64)p_reasona >> 3) + 0x7FFF8000) <= 3 )
    {
      __asan_report_load4(p_reasona);
    }
    SceneId = p_reasona->enter_reason;
    v26 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v25, &SceneId);
    v27 = common::milog::MiLogStream::operator<<<char [6],(char *[6])0>(v26, (const char (*)[6])", uid");
    if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
      __asan_report_load8();
LABEL_33:
    OwnerUid = Player::getUid(this->player_);
    common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v27, &OwnerUid);
    common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)&__rhs);
    v6 = ret;
    goto LABEL_185;
  }
  TransferGuardComp = Scene::getTransferGuardComp(scene);
  TransferReason::TransferReason(&v109, p_reasona);
  if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
    __asan_report_load8();
  v29 = Player::getUid(this->player_);
  ret = SceneTransferGuardComp::checkJumpToSceneValid(TransferGuardComp, v29, &v109);
  TransferReason::~TransferReason(&v109);
  if ( ret )
  {
    common::milog::MiLogStream::create(
      (common::milog::MiLogStream *)&__rhs,
      &common::milog::MiLogDefault::default_log_obj_,
      1u,
      "./src/scene/player_scene_comp.cpp",
      "jumpToScene",
      1102);
    v30 = common::milog::MiLogStream::operator<<<char [41],(char *[41])0>(
            (common::milog::MiLogStream *const)&__rhs,
            (const char (*)[41])"checkJumpSceneValid failed, reason_type:");
    if ( *(_BYTE *)(((unsigned __int64)p_reasona >> 3) + 0x7FFF8000) != 0
      && *(_BYTE *)(((unsigned __int64)p_reasona >> 3) + 0x7FFF8000) <= 3 )
    {
      __asan_report_load4(p_reasona);
    }
    SceneId = p_reasona->enter_reason;
    v31 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v30, &SceneId);
    v27 = common::milog::MiLogStream::operator<<<char [6],(char *[6])0>(v31, (const char (*)[6])", uid");
    if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
      __asan_report_load8();
    goto LABEL_33;
  }
  Scene::getGalleryComp(scene);
  SceneGalleryComp::getSceneTransferAwaiter((const SceneGalleryComp *const)(v7 + 224));
  if ( !std::operator!=<SceneTransferAwaiter>((const std::shared_ptr<SceneTransferAwaiter> *)(v7 + 224), 0LL) )
    goto LABEL_59;
  v32 = std::__shared_ptr_access<SceneTransferAwaiter,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<SceneTransferAwaiter,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v7 + 224));
  if ( !SceneTransferAwaiter::isActive(v32) )
    goto LABEL_59;
  v34 = std::__shared_ptr_access<SceneTransferAwaiter,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<SceneTransferAwaiter,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v7 + 224));
  if ( *(_BYTE *)(((unsigned __int64)v34 >> 3) + 0x7FFF8000) )
    __asan_report_load8();
  v35 = (unsigned __int64)(v34->_vptr_SceneTransferAwaiter + 12);
  if ( *(_BYTE *)((v35 >> 3) + 0x7FFF8000) )
    v35 = __asan_report_load8();
  v89 = *(SceneMultistagePlayComp **)v35;
  if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
    __asan_report_load8();
  v36 = Player::getUid(this->player_);
  ret = ((__int64 (__fastcall *)(std::__shared_ptr_access<SceneTransferAwaiter,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *, __int64, TransferReason *))v89)(
          v34,
          v36,
          p_reasona);
  if ( ret )
  {
    common::milog::MiLogStream::create(
      (common::milog::MiLogStream *)&__rhs,
      &common::milog::MiLogDefault::default_log_obj_,
      1u,
      "./src/scene/player_scene_comp.cpp",
      "jumpToScene",
      1113);
    v37 = common::milog::MiLogStream::operator<<<char [60],(char *[60])0>(
            (common::milog::MiLogStream *const)&__rhs,
            (const char (*)[60])"[TRANSFER_AWAITER] checkJumpSceneValid failed, reason_type:");
    if ( *(_BYTE *)(((unsigned __int64)p_reasona >> 3) + 0x7FFF8000) != 0
      && *(_BYTE *)(((unsigned __int64)p_reasona >> 3) + 0x7FFF8000) <= 3 )
    {
      __asan_report_load4(p_reasona);
    }
    SceneId = p_reasona->enter_reason;
    v38 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v37, &SceneId);
    v39 = common::milog::MiLogStream::operator<<<char [6],(char *[6])0>(v38, (const char (*)[6])", uid");
    if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
      __asan_report_load8();
    OwnerUid = Player::getUid(this->player_);
    common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v39, &OwnerUid);
    common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)&__rhs);
    v6 = ret;
    v40 = 0;
  }
  else
  {
LABEL_59:
    v40 = 1;
  }
  std::shared_ptr<SceneTransferAwaiter>::~shared_ptr((std::shared_ptr<SceneTransferAwaiter> *const)(v7 + 224));
  if ( v40 == 1 )
  {
    toThisPtr<Scene>((Scene *)(v7 + 96));
    enter_scene_type = ENTER_GOTO;
    vision_type = VISION_MEET;
    PlayerSceneComp::getCurScene((const PlayerSceneComp *const)(v7 + 128));
    v41 = 0;
    if ( !std::operator!=<Scene>((const std::shared_ptr<Scene> *)(v7 + 128), 0LL) )
      goto LABEL_66;
    v42 = std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v7 + 128));
    v90 = Scene::getMultistagePlayComp(v42);
    TransferReason::TransferReason(&v109, p_reasona);
    v41 = 1;
    if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
      __asan_report_load8();
    v43 = Player::getUid(this->player_);
    ret = SceneMultistagePlayComp::checkJumpToSceneValid(v90, v43, &v109);
    if ( ret )
      v91 = 1;
    else
LABEL_66:
      v91 = 0;
    if ( v41 )
      TransferReason::~TransferReason(&v109);
    if ( v91 )
    {
      common::milog::MiLogStream::create(
        (common::milog::MiLogStream *)&__rhs,
        &common::milog::MiLogDefault::default_log_obj_,
        1u,
        "./src/scene/player_scene_comp.cpp",
        "jumpToScene",
        1126);
      v44 = common::milog::MiLogStream::operator<<<char [41],(char *[41])0>(
              (common::milog::MiLogStream *const)&__rhs,
              (const char (*)[41])"checkJumpSceneValid failed, reason_type:");
      if ( *(_BYTE *)(((unsigned __int64)p_reasona >> 3) + 0x7FFF8000) != 0
        && *(_BYTE *)(((unsigned __int64)p_reasona >> 3) + 0x7FFF8000) <= 3 )
      {
        __asan_report_load4(p_reasona);
      }
      SceneId = p_reasona->enter_reason;
      v45 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v44, &SceneId);
      v46 = common::milog::MiLogStream::operator<<<char [6],(char *[6])0>(v45, (const char (*)[6])", uid");
      if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
        __asan_report_load8();
    }
    else
    {
      v47 = 0;
      if ( !std::operator!=<Scene>((const std::shared_ptr<Scene> *)(v7 + 128), 0LL) )
        goto LABEL_80;
      v48 = std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v7 + 128));
      v92 = Scene::getTransferGuardComp(v48);
      TransferReason::TransferReason(&v109, p_reasona);
      v47 = 1;
      if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
        __asan_report_load8();
      v49 = Player::getUid(this->player_);
      ret = SceneTransferGuardComp::checkJumpToSceneValid(v92, v49, &v109);
      if ( ret )
        v93 = 1;
      else
LABEL_80:
        v93 = 0;
      if ( v47 )
        TransferReason::~TransferReason(&v109);
      if ( !v93 )
      {
        if ( std::operator!=<Scene>((const std::shared_ptr<Scene> *)(v7 + 128), 0LL) )
        {
          v52 = std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v7 + 128));
          Scene::getGalleryComp(v52);
          SceneGalleryComp::getSceneTransferAwaiter((const SceneGalleryComp *const)(v7 + 224));
          if ( !std::operator!=<SceneTransferAwaiter>((const std::shared_ptr<SceneTransferAwaiter> *)(v7 + 224), 0LL) )
            goto LABEL_107;
          v53 = std::__shared_ptr_access<SceneTransferAwaiter,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<SceneTransferAwaiter,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v7 + 224));
          if ( !SceneTransferAwaiter::isActive(v53) )
            goto LABEL_107;
          v55 = std::__shared_ptr_access<SceneTransferAwaiter,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<SceneTransferAwaiter,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v7 + 224));
          if ( *(_BYTE *)(((unsigned __int64)v55 >> 3) + 0x7FFF8000) )
            __asan_report_load8();
          v56 = (unsigned __int64)(v55->_vptr_SceneTransferAwaiter + 12);
          if ( *(_BYTE *)((v56 >> 3) + 0x7FFF8000) )
            v56 = __asan_report_load8();
          v94 = *(SceneMultistagePlayComp **)v56;
          if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
            __asan_report_load8();
          v57 = Player::getUid(this->player_);
          ret = ((__int64 (__fastcall *)(std::__shared_ptr_access<SceneTransferAwaiter,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *, __int64, TransferReason *))v94)(
                  v55,
                  v57,
                  p_reasona);
          if ( ret )
          {
            common::milog::MiLogStream::create(
              (common::milog::MiLogStream *)&__rhs,
              &common::milog::MiLogDefault::default_log_obj_,
              1u,
              "./src/scene/player_scene_comp.cpp",
              "jumpToScene",
              1143);
            v58 = common::milog::MiLogStream::operator<<<char [60],(char *[60])0>(
                    (common::milog::MiLogStream *const)&__rhs,
                    (const char (*)[60])"[TRANSFER_AWAITER] checkJumpSceneValid failed, reason_type:");
            if ( *(_BYTE *)(((unsigned __int64)p_reasona >> 3) + 0x7FFF8000) != 0
              && *(_BYTE *)(((unsigned __int64)p_reasona >> 3) + 0x7FFF8000) <= 3 )
            {
              __asan_report_load4(p_reasona);
            }
            SceneId = p_reasona->enter_reason;
            v59 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v58, &SceneId);
            v60 = common::milog::MiLogStream::operator<<<char [6],(char *[6])0>(v59, (const char (*)[6])", uid");
            if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
              __asan_report_load8();
            OwnerUid = Player::getUid(this->player_);
            common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v60, &OwnerUid);
            common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)&__rhs);
            v6 = ret;
            v61 = 0;
          }
          else
          {
LABEL_107:
            v61 = 1;
          }
          std::shared_ptr<SceneTransferAwaiter>::~shared_ptr((std::shared_ptr<SceneTransferAwaiter> *const)(v7 + 224));
          if ( v61 != 1 )
            goto LABEL_184;
        }
        if ( std::operator!=<Scene,Scene>(
               (const std::shared_ptr<Scene> *)(v7 + 128),
               (const std::shared_ptr<Scene> *)(v7 + 96)) )
        {
          dest_scene_type = Scene::getSceneType(scene);
          if ( dest_scene_type == SCENE_DUNGEON )
          {
            enter_scene_type = ENTER_DUNGEON;
          }
          else if ( SceneExcelConfigMgr::isHomeScene(dest_scene_type) )
          {
            v62 = Scene::getOwnerUid(scene);
            if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
              __asan_report_load8();
            if ( v62 == Player::getUid(this->player_) )
              enter_scene_type = ENTER_SELF_HOME;
            else
              enter_scene_type = ENTER_OTHER_HOME;
          }
          else
          {
            Scene::getOwnPlayer((const Scene *const)(v7 + 192));
            if ( std::operator!=<Player>((const std::shared_ptr<Player> *)(v7 + 192), 0LL) )
            {
              if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
                __asan_report_load8();
              toThisPtr<Player>((Player *)(v7 + 224));
              if ( std::operator!=<Player,Player>(
                     (const std::shared_ptr<Player> *)(v7 + 192),
                     (const std::shared_ptr<Player> *)(v7 + 224)) )
              {
                enter_scene_type = ENTER_OTHER;
              }
              else
              {
                if ( *(_BYTE *)(((unsigned __int64)&this->cur_world_owner_uid_ >> 3) + 0x7FFF8000) != 0
                  && *(_BYTE *)(((unsigned __int64)&this->cur_world_owner_uid_ >> 3) + 0x7FFF8000) <= 3 )
                {
                  __asan_report_load4(&this->cur_world_owner_uid_);
                }
                if ( !this->cur_world_owner_uid_ )
                  goto LABEL_130;
                cur_world_owner_uid = this->cur_world_owner_uid_;
                if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
                  __asan_report_load8();
                if ( cur_world_owner_uid == Player::getUid(this->player_) )
LABEL_130:
                  v64 = 0;
                else
                  v64 = 1;
                if ( v64 )
                  enter_scene_type = ENTER_BACK;
                else
                  enter_scene_type = ENTER_JUMP;
              }
              std::shared_ptr<Player>::~shared_ptr((std::shared_ptr<Player> *const)(v7 + 224));
            }
            std::shared_ptr<Player>::~shared_ptr((std::shared_ptr<Player> *const)(v7 + 192));
          }
        }
        else
        {
          if ( point_typea == 2 )
            enter_scene_type = ENTER_GOTO_BY_PORTAL;
          vision_type = VISION_TRANSPORT;
          PlayerSceneComp::getDestScene((const PlayerSceneComp *const)(v7 + 160));
          if ( std::operator!=<Scene>((const std::shared_ptr<Scene> *)(v7 + 160), 0LL)
            && (v65 = std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v7 + 160)),
                Scene::getIsStarted(v65))
            && PlayerSceneComp::getDestEnterType(this) != ENTER_GOTO )
          {
            common::milog::MiLogStream::create(
              (common::milog::MiLogStream *)&__rhs,
              &common::milog::MiLogDefault::default_log_obj_,
              1u,
              "./src/scene/player_scene_comp.cpp",
              "jumpToScene",
              1203);
            v67 = common::milog::MiLogStream::operator<<<char [50],(char *[50])0>(
                    (common::milog::MiLogStream *const)&__rhs,
                    (const char (*)[50])"cannot goto while in enter scene process, player:");
            if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
              __asan_report_load8();
            v68 = operator<<(v67, this->player_);
            v69 = common::milog::MiLogStream::operator<<<char [13],(char *[13])0>(
                    v68,
                    (const char (*)[13])" goto_scene:");
            v70 = std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::operator*((const std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v7 + 96));
            common::milog::MiLogStream::operator<<<Scene,(Scene*)0>(v69, v70);
            common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)&__rhs);
            common::tools::perf::make_shared<proto::ServerLogNotify>();
            v71 = std::__shared_ptr_access<proto::ServerLogNotify,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<proto::ServerLogNotify,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v7 + 192));
            proto::ServerLogNotify::set_log_level(v71, LOG_LEVEL_INFO_0);
            v72 = (unsigned __int64)std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v7 + 96));
            if ( *(_BYTE *)((v72 >> 3) + 0x7FFF8000) )
              v72 = __asan_report_load8();
            v73 = *(void (__fastcall ***)(std::string *, unsigned __int64))v72;
            if ( *(_BYTE *)((*(_QWORD *)v72 >> 3) + 0x7FFF8000LL) )
              v72 = __asan_report_load8();
            (*v73)(&__rhs, v72);
            std::operator+<char>((std::string *)(v7 + 256), &byte_2517ED40, &__rhs);
            std::string::~string(&__rhs);
            v74 = std::__shared_ptr_access<proto::ServerLogNotify,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<proto::ServerLogNotify,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v7 + 192));
            proto::ServerLogNotify::set_server_log(v74, (const std::string *)(v7 + 256));
            if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
              __asan_report_load8();
            player = this->player_;
            std::dynamic_pointer_cast<google::protobuf::Message const,proto::ServerLogNotify>((const std::shared_ptr<proto::ServerLogNotify> *)(v7 + 224));
            Player::sendMessage(player, (common::minet::ConstMessagePtr *)(v7 + 224), 0LL);
            std::shared_ptr<google::protobuf::Message const>::~shared_ptr((std::shared_ptr<const google::protobuf::Message> *const)(v7 + 224));
            v6 = -1;
            std::string::~string((void *)(v7 + 256));
            std::shared_ptr<proto::ServerLogNotify>::~shared_ptr((std::shared_ptr<proto::ServerLogNotify> *const)(v7 + 192));
            v76 = 0;
          }
          else
          {
            v76 = 1;
          }
          std::shared_ptr<Scene>::~shared_ptr((std::shared_ptr<Scene> *const)(v7 + 160));
          if ( v76 != 1 )
            goto LABEL_184;
        }
        if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
          __asan_report_load8();
        v77 = this->player_;
        if ( *(_BYTE *)(((unsigned __int64)p_reasona >> 3) + 0x7FFF8000) != 0
          && *(_BYTE *)(((unsigned __int64)p_reasona >> 3) + 0x7FFF8000) <= 3 )
        {
          __asan_report_load4(p_reasona);
        }
        enter_reason = p_reasona->enter_reason;
        std::shared_ptr<Scene>::shared_ptr(
          (std::shared_ptr<Scene> *const)(v7 + 224),
          (const std::shared_ptr<Scene> *)(v7 + 96));
        ret = Player::beginEnterScene(
                v77,
                (ScenePtr *)(v7 + 224),
                pos,
                rot,
                enter_scene_type,
                vision_type,
                0,
                0,
                enter_reason);
        std::shared_ptr<Scene>::~shared_ptr((std::shared_ptr<Scene> *const)(v7 + 224));
        if ( ret )
        {
          common::milog::MiLogStream::create(
            (common::milog::MiLogStream *)&__rhs,
            &common::milog::MiLogDefault::default_log_obj_,
            3u,
            "./src/scene/player_scene_comp.cpp",
            "jumpToScene",
            1217);
          v79 = common::milog::MiLogStream::operator<<<char [27],(char *[27])0>(
                  (common::milog::MiLogStream *const)&__rhs,
                  (const char (*)[27])"beginTransToScenePos fails");
          common::milog::MiLogStream::operator<<<Scene,(Scene*)0>(v79, scene);
          common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)&__rhs);
          v6 = ret;
        }
        else
        {
          common::tools::perf::make_shared<proto_log::PlayerLogBodyTransport>();
          v80 = std::__shared_ptr_access<proto_log::PlayerLogBodyTransport,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<proto_log::PlayerLogBodyTransport,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v7 + 160));
          point_log = proto_log::PlayerLogBodyTransport::mutable_to_point_log(v80);
          v81 = Scene::getSceneId(scene);
          proto_log::ScenePointLog::set_scene_id(point_log, v81);
          if ( *(_BYTE *)(((unsigned __int64)&p_reasona->point_id >> 3) + 0x7FFF8000) != 0
            && (char)((((_BYTE)p_reasona + 4) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&p_reasona->point_id >> 3)
                                                                    + 0x7FFF8000) )
          {
            __asan_report_load4(&p_reasona->point_id);
          }
          proto_log::ScenePointLog::set_point_id(point_log, p_reasona->point_id);
          if ( *(_BYTE *)(((unsigned __int64)&p_reasona->type >> 3) + 0x7FFF8000) != 0
            && *(_BYTE *)(((unsigned __int64)&p_reasona->type >> 3) + 0x7FFF8000) <= 3 )
          {
            __asan_report_load4(&p_reasona->type);
          }
          proto_log::ScenePointLog::set_type(point_log, p_reasona->type);
          proto_log::ScenePointLog::set_dollar_type(point_log, &p_reasona->point_type_name);
          if ( *(_BYTE *)(((unsigned __int64)pos >> 3) + 0x7FFF8000) != 0
            && (char)(((unsigned __int8)pos & 7) + 3) >= *(_BYTE *)(((unsigned __int64)pos >> 3) + 0x7FFF8000) )
          {
            __asan_report_load4(pos);
          }
          proto_log::ScenePointLog::set_x_coordinate(point_log, (int)pos->x);
          if ( *(_BYTE *)(((unsigned __int64)&pos->y >> 3) + 0x7FFF8000) != 0
            && (char)((((_BYTE)pos + 4) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&pos->y >> 3) + 0x7FFF8000) )
          {
            __asan_report_load4(&pos->y);
          }
          proto_log::ScenePointLog::set_y_coordinate(point_log, (int)pos->y);
          if ( *(_BYTE *)(((unsigned __int64)&pos->z >> 3) + 0x7FFF8000) != 0
            && (char)((((_BYTE)pos + 8) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&pos->z >> 3) + 0x7FFF8000) )
          {
            __asan_report_load4(&pos->z);
          }
          proto_log::ScenePointLog::set_z_coordinate(point_log, (int)pos->z);
          v82 = std::__shared_ptr_access<proto_log::PlayerLogBodyTransport,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<proto_log::PlayerLogBodyTransport,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v7 + 160));
          if ( *(char *)(((unsigned __int64)&p_reasona->is_by_anchor_point >> 3) + 0x7FFF8000) < 0 )
            __asan_report_load1(&p_reasona->is_by_anchor_point);
          proto_log::PlayerLogBodyTransport::set_is_by_anchor_point(v82, p_reasona->is_by_anchor_point);
          if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
            __asan_report_load8();
          v83 = this->player_;
          std::shared_ptr<google::protobuf::Message>::shared_ptr(
            (std::shared_ptr<google::protobuf::Message> *const)(v7 + 224),
            0LL);
          std::shared_ptr<google::protobuf::Message>::shared_ptr<proto_log::PlayerLogBodyTransport,void>(
            (std::shared_ptr<google::protobuf::Message> *const)(v7 + 192),
            (const std::shared_ptr<proto_log::PlayerLogBodyTransport> *)(v7 + 160));
          Player::printStatLog(v83, (MessagePtr *)(v7 + 192), (MessagePtr *)(v7 + 224), 0xEu);
          std::shared_ptr<google::protobuf::Message>::~shared_ptr((std::shared_ptr<google::protobuf::Message> *const)(v7 + 192));
          std::shared_ptr<google::protobuf::Message>::~shared_ptr((std::shared_ptr<google::protobuf::Message> *const)(v7 + 224));
          if ( *(_BYTE *)(((unsigned __int64)&p_reasona->point_id >> 3) + 0x7FFF8000) != 0
            && (char)((((_BYTE)p_reasona + 4) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&p_reasona->point_id >> 3)
                                                                    + 0x7FFF8000) )
          {
            __asan_report_load4(&p_reasona->point_id);
          }
          if ( p_reasona->point_id )
          {
            if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
              __asan_report_load8();
            WatcherComp = Player::getWatcherComp(this->player_);
            v85 = Scene::getSceneId(scene);
            if ( *(_BYTE *)(((unsigned __int64)&p_reasona->point_id >> 3) + 0x7FFF8000) != 0
              && (char)((((_BYTE)p_reasona + 4) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&p_reasona->point_id >> 3)
                                                                      + 0x7FFF8000) )
            {
              __asan_report_load4(&p_reasona->point_id);
            }
            PlayerWatcherComp::triggerTeleportWithCertainPortal(WatcherComp, p_reasona->point_id, v85);
          }
          v6 = 0;
          std::shared_ptr<proto_log::PlayerLogBodyTransport>::~shared_ptr((std::shared_ptr<proto_log::PlayerLogBodyTransport> *const)(v7 + 160));
        }
LABEL_184:
        std::shared_ptr<Scene>::~shared_ptr((std::shared_ptr<Scene> *const)(v7 + 128));
        std::shared_ptr<Scene>::~shared_ptr((std::shared_ptr<Scene> *const)(v7 + 96));
        goto LABEL_185;
      }
      common::milog::MiLogStream::create(
        (common::milog::MiLogStream *)&__rhs,
        &common::milog::MiLogDefault::default_log_obj_,
        1u,
        "./src/scene/player_scene_comp.cpp",
        "jumpToScene",
        1131);
      v50 = common::milog::MiLogStream::operator<<<char [41],(char *[41])0>(
              (common::milog::MiLogStream *const)&__rhs,
              (const char (*)[41])"checkJumpSceneValid failed, reason_type:");
      if ( *(_BYTE *)(((unsigned __int64)p_reasona >> 3) + 0x7FFF8000) != 0
        && *(_BYTE *)(((unsigned __int64)p_reasona >> 3) + 0x7FFF8000) <= 3 )
      {
        __asan_report_load4(p_reasona);
      }
      SceneId = p_reasona->enter_reason;
      v51 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v50, &SceneId);
      v46 = common::milog::MiLogStream::operator<<<char [6],(char *[6])0>(v51, (const char (*)[6])", uid");
      if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
        __asan_report_load8();
    }
    OwnerUid = Player::getUid(this->player_);
    common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v46, &OwnerUid);
    common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)&__rhs);
    v6 = ret;
    goto LABEL_184;
  }
LABEL_185:
  std::shared_ptr<Avatar>::~shared_ptr((std::shared_ptr<Avatar> *const)(v7 + 64));
  StatLogUtils::ContextHolder::~ContextHolder((StatLogUtils::ContextHolder *const)(v7 + 48));
  result = v6;
  if ( v88 == (char *)v7 )
  {
    *(_QWORD *)((v7 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v7 >> 3) + 0x7FFF8008) = 0LL;
    *(_QWORD *)((v7 >> 3) + 0x7FFF8010) = 0LL;
    *(_QWORD *)((v7 >> 3) + 0x7FFF8018) = 0LL;
    *(_DWORD *)((v7 >> 3) + 0x7FFF8024) = 0;
  }
  else
  {
    *(_QWORD *)v7 = 1172321806LL;
    *(_QWORD *)((v7 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v7 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v7 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v7 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v7 >> 3) + 0x7FFF8020) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 1240: range 0000000013E4685E-0000000013E4724B
__int64 __fastcall PlayerSceneComp::unlockPointFromClient(
        PlayerSceneComp *const this,
        uint32_t scene_id,
        uint32_t point_id,
        bool is_notify)
{
  unsigned __int64 v4; // r13
  __int64 v5; // rax
  _DWORD *v6; // r12
  std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v7; // rax
  common::milog::MiLogStream *v8; // rax
  unsigned int v9; // r14d
  unsigned int v10; // eax
  common::milog::MiLogStream *v11; // rax
  std::__shared_ptr_access<data::DungeonEntry,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v12; // rdx
  bool *p_forbid_simple_unlock; // rax
  char v14; // al
  common::milog::MiLogStream *v15; // rax
  common::milog::MiLogStream *v16; // rax
  common::milog::MiLogStream *v17; // rax
  GadgetExcelConfigMgr *p_gadget_config_mgr; // r14
  std::__shared_ptr_access<data::SceneTransPoint,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v19; // rdx
  uint32_t *p_gadget_id; // rax
  common::milog::MiLogStream *v21; // r14
  std::__shared_ptr_access<data::SceneTransPoint,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v22; // rax
  data::EntityType type; // eax
  common::milog::MiLogStream *v24; // r14
  common::milog::MiLogStream *v25; // rax
  common::milog::MiLogStream *v26; // r14
  std::__shared_ptr_access<data::SceneTransPoint,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v27; // rax
  std::__shared_ptr_access<data::SceneTransPoint,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v28; // rax
  std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v29; // rax
  const Vector3 *Position; // rax
  float Distance; // xmm0_4
  common::milog::MiLogStream *v32; // r14
  std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v33; // rax
  common::milog::MiLogStream *v34; // rax
  common::milog::MiLogStream *v35; // rax
  __int64 result; // rax
  char *val; // [rsp+28h] [rbp-118h] BYREF
  const SceneJsonConfig *scene_json_config_ptr; // [rsp+30h] [rbp-110h]
  const data::GadgetExcelConfig *gadget_config_ptr; // [rsp+38h] [rbp-108h]
  Vector3 pos2; // [rsp+44h] [rbp-FCh] BYREF
  common::milog::MiLogStream v43; // [rsp+50h] [rbp-F0h] BYREF
  char v44[208]; // [rsp+70h] [rbp-D0h] BYREF

  v4 = (unsigned __int64)v44;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v5 = __asan_stack_malloc_2(160LL);
    if ( v5 )
      v4 = v5;
  }
  *(_QWORD *)v4 = 1102416563LL;
  *(_QWORD *)(v4 + 8) = "5 32 4 13 scene_id:1239 48 4 13 point_id:1239 64 16 20 trans_point_ptr:1247 96 16 22 dungeon_ent"
                        "ry_ptr:1253 128 16 19 cur_avatar_ptr:1278";
  *(_QWORD *)(v4 + 16) = PlayerSceneComp::unlockPointFromClient;
  v6 = (_DWORD *)(v4 >> 3);
  v6[536862720] = -235802127;
  v6[536862721] = -234556924;
  v6[536862722] = -219021312;
  v6[536862723] = -219021312;
  v6[536862724] = -202178560;
  *(_DWORD *)(v4 + 32) = scene_id;
  *(_DWORD *)(v4 + 48) = point_id;
  ServiceBox::findService<GameserverService>();
  GameserverService::getConfig((GameserverService *const)(v4 + 128));
  v7 = std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 128));
  scene_json_config_ptr = JsonConfigMgr::findSceneJsonConfig(&v7->design_config.json_config_mgr, *(_DWORD *)(v4 + 32));
  std::shared_ptr<Config>::~shared_ptr((std::shared_ptr<Config> *const)(v4 + 128));
  if ( !scene_json_config_ptr )
  {
    common::milog::MiLogStream::create(
      &v43,
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/scene/player_scene_comp.cpp",
      "unlockPointFromClient",
      1244);
    v8 = common::milog::MiLogStream::operator<<<char [37],(char *[37])0>(
           &v43,
           (const char (*)[37])"findSceneJsonConfig fails, scene_id:");
    common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v8, (const unsigned int *)(v4 + 32));
    common::milog::MiLogStream::~MiLogStream(&v43);
    v9 = -1;
    goto LABEL_43;
  }
  ServiceBox::findService<GameserverService>();
  GameserverService::getConfig((GameserverService *const)(v4 + 128));
  v10 = (unsigned int)std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 128));
  JsonConfigMgr::findScenePoint<data::SceneTransPoint>(
    (const JsonConfigMgr *const)(v4 + 64),
    v10 + 93080,
    *(_DWORD *)(v4 + 32));
  std::shared_ptr<Config>::~shared_ptr((std::shared_ptr<Config> *const)(v4 + 128));
  if ( !std::operator==<data::SceneTransPoint>((const std::shared_ptr<data::SceneTransPoint> *)(v4 + 64), 0LL) )
  {
    std::dynamic_pointer_cast<data::DungeonEntry,data::SceneTransPoint>((const std::shared_ptr<data::SceneTransPoint> *)(v4 + 96));
    if ( !std::operator!=<data::DungeonEntry>((const std::shared_ptr<data::DungeonEntry> *)(v4 + 96), 0LL) )
      goto LABEL_13;
    v12 = std::__shared_ptr_access<data::DungeonEntry,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<data::DungeonEntry,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 96));
    p_forbid_simple_unlock = &v12->forbid_simple_unlock;
    if ( *(_BYTE *)(((unsigned __int64)p_forbid_simple_unlock >> 3) + 0x7FFF8000) != 0
      && ((unsigned __int8)p_forbid_simple_unlock & 7) >= *(_BYTE *)(((unsigned __int64)p_forbid_simple_unlock >> 3)
                                                                   + 0x7FFF8000) )
    {
      __asan_report_load1(p_forbid_simple_unlock);
    }
    if ( v12->forbid_simple_unlock )
      v14 = 1;
    else
LABEL_13:
      v14 = 0;
    if ( v14 )
    {
      common::milog::MiLogStream::create(
        &v43,
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/scene/player_scene_comp.cpp",
        "unlockPointFromClient",
        1256);
      v15 = common::milog::MiLogStream::operator<<<char [45],(char *[45])0>(
              &v43,
              (const char (*)[45])"DungeonEntry forbid simple unlock, scene_id:");
      v16 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v15, (const unsigned int *)(v4 + 32));
      v17 = common::milog::MiLogStream::operator<<<char [11],(char *[11])0>(v16, (const char (*)[11])" point_id:");
      common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v17, (const unsigned int *)(v4 + 48));
      common::milog::MiLogStream::~MiLogStream(&v43);
      v9 = -1;
    }
    else
    {
      ServiceBox::findService<GameserverService>();
      GameserverService::getConfig((GameserverService *const)(v4 + 128));
      p_gadget_config_mgr = &std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 128))->design_config.txt_config_mgr.gadget_config_mgr;
      v19 = std::__shared_ptr_access<data::SceneTransPoint,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<data::SceneTransPoint,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 64));
      p_gadget_id = &v19->gadget_id;
      if ( *(_BYTE *)(((unsigned __int64)p_gadget_id >> 3) + 0x7FFF8000) != 0
        && (char)(((unsigned __int8)p_gadget_id & 7) + 3) >= *(_BYTE *)(((unsigned __int64)p_gadget_id >> 3) + 0x7FFF8000) )
      {
        __asan_report_load4(p_gadget_id);
      }
      gadget_config_ptr = data::GadgetExcelConfigMgrBase::findGadgetExcelConfig(p_gadget_config_mgr, v19->gadget_id);
      std::shared_ptr<Config>::~shared_ptr((std::shared_ptr<Config> *const)(v4 + 128));
      if ( gadget_config_ptr )
      {
        if ( *(_BYTE *)(((unsigned __int64)&gadget_config_ptr->type >> 3) + 0x7FFF8000) != 0
          && (char)((((_BYTE)gadget_config_ptr + 84) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&gadget_config_ptr->type >> 3)
                                                                           + 0x7FFF8000) )
        {
          __asan_report_load4(&gadget_config_ptr->type);
        }
        type = gadget_config_ptr->type;
        if ( type == TransPointSecondGadget )
          goto LABEL_27;
        if ( type > TransPointSecondGadget )
          goto LABEL_28;
        if ( type == TransPointSecond || type == TransPointFirst )
        {
          if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
            __asan_report_load8();
          Player::getCurAvatar((Player *const)(v4 + 128));
          if ( std::operator==<Avatar>((const std::shared_ptr<Avatar> *)(v4 + 128), 0LL) )
          {
            common::milog::MiLogStream::create(
              &v43,
              &common::milog::MiLogDefault::default_log_obj_,
              3u,
              "./src/scene/player_scene_comp.cpp",
              "unlockPointFromClient",
              1281);
            common::milog::MiLogStream::operator<<<char [23],(char *[23])0>(
              &v43,
              (const char (*)[23])"cur_avatar_ptr is null");
            common::milog::MiLogStream::~MiLogStream(&v43);
            v9 = -1;
          }
          else
          {
            v28 = std::__shared_ptr_access<data::SceneTransPoint,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<data::SceneTransPoint,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 64));
            Vector3::Vector3(&pos2, &v28->pos);
            v29 = std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 128));
            Position = Entity::getPosition((const Entity *const)v29);
            Distance = getDistance(Position, &pos2);
            if ( *(_BYTE *)(((unsigned __int64)&scene_json_config_ptr->trans_radius >> 3) + 0x7FFF8000) != 0
              && *(_BYTE *)(((unsigned __int64)&scene_json_config_ptr->trans_radius >> 3) + 0x7FFF8000) <= 3 )
            {
              __asan_report_load4(&scene_json_config_ptr->trans_radius);
            }
            if ( Distance > scene_json_config_ptr->trans_radius )
            {
              common::milog::MiLogStream::create(
                &v43,
                &common::milog::MiLogDefault::default_log_obj_,
                1u,
                "./src/scene/player_scene_comp.cpp",
                "unlockPointFromClient",
                1286);
              v32 = common::milog::MiLogStream::operator<<<char [36],(char *[36])0>(
                      &v43,
                      (const char (*)[36])"avatar is too far from trans point!");
              v33 = std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::operator*((const std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 128));
              v34 = common::milog::MiLogStream::operator<<<Avatar,(Avatar*)0>(v32, v33);
              v35 = common::milog::MiLogStream::operator<<<char [12],(char *[12])0>(
                      v34,
                      (const char (*)[12])", point_id:");
              common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                v35,
                (const unsigned int *)(v4 + 48));
              common::milog::MiLogStream::~MiLogStream(&v43);
            }
            v9 = PlayerSceneComp::unlockPoint(this, *(_DWORD *)(v4 + 32), *(_DWORD *)(v4 + 48), is_notify);
          }
          std::shared_ptr<Avatar>::~shared_ptr((std::shared_ptr<Avatar> *const)(v4 + 128));
          goto LABEL_41;
        }
        if ( type == TransPointFirstGadget )
        {
LABEL_27:
          v9 = 0;
        }
        else
        {
LABEL_28:
          common::milog::MiLogStream::create(
            &v43,
            &common::milog::MiLogDefault::default_log_obj_,
            3u,
            "./src/scene/player_scene_comp.cpp",
            "unlockPointFromClient",
            1275);
          v24 = common::milog::MiLogStream::operator<<<char [14],(char *[14])0>(
                  &v43,
                  (const char (*)[14])"invalid type:");
          if ( *(_BYTE *)(((unsigned __int64)&gadget_config_ptr->type >> 3) + 0x7FFF8000) != 0
            && (char)((((_BYTE)gadget_config_ptr + 84) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&gadget_config_ptr->type >> 3)
                                                                             + 0x7FFF8000) )
          {
            __asan_report_load4(&gadget_config_ptr->type);
          }
          val = (char *)data::enumValToStr(gadget_config_ptr->type);
          v25 = common::milog::MiLogStream::operator<<<char const*,(char const**)0>(v24, (const char *const *)&val);
          v26 = common::milog::MiLogStream::operator<<<char [13],(char *[13])0>(v25, (const char (*)[13])", gadget_id:");
          v27 = std::__shared_ptr_access<data::SceneTransPoint,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<data::SceneTransPoint,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 64));
          common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v26, &v27->gadget_id);
          common::milog::MiLogStream::~MiLogStream(&v43);
          v9 = -1;
        }
      }
      else
      {
        common::milog::MiLogStream::create(
          &v43,
          &common::milog::MiLogDefault::default_log_obj_,
          3u,
          "./src/scene/player_scene_comp.cpp",
          "unlockPointFromClient",
          1262);
        v21 = common::milog::MiLogStream::operator<<<char [40],(char *[40])0>(
                &v43,
                (const char (*)[40])"findGadgetExcelConfig fails, gadget_id:");
        v22 = std::__shared_ptr_access<data::SceneTransPoint,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<data::SceneTransPoint,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 64));
        common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v21, &v22->gadget_id);
        common::milog::MiLogStream::~MiLogStream(&v43);
        v9 = -1;
      }
    }
LABEL_41:
    std::shared_ptr<data::DungeonEntry>::~shared_ptr((std::shared_ptr<data::DungeonEntry> *const)(v4 + 96));
    goto LABEL_42;
  }
  common::milog::MiLogStream::create(
    &v43,
    &common::milog::MiLogDefault::default_log_obj_,
    3u,
    "./src/scene/player_scene_comp.cpp",
    "unlockPointFromClient",
    1250);
  v11 = common::milog::MiLogStream::operator<<<char [32],(char *[32])0>(
          &v43,
          (const char (*)[32])"findScenePoint fails, scene_id:");
  common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v11, (const unsigned int *)(v4 + 32));
  common::milog::MiLogStream::~MiLogStream(&v43);
  v9 = -1;
LABEL_42:
  std::shared_ptr<data::SceneTransPoint>::~shared_ptr((std::shared_ptr<data::SceneTransPoint> *const)(v4 + 64));
LABEL_43:
  result = v9;
  if ( v44 == (char *)v4 )
  {
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8008) = 0LL;
    *(_DWORD *)((v4 >> 3) + 0x7FFF8010) = 0;
  }
  else
  {
    *(_QWORD *)v4 = 1172321806LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v4 >> 3) + 0x7FFF8010) = -168430091;
  }
  return result;
};

// Line 1294: range 0000000013E4724C-0000000013E4740F
__int64 __fastcall PlayerSceneComp::unlockPoint(
        PlayerSceneComp *const this,
        uint32_t scene_id,
        uint32_t point_id,
        bool is_notify)
{
  unsigned __int64 v4; // rbx
  __int64 v5; // rax
  _DWORD *v6; // r12
  unsigned int v7; // r14d
  __int64 result; // rax
  std::allocator<unsigned int> __a; // [rsp+2Fh] [rbp-B1h] BYREF
  char v12[176]; // [rsp+30h] [rbp-B0h] BYREF

  v4 = (unsigned __int64)v12;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v5 = __asan_stack_malloc_1(128LL);
    if ( v5 )
      v4 = v5;
  }
  *(_QWORD *)v4 = 1102416563LL;
  *(_QWORD *)(v4 + 8) = "2 48 4 13 point_id:1293 64 24 17 point_id_vec:1295";
  *(_QWORD *)(v4 + 16) = PlayerSceneComp::unlockPoint;
  v6 = (_DWORD *)(v4 >> 3);
  v6[536862720] = -235802127;
  v6[536862721] = -234556943;
  v6[536862722] = -218103808;
  v6[536862723] = -202116109;
  *(_DWORD *)(v4 + 48) = point_id;
  std::allocator<unsigned int>::allocator(&__a);
  std::vector<unsigned int>::vector(
    (std::vector<unsigned int> *const)(v4 + 64),
    1uLL,
    (const std::vector<unsigned int>::value_type *)(v4 + 48),
    &__a);
  std::allocator<unsigned int>::~allocator(&__a);
  v7 = PlayerSceneComp::unlockPoint(this, scene_id, (const std::vector<unsigned int> *)(v4 + 64), is_notify);
  std::vector<unsigned int>::~vector((std::vector<unsigned int> *const)(v4 + 64));
  result = v7;
  if ( v12 == (char *)v4 )
  {
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v4 = 1172321806LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 1300: range 0000000013E47410-0000000013E47F23
__int64 __fastcall PlayerSceneComp::unlockPoint(
        PlayerSceneComp *const this,
        __int32 scene_id,
        const std::vector<unsigned int> *point_id_vec,
        __int8 is_notify)
{
  unsigned int v4; // r14d
  unsigned __int64 v5; // r13
  __int64 v6; // rax
  _DWORD *v7; // r12
  PlayerBasicComp *BasicComp; // rax
  common::milog::MiLogStream *v9; // r14
  common::milog::MiLogStream *v10; // rax
  common::milog::MiLogStream *v11; // rax
  __gnu_cxx::__normal_iterator<unsigned int const*,std::vector<unsigned int> >::reference v12; // rax
  _DWORD *v13; // rdx
  unsigned int v14; // eax
  common::milog::MiLogStream *v15; // rax
  int v16; // r15d
  bool v17; // r15
  common::milog::MiLogStream *v18; // rax
  common::milog::MiLogStream *v19; // rax
  common::milog::MiLogStream *v20; // rax
  unsigned __int64 v21; // rax
  unsigned __int64 v22; // rdx
  common::milog::MiLogStream *v23; // r14
  common::milog::MiLogStream *v24; // rax
  common::milog::MiLogStream *v25; // rax
  common::milog::MiLogStream *v26; // rax
  common::milog::MiLogStream *v27; // rax
  PlayerWatcherComp *WatcherComp; // rax
  std::__shared_ptr_access<proto_log::PlayerLogBodyUnlockPoint,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v29; // rax
  proto_log::ScenePointLog *v30; // rax
  Player *player; // r15
  PlayerWorldScene *v32; // rax
  __int64 result; // rax
  std::string v34; // [rsp+0h] [rbp-220h]
  char *v35; // [rsp+0h] [rbp-220h]
  const std::vector<unsigned int> *point_id_veca; // [rsp+8h] [rbp-218h]
  bool is_notifya; // [rsp+10h] [rbp-210h]
  PlayerSceneComp *thisa; // [rsp+18h] [rbp-208h]
  unsigned int val; // [rsp+20h] [rbp-200h] BYREF
  int32_t ret; // [rsp+24h] [rbp-1FCh]
  std::vector<unsigned int>::const_iterator __for_begin; // [rsp+28h] [rbp-1F8h] BYREF
  std::vector<unsigned int>::const_iterator __for_end; // [rsp+30h] [rbp-1F0h] BYREF
  const std::vector<unsigned int> *__for_range; // [rsp+38h] [rbp-1E8h]
  std::shared_ptr<google::protobuf::Message> p_body_ptr; // [rsp+40h] [rbp-1E0h] BYREF
  std::string v45; // [rsp+50h] [rbp-1D0h] BYREF
  char v46[432]; // [rsp+70h] [rbp-1B0h] BYREF

  *(&v34._anon_0._M_allocated_capacity + 1) = (std::string::size_type)this;
  HIDWORD(v34._anon_0._M_allocated_capacity) = scene_id;
  v34._M_string_length = (std::string::size_type)point_id_vec;
  v34._anon_0._M_local_buf[0] = is_notify;
  v5 = (unsigned __int64)v46;
  v34._M_dataplus._M_p = v46;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v6 = __asan_stack_malloc_3(384LL);
    if ( v6 )
      v5 = v6;
  }
  *(_QWORD *)v5 = 1102416563LL;
  *(_QWORD *)(v5 + 8) = "8 48 1 11 holder:1301 64 4 13 point_id:1309 80 4 13 scene_id:1299 96 16 14 scene_ptr:1302 128 16"
                        " 26 point_json_config_ptr:1311 160 16 25 unlock_point_log_ptr:1329 192 16 20 world_scene_ptr:133"
                        "5 224 120 18 unlock_notify:1308";
  *(_QWORD *)(v5 + 16) = PlayerSceneComp::unlockPoint;
  v7 = (_DWORD *)(v5 >> 3);
  v7[536862720] = -235802127;
  v7[536862721] = -234753551;
  v7[536862722] = -234556924;
  v7[536862723] = -219021312;
  v7[536862724] = -219021312;
  v7[536862725] = -219021312;
  v7[536862726] = -219021312;
  v7[536862730] = -218103808;
  v7[536862731] = -202116109;
  *(_DWORD *)(v5 + 80) = scene_id;
  if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
    __asan_report_load8();
  BasicComp = Player::getBasicComp(this->player_);
  PlayerBasicComp::getNextTransNo[abi:cxx11](&v45, BasicComp);
  StatLogUtils::ContextHolder::ContextHolder((StatLogUtils::ContextHolder *const)(v5 + 48), 0x5EAu, v34);
  std::string::~string(&v45);
  PlayerSceneComp::findScene((const PlayerSceneComp *const)(v5 + 96), (uint32_t)thisa);
  if ( std::operator==<Scene>((const std::shared_ptr<Scene> *)(v5 + 96), 0LL) )
  {
    common::milog::MiLogStream::create(
      (common::milog::MiLogStream *)&v45,
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/scene/player_scene_comp.cpp",
      "unlockPoint",
      1305);
    v9 = common::milog::MiLogStream::operator<<<char [23],(char *[23])0>(
           (common::milog::MiLogStream *const)&v45,
           (const char (*)[23])"findScene failed, uid:");
    if ( *(_BYTE *)(((unsigned __int64)&thisa->player_ >> 3) + 0x7FFF8000) )
      __asan_report_load8();
    val = Player::getUid(thisa->player_);
    v10 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v9, &val);
    v11 = common::milog::MiLogStream::operator<<<char [11],(char *[11])0>(v10, (const char (*)[11])" scene_id:");
    common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v11, (const unsigned int *)(v5 + 80));
    common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)&v45);
    v4 = -1;
  }
  else
  {
    proto::ScenePointUnlockNotify::ScenePointUnlockNotify((proto::ScenePointUnlockNotify *const)(v5 + 224));
    __for_range = point_id_veca;
    __for_begin._M_current = std::vector<unsigned int>::begin(point_id_veca)._M_current;
    __for_end._M_current = std::vector<unsigned int>::end(point_id_veca)._M_current;
    while ( __gnu_cxx::operator!=<unsigned int const*,std::vector<unsigned int>>(&__for_begin, &__for_end) )
    {
      v12 = __gnu_cxx::__normal_iterator<unsigned int const*,std::vector<unsigned int>>::operator*(&__for_begin);
      v13 = v12;
      if ( *(_BYTE *)(((unsigned __int64)v12 >> 3) + 0x7FFF8000) != 0
        && (char)(((unsigned __int8)v12 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)v12 >> 3) + 0x7FFF8000) )
      {
        __asan_report_load4(v12);
      }
      *(_DWORD *)(v5 + 64) = *v13;
      ServiceBox::findService<GameserverService>();
      GameserverService::getConfig((GameserverService *const)(v5 + 192));
      v14 = (unsigned int)std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v5 + 192));
      JsonConfigMgr::findScenePoint((const JsonConfigMgr *const)(v5 + 128), v14 + 93080, *(_DWORD *)(v5 + 80));
      std::shared_ptr<Config>::~shared_ptr((std::shared_ptr<Config> *const)(v5 + 192));
      if ( std::operator==<data::ConfigScenePoint>((const std::shared_ptr<data::ConfigScenePoint> *)(v5 + 128), 0LL) )
      {
        common::milog::MiLogStream::create(
          (common::milog::MiLogStream *)&v45,
          &common::milog::MiLogDefault::default_log_obj_,
          3u,
          "./src/scene/player_scene_comp.cpp",
          "unlockPoint",
          1314);
        v15 = common::milog::MiLogStream::operator<<<char [32],(char *[32])0>(
                (common::milog::MiLogStream *const)&v45,
                (const char (*)[32])"findScenePoint fails, scene_id:");
        common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v15, (const unsigned int *)(v5 + 80));
        common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)&v45);
        v4 = -1;
        v16 = 0;
      }
      else
      {
        std::shared_ptr<data::ConfigScenePoint>::shared_ptr(
          (std::shared_ptr<data::ConfigScenePoint> *const)(v5 + 192),
          (const std::shared_ptr<data::ConfigScenePoint> *)(v5 + 128));
        v17 = !PlayerSceneComp::isPointCanBeUnlocked(
                 thisa,
                 *(_DWORD *)(v5 + 80),
                 *(_DWORD *)(v5 + 64),
                 (data::ConfigScenePointPtr *)(v5 + 192));
        std::shared_ptr<data::ConfigScenePoint>::~shared_ptr((std::shared_ptr<data::ConfigScenePoint> *const)(v5 + 192));
        if ( v17 )
        {
          common::milog::MiLogStream::create(
            (common::milog::MiLogStream *)&v45,
            &common::milog::MiLogDefault::default_log_obj_,
            1u,
            "./src/scene/player_scene_comp.cpp",
            "unlockPoint",
            1319);
          v18 = common::milog::MiLogStream::operator<<<char [36],(char *[36])0>(
                  (common::milog::MiLogStream *const)&v45,
                  (const char (*)[36])"point cannot be unlocked, point_id:");
          v19 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                  v18,
                  (const unsigned int *)(v5 + 64));
          v20 = common::milog::MiLogStream::operator<<<char [12],(char *[12])0>(v19, (const char (*)[12])", scene_id:");
          common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v20, (const unsigned int *)(v5 + 80));
          common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)&v45);
          v4 = -1;
          v16 = 0;
        }
        else
        {
          v21 = (unsigned __int64)std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v5 + 96));
          if ( *(_BYTE *)((v21 >> 3) + 0x7FFF8000) )
            v21 = __asan_report_load8();
          v22 = *(_QWORD *)v21 + 144LL;
          if ( *(_BYTE *)((v22 >> 3) + 0x7FFF8000) )
            v21 = __asan_report_load8();
          ret = (*(__int64 (__fastcall **)(unsigned __int64, _QWORD, _QWORD))v22)(v21, *(unsigned int *)(v5 + 64), 0LL);
          if ( ret )
          {
            common::milog::MiLogStream::create(
              (common::milog::MiLogStream *)&v45,
              &common::milog::MiLogDefault::default_log_obj_,
              1u,
              "./src/scene/player_scene_comp.cpp",
              "unlockPoint",
              1325);
            v23 = common::milog::MiLogStream::operator<<<char [26],(char *[26])0>(
                    (common::milog::MiLogStream *const)&v45,
                    (const char (*)[26])"unlock point failed, uid:");
            if ( *(_BYTE *)(((unsigned __int64)&thisa->player_ >> 3) + 0x7FFF8000) )
              __asan_report_load8();
            val = Player::getUid(thisa->player_);
            v24 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v23, &val);
            v25 = common::milog::MiLogStream::operator<<<char [11],(char *[11])0>(v24, (const char (*)[11])" point_id:");
            v26 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                    v25,
                    (const unsigned int *)(v5 + 64));
            v27 = common::milog::MiLogStream::operator<<<char [12],(char *[12])0>(
                    v26,
                    (const char (*)[12])", scene_id:");
            common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v27, (const unsigned int *)(v5 + 80));
            common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)&v45);
            v4 = ret;
            v16 = 0;
          }
          else
          {
            if ( *(_BYTE *)(((unsigned __int64)&thisa->player_ >> 3) + 0x7FFF8000) )
              __asan_report_load8();
            WatcherComp = Player::getWatcherComp(thisa->player_);
            PlayerWatcherComp::triggerUnlockScenePoint(WatcherComp, *(_DWORD *)(v5 + 80), *(_DWORD *)(v5 + 64));
            common::tools::perf::make_shared<proto_log::PlayerLogBodyUnlockPoint>();
            v29 = std::__shared_ptr_access<proto_log::PlayerLogBodyUnlockPoint,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<proto_log::PlayerLogBodyUnlockPoint,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v5 + 160));
            v30 = proto_log::PlayerLogBodyUnlockPoint::mutable_point_log(v29);
            PlayerSceneComp::getScenePointLog(thisa, *(_DWORD *)(v5 + 80), *(_DWORD *)(v5 + 64), v30);
            if ( *(_BYTE *)(((unsigned __int64)&thisa->player_ >> 3) + 0x7FFF8000) )
              __asan_report_load8();
            player = thisa->player_;
            std::shared_ptr<google::protobuf::Message>::shared_ptr(
              (std::shared_ptr<google::protobuf::Message> *const)(v5 + 192),
              0LL);
            std::shared_ptr<google::protobuf::Message>::shared_ptr<proto_log::PlayerLogBodyUnlockPoint,void>(
              &p_body_ptr,
              (const std::shared_ptr<proto_log::PlayerLogBodyUnlockPoint> *)(v5 + 160));
            Player::printStatLog(player, &p_body_ptr, (MessagePtr *)(v5 + 192), 0xEu);
            std::shared_ptr<google::protobuf::Message>::~shared_ptr(&p_body_ptr);
            std::shared_ptr<google::protobuf::Message>::~shared_ptr((std::shared_ptr<google::protobuf::Message> *const)(v5 + 192));
            proto::ScenePointUnlockNotify::add_point_list(
              (proto::ScenePointUnlockNotify *const)(v5 + 224),
              *(_DWORD *)(v5 + 64));
            std::shared_ptr<proto_log::PlayerLogBodyUnlockPoint>::~shared_ptr((std::shared_ptr<proto_log::PlayerLogBodyUnlockPoint> *const)(v5 + 160));
            v16 = 1;
          }
        }
      }
      std::shared_ptr<data::ConfigScenePoint>::~shared_ptr((std::shared_ptr<data::ConfigScenePoint> *const)(v5 + 128));
      if ( v16 != 1 )
        goto LABEL_38;
      __gnu_cxx::__normal_iterator<unsigned int const*,std::vector<unsigned int>>::operator++(&__for_begin);
    }
    std::dynamic_pointer_cast<PlayerWorldScene,Scene>((const std::shared_ptr<Scene> *)(v5 + 192));
    if ( std::operator!=<PlayerWorldScene>((const std::shared_ptr<PlayerWorldScene> *)(v5 + 192), 0LL) )
    {
      v32 = std::__shared_ptr_access<PlayerWorldScene,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<PlayerWorldScene,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v5 + 192));
      PlayerWorldScene::updateMaxSpringVolume(v32, 1, is_notifya);
    }
    if ( is_notifya )
    {
      proto::ScenePointUnlockNotify::set_scene_id(
        (proto::ScenePointUnlockNotify *const)(v5 + 224),
        *(_DWORD *)(v5 + 80));
      PlayerSceneComp::notifyPlayerWorldAndSelf(thisa, (const google::protobuf::Message *)(v5 + 224));
    }
    v4 = 0;
    std::shared_ptr<PlayerWorldScene>::~shared_ptr((std::shared_ptr<PlayerWorldScene> *const)(v5 + 192));
LABEL_38:
    proto::ScenePointUnlockNotify::~ScenePointUnlockNotify((proto::ScenePointUnlockNotify *const)(v5 + 224));
  }
  std::shared_ptr<Scene>::~shared_ptr((std::shared_ptr<Scene> *const)(v5 + 96));
  StatLogUtils::ContextHolder::~ContextHolder((StatLogUtils::ContextHolder *const)(v5 + 48));
  result = v4;
  if ( v35 == (char *)v5 )
  {
    *(_QWORD *)((v5 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8008) = 0LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8010) = 0LL;
    *(_DWORD *)((v5 >> 3) + 0x7FFF8018) = 0;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8028) = 0LL;
  }
  else
  {
    *(_QWORD *)v5 = 1172321806LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8020) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8028) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 1351: range 0000000013E47F24-0000000013E480E7
__int64 __fastcall PlayerSceneComp::lockPoint(
        PlayerSceneComp *const this,
        uint32_t scene_id,
        uint32_t point_id,
        bool is_notify)
{
  unsigned __int64 v4; // rbx
  __int64 v5; // rax
  _DWORD *v6; // r12
  unsigned int v7; // r14d
  __int64 result; // rax
  std::allocator<unsigned int> __a; // [rsp+2Fh] [rbp-B1h] BYREF
  char v12[176]; // [rsp+30h] [rbp-B0h] BYREF

  v4 = (unsigned __int64)v12;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v5 = __asan_stack_malloc_1(128LL);
    if ( v5 )
      v4 = v5;
  }
  *(_QWORD *)v4 = 1102416563LL;
  *(_QWORD *)(v4 + 8) = "2 48 4 13 point_id:1350 64 24 17 point_id_vec:1352";
  *(_QWORD *)(v4 + 16) = PlayerSceneComp::lockPoint;
  v6 = (_DWORD *)(v4 >> 3);
  v6[536862720] = -235802127;
  v6[536862721] = -234556943;
  v6[536862722] = -218103808;
  v6[536862723] = -202116109;
  *(_DWORD *)(v4 + 48) = point_id;
  std::allocator<unsigned int>::allocator(&__a);
  std::vector<unsigned int>::vector(
    (std::vector<unsigned int> *const)(v4 + 64),
    1uLL,
    (const std::vector<unsigned int>::value_type *)(v4 + 48),
    &__a);
  std::allocator<unsigned int>::~allocator(&__a);
  v7 = PlayerSceneComp::lockPoint(this, scene_id, (const std::vector<unsigned int> *)(v4 + 64), is_notify);
  std::vector<unsigned int>::~vector((std::vector<unsigned int> *const)(v4 + 64));
  result = v7;
  if ( v12 == (char *)v4 )
  {
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v4 = 1172321806LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 1358: range 0000000013E480E8-0000000013E48665
__int64 __fastcall PlayerSceneComp::lockPoint(
        PlayerSceneComp *const this,
        uint32_t scene_id,
        const std::vector<unsigned int> *point_id_vec,
        bool is_notify)
{
  unsigned __int64 v4; // r13
  __int64 v5; // rax
  _DWORD *v6; // r12
  common::milog::MiLogStream *v7; // r14
  common::milog::MiLogStream *v8; // rax
  common::milog::MiLogStream *v9; // rax
  unsigned int v10; // r14d
  __gnu_cxx::__normal_iterator<unsigned int const*,std::vector<unsigned int> >::reference v11; // rax
  _DWORD *v12; // rdx
  unsigned __int64 v13; // rax
  unsigned __int64 v14; // rdx
  common::milog::MiLogStream *v15; // r14
  common::milog::MiLogStream *v16; // rax
  common::milog::MiLogStream *v17; // rax
  common::milog::MiLogStream *v18; // rax
  common::milog::MiLogStream *v19; // rax
  __int64 result; // rax
  unsigned int val; // [rsp+20h] [rbp-170h] BYREF
  int32_t ret; // [rsp+24h] [rbp-16Ch]
  std::vector<unsigned int>::const_iterator __for_begin; // [rsp+28h] [rbp-168h] BYREF
  std::vector<unsigned int>::const_iterator __for_end; // [rsp+30h] [rbp-160h] BYREF
  const std::vector<unsigned int> *__for_range; // [rsp+38h] [rbp-158h]
  common::milog::MiLogStream v28; // [rsp+40h] [rbp-150h] BYREF
  char v29[304]; // [rsp+60h] [rbp-130h] BYREF

  v4 = (unsigned __int64)v29;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v5 = __asan_stack_malloc_2(256LL);
    if ( v5 )
      v4 = v5;
  }
  *(_QWORD *)v4 = 1102416563LL;
  *(_QWORD *)(v4 + 8) = "4 32 4 13 point_id:1366 48 4 13 scene_id:1357 64 16 14 scene_ptr:1359 96 120 18 unlock_notify:1365";
  *(_QWORD *)(v4 + 16) = PlayerSceneComp::lockPoint;
  v6 = (_DWORD *)(v4 >> 3);
  v6[536862720] = -235802127;
  v6[536862721] = -234556924;
  v6[536862722] = -219021312;
  v6[536862726] = -218103808;
  v6[536862727] = -202116109;
  *(_DWORD *)(v4 + 48) = scene_id;
  PlayerSceneComp::findScene((const PlayerSceneComp *const)(v4 + 64), (uint32_t)this);
  if ( std::operator==<Scene>((const std::shared_ptr<Scene> *)(v4 + 64), 0LL) )
  {
    common::milog::MiLogStream::create(
      &v28,
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/scene/player_scene_comp.cpp",
      "lockPoint",
      1362);
    v7 = common::milog::MiLogStream::operator<<<char [23],(char *[23])0>(
           &v28,
           (const char (*)[23])"findScene failed, uid:");
    if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
      __asan_report_load8();
    val = Player::getUid(this->player_);
    v8 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v7, &val);
    v9 = common::milog::MiLogStream::operator<<<char [11],(char *[11])0>(v8, (const char (*)[11])" scene_id:");
    common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v9, (const unsigned int *)(v4 + 48));
    common::milog::MiLogStream::~MiLogStream(&v28);
    v10 = -1;
  }
  else
  {
    proto::ScenePointUnlockNotify::ScenePointUnlockNotify((proto::ScenePointUnlockNotify *const)(v4 + 96));
    __for_range = point_id_vec;
    __for_begin._M_current = std::vector<unsigned int>::begin(point_id_vec)._M_current;
    __for_end._M_current = std::vector<unsigned int>::end(point_id_vec)._M_current;
    while ( __gnu_cxx::operator!=<unsigned int const*,std::vector<unsigned int>>(&__for_begin, &__for_end) )
    {
      v11 = __gnu_cxx::__normal_iterator<unsigned int const*,std::vector<unsigned int>>::operator*(&__for_begin);
      v12 = v11;
      if ( *(_BYTE *)(((unsigned __int64)v11 >> 3) + 0x7FFF8000) != 0
        && (char)(((unsigned __int8)v11 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)v11 >> 3) + 0x7FFF8000) )
      {
        __asan_report_load4(v11);
      }
      *(_DWORD *)(v4 + 32) = *v12;
      v13 = (unsigned __int64)std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 64));
      if ( *(_BYTE *)((v13 >> 3) + 0x7FFF8000) )
        v13 = __asan_report_load8();
      v14 = *(_QWORD *)v13 + 152LL;
      if ( *(_BYTE *)((v14 >> 3) + 0x7FFF8000) )
        v13 = __asan_report_load8();
      ret = (*(__int64 (__fastcall **)(unsigned __int64, _QWORD))v14)(v13, *(unsigned int *)(v4 + 32));
      if ( ret )
      {
        common::milog::MiLogStream::create(
          &v28,
          &common::milog::MiLogDefault::default_log_obj_,
          1u,
          "./src/scene/player_scene_comp.cpp",
          "lockPoint",
          1371);
        v15 = common::milog::MiLogStream::operator<<<char [24],(char *[24])0>(
                &v28,
                (const char (*)[24])"lock point failed, uid:");
        if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
          __asan_report_load8();
        val = Player::getUid(this->player_);
        v16 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v15, &val);
        v17 = common::milog::MiLogStream::operator<<<char [11],(char *[11])0>(v16, (const char (*)[11])" point_id:");
        v18 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                v17,
                (const unsigned int *)(v4 + 32));
        v19 = common::milog::MiLogStream::operator<<<char [12],(char *[12])0>(v18, (const char (*)[12])", scene_id:");
        common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v19, (const unsigned int *)(v4 + 48));
        common::milog::MiLogStream::~MiLogStream(&v28);
        v10 = ret;
        goto LABEL_24;
      }
      proto::ScenePointUnlockNotify::add_locked_point_list(
        (proto::ScenePointUnlockNotify *const)(v4 + 96),
        *(_DWORD *)(v4 + 32));
      __gnu_cxx::__normal_iterator<unsigned int const*,std::vector<unsigned int>>::operator++(&__for_begin);
    }
    if ( is_notify )
    {
      proto::ScenePointUnlockNotify::set_scene_id((proto::ScenePointUnlockNotify *const)(v4 + 96), *(_DWORD *)(v4 + 48));
      PlayerSceneComp::notifyPlayerWorldAndSelf(this, (const google::protobuf::Message *)(v4 + 96));
    }
    v10 = 0;
LABEL_24:
    proto::ScenePointUnlockNotify::~ScenePointUnlockNotify((proto::ScenePointUnlockNotify *const)(v4 + 96));
  }
  std::shared_ptr<Scene>::~shared_ptr((std::shared_ptr<Scene> *const)(v4 + 64));
  result = v10;
  if ( v29 == (char *)v4 )
  {
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0LL;
    *(_DWORD *)((v4 >> 3) + 0x7FFF8008) = 0;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8018) = 0LL;
  }
  else
  {
    *(_QWORD *)v4 = 1172321806LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 1386: range 0000000013E48666-0000000013E48AC1
__int64 __fastcall PlayerSceneComp::hidePoint(
        PlayerSceneComp *const this,
        uint32_t scene_id,
        const std::vector<unsigned int> *point_id_vec,
        bool is_notify)
{
  unsigned __int64 v4; // r13
  __int64 v5; // rax
  _DWORD *v6; // r12
  common::milog::MiLogStream *v7; // r14
  common::milog::MiLogStream *v8; // rax
  common::milog::MiLogStream *v9; // rax
  unsigned int v10; // r14d
  unsigned int *v11; // rax
  uint32_t *v12; // rdx
  unsigned __int64 v13; // rax
  unsigned __int64 v14; // rdx
  __int64 result; // rax
  unsigned int val; // [rsp+20h] [rbp-170h] BYREF
  uint32_t point_id; // [rsp+24h] [rbp-16Ch]
  std::vector<unsigned int>::const_iterator __for_begin; // [rsp+28h] [rbp-168h] BYREF
  std::vector<unsigned int>::const_iterator __for_end; // [rsp+30h] [rbp-160h] BYREF
  const std::vector<unsigned int> *__for_range; // [rsp+38h] [rbp-158h]
  common::milog::MiLogStream v23; // [rsp+40h] [rbp-150h] BYREF
  char v24[304]; // [rsp+60h] [rbp-130h] BYREF

  v4 = (unsigned __int64)v24;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v5 = __asan_stack_malloc_2(256LL);
    if ( v5 )
      v4 = v5;
  }
  *(_QWORD *)v4 = 1102416563LL;
  *(_QWORD *)(v4 + 8) = "3 48 4 13 scene_id:1385 64 16 14 scene_ptr:1387 96 120 18 unlock_notify:1393";
  *(_QWORD *)(v4 + 16) = PlayerSceneComp::hidePoint;
  v6 = (_DWORD *)(v4 >> 3);
  v6[536862720] = -235802127;
  v6[536862721] = -234556943;
  v6[536862722] = -219021312;
  v6[536862726] = -218103808;
  v6[536862727] = -202116109;
  *(_DWORD *)(v4 + 48) = scene_id;
  PlayerSceneComp::findScene((const PlayerSceneComp *const)(v4 + 64), (uint32_t)this);
  if ( std::operator==<Scene>(0LL, (const std::shared_ptr<Scene> *)(v4 + 64)) )
  {
    common::milog::MiLogStream::create(
      &v23,
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/scene/player_scene_comp.cpp",
      "hidePoint",
      1390);
    v7 = common::milog::MiLogStream::operator<<<char [23],(char *[23])0>(
           &v23,
           (const char (*)[23])"findScene failed, uid:");
    if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
      __asan_report_load8();
    val = Player::getUid(this->player_);
    v8 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v7, &val);
    v9 = common::milog::MiLogStream::operator<<<char [11],(char *[11])0>(v8, (const char (*)[11])" scene_id:");
    common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v9, (const unsigned int *)(v4 + 48));
    common::milog::MiLogStream::~MiLogStream(&v23);
    v10 = -1;
  }
  else
  {
    proto::ScenePointUnlockNotify::ScenePointUnlockNotify((proto::ScenePointUnlockNotify *const)(v4 + 96));
    __for_range = point_id_vec;
    __for_begin._M_current = std::vector<unsigned int>::begin(point_id_vec)._M_current;
    __for_end._M_current = std::vector<unsigned int>::end(point_id_vec)._M_current;
    while ( __gnu_cxx::operator!=<unsigned int const*,std::vector<unsigned int>>(&__for_begin, &__for_end) )
    {
      v11 = (unsigned int *)__gnu_cxx::__normal_iterator<unsigned int const*,std::vector<unsigned int>>::operator*(&__for_begin);
      v12 = v11;
      if ( *(_BYTE *)(((unsigned __int64)v11 >> 3) + 0x7FFF8000) != 0
        && (char)(((unsigned __int8)v11 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)v11 >> 3) + 0x7FFF8000) )
      {
        __asan_report_load4(v11);
      }
      point_id = *v12;
      v13 = (unsigned __int64)std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 64));
      if ( *(_BYTE *)((v13 >> 3) + 0x7FFF8000) )
        v13 = __asan_report_load8();
      v14 = *(_QWORD *)v13 + 160LL;
      if ( *(_BYTE *)((v14 >> 3) + 0x7FFF8000) )
        v13 = __asan_report_load8();
      (*(void (__fastcall **)(unsigned __int64, _QWORD))v14)(v13, point_id);
      proto::ScenePointUnlockNotify::add_hide_point_list((proto::ScenePointUnlockNotify *const)(v4 + 96), point_id);
      __gnu_cxx::__normal_iterator<unsigned int const*,std::vector<unsigned int>>::operator++(&__for_begin);
    }
    if ( is_notify )
    {
      proto::ScenePointUnlockNotify::set_scene_id((proto::ScenePointUnlockNotify *const)(v4 + 96), *(_DWORD *)(v4 + 48));
      PlayerSceneComp::notifyPlayerWorldAndSelf(this, (const google::protobuf::Message *)(v4 + 96));
    }
    v10 = 0;
    proto::ScenePointUnlockNotify::~ScenePointUnlockNotify((proto::ScenePointUnlockNotify *const)(v4 + 96));
  }
  std::shared_ptr<Scene>::~shared_ptr((std::shared_ptr<Scene> *const)(v4 + 64));
  result = v10;
  if ( v24 == (char *)v4 )
  {
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0LL;
    *(_DWORD *)((v4 >> 3) + 0x7FFF8008) = 0;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8018) = 0LL;
  }
  else
  {
    *(_QWORD *)v4 = 1172321806LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 1409: range 0000000013E48AC2-0000000013E48F1D
__int64 __fastcall PlayerSceneComp::unhidePoint(
        PlayerSceneComp *const this,
        uint32_t scene_id,
        const std::vector<unsigned int> *point_id_vec,
        bool is_notify)
{
  unsigned __int64 v4; // r13
  __int64 v5; // rax
  _DWORD *v6; // r12
  common::milog::MiLogStream *v7; // r14
  common::milog::MiLogStream *v8; // rax
  common::milog::MiLogStream *v9; // rax
  unsigned int v10; // r14d
  unsigned int *v11; // rax
  uint32_t *v12; // rdx
  unsigned __int64 v13; // rax
  unsigned __int64 v14; // rdx
  __int64 result; // rax
  unsigned int val; // [rsp+20h] [rbp-170h] BYREF
  uint32_t point_id; // [rsp+24h] [rbp-16Ch]
  std::vector<unsigned int>::const_iterator __for_begin; // [rsp+28h] [rbp-168h] BYREF
  std::vector<unsigned int>::const_iterator __for_end; // [rsp+30h] [rbp-160h] BYREF
  const std::vector<unsigned int> *__for_range; // [rsp+38h] [rbp-158h]
  common::milog::MiLogStream v23; // [rsp+40h] [rbp-150h] BYREF
  char v24[304]; // [rsp+60h] [rbp-130h] BYREF

  v4 = (unsigned __int64)v24;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v5 = __asan_stack_malloc_2(256LL);
    if ( v5 )
      v4 = v5;
  }
  *(_QWORD *)v4 = 1102416563LL;
  *(_QWORD *)(v4 + 8) = "3 48 4 13 scene_id:1408 64 16 14 scene_ptr:1410 96 120 18 unlock_notify:1416";
  *(_QWORD *)(v4 + 16) = PlayerSceneComp::unhidePoint;
  v6 = (_DWORD *)(v4 >> 3);
  v6[536862720] = -235802127;
  v6[536862721] = -234556943;
  v6[536862722] = -219021312;
  v6[536862726] = -218103808;
  v6[536862727] = -202116109;
  *(_DWORD *)(v4 + 48) = scene_id;
  PlayerSceneComp::findScene((const PlayerSceneComp *const)(v4 + 64), (uint32_t)this);
  if ( std::operator==<Scene>(0LL, (const std::shared_ptr<Scene> *)(v4 + 64)) )
  {
    common::milog::MiLogStream::create(
      &v23,
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/scene/player_scene_comp.cpp",
      "unhidePoint",
      1413);
    v7 = common::milog::MiLogStream::operator<<<char [23],(char *[23])0>(
           &v23,
           (const char (*)[23])"findScene failed, uid:");
    if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
      __asan_report_load8();
    val = Player::getUid(this->player_);
    v8 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v7, &val);
    v9 = common::milog::MiLogStream::operator<<<char [11],(char *[11])0>(v8, (const char (*)[11])" scene_id:");
    common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v9, (const unsigned int *)(v4 + 48));
    common::milog::MiLogStream::~MiLogStream(&v23);
    v10 = -1;
  }
  else
  {
    proto::ScenePointUnlockNotify::ScenePointUnlockNotify((proto::ScenePointUnlockNotify *const)(v4 + 96));
    __for_range = point_id_vec;
    __for_begin._M_current = std::vector<unsigned int>::begin(point_id_vec)._M_current;
    __for_end._M_current = std::vector<unsigned int>::end(point_id_vec)._M_current;
    while ( __gnu_cxx::operator!=<unsigned int const*,std::vector<unsigned int>>(&__for_begin, &__for_end) )
    {
      v11 = (unsigned int *)__gnu_cxx::__normal_iterator<unsigned int const*,std::vector<unsigned int>>::operator*(&__for_begin);
      v12 = v11;
      if ( *(_BYTE *)(((unsigned __int64)v11 >> 3) + 0x7FFF8000) != 0
        && (char)(((unsigned __int8)v11 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)v11 >> 3) + 0x7FFF8000) )
      {
        __asan_report_load4(v11);
      }
      point_id = *v12;
      v13 = (unsigned __int64)std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 64));
      if ( *(_BYTE *)((v13 >> 3) + 0x7FFF8000) )
        v13 = __asan_report_load8();
      v14 = *(_QWORD *)v13 + 168LL;
      if ( *(_BYTE *)((v14 >> 3) + 0x7FFF8000) )
        v13 = __asan_report_load8();
      (*(void (__fastcall **)(unsigned __int64, _QWORD))v14)(v13, point_id);
      proto::ScenePointUnlockNotify::add_unhide_point_list((proto::ScenePointUnlockNotify *const)(v4 + 96), point_id);
      __gnu_cxx::__normal_iterator<unsigned int const*,std::vector<unsigned int>>::operator++(&__for_begin);
    }
    if ( is_notify )
    {
      proto::ScenePointUnlockNotify::set_scene_id((proto::ScenePointUnlockNotify *const)(v4 + 96), *(_DWORD *)(v4 + 48));
      PlayerSceneComp::notifyPlayerWorldAndSelf(this, (const google::protobuf::Message *)(v4 + 96));
    }
    v10 = 0;
    proto::ScenePointUnlockNotify::~ScenePointUnlockNotify((proto::ScenePointUnlockNotify *const)(v4 + 96));
  }
  std::shared_ptr<Scene>::~shared_ptr((std::shared_ptr<Scene> *const)(v4 + 64));
  result = v10;
  if ( v24 == (char *)v4 )
  {
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0LL;
    *(_DWORD *)((v4 >> 3) + 0x7FFF8008) = 0;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8018) = 0LL;
  }
  else
  {
    *(_QWORD *)v4 = 1172321806LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 1432: range 0000000013E48F1E-0000000013E49412
__int64 __fastcall PlayerSceneComp::isPointCanBeUnlocked(
        const PlayerSceneComp *const this,
        uint32_t scene_id,
        uint32_t point_id,
        const std::__shared_ptr_access<data::ConfigScenePoint,(__gnu_cxx::_Lock_policy)2,false,false> *p_config_point_ptr)
{
  unsigned __int64 v4; // rbx
  __int64 v5; // rax
  _DWORD *v6; // r12
  common::milog::MiLogStream *v7; // r14
  common::milog::MiLogStream *v8; // rax
  common::milog::MiLogStream *v9; // rax
  unsigned int v10; // r14d
  bool v11; // r14
  std::__shared_ptr_access<data::ConfigScenePoint,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v12; // rdx
  bool *p_unlocked; // rax
  std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v14; // rax
  bool v15; // r14
  std::__shared_ptr_access<data::ConfigScenePoint,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v16; // rdx
  bool *v17; // rax
  char v18; // r15
  bool v19; // r14
  bool v20; // r14
  __int64 result; // rax
  unsigned int val; // [rsp+3Ch] [rbp-D4h] BYREF
  std::shared_ptr<data::ConfigScenePoint> v25; // [rsp+40h] [rbp-D0h] BYREF
  std::shared_ptr<data::ConfigScenePoint> __r; // [rsp+50h] [rbp-C0h] BYREF
  common::milog::MiLogStream v27; // [rsp+60h] [rbp-B0h] BYREF
  char v28[144]; // [rsp+80h] [rbp-90h] BYREF

  v4 = (unsigned __int64)v28;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v5 = __asan_stack_malloc_1(96LL);
    if ( v5 )
      v4 = v5;
  }
  *(_QWORD *)v4 = 1102416563LL;
  *(_QWORD *)(v4 + 8) = "2 48 4 13 scene_id:1431 64 16 14 scene_ptr:1433";
  *(_QWORD *)(v4 + 16) = PlayerSceneComp::isPointCanBeUnlocked;
  v6 = (_DWORD *)(v4 >> 3);
  v6[536862720] = -235802127;
  v6[536862721] = -234556943;
  v6[536862722] = -202178560;
  *(_DWORD *)(v4 + 48) = scene_id;
  PlayerSceneComp::findScene((const PlayerSceneComp *const)(v4 + 64), (uint32_t)this);
  if ( std::operator==<Scene>((const std::shared_ptr<Scene> *)(v4 + 64), 0LL) )
  {
    common::milog::MiLogStream::create(
      &v27,
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/scene/player_scene_comp.cpp",
      "isPointCanBeUnlocked",
      1436);
    v7 = common::milog::MiLogStream::operator<<<char [23],(char *[23])0>(
           &v27,
           (const char (*)[23])"findScene failed, uid:");
    if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
      __asan_report_load8();
    val = Player::getUid(this->player_);
    v8 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v7, &val);
    v9 = common::milog::MiLogStream::operator<<<char [11],(char *[11])0>(v8, (const char (*)[11])" scene_id:");
    common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v9, (const unsigned int *)(v4 + 48));
    common::milog::MiLogStream::~MiLogStream(&v27);
    v10 = 0;
  }
  else if ( std::operator==<data::ConfigScenePoint>(
              0LL,
              (const std::shared_ptr<data::ConfigScenePoint> *)p_config_point_ptr) )
  {
    v10 = 0;
  }
  else
  {
    std::dynamic_pointer_cast<data::DungeonEntry,data::ConfigScenePoint>(&__r);
    v11 = std::operator!=<data::DungeonEntry>(0LL, (const std::shared_ptr<data::DungeonEntry> *)&__r);
    std::shared_ptr<data::DungeonEntry>::~shared_ptr((std::shared_ptr<data::DungeonEntry> *const)&__r);
    if ( v11 )
    {
      v12 = std::__shared_ptr_access<data::ConfigScenePoint,(__gnu_cxx::_Lock_policy)2,false,false>::operator->(p_config_point_ptr);
      p_unlocked = &v12->unlocked;
      if ( *(_BYTE *)(((unsigned __int64)p_unlocked >> 3) + 0x7FFF8000) != 0
        && ((unsigned __int8)p_unlocked & 7) >= *(_BYTE *)(((unsigned __int64)p_unlocked >> 3) + 0x7FFF8000) )
      {
        __asan_report_load1(p_unlocked);
      }
      v10 = 0;
      if ( !v12->unlocked )
      {
        v14 = std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 64));
        if ( Scene::isDungeonEntryCanBeUnlocked(v14, point_id) )
          v10 = 1;
      }
    }
    else
    {
      std::dynamic_pointer_cast<data::SceneTransPoint,data::ConfigScenePoint>(&__r);
      v15 = std::operator!=<data::SceneTransPoint>(0LL, (const std::shared_ptr<data::SceneTransPoint> *)&__r);
      std::shared_ptr<data::SceneTransPoint>::~shared_ptr((std::shared_ptr<data::SceneTransPoint> *const)&__r);
      if ( v15 )
      {
        v16 = std::__shared_ptr_access<data::ConfigScenePoint,(__gnu_cxx::_Lock_policy)2,false,false>::operator->(p_config_point_ptr);
        v17 = &v16->unlocked;
        if ( *(_BYTE *)(((unsigned __int64)v17 >> 3) + 0x7FFF8000) != 0
          && ((unsigned __int8)v17 & 7) >= *(_BYTE *)(((unsigned __int64)v17 >> 3) + 0x7FFF8000) )
        {
          __asan_report_load1(v17);
        }
        v10 = !v16->unlocked;
      }
      else
      {
        v18 = 0;
        std::dynamic_pointer_cast<data::PersonalSceneJumpPoint,data::ConfigScenePoint>(&v25);
        v19 = 1;
        if ( !std::operator!=<data::PersonalSceneJumpPoint>(
                0LL,
                (const std::shared_ptr<data::PersonalSceneJumpPoint> *)&v25) )
        {
          std::dynamic_pointer_cast<data::SceneBuildingPoint,data::ConfigScenePoint>(&__r);
          v18 = 1;
          if ( !std::operator!=<data::SceneBuildingPoint>(0LL, (const std::shared_ptr<data::SceneBuildingPoint> *)&__r) )
            v19 = 0;
        }
        if ( v18 )
          std::shared_ptr<data::SceneBuildingPoint>::~shared_ptr((std::shared_ptr<data::SceneBuildingPoint> *const)&__r);
        std::shared_ptr<data::PersonalSceneJumpPoint>::~shared_ptr((std::shared_ptr<data::PersonalSceneJumpPoint> *const)&v25);
        if ( v19 )
        {
          v10 = 1;
        }
        else
        {
          std::dynamic_pointer_cast<data::SceneVehicleSummonPoint,data::ConfigScenePoint>(&__r);
          v20 = std::operator!=<data::SceneVehicleSummonPoint>(
                  0LL,
                  (const std::shared_ptr<data::SceneVehicleSummonPoint> *)&__r);
          std::shared_ptr<data::SceneVehicleSummonPoint>::~shared_ptr((std::shared_ptr<data::SceneVehicleSummonPoint> *const)&__r);
          v10 = v20;
        }
      }
    }
  }
  std::shared_ptr<Scene>::~shared_ptr((std::shared_ptr<Scene> *const)(v4 + 64));
  result = v10;
  if ( v28 == (char *)v4 )
  {
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0LL;
    *(_DWORD *)((v4 >> 3) + 0x7FFF8008) = 0;
  }
  else
  {
    *(_QWORD *)v4 = 1172321806LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v4 >> 3) + 0x7FFF8008) = -168430091;
  }
  return result;
};

// Line 1471: range 0000000013E49414-0000000013E496B3
__int64 __fastcall PlayerSceneComp::isPointUnlocked(
        const PlayerSceneComp *const this,
        uint32_t scene_id,
        uint32_t point_id)
{
  unsigned __int64 v3; // r12
  __int64 v4; // rax
  _DWORD *v5; // r13
  common::milog::MiLogStream *v6; // rax
  unsigned int v7; // r14d
  std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v8; // rax
  common::milog::MiLogStream *v9; // rax
  std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v10; // rax
  unsigned int v11; // eax
  __int64 result; // rax
  common::milog::MiLogStream v14; // [rsp+10h] [rbp-B0h] BYREF
  char v15[144]; // [rsp+30h] [rbp-90h] BYREF

  v3 = (unsigned __int64)v15;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_1(96LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "2 48 4 13 scene_id:1470 64 16 14 scene_ptr:1472";
  *(_QWORD *)(v3 + 16) = PlayerSceneComp::isPointUnlocked;
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = -234556943;
  v5[536862722] = -202178560;
  *(_DWORD *)(v3 + 48) = scene_id;
  PlayerSceneComp::findScene((const PlayerSceneComp *const)(v3 + 64), (uint32_t)this);
  if ( std::operator==<Scene>((const std::shared_ptr<Scene> *)(v3 + 64), 0LL) )
  {
    common::milog::MiLogStream::create(
      &v14,
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/scene/player_scene_comp.cpp",
      "isPointUnlocked",
      1475);
    v6 = common::milog::MiLogStream::operator<<<char [27],(char *[27])0>(
           &v14,
           (const char (*)[27])"findScene fails, scene_id:");
    common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v6, (const unsigned int *)(v3 + 48));
    common::milog::MiLogStream::~MiLogStream(&v14);
    v7 = 0;
  }
  else
  {
    v8 = std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 64));
    if ( Scene::getSceneType(v8) == SCENE_DUNGEON )
    {
      common::milog::MiLogStream::create(
        &v14,
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/scene/player_scene_comp.cpp",
        "isPointUnlocked",
        1480);
      v9 = common::milog::MiLogStream::operator<<<char [55],(char *[55])0>(
             &v14,
             (const char (*)[55])"isPointUnlocked not support SceneType::SCENE_DUNGEON: ");
      common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v9, (const unsigned int *)(v3 + 48));
      common::milog::MiLogStream::~MiLogStream(&v14);
      v7 = 0;
    }
    else
    {
      v10 = std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 64));
      LOBYTE(v11) = Scene::isPointUnlocked(v10, point_id);
      v7 = v11;
    }
  }
  std::shared_ptr<Scene>::~shared_ptr((std::shared_ptr<Scene> *const)(v3 + 64));
  result = v7;
  if ( v15 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8008) = 0;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8008) = -168430091;
  }
  return result;
};

// Line 1488: range 0000000013E496B4-0000000013E4A0AF
// local variable allocation has failed, the output may be wrong!
__int64 __fastcall PlayerSceneComp::unlockAllPointByGm(PlayerSceneComp *const this, uint32_t scene_id, bool is_notify)
{
  unsigned __int64 v3; // r13
  __int64 v4; // rax
  _DWORD *v5; // r12
  PlayerBasicComp *BasicComp; // rax
  std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v7; // rax
  common::milog::MiLogStream *v8; // rax
  unsigned int v9; // r14d
  common::milog::MiLogStream *v10; // r14
  common::milog::MiLogStream *v11; // rax
  common::milog::MiLogStream *v12; // rax
  std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v13; // rax
  common::milog::MiLogStream *v14; // rax
  int v15; // r14d
  std::__shared_ptr_access<data::ConfigScenePoint,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v16; // rax
  Scene *v17; // rax
  unsigned __int64 v18; // rax
  unsigned __int64 v19; // rdx
  std::__shared_ptr_access<proto_log::PlayerLogBodyUnlockPoint,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v20; // rax
  proto_log::ScenePointLog *v21; // rax
  Player *v22; // r14
  PlayerWorldScene *v23; // rax
  __int64 result; // rax
  std::string is_notifya; // [rsp+0h] [rbp-200h] OVERLAPPED BYREF
  std::unordered_map<unsigned int,std::shared_ptr<data::ConfigScenePoint>>::const_iterator __for_end; // [rsp+20h] [rbp-1E0h] BYREF
  const SceneJsonConfig *scene_json_config_ptr; // [rsp+28h] [rbp-1D8h]
  const std::unordered_map<unsigned int,std::shared_ptr<data::ConfigScenePoint>> *__for_range; // [rsp+30h] [rbp-1D0h]
  const std::pair<unsigned int const,std::shared_ptr<data::ConfigScenePoint> > *p; // [rsp+38h] [rbp-1C8h]
  std::shared_ptr<google::protobuf::Message> p_body_ptr; // [rsp+40h] [rbp-1C0h] BYREF
  std::string v31; // [rsp+50h] [rbp-1B0h] BYREF
  char v32[400]; // [rsp+70h] [rbp-190h] BYREF

  is_notifya._M_string_length = (std::string::size_type)this;
  HIDWORD(is_notifya._M_dataplus._M_p) = scene_id;
  LOBYTE(is_notifya._M_dataplus._M_p) = is_notify;
  v3 = (unsigned __int64)v32;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_3(352LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "7 32 1 11 holder:1489 48 4 13 scene_id:1487 64 16 14 scene_ptr:1496 96 16 21 config_point_ptr:15"
                        "12 128 16 25 unlock_point_log_ptr:1525 160 16 20 world_scene_ptr:1532 192 120 18 unlock_notify:1507";
  *(_QWORD *)(v3 + 16) = PlayerSceneComp::unlockAllPointByGm;
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = -234556927;
  v5[536862722] = -219021312;
  v5[536862723] = -219021312;
  v5[536862724] = -219021312;
  v5[536862725] = -219021312;
  v5[536862729] = -218103808;
  v5[536862730] = -202116109;
  *(_DWORD *)(v3 + 48) = HIDWORD(is_notifya._M_dataplus._M_p);
  if ( *(_BYTE *)(((is_notifya._M_string_length + 24) >> 3) + 0x7FFF8000) )
    __asan_report_load8();
  BasicComp = Player::getBasicComp(*(Player *const *)(is_notifya._M_string_length + 24));
  PlayerBasicComp::getNextTransNo[abi:cxx11](&v31, BasicComp);
  StatLogUtils::ContextHolder::ContextHolder((StatLogUtils::ContextHolder *const)(v3 + 32), 0x5EAu, is_notifya);
  std::string::~string(&v31);
  ServiceBox::findService<GameserverService>();
  GameserverService::getConfig((GameserverService *const)(v3 + 160));
  v7 = std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 160));
  scene_json_config_ptr = JsonConfigMgr::findSceneJsonConfig(&v7->design_config.json_config_mgr, *(_DWORD *)(v3 + 48));
  std::shared_ptr<Config>::~shared_ptr((std::shared_ptr<Config> *const)(v3 + 160));
  if ( scene_json_config_ptr )
  {
    PlayerSceneComp::findScene((const PlayerSceneComp *const)(v3 + 64), is_notifya._M_string_length);
    if ( std::operator==<Scene>((const std::shared_ptr<Scene> *)(v3 + 64), 0LL) )
    {
      common::milog::MiLogStream::create(
        (common::milog::MiLogStream *)&v31,
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/scene/player_scene_comp.cpp",
        "unlockAllPointByGm",
        1499);
      v10 = common::milog::MiLogStream::operator<<<char [23],(char *[23])0>(
              (common::milog::MiLogStream *const)&v31,
              (const char (*)[23])"findScene failed, uid:");
      if ( *(_BYTE *)(((is_notifya._M_string_length + 24) >> 3) + 0x7FFF8000) )
        __asan_report_load8();
      *(_DWORD *)is_notifya._anon_0._M_local_buf = Player::getUid(*(const Player *const *)(is_notifya._M_string_length
                                                                                         + 24));
      v11 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
              v10,
              (const unsigned int *)&is_notifya._anon_0);
      v12 = common::milog::MiLogStream::operator<<<char [11],(char *[11])0>(v11, (const char (*)[11])" scene_id:");
      common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v12, (const unsigned int *)(v3 + 48));
      common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)&v31);
      v9 = -1;
    }
    else
    {
      v13 = std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 64));
      if ( Scene::getSceneType(v13) == SCENE_DUNGEON )
      {
        common::milog::MiLogStream::create(
          (common::milog::MiLogStream *)&v31,
          &common::milog::MiLogDefault::default_log_obj_,
          3u,
          "./src/scene/player_scene_comp.cpp",
          "unlockAllPointByGm",
          1504);
        v14 = common::milog::MiLogStream::operator<<<char [55],(char *[55])0>(
                (common::milog::MiLogStream *const)&v31,
                (const char (*)[55])"isPointUnlocked not support SceneType::SCENE_DUNGEON: ");
        common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v14, (const unsigned int *)(v3 + 48));
        common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)&v31);
        v9 = -1;
      }
      else
      {
        proto::ScenePointUnlockNotify::ScenePointUnlockNotify((proto::ScenePointUnlockNotify *const)(v3 + 192));
        proto::ScenePointUnlockNotify::set_scene_id(
          (proto::ScenePointUnlockNotify *const)(v3 + 192),
          *(_DWORD *)(v3 + 48));
        __for_range = &scene_json_config_ptr->point_map;
        *((std::unordered_map<unsigned int,std::shared_ptr<data::ConfigScenePoint>>::const_iterator *)&is_notifya._anon_0._M_allocated_capacity
        + 1) = std::unordered_map<unsigned int,std::shared_ptr<data::ConfigScenePoint>>::begin(&scene_json_config_ptr->point_map);
        __for_end._M_cur = std::unordered_map<unsigned int,std::shared_ptr<data::ConfigScenePoint>>::end(&scene_json_config_ptr->point_map)._M_cur;
        while ( std::__detail::operator!=<std::pair<unsigned int const,std::shared_ptr<data::ConfigScenePoint>>,false>(
                  (const std::__detail::_Node_iterator_base<std::pair<unsigned int const,std::shared_ptr<data::ConfigScenePoint> >,false> *)&is_notifya._anon_0._M_allocated_capacity
                + 1,
                  &__for_end) )
        {
          p = std::__detail::_Node_const_iterator<std::pair<unsigned int const,std::shared_ptr<data::ConfigScenePoint>>,false,false>::operator*(
                (const std::__detail::_Node_const_iterator<std::pair<unsigned int const,std::shared_ptr<data::ConfigScenePoint> >,false,false> *const)&is_notifya._anon_0._M_allocated_capacity
              + 1);
          if ( *(_BYTE *)(((unsigned __int64)p >> 3) + 0x7FFF8000) != 0
            && *(_BYTE *)(((unsigned __int64)p >> 3) + 0x7FFF8000) <= 3 )
          {
            __asan_report_load4(p);
          }
          HIDWORD(is_notifya._anon_0._M_allocated_capacity) = p->first;
          std::shared_ptr<data::ConfigScenePoint>::shared_ptr(
            (std::shared_ptr<data::ConfigScenePoint> *const)(v3 + 96),
            &p->second);
          std::shared_ptr<data::ConfigScenePoint>::shared_ptr(
            (std::shared_ptr<data::ConfigScenePoint> *const)(v3 + 160),
            (const std::shared_ptr<data::ConfigScenePoint> *)(v3 + 96));
          v15 = PlayerSceneComp::isPointCanBeUnlocked(
                  (const PlayerSceneComp *const)is_notifya._M_string_length,
                  *(_DWORD *)(v3 + 48),
                  HIDWORD(is_notifya._anon_0._M_allocated_capacity),
                  (const std::__shared_ptr_access<data::ConfigScenePoint,(__gnu_cxx::_Lock_policy)2,false,false> *)(v3 + 160)) ^ 1;
          std::shared_ptr<data::ConfigScenePoint>::~shared_ptr((std::shared_ptr<data::ConfigScenePoint> *const)(v3 + 160));
          if ( !(_BYTE)v15 )
          {
            v16 = std::__shared_ptr_access<data::ConfigScenePoint,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<data::ConfigScenePoint,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 96));
            if ( *(char *)(((unsigned __int64)&v16->group_limit >> 3) + 0x7FFF8000) < 0 )
              v16 = (std::__shared_ptr_access<data::ConfigScenePoint,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *)__asan_report_load1(&v16->group_limit);
            if ( v16->group_limit )
            {
              v17 = std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 64));
              Scene::unfreezeGroupLimit(v17, HIDWORD(is_notifya._anon_0._M_allocated_capacity), 1);
            }
            v18 = (unsigned __int64)std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 64));
            if ( *(_BYTE *)((v18 >> 3) + 0x7FFF8000) )
              v18 = __asan_report_load8();
            v19 = *(_QWORD *)v18 + 144LL;
            if ( *(_BYTE *)((v19 >> 3) + 0x7FFF8000) )
              v18 = __asan_report_load8();
            if ( !(*(unsigned int (__fastcall **)(unsigned __int64, _QWORD, _QWORD))v19)(
                    v18,
                    HIDWORD(is_notifya._anon_0._M_allocated_capacity),
                    0LL) )
            {
              common::tools::perf::make_shared<proto_log::PlayerLogBodyUnlockPoint>();
              v20 = std::__shared_ptr_access<proto_log::PlayerLogBodyUnlockPoint,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<proto_log::PlayerLogBodyUnlockPoint,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 128));
              v21 = proto_log::PlayerLogBodyUnlockPoint::mutable_point_log(v20);
              PlayerSceneComp::getScenePointLog(
                (const PlayerSceneComp *const)is_notifya._M_string_length,
                *(_DWORD *)(v3 + 48),
                HIDWORD(is_notifya._anon_0._M_allocated_capacity),
                v21);
              if ( *(_BYTE *)(((is_notifya._M_string_length + 24) >> 3) + 0x7FFF8000) )
                __asan_report_load8();
              v22 = *(Player **)(is_notifya._M_string_length + 24);
              std::shared_ptr<google::protobuf::Message>::shared_ptr(
                (std::shared_ptr<google::protobuf::Message> *const)(v3 + 160),
                0LL);
              std::shared_ptr<google::protobuf::Message>::shared_ptr<proto_log::PlayerLogBodyUnlockPoint,void>(
                &p_body_ptr,
                (const std::shared_ptr<proto_log::PlayerLogBodyUnlockPoint> *)(v3 + 128));
              Player::printStatLog(v22, &p_body_ptr, (MessagePtr *)(v3 + 160), 0xEu);
              std::shared_ptr<google::protobuf::Message>::~shared_ptr(&p_body_ptr);
              std::shared_ptr<google::protobuf::Message>::~shared_ptr((std::shared_ptr<google::protobuf::Message> *const)(v3 + 160));
              std::shared_ptr<proto_log::PlayerLogBodyUnlockPoint>::~shared_ptr((std::shared_ptr<proto_log::PlayerLogBodyUnlockPoint> *const)(v3 + 128));
            }
            proto::ScenePointUnlockNotify::add_point_list(
              (proto::ScenePointUnlockNotify *const)(v3 + 192),
              HIDWORD(is_notifya._anon_0._M_allocated_capacity));
          }
          std::shared_ptr<data::ConfigScenePoint>::~shared_ptr((std::shared_ptr<data::ConfigScenePoint> *const)(v3 + 96));
          std::__detail::_Node_const_iterator<std::pair<unsigned int const,std::shared_ptr<data::ConfigScenePoint>>,false,false>::operator++(
            (std::__detail::_Node_const_iterator<std::pair<unsigned int const,std::shared_ptr<data::ConfigScenePoint> >,false,false> *const)&is_notifya._anon_0._M_allocated_capacity
          + 1);
        }
        std::dynamic_pointer_cast<PlayerWorldScene,Scene>((const std::shared_ptr<Scene> *)(v3 + 160));
        if ( std::operator!=<PlayerWorldScene>((const std::shared_ptr<PlayerWorldScene> *)(v3 + 160), 0LL) )
        {
          v23 = std::__shared_ptr_access<PlayerWorldScene,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<PlayerWorldScene,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 160));
          PlayerWorldScene::updateMaxSpringVolume(v23, 1, (bool)is_notifya._M_dataplus._M_p);
        }
        if ( LOBYTE(is_notifya._M_dataplus._M_p) )
          PlayerSceneComp::notifyPlayerWorldAndSelf(
            (PlayerSceneComp *const)is_notifya._M_string_length,
            (const google::protobuf::Message *)(v3 + 192));
        v9 = 0;
        std::shared_ptr<PlayerWorldScene>::~shared_ptr((std::shared_ptr<PlayerWorldScene> *const)(v3 + 160));
        proto::ScenePointUnlockNotify::~ScenePointUnlockNotify((proto::ScenePointUnlockNotify *const)(v3 + 192));
      }
    }
    std::shared_ptr<Scene>::~shared_ptr((std::shared_ptr<Scene> *const)(v3 + 64));
  }
  else
  {
    common::milog::MiLogStream::create(
      (common::milog::MiLogStream *)&v31,
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/scene/player_scene_comp.cpp",
      "unlockAllPointByGm",
      1493);
    v8 = common::milog::MiLogStream::operator<<<char [37],(char *[37])0>(
           (common::milog::MiLogStream *const)&v31,
           (const char (*)[37])"findSceneJsonConfig fails, scene_id:");
    common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v8, (const unsigned int *)(v3 + 48));
    common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)&v31);
    v9 = -1;
  }
  StatLogUtils::ContextHolder::~ContextHolder((StatLogUtils::ContextHolder *const)(v3 + 32));
  result = v9;
  if ( v32 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8010) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8024) = 0LL;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8020) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8028) = -168430091;
  }
  return result;
};

// Line 1546: range 0000000013E4A0B0-0000000013E4A709
__int64 __fastcall PlayerSceneComp::unlockAllDailyDungeonEntryByGm(
        PlayerSceneComp *const this,
        uint32_t scene_id,
        bool is_notify)
{
  unsigned __int64 v3; // r13
  __int64 v4; // rax
  _DWORD *v5; // r12
  unsigned int v6; // r14d
  std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v7; // rax
  common::milog::MiLogStream *v8; // rax
  Scene *v9; // rax
  Scene *v10; // rax
  std::unordered_set<unsigned int>::iterator v11; // rax
  std::insert_iterator<std::unordered_set<unsigned int> > v12; // rax
  std::unordered_set<unsigned int> *container; // r14
  std::__detail::_Node_iterator_base<unsigned int,false>::__node_type *M_cur; // r15
  std::unordered_set<unsigned int>::iterator v15; // rax
  std::insert_iterator<std::unordered_set<unsigned int> > v16; // r8
  unsigned int *v17; // rax
  unsigned int *v18; // rdx
  Scene *v19; // rax
  std::__shared_ptr_access<proto_log::PlayerLogBodyUnlockPoint,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v20; // rax
  proto_log::ScenePointLog *v21; // rax
  Player *player; // r14
  __int64 result; // rax
  std::__detail::_Node_iterator_base<unsigned int,false>::__node_type *__last2; // [rsp+8h] [rbp-248h]
  std::__detail::_Node_iterator_base<unsigned int,false>::__node_type *__first2; // [rsp+10h] [rbp-240h]
  std::__detail::_Node_iterator_base<unsigned int,false>::__node_type *__last1; // [rsp+18h] [rbp-238h]
  unsigned int point_id; // [rsp+34h] [rbp-21Ch]
  std::unordered_set<unsigned int>::iterator __for_begin; // [rsp+38h] [rbp-218h] BYREF
  std::unordered_set<unsigned int>::iterator __for_end; // [rsp+40h] [rbp-210h] BYREF
  std::unordered_set<unsigned int> *to_be_explored_point_set; // [rsp+48h] [rbp-208h]
  std::unordered_set<unsigned int> *not_explored_point_set; // [rsp+50h] [rbp-200h]
  std::unordered_set<unsigned int> *__for_range; // [rsp+58h] [rbp-1F8h]
  std::shared_ptr<google::protobuf::Message> p_body_ptr; // [rsp+60h] [rbp-1F0h] BYREF
  std::shared_ptr<google::protobuf::Message> p_body_ext_ptr; // [rsp+70h] [rbp-1E0h] BYREF
  common::milog::MiLogStream v36; // [rsp+80h] [rbp-1D0h] BYREF
  char v37[432]; // [rsp+A0h] [rbp-1B0h] BYREF

  v3 = (unsigned __int64)v37;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_3(384LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "5 48 4 13 scene_id:1545 64 16 14 scene_ptr:1549 96 16 25 unlock_point_log_ptr:1571 128 56 34 dai"
                        "ly_dungeon_entry_point_set:1561 224 120 18 unlock_notify:1547";
  *(_QWORD *)(v3 + 16) = PlayerSceneComp::unlockAllDailyDungeonEntryByGm;
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = -234556943;
  v5[536862722] = -219021312;
  v5[536862723] = -219021312;
  v5[536862725] = -234881024;
  v5[536862726] = -218959118;
  v5[536862730] = -218103808;
  v5[536862731] = -202116109;
  *(_DWORD *)(v3 + 48) = scene_id;
  proto::ScenePointUnlockNotify::ScenePointUnlockNotify((proto::ScenePointUnlockNotify *const)(v3 + 224));
  proto::ScenePointUnlockNotify::set_scene_id((proto::ScenePointUnlockNotify *const)(v3 + 224), *(_DWORD *)(v3 + 48));
  PlayerSceneComp::getPersonalScene((PlayerSceneComp *const)(v3 + 64), (uint32_t)this);
  if ( std::operator==<Scene>(0LL, (const std::shared_ptr<Scene> *)(v3 + 64)) )
  {
    v6 = -1;
  }
  else
  {
    v7 = std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 64));
    if ( Scene::getSceneType(v7) == SCENE_DUNGEON )
    {
      common::milog::MiLogStream::create(
        &v36,
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/scene/player_scene_comp.cpp",
        "unlockAllDailyDungeonEntryByGm",
        1557);
      v8 = common::milog::MiLogStream::operator<<<char [55],(char *[55])0>(
             &v36,
             (const char (*)[55])"isPointUnlocked not support SceneType::SCENE_DUNGEON: ");
      common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v8, (const unsigned int *)(v3 + 48));
      common::milog::MiLogStream::~MiLogStream(&v36);
      v6 = -1;
    }
    else
    {
      std::unordered_set<unsigned int>::unordered_set((std::unordered_set<unsigned int> *const)(v3 + 128));
      v9 = std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 64));
      to_be_explored_point_set = Scene::getAllToBeExplorePoint(v9);
      v10 = std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 64));
      not_explored_point_set = Scene::getAllNotExploredPoint(v10);
      v11._M_cur = std::unordered_set<unsigned int>::begin((std::unordered_set<unsigned int> *const)(v3 + 128))._M_cur;
      v12 = std::inserter<std::unordered_set<unsigned int>,std::__detail::_Node_iterator<unsigned int,true,false>>(
              (std::unordered_set<unsigned int> *)(v3 + 128),
              v11);
      container = v12.container;
      M_cur = v12.iter._M_cur;
      __last2 = std::unordered_set<unsigned int>::end(not_explored_point_set)._M_cur;
      __first2 = std::unordered_set<unsigned int>::begin(not_explored_point_set)._M_cur;
      __last1 = std::unordered_set<unsigned int>::end(to_be_explored_point_set)._M_cur;
      v15._M_cur = std::unordered_set<unsigned int>::begin(to_be_explored_point_set)._M_cur;
      v16.container = container;
      v16.iter._M_cur = M_cur;
      std::set_union<std::__detail::_Node_iterator<unsigned int,true,false>,std::__detail::_Node_iterator<unsigned int,true,false>,std::insert_iterator<std::unordered_set<unsigned int>>>(
        v15,
        (std::__detail::_Node_iterator<unsigned int,true,false>)__last1,
        (std::__detail::_Node_iterator<unsigned int,true,false>)__first2,
        (std::__detail::_Node_iterator<unsigned int,true,false>)__last2,
        v16);
      __for_range = (std::unordered_set<unsigned int> *)(v3 + 128);
      __for_begin._M_cur = std::unordered_set<unsigned int>::begin((std::unordered_set<unsigned int> *const)(v3 + 128))._M_cur;
      __for_end._M_cur = std::unordered_set<unsigned int>::end((std::unordered_set<unsigned int> *const)(v3 + 128))._M_cur;
      while ( std::__detail::operator!=<unsigned int,false>(&__for_begin, &__for_end) )
      {
        v17 = (unsigned int *)std::__detail::_Node_iterator<unsigned int,true,false>::operator*(&__for_begin);
        v18 = v17;
        if ( *(_BYTE *)(((unsigned __int64)v17 >> 3) + 0x7FFF8000) != 0
          && (char)(((unsigned __int8)v17 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)v17 >> 3) + 0x7FFF8000) )
        {
          __asan_report_load4(v17);
        }
        point_id = *v18;
        v19 = std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 64));
        if ( !Scene::forceUnlockPoint(v19, point_id) )
        {
          common::tools::perf::make_shared<proto_log::PlayerLogBodyUnlockPoint>();
          v20 = std::__shared_ptr_access<proto_log::PlayerLogBodyUnlockPoint,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<proto_log::PlayerLogBodyUnlockPoint,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 96));
          v21 = proto_log::PlayerLogBodyUnlockPoint::mutable_point_log(v20);
          PlayerSceneComp::getScenePointLog(this, *(_DWORD *)(v3 + 48), point_id, v21);
          if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
            __asan_report_load8();
          player = this->player_;
          std::shared_ptr<google::protobuf::Message>::shared_ptr(&p_body_ext_ptr, 0LL);
          std::shared_ptr<google::protobuf::Message>::shared_ptr<proto_log::PlayerLogBodyUnlockPoint,void>(
            &p_body_ptr,
            (const std::shared_ptr<proto_log::PlayerLogBodyUnlockPoint> *)(v3 + 96));
          Player::printStatLog(player, &p_body_ptr, &p_body_ext_ptr, 0xEu);
          std::shared_ptr<google::protobuf::Message>::~shared_ptr(&p_body_ptr);
          std::shared_ptr<google::protobuf::Message>::~shared_ptr(&p_body_ext_ptr);
          std::shared_ptr<proto_log::PlayerLogBodyUnlockPoint>::~shared_ptr((std::shared_ptr<proto_log::PlayerLogBodyUnlockPoint> *const)(v3 + 96));
        }
        proto::ScenePointUnlockNotify::add_point_list((proto::ScenePointUnlockNotify *const)(v3 + 224), point_id);
        std::__detail::_Node_iterator<unsigned int,true,false>::operator++(&__for_begin);
      }
      if ( is_notify )
        PlayerSceneComp::notifyPlayerWorldAndSelf(this, (const google::protobuf::Message *)(v3 + 224));
      v6 = 0;
      std::unordered_set<unsigned int>::~unordered_set((std::unordered_set<unsigned int> *const)(v3 + 128));
    }
  }
  std::shared_ptr<Scene>::~shared_ptr((std::shared_ptr<Scene> *const)(v3 + 64));
  proto::ScenePointUnlockNotify::~ScenePointUnlockNotify((proto::ScenePointUnlockNotify *const)(v3 + 224));
  result = v6;
  if ( v37 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8014) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8028) = 0LL;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8020) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8028) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 1589: range 0000000013E4A70A-0000000013E4ACD9
__int64 __fastcall PlayerSceneComp::forceUnlockPoint(
        PlayerSceneComp *const this,
        __int32 scene_id,
        const std::vector<unsigned int> *point_id_vec)
{
  unsigned __int64 v3; // r13
  __int64 v4; // rax
  _DWORD *v5; // r12
  PlayerBasicComp *BasicComp; // rax
  unsigned int v7; // r14d
  std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v8; // rax
  common::milog::MiLogStream *v9; // rax
  unsigned int *v10; // rax
  unsigned int *v11; // rdx
  Scene *v12; // rax
  std::__shared_ptr_access<proto_log::PlayerLogBodyUnlockPoint,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v13; // rax
  proto_log::ScenePointLog *v14; // rax
  Player *player; // r14
  __int64 result; // rax
  std::string v17; // [rsp+0h] [rbp-1D0h]
  const std::vector<unsigned int> *point_id_veca; // [rsp+8h] [rbp-1C8h]
  PlayerSceneComp *thisa; // [rsp+18h] [rbp-1B8h]
  unsigned int point_id; // [rsp+24h] [rbp-1ACh]
  std::vector<unsigned int>::const_iterator __for_begin; // [rsp+28h] [rbp-1A8h] BYREF
  std::vector<unsigned int>::const_iterator __for_end; // [rsp+30h] [rbp-1A0h] BYREF
  const std::vector<unsigned int> *__for_range; // [rsp+38h] [rbp-198h]
  std::shared_ptr<google::protobuf::Message> p_body_ptr; // [rsp+40h] [rbp-190h] BYREF
  std::shared_ptr<google::protobuf::Message> p_body_ext_ptr; // [rsp+50h] [rbp-180h] BYREF
  std::string v26; // [rsp+60h] [rbp-170h] BYREF
  char v27[336]; // [rsp+80h] [rbp-150h] BYREF

  *(&v17._anon_0._M_allocated_capacity + 1) = (std::string::size_type)this;
  HIDWORD(v17._anon_0._M_allocated_capacity) = scene_id;
  v17._M_string_length = (std::string::size_type)point_id_vec;
  v3 = (unsigned __int64)v27;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_3(288LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "5 32 1 11 holder:1590 48 4 13 scene_id:1588 64 16 14 scene_ptr:1593 96 16 25 unlock_point_log_pt"
                        "r:1609 128 120 18 unlock_notify:1591";
  *(_QWORD *)(v3 + 16) = PlayerSceneComp::forceUnlockPoint;
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = -234556927;
  v5[536862722] = -219021312;
  v5[536862723] = -219021312;
  v5[536862727] = -218103808;
  v5[536862728] = -202116109;
  *(_DWORD *)(v3 + 48) = scene_id;
  if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
    __asan_report_load8();
  BasicComp = Player::getBasicComp(this->player_);
  PlayerBasicComp::getNextTransNo[abi:cxx11](&v26, BasicComp);
  StatLogUtils::ContextHolder::ContextHolder((StatLogUtils::ContextHolder *const)(v3 + 32), 0x5EAu, v17);
  std::string::~string(&v26);
  proto::ScenePointUnlockNotify::ScenePointUnlockNotify((proto::ScenePointUnlockNotify *const)(v3 + 128));
  proto::ScenePointUnlockNotify::set_scene_id((proto::ScenePointUnlockNotify *const)(v3 + 128), *(_DWORD *)(v3 + 48));
  PlayerSceneComp::getPersonalScene((PlayerSceneComp *const)(v3 + 64), (uint32_t)thisa);
  if ( std::operator==<Scene>(0LL, (const std::shared_ptr<Scene> *)(v3 + 64)) )
  {
    v7 = -1;
  }
  else
  {
    v8 = std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 64));
    if ( Scene::getSceneType(v8) == SCENE_DUNGEON )
    {
      common::milog::MiLogStream::create(
        (common::milog::MiLogStream *)&v26,
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/scene/player_scene_comp.cpp",
        "forceUnlockPoint",
        1601);
      v9 = common::milog::MiLogStream::operator<<<char [56],(char *[56])0>(
             (common::milog::MiLogStream *const)&v26,
             (const char (*)[56])"forceUnlockPoint not support SceneType::SCENE_DUNGEON: ");
      common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v9, (const unsigned int *)(v3 + 48));
      common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)&v26);
      v7 = -1;
    }
    else
    {
      __for_range = point_id_veca;
      __for_begin._M_current = std::vector<unsigned int>::begin(point_id_veca)._M_current;
      __for_end._M_current = std::vector<unsigned int>::end(point_id_veca)._M_current;
      while ( __gnu_cxx::operator!=<unsigned int const*,std::vector<unsigned int>>(&__for_begin, &__for_end) )
      {
        v10 = (unsigned int *)__gnu_cxx::__normal_iterator<unsigned int const*,std::vector<unsigned int>>::operator*(&__for_begin);
        v11 = v10;
        if ( *(_BYTE *)(((unsigned __int64)v10 >> 3) + 0x7FFF8000) != 0
          && (char)(((unsigned __int8)v10 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)v10 >> 3) + 0x7FFF8000) )
        {
          __asan_report_load4(v10);
        }
        point_id = *v11;
        v12 = std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 64));
        if ( !Scene::forceUnlockPoint(v12, point_id) )
        {
          common::tools::perf::make_shared<proto_log::PlayerLogBodyUnlockPoint>();
          v13 = std::__shared_ptr_access<proto_log::PlayerLogBodyUnlockPoint,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<proto_log::PlayerLogBodyUnlockPoint,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 96));
          v14 = proto_log::PlayerLogBodyUnlockPoint::mutable_point_log(v13);
          PlayerSceneComp::getScenePointLog(thisa, *(_DWORD *)(v3 + 48), point_id, v14);
          if ( *(_BYTE *)(((unsigned __int64)&thisa->player_ >> 3) + 0x7FFF8000) )
            __asan_report_load8();
          player = thisa->player_;
          std::shared_ptr<google::protobuf::Message>::shared_ptr(&p_body_ext_ptr, 0LL);
          std::shared_ptr<google::protobuf::Message>::shared_ptr<proto_log::PlayerLogBodyUnlockPoint,void>(
            &p_body_ptr,
            (const std::shared_ptr<proto_log::PlayerLogBodyUnlockPoint> *)(v3 + 96));
          Player::printStatLog(player, &p_body_ptr, &p_body_ext_ptr, 0xEu);
          std::shared_ptr<google::protobuf::Message>::~shared_ptr(&p_body_ptr);
          std::shared_ptr<google::protobuf::Message>::~shared_ptr(&p_body_ext_ptr);
          std::shared_ptr<proto_log::PlayerLogBodyUnlockPoint>::~shared_ptr((std::shared_ptr<proto_log::PlayerLogBodyUnlockPoint> *const)(v3 + 96));
        }
        proto::ScenePointUnlockNotify::add_point_list((proto::ScenePointUnlockNotify *const)(v3 + 128), point_id);
        __gnu_cxx::__normal_iterator<unsigned int const*,std::vector<unsigned int>>::operator++(&__for_begin);
      }
      PlayerSceneComp::notifyPlayerWorldAndSelf(thisa, (const google::protobuf::Message *)(v3 + 128));
      v7 = 0;
    }
  }
  std::shared_ptr<Scene>::~shared_ptr((std::shared_ptr<Scene> *const)(v3 + 64));
  proto::ScenePointUnlockNotify::~ScenePointUnlockNotify((proto::ScenePointUnlockNotify *const)(v3 + 128));
  StatLogUtils::ContextHolder::~ContextHolder((StatLogUtils::ContextHolder *const)(v3 + 32));
  result = v7;
  if ( v27 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF801C) = 0LL;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8020) = -168430091;
  }
  return result;
};

// Line 1621: range 0000000013E4ACDA-0000000013E4AEEC
int32_t __cdecl PlayerSceneComp::revertUnlockAllPointByGm(PlayerSceneComp *const this, uint32_t scene_id)
{
  unsigned __int64 v2; // r12
  __int64 v3; // rax
  _DWORD *v4; // r13
  unsigned __int64 v5; // rax
  unsigned __int64 v6; // rdx
  PlayerWorldScene *v7; // rax
  int32_t result; // eax
  char v9[144]; // [rsp+10h] [rbp-90h] BYREF

  v2 = (unsigned __int64)v9;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_1(96LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "2 32 16 14 scene_ptr:1622 64 16 20 world_scene_ptr:1626";
  *(_QWORD *)(v2 + 16) = PlayerSceneComp::revertUnlockAllPointByGm;
  v4 = (_DWORD *)(v2 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = -219021312;
  v4[536862722] = -202178560;
  PlayerSceneComp::findScene((const PlayerSceneComp *const)(v2 + 32), (uint32_t)this);
  if ( std::operator!=<Scene>((const std::shared_ptr<Scene> *)(v2 + 32), 0LL) )
  {
    v5 = (unsigned __int64)std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 32));
    if ( *(_BYTE *)((v5 >> 3) + 0x7FFF8000) )
      v5 = __asan_report_load8();
    v6 = *(_QWORD *)v5 + 176LL;
    if ( *(_BYTE *)((v6 >> 3) + 0x7FFF8000) )
      v5 = __asan_report_load8();
    (*(void (__fastcall **)(unsigned __int64))v6)(v5);
    std::dynamic_pointer_cast<PlayerWorldScene,Scene>((const std::shared_ptr<Scene> *)(v2 + 64));
    if ( std::operator!=<PlayerWorldScene>((const std::shared_ptr<PlayerWorldScene> *)(v2 + 64), 0LL) )
    {
      v7 = std::__shared_ptr_access<PlayerWorldScene,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<PlayerWorldScene,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 64));
      PlayerWorldScene::updateMaxSpringVolume(v7, 1, 1);
    }
    std::shared_ptr<PlayerWorldScene>::~shared_ptr((std::shared_ptr<PlayerWorldScene> *const)(v2 + 64));
  }
  std::shared_ptr<Scene>::~shared_ptr((std::shared_ptr<Scene> *const)(v2 + 32));
  result = 0;
  if ( v9 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8008) = 0;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8008) = -168430091;
  }
  return result;
};

// Line 1637: range 0000000013E4AEEE-0000000013E4B991
void __fastcall PlayerSceneComp::getAllUnlockedPoint(
        PlayerSceneComp *const this,
        uint32_t scene_id,
        proto::GetScenePointRsp *rsp_0)
{
  unsigned __int64 v3; // r12
  __int64 v4; // rax
  _DWORD *v5; // r13
  common::milog::MiLogStream *v6; // rax
  common::milog::MiLogStream *v7; // rax
  common::milog::MiLogStream *v8; // r14
  Scene *v9; // rax
  unsigned int *v10; // rax
  uint32_t *v11; // rdx
  Scene *v12; // rax
  unsigned int *v13; // rax
  uint32_t *v14; // rdx
  Scene *v15; // rax
  unsigned int *v16; // rax
  uint32_t *v17; // rdx
  Scene *v18; // rax
  unsigned int *v19; // rax
  uint32_t *v20; // rdx
  std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v21; // rax
  Scene *v22; // rax
  unsigned int *v23; // rax
  uint32_t *v24; // rdx
  std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v25; // rax
  Scene *v26; // rax
  Scene *v27; // rax
  unsigned int *v28; // rax
  uint32_t *v29; // rdx
  Scene *v30; // rax
  unsigned int *v31; // rax
  uint32_t *v32; // rdx
  Scene *v33; // rax
  unsigned int *v34; // rax
  uint32_t *v35; // rdx
  unsigned int val; // [rsp+24h] [rbp-13Ch] BYREF
  uint32_t point_id_5; // [rsp+28h] [rbp-138h]
  uint32_t point_id_4; // [rsp+2Ch] [rbp-134h]
  uint32_t point_id_3; // [rsp+30h] [rbp-130h]
  uint32_t point_id_2; // [rsp+34h] [rbp-12Ch]
  uint32_t dungeon_entry_config_id_0; // [rsp+38h] [rbp-128h]
  uint32_t point_id_1; // [rsp+3Ch] [rbp-124h]
  uint32_t dungeon_entry_config_id; // [rsp+40h] [rbp-120h]
  uint32_t area_id; // [rsp+44h] [rbp-11Ch]
  uint32_t point_id_0; // [rsp+48h] [rbp-118h]
  uint32_t point_id; // [rsp+4Ch] [rbp-114h]
  std::unordered_set<unsigned int>::iterator __for_begin; // [rsp+50h] [rbp-110h] BYREF
  std::unordered_set<unsigned int>::iterator __for_end; // [rsp+58h] [rbp-108h] BYREF
  std::unordered_set<unsigned int> *__for_range; // [rsp+60h] [rbp-100h]
  std::unordered_set<unsigned int> *__for_range_0; // [rsp+68h] [rbp-F8h]
  std::unordered_set<unsigned int> *__for_range_1; // [rsp+70h] [rbp-F0h]
  std::unordered_set<unsigned int> *__for_range_2; // [rsp+78h] [rbp-E8h]
  std::unordered_set<unsigned int> *__for_range_3; // [rsp+80h] [rbp-E0h]
  std::unordered_set<unsigned int> *__for_range_4; // [rsp+88h] [rbp-D8h]
  std::unordered_set<unsigned int> *__for_range_5; // [rsp+90h] [rbp-D0h]
  std::unordered_set<unsigned int> *__for_range_6; // [rsp+98h] [rbp-C8h]
  std::shared_ptr<Config> v58; // [rsp+A0h] [rbp-C0h] BYREF
  common::milog::MiLogStream v59; // [rsp+B0h] [rbp-B0h] BYREF
  char v60[144]; // [rsp+D0h] [rbp-90h] BYREF

  v3 = (unsigned __int64)v60;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_1(96LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "2 48 4 13 scene_id:1636 64 16 14 scene_ptr:1639";
  *(_QWORD *)(v3 + 16) = PlayerSceneComp::getAllUnlockedPoint;
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = -234556943;
  v5[536862722] = -202178560;
  *(_DWORD *)(v3 + 48) = scene_id;
  proto::GetScenePointRsp::set_scene_id(rsp_0, *(_DWORD *)(v3 + 48));
  PlayerSceneComp::findScene((const PlayerSceneComp *const)(v3 + 64), (uint32_t)this);
  if ( std::operator==<Scene>((const std::shared_ptr<Scene> *)(v3 + 64), 0LL) )
  {
    common::milog::MiLogStream::create(
      &v59,
      &common::milog::MiLogDefault::default_log_obj_,
      1u,
      "./src/scene/player_scene_comp.cpp",
      "getAllUnlockedPoint",
      1642);
    v6 = common::milog::MiLogStream::operator<<<char [28],(char *[28])0>(
           &v59,
           (const char (*)[28])"findScene failed, scene_id:");
    v7 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v6, (const unsigned int *)(v3 + 48));
    v8 = common::milog::MiLogStream::operator<<<char [6],(char *[6])0>(v7, (const char (*)[6])" uid:");
    if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
      __asan_report_load8();
    val = Player::getUid(this->player_);
    common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v8, &val);
    common::milog::MiLogStream::~MiLogStream(&v59);
  }
  else
  {
    v9 = std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 64));
    __for_range = Scene::getAllUnlockPoint(v9);
    __for_begin._M_cur = std::unordered_set<unsigned int>::begin(__for_range)._M_cur;
    __for_end._M_cur = std::unordered_set<unsigned int>::end(__for_range)._M_cur;
    while ( std::__detail::operator!=<unsigned int,false>(&__for_begin, &__for_end) )
    {
      v10 = (unsigned int *)std::__detail::_Node_iterator<unsigned int,true,false>::operator*(&__for_begin);
      v11 = v10;
      if ( *(_BYTE *)(((unsigned __int64)v10 >> 3) + 0x7FFF8000) != 0
        && (char)(((unsigned __int8)v10 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)v10 >> 3) + 0x7FFF8000) )
      {
        __asan_report_load4(v10);
      }
      point_id = *v11;
      proto::GetScenePointRsp::add_unlocked_point_list(rsp_0, point_id);
      std::__detail::_Node_iterator<unsigned int,true,false>::operator++(&__for_begin);
    }
    v12 = std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 64));
    __for_range_0 = Scene::getAllLockedPoint(v12);
    __for_begin._M_cur = std::unordered_set<unsigned int>::begin(__for_range_0)._M_cur;
    __for_end._M_cur = std::unordered_set<unsigned int>::end(__for_range_0)._M_cur;
    while ( std::__detail::operator!=<unsigned int,false>(&__for_begin, &__for_end) )
    {
      v13 = (unsigned int *)std::__detail::_Node_iterator<unsigned int,true,false>::operator*(&__for_begin);
      v14 = v13;
      if ( *(_BYTE *)(((unsigned __int64)v13 >> 3) + 0x7FFF8000) != 0
        && (char)(((unsigned __int8)v13 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)v13 >> 3) + 0x7FFF8000) )
      {
        __asan_report_load4(v13);
      }
      point_id_0 = *v14;
      proto::GetScenePointRsp::add_locked_point_list(rsp_0, point_id_0);
      std::__detail::_Node_iterator<unsigned int,true,false>::operator++(&__for_begin);
    }
    v15 = std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 64));
    __for_range_1 = Scene::getAllUnlockArea(v15);
    __for_begin._M_cur = std::unordered_set<unsigned int>::begin(__for_range_1)._M_cur;
    __for_end._M_cur = std::unordered_set<unsigned int>::end(__for_range_1)._M_cur;
    while ( std::__detail::operator!=<unsigned int,false>(&__for_begin, &__for_end) )
    {
      v16 = (unsigned int *)std::__detail::_Node_iterator<unsigned int,true,false>::operator*(&__for_begin);
      v17 = v16;
      if ( *(_BYTE *)(((unsigned __int64)v16 >> 3) + 0x7FFF8000) != 0
        && (char)(((unsigned __int8)v16 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)v16 >> 3) + 0x7FFF8000) )
      {
        __asan_report_load4(v16);
      }
      area_id = *v17;
      proto::GetScenePointRsp::add_unlock_area_list(rsp_0, area_id);
      std::__detail::_Node_iterator<unsigned int,true,false>::operator++(&__for_begin);
    }
    v18 = std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 64));
    __for_range_2 = Scene::getAllNotExploredPoint(v18);
    __for_begin._M_cur = std::unordered_set<unsigned int>::begin(__for_range_2)._M_cur;
    __for_end._M_cur = std::unordered_set<unsigned int>::end(__for_range_2)._M_cur;
    while ( std::__detail::operator!=<unsigned int,false>(&__for_begin, &__for_end) )
    {
      v19 = (unsigned int *)std::__detail::_Node_iterator<unsigned int,true,false>::operator*(&__for_begin);
      v20 = v19;
      if ( *(_BYTE *)(((unsigned __int64)v19 >> 3) + 0x7FFF8000) != 0
        && (char)(((unsigned __int8)v19 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)v19 >> 3) + 0x7FFF8000) )
      {
        __asan_report_load4(v19);
      }
      point_id_1 = *v20;
      ServiceBox::findService<GameserverService>();
      GameserverService::getConfig((GameserverService *const)&v58);
      v21 = std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false> *const)&v58);
      dungeon_entry_config_id = DungeonEntryExcelConfigMgr::findDungeonEntryConfigId(
                                  &v21->design_config.txt_config_mgr.dungeon_entry_config_mgr,
                                  *(_DWORD *)(v3 + 48),
                                  point_id_1);
      std::shared_ptr<Config>::~shared_ptr(&v58);
      if ( dungeon_entry_config_id )
        proto::GetScenePointRsp::add_not_explored_dungeon_entry_list(rsp_0, dungeon_entry_config_id);
      std::__detail::_Node_iterator<unsigned int,true,false>::operator++(&__for_begin);
    }
    v22 = std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 64));
    __for_range_3 = Scene::getAllToBeExplorePoint(v22);
    __for_begin._M_cur = std::unordered_set<unsigned int>::begin(__for_range_3)._M_cur;
    __for_end._M_cur = std::unordered_set<unsigned int>::end(__for_range_3)._M_cur;
    while ( std::__detail::operator!=<unsigned int,false>(&__for_begin, &__for_end) )
    {
      v23 = (unsigned int *)std::__detail::_Node_iterator<unsigned int,true,false>::operator*(&__for_begin);
      v24 = v23;
      if ( *(_BYTE *)(((unsigned __int64)v23 >> 3) + 0x7FFF8000) != 0
        && (char)(((unsigned __int8)v23 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)v23 >> 3) + 0x7FFF8000) )
      {
        __asan_report_load4(v23);
      }
      point_id_2 = *v24;
      ServiceBox::findService<GameserverService>();
      GameserverService::getConfig((GameserverService *const)&v58);
      v25 = std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false> *const)&v58);
      dungeon_entry_config_id_0 = DungeonEntryExcelConfigMgr::findDungeonEntryConfigId(
                                    &v25->design_config.txt_config_mgr.dungeon_entry_config_mgr,
                                    *(_DWORD *)(v3 + 48),
                                    point_id_2);
      std::shared_ptr<Config>::~shared_ptr(&v58);
      if ( dungeon_entry_config_id_0 )
      {
        proto::GetScenePointRsp::add_to_be_explore_dungeon_entry_list(rsp_0, dungeon_entry_config_id_0);
        v26 = std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 64));
        if ( !Scene::isDungeonEntryInteraced(v26, dungeon_entry_config_id_0) )
          proto::GetScenePointRsp::add_not_interact_dungeon_entry_list(rsp_0, dungeon_entry_config_id_0);
      }
      std::__detail::_Node_iterator<unsigned int,true,false>::operator++(&__for_begin);
    }
    v27 = std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 64));
    __for_range_4 = Scene::getAllGroupUnlimitPoint(v27);
    __for_begin._M_cur = std::unordered_set<unsigned int>::begin(__for_range_4)._M_cur;
    __for_end._M_cur = std::unordered_set<unsigned int>::end(__for_range_4)._M_cur;
    while ( std::__detail::operator!=<unsigned int,false>(&__for_begin, &__for_end) )
    {
      v28 = (unsigned int *)std::__detail::_Node_iterator<unsigned int,true,false>::operator*(&__for_begin);
      v29 = v28;
      if ( *(_BYTE *)(((unsigned __int64)v28 >> 3) + 0x7FFF8000) != 0
        && (char)(((unsigned __int8)v28 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)v28 >> 3) + 0x7FFF8000) )
      {
        __asan_report_load4(v28);
      }
      point_id_3 = *v29;
      proto::GetScenePointRsp::add_group_unlimit_point_list(rsp_0, point_id_3);
      std::__detail::_Node_iterator<unsigned int,true,false>::operator++(&__for_begin);
    }
    v30 = std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 64));
    __for_range_5 = Scene::getAllHidePoint(v30);
    __for_begin._M_cur = std::unordered_set<unsigned int>::begin(__for_range_5)._M_cur;
    __for_end._M_cur = std::unordered_set<unsigned int>::end(__for_range_5)._M_cur;
    while ( std::__detail::operator!=<unsigned int,false>(&__for_begin, &__for_end) )
    {
      v31 = (unsigned int *)std::__detail::_Node_iterator<unsigned int,true,false>::operator*(&__for_begin);
      v32 = v31;
      if ( *(_BYTE *)(((unsigned __int64)v31 >> 3) + 0x7FFF8000) != 0
        && (char)(((unsigned __int8)v31 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)v31 >> 3) + 0x7FFF8000) )
      {
        __asan_report_load4(v31);
      }
      point_id_4 = *v32;
      proto::GetScenePointRsp::add_hide_point_list(rsp_0, point_id_4);
      std::__detail::_Node_iterator<unsigned int,true,false>::operator++(&__for_begin);
    }
    v33 = std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 64));
    __for_range_6 = Scene::getAllUnHidePoint(v33);
    __for_begin._M_cur = std::unordered_set<unsigned int>::begin(__for_range_6)._M_cur;
    __for_end._M_cur = std::unordered_set<unsigned int>::end(__for_range_6)._M_cur;
    while ( std::__detail::operator!=<unsigned int,false>(&__for_begin, &__for_end) )
    {
      v34 = (unsigned int *)std::__detail::_Node_iterator<unsigned int,true,false>::operator*(&__for_begin);
      v35 = v34;
      if ( *(_BYTE *)(((unsigned __int64)v34 >> 3) + 0x7FFF8000) != 0
        && (char)(((unsigned __int8)v34 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)v34 >> 3) + 0x7FFF8000) )
      {
        __asan_report_load4(v34);
      }
      point_id_5 = *v35;
      proto::GetScenePointRsp::add_unhide_point_list(rsp_0, point_id_5);
      std::__detail::_Node_iterator<unsigned int,true,false>::operator++(&__for_begin);
    }
  }
  std::shared_ptr<Scene>::~shared_ptr((std::shared_ptr<Scene> *const)(v3 + 64));
  if ( v60 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8008) = 0;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8008) = -168430091;
  }
};

// Line 1682: range 0000000013E4B992-0000000013E4C41A
__int64 __fastcall PlayerSceneComp::getNearestUnlockedSceneTransPoint(
        PlayerSceneComp *const this,
        uint32_t scene_id,
        const Vector3 *pos,
        Vector3 *nearest_pos,
        Vector3 *nearest_rot)
{
  unsigned __int64 v5; // r13
  __int64 v6; // rax
  _DWORD *v7; // r12
  std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v8; // rax
  common::milog::MiLogStream *v9; // rax
  unsigned int v10; // r14d
  Scene *v11; // rax
  std::unordered_set<unsigned int> *AllUnlockPoint; // rax
  std::__detail::_Node_iterator_base<unsigned int,false>::__node_type *M_cur; // r14
  Scene *v14; // rax
  std::unordered_set<unsigned int> *v15; // rax
  std::unordered_set<unsigned int>::iterator v16; // rax
  __m128i v17; // xmm0
  std::__detail::_Node_iterator<unsigned int,true,false>::reference v18; // rax
  _DWORD *v19; // rdx
  unsigned __int64 v20; // rax
  std::__detail::_Node_const_iterator<std::pair<unsigned int const,std::shared_ptr<data::ConfigScenePoint> >,false,false>::pointer v21; // rax
  std::__shared_ptr_access<data::SceneTransPoint,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v22; // rax
  std::__shared_ptr_access<data::SceneTransPoint,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v23; // rax
  char v24; // al
  std::__shared_ptr_access<data::SceneTransPoint,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v25; // rax
  std::__shared_ptr_access<data::SceneTransPoint,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v26; // rax
  std::__shared_ptr_access<data::SceneTransPoint,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v27; // rax
  std::__shared_ptr_access<data::SceneTransPoint,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v28; // rax
  std::__shared_ptr_access<data::SceneTransPoint,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v29; // rax
  common::milog::MiLogStream *v30; // rax
  common::milog::MiLogStream *v31; // rcx
  __int64 result; // rax
  uint32_t nearest_point_id; // [rsp+38h] [rbp-1B8h]
  float min_distance; // [rsp+3Ch] [rbp-1B4h]
  uint32_t point_id; // [rsp+40h] [rbp-1B0h]
  float distance; // [rsp+44h] [rbp-1ACh]
  std::unordered_set<unsigned int>::iterator __for_begin; // [rsp+48h] [rbp-1A8h] BYREF
  std::unordered_set<unsigned int>::iterator __for_end; // [rsp+50h] [rbp-1A0h] BYREF
  std::__detail::_Node_iterator_base<std::pair<unsigned int const,std::shared_ptr<data::ConfigScenePoint> >,false> __y; // [rsp+58h] [rbp-198h] BYREF
  const SceneJsonConfig *scene_json_config_ptr; // [rsp+60h] [rbp-190h]
  std::unordered_set<unsigned int> *__for_range; // [rsp+68h] [rbp-188h]
  Vector3 pos2; // [rsp+74h] [rbp-17Ch] BYREF
  common::milog::MiLogStream v46; // [rsp+80h] [rbp-170h] BYREF
  char v47[336]; // [rsp+A0h] [rbp-150h] BYREF

  v5 = (unsigned __int64)v47;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v6 = __asan_stack_malloc_3(288LL);
    if ( v6 )
      v5 = v6;
  }
  *(_QWORD *)v5 = 1102416563LL;
  *(_QWORD *)(v5 + 8) = "7 32 4 13 point_id:1698 48 4 13 scene_id:1681 64 8 13 it_point:1700 96 16 14 scene_ptr:1690 128 "
                        "16 21 config_point_ptr:1704 160 16 20 trans_point_ptr:1705 192 56 23 unlocked_point_set:1689";
  *(_QWORD *)(v5 + 16) = PlayerSceneComp::getNearestUnlockedSceneTransPoint;
  v7 = (_DWORD *)(v5 >> 3);
  v7[536862720] = -235802127;
  v7[536862721] = -234556924;
  v7[536862722] = -218959360;
  v7[536862723] = -219021312;
  v7[536862724] = -219021312;
  v7[536862725] = -219021312;
  v7[536862727] = -218103808;
  v7[536862728] = -202116109;
  *(_DWORD *)(v5 + 48) = scene_id;
  ServiceBox::findService<GameserverService>();
  GameserverService::getConfig((GameserverService *const)(v5 + 160));
  v8 = std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v5 + 160));
  scene_json_config_ptr = JsonConfigMgr::findSceneJsonConfig(&v8->design_config.json_config_mgr, *(_DWORD *)(v5 + 48));
  std::shared_ptr<Config>::~shared_ptr((std::shared_ptr<Config> *const)(v5 + 160));
  if ( scene_json_config_ptr )
  {
    std::unordered_set<unsigned int>::unordered_set(
      (std::unordered_set<unsigned int> *const)(v5 + 192),
      &scene_json_config_ptr->unlocked_point_set);
    PlayerSceneComp::findScene((const PlayerSceneComp *const)(v5 + 96), (uint32_t)this);
    if ( std::operator!=<Scene>((const std::shared_ptr<Scene> *)(v5 + 96), 0LL) )
    {
      v11 = std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v5 + 96));
      AllUnlockPoint = Scene::getAllUnlockPoint(v11);
      M_cur = std::unordered_set<unsigned int>::end(AllUnlockPoint)._M_cur;
      v14 = std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v5 + 96));
      v15 = Scene::getAllUnlockPoint(v14);
      v16._M_cur = std::unordered_set<unsigned int>::begin(v15)._M_cur;
      std::unordered_set<unsigned int>::insert<std::__detail::_Node_iterator<unsigned int,true,false>>(
        (std::unordered_set<unsigned int> *const)(v5 + 192),
        v16,
        (std::__detail::_Node_iterator<unsigned int,true,false>)M_cur);
    }
    nearest_point_id = 0;
    v17 = (__m128i)0x7F7FFFFFu;
    min_distance = 3.4028235e38;
    __for_range = (std::unordered_set<unsigned int> *)(v5 + 192);
    __for_begin._M_cur = std::unordered_set<unsigned int>::begin((std::unordered_set<unsigned int> *const)(v5 + 192))._M_cur;
    __for_end._M_cur = std::unordered_set<unsigned int>::end((std::unordered_set<unsigned int> *const)(v5 + 192))._M_cur;
    while ( std::__detail::operator!=<unsigned int,false>(&__for_begin, &__for_end) )
    {
      v18 = std::__detail::_Node_iterator<unsigned int,true,false>::operator*(&__for_begin);
      v19 = v18;
      if ( *(_BYTE *)(((unsigned __int64)v18 >> 3) + 0x7FFF8000) != 0
        && (char)(((unsigned __int8)v18 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)v18 >> 3) + 0x7FFF8000) )
      {
        __asan_report_load4(v18);
      }
      *(_DWORD *)(v5 + 32) = *v19;
      *(std::unordered_map<unsigned int,std::shared_ptr<data::ConfigScenePoint>>::const_iterator *)(v5 + 64) = std::unordered_map<unsigned int,std::shared_ptr<data::ConfigScenePoint>>::find(&scene_json_config_ptr->point_map, (const std::unordered_map<unsigned int,std::shared_ptr<data::ConfigScenePoint>>::key_type *)(v5 + 32));
      __y._M_cur = std::unordered_map<unsigned int,std::shared_ptr<data::ConfigScenePoint>>::end(&scene_json_config_ptr->point_map)._M_cur;
      if ( std::__detail::operator!=<std::pair<unsigned int const,std::shared_ptr<data::ConfigScenePoint>>,false>(
             (const std::__detail::_Node_iterator_base<std::pair<unsigned int const,std::shared_ptr<data::ConfigScenePoint> >,false> *)(v5 + 64),
             &__y) )
      {
        v20 = (unsigned __int64)std::__detail::_Node_const_iterator<std::pair<unsigned int const,std::shared_ptr<data::ConfigScenePoint>>,false,false>::operator->((const std::__detail::_Node_const_iterator<std::pair<unsigned int const,std::shared_ptr<data::ConfigScenePoint> >,false,false> *const)(v5 + 64));
        if ( *(_BYTE *)((v20 >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)((v20 >> 3) + 0x7FFF8000) <= 3 )
          v20 = __asan_report_load4(v20);
        point_id = *(_DWORD *)v20;
        v21 = std::__detail::_Node_const_iterator<std::pair<unsigned int const,std::shared_ptr<data::ConfigScenePoint>>,false,false>::operator->((const std::__detail::_Node_const_iterator<std::pair<unsigned int const,std::shared_ptr<data::ConfigScenePoint> >,false,false> *const)(v5 + 64));
        std::shared_ptr<data::ConfigScenePoint>::shared_ptr(
          (std::shared_ptr<data::ConfigScenePoint> *const)(v5 + 128),
          &v21->second);
        std::dynamic_pointer_cast<data::SceneTransPoint,data::ConfigScenePoint>((const std::shared_ptr<data::ConfigScenePoint> *)(v5 + 160));
        if ( !std::operator==<data::SceneTransPoint>((const std::shared_ptr<data::SceneTransPoint> *)(v5 + 160), 0LL) )
        {
          v22 = std::__shared_ptr_access<data::SceneTransPoint,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<data::SceneTransPoint,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v5 + 160));
          if ( *(_BYTE *)(((unsigned __int64)&v22->type >> 3) + 0x7FFF8000) != 0
            && *(_BYTE *)(((unsigned __int64)&v22->type >> 3) + 0x7FFF8000) <= 3 )
          {
            v22 = (std::__shared_ptr_access<data::SceneTransPoint,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *)__asan_report_load4(&v22->type);
          }
          if ( v22->type == NORMAL_0 )
            goto LABEL_23;
          v23 = std::__shared_ptr_access<data::SceneTransPoint,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<data::SceneTransPoint,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v5 + 160));
          if ( *(_BYTE *)(((unsigned __int64)&v23->type >> 3) + 0x7FFF8000) != 0
            && *(_BYTE *)(((unsigned __int64)&v23->type >> 3) + 0x7FFF8000) <= 3 )
          {
            v23 = (std::__shared_ptr_access<data::SceneTransPoint,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *)__asan_report_load4(&v23->type);
          }
          if ( v23->type == TOWER )
LABEL_23:
            v24 = 0;
          else
            v24 = 1;
          if ( !v24 )
          {
            v25 = std::__shared_ptr_access<data::SceneTransPoint,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<data::SceneTransPoint,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v5 + 160));
            Vector3::Vector3(&pos2, &v25->pos);
            *(float *)v17.m128i_i32 = getPlaneDistance(pos, &pos2);
            distance = COERCE_FLOAT(_mm_cvtsi128_si32(v17));
            v17 = (__m128i)LODWORD(min_distance);
            if ( min_distance > distance )
            {
              nearest_point_id = point_id;
              v17 = (__m128i)LODWORD(distance);
              min_distance = distance;
              v26 = std::__shared_ptr_access<data::SceneTransPoint,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<data::SceneTransPoint,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v5 + 160));
              Vector3::Vector3(&pos2, &v26->tran_pos);
              if ( ((unsigned __int8)nearest_pos & 7) >= *(_BYTE *)(((unsigned __int64)nearest_pos >> 3) + 0x7FFF8000)
                && *(_BYTE *)(((unsigned __int64)nearest_pos >> 3) + 0x7FFF8000) != 0
                || *(_BYTE *)((((unsigned __int64)&nearest_pos->z + 3) >> 3) + 0x7FFF8000) != 0
                && (((unsigned __int8)nearest_pos + 11) & 7) >= *(_BYTE *)((((unsigned __int64)&nearest_pos->z + 3) >> 3)
                                                                         + 0x7FFF8000) )
              {
                __asan_report_store_n(nearest_pos, 12LL);
              }
              *nearest_pos = pos2;
              v27 = std::__shared_ptr_access<data::SceneTransPoint,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<data::SceneTransPoint,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v5 + 160));
              Vector3::Vector3(&pos2, &v27->tran_rot);
              if ( ((unsigned __int8)nearest_rot & 7) >= *(_BYTE *)(((unsigned __int64)nearest_rot >> 3) + 0x7FFF8000)
                && *(_BYTE *)(((unsigned __int64)nearest_rot >> 3) + 0x7FFF8000) != 0
                || *(_BYTE *)((((unsigned __int64)&nearest_rot->z + 3) >> 3) + 0x7FFF8000) != 0
                && (((unsigned __int8)nearest_rot + 11) & 7) >= *(_BYTE *)((((unsigned __int64)&nearest_rot->z + 3) >> 3)
                                                                         + 0x7FFF8000) )
              {
                __asan_report_store_n(nearest_rot, 12LL);
              }
              *nearest_rot = pos2;
              if ( Vector3::isZero(nearest_pos) )
              {
                v28 = std::__shared_ptr_access<data::SceneTransPoint,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<data::SceneTransPoint,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v5 + 160));
                Vector3::Vector3(&pos2, &v28->pos);
                if ( ((unsigned __int8)nearest_pos & 7) >= *(_BYTE *)(((unsigned __int64)nearest_pos >> 3) + 0x7FFF8000)
                  && *(_BYTE *)(((unsigned __int64)nearest_pos >> 3) + 0x7FFF8000) != 0
                  || *(_BYTE *)((((unsigned __int64)&nearest_pos->z + 3) >> 3) + 0x7FFF8000) != 0
                  && (((unsigned __int8)nearest_pos + 11) & 7) >= *(_BYTE *)((((unsigned __int64)&nearest_pos->z + 3) >> 3)
                                                                           + 0x7FFF8000) )
                {
                  __asan_report_store_n(nearest_pos, 12LL);
                }
                *nearest_pos = pos2;
                v29 = std::__shared_ptr_access<data::SceneTransPoint,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<data::SceneTransPoint,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v5 + 160));
                Vector3::Vector3(&pos2, &v29->rot);
                if ( ((unsigned __int8)nearest_rot & 7) >= *(_BYTE *)(((unsigned __int64)nearest_rot >> 3) + 0x7FFF8000)
                  && *(_BYTE *)(((unsigned __int64)nearest_rot >> 3) + 0x7FFF8000) != 0
                  || *(_BYTE *)((((unsigned __int64)&nearest_rot->z + 3) >> 3) + 0x7FFF8000) != 0
                  && (((unsigned __int8)nearest_rot + 11) & 7) >= *(_BYTE *)((((unsigned __int64)&nearest_rot->z + 3) >> 3)
                                                                           + 0x7FFF8000) )
                {
                  __asan_report_store_n(nearest_rot, 12LL);
                }
                *nearest_rot = pos2;
              }
            }
          }
        }
        std::shared_ptr<data::SceneTransPoint>::~shared_ptr((std::shared_ptr<data::SceneTransPoint> *const)(v5 + 160));
        std::shared_ptr<data::ConfigScenePoint>::~shared_ptr((std::shared_ptr<data::ConfigScenePoint> *const)(v5 + 128));
      }
      std::__detail::_Node_iterator<unsigned int,true,false>::operator++(&__for_begin);
    }
    if ( nearest_point_id )
    {
      v10 = 0;
    }
    else
    {
      common::milog::MiLogStream::create(
        &v46,
        &common::milog::MiLogDefault::default_log_obj_,
        1u,
        "./src/scene/player_scene_comp.cpp",
        "getNearestUnlockedSceneTransPoint",
        1731);
      v30 = common::milog::MiLogStream::operator<<<char [36],(char *[36])0>(&v46, (const char (*)[36])off_2517FCE0);
      v31 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v30, (const unsigned int *)(v5 + 48));
      if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
        __asan_report_load8();
      operator<<(v31, this->player_);
      common::milog::MiLogStream::~MiLogStream(&v46);
      Vector3::reset(nearest_pos);
      v10 = -1;
    }
    std::shared_ptr<Scene>::~shared_ptr((std::shared_ptr<Scene> *const)(v5 + 96));
    std::unordered_set<unsigned int>::~unordered_set((std::unordered_set<unsigned int> *const)(v5 + 192));
  }
  else
  {
    common::milog::MiLogStream::create(
      &v46,
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/scene/player_scene_comp.cpp",
      "getNearestUnlockedSceneTransPoint",
      1686);
    v9 = common::milog::MiLogStream::operator<<<char [37],(char *[37])0>(
           &v46,
           (const char (*)[37])"findSceneJsonConfig fails, scene_id:");
    common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v9, (const unsigned int *)(v5 + 48));
    common::milog::MiLogStream::~MiLogStream(&v46);
    v10 = -1;
  }
  result = v10;
  if ( v47 == (char *)v5 )
  {
    *(_QWORD *)((v5 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8008) = 0LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8010) = 0LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF801C) = 0LL;
  }
  else
  {
    *(_QWORD *)v5 = 1172321806LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v5 >> 3) + 0x7FFF8020) = -168430091;
  }
  return result;
};

// Line 1740: range 0000000013E4C41C-0000000013E4D229
__int64 __fastcall PlayerSceneComp::unlockArea(
        PlayerSceneComp *const this,
        __int32 scene_id,
        __int32 area_id,
        __int8 is_notify)
{
  unsigned __int64 v4; // r13
  __int64 v5; // rax
  _DWORD *v6; // r12
  PlayerBasicComp *BasicComp; // rax
  std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v8; // rax
  common::milog::MiLogStream *v9; // rax
  common::milog::MiLogStream *v10; // rax
  common::milog::MiLogStream *v11; // rcx
  unsigned int v12; // r14d
  common::milog::MiLogStream *v13; // rax
  common::milog::MiLogStream *v14; // rax
  common::milog::MiLogStream *v15; // rax
  common::milog::MiLogStream *v16; // rax
  common::milog::MiLogStream *v17; // rax
  common::milog::MiLogStream *v18; // rax
  common::milog::MiLogStream *v19; // rax
  common::milog::MiLogStream *v20; // rax
  common::milog::MiLogStream *v21; // rax
  common::milog::MiLogStream *v22; // rax
  common::milog::MiLogStream *v23; // r14
  Scene *v24; // rax
  common::milog::MiLogStream *v25; // r14
  common::milog::MiLogStream *v26; // rax
  common::milog::MiLogStream *v27; // rax
  common::milog::MiLogStream *v28; // rax
  Scene *v29; // rax
  common::milog::MiLogStream *v30; // r14
  common::milog::MiLogStream *v31; // rax
  common::milog::MiLogStream *v32; // rax
  common::milog::MiLogStream *v33; // rax
  common::milog::MiLogStream *v34; // rax
  uint32_t v35; // eax
  common::milog::MiLogStream *v36; // rax
  common::milog::MiLogStream *v37; // rax
  common::milog::MiLogStream *v38; // rax
  common::milog::MiLogStream *v39; // r14
  common::milog::MiLogStream *v40; // rax
  common::milog::MiLogStream *v41; // rax
  std::__shared_ptr_access<proto_log::PlayerLogBodyUnlockArea,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v42; // rax
  std::__shared_ptr_access<proto_log::PlayerLogBodyUnlockArea,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v43; // rax
  std::__shared_ptr_access<proto_log::PlayerLogBodyUnlockArea,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v44; // r14
  uint32_t Level1AreaId; // eax
  std::__shared_ptr_access<proto_log::PlayerLogBodyUnlockArea,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v46; // r14
  uint32_t Level2AreaId; // eax
  Player *player; // r14
  std::__shared_ptr_access<proto::SceneAreaUnlockNotify,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v49; // rax
  std::__shared_ptr_access<proto::SceneAreaUnlockNotify,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v50; // rax
  Player *v51; // r14
  __int64 result; // rax
  std::string v53; // [rsp+0h] [rbp-170h]
  bool is_notifya; // [rsp+Ch] [rbp-164h]
  PlayerSceneComp *thisa; // [rsp+18h] [rbp-158h]
  unsigned int val; // [rsp+20h] [rbp-150h] BYREF
  int32_t ret; // [rsp+24h] [rbp-14Ch]
  const data::WorldAreaConfig *area_config_ptr; // [rsp+28h] [rbp-148h]
  std::shared_ptr<google::protobuf::Message> v59; // [rsp+30h] [rbp-140h] BYREF
  std::string v60; // [rsp+40h] [rbp-130h] BYREF
  char v61[272]; // [rsp+60h] [rbp-110h] BYREF

  *(&v53._anon_0._M_allocated_capacity + 1) = (std::string::size_type)this;
  HIDWORD(v53._anon_0._M_allocated_capacity) = scene_id;
  *(_DWORD *)v53._anon_0._M_local_buf = area_id;
  BYTE4(v53._M_string_length) = is_notify;
  v4 = (unsigned __int64)v61;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v5 = __asan_stack_malloc_2(224LL);
    if ( v5 )
      v4 = v5;
  }
  *(_QWORD *)v4 = 1102416563LL;
  *(_QWORD *)(v4 + 8) = "7 48 1 11 holder:1741 64 4 13 scene_id:1739 80 4 12 area_id:1739 96 16 14 scene_ptr:1758 128 16 "
                        "13 area_ptr:1777 160 16 24 unlock_area_log_ptr:1786 192 16 22 unlock_notify_ptr:1795";
  *(_QWORD *)(v4 + 16) = PlayerSceneComp::unlockArea;
  v6 = (_DWORD *)(v4 >> 3);
  v6[536862720] = -235802127;
  v6[536862721] = -234753551;
  v6[536862722] = -234556924;
  v6[536862723] = -219021312;
  v6[536862724] = -219021312;
  v6[536862725] = -219021312;
  v6[536862726] = -202178560;
  *(_DWORD *)(v4 + 64) = scene_id;
  *(_DWORD *)(v4 + 80) = *(_DWORD *)v53._anon_0._M_local_buf;
  if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
    __asan_report_load8();
  BasicComp = Player::getBasicComp(this->player_);
  PlayerBasicComp::getNextTransNo[abi:cxx11](&v60, BasicComp);
  StatLogUtils::ContextHolder::ContextHolder((StatLogUtils::ContextHolder *const)(v4 + 48), 0x5E6u, v53);
  std::string::~string(&v60);
  ServiceBox::findService<GameserverService>();
  GameserverService::getConfig((GameserverService *const)&v59);
  v8 = std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false> *const)&v59);
  area_config_ptr = WorldAreaExcelConfigMgr::findFirstLevelWorldAreaConfig(
                      &v8->design_config.txt_config_mgr.world_area_config_mgr,
                      *(_DWORD *)(v4 + 80));
  std::shared_ptr<Config>::~shared_ptr((std::shared_ptr<Config> *const)&v59);
  if ( !area_config_ptr )
  {
    common::milog::MiLogStream::create(
      (common::milog::MiLogStream *)&v60,
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/scene/player_scene_comp.cpp",
      "unlockArea",
      1745);
    v9 = common::milog::MiLogStream::operator<<<char [45],(char *[45])0>(
           (common::milog::MiLogStream *const)&v60,
           (const char (*)[45])"findFirstLevelWorldAreaConfig fail, area_id:");
    v10 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v9, (const unsigned int *)(v4 + 80));
    v11 = common::milog::MiLogStream::operator<<<char [9],(char *[9])0>(v10, (const char (*)[9])" player:");
    if ( *(_BYTE *)(((unsigned __int64)&thisa->player_ >> 3) + 0x7FFF8000) )
      __asan_report_load8();
LABEL_9:
    operator<<(v11, thisa->player_);
    common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)&v60);
    v12 = -1;
    goto LABEL_45;
  }
  if ( *(_BYTE *)(((unsigned __int64)&area_config_ptr->area_type >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&area_config_ptr->area_type >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4(&area_config_ptr->area_type);
  }
  if ( area_config_ptr->area_type == LEVEL_1 )
  {
    if ( *(_BYTE *)(((unsigned __int64)&area_config_ptr->scene_id >> 3) + 0x7FFF8000) != 0
      && (char)((((_BYTE)area_config_ptr + 12) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&area_config_ptr->scene_id >> 3)
                                                                     + 0x7FFF8000) )
    {
      __asan_report_load4(&area_config_ptr->scene_id);
    }
    if ( area_config_ptr->scene_id != *(_DWORD *)(v4 + 64) )
    {
      common::milog::MiLogStream::create(
        (common::milog::MiLogStream *)&v60,
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/scene/player_scene_comp.cpp",
        "unlockArea",
        1755);
      v15 = common::milog::MiLogStream::operator<<<char [42],(char *[42])0>(
              (common::milog::MiLogStream *const)&v60,
              (const char (*)[42])"scene_id and area_id not match! scene_id:");
      v16 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v15, (const unsigned int *)(v4 + 64));
      v17 = common::milog::MiLogStream::operator<<<char [10],(char *[10])0>(v16, (const char (*)[10])" area_id:");
      v18 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v17, (const unsigned int *)(v4 + 80));
      v19 = common::milog::MiLogStream::operator<<<char [18],(char *[18])0>(
              v18,
              (const char (*)[18])" area's scene_id:");
      v20 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v19, (const unsigned int *)(v4 + 64));
      v11 = common::milog::MiLogStream::operator<<<char [9],(char *[9])0>(v20, (const char (*)[9])" player:");
      if ( *(_BYTE *)(((unsigned __int64)&thisa->player_ >> 3) + 0x7FFF8000) )
        __asan_report_load8();
      goto LABEL_9;
    }
    PlayerSceneComp::findScene((const PlayerSceneComp *const)(v4 + 96), (uint32_t)thisa);
    if ( std::operator==<Scene>((const std::shared_ptr<Scene> *)(v4 + 96), 0LL) )
    {
      common::milog::MiLogStream::create(
        (common::milog::MiLogStream *)&v60,
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/scene/player_scene_comp.cpp",
        "unlockArea",
        1761);
      v21 = common::milog::MiLogStream::operator<<<char [28],(char *[28])0>(
              (common::milog::MiLogStream *const)&v60,
              (const char (*)[28])"findScene failed, scene_id:");
      v22 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v21, (const unsigned int *)(v4 + 64));
      v23 = common::milog::MiLogStream::operator<<<char [7],(char *[7])0>(v22, (const char (*)[7])", uid:");
      if ( *(_BYTE *)(((unsigned __int64)&thisa->player_ >> 3) + 0x7FFF8000) )
        __asan_report_load8();
      val = Player::getUid(thisa->player_);
      common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v23, &val);
      common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)&v60);
      v12 = -1;
    }
    else
    {
      v24 = std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 96));
      if ( Scene::isAreaUnlocked(v24, *(_DWORD *)(v4 + 80)) )
      {
        common::milog::MiLogStream::create(
          (common::milog::MiLogStream *)&v60,
          &common::milog::MiLogDefault::default_log_obj_,
          1u,
          "./src/scene/player_scene_comp.cpp",
          "unlockArea",
          1766);
        v25 = common::milog::MiLogStream::operator<<<char [6],(char *[6])0>(
                (common::milog::MiLogStream *const)&v60,
                (const char (*)[6])"uid: ");
        if ( *(_BYTE *)(((unsigned __int64)&thisa->player_ >> 3) + 0x7FFF8000) )
          __asan_report_load8();
        val = Player::getUid(thisa->player_);
        v26 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v25, &val);
        v27 = common::milog::MiLogStream::operator<<<char [11],(char *[11])0>(v26, (const char (*)[11])" area_id: ");
        v28 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                v27,
                (const unsigned int *)(v4 + 80));
        common::milog::MiLogStream::operator<<<char [21],(char *[21])0>(v28, (const char (*)[21])off_25180040);
        common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)&v60);
        v12 = -1;
      }
      else
      {
        v29 = std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 96));
        ret = Scene::unlockArea(v29, *(_DWORD *)(v4 + 80));
        if ( ret )
        {
          common::milog::MiLogStream::create(
            (common::milog::MiLogStream *)&v60,
            &common::milog::MiLogDefault::default_log_obj_,
            1u,
            "./src/scene/player_scene_comp.cpp",
            "unlockArea",
            1773);
          v30 = common::milog::MiLogStream::operator<<<char [25],(char *[25])0>(
                  (common::milog::MiLogStream *const)&v60,
                  (const char (*)[25])"unlock area failed, uid:");
          if ( *(_BYTE *)(((unsigned __int64)&thisa->player_ >> 3) + 0x7FFF8000) )
            __asan_report_load8();
          val = Player::getUid(thisa->player_);
          v31 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v30, &val);
          v32 = common::milog::MiLogStream::operator<<<char [10],(char *[10])0>(v31, (const char (*)[10])" area_id:");
          v33 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                  v32,
                  (const unsigned int *)(v4 + 80));
          v34 = common::milog::MiLogStream::operator<<<char [12],(char *[12])0>(v33, (const char (*)[12])", scene_id:");
          common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v34, (const unsigned int *)(v4 + 64));
          common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)&v60);
          v12 = ret;
        }
        else
        {
          v35 = (unsigned int)std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 96));
          Scene::getArea((Scene *const)(v4 + 128), v35);
          if ( std::operator==<Area>(0LL, (const std::shared_ptr<Area> *)(v4 + 128)) )
          {
            common::milog::MiLogStream::create(
              (common::milog::MiLogStream *)&v60,
              &common::milog::MiLogDefault::default_log_obj_,
              3u,
              "./src/scene/player_scene_comp.cpp",
              "unlockArea",
              1780);
            v36 = common::milog::MiLogStream::operator<<<char [9],(char *[9])0>(
                    (common::milog::MiLogStream *const)&v60,
                    (const char (*)[9])"getArea ");
            v37 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                    v36,
                    (const unsigned int *)(v4 + 80));
            v38 = common::milog::MiLogStream::operator<<<char [24],(char *[24])0>(
                    v37,
                    (const char (*)[24])" failed, for scene_id: ");
            common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v38, (const unsigned int *)(v4 + 64));
            common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)&v60);
            v12 = -1;
          }
          else
          {
            common::milog::MiLogStream::create(
              (common::milog::MiLogStream *)&v60,
              &common::milog::MiLogDefault::default_log_obj_,
              1u,
              "./src/scene/player_scene_comp.cpp",
              "unlockArea",
              1784);
            v39 = common::milog::MiLogStream::operator<<<char [6],(char *[6])0>(
                    (common::milog::MiLogStream *const)&v60,
                    (const char (*)[6])"uid: ");
            if ( *(_BYTE *)(((unsigned __int64)&thisa->player_ >> 3) + 0x7FFF8000) )
              __asan_report_load8();
            val = Player::getUid(thisa->player_);
            v40 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v39, &val);
            v41 = common::milog::MiLogStream::operator<<<char [15],(char *[15])0>(
                    v40,
                    (const char (*)[15])" unlock area: ");
            common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v41, (const unsigned int *)(v4 + 80));
            common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)&v60);
            common::tools::perf::make_shared<proto_log::PlayerLogBodyUnlockArea>();
            v42 = std::__shared_ptr_access<proto_log::PlayerLogBodyUnlockArea,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<proto_log::PlayerLogBodyUnlockArea,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 160));
            proto_log::PlayerLogBodyUnlockArea::set_scene_id(v42, *(_DWORD *)(v4 + 64));
            v43 = std::__shared_ptr_access<proto_log::PlayerLogBodyUnlockArea,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<proto_log::PlayerLogBodyUnlockArea,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 160));
            proto_log::PlayerLogBodyUnlockArea::set_area_id(v43, *(_DWORD *)(v4 + 80));
            v44 = std::__shared_ptr_access<proto_log::PlayerLogBodyUnlockArea,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<proto_log::PlayerLogBodyUnlockArea,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 160));
            Level1AreaId = PlayerSceneComp::getLevel1AreaId(thisa);
            proto_log::PlayerLogBodyUnlockArea::set_level1_area_id(v44, Level1AreaId);
            v46 = std::__shared_ptr_access<proto_log::PlayerLogBodyUnlockArea,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<proto_log::PlayerLogBodyUnlockArea,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 160));
            Level2AreaId = PlayerSceneComp::getLevel2AreaId(thisa);
            proto_log::PlayerLogBodyUnlockArea::set_level2_area_id(v46, Level2AreaId);
            if ( *(_BYTE *)(((unsigned __int64)&thisa->player_ >> 3) + 0x7FFF8000) )
              __asan_report_load8();
            player = thisa->player_;
            std::shared_ptr<google::protobuf::Message>::shared_ptr(&v59, 0LL);
            std::shared_ptr<google::protobuf::Message>::shared_ptr<proto_log::PlayerLogBodyUnlockArea,void>(
              (std::shared_ptr<google::protobuf::Message> *const)(v4 + 192),
              (const std::shared_ptr<proto_log::PlayerLogBodyUnlockArea> *)(v4 + 160));
            Player::printStatLog(player, (MessagePtr *)(v4 + 192), &v59, 0xEu);
            std::shared_ptr<google::protobuf::Message>::~shared_ptr((std::shared_ptr<google::protobuf::Message> *const)(v4 + 192));
            std::shared_ptr<google::protobuf::Message>::~shared_ptr(&v59);
            if ( is_notifya )
            {
              common::tools::perf::make_shared<proto::SceneAreaUnlockNotify>();
              v49 = std::__shared_ptr_access<proto::SceneAreaUnlockNotify,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<proto::SceneAreaUnlockNotify,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 192));
              proto::SceneAreaUnlockNotify::set_scene_id(v49, *(_DWORD *)(v4 + 64));
              v50 = std::__shared_ptr_access<proto::SceneAreaUnlockNotify,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<proto::SceneAreaUnlockNotify,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 192));
              proto::SceneAreaUnlockNotify::add_area_list(v50, *(_DWORD *)(v4 + 80));
              if ( *(_BYTE *)(((unsigned __int64)&thisa->player_ >> 3) + 0x7FFF8000) )
                __asan_report_load8();
              v51 = thisa->player_;
              std::dynamic_pointer_cast<google::protobuf::Message const,proto::SceneAreaUnlockNotify>((const std::shared_ptr<proto::SceneAreaUnlockNotify> *)&v59);
              Player::sendMessage(v51, (common::minet::ConstMessagePtr *)&v59, 0LL);
              std::shared_ptr<google::protobuf::Message const>::~shared_ptr((std::shared_ptr<const google::protobuf::Message> *const)&v59);
              std::shared_ptr<proto::SceneAreaUnlockNotify>::~shared_ptr((std::shared_ptr<proto::SceneAreaUnlockNotify> *const)(v4 + 192));
            }
            v12 = 0;
            std::shared_ptr<proto_log::PlayerLogBodyUnlockArea>::~shared_ptr((std::shared_ptr<proto_log::PlayerLogBodyUnlockArea> *const)(v4 + 160));
          }
          std::shared_ptr<Area>::~shared_ptr((std::shared_ptr<Area> *const)(v4 + 128));
        }
      }
    }
    std::shared_ptr<Scene>::~shared_ptr((std::shared_ptr<Scene> *const)(v4 + 96));
  }
  else
  {
    common::milog::MiLogStream::create(
      (common::milog::MiLogStream *)&v60,
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/scene/player_scene_comp.cpp",
      "unlockArea",
      1750);
    v13 = common::milog::MiLogStream::operator<<<char [10],(char *[10])0>(
            (common::milog::MiLogStream *const)&v60,
            (const char (*)[10])"area_id: ");
    v14 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v13, (const unsigned int *)(v4 + 80));
    common::milog::MiLogStream::operator<<<char [21],(char *[21])0>(v14, (const char (*)[21])off_2517FEE0);
    common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)&v60);
    v12 = -1;
  }
LABEL_45:
  StatLogUtils::ContextHolder::~ContextHolder((StatLogUtils::ContextHolder *const)(v4 + 48));
  result = v12;
  if ( v61 == (char *)v4 )
  {
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8008) = 0LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8010) = 0LL;
    *(_DWORD *)((v4 >> 3) + 0x7FFF8018) = 0;
  }
  else
  {
    *(_QWORD *)v4 = 1172321806LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v4 >> 3) + 0x7FFF8018) = -168430091;
  }
  return result;
};

// Line 1804: range 0000000013E4D22A-0000000013E4D4ED
int32_t __cdecl PlayerSceneComp::unlockArea(
        PlayerSceneComp *const this,
        uint32_t scene_id,
        const std::vector<unsigned int> *area_id_vec,
        bool is_notify)
{
  unsigned __int64 v4; // rbx
  __int64 v5; // rax
  unsigned __int64 v6; // r13
  std::__shared_ptr_access<proto::SceneAreaUnlockNotify,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v7; // rax
  unsigned int *v8; // rax
  __int32 *v9; // rdx
  std::__shared_ptr_access<proto::SceneAreaUnlockNotify,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v10; // rax
  Player *player; // r14
  int32_t result; // eax
  uint32_t area_id; // [rsp+20h] [rbp-A0h]
  std::vector<unsigned int>::const_iterator __for_begin; // [rsp+28h] [rbp-98h] BYREF
  std::vector<unsigned int>::const_iterator __for_end; // [rsp+30h] [rbp-90h] BYREF
  const std::vector<unsigned int> *__for_range; // [rsp+38h] [rbp-88h]
  std::shared_ptr<proto::SceneAreaUnlockNotify> __r; // [rsp+40h] [rbp-80h] BYREF
  char v20[112]; // [rsp+50h] [rbp-70h] BYREF

  v4 = (unsigned __int64)v20;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v5 = __asan_stack_malloc_0(64LL);
    if ( v5 )
      v4 = v5;
  }
  *(_QWORD *)v4 = 1102416563LL;
  *(_QWORD *)(v4 + 8) = "1 32 16 22 unlock_notify_ptr:1805";
  *(_QWORD *)(v4 + 16) = PlayerSceneComp::unlockArea;
  v6 = v4 >> 3;
  *(_DWORD *)(v6 + 2147450880) = -235802127;
  *(_DWORD *)(v6 + 2147450884) = -202178560;
  common::tools::perf::make_shared<proto::SceneAreaUnlockNotify>();
  v7 = std::__shared_ptr_access<proto::SceneAreaUnlockNotify,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<proto::SceneAreaUnlockNotify,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 32));
  proto::SceneAreaUnlockNotify::set_scene_id(v7, scene_id);
  __for_range = area_id_vec;
  __for_begin._M_current = std::vector<unsigned int>::begin(area_id_vec)._M_current;
  __for_end._M_current = std::vector<unsigned int>::end(area_id_vec)._M_current;
  while ( __gnu_cxx::operator!=<unsigned int const*,std::vector<unsigned int>>(&__for_begin, &__for_end) )
  {
    v8 = (unsigned int *)__gnu_cxx::__normal_iterator<unsigned int const*,std::vector<unsigned int>>::operator*(&__for_begin);
    v9 = (__int32 *)v8;
    if ( *(_BYTE *)(((unsigned __int64)v8 >> 3) + 0x7FFF8000) != 0
      && (char)(((unsigned __int8)v8 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)v8 >> 3) + 0x7FFF8000) )
    {
      __asan_report_load4(v8);
    }
    area_id = *v9;
    if ( !(unsigned int)PlayerSceneComp::unlockArea(this, scene_id, *v9, 0) )
    {
      v10 = std::__shared_ptr_access<proto::SceneAreaUnlockNotify,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<proto::SceneAreaUnlockNotify,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 32));
      proto::SceneAreaUnlockNotify::add_area_list(v10, area_id);
    }
    __gnu_cxx::__normal_iterator<unsigned int const*,std::vector<unsigned int>>::operator++(&__for_begin);
  }
  if ( is_notify )
  {
    if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
      __asan_report_load8();
    player = this->player_;
    std::dynamic_pointer_cast<google::protobuf::Message const,proto::SceneAreaUnlockNotify>(&__r);
    Player::sendMessage(player, (common::minet::ConstMessagePtr *)&__r, 0LL);
    std::shared_ptr<google::protobuf::Message const>::~shared_ptr((std::shared_ptr<const google::protobuf::Message> *const)&__r);
  }
  std::shared_ptr<proto::SceneAreaUnlockNotify>::~shared_ptr((std::shared_ptr<proto::SceneAreaUnlockNotify> *const)(v4 + 32));
  result = 0;
  if ( v20 == (char *)v4 )
  {
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0LL;
  }
  else
  {
    *(_QWORD *)v4 = 1172321806LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 1820: range 0000000013E4D4EE-0000000013E4D8B1
int32_t __cdecl PlayerSceneComp::unlockAllAreaByGm(PlayerSceneComp *const this, uint32_t scene_id, bool is_notify)
{
  unsigned __int64 v3; // rbx
  __int64 v4; // rax
  unsigned __int64 v5; // r13
  std::__shared_ptr_access<proto::SceneAreaUnlockNotify,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v6; // rax
  std::__shared_ptr_access<proto::SceneAreaUnlockNotify,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v7; // rax
  Player *player; // r14
  int32_t result; // eax
  unsigned __int32 area_id; // [rsp+1Ch] [rbp-B4h]
  std::unordered_map<unsigned int,data::WorldAreaConfig>::const_iterator __for_begin; // [rsp+20h] [rbp-B0h] BYREF
  std::unordered_map<unsigned int,data::WorldAreaConfig>::const_iterator __for_end; // [rsp+28h] [rbp-A8h] BYREF
  const std::unordered_map<unsigned int,data::WorldAreaConfig> *__for_range; // [rsp+30h] [rbp-A0h]
  const std::pair<unsigned int const,data::WorldAreaConfig> *v15; // [rsp+38h] [rbp-98h]
  std::tuple_element<0,const std::pair<unsigned int const,data::WorldAreaConfig> >::type *_; // [rsp+40h] [rbp-90h]
  std::tuple_element<1,const std::pair<unsigned int const,data::WorldAreaConfig> >::type *world_area_config; // [rsp+48h] [rbp-88h]
  std::shared_ptr<const google::protobuf::Message> v18; // [rsp+50h] [rbp-80h] BYREF
  char v19[112]; // [rsp+60h] [rbp-70h] BYREF

  v3 = (unsigned __int64)v19;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_0(64LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "1 32 16 22 unlock_notify_ptr:1821";
  *(_QWORD *)(v3 + 16) = PlayerSceneComp::unlockAllAreaByGm;
  v5 = v3 >> 3;
  *(_DWORD *)(v5 + 2147450880) = -235802127;
  *(_DWORD *)(v5 + 2147450884) = -202178560;
  common::tools::perf::make_shared<proto::SceneAreaUnlockNotify>();
  v6 = std::__shared_ptr_access<proto::SceneAreaUnlockNotify,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<proto::SceneAreaUnlockNotify,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 32));
  proto::SceneAreaUnlockNotify::set_scene_id(v6, scene_id);
  ServiceBox::findService<GameserverService>();
  GameserverService::getConfig((GameserverService *const)&v18);
  __for_range = &std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false> *const)&v18)->design_config.txt_config_mgr.world_area_config_mgr.world_area_config_map;
  std::shared_ptr<Config>::~shared_ptr((std::shared_ptr<Config> *const)&v18);
  __for_begin._M_cur = std::unordered_map<unsigned int,data::WorldAreaConfig>::begin(__for_range)._M_cur;
  __for_end._M_cur = std::unordered_map<unsigned int,data::WorldAreaConfig>::end(__for_range)._M_cur;
  while ( std::__detail::operator!=<std::pair<unsigned int const,data::WorldAreaConfig>,false>(&__for_begin, &__for_end) )
  {
    v15 = std::__detail::_Node_const_iterator<std::pair<unsigned int const,data::WorldAreaConfig>,false,false>::operator*(&__for_begin);
    _ = std::get<0ul,unsigned int const,data::WorldAreaConfig>(v15);
    world_area_config = (std::tuple_element<1,const std::pair<unsigned int const,data::WorldAreaConfig> >::type *)std::get<1ul,unsigned int const,data::WorldAreaConfig>(v15);
    if ( *(_BYTE *)(((unsigned __int64)&world_area_config->area_type >> 3) + 0x7FFF8000) != 0
      && *(_BYTE *)(((unsigned __int64)&world_area_config->area_type >> 3) + 0x7FFF8000) <= 3 )
    {
      __asan_report_load4(&world_area_config->area_type);
    }
    if ( world_area_config->area_type == LEVEL_1 )
    {
      if ( *(_BYTE *)(((unsigned __int64)&world_area_config->scene_id >> 3) + 0x7FFF8000) != 0
        && (char)((((_BYTE)world_area_config + 12) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&world_area_config->scene_id >> 3)
                                                                         + 0x7FFF8000) )
      {
        __asan_report_load4(&world_area_config->scene_id);
      }
      if ( scene_id == world_area_config->scene_id )
      {
        if ( *(_BYTE *)(((unsigned __int64)&world_area_config->area_id_1 >> 3) + 0x7FFF8000) != 0
          && (char)((((_BYTE)world_area_config + 20) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&world_area_config->area_id_1 >> 3)
                                                                           + 0x7FFF8000) )
        {
          __asan_report_load4(&world_area_config->area_id_1);
        }
        area_id = world_area_config->area_id_1;
        PlayerSceneComp::unlockArea(this, scene_id, area_id, 0);
        v7 = std::__shared_ptr_access<proto::SceneAreaUnlockNotify,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<proto::SceneAreaUnlockNotify,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 32));
        proto::SceneAreaUnlockNotify::add_area_list(v7, area_id);
      }
    }
    std::__detail::_Node_const_iterator<std::pair<unsigned int const,data::WorldAreaConfig>,false,false>::operator++(&__for_begin);
  }
  if ( is_notify )
  {
    if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
      __asan_report_load8();
    player = this->player_;
    std::dynamic_pointer_cast<google::protobuf::Message const,proto::SceneAreaUnlockNotify>((const std::shared_ptr<proto::SceneAreaUnlockNotify> *)&v18);
    Player::sendMessage(player, &v18, 0LL);
    std::shared_ptr<google::protobuf::Message const>::~shared_ptr(&v18);
  }
  std::shared_ptr<proto::SceneAreaUnlockNotify>::~shared_ptr((std::shared_ptr<proto::SceneAreaUnlockNotify> *const)(v3 + 32));
  result = 0;
  if ( v19 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 1844: range 0000000013E4D952-0000000013E4DD24
void __fastcall PlayerSceneComp::getAllUnlockedArea(
        PlayerSceneComp *const this,
        uint32_t scene_id,
        proto::GetSceneAreaRsp *rsp_0)
{
  unsigned __int64 v3; // rbx
  __int64 v4; // rax
  _DWORD *v5; // r13
  common::milog::MiLogStream *v6; // rax
  common::milog::MiLogStream *v7; // rax
  common::milog::MiLogStream *v8; // r14
  Scene *v9; // rax
  unsigned int *v10; // rax
  uint32_t *v11; // rdx
  PlayerCityComp *CityComp; // r14
  unsigned int val; // [rsp+20h] [rbp-D0h] BYREF
  uint32_t area_id; // [rsp+24h] [rbp-CCh]
  std::unordered_set<unsigned int>::iterator __for_begin; // [rsp+28h] [rbp-C8h] BYREF
  std::unordered_set<unsigned int>::iterator __for_end; // [rsp+30h] [rbp-C0h] BYREF
  std::unordered_set<unsigned int> *__for_range; // [rsp+38h] [rbp-B8h]
  common::milog::MiLogStream v19; // [rsp+40h] [rbp-B0h] BYREF
  char v20[144]; // [rsp+60h] [rbp-90h] BYREF

  v3 = (unsigned __int64)v20;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_1(96LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "2 48 4 13 scene_id:1843 64 16 14 scene_ptr:1846";
  *(_QWORD *)(v3 + 16) = PlayerSceneComp::getAllUnlockedArea;
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = -234556943;
  v5[536862722] = -202178560;
  *(_DWORD *)(v3 + 48) = scene_id;
  proto::GetSceneAreaRsp::set_scene_id(rsp_0, *(_DWORD *)(v3 + 48));
  PlayerSceneComp::findScene((const PlayerSceneComp *const)(v3 + 64), (uint32_t)this);
  if ( std::operator==<Scene>((const std::shared_ptr<Scene> *)(v3 + 64), 0LL) )
  {
    common::milog::MiLogStream::create(
      &v19,
      &common::milog::MiLogDefault::default_log_obj_,
      1u,
      "./src/scene/player_scene_comp.cpp",
      "getAllUnlockedArea",
      1849);
    v6 = common::milog::MiLogStream::operator<<<char [28],(char *[28])0>(
           &v19,
           (const char (*)[28])"findScene failed, scene_id:");
    v7 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v6, (const unsigned int *)(v3 + 48));
    v8 = common::milog::MiLogStream::operator<<<char [6],(char *[6])0>(v7, (const char (*)[6])" uid:");
    if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
      __asan_report_load8();
    val = Player::getUid(this->player_);
    common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v8, &val);
    common::milog::MiLogStream::~MiLogStream(&v19);
  }
  else
  {
    v9 = std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 64));
    __for_range = Scene::getAllUnlockArea(v9);
    __for_begin._M_cur = std::unordered_set<unsigned int>::begin(__for_range)._M_cur;
    __for_end._M_cur = std::unordered_set<unsigned int>::end(__for_range)._M_cur;
    while ( std::__detail::operator!=<unsigned int,false>(&__for_begin, &__for_end) )
    {
      v10 = (unsigned int *)std::__detail::_Node_iterator<unsigned int,true,false>::operator*(&__for_begin);
      v11 = v10;
      if ( *(_BYTE *)(((unsigned __int64)v10 >> 3) + 0x7FFF8000) != 0
        && (char)(((unsigned __int8)v10 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)v10 >> 3) + 0x7FFF8000) )
      {
        __asan_report_load4(v10);
      }
      area_id = *v11;
      proto::GetSceneAreaRsp::add_area_id_list(rsp_0, area_id);
      std::__detail::_Node_iterator<unsigned int,true,false>::operator++(&__for_begin);
    }
    if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
      __asan_report_load8();
    CityComp = Player::getCityComp(this->player_);
    std::function<ForeachPolicy ()(City &)>::function<PlayerSceneComp::getAllUnlockedArea(unsigned int,proto::GetSceneAreaRsp &)::{lambda(City &)#1},void,void>(
      (std::function<ForeachPolicy(City&)> *const)&v19,
      (PlayerSceneComp::getAllUnlockedArea::<lambda(City&)>)rsp_0);
    PlayerCityComp::foreachCity(CityComp, (std::function<ForeachPolicy(City&)> *)&v19);
    std::function<ForeachPolicy ()(City &)>::~function((std::function<ForeachPolicy(City&)> *const)&v19);
  }
  std::shared_ptr<Scene>::~shared_ptr((std::shared_ptr<Scene> *const)(v3 + 64));
  if ( v20 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8008) = 0;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8008) = -168430091;
  }
};

// Line 1857: range 0000000013E4D8B2-0000000013E4D950
ForeachPolicy __cdecl PlayerSceneComp::getAllUnlockedArea(unsigned int,proto::GetSceneAreaRsp &)::{lambda(City &)#1}::operator()(
        const PlayerSceneComp::getAllUnlockedArea::<lambda(City&)> *const __closure,
        City *city)
{
  uint32_t CityId; // edx
  uint32_t Level; // edx
  uint32_t CrystalNum; // edx
  proto::CityInfo *city_info; // [rsp+18h] [rbp-8h]

  if ( *(_BYTE *)(((unsigned __int64)__closure >> 3) + 0x7FFF8000) )
    __asan_report_load8();
  city_info = proto::GetSceneAreaRsp::add_city_info_list(__closure->__rsp);
  CityId = City::getCityId(city);
  proto::CityInfo::set_city_id(city_info, CityId);
  Level = City::getLevel(city);
  proto::CityInfo::set_level(city_info, Level);
  CrystalNum = City::getCrystalNum(city);
  proto::CityInfo::set_crystal_num(city_info, CrystalNum);
  return 0;
};

// Line 1868: range 0000000013E4DD26-0000000013E4E11D
__int64 __fastcall PlayerSceneComp::lockAreaByGm(PlayerSceneComp *const this, uint32_t scene_id, uint32_t area_id)
{
  unsigned __int64 v3; // r12
  __int64 v4; // rax
  _DWORD *v5; // r13
  common::milog::MiLogStream *v6; // rax
  common::milog::MiLogStream *v7; // rax
  common::milog::MiLogStream *v8; // r14
  unsigned int v9; // r14d
  uint32_t v10; // eax
  common::milog::MiLogStream *v11; // r14
  common::milog::MiLogStream *v12; // rax
  common::milog::MiLogStream *v13; // rax
  common::milog::MiLogStream *v14; // rax
  common::milog::MiLogStream *v15; // rax
  common::milog::MiLogStream *v16; // rax
  Scene *v17; // rax
  __int64 result; // rax
  unsigned int val; // [rsp+1Ch] [rbp-D4h] BYREF
  common::milog::MiLogStream v21; // [rsp+20h] [rbp-D0h] BYREF
  char v22[176]; // [rsp+40h] [rbp-B0h] BYREF

  v3 = (unsigned __int64)v22;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_1(128LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "4 32 4 13 scene_id:1867 48 4 12 area_id:1867 64 16 14 scene_ptr:1869 96 16 13 area_ptr:1875";
  *(_QWORD *)(v3 + 16) = PlayerSceneComp::lockAreaByGm;
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = -234556924;
  v5[536862722] = -219021312;
  v5[536862723] = -202178560;
  *(_DWORD *)(v3 + 32) = scene_id;
  *(_DWORD *)(v3 + 48) = area_id;
  PlayerSceneComp::findScene((const PlayerSceneComp *const)(v3 + 64), (uint32_t)this);
  if ( std::operator==<Scene>(0LL, (const std::shared_ptr<Scene> *)(v3 + 64)) )
  {
    common::milog::MiLogStream::create(
      &v21,
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/scene/player_scene_comp.cpp",
      "lockAreaByGm",
      1872);
    v6 = common::milog::MiLogStream::operator<<<char [28],(char *[28])0>(
           &v21,
           (const char (*)[28])"findScene failed, scene_id:");
    v7 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v6, (const unsigned int *)(v3 + 32));
    v8 = common::milog::MiLogStream::operator<<<char [7],(char *[7])0>(v7, (const char (*)[7])", uid:");
    if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
      __asan_report_load8();
    val = Player::getUid(this->player_);
    common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v8, &val);
    common::milog::MiLogStream::~MiLogStream(&v21);
    v9 = -1;
  }
  else
  {
    v10 = (unsigned int)std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 64));
    Scene::findArea((Scene *const)(v3 + 96), v10);
    if ( std::operator==<Area>(0LL, (const std::shared_ptr<Area> *)(v3 + 96)) )
    {
      common::milog::MiLogStream::create(
        &v21,
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/scene/player_scene_comp.cpp",
        "lockAreaByGm",
        1878);
      v11 = common::milog::MiLogStream::operator<<<char [15],(char *[15])0>(&v21, (const char (*)[15])"findArea uid: ");
      if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
        __asan_report_load8();
      val = Player::getUid(this->player_);
      v12 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v11, &val);
      v13 = common::milog::MiLogStream::operator<<<char [12],(char *[12])0>(v12, (const char (*)[12])" scene_id: ");
      v14 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v13, (const unsigned int *)(v3 + 32));
      v15 = common::milog::MiLogStream::operator<<<char [11],(char *[11])0>(v14, (const char (*)[11])" area_id: ");
      v16 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v15, (const unsigned int *)(v3 + 48));
      common::milog::MiLogStream::operator<<<char [8],(char *[8])0>(v16, (const char (*)[8])" failed");
      common::milog::MiLogStream::~MiLogStream(&v21);
      v9 = -1;
    }
    else
    {
      v17 = std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 64));
      Scene::lockAreaByGm(v17, *(_DWORD *)(v3 + 48));
      v9 = 0;
    }
    std::shared_ptr<Area>::~shared_ptr((std::shared_ptr<Area> *const)(v3 + 96));
  }
  std::shared_ptr<Scene>::~shared_ptr((std::shared_ptr<Scene> *const)(v3 + 64));
  result = v9;
  if ( v22 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 1889: range 0000000013E4E11E-0000000013E4E70E
__int64 __fastcall PlayerSceneComp::lockForce(
        PlayerSceneComp *const this,
        uint32_t scene_id,
        uint32_t force_id,
        bool is_notify)
{
  unsigned __int64 v4; // r12
  __int64 v5; // rax
  _DWORD *v6; // r13
  unsigned int v7; // eax
  common::milog::MiLogStream *v8; // rax
  common::milog::MiLogStream *v9; // rax
  common::milog::MiLogStream *v10; // rax
  unsigned int v11; // r14d
  std::__shared_ptr_access<data::ConfigAirflowField,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v12; // rdx
  bool *p_unlocked; // rax
  common::milog::MiLogStream *v14; // rax
  common::milog::MiLogStream *v15; // rax
  common::milog::MiLogStream *v16; // rax
  common::milog::MiLogStream *v17; // rax
  common::milog::MiLogStream *v18; // rax
  common::milog::MiLogStream *v19; // r14
  Scene *v20; // rax
  common::milog::MiLogStream *v21; // r14
  common::milog::MiLogStream *v22; // rax
  common::milog::MiLogStream *v23; // rax
  common::milog::MiLogStream *v24; // rax
  common::milog::MiLogStream *v25; // rax
  __int64 result; // rax
  unsigned int val; // [rsp+28h] [rbp-D8h] BYREF
  int32_t ret; // [rsp+2Ch] [rbp-D4h]
  common::milog::MiLogStream v31; // [rsp+30h] [rbp-D0h] BYREF
  char v32[176]; // [rsp+50h] [rbp-B0h] BYREF

  v4 = (unsigned __int64)v32;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v5 = __asan_stack_malloc_1(128LL);
    if ( v5 )
      v4 = v5;
  }
  *(_QWORD *)v4 = 1102416563LL;
  *(_QWORD *)(v4 + 8) = "4 32 4 13 scene_id:1888 48 4 13 force_id:1888 64 16 29 config_airflow_field_ptr:1890 96 16 14 scene_ptr:1901";
  *(_QWORD *)(v4 + 16) = PlayerSceneComp::lockForce;
  v6 = (_DWORD *)(v4 >> 3);
  v6[536862720] = -235802127;
  v6[536862721] = -234556924;
  v6[536862722] = -219021312;
  v6[536862723] = -202178560;
  *(_DWORD *)(v4 + 32) = scene_id;
  *(_DWORD *)(v4 + 48) = force_id;
  ServiceBox::findService<GameserverService>();
  GameserverService::getConfig((GameserverService *const)(v4 + 96));
  v7 = (unsigned int)std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 96));
  JsonConfigMgr::findSceneForce<data::ConfigAirflowField>(
    (const JsonConfigMgr *const)(v4 + 64),
    v7 + 93080,
    *(_DWORD *)(v4 + 32));
  std::shared_ptr<Config>::~shared_ptr((std::shared_ptr<Config> *const)(v4 + 96));
  if ( std::operator==<data::ConfigAirflowField>((const std::shared_ptr<data::ConfigAirflowField> *)(v4 + 64), 0LL) )
  {
    common::milog::MiLogStream::create(
      &v31,
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/scene/player_scene_comp.cpp",
      "lockForce",
      1893);
    v8 = common::milog::MiLogStream::operator<<<char [32],(char *[32])0>(
           &v31,
           (const char (*)[32])"findSceneForce fails, scene_id:");
    v9 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v8, (const unsigned int *)(v4 + 32));
    v10 = common::milog::MiLogStream::operator<<<char [12],(char *[12])0>(v9, (const char (*)[12])", force_id:");
    common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v10, (const unsigned int *)(v4 + 48));
    common::milog::MiLogStream::~MiLogStream(&v31);
    v11 = -1;
  }
  else
  {
    v12 = std::__shared_ptr_access<data::ConfigAirflowField,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<data::ConfigAirflowField,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 64));
    p_unlocked = &v12->unlocked;
    if ( *(_BYTE *)(((unsigned __int64)p_unlocked >> 3) + 0x7FFF8000) != 0
      && ((unsigned __int8)p_unlocked & 7) >= *(_BYTE *)(((unsigned __int64)p_unlocked >> 3) + 0x7FFF8000) )
    {
      __asan_report_load1(p_unlocked);
    }
    if ( v12->unlocked )
    {
      common::milog::MiLogStream::create(
        &v31,
        &common::milog::MiLogDefault::default_log_obj_,
        1u,
        "./src/scene/player_scene_comp.cpp",
        "lockForce",
        1898);
      v14 = common::milog::MiLogStream::operator<<<char [29],(char *[29])0>(
              &v31,
              (const char (*)[29])"field is unlocked, force_id:");
      v15 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v14, (const unsigned int *)(v4 + 48));
      v16 = common::milog::MiLogStream::operator<<<char [12],(char *[12])0>(v15, (const char (*)[12])", scene_id:");
      common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v16, (const unsigned int *)(v4 + 32));
      common::milog::MiLogStream::~MiLogStream(&v31);
      v11 = 1;
    }
    else
    {
      PlayerSceneComp::findScene((const PlayerSceneComp *const)(v4 + 96), (uint32_t)this);
      if ( std::operator==<Scene>((const std::shared_ptr<Scene> *)(v4 + 96), 0LL) )
      {
        common::milog::MiLogStream::create(
          &v31,
          &common::milog::MiLogDefault::default_log_obj_,
          1u,
          "./src/scene/player_scene_comp.cpp",
          "lockForce",
          1904);
        v17 = common::milog::MiLogStream::operator<<<char [28],(char *[28])0>(
                &v31,
                (const char (*)[28])"findScene failed, scene_id:");
        v18 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                v17,
                (const unsigned int *)(v4 + 32));
        v19 = common::milog::MiLogStream::operator<<<char [7],(char *[7])0>(v18, (const char (*)[7])", uid:");
        if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
          __asan_report_load8();
        val = Player::getUid(this->player_);
        common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v19, &val);
        common::milog::MiLogStream::~MiLogStream(&v31);
        v11 = -1;
      }
      else
      {
        v20 = std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 96));
        ret = Scene::lockForce(v20, *(_DWORD *)(v4 + 48), is_notify);
        if ( ret )
        {
          common::milog::MiLogStream::create(
            &v31,
            &common::milog::MiLogDefault::default_log_obj_,
            1u,
            "./src/scene/player_scene_comp.cpp",
            "lockForce",
            1910);
          v21 = common::milog::MiLogStream::operator<<<char [24],(char *[24])0>(
                  &v31,
                  (const char (*)[24])"lock force failed, uid:");
          if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
            __asan_report_load8();
          val = Player::getUid(this->player_);
          v22 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v21, &val);
          v23 = common::milog::MiLogStream::operator<<<char [10],(char *[10])0>(v22, (const char (*)[10])" foce_id:");
          v24 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                  v23,
                  (const unsigned int *)(v4 + 48));
          v25 = common::milog::MiLogStream::operator<<<char [12],(char *[12])0>(v24, (const char (*)[12])", scene_id:");
          common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v25, (const unsigned int *)(v4 + 32));
          common::milog::MiLogStream::~MiLogStream(&v31);
          v11 = ret;
        }
        else
        {
          v11 = 0;
        }
      }
      std::shared_ptr<Scene>::~shared_ptr((std::shared_ptr<Scene> *const)(v4 + 96));
    }
  }
  std::shared_ptr<data::ConfigAirflowField>::~shared_ptr((std::shared_ptr<data::ConfigAirflowField> *const)(v4 + 64));
  result = v11;
  if ( v32 == (char *)v4 )
  {
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v4 = 1172321806LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 1917: range 0000000013E4E710-0000000013E4EA31
int32_t __cdecl PlayerSceneComp::lockForce(
        PlayerSceneComp *const this,
        uint32_t scene_id,
        const std::vector<unsigned int> *force_id_vec,
        bool is_notify)
{
  unsigned __int64 v4; // rbx
  __int64 v5; // rax
  unsigned __int64 v6; // r12
  unsigned int *v7; // rax
  uint32_t *v8; // rdx
  std::__shared_ptr_access<proto::SceneForceLockNotify,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v9; // rax
  Player *player; // r14
  int32_t result; // eax
  google::protobuf::uint32 force_id; // [rsp+20h] [rbp-C0h]
  int32_t ret; // [rsp+24h] [rbp-BCh]
  std::vector<unsigned int>::const_iterator __for_begin; // [rsp+28h] [rbp-B8h] BYREF
  std::vector<unsigned int>::const_iterator __for_end; // [rsp+30h] [rbp-B0h] BYREF
  const std::vector<unsigned int> *__for_range; // [rsp+38h] [rbp-A8h]
  std::shared_ptr<proto::SceneForceLockNotify> __r; // [rsp+40h] [rbp-A0h] BYREF
  common::milog::MiLogStream v20; // [rsp+50h] [rbp-90h] BYREF
  char v21[112]; // [rsp+70h] [rbp-70h] BYREF

  v4 = (unsigned __int64)v21;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v5 = __asan_stack_malloc_0(64LL);
    if ( v5 )
      v4 = v5;
  }
  *(_QWORD *)v4 = 1102416563LL;
  *(_QWORD *)(v4 + 8) = "1 32 16 20 lock_notify_ptr:1918";
  *(_QWORD *)(v4 + 16) = PlayerSceneComp::lockForce;
  v6 = v4 >> 3;
  *(_DWORD *)(v6 + 2147450880) = -235802127;
  *(_DWORD *)(v6 + 2147450884) = -202178560;
  common::tools::perf::make_shared<proto::SceneForceLockNotify>();
  __for_range = force_id_vec;
  __for_begin._M_current = std::vector<unsigned int>::begin(force_id_vec)._M_current;
  __for_end._M_current = std::vector<unsigned int>::end(force_id_vec)._M_current;
  while ( __gnu_cxx::operator!=<unsigned int const*,std::vector<unsigned int>>(&__for_begin, &__for_end) )
  {
    v7 = (unsigned int *)__gnu_cxx::__normal_iterator<unsigned int const*,std::vector<unsigned int>>::operator*(&__for_begin);
    v8 = v7;
    if ( *(_BYTE *)(((unsigned __int64)v7 >> 3) + 0x7FFF8000) != 0
      && (char)(((unsigned __int8)v7 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)v7 >> 3) + 0x7FFF8000) )
    {
      __asan_report_load4(v7);
    }
    force_id = *v8;
    ret = PlayerSceneComp::lockForce(this, scene_id, *v8, 0);
    if ( ret )
    {
      if ( ret < 0 )
      {
        common::milog::MiLogStream::create(
          &v20,
          &common::milog::MiLogDefault::default_log_obj_,
          3u,
          "./src/scene/player_scene_comp.cpp",
          "lockForce",
          1925);
        common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(&v20, (const char (*)[16])"lockForce fails");
        common::milog::MiLogStream::~MiLogStream(&v20);
      }
    }
    else
    {
      v9 = std::__shared_ptr_access<proto::SceneForceLockNotify,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<proto::SceneForceLockNotify,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 32));
      proto::SceneForceLockNotify::add_force_id_list(v9, force_id);
    }
    __gnu_cxx::__normal_iterator<unsigned int const*,std::vector<unsigned int>>::operator++(&__for_begin);
  }
  if ( is_notify )
  {
    if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
      __asan_report_load8();
    player = this->player_;
    std::dynamic_pointer_cast<google::protobuf::Message const,proto::SceneForceLockNotify>(&__r);
    Player::sendMessage(player, (common::minet::ConstMessagePtr *)&__r, 0LL);
    std::shared_ptr<google::protobuf::Message const>::~shared_ptr((std::shared_ptr<const google::protobuf::Message> *const)&__r);
  }
  std::shared_ptr<proto::SceneForceLockNotify>::~shared_ptr((std::shared_ptr<proto::SceneForceLockNotify> *const)(v4 + 32));
  result = 0;
  if ( v21 == (char *)v4 )
  {
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0LL;
  }
  else
  {
    *(_QWORD *)v4 = 1172321806LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 1934: range 0000000013E4EA32-0000000013E4F0A0
__int64 __fastcall PlayerSceneComp::lockAllForce(PlayerSceneComp *const this, uint32_t scene_id, bool is_notify)
{
  unsigned __int64 v3; // r13
  __int64 v4; // rax
  _DWORD *v5; // r12
  std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v6; // rax
  common::milog::MiLogStream *v7; // rax
  unsigned int v8; // r14d
  common::milog::MiLogStream *v9; // rax
  common::milog::MiLogStream *v10; // rax
  common::milog::MiLogStream *v11; // r14
  std::__shared_ptr_access<data::ConfigAirflowField,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v12; // rdx
  bool *p_unlocked; // rax
  Scene *v14; // rax
  std::__shared_ptr_access<proto::SceneForceLockNotify,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v15; // rax
  Player *player; // r14
  __int64 result; // rax
  unsigned int val; // [rsp+10h] [rbp-140h] BYREF
  uint32_t force_id; // [rsp+14h] [rbp-13Ch]
  std::unordered_map<unsigned int,std::shared_ptr<data::ConfigForceField>>::const_iterator __for_begin; // [rsp+18h] [rbp-138h] BYREF
  std::unordered_map<unsigned int,std::shared_ptr<data::ConfigForceField>>::const_iterator __for_end; // [rsp+20h] [rbp-130h] BYREF
  const SceneJsonConfig *scene_json_config_ptr; // [rsp+28h] [rbp-128h]
  const std::unordered_map<unsigned int,std::shared_ptr<data::ConfigForceField>> *__for_range; // [rsp+30h] [rbp-120h]
  const std::pair<unsigned int const,std::shared_ptr<data::ConfigForceField> > *p; // [rsp+38h] [rbp-118h]
  common::milog::MiLogStream v26; // [rsp+40h] [rbp-110h] BYREF
  char v27[240]; // [rsp+60h] [rbp-F0h] BYREF

  v3 = (unsigned __int64)v27;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_2(192LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "5 48 4 13 scene_id:1933 64 16 14 scene_ptr:1941 96 16 20 lock_notify_ptr:1947 128 16 21 config_f"
                        "orce_ptr:1951 160 16 23 config_airflow_ptr:1952";
  *(_QWORD *)(v3 + 16) = PlayerSceneComp::lockAllForce;
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = -234556943;
  v5[536862722] = -219021312;
  v5[536862723] = -219021312;
  v5[536862724] = -219021312;
  v5[536862725] = -202178560;
  *(_DWORD *)(v3 + 48) = scene_id;
  ServiceBox::findService<GameserverService>();
  GameserverService::getConfig((GameserverService *const)(v3 + 160));
  v6 = std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 160));
  scene_json_config_ptr = JsonConfigMgr::findSceneJsonConfig(&v6->design_config.json_config_mgr, *(_DWORD *)(v3 + 48));
  std::shared_ptr<Config>::~shared_ptr((std::shared_ptr<Config> *const)(v3 + 160));
  if ( scene_json_config_ptr )
  {
    PlayerSceneComp::findScene((const PlayerSceneComp *const)(v3 + 64), (uint32_t)this);
    if ( std::operator==<Scene>((const std::shared_ptr<Scene> *)(v3 + 64), 0LL) )
    {
      common::milog::MiLogStream::create(
        &v26,
        &common::milog::MiLogDefault::default_log_obj_,
        1u,
        "./src/scene/player_scene_comp.cpp",
        "lockAllForce",
        1944);
      v9 = common::milog::MiLogStream::operator<<<char [28],(char *[28])0>(
             &v26,
             (const char (*)[28])"findScene failed, scene_id:");
      v10 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v9, (const unsigned int *)(v3 + 48));
      v11 = common::milog::MiLogStream::operator<<<char [7],(char *[7])0>(v10, (const char (*)[7])", uid:");
      if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
        __asan_report_load8();
      val = Player::getUid(this->player_);
      common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v11, &val);
      common::milog::MiLogStream::~MiLogStream(&v26);
      v8 = -1;
    }
    else
    {
      common::tools::perf::make_shared<proto::SceneForceLockNotify>();
      __for_range = &scene_json_config_ptr->force_map;
      __for_begin._M_cur = std::unordered_map<unsigned int,std::shared_ptr<data::ConfigForceField>>::begin(&scene_json_config_ptr->force_map)._M_cur;
      __for_end._M_cur = std::unordered_map<unsigned int,std::shared_ptr<data::ConfigForceField>>::end(&scene_json_config_ptr->force_map)._M_cur;
      while ( std::__detail::operator!=<std::pair<unsigned int const,std::shared_ptr<data::ConfigForceField>>,false>(
                &__for_begin,
                &__for_end) )
      {
        p = std::__detail::_Node_const_iterator<std::pair<unsigned int const,std::shared_ptr<data::ConfigForceField>>,false,false>::operator*(&__for_begin);
        if ( *(_BYTE *)(((unsigned __int64)p >> 3) + 0x7FFF8000) != 0
          && *(_BYTE *)(((unsigned __int64)p >> 3) + 0x7FFF8000) <= 3 )
        {
          __asan_report_load4(p);
        }
        force_id = p->first;
        std::shared_ptr<data::ConfigForceField>::shared_ptr(
          (std::shared_ptr<data::ConfigForceField> *const)(v3 + 128),
          &p->second);
        std::dynamic_pointer_cast<data::ConfigAirflowField,data::ConfigForceField>((const std::shared_ptr<data::ConfigForceField> *)(v3 + 160));
        if ( !std::operator==<data::ConfigAirflowField>(
                (const std::shared_ptr<data::ConfigAirflowField> *)(v3 + 160),
                0LL) )
        {
          v12 = std::__shared_ptr_access<data::ConfigAirflowField,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<data::ConfigAirflowField,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 160));
          p_unlocked = &v12->unlocked;
          if ( *(_BYTE *)(((unsigned __int64)p_unlocked >> 3) + 0x7FFF8000) != 0
            && ((unsigned __int8)p_unlocked & 7) >= *(_BYTE *)(((unsigned __int64)p_unlocked >> 3) + 0x7FFF8000) )
          {
            __asan_report_load1(p_unlocked);
          }
          if ( !v12->unlocked )
          {
            v14 = std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 64));
            if ( !Scene::lockForce(v14, force_id, 0) )
            {
              v15 = std::__shared_ptr_access<proto::SceneForceLockNotify,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<proto::SceneForceLockNotify,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 96));
              proto::SceneForceLockNotify::add_force_id_list(v15, force_id);
            }
          }
        }
        std::shared_ptr<data::ConfigAirflowField>::~shared_ptr((std::shared_ptr<data::ConfigAirflowField> *const)(v3 + 160));
        std::shared_ptr<data::ConfigForceField>::~shared_ptr((std::shared_ptr<data::ConfigForceField> *const)(v3 + 128));
        std::__detail::_Node_const_iterator<std::pair<unsigned int const,std::shared_ptr<data::ConfigForceField>>,false,false>::operator++(&__for_begin);
      }
      if ( is_notify )
      {
        if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
          __asan_report_load8();
        player = this->player_;
        std::dynamic_pointer_cast<google::protobuf::Message const,proto::SceneForceLockNotify>((const std::shared_ptr<proto::SceneForceLockNotify> *)(v3 + 160));
        Player::sendMessage(player, (common::minet::ConstMessagePtr *)(v3 + 160), 0LL);
        std::shared_ptr<google::protobuf::Message const>::~shared_ptr((std::shared_ptr<const google::protobuf::Message> *const)(v3 + 160));
      }
      v8 = 0;
      std::shared_ptr<proto::SceneForceLockNotify>::~shared_ptr((std::shared_ptr<proto::SceneForceLockNotify> *const)(v3 + 96));
    }
    std::shared_ptr<Scene>::~shared_ptr((std::shared_ptr<Scene> *const)(v3 + 64));
  }
  else
  {
    common::milog::MiLogStream::create(
      &v26,
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/scene/player_scene_comp.cpp",
      "lockAllForce",
      1938);
    v7 = common::milog::MiLogStream::operator<<<char [37],(char *[37])0>(
           &v26,
           (const char (*)[37])"findSceneJsonConfig fails, scene_id:");
    common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v7, (const unsigned int *)(v3 + 48));
    common::milog::MiLogStream::~MiLogStream(&v26);
    v8 = -1;
  }
  result = v8;
  if ( v27 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8010) = 0LL;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 1968: range 0000000013E4F0A2-0000000013E4F68B
__int64 __fastcall PlayerSceneComp::unlockForce(
        PlayerSceneComp *const this,
        uint32_t scene_id,
        uint32_t force_id,
        bool is_notify)
{
  unsigned __int64 v4; // r12
  __int64 v5; // rax
  _DWORD *v6; // r13
  unsigned int v7; // eax
  common::milog::MiLogStream *v8; // rax
  common::milog::MiLogStream *v9; // rax
  common::milog::MiLogStream *v10; // rax
  unsigned int v11; // r14d
  std::__shared_ptr_access<data::ConfigAirflowField,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v12; // rdx
  bool *p_unlocked; // rax
  common::milog::MiLogStream *v14; // rax
  common::milog::MiLogStream *v15; // rax
  common::milog::MiLogStream *v16; // rax
  common::milog::MiLogStream *v17; // rax
  common::milog::MiLogStream *v18; // rax
  common::milog::MiLogStream *v19; // r14
  Scene *v20; // rax
  common::milog::MiLogStream *v21; // rax
  common::milog::MiLogStream *v22; // rax
  common::milog::MiLogStream *v23; // rax
  common::milog::MiLogStream *v24; // rax
  common::milog::MiLogStream *v25; // r14
  __int64 result; // rax
  unsigned int val; // [rsp+2Ch] [rbp-D4h] BYREF
  common::milog::MiLogStream v30; // [rsp+30h] [rbp-D0h] BYREF
  char v31[176]; // [rsp+50h] [rbp-B0h] BYREF

  v4 = (unsigned __int64)v31;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v5 = __asan_stack_malloc_1(128LL);
    if ( v5 )
      v4 = v5;
  }
  *(_QWORD *)v4 = 1102416563LL;
  *(_QWORD *)(v4 + 8) = "4 32 4 13 scene_id:1967 48 4 13 force_id:1967 64 16 29 config_airflow_field_ptr:1969 96 16 14 scene_ptr:1980";
  *(_QWORD *)(v4 + 16) = PlayerSceneComp::unlockForce;
  v6 = (_DWORD *)(v4 >> 3);
  v6[536862720] = -235802127;
  v6[536862721] = -234556924;
  v6[536862722] = -219021312;
  v6[536862723] = -202178560;
  *(_DWORD *)(v4 + 32) = scene_id;
  *(_DWORD *)(v4 + 48) = force_id;
  ServiceBox::findService<GameserverService>();
  GameserverService::getConfig((GameserverService *const)(v4 + 96));
  v7 = (unsigned int)std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 96));
  JsonConfigMgr::findSceneForce<data::ConfigAirflowField>(
    (const JsonConfigMgr *const)(v4 + 64),
    v7 + 93080,
    *(_DWORD *)(v4 + 32));
  std::shared_ptr<Config>::~shared_ptr((std::shared_ptr<Config> *const)(v4 + 96));
  if ( std::operator==<data::ConfigAirflowField>((const std::shared_ptr<data::ConfigAirflowField> *)(v4 + 64), 0LL) )
  {
    common::milog::MiLogStream::create(
      &v30,
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/scene/player_scene_comp.cpp",
      "unlockForce",
      1972);
    v8 = common::milog::MiLogStream::operator<<<char [32],(char *[32])0>(
           &v30,
           (const char (*)[32])"findSceneForce fails, scene_id:");
    v9 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v8, (const unsigned int *)(v4 + 32));
    v10 = common::milog::MiLogStream::operator<<<char [12],(char *[12])0>(v9, (const char (*)[12])", force_id:");
    common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v10, (const unsigned int *)(v4 + 48));
    common::milog::MiLogStream::~MiLogStream(&v30);
    v11 = -1;
  }
  else
  {
    v12 = std::__shared_ptr_access<data::ConfigAirflowField,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<data::ConfigAirflowField,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 64));
    p_unlocked = &v12->unlocked;
    if ( *(_BYTE *)(((unsigned __int64)p_unlocked >> 3) + 0x7FFF8000) != 0
      && ((unsigned __int8)p_unlocked & 7) >= *(_BYTE *)(((unsigned __int64)p_unlocked >> 3) + 0x7FFF8000) )
    {
      __asan_report_load1(p_unlocked);
    }
    if ( v12->unlocked )
    {
      common::milog::MiLogStream::create(
        &v30,
        &common::milog::MiLogDefault::default_log_obj_,
        1u,
        "./src/scene/player_scene_comp.cpp",
        "unlockForce",
        1977);
      v14 = common::milog::MiLogStream::operator<<<char [29],(char *[29])0>(
              &v30,
              (const char (*)[29])"field is unlocked, force_id:");
      v15 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v14, (const unsigned int *)(v4 + 48));
      v16 = common::milog::MiLogStream::operator<<<char [12],(char *[12])0>(v15, (const char (*)[12])", scene_id:");
      common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v16, (const unsigned int *)(v4 + 32));
      common::milog::MiLogStream::~MiLogStream(&v30);
      v11 = 1;
    }
    else
    {
      PlayerSceneComp::findScene((const PlayerSceneComp *const)(v4 + 96), (uint32_t)this);
      if ( std::operator==<Scene>((const std::shared_ptr<Scene> *)(v4 + 96), 0LL) )
      {
        common::milog::MiLogStream::create(
          &v30,
          &common::milog::MiLogDefault::default_log_obj_,
          1u,
          "./src/scene/player_scene_comp.cpp",
          "unlockForce",
          1983);
        v17 = common::milog::MiLogStream::operator<<<char [28],(char *[28])0>(
                &v30,
                (const char (*)[28])"findScene failed, scene_id:");
        v18 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                v17,
                (const unsigned int *)(v4 + 32));
        v19 = common::milog::MiLogStream::operator<<<char [7],(char *[7])0>(v18, (const char (*)[7])", uid:");
        if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
          __asan_report_load8();
        val = Player::getUid(this->player_);
        common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v19, &val);
        common::milog::MiLogStream::~MiLogStream(&v30);
        v11 = -1;
      }
      else
      {
        v20 = std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 96));
        if ( Scene::unlockForce(v20, *(_DWORD *)(v4 + 48), is_notify) )
        {
          common::milog::MiLogStream::create(
            &v30,
            &common::milog::MiLogDefault::default_log_obj_,
            1u,
            "./src/scene/player_scene_comp.cpp",
            "unlockForce",
            1988);
          v21 = common::milog::MiLogStream::operator<<<char [37],(char *[37])0>(
                  &v30,
                  (const char (*)[37])"force is already unlocked, force_id:");
          v22 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                  v21,
                  (const unsigned int *)(v4 + 48));
          v23 = common::milog::MiLogStream::operator<<<char [12],(char *[12])0>(v22, (const char (*)[12])", scene_id:");
          v24 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                  v23,
                  (const unsigned int *)(v4 + 32));
          v25 = common::milog::MiLogStream::operator<<<char [7],(char *[7])0>(v24, (const char (*)[7])", uid:");
          if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
            __asan_report_load8();
          val = Player::getUid(this->player_);
          common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v25, &val);
          common::milog::MiLogStream::~MiLogStream(&v30);
          v11 = 1;
        }
        else
        {
          v11 = 0;
        }
      }
      std::shared_ptr<Scene>::~shared_ptr((std::shared_ptr<Scene> *const)(v4 + 96));
    }
  }
  std::shared_ptr<data::ConfigAirflowField>::~shared_ptr((std::shared_ptr<data::ConfigAirflowField> *const)(v4 + 64));
  result = v11;
  if ( v31 == (char *)v4 )
  {
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v4 = 1172321806LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 1995: range 0000000013E4F68C-0000000013E4F9CC
int32_t __cdecl PlayerSceneComp::unlockForce(
        PlayerSceneComp *const this,
        uint32_t scene_id,
        const std::vector<unsigned int> *force_id_vec,
        bool is_notify)
{
  unsigned __int64 v4; // rbx
  __int64 v5; // rax
  unsigned __int64 v6; // r13
  unsigned int *v7; // rax
  uint32_t *v8; // rdx
  std::__shared_ptr_access<proto::SceneForceUnlockNotify,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v9; // rax
  std::__shared_ptr_access<proto::SceneForceUnlockNotify,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v10; // rax
  Player *player; // r14
  int32_t result; // eax
  google::protobuf::uint32 force_id; // [rsp+20h] [rbp-C0h]
  int32_t ret; // [rsp+24h] [rbp-BCh]
  std::vector<unsigned int>::const_iterator __for_begin; // [rsp+28h] [rbp-B8h] BYREF
  std::vector<unsigned int>::const_iterator __for_end; // [rsp+30h] [rbp-B0h] BYREF
  const std::vector<unsigned int> *__for_range; // [rsp+38h] [rbp-A8h]
  std::shared_ptr<proto::SceneForceUnlockNotify> __r; // [rsp+40h] [rbp-A0h] BYREF
  common::milog::MiLogStream v21; // [rsp+50h] [rbp-90h] BYREF
  char v22[112]; // [rsp+70h] [rbp-70h] BYREF

  v4 = (unsigned __int64)v22;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v5 = __asan_stack_malloc_0(64LL);
    if ( v5 )
      v4 = v5;
  }
  *(_QWORD *)v4 = 1102416563LL;
  *(_QWORD *)(v4 + 8) = "1 32 16 22 unlock_notify_ptr:1996";
  *(_QWORD *)(v4 + 16) = PlayerSceneComp::unlockForce;
  v6 = v4 >> 3;
  *(_DWORD *)(v6 + 2147450880) = -235802127;
  *(_DWORD *)(v6 + 2147450884) = -202178560;
  common::tools::perf::make_shared<proto::SceneForceUnlockNotify>();
  __for_range = force_id_vec;
  __for_begin._M_current = std::vector<unsigned int>::begin(force_id_vec)._M_current;
  __for_end._M_current = std::vector<unsigned int>::end(force_id_vec)._M_current;
  while ( __gnu_cxx::operator!=<unsigned int const*,std::vector<unsigned int>>(&__for_begin, &__for_end) )
  {
    v7 = (unsigned int *)__gnu_cxx::__normal_iterator<unsigned int const*,std::vector<unsigned int>>::operator*(&__for_begin);
    v8 = v7;
    if ( *(_BYTE *)(((unsigned __int64)v7 >> 3) + 0x7FFF8000) != 0
      && (char)(((unsigned __int8)v7 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)v7 >> 3) + 0x7FFF8000) )
    {
      __asan_report_load4(v7);
    }
    force_id = *v8;
    ret = PlayerSceneComp::unlockForce(this, scene_id, *v8, 0);
    if ( ret )
    {
      if ( ret < 0 )
      {
        common::milog::MiLogStream::create(
          &v21,
          &common::milog::MiLogDefault::default_log_obj_,
          3u,
          "./src/scene/player_scene_comp.cpp",
          "unlockForce",
          2003);
        common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(&v21, (const char (*)[16])"lockForce fails");
        common::milog::MiLogStream::~MiLogStream(&v21);
      }
    }
    else
    {
      v9 = std::__shared_ptr_access<proto::SceneForceUnlockNotify,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<proto::SceneForceUnlockNotify,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 32));
      proto::SceneForceUnlockNotify::add_force_id_list(v9, force_id);
    }
    __gnu_cxx::__normal_iterator<unsigned int const*,std::vector<unsigned int>>::operator++(&__for_begin);
  }
  if ( is_notify )
  {
    v10 = std::__shared_ptr_access<proto::SceneForceUnlockNotify,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<proto::SceneForceUnlockNotify,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 32));
    proto::SceneForceUnlockNotify::set_is_add(v10, 1);
    if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
      __asan_report_load8();
    player = this->player_;
    std::dynamic_pointer_cast<google::protobuf::Message const,proto::SceneForceUnlockNotify>(&__r);
    Player::sendMessage(player, (common::minet::ConstMessagePtr *)&__r, 0LL);
    std::shared_ptr<google::protobuf::Message const>::~shared_ptr((std::shared_ptr<const google::protobuf::Message> *const)&__r);
  }
  std::shared_ptr<proto::SceneForceUnlockNotify>::~shared_ptr((std::shared_ptr<proto::SceneForceUnlockNotify> *const)(v4 + 32));
  result = 0;
  if ( v22 == (char *)v4 )
  {
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0LL;
  }
  else
  {
    *(_QWORD *)v4 = 1172321806LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 2015: range 0000000013E4F9CE-0000000013E5002B
__int64 __fastcall PlayerSceneComp::unlockAllForce(PlayerSceneComp *const this, uint32_t scene_id, bool is_notify)
{
  unsigned __int64 v3; // r13
  __int64 v4; // rax
  _DWORD *v5; // r12
  std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v6; // rax
  common::milog::MiLogStream *v7; // rax
  unsigned int v8; // r14d
  common::milog::MiLogStream *v9; // rax
  common::milog::MiLogStream *v10; // rax
  common::milog::MiLogStream *v11; // r14
  std::__shared_ptr_access<data::ConfigAirflowField,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v12; // rdx
  bool *p_unlocked; // rax
  Scene *v14; // rax
  std::__shared_ptr_access<proto::SceneForceUnlockNotify,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v15; // rax
  Player *player; // r14
  __int64 result; // rax
  unsigned int val; // [rsp+10h] [rbp-140h] BYREF
  uint32_t force_id; // [rsp+14h] [rbp-13Ch]
  std::unordered_map<unsigned int,std::shared_ptr<data::ConfigForceField>>::const_iterator __for_begin; // [rsp+18h] [rbp-138h] BYREF
  std::unordered_map<unsigned int,std::shared_ptr<data::ConfigForceField>>::const_iterator __for_end; // [rsp+20h] [rbp-130h] BYREF
  const SceneJsonConfig *scene_json_config_ptr; // [rsp+28h] [rbp-128h]
  const std::unordered_map<unsigned int,std::shared_ptr<data::ConfigForceField>> *__for_range; // [rsp+30h] [rbp-120h]
  const std::pair<unsigned int const,std::shared_ptr<data::ConfigForceField> > *p; // [rsp+38h] [rbp-118h]
  common::milog::MiLogStream v26; // [rsp+40h] [rbp-110h] BYREF
  char v27[240]; // [rsp+60h] [rbp-F0h] BYREF

  v3 = (unsigned __int64)v27;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_2(192LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "5 48 4 13 scene_id:2014 64 16 14 scene_ptr:2022 96 16 22 unlock_notify_ptr:2028 128 16 21 config"
                        "_force_ptr:2032 160 16 23 config_airflow_ptr:2033";
  *(_QWORD *)(v3 + 16) = PlayerSceneComp::unlockAllForce;
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = -234556943;
  v5[536862722] = -219021312;
  v5[536862723] = -219021312;
  v5[536862724] = -219021312;
  v5[536862725] = -202178560;
  *(_DWORD *)(v3 + 48) = scene_id;
  ServiceBox::findService<GameserverService>();
  GameserverService::getConfig((GameserverService *const)(v3 + 160));
  v6 = std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 160));
  scene_json_config_ptr = JsonConfigMgr::findSceneJsonConfig(&v6->design_config.json_config_mgr, *(_DWORD *)(v3 + 48));
  std::shared_ptr<Config>::~shared_ptr((std::shared_ptr<Config> *const)(v3 + 160));
  if ( scene_json_config_ptr )
  {
    PlayerSceneComp::findScene((const PlayerSceneComp *const)(v3 + 64), (uint32_t)this);
    if ( std::operator==<Scene>((const std::shared_ptr<Scene> *)(v3 + 64), 0LL) )
    {
      common::milog::MiLogStream::create(
        &v26,
        &common::milog::MiLogDefault::default_log_obj_,
        1u,
        "./src/scene/player_scene_comp.cpp",
        "unlockAllForce",
        2025);
      v9 = common::milog::MiLogStream::operator<<<char [28],(char *[28])0>(
             &v26,
             (const char (*)[28])"findScene failed, scene_id:");
      v10 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v9, (const unsigned int *)(v3 + 48));
      v11 = common::milog::MiLogStream::operator<<<char [7],(char *[7])0>(v10, (const char (*)[7])", uid:");
      if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
        __asan_report_load8();
      val = Player::getUid(this->player_);
      common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v11, &val);
      common::milog::MiLogStream::~MiLogStream(&v26);
      v8 = -1;
    }
    else
    {
      common::tools::perf::make_shared<proto::SceneForceUnlockNotify>();
      __for_range = &scene_json_config_ptr->force_map;
      __for_begin._M_cur = std::unordered_map<unsigned int,std::shared_ptr<data::ConfigForceField>>::begin(&scene_json_config_ptr->force_map)._M_cur;
      __for_end._M_cur = std::unordered_map<unsigned int,std::shared_ptr<data::ConfigForceField>>::end(&scene_json_config_ptr->force_map)._M_cur;
      while ( std::__detail::operator!=<std::pair<unsigned int const,std::shared_ptr<data::ConfigForceField>>,false>(
                &__for_begin,
                &__for_end) )
      {
        p = std::__detail::_Node_const_iterator<std::pair<unsigned int const,std::shared_ptr<data::ConfigForceField>>,false,false>::operator*(&__for_begin);
        if ( *(_BYTE *)(((unsigned __int64)p >> 3) + 0x7FFF8000) != 0
          && *(_BYTE *)(((unsigned __int64)p >> 3) + 0x7FFF8000) <= 3 )
        {
          __asan_report_load4(p);
        }
        force_id = p->first;
        std::shared_ptr<data::ConfigForceField>::shared_ptr(
          (std::shared_ptr<data::ConfigForceField> *const)(v3 + 128),
          &p->second);
        std::dynamic_pointer_cast<data::ConfigAirflowField,data::ConfigForceField>((const std::shared_ptr<data::ConfigForceField> *)(v3 + 160));
        if ( !std::operator==<data::ConfigAirflowField>(
                (const std::shared_ptr<data::ConfigAirflowField> *)(v3 + 160),
                0LL) )
        {
          v12 = std::__shared_ptr_access<data::ConfigAirflowField,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<data::ConfigAirflowField,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 160));
          p_unlocked = &v12->unlocked;
          if ( *(_BYTE *)(((unsigned __int64)p_unlocked >> 3) + 0x7FFF8000) != 0
            && ((unsigned __int8)p_unlocked & 7) >= *(_BYTE *)(((unsigned __int64)p_unlocked >> 3) + 0x7FFF8000) )
          {
            __asan_report_load1(p_unlocked);
          }
          if ( !v12->unlocked )
          {
            v14 = std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 64));
            Scene::unlockForce(v14, force_id, 0);
            v15 = std::__shared_ptr_access<proto::SceneForceUnlockNotify,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<proto::SceneForceUnlockNotify,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 96));
            proto::SceneForceUnlockNotify::add_force_id_list(v15, force_id);
          }
        }
        std::shared_ptr<data::ConfigAirflowField>::~shared_ptr((std::shared_ptr<data::ConfigAirflowField> *const)(v3 + 160));
        std::shared_ptr<data::ConfigForceField>::~shared_ptr((std::shared_ptr<data::ConfigForceField> *const)(v3 + 128));
        std::__detail::_Node_const_iterator<std::pair<unsigned int const,std::shared_ptr<data::ConfigForceField>>,false,false>::operator++(&__for_begin);
      }
      if ( is_notify )
      {
        if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
          __asan_report_load8();
        player = this->player_;
        std::dynamic_pointer_cast<google::protobuf::Message const,proto::SceneForceUnlockNotify>((const std::shared_ptr<proto::SceneForceUnlockNotify> *)(v3 + 160));
        Player::sendMessage(player, (common::minet::ConstMessagePtr *)(v3 + 160), 0LL);
        std::shared_ptr<google::protobuf::Message const>::~shared_ptr((std::shared_ptr<const google::protobuf::Message> *const)(v3 + 160));
      }
      v8 = 0;
      std::shared_ptr<proto::SceneForceUnlockNotify>::~shared_ptr((std::shared_ptr<proto::SceneForceUnlockNotify> *const)(v3 + 96));
    }
    std::shared_ptr<Scene>::~shared_ptr((std::shared_ptr<Scene> *const)(v3 + 64));
  }
  else
  {
    common::milog::MiLogStream::create(
      &v26,
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/scene/player_scene_comp.cpp",
      "unlockAllForce",
      2019);
    v7 = common::milog::MiLogStream::operator<<<char [37],(char *[37])0>(
           &v26,
           (const char (*)[37])"findSceneJsonConfig fails, scene_id:");
    common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v7, (const unsigned int *)(v3 + 48));
    common::milog::MiLogStream::~MiLogStream(&v26);
    v8 = -1;
  }
  result = v8;
  if ( v27 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8010) = 0LL;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 2047: range 0000000013E5002C-0000000013E50108
void __cdecl PlayerSceneComp::setDestScene(PlayerSceneComp *const this, ScenePtr *p_dest_scene_ptr)
{
  __int64 v2; // rsi
  std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v3; // rax
  uint32_t SceneId; // edx
  char v5; // al

  std::weak_ptr<Scene>::operator=<Scene>(&this->dest_scene_wtr_, p_dest_scene_ptr);
  v2 = 0LL;
  if ( std::operator==<Scene>(p_dest_scene_ptr, 0LL) )
  {
    if ( *(_BYTE *)(((unsigned __int64)&this->dest_scene_id_ >> 3) + 0x7FFF8000) != 0
      && *(_BYTE *)(((unsigned __int64)&this->dest_scene_id_ >> 3) + 0x7FFF8000) <= 3 )
    {
      __asan_report_store4(&this->dest_scene_id_, 0LL, (_BYTE)this + 64);
    }
    this->dest_scene_id_ = 0;
  }
  else
  {
    v3 = std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false> *const)p_dest_scene_ptr);
    SceneId = Scene::getSceneId(v3);
    v5 = *(_BYTE *)(((unsigned __int64)&this->dest_scene_id_ >> 3) + 0x7FFF8000);
    if ( v5 != 0 && v5 <= 3 )
    {
      LOBYTE(v2) = v5 != 0;
      __asan_report_store4(&this->dest_scene_id_, v2, SceneId);
    }
    this->dest_scene_id_ = SceneId;
  }
};

// Line 2061: range 0000000013E5010A-0000000013E5026F
uint32_t __cdecl PlayerSceneComp::getPeerId(PlayerSceneComp *const this)
{
  unsigned __int64 v1; // rbx
  __int64 v2; // rax
  unsigned __int64 v3; // r12
  uint32_t PeerId; // r14d
  std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v5; // r14
  uint32_t Uid; // eax
  uint32_t result; // eax
  char v8[112]; // [rsp+10h] [rbp-70h] BYREF

  v1 = (unsigned __int64)v8;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_0(64LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "1 32 16 18 cur_scene_ptr:2062";
  *(_QWORD *)(v1 + 16) = PlayerSceneComp::getPeerId;
  v3 = v1 >> 3;
  *(_DWORD *)(v3 + 2147450880) = -235802127;
  *(_DWORD *)(v3 + 2147450884) = -202178560;
  PlayerSceneComp::getCurScene((const PlayerSceneComp *const)(v1 + 32));
  if ( std::operator==<Scene>((const std::shared_ptr<Scene> *)(v1 + 32), 0LL) )
  {
    PeerId = 0;
  }
  else
  {
    v5 = std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v1 + 32));
    if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
      __asan_report_load8();
    Uid = Player::getUid(this->player_);
    PeerId = Scene::getPeerId(v5, Uid);
  }
  std::shared_ptr<Scene>::~shared_ptr((std::shared_ptr<Scene> *const)(v1 + 32));
  result = PeerId;
  if ( v8 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 2073: range 0000000013E50270-0000000013E50415
void __cdecl PlayerSceneComp::addDisconnectDestroyEntity(PlayerSceneComp *const this, Entity *entity)
{
  common::milog::MiLogStream *v2; // rbx
  common::milog::MiLogStream *v3; // rax
  common::milog::MiLogStream *v4; // rbx
  unsigned int Uid; // [rsp+14h] [rbp-5Ch] BYREF
  unsigned __int64 val; // [rsp+18h] [rbp-58h] BYREF
  std::shared_ptr<Entity> __r; // [rsp+20h] [rbp-50h] BYREF
  std::weak_ptr<Entity> __x; // [rsp+30h] [rbp-40h] BYREF
  common::milog::MiLogStream v9; // [rsp+40h] [rbp-30h] BYREF

  toThisPtr<Entity>((Entity *)&__r);
  std::weak_ptr<Entity>::weak_ptr<Entity,void>(&__x, &__r);
  std::set<std::weak_ptr<Entity>,std::owner_less<std::weak_ptr<Entity>>,std::allocator<std::weak_ptr<Entity>>>::insert(
    &this->disconnect_destroy_entity_set_,
    &__x);
  std::weak_ptr<Entity>::~weak_ptr(&__x);
  std::shared_ptr<Entity>::~shared_ptr(&__r);
  if ( std::set<std::weak_ptr<Entity>,std::owner_less<std::weak_ptr<Entity>>,std::allocator<std::weak_ptr<Entity>>>::size(&this->disconnect_destroy_entity_set_) > 0x1388 )
  {
    common::milog::MiLogStream::create(
      &v9,
      &common::milog::MiLogDefault::default_log_obj_,
      1u,
      "./src/scene/player_scene_comp.cpp",
      "addDisconnectDestroyEntity",
      2077);
    v2 = common::milog::MiLogStream::operator<<<char [51],(char *[51])0>(
           &v9,
           (const char (*)[51])"disconnect_destroy_entity_set_ is too large, size:");
    val = std::set<std::weak_ptr<Entity>,std::owner_less<std::weak_ptr<Entity>>,std::allocator<std::weak_ptr<Entity>>>::size(&this->disconnect_destroy_entity_set_);
    v3 = common::milog::MiLogStream::operator<<<unsigned long,(unsigned long *)0>(v2, &val);
    v4 = common::milog::MiLogStream::operator<<<char [7],(char *[7])0>(v3, (const char (*)[7])", uid:");
    if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
      __asan_report_load8();
    Uid = Player::getUid(this->player_);
    common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v4, &Uid);
    common::milog::MiLogStream::~MiLogStream(&v9);
  }
};

// Line 2084: range 0000000013E50416-0000000013E505BB
void __cdecl PlayerSceneComp::addLeaveSceneDestroyEntity(PlayerSceneComp *const this, Entity *entity)
{
  common::milog::MiLogStream *v2; // rbx
  common::milog::MiLogStream *v3; // rax
  common::milog::MiLogStream *v4; // rbx
  unsigned int Uid; // [rsp+14h] [rbp-5Ch] BYREF
  unsigned __int64 val; // [rsp+18h] [rbp-58h] BYREF
  std::shared_ptr<Entity> __r; // [rsp+20h] [rbp-50h] BYREF
  std::weak_ptr<Entity> __x; // [rsp+30h] [rbp-40h] BYREF
  common::milog::MiLogStream v9; // [rsp+40h] [rbp-30h] BYREF

  toThisPtr<Entity>((Entity *)&__r);
  std::weak_ptr<Entity>::weak_ptr<Entity,void>(&__x, &__r);
  std::set<std::weak_ptr<Entity>,std::owner_less<std::weak_ptr<Entity>>,std::allocator<std::weak_ptr<Entity>>>::insert(
    &this->leave_scene_destroy_entity_set_,
    &__x);
  std::weak_ptr<Entity>::~weak_ptr(&__x);
  std::shared_ptr<Entity>::~shared_ptr(&__r);
  if ( std::set<std::weak_ptr<Entity>,std::owner_less<std::weak_ptr<Entity>>,std::allocator<std::weak_ptr<Entity>>>::size(&this->leave_scene_destroy_entity_set_) > 0x1388 )
  {
    common::milog::MiLogStream::create(
      &v9,
      &common::milog::MiLogDefault::default_log_obj_,
      1u,
      "./src/scene/player_scene_comp.cpp",
      "addLeaveSceneDestroyEntity",
      2088);
    v2 = common::milog::MiLogStream::operator<<<char [52],(char *[52])0>(
           &v9,
           (const char (*)[52])"leave_scene_destroy_entity_set_ is too large, size:");
    val = std::set<std::weak_ptr<Entity>,std::owner_less<std::weak_ptr<Entity>>,std::allocator<std::weak_ptr<Entity>>>::size(&this->leave_scene_destroy_entity_set_);
    v3 = common::milog::MiLogStream::operator<<<unsigned long,(unsigned long *)0>(v2, &val);
    v4 = common::milog::MiLogStream::operator<<<char [7],(char *[7])0>(v3, (const char (*)[7])", uid:");
    if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
      __asan_report_load8();
    Uid = Player::getUid(this->player_);
    common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v4, &Uid);
    common::milog::MiLogStream::~MiLogStream(&v9);
  }
};

// Line 2094: range 0000000013E505BC-0000000013E50655
void __cdecl PlayerSceneComp::removeDisconnectDestroyEntity(PlayerSceneComp *const this, Entity *entity)
{
  std::shared_ptr<Entity> __r; // [rsp+10h] [rbp-30h] BYREF
  std::weak_ptr<Entity> __x; // [rsp+20h] [rbp-20h] BYREF

  toThisPtr<Entity>((Entity *)&__r);
  std::weak_ptr<Entity>::weak_ptr<Entity,void>(&__x, &__r);
  std::set<std::weak_ptr<Entity>,std::owner_less<std::weak_ptr<Entity>>,std::allocator<std::weak_ptr<Entity>>>::erase(
    &this->disconnect_destroy_entity_set_,
    &__x);
  std::weak_ptr<Entity>::~weak_ptr(&__x);
  std::shared_ptr<Entity>::~shared_ptr(&__r);
};

// Line 2100: range 0000000013E50656-0000000013E506EF
void __cdecl PlayerSceneComp::removeLeaveSceneDestroyEntity(PlayerSceneComp *const this, Entity *entity)
{
  std::shared_ptr<Entity> __r; // [rsp+10h] [rbp-30h] BYREF
  std::weak_ptr<Entity> __x; // [rsp+20h] [rbp-20h] BYREF

  toThisPtr<Entity>((Entity *)&__r);
  std::weak_ptr<Entity>::weak_ptr<Entity,void>(&__x, &__r);
  std::set<std::weak_ptr<Entity>,std::owner_less<std::weak_ptr<Entity>>,std::allocator<std::weak_ptr<Entity>>>::erase(
    &this->leave_scene_destroy_entity_set_,
    &__x);
  std::weak_ptr<Entity>::~weak_ptr(&__x);
  std::shared_ptr<Entity>::~shared_ptr(&__r);
};

// Line 2106: range 0000000013E506F0-0000000013E509CB
void __cdecl PlayerSceneComp::destroyEntityWhenDisconnect(PlayerSceneComp *const this)
{
  unsigned __int64 v1; // r13
  __int64 v2; // rax
  _DWORD *v3; // r12
  const std::weak_ptr<Entity> *v4; // rax
  unsigned __int64 v5; // rax
  unsigned __int64 v6; // rdx
  std::set<std::weak_ptr<Entity>,std::owner_less<std::weak_ptr<Entity> >,std::allocator<std::weak_ptr<Entity> > >::iterator __for_begin; // [rsp+18h] [rbp-F8h] BYREF
  std::set<std::weak_ptr<Entity>,std::owner_less<std::weak_ptr<Entity> >,std::allocator<std::weak_ptr<Entity> > >::iterator __for_end; // [rsp+20h] [rbp-F0h] BYREF
  std::set<std::weak_ptr<Entity>,std::owner_less<std::weak_ptr<Entity> >,std::allocator<std::weak_ptr<Entity> > > *__for_range; // [rsp+28h] [rbp-E8h]
  char v10[224]; // [rsp+30h] [rbp-E0h] BYREF

  v1 = (unsigned __int64)v10;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_2(192LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "3 48 16 15 entity_wtr:2108 80 16 15 entity_ptr:2110 112 48 12 tmp_set:2107";
  *(_QWORD *)(v1 + 16) = PlayerSceneComp::destroyEntityWhenDisconnect;
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = 61937;
  v3[536862722] = 62194;
  v3[536862723] = 62194;
  v3[536862725] = -202116109;
  std::set<std::weak_ptr<Entity>,std::owner_less<std::weak_ptr<Entity>>,std::allocator<std::weak_ptr<Entity>>>::set(
    (std::set<std::weak_ptr<Entity>,std::owner_less<std::weak_ptr<Entity> >,std::allocator<std::weak_ptr<Entity> > > *const)(v1 + 112),
    &this->disconnect_destroy_entity_set_);
  __for_range = (std::set<std::weak_ptr<Entity>,std::owner_less<std::weak_ptr<Entity> >,std::allocator<std::weak_ptr<Entity> > > *)(v1 + 112);
  __for_begin._M_node = std::set<std::weak_ptr<Entity>,std::owner_less<std::weak_ptr<Entity>>,std::allocator<std::weak_ptr<Entity>>>::begin((const std::set<std::weak_ptr<Entity>,std::owner_less<std::weak_ptr<Entity> >,std::allocator<std::weak_ptr<Entity> > > *const)(v1 + 112))._M_node;
  __for_end._M_node = std::set<std::weak_ptr<Entity>,std::owner_less<std::weak_ptr<Entity>>,std::allocator<std::weak_ptr<Entity>>>::end((const std::set<std::weak_ptr<Entity>,std::owner_less<std::weak_ptr<Entity> >,std::allocator<std::weak_ptr<Entity> > > *const)(v1 + 112))._M_node;
  while ( std::operator!=(&__for_begin, &__for_end) )
  {
    v4 = std::_Rb_tree_const_iterator<std::weak_ptr<Entity>>::operator*(&__for_begin);
    std::weak_ptr<Entity>::weak_ptr((std::weak_ptr<Entity> *const)(v1 + 48), v4);
    std::weak_ptr<Entity>::lock((const std::weak_ptr<Entity> *const)(v1 + 80));
    if ( std::operator!=<Entity>((const std::shared_ptr<Entity> *)(v1 + 80), 0LL) )
    {
      v5 = (unsigned __int64)std::__shared_ptr_access<Entity,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Entity,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v1 + 80));
      if ( *(_BYTE *)((v5 >> 3) + 0x7FFF8000) )
        v5 = __asan_report_load8();
      v6 = *(_QWORD *)v5 + 128LL;
      if ( *(_BYTE *)((v6 >> 3) + 0x7FFF8000) )
        v5 = __asan_report_load8();
      (*(void (__fastcall **)(unsigned __int64, VisionContext *))v6)(v5, &VisionContext::miss_context);
    }
    std::shared_ptr<Entity>::~shared_ptr((std::shared_ptr<Entity> *const)(v1 + 80));
    std::weak_ptr<Entity>::~weak_ptr((std::weak_ptr<Entity> *const)(v1 + 48));
    std::_Rb_tree_const_iterator<std::weak_ptr<Entity>>::operator++(&__for_begin);
  }
  std::set<std::weak_ptr<Entity>,std::owner_less<std::weak_ptr<Entity>>,std::allocator<std::weak_ptr<Entity>>>::clear(&this->disconnect_destroy_entity_set_);
  std::set<std::weak_ptr<Entity>,std::owner_less<std::weak_ptr<Entity>>,std::allocator<std::weak_ptr<Entity>>>::~set((std::set<std::weak_ptr<Entity>,std::owner_less<std::weak_ptr<Entity> >,std::allocator<std::weak_ptr<Entity> > > *const)(v1 + 112));
  if ( v10 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0LL;
    *(_DWORD *)((v1 >> 3) + 0x7FFF8014) = 0;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
  }
};

// Line 2121: range 0000000013E509CC-0000000013E50D0C
void __cdecl PlayerSceneComp::destroyEntityWhenLeaveScene(PlayerSceneComp *const this)
{
  unsigned __int64 v1; // r13
  __int64 v2; // rax
  _DWORD *v3; // r12
  const std::weak_ptr<Entity> *v4; // rax
  unsigned __int64 v5; // rax
  unsigned __int64 v6; // rdx
  std::set<std::weak_ptr<Entity>,std::owner_less<std::weak_ptr<Entity> >,std::allocator<std::weak_ptr<Entity> > >::iterator __for_begin; // [rsp+18h] [rbp-118h] BYREF
  std::set<std::weak_ptr<Entity>,std::owner_less<std::weak_ptr<Entity> >,std::allocator<std::weak_ptr<Entity> > >::iterator __for_end; // [rsp+20h] [rbp-110h] BYREF
  std::set<std::weak_ptr<Entity>,std::owner_less<std::weak_ptr<Entity> >,std::allocator<std::weak_ptr<Entity> > > *__for_range; // [rsp+28h] [rbp-108h]
  std::weak_ptr<Entity> __x; // [rsp+30h] [rbp-100h] BYREF
  char v11[240]; // [rsp+40h] [rbp-F0h] BYREF

  v1 = (unsigned __int64)v11;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_2(192LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "3 48 16 15 entity_wtr:2123 80 16 15 entity_ptr:2125 112 48 12 tmp_set:2122";
  *(_QWORD *)(v1 + 16) = PlayerSceneComp::destroyEntityWhenLeaveScene;
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = 61937;
  v3[536862722] = 62194;
  v3[536862723] = 62194;
  v3[536862725] = -202116109;
  std::set<std::weak_ptr<Entity>,std::owner_less<std::weak_ptr<Entity>>,std::allocator<std::weak_ptr<Entity>>>::set(
    (std::set<std::weak_ptr<Entity>,std::owner_less<std::weak_ptr<Entity> >,std::allocator<std::weak_ptr<Entity> > > *const)(v1 + 112),
    &this->leave_scene_destroy_entity_set_);
  __for_range = (std::set<std::weak_ptr<Entity>,std::owner_less<std::weak_ptr<Entity> >,std::allocator<std::weak_ptr<Entity> > > *)(v1 + 112);
  __for_begin._M_node = std::set<std::weak_ptr<Entity>,std::owner_less<std::weak_ptr<Entity>>,std::allocator<std::weak_ptr<Entity>>>::begin((const std::set<std::weak_ptr<Entity>,std::owner_less<std::weak_ptr<Entity> >,std::allocator<std::weak_ptr<Entity> > > *const)(v1 + 112))._M_node;
  __for_end._M_node = std::set<std::weak_ptr<Entity>,std::owner_less<std::weak_ptr<Entity>>,std::allocator<std::weak_ptr<Entity>>>::end((const std::set<std::weak_ptr<Entity>,std::owner_less<std::weak_ptr<Entity> >,std::allocator<std::weak_ptr<Entity> > > *const)(v1 + 112))._M_node;
  while ( std::operator!=(&__for_begin, &__for_end) )
  {
    v4 = std::_Rb_tree_const_iterator<std::weak_ptr<Entity>>::operator*(&__for_begin);
    std::weak_ptr<Entity>::weak_ptr((std::weak_ptr<Entity> *const)(v1 + 48), v4);
    std::weak_ptr<Entity>::lock((const std::weak_ptr<Entity> *const)(v1 + 80));
    if ( std::operator!=<Entity>((const std::shared_ptr<Entity> *)(v1 + 80), 0LL) )
    {
      std::weak_ptr<Entity>::weak_ptr<Entity,void>(&__x, (const std::shared_ptr<Entity> *)(v1 + 80));
      std::set<std::weak_ptr<Entity>,std::owner_less<std::weak_ptr<Entity>>,std::allocator<std::weak_ptr<Entity>>>::erase(
        &this->disconnect_destroy_entity_set_,
        &__x);
      std::weak_ptr<Entity>::~weak_ptr(&__x);
      v5 = (unsigned __int64)std::__shared_ptr_access<Entity,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Entity,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v1 + 80));
      if ( *(_BYTE *)((v5 >> 3) + 0x7FFF8000) )
        v5 = __asan_report_load8();
      v6 = *(_QWORD *)v5 + 128LL;
      if ( *(_BYTE *)((v6 >> 3) + 0x7FFF8000) )
        v5 = __asan_report_load8();
      (*(void (__fastcall **)(unsigned __int64, VisionContext *))v6)(v5, &VisionContext::miss_context);
    }
    std::shared_ptr<Entity>::~shared_ptr((std::shared_ptr<Entity> *const)(v1 + 80));
    std::weak_ptr<Entity>::~weak_ptr((std::weak_ptr<Entity> *const)(v1 + 48));
    std::_Rb_tree_const_iterator<std::weak_ptr<Entity>>::operator++(&__for_begin);
  }
  std::set<std::weak_ptr<Entity>,std::owner_less<std::weak_ptr<Entity>>,std::allocator<std::weak_ptr<Entity>>>::clear(&this->leave_scene_destroy_entity_set_);
  std::set<std::weak_ptr<Entity>,std::owner_less<std::weak_ptr<Entity>>,std::allocator<std::weak_ptr<Entity>>>::~set((std::set<std::weak_ptr<Entity>,std::owner_less<std::weak_ptr<Entity> >,std::allocator<std::weak_ptr<Entity> > > *const)(v1 + 112));
  if ( v11 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0LL;
    *(_DWORD *)((v1 >> 3) + 0x7FFF8014) = 0;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
  }
};

// Line 2139: range 0000000013E50D0E-0000000013E53CBA
PlayerSceneComp *__fastcall PlayerSceneComp::createEntityFromClient(
        PlayerSceneComp *const this,
        const proto::CreateEntityInfo *create_entity_info,
        const proto::CreateEntityInfo *quest_id,
        uint32_t parent_quest_id,
        int a5)
{
  unsigned __int64 v5; // r13
  __int64 v6; // rax
  _DWORD *v7; // r12
  common::milog::MiLogStream *v8; // rcx
  int v9; // r14d
  std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v10; // rax
  std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v11; // rax
  std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v12; // rax
  common::milog::MiLogStream *v13; // rcx
  common::milog::MiLogStream *v14; // rax
  common::milog::MiLogStream *v15; // rax
  common::milog::MiLogStream *v16; // rax
  common::milog::MiLogStream *v17; // rax
  common::milog::MiLogStream *v18; // rcx
  int v19; // r14d
  std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v20; // rax
  common::milog::MiLogStream *v21; // rax
  common::milog::MiLogStream *v22; // rax
  common::milog::MiLogStream *v23; // rax
  common::milog::MiLogStream *v24; // rax
  common::milog::MiLogStream *v25; // r14
  std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v26; // rax
  common::milog::MiLogStream *v27; // rcx
  common::milog::MiLogStream *v28; // rcx
  common::milog::MiLogStream *v29; // rax
  common::milog::MiLogStream *v30; // rax
  common::milog::MiLogStream *v31; // rax
  common::milog::MiLogStream *v32; // rax
  common::milog::MiLogStream *v33; // rax
  const proto::Vector *v34; // rax
  const proto::Vector *v35; // rax
  Scene *v36; // rax
  uint32_t v37; // eax
  bool v38; // r14
  common::milog::MiLogStream *v39; // r14
  common::milog::MiLogStream *v40; // rax
  common::milog::MiLogStream *v41; // rax
  common::milog::MiLogStream *v42; // rax
  common::milog::MiLogStream *v43; // rax
  common::milog::MiLogStream *v44; // rax
  common::milog::MiLogStream *v45; // r14
  std::__shared_ptr_access<Npc,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v46; // rax
  Entity *v47; // rax
  Scene *v48; // r14
  Entity *v49; // rax
  common::milog::MiLogStream *v50; // r14
  common::milog::MiLogStream *v51; // rax
  common::milog::MiLogStream *v52; // rax
  common::milog::MiLogStream *v53; // rax
  common::milog::MiLogStream *v54; // rax
  int v55; // r14d
  std::__shared_ptr_access<Npc,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v56; // rax
  uint32_t RoomId; // r14d
  std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v58; // rax
  data::SceneType SceneType; // eax
  RoomScene *v61; // r14
  Entity *v62; // rax
  unsigned __int64 v63; // rax
  unsigned __int64 v64; // rdx
  common::milog::MiLogStream *v65; // rax
  std::__shared_ptr_access<Npc,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v66; // r14
  unsigned __int64 v67; // rax
  std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v68; // rax
  common::milog::MiLogStream *v69; // r14
  common::milog::MiLogStream *v70; // rax
  common::milog::MiLogStream *v71; // rax
  common::milog::MiLogStream *v72; // rax
  common::milog::MiLogStream *v73; // rax
  common::milog::MiLogStream *v74; // rax
  common::milog::MiLogStream *v75; // r14
  std::__shared_ptr_access<Npc,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v76; // rax
  PlayerQuestComp *QuestComp; // rax
  common::tools::StringStream<common::tools::FixedBuffer<4096> > *v78; // rax
  common::tools::StringStream<common::tools::FixedBuffer<4096> > *v79; // rax
  Player *rot; // r14
  common::milog::MiLogStream *v81; // rax
  common::milog::MiLogStream *v82; // rax
  common::milog::MiLogStream *v83; // rax
  PlayerQuestComp *v84; // rax
  std::__shared_ptr_access<ParentQuest,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v85; // rax
  common::tools::StringStream<common::tools::FixedBuffer<4096> > *v87; // rax
  common::tools::StringStream<common::tools::FixedBuffer<4096> > *v88; // rax
  Player *v89; // r14
  common::milog::MiLogStream *v90; // rax
  common::milog::MiLogStream *v91; // rax
  common::milog::MiLogStream *v92; // rax
  common::milog::MiLogStream *v93; // r14
  std::__shared_ptr_access<ParentQuest,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v94; // rax
  common::milog::MiLogStream *v95; // rax
  int v96; // r14d
  uint32_t v97; // eax
  common::tools::StringStream<common::tools::FixedBuffer<4096> > *v98; // rax
  common::tools::StringStream<common::tools::FixedBuffer<4096> > *v99; // rax
  common::tools::StringStream<common::tools::FixedBuffer<4096> > *v100; // r14
  unsigned int v101; // eax
  common::tools::StringStream<common::tools::FixedBuffer<4096> > *v102; // rax
  Player *v103; // r14
  common::milog::MiLogStream *v104; // r14
  common::milog::MiLogStream *v105; // rax
  common::milog::MiLogStream *v106; // rax
  common::milog::MiLogStream *v107; // rax
  common::milog::MiLogStream *v108; // rax
  const proto::Vector *v109; // rax
  const proto::Vector *v110; // rax
  Scene *v111; // rax
  common::milog::MiLogStream *v112; // rax
  int v113; // r14d
  std::__shared_ptr_access<Monster,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v114; // r14
  unsigned __int64 v115; // rax
  std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v116; // rax
  const proto::CreateGadgetInfo *v117; // rax
  const proto::CreateGadgetInfo_Chest *v118; // rax
  uint32_t v119; // r14d
  uint32_t v120; // eax
  common::tools::StringStream<common::tools::FixedBuffer<4096> > *v121; // rax
  common::tools::StringStream<common::tools::FixedBuffer<4096> > *v122; // rax
  common::tools::StringStream<common::tools::FixedBuffer<4096> > *v123; // r14
  unsigned int v124; // eax
  common::tools::StringStream<common::tools::FixedBuffer<4096> > *v125; // rax
  common::tools::StringStream<common::tools::FixedBuffer<4096> > *v126; // r14
  const proto::CreateGadgetInfo *v127; // rax
  const proto::CreateGadgetInfo_Chest *v128; // rax
  unsigned int v129; // eax
  common::tools::StringStream<common::tools::FixedBuffer<4096> > *v130; // rax
  Player *v131; // r14
  common::milog::MiLogStream *v132; // r14
  common::milog::MiLogStream *v133; // rax
  common::milog::MiLogStream *v134; // rax
  common::milog::MiLogStream *v135; // rax
  common::milog::MiLogStream *v136; // rax
  const proto::Vector *v137; // rax
  const proto::Vector *v138; // rax
  const proto::CreateGadgetInfo *v139; // rax
  const proto::CreateGadgetInfo *v140; // rax
  const proto::CreateGadgetInfo_Chest *v141; // rax
  const proto::CreateGadgetInfo *v142; // rax
  const proto::CreateGadgetInfo_Chest *v143; // rax
  Scene *v144; // rax
  common::milog::MiLogStream *v145; // rax
  int v146; // r14d
  Gadget *v147; // r14
  uint32_t v148; // eax
  std::__shared_ptr_access<Gadget,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v149; // r14
  unsigned __int64 v150; // rax
  std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v151; // rax
  uint32_t v152; // eax
  common::tools::StringStream<common::tools::FixedBuffer<4096> > *v153; // rax
  common::tools::StringStream<common::tools::FixedBuffer<4096> > *v154; // rax
  common::tools::StringStream<common::tools::FixedBuffer<4096> > *v155; // r14
  unsigned int v156; // eax
  common::tools::StringStream<common::tools::FixedBuffer<4096> > *v157; // rax
  Player *v158; // r14
  common::milog::MiLogStream *v159; // r14
  common::milog::MiLogStream *v160; // rax
  common::milog::MiLogStream *v161; // rax
  common::milog::MiLogStream *v162; // rax
  common::milog::MiLogStream *v163; // rax
  PlayerItemComp *ItemComp; // rax
  common::milog::MiLogStream *v165; // rax
  common::milog::MiLogStream *v166; // rax
  common::milog::MiLogStream *v167; // rax
  _BOOL4 v168; // r14d
  const std::shared_ptr<Item> *v169; // rax
  const proto::Vector *v170; // rax
  const proto::Vector *v171; // rax
  const proto::CreateGadgetInfo *v172; // rax
  Scene *v173; // rax
  common::milog::MiLogStream *v174; // rax
  common::milog::MiLogStream *v175; // rax
  common::milog::MiLogStream *v176; // rax
  int v177; // r14d
  std::__shared_ptr_access<Gadget,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v178; // r14
  unsigned __int64 v179; // rax
  std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v180; // rax
  common::milog::MiLogStream *v181; // rcx
  Entity *v182; // rax
  char room_id; // [rsp+8h] [rbp-848h]
  google::protobuf::uint32 room_ida; // [rsp+8h] [rbp-848h]
  void (__fastcall *room_idb)(std::__shared_ptr_access<Npc,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *, std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *, VisionContext *); // [rsp+8h] [rbp-848h]
  void (__fastcall *room_idc)(std::__shared_ptr_access<Monster,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *, std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *, VisionContext *); // [rsp+8h] [rbp-848h]
  void (__fastcall *room_idd)(std::__shared_ptr_access<Gadget,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *, std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *, VisionContext *); // [rsp+8h] [rbp-848h]
  void (__fastcall *room_ide)(std::__shared_ptr_access<Gadget,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *, std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *, VisionContext *); // [rsp+8h] [rbp-848h]
  bool is_client_created; // [rsp+37h] [rbp-819h]
  unsigned int Uid; // [rsp+38h] [rbp-818h] BYREF
  unsigned int val; // [rsp+3Ch] [rbp-814h] BYREF
  const data::SceneExcelConfig *scene_config_ptr; // [rsp+40h] [rbp-810h]
  const ParentQuestScriptConfig *parent_quest_config_ptr; // [rsp+48h] [rbp-808h]
  Vector3 v198; // [rsp+54h] [rbp-7FCh] BYREF
  ActionReason action_reason; // [rsp+60h] [rbp-7F0h] BYREF
  common::milog::MiLogStream v200; // [rsp+80h] [rbp-7D0h] BYREF
  char v201[1968]; // [rsp+A0h] [rbp-7B0h] BYREF

  v5 = (unsigned __int64)v201;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v6 = __asan_stack_malloc_5(1920LL);
    if ( v6 )
      v5 = v6;
  }
  *(_QWORD *)v5 = 1102416563LL;
  *(_QWORD *)(v5 + 8) = "14 32 4 13 scene_id:2140 48 4 20 origin_scene_id:2141 64 4 13 quest_id:2138 80 4 20 parent_quest"
                        "_id:2138 96 16 14 scene_ptr:2162 128 16 15 entity_ptr:2194 160 16 21 parent_quest_ptr:2257 192 1"
                        "6 15 item_param:2347 224 16 15 trifle_ptr:2364 256 24 13 item_vec:2350 320 64 14 npc_param:2197 "
                        "416 112 17 trifle_param:2356 560 352 18 monster_param:2284 976 816 17 gadget_param:2313";
  *(_QWORD *)(v5 + 16) = PlayerSceneComp::createEntityFromClient;
  v7 = (_DWORD *)(v5 >> 3);
  v7[536862720] = -235802127;
  v7[536862721] = -234556924;
  v7[536862722] = -234556924;
  v7[536862723] = -219021312;
  v7[536862724] = -219021312;
  v7[536862725] = -219021312;
  v7[536862726] = -219021312;
  v7[536862727] = -219021312;
  v7[536862728] = -234881024;
  v7[536862729] = -218959118;
  v7[536862732] = -218959118;
  v7[536862736] = -219021312;
  v7[536862737] = 62194;
  v7[536862748] = -219021312;
  v7[536862749] = -218959118;
  v7[536862750] = 62194;
  v7[536862776] = -202116109;
  v7[536862777] = -202116109;
  v7[536862778] = -202116109;
  v7[536862779] = -202116109;
  *(_DWORD *)(v5 + 64) = parent_quest_id;
  *(_DWORD *)(v5 + 80) = a5;
  *(_DWORD *)(v5 + 32) = proto::CreateEntityInfo::scene_id(quest_id);
  *(_DWORD *)(v5 + 48) = *(_DWORD *)(v5 + 32);
  if ( *(_DWORD *)(v5 + 32) )
    goto LABEL_13;
  PlayerSceneComp::getCurScene((const PlayerSceneComp *const)(v5 + 224));
  if ( std::operator==<Scene>((const std::shared_ptr<Scene> *)(v5 + 224), 0LL) )
  {
    common::milog::MiLogStream::create(
      &v200,
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/scene/player_scene_comp.cpp",
      "createEntityFromClient",
      2147);
    v8 = common::milog::MiLogStream::operator<<<char [19],(char *[19])0>(
           &v200,
           (const char (*)[19])"findCurScene fails");
    if ( *(_BYTE *)(((unsigned __int64)&create_entity_info->rot_ >> 3) + 0x7FFF8000) )
      __asan_report_load8();
    operator<<(v8, (const Player *)create_entity_info->rot_);
    common::milog::MiLogStream::~MiLogStream(&v200);
    std::shared_ptr<Entity>::shared_ptr((std::shared_ptr<Entity> *const)this, 0LL);
    v9 = 0;
  }
  else
  {
    v10 = std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v5 + 224));
    if ( Scene::getSceneType(v10) == SCENE_DUNGEON )
    {
      v11 = std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v5 + 224));
      *(_DWORD *)(v5 + 32) = Scene::getSceneId(v11);
    }
    v9 = 1;
  }
  std::shared_ptr<Scene>::~shared_ptr((std::shared_ptr<Scene> *const)(v5 + 224));
  if ( v9 == 1 )
  {
LABEL_13:
    ServiceBox::findService<GameserverService>();
    GameserverService::getConfig((GameserverService *const)(v5 + 224));
    v12 = std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v5 + 224));
    scene_config_ptr = data::SceneExcelConfigMgrBase::findSceneExcelConfig(
                         &v12->design_config.txt_config_mgr.scene_config_mgr,
                         *(_DWORD *)(v5 + 32));
    std::shared_ptr<Config>::~shared_ptr((std::shared_ptr<Config> *const)(v5 + 224));
    if ( !scene_config_ptr )
    {
      common::milog::MiLogStream::create(
        &v200,
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/scene/player_scene_comp.cpp",
        "createEntityFromClient",
        2159);
      v13 = common::milog::MiLogStream::operator<<<char [27],(char *[27])0>(
              &v200,
              (const char (*)[27])"findSceneExcelConfig fails");
      if ( *(_BYTE *)(((unsigned __int64)&create_entity_info->rot_ >> 3) + 0x7FFF8000) )
        __asan_report_load8();
      v14 = operator<<(v13, (const Player *)create_entity_info->rot_);
      v15 = common::milog::MiLogStream::operator<<<char [11],(char *[11])0>(v14, (const char (*)[11])" scene_id:");
      v16 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v15, (const unsigned int *)(v5 + 32));
      v17 = common::milog::MiLogStream::operator<<<char [18],(char *[18])0>(
              v16,
              (const char (*)[18])" origin_scene_id:");
      common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v17, (const unsigned int *)(v5 + 48));
      common::milog::MiLogStream::~MiLogStream(&v200);
      std::shared_ptr<Entity>::shared_ptr((std::shared_ptr<Entity> *const)this, 0LL);
      goto LABEL_162;
    }
    *(_QWORD *)(v5 + 96) = 0LL;
    *(_QWORD *)(v5 + 104) = 0LL;
    if ( *(_BYTE *)(((unsigned __int64)&scene_config_ptr->type >> 3) + 0x7FFF8000) != 0
      && (char)((((_BYTE)scene_config_ptr + 12) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&scene_config_ptr->type >> 3)
                                                                      + 0x7FFF8000) )
    {
      __asan_report_load4(&scene_config_ptr->type);
    }
    if ( scene_config_ptr->type == SCENE_DUNGEON )
    {
      PlayerSceneComp::getCurScene((const PlayerSceneComp *const)(v5 + 224));
      if ( std::operator==<Scene>((const std::shared_ptr<Scene> *)(v5 + 224), 0LL) )
      {
        common::milog::MiLogStream::create(
          &v200,
          &common::milog::MiLogDefault::default_log_obj_,
          3u,
          "./src/scene/player_scene_comp.cpp",
          "createEntityFromClient",
          2168);
        v18 = common::milog::MiLogStream::operator<<<char [19],(char *[19])0>(
                &v200,
                (const char (*)[19])"findCurScene fails");
        if ( *(_BYTE *)(((unsigned __int64)&create_entity_info->rot_ >> 3) + 0x7FFF8000) )
          __asan_report_load8();
        operator<<(v18, (const Player *)create_entity_info->rot_);
        common::milog::MiLogStream::~MiLogStream(&v200);
        std::shared_ptr<Entity>::shared_ptr((std::shared_ptr<Entity> *const)this, 0LL);
        v19 = 0;
      }
      else
      {
        v20 = std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v5 + 224));
        if ( Scene::getSceneId(v20) == *(_DWORD *)(v5 + 32) )
        {
          std::shared_ptr<Scene>::operator=(
            (std::shared_ptr<Scene> *const)(v5 + 96),
            (const std::shared_ptr<Scene> *)(v5 + 224));
          v19 = 1;
        }
        else
        {
          common::milog::MiLogStream::create(
            &v200,
            &common::milog::MiLogDefault::default_log_obj_,
            3u,
            "./src/scene/player_scene_comp.cpp",
            "createEntityFromClient",
            2173);
          v21 = common::milog::MiLogStream::operator<<<char [14],(char *[14])0>(
                  &v200,
                  (const char (*)[14])"origin scene:");
          v22 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                  v21,
                  (const unsigned int *)(v5 + 48));
          v23 = common::milog::MiLogStream::operator<<<char [15],(char *[15])0>(
                  v22,
                  (const char (*)[15])" target scene:");
          v24 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                  v23,
                  (const unsigned int *)(v5 + 32));
          v25 = common::milog::MiLogStream::operator<<<char [62],(char *[62])0>(v24, (const char (*)[62])off_25180D80);
          v26 = std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v5 + 224));
          val = Scene::getSceneId(v26);
          v27 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v25, &val);
          if ( *(_BYTE *)(((unsigned __int64)&create_entity_info->rot_ >> 3) + 0x7FFF8000) )
            __asan_report_load8();
          operator<<(v27, (const Player *)create_entity_info->rot_);
          common::milog::MiLogStream::~MiLogStream(&v200);
          std::shared_ptr<Entity>::shared_ptr((std::shared_ptr<Entity> *const)this, 0LL);
          v19 = 0;
        }
      }
      std::shared_ptr<Scene>::~shared_ptr((std::shared_ptr<Scene> *const)(v5 + 224));
      if ( v19 != 1 )
        goto LABEL_161;
    }
    else
    {
      if ( *(_BYTE *)(((unsigned __int64)&scene_config_ptr->type >> 3) + 0x7FFF8000) != 0
        && (char)((((_BYTE)scene_config_ptr + 12) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&scene_config_ptr->type >> 3)
                                                                        + 0x7FFF8000) )
      {
        __asan_report_load4(&scene_config_ptr->type);
      }
      if ( !SceneExcelConfigMgr::isPlayerScene(scene_config_ptr->type) )
      {
        common::milog::MiLogStream::create(
          &v200,
          &common::milog::MiLogDefault::default_log_obj_,
          4u,
          "./src/scene/player_scene_comp.cpp",
          "createEntityFromClient",
          2189);
        v31 = common::milog::MiLogStream::operator<<<char [11],(char *[11])0>(&v200, (const char (*)[11])"scene type");
        v32 = common::milog::MiLogStream::operator<<<data::SceneType,(data::SceneType*)0>(v31, &scene_config_ptr->type);
        v33 = common::milog::MiLogStream::operator<<<char [11],(char *[11])0>(v32, (const char (*)[11])" scene_id:");
        common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v33, (const unsigned int *)(v5 + 32));
        common::milog::MiLogStream::~MiLogStream(&v200);
        std::shared_ptr<Entity>::shared_ptr((std::shared_ptr<Entity> *const)this, 0LL);
LABEL_161:
        std::shared_ptr<Scene>::~shared_ptr((std::shared_ptr<Scene> *const)(v5 + 96));
        goto LABEL_162;
      }
      PlayerSceneComp::getPersonalScene((PlayerSceneComp *const)(v5 + 160), (uint32_t)create_entity_info);
      std::shared_ptr<Scene>::operator=((std::shared_ptr<Scene> *const)(v5 + 96), (std::shared_ptr<Scene> *)(v5 + 160));
      std::shared_ptr<Scene>::~shared_ptr((std::shared_ptr<Scene> *const)(v5 + 160));
      if ( std::operator==<Scene>((const std::shared_ptr<Scene> *)(v5 + 96), 0LL) )
      {
        common::milog::MiLogStream::create(
          &v200,
          &common::milog::MiLogDefault::default_log_obj_,
          3u,
          "./src/scene/player_scene_comp.cpp",
          "createEntityFromClient",
          2183);
        v28 = common::milog::MiLogStream::operator<<<char [23],(char *[23])0>(
                &v200,
                (const char (*)[23])"getPersonalScene fails");
        if ( *(_BYTE *)(((unsigned __int64)&create_entity_info->rot_ >> 3) + 0x7FFF8000) )
          __asan_report_load8();
        v29 = operator<<(v28, (const Player *)create_entity_info->rot_);
        v30 = common::milog::MiLogStream::operator<<<char [11],(char *[11])0>(v29, (const char (*)[11])" scene_id:");
        common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v30, (const unsigned int *)(v5 + 32));
        common::milog::MiLogStream::~MiLogStream(&v200);
        std::shared_ptr<Entity>::shared_ptr((std::shared_ptr<Entity> *const)this, 0LL);
        goto LABEL_161;
      }
    }
    is_client_created = 1;
    *(_QWORD *)(v5 + 128) = 0LL;
    *(_QWORD *)(v5 + 136) = 0LL;
    if ( proto::CreateEntityInfo::npc_id(quest_id) )
    {
      NpcParam::NpcParam((NpcParam *const)(v5 + 320));
      *(_DWORD *)(v5 + 320) = proto::CreateEntityInfo::npc_id(quest_id);
      *(_DWORD *)(v5 + 332) = proto::CreateEntityInfo::room_id(quest_id);
      v34 = proto::CreateEntityInfo::pos(quest_id);
      Vector3::Vector3(&v198, v34);
      *(Vector3 *)(v5 + 340) = v198;
      v35 = proto::CreateEntityInfo::rot(quest_id);
      Vector3::Vector3(&v198, v35);
      *(Vector3 *)(v5 + 352) = v198;
      v36 = std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v5 + 96));
      *(_DWORD *)(v5 + 328) = Scene::genNewEntityId(v36, PROT_ENTITY_NPC);
      *(_DWORD *)(v5 + 336) = *(_DWORD *)(v5 + 80);
      v37 = proto::CreateEntityInfo::npc_id(quest_id);
      PlayerSceneComp::findNpcEntity((PlayerSceneComp *const)(v5 + 192), (uint32_t)create_entity_info, v37);
      room_id = 0;
      v38 = 0;
      if ( std::operator!=<Npc>((const std::shared_ptr<Npc> *)(v5 + 192), 0LL) )
      {
        std::__shared_ptr_access<Npc,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Npc,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v5 + 192));
        Entity::getScene((const Entity *const)(v5 + 224));
        room_id = 1;
        if ( std::operator==<Scene,Scene>(
               (const std::shared_ptr<Scene> *)(v5 + 224),
               (const std::shared_ptr<Scene> *)(v5 + 96)) )
        {
          v38 = 1;
        }
      }
      if ( room_id )
        std::shared_ptr<Scene>::~shared_ptr((std::shared_ptr<Scene> *const)(v5 + 224));
      if ( v38 )
      {
        common::milog::MiLogStream::create(
          &v200,
          &common::milog::MiLogDefault::default_log_obj_,
          1u,
          "./src/scene/player_scene_comp.cpp",
          "createEntityFromClient",
          2207);
        v39 = common::milog::MiLogStream::operator<<<char [42],(char *[42])0>(
                &v200,
                (const char (*)[42])"[NPC_MOVE] SceneCreateNpc npc exist, uid:");
        if ( *(_BYTE *)(((unsigned __int64)&create_entity_info->rot_ >> 3) + 0x7FFF8000) )
          __asan_report_load8();
        Uid = Player::getUid((const Player *const)create_entity_info->rot_);
        v40 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v39, &Uid);
        v41 = common::milog::MiLogStream::operator<<<char [9],(char *[9])0>(v40, (const char (*)[9])" npc_id:");
        v42 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                v41,
                (const unsigned int *)(v5 + 320));
        v43 = common::milog::MiLogStream::operator<<<char [18],(char *[18])0>(
                v42,
                (const char (*)[18])" parent_quest_id:");
        v44 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                v43,
                (const unsigned int *)(v5 + 80));
        v45 = common::milog::MiLogStream::operator<<<char [11],(char *[11])0>(v44, (const char (*)[11])"entity id:");
        v46 = std::__shared_ptr_access<Npc,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Npc,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v5 + 192));
        val = Entity::getEntityId((const Entity *const)v46);
        common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v45, &val);
        common::milog::MiLogStream::~MiLogStream(&v200);
        v47 = (Entity *)std::__shared_ptr_access<Npc,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Npc,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v5 + 192));
        Entity::setRotation(v47, (const Vector3 *)(v5 + 352));
        v48 = std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v5 + 96));
        v49 = (Entity *)std::__shared_ptr_access<Npc,(__gnu_cxx::_Lock_policy)2,false,false>::operator*((const std::__shared_ptr_access<Npc,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v5 + 192));
        if ( Scene::entityMoveTo(v48, v49, (const Vector3 *)(v5 + 340)) )
        {
          common::milog::MiLogStream::create(
            &v200,
            &common::milog::MiLogDefault::default_log_obj_,
            3u,
            "./src/scene/player_scene_comp.cpp",
            "createEntityFromClient",
            2212);
          v50 = common::milog::MiLogStream::operator<<<char [21],(char *[21])0>(
                  &v200,
                  (const char (*)[21])"MoveNpc failed, uid:");
          if ( *(_BYTE *)(((unsigned __int64)&create_entity_info->rot_ >> 3) + 0x7FFF8000) )
            __asan_report_load8();
          val = Player::getUid((const Player *const)create_entity_info->rot_);
          v51 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v50, &val);
          v52 = common::milog::MiLogStream::operator<<<char [9],(char *[9])0>(v51, (const char (*)[9])" npc_id:");
          v53 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                  v52,
                  (const unsigned int *)(v5 + 320));
          v54 = common::milog::MiLogStream::operator<<<char [6],(char *[6])0>(v53, (const char (*)[6])" pos:");
          operator<<(v54, (const Vector3 *)(v5 + 340));
          common::milog::MiLogStream::~MiLogStream(&v200);
          std::shared_ptr<Entity>::shared_ptr((std::shared_ptr<Entity> *const)this, 0LL);
          v55 = 0;
LABEL_77:
          std::shared_ptr<Npc>::~shared_ptr((std::shared_ptr<Npc> *const)(v5 + 192));
          NpcParam::~NpcParam((NpcParam *const)(v5 + 320));
          if ( v55 == 1 )
          {
LABEL_153:
            if ( std::operator==<Entity>((const std::shared_ptr<Entity> *)(v5 + 128), 0LL) )
            {
              common::milog::MiLogStream::create(
                &v200,
                &common::milog::MiLogDefault::default_log_obj_,
                3u,
                "./src/scene/player_scene_comp.cpp",
                "createEntityFromClient",
                2376);
              v181 = common::milog::MiLogStream::operator<<<char [19],(char *[19])0>(
                       &v200,
                       (const char (*)[19])"entity_ptr is null");
              if ( *(_BYTE *)(((unsigned __int64)&create_entity_info->rot_ >> 3) + 0x7FFF8000) )
                __asan_report_load8();
              operator<<(v181, (const Player *)create_entity_info->rot_);
              common::milog::MiLogStream::~MiLogStream(&v200);
              std::shared_ptr<Entity>::shared_ptr((std::shared_ptr<Entity> *const)this, 0LL);
            }
            else
            {
              if ( is_client_created )
              {
                v182 = std::__shared_ptr_access<Entity,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Entity,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v5 + 128));
                Entity::setIsClientCreated(v182, 1);
              }
              std::shared_ptr<Entity>::shared_ptr(
                (std::shared_ptr<Entity> *const)this,
                (std::shared_ptr<Entity> *)(v5 + 128));
            }
          }
LABEL_160:
          std::shared_ptr<Entity>::~shared_ptr((std::shared_ptr<Entity> *const)(v5 + 128));
          goto LABEL_161;
        }
        is_client_created = 0;
        v56 = std::__shared_ptr_access<Npc,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Npc,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v5 + 192));
        RoomId = Entity::getRoomId((const Entity *const)v56);
        if ( RoomId != proto::CreateEntityInfo::room_id(quest_id) )
        {
          v58 = std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v5 + 96));
          SceneType = Scene::getSceneType(v58);
          if ( SceneExcelConfigMgr::isRoomScene(SceneType) )
          {
            std::dynamic_pointer_cast<RoomScene,Scene>((const std::shared_ptr<Scene> *)(v5 + 224));
            if ( std::operator!=<RoomScene>((const std::shared_ptr<RoomScene> *)(v5 + 224), 0LL) )
            {
              v61 = std::__shared_ptr_access<RoomScene,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<RoomScene,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v5 + 224));
              room_ida = proto::CreateEntityInfo::room_id(quest_id);
              v62 = (Entity *)std::__shared_ptr_access<Npc,(__gnu_cxx::_Lock_policy)2,false,false>::operator*((const std::__shared_ptr_access<Npc,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v5 + 192));
              RoomScene::entityMoveRoom(v61, v62, room_ida);
            }
            std::shared_ptr<RoomScene>::~shared_ptr((std::shared_ptr<RoomScene> *const)(v5 + 224));
          }
        }
      }
      else
      {
        if ( std::operator!=<Npc>((const std::shared_ptr<Npc> *)(v5 + 192), 0LL) )
        {
          v63 = (unsigned __int64)std::__shared_ptr_access<Npc,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Npc,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v5 + 192));
          if ( *(_BYTE *)((v63 >> 3) + 0x7FFF8000) )
            v63 = __asan_report_load8();
          v64 = *(_QWORD *)v63 + 128LL;
          if ( *(_BYTE *)((v64 >> 3) + 0x7FFF8000) )
            v63 = __asan_report_load8();
          (*(void (__fastcall **)(unsigned __int64, VisionContext *))v64)(v63, &VisionContext::miss_context);
        }
        EntityMgr::createNpc((const NpcParam *)(v5 + 224));
        std::shared_ptr<Npc>::operator=((std::shared_ptr<Npc> *const)(v5 + 192), (std::shared_ptr<Npc> *)(v5 + 224));
        std::shared_ptr<Npc>::~shared_ptr((std::shared_ptr<Npc> *const)(v5 + 224));
        if ( std::operator==<Npc>((const std::shared_ptr<Npc> *)(v5 + 192), 0LL) )
        {
          common::milog::MiLogStream::create(
            &v200,
            &common::milog::MiLogDefault::default_log_obj_,
            3u,
            "./src/scene/player_scene_comp.cpp",
            "createEntityFromClient",
            2237);
          v65 = common::milog::MiLogStream::operator<<<char [33],(char *[33])0>(
                  &v200,
                  (const char (*)[33])"createMonster fails, monster_id:");
          common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v65, (const unsigned int *)(v5 + 320));
          common::milog::MiLogStream::~MiLogStream(&v200);
          std::shared_ptr<Entity>::shared_ptr((std::shared_ptr<Entity> *const)this, 0LL);
          v55 = 0;
          goto LABEL_77;
        }
        v66 = std::__shared_ptr_access<Npc,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Npc,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v5 + 192));
        if ( *(_BYTE *)(((unsigned __int64)v66 >> 3) + 0x7FFF8000) )
          __asan_report_load8();
        v67 = (unsigned __int64)(v66->_vptr_DescribalBase + 7);
        if ( *(_BYTE *)((v67 >> 3) + 0x7FFF8000) )
          v67 = __asan_report_load8();
        room_idb = *(void (__fastcall **)(std::__shared_ptr_access<Npc,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *, std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *, VisionContext *))v67;
        v68 = std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::operator*((const std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v5 + 96));
        room_idb(v66, v68, &VisionContext::meet_context);
        common::milog::MiLogStream::create(
          &v200,
          &common::milog::MiLogDefault::default_log_obj_,
          1u,
          "./src/scene/player_scene_comp.cpp",
          "createEntityFromClient",
          2241);
        v69 = common::milog::MiLogStream::operator<<<char [32],(char *[32])0>(
                &v200,
                (const char (*)[32])"[NPC_MOVE]  npc not exist, uid:");
        if ( *(_BYTE *)(((unsigned __int64)&create_entity_info->rot_ >> 3) + 0x7FFF8000) )
          __asan_report_load8();
        Uid = Player::getUid((const Player *const)create_entity_info->rot_);
        v70 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v69, &Uid);
        v71 = common::milog::MiLogStream::operator<<<char [9],(char *[9])0>(v70, (const char (*)[9])" npc_id:");
        v72 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                v71,
                (const unsigned int *)(v5 + 320));
        v73 = common::milog::MiLogStream::operator<<<char [18],(char *[18])0>(
                v72,
                (const char (*)[18])" parent_quest_id:");
        v74 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                v73,
                (const unsigned int *)(v5 + 80));
        v75 = common::milog::MiLogStream::operator<<<char [12],(char *[12])0>(v74, (const char (*)[12])" entity id:");
        v76 = std::__shared_ptr_access<Npc,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Npc,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v5 + 192));
        val = Entity::getEntityId((const Entity *const)v76);
        common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v75, &val);
        common::milog::MiLogStream::~MiLogStream(&v200);
      }
      std::shared_ptr<Entity>::operator=<Npc>(
        (std::shared_ptr<Entity> *const)(v5 + 128),
        (const std::shared_ptr<Npc> *)(v5 + 192));
      v55 = 1;
      goto LABEL_77;
    }
    if ( *(_BYTE *)(((unsigned __int64)&create_entity_info->rot_ >> 3) + 0x7FFF8000) )
      __asan_report_load8();
    QuestComp = Player::getQuestComp((Player *const)create_entity_info->rot_);
    parent_quest_config_ptr = PlayerQuestComp::findParentQuestScriptConfig(QuestComp, *(_DWORD *)(v5 + 80));
    if ( !parent_quest_config_ptr )
    {
      common::tools::StringStream<common::tools::FixedBuffer<4096>>::StringStream((common::tools::StringStream<common::tools::FixedBuffer<4096> > *const)(v5 + 224));
      v78 = common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(
              (common::tools::StringStream<common::tools::FixedBuffer<4096> > *const)(v5 + 224),
              aQuestcreateent);
      v79 = common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(v78, *(_DWORD *)(v5 + 80));
      common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(v79, asc_251810E0);
      if ( *(_BYTE *)(((unsigned __int64)&create_entity_info->rot_ >> 3) + 0x7FFF8000) )
        __asan_report_load8();
      rot = (Player *)create_entity_info->rot_;
      common::tools::StringStream<common::tools::FixedBuffer<4096>>::str[abi:cxx11](
        (std::string *)&v200,
        (common::tools::StringStream<common::tools::FixedBuffer<4096> > *const)(v5 + 224));
      Player::notifyGMServerLog(rot, SERVER_LOG_NONE, LOG_LEVEL_ERROR_0, (const std::string *)&v200);
      std::string::~string(&v200);
      common::milog::MiLogStream::create(
        &v200,
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/scene/player_scene_comp.cpp",
        "createEntityFromClient",
        2254);
      v81 = common::milog::MiLogStream::operator<<<char [51],(char *[51])0>(
              &v200,
              (const char (*)[51])"findParentQuestScriptConfig fail, parent_quest_id:");
      v82 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v81, (const unsigned int *)(v5 + 80));
      v83 = common::milog::MiLogStream::operator<<<char [11],(char *[11])0>(v82, (const char (*)[11])" quest_id:");
      common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v83, (const unsigned int *)(v5 + 64));
      common::milog::MiLogStream::~MiLogStream(&v200);
      std::shared_ptr<Entity>::shared_ptr((std::shared_ptr<Entity> *const)this, 0LL);
      common::tools::StringStream<common::tools::FixedBuffer<4096>>::~StringStream((common::tools::StringStream<common::tools::FixedBuffer<4096> > *const)(v5 + 224));
      goto LABEL_160;
    }
    if ( *(_BYTE *)(((unsigned __int64)&create_entity_info->rot_ >> 3) + 0x7FFF8000) )
      __asan_report_load8();
    v84 = Player::getQuestComp((Player *const)create_entity_info->rot_);
    PlayerQuestComp::findParentQuest((const PlayerQuestComp *const)(v5 + 160), (__int64)v84, *(_DWORD *)(v5 + 80));
    if ( std::operator==<ParentQuest>((const std::shared_ptr<ParentQuest> *)(v5 + 160), 0LL)
      || (v85 = std::__shared_ptr_access<ParentQuest,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<ParentQuest,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v5 + 160)),
          ParentQuest::getParentQuestState(v85)) )
    {
      common::tools::StringStream<common::tools::FixedBuffer<4096>>::StringStream((common::tools::StringStream<common::tools::FixedBuffer<4096> > *const)(v5 + 224));
      v87 = common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(
              (common::tools::StringStream<common::tools::FixedBuffer<4096> > *const)(v5 + 224),
              aQuestcreateent_0);
      v88 = common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(v87, *(_DWORD *)(v5 + 80));
      common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(v88, &byte_25181200);
      if ( *(_BYTE *)(((unsigned __int64)&create_entity_info->rot_ >> 3) + 0x7FFF8000) )
        __asan_report_load8();
      v89 = (Player *)create_entity_info->rot_;
      common::tools::StringStream<common::tools::FixedBuffer<4096>>::str[abi:cxx11](
        (std::string *)&v200,
        (common::tools::StringStream<common::tools::FixedBuffer<4096> > *const)(v5 + 224));
      Player::notifyGMServerLog(v89, SERVER_LOG_NONE, LOG_LEVEL_ERROR_0, (const std::string *)&v200);
      std::string::~string(&v200);
      if ( std::operator==<ParentQuest>((const std::shared_ptr<ParentQuest> *)(v5 + 160), 0LL) )
      {
        common::milog::MiLogStream::create(
          &v200,
          &common::milog::MiLogDefault::default_log_obj_,
          3u,
          "./src/scene/player_scene_comp.cpp",
          "createEntityFromClient",
          2265);
        v90 = common::milog::MiLogStream::operator<<<char [41],(char *[41])0>(
                &v200,
                (const char (*)[41])"findParentQuest failed, parent_quest_id:");
      }
      else
      {
        common::milog::MiLogStream::create(
          &v200,
          &common::milog::MiLogDefault::default_log_obj_,
          1u,
          "./src/scene/player_scene_comp.cpp",
          "createEntityFromClient",
          2270);
        v93 = common::milog::MiLogStream::operator<<<char [31],(char *[31])0>(
                &v200,
                (const char (*)[31])"getParentQuestState not valid:");
        v94 = std::__shared_ptr_access<ParentQuest,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<ParentQuest,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v5 + 160));
        val = ParentQuest::getParentQuestState(v94);
        v95 = common::milog::MiLogStream::operator<<<data::ParentQuestState,(data::ParentQuestState*)0>(
                v93,
                (const data::ParentQuestState *)&val);
        v90 = common::milog::MiLogStream::operator<<<char [18],(char *[18])0>(
                v95,
                (const char (*)[18])" parent_quest_id:");
      }
      v91 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v90, (const unsigned int *)(v5 + 80));
      v92 = common::milog::MiLogStream::operator<<<char [11],(char *[11])0>(v91, (const char (*)[11])" quest_id:");
      common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v92, (const unsigned int *)(v5 + 64));
      common::milog::MiLogStream::~MiLogStream(&v200);
      std::shared_ptr<Entity>::shared_ptr((std::shared_ptr<Entity> *const)this, 0LL);
      common::tools::StringStream<common::tools::FixedBuffer<4096>>::~StringStream((common::tools::StringStream<common::tools::FixedBuffer<4096> > *const)(v5 + 224));
      v96 = 0;
LABEL_152:
      std::shared_ptr<ParentQuest>::~shared_ptr((std::shared_ptr<ParentQuest> *const)(v5 + 160));
      if ( v96 == 1 )
        goto LABEL_153;
      goto LABEL_160;
    }
    if ( proto::CreateEntityInfo::monster_id(quest_id) )
    {
      v97 = proto::CreateEntityInfo::monster_id(quest_id);
      if ( !ParentQuestScriptConfig::findMonsterConfig(parent_quest_config_ptr, *(_DWORD *)(v5 + 64), v97) )
      {
        common::tools::StringStream<common::tools::FixedBuffer<4096>>::StringStream((common::tools::StringStream<common::tools::FixedBuffer<4096> > *const)(v5 + 224));
        v98 = common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(
                (common::tools::StringStream<common::tools::FixedBuffer<4096> > *const)(v5 + 224),
                aQuestcreateent_1);
        v99 = common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(v98, *(_DWORD *)(v5 + 64));
        v100 = common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(v99, ",monster_id:");
        v101 = proto::CreateEntityInfo::monster_id(quest_id);
        v102 = common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(v100, v101);
        common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(v102, asc_251810E0);
        if ( *(_BYTE *)(((unsigned __int64)&create_entity_info->rot_ >> 3) + 0x7FFF8000) )
          __asan_report_load8();
        v103 = (Player *)create_entity_info->rot_;
        common::tools::StringStream<common::tools::FixedBuffer<4096>>::str[abi:cxx11](
          (std::string *)&v200,
          (common::tools::StringStream<common::tools::FixedBuffer<4096> > *const)(v5 + 224));
        Player::notifyGMServerLog(v103, SERVER_LOG_NONE, LOG_LEVEL_ERROR_0, (const std::string *)&v200);
        std::string::~string(&v200);
        common::milog::MiLogStream::create(
          &v200,
          &common::milog::MiLogDefault::default_log_obj_,
          3u,
          "./src/scene/player_scene_comp.cpp",
          "createEntityFromClient",
          2281);
        v104 = common::milog::MiLogStream::operator<<<char [38],(char *[38])0>(
                 &v200,
                 (const char (*)[38])"findMonsterConfig failed, monster_id:");
        val = proto::CreateEntityInfo::monster_id(quest_id);
        v105 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v104, &val);
        v106 = common::milog::MiLogStream::operator<<<char [18],(char *[18])0>(
                 v105,
                 (const char (*)[18])" parent_quest_id:");
        v107 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                 v106,
                 (const unsigned int *)(v5 + 80));
        v108 = common::milog::MiLogStream::operator<<<char [11],(char *[11])0>(v107, (const char (*)[11])" quest_id:");
        common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v108, (const unsigned int *)(v5 + 64));
        common::milog::MiLogStream::~MiLogStream(&v200);
        std::shared_ptr<Entity>::shared_ptr((std::shared_ptr<Entity> *const)this, 0LL);
        common::tools::StringStream<common::tools::FixedBuffer<4096>>::~StringStream((common::tools::StringStream<common::tools::FixedBuffer<4096> > *const)(v5 + 224));
LABEL_111:
        v96 = 0;
        goto LABEL_152;
      }
      MonsterParam::MonsterParam((MonsterParam *const)(v5 + 560));
      *(_DWORD *)(v5 + 560) = proto::CreateEntityInfo::monster_id(quest_id);
      *(_DWORD *)(v5 + 596) = proto::CreateEntityInfo::level(quest_id);
      v109 = proto::CreateEntityInfo::pos(quest_id);
      Vector3::Vector3(&v198, v109);
      *(Vector3 *)(v5 + 572) = v198;
      v110 = proto::CreateEntityInfo::rot(quest_id);
      Vector3::Vector3(&v198, v110);
      *(Vector3 *)(v5 + 584) = v198;
      *(_DWORD *)(v5 + 720) = proto::CreateEntityInfo::room_id(quest_id);
      v111 = std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v5 + 96));
      *(_DWORD *)(v5 + 568) = Scene::genNewEntityId(v111, PROT_ENTITY_MONSTER);
      EntityMgr::createMonster((const MonsterParam *)(v5 + 224));
      if ( std::operator==<Monster>((const std::shared_ptr<Monster> *)(v5 + 224), 0LL) )
      {
        common::milog::MiLogStream::create(
          &v200,
          &common::milog::MiLogDefault::default_log_obj_,
          3u,
          "./src/scene/player_scene_comp.cpp",
          "createEntityFromClient",
          2294);
        v112 = common::milog::MiLogStream::operator<<<char [33],(char *[33])0>(
                 &v200,
                 (const char (*)[33])"createMonster fails, monster_id:");
        common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v112, (const unsigned int *)(v5 + 560));
        common::milog::MiLogStream::~MiLogStream(&v200);
        std::shared_ptr<Entity>::shared_ptr((std::shared_ptr<Entity> *const)this, 0LL);
        v113 = 0;
      }
      else
      {
        v114 = std::__shared_ptr_access<Monster,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Monster,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v5 + 224));
        if ( *(_BYTE *)(((unsigned __int64)v114 >> 3) + 0x7FFF8000) )
          __asan_report_load8();
        v115 = *(_QWORD *)v114->baseclass_0 + 56LL;
        if ( *(_BYTE *)((v115 >> 3) + 0x7FFF8000) )
          v115 = __asan_report_load8();
        room_idc = *(void (__fastcall **)(std::__shared_ptr_access<Monster,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *, std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *, VisionContext *))v115;
        v116 = std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::operator*((const std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v5 + 96));
        room_idc(v114, v116, &VisionContext::meet_context);
        std::shared_ptr<Entity>::operator=<Monster>(
          (std::shared_ptr<Entity> *const)(v5 + 128),
          (const std::shared_ptr<Monster> *)(v5 + 224));
        v113 = 1;
      }
      std::shared_ptr<Monster>::~shared_ptr((std::shared_ptr<Monster> *const)(v5 + 224));
      MonsterParam::~MonsterParam((MonsterParam *const)(v5 + 560));
      if ( v113 != 1 )
        goto LABEL_111;
    }
    else
    {
      if ( proto::CreateEntityInfo::gadget_id(quest_id) )
      {
        v117 = proto::CreateEntityInfo::gadget(quest_id);
        v118 = proto::CreateGadgetInfo::chest(v117);
        v119 = proto::CreateGadgetInfo_Chest::chest_drop_id(v118);
        v120 = proto::CreateEntityInfo::gadget_id(quest_id);
        if ( ParentQuestScriptConfig::findGadgetConfig(parent_quest_config_ptr, *(_DWORD *)(v5 + 64), v120, v119) )
        {
          GadgetParam::GadgetParam((GadgetParam *const)(v5 + 976));
          *(_DWORD *)(v5 + 976) = proto::CreateEntityInfo::gadget_id(quest_id);
          *(_DWORD *)(v5 + 1012) = proto::CreateEntityInfo::level(quest_id);
          v137 = proto::CreateEntityInfo::pos(quest_id);
          Vector3::Vector3(&v198, v137);
          *(Vector3 *)(v5 + 988) = v198;
          v138 = proto::CreateEntityInfo::rot(quest_id);
          Vector3::Vector3(&v198, v138);
          *(Vector3 *)(v5 + 1000) = v198;
          v139 = proto::CreateEntityInfo::gadget(quest_id);
          *(_DWORD *)(v5 + 1068) = proto::CreateGadgetInfo::born_type(v139);
          v140 = proto::CreateEntityInfo::gadget(quest_id);
          v141 = proto::CreateGadgetInfo::chest(v140);
          *(_DWORD *)(v5 + 1196) = proto::CreateGadgetInfo_Chest::chest_drop_id(v141);
          v142 = proto::CreateEntityInfo::gadget(quest_id);
          v143 = proto::CreateGadgetInfo::chest(v142);
          *(_BYTE *)(v5 + 1200) = proto::CreateGadgetInfo_Chest::is_show_cutscene(v143);
          *(_DWORD *)(v5 + 1072) = proto::CreateEntityInfo::room_id(quest_id);
          v144 = std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v5 + 96));
          *(_DWORD *)(v5 + 984) = Scene::genNewEntityId(v144, PROT_ENTITY_GADGET);
          *(_BYTE *)(v5 + 1085) = 1;
          *(_DWORD *)(v5 + 1184) = 2;
          *(_DWORD *)(v5 + 1188) = *(_DWORD *)(v5 + 64);
          if ( *(_BYTE *)(((unsigned __int64)&create_entity_info->rot_ >> 3) + 0x7FFF8000) )
            __asan_report_load8();
          toThisPtr<Player>((Player *)(v5 + 192));
          std::shared_ptr<Player>::operator=(
            (std::shared_ptr<Player> *const)(v5 + 1168),
            (std::shared_ptr<Player> *)(v5 + 192));
          std::shared_ptr<Player>::~shared_ptr((std::shared_ptr<Player> *const)(v5 + 192));
          EntityMgr::createGadget((const GadgetParam *)(v5 + 224));
          if ( std::operator==<Gadget>((const std::shared_ptr<Gadget> *)(v5 + 224), 0LL) )
          {
            common::milog::MiLogStream::create(
              &v200,
              &common::milog::MiLogDefault::default_log_obj_,
              3u,
              "./src/scene/player_scene_comp.cpp",
              "createEntityFromClient",
              2330);
            v145 = common::milog::MiLogStream::operator<<<char [31],(char *[31])0>(
                     &v200,
                     (const char (*)[31])"createGadget fails, gadget_id:");
            common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
              v145,
              (const unsigned int *)(v5 + 976));
            common::milog::MiLogStream::~MiLogStream(&v200);
            std::shared_ptr<Entity>::shared_ptr((std::shared_ptr<Entity> *const)this, 0LL);
            v146 = 0;
          }
          else
          {
            v147 = std::__shared_ptr_access<Gadget,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Gadget,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v5 + 224));
            if ( *(_BYTE *)(((unsigned __int64)&create_entity_info->rot_ >> 3) + 0x7FFF8000) )
              __asan_report_load8();
            v148 = Player::getUid((const Player *const)create_entity_info->rot_);
            Gadget::setMasterUid(v147, v148);
            v149 = std::__shared_ptr_access<Gadget,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Gadget,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v5 + 224));
            if ( *(_BYTE *)(((unsigned __int64)v149 >> 3) + 0x7FFF8000) )
              __asan_report_load8();
            v150 = *(_QWORD *)v149->baseclass_0 + 56LL;
            if ( *(_BYTE *)((v150 >> 3) + 0x7FFF8000) )
              v150 = __asan_report_load8();
            room_idd = *(void (__fastcall **)(std::__shared_ptr_access<Gadget,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *, std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *, VisionContext *))v150;
            v151 = std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::operator*((const std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v5 + 96));
            room_idd(v149, v151, &VisionContext::meet_context);
            std::shared_ptr<Entity>::operator=<Gadget>(
              (std::shared_ptr<Entity> *const)(v5 + 128),
              (const std::shared_ptr<Gadget> *)(v5 + 224));
            v146 = 1;
          }
          std::shared_ptr<Gadget>::~shared_ptr((std::shared_ptr<Gadget> *const)(v5 + 224));
          GadgetParam::~GadgetParam((GadgetParam *const)(v5 + 976));
          if ( v146 == 1 )
            goto LABEL_151;
        }
        else
        {
          common::tools::StringStream<common::tools::FixedBuffer<4096>>::StringStream((common::tools::StringStream<common::tools::FixedBuffer<4096> > *const)(v5 + 224));
          v121 = common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(
                   (common::tools::StringStream<common::tools::FixedBuffer<4096> > *const)(v5 + 224),
                   aQuestcreateent_2);
          v122 = common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(v121, *(_DWORD *)(v5 + 64));
          v123 = common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(v122, ",gadget_id:");
          v124 = proto::CreateEntityInfo::gadget_id(quest_id);
          v125 = common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(v123, v124);
          v126 = common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(v125, aChestDropId_1);
          v127 = proto::CreateEntityInfo::gadget(quest_id);
          v128 = proto::CreateGadgetInfo::chest(v127);
          v129 = proto::CreateGadgetInfo_Chest::chest_drop_id(v128);
          v130 = common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(v126, v129);
          common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(v130, asc_251810E0);
          if ( *(_BYTE *)(((unsigned __int64)&create_entity_info->rot_ >> 3) + 0x7FFF8000) )
            __asan_report_load8();
          v131 = (Player *)create_entity_info->rot_;
          common::tools::StringStream<common::tools::FixedBuffer<4096>>::str[abi:cxx11](
            (std::string *)&v200,
            (common::tools::StringStream<common::tools::FixedBuffer<4096> > *const)(v5 + 224));
          Player::notifyGMServerLog(v131, SERVER_LOG_NONE, LOG_LEVEL_ERROR_0, (const std::string *)&v200);
          std::string::~string(&v200);
          common::milog::MiLogStream::create(
            &v200,
            &common::milog::MiLogDefault::default_log_obj_,
            3u,
            "./src/scene/player_scene_comp.cpp",
            "createEntityFromClient",
            2310);
          v132 = common::milog::MiLogStream::operator<<<char [36],(char *[36])0>(
                   &v200,
                   (const char (*)[36])"findGadgetConfig failed, gadget_id:");
          val = proto::CreateEntityInfo::gadget_id(quest_id);
          v133 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v132, &val);
          v134 = common::milog::MiLogStream::operator<<<char [18],(char *[18])0>(
                   v133,
                   (const char (*)[18])" parent_quest_id:");
          v135 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                   v134,
                   (const unsigned int *)(v5 + 80));
          v136 = common::milog::MiLogStream::operator<<<char [11],(char *[11])0>(v135, (const char (*)[11])" quest_id:");
          common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v136, (const unsigned int *)(v5 + 64));
          common::milog::MiLogStream::~MiLogStream(&v200);
          std::shared_ptr<Entity>::shared_ptr((std::shared_ptr<Entity> *const)this, 0LL);
          common::tools::StringStream<common::tools::FixedBuffer<4096>>::~StringStream((common::tools::StringStream<common::tools::FixedBuffer<4096> > *const)(v5 + 224));
        }
        v96 = 0;
        goto LABEL_152;
      }
      if ( proto::CreateEntityInfo::item_id(quest_id) )
      {
        v152 = proto::CreateEntityInfo::item_id(quest_id);
        if ( ParentQuestScriptConfig::findItemConfig(parent_quest_config_ptr, *(_DWORD *)(v5 + 64), v152) )
        {
          *(_DWORD *)(v5 + 192) = 0;
          *(_DWORD *)(v5 + 196) = 0;
          *(_DWORD *)(v5 + 200) = 0;
          *(_DWORD *)(v5 + 204) = 0;
          *(_DWORD *)(v5 + 192) = proto::CreateEntityInfo::item_id(quest_id);
          *(_DWORD *)(v5 + 196) = 1;
          if ( *(_BYTE *)(((unsigned __int64)&create_entity_info->rot_ >> 3) + 0x7FFF8000) )
            __asan_report_load8();
          ItemComp = Player::getItemComp((Player *const)create_entity_info->rot_);
          PlayerItemComp::createItem(
            (std::vector<std::shared_ptr<Item>> *)(v5 + 256),
            ItemComp,
            (const ItemParam *)(v5 + 192));
          if ( std::vector<std::shared_ptr<Item>>::size((const std::vector<std::shared_ptr<Item>> *const)(v5 + 256)) == 1 )
          {
            ActionReason::ActionReason(&action_reason, ACTION_REASON_QUEST_ITEM, ITEM_LIMIT_QUEST);
            TrifleParam::TrifleParam((TrifleParam *const)(v5 + 416), &action_reason);
            v169 = std::vector<std::shared_ptr<Item>>::operator[](
                     (std::vector<std::shared_ptr<Item>> *const)(v5 + 256),
                     0LL);
            std::shared_ptr<Item>::operator=((std::shared_ptr<Item> *const)(v5 + 424), v169);
            v170 = proto::CreateEntityInfo::pos(quest_id);
            Vector3::Vector3(&v198, v170);
            *(Vector3 *)(v5 + 440) = v198;
            v171 = proto::CreateEntityInfo::rot(quest_id);
            Vector3::Vector3(&v198, v171);
            *(Vector3 *)(v5 + 452) = v198;
            v172 = proto::CreateEntityInfo::gadget(quest_id);
            *(_DWORD *)(v5 + 488) = proto::CreateGadgetInfo::born_type(v172);
            v173 = std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v5 + 96));
            *(_DWORD *)(v5 + 416) = Scene::genNewEntityId(v173, PROT_ENTITY_GADGET);
            *(_DWORD *)(v5 + 492) = proto::CreateEntityInfo::room_id(quest_id);
            if ( *(_BYTE *)(((unsigned __int64)&create_entity_info->rot_ >> 3) + 0x7FFF8000) )
              __asan_report_load8();
            *(_DWORD *)(v5 + 484) = Player::getUid((const Player *const)create_entity_info->rot_);
            EntityMgr::createTrifle((const TrifleParam *)(v5 + 224));
            if ( std::operator==<Gadget>((const std::shared_ptr<Gadget> *)(v5 + 224), 0LL) )
            {
              common::milog::MiLogStream::create(
                &v200,
                &common::milog::MiLogDefault::default_log_obj_,
                3u,
                "./src/scene/player_scene_comp.cpp",
                "createEntityFromClient",
                2367);
              v174 = common::milog::MiLogStream::operator<<<char [29],(char *[29])0>(
                       &v200,
                       (const char (*)[29])"createTrifle fails, item_id:");
              v175 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                       v174,
                       (const unsigned int *)(v5 + 192));
              v176 = common::milog::MiLogStream::operator<<<char [8],(char *[8])0>(v175, (const char (*)[8])" count:");
              common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                v176,
                (const unsigned int *)(v5 + 196));
              common::milog::MiLogStream::~MiLogStream(&v200);
              std::shared_ptr<Entity>::shared_ptr((std::shared_ptr<Entity> *const)this, 0LL);
              v177 = 0;
            }
            else
            {
              v178 = std::__shared_ptr_access<Gadget,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Gadget,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v5 + 224));
              if ( *(_BYTE *)(((unsigned __int64)v178 >> 3) + 0x7FFF8000) )
                __asan_report_load8();
              v179 = *(_QWORD *)v178->baseclass_0 + 56LL;
              if ( *(_BYTE *)((v179 >> 3) + 0x7FFF8000) )
                v179 = __asan_report_load8();
              room_ide = *(void (__fastcall **)(std::__shared_ptr_access<Gadget,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *, std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *, VisionContext *))v179;
              v180 = std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::operator*((const std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v5 + 96));
              room_ide(v178, v180, &VisionContext::meet_context);
              std::shared_ptr<Entity>::operator=<Gadget>(
                (std::shared_ptr<Entity> *const)(v5 + 128),
                (const std::shared_ptr<Gadget> *)(v5 + 224));
              v177 = 1;
            }
            std::shared_ptr<Gadget>::~shared_ptr((std::shared_ptr<Gadget> *const)(v5 + 224));
            TrifleParam::~TrifleParam((TrifleParam *const)(v5 + 416));
            v168 = v177 == 1;
          }
          else
          {
            common::milog::MiLogStream::create(
              &v200,
              &common::milog::MiLogDefault::default_log_obj_,
              3u,
              "./src/scene/player_scene_comp.cpp",
              "createEntityFromClient",
              2353);
            v165 = common::milog::MiLogStream::operator<<<char [27],(char *[27])0>(
                     &v200,
                     (const char (*)[27])"createItem fails, item_id:");
            v166 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                     v165,
                     (const unsigned int *)(v5 + 192));
            v167 = common::milog::MiLogStream::operator<<<char [8],(char *[8])0>(v166, (const char (*)[8])" count:");
            common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
              v167,
              (const unsigned int *)(v5 + 196));
            common::milog::MiLogStream::~MiLogStream(&v200);
            std::shared_ptr<Entity>::shared_ptr((std::shared_ptr<Entity> *const)this, 0LL);
            v168 = 0;
          }
          std::vector<std::shared_ptr<Item>>::~vector((std::vector<std::shared_ptr<Item>> *const)(v5 + 256));
          if ( v168 )
            goto LABEL_151;
        }
        else
        {
          common::tools::StringStream<common::tools::FixedBuffer<4096>>::StringStream((common::tools::StringStream<common::tools::FixedBuffer<4096> > *const)(v5 + 224));
          v153 = common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(
                   (common::tools::StringStream<common::tools::FixedBuffer<4096> > *const)(v5 + 224),
                   aQuestcreateent_3);
          v154 = common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(v153, *(_DWORD *)(v5 + 64));
          v155 = common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(v154, ",item_id:");
          v156 = proto::CreateEntityInfo::item_id(quest_id);
          v157 = common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(v155, v156);
          common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(v157, asc_251810E0);
          if ( *(_BYTE *)(((unsigned __int64)&create_entity_info->rot_ >> 3) + 0x7FFF8000) )
            __asan_report_load8();
          v158 = (Player *)create_entity_info->rot_;
          common::tools::StringStream<common::tools::FixedBuffer<4096>>::str[abi:cxx11](
            (std::string *)&v200,
            (common::tools::StringStream<common::tools::FixedBuffer<4096> > *const)(v5 + 224));
          Player::notifyGMServerLog(v158, SERVER_LOG_NONE, LOG_LEVEL_ERROR_0, (const std::string *)&v200);
          std::string::~string(&v200);
          common::milog::MiLogStream::create(
            &v200,
            &common::milog::MiLogDefault::default_log_obj_,
            3u,
            "./src/scene/player_scene_comp.cpp",
            "createEntityFromClient",
            2344);
          v159 = common::milog::MiLogStream::operator<<<char [32],(char *[32])0>(
                   &v200,
                   (const char (*)[32])"findItemConfig failed, item_id:");
          val = proto::CreateEntityInfo::item_id(quest_id);
          v160 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v159, &val);
          v161 = common::milog::MiLogStream::operator<<<char [18],(char *[18])0>(
                   v160,
                   (const char (*)[18])" parent_quest_id:");
          v162 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                   v161,
                   (const unsigned int *)(v5 + 80));
          v163 = common::milog::MiLogStream::operator<<<char [11],(char *[11])0>(v162, (const char (*)[11])" quest_id:");
          common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v163, (const unsigned int *)(v5 + 64));
          common::milog::MiLogStream::~MiLogStream(&v200);
          std::shared_ptr<Entity>::shared_ptr((std::shared_ptr<Entity> *const)this, 0LL);
          common::tools::StringStream<common::tools::FixedBuffer<4096>>::~StringStream((common::tools::StringStream<common::tools::FixedBuffer<4096> > *const)(v5 + 224));
        }
        v96 = 0;
        goto LABEL_152;
      }
    }
LABEL_151:
    v96 = 1;
    goto LABEL_152;
  }
LABEL_162:
  if ( v201 == (char *)v5 )
  {
    *(_QWORD *)((v5 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8008) = 0LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8010) = 0LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8018) = 0LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8020) = 0LL;
    *(_DWORD *)((v5 >> 3) + 0x7FFF8030) = 0;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8040) = 0LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8070) = 0LL;
    *(_DWORD *)((v5 >> 3) + 0x7FFF8078) = 0;
    *(_QWORD *)((v5 >> 3) + 0x7FFF80E0) = 0LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF80E8) = 0LL;
  }
  else
  {
    *(_QWORD *)v5 = 1172321806LL;
    __asan_stack_free_5(v5, 1920LL, v201);
  }
  return this;
};

// Line 2387: range 0000000013E53CBC-0000000013E541C3
__int64 __fastcall PlayerSceneComp::destroyEntityFromClient(
        PlayerSceneComp *const this,
        uint32_t scene_id,
        uint32_t entity_id)
{
  unsigned __int64 v3; // r13
  __int64 v4; // rax
  _DWORD *v5; // r12
  common::milog::MiLogStream *v6; // rax
  common::milog::MiLogStream *v7; // rax
  common::milog::MiLogStream *v8; // rcx
  unsigned int v9; // r14d
  unsigned __int64 v10; // rax
  unsigned __int64 v11; // rdx
  common::milog::MiLogStream *v12; // rax
  common::milog::MiLogStream *v13; // rcx
  std::__shared_ptr_access<Entity,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v14; // rax
  common::milog::MiLogStream *v15; // r14
  std::__shared_ptr_access<Entity,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v16; // rax
  Scene *v17; // rax
  __int64 result; // rax
  common::milog::MiLogStream v20; // [rsp+10h] [rbp-F0h] BYREF
  char v21[208]; // [rsp+30h] [rbp-D0h] BYREF

  v3 = (unsigned __int64)v21;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_2(160LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "5 32 4 13 scene_id:2386 48 4 14 entity_id:2386 64 16 14 scene_ptr:2388 96 16 19 spec_scene_ptr:2"
                        "391 128 16 15 entity_ptr:2401";
  *(_QWORD *)(v3 + 16) = PlayerSceneComp::destroyEntityFromClient;
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = -234556924;
  v5[536862722] = -219021312;
  v5[536862723] = -219021312;
  v5[536862724] = -202178560;
  *(_DWORD *)(v3 + 32) = scene_id;
  *(_DWORD *)(v3 + 48) = entity_id;
  PlayerSceneComp::getCurScene((const PlayerSceneComp *const)(v3 + 64));
  PlayerSceneComp::findScene((const PlayerSceneComp *const)(v3 + 96), (uint32_t)this);
  if ( std::operator!=<Scene>((const std::shared_ptr<Scene> *)(v3 + 96), 0LL) )
    std::shared_ptr<Scene>::operator=(
      (std::shared_ptr<Scene> *const)(v3 + 64),
      (const std::shared_ptr<Scene> *)(v3 + 96));
  if ( std::operator==<Scene>((const std::shared_ptr<Scene> *)(v3 + 64), 0LL) )
  {
    common::milog::MiLogStream::create(
      &v20,
      &common::milog::MiLogDefault::default_log_obj_,
      1u,
      "./src/scene/player_scene_comp.cpp",
      "destroyEntityFromClient",
      2398);
    v6 = common::milog::MiLogStream::operator<<<char [26],(char *[26])0>(
           &v20,
           (const char (*)[26])"getScene fails, scene_id:");
    v7 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v6, (const unsigned int *)(v3 + 32));
    v8 = common::milog::MiLogStream::operator<<<char [12],(char *[12])0>(v7, (const char (*)[12])" , player: ");
    if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
      __asan_report_load8();
    operator<<(v8, this->player_);
    common::milog::MiLogStream::~MiLogStream(&v20);
    v9 = -1;
  }
  else
  {
    v10 = (unsigned __int64)std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 64));
    if ( *(_BYTE *)((v10 >> 3) + 0x7FFF8000) )
      v10 = __asan_report_load8();
    v11 = *(_QWORD *)v10 + 120LL;
    if ( *(_BYTE *)((v11 >> 3) + 0x7FFF8000) )
      v10 = __asan_report_load8();
    (*(void (__fastcall **)(unsigned __int64, unsigned __int64, _QWORD))v11)(v3 + 128, v10, *(unsigned int *)(v3 + 48));
    if ( std::operator==<Entity>((const std::shared_ptr<Entity> *)(v3 + 128), 0LL) )
    {
      common::milog::MiLogStream::create(
        &v20,
        &common::milog::MiLogDefault::default_log_obj_,
        1u,
        "./src/scene/player_scene_comp.cpp",
        "destroyEntityFromClient",
        2404);
      v12 = common::milog::MiLogStream::operator<<<char [29],(char *[29])0>(
              &v20,
              (const char (*)[29])"findEntity fails, entity_id:");
      v13 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v12, (const unsigned int *)(v3 + 48));
      if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
        __asan_report_load8();
      operator<<(v13, this->player_);
      common::milog::MiLogStream::~MiLogStream(&v20);
      v9 = -1;
    }
    else
    {
      v14 = std::__shared_ptr_access<Entity,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Entity,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 128));
      if ( !Entity::getIsClientCreated(v14) )
      {
        common::milog::MiLogStream::create(
          &v20,
          &common::milog::MiLogDefault::default_log_obj_,
          1u,
          "./src/scene/player_scene_comp.cpp",
          "destroyEntityFromClient",
          2409);
        v15 = common::milog::MiLogStream::operator<<<char [32],(char *[32])0>(
                &v20,
                (const char (*)[32])"entity is not created by client");
        v16 = std::__shared_ptr_access<Entity,(__gnu_cxx::_Lock_policy)2,false,false>::operator*((const std::__shared_ptr_access<Entity,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 128));
        common::milog::MiLogStream::operator<<<Entity,(Entity*)0>(v15, v16);
        common::milog::MiLogStream::~MiLogStream(&v20);
        v9 = -1;
      }
      else
      {
        v17 = std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 64));
        Scene::delEntity(v17, *(_DWORD *)(v3 + 48), &VisionContext::miss_context);
        v9 = 0;
      }
    }
    std::shared_ptr<Entity>::~shared_ptr((std::shared_ptr<Entity> *const)(v3 + 128));
  }
  std::shared_ptr<Scene>::~shared_ptr((std::shared_ptr<Scene> *const)(v3 + 96));
  std::shared_ptr<Scene>::~shared_ptr((std::shared_ptr<Scene> *const)(v3 + 64));
  result = v9;
  if ( v21 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8010) = 0;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8010) = -168430091;
  }
  return result;
};

// Line 2418: range 0000000013E541C4-0000000013E5579A
void __fastcall PlayerSceneComp::onPersonalSceneJumpReq(
        PlayerSceneComp *const this,
        uint32_t point_id,
        proto::PersonalSceneJumpRsp *rsp_0)
{
  unsigned __int64 v3; // r13
  __int64 v4; // rax
  _DWORD *v5; // r12
  common::milog::MiLogStream *v6; // r14
  common::milog::MiLogStream *v7; // r14
  std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v8; // rax
  unsigned int v9; // eax
  common::milog::MiLogStream *v10; // rax
  common::milog::MiLogStream *v11; // rax
  common::milog::MiLogStream *v12; // rax
  common::milog::MiLogStream *v13; // rax
  std::__shared_ptr_access<data::PersonalSceneJumpPoint,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v14; // rax
  common::milog::MiLogStream *v15; // rax
  common::milog::MiLogStream *v16; // rax
  common::milog::MiLogStream *v17; // rax
  std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v18; // rax
  common::milog::MiLogStream *v19; // rax
  common::milog::MiLogStream *v20; // rax
  std::__shared_ptr_access<data::PersonalSceneJumpPoint,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v21; // rax
  std::__shared_ptr_access<data::PersonalSceneJumpPoint,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v22; // rdx
  char v23; // al
  std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v24; // rax
  PlayerBasicComp *BasicComp; // rax
  std::__shared_ptr_access<data::PersonalSceneJumpPoint,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v26; // rax
  std::__shared_ptr_access<data::PersonalSceneJumpPoint,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v27; // rdx
  std::__shared_ptr_access<data::PersonalSceneJumpPoint,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v28; // rax
  std::__shared_ptr_access<data::PersonalSceneJumpPoint,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v29; // rdx
  char v30; // al
  common::milog::MiLogStream *v31; // rax
  common::milog::MiLogStream *v32; // rax
  common::milog::MiLogStream *v33; // rax
  common::milog::MiLogStream *v34; // rax
  common::milog::MiLogStream *v35; // rax
  std::__shared_ptr_access<data::PersonalSceneJumpPoint,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v36; // rdx
  std::__shared_ptr_access<data::PersonalSceneJumpPoint,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v37; // rax
  char v38; // al
  common::milog::MiLogStream *v39; // rax
  common::milog::MiLogStream *v40; // rax
  common::milog::MiLogStream *v41; // rax
  common::milog::MiLogStream *v42; // rax
  common::milog::MiLogStream *v43; // rax
  std::__shared_ptr_access<data::PersonalSceneJumpPoint,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v44; // rdx
  unsigned __int64 v45; // rax
  unsigned __int64 v46; // rdx
  common::milog::MiLogStream *v47; // rax
  common::milog::MiLogStream *v48; // rax
  std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v49; // rax
  common::milog::MiLogStream *v50; // rax
  common::milog::MiLogStream *v51; // rax
  std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v52; // rax
  common::milog::MiLogStream *v53; // rax
  common::milog::MiLogStream *v54; // rax
  common::milog::MiLogStream *v55; // rax
  common::milog::MiLogStream *v56; // rcx
  std::__shared_ptr_access<data::PersonalSceneJumpPoint,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v57; // rax
  uint32_t type; // r14d
  std::__shared_ptr_access<data::PersonalSceneJumpPoint,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v59; // rax
  std::__shared_ptr_access<data::PersonalSceneJumpPoint,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v60; // rax
  Scene *v61; // rax
  std::__shared_ptr_access<data::PersonalSceneJumpPoint,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v62; // rdx
  data::Vector *p_tran_pos; // rax
  std::__shared_ptr_access<data::PersonalSceneJumpPoint,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v64; // rax
  std::__shared_ptr_access<data::PersonalSceneJumpPoint,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v65; // rdx
  float *p_z; // rax
  float open_time; // [rsp+4h] [rbp-20Ch]
  int game_seconds_per_day; // [rsp+20h] [rbp-1F0h]
  google::protobuf::int32 ret; // [rsp+2Ch] [rbp-1E4h]
  proto::Vector *dest_pos; // [rsp+30h] [rbp-1E0h]
  Vector3 pos; // [rsp+38h] [rbp-1D8h] BYREF
  Vector3 rot; // [rsp+44h] [rbp-1CCh] BYREF
  std::shared_ptr<Config> v74; // [rsp+50h] [rbp-1C0h] BYREF
  common::milog::MiLogStream v75; // [rsp+60h] [rbp-1B0h] BYREF
  TransferReason p_reason; // [rsp+80h] [rbp-190h] BYREF
  char v77[336]; // [rsp+C0h] [rbp-150h] BYREF

  v3 = (unsigned __int64)v77;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_3(288LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "9 48 4 17 cur_scene_id:2450 64 4 18 dest_scene_id:2501 80 4 13 point_id:2417 96 16 20 trans_scen"
                        "e_ptr:2422 128 16 14 world_ptr:2430 160 16 15 avatar_ptr:2436 192 16 14 scene_ptr:2442 224 16 19"
                        " jump_point_ptr:2451 256 16 19 dest_scene_ptr:2502";
  *(_QWORD *)(v3 + 16) = PlayerSceneComp::onPersonalSceneJumpReq;
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = -234556943;
  v5[536862722] = -234556924;
  v5[536862723] = -219021312;
  v5[536862724] = -219021312;
  v5[536862725] = -219021312;
  v5[536862726] = -219021312;
  v5[536862727] = -219021312;
  v5[536862728] = -202178560;
  *(_DWORD *)(v3 + 80) = point_id;
  proto::PersonalSceneJumpRsp::set_retcode(rsp_0, -1);
  PlayerSceneComp::getDestScene((const PlayerSceneComp *const)(v3 + 96));
  if ( !std::operator!=<Scene>((const std::shared_ptr<Scene> *)(v3 + 96), 0LL) )
  {
    if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
      __asan_report_load8();
    Player::getSceneComp(this->player_);
    PlayerSceneComp::getCurWorld((const PlayerSceneComp *const)(v3 + 128));
    if ( std::operator==<World>((const std::shared_ptr<World> *)(v3 + 128), 0LL) )
    {
      common::milog::MiLogStream::create(
        &v75,
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/scene/player_scene_comp.cpp",
        "onPersonalSceneJumpReq",
        2433);
      v7 = common::milog::MiLogStream::operator<<<char [25],(char *[25])0>(
             &v75,
             (const char (*)[25])"getCurWorld fails, uid: ");
      if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
        __asan_report_load8();
      *(_DWORD *)(v3 + 64) = Player::getUid(this->player_);
      common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v7, (const unsigned int *)(v3 + 64));
      common::milog::MiLogStream::~MiLogStream(&v75);
      goto LABEL_95;
    }
    if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
      __asan_report_load8();
    Player::getCurAvatar((Player *const)(v3 + 160));
    if ( std::operator==<Avatar>((const std::shared_ptr<Avatar> *)(v3 + 160), 0LL) )
    {
      common::milog::MiLogStream::create(
        &v75,
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/scene/player_scene_comp.cpp",
        "onPersonalSceneJumpReq",
        2439);
      common::milog::MiLogStream::operator<<<char [21],(char *[21])0>(&v75, (const char (*)[21])" getCurAvatar failed");
      common::milog::MiLogStream::~MiLogStream(&v75);
LABEL_94:
      std::shared_ptr<Avatar>::~shared_ptr((std::shared_ptr<Avatar> *const)(v3 + 160));
LABEL_95:
      std::shared_ptr<World>::~shared_ptr((std::shared_ptr<World> *const)(v3 + 128));
      goto LABEL_96;
    }
    std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 160));
    Entity::getScene((const Entity *const)(v3 + 192));
    if ( std::operator==<Scene>((const std::shared_ptr<Scene> *)(v3 + 192), 0LL) )
    {
      common::milog::MiLogStream::create(
        &v75,
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/scene/player_scene_comp.cpp",
        "onPersonalSceneJumpReq",
        2445);
      common::milog::MiLogStream::operator<<<char [31],(char *[31])0>(
        &v75,
        (const char (*)[31])" avatar_ptr->getScene() failed");
      common::milog::MiLogStream::~MiLogStream(&v75);
      proto::PersonalSceneJumpRsp::set_retcode(rsp_0, 103);
LABEL_93:
      std::shared_ptr<Scene>::~shared_ptr((std::shared_ptr<Scene> *const)(v3 + 192));
      goto LABEL_94;
    }
    v8 = std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 192));
    *(_DWORD *)(v3 + 48) = Scene::getSceneId(v8);
    ServiceBox::findService<GameserverService>();
    GameserverService::getConfig((GameserverService *const)(v3 + 256));
    v9 = (unsigned int)std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 256));
    JsonConfigMgr::findScenePoint<data::PersonalSceneJumpPoint>(
      (const JsonConfigMgr *const)(v3 + 224),
      v9 + 93080,
      *(_DWORD *)(v3 + 48));
    std::shared_ptr<Config>::~shared_ptr((std::shared_ptr<Config> *const)(v3 + 256));
    if ( std::operator==<data::PersonalSceneJumpPoint>(
           (const std::shared_ptr<data::PersonalSceneJumpPoint> *)(v3 + 224),
           0LL) )
    {
      common::milog::MiLogStream::create(
        &v75,
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/scene/player_scene_comp.cpp",
        "onPersonalSceneJumpReq",
        2454);
      v10 = common::milog::MiLogStream::operator<<<char [39],(char *[39])0>(
              &v75,
              (const char (*)[39])"findScenePoint PersonalSceneJumpPoint ");
      v11 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v10, (const unsigned int *)(v3 + 48));
      v12 = common::milog::MiLogStream::operator<<<char [2],(char *[2])0>(v11, (const char (*)[2])":");
      v13 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v12, (const unsigned int *)(v3 + 80));
      common::milog::MiLogStream::operator<<<char [8],(char *[8])0>(v13, (const char (*)[8])" failed");
      common::milog::MiLogStream::~MiLogStream(&v75);
    }
    else
    {
      v14 = std::__shared_ptr_access<data::PersonalSceneJumpPoint,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<data::PersonalSceneJumpPoint,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 224));
      if ( *(char *)(((unsigned __int64)&v14->tran_pos.is_json_loaded >> 3) + 0x7FFF8000) < 0 )
        v14 = (std::__shared_ptr_access<data::PersonalSceneJumpPoint,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *)__asan_report_load1(&v14->tran_pos.is_json_loaded);
      if ( !v14->tran_pos.is_json_loaded )
      {
        common::milog::MiLogStream::create(
          &v75,
          &common::milog::MiLogDefault::default_log_obj_,
          3u,
          "./src/scene/player_scene_comp.cpp",
          "onPersonalSceneJumpReq",
          2459);
        v15 = common::milog::MiLogStream::operator<<<char [34],(char *[34])0>(
                &v75,
                (const char (*)[34])"tran_pos.is_json_loaded is false ");
        v16 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                v15,
                (const unsigned int *)(v3 + 48));
        v17 = common::milog::MiLogStream::operator<<<char [2],(char *[2])0>(v16, (const char (*)[2])":");
        common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v17, (const unsigned int *)(v3 + 80));
        common::milog::MiLogStream::~MiLogStream(&v75);
      }
      else
      {
        v18 = std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 192));
        if ( Scene::getSceneType(v18) != SCENE_DUNGEON )
        {
          v21 = std::__shared_ptr_access<data::PersonalSceneJumpPoint,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<data::PersonalSceneJumpPoint,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 224));
          if ( *(_BYTE *)(((unsigned __int64)&v21->open_time >> 3) + 0x7FFF8000) != 0
            && *(_BYTE *)(((unsigned __int64)&v21->open_time >> 3) + 0x7FFF8000) <= 3 )
          {
            v21 = (std::__shared_ptr_access<data::PersonalSceneJumpPoint,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *)__asan_report_load4(&v21->open_time);
          }
          if ( v21->open_time == 0.0 )
            goto LABEL_35;
          v22 = std::__shared_ptr_access<data::PersonalSceneJumpPoint,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<data::PersonalSceneJumpPoint,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 224));
          if ( *(_BYTE *)(((unsigned __int64)&v22->close_time >> 3) + 0x7FFF8000) != 0
            && (char)((((_BYTE)v22 - 60) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&v22->close_time >> 3) + 0x7FFF8000) )
          {
            __asan_report_load4(&v22->close_time);
          }
          if ( v22->close_time == 0.0 )
LABEL_35:
            v23 = 0;
          else
            v23 = 1;
          if ( v23 )
          {
            ServiceBox::findService<GameserverService>();
            GameserverService::getConfig((GameserverService *const)&v74);
            v24 = std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false> *const)&v74);
            game_seconds_per_day = ConstValueExcelConfigMgr::getGameDaySeconds(&v24->design_config.txt_config_mgr.const_value_config_mgr);
            std::shared_ptr<Config>::~shared_ptr(&v74);
            if ( !game_seconds_per_day )
            {
              common::milog::MiLogStream::create(
                &v75,
                &common::milog::MiLogDefault::default_log_obj_,
                3u,
                "./src/scene/player_scene_comp.cpp",
                "onPersonalSceneJumpReq",
                2475);
              common::milog::MiLogStream::operator<<<char [25],(char *[25])0>(
                &v75,
                (const char (*)[25])"game_seconds_per_day = 0");
              common::milog::MiLogStream::~MiLogStream(&v75);
              goto LABEL_92;
            }
            if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
              __asan_report_load8();
            BasicComp = Player::getBasicComp(this->player_);
            *(float *)(v3 + 64) = 24.0
                                * (float)((float)(int)(PlayerBasicComp::getGameTime(BasicComp) % game_seconds_per_day)
                                        / (float)game_seconds_per_day);
            v26 = std::__shared_ptr_access<data::PersonalSceneJumpPoint,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<data::PersonalSceneJumpPoint,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 224));
            if ( *(_BYTE *)(((unsigned __int64)&v26->open_time >> 3) + 0x7FFF8000) != 0
              && *(_BYTE *)(((unsigned __int64)&v26->open_time >> 3) + 0x7FFF8000) <= 3 )
            {
              v26 = (std::__shared_ptr_access<data::PersonalSceneJumpPoint,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *)__asan_report_load4(&v26->open_time);
            }
            open_time = v26->open_time;
            v27 = std::__shared_ptr_access<data::PersonalSceneJumpPoint,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<data::PersonalSceneJumpPoint,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 224));
            if ( *(_BYTE *)(((unsigned __int64)&v27->close_time >> 3) + 0x7FFF8000) != 0
              && (char)((((_BYTE)v27 - 60) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&v27->close_time >> 3) + 0x7FFF8000) )
            {
              __asan_report_load4(&v27->close_time);
            }
            if ( v27->close_time < open_time )
            {
              v36 = std::__shared_ptr_access<data::PersonalSceneJumpPoint,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<data::PersonalSceneJumpPoint,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 224));
              if ( *(_BYTE *)(((unsigned __int64)&v36->close_time >> 3) + 0x7FFF8000) != 0
                && (char)((((_BYTE)v36 - 60) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&v36->close_time >> 3)
                                                                   + 0x7FFF8000) )
              {
                __asan_report_load4(&v36->close_time);
              }
              if ( *(float *)(v3 + 64) <= v36->close_time )
                goto LABEL_63;
              v37 = std::__shared_ptr_access<data::PersonalSceneJumpPoint,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<data::PersonalSceneJumpPoint,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 224));
              if ( *(_BYTE *)(((unsigned __int64)&v37->open_time >> 3) + 0x7FFF8000) != 0
                && *(_BYTE *)(((unsigned __int64)&v37->open_time >> 3) + 0x7FFF8000) <= 3 )
              {
                v37 = (std::__shared_ptr_access<data::PersonalSceneJumpPoint,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *)__asan_report_load4(&v37->open_time);
              }
              if ( v37->open_time <= *(float *)(v3 + 64) )
LABEL_63:
                v38 = 0;
              else
                v38 = 1;
              if ( v38 )
              {
                common::milog::MiLogStream::create(
                  &v75,
                  &common::milog::MiLogDefault::default_log_obj_,
                  1u,
                  "./src/scene/player_scene_comp.cpp",
                  "onPersonalSceneJumpReq",
                  2495);
                v39 = common::milog::MiLogStream::operator<<<char [36],(char *[36])0>(
                        &v75,
                        (const char (*)[36])"jump_point is closed now. scene_id:");
                v40 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                        v39,
                        (const unsigned int *)(v3 + 48));
                v41 = common::milog::MiLogStream::operator<<<char [11],(char *[11])0>(
                        v40,
                        (const char (*)[11])" point_id:");
                v42 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                        v41,
                        (const unsigned int *)(v3 + 80));
                v43 = common::milog::MiLogStream::operator<<<char [17],(char *[17])0>(
                        v42,
                        (const char (*)[17])" cur_daily_hour:");
                common::milog::MiLogStream::operator<<<float,(float *)0>(v43, (const float *)(v3 + 64));
                common::milog::MiLogStream::~MiLogStream(&v75);
                goto LABEL_92;
              }
            }
            else
            {
              v28 = std::__shared_ptr_access<data::PersonalSceneJumpPoint,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<data::PersonalSceneJumpPoint,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 224));
              if ( *(_BYTE *)(((unsigned __int64)&v28->open_time >> 3) + 0x7FFF8000) != 0
                && *(_BYTE *)(((unsigned __int64)&v28->open_time >> 3) + 0x7FFF8000) <= 3 )
              {
                v28 = (std::__shared_ptr_access<data::PersonalSceneJumpPoint,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *)__asan_report_load4(&v28->open_time);
              }
              if ( *(float *)(v3 + 64) <= v28->open_time )
                goto LABEL_52;
              v29 = std::__shared_ptr_access<data::PersonalSceneJumpPoint,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<data::PersonalSceneJumpPoint,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 224));
              if ( *(_BYTE *)(((unsigned __int64)&v29->close_time >> 3) + 0x7FFF8000) != 0
                && (char)((((_BYTE)v29 - 60) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&v29->close_time >> 3)
                                                                   + 0x7FFF8000) )
              {
                __asan_report_load4(&v29->close_time);
              }
              if ( v29->close_time > *(float *)(v3 + 64) )
                v30 = 0;
              else
LABEL_52:
                v30 = 1;
              if ( v30 )
              {
                common::milog::MiLogStream::create(
                  &v75,
                  &common::milog::MiLogDefault::default_log_obj_,
                  1u,
                  "./src/scene/player_scene_comp.cpp",
                  "onPersonalSceneJumpReq",
                  2486);
                v31 = common::milog::MiLogStream::operator<<<char [36],(char *[36])0>(
                        &v75,
                        (const char (*)[36])"jump_point is closed now. scene_id:");
                v32 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                        v31,
                        (const unsigned int *)(v3 + 48));
                v33 = common::milog::MiLogStream::operator<<<char [11],(char *[11])0>(
                        v32,
                        (const char (*)[11])" point_id:");
                v34 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                        v33,
                        (const unsigned int *)(v3 + 80));
                v35 = common::milog::MiLogStream::operator<<<char [17],(char *[17])0>(
                        v34,
                        (const char (*)[17])" cur_daily_hour:");
                common::milog::MiLogStream::operator<<<float,(float *)0>(v35, (const float *)(v3 + 64));
                common::milog::MiLogStream::~MiLogStream(&v75);
                goto LABEL_92;
              }
            }
          }
          v44 = std::__shared_ptr_access<data::PersonalSceneJumpPoint,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<data::PersonalSceneJumpPoint,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 224));
          if ( *(_BYTE *)(((unsigned __int64)&v44->tran_scene_id >> 3) + 0x7FFF8000) != 0
            && (char)((((_BYTE)v44 - 116) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&v44->tran_scene_id >> 3)
                                                                + 0x7FFF8000) )
          {
            __asan_report_load4(&v44->tran_scene_id);
          }
          *(_DWORD *)(v3 + 64) = v44->tran_scene_id;
          v45 = (unsigned __int64)std::__shared_ptr_access<World,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<World,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 128));
          if ( *(_BYTE *)((v45 >> 3) + 0x7FFF8000) )
            v45 = __asan_report_load8();
          v46 = *(_QWORD *)v45 + 80LL;
          if ( *(_BYTE *)((v46 >> 3) + 0x7FFF8000) )
            v45 = __asan_report_load8();
          (*(void (__fastcall **)(unsigned __int64, unsigned __int64, _QWORD))v46)(
            v3 + 256,
            v45,
            *(unsigned int *)(v3 + 64));
          if ( std::operator==<Scene>((const std::shared_ptr<Scene> *)(v3 + 256), 0LL) )
          {
            common::milog::MiLogStream::create(
              &v75,
              &common::milog::MiLogDefault::default_log_obj_,
              3u,
              "./src/scene/player_scene_comp.cpp",
              "onPersonalSceneJumpReq",
              2505);
            v47 = common::milog::MiLogStream::operator<<<char [10],(char *[10])0>(&v75, (const char (*)[10])"getScene ");
            v48 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                    v47,
                    (const unsigned int *)(v3 + 64));
            common::milog::MiLogStream::operator<<<char [8],(char *[8])0>(v48, (const char (*)[8])" failed");
            common::milog::MiLogStream::~MiLogStream(&v75);
          }
          else
          {
            v49 = std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 256));
            if ( Scene::getSceneType(v49) == SCENE_DUNGEON )
            {
              common::milog::MiLogStream::create(
                &v75,
                &common::milog::MiLogDefault::default_log_obj_,
                3u,
                "./src/scene/player_scene_comp.cpp",
                "onPersonalSceneJumpReq",
                2510);
              v50 = common::milog::MiLogStream::operator<<<char [11],(char *[11])0>(
                      &v75,
                      (const char (*)[11])"scene_id: ");
              v51 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                      v50,
                      (const unsigned int *)(v3 + 64));
              common::milog::MiLogStream::operator<<<char [29],(char *[29])0>(v51, (const char (*)[29])off_25181C60);
              common::milog::MiLogStream::~MiLogStream(&v75);
            }
            else
            {
              v52 = std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 192));
              if ( !Scene::isPointUnlocked(v52, *(_DWORD *)(v3 + 80)) )
              {
                common::milog::MiLogStream::create(
                  &v75,
                  &common::milog::MiLogDefault::default_log_obj_,
                  3u,
                  "./src/scene/player_scene_comp.cpp",
                  "onPersonalSceneJumpReq",
                  2515);
                v53 = common::milog::MiLogStream::operator<<<char [33],(char *[33])0>(
                        &v75,
                        (const char (*)[33])"point is not unlocked, scene_id:");
                v54 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                        v53,
                        (const unsigned int *)(v3 + 48));
                v55 = common::milog::MiLogStream::operator<<<char [12],(char *[12])0>(
                        v54,
                        (const char (*)[12])", point_id:");
                v56 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                        v55,
                        (const unsigned int *)(v3 + 80));
                if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
                  __asan_report_load8();
                operator<<(v56, this->player_);
                common::milog::MiLogStream::~MiLogStream(&v75);
              }
              else
              {
                TransferReason::TransferReason(&p_reason, ENTER_REASON_PERSONAL_SCENE);
                v57 = std::__shared_ptr_access<data::PersonalSceneJumpPoint,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<data::PersonalSceneJumpPoint,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 224));
                if ( *(_BYTE *)(((unsigned __int64)&v57->type >> 3) + 0x7FFF8000) != 0
                  && *(_BYTE *)(((unsigned __int64)&v57->type >> 3) + 0x7FFF8000) <= 3 )
                {
                  v57 = (std::__shared_ptr_access<data::PersonalSceneJumpPoint,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *)__asan_report_load4(&v57->type);
                }
                type = v57->type;
                v59 = std::__shared_ptr_access<data::PersonalSceneJumpPoint,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<data::PersonalSceneJumpPoint,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 224));
                Vector3::Vector3(&rot, &v59->tran_rot);
                v60 = std::__shared_ptr_access<data::PersonalSceneJumpPoint,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<data::PersonalSceneJumpPoint,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 224));
                Vector3::Vector3(&pos, &v60->tran_pos);
                v61 = std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::operator*((const std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 256));
                ret = PlayerSceneComp::jumpToScene(this, v61, &pos, &rot, type, &p_reason);
                TransferReason::~TransferReason(&p_reason);
                if ( ret )
                {
                  proto::PersonalSceneJumpRsp::set_retcode(rsp_0, ret);
                }
                else
                {
                  proto::PersonalSceneJumpRsp::set_retcode(rsp_0, 0);
                  proto::PersonalSceneJumpRsp::set_dest_scene_id(rsp_0, *(_DWORD *)(v3 + 64));
                  dest_pos = proto::PersonalSceneJumpRsp::mutable_dest_pos(rsp_0);
                  v62 = std::__shared_ptr_access<data::PersonalSceneJumpPoint,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<data::PersonalSceneJumpPoint,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 224));
                  p_tran_pos = &v62->tran_pos;
                  if ( *(_BYTE *)(((unsigned __int64)p_tran_pos >> 3) + 0x7FFF8000) != 0
                    && (char)(((unsigned __int8)p_tran_pos & 7) + 3) >= *(_BYTE *)(((unsigned __int64)p_tran_pos >> 3)
                                                                                 + 0x7FFF8000) )
                  {
                    __asan_report_load4(p_tran_pos);
                  }
                  proto::Vector::set_x(dest_pos, v62->tran_pos.x);
                  v64 = std::__shared_ptr_access<data::PersonalSceneJumpPoint,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<data::PersonalSceneJumpPoint,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 224));
                  if ( *(_BYTE *)(((unsigned __int64)&v64->tran_pos.y >> 3) + 0x7FFF8000) != 0
                    && *(_BYTE *)(((unsigned __int64)&v64->tran_pos.y >> 3) + 0x7FFF8000) <= 3 )
                  {
                    v64 = (std::__shared_ptr_access<data::PersonalSceneJumpPoint,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *)__asan_report_load4(&v64->tran_pos.y);
                  }
                  proto::Vector::set_y(dest_pos, v64->tran_pos.y);
                  v65 = std::__shared_ptr_access<data::PersonalSceneJumpPoint,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<data::PersonalSceneJumpPoint,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 224));
                  p_z = &v65->tran_pos.z;
                  if ( *(_BYTE *)(((unsigned __int64)p_z >> 3) + 0x7FFF8000) != 0
                    && (char)(((unsigned __int8)p_z & 7) + 3) >= *(_BYTE *)(((unsigned __int64)p_z >> 3) + 0x7FFF8000) )
                  {
                    __asan_report_load4(p_z);
                  }
                  proto::Vector::set_z(dest_pos, v65->tran_pos.z);
                }
              }
            }
          }
          std::shared_ptr<Scene>::~shared_ptr((std::shared_ptr<Scene> *const)(v3 + 256));
          goto LABEL_92;
        }
        common::milog::MiLogStream::create(
          &v75,
          &common::milog::MiLogDefault::default_log_obj_,
          3u,
          "./src/scene/player_scene_comp.cpp",
          "onPersonalSceneJumpReq",
          2464);
        v19 = common::milog::MiLogStream::operator<<<char [11],(char *[11])0>(&v75, (const char (*)[11])"scene_id: ");
        v20 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                v19,
                (const unsigned int *)(v3 + 48));
        common::milog::MiLogStream::operator<<<char [29],(char *[29])0>(v20, (const char (*)[29])off_25181C60);
        common::milog::MiLogStream::~MiLogStream(&v75);
      }
    }
LABEL_92:
    std::shared_ptr<data::PersonalSceneJumpPoint>::~shared_ptr((std::shared_ptr<data::PersonalSceneJumpPoint> *const)(v3 + 224));
    goto LABEL_93;
  }
  common::milog::MiLogStream::create(
    &v75,
    &common::milog::MiLogDefault::default_log_obj_,
    1u,
    "./src/scene/player_scene_comp.cpp",
    "onPersonalSceneJumpReq",
    2425);
  v6 = common::milog::MiLogStream::operator<<<char [32],(char *[32])0>(
         &v75,
         (const char (*)[32])" SceneJump is in transfer, uid:");
  if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
    __asan_report_load8();
  *(_DWORD *)(v3 + 64) = Player::getUid(this->player_);
  common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v6, (const unsigned int *)(v3 + 64));
  common::milog::MiLogStream::~MiLogStream(&v75);
  proto::PersonalSceneJumpRsp::set_retcode(rsp_0, 506);
LABEL_96:
  std::shared_ptr<Scene>::~shared_ptr((std::shared_ptr<Scene> *const)(v3 + 96));
  if ( v77 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8010) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8018) = 0LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8020) = 0;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8020) = -168430091;
  }
};

// Line 2537: range 0000000013E5579C-0000000013E558B3
bool __cdecl PlayerSceneComp::isInMyPlayerWorld(PlayerSceneComp *const this)
{
  unsigned __int64 v1; // rbx
  __int64 v2; // rax
  unsigned __int64 v3; // r12
  bool v4; // r15
  bool result; // al
  char v6[112]; // [rsp+10h] [rbp-70h] BYREF

  v1 = (unsigned __int64)v6;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_0(64LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "1 32 16 18 cur_world_ptr:2538";
  *(_QWORD *)(v1 + 16) = PlayerSceneComp::isInMyPlayerWorld;
  v3 = v1 >> 3;
  *(_DWORD *)(v3 + 2147450880) = -235802127;
  *(_DWORD *)(v3 + 2147450884) = -202178560;
  PlayerSceneComp::getCurWorld((const PlayerSceneComp *const)(v1 + 32));
  v4 = std::operator!=<World>((const std::shared_ptr<World> *)(v1 + 32), 0LL)
    && std::operator==<World,PlayerWorld>((const std::shared_ptr<World> *)(v1 + 32), &this->my_player_world_ptr_);
  std::shared_ptr<World>::~shared_ptr((std::shared_ptr<World> *const)(v1 + 32));
  result = v4;
  if ( v6 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 2543: range 0000000013E558B4-0000000013E55A8E
bool __cdecl PlayerSceneComp::isInMyHomeWorld(PlayerSceneComp *const this)
{
  unsigned __int64 v1; // rbx
  __int64 v2; // rax
  unsigned __int64 v3; // r13
  unsigned __int64 v4; // rax
  unsigned __int64 v5; // rdx
  char v6; // al
  bool v7; // r14
  std::__shared_ptr_access<World,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v8; // rax
  uint32_t OwnerUid; // r14d
  bool result; // al
  char v11[112]; // [rsp+10h] [rbp-70h] BYREF

  v1 = (unsigned __int64)v11;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_0(64LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "1 32 16 18 cur_world_ptr:2544";
  *(_QWORD *)(v1 + 16) = PlayerSceneComp::isInMyHomeWorld;
  v3 = v1 >> 3;
  *(_DWORD *)(v3 + 2147450880) = -235802127;
  *(_DWORD *)(v3 + 2147450884) = -202178560;
  PlayerSceneComp::getCurWorld((const PlayerSceneComp *const)(v1 + 32));
  if ( std::operator==<World>((const std::shared_ptr<World> *)(v1 + 32), 0LL) )
    goto LABEL_10;
  v4 = (unsigned __int64)std::__shared_ptr_access<World,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<World,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v1 + 32));
  if ( *(_BYTE *)((v4 >> 3) + 0x7FFF8000) )
    v4 = __asan_report_load8();
  v5 = *(_QWORD *)v4 + 16LL;
  if ( *(_BYTE *)((v5 >> 3) + 0x7FFF8000) )
    v4 = __asan_report_load8();
  if ( (*(unsigned int (__fastcall **)(unsigned __int64))v5)(v4) == 2 )
    v6 = 0;
  else
LABEL_10:
    v6 = 1;
  if ( v6 )
  {
    v7 = 0;
  }
  else
  {
    v8 = std::__shared_ptr_access<World,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<World,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v1 + 32));
    OwnerUid = World::getOwnerUid(v8);
    if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
      __asan_report_load8();
    v7 = OwnerUid == Player::getUid(this->player_);
  }
  std::shared_ptr<World>::~shared_ptr((std::shared_ptr<World> *const)(v1 + 32));
  result = v7;
  if ( v11 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 2553: range 0000000013E55A90-0000000013E55C2F
HomeWorldPtr __cdecl PlayerSceneComp::getMyHomeWorld(PlayerSceneComp *const this)
{
  __int64 v1; // rsi
  unsigned __int64 v2; // rbx
  __int64 v3; // rax
  unsigned __int64 v4; // r12
  PlayerHomeComp *HomeComp; // rsi
  Home *v6; // rax
  HomeSceneComp *SceneComp; // rax
  HomeWorldPtr result; // rax
  char v9[96]; // [rsp+10h] [rbp-60h] BYREF

  v2 = (unsigned __int64)v9;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_0(64LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "1 32 16 13 home_ptr:2554";
  *(_QWORD *)(v2 + 16) = PlayerSceneComp::getMyHomeWorld;
  v4 = v2 >> 3;
  *(_DWORD *)(v4 + 2147450880) = -235802127;
  *(_DWORD *)(v4 + 2147450884) = -202178560;
  if ( *(_BYTE *)(((unsigned __int64)(v1 + 24) >> 3) + 0x7FFF8000) )
    __asan_report_load8();
  HomeComp = Player::getHomeComp(*(Player *const *)(v1 + 24));
  PlayerHomeComp::findMyHome((const PlayerHomeComp *const)(v2 + 32));
  if ( std::__shared_ptr<Home,(__gnu_cxx::_Lock_policy)2>::operator bool((const std::__shared_ptr<Home,(__gnu_cxx::_Lock_policy)2> *const)(v2 + 32)) )
  {
    v6 = std::__shared_ptr_access<Home,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Home,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 32));
    SceneComp = Home::getSceneComp(v6);
    HomeSceneComp::getHomeWorld(SceneComp);
    if ( *(_WORD *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
      __asan_report_store16(this, HomeComp);
    toThisPtr<HomeWorld>((HomeWorld *)this);
  }
  else
  {
    std::shared_ptr<HomeWorld>::shared_ptr((std::shared_ptr<HomeWorld> *const)this, 0LL);
  }
  std::shared_ptr<Home>::~shared_ptr((std::shared_ptr<Home> *const)(v2 + 32));
  if ( v9 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
  }
  result._M_ptr = (std::__shared_ptr<HomeWorld,(__gnu_cxx::_Lock_policy)2>::element_type *)this;
  return result;
};

// Line 2563: range 0000000013E55C30-0000000013E55E8C
void __cdecl PlayerSceneComp::notifyPlayerWorldAndSelf(
        PlayerSceneComp *const this,
        const google::protobuf::Message *proto)
{
  unsigned __int64 v2; // r12
  __int64 v3; // rax
  _DWORD *v4; // r13
  unsigned __int64 v5; // rax
  unsigned __int64 v6; // rdx
  char v7; // al
  std::__shared_ptr_access<PlayerWorld,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v8; // rcx
  char v9[128]; // [rsp+10h] [rbp-80h] BYREF

  v2 = (unsigned __int64)v9;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_1(96LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "2 32 16 18 cur_world_ptr:2565 64 16 14 world_ptr:2571";
  *(_QWORD *)(v2 + 16) = PlayerSceneComp::notifyPlayerWorldAndSelf;
  v4 = (_DWORD *)(v2 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = -219021312;
  v4[536862722] = -202178560;
  PlayerSceneComp::getCurWorld((const PlayerSceneComp *const)(v2 + 32));
  if ( std::operator==<World>((const std::shared_ptr<World> *)(v2 + 32), 0LL) )
    goto LABEL_10;
  v5 = (unsigned __int64)std::__shared_ptr_access<World,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<World,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 32));
  if ( *(_BYTE *)((v5 >> 3) + 0x7FFF8000) )
    v5 = __asan_report_load8();
  v6 = *(_QWORD *)v5 + 16LL;
  if ( *(_BYTE *)((v6 >> 3) + 0x7FFF8000) )
    v5 = __asan_report_load8();
  if ( (*(unsigned int (__fastcall **)(unsigned __int64))v6)(v5) == 2 )
LABEL_10:
    v7 = 1;
  else
    v7 = 0;
  if ( v7 )
  {
    if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
      __asan_report_load8();
    Player::sendProto(this->player_, proto);
  }
  PlayerSceneComp::getMyPlayerWorld((const PlayerSceneComp *const)(v2 + 64));
  if ( std::operator!=<PlayerWorld>((const std::shared_ptr<PlayerWorld> *)(v2 + 64), 0LL) )
  {
    v8 = std::__shared_ptr_access<PlayerWorld,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<PlayerWorld,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 64));
    World::notifyAllPlayer<google::protobuf::Message>(v8, proto, 0);
  }
  std::shared_ptr<PlayerWorld>::~shared_ptr((std::shared_ptr<PlayerWorld> *const)(v2 + 64));
  std::shared_ptr<World>::~shared_ptr((std::shared_ptr<World> *const)(v2 + 32));
  if ( v9 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8008) = 0;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8008) = -168430091;
  }
};

// Line 2579: range 0000000013E55E8E-0000000013E56129
void __cdecl PlayerSceneComp::addQuestNpcEntity(PlayerSceneComp *const this, Npc *npc)
{
  unsigned __int64 v2; // r12
  __int64 v3; // rax
  _DWORD *v4; // r13
  unsigned __int64 v5; // r14
  std::shared_ptr<Npc> *v6; // r8
  std::pair<std::__detail::_Node_iterator<std::pair<long unsigned int const,std::weak_ptr<Npc> >,false,false>,bool> v7; // rax
  common::milog::MiLogStream *v8; // rax
  common::milog::MiLogStream *v9; // rax
  common::milog::MiLogStream *v10; // r14
  unsigned int val; // [rsp+1Ch] [rbp-E4h] BYREF
  std::enable_shared_from_this<Entity> v12; // [rsp+20h] [rbp-E0h] BYREF
  common::milog::MiLogStream v13; // [rsp+30h] [rbp-D0h] BYREF
  char v14[176]; // [rsp+50h] [rbp-B0h] BYREF

  v2 = (unsigned __int64)v14;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_1(128LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "3 48 4 11 npc_id:2580 64 8 8 key:2584 96 16 12 npc_ptr:2581";
  *(_QWORD *)(v2 + 16) = PlayerSceneComp::addQuestNpcEntity;
  v4 = (_DWORD *)(v2 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = -234556943;
  v4[536862722] = -218959360;
  v4[536862723] = -202178560;
  *(_DWORD *)(v2 + 48) = Npc::getNpcId(npc);
  std::enable_shared_from_this<Entity>::shared_from_this(&v12);
  std::dynamic_pointer_cast<Npc,Entity>((const std::shared_ptr<Entity> *)(v2 + 96));
  std::shared_ptr<Entity>::~shared_ptr((std::shared_ptr<Entity> *const)&v12);
  if ( std::__shared_ptr<Npc,(__gnu_cxx::_Lock_policy)2>::operator bool((const std::__shared_ptr<Npc,(__gnu_cxx::_Lock_policy)2> *const)(v2 + 96)) )
  {
    v5 = (unsigned __int64)*(unsigned int *)(v2 + 48) << 32;
    *(_QWORD *)(v2 + 64) = v5 + Npc::getParentQuestId(npc);
    v7 = std::unordered_map<unsigned long,std::weak_ptr<Npc>>::emplace<unsigned long &,std::shared_ptr<Npc> &>(
           &this->quest_npc_entity_map_,
           (unsigned __int64 *)(v2 + 64),
           (std::shared_ptr<Npc> *)(v2 + 96),
           (unsigned __int64 *)&this->quest_npc_entity_map_,
           v6);
    if ( !v7.second )
    {
      common::milog::MiLogStream::create(
        &v13,
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/scene/player_scene_comp.cpp",
        "addQuestNpcEntity",
        2587);
      v8 = common::milog::MiLogStream::operator<<<char [17],(char *[17])0>(&v13, (const char (*)[17])"duplicated npc :");
      v9 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v8, (const unsigned int *)(v2 + 48));
      v10 = common::milog::MiLogStream::operator<<<char [11],(char *[11])0>(v9, (const char (*)[11])" quest id:");
      val = Npc::getParentQuestId(npc);
      common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v10, &val);
      common::milog::MiLogStream::~MiLogStream(&v13);
    }
  }
  std::shared_ptr<Npc>::~shared_ptr((std::shared_ptr<Npc> *const)(v2 + 96));
  if ( v14 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
};

// Line 2593: range 0000000013E5612A-0000000013E5633C
void __cdecl PlayerSceneComp::removeQuestNpcEntity(PlayerSceneComp *const this, Npc *npc)
{
  unsigned __int64 v2; // rbx
  __int64 v3; // rax
  _DWORD *v4; // r12
  unsigned __int64 v5; // r14
  common::milog::MiLogStream *v6; // rax
  common::milog::MiLogStream *v7; // rax
  common::milog::MiLogStream *v8; // r13
  unsigned int val; // [rsp+1Ch] [rbp-B4h] BYREF
  common::milog::MiLogStream v10; // [rsp+20h] [rbp-B0h] BYREF
  char v11[144]; // [rsp+40h] [rbp-90h] BYREF

  v2 = (unsigned __int64)v11;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_1(96LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "2 48 4 11 npc_id:2594 64 8 8 key:2595";
  *(_QWORD *)(v2 + 16) = PlayerSceneComp::removeQuestNpcEntity;
  v4 = (_DWORD *)(v2 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = -234556943;
  v4[536862722] = -202116352;
  *(_DWORD *)(v2 + 48) = Npc::getNpcId(npc);
  v5 = (unsigned __int64)*(unsigned int *)(v2 + 48) << 32;
  *(_QWORD *)(v2 + 64) = v5 + Npc::getParentQuestId(npc);
  if ( !std::unordered_map<unsigned long,std::weak_ptr<Npc>>::erase(
          &this->quest_npc_entity_map_,
          (const std::unordered_map<long unsigned int,std::weak_ptr<Npc>>::key_type *)(v2 + 64)) )
  {
    common::milog::MiLogStream::create(
      &v10,
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/scene/player_scene_comp.cpp",
      "removeQuestNpcEntity",
      2598);
    v6 = common::milog::MiLogStream::operator<<<char [17],(char *[17])0>(&v10, (const char (*)[17])" npc not exist :");
    v7 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v6, (const unsigned int *)(v2 + 48));
    v8 = common::milog::MiLogStream::operator<<<char [11],(char *[11])0>(v7, (const char (*)[11])" quest id:");
    val = Npc::getParentQuestId(npc);
    common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v8, &val);
    common::milog::MiLogStream::~MiLogStream(&v10);
  }
  if ( v11 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8008) = 0;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8008) = -168430091;
  }
};

// Line 2604: range 0000000013E5633E-0000000013E56506
// local variable allocation has failed, the output may be wrong!
NpcPtr __cdecl PlayerSceneComp::findNpcEntity(PlayerSceneComp *const this, uint32_t npc_id, uint32_t parent_quest_id)
{
  uint32_t v3; // ecx
  unsigned __int64 v4; // rbx
  __int64 v5; // rax
  _DWORD *v6; // r12
  NpcPtr result; // rax
  uint32_t parent_quest_ida; // [rsp+8h] [rbp-A8h]
  std::__detail::_Node_iterator_base<std::pair<long unsigned int const,std::weak_ptr<Npc> >,false> __y; // [rsp+28h] [rbp-88h] BYREF
  char v11[128]; // [rsp+30h] [rbp-80h] BYREF

  parent_quest_ida = v3;
  v4 = (unsigned __int64)v11;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v5 = __asan_stack_malloc_1(96LL);
    if ( v5 )
      v4 = v5;
  }
  *(_QWORD *)v4 = 1102416563LL;
  *(_QWORD *)(v4 + 8) = "2 32 8 8 key:2605 64 8 9 iter:2606";
  *(_QWORD *)(v4 + 16) = PlayerSceneComp::findNpcEntity;
  v6 = (_DWORD *)(v4 >> 3);
  v6[536862720] = -235802127;
  v6[536862721] = -218959360;
  v6[536862722] = -202116352;
  *(_QWORD *)(v4 + 32) = ((unsigned __int64)parent_quest_id << 32) + parent_quest_ida;
  *(std::unordered_map<long unsigned int,std::weak_ptr<Npc>>::iterator *)(v4 + 64) = std::unordered_map<unsigned long,std::weak_ptr<Npc>>::find(
                                                                                       (std::unordered_map<long unsigned int,std::weak_ptr<Npc>> *const)(*(_QWORD *)&npc_id + 1016LL),
                                                                                       (const std::unordered_map<long unsigned int,std::weak_ptr<Npc>>::key_type *)(v4 + 32));
  __y._M_cur = std::unordered_map<unsigned long,std::weak_ptr<Npc>>::end((std::unordered_map<long unsigned int,std::weak_ptr<Npc>> *const)(*(_QWORD *)&npc_id + 1016LL))._M_cur;
  if ( std::__detail::operator==<std::pair<unsigned long const,std::weak_ptr<Npc>>,false>(
         (const std::__detail::_Node_iterator_base<std::pair<long unsigned int const,std::weak_ptr<Npc> >,false> *)(v4 + 64),
         &__y) )
  {
    std::shared_ptr<Npc>::shared_ptr((std::shared_ptr<Npc> *const)this, 0LL);
  }
  else
  {
    std::__detail::_Node_iterator<std::pair<unsigned long const,std::weak_ptr<Npc>>,false,false>::operator->((const std::__detail::_Node_iterator<std::pair<long unsigned int const,std::weak_ptr<Npc> >,false,false> *const)(v4 + 64));
    if ( *(_WORD *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
      __asan_report_store16(this, &__y);
    result = std::weak_ptr<Npc>::lock((const std::weak_ptr<Npc> *const)this);
  }
  if ( v11 == (char *)v4 )
  {
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0LL;
    *(_DWORD *)((v4 >> 3) + 0x7FFF8008) = 0;
  }
  else
  {
    *(_QWORD *)v4 = 1172321806LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v4 >> 3) + 0x7FFF8008) = -168430091;
  }
  result._M_ptr = (std::__shared_ptr<Npc,(__gnu_cxx::_Lock_policy)2>::element_type *)this;
  return result;
};

// Line 2616: range 0000000013E56508-0000000013E57204
void __cdecl PlayerSceneComp::hitClientTrivialEntity(
        PlayerSceneComp *const this,
        const proto::Vector *pos,
        uint32_t source_entity_id)
{
  unsigned __int64 v3; // r13
  __int64 v4; // rax
  _DWORD *v5; // r12
  common::milog::MiLogStream *v6; // r14
  common::milog::MiLogStream *v7; // rax
  common::milog::MiLogStream *v8; // rax
  std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v9; // rax
  common::milog::MiLogStream *v10; // r14
  std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v11; // rax
  std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v12; // rax
  bool v13; // r14
  PlayerWorldScene *v14; // rax
  uint32_t v15; // edx
  uint32_t v16; // esi
  uint32_t LogLevel; // eax
  common::milog::MiLogStream *v18; // rax
  Scene *v19; // rax
  common::milog::MiLogStream *v20; // rax
  unsigned int *v21; // [rsp+0h] [rbp-310h]
  unsigned int *v22; // [rsp+8h] [rbp-308h]
  uint32_t source_entity_ida; // [rsp+Ch] [rbp-304h]
  const proto::Vector *posa; // [rsp+10h] [rbp-300h]
  PlayerSceneComp *thisa; // [rsp+18h] [rbp-2F8h]
  unsigned int *v26; // [rsp+20h] [rbp-2F0h]
  uint32_t now; // [rsp+2Ch] [rbp-2E4h]
  uint32_t rand; // [rsp+30h] [rbp-2E0h]
  SceneEnvAnimalComp *env_animal_comp; // [rsp+38h] [rbp-2D8h]
  Vector3 animal_pos; // [rsp+44h] [rbp-2CCh] BYREF
  std::shared_ptr<Config> v31; // [rsp+50h] [rbp-2C0h] BYREF
  std::deque<Vector3>::iterator __y; // [rsp+60h] [rbp-2B0h] BYREF
  std::deque<Vector3>::iterator __last; // [rsp+80h] [rbp-290h] BYREF
  std::deque<Vector3>::iterator __first; // [rsp+A0h] [rbp-270h] BYREF
  char v35[592]; // [rsp+C0h] [rbp-250h] BYREF

  HIDWORD(v22) = source_entity_id;
  v3 = (unsigned __int64)v35;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_4(544LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "14 48 4 13 env_type:2643 64 4 15 env_weight:2644 80 4 12 drop_id:2645 96 4 16 drop_weight:2646 1"
                        "12 4 7 cd:2647 128 4 17 drop_num_max:2648 144 8 18 output_result:2700 176 12 15 entity_pos:2617 "
                        "208 16 14 scene_ptr:2625 240 16 20 world_scene_ptr:2635 272 24 18 action_reason:2698 336 24 19 i"
                        "tem_param_vec:2699 400 32 9 iter:2618 464 40 15 drop_param:2692";
  *(_QWORD *)(v3 + 16) = PlayerSceneComp::hitClientTrivialEntity;
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = -234556943;
  v5[536862722] = -234556924;
  v5[536862723] = -234556924;
  v5[536862724] = 61956;
  v5[536862724] = -234881024;
  v5[536862725] = 62194;
  v5[536862725] = 0x4000000;
  v5[536862726] = 62194;
  v5[536862727] = 62194;
  v5[536862728] = 62194;
  v5[536862729] = -218959360;
  v5[536862730] = 62194;
  v5[536862731] = -218959360;
  v5[536862732] = 62194;
  v5[536862733] = -219021312;
  v5[536862734] = 62194;
  v5[536862735] = -218103808;
  v5[536862736] = -202116109;
  Vector3::Vector3((Vector3 *const)(v3 + 176), pos);
  std::deque<Vector3>::end(&__last, &this->bush_drop_pos_deque_);
  std::deque<Vector3>::begin(&__first, &this->bush_drop_pos_deque_);
  std::find<std::_Deque_iterator<Vector3,Vector3&,Vector3*>,Vector3>(
    (std::_Deque_iterator<Vector3,Vector3&,Vector3*> *)(v3 + 400),
    __first,
    __last,
    (const Vector3 *)(v3 + 176));
  std::deque<Vector3>::end(&__y, &this->bush_drop_pos_deque_);
  if ( std::operator!=<Vector3,Vector3&,Vector3*>(
         (const std::_Deque_iterator<Vector3,Vector3&,Vector3*> *)(v3 + 400),
         &__y) )
  {
    common::milog::MiLogStream::create(
      (common::milog::MiLogStream *)&__y,
      &common::milog::MiLogDefault::default_log_obj_,
      1u,
      "./src/scene/player_scene_comp.cpp",
      "hitClientTrivialEntity",
      2621);
    v6 = common::milog::MiLogStream::operator<<<char [5],(char *[5])0>(
           (common::milog::MiLogStream *const)&__y,
           (const char (*)[5])"uid:");
    if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
      __asan_report_load8();
    *(_DWORD *)(v3 + 128) = Player::getUid(this->player_);
    v7 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v6, (const unsigned int *)(v3 + 128));
    v8 = common::milog::MiLogStream::operator<<<char [22],(char *[22])0>(
           v7,
           (const char (*)[22])" already drop on pos:");
    operator<<(v8, (const Vector3 *)(v3 + 176));
    common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)&__y);
  }
  else
  {
    PlayerSceneComp::getCurScene((const PlayerSceneComp *const)(v3 + 208));
    if ( !std::operator==<Scene>((const std::shared_ptr<Scene> *)(v3 + 208), 0LL) )
    {
      v9 = std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 208));
      if ( Scene::getSceneType(v9) == SCENE_WORLD )
      {
        std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::operator*((const std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 208));
        toPtr<PlayerWorldScene,Scene>((Scene *)(v3 + 240));
        if ( std::operator==<PlayerWorldScene>((const std::shared_ptr<PlayerWorldScene> *)(v3 + 240), 0LL) )
        {
          common::milog::MiLogStream::create(
            (common::milog::MiLogStream *)&__y,
            &common::milog::MiLogDefault::default_log_obj_,
            3u,
            "./src/scene/player_scene_comp.cpp",
            "hitClientTrivialEntity",
            2638);
          common::milog::MiLogStream::operator<<<char [31],(char *[31])0>(
            (common::milog::MiLogStream *const)&__y,
            (const char (*)[31])"toPtr<PlayerWorldScene> failed");
          common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)&__y);
        }
        else
        {
          *(_DWORD *)(v3 + 48) = 0;
          *(_DWORD *)(v3 + 64) = 0;
          *(_DWORD *)(v3 + 80) = 0;
          *(_DWORD *)(v3 + 96) = 0;
          *(_DWORD *)(v3 + 112) = 0;
          *(_DWORD *)(v3 + 128) = 0;
          ServiceBox::findService<GameserverService>();
          GameserverService::getConfig((GameserverService *const)&v31);
          v12 = std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false> *const)&v31);
          v13 = ConstValueExcelConfigMgr::findConstValue<unsigned int,unsigned int &,unsigned int &,unsigned int &,unsigned int &,unsigned int &>(
                  &v12->design_config.txt_config_mgr.const_value_config_mgr,
                  CONST_VALUE_BUSH_DROP,
                  (unsigned int *)(v3 + 48),
                  (unsigned int *)(v3 + 64),
                  (unsigned int *)(v3 + 80),
                  (unsigned int *)(v3 + 96),
                  (unsigned int *)(v3 + 112),
                  (unsigned int *)(v3 + 128),
                  v21,
                  v22,
                  (unsigned int *)pos,
                  (unsigned int *)this,
                  v26) != 0;
          std::shared_ptr<Config>::~shared_ptr(&v31);
          if ( v13 )
          {
            common::milog::MiLogStream::create(
              (common::milog::MiLogStream *)&__y,
              &common::milog::MiLogDefault::default_log_obj_,
              3u,
              "./src/scene/player_scene_comp.cpp",
              "hitClientTrivialEntity",
              2657);
            common::milog::MiLogStream::operator<<<char [44],(char *[44])0>(
              (common::milog::MiLogStream *const)&__y,
              (const char (*)[44])"findConstValue CONST_VALUE_BUSH_DROP failed");
            common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)&__y);
          }
          else if ( (unsigned int)(*(_DWORD *)(v3 + 64) + *(_DWORD *)(v3 + 96)) <= 0x64 )
          {
            now = common::tools::TimeUtils::getNow();
            if ( *(_BYTE *)(((unsigned __int64)&thisa->trivial_entity_drop_time_ >> 3) + 0x7FFF8000) != 0
              && (char)((((_BYTE)thisa + 84) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&thisa->trivial_entity_drop_time_ >> 3)
                                                                   + 0x7FFF8000) )
            {
              __asan_report_load4(&thisa->trivial_entity_drop_time_);
            }
            if ( (!thisa->trivial_entity_drop_time_ || now >= thisa->trivial_entity_drop_time_ + *(_DWORD *)(v3 + 112))
              && PlayerSceneComp::getTrivialEntityDropNum(thisa) < *(_DWORD *)(v3 + 128) )
            {
              rand = common::tools::RandomUtils::rand<unsigned int>(1u, 0x64u);
              if ( rand > *(_DWORD *)(v3 + 64) )
              {
                if ( rand <= *(_DWORD *)(v3 + 64) + *(_DWORD *)(v3 + 96) )
                {
                  DropParam::DropParam((DropParam *const)(v3 + 464));
                  *(_DWORD *)(v3 + 464) = *(_DWORD *)(v3 + 80);
                  *(_DWORD *)(v3 + 468) = 1;
                  *(_DWORD *)(v3 + 472) = source_entity_ida;
                  Vector3::Vector3(&animal_pos, posa);
                  *(Vector3 *)(v3 + 480) = animal_pos;
                  if ( *(_BYTE *)(((unsigned __int64)&thisa->player_ >> 3) + 0x7FFF8000) )
                    __asan_report_load8();
                  *(_DWORD *)(v3 + 476) = Player::getUid(thisa->player_);
                  ActionReason::ActionReason(
                    (ActionReason *const)(v3 + 272),
                    ACTION_REASON_HIT_CLIENT_TRIVIAL_ENTITY,
                    ITEM_LIMIT_DAILY_SUBFIELD_DROP);
                  std::vector<ItemParam>::vector((std::vector<ItemParam> *const)(v3 + 336));
                  v15 = *(_DWORD *)(v3 + 468);
                  v16 = *(_DWORD *)(v3 + 464);
                  if ( *(_BYTE *)(((unsigned __int64)&thisa->player_ >> 3) + 0x7FFF8000) )
                    __asan_report_load8();
                  *(OutputResult *)(v3 + 144) = DropUtils::dropAndSplitItems(
                                                  thisa->player_,
                                                  v16,
                                                  v15,
                                                  (const ActionReason *)(v3 + 272),
                                                  (std::vector<ItemParam> *)(v3 + 336));
                  if ( *(_DWORD *)(v3 + 144) )
                  {
                    LogLevel = OutputResult::getLogLevel((const OutputResult *const)(v3 + 144));
                    common::milog::MiLogStream::create(
                      (common::milog::MiLogStream *)&__y,
                      &common::milog::MiLogDefault::default_log_obj_,
                      LogLevel,
                      "./src/scene/player_scene_comp.cpp",
                      "hitClientTrivialEntity",
                      2703);
                    v18 = common::milog::MiLogStream::operator<<<char [35],(char *[35])0>(
                            (common::milog::MiLogStream *const)&__y,
                            (const char (*)[35])"dropAndSplitItems failed, drop_id:");
                    common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                      v18,
                      (const unsigned int *)(v3 + 80));
                    common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)&__y);
                  }
                  else if ( !std::vector<ItemParam>::empty((const std::vector<ItemParam> *const)(v3 + 336))
                         && (v19 = (Scene *)std::__shared_ptr_access<PlayerWorldScene,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<PlayerWorldScene,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 240)),
                             Scene::dropItems(
                               v19,
                               (const std::vector<ItemParam> *)(v3 + 336),
                               (const DropParam *)(v3 + 464),
                               (const ActionReason *)(v3 + 272))) )
                  {
                    common::milog::MiLogStream::create(
                      (common::milog::MiLogStream *)&__y,
                      &common::milog::MiLogDefault::default_log_obj_,
                      3u,
                      "./src/scene/player_scene_comp.cpp",
                      "hitClientTrivialEntity",
                      2712);
                    v20 = common::milog::MiLogStream::operator<<<char [27],(char *[27])0>(
                            (common::milog::MiLogStream *const)&__y,
                            (const char (*)[27])"dropItems failed drop_id: ");
                    common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                      v20,
                      (const unsigned int *)(v3 + 80));
                    common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)&__y);
                  }
                  else
                  {
                    PlayerSceneComp::updateTrivialEntityDropNum(thisa, (const Vector3 *)(v3 + 176));
                  }
                  std::vector<ItemParam>::~vector((std::vector<ItemParam> *const)(v3 + 336));
                }
              }
              else if ( *(_DWORD *)(v3 + 48) )
              {
                v14 = std::__shared_ptr_access<PlayerWorldScene,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<PlayerWorldScene,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 240));
                env_animal_comp = PlayerWorldScene::getEnvAnimalComp(v14);
                Vector3::Vector3(&animal_pos, posa);
                SceneEnvAnimalComp::createAnimal(env_animal_comp, *(data::EnvironmentType *)(v3 + 48), &animal_pos, 0);
                PlayerSceneComp::updateTrivialEntityDropNum(thisa, (const Vector3 *)(v3 + 176));
              }
              else
              {
                common::milog::MiLogStream::create(
                  (common::milog::MiLogStream *)&__y,
                  &common::milog::MiLogDefault::default_log_obj_,
                  3u,
                  "./src/scene/player_scene_comp.cpp",
                  "hitClientTrivialEntity",
                  2682);
                common::milog::MiLogStream::operator<<<char [15],(char *[15])0>(
                  (common::milog::MiLogStream *const)&__y,
                  (const char (*)[15])"env_type is 0!");
                common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)&__y);
              }
            }
          }
          else
          {
            common::milog::MiLogStream::create(
              (common::milog::MiLogStream *)&__y,
              &common::milog::MiLogDefault::default_log_obj_,
              3u,
              "./src/scene/player_scene_comp.cpp",
              "hitClientTrivialEntity",
              2664);
            common::milog::MiLogStream::operator<<<char [32],(char *[32])0>(
              (common::milog::MiLogStream *const)&__y,
              (const char (*)[32])"total_weight is biger than 100!");
            common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)&__y);
          }
        }
        std::shared_ptr<PlayerWorldScene>::~shared_ptr((std::shared_ptr<PlayerWorldScene> *const)(v3 + 240));
      }
      else
      {
        common::milog::MiLogStream::create(
          (common::milog::MiLogStream *)&__y,
          &common::milog::MiLogDefault::default_log_obj_,
          1u,
          "./src/scene/player_scene_comp.cpp",
          "hitClientTrivialEntity",
          2632);
        v10 = common::milog::MiLogStream::operator<<<char [34],(char *[34])0>(
                (common::milog::MiLogStream *const)&__y,
                (const char (*)[34])off_25182200);
        v11 = std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 208));
        *(_DWORD *)(v3 + 128) = Scene::getSceneId(v11);
        common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v10, (const unsigned int *)(v3 + 128));
        common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)&__y);
      }
    }
    std::shared_ptr<Scene>::~shared_ptr((std::shared_ptr<Scene> *const)(v3 + 208));
  }
  if ( v35 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8010) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8018) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8020) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8028) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8030) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8038) = 0LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8040) = 0;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8020) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8028) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8030) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8038) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8040) = -168430091;
  }
};

// Line 2721: range 0000000013E57206-0000000013E58F79
void __fastcall PlayerSceneComp::hitTree(
        PlayerSceneComp *const this,
        uint32_t tree_type,
        const Vector3 *tree_pos,
        const Vector3 *drop_pos)
{
  unsigned __int64 v4; // r13
  __int64 v5; // rax
  _DWORD *v6; // r12
  common::milog::MiLogStream *v7; // rax
  std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v8; // rax
  common::milog::MiLogStream *v9; // r14
  std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v10; // rax
  std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v11; // rax
  unsigned __int64 *v12; // r8
  bool v13; // r14
  std::vector<HitTreePos>::size_type v14; // r14
  std::vector<HitTreePos>::reference v15; // rax
  std::vector<HitTreePos>::reference v16; // rdx
  int32_t *p_tree_type; // rax
  common::milog::MiLogStream *v18; // rax
  common::milog::MiLogStream *v19; // rax
  common::milog::MiLogStream *v20; // r14
  std::vector<HitTreePos>::reference v21; // rax
  common::milog::MiLogStream *v22; // rax
  common::milog::MiLogStream *v23; // rax
  __int64 v24; // rax
  __int64 v25; // rax
  std::vector<HitTreePos>::size_type v26; // r14
  std::vector<HitTreePos>::size_type v27; // rsi
  __int64 v28; // r14
  common::milog::MiLogStream *v29; // rax
  common::milog::MiLogStream *v30; // rax
  common::milog::MiLogStream *v31; // r14
  std::vector<HitTreePos>::value_type *v32; // rax
  std::vector<HitTreePos>::size_type v33; // r14
  common::milog::MiLogStream *v34; // rax
  common::milog::MiLogStream *v35; // rax
  common::milog::MiLogStream *v36; // r14
  std::vector<HitTreePos>::size_type v37; // r14
  common::milog::MiLogStream *v39; // rax
  common::milog::MiLogStream *v40; // rax
  common::milog::MiLogStream *v41; // rax
  std::vector<HitTreePos>::size_type v42; // r14
  common::milog::MiLogStream *v43; // rax
  common::milog::MiLogStream *v44; // rax
  common::milog::MiLogStream *v45; // r14
  std::vector<HitTreePos>::reference v46; // rax
  int32_t v47; // edi
  bool v48; // dl
  std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v49; // rax
  bool v50; // r14
  std::vector<unsigned int>::size_type drop_times; // r14
  std::vector<unsigned int>::reference v52; // rax
  uint32_t *v53; // rdx
  std::vector<unsigned int>::reference v54; // rax
  uint32_t *v55; // rdx
  __int64 v56; // r14
  uint64_t last_hit_tree_drop_ms; // r15
  const char *v58; // rax
  std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v59; // rax
  common::milog::MiLogStream *v60; // rax
  uint32_t v61; // edx
  uint32_t v62; // esi
  uint32_t LogLevel; // eax
  common::milog::MiLogStream *v64; // rax
  Scene *v65; // rax
  common::milog::MiLogStream *v66; // rax
  PlayerWorldScene *v67; // rcx
  PlayerWatcherComp *WatcherComp; // rax
  uint32_t prob; // [rsp+3Ch] [rbp-324h]
  uint32_t rand; // [rsp+40h] [rbp-320h]
  HitTreePos *hit_tree_pos_ptr; // [rsp+48h] [rbp-318h]
  uint64_t now_ms; // [rsp+50h] [rbp-310h]
  const data::TreeDropExcelConfig *tree_drop_excel_config; // [rsp+58h] [rbp-308h]
  std::shared_ptr<Config> v77; // [rsp+60h] [rbp-300h] BYREF
  common::milog::MiLogStream v78; // [rsp+70h] [rbp-2F0h] BYREF
  char v79[720]; // [rsp+90h] [rbp-2D0h] BYREF

  v4 = (unsigned __int64)v79;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v5 = __asan_stack_malloc_4(672LL);
    if ( v5 )
      v4 = v5;
  }
  *(_QWORD *)v4 = 1102416563LL;
  *(_QWORD *)(v4 + 8) = "16 32 4 17 tree_vec_cap:2745 48 4 23 min_last_hit_index:2765 64 4 10 index:2766 80 4 12 drop_id:"
                        "2885 96 4 14 tree_type:2720 112 8 15 drop_cd_ms:2746 144 8 20 min_last_hit_ms:2764 176 8 18 outp"
                        "ut_result:2894 208 16 14 scene_ptr:2727 240 16 20 world_scene_ptr:2738 272 24 13 prob_vec:2840 3"
                        "36 24 18 action_reason:2892 400 24 19 item_param_vec:2893 464 24 25 extra_item_param_vec:2910 52"
                        "8 32 21 new_hit_tree_pos:2801 592 40 15 drop_param:2887";
  *(_QWORD *)(v4 + 16) = PlayerSceneComp::hitTree;
  v6 = (_DWORD *)(v4 >> 3);
  v6[536862720] = -235802127;
  v6[536862721] = -234556924;
  v6[536862722] = -234556924;
  v6[536862723] = 61956;
  v6[536862723] = -234881024;
  v6[536862724] = 62194;
  v6[536862724] = -234881024;
  v6[536862725] = 62194;
  v6[536862725] = -234881024;
  v6[536862726] = 62194;
  v6[536862727] = 62194;
  v6[536862728] = 62194;
  v6[536862729] = -218959360;
  v6[536862730] = 62194;
  v6[536862731] = -218959360;
  v6[536862732] = 62194;
  v6[536862733] = -218959360;
  v6[536862734] = 62194;
  v6[536862735] = -218959360;
  v6[536862736] = 62194;
  v6[536862737] = -219021312;
  v6[536862738] = 62194;
  v6[536862739] = -218103808;
  v6[536862740] = -202116109;
  *(_DWORD *)(v4 + 96) = tree_type;
  if ( !data::isValidTreeType(*(_DWORD *)(v4 + 96)) )
  {
    common::milog::MiLogStream::create(
      &v78,
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/scene/player_scene_comp.cpp",
      "hitTree",
      2724);
    v7 = common::milog::MiLogStream::operator<<<char [19],(char *[19])0>(&v78, (const char (*)[19])"invalid tree_type:");
    common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v7, (const unsigned int *)(v4 + 96));
    common::milog::MiLogStream::~MiLogStream(&v78);
    goto LABEL_115;
  }
  PlayerSceneComp::getCurScene((const PlayerSceneComp *const)(v4 + 208));
  if ( !std::operator==<Scene>((const std::shared_ptr<Scene> *)(v4 + 208), 0LL) )
  {
    v8 = std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 208));
    if ( Scene::getSceneType(v8) != SCENE_WORLD )
    {
      common::milog::MiLogStream::create(
        &v78,
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/scene/player_scene_comp.cpp",
        "hitTree",
        2735);
      v9 = common::milog::MiLogStream::operator<<<char [34],(char *[34])0>(&v78, (const char (*)[34])off_25182200);
      v10 = std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 208));
      *(_DWORD *)(v4 + 80) = Scene::getSceneId(v10);
      common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v9, (const unsigned int *)(v4 + 80));
      common::milog::MiLogStream::~MiLogStream(&v78);
      goto LABEL_114;
    }
    std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::operator*((const std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 208));
    toPtr<PlayerWorldScene,Scene>((Scene *)(v4 + 240));
    if ( std::operator==<PlayerWorldScene>((const std::shared_ptr<PlayerWorldScene> *)(v4 + 240), 0LL) )
    {
      common::milog::MiLogStream::create(
        &v78,
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/scene/player_scene_comp.cpp",
        "hitTree",
        2741);
      common::milog::MiLogStream::operator<<<char [31],(char *[31])0>(
        &v78,
        (const char (*)[31])"toPtr<PlayerWorldScene> failed");
      common::milog::MiLogStream::~MiLogStream(&v78);
LABEL_113:
      std::shared_ptr<PlayerWorldScene>::~shared_ptr((std::shared_ptr<PlayerWorldScene> *const)(v4 + 240));
      goto LABEL_114;
    }
    *(_DWORD *)(v4 + 32) = 0;
    *(_QWORD *)(v4 + 112) = 0LL;
    ServiceBox::findService<GameserverService>();
    GameserverService::getConfig((GameserverService *const)&v77);
    v11 = std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false> *const)&v77);
    v13 = ConstValueExcelConfigMgr::findConstValue<unsigned int,unsigned long &>(
            &v11->design_config.txt_config_mgr.const_value_config_mgr,
            CONST_VALUE_HIT_TREE_DROP_PARAM,
            (unsigned int *)(v4 + 32),
            (unsigned __int64 *)(v4 + 112),
            v12) != 0;
    std::shared_ptr<Config>::~shared_ptr(&v77);
    if ( v13 )
    {
      common::milog::MiLogStream::create(
        &v78,
        &common::milog::MiLogDefault::default_log_obj_,
        4u,
        "./src/scene/player_scene_comp.cpp",
        "hitTree",
        2751);
      common::milog::MiLogStream::operator<<<char [54],(char *[54])0>(
        &v78,
        (const char (*)[54])"findConstValue CONST_VALUE_HIT_TREE_DROP_PARAM failed");
      common::milog::MiLogStream::~MiLogStream(&v78);
      goto LABEL_113;
    }
    now_ms = common::tools::TimeUtils::getNowMs();
    if ( *(_BYTE *)(((unsigned __int64)&this->last_hit_tree_drop_ms_ >> 3) + 0x7FFF8000) )
      __asan_report_load8();
    if ( now_ms < this->last_hit_tree_drop_ms_ || now_ms - this->last_hit_tree_drop_ms_ < *(_QWORD *)(v4 + 112) )
    {
      common::milog::MiLogStream::create(
        &v78,
        &common::milog::MiLogDefault::default_log_obj_,
        1u,
        "./src/scene/player_scene_comp.cpp",
        "hitTree",
        2759);
      if ( *(_BYTE *)(((unsigned __int64)&this->last_hit_tree_drop_ms_ >> 3) + 0x7FFF8000) )
        __asan_report_load8();
      common::milog::MiLogStream::operator()(
        &v78,
        "in cd. now_ms:%lu last_hit_tree_drop_ms_:%lu",
        now_ms,
        this->last_hit_tree_drop_ms_);
      common::milog::MiLogStream::~MiLogStream(&v78);
      goto LABEL_113;
    }
    *(_QWORD *)(v4 + 144) = -1LL;
    *(_DWORD *)(v4 + 48) = -1;
    *(_DWORD *)(v4 + 64) = 0;
    for ( *(_DWORD *)(v4 + 64) = 0; ; ++*(_DWORD *)(v4 + 64) )
    {
      v14 = *(unsigned int *)(v4 + 64);
      if ( v14 >= std::vector<HitTreePos>::size(&this->hit_tree_pos_vec_) )
        break;
      v15 = std::vector<HitTreePos>::operator[](&this->hit_tree_pos_vec_, *(unsigned int *)(v4 + 64));
      if ( operator==(&v15->tree_pos, tree_pos) )
      {
        v16 = std::vector<HitTreePos>::operator[](&this->hit_tree_pos_vec_, *(unsigned int *)(v4 + 64));
        p_tree_type = &v16->tree_type;
        if ( *(_BYTE *)(((unsigned __int64)p_tree_type >> 3) + 0x7FFF8000) != 0
          && (char)(((unsigned __int8)p_tree_type & 7) + 3) >= *(_BYTE *)(((unsigned __int64)p_tree_type >> 3)
                                                                        + 0x7FFF8000) )
        {
          __asan_report_load4(p_tree_type);
        }
        if ( v16->tree_type != *(_DWORD *)(v4 + 96) )
        {
          common::milog::MiLogStream::create(
            &v78,
            &common::milog::MiLogDefault::default_log_obj_,
            1u,
            "./src/scene/player_scene_comp.cpp",
            "hitTree",
            2773);
          v18 = common::milog::MiLogStream::operator<<<char [21],(char *[21])0>(
                  &v78,
                  (const char (*)[21])"[HIT_TREE] tree pos:");
          v19 = operator<<(v18, tree_pos);
          v20 = common::milog::MiLogStream::operator<<<char [24],(char *[24])0>(
                  v19,
                  (const char (*)[24])" type mismatch. server:");
          v21 = std::vector<HitTreePos>::operator[](&this->hit_tree_pos_vec_, *(unsigned int *)(v4 + 64));
          v22 = common::milog::MiLogStream::operator<<<int,(int *)0>(v20, &v21->tree_type);
          v23 = common::milog::MiLogStream::operator<<<char [12],(char *[12])0>(v22, (const char (*)[12])off_251827E0);
          common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v23, (const unsigned int *)(v4 + 96));
          common::milog::MiLogStream::~MiLogStream(&v78);
          goto LABEL_113;
        }
        break;
      }
      v24 = (__int64)std::vector<HitTreePos>::operator[](&this->hit_tree_pos_vec_, *(unsigned int *)(v4 + 64));
      if ( *(_BYTE *)(((unsigned __int64)(v24 + 16) >> 3) + 0x7FFF8000) )
        v24 = __asan_report_load8();
      if ( *(_QWORD *)(v24 + 16) < *(_QWORD *)(v4 + 144) )
      {
        *(_DWORD *)(v4 + 48) = *(_DWORD *)(v4 + 64);
        v25 = (__int64)std::vector<HitTreePos>::operator[](&this->hit_tree_pos_vec_, *(unsigned int *)(v4 + 64));
        if ( *(_BYTE *)(((unsigned __int64)(v25 + 16) >> 3) + 0x7FFF8000) )
          v25 = __asan_report_load8();
        *(_QWORD *)(v4 + 144) = *(_QWORD *)(v25 + 16);
      }
    }
    v26 = *(unsigned int *)(v4 + 64);
    if ( v26 >= std::vector<HitTreePos>::size(&this->hit_tree_pos_vec_) )
    {
      v28 = *(unsigned int *)(v4 + 64);
      if ( v28 != std::vector<HitTreePos>::size(&this->hit_tree_pos_vec_) )
      {
        common::milog::MiLogStream::create(
          &v78,
          &common::milog::MiLogDefault::default_log_obj_,
          4u,
          "./src/scene/player_scene_comp.cpp",
          "hitTree",
          2795);
        v29 = common::milog::MiLogStream::operator<<<char [15],(char *[15])0>(
                &v78,
                (const char (*)[15])"invalid index:");
        v30 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                v29,
                (const unsigned int *)(v4 + 64));
        v31 = common::milog::MiLogStream::operator<<<char [25],(char *[25])0>(
                v30,
                (const char (*)[25])" hit_tree_pos_vec_.size:");
        *(_QWORD *)(v4 + 176) = std::vector<HitTreePos>::size(&this->hit_tree_pos_vec_);
        common::milog::MiLogStream::operator<<<unsigned long,(unsigned long *)0>(
          v31,
          (const unsigned __int64 *)(v4 + 176));
        common::milog::MiLogStream::~MiLogStream(&v78);
        goto LABEL_113;
      }
      if ( *(_DWORD *)(v4 + 64) >= *(_DWORD *)(v4 + 32) )
      {
        if ( *(int *)(v4 + 48) < 0
          || (v37 = *(int *)(v4 + 48), v37 >= std::vector<HitTreePos>::size(&this->hit_tree_pos_vec_)) )
        {
          common::milog::MiLogStream::create(
            &v78,
            &common::milog::MiLogDefault::default_log_obj_,
            4u,
            "./src/scene/player_scene_comp.cpp",
            "hitTree",
            2817);
          v39 = common::milog::MiLogStream::operator<<<char [31],(char *[31])0>(
                  &v78,
                  (const char (*)[31])"[HIT_TREE] min_last_hit_index:");
          v40 = common::milog::MiLogStream::operator<<<int,(int *)0>(v39, (const int *)(v4 + 48));
          v41 = common::milog::MiLogStream::operator<<<char [18],(char *[18])0>(
                  v40,
                  (const char (*)[18])" min_last_hit_ms:");
          common::milog::MiLogStream::operator<<<unsigned long,(unsigned long *)0>(
            v41,
            (const unsigned __int64 *)(v4 + 144));
          common::milog::MiLogStream::~MiLogStream(&v78);
          goto LABEL_113;
        }
        *(_DWORD *)(v4 + 64) = *(_DWORD *)(v4 + 48);
        v42 = *(unsigned int *)(v4 + 64);
        if ( v42 >= std::vector<HitTreePos>::size(&this->hit_tree_pos_vec_) )
        {
          common::milog::MiLogStream::create(
            &v78,
            &common::milog::MiLogDefault::default_log_obj_,
            4u,
            "./src/scene/player_scene_comp.cpp",
            "hitTree",
            2823);
          v43 = common::milog::MiLogStream::operator<<<char [15],(char *[15])0>(
                  &v78,
                  (const char (*)[15])"invalid index:");
          v44 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                  v43,
                  (const unsigned int *)(v4 + 64));
          v45 = common::milog::MiLogStream::operator<<<char [25],(char *[25])0>(
                  v44,
                  (const char (*)[25])" hit_tree_pos_vec_.size:");
          *(_QWORD *)(v4 + 176) = std::vector<HitTreePos>::size(&this->hit_tree_pos_vec_);
          common::milog::MiLogStream::operator<<<unsigned long,(unsigned long *)0>(
            v45,
            (const unsigned __int64 *)(v4 + 176));
          common::milog::MiLogStream::~MiLogStream(&v78);
          goto LABEL_113;
        }
        v46 = std::vector<HitTreePos>::operator[](&this->hit_tree_pos_vec_, *(unsigned int *)(v4 + 64));
        hit_tree_pos_ptr = v46;
        if ( *(char *)(((unsigned __int64)v46 >> 3) + 0x7FFF8000) < 0
          || *(_BYTE *)((((unsigned __int64)&v46->tree_pos.z + 3) >> 3) + 0x7FFF8000) != 0
          && (((unsigned __int8)v46 + 11) & 7) >= *(_BYTE *)((((unsigned __int64)&v46->tree_pos.z + 3) >> 3) + 0x7FFF8000) )
        {
          __asan_report_store_n(v46, 12LL);
        }
        if ( ((unsigned __int8)tree_pos & 7) >= *(_BYTE *)(((unsigned __int64)tree_pos >> 3) + 0x7FFF8000)
          && *(_BYTE *)(((unsigned __int64)tree_pos >> 3) + 0x7FFF8000) != 0
          || *(_BYTE *)((((unsigned __int64)&tree_pos->z + 3) >> 3) + 0x7FFF8000) != 0
          && (((unsigned __int8)tree_pos + 11) & 7) >= *(_BYTE *)((((unsigned __int64)&tree_pos->z + 3) >> 3)
                                                                + 0x7FFF8000) )
        {
          __asan_report_load_n(tree_pos, 12LL);
        }
        *(_QWORD *)&hit_tree_pos_ptr->tree_pos.x = *(_QWORD *)&tree_pos->x;
        hit_tree_pos_ptr->tree_pos.z = tree_pos->z;
        v47 = *(_DWORD *)(v4 + 96);
        v27 = (((_BYTE)hit_tree_pos_ptr + 12) & 7u) + 3;
        v48 = *(_BYTE *)(((unsigned __int64)&hit_tree_pos_ptr->tree_type >> 3) + 0x7FFF8000) != 0
           && (char)((((_BYTE)hit_tree_pos_ptr + 12) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&hit_tree_pos_ptr->tree_type >> 3)
                                                                           + 0x7FFF8000);
        if ( v48 )
        {
          v47 = (_DWORD)hit_tree_pos_ptr + 12;
          __asan_report_store4(&hit_tree_pos_ptr->tree_type, v27, v48);
        }
        hit_tree_pos_ptr->tree_type = v47;
        if ( *(_BYTE *)(((unsigned __int64)&hit_tree_pos_ptr->drop_times >> 3) + 0x7FFF8000) != 0
          && *(_BYTE *)(((unsigned __int64)&hit_tree_pos_ptr->drop_times >> 3) + 0x7FFF8000) <= 3 )
        {
          __asan_report_store4(&hit_tree_pos_ptr->drop_times, v27, (_BYTE)hit_tree_pos_ptr + 24);
        }
        hit_tree_pos_ptr->drop_times = 0;
LABEL_62:
        if ( hit_tree_pos_ptr )
        {
          if ( *(_BYTE *)(((unsigned __int64)&hit_tree_pos_ptr->last_hit_ms >> 3) + 0x7FFF8000) )
            __asan_report_store8(&hit_tree_pos_ptr->last_hit_ms, v27);
          hit_tree_pos_ptr->last_hit_ms = now_ms;
          std::vector<unsigned int>::vector((std::vector<unsigned int> *const)(v4 + 272));
          ServiceBox::findService<GameserverService>();
          GameserverService::getConfig((GameserverService *const)&v77);
          v49 = std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false> *const)&v77);
          v50 = ConstValueExcelConfigMgr::findConstValue<unsigned int>(
                  &v49->design_config.txt_config_mgr.const_value_config_mgr,
                  CONST_VALUE_HIT_TREE_DROP_PROB,
                  (std::vector<unsigned int> *)(v4 + 272)) != 0;
          std::shared_ptr<Config>::~shared_ptr(&v77);
          if ( v50 )
          {
            common::milog::MiLogStream::create(
              &v78,
              &common::milog::MiLogDefault::default_log_obj_,
              4u,
              "./src/scene/player_scene_comp.cpp",
              "hitTree",
              2843);
            common::milog::MiLogStream::operator<<<char [53],(char *[53])0>(
              &v78,
              (const char (*)[53])"findConstValue CONST_VALUE_HIT_TREE_DROP_PROB failed");
            common::milog::MiLogStream::~MiLogStream(&v78);
          }
          else if ( std::vector<unsigned int>::empty((const std::vector<unsigned int> *const)(v4 + 272)) )
          {
            common::milog::MiLogStream::create(
              &v78,
              &common::milog::MiLogDefault::default_log_obj_,
              4u,
              "./src/scene/player_scene_comp.cpp",
              "hitTree",
              2848);
            common::milog::MiLogStream::operator<<<char [39],(char *[39])0>(
              &v78,
              (const char (*)[39])"CONST_VALUE_HIT_TREE_DROP_PROB invalid");
            common::milog::MiLogStream::~MiLogStream(&v78);
          }
          else
          {
            if ( *(_BYTE *)(((unsigned __int64)&hit_tree_pos_ptr->drop_times >> 3) + 0x7FFF8000) != 0
              && *(_BYTE *)(((unsigned __int64)&hit_tree_pos_ptr->drop_times >> 3) + 0x7FFF8000) <= 3 )
            {
              __asan_report_load4(&hit_tree_pos_ptr->drop_times);
            }
            drop_times = hit_tree_pos_ptr->drop_times;
            if ( drop_times >= std::vector<unsigned int>::size((const std::vector<unsigned int> *const)(v4 + 272)) )
            {
              v54 = std::vector<unsigned int>::back((std::vector<unsigned int> *const)(v4 + 272));
              v55 = v54;
              if ( *(_BYTE *)(((unsigned __int64)v54 >> 3) + 0x7FFF8000) != 0
                && (char)(((unsigned __int8)v54 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)v54 >> 3) + 0x7FFF8000) )
              {
                __asan_report_load4(v54);
              }
              prob = *v55;
            }
            else
            {
              if ( *(_BYTE *)(((unsigned __int64)&hit_tree_pos_ptr->drop_times >> 3) + 0x7FFF8000) != 0
                && *(_BYTE *)(((unsigned __int64)&hit_tree_pos_ptr->drop_times >> 3) + 0x7FFF8000) <= 3 )
              {
                __asan_report_load4(&hit_tree_pos_ptr->drop_times);
              }
              v52 = std::vector<unsigned int>::operator[](
                      (std::vector<unsigned int> *const)(v4 + 272),
                      hit_tree_pos_ptr->drop_times);
              v53 = v52;
              if ( *(_BYTE *)(((unsigned __int64)v52 >> 3) + 0x7FFF8000) != 0
                && (char)(((unsigned __int8)v52 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)v52 >> 3) + 0x7FFF8000) )
              {
                __asan_report_load4(v52);
              }
              prob = *v53;
            }
            rand = common::tools::RandomUtils::rand<unsigned int>(1u, 0x64u);
            if ( rand <= prob )
            {
              if ( *(_BYTE *)(((unsigned __int64)&this->last_hit_tree_drop_ms_ >> 3) + 0x7FFF8000) )
                __asan_report_store8(&this->last_hit_tree_drop_ms_, 100LL);
              this->last_hit_tree_drop_ms_ = now_ms;
              if ( *(_BYTE *)(((unsigned __int64)&hit_tree_pos_ptr->drop_times >> 3) + 0x7FFF8000) != 0
                && *(_BYTE *)(((unsigned __int64)&hit_tree_pos_ptr->drop_times >> 3) + 0x7FFF8000) <= 3 )
              {
                __asan_report_load4(&hit_tree_pos_ptr->drop_times);
              }
              ++hit_tree_pos_ptr->drop_times;
              common::milog::MiLogStream::create(
                (common::milog::MiLogStream *)(v4 + 528),
                &common::milog::MiLogDefault::default_log_obj_,
                1u,
                "./src/scene/player_scene_comp.cpp",
                "hitTree",
                2874);
              v56 = hit_tree_pos_ptr->drop_times;
              last_hit_tree_drop_ms = this->last_hit_tree_drop_ms_;
              Vector3::toString[abi:cxx11]((std::string *)&v78, tree_pos);
              v58 = (const char *)std::string::c_str(&v78);
              common::milog::MiLogStream::operator()(
                (common::milog::MiLogStream *const)(v4 + 528),
                "index:%u tree_type:%u tree_pos:%s last_hit_tree_drop_ms_:%lu drop_times:%u",
                *(unsigned int *)(v4 + 64),
                *(unsigned int *)(v4 + 96),
                v58,
                last_hit_tree_drop_ms,
                v56);
              std::string::~string(&v78);
              common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v4 + 528));
              ServiceBox::findService<GameserverService>();
              GameserverService::getConfig((GameserverService *const)&v77);
              v59 = std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false> *const)&v77);
              tree_drop_excel_config = data::TreeTypeExcelConfigMgrBase::findTreeDropExcelConfig(
                                         &v59->design_config.txt_config_mgr.tree_type_config_mgr,
                                         (data::TreeType)*(_DWORD *)(v4 + 96));
              std::shared_ptr<Config>::~shared_ptr(&v77);
              if ( tree_drop_excel_config )
              {
                if ( *(_BYTE *)(((unsigned __int64)&tree_drop_excel_config->drop_id >> 3) + 0x7FFF8000) != 0
                  && (char)((((_BYTE)tree_drop_excel_config + 12) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&tree_drop_excel_config->drop_id >> 3)
                                                                                        + 0x7FFF8000) )
                {
                  __asan_report_load4(&tree_drop_excel_config->drop_id);
                }
                *(_DWORD *)(v4 + 80) = tree_drop_excel_config->drop_id;
                DropParam::DropParam((DropParam *const)(v4 + 592));
                *(_DWORD *)(v4 + 592) = *(_DWORD *)(v4 + 80);
                *(_DWORD *)(v4 + 596) = 1;
                if ( ((unsigned __int8)drop_pos & 7) >= *(_BYTE *)(((unsigned __int64)drop_pos >> 3) + 0x7FFF8000)
                  && *(_BYTE *)(((unsigned __int64)drop_pos >> 3) + 0x7FFF8000) != 0
                  || *(_BYTE *)((((unsigned __int64)&drop_pos->z + 3) >> 3) + 0x7FFF8000) != 0
                  && (((unsigned __int8)drop_pos + 11) & 7) >= *(_BYTE *)((((unsigned __int64)&drop_pos->z + 3) >> 3)
                                                                        + 0x7FFF8000) )
                {
                  __asan_report_load_n(drop_pos, 12LL);
                }
                *(_QWORD *)(v4 + 608) = *(_QWORD *)&drop_pos->x;
                *(float *)(v4 + 616) = drop_pos->z;
                if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
                  __asan_report_load8();
                *(_DWORD *)(v4 + 604) = Player::getUid(this->player_);
                ActionReason::ActionReason(
                  (ActionReason *const)(v4 + 336),
                  ACTION_REASON_HIT_TREE_DROP,
                  ITEM_LIMIT_HIT_TREE_DROP);
                std::vector<ItemParam>::vector((std::vector<ItemParam> *const)(v4 + 400));
                v61 = *(_DWORD *)(v4 + 596);
                v62 = *(_DWORD *)(v4 + 592);
                if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
                  __asan_report_load8();
                *(OutputResult *)(v4 + 176) = DropUtils::dropAndSplitItems(
                                                this->player_,
                                                v62,
                                                v61,
                                                (const ActionReason *)(v4 + 336),
                                                (std::vector<ItemParam> *)(v4 + 400));
                if ( *(_DWORD *)(v4 + 176) )
                {
                  LogLevel = OutputResult::getLogLevel((const OutputResult *const)(v4 + 176));
                  common::milog::MiLogStream::create(
                    &v78,
                    &common::milog::MiLogDefault::default_log_obj_,
                    LogLevel,
                    "./src/scene/player_scene_comp.cpp",
                    "hitTree",
                    2897);
                  v64 = common::milog::MiLogStream::operator<<<char [35],(char *[35])0>(
                          &v78,
                          (const char (*)[35])"dropAndSplitItems failed, drop_id:");
                  common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                    v64,
                    (const unsigned int *)(v4 + 80));
                  common::milog::MiLogStream::~MiLogStream(&v78);
                }
                else if ( !std::vector<ItemParam>::empty((const std::vector<ItemParam> *const)(v4 + 400)) )
                {
                  v65 = (Scene *)std::__shared_ptr_access<PlayerWorldScene,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<PlayerWorldScene,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 240));
                  if ( Scene::dropItems(
                         v65,
                         (const std::vector<ItemParam> *)(v4 + 400),
                         (const DropParam *)(v4 + 592),
                         (const ActionReason *)(v4 + 336)) )
                  {
                    common::milog::MiLogStream::create(
                      &v78,
                      &common::milog::MiLogDefault::default_log_obj_,
                      3u,
                      "./src/scene/player_scene_comp.cpp",
                      "hitTree",
                      2906);
                    v66 = common::milog::MiLogStream::operator<<<char [27],(char *[27])0>(
                            &v78,
                            (const char (*)[27])"dropItems failed drop_id: ");
                    common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                      v66,
                      (const unsigned int *)(v4 + 80));
                    common::milog::MiLogStream::~MiLogStream(&v78);
                  }
                  else
                  {
                    std::set<unsigned int>::insert(
                      &this->obtained_wood_type_set_,
                      (const std::set<unsigned int>::value_type *)(v4 + 96));
                    std::vector<ItemParam>::vector((std::vector<ItemParam> *const)(v4 + 464));
                    if ( *(_BYTE *)(((unsigned __int64)&tree_drop_excel_config->talent_extra_drop_id >> 3) + 0x7FFF8000) != 0
                      && *(_BYTE *)(((unsigned __int64)&tree_drop_excel_config->talent_extra_drop_id >> 3) + 0x7FFF8000) <= 3 )
                    {
                      __asan_report_load4(&tree_drop_excel_config->talent_extra_drop_id);
                    }
                    if ( tree_drop_excel_config->talent_extra_drop_id )
                    {
                      v67 = std::__shared_ptr_access<PlayerWorldScene,(__gnu_cxx::_Lock_policy)2,false,false>::operator*((const std::__shared_ptr_access<PlayerWorldScene,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 240));
                      if ( *(_BYTE *)(((unsigned __int64)&tree_drop_excel_config->talent_extra_drop_id >> 3) + 0x7FFF8000) != 0
                        && *(_BYTE *)(((unsigned __int64)&tree_drop_excel_config->talent_extra_drop_id >> 3) + 0x7FFF8000) <= 3 )
                      {
                        __asan_report_load4(&tree_drop_excel_config->talent_extra_drop_id);
                      }
                      PlayerSceneComp::extraDropOnHitTreeByTalent(
                        this,
                        tree_drop_excel_config->talent_extra_drop_id,
                        drop_pos,
                        v67,
                        (std::vector<ItemParam> *)(v4 + 464));
                    }
                    if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
                      __asan_report_load8();
                    WatcherComp = Player::getWatcherComp(this->player_);
                    PlayerWatcherComp::triggerObtainWood(
                      WatcherComp,
                      (const std::vector<ItemParam> *)(v4 + 400),
                      (const std::vector<ItemParam> *)(v4 + 464));
                    std::vector<ItemParam>::~vector((std::vector<ItemParam> *const)(v4 + 464));
                  }
                }
                std::vector<ItemParam>::~vector((std::vector<ItemParam> *const)(v4 + 400));
              }
              else
              {
                common::milog::MiLogStream::create(
                  &v78,
                  &common::milog::MiLogDefault::default_log_obj_,
                  4u,
                  "./src/scene/player_scene_comp.cpp",
                  "hitTree",
                  2882);
                v60 = common::milog::MiLogStream::operator<<<char [43],(char *[43])0>(
                        &v78,
                        (const char (*)[43])"tree_drop_excel_config is null. tree_type:");
                common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                  v60,
                  (const unsigned int *)(v4 + 96));
                common::milog::MiLogStream::~MiLogStream(&v78);
              }
            }
            else
            {
              common::milog::MiLogStream::create(
                &v78,
                &common::milog::MiLogDefault::default_log_obj_,
                1u,
                "./src/scene/player_scene_comp.cpp",
                "hitTree",
                2865);
              common::milog::MiLogStream::operator()(&v78, "rand > prob. rand:%u prob:%u", rand, prob);
              common::milog::MiLogStream::~MiLogStream(&v78);
            }
          }
          std::vector<unsigned int>::~vector((std::vector<unsigned int> *const)(v4 + 272));
        }
        else
        {
          common::milog::MiLogStream::create(
            &v78,
            &common::milog::MiLogDefault::default_log_obj_,
            4u,
            "./src/scene/player_scene_comp.cpp",
            "hitTree",
            2835);
          common::milog::MiLogStream::operator<<<char [25],(char *[25])0>(
            &v78,
            (const char (*)[25])"hit_tree_pos_ptr is null");
          common::milog::MiLogStream::~MiLogStream(&v78);
        }
        goto LABEL_113;
      }
      HitTreePos::HitTreePos((HitTreePos *const)(v4 + 528));
      if ( ((unsigned __int8)tree_pos & 7) >= *(_BYTE *)(((unsigned __int64)tree_pos >> 3) + 0x7FFF8000)
        && *(_BYTE *)(((unsigned __int64)tree_pos >> 3) + 0x7FFF8000) != 0
        || *(_BYTE *)((((unsigned __int64)&tree_pos->z + 3) >> 3) + 0x7FFF8000) != 0
        && (((unsigned __int8)tree_pos + 11) & 7) >= *(_BYTE *)((((unsigned __int64)&tree_pos->z + 3) >> 3) + 0x7FFF8000) )
      {
        __asan_report_load_n(tree_pos, 12LL);
      }
      *(_QWORD *)(v4 + 528) = *(_QWORD *)&tree_pos->x;
      *(float *)(v4 + 536) = tree_pos->z;
      *(_DWORD *)(v4 + 540) = *(_DWORD *)(v4 + 96);
      *(_DWORD *)(v4 + 552) = 0;
      v32 = std::move<HitTreePos &>((HitTreePos *)(v4 + 528));
      std::vector<HitTreePos>::push_back(&this->hit_tree_pos_vec_, v32);
      v33 = *(unsigned int *)(v4 + 64);
      if ( v33 >= std::vector<HitTreePos>::size(&this->hit_tree_pos_vec_) )
      {
        common::milog::MiLogStream::create(
          &v78,
          &common::milog::MiLogDefault::default_log_obj_,
          4u,
          "./src/scene/player_scene_comp.cpp",
          "hitTree",
          2808);
        v34 = common::milog::MiLogStream::operator<<<char [15],(char *[15])0>(
                &v78,
                (const char (*)[15])"invalid index:");
        v35 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                v34,
                (const unsigned int *)(v4 + 64));
        v36 = common::milog::MiLogStream::operator<<<char [25],(char *[25])0>(
                v35,
                (const char (*)[25])" hit_tree_pos_vec_.size:");
        *(_QWORD *)(v4 + 176) = std::vector<HitTreePos>::size(&this->hit_tree_pos_vec_);
        common::milog::MiLogStream::operator<<<unsigned long,(unsigned long *)0>(
          v36,
          (const unsigned __int64 *)(v4 + 176));
        common::milog::MiLogStream::~MiLogStream(&v78);
        goto LABEL_113;
      }
    }
    v27 = *(unsigned int *)(v4 + 64);
    hit_tree_pos_ptr = std::vector<HitTreePos>::operator[](&this->hit_tree_pos_vec_, v27);
    goto LABEL_62;
  }
  common::milog::MiLogStream::create(
    &v78,
    &common::milog::MiLogDefault::default_log_obj_,
    1u,
    "./src/scene/player_scene_comp.cpp",
    "hitTree",
    2730);
  common::milog::MiLogStream::operator<<<char [26],(char *[26])0>(&v78, (const char (*)[26])"getCurScene() return null");
  common::milog::MiLogStream::~MiLogStream(&v78);
LABEL_114:
  std::shared_ptr<Scene>::~shared_ptr((std::shared_ptr<Scene> *const)(v4 + 208));
LABEL_115:
  if ( v79 == (char *)v4 )
  {
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF804C) = 0LL;
    memset(
      (void *)((unsigned __int64)(v6 + 536862722) & 0xFFFFFFFFFFFFFFF8LL),
      0,
      8LL * ((((_DWORD)v6 + 2147450880 - (((_DWORD)v6 + 2147450888) & 0xFFFFFFF8) + 84) & 0xFFFFFFF8) >> 3));
  }
  else
  {
    *(_QWORD *)v4 = 1172321806LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8020) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8028) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8030) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8038) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8040) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8048) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v4 >> 3) + 0x7FFF8050) = -168430091;
  }
};

// Line 2921: range 0000000013E59842-0000000013E5A2B7
void __cdecl PlayerSceneComp::extraDropOnHitTreeByTalent(
        PlayerSceneComp *const this,
        uint32_t talent_extra_drop_id,
        const Vector3 *drop_pos,
        PlayerWorldScene *player_world_scene,
        std::vector<ItemParam> *extra_item_param_vec)
{
  unsigned __int64 v5; // r13
  __int64 v6; // rax
  _DWORD *v7; // r12
  std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v8; // rax
  PlayerAvatarComp *AvatarComp; // r14
  common::milog::MiLogStream *v10; // rax
  common::milog::MiLogStream *v11; // rax
  common::milog::MiLogStream *v12; // rcx
  common::milog::MiLogStream *v13; // rax
  common::milog::MiLogStream *v14; // rax
  common::milog::MiLogStream *v15; // rax
  common::milog::MiLogStream *v16; // rax
  common::milog::MiLogStream *v17; // rax
  common::milog::MiLogStream *v18; // rax
  common::milog::MiLogStream *v19; // rax
  common::milog::MiLogStream *v20; // rax
  common::milog::MiLogStream *v21; // rcx
  uint32_t v22; // edx
  uint32_t v23; // esi
  uint32_t LogLevel; // eax
  common::milog::MiLogStream *v25; // rax
  common::milog::MiLogStream *v26; // rax
  common::milog::MiLogStream *v27; // rax
  common::milog::MiLogStream *v28; // rax
  PlayerSceneComp::extraDropOnHitTreeByTalent::<lambda(Avatar&)> v29; // [rsp-50h] [rbp-2F0h]
  AvatarTalentExcelConfigMgr *avatar_talent_config_mgr; // [rsp+30h] [rbp-270h]
  std::set<unsigned int> *hit_tree_extra_output_avatar_set; // [rsp+48h] [rbp-258h]
  std::shared_ptr<Config> v35; // [rsp+50h] [rbp-250h] BYREF
  common::milog::MiLogStream v36; // [rsp+60h] [rbp-240h] BYREF
  PlayerSceneComp::extraDropOnHitTreeByTalent::<lambda(Avatar&)> __f; // [rsp+80h] [rbp-220h]
  char v38[464]; // [rsp+D0h] [rbp-1D0h] BYREF

  v5 = (unsigned __int64)v38;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v6 = __asan_stack_malloc_3(416LL);
    if ( v6 )
      v5 = v6;
  }
  *(_QWORD *)v5 = 1102416563LL;
  *(_QWORD *)(v5 + 8) = "11 48 1 14 has_found:2941 64 4 25 max_extra_drop_count:2942 80 4 14 talent_id:2943 96 4 21 targe"
                        "t_avatar_id:2944 112 8 20 cur_avatar_guid:2927 144 8 9 iter:2933 176 8 23 target_avatar_guid:294"
                        "5 208 8 18 output_result:3009 240 16 19 cur_avatar_ptr:2922 272 24 18 action_reason:3007 336 40 "
                        "15 drop_param:3001";
  *(_QWORD *)(v5 + 16) = PlayerSceneComp::extraDropOnHitTreeByTalent;
  v7 = (_DWORD *)(v5 >> 3);
  v7[536862720] = -235802127;
  v7[536862721] = -234753551;
  v7[536862722] = -234556924;
  v7[536862723] = 61956;
  v7[536862723] = -234881024;
  v7[536862724] = 62194;
  v7[536862724] = -234881024;
  v7[536862725] = 62194;
  v7[536862725] = -234881024;
  v7[536862726] = 62194;
  v7[536862726] = -234881024;
  v7[536862727] = 62194;
  v7[536862728] = 62194;
  v7[536862729] = -218959360;
  v7[536862730] = 62194;
  v7[536862731] = -218103808;
  v7[536862732] = -202116109;
  if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
    __asan_report_load8();
  Player::getAvatarComp(this->player_);
  PlayerAvatarComp::getCurAvatar((const PlayerAvatarComp *const)(v5 + 240));
  if ( !std::operator==<Avatar>(0LL, (const std::shared_ptr<Avatar> *)(v5 + 240)) )
  {
    v8 = std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v5 + 240));
    *(_QWORD *)(v5 + 112) = Avatar::getGuid(v8);
    ServiceBox::findService<GameserverService>();
    GameserverService::getConfig((GameserverService *const)&v35);
    avatar_talent_config_mgr = &std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false> *const)&v35)->design_config.txt_config_mgr.avatar_talent_config_mgr;
    std::shared_ptr<Config>::~shared_ptr(&v35);
    *(_DWORD *)(v5 + 96) = 701;
    *(std::unordered_map<unsigned int,std::set<unsigned int>>::const_iterator *)(v5 + 144) = std::unordered_map<unsigned int,std::set<unsigned int>>::find(
                                                                                               &avatar_talent_config_mgr->proud_life_effect_avatars_map,
                                                                                               (const std::unordered_map<unsigned int,std::set<unsigned int>>::key_type *)(v5 + 96));
    *(std::unordered_map<unsigned int,std::set<unsigned int>>::const_iterator *)(v5 + 208) = std::unordered_map<unsigned int,std::set<unsigned int>>::end(&avatar_talent_config_mgr->proud_life_effect_avatars_map);
    if ( std::__detail::operator==<std::pair<unsigned int const,std::set<unsigned int>>,false>(
           (const std::__detail::_Node_iterator_base<std::pair<unsigned int const,std::set<unsigned int> >,false> *)(v5 + 144),
           (const std::__detail::_Node_iterator_base<std::pair<unsigned int const,std::set<unsigned int> >,false> *)(v5 + 208)) )
    {
      common::milog::MiLogStream::create(
        &v36,
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/scene/player_scene_comp.cpp",
        "extraDropOnHitTreeByTalent",
        2936);
      common::milog::MiLogStream::operator<<<char [70],(char *[70])0>(
        &v36,
        (const char (*)[70])"data::PROUD_EFFECT_HIT_TREE_EXTRA_OUTPUT has no corresponding avatars");
      common::milog::MiLogStream::~MiLogStream(&v36);
      goto LABEL_29;
    }
    hit_tree_extra_output_avatar_set = &std::__detail::_Node_const_iterator<std::pair<unsigned int const,std::set<unsigned int>>,false,false>::operator->((const std::__detail::_Node_const_iterator<std::pair<unsigned int const,std::set<unsigned int> >,false,false> *const)(v5 + 144))->second;
    *(_BYTE *)(v5 + 48) = 0;
    *(_DWORD *)(v5 + 64) = 0;
    *(_DWORD *)(v5 + 80) = 0;
    *(_DWORD *)(v5 + 96) = 0;
    *(_QWORD *)(v5 + 176) = 0LL;
    if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
      __asan_report_load8();
    AvatarComp = Player::getAvatarComp(this->player_);
    __f.__hit_tree_extra_output_avatar_set = hit_tree_extra_output_avatar_set;
    __f.__proud_hit_tree_extra_output_config_map = &avatar_talent_config_mgr->proud_hit_tree_extra_output_config_map;
    __f.__avatar_talent_config_mgr = avatar_talent_config_mgr;
    __f.__cur_avatar_guid = (uint64_t *)(v5 + 112);
    __f.__has_found = (bool *)(v5 + 48);
    __f.__max_extra_drop_count = (uint32_t *)(v5 + 64);
    __f.__talent_id = (uint32_t *)(v5 + 80);
    __f.__target_avatar_id = (uint32_t *)(v5 + 96);
    __f.__target_avatar_guid = (uint64_t *)(v5 + 176);
    v29.__target_avatar_guid = (uint64_t *)(v5 + 176);
    v29.__target_avatar_id = (uint32_t *)(v5 + 96);
    v29.__talent_id = (uint32_t *)(v5 + 80);
    v29.__max_extra_drop_count = (uint32_t *)(v5 + 64);
    v29.__has_found = (bool *)(v5 + 48);
    v29.__cur_avatar_guid = (uint64_t *)(v5 + 112);
    v29.__avatar_talent_config_mgr = avatar_talent_config_mgr;
    v29.__proud_hit_tree_extra_output_config_map = &avatar_talent_config_mgr->proud_hit_tree_extra_output_config_map;
    v29.__hit_tree_extra_output_avatar_set = hit_tree_extra_output_avatar_set;
    std::function<ForeachPolicy ()(Avatar &)>::function<PlayerSceneComp::extraDropOnHitTreeByTalent(unsigned int,Vector3 const&,PlayerWorldScene &,std::vector<ItemParam> &)::{lambda(Avatar &)#1},void,void>(
      (std::function<ForeachPolicy(Avatar&)> *const)&v36,
      v29);
    PlayerAvatarComp::foreachMyAvatarInSceneTeam(AvatarComp, (std::function<ForeachPolicy(Avatar&)> *)&v36);
    std::function<ForeachPolicy ()(Avatar &)>::~function((std::function<ForeachPolicy(Avatar&)> *const)&v36);
    if ( *(_BYTE *)(v5 + 48) == 1 )
    {
      if ( *(_DWORD *)(v5 + 64) != 1 )
      {
        common::milog::MiLogStream::create(
          &v36,
          &common::milog::MiLogDefault::default_log_obj_,
          4u,
          "./src/scene/player_scene_comp.cpp",
          "extraDropOnHitTreeByTalent",
          2994);
        v10 = common::milog::MiLogStream::operator<<<char [30],(char *[30])0>(
                &v36,
                (const char (*)[30])"invalid max_extra_drop_count:");
        v11 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                v10,
                (const unsigned int *)(v5 + 64));
        v12 = common::milog::MiLogStream::operator<<<char [9],(char *[9])0>(v11, (const char (*)[9])" player:");
        if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
          __asan_report_load8();
LABEL_15:
        operator<<(v12, this->player_);
        common::milog::MiLogStream::~MiLogStream(&v36);
        goto LABEL_29;
      }
      common::milog::MiLogStream::create(
        &v36,
        &common::milog::MiLogDefault::default_log_obj_,
        1u,
        "./src/scene/player_scene_comp.cpp",
        "extraDropOnHitTreeByTalent",
        2998);
      v13 = common::milog::MiLogStream::operator<<<char [43],(char *[43])0>(
              &v36,
              (const char (*)[43])"extra hit tree drop, max_extra_drop_count:");
      v14 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v13, (const unsigned int *)(v5 + 64));
      v15 = common::milog::MiLogStream::operator<<<char [12],(char *[12])0>(v14, (const char (*)[12])" talent_id:");
      v16 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v15, (const unsigned int *)(v5 + 80));
      v17 = common::milog::MiLogStream::operator<<<char [12],(char *[12])0>(v16, (const char (*)[12])" avatar_id:");
      v18 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v17, (const unsigned int *)(v5 + 96));
      v19 = common::milog::MiLogStream::operator<<<char [14],(char *[14])0>(v18, (const char (*)[14])" avatar_guid:");
      v20 = common::milog::MiLogStream::operator<<<unsigned long,(unsigned long *)0>(
              v19,
              (const unsigned __int64 *)(v5 + 176));
      v21 = common::milog::MiLogStream::operator<<<char [9],(char *[9])0>(v20, (const char (*)[9])" player:");
      if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
        __asan_report_load8();
      operator<<(v21, this->player_);
      common::milog::MiLogStream::~MiLogStream(&v36);
      DropParam::DropParam((DropParam *const)(v5 + 336));
      *(_DWORD *)(v5 + 336) = talent_extra_drop_id;
      *(_DWORD *)(v5 + 340) = *(_DWORD *)(v5 + 64);
      if ( ((unsigned __int8)drop_pos & 7) >= *(_BYTE *)(((unsigned __int64)drop_pos >> 3) + 0x7FFF8000)
        && *(_BYTE *)(((unsigned __int64)drop_pos >> 3) + 0x7FFF8000) != 0
        || *(_BYTE *)((((unsigned __int64)&drop_pos->z + 3) >> 3) + 0x7FFF8000) != 0
        && (((unsigned __int8)drop_pos + 11) & 7) >= *(_BYTE *)((((unsigned __int64)&drop_pos->z + 3) >> 3) + 0x7FFF8000) )
      {
        __asan_report_load_n(drop_pos, 12LL);
      }
      *(_QWORD *)(v5 + 352) = *(_QWORD *)&drop_pos->x;
      *(float *)(v5 + 360) = drop_pos->z;
      if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
        __asan_report_load8();
      *(_DWORD *)(v5 + 348) = Player::getUid(this->player_);
      ActionReason::ActionReason((ActionReason *const)(v5 + 272), ACTION_REASON_HIT_TREE_DROP, ITEM_LIMIT_HIT_TREE_DROP);
      v22 = *(_DWORD *)(v5 + 340);
      v23 = *(_DWORD *)(v5 + 336);
      if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
        __asan_report_load8();
      *(OutputResult *)(v5 + 208) = DropUtils::dropAndSplitItems(
                                      this->player_,
                                      v23,
                                      v22,
                                      (const ActionReason *)(v5 + 272),
                                      extra_item_param_vec);
      if ( *(_DWORD *)(v5 + 208) )
      {
        LogLevel = OutputResult::getLogLevel((const OutputResult *const)(v5 + 208));
        common::milog::MiLogStream::create(
          &v36,
          &common::milog::MiLogDefault::default_log_obj_,
          LogLevel,
          "./src/scene/player_scene_comp.cpp",
          "extraDropOnHitTreeByTalent",
          3012);
        v25 = common::milog::MiLogStream::operator<<<char [35],(char *[35])0>(
                &v36,
                (const char (*)[35])"dropAndSplitItems failed, drop_id:");
        v26 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                v25,
                (const unsigned int *)(v5 + 336));
        v27 = common::milog::MiLogStream::operator<<<char [13],(char *[13])0>(v26, (const char (*)[13])" drop_count:");
        v28 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                v27,
                (const unsigned int *)(v5 + 340));
        v12 = common::milog::MiLogStream::operator<<<char [9],(char *[9])0>(v28, (const char (*)[9])" player:");
        if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
          __asan_report_load8();
        goto LABEL_15;
      }
      Scene::dropItems(
        (Scene *const)player_world_scene,
        extra_item_param_vec,
        (const DropParam *)(v5 + 336),
        (const ActionReason *)(v5 + 272));
    }
  }
LABEL_29:
  std::shared_ptr<Avatar>::~shared_ptr((std::shared_ptr<Avatar> *const)(v5 + 240));
  if ( v38 == (char *)v5 )
  {
    *(_QWORD *)((v5 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8008) = 0LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8010) = 0LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8018) = 0LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8020) = 0LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8028) = 0LL;
    *(_DWORD *)((v5 >> 3) + 0x7FFF8030) = 0;
  }
  else
  {
    *(_QWORD *)v5 = 1172321806LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8020) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8028) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v5 >> 3) + 0x7FFF8030) = -168430091;
  }
};

// Line 2947: range 0000000013E58F7A-0000000013E59840
ForeachPolicy __cdecl PlayerSceneComp::extraDropOnHitTreeByTalent(unsigned int,Vector3 const&,PlayerWorldScene &,std::vector<ItemParam> &)::{lambda(Avatar &)#1}::operator()(
        const PlayerSceneComp::extraDropOnHitTreeByTalent::<lambda(Avatar&)> *const __closure,
        Avatar *avatar)
{
  float v2; // xmm1_4
  unsigned __int64 v3; // r12
  __int64 v4; // rax
  _DWORD *v5; // r13
  ForeachPolicy result; // eax
  TalentComp *TalentComp; // rax
  __gnu_cxx::__normal_iterator<unsigned int*,std::vector<unsigned int> >::reference v8; // rax
  _DWORD *v9; // rdx
  common::milog::MiLogStream *v10; // rax
  common::milog::MiLogStream *v11; // rax
  common::milog::MiLogStream *v12; // rdx
  uint64_t Guid; // rcx
  unsigned __int64 cur_avatar_guid; // rax
  char v15; // al
  __int64 extra_item_count; // rsi
  bool *has_found; // rdx
  uint32_t *max_extra_drop_count; // rdx
  bool *v19; // rdx
  char v20; // cl
  uint32_t *v21; // rdx
  __int64 v22; // rsi
  uint32_t *talent_id; // rdx
  __int64 v24; // rsi
  uint32_t *target_avatar_id; // r14
  uint32_t AvatarId; // ecx
  char v27; // dl
  bool v28; // dl
  uint64_t *target_avatar_guid; // r14
  uint64_t v30; // rax
  std::vector<unsigned int>::iterator __for_begin; // [rsp+10h] [rbp-100h] BYREF
  std::vector<unsigned int>::iterator __for_end; // [rsp+18h] [rbp-F8h] BYREF
  std::__detail::_Node_iterator_base<std::pair<unsigned int const,LifeEffectHitTreeExtraOutput>,false> __y; // [rsp+20h] [rbp-F0h] BYREF
  std::vector<unsigned int> *__for_range; // [rsp+28h] [rbp-E8h]
  const data::ProudSkillExcelConfig *proud_skill_config_ptr; // [rsp+30h] [rbp-E0h]
  const LifeEffectHitTreeExtraOutput *config; // [rsp+38h] [rbp-D8h]
  std::vector<unsigned int> v38; // [rsp+40h] [rbp-D0h] BYREF
  common::milog::MiLogStream v39; // [rsp+60h] [rbp-B0h] BYREF
  char v40[144]; // [rsp+80h] [rbp-90h] BYREF

  v3 = (unsigned __int64)v40;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_1(96LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "2 48 4 19 proud_skill_id:2953 64 8 16 config_iter:2955";
  *(_QWORD *)(v3 + 16) = PlayerSceneComp::extraDropOnHitTreeByTalent(unsigned int,Vector3 const&,PlayerWorldScene &,std::vector<ItemParam> &)::{lambda(Avatar &)#1}::operator();
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = -234556943;
  v5[536862722] = -202116352;
  *(_DWORD *)(v3 + 48) = Avatar::getAvatarId(avatar);
  if ( *(_BYTE *)(((unsigned __int64)__closure >> 3) + 0x7FFF8000) )
    __asan_report_load8();
  if ( !common::tools::MiscUtils::isContains<std::set<unsigned int> const,unsigned int>(
          __closure->__hit_tree_extra_output_avatar_set,
          (const unsigned int *)(v3 + 48)) )
  {
    result = FOREACH_CONTINUE;
  }
  else
  {
    TalentComp = Avatar::getTalentComp(avatar);
    TalentComp::getProudSkills(&v38, TalentComp);
    __for_range = &v38;
    __for_begin._M_current = std::vector<unsigned int>::begin(&v38)._M_current;
    __for_end._M_current = std::vector<unsigned int>::end(&v38)._M_current;
    while ( __gnu_cxx::operator!=<unsigned int *,std::vector<unsigned int>>(&__for_begin, &__for_end) )
    {
      v8 = __gnu_cxx::__normal_iterator<unsigned int *,std::vector<unsigned int>>::operator*(&__for_begin);
      v9 = v8;
      if ( *(_BYTE *)(((unsigned __int64)v8 >> 3) + 0x7FFF8000) != 0
        && (char)(((unsigned __int8)v8 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)v8 >> 3) + 0x7FFF8000) )
      {
        __asan_report_load4(v8);
      }
      *(_DWORD *)(v3 + 48) = *v9;
      if ( *(_BYTE *)(((unsigned __int64)&__closure->__proud_hit_tree_extra_output_config_map >> 3) + 0x7FFF8000) )
        __asan_report_load8();
      *(std::unordered_map<unsigned int,LifeEffectHitTreeExtraOutput>::const_iterator *)(v3 + 64) = std::unordered_map<unsigned int,LifeEffectHitTreeExtraOutput>::find(__closure->__proud_hit_tree_extra_output_config_map, (const std::unordered_map<unsigned int,LifeEffectHitTreeExtraOutput>::key_type *)(v3 + 48));
      __y._M_cur = std::unordered_map<unsigned int,LifeEffectHitTreeExtraOutput>::end(__closure->__proud_hit_tree_extra_output_config_map)._M_cur;
      if ( !std::__detail::operator==<std::pair<unsigned int const,LifeEffectHitTreeExtraOutput>,false>(
              (const std::__detail::_Node_iterator_base<std::pair<unsigned int const,LifeEffectHitTreeExtraOutput>,false> *)(v3 + 64),
              &__y) )
      {
        if ( *(_BYTE *)(((unsigned __int64)&__closure->__avatar_talent_config_mgr >> 3) + 0x7FFF8000) )
          __asan_report_load8();
        proud_skill_config_ptr = data::AvatarTalentExcelConfigMgrBase::findProudSkillExcelConfig(
                                   __closure->__avatar_talent_config_mgr,
                                   *(_DWORD *)(v3 + 48));
        if ( proud_skill_config_ptr )
        {
          if ( *(char *)(((unsigned __int64)&proud_skill_config_ptr->effective_for_team >> 3) + 0x7FFF8000) < 0 )
            __asan_report_load1(&proud_skill_config_ptr->effective_for_team);
          if ( proud_skill_config_ptr->effective_for_team )
            goto LABEL_28;
          Guid = Avatar::getGuid(avatar);
          if ( *(_BYTE *)(((unsigned __int64)&__closure->__cur_avatar_guid >> 3) + 0x7FFF8000) )
            __asan_report_load8();
          cur_avatar_guid = (unsigned __int64)__closure->__cur_avatar_guid;
          if ( *(_BYTE *)((cur_avatar_guid >> 3) + 0x7FFF8000) )
            cur_avatar_guid = __asan_report_load8();
          if ( Guid == *(_QWORD *)cur_avatar_guid )
LABEL_28:
            v15 = 0;
          else
            v15 = 1;
          if ( !v15 )
          {
            config = &std::__detail::_Node_const_iterator<std::pair<unsigned int const,LifeEffectHitTreeExtraOutput>,false,false>::operator->((const std::__detail::_Node_const_iterator<std::pair<unsigned int const,LifeEffectHitTreeExtraOutput>,false,false> *const)(v3 + 64))->second;
            extra_item_count = ((unsigned __int8)config & 7u) + 3;
            if ( *(_BYTE *)(((unsigned __int64)config >> 3) + 0x7FFF8000) != 0
              && (char)(((unsigned __int8)config & 7) + 3) >= *(_BYTE *)(((unsigned __int64)config >> 3) + 0x7FFF8000) )
            {
              __asan_report_load4(config);
            }
            if ( common::tools::RandomUtils::randomTestProbability(v2) )
            {
              if ( *(_BYTE *)(((unsigned __int64)&__closure->__has_found >> 3) + 0x7FFF8000) )
                __asan_report_load8();
              has_found = __closure->__has_found;
              if ( *(_BYTE *)(((unsigned __int64)has_found >> 3) + 0x7FFF8000) != 0
                && ((__int64)__closure->__has_found & 7) >= *(_BYTE *)(((unsigned __int64)has_found >> 3) + 0x7FFF8000) )
              {
                __asan_report_load1(__closure->__has_found);
              }
              if ( !*has_found )
                goto LABEL_75;
              if ( *(_BYTE *)(((unsigned __int64)&config->extra_item_count >> 3) + 0x7FFF8000) != 0
                && (char)((((_BYTE)config + 4) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&config->extra_item_count >> 3)
                                                                     + 0x7FFF8000) )
              {
                __asan_report_load4(&config->extra_item_count);
              }
              extra_item_count = config->extra_item_count;
              if ( *(_BYTE *)(((unsigned __int64)&__closure->__max_extra_drop_count >> 3) + 0x7FFF8000) )
                __asan_report_load8();
              max_extra_drop_count = __closure->__max_extra_drop_count;
              if ( *(_BYTE *)(((unsigned __int64)max_extra_drop_count >> 3) + 0x7FFF8000) != 0
                && (char)(((unsigned __int8)max_extra_drop_count & 7) + 3) >= *(_BYTE *)(((unsigned __int64)max_extra_drop_count >> 3)
                                                                                       + 0x7FFF8000) )
              {
                __asan_report_load4(__closure->__max_extra_drop_count);
              }
              if ( (unsigned int)extra_item_count > *max_extra_drop_count )
              {
LABEL_75:
                if ( *(_BYTE *)(((unsigned __int64)&__closure->__has_found >> 3) + 0x7FFF8000) )
                  __asan_report_load8();
                v19 = __closure->__has_found;
                v20 = *(_BYTE *)(((unsigned __int64)v19 >> 3) + 0x7FFF8000);
                if ( v20 != 0 && ((__int64)__closure->__has_found & 7) >= v20 )
                {
                  LOBYTE(extra_item_count) = v20 != 0;
                  __asan_report_store1(__closure->__has_found, extra_item_count, v19);
                }
                *v19 = 1;
                if ( *(_BYTE *)(((unsigned __int64)&__closure->__max_extra_drop_count >> 3) + 0x7FFF8000) )
                  __asan_report_load8();
                v21 = __closure->__max_extra_drop_count;
                if ( *(_BYTE *)(((unsigned __int64)&config->extra_item_count >> 3) + 0x7FFF8000) != 0
                  && (char)((((_BYTE)config + 4) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&config->extra_item_count >> 3)
                                                                       + 0x7FFF8000) )
                {
                  __asan_report_load4(&config->extra_item_count);
                }
                v22 = config->extra_item_count;
                if ( *(_BYTE *)(((unsigned __int64)v21 >> 3) + 0x7FFF8000) != 0
                  && (char)(((unsigned __int8)v21 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)v21 >> 3) + 0x7FFF8000) )
                {
                  __asan_report_store4(v21, v22, (_BYTE)v21);
                }
                *v21 = v22;
                if ( *(_BYTE *)(((unsigned __int64)&__closure->__talent_id >> 3) + 0x7FFF8000) )
                  __asan_report_load8();
                talent_id = __closure->__talent_id;
                v24 = *(unsigned int *)(v3 + 48);
                if ( *(_BYTE *)(((unsigned __int64)talent_id >> 3) + 0x7FFF8000) != 0
                  && (char)(((unsigned __int8)talent_id & 7) + 3) >= *(_BYTE *)(((unsigned __int64)talent_id >> 3)
                                                                              + 0x7FFF8000) )
                {
                  __asan_report_store4(__closure->__talent_id, v24, (_BYTE)talent_id);
                }
                *talent_id = v24;
                if ( *(_BYTE *)(((unsigned __int64)&__closure->__target_avatar_id >> 3) + 0x7FFF8000) )
                  __asan_report_load8();
                target_avatar_id = __closure->__target_avatar_id;
                AvatarId = Avatar::getAvatarId(avatar);
                v27 = *(_BYTE *)(((unsigned __int64)target_avatar_id >> 3) + 0x7FFF8000);
                LOBYTE(v24) = v27 != 0;
                v28 = v27 != 0 && (char)(((unsigned __int8)target_avatar_id & 7) + 3) >= v27;
                if ( v28 )
                  __asan_report_store4(target_avatar_id, v24, v28);
                *target_avatar_id = AvatarId;
                if ( *(_BYTE *)(((unsigned __int64)&__closure->__target_avatar_guid >> 3) + 0x7FFF8000) )
                  __asan_report_load8();
                target_avatar_guid = __closure->__target_avatar_guid;
                v30 = Avatar::getGuid(avatar);
                if ( *(_BYTE *)(((unsigned __int64)target_avatar_guid >> 3) + 0x7FFF8000) )
                  v30 = __asan_report_store8(target_avatar_guid, v24);
                *target_avatar_guid = v30;
              }
            }
          }
        }
        else
        {
          common::milog::MiLogStream::create(
            &v39,
            &common::milog::MiLogDefault::default_log_obj_,
            3u,
            "./src/scene/player_scene_comp.cpp",
            "operator()",
            2963);
          v10 = common::milog::MiLogStream::operator<<<char [48],(char *[48])0>(
                  &v39,
                  (const char (*)[48])"findProudSkillExcelConfig fail, proud_skill_id:");
          v11 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                  v10,
                  (const unsigned int *)(v3 + 48));
          v12 = common::milog::MiLogStream::operator<<<char [9],(char *[9])0>(v11, (const char (*)[9])" avatar:");
          common::milog::MiLogStream::operator<<<Avatar,(Avatar*)0>(v12, avatar);
          common::milog::MiLogStream::~MiLogStream(&v39);
        }
      }
      __gnu_cxx::__normal_iterator<unsigned int *,std::vector<unsigned int>>::operator++(&__for_begin);
    }
    std::vector<unsigned int>::~vector(&v38);
    result = FOREACH_CONTINUE;
  }
  if ( v40 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8008) = 0;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8008) = -168430091;
  }
  return result;
};

// Line 3019: range 0000000013E5A2B8-0000000013E5B198
void __cdecl PlayerSceneComp::widgetQuickHitTree(
        PlayerSceneComp *const this,
        const proto::WidgetQuickHitTreeReq *req,
        proto::WidgetQuickHitTreeRsp *rsp_0)
{
  unsigned __int64 v3; // r13
  __int64 v4; // rax
  _DWORD *v5; // r12
  std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v6; // rax
  std::__shared_ptr_access<data::ConfigWidgetToyHitTree,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v7; // rax
  PlayerWidgetComp *WidgetComp; // rax
  std::__shared_ptr_access<data::ConfigWidgetToyHitTree,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v9; // rdx
  std::__shared_ptr_access<data::ConfigWidgetToyHitTree,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v10; // rax
  std::__shared_ptr_access<data::ConfigWidgetToyHitTree,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v11; // rdx
  __m128i v12; // xmm0
  common::milog::MiLogStream *v13; // rax
  common::milog::MiLogStream *v14; // rax
  common::milog::MiLogStream *v15; // rax
  uint32_t v16; // eax
  std::__shared_ptr_access<WidgetQuickHitTree,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v17; // rax
  common::milog::MiLogStream *v18; // rax
  std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v19; // rax
  common::milog::MiLogStream *v20; // r14
  std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v21; // rax
  common::milog::MiLogStream *v22; // r14
  common::milog::MiLogStream *v23; // rax
  std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v24; // rax
  std::__shared_ptr_access<WidgetQuickHitTree,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v25; // rax
  int v26; // eax
  const proto::Vector *v27; // rax
  common::milog::MiLogStream *v28; // rax
  const Vector3 *v29; // r8
  const float *v30; // r9
  common::milog::MiLogStream *v31; // rax
  common::milog::MiLogStream *v32; // rax
  common::milog::MiLogStream *v33; // rax
  HitTreeSortInfo *M_current; // r14
  std::vector<HitTreeSortInfo>::iterator v35; // rax
  std::greater<HitTreeSortInfo> v36; // dl
  const unsigned int *v37; // [rsp+0h] [rbp-200h]
  unsigned int val; // [rsp+2Ch] [rbp-1D4h] BYREF
  int32_t idx; // [rsp+30h] [rbp-1D0h]
  uint32_t material_id; // [rsp+34h] [rbp-1CCh]
  float config_hit_radius_tolerance; // [rsp+38h] [rbp-1C8h]
  int32_t output_ret; // [rsp+3Ch] [rbp-1C4h]
  const Vector3 *player_pos; // [rsp+40h] [rbp-1C0h]
  const proto::HitTreeInfo *hit_tree_info; // [rsp+48h] [rbp-1B8h]
  common::milog::MiLogStream v46; // [rsp+50h] [rbp-1B0h] BYREF
  char v47[400]; // [rsp+70h] [rbp-190h] BYREF

  v3 = (unsigned __int64)v47;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_3(352LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "11 48 4 22 config_hit_radius:3034 64 4 25 config_hit_num_limit:3035 80 4 31 last_use_toy_hit_tre"
                        "e_flag:3049 96 4 14 tree_type:3092 112 4 13 tree_dis:3098 128 12 13 tree_pos:3091 160 16 22 widg"
                        "et_config_ptr:3022 192 16 24 hit_tree_widget_ptr:3043 224 16 14 scene_ptr:3057 256 16 15 avatar_"
                        "ptr:3075 288 24 17 hit_tree_vec:3087";
  *(_QWORD *)(v3 + 16) = PlayerSceneComp::widgetQuickHitTree;
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = -234556943;
  v5[536862722] = -234556924;
  v5[536862723] = -234556924;
  v5[536862724] = -219020288;
  v5[536862725] = -219021312;
  v5[536862726] = -219021312;
  v5[536862727] = -219021312;
  v5[536862728] = -219021312;
  v5[536862729] = -218103808;
  v5[536862730] = -202116109;
  proto::WidgetQuickHitTreeRsp::set_retcode(rsp_0, -1);
  ServiceBox::findService<GameserverService>();
  GameserverService::getConfig((GameserverService *const)(v3 + 256));
  v6 = std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 256));
  JsonConfigMgr::getWidgetNewConfig(&v6->design_config.json_config_mgr);
  WidgetJsonNewConfig::findWidgetConfig<data::ConfigWidgetToyHitTree>((const WidgetJsonNewConfig *const)(v3 + 160));
  std::shared_ptr<Config>::~shared_ptr((std::shared_ptr<Config> *const)(v3 + 256));
  if ( std::operator==<data::ConfigWidgetToyHitTree>(
         0LL,
         (const std::shared_ptr<data::ConfigWidgetToyHitTree> *)(v3 + 160)) )
  {
    common::milog::MiLogStream::create(
      &v46,
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/scene/player_scene_comp.cpp",
      "widgetQuickHitTree",
      3025);
    common::milog::MiLogStream::operator<<<char [45],(char *[45])0>(
      &v46,
      (const char (*)[45])"config ConfigWidgetToyHitTree does not exist");
    common::milog::MiLogStream::~MiLogStream(&v46);
  }
  else
  {
    v7 = std::__shared_ptr_access<data::ConfigWidgetToyHitTree,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<data::ConfigWidgetToyHitTree,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 160));
    if ( *(_BYTE *)(((unsigned __int64)&v7->material_id >> 3) + 0x7FFF8000) != 0
      && *(_BYTE *)(((unsigned __int64)&v7->material_id >> 3) + 0x7FFF8000) <= 3 )
    {
      v7 = (std::__shared_ptr_access<data::ConfigWidgetToyHitTree,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *)__asan_report_load4(&v7->material_id);
    }
    material_id = v7->material_id;
    if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
      __asan_report_load8();
    WidgetComp = Player::getWidgetComp(this->player_);
    if ( !PlayerWidgetComp::isOnQuickUse(WidgetComp, material_id) )
    {
      common::milog::MiLogStream::create(
        &v46,
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/scene/player_scene_comp.cpp",
        "widgetQuickHitTree",
        3031);
      common::milog::MiLogStream::operator<<<char [38],(char *[38])0>(
        &v46,
        (const char (*)[38])"quick hit tree material is not in use");
      common::milog::MiLogStream::~MiLogStream(&v46);
    }
    else
    {
      v9 = std::__shared_ptr_access<data::ConfigWidgetToyHitTree,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<data::ConfigWidgetToyHitTree,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 160));
      if ( *(_BYTE *)(((unsigned __int64)&v9->hit_radius >> 3) + 0x7FFF8000) != 0
        && (char)((((_BYTE)v9 - 116) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&v9->hit_radius >> 3) + 0x7FFF8000) )
      {
        __asan_report_load4(&v9->hit_radius);
      }
      *(float *)(v3 + 48) = v9->hit_radius;
      v10 = std::__shared_ptr_access<data::ConfigWidgetToyHitTree,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<data::ConfigWidgetToyHitTree,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 160));
      if ( *(_BYTE *)(((unsigned __int64)&v10->hit_num_limit >> 3) + 0x7FFF8000) != 0
        && *(_BYTE *)(((unsigned __int64)&v10->hit_num_limit >> 3) + 0x7FFF8000) <= 3 )
      {
        v10 = (std::__shared_ptr_access<data::ConfigWidgetToyHitTree,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *)__asan_report_load4(&v10->hit_num_limit);
      }
      *(_DWORD *)(v3 + 64) = v10->hit_num_limit;
      v11 = std::__shared_ptr_access<data::ConfigWidgetToyHitTree,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<data::ConfigWidgetToyHitTree,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 160));
      if ( *(_BYTE *)(((unsigned __int64)&v11->hit_radius_tolerance >> 3) + 0x7FFF8000) != 0
        && (char)((((_BYTE)v11 - 108) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&v11->hit_radius_tolerance >> 3)
                                                            + 0x7FFF8000) )
      {
        __asan_report_load4(&v11->hit_radius_tolerance);
      }
      config_hit_radius_tolerance = v11->hit_radius_tolerance;
      v12 = 0LL;
      if ( *(float *)(v3 + 48) > 0.0 && *(_DWORD *)(v3 + 64) )
      {
        if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
          __asan_report_load8();
        v16 = (unsigned int)Player::getWidgetComp(this->player_);
        PlayerWidgetComp::findWidget<WidgetQuickHitTree>((PlayerWidgetComp *const)(v3 + 192), v16);
        if ( std::operator==<WidgetQuickHitTree>(0LL, (const std::shared_ptr<WidgetQuickHitTree> *)(v3 + 192)) )
        {
          common::milog::MiLogStream::create(
            &v46,
            &common::milog::MiLogDefault::default_log_obj_,
            3u,
            "./src/scene/player_scene_comp.cpp",
            "widgetQuickHitTree",
            3046);
          common::milog::MiLogStream::operator<<<char [37],(char *[37])0>(
            &v46,
            (const char (*)[37])"quick hit tree widget ptr is nullptr");
          common::milog::MiLogStream::~MiLogStream(&v46);
        }
        else
        {
          v17 = std::__shared_ptr_access<WidgetQuickHitTree,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<WidgetQuickHitTree,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 192));
          *(_DWORD *)(v3 + 80) = WidgetQuickHitTree::getLastUseToyHitTreeFlag(v17);
          if ( *(_DWORD *)(v3 + 80) )
          {
            PlayerSceneComp::getCurScene((const PlayerSceneComp *const)(v3 + 224));
            if ( std::operator==<Scene>((const std::shared_ptr<Scene> *)(v3 + 224), 0LL) )
            {
              common::milog::MiLogStream::create(
                &v46,
                &common::milog::MiLogDefault::default_log_obj_,
                1u,
                "./src/scene/player_scene_comp.cpp",
                "widgetQuickHitTree",
                3060);
              common::milog::MiLogStream::operator<<<char [26],(char *[26])0>(
                &v46,
                (const char (*)[26])"getCurScene() return null");
              common::milog::MiLogStream::~MiLogStream(&v46);
            }
            else
            {
              v19 = std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 224));
              if ( Scene::getSceneType(v19) == SCENE_WORLD )
              {
                if ( (unsigned int)proto::WidgetQuickHitTreeReq::hit_tree_info_list_size(req) <= *(_DWORD *)(v3 + 64) )
                {
                  if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
                    __asan_report_load8();
                  Player::getCurAvatar((Player *const)(v3 + 256));
                  if ( std::operator==<Avatar>(0LL, (const std::shared_ptr<Avatar> *)(v3 + 256)) )
                  {
                    common::milog::MiLogStream::create(
                      &v46,
                      &common::milog::MiLogDefault::default_log_obj_,
                      3u,
                      "./src/scene/player_scene_comp.cpp",
                      "widgetQuickHitTree",
                      3078);
                    common::milog::MiLogStream::operator<<<char [26],(char *[26])0>(
                      &v46,
                      (const char (*)[26])"getCurAvatar() is nullptr");
                    common::milog::MiLogStream::~MiLogStream(&v46);
                  }
                  else
                  {
                    v24 = std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 256));
                    player_pos = Entity::getPosition((const Entity *const)v24);
                    v25 = std::__shared_ptr_access<WidgetQuickHitTree,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<WidgetQuickHitTree,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 192));
                    WidgetQuickHitTree::setLastUseToyHitTreeFlag(v25, 0);
                    std::vector<HitTreeSortInfo>::vector((std::vector<HitTreeSortInfo> *const)(v3 + 288));
                    for ( idx = 0; ; ++idx )
                    {
                      v26 = proto::WidgetQuickHitTreeReq::hit_tree_info_list_size(req);
                      if ( idx >= v26 )
                        break;
                      hit_tree_info = proto::WidgetQuickHitTreeReq::hit_tree_info_list(req, idx);
                      v27 = proto::HitTreeInfo::tree_pos(hit_tree_info);
                      Vector3::Vector3((Vector3 *const)(v3 + 128), v27);
                      *(_DWORD *)(v3 + 96) = proto::HitTreeInfo::tree_type(hit_tree_info);
                      if ( !data::isValidTreeType(*(_DWORD *)(v3 + 96)) )
                      {
                        common::milog::MiLogStream::create(
                          &v46,
                          &common::milog::MiLogDefault::default_log_obj_,
                          3u,
                          "./src/scene/player_scene_comp.cpp",
                          "widgetQuickHitTree",
                          3095);
                        v28 = common::milog::MiLogStream::operator<<<char [19],(char *[19])0>(
                                &v46,
                                (const char (*)[19])"invalid tree_type:");
                        common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                          v28,
                          (const unsigned int *)(v3 + 96));
                        common::milog::MiLogStream::~MiLogStream(&v46);
                      }
                      else
                      {
                        *(float *)v12.m128i_i32 = getDistance(player_pos, (const Vector3 *)(v3 + 128));
                        *(_DWORD *)(v3 + 112) = _mm_cvtsi128_si32(v12);
                        v12 = (__m128i)*(unsigned int *)(v3 + 112);
                        if ( *(float *)v12.m128i_i32 <= (float)(*(float *)(v3 + 48) + config_hit_radius_tolerance) )
                        {
                          std::vector<HitTreeSortInfo>::emplace_back<Vector3 const&,float const&,unsigned int const&>(
                            (std::vector<HitTreeSortInfo> *const)(v3 + 288),
                            (const Vector3 *)(v3 + 128),
                            (const float *)(v3 + 112),
                            (const unsigned int *)(v3 + 96),
                            v29,
                            v30,
                            v37);
                        }
                        else
                        {
                          common::milog::MiLogStream::create(
                            &v46,
                            &common::milog::MiLogDefault::default_log_obj_,
                            1u,
                            "./src/scene/player_scene_comp.cpp",
                            "widgetQuickHitTree",
                            3101);
                          v31 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                                  &v46,
                                  (const char (*)[16])"tree distance: ");
                          v32 = common::milog::MiLogStream::operator<<<float,(float *)0>(v31, (const float *)(v3 + 112));
                          v33 = common::milog::MiLogStream::operator<<<char [25],(char *[25])0>(
                                  v32,
                                  (const char (*)[25])"larger than hit radius: ");
                          v12 = (__m128i)*(unsigned int *)(v3 + 48);
                          *(float *)&val = *(float *)v12.m128i_i32 + config_hit_radius_tolerance;
                          common::milog::MiLogStream::operator<<<float,(float *)0>(v33, (const float *)&val);
                          common::milog::MiLogStream::~MiLogStream(&v46);
                        }
                      }
                    }
                    if ( std::vector<HitTreeSortInfo>::size((const std::vector<HitTreeSortInfo> *const)(v3 + 288)) )
                    {
                      M_current = std::vector<HitTreeSortInfo>::end((std::vector<HitTreeSortInfo> *const)(v3 + 288))._M_current;
                      v35._M_current = std::vector<HitTreeSortInfo>::begin((std::vector<HitTreeSortInfo> *const)(v3 + 288))._M_current;
                      std::sort<__gnu_cxx::__normal_iterator<HitTreeSortInfo *,std::vector<HitTreeSortInfo>>,std::greater<HitTreeSortInfo>>(
                        v35,
                        (__gnu_cxx::__normal_iterator<HitTreeSortInfo*,std::vector<HitTreeSortInfo> >)M_current,
                        v36);
                      output_ret = PlayerSceneComp::getWidgetQuickHitTreeOutput(
                                     this,
                                     (const std::vector<HitTreeSortInfo> *)(v3 + 288));
                      proto::WidgetQuickHitTreeRsp::set_retcode(rsp_0, output_ret);
                    }
                    else
                    {
                      common::milog::MiLogStream::create(
                        &v46,
                        &common::milog::MiLogDefault::default_log_obj_,
                        1u,
                        "./src/scene/player_scene_comp.cpp",
                        "widgetQuickHitTree",
                        3108);
                      common::milog::MiLogStream::operator<<<char [26],(char *[26])0>(
                        &v46,
                        (const char (*)[26])off_25183480);
                      common::milog::MiLogStream::~MiLogStream(&v46);
                      proto::WidgetQuickHitTreeRsp::set_retcode(rsp_0, 11211);
                    }
                    std::vector<HitTreeSortInfo>::~vector((std::vector<HitTreeSortInfo> *const)(v3 + 288));
                  }
                  std::shared_ptr<Avatar>::~shared_ptr((std::shared_ptr<Avatar> *const)(v3 + 256));
                }
                else
                {
                  common::milog::MiLogStream::create(
                    &v46,
                    &common::milog::MiLogDefault::default_log_obj_,
                    1u,
                    "./src/scene/player_scene_comp.cpp",
                    "widgetQuickHitTree",
                    3071);
                  v22 = common::milog::MiLogStream::operator<<<char [26],(char *[26])0>(
                          &v46,
                          (const char (*)[26])off_25183340);
                  *(float *)&val = COERCE_FLOAT(proto::WidgetQuickHitTreeReq::hit_tree_info_list_size(req));
                  v23 = common::milog::MiLogStream::operator<<<int,(int *)0>(v22, (const int *)&val);
                  common::milog::MiLogStream::operator<<<char [13],(char *[13])0>(v23, (const char (*)[13])off_25183380);
                  common::milog::MiLogStream::~MiLogStream(&v46);
                }
              }
              else
              {
                common::milog::MiLogStream::create(
                  &v46,
                  &common::milog::MiLogDefault::default_log_obj_,
                  3u,
                  "./src/scene/player_scene_comp.cpp",
                  "widgetQuickHitTree",
                  3065);
                v20 = common::milog::MiLogStream::operator<<<char [34],(char *[34])0>(
                        &v46,
                        (const char (*)[34])off_25182200);
                v21 = std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 224));
                *(float *)&val = COERCE_FLOAT(Scene::getSceneId(v21));
                common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v20, &val);
                common::milog::MiLogStream::~MiLogStream(&v46);
              }
            }
            std::shared_ptr<Scene>::~shared_ptr((std::shared_ptr<Scene> *const)(v3 + 224));
          }
          else
          {
            common::milog::MiLogStream::create(
              &v46,
              &common::milog::MiLogDefault::default_log_obj_,
              3u,
              "./src/scene/player_scene_comp.cpp",
              "widgetQuickHitTree",
              3052);
            v18 = common::milog::MiLogStream::operator<<<char [70],(char *[70])0>(
                    &v46,
                    (const char (*)[70])"quick hit tree widget falg is not right, last_use_toy_hit_tree_flag: ");
            common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v18, (const unsigned int *)(v3 + 80));
            common::milog::MiLogStream::~MiLogStream(&v46);
          }
        }
        std::shared_ptr<WidgetQuickHitTree>::~shared_ptr((std::shared_ptr<WidgetQuickHitTree> *const)(v3 + 192));
      }
      else
      {
        common::milog::MiLogStream::create(
          &v46,
          &common::milog::MiLogDefault::default_log_obj_,
          3u,
          "./src/scene/player_scene_comp.cpp",
          "widgetQuickHitTree",
          3039);
        v13 = common::milog::MiLogStream::operator<<<char [27],(char *[27])0>(
                &v46,
                (const char (*)[27])"config error, hit radius: ");
        v14 = common::milog::MiLogStream::operator<<<float,(float *)0>(v13, (const float *)(v3 + 48));
        v15 = common::milog::MiLogStream::operator<<<char [18],(char *[18])0>(
                v14,
                (const char (*)[18])", hit num limit: ");
        common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v15, (const unsigned int *)(v3 + 64));
        common::milog::MiLogStream::~MiLogStream(&v46);
      }
    }
  }
  std::shared_ptr<data::ConfigWidgetToyHitTree>::~shared_ptr((std::shared_ptr<data::ConfigWidgetToyHitTree> *const)(v3 + 160));
  if ( v47 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8010) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8018) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8020) = 0LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8028) = 0;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8020) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8028) = -168430091;
  }
};

// Line 3120: range 0000000013E5B19A-0000000013E5CC37
int32_t __cdecl PlayerSceneComp::getWidgetQuickHitTreeOutput(
        PlayerSceneComp *const this,
        const std::vector<HitTreeSortInfo> *valid_hit_tree_vec)
{
  int32_t v2; // r14d
  unsigned __int64 v3; // r13
  __int64 v4; // rax
  _DWORD *v5; // r12
  std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v6; // rax
  unsigned __int64 *v7; // r9
  bool v8; // r15
  common::milog::MiLogStream *v9; // rax
  common::milog::MiLogStream *v10; // rax
  common::milog::MiLogStream *v11; // rax
  common::milog::MiLogStream *v12; // rax
  std::vector<HitTreeSortInfo> *v13; // rax
  TreeTypeExcelConfigMgr *p_tree_type_config_mgr; // rcx
  common::milog::MiLogStream *v15; // rax
  std::vector<HitTreePos>::size_type v16; // r15
  std::vector<HitTreePos>::reference v17; // rax
  __int64 v18; // rax
  __int64 v19; // rax
  std::vector<HitTreePos>::size_type v20; // r15
  std::vector<HitTreePos>::reference v21; // rdx
  int32_t *p_tree_type; // rax
  int32_t v23; // ecx
  common::milog::MiLogStream *v24; // rax
  common::milog::MiLogStream *v25; // rax
  common::milog::MiLogStream *v26; // r15
  std::vector<HitTreePos>::reference v27; // rax
  common::milog::MiLogStream *v28; // rax
  common::milog::MiLogStream *v29; // rax
  __int64 v30; // r15
  common::milog::MiLogStream *v31; // rax
  common::milog::MiLogStream *v32; // rax
  common::milog::MiLogStream *v33; // r14
  std::vector<HitTreePos>::value_type *v34; // rax
  std::vector<HitTreePos>::size_type v35; // r15
  common::milog::MiLogStream *v36; // rax
  common::milog::MiLogStream *v37; // rax
  common::milog::MiLogStream *v38; // r14
  std::vector<HitTreePos>::size_type v39; // r15
  common::milog::MiLogStream *v41; // rax
  common::milog::MiLogStream *v42; // rax
  common::milog::MiLogStream *v43; // rax
  std::vector<HitTreePos>::size_type v44; // r15
  common::milog::MiLogStream *v45; // rax
  common::milog::MiLogStream *v46; // rax
  common::milog::MiLogStream *v47; // r14
  HitTreePos *v48; // rax
  int32_t v49; // edi
  __int64 v50; // rsi
  bool v51; // dl
  std::vector<HitTreePos>::size_type v52; // r15
  common::milog::MiLogStream *v53; // rax
  common::milog::MiLogStream *v54; // rax
  common::milog::MiLogStream *v55; // r14
  common::milog::MiLogStream *v56; // rax
  common::milog::MiLogStream *v57; // rax
  common::milog::MiLogStream *v58; // rax
  common::milog::MiLogStream *v59; // rax
  common::milog::MiLogStream *v60; // rcx
  int v61; // esi
  common::milog::MiLogStream *v62; // rax
  int v63; // ecx
  uint32_t v64; // ecx
  char v65; // al
  const char *v66; // rsi
  common::milog::MiLogStream *v67; // rax
  common::milog::MiLogStream *v68; // rax
  common::milog::MiLogStream *v69; // rax
  common::milog::MiLogStream *v70; // rax
  common::milog::MiLogStream *v71; // rax
  common::milog::MiLogStream *v72; // rax
  int v73; // r15d
  common::milog::MiLogStream *v74; // rax
  common::milog::MiLogStream *v75; // rax
  common::milog::MiLogStream *v76; // rax
  PlayerWatcherComp *WatcherComp; // rax
  int32_t result; // eax
  unsigned int *v79; // [rsp+0h] [rbp-470h]
  bool is_got_output; // [rsp+2Fh] [rbp-441h]
  int32_t ret; // [rsp+30h] [rbp-440h]
  int32_t check_ret; // [rsp+34h] [rbp-43Ch]
  std::map<unsigned int,std::vector<HitTreeSortInfo>>::iterator __for_begin; // [rsp+38h] [rbp-438h] BYREF
  std::map<unsigned int,std::vector<HitTreeSortInfo>>::iterator __for_end_0; // [rsp+40h] [rbp-430h] BYREF
  std::vector<HitTreeSortInfo>::const_iterator __for_begin_0; // [rsp+48h] [rbp-428h] BYREF
  std::vector<HitTreeSortInfo>::const_iterator __for_end_1; // [rsp+50h] [rbp-420h] BYREF
  std::vector<HitTreeSortInfo>::const_iterator __for_end; // [rsp+58h] [rbp-418h] BYREF
  const std::vector<HitTreeSortInfo> *__for_range; // [rsp+60h] [rbp-410h]
  uint64_t now_ms; // [rsp+68h] [rbp-408h]
  std::map<unsigned int,std::vector<HitTreeSortInfo>> *__for_range_0; // [rsp+70h] [rbp-400h]
  const std::pair<unsigned int const,std::vector<HitTreeSortInfo> > *v92; // [rsp+78h] [rbp-3F8h]
  std::tuple_element<0,const std::pair<unsigned int const,std::vector<HitTreeSortInfo> > >::type *tree_type; // [rsp+80h] [rbp-3F0h]
  std::tuple_element<1,const std::pair<unsigned int const,std::vector<HitTreeSortInfo> > >::type *cur_hit_tree_vec; // [rsp+88h] [rbp-3E8h]
  const data::TreeDropExcelConfig *tree_drop_excel_config_ptr; // [rsp+90h] [rbp-3E0h]
  const std::vector<HitTreeSortInfo> *__for_range_1; // [rsp+98h] [rbp-3D8h]
  PlayerItemComp *player_item_comp; // [rsp+A0h] [rbp-3D0h]
  const HitTreeSortInfo *cur_hit_tree_info_0; // [rsp+A8h] [rbp-3C8h]
  const Vector3 *tree_pos; // [rsp+B0h] [rbp-3C0h]
  HitTreePos *cur_hit_tree_pos; // [rsp+B8h] [rbp-3B8h]
  HitTreePos *target_hit_tree; // [rsp+C0h] [rbp-3B0h]
  const HitTreeSortInfo *cur_hit_tree_info; // [rsp+C8h] [rbp-3A8h]
  std::shared_ptr<Config> v103; // [rsp+D0h] [rbp-3A0h] BYREF
  common::milog::MiLogStream v104; // [rsp+E0h] [rbp-390h] BYREF
  common::milog::MiLogStream v105; // [rsp+100h] [rbp-370h] BYREF
  common::milog::MiLogStream v106; // [rsp+120h] [rbp-350h] BYREF
  common::milog::MiLogStream v107; // [rsp+140h] [rbp-330h] BYREF
  common::milog::MiLogStream v108; // [rsp+160h] [rbp-310h] BYREF
  common::milog::MiLogStream v109; // [rsp+180h] [rbp-2F0h] BYREF
  common::milog::MiLogStream v110; // [rsp+1A0h] [rbp-2D0h] BYREF
  common::milog::MiLogStream v111; // [rsp+1C0h] [rbp-2B0h] BYREF
  char v112[656]; // [rsp+1E0h] [rbp-290h] BYREF

  v3 = (unsigned __int64)v112;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_4(608LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "14 48 4 17 tree_vec_cap:3122 64 4 26 tree_drop_times_limit:3124 80 4 20 need_drop_times:3159 96 "
                        "4 23 min_last_hit_index:3166 112 4 10 index:3167 128 4 12 drop_id:3256 144 8 15 drop_cd_ms:3123 "
                        "176 8 20 min_last_hit_ms:3165 208 24 32 valid_extra_drop_config_vec:3137 272 24 26 temp_hit_tree"
                        "_pos_vec:3161 336 24 18 action_reason:3257 400 24 21 add_item_rlt_vec:3272 464 32 21 new_hit_tre"
                        "e_pos:3200 528 48 39 tree_type_2_valid_hit_tree_vec_map:3141";
  *(_QWORD *)(v3 + 16) = PlayerSceneComp::getWidgetQuickHitTreeOutput;
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = -234556943;
  v5[536862722] = -234556924;
  v5[536862723] = -234556924;
  v5[536862724] = 61956;
  v5[536862724] = -234881024;
  v5[536862725] = 62194;
  v5[536862725] = -234881024;
  v5[536862726] = 62194;
  v5[536862727] = -218959360;
  v5[536862728] = 62194;
  v5[536862729] = -218959360;
  v5[536862730] = 62194;
  v5[536862731] = -218959360;
  v5[536862732] = 62194;
  v5[536862733] = -218959360;
  v5[536862734] = 62194;
  v5[536862735] = -219021312;
  v5[536862736] = 62194;
  v5[536862738] = -202116109;
  ret = 0;
  *(_DWORD *)(v3 + 48) = 0;
  *(_QWORD *)(v3 + 144) = 0LL;
  *(_DWORD *)(v3 + 64) = 0;
  ServiceBox::findService<GameserverService>();
  GameserverService::getConfig((GameserverService *const)&v103);
  v6 = std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false> *const)&v103);
  v8 = ConstValueExcelConfigMgr::findConstValue<unsigned int,unsigned long &,unsigned int &>(
         &v6->design_config.txt_config_mgr.const_value_config_mgr,
         CONST_VALUE_HIT_TREE_DROP_PARAM,
         (unsigned int *)(v3 + 48),
         (unsigned __int64 *)(v3 + 144),
         (unsigned int *)(v3 + 64),
         v7,
         v79) != 0;
  std::shared_ptr<Config>::~shared_ptr(&v103);
  if ( v8 )
  {
    common::milog::MiLogStream::create(
      &v111,
      &common::milog::MiLogDefault::default_log_obj_,
      4u,
      "./src/scene/player_scene_comp.cpp",
      "getWidgetQuickHitTreeOutput",
      3127);
    common::milog::MiLogStream::operator<<<char [54],(char *[54])0>(
      &v111,
      (const char (*)[54])"findConstValue CONST_VALUE_HIT_TREE_DROP_PARAM failed");
    common::milog::MiLogStream::~MiLogStream(&v111);
    v2 = -1;
    goto LABEL_109;
  }
  if ( !*(_DWORD *)(v3 + 48) || !*(_DWORD *)(v3 + 64) )
  {
    common::milog::MiLogStream::create(
      &v111,
      &common::milog::MiLogDefault::default_log_obj_,
      4u,
      "./src/scene/player_scene_comp.cpp",
      "getWidgetQuickHitTreeOutput",
      3132);
    v9 = common::milog::MiLogStream::operator<<<char [27],(char *[27])0>(
           &v111,
           (const char (*)[27])"const value tree_vec_cap: ");
    v10 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v9, (const unsigned int *)(v3 + 48));
    v11 = common::milog::MiLogStream::operator<<<char [26],(char *[26])0>(
            v10,
            (const char (*)[26])", tree_drop_times_limit: ");
    v12 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v11, (const unsigned int *)(v3 + 64));
    common::milog::MiLogStream::operator<<<char [9],(char *[9])0>(v12, (const char (*)[9])" invalid");
    common::milog::MiLogStream::~MiLogStream(&v111);
    v2 = -1;
    goto LABEL_109;
  }
  std::vector<LifeEffectHitTreeExtraOutput>::vector((std::vector<LifeEffectHitTreeExtraOutput> *const)(v3 + 208));
  PlayerSceneComp::getValidExtraDropConfigOfWidgetQuickHitTree(
    this,
    (std::vector<LifeEffectHitTreeExtraOutput> *)(v3 + 208));
  std::map<unsigned int,std::vector<HitTreeSortInfo>>::map((std::map<unsigned int,std::vector<HitTreeSortInfo>> *const)(v3 + 528));
  __for_range = valid_hit_tree_vec;
  *(std::vector<HitTreeSortInfo>::const_iterator *)(v3 + 176) = std::vector<HitTreeSortInfo>::begin(valid_hit_tree_vec);
  __for_end._M_current = std::vector<HitTreeSortInfo>::end(__for_range)._M_current;
  while ( __gnu_cxx::operator!=<HitTreeSortInfo const*,std::vector<HitTreeSortInfo>>(
            (const __gnu_cxx::__normal_iterator<const HitTreeSortInfo*,std::vector<HitTreeSortInfo> > *)(v3 + 176),
            &__for_end) )
  {
    cur_hit_tree_info = __gnu_cxx::__normal_iterator<HitTreeSortInfo const*,std::vector<HitTreeSortInfo>>::operator*((const __gnu_cxx::__normal_iterator<const HitTreeSortInfo*,std::vector<HitTreeSortInfo> > *const)(v3 + 176));
    v13 = std::map<unsigned int,std::vector<HitTreeSortInfo>>::operator[](
            (std::map<unsigned int,std::vector<HitTreeSortInfo>> *const)(v3 + 528),
            &cur_hit_tree_info->tree_type);
    std::vector<HitTreeSortInfo>::push_back(v13, cur_hit_tree_info);
    __gnu_cxx::__normal_iterator<HitTreeSortInfo const*,std::vector<HitTreeSortInfo>>::operator++((__gnu_cxx::__normal_iterator<const HitTreeSortInfo*,std::vector<HitTreeSortInfo> > *const)(v3 + 176));
  }
  now_ms = common::tools::TimeUtils::getNowMs();
  is_got_output = 0;
  __for_range_0 = (std::map<unsigned int,std::vector<HitTreeSortInfo>> *)(v3 + 528);
  __for_begin._M_node = std::map<unsigned int,std::vector<HitTreeSortInfo>>::begin((std::map<unsigned int,std::vector<HitTreeSortInfo>> *const)(v3 + 528))._M_node;
  __for_end_0._M_node = std::map<unsigned int,std::vector<HitTreeSortInfo>>::end(__for_range_0)._M_node;
  while ( 2 )
  {
    if ( !std::operator!=(&__for_begin, &__for_end_0) )
    {
      if ( !ret && !is_got_output )
        ret = 11211;
      v2 = ret;
      break;
    }
    v92 = std::_Rb_tree_iterator<std::pair<unsigned int const,std::vector<HitTreeSortInfo>>>::operator*(&__for_begin);
    tree_type = std::get<0ul,unsigned int const,std::vector<HitTreeSortInfo>>(v92);
    cur_hit_tree_vec = (std::tuple_element<1,const std::pair<unsigned int const,std::vector<HitTreeSortInfo> > >::type *)std::get<1ul,unsigned int const,std::vector<HitTreeSortInfo>>(v92);
    ServiceBox::findService<GameserverService>();
    GameserverService::getConfig((GameserverService *const)&v103);
    p_tree_type_config_mgr = &std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false> *const)&v103)->design_config.txt_config_mgr.tree_type_config_mgr;
    if ( *(_BYTE *)(((unsigned __int64)tree_type >> 3) + 0x7FFF8000) != 0
      && (char)(((unsigned __int8)tree_type & 7) + 3) >= *(_BYTE *)(((unsigned __int64)tree_type >> 3) + 0x7FFF8000) )
    {
      __asan_report_load4(tree_type);
    }
    tree_drop_excel_config_ptr = data::TreeTypeExcelConfigMgrBase::findTreeDropExcelConfig(
                                   p_tree_type_config_mgr,
                                   (data::TreeType)*tree_type);
    std::shared_ptr<Config>::~shared_ptr(&v103);
    if ( !tree_drop_excel_config_ptr )
    {
      common::milog::MiLogStream::create(
        &v111,
        &common::milog::MiLogDefault::default_log_obj_,
        4u,
        "./src/scene/player_scene_comp.cpp",
        "getWidgetQuickHitTreeOutput",
        3155);
      v15 = common::milog::MiLogStream::operator<<<char [47],(char *[47])0>(
              &v111,
              (const char (*)[47])"tree_drop_excel_config_ptr is null. tree_type:");
      common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v15, tree_type);
      common::milog::MiLogStream::~MiLogStream(&v111);
      goto LABEL_103;
    }
    *(_DWORD *)(v3 + 80) = 0;
    std::vector<HitTreePos>::vector((std::vector<HitTreePos> *const)(v3 + 272), &this->hit_tree_pos_vec_);
    __for_range_1 = cur_hit_tree_vec;
    __for_begin_0._M_current = std::vector<HitTreeSortInfo>::begin(cur_hit_tree_vec)._M_current;
    __for_end_1._M_current = std::vector<HitTreeSortInfo>::end(__for_range_1)._M_current;
    while ( __gnu_cxx::operator!=<HitTreeSortInfo const*,std::vector<HitTreeSortInfo>>(&__for_begin_0, &__for_end_1) )
    {
      cur_hit_tree_info_0 = __gnu_cxx::__normal_iterator<HitTreeSortInfo const*,std::vector<HitTreeSortInfo>>::operator*(&__for_begin_0);
      tree_pos = &cur_hit_tree_info_0->tree_pos;
      *(_QWORD *)(v3 + 176) = -1LL;
      *(_DWORD *)(v3 + 96) = -1;
      for ( *(_DWORD *)(v3 + 112) = 0; ; ++*(_DWORD *)(v3 + 112) )
      {
        v16 = *(unsigned int *)(v3 + 112);
        if ( v16 >= std::vector<HitTreePos>::size((const std::vector<HitTreePos> *const)(v3 + 272)) )
          break;
        v17 = std::vector<HitTreePos>::operator[](
                (std::vector<HitTreePos> *const)(v3 + 272),
                *(unsigned int *)(v3 + 112));
        if ( operator==(&v17->tree_pos, tree_pos) )
          break;
        v18 = (__int64)std::vector<HitTreePos>::operator[](
                         (std::vector<HitTreePos> *const)(v3 + 272),
                         *(unsigned int *)(v3 + 112));
        if ( *(_BYTE *)(((unsigned __int64)(v18 + 16) >> 3) + 0x7FFF8000) )
          v18 = __asan_report_load8();
        if ( *(_QWORD *)(v18 + 16) < *(_QWORD *)(v3 + 176) )
        {
          *(_DWORD *)(v3 + 96) = *(_DWORD *)(v3 + 112);
          v19 = (__int64)std::vector<HitTreePos>::operator[](
                           (std::vector<HitTreePos> *const)(v3 + 272),
                           *(unsigned int *)(v3 + 112));
          if ( *(_BYTE *)(((unsigned __int64)(v19 + 16) >> 3) + 0x7FFF8000) )
            v19 = __asan_report_load8();
          *(_QWORD *)(v3 + 176) = *(_QWORD *)(v19 + 16);
        }
      }
      v20 = *(unsigned int *)(v3 + 112);
      if ( v20 >= std::vector<HitTreePos>::size((const std::vector<HitTreePos> *const)(v3 + 272)) )
      {
        v30 = *(unsigned int *)(v3 + 112);
        if ( v30 != std::vector<HitTreePos>::size((const std::vector<HitTreePos> *const)(v3 + 272)) )
        {
          common::milog::MiLogStream::create(
            &v105,
            &common::milog::MiLogDefault::default_log_obj_,
            4u,
            "./src/scene/player_scene_comp.cpp",
            "getWidgetQuickHitTreeOutput",
            3194);
          v31 = common::milog::MiLogStream::operator<<<char [15],(char *[15])0>(
                  &v105,
                  (const char (*)[15])"invalid index:");
          v32 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                  v31,
                  (const unsigned int *)(v3 + 112));
          v33 = common::milog::MiLogStream::operator<<<char [29],(char *[29])0>(
                  v32,
                  (const char (*)[29])" temp_hit_tree_pos_vec.size:");
          __for_end._M_current = (const HitTreeSortInfo *)std::vector<HitTreePos>::size((const std::vector<HitTreePos> *const)(v3 + 272));
          common::milog::MiLogStream::operator<<<unsigned long,(unsigned long *)0>(
            v33,
            (const unsigned __int64 *)&__for_end);
          common::milog::MiLogStream::~MiLogStream(&v105);
          ret = -1;
          v2 = -1;
LABEL_81:
          v73 = 0;
          goto LABEL_102;
        }
        if ( *(_DWORD *)(v3 + 112) >= *(_DWORD *)(v3 + 48) )
        {
          if ( *(int *)(v3 + 96) < 0
            || (v39 = *(int *)(v3 + 96),
                v39 >= std::vector<HitTreePos>::size((const std::vector<HitTreePos> *const)(v3 + 272))) )
          {
            common::milog::MiLogStream::create(
              &v107,
              &common::milog::MiLogDefault::default_log_obj_,
              4u,
              "./src/scene/player_scene_comp.cpp",
              "getWidgetQuickHitTreeOutput",
              3216);
            v41 = common::milog::MiLogStream::operator<<<char [31],(char *[31])0>(
                    &v107,
                    (const char (*)[31])"[HIT_TREE] min_last_hit_index:");
            v42 = common::milog::MiLogStream::operator<<<int,(int *)0>(v41, (const int *)(v3 + 96));
            v43 = common::milog::MiLogStream::operator<<<char [18],(char *[18])0>(
                    v42,
                    (const char (*)[18])" min_last_hit_ms:");
            common::milog::MiLogStream::operator<<<unsigned long,(unsigned long *)0>(
              v43,
              (const unsigned __int64 *)(v3 + 176));
            common::milog::MiLogStream::~MiLogStream(&v107);
            ret = -1;
            v2 = -1;
            goto LABEL_81;
          }
          *(_DWORD *)(v3 + 112) = *(_DWORD *)(v3 + 96);
          v44 = *(unsigned int *)(v3 + 112);
          if ( v44 >= std::vector<HitTreePos>::size((const std::vector<HitTreePos> *const)(v3 + 272)) )
          {
            common::milog::MiLogStream::create(
              &v108,
              &common::milog::MiLogDefault::default_log_obj_,
              4u,
              "./src/scene/player_scene_comp.cpp",
              "getWidgetQuickHitTreeOutput",
              3222);
            v45 = common::milog::MiLogStream::operator<<<char [15],(char *[15])0>(
                    &v108,
                    (const char (*)[15])"invalid index:");
            v46 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                    v45,
                    (const unsigned int *)(v3 + 112));
            v47 = common::milog::MiLogStream::operator<<<char [29],(char *[29])0>(
                    v46,
                    (const char (*)[29])" temp_hit_tree_pos_vec.size:");
            __for_end._M_current = (const HitTreeSortInfo *)std::vector<HitTreePos>::size((const std::vector<HitTreePos> *const)(v3 + 272));
            common::milog::MiLogStream::operator<<<unsigned long,(unsigned long *)0>(
              v47,
              (const unsigned __int64 *)&__for_end);
            common::milog::MiLogStream::~MiLogStream(&v108);
            ret = -1;
            v2 = -1;
            goto LABEL_81;
          }
          v48 = std::vector<HitTreePos>::operator[](
                  (std::vector<HitTreePos> *const)(v3 + 272),
                  *(unsigned int *)(v3 + 112));
          cur_hit_tree_pos = v48;
          if ( *(char *)(((unsigned __int64)v48 >> 3) + 0x7FFF8000) < 0
            || *(_BYTE *)((((unsigned __int64)&v48->tree_pos.z + 3) >> 3) + 0x7FFF8000) != 0
            && (((unsigned __int8)v48 + 11) & 7) >= *(_BYTE *)((((unsigned __int64)&v48->tree_pos.z + 3) >> 3)
                                                             + 0x7FFF8000) )
          {
            __asan_report_store_n(v48, 12LL);
          }
          if ( ((unsigned __int8)tree_pos & 7) >= *(_BYTE *)(((unsigned __int64)tree_pos >> 3) + 0x7FFF8000)
            && *(_BYTE *)(((unsigned __int64)tree_pos >> 3) + 0x7FFF8000) != 0
            || *(_BYTE *)((((unsigned __int64)&tree_pos->z + 3) >> 3) + 0x7FFF8000) != 0
            && (((unsigned __int8)tree_pos + 11) & 7) >= *(_BYTE *)((((unsigned __int64)&tree_pos->z + 3) >> 3)
                                                                  + 0x7FFF8000) )
          {
            __asan_report_load_n(tree_pos, 12LL);
          }
          cur_hit_tree_pos->tree_pos = *tree_pos;
          if ( *(_BYTE *)(((unsigned __int64)tree_type >> 3) + 0x7FFF8000) != 0
            && (char)(((unsigned __int8)tree_type & 7) + 3) >= *(_BYTE *)(((unsigned __int64)tree_type >> 3) + 0x7FFF8000) )
          {
            __asan_report_load4(tree_type);
          }
          v49 = *tree_type;
          v50 = (((_BYTE)cur_hit_tree_pos + 12) & 7u) + 3;
          v51 = *(_BYTE *)(((unsigned __int64)&cur_hit_tree_pos->tree_type >> 3) + 0x7FFF8000) != 0
             && (char)((((_BYTE)cur_hit_tree_pos + 12) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&cur_hit_tree_pos->tree_type >> 3)
                                                                             + 0x7FFF8000);
          if ( v51 )
          {
            v49 = (_DWORD)cur_hit_tree_pos + 12;
            __asan_report_store4(&cur_hit_tree_pos->tree_type, v50, v51);
          }
          cur_hit_tree_pos->tree_type = v49;
          if ( *(_BYTE *)(((unsigned __int64)&cur_hit_tree_pos->drop_times >> 3) + 0x7FFF8000) != 0
            && *(_BYTE *)(((unsigned __int64)&cur_hit_tree_pos->drop_times >> 3) + 0x7FFF8000) <= 3 )
          {
            __asan_report_store4(&cur_hit_tree_pos->drop_times, v50, (_BYTE)cur_hit_tree_pos + 24);
          }
          cur_hit_tree_pos->drop_times = 0;
        }
        else
        {
          HitTreePos::HitTreePos((HitTreePos *const)(v3 + 464));
          if ( ((unsigned __int8)tree_pos & 7) >= *(_BYTE *)(((unsigned __int64)tree_pos >> 3) + 0x7FFF8000)
            && *(_BYTE *)(((unsigned __int64)tree_pos >> 3) + 0x7FFF8000) != 0
            || *(_BYTE *)((((unsigned __int64)&tree_pos->z + 3) >> 3) + 0x7FFF8000) != 0
            && (((unsigned __int8)tree_pos + 11) & 7) >= *(_BYTE *)((((unsigned __int64)&tree_pos->z + 3) >> 3)
                                                                  + 0x7FFF8000) )
          {
            __asan_report_load_n(tree_pos, 12LL);
          }
          *(Vector3 *)(v3 + 464) = *tree_pos;
          if ( *(_BYTE *)(((unsigned __int64)tree_type >> 3) + 0x7FFF8000) != 0
            && (char)(((unsigned __int8)tree_type & 7) + 3) >= *(_BYTE *)(((unsigned __int64)tree_type >> 3) + 0x7FFF8000) )
          {
            __asan_report_load4(tree_type);
          }
          *(_DWORD *)(v3 + 476) = *tree_type;
          *(_DWORD *)(v3 + 488) = 0;
          v34 = std::move<HitTreePos &>((HitTreePos *)(v3 + 464));
          std::vector<HitTreePos>::push_back((std::vector<HitTreePos> *const)(v3 + 272), v34);
          v35 = *(unsigned int *)(v3 + 112);
          if ( v35 >= std::vector<HitTreePos>::size((const std::vector<HitTreePos> *const)(v3 + 272)) )
          {
            common::milog::MiLogStream::create(
              &v106,
              &common::milog::MiLogDefault::default_log_obj_,
              4u,
              "./src/scene/player_scene_comp.cpp",
              "getWidgetQuickHitTreeOutput",
              3207);
            v36 = common::milog::MiLogStream::operator<<<char [15],(char *[15])0>(
                    &v106,
                    (const char (*)[15])"invalid index:");
            v37 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                    v36,
                    (const unsigned int *)(v3 + 112));
            v38 = common::milog::MiLogStream::operator<<<char [29],(char *[29])0>(
                    v37,
                    (const char (*)[29])" temp_hit_tree_pos_vec.size:");
            __for_end._M_current = (const HitTreeSortInfo *)std::vector<HitTreePos>::size((const std::vector<HitTreePos> *const)(v3 + 272));
            common::milog::MiLogStream::operator<<<unsigned long,(unsigned long *)0>(
              v38,
              (const unsigned __int64 *)&__for_end);
            common::milog::MiLogStream::~MiLogStream(&v106);
            ret = -1;
            v2 = -1;
            goto LABEL_81;
          }
        }
      }
      else
      {
        v21 = std::vector<HitTreePos>::operator[](
                (std::vector<HitTreePos> *const)(v3 + 272),
                *(unsigned int *)(v3 + 112));
        p_tree_type = &v21->tree_type;
        if ( *(_BYTE *)(((unsigned __int64)p_tree_type >> 3) + 0x7FFF8000) != 0
          && (char)(((unsigned __int8)p_tree_type & 7) + 3) >= *(_BYTE *)(((unsigned __int64)p_tree_type >> 3)
                                                                        + 0x7FFF8000) )
        {
          __asan_report_load4(p_tree_type);
        }
        v23 = v21->tree_type;
        if ( *(_BYTE *)(((unsigned __int64)tree_type >> 3) + 0x7FFF8000) != 0
          && (char)(((unsigned __int8)tree_type & 7) + 3) >= *(_BYTE *)(((unsigned __int64)tree_type >> 3) + 0x7FFF8000) )
        {
          __asan_report_load4(tree_type);
        }
        if ( v23 != *tree_type )
        {
          common::milog::MiLogStream::create(
            &v104,
            &common::milog::MiLogDefault::default_log_obj_,
            1u,
            "./src/scene/player_scene_comp.cpp",
            "getWidgetQuickHitTreeOutput",
            3185);
          v24 = common::milog::MiLogStream::operator<<<char [21],(char *[21])0>(
                  &v104,
                  (const char (*)[21])"[HIT_TREE] tree pos:");
          v25 = operator<<(v24, tree_pos);
          v26 = common::milog::MiLogStream::operator<<<char [24],(char *[24])0>(
                  v25,
                  (const char (*)[24])" type mismatch. server:");
          v27 = std::vector<HitTreePos>::operator[](
                  (std::vector<HitTreePos> *const)(v3 + 272),
                  *(unsigned int *)(v3 + 112));
          v28 = common::milog::MiLogStream::operator<<<int,(int *)0>(v26, &v27->tree_type);
          v29 = common::milog::MiLogStream::operator<<<char [12],(char *[12])0>(v28, (const char (*)[12])off_251827E0);
          common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v29, tree_type);
          common::milog::MiLogStream::~MiLogStream(&v104);
          goto LABEL_82;
        }
      }
      v52 = *(unsigned int *)(v3 + 112);
      if ( v52 >= std::vector<HitTreePos>::size((const std::vector<HitTreePos> *const)(v3 + 272)) )
      {
        common::milog::MiLogStream::create(
          &v109,
          &common::milog::MiLogDefault::default_log_obj_,
          4u,
          "./src/scene/player_scene_comp.cpp",
          "getWidgetQuickHitTreeOutput",
          3233);
        v53 = common::milog::MiLogStream::operator<<<char [15],(char *[15])0>(
                &v109,
                (const char (*)[15])"invalid index:");
        v54 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                v53,
                (const unsigned int *)(v3 + 112));
        v55 = common::milog::MiLogStream::operator<<<char [29],(char *[29])0>(
                v54,
                (const char (*)[29])" temp_hit_tree_pos_vec.size:");
        __for_end._M_current = (const HitTreeSortInfo *)std::vector<HitTreePos>::size((const std::vector<HitTreePos> *const)(v3 + 272));
        common::milog::MiLogStream::operator<<<unsigned long,(unsigned long *)0>(
          v55,
          (const unsigned __int64 *)&__for_end);
        common::milog::MiLogStream::~MiLogStream(&v109);
        ret = -1;
        v2 = -1;
        goto LABEL_81;
      }
      target_hit_tree = std::vector<HitTreePos>::operator[](
                          (std::vector<HitTreePos> *const)(v3 + 272),
                          *(unsigned int *)(v3 + 112));
      if ( *(_BYTE *)(((unsigned __int64)&target_hit_tree->drop_times >> 3) + 0x7FFF8000) != 0
        && *(_BYTE *)(((unsigned __int64)&target_hit_tree->drop_times >> 3) + 0x7FFF8000) <= 3 )
      {
        __asan_report_load4(&target_hit_tree->drop_times);
      }
      if ( target_hit_tree->drop_times >= *(_DWORD *)(v3 + 64) )
      {
        common::milog::MiLogStream::create(
          &v111,
          &common::milog::MiLogDefault::default_log_obj_,
          1u,
          "./src/scene/player_scene_comp.cpp",
          "getWidgetQuickHitTreeOutput",
          3246);
        v67 = common::milog::MiLogStream::operator<<<char [12],(char *[12])0>(&v111, (const char (*)[12])"tree_type: ");
        v68 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v67, tree_type);
        v69 = common::milog::MiLogStream::operator<<<char [13],(char *[13])0>(v68, (const char (*)[13])", tree pos: ");
        v70 = operator<<(v69, tree_pos);
        v71 = common::milog::MiLogStream::operator<<<char [17],(char *[17])0>(
                v70,
                (const char (*)[17])", already drops ");
        v72 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v71, &target_hit_tree->drop_times);
        v66 = " times";
        common::milog::MiLogStream::operator<<<char [7],(char *[7])0>(v72, (const char (*)[7])" times");
        common::milog::MiLogStream::~MiLogStream(&v111);
      }
      else
      {
        common::milog::MiLogStream::create(
          &v110,
          &common::milog::MiLogDefault::default_log_obj_,
          1u,
          "./src/scene/player_scene_comp.cpp",
          "getWidgetQuickHitTreeOutput",
          3239);
        v56 = common::milog::MiLogStream::operator<<<char [23],(char *[23])0>(
                &v110,
                (const char (*)[23])"part drop, tree_type: ");
        v57 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v56, tree_type);
        v58 = common::milog::MiLogStream::operator<<<char [13],(char *[13])0>(v57, (const char (*)[13])", tree pos: ");
        v59 = operator<<(v58, tree_pos);
        v60 = common::milog::MiLogStream::operator<<<char [13],(char *[13])0>(v59, (const char (*)[13])", will drop ");
        v61 = *(_DWORD *)(v3 + 64);
        if ( *(_BYTE *)(((unsigned __int64)&target_hit_tree->drop_times >> 3) + 0x7FFF8000) != 0
          && *(_BYTE *)(((unsigned __int64)&target_hit_tree->drop_times >> 3) + 0x7FFF8000) <= 3 )
        {
          __asan_report_load4(&target_hit_tree->drop_times);
        }
        *(_DWORD *)(v3 + 128) = v61 - target_hit_tree->drop_times;
        v62 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                v60,
                (const unsigned int *)(v3 + 128));
        common::milog::MiLogStream::operator<<<char [7],(char *[7])0>(v62, (const char (*)[7])" times");
        common::milog::MiLogStream::~MiLogStream(&v110);
        v63 = *(_DWORD *)(v3 + 64);
        if ( *(_BYTE *)(((unsigned __int64)&target_hit_tree->drop_times >> 3) + 0x7FFF8000) != 0
          && *(_BYTE *)(((unsigned __int64)&target_hit_tree->drop_times >> 3) + 0x7FFF8000) <= 3 )
        {
          __asan_report_load4(&target_hit_tree->drop_times);
        }
        v66 = (const char *)(v63 - target_hit_tree->drop_times);
        *(_DWORD *)(v3 + 80) = SAFE_ADD<unsigned int,unsigned int>(*(_DWORD *)(v3 + 80), (unsigned int)v66);
        v64 = *(_DWORD *)(v3 + 64);
        v65 = *(_BYTE *)(((unsigned __int64)&target_hit_tree->drop_times >> 3) + 0x7FFF8000);
        LOBYTE(v66) = v65 != 0;
        if ( v65 != 0 && v65 <= 3 )
          __asan_report_store4(&target_hit_tree->drop_times, v66, (_BYTE)target_hit_tree + 24);
        target_hit_tree->drop_times = v64;
      }
      if ( *(_BYTE *)(((unsigned __int64)&target_hit_tree->last_hit_ms >> 3) + 0x7FFF8000) )
        __asan_report_store8(&target_hit_tree->last_hit_ms, v66);
      target_hit_tree->last_hit_ms = now_ms;
LABEL_82:
      __gnu_cxx::__normal_iterator<HitTreeSortInfo const*,std::vector<HitTreeSortInfo>>::operator++(&__for_begin_0);
    }
    if ( *(_DWORD *)(v3 + 80) )
    {
      if ( *(_BYTE *)(((unsigned __int64)&tree_drop_excel_config_ptr->drop_id >> 3) + 0x7FFF8000) != 0
        && (char)((((_BYTE)tree_drop_excel_config_ptr + 12) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&tree_drop_excel_config_ptr->drop_id >> 3)
                                                                                  + 0x7FFF8000) )
      {
        __asan_report_load4(&tree_drop_excel_config_ptr->drop_id);
      }
      *(_DWORD *)(v3 + 128) = tree_drop_excel_config_ptr->drop_id;
      ActionReason::ActionReason((ActionReason *const)(v3 + 336), ACTION_REASON_HIT_TREE_DROP, ITEM_LIMIT_HIT_TREE_DROP);
      if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
        __asan_report_load8();
      player_item_comp = Player::getItemComp(this->player_);
      check_ret = PlayerItemComp::checkFrontLooseGrantDropItems(
                    player_item_comp,
                    *(_DWORD *)(v3 + 128),
                    *(_DWORD *)(v3 + 80),
                    (const ActionReason *)(v3 + 336),
                    0LL);
      if ( check_ret )
      {
        if ( check_ret == 617 )
          ret = 617;
        v73 = 1;
      }
      else
      {
        std::vector<HitTreePos>::operator=(&this->hit_tree_pos_vec_, (const std::vector<HitTreePos> *)(v3 + 272));
        if ( *(_BYTE *)(((unsigned __int64)&this->last_hit_tree_drop_ms_ >> 3) + 0x7FFF8000) )
          __asan_report_store8(&this->last_hit_tree_drop_ms_, v3 + 272);
        this->last_hit_tree_drop_ms_ = now_ms;
        std::vector<AddItemResult>::vector((std::vector<AddItemResult> *const)(v3 + 400));
        PlayerItemComp::grantDropItems(
          player_item_comp,
          *(_DWORD *)(v3 + 128),
          *(_DWORD *)(v3 + 80),
          (const ActionReason *)(v3 + 336),
          (std::vector<AddItemResult> *)(v3 + 400));
        is_got_output = 1;
        common::milog::MiLogStream::create(
          &v111,
          &common::milog::MiLogDefault::default_log_obj_,
          1u,
          "./src/scene/player_scene_comp.cpp",
          "getWidgetQuickHitTreeOutput",
          3275);
        v74 = common::milog::MiLogStream::operator<<<char [34],(char *[34])0>(
                &v111,
                (const char (*)[34])"hittree, fix drop wood, drop id: ");
        v75 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                v74,
                (const unsigned int *)(v3 + 128));
        v76 = common::milog::MiLogStream::operator<<<char [15],(char *[15])0>(v75, (const char (*)[15])", drop times: ");
        common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v76, (const unsigned int *)(v3 + 80));
        common::milog::MiLogStream::~MiLogStream(&v111);
        std::set<unsigned int>::insert(&this->obtained_wood_type_set_, tree_type);
        if ( *(_BYTE *)(((unsigned __int64)&tree_drop_excel_config_ptr->talent_extra_drop_id >> 3) + 0x7FFF8000) != 0
          && *(_BYTE *)(((unsigned __int64)&tree_drop_excel_config_ptr->talent_extra_drop_id >> 3) + 0x7FFF8000) <= 3 )
        {
          __asan_report_load4(&tree_drop_excel_config_ptr->talent_extra_drop_id);
        }
        if ( tree_drop_excel_config_ptr->talent_extra_drop_id )
          PlayerSceneComp::extraDropOnWidgetQuickHitTreeByTalent(
            this,
            tree_drop_excel_config_ptr->talent_extra_drop_id,
            *(_DWORD *)(v3 + 80),
            (const std::vector<LifeEffectHitTreeExtraOutput> *)(v3 + 208),
            (std::vector<AddItemResult> *)(v3 + 400));
        if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
          __asan_report_load8();
        WatcherComp = Player::getWatcherComp(this->player_);
        PlayerWatcherComp::triggerObtainWood(WatcherComp, (const std::vector<AddItemResult> *)(v3 + 400));
        std::vector<AddItemResult>::~vector((std::vector<AddItemResult> *const)(v3 + 400));
        v73 = 2;
      }
    }
    else
    {
      v73 = 1;
    }
LABEL_102:
    std::vector<HitTreePos>::~vector((std::vector<HitTreePos> *const)(v3 + 272));
    if ( v73 )
    {
LABEL_103:
      std::_Rb_tree_iterator<std::pair<unsigned int const,std::vector<HitTreeSortInfo>>>::operator++(&__for_begin);
      continue;
    }
    break;
  }
  std::map<unsigned int,std::vector<HitTreeSortInfo>>::~map((std::map<unsigned int,std::vector<HitTreeSortInfo>> *const)(v3 + 528));
  std::vector<LifeEffectHitTreeExtraOutput>::~vector((std::vector<LifeEffectHitTreeExtraOutput> *const)(v3 + 208));
LABEL_109:
  result = v2;
  if ( v112 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8010) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8018) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8020) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8028) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8030) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8038) = 0LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8040) = 0;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8048) = 0;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8020) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8028) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8030) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8038) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8040) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8048) = -168430091;
  }
  return result;
};

// Line 3294: range 0000000013E5D138-0000000013E5D530
void __cdecl PlayerSceneComp::getValidExtraDropConfigOfWidgetQuickHitTree(
        PlayerSceneComp *const this,
        std::vector<LifeEffectHitTreeExtraOutput> *valid_extra_drop_config_vec)
{
  unsigned __int64 v2; // r12
  __int64 v3; // rax
  _DWORD *v4; // r13
  std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v5; // rax
  PlayerAvatarComp *AvatarComp; // r14
  PlayerSceneComp::getValidExtraDropConfigOfWidgetQuickHitTree::<lambda(Avatar&)> v7; // [rsp-30h] [rbp-180h]
  std::unordered_map<unsigned int,std::set<unsigned int>>::key_type __x; // [rsp+14h] [rbp-13Ch] BYREF
  std::__detail::_Node_iterator_base<std::pair<unsigned int const,std::set<unsigned int> >,false> __y; // [rsp+18h] [rbp-138h] BYREF
  const AvatarTalentExcelConfigMgr *avatar_talent_config_mgr; // [rsp+20h] [rbp-130h]
  const std::unordered_map<unsigned int,LifeEffectHitTreeExtraOutput> *proud_hit_tree_extra_output_config_map; // [rsp+28h] [rbp-128h]
  const std::unordered_map<unsigned int,std::set<unsigned int>> *proud_life_effect_avatars_map; // [rsp+30h] [rbp-120h]
  const std::set<unsigned int> *hit_tree_extra_output_avatar_set; // [rsp+38h] [rbp-118h]
  std::shared_ptr<Config> v14; // [rsp+40h] [rbp-110h] BYREF
  common::milog::MiLogStream v15; // [rsp+50h] [rbp-100h] BYREF
  PlayerSceneComp::getValidExtraDropConfigOfWidgetQuickHitTree::<lambda(Avatar&)> __f; // [rsp+70h] [rbp-E0h]
  char v17[176]; // [rsp+A0h] [rbp-B0h] BYREF

  v2 = (unsigned __int64)v17;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_1(128LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "3 32 8 20 cur_avatar_guid:3300 64 8 9 iter:3306 96 16 19 cur_avatar_ptr:3295";
  *(_QWORD *)(v2 + 16) = PlayerSceneComp::getValidExtraDropConfigOfWidgetQuickHitTree;
  v4 = (_DWORD *)(v2 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = -218959360;
  v4[536862722] = -218959360;
  v4[536862723] = -202178560;
  if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
    __asan_report_load8();
  Player::getAvatarComp(this->player_);
  PlayerAvatarComp::getCurAvatar((const PlayerAvatarComp *const)(v2 + 96));
  if ( !std::operator==<Avatar>(0LL, (const std::shared_ptr<Avatar> *)(v2 + 96)) )
  {
    v5 = std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 96));
    *(_QWORD *)(v2 + 32) = Avatar::getGuid(v5);
    ServiceBox::findService<GameserverService>();
    GameserverService::getConfig((GameserverService *const)&v14);
    avatar_talent_config_mgr = &std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false> *const)&v14)->design_config.txt_config_mgr.avatar_talent_config_mgr;
    std::shared_ptr<Config>::~shared_ptr(&v14);
    proud_hit_tree_extra_output_config_map = &avatar_talent_config_mgr->proud_hit_tree_extra_output_config_map;
    proud_life_effect_avatars_map = &avatar_talent_config_mgr->proud_life_effect_avatars_map;
    __x = 701;
    *(std::unordered_map<unsigned int,std::set<unsigned int>>::const_iterator *)(v2 + 64) = std::unordered_map<unsigned int,std::set<unsigned int>>::find(
                                                                                              &avatar_talent_config_mgr->proud_life_effect_avatars_map,
                                                                                              &__x);
    __y._M_cur = std::unordered_map<unsigned int,std::set<unsigned int>>::end(proud_life_effect_avatars_map)._M_cur;
    if ( std::__detail::operator==<std::pair<unsigned int const,std::set<unsigned int>>,false>(
           (const std::__detail::_Node_iterator_base<std::pair<unsigned int const,std::set<unsigned int> >,false> *)(v2 + 64),
           &__y) )
    {
      common::milog::MiLogStream::create(
        &v15,
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/scene/player_scene_comp.cpp",
        "getValidExtraDropConfigOfWidgetQuickHitTree",
        3309);
      common::milog::MiLogStream::operator<<<char [70],(char *[70])0>(
        &v15,
        (const char (*)[70])"data::PROUD_EFFECT_HIT_TREE_EXTRA_OUTPUT has no corresponding avatars");
      common::milog::MiLogStream::~MiLogStream(&v15);
    }
    else
    {
      hit_tree_extra_output_avatar_set = &std::__detail::_Node_const_iterator<std::pair<unsigned int const,std::set<unsigned int>>,false,false>::operator->((const std::__detail::_Node_const_iterator<std::pair<unsigned int const,std::set<unsigned int> >,false,false> *const)(v2 + 64))->second;
      if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
        __asan_report_load8();
      AvatarComp = Player::getAvatarComp(this->player_);
      __f.__hit_tree_extra_output_avatar_set = hit_tree_extra_output_avatar_set;
      __f.__proud_hit_tree_extra_output_config_map = proud_hit_tree_extra_output_config_map;
      __f.__avatar_talent_config_mgr = avatar_talent_config_mgr;
      __f.__cur_avatar_guid = (const uint64_t *)(v2 + 32);
      __f.__valid_extra_drop_config_vec = valid_extra_drop_config_vec;
      v7.__valid_extra_drop_config_vec = valid_extra_drop_config_vec;
      v7.__cur_avatar_guid = (const uint64_t *)(v2 + 32);
      v7.__avatar_talent_config_mgr = avatar_talent_config_mgr;
      v7.__proud_hit_tree_extra_output_config_map = proud_hit_tree_extra_output_config_map;
      v7.__hit_tree_extra_output_avatar_set = hit_tree_extra_output_avatar_set;
      std::function<ForeachPolicy ()(Avatar &)>::function<PlayerSceneComp::getValidExtraDropConfigOfWidgetQuickHitTree(std::vector<LifeEffectHitTreeExtraOutput> &)::{lambda(Avatar &)#1},void,void>(
        (std::function<ForeachPolicy(Avatar&)> *const)&v15,
        v7);
      PlayerAvatarComp::foreachMyAvatarInSceneTeam(AvatarComp, (std::function<ForeachPolicy(Avatar&)> *)&v15);
      std::function<ForeachPolicy ()(Avatar &)>::~function((std::function<ForeachPolicy(Avatar&)> *const)&v15);
    }
  }
  std::shared_ptr<Avatar>::~shared_ptr((std::shared_ptr<Avatar> *const)(v2 + 96));
  if ( v17 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
};

// Line 3314: range 0000000013E5CC38-0000000013E5D136
ForeachPolicy __cdecl PlayerSceneComp::getValidExtraDropConfigOfWidgetQuickHitTree(std::vector<LifeEffectHitTreeExtraOutput> &)::{lambda(Avatar &)#1}::operator()(
        const PlayerSceneComp::getValidExtraDropConfigOfWidgetQuickHitTree::<lambda(Avatar&)> *const __closure,
        Avatar *avatar)
{
  unsigned __int64 v2; // rbx
  __int64 v3; // rax
  _DWORD *v4; // r13
  ForeachPolicy result; // eax
  TalentComp *TalentComp; // rax
  __gnu_cxx::__normal_iterator<unsigned int*,std::vector<unsigned int> >::reference v7; // rax
  _DWORD *v8; // rdx
  common::milog::MiLogStream *v9; // rax
  common::milog::MiLogStream *v10; // rax
  common::milog::MiLogStream *v11; // rdx
  uint64_t Guid; // rcx
  unsigned __int64 cur_avatar_guid; // rax
  char v14; // al
  std::vector<LifeEffectHitTreeExtraOutput> *valid_extra_drop_config_vec; // r14
  std::__detail::_Node_const_iterator<std::pair<unsigned int const,LifeEffectHitTreeExtraOutput>,false,false>::pointer v16; // rax
  std::vector<unsigned int>::iterator __for_begin; // [rsp+18h] [rbp-F8h] BYREF
  std::vector<unsigned int>::iterator __for_end; // [rsp+20h] [rbp-F0h] BYREF
  std::__detail::_Node_iterator_base<std::pair<unsigned int const,LifeEffectHitTreeExtraOutput>,false> __y; // [rsp+28h] [rbp-E8h] BYREF
  std::vector<unsigned int> *__for_range; // [rsp+30h] [rbp-E0h]
  const data::ProudSkillExcelConfig *proud_skill_config_ptr; // [rsp+38h] [rbp-D8h]
  std::vector<unsigned int> v22; // [rsp+40h] [rbp-D0h] BYREF
  common::milog::MiLogStream v23; // [rsp+60h] [rbp-B0h] BYREF
  char v24[144]; // [rsp+80h] [rbp-90h] BYREF

  v2 = (unsigned __int64)v24;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_1(96LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "2 48 4 19 proud_skill_id:3320 64 8 16 config_iter:3322";
  *(_QWORD *)(v2 + 16) = PlayerSceneComp::getValidExtraDropConfigOfWidgetQuickHitTree(std::vector<LifeEffectHitTreeExtraOutput> &)::{lambda(Avatar &)#1}::operator();
  v4 = (_DWORD *)(v2 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = -234556943;
  v4[536862722] = -202116352;
  *(_DWORD *)(v2 + 48) = Avatar::getAvatarId(avatar);
  if ( *(_BYTE *)(((unsigned __int64)__closure >> 3) + 0x7FFF8000) )
    __asan_report_load8();
  if ( !common::tools::MiscUtils::isContains<std::set<unsigned int> const,unsigned int>(
          __closure->__hit_tree_extra_output_avatar_set,
          (const unsigned int *)(v2 + 48)) )
  {
    result = FOREACH_CONTINUE;
  }
  else
  {
    TalentComp = Avatar::getTalentComp(avatar);
    TalentComp::getProudSkills(&v22, TalentComp);
    __for_range = &v22;
    __for_begin._M_current = std::vector<unsigned int>::begin(&v22)._M_current;
    __for_end._M_current = std::vector<unsigned int>::end(&v22)._M_current;
    while ( __gnu_cxx::operator!=<unsigned int *,std::vector<unsigned int>>(&__for_begin, &__for_end) )
    {
      v7 = __gnu_cxx::__normal_iterator<unsigned int *,std::vector<unsigned int>>::operator*(&__for_begin);
      v8 = v7;
      if ( *(_BYTE *)(((unsigned __int64)v7 >> 3) + 0x7FFF8000) != 0
        && (char)(((unsigned __int8)v7 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)v7 >> 3) + 0x7FFF8000) )
      {
        __asan_report_load4(v7);
      }
      *(_DWORD *)(v2 + 48) = *v8;
      if ( *(_BYTE *)(((unsigned __int64)&__closure->__proud_hit_tree_extra_output_config_map >> 3) + 0x7FFF8000) )
        __asan_report_load8();
      *(std::unordered_map<unsigned int,LifeEffectHitTreeExtraOutput>::const_iterator *)(v2 + 64) = std::unordered_map<unsigned int,LifeEffectHitTreeExtraOutput>::find(__closure->__proud_hit_tree_extra_output_config_map, (const std::unordered_map<unsigned int,LifeEffectHitTreeExtraOutput>::key_type *)(v2 + 48));
      __y._M_cur = std::unordered_map<unsigned int,LifeEffectHitTreeExtraOutput>::end(__closure->__proud_hit_tree_extra_output_config_map)._M_cur;
      if ( !std::__detail::operator==<std::pair<unsigned int const,LifeEffectHitTreeExtraOutput>,false>(
              (const std::__detail::_Node_iterator_base<std::pair<unsigned int const,LifeEffectHitTreeExtraOutput>,false> *)(v2 + 64),
              &__y) )
      {
        if ( *(_BYTE *)(((unsigned __int64)&__closure->__avatar_talent_config_mgr >> 3) + 0x7FFF8000) )
          __asan_report_load8();
        proud_skill_config_ptr = data::AvatarTalentExcelConfigMgrBase::findProudSkillExcelConfig(
                                   __closure->__avatar_talent_config_mgr,
                                   *(_DWORD *)(v2 + 48));
        if ( proud_skill_config_ptr )
        {
          if ( *(char *)(((unsigned __int64)&proud_skill_config_ptr->effective_for_team >> 3) + 0x7FFF8000) < 0 )
            __asan_report_load1(&proud_skill_config_ptr->effective_for_team);
          if ( proud_skill_config_ptr->effective_for_team )
            goto LABEL_28;
          Guid = Avatar::getGuid(avatar);
          if ( *(_BYTE *)(((unsigned __int64)&__closure->__cur_avatar_guid >> 3) + 0x7FFF8000) )
            __asan_report_load8();
          cur_avatar_guid = (unsigned __int64)__closure->__cur_avatar_guid;
          if ( *(_BYTE *)((cur_avatar_guid >> 3) + 0x7FFF8000) )
            cur_avatar_guid = __asan_report_load8();
          if ( Guid == *(_QWORD *)cur_avatar_guid )
LABEL_28:
            v14 = 0;
          else
            v14 = 1;
          if ( !v14 )
          {
            if ( *(_BYTE *)(((unsigned __int64)&__closure->__valid_extra_drop_config_vec >> 3) + 0x7FFF8000) )
              __asan_report_load8();
            valid_extra_drop_config_vec = __closure->__valid_extra_drop_config_vec;
            v16 = std::__detail::_Node_const_iterator<std::pair<unsigned int const,LifeEffectHitTreeExtraOutput>,false,false>::operator->((const std::__detail::_Node_const_iterator<std::pair<unsigned int const,LifeEffectHitTreeExtraOutput>,false,false> *const)(v2 + 64));
            std::vector<LifeEffectHitTreeExtraOutput>::push_back(valid_extra_drop_config_vec, &v16->second);
          }
        }
        else
        {
          common::milog::MiLogStream::create(
            &v23,
            &common::milog::MiLogDefault::default_log_obj_,
            3u,
            "./src/scene/player_scene_comp.cpp",
            "operator()",
            3330);
          v9 = common::milog::MiLogStream::operator<<<char [48],(char *[48])0>(
                 &v23,
                 (const char (*)[48])"findProudSkillExcelConfig fail, proud_skill_id:");
          v10 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                  v9,
                  (const unsigned int *)(v2 + 48));
          v11 = common::milog::MiLogStream::operator<<<char [9],(char *[9])0>(v10, (const char (*)[9])" avatar:");
          common::milog::MiLogStream::operator<<<Avatar,(Avatar*)0>(v11, avatar);
          common::milog::MiLogStream::~MiLogStream(&v23);
        }
      }
      __gnu_cxx::__normal_iterator<unsigned int *,std::vector<unsigned int>>::operator++(&__for_begin);
    }
    std::vector<unsigned int>::~vector(&v22);
    result = FOREACH_CONTINUE;
  }
  if ( v24 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8008) = 0;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8008) = -168430091;
  }
  return result;
};

// Line 3345: range 0000000013E5D532-0000000013E5DAE9
void __fastcall PlayerSceneComp::extraDropOnWidgetQuickHitTreeByTalent(
        PlayerSceneComp *const this,
        const uint32_t talent_extra_drop_id,
        uint32_t count_times,
        const std::vector<LifeEffectHitTreeExtraOutput> *valid_extra_drop_config_vec,
        std::vector<AddItemResult> *extra_item_param_vec,
        double a6,
        float a7)
{
  unsigned __int64 v7; // r13
  __int64 v8; // rax
  _DWORD *v9; // r12
  const LifeEffectHitTreeExtraOutput *v11; // rax
  common::milog::MiLogStream *v12; // rax
  common::milog::MiLogStream *v13; // rax
  common::milog::MiLogStream *v14; // rcx
  common::milog::MiLogStream *v15; // rax
  common::milog::MiLogStream *v16; // rax
  common::milog::MiLogStream *v17; // rax
  bool has_found; // [rsp+2Fh] [rbp-111h]
  uint32_t i; // [rsp+30h] [rbp-110h]
  std::vector<LifeEffectHitTreeExtraOutput>::const_iterator __for_begin; // [rsp+38h] [rbp-108h] BYREF
  std::vector<LifeEffectHitTreeExtraOutput>::const_iterator __for_end; // [rsp+40h] [rbp-100h] BYREF
  const std::vector<LifeEffectHitTreeExtraOutput> *__for_range; // [rsp+48h] [rbp-F8h]
  const LifeEffectHitTreeExtraOutput *config; // [rsp+50h] [rbp-F0h]
  PlayerItemComp *player_item_comp; // [rsp+58h] [rbp-E8h]
  common::milog::MiLogStream v28; // [rsp+60h] [rbp-E0h] BYREF
  char v29[192]; // [rsp+80h] [rbp-C0h] BYREF

  v7 = (unsigned __int64)v29;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v8 = __asan_stack_malloc_2(160LL);
    if ( v8 )
      v7 = v8;
  }
  *(_QWORD *)v7 = 1102416563LL;
  *(_QWORD *)(v7 + 8) = "4 48 4 20 need_drop_times:3350 64 4 25 max_extra_drop_count:3354 80 4 25 talent_extra_drop_id:33"
                        "43 96 24 18 action_reason:3384";
  *(_QWORD *)(v7 + 16) = PlayerSceneComp::extraDropOnWidgetQuickHitTreeByTalent;
  v9 = (_DWORD *)(v7 >> 3);
  v9[536862720] = -235802127;
  v9[536862721] = -234556943;
  v9[536862722] = -234556924;
  v9[536862723] = -218103808;
  v9[536862724] = -202116109;
  *(_DWORD *)(v7 + 80) = talent_extra_drop_id;
  if ( *(_DWORD *)(v7 + 80)
    && count_times
    && !std::vector<LifeEffectHitTreeExtraOutput>::empty(valid_extra_drop_config_vec) )
  {
    *(_DWORD *)(v7 + 48) = 0;
    for ( i = 0; i < count_times; ++i )
    {
      has_found = 0;
      *(_DWORD *)(v7 + 64) = 0;
      __for_range = valid_extra_drop_config_vec;
      __for_begin._M_current = std::vector<LifeEffectHitTreeExtraOutput>::begin(valid_extra_drop_config_vec)._M_current;
      __for_end._M_current = std::vector<LifeEffectHitTreeExtraOutput>::end(__for_range)._M_current;
      while ( __gnu_cxx::operator!=<LifeEffectHitTreeExtraOutput const*,std::vector<LifeEffectHitTreeExtraOutput>>(
                &__for_begin,
                &__for_end) )
      {
        v11 = __gnu_cxx::__normal_iterator<LifeEffectHitTreeExtraOutput const*,std::vector<LifeEffectHitTreeExtraOutput>>::operator*(&__for_begin);
        config = v11;
        if ( *(_BYTE *)(((unsigned __int64)v11 >> 3) + 0x7FFF8000) != 0
          && (char)(((unsigned __int8)v11 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)v11 >> 3) + 0x7FFF8000) )
        {
          __asan_report_load4(v11);
        }
        if ( common::tools::RandomUtils::randomTestProbability(a7) )
        {
          if ( !has_found )
            goto LABEL_21;
          if ( *(_BYTE *)(((unsigned __int64)&config->extra_item_count >> 3) + 0x7FFF8000) != 0
            && (char)((((_BYTE)config + 4) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&config->extra_item_count >> 3)
                                                                 + 0x7FFF8000) )
          {
            __asan_report_load4(&config->extra_item_count);
          }
          if ( config->extra_item_count > *(_DWORD *)(v7 + 64) )
          {
LABEL_21:
            has_found = 1;
            if ( *(_BYTE *)(((unsigned __int64)&config->extra_item_count >> 3) + 0x7FFF8000) != 0
              && (char)((((_BYTE)config + 4) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&config->extra_item_count >> 3)
                                                                   + 0x7FFF8000) )
            {
              __asan_report_load4(&config->extra_item_count);
            }
            *(_DWORD *)(v7 + 64) = config->extra_item_count;
          }
        }
        __gnu_cxx::__normal_iterator<LifeEffectHitTreeExtraOutput const*,std::vector<LifeEffectHitTreeExtraOutput>>::operator++(&__for_begin);
      }
      if ( has_found )
      {
        if ( *(_DWORD *)(v7 + 64) != 1 )
        {
          common::milog::MiLogStream::create(
            &v28,
            &common::milog::MiLogDefault::default_log_obj_,
            4u,
            "./src/scene/player_scene_comp.cpp",
            "extraDropOnWidgetQuickHitTreeByTalent",
            3373);
          v12 = common::milog::MiLogStream::operator<<<char [30],(char *[30])0>(
                  &v28,
                  (const char (*)[30])"invalid max_extra_drop_count:");
          v13 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                  v12,
                  (const unsigned int *)(v7 + 64));
          v14 = common::milog::MiLogStream::operator<<<char [9],(char *[9])0>(v13, (const char (*)[9])" player:");
          if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
            __asan_report_load8();
          operator<<(v14, this->player_);
          common::milog::MiLogStream::~MiLogStream(&v28);
          goto LABEL_37;
        }
        *(_DWORD *)(v7 + 48) = SAFE_ADD<unsigned int,unsigned int>(*(_DWORD *)(v7 + 48), *(_DWORD *)(v7 + 64));
      }
    }
    if ( *(_DWORD *)(v7 + 48) )
    {
      ActionReason::ActionReason((ActionReason *const)(v7 + 96), ACTION_REASON_HIT_TREE_DROP, ITEM_LIMIT_HIT_TREE_DROP);
      if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
        __asan_report_load8();
      player_item_comp = Player::getItemComp(this->player_);
      if ( !PlayerItemComp::checkFrontLooseGrantDropItems(
              player_item_comp,
              *(_DWORD *)(v7 + 80),
              *(_DWORD *)(v7 + 48),
              (const ActionReason *)(v7 + 96),
              0LL) )
      {
        PlayerItemComp::grantDropItems(
          player_item_comp,
          *(_DWORD *)(v7 + 80),
          *(_DWORD *)(v7 + 48),
          (const ActionReason *)(v7 + 96),
          extra_item_param_vec);
        common::milog::MiLogStream::create(
          &v28,
          &common::milog::MiLogDefault::default_log_obj_,
          1u,
          "./src/scene/player_scene_comp.cpp",
          "extraDropOnWidgetQuickHitTreeByTalent",
          3393);
        v15 = common::milog::MiLogStream::operator<<<char [36],(char *[36])0>(
                &v28,
                (const char (*)[36])"hittree, extra drop wood, drop id: ");
        v16 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                v15,
                (const unsigned int *)(v7 + 80));
        v17 = common::milog::MiLogStream::operator<<<char [15],(char *[15])0>(v16, (const char (*)[15])", drop times: ");
        common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v17, (const unsigned int *)(v7 + 48));
        common::milog::MiLogStream::~MiLogStream(&v28);
      }
    }
  }
LABEL_37:
  if ( v29 == (char *)v7 )
  {
    *(_QWORD *)((v7 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v7 >> 3) + 0x7FFF8008) = 0LL;
    *(_DWORD *)((v7 >> 3) + 0x7FFF8010) = 0;
  }
  else
  {
    *(_QWORD *)v7 = 1172321806LL;
    *(_QWORD *)((v7 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v7 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v7 >> 3) + 0x7FFF8010) = -168430091;
  }
};

// Line 3397: range 0000000013E5DAEA-0000000013E5DBEA
uint32_t __cdecl PlayerSceneComp::getTrivialEntityDropNum(const PlayerSceneComp *const this)
{
  std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v1; // rax
  time_t v2; // rcx
  uint32_t offset; // [rsp+18h] [rbp-18h]
  uint32_t now; // [rsp+1Ch] [rbp-14h]
  std::shared_ptr<Config> v6; // [rsp+20h] [rbp-10h] BYREF

  ServiceBox::findService<GameserverService>();
  GameserverService::getConfig((GameserverService *const)&v6);
  v1 = std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false> *const)&v6);
  offset = ConstValueExcelConfigMgr::getTimeOffsetSec(&v1->design_config.txt_config_mgr.const_value_config_mgr);
  std::shared_ptr<Config>::~shared_ptr(&v6);
  now = common::tools::TimeUtils::getNow();
  v2 = offset;
  if ( *(_BYTE *)(((unsigned __int64)&this->trivial_entity_drop_time_ >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)this + 84) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&this->trivial_entity_drop_time_ >> 3)
                                                        + 0x7FFF8000) )
  {
    __asan_report_load4(&this->trivial_entity_drop_time_);
  }
  if ( !common::tools::TimeUtils::isSameDay(now, this->trivial_entity_drop_time_, v2) )
    return 0;
  if ( *(_BYTE *)(((unsigned __int64)&this->trivial_entity_drop_num_ >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->trivial_entity_drop_num_ >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4(&this->trivial_entity_drop_num_);
  }
  return this->trivial_entity_drop_num_;
};

// Line 3408: range 0000000013E5DBEC-0000000013E5DD2E
void __cdecl PlayerSceneComp::updateTrivialEntityDropNum(PlayerSceneComp *const this, const Vector3 *entity_pos)
{
  uint32_t v2; // ecx
  char v3; // al
  uint32_t Now; // edi
  bool v5; // dl
  std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v6; // rax
  const std::deque<Vector3>::value_type *entity_posa; // [rsp+0h] [rbp-30h]
  uint32_t cache_num; // [rsp+1Ch] [rbp-14h]
  std::shared_ptr<Config> v10; // [rsp+20h] [rbp-10h] BYREF

  entity_posa = entity_pos;
  v2 = PlayerSceneComp::getTrivialEntityDropNum(this) + 1;
  v3 = *(_BYTE *)(((unsigned __int64)&this->trivial_entity_drop_num_ >> 3) + 0x7FFF8000);
  if ( v3 != 0 && v3 <= 3 )
  {
    LOBYTE(entity_pos) = v3 != 0;
    __asan_report_store4(&this->trivial_entity_drop_num_, entity_pos, (_BYTE)this + 80);
  }
  this->trivial_entity_drop_num_ = v2;
  Now = common::tools::TimeUtils::getNow();
  v5 = *(_BYTE *)(((unsigned __int64)&this->trivial_entity_drop_time_ >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)this + 84) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&this->trivial_entity_drop_time_ >> 3)
                                                        + 0x7FFF8000);
  if ( v5 )
  {
    Now = (_DWORD)this + 340;
    __asan_report_store4(&this->trivial_entity_drop_time_, (((_BYTE)this + 84) & 7u) + 3, v5);
  }
  this->trivial_entity_drop_time_ = Now;
  std::deque<Vector3>::push_back(&this->bush_drop_pos_deque_, entity_posa);
  ServiceBox::findService<GameserverService>();
  GameserverService::getConfig((GameserverService *const)&v10);
  v6 = std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false> *const)&v10);
  cache_num = ConstValueExcelConfigMgr::getBushDropCachaNum(&v6->design_config.txt_config_mgr.const_value_config_mgr);
  std::shared_ptr<Config>::~shared_ptr(&v10);
  while ( std::deque<Vector3>::size(&this->bush_drop_pos_deque_) > cache_num )
    std::deque<Vector3>::pop_front(&this->bush_drop_pos_deque_);
};

// Line 3424: range 0000000013E5DD30-0000000013E5DFA3
void __cdecl PlayerSceneComp::copyMapMarkFromMapMarkBin(
        PlayerSceneComp *const this,
        proto::MapMarkPoint *dest,
        const proto::MapMarkPointBin *src)
{
  google::protobuf::uint32 v3; // edx
  const std::string *v4; // rdx
  google::protobuf::uint32 v5; // edx
  google::protobuf::uint32 v6; // edx
  int v7; // eax
  signed int v8; // edx
  common::milog::MiLogStream *v9; // rax
  int v10; // eax
  signed int v11; // edx
  common::milog::MiLogStream *v12; // rax
  const proto::VectorBin *v13; // rax
  float v14; // xmm0_4
  const proto::VectorBin *v15; // rax
  float v16; // xmm0_4
  const proto::VectorBin *v17; // rax
  float v18; // xmm0_4
  unsigned int val; // [rsp+24h] [rbp-3Ch] BYREF
  proto::Vector *pos; // [rsp+28h] [rbp-38h]
  common::milog::MiLogStream v22; // [rsp+30h] [rbp-30h] BYREF

  v3 = proto::MapMarkPointBin::scene_id(src);
  proto::MapMarkPoint::set_scene_id(dest, v3);
  v4 = proto::MapMarkPointBin::name[abi:cxx11](src);
  proto::MapMarkPoint::set_name(dest, v4);
  v5 = proto::MapMarkPointBin::monster_id(src);
  proto::MapMarkPoint::set_monster_id(dest, v5);
  v6 = proto::MapMarkPointBin::quest_id(src);
  proto::MapMarkPoint::set_quest_id(dest, v6);
  v7 = proto::MapMarkPointBin::point_type(src);
  if ( proto::MapMarkPointType_IsValid(v7) )
  {
    v8 = proto::MapMarkPointBin::point_type(src);
    proto::MapMarkPoint::set_point_type(dest, (proto::MapMarkPointType)v8);
  }
  else
  {
    common::milog::MiLogStream::create(
      &v22,
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/scene/player_scene_comp.cpp",
      "copyMapMarkFromMapMarkBin",
      3435);
    val = proto::MapMarkPointBin::point_type(src);
    v9 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(&v22, &val);
    common::milog::MiLogStream::operator<<<char [33],(char *[33])0>(v9, (const char (*)[33])off_25183C80);
    common::milog::MiLogStream::~MiLogStream(&v22);
  }
  v10 = proto::MapMarkPointBin::from_type(src);
  if ( proto::MapMarkFromType_IsValid(v10) )
  {
    v11 = proto::MapMarkPointBin::from_type(src);
    proto::MapMarkPoint::set_from_type(dest, (proto::MapMarkFromType)v11);
  }
  else
  {
    common::milog::MiLogStream::create(
      &v22,
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/scene/player_scene_comp.cpp",
      "copyMapMarkFromMapMarkBin",
      3443);
    val = proto::MapMarkPointBin::from_type(src);
    v12 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(&v22, &val);
    common::milog::MiLogStream::operator<<<char [32],(char *[32])0>(v12, (const char (*)[32])off_25183CE0);
    common::milog::MiLogStream::~MiLogStream(&v22);
  }
  pos = proto::MapMarkPoint::mutable_pos(dest);
  v13 = proto::MapMarkPointBin::pos(src);
  v14 = proto::VectorBin::x(v13);
  proto::Vector::set_x(pos, v14);
  v15 = proto::MapMarkPointBin::pos(src);
  v16 = proto::VectorBin::y(v15);
  proto::Vector::set_y(pos, v16);
  v17 = proto::MapMarkPointBin::pos(src);
  v18 = proto::VectorBin::z(v17);
  proto::Vector::set_z(pos, v18);
};

// Line 3454: range 0000000013E5DFA4-0000000013E5E0D4
void __cdecl PlayerSceneComp::copyMapMarkBinFromMapMark(
        PlayerSceneComp *const this,
        proto::MapMarkPointBin *dest,
        const proto::MapMarkPoint *src)
{
  google::protobuf::uint32 v3; // edx
  const std::string *v4; // rdx
  google::protobuf::uint32 v5; // edx
  google::protobuf::uint32 v6; // edx
  google::protobuf::uint32 v7; // edx
  google::protobuf::uint32 v8; // edx
  const proto::Vector *v9; // rax
  float v10; // xmm0_4
  const proto::Vector *v11; // rax
  float v12; // xmm0_4
  const proto::Vector *v13; // rax
  float v14; // xmm0_4
  proto::VectorBin *pos_bin; // [rsp+28h] [rbp-8h]

  v3 = proto::MapMarkPoint::scene_id(src);
  proto::MapMarkPointBin::set_scene_id(dest, v3);
  v4 = proto::MapMarkPoint::name[abi:cxx11](src);
  proto::MapMarkPointBin::set_name(dest, v4);
  v5 = proto::MapMarkPoint::monster_id(src);
  proto::MapMarkPointBin::set_monster_id(dest, v5);
  v6 = proto::MapMarkPoint::point_type(src);
  proto::MapMarkPointBin::set_point_type(dest, v6);
  v7 = proto::MapMarkPoint::from_type(src);
  proto::MapMarkPointBin::set_from_type(dest, v7);
  v8 = proto::MapMarkPoint::quest_id(src);
  proto::MapMarkPointBin::set_quest_id(dest, v8);
  pos_bin = proto::MapMarkPointBin::mutable_pos(dest);
  v9 = proto::MapMarkPoint::pos(src);
  v10 = proto::Vector::x(v9);
  proto::VectorBin::set_x(pos_bin, v10);
  v11 = proto::MapMarkPoint::pos(src);
  v12 = proto::Vector::y(v11);
  proto::VectorBin::set_y(pos_bin, v12);
  v13 = proto::MapMarkPoint::pos(src);
  v14 = proto::Vector::z(v13);
  proto::VectorBin::set_z(pos_bin, v14);
};

// Line 3469: range 0000000013E5E0D6-0000000013E60A6C
__int64 __fastcall PlayerSceneComp::joinPlayerScene(PlayerSceneComp *const this, __int32 target_uid)
{
  unsigned int v2; // r14d
  unsigned __int64 v3; // r13
  __int64 v4; // rax
  _DWORD *v5; // r12
  PlayerBasicComp *BasicComp; // rax
  common::milog::MiLogStream *v7; // r14
  GameserverService *v8; // rax
  unsigned int GameThreadLocal; // eax
  common::milog::MiLogStream *v10; // rax
  common::milog::MiLogStream *v11; // rax
  common::milog::MiLogStream *v12; // r14
  Player *v13; // rax
  common::milog::MiLogStream *v14; // rax
  common::milog::MiLogStream *v15; // rax
  common::milog::MiLogStream *v16; // r14
  Player *v17; // rax
  Player *v18; // rax
  common::milog::MiLogStream *v19; // rax
  common::milog::MiLogStream *v20; // rax
  common::milog::MiLogStream *v21; // r14
  std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v22; // rax
  DungeonScene *v23; // rax
  std::__shared_ptr_access<DungeonScene,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v25; // rax
  int v26; // r15d
  CharAmusementDungeonContext *v27; // rax
  common::milog::MiLogStream *v28; // r14
  common::milog::MiLogStream *v29; // rax
  common::milog::MiLogStream *v30; // r14
  std::__shared_ptr_access<DungeonScene,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v31; // rax
  PlayerDungeonComp *DungeonComp; // rax
  int v33; // r15d
  Player *v34; // rax
  common::milog::MiLogStream *v35; // rax
  common::milog::MiLogStream *v36; // rax
  common::milog::MiLogStream *v37; // r14
  std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v38; // rax
  common::milog::MiLogStream *v39; // rax
  common::milog::MiLogStream *v40; // rax
  common::milog::MiLogStream *v41; // r14
  PlayerBasicComp *v42; // rax
  common::milog::MiLogStream *v43; // r14
  PlayerBasicComp *v44; // rax
  uint32_t WorldLevel; // r14d
  Player *v46; // rax
  PlayerBasicComp *v47; // rax
  common::milog::MiLogStream *v48; // rax
  common::milog::MiLogStream *v49; // rax
  common::milog::MiLogStream *v50; // rax
  common::milog::MiLogStream *v51; // r14
  PlayerMpComp *MpComp; // rax
  common::milog::MiLogStream *v53; // r14
  std::__shared_ptr_access<PlayerWorld,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v54; // rax
  common::milog::MiLogStream *v56; // r14
  PlayerMpComp *v57; // rax
  PlayerMatchComp *MatchComp; // rax
  char v59; // al
  Player *v60; // rax
  PlayerMpComp *v61; // r14
  uint32_t v62; // eax
  int32_t v63; // ecx
  char v64; // dl
  __int64 v65; // rsi
  bool v66; // dl
  common::milog::MiLogStream *v67; // rax
  common::milog::MiLogStream *v68; // rax
  common::milog::MiLogStream *v69; // rax
  common::milog::MiLogStream *v70; // rax
  common::milog::MiLogStream *v71; // r14
  Player *v72; // rax
  PlayerMpComp *v73; // r14
  uint32_t v74; // eax
  std::tuple_element<0,std::pair<int,std::vector<unsigned int> > >::type v75; // ecx
  char v76; // dl
  __int64 v77; // rsi
  bool v78; // dl
  common::milog::MiLogStream *v79; // rax
  common::milog::MiLogStream *v80; // rax
  common::milog::MiLogStream *v81; // rax
  common::milog::MiLogStream *v82; // rax
  common::milog::MiLogStream *v83; // r14
  std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v84; // rax
  common::milog::MiLogStream *v85; // r14
  std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v86; // rax
  Player *v87; // rax
  Scene *v88; // rax
  SceneTransferGuardComp *TransferGuardComp; // r14
  uint32_t v90; // eax
  char v91; // al
  common::milog::MiLogStream *v92; // rax
  common::milog::MiLogStream *v93; // rax
  common::milog::MiLogStream *v94; // rax
  common::milog::MiLogStream *v95; // rax
  common::milog::MiLogStream *v96; // r14
  Scene *v97; // rax
  SceneMultistagePlayComp *MultistagePlayComp; // r14
  uint32_t v99; // eax
  char v100; // al
  common::milog::MiLogStream *v101; // rax
  common::milog::MiLogStream *v102; // rax
  common::milog::MiLogStream *v103; // rax
  common::milog::MiLogStream *v104; // rax
  std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v105; // rax
  uint32_t SceneId; // r14d
  std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v107; // rax
  Player *v109; // rax
  PlayerSceneComp *SceneComp; // rax
  unsigned __int64 DestPos; // rax
  Player *v112; // rax
  PlayerSceneComp *v113; // rax
  unsigned __int64 DestRot; // rax
  uint32_t v115; // r14d
  std::__shared_ptr_access<Player,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v116; // rax
  std::__shared_ptr_access<ScenePlayerLocation,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *n; // rax
  std::__shared_ptr_access<ScenePlayerLocation,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v118; // rax
  Scene *v119; // rax
  std::__shared_ptr_access<SceneTransferAwaiter,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v120; // rax
  unsigned __int64 v122; // rax
  unsigned __int64 v123; // rdx
  void (__fastcall *v124)(unsigned __int64, unsigned __int64, Player *); // r8
  common::milog::MiLogStream *v125; // rax
  common::milog::MiLogStream *v126; // rax
  common::milog::MiLogStream *v127; // r14
  std::pair<Vector3,Vector3> *v128; // rax
  std::pair<Vector3,Vector3> *v129; // r14
  Player *v130; // rax
  PlayerMpComp *v131; // rax
  Player *v132; // rax
  PlayerSceneComp *v133; // rax
  std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v134; // rax
  PlayerDungeonComp *v135; // rax
  Scene *v136; // rax
  bool v137; // r14
  common::milog::MiLogStream *v138; // r14
  common::milog::MiLogStream *v139; // rax
  common::milog::MiLogStream *v140; // rax
  __int64 result; // rax
  std::string v142; // [rsp+0h] [rbp-350h]
  char *v143; // [rsp+8h] [rbp-348h]
  PlayerSceneComp *thisa; // [rsp+18h] [rbp-338h]
  unsigned int Uid; // [rsp+20h] [rbp-330h] BYREF
  unsigned int val; // [rsp+24h] [rbp-32Ch] BYREF
  std::tuple_element<0,std::pair<int,std::vector<unsigned int> > >::type *retcode; // [rsp+28h] [rbp-328h]
  std::tuple_element<1,std::pair<int,std::vector<unsigned int> > >::type *_; // [rsp+30h] [rbp-320h]
  const SceneScriptConfig *scene_script_config_ptr; // [rsp+38h] [rbp-318h]
  std::pair<int,std::vector<unsigned int> > __in; // [rsp+40h] [rbp-310h] BYREF
  std::string v151; // [rsp+60h] [rbp-2F0h] BYREF
  TransferReason p_reason; // [rsp+80h] [rbp-2D0h] BYREF
  char v153[656]; // [rsp+C0h] [rbp-290h] BYREF

  *(&v142._anon_0._M_allocated_capacity + 1) = (std::string::size_type)this;
  HIDWORD(v142._anon_0._M_allocated_capacity) = target_uid;
  v3 = (unsigned __int64)v153;
  v142._M_string_length = (std::string::size_type)v153;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_4(608LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "14 48 1 11 holder:3470 64 4 15 target_uid:3468 80 12 13 born_pos:3595 112 12 13 born_rot:3596 14"
                        "4 16 22 target_player_ptr:3477 176 16 21 target_world_ptr:3483 208 16 18 cur_scene_ptr:3490 240 "
                        "16 19 dest_scene_ptr:3491 272 16 17 my_world_ptr:3563 304 16 26 target_dest_scene_ptr:3598 336 1"
                        "6 16 awaiter_ptr:3629 368 16 24 player_location_ptr:3618 400 28 16 rewrite_opt:3632 464 104 16 context_opt:3508";
  *(_QWORD *)(v3 + 16) = PlayerSceneComp::joinPlayerScene;
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = -234753551;
  v5[536862722] = 61956;
  v5[536862722] = 0x4000000;
  v5[536862723] = 62194;
  v5[536862723] = 0x4000000;
  v5[536862724] = 62194;
  v5[536862725] = 62194;
  v5[536862726] = 62194;
  v5[536862727] = 62194;
  v5[536862728] = 62194;
  v5[536862729] = 62194;
  v5[536862730] = 62194;
  v5[536862731] = 62194;
  v5[536862732] = 62194;
  v5[536862733] = -219020288;
  v5[536862734] = 62194;
  v5[536862737] = -218103808;
  v5[536862738] = -202116109;
  *(_DWORD *)(v3 + 64) = target_uid;
  if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
    __asan_report_load8();
  BasicComp = Player::getBasicComp(this->player_);
  PlayerBasicComp::getNextTransNo[abi:cxx11](&v151, BasicComp);
  StatLogUtils::ContextHolder::ContextHolder((StatLogUtils::ContextHolder *const)(v3 + 48), 0x709u, v142);
  std::string::~string(&v151);
  if ( *(_BYTE *)(((unsigned __int64)&thisa->player_ >> 3) + 0x7FFF8000) )
    __asan_report_load8();
  if ( Player::getUid(thisa->player_) != *(_DWORD *)(v3 + 64) )
  {
    v8 = ServiceBox::findService<GameserverService>();
    GameThreadLocal = (unsigned int)GameserverService::getGameThreadLocal(v8);
    PlayerMgr::findOnlinePlayer((PlayerMgr *const)(v3 + 144), GameThreadLocal + 16);
    if ( std::operator==<Player>((const std::shared_ptr<Player> *)(v3 + 144), 0LL) )
    {
      common::milog::MiLogStream::create(
        (common::milog::MiLogStream *)&v151,
        &common::milog::MiLogDefault::default_log_obj_,
        1u,
        "./src/scene/player_scene_comp.cpp",
        "joinPlayerScene",
        3480);
      v10 = common::milog::MiLogStream::operator<<<char [37],(char *[37])0>(
              (common::milog::MiLogStream *const)&v151,
              (const char (*)[37])"findOnlinePlayer failed, target_uid:");
      v11 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v10, (const unsigned int *)(v3 + 64));
      v12 = common::milog::MiLogStream::operator<<<char [6],(char *[6])0>(v11, (const char (*)[6])" uid:");
      if ( *(_BYTE *)(((unsigned __int64)&thisa->player_ >> 3) + 0x7FFF8000) )
        __asan_report_load8();
      val = Player::getUid(thisa->player_);
      common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v12, &val);
      common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)&v151);
      v2 = 140;
      goto LABEL_201;
    }
    v13 = std::__shared_ptr_access<Player,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Player,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 144));
    Player::getSceneComp(v13);
    PlayerSceneComp::getMyPlayerWorld((const PlayerSceneComp *const)(v3 + 176));
    if ( std::operator==<PlayerWorld>((const std::shared_ptr<PlayerWorld> *)(v3 + 176), 0LL) )
    {
      common::milog::MiLogStream::create(
        (common::milog::MiLogStream *)&v151,
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/scene/player_scene_comp.cpp",
        "joinPlayerScene",
        3486);
      v14 = common::milog::MiLogStream::operator<<<char [47],(char *[47])0>(
              (common::milog::MiLogStream *const)&v151,
              (const char (*)[47])"target_player getMyPlayerWorld fails, target: ");
      v15 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v14, (const unsigned int *)(v3 + 64));
      v16 = common::milog::MiLogStream::operator<<<char [7],(char *[7])0>(v15, (const char (*)[7])" uid: ");
      if ( *(_BYTE *)(((unsigned __int64)&thisa->player_ >> 3) + 0x7FFF8000) )
        __asan_report_load8();
      val = Player::getUid(thisa->player_);
      common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v16, &val);
      common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)&v151);
      v2 = -1;
      goto LABEL_200;
    }
    PlayerSceneComp::getCurScene((const PlayerSceneComp *const)(v3 + 208));
    v17 = std::__shared_ptr_access<Player,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Player,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 144));
    Player::getSceneComp(v17);
    PlayerSceneComp::getDestScene((const PlayerSceneComp *const)(v3 + 240));
    if ( std::operator==<Scene>((const std::shared_ptr<Scene> *)(v3 + 240), 0LL) )
    {
      v18 = std::__shared_ptr_access<Player,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Player,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 144));
      Player::getSceneComp(v18);
      PlayerSceneComp::getCurScene((const PlayerSceneComp *const)(v3 + 368));
      std::shared_ptr<Scene>::operator=((std::shared_ptr<Scene> *const)(v3 + 240), (std::shared_ptr<Scene> *)(v3 + 368));
      std::shared_ptr<Scene>::~shared_ptr((std::shared_ptr<Scene> *const)(v3 + 368));
    }
    if ( std::operator==<Scene>((const std::shared_ptr<Scene> *)(v3 + 240), 0LL) )
    {
      common::milog::MiLogStream::create(
        (common::milog::MiLogStream *)&v151,
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/scene/player_scene_comp.cpp",
        "joinPlayerScene",
        3498);
      v19 = common::milog::MiLogStream::operator<<<char [39],(char *[39])0>(
              (common::milog::MiLogStream *const)&v151,
              (const char (*)[39])"dest_scene_ptr is nullptr, target_uid:");
      v20 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v19, (const unsigned int *)(v3 + 64));
      v21 = common::milog::MiLogStream::operator<<<char [6],(char *[6])0>(v20, (const char (*)[6])" uid:");
      if ( *(_BYTE *)(((unsigned __int64)&thisa->player_ >> 3) + 0x7FFF8000) )
        __asan_report_load8();
      val = Player::getUid(thisa->player_);
      common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v21, &val);
      common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)&v151);
      v2 = -1;
      goto LABEL_199;
    }
    v22 = std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 240));
    if ( Scene::getSceneType(v22) != SCENE_DUNGEON )
      goto LABEL_51;
    std::dynamic_pointer_cast<DungeonScene,Scene>((const std::shared_ptr<Scene> *)(v3 + 336));
    if ( std::operator!=<DungeonScene>((const std::shared_ptr<DungeonScene> *)(v3 + 336), 0LL)
      && (v23 = std::__shared_ptr_access<DungeonScene,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<DungeonScene,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 336)),
          DungeonScene::isEnterByCharAmusementActivity(v23)) )
    {
      common::milog::MiLogStream::create(
        (common::milog::MiLogStream *)&v151,
        &common::milog::MiLogDefault::default_log_obj_,
        1u,
        "./src/scene/player_scene_comp.cpp",
        "joinPlayerScene",
        3507);
      common::milog::MiLogStream::operator<<<char [32],(char *[32])0>(
        (common::milog::MiLogStream *const)&v151,
        (const char (*)[32])"entering char amusement dungeon");
      common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)&v151);
      v25 = std::__shared_ptr_access<DungeonScene,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<DungeonScene,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 336));
      DungeonScene::getDungeonExtraData<CharAmusementDungeonContext>(
        (std::optional<CharAmusementDungeonContext> *)(v3 + 464),
        v25);
      if ( !std::optional<CharAmusementDungeonContext>::has_value((const std::optional<CharAmusementDungeonContext> *const)(v3 + 464)) )
      {
        v2 = -1;
        v26 = 0;
      }
      else
      {
        if ( *(_BYTE *)(((unsigned __int64)&thisa->player_ >> 3) + 0x7FFF8000) )
          __asan_report_load8();
        val = Player::getUid(thisa->player_);
        v27 = std::optional<CharAmusementDungeonContext>::operator->((std::optional<CharAmusementDungeonContext> *const)(v3 + 464));
        if ( !common::tools::MiscUtils::isContains<std::map<unsigned int,CharAmusementTrialAvatarInfo>,unsigned int>(
                &v27->uid_avatar_info_map,
                &val) )
        {
          common::milog::MiLogStream::create(
            (common::milog::MiLogStream *)&v151,
            &common::milog::MiLogDefault::default_log_obj_,
            3u,
            "./src/scene/player_scene_comp.cpp",
            "joinPlayerScene",
            3517);
          v28 = common::milog::MiLogStream::operator<<<char [40],(char *[40])0>(
                  (common::milog::MiLogStream *const)&v151,
                  (const char (*)[40])"player is not in dungeon context! uid: ");
          if ( *(_BYTE *)(((unsigned __int64)&thisa->player_ >> 3) + 0x7FFF8000) )
            __asan_report_load8();
          Uid = Player::getUid(thisa->player_);
          v29 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v28, &Uid);
          v30 = common::milog::MiLogStream::operator<<<char [20],(char *[20])0>(
                  v29,
                  (const char (*)[20])", scene_owner_uid: ");
          v31 = std::__shared_ptr_access<DungeonScene,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<DungeonScene,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 336));
          val = Scene::getOwnerUid((const Scene *const)v31);
          common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v30, &val);
          common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)&v151);
          v2 = 1233;
          v26 = 0;
        }
        else
        {
          if ( *(_BYTE *)(((unsigned __int64)&thisa->player_ >> 3) + 0x7FFF8000) )
            __asan_report_load8();
          DungeonComp = Player::getDungeonComp(thisa->player_);
          PlayerDungeonComp::clearQuitPosRot(DungeonComp);
          v26 = 1;
        }
      }
      std::optional<CharAmusementDungeonContext>::~optional((std::optional<CharAmusementDungeonContext> *const)(v3 + 464));
      if ( v26 != 1 )
      {
        v33 = 0;
        goto LABEL_50;
      }
    }
    else
    {
      v34 = std::__shared_ptr_access<Player,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Player,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 144));
      Player::getSceneComp(v34);
      PlayerSceneComp::getMainWorldScene((PlayerSceneComp *const)(v3 + 368));
      std::shared_ptr<Scene>::operator=<PlayerWorldScene>(
        (std::shared_ptr<Scene> *const)(v3 + 240),
        (std::shared_ptr<PlayerWorldScene> *)(v3 + 368));
      std::shared_ptr<PlayerWorldScene>::~shared_ptr((std::shared_ptr<PlayerWorldScene> *const)(v3 + 368));
      if ( std::operator==<Scene>((const std::shared_ptr<Scene> *)(v3 + 240), 0LL) )
      {
        common::milog::MiLogStream::create(
          (common::milog::MiLogStream *)&v151,
          &common::milog::MiLogDefault::default_log_obj_,
          3u,
          "./src/scene/player_scene_comp.cpp",
          "joinPlayerScene",
          3531);
        v35 = common::milog::MiLogStream::operator<<<char [38],(char *[38])0>(
                (common::milog::MiLogStream *const)&v151,
                (const char (*)[38])"getMainWorldScene fails, target_uid: ");
        v36 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                v35,
                (const unsigned int *)(v3 + 64));
        v37 = common::milog::MiLogStream::operator<<<char [7],(char *[7])0>(v36, (const char (*)[7])" uid: ");
        if ( *(_BYTE *)(((unsigned __int64)&thisa->player_ >> 3) + 0x7FFF8000) )
          __asan_report_load8();
        val = Player::getUid(thisa->player_);
        common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v37, &val);
        common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)&v151);
        v2 = -1;
        v33 = 0;
LABEL_50:
        std::shared_ptr<DungeonScene>::~shared_ptr((std::shared_ptr<DungeonScene> *const)(v3 + 336));
        if ( v33 != 1 )
        {
LABEL_199:
          std::shared_ptr<Scene>::~shared_ptr((std::shared_ptr<Scene> *const)(v3 + 240));
          std::shared_ptr<Scene>::~shared_ptr((std::shared_ptr<Scene> *const)(v3 + 208));
LABEL_200:
          std::shared_ptr<PlayerWorld>::~shared_ptr((std::shared_ptr<PlayerWorld> *const)(v3 + 176));
LABEL_201:
          std::shared_ptr<Player>::~shared_ptr((std::shared_ptr<Player> *const)(v3 + 144));
          goto LABEL_202;
        }
LABEL_51:
        v38 = std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 240));
        if ( Scene::getOwnerUid(v38) != *(_DWORD *)(v3 + 64) )
        {
          common::milog::MiLogStream::create(
            (common::milog::MiLogStream *)&v151,
            &common::milog::MiLogDefault::default_log_obj_,
            3u,
            "./src/scene/player_scene_comp.cpp",
            "joinPlayerScene",
            3538);
          v39 = common::milog::MiLogStream::operator<<<char [46],(char *[46])0>(
                  (common::milog::MiLogStream *const)&v151,
                  (const char (*)[46])"dest_scene_ptr->getOwnerUid() != target_uid: ");
          v40 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                  v39,
                  (const unsigned int *)(v3 + 64));
          v41 = common::milog::MiLogStream::operator<<<char [7],(char *[7])0>(v40, (const char (*)[7])" uid: ");
          if ( *(_BYTE *)(((unsigned __int64)&thisa->player_ >> 3) + 0x7FFF8000) )
            __asan_report_load8();
LABEL_54:
          val = Player::getUid(thisa->player_);
          common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v41, &val);
          common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)&v151);
          v2 = -1;
          goto LABEL_199;
        }
        if ( *(_BYTE *)(((unsigned __int64)&thisa->player_ >> 3) + 0x7FFF8000) )
          __asan_report_load8();
        v42 = Player::getBasicComp(thisa->player_);
        if ( !PlayerBasicComp::isStateOpen(v42, 0x31u) )
        {
          common::milog::MiLogStream::create(
            (common::milog::MiLogStream *)&v151,
            &common::milog::MiLogDefault::default_log_obj_,
            4u,
            "./src/scene/player_scene_comp.cpp",
            "joinPlayerScene",
            3543);
          v43 = common::milog::MiLogStream::operator<<<char [32],(char *[32])0>(
                  (common::milog::MiLogStream *const)&v151,
                  (const char (*)[32])"player mp switch not open, uid:");
          if ( *(_BYTE *)(((unsigned __int64)&thisa->player_ >> 3) + 0x7FFF8000) )
            __asan_report_load8();
          val = Player::getUid(thisa->player_);
          common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v43, &val);
          common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)&v151);
          v2 = 1223;
          goto LABEL_199;
        }
        if ( *(_BYTE *)(((unsigned __int64)&thisa->player_ >> 3) + 0x7FFF8000) )
          __asan_report_load8();
        v44 = Player::getBasicComp(thisa->player_);
        WorldLevel = PlayerBasicComp::getWorldLevel(v44);
        v46 = std::__shared_ptr_access<Player,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Player,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 144));
        v47 = Player::getBasicComp(v46);
        if ( WorldLevel < PlayerBasicComp::getWorldLevel(v47) )
        {
          common::milog::MiLogStream::create(
            (common::milog::MiLogStream *)&v151,
            &common::milog::MiLogDefault::default_log_obj_,
            3u,
            "./src/scene/player_scene_comp.cpp",
            "joinPlayerScene",
            3548);
          v41 = common::milog::MiLogStream::operator<<<char [50],(char *[50])0>(
                  (common::milog::MiLogStream *const)&v151,
                  (const char (*)[50])"player world level lower than target player, uid:");
          if ( *(_BYTE *)(((unsigned __int64)&thisa->player_ >> 3) + 0x7FFF8000) )
            __asan_report_load8();
          goto LABEL_54;
        }
        if ( *(_BYTE *)(((unsigned __int64)&thisa->player_ >> 3) + 0x7FFF8000) )
          __asan_report_load8();
        Player::checkMpModeAvailability(&__in, thisa->player_);
        retcode = std::get<0ul,int,std::vector<unsigned int>>(&__in);
        _ = std::get<1ul,int,std::vector<unsigned int>>(&__in);
        if ( *(_BYTE *)(((unsigned __int64)retcode >> 3) + 0x7FFF8000) != 0
          && (char)(((unsigned __int8)retcode & 7) + 3) >= *(_BYTE *)(((unsigned __int64)retcode >> 3) + 0x7FFF8000) )
        {
          __asan_report_load4(retcode);
        }
        if ( *retcode )
        {
          common::milog::MiLogStream::create(
            (common::milog::MiLogStream *)&v151,
            &common::milog::MiLogDefault::default_log_obj_,
            3u,
            "./src/scene/player_scene_comp.cpp",
            "joinPlayerScene",
            3554);
          v48 = common::milog::MiLogStream::operator<<<char [22],(char *[22])0>(
                  (common::milog::MiLogStream *const)&v151,
                  (const char (*)[22])"mp is not enterable, ");
          v49 = common::milog::MiLogStream::operator<<<char [10],(char *[10])0>(v48, (const char (*)[10])" retcode:");
          v50 = common::milog::MiLogStream::operator<<<int,(int *)0>(v49, retcode);
          v51 = common::milog::MiLogStream::operator<<<char [6],(char *[6])0>(v50, (const char (*)[6])" uid:");
          if ( *(_BYTE *)(((unsigned __int64)&thisa->player_ >> 3) + 0x7FFF8000) )
            __asan_report_load8();
          val = Player::getUid(thisa->player_);
          common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v51, &val);
          common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)&v151);
          if ( *(_BYTE *)(((unsigned __int64)retcode >> 3) + 0x7FFF8000) != 0
            && (char)(((unsigned __int8)retcode & 7) + 3) >= *(_BYTE *)(((unsigned __int64)retcode >> 3) + 0x7FFF8000) )
          {
            __asan_report_load4(retcode);
          }
          v2 = *retcode;
          goto LABEL_198;
        }
        if ( *(_BYTE *)(((unsigned __int64)&thisa->player_ >> 3) + 0x7FFF8000) )
          __asan_report_load8();
        MpComp = Player::getMpComp(thisa->player_);
        if ( !PlayerMpComp::isAllowEnterPlayerEmpty(MpComp) )
        {
          common::milog::MiLogStream::create(
            (common::milog::MiLogStream *)&v151,
            &common::milog::MiLogDefault::default_log_obj_,
            1u,
            "./src/scene/player_scene_comp.cpp",
            "joinPlayerScene",
            3559);
          v53 = common::milog::MiLogStream::operator<<<char [37],(char *[37])0>(
                  (common::milog::MiLogStream *const)&v151,
                  (const char (*)[37])"others is entering self world, uid: ");
          if ( *(_BYTE *)(((unsigned __int64)&thisa->player_ >> 3) + 0x7FFF8000) )
            __asan_report_load8();
          val = Player::getUid(thisa->player_);
          common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v53, &val);
          common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)&v151);
          v2 = 1216;
          goto LABEL_198;
        }
        if ( *(_BYTE *)(((unsigned __int64)&thisa->player_ >> 3) + 0x7FFF8000) )
          __asan_report_load8();
        Player::getSceneComp(thisa->player_);
        PlayerSceneComp::getMyPlayerWorld((const PlayerSceneComp *const)(v3 + 272));
        if ( std::operator!=<PlayerWorld>(0LL, (const std::shared_ptr<PlayerWorld> *)(v3 + 272)) )
        {
          v54 = std::__shared_ptr_access<PlayerWorld,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<PlayerWorld,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 272));
          if ( World::getPlayerCount(v54) > 1 )
          {
            common::milog::MiLogStream::create(
              (common::milog::MiLogStream *)&v151,
              &common::milog::MiLogDefault::default_log_obj_,
              3u,
              "./src/scene/player_scene_comp.cpp",
              "joinPlayerScene",
              3566);
            v56 = common::milog::MiLogStream::operator<<<char [33],(char *[33])0>(
                    (common::milog::MiLogStream *const)&v151,
                    (const char (*)[33])off_251843A0);
            if ( *(_BYTE *)(((unsigned __int64)&thisa->player_ >> 3) + 0x7FFF8000) )
              __asan_report_load8();
LABEL_92:
            val = Player::getUid(thisa->player_);
            common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v56, &val);
            common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)&v151);
            v2 = 1202;
LABEL_197:
            std::shared_ptr<PlayerWorld>::~shared_ptr((std::shared_ptr<PlayerWorld> *const)(v3 + 272));
LABEL_198:
            std::pair<int,std::vector<unsigned int>>::~pair(&__in);
            goto LABEL_199;
          }
        }
        if ( *(_BYTE *)(((unsigned __int64)&thisa->player_ >> 3) + 0x7FFF8000) )
          __asan_report_load8();
        v57 = Player::getMpComp(thisa->player_);
        if ( !PlayerMpComp::isInMpMode(v57) )
          goto LABEL_100;
        if ( *(_BYTE *)(((unsigned __int64)&thisa->player_ >> 3) + 0x7FFF8000) )
          __asan_report_load8();
        MatchComp = Player::getMatchComp(thisa->player_);
        if ( !PlayerMatchComp::isAfterGeneralMatch(MatchComp) )
          v59 = 1;
        else
LABEL_100:
          v59 = 0;
        if ( v59 )
        {
          common::milog::MiLogStream::create(
            (common::milog::MiLogStream *)&v151,
            &common::milog::MiLogDefault::default_log_obj_,
            3u,
            "./src/scene/player_scene_comp.cpp",
            "joinPlayerScene",
            3571);
          v56 = common::milog::MiLogStream::operator<<<char [33],(char *[33])0>(
                  (common::milog::MiLogStream *const)&v151,
                  (const char (*)[33])off_251843A0);
          if ( *(_BYTE *)(((unsigned __int64)&thisa->player_ >> 3) + 0x7FFF8000) )
            __asan_report_load8();
          goto LABEL_92;
        }
        v60 = std::__shared_ptr_access<Player,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Player,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 144));
        v61 = Player::getMpComp(v60);
        if ( *(_BYTE *)(((unsigned __int64)&thisa->player_ >> 3) + 0x7FFF8000) )
          __asan_report_load8();
        v62 = Player::getUid(thisa->player_);
        v65 = v62;
        v63 = PlayerMpComp::checkMpSceneEnterable(v61, v62);
        v64 = *(_BYTE *)(((unsigned __int64)retcode >> 3) + 0x7FFF8000);
        LOBYTE(v65) = v64 != 0;
        v66 = v64 != 0 && (char)(((unsigned __int8)retcode & 7) + 3) >= v64;
        if ( v66 )
          __asan_report_store4(retcode, v65, v66);
        *retcode = v63;
        if ( *retcode )
        {
          common::milog::MiLogStream::create(
            (common::milog::MiLogStream *)&v151,
            &common::milog::MiLogDefault::default_log_obj_,
            1u,
            "./src/scene/player_scene_comp.cpp",
            "joinPlayerScene",
            3578);
          v67 = common::milog::MiLogStream::operator<<<char [55],(char *[55])0>(
                  (common::milog::MiLogStream *const)&v151,
                  (const char (*)[55])"target_player dest_scene is not enterable, target_uid:");
          v68 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                  v67,
                  (const unsigned int *)(v3 + 64));
          v69 = common::milog::MiLogStream::operator<<<char [10],(char *[10])0>(v68, (const char (*)[10])" retcode:");
          v70 = common::milog::MiLogStream::operator<<<int,(int *)0>(v69, retcode);
          v71 = common::milog::MiLogStream::operator<<<char [6],(char *[6])0>(v70, (const char (*)[6])" uid:");
          if ( *(_BYTE *)(((unsigned __int64)&thisa->player_ >> 3) + 0x7FFF8000) )
            __asan_report_load8();
          val = Player::getUid(thisa->player_);
          common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v71, &val);
          common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)&v151);
          if ( *(_BYTE *)(((unsigned __int64)retcode >> 3) + 0x7FFF8000) != 0
            && (char)(((unsigned __int8)retcode & 7) + 3) >= *(_BYTE *)(((unsigned __int64)retcode >> 3) + 0x7FFF8000) )
          {
            __asan_report_load4(retcode);
          }
          v2 = *retcode;
          goto LABEL_197;
        }
        v72 = std::__shared_ptr_access<Player,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Player,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 144));
        v73 = Player::getMpComp(v72);
        if ( *(_BYTE *)(((unsigned __int64)&thisa->player_ >> 3) + 0x7FFF8000) )
          __asan_report_load8();
        v74 = Player::getUid(thisa->player_);
        v77 = v74;
        v75 = PlayerMpComp::checkAllowEnterByPlayerUid(v73, v74);
        v76 = *(_BYTE *)(((unsigned __int64)retcode >> 3) + 0x7FFF8000);
        LOBYTE(v77) = v76 != 0;
        v78 = v76 != 0 && (char)(((unsigned __int8)retcode & 7) + 3) >= v76;
        if ( v78 )
          __asan_report_store4(retcode, v77, v78);
        *retcode = v75;
        if ( *retcode )
        {
          common::milog::MiLogStream::create(
            (common::milog::MiLogStream *)&v151,
            &common::milog::MiLogDefault::default_log_obj_,
            3u,
            "./src/scene/player_scene_comp.cpp",
            "joinPlayerScene",
            3585);
          v79 = common::milog::MiLogStream::operator<<<char [43],(char *[43])0>(
                  (common::milog::MiLogStream *const)&v151,
                  (const char (*)[43])"target_player not allow enter, target_uid:");
          v80 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                  v79,
                  (const unsigned int *)(v3 + 64));
          v81 = common::milog::MiLogStream::operator<<<char [10],(char *[10])0>(v80, (const char (*)[10])" retcode:");
          v82 = common::milog::MiLogStream::operator<<<int,(int *)0>(v81, retcode);
          v83 = common::milog::MiLogStream::operator<<<char [6],(char *[6])0>(v82, (const char (*)[6])" uid:");
          if ( *(_BYTE *)(((unsigned __int64)&thisa->player_ >> 3) + 0x7FFF8000) )
            __asan_report_load8();
          val = Player::getUid(thisa->player_);
          common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v83, &val);
          common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)&v151);
          if ( *(_BYTE *)(((unsigned __int64)retcode >> 3) + 0x7FFF8000) != 0
            && (char)(((unsigned __int8)retcode & 7) + 3) >= *(_BYTE *)(((unsigned __int64)retcode >> 3) + 0x7FFF8000) )
          {
            __asan_report_load4(retcode);
          }
          v2 = *retcode;
          goto LABEL_197;
        }
        v84 = std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 240));
        scene_script_config_ptr = Scene::getScriptConfig(v84);
        if ( !scene_script_config_ptr )
        {
          common::milog::MiLogStream::create(
            (common::milog::MiLogStream *)&v151,
            &common::milog::MiLogDefault::default_log_obj_,
            3u,
            "./src/scene/player_scene_comp.cpp",
            "joinPlayerScene",
            3592);
          v85 = common::milog::MiLogStream::operator<<<char [22],(char *[22])0>(
                  (common::milog::MiLogStream *const)&v151,
                  (const char (*)[22])"getScriptConfig fails");
          v86 = std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::operator*((const std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 240));
          common::milog::MiLogStream::operator<<<Scene,(Scene*)0>(v85, v86);
          common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)&v151);
          v2 = -1;
          goto LABEL_197;
        }
        if ( (((unsigned __int8)scene_script_config_ptr - 52) & 7) >= *(_BYTE *)(((unsigned __int64)&scene_script_config_ptr->born_pos >> 3)
                                                                               + 0x7FFF8000)
          && *(_BYTE *)(((unsigned __int64)&scene_script_config_ptr->born_pos >> 3) + 0x7FFF8000) != 0
          || *(_BYTE *)((((unsigned __int64)&scene_script_config_ptr->born_pos.z + 3) >> 3) + 0x7FFF8000) != 0
          && (((unsigned __int8)scene_script_config_ptr - 41) & 7) >= *(_BYTE *)((((unsigned __int64)&scene_script_config_ptr->born_pos.z
                                                                                 + 3) >> 3)
                                                                               + 0x7FFF8000) )
        {
          __asan_report_load_n(&scene_script_config_ptr->born_pos, 12LL);
        }
        *(Vector3 *)(v3 + 80) = scene_script_config_ptr->born_pos;
        if ( *(char *)(((unsigned __int64)&scene_script_config_ptr->born_rot >> 3) + 0x7FFF8000) < 0
          || *(_BYTE *)((((unsigned __int64)&scene_script_config_ptr->born_rot.z + 3) >> 3) + 0x7FFF8000) != 0
          && (((unsigned __int8)scene_script_config_ptr - 29) & 7) >= *(_BYTE *)((((unsigned __int64)&scene_script_config_ptr->born_rot.z
                                                                                 + 3) >> 3)
                                                                               + 0x7FFF8000) )
        {
          __asan_report_load_n(&scene_script_config_ptr->born_rot, 12LL);
        }
        *(Vector3 *)(v3 + 112) = scene_script_config_ptr->born_rot;
        v87 = std::__shared_ptr_access<Player,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Player,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 144));
        Player::getSceneComp(v87);
        PlayerSceneComp::getDestScene((const PlayerSceneComp *const)(v3 + 304));
        if ( !std::operator!=<Scene>((const std::shared_ptr<Scene> *)(v3 + 240), 0LL) )
          goto LABEL_136;
        v88 = std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 240));
        TransferGuardComp = Scene::getTransferGuardComp(v88);
        if ( *(_BYTE *)(((unsigned __int64)&thisa->player_ >> 3) + 0x7FFF8000) )
          __asan_report_load8();
        v90 = Player::getUid(thisa->player_);
        if ( SceneTransferGuardComp::findPlayerPosAndRot(
               TransferGuardComp,
               v90,
               (Vector3 *)(v3 + 80),
               (Vector3 *)(v3 + 112)) )
        {
LABEL_136:
          v91 = 0;
        }
        else
        {
          v91 = 1;
        }
        if ( v91 )
        {
          common::milog::MiLogStream::create(
            (common::milog::MiLogStream *)&v151,
            &common::milog::MiLogDefault::default_log_obj_,
            1u,
            "./src/scene/player_scene_comp.cpp",
            "joinPlayerScene",
            3602);
          v92 = common::milog::MiLogStream::operator<<<char [39],(char *[39])0>(
                  (common::milog::MiLogStream *const)&v151,
                  (const char (*)[39])"SceneTransferGuardComp set target pos:");
          v93 = operator<<(v92, (const Vector3 *)(v3 + 80));
          v94 = common::milog::MiLogStream::operator<<<char [7],(char *[7])0>(v93, (const char (*)[7])", rot:");
          v95 = operator<<(v94, (const Vector3 *)(v3 + 112));
          v96 = common::milog::MiLogStream::operator<<<char [7],(char *[7])0>(v95, (const char (*)[7])", uid:");
          if ( *(_BYTE *)(((unsigned __int64)&thisa->player_ >> 3) + 0x7FFF8000) )
            __asan_report_load8();
        }
        else
        {
          if ( !std::operator!=<Scene>((const std::shared_ptr<Scene> *)(v3 + 240), 0LL) )
            goto LABEL_146;
          v97 = std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 240));
          MultistagePlayComp = Scene::getMultistagePlayComp(v97);
          if ( *(_BYTE *)(((unsigned __int64)&thisa->player_ >> 3) + 0x7FFF8000) )
            __asan_report_load8();
          v99 = Player::getUid(thisa->player_);
          if ( SceneMultistagePlayComp::findPlayerPosAndRot(
                 MultistagePlayComp,
                 v99,
                 (Vector3 *)(v3 + 80),
                 (Vector3 *)(v3 + 112)) )
          {
LABEL_146:
            v100 = 0;
          }
          else
          {
            v100 = 1;
          }
          if ( v100 )
          {
            common::milog::MiLogStream::create(
              (common::milog::MiLogStream *)&v151,
              &common::milog::MiLogDefault::default_log_obj_,
              1u,
              "./src/scene/player_scene_comp.cpp",
              "joinPlayerScene",
              3607);
            v101 = common::milog::MiLogStream::operator<<<char [35],(char *[35])0>(
                     (common::milog::MiLogStream *const)&v151,
                     (const char (*)[35])"MultistagePlayComp set target pos:");
            v102 = operator<<(v101, (const Vector3 *)(v3 + 80));
            v103 = common::milog::MiLogStream::operator<<<char [7],(char *[7])0>(v102, (const char (*)[7])", rot:");
            v104 = operator<<(v103, (const Vector3 *)(v3 + 112));
            v96 = common::milog::MiLogStream::operator<<<char [7],(char *[7])0>(v104, (const char (*)[7])", uid:");
            if ( *(_BYTE *)(((unsigned __int64)&thisa->player_ >> 3) + 0x7FFF8000) )
              __asan_report_load8();
          }
          else
          {
            if ( !std::operator!=<Scene>((const std::shared_ptr<Scene> *)(v3 + 304), 0LL)
              || (v105 = std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 304)),
                  SceneId = Scene::getSceneId(v105),
                  v107 = std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 240)),
                  SceneId != Scene::getSceneId(v107)) )
            {
              v115 = (unsigned int)std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 240));
              v116 = std::__shared_ptr_access<Player,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Player,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 144));
              Player::getUid(v116);
              Scene::getPlayerLocation((Scene *const)(v3 + 368), v115);
              if ( std::operator!=<ScenePlayerLocation>((const std::shared_ptr<ScenePlayerLocation> *)(v3 + 368), 0LL) )
              {
                n = std::__shared_ptr_access<ScenePlayerLocation,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<ScenePlayerLocation,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 368));
                if ( (((unsigned __int8)n + 24) & 7) >= *(_BYTE *)(((unsigned __int64)&n->last_valid_pos >> 3)
                                                                 + 0x7FFF8000)
                  && *(_BYTE *)(((unsigned __int64)&n->last_valid_pos >> 3) + 0x7FFF8000) != 0
                  || *(_BYTE *)((((unsigned __int64)&n->last_valid_pos.z + 3) >> 3) + 0x7FFF8000) != 0
                  && (((unsigned __int8)n + 35) & 7) >= *(_BYTE *)((((unsigned __int64)&n->last_valid_pos.z + 3) >> 3)
                                                                 + 0x7FFF8000) )
                {
                  n = (std::__shared_ptr_access<ScenePlayerLocation,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *)__asan_report_load_n(&n->last_valid_pos, 12LL);
                }
                *(_QWORD *)(v3 + 80) = *(_QWORD *)&n->last_valid_pos.x;
                *(float *)(v3 + 88) = n->last_valid_pos.z;
                v118 = std::__shared_ptr_access<ScenePlayerLocation,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<ScenePlayerLocation,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 368));
                if ( (((unsigned __int8)v118 + 36) & 7) >= *(_BYTE *)(((unsigned __int64)&v118->last_valid_rot >> 3)
                                                                    + 0x7FFF8000)
                  && *(_BYTE *)(((unsigned __int64)&v118->last_valid_rot >> 3) + 0x7FFF8000) != 0
                  || *(_BYTE *)((((unsigned __int64)&v118->last_valid_rot.z + 3) >> 3) + 0x7FFF8000) != 0
                  && (((unsigned __int8)v118 + 47) & 7) >= *(_BYTE *)((((unsigned __int64)&v118->last_valid_rot.z + 3) >> 3)
                                                                    + 0x7FFF8000) )
                {
                  v118 = (std::__shared_ptr_access<ScenePlayerLocation,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *)__asan_report_load_n(&v118->last_valid_rot, 12LL);
                }
                *(_QWORD *)(v3 + 112) = *(_QWORD *)&v118->last_valid_rot.x;
                *(float *)(v3 + 120) = v118->last_valid_rot.z;
              }
              std::shared_ptr<ScenePlayerLocation>::~shared_ptr((std::shared_ptr<ScenePlayerLocation> *const)(v3 + 368));
              goto LABEL_170;
            }
            v109 = std::__shared_ptr_access<Player,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Player,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 144));
            SceneComp = Player::getSceneComp(v109);
            DestPos = (unsigned __int64)PlayerSceneComp::getDestPos(SceneComp);
            if ( (char)(DestPos & 7) >= *(_BYTE *)((DestPos >> 3) + 0x7FFF8000)
              && *(_BYTE *)((DestPos >> 3) + 0x7FFF8000) != 0
              || *(_BYTE *)(((DestPos + 11) >> 3) + 0x7FFF8000) != 0
              && (char)((DestPos + 11) & 7) >= *(_BYTE *)(((DestPos + 11) >> 3) + 0x7FFF8000) )
            {
              DestPos = __asan_report_load_n(DestPos, 12LL);
            }
            *(_QWORD *)(v3 + 80) = *(_QWORD *)DestPos;
            *(_DWORD *)(v3 + 88) = *(_DWORD *)(DestPos + 8);
            v112 = std::__shared_ptr_access<Player,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Player,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 144));
            v113 = Player::getSceneComp(v112);
            DestRot = (unsigned __int64)PlayerSceneComp::getDestRot(v113);
            if ( (char)(DestRot & 7) >= *(_BYTE *)((DestRot >> 3) + 0x7FFF8000)
              && *(_BYTE *)((DestRot >> 3) + 0x7FFF8000) != 0
              || *(_BYTE *)(((DestRot + 11) >> 3) + 0x7FFF8000) != 0
              && (char)((DestRot + 11) & 7) >= *(_BYTE *)(((DestRot + 11) >> 3) + 0x7FFF8000) )
            {
              DestRot = __asan_report_load_n(DestRot, 12LL);
            }
            *(_QWORD *)(v3 + 112) = *(_QWORD *)DestRot;
            *(_DWORD *)(v3 + 120) = *(_DWORD *)(DestRot + 8);
            common::milog::MiLogStream::create(
              (common::milog::MiLogStream *)&v151,
              &common::milog::MiLogDefault::default_log_obj_,
              1u,
              "./src/scene/player_scene_comp.cpp",
              "joinPlayerScene",
              3614);
            v96 = common::milog::MiLogStream::operator<<<char [51],(char *[51])0>(
                    (common::milog::MiLogStream *const)&v151,
                    (const char (*)[51])"target isInTransfer, choose dest pos and rot, uid:");
            if ( *(_BYTE *)(((unsigned __int64)&thisa->player_ >> 3) + 0x7FFF8000) )
              __asan_report_load8();
          }
        }
        val = Player::getUid(thisa->player_);
        common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v96, &val);
        common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)&v151);
LABEL_170:
        if ( std::operator!=<Scene>((const std::shared_ptr<Scene> *)(v3 + 240), 0LL) )
        {
          v119 = std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 240));
          Scene::getGalleryComp(v119);
          SceneGalleryComp::getSceneTransferAwaiter((const SceneGalleryComp *const)(v3 + 336));
          if ( std::operator!=<SceneTransferAwaiter>((const std::shared_ptr<SceneTransferAwaiter> *)(v3 + 336), 0LL) )
          {
            v120 = std::__shared_ptr_access<SceneTransferAwaiter,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<SceneTransferAwaiter,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 336));
            if ( SceneTransferAwaiter::isActive(v120) )
            {
              v122 = (unsigned __int64)std::__shared_ptr_access<SceneTransferAwaiter,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<SceneTransferAwaiter,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 336));
              if ( *(_BYTE *)((v122 >> 3) + 0x7FFF8000) )
                v122 = __asan_report_load8();
              v123 = *(_QWORD *)v122 + 80LL;
              if ( *(_BYTE *)((v123 >> 3) + 0x7FFF8000) )
                v122 = __asan_report_load8();
              v124 = *(void (__fastcall **)(unsigned __int64, unsigned __int64, Player *))v123;
              if ( *(_BYTE *)(((unsigned __int64)&thisa->player_ >> 3) + 0x7FFF8000) )
                v122 = __asan_report_load8();
              v124(v3 + 400, v122, thisa->player_);
              if ( std::optional<std::pair<Vector3,Vector3>>::has_value((const std::optional<std::pair<Vector3,Vector3> > *const)(v3 + 400)) )
              {
                common::milog::MiLogStream::create(
                  (common::milog::MiLogStream *)&v151,
                  &common::milog::MiLogDefault::default_log_obj_,
                  1u,
                  "./src/scene/player_scene_comp.cpp",
                  "joinPlayerScene",
                  3635);
                v125 = common::milog::MiLogStream::operator<<<char [37],(char *[37])0>(
                         (common::milog::MiLogStream *const)&v151,
                         (const char (*)[37])"[TRANSFER_AWAITER] rewrite pos from ");
                v126 = operator<<(v125, (const Vector3 *)(v3 + 80));
                v127 = common::milog::MiLogStream::operator<<<char [5],(char *[5])0>(
                         v126,
                         (const char (*)[5])off_25163AA0);
                v128 = std::optional<std::pair<Vector3,Vector3>>::operator->((std::optional<std::pair<Vector3,Vector3> > *const)(v3 + 400));
                operator<<(v127, &v128->first);
                common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)&v151);
                v129 = std::optional<std::pair<Vector3,Vector3>>::operator*((std::optional<std::pair<Vector3,Vector3> > *const)(v3 + 400));
                std::tie<Vector3,Vector3>(
                  (Vector3 *)(v3 + 368),
                  (Vector3 *)(v3 + 80),
                  (Vector3 *)(v3 + 112),
                  (Vector3 *)(v3 + 80));
                std::tuple<Vector3 &,Vector3 &>::operator=<Vector3,Vector3>(
                  (std::tuple<Vector3&,Vector3&> *const)(v3 + 368),
                  v129);
              }
            }
          }
          std::shared_ptr<SceneTransferAwaiter>::~shared_ptr((std::shared_ptr<SceneTransferAwaiter> *const)(v3 + 336));
        }
        v130 = std::__shared_ptr_access<Player,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Player,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 144));
        v131 = Player::getMpComp(v130);
        if ( !PlayerMpComp::isInMpMode(v131) )
        {
          v132 = std::__shared_ptr_access<Player,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Player,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 144));
          v133 = Player::getSceneComp(v132);
          PlayerSceneComp::changeMyWorldToMpMode(v133);
        }
        v134 = std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 240));
        if ( Scene::getSceneType(v134) == SCENE_DUNGEON )
        {
          if ( *(_BYTE *)(((unsigned __int64)&thisa->player_ >> 3) + 0x7FFF8000) )
            __asan_report_load8();
          v135 = Player::getDungeonComp(thisa->player_);
          PlayerDungeonComp::setIsJoinOtherScene(v135, 1);
        }
        PlayerSceneComp::recordMySceneInfo(thisa);
        TransferReason::TransferReason(&p_reason, ENTER_REASON_TEAM_JOIN);
        v136 = std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::operator*((const std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 240));
        v137 = PlayerSceneComp::jumpToScene(
                 thisa,
                 v136,
                 (const Vector3 *)(v3 + 80),
                 (const Vector3 *)(v3 + 112),
                 0,
                 &p_reason) != 0;
        TransferReason::~TransferReason(&p_reason);
        if ( v137 )
        {
          common::milog::MiLogStream::create(
            (common::milog::MiLogStream *)&v151,
            &common::milog::MiLogDefault::default_log_obj_,
            3u,
            "./src/scene/player_scene_comp.cpp",
            "joinPlayerScene",
            3654);
          v138 = common::milog::MiLogStream::operator<<<char [24],(char *[24])0>(
                   (common::milog::MiLogStream *const)&v151,
                   (const char (*)[24])"jumpToScene fails, uid:");
          if ( *(_BYTE *)(((unsigned __int64)&thisa->player_ >> 3) + 0x7FFF8000) )
            __asan_report_load8();
          val = Player::getUid(thisa->player_);
          v139 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v138, &val);
          v140 = common::milog::MiLogStream::operator<<<char [13],(char *[13])0>(
                   v139,
                   (const char (*)[13])" target_uid:");
          common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v140, (const unsigned int *)(v3 + 64));
          common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)&v151);
          v2 = -1;
        }
        else
        {
          v2 = 0;
        }
        std::shared_ptr<Scene>::~shared_ptr((std::shared_ptr<Scene> *const)(v3 + 304));
        goto LABEL_197;
      }
    }
    v33 = 1;
    goto LABEL_50;
  }
  common::milog::MiLogStream::create(
    (common::milog::MiLogStream *)&v151,
    &common::milog::MiLogDefault::default_log_obj_,
    3u,
    "./src/scene/player_scene_comp.cpp",
    "joinPlayerScene",
    3473);
  v7 = common::milog::MiLogStream::operator<<<char [48],(char *[48])0>(
         (common::milog::MiLogStream *const)&v151,
         (const char (*)[48])"joinPlayerScene target_uid cannot be self, uid:");
  if ( *(_BYTE *)(((unsigned __int64)&thisa->player_ >> 3) + 0x7FFF8000) )
    __asan_report_load8();
  val = Player::getUid(thisa->player_);
  common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v7, &val);
  common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)&v151);
  v2 = -1;
LABEL_202:
  StatLogUtils::ContextHolder::~ContextHolder((StatLogUtils::ContextHolder *const)(v3 + 48));
  result = v2;
  if ( v143 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8010) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8018) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8020) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8028) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8030) = 0LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8038) = 0;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8044) = 0LL;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8020) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8028) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8030) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8038) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8040) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8048) = -168430091;
  }
  return result;
};

// Line 3661: range 0000000013E60A6E-0000000013E623F2
__int64 __fastcall PlayerSceneComp::joinHomeScene(
        PlayerSceneComp *const this,
        __int32 target_home_owner_uid,
        __int32 dest_scene_id,
        __int32 dest_scene_point,
        __int8 is_transfer_to_safe_point)
{
  unsigned __int64 p_M_before_begin; // r13
  __int64 v6; // rax
  _DWORD *v7; // r12
  common::milog::MiLogStream *v8; // r14
  Player *Player; // rax
  common::milog::MiLogStream *v10; // rax
  common::milog::MiLogStream *v11; // rax
  common::milog::MiLogStream *v12; // rax
  common::milog::MiLogStream *v13; // rax
  common::milog::MiLogStream *v14; // rax
  common::milog::MiLogStream *v15; // rax
  common::milog::MiLogStream *v16; // rax
  common::milog::MiLogStream *v17; // rax
  GameserverService *v18; // rax
  unsigned int GameThreadLocal; // eax
  common::milog::MiLogStream *v20; // r14
  Player *v21; // rax
  common::milog::MiLogStream *v22; // rax
  common::milog::MiLogStream *v23; // rax
  unsigned int v24; // r14d
  Home *v25; // rax
  HomeSceneComp *SceneComp; // rax
  Home *v27; // rax
  HomeSceneComp *v28; // rax
  common::milog::MiLogStream *v29; // rax
  common::milog::MiLogStream *v30; // rax
  common::milog::MiLogStream *v31; // rax
  unsigned __int64 v32; // rax
  PlayerSceneComp *v33; // rax
  unsigned __int64 v34; // rax
  bool v35; // r14
  common::milog::MiLogStream *v36; // rax
  common::milog::MiLogStream *v37; // rax
  common::milog::MiLogStream *v38; // rax
  common::milog::MiLogStream *v39; // rax
  common::milog::MiLogStream *v40; // r14
  unsigned __int64 v41; // rax
  common::milog::MiLogStream *v42; // rax
  common::milog::MiLogStream *v43; // rax
  common::milog::MiLogStream *v44; // rax
  common::milog::MiLogStream *v45; // rax
  common::milog::MiLogStream *v46; // r14
  std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v47; // rax
  common::milog::MiLogStream *v48; // rax
  common::milog::MiLogStream *v49; // rax
  Home *v50; // rax
  HomeBasicComp *BasicComp; // rax
  char v52; // al
  common::milog::MiLogStream *v53; // rax
  common::milog::MiLogStream *v54; // rax
  common::milog::MiLogStream *v55; // r14
  uint32_t Uid; // eax
  common::milog::MiLogStream *v57; // rax
  common::milog::MiLogStream *v58; // rax
  common::milog::MiLogStream *v59; // r14
  PlayerHomeComp *HomeComp; // rax
  common::milog::MiLogStream *v61; // r14
  common::milog::MiLogStream *v62; // rax
  common::milog::MiLogStream *v63; // rax
  common::milog::MiLogStream *v64; // rax
  Scene *v65; // rax
  Home *v66; // rax
  PlayerBasicComp *v67; // rax
  std::__shared_ptr_access<proto_log::PlayerLogBodyHomeTransfer,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v68; // rax
  std::__shared_ptr_access<proto_log::PlayerLogBodyHomeTransfer,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v69; // rax
  std::__shared_ptr_access<proto_log::PlayerLogBodyHomeTransfer,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v70; // rax
  std::__shared_ptr_access<proto_log::PlayerLogBodyHomeTransfer,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v71; // rax
  Player *v72; // r14
  common::milog::MiLogStream *v73; // r14
  common::milog::MiLogStream *v74; // rax
  common::milog::MiLogStream *v75; // rax
  std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v76; // rax
  common::milog::MiLogStream *v77; // rax
  Scene *v78; // rax
  Home *v79; // rax
  PlayerBasicComp *v80; // rax
  std::__shared_ptr_access<proto_log::PlayerLogBodyHomeTransferToSafePoint,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v81; // rax
  std::__shared_ptr_access<proto_log::PlayerLogBodyHomeTransferToSafePoint,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v82; // rax
  std::__shared_ptr_access<proto_log::PlayerLogBodyHomeTransferToSafePoint,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v83; // rax
  Player *v84; // r14
  common::milog::MiLogStream *v85; // r14
  common::milog::MiLogStream *v86; // rax
  common::milog::MiLogStream *v87; // rax
  Scene *v88; // rax
  bool v89; // r14
  common::milog::MiLogStream *v90; // r14
  common::milog::MiLogStream *v91; // rax
  common::milog::MiLogStream *v92; // rax
  PlayerWorld *v93; // rax
  __int64 result; // rax
  std::string v95; // [rsp+0h] [rbp-210h]
  bool enter_self_home; // [rsp+23h] [rbp-1EDh]
  int32_t ret; // [rsp+24h] [rbp-1ECh]
  int32_t reta; // [rsp+24h] [rbp-1ECh]
  int32_t retb; // [rsp+24h] [rbp-1ECh]
  google::protobuf::uint32 cur_module_id; // [rsp+28h] [rbp-1E8h]
  google::protobuf::uint32 cur_module_id_0; // [rsp+2Ch] [rbp-1E4h]
  HomeWorld *target_world; // [rsp+30h] [rbp-1E0h]
  const SceneScriptConfig *scene_script_config_ptr; // [rsp+38h] [rbp-1D8h]
  std::shared_ptr<google::protobuf::Message> p_body_ptr; // [rsp+40h] [rbp-1D0h] BYREF
  World v105; // [rsp+50h] [rbp-1C0h] BYREF

  *(&v95._anon_0._M_allocated_capacity + 1) = (std::string::size_type)this;
  HIDWORD(v95._anon_0._M_allocated_capacity) = target_home_owner_uid;
  *(_DWORD *)v95._anon_0._M_local_buf = dest_scene_id;
  HIDWORD(v95._M_string_length) = dest_scene_point;
  LOBYTE(v95._M_string_length) = is_transfer_to_safe_point;
  p_M_before_begin = (unsigned __int64)&v105.slot_info_map_._M_h._M_before_begin;
  v95._M_dataplus._M_p = (std::string::pointer)&v105.slot_info_map_._M_h._M_before_begin;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v6 = __asan_stack_malloc_3(288LL);
    if ( v6 )
      p_M_before_begin = v6;
  }
  *(_QWORD *)p_M_before_begin = 1102416563LL;
  *(_QWORD *)(p_M_before_begin + 8) = "11 32 1 11 holder:3779 48 4 13 block_id:3675 64 4 8 ret:3680 80 4 26 target_home_o"
                                      "wner_uid:3660 96 4 18 dest_scene_id:3660 112 4 21 dest_scene_point:3660 128 12 8 p"
                                      "os:3673 160 12 8 rot:3674 192 16 20 target_home_ptr:3665 224 16 19 dest_scene_ptr:"
                                      "3712 256 16 12 log_ptr:3780";
  *(_QWORD *)(p_M_before_begin + 16) = PlayerSceneComp::joinHomeScene;
  v7 = (_DWORD *)(p_M_before_begin >> 3);
  v7[536862720] = -235802127;
  v7[536862721] = -234556927;
  v7[536862722] = -234556924;
  v7[536862723] = -234556924;
  v7[536862724] = -219020288;
  v7[536862725] = -219020288;
  v7[536862726] = -219021312;
  v7[536862727] = -219021312;
  v7[536862728] = -202178560;
  *(_DWORD *)(p_M_before_begin + 80) = target_home_owner_uid;
  *(_DWORD *)(p_M_before_begin + 96) = *(_DWORD *)v95._anon_0._M_local_buf;
  *(_DWORD *)(p_M_before_begin + 112) = HIDWORD(v95._M_string_length);
  if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
    __asan_report_load8();
  enter_self_home = Player::getUid(this->player_) == *(_DWORD *)(p_M_before_begin + 80);
  common::milog::MiLogStream::create(
    (common::milog::MiLogStream *)&v105._M_weak_this._M_refcount,
    &common::milog::MiLogDefault::default_log_obj_,
    1u,
    "./src/scene/player_scene_comp.cpp",
    "joinHomeScene",
    3663);
  v8 = common::milog::MiLogStream::operator<<<char [26],(char *[26])0>(
         (common::milog::MiLogStream *const)&v105._M_weak_this._M_refcount,
         (const char (*)[26])"[HOME] joinHomeScene uid:");
  Player = PlayerCompBase::getPlayer(this);
  *(_DWORD *)(p_M_before_begin + 64) = Player::getUid(Player);
  v10 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
          v8,
          (const unsigned int *)(p_M_before_begin + 64));
  v11 = common::milog::MiLogStream::operator<<<char [24],(char *[24])0>(
          v10,
          (const char (*)[24])" target_home_owner_uid:");
  v12 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
          v11,
          (const unsigned int *)(p_M_before_begin + 80));
  v13 = common::milog::MiLogStream::operator<<<char [18],(char *[18])0>(v12, (const char (*)[18])" enter_self_home:");
  v14 = common::milog::MiLogStream::operator<<(v13, enter_self_home);
  v15 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(v14, (const char (*)[16])" dest_scene_id:");
  v16 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
          v15,
          (const unsigned int *)(p_M_before_begin + 96));
  v17 = common::milog::MiLogStream::operator<<<char [20],(char *[20])0>(v16, (const char (*)[20])" dest_scene_point: ");
  common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
    v17,
    (const unsigned int *)(p_M_before_begin + 112));
  common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)&v105._M_weak_this._M_refcount);
  v18 = ServiceBox::findService<GameserverService>();
  GameThreadLocal = (unsigned int)GameserverService::getGameThreadLocal(v18);
  HomeMgr::findOnlineHome((HomeMgr *const)(p_M_before_begin + 192), GameThreadLocal + 704);
  if ( std::operator==<Home>((const std::shared_ptr<Home> *)(p_M_before_begin + 192), 0LL) )
  {
    common::milog::MiLogStream::create(
      (common::milog::MiLogStream *)&v105._M_weak_this._M_refcount,
      &common::milog::MiLogDefault::default_log_obj_,
      4u,
      "./src/scene/player_scene_comp.cpp",
      "joinHomeScene",
      3668);
    v20 = common::milog::MiLogStream::operator<<<char [30],(char *[30])0>(
            (common::milog::MiLogStream *const)&v105._M_weak_this._M_refcount,
            (const char (*)[30])"[HOME] home_ptr is null. uid:");
    v21 = PlayerCompBase::getPlayer(this);
    *(_DWORD *)(p_M_before_begin + 64) = Player::getUid(v21);
    v22 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
            v20,
            (const unsigned int *)(p_M_before_begin + 64));
    v23 = common::milog::MiLogStream::operator<<<char [24],(char *[24])0>(
            v22,
            (const char (*)[24])" target_home_owner_uid:");
    common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
      v23,
      (const unsigned int *)(p_M_before_begin + 80));
    common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)&v105._M_weak_this._M_refcount);
    v24 = 9744;
    goto LABEL_97;
  }
  v25 = std::__shared_ptr_access<Home,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Home,(__gnu_cxx::_Lock_policy)2,false,false> *const)(p_M_before_begin + 192));
  SceneComp = Home::getSceneComp(v25);
  target_world = HomeSceneComp::getHomeWorld(SceneComp);
  Vector3::Vector3((Vector3 *const)(p_M_before_begin + 128), 0.0, 0.0, 0.0);
  Vector3::Vector3((Vector3 *const)(p_M_before_begin + 160), 0.0, 0.0, 0.0);
  *(_DWORD *)(p_M_before_begin + 48) = 0;
  if ( !*(_DWORD *)(p_M_before_begin + 96) )
  {
    if ( *(_DWORD *)(p_M_before_begin + 112) )
    {
      v27 = std::__shared_ptr_access<Home,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Home,(__gnu_cxx::_Lock_policy)2,false,false> *const)(p_M_before_begin + 192));
      v28 = Home::getSceneComp(v27);
      *(_DWORD *)(p_M_before_begin + 64) = HomeSceneComp::getTransferScenePoint(
                                             v28,
                                             *(_DWORD *)(p_M_before_begin + 112),
                                             (uint32_t *)(p_M_before_begin + 96),
                                             (uint32_t *)(p_M_before_begin + 48),
                                             (Vector3 *)(p_M_before_begin + 128),
                                             (Vector3 *)(p_M_before_begin + 160));
      if ( *(_DWORD *)(p_M_before_begin + 64) )
      {
        common::milog::MiLogStream::create(
          (common::milog::MiLogStream *)&v105._M_weak_this._M_refcount,
          &common::milog::MiLogDefault::default_log_obj_,
          3u,
          "./src/scene/player_scene_comp.cpp",
          "joinHomeScene",
          3683);
        v29 = common::milog::MiLogStream::operator<<<char [42],(char *[42])0>(
                (common::milog::MiLogStream *const)&v105._M_weak_this._M_refcount,
                (const char (*)[42])"home getTransferScenePoint fails. point: ");
        v30 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                v29,
                (const unsigned int *)(p_M_before_begin + 112));
        v31 = common::milog::MiLogStream::operator<<<char [7],(char *[7])0>(v30, (const char (*)[7])" ret: ");
        common::milog::MiLogStream::operator<<<int,(int *)0>(v31, (const int *)(p_M_before_begin + 64));
        common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)&v105._M_weak_this._M_refcount);
        *(_DWORD *)(p_M_before_begin + 112) = 0;
      }
    }
    if ( !*(_DWORD *)(p_M_before_begin + 96) && enter_self_home )
    {
      if ( LOBYTE(v95._M_string_length) )
      {
        if ( *(_BYTE *)(((unsigned __int64)target_world >> 3) + 0x7FFF8000) )
          __asan_report_load8();
        v32 = (unsigned __int64)(target_world->_vptr_World + 9);
        if ( *(_BYTE *)((v32 >> 3) + 0x7FFF8000) )
          v32 = __asan_report_load8();
        *(_DWORD *)(p_M_before_begin + 96) = (*(__int64 (__fastcall **)(HomeWorld *))v32)(target_world);
      }
      else
      {
        if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
          __asan_report_load8();
        v33 = Player::getSceneComp(this->player_);
        *(_DWORD *)(p_M_before_begin + 96) = PlayerSceneComp::getMyCurHomeSceneId(v33);
      }
    }
    if ( *(_DWORD *)(p_M_before_begin + 96) )
    {
      World::findScene(&v105, (uint32_t)target_world);
      v35 = std::operator==<Scene>((const std::shared_ptr<Scene> *)&v105, 0LL);
      std::shared_ptr<Scene>::~shared_ptr((std::shared_ptr<Scene> *const)&v105);
      if ( v35 )
      {
        common::milog::MiLogStream::create(
          (common::milog::MiLogStream *)&v105._M_weak_this._M_refcount,
          &common::milog::MiLogDefault::default_log_obj_,
          1u,
          "./src/scene/player_scene_comp.cpp",
          "joinHomeScene",
          3707);
        v36 = common::milog::MiLogStream::operator<<<char [42],(char *[42])0>(
                (common::milog::MiLogStream *const)&v105._M_weak_this._M_refcount,
                (const char (*)[42])"dest_scene_ptr is nullptr, dest_scene_id:");
        v37 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                v36,
                (const unsigned int *)(p_M_before_begin + 96));
        v38 = common::milog::MiLogStream::operator<<<char [24],(char *[24])0>(
                v37,
                (const char (*)[24])" target_home_owner_uid:");
        v39 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                v38,
                (const unsigned int *)(p_M_before_begin + 80));
        v40 = common::milog::MiLogStream::operator<<<char [6],(char *[6])0>(v39, (const char (*)[6])" uid:");
        if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
          __asan_report_load8();
        *(_DWORD *)(p_M_before_begin + 64) = Player::getUid(this->player_);
        common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
          v40,
          (const unsigned int *)(p_M_before_begin + 64));
        common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)&v105._M_weak_this._M_refcount);
        if ( *(_BYTE *)(((unsigned __int64)target_world >> 3) + 0x7FFF8000) )
          __asan_report_load8();
        v41 = (unsigned __int64)(target_world->_vptr_World + 9);
        if ( *(_BYTE *)((v41 >> 3) + 0x7FFF8000) )
          v41 = __asan_report_load8();
        *(_DWORD *)(p_M_before_begin + 96) = (*(__int64 (__fastcall **)(HomeWorld *))v41)(target_world);
      }
    }
    else
    {
      if ( *(_BYTE *)(((unsigned __int64)target_world >> 3) + 0x7FFF8000) )
        __asan_report_load8();
      v34 = (unsigned __int64)(target_world->_vptr_World + 9);
      if ( *(_BYTE *)((v34 >> 3) + 0x7FFF8000) )
        v34 = __asan_report_load8();
      *(_DWORD *)(p_M_before_begin + 96) = (*(__int64 (__fastcall **)(HomeWorld *))v34)(target_world);
    }
  }
  World::findScene((World *const)(p_M_before_begin + 224), (uint32_t)target_world);
  if ( !std::operator==<Scene>((const std::shared_ptr<Scene> *)(p_M_before_begin + 224), 0LL) )
  {
    v47 = std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false> *const)(p_M_before_begin + 224));
    if ( Scene::getOwnerUid(v47) != *(_DWORD *)(p_M_before_begin + 80) )
    {
      common::milog::MiLogStream::create(
        (common::milog::MiLogStream *)&v105._M_weak_this._M_refcount,
        &common::milog::MiLogDefault::default_log_obj_,
        4u,
        "./src/scene/player_scene_comp.cpp",
        "joinHomeScene",
        3720);
      v48 = common::milog::MiLogStream::operator<<<char [57],(char *[57])0>(
              (common::milog::MiLogStream *const)&v105._M_weak_this._M_refcount,
              (const char (*)[57])"dest_scene_ptr->getOwnerUid() != target_home_owner_uid: ");
      v49 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
              v48,
              (const unsigned int *)(p_M_before_begin + 80));
      v46 = common::milog::MiLogStream::operator<<<char [7],(char *[7])0>(v49, (const char (*)[7])" uid: ");
      if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
        __asan_report_load8();
      goto LABEL_40;
    }
    v50 = std::__shared_ptr_access<Home,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Home,(__gnu_cxx::_Lock_policy)2,false,false> *const)(p_M_before_begin + 192));
    BasicComp = Home::getBasicComp(v50);
    if ( !HomeBasicComp::getIsInEditMode(BasicComp) )
      goto LABEL_50;
    if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
      __asan_report_load8();
    if ( Player::getUid(this->player_) == *(_DWORD *)(p_M_before_begin + 80) )
LABEL_50:
      v52 = 0;
    else
      v52 = 1;
    if ( v52 )
    {
      common::milog::MiLogStream::create(
        (common::milog::MiLogStream *)&v105._M_weak_this._M_refcount,
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/scene/player_scene_comp.cpp",
        "joinHomeScene",
        3727);
      v53 = common::milog::MiLogStream::operator<<<char [10],(char *[10])0>(
              (common::milog::MiLogStream *const)&v105._M_weak_this._M_refcount,
              (const char (*)[10])"home_uid:");
      v54 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
              v53,
              (const unsigned int *)(p_M_before_begin + 80));
      v55 = common::milog::MiLogStream::operator<<<char [23],(char *[23])0>(v54, (const char (*)[23])off_25184B40);
      if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
        __asan_report_load8();
      *(_DWORD *)(p_M_before_begin + 64) = Player::getUid(this->player_);
      common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
        v55,
        (const unsigned int *)(p_M_before_begin + 64));
      common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)&v105._M_weak_this._M_refcount);
      v24 = 9708;
      goto LABEL_96;
    }
    if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
      __asan_report_load8();
    Uid = Player::getUid(this->player_);
    if ( !HomeWorld::canTryEnter(target_world, Uid) )
    {
      common::milog::MiLogStream::create(
        (common::milog::MiLogStream *)&v105._M_weak_this._M_refcount,
        &common::milog::MiLogDefault::default_log_obj_,
        1u,
        "./src/scene/player_scene_comp.cpp",
        "joinHomeScene",
        3732);
      v57 = common::milog::MiLogStream::operator<<<char [10],(char *[10])0>(
              (common::milog::MiLogStream *const)&v105._M_weak_this._M_refcount,
              (const char (*)[10])"home_uid:");
      v58 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
              v57,
              (const unsigned int *)(p_M_before_begin + 80));
      v59 = common::milog::MiLogStream::operator<<<char [12],(char *[12])0>(v58, (const char (*)[12])" full, uid:");
      if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
        __asan_report_load8();
      *(_DWORD *)(p_M_before_begin + 64) = Player::getUid(this->player_);
      common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
        v59,
        (const unsigned int *)(p_M_before_begin + 64));
      common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)&v105._M_weak_this._M_refcount);
      v24 = 9705;
      goto LABEL_96;
    }
    if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
      __asan_report_load8();
    HomeComp = Player::getHomeComp(this->player_);
    ret = PlayerHomeComp::checkEnterHome(HomeComp, *(_DWORD *)(p_M_before_begin + 80));
    if ( ret )
    {
      common::milog::MiLogStream::create(
        (common::milog::MiLogStream *)&v105._M_weak_this._M_refcount,
        &common::milog::MiLogDefault::default_log_obj_,
        1u,
        "./src/scene/player_scene_comp.cpp",
        "joinHomeScene",
        3740);
      v61 = common::milog::MiLogStream::operator<<<char [5],(char *[5])0>(
              (common::milog::MiLogStream *const)&v105._M_weak_this._M_refcount,
              (const char (*)[5])"uid:");
      if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
        __asan_report_load8();
      *(_DWORD *)(p_M_before_begin + 64) = Player::getUid(this->player_);
      v62 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
              v61,
              (const unsigned int *)(p_M_before_begin + 64));
      v63 = common::milog::MiLogStream::operator<<<char [32],(char *[32])0>(
              v62,
              (const char (*)[32])" checkEnterHome target_home_ui:");
      v64 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
              v63,
              (const unsigned int *)(p_M_before_begin + 80));
      common::milog::MiLogStream::operator<<<char [7],(char *[7])0>(v64, (const char (*)[7])" fails");
      common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)&v105._M_weak_this._M_refcount);
      v24 = ret;
      goto LABEL_96;
    }
    PlayerSceneComp::recordMySceneInfo(this);
    if ( *(_DWORD *)(p_M_before_begin + 112) )
    {
      TransferReason::TransferReason((TransferReason *const)&v105.scene_map_, ENTER_REASON_ENTER_HOME);
      v65 = std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::operator*((const std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false> *const)(p_M_before_begin + 224));
      reta = PlayerSceneComp::jumpToScene(
               this,
               v65,
               (const Vector3 *)(p_M_before_begin + 128),
               (const Vector3 *)(p_M_before_begin + 160),
               0,
               (TransferReason *)&v105.scene_map_);
      TransferReason::~TransferReason((TransferReason *const)&v105.scene_map_);
      if ( !reta )
      {
        v66 = std::__shared_ptr_access<Home,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Home,(__gnu_cxx::_Lock_policy)2,false,false> *const)(p_M_before_begin + 192));
        cur_module_id = Home::getCurModuleId(v66);
        if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
          __asan_report_load8();
        v67 = Player::getBasicComp(this->player_);
        PlayerBasicComp::getNextTransNo[abi:cxx11]((std::string *)&v105._M_weak_this._M_refcount, v67);
        StatLogUtils::ContextHolder::ContextHolder(
          (StatLogUtils::ContextHolder *const)(p_M_before_begin + 32),
          0xDA9u,
          v95);
        std::string::~string(&v105._M_weak_this._M_refcount);
        common::tools::perf::make_shared<proto_log::PlayerLogBodyHomeTransfer>();
        v68 = std::__shared_ptr_access<proto_log::PlayerLogBodyHomeTransfer,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<proto_log::PlayerLogBodyHomeTransfer,(__gnu_cxx::_Lock_policy)2,false,false> *const)(p_M_before_begin + 256));
        proto_log::PlayerLogBodyHomeTransfer::set_module_id(v68, cur_module_id);
        v69 = std::__shared_ptr_access<proto_log::PlayerLogBodyHomeTransfer,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<proto_log::PlayerLogBodyHomeTransfer,(__gnu_cxx::_Lock_policy)2,false,false> *const)(p_M_before_begin + 256));
        proto_log::PlayerLogBodyHomeTransfer::set_target_scene_id(v69, *(_DWORD *)(p_M_before_begin + 96));
        v70 = std::__shared_ptr_access<proto_log::PlayerLogBodyHomeTransfer,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<proto_log::PlayerLogBodyHomeTransfer,(__gnu_cxx::_Lock_policy)2,false,false> *const)(p_M_before_begin + 256));
        proto_log::PlayerLogBodyHomeTransfer::set_target_block_id(v70, *(_DWORD *)(p_M_before_begin + 48));
        v71 = std::__shared_ptr_access<proto_log::PlayerLogBodyHomeTransfer,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<proto_log::PlayerLogBodyHomeTransfer,(__gnu_cxx::_Lock_policy)2,false,false> *const)(p_M_before_begin + 256));
        proto_log::PlayerLogBodyHomeTransfer::set_source(v71, 2u);
        if ( *(_BYTE *)(((*(&v95._anon_0._M_allocated_capacity + 1) + 24) >> 3) + 0x7FFF8000) )
          __asan_report_load8();
        v72 = *(Player **)(*(&v95._anon_0._M_allocated_capacity + 1) + 24);
        std::shared_ptr<google::protobuf::Message>::shared_ptr(
          (std::shared_ptr<google::protobuf::Message> *const)&v105,
          0LL);
        std::shared_ptr<google::protobuf::Message>::shared_ptr<proto_log::PlayerLogBodyHomeTransfer,void>(
          &p_body_ptr,
          (const std::shared_ptr<proto_log::PlayerLogBodyHomeTransfer> *)(p_M_before_begin + 256));
        Player::printStatLog(v72, &p_body_ptr, (MessagePtr *)&v105, 0xEu);
        std::shared_ptr<google::protobuf::Message>::~shared_ptr(&p_body_ptr);
        std::shared_ptr<google::protobuf::Message>::~shared_ptr((std::shared_ptr<google::protobuf::Message> *const)&v105);
        std::shared_ptr<proto_log::PlayerLogBodyHomeTransfer>::~shared_ptr((std::shared_ptr<proto_log::PlayerLogBodyHomeTransfer> *const)(p_M_before_begin + 256));
        StatLogUtils::ContextHolder::~ContextHolder((StatLogUtils::ContextHolder *const)(p_M_before_begin + 32));
LABEL_93:
        if ( std::operator!=<PlayerWorld>(
               (const std::shared_ptr<PlayerWorld> *)(*(&v95._anon_0._M_allocated_capacity + 1) + 56),
               0LL) )
        {
          v93 = std::__shared_ptr_access<PlayerWorld,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<PlayerWorld,(__gnu_cxx::_Lock_policy)2,false,false> *const)(*(&v95._anon_0._M_allocated_capacity + 1) + 56));
          PlayerWorld::kickAllPlayerOnOwnerLeave(v93);
        }
        v24 = 0;
        goto LABEL_96;
      }
      common::milog::MiLogStream::create(
        (common::milog::MiLogStream *)&v105._M_weak_this._M_refcount,
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/scene/player_scene_comp.cpp",
        "joinHomeScene",
        3763);
      v73 = common::milog::MiLogStream::operator<<<char [24],(char *[24])0>(
              (common::milog::MiLogStream *const)&v105._M_weak_this._M_refcount,
              (const char (*)[24])"jumpToScene fails, uid:");
      if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
        __asan_report_load8();
      *(_DWORD *)(p_M_before_begin + 64) = Player::getUid(this->player_);
      v74 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
              v73,
              (const unsigned int *)(p_M_before_begin + 64));
      v75 = common::milog::MiLogStream::operator<<<char [24],(char *[24])0>(
              v74,
              (const char (*)[24])" target_home_owner_uid:");
      common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
        v75,
        (const unsigned int *)(p_M_before_begin + 80));
      common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)&v105._M_weak_this._M_refcount);
    }
    if ( LOBYTE(v95._M_string_length) )
    {
      ServiceBox::findService<GameserverService>();
      GameserverService::getConfig((GameserverService *const)&v105);
      v76 = std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false> *const)&v105);
      scene_script_config_ptr = LuaConfigMgr::findSceneScriptConfig(
                                  &v76->design_config.lua_config_mgr,
                                  *(_DWORD *)(p_M_before_begin + 96));
      std::shared_ptr<Config>::~shared_ptr((std::shared_ptr<Config> *const)&v105);
      if ( !scene_script_config_ptr )
      {
        common::milog::MiLogStream::create(
          (common::milog::MiLogStream *)&v105._M_weak_this._M_refcount,
          &common::milog::MiLogDefault::default_log_obj_,
          4u,
          "./src/scene/player_scene_comp.cpp",
          "joinHomeScene",
          3771);
        v77 = common::milog::MiLogStream::operator<<<char [52],(char *[52])0>(
                (common::milog::MiLogStream *const)&v105._M_weak_this._M_refcount,
                (const char (*)[52])"dest scene script config not found, dest_scene_id: ");
        common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
          v77,
          (const unsigned int *)(p_M_before_begin + 96));
        common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)&v105._M_weak_this._M_refcount);
        v24 = -1;
        goto LABEL_96;
      }
      TransferReason::TransferReason((TransferReason *const)&v105.scene_map_, ENTER_REASON_ENTER_HOME);
      v78 = std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::operator*((const std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false> *const)(p_M_before_begin + 224));
      retb = PlayerSceneComp::jumpToScene(
               this,
               v78,
               &scene_script_config_ptr->born_pos,
               &scene_script_config_ptr->born_rot,
               0,
               (TransferReason *)&v105.scene_map_);
      TransferReason::~TransferReason((TransferReason *const)&v105.scene_map_);
      if ( !retb )
      {
        v79 = std::__shared_ptr_access<Home,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Home,(__gnu_cxx::_Lock_policy)2,false,false> *const)(p_M_before_begin + 192));
        cur_module_id_0 = Home::getCurModuleId(v79);
        if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
          __asan_report_load8();
        v80 = Player::getBasicComp(this->player_);
        PlayerBasicComp::getNextTransNo[abi:cxx11]((std::string *)&v105._M_weak_this._M_refcount, v80);
        StatLogUtils::ContextHolder::ContextHolder(
          (StatLogUtils::ContextHolder *const)(p_M_before_begin + 32),
          0xCF4u,
          v95);
        std::string::~string(&v105._M_weak_this._M_refcount);
        common::tools::perf::make_shared<proto_log::PlayerLogBodyHomeTransferToSafePoint>();
        v81 = std::__shared_ptr_access<proto_log::PlayerLogBodyHomeTransferToSafePoint,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<proto_log::PlayerLogBodyHomeTransferToSafePoint,(__gnu_cxx::_Lock_policy)2,false,false> *const)(p_M_before_begin + 256));
        proto_log::PlayerLogBodyHomeTransferToSafePoint::set_module_id(v81, cur_module_id_0);
        v82 = std::__shared_ptr_access<proto_log::PlayerLogBodyHomeTransferToSafePoint,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<proto_log::PlayerLogBodyHomeTransferToSafePoint,(__gnu_cxx::_Lock_policy)2,false,false> *const)(p_M_before_begin + 256));
        proto_log::PlayerLogBodyHomeTransferToSafePoint::set_target_scene_id(v82, *(_DWORD *)(p_M_before_begin + 96));
        v83 = std::__shared_ptr_access<proto_log::PlayerLogBodyHomeTransferToSafePoint,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<proto_log::PlayerLogBodyHomeTransferToSafePoint,(__gnu_cxx::_Lock_policy)2,false,false> *const)(p_M_before_begin + 256));
        proto_log::PlayerLogBodyHomeTransferToSafePoint::set_source(v83, 2u);
        if ( *(_BYTE *)(((*(&v95._anon_0._M_allocated_capacity + 1) + 24) >> 3) + 0x7FFF8000) )
          __asan_report_load8();
        v84 = *(Player **)(*(&v95._anon_0._M_allocated_capacity + 1) + 24);
        std::shared_ptr<google::protobuf::Message>::shared_ptr(
          (std::shared_ptr<google::protobuf::Message> *const)&v105,
          0LL);
        std::shared_ptr<google::protobuf::Message>::shared_ptr<proto_log::PlayerLogBodyHomeTransferToSafePoint,void>(
          &p_body_ptr,
          (const std::shared_ptr<proto_log::PlayerLogBodyHomeTransferToSafePoint> *)(p_M_before_begin + 256));
        Player::printStatLog(v84, &p_body_ptr, (MessagePtr *)&v105, 0xEu);
        std::shared_ptr<google::protobuf::Message>::~shared_ptr(&p_body_ptr);
        std::shared_ptr<google::protobuf::Message>::~shared_ptr((std::shared_ptr<google::protobuf::Message> *const)&v105);
        std::shared_ptr<proto_log::PlayerLogBodyHomeTransferToSafePoint>::~shared_ptr((std::shared_ptr<proto_log::PlayerLogBodyHomeTransferToSafePoint> *const)(p_M_before_begin + 256));
        StatLogUtils::ContextHolder::~ContextHolder((StatLogUtils::ContextHolder *const)(p_M_before_begin + 32));
        goto LABEL_93;
      }
      common::milog::MiLogStream::create(
        (common::milog::MiLogStream *)&v105._M_weak_this._M_refcount,
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/scene/player_scene_comp.cpp",
        "joinHomeScene",
        3787);
      v85 = common::milog::MiLogStream::operator<<<char [24],(char *[24])0>(
              (common::milog::MiLogStream *const)&v105._M_weak_this._M_refcount,
              (const char (*)[24])"jumpToScene fails, uid:");
      if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
        __asan_report_load8();
      *(_DWORD *)(p_M_before_begin + 64) = Player::getUid(this->player_);
      v86 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
              v85,
              (const unsigned int *)(p_M_before_begin + 64));
      v87 = common::milog::MiLogStream::operator<<<char [24],(char *[24])0>(
              v86,
              (const char (*)[24])" target_home_owner_uid:");
      common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
        v87,
        (const unsigned int *)(p_M_before_begin + 80));
      common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)&v105._M_weak_this._M_refcount);
    }
    TransferReason::TransferReason((TransferReason *const)&v105.scene_map_, ENTER_REASON_ENTER_HOME);
    v88 = std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::operator*((const std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false> *const)(p_M_before_begin + 224));
    v89 = PlayerSceneComp::jumpToSceneBornPosition(this, v88, (TransferReason *)&v105.scene_map_) != 0;
    TransferReason::~TransferReason((TransferReason *const)&v105.scene_map_);
    if ( v89 )
    {
      common::milog::MiLogStream::create(
        (common::milog::MiLogStream *)&v105._M_weak_this._M_refcount,
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/scene/player_scene_comp.cpp",
        "joinHomeScene",
        3791);
      v90 = common::milog::MiLogStream::operator<<<char [24],(char *[24])0>(
              (common::milog::MiLogStream *const)&v105._M_weak_this._M_refcount,
              (const char (*)[24])"jumpToScene fails, uid:");
      if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
        __asan_report_load8();
      *(_DWORD *)(p_M_before_begin + 64) = Player::getUid(this->player_);
      v91 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
              v90,
              (const unsigned int *)(p_M_before_begin + 64));
      v92 = common::milog::MiLogStream::operator<<<char [24],(char *[24])0>(
              v91,
              (const char (*)[24])" target_home_owner_uid:");
      common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
        v92,
        (const unsigned int *)(p_M_before_begin + 80));
      common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)&v105._M_weak_this._M_refcount);
      v24 = 9745;
      goto LABEL_96;
    }
    goto LABEL_93;
  }
  common::milog::MiLogStream::create(
    (common::milog::MiLogStream *)&v105._M_weak_this._M_refcount,
    &common::milog::MiLogDefault::default_log_obj_,
    3u,
    "./src/scene/player_scene_comp.cpp",
    "joinHomeScene",
    3715);
  v42 = common::milog::MiLogStream::operator<<<char [42],(char *[42])0>(
          (common::milog::MiLogStream *const)&v105._M_weak_this._M_refcount,
          (const char (*)[42])"dest_scene_ptr is nullptr, dest_scene_id:");
  v43 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
          v42,
          (const unsigned int *)(p_M_before_begin + 96));
  v44 = common::milog::MiLogStream::operator<<<char [24],(char *[24])0>(
          v43,
          (const char (*)[24])" target_home_owner_uid:");
  v45 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
          v44,
          (const unsigned int *)(p_M_before_begin + 80));
  v46 = common::milog::MiLogStream::operator<<<char [6],(char *[6])0>(v45, (const char (*)[6])" uid:");
  if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
    __asan_report_load8();
LABEL_40:
  *(_DWORD *)(p_M_before_begin + 64) = Player::getUid(this->player_);
  common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
    v46,
    (const unsigned int *)(p_M_before_begin + 64));
  common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)&v105._M_weak_this._M_refcount);
  v24 = -1;
LABEL_96:
  std::shared_ptr<Scene>::~shared_ptr((std::shared_ptr<Scene> *const)(p_M_before_begin + 224));
LABEL_97:
  std::shared_ptr<Home>::~shared_ptr((std::shared_ptr<Home> *const)(p_M_before_begin + 192));
  result = v24;
  if ( v95._M_dataplus._M_p == (std::string::pointer)p_M_before_begin )
  {
    *(_QWORD *)((p_M_before_begin >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((p_M_before_begin >> 3) + 0x7FFF8008) = 0LL;
    *(_QWORD *)((p_M_before_begin >> 3) + 0x7FFF8010) = 0LL;
    *(_QWORD *)((p_M_before_begin >> 3) + 0x7FFF8018) = 0LL;
    *(_DWORD *)((p_M_before_begin >> 3) + 0x7FFF8020) = 0;
  }
  else
  {
    *(_QWORD *)p_M_before_begin = 1172321806LL;
    *(_QWORD *)((p_M_before_begin >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((p_M_before_begin >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((p_M_before_begin >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((p_M_before_begin >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((p_M_before_begin >> 3) + 0x7FFF8020) = -168430091;
  }
  return result;
};

// Line 3806: range 0000000013E623F4-0000000013E62C21
// local variable allocation has failed, the output may be wrong!
int32_t __cdecl PlayerSceneComp::backMyWorld(PlayerSceneComp *const this, BackMyWorldReason reason)
{
  unsigned __int64 v2; // r13
  __int64 v3; // rax
  _DWORD *v4; // r12
  PlayerBasicComp *BasicComp; // rax
  int32_t v6; // r14d
  common::milog::MiLogStream *v7; // r14
  unsigned __int64 v8; // rax
  unsigned __int64 v9; // rdx
  char v10; // al
  std::__shared_ptr_access<proto::PlayerQuitFromHomeNotify,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v11; // rax
  Player *v12; // r14
  std::__shared_ptr_access<proto::PlayerQuitFromMpNotify,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v13; // rax
  Player *v14; // r14
  Scene *v15; // rax
  bool v16; // r14
  common::milog::MiLogStream *v17; // rcx
  int32_t result; // eax
  std::string v19; // [rsp+0h] [rbp-1A0h] OVERLAPPED BYREF
  std::shared_ptr<proto::PlayerQuitFromHomeNotify> __r; // [rsp+20h] [rbp-180h] BYREF
  std::string v21; // [rsp+30h] [rbp-170h] BYREF
  TransferReason p_reason; // [rsp+50h] [rbp-150h] BYREF
  char v23[272]; // [rsp+90h] [rbp-110h] BYREF

  v19._M_string_length = (std::string::size_type)this;
  HIDWORD(v19._M_dataplus._M_p) = reason;
  v2 = (unsigned __int64)v23;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_2(224LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "7 32 1 11 holder:3807 48 4 18 prev_scene_id:3809 64 12 8 pos:3810 96 12 8 rot:3811 128 16 19 des"
                        "t_scene_ptr:3817 160 16 18 cur_world_ptr:3824 192 16 15 notify_ptr:3842";
  *(_QWORD *)(v2 + 16) = PlayerSceneComp::backMyWorld;
  v4 = (_DWORD *)(v2 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = -234556927;
  v4[536862722] = -219020288;
  v4[536862723] = -219020288;
  v4[536862724] = -219021312;
  v4[536862725] = -219021312;
  v4[536862726] = -202178560;
  if ( *(_BYTE *)(((v19._M_string_length + 24) >> 3) + 0x7FFF8000) )
    __asan_report_load8();
  BasicComp = Player::getBasicComp(*(Player *const *)(v19._M_string_length + 24));
  PlayerBasicComp::getNextTransNo[abi:cxx11](&v21, BasicComp);
  StatLogUtils::ContextHolder::ContextHolder((StatLogUtils::ContextHolder *const)(v2 + 32), 0x709u, v19);
  std::string::~string(&v21);
  *(_DWORD *)(v2 + 48) = 0;
  Vector3::Vector3((Vector3 *const)(v2 + 64), 0.0, 0.0, 0.0);
  Vector3::Vector3((Vector3 *const)(v2 + 96), 0.0, 0.0, 0.0);
  if ( PlayerSceneComp::getMyPrevSceneInfo(
         (const PlayerSceneComp *const)v19._M_string_length,
         (uint32_t *)(v2 + 48),
         (Vector3 *)(v2 + 64),
         (Vector3 *)(v2 + 96)) )
  {
    common::milog::MiLogStream::create(
      (common::milog::MiLogStream *)&v21,
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/scene/player_scene_comp.cpp",
      "backMyWorld",
      3814);
    common::milog::MiLogStream::operator<<<char [25],(char *[25])0>(
      (common::milog::MiLogStream *const)&v21,
      (const char (*)[25])"getMyPrevSceneInfo fails");
    common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)&v21);
    v6 = -1;
  }
  else
  {
    PlayerSceneComp::getPersonalScene((PlayerSceneComp *const)(v2 + 128), v19._M_string_length);
    if ( std::operator==<Scene>((const std::shared_ptr<Scene> *)(v2 + 128), 0LL) )
    {
      common::milog::MiLogStream::create(
        (common::milog::MiLogStream *)&v21,
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/scene/player_scene_comp.cpp",
        "backMyWorld",
        3820);
      v7 = common::milog::MiLogStream::operator<<<char [31],(char *[31])0>(
             (common::milog::MiLogStream *const)&v21,
             (const char (*)[31])"getMainWorldScene failed, uid:");
      if ( *(_BYTE *)(((v19._M_string_length + 24) >> 3) + 0x7FFF8000) )
        __asan_report_load8();
      HIDWORD(v19._anon_0._M_allocated_capacity) = Player::getUid(*(const Player *const *)(v19._M_string_length + 24));
      common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
        v7,
        (const unsigned int *)&v19._anon_0._M_allocated_capacity + 1);
      common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)&v21);
      v6 = -1;
    }
    else
    {
      PlayerSceneComp::getCurWorld((const PlayerSceneComp *const)(v2 + 160));
      if ( !std::operator!=<World>((const std::shared_ptr<World> *)(v2 + 160), 0LL) )
        goto LABEL_19;
      v8 = (unsigned __int64)std::__shared_ptr_access<World,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<World,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 160));
      if ( *(_BYTE *)((v8 >> 3) + 0x7FFF8000) )
        v8 = __asan_report_load8();
      v9 = *(_QWORD *)v8 + 16LL;
      if ( *(_BYTE *)((v9 >> 3) + 0x7FFF8000) )
        v8 = __asan_report_load8();
      if ( (*(unsigned int (__fastcall **)(unsigned __int64))v9)(v8) == 2 )
        v10 = 1;
      else
LABEL_19:
        v10 = 0;
      if ( v10 )
      {
        common::tools::perf::make_shared<proto::PlayerQuitFromHomeNotify>();
        if ( HIDWORD(v19._M_dataplus._M_p) == 1 )
          *((_DWORD *)&v19._anon_0._M_allocated_capacity + 2) = 3;
        else
          *((_DWORD *)&v19._anon_0._M_allocated_capacity + 2) = 2;
        v11 = std::__shared_ptr_access<proto::PlayerQuitFromHomeNotify,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<proto::PlayerQuitFromHomeNotify,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 192));
        proto::PlayerQuitFromHomeNotify::set_reason(
          v11,
          *((proto::PlayerQuitFromHomeNotify_QuitReason *)&v19._anon_0._M_allocated_capacity + 2));
        if ( *(_BYTE *)(((v19._M_string_length + 24) >> 3) + 0x7FFF8000) )
          __asan_report_load8();
        v12 = *(Player **)(v19._M_string_length + 24);
        std::dynamic_pointer_cast<google::protobuf::Message const,proto::PlayerQuitFromHomeNotify>(&__r);
        Player::sendMessage(v12, (common::minet::ConstMessagePtr *)&__r, 0LL);
        std::shared_ptr<google::protobuf::Message const>::~shared_ptr((std::shared_ptr<const google::protobuf::Message> *const)&__r);
        std::shared_ptr<proto::PlayerQuitFromHomeNotify>::~shared_ptr((std::shared_ptr<proto::PlayerQuitFromHomeNotify> *const)(v2 + 192));
      }
      else
      {
        common::tools::perf::make_shared<proto::PlayerQuitFromMpNotify>();
        *((_DWORD *)&v19._anon_0._M_allocated_capacity + 3) = 0;
        if ( HIDWORD(v19._M_dataplus._M_p) == 3 )
        {
          *((_DWORD *)&v19._anon_0._M_allocated_capacity + 3) = 8;
        }
        else if ( SHIDWORD(v19._M_dataplus._M_p) <= 3 )
        {
          if ( HIDWORD(v19._M_dataplus._M_p) == 2 )
          {
            *((_DWORD *)&v19._anon_0._M_allocated_capacity + 3) = 7;
          }
          else if ( HIDWORD(v19._M_dataplus._M_p) )
          {
            if ( HIDWORD(v19._M_dataplus._M_p) == 1 )
              *((_DWORD *)&v19._anon_0._M_allocated_capacity + 3) = 6;
          }
          else
          {
            *((_DWORD *)&v19._anon_0._M_allocated_capacity + 3) = 3;
          }
        }
        v13 = std::__shared_ptr_access<proto::PlayerQuitFromMpNotify,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<proto::PlayerQuitFromMpNotify,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 192));
        proto::PlayerQuitFromMpNotify::set_reason(
          v13,
          *((proto::PlayerQuitFromMpNotify_QuitReason *)&v19._anon_0._M_allocated_capacity + 3));
        if ( *(_BYTE *)(((v19._M_string_length + 24) >> 3) + 0x7FFF8000) )
          __asan_report_load8();
        v14 = *(Player **)(v19._M_string_length + 24);
        std::dynamic_pointer_cast<google::protobuf::Message const,proto::PlayerQuitFromMpNotify>((const std::shared_ptr<proto::PlayerQuitFromMpNotify> *)&__r);
        Player::sendMessage(v14, (common::minet::ConstMessagePtr *)&__r, 0LL);
        std::shared_ptr<google::protobuf::Message const>::~shared_ptr((std::shared_ptr<const google::protobuf::Message> *const)&__r);
        std::shared_ptr<proto::PlayerQuitFromMpNotify>::~shared_ptr((std::shared_ptr<proto::PlayerQuitFromMpNotify> *const)(v2 + 192));
      }
      TransferReason::TransferReason(&p_reason, ENTER_REASON_TEAM_BACK);
      v15 = std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::operator*((const std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 128));
      v16 = PlayerSceneComp::jumpToScene(
              (PlayerSceneComp *const)v19._M_string_length,
              v15,
              (const Vector3 *)(v2 + 64),
              (const Vector3 *)(v2 + 96),
              0,
              &p_reason) != 0;
      TransferReason::~TransferReason(&p_reason);
      if ( v16 )
      {
        common::milog::MiLogStream::create(
          (common::milog::MiLogStream *)&v21,
          &common::milog::MiLogDefault::default_log_obj_,
          3u,
          "./src/scene/player_scene_comp.cpp",
          "backMyWorld",
          3873);
        v17 = common::milog::MiLogStream::operator<<<char [18],(char *[18])0>(
                (common::milog::MiLogStream *const)&v21,
                (const char (*)[18])"jumpToScene fails");
        if ( *(_BYTE *)(((v19._M_string_length + 24) >> 3) + 0x7FFF8000) )
          __asan_report_load8();
        operator<<(v17, *(const Player **)(v19._M_string_length + 24));
        common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)&v21);
        v6 = -1;
      }
      else
      {
        v6 = 0;
      }
      std::shared_ptr<World>::~shared_ptr((std::shared_ptr<World> *const)(v2 + 160));
    }
    std::shared_ptr<Scene>::~shared_ptr((std::shared_ptr<Scene> *const)(v2 + 128));
  }
  StatLogUtils::ContextHolder::~ContextHolder((StatLogUtils::ContextHolder *const)(v2 + 32));
  result = v6;
  if ( v23 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8010) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8018) = 0;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8018) = -168430091;
  }
  return result;
};

// Line 3881: range 0000000013E62C22-0000000013E631B8
void __cdecl PlayerSceneComp::recordMySceneInfo(PlayerSceneComp *const this)
{
  unsigned __int64 v1; // r12
  __int64 v2; // rax
  _DWORD *v3; // r13
  common::milog::MiLogStream *v4; // rcx
  __int64 v5; // rsi
  SceneExcelConfigMgr *p_scene_config_mgr; // rcx
  __int64 my_cur_scene_id; // rsi
  data::SceneType SceneTypeBySceneId; // eax
  bool isPlayerScene; // r14
  uint32_t v10; // ecx
  char v11; // al
  common::milog::MiLogStream *v12; // rcx
  common::milog::MiLogStream *v13; // rax
  common::milog::MiLogStream *v14; // rax
  std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v15; // rax
  uint32_t OwnerUid; // r14d
  std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v17; // rax
  data::SceneType SceneType; // eax
  std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v19; // rax
  uint32_t SceneId; // edx
  char v21; // al
  std::shared_ptr<Config> v22; // [rsp+10h] [rbp-C0h] BYREF
  common::milog::MiLogStream v23; // [rsp+20h] [rbp-B0h] BYREF
  char v24[144]; // [rsp+40h] [rbp-90h] BYREF

  v1 = (unsigned __int64)v24;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_1(96LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "2 32 16 19 cur_avatar_ptr:3882 64 16 18 cur_scene_ptr:3888";
  *(_QWORD *)(v1 + 16) = PlayerSceneComp::recordMySceneInfo;
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -219021312;
  v3[536862722] = -202178560;
  if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
    __asan_report_load8();
  Player::getAvatarComp(this->player_);
  PlayerAvatarComp::getCurAvatar((const PlayerAvatarComp *const)(v1 + 32));
  if ( std::operator==<Avatar>((const std::shared_ptr<Avatar> *)(v1 + 32), 0LL) )
  {
    common::milog::MiLogStream::create(
      &v23,
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/scene/player_scene_comp.cpp",
      "recordMySceneInfo",
      3885);
    v4 = common::milog::MiLogStream::operator<<<char [23],(char *[23])0>(
           &v23,
           (const char (*)[23])"cur_avatar_ptr is null");
    if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
      __asan_report_load8();
    operator<<(v4, this->player_);
    common::milog::MiLogStream::~MiLogStream(&v23);
  }
  else
  {
    PlayerSceneComp::getCurScene((const PlayerSceneComp *const)(v1 + 64));
    v5 = 0LL;
    if ( std::operator==<Scene>((const std::shared_ptr<Scene> *)(v1 + 64), 0LL) )
    {
      ServiceBox::findService<GameserverService>();
      GameserverService::getConfig((GameserverService *const)&v22);
      p_scene_config_mgr = &std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false> *const)&v22)->design_config.txt_config_mgr.scene_config_mgr;
      if ( *(_BYTE *)(((unsigned __int64)&this->my_cur_scene_id_ >> 3) + 0x7FFF8000) != 0
        && *(_BYTE *)(((unsigned __int64)&this->my_cur_scene_id_ >> 3) + 0x7FFF8000) <= 3 )
      {
        __asan_report_load4(&this->my_cur_scene_id_);
      }
      my_cur_scene_id = this->my_cur_scene_id_;
      SceneTypeBySceneId = SceneExcelConfigMgr::getSceneTypeBySceneId(p_scene_config_mgr, my_cur_scene_id);
      isPlayerScene = SceneExcelConfigMgr::isPlayerScene(SceneTypeBySceneId);
      std::shared_ptr<Config>::~shared_ptr(&v22);
      if ( isPlayerScene )
      {
        if ( *(_BYTE *)(((unsigned __int64)&this->my_cur_scene_id_ >> 3) + 0x7FFF8000) != 0
          && *(_BYTE *)(((unsigned __int64)&this->my_cur_scene_id_ >> 3) + 0x7FFF8000) <= 3 )
        {
          __asan_report_load4(&this->my_cur_scene_id_);
        }
        v10 = this->my_cur_scene_id_;
        v11 = *(_BYTE *)(((unsigned __int64)&this->my_prev_scene_id_ >> 3) + 0x7FFF8000);
        if ( v11 != 0 && v11 <= 3 )
        {
          LOBYTE(my_cur_scene_id) = v11 != 0;
          __asan_report_store4(&this->my_prev_scene_id_, my_cur_scene_id, (_BYTE)this + 48);
        }
        this->my_prev_scene_id_ = v10;
        common::milog::MiLogStream::create(
          &v23,
          &common::milog::MiLogDefault::default_log_obj_,
          1u,
          "./src/scene/player_scene_comp.cpp",
          "recordMySceneInfo",
          3894);
        v12 = common::milog::MiLogStream::operator<<<char [22],(char *[22])0>(
                &v23,
                (const char (*)[22])"cur_scene_ptr is null");
        if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
          __asan_report_load8();
        v13 = operator<<(v12, this->player_);
        v14 = common::milog::MiLogStream::operator<<<char [22],(char *[22])0>(
                v13,
                (const char (*)[22])" ,my_prev_scene_id_: ");
        common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v14, &this->my_prev_scene_id_);
        common::milog::MiLogStream::~MiLogStream(&v23);
      }
    }
    else
    {
      v15 = std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v1 + 64));
      OwnerUid = Scene::getOwnerUid(v15);
      if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
        __asan_report_load8();
      if ( OwnerUid == Player::getUid(this->player_) )
      {
        v17 = std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v1 + 64));
        SceneType = Scene::getSceneType(v17);
        if ( SceneExcelConfigMgr::isPlayerScene(SceneType) )
        {
          v19 = std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v1 + 32));
          SceneId = Entity::getSceneId((const Entity *const)v19);
          v21 = *(_BYTE *)(((unsigned __int64)&this->my_prev_scene_id_ >> 3) + 0x7FFF8000);
          if ( v21 != 0 && v21 <= 3 )
          {
            LOBYTE(v5) = v21 != 0;
            __asan_report_store4(&this->my_prev_scene_id_, v5, SceneId);
          }
          this->my_prev_scene_id_ = SceneId;
        }
      }
    }
    std::shared_ptr<Scene>::~shared_ptr((std::shared_ptr<Scene> *const)(v1 + 64));
  }
  std::shared_ptr<Avatar>::~shared_ptr((std::shared_ptr<Avatar> *const)(v1 + 32));
  if ( v24 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_DWORD *)((v1 >> 3) + 0x7FFF8008) = 0;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v1 >> 3) + 0x7FFF8008) = -168430091;
  }
};

// Line 3914: range 0000000013E631BA-0000000013E635BF
int32_t __cdecl PlayerSceneComp::getMyPrevSceneInfo(
        const PlayerSceneComp *const this,
        uint32_t *my_prev_scene_id,
        Vector3 *my_prev_pos,
        Vector3 *my_prev_rot)
{
  unsigned __int64 v4; // rbx
  __int64 v5; // rax
  unsigned __int64 v6; // r13
  uint32_t v7; // ecx
  char v8; // dl
  bool v9; // dl
  std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v10; // rax
  uint32_t DefaultWorldMainSceneId; // ecx
  char v12; // dl
  GameserverService *v13; // rsi
  bool v14; // dl
  common::milog::MiLogStream *v15; // r14
  common::milog::MiLogStream *v16; // rax
  common::milog::MiLogStream *v17; // rdx
  int32_t v18; // r14d
  Scene *v19; // r14
  uint32_t Uid; // esi
  int32_t result; // eax
  uint32_t *my_prev_scene_ida; // [rsp+10h] [rbp-B0h]
  unsigned int val; // [rsp+2Ch] [rbp-94h] BYREF
  common::milog::MiLogStream v26; // [rsp+30h] [rbp-90h] BYREF
  char v27[112]; // [rsp+50h] [rbp-70h] BYREF

  my_prev_scene_ida = my_prev_scene_id;
  v4 = (unsigned __int64)v27;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v5 = __asan_stack_malloc_0(64LL);
    if ( v5 )
      v4 = v5;
  }
  *(_QWORD *)v4 = 1102416563LL;
  *(_QWORD *)(v4 + 8) = "1 32 16 19 prev_scene_ptr:3921";
  *(_QWORD *)(v4 + 16) = PlayerSceneComp::getMyPrevSceneInfo;
  v6 = v4 >> 3;
  *(_DWORD *)(v6 + 2147450880) = -235802127;
  *(_DWORD *)(v6 + 2147450884) = -202178560;
  if ( *(_BYTE *)(((unsigned __int64)&this->my_prev_scene_id_ >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->my_prev_scene_id_ >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4(&this->my_prev_scene_id_);
  }
  v7 = this->my_prev_scene_id_;
  v8 = *(_BYTE *)(((unsigned __int64)my_prev_scene_id >> 3) + 0x7FFF8000);
  LOBYTE(my_prev_scene_id) = v8 != 0;
  v9 = v8 != 0 && (char)(((unsigned __int8)my_prev_scene_ida & 7) + 3) >= v8;
  if ( v9 )
    __asan_report_store4(my_prev_scene_ida, my_prev_scene_id, v9);
  *my_prev_scene_ida = v7;
  if ( !*my_prev_scene_ida )
  {
    v13 = ServiceBox::findService<GameserverService>();
    GameserverService::getConfig((GameserverService *const)(v4 + 32));
    v10 = std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 32));
    DefaultWorldMainSceneId = TxtConfigMgr::getDefaultWorldMainSceneId(&v10->design_config.txt_config_mgr);
    v12 = *(_BYTE *)(((unsigned __int64)my_prev_scene_ida >> 3) + 0x7FFF8000);
    LOBYTE(v13) = v12 != 0;
    v14 = v12 != 0 && (char)(((unsigned __int8)my_prev_scene_ida & 7) + 3) >= v12;
    if ( v14 )
      __asan_report_store4(my_prev_scene_ida, v13, v14);
    *my_prev_scene_ida = DefaultWorldMainSceneId;
    std::shared_ptr<Config>::~shared_ptr((std::shared_ptr<Config> *const)(v4 + 32));
  }
  if ( *(_BYTE *)(((unsigned __int64)my_prev_scene_ida >> 3) + 0x7FFF8000) != 0
    && (char)(((unsigned __int8)my_prev_scene_ida & 7) + 3) >= *(_BYTE *)(((unsigned __int64)my_prev_scene_ida >> 3)
                                                                        + 0x7FFF8000) )
  {
    __asan_report_load4(my_prev_scene_ida);
  }
  PlayerSceneComp::findScene((const PlayerSceneComp *const)(v4 + 32), (uint32_t)this);
  if ( std::operator==<Scene>((const std::shared_ptr<Scene> *)(v4 + 32), 0LL) )
  {
    common::milog::MiLogStream::create(
      &v26,
      &common::milog::MiLogDefault::default_log_obj_,
      4u,
      "./src/scene/player_scene_comp.cpp",
      "getMyPrevSceneInfo",
      3924);
    v15 = common::milog::MiLogStream::operator<<<char [23],(char *[23])0>(
            &v26,
            (const char (*)[23])"findScene failed, uid:");
    if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
      __asan_report_load8();
    val = Player::getUid(this->player_);
    v16 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v15, &val);
    v17 = common::milog::MiLogStream::operator<<<char [11],(char *[11])0>(v16, (const char (*)[11])" scene_id:");
    common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v17, my_prev_scene_ida);
    common::milog::MiLogStream::~MiLogStream(&v26);
    v18 = -1;
  }
  else
  {
    v19 = std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 32));
    if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
      __asan_report_load8();
    Uid = Player::getUid(this->player_);
    Scene::getPlayerLocation(v19, Uid, my_prev_pos, my_prev_rot);
    v18 = 0;
  }
  std::shared_ptr<Scene>::~shared_ptr((std::shared_ptr<Scene> *const)(v4 + 32));
  result = v18;
  if ( v27 == (char *)v4 )
  {
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0LL;
  }
  else
  {
    *(_QWORD *)v4 = 1172321806LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 3937: range 0000000013E635C0-0000000013E6367A
void __cdecl PlayerSceneComp::onGameHourChange(PlayerSceneComp *const this, uint32_t hour)
{
  std::__shared_ptr_access<PlayerWorld,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v2; // rax
  common::milog::MiLogStream v3; // [rsp+10h] [rbp-30h] BYREF

  if ( std::operator==<PlayerWorld>(&this->my_player_world_ptr_, 0LL) )
  {
    common::milog::MiLogStream::create(
      &v3,
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/scene/player_scene_comp.cpp",
      "onGameHourChange",
      3940);
    common::milog::MiLogStream::operator<<<char [32],(char *[32])0>(
      &v3,
      (const char (*)[32])"my_player_world_ptr_ is nullptr");
    common::milog::MiLogStream::~MiLogStream(&v3);
  }
  else
  {
    v2 = std::__shared_ptr_access<PlayerWorld,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<PlayerWorld,(__gnu_cxx::_Lock_policy)2,false,false> *const)&this->my_player_world_ptr_);
    World::onGameHourChange(v2, hour);
  }
};

// Line 3948: range 0000000013E6367C-0000000013E639F0
void __cdecl PlayerSceneComp::getScenePointLog(
        const PlayerSceneComp *const this,
        uint32_t scene_id,
        uint32_t point_id,
        proto_log::ScenePointLog *point_log)
{
  unsigned __int64 v4; // rbx
  __int64 v5; // rax
  unsigned __int64 v6; // r13
  unsigned int v7; // eax
  std::__shared_ptr_access<data::ConfigScenePoint,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v8; // rax
  unsigned __int64 v9; // rax
  unsigned __int64 v10; // rdx
  const char *v11; // rdx
  std::__shared_ptr_access<data::ConfigScenePoint,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v12; // rdx
  data::Vector *p_pos; // rax
  std::__shared_ptr_access<data::ConfigScenePoint,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v14; // rax
  std::__shared_ptr_access<data::ConfigScenePoint,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v15; // rdx
  float *p_z; // rax
  std::shared_ptr<Config> v19; // [rsp+20h] [rbp-70h] BYREF
  char v20[96]; // [rsp+30h] [rbp-60h] BYREF

  v4 = (unsigned __int64)v20;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v5 = __asan_stack_malloc_0(64LL);
    if ( v5 )
      v4 = v5;
  }
  *(_QWORD *)v4 = 1102416563LL;
  *(_QWORD *)(v4 + 8) = "1 32 16 20 scene_point_ptr:3951";
  *(_QWORD *)(v4 + 16) = PlayerSceneComp::getScenePointLog;
  v6 = v4 >> 3;
  *(_DWORD *)(v6 + 2147450880) = -235802127;
  *(_DWORD *)(v6 + 2147450884) = -202178560;
  proto_log::ScenePointLog::set_scene_id(point_log, scene_id);
  proto_log::ScenePointLog::set_point_id(point_log, point_id);
  ServiceBox::findService<GameserverService>();
  GameserverService::getConfig((GameserverService *const)&v19);
  v7 = (unsigned int)std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false> *const)&v19);
  JsonConfigMgr::findScenePoint((const JsonConfigMgr *const)(v4 + 32), v7 + 93080, scene_id);
  std::shared_ptr<Config>::~shared_ptr(&v19);
  if ( std::operator!=<data::ConfigScenePoint>(0LL, (const std::shared_ptr<data::ConfigScenePoint> *)(v4 + 32)) )
  {
    v8 = std::__shared_ptr_access<data::ConfigScenePoint,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<data::ConfigScenePoint,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 32));
    if ( *(_BYTE *)(((unsigned __int64)&v8->type >> 3) + 0x7FFF8000) != 0
      && *(_BYTE *)(((unsigned __int64)&v8->type >> 3) + 0x7FFF8000) <= 3 )
    {
      v8 = (std::__shared_ptr_access<data::ConfigScenePoint,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *)__asan_report_load4(&v8->type);
    }
    proto_log::ScenePointLog::set_type(point_log, v8->type);
    v9 = (unsigned __int64)std::__shared_ptr_access<data::ConfigScenePoint,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<data::ConfigScenePoint,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 32));
    if ( *(_BYTE *)((v9 >> 3) + 0x7FFF8000) )
      v9 = __asan_report_load8();
    v10 = *(_QWORD *)v9 + 32LL;
    if ( *(_BYTE *)((v10 >> 3) + 0x7FFF8000) )
      v9 = __asan_report_load8();
    v11 = (const char *)(*(__int64 (__fastcall **)(unsigned __int64))v10)(v9);
    proto_log::ScenePointLog::set_dollar_type(point_log, v11);
    v12 = std::__shared_ptr_access<data::ConfigScenePoint,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<data::ConfigScenePoint,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 32));
    p_pos = &v12->pos;
    if ( *(_BYTE *)(((unsigned __int64)p_pos >> 3) + 0x7FFF8000) != 0
      && (char)(((unsigned __int8)p_pos & 7) + 3) >= *(_BYTE *)(((unsigned __int64)p_pos >> 3) + 0x7FFF8000) )
    {
      __asan_report_load4(p_pos);
    }
    proto_log::ScenePointLog::set_x_coordinate(point_log, (int)v12->pos.x);
    v14 = std::__shared_ptr_access<data::ConfigScenePoint,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<data::ConfigScenePoint,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 32));
    if ( *(_BYTE *)(((unsigned __int64)&v14->pos.y >> 3) + 0x7FFF8000) != 0
      && *(_BYTE *)(((unsigned __int64)&v14->pos.y >> 3) + 0x7FFF8000) <= 3 )
    {
      v14 = (std::__shared_ptr_access<data::ConfigScenePoint,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *)__asan_report_load4(&v14->pos.y);
    }
    proto_log::ScenePointLog::set_y_coordinate(point_log, (int)v14->pos.y);
    v15 = std::__shared_ptr_access<data::ConfigScenePoint,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<data::ConfigScenePoint,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 32));
    p_z = &v15->pos.z;
    if ( *(_BYTE *)(((unsigned __int64)p_z >> 3) + 0x7FFF8000) != 0
      && (char)(((unsigned __int8)p_z & 7) + 3) >= *(_BYTE *)(((unsigned __int64)p_z >> 3) + 0x7FFF8000) )
    {
      __asan_report_load4(p_z);
    }
    proto_log::ScenePointLog::set_z_coordinate(point_log, (int)v15->pos.z);
  }
  std::shared_ptr<data::ConfigScenePoint>::~shared_ptr((std::shared_ptr<data::ConfigScenePoint> *const)(v4 + 32));
  if ( v20 == (char *)v4 )
  {
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0LL;
  }
  else
  {
    *(_QWORD *)v4 = 1172321806LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
  }
};

// Line 3964: range 0000000013E639F2-0000000013E63E5A
__int64 __fastcall PlayerSceneComp::addSeenMonster(PlayerSceneComp *const this, uint32_t monster_id)
{
  unsigned __int64 v2; // r12
  __int64 v3; // rax
  _DWORD *v4; // r13
  std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v5; // rax
  bool v6; // r14
  common::milog::MiLogStream *v7; // rax
  common::milog::MiLogStream *v8; // rax
  common::milog::MiLogStream *v9; // rbx
  unsigned int v10; // r14d
  PlayerEventComp *EventComp; // r14
  std::__shared_ptr_access<proto::AddSeenMonsterNotify,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v12; // rax
  Player *player; // r14
  __int64 result; // rax
  unsigned int val; // [rsp+1Ch] [rbp-E4h] BYREF
  std::shared_ptr<const google::protobuf::Message> v16; // [rsp+20h] [rbp-E0h] BYREF
  common::milog::MiLogStream v17; // [rsp+30h] [rbp-D0h] BYREF
  char v18[176]; // [rsp+50h] [rbp-B0h] BYREF

  v2 = (unsigned __int64)v18;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_1(128LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "3 48 4 15 monster_id:3963 64 16 14 event_ptr:3977 96 16 15 notify_ptr:3982";
  *(_QWORD *)(v2 + 16) = PlayerSceneComp::addSeenMonster;
  v4 = (_DWORD *)(v2 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = -234556943;
  v4[536862722] = -219021312;
  v4[536862723] = -202178560;
  *(_DWORD *)(v2 + 48) = monster_id;
  ServiceBox::findService<GameserverService>();
  GameserverService::getConfig((GameserverService *const)&v16);
  v5 = std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false> *const)&v16);
  v6 = data::MonsterExcelConfigMgrBase::findMonsterExcelConfig(
         &v5->design_config.txt_config_mgr.monster_config_mgr,
         *(_DWORD *)(v2 + 48)) == 0LL;
  std::shared_ptr<Config>::~shared_ptr((std::shared_ptr<Config> *const)&v16);
  if ( v6 )
  {
    common::milog::MiLogStream::create(
      &v17,
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/scene/player_scene_comp.cpp",
      "addSeenMonster",
      3967);
    v7 = common::milog::MiLogStream::operator<<<char [43],(char *[43])0>(
           &v17,
           (const char (*)[43])"findMonsterExcelConfig failed, monster_id:");
    v8 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v7, (const unsigned int *)(v2 + 48));
    v9 = common::milog::MiLogStream::operator<<<char [6],(char *[6])0>(v8, (const char (*)[6])" uid:");
    if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
      __asan_report_load8();
    val = Player::getUid(this->player_);
    common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v9, &val);
    common::milog::MiLogStream::~MiLogStream(&v17);
    v10 = -1;
  }
  else if ( std::set<unsigned int>::count(&this->monster_seen_set_, (const std::set<unsigned int>::key_type *)(v2 + 48)) )
  {
    v10 = 0;
  }
  else
  {
    common::tools::perf::make_shared<SeeAnimalEvent,unsigned int &>(
      (unsigned int *)(v2 + 64),
      (unsigned int *)(v2 + 48));
    if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
      __asan_report_load8();
    EventComp = Player::getEventComp(this->player_);
    std::shared_ptr<BaseEvent>::shared_ptr<SeeAnimalEvent,void>(
      (std::shared_ptr<BaseEvent> *const)&v16,
      (const std::shared_ptr<SeeAnimalEvent> *)(v2 + 64));
    PlayerEventComp::notifyEvent(EventComp, (BaseEventPtr *)&v16);
    std::shared_ptr<BaseEvent>::~shared_ptr((std::shared_ptr<BaseEvent> *const)&v16);
    std::set<unsigned int>::insert(&this->monster_seen_set_, (const std::set<unsigned int>::value_type *)(v2 + 48));
    common::tools::perf::make_shared<proto::AddSeenMonsterNotify>();
    v12 = std::__shared_ptr_access<proto::AddSeenMonsterNotify,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<proto::AddSeenMonsterNotify,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 96));
    proto::AddSeenMonsterNotify::add_monster_id_list(v12, *(_DWORD *)(v2 + 48));
    if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
      __asan_report_load8();
    player = this->player_;
    std::dynamic_pointer_cast<google::protobuf::Message const,proto::AddSeenMonsterNotify>((const std::shared_ptr<proto::AddSeenMonsterNotify> *)&v16);
    Player::sendMessage(player, &v16, 0LL);
    std::shared_ptr<google::protobuf::Message const>::~shared_ptr(&v16);
    v10 = 0;
    std::shared_ptr<proto::AddSeenMonsterNotify>::~shared_ptr((std::shared_ptr<proto::AddSeenMonsterNotify> *const)(v2 + 96));
    std::shared_ptr<SeeAnimalEvent>::~shared_ptr((std::shared_ptr<SeeAnimalEvent> *const)(v2 + 64));
  }
  result = v10;
  if ( v18 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 3992: range 0000000013E63E5C-0000000013E63E86
void __cdecl PlayerSceneComp::clearSeenMonsterByGm(PlayerSceneComp *const this)
{
  std::set<unsigned int>::clear(&this->monster_seen_set_);
  PlayerSceneComp::notifySeenMonster(this);
};

// Line 3999: range 0000000013E63E88-0000000013E640E1
int32_t __cdecl PlayerSceneComp::notifySeenMonster(PlayerSceneComp *const this)
{
  unsigned __int64 v1; // rbx
  __int64 v2; // rax
  unsigned __int64 v3; // r12
  unsigned int *v4; // rax
  unsigned int *v5; // rdx
  std::__shared_ptr_access<proto::AllSeenMonsterNotify,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v6; // rax
  Player *player; // r14
  int32_t result; // eax
  unsigned int monster_id; // [rsp+14h] [rbp-9Ch]
  std::set<unsigned int>::iterator __for_begin; // [rsp+18h] [rbp-98h] BYREF
  std::set<unsigned int>::iterator __for_end; // [rsp+20h] [rbp-90h] BYREF
  std::set<unsigned int> *__for_range; // [rsp+28h] [rbp-88h]
  std::shared_ptr<proto::AllSeenMonsterNotify> __r; // [rsp+30h] [rbp-80h] BYREF
  char v14[112]; // [rsp+40h] [rbp-70h] BYREF

  v1 = (unsigned __int64)v14;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_0(64LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "1 32 16 15 notify_ptr:4000";
  *(_QWORD *)(v1 + 16) = PlayerSceneComp::notifySeenMonster;
  v3 = v1 >> 3;
  *(_DWORD *)(v3 + 2147450880) = -235802127;
  *(_DWORD *)(v3 + 2147450884) = -202178560;
  common::tools::perf::make_shared<proto::AllSeenMonsterNotify>();
  __for_range = &this->monster_seen_set_;
  __for_begin._M_node = std::set<unsigned int>::begin(&this->monster_seen_set_)._M_node;
  __for_end._M_node = std::set<unsigned int>::end(&this->monster_seen_set_)._M_node;
  while ( std::operator!=(&__for_begin, &__for_end) )
  {
    v4 = (unsigned int *)std::_Rb_tree_const_iterator<unsigned int>::operator*(&__for_begin);
    v5 = v4;
    if ( *(_BYTE *)(((unsigned __int64)v4 >> 3) + 0x7FFF8000) != 0
      && (char)(((unsigned __int8)v4 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)v4 >> 3) + 0x7FFF8000) )
    {
      __asan_report_load4(v4);
    }
    monster_id = *v5;
    v6 = std::__shared_ptr_access<proto::AllSeenMonsterNotify,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<proto::AllSeenMonsterNotify,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v1 + 32));
    proto::AllSeenMonsterNotify::add_monster_id_list(v6, monster_id);
    std::_Rb_tree_const_iterator<unsigned int>::operator++(&__for_begin);
  }
  if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
    __asan_report_load8();
  player = this->player_;
  std::dynamic_pointer_cast<google::protobuf::Message const,proto::AllSeenMonsterNotify>(&__r);
  Player::sendMessage(player, (common::minet::ConstMessagePtr *)&__r, 0LL);
  std::shared_ptr<google::protobuf::Message const>::~shared_ptr((std::shared_ptr<const google::protobuf::Message> *const)&__r);
  std::shared_ptr<proto::AllSeenMonsterNotify>::~shared_ptr((std::shared_ptr<proto::AllSeenMonsterNotify> *const)(v1 + 32));
  result = 0;
  if ( v14 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 4012: range 0000000013E640E2-0000000013E649BE
__int64 __fastcall PlayerSceneComp::enterArea(PlayerSceneComp *const this, uint32_t area_type, uint32_t area_id)
{
  unsigned __int64 v3; // r12
  __int64 v4; // rax
  _DWORD *v5; // r13
  __int64 v6; // rsi
  unsigned int v7; // r14d
  std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v8; // rax
  common::milog::MiLogStream *v9; // rax
  bool v10; // dl
  bool v11; // dl
  std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v12; // rax
  common::milog::MiLogStream *v13; // rax
  std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v14; // rax
  common::milog::MiLogStream *v15; // rax
  __int64 v16; // rsi
  bool v17; // dl
  uint32_t v18; // ecx
  char v19; // al
  bool v20; // dl
  common::milog::MiLogStream *v21; // rax
  common::milog::MiLogStream *v22; // rax
  common::milog::MiLogStream *v23; // rax
  common::milog::MiLogStream *v24; // rax
  common::milog::MiLogStream *v25; // rax
  uint32_t *p_level2_area_id; // rsi
  std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v27; // rax
  uint32_t level1_area_id; // ecx
  char v30; // dl
  bool v31; // dl
  __int64 result; // rax
  uint32_t level2_area_id; // [rsp+18h] [rbp-D8h]
  uint32_t city_id; // [rsp+1Ch] [rbp-D4h]
  const data::WorldAreaConfig *level2_area_config_ptr; // [rsp+20h] [rbp-D0h]
  const data::WorldAreaConfig *area_config_ptr; // [rsp+28h] [rbp-C8h]
  std::shared_ptr<Config> v39; // [rsp+30h] [rbp-C0h] BYREF
  common::milog::MiLogStream v40; // [rsp+40h] [rbp-B0h] BYREF
  char v41[144]; // [rsp+60h] [rbp-90h] BYREF

  v3 = (unsigned __int64)v41;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_1(96LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "3 32 4 19 level1_area_id:4019 48 4 12 area_id:4011 64 16 14 scene_ptr:4013";
  *(_QWORD *)(v3 + 16) = PlayerSceneComp::enterArea;
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = -234556924;
  v5[536862722] = -202178560;
  *(_DWORD *)(v3 + 48) = area_id;
  PlayerSceneComp::getCurScene((const PlayerSceneComp *const)(v3 + 64));
  v6 = 0LL;
  if ( std::operator==<Scene>((const std::shared_ptr<Scene> *)(v3 + 64), 0LL) )
  {
    common::milog::MiLogStream::create(
      &v40,
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/scene/player_scene_comp.cpp",
      "enterArea",
      4016);
    common::milog::MiLogStream::operator<<<char [18],(char *[18])0>(&v40, (const char (*)[18])"getCurScene fails");
    common::milog::MiLogStream::~MiLogStream(&v40);
    v7 = -1;
    goto LABEL_42;
  }
  *(_DWORD *)(v3 + 32) = 0;
  level2_area_id = 0;
  if ( area_type == 1 )
  {
    *(_DWORD *)(v3 + 32) = *(_DWORD *)(v3 + 48);
  }
  else
  {
    if ( area_type != 2 )
    {
      v7 = 0;
      goto LABEL_42;
    }
    ServiceBox::findService<GameserverService>();
    GameserverService::getConfig((GameserverService *const)&v39);
    v8 = std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false> *const)&v39);
    level2_area_config_ptr = WorldAreaExcelConfigMgr::findSecondLevelWorldAreaConfig(
                               &v8->design_config.txt_config_mgr.world_area_config_mgr,
                               *(_DWORD *)(v3 + 48));
    std::shared_ptr<Config>::~shared_ptr(&v39);
    if ( !level2_area_config_ptr )
    {
      common::milog::MiLogStream::create(
        &v40,
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/scene/player_scene_comp.cpp",
        "enterArea",
        4030);
      v9 = common::milog::MiLogStream::operator<<<char [40],(char *[40])0>(
             &v40,
             (const char (*)[40])"findSecondLevelWorldAreaConfig failed: ");
      common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v9, (const unsigned int *)(v3 + 48));
      common::milog::MiLogStream::~MiLogStream(&v40);
      v7 = -1;
      goto LABEL_42;
    }
    v6 = (((_BYTE)level2_area_config_ptr + 20) & 7u) + 3;
    if ( *(_BYTE *)(((unsigned __int64)&level2_area_config_ptr->area_id_1 >> 3) + 0x7FFF8000) != 0
      && (char)((((_BYTE)level2_area_config_ptr + 20) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&level2_area_config_ptr->area_id_1 >> 3)
                                                                            + 0x7FFF8000) )
    {
      __asan_report_load4(&level2_area_config_ptr->area_id_1);
    }
    *(_DWORD *)(v3 + 32) = level2_area_config_ptr->area_id_1;
    level2_area_id = *(_DWORD *)(v3 + 48);
  }
  if ( *(_BYTE *)(((unsigned __int64)&this->level1_area_id_ >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->level1_area_id_ >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_store4(&this->level1_area_id_, v6, (_BYTE)this - 120);
  }
  this->level1_area_id_ = 0;
  v10 = *(_BYTE *)(((unsigned __int64)&this->level2_area_id_ >> 3) + 0x7FFF8000) != 0
     && (char)((((_BYTE)this - 116) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&this->level2_area_id_ >> 3) + 0x7FFF8000);
  if ( v10 )
    __asan_report_store4(&this->level2_area_id_, (((_BYTE)this - 116) & 7u) + 3, v10);
  this->level2_area_id_ = 0;
  v11 = *(_BYTE *)(((unsigned __int64)&this->city_id_ >> 3) + 0x7FFF8000) != 0
     && (char)((((_BYTE)this - 124) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&this->city_id_ >> 3) + 0x7FFF8000);
  if ( v11 )
    __asan_report_store4(&this->city_id_, (((_BYTE)this - 124) & 7u) + 3, v11);
  this->city_id_ = 0;
  ServiceBox::findService<GameserverService>();
  GameserverService::getConfig((GameserverService *const)&v39);
  v12 = std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false> *const)&v39);
  area_config_ptr = WorldAreaExcelConfigMgr::findFirstLevelWorldAreaConfig(
                      &v12->design_config.txt_config_mgr.world_area_config_mgr,
                      *(_DWORD *)(v3 + 32));
  std::shared_ptr<Config>::~shared_ptr(&v39);
  if ( area_config_ptr )
  {
    ServiceBox::findService<GameserverService>();
    GameserverService::getConfig((GameserverService *const)&v39);
    v14 = std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false> *const)&v39);
    city_id = WorldAreaExcelConfigMgr::findAreaCityId(
                &v14->design_config.txt_config_mgr.world_area_config_mgr,
                *(_DWORD *)(v3 + 32));
    std::shared_ptr<Config>::~shared_ptr(&v39);
    if ( city_id )
    {
      v16 = (((_BYTE)this - 124) & 7u) + 3;
      v17 = *(_BYTE *)(((unsigned __int64)&this->city_id_ >> 3) + 0x7FFF8000) != 0
         && (char)((((_BYTE)this - 124) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&this->city_id_ >> 3) + 0x7FFF8000);
      if ( v17 )
        __asan_report_store4(&this->city_id_, v16, v17);
      this->city_id_ = city_id;
      v18 = *(_DWORD *)(v3 + 32);
      v19 = *(_BYTE *)(((unsigned __int64)&this->level1_area_id_ >> 3) + 0x7FFF8000);
      if ( v19 != 0 && v19 <= 3 )
      {
        LOBYTE(v16) = v19 != 0;
        __asan_report_store4(&this->level1_area_id_, v16, (_BYTE)this - 120);
      }
      this->level1_area_id_ = v18;
      v20 = *(_BYTE *)(((unsigned __int64)&this->level2_area_id_ >> 3) + 0x7FFF8000) != 0
         && (char)((((_BYTE)this - 116) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&this->level2_area_id_ >> 3)
                                                              + 0x7FFF8000);
      if ( v20 )
        __asan_report_store4(&this->level2_area_id_, (((_BYTE)this - 116) & 7u) + 3, v20);
      this->level2_area_id_ = level2_area_id;
      common::milog::MiLogStream::create(
        &v40,
        &common::milog::MiLogDefault::default_log_obj_,
        1u,
        "./src/scene/player_scene_comp.cpp",
        "enterArea",
        4061);
      v21 = common::milog::MiLogStream::operator<<<char [10],(char *[10])0>(&v40, (const char (*)[10])"city_id: ");
      v22 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v21, &this->city_id_);
      v23 = common::milog::MiLogStream::operator<<<char [10],(char *[10])0>(v22, (const char (*)[10])" level1: ");
      v24 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v23, &this->level1_area_id_);
      v25 = common::milog::MiLogStream::operator<<<char [10],(char *[10])0>(v24, (const char (*)[10])" level2: ");
      p_level2_area_id = &this->level2_area_id_;
      common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v25, &this->level2_area_id_);
      common::milog::MiLogStream::~MiLogStream(&v40);
      if ( PlayerSceneComp::isInMyPlayerWorld(this) )
      {
        v27 = std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 64));
        if ( Scene::getSceneType(v27) == SCENE_WORLD )
        {
          if ( *(_BYTE *)(((unsigned __int64)&this->level1_area_id_ >> 3) + 0x7FFF8000) != 0
            && *(_BYTE *)(((unsigned __int64)&this->level1_area_id_ >> 3) + 0x7FFF8000) <= 3 )
          {
            __asan_report_load4(&this->level1_area_id_);
          }
          level1_area_id = this->level1_area_id_;
          v30 = *(_BYTE *)(((unsigned __int64)&this->my_cur_area_id_ >> 3) + 0x7FFF8000);
          LOBYTE(p_level2_area_id) = v30 != 0;
          v31 = v30 != 0 && (char)((((_BYTE)this + 44) & 7) + 3) >= v30;
          if ( v31 )
            __asan_report_store4(&this->my_cur_area_id_, p_level2_area_id, v31);
          this->my_cur_area_id_ = level1_area_id;
        }
      }
      v7 = 0;
    }
    else
    {
      common::milog::MiLogStream::create(
        &v40,
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/scene/player_scene_comp.cpp",
        "enterArea",
        4054);
      v15 = common::milog::MiLogStream::operator<<<char [38],(char *[38])0>(
              &v40,
              (const char (*)[38])"findAreaCityId fails, level1_area_id:");
      common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v15, (const unsigned int *)(v3 + 32));
      common::milog::MiLogStream::~MiLogStream(&v40);
      v7 = -1;
    }
  }
  else
  {
    common::milog::MiLogStream::create(
      &v40,
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/scene/player_scene_comp.cpp",
      "enterArea",
      4048);
    v13 = common::milog::MiLogStream::operator<<<char [54],(char *[54])0>(
            &v40,
            (const char (*)[54])"findFirstLevelWorldAreaConfig failed, level1_area_id:");
    common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v13, (const unsigned int *)(v3 + 32));
    common::milog::MiLogStream::~MiLogStream(&v40);
    v7 = -1;
  }
LABEL_42:
  std::shared_ptr<Scene>::~shared_ptr((std::shared_ptr<Scene> *const)(v3 + 64));
  result = v7;
  if ( v41 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8008) = 0;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8008) = -168430091;
  }
  return result;
};

// Line 4075: range 0000000013E649C0-0000000013E6557D
void __cdecl PlayerSceneComp::checkUnexpectedPos(PlayerSceneComp *const this)
{
  unsigned __int64 v1; // r13
  __int64 v2; // rax
  _DWORD *v3; // r12
  std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v4; // rdx
  bool *p_is_check_unexpected_pos; // rax
  bool v6; // r14
  bool v7; // r14
  std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v8; // rax
  std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v9; // rax
  std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v10; // rax
  std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v11; // rax
  bool v12; // r14
  common::milog::MiLogStream *v13; // r14
  common::milog::MiLogStream *v14; // rax
  common::milog::MiLogStream *v15; // rax
  common::milog::MiLogStream *v16; // rax
  common::milog::MiLogStream *v17; // rax
  std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v18; // rax
  common::milog::MiLogStream *v19; // rax
  unsigned int v20; // eax
  std::__shared_ptr_access<data::SceneTransPoint,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v21; // rax
  std::__shared_ptr_access<data::SceneTransPoint,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v22; // rax
  std::__shared_ptr_access<data::SceneTransPoint,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v23; // rax
  std::__shared_ptr_access<data::SceneTransPoint,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v24; // rax
  std::__shared_ptr_access<data::SceneTransPoint,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v25; // rax
  PlayerSceneComp *SceneComp; // r14
  Scene *v27; // rax
  common::milog::MiLogStream *v28; // r14
  common::milog::MiLogStream *v29; // rax
  common::milog::MiLogStream *v30; // rax
  common::milog::MiLogStream *v31; // rax
  common::milog::MiLogStream *v32; // rax
  common::milog::MiLogStream *v33; // rax
  common::milog::MiLogStream *v34; // rax
  common::milog::MiLogStream *v35; // rax
  unsigned int val; // [rsp+18h] [rbp-1A8h] BYREF
  uint32_t point_type; // [rsp+1Ch] [rbp-1A4h]
  const Vector3 *pos; // [rsp+20h] [rbp-1A0h]
  const data::SceneExcelConfig *scene_config_ptr; // [rsp+28h] [rbp-198h]
  Vector3 v40; // [rsp+34h] [rbp-18Ch] BYREF
  std::shared_ptr<Scene> v41; // [rsp+40h] [rbp-180h] BYREF
  common::milog::MiLogStream v42; // [rsp+50h] [rbp-170h] BYREF
  TransferReason p_reason; // [rsp+70h] [rbp-150h] BYREF
  char v44[272]; // [rsp+B0h] [rbp-110h] BYREF

  v1 = (unsigned __int64)v44;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_2(224LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "7 32 4 13 scene_id:4105 48 4 13 point_id:4118 64 12 13 tran_pos:4122 96 12 13 tran_rot:4123 128 "
                        "16 14 scene_ptr:4080 160 16 15 avatar_ptr:4098 192 16 19 tran_point_ptr:4119";
  *(_QWORD *)(v1 + 16) = PlayerSceneComp::checkUnexpectedPos;
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234556924;
  v3[536862722] = -219020288;
  v3[536862723] = -219020288;
  v3[536862724] = -219021312;
  v3[536862725] = -219021312;
  v3[536862726] = -202178560;
  ServiceBox::findService<GameserverService>();
  GameserverService::getConfig((GameserverService *const)&v41);
  v4 = std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false> *const)&v41);
  p_is_check_unexpected_pos = &v4->is_check_unexpected_pos;
  if ( *(_BYTE *)(((unsigned __int64)p_is_check_unexpected_pos >> 3) + 0x7FFF8000) != 0
    && ((unsigned __int8)p_is_check_unexpected_pos & 7) >= *(_BYTE *)(((unsigned __int64)p_is_check_unexpected_pos >> 3)
                                                                    + 0x7FFF8000) )
  {
    __asan_report_load1(p_is_check_unexpected_pos);
  }
  v6 = !v4->is_check_unexpected_pos;
  std::shared_ptr<Config>::~shared_ptr((std::shared_ptr<Config> *const)&v41);
  if ( !v6 )
  {
    PlayerSceneComp::getCurScene((const PlayerSceneComp *const)(v1 + 128));
    if ( !std::operator==<Scene>((const std::shared_ptr<Scene> *)(v1 + 128), 0LL) )
    {
      if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
        __asan_report_load8();
      Player::getSceneComp(this->player_);
      PlayerSceneComp::getDestScene((const PlayerSceneComp *const)&v41);
      v7 = std::operator!=<Scene>(&v41, 0LL);
      std::shared_ptr<Scene>::~shared_ptr(&v41);
      if ( !v7 )
      {
        v8 = std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v1 + 128));
        if ( Scene::getSceneType(v8) == SCENE_WORLD )
        {
          if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
            __asan_report_load8();
          Player::getCurAvatar((Player *const)(v1 + 160));
          if ( !std::operator==<Avatar>((const std::shared_ptr<Avatar> *)(v1 + 160), 0LL) )
          {
            v9 = std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v1 + 160));
            pos = Entity::getPosition((const Entity *const)v9);
            v10 = std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v1 + 128));
            *(_DWORD *)(v1 + 32) = Scene::getSceneId(v10);
            ServiceBox::findService<GameserverService>();
            GameserverService::getConfig((GameserverService *const)&v41);
            v11 = std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false> *const)&v41);
            v12 = !JsonConfigMgr::isInSceneOpenArea(&v11->design_config.json_config_mgr, *(_DWORD *)(v1 + 32), pos);
            std::shared_ptr<Config>::~shared_ptr((std::shared_ptr<Config> *const)&v41);
            if ( v12 )
            {
              common::milog::MiLogStream::create(
                &v42,
                &common::milog::MiLogDefault::default_log_obj_,
                1u,
                "./src/scene/player_scene_comp.cpp",
                "checkUnexpectedPos",
                4110);
              v13 = common::milog::MiLogStream::operator<<<char [6],(char *[6])0>(&v42, (const char (*)[6])"uid: ");
              if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
                __asan_report_load8();
              val = Player::getUid(this->player_);
              v14 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v13, &val);
              v15 = common::milog::MiLogStream::operator<<<char [13],(char *[13])0>(
                      v14,
                      (const char (*)[13])" ,scene_id: ");
              v16 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                      v15,
                      (const unsigned int *)(v1 + 32));
              v17 = common::milog::MiLogStream::operator<<<char [13],(char *[13])0>(
                      v16,
                      (const char (*)[13])" ,position: ");
              operator<<(v17, pos);
              common::milog::MiLogStream::~MiLogStream(&v42);
              ServiceBox::findService<GameserverService>();
              GameserverService::getConfig((GameserverService *const)&v41);
              v18 = std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false> *const)&v41);
              scene_config_ptr = data::SceneExcelConfigMgrBase::findSceneExcelConfig(
                                   &v18->design_config.txt_config_mgr.scene_config_mgr,
                                   *(_DWORD *)(v1 + 32));
              std::shared_ptr<Config>::~shared_ptr((std::shared_ptr<Config> *const)&v41);
              if ( scene_config_ptr )
              {
                if ( *(_BYTE *)(((unsigned __int64)&scene_config_ptr->safe_point >> 3) + 0x7FFF8000) != 0
                  && *(_BYTE *)(((unsigned __int64)&scene_config_ptr->safe_point >> 3) + 0x7FFF8000) <= 3 )
                {
                  __asan_report_load4(&scene_config_ptr->safe_point);
                }
                *(_DWORD *)(v1 + 48) = scene_config_ptr->safe_point;
                ServiceBox::findService<GameserverService>();
                GameserverService::getConfig((GameserverService *const)&v41);
                v20 = (unsigned int)std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false> *const)&v41);
                JsonConfigMgr::findScenePoint<data::SceneTransPoint>(
                  (const JsonConfigMgr *const)(v1 + 192),
                  v20 + 93080,
                  *(_DWORD *)(v1 + 32));
                std::shared_ptr<Config>::~shared_ptr((std::shared_ptr<Config> *const)&v41);
                if ( std::operator!=<data::SceneTransPoint>(
                       (const std::shared_ptr<data::SceneTransPoint> *)(v1 + 192),
                       0LL) )
                {
                  v21 = std::__shared_ptr_access<data::SceneTransPoint,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<data::SceneTransPoint,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v1 + 192));
                  Vector3::Vector3((Vector3 *const)(v1 + 64), &v21->tran_pos);
                  v22 = std::__shared_ptr_access<data::SceneTransPoint,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<data::SceneTransPoint,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v1 + 192));
                  Vector3::Vector3((Vector3 *const)(v1 + 96), &v22->tran_rot);
                  if ( Vector3::isZero((const Vector3 *const)(v1 + 64)) )
                  {
                    v23 = std::__shared_ptr_access<data::SceneTransPoint,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<data::SceneTransPoint,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v1 + 192));
                    Vector3::Vector3(&v40, &v23->pos);
                    *(Vector3 *)(v1 + 64) = v40;
                    v24 = std::__shared_ptr_access<data::SceneTransPoint,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<data::SceneTransPoint,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v1 + 192));
                    Vector3::Vector3(&v40, &v24->rot);
                    *(Vector3 *)(v1 + 96) = v40;
                  }
                  v25 = std::__shared_ptr_access<data::SceneTransPoint,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<data::SceneTransPoint,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v1 + 192));
                  if ( *(_BYTE *)(((unsigned __int64)&v25->type >> 3) + 0x7FFF8000) != 0
                    && *(_BYTE *)(((unsigned __int64)&v25->type >> 3) + 0x7FFF8000) <= 3 )
                  {
                    v25 = (std::__shared_ptr_access<data::SceneTransPoint,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *)__asan_report_load4(&v25->type);
                  }
                  point_type = v25->type;
                  if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
                    __asan_report_load8();
                  SceneComp = Player::getSceneComp(this->player_);
                  TransferReason::TransferReason(&p_reason, ENTER_REASON_GM);
                  v27 = std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::operator*((const std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v1 + 128));
                  LOBYTE(SceneComp) = PlayerSceneComp::jumpToScene(
                                        SceneComp,
                                        v27,
                                        (const Vector3 *)(v1 + 64),
                                        (const Vector3 *)(v1 + 96),
                                        point_type,
                                        &p_reason) == 0;
                  TransferReason::~TransferReason(&p_reason);
                  if ( (_BYTE)SceneComp )
                  {
                    common::milog::MiLogStream::create(
                      &v42,
                      &common::milog::MiLogDefault::default_log_obj_,
                      2u,
                      "./src/scene/player_scene_comp.cpp",
                      "checkUnexpectedPos",
                      4132);
                    v28 = common::milog::MiLogStream::operator<<<char [35],(char *[35])0>(
                            &v42,
                            (const char (*)[35])"jumpToScene by code GM succ, uid: ");
                    if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
                      __asan_report_load8();
                  }
                  else
                  {
                    common::milog::MiLogStream::create(
                      &v42,
                      &common::milog::MiLogDefault::default_log_obj_,
                      4u,
                      "./src/scene/player_scene_comp.cpp",
                      "checkUnexpectedPos",
                      4136);
                    v28 = common::milog::MiLogStream::operator<<<char [36],(char *[36])0>(
                            &v42,
                            (const char (*)[36])"jumpToScene by code GM fails, uid: ");
                    if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
                      __asan_report_load8();
                  }
                  val = Player::getUid(this->player_);
                  v29 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v28, &val);
                  v30 = common::milog::MiLogStream::operator<<<char [13],(char *[13])0>(
                          v29,
                          (const char (*)[13])" ,scene_id: ");
                  v31 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                          v30,
                          (const unsigned int *)(v1 + 32));
                  v32 = common::milog::MiLogStream::operator<<<char [13],(char *[13])0>(
                          v31,
                          (const char (*)[13])" ,point_id: ");
                  common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                    v32,
                    (const unsigned int *)(v1 + 48));
                  common::milog::MiLogStream::~MiLogStream(&v42);
                }
                else
                {
                  common::milog::MiLogStream::create(
                    &v42,
                    &common::milog::MiLogDefault::default_log_obj_,
                    4u,
                    "./src/scene/player_scene_comp.cpp",
                    "checkUnexpectedPos",
                    4141);
                  v33 = common::milog::MiLogStream::operator<<<char [51],(char *[51])0>(
                          &v42,
                          (const char (*)[51])"findScenePoint<SceneTransPoint> failed, scene_id: ");
                  v34 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                          v33,
                          (const unsigned int *)(v1 + 32));
                  v35 = common::milog::MiLogStream::operator<<<char [13],(char *[13])0>(
                          v34,
                          (const char (*)[13])" ,point_id: ");
                  common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                    v35,
                    (const unsigned int *)(v1 + 48));
                  common::milog::MiLogStream::~MiLogStream(&v42);
                }
                std::shared_ptr<data::SceneTransPoint>::~shared_ptr((std::shared_ptr<data::SceneTransPoint> *const)(v1 + 192));
              }
              else
              {
                common::milog::MiLogStream::create(
                  &v42,
                  &common::milog::MiLogDefault::default_log_obj_,
                  3u,
                  "./src/scene/player_scene_comp.cpp",
                  "checkUnexpectedPos",
                  4114);
                v19 = common::milog::MiLogStream::operator<<<char [39],(char *[39])0>(
                        &v42,
                        (const char (*)[39])"findSceneExcelConfig failed, scene_id:");
                common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                  v19,
                  (const unsigned int *)(v1 + 32));
                common::milog::MiLogStream::~MiLogStream(&v42);
              }
            }
          }
          std::shared_ptr<Avatar>::~shared_ptr((std::shared_ptr<Avatar> *const)(v1 + 160));
        }
      }
    }
    std::shared_ptr<Scene>::~shared_ptr((std::shared_ptr<Scene> *const)(v1 + 128));
  }
  if ( v44 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8010) = 0LL;
    *(_DWORD *)((v1 >> 3) + 0x7FFF8018) = 0;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v1 >> 3) + 0x7FFF8018) = -168430091;
  }
};

// Line 4148: range 0000000013E6557E-0000000013E65970
__int64 __fastcall PlayerSceneComp::refreshAndGetBossChestTakeNum(
        PlayerSceneComp *const this,
        uint32_t scene_id,
        uint32_t group_id,
        uint32_t config_id)
{
  unsigned __int64 v4; // r13
  __int64 v5; // rax
  _DWORD *v6; // r12
  __int64 result; // rax
  std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v8; // rax
  google::protobuf::uint32 v9; // eax
  google::protobuf::Map<unsigned int,proto::GroupBossChestBin>::iterator::pointer v10; // rax
  google::protobuf::Map<unsigned int,unsigned int>::iterator::pointer v11; // rdx
  unsigned int *p_second; // rax
  uint32_t now; // [rsp+28h] [rbp-188h]
  uint32_t time_offset; // [rsp+2Ch] [rbp-184h]
  std::__detail::_Node_iterator_base<std::pair<unsigned int const,proto::SceneBossChestBin>,false> __y; // [rsp+30h] [rbp-180h] BYREF
  proto::SceneBossChestBin *scene_bin; // [rsp+38h] [rbp-178h]
  google::protobuf::Map<unsigned int,proto::GroupBossChestBin> *group_bin_map; // [rsp+40h] [rbp-170h]
  google::protobuf::Map<unsigned int,unsigned int> *boss_chest_map; // [rsp+48h] [rbp-168h]
  std::shared_ptr<Config> v21; // [rsp+50h] [rbp-160h] BYREF
  google::protobuf::Map<unsigned int,proto::GroupBossChestBin>::iterator b; // [rsp+60h] [rbp-150h] BYREF
  char v23[304]; // [rsp+80h] [rbp-130h] BYREF

  v4 = (unsigned __int64)v23;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v5 = __asan_stack_malloc_2(256LL);
    if ( v5 )
      v4 = v5;
  }
  *(_QWORD *)v4 = 1102416563LL;
  *(_QWORD *)(v4 + 8) = "6 48 4 13 scene_id:4147 64 4 13 group_id:4147 80 4 14 config_id:4147 96 8 15 scene_iter:4149 128"
                        " 24 15 group_iter:4165 192 24 9 iter:4171";
  *(_QWORD *)(v4 + 16) = PlayerSceneComp::refreshAndGetBossChestTakeNum;
  v6 = (_DWORD *)(v4 >> 3);
  v6[536862720] = -235802127;
  v6[536862721] = -234556943;
  v6[536862722] = -234556924;
  v6[536862723] = -218959360;
  v6[536862724] = -234881024;
  v6[536862725] = -218959118;
  v6[536862726] = -218103808;
  v6[536862727] = -202116109;
  *(_DWORD *)(v4 + 48) = scene_id;
  *(_DWORD *)(v4 + 64) = group_id;
  *(_DWORD *)(v4 + 80) = config_id;
  *(std::unordered_map<unsigned int,proto::SceneBossChestBin>::iterator *)(v4 + 96) = std::unordered_map<unsigned int,proto::SceneBossChestBin>::find(
                                                                                        &this->scene_boss_chest_map_,
                                                                                        (const std::unordered_map<unsigned int,proto::SceneBossChestBin>::key_type *)(v4 + 48));
  __y._M_cur = std::unordered_map<unsigned int,proto::SceneBossChestBin>::end(&this->scene_boss_chest_map_)._M_cur;
  if ( std::__detail::operator==<std::pair<unsigned int const,proto::SceneBossChestBin>,false>(
         (const std::__detail::_Node_iterator_base<std::pair<unsigned int const,proto::SceneBossChestBin>,false> *)(v4 + 96),
         &__y) )
  {
    result = 0LL;
  }
  else
  {
    scene_bin = &std::__detail::_Node_iterator<std::pair<unsigned int const,proto::SceneBossChestBin>,false,false>::operator->((const std::__detail::_Node_iterator<std::pair<unsigned int const,proto::SceneBossChestBin>,false,false> *const)(v4 + 96))->second;
    now = common::tools::TimeUtils::getNow();
    ServiceBox::findService<GameserverService>();
    GameserverService::getConfig((GameserverService *const)&v21);
    v8 = std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false> *const)&v21);
    time_offset = ConstValueExcelConfigMgr::getTimeOffsetSec(&v8->design_config.txt_config_mgr.const_value_config_mgr);
    std::shared_ptr<Config>::~shared_ptr(&v21);
    v9 = proto::SceneBossChestBin::take_time(scene_bin);
    if ( !common::tools::TimeUtils::isSameWeek(v9, now, time_offset) )
    {
      proto::SceneBossChestBin::clear_group_boss_chest_map(scene_bin);
      result = 0LL;
    }
    else
    {
      group_bin_map = proto::SceneBossChestBin::mutable_group_boss_chest_map(scene_bin);
      google::protobuf::Map<unsigned int,proto::GroupBossChestBin>::find(
        (google::protobuf::Map<unsigned int,proto::GroupBossChestBin>::iterator *)(v4 + 128),
        group_bin_map,
        (const google::protobuf::Map<unsigned int,proto::GroupBossChestBin>::key_type *)(v4 + 64));
      google::protobuf::Map<unsigned int,proto::GroupBossChestBin>::end(&b, group_bin_map);
      if ( google::protobuf::operator==(
             (const google::protobuf::Map<unsigned int,proto::GroupBossChestBin>::iterator *)(v4 + 128),
             &b) )
      {
        result = 0LL;
      }
      else
      {
        v10 = google::protobuf::Map<unsigned int,proto::GroupBossChestBin>::iterator::operator->((const google::protobuf::Map<unsigned int,proto::GroupBossChestBin>::iterator *const)(v4 + 128));
        boss_chest_map = proto::GroupBossChestBin::mutable_boss_chest_map(&v10->second);
        google::protobuf::Map<unsigned int,unsigned int>::find(
          (google::protobuf::Map<unsigned int,unsigned int>::iterator *)(v4 + 192),
          boss_chest_map,
          (const google::protobuf::Map<unsigned int,unsigned int>::key_type *)(v4 + 80));
        google::protobuf::Map<unsigned int,unsigned int>::end(
          (google::protobuf::Map<unsigned int,unsigned int>::iterator *)&b,
          boss_chest_map);
        if ( google::protobuf::operator==(
               (const google::protobuf::Map<unsigned int,unsigned int>::iterator *)(v4 + 192),
               (const google::protobuf::Map<unsigned int,unsigned int>::iterator *)&b) )
        {
          result = 0LL;
        }
        else
        {
          v11 = google::protobuf::Map<unsigned int,unsigned int>::iterator::operator->((const google::protobuf::Map<unsigned int,unsigned int>::iterator *const)(v4 + 192));
          p_second = &v11->second;
          if ( *(_BYTE *)(((unsigned __int64)p_second >> 3) + 0x7FFF8000) != 0
            && (char)(((unsigned __int8)p_second & 7) + 3) >= *(_BYTE *)(((unsigned __int64)p_second >> 3) + 0x7FFF8000) )
          {
            __asan_report_load4(p_second);
          }
          result = v11->second;
        }
      }
    }
  }
  if ( v23 == (char *)v4 )
  {
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8008) = 0LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8010) = 0LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8018) = 0LL;
  }
  else
  {
    *(_QWORD *)v4 = 1172321806LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 4180: range 0000000013E65972-0000000013E65CAA
void __fastcall PlayerSceneComp::addBossChestTakeNum(
        PlayerSceneComp *const this,
        uint32_t scene_id,
        uint32_t group_id,
        uint32_t config_id)
{
  unsigned __int64 v4; // rbx
  __int64 v5; // rax
  _DWORD *v6; // r13
  google::protobuf::uint32 Now; // eax
  char *v8; // rsi
  unsigned int *v9; // rax
  _DWORD *v10; // rdx
  char v11; // cl
  PlayerEventComp *EventComp; // r12
  uint32_t old_take_num; // [rsp+2Ch] [rbp-D4h]
  std::unordered_map<unsigned int,proto::SceneBossChestBin>::mapped_type *scene_bin; // [rsp+30h] [rbp-D0h]
  google::protobuf::Map<unsigned int,proto::GroupBossChestBin> *group_bin_map; // [rsp+38h] [rbp-C8h]
  proto::GroupBossChestBin *group_bin; // [rsp+40h] [rbp-C0h]
  google::protobuf::Map<unsigned int,unsigned int> *boss_chest_map; // [rsp+48h] [rbp-B8h]
  std::shared_ptr<BossChestTakeEvent> __r; // [rsp+50h] [rbp-B0h] BYREF
  std::shared_ptr<BaseEvent> p_event_ptr; // [rsp+60h] [rbp-A0h] BYREF
  char v22[144]; // [rsp+70h] [rbp-90h] BYREF

  v4 = (unsigned __int64)v22;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v5 = __asan_stack_malloc_1(96LL);
    if ( v5 )
      v4 = v5;
  }
  *(_QWORD *)v4 = 1102416563LL;
  *(_QWORD *)(v4 + 8) = "3 32 4 13 scene_id:4179 48 4 13 group_id:4179 64 4 14 config_id:4179";
  *(_QWORD *)(v4 + 16) = PlayerSceneComp::addBossChestTakeNum;
  v6 = (_DWORD *)(v4 >> 3);
  v6[536862720] = -235802127;
  v6[536862721] = -234556924;
  v6[536862722] = -202116348;
  *(_DWORD *)(v4 + 32) = scene_id;
  *(_DWORD *)(v4 + 48) = group_id;
  *(_DWORD *)(v4 + 64) = config_id;
  old_take_num = PlayerSceneComp::refreshAndGetBossChestTakeNum(
                   this,
                   *(_DWORD *)(v4 + 32),
                   *(_DWORD *)(v4 + 48),
                   *(_DWORD *)(v4 + 64));
  scene_bin = std::unordered_map<unsigned int,proto::SceneBossChestBin>::operator[](
                &this->scene_boss_chest_map_,
                (const std::unordered_map<unsigned int,proto::SceneBossChestBin>::key_type *)(v4 + 32));
  Now = common::tools::TimeUtils::getNow();
  proto::SceneBossChestBin::set_take_time(scene_bin, Now);
  group_bin_map = proto::SceneBossChestBin::mutable_group_boss_chest_map(scene_bin);
  group_bin = google::protobuf::Map<unsigned int,proto::GroupBossChestBin>::operator[](
                group_bin_map,
                (const google::protobuf::Map<unsigned int,proto::GroupBossChestBin>::key_type *)(v4 + 48));
  boss_chest_map = proto::GroupBossChestBin::mutable_boss_chest_map(group_bin);
  v8 = (char *)(v4 + 64);
  v9 = google::protobuf::Map<unsigned int,unsigned int>::operator[](
         boss_chest_map,
         (const google::protobuf::Map<unsigned int,unsigned int>::key_type *)(v4 + 64));
  v10 = v9;
  v11 = *(_BYTE *)(((unsigned __int64)v9 >> 3) + 0x7FFF8000);
  if ( v11 != 0 && (char)(((unsigned __int8)v9 & 7) + 3) >= v11 )
  {
    LOBYTE(v8) = v11 != 0;
    __asan_report_store4(v9, v8, (_BYTE)v9);
  }
  *v10 = old_take_num + 1;
  if ( *(_BYTE *)(((unsigned __int64)&this->total_boss_chest_take_num_ >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->total_boss_chest_take_num_ >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4(&this->total_boss_chest_take_num_);
  }
  ++this->total_boss_chest_take_num_;
  if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
    __asan_report_load8();
  EventComp = Player::getEventComp(this->player_);
  common::tools::perf::make_shared<BossChestTakeEvent>();
  std::shared_ptr<BaseEvent>::shared_ptr<BossChestTakeEvent,void>(&p_event_ptr, &__r);
  PlayerEventComp::notifyEvent(EventComp, &p_event_ptr);
  std::shared_ptr<BaseEvent>::~shared_ptr(&p_event_ptr);
  std::shared_ptr<BossChestTakeEvent>::~shared_ptr(&__r);
  if ( v22 == (char *)v4 )
  {
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0LL;
    *(_DWORD *)((v4 >> 3) + 0x7FFF8008) = 0;
  }
  else
  {
    *(_QWORD *)v4 = 1172321806LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v4 >> 3) + 0x7FFF8008) = -168430091;
  }
};

// Line 4196: range 0000000013E65CAC-0000000013E65D3A
void __cdecl PlayerSceneComp::clearBossChestByGm(PlayerSceneComp *const this)
{
  common::milog::MiLogStream v1; // [rsp+10h] [rbp-30h] BYREF

  common::milog::MiLogStream::create(
    &v1,
    &common::milog::MiLogDefault::default_log_obj_,
    1u,
    "./src/scene/player_scene_comp.cpp",
    aClearbosschest[0],
    4197);
  common::milog::MiLogStream::operator<<<char [19],(char *[19])0>(&v1, "clearBossChestByGm");
  common::milog::MiLogStream::~MiLogStream(&v1);
  std::unordered_map<unsigned int,proto::SceneBossChestBin>::clear(&this->scene_boss_chest_map_);
};

// Line 4203: range 0000000013E65D3C-0000000013E66078
__int64 __fastcall PlayerSceneComp::refreshAndGetSubfieldDropNum(
        PlayerSceneComp *const this,
        uint32_t entity_type,
        uint32_t config_id)
{
  unsigned __int64 v3; // r13
  __int64 v4; // rax
  _DWORD *v5; // r12
  std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v6; // rax
  time_t v7; // rdx
  time_t v8; // rcx
  __int64 result; // rax
  std::__detail::_Node_iterator<std::pair<unsigned int const,proto::SubfieldDropBin>,false,false>::pointer v10; // rax
  google::protobuf::Map<unsigned int,unsigned int>::iterator::pointer v11; // rdx
  unsigned int *p_second; // rax
  uint32_t now; // [rsp+18h] [rbp-108h]
  uint32_t time_offset; // [rsp+1Ch] [rbp-104h]
  std::__detail::_Node_iterator_base<std::pair<unsigned int const,proto::SubfieldDropBin>,false> __y; // [rsp+20h] [rbp-100h] BYREF
  google::protobuf::Map<unsigned int,unsigned int> *drop_num_map; // [rsp+28h] [rbp-F8h]
  std::shared_ptr<Config> v18; // [rsp+30h] [rbp-F0h] BYREF
  google::protobuf::Map<unsigned int,unsigned int>::iterator b; // [rsp+40h] [rbp-E0h] BYREF
  char v20[192]; // [rsp+60h] [rbp-C0h] BYREF

  v3 = (unsigned __int64)v20;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_2(160LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "4 32 4 16 entity_type:4202 48 4 14 config_id:4202 64 8 9 iter:4211 96 24 16 config_iter:4217";
  *(_QWORD *)(v3 + 16) = PlayerSceneComp::refreshAndGetSubfieldDropNum;
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = -234556924;
  v5[536862722] = -218959360;
  v5[536862723] = -218103808;
  v5[536862724] = -202116109;
  *(_DWORD *)(v3 + 32) = entity_type;
  *(_DWORD *)(v3 + 48) = config_id;
  now = common::tools::TimeUtils::getNow();
  ServiceBox::findService<GameserverService>();
  GameserverService::getConfig((GameserverService *const)&v18);
  v6 = std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false> *const)&v18);
  time_offset = ConstValueExcelConfigMgr::getTimeOffsetSec(&v6->design_config.txt_config_mgr.const_value_config_mgr);
  std::shared_ptr<Config>::~shared_ptr(&v18);
  v7 = time_offset;
  v8 = now;
  if ( *(_BYTE *)(((unsigned __int64)&this->subfield_drop_time_ >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->subfield_drop_time_ >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4(&this->subfield_drop_time_);
  }
  if ( !common::tools::TimeUtils::isSameDay(this->subfield_drop_time_, v8, v7) )
  {
    std::unordered_map<unsigned int,proto::SubfieldDropBin>::clear(&this->subfield_drop_map_);
    result = 0LL;
  }
  else
  {
    *(std::unordered_map<unsigned int,proto::SubfieldDropBin>::iterator *)(v3 + 64) = std::unordered_map<unsigned int,proto::SubfieldDropBin>::find(
                                                                                        &this->subfield_drop_map_,
                                                                                        (const std::unordered_map<unsigned int,proto::SubfieldDropBin>::key_type *)(v3 + 32));
    __y._M_cur = std::unordered_map<unsigned int,proto::SubfieldDropBin>::end(&this->subfield_drop_map_)._M_cur;
    if ( std::__detail::operator==<std::pair<unsigned int const,proto::SubfieldDropBin>,false>(
           (const std::__detail::_Node_iterator_base<std::pair<unsigned int const,proto::SubfieldDropBin>,false> *)(v3 + 64),
           &__y) )
    {
      result = 0LL;
    }
    else
    {
      v10 = std::__detail::_Node_iterator<std::pair<unsigned int const,proto::SubfieldDropBin>,false,false>::operator->((const std::__detail::_Node_iterator<std::pair<unsigned int const,proto::SubfieldDropBin>,false,false> *const)(v3 + 64));
      drop_num_map = proto::SubfieldDropBin::mutable_drop_num_map(&v10->second);
      google::protobuf::Map<unsigned int,unsigned int>::find(
        (google::protobuf::Map<unsigned int,unsigned int>::iterator *)(v3 + 96),
        drop_num_map,
        (const google::protobuf::Map<unsigned int,unsigned int>::key_type *)(v3 + 48));
      google::protobuf::Map<unsigned int,unsigned int>::end(&b, drop_num_map);
      if ( google::protobuf::operator==(
             (const google::protobuf::Map<unsigned int,unsigned int>::iterator *)(v3 + 96),
             &b) )
      {
        result = 0LL;
      }
      else
      {
        v11 = google::protobuf::Map<unsigned int,unsigned int>::iterator::operator->((const google::protobuf::Map<unsigned int,unsigned int>::iterator *const)(v3 + 96));
        p_second = &v11->second;
        if ( *(_BYTE *)(((unsigned __int64)p_second >> 3) + 0x7FFF8000) != 0
          && (char)(((unsigned __int8)p_second & 7) + 3) >= *(_BYTE *)(((unsigned __int64)p_second >> 3) + 0x7FFF8000) )
        {
          __asan_report_load4(p_second);
        }
        result = v11->second;
      }
    }
  }
  if ( v20 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8010) = 0;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8010) = -168430091;
  }
  return result;
};

// Line 4226: range 0000000013E6607A-0000000013E66284
void __fastcall PlayerSceneComp::addSubfieldDropNum(
        PlayerSceneComp *const this,
        uint32_t entity_type,
        uint32_t config_id)
{
  unsigned __int64 v3; // rbx
  __int64 v4; // rax
  _DWORD *v5; // r12
  char *v6; // rsi
  unsigned int *v7; // rax
  _DWORD *v8; // rdx
  char v9; // cl
  __int64 Now; // rsi
  uint32_t drop_num; // [rsp+1Ch] [rbp-A4h]
  std::unordered_map<unsigned int,proto::SubfieldDropBin>::mapped_type *subfield_drop_bin; // [rsp+20h] [rbp-A0h]
  google::protobuf::Map<unsigned int,unsigned int> *drop_num_map; // [rsp+28h] [rbp-98h]
  char v15[144]; // [rsp+30h] [rbp-90h] BYREF

  v3 = (unsigned __int64)v15;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_1(96LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "2 48 4 16 entity_type:4225 64 4 14 config_id:4225";
  *(_QWORD *)(v3 + 16) = PlayerSceneComp::addSubfieldDropNum;
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = -234556943;
  v5[536862722] = -202116348;
  *(_DWORD *)(v3 + 48) = entity_type;
  *(_DWORD *)(v3 + 64) = config_id;
  drop_num = PlayerSceneComp::refreshAndGetSubfieldDropNum(this, *(_DWORD *)(v3 + 48), *(_DWORD *)(v3 + 64));
  subfield_drop_bin = std::unordered_map<unsigned int,proto::SubfieldDropBin>::operator[](
                        &this->subfield_drop_map_,
                        (const std::unordered_map<unsigned int,proto::SubfieldDropBin>::key_type *)(v3 + 48));
  drop_num_map = proto::SubfieldDropBin::mutable_drop_num_map(subfield_drop_bin);
  v6 = (char *)(v3 + 64);
  v7 = google::protobuf::Map<unsigned int,unsigned int>::operator[](
         drop_num_map,
         (const google::protobuf::Map<unsigned int,unsigned int>::key_type *)(v3 + 64));
  v8 = v7;
  v9 = *(_BYTE *)(((unsigned __int64)v7 >> 3) + 0x7FFF8000);
  if ( v9 != 0 && (char)(((unsigned __int8)v7 & 7) + 3) >= v9 )
  {
    LOBYTE(v6) = v9 != 0;
    __asan_report_store4(v7, v6, (_BYTE)v7);
  }
  *v8 = drop_num + 1;
  Now = (unsigned int)common::tools::TimeUtils::getNow();
  if ( *(_BYTE *)(((unsigned __int64)&this->subfield_drop_time_ >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->subfield_drop_time_ >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_store4(&this->subfield_drop_time_, Now, (_BYTE)this - 56);
  }
  this->subfield_drop_time_ = Now;
  if ( v15 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8008) = 0;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8008) = -168430091;
  }
};

// Line 4236: range 0000000013E66286-0000000013E663F5
void __cdecl PlayerSceneComp::playerLeaveScene(PlayerSceneComp *const this)
{
  __int64 v1; // rsi
  bool v2; // dl
  bool v3; // dl
  std::shared_ptr<Scene> p_scene_ptr; // [rsp+10h] [rbp-20h] BYREF

  if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
    __asan_report_load8();
  Player::onLeaveScene(this->player_);
  std::shared_ptr<Scene>::shared_ptr(&p_scene_ptr, 0LL);
  PlayerSceneComp::setCurScene(this, &p_scene_ptr);
  std::shared_ptr<Scene>::~shared_ptr(&p_scene_ptr);
  v1 = (((_BYTE)this - 124) & 7u) + 3;
  v2 = *(_BYTE *)(((unsigned __int64)&this->city_id_ >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)this - 124) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&this->city_id_ >> 3) + 0x7FFF8000);
  if ( v2 )
    __asan_report_store4(&this->city_id_, v1, v2);
  this->city_id_ = 0;
  if ( *(_BYTE *)(((unsigned __int64)&this->level1_area_id_ >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->level1_area_id_ >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_store4(&this->level1_area_id_, v1, (_BYTE)this - 120);
  }
  this->level1_area_id_ = 0;
  v3 = *(_BYTE *)(((unsigned __int64)&this->level2_area_id_ >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)this - 116) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&this->level2_area_id_ >> 3) + 0x7FFF8000);
  if ( v3 )
    __asan_report_store4(&this->level2_area_id_, (((_BYTE)this - 116) & 7u) + 3, v3);
  this->level2_area_id_ = 0;
};

// Line 4246: range 0000000013E663F6-0000000013E6665B
void __cdecl PlayerSceneComp::updateCurrentWeatherArea(PlayerSceneComp *const this, WeatherAreaPtr *p_weather_area_ptr)
{
  unsigned __int64 v2; // rbx
  __int64 v3; // rax
  unsigned __int64 v4; // r13
  WeatherArea *v5; // rcx
  WeatherArea *v6; // rcx
  Player *player; // rsi
  std::__shared_ptr_access<WeatherArea,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v8; // rax
  uint32_t WeatherAreaId; // edx
  char v10; // al
  char v12[112]; // [rsp+10h] [rbp-70h] BYREF

  v2 = (unsigned __int64)v12;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_0(64LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "1 32 16 26 prev_weather_area_ptr:4247";
  *(_QWORD *)(v2 + 16) = PlayerSceneComp::updateCurrentWeatherArea;
  v4 = v2 >> 3;
  *(_DWORD *)(v4 + 2147450880) = -235802127;
  *(_DWORD *)(v4 + 2147450884) = -202178560;
  std::weak_ptr<WeatherArea>::lock((const std::weak_ptr<WeatherArea> *const)(v2 + 32));
  if ( !std::operator==<WeatherArea,WeatherArea>((const std::shared_ptr<WeatherArea> *)(v2 + 32), p_weather_area_ptr) )
  {
    if ( std::operator!=<WeatherArea>(0LL, (const std::shared_ptr<WeatherArea> *)(v2 + 32)) )
    {
      v5 = std::__shared_ptr_access<WeatherArea,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<WeatherArea,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 32));
      if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
        __asan_report_load8();
      WeatherArea::leaveWeatherArea(v5, this->player_);
    }
    if ( std::operator!=<WeatherArea>(0LL, p_weather_area_ptr) )
    {
      v6 = std::__shared_ptr_access<WeatherArea,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<WeatherArea,(__gnu_cxx::_Lock_policy)2,false,false> *const)p_weather_area_ptr);
      if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
        __asan_report_load8();
      player = this->player_;
      WeatherArea::enterWeatherArea(v6, player);
      v8 = std::__shared_ptr_access<WeatherArea,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<WeatherArea,(__gnu_cxx::_Lock_policy)2,false,false> *const)p_weather_area_ptr);
      WeatherAreaId = WeatherArea::getWeatherAreaId(v8);
      v10 = *(_BYTE *)(((unsigned __int64)&this->prev_weather_area_id_ >> 3) + 0x7FFF8000);
      if ( v10 != 0 && v10 <= 3 )
      {
        LOBYTE(player) = v10 != 0;
        __asan_report_store4(&this->prev_weather_area_id_, player, WeatherAreaId);
      }
      this->prev_weather_area_id_ = WeatherAreaId;
    }
    std::weak_ptr<WeatherArea>::operator=<WeatherArea>(&this->weather_area_wtr_, p_weather_area_ptr);
    PlayerSceneComp::notifyCurrentWeather(this);
  }
  std::shared_ptr<WeatherArea>::~shared_ptr((std::shared_ptr<WeatherArea> *const)(v2 + 32));
  if ( v12 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
  }
};

// Line 4267: range 0000000013E6665C-0000000013E66867
void __cdecl PlayerSceneComp::notifyCurrentWeather(PlayerSceneComp *const this)
{
  unsigned __int64 v1; // r12
  __int64 v2; // rax
  _DWORD *v3; // r13
  std::__shared_ptr_access<WeatherArea,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v4; // r14
  proto::SceneAreaWeatherNotify *v5; // rax
  Player *player; // r14
  std::shared_ptr<proto::SceneAreaWeatherNotify> __r; // [rsp+10h] [rbp-A0h] BYREF
  char v8[144]; // [rsp+20h] [rbp-90h] BYREF

  v1 = (unsigned __int64)v8;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_1(96LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "2 32 16 15 notify_ptr:4268 64 16 21 weather_area_ptr:4269";
  *(_QWORD *)(v1 + 16) = PlayerSceneComp::notifyCurrentWeather;
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -219021312;
  v3[536862722] = -202178560;
  common::tools::perf::make_shared<proto::SceneAreaWeatherNotify>();
  PlayerSceneComp::getWeatherArea((const PlayerSceneComp *const)(v1 + 64));
  if ( std::operator!=<WeatherArea>((const std::shared_ptr<WeatherArea> *)(v1 + 64), 0LL) )
  {
    v4 = std::__shared_ptr_access<WeatherArea,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<WeatherArea,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v1 + 64));
    v5 = std::__shared_ptr_access<proto::SceneAreaWeatherNotify,(__gnu_cxx::_Lock_policy)2,false,false>::operator*((const std::__shared_ptr_access<proto::SceneAreaWeatherNotify,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v1 + 32));
    WeatherArea::toClient(v4, v5);
  }
  if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
    __asan_report_load8();
  player = this->player_;
  std::dynamic_pointer_cast<google::protobuf::Message const,proto::SceneAreaWeatherNotify>(&__r);
  Player::sendMessage(player, (common::minet::ConstMessagePtr *)&__r, 0LL);
  std::shared_ptr<google::protobuf::Message const>::~shared_ptr((std::shared_ptr<const google::protobuf::Message> *const)&__r);
  std::shared_ptr<WeatherArea>::~shared_ptr((std::shared_ptr<WeatherArea> *const)(v1 + 64));
  std::shared_ptr<proto::SceneAreaWeatherNotify>::~shared_ptr((std::shared_ptr<proto::SceneAreaWeatherNotify> *const)(v1 + 32));
  if ( v8 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_DWORD *)((v1 >> 3) + 0x7FFF8008) = 0;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v1 >> 3) + 0x7FFF8008) = -168430091;
  }
};

// Line 4279: range 0000000013E66868-0000000013E66993
uint32_t __cdecl PlayerSceneComp::getCurrentWeatherType(PlayerSceneComp *const this)
{
  unsigned __int64 v1; // rbx
  __int64 v2; // rax
  unsigned __int64 v3; // r12
  uint32_t CurClimateType; // r14d
  std::__shared_ptr_access<WeatherArea,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v5; // rax
  uint32_t result; // eax
  char v7[112]; // [rsp+10h] [rbp-70h] BYREF

  v1 = (unsigned __int64)v7;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_0(64LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "1 32 16 21 weather_area_ptr:4280";
  *(_QWORD *)(v1 + 16) = PlayerSceneComp::getCurrentWeatherType;
  v3 = v1 >> 3;
  *(_DWORD *)(v3 + 2147450880) = -235802127;
  *(_DWORD *)(v3 + 2147450884) = -202178560;
  PlayerSceneComp::getWeatherArea((const PlayerSceneComp *const)(v1 + 32));
  if ( std::operator==<WeatherArea>((const std::shared_ptr<WeatherArea> *)(v1 + 32), 0LL) )
  {
    CurClimateType = 0;
  }
  else
  {
    v5 = std::__shared_ptr_access<WeatherArea,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<WeatherArea,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v1 + 32));
    CurClimateType = WeatherArea::getCurClimateType(v5);
  }
  std::shared_ptr<WeatherArea>::~shared_ptr((std::shared_ptr<WeatherArea> *const)(v1 + 32));
  result = CurClimateType;
  if ( v7 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 4291: range 0000000013E66994-0000000013E66AD0
int32_t __cdecl PlayerSceneComp::setCurrentWeatherTypeByGm(
        PlayerSceneComp *const this,
        uint32_t climate_type,
        uint32_t extra_count)
{
  unsigned __int64 v3; // rbx
  __int64 v4; // rax
  unsigned __int64 v5; // r12
  int32_t v6; // r14d
  WeatherArea *v7; // rax
  int32_t result; // eax
  char v10[112]; // [rsp+10h] [rbp-70h] BYREF

  v3 = (unsigned __int64)v10;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_0(64LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "1 32 16 21 weather_area_ptr:4292";
  *(_QWORD *)(v3 + 16) = PlayerSceneComp::setCurrentWeatherTypeByGm;
  v5 = v3 >> 3;
  *(_DWORD *)(v5 + 2147450880) = -235802127;
  *(_DWORD *)(v5 + 2147450884) = -202178560;
  PlayerSceneComp::getWeatherArea((const PlayerSceneComp *const)(v3 + 32));
  if ( std::operator==<WeatherArea>((const std::shared_ptr<WeatherArea> *)(v3 + 32), 0LL) )
  {
    v6 = -1;
  }
  else
  {
    v7 = std::__shared_ptr_access<WeatherArea,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<WeatherArea,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 32));
    v6 = WeatherArea::setCurrentWeatherTypeByGm(v7, climate_type, extra_count);
  }
  std::shared_ptr<WeatherArea>::~shared_ptr((std::shared_ptr<WeatherArea> *const)(v3 + 32));
  result = v6;
  if ( v10 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 4302: range 0000000013E66AD2-0000000013E66C32
std::unordered_set<proto::MapMarkPoint> *__fastcall PlayerSceneComp::getMarkPointSet(
        PlayerSceneComp *const this,
        uint32_t scene_id)
{
  unsigned __int64 v2; // rbx
  __int64 v3; // rax
  unsigned __int64 v4; // r12
  std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v5; // rax
  bool v6; // r14
  std::unordered_set<proto::MapMarkPoint> *result; // rax
  std::shared_ptr<Config> v8; // [rsp+10h] [rbp-80h] BYREF
  char v9[112]; // [rsp+20h] [rbp-70h] BYREF

  v2 = (unsigned __int64)v9;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_0(64LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "1 32 4 13 scene_id:4301";
  *(_QWORD *)(v2 + 16) = PlayerSceneComp::getMarkPointSet;
  v4 = v2 >> 3;
  *(_DWORD *)(v4 + 2147450880) = -235802127;
  *(_DWORD *)(v4 + 2147450884) = -202116348;
  *(_DWORD *)(v2 + 32) = scene_id;
  ServiceBox::findService<GameserverService>();
  GameserverService::getConfig((GameserverService *const)&v8);
  v5 = std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false> *const)&v8);
  v6 = !SceneExcelConfigMgr::isSceneAllowMapMarkPoint(
          &v5->design_config.txt_config_mgr.scene_config_mgr,
          *(_DWORD *)(v2 + 32));
  std::shared_ptr<Config>::~shared_ptr(&v8);
  if ( v6 )
    result = 0LL;
  else
    result = std::unordered_map<unsigned int,std::unordered_set<proto::MapMarkPoint>>::operator[](
               &this->mark_point_set_map_,
               (const std::unordered_map<unsigned int,std::unordered_set<proto::MapMarkPoint>>::key_type *)(v2 + 32));
  if ( v9 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 4311: range 0000000013E66C34-0000000013E66D61
void __cdecl PlayerSceneComp::getAllMarkPoint(
        const PlayerSceneComp *const this,
        google::protobuf::RepeatedPtrField<proto::MapMarkPoint> *proto_map_mark_point_list)
{
  proto::MapMarkPoint *v2; // rax
  std::unordered_map<unsigned int,std::unordered_set<proto::MapMarkPoint>>::const_iterator __for_begin; // [rsp+10h] [rbp-60h] BYREF
  std::unordered_map<unsigned int,std::unordered_set<proto::MapMarkPoint>>::const_iterator __for_end; // [rsp+18h] [rbp-58h] BYREF
  std::unordered_set<proto::MapMarkPoint>::const_iterator __for_begin_0; // [rsp+20h] [rbp-50h] BYREF
  std::unordered_set<proto::MapMarkPoint>::const_iterator __for_end_0; // [rsp+28h] [rbp-48h] BYREF
  const std::unordered_map<unsigned int,std::unordered_set<proto::MapMarkPoint>> *__for_range; // [rsp+30h] [rbp-40h]
  const std::pair<unsigned int const,std::unordered_set<proto::MapMarkPoint> > *v8; // [rsp+38h] [rbp-38h]
  std::tuple_element<0,const std::pair<unsigned int const,std::unordered_set<proto::MapMarkPoint> > >::type *_; // [rsp+40h] [rbp-30h]
  std::tuple_element<1,const std::pair<unsigned int const,std::unordered_set<proto::MapMarkPoint> > >::type *mark_point_set; // [rsp+48h] [rbp-28h]
  const std::unordered_set<proto::MapMarkPoint> *__for_range_0; // [rsp+50h] [rbp-20h]
  const proto::MapMarkPoint *mark; // [rsp+58h] [rbp-18h]

  __for_range = &this->mark_point_set_map_;
  __for_begin._M_cur = std::unordered_map<unsigned int,std::unordered_set<proto::MapMarkPoint>>::begin(&this->mark_point_set_map_)._M_cur;
  __for_end._M_cur = std::unordered_map<unsigned int,std::unordered_set<proto::MapMarkPoint>>::end(&this->mark_point_set_map_)._M_cur;
  while ( std::__detail::operator!=<std::pair<unsigned int const,std::unordered_set<proto::MapMarkPoint>>,false>(
            &__for_begin,
            &__for_end) )
  {
    v8 = std::__detail::_Node_const_iterator<std::pair<unsigned int const,std::unordered_set<proto::MapMarkPoint>>,false,false>::operator*(&__for_begin);
    _ = std::get<0ul,unsigned int const,std::unordered_set<proto::MapMarkPoint>>(v8);
    mark_point_set = (std::tuple_element<1,const std::pair<unsigned int const,std::unordered_set<proto::MapMarkPoint> > >::type *)std::get<1ul,unsigned int const,std::unordered_set<proto::MapMarkPoint>>(v8);
    __for_range_0 = mark_point_set;
    __for_begin_0._M_cur = std::unordered_set<proto::MapMarkPoint>::begin(mark_point_set)._M_cur;
    __for_end_0._M_cur = std::unordered_set<proto::MapMarkPoint>::end(__for_range_0)._M_cur;
    while ( std::__detail::operator!=<proto::MapMarkPoint,true>(&__for_begin_0, &__for_end_0) )
    {
      mark = std::__detail::_Node_const_iterator<proto::MapMarkPoint,true,true>::operator*(&__for_begin_0);
      v2 = google::protobuf::RepeatedPtrField<proto::MapMarkPoint>::Add(proto_map_mark_point_list);
      proto::MapMarkPoint::operator=(v2, mark);
      std::__detail::_Node_const_iterator<proto::MapMarkPoint,true,true>::operator++(&__for_begin_0);
    }
    std::__detail::_Node_const_iterator<std::pair<unsigned int const,std::unordered_set<proto::MapMarkPoint>>,false,false>::operator++(&__for_begin);
  }
};

// Line 4322: range 0000000013E66D62-0000000013E66EFB
int32_t __cdecl PlayerSceneComp::notifyAllMarkPoint(PlayerSceneComp *const this)
{
  unsigned __int64 v1; // rbx
  __int64 v2; // rax
  unsigned __int64 v3; // r12
  std::__shared_ptr_access<proto::AllMarkPointNotify,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v4; // rax
  google::protobuf::RepeatedPtrField<proto::MapMarkPoint> *v5; // rdx
  Player *player; // r14
  int32_t result; // eax
  std::shared_ptr<proto::AllMarkPointNotify> __r; // [rsp+10h] [rbp-80h] BYREF
  char v9[112]; // [rsp+20h] [rbp-70h] BYREF

  v1 = (unsigned __int64)v9;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_0(64LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "1 32 16 15 notify_ptr:4323";
  *(_QWORD *)(v1 + 16) = PlayerSceneComp::notifyAllMarkPoint;
  v3 = v1 >> 3;
  *(_DWORD *)(v3 + 2147450880) = -235802127;
  *(_DWORD *)(v3 + 2147450884) = -202178560;
  common::tools::perf::make_shared<proto::AllMarkPointNotify>();
  v4 = std::__shared_ptr_access<proto::AllMarkPointNotify,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<proto::AllMarkPointNotify,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v1 + 32));
  v5 = proto::AllMarkPointNotify::mutable_mark_list(v4);
  PlayerSceneComp::getAllMarkPoint(this, v5);
  if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
    __asan_report_load8();
  player = this->player_;
  std::dynamic_pointer_cast<google::protobuf::Message const,proto::AllMarkPointNotify>(&__r);
  Player::sendMessage(player, (common::minet::ConstMessagePtr *)&__r, 0LL);
  std::shared_ptr<google::protobuf::Message const>::~shared_ptr((std::shared_ptr<const google::protobuf::Message> *const)&__r);
  std::shared_ptr<proto::AllMarkPointNotify>::~shared_ptr((std::shared_ptr<proto::AllMarkPointNotify> *const)(v1 + 32));
  result = 0;
  if ( v9 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 4330: range 0000000013E66EFC-0000000013E66FA5
uint32_t __cdecl PlayerSceneComp::getTotalMarkPointCount(PlayerSceneComp *const this)
{
  uint32_t count; // [rsp+1Ch] [rbp-34h]
  std::unordered_map<unsigned int,std::unordered_set<proto::MapMarkPoint>>::iterator __for_begin; // [rsp+20h] [rbp-30h] BYREF
  std::unordered_map<unsigned int,std::unordered_set<proto::MapMarkPoint>>::iterator __for_end; // [rsp+28h] [rbp-28h] BYREF
  std::unordered_map<unsigned int,std::unordered_set<proto::MapMarkPoint>> *__for_range; // [rsp+30h] [rbp-20h]
  const std::pair<unsigned int const,std::unordered_set<proto::MapMarkPoint> > *v6; // [rsp+38h] [rbp-18h]
  std::tuple_element<0,const std::pair<unsigned int const,std::unordered_set<proto::MapMarkPoint> > >::type *scene_id; // [rsp+40h] [rbp-10h]
  std::tuple_element<1,const std::pair<unsigned int const,std::unordered_set<proto::MapMarkPoint> > >::type *mark_point_set; // [rsp+48h] [rbp-8h]

  count = 0;
  __for_range = &this->mark_point_set_map_;
  __for_begin._M_cur = std::unordered_map<unsigned int,std::unordered_set<proto::MapMarkPoint>>::begin(&this->mark_point_set_map_)._M_cur;
  __for_end._M_cur = std::unordered_map<unsigned int,std::unordered_set<proto::MapMarkPoint>>::end(&this->mark_point_set_map_)._M_cur;
  while ( std::__detail::operator!=<std::pair<unsigned int const,std::unordered_set<proto::MapMarkPoint>>,false>(
            &__for_begin,
            &__for_end) )
  {
    v6 = std::__detail::_Node_iterator<std::pair<unsigned int const,std::unordered_set<proto::MapMarkPoint>>,false,false>::operator*(&__for_begin);
    scene_id = std::get<0ul,unsigned int const,std::unordered_set<proto::MapMarkPoint>>(v6);
    mark_point_set = (std::tuple_element<1,const std::pair<unsigned int const,std::unordered_set<proto::MapMarkPoint> > >::type *)std::get<1ul,unsigned int const,std::unordered_set<proto::MapMarkPoint>>(v6);
    count += std::unordered_set<proto::MapMarkPoint>::size(mark_point_set);
    std::__detail::_Node_iterator<std::pair<unsigned int const,std::unordered_set<proto::MapMarkPoint>>,false,false>::operator++(&__for_begin);
  }
  return count;
};

// Line 4340: range 0000000013E66FA6-0000000013E67173
void __cdecl PlayerSceneComp::clearDeprecatedSceneMarkPoint(PlayerSceneComp *const this)
{
  std::__detail::_Node_iterator<std::pair<unsigned int const,std::unordered_set<proto::MapMarkPoint> >,false,false> *v1; // rbx
  __int64 v2; // rax
  unsigned __int64 v3; // r13
  unsigned __int64 v4; // rax
  std::__detail::_Node_iterator_base<std::pair<unsigned int const,std::unordered_set<proto::MapMarkPoint> >,false> __y; // [rsp+10h] [rbp-80h] BYREF
  const SceneExcelConfigMgr *scene_config_mgr; // [rsp+18h] [rbp-78h]
  std::shared_ptr<Config> v7; // [rsp+20h] [rbp-70h] BYREF
  char v8[96]; // [rsp+30h] [rbp-60h] BYREF

  v1 = (std::__detail::_Node_iterator<std::pair<unsigned int const,std::unordered_set<proto::MapMarkPoint> >,false,false> *)v8;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_0(64LL);
    if ( v2 )
      v1 = (std::__detail::_Node_iterator<std::pair<unsigned int const,std::unordered_set<proto::MapMarkPoint> >,false,false> *)v2;
  }
  v1->_M_cur = (std::__detail::_Node_iterator_base<std::pair<unsigned int const,std::unordered_set<proto::MapMarkPoint> >,false>::__node_type *)1102416563;
  v1[1]._M_cur = (std::__detail::_Node_iterator_base<std::pair<unsigned int const,std::unordered_set<proto::MapMarkPoint> >,false>::__node_type *)"1 32 8 7 it:4342";
  v1[2]._M_cur = (std::__detail::_Node_iterator_base<std::pair<unsigned int const,std::unordered_set<proto::MapMarkPoint> >,false>::__node_type *)PlayerSceneComp::clearDeprecatedSceneMarkPoint;
  v3 = (unsigned __int64)v1 >> 3;
  *(_DWORD *)(v3 + 2147450880) = -235802127;
  *(_DWORD *)(v3 + 2147450884) = -202116352;
  ServiceBox::findService<GameserverService>();
  GameserverService::getConfig((GameserverService *const)&v7);
  scene_config_mgr = &std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false> *const)&v7)->design_config.txt_config_mgr.scene_config_mgr;
  std::shared_ptr<Config>::~shared_ptr(&v7);
  v1[4]._M_cur = std::unordered_map<unsigned int,std::unordered_set<proto::MapMarkPoint>>::begin(&this->mark_point_set_map_)._M_cur;
  while ( 1 )
  {
    __y._M_cur = std::unordered_map<unsigned int,std::unordered_set<proto::MapMarkPoint>>::end(&this->mark_point_set_map_)._M_cur;
    if ( !std::__detail::operator!=<std::pair<unsigned int const,std::unordered_set<proto::MapMarkPoint>>,false>(
            v1 + 4,
            &__y) )
      break;
    v4 = (unsigned __int64)std::__detail::_Node_iterator<std::pair<unsigned int const,std::unordered_set<proto::MapMarkPoint>>,false,false>::operator->(v1 + 4);
    if ( *(_BYTE *)((v4 >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)((v4 >> 3) + 0x7FFF8000) <= 3 )
      v4 = __asan_report_load4(v4);
    if ( SceneExcelConfigMgr::isSceneDeleteMapMarkPoint(scene_config_mgr, *(_DWORD *)v4) )
      v1[4]._M_cur = std::unordered_map<unsigned int,std::unordered_set<proto::MapMarkPoint>>::erase(
                       &this->mark_point_set_map_,
                       v1[4])._M_cur;
    else
      std::__detail::_Node_iterator<std::pair<unsigned int const,std::unordered_set<proto::MapMarkPoint>>,false,false>::operator++(v1 + 4);
  }
  if ( v8 == (char *)v1 )
  {
    *(_QWORD *)(((unsigned __int64)v1 >> 3) + 0x7FFF8000) = 0LL;
  }
  else
  {
    v1->_M_cur = (std::__detail::_Node_iterator_base<std::pair<unsigned int const,std::unordered_set<proto::MapMarkPoint> >,false>::__node_type *)1172321806;
    *(_QWORD *)(((unsigned __int64)v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
  }
};

// Line 4357: range 0000000013E67174-0000000013E6741C
void __cdecl PlayerSceneComp::resetEnterWorldTransaction(PlayerSceneComp *const this)
{
  unsigned __int64 v1; // r12
  __int64 v2; // rax
  _DWORD *v3; // rbx
  uint32_t Uid; // eax
  __int64 v5; // rax
  __int64 v6; // r14
  PlayerBasicComp *BasicComp; // rax
  std::string v8; // [rsp+10h] [rbp-250h] BYREF
  char v9[560]; // [rsp+30h] [rbp-230h] BYREF

  v1 = (unsigned __int64)v9;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_3(512LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "1 48 392 8 oss:4358";
  *(_QWORD *)(v1 + 16) = PlayerSceneComp::resetEnterWorldTransaction;
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = 61937;
  v3[536862733] = -218103808;
  v3[536862734] = -202116109;
  v3[536862735] = -202116109;
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream(v1 + 48);
  if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
    __asan_report_load8();
  Uid = Player::getUid(this->player_);
  v5 = std::ostream::operator<<(v1 + 64, Uid);
  v6 = std::operator<<<std::char_traits<char>>(v5, "-");
  if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
    __asan_report_load8();
  BasicComp = Player::getBasicComp(this->player_);
  PlayerBasicComp::getNextTransNo[abi:cxx11](&v8, BasicComp);
  std::operator<<<char>(v6, &v8);
  std::string::~string(&v8);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::str(&v8, v1 + 48);
  std::string::operator=(&this->enter_world_tran_, &v8);
  std::string::~string(&v8);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream(v1 + 48);
  if ( v9 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8034) = 0LL;
    *(_DWORD *)((v1 >> 3) + 0x7FFF803C) = 0;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8020) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8028) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8030) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8038) = 0xF5F5F5F5F5F5F5F5LL;
  }
};

// Line 4364: range 0000000013E6741E-0000000013E675EB
int32_t __cdecl PlayerSceneComp::saveAllGroup(PlayerSceneComp *const this, bool is_force)
{
  std::__shared_ptr_access<PlayerWorld,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v3; // rax
  common::milog::MiLogStream v4; // [rsp+10h] [rbp-30h] BYREF

  if ( std::operator==<PlayerWorld>(&this->my_player_world_ptr_, 0LL) )
  {
    common::milog::MiLogStream::create(
      &v4,
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/scene/player_scene_comp.cpp",
      "saveAllGroup",
      4367);
    common::milog::MiLogStream::operator<<<char [32],(char *[32])0>(
      &v4,
      (const char (*)[32])"my_player_world_ptr_ is nullptr");
    common::milog::MiLogStream::~MiLogStream(&v4);
    return -1;
  }
  else
  {
    v3 = std::__shared_ptr_access<PlayerWorld,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<PlayerWorld,(__gnu_cxx::_Lock_policy)2,false,false> *const)&this->my_player_world_ptr_);
    if ( World::saveAllGroup(v3, is_force) )
    {
      common::milog::MiLogStream::create(
        &v4,
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/scene/player_scene_comp.cpp",
        "saveAllGroup",
        4372);
      common::milog::MiLogStream::operator<<<char [23],(char *[23])0>(&v4, (const char (*)[23])"world_ptr->toBin fails");
      common::milog::MiLogStream::~MiLogStream(&v4);
      return -1;
    }
    else if ( PlayerSceneComp::saveAllPersistentDungeonGroup(this, is_force) )
    {
      common::milog::MiLogStream::create(
        &v4,
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/scene/player_scene_comp.cpp",
        "saveAllGroup",
        4377);
      common::milog::MiLogStream::operator<<<char [36],(char *[36])0>(
        &v4,
        (const char (*)[36])"saveAllPersistentDungeonGroup fails");
      common::milog::MiLogStream::~MiLogStream(&v4);
      return -1;
    }
    else
    {
      return 0;
    }
  }
};

// Line 4384: range 0000000013E675EC-0000000013E67A8C
int32_t __cdecl PlayerSceneComp::saveAllPersistentDungeonGroup(PlayerSceneComp *const this, bool is_force)
{
  int32_t v2; // r15d
  unsigned __int64 v3; // rbx
  __int64 v4; // rax
  unsigned __int64 v5; // r13
  int v6; // r14d
  unsigned __int64 v7; // rax
  unsigned __int64 v8; // rdx
  Scene *v9; // rax
  common::milog::MiLogStream *v10; // r14
  common::milog::MiLogStream *v11; // rax
  common::milog::MiLogStream *v12; // r14
  std::__shared_ptr_access<DungeonScene,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v13; // rax
  common::milog::MiLogStream *v14; // rax
  common::milog::MiLogStream *v15; // rax
  int32_t result; // eax
  unsigned int val; // [rsp+28h] [rbp-C8h] BYREF
  unsigned int DungeonId; // [rsp+2Ch] [rbp-C4h] BYREF
  std::unordered_map<unsigned int,std::weak_ptr<DungeonScene>>::iterator __for_begin; // [rsp+30h] [rbp-C0h] BYREF
  std::unordered_map<unsigned int,std::weak_ptr<DungeonScene>>::iterator __for_end; // [rsp+38h] [rbp-B8h] BYREF
  std::unordered_map<unsigned int,std::weak_ptr<DungeonScene>> *__for_range; // [rsp+40h] [rbp-B0h]
  const std::pair<unsigned int const,std::weak_ptr<DungeonScene> > *v22; // [rsp+48h] [rbp-A8h]
  std::tuple_element<0,const std::pair<unsigned int const,std::weak_ptr<DungeonScene> > >::type *scene_id; // [rsp+50h] [rbp-A0h]
  std::tuple_element<1,const std::pair<unsigned int const,std::weak_ptr<DungeonScene> > >::type *dungeon_scene_wtr; // [rsp+58h] [rbp-98h]
  common::milog::MiLogStream v25; // [rsp+60h] [rbp-90h] BYREF
  char v26[112]; // [rsp+80h] [rbp-70h] BYREF

  v3 = (unsigned __int64)v26;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_0(64LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "1 32 16 22 dungeon_scene_ptr:4387";
  *(_QWORD *)(v3 + 16) = PlayerSceneComp::saveAllPersistentDungeonGroup;
  v5 = v3 >> 3;
  *(_DWORD *)(v5 + 2147450880) = -235802127;
  *(_DWORD *)(v5 + 2147450884) = -202178560;
  __for_range = &this->create_persistent_dungeon_scene_map_;
  __for_begin._M_cur = std::unordered_map<unsigned int,std::weak_ptr<DungeonScene>>::begin(&this->create_persistent_dungeon_scene_map_)._M_cur;
  __for_end._M_cur = std::unordered_map<unsigned int,std::weak_ptr<DungeonScene>>::end(&this->create_persistent_dungeon_scene_map_)._M_cur;
  while ( std::__detail::operator!=<std::pair<unsigned int const,std::weak_ptr<DungeonScene>>,false>(
            &__for_begin,
            &__for_end) )
  {
    v22 = std::__detail::_Node_iterator<std::pair<unsigned int const,std::weak_ptr<DungeonScene>>,false,false>::operator*(&__for_begin);
    scene_id = std::get<0ul,unsigned int const,std::weak_ptr<DungeonScene>>(v22);
    dungeon_scene_wtr = (std::tuple_element<1,const std::pair<unsigned int const,std::weak_ptr<DungeonScene> > >::type *)std::get<1ul,unsigned int const,std::weak_ptr<DungeonScene>>(v22);
    std::weak_ptr<DungeonScene>::lock((const std::weak_ptr<DungeonScene> *const)(v3 + 32));
    if ( std::operator==<DungeonScene>(0LL, (const std::shared_ptr<DungeonScene> *)(v3 + 32)) )
    {
      common::milog::MiLogStream::create(
        &v25,
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/scene/player_scene_comp.cpp",
        "saveAllPersistentDungeonGroup",
        4390);
      common::milog::MiLogStream::operator<<<char [26],(char *[26])0>(
        &v25,
        (const char (*)[26])"dungeon_scene_ptr is null");
      common::milog::MiLogStream::~MiLogStream(&v25);
      v6 = 0;
    }
    else
    {
      v7 = (unsigned __int64)std::__shared_ptr_access<DungeonScene,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<DungeonScene,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 32));
      if ( *(_BYTE *)((v7 >> 3) + 0x7FFF8000) )
        v7 = __asan_report_load8();
      v8 = *(_QWORD *)v7 + 504LL;
      if ( *(_BYTE *)((v8 >> 3) + 0x7FFF8000) )
        v7 = __asan_report_load8();
      if ( (*(unsigned __int8 (__fastcall **)(unsigned __int64))v8)(v7) != 1 )
      {
        common::milog::MiLogStream::create(
          &v25,
          &common::milog::MiLogDefault::default_log_obj_,
          3u,
          "./src/scene/player_scene_comp.cpp",
          "saveAllPersistentDungeonGroup",
          4395);
        common::milog::MiLogStream::operator<<<char [26],(char *[26])0>(
          &v25,
          (const char (*)[26])"dungeon_scene_ptr is null");
        common::milog::MiLogStream::~MiLogStream(&v25);
        v6 = 0;
      }
      else
      {
        v9 = (Scene *)std::__shared_ptr_access<DungeonScene,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<DungeonScene,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 32));
        if ( Scene::saveAllGroup(v9, is_force) )
        {
          common::milog::MiLogStream::create(
            &v25,
            &common::milog::MiLogDefault::default_log_obj_,
            4u,
            "./src/scene/player_scene_comp.cpp",
            "saveAllPersistentDungeonGroup",
            4400);
          v10 = common::milog::MiLogStream::operator<<<char [45],(char *[45])0>(
                  &v25,
                  (const char (*)[45])"dungeon_scene_ptr->saveAllGroup failed, uid:");
          if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
            __asan_report_load8();
          val = Player::getUid(this->player_);
          v11 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v10, &val);
          v12 = common::milog::MiLogStream::operator<<<char [14],(char *[14])0>(
                  v11,
                  (const char (*)[14])", dungeon_id:");
          v13 = std::__shared_ptr_access<DungeonScene,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<DungeonScene,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 32));
          DungeonId = DungeonScene::getDungeonId(v13);
          v14 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v12, &DungeonId);
          v15 = common::milog::MiLogStream::operator<<<char [12],(char *[12])0>(v14, (const char (*)[12])", scene_id:");
          common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v15, scene_id);
          common::milog::MiLogStream::~MiLogStream(&v25);
          v2 = -1;
          v6 = 1;
        }
        else
        {
          v6 = 2;
        }
      }
    }
    std::shared_ptr<DungeonScene>::~shared_ptr((std::shared_ptr<DungeonScene> *const)(v3 + 32));
    if ( v6 && v6 != 2 )
      goto LABEL_23;
    std::__detail::_Node_iterator<std::pair<unsigned int const,std::weak_ptr<DungeonScene>>,false,false>::operator++(&__for_begin);
  }
  v2 = 0;
LABEL_23:
  result = v2;
  if ( v26 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 4409: range 0000000013E67A8E-0000000013E67B42
int32_t __cdecl PlayerSceneComp::getActiveGroupCount(PlayerSceneComp *const this)
{
  std::__shared_ptr_access<PlayerWorld,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v2; // rax
  common::milog::MiLogStream v3; // [rsp+10h] [rbp-30h] BYREF

  if ( std::operator==<PlayerWorld>(&this->my_player_world_ptr_, 0LL) )
  {
    common::milog::MiLogStream::create(
      &v3,
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/scene/player_scene_comp.cpp",
      "getActiveGroupCount",
      4412);
    common::milog::MiLogStream::operator<<<char [32],(char *[32])0>(
      &v3,
      (const char (*)[32])"my_player_world_ptr_ is nullptr");
    common::milog::MiLogStream::~MiLogStream(&v3);
    return -1;
  }
  else
  {
    v2 = std::__shared_ptr_access<PlayerWorld,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<PlayerWorld,(__gnu_cxx::_Lock_policy)2,false,false> *const)&this->my_player_world_ptr_);
    return World::getActiveGroupCount(v2);
  }
};

// Line 4420: range 0000000013E67B44-0000000013E67C60
void __fastcall PlayerSceneComp::addChestOpenNum(PlayerSceneComp *const this, uint32_t gadget_id)
{
  unsigned __int64 v2; // rbx
  __int64 v3; // rax
  unsigned __int64 v4; // r12
  std::unordered_map<unsigned int,unsigned int>::mapped_type *v5; // rax
  uint32_t *open_num; // [rsp+18h] [rbp-68h]
  char v7[96]; // [rsp+20h] [rbp-60h] BYREF

  v2 = (unsigned __int64)v7;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_0(64LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "1 32 4 14 gadget_id:4419";
  *(_QWORD *)(v2 + 16) = PlayerSceneComp::addChestOpenNum;
  v4 = v2 >> 3;
  *(_DWORD *)(v4 + 2147450880) = -235802127;
  *(_DWORD *)(v4 + 2147450884) = -202116348;
  *(_DWORD *)(v2 + 32) = gadget_id;
  v5 = std::unordered_map<unsigned int,unsigned int>::operator[](
         &this->chest_open_num_map_,
         (const std::unordered_map<unsigned int,unsigned int>::key_type *)(v2 + 32));
  open_num = v5;
  if ( *(_BYTE *)(((unsigned __int64)v5 >> 3) + 0x7FFF8000) != 0
    && (char)(((unsigned __int8)v5 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)v5 >> 3) + 0x7FFF8000) )
  {
    __asan_report_load4(v5);
  }
  ++*open_num;
  if ( v7 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
  }
};

// Line 4427: range 0000000013E67C62-0000000013E67D38
uint32_t __fastcall PlayerSceneComp::getChestOpenNum(const PlayerSceneComp *const this, uint32_t gadget_id)
{
  unsigned __int64 v2; // rbx
  __int64 v3; // rax
  unsigned __int64 v4; // r12
  uint32_t result; // eax
  char v6[96]; // [rsp+10h] [rbp-60h] BYREF

  v2 = (unsigned __int64)v6;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_0(64LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "1 32 4 14 gadget_id:4426";
  *(_QWORD *)(v2 + 16) = PlayerSceneComp::getChestOpenNum;
  v4 = v2 >> 3;
  *(_DWORD *)(v4 + 2147450880) = -235802127;
  *(_DWORD *)(v4 + 2147450884) = -202116348;
  *(_DWORD *)(v2 + 32) = gadget_id;
  result = common::tools::MiscUtils::findMapWithDefaultValue<std::unordered_map<unsigned int,unsigned int>>(
             &this->chest_open_num_map_,
             (const std::unordered_map<unsigned int,unsigned int>::key_type *)(v2 + 32),
             0);
  if ( v6 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 4433: range 0000000013E67D3A-0000000013E67E56
void __fastcall PlayerSceneComp::addGadgetInteractNum(PlayerSceneComp *const this, uint32_t gadget_id)
{
  unsigned __int64 v2; // rbx
  __int64 v3; // rax
  unsigned __int64 v4; // r12
  std::unordered_map<unsigned int,unsigned int>::mapped_type *v5; // rax
  uint32_t *interact_num; // [rsp+18h] [rbp-68h]
  char v7[96]; // [rsp+20h] [rbp-60h] BYREF

  v2 = (unsigned __int64)v7;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_0(64LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "1 32 4 14 gadget_id:4432";
  *(_QWORD *)(v2 + 16) = PlayerSceneComp::addGadgetInteractNum;
  v4 = v2 >> 3;
  *(_DWORD *)(v4 + 2147450880) = -235802127;
  *(_DWORD *)(v4 + 2147450884) = -202116348;
  *(_DWORD *)(v2 + 32) = gadget_id;
  v5 = std::unordered_map<unsigned int,unsigned int>::operator[](
         &this->gadget_interact_num_map_,
         (const std::unordered_map<unsigned int,unsigned int>::key_type *)(v2 + 32));
  interact_num = v5;
  if ( *(_BYTE *)(((unsigned __int64)v5 >> 3) + 0x7FFF8000) != 0
    && (char)(((unsigned __int8)v5 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)v5 >> 3) + 0x7FFF8000) )
  {
    __asan_report_load4(v5);
  }
  ++*interact_num;
  if ( v7 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
  }
};

// Line 4440: range 0000000013E67E58-0000000013E67F2E
uint32_t __fastcall PlayerSceneComp::getGadgetInteractNum(const PlayerSceneComp *const this, uint32_t gadget_id)
{
  unsigned __int64 v2; // rbx
  __int64 v3; // rax
  unsigned __int64 v4; // r12
  uint32_t result; // eax
  char v6[96]; // [rsp+10h] [rbp-60h] BYREF

  v2 = (unsigned __int64)v6;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_0(64LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "1 32 4 14 gadget_id:4439";
  *(_QWORD *)(v2 + 16) = PlayerSceneComp::getGadgetInteractNum;
  v4 = v2 >> 3;
  *(_DWORD *)(v4 + 2147450880) = -235802127;
  *(_DWORD *)(v4 + 2147450884) = -202116348;
  *(_DWORD *)(v2 + 32) = gadget_id;
  result = common::tools::MiscUtils::findMapWithDefaultValue<std::unordered_map<unsigned int,unsigned int>>(
             &this->gadget_interact_num_map_,
             (const std::unordered_map<unsigned int,unsigned int>::key_type *)(v2 + 32),
             0);
  if ( v6 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 4446: range 0000000013E67F30-0000000013E6803A
void __cdecl PlayerSceneComp::checkRefreshDailyGadgetDropCategoryCount(PlayerSceneComp *const this)
{
  std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v1; // rax
  time_t v2; // rdx
  time_t v3; // rcx
  time_t v4; // rsi
  uint32_t now; // [rsp+18h] [rbp-18h]
  uint32_t time_offset; // [rsp+1Ch] [rbp-14h]
  std::shared_ptr<Config> v7; // [rsp+20h] [rbp-10h] BYREF

  now = common::tools::TimeUtils::getNow();
  ServiceBox::findService<GameserverService>();
  GameserverService::getConfig((GameserverService *const)&v7);
  v1 = std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false> *const)&v7);
  time_offset = ConstValueExcelConfigMgr::getTimeOffsetSec(&v1->design_config.txt_config_mgr.const_value_config_mgr);
  std::shared_ptr<Config>::~shared_ptr(&v7);
  v2 = time_offset;
  v3 = now;
  if ( *(_BYTE *)(((unsigned __int64)&this->last_refresh_daily_gadget_drop_category_count_map_time_ >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->last_refresh_daily_gadget_drop_category_count_map_time_ >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4(&this->last_refresh_daily_gadget_drop_category_count_map_time_);
  }
  v4 = v3;
  if ( !common::tools::TimeUtils::isSameDay(this->last_refresh_daily_gadget_drop_category_count_map_time_, v3, v2) )
  {
    if ( *(_BYTE *)(((unsigned __int64)&this->last_refresh_daily_gadget_drop_category_count_map_time_ >> 3) + 0x7FFF8000) != 0
      && *(_BYTE *)(((unsigned __int64)&this->last_refresh_daily_gadget_drop_category_count_map_time_ >> 3) + 0x7FFF8000) <= 3 )
    {
      __asan_report_store4(&this->last_refresh_daily_gadget_drop_category_count_map_time_, v4, (_BYTE)this + 120);
    }
    this->last_refresh_daily_gadget_drop_category_count_map_time_ = now;
    std::unordered_map<std::string,unsigned int>::clear(&this->daily_gadget_drop_category_count_map_);
  }
};

// Line 4458: range 0000000013E6803C-0000000013E681B4
void __cdecl PlayerSceneComp::tryRecordDailyGadgetDropCategoryCount(PlayerSceneComp *const this, Gadget *gadget)
{
  DropExcelConfigMgr *p_drop_config_mgr; // rdx
  std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v3; // rax
  unsigned __int64 v4; // rax
  const GadgetScriptConfig *gadget_script_config_ptr; // [rsp+10h] [rbp-40h]
  const std::string *drop_category; // [rsp+20h] [rbp-30h]
  const std::unordered_map<std::string,unsigned int> *config_gadget_drop_category_limit_map; // [rsp+28h] [rbp-28h]
  std::shared_ptr<Config> v8[2]; // [rsp+30h] [rbp-20h] BYREF

  gadget_script_config_ptr = Gadget::getScriptConfig(gadget);
  if ( gadget_script_config_ptr )
  {
    ServiceBox::findService<GameserverService>();
    GameserverService::getConfig((GameserverService *const)v8);
    p_drop_config_mgr = &std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false> *const)v8)->design_config.txt_config_mgr.drop_config_mgr;
    drop_category = DropExcelConfigMgr::getChestDropCategory(p_drop_config_mgr, &gadget_script_config_ptr->drop_tag);
    std::shared_ptr<Config>::~shared_ptr(v8);
    ServiceBox::findService<GameserverService>();
    GameserverService::getConfig((GameserverService *const)v8);
    v3 = std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false> *const)v8);
    config_gadget_drop_category_limit_map = ConstValueExcelConfigMgr::getDailyGadgetDropCategoryLimitMap[abi:cxx11](&v3->design_config.txt_config_mgr.const_value_config_mgr);
    std::shared_ptr<Config>::~shared_ptr(v8);
    if ( common::tools::MiscUtils::isContains<std::unordered_map<std::string,unsigned int> const,std::string>(
           config_gadget_drop_category_limit_map,
           drop_category) )
    {
      PlayerSceneComp::checkRefreshDailyGadgetDropCategoryCount(this);
      v4 = (unsigned __int64)std::unordered_map<std::string,unsigned int>::operator[](
                               &this->daily_gadget_drop_category_count_map_,
                               drop_category);
      if ( *(_BYTE *)((v4 >> 3) + 0x7FFF8000) != 0 && (char)((v4 & 7) + 3) >= *(_BYTE *)((v4 >> 3) + 0x7FFF8000) )
        v4 = __asan_report_load4(v4);
      ++*(_DWORD *)v4;
    }
  }
};

// Line 4477: range 0000000013E681B6-0000000013E684C4
std::unordered_set<std::string> *__cdecl PlayerSceneComp::getExcludeGadgetDropCategorySet[abi:cxx11](
        std::unordered_set<std::string> *retstr,
        PlayerSceneComp *const this)
{
  unsigned __int64 v2; // rbx
  __int64 v3; // rax
  unsigned __int64 v4; // r12
  std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v5; // rax
  std::tuple_element<1,const std::pair<const std::string,unsigned int> >::type v6; // r14d
  std::__detail::_Node_const_iterator<std::pair<const std::string,unsigned int>,false,true>::pointer v7; // rax
  std::unordered_map<std::string,unsigned int>::iterator __for_begin; // [rsp+10h] [rbp-C0h] BYREF
  std::unordered_map<std::string,unsigned int>::iterator __for_end; // [rsp+18h] [rbp-B8h] BYREF
  std::__detail::_Node_iterator_base<std::pair<const std::string,unsigned int>,true> __y; // [rsp+20h] [rbp-B0h] BYREF
  const std::unordered_map<std::string,unsigned int> *config_gadget_drop_category_limit_map; // [rsp+28h] [rbp-A8h]
  std::unordered_map<std::string,unsigned int> *__for_range; // [rsp+30h] [rbp-A0h]
  const std::pair<const std::string,unsigned int> *v14; // [rsp+38h] [rbp-98h]
  std::tuple_element<0,const std::pair<const std::string,unsigned int> >::type *drop_category; // [rsp+40h] [rbp-90h]
  std::tuple_element<1,const std::pair<const std::string,unsigned int> >::type *drop_count; // [rsp+48h] [rbp-88h]
  std::shared_ptr<Config> v17; // [rsp+50h] [rbp-80h] BYREF
  char v18[112]; // [rsp+60h] [rbp-70h] BYREF

  v2 = (unsigned __int64)v18;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_0(64LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "1 32 8 9 iter:4483";
  *(_QWORD *)(v2 + 16) = PlayerSceneComp::getExcludeGadgetDropCategorySet[abi:cxx11];
  v4 = v2 >> 3;
  *(_DWORD *)(v4 + 2147450880) = -235802127;
  *(_DWORD *)(v4 + 2147450884) = -202116352;
  PlayerSceneComp::checkRefreshDailyGadgetDropCategoryCount(this);
  std::unordered_set<std::string>::unordered_set(retstr);
  ServiceBox::findService<GameserverService>();
  GameserverService::getConfig((GameserverService *const)&v17);
  v5 = std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false> *const)&v17);
  config_gadget_drop_category_limit_map = ConstValueExcelConfigMgr::getDailyGadgetDropCategoryLimitMap[abi:cxx11](&v5->design_config.txt_config_mgr.const_value_config_mgr);
  std::shared_ptr<Config>::~shared_ptr(&v17);
  __for_range = &this->daily_gadget_drop_category_count_map_;
  __for_begin._M_cur = std::unordered_map<std::string,unsigned int>::begin(&this->daily_gadget_drop_category_count_map_)._M_cur;
  __for_end._M_cur = std::unordered_map<std::string,unsigned int>::end(&this->daily_gadget_drop_category_count_map_)._M_cur;
  while ( std::__detail::operator!=<std::pair<std::string const,unsigned int>,true>(&__for_begin, &__for_end) )
  {
    v14 = std::__detail::_Node_iterator<std::pair<std::string const,unsigned int>,false,true>::operator*(&__for_begin);
    drop_category = std::get<0ul,std::string const,unsigned int>(v14);
    drop_count = (std::tuple_element<1,const std::pair<const std::string,unsigned int> >::type *)std::get<1ul,std::string const,unsigned int>(v14);
    *(std::unordered_map<std::string,unsigned int>::const_iterator *)(v2 + 32) = std::unordered_map<std::string,unsigned int>::find(
                                                                                   config_gadget_drop_category_limit_map,
                                                                                   drop_category);
    __y._M_cur = std::unordered_map<std::string,unsigned int>::end(config_gadget_drop_category_limit_map)._M_cur;
    if ( !std::__detail::operator==<std::pair<std::string const,unsigned int>,true>(
            (const std::__detail::_Node_iterator_base<std::pair<const std::string,unsigned int>,true> *)(v2 + 32),
            &__y) )
    {
      if ( *(_BYTE *)(((unsigned __int64)drop_count >> 3) + 0x7FFF8000) != 0
        && (char)(((unsigned __int8)drop_count & 7) + 3) >= *(_BYTE *)(((unsigned __int64)drop_count >> 3) + 0x7FFF8000) )
      {
        __asan_report_load4(drop_count);
      }
      v6 = *drop_count;
      v7 = std::__detail::_Node_const_iterator<std::pair<std::string const,unsigned int>,false,true>::operator->((const std::__detail::_Node_const_iterator<std::pair<const std::string,unsigned int>,false,true> *const)(v2 + 32));
      if ( *(_BYTE *)(((unsigned __int64)&v7->second >> 3) + 0x7FFF8000) != 0
        && *(_BYTE *)(((unsigned __int64)&v7->second >> 3) + 0x7FFF8000) <= 3 )
      {
        v7 = (std::__detail::_Node_const_iterator<std::pair<const std::string,unsigned int>,false,true>::pointer)__asan_report_load4(&v7->second);
      }
      if ( v6 >= v7->second )
        std::unordered_set<std::string>::insert(retstr, drop_category);
    }
    std::__detail::_Node_iterator<std::pair<std::string const,unsigned int>,false,true>::operator++(&__for_begin);
  }
  if ( v18 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return retstr;
};

// Line 4497: range 0000000013E684C6-0000000013E686F4
void __cdecl PlayerSceneComp::onSkillEvent(PlayerSceneComp *const this, const SkillEvent *skill_event)
{
  unsigned __int64 v2; // rbx
  __int64 v3; // rax
  unsigned __int64 v4; // r12
  unsigned __int64 v5; // rax
  unsigned __int64 v6; // rdx
  void (__fastcall *v7)(unsigned __int64, _QWORD, uint64_t, __int64); // r8
  __int64 avatar_entity_id; // rcx
  uint64_t avatar_guid; // rdi
  char v10[112]; // [rsp+10h] [rbp-70h] BYREF

  v2 = (unsigned __int64)v10;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_0(64LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "1 32 16 18 cur_scene_ptr:4498";
  *(_QWORD *)(v2 + 16) = PlayerSceneComp::onSkillEvent;
  v4 = v2 >> 3;
  *(_DWORD *)(v4 + 2147450880) = -235802127;
  *(_DWORD *)(v4 + 2147450884) = -202178560;
  PlayerSceneComp::getCurScene((const PlayerSceneComp *const)(v2 + 32));
  if ( !std::operator==<Scene>(0LL, (const std::shared_ptr<Scene> *)(v2 + 32)) )
  {
    v5 = (unsigned __int64)std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 32));
    if ( *(_BYTE *)((v5 >> 3) + 0x7FFF8000) )
      v5 = __asan_report_load8();
    v6 = *(_QWORD *)v5 + 200LL;
    if ( *(_BYTE *)((v6 >> 3) + 0x7FFF8000) )
      v5 = __asan_report_load8();
    v7 = *(void (__fastcall **)(unsigned __int64, _QWORD, uint64_t, __int64))v6;
    if ( *(_BYTE *)(((unsigned __int64)&skill_event->avatar_entity_id >> 3) + 0x7FFF8000) != 0
      && *(_BYTE *)(((unsigned __int64)&skill_event->avatar_entity_id >> 3) + 0x7FFF8000) <= 3 )
    {
      v5 = __asan_report_load4(&skill_event->avatar_entity_id);
    }
    avatar_entity_id = skill_event->avatar_entity_id;
    if ( *(_BYTE *)(((unsigned __int64)&skill_event->avatar_guid >> 3) + 0x7FFF8000) )
      v5 = __asan_report_load8();
    avatar_guid = skill_event->avatar_guid;
    if ( *(_BYTE *)(((unsigned __int64)&skill_event->skill_id >> 3) + 0x7FFF8000) != 0
      && *(_BYTE *)(((unsigned __int64)&skill_event->skill_id >> 3) + 0x7FFF8000) <= 3 )
    {
      avatar_guid = (uint64_t)&skill_event->skill_id;
      v5 = __asan_report_load4(&skill_event->skill_id);
    }
    v7(v5, skill_event->skill_id, avatar_guid, avatar_entity_id);
  }
  std::shared_ptr<Scene>::~shared_ptr((std::shared_ptr<Scene> *const)(v2 + 32));
  if ( v10 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
  }
};

// Line 4508: range 0000000013E686F6-0000000013E688D6
void __cdecl PlayerSceneComp::onChangeAvatar(PlayerSceneComp *const this, const ChangeAvatarEvent *change_avatar_event)
{
  unsigned __int64 v2; // rbx
  __int64 v3; // rax
  unsigned __int64 v4; // r12
  unsigned __int64 v5; // rax
  unsigned __int64 v6; // rdx
  void (__fastcall *v7)(unsigned __int64, uint64_t, uint64_t); // r8
  uint64_t cur_guid; // rdx
  char v9[112]; // [rsp+10h] [rbp-70h] BYREF

  v2 = (unsigned __int64)v9;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_0(64LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "1 32 16 18 cur_scene_ptr:4509";
  *(_QWORD *)(v2 + 16) = PlayerSceneComp::onChangeAvatar;
  v4 = v2 >> 3;
  *(_DWORD *)(v4 + 2147450880) = -235802127;
  *(_DWORD *)(v4 + 2147450884) = -202178560;
  PlayerSceneComp::getCurScene((const PlayerSceneComp *const)(v2 + 32));
  if ( !std::operator==<Scene>(0LL, (const std::shared_ptr<Scene> *)(v2 + 32)) )
  {
    v5 = (unsigned __int64)std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 32));
    if ( *(_BYTE *)((v5 >> 3) + 0x7FFF8000) )
      v5 = __asan_report_load8();
    v6 = *(_QWORD *)v5 + 208LL;
    if ( *(_BYTE *)((v6 >> 3) + 0x7FFF8000) )
      v5 = __asan_report_load8();
    v7 = *(void (__fastcall **)(unsigned __int64, uint64_t, uint64_t))v6;
    if ( *(_BYTE *)(((unsigned __int64)&change_avatar_event->cur_guid >> 3) + 0x7FFF8000) )
      v5 = __asan_report_load8();
    cur_guid = change_avatar_event->cur_guid;
    if ( *(_BYTE *)(((unsigned __int64)&change_avatar_event->old_guid >> 3) + 0x7FFF8000) )
      v5 = __asan_report_load8();
    v7(v5, change_avatar_event->old_guid, cur_guid);
  }
  std::shared_ptr<Scene>::~shared_ptr((std::shared_ptr<Scene> *const)(v2 + 32));
  if ( v9 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
  }
};

// Line 4519: range 0000000013E688D8-0000000013E68ABB
void __cdecl PlayerSceneComp::onMonsterBeKilledByHateList(
        PlayerSceneComp *const this,
        const MonsterBeKilledByHateListEvent *event)
{
  std::map<unsigned int,unsigned int>::mapped_type *v2; // rax
  unsigned int *v3; // rdx
  SelectType_0 v4; // ebx
  uint32_t *p_monster_id; // rsi
  std::map<unsigned int,unsigned int>::mapped_type *v6; // rax
  SelectType_0 *v7; // rdx
  char v8; // cl
  common::milog::MiLogStream *v9; // rax
  common::milog::MiLogStream *v10; // rax
  common::milog::MiLogStream *v11; // rbx
  std::map<unsigned int,unsigned int>::mapped_type *v12; // rax
  common::milog::MiLogStream *v13; // rax
  common::milog::MiLogStream *v14; // rbx
  unsigned int val; // [rsp+1Ch] [rbp-34h] BYREF
  common::milog::MiLogStream v17; // [rsp+20h] [rbp-30h] BYREF

  v2 = std::map<unsigned int,unsigned int>::operator[](&this->monster_killed_num_map_, &event->monster_id);
  v3 = v2;
  if ( *(_BYTE *)(((unsigned __int64)v2 >> 3) + 0x7FFF8000) != 0
    && (char)(((unsigned __int8)v2 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)v2 >> 3) + 0x7FFF8000) )
  {
    __asan_report_load4(v2);
  }
  v4 = SAFE_ADD<unsigned int,int>(*v3, 1);
  p_monster_id = &event->monster_id;
  v6 = std::map<unsigned int,unsigned int>::operator[](&this->monster_killed_num_map_, &event->monster_id);
  v7 = v6;
  v8 = *(_BYTE *)(((unsigned __int64)v6 >> 3) + 0x7FFF8000);
  if ( v8 != 0 && (char)(((unsigned __int8)v6 & 7) + 3) >= v8 )
  {
    LOBYTE(p_monster_id) = v8 != 0;
    __asan_report_store4(v6, p_monster_id, (_BYTE)v6);
  }
  *v7 = v4;
  common::milog::MiLogStream::create(
    &v17,
    &common::milog::MiLogDefault::default_log_obj_,
    1u,
    "./src/scene/player_scene_comp.cpp",
    "onMonsterBeKilledByHateList",
    4522);
  v9 = common::milog::MiLogStream::operator<<<char [12],(char *[12])0>(&v17, (const char (*)[12])"monster_id:");
  v10 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v9, &event->monster_id);
  v11 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(v10, (const char (*)[16])off_25185CE0);
  v12 = std::map<unsigned int,unsigned int>::operator[](&this->monster_killed_num_map_, &event->monster_id);
  v13 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v11, v12);
  v14 = common::milog::MiLogStream::operator<<<char [13],(char *[13])0>(v13, (const char (*)[13])" player_uid:");
  if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
    __asan_report_load8();
  val = Player::getUid(this->player_);
  common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v14, &val);
  common::milog::MiLogStream::~MiLogStream(&v17);
};

// Line 4527: range 0000000013E68ABC-0000000013E68F99
void __cdecl PlayerSceneComp::onFishingSucc(PlayerSceneComp *const this, const FishingSuccEvent *event)
{
  unsigned __int64 v2; // rbx
  __int64 v3; // rax
  unsigned __int64 v4; // r13
  FishExcelConfigMgr *p_fish_config_mgr; // rcx
  common::milog::MiLogStream *v6; // rax
  common::milog::MiLogStream *v7; // rax
  common::milog::MiLogStream *v8; // r12
  std::map<unsigned int,unsigned int>::mapped_type *v9; // rax
  unsigned int *v10; // rdx
  SelectType_0 v11; // r14d
  char *v12; // rsi
  std::map<unsigned int,unsigned int>::mapped_type *v13; // rax
  SelectType_0 *v14; // rdx
  char v15; // cl
  common::milog::MiLogStream *v16; // rax
  common::milog::MiLogStream *v17; // rax
  common::milog::MiLogStream *v18; // rax
  common::milog::MiLogStream *v19; // rax
  common::milog::MiLogStream *v20; // r14
  std::map<unsigned int,unsigned int>::mapped_type *v21; // rax
  common::milog::MiLogStream *v22; // rax
  unsigned int val; // [rsp+14h] [rbp-ACh] BYREF
  const data::FishExcelConfig *fish_config_ptr; // [rsp+18h] [rbp-A8h]
  std::shared_ptr<Config> v26; // [rsp+20h] [rbp-A0h] BYREF
  common::milog::MiLogStream v27; // [rsp+30h] [rbp-90h] BYREF
  char v28[112]; // [rsp+50h] [rbp-70h] BYREF

  v2 = (unsigned __int64)v28;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_0(64LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "1 32 4 15 monster_id:4534";
  *(_QWORD *)(v2 + 16) = PlayerSceneComp::onFishingSucc;
  v4 = v2 >> 3;
  *(_DWORD *)(v4 + 2147450880) = -235802127;
  *(_DWORD *)(v4 + 2147450884) = -202116348;
  ServiceBox::findService<GameserverService>();
  GameserverService::getConfig((GameserverService *const)&v26);
  p_fish_config_mgr = &std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false> *const)&v26)->design_config.txt_config_mgr.fish_config_mgr;
  if ( *(_BYTE *)(((unsigned __int64)&event->fish_id >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)event + 28) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&event->fish_id >> 3) + 0x7FFF8000) )
  {
    __asan_report_load4(&event->fish_id);
  }
  fish_config_ptr = data::FishExcelConfigMgrBase::findFishExcelConfig(p_fish_config_mgr, event->fish_id);
  std::shared_ptr<Config>::~shared_ptr(&v26);
  if ( fish_config_ptr )
  {
    if ( *(_BYTE *)(((unsigned __int64)&fish_config_ptr->monster_id >> 3) + 0x7FFF8000) != 0
      && (char)((((_BYTE)fish_config_ptr + 12) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&fish_config_ptr->monster_id >> 3)
                                                                     + 0x7FFF8000) )
    {
      __asan_report_load4(&fish_config_ptr->monster_id);
    }
    *(_DWORD *)(v2 + 32) = fish_config_ptr->monster_id;
    v9 = std::map<unsigned int,unsigned int>::operator[](
           &this->monster_killed_num_map_,
           (const std::map<unsigned int,unsigned int>::key_type *)(v2 + 32));
    v10 = v9;
    if ( *(_BYTE *)(((unsigned __int64)v9 >> 3) + 0x7FFF8000) != 0
      && (char)(((unsigned __int8)v9 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)v9 >> 3) + 0x7FFF8000) )
    {
      __asan_report_load4(v9);
    }
    v11 = SAFE_ADD<unsigned int,int>(*v10, 1);
    v12 = (char *)(v2 + 32);
    v13 = std::map<unsigned int,unsigned int>::operator[](
            &this->monster_killed_num_map_,
            (const std::map<unsigned int,unsigned int>::key_type *)(v2 + 32));
    v14 = v13;
    v15 = *(_BYTE *)(((unsigned __int64)v13 >> 3) + 0x7FFF8000);
    if ( v15 != 0 && (char)(((unsigned __int8)v13 & 7) + 3) >= v15 )
    {
      LOBYTE(v12) = v15 != 0;
      __asan_report_store4(v13, v12, (_BYTE)v13);
    }
    *v14 = v11;
    common::milog::MiLogStream::create(
      &v27,
      &common::milog::MiLogDefault::default_log_obj_,
      1u,
      "./src/scene/player_scene_comp.cpp",
      "onFishingSucc",
      4537);
    v16 = common::milog::MiLogStream::operator<<<char [9],(char *[9])0>(&v27, (const char (*)[9])"fish_id:");
    v17 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v16, &event->fish_id);
    v18 = common::milog::MiLogStream::operator<<<char [13],(char *[13])0>(v17, (const char (*)[13])" monster_id:");
    v19 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v18, (const unsigned int *)(v2 + 32));
    v20 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(v19, (const char (*)[16])off_25185E40);
    v21 = std::map<unsigned int,unsigned int>::operator[](
            &this->monster_killed_num_map_,
            (const std::map<unsigned int,unsigned int>::key_type *)(v2 + 32));
    v22 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v20, v21);
    v8 = common::milog::MiLogStream::operator<<<char [13],(char *[13])0>(v22, (const char (*)[13])" player_uid:");
    if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
      __asan_report_load8();
  }
  else
  {
    common::milog::MiLogStream::create(
      &v27,
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/scene/player_scene_comp.cpp",
      "onFishingSucc",
      4531);
    v6 = common::milog::MiLogStream::operator<<<char [9],(char *[9])0>(&v27, (const char (*)[9])"fish_id:");
    v7 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v6, &event->fish_id);
    v8 = common::milog::MiLogStream::operator<<<char [24],(char *[24])0>(
           v7,
           (const char (*)[24])" config not found, uid:");
    if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
      __asan_report_load8();
  }
  val = Player::getUid(this->player_);
  common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v8, &val);
  common::milog::MiLogStream::~MiLogStream(&v27);
  if ( v28 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
  }
};

// Line 4542: range 0000000013E68F9A-0000000013E6928E
void __cdecl PlayerSceneComp::onCaptureSuccEvent(PlayerSceneComp *const this, const CaptureSuccEvent *event)
{
  unsigned __int64 v2; // rbx
  __int64 v3; // rax
  unsigned __int64 v4; // r13
  std::map<unsigned int,unsigned int>::mapped_type *v5; // rax
  unsigned int *v6; // rdx
  SelectType_0 v7; // r14d
  char *v8; // rsi
  std::map<unsigned int,unsigned int>::mapped_type *v9; // rax
  SelectType_0 *v10; // rdx
  char v11; // cl
  common::milog::MiLogStream *v12; // rax
  common::milog::MiLogStream *v13; // rax
  common::milog::MiLogStream *v14; // r14
  std::map<unsigned int,unsigned int>::mapped_type *v15; // rax
  common::milog::MiLogStream *v16; // rax
  common::milog::MiLogStream *v17; // r12
  unsigned int val; // [rsp+1Ch] [rbp-94h] BYREF
  common::milog::MiLogStream v19; // [rsp+20h] [rbp-90h] BYREF
  char v20[112]; // [rsp+40h] [rbp-70h] BYREF

  v2 = (unsigned __int64)v20;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_0(64LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "1 32 4 15 monster_id:4543";
  *(_QWORD *)(v2 + 16) = PlayerSceneComp::onCaptureSuccEvent;
  v4 = v2 >> 3;
  *(_DWORD *)(v4 + 2147450880) = -235802127;
  *(_DWORD *)(v4 + 2147450884) = -202116348;
  if ( *(_BYTE *)(((unsigned __int64)&event->monster_id >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&event->monster_id >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4(&event->monster_id);
  }
  *(_DWORD *)(v2 + 32) = event->monster_id;
  v5 = std::map<unsigned int,unsigned int>::operator[](
         &this->monster_captured_num_map_,
         (const std::map<unsigned int,unsigned int>::key_type *)(v2 + 32));
  v6 = v5;
  if ( *(_BYTE *)(((unsigned __int64)v5 >> 3) + 0x7FFF8000) != 0
    && (char)(((unsigned __int8)v5 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)v5 >> 3) + 0x7FFF8000) )
  {
    __asan_report_load4(v5);
  }
  v7 = SAFE_ADD<unsigned int,int>(*v6, 1);
  v8 = (char *)(v2 + 32);
  v9 = std::map<unsigned int,unsigned int>::operator[](
         &this->monster_captured_num_map_,
         (const std::map<unsigned int,unsigned int>::key_type *)(v2 + 32));
  v10 = v9;
  v11 = *(_BYTE *)(((unsigned __int64)v9 >> 3) + 0x7FFF8000);
  if ( v11 != 0 && (char)(((unsigned __int8)v9 & 7) + 3) >= v11 )
  {
    LOBYTE(v8) = v11 != 0;
    __asan_report_store4(v9, v8, (_BYTE)v9);
  }
  *v10 = v7;
  common::milog::MiLogStream::create(
    &v19,
    &common::milog::MiLogDefault::default_log_obj_,
    1u,
    "./src/scene/player_scene_comp.cpp",
    "onCaptureSuccEvent",
    4546);
  v12 = common::milog::MiLogStream::operator<<<char [12],(char *[12])0>(&v19, (const char (*)[12])"monster_id:");
  v13 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v12, (const unsigned int *)(v2 + 32));
  v14 = common::milog::MiLogStream::operator<<<char [18],(char *[18])0>(v13, (const char (*)[18])off_25185EE0);
  v15 = std::map<unsigned int,unsigned int>::operator[](
          &this->monster_captured_num_map_,
          (const std::map<unsigned int,unsigned int>::key_type *)(v2 + 32));
  v16 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v14, v15);
  v17 = common::milog::MiLogStream::operator<<<char [13],(char *[13])0>(v16, (const char (*)[13])" player_uid:");
  if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
    __asan_report_load8();
  val = Player::getUid(this->player_);
  common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v17, &val);
  common::milog::MiLogStream::~MiLogStream(&v19);
  if ( v20 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
  }
};

// Line 4552: range 0000000013E69290-0000000013E693E3
void __cdecl PlayerSceneComp::onWorldPlayerChangeEvent(
        PlayerSceneComp *const this,
        const WorldPlayerChangeEvent *event)
{
  char v2; // al
  const WorldPlayerChangeEvent *eventa; // [rsp+0h] [rbp-10h]

  eventa = event;
  if ( *(_BYTE *)(((unsigned __int64)&this->quit_mp_begin_time_ >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->quit_mp_begin_time_ >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4(&this->quit_mp_begin_time_);
  }
  if ( this->quit_mp_begin_time_ )
  {
    if ( *(char *)(((unsigned __int64)&event->is_enter >> 3) + 0x7FFF8000) < 0 )
      __asan_report_load1(&event->is_enter);
    if ( event->is_enter )
      goto LABEL_12;
    event = (const WorldPlayerChangeEvent *)((((_BYTE)event + 28) & 7u) + 3);
    if ( *(_BYTE *)(((unsigned __int64)&eventa->cur_num >> 3) + 0x7FFF8000) != 0
      && (char)((((_BYTE)eventa + 28) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&eventa->cur_num >> 3) + 0x7FFF8000) )
    {
      __asan_report_load4(&eventa->cur_num);
    }
    if ( eventa->cur_num == 1 && PlayerSceneComp::isMyWorldInMpMode(this) )
      v2 = 1;
    else
LABEL_12:
      v2 = 0;
    if ( v2 )
    {
      PlayerSceneComp::internalQuitMpMode(this);
      if ( *(_BYTE *)(((unsigned __int64)&this->quit_mp_begin_time_ >> 3) + 0x7FFF8000) != 0
        && *(_BYTE *)(((unsigned __int64)&this->quit_mp_begin_time_ >> 3) + 0x7FFF8000) <= 3 )
      {
        __asan_report_store4(&this->quit_mp_begin_time_, event, (_BYTE)this - 96);
      }
      this->quit_mp_begin_time_ = 0;
    }
  }
};

// Line 4567: range 0000000013E693E4-0000000013E698EB
__int64 __fastcall PlayerSceneComp::setOneOffVersionOnGroupProductBin(
        PlayerSceneComp *const this,
        proto::GroupProductBin *product_bin,
        proto::ProtEntityType type,
        uint32_t config_id,
        uint32_t version)
{
  unsigned __int64 v5; // rbx
  __int64 v6; // rax
  unsigned __int64 v7; // r13
  unsigned int v8; // r12d
  const std::string *v9; // rax
  const char *v10; // rax
  __int64 result; // rax
  google::protobuf::Map<unsigned int,unsigned int> *v12; // rax
  unsigned int *v13; // rax
  unsigned int v14; // r14d
  unsigned int v15; // r12d
  const std::string *v16; // rax
  const char *v17; // rax
  unsigned int v18; // r14d
  unsigned int v19; // r12d
  const std::string *v20; // rax
  __int64 v21; // rax
  bool v22; // dl
  unsigned int v23; // r12d
  const std::string *v24; // rax
  const char *v25; // rax
  google::protobuf::Map<unsigned int,unsigned int> *one_off_map; // [rsp+20h] [rbp-A0h]
  unsigned int *old_version; // [rsp+28h] [rbp-98h]
  common::milog::MiLogStream v31; // [rsp+30h] [rbp-90h] BYREF
  char v32[112]; // [rsp+50h] [rbp-70h] BYREF

  v5 = (unsigned __int64)v32;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v6 = __asan_stack_malloc_0(64LL);
    if ( v6 )
      v5 = v6;
  }
  *(_QWORD *)v5 = 1102416563LL;
  *(_QWORD *)(v5 + 8) = "1 32 4 14 config_id:4566";
  *(_QWORD *)(v5 + 16) = PlayerSceneComp::setOneOffVersionOnGroupProductBin;
  v7 = v5 >> 3;
  *(_DWORD *)(v7 + 2147450880) = -235802127;
  *(_DWORD *)(v7 + 2147450884) = -202116348;
  *(_DWORD *)(v5 + 32) = config_id;
  if ( type == PROT_ENTITY_GADGET || type == PROT_ENTITY_MONSTER )
  {
    if ( type == PROT_ENTITY_GADGET )
      v12 = proto::GroupProductBin::mutable_gadget_one_off_map(product_bin);
    else
      v12 = proto::GroupProductBin::mutable_monster_one_off_map(product_bin);
    one_off_map = v12;
    if ( google::protobuf::Map<unsigned int,unsigned int>::count(
           v12,
           (const google::protobuf::Map<unsigned int,unsigned int>::key_type *)(v5 + 32)) )
    {
      v13 = google::protobuf::Map<unsigned int,unsigned int>::operator[](
              one_off_map,
              (const google::protobuf::Map<unsigned int,unsigned int>::key_type *)(v5 + 32));
      old_version = v13;
      if ( *(_BYTE *)(((unsigned __int64)v13 >> 3) + 0x7FFF8000) != 0
        && (char)(((unsigned __int8)v13 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)v13 >> 3) + 0x7FFF8000) )
      {
        __asan_report_load4(v13);
      }
      if ( version > *old_version )
      {
        common::milog::MiLogStream::create(
          &v31,
          &common::milog::MiLogDefault::default_log_obj_,
          1u,
          "./src/scene/player_scene_comp.cpp",
          "setOneOffVersionOnGroupProductBin",
          4583);
        if ( *(_BYTE *)(((unsigned __int64)old_version >> 3) + 0x7FFF8000) != 0
          && (char)(((unsigned __int8)old_version & 7) + 3) >= *(_BYTE *)(((unsigned __int64)old_version >> 3)
                                                                        + 0x7FFF8000) )
        {
          __asan_report_load4(old_version);
        }
        v18 = *old_version;
        v19 = *(_DWORD *)(v5 + 32);
        v20 = proto::ProtEntityType_Name[abi:cxx11](type);
        v21 = std::string::c_str(v20);
        common::milog::MiLogStream::operator()(&v31, off_25186080, v21, v19, v18, version);
        common::milog::MiLogStream::~MiLogStream(&v31);
        v22 = *(_BYTE *)(((unsigned __int64)old_version >> 3) + 0x7FFF8000) != 0
           && (char)(((unsigned __int8)old_version & 7) + 3) >= *(_BYTE *)(((unsigned __int64)old_version >> 3)
                                                                         + 0x7FFF8000);
        if ( v22 )
          __asan_report_store4(old_version, ((unsigned __int8)old_version & 7u) + 3, v22);
        *old_version = version;
        result = 1LL;
      }
      else
      {
        common::milog::MiLogStream::create(
          &v31,
          &common::milog::MiLogDefault::default_log_obj_,
          3u,
          "./src/scene/player_scene_comp.cpp",
          "setOneOffVersionOnGroupProductBin",
          4580);
        v14 = *old_version;
        v15 = *(_DWORD *)(v5 + 32);
        v16 = proto::ProtEntityType_Name[abi:cxx11](type);
        v17 = (const char *)std::string::c_str(v16);
        common::milog::MiLogStream::operator()(
          &v31,
          "type=%s config_id=%u version=%u MUST be larger than current version=%u",
          v17,
          v15,
          version,
          v14);
        common::milog::MiLogStream::~MiLogStream(&v31);
        result = 0LL;
      }
    }
    else
    {
      common::milog::MiLogStream::create(
        &v31,
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/scene/player_scene_comp.cpp",
        "setOneOffVersionOnGroupProductBin",
        4588);
      v23 = *(_DWORD *)(v5 + 32);
      v24 = proto::ProtEntityType_Name[abi:cxx11](type);
      v25 = (const char *)std::string::c_str(v24);
      common::milog::MiLogStream::operator()(
        &v31,
        "type=%s config_id=%u version=%u does NOT exist in one off map",
        v25,
        v23,
        version);
      common::milog::MiLogStream::~MiLogStream(&v31);
      result = 0LL;
    }
  }
  else
  {
    common::milog::MiLogStream::create(
      &v31,
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/scene/player_scene_comp.cpp",
      "setOneOffVersionOnGroupProductBin",
      4570);
    v8 = *(_DWORD *)(v5 + 32);
    v9 = proto::ProtEntityType_Name[abi:cxx11](type);
    v10 = (const char *)std::string::c_str(v9);
    common::milog::MiLogStream::operator()(&v31, "invalid type=%s for config_id=%u version=%u", v10, v8, version);
    common::milog::MiLogStream::~MiLogStream(&v31);
    result = 0LL;
  }
  if ( v32 == (char *)v5 )
  {
    *(_QWORD *)((v5 >> 3) + 0x7FFF8000) = 0LL;
  }
  else
  {
    *(_QWORD *)v5 = 1172321806LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 4594: range 0000000013E698EC-0000000013E6A009
_BOOL8 __fastcall PlayerSceneComp::getOneoffVersion(
        PlayerSceneComp *const this,
        proto::ProtEntityType type,
        uint32_t scene_id,
        uint32_t dungeon_id,
        uint32_t group_id,
        uint32_t config_id,
        uint32_t *version)
{
  unsigned __int64 v7; // r12
  __int64 v8; // rax
  _DWORD *v9; // r13
  __int64 v10; // rbx
  const std::string *v11; // rax
  const char *v12; // rax
  _BOOL8 result; // rax
  __int64 v14; // r14
  const std::string *v15; // rax
  const char *v16; // rax
  const google::protobuf::Map<unsigned int,unsigned int> *v17; // rax
  __int64 v18; // rsi
  unsigned int v19; // r14d
  google::protobuf::Map<unsigned int,unsigned int>::const_pointer v20; // rdx
  unsigned int *p_second; // rax
  uint32_t second; // edx
  google::protobuf::Map<unsigned int,unsigned int>::const_pointer v23; // rdx
  unsigned int *v24; // rax
  char v25; // cl
  BlockDataMgr *BlockDataMgr; // rax
  const google::protobuf::Map<unsigned int,unsigned int> *v27; // rax
  __int64 v28; // rsi
  unsigned int v29; // r14d
  google::protobuf::Map<unsigned int,unsigned int>::const_pointer v30; // rdx
  unsigned int *v31; // rax
  uint32_t v32; // edx
  google::protobuf::Map<unsigned int,unsigned int>::const_pointer v33; // rdx
  unsigned int *v34; // rax
  char v35; // cl
  bool res; // [rsp+2Fh] [rbp-111h]
  const proto::GroupProductBin *group_product_bin; // [rsp+30h] [rbp-110h]
  const google::protobuf::Map<unsigned int,unsigned int> *one_off_map; // [rsp+38h] [rbp-108h]
  const proto::GroupProductBin *block_product_bin_ptr; // [rsp+40h] [rbp-100h]
  const google::protobuf::Map<unsigned int,unsigned int> *one_off_map_0; // [rsp+48h] [rbp-F8h]
  google::protobuf::Map<unsigned int,unsigned int>::const_iterator b; // [rsp+50h] [rbp-F0h] BYREF
  common::milog::MiLogStream v47; // [rsp+70h] [rbp-D0h] BYREF
  char v48[176]; // [rsp+90h] [rbp-B0h] BYREF

  v7 = (unsigned __int64)v48;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v8 = __asan_stack_malloc_1(128LL);
    if ( v8 )
      v7 = v8;
  }
  *(_QWORD *)v7 = 1102416563LL;
  *(_QWORD *)(v7 + 8) = "2 48 4 14 config_id:4593 64 24 7 it:4624";
  *(_QWORD *)(v7 + 16) = PlayerSceneComp::getOneoffVersion;
  v9 = (_DWORD *)(v7 >> 3);
  v9[536862720] = -235802127;
  v9[536862721] = -234556943;
  v9[536862722] = -218103808;
  v9[536862723] = -202116109;
  *(_DWORD *)(v7 + 48) = config_id;
  if ( type == PROT_ENTITY_GADGET || type == PROT_ENTITY_MONSTER )
  {
    res = 0;
    group_product_bin = PlayerSceneComp::findGroupProductBin(this, scene_id, dungeon_id, group_id);
    if ( group_product_bin )
    {
      if ( type == PROT_ENTITY_GADGET )
        v17 = proto::GroupProductBin::gadget_one_off_map(group_product_bin);
      else
        v17 = proto::GroupProductBin::monster_one_off_map(group_product_bin);
      one_off_map = v17;
      google::protobuf::Map<unsigned int,unsigned int>::find(
        (google::protobuf::Map<unsigned int,unsigned int>::const_iterator *)(v7 + 64),
        v17,
        (const google::protobuf::Map<unsigned int,unsigned int>::key_type *)(v7 + 48));
      google::protobuf::Map<unsigned int,unsigned int>::end(&b, one_off_map);
      if ( google::protobuf::operator!=(
             (const google::protobuf::Map<unsigned int,unsigned int>::const_iterator *)(v7 + 64),
             &b) )
      {
        v18 = ((unsigned __int8)version & 7u) + 3;
        if ( *(_BYTE *)(((unsigned __int64)version >> 3) + 0x7FFF8000) != 0
          && (char)(((unsigned __int8)version & 7) + 3) >= *(_BYTE *)(((unsigned __int64)version >> 3) + 0x7FFF8000) )
        {
          __asan_report_load4(version);
        }
        v19 = *version;
        v20 = google::protobuf::Map<unsigned int,unsigned int>::const_iterator::operator->((const google::protobuf::Map<unsigned int,unsigned int>::const_iterator *const)(v7 + 64));
        p_second = &v20->second;
        if ( *(_BYTE *)(((unsigned __int64)p_second >> 3) + 0x7FFF8000) != 0
          && (char)(((unsigned __int8)p_second & 7) + 3) >= *(_BYTE *)(((unsigned __int64)p_second >> 3) + 0x7FFF8000) )
        {
          __asan_report_load4(p_second);
        }
        if ( v19 <= v20->second )
        {
          v23 = google::protobuf::Map<unsigned int,unsigned int>::const_iterator::operator->((const google::protobuf::Map<unsigned int,unsigned int>::const_iterator *const)(v7 + 64));
          v24 = &v23->second;
          if ( *(_BYTE *)(((unsigned __int64)v24 >> 3) + 0x7FFF8000) != 0
            && (char)(((unsigned __int8)v24 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)v24 >> 3) + 0x7FFF8000) )
          {
            __asan_report_load4(v24);
          }
          second = v23->second;
        }
        else
        {
          v18 = ((unsigned __int8)version & 7u) + 3;
          if ( *(_BYTE *)(((unsigned __int64)version >> 3) + 0x7FFF8000) != 0
            && (char)(((unsigned __int8)version & 7) + 3) >= *(_BYTE *)(((unsigned __int64)version >> 3) + 0x7FFF8000) )
          {
            __asan_report_load4(version);
          }
          second = *version;
        }
        v25 = *(_BYTE *)(((unsigned __int64)version >> 3) + 0x7FFF8000);
        if ( v25 != 0 && (char)(((unsigned __int8)version & 7) + 3) >= v25 )
        {
          LOBYTE(v18) = v25 != 0;
          __asan_report_store4(version, v18, second);
        }
        *version = second;
        res = 1;
      }
    }
    else
    {
      common::milog::MiLogStream::create(
        &v47,
        &common::milog::MiLogDefault::default_log_obj_,
        1u,
        "./src/scene/player_scene_comp.cpp",
        "getOneoffVersion",
        4606);
      v14 = *(unsigned int *)(v7 + 48);
      v15 = proto::ProtEntityType_Name[abi:cxx11](type);
      v16 = (const char *)std::string::c_str(v15);
      common::milog::MiLogStream::operator()(
        &v47,
        "oneoff record does not exist for type=%s scene_id=%u dungeon_id=%u group_id=%u config_id=%u",
        v16,
        scene_id,
        dungeon_id,
        group_id,
        v14);
      common::milog::MiLogStream::~MiLogStream(&v47);
    }
    if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
      __asan_report_load8();
    BlockDataMgr = Player::getBlockDataMgr(this->player_);
    block_product_bin_ptr = BlockDataMgr::findGroupProductBin(BlockDataMgr, group_id);
    if ( block_product_bin_ptr )
    {
      v27 = type == PROT_ENTITY_GADGET
          ? proto::GroupProductBin::gadget_one_off_map(block_product_bin_ptr)
          : proto::GroupProductBin::monster_one_off_map(block_product_bin_ptr);
      one_off_map_0 = v27;
      google::protobuf::Map<unsigned int,unsigned int>::find(
        (google::protobuf::Map<unsigned int,unsigned int>::const_iterator *)(v7 + 64),
        v27,
        (const google::protobuf::Map<unsigned int,unsigned int>::key_type *)(v7 + 48));
      google::protobuf::Map<unsigned int,unsigned int>::end(&b, one_off_map_0);
      if ( google::protobuf::operator!=(
             (const google::protobuf::Map<unsigned int,unsigned int>::const_iterator *)(v7 + 64),
             &b) )
      {
        v28 = ((unsigned __int8)version & 7u) + 3;
        if ( *(_BYTE *)(((unsigned __int64)version >> 3) + 0x7FFF8000) != 0
          && (char)(((unsigned __int8)version & 7) + 3) >= *(_BYTE *)(((unsigned __int64)version >> 3) + 0x7FFF8000) )
        {
          __asan_report_load4(version);
        }
        v29 = *version;
        v30 = google::protobuf::Map<unsigned int,unsigned int>::const_iterator::operator->((const google::protobuf::Map<unsigned int,unsigned int>::const_iterator *const)(v7 + 64));
        v31 = &v30->second;
        if ( *(_BYTE *)(((unsigned __int64)v31 >> 3) + 0x7FFF8000) != 0
          && (char)(((unsigned __int8)v31 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)v31 >> 3) + 0x7FFF8000) )
        {
          __asan_report_load4(v31);
        }
        if ( v29 <= v30->second )
        {
          v33 = google::protobuf::Map<unsigned int,unsigned int>::const_iterator::operator->((const google::protobuf::Map<unsigned int,unsigned int>::const_iterator *const)(v7 + 64));
          v34 = &v33->second;
          if ( *(_BYTE *)(((unsigned __int64)v34 >> 3) + 0x7FFF8000) != 0
            && (char)(((unsigned __int8)v34 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)v34 >> 3) + 0x7FFF8000) )
          {
            __asan_report_load4(v34);
          }
          v32 = v33->second;
        }
        else
        {
          v28 = ((unsigned __int8)version & 7u) + 3;
          if ( *(_BYTE *)(((unsigned __int64)version >> 3) + 0x7FFF8000) != 0
            && (char)(((unsigned __int8)version & 7) + 3) >= *(_BYTE *)(((unsigned __int64)version >> 3) + 0x7FFF8000) )
          {
            __asan_report_load4(version);
          }
          v32 = *version;
        }
        v35 = *(_BYTE *)(((unsigned __int64)version >> 3) + 0x7FFF8000);
        if ( v35 != 0 && (char)(((unsigned __int8)version & 7) + 3) >= v35 )
        {
          LOBYTE(v28) = v35 != 0;
          __asan_report_store4(version, v28, v32);
        }
        *version = v32;
        res = 1;
      }
    }
    result = res;
  }
  else
  {
    common::milog::MiLogStream::create(
      &v47,
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/scene/player_scene_comp.cpp",
      "getOneoffVersion",
      4597);
    v10 = *(unsigned int *)(v7 + 48);
    v11 = proto::ProtEntityType_Name[abi:cxx11](type);
    v12 = (const char *)std::string::c_str(v11);
    common::milog::MiLogStream::operator()(
      &v47,
      "invalid type=%s for scene_id=%u dungeon_id=%u group_id=%u config_id=%u",
      v12,
      scene_id,
      dungeon_id,
      group_id,
      v10);
    common::milog::MiLogStream::~MiLogStream(&v47);
    result = 0LL;
  }
  if ( v48 == (char *)v7 )
  {
    *(_QWORD *)((v7 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v7 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v7 = 1172321806LL;
    *(_QWORD *)((v7 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v7 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 4636: range 0000000013E6A00A-0000000013E6A5D4
void __cdecl PlayerSceneComp::jumpInplace(PlayerSceneComp *const this)
{
  unsigned __int64 v1; // r12
  __int64 v2; // rax
  _DWORD *v3; // r13
  common::milog::MiLogStream *v4; // r14
  Scene *v5; // r14
  uint32_t Uid; // eax
  common::milog::MiLogStream *v7; // r14
  Scene *v8; // rsi
  bool v9; // r14
  unsigned int val; // [rsp+18h] [rbp-118h] BYREF
  EnterSceneState enter_scene_state; // [rsp+1Ch] [rbp-114h]
  common::milog::MiLogStream v12; // [rsp+20h] [rbp-110h] BYREF
  TransferReason p_reason; // [rsp+40h] [rbp-F0h] BYREF
  char v14[176]; // [rsp+80h] [rbp-B0h] BYREF

  v1 = (unsigned __int64)v14;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_1(128LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "3 32 12 8 pos:4644 64 12 8 rot:4645 96 16 18 cur_scene_ptr:4638";
  *(_QWORD *)(v1 + 16) = PlayerSceneComp::jumpInplace;
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -219020288;
  v3[536862722] = -219020288;
  v3[536862723] = -202178560;
  common::milog::MiLogStream::create(
    &v12,
    &common::milog::MiLogDefault::default_log_obj_,
    1u,
    "./src/scene/player_scene_comp.cpp",
    "jumpInplace",
    4637);
  v4 = common::milog::MiLogStream::operator<<<char [21],(char *[21])0>(&v12, (const char (*)[21])"jump in place, uid: ");
  if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
    __asan_report_load8();
  val = Player::getUid(this->player_);
  common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v4, &val);
  common::milog::MiLogStream::~MiLogStream(&v12);
  PlayerSceneComp::getCurScene((const PlayerSceneComp *const)(v1 + 96));
  if ( !std::operator==<Scene>(0LL, (const std::shared_ptr<Scene> *)(v1 + 96)) )
  {
    Vector3::Vector3((Vector3 *const)(v1 + 32), 0.0, 0.0, 0.0);
    Vector3::Vector3((Vector3 *const)(v1 + 64), 0.0, 0.0, 0.0);
    v5 = std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v1 + 96));
    if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
      __asan_report_load8();
    Uid = Player::getUid(this->player_);
    if ( Scene::getPlayerLocation(v5, Uid, (Vector3 *)(v1 + 32), (Vector3 *)(v1 + 64)) )
    {
      common::milog::MiLogStream::create(
        &v12,
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/scene/player_scene_comp.cpp",
        "jumpInplace",
        4648);
      v7 = common::milog::MiLogStream::operator<<<char [31],(char *[31])0>(
             &v12,
             (const char (*)[31])"getPlayerLocation failed, uid:");
      if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
        __asan_report_load8();
    }
    else
    {
      enter_scene_state = PlayerSceneComp::getEnterSceneState(this);
      if ( enter_scene_state == ENTER_SCENE_NONE || enter_scene_state == ENTER_SCENE_POST )
      {
        TransferReason::TransferReason(&p_reason, ENTER_REASON_HOST_FROM_SINGLE_TO_MP);
        v8 = std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::operator*((const std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v1 + 96));
        v9 = PlayerSceneComp::jumpToScene(
               this,
               v8,
               (const Vector3 *)(v1 + 32),
               (const Vector3 *)(v1 + 64),
               0,
               &p_reason) != 0;
        TransferReason::~TransferReason(&p_reason);
        if ( !v9 )
          goto LABEL_22;
        common::milog::MiLogStream::create(
          &v12,
          &common::milog::MiLogDefault::default_log_obj_,
          3u,
          "./src/scene/player_scene_comp.cpp",
          "jumpInplace",
          4660);
        v7 = common::milog::MiLogStream::operator<<<char [26],(char *[26])0>(
               &v12,
               (const char (*)[26])"jumpToScene failed, uid: ");
        if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
          __asan_report_load8();
      }
      else
      {
        common::milog::MiLogStream::create(
          &v12,
          &common::milog::MiLogDefault::default_log_obj_,
          2u,
          "./src/scene/player_scene_comp.cpp",
          "jumpInplace",
          4656);
        v7 = common::milog::MiLogStream::operator<<<char [60],(char *[60])0>(
               &v12,
               (const char (*)[60])"other mp in, beginEnterScene with last one not finish, uid:");
        if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
          __asan_report_load8();
      }
    }
    val = Player::getUid(this->player_);
    common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v7, &val);
    common::milog::MiLogStream::~MiLogStream(&v12);
  }
LABEL_22:
  std::shared_ptr<Scene>::~shared_ptr((std::shared_ptr<Scene> *const)(v1 + 96));
  if ( v14 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
};

// Line 4665: range 0000000013E6A5D6-0000000013E6A81A
bool __cdecl PlayerSceneComp::isMyWorldInMpMode(PlayerSceneComp *const this)
{
  unsigned __int64 v1; // rbx
  __int64 v2; // rax
  unsigned __int64 v3; // r12
  common::milog::MiLogStream *v4; // r14
  char v5; // r14
  unsigned __int64 v6; // rax
  unsigned __int64 v7; // rdx
  bool result; // al
  unsigned int val; // [rsp+1Ch] [rbp-94h] BYREF
  common::milog::MiLogStream v10; // [rsp+20h] [rbp-90h] BYREF
  char v11[112]; // [rsp+40h] [rbp-70h] BYREF

  v1 = (unsigned __int64)v11;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_0(64LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "1 32 16 14 world_ptr:4666";
  *(_QWORD *)(v1 + 16) = PlayerSceneComp::isMyWorldInMpMode;
  v3 = v1 >> 3;
  *(_DWORD *)(v3 + 2147450880) = -235802127;
  *(_DWORD *)(v3 + 2147450884) = -202178560;
  PlayerSceneComp::getMyPlayerWorld((const PlayerSceneComp *const)(v1 + 32));
  if ( std::operator==<PlayerWorld>(0LL, (const std::shared_ptr<PlayerWorld> *)(v1 + 32)) )
  {
    common::milog::MiLogStream::create(
      &v10,
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/scene/player_scene_comp.cpp",
      "isMyWorldInMpMode",
      4669);
    v4 = common::milog::MiLogStream::operator<<<char [20],(char *[20])0>(
           &v10,
           (const char (*)[20])"world is null, uid:");
    if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
      __asan_report_load8();
    val = Player::getUid(this->player_);
    common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v4, &val);
    common::milog::MiLogStream::~MiLogStream(&v10);
    v5 = 0;
  }
  else
  {
    v6 = (unsigned __int64)std::__shared_ptr_access<PlayerWorld,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<PlayerWorld,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v1 + 32));
    if ( *(_BYTE *)((v6 >> 3) + 0x7FFF8000) )
      v6 = __asan_report_load8();
    v7 = *(_QWORD *)v6 + 184LL;
    if ( *(_BYTE *)((v7 >> 3) + 0x7FFF8000) )
      v6 = __asan_report_load8();
    v5 = (*(__int64 (__fastcall **)(unsigned __int64))v7)(v6);
  }
  std::shared_ptr<PlayerWorld>::~shared_ptr((std::shared_ptr<PlayerWorld> *const)(v1 + 32));
  result = v5;
  if ( v11 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 4677: range 0000000013E6A81C-0000000013E6B24D
int32_t __cdecl PlayerSceneComp::changeMyWorldToSingleMode(PlayerSceneComp *const this)
{
  unsigned __int64 v1; // r12
  __int64 v2; // rax
  _DWORD *v3; // r13
  common::milog::MiLogStream *v4; // rbx
  int32_t v5; // r14d
  common::milog::MiLogStream *v6; // rbx
  std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v7; // rax
  uint32_t OwnerUid; // r14d
  char v9; // al
  common::milog::MiLogStream *v10; // r14
  common::milog::MiLogStream *v11; // r14
  std::__shared_ptr_access<PlayerWorld,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v12; // rax
  common::milog::MiLogStream *v13; // r14
  PlayerScenePlayComp *ScenePlayComp; // rax
  common::milog::MiLogStream *v15; // r14
  PlayerMpPlayComp *MpPlayComp; // rax
  PlayerWorld *v17; // rax
  common::milog::MiLogStream *v18; // r14
  unsigned __int64 v19; // rax
  unsigned __int64 v20; // rdx
  __int64 Now; // rsi
  int32_t result; // eax
  unsigned int val; // [rsp+18h] [rbp-B8h] BYREF
  int32_t ret; // [rsp+1Ch] [rbp-B4h]
  common::milog::MiLogStream v25; // [rsp+20h] [rbp-B0h] BYREF
  char v26[144]; // [rsp+40h] [rbp-90h] BYREF

  v1 = (unsigned __int64)v26;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_1(96LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "2 32 16 19 dest_scene_ptr:4692 64 16 14 world_ptr:4699";
  *(_QWORD *)(v1 + 16) = PlayerSceneComp::changeMyWorldToSingleMode;
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -219021312;
  v3[536862722] = -202178560;
  if ( !PlayerSceneComp::isMyWorldInMpMode(this) )
  {
    common::milog::MiLogStream::create(
      &v25,
      &common::milog::MiLogDefault::default_log_obj_,
      1u,
      "./src/scene/player_scene_comp.cpp",
      "changeMyWorldToSingleMode",
      4680);
    v4 = common::milog::MiLogStream::operator<<<char [30],(char *[30])0>(
           &v25,
           (const char (*)[30])"already in single mode, uid: ");
    if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
      __asan_report_load8();
    val = Player::getUid(this->player_);
    common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v4, &val);
    common::milog::MiLogStream::~MiLogStream(&v25);
    v5 = -1;
    goto LABEL_55;
  }
  if ( PlayerSceneComp::isInMyPlayerWorld(this) )
  {
    PlayerSceneComp::getDestScene((const PlayerSceneComp *const)(v1 + 32));
    if ( !std::operator!=<Scene>(0LL, (const std::shared_ptr<Scene> *)(v1 + 32)) )
      goto LABEL_17;
    v7 = std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v1 + 32));
    OwnerUid = Scene::getOwnerUid(v7);
    if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
      __asan_report_load8();
    if ( OwnerUid == Player::getUid(this->player_) )
LABEL_17:
      v9 = 0;
    else
      v9 = 1;
    if ( v9 )
    {
      common::milog::MiLogStream::create(
        &v25,
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/scene/player_scene_comp.cpp",
        "changeMyWorldToSingleMode",
        4695);
      v10 = common::milog::MiLogStream::operator<<<char [31],(char *[31])0>(
              &v25,
              (const char (*)[31])"is entering other world, uid: ");
      if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
        __asan_report_load8();
      val = Player::getUid(this->player_);
      common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v10, &val);
      common::milog::MiLogStream::~MiLogStream(&v25);
      v5 = 1215;
      goto LABEL_54;
    }
    PlayerSceneComp::getMyPlayerWorld((const PlayerSceneComp *const)(v1 + 64));
    if ( std::operator==<PlayerWorld>(0LL, (const std::shared_ptr<PlayerWorld> *)(v1 + 64)) )
    {
      common::milog::MiLogStream::create(
        &v25,
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/scene/player_scene_comp.cpp",
        "changeMyWorldToSingleMode",
        4702);
      v11 = common::milog::MiLogStream::operator<<<char [20],(char *[20])0>(
              &v25,
              (const char (*)[20])"world is null, uid:");
      if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
        __asan_report_load8();
      val = Player::getUid(this->player_);
      common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v11, &val);
      common::milog::MiLogStream::~MiLogStream(&v25);
      v5 = -1;
    }
    else
    {
      v12 = std::__shared_ptr_access<PlayerWorld,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<PlayerWorld,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v1 + 64));
      if ( World::getPlayerCount(v12) <= 1 )
      {
        v5 = PlayerSceneComp::internalQuitMpMode(this);
      }
      else
      {
        common::milog::MiLogStream::create(
          &v25,
          &common::milog::MiLogDefault::default_log_obj_,
          1u,
          "./src/scene/player_scene_comp.cpp",
          "changeMyWorldToSingleMode",
          4709);
        v13 = common::milog::MiLogStream::operator<<<char [53],(char *[53])0>(
                &v25,
                (const char (*)[53])"world has other players, need kick them first, uid: ");
        if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
          __asan_report_load8();
        val = Player::getUid(this->player_);
        common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v13, &val);
        common::milog::MiLogStream::~MiLogStream(&v25);
        if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
          __asan_report_load8();
        ScenePlayComp = Player::getScenePlayComp(this->player_);
        if ( PlayerScenePlayComp::isAnyScenePlayBattleEnabled(ScenePlayComp) )
        {
          common::milog::MiLogStream::create(
            &v25,
            &common::milog::MiLogDefault::default_log_obj_,
            1u,
            "./src/scene/player_scene_comp.cpp",
            "changeMyWorldToSingleMode",
            4713);
          v15 = common::milog::MiLogStream::operator<<<char [28],(char *[28])0>(
                  &v25,
                  (const char (*)[28])"in scene play battle, uid: ");
          if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
            __asan_report_load8();
        }
        else
        {
          if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
            __asan_report_load8();
          MpPlayComp = Player::getMpPlayComp(this->player_);
          if ( !PlayerMpPlayComp::isAnyMpPlayBattleStarted(MpPlayComp) )
          {
            v17 = std::__shared_ptr_access<PlayerWorld,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<PlayerWorld,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v1 + 64));
            ret = PlayerWorld::checkKickAllPlayer(v17);
            if ( ret )
            {
              common::milog::MiLogStream::create(
                &v25,
                &common::milog::MiLogDefault::default_log_obj_,
                1u,
                "./src/scene/player_scene_comp.cpp",
                "changeMyWorldToSingleMode",
                4728);
              v18 = common::milog::MiLogStream::operator<<<char [33],(char *[33])0>(
                      &v25,
                      (const char (*)[33])"checkKickAllPlayer failed, uid: ");
              if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
                __asan_report_load8();
              val = Player::getUid(this->player_);
              common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v18, &val);
              common::milog::MiLogStream::~MiLogStream(&v25);
              v5 = ret;
            }
            else
            {
              v19 = (unsigned __int64)std::__shared_ptr_access<PlayerWorld,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<PlayerWorld,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v1 + 64));
              if ( *(_BYTE *)((v19 >> 3) + 0x7FFF8000) )
                v19 = __asan_report_load8();
              v20 = *(_QWORD *)v19 + 120LL;
              if ( *(_BYTE *)((v20 >> 3) + 0x7FFF8000) )
                v19 = __asan_report_load8();
              (*(void (__fastcall **)(unsigned __int64, __int64, _QWORD))v20)(v19, 4LL, 0LL);
              Now = (unsigned int)common::tools::TimeUtils::getNow();
              if ( *(_BYTE *)(((unsigned __int64)&this->quit_mp_begin_time_ >> 3) + 0x7FFF8000) != 0
                && *(_BYTE *)(((unsigned __int64)&this->quit_mp_begin_time_ >> 3) + 0x7FFF8000) <= 3 )
              {
                __asan_report_store4(&this->quit_mp_begin_time_, Now, (_BYTE)this - 96);
              }
              this->quit_mp_begin_time_ = Now;
              v5 = 0;
            }
            goto LABEL_53;
          }
          common::milog::MiLogStream::create(
            &v25,
            &common::milog::MiLogDefault::default_log_obj_,
            1u,
            "./src/scene/player_scene_comp.cpp",
            "changeMyWorldToSingleMode",
            4720);
          v15 = common::milog::MiLogStream::operator<<<char [25],(char *[25])0>(
                  &v25,
                  (const char (*)[25])"in mp play battle, uid: ");
          if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
            __asan_report_load8();
        }
        val = Player::getUid(this->player_);
        common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v15, &val);
        common::milog::MiLogStream::~MiLogStream(&v25);
        v5 = 1228;
      }
    }
LABEL_53:
    std::shared_ptr<PlayerWorld>::~shared_ptr((std::shared_ptr<PlayerWorld> *const)(v1 + 64));
LABEL_54:
    std::shared_ptr<Scene>::~shared_ptr((std::shared_ptr<Scene> *const)(v1 + 32));
    goto LABEL_55;
  }
  common::milog::MiLogStream::create(
    &v25,
    &common::milog::MiLogDefault::default_log_obj_,
    1u,
    "./src/scene/player_scene_comp.cpp",
    "changeMyWorldToSingleMode",
    4687);
  v6 = common::milog::MiLogStream::operator<<<char [25],(char *[25])0>(&v25, (const char (*)[25])off_251865C0);
  if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
    __asan_report_load8();
  val = Player::getUid(this->player_);
  common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v6, &val);
  common::milog::MiLogStream::~MiLogStream(&v25);
  v5 = 1201;
LABEL_55:
  result = v5;
  if ( v26 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_DWORD *)((v1 >> 3) + 0x7FFF8008) = 0;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v1 >> 3) + 0x7FFF8008) = -168430091;
  }
  return result;
};

// Line 4742: range 0000000013E6B24E-0000000013E6BB28
int32_t __cdecl PlayerSceneComp::changeMyWorldToMpMode(PlayerSceneComp *const this)
{
  unsigned __int64 v1; // r12
  __int64 v2; // rax
  _DWORD *v3; // r13
  common::milog::MiLogStream *v4; // rbx
  int32_t v5; // r14d
  common::milog::MiLogStream *v6; // rbx
  std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v7; // rax
  uint32_t OwnerUid; // r14d
  char v9; // al
  common::milog::MiLogStream *v10; // r14
  PlayerBasicComp *BasicComp; // rax
  common::milog::MiLogStream *v12; // r14
  bool v13; // r14
  common::milog::MiLogStream *v14; // r14
  common::milog::MiLogStream *v15; // r14
  PlayerWorld *v16; // rax
  common::milog::MiLogStream *v17; // r14
  int32_t result; // eax
  unsigned int val; // [rsp+1Ch] [rbp-B4h] BYREF
  common::milog::MiLogStream v20; // [rsp+20h] [rbp-B0h] BYREF
  char v21[144]; // [rsp+40h] [rbp-90h] BYREF

  v1 = (unsigned __int64)v21;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_1(96LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "2 32 16 19 dest_scene_ptr:4757 64 16 14 world_ptr:4778";
  *(_QWORD *)(v1 + 16) = PlayerSceneComp::changeMyWorldToMpMode;
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -219021312;
  v3[536862722] = -202178560;
  if ( PlayerSceneComp::isMyWorldInMpMode(this) )
  {
    common::milog::MiLogStream::create(
      &v20,
      &common::milog::MiLogDefault::default_log_obj_,
      1u,
      "./src/scene/player_scene_comp.cpp",
      "changeMyWorldToMpMode",
      4745);
    v4 = common::milog::MiLogStream::operator<<<char [26],(char *[26])0>(
           &v20,
           (const char (*)[26])"already in mp mode, uid: ");
    if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
      __asan_report_load8();
    val = Player::getUid(this->player_);
    common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v4, &val);
    common::milog::MiLogStream::~MiLogStream(&v20);
    v5 = -1;
  }
  else if ( !PlayerSceneComp::isInMyPlayerWorld(this) )
  {
    common::milog::MiLogStream::create(
      &v20,
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/scene/player_scene_comp.cpp",
      "changeMyWorldToMpMode",
      4752);
    v6 = common::milog::MiLogStream::operator<<<char [25],(char *[25])0>(&v20, (const char (*)[25])off_251865C0);
    if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
      __asan_report_load8();
    val = Player::getUid(this->player_);
    common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v6, &val);
    common::milog::MiLogStream::~MiLogStream(&v20);
    v5 = 1201;
  }
  else
  {
    if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
      __asan_report_load8();
    Player::getSceneComp(this->player_);
    PlayerSceneComp::getDestScene((const PlayerSceneComp *const)(v1 + 32));
    if ( !std::operator!=<Scene>(0LL, (const std::shared_ptr<Scene> *)(v1 + 32)) )
      goto LABEL_19;
    v7 = std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v1 + 32));
    OwnerUid = Scene::getOwnerUid(v7);
    if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
      __asan_report_load8();
    if ( OwnerUid == Player::getUid(this->player_) )
LABEL_19:
      v9 = 0;
    else
      v9 = 1;
    if ( v9 )
    {
      common::milog::MiLogStream::create(
        &v20,
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/scene/player_scene_comp.cpp",
        "changeMyWorldToMpMode",
        4760);
      v10 = common::milog::MiLogStream::operator<<<char [31],(char *[31])0>(
              &v20,
              (const char (*)[31])"is entering other world, uid: ");
      if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
        __asan_report_load8();
      val = Player::getUid(this->player_);
      common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v10, &val);
      common::milog::MiLogStream::~MiLogStream(&v20);
      v5 = 1215;
    }
    else
    {
      if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
        __asan_report_load8();
      BasicComp = Player::getBasicComp(this->player_);
      if ( !PlayerBasicComp::isStateOpen(BasicComp, 0x31u) )
      {
        common::milog::MiLogStream::create(
          &v20,
          &common::milog::MiLogDefault::default_log_obj_,
          3u,
          "./src/scene/player_scene_comp.cpp",
          "changeMyWorldToMpMode",
          4767);
        v12 = common::milog::MiLogStream::operator<<<char [29],(char *[29])0>(
                &v20,
                (const char (*)[29])"mp open state not open, uid:");
        if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
          __asan_report_load8();
        val = Player::getUid(this->player_);
        common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v12, &val);
        common::milog::MiLogStream::~MiLogStream(&v20);
        v5 = 1223;
      }
      else
      {
        if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
          __asan_report_load8();
        Player::checkMpModeAvailability((std::pair<int,std::vector<unsigned int> > *)&v20, this->player_);
        v13 = LODWORD(v20.log_) != 0;
        std::pair<int,std::vector<unsigned int>>::~pair((std::pair<int,std::vector<unsigned int> > *const)&v20);
        if ( v13 )
        {
          common::milog::MiLogStream::create(
            &v20,
            &common::milog::MiLogDefault::default_log_obj_,
            3u,
            "./src/scene/player_scene_comp.cpp",
            "changeMyWorldToMpMode",
            4774);
          v14 = common::milog::MiLogStream::operator<<<char [27],(char *[27])0>(
                  &v20,
                  (const char (*)[27])"mp mode unavailable, uid: ");
          if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
            __asan_report_load8();
          val = Player::getUid(this->player_);
          common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v14, &val);
          common::milog::MiLogStream::~MiLogStream(&v20);
          v5 = 1204;
        }
        else
        {
          PlayerSceneComp::getMyPlayerWorld((const PlayerSceneComp *const)(v1 + 64));
          if ( std::operator==<PlayerWorld>(0LL, (const std::shared_ptr<PlayerWorld> *)(v1 + 64)) )
          {
            common::milog::MiLogStream::create(
              &v20,
              &common::milog::MiLogDefault::default_log_obj_,
              3u,
              "./src/scene/player_scene_comp.cpp",
              "changeMyWorldToMpMode",
              4781);
            v15 = common::milog::MiLogStream::operator<<<char [20],(char *[20])0>(
                    &v20,
                    (const char (*)[20])"world is null, uid:");
            if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
              __asan_report_load8();
            val = Player::getUid(this->player_);
            common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v15, &val);
            common::milog::MiLogStream::~MiLogStream(&v20);
            v5 = -1;
          }
          else
          {
            v16 = std::__shared_ptr_access<PlayerWorld,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<PlayerWorld,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v1 + 64));
            PlayerWorld::setIsInMpMode(v16, 1);
            PlayerSceneComp::jumpInplace(this);
            common::milog::MiLogStream::create(
              &v20,
              &common::milog::MiLogDefault::default_log_obj_,
              1u,
              "./src/scene/player_scene_comp.cpp",
              "changeMyWorldToMpMode",
              4788);
            v17 = common::milog::MiLogStream::operator<<<char [39],(char *[39])0>(
                    &v20,
                    (const char (*)[39])"change my world to mp mode succ, uid: ");
            if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
              __asan_report_load8();
            val = Player::getUid(this->player_);
            common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v17, &val);
            common::milog::MiLogStream::~MiLogStream(&v20);
            v5 = 0;
          }
          std::shared_ptr<PlayerWorld>::~shared_ptr((std::shared_ptr<PlayerWorld> *const)(v1 + 64));
        }
      }
    }
    std::shared_ptr<Scene>::~shared_ptr((std::shared_ptr<Scene> *const)(v1 + 32));
  }
  result = v5;
  if ( v21 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_DWORD *)((v1 >> 3) + 0x7FFF8008) = 0;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v1 >> 3) + 0x7FFF8008) = -168430091;
  }
  return result;
};

// Line 4794: range 0000000013E6BB2A-0000000013E6C14A
int32_t __cdecl PlayerSceneComp::internalQuitMpMode(PlayerSceneComp *const this)
{
  unsigned __int64 v1; // r13
  __int64 v2; // rax
  _DWORD *v3; // r12
  common::milog::MiLogStream *v4; // r14
  int32_t v5; // r14d
  PlayerWorld *v6; // rax
  common::milog::MiLogStream *v7; // r14
  PlayerWorld *v8; // rax
  Scene *v9; // rax
  SceneGalleryComp *GalleryComp; // rax
  Scene *v11; // rax
  std::__shared_ptr_access<proto::PlayerQuitFromMpNotify,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v12; // rax
  Player *player; // r14
  std::__shared_ptr_access<proto::ClientReconnectNotify,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v14; // rax
  Player *v15; // r14
  common::milog::MiLogStream *v16; // r14
  int32_t result; // eax
  unsigned int val; // [rsp+1Ch] [rbp-104h] BYREF
  std::shared_ptr<proto::PlayerQuitFromMpNotify> __r; // [rsp+20h] [rbp-100h] BYREF
  common::milog::MiLogStream v20; // [rsp+30h] [rbp-F0h] BYREF
  char v21[208]; // [rsp+50h] [rbp-D0h] BYREF

  v1 = (unsigned __int64)v21;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_2(160LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "4 32 16 14 world_ptr:4795 64 16 14 scene_ptr:4801 96 16 20 quit_notify_ptr:4816 128 16 15 notify_ptr:4820";
  *(_QWORD *)(v1 + 16) = PlayerSceneComp::internalQuitMpMode;
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -219021312;
  v3[536862722] = -219021312;
  v3[536862723] = -219021312;
  v3[536862724] = -202178560;
  PlayerSceneComp::getMyPlayerWorld((const PlayerSceneComp *const)(v1 + 32));
  if ( std::operator==<PlayerWorld>(0LL, (const std::shared_ptr<PlayerWorld> *)(v1 + 32)) )
  {
    common::milog::MiLogStream::create(
      &v20,
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/scene/player_scene_comp.cpp",
      "internalQuitMpMode",
      4798);
    v4 = common::milog::MiLogStream::operator<<<char [20],(char *[20])0>(
           &v20,
           (const char (*)[20])"world is null, uid:");
    if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
      __asan_report_load8();
    val = Player::getUid(this->player_);
    common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v4, &val);
    common::milog::MiLogStream::~MiLogStream(&v20);
    v5 = -1;
  }
  else
  {
    PlayerSceneComp::getCurScene((const PlayerSceneComp *const)(v1 + 64));
    v6 = std::__shared_ptr_access<PlayerWorld,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<PlayerWorld,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v1 + 32));
    if ( !PlayerWorld::isMpToSingleValid(v6) )
    {
      common::milog::MiLogStream::create(
        &v20,
        &common::milog::MiLogDefault::default_log_obj_,
        1u,
        "./src/scene/player_scene_comp.cpp",
        "internalQuitMpMode",
        4805);
      v7 = common::milog::MiLogStream::operator<<<char [28],(char *[28])0>(
             &v20,
             (const char (*)[28])"mp to single invalid, uid: ");
      if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
        __asan_report_load8();
      val = Player::getUid(this->player_);
      common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v7, &val);
      common::milog::MiLogStream::~MiLogStream(&v20);
      v5 = -1;
    }
    else
    {
      v8 = std::__shared_ptr_access<PlayerWorld,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<PlayerWorld,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v1 + 32));
      PlayerWorld::setIsInMpMode(v8, 0);
      if ( std::operator!=<Scene>((const std::shared_ptr<Scene> *)(v1 + 64), 0LL) )
      {
        v9 = std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v1 + 64));
        GalleryComp = Scene::getGalleryComp(v9);
        SceneGalleryComp::onQuitMpMode(GalleryComp);
        v11 = std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v1 + 64));
        Scene::tryClearMassiveData(v11, 1);
      }
      common::tools::perf::make_shared<proto::PlayerQuitFromMpNotify>();
      v12 = std::__shared_ptr_access<proto::PlayerQuitFromMpNotify,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<proto::PlayerQuitFromMpNotify,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v1 + 96));
      proto::PlayerQuitFromMpNotify::set_reason(v12, PlayerQuitFromMpNotify_QuitReason_HOST_NO_OTHER_PLAYER);
      if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
        __asan_report_load8();
      player = this->player_;
      std::dynamic_pointer_cast<google::protobuf::Message const,proto::PlayerQuitFromMpNotify>(&__r);
      Player::sendMessage(player, (common::minet::ConstMessagePtr *)&__r, 0LL);
      std::shared_ptr<google::protobuf::Message const>::~shared_ptr((std::shared_ptr<const google::protobuf::Message> *const)&__r);
      common::tools::perf::make_shared<proto::ClientReconnectNotify>();
      v14 = std::__shared_ptr_access<proto::ClientReconnectNotify,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<proto::ClientReconnectNotify,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v1 + 128));
      proto::ClientReconnectNotify::set_reason(v14, CLIENT_RECONNNECT_QUIT_MP);
      if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
        __asan_report_load8();
      v15 = this->player_;
      std::dynamic_pointer_cast<google::protobuf::Message const,proto::ClientReconnectNotify>((const std::shared_ptr<proto::ClientReconnectNotify> *)&__r);
      Player::sendMessage(v15, (common::minet::ConstMessagePtr *)&__r, 0LL);
      std::shared_ptr<google::protobuf::Message const>::~shared_ptr((std::shared_ptr<const google::protobuf::Message> *const)&__r);
      common::milog::MiLogStream::create(
        &v20,
        &common::milog::MiLogDefault::default_log_obj_,
        1u,
        "./src/scene/player_scene_comp.cpp",
        "internalQuitMpMode",
        4823);
      v16 = common::milog::MiLogStream::operator<<<char [43],(char *[43])0>(
              &v20,
              (const char (*)[43])"change my world to single mode succ, uid: ");
      if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
        __asan_report_load8();
      val = Player::getUid(this->player_);
      common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v16, &val);
      common::milog::MiLogStream::~MiLogStream(&v20);
      v5 = 0;
      std::shared_ptr<proto::ClientReconnectNotify>::~shared_ptr((std::shared_ptr<proto::ClientReconnectNotify> *const)(v1 + 128));
      std::shared_ptr<proto::PlayerQuitFromMpNotify>::~shared_ptr((std::shared_ptr<proto::PlayerQuitFromMpNotify> *const)(v1 + 96));
    }
    std::shared_ptr<Scene>::~shared_ptr((std::shared_ptr<Scene> *const)(v1 + 64));
  }
  std::shared_ptr<PlayerWorld>::~shared_ptr((std::shared_ptr<PlayerWorld> *const)(v1 + 32));
  result = v5;
  if ( v21 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0LL;
    *(_DWORD *)((v1 >> 3) + 0x7FFF8010) = 0;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v1 >> 3) + 0x7FFF8010) = -168430091;
  }
  return result;
};

// Line 4829: range 0000000013E6C14C-0000000013E6C220
uint32_t __fastcall PlayerSceneComp::getMonsterBeKilledNum(const PlayerSceneComp *const this, uint32_t monster_id)
{
  unsigned __int64 v2; // rbx
  __int64 v3; // rax
  unsigned __int64 v4; // r12
  uint32_t result; // eax
  char v6[96]; // [rsp+10h] [rbp-60h] BYREF

  v2 = (unsigned __int64)v6;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_0(64LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "1 32 4 15 monster_id:4828";
  *(_QWORD *)(v2 + 16) = PlayerSceneComp::getMonsterBeKilledNum;
  v4 = v2 >> 3;
  *(_DWORD *)(v4 + 2147450880) = -235802127;
  *(_DWORD *)(v4 + 2147450884) = -202116348;
  *(_DWORD *)(v2 + 32) = monster_id;
  result = common::tools::MiscUtils::findMapWithDefaultValue<std::map<unsigned int,unsigned int>>(
             &this->monster_killed_num_map_,
             (const std::map<unsigned int,unsigned int>::key_type *)(v2 + 32),
             0);
  if ( v6 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 4834: range 0000000013E6C222-0000000013E6C2F8
uint32_t __fastcall PlayerSceneComp::getMonsterBeCapturedNum(const PlayerSceneComp *const this, uint32_t monster_id)
{
  unsigned __int64 v2; // rbx
  __int64 v3; // rax
  unsigned __int64 v4; // r12
  uint32_t result; // eax
  char v6[96]; // [rsp+10h] [rbp-60h] BYREF

  v2 = (unsigned __int64)v6;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_0(64LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "1 32 4 15 monster_id:4833";
  *(_QWORD *)(v2 + 16) = PlayerSceneComp::getMonsterBeCapturedNum;
  v4 = v2 >> 3;
  *(_DWORD *)(v4 + 2147450880) = -235802127;
  *(_DWORD *)(v4 + 2147450884) = -202116348;
  *(_DWORD *)(v2 + 32) = monster_id;
  result = common::tools::MiscUtils::findMapWithDefaultValue<std::map<unsigned int,unsigned int>>(
             &this->monster_captured_num_map_,
             (const std::map<unsigned int,unsigned int>::key_type *)(v2 + 32),
             0);
  if ( v6 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 4839: range 0000000013E6C2FA-0000000013E6C870
__int64 __fastcall PlayerSceneComp::isGotAllOneoffGatherByPointType(
        PlayerSceneComp *const this,
        uint32_t point_type,
        bool is_use_cur_scene)
{
  unsigned int v3; // r14d
  unsigned __int64 v4; // r12
  __int64 v5; // rax
  _DWORD *v6; // r13
  PlayerGmComp *GmComp; // rax
  common::milog::MiLogStream *v8; // rcx
  std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v9; // rax
  std::__detail::_Node_iterator<std::pair<unsigned int const,std::set<std::pair<unsigned int,unsigned int>> >,false,false>::pointer v10; // rax
  __int64 result; // rax
  uint32_t curr_num; // [rsp+18h] [rbp-F8h]
  uint32_t total_num; // [rsp+1Ch] [rbp-F4h]
  std::__detail::_Node_iterator_base<std::pair<unsigned int const,std::set<std::pair<unsigned int,unsigned int>> >,false> __y; // [rsp+20h] [rbp-F0h] BYREF
  const SceneScriptConfig *scene_script_config_ptr; // [rsp+28h] [rbp-E8h]
  std::shared_ptr<Scene> __r; // [rsp+30h] [rbp-E0h] BYREF
  common::milog::MiLogStream v18; // [rsp+40h] [rbp-D0h] BYREF
  char v19[176]; // [rsp+60h] [rbp-B0h] BYREF

  v4 = (unsigned __int64)v19;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v5 = __asan_stack_malloc_1(128LL);
    if ( v5 )
      v4 = v5;
  }
  *(_QWORD *)v4 = 1102416563LL;
  *(_QWORD *)(v4 + 8) = "3 48 4 15 point_type:4838 64 8 9 iter:4871 96 16 14 scene_ptr:4846";
  *(_QWORD *)(v4 + 16) = PlayerSceneComp::isGotAllOneoffGatherByPointType;
  v6 = (_DWORD *)(v4 >> 3);
  v6[536862720] = -235802127;
  v6[536862721] = -234556943;
  v6[536862722] = -218959360;
  v6[536862723] = -202178560;
  *(_DWORD *)(v4 + 48) = point_type;
  if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
    __asan_report_load8();
  GmComp = Player::getGmComp(this->player_);
  if ( PlayerGmComp::getGmSetValue<bool>(GmComp, 4u) )
  {
    common::milog::MiLogStream::create(
      &v18,
      &common::milog::MiLogDefault::default_log_obj_,
      1u,
      "./src/scene/player_scene_comp.cpp",
      "isGotAllOneoffGatherByPointType",
      4842);
    common::milog::MiLogStream::operator()(&v18, "GM force got all");
    common::milog::MiLogStream::~MiLogStream(&v18);
    v3 = 1;
    goto LABEL_23;
  }
  *(_QWORD *)(v4 + 96) = 0LL;
  *(_QWORD *)(v4 + 104) = 0LL;
  if ( is_use_cur_scene )
  {
    PlayerSceneComp::getCurScene((const PlayerSceneComp *const)&__r);
    std::shared_ptr<Scene>::operator=((std::shared_ptr<Scene> *const)(v4 + 96), &__r);
    std::shared_ptr<Scene>::~shared_ptr(&__r);
  }
  else
  {
    PlayerSceneComp::getMainWorldScene((PlayerSceneComp *const)&__r);
    std::shared_ptr<Scene>::operator=<PlayerWorldScene>(
      (std::shared_ptr<Scene> *const)(v4 + 96),
      (std::shared_ptr<PlayerWorldScene> *)&__r);
    std::shared_ptr<PlayerWorldScene>::~shared_ptr((std::shared_ptr<PlayerWorldScene> *const)&__r);
  }
  if ( std::operator==<Scene>(0LL, (const std::shared_ptr<Scene> *)(v4 + 96)) )
  {
    common::milog::MiLogStream::create(
      &v18,
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/scene/player_scene_comp.cpp",
      "isGotAllOneoffGatherByPointType",
      4858);
    v8 = common::milog::MiLogStream::operator<<<char [39],(char *[39])0>(
           &v18,
           (const char (*)[39])"main world scene null ptr for player: ");
    if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
      __asan_report_load8();
  }
  else
  {
    v9 = std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 96));
    scene_script_config_ptr = Scene::getScriptConfig(v9);
    if ( scene_script_config_ptr )
    {
      total_num = SceneScriptConfig::getOneoffGahterNumByPointType(scene_script_config_ptr, *(_DWORD *)(v4 + 48));
      curr_num = 0;
      *(std::unordered_map<unsigned int,std::set<std::pair<unsigned int,unsigned int>>>::iterator *)(v4 + 64) = std::unordered_map<unsigned int,std::set<std::pair<unsigned int,unsigned int>>>::find(&this->oneoff_gather_point_type_to_group_configs_map_, (const std::unordered_map<unsigned int,std::set<std::pair<unsigned int,unsigned int>>>::key_type *)(v4 + 48));
      __y._M_cur = std::unordered_map<unsigned int,std::set<std::pair<unsigned int,unsigned int>>>::end(&this->oneoff_gather_point_type_to_group_configs_map_)._M_cur;
      if ( std::__detail::operator!=<std::pair<unsigned int const,std::set<std::pair<unsigned int,unsigned int>>>,false>(
             (const std::__detail::_Node_iterator_base<std::pair<unsigned int const,std::set<std::pair<unsigned int,unsigned int>> >,false> *)(v4 + 64),
             &__y) )
      {
        v10 = std::__detail::_Node_iterator<std::pair<unsigned int const,std::set<std::pair<unsigned int,unsigned int>>>,false,false>::operator->((const std::__detail::_Node_iterator<std::pair<unsigned int const,std::set<std::pair<unsigned int,unsigned int>> >,false,false> *const)(v4 + 64));
        curr_num = std::set<std::pair<unsigned int,unsigned int>>::size(&v10->second);
      }
      common::milog::MiLogStream::create(
        &v18,
        &common::milog::MiLogDefault::default_log_obj_,
        1u,
        "./src/scene/player_scene_comp.cpp",
        "isGotAllOneoffGatherByPointType",
        4877);
      common::milog::MiLogStream::operator()(&v18, "total_num=%u vs curr_num=%u", total_num, curr_num);
      common::milog::MiLogStream::~MiLogStream(&v18);
      LOBYTE(v3) = curr_num >= total_num;
      goto LABEL_22;
    }
    common::milog::MiLogStream::create(
      &v18,
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/scene/player_scene_comp.cpp",
      "isGotAllOneoffGatherByPointType",
      4865);
    v8 = common::milog::MiLogStream::operator<<<char [53],(char *[53])0>(
           &v18,
           (const char (*)[53])"main world scene script config null ptr for player: ");
    if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
      __asan_report_load8();
  }
  operator<<(v8, this->player_);
  common::milog::MiLogStream::~MiLogStream(&v18);
  v3 = 0;
LABEL_22:
  std::shared_ptr<Scene>::~shared_ptr((std::shared_ptr<Scene> *const)(v4 + 96));
LABEL_23:
  result = v3;
  if ( v19 == (char *)v4 )
  {
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v4 = 1172321806LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 4883: range 0000000013E6C872-0000000013E6CEB0
void __cdecl PlayerSceneComp::initOneoffGatherPointInfos(PlayerSceneComp *const this)
{
  unsigned __int64 v1; // rbx
  __int64 v2; // rax
  unsigned __int64 v3; // r12
  LuaConfigMgr *p_lua_config_mgr; // rcx
  common::milog::MiLogStream *v5; // rax
  uint32_t v6; // edx
  std::set<std::pair<unsigned int,unsigned int>>::size_type v7; // rsi
  unsigned int v8; // r8d
  unsigned int v9; // edi
  __int64 v10; // rcx
  std::unordered_map<unsigned int,proto::SceneProductBin>::iterator __for_begin; // [rsp+10h] [rbp-180h] BYREF
  std::unordered_map<unsigned int,proto::SceneProductBin>::iterator __for_end; // [rsp+18h] [rbp-178h] BYREF
  std::unordered_map<unsigned int,proto::SceneProductBin> *__for_range; // [rsp+20h] [rbp-170h]
  const std::pair<unsigned int const,proto::SceneProductBin> *v15; // [rsp+28h] [rbp-168h]
  std::tuple_element<0,const std::pair<unsigned int const,proto::SceneProductBin> >::type *scene_id; // [rsp+30h] [rbp-160h]
  std::tuple_element<1,const std::pair<unsigned int const,proto::SceneProductBin> >::type *scene_product_bin; // [rsp+38h] [rbp-158h]
  const SceneScriptConfig *script_config_ptr; // [rsp+40h] [rbp-150h]
  const google::protobuf::Map<unsigned int,proto::GroupProductBin> *__for_range_0; // [rsp+48h] [rbp-148h]
  const unsigned int *p_group_id; // [rsp+50h] [rbp-140h]
  const google::protobuf::Map<unsigned int,unsigned int> *one_off_map; // [rsp+58h] [rbp-138h]
  const google::protobuf::Map<unsigned int,unsigned int> *__for_range_1; // [rsp+60h] [rbp-130h]
  const unsigned int *p_config_id; // [rsp+68h] [rbp-128h]
  std::set<std::pair<unsigned int,unsigned int>> *group_config_set; // [rsp+70h] [rbp-120h]
  std::pair<unsigned int,unsigned int> __x; // [rsp+78h] [rbp-118h] BYREF
  std::shared_ptr<Config> v26; // [rsp+80h] [rbp-110h] BYREF
  google::protobuf::Map<unsigned int,proto::GroupProductBin>::const_iterator __for_begin_0; // [rsp+90h] [rbp-100h] BYREF
  google::protobuf::Map<unsigned int,proto::GroupProductBin>::const_iterator __for_end_0; // [rsp+B0h] [rbp-E0h] BYREF
  google::protobuf::Map<unsigned int,unsigned int>::const_iterator __for_begin_1; // [rsp+D0h] [rbp-C0h] BYREF
  google::protobuf::Map<unsigned int,unsigned int>::const_iterator __for_end_1; // [rsp+F0h] [rbp-A0h] BYREF
  common::milog::MiLogStream v31; // [rsp+110h] [rbp-80h] BYREF
  char v32[96]; // [rsp+130h] [rbp-60h] BYREF

  v1 = (unsigned __int64)v32;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_0(64LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "1 32 4 22 gather_point_type:4897";
  *(_QWORD *)(v1 + 16) = PlayerSceneComp::initOneoffGatherPointInfos;
  v3 = v1 >> 3;
  *(_DWORD *)(v3 + 2147450880) = -235802127;
  *(_DWORD *)(v3 + 2147450884) = -202116348;
  __for_range = &this->world_product_map_;
  __for_begin._M_cur = std::unordered_map<unsigned int,proto::SceneProductBin>::begin(&this->world_product_map_)._M_cur;
  __for_end._M_cur = std::unordered_map<unsigned int,proto::SceneProductBin>::end(&this->world_product_map_)._M_cur;
  while ( std::__detail::operator!=<std::pair<unsigned int const,proto::SceneProductBin>,false>(
            &__for_begin,
            &__for_end) )
  {
    v15 = std::__detail::_Node_iterator<std::pair<unsigned int const,proto::SceneProductBin>,false,false>::operator*(&__for_begin);
    scene_id = std::get<0ul,unsigned int const,proto::SceneProductBin>(v15);
    scene_product_bin = (std::tuple_element<1,const std::pair<unsigned int const,proto::SceneProductBin> >::type *)std::get<1ul,unsigned int const,proto::SceneProductBin>(v15);
    ServiceBox::findService<GameserverService>();
    GameserverService::getConfig((GameserverService *const)&v26);
    p_lua_config_mgr = &std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false> *const)&v26)->design_config.lua_config_mgr;
    if ( *(_BYTE *)(((unsigned __int64)scene_id >> 3) + 0x7FFF8000) != 0
      && (char)(((unsigned __int8)scene_id & 7) + 3) >= *(_BYTE *)(((unsigned __int64)scene_id >> 3) + 0x7FFF8000) )
    {
      __asan_report_load4(scene_id);
    }
    script_config_ptr = LuaConfigMgr::findSceneScriptConfig(p_lua_config_mgr, *scene_id);
    std::shared_ptr<Config>::~shared_ptr(&v26);
    if ( script_config_ptr )
    {
      __for_range_0 = proto::SceneProductBin::group_product_map(scene_product_bin);
      google::protobuf::Map<unsigned int,proto::GroupProductBin>::begin(&__for_begin_0, __for_range_0);
      google::protobuf::Map<unsigned int,proto::GroupProductBin>::end(&__for_end_0, __for_range_0);
      while ( google::protobuf::operator!=(&__for_begin_0, &__for_end_0) )
      {
        p_group_id = (const unsigned int *)google::protobuf::Map<unsigned int,proto::GroupProductBin>::const_iterator::operator*(&__for_begin_0);
        one_off_map = proto::GroupProductBin::gadget_one_off_map((const proto::GroupProductBin *const)(p_group_id + 2));
        __for_range_1 = one_off_map;
        google::protobuf::Map<unsigned int,unsigned int>::begin(&__for_begin_1, one_off_map);
        google::protobuf::Map<unsigned int,unsigned int>::end(&__for_end_1, __for_range_1);
        while ( google::protobuf::operator!=(&__for_begin_1, &__for_end_1) )
        {
          p_config_id = (const unsigned int *)google::protobuf::Map<unsigned int,unsigned int>::const_iterator::operator*(&__for_begin_1);
          *(_DWORD *)(v1 + 32) = 0;
          if ( *(_BYTE *)(((unsigned __int64)p_config_id >> 3) + 0x7FFF8000) != 0
            && (char)(((unsigned __int8)p_config_id & 7) + 3) >= *(_BYTE *)(((unsigned __int64)p_config_id >> 3)
                                                                          + 0x7FFF8000) )
          {
            __asan_report_load4(p_config_id);
          }
          v6 = *p_config_id;
          if ( *(_BYTE *)(((unsigned __int64)p_group_id >> 3) + 0x7FFF8000) != 0
            && *(_BYTE *)(((unsigned __int64)p_group_id >> 3) + 0x7FFF8000) <= 3 )
          {
            __asan_report_load4(p_group_id);
          }
          if ( SceneScriptConfig::queryOneoffGatherPointTypeByGroupConfigId(
                 script_config_ptr,
                 *p_group_id,
                 v6,
                 (uint32_t *)(v1 + 32)) )
          {
            group_config_set = std::unordered_map<unsigned int,std::set<std::pair<unsigned int,unsigned int>>>::operator[](
                                 &this->oneoff_gather_point_type_to_group_configs_map_,
                                 (const std::unordered_map<unsigned int,std::set<std::pair<unsigned int,unsigned int>>>::key_type *)(v1 + 32));
            std::pair<unsigned int,unsigned int>::pair<unsigned int,unsigned int,true>(&__x, p_group_id, p_config_id);
            std::set<std::pair<unsigned int,unsigned int>>::insert(group_config_set, &__x);
            common::milog::MiLogStream::create(
              &v31,
              &common::milog::MiLogDefault::default_log_obj_,
              1u,
              "./src/scene/player_scene_comp.cpp",
              "initOneoffGatherPointInfos",
              4902);
            v7 = std::set<std::pair<unsigned int,unsigned int>>::size(group_config_set);
            v8 = *(_DWORD *)(v1 + 32);
            if ( *(_BYTE *)(((unsigned __int64)p_group_id >> 3) + 0x7FFF8000) != 0
              && *(_BYTE *)(((unsigned __int64)p_group_id >> 3) + 0x7FFF8000) <= 3 )
            {
              __asan_report_load4(p_group_id);
            }
            v9 = *p_group_id;
            if ( *(_BYTE *)(((unsigned __int64)p_config_id >> 3) + 0x7FFF8000) != 0
              && (char)(((unsigned __int8)p_config_id & 7) + 3) >= *(_BYTE *)(((unsigned __int64)p_config_id >> 3)
                                                                            + 0x7FFF8000) )
            {
              v9 = (unsigned int)p_config_id;
              __asan_report_load4(p_config_id);
            }
            v10 = *p_config_id;
            if ( *(_BYTE *)(((unsigned __int64)scene_id >> 3) + 0x7FFF8000) != 0
              && (char)(((unsigned __int8)scene_id & 7) + 3) >= *(_BYTE *)(((unsigned __int64)scene_id >> 3) + 0x7FFF8000) )
            {
              v9 = (unsigned int)scene_id;
              __asan_report_load4(scene_id);
            }
            common::milog::MiLogStream::operator()(
              &v31,
              "scene=%u config_id=%u group_id=%u ==> @point_type=%u of size=%lu",
              *scene_id,
              v10,
              v9,
              v8,
              v7);
            common::milog::MiLogStream::~MiLogStream(&v31);
          }
          google::protobuf::Map<unsigned int,unsigned int>::const_iterator::operator++(&__for_begin_1);
        }
        google::protobuf::Map<unsigned int,proto::GroupProductBin>::const_iterator::operator++(&__for_begin_0);
      }
    }
    else
    {
      common::milog::MiLogStream::create(
        &v31,
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/scene/player_scene_comp.cpp",
        "initOneoffGatherPointInfos",
        4889);
      v5 = common::milog::MiLogStream::operator<<<char [39],(char *[39])0>(
             &v31,
             (const char (*)[39])"findSceneScriptConfig fails, scene_id:");
      common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v5, scene_id);
      common::milog::MiLogStream::~MiLogStream(&v31);
    }
    std::__detail::_Node_iterator<std::pair<unsigned int const,proto::SceneProductBin>,false,false>::operator++(&__for_begin);
  }
  if ( v32 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
  }
};

// Line 4911: range 0000000013E6CEB2-0000000013E6D083
bool __fastcall PlayerSceneComp::isGotOneoffGatherPointByGroupConfigId(
        const PlayerSceneComp *const this,
        uint32_t point_type,
        uint32_t group_id,
        uint32_t config_id)
{
  unsigned __int64 v4; // rbx
  __int64 v5; // rax
  _DWORD *v6; // r13
  bool result; // al
  std::set<std::pair<unsigned int,unsigned int>> *group_config_set; // [rsp+20h] [rbp-B0h]
  std::__detail::_Node_iterator_base<std::pair<unsigned int const,std::set<std::pair<unsigned int,unsigned int>> >,false> __y; // [rsp+28h] [rbp-A8h] BYREF
  char v12[160]; // [rsp+30h] [rbp-A0h] BYREF

  v4 = (unsigned __int64)v12;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v5 = __asan_stack_malloc_1(128LL);
    if ( v5 )
      v4 = v5;
  }
  *(_QWORD *)v4 = 1102416563LL;
  *(_QWORD *)(v4 + 8) = "4 48 4 15 point_type:4910 64 4 13 group_id:4910 80 4 14 config_id:4910 96 8 13 set_iter:4912";
  *(_QWORD *)(v4 + 16) = PlayerSceneComp::isGotOneoffGatherPointByGroupConfigId;
  v6 = (_DWORD *)(v4 >> 3);
  v6[536862720] = -235802127;
  v6[536862721] = -234556943;
  v6[536862722] = -234556924;
  v6[536862723] = -202116352;
  *(_DWORD *)(v4 + 48) = point_type;
  *(_DWORD *)(v4 + 64) = group_id;
  *(_DWORD *)(v4 + 80) = config_id;
  *(std::unordered_map<unsigned int,std::set<std::pair<unsigned int,unsigned int>>>::const_iterator *)(v4 + 96) = std::unordered_map<unsigned int,std::set<std::pair<unsigned int,unsigned int>>>::find(&this->oneoff_gather_point_type_to_group_configs_map_, (const std::unordered_map<unsigned int,std::set<std::pair<unsigned int,unsigned int>>>::key_type *)(v4 + 48));
  __y._M_cur = std::unordered_map<unsigned int,std::set<std::pair<unsigned int,unsigned int>>>::end(&this->oneoff_gather_point_type_to_group_configs_map_)._M_cur;
  if ( std::__detail::operator==<std::pair<unsigned int const,std::set<std::pair<unsigned int,unsigned int>>>,false>(
         (const std::__detail::_Node_iterator_base<std::pair<unsigned int const,std::set<std::pair<unsigned int,unsigned int>> >,false> *)(v4 + 96),
         &__y) )
  {
    result = 0;
  }
  else
  {
    group_config_set = &std::__detail::_Node_const_iterator<std::pair<unsigned int const,std::set<std::pair<unsigned int,unsigned int>>>,false,false>::operator->((const std::__detail::_Node_const_iterator<std::pair<unsigned int const,std::set<std::pair<unsigned int,unsigned int>> >,false,false> *const)(v4 + 96))->second;
    __y._M_cur = (std::__detail::_Node_iterator_base<std::pair<unsigned int const,std::set<std::pair<unsigned int,unsigned int>> >,false>::__node_type *)std::make_pair<unsigned int &,unsigned int &>((unsigned int *)(v4 + 64), (unsigned int *)(v4 + 80));
    result = common::tools::MiscUtils::isContains<std::set<std::pair<unsigned int,unsigned int>> const,std::pair<unsigned int,unsigned int>>(
               group_config_set,
               (const std::pair<unsigned int,unsigned int> *)&__y);
  }
  if ( v12 == (char *)v4 )
  {
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v4 = 1172321806LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 4923: range 0000000013E6D084-0000000013E6D3D6
void __cdecl PlayerSceneComp::onChallengeBegin(PlayerSceneComp *const this, Challenge *challenge)
{
  unsigned __int64 v2; // rbx
  __int64 v3; // rax
  unsigned __int64 v4; // r12
  std::pair<std::_Rb_tree_const_iterator<std::weak_ptr<Challenge> >,bool> v5; // rax
  common::milog::MiLogStream *v6; // rcx
  common::milog::MiLogStream *v7; // rax
  common::milog::MiLogStream *v8; // rax
  common::milog::MiLogStream *v9; // rax
  common::milog::MiLogStream *v10; // rcx
  bool v11; // r14
  PlayerBasicComp *BasicComp; // rax
  StatLogReporter *StatLogReporter; // rax
  std::weak_ptr<Challenge> v14; // [rsp+20h] [rbp-A0h] BYREF
  common::milog::MiLogStream v15; // [rsp+30h] [rbp-90h] BYREF
  char v16[112]; // [rsp+50h] [rbp-70h] BYREF

  v2 = (unsigned __int64)v16;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_0(64LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "1 32 16 18 challenge_wtr:4924";
  *(_QWORD *)(v2 + 16) = PlayerSceneComp::onChallengeBegin;
  v4 = v2 >> 3;
  *(_DWORD *)(v4 + 2147450880) = -235802127;
  *(_DWORD *)(v4 + 2147450884) = -202178560;
  std::enable_shared_from_this<Challenge>::weak_from_this((std::enable_shared_from_this<Challenge> *const)(v2 + 32));
  v5 = std::set<std::weak_ptr<Challenge>,std::owner_less<std::weak_ptr<Challenge>>,std::allocator<std::weak_ptr<Challenge>>>::insert(
         &this->challenge_wtr_set_,
         (const std::set<std::weak_ptr<Challenge>,std::owner_less<std::weak_ptr<Challenge> >,std::allocator<std::weak_ptr<Challenge> > >::value_type *)(v2 + 32));
  if ( !v5.second )
  {
    common::milog::MiLogStream::create(
      &v15,
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/scene/player_scene_comp.cpp",
      "onChallengeBegin",
      4927);
    v6 = common::milog::MiLogStream::operator<<<char [30],(char *[30])0>(
           &v15,
           (const char (*)[30])"record challenge fail, group:");
    if ( *(_BYTE *)(((unsigned __int64)&challenge->group_ >> 3) + 0x7FFF8000) )
      __asan_report_load8();
    v7 = operator<<(v6, challenge->group_);
    v8 = common::milog::MiLogStream::operator<<<char [15],(char *[15])0>(v7, (const char (*)[15])" from trigger:");
    v9 = common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v8, &challenge->trigger_name);
    v10 = common::milog::MiLogStream::operator<<<char [9],(char *[9])0>(v9, (const char (*)[9])" player:");
    if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
      __asan_report_load8();
    operator<<(v10, this->player_);
    common::milog::MiLogStream::~MiLogStream(&v15);
  }
  else
  {
    std::weak_ptr<Challenge>::lock(&v14);
    v11 = std::operator==<Challenge>(0LL, (const std::shared_ptr<Challenge> *)&v14) && !Challenge::isChild(challenge);
    std::shared_ptr<Challenge>::~shared_ptr((std::shared_ptr<Challenge> *const)&v14);
    if ( v11 )
      std::weak_ptr<Challenge>::operator=(
        &this->current_combat_stat_challenge_wtr_,
        (const std::weak_ptr<Challenge> *)(v2 + 32));
    if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
      __asan_report_load8();
    BasicComp = Player::getBasicComp(this->player_);
    StatLogReporter = PlayerBasicComp::getStatLogReporter(BasicComp);
    StatLogReporter::onChallengeStateChange(StatLogReporter);
  }
  std::weak_ptr<Challenge>::~weak_ptr((std::weak_ptr<Challenge> *const)(v2 + 32));
  if ( v16 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
  }
};

// Line 4939: range 0000000013E6D3D8-0000000013E6D8C7
void __cdecl PlayerSceneComp::onChallengeEnd(PlayerSceneComp *const this, Challenge *challenge)
{
  unsigned __int64 v2; // r13
  __int64 v3; // rax
  _DWORD *v4; // r12
  common::milog::MiLogStream *v5; // rcx
  common::milog::MiLogStream *v6; // rax
  common::milog::MiLogStream *v7; // rax
  common::milog::MiLogStream *v8; // rax
  common::milog::MiLogStream *v9; // rcx
  bool v10; // r14
  const std::weak_ptr<Challenge> *v11; // rax
  std::__shared_ptr_access<Challenge,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v12; // rax
  int v14; // r14d
  PlayerBasicComp *BasicComp; // rax
  StatLogReporter *StatLogReporter; // rax
  std::set<std::weak_ptr<Challenge>,std::owner_less<std::weak_ptr<Challenge> >,std::allocator<std::weak_ptr<Challenge> > >::iterator __for_begin; // [rsp+18h] [rbp-108h] BYREF
  std::set<std::weak_ptr<Challenge>,std::owner_less<std::weak_ptr<Challenge> >,std::allocator<std::weak_ptr<Challenge> > >::iterator __for_end; // [rsp+20h] [rbp-100h] BYREF
  std::set<std::weak_ptr<Challenge>,std::owner_less<std::weak_ptr<Challenge> >,std::allocator<std::weak_ptr<Challenge> > > *__for_range; // [rsp+28h] [rbp-F8h]
  common::milog::MiLogStream v20; // [rsp+30h] [rbp-F0h] BYREF
  char v21[208]; // [rsp+50h] [rbp-D0h] BYREF

  v2 = (unsigned __int64)v21;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_2(160LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "4 32 16 18 challenge_wtr:4940 64 16 38 current_combat_stat_challenge_ptr:4946 96 16 18 challenge"
                        "_wtr:4950 128 16 18 challenge_ptr:4952";
  *(_QWORD *)(v2 + 16) = PlayerSceneComp::onChallengeEnd;
  v4 = (_DWORD *)(v2 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = -219021312;
  v4[536862722] = -219021312;
  v4[536862723] = -219021312;
  v4[536862724] = -202178560;
  std::enable_shared_from_this<Challenge>::weak_from_this((std::enable_shared_from_this<Challenge> *const)(v2 + 32));
  if ( std::set<std::weak_ptr<Challenge>,std::owner_less<std::weak_ptr<Challenge>>,std::allocator<std::weak_ptr<Challenge>>>::erase(
         &this->challenge_wtr_set_,
         (const std::set<std::weak_ptr<Challenge>,std::owner_less<std::weak_ptr<Challenge> >,std::allocator<std::weak_ptr<Challenge> > >::key_type *)(v2 + 32)) )
  {
    std::weak_ptr<Challenge>::lock((const std::weak_ptr<Challenge> *const)(v2 + 64));
    std::weak_ptr<Challenge>::lock((const std::weak_ptr<Challenge> *const)(v2 + 128));
    v10 = std::operator==<Challenge,Challenge>(
            (const std::shared_ptr<Challenge> *)(v2 + 64),
            (const std::shared_ptr<Challenge> *)(v2 + 128));
    std::shared_ptr<Challenge>::~shared_ptr((std::shared_ptr<Challenge> *const)(v2 + 128));
    if ( v10 )
    {
      std::__weak_ptr<Challenge,(__gnu_cxx::_Lock_policy)2>::reset(&this->current_combat_stat_challenge_wtr_);
      __for_range = &this->challenge_wtr_set_;
      __for_begin._M_node = std::set<std::weak_ptr<Challenge>,std::owner_less<std::weak_ptr<Challenge>>,std::allocator<std::weak_ptr<Challenge>>>::begin(&this->challenge_wtr_set_)._M_node;
      __for_end._M_node = std::set<std::weak_ptr<Challenge>,std::owner_less<std::weak_ptr<Challenge>>,std::allocator<std::weak_ptr<Challenge>>>::end(&this->challenge_wtr_set_)._M_node;
      while ( std::operator!=(&__for_begin, &__for_end) )
      {
        v11 = std::_Rb_tree_const_iterator<std::weak_ptr<Challenge>>::operator*(&__for_begin);
        std::weak_ptr<Challenge>::weak_ptr((std::weak_ptr<Challenge> *const)(v2 + 96), v11);
        std::weak_ptr<Challenge>::lock((const std::weak_ptr<Challenge> *const)(v2 + 128));
        if ( std::operator!=<Challenge>(0LL, (const std::shared_ptr<Challenge> *)(v2 + 128))
          && (v12 = std::__shared_ptr_access<Challenge,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Challenge,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 128)),
              !Challenge::isChild(v12)) )
        {
          std::weak_ptr<Challenge>::operator=<Challenge>(
            &this->current_combat_stat_challenge_wtr_,
            (const std::shared_ptr<Challenge> *)(v2 + 128));
          v14 = 0;
        }
        else
        {
          v14 = 1;
        }
        std::shared_ptr<Challenge>::~shared_ptr((std::shared_ptr<Challenge> *const)(v2 + 128));
        std::weak_ptr<Challenge>::~weak_ptr((std::weak_ptr<Challenge> *const)(v2 + 96));
        if ( v14 != 1 )
          break;
        std::_Rb_tree_const_iterator<std::weak_ptr<Challenge>>::operator++(&__for_begin);
      }
    }
    if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
      __asan_report_load8();
    BasicComp = Player::getBasicComp(this->player_);
    StatLogReporter = PlayerBasicComp::getStatLogReporter(BasicComp);
    StatLogReporter::onChallengeStateChange(StatLogReporter);
    std::shared_ptr<Challenge>::~shared_ptr((std::shared_ptr<Challenge> *const)(v2 + 64));
  }
  else
  {
    common::milog::MiLogStream::create(
      &v20,
      &common::milog::MiLogDefault::default_log_obj_,
      1u,
      "./src/scene/player_scene_comp.cpp",
      "onChallengeEnd",
      4943);
    v5 = common::milog::MiLogStream::operator<<<char [29],(char *[29])0>(
           &v20,
           (const char (*)[29])"erase challenge fail, group:");
    if ( *(_BYTE *)(((unsigned __int64)&challenge->group_ >> 3) + 0x7FFF8000) )
      __asan_report_load8();
    v6 = operator<<(v5, challenge->group_);
    v7 = common::milog::MiLogStream::operator<<<char [15],(char *[15])0>(v6, (const char (*)[15])" from trigger:");
    v8 = common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v7, &challenge->trigger_name);
    v9 = common::milog::MiLogStream::operator<<<char [9],(char *[9])0>(v8, (const char (*)[9])" player:");
    if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
      __asan_report_load8();
    operator<<(v9, this->player_);
    common::milog::MiLogStream::~MiLogStream(&v20);
  }
  std::weak_ptr<Challenge>::~weak_ptr((std::weak_ptr<Challenge> *const)(v2 + 32));
  if ( v21 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8010) = 0;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8010) = -168430091;
  }
};

// Line 4964: range 0000000013E6D8C8-0000000013E6DB24
void __cdecl PlayerSceneComp::foreachChallenge(
        PlayerSceneComp *const this,
        std::function<ForeachPolicy(Challenge&)> *p_func)
{
  unsigned __int64 v2; // rbx
  __int64 v3; // rax
  _DWORD *v4; // r13
  const std::weak_ptr<Challenge> *v5; // rax
  int v6; // r14d
  Challenge *v7; // rdx
  int v8; // r14d
  std::set<std::weak_ptr<Challenge>,std::owner_less<std::weak_ptr<Challenge> >,std::allocator<std::weak_ptr<Challenge> > >::iterator __for_begin; // [rsp+18h] [rbp-A8h] BYREF
  std::set<std::weak_ptr<Challenge>,std::owner_less<std::weak_ptr<Challenge> >,std::allocator<std::weak_ptr<Challenge> > >::iterator __for_end; // [rsp+20h] [rbp-A0h] BYREF
  std::set<std::weak_ptr<Challenge>,std::owner_less<std::weak_ptr<Challenge> >,std::allocator<std::weak_ptr<Challenge> > > *__for_range; // [rsp+28h] [rbp-98h]
  char v12[144]; // [rsp+30h] [rbp-90h] BYREF

  v2 = (unsigned __int64)v12;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_1(96LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "2 32 16 18 challenge_wtr:4965 64 16 18 challenge_ptr:4967";
  *(_QWORD *)(v2 + 16) = PlayerSceneComp::foreachChallenge;
  v4 = (_DWORD *)(v2 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = -219021312;
  v4[536862722] = -202178560;
  __for_range = &this->challenge_wtr_set_;
  __for_begin._M_node = std::set<std::weak_ptr<Challenge>,std::owner_less<std::weak_ptr<Challenge>>,std::allocator<std::weak_ptr<Challenge>>>::begin(&this->challenge_wtr_set_)._M_node;
  __for_end._M_node = std::set<std::weak_ptr<Challenge>,std::owner_less<std::weak_ptr<Challenge>>,std::allocator<std::weak_ptr<Challenge>>>::end(&this->challenge_wtr_set_)._M_node;
  while ( std::operator!=(&__for_begin, &__for_end) )
  {
    v5 = std::_Rb_tree_const_iterator<std::weak_ptr<Challenge>>::operator*(&__for_begin);
    std::weak_ptr<Challenge>::weak_ptr((std::weak_ptr<Challenge> *const)(v2 + 32), v5);
    std::weak_ptr<Challenge>::lock((const std::weak_ptr<Challenge> *const)(v2 + 64));
    if ( std::operator==<Challenge>(0LL, (const std::shared_ptr<Challenge> *)(v2 + 64)) )
    {
      v6 = 0;
    }
    else
    {
      v7 = std::__shared_ptr_access<Challenge,(__gnu_cxx::_Lock_policy)2,false,false>::operator*((const std::__shared_ptr_access<Challenge,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 64));
      v6 = std::function<ForeachPolicy ()(Challenge &)>::operator()(p_func, v7) ? 1 : 2;
    }
    std::shared_ptr<Challenge>::~shared_ptr((std::shared_ptr<Challenge> *const)(v2 + 64));
    if ( v6 )
      v8 = v6 == 2 ? 2 : 1;
    else
      v8 = 0;
    std::weak_ptr<Challenge>::~weak_ptr((std::weak_ptr<Challenge> *const)(v2 + 32));
    if ( v8 )
    {
      if ( v8 != 2 )
        break;
    }
    std::_Rb_tree_const_iterator<std::weak_ptr<Challenge>>::operator++(&__for_begin);
  }
  if ( v12 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8008) = 0;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8008) = -168430091;
  }
};

// Line 4980: range 0000000013E6DB26-0000000013E6DC10
void __cdecl PlayerSceneComp::onClientSilenceVersionChange(PlayerSceneComp *const this, uint32_t new_slient_version)
{
  uint32_t old_version; // [rsp+1Ch] [rbp-34h]
  common::milog::MiLogStream v3; // [rsp+20h] [rbp-30h] BYREF

  if ( *(_BYTE *)(((unsigned __int64)&this->client_silence_version_ >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)this + 92) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&this->client_silence_version_ >> 3)
                                                        + 0x7FFF8000) )
  {
    __asan_report_load4(&this->client_silence_version_);
  }
  old_version = this->client_silence_version_;
  this->client_silence_version_ = new_slient_version;
  if ( old_version != new_slient_version )
  {
    common::milog::MiLogStream::create(
      &v3,
      &common::milog::MiLogDefault::default_log_obj_,
      2u,
      "./src/scene/player_scene_comp.cpp",
      "onClientSilenceVersionChange",
      4985);
    common::milog::MiLogStream::operator()(&v3, "silent version changed: %u ==> %u", old_version, new_slient_version);
    common::milog::MiLogStream::~MiLogStream(&v3);
  }
};

// Line 4990: range 0000000013E6DC12-0000000013E6DD0F
void __cdecl PlayerSceneComp::checkSilentUpdate(PlayerSceneComp *const this)
{
  common::milog::MiLogStream *v1; // rbx
  std::__shared_ptr_access<PlayerWorld,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v2; // rax
  unsigned int val; // [rsp+1Ch] [rbp-34h] BYREF
  common::milog::MiLogStream v4; // [rsp+20h] [rbp-30h] BYREF

  if ( std::operator==<PlayerWorld>(&this->my_player_world_ptr_, 0LL) )
  {
    common::milog::MiLogStream::create(
      &v4,
      &common::milog::MiLogDefault::default_log_obj_,
      4u,
      "./src/scene/player_scene_comp.cpp",
      "checkSilentUpdate",
      4993);
    v1 = common::milog::MiLogStream::operator<<<char [28],(char *[28])0>(
           &v4,
           (const char (*)[28])"world_ptr is nullptr, uid: ");
    if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
      __asan_report_load8();
    val = Player::getUid(this->player_);
    common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v1, &val);
    common::milog::MiLogStream::~MiLogStream(&v4);
  }
  else
  {
    v2 = std::__shared_ptr_access<PlayerWorld,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<PlayerWorld,(__gnu_cxx::_Lock_policy)2,false,false> *const)&this->my_player_world_ptr_);
    World::checkSilentUpdate(v2);
  }
};

// Line 5001: range 0000000013E6DD10-0000000013E6DEF3
uint32_t __cdecl PlayerSceneComp::getQuitMpValidTime(PlayerSceneComp *const this)
{
  unsigned __int64 v1; // rbx
  __int64 v2; // rax
  unsigned __int64 v3; // r12
  uint32_t RewardPointLatestReservedTimeForAllPlayer; // r14d
  PlayerScenePlayComp *ScenePlayComp; // rax
  PlayerMpPlayComp *MpPlayComp; // rax
  char v7; // al
  PlayerWorld *v8; // rax
  uint32_t result; // eax
  char v10[112]; // [rsp+10h] [rbp-70h] BYREF

  v1 = (unsigned __int64)v10;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_0(64LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "1 32 16 14 world_ptr:5014";
  *(_QWORD *)(v1 + 16) = PlayerSceneComp::getQuitMpValidTime;
  v3 = v1 >> 3;
  *(_DWORD *)(v3 + 2147450880) = -235802127;
  *(_DWORD *)(v3 + 2147450884) = -202178560;
  if ( !PlayerSceneComp::isInMyPlayerWorld(this) )
  {
    RewardPointLatestReservedTimeForAllPlayer = 0;
  }
  else
  {
    if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
      __asan_report_load8();
    ScenePlayComp = Player::getScenePlayComp(this->player_);
    if ( PlayerScenePlayComp::isAnyScenePlayBattleEnabled(ScenePlayComp) )
      goto LABEL_12;
    if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
      __asan_report_load8();
    MpPlayComp = Player::getMpPlayComp(this->player_);
    if ( PlayerMpPlayComp::isAnyMpPlayBattleStarted(MpPlayComp) )
LABEL_12:
      v7 = 1;
    else
      v7 = 0;
    if ( v7 )
    {
      RewardPointLatestReservedTimeForAllPlayer = 0;
    }
    else
    {
      PlayerSceneComp::getMyPlayerWorld((const PlayerSceneComp *const)(v1 + 32));
      if ( std::operator!=<PlayerWorld>(0LL, (const std::shared_ptr<PlayerWorld> *)(v1 + 32)) )
      {
        v8 = std::__shared_ptr_access<PlayerWorld,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<PlayerWorld,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v1 + 32));
        RewardPointLatestReservedTimeForAllPlayer = PlayerWorld::getRewardPointLatestReservedTimeForAllPlayer(v8);
      }
      else
      {
        RewardPointLatestReservedTimeForAllPlayer = 0;
      }
      std::shared_ptr<PlayerWorld>::~shared_ptr((std::shared_ptr<PlayerWorld> *const)(v1 + 32));
    }
  }
  result = RewardPointLatestReservedTimeForAllPlayer;
  if ( v10 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 5024: range 0000000013E6DEF4-0000000013E6E248
int32_t __cdecl PlayerSceneComp::onGetWorldMpInfoReq(
        PlayerSceneComp *const this,
        const proto::GetWorldMpInfoReq *req,
        proto::GetWorldMpInfoRsp *rsp_0)
{
  unsigned __int64 v3; // rbx
  __int64 v4; // rax
  unsigned __int64 v5; // r13
  common::milog::MiLogStream *v6; // r14
  int32_t v7; // r14d
  unsigned __int64 v8; // rax
  unsigned __int64 v9; // rdx
  char v10; // dl
  unsigned __int64 v11; // rax
  unsigned __int64 v12; // rdx
  std::__shared_ptr_access<PlayerWorld,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v13; // rax
  uint32_t QuitMpValidTime; // edx
  int32_t result; // eax
  unsigned int val; // [rsp+2Ch] [rbp-94h] BYREF
  common::milog::MiLogStream v19; // [rsp+30h] [rbp-90h] BYREF
  char v20[112]; // [rsp+50h] [rbp-70h] BYREF

  v3 = (unsigned __int64)v20;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_0(64LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "1 32 16 14 world_ptr:5025";
  *(_QWORD *)(v3 + 16) = PlayerSceneComp::onGetWorldMpInfoReq;
  v5 = v3 >> 3;
  *(_DWORD *)(v5 + 2147450880) = -235802127;
  *(_DWORD *)(v5 + 2147450884) = -202178560;
  if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
    __asan_report_load8();
  Player::getSceneComp(this->player_);
  PlayerSceneComp::getMyPlayerWorld((const PlayerSceneComp *const)(v3 + 32));
  if ( std::operator==<PlayerWorld>(0LL, (const std::shared_ptr<PlayerWorld> *)(v3 + 32)) )
  {
    common::milog::MiLogStream::create(
      &v19,
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/scene/player_scene_comp.cpp",
      "onGetWorldMpInfoReq",
      5028);
    v6 = common::milog::MiLogStream::operator<<<char [20],(char *[20])0>(
           &v19,
           (const char (*)[20])"world is null, uid:");
    if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
      __asan_report_load8();
    val = Player::getUid(this->player_);
    common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v6, &val);
    common::milog::MiLogStream::~MiLogStream(&v19);
    v7 = -1;
  }
  else
  {
    v8 = (unsigned __int64)std::__shared_ptr_access<PlayerWorld,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<PlayerWorld,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 32));
    if ( *(_BYTE *)((v8 >> 3) + 0x7FFF8000) )
      v8 = __asan_report_load8();
    v9 = *(_QWORD *)v8 + 184LL;
    if ( *(_BYTE *)((v9 >> 3) + 0x7FFF8000) )
      v8 = __asan_report_load8();
    v10 = (*(__int64 (__fastcall **)(unsigned __int64))v9)(v8);
    proto::GetWorldMpInfoRsp::set_is_in_mp_mode(rsp_0, v10);
    v11 = (unsigned __int64)std::__shared_ptr_access<PlayerWorld,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<PlayerWorld,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 32));
    if ( *(_BYTE *)((v11 >> 3) + 0x7FFF8000) )
      v11 = __asan_report_load8();
    v12 = *(_QWORD *)v11 + 184LL;
    if ( *(_BYTE *)((v12 >> 3) + 0x7FFF8000) )
      v11 = __asan_report_load8();
    if ( (*(unsigned __int8 (__fastcall **)(unsigned __int64))v12)(v11) )
    {
      v13 = std::__shared_ptr_access<PlayerWorld,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<PlayerWorld,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 32));
      if ( World::getPlayerCount(v13) > 1 )
      {
        QuitMpValidTime = PlayerSceneComp::getQuitMpValidTime(this);
        proto::GetWorldMpInfoRsp::set_quit_mp_valid_time(rsp_0, QuitMpValidTime);
      }
    }
    v7 = 0;
  }
  std::shared_ptr<PlayerWorld>::~shared_ptr((std::shared_ptr<PlayerWorld> *const)(v3 + 32));
  result = v7;
  if ( v20 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 5045: range 0000000013E6E24A-0000000013E6E68E
void __cdecl PlayerSceneComp::tryRecordGadgetInteractBeyondDistanceLog(
        PlayerSceneComp *const this,
        Entity *gadget_entity,
        Avatar *avatar,
        const proto::GadgetInteractReq *req,
        float dist,
        float check_dist)
{
  std::__shared_ptr_access<proto_log::AntiCheatBodyGadgetInteractBeyondDistance,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v6; // rax
  proto_log::EntityLog *v7; // rdx
  std::__shared_ptr_access<proto_log::AntiCheatBodyGadgetInteractBeyondDistance,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v8; // rbx
  uint32_t AvatarId; // eax
  std::__shared_ptr_access<proto_log::AntiCheatBodyGadgetInteractBeyondDistance,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v10; // rax
  proto_log::PositionLog *v11; // rbx
  const Vector3 *Position; // rax
  float *p_x; // rdx
  std::__shared_ptr_access<proto_log::AntiCheatBodyGadgetInteractBeyondDistance,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v14; // rax
  proto_log::PositionLog *v15; // rbx
  const Vector3 *v16; // rdx
  float *p_y; // rax
  std::__shared_ptr_access<proto_log::AntiCheatBodyGadgetInteractBeyondDistance,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v18; // rax
  proto_log::PositionLog *v19; // rbx
  const Vector3 *v20; // rdx
  float *p_z; // rax
  std::__shared_ptr_access<proto_log::AntiCheatBodyGadgetInteractBeyondDistance,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v22; // rbx
  google::protobuf::uint32 v23; // eax
  std::__shared_ptr_access<proto_log::AntiCheatBodyGadgetInteractBeyondDistance,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v24; // rbx
  google::protobuf::uint32 v25; // eax
  std::__shared_ptr_access<proto_log::AntiCheatBodyGadgetInteractBeyondDistance,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v26; // rbx
  google::protobuf::uint32 v27; // eax
  std::__shared_ptr_access<proto_log::AntiCheatBodyGadgetInteractBeyondDistance,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v28; // rax
  std::__shared_ptr_access<proto_log::AntiCheatBodyGadgetInteractBeyondDistance,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v29; // rax
  std::__shared_ptr_access<proto_log::AntiCheatBodyGadgetInteractBeyondDistance,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v30; // rbx
  google::protobuf::uint32 Now; // eax
  std::__shared_ptr_access<proto_log::AntiCheatBodyGadgetInteractBeyondDistance,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v32; // rbx
  std::__shared_ptr_access<proto_log::AntiCheatBodyGadgetInteractBeyondDistance,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v33; // rax
  google::protobuf::uint32 v34; // eax
  Player *player; // rbx
  bool is_first_record_after_login; // [rsp+37h] [rbp-29h]
  std::shared_ptr<proto_log::AntiCheatBodyGadgetInteractBeyondDistance> *log_ptr; // [rsp+38h] [rbp-28h]
  std::shared_ptr<proto_log::AntiCheatBodyGadgetInteractBeyondDistance> __r; // [rsp+40h] [rbp-20h] BYREF

  if ( *(_BYTE *)(((unsigned __int64)&this->last_record_gadget_interact_beyond_distance_log_time_ >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->last_record_gadget_interact_beyond_distance_log_time_ >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4(&this->last_record_gadget_interact_beyond_distance_log_time_);
  }
  is_first_record_after_login = this->last_record_gadget_interact_beyond_distance_log_time_ == 0;
  PlayerSceneComp::checkAndFlushRecordedGadgetInteractBeyondDistanceLog(this, 0);
  log_ptr = &this->gadget_interact_beyond_distance_log_ptr_;
  if ( std::operator==<proto_log::AntiCheatBodyGadgetInteractBeyondDistance>(
         0LL,
         &this->gadget_interact_beyond_distance_log_ptr_) )
  {
    common::tools::perf::make_shared<proto_log::AntiCheatBodyGadgetInteractBeyondDistance>();
    std::shared_ptr<proto_log::AntiCheatBodyGadgetInteractBeyondDistance>::operator=(log_ptr, &__r);
    std::shared_ptr<proto_log::AntiCheatBodyGadgetInteractBeyondDistance>::~shared_ptr(&__r);
    v6 = std::__shared_ptr_access<proto_log::AntiCheatBodyGadgetInteractBeyondDistance,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<proto_log::AntiCheatBodyGadgetInteractBeyondDistance,(__gnu_cxx::_Lock_policy)2,false,false> *const)log_ptr);
    v7 = proto_log::AntiCheatBodyGadgetInteractBeyondDistance::mutable_gadget_entity(v6);
    Entity::getEntityLog(gadget_entity, v7);
    v8 = std::__shared_ptr_access<proto_log::AntiCheatBodyGadgetInteractBeyondDistance,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<proto_log::AntiCheatBodyGadgetInteractBeyondDistance,(__gnu_cxx::_Lock_policy)2,false,false> *const)log_ptr);
    AvatarId = Avatar::getAvatarId(avatar);
    proto_log::AntiCheatBodyGadgetInteractBeyondDistance::set_avatar_id(v8, AvatarId);
    v10 = std::__shared_ptr_access<proto_log::AntiCheatBodyGadgetInteractBeyondDistance,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<proto_log::AntiCheatBodyGadgetInteractBeyondDistance,(__gnu_cxx::_Lock_policy)2,false,false> *const)log_ptr);
    v11 = proto_log::AntiCheatBodyGadgetInteractBeyondDistance::mutable_avatar_position(v10);
    Position = Entity::getPosition((const Entity *const)avatar);
    p_x = &Position->x;
    if ( *(_BYTE *)(((unsigned __int64)Position >> 3) + 0x7FFF8000) != 0
      && (char)(((unsigned __int8)Position & 7) + 3) >= *(_BYTE *)(((unsigned __int64)Position >> 3) + 0x7FFF8000) )
    {
      __asan_report_load4(Position);
    }
    proto_log::PositionLog::set_x(v11, (int)*p_x);
    v14 = std::__shared_ptr_access<proto_log::AntiCheatBodyGadgetInteractBeyondDistance,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<proto_log::AntiCheatBodyGadgetInteractBeyondDistance,(__gnu_cxx::_Lock_policy)2,false,false> *const)log_ptr);
    v15 = proto_log::AntiCheatBodyGadgetInteractBeyondDistance::mutable_avatar_position(v14);
    v16 = Entity::getPosition((const Entity *const)avatar);
    p_y = &v16->y;
    if ( *(_BYTE *)(((unsigned __int64)p_y >> 3) + 0x7FFF8000) != 0
      && (char)(((unsigned __int8)p_y & 7) + 3) >= *(_BYTE *)(((unsigned __int64)p_y >> 3) + 0x7FFF8000) )
    {
      __asan_report_load4(p_y);
    }
    proto_log::PositionLog::set_y(v15, (int)v16->y);
    v18 = std::__shared_ptr_access<proto_log::AntiCheatBodyGadgetInteractBeyondDistance,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<proto_log::AntiCheatBodyGadgetInteractBeyondDistance,(__gnu_cxx::_Lock_policy)2,false,false> *const)log_ptr);
    v19 = proto_log::AntiCheatBodyGadgetInteractBeyondDistance::mutable_avatar_position(v18);
    v20 = Entity::getPosition((const Entity *const)avatar);
    p_z = &v20->z;
    if ( *(_BYTE *)(((unsigned __int64)p_z >> 3) + 0x7FFF8000) != 0
      && (char)(((unsigned __int8)p_z & 7) + 3) >= *(_BYTE *)(((unsigned __int64)p_z >> 3) + 0x7FFF8000) )
    {
      __asan_report_load4(p_z);
    }
    proto_log::PositionLog::set_z(v19, (int)v20->z);
    v22 = std::__shared_ptr_access<proto_log::AntiCheatBodyGadgetInteractBeyondDistance,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<proto_log::AntiCheatBodyGadgetInteractBeyondDistance,(__gnu_cxx::_Lock_policy)2,false,false> *const)log_ptr);
    v23 = proto::GadgetInteractReq::gadget_entity_id(req);
    proto_log::AntiCheatBodyGadgetInteractBeyondDistance::set_gadget_entity_id(v22, v23);
    v24 = std::__shared_ptr_access<proto_log::AntiCheatBodyGadgetInteractBeyondDistance,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<proto_log::AntiCheatBodyGadgetInteractBeyondDistance,(__gnu_cxx::_Lock_policy)2,false,false> *const)log_ptr);
    v25 = proto::GadgetInteractReq::op_type(req);
    proto_log::AntiCheatBodyGadgetInteractBeyondDistance::set_op_type(v24, v25);
    v26 = std::__shared_ptr_access<proto_log::AntiCheatBodyGadgetInteractBeyondDistance,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<proto_log::AntiCheatBodyGadgetInteractBeyondDistance,(__gnu_cxx::_Lock_policy)2,false,false> *const)log_ptr);
    v27 = proto::GadgetInteractReq::resin_cost_type(req);
    proto_log::AntiCheatBodyGadgetInteractBeyondDistance::set_resin_cost_type(v26, v27);
    v28 = std::__shared_ptr_access<proto_log::AntiCheatBodyGadgetInteractBeyondDistance,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<proto_log::AntiCheatBodyGadgetInteractBeyondDistance,(__gnu_cxx::_Lock_policy)2,false,false> *const)log_ptr);
    proto_log::AntiCheatBodyGadgetInteractBeyondDistance::set_distance(v28, dist);
    v29 = std::__shared_ptr_access<proto_log::AntiCheatBodyGadgetInteractBeyondDistance,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<proto_log::AntiCheatBodyGadgetInteractBeyondDistance,(__gnu_cxx::_Lock_policy)2,false,false> *const)log_ptr);
    proto_log::AntiCheatBodyGadgetInteractBeyondDistance::set_check_distance(v29, check_dist);
    v30 = std::__shared_ptr_access<proto_log::AntiCheatBodyGadgetInteractBeyondDistance,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<proto_log::AntiCheatBodyGadgetInteractBeyondDistance,(__gnu_cxx::_Lock_policy)2,false,false> *const)log_ptr);
    Now = common::tools::TimeUtils::getNow();
    proto_log::AntiCheatBodyGadgetInteractBeyondDistance::set_record_time(v30, Now);
  }
  if ( std::operator!=<proto_log::AntiCheatBodyGadgetInteractBeyondDistance>(0LL, log_ptr) )
  {
    v32 = std::__shared_ptr_access<proto_log::AntiCheatBodyGadgetInteractBeyondDistance,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<proto_log::AntiCheatBodyGadgetInteractBeyondDistance,(__gnu_cxx::_Lock_policy)2,false,false> *const)log_ptr);
    v33 = std::__shared_ptr_access<proto_log::AntiCheatBodyGadgetInteractBeyondDistance,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<proto_log::AntiCheatBodyGadgetInteractBeyondDistance,(__gnu_cxx::_Lock_policy)2,false,false> *const)log_ptr);
    v34 = proto_log::AntiCheatBodyGadgetInteractBeyondDistance::record_count(v33);
    proto_log::AntiCheatBodyGadgetInteractBeyondDistance::set_record_count(v32, v34 + 1);
  }
  if ( is_first_record_after_login )
  {
    if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
      __asan_report_load8();
    player = this->player_;
    std::shared_ptr<google::protobuf::Message>::shared_ptr<proto_log::AntiCheatBodyGadgetInteractBeyondDistance,void>(
      (std::shared_ptr<google::protobuf::Message> *const)&__r,
      &this->gadget_interact_beyond_distance_log_ptr_);
    Player::printAntiCheatLog(player, ANTI_CHEAT_ACTION_GADGET_INTERACT_BEYOND_DISTANCE, (MessagePtr *)&__r);
    std::shared_ptr<google::protobuf::Message>::~shared_ptr((std::shared_ptr<google::protobuf::Message> *const)&__r);
    std::shared_ptr<proto_log::AntiCheatBodyGadgetInteractBeyondDistance>::shared_ptr(&__r, 0LL);
    std::shared_ptr<proto_log::AntiCheatBodyGadgetInteractBeyondDistance>::operator=(
      &this->gadget_interact_beyond_distance_log_ptr_,
      &__r);
    std::shared_ptr<proto_log::AntiCheatBodyGadgetInteractBeyondDistance>::~shared_ptr(&__r);
  }
};

// Line 5078: range 0000000013E6E690-0000000013E6E8BE
void __cdecl PlayerSceneComp::checkAndFlushRecordedGadgetInteractBeyondDistanceLog(
        PlayerSceneComp *const this,
        bool is_on_disconnect)
{
  char v2; // bl
  uint32_t last_record_gadget_interact_beyond_distance_log_time; // r12d
  std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v4; // rax
  char v5; // r12
  __int64 p_gadget_interact_beyond_distance_log_ptr; // rsi
  Player *player; // rbx
  uint32_t v8; // edx
  char v9; // al
  uint32_t now; // [rsp+1Ch] [rbp-24h]
  std::shared_ptr<proto_log::AntiCheatBodyGadgetInteractBeyondDistance> v12[2]; // [rsp+20h] [rbp-20h] BYREF

  now = common::tools::TimeUtils::getNow();
  v2 = 0;
  if ( is_on_disconnect )
    goto LABEL_6;
  if ( *(_BYTE *)(((unsigned __int64)&this->last_record_gadget_interact_beyond_distance_log_time_ >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->last_record_gadget_interact_beyond_distance_log_time_ >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4(&this->last_record_gadget_interact_beyond_distance_log_time_);
  }
  last_record_gadget_interact_beyond_distance_log_time = this->last_record_gadget_interact_beyond_distance_log_time_;
  ServiceBox::findService<GameserverService>();
  GameserverService::getConfig((GameserverService *const)v12);
  v2 = 1;
  v4 = std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false> *const)v12);
  if ( now <= last_record_gadget_interact_beyond_distance_log_time
            + ConstValueExcelConfigMgr::getCheckDistanceAnticheatLogInterval(&v4->design_config.txt_config_mgr.const_value_config_mgr) )
    v5 = 1;
  else
LABEL_6:
    v5 = 0;
  if ( v2 )
    std::shared_ptr<Config>::~shared_ptr((std::shared_ptr<Config> *const)v12);
  if ( !v5 )
  {
    p_gadget_interact_beyond_distance_log_ptr = (__int64)&this->gadget_interact_beyond_distance_log_ptr_;
    if ( std::operator!=<proto_log::AntiCheatBodyGadgetInteractBeyondDistance>(
           0LL,
           &this->gadget_interact_beyond_distance_log_ptr_) )
    {
      if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
        __asan_report_load8();
      player = this->player_;
      std::shared_ptr<google::protobuf::Message>::shared_ptr<proto_log::AntiCheatBodyGadgetInteractBeyondDistance,void>(
        (std::shared_ptr<google::protobuf::Message> *const)v12,
        &this->gadget_interact_beyond_distance_log_ptr_);
      p_gadget_interact_beyond_distance_log_ptr = 16LL;
      Player::printAntiCheatLog(player, ANTI_CHEAT_ACTION_GADGET_INTERACT_BEYOND_DISTANCE, (MessagePtr *)v12);
      std::shared_ptr<google::protobuf::Message>::~shared_ptr((std::shared_ptr<google::protobuf::Message> *const)v12);
    }
    if ( is_on_disconnect )
      v8 = 0;
    else
      v8 = now;
    v9 = *(_BYTE *)(((unsigned __int64)&this->last_record_gadget_interact_beyond_distance_log_time_ >> 3) + 0x7FFF8000);
    if ( v9 != 0 && v9 <= 3 )
    {
      LOBYTE(p_gadget_interact_beyond_distance_log_ptr) = v9 != 0;
      __asan_report_store4(
        &this->last_record_gadget_interact_beyond_distance_log_time_,
        p_gadget_interact_beyond_distance_log_ptr,
        v8);
    }
    this->last_record_gadget_interact_beyond_distance_log_time_ = v8;
    std::shared_ptr<proto_log::AntiCheatBodyGadgetInteractBeyondDistance>::shared_ptr(v12, 0LL);
    std::shared_ptr<proto_log::AntiCheatBodyGadgetInteractBeyondDistance>::operator=(
      &this->gadget_interact_beyond_distance_log_ptr_,
      v12);
    std::shared_ptr<proto_log::AntiCheatBodyGadgetInteractBeyondDistance>::~shared_ptr(v12);
  }
};

// Line 5095: range 0000000013E6E8C0-0000000013E6EC0E
void __fastcall PlayerSceneComp::tryRecordGadgetInteractBeyondCheckDistanceLog(
        PlayerSceneComp *const this,
        __m128 dist,
        float check_dist)
{
  unsigned __int64 v3; // rbx
  __int64 v4; // rax
  unsigned __int64 v5; // r13
  __m128i v6; // xmm0
  std::__shared_ptr_access<proto_log::AntiCheatBodyGadgetInteractBeyondCheckDistance,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v7; // r14
  std::__shared_ptr_access<proto_log::AntiCheatBodyGadgetInteractBeyondCheckDistance,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v8; // rax
  float *v9; // rax
  unsigned int *v10; // rdx
  __m128i v11; // xmm0
  std::__shared_ptr_access<proto_log::AntiCheatBodyGadgetInteractBeyondCheckDistance,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v12; // r14
  std::__shared_ptr_access<proto_log::AntiCheatBodyGadgetInteractBeyondCheckDistance,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v13; // rax
  float *v14; // rax
  float *v15; // rdx
  std::__shared_ptr_access<proto_log::AntiCheatBodyGadgetInteractBeyondCheckDistance,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v16; // r12
  std::__shared_ptr_access<proto_log::AntiCheatBodyGadgetInteractBeyondCheckDistance,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v17; // rax
  google::protobuf::uint32 v18; // eax
  std::__shared_ptr_access<proto_log::AntiCheatBodyGadgetInteractBeyondCheckDistance,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v19; // rax
  std::__shared_ptr_access<proto_log::AntiCheatBodyGadgetInteractBeyondCheckDistance,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v20; // rax
  std::__shared_ptr_access<proto_log::AntiCheatBodyGadgetInteractBeyondCheckDistance,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v21; // rax
  std::__shared_ptr_access<proto_log::AntiCheatBodyGadgetInteractBeyondCheckDistance,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v22; // r12
  google::protobuf::uint32 Now; // eax
  std::__shared_ptr_access<proto_log::AntiCheatBodyGadgetInteractBeyondCheckDistance,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v24; // rax
  float __b; // [rsp+14h] [rbp-8Ch] BYREF
  std::shared_ptr<proto_log::AntiCheatBodyGadgetInteractBeyondCheckDistance> *log_ptr; // [rsp+18h] [rbp-88h]
  std::shared_ptr<proto_log::AntiCheatBodyGadgetInteractBeyondCheckDistance> __r; // [rsp+20h] [rbp-80h] BYREF
  char v28[112]; // [rsp+30h] [rbp-70h] BYREF

  v3 = (unsigned __int64)v28;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_0(64LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "1 32 4 9 dist:5094";
  *(_QWORD *)(v3 + 16) = PlayerSceneComp::tryRecordGadgetInteractBeyondCheckDistanceLog;
  v5 = v3 >> 3;
  *(_DWORD *)(v5 + 2147450880) = -235802127;
  *(_DWORD *)(v5 + 2147450884) = -202116348;
  dist = (__m128)dist.m128_u32[0];
  *(_DWORD *)(v3 + 32) = dist.m128_i32[0];
  PlayerSceneComp::checkAndFlushRecordedGadgetInteractBeyondCheckDistanceLog(this, 0);
  log_ptr = &this->gadget_interact_beyond_check_distance_log_ptr_;
  if ( std::operator!=<proto_log::AntiCheatBodyGadgetInteractBeyondCheckDistance>(
         0LL,
         &this->gadget_interact_beyond_check_distance_log_ptr_) )
  {
    v7 = std::__shared_ptr_access<proto_log::AntiCheatBodyGadgetInteractBeyondCheckDistance,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<proto_log::AntiCheatBodyGadgetInteractBeyondCheckDistance,(__gnu_cxx::_Lock_policy)2,false,false> *const)log_ptr);
    v8 = std::__shared_ptr_access<proto_log::AntiCheatBodyGadgetInteractBeyondCheckDistance,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<proto_log::AntiCheatBodyGadgetInteractBeyondCheckDistance,(__gnu_cxx::_Lock_policy)2,false,false> *const)log_ptr);
    *(float *)v6.m128i_i32 = proto_log::AntiCheatBodyGadgetInteractBeyondCheckDistance::min_distance(v8);
    LODWORD(__b) = _mm_cvtsi128_si32(v6);
    v9 = (float *)std::min<float>((const float *)(v3 + 32), &__b);
    v10 = (unsigned int *)v9;
    if ( *(_BYTE *)(((unsigned __int64)v9 >> 3) + 0x7FFF8000) != 0
      && (char)(((unsigned __int8)v9 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)v9 >> 3) + 0x7FFF8000) )
    {
      __asan_report_load4(v9);
    }
    v11 = _mm_cvtsi32_si128(*v10);
    proto_log::AntiCheatBodyGadgetInteractBeyondCheckDistance::set_min_distance(v7, *(float *)v11.m128i_i32);
    v12 = std::__shared_ptr_access<proto_log::AntiCheatBodyGadgetInteractBeyondCheckDistance,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<proto_log::AntiCheatBodyGadgetInteractBeyondCheckDistance,(__gnu_cxx::_Lock_policy)2,false,false> *const)log_ptr);
    v13 = std::__shared_ptr_access<proto_log::AntiCheatBodyGadgetInteractBeyondCheckDistance,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<proto_log::AntiCheatBodyGadgetInteractBeyondCheckDistance,(__gnu_cxx::_Lock_policy)2,false,false> *const)log_ptr);
    *(float *)v11.m128i_i32 = proto_log::AntiCheatBodyGadgetInteractBeyondCheckDistance::max_distance(v13);
    LODWORD(__b) = _mm_cvtsi128_si32(v11);
    v14 = (float *)std::max<float>((const float *)(v3 + 32), &__b);
    v15 = v14;
    if ( *(_BYTE *)(((unsigned __int64)v14 >> 3) + 0x7FFF8000) != 0
      && (char)(((unsigned __int8)v14 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)v14 >> 3) + 0x7FFF8000) )
    {
      __asan_report_load4(v14);
    }
    proto_log::AntiCheatBodyGadgetInteractBeyondCheckDistance::set_max_distance(v12, *v15);
    v16 = std::__shared_ptr_access<proto_log::AntiCheatBodyGadgetInteractBeyondCheckDistance,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<proto_log::AntiCheatBodyGadgetInteractBeyondCheckDistance,(__gnu_cxx::_Lock_policy)2,false,false> *const)log_ptr);
    v17 = std::__shared_ptr_access<proto_log::AntiCheatBodyGadgetInteractBeyondCheckDistance,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<proto_log::AntiCheatBodyGadgetInteractBeyondCheckDistance,(__gnu_cxx::_Lock_policy)2,false,false> *const)log_ptr);
    v18 = proto_log::AntiCheatBodyGadgetInteractBeyondCheckDistance::record_count(v17);
    proto_log::AntiCheatBodyGadgetInteractBeyondCheckDistance::set_record_count(v16, v18 + 1);
  }
  else
  {
    common::tools::perf::make_shared<proto_log::AntiCheatBodyGadgetInteractBeyondCheckDistance>();
    std::shared_ptr<proto_log::AntiCheatBodyGadgetInteractBeyondCheckDistance>::operator=(log_ptr, &__r);
    std::shared_ptr<proto_log::AntiCheatBodyGadgetInteractBeyondCheckDistance>::~shared_ptr(&__r);
    v19 = std::__shared_ptr_access<proto_log::AntiCheatBodyGadgetInteractBeyondCheckDistance,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<proto_log::AntiCheatBodyGadgetInteractBeyondCheckDistance,(__gnu_cxx::_Lock_policy)2,false,false> *const)log_ptr);
    proto_log::AntiCheatBodyGadgetInteractBeyondCheckDistance::set_min_distance(v19, *(float *)(v3 + 32));
    v20 = std::__shared_ptr_access<proto_log::AntiCheatBodyGadgetInteractBeyondCheckDistance,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<proto_log::AntiCheatBodyGadgetInteractBeyondCheckDistance,(__gnu_cxx::_Lock_policy)2,false,false> *const)log_ptr);
    proto_log::AntiCheatBodyGadgetInteractBeyondCheckDistance::set_max_distance(v20, *(float *)(v3 + 32));
    v21 = std::__shared_ptr_access<proto_log::AntiCheatBodyGadgetInteractBeyondCheckDistance,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<proto_log::AntiCheatBodyGadgetInteractBeyondCheckDistance,(__gnu_cxx::_Lock_policy)2,false,false> *const)log_ptr);
    proto_log::AntiCheatBodyGadgetInteractBeyondCheckDistance::set_check_distance(v21, check_dist);
    v22 = std::__shared_ptr_access<proto_log::AntiCheatBodyGadgetInteractBeyondCheckDistance,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<proto_log::AntiCheatBodyGadgetInteractBeyondCheckDistance,(__gnu_cxx::_Lock_policy)2,false,false> *const)log_ptr);
    Now = common::tools::TimeUtils::getNow();
    proto_log::AntiCheatBodyGadgetInteractBeyondCheckDistance::set_record_time(v22, Now);
    v24 = std::__shared_ptr_access<proto_log::AntiCheatBodyGadgetInteractBeyondCheckDistance,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<proto_log::AntiCheatBodyGadgetInteractBeyondCheckDistance,(__gnu_cxx::_Lock_policy)2,false,false> *const)log_ptr);
    proto_log::AntiCheatBodyGadgetInteractBeyondCheckDistance::set_record_count(v24, 1u);
  }
  if ( v28 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
  }
};

// Line 5116: range 0000000013E6EC10-0000000013E6EDF1
void __cdecl PlayerSceneComp::checkAndFlushRecordedGadgetInteractBeyondCheckDistanceLog(
        PlayerSceneComp *const this,
        bool is_on_disconnect)
{
  uint32_t Now; // ecx
  std::__shared_ptr_access<proto_log::AntiCheatBodyGadgetInteractBeyondCheckDistance,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v4; // rax
  google::protobuf::uint32 v5; // ecx
  Player *player; // rbx
  GadgetInteractBeyondCheckDistanceConfig *config; // [rsp+18h] [rbp-28h]
  std::shared_ptr<proto_log::AntiCheatBodyGadgetInteractBeyondCheckDistance> v8[2]; // [rsp+20h] [rbp-20h] BYREF

  if ( !std::operator==<proto_log::AntiCheatBodyGadgetInteractBeyondCheckDistance>(
          0LL,
          &this->gadget_interact_beyond_check_distance_log_ptr_) )
  {
    ServiceBox::findService<GameserverService>();
    GameserverService::getConfig((GameserverService *const)v8);
    config = &std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false> *const)v8)->security_config.gadget_interact_beyond_check_distance_config;
    std::shared_ptr<Config>::~shared_ptr((std::shared_ptr<Config> *const)v8);
    if ( is_on_disconnect
      || (Now = common::tools::TimeUtils::getNow(),
          SecurityUtils::checkAndUpdateAntiCheatLogCountRecord(
            (const BaseAntiCheatLogConfig *)config,
            Now,
            &this->gadget_interact_beyond_check_distance_log_record_)) )
    {
      v4 = std::__shared_ptr_access<proto_log::AntiCheatBodyGadgetInteractBeyondCheckDistance,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<proto_log::AntiCheatBodyGadgetInteractBeyondCheckDistance,(__gnu_cxx::_Lock_policy)2,false,false> *const)&this->gadget_interact_beyond_check_distance_log_ptr_);
      v5 = proto_log::AntiCheatBodyGadgetInteractBeyondCheckDistance::record_count(v4);
      if ( *(_BYTE *)(((unsigned __int64)&config->min_record_count >> 3) + 0x7FFF8000) != 0
        && (char)((((_BYTE)config + 20) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&config->min_record_count >> 3)
                                                              + 0x7FFF8000) )
      {
        __asan_report_load4(&config->min_record_count);
      }
      if ( v5 >= config->min_record_count )
      {
        if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
          __asan_report_load8();
        player = this->player_;
        std::shared_ptr<google::protobuf::Message>::shared_ptr<proto_log::AntiCheatBodyGadgetInteractBeyondCheckDistance,void>(
          (std::shared_ptr<google::protobuf::Message> *const)v8,
          &this->gadget_interact_beyond_check_distance_log_ptr_);
        Player::printAntiCheatLog(player, ANTI_CHEAT_ACTION_GADGET_INTERACT_BEYOND_CHECK_DISTANCE, (MessagePtr *)v8);
        std::shared_ptr<google::protobuf::Message>::~shared_ptr((std::shared_ptr<google::protobuf::Message> *const)v8);
      }
      std::shared_ptr<proto_log::AntiCheatBodyGadgetInteractBeyondCheckDistance>::shared_ptr(v8, 0LL);
      std::shared_ptr<proto_log::AntiCheatBodyGadgetInteractBeyondCheckDistance>::operator=(
        &this->gadget_interact_beyond_check_distance_log_ptr_,
        v8);
      std::shared_ptr<proto_log::AntiCheatBodyGadgetInteractBeyondCheckDistance>::~shared_ptr(v8);
    }
  }
};

// Line 5134: range 0000000013E6EDF2-0000000013E6EF84
uint32_t __cdecl PlayerSceneComp::refreshAndGetWeeklyBossResinDiscountNum(PlayerSceneComp *const this)
{
  std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v1; // rax
  time_t v2; // rcx
  time_t v3; // rsi
  bool v4; // dl
  uint32_t now; // [rsp+18h] [rbp-18h]
  uint32_t time_offset; // [rsp+1Ch] [rbp-14h]
  std::shared_ptr<Config> v8; // [rsp+20h] [rbp-10h] BYREF

  now = common::tools::TimeUtils::getNow();
  ServiceBox::findService<GameserverService>();
  GameserverService::getConfig((GameserverService *const)&v8);
  v1 = std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false> *const)&v8);
  time_offset = ConstValueExcelConfigMgr::getTimeOffsetSec(&v1->design_config.txt_config_mgr.const_value_config_mgr);
  std::shared_ptr<Config>::~shared_ptr(&v8);
  v2 = now;
  if ( *(_BYTE *)(((unsigned __int64)&this->last_weekly_boss_resin_discount_time_ >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)this - 4) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&this->last_weekly_boss_resin_discount_time_ >> 3)
                                                       + 0x7FFF8000) )
  {
    __asan_report_load4(&this->last_weekly_boss_resin_discount_time_);
  }
  v3 = v2;
  if ( !common::tools::TimeUtils::isSameWeek(this->last_weekly_boss_resin_discount_time_, v2, time_offset) )
  {
    if ( *(_BYTE *)(((unsigned __int64)&this->weekly_boss_resin_discount_num_ >> 3) + 0x7FFF8000) != 0
      && *(_BYTE *)(((unsigned __int64)&this->weekly_boss_resin_discount_num_ >> 3) + 0x7FFF8000) <= 3 )
    {
      __asan_report_store4(&this->weekly_boss_resin_discount_num_, v3, (_BYTE)this - 8);
    }
    this->weekly_boss_resin_discount_num_ = 0;
    v4 = *(_BYTE *)(((unsigned __int64)&this->last_weekly_boss_resin_discount_time_ >> 3) + 0x7FFF8000) != 0
      && (char)((((_BYTE)this - 4) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&this->last_weekly_boss_resin_discount_time_ >> 3)
                                                         + 0x7FFF8000);
    if ( v4 )
      __asan_report_store4(&this->last_weekly_boss_resin_discount_time_, (((_BYTE)this - 4) & 7u) + 3, v4);
    this->last_weekly_boss_resin_discount_time_ = now;
  }
  if ( *(_BYTE *)(((unsigned __int64)&this->weekly_boss_resin_discount_num_ >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->weekly_boss_resin_discount_num_ >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4(&this->weekly_boss_resin_discount_num_);
  }
  return this->weekly_boss_resin_discount_num_;
};

// Line 5147: range 0000000013E6EF86-0000000013E6F037
void __cdecl PlayerSceneComp::addWeeklyBossResinDiscountNum(PlayerSceneComp *const this)
{
  __int64 v1; // rsi
  uint32_t v2; // ecx
  char v3; // al
  uint32_t Now; // edi
  bool v5; // dl

  v2 = PlayerSceneComp::refreshAndGetWeeklyBossResinDiscountNum(this) + 1;
  v3 = *(_BYTE *)(((unsigned __int64)&this->weekly_boss_resin_discount_num_ >> 3) + 0x7FFF8000);
  if ( v3 != 0 && v3 <= 3 )
  {
    LOBYTE(v1) = v3 != 0;
    __asan_report_store4(&this->weekly_boss_resin_discount_num_, v1, (_BYTE)this - 8);
  }
  this->weekly_boss_resin_discount_num_ = v2;
  Now = common::tools::TimeUtils::getNow();
  v5 = *(_BYTE *)(((unsigned __int64)&this->last_weekly_boss_resin_discount_time_ >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)this - 4) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&this->last_weekly_boss_resin_discount_time_ >> 3)
                                                       + 0x7FFF8000);
  if ( v5 )
  {
    Now = (_DWORD)this + 1532;
    __asan_report_store4(&this->last_weekly_boss_resin_discount_time_, (((_BYTE)this - 4) & 7u) + 3, v5);
  }
  this->last_weekly_boss_resin_discount_time_ = Now;
};

// Line 5154: range 0000000013E6F038-0000000013E6F166
void __cdecl PlayerSceneComp::fillWeeklyBossResinDiscountInfo(
        PlayerSceneComp *const this,
        uint32_t original_resin_cost,
        proto::WeeklyBossResinDiscountInfo *weekly_boss_resin_discount_info)
{
  __m128i v3; // xmm0
  std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v4; // rax
  std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v5; // rax
  google::protobuf::uint32 discount_num; // [rsp+20h] [rbp-20h]
  google::protobuf::uint32 discount_num_limit; // [rsp+24h] [rbp-1Ch]
  uint32_t resin_cost; // [rsp+2Ch] [rbp-14h]
  std::shared_ptr<Config> v10; // [rsp+30h] [rbp-10h] BYREF

  discount_num = PlayerSceneComp::refreshAndGetWeeklyBossResinDiscountNum(this);
  ServiceBox::findService<GameserverService>();
  GameserverService::getConfig((GameserverService *const)&v10);
  v4 = std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false> *const)&v10);
  discount_num_limit = ConstValueExcelConfigMgr::getWeeklyBossResinDiscountNumLimit(&v4->design_config.txt_config_mgr.const_value_config_mgr);
  std::shared_ptr<Config>::~shared_ptr(&v10);
  ServiceBox::findService<GameserverService>();
  GameserverService::getConfig((GameserverService *const)&v10);
  v5 = std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false> *const)&v10);
  *(float *)v3.m128i_i32 = ConstValueExcelConfigMgr::getWeeklyBossResinDiscountRatio(&v5->design_config.txt_config_mgr.const_value_config_mgr);
  std::shared_ptr<Config>::~shared_ptr(&v10);
  resin_cost = (int)std::ceil((float)(int)original_resin_cost * COERCE_FLOAT(_mm_cvtsi128_si32(v3)));
  proto::WeeklyBossResinDiscountInfo::set_discount_num(weekly_boss_resin_discount_info, discount_num);
  proto::WeeklyBossResinDiscountInfo::set_discount_num_limit(weekly_boss_resin_discount_info, discount_num_limit);
  proto::WeeklyBossResinDiscountInfo::set_resin_cost(weekly_boss_resin_discount_info, resin_cost);
  proto::WeeklyBossResinDiscountInfo::set_original_resin_cost(weekly_boss_resin_discount_info, original_resin_cost);
};

// Line 5167: range 0000000013E6F168-0000000013E6F2BC
void __cdecl PlayerSceneComp::clearWeeklyBossResinDiscountInfoByGm(PlayerSceneComp *const this)
{
  common::milog::MiLogStream *v1; // rbx
  bool v2; // dl
  unsigned int val; // [rsp+1Ch] [rbp-34h] BYREF
  common::milog::MiLogStream v4; // [rsp+20h] [rbp-30h] BYREF

  common::milog::MiLogStream::create(
    &v4,
    &common::milog::MiLogDefault::default_log_obj_,
    1u,
    "./src/scene/player_scene_comp.cpp",
    "clearWeeklyBossResinDiscountInfoByGm",
    5168);
  v1 = common::milog::MiLogStream::operator<<<char [44],(char *[44])0>(
         &v4,
         (const char (*)[44])"clearWeeklyBossResinDiscountInfoByGm, uid: ");
  if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
    __asan_report_load8();
  val = Player::getUid(this->player_);
  common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v1, &val);
  common::milog::MiLogStream::~MiLogStream(&v4);
  if ( *(_BYTE *)(((unsigned __int64)&this->weekly_boss_resin_discount_num_ >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->weekly_boss_resin_discount_num_ >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_store4(&this->weekly_boss_resin_discount_num_, &val, (_BYTE)this - 8);
  }
  this->weekly_boss_resin_discount_num_ = 0;
  v2 = *(_BYTE *)(((unsigned __int64)&this->last_weekly_boss_resin_discount_time_ >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)this - 4) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&this->last_weekly_boss_resin_discount_time_ >> 3)
                                                       + 0x7FFF8000);
  if ( v2 )
    __asan_report_store4(&this->last_weekly_boss_resin_discount_time_, (((_BYTE)this - 4) & 7u) + 3, v2);
  this->last_weekly_boss_resin_discount_time_ = 0;
};

// Line 5174: range 0000000013E6F2BE-0000000013E6FB36
void __cdecl PlayerSceneComp::initGagdetChain(PlayerSceneComp *const this)
{
  unsigned __int64 v1; // r13
  __int64 v2; // rax
  _DWORD *v3; // r12
  std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v4; // rax
  std::_Rb_tree_const_iterator<unsigned int>::reference v5; // rax
  _DWORD *v6; // rdx
  std::_Rb_tree_const_iterator<unsigned int>::reference v7; // rax
  _DWORD *v8; // rdx
  common::milog::MiLogStream *v9; // rax
  common::milog::MiLogStream *v10; // rax
  common::milog::MiLogStream *v11; // rax
  std::_Rb_tree_const_iterator<unsigned int>::reference v12; // rax
  _DWORD *v13; // rdx
  std::_Rb_tree_const_iterator<unsigned int>::reference v14; // rax
  _DWORD *v15; // rdx
  std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v16; // rax
  common::milog::MiLogStream *v17; // rax
  uint32_t init_level; // r14d
  char *v19; // rsi
  std::map<unsigned int,unsigned int>::mapped_type *v20; // rax
  uint32_t *v21; // rdx
  char v22; // cl
  std::set<unsigned int>::iterator __for_begin; // [rsp+18h] [rbp-218h] BYREF
  std::set<unsigned int>::iterator __for_end; // [rsp+20h] [rbp-210h] BYREF
  std::set<unsigned int> *__for_range; // [rsp+28h] [rbp-208h]
  std::set<unsigned int> *__for_range_0; // [rsp+30h] [rbp-200h]
  std::set<unsigned int> *__for_range_1; // [rsp+38h] [rbp-1F8h]
  std::set<unsigned int> *__for_range_2; // [rsp+40h] [rbp-1F0h]
  const data::GadgetChainExcelConfig *chain_config_ptr; // [rsp+48h] [rbp-1E8h]
  std::shared_ptr<Config> v30; // [rsp+50h] [rbp-1E0h] BYREF
  common::milog::MiLogStream v31; // [rsp+60h] [rbp-1D0h] BYREF
  char v32[432]; // [rsp+80h] [rbp-1B0h] BYREF

  v1 = (unsigned __int64)v32;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_3(384LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "5 48 4 8 cid:5201 64 48 17 chain_id_set:5176 144 48 24 config_chain_id_set:5177 224 48 21 new_ch"
                        "ain_id_set:5179 304 48 25 removed_chain_id_set:5180";
  *(_QWORD *)(v1 + 16) = PlayerSceneComp::initGagdetChain;
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234556943;
  v3[536862723] = -219021312;
  v3[536862724] = 62194;
  v3[536862726] = -218959118;
  v3[536862728] = -219021312;
  v3[536862729] = 62194;
  v3[536862731] = -202116109;
  common::tools::MiscUtils::getAllMapKeysSet<std::map<unsigned int,unsigned int>>(
    (std::set<unsigned int> *)(v1 + 64),
    &this->gadget_chain_level_map_);
  ServiceBox::findService<GameserverService>();
  GameserverService::getConfig((GameserverService *const)&v30);
  v4 = std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false> *const)&v30);
  GadgetExcelConfigMgr::getGadgetChainIdSet(
    (std::set<unsigned int> *)(v1 + 144),
    &v4->design_config.txt_config_mgr.gadget_config_mgr);
  std::shared_ptr<Config>::~shared_ptr(&v30);
  std::set<unsigned int>::set((std::set<unsigned int> *const)(v1 + 224));
  std::set<unsigned int>::set((std::set<unsigned int> *const)(v1 + 304));
  __for_range = (std::set<unsigned int> *)(v1 + 144);
  __for_begin._M_node = std::set<unsigned int>::begin((const std::set<unsigned int> *const)(v1 + 144))._M_node;
  __for_end._M_node = std::set<unsigned int>::end((const std::set<unsigned int> *const)(v1 + 144))._M_node;
  while ( std::operator!=(&__for_begin, &__for_end) )
  {
    v5 = std::_Rb_tree_const_iterator<unsigned int>::operator*(&__for_begin);
    v6 = v5;
    if ( *(_BYTE *)(((unsigned __int64)v5 >> 3) + 0x7FFF8000) != 0
      && (char)(((unsigned __int8)v5 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)v5 >> 3) + 0x7FFF8000) )
    {
      __asan_report_load4(v5);
    }
    *(_DWORD *)(v1 + 48) = *v6;
    if ( !common::tools::MiscUtils::isContains<std::set<unsigned int>,unsigned int>(
            (std::set<unsigned int> *)(v1 + 64),
            (const unsigned int *)(v1 + 48)) )
      std::set<unsigned int>::insert(
        (std::set<unsigned int> *const)(v1 + 224),
        (const std::set<unsigned int>::value_type *)(v1 + 48));
    std::_Rb_tree_const_iterator<unsigned int>::operator++(&__for_begin);
  }
  __for_range_0 = (std::set<unsigned int> *)(v1 + 64);
  __for_begin._M_node = std::set<unsigned int>::begin((const std::set<unsigned int> *const)(v1 + 64))._M_node;
  __for_end._M_node = std::set<unsigned int>::end(__for_range_0)._M_node;
  while ( std::operator!=(&__for_begin, &__for_end) )
  {
    v7 = std::_Rb_tree_const_iterator<unsigned int>::operator*(&__for_begin);
    v8 = v7;
    if ( *(_BYTE *)(((unsigned __int64)v7 >> 3) + 0x7FFF8000) != 0
      && (char)(((unsigned __int8)v7 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)v7 >> 3) + 0x7FFF8000) )
    {
      __asan_report_load4(v7);
    }
    *(_DWORD *)(v1 + 48) = *v8;
    if ( !common::tools::MiscUtils::isContains<std::set<unsigned int>,unsigned int>(
            (std::set<unsigned int> *)(v1 + 144),
            (const unsigned int *)(v1 + 48)) )
      std::set<unsigned int>::insert(
        (std::set<unsigned int> *const)(v1 + 304),
        (const std::set<unsigned int>::value_type *)(v1 + 48));
    std::_Rb_tree_const_iterator<unsigned int>::operator++(&__for_begin);
  }
  common::milog::MiLogStream::create(
    &v31,
    &common::milog::MiLogDefault::default_log_obj_,
    1u,
    "./src/scene/player_scene_comp.cpp",
    "initGagdetChain",
    5196);
  v9 = common::milog::MiLogStream::operator<<<char [33],(char *[33])0>(
         &v31,
         (const char (*)[33])"[GADGET_CHAIN] removed chain id:");
  v10 = common::milog::MiLogStream::operator<<<unsigned int>(v9, (const std::set<unsigned int> *)(v1 + 304));
  v11 = common::milog::MiLogStream::operator<<<char [15],(char *[15])0>(v10, (const char (*)[15])" new chain id:");
  common::milog::MiLogStream::operator<<<unsigned int>(v11, (const std::set<unsigned int> *)(v1 + 224));
  common::milog::MiLogStream::~MiLogStream(&v31);
  __for_range_1 = (std::set<unsigned int> *)(v1 + 304);
  __for_begin._M_node = std::set<unsigned int>::begin((const std::set<unsigned int> *const)(v1 + 304))._M_node;
  __for_end._M_node = std::set<unsigned int>::end(__for_range_1)._M_node;
  while ( std::operator!=(&__for_begin, &__for_end) )
  {
    v12 = std::_Rb_tree_const_iterator<unsigned int>::operator*(&__for_begin);
    v13 = v12;
    if ( *(_BYTE *)(((unsigned __int64)v12 >> 3) + 0x7FFF8000) != 0
      && (char)(((unsigned __int8)v12 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)v12 >> 3) + 0x7FFF8000) )
    {
      __asan_report_load4(v12);
    }
    *(_DWORD *)(v1 + 48) = *v13;
    std::map<unsigned int,unsigned int>::erase(
      &this->gadget_chain_level_map_,
      (const std::map<unsigned int,unsigned int>::key_type *)(v1 + 48));
    std::_Rb_tree_const_iterator<unsigned int>::operator++(&__for_begin);
  }
  __for_range_2 = (std::set<unsigned int> *)(v1 + 224);
  __for_begin._M_node = std::set<unsigned int>::begin((const std::set<unsigned int> *const)(v1 + 224))._M_node;
  __for_end._M_node = std::set<unsigned int>::end(__for_range_2)._M_node;
  while ( std::operator!=(&__for_begin, &__for_end) )
  {
    v14 = std::_Rb_tree_const_iterator<unsigned int>::operator*(&__for_begin);
    v15 = v14;
    if ( *(_BYTE *)(((unsigned __int64)v14 >> 3) + 0x7FFF8000) != 0
      && (char)(((unsigned __int8)v14 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)v14 >> 3) + 0x7FFF8000) )
    {
      __asan_report_load4(v14);
    }
    *(_DWORD *)(v1 + 48) = *v15;
    ServiceBox::findService<GameserverService>();
    GameserverService::getConfig((GameserverService *const)&v30);
    v16 = std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false> *const)&v30);
    chain_config_ptr = data::GadgetExcelConfigMgrBase::findGadgetChainExcelConfig(
                         &v16->design_config.txt_config_mgr.gadget_config_mgr,
                         *(_DWORD *)(v1 + 48));
    std::shared_ptr<Config>::~shared_ptr(&v30);
    if ( chain_config_ptr )
    {
      if ( *(_BYTE *)(((unsigned __int64)&chain_config_ptr->init_level >> 3) + 0x7FFF8000) != 0
        && (char)((((_BYTE)chain_config_ptr + 12) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&chain_config_ptr->init_level >> 3)
                                                                        + 0x7FFF8000) )
      {
        __asan_report_load4(&chain_config_ptr->init_level);
      }
      init_level = chain_config_ptr->init_level;
      v19 = (char *)(v1 + 48);
      v20 = std::map<unsigned int,unsigned int>::operator[](
              &this->gadget_chain_level_map_,
              (const std::map<unsigned int,unsigned int>::key_type *)(v1 + 48));
      v21 = v20;
      v22 = *(_BYTE *)(((unsigned __int64)v20 >> 3) + 0x7FFF8000);
      if ( v22 != 0 && (char)(((unsigned __int8)v20 & 7) + 3) >= v22 )
      {
        LOBYTE(v19) = v22 != 0;
        __asan_report_store4(v20, v19, (_BYTE)v20);
      }
      *v21 = init_level;
    }
    else
    {
      common::milog::MiLogStream::create(
        &v31,
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/scene/player_scene_comp.cpp",
        "initGagdetChain",
        5206);
      v17 = common::milog::MiLogStream::operator<<<char [49],(char *[49])0>(
              &v31,
              (const char (*)[49])"[GADGET_CHAIN] chain config not found, chain_id:");
      common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v17, (const unsigned int *)(v1 + 48));
      common::milog::MiLogStream::~MiLogStream(&v31);
    }
    std::_Rb_tree_const_iterator<unsigned int>::operator++(&__for_begin);
  }
  std::set<unsigned int>::~set((std::set<unsigned int> *const)(v1 + 304));
  std::set<unsigned int>::~set((std::set<unsigned int> *const)(v1 + 224));
  std::set<unsigned int>::~set((std::set<unsigned int> *const)(v1 + 144));
  std::set<unsigned int>::~set((std::set<unsigned int> *const)(v1 + 64));
  if ( v32 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF800C) = 0LL;
    *(_DWORD *)((v1 >> 3) + 0x7FFF8018) = 0;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8020) = 0LL;
    *(_DWORD *)((v1 >> 3) + 0x7FFF802C) = 0;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8020) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8028) = 0xF5F5F5F5F5F5F5F5LL;
  }
};

// Line 5214: range 0000000013E6FB38-0000000013E6FE05
void __cdecl PlayerSceneComp::notifyAllGadgetChainData(PlayerSceneComp *const this)
{
  unsigned __int64 v1; // rbx
  __int64 v2; // rax
  unsigned __int64 v3; // r12
  std::tuple_element<1,const std::pair<unsigned int const,unsigned int> >::type *v4; // rax
  std::tuple_element<1,const std::pair<unsigned int const,unsigned int> >::type v5; // r14d
  std::tuple_element<0,const std::pair<unsigned int const,unsigned int> >::type *v6; // rsi
  unsigned int *v7; // rax
  std::tuple_element<1,const std::pair<unsigned int const,unsigned int> >::type *v8; // rdx
  char v9; // cl
  std::map<unsigned int,unsigned int>::iterator __for_begin; // [rsp+18h] [rbp-108h] BYREF
  std::map<unsigned int,unsigned int>::iterator __for_end; // [rsp+20h] [rbp-100h] BYREF
  google::protobuf::Map<unsigned int,unsigned int> *chain_map; // [rsp+28h] [rbp-F8h]
  std::map<unsigned int,unsigned int> *__for_range; // [rsp+30h] [rbp-F0h]
  const std::pair<unsigned int const,unsigned int> *v14; // [rsp+38h] [rbp-E8h]
  std::tuple_element<0,const std::pair<unsigned int const,unsigned int> >::type *chain_id; // [rsp+40h] [rbp-E0h]
  std::tuple_element<1,const std::pair<unsigned int const,unsigned int> >::type *chain_level; // [rsp+48h] [rbp-D8h]
  char v17[208]; // [rsp+50h] [rbp-D0h] BYREF

  v1 = (unsigned __int64)v17;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_2(160LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "1 32 96 11 notify:5215";
  *(_QWORD *)(v1 + 16) = PlayerSceneComp::notifyAllGadgetChainData;
  v3 = v1 >> 3;
  *(_DWORD *)(v3 + 2147450880) = -235802127;
  *(_DWORD *)(v3 + 2147450896) = -202116109;
  proto::GadgetChainLevelUpdateNotify::GadgetChainLevelUpdateNotify((proto::GadgetChainLevelUpdateNotify *const)(v1 + 32));
  chain_map = proto::GadgetChainLevelUpdateNotify::mutable_gadget_chain_level_map((proto::GadgetChainLevelUpdateNotify *const)(v1 + 32));
  __for_range = &this->gadget_chain_level_map_;
  __for_begin._M_node = std::map<unsigned int,unsigned int>::begin(&this->gadget_chain_level_map_)._M_node;
  __for_end._M_node = std::map<unsigned int,unsigned int>::end(&this->gadget_chain_level_map_)._M_node;
  while ( std::operator!=(&__for_begin, &__for_end) )
  {
    v14 = std::_Rb_tree_iterator<std::pair<unsigned int const,unsigned int>>::operator*(&__for_begin);
    chain_id = std::get<0ul,unsigned int const,unsigned int>(v14);
    v4 = (std::tuple_element<1,const std::pair<unsigned int const,unsigned int> >::type *)std::get<1ul,unsigned int const,unsigned int>(v14);
    chain_level = v4;
    if ( *(_BYTE *)(((unsigned __int64)v4 >> 3) + 0x7FFF8000) != 0
      && (char)(((unsigned __int8)v4 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)v4 >> 3) + 0x7FFF8000) )
    {
      __asan_report_load4(v4);
    }
    v5 = *chain_level;
    v6 = chain_id;
    v7 = google::protobuf::Map<unsigned int,unsigned int>::operator[](chain_map, chain_id);
    v8 = v7;
    v9 = *(_BYTE *)(((unsigned __int64)v7 >> 3) + 0x7FFF8000);
    if ( v9 != 0 && (char)(((unsigned __int8)v7 & 7) + 3) >= v9 )
    {
      LOBYTE(v6) = v9 != 0;
      __asan_report_store4(v7, v6, (_BYTE)v7);
    }
    *v8 = v5;
    std::_Rb_tree_iterator<std::pair<unsigned int const,unsigned int>>::operator++(&__for_begin);
  }
  if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
    __asan_report_load8();
  Player::sendProto(this->player_, (const google::protobuf::Message *)(v1 + 32));
  proto::GadgetChainLevelUpdateNotify::~GadgetChainLevelUpdateNotify((proto::GadgetChainLevelUpdateNotify *const)(v1 + 32));
  if ( v17 == (char *)v1 )
  {
    *(_DWORD *)((v1 >> 3) + 0x7FFF8000) = 0;
    *(_DWORD *)((v1 >> 3) + 0x7FFF8010) = 0;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v1 >> 3) + 0x7FFF8010) = -168430091;
  }
};

// Line 5226: range 0000000013E6FE06-0000000013E70E87
void __fastcall PlayerSceneComp::setGadgetChainLevel(
        PlayerSceneComp *const this,
        __int32 chain_id,
        __int32 target_level,
        __int8 is_notify)
{
  unsigned __int64 v4; // r13
  __int64 v5; // rax
  _DWORD *v6; // r12
  common::milog::MiLogStream *v7; // rax
  std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v8; // rax
  common::milog::MiLogStream *v9; // rax
  std::map<unsigned int,unsigned int>::mapped_type *v10; // rax
  uint32_t *v11; // rdx
  uint32_t *v12; // rax
  uint32_t *v13; // rdx
  uint32_t v14; // r14d
  char *v15; // rsi
  std::map<unsigned int,unsigned int>::mapped_type *v16; // rax
  uint32_t *v17; // rdx
  char v18; // cl
  std::tuple_element<1,const std::pair<unsigned int const,unsigned int> >::type *v19; // rax
  std::tuple_element<1,const std::pair<unsigned int const,unsigned int> >::type v20; // r14d
  std::tuple_element<0,const std::pair<unsigned int const,unsigned int> >::type *v21; // rsi
  unsigned int *v22; // rax
  std::tuple_element<1,const std::pair<unsigned int const,unsigned int> >::type *v23; // rdx
  char v24; // cl
  PlayerEventComp *EventComp; // r14
  common::milog::MiLogStream *v26; // rax
  common::milog::MiLogStream *v27; // rax
  common::milog::MiLogStream *v28; // r14
  std::map<unsigned int,unsigned int>::mapped_type *v29; // rax
  PlayerBasicComp *BasicComp; // rax
  std::__shared_ptr_access<proto_log::PlayerLogBodySetGadgetChainLevel,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v31; // rax
  std::__shared_ptr_access<proto_log::PlayerLogBodySetGadgetChainLevel,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v32; // r14
  std::map<unsigned int,unsigned int>::mapped_type *v33; // rax
  google::protobuf::uint32 *v34; // rdx
  Player *player; // r14
  __int64 v36; // rsi
  uint32_t Uid; // r14d
  std::__shared_ptr_access<Event,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v38; // rdx
  char v39; // cl
  std::__shared_ptr_access<Event,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v40; // rax
  common::milog::MiLogStream *v41; // rsi
  std::__shared_ptr_access<Event,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v42; // rdx
  char v43; // cl
  __int64 v44; // rax
  char v45; // dl
  bool v46; // dl
  std::__detail::_Node_const_iterator<unsigned int,true,false>::reference v47; // rax
  _DWORD *v48; // rdx
  common::milog::MiLogStream *v49; // rax
  common::milog::MiLogStream *v50; // rax
  common::milog::MiLogStream *v51; // rax
  common::milog::MiLogStream *v52; // rax
  Scene *v53; // rax
  uint32_t BlockGroupComp; // eax
  Group *v55; // rax
  std::string v56; // [rsp+0h] [rbp-270h]
  PlayerSceneComp *thisa; // [rsp+18h] [rbp-258h]
  uint32_t old_level; // [rsp+20h] [rbp-250h]
  uint32_t real_level; // [rsp+24h] [rbp-24Ch]
  std::map<unsigned int,unsigned int>::iterator __for_begin; // [rsp+28h] [rbp-248h] BYREF
  std::map<unsigned int,unsigned int>::iterator __for_end; // [rsp+30h] [rbp-240h] BYREF
  const data::GadgetChainExcelConfig *chain_config_ptr; // [rsp+38h] [rbp-238h]
  google::protobuf::Map<unsigned int,unsigned int> *chain_map; // [rsp+40h] [rbp-230h]
  std::map<unsigned int,unsigned int> *__for_range; // [rsp+48h] [rbp-228h]
  const std::pair<unsigned int const,unsigned int> *v65; // [rsp+50h] [rbp-220h]
  std::tuple_element<0,const std::pair<unsigned int const,unsigned int> >::type *chain_ida; // [rsp+58h] [rbp-218h]
  std::tuple_element<1,const std::pair<unsigned int const,unsigned int> >::type *chain_level; // [rsp+60h] [rbp-210h]
  const LuaConfigMgr *lua_config_mgr; // [rsp+68h] [rbp-208h]
  const std::unordered_set<unsigned int> *group_id_set; // [rsp+70h] [rbp-200h]
  const std::unordered_set<unsigned int> *__for_range_0; // [rsp+78h] [rbp-1F8h]
  common::milog::MiLogStream v71; // [rsp+80h] [rbp-1F0h] BYREF
  char v72[464]; // [rsp+A0h] [rbp-1D0h] BYREF

  *(&v56._anon_0._M_allocated_capacity + 1) = (std::string::size_type)this;
  HIDWORD(v56._anon_0._M_allocated_capacity) = chain_id;
  *(_DWORD *)v56._anon_0._M_local_buf = target_level;
  BYTE4(v56._M_string_length) = is_notify;
  v4 = (unsigned __int64)v72;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v5 = __asan_stack_malloc_3(416LL);
    if ( v5 )
      v4 = v5;
  }
  *(_QWORD *)v4 = 1102416563LL;
  *(_QWORD *)(v4 + 8) = "11 48 1 11 holder:5262 64 4 13 group_id:5285 80 4 13 scene_id:5287 96 4 13 chain_id:5225 112 4 1"
                        "7 target_level:5225 128 16 21 player_event_ptr:5252 160 16 12 log_ptr:5263 192 16 14 event_ptr:5"
                        "273 224 16 14 scene_ptr:5288 256 16 14 group_ptr:5294 288 96 11 notify:5243";
  *(_QWORD *)(v4 + 16) = PlayerSceneComp::setGadgetChainLevel;
  v6 = (_DWORD *)(v4 >> 3);
  v6[536862720] = -235802127;
  v6[536862721] = -234753551;
  v6[536862722] = -234556924;
  v6[536862723] = -234556924;
  v6[536862724] = -219021312;
  v6[536862725] = -219021312;
  v6[536862726] = -219021312;
  v6[536862727] = -219021312;
  v6[536862728] = -219021312;
  v6[536862732] = -202116109;
  *(_DWORD *)(v4 + 96) = chain_id;
  *(_DWORD *)(v4 + 112) = *(_DWORD *)v56._anon_0._M_local_buf;
  if ( !common::tools::MiscUtils::isContains<std::map<unsigned int,unsigned int>,unsigned int>(
          &this->gadget_chain_level_map_,
          (const unsigned int *)(v4 + 96)) )
  {
    common::milog::MiLogStream::create(
      &v71,
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/scene/player_scene_comp.cpp",
      "setGadgetChainLevel",
      5229);
    v7 = common::milog::MiLogStream::operator<<<char [53],(char *[53])0>(
           &v71,
           (const char (*)[53])"[GADGET_CHAIN] gadget chain id not in map, chain_id:");
    common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v7, (const unsigned int *)(v4 + 96));
    common::milog::MiLogStream::~MiLogStream(&v71);
  }
  else
  {
    ServiceBox::findService<GameserverService>();
    GameserverService::getConfig((GameserverService *const)(v4 + 256));
    v8 = std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 256));
    chain_config_ptr = data::GadgetExcelConfigMgrBase::findGadgetChainExcelConfig(
                         &v8->design_config.txt_config_mgr.gadget_config_mgr,
                         *(_DWORD *)(v4 + 96));
    std::shared_ptr<Config>::~shared_ptr((std::shared_ptr<Config> *const)(v4 + 256));
    if ( chain_config_ptr )
    {
      v10 = std::map<unsigned int,unsigned int>::operator[](
              &this->gadget_chain_level_map_,
              (const std::map<unsigned int,unsigned int>::key_type *)(v4 + 96));
      v11 = v10;
      if ( *(_BYTE *)(((unsigned __int64)v10 >> 3) + 0x7FFF8000) != 0
        && (char)(((unsigned __int8)v10 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)v10 >> 3) + 0x7FFF8000) )
      {
        __asan_report_load4(v10);
      }
      old_level = *v11;
      v12 = (uint32_t *)std::min<unsigned int>((const unsigned int *)(v4 + 112), &chain_config_ptr->max_level);
      v13 = v12;
      if ( *(_BYTE *)(((unsigned __int64)v12 >> 3) + 0x7FFF8000) != 0
        && (char)(((unsigned __int8)v12 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)v12 >> 3) + 0x7FFF8000) )
      {
        __asan_report_load4(v12);
      }
      real_level = *v13;
      v14 = *v13;
      v15 = (char *)(v4 + 96);
      v16 = std::map<unsigned int,unsigned int>::operator[](
              &this->gadget_chain_level_map_,
              (const std::map<unsigned int,unsigned int>::key_type *)(v4 + 96));
      v17 = v16;
      v18 = *(_BYTE *)(((unsigned __int64)v16 >> 3) + 0x7FFF8000);
      if ( v18 != 0 && (char)(((unsigned __int8)v16 & 7) + 3) >= v18 )
      {
        LOBYTE(v15) = v18 != 0;
        __asan_report_store4(v16, v15, (_BYTE)v16);
      }
      *v17 = v14;
      if ( BYTE4(v56._M_string_length) )
      {
        proto::GadgetChainLevelChangeNotify::GadgetChainLevelChangeNotify((proto::GadgetChainLevelChangeNotify *const)(v4 + 288));
        chain_map = proto::GadgetChainLevelChangeNotify::mutable_gadget_chain_level_map((proto::GadgetChainLevelChangeNotify *const)(v4 + 288));
        __for_range = &this->gadget_chain_level_map_;
        __for_begin._M_node = std::map<unsigned int,unsigned int>::begin(&this->gadget_chain_level_map_)._M_node;
        __for_end._M_node = std::map<unsigned int,unsigned int>::end(&this->gadget_chain_level_map_)._M_node;
        while ( std::operator!=(&__for_begin, &__for_end) )
        {
          v65 = std::_Rb_tree_iterator<std::pair<unsigned int const,unsigned int>>::operator*(&__for_begin);
          chain_ida = std::get<0ul,unsigned int const,unsigned int>(v65);
          v19 = (std::tuple_element<1,const std::pair<unsigned int const,unsigned int> >::type *)std::get<1ul,unsigned int const,unsigned int>(v65);
          chain_level = v19;
          if ( *(_BYTE *)(((unsigned __int64)v19 >> 3) + 0x7FFF8000) != 0
            && (char)(((unsigned __int8)v19 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)v19 >> 3) + 0x7FFF8000) )
          {
            __asan_report_load4(v19);
          }
          v20 = *chain_level;
          v21 = chain_ida;
          v22 = google::protobuf::Map<unsigned int,unsigned int>::operator[](chain_map, chain_ida);
          v23 = v22;
          v24 = *(_BYTE *)(((unsigned __int64)v22 >> 3) + 0x7FFF8000);
          if ( v24 != 0 && (char)(((unsigned __int8)v22 & 7) + 3) >= v24 )
          {
            LOBYTE(v21) = v24 != 0;
            __asan_report_store4(v22, v21, (_BYTE)v22);
          }
          *v23 = v20;
          std::_Rb_tree_iterator<std::pair<unsigned int const,unsigned int>>::operator++(&__for_begin);
        }
        if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
          __asan_report_load8();
        Player::sendProto(this->player_, (const google::protobuf::Message *)(v4 + 288));
        proto::GadgetChainLevelChangeNotify::~GadgetChainLevelChangeNotify((proto::GadgetChainLevelChangeNotify *const)(v4 + 288));
      }
      common::tools::perf::make_shared<GadgetChainSetLevelEvent,unsigned int &>(
        (unsigned int *)(v4 + 128),
        (unsigned int *)(v4 + 96));
      if ( std::operator==<GadgetChainSetLevelEvent>(0LL, (const std::shared_ptr<GadgetChainSetLevelEvent> *)(v4 + 128)) )
      {
        common::milog::MiLogStream::create(
          &v71,
          &common::milog::MiLogDefault::default_log_obj_,
          3u,
          "./src/scene/player_scene_comp.cpp",
          "setGadgetChainLevel",
          5255);
        common::milog::MiLogStream::operator<<<char [28],(char *[28])0>(
          &v71,
          (const char (*)[28])"player_event_ptr is nullptr");
        common::milog::MiLogStream::~MiLogStream(&v71);
      }
      else
      {
        if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
          __asan_report_load8();
        EventComp = Player::getEventComp(this->player_);
        std::shared_ptr<BaseEvent>::shared_ptr<GadgetChainSetLevelEvent,void>(
          (std::shared_ptr<BaseEvent> *const)(v4 + 256),
          (const std::shared_ptr<GadgetChainSetLevelEvent> *)(v4 + 128));
        PlayerEventComp::notifyEvent(EventComp, (BaseEventPtr *)(v4 + 256));
        std::shared_ptr<BaseEvent>::~shared_ptr((std::shared_ptr<BaseEvent> *const)(v4 + 256));
      }
      common::milog::MiLogStream::create(
        &v71,
        &common::milog::MiLogDefault::default_log_obj_,
        1u,
        "./src/scene/player_scene_comp.cpp",
        "setGadgetChainLevel",
        5261);
      v26 = common::milog::MiLogStream::operator<<<char [42],(char *[42])0>(
              &v71,
              (const char (*)[42])"[GADGET_CHAIN] set chain level, chain_id:");
      v27 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v26, (const unsigned int *)(v4 + 96));
      v28 = common::milog::MiLogStream::operator<<<char [12],(char *[12])0>(v27, (const char (*)[12])" now_level:");
      v29 = std::map<unsigned int,unsigned int>::operator[](
              &this->gadget_chain_level_map_,
              (const std::map<unsigned int,unsigned int>::key_type *)(v4 + 96));
      common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v28, v29);
      common::milog::MiLogStream::~MiLogStream(&v71);
      if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
        __asan_report_load8();
      BasicComp = Player::getBasicComp(this->player_);
      PlayerBasicComp::getNextTransNo[abi:cxx11]((std::string *)&v71, BasicComp);
      StatLogUtils::ContextHolder::ContextHolder((StatLogUtils::ContextHolder *const)(v4 + 48), 0xE7Eu, v56);
      std::string::~string(&v71);
      common::tools::perf::make_shared<proto_log::PlayerLogBodySetGadgetChainLevel>();
      v31 = std::__shared_ptr_access<proto_log::PlayerLogBodySetGadgetChainLevel,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<proto_log::PlayerLogBodySetGadgetChainLevel,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 160));
      proto_log::PlayerLogBodySetGadgetChainLevel::set_gadget_chain_id(v31, *(_DWORD *)(v4 + 96));
      v32 = std::__shared_ptr_access<proto_log::PlayerLogBodySetGadgetChainLevel,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<proto_log::PlayerLogBodySetGadgetChainLevel,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 160));
      v33 = std::map<unsigned int,unsigned int>::operator[](
              &thisa->gadget_chain_level_map_,
              (const std::map<unsigned int,unsigned int>::key_type *)(v4 + 96));
      v34 = v33;
      if ( *(_BYTE *)(((unsigned __int64)v33 >> 3) + 0x7FFF8000) != 0
        && (char)(((unsigned __int8)v33 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)v33 >> 3) + 0x7FFF8000) )
      {
        __asan_report_load4(v33);
      }
      proto_log::PlayerLogBodySetGadgetChainLevel::set_level(v32, *v34);
      if ( *(_BYTE *)(((unsigned __int64)&thisa->player_ >> 3) + 0x7FFF8000) )
        __asan_report_load8();
      player = thisa->player_;
      std::shared_ptr<google::protobuf::Message>::shared_ptr(
        (std::shared_ptr<google::protobuf::Message> *const)(v4 + 256),
        0LL);
      std::shared_ptr<google::protobuf::Message>::shared_ptr<proto_log::PlayerLogBodySetGadgetChainLevel,void>(
        (std::shared_ptr<google::protobuf::Message> *const)(v4 + 224),
        (const std::shared_ptr<proto_log::PlayerLogBodySetGadgetChainLevel> *)(v4 + 160));
      Player::printStatLog(player, (MessagePtr *)(v4 + 224), (MessagePtr *)(v4 + 256), 0xEu);
      std::shared_ptr<google::protobuf::Message>::~shared_ptr((std::shared_ptr<google::protobuf::Message> *const)(v4 + 224));
      std::shared_ptr<google::protobuf::Message>::~shared_ptr((std::shared_ptr<google::protobuf::Message> *const)(v4 + 256));
      ServiceBox::findService<GameserverService>();
      GameserverService::getConfig((GameserverService *const)(v4 + 256));
      lua_config_mgr = &std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 256))->design_config.lua_config_mgr;
      std::shared_ptr<Config>::~shared_ptr((std::shared_ptr<Config> *const)(v4 + 256));
      EventUtil::createEvent((data::EventType)(v4 + 192));
      v36 = 0LL;
      if ( std::operator==<Event>((const std::shared_ptr<Event> *)(v4 + 192), 0LL) )
      {
        common::milog::MiLogStream::create(
          &v71,
          &common::milog::MiLogDefault::default_log_obj_,
          3u,
          "./src/scene/player_scene_comp.cpp",
          "setGadgetChainLevel",
          5276);
        common::milog::MiLogStream::operator<<<char [52],(char *[52])0>(
          &v71,
          (const char (*)[52])"createEvent(EVENT_GADGET_CHAIN_LEVEL_CHANGE) failed");
        common::milog::MiLogStream::~MiLogStream(&v71);
      }
      else
      {
        if ( *(_BYTE *)(((unsigned __int64)&thisa->player_ >> 3) + 0x7FFF8000) )
          __asan_report_load8();
        Uid = Player::getUid(thisa->player_);
        v38 = std::__shared_ptr_access<Event,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Event,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 192));
        v39 = *(_BYTE *)(((unsigned __int64)&v38->uid >> 3) + 0x7FFF8000);
        if ( v39 != 0 && (char)((((_BYTE)v38 + 60) & 7) + 3) >= v39 )
        {
          LOBYTE(v36) = v39 != 0;
          __asan_report_store4(&v38->uid, v36, (_BYTE)v38);
        }
        v38->uid = Uid;
        common::tools::StringUtils::numToStr<unsigned int>((std::string *)&v71, *(_DWORD *)(v4 + 96));
        v40 = std::__shared_ptr_access<Event,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Event,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 192));
        v41 = &v71;
        std::string::operator=(&v40->source_name, &v71);
        std::string::~string(&v71);
        v42 = std::__shared_ptr_access<Event,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Event,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 192));
        v43 = *(_BYTE *)(((unsigned __int64)&v42->param1 >> 3) + 0x7FFF8000);
        if ( v43 != 0 && (char)((((_BYTE)v42 + 44) & 7) + 3) >= v43 )
        {
          LOBYTE(v41) = v43 != 0;
          __asan_report_store4(&v42->param1, v41, (_BYTE)v42);
        }
        v42->param1 = old_level;
        v44 = (__int64)std::__shared_ptr_access<Event,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Event,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 192));
        v45 = *(_BYTE *)(((unsigned __int64)(v44 + 48) >> 3) + 0x7FFF8000);
        LOBYTE(v41) = v45 != 0;
        v46 = v45 != 0 && v45 <= 3;
        if ( v46 )
          v44 = __asan_report_store4(v44 + 48, v41, v46);
        *(_DWORD *)(v44 + 48) = real_level;
        group_id_set = LuaConfigMgr::getEventChainLevelChangeGroupSet(lua_config_mgr, *(_DWORD *)(v4 + 96));
        __for_range_0 = group_id_set;
        __for_begin._M_node = (std::_Rb_tree_iterator<std::pair<unsigned int const,unsigned int> >::_Base_ptr)std::unordered_set<unsigned int>::begin(group_id_set)._M_cur;
        __for_end._M_node = (std::_Rb_tree_iterator<std::pair<unsigned int const,unsigned int> >::_Base_ptr)std::unordered_set<unsigned int>::end(__for_range_0)._M_cur;
        while ( std::__detail::operator!=<unsigned int,false>(
                  (const std::__detail::_Node_iterator_base<unsigned int,false> *)&__for_begin,
                  (const std::__detail::_Node_iterator_base<unsigned int,false> *)&__for_end) )
        {
          v47 = std::__detail::_Node_const_iterator<unsigned int,true,false>::operator*((const std::__detail::_Node_const_iterator<unsigned int,true,false> *const)&__for_begin);
          v48 = v47;
          if ( *(_BYTE *)(((unsigned __int64)v47 >> 3) + 0x7FFF8000) != 0
            && (char)(((unsigned __int8)v47 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)v47 >> 3) + 0x7FFF8000) )
          {
            __asan_report_load4(v47);
          }
          *(_DWORD *)(v4 + 64) = *v48;
          *(_DWORD *)(v4 + 80) = LuaConfigMgr::getSceneIdByGroupId(lua_config_mgr, *(_DWORD *)(v4 + 64));
          PlayerSceneComp::findScene((const PlayerSceneComp *const)(v4 + 224), (uint32_t)thisa);
          if ( std::operator==<Scene>(0LL, (const std::shared_ptr<Scene> *)(v4 + 224)) )
          {
            common::milog::MiLogStream::create(
              &v71,
              &common::milog::MiLogDefault::default_log_obj_,
              1u,
              "./src/scene/player_scene_comp.cpp",
              "setGadgetChainLevel",
              5291);
            v49 = common::milog::MiLogStream::operator<<<char [11],(char *[11])0>(
                    &v71,
                    (const char (*)[11])"findScene:");
            v50 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                    v49,
                    (const unsigned int *)(v4 + 80));
            v51 = common::milog::MiLogStream::operator<<<char [9],(char *[9])0>(v50, (const char (*)[9])" nullptr");
            v52 = common::milog::MiLogStream::operator<<<char [12],(char *[12])0>(
                    v51,
                    (const char (*)[12])" for group:");
            common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v52, (const unsigned int *)(v4 + 64));
            common::milog::MiLogStream::~MiLogStream(&v71);
          }
          else
          {
            v53 = std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 224));
            BlockGroupComp = (unsigned int)Scene::getBlockGroupComp(v53);
            SceneBlockGroupComp::getActiveGroup((SceneBlockGroupComp *const)(v4 + 256), BlockGroupComp);
            if ( std::operator!=<Group>(0LL, (const std::shared_ptr<Group> *)(v4 + 256)) )
            {
              v55 = std::__shared_ptr_access<Group,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Group,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 256));
              Group::handleEvent(v55, (EventPtr *)(v4 + 192));
            }
            std::shared_ptr<Group>::~shared_ptr((std::shared_ptr<Group> *const)(v4 + 256));
          }
          std::shared_ptr<Scene>::~shared_ptr((std::shared_ptr<Scene> *const)(v4 + 224));
          std::__detail::_Node_const_iterator<unsigned int,true,false>::operator++((std::__detail::_Node_const_iterator<unsigned int,true,false> *const)&__for_begin);
        }
      }
      std::shared_ptr<Event>::~shared_ptr((std::shared_ptr<Event> *const)(v4 + 192));
      std::shared_ptr<proto_log::PlayerLogBodySetGadgetChainLevel>::~shared_ptr((std::shared_ptr<proto_log::PlayerLogBodySetGadgetChainLevel> *const)(v4 + 160));
      StatLogUtils::ContextHolder::~ContextHolder((StatLogUtils::ContextHolder *const)(v4 + 48));
      std::shared_ptr<GadgetChainSetLevelEvent>::~shared_ptr((std::shared_ptr<GadgetChainSetLevelEvent> *const)(v4 + 128));
    }
    else
    {
      common::milog::MiLogStream::create(
        &v71,
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/scene/player_scene_comp.cpp",
        "setGadgetChainLevel",
        5235);
      v9 = common::milog::MiLogStream::operator<<<char [53],(char *[53])0>(
             &v71,
             (const char (*)[53])"[GADGET_CHAIN] chain_config_ptr not found, chain_id:");
      common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v9, (const unsigned int *)(v4 + 96));
      common::milog::MiLogStream::~MiLogStream(&v71);
    }
  }
  if ( v72 == (char *)v4 )
  {
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8008) = 0LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8010) = 0LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8018) = 0LL;
    *(_DWORD *)((v4 >> 3) + 0x7FFF8020) = 0;
    *(_DWORD *)((v4 >> 3) + 0x7FFF8030) = 0;
  }
  else
  {
    *(_QWORD *)v4 = 1172321806LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8020) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8028) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v4 >> 3) + 0x7FFF8030) = -168430091;
  }
};

// Line 5303: range 0000000013E70E88-0000000013E710FA
__int64 __fastcall PlayerSceneComp::findGadgetChainLevel(
        PlayerSceneComp *const this,
        uint32_t chain_id,
        unsigned __int64 chain_level)
{
  unsigned __int64 v3; // rbx
  __int64 v4; // rax
  _DWORD *v5; // r12
  std::_Rb_tree_iterator<std::pair<unsigned int const,unsigned int> >::_Self *p_y; // rsi
  common::milog::MiLogStream *v7; // rax
  __int64 result; // rax
  std::_Rb_tree_iterator<std::pair<unsigned int const,unsigned int> >::pointer v9; // rdx
  unsigned int *p_second; // rax
  uint32_t second; // ecx
  char v12; // dl
  bool v13; // dl
  std::_Rb_tree_iterator<std::pair<unsigned int const,unsigned int> >::_Self __y; // [rsp+28h] [rbp-A8h] BYREF
  common::milog::MiLogStream v16; // [rsp+30h] [rbp-A0h] BYREF
  char v17[128]; // [rsp+50h] [rbp-80h] BYREF

  v3 = (unsigned __int64)v17;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_1(96LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "2 48 4 13 chain_id:5302 64 8 9 iter:5304";
  *(_QWORD *)(v3 + 16) = PlayerSceneComp::findGadgetChainLevel;
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = -234556943;
  v5[536862722] = -202116352;
  *(_DWORD *)(v3 + 48) = chain_id;
  *(std::map<unsigned int,unsigned int>::iterator *)(v3 + 64) = std::map<unsigned int,unsigned int>::find(
                                                                  &this->gadget_chain_level_map_,
                                                                  (const std::map<unsigned int,unsigned int>::key_type *)(v3 + 48));
  __y._M_node = std::map<unsigned int,unsigned int>::end(&this->gadget_chain_level_map_)._M_node;
  p_y = &__y;
  if ( std::operator==(
         (const std::_Rb_tree_iterator<std::pair<unsigned int const,unsigned int> >::_Self *)(v3 + 64),
         &__y) )
  {
    common::milog::MiLogStream::create(
      &v16,
      &common::milog::MiLogDefault::default_log_obj_,
      1u,
      "./src/scene/player_scene_comp.cpp",
      "findGadgetChainLevel",
      5307);
    v7 = common::milog::MiLogStream::operator<<<char [53],(char *[53])0>(
           &v16,
           (const char (*)[53])"[GADGET_CHAIN] gadget chain id not in map, chain_id:");
    common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v7, (const unsigned int *)(v3 + 48));
    common::milog::MiLogStream::~MiLogStream(&v16);
    result = 0xFFFFFFFFLL;
  }
  else
  {
    v9 = std::_Rb_tree_iterator<std::pair<unsigned int const,unsigned int>>::operator->((const std::_Rb_tree_iterator<std::pair<unsigned int const,unsigned int> > *const)(v3 + 64));
    p_second = &v9->second;
    if ( *(_BYTE *)(((unsigned __int64)p_second >> 3) + 0x7FFF8000) != 0
      && (char)(((unsigned __int8)p_second & 7) + 3) >= *(_BYTE *)(((unsigned __int64)p_second >> 3) + 0x7FFF8000) )
    {
      __asan_report_load4(p_second);
    }
    second = v9->second;
    v12 = *(_BYTE *)((chain_level >> 3) + 0x7FFF8000);
    LOBYTE(p_y) = v12 != 0;
    v13 = v12 != 0 && (char)((chain_level & 7) + 3) >= v12;
    if ( v13 )
      __asan_report_store4(chain_level, p_y, v13);
    *(_DWORD *)chain_level = second;
    result = 0LL;
  }
  if ( v17 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8008) = 0;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8008) = -168430091;
  }
  return result;
};

// Line 5316: range 0000000013E710FC-0000000013E7166E
PlayerSceneComp *__fastcall PlayerSceneComp::getPlayerWorldScene(PlayerSceneComp *const this, __int64 scene_id, int a3)
{
  unsigned __int64 v3; // r12
  __int64 v4; // rax
  _DWORD *v5; // r13
  common::milog::MiLogStream *v6; // r14
  unsigned __int64 v7; // rax
  unsigned __int64 v8; // rdx
  common::milog::MiLogStream *v9; // r14
  common::milog::MiLogStream *v10; // rax
  common::milog::MiLogStream *v11; // rax
  std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v12; // rax
  common::milog::MiLogStream *v13; // r14
  common::milog::MiLogStream *v14; // rax
  common::milog::MiLogStream *v15; // rax
  common::milog::MiLogStream *v16; // rax
  common::milog::MiLogStream *v17; // r14
  std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v18; // rax
  unsigned int Uid; // [rsp+28h] [rbp-D8h] BYREF
  unsigned int val; // [rsp+2Ch] [rbp-D4h] BYREF
  common::milog::MiLogStream v23; // [rsp+30h] [rbp-D0h] BYREF
  char v24[176]; // [rsp+50h] [rbp-B0h] BYREF

  v3 = (unsigned __int64)v24;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_1(128LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "3 48 4 13 scene_id:5315 64 16 14 world_ptr:5317 96 16 14 scene_ptr:5325";
  *(_QWORD *)(v3 + 16) = PlayerSceneComp::getPlayerWorldScene;
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = -234556943;
  v5[536862722] = -219021312;
  v5[536862723] = -202178560;
  *(_DWORD *)(v3 + 48) = a3;
  PlayerSceneComp::getMyPlayerWorld((const PlayerSceneComp *const)(v3 + 64));
  if ( std::operator==<PlayerWorld>(0LL, (const std::shared_ptr<PlayerWorld> *)(v3 + 64)) )
  {
    common::milog::MiLogStream::create(
      &v23,
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/scene/player_scene_comp.cpp",
      "getPlayerWorldScene",
      5320);
    v6 = common::milog::MiLogStream::operator<<<char [20],(char *[20])0>(
           &v23,
           (const char (*)[20])"world is null, uid:");
    if ( *(_BYTE *)(((unsigned __int64)(scene_id + 24) >> 3) + 0x7FFF8000) )
      __asan_report_load8();
    val = Player::getUid(*(const Player *const *)(scene_id + 24));
    common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v6, &val);
    common::milog::MiLogStream::~MiLogStream(&v23);
    std::shared_ptr<PlayerWorldScene>::shared_ptr((std::shared_ptr<PlayerWorldScene> *const)this, 0LL);
  }
  else
  {
    v7 = (unsigned __int64)std::__shared_ptr_access<PlayerWorld,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<PlayerWorld,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 64));
    if ( *(_BYTE *)((v7 >> 3) + 0x7FFF8000) )
      v7 = __asan_report_load8();
    v8 = *(_QWORD *)v7 + 80LL;
    if ( *(_BYTE *)((v8 >> 3) + 0x7FFF8000) )
      v7 = __asan_report_load8();
    (*(void (__fastcall **)(unsigned __int64, unsigned __int64, _QWORD))v8)(v3 + 96, v7, *(unsigned int *)(v3 + 48));
    if ( std::operator==<Scene>(0LL, (const std::shared_ptr<Scene> *)(v3 + 96)) )
    {
      common::milog::MiLogStream::create(
        &v23,
        &common::milog::MiLogDefault::default_log_obj_,
        4u,
        "./src/scene/player_scene_comp.cpp",
        "getPlayerWorldScene",
        5328);
      v9 = common::milog::MiLogStream::operator<<<char [20],(char *[20])0>(
             &v23,
             (const char (*)[20])"scene is null, uid:");
      if ( *(_BYTE *)(((unsigned __int64)(scene_id + 24) >> 3) + 0x7FFF8000) )
        __asan_report_load8();
      val = Player::getUid(*(const Player *const *)(scene_id + 24));
      v10 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v9, &val);
      v11 = common::milog::MiLogStream::operator<<<char [13],(char *[13])0>(v10, (const char (*)[13])" ,scene_id: ");
      common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v11, (const unsigned int *)(v3 + 48));
      common::milog::MiLogStream::~MiLogStream(&v23);
      std::shared_ptr<PlayerWorldScene>::shared_ptr((std::shared_ptr<PlayerWorldScene> *const)this, 0LL);
    }
    else
    {
      v12 = std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 96));
      if ( Scene::getSceneType(v12) == SCENE_WORLD )
      {
        if ( *(_WORD *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
          __asan_report_store16(this, v3 + 96);
        std::dynamic_pointer_cast<PlayerWorldScene,Scene>((const std::shared_ptr<Scene> *)this);
      }
      else
      {
        common::milog::MiLogStream::create(
          &v23,
          &common::milog::MiLogDefault::default_log_obj_,
          4u,
          "./src/scene/player_scene_comp.cpp",
          "getPlayerWorldScene",
          5334);
        v13 = common::milog::MiLogStream::operator<<<char [26],(char *[26])0>(
                &v23,
                (const char (*)[26])"scene type invalid, uid: ");
        if ( *(_BYTE *)(((unsigned __int64)(scene_id + 24) >> 3) + 0x7FFF8000) )
          __asan_report_load8();
        Uid = Player::getUid(*(const Player *const *)(scene_id + 24));
        v14 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v13, &Uid);
        v15 = common::milog::MiLogStream::operator<<<char [13],(char *[13])0>(v14, (const char (*)[13])" ,scene_id: ");
        v16 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                v15,
                (const unsigned int *)(v3 + 48));
        v17 = common::milog::MiLogStream::operator<<<char [15],(char *[15])0>(v16, (const char (*)[15])" ,scene_type: ");
        v18 = std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 96));
        val = Scene::getSceneType(v18);
        common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v17, &val);
        common::milog::MiLogStream::~MiLogStream(&v23);
        std::shared_ptr<PlayerWorldScene>::shared_ptr((std::shared_ptr<PlayerWorldScene> *const)this, 0LL);
      }
    }
    std::shared_ptr<Scene>::~shared_ptr((std::shared_ptr<Scene> *const)(v3 + 96));
  }
  std::shared_ptr<PlayerWorld>::~shared_ptr((std::shared_ptr<PlayerWorld> *const)(v3 + 64));
  if ( v24 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return this;
};

// Line 5343: range 0000000013E71670-0000000013E71FB8
__int64 __fastcall PlayerSceneComp::lockPlayerRoomScene(PlayerSceneComp *const this, uint32_t scene_id)
{
  unsigned __int64 v2; // r13
  __int64 v3; // rax
  _DWORD *v4; // r12
  std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v5; // rax
  bool v6; // r14
  unsigned int v7; // r14d
  common::milog::MiLogStream *v8; // r14
  unsigned __int64 v9; // rax
  unsigned __int64 v10; // rdx
  common::milog::MiLogStream *v11; // r14
  common::milog::MiLogStream *v12; // rax
  common::milog::MiLogStream *v13; // rax
  std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v14; // rax
  common::milog::MiLogStream *v15; // r14
  common::milog::MiLogStream *v16; // rax
  common::milog::MiLogStream *v17; // rax
  common::milog::MiLogStream *v18; // rax
  common::milog::MiLogStream *v19; // r14
  std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v20; // rax
  common::milog::MiLogStream *v21; // r14
  common::milog::MiLogStream *v22; // rax
  common::milog::MiLogStream *v23; // rax
  std::__shared_ptr_access<PlayerRoomScene,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v24; // rax
  common::milog::MiLogStream *v25; // r14
  common::milog::MiLogStream *v26; // rax
  common::milog::MiLogStream *v27; // rax
  PlayerRoomScene *v28; // rax
  common::milog::MiLogStream *v29; // r14
  common::milog::MiLogStream *v30; // rax
  common::milog::MiLogStream *v31; // rax
  __int64 result; // rax
  unsigned int Uid; // [rsp+18h] [rbp-F8h] BYREF
  unsigned int val; // [rsp+1Ch] [rbp-F4h] BYREF
  common::milog::MiLogStream v35; // [rsp+20h] [rbp-F0h] BYREF
  char v36[208]; // [rsp+40h] [rbp-D0h] BYREF

  v2 = (unsigned __int64)v36;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_2(160LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "4 48 4 13 scene_id:5342 64 16 14 world_ptr:5349 96 16 14 scene_ptr:5356 128 16 19 room_scene_ptr:5368";
  *(_QWORD *)(v2 + 16) = PlayerSceneComp::lockPlayerRoomScene;
  v4 = (_DWORD *)(v2 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = -234556943;
  v4[536862722] = -219021312;
  v4[536862723] = -219021312;
  v4[536862724] = -202178560;
  *(_DWORD *)(v2 + 48) = scene_id;
  ServiceBox::findService<GameserverService>();
  GameserverService::getConfig((GameserverService *const)(v2 + 128));
  v5 = std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 128));
  v6 = TxtConfigMgr::getDefaultWorldMainSceneId(&v5->design_config.txt_config_mgr) == *(_DWORD *)(v2 + 48);
  std::shared_ptr<Config>::~shared_ptr((std::shared_ptr<Config> *const)(v2 + 128));
  if ( v6 )
  {
    common::milog::MiLogStream::create(
      &v35,
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/scene/player_scene_comp.cpp",
      "lockPlayerRoomScene",
      5346);
    common::milog::MiLogStream::operator<<<char [25],(char *[25])0>(
      &v35,
      (const char (*)[25])"lock default world scene");
    common::milog::MiLogStream::~MiLogStream(&v35);
    v7 = -1;
  }
  else
  {
    PlayerSceneComp::getMyPlayerWorld((const PlayerSceneComp *const)(v2 + 64));
    if ( std::operator==<PlayerWorld>(0LL, (const std::shared_ptr<PlayerWorld> *)(v2 + 64)) )
    {
      common::milog::MiLogStream::create(
        &v35,
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/scene/player_scene_comp.cpp",
        "lockPlayerRoomScene",
        5352);
      v8 = common::milog::MiLogStream::operator<<<char [20],(char *[20])0>(
             &v35,
             (const char (*)[20])"world is null, uid:");
      if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
        __asan_report_load8();
      val = Player::getUid(this->player_);
      common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v8, &val);
      common::milog::MiLogStream::~MiLogStream(&v35);
      v7 = -1;
    }
    else
    {
      v9 = (unsigned __int64)std::__shared_ptr_access<PlayerWorld,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<PlayerWorld,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 64));
      if ( *(_BYTE *)((v9 >> 3) + 0x7FFF8000) )
        v9 = __asan_report_load8();
      v10 = *(_QWORD *)v9 + 80LL;
      if ( *(_BYTE *)((v10 >> 3) + 0x7FFF8000) )
        v9 = __asan_report_load8();
      (*(void (__fastcall **)(unsigned __int64, unsigned __int64, _QWORD))v10)(v2 + 96, v9, *(unsigned int *)(v2 + 48));
      if ( std::operator==<Scene>(0LL, (const std::shared_ptr<Scene> *)(v2 + 96)) )
      {
        common::milog::MiLogStream::create(
          &v35,
          &common::milog::MiLogDefault::default_log_obj_,
          4u,
          "./src/scene/player_scene_comp.cpp",
          "lockPlayerRoomScene",
          5359);
        v11 = common::milog::MiLogStream::operator<<<char [20],(char *[20])0>(
                &v35,
                (const char (*)[20])"scene is null, uid:");
        if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
          __asan_report_load8();
        val = Player::getUid(this->player_);
        v12 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v11, &val);
        v13 = common::milog::MiLogStream::operator<<<char [13],(char *[13])0>(v12, (const char (*)[13])" ,scene_id: ");
        common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v13, (const unsigned int *)(v2 + 48));
        common::milog::MiLogStream::~MiLogStream(&v35);
        v7 = -1;
      }
      else
      {
        v14 = std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 96));
        if ( Scene::getSceneType(v14) == SCENE_ROOM )
        {
          std::dynamic_pointer_cast<PlayerRoomScene,Scene>((const std::shared_ptr<Scene> *)(v2 + 128));
          if ( std::operator==<PlayerRoomScene>(0LL, (const std::shared_ptr<PlayerRoomScene> *)(v2 + 128)) )
          {
            common::milog::MiLogStream::create(
              &v35,
              &common::milog::MiLogDefault::default_log_obj_,
              3u,
              "./src/scene/player_scene_comp.cpp",
              "lockPlayerRoomScene",
              5371);
            v21 = common::milog::MiLogStream::operator<<<char [51],(char *[51])0>(
                    &v35,
                    (const char (*)[51])"dynamic_pointer_cast PlayerRoomScene failed, uid: ");
            if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
              __asan_report_load8();
            val = Player::getUid(this->player_);
            v22 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v21, &val);
            v23 = common::milog::MiLogStream::operator<<<char [13],(char *[13])0>(
                    v22,
                    (const char (*)[13])" ,scene_id: ");
            common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v23, (const unsigned int *)(v2 + 48));
            common::milog::MiLogStream::~MiLogStream(&v35);
            v7 = -1;
          }
          else
          {
            v24 = std::__shared_ptr_access<PlayerRoomScene,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<PlayerRoomScene,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 128));
            if ( PlayerRoomScene::getIsRoomLocked(v24) )
            {
              common::milog::MiLogStream::create(
                &v35,
                &common::milog::MiLogDefault::default_log_obj_,
                3u,
                "./src/scene/player_scene_comp.cpp",
                "lockPlayerRoomScene",
                5376);
              v25 = common::milog::MiLogStream::operator<<<char [41],(char *[41])0>(
                      &v35,
                      (const char (*)[41])"player world scene already locked, uid: ");
              if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
                __asan_report_load8();
              val = Player::getUid(this->player_);
              v26 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v25, &val);
              v27 = common::milog::MiLogStream::operator<<<char [13],(char *[13])0>(
                      v26,
                      (const char (*)[13])" ,scene_id: ");
              common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                v27,
                (const unsigned int *)(v2 + 48));
              common::milog::MiLogStream::~MiLogStream(&v35);
            }
            v28 = std::__shared_ptr_access<PlayerRoomScene,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<PlayerRoomScene,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 128));
            PlayerRoomScene::setIsRoomLocked(v28, 1);
            common::milog::MiLogStream::create(
              &v35,
              &common::milog::MiLogDefault::default_log_obj_,
              1u,
              "./src/scene/player_scene_comp.cpp",
              "lockPlayerRoomScene",
              5380);
            v29 = common::milog::MiLogStream::operator<<<char [32],(char *[32])0>(
                    &v35,
                    (const char (*)[32])"lockPlayerRoomScene succ, uid: ");
            if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
              __asan_report_load8();
            val = Player::getUid(this->player_);
            v30 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v29, &val);
            v31 = common::milog::MiLogStream::operator<<<char [13],(char *[13])0>(
                    v30,
                    (const char (*)[13])" ,scene_id: ");
            common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v31, (const unsigned int *)(v2 + 48));
            common::milog::MiLogStream::~MiLogStream(&v35);
            v7 = 0;
          }
          std::shared_ptr<PlayerRoomScene>::~shared_ptr((std::shared_ptr<PlayerRoomScene> *const)(v2 + 128));
        }
        else
        {
          common::milog::MiLogStream::create(
            &v35,
            &common::milog::MiLogDefault::default_log_obj_,
            4u,
            "./src/scene/player_scene_comp.cpp",
            "lockPlayerRoomScene",
            5364);
          v15 = common::milog::MiLogStream::operator<<<char [26],(char *[26])0>(
                  &v35,
                  (const char (*)[26])"scene type invalid, uid: ");
          if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
            __asan_report_load8();
          Uid = Player::getUid(this->player_);
          v16 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v15, &Uid);
          v17 = common::milog::MiLogStream::operator<<<char [13],(char *[13])0>(v16, (const char (*)[13])" ,scene_id: ");
          v18 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                  v17,
                  (const unsigned int *)(v2 + 48));
          v19 = common::milog::MiLogStream::operator<<<char [15],(char *[15])0>(
                  v18,
                  (const char (*)[15])" ,scene_type: ");
          v20 = std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 96));
          val = Scene::getSceneType(v20);
          common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v19, &val);
          common::milog::MiLogStream::~MiLogStream(&v35);
          v7 = -1;
        }
      }
      std::shared_ptr<Scene>::~shared_ptr((std::shared_ptr<Scene> *const)(v2 + 96));
    }
    std::shared_ptr<PlayerWorld>::~shared_ptr((std::shared_ptr<PlayerWorld> *const)(v2 + 64));
  }
  result = v7;
  if ( v36 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8010) = 0;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8010) = -168430091;
  }
  return result;
};

// Line 5385: range 0000000013E71FBA-0000000013E72804
__int64 __fastcall PlayerSceneComp::unlockPlayerRoomScene(PlayerSceneComp *const this, uint32_t scene_id)
{
  unsigned __int64 v2; // r13
  __int64 v3; // rax
  _DWORD *v4; // r12
  std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v5; // rax
  bool v6; // r14
  unsigned int v7; // r14d
  common::milog::MiLogStream *v8; // r14
  unsigned __int64 v9; // rax
  unsigned __int64 v10; // rdx
  common::milog::MiLogStream *v11; // r14
  common::milog::MiLogStream *v12; // rax
  common::milog::MiLogStream *v13; // rax
  std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v14; // rax
  common::milog::MiLogStream *v15; // r14
  common::milog::MiLogStream *v16; // rax
  common::milog::MiLogStream *v17; // rax
  common::milog::MiLogStream *v18; // rax
  common::milog::MiLogStream *v19; // r14
  std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v20; // rax
  common::milog::MiLogStream *v21; // r14
  common::milog::MiLogStream *v22; // rax
  common::milog::MiLogStream *v23; // rax
  PlayerRoomScene *v24; // rax
  common::milog::MiLogStream *v25; // r14
  common::milog::MiLogStream *v26; // rax
  common::milog::MiLogStream *v27; // rax
  __int64 result; // rax
  unsigned int Uid; // [rsp+18h] [rbp-F8h] BYREF
  unsigned int val; // [rsp+1Ch] [rbp-F4h] BYREF
  common::milog::MiLogStream v31; // [rsp+20h] [rbp-F0h] BYREF
  char v32[208]; // [rsp+40h] [rbp-D0h] BYREF

  v2 = (unsigned __int64)v32;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_2(160LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "4 48 4 13 scene_id:5384 64 16 14 world_ptr:5391 96 16 14 scene_ptr:5398 128 16 19 room_scene_ptr:5410";
  *(_QWORD *)(v2 + 16) = PlayerSceneComp::unlockPlayerRoomScene;
  v4 = (_DWORD *)(v2 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = -234556943;
  v4[536862722] = -219021312;
  v4[536862723] = -219021312;
  v4[536862724] = -202178560;
  *(_DWORD *)(v2 + 48) = scene_id;
  ServiceBox::findService<GameserverService>();
  GameserverService::getConfig((GameserverService *const)(v2 + 128));
  v5 = std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 128));
  v6 = TxtConfigMgr::getDefaultWorldMainSceneId(&v5->design_config.txt_config_mgr) == *(_DWORD *)(v2 + 48);
  std::shared_ptr<Config>::~shared_ptr((std::shared_ptr<Config> *const)(v2 + 128));
  if ( v6 )
  {
    common::milog::MiLogStream::create(
      &v31,
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/scene/player_scene_comp.cpp",
      "unlockPlayerRoomScene",
      5388);
    common::milog::MiLogStream::operator<<<char [25],(char *[25])0>(
      &v31,
      (const char (*)[25])"lock default world scene");
    common::milog::MiLogStream::~MiLogStream(&v31);
    v7 = -1;
  }
  else
  {
    PlayerSceneComp::getMyPlayerWorld((const PlayerSceneComp *const)(v2 + 64));
    if ( std::operator==<PlayerWorld>(0LL, (const std::shared_ptr<PlayerWorld> *)(v2 + 64)) )
    {
      common::milog::MiLogStream::create(
        &v31,
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/scene/player_scene_comp.cpp",
        "unlockPlayerRoomScene",
        5394);
      v8 = common::milog::MiLogStream::operator<<<char [20],(char *[20])0>(
             &v31,
             (const char (*)[20])"world is null, uid:");
      if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
        __asan_report_load8();
      val = Player::getUid(this->player_);
      common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v8, &val);
      common::milog::MiLogStream::~MiLogStream(&v31);
      v7 = -1;
    }
    else
    {
      v9 = (unsigned __int64)std::__shared_ptr_access<PlayerWorld,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<PlayerWorld,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 64));
      if ( *(_BYTE *)((v9 >> 3) + 0x7FFF8000) )
        v9 = __asan_report_load8();
      v10 = *(_QWORD *)v9 + 80LL;
      if ( *(_BYTE *)((v10 >> 3) + 0x7FFF8000) )
        v9 = __asan_report_load8();
      (*(void (__fastcall **)(unsigned __int64, unsigned __int64, _QWORD))v10)(v2 + 96, v9, *(unsigned int *)(v2 + 48));
      if ( std::operator==<Scene>(0LL, (const std::shared_ptr<Scene> *)(v2 + 96)) )
      {
        common::milog::MiLogStream::create(
          &v31,
          &common::milog::MiLogDefault::default_log_obj_,
          4u,
          "./src/scene/player_scene_comp.cpp",
          "unlockPlayerRoomScene",
          5401);
        v11 = common::milog::MiLogStream::operator<<<char [20],(char *[20])0>(
                &v31,
                (const char (*)[20])"scene is null, uid:");
        if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
          __asan_report_load8();
        val = Player::getUid(this->player_);
        v12 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v11, &val);
        v13 = common::milog::MiLogStream::operator<<<char [13],(char *[13])0>(v12, (const char (*)[13])" ,scene_id: ");
        common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v13, (const unsigned int *)(v2 + 48));
        common::milog::MiLogStream::~MiLogStream(&v31);
        v7 = -1;
      }
      else
      {
        v14 = std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 96));
        if ( Scene::getSceneType(v14) == SCENE_ROOM )
        {
          std::dynamic_pointer_cast<PlayerRoomScene,Scene>((const std::shared_ptr<Scene> *)(v2 + 128));
          if ( std::operator==<PlayerRoomScene>(0LL, (const std::shared_ptr<PlayerRoomScene> *)(v2 + 128)) )
          {
            common::milog::MiLogStream::create(
              &v31,
              &common::milog::MiLogDefault::default_log_obj_,
              3u,
              "./src/scene/player_scene_comp.cpp",
              "unlockPlayerRoomScene",
              5413);
            v21 = common::milog::MiLogStream::operator<<<char [51],(char *[51])0>(
                    &v31,
                    (const char (*)[51])"dynamic_pointer_cast PlayerRoomScene failed, uid: ");
            if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
              __asan_report_load8();
            val = Player::getUid(this->player_);
            v22 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v21, &val);
            v23 = common::milog::MiLogStream::operator<<<char [13],(char *[13])0>(
                    v22,
                    (const char (*)[13])" ,scene_id: ");
            common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v23, (const unsigned int *)(v2 + 48));
            common::milog::MiLogStream::~MiLogStream(&v31);
            v7 = -1;
          }
          else
          {
            v24 = std::__shared_ptr_access<PlayerRoomScene,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<PlayerRoomScene,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 128));
            PlayerRoomScene::setIsRoomLocked(v24, 0);
            common::milog::MiLogStream::create(
              &v31,
              &common::milog::MiLogDefault::default_log_obj_,
              1u,
              "./src/scene/player_scene_comp.cpp",
              "unlockPlayerRoomScene",
              5419);
            v25 = common::milog::MiLogStream::operator<<<char [34],(char *[34])0>(
                    &v31,
                    (const char (*)[34])"unlockPlayerRoomScene succ, uid: ");
            if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
              __asan_report_load8();
            val = Player::getUid(this->player_);
            v26 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v25, &val);
            v27 = common::milog::MiLogStream::operator<<<char [13],(char *[13])0>(
                    v26,
                    (const char (*)[13])" ,scene_id: ");
            common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v27, (const unsigned int *)(v2 + 48));
            common::milog::MiLogStream::~MiLogStream(&v31);
            v7 = 0;
          }
          std::shared_ptr<PlayerRoomScene>::~shared_ptr((std::shared_ptr<PlayerRoomScene> *const)(v2 + 128));
        }
        else
        {
          common::milog::MiLogStream::create(
            &v31,
            &common::milog::MiLogDefault::default_log_obj_,
            4u,
            "./src/scene/player_scene_comp.cpp",
            "unlockPlayerRoomScene",
            5406);
          v15 = common::milog::MiLogStream::operator<<<char [26],(char *[26])0>(
                  &v31,
                  (const char (*)[26])"scene type invalid, uid: ");
          if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
            __asan_report_load8();
          Uid = Player::getUid(this->player_);
          v16 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v15, &Uid);
          v17 = common::milog::MiLogStream::operator<<<char [13],(char *[13])0>(v16, (const char (*)[13])" ,scene_id: ");
          v18 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                  v17,
                  (const unsigned int *)(v2 + 48));
          v19 = common::milog::MiLogStream::operator<<<char [15],(char *[15])0>(
                  v18,
                  (const char (*)[15])" ,scene_type: ");
          v20 = std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 96));
          val = Scene::getSceneType(v20);
          common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v19, &val);
          common::milog::MiLogStream::~MiLogStream(&v31);
          v7 = -1;
        }
      }
      std::shared_ptr<Scene>::~shared_ptr((std::shared_ptr<Scene> *const)(v2 + 96));
    }
    std::shared_ptr<PlayerWorld>::~shared_ptr((std::shared_ptr<PlayerWorld> *const)(v2 + 64));
  }
  result = v7;
  if ( v32 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8010) = 0;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8010) = -168430091;
  }
  return result;
};

// Line 5424: range 0000000013E72806-0000000013E72D3D
__int64 __fastcall PlayerSceneComp::lockPlayerWorldScene(PlayerSceneComp *const this, uint32_t scene_id)
{
  unsigned __int64 v2; // r12
  __int64 v3; // rax
  _DWORD *v4; // r13
  std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v5; // rax
  bool v6; // r14
  unsigned int v7; // r14d
  common::milog::MiLogStream *v8; // r14
  common::milog::MiLogStream *v9; // rax
  common::milog::MiLogStream *v10; // rax
  std::__shared_ptr_access<PlayerWorldScene,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v11; // rax
  common::milog::MiLogStream *v12; // r14
  common::milog::MiLogStream *v13; // rax
  common::milog::MiLogStream *v14; // rax
  PlayerWorldScene *v15; // rax
  common::milog::MiLogStream *v16; // r14
  common::milog::MiLogStream *v17; // rax
  common::milog::MiLogStream *v18; // rax
  __int64 result; // rax
  unsigned int val; // [rsp+1Ch] [rbp-B4h] BYREF
  common::milog::MiLogStream v21; // [rsp+20h] [rbp-B0h] BYREF
  char v22[144]; // [rsp+40h] [rbp-90h] BYREF

  v2 = (unsigned __int64)v22;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_1(96LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "2 48 4 13 scene_id:5423 64 16 20 world_scene_ptr:5431";
  *(_QWORD *)(v2 + 16) = PlayerSceneComp::lockPlayerWorldScene;
  v4 = (_DWORD *)(v2 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = -234556943;
  v4[536862722] = -202178560;
  *(_DWORD *)(v2 + 48) = scene_id;
  ServiceBox::findService<GameserverService>();
  GameserverService::getConfig((GameserverService *const)(v2 + 64));
  v5 = std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 64));
  v6 = TxtConfigMgr::getDefaultWorldMainSceneId(&v5->design_config.txt_config_mgr) == *(_DWORD *)(v2 + 48);
  std::shared_ptr<Config>::~shared_ptr((std::shared_ptr<Config> *const)(v2 + 64));
  if ( v6 )
  {
    common::milog::MiLogStream::create(
      &v21,
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/scene/player_scene_comp.cpp",
      "lockPlayerWorldScene",
      5427);
    common::milog::MiLogStream::operator<<<char [25],(char *[25])0>(
      &v21,
      (const char (*)[25])"lock default world scene");
    common::milog::MiLogStream::~MiLogStream(&v21);
    v7 = -1;
  }
  else
  {
    PlayerSceneComp::getPlayerWorldScene((PlayerSceneComp *const)(v2 + 64), (__int64)this, *(_DWORD *)(v2 + 48));
    if ( std::operator==<PlayerWorldScene>(0LL, (const std::shared_ptr<PlayerWorldScene> *)(v2 + 64)) )
    {
      common::milog::MiLogStream::create(
        &v21,
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/scene/player_scene_comp.cpp",
        "lockPlayerWorldScene",
        5434);
      v8 = common::milog::MiLogStream::operator<<<char [34],(char *[34])0>(
             &v21,
             (const char (*)[34])"getPlayerWorldScene failed, uid: ");
      if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
        __asan_report_load8();
      val = Player::getUid(this->player_);
      v9 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v8, &val);
      v10 = common::milog::MiLogStream::operator<<<char [13],(char *[13])0>(v9, (const char (*)[13])" ,scene_id: ");
      common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v10, (const unsigned int *)(v2 + 48));
      common::milog::MiLogStream::~MiLogStream(&v21);
      v7 = -1;
    }
    else
    {
      v11 = std::__shared_ptr_access<PlayerWorldScene,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<PlayerWorldScene,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 64));
      if ( PlayerWorldScene::getIsLocked(v11) )
      {
        common::milog::MiLogStream::create(
          &v21,
          &common::milog::MiLogDefault::default_log_obj_,
          3u,
          "./src/scene/player_scene_comp.cpp",
          "lockPlayerWorldScene",
          5440);
        v12 = common::milog::MiLogStream::operator<<<char [41],(char *[41])0>(
                &v21,
                (const char (*)[41])"player world scene already locked, uid: ");
        if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
          __asan_report_load8();
        val = Player::getUid(this->player_);
        v13 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v12, &val);
        v14 = common::milog::MiLogStream::operator<<<char [13],(char *[13])0>(v13, (const char (*)[13])" ,scene_id: ");
        common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v14, (const unsigned int *)(v2 + 48));
        common::milog::MiLogStream::~MiLogStream(&v21);
      }
      v15 = std::__shared_ptr_access<PlayerWorldScene,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<PlayerWorldScene,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 64));
      PlayerWorldScene::setIsLocked(v15, 1);
      PlayerSceneComp::broadcastPlayerWorldSceneInfoListNotify(this);
      common::milog::MiLogStream::create(
        &v21,
        &common::milog::MiLogDefault::default_log_obj_,
        1u,
        "./src/scene/player_scene_comp.cpp",
        "lockPlayerWorldScene",
        5447);
      v16 = common::milog::MiLogStream::operator<<<char [33],(char *[33])0>(
              &v21,
              (const char (*)[33])"lockPlayerWorldScene succ, uid: ");
      if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
        __asan_report_load8();
      val = Player::getUid(this->player_);
      v17 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v16, &val);
      v18 = common::milog::MiLogStream::operator<<<char [13],(char *[13])0>(v17, (const char (*)[13])" ,scene_id: ");
      common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v18, (const unsigned int *)(v2 + 48));
      common::milog::MiLogStream::~MiLogStream(&v21);
      v7 = 0;
    }
    std::shared_ptr<PlayerWorldScene>::~shared_ptr((std::shared_ptr<PlayerWorldScene> *const)(v2 + 64));
  }
  result = v7;
  if ( v22 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8008) = 0;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8008) = -168430091;
  }
  return result;
};

// Line 5453: range 0000000013E72D3E-0000000013E7318D
__int64 __fastcall PlayerSceneComp::unlockPlayerWorldScene(PlayerSceneComp *const this, uint32_t scene_id)
{
  unsigned __int64 v2; // r12
  __int64 v3; // rax
  _DWORD *v4; // r13
  common::milog::MiLogStream *v5; // r14
  common::milog::MiLogStream *v6; // rax
  common::milog::MiLogStream *v7; // rax
  unsigned int v8; // r14d
  std::__shared_ptr_access<PlayerWorldScene,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v9; // rax
  common::milog::MiLogStream *v10; // r14
  common::milog::MiLogStream *v11; // rax
  common::milog::MiLogStream *v12; // rax
  PlayerWorldScene *v13; // rax
  common::milog::MiLogStream *v14; // r14
  common::milog::MiLogStream *v15; // rax
  common::milog::MiLogStream *v16; // rax
  __int64 result; // rax
  unsigned int val; // [rsp+1Ch] [rbp-B4h] BYREF
  common::milog::MiLogStream v19; // [rsp+20h] [rbp-B0h] BYREF
  char v20[144]; // [rsp+40h] [rbp-90h] BYREF

  v2 = (unsigned __int64)v20;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_1(96LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "2 48 4 13 scene_id:5452 64 16 20 world_scene_ptr:5454";
  *(_QWORD *)(v2 + 16) = PlayerSceneComp::unlockPlayerWorldScene;
  v4 = (_DWORD *)(v2 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = -234556943;
  v4[536862722] = -202178560;
  *(_DWORD *)(v2 + 48) = scene_id;
  PlayerSceneComp::getPlayerWorldScene((PlayerSceneComp *const)(v2 + 64), (__int64)this, *(_DWORD *)(v2 + 48));
  if ( std::operator==<PlayerWorldScene>(0LL, (const std::shared_ptr<PlayerWorldScene> *)(v2 + 64)) )
  {
    common::milog::MiLogStream::create(
      &v19,
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/scene/player_scene_comp.cpp",
      "unlockPlayerWorldScene",
      5457);
    v5 = common::milog::MiLogStream::operator<<<char [34],(char *[34])0>(
           &v19,
           (const char (*)[34])"getPlayerWorldScene failed, uid: ");
    if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
      __asan_report_load8();
    val = Player::getUid(this->player_);
    v6 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v5, &val);
    v7 = common::milog::MiLogStream::operator<<<char [13],(char *[13])0>(v6, (const char (*)[13])" ,scene_id: ");
    common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v7, (const unsigned int *)(v2 + 48));
    common::milog::MiLogStream::~MiLogStream(&v19);
    v8 = -1;
  }
  else
  {
    v9 = std::__shared_ptr_access<PlayerWorldScene,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<PlayerWorldScene,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 64));
    if ( !PlayerWorldScene::getIsLocked(v9) )
    {
      common::milog::MiLogStream::create(
        &v19,
        &common::milog::MiLogDefault::default_log_obj_,
        1u,
        "./src/scene/player_scene_comp.cpp",
        "unlockPlayerWorldScene",
        5463);
      v10 = common::milog::MiLogStream::operator<<<char [43],(char *[43])0>(
              &v19,
              (const char (*)[43])"player world scene already unlocked, uid: ");
      if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
        __asan_report_load8();
      val = Player::getUid(this->player_);
      v11 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v10, &val);
      v12 = common::milog::MiLogStream::operator<<<char [13],(char *[13])0>(v11, (const char (*)[13])" ,scene_id: ");
      common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v12, (const unsigned int *)(v2 + 48));
      common::milog::MiLogStream::~MiLogStream(&v19);
    }
    v13 = std::__shared_ptr_access<PlayerWorldScene,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<PlayerWorldScene,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 64));
    PlayerWorldScene::setIsLocked(v13, 0);
    PlayerSceneComp::broadcastPlayerWorldSceneInfoListNotify(this);
    common::milog::MiLogStream::create(
      &v19,
      &common::milog::MiLogDefault::default_log_obj_,
      1u,
      "./src/scene/player_scene_comp.cpp",
      "unlockPlayerWorldScene",
      5470);
    v14 = common::milog::MiLogStream::operator<<<char [35],(char *[35])0>(
            &v19,
            (const char (*)[35])"unlockPlayerWorldScene succ, uid: ");
    if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
      __asan_report_load8();
    val = Player::getUid(this->player_);
    v15 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v14, &val);
    v16 = common::milog::MiLogStream::operator<<<char [13],(char *[13])0>(v15, (const char (*)[13])" ,scene_id: ");
    common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v16, (const unsigned int *)(v2 + 48));
    common::milog::MiLogStream::~MiLogStream(&v19);
    v8 = 0;
  }
  std::shared_ptr<PlayerWorldScene>::~shared_ptr((std::shared_ptr<PlayerWorldScene> *const)(v2 + 64));
  result = v8;
  if ( v20 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8008) = 0;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8008) = -168430091;
  }
  return result;
};

// Line 5476: range 0000000013E7318E-0000000013E733D1
void __cdecl PlayerSceneComp::broadcastPlayerWorldSceneInfoListNotify(PlayerSceneComp *const this)
{
  unsigned __int64 v1; // r12
  __int64 v2; // rax
  _DWORD *v3; // r13
  PlayerWorld *v4; // r14
  std::__shared_ptr_access<proto::PlayerWorldSceneInfoListNotify,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v5; // rax
  std::__shared_ptr_access<PlayerWorld,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v6; // r14
  std::__shared_ptr_access<proto::PlayerWorldSceneInfoListNotify,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v7; // rax
  std::__shared_ptr_access<HomeWorld,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v8; // r14
  std::__shared_ptr_access<proto::PlayerWorldSceneInfoListNotify,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v9; // rax
  char v10[176]; // [rsp+10h] [rbp-B0h] BYREF

  v1 = (unsigned __int64)v10;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_1(128LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "3 32 16 21 player_world_ptr:5477 64 16 34 player_world_scene_notify_ptr:5480 96 16 19 home_world_ptr:5484";
  *(_QWORD *)(v1 + 16) = PlayerSceneComp::broadcastPlayerWorldSceneInfoListNotify;
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -219021312;
  v3[536862722] = -219021312;
  v3[536862723] = -202178560;
  PlayerSceneComp::getMyPlayerWorld((const PlayerSceneComp *const)(v1 + 32));
  if ( std::operator!=<PlayerWorld>(0LL, (const std::shared_ptr<PlayerWorld> *)(v1 + 32)) )
  {
    common::tools::perf::make_shared<proto::PlayerWorldSceneInfoListNotify>();
    v4 = std::__shared_ptr_access<PlayerWorld,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<PlayerWorld,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v1 + 32));
    v5 = std::__shared_ptr_access<proto::PlayerWorldSceneInfoListNotify,(__gnu_cxx::_Lock_policy)2,false,false>::operator*((const std::__shared_ptr_access<proto::PlayerWorldSceneInfoListNotify,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v1 + 64));
    PlayerWorld::fillPlayerWorldSceneInfoListNotify(v4, v5);
    v6 = std::__shared_ptr_access<PlayerWorld,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<PlayerWorld,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v1 + 32));
    v7 = std::__shared_ptr_access<proto::PlayerWorldSceneInfoListNotify,(__gnu_cxx::_Lock_policy)2,false,false>::operator*((const std::__shared_ptr_access<proto::PlayerWorldSceneInfoListNotify,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v1 + 64));
    World::notifyAllPlayer<proto::PlayerWorldSceneInfoListNotify>(v6, v7, 0);
    PlayerSceneComp::getMyHomeWorld((PlayerSceneComp *const)(v1 + 96));
    if ( std::operator!=<HomeWorld>(0LL, (const std::shared_ptr<HomeWorld> *)(v1 + 96)) )
    {
      v8 = std::__shared_ptr_access<HomeWorld,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<HomeWorld,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v1 + 96));
      v9 = std::__shared_ptr_access<proto::PlayerWorldSceneInfoListNotify,(__gnu_cxx::_Lock_policy)2,false,false>::operator*((const std::__shared_ptr_access<proto::PlayerWorldSceneInfoListNotify,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v1 + 64));
      World::notifyAllPlayer<proto::PlayerWorldSceneInfoListNotify>(v8, v9, 0);
    }
    std::shared_ptr<HomeWorld>::~shared_ptr((std::shared_ptr<HomeWorld> *const)(v1 + 96));
    std::shared_ptr<proto::PlayerWorldSceneInfoListNotify>::~shared_ptr((std::shared_ptr<proto::PlayerWorldSceneInfoListNotify> *const)(v1 + 64));
  }
  std::shared_ptr<PlayerWorld>::~shared_ptr((std::shared_ptr<PlayerWorld> *const)(v1 + 32));
  if ( v10 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
};

// Line 5493: range 0000000013E733D2-0000000013E7343C
proto::LeaveWorldReason __cdecl PlayerSceneComp::getLeaveWorldReason(PlayerSceneComp *const this)
{
  proto::EnterReason dest_enter_reason; // eax

  if ( *(_BYTE *)(((unsigned __int64)&this->dest_enter_reason_ >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->dest_enter_reason_ >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4(&this->dest_enter_reason_);
  }
  dest_enter_reason = this->dest_enter_reason_;
  if ( dest_enter_reason == ENTER_REASON_TEAM_KICK )
    return 3;
  if ( dest_enter_reason == ENTER_REASON_TEAM_BACK )
    return 2;
  return 0;
};

// Line 5509: range 0000000013E7343E-0000000013E73587
void __cdecl PlayerSceneComp::checkAndModifySceneTag(PlayerSceneComp *const this)
{
  PlayerQuestComp *QuestComp; // rax
  common::milog::MiLogStream *v2; // rbx
  unsigned int val; // [rsp+1Ch] [rbp-44h] BYREF
  uint32_t scene_id; // [rsp+20h] [rbp-40h]
  uint32_t scene_tag_id; // [rsp+24h] [rbp-3Ch]
  uint32_t quest_global_var; // [rsp+28h] [rbp-38h]
  uint32_t param; // [rsp+2Ch] [rbp-34h]
  common::milog::MiLogStream v8; // [rsp+30h] [rbp-30h] BYREF

  scene_id = 3;
  scene_tag_id = 102;
  quest_global_var = 10008;
  param = 1;
  if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
    __asan_report_load8();
  QuestComp = Player::getQuestComp(this->player_);
  if ( (unsigned int)PlayerQuestComp::getGlobalVarValue(QuestComp, 0x2718u) == 1 )
  {
    common::milog::MiLogStream::create(
      &v8,
      &common::milog::MiLogDefault::default_log_obj_,
      1u,
      "./src/scene/player_scene_comp.cpp",
      "checkAndModifySceneTag",
      5518);
    v2 = common::milog::MiLogStream::operator<<<char [49],(char *[49])0>(
           &v8,
           (const char (*)[49])"checkAndModifySceneTag: del scene tag 102, uid: ");
    if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
      __asan_report_load8();
    val = Player::getUid(this->player_);
    common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v2, &val);
    common::milog::MiLogStream::~MiLogStream(&v8);
    PlayerSceneComp::delSceneTag(this, 3u, 0x66u);
  }
};

// Line 5524: range 0000000013E73588-0000000013E739F5
PlayerSceneComp *__fastcall PlayerSceneComp::getWorldOrPersistentDungeonScenePtr(
        PlayerSceneComp *const this,
        uint32_t scene_id,
        int a3)
{
  unsigned __int64 v3; // r12
  __int64 v4; // rax
  _DWORD *v5; // r13
  std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v6; // rax
  common::milog::MiLogStream *v7; // rax
  common::milog::MiLogStream *v8; // rax
  const data::SceneExcelConfig *scene_config_ptr; // [rsp+28h] [rbp-C8h]
  std::shared_ptr<Scene> __r; // [rsp+30h] [rbp-C0h] BYREF
  std::shared_ptr<Config> v13; // [rsp+40h] [rbp-B0h] BYREF
  common::milog::MiLogStream v14; // [rsp+50h] [rbp-A0h] BYREF
  char v15[128]; // [rsp+70h] [rbp-80h] BYREF

  v3 = (unsigned __int64)v15;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_1(96LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "2 48 4 13 scene_id:5523 64 16 14 scene_ptr:5532";
  *(_QWORD *)(v3 + 16) = PlayerSceneComp::getWorldOrPersistentDungeonScenePtr;
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = -234556943;
  v5[536862722] = -202178560;
  *(_DWORD *)(v3 + 48) = a3;
  ServiceBox::findService<GameserverService>();
  GameserverService::getConfig((GameserverService *const)&v13);
  v6 = std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false> *const)&v13);
  scene_config_ptr = data::SceneExcelConfigMgrBase::findSceneExcelConfig(
                       &v6->design_config.txt_config_mgr.scene_config_mgr,
                       *(_DWORD *)(v3 + 48));
  std::shared_ptr<Config>::~shared_ptr(&v13);
  if ( scene_config_ptr )
  {
    *(_QWORD *)(v3 + 64) = 0LL;
    *(_QWORD *)(v3 + 72) = 0LL;
    if ( *(_BYTE *)(((unsigned __int64)&scene_config_ptr->type >> 3) + 0x7FFF8000) != 0
      && (char)((((_BYTE)scene_config_ptr + 12) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&scene_config_ptr->type >> 3)
                                                                      + 0x7FFF8000) )
    {
      __asan_report_load4(&scene_config_ptr->type);
    }
    if ( SceneExcelConfigMgr::isPlayerScene(scene_config_ptr->type) )
    {
      PlayerSceneComp::getPersonalScene((PlayerSceneComp *const)&__r, scene_id);
      std::shared_ptr<Scene>::operator=((std::shared_ptr<Scene> *const)(v3 + 64), &__r);
      std::shared_ptr<Scene>::~shared_ptr(&__r);
    }
    else
    {
      if ( *(_BYTE *)(((unsigned __int64)&scene_config_ptr->type >> 3) + 0x7FFF8000) != 0
        && (char)((((_BYTE)scene_config_ptr + 12) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&scene_config_ptr->type >> 3)
                                                                        + 0x7FFF8000) )
      {
        __asan_report_load4(&scene_config_ptr->type);
      }
      if ( scene_config_ptr->type == SCENE_DUNGEON )
      {
        if ( *(_BYTE *)(((unsigned __int64)&scene_config_ptr->subtype >> 3) + 0x7FFF8000) != 0
          && *(_BYTE *)(((unsigned __int64)&scene_config_ptr->subtype >> 3) + 0x7FFF8000) <= 3 )
        {
          __asan_report_load4(&scene_config_ptr->subtype);
        }
        if ( scene_config_ptr->subtype == SCENE_SUB_TYPE_PERSISTENT_DUNGEON )
        {
          PlayerSceneComp::getCreatedPersistentDungeonScenePtr((const PlayerSceneComp *const)&v13, scene_id);
          std::shared_ptr<Scene>::operator=<DungeonScene>(
            (std::shared_ptr<Scene> *const)(v3 + 64),
            (std::shared_ptr<DungeonScene> *)&v13);
          std::shared_ptr<DungeonScene>::~shared_ptr((std::shared_ptr<DungeonScene> *const)&v13);
        }
      }
    }
    if ( std::operator==<Scene>(0LL, (const std::shared_ptr<Scene> *)(v3 + 64)) )
    {
      common::milog::MiLogStream::create(
        &v14,
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/scene/player_scene_comp.cpp",
        "getWorldOrPersistentDungeonScenePtr",
        5545);
      v8 = common::milog::MiLogStream::operator<<<char [55],(char *[55])0>(
             &v14,
             (const char (*)[55])"getWorldOrPersistentDungeonScenePtr failed, scene_id: ");
      common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v8, (const unsigned int *)(v3 + 48));
      common::milog::MiLogStream::~MiLogStream(&v14);
    }
    std::shared_ptr<Scene>::shared_ptr((std::shared_ptr<Scene> *const)this, (std::shared_ptr<Scene> *)(v3 + 64));
    std::shared_ptr<Scene>::~shared_ptr((std::shared_ptr<Scene> *const)(v3 + 64));
  }
  else
  {
    common::milog::MiLogStream::create(
      &v14,
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/scene/player_scene_comp.cpp",
      "getWorldOrPersistentDungeonScenePtr",
      5528);
    v7 = common::milog::MiLogStream::operator<<<char [39],(char *[39])0>(
           &v14,
           (const char (*)[39])"findSceneExcelConfig failed, scene_id:");
    common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v7, (const unsigned int *)(v3 + 48));
    common::milog::MiLogStream::~MiLogStream(&v14);
    std::shared_ptr<Scene>::shared_ptr((std::shared_ptr<Scene> *const)this, 0LL);
  }
  if ( v15 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8008) = 0;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8008) = -168430091;
  }
  return this;
};

// Line 5552: range 0000000013E739F6-0000000013E73E63
const PlayerSceneComp *__fastcall PlayerSceneComp::findWorldOrPersistentDungeonScenePtr(
        const PlayerSceneComp *const this,
        uint32_t scene_id,
        int a3)
{
  unsigned __int64 v3; // r12
  __int64 v4; // rax
  _DWORD *v5; // r13
  std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v6; // rax
  common::milog::MiLogStream *v7; // rax
  common::milog::MiLogStream *v8; // rax
  const data::SceneExcelConfig *scene_config_ptr; // [rsp+28h] [rbp-C8h]
  std::shared_ptr<Scene> __r; // [rsp+30h] [rbp-C0h] BYREF
  std::shared_ptr<Config> v13; // [rsp+40h] [rbp-B0h] BYREF
  common::milog::MiLogStream v14; // [rsp+50h] [rbp-A0h] BYREF
  char v15[128]; // [rsp+70h] [rbp-80h] BYREF

  v3 = (unsigned __int64)v15;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_1(96LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "2 48 4 13 scene_id:5551 64 16 14 scene_ptr:5560";
  *(_QWORD *)(v3 + 16) = PlayerSceneComp::findWorldOrPersistentDungeonScenePtr;
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = -234556943;
  v5[536862722] = -202178560;
  *(_DWORD *)(v3 + 48) = a3;
  ServiceBox::findService<GameserverService>();
  GameserverService::getConfig((GameserverService *const)&v13);
  v6 = std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false> *const)&v13);
  scene_config_ptr = data::SceneExcelConfigMgrBase::findSceneExcelConfig(
                       &v6->design_config.txt_config_mgr.scene_config_mgr,
                       *(_DWORD *)(v3 + 48));
  std::shared_ptr<Config>::~shared_ptr(&v13);
  if ( scene_config_ptr )
  {
    *(_QWORD *)(v3 + 64) = 0LL;
    *(_QWORD *)(v3 + 72) = 0LL;
    if ( *(_BYTE *)(((unsigned __int64)&scene_config_ptr->type >> 3) + 0x7FFF8000) != 0
      && (char)((((_BYTE)scene_config_ptr + 12) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&scene_config_ptr->type >> 3)
                                                                      + 0x7FFF8000) )
    {
      __asan_report_load4(&scene_config_ptr->type);
    }
    if ( SceneExcelConfigMgr::isPlayerScene(scene_config_ptr->type) )
    {
      PlayerSceneComp::findScene((const PlayerSceneComp *const)&__r, scene_id);
      std::shared_ptr<Scene>::operator=((std::shared_ptr<Scene> *const)(v3 + 64), &__r);
      std::shared_ptr<Scene>::~shared_ptr(&__r);
    }
    else
    {
      if ( *(_BYTE *)(((unsigned __int64)&scene_config_ptr->type >> 3) + 0x7FFF8000) != 0
        && (char)((((_BYTE)scene_config_ptr + 12) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&scene_config_ptr->type >> 3)
                                                                        + 0x7FFF8000) )
      {
        __asan_report_load4(&scene_config_ptr->type);
      }
      if ( scene_config_ptr->type == SCENE_DUNGEON )
      {
        if ( *(_BYTE *)(((unsigned __int64)&scene_config_ptr->subtype >> 3) + 0x7FFF8000) != 0
          && *(_BYTE *)(((unsigned __int64)&scene_config_ptr->subtype >> 3) + 0x7FFF8000) <= 3 )
        {
          __asan_report_load4(&scene_config_ptr->subtype);
        }
        if ( scene_config_ptr->subtype == SCENE_SUB_TYPE_PERSISTENT_DUNGEON )
        {
          PlayerSceneComp::getCreatedPersistentDungeonScenePtr((const PlayerSceneComp *const)&v13, scene_id);
          std::shared_ptr<Scene>::operator=<DungeonScene>(
            (std::shared_ptr<Scene> *const)(v3 + 64),
            (std::shared_ptr<DungeonScene> *)&v13);
          std::shared_ptr<DungeonScene>::~shared_ptr((std::shared_ptr<DungeonScene> *const)&v13);
        }
      }
    }
    if ( std::operator==<Scene>(0LL, (const std::shared_ptr<Scene> *)(v3 + 64)) )
    {
      common::milog::MiLogStream::create(
        &v14,
        &common::milog::MiLogDefault::default_log_obj_,
        1u,
        "./src/scene/player_scene_comp.cpp",
        "findWorldOrPersistentDungeonScenePtr",
        5572);
      v8 = common::milog::MiLogStream::operator<<<char [56],(char *[56])0>(
             &v14,
             (const char (*)[56])"findWorldOrPersistentDungeonScenePtr failed, scene_id: ");
      common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v8, (const unsigned int *)(v3 + 48));
      common::milog::MiLogStream::~MiLogStream(&v14);
    }
    std::shared_ptr<Scene>::shared_ptr((std::shared_ptr<Scene> *const)this, (std::shared_ptr<Scene> *)(v3 + 64));
    std::shared_ptr<Scene>::~shared_ptr((std::shared_ptr<Scene> *const)(v3 + 64));
  }
  else
  {
    common::milog::MiLogStream::create(
      &v14,
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/scene/player_scene_comp.cpp",
      "findWorldOrPersistentDungeonScenePtr",
      5556);
    v7 = common::milog::MiLogStream::operator<<<char [39],(char *[39])0>(
           &v14,
           (const char (*)[39])"findSceneExcelConfig failed, scene_id:");
    common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v7, (const unsigned int *)(v3 + 48));
    common::milog::MiLogStream::~MiLogStream(&v14);
    std::shared_ptr<Scene>::shared_ptr((std::shared_ptr<Scene> *const)this, 0LL);
  }
  if ( v15 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8008) = 0;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8008) = -168430091;
  }
  return this;
};

// Line 5579: range 0000000013E73E64-0000000013E742C0
__int64 __fastcall PlayerSceneComp::addSceneTag(PlayerSceneComp *const this, uint32_t scene_id, uint32_t scene_tag_id)
{
  unsigned __int64 v3; // r12
  __int64 v4; // rax
  _DWORD *v5; // r13
  std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v6; // rax
  std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v7; // rax
  common::milog::MiLogStream *v9; // r14
  common::milog::MiLogStream *v10; // rax
  common::milog::MiLogStream *v11; // rax
  unsigned int v12; // r14d
  __int64 result; // rax
  std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v14; // [rsp+8h] [rbp-148h]
  std::allocator<unsigned int> __a; // [rsp+2Bh] [rbp-125h] BYREF
  unsigned int val; // [rsp+2Ch] [rbp-124h] BYREF
  std::shared_ptr<Scene> __r; // [rsp+30h] [rbp-120h] BYREF
  std::vector<unsigned int> add_id_vec; // [rsp+40h] [rbp-110h] BYREF
  std::vector<unsigned int> del_id_vec; // [rsp+60h] [rbp-F0h] BYREF
  common::milog::MiLogStream v21; // [rsp+80h] [rbp-D0h] BYREF
  char v22[176]; // [rsp+A0h] [rbp-B0h] BYREF

  v3 = (unsigned __int64)v22;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_1(128LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "3 48 4 13 scene_id:5578 64 16 14 scene_ptr:5580 96 16 18 cur_scene_ptr:5581";
  *(_QWORD *)(v3 + 16) = PlayerSceneComp::addSceneTag;
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = -234556943;
  v5[536862722] = -219021312;
  v5[536862723] = -202178560;
  *(_DWORD *)(v3 + 48) = scene_id;
  *(_QWORD *)(v3 + 64) = 0LL;
  *(_QWORD *)(v3 + 72) = 0LL;
  PlayerSceneComp::getCurScene((const PlayerSceneComp *const)(v3 + 96));
  if ( std::operator!=<Scene>(0LL, (const std::shared_ptr<Scene> *)(v3 + 96))
    && (v6 = std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 96)),
        Scene::getSceneId(v6) == *(_DWORD *)(v3 + 48))
    && (v7 = std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 96)),
        Scene::getSceneType(v7) == SCENE_DUNGEON) )
  {
    std::shared_ptr<Scene>::operator=(
      (std::shared_ptr<Scene> *const)(v3 + 64),
      (const std::shared_ptr<Scene> *)(v3 + 96));
  }
  else
  {
    PlayerSceneComp::getWorldOrPersistentDungeonScenePtr(
      (PlayerSceneComp *const)&__r,
      (uint32_t)this,
      *(_DWORD *)(v3 + 48));
    std::shared_ptr<Scene>::operator=((std::shared_ptr<Scene> *const)(v3 + 64), &__r);
    std::shared_ptr<Scene>::~shared_ptr(&__r);
  }
  if ( std::operator==<Scene>(0LL, (const std::shared_ptr<Scene> *)(v3 + 64)) )
  {
    common::milog::MiLogStream::create(
      &v21,
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/scene/player_scene_comp.cpp",
      "addSceneTag",
      5595);
    v9 = common::milog::MiLogStream::operator<<<char [25],(char *[25])0>(
           &v21,
           (const char (*)[25])"scene_ptr is null, uid: ");
    if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
      __asan_report_load8();
    val = Player::getUid(this->player_);
    v10 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v9, &val);
    v11 = common::milog::MiLogStream::operator<<<char [13],(char *[13])0>(v10, (const char (*)[13])" ,scene_id: ");
    common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v11, (const unsigned int *)(v3 + 48));
    common::milog::MiLogStream::~MiLogStream(&v21);
    v12 = -1;
  }
  else
  {
    v14 = std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 64));
    memset(&del_id_vec, 0, sizeof(del_id_vec));
    std::vector<unsigned int>::vector(&del_id_vec);
    val = scene_tag_id;
    std::allocator<unsigned int>::allocator(&__a);
    std::vector<unsigned int>::vector(&add_id_vec, (std::initializer_list<unsigned int>)__PAIR128__(1LL, &val), &__a);
    v12 = Scene::processSceneTag(v14, &add_id_vec, &del_id_vec, 0LL);
    std::vector<unsigned int>::~vector(&add_id_vec);
    std::allocator<unsigned int>::~allocator(&__a);
    std::vector<unsigned int>::~vector(&del_id_vec);
  }
  std::shared_ptr<Scene>::~shared_ptr((std::shared_ptr<Scene> *const)(v3 + 96));
  std::shared_ptr<Scene>::~shared_ptr((std::shared_ptr<Scene> *const)(v3 + 64));
  result = v12;
  if ( v22 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 5603: range 0000000013E742C2-0000000013E7471E
__int64 __fastcall PlayerSceneComp::delSceneTag(PlayerSceneComp *const this, uint32_t scene_id, uint32_t scene_tag_id)
{
  unsigned __int64 v3; // r12
  __int64 v4; // rax
  _DWORD *v5; // r13
  std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v6; // rax
  std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v7; // rax
  common::milog::MiLogStream *v9; // r14
  common::milog::MiLogStream *v10; // rax
  common::milog::MiLogStream *v11; // rax
  unsigned int v12; // r14d
  __int64 result; // rax
  std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v14; // [rsp+8h] [rbp-148h]
  std::allocator<unsigned int> __a; // [rsp+2Bh] [rbp-125h] BYREF
  unsigned int val; // [rsp+2Ch] [rbp-124h] BYREF
  std::shared_ptr<Scene> __r; // [rsp+30h] [rbp-120h] BYREF
  std::vector<unsigned int> add_id_vec; // [rsp+40h] [rbp-110h] BYREF
  std::vector<unsigned int> del_id_vec; // [rsp+60h] [rbp-F0h] BYREF
  common::milog::MiLogStream v21; // [rsp+80h] [rbp-D0h] BYREF
  char v22[176]; // [rsp+A0h] [rbp-B0h] BYREF

  v3 = (unsigned __int64)v22;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_1(128LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "3 48 4 13 scene_id:5602 64 16 14 scene_ptr:5604 96 16 18 cur_scene_ptr:5605";
  *(_QWORD *)(v3 + 16) = PlayerSceneComp::delSceneTag;
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = -234556943;
  v5[536862722] = -219021312;
  v5[536862723] = -202178560;
  *(_DWORD *)(v3 + 48) = scene_id;
  *(_QWORD *)(v3 + 64) = 0LL;
  *(_QWORD *)(v3 + 72) = 0LL;
  PlayerSceneComp::getCurScene((const PlayerSceneComp *const)(v3 + 96));
  if ( std::operator!=<Scene>(0LL, (const std::shared_ptr<Scene> *)(v3 + 96))
    && (v6 = std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 96)),
        Scene::getSceneId(v6) == *(_DWORD *)(v3 + 48))
    && (v7 = std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 96)),
        Scene::getSceneType(v7) == SCENE_DUNGEON) )
  {
    std::shared_ptr<Scene>::operator=(
      (std::shared_ptr<Scene> *const)(v3 + 64),
      (const std::shared_ptr<Scene> *)(v3 + 96));
  }
  else
  {
    PlayerSceneComp::findWorldOrPersistentDungeonScenePtr(
      (const PlayerSceneComp *const)&__r,
      (uint32_t)this,
      *(_DWORD *)(v3 + 48));
    std::shared_ptr<Scene>::operator=((std::shared_ptr<Scene> *const)(v3 + 64), &__r);
    std::shared_ptr<Scene>::~shared_ptr(&__r);
  }
  if ( std::operator==<Scene>(0LL, (const std::shared_ptr<Scene> *)(v3 + 64)) )
  {
    common::milog::MiLogStream::create(
      &v21,
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/scene/player_scene_comp.cpp",
      "delSceneTag",
      5619);
    v9 = common::milog::MiLogStream::operator<<<char [25],(char *[25])0>(
           &v21,
           (const char (*)[25])"scene_ptr is null, uid: ");
    if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
      __asan_report_load8();
    val = Player::getUid(this->player_);
    v10 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v9, &val);
    v11 = common::milog::MiLogStream::operator<<<char [13],(char *[13])0>(v10, (const char (*)[13])" ,scene_id: ");
    common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v11, (const unsigned int *)(v3 + 48));
    common::milog::MiLogStream::~MiLogStream(&v21);
    v12 = -1;
  }
  else
  {
    v14 = std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 64));
    val = scene_tag_id;
    std::allocator<unsigned int>::allocator(&__a);
    std::vector<unsigned int>::vector(&del_id_vec, (std::initializer_list<unsigned int>)__PAIR128__(1LL, &val), &__a);
    memset(&add_id_vec, 0, sizeof(add_id_vec));
    std::vector<unsigned int>::vector(&add_id_vec);
    v12 = Scene::processSceneTag(v14, &add_id_vec, &del_id_vec, 0LL);
    std::vector<unsigned int>::~vector(&add_id_vec);
    std::vector<unsigned int>::~vector(&del_id_vec);
    std::allocator<unsigned int>::~allocator(&__a);
  }
  std::shared_ptr<Scene>::~shared_ptr((std::shared_ptr<Scene> *const)(v3 + 96));
  std::shared_ptr<Scene>::~shared_ptr((std::shared_ptr<Scene> *const)(v3 + 64));
  result = v12;
  if ( v22 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 5627: range 0000000013E74720-0000000013E74A6D
__int64 __fastcall PlayerSceneComp::checkSceneTag(
        const PlayerSceneComp *const this,
        uint32_t scene_id,
        uint32_t scene_tag_id)
{
  unsigned __int64 v3; // r12
  __int64 v4; // rax
  _DWORD *v5; // r13
  std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v6; // rax
  std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v7; // rax
  common::milog::MiLogStream *v9; // r14
  common::milog::MiLogStream *v10; // rax
  common::milog::MiLogStream *v11; // rax
  unsigned int v12; // r14d
  std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v13; // rax
  unsigned int v14; // eax
  __int64 result; // rax
  unsigned int val; // [rsp+1Ch] [rbp-E4h] BYREF
  std::shared_ptr<Scene> __r; // [rsp+20h] [rbp-E0h] BYREF
  common::milog::MiLogStream v19; // [rsp+30h] [rbp-D0h] BYREF
  char v20[176]; // [rsp+50h] [rbp-B0h] BYREF

  v3 = (unsigned __int64)v20;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_1(128LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "3 48 4 13 scene_id:5626 64 16 14 scene_ptr:5628 96 16 18 cur_scene_ptr:5629";
  *(_QWORD *)(v3 + 16) = PlayerSceneComp::checkSceneTag;
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = -234556943;
  v5[536862722] = -219021312;
  v5[536862723] = -202178560;
  *(_DWORD *)(v3 + 48) = scene_id;
  *(_QWORD *)(v3 + 64) = 0LL;
  *(_QWORD *)(v3 + 72) = 0LL;
  PlayerSceneComp::getCurScene((const PlayerSceneComp *const)(v3 + 96));
  if ( std::operator!=<Scene>(0LL, (const std::shared_ptr<Scene> *)(v3 + 96))
    && (v6 = std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 96)),
        Scene::getSceneId(v6) == *(_DWORD *)(v3 + 48))
    && (v7 = std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 96)),
        Scene::getSceneType(v7) == SCENE_DUNGEON) )
  {
    std::shared_ptr<Scene>::operator=(
      (std::shared_ptr<Scene> *const)(v3 + 64),
      (const std::shared_ptr<Scene> *)(v3 + 96));
  }
  else
  {
    PlayerSceneComp::findWorldOrPersistentDungeonScenePtr(
      (const PlayerSceneComp *const)&__r,
      (uint32_t)this,
      *(_DWORD *)(v3 + 48));
    std::shared_ptr<Scene>::operator=((std::shared_ptr<Scene> *const)(v3 + 64), &__r);
    std::shared_ptr<Scene>::~shared_ptr(&__r);
  }
  if ( std::operator==<Scene>(0LL, (const std::shared_ptr<Scene> *)(v3 + 64)) )
  {
    common::milog::MiLogStream::create(
      &v19,
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/scene/player_scene_comp.cpp",
      "checkSceneTag",
      5643);
    v9 = common::milog::MiLogStream::operator<<<char [25],(char *[25])0>(
           &v19,
           (const char (*)[25])"scene_ptr is null, uid: ");
    if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
      __asan_report_load8();
    val = Player::getUid(this->player_);
    v10 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v9, &val);
    v11 = common::milog::MiLogStream::operator<<<char [13],(char *[13])0>(v10, (const char (*)[13])" ,scene_id: ");
    common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v11, (const unsigned int *)(v3 + 48));
    common::milog::MiLogStream::~MiLogStream(&v19);
    v12 = 0;
  }
  else
  {
    v13 = std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 64));
    LOBYTE(v14) = Scene::isSceneTagValid(v13, scene_tag_id);
    v12 = v14;
  }
  std::shared_ptr<Scene>::~shared_ptr((std::shared_ptr<Scene> *const)(v3 + 96));
  std::shared_ptr<Scene>::~shared_ptr((std::shared_ptr<Scene> *const)(v3 + 64));
  result = v12;
  if ( v20 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 5651: range 0000000013E74A6E-0000000013E74DE3
uint32_t __cdecl PlayerSceneComp::getGroupSceneMap(
        PlayerSceneComp *const this,
        const std::vector<unsigned int> *group_vec,
        std::map<std::shared_ptr<Scene>,std::vector<unsigned int>> *scene_group_map)
{
  unsigned __int64 v3; // r12
  __int64 v4; // rax
  _DWORD *v5; // r13
  __gnu_cxx::__normal_iterator<unsigned int const*,std::vector<unsigned int> >::reference v6; // rax
  _DWORD *v7; // rdx
  std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v8; // rax
  common::milog::MiLogStream *v9; // rax
  common::milog::MiLogStream *v10; // rax
  common::milog::MiLogStream *v11; // rax
  common::milog::MiLogStream *v12; // rax
  std::vector<unsigned int> *v13; // rax
  uint32_t result; // eax
  uint32_t count; // [rsp+24h] [rbp-DCh]
  std::vector<unsigned int>::const_iterator __for_begin; // [rsp+28h] [rbp-D8h] BYREF
  std::vector<unsigned int>::const_iterator __for_end; // [rsp+30h] [rbp-D0h] BYREF
  const std::vector<unsigned int> *__for_range; // [rsp+38h] [rbp-C8h]
  std::shared_ptr<Config> v20; // [rsp+40h] [rbp-C0h] BYREF
  common::milog::MiLogStream v21; // [rsp+50h] [rbp-B0h] BYREF
  char v22[144]; // [rsp+70h] [rbp-90h] BYREF

  v3 = (unsigned __int64)v22;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_1(96LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "3 32 4 13 group_id:5653 48 4 13 scene_id:5655 64 16 14 scene_ptr:5656";
  *(_QWORD *)(v3 + 16) = PlayerSceneComp::getGroupSceneMap;
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = -234556924;
  v5[536862722] = -202178560;
  count = 0;
  __for_range = group_vec;
  __for_begin._M_current = std::vector<unsigned int>::begin(group_vec)._M_current;
  __for_end._M_current = std::vector<unsigned int>::end(group_vec)._M_current;
  while ( __gnu_cxx::operator!=<unsigned int const*,std::vector<unsigned int>>(&__for_begin, &__for_end) )
  {
    v6 = __gnu_cxx::__normal_iterator<unsigned int const*,std::vector<unsigned int>>::operator*(&__for_begin);
    v7 = v6;
    if ( *(_BYTE *)(((unsigned __int64)v6 >> 3) + 0x7FFF8000) != 0
      && (char)(((unsigned __int8)v6 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)v6 >> 3) + 0x7FFF8000) )
    {
      __asan_report_load4(v6);
    }
    *(_DWORD *)(v3 + 32) = *v7;
    ServiceBox::findService<GameserverService>();
    GameserverService::getConfig((GameserverService *const)&v20);
    v8 = std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false> *const)&v20);
    *(_DWORD *)(v3 + 48) = LuaConfigMgr::getSceneIdByGroupId(&v8->design_config.lua_config_mgr, *(_DWORD *)(v3 + 32));
    std::shared_ptr<Config>::~shared_ptr(&v20);
    PlayerSceneComp::getPersonalScene((PlayerSceneComp *const)(v3 + 64), (uint32_t)this);
    if ( std::operator==<Scene>(0LL, (const std::shared_ptr<Scene> *)(v3 + 64)) )
    {
      common::milog::MiLogStream::create(
        &v21,
        &common::milog::MiLogDefault::default_log_obj_,
        4u,
        "./src/scene/player_scene_comp.cpp",
        "getGroupSceneMap",
        5659);
      v9 = common::milog::MiLogStream::operator<<<char [11],(char *[11])0>(&v21, (const char (*)[11])off_251885E0);
      v10 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v9, (const unsigned int *)(v3 + 48));
      v11 = common::milog::MiLogStream::operator<<<char [9],(char *[9])0>(v10, (const char (*)[9])" nullptr");
      v12 = common::milog::MiLogStream::operator<<<char [12],(char *[12])0>(v11, (const char (*)[12])" for group:");
      common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v12, (const unsigned int *)(v3 + 32));
      common::milog::MiLogStream::~MiLogStream(&v21);
    }
    else
    {
      ++count;
      v13 = std::map<std::shared_ptr<Scene>,std::vector<unsigned int>>::operator[](
              scene_group_map,
              (const std::map<std::shared_ptr<Scene>,std::vector<unsigned int>>::key_type *)(v3 + 64));
      std::vector<unsigned int>::push_back(v13, (const std::vector<unsigned int>::value_type *)(v3 + 32));
    }
    std::shared_ptr<Scene>::~shared_ptr((std::shared_ptr<Scene> *const)(v3 + 64));
    __gnu_cxx::__normal_iterator<unsigned int const*,std::vector<unsigned int>>::operator++(&__for_begin);
  }
  result = count;
  if ( v22 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8008) = 0;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8008) = -168430091;
  }
  return result;
};

// Line 5669: range 0000000013E74DE4-0000000013E74E9E
ScenePtr __cdecl PlayerSceneComp::getPersonalSceneByGroupId(PlayerSceneComp *const this, uint32_t group_id)
{
  uint32_t v2; // edx
  std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v3; // rax
  ScenePtr result; // rax
  uint32_t group_ida; // [rsp+Ch] [rbp-44h]
  std::shared_ptr<Config> v6[2]; // [rsp+30h] [rbp-20h] BYREF

  group_ida = v2;
  ServiceBox::findService<GameserverService>();
  GameserverService::getConfig((GameserverService *const)v6);
  v3 = std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false> *const)v6);
  LuaConfigMgr::getSceneIdByGroupId(&v3->design_config.lua_config_mgr, group_ida);
  std::shared_ptr<Config>::~shared_ptr(v6);
  if ( *(_WORD *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store16(this, group_ida);
  result = PlayerSceneComp::getPersonalScene(this, group_id);
  result._M_ptr = (std::__shared_ptr<Scene,(__gnu_cxx::_Lock_policy)2>::element_type *)this;
  return result;
};

// Line 5675: range 0000000013E74EA0-0000000013E7519F
uint32_t __cdecl PlayerSceneComp::getInitEnterPlayerSceneId(const PlayerSceneComp *const this)
{
  uint32_t v1; // r14d
  unsigned __int64 v2; // rbx
  __int64 v3; // rax
  unsigned __int64 v4; // r13
  common::milog::MiLogStream *v5; // r14
  int v6; // r15d
  unsigned __int64 v7; // rax
  unsigned __int64 v8; // rdx
  uint32_t result; // eax
  unsigned int val; // [rsp+18h] [rbp-A8h] BYREF
  uint32_t my_cur_player_scene_id; // [rsp+1Ch] [rbp-A4h]
  std::shared_ptr<PlayerWorld> __r; // [rsp+20h] [rbp-A0h] BYREF
  common::milog::MiLogStream v13; // [rsp+30h] [rbp-90h] BYREF
  char v14[112]; // [rsp+50h] [rbp-70h] BYREF

  v2 = (unsigned __int64)v14;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_0(64LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "1 32 16 21 player_world_ptr:5686";
  *(_QWORD *)(v2 + 16) = PlayerSceneComp::getInitEnterPlayerSceneId;
  v4 = v2 >> 3;
  *(_DWORD *)(v4 + 2147450880) = -235802127;
  *(_DWORD *)(v4 + 2147450884) = -202178560;
  my_cur_player_scene_id = PlayerSceneComp::getMyCurPlayerSceneId(this);
  if ( !my_cur_player_scene_id )
    my_cur_player_scene_id = PlayerSceneComp::getMyCurSceneId(this);
  if ( my_cur_player_scene_id )
    goto LABEL_18;
  PlayerSceneComp::getCurWorld<PlayerWorld>((const PlayerSceneComp *const)(v2 + 32));
  if ( std::operator==<PlayerWorld>((const std::shared_ptr<PlayerWorld> *)(v2 + 32), 0LL)
    && (PlayerSceneComp::getMyPlayerWorld((const PlayerSceneComp *const)&__r),
        std::shared_ptr<PlayerWorld>::operator=((std::shared_ptr<PlayerWorld> *const)(v2 + 32), &__r),
        std::shared_ptr<PlayerWorld>::~shared_ptr(&__r),
        std::operator==<PlayerWorld>((const std::shared_ptr<PlayerWorld> *)(v2 + 32), 0LL)) )
  {
    common::milog::MiLogStream::create(
      &v13,
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/scene/player_scene_comp.cpp",
      "getInitEnterPlayerSceneId",
      5692);
    v5 = common::milog::MiLogStream::operator<<<char [30],(char *[30])0>(
           &v13,
           (const char (*)[30])"getMyPlayerWorld fails, uid: ");
    if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
      __asan_report_load8();
    val = Player::getUid(this->player_);
    common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v5, &val);
    common::milog::MiLogStream::~MiLogStream(&v13);
    v1 = 0;
    v6 = 0;
  }
  else
  {
    v7 = (unsigned __int64)std::__shared_ptr_access<PlayerWorld,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<PlayerWorld,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 32));
    if ( *(_BYTE *)((v7 >> 3) + 0x7FFF8000) )
      v7 = __asan_report_load8();
    v8 = *(_QWORD *)v7 + 72LL;
    if ( *(_BYTE *)((v8 >> 3) + 0x7FFF8000) )
      v7 = __asan_report_load8();
    my_cur_player_scene_id = (*(__int64 (__fastcall **)(unsigned __int64))v8)(v7);
    v6 = 1;
  }
  std::shared_ptr<PlayerWorld>::~shared_ptr((std::shared_ptr<PlayerWorld> *const)(v2 + 32));
  if ( v6 == 1 )
LABEL_18:
    v1 = my_cur_player_scene_id;
  result = v1;
  if ( v14 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 5703: range 0000000013E751A0-0000000013E753CF
void __cdecl PlayerSceneComp::initMapAreaInfoOnLogin(PlayerSceneComp *const this)
{
  bool *v1; // r8
  std::unordered_map<unsigned int,bool> *p_map_area_info_map; // rcx
  data::MapAreaState *p_map_area_state; // rax
  std::pair<std::__detail::_Node_iterator<std::pair<unsigned int const,bool>,false,false>,bool> v4; // rax
  common::milog::MiLogStream *v5; // rax
  common::milog::MiLogStream *v6; // rax
  common::milog::MiLogStream *v7; // rbx
  bool v8; // [rsp+1Bh] [rbp-75h] BYREF
  unsigned int val; // [rsp+1Ch] [rbp-74h] BYREF
  std::unordered_map<unsigned int,data::MapAreaConfig>::const_iterator __for_begin; // [rsp+20h] [rbp-70h] BYREF
  std::unordered_map<unsigned int,data::MapAreaConfig>::const_iterator __for_end; // [rsp+28h] [rbp-68h] BYREF
  const std::unordered_map<unsigned int,data::MapAreaConfig> *__for_range; // [rsp+30h] [rbp-60h]
  const std::pair<unsigned int const,data::MapAreaConfig> *v13; // [rsp+38h] [rbp-58h]
  std::tuple_element<0,const std::pair<unsigned int const,data::MapAreaConfig> >::type *_; // [rsp+40h] [rbp-50h]
  std::tuple_element<1,const std::pair<unsigned int const,data::MapAreaConfig> >::type *map_area_config; // [rsp+48h] [rbp-48h]
  std::shared_ptr<Config> v16; // [rsp+50h] [rbp-40h] BYREF
  common::milog::MiLogStream v17; // [rsp+60h] [rbp-30h] BYREF

  ServiceBox::findService<GameserverService>();
  GameserverService::getConfig((GameserverService *const)&v16);
  __for_range = &std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false> *const)&v16)->design_config.txt_config_mgr.world_area_config_mgr.map_area_config_map;
  std::shared_ptr<Config>::~shared_ptr(&v16);
  __for_begin._M_cur = std::unordered_map<unsigned int,data::MapAreaConfig>::begin(__for_range)._M_cur;
  __for_end._M_cur = std::unordered_map<unsigned int,data::MapAreaConfig>::end(__for_range)._M_cur;
  while ( std::__detail::operator!=<std::pair<unsigned int const,data::MapAreaConfig>,false>(&__for_begin, &__for_end) )
  {
    v13 = std::__detail::_Node_const_iterator<std::pair<unsigned int const,data::MapAreaConfig>,false,false>::operator*(&__for_begin);
    _ = std::get<0ul,unsigned int const,data::MapAreaConfig>(v13);
    map_area_config = (std::tuple_element<1,const std::pair<unsigned int const,data::MapAreaConfig> >::type *)std::get<1ul,unsigned int const,data::MapAreaConfig>(v13);
    p_map_area_info_map = &this->map_area_info_map_;
    p_map_area_state = &map_area_config->map_area_state;
    if ( *(_BYTE *)(((unsigned __int64)p_map_area_state >> 3) + 0x7FFF8000) != 0
      && (char)(((unsigned __int8)p_map_area_state & 7) + 3) >= *(_BYTE *)(((unsigned __int64)p_map_area_state >> 3)
                                                                         + 0x7FFF8000) )
    {
      __asan_report_load4(p_map_area_state);
    }
    v8 = map_area_config->map_area_state == MistOpen;
    v4 = std::unordered_map<unsigned int,bool>::emplace<unsigned int const&,bool>(
           p_map_area_info_map,
           &map_area_config->id,
           &v8,
           (const unsigned int *)p_map_area_info_map,
           v1);
    if ( v4.second )
    {
      common::milog::MiLogStream::create(
        &v17,
        &common::milog::MiLogDefault::default_log_obj_,
        1u,
        "./src/scene/player_scene_comp.cpp",
        "initMapAreaInfoOnLogin",
        5708);
      v5 = common::milog::MiLogStream::operator<<<char [22],(char *[22])0>(
             &v17,
             (const char (*)[22])"init add map_area_id:");
      v6 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v5, &map_area_config->id);
      v7 = common::milog::MiLogStream::operator<<<char [6],(char *[6])0>(v6, (const char (*)[6])" uid:");
      if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
        __asan_report_load8();
      val = Player::getUid(this->player_);
      common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v7, &val);
      common::milog::MiLogStream::~MiLogStream(&v17);
    }
    std::__detail::_Node_const_iterator<std::pair<unsigned int const,data::MapAreaConfig>,false,false>::operator++(&__for_begin);
  }
};

// Line 5714: range 0000000013E753D0-0000000013E75911
__int64 __fastcall PlayerSceneComp::changeMapAreaInfo(PlayerSceneComp *const this, uint32_t map_area_id, bool is_open)
{
  unsigned __int64 v3; // r13
  __int64 v4; // rax
  _DWORD *v5; // r12
  std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v6; // rax
  bool v7; // r14
  common::milog::MiLogStream *v8; // rax
  unsigned int v9; // r14d
  char *v10; // rsi
  std::unordered_map<unsigned int,bool>::mapped_type *v11; // rax
  _BYTE *v12; // rdx
  char v13; // cl
  common::milog::MiLogStream *v14; // rax
  common::milog::MiLogStream *v15; // rax
  common::milog::MiLogStream *v16; // rax
  common::milog::MiLogStream *v17; // rax
  common::milog::MiLogStream *v18; // r14
  std::__shared_ptr_access<PlayerWorld,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v19; // r14
  uint32_t Uid; // eax
  __int64 result; // rax
  unsigned int val; // [rsp+14h] [rbp-FCh] BYREF
  proto::MapAreaInfo *proto_map_area_info; // [rsp+18h] [rbp-F8h]
  common::milog::MiLogStream v25; // [rsp+20h] [rbp-F0h] BYREF
  char v26[208]; // [rsp+40h] [rbp-D0h] BYREF

  v3 = (unsigned __int64)v26;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_2(160LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "3 32 4 16 map_area_id:5713 48 16 14 world_ptr:5727 80 48 11 notify:5722";
  *(_QWORD *)(v3 + 16) = PlayerSceneComp::changeMapAreaInfo;
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = 61956;
  v5[536862722] = 62194;
  v5[536862724] = -202116109;
  *(_DWORD *)(v3 + 32) = map_area_id;
  ServiceBox::findService<GameserverService>();
  GameserverService::getConfig((GameserverService *const)(v3 + 48));
  v6 = std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 48));
  v7 = data::WorldAreaExcelConfigMgrBase::findMapAreaConfig(
         &v6->design_config.txt_config_mgr.world_area_config_mgr,
         *(_DWORD *)(v3 + 32)) == 0LL;
  std::shared_ptr<Config>::~shared_ptr((std::shared_ptr<Config> *const)(v3 + 48));
  if ( v7 )
  {
    common::milog::MiLogStream::create(
      &v25,
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/scene/player_scene_comp.cpp",
      "changeMapAreaInfo",
      5717);
    v8 = common::milog::MiLogStream::operator<<<char [42],(char *[42])0>(
           &v25,
           (const char (*)[42])"findMapAreaExcelConfig fail, map_area_id:");
    common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v8, (const unsigned int *)(v3 + 32));
    common::milog::MiLogStream::~MiLogStream(&v25);
    v9 = -1;
  }
  else
  {
    v10 = (char *)(v3 + 32);
    v11 = std::unordered_map<unsigned int,bool>::operator[](
            &this->map_area_info_map_,
            (const std::unordered_map<unsigned int,bool>::key_type *)(v3 + 32));
    v12 = v11;
    v13 = *(_BYTE *)(((unsigned __int64)v11 >> 3) + 0x7FFF8000);
    if ( v13 != 0 && ((unsigned __int8)v11 & 7) >= v13 )
    {
      LOBYTE(v10) = v13 != 0;
      __asan_report_store1(v11, v10, v11);
    }
    *v12 = is_open;
    common::milog::MiLogStream::create(
      &v25,
      &common::milog::MiLogDefault::default_log_obj_,
      1u,
      "./src/scene/player_scene_comp.cpp",
      "changeMapAreaInfo",
      5721);
    v14 = common::milog::MiLogStream::operator<<<char [20],(char *[20])0>(
            &v25,
            (const char (*)[20])"change map_area_id:");
    v15 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v14, (const unsigned int *)(v3 + 32));
    v16 = common::milog::MiLogStream::operator<<<char [10],(char *[10])0>(v15, (const char (*)[10])" is_open:");
    v17 = common::milog::MiLogStream::operator<<(v16, is_open);
    v18 = common::milog::MiLogStream::operator<<<char [6],(char *[6])0>(v17, (const char (*)[6])" uid:");
    if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
      __asan_report_load8();
    val = Player::getUid(this->player_);
    common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v18, &val);
    common::milog::MiLogStream::~MiLogStream(&v25);
    proto::MapAreaChangeNotify::MapAreaChangeNotify((proto::MapAreaChangeNotify *const)(v3 + 80));
    proto_map_area_info = proto::MapAreaChangeNotify::add_map_area_info_list((proto::MapAreaChangeNotify *const)(v3 + 80));
    proto::MapAreaInfo::set_map_area_id(proto_map_area_info, *(_DWORD *)(v3 + 32));
    proto::MapAreaInfo::set_is_open(proto_map_area_info, is_open);
    if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
      __asan_report_load8();
    Player::sendProto(this->player_, (const google::protobuf::Message *)(v3 + 80));
    if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
      __asan_report_load8();
    Player::getSceneComp(this->player_);
    PlayerSceneComp::getMyPlayerWorld((const PlayerSceneComp *const)(v3 + 48));
    if ( std::operator!=<PlayerWorld>(0LL, (const std::shared_ptr<PlayerWorld> *)(v3 + 48)) )
    {
      v19 = std::__shared_ptr_access<PlayerWorld,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<PlayerWorld,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 48));
      if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
        __asan_report_load8();
      Uid = Player::getUid(this->player_);
      World::notifyAllPlayer<proto::MapAreaChangeNotify>(v19, (const proto::MapAreaChangeNotify *)(v3 + 80), Uid);
    }
    v9 = 0;
    std::shared_ptr<PlayerWorld>::~shared_ptr((std::shared_ptr<PlayerWorld> *const)(v3 + 48));
    proto::MapAreaChangeNotify::~MapAreaChangeNotify((proto::MapAreaChangeNotify *const)(v3 + 80));
  }
  result = v9;
  if ( v26 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8008) = 0;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8010) = 0;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8010) = -168430091;
  }
  return result;
};

// Line 5736: range 0000000013E75C98-0000000013E75EC9
void __cdecl PlayerSceneComp::refreshAllSceneEntityConfig(PlayerSceneComp *const this)
{
  unsigned __int64 v1; // rbx
  __int64 v2; // rax
  unsigned __int64 v3; // r12
  World *v4; // r14
  common::milog::MiLogStream *v5; // r14
  unsigned int val; // [rsp+1Ch] [rbp-94h] BYREF
  std::function<ForeachPolicy(Scene&)> p_func; // [rsp+20h] [rbp-90h] BYREF
  char v8[112]; // [rsp+40h] [rbp-70h] BYREF

  v1 = (unsigned __int64)v8;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_0(64LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "1 32 16 18 cur_world_ptr:5737";
  *(_QWORD *)(v1 + 16) = PlayerSceneComp::refreshAllSceneEntityConfig;
  v3 = v1 >> 3;
  *(_DWORD *)(v3 + 2147450880) = -235802127;
  *(_DWORD *)(v3 + 2147450884) = -202178560;
  PlayerSceneComp::getCurWorld((const PlayerSceneComp *const)(v1 + 32));
  if ( std::operator!=<World>((const std::shared_ptr<World> *)(v1 + 32), 0LL) )
  {
    v4 = std::__shared_ptr_access<World,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<World,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v1 + 32));
    std::function<ForeachPolicy ()(Scene &)>::function<PlayerSceneComp::refreshAllSceneEntityConfig(void)::{lambda(Scene &)#1},void,void>(
      &p_func,
      (PlayerSceneComp::refreshAllSceneEntityConfig::<lambda(Scene&)>)this);
    World::foreachScene(v4, &p_func);
    std::function<ForeachPolicy ()(Scene &)>::~function(&p_func);
  }
  common::milog::MiLogStream::create(
    (common::milog::MiLogStream *)&p_func,
    &common::milog::MiLogDefault::default_log_obj_,
    1u,
    "./src/scene/player_scene_comp.cpp",
    "refreshAllSceneEntityConfig",
    5763);
  v5 = common::milog::MiLogStream::operator<<<char [43],(char *[43])0>(
         (common::milog::MiLogStream *const)&p_func,
         (const char (*)[43])"refreshAllSceneEntityConfig finished, uid:");
  if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
    __asan_report_load8();
  val = Player::getUid(this->player_);
  common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v5, &val);
  common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)&p_func);
  std::shared_ptr<World>::~shared_ptr((std::shared_ptr<World> *const)(v1 + 32));
  if ( v8 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
  }
};

// Line 5740: range 0000000013E75912-0000000013E75C97
ForeachPolicy __cdecl PlayerSceneComp::refreshAllSceneEntityConfig(void)::{lambda(Scene &)#1}::operator()(
        const PlayerSceneComp::refreshAllSceneEntityConfig::<lambda(Scene&)> *const __closure,
        Scene *scene)
{
  unsigned __int64 v2; // r13
  __int64 v3; // rax
  _DWORD *v4; // r12
  std::__shared_ptr_access<SceneEntity,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v5; // rax
  const std::vector<std::string> *v6; // rax
  common::milog::MiLogStream *v7; // r14
  Player *Player; // rax
  SceneEntity *v9; // rax
  ForeachPolicy result; // eax
  std::vector<std::string>::iterator __for_begin; // [rsp+10h] [rbp-110h] BYREF
  std::vector<std::string>::iterator __for_end; // [rsp+18h] [rbp-108h] BYREF
  std::vector<std::string> *__for_range; // [rsp+20h] [rbp-100h]
  std::string *name; // [rsp+28h] [rbp-F8h]
  common::milog::MiLogStream v15; // [rsp+30h] [rbp-F0h] BYREF
  char v16[208]; // [rsp+50h] [rbp-D0h] BYREF

  v2 = (unsigned __int64)v16;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_2(160LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "3 32 16 25 cur_scene_entity_ptr:5743 64 16 29 replace_scene_entity_ptr:5751 96 24 25 last_config_name_vec:5746";
  *(_QWORD *)(v2 + 16) = PlayerSceneComp::refreshAllSceneEntityConfig(void)::{lambda(Scene &)#1}::operator();
  v4 = (_DWORD *)(v2 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = -219021312;
  v4[536862722] = -219021312;
  v4[536862723] = -218103808;
  v4[536862724] = -202116109;
  Scene::getSceneEntity((const Scene *const)(v2 + 32));
  if ( std::operator!=<SceneEntity>((const std::shared_ptr<SceneEntity> *)(v2 + 32), 0LL) )
  {
    v5 = std::__shared_ptr_access<SceneEntity,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<SceneEntity,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 32));
    v6 = SceneEntity::getLevelConfigNameVec[abi:cxx11](v5);
    std::vector<std::string>::vector((std::vector<std::string> *const)(v2 + 96), v6);
    if ( Scene::createSceneEntityWithoutInitConfig(scene) )
    {
      common::milog::MiLogStream::create(
        &v15,
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/scene/player_scene_comp.cpp",
        "operator()",
        5749);
      v7 = common::milog::MiLogStream::operator<<<char [43],(char *[43])0>(
             &v15,
             (const char (*)[43])"createSceneEntityWithoutInitConfig fails, ");
      if ( *(_BYTE *)(((unsigned __int64)__closure >> 3) + 0x7FFF8000) )
        __asan_report_load8();
      Player = PlayerCompBase::getPlayer(__closure->__this);
      operator<<(v7, Player);
      common::milog::MiLogStream::~MiLogStream(&v15);
    }
    Scene::getSceneEntity((const Scene *const)(v2 + 64));
    if ( std::operator!=<SceneEntity>(0LL, (const std::shared_ptr<SceneEntity> *)(v2 + 64)) )
    {
      __for_range = (std::vector<std::string> *)(v2 + 96);
      __for_begin._M_current = std::vector<std::string>::begin((std::vector<std::string> *const)(v2 + 96))._M_current;
      __for_end._M_current = std::vector<std::string>::end((std::vector<std::string> *const)(v2 + 96))._M_current;
      while ( __gnu_cxx::operator!=<std::string *,std::vector<std::string>>(&__for_begin, &__for_end) )
      {
        name = __gnu_cxx::__normal_iterator<std::string *,std::vector<std::string>>::operator*(&__for_begin);
        v9 = std::__shared_ptr_access<SceneEntity,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<SceneEntity,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 64));
        SceneEntity::addInitLevelConfig(v9, name);
        __gnu_cxx::__normal_iterator<std::string *,std::vector<std::string>>::operator++(&__for_begin);
      }
    }
    std::shared_ptr<SceneEntity>::~shared_ptr((std::shared_ptr<SceneEntity> *const)(v2 + 64));
    std::vector<std::string>::~vector((std::vector<std::string> *const)(v2 + 96));
  }
  std::shared_ptr<SceneEntity>::~shared_ptr((std::shared_ptr<SceneEntity> *const)(v2 + 32));
  result = FOREACH_CONTINUE;
  if ( v16 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8010) = 0;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8010) = -168430091;
  }
  return result;
};

// Line 5767: range 0000000013E75ECA-0000000013E76165
void __fastcall PlayerSceneComp::onPlayerEnterRegion(
        PlayerSceneComp *const this,
        uint32_t group_id,
        uint32_t config_id)
{
  unsigned __int64 v3; // r12
  __int64 v4; // rax
  _DWORD *v5; // r13
  unsigned int *v6; // r8
  bool *v7; // r9
  PlayerEventComp *EventComp; // r14
  char __args_0[9]; // [rsp+17h] [rbp-C9h] BYREF
  std::shared_ptr<BaseEvent> p_event_ptr; // [rsp+20h] [rbp-C0h] BYREF
  common::milog::MiLogStream v12; // [rsp+30h] [rbp-B0h] BYREF
  char v13[144]; // [rsp+50h] [rbp-90h] BYREF

  v3 = (unsigned __int64)v13;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_1(96LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "3 32 4 13 group_id:5766 48 4 14 config_id:5766 64 16 13 evnt_ptr:5775";
  *(_QWORD *)(v3 + 16) = PlayerSceneComp::onPlayerEnterRegion;
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = -234556924;
  v5[536862722] = -202178560;
  *(_DWORD *)(v3 + 32) = group_id;
  *(_DWORD *)(v3 + 48) = config_id;
  if ( *(_DWORD *)(v3 + 32) && *(_DWORD *)(v3 + 48) )
  {
    *(std::pair<unsigned int,unsigned int> *)&__args_0[1] = std::make_pair<unsigned int &,unsigned int &>(
                                                              (unsigned int *)(v3 + 32),
                                                              (unsigned int *)(v3 + 48));
    std::set<std::pair<unsigned int,unsigned int>>::insert(
      &this->player_in_region_set_,
      (std::set<std::pair<unsigned int,unsigned int>>::value_type *)&__args_0[1]);
    __args_0[0] = 1;
    common::tools::perf::make_shared<PlayerEnterLeaveRegionEvent,unsigned int &,unsigned int &,bool>(
      (unsigned int *)(v3 + 64),
      (unsigned int *)(v3 + 32),
      (bool *)(v3 + 48),
      (unsigned int *)__args_0,
      v6,
      v7);
    if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
      __asan_report_load8();
    EventComp = Player::getEventComp(this->player_);
    std::shared_ptr<BaseEvent>::shared_ptr<PlayerEnterLeaveRegionEvent,void>(
      &p_event_ptr,
      (const std::shared_ptr<PlayerEnterLeaveRegionEvent> *)(v3 + 64));
    PlayerEventComp::notifyEvent(EventComp, &p_event_ptr);
    std::shared_ptr<BaseEvent>::~shared_ptr(&p_event_ptr);
    std::shared_ptr<PlayerEnterLeaveRegionEvent>::~shared_ptr((std::shared_ptr<PlayerEnterLeaveRegionEvent> *const)(v3 + 64));
  }
  else
  {
    common::milog::MiLogStream::create(
      &v12,
      &common::milog::MiLogDefault::default_log_obj_,
      1u,
      "./src/scene/player_scene_comp.cpp",
      "onPlayerEnterRegion",
      5770);
    common::milog::MiLogStream::operator<<<char [27],(char *[27])0>(
      &v12,
      (const char (*)[27])"group_id or config_id is 0");
    common::milog::MiLogStream::~MiLogStream(&v12);
  }
  if ( v13 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8008) = 0;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8008) = -168430091;
  }
};

// Line 5780: range 0000000013E76166-0000000013E76401
void __fastcall PlayerSceneComp::onPlayerLeaveRegion(
        PlayerSceneComp *const this,
        uint32_t group_id,
        uint32_t config_id)
{
  unsigned __int64 v3; // r12
  __int64 v4; // rax
  _DWORD *v5; // r13
  unsigned int *v6; // r8
  bool *v7; // r9
  PlayerEventComp *EventComp; // r14
  char __args_0[9]; // [rsp+17h] [rbp-C9h] BYREF
  std::shared_ptr<BaseEvent> p_event_ptr; // [rsp+20h] [rbp-C0h] BYREF
  common::milog::MiLogStream v12; // [rsp+30h] [rbp-B0h] BYREF
  char v13[144]; // [rsp+50h] [rbp-90h] BYREF

  v3 = (unsigned __int64)v13;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_1(96LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "3 32 4 13 group_id:5779 48 4 14 config_id:5779 64 16 13 evnt_ptr:5788";
  *(_QWORD *)(v3 + 16) = PlayerSceneComp::onPlayerLeaveRegion;
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = -234556924;
  v5[536862722] = -202178560;
  *(_DWORD *)(v3 + 32) = group_id;
  *(_DWORD *)(v3 + 48) = config_id;
  if ( *(_DWORD *)(v3 + 32) && *(_DWORD *)(v3 + 48) )
  {
    *(std::pair<unsigned int,unsigned int> *)&__args_0[1] = std::make_pair<unsigned int &,unsigned int &>(
                                                              (unsigned int *)(v3 + 32),
                                                              (unsigned int *)(v3 + 48));
    std::set<std::pair<unsigned int,unsigned int>>::erase(
      &this->player_in_region_set_,
      (const std::set<std::pair<unsigned int,unsigned int>>::key_type *)&__args_0[1]);
    __args_0[0] = 0;
    common::tools::perf::make_shared<PlayerEnterLeaveRegionEvent,unsigned int &,unsigned int &,bool>(
      (unsigned int *)(v3 + 64),
      (unsigned int *)(v3 + 32),
      (bool *)(v3 + 48),
      (unsigned int *)__args_0,
      v6,
      v7);
    if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
      __asan_report_load8();
    EventComp = Player::getEventComp(this->player_);
    std::shared_ptr<BaseEvent>::shared_ptr<PlayerEnterLeaveRegionEvent,void>(
      &p_event_ptr,
      (const std::shared_ptr<PlayerEnterLeaveRegionEvent> *)(v3 + 64));
    PlayerEventComp::notifyEvent(EventComp, &p_event_ptr);
    std::shared_ptr<BaseEvent>::~shared_ptr(&p_event_ptr);
    std::shared_ptr<PlayerEnterLeaveRegionEvent>::~shared_ptr((std::shared_ptr<PlayerEnterLeaveRegionEvent> *const)(v3 + 64));
  }
  else
  {
    common::milog::MiLogStream::create(
      &v12,
      &common::milog::MiLogDefault::default_log_obj_,
      1u,
      "./src/scene/player_scene_comp.cpp",
      "onPlayerLeaveRegion",
      5783);
    common::milog::MiLogStream::operator<<<char [27],(char *[27])0>(
      &v12,
      (const char (*)[27])"group_id or config_id is 0");
    common::milog::MiLogStream::~MiLogStream(&v12);
  }
  if ( v13 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8008) = 0;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8008) = -168430091;
  }
};

// Line 5793: range 0000000013E76402-0000000013E76589
void __cdecl PlayerSceneComp::notifyLevelTagData(PlayerSceneComp *const this)
{
  unsigned __int64 v1; // rbx
  __int64 v2; // rax
  _DWORD *v3; // r12
  char v4[160]; // [rsp+10h] [rbp-A0h] BYREF

  v1 = (unsigned __int64)v4;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_1(128LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "1 48 40 11 notify:5794";
  *(_QWORD *)(v1 + 16) = PlayerSceneComp::notifyLevelTagData;
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = 61937;
  v3[536862722] = -218103808;
  v3[536862723] = -202116109;
  proto::LevelTagDataNotify::LevelTagDataNotify((proto::LevelTagDataNotify *const)(v1 + 48));
  PlayerSceneComp::fillLevelTagDataNotify(this, (proto::LevelTagDataNotify *)(v1 + 48));
  if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
    __asan_report_load8();
  Player::sendProto(this->player_, (const google::protobuf::Message *)(v1 + 48));
  proto::LevelTagDataNotify::~LevelTagDataNotify((proto::LevelTagDataNotify *const)(v1 + 48));
  if ( v4 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
};

// Line 5800: range 0000000013E7658A-0000000013E76758
void __cdecl PlayerSceneComp::broadcastLevelTagData(PlayerSceneComp *const this)
{
  unsigned __int64 v1; // r13
  __int64 v2; // rax
  _DWORD *v3; // rbx
  std::__shared_ptr_access<PlayerWorld,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v4; // rax
  char v5[192]; // [rsp+10h] [rbp-C0h] BYREF

  v1 = (unsigned __int64)v5;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_2(160LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "2 48 16 21 player_world_ptr:5801 80 40 11 notify:5804";
  *(_QWORD *)(v1 + 16) = PlayerSceneComp::broadcastLevelTagData;
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = 61937;
  v3[536862722] = 62194;
  v3[536862723] = -218103808;
  v3[536862724] = -202116109;
  PlayerSceneComp::getMyPlayerWorld((const PlayerSceneComp *const)(v1 + 48));
  if ( std::operator!=<PlayerWorld>(0LL, (const std::shared_ptr<PlayerWorld> *)(v1 + 48)) )
  {
    proto::LevelTagDataNotify::LevelTagDataNotify((proto::LevelTagDataNotify *const)(v1 + 80));
    PlayerSceneComp::fillLevelTagDataNotify(this, (proto::LevelTagDataNotify *)(v1 + 80));
    v4 = std::__shared_ptr_access<PlayerWorld,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<PlayerWorld,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v1 + 48));
    World::notifyAllPlayer<proto::LevelTagDataNotify>(v4, (const proto::LevelTagDataNotify *)(v1 + 80), 0);
    proto::LevelTagDataNotify::~LevelTagDataNotify((proto::LevelTagDataNotify *const)(v1 + 80));
  }
  std::shared_ptr<PlayerWorld>::~shared_ptr((std::shared_ptr<PlayerWorld> *const)(v1 + 48));
  if ( v5 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0LL;
    *(_DWORD *)((v1 >> 3) + 0x7FFF8010) = 0;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v1 >> 3) + 0x7FFF8010) = -168430091;
  }
};

// Line 5811: range 0000000013E7675A-0000000013E7802E
__int64 __fastcall PlayerSceneComp::changeToTargetLevelTag(
        PlayerSceneComp *const this,
        uint32_t target_level_tag_id,
        bool is_check_cd,
        const LevelTagChangeParam *change_param_ptr)
{
  unsigned __int64 v4; // r13
  __int64 v5; // rax
  _DWORD *v6; // r12
  common::milog::MiLogStream *v7; // r14
  common::milog::MiLogStream *v8; // rax
  common::milog::MiLogStream *v9; // rax
  unsigned int v10; // r14d
  common::milog::MiLogStream *v11; // r14
  common::milog::MiLogStream *v12; // rax
  common::milog::MiLogStream *v13; // rax
  std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v14; // rax
  bool v15; // r14
  common::milog::MiLogStream *v16; // r14
  common::milog::MiLogStream *v17; // rax
  common::milog::MiLogStream *v18; // rax
  common::milog::MiLogStream *v20; // r14
  common::milog::MiLogStream *v21; // rax
  common::milog::MiLogStream *v22; // rax
  __gnu_cxx::__normal_iterator<unsigned int*,std::vector<unsigned int> >::reference v23; // rax
  _DWORD *v24; // rdx
  common::milog::MiLogStream *v25; // r14
  common::milog::MiLogStream *v26; // rax
  common::milog::MiLogStream *v27; // rax
  char *v28; // rsi
  std::map<unsigned int,unsigned int>::mapped_type *v29; // rax
  uint32_t *v30; // rdx
  char v31; // cl
  std::map<unsigned int,unsigned int>::mapped_type *v32; // rax
  uint32_t *v33; // rdx
  char v34; // cl
  char *v35; // rsi
  bool v36; // dl
  std::tuple_element<0,const std::pair<unsigned int const,std::pair<std::vector<unsigned int>,std::vector<unsigned int> > > >::type v37; // ecx
  __int64 v38; // rdx
  common::milog::MiLogStream *v39; // rax
  Scene *v40; // rax
  char *v41; // rsi
  int32_t v42; // r14d
  std::__shared_ptr_access<Event,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v43; // rdx
  char v44; // cl
  int v45; // r14d
  __int64 v46; // rax
  char v47; // dl
  bool v48; // dl
  int32_t v49; // r14d
  std::__shared_ptr_access<Event,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v50; // rdx
  char v51; // cl
  uint32_t Uid; // r14d
  std::__shared_ptr_access<Event,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v53; // rdx
  char v54; // cl
  __gnu_cxx::__normal_iterator<unsigned int const*,std::vector<unsigned int> >::reference v55; // rax
  _DWORD *v56; // rdx
  std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v57; // rax
  common::milog::MiLogStream *v58; // rax
  std::vector<unsigned int> *v59; // rax
  __gnu_cxx::__normal_iterator<unsigned int*,std::vector<unsigned int> >::reference v60; // rax
  Scene *v61; // rax
  uint32_t BlockGroupComp; // eax
  Group *v63; // rax
  PlayerEventComp *EventComp; // r14
  common::milog::MiLogStream *v65; // r14
  common::milog::MiLogStream *v66; // rax
  common::milog::MiLogStream *v67; // rax
  common::milog::MiLogStream *v68; // rax
  common::milog::MiLogStream *v69; // r14
  __int64 result; // rax
  uint32_t now; // [rsp+20h] [rbp-290h]
  std::map<std::shared_ptr<Scene>,std::vector<unsigned int>>::iterator __for_begin_1; // [rsp+28h] [rbp-288h] BYREF
  std::map<std::shared_ptr<Scene>,std::vector<unsigned int>>::iterator __for_end_0; // [rsp+30h] [rbp-280h] BYREF
  std::vector<unsigned int>::iterator __for_begin; // [rsp+38h] [rbp-278h] BYREF
  const LevelTagExcelConfigMgr *level_tag_config_mgr; // [rsp+40h] [rbp-270h]
  const data::LevelTagExcelConfig *level_tag_config_ptr; // [rsp+48h] [rbp-268h]
  std::vector<unsigned int> *__for_range; // [rsp+50h] [rbp-260h]
  const std::unordered_map<unsigned int,std::pair<std::vector<unsigned int>,std::vector<unsigned int> >> *scene_tag_info_map_ptr; // [rsp+58h] [rbp-258h]
  const std::unordered_map<unsigned int,std::pair<std::vector<unsigned int>,std::vector<unsigned int> >> *__for_range_0; // [rsp+60h] [rbp-250h]
  const std::pair<unsigned int const,std::pair<std::vector<unsigned int>,std::vector<unsigned int> > > *v82; // [rsp+68h] [rbp-248h]
  std::tuple_element<0,const std::pair<unsigned int const,std::pair<std::vector<unsigned int>,std::vector<unsigned int> > > >::type *scene_id; // [rsp+70h] [rbp-240h]
  std::tuple_element<1,const std::pair<unsigned int const,std::pair<std::vector<unsigned int>,std::vector<unsigned int> > > >::type *scene_tag_info; // [rsp+78h] [rbp-238h]
  const std::vector<unsigned int> *group_id_vec; // [rsp+80h] [rbp-230h]
  const std::vector<unsigned int> *__for_range_1; // [rsp+88h] [rbp-228h]
  std::map<std::shared_ptr<Scene>,std::vector<unsigned int>> *__for_range_2; // [rsp+90h] [rbp-220h]
  std::pair<const std::shared_ptr<Scene>,std::vector<unsigned int> > *__in; // [rsp+98h] [rbp-218h]
  std::tuple_element<0,std::pair<const std::shared_ptr<Scene>,std::vector<unsigned int> > >::type *scene_ptr; // [rsp+A0h] [rbp-210h]
  std::tuple_element<1,std::pair<const std::shared_ptr<Scene>,std::vector<unsigned int> > >::type *group_vec; // [rsp+A8h] [rbp-208h]
  std::vector<unsigned int> *__for_range_3; // [rsp+B0h] [rbp-200h]
  std::unordered_map<unsigned int,std::pair<std::vector<unsigned int>,std::vector<unsigned int> >>::const_iterator __for_end; // [rsp+B8h] [rbp-1F8h] BYREF
  common::milog::MiLogStream v93; // [rsp+C0h] [rbp-1F0h] BYREF
  char v94[464]; // [rsp+E0h] [rbp-1D0h] BYREF

  v4 = (unsigned __int64)v94;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v5 = __asan_stack_malloc_3(416LL);
    if ( v5 )
      v4 = v5;
  }
  *(_QWORD *)v4 = 1102416563LL;
  *(_QWORD *)(v4 + 8) = "12 32 4 14 series_id:5832 48 4 24 remove_level_tag_id:5846 64 4 13 group_id:5919 80 4 17 level_t"
                        "ag_id:5847 96 4 24 target_level_tag_id:5810 112 8 22 series_group_pair:5831 144 16 10 timer:5813"
                        " 176 16 14 event_ptr:5908 208 16 21 player_event_ptr:5945 240 16 14 scene_ptr:5890 272 24 21 lev"
                        "el_tag_id_vec:5824 336 48 20 scene_group_map:5918";
  *(_QWORD *)(v4 + 16) = PlayerSceneComp::changeToTargetLevelTag;
  v6 = (_DWORD *)(v4 >> 3);
  v6[536862720] = -235802127;
  v6[536862721] = -234556924;
  v6[536862722] = -234556924;
  v6[536862723] = 61956;
  v6[536862723] = -234881024;
  v6[536862724] = 62194;
  v6[536862725] = 62194;
  v6[536862726] = 62194;
  v6[536862727] = 62194;
  v6[536862728] = 62194;
  v6[536862729] = -218959360;
  v6[536862730] = 62194;
  v6[536862732] = -202116109;
  *(_DWORD *)(v4 + 96) = target_level_tag_id;
  common::tools::TimeUtils::Timer::Timer((common::tools::TimeUtils::Timer *const)(v4 + 144));
  ServiceBox::findService<GameserverService>();
  GameserverService::getConfig((GameserverService *const)(v4 + 240));
  level_tag_config_mgr = &std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 240))->design_config.txt_config_mgr.level_tag_config_mgr;
  std::shared_ptr<Config>::~shared_ptr((std::shared_ptr<Config> *const)(v4 + 240));
  level_tag_config_ptr = data::LevelTagExcelConfigMgrBase::findLevelTagExcelConfig(
                           level_tag_config_mgr,
                           *(_DWORD *)(v4 + 96));
  if ( level_tag_config_ptr )
  {
    PlayerSceneComp::getCurLevelTagIdVec((std::vector<unsigned int> *)(v4 + 272), this);
    if ( common::tools::MiscUtils::isContains<unsigned int>(
           (std::vector<unsigned int> *)(v4 + 272),
           (const unsigned int *)(v4 + 96)) )
    {
      common::milog::MiLogStream::create(
        &v93,
        &common::milog::MiLogDefault::default_log_obj_,
        1u,
        "./src/scene/player_scene_comp.cpp",
        "changeToTargetLevelTag",
        5827);
      v11 = common::milog::MiLogStream::operator<<<char [33],(char *[33])0>(
              &v93,
              (const char (*)[33])"level tag already existed, uid: ");
      if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
        __asan_report_load8();
      *(_DWORD *)(v4 + 80) = Player::getUid(this->player_);
      v12 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v11, (const unsigned int *)(v4 + 80));
      v13 = common::milog::MiLogStream::operator<<<char [17],(char *[17])0>(v12, (const char (*)[17])" ,level_tag_id: ");
      common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v13, (const unsigned int *)(v4 + 96));
      common::milog::MiLogStream::~MiLogStream(&v93);
      v10 = 564;
    }
    else
    {
      *(std::pair<unsigned int,unsigned int> *)(v4 + 112) = LevelTagExcelConfigMgr::getLevelTagSeriesGroupPair(
                                                              level_tag_config_mgr,
                                                              *(_DWORD *)(v4 + 96));
      *(_DWORD *)(v4 + 32) = *(_DWORD *)(v4 + 112);
      ServiceBox::findService<GameserverService>();
      GameserverService::getConfig((GameserverService *const)(v4 + 240));
      v14 = std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 240));
      v15 = data::LevelTagExcelConfigMgrBase::findLevelTagGroupsExcelConfig(
              &v14->design_config.txt_config_mgr.level_tag_config_mgr,
              *(_DWORD *)(v4 + 32)) == 0LL;
      std::shared_ptr<Config>::~shared_ptr((std::shared_ptr<Config> *const)(v4 + 240));
      if ( v15 )
      {
        common::milog::MiLogStream::create(
          &v93,
          &common::milog::MiLogDefault::default_log_obj_,
          3u,
          "./src/scene/player_scene_comp.cpp",
          "changeToTargetLevelTag",
          5835);
        v16 = common::milog::MiLogStream::operator<<<char [44],(char *[44])0>(
                &v93,
                (const char (*)[44])"findLevelTagGroupsExcelConfig failed, uid: ");
        if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
          __asan_report_load8();
        *(_DWORD *)(v4 + 80) = Player::getUid(this->player_);
        v17 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                v16,
                (const unsigned int *)(v4 + 80));
        v18 = common::milog::MiLogStream::operator<<<char [14],(char *[14])0>(v17, (const char (*)[14])" ,series_id: ");
        common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v18, (const unsigned int *)(v4 + 32));
        common::milog::MiLogStream::~MiLogStream(&v93);
        v10 = -1;
      }
      else if ( is_check_cd && PlayerSceneComp::isLevelTagChangeInCD(this, *(_DWORD *)(v4 + 96)) )
      {
        common::milog::MiLogStream::create(
          &v93,
          &common::milog::MiLogDefault::default_log_obj_,
          3u,
          "./src/scene/player_scene_comp.cpp",
          "changeToTargetLevelTag",
          5842);
        v20 = common::milog::MiLogStream::operator<<<char [30],(char *[30])0>(
                &v93,
                (const char (*)[30])"level tag change in cd, uid: ");
        if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
          __asan_report_load8();
        *(_DWORD *)(v4 + 80) = Player::getUid(this->player_);
        v21 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                v20,
                (const unsigned int *)(v4 + 80));
        v22 = common::milog::MiLogStream::operator<<<char [17],(char *[17])0>(
                v21,
                (const char (*)[17])" ,level_tag_id: ");
        common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v22, (const unsigned int *)(v4 + 96));
        common::milog::MiLogStream::~MiLogStream(&v93);
        v10 = 563;
      }
      else
      {
        *(_DWORD *)(v4 + 48) = 0;
        __for_range = (std::vector<unsigned int> *)(v4 + 272);
        __for_end_0._M_node = (std::_Rb_tree_iterator<std::pair<const std::shared_ptr<Scene>,std::vector<unsigned int> > >::_Base_ptr)std::vector<unsigned int>::begin((std::vector<unsigned int> *const)(v4 + 272))._M_current;
        __for_begin._M_current = std::vector<unsigned int>::end((std::vector<unsigned int> *const)(v4 + 272))._M_current;
        while ( __gnu_cxx::operator!=<unsigned int *,std::vector<unsigned int>>(
                  (const __gnu_cxx::__normal_iterator<unsigned int*,std::vector<unsigned int> > *)&__for_end_0,
                  &__for_begin) )
        {
          v23 = __gnu_cxx::__normal_iterator<unsigned int *,std::vector<unsigned int>>::operator*((const __gnu_cxx::__normal_iterator<unsigned int*,std::vector<unsigned int> > *const)&__for_end_0);
          v24 = v23;
          if ( *(_BYTE *)(((unsigned __int64)v23 >> 3) + 0x7FFF8000) != 0
            && (char)(((unsigned __int8)v23 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)v23 >> 3) + 0x7FFF8000) )
          {
            __asan_report_load4(v23);
          }
          *(_DWORD *)(v4 + 80) = *v24;
          __for_end._M_cur = (std::__detail::_Node_iterator_base<std::pair<unsigned int const,std::pair<std::vector<unsigned int>,std::vector<unsigned int> > >,false>::__node_type *)LevelTagExcelConfigMgr::getLevelTagSeriesGroupPair(level_tag_config_mgr, *(_DWORD *)(v4 + 80));
          if ( std::operator==<unsigned int,unsigned int>(
                 (const std::pair<unsigned int,unsigned int> *)&__for_end,
                 (const std::pair<unsigned int,unsigned int> *)(v4 + 112)) )
          {
            *(_DWORD *)(v4 + 48) = *(_DWORD *)(v4 + 80);
            std::map<unsigned int,unsigned int>::erase(
              &this->level_tag_info_.level_tag_change_map,
              (const std::map<unsigned int,unsigned int>::key_type *)(v4 + 80));
          }
          __gnu_cxx::__normal_iterator<unsigned int *,std::vector<unsigned int>>::operator++((__gnu_cxx::__normal_iterator<unsigned int*,std::vector<unsigned int> > *const)&__for_end_0);
        }
        if ( !*(_DWORD *)(v4 + 48) )
        {
          common::milog::MiLogStream::create(
            &v93,
            &common::milog::MiLogDefault::default_log_obj_,
            4u,
            "./src/scene/player_scene_comp.cpp",
            "changeToTargetLevelTag",
            5860);
          v25 = common::milog::MiLogStream::operator<<<char [31],(char *[31])0>(
                  &v93,
                  (const char (*)[31])"remove_level_tag_id = 0, uid: ");
          if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
            __asan_report_load8();
          *(_DWORD *)(v4 + 80) = Player::getUid(this->player_);
          v26 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                  v25,
                  (const unsigned int *)(v4 + 80));
          v27 = common::milog::MiLogStream::operator<<<char [17],(char *[17])0>(
                  v26,
                  (const char (*)[17])" ,level_tag_id: ");
          common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v27, (const unsigned int *)(v4 + 96));
          common::milog::MiLogStream::~MiLogStream(&v93);
        }
        now = common::tools::TimeUtils::getNow();
        v28 = (char *)(v4 + 96);
        v29 = std::map<unsigned int,unsigned int>::operator[](
                &this->level_tag_info_.level_tag_change_map,
                (const std::map<unsigned int,unsigned int>::key_type *)(v4 + 96));
        v30 = v29;
        v31 = *(_BYTE *)(((unsigned __int64)v29 >> 3) + 0x7FFF8000);
        if ( v31 != 0 && (char)(((unsigned __int8)v29 & 7) + 3) >= v31 )
        {
          LOBYTE(v28) = v31 != 0;
          __asan_report_store4(v29, v28, (_BYTE)v29);
        }
        *v30 = now;
        if ( is_check_cd )
        {
          v35 = (char *)(v4 + 32);
          v32 = std::map<unsigned int,unsigned int>::operator[](
                  &this->level_tag_info_.series_change_map,
                  (const std::map<unsigned int,unsigned int>::key_type *)(v4 + 32));
          v33 = v32;
          v34 = *(_BYTE *)(((unsigned __int64)v32 >> 3) + 0x7FFF8000);
          LOBYTE(v35) = v34 != 0;
          if ( v34 != 0 && (char)(((unsigned __int8)v32 & 7) + 3) >= v34 )
            __asan_report_store4(v32, v35, (_BYTE)v32);
          *v33 = now;
          if ( *(_BYTE *)(((unsigned __int64)&this->level_tag_info_.record_change_time >> 3) + 0x7FFF8000) != 0
            && *(_BYTE *)(((unsigned __int64)&this->level_tag_info_.record_change_time >> 3) + 0x7FFF8000) <= 3 )
          {
            __asan_report_load4(&this->level_tag_info_.record_change_time);
          }
          if ( !this->level_tag_info_.record_change_time || now > this->level_tag_info_.record_change_time + 10 )
          {
            if ( *(_BYTE *)(((unsigned __int64)&this->level_tag_info_.record_change_time >> 3) + 0x7FFF8000) != 0
              && *(_BYTE *)(((unsigned __int64)&this->level_tag_info_.record_change_time >> 3) + 0x7FFF8000) <= 3 )
            {
              __asan_report_store4(&this->level_tag_info_.record_change_time, v35, (_BYTE)this + 64);
            }
            this->level_tag_info_.record_change_time = now;
            v36 = *(_BYTE *)(((unsigned __int64)&this->level_tag_info_.record_change_count >> 3) + 0x7FFF8000) != 0
               && (char)((((_BYTE)this + 68) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&this->level_tag_info_.record_change_count >> 3)
                                                                   + 0x7FFF8000);
            if ( v36 )
              __asan_report_store4(&this->level_tag_info_.record_change_count, (((_BYTE)this + 68) & 7u) + 3, v36);
            this->level_tag_info_.record_change_count = 0;
          }
          if ( *(_BYTE *)(((unsigned __int64)&this->level_tag_info_.record_change_count >> 3) + 0x7FFF8000) != 0
            && (char)((((_BYTE)this + 68) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&this->level_tag_info_.record_change_count >> 3)
                                                                + 0x7FFF8000) )
          {
            __asan_report_load4(&this->level_tag_info_.record_change_count);
          }
          ++this->level_tag_info_.record_change_count;
        }
        scene_tag_info_map_ptr = LevelTagExcelConfigMgr::getSceneTagInfoMap(level_tag_config_mgr, *(_DWORD *)(v4 + 96));
        if ( scene_tag_info_map_ptr )
        {
          __for_range_0 = scene_tag_info_map_ptr;
          __for_begin._M_current = (unsigned int *)std::unordered_map<unsigned int,std::pair<std::vector<unsigned int>,std::vector<unsigned int>>>::begin(scene_tag_info_map_ptr)._M_cur;
          __for_end._M_cur = std::unordered_map<unsigned int,std::pair<std::vector<unsigned int>,std::vector<unsigned int>>>::end(__for_range_0)._M_cur;
          while ( std::__detail::operator!=<std::pair<unsigned int const,std::pair<std::vector<unsigned int>,std::vector<unsigned int>>>,false>(
                    (const std::__detail::_Node_iterator_base<std::pair<unsigned int const,std::pair<std::vector<unsigned int>,std::vector<unsigned int> > >,false> *)&__for_begin,
                    &__for_end) )
          {
            v82 = std::__detail::_Node_const_iterator<std::pair<unsigned int const,std::pair<std::vector<unsigned int>,std::vector<unsigned int>>>,false,false>::operator*((const std::__detail::_Node_const_iterator<std::pair<unsigned int const,std::pair<std::vector<unsigned int>,std::vector<unsigned int> > >,false,false> *const)&__for_begin);
            scene_id = std::get<0ul,unsigned int const,std::pair<std::vector<unsigned int>,std::vector<unsigned int>>>(v82);
            scene_tag_info = (std::tuple_element<1,const std::pair<unsigned int const,std::pair<std::vector<unsigned int>,std::vector<unsigned int> > > >::type *)std::get<1ul,unsigned int const,std::pair<std::vector<unsigned int>,std::vector<unsigned int>>>(v82);
            *(_QWORD *)(v4 + 336) = 0LL;
            *(_QWORD *)(v4 + 344) = 0LL;
            *(_QWORD *)(v4 + 352) = 0LL;
            *(_QWORD *)(v4 + 360) = 0LL;
            *(_QWORD *)(v4 + 368) = 0LL;
            *(_QWORD *)(v4 + 376) = 0LL;
            if ( *(_BYTE *)(((unsigned __int64)scene_id >> 3) + 0x7FFF8000) != 0
              && (char)(((unsigned __int8)scene_id & 7) + 3) >= *(_BYTE *)(((unsigned __int64)scene_id >> 3) + 0x7FFF8000) )
            {
              __asan_report_load4(scene_id);
            }
            v37 = *scene_id;
            if ( *(_BYTE *)(((unsigned __int64)&level_tag_config_ptr->scene_id >> 3) + 0x7FFF8000) != 0
              && *(_BYTE *)(((unsigned __int64)&level_tag_config_ptr->scene_id >> 3) + 0x7FFF8000) <= 3 )
            {
              __asan_report_load4(&level_tag_config_ptr->scene_id);
            }
            if ( v37 == level_tag_config_ptr->scene_id && change_param_ptr )
            {
              std::optional<std::vector<Vector3>>::operator=(
                (std::optional<std::vector<Vector3> > *const)(v4 + 336),
                &change_param_ptr->trans_pos_vec_opt);
              if ( *(_WORD *)(((unsigned __int64)&change_param_ptr->trans_rot_opt >> 3) + 0x7FFF8000) )
                __asan_report_load16(&change_param_ptr->trans_rot_opt);
              v38 = *(_QWORD *)&change_param_ptr->trans_rot_opt._M_payload._M_payload._M_value.z;
              *(_QWORD *)(v4 + 368) = *(_QWORD *)change_param_ptr->trans_rot_opt._M_payload._M_payload._M_empty.gap0;
              *(_QWORD *)(v4 + 376) = v38;
            }
            if ( *(_BYTE *)(((unsigned __int64)scene_id >> 3) + 0x7FFF8000) != 0
              && (char)(((unsigned __int8)scene_id & 7) + 3) >= *(_BYTE *)(((unsigned __int64)scene_id >> 3) + 0x7FFF8000) )
            {
              __asan_report_load4(scene_id);
            }
            PlayerSceneComp::getWorldOrPersistentDungeonScenePtr(
              (PlayerSceneComp *const)(v4 + 240),
              (uint32_t)this,
              *scene_id);
            if ( std::operator==<Scene>(0LL, (const std::shared_ptr<Scene> *)(v4 + 240)) )
            {
              common::milog::MiLogStream::create(
                &v93,
                &common::milog::MiLogDefault::default_log_obj_,
                3u,
                "./src/scene/player_scene_comp.cpp",
                "changeToTargetLevelTag",
                5893);
              v39 = common::milog::MiLogStream::operator<<<char [55],(char *[55])0>(
                      &v93,
                      (const char (*)[55])"getWorldOrPersistentDungeonScenePtr failed, scene_id: ");
              common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v39, scene_id);
              common::milog::MiLogStream::~MiLogStream(&v93);
            }
            else
            {
              v40 = std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 240));
              Scene::processSceneTag(
                v40,
                &scene_tag_info->first,
                &scene_tag_info->second,
                (const SceneTagOpParam *)(v4 + 336));
            }
            std::shared_ptr<Scene>::~shared_ptr((std::shared_ptr<Scene> *const)(v4 + 240));
            SceneTagOpParam::~SceneTagOpParam((SceneTagOpParam *const)(v4 + 336));
            std::__detail::_Node_const_iterator<std::pair<unsigned int const,std::pair<std::vector<unsigned int>,std::vector<unsigned int>>>,false,false>::operator++((std::__detail::_Node_const_iterator<std::pair<unsigned int const,std::pair<std::vector<unsigned int>,std::vector<unsigned int> > >,false,false> *const)&__for_begin);
          }
        }
        PlayerSceneComp::registerGroupsByLevelTagId(this, *(_DWORD *)(v4 + 96));
        PlayerSceneComp::unregisterGroupsByLevelTagId(this, *(_DWORD *)(v4 + 48));
        EventUtil::createEvent((data::EventType)(v4 + 176));
        v41 = (char *)(v4 + 176);
        if ( std::operator!=<Event>(0LL, (const std::shared_ptr<Event> *)(v4 + 176)) )
        {
          v42 = *(_DWORD *)(v4 + 48);
          v43 = std::__shared_ptr_access<Event,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Event,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 176));
          v44 = *(_BYTE *)(((unsigned __int64)&v43->param1 >> 3) + 0x7FFF8000);
          if ( v44 != 0 && (char)((((_BYTE)v43 + 44) & 7) + 3) >= v44 )
          {
            LOBYTE(v41) = v44 != 0;
            __asan_report_store4(&v43->param1, v41, (_BYTE)v43);
          }
          v43->param1 = v42;
          v45 = *(_DWORD *)(v4 + 96);
          v46 = (__int64)std::__shared_ptr_access<Event,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Event,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 176));
          v47 = *(_BYTE *)(((unsigned __int64)(v46 + 48) >> 3) + 0x7FFF8000);
          LOBYTE(v41) = v47 != 0;
          v48 = v47 != 0 && v47 <= 3;
          if ( v48 )
            v46 = __asan_report_store4(v46 + 48, v41, v48);
          *(_DWORD *)(v46 + 48) = v45;
          v49 = *(_DWORD *)(v4 + 32);
          v50 = std::__shared_ptr_access<Event,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Event,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 176));
          v51 = *(_BYTE *)(((unsigned __int64)&v50->param3 >> 3) + 0x7FFF8000);
          if ( v51 != 0 && (char)((((_BYTE)v50 + 52) & 7) + 3) >= v51 )
          {
            LOBYTE(v41) = v51 != 0;
            __asan_report_store4(&v50->param3, v41, (_BYTE)v50);
          }
          v50->param3 = v49;
          if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
            __asan_report_load8();
          Uid = Player::getUid(this->player_);
          v53 = std::__shared_ptr_access<Event,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Event,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 176));
          v54 = *(_BYTE *)(((unsigned __int64)&v53->uid >> 3) + 0x7FFF8000);
          if ( v54 != 0 && (char)((((_BYTE)v53 + 60) & 7) + 3) >= v54 )
          {
            LOBYTE(v41) = v54 != 0;
            __asan_report_store4(&v53->uid, v41, (_BYTE)v53);
          }
          v53->uid = Uid;
        }
        group_id_vec = LevelTagExcelConfigMgr::getRelatedGroupIdVec(level_tag_config_mgr, *(_DWORD *)(v4 + 32));
        std::map<std::shared_ptr<Scene>,std::vector<unsigned int>>::map((std::map<std::shared_ptr<Scene>,std::vector<unsigned int>> *const)(v4 + 336));
        __for_range_1 = group_id_vec;
        __for_begin._M_current = (unsigned int *)std::vector<unsigned int>::begin(group_id_vec)._M_current;
        __for_end._M_cur = (std::__detail::_Node_iterator_base<std::pair<unsigned int const,std::pair<std::vector<unsigned int>,std::vector<unsigned int> > >,false>::__node_type *)std::vector<unsigned int>::end(__for_range_1)._M_current;
        while ( __gnu_cxx::operator!=<unsigned int const*,std::vector<unsigned int>>(
                  (const __gnu_cxx::__normal_iterator<unsigned int const*,std::vector<unsigned int> > *)&__for_begin,
                  (const __gnu_cxx::__normal_iterator<unsigned int const*,std::vector<unsigned int> > *)&__for_end) )
        {
          v55 = __gnu_cxx::__normal_iterator<unsigned int const*,std::vector<unsigned int>>::operator*((const __gnu_cxx::__normal_iterator<unsigned int const*,std::vector<unsigned int> > *const)&__for_begin);
          v56 = v55;
          if ( *(_BYTE *)(((unsigned __int64)v55 >> 3) + 0x7FFF8000) != 0
            && (char)(((unsigned __int8)v55 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)v55 >> 3) + 0x7FFF8000) )
          {
            __asan_report_load4(v55);
          }
          *(_DWORD *)(v4 + 64) = *v56;
          ServiceBox::findService<GameserverService>();
          GameserverService::getConfig((GameserverService *const)(v4 + 208));
          v57 = std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 208));
          *(_DWORD *)(v4 + 80) = LuaConfigMgr::getSceneIdByGroupId(
                                   &v57->design_config.lua_config_mgr,
                                   *(_DWORD *)(v4 + 64));
          std::shared_ptr<Config>::~shared_ptr((std::shared_ptr<Config> *const)(v4 + 208));
          PlayerSceneComp::findWorldOrPersistentDungeonScenePtr(
            (const PlayerSceneComp *const)(v4 + 240),
            (uint32_t)this,
            *(_DWORD *)(v4 + 80));
          if ( std::operator==<Scene>(0LL, (const std::shared_ptr<Scene> *)(v4 + 240)) )
          {
            common::milog::MiLogStream::create(
              &v93,
              &common::milog::MiLogDefault::default_log_obj_,
              1u,
              "./src/scene/player_scene_comp.cpp",
              "changeToTargetLevelTag",
              5925);
            v58 = common::milog::MiLogStream::operator<<<char [56],(char *[56])0>(
                    &v93,
                    (const char (*)[56])"findWorldOrPersistentDungeonScenePtr failed, scene_id: ");
            common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v58, (const unsigned int *)(v4 + 80));
            common::milog::MiLogStream::~MiLogStream(&v93);
          }
          else
          {
            v59 = std::map<std::shared_ptr<Scene>,std::vector<unsigned int>>::operator[](
                    (std::map<std::shared_ptr<Scene>,std::vector<unsigned int>> *const)(v4 + 336),
                    (const std::map<std::shared_ptr<Scene>,std::vector<unsigned int>>::key_type *)(v4 + 240));
            std::vector<unsigned int>::push_back(v59, (const std::vector<unsigned int>::value_type *)(v4 + 64));
          }
          std::shared_ptr<Scene>::~shared_ptr((std::shared_ptr<Scene> *const)(v4 + 240));
          __gnu_cxx::__normal_iterator<unsigned int const*,std::vector<unsigned int>>::operator++((__gnu_cxx::__normal_iterator<unsigned int const*,std::vector<unsigned int> > *const)&__for_begin);
        }
        __for_range_2 = (std::map<std::shared_ptr<Scene>,std::vector<unsigned int>> *)(v4 + 336);
        __for_begin_1._M_node = std::map<std::shared_ptr<Scene>,std::vector<unsigned int>>::begin((std::map<std::shared_ptr<Scene>,std::vector<unsigned int>> *const)(v4 + 336))._M_node;
        __for_end_0._M_node = std::map<std::shared_ptr<Scene>,std::vector<unsigned int>>::end(__for_range_2)._M_node;
        while ( std::operator!=(&__for_begin_1, &__for_end_0) )
        {
          __in = std::_Rb_tree_iterator<std::pair<std::shared_ptr<Scene> const,std::vector<unsigned int>>>::operator*(&__for_begin_1);
          scene_ptr = std::get<0ul,std::shared_ptr<Scene> const,std::vector<unsigned int>>(__in);
          group_vec = std::get<1ul,std::shared_ptr<Scene> const,std::vector<unsigned int>>(__in);
          if ( std::operator!=<Scene>(0LL, scene_ptr) )
          {
            __for_range_3 = group_vec;
            __for_begin._M_current = std::vector<unsigned int>::begin(group_vec)._M_current;
            __for_end._M_cur = (std::__detail::_Node_iterator_base<std::pair<unsigned int const,std::pair<std::vector<unsigned int>,std::vector<unsigned int> > >,false>::__node_type *)std::vector<unsigned int>::end(__for_range_3)._M_current;
            while ( __gnu_cxx::operator!=<unsigned int *,std::vector<unsigned int>>(
                      &__for_begin,
                      (const __gnu_cxx::__normal_iterator<unsigned int*,std::vector<unsigned int> > *)&__for_end) )
            {
              v60 = __gnu_cxx::__normal_iterator<unsigned int *,std::vector<unsigned int>>::operator*(&__for_begin);
              if ( *(_BYTE *)(((unsigned __int64)v60 >> 3) + 0x7FFF8000) != 0
                && (char)(((unsigned __int8)v60 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)v60 >> 3) + 0x7FFF8000) )
              {
                __asan_report_load4(v60);
              }
              v61 = std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false> *const)scene_ptr);
              BlockGroupComp = (unsigned int)Scene::getBlockGroupComp(v61);
              SceneBlockGroupComp::getActiveGroup((SceneBlockGroupComp *const)(v4 + 240), BlockGroupComp);
              if ( std::operator!=<Group>(0LL, (const std::shared_ptr<Group> *)(v4 + 240)) )
              {
                v63 = std::__shared_ptr_access<Group,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Group,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 240));
                Group::handleEvent(v63, (EventPtr *)(v4 + 176));
              }
              std::shared_ptr<Group>::~shared_ptr((std::shared_ptr<Group> *const)(v4 + 240));
              __gnu_cxx::__normal_iterator<unsigned int *,std::vector<unsigned int>>::operator++(&__for_begin);
            }
          }
          std::_Rb_tree_iterator<std::pair<std::shared_ptr<Scene> const,std::vector<unsigned int>>>::operator++(&__for_begin_1);
        }
        common::tools::perf::make_shared<ChangeLevelTagEvent,unsigned int &,unsigned int &>(
          (unsigned int *)(v4 + 208),
          (unsigned int *)(v4 + 96),
          (unsigned int *)(v4 + 48),
          (unsigned int *)(v4 + 96));
        if ( std::operator==<ChangeLevelTagEvent>(0LL, (const std::shared_ptr<ChangeLevelTagEvent> *)(v4 + 208)) )
        {
          common::milog::MiLogStream::create(
            &v93,
            &common::milog::MiLogDefault::default_log_obj_,
            3u,
            "./src/scene/player_scene_comp.cpp",
            "changeToTargetLevelTag",
            5948);
          common::milog::MiLogStream::operator<<<char [28],(char *[28])0>(
            &v93,
            (const char (*)[28])"player_event_ptr is nullptr");
          common::milog::MiLogStream::~MiLogStream(&v93);
        }
        else
        {
          if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
            __asan_report_load8();
          EventComp = Player::getEventComp(this->player_);
          std::shared_ptr<BaseEvent>::shared_ptr<ChangeLevelTagEvent,void>(
            (std::shared_ptr<BaseEvent> *const)(v4 + 240),
            (const std::shared_ptr<ChangeLevelTagEvent> *)(v4 + 208));
          PlayerEventComp::notifyEvent(EventComp, (BaseEventPtr *)(v4 + 240));
          std::shared_ptr<BaseEvent>::~shared_ptr((std::shared_ptr<BaseEvent> *const)(v4 + 240));
        }
        PlayerSceneComp::broadcastLevelTagData(this);
        common::milog::MiLogStream::create(
          &v93,
          &common::milog::MiLogDefault::default_log_obj_,
          1u,
          "./src/scene/player_scene_comp.cpp",
          "changeToTargetLevelTag",
          5956);
        v65 = common::milog::MiLogStream::operator<<<char [30],(char *[30])0>(
                &v93,
                (const char (*)[30])"changeToTargetLevelTag, uid: ");
        if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
          __asan_report_load8();
        *(_DWORD *)(v4 + 64) = Player::getUid(this->player_);
        v66 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                v65,
                (const unsigned int *)(v4 + 64));
        v67 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                v66,
                (const char (*)[16])" level_tag_id: ");
        v68 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                v67,
                (const unsigned int *)(v4 + 96));
        v69 = common::milog::MiLogStream::operator<<<char [13],(char *[13])0>(v68, (const char (*)[13])" cost_time: ");
        *(_DWORD *)(v4 + 80) = common::tools::TimeUtils::Timer::time((const common::tools::TimeUtils::Timer *const)(v4 + 144));
        common::milog::MiLogStream::operator<<<int,(int *)0>(v69, (const int *)(v4 + 80));
        common::milog::MiLogStream::~MiLogStream(&v93);
        v10 = 0;
        std::shared_ptr<ChangeLevelTagEvent>::~shared_ptr((std::shared_ptr<ChangeLevelTagEvent> *const)(v4 + 208));
        std::map<std::shared_ptr<Scene>,std::vector<unsigned int>>::~map((std::map<std::shared_ptr<Scene>,std::vector<unsigned int>> *const)(v4 + 336));
        std::shared_ptr<Event>::~shared_ptr((std::shared_ptr<Event> *const)(v4 + 176));
      }
    }
    std::vector<unsigned int>::~vector((std::vector<unsigned int> *const)(v4 + 272));
  }
  else
  {
    common::milog::MiLogStream::create(
      &v93,
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/scene/player_scene_comp.cpp",
      "changeToTargetLevelTag",
      5819);
    v7 = common::milog::MiLogStream::operator<<<char [38],(char *[38])0>(
           &v93,
           (const char (*)[38])"findLevelTagExcelConfig failed, uid: ");
    if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
      __asan_report_load8();
    *(_DWORD *)(v4 + 80) = Player::getUid(this->player_);
    v8 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v7, (const unsigned int *)(v4 + 80));
    v9 = common::milog::MiLogStream::operator<<<char [17],(char *[17])0>(v8, (const char (*)[17])" ,level_tag_id: ");
    common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v9, (const unsigned int *)(v4 + 96));
    common::milog::MiLogStream::~MiLogStream(&v93);
    v10 = -1;
  }
  common::tools::TimeUtils::Timer::~Timer((common::tools::TimeUtils::Timer *const)(v4 + 144));
  result = v10;
  if ( v94 == (char *)v4 )
  {
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8008) = 0LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8010) = 0LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8018) = 0LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8020) = 0LL;
    *(_DWORD *)((v4 >> 3) + 0x7FFF8028) = 0;
    *(_DWORD *)((v4 >> 3) + 0x7FFF8030) = 0;
  }
  else
  {
    *(_QWORD *)v4 = 1172321806LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8020) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8028) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v4 >> 3) + 0x7FFF8030) = -168430091;
  }
  return result;
};

// Line 5963: range 0000000013E78030-0000000013E784EE
bool __cdecl PlayerSceneComp::isLevelTagChangeInCD(PlayerSceneComp *const this, uint32_t level_tag_id)
{
  unsigned __int64 v2; // rbx
  __int64 v3; // rax
  _DWORD *v4; // r12
  common::milog::MiLogStream *v5; // rax
  bool result; // al
  std::_Rb_tree_iterator<std::pair<unsigned int const,unsigned int> >::pointer v7; // rdx
  unsigned int *p_second; // rax
  unsigned int second; // ecx
  uint32_t now; // [rsp+14h] [rbp-CCh]
  std::_Rb_tree_iterator<std::pair<unsigned int const,unsigned int> >::_Self __y; // [rsp+18h] [rbp-C8h] BYREF
  const LevelTagExcelConfigMgr *level_tag_config_mgr; // [rsp+20h] [rbp-C0h]
  const data::LevelTagGroupsExcelConfig *series_config_ptr; // [rsp+28h] [rbp-B8h]
  std::shared_ptr<Config> v14; // [rsp+30h] [rbp-B0h] BYREF
  common::milog::MiLogStream v15; // [rsp+40h] [rbp-A0h] BYREF
  char v16[128]; // [rsp+60h] [rbp-80h] BYREF

  v2 = (unsigned __int64)v16;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_1(96LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "2 48 4 14 series_id:5965 64 8 9 iter:5983";
  *(_QWORD *)(v2 + 16) = PlayerSceneComp::isLevelTagChangeInCD;
  v4 = (_DWORD *)(v2 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = -234556943;
  v4[536862722] = -202116352;
  ServiceBox::findService<GameserverService>();
  GameserverService::getConfig((GameserverService *const)&v14);
  level_tag_config_mgr = &std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false> *const)&v14)->design_config.txt_config_mgr.level_tag_config_mgr;
  std::shared_ptr<Config>::~shared_ptr(&v14);
  *(_DWORD *)(v2 + 48) = LevelTagExcelConfigMgr::getLevelTagSeriesId(level_tag_config_mgr, level_tag_id);
  series_config_ptr = data::LevelTagExcelConfigMgrBase::findLevelTagGroupsExcelConfig(
                        level_tag_config_mgr,
                        *(_DWORD *)(v2 + 48));
  if ( series_config_ptr )
  {
    now = common::tools::TimeUtils::getNow();
    if ( *(_BYTE *)(((unsigned __int64)&this->level_tag_info_.record_change_time >> 3) + 0x7FFF8000) != 0
      && *(_BYTE *)(((unsigned __int64)&this->level_tag_info_.record_change_time >> 3) + 0x7FFF8000) <= 3 )
    {
      __asan_report_load4(&this->level_tag_info_.record_change_time);
    }
    if ( !this->level_tag_info_.record_change_time || now > this->level_tag_info_.record_change_time + 10 )
      goto LABEL_14;
    if ( *(_BYTE *)(((unsigned __int64)&this->level_tag_info_.record_change_count >> 3) + 0x7FFF8000) != 0
      && (char)((((_BYTE)this + 68) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&this->level_tag_info_.record_change_count >> 3)
                                                          + 0x7FFF8000) )
    {
      __asan_report_load4(&this->level_tag_info_.record_change_count);
    }
    if ( this->level_tag_info_.record_change_count > 4 )
    {
      common::milog::MiLogStream::create(
        &v15,
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/scene/player_scene_comp.cpp",
        "isLevelTagChangeInCD",
        5979);
      common::milog::MiLogStream::operator<<<char [23],(char *[23])0>(
        &v15,
        (const char (*)[23])"level tag change in cd");
      common::milog::MiLogStream::~MiLogStream(&v15);
      result = 1;
    }
    else
    {
LABEL_14:
      *(std::map<unsigned int,unsigned int>::iterator *)(v2 + 64) = std::map<unsigned int,unsigned int>::find(
                                                                      &this->level_tag_info_.series_change_map,
                                                                      (const std::map<unsigned int,unsigned int>::key_type *)(v2 + 48));
      __y._M_node = std::map<unsigned int,unsigned int>::end(&this->level_tag_info_.series_change_map)._M_node;
      if ( !std::operator!=(
              (const std::_Rb_tree_iterator<std::pair<unsigned int const,unsigned int> >::_Self *)(v2 + 64),
              &__y) )
        goto LABEL_21;
      v7 = std::_Rb_tree_iterator<std::pair<unsigned int const,unsigned int>>::operator->((const std::_Rb_tree_iterator<std::pair<unsigned int const,unsigned int> > *const)(v2 + 64));
      p_second = &v7->second;
      if ( *(_BYTE *)(((unsigned __int64)p_second >> 3) + 0x7FFF8000) != 0
        && (char)(((unsigned __int8)p_second & 7) + 3) >= *(_BYTE *)(((unsigned __int64)p_second >> 3) + 0x7FFF8000) )
      {
        __asan_report_load4(p_second);
      }
      second = v7->second;
      if ( *(_BYTE *)(((unsigned __int64)&series_config_ptr->change_cd >> 3) + 0x7FFF8000) != 0
        && *(_BYTE *)(((unsigned __int64)&series_config_ptr->change_cd >> 3) + 0x7FFF8000) <= 3 )
      {
        __asan_report_load4(&series_config_ptr->change_cd);
      }
      if ( now < second + series_config_ptr->change_cd )
      {
        common::milog::MiLogStream::create(
          &v15,
          &common::milog::MiLogDefault::default_log_obj_,
          3u,
          "./src/scene/player_scene_comp.cpp",
          "isLevelTagChangeInCD",
          5989);
        common::milog::MiLogStream::operator<<<char [23],(char *[23])0>(
          &v15,
          (const char (*)[23])"level tag change in cd");
        common::milog::MiLogStream::~MiLogStream(&v15);
        result = 1;
      }
      else
      {
LABEL_21:
        result = 0;
      }
    }
  }
  else
  {
    common::milog::MiLogStream::create(
      &v15,
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/scene/player_scene_comp.cpp",
      "isLevelTagChangeInCD",
      5969);
    v5 = common::milog::MiLogStream::operator<<<char [50],(char *[50])0>(
           &v15,
           (const char (*)[50])"findLevelTagGroupsExcelConfig failed, series_id: ");
    common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v5, (const unsigned int *)(v2 + 48));
    common::milog::MiLogStream::~MiLogStream(&v15);
    result = 1;
  }
  if ( v16 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8008) = 0;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8008) = -168430091;
  }
  return result;
};

// Line 5998: range 0000000013E784F0-0000000013E78995
std::vector<unsigned int> *__cdecl PlayerSceneComp::getCurLevelTagIdVec(
        std::vector<unsigned int> *retstr,
        PlayerSceneComp *const this)
{
  unsigned __int64 v2; // r12
  __int64 v3; // rax
  _DWORD *v4; // r13
  __int64 p_level_tag_info; // rsi
  __gnu_cxx::__normal_iterator<unsigned int*,std::vector<unsigned int> >::reference v6; // rax
  _DWORD *v7; // rdx
  std::pair<std::_Rb_tree_const_iterator<std::pair<unsigned int,unsigned int> >,bool> v8; // rax
  common::milog::MiLogStream *v9; // rax
  std::_Rb_tree_const_iterator<unsigned int>::reference v10; // rax
  _DWORD *v11; // rdx
  std::vector<unsigned int>::iterator __for_begin; // [rsp+18h] [rbp-108h] BYREF
  std::vector<unsigned int>::iterator __for_end; // [rsp+20h] [rbp-100h] BYREF
  const LevelTagExcelConfigMgr *level_tag_config_mgr; // [rsp+28h] [rbp-F8h]
  std::vector<unsigned int> *__for_range; // [rsp+30h] [rbp-F0h]
  const std::set<unsigned int> *initial_set; // [rsp+38h] [rbp-E8h]
  const std::set<unsigned int> *__for_range_0; // [rsp+40h] [rbp-E0h]
  std::pair<unsigned int,unsigned int> __args_0; // [rsp+48h] [rbp-D8h] BYREF
  std::shared_ptr<Config> v20; // [rsp+50h] [rbp-D0h] BYREF
  common::milog::MiLogStream v21; // [rsp+60h] [rbp-C0h] BYREF
  char v22[160]; // [rsp+80h] [rbp-A0h] BYREF

  v2 = (unsigned __int64)v22;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_1(128LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "2 32 4 15 initial_id:6012 48 48 21 series_group_set:6002";
  *(_QWORD *)(v2 + 16) = PlayerSceneComp::getCurLevelTagIdVec;
  v4 = (_DWORD *)(v2 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = 61956;
  v4[536862723] = -202116109;
  ServiceBox::findService<GameserverService>();
  GameserverService::getConfig((GameserverService *const)&v20);
  level_tag_config_mgr = &std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false> *const)&v20)->design_config.txt_config_mgr.level_tag_config_mgr;
  std::shared_ptr<Config>::~shared_ptr(&v20);
  p_level_tag_info = (__int64)&this->level_tag_info_;
  if ( *(char *)(((unsigned __int64)retstr >> 3) + 0x7FFF8000) < 0
    || *(_BYTE *)((((unsigned __int64)&retstr->_M_impl._M_end_of_storage + 7) >> 3) + 0x7FFF8000) != 0
    && (((unsigned __int8)retstr + 23) & 7) >= *(_BYTE *)((((unsigned __int64)&retstr->_M_impl._M_end_of_storage + 7) >> 3)
                                                        + 0x7FFF8000) )
  {
    p_level_tag_info = 24LL;
    __asan_report_store_n(retstr, 24LL);
  }
  common::tools::MiscUtils::getAllMapKeys<std::map<unsigned int,unsigned int>>(
    retstr,
    (const std::map<unsigned int,unsigned int> *)p_level_tag_info);
  std::set<std::pair<unsigned int,unsigned int>>::set((std::set<std::pair<unsigned int,unsigned int>> *const)(v2 + 48));
  __for_range = retstr;
  __for_begin._M_current = std::vector<unsigned int>::begin(retstr)._M_current;
  __for_end._M_current = std::vector<unsigned int>::end(retstr)._M_current;
  while ( __gnu_cxx::operator!=<unsigned int *,std::vector<unsigned int>>(&__for_begin, &__for_end) )
  {
    v6 = __gnu_cxx::__normal_iterator<unsigned int *,std::vector<unsigned int>>::operator*(&__for_begin);
    v7 = v6;
    if ( *(_BYTE *)(((unsigned __int64)v6 >> 3) + 0x7FFF8000) != 0
      && (char)(((unsigned __int8)v6 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)v6 >> 3) + 0x7FFF8000) )
    {
      __asan_report_load4(v6);
    }
    *(_DWORD *)(v2 + 32) = *v7;
    __args_0 = LevelTagExcelConfigMgr::getLevelTagSeriesGroupPair(level_tag_config_mgr, *(_DWORD *)(v2 + 32));
    v8 = std::set<std::pair<unsigned int,unsigned int>>::emplace<std::pair<unsigned int,unsigned int>>(
           (std::set<std::pair<unsigned int,unsigned int>> *const)(v2 + 48),
           &__args_0,
           &__args_0);
    if ( !v8.second )
    {
      common::milog::MiLogStream::create(
        &v21,
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/scene/player_scene_comp.cpp",
        "getCurLevelTagIdVec",
        6007);
      v9 = common::milog::MiLogStream::operator<<<char [40],(char *[40])0>(
             &v21,
             (const char (*)[40])"series-group duplicated, level_tag_id: ");
      common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v9, (const unsigned int *)(v2 + 32));
      common::milog::MiLogStream::~MiLogStream(&v21);
    }
    __gnu_cxx::__normal_iterator<unsigned int *,std::vector<unsigned int>>::operator++(&__for_begin);
  }
  initial_set = LevelTagExcelConfigMgr::getInitialLevelTagIdSet(level_tag_config_mgr);
  __for_range_0 = initial_set;
  __for_begin._M_current = (unsigned int *)std::set<unsigned int>::begin(initial_set)._M_node;
  __for_end._M_current = (unsigned int *)std::set<unsigned int>::end(__for_range_0)._M_node;
  while ( std::operator!=(
            (const std::_Rb_tree_const_iterator<unsigned int>::_Self *)&__for_begin,
            (const std::_Rb_tree_const_iterator<unsigned int>::_Self *)&__for_end) )
  {
    v10 = std::_Rb_tree_const_iterator<unsigned int>::operator*((const std::_Rb_tree_const_iterator<unsigned int> *const)&__for_begin);
    v11 = v10;
    if ( *(_BYTE *)(((unsigned __int64)v10 >> 3) + 0x7FFF8000) != 0
      && (char)(((unsigned __int8)v10 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)v10 >> 3) + 0x7FFF8000) )
    {
      __asan_report_load4(v10);
    }
    *(_DWORD *)(v2 + 32) = *v11;
    __args_0 = LevelTagExcelConfigMgr::getLevelTagSeriesGroupPair(level_tag_config_mgr, *(_DWORD *)(v2 + 32));
    if ( !common::tools::MiscUtils::isContains<std::set<std::pair<unsigned int,unsigned int>>,std::pair<unsigned int,unsigned int>>(
            (std::set<std::pair<unsigned int,unsigned int>> *)(v2 + 48),
            &__args_0) )
      std::vector<unsigned int>::push_back(retstr, (const std::vector<unsigned int>::value_type *)(v2 + 32));
    std::_Rb_tree_const_iterator<unsigned int>::operator++((std::_Rb_tree_const_iterator<unsigned int> *const)&__for_begin);
  }
  std::set<std::pair<unsigned int,unsigned int>>::~set((std::set<std::pair<unsigned int,unsigned int>> *const)(v2 + 48));
  if ( v22 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF800C) = 0;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return retstr;
};

// Line 6023: range 0000000013E78996-0000000013E78DAB
std::vector<unsigned int> *__fastcall PlayerSceneComp::getCurLevelTagIdVecBySeriesId(
        std::vector<unsigned int> *retstr,
        PlayerSceneComp *const this,
        uint32_t series_id)
{
  unsigned __int64 v3; // r12
  __int64 v4; // rax
  _DWORD *v5; // r13
  std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v6; // rax
  bool v7; // r14
  common::milog::MiLogStream *v8; // r14
  common::milog::MiLogStream *v9; // rax
  common::milog::MiLogStream *v10; // rax
  __gnu_cxx::__normal_iterator<unsigned int*,std::vector<unsigned int> >::reference v11; // rax
  _DWORD *v12; // rdx
  std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v13; // rax
  bool v14; // r14
  std::vector<unsigned int>::iterator __for_begin; // [rsp+28h] [rbp-F8h] BYREF
  std::vector<unsigned int>::iterator __for_end; // [rsp+30h] [rbp-F0h] BYREF
  std::vector<unsigned int> *__for_range; // [rsp+38h] [rbp-E8h]
  std::shared_ptr<Config> v20; // [rsp+40h] [rbp-E0h] BYREF
  common::milog::MiLogStream v21; // [rsp+50h] [rbp-D0h] BYREF
  char v22[176]; // [rsp+70h] [rbp-B0h] BYREF

  v3 = (unsigned __int64)v22;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_1(128LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "3 32 4 17 level_tag_id:6032 48 4 14 series_id:6022 64 24 21 level_tag_id_vec:6031";
  *(_QWORD *)(v3 + 16) = PlayerSceneComp::getCurLevelTagIdVecBySeriesId;
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = -234556924;
  v5[536862722] = -218103808;
  v5[536862723] = -202116109;
  *(_DWORD *)(v3 + 48) = series_id;
  std::vector<unsigned int>::vector(retstr);
  ServiceBox::findService<GameserverService>();
  GameserverService::getConfig((GameserverService *const)&v20);
  v6 = std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false> *const)&v20);
  v7 = data::LevelTagExcelConfigMgrBase::findLevelTagGroupsExcelConfig(
         &v6->design_config.txt_config_mgr.level_tag_config_mgr,
         *(_DWORD *)(v3 + 48)) == 0LL;
  std::shared_ptr<Config>::~shared_ptr(&v20);
  if ( v7 )
  {
    common::milog::MiLogStream::create(
      &v21,
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/scene/player_scene_comp.cpp",
      "getCurLevelTagIdVecBySeriesId",
      6027);
    v8 = common::milog::MiLogStream::operator<<<char [44],(char *[44])0>(
           &v21,
           (const char (*)[44])"findLevelTagGroupsExcelConfig failed, uid: ");
    if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
      __asan_report_load8();
    *(_DWORD *)(v3 + 32) = Player::getUid(this->player_);
    v9 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v8, (const unsigned int *)(v3 + 32));
    v10 = common::milog::MiLogStream::operator<<<char [14],(char *[14])0>(v9, (const char (*)[14])" ,series_id: ");
    common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v10, (const unsigned int *)(v3 + 48));
    common::milog::MiLogStream::~MiLogStream(&v21);
  }
  else
  {
    PlayerSceneComp::getCurLevelTagIdVec((std::vector<unsigned int> *)(v3 + 64), this);
    __for_range = (std::vector<unsigned int> *)(v3 + 64);
    __for_begin._M_current = std::vector<unsigned int>::begin((std::vector<unsigned int> *const)(v3 + 64))._M_current;
    __for_end._M_current = std::vector<unsigned int>::end((std::vector<unsigned int> *const)(v3 + 64))._M_current;
    while ( __gnu_cxx::operator!=<unsigned int *,std::vector<unsigned int>>(&__for_begin, &__for_end) )
    {
      v11 = __gnu_cxx::__normal_iterator<unsigned int *,std::vector<unsigned int>>::operator*(&__for_begin);
      v12 = v11;
      if ( *(_BYTE *)(((unsigned __int64)v11 >> 3) + 0x7FFF8000) != 0
        && (char)(((unsigned __int8)v11 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)v11 >> 3) + 0x7FFF8000) )
      {
        __asan_report_load4(v11);
      }
      *(_DWORD *)(v3 + 32) = *v12;
      ServiceBox::findService<GameserverService>();
      GameserverService::getConfig((GameserverService *const)&v20);
      v13 = std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false> *const)&v20);
      v14 = LevelTagExcelConfigMgr::getLevelTagSeriesId(
              &v13->design_config.txt_config_mgr.level_tag_config_mgr,
              *(_DWORD *)(v3 + 32)) == *(_DWORD *)(v3 + 48);
      std::shared_ptr<Config>::~shared_ptr(&v20);
      if ( v14 )
        std::vector<unsigned int>::push_back(retstr, (const std::vector<unsigned int>::value_type *)(v3 + 32));
      __gnu_cxx::__normal_iterator<unsigned int *,std::vector<unsigned int>>::operator++(&__for_begin);
    }
    std::vector<unsigned int>::~vector((std::vector<unsigned int> *const)(v3 + 64));
  }
  if ( v22 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return retstr;
};

// Line 6044: range 0000000013E78DAC-0000000013E78EEF
void __cdecl PlayerSceneComp::fillLevelTagDataNotify(PlayerSceneComp *const this, proto::LevelTagDataNotify *notify)
{
  unsigned __int64 v2; // rbx
  __int64 v3; // rax
  _DWORD *v4; // r12
  google::protobuf::RepeatedField<unsigned int> *v5; // rax
  char v6[128]; // [rsp+10h] [rbp-80h] BYREF

  v2 = (unsigned __int64)v6;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_1(96LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "1 32 24 21 level_tag_id_vec:6045";
  *(_QWORD *)(v2 + 16) = PlayerSceneComp::fillLevelTagDataNotify;
  v4 = (_DWORD *)(v2 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = -218103808;
  v4[536862722] = -202116109;
  PlayerSceneComp::getCurLevelTagIdVec((std::vector<unsigned int> *)(v2 + 32), this);
  v5 = proto::LevelTagDataNotify::mutable_level_tag_id_list(notify);
  common::tools::MiscUtils::vectorToRepeated<unsigned int,unsigned int>(
    (const std::vector<unsigned int> *)(v2 + 32),
    v5);
  std::vector<unsigned int>::~vector((std::vector<unsigned int> *const)(v2 + 32));
  if ( v6 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8008) = 0;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8008) = -168430091;
  }
};

// Line 6050: range 0000000013E78EF0-0000000013E79269
void __cdecl PlayerSceneComp::resetLevelTagSeriesIdVec(
        PlayerSceneComp *const this,
        const std::vector<unsigned int> *series_id_vec)
{
  unsigned __int64 v2; // rbx
  __int64 v3; // rax
  _DWORD *v4; // r13
  unsigned int *v5; // rax
  unsigned int *v6; // rdx
  __gnu_cxx::__normal_iterator<unsigned int*,std::vector<unsigned int> >::reference v7; // rax
  _DWORD *v8; // rdx
  unsigned int series_id; // [rsp+14h] [rbp-ECh]
  std::vector<unsigned int>::const_iterator __for_begin; // [rsp+18h] [rbp-E8h] BYREF
  std::vector<unsigned int>::const_iterator __for_end; // [rsp+20h] [rbp-E0h] BYREF
  std::vector<unsigned int>::iterator __for_begin_0; // [rsp+28h] [rbp-D8h] BYREF
  std::vector<unsigned int>::iterator __for_end_0; // [rsp+30h] [rbp-D0h] BYREF
  const LevelTagExcelConfigMgr *level_tag_config_mgr; // [rsp+38h] [rbp-C8h]
  const std::vector<unsigned int> *__for_range; // [rsp+40h] [rbp-C0h]
  std::vector<unsigned int> *__for_range_0; // [rsp+48h] [rbp-B8h]
  std::shared_ptr<Config> v17; // [rsp+50h] [rbp-B0h] BYREF
  char v18[160]; // [rsp+60h] [rbp-A0h] BYREF

  v2 = (unsigned __int64)v18;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_1(128LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "2 48 4 17 level_tag_id:6060 64 24 21 level_tag_id_vec:6059";
  *(_QWORD *)(v2 + 16) = PlayerSceneComp::resetLevelTagSeriesIdVec;
  v4 = (_DWORD *)(v2 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = -234556943;
  v4[536862722] = -218103808;
  v4[536862723] = -202116109;
  if ( !std::vector<unsigned int>::empty(series_id_vec) )
  {
    ServiceBox::findService<GameserverService>();
    GameserverService::getConfig((GameserverService *const)&v17);
    level_tag_config_mgr = &std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false> *const)&v17)->design_config.txt_config_mgr.level_tag_config_mgr;
    std::shared_ptr<Config>::~shared_ptr(&v17);
    __for_range = series_id_vec;
    __for_begin._M_current = std::vector<unsigned int>::begin(series_id_vec)._M_current;
    __for_end._M_current = std::vector<unsigned int>::end(series_id_vec)._M_current;
    while ( __gnu_cxx::operator!=<unsigned int const*,std::vector<unsigned int>>(&__for_begin, &__for_end) )
    {
      v5 = (unsigned int *)__gnu_cxx::__normal_iterator<unsigned int const*,std::vector<unsigned int>>::operator*(&__for_begin);
      v6 = v5;
      if ( *(_BYTE *)(((unsigned __int64)v5 >> 3) + 0x7FFF8000) != 0
        && (char)(((unsigned __int8)v5 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)v5 >> 3) + 0x7FFF8000) )
      {
        __asan_report_load4(v5);
      }
      series_id = *v6;
      common::tools::MiscUtils::getAllMapKeys<std::map<unsigned int,unsigned int>>(
        (std::vector<unsigned int> *)(v2 + 64),
        &this->level_tag_info_.level_tag_change_map);
      __for_range_0 = (std::vector<unsigned int> *)(v2 + 64);
      __for_begin_0._M_current = std::vector<unsigned int>::begin((std::vector<unsigned int> *const)(v2 + 64))._M_current;
      __for_end_0._M_current = std::vector<unsigned int>::end(__for_range_0)._M_current;
      while ( __gnu_cxx::operator!=<unsigned int *,std::vector<unsigned int>>(&__for_begin_0, &__for_end_0) )
      {
        v7 = __gnu_cxx::__normal_iterator<unsigned int *,std::vector<unsigned int>>::operator*(&__for_begin_0);
        v8 = v7;
        if ( *(_BYTE *)(((unsigned __int64)v7 >> 3) + 0x7FFF8000) != 0
          && (char)(((unsigned __int8)v7 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)v7 >> 3) + 0x7FFF8000) )
        {
          __asan_report_load4(v7);
        }
        *(_DWORD *)(v2 + 48) = *v8;
        if ( series_id == LevelTagExcelConfigMgr::getLevelTagSeriesId(level_tag_config_mgr, *(_DWORD *)(v2 + 48)) )
          std::map<unsigned int,unsigned int>::erase(
            &this->level_tag_info_.level_tag_change_map,
            (const std::map<unsigned int,unsigned int>::key_type *)(v2 + 48));
        __gnu_cxx::__normal_iterator<unsigned int *,std::vector<unsigned int>>::operator++(&__for_begin_0);
      }
      std::vector<unsigned int>::~vector((std::vector<unsigned int> *const)(v2 + 64));
      __gnu_cxx::__normal_iterator<unsigned int const*,std::vector<unsigned int>>::operator++(&__for_begin);
    }
    PlayerSceneComp::broadcastLevelTagData(this);
  }
  if ( v18 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
};

// Line 6074: range 0000000013E7926A-0000000013E79ABB
// local variable allocation has failed, the output may be wrong!
void __cdecl PlayerSceneComp::checkAndTestAreaExplorePoints(PlayerSceneComp *const this)
{
  unsigned __int64 v1; // r13
  __int64 v2; // rax
  _DWORD *v3; // r12
  PlayerBasicComp *BasicComp; // rax
  WorldAreaExcelConfigMgr *p_world_area_config_mgr; // rcx
  common::milog::MiLogStream *v6; // rax
  common::milog::MiLogStream *v7; // rax
  common::milog::MiLogStream *v8; // rcx
  common::milog::MiLogStream *v9; // rax
  common::milog::MiLogStream *v10; // rax
  common::milog::MiLogStream *v11; // rcx
  uint32_t v12; // ecx
  common::milog::MiLogStream *v13; // rax
  common::milog::MiLogStream *v14; // rax
  common::milog::MiLogStream *v15; // rax
  common::milog::MiLogStream *v16; // rax
  common::milog::MiLogStream *v17; // rcx
  std::__shared_ptr_access<Area,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v18; // r14
  std::__shared_ptr_access<proto_log::PlayerLogBodyCalcAndRecordAreaExplorePoint,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v19; // rax
  proto_log::AreaExploreLog *v20; // rcx
  Player *v21; // r14
  std::string v22; // [rsp+0h] [rbp-130h] OVERLAPPED BYREF
  const std::map<unsigned int,std::map<unsigned int,std::map<unsigned int,std::map<unsigned int,unsigned int>>>> *__for_range; // [rsp+20h] [rbp-110h]
  const std::pair<unsigned int const,std::map<unsigned int,std::map<unsigned int,std::map<unsigned int,unsigned int>>> > *v24; // [rsp+28h] [rbp-108h]
  std::tuple_element<0,const std::pair<unsigned int const,std::map<unsigned int,std::map<unsigned int,std::map<unsigned int,unsigned int>>> > >::type *area_id; // [rsp+30h] [rbp-100h]
  std::tuple_element<1,const std::pair<unsigned int const,std::map<unsigned int,std::map<unsigned int,std::map<unsigned int,unsigned int>>> > >::type *_; // [rsp+38h] [rbp-F8h]
  std::string v27; // [rsp+40h] [rbp-F0h] BYREF
  char v28[208]; // [rsp+60h] [rbp-D0h] BYREF

  v22._M_string_length = (std::string::size_type)this;
  v1 = (unsigned __int64)v28;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_2(160LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "5 32 1 11 holder:6075 48 4 13 scene_id:6079 64 16 12 log_ptr:6076 96 16 14 scene_ptr:6085 128 16"
                        " 13 area_ptr:6091";
  *(_QWORD *)(v1 + 16) = PlayerSceneComp::checkAndTestAreaExplorePoints;
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234556927;
  v3[536862722] = -219021312;
  v3[536862723] = -219021312;
  v3[536862724] = -202178560;
  if ( *(_BYTE *)(((v22._M_string_length + 24) >> 3) + 0x7FFF8000) )
    __asan_report_load8();
  BasicComp = Player::getBasicComp(*(Player *const *)(v22._M_string_length + 24));
  PlayerBasicComp::getNextTransNo[abi:cxx11](&v27, BasicComp);
  StatLogUtils::ContextHolder::ContextHolder((StatLogUtils::ContextHolder *const)(v1 + 32), 0x3F4u, v22);
  std::string::~string(&v27);
  common::tools::perf::make_shared<proto_log::PlayerLogBodyCalcAndRecordAreaExplorePoint>();
  ServiceBox::findService<GameserverService>();
  GameserverService::getConfig((GameserverService *const)(v1 + 128));
  __for_range = &std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v1 + 128))->design_config.txt_config_mgr.world_area_config_mgr.area_to_explorable_gadgets_map;
  std::shared_ptr<Config>::~shared_ptr((std::shared_ptr<Config> *const)(v1 + 128));
  *(std::map<unsigned int,std::map<unsigned int,std::map<unsigned int,std::map<unsigned int,unsigned int>>>>::const_iterator *)v22._anon_0._M_local_buf = std::map<unsigned int,std::map<unsigned int,std::map<unsigned int,std::map<unsigned int,unsigned int>>>>::begin(__for_range);
  *((std::map<unsigned int,std::map<unsigned int,std::map<unsigned int,std::map<unsigned int,unsigned int>>>>::const_iterator *)&v22._anon_0._M_allocated_capacity
  + 1) = std::map<unsigned int,std::map<unsigned int,std::map<unsigned int,std::map<unsigned int,unsigned int>>>>::end(__for_range);
  while ( std::operator!=(
            (const std::_Rb_tree_const_iterator<std::pair<unsigned int const,std::map<unsigned int,std::map<unsigned int,std::map<unsigned int,unsigned int>>> > >::_Self *)&v22._anon_0,
            (const std::_Rb_tree_const_iterator<std::pair<unsigned int const,std::map<unsigned int,std::map<unsigned int,std::map<unsigned int,unsigned int>>> > >::_Self *)&v22._anon_0._M_allocated_capacity
          + 1) )
  {
    v24 = std::_Rb_tree_const_iterator<std::pair<unsigned int const,std::map<unsigned int,std::map<unsigned int,std::map<unsigned int,unsigned int>>>>>::operator*((const std::_Rb_tree_const_iterator<std::pair<unsigned int const,std::map<unsigned int,std::map<unsigned int,std::map<unsigned int,unsigned int>>> > > *const)&v22._anon_0);
    area_id = std::get<0ul,unsigned int const,std::map<unsigned int,std::map<unsigned int,std::map<unsigned int,unsigned int>>>>(v24);
    _ = (std::tuple_element<1,const std::pair<unsigned int const,std::map<unsigned int,std::map<unsigned int,std::map<unsigned int,unsigned int>>> > >::type *)std::get<1ul,unsigned int const,std::map<unsigned int,std::map<unsigned int,std::map<unsigned int,unsigned int>>>>(v24);
    ServiceBox::findService<GameserverService>();
    GameserverService::getConfig((GameserverService *const)(v1 + 128));
    p_world_area_config_mgr = &std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v1 + 128))->design_config.txt_config_mgr.world_area_config_mgr;
    if ( *(_BYTE *)(((unsigned __int64)area_id >> 3) + 0x7FFF8000) != 0
      && (char)(((unsigned __int8)area_id & 7) + 3) >= *(_BYTE *)(((unsigned __int64)area_id >> 3) + 0x7FFF8000) )
    {
      __asan_report_load4(area_id);
    }
    *(_DWORD *)(v1 + 48) = WorldAreaExcelConfigMgr::findSceneIdByLevel1AreaId(p_world_area_config_mgr, *area_id);
    std::shared_ptr<Config>::~shared_ptr((std::shared_ptr<Config> *const)(v1 + 128));
    if ( *(_DWORD *)(v1 + 48) )
    {
      PlayerSceneComp::findScene((const PlayerSceneComp *const)(v1 + 96), v22._M_string_length);
      if ( std::operator==<Scene>(0LL, (const std::shared_ptr<Scene> *)(v1 + 96)) )
      {
        common::milog::MiLogStream::create(
          (common::milog::MiLogStream *)&v27,
          &common::milog::MiLogDefault::default_log_obj_,
          1u,
          "./src/scene/player_scene_comp.cpp",
          "checkAndTestAreaExplorePoints",
          6088);
        v9 = common::milog::MiLogStream::operator<<<char [43],(char *[43])0>(
               (common::milog::MiLogStream *const)&v27,
               (const char (*)[43])"findScene fail, skip this scene. scene_id:");
        v10 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                v9,
                (const unsigned int *)(v1 + 48));
        v11 = common::milog::MiLogStream::operator<<<char [9],(char *[9])0>(v10, (const char (*)[9])" player:");
        if ( *(_BYTE *)(((v22._M_string_length + 24) >> 3) + 0x7FFF8000) )
          __asan_report_load8();
        operator<<(v11, *(const Player **)(v22._M_string_length + 24));
        common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)&v27);
      }
      else
      {
        v12 = (unsigned int)std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v1 + 96));
        if ( *(_BYTE *)(((unsigned __int64)area_id >> 3) + 0x7FFF8000) != 0
          && (char)(((unsigned __int8)area_id & 7) + 3) >= *(_BYTE *)(((unsigned __int64)area_id >> 3) + 0x7FFF8000) )
        {
          __asan_report_load4(area_id);
        }
        Scene::findArea((Scene *const)(v1 + 128), v12);
        if ( std::operator==<Area>(0LL, (const std::shared_ptr<Area> *)(v1 + 128)) )
        {
          common::milog::MiLogStream::create(
            (common::milog::MiLogStream *)&v27,
            &common::milog::MiLogDefault::default_log_obj_,
            1u,
            "./src/scene/player_scene_comp.cpp",
            "checkAndTestAreaExplorePoints",
            6094);
          v13 = common::milog::MiLogStream::operator<<<char [40],(char *[40])0>(
                  (common::milog::MiLogStream *const)&v27,
                  (const char (*)[40])"findArea fail, skip this area. area_id:");
          v14 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v13, area_id);
          v15 = common::milog::MiLogStream::operator<<<char [11],(char *[11])0>(v14, (const char (*)[11])" scene_id:");
          v16 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                  v15,
                  (const unsigned int *)(v1 + 48));
          v17 = common::milog::MiLogStream::operator<<<char [9],(char *[9])0>(v16, (const char (*)[9])" player:");
          if ( *(_BYTE *)(((v22._M_string_length + 24) >> 3) + 0x7FFF8000) )
            __asan_report_load8();
          operator<<(v17, *(const Player **)(v22._M_string_length + 24));
          common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)&v27);
        }
        else
        {
          v18 = std::__shared_ptr_access<Area,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Area,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v1 + 128));
          v19 = std::__shared_ptr_access<proto_log::PlayerLogBodyCalcAndRecordAreaExplorePoint,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<proto_log::PlayerLogBodyCalcAndRecordAreaExplorePoint,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v1 + 64));
          v20 = proto_log::PlayerLogBodyCalcAndRecordAreaExplorePoint::add_area_explore_list(v19);
          if ( *(_BYTE *)(((v22._M_string_length + 24) >> 3) + 0x7FFF8000) )
            __asan_report_load8();
          Area::calcTotalExplorePoint(v18, *(Player **)(v22._M_string_length + 24), v20);
        }
        std::shared_ptr<Area>::~shared_ptr((std::shared_ptr<Area> *const)(v1 + 128));
      }
      std::shared_ptr<Scene>::~shared_ptr((std::shared_ptr<Scene> *const)(v1 + 96));
    }
    else
    {
      common::milog::MiLogStream::create(
        (common::milog::MiLogStream *)&v27,
        &common::milog::MiLogDefault::default_log_obj_,
        4u,
        "./src/scene/player_scene_comp.cpp",
        "checkAndTestAreaExplorePoints",
        6082);
      v6 = common::milog::MiLogStream::operator<<<char [41],(char *[41])0>(
             (common::milog::MiLogStream *const)&v27,
             (const char (*)[41])"findSceneIdByLevel1AreaId fail, area_id:");
      v7 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v6, area_id);
      v8 = common::milog::MiLogStream::operator<<<char [9],(char *[9])0>(v7, (const char (*)[9])" player:");
      if ( *(_BYTE *)(((v22._M_string_length + 24) >> 3) + 0x7FFF8000) )
        __asan_report_load8();
      operator<<(v8, *(const Player **)(v22._M_string_length + 24));
      common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)&v27);
    }
    std::_Rb_tree_const_iterator<std::pair<unsigned int const,std::map<unsigned int,std::map<unsigned int,std::map<unsigned int,unsigned int>>>>>::operator++((std::_Rb_tree_const_iterator<std::pair<unsigned int const,std::map<unsigned int,std::map<unsigned int,std::map<unsigned int,unsigned int>>> > > *const)&v22._anon_0);
  }
  if ( *(_BYTE *)(((v22._M_string_length + 24) >> 3) + 0x7FFF8000) )
    __asan_report_load8();
  v21 = *(Player **)(v22._M_string_length + 24);
  std::shared_ptr<google::protobuf::Message>::shared_ptr(
    (std::shared_ptr<google::protobuf::Message> *const)(v1 + 128),
    0LL);
  std::shared_ptr<google::protobuf::Message>::shared_ptr<proto_log::PlayerLogBodyCalcAndRecordAreaExplorePoint,void>(
    (std::shared_ptr<google::protobuf::Message> *const)(v1 + 96),
    (const std::shared_ptr<proto_log::PlayerLogBodyCalcAndRecordAreaExplorePoint> *)(v1 + 64));
  Player::printStatLog(v21, (MessagePtr *)(v1 + 96), (MessagePtr *)(v1 + 128), 0xEu);
  std::shared_ptr<google::protobuf::Message>::~shared_ptr((std::shared_ptr<google::protobuf::Message> *const)(v1 + 96));
  std::shared_ptr<google::protobuf::Message>::~shared_ptr((std::shared_ptr<google::protobuf::Message> *const)(v1 + 128));
  std::shared_ptr<proto_log::PlayerLogBodyCalcAndRecordAreaExplorePoint>::~shared_ptr((std::shared_ptr<proto_log::PlayerLogBodyCalcAndRecordAreaExplorePoint> *const)(v1 + 64));
  StatLogUtils::ContextHolder::~ContextHolder((StatLogUtils::ContextHolder *const)(v1 + 32));
  if ( v28 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0LL;
    *(_DWORD *)((v1 >> 3) + 0x7FFF8010) = 0;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v1 >> 3) + 0x7FFF8010) = -168430091;
  }
};

// Line 6104: range 0000000013E79AE8-0000000013E79C23
void __cdecl PlayerSceneComp::checkAndModifySceneAreaInteractGadgetSet(PlayerSceneComp *const this)
{
  common::milog::MiLogStream *v1; // rbx
  std::__shared_ptr_access<PlayerWorld,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v2; // rbx
  unsigned int val; // [rsp+1Ch] [rbp-34h] BYREF
  common::milog::MiLogStream v4; // [rsp+20h] [rbp-30h] BYREF

  if ( std::operator==<PlayerWorld>(&this->my_player_world_ptr_, 0LL) )
  {
    common::milog::MiLogStream::create(
      &v4,
      &common::milog::MiLogDefault::default_log_obj_,
      4u,
      "./src/scene/player_scene_comp.cpp",
      "checkAndModifySceneAreaInteractGadgetSet",
      6107);
    v1 = common::milog::MiLogStream::operator<<<char [28],(char *[28])0>(
           &v4,
           (const char (*)[28])"world_ptr is nullptr, uid: ");
    if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
      __asan_report_load8();
    val = Player::getUid(this->player_);
    common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v1, &val);
    common::milog::MiLogStream::~MiLogStream(&v4);
  }
  else
  {
    v2 = std::__shared_ptr_access<PlayerWorld,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<PlayerWorld,(__gnu_cxx::_Lock_policy)2,false,false> *const)&this->my_player_world_ptr_);
    std::function<ForeachPolicy ()(Scene &)>::function<PlayerSceneComp::checkAndModifySceneAreaInteractGadgetSet(void)::{lambda(Scene &)#1},void,void>(
      (std::function<ForeachPolicy(Scene&)> *const)&v4,
      0);
    World::foreachScene(v2, (std::function<ForeachPolicy(Scene&)> *)&v4);
    std::function<ForeachPolicy ()(Scene &)>::~function((std::function<ForeachPolicy(Scene&)> *const)&v4);
  }
};

// Line 6110: range 0000000013E79ABC-0000000013E79AE6
ForeachPolicy __cdecl PlayerSceneComp::checkAndModifySceneAreaInteractGadgetSet(void)::{lambda(Scene &)#1}::operator()(
        const PlayerSceneComp::checkAndModifySceneAreaInteractGadgetSet::<lambda(Scene&)> *const __closure,
        Scene *scene)
{
  SceneAreaComp *AreaComp; // rax

  AreaComp = Scene::getAreaComp(scene);
  SceneAreaComp::checkAndModifySceneAreaInteractGadgetSet(AreaComp);
  return 0;
};

// Line 6118: range 0000000013E79C24-0000000013E79DD6
const PlayerSceneComp *__fastcall PlayerSceneComp::getCreatedPersistentDungeonScenePtr(
        const PlayerSceneComp *const this,
        __int64 scene_id,
        int a3)
{
  unsigned __int64 v3; // rbx
  __int64 v4; // rax
  _DWORD *v5; // r12
  std::__detail::_Node_iterator_base<std::pair<unsigned int const,std::weak_ptr<DungeonScene> >,false> __y; // [rsp+28h] [rbp-88h] BYREF
  char v9[128]; // [rsp+30h] [rbp-80h] BYREF

  v3 = (unsigned __int64)v9;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_1(96LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "2 48 4 13 scene_id:6117 64 8 9 iter:6119";
  *(_QWORD *)(v3 + 16) = PlayerSceneComp::getCreatedPersistentDungeonScenePtr;
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = -234556943;
  v5[536862722] = -202116352;
  *(_DWORD *)(v3 + 48) = a3;
  *(std::unordered_map<unsigned int,std::weak_ptr<DungeonScene>>::const_iterator *)(v3 + 64) = std::unordered_map<unsigned int,std::weak_ptr<DungeonScene>>::find(
                                                                                                 (const std::unordered_map<unsigned int,std::weak_ptr<DungeonScene>> *const)(scene_id + 744),
                                                                                                 (const std::unordered_map<unsigned int,std::weak_ptr<DungeonScene>>::key_type *)(v3 + 48));
  __y._M_cur = std::unordered_map<unsigned int,std::weak_ptr<DungeonScene>>::end((const std::unordered_map<unsigned int,std::weak_ptr<DungeonScene>> *const)(scene_id + 744))._M_cur;
  if ( std::__detail::operator==<std::pair<unsigned int const,std::weak_ptr<DungeonScene>>,false>(
         (const std::__detail::_Node_iterator_base<std::pair<unsigned int const,std::weak_ptr<DungeonScene> >,false> *)(v3 + 64),
         &__y) )
  {
    std::shared_ptr<DungeonScene>::shared_ptr((std::shared_ptr<DungeonScene> *const)this, 0LL);
  }
  else
  {
    std::__detail::_Node_const_iterator<std::pair<unsigned int const,std::weak_ptr<DungeonScene>>,false,false>::operator->((const std::__detail::_Node_const_iterator<std::pair<unsigned int const,std::weak_ptr<DungeonScene> >,false,false> *const)(v3 + 64));
    if ( *(_WORD *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
      __asan_report_store16(this, &__y);
    std::weak_ptr<DungeonScene>::lock((const std::weak_ptr<DungeonScene> *const)this);
  }
  if ( v9 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8008) = 0;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8008) = -168430091;
  }
  return this;
};

// Line 6128: range 0000000013E79DD8-0000000013E7A58D
void __cdecl PlayerSceneComp::onCreateDungeonScene(PlayerSceneComp *const this, DungeonScenePtr *p_dungeon_scene_ptr)
{
  unsigned __int64 v2; // rbx
  __int64 v3; // rax
  _DWORD *v4; // r12
  common::milog::MiLogStream *v5; // r13
  std::__shared_ptr_access<DungeonScene,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v6; // rax
  uint32_t PlayerUid; // r14d
  common::milog::MiLogStream *v8; // r13
  common::milog::MiLogStream *v9; // rax
  common::milog::MiLogStream *v10; // r13
  unsigned __int64 v11; // rax
  void (__fastcall **v12)(common::milog::MiLogStream *, unsigned __int64); // rdx
  unsigned __int64 v13; // rax
  unsigned __int64 v14; // rdx
  std::__shared_ptr_access<DungeonScene,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v15; // rax
  common::milog::MiLogStream *v16; // r14
  common::milog::MiLogStream *v17; // rax
  common::milog::MiLogStream *v18; // r14
  unsigned __int64 v19; // rax
  void (__fastcall **v20)(common::milog::MiLogStream *, unsigned __int64); // rdx
  std::weak_ptr<DungeonScene> *v21; // rdx
  common::milog::MiLogStream *v22; // r13
  common::milog::MiLogStream *v23; // rax
  unsigned int val; // [rsp+14h] [rbp-DCh] BYREF
  std::__detail::_Node_iterator_base<std::pair<unsigned int const,std::weak_ptr<DungeonScene> >,false> __y; // [rsp+18h] [rbp-D8h] BYREF
  common::milog::MiLogStream v26; // [rsp+20h] [rbp-D0h] BYREF
  common::milog::MiLogStream v27; // [rsp+40h] [rbp-B0h] BYREF
  char v28[144]; // [rsp+60h] [rbp-90h] BYREF

  v2 = (unsigned __int64)v28;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_1(96LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "2 48 4 13 scene_id:6141 64 8 9 iter:6142";
  *(_QWORD *)(v2 + 16) = PlayerSceneComp::onCreateDungeonScene;
  v4 = (_DWORD *)(v2 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = -234556943;
  v4[536862722] = -202116352;
  if ( std::operator==<DungeonScene>(0LL, p_dungeon_scene_ptr) )
  {
    common::milog::MiLogStream::create(
      &v27,
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/scene/player_scene_comp.cpp",
      "onCreateDungeonScene",
      6131);
    v5 = common::milog::MiLogStream::operator<<<char [70],(char *[70])0>(
           &v27,
           (const char (*)[70])"[PERSISTENT_DUNGEON] onCreateDungeon dungeon_scene_ptr is null, uid: ");
    if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
      __asan_report_load8();
    val = Player::getUid(this->player_);
    common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v5, &val);
    common::milog::MiLogStream::~MiLogStream(&v27);
    goto LABEL_38;
  }
  v6 = std::__shared_ptr_access<DungeonScene,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<DungeonScene,(__gnu_cxx::_Lock_policy)2,false,false> *const)p_dungeon_scene_ptr);
  PlayerUid = DungeonScene::getCreatePlayerUid(v6);
  if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
    __asan_report_load8();
  if ( PlayerUid != Player::getUid(this->player_) )
  {
    common::milog::MiLogStream::create(
      &v26,
      &common::milog::MiLogDefault::default_log_obj_,
      4u,
      "./src/scene/player_scene_comp.cpp",
      "onCreateDungeonScene",
      6136);
    v8 = common::milog::MiLogStream::operator<<<char [27],(char *[27])0>(
           &v26,
           (const char (*)[27])"[PERSISTENT_DUNGEON] uid: ");
    if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
      __asan_report_load8();
    val = Player::getUid(this->player_);
    v9 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v8, &val);
    v10 = common::milog::MiLogStream::operator<<<char [28],(char *[28])0>(v9, (const char (*)[28])off_25189720);
    v11 = (unsigned __int64)std::__shared_ptr_access<DungeonScene,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<DungeonScene,(__gnu_cxx::_Lock_policy)2,false,false> *const)p_dungeon_scene_ptr);
    if ( *(_BYTE *)((v11 >> 3) + 0x7FFF8000) )
      v11 = __asan_report_load8();
    v12 = *(void (__fastcall ***)(common::milog::MiLogStream *, unsigned __int64))v11;
    if ( *(_BYTE *)((*(_QWORD *)v11 >> 3) + 0x7FFF8000LL) )
      v11 = __asan_report_load8();
LABEL_37:
    (*v12)(&v27, v11);
    common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v10, (const std::string *)&v27);
    std::string::~string(&v27);
    common::milog::MiLogStream::~MiLogStream(&v26);
    goto LABEL_38;
  }
  v13 = (unsigned __int64)std::__shared_ptr_access<DungeonScene,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<DungeonScene,(__gnu_cxx::_Lock_policy)2,false,false> *const)p_dungeon_scene_ptr);
  if ( *(_BYTE *)((v13 >> 3) + 0x7FFF8000) )
    v13 = __asan_report_load8();
  v14 = *(_QWORD *)v13 + 504LL;
  if ( *(_BYTE *)((v14 >> 3) + 0x7FFF8000) )
    v13 = __asan_report_load8();
  if ( (*(unsigned __int8 (__fastcall **)(unsigned __int64))v14)(v13) )
  {
    v15 = std::__shared_ptr_access<DungeonScene,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<DungeonScene,(__gnu_cxx::_Lock_policy)2,false,false> *const)p_dungeon_scene_ptr);
    *(_DWORD *)(v2 + 48) = Scene::getSceneId((const Scene *const)v15);
    *(std::unordered_map<unsigned int,std::weak_ptr<DungeonScene>>::iterator *)(v2 + 64) = std::unordered_map<unsigned int,std::weak_ptr<DungeonScene>>::find(
                                                                                             &this->create_persistent_dungeon_scene_map_,
                                                                                             (const std::unordered_map<unsigned int,std::weak_ptr<DungeonScene>>::key_type *)(v2 + 48));
    __y._M_cur = std::unordered_map<unsigned int,std::weak_ptr<DungeonScene>>::end(&this->create_persistent_dungeon_scene_map_)._M_cur;
    if ( std::__detail::operator!=<std::pair<unsigned int const,std::weak_ptr<DungeonScene>>,false>(
           (const std::__detail::_Node_iterator_base<std::pair<unsigned int const,std::weak_ptr<DungeonScene> >,false> *)(v2 + 64),
           &__y) )
    {
      common::milog::MiLogStream::create(
        &v26,
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/scene/player_scene_comp.cpp",
        "onCreateDungeonScene",
        6145);
      v16 = common::milog::MiLogStream::operator<<<char [70],(char *[70])0>(
              &v26,
              (const char (*)[70])"[PERSISTENT_DUNGEON] persistent dungeonscene exist when create. uid: ");
      if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
        __asan_report_load8();
      val = Player::getUid(this->player_);
      v17 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v16, &val);
      v18 = common::milog::MiLogStream::operator<<<char [11],(char *[11])0>(v17, (const char (*)[11])", dungeon:");
      v19 = (unsigned __int64)std::__shared_ptr_access<DungeonScene,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<DungeonScene,(__gnu_cxx::_Lock_policy)2,false,false> *const)p_dungeon_scene_ptr);
      if ( *(_BYTE *)((v19 >> 3) + 0x7FFF8000) )
        v19 = __asan_report_load8();
      v20 = *(void (__fastcall ***)(common::milog::MiLogStream *, unsigned __int64))v19;
      if ( *(_BYTE *)((*(_QWORD *)v19 >> 3) + 0x7FFF8000LL) )
        v19 = __asan_report_load8();
      (*v20)(&v27, v19);
      common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v18, (const std::string *)&v27);
      std::string::~string(&v27);
      common::milog::MiLogStream::~MiLogStream(&v26);
    }
    v21 = std::unordered_map<unsigned int,std::weak_ptr<DungeonScene>>::operator[](
            &this->create_persistent_dungeon_scene_map_,
            (const std::unordered_map<unsigned int,std::weak_ptr<DungeonScene>>::key_type *)(v2 + 48));
    std::weak_ptr<DungeonScene>::operator=<DungeonScene>(v21, p_dungeon_scene_ptr);
    common::milog::MiLogStream::create(
      &v26,
      &common::milog::MiLogDefault::default_log_obj_,
      1u,
      "./src/scene/player_scene_comp.cpp",
      "onCreateDungeonScene",
      6148);
    v22 = common::milog::MiLogStream::operator<<<char [54],(char *[54])0>(
            &v26,
            (const char (*)[54])"[PERSISTENT_DUNGEON] onCreatePersistentDungeon, uid: ");
    if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
      __asan_report_load8();
    val = Player::getUid(this->player_);
    v23 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v22, &val);
    v10 = common::milog::MiLogStream::operator<<<char [11],(char *[11])0>(v23, (const char (*)[11])", dungeon:");
    v11 = (unsigned __int64)std::__shared_ptr_access<DungeonScene,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<DungeonScene,(__gnu_cxx::_Lock_policy)2,false,false> *const)p_dungeon_scene_ptr);
    if ( *(_BYTE *)((v11 >> 3) + 0x7FFF8000) )
      v11 = __asan_report_load8();
    v12 = *(void (__fastcall ***)(common::milog::MiLogStream *, unsigned __int64))v11;
    if ( *(_BYTE *)((*(_QWORD *)v11 >> 3) + 0x7FFF8000LL) )
      v11 = __asan_report_load8();
    goto LABEL_37;
  }
LABEL_38:
  if ( v28 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8008) = 0;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8008) = -168430091;
  }
};

// Line 6153: range 0000000013E7A58E-0000000013E7AE47
void __cdecl PlayerSceneComp::onDestroyDungeonScene(PlayerSceneComp *const this, DungeonScenePtr *p_dungeon_scene_ptr)
{
  unsigned __int64 v2; // r12
  __int64 v3; // rax
  _DWORD *v4; // rbx
  common::milog::MiLogStream *v5; // r13
  std::__shared_ptr_access<DungeonScene,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v6; // rax
  uint32_t PlayerUid; // r14d
  common::milog::MiLogStream *v8; // r13
  common::milog::MiLogStream *v9; // rax
  common::milog::MiLogStream *v10; // r13
  unsigned __int64 v11; // rax
  void (__fastcall **v12)(common::milog::MiLogStream *, unsigned __int64); // rdx
  std::__shared_ptr_access<DungeonScene,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v13; // rax
  unsigned __int64 v14; // rax
  unsigned __int64 v15; // rdx
  common::milog::MiLogStream *v16; // r14
  common::milog::MiLogStream *v17; // rax
  common::milog::MiLogStream *v18; // r14
  unsigned __int64 v19; // rax
  void (__fastcall **v20)(common::milog::MiLogStream *, unsigned __int64); // rdx
  unsigned __int64 v21; // rax
  unsigned __int64 v22; // rdx
  proto::SceneBin *v23; // r14
  proto::SceneBin *v24; // rax
  Scene *v25; // rax
  common::milog::MiLogStream *v26; // r14
  common::milog::MiLogStream *v27; // rax
  common::milog::MiLogStream *v28; // r14
  unsigned __int64 v29; // rax
  void (__fastcall **v30)(common::milog::MiLogStream *, unsigned __int64); // rdx
  unsigned int val; // [rsp+1Ch] [rbp-234h] BYREF
  common::milog::MiLogStream v32; // [rsp+20h] [rbp-230h] BYREF
  common::milog::MiLogStream v33; // [rsp+40h] [rbp-210h] BYREF
  char v34[496]; // [rsp+60h] [rbp-1F0h] BYREF

  v2 = (unsigned __int64)v34;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_3(448LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "2 48 4 13 scene_id:6164 64 312 22 dungeon_scene_bin:6171";
  *(_QWORD *)(v2 + 16) = PlayerSceneComp::onDestroyDungeonScene;
  v4 = (_DWORD *)(v2 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = -234556943;
  v4[536862731] = -218103808;
  v4[536862732] = -202116109;
  v4[536862733] = -202116109;
  if ( std::operator==<DungeonScene>(0LL, p_dungeon_scene_ptr) )
  {
    common::milog::MiLogStream::create(
      &v33,
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/scene/player_scene_comp.cpp",
      "onDestroyDungeonScene",
      6156);
    v5 = common::milog::MiLogStream::operator<<<char [71],(char *[71])0>(
           &v33,
           (const char (*)[71])"[PERSISTENT_DUNGEON] onDestroyDungeon dungeon_scene_ptr is null, uid: ");
    if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
      __asan_report_load8();
    val = Player::getUid(this->player_);
    common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v5, &val);
    common::milog::MiLogStream::~MiLogStream(&v33);
  }
  else
  {
    v6 = std::__shared_ptr_access<DungeonScene,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<DungeonScene,(__gnu_cxx::_Lock_policy)2,false,false> *const)p_dungeon_scene_ptr);
    PlayerUid = DungeonScene::getCreatePlayerUid(v6);
    if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
      __asan_report_load8();
    if ( PlayerUid == Player::getUid(this->player_) )
    {
      v13 = std::__shared_ptr_access<DungeonScene,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<DungeonScene,(__gnu_cxx::_Lock_policy)2,false,false> *const)p_dungeon_scene_ptr);
      *(_DWORD *)(v2 + 48) = Scene::getSceneId((const Scene *const)v13);
      v14 = (unsigned __int64)std::__shared_ptr_access<DungeonScene,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<DungeonScene,(__gnu_cxx::_Lock_policy)2,false,false> *const)p_dungeon_scene_ptr);
      if ( *(_BYTE *)((v14 >> 3) + 0x7FFF8000) )
        v14 = __asan_report_load8();
      v15 = *(_QWORD *)v14 + 504LL;
      if ( *(_BYTE *)((v15 >> 3) + 0x7FFF8000) )
        v14 = __asan_report_load8();
      if ( (*(unsigned __int8 (__fastcall **)(unsigned __int64))v15)(v14) )
      {
        if ( !common::tools::MiscUtils::isContains<std::unordered_map<unsigned int,std::weak_ptr<DungeonScene>>,unsigned int>(
                &this->create_persistent_dungeon_scene_map_,
                (const unsigned int *)(v2 + 48)) )
        {
          common::milog::MiLogStream::create(
            &v32,
            &common::milog::MiLogDefault::default_log_obj_,
            4u,
            "./src/scene/player_scene_comp.cpp",
            "onDestroyDungeonScene",
            6169);
          v16 = common::milog::MiLogStream::operator<<<char [58],(char *[58])0>(
                  &v32,
                  (const char (*)[58])"[PERSISTENT_DUNGEON] not in persistent dungeon map. uid: ");
          if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
            __asan_report_load8();
          val = Player::getUid(this->player_);
          v17 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v16, &val);
          v18 = common::milog::MiLogStream::operator<<<char [11],(char *[11])0>(v17, (const char (*)[11])", dungeon:");
          v19 = (unsigned __int64)std::__shared_ptr_access<DungeonScene,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<DungeonScene,(__gnu_cxx::_Lock_policy)2,false,false> *const)p_dungeon_scene_ptr);
          if ( *(_BYTE *)((v19 >> 3) + 0x7FFF8000) )
            v19 = __asan_report_load8();
          v20 = *(void (__fastcall ***)(common::milog::MiLogStream *, unsigned __int64))v19;
          if ( *(_BYTE *)((*(_QWORD *)v19 >> 3) + 0x7FFF8000LL) )
            v19 = __asan_report_load8();
          (*v20)(&v33, v19);
          common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v18, (const std::string *)&v33);
          std::string::~string(&v33);
          common::milog::MiLogStream::~MiLogStream(&v32);
        }
        proto::SceneBin::SceneBin((proto::SceneBin *const)(v2 + 64));
        v21 = (unsigned __int64)std::__shared_ptr_access<DungeonScene,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<DungeonScene,(__gnu_cxx::_Lock_policy)2,false,false> *const)p_dungeon_scene_ptr);
        if ( *(_BYTE *)((v21 >> 3) + 0x7FFF8000) )
          v21 = __asan_report_load8();
        v22 = *(_QWORD *)v21 + 16LL;
        if ( *(_BYTE *)((v22 >> 3) + 0x7FFF8000) )
          v21 = __asan_report_load8();
        (*(void (__fastcall **)(unsigned __int64, unsigned __int64))v22)(v21, v2 + 64);
        v23 = std::move<proto::SceneBin &>((proto::SceneBin *)(v2 + 64));
        v24 = std::unordered_map<unsigned int,proto::SceneBin>::operator[](
                &this->persistent_dungeon_scene_bin_map_,
                (const std::unordered_map<unsigned int,proto::SceneBin>::key_type *)(v2 + 48));
        proto::SceneBin::operator=(v24, v23);
        v25 = (Scene *)std::__shared_ptr_access<DungeonScene,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<DungeonScene,(__gnu_cxx::_Lock_policy)2,false,false> *const)p_dungeon_scene_ptr);
        Scene::saveAllGroup(v25, 1);
        common::milog::MiLogStream::create(
          &v32,
          &common::milog::MiLogDefault::default_log_obj_,
          1u,
          "./src/scene/player_scene_comp.cpp",
          "onDestroyDungeonScene",
          6175);
        v26 = common::milog::MiLogStream::operator<<<char [55],(char *[55])0>(
                &v32,
                (const char (*)[55])"[PERSISTENT_DUNGEON] onDestroyPersistentDungeon, uid: ");
        if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
          __asan_report_load8();
        val = Player::getUid(this->player_);
        v27 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v26, &val);
        v28 = common::milog::MiLogStream::operator<<<char [11],(char *[11])0>(v27, (const char (*)[11])", dungeon:");
        v29 = (unsigned __int64)std::__shared_ptr_access<DungeonScene,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<DungeonScene,(__gnu_cxx::_Lock_policy)2,false,false> *const)p_dungeon_scene_ptr);
        if ( *(_BYTE *)((v29 >> 3) + 0x7FFF8000) )
          v29 = __asan_report_load8();
        v30 = *(void (__fastcall ***)(common::milog::MiLogStream *, unsigned __int64))v29;
        if ( *(_BYTE *)((*(_QWORD *)v29 >> 3) + 0x7FFF8000LL) )
          v29 = __asan_report_load8();
        (*v30)(&v33, v29);
        common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v28, (const std::string *)&v33);
        std::string::~string(&v33);
        common::milog::MiLogStream::~MiLogStream(&v32);
        proto::SceneBin::~SceneBin((proto::SceneBin *const)(v2 + 64));
      }
      std::unordered_map<unsigned int,std::weak_ptr<DungeonScene>>::erase(
        &this->create_persistent_dungeon_scene_map_,
        (const std::unordered_map<unsigned int,std::weak_ptr<DungeonScene>>::key_type *)(v2 + 48));
    }
    else
    {
      common::milog::MiLogStream::create(
        &v32,
        &common::milog::MiLogDefault::default_log_obj_,
        4u,
        "./src/scene/player_scene_comp.cpp",
        "onDestroyDungeonScene",
        6161);
      v8 = common::milog::MiLogStream::operator<<<char [27],(char *[27])0>(
             &v32,
             (const char (*)[27])"[PERSISTENT_DUNGEON] uid: ");
      if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
        __asan_report_load8();
      val = Player::getUid(this->player_);
      v9 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v8, &val);
      v10 = common::milog::MiLogStream::operator<<<char [28],(char *[28])0>(v9, (const char (*)[28])off_25189720);
      v11 = (unsigned __int64)std::__shared_ptr_access<DungeonScene,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<DungeonScene,(__gnu_cxx::_Lock_policy)2,false,false> *const)p_dungeon_scene_ptr);
      if ( *(_BYTE *)((v11 >> 3) + 0x7FFF8000) )
        v11 = __asan_report_load8();
      v12 = *(void (__fastcall ***)(common::milog::MiLogStream *, unsigned __int64))v11;
      if ( *(_BYTE *)((*(_QWORD *)v11 >> 3) + 0x7FFF8000LL) )
        v11 = __asan_report_load8();
      (*v12)(&v33, v11);
      common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v10, (const std::string *)&v33);
      std::string::~string(&v33);
      common::milog::MiLogStream::~MiLogStream(&v32);
    }
  }
  if ( v34 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF802C) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8034) = 0;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8020) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8028) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8030) = 0xF5F5F5F5F5F5F5F5LL;
  }
};

// Line 6181: range 0000000013E7AE48-0000000013E7AFA0
const proto::SceneBin *__fastcall PlayerSceneComp::findPersistentDungeonSceneBin(
        const PlayerSceneComp *const this,
        uint32_t dungeon_scene_id)
{
  unsigned __int64 v2; // rbx
  __int64 v3; // rax
  _DWORD *v4; // r12
  const proto::SceneBin *result; // rax
  std::__detail::_Node_iterator_base<std::pair<unsigned int const,proto::SceneBin>,false> __y; // [rsp+18h] [rbp-88h] BYREF
  char v7[128]; // [rsp+20h] [rbp-80h] BYREF

  v2 = (unsigned __int64)v7;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_1(96LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "2 48 4 21 dungeon_scene_id:6180 64 8 9 iter:6182";
  *(_QWORD *)(v2 + 16) = PlayerSceneComp::findPersistentDungeonSceneBin;
  v4 = (_DWORD *)(v2 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = -234556943;
  v4[536862722] = -202116352;
  *(_DWORD *)(v2 + 48) = dungeon_scene_id;
  *(std::unordered_map<unsigned int,proto::SceneBin>::const_iterator *)(v2 + 64) = std::unordered_map<unsigned int,proto::SceneBin>::find(
                                                                                     &this->persistent_dungeon_scene_bin_map_,
                                                                                     (const std::unordered_map<unsigned int,proto::SceneBin>::key_type *)(v2 + 48));
  __y._M_cur = std::unordered_map<unsigned int,proto::SceneBin>::end(&this->persistent_dungeon_scene_bin_map_)._M_cur;
  if ( std::__detail::operator==<std::pair<unsigned int const,proto::SceneBin>,false>(
         (const std::__detail::_Node_iterator_base<std::pair<unsigned int const,proto::SceneBin>,false> *)(v2 + 64),
         &__y) )
  {
    result = 0LL;
  }
  else
  {
    result = &std::__detail::_Node_const_iterator<std::pair<unsigned int const,proto::SceneBin>,false,false>::operator->((const std::__detail::_Node_const_iterator<std::pair<unsigned int const,proto::SceneBin>,false,false> *const)(v2 + 64))->second;
  }
  if ( v7 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8008) = 0;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8008) = -168430091;
  }
  return result;
};

// Line 6191: range 0000000013E7AFA2-0000000013E7AFC8
void __cdecl PlayerSceneComp::cleanPersistentDungeonAbandonBin(PlayerSceneComp *const this)
{
  PlayerSceneComp::cleanPersistentDungeonAbandonSceneBin(this);
  PlayerSceneComp::cleanPersistentDungeonAbandonBlockBin(this);
};

// Line 6197: range 0000000013E7AFCA-0000000013E7B337
void __cdecl PlayerSceneComp::cleanPersistentDungeonAbandonSceneBin(PlayerSceneComp *const this)
{
  unsigned __int64 v1; // rbx
  __int64 v2; // rax
  _DWORD *v3; // r13
  SceneExcelConfigMgr *p_scene_config_mgr; // rcx
  std::_Rb_tree_const_iterator<unsigned int>::reference v5; // rax
  _DWORD *v6; // rdx
  std::unordered_map<unsigned int,proto::SceneBin>::iterator __for_begin; // [rsp+10h] [rbp-F0h] BYREF
  std::unordered_map<unsigned int,proto::SceneBin>::iterator __for_end; // [rsp+18h] [rbp-E8h] BYREF
  const TxtConfigMgr *txt_config_mgr; // [rsp+20h] [rbp-E0h]
  std::unordered_map<unsigned int,proto::SceneBin> *__for_range; // [rsp+28h] [rbp-D8h]
  std::set<unsigned int> *__for_range_0; // [rsp+30h] [rbp-D0h]
  const std::pair<unsigned int const,proto::SceneBin> *v12; // [rsp+38h] [rbp-C8h]
  std::tuple_element<0,const std::pair<unsigned int const,proto::SceneBin> >::type *scene_id; // [rsp+40h] [rbp-C0h]
  std::tuple_element<1,const std::pair<unsigned int const,proto::SceneBin> >::type *proto_dungeon_scene_bin; // [rsp+48h] [rbp-B8h]
  std::shared_ptr<Config> v15; // [rsp+50h] [rbp-B0h] BYREF
  char v16[160]; // [rsp+60h] [rbp-A0h] BYREF

  v1 = (unsigned __int64)v16;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_1(128LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "2 32 4 13 scene_id:6207 48 48 33 abandoned_scenebin_scene_set:6199";
  *(_QWORD *)(v1 + 16) = PlayerSceneComp::cleanPersistentDungeonAbandonSceneBin;
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = 61956;
  v3[536862723] = -202116109;
  ServiceBox::findService<GameserverService>();
  GameserverService::getConfig((GameserverService *const)&v15);
  txt_config_mgr = &std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false> *const)&v15)->design_config.txt_config_mgr;
  std::shared_ptr<Config>::~shared_ptr(&v15);
  std::set<unsigned int>::set((std::set<unsigned int> *const)(v1 + 48));
  __for_range = &this->persistent_dungeon_scene_bin_map_;
  __for_begin._M_cur = std::unordered_map<unsigned int,proto::SceneBin>::begin(&this->persistent_dungeon_scene_bin_map_)._M_cur;
  __for_end._M_cur = std::unordered_map<unsigned int,proto::SceneBin>::end(&this->persistent_dungeon_scene_bin_map_)._M_cur;
  while ( std::__detail::operator!=<std::pair<unsigned int const,proto::SceneBin>,false>(&__for_begin, &__for_end) )
  {
    v12 = std::__detail::_Node_iterator<std::pair<unsigned int const,proto::SceneBin>,false,false>::operator*(&__for_begin);
    scene_id = std::get<0ul,unsigned int const,proto::SceneBin>(v12);
    proto_dungeon_scene_bin = (std::tuple_element<1,const std::pair<unsigned int const,proto::SceneBin> >::type *)std::get<1ul,unsigned int const,proto::SceneBin>(v12);
    p_scene_config_mgr = &txt_config_mgr->scene_config_mgr;
    if ( *(_BYTE *)(((unsigned __int64)scene_id >> 3) + 0x7FFF8000) != 0
      && (char)(((unsigned __int8)scene_id & 7) + 3) >= *(_BYTE *)(((unsigned __int64)scene_id >> 3) + 0x7FFF8000) )
    {
      __asan_report_load4(scene_id);
    }
    if ( SceneExcelConfigMgr::isSceneAbandonScenebin(p_scene_config_mgr, *scene_id) )
      std::set<unsigned int>::insert((std::set<unsigned int> *const)(v1 + 48), scene_id);
    std::__detail::_Node_iterator<std::pair<unsigned int const,proto::SceneBin>,false,false>::operator++(&__for_begin);
  }
  __for_range_0 = (std::set<unsigned int> *)(v1 + 48);
  __for_begin._M_cur = (std::__detail::_Node_iterator_base<std::pair<unsigned int const,proto::SceneBin>,false>::__node_type *)std::set<unsigned int>::begin((const std::set<unsigned int> *const)(v1 + 48))._M_node;
  __for_end._M_cur = (std::__detail::_Node_iterator_base<std::pair<unsigned int const,proto::SceneBin>,false>::__node_type *)std::set<unsigned int>::end(__for_range_0)._M_node;
  while ( std::operator!=(
            (const std::_Rb_tree_const_iterator<unsigned int>::_Self *)&__for_begin,
            (const std::_Rb_tree_const_iterator<unsigned int>::_Self *)&__for_end) )
  {
    v5 = std::_Rb_tree_const_iterator<unsigned int>::operator*((const std::_Rb_tree_const_iterator<unsigned int> *const)&__for_begin);
    v6 = v5;
    if ( *(_BYTE *)(((unsigned __int64)v5 >> 3) + 0x7FFF8000) != 0
      && (char)(((unsigned __int8)v5 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)v5 >> 3) + 0x7FFF8000) )
    {
      __asan_report_load4(v5);
    }
    *(_DWORD *)(v1 + 32) = *v6;
    std::unordered_map<unsigned int,proto::SceneBin>::erase(
      &this->persistent_dungeon_scene_bin_map_,
      (const std::unordered_map<unsigned int,proto::SceneBin>::key_type *)(v1 + 32));
    std::_Rb_tree_const_iterator<unsigned int>::operator++((std::_Rb_tree_const_iterator<unsigned int> *const)&__for_begin);
  }
  std::set<unsigned int>::~set((std::set<unsigned int> *const)(v1 + 48));
  if ( v16 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_DWORD *)((v1 >> 3) + 0x7FFF800C) = 0;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
};

// Line 6214: range 0000000013E7B338-0000000013E7B850
void __cdecl PlayerSceneComp::cleanPersistentDungeonAbandonBlockBin(PlayerSceneComp *const this)
{
  unsigned __int64 v1; // rbx
  __int64 v2; // rax
  unsigned __int64 v3; // r13
  std::_Rb_tree_const_iterator<unsigned int>::reference v4; // rax
  _DWORD *v5; // rdx
  common::milog::MiLogStream *v6; // rax
  common::milog::MiLogStream *v7; // r14
  common::milog::MiLogStream *v8; // rax
  common::milog::MiLogStream *v9; // rax
  common::milog::MiLogStream *v10; // rax
  common::milog::MiLogStream *v11; // r14
  unsigned int *v12; // rax
  uint32_t *v13; // rdx
  unsigned int val; // [rsp+18h] [rbp-F8h] BYREF
  uint32_t group_id; // [rsp+1Ch] [rbp-F4h]
  std::set<unsigned int>::iterator __for_begin; // [rsp+20h] [rbp-F0h] BYREF
  std::set<unsigned int>::iterator __for_end; // [rsp+28h] [rbp-E8h] BYREF
  std::vector<unsigned int>::const_iterator __for_begin_0; // [rsp+30h] [rbp-E0h] BYREF
  std::vector<unsigned int>::const_iterator __for_end_0; // [rsp+38h] [rbp-D8h] BYREF
  const TxtConfigMgr *txt_config_mgr; // [rsp+40h] [rbp-D0h]
  const std::set<unsigned int> *abandon_blockbin_persistent_dungeon_scene_set; // [rsp+48h] [rbp-C8h]
  const std::set<unsigned int> *__for_range; // [rsp+50h] [rbp-C0h]
  const std::vector<unsigned int> *frombin_abandon_blockbin_scene_groups_vec; // [rsp+58h] [rbp-B8h]
  BlockDataMgr *block_data_mgr; // [rsp+60h] [rbp-B0h]
  const std::vector<unsigned int> *__for_range_0; // [rsp+68h] [rbp-A8h]
  std::shared_ptr<Config> v26; // [rsp+70h] [rbp-A0h] BYREF
  common::milog::MiLogStream v27; // [rsp+80h] [rbp-90h] BYREF
  char v28[112]; // [rsp+A0h] [rbp-70h] BYREF

  v1 = (unsigned __int64)v28;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_0(64LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "1 32 4 21 dungeon_scene_id:6217";
  *(_QWORD *)(v1 + 16) = PlayerSceneComp::cleanPersistentDungeonAbandonBlockBin;
  v3 = v1 >> 3;
  *(_DWORD *)(v3 + 2147450880) = -235802127;
  *(_DWORD *)(v3 + 2147450884) = -202116348;
  ServiceBox::findService<GameserverService>();
  GameserverService::getConfig((GameserverService *const)&v26);
  txt_config_mgr = &std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false> *const)&v26)->design_config.txt_config_mgr;
  std::shared_ptr<Config>::~shared_ptr(&v26);
  abandon_blockbin_persistent_dungeon_scene_set = SceneExcelConfigMgr::getAbandonBlockbinPersistentDungeonSceneSet(&txt_config_mgr->scene_config_mgr);
  __for_range = abandon_blockbin_persistent_dungeon_scene_set;
  __for_begin._M_node = std::set<unsigned int>::begin(abandon_blockbin_persistent_dungeon_scene_set)._M_node;
  __for_end._M_node = std::set<unsigned int>::end(abandon_blockbin_persistent_dungeon_scene_set)._M_node;
  while ( std::operator!=(&__for_begin, &__for_end) )
  {
    v4 = std::_Rb_tree_const_iterator<unsigned int>::operator*(&__for_begin);
    v5 = v4;
    if ( *(_BYTE *)(((unsigned __int64)v4 >> 3) + 0x7FFF8000) != 0
      && (char)(((unsigned __int8)v4 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)v4 >> 3) + 0x7FFF8000) )
    {
      __asan_report_load4(v4);
    }
    *(_DWORD *)(v1 + 32) = *v5;
    if ( !SceneExcelConfigMgr::isPersistentDungeonScene(&txt_config_mgr->scene_config_mgr, *(_DWORD *)(v1 + 32)) )
    {
      common::milog::MiLogStream::create(
        &v27,
        &common::milog::MiLogDefault::default_log_obj_,
        4u,
        "./src/scene/player_scene_comp.cpp",
        "cleanPersistentDungeonAbandonBlockBin",
        6221);
      v6 = common::milog::MiLogStream::operator<<<char [72],(char *[72])0>(
             &v27,
             (const char (*)[72])"cleanPersistentDungeonAbandonBlockBin not persistent dungeon. scene_id:");
      common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v6, (const unsigned int *)(v1 + 32));
      common::milog::MiLogStream::~MiLogStream(&v27);
    }
    else
    {
      if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
        __asan_report_load8();
      frombin_abandon_blockbin_scene_groups_vec = Player::getFromBinAbandonBlockbinSceneGroupsVec(
                                                    this->player_,
                                                    *(_DWORD *)(v1 + 32));
      common::milog::MiLogStream::create(
        &v27,
        &common::milog::MiLogDefault::default_log_obj_,
        1u,
        "./src/scene/player_scene_comp.cpp",
        "cleanPersistentDungeonAbandonBlockBin",
        6225);
      v7 = common::milog::MiLogStream::operator<<<char [43],(char *[43])0>(
             &v27,
             (const char (*)[43])"frombin_abandon_blockbin_scene_groups_vec:");
      __for_end_0._M_current = (const unsigned int *)std::vector<unsigned int>::size(frombin_abandon_blockbin_scene_groups_vec);
      v8 = common::milog::MiLogStream::operator<<<unsigned long,(unsigned long *)0>(
             v7,
             (const unsigned __int64 *)&__for_end_0);
      v9 = common::milog::MiLogStream::operator<<<char [12],(char *[12])0>(v8, (const char (*)[12])", scene_id:");
      v10 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v9, (const unsigned int *)(v1 + 32));
      v11 = common::milog::MiLogStream::operator<<<char [7],(char *[7])0>(v10, (const char (*)[7])", uid:");
      if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
        __asan_report_load8();
      val = Player::getUid(this->player_);
      common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v11, &val);
      common::milog::MiLogStream::~MiLogStream(&v27);
      if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
        __asan_report_load8();
      block_data_mgr = Player::getBlockDataMgr(this->player_);
      __for_range_0 = frombin_abandon_blockbin_scene_groups_vec;
      __for_begin_0._M_current = std::vector<unsigned int>::begin(frombin_abandon_blockbin_scene_groups_vec)._M_current;
      __for_end_0._M_current = std::vector<unsigned int>::end(__for_range_0)._M_current;
      while ( __gnu_cxx::operator!=<unsigned int const*,std::vector<unsigned int>>(&__for_begin_0, &__for_end_0) )
      {
        v12 = (unsigned int *)__gnu_cxx::__normal_iterator<unsigned int const*,std::vector<unsigned int>>::operator*(&__for_begin_0);
        v13 = v12;
        if ( *(_BYTE *)(((unsigned __int64)v12 >> 3) + 0x7FFF8000) != 0
          && (char)(((unsigned __int8)v12 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)v12 >> 3) + 0x7FFF8000) )
        {
          __asan_report_load4(v12);
        }
        group_id = *v13;
        BlockDataMgr::clearGroupBin(block_data_mgr, *(_DWORD *)(v1 + 32), group_id);
        __gnu_cxx::__normal_iterator<unsigned int const*,std::vector<unsigned int>>::operator++(&__for_begin_0);
      }
    }
    std::_Rb_tree_const_iterator<unsigned int>::operator++(&__for_begin);
  }
  if ( v28 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
  }
};

// Line 6235: range 0000000013E7B852-0000000013E7BA03
void __cdecl PlayerSceneComp::onChangeClimateArea(PlayerSceneComp *const this, const ChangeClimateAreaEvent *event)
{
  common::milog::MiLogStream *v2; // rax
  common::milog::MiLogStream *v3; // rax
  common::milog::MiLogStream *v4; // rax
  common::milog::MiLogStream *v5; // rax
  common::milog::MiLogStream *v6; // rbx
  unsigned int val; // [rsp+18h] [rbp-38h] BYREF
  common::milog::MiLogStream v9; // [rsp+20h] [rbp-30h] BYREF

  common::milog::MiLogStream::create(
    &v9,
    &common::milog::MiLogDefault::default_log_obj_,
    1u,
    "./src/scene/player_scene_comp.cpp",
    "onChangeClimateArea",
    6236);
  v2 = common::milog::MiLogStream::operator<<<char [44],(char *[44])0>(
         &v9,
         (const char (*)[44])"onChangeClimateArea, cur_climate_area_type:");
  v3 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v2, &event->cur_climate_area_type);
  v4 = common::milog::MiLogStream::operator<<<char [23],(char *[23])0>(v3, (const char (*)[23])" last_area_play_type_:");
  v5 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v4, &this->last_area_play_type_);
  v6 = common::milog::MiLogStream::operator<<<char [6],(char *[6])0>(v5, (const char (*)[6])" uid:");
  if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
    __asan_report_load8();
  val = Player::getUid(this->player_);
  common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v6, &val);
  common::milog::MiLogStream::~MiLogStream(&v9);
  if ( *(_BYTE *)(((unsigned __int64)&event->cur_climate_area_type >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)event + 28) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&event->cur_climate_area_type >> 3)
                                                         + 0x7FFF8000) )
  {
    __asan_report_load4(&event->cur_climate_area_type);
  }
  if ( event->cur_climate_area_type )
  {
    if ( *(_BYTE *)(((unsigned __int64)&this->last_area_play_type_ >> 3) + 0x7FFF8000) != 0
      && *(_BYTE *)(((unsigned __int64)&this->last_area_play_type_ >> 3) + 0x7FFF8000) <= 3 )
    {
      __asan_report_store4(&this->last_area_play_type_, (((_BYTE)event + 28) & 7u) + 3, (_BYTE)this + 72);
    }
    this->last_area_play_type_ = 1;
    PlayerSceneComp::notifyAreaPlayData(this);
  }
};

// Line 6248: range 0000000013E7BA04-0000000013E7BC0D
void __cdecl PlayerSceneComp::onChangeClimateType(PlayerSceneComp *const this, const ChangeClimateTypeEvent *event)
{
  common::milog::MiLogStream *v2; // rax
  common::milog::MiLogStream *v3; // rax
  common::milog::MiLogStream *v4; // rax
  common::milog::MiLogStream *v5; // rax
  common::milog::MiLogStream *v6; // rbx
  unsigned int val; // [rsp+18h] [rbp-38h] BYREF
  common::milog::MiLogStream v9; // [rsp+20h] [rbp-30h] BYREF

  common::milog::MiLogStream::create(
    &v9,
    &common::milog::MiLogDefault::default_log_obj_,
    1u,
    "./src/scene/player_scene_comp.cpp",
    "onChangeClimateType",
    6249);
  v2 = common::milog::MiLogStream::operator<<<char [39],(char *[39])0>(
         &v9,
         (const char (*)[39])"onChangeClimateType, cur_climate_type:");
  v3 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v2, &event->cur_climate_type);
  v4 = common::milog::MiLogStream::operator<<<char [23],(char *[23])0>(v3, (const char (*)[23])" last_area_play_type_:");
  v5 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v4, &this->last_area_play_type_);
  v6 = common::milog::MiLogStream::operator<<<char [6],(char *[6])0>(v5, (const char (*)[6])" uid:");
  if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
    __asan_report_load8();
  val = Player::getUid(this->player_);
  common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v6, &val);
  common::milog::MiLogStream::~MiLogStream(&v9);
  if ( *(_BYTE *)(((unsigned __int64)&event->cur_climate_type >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&event->cur_climate_type >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4(&event->cur_climate_type);
  }
  if ( event->cur_climate_type )
  {
    if ( *(_BYTE *)(((unsigned __int64)&this->last_area_play_type_ >> 3) + 0x7FFF8000) != 0
      && *(_BYTE *)(((unsigned __int64)&this->last_area_play_type_ >> 3) + 0x7FFF8000) <= 3 )
    {
      __asan_report_store4(&this->last_area_play_type_, &val, (_BYTE)this + 72);
    }
    this->last_area_play_type_ = 1;
    PlayerSceneComp::notifyAreaPlayData(this);
  }
  else
  {
    if ( *(_BYTE *)(((unsigned __int64)&this->last_area_play_type_ >> 3) + 0x7FFF8000) != 0
      && *(_BYTE *)(((unsigned __int64)&this->last_area_play_type_ >> 3) + 0x7FFF8000) <= 3 )
    {
      __asan_report_load4(&this->last_area_play_type_);
    }
    if ( this->last_area_play_type_ == 1 )
    {
      this->last_area_play_type_ = 0;
      PlayerSceneComp::notifyAreaPlayData(this);
    }
  }
};

// Line 6266: range 0000000013E7BC0E-0000000013E7BFCB
void __cdecl PlayerSceneComp::onRegionalPlayStatusChange(
        PlayerSceneComp *const this,
        const RegionalPlayStatusChangeEvent *event)
{
  common::milog::MiLogStream *v2; // rcx
  common::milog::MiLogStream *v3; // rax
  common::milog::MiLogStream *v4; // rcx
  common::milog::MiLogStream *v5; // rax
  common::milog::MiLogStream *v6; // rax
  common::milog::MiLogStream *v7; // rax
  common::milog::MiLogStream *v8; // rbx
  __int64 v9; // rsi
  PlayerRegionalPlayComp *RegionalPlayComp; // rax
  const std::string *v11; // rsi
  unsigned int val; // [rsp+1Ch] [rbp-34h] BYREF
  common::milog::MiLogStream v14; // [rsp+20h] [rbp-30h] BYREF

  common::milog::MiLogStream::create(
    &v14,
    &common::milog::MiLogDefault::default_log_obj_,
    1u,
    "./src/scene/player_scene_comp.cpp",
    "onRegionalPlayStatusChange",
    6267);
  v2 = common::milog::MiLogStream::operator<<<char [39],(char *[39])0>(
         &v14,
         (const char (*)[39])"onRegionalPlayStatusChange, is_enable:");
  if ( *(char *)(((unsigned __int64)&event->is_enable >> 3) + 0x7FFF8000) < 0 )
    __asan_report_load1(&event->is_enable);
  v3 = common::milog::MiLogStream::operator<<(v2, event->is_enable);
  v4 = common::milog::MiLogStream::operator<<<char [15],(char *[15])0>(v3, (const char (*)[15])" is_in_region:");
  if ( *(_BYTE *)(((unsigned __int64)&event->is_in_region >> 3) + 0x7FFF8000) != 0
    && (((unsigned __int8)event + 57) & 7) >= *(_BYTE *)(((unsigned __int64)&event->is_in_region >> 3) + 0x7FFF8000) )
  {
    __asan_report_load1(&event->is_in_region);
  }
  v5 = common::milog::MiLogStream::operator<<(v4, event->is_in_region);
  v6 = common::milog::MiLogStream::operator<<<char [23],(char *[23])0>(v5, (const char (*)[23])" last_area_play_type_:");
  v7 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v6, &this->last_area_play_type_);
  v8 = common::milog::MiLogStream::operator<<<char [6],(char *[6])0>(v7, (const char (*)[6])" uid:");
  if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
    __asan_report_load8();
  val = Player::getUid(this->player_);
  common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v8, &val);
  common::milog::MiLogStream::~MiLogStream(&v14);
  if ( *(char *)(((unsigned __int64)&event->is_enable >> 3) + 0x7FFF8000) < 0 )
    __asan_report_load1(&event->is_enable);
  if ( event->is_enable )
  {
    v9 = ((_BYTE)event + 57) & 7;
    if ( *(_BYTE *)(((unsigned __int64)&event->is_in_region >> 3) + 0x7FFF8000) != 0
      && (char)v9 >= *(_BYTE *)(((unsigned __int64)&event->is_in_region >> 3) + 0x7FFF8000) )
    {
      __asan_report_load1(&event->is_in_region);
    }
    if ( event->is_in_region )
      goto LABEL_16;
    if ( *(_BYTE *)(((unsigned __int64)&this->last_area_play_type_ >> 3) + 0x7FFF8000) != 0
      && *(_BYTE *)(((unsigned __int64)&this->last_area_play_type_ >> 3) + 0x7FFF8000) <= 3 )
    {
      __asan_report_load4(&this->last_area_play_type_);
    }
    if ( !this->last_area_play_type_ )
    {
LABEL_16:
      if ( *(_BYTE *)(((unsigned __int64)&this->last_area_play_type_ >> 3) + 0x7FFF8000) != 0
        && *(_BYTE *)(((unsigned __int64)&this->last_area_play_type_ >> 3) + 0x7FFF8000) <= 3 )
      {
        __asan_report_store4(&this->last_area_play_type_, v9, (_BYTE)this + 72);
      }
      this->last_area_play_type_ = 2;
      PlayerSceneComp::notifyAreaPlayData(this);
    }
  }
  else
  {
    if ( *(_BYTE *)(((unsigned __int64)&this->last_area_play_type_ >> 3) + 0x7FFF8000) != 0
      && *(_BYTE *)(((unsigned __int64)&this->last_area_play_type_ >> 3) + 0x7FFF8000) <= 3 )
    {
      __asan_report_load4(&this->last_area_play_type_);
    }
    if ( this->last_area_play_type_ == 2 )
    {
      if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
        __asan_report_load8();
      RegionalPlayComp = Player::getRegionalPlayComp(this->player_);
      v11 = PlayerRegionalPlayComp::getLastPlayName[abi:cxx11](RegionalPlayComp);
      if ( std::operator==<char>(&event->play_name, v11) )
      {
        if ( *(_BYTE *)(((unsigned __int64)&this->last_area_play_type_ >> 3) + 0x7FFF8000) != 0
          && *(_BYTE *)(((unsigned __int64)&this->last_area_play_type_ >> 3) + 0x7FFF8000) <= 3 )
        {
          __asan_report_store4(&this->last_area_play_type_, v11, (_BYTE)this + 72);
        }
        this->last_area_play_type_ = 0;
        PlayerSceneComp::notifyAreaPlayData(this);
      }
    }
  }
};

// Line 6289: range 0000000013E7BFCC-0000000013E7C5F7
void __cdecl PlayerSceneComp::onSetGameTimeEvent(PlayerSceneComp *const this, const SetGameTimeEvent *event)
{
  unsigned __int64 v2; // r13
  __int64 v3; // rax
  _DWORD *v4; // r12
  common::milog::MiLogStream *v5; // rax
  common::milog::MiLogStream *v6; // rax
  common::milog::MiLogStream *v7; // r14
  __int64 v8; // rsi
  uint32_t Uid; // r14d
  std::__shared_ptr_access<Event,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v10; // rdx
  char v11; // cl
  std::__detail::_Node_const_iterator<unsigned int,true,false>::reference v12; // rax
  _DWORD *v13; // rdx
  common::milog::MiLogStream *v14; // rax
  common::milog::MiLogStream *v15; // rax
  common::milog::MiLogStream *v16; // rax
  common::milog::MiLogStream *v17; // rax
  Scene *v18; // rax
  uint32_t BlockGroupComp; // eax
  Group *v20; // rax
  std::unordered_set<unsigned int>::const_iterator __for_begin; // [rsp+18h] [rbp-118h] BYREF
  std::unordered_set<unsigned int>::const_iterator __for_end; // [rsp+20h] [rbp-110h] BYREF
  const LuaConfigMgr *lua_config_mgr; // [rsp+28h] [rbp-108h]
  const std::unordered_set<unsigned int> *group_id_set; // [rsp+30h] [rbp-100h]
  const std::unordered_set<unsigned int> *__for_range; // [rsp+38h] [rbp-F8h]
  common::milog::MiLogStream v26; // [rsp+40h] [rbp-F0h] BYREF
  char v27[208]; // [rsp+60h] [rbp-D0h] BYREF

  v2 = (unsigned __int64)v27;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_2(160LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "5 32 4 13 group_id:6303 48 4 13 scene_id:6305 64 16 14 event_ptr:6294 96 16 14 scene_ptr:6306 12"
                        "8 16 14 group_ptr:6312";
  *(_QWORD *)(v2 + 16) = PlayerSceneComp::onSetGameTimeEvent;
  v4 = (_DWORD *)(v2 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = -234556924;
  v4[536862722] = -219021312;
  v4[536862723] = -219021312;
  v4[536862724] = -202178560;
  common::milog::MiLogStream::create(
    &v26,
    &common::milog::MiLogDefault::default_log_obj_,
    1u,
    "./src/scene/player_scene_comp.cpp",
    "onSetGameTimeEvent",
    6290);
  v5 = common::milog::MiLogStream::operator<<<char [31],(char *[31])0>(
         &v26,
         (const char (*)[31])"onSetGameTimeEvent, game_time:");
  v6 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v5, &event->game_time);
  v7 = common::milog::MiLogStream::operator<<<char [6],(char *[6])0>(v6, (const char (*)[6])" uid:");
  if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
    __asan_report_load8();
  *(_DWORD *)(v2 + 48) = Player::getUid(this->player_);
  common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v7, (const unsigned int *)(v2 + 48));
  common::milog::MiLogStream::~MiLogStream(&v26);
  ServiceBox::findService<GameserverService>();
  GameserverService::getConfig((GameserverService *const)(v2 + 128));
  lua_config_mgr = &std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 128))->design_config.lua_config_mgr;
  std::shared_ptr<Config>::~shared_ptr((std::shared_ptr<Config> *const)(v2 + 128));
  EventUtil::createEvent((data::EventType)(v2 + 64));
  v8 = 0LL;
  if ( std::operator==<Event>((const std::shared_ptr<Event> *)(v2 + 64), 0LL) )
  {
    common::milog::MiLogStream::create(
      &v26,
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/scene/player_scene_comp.cpp",
      "onSetGameTimeEvent",
      6297);
    common::milog::MiLogStream::operator<<<char [40],(char *[40])0>(
      &v26,
      (const char (*)[40])"createEvent(EVENT_SET_GAME_TIME) failed");
    common::milog::MiLogStream::~MiLogStream(&v26);
  }
  else
  {
    if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
      __asan_report_load8();
    Uid = Player::getUid(this->player_);
    v10 = std::__shared_ptr_access<Event,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Event,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 64));
    v11 = *(_BYTE *)(((unsigned __int64)&v10->uid >> 3) + 0x7FFF8000);
    if ( v11 != 0 && (char)((((_BYTE)v10 + 60) & 7) + 3) >= v11 )
    {
      LOBYTE(v8) = v11 != 0;
      __asan_report_store4(&v10->uid, v8, (_BYTE)v10);
    }
    v10->uid = Uid;
    group_id_set = LuaConfigMgr::getGroupIdSetByRegisterEventType(lua_config_mgr, EVENT_SET_GAME_TIME);
    __for_range = group_id_set;
    __for_begin._M_cur = std::unordered_set<unsigned int>::begin(group_id_set)._M_cur;
    __for_end._M_cur = std::unordered_set<unsigned int>::end(group_id_set)._M_cur;
    while ( std::__detail::operator!=<unsigned int,false>(&__for_begin, &__for_end) )
    {
      v12 = std::__detail::_Node_const_iterator<unsigned int,true,false>::operator*(&__for_begin);
      v13 = v12;
      if ( *(_BYTE *)(((unsigned __int64)v12 >> 3) + 0x7FFF8000) != 0
        && (char)(((unsigned __int8)v12 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)v12 >> 3) + 0x7FFF8000) )
      {
        __asan_report_load4(v12);
      }
      *(_DWORD *)(v2 + 32) = *v13;
      *(_DWORD *)(v2 + 48) = LuaConfigMgr::getSceneIdByGroupId(lua_config_mgr, *(_DWORD *)(v2 + 32));
      PlayerSceneComp::getPersonalScene((PlayerSceneComp *const)(v2 + 96), (uint32_t)this);
      if ( std::operator==<Scene>(0LL, (const std::shared_ptr<Scene> *)(v2 + 96)) )
      {
        common::milog::MiLogStream::create(
          &v26,
          &common::milog::MiLogDefault::default_log_obj_,
          4u,
          "./src/scene/player_scene_comp.cpp",
          "onSetGameTimeEvent",
          6309);
        v14 = common::milog::MiLogStream::operator<<<char [11],(char *[11])0>(&v26, (const char (*)[11])off_251885E0);
        v15 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                v14,
                (const unsigned int *)(v2 + 48));
        v16 = common::milog::MiLogStream::operator<<<char [9],(char *[9])0>(v15, (const char (*)[9])" nullptr");
        v17 = common::milog::MiLogStream::operator<<<char [12],(char *[12])0>(v16, (const char (*)[12])" for group:");
        common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v17, (const unsigned int *)(v2 + 32));
        common::milog::MiLogStream::~MiLogStream(&v26);
      }
      else
      {
        v18 = std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 96));
        BlockGroupComp = (unsigned int)Scene::getBlockGroupComp(v18);
        SceneBlockGroupComp::getActiveGroup((SceneBlockGroupComp *const)(v2 + 128), BlockGroupComp);
        if ( std::operator!=<Group>(0LL, (const std::shared_ptr<Group> *)(v2 + 128)) )
        {
          v20 = std::__shared_ptr_access<Group,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Group,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 128));
          Group::handleEvent(v20, (EventPtr *)(v2 + 64));
        }
        std::shared_ptr<Group>::~shared_ptr((std::shared_ptr<Group> *const)(v2 + 128));
      }
      std::shared_ptr<Scene>::~shared_ptr((std::shared_ptr<Scene> *const)(v2 + 96));
      std::__detail::_Node_const_iterator<unsigned int,true,false>::operator++(&__for_begin);
    }
  }
  std::shared_ptr<Event>::~shared_ptr((std::shared_ptr<Event> *const)(v2 + 64));
  if ( v27 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8010) = 0;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8010) = -168430091;
  }
};

// Line 6321: range 0000000013E7C5F8-0000000013E7C7FA
void __cdecl PlayerSceneComp::notifyAreaPlayData(PlayerSceneComp *const this)
{
  unsigned __int64 v1; // rbx
  __int64 v2; // rax
  unsigned __int64 v3; // r12
  PlayerRegionalPlayComp *RegionalPlayComp; // rax
  uint32_t LastPlayType; // eax
  signed int area_play_type; // [rsp+1Ch] [rbp-84h]
  char v7[128]; // [rsp+20h] [rbp-80h] BYREF

  v1 = (unsigned __int64)v7;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_1(96LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "1 32 32 11 notify:6322";
  *(_QWORD *)(v1 + 16) = PlayerSceneComp::notifyAreaPlayData;
  v3 = v1 >> 3;
  *(_DWORD *)(v3 + 2147450880) = -235802127;
  *(_DWORD *)(v3 + 2147450888) = -202116109;
  proto::AreaPlayInfoNotify::AreaPlayInfoNotify((proto::AreaPlayInfoNotify *const)(v1 + 32));
  if ( *(_BYTE *)(((unsigned __int64)&this->last_area_play_type_ >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->last_area_play_type_ >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4(&this->last_area_play_type_);
  }
  area_play_type = this->last_area_play_type_;
  proto::AreaPlayInfoNotify::set_area_play_type(
    (proto::AreaPlayInfoNotify *const)(v1 + 32),
    (proto::AreaPlayType)area_play_type);
  if ( area_play_type == 2 )
  {
    if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
      __asan_report_load8();
    RegionalPlayComp = Player::getRegionalPlayComp(this->player_);
    LastPlayType = PlayerRegionalPlayComp::getLastPlayType(RegionalPlayComp);
    proto::AreaPlayInfoNotify::set_detail_play_type((proto::AreaPlayInfoNotify *const)(v1 + 32), LastPlayType);
  }
  if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
    __asan_report_load8();
  Player::sendProto(this->player_, (const google::protobuf::Message *)(v1 + 32));
  proto::AreaPlayInfoNotify::~AreaPlayInfoNotify((proto::AreaPlayInfoNotify *const)(v1 + 32));
  if ( v7 == (char *)v1 )
  {
    *(_DWORD *)((v1 >> 3) + 0x7FFF8000) = 0;
    *(_DWORD *)((v1 >> 3) + 0x7FFF8008) = 0;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v1 >> 3) + 0x7FFF8008) = -168430091;
  }
};

// Line 6335: range 0000000013E7C7FC-0000000013E7CF95
void __fastcall PlayerSceneComp::registerGroupsByLevelTagId(PlayerSceneComp *const this, uint32_t level_tag_id)
{
  unsigned __int64 v2; // r13
  __int64 v3; // rax
  _DWORD *v4; // r12
  std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v5; // rax
  common::milog::MiLogStream *v6; // rax
  common::milog::MiLogStream *v7; // rax
  common::milog::MiLogStream *v8; // rcx
  common::milog::MiLogStream *v9; // rax
  common::milog::MiLogStream *v10; // rax
  common::milog::MiLogStream *v11; // rax
  common::milog::MiLogStream *v12; // rcx
  Scene *v13; // rax
  unsigned __int64 BlockGroupComp; // rax
  unsigned __int64 v15; // rdx
  common::milog::MiLogStream *v16; // rax
  common::milog::MiLogStream *v17; // rax
  common::milog::MiLogStream *v18; // rax
  common::milog::MiLogStream *v19; // rcx
  common::milog::MiLogStream *v20; // rax
  common::milog::MiLogStream *v21; // rax
  common::milog::MiLogStream *v22; // rax
  common::milog::MiLogStream *v23; // rax
  common::milog::MiLogStream *v24; // r14
  common::milog::MiLogStream *v25; // rcx
  int val; // [rsp+18h] [rbp-148h] BYREF
  uint32_t valid_group_count; // [rsp+1Ch] [rbp-144h]
  std::map<std::shared_ptr<Scene>,std::vector<unsigned int>>::iterator __for_begin; // [rsp+20h] [rbp-140h] BYREF
  std::map<std::shared_ptr<Scene>,std::vector<unsigned int>>::iterator __for_end; // [rsp+28h] [rbp-138h] BYREF
  const data::LevelTagExcelConfig *level_tag_config_ptr; // [rsp+30h] [rbp-130h]
  const std::vector<unsigned int> *groups_vec; // [rsp+38h] [rbp-128h]
  std::map<std::shared_ptr<Scene>,std::vector<unsigned int>> *__for_range; // [rsp+40h] [rbp-120h]
  std::pair<const std::shared_ptr<Scene>,std::vector<unsigned int> > *__in; // [rsp+48h] [rbp-118h]
  std::tuple_element<0,std::pair<const std::shared_ptr<Scene>,std::vector<unsigned int> > >::type *scene_ptr; // [rsp+50h] [rbp-110h]
  std::tuple_element<1,std::pair<const std::shared_ptr<Scene>,std::vector<unsigned int> > >::type *group_vec; // [rsp+58h] [rbp-108h]
  std::shared_ptr<Config> v36; // [rsp+60h] [rbp-100h] BYREF
  common::milog::MiLogStream v37; // [rsp+70h] [rbp-F0h] BYREF
  char v38[208]; // [rsp+90h] [rbp-D0h] BYREF

  v2 = (unsigned __int64)v38;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_2(160LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "3 32 4 17 level_tag_id:6334 48 16 16 group_timer:6336 80 48 20 scene_group_map:6343";
  *(_QWORD *)(v2 + 16) = PlayerSceneComp::registerGroupsByLevelTagId;
  v4 = (_DWORD *)(v2 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = 61956;
  v4[536862722] = 62194;
  v4[536862724] = -202116109;
  *(_DWORD *)(v2 + 32) = level_tag_id;
  common::tools::TimeUtils::Timer::Timer((common::tools::TimeUtils::Timer *const)(v2 + 48));
  ServiceBox::findService<GameserverService>();
  GameserverService::getConfig((GameserverService *const)&v36);
  v5 = std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false> *const)&v36);
  level_tag_config_ptr = data::LevelTagExcelConfigMgrBase::findLevelTagExcelConfig(
                           &v5->design_config.txt_config_mgr.level_tag_config_mgr,
                           *(_DWORD *)(v2 + 32));
  std::shared_ptr<Config>::~shared_ptr(&v36);
  if ( level_tag_config_ptr )
  {
    std::map<std::shared_ptr<Scene>,std::vector<unsigned int>>::map((std::map<std::shared_ptr<Scene>,std::vector<unsigned int>> *const)(v2 + 80));
    groups_vec = &level_tag_config_ptr->load_dynamic_group_list;
    if ( !std::vector<unsigned int>::empty(&level_tag_config_ptr->load_dynamic_group_list) )
    {
      valid_group_count = PlayerSceneComp::getGroupSceneMap(
                            this,
                            groups_vec,
                            (std::map<std::shared_ptr<Scene>,std::vector<unsigned int>> *)(v2 + 80));
      if ( valid_group_count < std::vector<unsigned int>::size(groups_vec) )
      {
        common::milog::MiLogStream::create(
          &v37,
          &common::milog::MiLogDefault::default_log_obj_,
          3u,
          "./src/scene/player_scene_comp.cpp",
          "registerGroupsByLevelTagId",
          6352);
        v9 = common::milog::MiLogStream::operator<<<char [25],(char *[25])0>(
               &v37,
               (const char (*)[25])" get group scene failed.");
        v10 = common::milog::MiLogStream::operator<<<unsigned int>(v9, groups_vec);
        v11 = common::milog::MiLogStream::operator<<<char [15],(char *[15])0>(v10, (const char (*)[15])off_2518A120);
        v12 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                v11,
                (const unsigned int *)(v2 + 32));
        if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
          __asan_report_load8();
        operator<<(v12, this->player_);
        common::milog::MiLogStream::~MiLogStream(&v37);
      }
      __for_range = (std::map<std::shared_ptr<Scene>,std::vector<unsigned int>> *)(v2 + 80);
      __for_begin._M_node = std::map<std::shared_ptr<Scene>,std::vector<unsigned int>>::begin((std::map<std::shared_ptr<Scene>,std::vector<unsigned int>> *const)(v2 + 80))._M_node;
      __for_end._M_node = std::map<std::shared_ptr<Scene>,std::vector<unsigned int>>::end((std::map<std::shared_ptr<Scene>,std::vector<unsigned int>> *const)(v2 + 80))._M_node;
      while ( std::operator!=(&__for_begin, &__for_end) )
      {
        __in = std::_Rb_tree_iterator<std::pair<std::shared_ptr<Scene> const,std::vector<unsigned int>>>::operator*(&__for_begin);
        scene_ptr = std::get<0ul,std::shared_ptr<Scene> const,std::vector<unsigned int>>(__in);
        group_vec = std::get<1ul,std::shared_ptr<Scene> const,std::vector<unsigned int>>(__in);
        if ( !std::operator==<Scene>(0LL, scene_ptr) )
        {
          v13 = std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false> *const)scene_ptr);
          BlockGroupComp = (unsigned __int64)Scene::getBlockGroupComp(v13);
          if ( *(_BYTE *)((BlockGroupComp >> 3) + 0x7FFF8000) )
            BlockGroupComp = __asan_report_load8();
          v15 = *(_QWORD *)BlockGroupComp + 96LL;
          if ( *(_BYTE *)((v15 >> 3) + 0x7FFF8000) )
            BlockGroupComp = __asan_report_load8();
          if ( (*(unsigned int (__fastcall **)(unsigned __int64, std::tuple_element<1,std::pair<const std::shared_ptr<Scene>,std::vector<unsigned int> > >::type *, _QWORD, _QWORD))v15)(
                 BlockGroupComp,
                 group_vec,
                 0LL,
                 0LL) )
          {
            common::milog::MiLogStream::create(
              &v37,
              &common::milog::MiLogDefault::default_log_obj_,
              3u,
              "./src/scene/player_scene_comp.cpp",
              "registerGroupsByLevelTagId",
              6362);
            v16 = common::milog::MiLogStream::operator<<<char [17],(char *[17])0>(
                    &v37,
                    (const char (*)[17])"register groups:");
            v17 = common::milog::MiLogStream::operator<<<unsigned int>(v16, group_vec);
            v18 = common::milog::MiLogStream::operator<<<char [23],(char *[23])0>(
                    v17,
                    (const char (*)[23])" failed for level tag:");
            v19 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                    v18,
                    (const unsigned int *)(v2 + 32));
            if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
              __asan_report_load8();
            operator<<(v19, this->player_);
            common::milog::MiLogStream::~MiLogStream(&v37);
          }
        }
        std::_Rb_tree_iterator<std::pair<std::shared_ptr<Scene> const,std::vector<unsigned int>>>::operator++(&__for_begin);
      }
      common::milog::MiLogStream::create(
        &v37,
        &common::milog::MiLogDefault::default_log_obj_,
        1u,
        "./src/scene/player_scene_comp.cpp",
        "registerGroupsByLevelTagId",
        6365);
      v20 = common::milog::MiLogStream::operator<<<char [20],(char *[20])0>(
              &v37,
              (const char (*)[20])"register level tag:");
      v21 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v20, (const unsigned int *)(v2 + 32));
      v22 = common::milog::MiLogStream::operator<<<char [9],(char *[9])0>(v21, (const char (*)[9])" groups:");
      v23 = common::milog::MiLogStream::operator<<<unsigned int>(v22, groups_vec);
      v24 = common::milog::MiLogStream::operator<<<char [12],(char *[12])0>(v23, (const char (*)[12])" cost_time:");
      val = common::tools::TimeUtils::Timer::time((const common::tools::TimeUtils::Timer *const)(v2 + 48));
      v25 = common::milog::MiLogStream::operator<<<int,(int *)0>(v24, &val);
      if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
        __asan_report_load8();
      operator<<(v25, this->player_);
      common::milog::MiLogStream::~MiLogStream(&v37);
    }
    std::map<std::shared_ptr<Scene>,std::vector<unsigned int>>::~map((std::map<std::shared_ptr<Scene>,std::vector<unsigned int>> *const)(v2 + 80));
  }
  else
  {
    common::milog::MiLogStream::create(
      &v37,
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/scene/player_scene_comp.cpp",
      "registerGroupsByLevelTagId",
      6340);
    v6 = common::milog::MiLogStream::operator<<<char [14],(char *[14])0>(&v37, (const char (*)[14])"level tag id:");
    v7 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v6, (const unsigned int *)(v2 + 32));
    v8 = common::milog::MiLogStream::operator<<<char [19],(char *[19])0>(v7, (const char (*)[19])" config not found.");
    if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
      __asan_report_load8();
    operator<<(v8, this->player_);
    common::milog::MiLogStream::~MiLogStream(&v37);
  }
  common::tools::TimeUtils::Timer::~Timer((common::tools::TimeUtils::Timer *const)(v2 + 48));
  if ( v38 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8008) = 0;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8010) = 0;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8010) = -168430091;
  }
};

// Line 6370: range 0000000013E7CF96-0000000013E7D735
void __fastcall PlayerSceneComp::unregisterGroupsByLevelTagId(PlayerSceneComp *const this, uint32_t level_tag_id)
{
  unsigned __int64 v2; // r13
  __int64 v3; // rax
  _DWORD *v4; // r12
  std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v5; // rax
  common::milog::MiLogStream *v6; // rax
  common::milog::MiLogStream *v7; // rax
  common::milog::MiLogStream *v8; // rcx
  common::milog::MiLogStream *v9; // rax
  common::milog::MiLogStream *v10; // rax
  common::milog::MiLogStream *v11; // rax
  common::milog::MiLogStream *v12; // rcx
  Scene *v13; // rax
  unsigned __int64 BlockGroupComp; // rax
  unsigned __int64 v15; // rdx
  common::milog::MiLogStream *v16; // rax
  common::milog::MiLogStream *v17; // rax
  common::milog::MiLogStream *v18; // rax
  common::milog::MiLogStream *v19; // rcx
  common::milog::MiLogStream *v20; // rax
  common::milog::MiLogStream *v21; // rax
  common::milog::MiLogStream *v22; // rax
  common::milog::MiLogStream *v23; // rax
  common::milog::MiLogStream *v24; // r14
  common::milog::MiLogStream *v25; // rcx
  int val; // [rsp+18h] [rbp-148h] BYREF
  uint32_t valid_group_count; // [rsp+1Ch] [rbp-144h]
  std::map<std::shared_ptr<Scene>,std::vector<unsigned int>>::iterator __for_begin; // [rsp+20h] [rbp-140h] BYREF
  std::map<std::shared_ptr<Scene>,std::vector<unsigned int>>::iterator __for_end; // [rsp+28h] [rbp-138h] BYREF
  const data::LevelTagExcelConfig *level_tag_config_ptr; // [rsp+30h] [rbp-130h]
  const std::vector<unsigned int> *unload_groups_vec; // [rsp+38h] [rbp-128h]
  std::map<std::shared_ptr<Scene>,std::vector<unsigned int>> *__for_range; // [rsp+40h] [rbp-120h]
  std::pair<const std::shared_ptr<Scene>,std::vector<unsigned int> > *__in; // [rsp+48h] [rbp-118h]
  std::tuple_element<0,std::pair<const std::shared_ptr<Scene>,std::vector<unsigned int> > >::type *scene_ptr; // [rsp+50h] [rbp-110h]
  std::tuple_element<1,std::pair<const std::shared_ptr<Scene>,std::vector<unsigned int> > >::type *group_vec; // [rsp+58h] [rbp-108h]
  std::shared_ptr<Config> v36; // [rsp+60h] [rbp-100h] BYREF
  common::milog::MiLogStream v37; // [rsp+70h] [rbp-F0h] BYREF
  char v38[208]; // [rsp+90h] [rbp-D0h] BYREF

  v2 = (unsigned __int64)v38;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_2(160LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "3 32 4 17 level_tag_id:6369 48 16 16 group_timer:6375 80 48 20 scene_group_map:6382";
  *(_QWORD *)(v2 + 16) = PlayerSceneComp::unregisterGroupsByLevelTagId;
  v4 = (_DWORD *)(v2 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = 61956;
  v4[536862722] = 62194;
  v4[536862724] = -202116109;
  *(_DWORD *)(v2 + 32) = level_tag_id;
  if ( *(_DWORD *)(v2 + 32) )
  {
    common::tools::TimeUtils::Timer::Timer((common::tools::TimeUtils::Timer *const)(v2 + 48));
    ServiceBox::findService<GameserverService>();
    GameserverService::getConfig((GameserverService *const)&v36);
    v5 = std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false> *const)&v36);
    level_tag_config_ptr = data::LevelTagExcelConfigMgrBase::findLevelTagExcelConfig(
                             &v5->design_config.txt_config_mgr.level_tag_config_mgr,
                             *(_DWORD *)(v2 + 32));
    std::shared_ptr<Config>::~shared_ptr(&v36);
    if ( level_tag_config_ptr )
    {
      std::map<std::shared_ptr<Scene>,std::vector<unsigned int>>::map((std::map<std::shared_ptr<Scene>,std::vector<unsigned int>> *const)(v2 + 80));
      unload_groups_vec = &level_tag_config_ptr->load_dynamic_group_list;
      if ( !std::vector<unsigned int>::empty(&level_tag_config_ptr->load_dynamic_group_list) )
      {
        valid_group_count = PlayerSceneComp::getGroupSceneMap(
                              this,
                              unload_groups_vec,
                              (std::map<std::shared_ptr<Scene>,std::vector<unsigned int>> *)(v2 + 80));
        if ( valid_group_count < std::vector<unsigned int>::size(unload_groups_vec) )
        {
          common::milog::MiLogStream::create(
            &v37,
            &common::milog::MiLogDefault::default_log_obj_,
            3u,
            "./src/scene/player_scene_comp.cpp",
            "unregisterGroupsByLevelTagId",
            6391);
          v9 = common::milog::MiLogStream::operator<<<char [25],(char *[25])0>(
                 &v37,
                 (const char (*)[25])" get group scene failed.");
          v10 = common::milog::MiLogStream::operator<<<unsigned int>(v9, unload_groups_vec);
          v11 = common::milog::MiLogStream::operator<<<char [15],(char *[15])0>(v10, (const char (*)[15])off_2518A120);
          v12 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                  v11,
                  (const unsigned int *)(v2 + 32));
          if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
            __asan_report_load8();
          operator<<(v12, this->player_);
          common::milog::MiLogStream::~MiLogStream(&v37);
        }
        __for_range = (std::map<std::shared_ptr<Scene>,std::vector<unsigned int>> *)(v2 + 80);
        __for_begin._M_node = std::map<std::shared_ptr<Scene>,std::vector<unsigned int>>::begin((std::map<std::shared_ptr<Scene>,std::vector<unsigned int>> *const)(v2 + 80))._M_node;
        __for_end._M_node = std::map<std::shared_ptr<Scene>,std::vector<unsigned int>>::end((std::map<std::shared_ptr<Scene>,std::vector<unsigned int>> *const)(v2 + 80))._M_node;
        while ( std::operator!=(&__for_begin, &__for_end) )
        {
          __in = std::_Rb_tree_iterator<std::pair<std::shared_ptr<Scene> const,std::vector<unsigned int>>>::operator*(&__for_begin);
          scene_ptr = std::get<0ul,std::shared_ptr<Scene> const,std::vector<unsigned int>>(__in);
          group_vec = std::get<1ul,std::shared_ptr<Scene> const,std::vector<unsigned int>>(__in);
          if ( !std::operator==<Scene>(0LL, scene_ptr) )
          {
            v13 = std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false> *const)scene_ptr);
            BlockGroupComp = (unsigned __int64)Scene::getBlockGroupComp(v13);
            if ( *(_BYTE *)((BlockGroupComp >> 3) + 0x7FFF8000) )
              BlockGroupComp = __asan_report_load8();
            v15 = *(_QWORD *)BlockGroupComp + 104LL;
            if ( *(_BYTE *)((v15 >> 3) + 0x7FFF8000) )
              BlockGroupComp = __asan_report_load8();
            if ( (*(unsigned int (__fastcall **)(unsigned __int64, std::tuple_element<1,std::pair<const std::shared_ptr<Scene>,std::vector<unsigned int> > >::type *, __int64))v15)(
                   BlockGroupComp,
                   group_vec,
                   1LL) )
            {
              common::milog::MiLogStream::create(
                &v37,
                &common::milog::MiLogDefault::default_log_obj_,
                3u,
                "./src/scene/player_scene_comp.cpp",
                "unregisterGroupsByLevelTagId",
                6401);
              v16 = common::milog::MiLogStream::operator<<<char [19],(char *[19])0>(
                      &v37,
                      (const char (*)[19])"unregister groups:");
              v17 = common::milog::MiLogStream::operator<<<unsigned int>(v16, group_vec);
              v18 = common::milog::MiLogStream::operator<<<char [23],(char *[23])0>(
                      v17,
                      (const char (*)[23])" failed for level tag:");
              v19 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                      v18,
                      (const unsigned int *)(v2 + 32));
              if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
                __asan_report_load8();
              operator<<(v19, this->player_);
              common::milog::MiLogStream::~MiLogStream(&v37);
            }
          }
          std::_Rb_tree_iterator<std::pair<std::shared_ptr<Scene> const,std::vector<unsigned int>>>::operator++(&__for_begin);
        }
        common::milog::MiLogStream::create(
          &v37,
          &common::milog::MiLogDefault::default_log_obj_,
          1u,
          "./src/scene/player_scene_comp.cpp",
          "unregisterGroupsByLevelTagId",
          6404);
        v20 = common::milog::MiLogStream::operator<<<char [22],(char *[22])0>(
                &v37,
                (const char (*)[22])"unregister level tag:");
        v21 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                v20,
                (const unsigned int *)(v2 + 32));
        v22 = common::milog::MiLogStream::operator<<<char [9],(char *[9])0>(v21, (const char (*)[9])" groups:");
        v23 = common::milog::MiLogStream::operator<<<unsigned int>(v22, unload_groups_vec);
        v24 = common::milog::MiLogStream::operator<<<char [12],(char *[12])0>(v23, (const char (*)[12])" cost_time:");
        val = common::tools::TimeUtils::Timer::time((const common::tools::TimeUtils::Timer *const)(v2 + 48));
        v25 = common::milog::MiLogStream::operator<<<int,(int *)0>(v24, &val);
        if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
          __asan_report_load8();
        operator<<(v25, this->player_);
        common::milog::MiLogStream::~MiLogStream(&v37);
      }
      std::map<std::shared_ptr<Scene>,std::vector<unsigned int>>::~map((std::map<std::shared_ptr<Scene>,std::vector<unsigned int>> *const)(v2 + 80));
    }
    else
    {
      common::milog::MiLogStream::create(
        &v37,
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/scene/player_scene_comp.cpp",
        "unregisterGroupsByLevelTagId",
        6379);
      v6 = common::milog::MiLogStream::operator<<<char [14],(char *[14])0>(&v37, (const char (*)[14])"level tag id:");
      v7 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v6, (const unsigned int *)(v2 + 32));
      v8 = common::milog::MiLogStream::operator<<<char [19],(char *[19])0>(v7, (const char (*)[19])" config not found.");
      if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
        __asan_report_load8();
      operator<<(v8, this->player_);
      common::milog::MiLogStream::~MiLogStream(&v37);
    }
    common::tools::TimeUtils::Timer::~Timer((common::tools::TimeUtils::Timer *const)(v2 + 48));
  }
  if ( v38 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8008) = 0;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8010) = 0;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8010) = -168430091;
  }
};

// Line 6408: range 0000000013E7D736-0000000013E7DE90
void __fastcall PlayerSceneComp::resetPlayerPersistentDungeonByMuip(PlayerSceneComp *const this, uint32_t scene_id)
{
  unsigned __int64 v2; // r12
  __int64 v3; // rax
  _DWORD *v4; // r13
  std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v5; // rax
  bool v6; // r14
  common::milog::MiLogStream *v7; // rax
  common::milog::MiLogStream *v8; // rcx
  std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v9; // rax
  common::milog::MiLogStream *v10; // rax
  common::milog::MiLogStream *v11; // rax
  common::milog::MiLogStream *v12; // rcx
  PersistentDungeonScene *v13; // rax
  bool v14; // r14
  PlayerDungeonComp *DungeonComp; // rax
  std::unordered_map<unsigned int,GroupScriptConfig>::const_iterator __for_begin; // [rsp+10h] [rbp-120h] BYREF
  std::unordered_map<unsigned int,GroupScriptConfig>::const_iterator __for_end; // [rsp+18h] [rbp-118h] BYREF
  const SceneScriptConfig *scene_script_config_ptr; // [rsp+20h] [rbp-110h]
  BlockDataMgr *block_data_mgr; // [rsp+28h] [rbp-108h]
  const std::unordered_map<unsigned int,GroupScriptConfig> *__for_range; // [rsp+30h] [rbp-100h]
  const std::pair<unsigned int const,GroupScriptConfig> *v21; // [rsp+38h] [rbp-F8h]
  std::tuple_element<0,const std::pair<unsigned int const,GroupScriptConfig> >::type *group_id; // [rsp+40h] [rbp-F0h]
  std::tuple_element<1,const std::pair<unsigned int const,GroupScriptConfig> >::type *_; // [rsp+48h] [rbp-E8h]
  std::shared_ptr<Config> v24; // [rsp+50h] [rbp-E0h] BYREF
  common::milog::MiLogStream v25; // [rsp+60h] [rbp-D0h] BYREF
  char v26[176]; // [rsp+80h] [rbp-B0h] BYREF

  v2 = (unsigned __int64)v26;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_1(128LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "3 48 4 13 scene_id:6407 64 16 22 dungeon_scene_ptr:6426 96 16 33 persistent_dungeon_scene_ptr:6427";
  *(_QWORD *)(v2 + 16) = PlayerSceneComp::resetPlayerPersistentDungeonByMuip;
  v4 = (_DWORD *)(v2 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = -234556943;
  v4[536862722] = -219021312;
  v4[536862723] = -202178560;
  *(_DWORD *)(v2 + 48) = scene_id;
  ServiceBox::findService<GameserverService>();
  GameserverService::getConfig((GameserverService *const)&v24);
  v5 = std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false> *const)&v24);
  v6 = !SceneExcelConfigMgr::isPersistentDungeonScene(
          &v5->design_config.txt_config_mgr.scene_config_mgr,
          *(_DWORD *)(v2 + 48));
  std::shared_ptr<Config>::~shared_ptr(&v24);
  if ( v6 )
  {
    common::milog::MiLogStream::create(
      &v25,
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/scene/player_scene_comp.cpp",
      "resetPlayerPersistentDungeonByMuip",
      6411);
    v7 = common::milog::MiLogStream::operator<<<char [34],(char *[34])0>(&v25, (const char (*)[34])off_2518A4A0);
    v8 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v7, (const unsigned int *)(v2 + 48));
    if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
      __asan_report_load8();
LABEL_7:
    operator<<(v8, this->player_);
    common::milog::MiLogStream::~MiLogStream(&v25);
    goto LABEL_30;
  }
  ServiceBox::findService<GameserverService>();
  GameserverService::getConfig((GameserverService *const)&v24);
  v9 = std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false> *const)&v24);
  scene_script_config_ptr = LuaConfigMgr::findSceneScriptConfig(&v9->design_config.lua_config_mgr, *(_DWORD *)(v2 + 48));
  std::shared_ptr<Config>::~shared_ptr(&v24);
  if ( !scene_script_config_ptr )
  {
    common::milog::MiLogStream::create(
      &v25,
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/scene/player_scene_comp.cpp",
      "resetPlayerPersistentDungeonByMuip",
      6417);
    v10 = common::milog::MiLogStream::operator<<<char [38],(char *[38])0>(
            &v25,
            (const char (*)[38])"fail to find script_config, scene_id:");
    v8 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v10, (const unsigned int *)(v2 + 48));
    if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
      __asan_report_load8();
    goto LABEL_7;
  }
  std::unordered_map<unsigned int,proto::SceneBin>::erase(
    &this->persistent_dungeon_scene_bin_map_,
    (const std::unordered_map<unsigned int,proto::SceneBin>::key_type *)(v2 + 48));
  if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
    __asan_report_load8();
  block_data_mgr = Player::getBlockDataMgr(this->player_);
  __for_range = &scene_script_config_ptr->group_config_map;
  __for_begin._M_cur = std::unordered_map<unsigned int,GroupScriptConfig>::begin(&scene_script_config_ptr->group_config_map)._M_cur;
  __for_end._M_cur = std::unordered_map<unsigned int,GroupScriptConfig>::end(&scene_script_config_ptr->group_config_map)._M_cur;
  while ( std::__detail::operator!=<std::pair<unsigned int const,GroupScriptConfig>,false>(&__for_begin, &__for_end) )
  {
    v21 = std::__detail::_Node_const_iterator<std::pair<unsigned int const,GroupScriptConfig>,false,false>::operator*(&__for_begin);
    group_id = std::get<0ul,unsigned int const,GroupScriptConfig>(v21);
    _ = (std::tuple_element<1,const std::pair<unsigned int const,GroupScriptConfig> >::type *)std::get<1ul,unsigned int const,GroupScriptConfig>(v21);
    if ( *(_BYTE *)(((unsigned __int64)group_id >> 3) + 0x7FFF8000) != 0
      && (char)(((unsigned __int8)group_id & 7) + 3) >= *(_BYTE *)(((unsigned __int64)group_id >> 3) + 0x7FFF8000) )
    {
      __asan_report_load4(group_id);
    }
    BlockDataMgr::clearGroupBin(block_data_mgr, *(_DWORD *)(v2 + 48), *group_id);
    std::__detail::_Node_const_iterator<std::pair<unsigned int const,GroupScriptConfig>,false,false>::operator++(&__for_begin);
  }
  PlayerSceneComp::getCreatedPersistentDungeonScenePtr(
    (const PlayerSceneComp *const)(v2 + 64),
    (__int64)this,
    *(_DWORD *)(v2 + 48));
  std::dynamic_pointer_cast<PersistentDungeonScene,DungeonScene>((const std::shared_ptr<DungeonScene> *)(v2 + 96));
  if ( std::operator==<PersistentDungeonScene>(0LL, (const std::shared_ptr<PersistentDungeonScene> *)(v2 + 96)) )
  {
    common::milog::MiLogStream::create(
      &v25,
      &common::milog::MiLogDefault::default_log_obj_,
      1u,
      "./src/scene/player_scene_comp.cpp",
      "resetPlayerPersistentDungeonByMuip",
      6430);
    v11 = common::milog::MiLogStream::operator<<<char [36],(char *[36])0>(
            &v25,
            (const char (*)[36])"no living persistent dungeon scene:");
    v12 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v11, (const unsigned int *)(v2 + 48));
    if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
      __asan_report_load8();
    operator<<(v12, this->player_);
    common::milog::MiLogStream::~MiLogStream(&v25);
  }
  else
  {
    v13 = std::__shared_ptr_access<PersistentDungeonScene,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<PersistentDungeonScene,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 96));
    PersistentDungeonScene::setIsMarkReset(v13, 1);
    if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
      __asan_report_load8();
    Player::getDungeonComp(this->player_);
    PlayerDungeonComp::getCurDungeon((PlayerDungeonComp *const)&v24);
    v14 = std::operator==<DungeonScene,DungeonScene>(
            (const std::shared_ptr<DungeonScene> *)&v24,
            (const std::shared_ptr<DungeonScene> *)(v2 + 64));
    std::shared_ptr<DungeonScene>::~shared_ptr((std::shared_ptr<DungeonScene> *const)&v24);
    if ( v14 )
    {
      if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
        __asan_report_load8();
      DungeonComp = Player::getDungeonComp(this->player_);
      PlayerDungeonComp::quitCurDungeon(DungeonComp, DUNGEON_QUIT_REASON_MUIP);
    }
  }
  std::shared_ptr<PersistentDungeonScene>::~shared_ptr((std::shared_ptr<PersistentDungeonScene> *const)(v2 + 96));
  std::shared_ptr<DungeonScene>::~shared_ptr((std::shared_ptr<DungeonScene> *const)(v2 + 64));
LABEL_30:
  if ( v26 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
};

// Line 6443: range 0000000013E7DE92-0000000013E7EAAC
void __fastcall PlayerSceneComp::resetPlayerPosInPersistentDungeonByMuip(
        PlayerSceneComp *const this,
        uint32_t scene_id)
{
  unsigned __int64 v2; // r13
  __int64 v3; // rax
  _DWORD *v4; // r12
  std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v5; // rax
  bool v6; // r14
  common::milog::MiLogStream *v7; // rax
  common::milog::MiLogStream *v8; // rcx
  std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v9; // rax
  common::milog::MiLogStream *v10; // rax
  common::milog::MiLogStream *v11; // rax
  common::milog::MiLogStream *v12; // rcx
  common::milog::MiLogStream *v13; // rax
  common::milog::MiLogStream *v14; // rcx
  proto::VectorBin *v15; // rax
  proto::VectorBin *v16; // rax
  proto::VectorBin *valid_pos; // rax
  proto::VectorBin *valid_rot; // rax
  bool v19; // r14
  PlayerDungeonComp *DungeonComp; // rax
  uint32_t v21; // r14d
  common::milog::MiLogStream *v22; // rax
  common::milog::MiLogStream *v23; // rcx
  unsigned __int64 v24; // rax
  __int64 v25; // rdi
  __int64 v26; // rdi
  __int64 v27; // rdi
  common::milog::MiLogStream *v28; // rax
  common::milog::MiLogStream *v29; // rcx
  const SceneScriptConfig *scene_script_config_ptr; // [rsp+18h] [rbp-158h]
  common::tools::transcribe_cv_t_2 *dungeon_scene_bin_ptr; // [rsp+20h] [rbp-150h]
  proto::ScenePlayerLocationBin *location; // [rsp+28h] [rbp-148h]
  std::shared_ptr<DungeonScene> __a; // [rsp+30h] [rbp-140h] BYREF
  common::milog::MiLogStream v35; // [rsp+40h] [rbp-130h] BYREF
  char v36[272]; // [rsp+60h] [rbp-110h] BYREF

  v2 = (unsigned __int64)v36;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_2(224LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "5 32 4 13 scene_id:6442 48 16 22 dungeon_scene_ptr:6461 80 16 33 persistent_dungeon_scene_ptr:64"
                        "62 112 16 24 player_location_ptr:6485 144 48 20 player_location:6455";
  *(_QWORD *)(v2 + 16) = PlayerSceneComp::resetPlayerPosInPersistentDungeonByMuip;
  v4 = (_DWORD *)(v2 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = 61956;
  v4[536862722] = 62194;
  v4[536862723] = 62194;
  v4[536862724] = 62194;
  v4[536862726] = -202116109;
  *(_DWORD *)(v2 + 32) = scene_id;
  ServiceBox::findService<GameserverService>();
  GameserverService::getConfig((GameserverService *const)(v2 + 112));
  v5 = std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 112));
  v6 = !SceneExcelConfigMgr::isPersistentDungeonScene(
          &v5->design_config.txt_config_mgr.scene_config_mgr,
          *(_DWORD *)(v2 + 32));
  std::shared_ptr<Config>::~shared_ptr((std::shared_ptr<Config> *const)(v2 + 112));
  if ( v6 )
  {
    common::milog::MiLogStream::create(
      &v35,
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/scene/player_scene_comp.cpp",
      "resetPlayerPosInPersistentDungeonByMuip",
      6446);
    v7 = common::milog::MiLogStream::operator<<<char [34],(char *[34])0>(&v35, (const char (*)[34])off_2518A4A0);
    v8 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v7, (const unsigned int *)(v2 + 32));
    if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
      __asan_report_load8();
LABEL_7:
    operator<<(v8, this->player_);
    common::milog::MiLogStream::~MiLogStream(&v35);
    goto LABEL_43;
  }
  ServiceBox::findService<GameserverService>();
  GameserverService::getConfig((GameserverService *const)(v2 + 112));
  v9 = std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 112));
  scene_script_config_ptr = LuaConfigMgr::findSceneScriptConfig(&v9->design_config.lua_config_mgr, *(_DWORD *)(v2 + 32));
  std::shared_ptr<Config>::~shared_ptr((std::shared_ptr<Config> *const)(v2 + 112));
  if ( !scene_script_config_ptr )
  {
    common::milog::MiLogStream::create(
      &v35,
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/scene/player_scene_comp.cpp",
      "resetPlayerPosInPersistentDungeonByMuip",
      6452);
    v10 = common::milog::MiLogStream::operator<<<char [38],(char *[38])0>(
            &v35,
            (const char (*)[38])"fail to find script_config, scene_id:");
    v8 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v10, (const unsigned int *)(v2 + 32));
    if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
      __asan_report_load8();
    goto LABEL_7;
  }
  ScenePlayerLocation::ScenePlayerLocation((ScenePlayerLocation *const)(v2 + 144));
  if ( (((unsigned __int8)scene_script_config_ptr - 52) & 7) >= *(_BYTE *)(((unsigned __int64)&scene_script_config_ptr->born_pos >> 3)
                                                                         + 0x7FFF8000)
    && *(_BYTE *)(((unsigned __int64)&scene_script_config_ptr->born_pos >> 3) + 0x7FFF8000) != 0
    || *(_BYTE *)((((unsigned __int64)&scene_script_config_ptr->born_pos.z + 3) >> 3) + 0x7FFF8000) != 0
    && (((unsigned __int8)scene_script_config_ptr - 41) & 7) >= *(_BYTE *)((((unsigned __int64)&scene_script_config_ptr->born_pos.z
                                                                           + 3) >> 3)
                                                                         + 0x7FFF8000) )
  {
    __asan_report_load_n(&scene_script_config_ptr->born_pos, 12LL);
  }
  *(_QWORD *)(v2 + 144) = *(_QWORD *)&scene_script_config_ptr->born_pos.x;
  *(float *)(v2 + 152) = scene_script_config_ptr->born_pos.z;
  if ( *(char *)(((unsigned __int64)&scene_script_config_ptr->born_rot >> 3) + 0x7FFF8000) < 0
    || *(_BYTE *)((((unsigned __int64)&scene_script_config_ptr->born_rot.z + 3) >> 3) + 0x7FFF8000) != 0
    && (((unsigned __int8)scene_script_config_ptr - 29) & 7) >= *(_BYTE *)((((unsigned __int64)&scene_script_config_ptr->born_rot.z
                                                                           + 3) >> 3)
                                                                         + 0x7FFF8000) )
  {
    __asan_report_load_n(&scene_script_config_ptr->born_rot, 12LL);
  }
  *(_QWORD *)(v2 + 156) = *(_QWORD *)&scene_script_config_ptr->born_rot.x;
  *(float *)(v2 + 164) = scene_script_config_ptr->born_rot.z;
  *(_QWORD *)(v2 + 168) = *(_QWORD *)&scene_script_config_ptr->born_pos.x;
  *(float *)(v2 + 176) = scene_script_config_ptr->born_pos.z;
  *(_QWORD *)(v2 + 180) = *(_QWORD *)&scene_script_config_ptr->born_rot.x;
  *(float *)(v2 + 188) = scene_script_config_ptr->born_rot.z;
  PlayerSceneComp::getCreatedPersistentDungeonScenePtr(
    (const PlayerSceneComp *const)(v2 + 48),
    (__int64)this,
    *(_DWORD *)(v2 + 32));
  std::dynamic_pointer_cast<PersistentDungeonScene,DungeonScene>((const std::shared_ptr<DungeonScene> *)(v2 + 80));
  if ( std::operator==<PersistentDungeonScene>(0LL, (const std::shared_ptr<PersistentDungeonScene> *)(v2 + 80)) )
  {
    common::milog::MiLogStream::create(
      &v35,
      &common::milog::MiLogDefault::default_log_obj_,
      1u,
      "./src/scene/player_scene_comp.cpp",
      "resetPlayerPosInPersistentDungeonByMuip",
      6465);
    v11 = common::milog::MiLogStream::operator<<<char [36],(char *[36])0>(
            &v35,
            (const char (*)[36])"no living persistent dungeon scene:");
    v12 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v11, (const unsigned int *)(v2 + 32));
    if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
      __asan_report_load8();
    operator<<(v12, this->player_);
    common::milog::MiLogStream::~MiLogStream(&v35);
    dungeon_scene_bin_ptr = common::tools::MiscUtils::findMapValuePointer<std::unordered_map<unsigned int,proto::SceneBin>>(
                              &this->persistent_dungeon_scene_bin_map_,
                              (const std::unordered_map<unsigned int,proto::SceneBin>::key_type *)(v2 + 32));
    if ( dungeon_scene_bin_ptr )
    {
      location = proto::SceneBin::mutable_owner_player_location(dungeon_scene_bin_ptr);
      v15 = proto::ScenePlayerLocationBin::mutable_cur_pos(location);
      Vector3::toBin((const Vector3 *const)(v2 + 144), v15);
      v16 = proto::ScenePlayerLocationBin::mutable_cur_rot(location);
      Vector3::toBin((const Vector3 *const)(v2 + 156), v16);
      valid_pos = proto::ScenePlayerLocationBin::mutable_last_valid_pos(location);
      Vector3::toBin((const Vector3 *const)(v2 + 168), valid_pos);
      valid_rot = proto::ScenePlayerLocationBin::mutable_last_valid_rot(location);
      Vector3::toBin((const Vector3 *const)(v2 + 180), valid_rot);
    }
    else
    {
      common::milog::MiLogStream::create(
        &v35,
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/scene/player_scene_comp.cpp",
        "resetPlayerPosInPersistentDungeonByMuip",
        6469);
      v13 = common::milog::MiLogStream::operator<<<char [42],(char *[42])0>(
              &v35,
              (const char (*)[42])"fail to find dungeon scene bin, scene_id:");
      v14 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v13, (const unsigned int *)(v2 + 32));
      if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
        __asan_report_load8();
      operator<<(v14, this->player_);
      common::milog::MiLogStream::~MiLogStream(&v35);
    }
  }
  else
  {
    if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
      __asan_report_load8();
    Player::getDungeonComp(this->player_);
    PlayerDungeonComp::getCurDungeon((PlayerDungeonComp *const)&__a);
    v19 = std::operator==<DungeonScene,DungeonScene>(&__a, (const std::shared_ptr<DungeonScene> *)(v2 + 48));
    std::shared_ptr<DungeonScene>::~shared_ptr(&__a);
    if ( v19 )
    {
      if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
        __asan_report_load8();
      DungeonComp = Player::getDungeonComp(this->player_);
      PlayerDungeonComp::quitCurDungeon(DungeonComp, DUNGEON_QUIT_REASON_MUIP);
    }
    v21 = (unsigned int)std::__shared_ptr_access<PersistentDungeonScene,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<PersistentDungeonScene,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 80));
    if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
      __asan_report_load8();
    Player::getUid(this->player_);
    Scene::getPlayerLocation((Scene *const)(v2 + 112), v21);
    if ( std::operator==<ScenePlayerLocation>(0LL, (const std::shared_ptr<ScenePlayerLocation> *)(v2 + 112)) )
    {
      common::milog::MiLogStream::create(
        &v35,
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/scene/player_scene_comp.cpp",
        "resetPlayerPosInPersistentDungeonByMuip",
        6488);
      v22 = common::milog::MiLogStream::operator<<<char [40],(char *[40])0>(
              &v35,
              (const char (*)[40])"fail to find player location, scene_id:");
      v23 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v22, (const unsigned int *)(v2 + 32));
      if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
        __asan_report_load8();
      operator<<(v23, this->player_);
      common::milog::MiLogStream::~MiLogStream(&v35);
    }
    else
    {
      v24 = (unsigned __int64)std::__shared_ptr_access<ScenePlayerLocation,(__gnu_cxx::_Lock_policy)2,false,false>::operator*((const std::__shared_ptr_access<ScenePlayerLocation,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 112));
      if ( (char)(v24 & 7) >= *(_BYTE *)((v24 >> 3) + 0x7FFF8000) && *(_BYTE *)((v24 >> 3) + 0x7FFF8000) != 0
        || *(_BYTE *)(((v24 + 47) >> 3) + 0x7FFF8000) != 0
        && (char)((v24 + 47) & 7) >= *(_BYTE *)(((v24 + 47) >> 3) + 0x7FFF8000) )
      {
        v24 = __asan_report_store_n(v24, 48LL);
      }
      v25 = *(_QWORD *)(v2 + 152);
      *(_QWORD *)v24 = *(_QWORD *)(v2 + 144);
      *(_QWORD *)(v24 + 8) = v25;
      v26 = *(_QWORD *)(v2 + 168);
      *(_QWORD *)(v24 + 16) = *(_QWORD *)(v2 + 160);
      *(_QWORD *)(v24 + 24) = v26;
      v27 = *(_QWORD *)(v2 + 184);
      *(_QWORD *)(v24 + 32) = *(_QWORD *)(v2 + 176);
      *(_QWORD *)(v24 + 40) = v27;
      common::milog::MiLogStream::create(
        &v35,
        &common::milog::MiLogDefault::default_log_obj_,
        1u,
        "./src/scene/player_scene_comp.cpp",
        "resetPlayerPosInPersistentDungeonByMuip",
        6492);
      v28 = common::milog::MiLogStream::operator<<<char [41],(char *[41])0>(
              &v35,
              (const char (*)[41])"reset player pos done for dungeon scene:");
      v29 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v28, (const unsigned int *)(v2 + 32));
      if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
        __asan_report_load8();
      operator<<(v29, this->player_);
      common::milog::MiLogStream::~MiLogStream(&v35);
    }
    std::shared_ptr<ScenePlayerLocation>::~shared_ptr((std::shared_ptr<ScenePlayerLocation> *const)(v2 + 112));
  }
  std::shared_ptr<PersistentDungeonScene>::~shared_ptr((std::shared_ptr<PersistentDungeonScene> *const)(v2 + 80));
  std::shared_ptr<DungeonScene>::~shared_ptr((std::shared_ptr<DungeonScene> *const)(v2 + 48));
LABEL_43:
  if ( v36 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8010) = 0;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8018) = 0;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8018) = -168430091;
  }
};

// Line 6496: range 0000000013E7EAAE-0000000013E7F57E
void __fastcall PlayerSceneComp::resetPlayerWayPointInPersistentDungeonByMuip(
        PlayerSceneComp *const this,
        uint32_t scene_id,
        uint32_t way_point_id)
{
  unsigned __int64 v3; // r13
  __int64 v4; // rax
  _DWORD *v5; // r12
  std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v6; // rax
  bool v7; // r14
  common::milog::MiLogStream *v8; // rax
  common::milog::MiLogStream *v9; // rcx
  std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v10; // rax
  bool v11; // r14
  common::milog::MiLogStream *v12; // rax
  common::milog::MiLogStream *v13; // rax
  common::milog::MiLogStream *v14; // rax
  common::milog::MiLogStream *v15; // rax
  common::milog::MiLogStream *v16; // rcx
  common::milog::MiLogStream *v17; // rax
  common::milog::MiLogStream *v18; // rcx
  common::milog::MiLogStream *v19; // rax
  common::milog::MiLogStream *v20; // rcx
  bool v21; // r14
  PlayerDungeonComp *DungeonComp; // rax
  PersistentDungeonScene *v23; // rax
  common::milog::MiLogStream *v24; // rax
  bool is_find; // [rsp+13h] [rbp-17Dh]
  uint32_t now; // [rsp+14h] [rbp-17Ch]
  google::protobuf::RepeatedPtrField<proto::WayPoint>::iterator __for_begin; // [rsp+18h] [rbp-178h] BYREF
  google::protobuf::RepeatedPtrField<proto::WayPoint>::iterator __for_end; // [rsp+20h] [rbp-170h] BYREF
  proto::SceneBin *dungeon_scene_bin_ptr; // [rsp+28h] [rbp-168h]
  proto::DungeonSceneBin *dungeon_scene_bin; // [rsp+30h] [rbp-160h]
  google::protobuf::RepeatedPtrField<proto::WayPoint> *__for_range; // [rsp+38h] [rbp-158h]
  proto::WayPoint *proto_way_point; // [rsp+40h] [rbp-150h]
  proto::WayPoint *new_proto_way_point; // [rsp+48h] [rbp-148h]
  std::shared_ptr<Config> v35; // [rsp+50h] [rbp-140h] BYREF
  common::milog::MiLogStream v36; // [rsp+60h] [rbp-130h] BYREF
  char v37[272]; // [rsp+80h] [rbp-110h] BYREF

  v3 = (unsigned __int64)v37;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_2(224LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "5 48 4 13 scene_id:6495 64 4 17 way_point_id:6495 80 16 22 dungeon_scene_ptr:6520 112 16 33 pers"
                        "istent_dungeon_scene_ptr:6521 144 48 18 way_point_map:6502";
  *(_QWORD *)(v3 + 16) = PlayerSceneComp::resetPlayerWayPointInPersistentDungeonByMuip;
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = -234556943;
  v5[536862722] = 61956;
  v5[536862723] = 62194;
  v5[536862724] = 62194;
  v5[536862726] = -202116109;
  *(_DWORD *)(v3 + 48) = scene_id;
  *(_DWORD *)(v3 + 64) = way_point_id;
  ServiceBox::findService<GameserverService>();
  GameserverService::getConfig((GameserverService *const)&v35);
  v6 = std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false> *const)&v35);
  v7 = !SceneExcelConfigMgr::isPersistentDungeonScene(
          &v6->design_config.txt_config_mgr.scene_config_mgr,
          *(_DWORD *)(v3 + 48));
  std::shared_ptr<Config>::~shared_ptr(&v35);
  if ( !v7 )
  {
    std::map<unsigned int,std::shared_ptr<data::DungeonWayPoint>>::map((std::map<unsigned int,std::shared_ptr<data::DungeonWayPoint>> *const)(v3 + 144));
    ServiceBox::findService<GameserverService>();
    GameserverService::getConfig((GameserverService *const)&v35);
    v10 = std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false> *const)&v35);
    v11 = JsonConfigMgr::findAllScenePoint<data::DungeonWayPoint>(
            &v10->design_config.json_config_mgr,
            *(_DWORD *)(v3 + 48),
            (std::map<unsigned int,std::shared_ptr<data::DungeonWayPoint>> *)(v3 + 144)) != 0;
    std::shared_ptr<Config>::~shared_ptr(&v35);
    if ( v11 )
    {
      common::milog::MiLogStream::create(
        &v36,
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/scene/player_scene_comp.cpp",
        "resetPlayerWayPointInPersistentDungeonByMuip",
        6505);
      v12 = common::milog::MiLogStream::operator<<<char [35],(char *[35])0>(
              &v36,
              (const char (*)[35])"findAllScenePoint fails, scene_id:");
      common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v12, (const unsigned int *)(v3 + 48));
      common::milog::MiLogStream::~MiLogStream(&v36);
LABEL_42:
      std::map<unsigned int,std::shared_ptr<data::DungeonWayPoint>>::~map((std::map<unsigned int,std::shared_ptr<data::DungeonWayPoint>> *const)(v3 + 144));
      goto LABEL_43;
    }
    if ( *(_DWORD *)(v3 + 64) )
    {
      __for_end.it_ = (void *const *)std::map<unsigned int,std::shared_ptr<data::DungeonWayPoint>>::end((std::map<unsigned int,std::shared_ptr<data::DungeonWayPoint>> *const)(v3 + 144))._M_node;
      __for_begin.it_ = (void *const *)std::map<unsigned int,std::shared_ptr<data::DungeonWayPoint>>::find(
                                         (std::map<unsigned int,std::shared_ptr<data::DungeonWayPoint>> *const)(v3 + 144),
                                         (const std::map<unsigned int,std::shared_ptr<data::DungeonWayPoint>>::key_type *)(v3 + 64))._M_node;
      if ( std::operator==(
             (const std::_Rb_tree_iterator<std::pair<unsigned int const,std::shared_ptr<data::DungeonWayPoint> > >::_Self *)&__for_begin,
             (const std::_Rb_tree_iterator<std::pair<unsigned int const,std::shared_ptr<data::DungeonWayPoint> > >::_Self *)&__for_end) )
      {
        common::milog::MiLogStream::create(
          &v36,
          &common::milog::MiLogDefault::default_log_obj_,
          3u,
          "./src/scene/player_scene_comp.cpp",
          "resetPlayerWayPointInPersistentDungeonByMuip",
          6514);
        v13 = common::milog::MiLogStream::operator<<<char [20],(char *[20])0>(
                &v36,
                (const char (*)[20])"invalid way point: ");
        v14 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                v13,
                (const unsigned int *)(v3 + 64));
        v15 = common::milog::MiLogStream::operator<<<char [12],(char *[12])0>(v14, (const char (*)[12])", scene_id:");
        v16 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                v15,
                (const unsigned int *)(v3 + 48));
        if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
          __asan_report_load8();
        operator<<(v16, this->player_);
        common::milog::MiLogStream::~MiLogStream(&v36);
        goto LABEL_42;
      }
    }
    now = common::tools::TimeUtils::getNow();
    PlayerSceneComp::getCreatedPersistentDungeonScenePtr(
      (const PlayerSceneComp *const)(v3 + 80),
      (__int64)this,
      *(_DWORD *)(v3 + 48));
    std::dynamic_pointer_cast<PersistentDungeonScene,DungeonScene>((const std::shared_ptr<DungeonScene> *)(v3 + 112));
    if ( std::operator==<PersistentDungeonScene>(0LL, (const std::shared_ptr<PersistentDungeonScene> *)(v3 + 112)) )
    {
      common::milog::MiLogStream::create(
        &v36,
        &common::milog::MiLogDefault::default_log_obj_,
        1u,
        "./src/scene/player_scene_comp.cpp",
        "resetPlayerWayPointInPersistentDungeonByMuip",
        6525);
      v17 = common::milog::MiLogStream::operator<<<char [36],(char *[36])0>(
              &v36,
              (const char (*)[36])"no living persistent dungeon scene:");
      v18 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v17, (const unsigned int *)(v3 + 48));
      if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
        __asan_report_load8();
      operator<<(v18, this->player_);
      common::milog::MiLogStream::~MiLogStream(&v36);
      dungeon_scene_bin_ptr = common::tools::MiscUtils::findMapValuePointer<std::unordered_map<unsigned int,proto::SceneBin>>(
                                &this->persistent_dungeon_scene_bin_map_,
                                (const std::unordered_map<unsigned int,proto::SceneBin>::key_type *)(v3 + 48));
      if ( dungeon_scene_bin_ptr )
      {
        dungeon_scene_bin = proto::SceneBin::mutable_dungeon_scene_bin(dungeon_scene_bin_ptr);
        if ( *(_DWORD *)(v3 + 64) )
        {
          is_find = 0;
          __for_range = proto::DungeonSceneBin::mutable_activated_way_point_list(dungeon_scene_bin);
          __for_begin.it_ = google::protobuf::RepeatedPtrField<proto::WayPoint>::begin(__for_range).it_;
          __for_end.it_ = google::protobuf::RepeatedPtrField<proto::WayPoint>::end(__for_range).it_;
          while ( google::protobuf::internal::RepeatedPtrIterator<proto::WayPoint>::operator!=(&__for_begin, &__for_end) )
          {
            proto_way_point = google::protobuf::internal::RepeatedPtrIterator<proto::WayPoint>::operator*(&__for_begin);
            if ( proto::WayPoint::point_id(proto_way_point) == *(_DWORD *)(v3 + 64) )
            {
              proto::WayPoint::set_activate_time(proto_way_point, now);
              is_find = 1;
              break;
            }
            google::protobuf::internal::RepeatedPtrIterator<proto::WayPoint>::operator++(&__for_begin);
          }
          if ( !is_find )
          {
            new_proto_way_point = proto::DungeonSceneBin::add_activated_way_point_list(dungeon_scene_bin);
            proto::WayPoint::set_point_id(new_proto_way_point, *(_DWORD *)(v3 + 64));
            proto::WayPoint::set_activate_time(new_proto_way_point, now);
          }
        }
        else
        {
          proto::DungeonSceneBin::clear_activated_way_point_list(dungeon_scene_bin);
        }
        goto LABEL_41;
      }
      common::milog::MiLogStream::create(
        &v36,
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/scene/player_scene_comp.cpp",
        "resetPlayerWayPointInPersistentDungeonByMuip",
        6529);
      v19 = common::milog::MiLogStream::operator<<<char [42],(char *[42])0>(
              &v36,
              (const char (*)[42])"fail to find dungeon scene bin, scene_id:");
      v20 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v19, (const unsigned int *)(v3 + 48));
      if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
        __asan_report_load8();
    }
    else
    {
      if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
        __asan_report_load8();
      Player::getDungeonComp(this->player_);
      PlayerDungeonComp::getCurDungeon((PlayerDungeonComp *const)&v35);
      v21 = std::operator==<DungeonScene,DungeonScene>(
              (const std::shared_ptr<DungeonScene> *)&v35,
              (const std::shared_ptr<DungeonScene> *)(v3 + 80));
      std::shared_ptr<DungeonScene>::~shared_ptr((std::shared_ptr<DungeonScene> *const)&v35);
      if ( v21 )
      {
        if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
          __asan_report_load8();
        DungeonComp = Player::getDungeonComp(this->player_);
        PlayerDungeonComp::quitCurDungeon(DungeonComp, DUNGEON_QUIT_REASON_MUIP);
      }
      v23 = std::__shared_ptr_access<PersistentDungeonScene,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<PersistentDungeonScene,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 112));
      PersistentDungeonScene::resetPlayerWayPointByMuip(
        v23,
        *(_DWORD *)(v3 + 64),
        (const std::map<unsigned int,std::shared_ptr<data::DungeonWayPoint>> *)(v3 + 144));
      common::milog::MiLogStream::create(
        &v36,
        &common::milog::MiLogDefault::default_log_obj_,
        1u,
        "./src/scene/player_scene_comp.cpp",
        "resetPlayerWayPointInPersistentDungeonByMuip",
        6567);
      v24 = common::milog::MiLogStream::operator<<<char [47],(char *[47])0>(
              &v36,
              (const char (*)[47])"reset player way point done for dungeon scene:");
      v20 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v24, (const unsigned int *)(v3 + 48));
      if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
        __asan_report_load8();
    }
    operator<<(v20, this->player_);
    common::milog::MiLogStream::~MiLogStream(&v36);
LABEL_41:
    std::shared_ptr<PersistentDungeonScene>::~shared_ptr((std::shared_ptr<PersistentDungeonScene> *const)(v3 + 112));
    std::shared_ptr<DungeonScene>::~shared_ptr((std::shared_ptr<DungeonScene> *const)(v3 + 80));
    goto LABEL_42;
  }
  common::milog::MiLogStream::create(
    &v36,
    &common::milog::MiLogDefault::default_log_obj_,
    3u,
    "./src/scene/player_scene_comp.cpp",
    "resetPlayerWayPointInPersistentDungeonByMuip",
    6499);
  v8 = common::milog::MiLogStream::operator<<<char [34],(char *[34])0>(&v36, (const char (*)[34])off_2518A4A0);
  v9 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v8, (const unsigned int *)(v3 + 48));
  if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
    __asan_report_load8();
  operator<<(v9, this->player_);
  common::milog::MiLogStream::~MiLogStream(&v36);
LABEL_43:
  if ( v37 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8010) = 0;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8018) = 0;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8018) = -168430091;
  }
};

// Line 6571: range 0000000013E7F580-0000000013E7F6B1
bool __fastcall PlayerSceneComp::isDuplicateDeshretObelisk(
        PlayerSceneComp *const this,
        uint32_t group_id,
        uint32_t config_id)
{
  unsigned __int64 v3; // rbx
  __int64 v4; // rax
  _DWORD *v5; // r12
  bool result; // al
  std::pair<unsigned int,unsigned int> __y; // [rsp+18h] [rbp-88h] BYREF
  char v9[128]; // [rsp+20h] [rbp-80h] BYREF

  v3 = (unsigned __int64)v9;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_1(96LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "2 48 4 13 group_id:6570 64 4 14 config_id:6570";
  *(_QWORD *)(v3 + 16) = PlayerSceneComp::isDuplicateDeshretObelisk;
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = -234556943;
  v5[536862722] = -202116348;
  *(_DWORD *)(v3 + 48) = group_id;
  *(_DWORD *)(v3 + 64) = config_id;
  std::pair<unsigned int,unsigned int>::pair<unsigned int &,unsigned int &,true>(
    &__y,
    (unsigned int *)(v3 + 48),
    (unsigned int *)(v3 + 64));
  result = std::operator==<unsigned int,unsigned int>(&this->cur_deshret_obelisk_, &__y);
  if ( v9 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8008) = 0;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8008) = -168430091;
  }
  return result;
};

// Line 6576: range 0000000013E7F6B2-0000000013E7F80F
__int64 __fastcall PlayerSceneComp::trySetCurDeshretObelisk(
        PlayerSceneComp *const this,
        uint32_t group_id,
        uint32_t config_id)
{
  unsigned __int64 v3; // rbx
  __int64 v4; // rax
  _DWORD *v5; // r12
  __int64 result; // rax
  std::pair<unsigned int,unsigned int> __p; // [rsp+18h] [rbp-88h] BYREF
  char v9[128]; // [rsp+20h] [rbp-80h] BYREF

  v3 = (unsigned __int64)v9;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_1(96LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "2 48 4 13 group_id:6575 64 4 14 config_id:6575";
  *(_QWORD *)(v3 + 16) = PlayerSceneComp::trySetCurDeshretObelisk;
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = -234556943;
  v5[536862722] = -202116348;
  *(_DWORD *)(v3 + 48) = group_id;
  *(_DWORD *)(v3 + 64) = config_id;
  if ( PlayerSceneComp::isDuplicateDeshretObelisk(this, *(_DWORD *)(v3 + 48), *(_DWORD *)(v3 + 64)) )
  {
    result = 0xFFFFFFFFLL;
  }
  else
  {
    std::pair<unsigned int,unsigned int>::pair<unsigned int &,unsigned int &,true>(
      &__p,
      (unsigned int *)(v3 + 48),
      (unsigned int *)(v3 + 64));
    std::pair<unsigned int,unsigned int>::operator=(&this->cur_deshret_obelisk_, &__p);
    result = 0LL;
  }
  if ( v9 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8008) = 0;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8008) = -168430091;
  }
  return result;
};

// Line 6586: range 0000000013E7F810-0000000013E7F8B9
void __cdecl PlayerSceneComp::fillDeshretObeliskChestInfoNotify(
        PlayerSceneComp *const this,
        proto::DeshretObeliskChestInfoNotify *notify)
{
  unsigned int second; // ecx

  if ( *(_BYTE *)(((unsigned __int64)&this->cur_deshret_obelisk_.second >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)this + 92) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&this->cur_deshret_obelisk_.second >> 3)
                                                        + 0x7FFF8000) )
  {
    __asan_report_load4(&this->cur_deshret_obelisk_.second);
  }
  second = this->cur_deshret_obelisk_.second;
  if ( *(_BYTE *)(((unsigned __int64)&this->cur_deshret_obelisk_ >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->cur_deshret_obelisk_ >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4(&this->cur_deshret_obelisk_);
  }
  PlayerSceneComp::fillDeshretObeliskChestInfoNotify(this, notify, this->cur_deshret_obelisk_.first, second);
};

// Line 6591: range 0000000013E7F8BA-0000000013E7FF7E
void __fastcall PlayerSceneComp::fillDeshretObeliskChestInfoNotify(
        PlayerSceneComp *const this,
        proto::DeshretObeliskChestInfoNotify *notify,
        uint32_t group_id,
        uint32_t config_id)
{
  unsigned __int64 v4; // r12
  __int64 v5; // rax
  _DWORD *v6; // r13
  std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v7; // rax
  common::milog::MiLogStream *v8; // rax
  common::milog::MiLogStream *v9; // rax
  common::milog::MiLogStream *v10; // rax
  common::milog::MiLogStream *v11; // rax
  common::milog::MiLogStream *v12; // rax
  common::milog::MiLogStream *v13; // rax
  std::vector<unsigned int>::const_reference v14; // rax
  _DWORD *v15; // rdx
  common::milog::MiLogStream *v16; // rax
  common::milog::MiLogStream *v17; // rax
  common::milog::MiLogStream *v18; // rax
  common::milog::MiLogStream *v19; // rax
  common::milog::MiLogStream *v20; // rax
  uint32_t *p_config_id; // rax
  uint32_t v22; // esi
  uint32_t v23; // ecx
  std::vector<data::DeshretObeliskChestPosInfo>::const_iterator __for_begin; // [rsp+20h] [rbp-F0h] BYREF
  std::vector<data::DeshretObeliskChestPosInfo>::const_iterator __for_end; // [rsp+28h] [rbp-E8h] BYREF
  const GadgetScriptConfig *gadget_script_config_ptr; // [rsp+30h] [rbp-E0h]
  const GadgetArgumentExcelConfigMgr *gadget_argument_config_mgr; // [rsp+38h] [rbp-D8h]
  const std::vector<data::DeshretObeliskChestPosInfo> *chest_info_vec_ptr; // [rsp+40h] [rbp-D0h]
  const std::vector<data::DeshretObeliskChestPosInfo> *__for_range; // [rsp+48h] [rbp-C8h]
  const data::DeshretObeliskChestPosInfo *chest_info; // [rsp+50h] [rbp-C0h]
  proto::DeshretObeliskChestInfo *proto_chest_info; // [rsp+58h] [rbp-B8h]
  std::shared_ptr<Config> v35; // [rsp+60h] [rbp-B0h] BYREF
  common::milog::MiLogStream v36; // [rsp+70h] [rbp-A0h] BYREF
  char v37[128]; // [rsp+90h] [rbp-80h] BYREF

  v4 = (unsigned __int64)v37;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v5 = __asan_stack_malloc_1(96LL);
    if ( v5 )
      v4 = v5;
  }
  *(_QWORD *)v4 = 1102416563LL;
  *(_QWORD *)(v4 + 8) = "3 32 4 16 argument_id:6609 48 4 13 group_id:6590 64 4 14 config_id:6590";
  *(_QWORD *)(v4 + 16) = PlayerSceneComp::fillDeshretObeliskChestInfoNotify;
  v6 = (_DWORD *)(v4 >> 3);
  v6[536862720] = -235802127;
  v6[536862721] = -234556924;
  v6[536862722] = -202116348;
  *(_DWORD *)(v4 + 48) = group_id;
  *(_DWORD *)(v4 + 64) = config_id;
  if ( *(_DWORD *)(v4 + 48) || *(_DWORD *)(v4 + 64) )
  {
    ServiceBox::findService<GameserverService>();
    GameserverService::getConfig((GameserverService *const)&v35);
    v7 = std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false> *const)&v35);
    gadget_script_config_ptr = LuaConfigMgr::findGadgetScriptConfig(
                                 &v7->design_config.lua_config_mgr,
                                 *(_DWORD *)(v4 + 48),
                                 *(_DWORD *)(v4 + 64));
    std::shared_ptr<Config>::~shared_ptr(&v35);
    if ( gadget_script_config_ptr )
    {
      if ( std::vector<unsigned int>::empty(&gadget_script_config_ptr->argument_vec) )
      {
        common::milog::MiLogStream::create(
          &v36,
          &common::milog::MiLogDefault::default_log_obj_,
          3u,
          "./src/scene/player_scene_comp.cpp",
          "fillDeshretObeliskChestInfoNotify",
          6606);
        v11 = common::milog::MiLogStream::operator<<<char [66],(char *[66])0>(
                &v36,
                (const char (*)[66])"[DeshretObelisk] DeshretObelisk argument vec is empty, group_id: ");
        v12 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                v11,
                (const unsigned int *)(v4 + 48));
        v13 = common::milog::MiLogStream::operator<<<char [14],(char *[14])0>(v12, (const char (*)[14])", config_id: ");
        common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v13, (const unsigned int *)(v4 + 64));
        common::milog::MiLogStream::~MiLogStream(&v36);
      }
      else
      {
        v14 = std::vector<unsigned int>::operator[](&gadget_script_config_ptr->argument_vec, 0LL);
        v15 = v14;
        if ( *(_BYTE *)(((unsigned __int64)v14 >> 3) + 0x7FFF8000) != 0
          && (char)(((unsigned __int8)v14 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)v14 >> 3) + 0x7FFF8000) )
        {
          __asan_report_load4(v14);
        }
        *(_DWORD *)(v4 + 32) = *v15;
        ServiceBox::findService<GameserverService>();
        GameserverService::getConfig((GameserverService *const)&v35);
        gadget_argument_config_mgr = &std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false> *const)&v35)->design_config.txt_config_mgr.gadget_argument_config_mgr;
        std::shared_ptr<Config>::~shared_ptr(&v35);
        chest_info_vec_ptr = GadgetArgumentExcelConfigMgr::findDeshretObeliskChestPosInfoByArgument(
                               gadget_argument_config_mgr,
                               *(_DWORD *)(v4 + 32));
        if ( chest_info_vec_ptr )
        {
          __for_range = chest_info_vec_ptr;
          __for_begin._M_current = std::vector<data::DeshretObeliskChestPosInfo>::begin(chest_info_vec_ptr)._M_current;
          __for_end._M_current = std::vector<data::DeshretObeliskChestPosInfo>::end(chest_info_vec_ptr)._M_current;
          while ( __gnu_cxx::operator!=<data::DeshretObeliskChestPosInfo const*,std::vector<data::DeshretObeliskChestPosInfo>>(
                    &__for_begin,
                    &__for_end) )
          {
            chest_info = __gnu_cxx::__normal_iterator<data::DeshretObeliskChestPosInfo const*,std::vector<data::DeshretObeliskChestPosInfo>>::operator*(&__for_begin);
            p_config_id = &chest_info->config_id;
            if ( *(_BYTE *)(((unsigned __int64)p_config_id >> 3) + 0x7FFF8000) != 0
              && (char)(((unsigned __int8)p_config_id & 7) + 3) >= *(_BYTE *)(((unsigned __int64)p_config_id >> 3)
                                                                            + 0x7FFF8000) )
            {
              __asan_report_load4(p_config_id);
            }
            v22 = chest_info->config_id;
            if ( *(_BYTE *)(((unsigned __int64)&chest_info->group_id >> 3) + 0x7FFF8000) != 0
              && (char)((((_BYTE)chest_info + 4) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&chest_info->group_id >> 3)
                                                                       + 0x7FFF8000) )
            {
              __asan_report_load4(&chest_info->group_id);
            }
            v23 = chest_info->group_id;
            if ( *(_BYTE *)(((unsigned __int64)chest_info >> 3) + 0x7FFF8000) != 0
              && (char)(((unsigned __int8)chest_info & 7) + 3) >= *(_BYTE *)(((unsigned __int64)chest_info >> 3)
                                                                           + 0x7FFF8000) )
            {
              __asan_report_load4(chest_info);
            }
            if ( !PlayerSceneComp::isInOneOffRecord(this, PROT_ENTITY_GADGET, chest_info->scene_id, 0, v23, v22) )
            {
              proto_chest_info = proto::DeshretObeliskChestInfoNotify::add_chest_info_list(notify);
              data::DeshretObeliskChestPosInfo::toClient(chest_info, proto_chest_info);
            }
            __gnu_cxx::__normal_iterator<data::DeshretObeliskChestPosInfo const*,std::vector<data::DeshretObeliskChestPosInfo>>::operator++(&__for_begin);
          }
        }
        else
        {
          common::milog::MiLogStream::create(
            &v36,
            &common::milog::MiLogDefault::default_log_obj_,
            3u,
            "./src/scene/player_scene_comp.cpp",
            "fillDeshretObeliskChestInfoNotify",
            6614);
          v16 = common::milog::MiLogStream::operator<<<char [80],(char *[80])0>(
                  &v36,
                  (const char (*)[80])"[DeshretObelisk] findDeshretObeliskChestPosInfoByArgument failed, argument id: ");
          v17 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                  v16,
                  (const unsigned int *)(v4 + 32));
          v18 = common::milog::MiLogStream::operator<<<char [11],(char *[11])0>(v17, (const char (*)[11])"group_id: ");
          v19 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                  v18,
                  (const unsigned int *)(v4 + 48));
          v20 = common::milog::MiLogStream::operator<<<char [14],(char *[14])0>(
                  v19,
                  (const char (*)[14])", config_id: ");
          common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v20, (const unsigned int *)(v4 + 64));
          common::milog::MiLogStream::~MiLogStream(&v36);
        }
      }
    }
    else
    {
      common::milog::MiLogStream::create(
        &v36,
        &common::milog::MiLogDefault::default_log_obj_,
        1u,
        "./src/scene/player_scene_comp.cpp",
        "fillDeshretObeliskChestInfoNotify",
        6601);
      v8 = common::milog::MiLogStream::operator<<<char [61],(char *[61])0>(
             &v36,
             (const char (*)[61])"[DeshretObelisk] DeshretObelisk config not found, group_id: ");
      v9 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v8, (const unsigned int *)(v4 + 48));
      v10 = common::milog::MiLogStream::operator<<<char [14],(char *[14])0>(v9, (const char (*)[14])", config_id: ");
      common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v10, (const unsigned int *)(v4 + 64));
      common::milog::MiLogStream::~MiLogStream(&v36);
    }
  }
  else
  {
    common::milog::MiLogStream::create(
      &v36,
      &common::milog::MiLogDefault::default_log_obj_,
      1u,
      "./src/scene/player_scene_comp.cpp",
      "fillDeshretObeliskChestInfoNotify",
      6595);
    common::milog::MiLogStream::operator<<<char [48],(char *[48])0>(
      &v36,
      (const char (*)[48])"current player has no obelisk gadget interacted");
    common::milog::MiLogStream::~MiLogStream(&v36);
  }
  if ( v37 == (char *)v4 )
  {
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0LL;
    *(_DWORD *)((v4 >> 3) + 0x7FFF8008) = 0;
  }
  else
  {
    *(_QWORD *)v4 = 1172321806LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v4 >> 3) + 0x7FFF8008) = -168430091;
  }
};

// Line 6630: range 0000000013E7FF80-0000000013E800CF
void __cdecl PlayerSceneComp::broadcastDeshretObeliskChestInfoNotify(PlayerSceneComp *const this)
{
  proto::DeshretObeliskChestInfoNotify *v1; // rbx
  __int64 v2; // rax
  _DWORD *v3; // r12
  char v4[160]; // [rsp+10h] [rbp-A0h] BYREF

  v1 = (proto::DeshretObeliskChestInfoNotify *)v4;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_1(128LL);
    if ( v2 )
      v1 = (proto::DeshretObeliskChestInfoNotify *)v2;
  }
  v1->_vptr_MessageLite = (int (**)(...))1102416563;
  v1->_internal_metadata_.ptr_ = "1 48 48 33 deshret_obelisk_chest_notify:6631";
  v1->chest_info_list_.arena_ = (google::protobuf::Arena *)PlayerSceneComp::broadcastDeshretObeliskChestInfoNotify;
  v3 = (_DWORD *)((unsigned __int64)v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = 61937;
  v3[536862723] = -202116109;
  proto::DeshretObeliskChestInfoNotify::DeshretObeliskChestInfoNotify(v1 + 1);
  PlayerSceneComp::fillDeshretObeliskChestInfoNotify(this, v1 + 1);
  PlayerSceneComp::broadcastDeshretObeliskChestInfoNotify(this, v1 + 1);
  proto::DeshretObeliskChestInfoNotify::~DeshretObeliskChestInfoNotify(v1 + 1);
  if ( v4 == (char *)v1 )
  {
    *(_QWORD *)(((unsigned __int64)v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_DWORD *)(((unsigned __int64)v1 >> 3) + 0x7FFF800C) = 0;
  }
  else
  {
    v1->_vptr_MessageLite = (int (**)(...))1172321806;
    *(_QWORD *)(((unsigned __int64)v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)(((unsigned __int64)v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
};

// Line 6637: range 0000000013E800D0-0000000013E801FD
void __cdecl PlayerSceneComp::broadcastDeshretObeliskChestInfoNotify(
        PlayerSceneComp *const this,
        const proto::DeshretObeliskChestInfoNotify *notify)
{
  unsigned __int64 v2; // rbx
  __int64 v3; // rax
  unsigned __int64 v4; // r12
  std::__shared_ptr_access<PlayerWorld,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v5; // rcx
  char v6[96]; // [rsp+10h] [rbp-60h] BYREF

  v2 = (unsigned __int64)v6;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_0(64LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "1 32 16 21 player_world_ptr:6638";
  *(_QWORD *)(v2 + 16) = PlayerSceneComp::broadcastDeshretObeliskChestInfoNotify;
  v4 = v2 >> 3;
  *(_DWORD *)(v4 + 2147450880) = -235802127;
  *(_DWORD *)(v4 + 2147450884) = -202178560;
  PlayerSceneComp::getMyPlayerWorld((const PlayerSceneComp *const)(v2 + 32));
  if ( std::operator!=<PlayerWorld>(0LL, (const std::shared_ptr<PlayerWorld> *)(v2 + 32)) )
  {
    v5 = std::__shared_ptr_access<PlayerWorld,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<PlayerWorld,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 32));
    World::notifyAllPlayer<proto::DeshretObeliskChestInfoNotify>(v5, notify, 0);
  }
  std::shared_ptr<PlayerWorld>::~shared_ptr((std::shared_ptr<PlayerWorld> *const)(v2 + 32));
  if ( v6 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
  }
};

// Line 6646: range 0000000013E801FE-0000000013E8048A
void __cdecl PlayerSceneComp::onChestOpenEvent(PlayerSceneComp *const this, const ChestOpenEvent *event)
{
  unsigned __int64 v2; // r12
  __int64 v3; // rax
  _DWORD *v4; // r13
  std::__shared_ptr_access<PlayerWorld,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v5; // rax
  char v6[160]; // [rsp+10h] [rbp-A0h] BYREF

  v2 = (unsigned __int64)v6;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_1(128LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "2 32 16 21 player_world_ptr:6647 64 32 22 chest_open_notify:6650";
  *(_QWORD *)(v2 + 16) = PlayerSceneComp::onChestOpenEvent;
  v4 = (_DWORD *)(v2 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = -219021312;
  v4[536862723] = -202116109;
  PlayerSceneComp::getMyPlayerWorld((const PlayerSceneComp *const)(v2 + 32));
  if ( std::operator!=<PlayerWorld>(0LL, (const std::shared_ptr<PlayerWorld> *)(v2 + 32)) )
  {
    proto::WorldChestOpenNotify::WorldChestOpenNotify((proto::WorldChestOpenNotify *const)(v2 + 64));
    if ( *(_BYTE *)(((unsigned __int64)&event->scene_id >> 3) + 0x7FFF8000) != 0
      && *(_BYTE *)(((unsigned __int64)&event->scene_id >> 3) + 0x7FFF8000) <= 3 )
    {
      __asan_report_load4(&event->scene_id);
    }
    proto::WorldChestOpenNotify::set_scene_id((proto::WorldChestOpenNotify *const)(v2 + 64), event->scene_id);
    if ( *(_BYTE *)(((unsigned __int64)&event->group_id >> 3) + 0x7FFF8000) != 0
      && (char)((((_BYTE)event + 28) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&event->group_id >> 3) + 0x7FFF8000) )
    {
      __asan_report_load4(&event->group_id);
    }
    proto::WorldChestOpenNotify::set_group_id((proto::WorldChestOpenNotify *const)(v2 + 64), event->group_id);
    if ( *(_BYTE *)(((unsigned __int64)&event->config_id >> 3) + 0x7FFF8000) != 0
      && *(_BYTE *)(((unsigned __int64)&event->config_id >> 3) + 0x7FFF8000) <= 3 )
    {
      __asan_report_load4(&event->config_id);
    }
    proto::WorldChestOpenNotify::set_config_id((proto::WorldChestOpenNotify *const)(v2 + 64), event->config_id);
    v5 = std::__shared_ptr_access<PlayerWorld,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<PlayerWorld,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 32));
    World::notifyAllPlayer<proto::WorldChestOpenNotify>(v5, (const proto::WorldChestOpenNotify *)(v2 + 64), 0);
    proto::WorldChestOpenNotify::~WorldChestOpenNotify((proto::WorldChestOpenNotify *const)(v2 + 64));
  }
  std::shared_ptr<PlayerWorld>::~shared_ptr((std::shared_ptr<PlayerWorld> *const)(v2 + 32));
  if ( v6 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF800C) = 0;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
};

// Line 6659: range 0000000013E8048C-0000000013E804B7
const proto::GroupProductBin *__cdecl PlayerSceneComp::findGroupProductBinByGM(
        const PlayerSceneComp *const this,
        uint32_t scene_id,
        uint32_t dungeon_id,
        uint32_t group_id)
{
  return PlayerSceneComp::findGroupProductBin(this, scene_id, dungeon_id, group_id);
};

// Line 6664: range 0000000013E804B8-0000000013E816CA
void __cdecl PlayerSceneComp::checkAndModifyAnemoculusAndGeoculusOneoffBin(PlayerSceneComp *const this)
{
  unsigned __int64 v1; // r13
  __int64 v2; // rax
  _DWORD *v3; // r12
  std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v4; // rax
  common::milog::MiLogStream *v5; // rax
  common::milog::MiLogStream *v6; // rax
  common::milog::MiLogStream *v7; // r14
  std::_Rb_tree_const_iterator<unsigned int>::reference v8; // rax
  _DWORD *v9; // rdx
  common::milog::MiLogStream *v10; // rax
  common::milog::MiLogStream *v11; // rax
  common::milog::MiLogStream *v12; // r14
  std::tuple_element<1,const std::pair<unsigned int,unsigned int> >::type *v13; // rax
  uint32_t v14; // esi
  uint32_t v15; // esi
  common::milog::MiLogStream *v16; // rax
  common::milog::MiLogStream *v17; // rax
  common::milog::MiLogStream *v18; // rax
  common::milog::MiLogStream *v19; // rax
  common::milog::MiLogStream *v20; // r14
  common::milog::MiLogStream *v21; // rax
  common::milog::MiLogStream *v22; // rax
  common::milog::MiLogStream *v23; // rax
  common::milog::MiLogStream *v24; // rax
  common::milog::MiLogStream *v25; // r14
  BlockDataMgr *BlockDataMgr; // rcx
  std::pair<int,proto::GroupBin*> GroupBin; // rax
  common::milog::MiLogStream *v28; // rax
  common::milog::MiLogStream *v29; // rax
  common::milog::MiLogStream *v30; // r14
  common::milog::MiLogStream *v31; // rax
  common::milog::MiLogStream *v32; // rax
  common::milog::MiLogStream *v33; // rax
  common::milog::MiLogStream *v34; // rax
  common::milog::MiLogStream *v35; // r14
  uint32_t oneoff_reset_version; // r14d
  std::tuple_element<1,const std::pair<unsigned int,unsigned int> >::type *v37; // rsi
  unsigned int *v38; // rax
  uint32_t *v39; // rdx
  char v40; // cl
  std::set<std::pair<unsigned int,unsigned int>> *v41; // r14
  common::milog::MiLogStream *v42; // rax
  common::milog::MiLogStream *v43; // rax
  common::milog::MiLogStream *v44; // rax
  common::milog::MiLogStream *v45; // rax
  common::milog::MiLogStream *v46; // r14
  common::milog::MiLogStream *v47; // r14
  std::less<unsigned int> __comp; // [rsp+1Dh] [rbp-253h] BYREF
  std::allocator<unsigned int> __a; // [rsp+1Eh] [rbp-252h] BYREF
  bool is_gathered; // [rsp+1Fh] [rbp-251h]
  unsigned int val; // [rsp+20h] [rbp-250h] BYREF
  uint32_t del_config_id; // [rsp+24h] [rbp-24Ch]
  std::set<unsigned int>::iterator __for_begin; // [rsp+28h] [rbp-248h] BYREF
  std::set<unsigned int>::iterator __for_end; // [rsp+30h] [rbp-240h] BYREF
  std::set<std::pair<unsigned int,unsigned int>>::iterator __for_begin_0; // [rsp+38h] [rbp-238h] BYREF
  std::set<std::pair<unsigned int,unsigned int>>::iterator __for_end_0; // [rsp+40h] [rbp-230h] BYREF
  google::protobuf::RepeatedField<unsigned int>::const_iterator __for_begin_1; // [rsp+48h] [rbp-228h]
  const LuaConfigMgr *lua_config_mgr; // [rsp+50h] [rbp-220h]
  const SceneScriptConfig *scene_script_config_ptr; // [rsp+58h] [rbp-218h]
  std::set<unsigned int> *__for_range; // [rsp+60h] [rbp-210h]
  const std::set<std::pair<unsigned int,unsigned int>> *group_config_set_ptr; // [rsp+68h] [rbp-208h]
  const std::set<std::pair<unsigned int,unsigned int>> *__for_range_0; // [rsp+70h] [rbp-200h]
  const std::pair<unsigned int,unsigned int> *v63; // [rsp+78h] [rbp-1F8h]
  std::tuple_element<0,const std::pair<unsigned int,unsigned int> >::type *group_id; // [rsp+80h] [rbp-1F0h]
  std::tuple_element<1,const std::pair<unsigned int,unsigned int> >::type *config_id; // [rsp+88h] [rbp-1E8h]
  const GadgetScriptConfig *gadget_script_config_ptr; // [rsp+90h] [rbp-1E0h]
  std::tuple_element<0,std::pair<int,proto::GroupBin*> >::type *ret; // [rsp+98h] [rbp-1D8h]
  std::tuple_element<1,std::pair<int,proto::GroupBin*> >::type *group_bin_ptr; // [rsp+A0h] [rbp-1D0h]
  const google::protobuf::RepeatedField<unsigned int> *__for_range_1; // [rsp+A8h] [rbp-1C8h]
  google::protobuf::RepeatedField<unsigned int>::const_iterator __for_end_1; // [rsp+B0h] [rbp-1C0h]
  proto::GroupProductBin *group_product_bin; // [rsp+B8h] [rbp-1B8h]
  google::protobuf::Map<unsigned int,unsigned int> *gadget_one_off_map; // [rsp+C0h] [rbp-1B0h]
  std::initializer_list<unsigned int> __l; // [rsp+C8h] [rbp-1A8h] BYREF
  proto::GroupBin *second; // [rsp+D8h] [rbp-198h]
  common::milog::MiLogStream v75; // [rsp+E0h] [rbp-190h] BYREF
  common::milog::MiLogStream v76; // [rsp+100h] [rbp-170h] BYREF
  common::milog::MiLogStream v77; // [rsp+120h] [rbp-150h] BYREF
  common::milog::MiLogStream v78; // [rsp+140h] [rbp-130h] BYREF
  common::milog::MiLogStream v79; // [rsp+160h] [rbp-110h] BYREF
  char v80[240]; // [rsp+180h] [rbp-F0h] BYREF

  v1 = (unsigned __int64)v80;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_2(192LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "4 48 4 18 main_scene_id:6667 64 4 15 point_type:6676 80 16 10 timer:6665 112 48 23 fix_point_type_set:6675";
  *(_QWORD *)(v1 + 16) = PlayerSceneComp::checkAndModifyAnemoculusAndGeoculusOneoffBin;
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234556943;
  v3[536862722] = 61956;
  v3[536862723] = 62194;
  v3[536862725] = -202116109;
  common::tools::TimeUtils::Timer::Timer((common::tools::TimeUtils::Timer *const)(v1 + 80));
  ServiceBox::findService<GameserverService>();
  GameserverService::getConfig((GameserverService *const)&__l._M_len);
  lua_config_mgr = &std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false> *const)&__l._M_len)->design_config.lua_config_mgr;
  std::shared_ptr<Config>::~shared_ptr((std::shared_ptr<Config> *const)&__l._M_len);
  ServiceBox::findService<GameserverService>();
  GameserverService::getConfig((GameserverService *const)&__l._M_len);
  v4 = std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false> *const)&__l._M_len);
  *(_DWORD *)(v1 + 48) = TxtConfigMgr::getDefaultWorldMainSceneId(&v4->design_config.txt_config_mgr);
  std::shared_ptr<Config>::~shared_ptr((std::shared_ptr<Config> *const)&__l._M_len);
  scene_script_config_ptr = LuaConfigMgr::findSceneScriptConfig(lua_config_mgr, *(_DWORD *)(v1 + 48));
  if ( scene_script_config_ptr )
  {
    __l._M_array = (std::initializer_list<unsigned int>::iterator)0xFA2003D0CE9LL;
    std::allocator<unsigned int>::allocator(&__a);
    std::set<unsigned int>::set(
      (std::set<unsigned int> *const)(v1 + 112),
      (std::initializer_list<unsigned int>)__PAIR128__(2LL, &__l),
      &__comp,
      &__a);
    std::allocator<unsigned int>::~allocator(&__a);
    __for_range = (std::set<unsigned int> *)(v1 + 112);
    __for_begin._M_node = std::set<unsigned int>::begin((const std::set<unsigned int> *const)(v1 + 112))._M_node;
    __for_end._M_node = std::set<unsigned int>::end(__for_range)._M_node;
    while ( 1 )
    {
      if ( !std::operator!=(&__for_begin, &__for_end) )
      {
        common::milog::MiLogStream::create(
          &v79,
          &common::milog::MiLogDefault::default_log_obj_,
          1u,
          "./src/scene/player_scene_comp.cpp",
          "checkAndModifyAnemoculusAndGeoculusOneoffBin",
          6741);
        v47 = common::milog::MiLogStream::operator<<<char [51],(char *[51])0>(
                &v79,
                (const char (*)[51])"checkAndModifyAnemoculusAndGeoculusOneoffBin cost:");
        val = common::tools::TimeUtils::Timer::time((const common::tools::TimeUtils::Timer *const)(v1 + 80));
        common::milog::MiLogStream::operator<<<int,(int *)0>(v47, (const int *)&val);
        common::milog::MiLogStream::~MiLogStream(&v79);
        goto LABEL_78;
      }
      v8 = std::_Rb_tree_const_iterator<unsigned int>::operator*(&__for_begin);
      v9 = v8;
      if ( *(_BYTE *)(((unsigned __int64)v8 >> 3) + 0x7FFF8000) != 0
        && (char)(((unsigned __int8)v8 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)v8 >> 3) + 0x7FFF8000) )
      {
        __asan_report_load4(v8);
      }
      *(_DWORD *)(v1 + 64) = *v9;
      group_config_set_ptr = SceneScriptConfig::findOneoffGahterGroupConfigSetByPointType(
                               scene_script_config_ptr,
                               *(_DWORD *)(v1 + 64));
      if ( !group_config_set_ptr )
        break;
      __for_range_0 = group_config_set_ptr;
      __for_begin_0._M_node = std::set<std::pair<unsigned int,unsigned int>>::begin(group_config_set_ptr)._M_node;
      __for_end_0._M_node = std::set<std::pair<unsigned int,unsigned int>>::end(__for_range_0)._M_node;
      while ( std::operator!=(&__for_begin_0, &__for_end_0) )
      {
        v63 = std::_Rb_tree_const_iterator<std::pair<unsigned int,unsigned int>>::operator*(&__for_begin_0);
        group_id = (std::tuple_element<0,const std::pair<unsigned int,unsigned int> >::type *)std::get<0ul,unsigned int,unsigned int>(v63);
        v13 = (std::tuple_element<1,const std::pair<unsigned int,unsigned int> >::type *)std::get<1ul,unsigned int,unsigned int>(v63);
        config_id = v13;
        if ( *(_BYTE *)(((unsigned __int64)v13 >> 3) + 0x7FFF8000) != 0
          && (char)(((unsigned __int8)v13 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)v13 >> 3) + 0x7FFF8000) )
        {
          __asan_report_load4(v13);
        }
        v14 = *config_id;
        if ( *(_BYTE *)(((unsigned __int64)group_id >> 3) + 0x7FFF8000) != 0
          && (char)(((unsigned __int8)group_id & 7) + 3) >= *(_BYTE *)(((unsigned __int64)group_id >> 3) + 0x7FFF8000) )
        {
          __asan_report_load4(group_id);
        }
        if ( !PlayerSceneComp::isInOneOffRecord(this, PROT_ENTITY_GADGET, *(_DWORD *)(v1 + 48), 0, *group_id, v14) )
        {
          if ( *(_BYTE *)(((unsigned __int64)config_id >> 3) + 0x7FFF8000) != 0
            && (char)(((unsigned __int8)config_id & 7) + 3) >= *(_BYTE *)(((unsigned __int64)config_id >> 3) + 0x7FFF8000) )
          {
            __asan_report_load4(config_id);
          }
          v15 = *config_id;
          if ( *(_BYTE *)(((unsigned __int64)group_id >> 3) + 0x7FFF8000) != 0
            && (char)(((unsigned __int8)group_id & 7) + 3) >= *(_BYTE *)(((unsigned __int64)group_id >> 3) + 0x7FFF8000) )
          {
            __asan_report_load4(group_id);
          }
          gadget_script_config_ptr = LuaConfigMgr::findGadgetScriptConfig(lua_config_mgr, *group_id, v15);
          if ( gadget_script_config_ptr )
          {
            if ( *(_BYTE *)(((unsigned __int64)&gadget_script_config_ptr->is_oneoff >> 3) + 0x7FFF8000) != 0
              && (((unsigned __int8)gadget_script_config_ptr + 74) & 7) >= *(_BYTE *)(((unsigned __int64)&gadget_script_config_ptr->is_oneoff >> 3)
                                                                                    + 0x7FFF8000) )
            {
              __asan_report_load1(&gadget_script_config_ptr->is_oneoff);
            }
            if ( !gadget_script_config_ptr->is_oneoff )
            {
              common::milog::MiLogStream::create(
                &v76,
                &common::milog::MiLogDefault::default_log_obj_,
                4u,
                "./src/scene/player_scene_comp.cpp",
                "checkAndModifyAnemoculusAndGeoculusOneoffBin",
                6698);
              v21 = common::milog::MiLogStream::operator<<<char [32],(char *[32])0>(
                      &v76,
                      (const char (*)[32])"gadget is not oneoff. group_id:");
              v22 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v21, group_id);
              v23 = common::milog::MiLogStream::operator<<<char [13],(char *[13])0>(
                      v22,
                      (const char (*)[13])", config_id:");
              v24 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v23, config_id);
              v25 = common::milog::MiLogStream::operator<<<char [7],(char *[7])0>(v24, (const char (*)[7])", uid:");
              if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
                __asan_report_load8();
              val = Player::getUid(this->player_);
              common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v25, &val);
              common::milog::MiLogStream::~MiLogStream(&v76);
            }
            else
            {
              is_gathered = 0;
              if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
                __asan_report_load8();
              BlockDataMgr = Player::getBlockDataMgr(this->player_);
              if ( *(_BYTE *)(((unsigned __int64)group_id >> 3) + 0x7FFF8000) != 0
                && (char)(((unsigned __int8)group_id & 7) + 3) >= *(_BYTE *)(((unsigned __int64)group_id >> 3)
                                                                           + 0x7FFF8000) )
              {
                __asan_report_load4(group_id);
              }
              GroupBin = BlockDataMgr::findGroupBin(BlockDataMgr, *(_DWORD *)(v1 + 48), *group_id);
              LODWORD(__l._M_len) = GroupBin.first;
              second = GroupBin.second;
              ret = std::get<0ul,int,proto::GroupBin *>((std::pair<int,proto::GroupBin*> *)&__l._M_len);
              group_bin_ptr = std::get<1ul,int,proto::GroupBin *>((std::pair<int,proto::GroupBin*> *)&__l._M_len);
              if ( *(_BYTE *)(((unsigned __int64)ret >> 3) + 0x7FFF8000) != 0
                && (char)(((unsigned __int8)ret & 7) + 3) >= *(_BYTE *)(((unsigned __int64)ret >> 3) + 0x7FFF8000) )
              {
                __asan_report_load4(ret);
              }
              if ( *ret )
              {
                common::milog::MiLogStream::create(
                  &v77,
                  &common::milog::MiLogDefault::default_log_obj_,
                  4u,
                  "./src/scene/player_scene_comp.cpp",
                  "checkAndModifyAnemoculusAndGeoculusOneoffBin",
                  6707);
                v28 = common::milog::MiLogStream::operator<<<char [29],(char *[29])0>(
                        &v77,
                        (const char (*)[29])"findGroupBin fail. group_id:");
                v29 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v28, group_id);
                v30 = common::milog::MiLogStream::operator<<<char [7],(char *[7])0>(v29, (const char (*)[7])", uid:");
                if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
                  __asan_report_load8();
                val = Player::getUid(this->player_);
                common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v30, &val);
                common::milog::MiLogStream::~MiLogStream(&v77);
              }
              else
              {
                if ( *(_BYTE *)(((unsigned __int64)group_bin_ptr >> 3) + 0x7FFF8000) )
                  __asan_report_load8();
                if ( *group_bin_ptr )
                {
                  if ( *(_BYTE *)(((unsigned __int64)group_bin_ptr >> 3) + 0x7FFF8000) )
                    __asan_report_load8();
                  __for_range_1 = proto::GroupBin::del_gadget_list(*group_bin_ptr);
                  __for_begin_1 = google::protobuf::RepeatedField<unsigned int>::begin(__for_range_1);
                  __for_end_1 = google::protobuf::RepeatedField<unsigned int>::end(__for_range_1);
                  while ( __for_begin_1 != __for_end_1 )
                  {
                    if ( *(_BYTE *)(((unsigned __int64)__for_begin_1 >> 3) + 0x7FFF8000) != 0
                      && (char)(((unsigned __int8)__for_begin_1 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)__for_begin_1 >> 3)
                                                                                      + 0x7FFF8000) )
                    {
                      __asan_report_load4(__for_begin_1);
                    }
                    del_config_id = *__for_begin_1;
                    if ( *(_BYTE *)(((unsigned __int64)config_id >> 3) + 0x7FFF8000) != 0
                      && (char)(((unsigned __int8)config_id & 7) + 3) >= *(_BYTE *)(((unsigned __int64)config_id >> 3)
                                                                                  + 0x7FFF8000) )
                    {
                      __asan_report_load4(config_id);
                    }
                    if ( del_config_id == *config_id )
                    {
                      is_gathered = 1;
                      break;
                    }
                    ++__for_begin_1;
                  }
                  if ( is_gathered )
                  {
                    if ( *(_BYTE *)(((unsigned __int64)group_id >> 3) + 0x7FFF8000) != 0
                      && (char)(((unsigned __int8)group_id & 7) + 3) >= *(_BYTE *)(((unsigned __int64)group_id >> 3)
                                                                                 + 0x7FFF8000) )
                    {
                      __asan_report_load4(group_id);
                    }
                    group_product_bin = PlayerSceneComp::getGroupProductBin(this, *(_DWORD *)(v1 + 48), 0, *group_id);
                    gadget_one_off_map = proto::GroupProductBin::mutable_gadget_one_off_map(group_product_bin);
                    if ( common::tools::MiscUtils::isContains<google::protobuf::Map<unsigned int,unsigned int>,unsigned int>(
                           gadget_one_off_map,
                           config_id) )
                    {
                      common::milog::MiLogStream::create(
                        &v78,
                        &common::milog::MiLogDefault::default_log_obj_,
                        4u,
                        "./src/scene/player_scene_comp.cpp",
                        "checkAndModifyAnemoculusAndGeoculusOneoffBin",
                        6733);
                      v31 = common::milog::MiLogStream::operator<<<char [34],(char *[34])0>(
                              &v78,
                              (const char (*)[34])"gadget is in oneoffbin. group_id:");
                      v32 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v31, group_id);
                      v33 = common::milog::MiLogStream::operator<<<char [13],(char *[13])0>(
                              v32,
                              (const char (*)[13])", config_id:");
                      v34 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v33, config_id);
                      v35 = common::milog::MiLogStream::operator<<<char [7],(char *[7])0>(
                              v34,
                              (const char (*)[7])", uid:");
                      if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
                        __asan_report_load8();
                      val = Player::getUid(this->player_);
                      common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v35, &val);
                      common::milog::MiLogStream::~MiLogStream(&v78);
                    }
                    else
                    {
                      if ( *(_BYTE *)(((unsigned __int64)&gadget_script_config_ptr->oneoff_reset_version >> 3)
                                    + 0x7FFF8000) != 0
                        && (char)((((_BYTE)gadget_script_config_ptr - 20) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&gadget_script_config_ptr->oneoff_reset_version >> 3)
                                                                                                + 0x7FFF8000) )
                      {
                        __asan_report_load4(&gadget_script_config_ptr->oneoff_reset_version);
                      }
                      oneoff_reset_version = gadget_script_config_ptr->oneoff_reset_version;
                      v37 = config_id;
                      v38 = google::protobuf::Map<unsigned int,unsigned int>::operator[](gadget_one_off_map, config_id);
                      v39 = v38;
                      v40 = *(_BYTE *)(((unsigned __int64)v38 >> 3) + 0x7FFF8000);
                      if ( v40 != 0 && (char)(((unsigned __int8)v38 & 7) + 3) >= v40 )
                      {
                        LOBYTE(v37) = v40 != 0;
                        __asan_report_store4(v38, v37, (_BYTE)v38);
                      }
                      *v39 = oneoff_reset_version;
                      v41 = std::unordered_map<unsigned int,std::set<std::pair<unsigned int,unsigned int>>>::operator[](
                              &this->oneoff_gather_point_type_to_group_configs_map_,
                              (const std::unordered_map<unsigned int,std::set<std::pair<unsigned int,unsigned int>>>::key_type *)(v1 + 64));
                      std::pair<unsigned int,unsigned int>::pair<unsigned int,unsigned int,true>(
                        (std::pair<unsigned int,unsigned int> *const)&__l,
                        group_id,
                        config_id);
                      std::set<std::pair<unsigned int,unsigned int>>::insert(
                        v41,
                        (std::set<std::pair<unsigned int,unsigned int>>::value_type *)&__l);
                      common::milog::MiLogStream::create(
                        &v79,
                        &common::milog::MiLogDefault::default_log_obj_,
                        1u,
                        "./src/scene/player_scene_comp.cpp",
                        "checkAndModifyAnemoculusAndGeoculusOneoffBin",
                        6738);
                      v42 = common::milog::MiLogStream::operator<<<char [31],(char *[31])0>(
                              &v79,
                              (const char (*)[31])"shentong oneoff fix. group_id:");
                      v43 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v42, group_id);
                      v44 = common::milog::MiLogStream::operator<<<char [13],(char *[13])0>(
                              v43,
                              (const char (*)[13])", config_id:");
                      v45 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v44, config_id);
                      v46 = common::milog::MiLogStream::operator<<<char [7],(char *[7])0>(
                              v45,
                              (const char (*)[7])", uid:");
                      if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
                        __asan_report_load8();
                      val = Player::getUid(this->player_);
                      common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v46, &val);
                      common::milog::MiLogStream::~MiLogStream(&v79);
                    }
                  }
                }
              }
            }
          }
          else
          {
            common::milog::MiLogStream::create(
              &v75,
              &common::milog::MiLogDefault::default_log_obj_,
              4u,
              "./src/scene/player_scene_comp.cpp",
              "checkAndModifyAnemoculusAndGeoculusOneoffBin",
              6693);
            v16 = common::milog::MiLogStream::operator<<<char [39],(char *[39])0>(
                    &v75,
                    (const char (*)[39])"findGadgetScriptConfig fail. group_id:");
            v17 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v16, group_id);
            v18 = common::milog::MiLogStream::operator<<<char [13],(char *[13])0>(
                    v17,
                    (const char (*)[13])", config_id:");
            v19 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v18, config_id);
            v20 = common::milog::MiLogStream::operator<<<char [7],(char *[7])0>(v19, (const char (*)[7])", uid:");
            if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
              __asan_report_load8();
            val = Player::getUid(this->player_);
            common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v20, &val);
            common::milog::MiLogStream::~MiLogStream(&v75);
          }
        }
        std::_Rb_tree_const_iterator<std::pair<unsigned int,unsigned int>>::operator++(&__for_begin_0);
      }
      std::_Rb_tree_const_iterator<unsigned int>::operator++(&__for_begin);
    }
    common::milog::MiLogStream::create(
      &v79,
      &common::milog::MiLogDefault::default_log_obj_,
      4u,
      "./src/scene/player_scene_comp.cpp",
      "checkAndModifyAnemoculusAndGeoculusOneoffBin",
      6681);
    v10 = common::milog::MiLogStream::operator<<<char [43],(char *[43])0>(
            &v79,
            (const char (*)[43])"findSceneScriptConfig fail. main_scene_id:");
    v11 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v10, (const unsigned int *)(v1 + 48));
    v12 = common::milog::MiLogStream::operator<<<char [7],(char *[7])0>(v11, (const char (*)[7])", uid:");
    if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
      __asan_report_load8();
    val = Player::getUid(this->player_);
    common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v12, &val);
    common::milog::MiLogStream::~MiLogStream(&v79);
LABEL_78:
    std::set<unsigned int>::~set((std::set<unsigned int> *const)(v1 + 112));
  }
  else
  {
    common::milog::MiLogStream::create(
      &v79,
      &common::milog::MiLogDefault::default_log_obj_,
      4u,
      "./src/scene/player_scene_comp.cpp",
      "checkAndModifyAnemoculusAndGeoculusOneoffBin",
      6671);
    v5 = common::milog::MiLogStream::operator<<<char [43],(char *[43])0>(
           &v79,
           (const char (*)[43])"findSceneScriptConfig fail. main_scene_id:");
    v6 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v5, (const unsigned int *)(v1 + 48));
    v7 = common::milog::MiLogStream::operator<<<char [7],(char *[7])0>(v6, (const char (*)[7])", uid:");
    if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
      __asan_report_load8();
    val = Player::getUid(this->player_);
    common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v7, &val);
    common::milog::MiLogStream::~MiLogStream(&v79);
  }
  common::tools::TimeUtils::Timer::~Timer((common::tools::TimeUtils::Timer *const)(v1 + 80));
  if ( v80 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0LL;
    *(_DWORD *)((v1 >> 3) + 0x7FFF8014) = 0;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
  }
};
