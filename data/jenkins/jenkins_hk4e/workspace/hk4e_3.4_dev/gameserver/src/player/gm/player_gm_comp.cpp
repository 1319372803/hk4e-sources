// File: /data/jenkins/jenkins_hk4e/workspace/hk4e_3.4_dev/gameserver/src/player/gm/player_gm_comp.cpp

// Line 109: range 0000000017D7F922-0000000017D7F9C4
void __cdecl procCoinCollectActivityRegister::procCoinCollectActivityRegister(
        procCoinCollectActivityRegister *const this)
{
  std::function<int(GmContext&,const std::vector<std::string>&,std::string&)> *v1; // rax
  std::allocator<char> __a; // [rsp+1Fh] [rbp-31h] BYREF
  std::string __k; // [rsp+20h] [rbp-30h] BYREF

  std::allocator<char>::allocator(&__a);
  std::string::basic_string<std::allocator<char>>(&__k, "COINCOLLECT", &__a);
  v1 = std::unordered_map<std::string,std::function<int ()(GmContext &,std::vector<std::string> const&,std::string&)>>::operator[](
         &GmUtils::op_func_map[abi:cxx11],
         &__k);
  std::function<int ()(GmContext &,std::vector<std::string> const&,std::string&)>::operator=<int (&)(GmContext &,std::vector<std::string> const&,std::string&)>(
    v1,
    (int (*)(GmContext *, const std::vector<std::string> *, std::string *))procCoinCollectActivity);
  std::string::~string(&__k);
  std::allocator<char>::~allocator(&__a);
};

// Line 256: range 0000000017BBCD5A-0000000017BBD0FD
int32_t __cdecl GmUtils::splitGmMsg(const std::string *msg, bool to_upper, std::vector<std::string> *msg_vec)
{
  unsigned __int64 v3; // rbx
  __int64 v4; // rax
  _DWORD *v5; // r13
  bool v6; // r14
  common::milog::MiLogStream *v7; // rdx
  int32_t v8; // r14d
  std::string *M_current; // r14
  std::vector<std::string>::iterator v10; // rax
  GmUtils::splitGmMsg::<lambda(std::string&)> v11; // dl
  int32_t result; // eax
  std::allocator<char> __a; // [rsp+27h] [rbp-E9h] BYREF
  __gnu_cxx::__normal_iterator<std::string*,std::vector<std::string> > __i; // [rsp+28h] [rbp-E8h] BYREF
  __gnu_cxx::__normal_iterator<const std::string*,std::vector<std::string> > __first; // [rsp+30h] [rbp-E0h] BYREF
  __gnu_cxx::__normal_iterator<const std::string*,std::vector<std::string> > __last; // [rsp+38h] [rbp-D8h] BYREF
  std::string s; // [rsp+40h] [rbp-D0h] BYREF
  char v19[176]; // [rsp+60h] [rbp-B0h] BYREF

  v3 = (unsigned __int64)v19;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_1(128LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "2 32 8 14 erase_iter:265 64 32 10 gm_msg:257";
  *(_QWORD *)(v3 + 16) = GmUtils::splitGmMsg;
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = -218959360;
  v5[536862723] = -202116109;
  std::allocator<char>::allocator(&__a);
  std::string::basic_string<std::allocator<char>>(&s, off_262D4140, &__a);
  common::tools::StringUtils::trim((std::string *)(v3 + 64), msg, &s, 1);
  std::string::~string(&s);
  std::allocator<char>::~allocator(&__a);
  if ( to_upper )
    common::tools::StringUtils::upper((std::string *)(v3 + 64));
  std::allocator<char>::allocator(&__a);
  std::string::basic_string<std::allocator<char>>(&s, " ", &__a);
  v6 = common::tools::StringUtils::split((const std::string *)(v3 + 64), &s, msg_vec, 1) != 0;
  std::string::~string(&s);
  std::allocator<char>::~allocator(&__a);
  if ( v6 )
  {
    common::milog::MiLogStream::create(
      (common::milog::MiLogStream *)&s,
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/player/gm/player_gm_comp.cpp",
      "splitGmMsg",
      262);
    v7 = common::milog::MiLogStream::operator<<<char [18],(char *[18])0>(
           (common::milog::MiLogStream *const)&s,
           (const char (*)[18])"split fails, msg:");
    common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v7, msg);
    common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)&s);
    v8 = -1;
  }
  else
  {
    M_current = std::vector<std::string>::end(msg_vec)._M_current;
    v10._M_current = std::vector<std::string>::begin(msg_vec)._M_current;
    *(__gnu_cxx::__normal_iterator<std::string*,std::vector<std::string> > *)(v3 + 32) = std::remove_if<__gnu_cxx::__normal_iterator<std::string *,std::vector<std::string>>,GmUtils::splitGmMsg(std::string const&,bool,std::vector<std::string>&)::{lambda(std::string&)#1}>(
                                                                                           v10,
                                                                                           (__gnu_cxx::__normal_iterator<std::string*,std::vector<std::string> >)M_current,
                                                                                           v11);
    __i._M_current = std::vector<std::string>::end(msg_vec)._M_current;
    __gnu_cxx::__normal_iterator<std::string const*,std::vector<std::string>>::__normal_iterator<std::string*>(
      &__last,
      &__i);
    __gnu_cxx::__normal_iterator<std::string const*,std::vector<std::string>>::__normal_iterator<std::string*>(
      &__first,
      (const __gnu_cxx::__normal_iterator<std::string*,std::vector<std::string> > *)(v3 + 32));
    std::vector<std::string>::erase(msg_vec, __first, __last);
    v8 = 0;
  }
  std::string::~string((void *)(v3 + 64));
  result = v8;
  if ( v19 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF800C) = 0;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 265: range 0000000017BBCD3C-0000000017BBCD59
bool __cdecl GmUtils::splitGmMsg(std::string const&,bool,std::vector<std::string> &)::{lambda(std::string&)#1}::operator()(
        const GmUtils::splitGmMsg::<lambda(std::string&)> *const __closure,
        std::string *str)
{
  return std::string::empty(str);
};

// Line 277: range 0000000017BBD0FE-0000000017BBE3FE
int32_t __cdecl PlayerGmComp::onGmTalk(PlayerGmComp *const this, const std::string *msg, std::string *ret_msg)
{
  unsigned __int64 v3; // r13
  __int64 v4; // rax
  _DWORD *v5; // r12
  PlayerBasicComp *BasicComp; // rax
  std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v7; // rdx
  bool *p_is_gm_talk_open; // rax
  common::milog::MiLogStream *v9; // rcx
  int32_t v10; // r14d
  common::milog::MiLogStream *v11; // rax
  std::vector<std::string>::reference v12; // rax
  common::milog::MiLogStream *v13; // rax
  common::milog::MiLogStream *v14; // rcx
  common::milog::MiLogStream *v15; // rcx
  PlayerAvatarComp *AvatarComp; // rax
  const std::weak_ptr<Avatar> *v17; // rax
  std::vector<std::string> *v18; // rax
  const char *v19; // rax
  __int64 v20; // r15
  const char *v21; // r14
  const char *v22; // rax
  const char *v23; // rax
  common::milog::MiLogStream *v24; // rax
  common::milog::MiLogStream *v25; // rax
  common::milog::MiLogStream *v26; // rax
  common::milog::MiLogStream *v27; // rax
  int32_t result; // eax
  std::string v29; // [rsp+0h] [rbp-420h]
  char *v30; // [rsp+8h] [rbp-418h]
  const char *v31; // [rsp+10h] [rbp-410h]
  std::string *ret_msga; // [rsp+18h] [rbp-408h]
  std::allocator<char> v33; // [rsp+36h] [rbp-3EAh] BYREF
  std::allocator<char> __a; // [rsp+37h] [rbp-3E9h] BYREF
  uint32_t uid; // [rsp+38h] [rbp-3E8h]
  int32_t ret; // [rsp+3Ch] [rbp-3E4h]
  std::vector<std::weak_ptr<Avatar>>::iterator __for_begin; // [rsp+40h] [rbp-3E0h] BYREF
  std::vector<std::weak_ptr<Avatar>>::iterator __for_end; // [rsp+48h] [rbp-3D8h] BYREF
  std::vector<std::weak_ptr<Avatar>> *__for_range; // [rsp+50h] [rbp-3D0h]
  GmOpFunc *func; // [rsp+58h] [rbp-3C8h]
  std::weak_ptr<Avatar> v41; // [rsp+60h] [rbp-3C0h] BYREF
  std::vector<std::weak_ptr<Avatar>> v42; // [rsp+70h] [rbp-3B0h] BYREF
  std::string __lhs; // [rsp+90h] [rbp-390h] BYREF
  std::string title; // [rsp+B0h] [rbp-370h] BYREF
  std::string cmd_name; // [rsp+D0h] [rbp-350h] BYREF
  char v46[816]; // [rsp+F0h] [rbp-330h] BYREF

  *(&v29._anon_0._M_allocated_capacity + 1) = (std::string::size_type)ret_msg;
  v3 = (unsigned __int64)v46;
  v29._M_string_length = (std::string::size_type)v46;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_4(768LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "14 48 1 10 holder:278 64 8 6 it:301 96 16 14 config_ptr:279 128 16 14 avatar_ptr:308 160 16 13 s"
                        "cene_ptr:314 192 16 14 avatar_wtr:322 224 16 9 timer:331 256 24 13 param_vec:285 320 24 17 raw_p"
                        "aram_vec:296 384 32 11 gm_name:298 448 32 12 ret_name:335 512 48 20 fight_prop_guard:320 592 48 "
                        "25 refresh_ability_guard:321 672 56 11 context:328";
  *(_QWORD *)(v3 + 16) = PlayerGmComp::onGmTalk;
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = -234753551;
  v5[536862722] = -218959360;
  v5[536862723] = -219021312;
  v5[536862724] = -219021312;
  v5[536862725] = -219021312;
  v5[536862726] = -219021312;
  v5[536862727] = -219021312;
  v5[536862728] = -234881024;
  v5[536862729] = -218959118;
  v5[536862730] = -234881024;
  v5[536862731] = -218959118;
  v5[536862733] = -218959118;
  v5[536862735] = -218959118;
  v5[536862737] = -219021312;
  v5[536862738] = 62194;
  v5[536862740] = -218959118;
  v5[536862742] = -218103808;
  v5[536862743] = -202116109;
  if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
    __asan_report_load8(&this->player_);
  BasicComp = Player::getBasicComp(this->player_);
  PlayerBasicComp::getNextTransNo[abi:cxx11](&cmd_name, BasicComp);
  StatLogUtils::ContextHolder::ContextHolder((StatLogUtils::ContextHolder *const)(v3 + 48), 0x3EFu, v29);
  std::string::~string(&cmd_name);
  ServiceBox::findService<GameserverService>();
  GameserverService::getConfig((GameserverService *const)(v3 + 96));
  v7 = std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 96));
  p_is_gm_talk_open = &v7->is_gm_talk_open;
  if ( *(_BYTE *)(((unsigned __int64)p_is_gm_talk_open >> 3) + 0x7FFF8000) != 0
    && ((unsigned __int8)p_is_gm_talk_open & 7) >= *(_BYTE *)(((unsigned __int64)p_is_gm_talk_open >> 3) + 0x7FFF8000) )
  {
    __asan_report_load1(p_is_gm_talk_open);
  }
  if ( !v7->is_gm_talk_open )
  {
    common::milog::MiLogStream::create(
      (common::milog::MiLogStream *)&cmd_name,
      &common::milog::MiLogDefault::default_log_obj_,
      4u,
      "./src/player/gm/player_gm_comp.cpp",
      "onGmTalk",
      282);
    v9 = common::milog::MiLogStream::operator<<<char [28],(char *[28])0>(
           (common::milog::MiLogStream *const)&cmd_name,
           (const char (*)[28])"GmTalk is not open, player:");
    if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
      __asan_report_load8(&this->player_);
    operator<<(v9, this->player_);
    common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)&cmd_name);
    v10 = -1;
  }
  else
  {
    std::vector<std::string>::vector((std::vector<std::string> *const)(v3 + 256));
    if ( GmUtils::splitGmMsg(msg, 1, (std::vector<std::string> *)(v3 + 256)) )
    {
      common::milog::MiLogStream::create(
        (common::milog::MiLogStream *)&cmd_name,
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/player/gm/player_gm_comp.cpp",
        "onGmTalk",
        288);
      common::milog::MiLogStream::operator<<<char [17],(char *[17])0>(
        (common::milog::MiLogStream *const)&cmd_name,
        (const char (*)[17])"splitGmMsg fails");
      common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)&cmd_name);
      v10 = -1;
    }
    else if ( std::vector<std::string>::empty((const std::vector<std::string> *const)(v3 + 256)) )
    {
      common::milog::MiLogStream::create(
        (common::milog::MiLogStream *)&cmd_name,
        &common::milog::MiLogDefault::default_log_obj_,
        1u,
        "./src/player/gm/player_gm_comp.cpp",
        "onGmTalk",
        293);
      v11 = common::milog::MiLogStream::operator<<<char [14],(char *[14])0>(
              (common::milog::MiLogStream *const)&cmd_name,
              (const char (*)[14])"empty gm msg:");
      common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v11, msg);
      common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)&cmd_name);
      v10 = 0;
    }
    else
    {
      std::vector<std::string>::vector((std::vector<std::string> *const)(v3 + 320));
      GmUtils::splitGmMsg(msg, 0, (std::vector<std::string> *)(v3 + 320));
      v12 = std::vector<std::string>::operator[]((std::vector<std::string> *const)(v3 + 256), 0LL);
      std::string::basic_string(v3 + 384, v12);
      __for_begin._M_current = (std::weak_ptr<Avatar> *)std::vector<std::string>::begin((std::vector<std::string> *const)(v3 + 256))._M_current;
      __gnu_cxx::__normal_iterator<std::string const*,std::vector<std::string>>::__normal_iterator<std::string*>(
        (__gnu_cxx::__normal_iterator<const std::string*,std::vector<std::string> > *const)&__for_end,
        (const __gnu_cxx::__normal_iterator<std::string*,std::vector<std::string> > *)&__for_begin);
      std::vector<std::string>::erase(
        (std::vector<std::string> *const)(v3 + 256),
        (std::vector<std::string>::const_iterator)__for_end._M_current);
      __for_begin._M_current = (std::weak_ptr<Avatar> *)std::vector<std::string>::begin((std::vector<std::string> *const)(v3 + 320))._M_current;
      __gnu_cxx::__normal_iterator<std::string const*,std::vector<std::string>>::__normal_iterator<std::string*>(
        (__gnu_cxx::__normal_iterator<const std::string*,std::vector<std::string> > *const)&__for_end,
        (const __gnu_cxx::__normal_iterator<std::string*,std::vector<std::string> > *)&__for_begin);
      std::vector<std::string>::erase(
        (std::vector<std::string> *const)(v3 + 320),
        (std::vector<std::string>::const_iterator)__for_end._M_current);
      *(std::unordered_map<std::string,std::function<int(GmContext&,const std::vector<std::string>&,std::string&)>>::iterator *)(v3 + 64) = std::unordered_map<std::string,std::function<int ()(GmContext &,std::vector<std::string> const&,std::string&)>>::find(&GmUtils::op_func_map[abi:cxx11], (const std::unordered_map<std::string,std::function<int(GmContext&,const std::vector<std::string>&,std::string&)>>::key_type *)(v3 + 384));
      __for_end._M_current = (std::weak_ptr<Avatar> *)std::unordered_map<std::string,std::function<int ()(GmContext &,std::vector<std::string> const&,std::string&)>>::end(&GmUtils::op_func_map[abi:cxx11])._M_cur;
      if ( std::__detail::operator==<std::pair<std::string const,std::function<int ()(GmContext &,std::vector<std::string> const&,std::string&)>>,true>(
             (const std::__detail::_Node_iterator_base<std::pair<const std::string,std::function<int(GmContext&,const std::vector<std::string>&,std::string&)> >,true> *)(v3 + 64),
             (const std::__detail::_Node_iterator_base<std::pair<const std::string,std::function<int(GmContext&,const std::vector<std::string>&,std::string&)> >,true> *)&__for_end) )
      {
        common::milog::MiLogStream::create(
          (common::milog::MiLogStream *)&cmd_name,
          &common::milog::MiLogDefault::default_log_obj_,
          3u,
          "./src/player/gm/player_gm_comp.cpp",
          "onGmTalk",
          304);
        v13 = common::milog::MiLogStream::operator<<<char [20],(char *[20])0>(
                (common::milog::MiLogStream *const)&cmd_name,
                (const char (*)[20])off_2634FBA0);
        common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v13, (const std::string *)(v3 + 384));
        common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)&cmd_name);
        std::operator+<char>(&title, off_2634FBE0, (const std::string *)(v3 + 384));
        std::string::operator=(ret_msga, &title);
        std::string::~string(&title);
        v10 = -1;
      }
      else
      {
        if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
          __asan_report_load8(&this->player_);
        Player::getCurAvatar((Player *const)(v3 + 128));
        if ( std::operator==<Avatar>((const std::shared_ptr<Avatar> *)(v3 + 128), 0LL) )
        {
          common::milog::MiLogStream::create(
            (common::milog::MiLogStream *)&cmd_name,
            &common::milog::MiLogDefault::default_log_obj_,
            3u,
            "./src/player/gm/player_gm_comp.cpp",
            "onGmTalk",
            311);
          v14 = common::milog::MiLogStream::operator<<<char [19],(char *[19])0>(
                  (common::milog::MiLogStream *const)&cmd_name,
                  (const char (*)[19])"getCurAvatar fails");
          if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
            __asan_report_load8(&this->player_);
          operator<<(v14, this->player_);
          common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)&cmd_name);
          v10 = -1;
        }
        else
        {
          std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 128));
          Entity::getScene((const Entity *const)(v3 + 160));
          if ( std::operator==<Scene>((const std::shared_ptr<Scene> *)(v3 + 160), 0LL) )
          {
            common::milog::MiLogStream::create(
              (common::milog::MiLogStream *)&cmd_name,
              &common::milog::MiLogDefault::default_log_obj_,
              3u,
              "./src/player/gm/player_gm_comp.cpp",
              "onGmTalk",
              317);
            v15 = common::milog::MiLogStream::operator<<<char [15],(char *[15])0>(
                    (common::milog::MiLogStream *const)&cmd_name,
                    (const char (*)[15])"getScene fails");
            if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
              __asan_report_load8(&this->player_);
            operator<<(v15, this->player_);
            common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)&cmd_name);
            v10 = -1;
          }
          else
          {
            FightPropGuard::FightPropGuard((FightPropGuard *const)(v3 + 512));
            RefreshAbilityGuard::RefreshAbilityGuard((RefreshAbilityGuard *const)(v3 + 592));
            if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
              __asan_report_load8(&this->player_);
            AvatarComp = Player::getAvatarComp(this->player_);
            PlayerAvatarComp::getAllAvatarVec(&v42, AvatarComp);
            __for_range = &v42;
            __for_begin._M_current = std::vector<std::weak_ptr<Avatar>>::begin(&v42)._M_current;
            __for_end._M_current = std::vector<std::weak_ptr<Avatar>>::end(__for_range)._M_current;
            while ( __gnu_cxx::operator!=<std::weak_ptr<Avatar> *,std::vector<std::weak_ptr<Avatar>>>(
                      &__for_begin,
                      &__for_end) )
            {
              v17 = __gnu_cxx::__normal_iterator<std::weak_ptr<Avatar> *,std::vector<std::weak_ptr<Avatar>>>::operator*(&__for_begin);
              std::weak_ptr<Avatar>::weak_ptr((std::weak_ptr<Avatar> *const)(v3 + 192), v17);
              std::weak_ptr<Avatar>::lock(&v41);
              std::shared_ptr<Creature>::shared_ptr<Avatar,void>(
                (std::shared_ptr<Creature> *const)(v3 + 224),
                (std::shared_ptr<Avatar> *)&v41);
              FightPropGuard::addCreature((FightPropGuard *const)(v3 + 512), (CreaturePtr *)(v3 + 224), 0);
              std::shared_ptr<Creature>::~shared_ptr((std::shared_ptr<Creature> *const)(v3 + 224));
              std::shared_ptr<Avatar>::~shared_ptr((std::shared_ptr<Avatar> *const)&v41);
              std::weak_ptr<Avatar>::lock(&v41);
              std::shared_ptr<Creature>::shared_ptr<Avatar,void>(
                (std::shared_ptr<Creature> *const)(v3 + 224),
                (std::shared_ptr<Avatar> *)&v41);
              RefreshAbilityGuard::addCreature((RefreshAbilityGuard *const)(v3 + 592), (CreaturePtr *)(v3 + 224));
              std::shared_ptr<Creature>::~shared_ptr((std::shared_ptr<Creature> *const)(v3 + 224));
              std::shared_ptr<Avatar>::~shared_ptr((std::shared_ptr<Avatar> *const)&v41);
              std::weak_ptr<Avatar>::~weak_ptr((std::weak_ptr<Avatar> *const)(v3 + 192));
              __gnu_cxx::__normal_iterator<std::weak_ptr<Avatar> *,std::vector<std::weak_ptr<Avatar>>>::operator++(&__for_begin);
            }
            std::vector<std::weak_ptr<Avatar>>::~vector(&v42);
            func = &std::__detail::_Node_iterator<std::pair<std::string const,std::function<int ()(GmContext &,std::vector<std::string> const&,std::string&)>>,false,true>::operator->((const std::__detail::_Node_iterator<std::pair<const std::string,std::function<int(GmContext&,const std::vector<std::string>&,std::string&)> >,false,true> *const)(v3 + 64))->second;
            *(_QWORD *)(v3 + 672) = msg;
            v18 = std::move<std::vector<std::string> &>((std::vector<std::string> *)(v3 + 320));
            std::vector<std::string>::vector((std::vector<std::string> *const)(v3 + 680), v18);
            if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
              __asan_report_load8(&this->player_);
            *(_QWORD *)(v3 + 704) = this->player_;
            *(_QWORD *)(v3 + 712) = std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::operator*((const std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 128));
            *(_QWORD *)(v3 + 720) = std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::operator*((const std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 160));
            if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
              __asan_report_load8(&this->player_);
            uid = Player::getUid(this->player_);
            common::tools::TimeUtils::Timer::Timer((common::tools::TimeUtils::Timer *const)(v3 + 224));
            ret = std::function<int ()(GmContext &,std::vector<std::string> const&,std::string&)>::operator()(
                    func,
                    (GmContext *)(v3 + 672),
                    (const std::vector<std::string> *)(v3 + 256),
                    ret_msga);
            std::allocator<char>::allocator(&__a);
            if ( ret )
              v19 = "RET_FAIL";
            else
              v19 = "RET_SUCC";
            std::string::basic_string<std::allocator<char>>((std::string *const)(v3 + 448), v19, &__a);
            std::allocator<char>::~allocator(&__a);
            v31 = (const char *)std::string::c_str(msg);
            v20 = (unsigned int)common::tools::TimeUtils::Timer::time((const common::tools::TimeUtils::Timer *const)(v3 + 224));
            v21 = (const char *)std::string::c_str(v3 + 448);
            v22 = (const char *)std::string::c_str(v3 + 384);
            common::milog::MiLog::writeLog(
              &common::milog::MiLogDefault::default_log_obj_,
              0xBu,
              "|%s|%u|%u|%s|%d|%s|%d|%s",
              "gmTalk",
              uid,
              0LL,
              v22,
              (unsigned int)ret,
              v21,
              v20,
              v31);
            LODWORD(v21) = common::tools::TimeUtils::Timer::time((const common::tools::TimeUtils::Timer *const)(v3 + 224));
            std::allocator<char>::allocator(&__a);
            v23 = (const char *)std::string::c_str(v3 + 384);
            std::string::basic_string<std::allocator<char>>(&cmd_name, v23, &__a);
            std::allocator<char>::allocator(&v33);
            std::string::basic_string<std::allocator<char>>(&title, "gmTalk", &v33);
            CmdReport::addCmdRecord(uid, &title, &cmd_name, (uint32_t)v21, 1u);
            std::string::~string(&title);
            std::allocator<char>::~allocator(&v33);
            std::string::~string(&cmd_name);
            std::allocator<char>::~allocator(&__a);
            if ( ret )
            {
              common::milog::MiLogStream::create(
                (common::milog::MiLogStream *)&cmd_name,
                &common::milog::MiLogDefault::default_log_obj_,
                3u,
                "./src/player/gm/player_gm_comp.cpp",
                "onGmTalk",
                340);
              v24 = common::milog::MiLogStream::operator<<<char [23],(char *[23])0>(
                      (common::milog::MiLogStream *const)&cmd_name,
                      (const char (*)[23])"exec gm command fails:");
              v25 = common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v24, msg);
              v26 = common::milog::MiLogStream::operator<<<char [9],(char *[9])0>(v25, (const char (*)[9])" retmsg:");
              common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v26, ret_msga);
              common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)&cmd_name);
              std::operator+<char>(&__lhs, "command [", msg);
              std::operator+<char>(&title, &__lhs, "] execute fails: ");
              std::operator+<char>(&cmd_name, &title, ret_msga);
              std::string::operator=(ret_msga, &cmd_name);
              std::string::~string(&cmd_name);
              std::string::~string(&title);
              std::string::~string(&__lhs);
              v10 = ret;
            }
            else
            {
              common::milog::MiLogStream::create(
                (common::milog::MiLogStream *)&cmd_name,
                &common::milog::MiLogDefault::default_log_obj_,
                1u,
                "./src/player/gm/player_gm_comp.cpp",
                "onGmTalk",
                346);
              v27 = common::milog::MiLogStream::operator<<<char [25],(char *[25])0>(
                      (common::milog::MiLogStream *const)&cmd_name,
                      (const char (*)[25])"exec gm command succeed:");
              common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v27, msg);
              common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)&cmd_name);
              v10 = 0;
            }
            std::string::~string((void *)(v3 + 448));
            common::tools::TimeUtils::Timer::~Timer((common::tools::TimeUtils::Timer *const)(v3 + 224));
            GmContext::~GmContext((GmContext *const)(v3 + 672));
            RefreshAbilityGuard::~RefreshAbilityGuard((RefreshAbilityGuard *const)(v3 + 592));
            FightPropGuard::~FightPropGuard((FightPropGuard *const)(v3 + 512));
          }
          std::shared_ptr<Scene>::~shared_ptr((std::shared_ptr<Scene> *const)(v3 + 160));
        }
        std::shared_ptr<Avatar>::~shared_ptr((std::shared_ptr<Avatar> *const)(v3 + 128));
      }
      std::string::~string((void *)(v3 + 384));
      std::vector<std::string>::~vector((std::vector<std::string> *const)(v3 + 320));
    }
    std::vector<std::string>::~vector((std::vector<std::string> *const)(v3 + 256));
  }
  std::shared_ptr<Config>::~shared_ptr((std::shared_ptr<Config> *const)(v3 + 96));
  StatLogUtils::ContextHolder::~ContextHolder((StatLogUtils::ContextHolder *const)(v3 + 48));
  result = v10;
  if ( v30 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8010) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8018) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8020) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8028) = 0LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8034) = 0;
    *(_DWORD *)((v3 >> 3) + 0x7FFF803C) = 0;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8044) = 0LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8050) = 0;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8058) = 0LL;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8020) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8028) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8030) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8038) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8040) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8048) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8050) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8058) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 352: range 0000000017BBE400-0000000017BBE422
int32_t __cdecl PlayerGmComp::init(PlayerGmComp *const this)
{
  GroupLuaTestStub::init(&this->group_lua_test_stub_);
  return 0;
};

// Line 358: range 0000000017BBE424-0000000017BBE451
int32_t __cdecl PlayerGmComp::testGroupLua(PlayerGmComp *const this, uint32_t scene_id, std::string *result_str)
{
  return GroupLuaTestStub::testSceneGroupLua(&this->group_lua_test_stub_, scene_id, result_str);
};

// Line 362: range 0000000017D71BF4-0000000017D71C96
void __cdecl doKickRegister::doKickRegister(doKickRegister *const this)
{
  std::function<int(GmContext&,const std::vector<std::string>&,std::string&)> *v1; // rax
  std::allocator<char> __a; // [rsp+1Fh] [rbp-31h] BYREF
  std::string __k; // [rsp+20h] [rbp-30h] BYREF

  std::allocator<char>::allocator(&__a);
  std::string::basic_string<std::allocator<char>>(&__k, "KICK", &__a);
  v1 = std::unordered_map<std::string,std::function<int ()(GmContext &,std::vector<std::string> const&,std::string&)>>::operator[](
         &GmUtils::op_func_map[abi:cxx11],
         &__k);
  std::function<int ()(GmContext &,std::vector<std::string> const&,std::string&)>::operator=<int (&)(GmContext &,std::vector<std::string> const&,std::string&)>(
    v1,
    (int (*)(GmContext *, const std::vector<std::string> *, std::string *))doKick);
  std::string::~string(&__k);
  std::allocator<char>::~allocator(&__a);
};

// Line 363: range 0000000017BBE452-0000000017BBE563
int32_t __cdecl doKick(GmContext *context, const std::vector<std::string> *param_vec, std::string *ret_msg)
{
  unsigned __int64 v3; // rbx
  __int64 v4; // rax
  unsigned __int64 v5; // r12
  int32_t result; // eax
  char v7[96]; // [rsp+20h] [rbp-60h] BYREF

  v3 = (unsigned __int64)v7;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_0(64LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "1 32 4 10 reason:364";
  *(_QWORD *)(v3 + 16) = doKick;
  v5 = v3 >> 3;
  *(_DWORD *)(v5 + 2147450880) = -235802127;
  *(_DWORD *)(v5 + 2147450884) = -202116348;
  *(_DWORD *)(v3 + 32) = 0;
  common::tools::StringUtils::strVecToNum<0u,unsigned int>(param_vec, (unsigned int *)(v3 + 32));
  if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
    __asan_report_load8(&context->player);
  result = Player::disconnectSession(context->player, *(_DWORD *)(v3 + 32));
  if ( v7 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 369: range 0000000017D71C98-0000000017D71D3A
void __cdecl doCalcPlayerCompBinSizeRegister::doCalcPlayerCompBinSizeRegister(
        doCalcPlayerCompBinSizeRegister *const this)
{
  std::function<int(GmContext&,const std::vector<std::string>&,std::string&)> *v1; // rax
  std::allocator<char> __a; // [rsp+1Fh] [rbp-31h] BYREF
  std::string __k; // [rsp+20h] [rbp-30h] BYREF

  std::allocator<char>::allocator(&__a);
  std::string::basic_string<std::allocator<char>>(&__k, "CALC_PLAYER_COMP_BIN_SIZE", &__a);
  v1 = std::unordered_map<std::string,std::function<int ()(GmContext &,std::vector<std::string> const&,std::string&)>>::operator[](
         &GmUtils::op_func_map[abi:cxx11],
         &__k);
  std::function<int ()(GmContext &,std::vector<std::string> const&,std::string&)>::operator=<int (&)(GmContext &,std::vector<std::string> const&,std::string&)>(
    v1,
    (int (*)(GmContext *, const std::vector<std::string> *, std::string *))doCalcPlayerCompBinSize);
  std::string::~string(&__k);
  std::allocator<char>::~allocator(&__a);
};

// Line 370: range 0000000017BBE564-0000000017BBEA08
int32_t __cdecl doCalcPlayerCompBinSize(
        GmContext *context,
        const std::vector<std::string> *param_vec,
        std::string *ret_msg)
{
  unsigned __int64 v3; // r13
  __int64 v4; // rax
  _DWORD *v5; // rbx
  int32_t v6; // r14d
  std::__shared_ptr_access<PlayerCompBase,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v7; // rax
  unsigned __int64 v8; // rdx
  common::tools::StringStream<common::tools::FixedBuffer<4096> > *v9; // rax
  common::tools::StringStream<common::tools::FixedBuffer<4096> > *v10; // rax
  common::tools::StringStream<common::tools::FixedBuffer<4096> > *v11; // r14
  unsigned __int64 v12; // rax
  int32_t result; // eax
  uint32_t i; // [rsp+28h] [rbp-368h]
  int ret; // [rsp+2Ch] [rbp-364h]
  const std::pair<unsigned int,std::shared_ptr<PlayerCompBase> > *comp_pair; // [rsp+38h] [rbp-358h]
  EcsBase<Player,PlayerCompBase,71>::Iterator __for_begin; // [rsp+40h] [rbp-350h] BYREF
  EcsBase<Player,PlayerCompBase,71>::Iterator __for_end; // [rsp+50h] [rbp-340h] BYREF
  std::string v20; // [rsp+60h] [rbp-330h] BYREF
  char v21[784]; // [rsp+80h] [rbp-310h] BYREF

  v3 = (unsigned __int64)v21;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_4(736LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "3 32 4 21 player_comp_index:371 48 16 6 ss:388 80 520 19 player_data_bin:377";
  *(_QWORD *)(v3 + 16) = doCalcPlayerCompBinSize;
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = 61956;
  v5[536862722] = 62194;
  v5[536862738] = -218103808;
  v5[536862739] = -202116109;
  v5[536862740] = -202116109;
  v5[536862741] = -202116109;
  v5[536862742] = -202116109;
  *(_DWORD *)(v3 + 32) = 0;
  if ( common::tools::StringUtils::strVecToNum<0u,unsigned int>(param_vec, (unsigned int *)(v3 + 32)) )
  {
    std::string::operator=(ret_msg, "parse player_comp_index fail");
    v6 = -1;
  }
  else
  {
    proto::PlayerDataBin::PlayerDataBin((proto::PlayerDataBin *const)(v3 + 80));
    i = 0;
    if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
      __asan_report_load8(&context->player);
    EcsBase<Player,PlayerCompBase,71u>::begin((const EcsBase<Player,PlayerCompBase,71> *const)&__for_begin);
    EcsBase<Player,PlayerCompBase,71u>::end((const EcsBase<Player,PlayerCompBase,71> *const)&__for_end);
    while ( 1 )
    {
      if ( !EcsBase<Player,PlayerCompBase,71u>::Iterator::operator!=(&__for_begin, &__for_end) )
      {
        std::string::operator=(ret_msg, "player_comp not found");
        v6 = -1;
        goto LABEL_20;
      }
      comp_pair = EcsBase<Player,PlayerCompBase,71u>::Iterator::operator*(&__for_begin);
      if ( i == *(_DWORD *)(v3 + 32) )
        break;
      ++i;
      EcsBase<Player,PlayerCompBase,71u>::Iterator::operator++(&__for_begin);
    }
    if ( std::operator==<PlayerCompBase>(0LL, &comp_pair->second) )
    {
      v6 = -1;
    }
    else
    {
      v7 = std::__shared_ptr_access<PlayerCompBase,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<PlayerCompBase,(__gnu_cxx::_Lock_policy)2,false,false> *const)&comp_pair->second);
      if ( *(_BYTE *)(((unsigned __int64)v7 >> 3) + 0x7FFF8000) )
        __asan_report_load8(v7);
      v8 = (unsigned __int64)(v7->_vptr_PlayerCompBase + 3);
      if ( *(_BYTE *)((v8 >> 3) + 0x7FFF8000) )
        __asan_report_load8(v7->_vptr_PlayerCompBase + 3);
      ret = (*(__int64 (__fastcall **)(std::__shared_ptr_access<PlayerCompBase,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *, unsigned __int64))v8)(
              v7,
              v3 + 80);
      common::tools::StringStream<common::tools::FixedBuffer<4096>>::StringStream((common::tools::StringStream<common::tools::FixedBuffer<4096> > *const)(v3 + 48));
      v9 = common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(
             (common::tools::StringStream<common::tools::FixedBuffer<4096> > *const)(v3 + 48),
             "ret:");
      v10 = common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(v9, ret);
      v11 = common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(v10, " player_data_bin's size:");
      v12 = proto::PlayerDataBin::ByteSizeLong((const proto::PlayerDataBin *const)(v3 + 80));
      common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(v11, v12);
      common::tools::StringStream<common::tools::FixedBuffer<4096>>::str[abi:cxx11](
        &v20,
        (common::tools::StringStream<common::tools::FixedBuffer<4096> > *const)(v3 + 48));
      std::string::operator=(ret_msg, &v20);
      std::string::~string(&v20);
      v6 = 0;
      common::tools::StringStream<common::tools::FixedBuffer<4096>>::~StringStream((common::tools::StringStream<common::tools::FixedBuffer<4096> > *const)(v3 + 48));
    }
LABEL_20:
    proto::PlayerDataBin::~PlayerDataBin((proto::PlayerDataBin *const)(v3 + 80));
  }
  result = v6;
  if ( v21 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8008) = 0;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8048) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8050) = 0LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8058) = 0;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8020) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8028) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8030) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8038) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8040) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8048) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8050) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8058) = -168430091;
  }
  return result;
};

// Line 399: range 0000000017D71D3C-0000000017D71DDE
void __cdecl doCloneAllAvatarToMirrorRegister::doCloneAllAvatarToMirrorRegister(
        doCloneAllAvatarToMirrorRegister *const this)
{
  std::function<int(GmContext&,const std::vector<std::string>&,std::string&)> *v1; // rax
  std::allocator<char> __a; // [rsp+1Fh] [rbp-31h] BYREF
  std::string __k; // [rsp+20h] [rbp-30h] BYREF

  std::allocator<char>::allocator(&__a);
  std::string::basic_string<std::allocator<char>>(&__k, "CLONE_ALL_AVATAR_TO_MIRROR", &__a);
  v1 = std::unordered_map<std::string,std::function<int ()(GmContext &,std::vector<std::string> const&,std::string&)>>::operator[](
         &GmUtils::op_func_map[abi:cxx11],
         &__k);
  std::function<int ()(GmContext &,std::vector<std::string> const&,std::string&)>::operator=<int (&)(GmContext &,std::vector<std::string> const&,std::string&)>(
    v1,
    (int (*)(GmContext *, const std::vector<std::string> *, std::string *))doCloneAllAvatarToMirror);
  std::string::~string(&__k);
  std::allocator<char>::~allocator(&__a);
};

// Line 400: range 0000000017BBEA09-0000000017BBEC4E
int32_t __cdecl doCloneAllAvatarToMirror(
        GmContext *context,
        const std::vector<std::string> *param_vec,
        std::string *ret_msg)
{
  unsigned __int64 v3; // r12
  __int64 v4; // rax
  _DWORD *v5; // rbx
  PlayerAvatarComp *AvatarComp; // rax
  PlayerAvatarComp *v7; // rax
  int32_t v8; // r14d
  int32_t result; // eax
  char v11[208]; // [rsp+30h] [rbp-D0h] BYREF

  v3 = (unsigned __int64)v11;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_2(160LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "2 32 24 23 all_avatar_guid_vec:401 96 24 19 mirror_guid_vec:402";
  *(_QWORD *)(v3 + 16) = doCloneAllAvatarToMirror;
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = -234881024;
  v5[536862722] = -218959118;
  v5[536862723] = -218103808;
  v5[536862724] = -202116109;
  if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
    __asan_report_load8(&context->player);
  AvatarComp = Player::getAvatarComp(context->player);
  PlayerAvatarComp::getAllAvatarGuids((std::vector<long unsigned int> *)(v3 + 32), AvatarComp);
  std::vector<unsigned long>::vector((std::vector<long unsigned int> *const)(v3 + 96));
  if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
    __asan_report_load8(&context->player);
  v7 = Player::getAvatarComp(context->player);
  if ( PlayerAvatarComp::addMirrorAvatars(
         v7,
         (const std::vector<long unsigned int> *)(v3 + 32),
         (std::vector<long unsigned int> *)(v3 + 96),
         AVATAR_SNAPSHOT_TYPE_NONE) )
  {
    std::string::operator=(ret_msg, "addMirrorAvatars fail");
    v8 = -1;
  }
  else
  {
    v8 = 0;
  }
  std::vector<unsigned long>::~vector((std::vector<long unsigned int> *const)(v3 + 96));
  std::vector<unsigned long>::~vector((std::vector<long unsigned int> *const)(v3 + 32));
  result = v8;
  if ( v11 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8010) = 0;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8010) = -168430091;
  }
  return result;
};

// Line 412: range 0000000017D71DE0-0000000017D71E82
void __cdecl doRemoveAllMirrorAvatarRegister::doRemoveAllMirrorAvatarRegister(
        doRemoveAllMirrorAvatarRegister *const this)
{
  std::function<int(GmContext&,const std::vector<std::string>&,std::string&)> *v1; // rax
  std::allocator<char> __a; // [rsp+1Fh] [rbp-31h] BYREF
  std::string __k; // [rsp+20h] [rbp-30h] BYREF

  std::allocator<char>::allocator(&__a);
  std::string::basic_string<std::allocator<char>>(&__k, "REMOVE_ALL_MIRROR_AVATAR", &__a);
  v1 = std::unordered_map<std::string,std::function<int ()(GmContext &,std::vector<std::string> const&,std::string&)>>::operator[](
         &GmUtils::op_func_map[abi:cxx11],
         &__k);
  std::function<int ()(GmContext &,std::vector<std::string> const&,std::string&)>::operator=<int (&)(GmContext &,std::vector<std::string> const&,std::string&)>(
    v1,
    (int (*)(GmContext *, const std::vector<std::string> *, std::string *))doRemoveAllMirrorAvatar);
  std::string::~string(&__k);
  std::allocator<char>::~allocator(&__a);
};

// Line 413: range 0000000017BBEC4F-0000000017BBEFC3
int32_t __cdecl doRemoveAllMirrorAvatar(
        GmContext *context,
        const std::vector<std::string> *param_vec,
        std::string *ret_msg)
{
  unsigned __int64 v3; // r13
  __int64 v4; // rax
  _DWORD *v5; // r12
  PlayerAvatarComp *AvatarComp; // rax
  const std::weak_ptr<Avatar> *v7; // rax
  std::__shared_ptr_access<MirrorAvatar,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v8; // rax
  PlayerAvatarComp *v9; // rax
  int32_t v10; // r14d
  int32_t result; // eax
  std::vector<std::weak_ptr<Avatar>>::iterator __for_begin; // [rsp+20h] [rbp-120h] BYREF
  std::vector<std::weak_ptr<Avatar>>::iterator __for_end; // [rsp+28h] [rbp-118h] BYREF
  std::vector<long unsigned int>::value_type __x; // [rsp+30h] [rbp-110h] BYREF
  std::vector<std::weak_ptr<Avatar>> *__for_range; // [rsp+38h] [rbp-108h]
  std::weak_ptr<Avatar> v16; // [rsp+40h] [rbp-100h] BYREF
  std::vector<std::weak_ptr<Avatar>> v17; // [rsp+50h] [rbp-F0h] BYREF
  char v18[208]; // [rsp+70h] [rbp-D0h] BYREF

  v3 = (unsigned __int64)v18;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_2(160LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "3 32 16 14 avatar_wtr:415 64 16 21 mirror_avatar_ptr:417 96 24 23 del_avatar_guid_vec:414";
  *(_QWORD *)(v3 + 16) = doRemoveAllMirrorAvatar;
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = -219021312;
  v5[536862722] = -219021312;
  v5[536862723] = -218103808;
  v5[536862724] = -202116109;
  std::vector<unsigned long>::vector((std::vector<long unsigned int> *const)(v3 + 96));
  if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
    __asan_report_load8(&context->player);
  AvatarComp = Player::getAvatarComp(context->player);
  PlayerAvatarComp::getAllAvatarVec(&v17, AvatarComp);
  __for_range = &v17;
  __for_begin._M_current = std::vector<std::weak_ptr<Avatar>>::begin(&v17)._M_current;
  __for_end._M_current = std::vector<std::weak_ptr<Avatar>>::end(&v17)._M_current;
  while ( __gnu_cxx::operator!=<std::weak_ptr<Avatar> *,std::vector<std::weak_ptr<Avatar>>>(&__for_begin, &__for_end) )
  {
    v7 = __gnu_cxx::__normal_iterator<std::weak_ptr<Avatar> *,std::vector<std::weak_ptr<Avatar>>>::operator*(&__for_begin);
    std::weak_ptr<Avatar>::weak_ptr((std::weak_ptr<Avatar> *const)(v3 + 32), v7);
    std::weak_ptr<Avatar>::lock(&v16);
    std::dynamic_pointer_cast<MirrorAvatar,Avatar>((const std::shared_ptr<Avatar> *)(v3 + 64));
    std::shared_ptr<Avatar>::~shared_ptr((std::shared_ptr<Avatar> *const)&v16);
    if ( std::operator!=<MirrorAvatar>(0LL, (const std::shared_ptr<MirrorAvatar> *)(v3 + 64)) )
    {
      v8 = std::__shared_ptr_access<MirrorAvatar,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<MirrorAvatar,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 64));
      __x = Avatar::getGuid(v8);
      std::vector<unsigned long>::push_back((std::vector<long unsigned int> *const)(v3 + 96), &__x);
    }
    std::shared_ptr<MirrorAvatar>::~shared_ptr((std::shared_ptr<MirrorAvatar> *const)(v3 + 64));
    std::weak_ptr<Avatar>::~weak_ptr((std::weak_ptr<Avatar> *const)(v3 + 32));
    __gnu_cxx::__normal_iterator<std::weak_ptr<Avatar> *,std::vector<std::weak_ptr<Avatar>>>::operator++(&__for_begin);
  }
  std::vector<std::weak_ptr<Avatar>>::~vector(&v17);
  if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
    __asan_report_load8(&context->player);
  v9 = Player::getAvatarComp(context->player);
  v10 = PlayerAvatarComp::delInformalAvatarBatchAndReplaceByAvatarTeam(
          v9,
          (const std::vector<long unsigned int> *)(v3 + 96));
  std::vector<unsigned long>::~vector((std::vector<long unsigned int> *const)(v3 + 96));
  result = v10;
  if ( v18 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8010) = 0;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8010) = -168430091;
  }
  return result;
};

// Line 426: range 0000000017D71E84-0000000017D71F26
void __cdecl doAvatarSnapshotRegister::doAvatarSnapshotRegister(doAvatarSnapshotRegister *const this)
{
  std::function<int(GmContext&,const std::vector<std::string>&,std::string&)> *v1; // rax
  std::allocator<char> __a; // [rsp+1Fh] [rbp-31h] BYREF
  std::string __k; // [rsp+20h] [rbp-30h] BYREF

  std::allocator<char>::allocator(&__a);
  std::string::basic_string<std::allocator<char>>(&__k, "AVATAR_SNAPSHOT", &__a);
  v1 = std::unordered_map<std::string,std::function<int ()(GmContext &,std::vector<std::string> const&,std::string&)>>::operator[](
         &GmUtils::op_func_map[abi:cxx11],
         &__k);
  std::function<int ()(GmContext &,std::vector<std::string> const&,std::string&)>::operator=<int (&)(GmContext &,std::vector<std::string> const&,std::string&)>(
    v1,
    (int (*)(GmContext *, const std::vector<std::string> *, std::string *))doAvatarSnapshot);
  std::string::~string(&__k);
  std::allocator<char>::~allocator(&__a);
};

// Line 427: range 0000000017BBEFC4-0000000017BC02E1
int32_t __cdecl doAvatarSnapshot(GmContext *context, const std::vector<std::string> *param_vec, std::string *ret_msg)
{
  int32_t v3; // r14d
  unsigned __int64 v4; // r13
  __int64 v5; // rax
  _DWORD *v6; // r12
  PlayerAvatarComp *AvatarComp; // rax
  unsigned __int64 *M_current; // r15
  std::vector<long unsigned int>::iterator v9; // rax
  const std::string *v10; // rax
  PlayerAvatarComp *v11; // rax
  const std::weak_ptr<Avatar> *v12; // rax
  std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v13; // rax
  unsigned __int64 v14; // rdx
  unsigned __int64 v15; // rax
  common::tools::StringStream<common::tools::FixedBuffer<4096> > *v16; // r14
  unsigned __int64 v17; // rax
  common::tools::StringStream<common::tools::FixedBuffer<4096> > *v18; // rax
  common::tools::StringStream<common::tools::FixedBuffer<4096> > *v19; // rax
  const std::string *v20; // rax
  const std::string *v21; // rax
  const std::string *v22; // rax
  bool v23; // r14
  PlayerAvatarComp *v24; // rax
  uint64_t *v25; // rax
  PlayerAvatarComp *v26; // rax
  PlayerAvatarComp *v27; // rax
  const std::string *v28; // rax
  const std::string *v29; // rax
  const std::string *v30; // rax
  bool v31; // r15
  int v32; // r15d
  uint64_t *v33; // rax
  PlayerAvatarComp *v34; // rax
  int v35; // r15d
  uint64_t *v36; // rax
  PlayerAvatarComp *v37; // r15
  int v38; // r15d
  const std::string *v39; // rax
  PlayerAvatarComp *v40; // rax
  const std::weak_ptr<Avatar> *v41; // rax
  std::__shared_ptr_access<MirrorAvatar,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v42; // rax
  std::mersenne_twister_engine<long unsigned int,32,624,397,31,2567483615,11,4294967295,7,2636928640,15,4022730752,18,1812433253> *RandGenerator; // r15
  unsigned __int64 *v44; // r14
  std::vector<long unsigned int>::iterator v45; // rax
  unsigned __int64 *v46; // r15
  unsigned __int64 *v47; // r14
  PlayerAvatarComp *v48; // rax
  int32_t result; // eax
  std::mt19937 *__g; // [rsp+10h] [rbp-2C0h]
  std::allocator<char> __a; // [rsp+3Eh] [rbp-292h] BYREF
  bool is_setup_team; // [rsp+3Fh] [rbp-291h]
  std::map<unsigned int,unsigned int>::key_type __k; // [rsp+40h] [rbp-290h] BYREF
  uint32_t idx; // [rsp+44h] [rbp-28Ch]
  std::vector<std::weak_ptr<Avatar>>::iterator __for_begin_0; // [rsp+48h] [rbp-288h] BYREF
  std::vector<std::weak_ptr<Avatar>>::iterator __for_end_0; // [rsp+50h] [rbp-280h] BYREF
  std::vector<std::weak_ptr<Avatar>>::iterator __for_end; // [rsp+58h] [rbp-278h] BYREF
  std::map<long unsigned int,proto::AvatarSnapshotBin> *avatar_snapshot_map; // [rsp+60h] [rbp-270h]
  std::vector<std::weak_ptr<Avatar>> *__for_range_2; // [rsp+68h] [rbp-268h]
  std::vector<long unsigned int> *__for_range_1; // [rsp+70h] [rbp-260h]
  uint64_t appear_guid; // [rsp+78h] [rbp-258h]
  uint64_t guid_0; // [rsp+80h] [rbp-250h]
  std::vector<long unsigned int> *__for_range_0; // [rsp+88h] [rbp-248h]
  uint64_t guid; // [rsp+90h] [rbp-240h]
  std::vector<std::weak_ptr<Avatar>> *__for_range; // [rsp+98h] [rbp-238h]
  std::string sep; // [rsp+A0h] [rbp-230h] BYREF
  char v68[528]; // [rsp+C0h] [rbp-210h] BYREF

  v4 = (unsigned __int64)v68;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v5 = __asan_stack_malloc_3(480LL);
    if ( v5 )
      v4 = v5;
  }
  *(_QWORD *)v4 = 1102416563LL;
  *(_QWORD *)(v4 + 8) = "8 48 16 14 avatar_wtr:531 80 16 21 mirror_avatar_ptr:533 112 16 14 avatar_ptr:444 144 24 21 snap"
                        "shot_guid_vec:429 208 24 19 avatar_guid_vec:460 272 24 12 guid_vec:530 336 24 14 avatar_vec:473 "
                        "400 48 25 avatar_type_count_map:441";
  *(_QWORD *)(v4 + 16) = doAvatarSnapshot;
  v6 = (_DWORD *)(v4 >> 3);
  v6[536862720] = -235802127;
  v6[536862721] = 61937;
  v6[536862722] = 62194;
  v6[536862723] = 62194;
  v6[536862724] = 62194;
  v6[536862725] = -218959360;
  v6[536862726] = 62194;
  v6[536862727] = -218959360;
  v6[536862728] = 62194;
  v6[536862729] = -218959360;
  v6[536862730] = 62194;
  v6[536862731] = -218959360;
  v6[536862732] = 62194;
  v6[536862734] = -202116109;
  if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
    __asan_report_load8(&context->player);
  AvatarComp = Player::getAvatarComp(context->player);
  avatar_snapshot_map = PlayerAvatarComp::getAvatarSnapshotMapByGm(AvatarComp);
  common::tools::MiscUtils::getAllMapKeys<std::map<unsigned long,proto::AvatarSnapshotBin>>(
    (std::vector<long unsigned int> *)(v4 + 144),
    avatar_snapshot_map);
  __g = common::tools::RandomUtils::getRandGenerator();
  M_current = std::vector<unsigned long>::end((std::vector<long unsigned int> *const)(v4 + 144))._M_current;
  v9._M_current = std::vector<unsigned long>::begin((std::vector<long unsigned int> *const)(v4 + 144))._M_current;
  std::shuffle<__gnu_cxx::__normal_iterator<unsigned long *,std::vector<unsigned long>>,std::mersenne_twister_engine<unsigned long,32ul,624ul,397ul,31ul,2567483615ul,11ul,4294967295ul,7ul,2636928640ul,15ul,4022730752ul,18ul,1812433253ul> &>(
    v9,
    (__gnu_cxx::__normal_iterator<long unsigned int*,std::vector<long unsigned int> >)M_current,
    __g);
  if ( std::vector<unsigned long>::size((const std::vector<long unsigned int> *const)(v4 + 144)) > 4 )
    std::vector<unsigned long>::resize((std::vector<long unsigned int> *const)(v4 + 144), 4uLL);
  if ( !std::vector<std::string>::size(param_vec) )
  {
    v3 = -1;
    goto LABEL_93;
  }
  v10 = std::vector<std::string>::operator[](param_vec, 0LL);
  if ( std::operator==<char>(v10, "PRINT") )
  {
    std::map<unsigned int,unsigned int>::map((std::map<unsigned int,unsigned int> *const)(v4 + 400));
    if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
      __asan_report_load8(&context->player);
    v11 = Player::getAvatarComp(context->player);
    PlayerAvatarComp::getAllAvatarVec((std::vector<std::weak_ptr<Avatar>> *)(v4 + 336), v11);
    __for_range = (std::vector<std::weak_ptr<Avatar>> *)(v4 + 336);
    __for_end_0._M_current = std::vector<std::weak_ptr<Avatar>>::begin((std::vector<std::weak_ptr<Avatar>> *const)(v4 + 336))._M_current;
    __for_end._M_current = std::vector<std::weak_ptr<Avatar>>::end((std::vector<std::weak_ptr<Avatar>> *const)(v4 + 336))._M_current;
    while ( __gnu_cxx::operator!=<std::weak_ptr<Avatar> *,std::vector<std::weak_ptr<Avatar>>>(&__for_end_0, &__for_end) )
    {
      v12 = __gnu_cxx::__normal_iterator<std::weak_ptr<Avatar> *,std::vector<std::weak_ptr<Avatar>>>::operator*(&__for_end_0);
      std::weak_ptr<Avatar>::weak_ptr((std::weak_ptr<Avatar> *const)(v4 + 80), v12);
      std::weak_ptr<Avatar>::lock((const std::weak_ptr<Avatar> *const)(v4 + 112));
      if ( std::operator!=<Avatar>(0LL, (const std::shared_ptr<Avatar> *)(v4 + 112)) )
      {
        v13 = std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 112));
        if ( *(_BYTE *)(((unsigned __int64)v13 >> 3) + 0x7FFF8000) )
          __asan_report_load8(v13);
        v14 = *(_QWORD *)v13->baseclass_0 + 400LL;
        if ( *(_BYTE *)((v14 >> 3) + 0x7FFF8000) )
          __asan_report_load8(*(_QWORD *)v13->baseclass_0 + 400LL);
        __k = (*(__int64 (__fastcall **)(std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *))v14)(v13);
        v15 = (unsigned __int64)std::map<unsigned int,unsigned int>::operator[](
                                  (std::map<unsigned int,unsigned int> *const)(v4 + 400),
                                  &__k);
        if ( *(_BYTE *)((v15 >> 3) + 0x7FFF8000) != 0 && (char)((v15 & 7) + 3) >= *(_BYTE *)((v15 >> 3) + 0x7FFF8000) )
          v15 = __asan_report_load4(v15);
        ++*(_DWORD *)v15;
      }
      std::shared_ptr<Avatar>::~shared_ptr((std::shared_ptr<Avatar> *const)(v4 + 112));
      std::weak_ptr<Avatar>::~weak_ptr((std::weak_ptr<Avatar> *const)(v4 + 80));
      __gnu_cxx::__normal_iterator<std::weak_ptr<Avatar> *,std::vector<std::weak_ptr<Avatar>>>::operator++(&__for_end_0);
    }
    std::vector<std::weak_ptr<Avatar>>::~vector((std::vector<std::weak_ptr<Avatar>> *const)(v4 + 336));
    common::tools::StringStream<common::tools::FixedBuffer<4096>>::StringStream((common::tools::StringStream<common::tools::FixedBuffer<4096> > *const)(v4 + 112));
    v16 = common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(
            (common::tools::StringStream<common::tools::FixedBuffer<4096> > *const)(v4 + 112),
            "snapshot_map's size:");
    v17 = std::map<unsigned long,proto::AvatarSnapshotBin>::size(avatar_snapshot_map);
    v18 = common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(v16, v17);
    v19 = common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(v18, " avatar_type_count_map:");
    common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<<unsigned int,unsigned int>(
      v19,
      (const std::map<unsigned int,unsigned int> *)(v4 + 400));
    common::tools::StringStream<common::tools::FixedBuffer<4096>>::str[abi:cxx11](
      &sep,
      (common::tools::StringStream<common::tools::FixedBuffer<4096> > *const)(v4 + 112));
    std::string::operator=(ret_msg, &sep);
    std::string::~string(&sep);
    common::tools::StringStream<common::tools::FixedBuffer<4096>>::~StringStream((common::tools::StringStream<common::tools::FixedBuffer<4096> > *const)(v4 + 112));
    std::map<unsigned int,unsigned int>::~map((std::map<unsigned int,unsigned int> *const)(v4 + 400));
    goto LABEL_92;
  }
  v20 = std::vector<std::string>::operator[](param_vec, 0LL);
  if ( std::operator==<char>(v20, "CLEAR") )
  {
    std::map<unsigned long,proto::AvatarSnapshotBin>::clear(avatar_snapshot_map);
LABEL_92:
    v3 = 0;
    goto LABEL_93;
  }
  v21 = std::vector<std::string>::operator[](param_vec, 0LL);
  if ( std::operator==<char>(v21, "SAVE") )
  {
    std::vector<unsigned long>::vector((std::vector<long unsigned int> *const)(v4 + 208));
    if ( std::vector<std::string>::size(param_vec) <= 1 )
    {
      if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
        __asan_report_load8(&context->player);
      v24 = Player::getAvatarComp(context->player);
      PlayerAvatarComp::getAllAvatarGuids((std::vector<long unsigned int> *)(v4 + 272), v24);
      std::vector<unsigned long>::operator=(
        (std::vector<long unsigned int> *const)(v4 + 208),
        (std::vector<long unsigned int> *)(v4 + 272));
      std::vector<unsigned long>::~vector((std::vector<long unsigned int> *const)(v4 + 272));
    }
    else
    {
      std::allocator<char>::allocator(&__a);
      std::string::basic_string<std::allocator<char>>(&sep, ",", &__a);
      v22 = std::vector<std::string>::operator[](param_vec, 1uLL);
      v23 = common::tools::StringUtils::splitToList<unsigned long>(
              v22,
              &sep,
              (std::vector<long unsigned int> *)(v4 + 208),
              0) != 0;
      std::string::~string(&sep);
      std::allocator<char>::~allocator(&__a);
      if ( v23 )
      {
        std::string::operator=(ret_msg, "parse guid list fail");
        v3 = -1;
LABEL_44:
        std::vector<unsigned long>::~vector((std::vector<long unsigned int> *const)(v4 + 208));
        goto LABEL_93;
      }
    }
    std::vector<std::shared_ptr<Avatar>>::vector((std::vector<std::shared_ptr<Avatar>> *const)(v4 + 336));
    __for_range_0 = (std::vector<long unsigned int> *)(v4 + 208);
    __for_end_0._M_current = (std::weak_ptr<Avatar> *)std::vector<unsigned long>::begin((std::vector<long unsigned int> *const)(v4 + 208))._M_current;
    __for_end._M_current = (std::weak_ptr<Avatar> *)std::vector<unsigned long>::end(__for_range_0)._M_current;
    while ( __gnu_cxx::operator!=<unsigned long *,std::vector<unsigned long>>(
              (const __gnu_cxx::__normal_iterator<long unsigned int*,std::vector<long unsigned int> > *)&__for_end_0,
              (const __gnu_cxx::__normal_iterator<long unsigned int*,std::vector<long unsigned int> > *)&__for_end) )
    {
      v25 = __gnu_cxx::__normal_iterator<unsigned long *,std::vector<unsigned long>>::operator*((const __gnu_cxx::__normal_iterator<long unsigned int*,std::vector<long unsigned int> > *const)&__for_end_0);
      if ( *(_BYTE *)(((unsigned __int64)v25 >> 3) + 0x7FFF8000) )
        __asan_report_load8(v25);
      guid = *v25;
      if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
        __asan_report_load8(&context->player);
      v26 = Player::getAvatarComp(context->player);
      PlayerAvatarComp::findAvatar((const PlayerAvatarComp *const)(v4 + 112), (uint64_t)v26, guid);
      std::vector<std::shared_ptr<Avatar>>::push_back(
        (std::vector<std::shared_ptr<Avatar>> *const)(v4 + 336),
        (std::vector<std::shared_ptr<Avatar>>::value_type *)(v4 + 112));
      std::shared_ptr<Avatar>::~shared_ptr((std::shared_ptr<Avatar> *const)(v4 + 112));
      __gnu_cxx::__normal_iterator<unsigned long *,std::vector<unsigned long>>::operator++((__gnu_cxx::__normal_iterator<long unsigned int*,std::vector<long unsigned int> > *const)&__for_end_0);
    }
    std::vector<unsigned long>::clear((std::vector<long unsigned int> *const)(v4 + 144));
    if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
      __asan_report_load8(&context->player);
    v27 = Player::getAvatarComp(context->player);
    v3 = PlayerAvatarComp::saveAvatarSnapshotBatch(
           v27,
           AVATAR_SNAPSHOT_TYPE_NONE,
           (const std::vector<std::shared_ptr<Avatar>> *)(v4 + 336),
           (std::vector<long unsigned int> *)(v4 + 144));
    std::vector<std::shared_ptr<Avatar>>::~vector((std::vector<std::shared_ptr<Avatar>> *const)(v4 + 336));
    goto LABEL_44;
  }
  v28 = std::vector<std::string>::operator[](param_vec, 0LL);
  if ( std::operator==<char>(v28, "FIND_OR_CREATE") )
  {
    is_setup_team = 0;
    if ( std::vector<std::string>::size(param_vec) <= 1 )
      goto LABEL_98;
    idx = 1;
    v29 = std::vector<std::string>::operator[](param_vec, 1uLL);
    if ( std::operator==<char>(v29, "SETUP") )
    {
      is_setup_team = 1;
      ++idx;
    }
    if ( idx >= std::vector<std::string>::size(param_vec) )
      goto LABEL_98;
    std::vector<unsigned long>::vector((std::vector<long unsigned int> *const)(v4 + 336));
    std::allocator<char>::allocator(&__a);
    std::string::basic_string<std::allocator<char>>(&sep, ",", &__a);
    v30 = std::vector<std::string>::operator[](param_vec, idx);
    v31 = common::tools::StringUtils::splitToList<unsigned long>(
            v30,
            &sep,
            (std::vector<long unsigned int> *)(v4 + 336),
            0) != 0;
    std::string::~string(&sep);
    std::allocator<char>::~allocator(&__a);
    if ( v31 )
    {
      std::string::operator=(ret_msg, "parse guid list fail");
      v3 = -1;
      v32 = 0;
    }
    else
    {
      std::vector<unsigned long>::operator=(
        (std::vector<long unsigned int> *const)(v4 + 144),
        (const std::vector<long unsigned int> *)(v4 + 336));
      v32 = 1;
    }
    std::vector<unsigned long>::~vector((std::vector<long unsigned int> *const)(v4 + 336));
    if ( v32 == 1 )
    {
LABEL_98:
      __for_range_1 = (std::vector<long unsigned int> *)(v4 + 144);
      __for_end_0._M_current = (std::weak_ptr<Avatar> *)std::vector<unsigned long>::begin((std::vector<long unsigned int> *const)(v4 + 144))._M_current;
      __for_end._M_current = (std::weak_ptr<Avatar> *)std::vector<unsigned long>::end(__for_range_1)._M_current;
      while ( __gnu_cxx::operator!=<unsigned long *,std::vector<unsigned long>>(
                (const __gnu_cxx::__normal_iterator<long unsigned int*,std::vector<long unsigned int> > *)&__for_end_0,
                (const __gnu_cxx::__normal_iterator<long unsigned int*,std::vector<long unsigned int> > *)&__for_end) )
      {
        v33 = __gnu_cxx::__normal_iterator<unsigned long *,std::vector<unsigned long>>::operator*((const __gnu_cxx::__normal_iterator<long unsigned int*,std::vector<long unsigned int> > *const)&__for_end_0);
        if ( *(_BYTE *)(((unsigned __int64)v33 >> 3) + 0x7FFF8000) )
          __asan_report_load8(v33);
        guid_0 = *v33;
        if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
          __asan_report_load8(&context->player);
        v34 = Player::getAvatarComp(context->player);
        PlayerAvatarComp::findMirrorAvatarOrCreateFromSnapshot((PlayerAvatarComp *const)(v4 + 112), v34, 0LL, guid_0);
        if ( std::operator==<MirrorAvatar>(0LL, (const std::shared_ptr<MirrorAvatar> *)(v4 + 112)) )
        {
          std::string::operator=(ret_msg, "create fail");
          v3 = -1;
          v35 = 0;
        }
        else
        {
          v35 = 1;
        }
        std::shared_ptr<MirrorAvatar>::~shared_ptr((std::shared_ptr<MirrorAvatar> *const)(v4 + 112));
        if ( v35 != 1 )
          goto LABEL_93;
        __gnu_cxx::__normal_iterator<unsigned long *,std::vector<unsigned long>>::operator++((__gnu_cxx::__normal_iterator<long unsigned int*,std::vector<long unsigned int> > *const)&__for_end_0);
      }
      if ( !is_setup_team )
        goto LABEL_92;
      if ( std::vector<unsigned long>::empty((const std::vector<long unsigned int> *const)(v4 + 144)) )
      {
        std::string::operator=(ret_msg, "snapshot_guid_vec is empty");
        v3 = -1;
        goto LABEL_93;
      }
      v36 = std::vector<unsigned long>::operator[]((std::vector<long unsigned int> *const)(v4 + 144), 0LL);
      if ( *(_BYTE *)(((unsigned __int64)v36 >> 3) + 0x7FFF8000) )
        __asan_report_load8(v36);
      appear_guid = *v36;
      if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
        __asan_report_load8(&context->player);
      Player::getSceneComp(context->player);
      PlayerSceneComp::getCurScene((const PlayerSceneComp *const)(v4 + 80));
      if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
        __asan_report_load8(&context->player);
      v37 = Player::getAvatarComp(context->player);
      std::shared_ptr<Scene>::shared_ptr(
        (std::shared_ptr<Scene> *const)(v4 + 112),
        (const std::shared_ptr<Scene> *)(v4 + 80));
      LOBYTE(v37) = PlayerAvatarComp::setSceneTeamAndAddToScene(
                      v37,
                      (const std::vector<long unsigned int> *)(v4 + 144),
                      appear_guid,
                      (ScenePtr *)(v4 + 112),
                      CHANGE_SCENE_TEAM_REASON_GM) != 0;
      std::shared_ptr<Scene>::~shared_ptr((std::shared_ptr<Scene> *const)(v4 + 112));
      if ( (_BYTE)v37 )
      {
        std::string::operator=(ret_msg, "setSceneTeamAndAddToScene fail");
        v3 = -1;
        v38 = 0;
      }
      else
      {
        v38 = 1;
      }
      std::shared_ptr<Scene>::~shared_ptr((std::shared_ptr<Scene> *const)(v4 + 80));
      if ( v38 == 1 )
        goto LABEL_92;
    }
  }
  else
  {
    v39 = std::vector<std::string>::operator[](param_vec, 0LL);
    if ( !std::operator==<char>(v39, "RANDOM_REMOVE") )
      goto LABEL_92;
    std::vector<unsigned long>::vector((std::vector<long unsigned int> *const)(v4 + 272));
    if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
      __asan_report_load8(&context->player);
    v40 = Player::getAvatarComp(context->player);
    PlayerAvatarComp::getAllAvatarVec((std::vector<std::weak_ptr<Avatar>> *)(v4 + 336), v40);
    __for_range_2 = (std::vector<std::weak_ptr<Avatar>> *)(v4 + 336);
    __for_begin_0._M_current = std::vector<std::weak_ptr<Avatar>>::begin((std::vector<std::weak_ptr<Avatar>> *const)(v4 + 336))._M_current;
    __for_end_0._M_current = std::vector<std::weak_ptr<Avatar>>::end((std::vector<std::weak_ptr<Avatar>> *const)(v4 + 336))._M_current;
    while ( __gnu_cxx::operator!=<std::weak_ptr<Avatar> *,std::vector<std::weak_ptr<Avatar>>>(
              &__for_begin_0,
              &__for_end_0) )
    {
      v41 = __gnu_cxx::__normal_iterator<std::weak_ptr<Avatar> *,std::vector<std::weak_ptr<Avatar>>>::operator*(&__for_begin_0);
      std::weak_ptr<Avatar>::weak_ptr((std::weak_ptr<Avatar> *const)(v4 + 48), v41);
      std::weak_ptr<Avatar>::lock((const std::weak_ptr<Avatar> *const)(v4 + 112));
      std::dynamic_pointer_cast<MirrorAvatar,Avatar>((const std::shared_ptr<Avatar> *)(v4 + 80));
      std::shared_ptr<Avatar>::~shared_ptr((std::shared_ptr<Avatar> *const)(v4 + 112));
      if ( std::operator!=<MirrorAvatar>(0LL, (const std::shared_ptr<MirrorAvatar> *)(v4 + 80)) )
      {
        v42 = std::__shared_ptr_access<MirrorAvatar,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<MirrorAvatar,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 80));
        __for_end._M_current = (std::weak_ptr<Avatar> *)Avatar::getGuid(v42);
        std::vector<unsigned long>::push_back(
          (std::vector<long unsigned int> *const)(v4 + 272),
          (std::vector<long unsigned int>::value_type *)&__for_end);
      }
      std::shared_ptr<MirrorAvatar>::~shared_ptr((std::shared_ptr<MirrorAvatar> *const)(v4 + 80));
      std::weak_ptr<Avatar>::~weak_ptr((std::weak_ptr<Avatar> *const)(v4 + 48));
      __gnu_cxx::__normal_iterator<std::weak_ptr<Avatar> *,std::vector<std::weak_ptr<Avatar>>>::operator++(&__for_begin_0);
    }
    std::vector<std::weak_ptr<Avatar>>::~vector((std::vector<std::weak_ptr<Avatar>> *const)(v4 + 336));
    RandGenerator = common::tools::RandomUtils::getRandGenerator();
    v44 = std::vector<unsigned long>::end((std::vector<long unsigned int> *const)(v4 + 272))._M_current;
    v45._M_current = std::vector<unsigned long>::begin((std::vector<long unsigned int> *const)(v4 + 272))._M_current;
    std::shuffle<__gnu_cxx::__normal_iterator<unsigned long *,std::vector<unsigned long>>,std::mersenne_twister_engine<unsigned long,32ul,624ul,397ul,31ul,2567483615ul,11ul,4294967295ul,7ul,2636928640ul,15ul,4022730752ul,18ul,1812433253ul> &>(
      v45,
      (__gnu_cxx::__normal_iterator<long unsigned int*,std::vector<long unsigned int> >)v44,
      RandGenerator);
    if ( std::vector<unsigned long>::size((const std::vector<long unsigned int> *const)(v4 + 272)) > 4 )
      std::vector<unsigned long>::resize((std::vector<long unsigned int> *const)(v4 + 272), 4uLL);
    v46 = std::vector<unsigned long>::end((std::vector<long unsigned int> *const)(v4 + 144))._M_current;
    v47 = std::vector<unsigned long>::begin((std::vector<long unsigned int> *const)(v4 + 144))._M_current;
    __for_end_0._M_current = (std::weak_ptr<Avatar> *)std::vector<unsigned long>::end((std::vector<long unsigned int> *const)(v4 + 272))._M_current;
    __gnu_cxx::__normal_iterator<unsigned long const*,std::vector<unsigned long>>::__normal_iterator<unsigned long *>(
      (__gnu_cxx::__normal_iterator<long unsigned int const*,std::vector<long unsigned int> > *const)&__for_end,
      (const __gnu_cxx::__normal_iterator<long unsigned int*,std::vector<long unsigned int> > *)&__for_end_0);
    std::vector<unsigned long>::insert<__gnu_cxx::__normal_iterator<unsigned long *,std::vector<unsigned long>>,void>(
      (std::vector<long unsigned int> *const)(v4 + 272),
      (std::vector<long unsigned int>::const_iterator)__for_end._M_current,
      (__gnu_cxx::__normal_iterator<long unsigned int*,std::vector<long unsigned int> >)v47,
      (__gnu_cxx::__normal_iterator<long unsigned int*,std::vector<long unsigned int> >)v46);
    if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
      __asan_report_load8(&context->player);
    v48 = Player::getAvatarComp(context->player);
    v3 = PlayerAvatarComp::delInformalAvatarOrSnapshotBatch(
           v48,
           AVATAR_SNAPSHOT_TYPE_NONE,
           (const std::vector<long unsigned int> *)(v4 + 272));
    std::vector<unsigned long>::~vector((std::vector<long unsigned int> *const)(v4 + 272));
  }
LABEL_93:
  std::vector<unsigned long>::~vector((std::vector<long unsigned int> *const)(v4 + 144));
  result = v3;
  if ( v68 == (char *)v4 )
  {
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8008) = 0LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8010) = 0LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8018) = 0LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8020) = 0LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8028) = 0LL;
    *(_DWORD *)((v4 >> 3) + 0x7FFF8030) = 0;
    *(_DWORD *)((v4 >> 3) + 0x7FFF8038) = 0;
  }
  else
  {
    *(_QWORD *)v4 = 1172321806LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8020) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8028) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8030) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v4 >> 3) + 0x7FFF8038) = -168430091;
  }
  return result;
};

// Line 550: range 0000000017D71F28-0000000017D71FCA
void __cdecl doTestAddItemBatchWithStackLimitRegister::doTestAddItemBatchWithStackLimitRegister(
        doTestAddItemBatchWithStackLimitRegister *const this)
{
  std::function<int(GmContext&,const std::vector<std::string>&,std::string&)> *v1; // rax
  std::allocator<char> __a; // [rsp+1Fh] [rbp-31h] BYREF
  std::string __k; // [rsp+20h] [rbp-30h] BYREF

  std::allocator<char>::allocator(&__a);
  std::string::basic_string<std::allocator<char>>(&__k, "TEST_ADD_ITEM_BATCH_WITH_STACK_LIMIT", &__a);
  v1 = std::unordered_map<std::string,std::function<int ()(GmContext &,std::vector<std::string> const&,std::string&)>>::operator[](
         &GmUtils::op_func_map[abi:cxx11],
         &__k);
  std::function<int ()(GmContext &,std::vector<std::string> const&,std::string&)>::operator=<int (&)(GmContext &,std::vector<std::string> const&,std::string&)>(
    v1,
    (int (*)(GmContext *, const std::vector<std::string> *, std::string *))doTestAddItemBatchWithStackLimit);
  std::string::~string(&__k);
  std::allocator<char>::~allocator(&__a);
};

// Line 551: range 0000000017BC02E2-0000000017BC1D6E
int32_t __cdecl doTestAddItemBatchWithStackLimit(
        GmContext *context,
        const std::vector<std::string> *param_vec,
        std::string *ret_msg)
{
  int32_t v3; // r13d
  unsigned __int64 v4; // r14
  __int64 v5; // rax
  _DWORD *v6; // r12
  bool v7; // r15
  std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v8; // rax
  uint64_t ChooseAvatarGuid; // rax
  PlayerAvatarComp *AvatarComp; // rax
  int v12; // r15d
  std::__shared_ptr_access<FormalAvatar,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v13; // rax
  std::_Rb_tree_iterator<std::pair<unsigned int const,unsigned int> >::reference v14; // rax
  std::pair<unsigned int const,unsigned int> *v15; // rdx
  std::_Rb_tree_iterator<std::pair<unsigned int const,unsigned int> >::reference v16; // rax
  std::pair<unsigned int const,unsigned int> *v17; // rdx
  ItemExcelConfigMgr *p_item_config_mgr; // rcx
  FormalAvatar *v19; // rax
  uint32_t TotalReliquaryNum; // eax
  uint32_t TotalWeaponNum; // eax
  int32_t result; // eax
  std::initializer_list<long unsigned int> __l; // [rsp+0h] [rbp-410h]
  std::initializer_list<std::pair<unsigned int const,unsigned int> > v24; // [rsp+10h] [rbp-400h]
  std::initializer_list<data::ItemType> v25; // [rsp+20h] [rbp-3F0h]
  std::less<unsigned int> __comp; // [rsp+52h] [rbp-3BEh] BYREF
  std::allocator<long unsigned int> __a; // [rsp+53h] [rbp-3BDh] BYREF
  uint32_t test_avatar_id; // [rsp+54h] [rbp-3BCh]
  uint32_t old_total_weapon_num; // [rsp+58h] [rbp-3B8h]
  uint32_t old_total_reliquary_num; // [rsp+5Ch] [rbp-3B4h]
  data::ItemType item_type; // [rsp+60h] [rbp-3B0h]
  uint32_t added_count; // [rsp+64h] [rbp-3ACh]
  std::map<unsigned int,unsigned int>::iterator __for_begin; // [rsp+68h] [rbp-3A8h] BYREF
  std::map<unsigned int,unsigned int>::iterator __for_end; // [rsp+70h] [rbp-3A0h] BYREF
  Player *player; // [rsp+78h] [rbp-398h]
  PlayerItemComp *item_comp; // [rsp+80h] [rbp-390h]
  PlayerAvatarComp *avatar_comp; // [rsp+88h] [rbp-388h]
  PlayerSceneComp *scene_comp; // [rsp+90h] [rbp-380h]
  PlayerBasicComp *basic_comp; // [rsp+98h] [rbp-378h]
  uint64_t guid; // [rsp+A0h] [rbp-370h]
  std::map<unsigned int,unsigned int> *__for_range; // [rsp+A8h] [rbp-368h]
  std::map<unsigned int,unsigned int> *__for_range_0; // [rsp+B0h] [rbp-360h]
  std::tuple_element<0,std::pair<unsigned int const,unsigned int> >::type *item_id_0; // [rsp+B8h] [rbp-358h]
  std::tuple_element<1,std::pair<unsigned int const,unsigned int> >::type *count_0; // [rsp+C0h] [rbp-350h]
  std::tuple_element<0,std::pair<unsigned int const,unsigned int> >::type *item_id; // [rsp+C8h] [rbp-348h]
  std::tuple_element<1,std::pair<unsigned int const,unsigned int> >::type *count; // [rsp+D0h] [rbp-340h]
  std::pair<unsigned int const,unsigned int> __in; // [rsp+D8h] [rbp-338h] BYREF
  int v49[8]; // [rsp+E0h] [rbp-330h] BYREF
  std::string v50; // [rsp+100h] [rbp-310h] BYREF
  std::string v51; // [rsp+120h] [rbp-2F0h] BYREF
  std::string v52; // [rsp+140h] [rbp-2D0h] BYREF
  std::string v53; // [rsp+160h] [rbp-2B0h] BYREF
  std::string __rhs; // [rsp+180h] [rbp-290h] BYREF
  std::string __lhs; // [rsp+1A0h] [rbp-270h] BYREF
  std::string v56; // [rsp+1C0h] [rbp-250h] BYREF
  std::string v57; // [rsp+1E0h] [rbp-230h] BYREF
  char v58[528]; // [rsp+200h] [rbp-210h] BYREF

  v4 = (unsigned __int64)v58;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v5 = __asan_stack_malloc_3(480LL);
    if ( v5 )
      v4 = v5;
  }
  *(_QWORD *)v4 = 1102416563LL;
  *(_QWORD *)(v4 + 8) = "7 48 16 21 formal_avatar_ptr:573 80 16 18 cur_avatar_ptr:562 112 24 18 item_param_vec:603 176 24"
                        " 17 action_reason:608 240 48 16 add_item_map:583 320 48 15 item_id_set:595 400 48 21 all_item_type_set:596";
  *(_QWORD *)(v4 + 16) = doTestAddItemBatchWithStackLimit;
  v6 = (_DWORD *)(v4 >> 3);
  v6[536862720] = -235802127;
  v6[536862721] = 61937;
  v6[536862722] = 62194;
  v6[536862723] = 62194;
  v6[536862724] = -218959360;
  v6[536862725] = 62194;
  v6[536862726] = -218959360;
  v6[536862727] = 62194;
  v6[536862729] = -218959118;
  v6[536862731] = -219021312;
  v6[536862732] = 62194;
  v6[536862734] = -202116109;
  if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
    __asan_report_load8(&context->player);
  player = context->player;
  item_comp = Player::getItemComp(player);
  avatar_comp = Player::getAvatarComp(player);
  scene_comp = Player::getSceneComp(player);
  basic_comp = Player::getBasicComp(player);
  test_avatar_id = 10000002;
  PlayerAvatarComp::findFormalAvatarByAvatarId((const PlayerAvatarComp *const)(v4 + 80), (uint32_t)avatar_comp);
  v7 = std::operator!=<FormalAvatar>(0LL, (const std::shared_ptr<FormalAvatar> *)(v4 + 80));
  std::shared_ptr<FormalAvatar>::~shared_ptr((std::shared_ptr<FormalAvatar> *const)(v4 + 80));
  if ( !v7 )
    goto LABEL_19;
  PlayerAvatarComp::getCurAvatar((const PlayerAvatarComp *const)(v4 + 80));
  if ( std::operator!=<Avatar>(0LL, (const std::shared_ptr<Avatar> *)(v4 + 80)) )
  {
    v8 = std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 80));
    if ( Avatar::getAvatarId(v8) == 10000002 )
    {
      ChooseAvatarGuid = PlayerAvatarComp::getChooseAvatarGuid(avatar_comp);
      PlayerAvatarComp::changeCurAvatar(avatar_comp, ChooseAvatarGuid, 1);
    }
  }
  if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
    __asan_report_load8(&context->player);
  AvatarComp = Player::getAvatarComp(context->player);
  if ( (unsigned int)PlayerAvatarComp::delAvatar(AvatarComp, 0x989682u, 1) )
  {
    std::string::operator=(ret_msg, "delAvatar fail");
    v3 = -1;
    v12 = 0;
  }
  else
  {
    v12 = 1;
  }
  std::shared_ptr<Avatar>::~shared_ptr((std::shared_ptr<Avatar> *const)(v4 + 80));
  if ( v12 == 1 )
  {
LABEL_19:
    PlayerAvatarComp::addFormalAvatar((PlayerAvatarComp *const)(v4 + 48), avatar_comp, 10000002, 1u, 0, 0);
    if ( std::operator==<FormalAvatar>(0LL, (const std::shared_ptr<FormalAvatar> *)(v4 + 48)) )
    {
      std::string::operator=(ret_msg, "addFormalAvatar fail");
      v3 = -1;
    }
    else
    {
      v13 = std::__shared_ptr_access<FormalAvatar,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<FormalAvatar,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 48));
      guid = Avatar::getGuid(v13);
      PlayerSceneComp::getCurScene((const PlayerSceneComp *const)(v4 + 80));
      __in = (std::pair<unsigned int const,unsigned int>)guid;
      __l._M_array = (std::initializer_list<long unsigned int>::iterator)&__in;
      __l._M_len = 1LL;
      std::allocator<unsigned long>::allocator(&__a);
      std::vector<unsigned long>::vector((std::vector<long unsigned int> *const)(v4 + 176), __l, &__a);
      PlayerAvatarComp::setSceneTeamAndAddToScene(
        avatar_comp,
        (const std::vector<long unsigned int> *)(v4 + 176),
        guid,
        (ScenePtr *)(v4 + 80),
        CHANGE_SCENE_TEAM_REASON_GM);
      std::vector<unsigned long>::~vector((std::vector<long unsigned int> *const)(v4 + 176));
      std::allocator<unsigned long>::~allocator(&__a);
      std::shared_ptr<Scene>::~shared_ptr((std::shared_ptr<Scene> *const)(v4 + 80));
      *(_QWORD *)(v4 + 400) = 0LL;
      *(_QWORD *)(v4 + 408) = 0LL;
      *(_QWORD *)(v4 + 416) = 0LL;
      *(_QWORD *)(v4 + 424) = 0LL;
      *(_QWORD *)(v4 + 432) = 0LL;
      *(_QWORD *)(v4 + 440) = 0LL;
      *(_DWORD *)(v4 + 400) = 101;
      *(_DWORD *)(v4 + 404) = 123;
      *(_DWORD *)(v4 + 408) = 102;
      *(_DWORD *)(v4 + 412) = 321;
      *(_DWORD *)(v4 + 416) = 100001;
      *(_DWORD *)(v4 + 420) = 456;
      *(_DWORD *)(v4 + 424) = 11201;
      *(_DWORD *)(v4 + 428) = 234;
      *(_DWORD *)(v4 + 432) = 51110;
      *(_DWORD *)(v4 + 436) = 432;
      *(_DWORD *)(v4 + 440) = 360101;
      *(_DWORD *)(v4 + 444) = 4321;
      v24._M_array = (std::initializer_list<std::pair<unsigned int const,unsigned int> >::iterator)(v4 + 400);
      v24._M_len = 6LL;
      std::allocator<std::pair<unsigned int const,unsigned int>>::allocator((std::allocator<std::pair<unsigned int const,unsigned int> > *const)&__a);
      std::map<unsigned int,unsigned int>::map(
        (std::map<unsigned int,unsigned int> *const)(v4 + 240),
        v24,
        &__comp,
        (const std::map<unsigned int,unsigned int>::allocator_type *)&__a);
      std::allocator<std::pair<unsigned int const,unsigned int>>::~allocator((std::allocator<std::pair<unsigned int const,unsigned int> > *const)&__a);
      PlayerBasicComp::setLevelByGm(basic_comp, 1u, 1);
      std::set<unsigned int>::set((std::set<unsigned int> *const)(v4 + 320));
      v49[0] = 1;
      v49[1] = 2;
      v49[2] = 3;
      v49[3] = 4;
      v49[4] = 6;
      v25._M_array = (std::initializer_list<data::ItemType>::iterator)v49;
      v25._M_len = 5LL;
      std::allocator<data::ItemType>::allocator((std::allocator<data::ItemType> *const)&__a);
      std::set<data::ItemType>::set(
        (std::set<data::ItemType> *const)(v4 + 400),
        v25,
        (const std::less<data::ItemType> *)&__comp,
        (const std::set<data::ItemType>::allocator_type *)&__a);
      std::allocator<data::ItemType>::~allocator((std::allocator<data::ItemType> *const)&__a);
      PlayerItemComp::clearItemsByGm(
        item_comp,
        (std::set<unsigned int> *)(v4 + 320),
        (std::set<data::ItemType> *)(v4 + 400));
      old_total_weapon_num = PlayerItemComp::getTotalWeaponNum(item_comp);
      old_total_reliquary_num = PlayerItemComp::getTotalReliquaryNum(item_comp);
      std::vector<ItemParam>::vector((std::vector<ItemParam> *const)(v4 + 112));
      __for_range = (std::map<unsigned int,unsigned int> *)(v4 + 240);
      __for_begin._M_node = std::map<unsigned int,unsigned int>::begin((std::map<unsigned int,unsigned int> *const)(v4 + 240))._M_node;
      __for_end._M_node = std::map<unsigned int,unsigned int>::end(__for_range)._M_node;
      while ( std::operator!=(&__for_begin, &__for_end) )
      {
        v14 = std::_Rb_tree_iterator<std::pair<unsigned int const,unsigned int>>::operator*(&__for_begin);
        v15 = v14;
        if ( ((unsigned __int8)v14 & 7) >= *(_BYTE *)(((unsigned __int64)v14 >> 3) + 0x7FFF8000)
          && *(_BYTE *)(((unsigned __int64)v14 >> 3) + 0x7FFF8000) != 0
          || *(_BYTE *)((((unsigned __int64)&v14->second + 3) >> 3) + 0x7FFF8000) != 0
          && (((unsigned __int8)v14 + 7) & 7) >= *(_BYTE *)((((unsigned __int64)&v14->second + 3) >> 3) + 0x7FFF8000) )
        {
          __asan_report_load_n(v14, 8LL);
        }
        __in = *v15;
        item_id = std::get<0ul,unsigned int const,unsigned int>(&__in);
        count = std::get<1ul,unsigned int const,unsigned int>(&__in);
        if ( *(_BYTE *)(((unsigned __int64)item_id >> 3) + 0x7FFF8000) != 0
          && (char)(((unsigned __int8)item_id & 7) + 3) >= *(_BYTE *)(((unsigned __int64)item_id >> 3) + 0x7FFF8000) )
        {
          __asan_report_load4(item_id);
        }
        *(_DWORD *)(v4 + 80) = *item_id;
        if ( *(_BYTE *)(((unsigned __int64)count >> 3) + 0x7FFF8000) != 0
          && (char)(((unsigned __int8)count & 7) + 3) >= *(_BYTE *)(((unsigned __int64)count >> 3) + 0x7FFF8000) )
        {
          __asan_report_load4(count);
        }
        *(_DWORD *)(v4 + 84) = *count;
        *(_DWORD *)(v4 + 88) = 0;
        *(_DWORD *)(v4 + 92) = 0;
        std::vector<ItemParam>::push_back(
          (std::vector<ItemParam> *const)(v4 + 112),
          (std::vector<ItemParam>::value_type *)(v4 + 80));
        std::_Rb_tree_iterator<std::pair<unsigned int const,unsigned int>>::operator++(&__for_begin);
      }
      ActionReason::ActionReason((ActionReason *const)(v4 + 176), ACTION_REASON_GM, ITEM_LIMIT_GM);
      PlayerItemComp::addItemBatchWithStackLimit(
        item_comp,
        (std::vector<ItemParam> *)(v4 + 112),
        (const ActionReason *)(v4 + 176),
        0LL);
      __for_range_0 = (std::map<unsigned int,unsigned int> *)(v4 + 240);
      __for_begin._M_node = std::map<unsigned int,unsigned int>::begin((std::map<unsigned int,unsigned int> *const)(v4 + 240))._M_node;
      __for_end._M_node = std::map<unsigned int,unsigned int>::end(__for_range_0)._M_node;
      while ( 2 )
      {
        if ( std::operator!=(&__for_begin, &__for_end) )
        {
          v16 = std::_Rb_tree_iterator<std::pair<unsigned int const,unsigned int>>::operator*(&__for_begin);
          v17 = v16;
          if ( ((unsigned __int8)v16 & 7) >= *(_BYTE *)(((unsigned __int64)v16 >> 3) + 0x7FFF8000)
            && *(_BYTE *)(((unsigned __int64)v16 >> 3) + 0x7FFF8000) != 0
            || *(_BYTE *)((((unsigned __int64)&v16->second + 3) >> 3) + 0x7FFF8000) != 0
            && (((unsigned __int8)v16 + 7) & 7) >= *(_BYTE *)((((unsigned __int64)&v16->second + 3) >> 3) + 0x7FFF8000) )
          {
            __asan_report_load_n(v16, 8LL);
          }
          __in = *v17;
          item_id_0 = std::get<0ul,unsigned int const,unsigned int>(&__in);
          count_0 = std::get<1ul,unsigned int const,unsigned int>(&__in);
          ServiceBox::findService<GameserverService>();
          GameserverService::getConfig((GameserverService *const)(v4 + 80));
          p_item_config_mgr = &std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 80))->design_config.txt_config_mgr.item_config_mgr;
          if ( *(_BYTE *)(((unsigned __int64)item_id_0 >> 3) + 0x7FFF8000) != 0
            && (char)(((unsigned __int8)item_id_0 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)item_id_0 >> 3) + 0x7FFF8000) )
          {
            __asan_report_load4(item_id_0);
          }
          item_type = ItemExcelConfigMgr::getItemType(p_item_config_mgr, *item_id_0);
          std::shared_ptr<Config>::~shared_ptr((std::shared_ptr<Config> *const)(v4 + 80));
          added_count = 0;
          switch ( item_type )
          {
            case ITEM_VIRTUAL:
              if ( *(_BYTE *)(((unsigned __int64)item_id_0 >> 3) + 0x7FFF8000) != 0
                && (char)(((unsigned __int8)item_id_0 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)item_id_0 >> 3)
                                                                            + 0x7FFF8000) )
              {
                __asan_report_load4(item_id_0);
              }
              if ( *item_id_0 == 101 )
              {
                v19 = std::__shared_ptr_access<FormalAvatar,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<FormalAvatar,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 48));
                added_count = FormalAvatar::getTotalExp(v19);
                if ( *(_BYTE *)(((unsigned __int64)count_0 >> 3) + 0x7FFF8000) != 0
                  && (char)(((unsigned __int8)count_0 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)count_0 >> 3)
                                                                            + 0x7FFF8000) )
                {
                  __asan_report_load4(count_0);
                }
                if ( added_count == *count_0 )
                  goto LABEL_76;
                std::to_string(&v57, added_count);
                std::to_string(&__rhs, *count_0);
                std::operator+<char>(&__lhs, "avatar exp check fail! expect:", &__rhs);
                std::operator+<char>(&v56, &__lhs, " get:");
                std::operator+<char>(&v51, &v56, &v57);
                std::string::operator=(ret_msg, &v51);
                std::string::~string(&v51);
                std::string::~string(&v56);
                std::string::~string(&__lhs);
                std::string::~string(&__rhs);
                std::string::~string(&v57);
                v3 = -1;
              }
              else if ( *item_id_0 == 102 )
              {
                added_count = PlayerBasicComp::getTotalExp(basic_comp);
                if ( *(_BYTE *)(((unsigned __int64)count_0 >> 3) + 0x7FFF8000) != 0
                  && (char)(((unsigned __int8)count_0 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)count_0 >> 3)
                                                                            + 0x7FFF8000) )
                {
                  __asan_report_load4(count_0);
                }
                if ( added_count == *count_0 )
                  goto LABEL_76;
                std::to_string(&v57, added_count);
                std::to_string(&__rhs, *count_0);
                std::operator+<char>(&__lhs, "player exp check fail! expect:", &__rhs);
                std::operator+<char>(&v56, &__lhs, " get:");
                std::operator+<char>(&v52, &v56, &v57);
                std::string::operator=(ret_msg, &v52);
                std::string::~string(&v52);
                std::string::~string(&v56);
                std::string::~string(&__lhs);
                std::string::~string(&__rhs);
                std::string::~string(&v57);
                v3 = -1;
              }
              else
              {
                if ( *(_BYTE *)(((unsigned __int64)item_id_0 >> 3) + 0x7FFF8000) != 0
                  && (char)(((unsigned __int8)item_id_0 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)item_id_0 >> 3)
                                                                              + 0x7FFF8000) )
                {
                  __asan_report_load4(item_id_0);
                }
                std::to_string(&v57, *item_id_0);
                std::operator+<char>(&v53, "invalid item_id:", &v57);
                std::string::operator=(ret_msg, &v53);
                std::string::~string(&v53);
                std::string::~string(&v57);
                v3 = -1;
              }
              break;
            case ITEM_MATERIAL:
            case ITEM_FURNITURE:
              if ( *(_BYTE *)(((unsigned __int64)item_id_0 >> 3) + 0x7FFF8000) != 0
                && (char)(((unsigned __int8)item_id_0 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)item_id_0 >> 3)
                                                                            + 0x7FFF8000) )
              {
                __asan_report_load4(item_id_0);
              }
              added_count = PlayerItemComp::getItemCount(item_comp, *item_id_0);
              if ( *(_BYTE *)(((unsigned __int64)count_0 >> 3) + 0x7FFF8000) != 0
                && (char)(((unsigned __int8)count_0 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)count_0 >> 3) + 0x7FFF8000) )
              {
                __asan_report_load4(count_0);
              }
              if ( added_count == *count_0 )
                goto LABEL_76;
              std::to_string(&v57, added_count);
              std::to_string(&v53, *count_0);
              if ( *(_BYTE *)(((unsigned __int64)item_id_0 >> 3) + 0x7FFF8000) != 0
                && (char)(((unsigned __int8)item_id_0 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)item_id_0 >> 3)
                                                                            + 0x7FFF8000) )
              {
                __asan_report_load4(item_id_0);
              }
              std::to_string(&v50, *item_id_0);
              std::operator+<char>(&v51, "item count check fail! item_id:", &v50);
              std::operator+<char>(&v52, &v51, " expect:");
              std::operator+<char>(&__lhs, &v52, &v53);
              std::operator+<char>(&v56, &__lhs, " get:");
              std::operator+<char>(&__rhs, &v56, &v57);
              std::string::operator=(ret_msg, &__rhs);
              std::string::~string(&__rhs);
              std::string::~string(&v56);
              std::string::~string(&__lhs);
              std::string::~string(&v52);
              std::string::~string(&v51);
              std::string::~string(&v50);
              std::string::~string(&v53);
              std::string::~string(&v57);
              v3 = -1;
              break;
            case ITEM_RELIQUARY:
              TotalReliquaryNum = PlayerItemComp::getTotalReliquaryNum(item_comp);
              added_count = TotalReliquaryNum - old_total_reliquary_num;
              if ( *(_BYTE *)(((unsigned __int64)count_0 >> 3) + 0x7FFF8000) != 0
                && (char)(((unsigned __int8)count_0 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)count_0 >> 3) + 0x7FFF8000) )
              {
                __asan_report_load4(count_0);
              }
              if ( added_count == *count_0 )
                goto LABEL_76;
              std::to_string(&v57, added_count);
              std::to_string(&v53, *count_0);
              if ( *(_BYTE *)(((unsigned __int64)item_id_0 >> 3) + 0x7FFF8000) != 0
                && (char)(((unsigned __int8)item_id_0 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)item_id_0 >> 3)
                                                                            + 0x7FFF8000) )
              {
                __asan_report_load4(item_id_0);
              }
              std::to_string(&v50, *item_id_0);
              std::operator+<char>(&v51, "reliquary count check fail! item_id:", &v50);
              std::operator+<char>(&v52, &v51, " expect:");
              std::operator+<char>(&__rhs, &v52, &v53);
              std::operator+<char>(&v56, &__rhs, " get:");
              std::operator+<char>(&__lhs, &v56, &v57);
              std::string::operator=(ret_msg, &__lhs);
              std::string::~string(&__lhs);
              std::string::~string(&v56);
              std::string::~string(&__rhs);
              std::string::~string(&v52);
              std::string::~string(&v51);
              std::string::~string(&v50);
              std::string::~string(&v53);
              std::string::~string(&v57);
              v3 = -1;
              break;
            case ITEM_WEAPON:
              TotalWeaponNum = PlayerItemComp::getTotalWeaponNum(item_comp);
              added_count = TotalWeaponNum - old_total_weapon_num;
              if ( *(_BYTE *)(((unsigned __int64)count_0 >> 3) + 0x7FFF8000) != 0
                && (char)(((unsigned __int8)count_0 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)count_0 >> 3) + 0x7FFF8000) )
              {
                __asan_report_load4(count_0);
              }
              if ( added_count == *count_0 )
              {
LABEL_76:
                std::_Rb_tree_iterator<std::pair<unsigned int const,unsigned int>>::operator++(&__for_begin);
                continue;
              }
              std::to_string(&v57, added_count);
              std::to_string(&v53, *count_0);
              if ( *(_BYTE *)(((unsigned __int64)item_id_0 >> 3) + 0x7FFF8000) != 0
                && (char)(((unsigned __int8)item_id_0 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)item_id_0 >> 3)
                                                                            + 0x7FFF8000) )
              {
                __asan_report_load4(item_id_0);
              }
              std::to_string(&v50, *item_id_0);
              std::operator+<char>(&v51, "weapon count check fail! item_id:", &v50);
              std::operator+<char>(&v52, &v51, " expect:");
              std::operator+<char>(&__rhs, &v52, &v53);
              std::operator+<char>(&__lhs, &__rhs, " get:");
              std::operator+<char>(&v56, &__lhs, &v57);
              std::string::operator=(ret_msg, &v56);
              std::string::~string(&v56);
              std::string::~string(&__lhs);
              std::string::~string(&__rhs);
              std::string::~string(&v52);
              std::string::~string(&v51);
              std::string::~string(&v50);
              std::string::~string(&v53);
              std::string::~string(&v57);
              v3 = -1;
              break;
            default:
              std::to_string(&v56, item_type);
              std::operator+<char>(&v57, "invalid item type:", &v56);
              std::string::operator=(ret_msg, &v57);
              std::string::~string(&v57);
              std::string::~string(&v56);
              v3 = -1;
              break;
          }
        }
        else
        {
          std::string::operator=(ret_msg, "check ok.");
          v3 = 0;
        }
        break;
      }
      std::vector<ItemParam>::~vector((std::vector<ItemParam> *const)(v4 + 112));
      std::set<data::ItemType>::~set((std::set<data::ItemType> *const)(v4 + 400));
      std::set<unsigned int>::~set((std::set<unsigned int> *const)(v4 + 320));
      std::map<unsigned int,unsigned int>::~map((std::map<unsigned int,unsigned int> *const)(v4 + 240));
    }
    std::shared_ptr<FormalAvatar>::~shared_ptr((std::shared_ptr<FormalAvatar> *const)(v4 + 48));
  }
  result = v3;
  if ( v58 == (char *)v4 )
  {
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8008) = 0LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8010) = 0LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8018) = 0LL;
    *(_DWORD *)((v4 >> 3) + 0x7FFF8024) = 0;
    *(_QWORD *)((v4 >> 3) + 0x7FFF802C) = 0LL;
    *(_DWORD *)((v4 >> 3) + 0x7FFF8038) = 0;
  }
  else
  {
    *(_QWORD *)v4 = 1172321806LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8020) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8028) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8030) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v4 >> 3) + 0x7FFF8038) = -168430091;
  }
  return result;
};

// Line 677: range 0000000017D71FE8-0000000017D7208A
void __cdecl doTestRandExtraRegister::doTestRandExtraRegister(doTestRandExtraRegister *const this)
{
  std::function<int(GmContext&,const std::vector<std::string>&,std::string&)> *v1; // rax
  std::allocator<char> __a; // [rsp+1Fh] [rbp-31h] BYREF
  std::string __k; // [rsp+20h] [rbp-30h] BYREF

  std::allocator<char>::allocator(&__a);
  std::string::basic_string<std::allocator<char>>(&__k, "TEST_RAND_EXTRA", &__a);
  v1 = std::unordered_map<std::string,std::function<int ()(GmContext &,std::vector<std::string> const&,std::string&)>>::operator[](
         &GmUtils::op_func_map[abi:cxx11],
         &__k);
  std::function<int ()(GmContext &,std::vector<std::string> const&,std::string&)>::operator=<int (&)(GmContext &,std::vector<std::string> const&,std::string&)>(
    v1,
    (int (*)(GmContext *, const std::vector<std::string> *, std::string *))doTestRandExtra);
  std::string::~string(&__k);
  std::allocator<char>::~allocator(&__a);
};

// Line 678: range 0000000017BC1D6F-0000000017BC20B8
int32_t __cdecl doTestRandExtra(GmContext *context, const std::vector<std::string> *param_vec, std::string *ret_msg)
{
  unsigned __int64 v3; // r13
  __int64 v4; // rax
  _DWORD *v5; // r12
  unsigned int *v6; // r9
  int32_t v7; // r14d
  char v8; // r8
  float v9; // edi
  uint32_t v10; // edx
  common::milog::MiLogStream *v11; // rax
  int32_t result; // eax
  float *v13; // [rsp+0h] [rbp-150h]
  std::string *ret_msgb; // [rsp+8h] [rbp-148h]
  common::milog::MiLogStream v17; // [rsp+20h] [rbp-130h] BYREF
  char v18[272]; // [rsp+40h] [rbp-110h] BYREF

  v3 = (unsigned __int64)v18;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_2(224LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "5 32 1 16 is_rand_frac:682 48 4 15 batch_count:680 64 4 16 return_ratio:681 80 24 19 return_item"
                        "_vec:688 144 48 17 cost_item_map:679";
  *(_QWORD *)(v3 + 16) = doTestRandExtra;
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = -234556927;
  v5[536862722] = 61956;
  v5[536862723] = -218959360;
  v5[536862724] = 62194;
  v5[536862726] = -202116109;
  std::map<unsigned int,unsigned int>::map((std::map<unsigned int,unsigned int> *const)(v3 + 144));
  *(_DWORD *)(v3 + 48) = 0;
  *(_DWORD *)(v3 + 64) = 0;
  *(_BYTE *)(v3 + 32) = 0;
  if ( common::tools::ConvertUtils::convertTo<0u,std::map<unsigned int,unsigned int>,unsigned int &,float &,bool &>(
         param_vec,
         (std::map<unsigned int,unsigned int> *)(v3 + 144),
         (unsigned int *)(v3 + 48),
         (float *)(v3 + 64),
         (bool *)(v3 + 32),
         v6,
         v13,
         (bool *)ret_msg) )
  {
    std::string::operator=(ret_msgb, "parse fail");
    v7 = -1;
  }
  else
  {
    std::vector<ItemParam>::vector((std::vector<ItemParam> *const)(v3 + 80));
    v8 = *(_BYTE *)(v3 + 32);
    v9 = *(float *)(v3 + 64);
    v10 = *(_DWORD *)(v3 + 48);
    if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
    {
      LODWORD(v9) = (_DWORD)context + 32;
      __asan_report_load8(&context->player);
    }
    if ( DropUtils::randomExtraItemsForLifeEffectTalent(
           context->player,
           (const std::map<unsigned int,unsigned int> *)(v3 + 144),
           v10,
           v9,
           (std::vector<ItemParam> *)(v3 + 80),
           v8) )
    {
      std::string::operator=(ret_msgb, "randomExtraItemsForLifeEffectTalent fail");
      v7 = -1;
    }
    else
    {
      common::milog::MiLogStream::create(
        &v17,
        &common::milog::MiLogDefault::default_log_obj_,
        1u,
        "./src/player/gm/player_gm_comp.cpp",
        "doTestRandExtra",
        694);
      v11 = common::milog::MiLogStream::operator<<<char [17],(char *[17])0>(
              &v17,
              (const char (*)[17])"return_item_vec:");
      common::milog::MiLogStream::operator<<<ItemParam>(v11, (const std::vector<ItemParam> *)(v3 + 80));
      common::milog::MiLogStream::~MiLogStream(&v17);
      v7 = 0;
    }
    std::vector<ItemParam>::~vector((std::vector<ItemParam> *const)(v3 + 80));
  }
  std::map<unsigned int,unsigned int>::~map((std::map<unsigned int,unsigned int> *const)(v3 + 144));
  result = v7;
  if ( v18 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8010) = 0;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8018) = 0;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8018) = -168430091;
  }
  return result;
};

// Line 698: range 0000000017D7208C-0000000017D7212E
void __cdecl doAddMailRegister::doAddMailRegister(doAddMailRegister *const this)
{
  std::function<int(GmContext&,const std::vector<std::string>&,std::string&)> *v1; // rax
  std::allocator<char> __a; // [rsp+1Fh] [rbp-31h] BYREF
  std::string __k; // [rsp+20h] [rbp-30h] BYREF

  std::allocator<char>::allocator(&__a);
  std::string::basic_string<std::allocator<char>>(&__k, "ADD_MAIL", &__a);
  v1 = std::unordered_map<std::string,std::function<int ()(GmContext &,std::vector<std::string> const&,std::string&)>>::operator[](
         &GmUtils::op_func_map[abi:cxx11],
         &__k);
  std::function<int ()(GmContext &,std::vector<std::string> const&,std::string&)>::operator=<int (&)(GmContext &,std::vector<std::string> const&,std::string&)>(
    v1,
    (int (*)(GmContext *, const std::vector<std::string> *, std::string *))doAddMail);
  std::string::~string(&__k);
  std::allocator<char>::~allocator(&__a);
};

// Line 699: range 0000000017BC20B9-0000000017BC27FD
int32_t __cdecl doAddMail(GmContext *context, const std::vector<std::string> *param_vec, std::string *ret_msg)
{
  unsigned __int64 v3; // r13
  __int64 v4; // rax
  _DWORD *v5; // r12
  const std::string *v6; // rax
  std::vector<std::string>::const_reference v8; // r14
  __int64 v9; // rax
  char v10; // r14
  __int64 v11; // rax
  int32_t v12; // r14d
  PlayerMailComp *MailComp; // r14
  int v15; // [rsp+0h] [rbp-540h]
  int ret_msga; // [rsp+8h] [rbp-538h]
  std::string *ret_msgb; // [rsp+8h] [rbp-538h]
  GmContext *contexta; // [rsp+18h] [rbp-528h]
  size_t idx; // [rsp+20h] [rbp-520h]
  std::string *param_str; // [rsp+28h] [rbp-518h]
  std::string __rhs; // [rsp+30h] [rbp-510h] BYREF
  std::string p_transaction; // [rsp+50h] [rbp-4F0h] BYREF
  char v23[1232]; // [rsp+70h] [rbp-4D0h] BYREF

  ret_msga = (int)ret_msg;
  v3 = (unsigned __int64)v23;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_5(1184LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "6 48 1 11 options:714 64 32 15 transaction:701 128 40 10 status:716 208 136 12 mail_bin:713 416 "
                        "232 13 mail_data:722 720 392 6 ss:707";
  *(_QWORD *)(v3 + 16) = doAddMail;
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = -234753551;
  v5[536862723] = -218959118;
  v5[536862725] = -218959360;
  v5[536862726] = 62194;
  v5[536862730] = -234881024;
  v5[536862731] = -218959118;
  v5[536862732] = -218959118;
  v5[536862740] = -218959360;
  v5[536862741] = -218959118;
  v5[536862742] = 62194;
  v5[536862754] = -218103808;
  v5[536862755] = -202116109;
  v5[536862756] = -202116109;
  idx = 0LL;
  std::string::basic_string(v3 + 64);
  if ( std::vector<std::string>::size(&context->raw_param_vec) )
  {
    v6 = std::vector<std::string>::operator[](&context->raw_param_vec, 0LL);
    if ( common::tools::StringUtils::isStartsWith(v6, "transaction=") )
    {
      v8 = std::vector<std::string>::operator[](&context->raw_param_vec, 0LL);
      std::literals::string_literals::operator"" s[abi:cxx11](&p_transaction, "transaction=", 0xCuLL);
      v9 = std::string::size(&p_transaction);
      std::string::substr(&__rhs, v8, v9, -1LL);
      std::string::operator=(v3 + 64, &__rhs);
      std::string::~string(&__rhs);
      std::string::~string(&p_transaction);
      idx = 1LL;
    }
  }
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream(v3 + 720);
  while ( idx < std::vector<std::string>::size(&context->raw_param_vec) )
  {
    param_str = (std::string *)std::vector<std::string>::operator[](&context->raw_param_vec, idx);
    v10 = 0;
    if ( std::operator==<char>(param_str, "\\n") )
    {
      std::allocator<char>::allocator(v3 + 48);
      v10 = 1;
      std::string::basic_string<std::allocator<char>>(&p_transaction, "\n", (const std::allocator<char> *)(v3 + 48));
    }
    else
    {
      std::string::basic_string(&p_transaction, param_str);
    }
    v11 = std::operator<<<char>(v3 + 736, &p_transaction);
    std::operator<<<std::char_traits<char>>(v11, " ");
    std::string::~string(&p_transaction);
    if ( v10 )
      std::allocator<char>::~allocator(v3 + 48);
    ++idx;
  }
  proto::MailBin::MailBin((proto::MailBin *const)(v3 + 208));
  google::protobuf::util::JsonParseOptions::JsonParseOptions((google::protobuf::util::JsonParseOptions *const)(v3 + 48));
  *(_BYTE *)(v3 + 48) = 1;
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::str(&p_transaction, v3 + 720);
  google::protobuf::util::JsonStringToMessage(
    (google::protobuf::util::Status *)(v3 + 128),
    v15,
    ret_msga,
    (int)param_vec,
    (int)context,
    idx,
    param_str,
    (int)__rhs._M_dataplus._M_p,
    __rhs._M_string_length);
  std::string::~string(&p_transaction);
  if ( !google::protobuf::util::Status::ok((const google::protobuf::util::Status *const)(v3 + 128)) )
  {
    google::protobuf::util::Status::ToString[abi:cxx11](&__rhs, v3 + 128);
    std::operator+<char>(&p_transaction, "parse json fail, ", &__rhs);
    std::string::operator=(ret_msgb, &p_transaction);
    std::string::~string(&p_transaction);
    std::string::~string(&__rhs);
    v12 = -1;
  }
  else
  {
    MailData::MailData((MailData *const)(v3 + 416));
    if ( MailData::fromMailBin((MailData *const)(v3 + 416), (const proto::MailBin *)(v3 + 208)) )
    {
      std::string::operator=(ret_msgb, "fromMailBin fail");
      v12 = -1;
    }
    else
    {
      if ( *(_BYTE *)(((unsigned __int64)&contexta->player >> 3) + 0x7FFF8000) )
        __asan_report_load8(&contexta->player);
      MailComp = Player::getMailComp(contexta->player);
      std::string::basic_string(&p_transaction, v3 + 64);
      LOBYTE(MailComp) = PlayerMailComp::addNewMail(MailComp, (const MailData *)(v3 + 416), &p_transaction) != 0;
      std::string::~string(&p_transaction);
      if ( (_BYTE)MailComp )
      {
        std::string::operator=(ret_msgb, "addNewMail fail");
        v12 = -1;
      }
      else
      {
        v12 = 0;
      }
    }
    MailData::~MailData((MailData *const)(v3 + 416));
  }
  google::protobuf::util::Status::~Status((google::protobuf::util::Status *const)(v3 + 128));
  proto::MailBin::~MailBin((proto::MailBin *const)(v3 + 208));
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream(v3 + 720);
  std::string::~string((void *)(v3 + 64));
  if ( v23 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF800C) = 0;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8014) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8028) = 0LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8030) = 0;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8050) = 0LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8058) = 0;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8088) = 0LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8090) = 0;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    __asan_stack_free_5(v3, 1184LL, v23);
  }
  return v12;
};

// Line 736: range 0000000017D72130-0000000017D721D2
void __cdecl doGenMapMarkRegister::doGenMapMarkRegister(doGenMapMarkRegister *const this)
{
  std::function<int(GmContext&,const std::vector<std::string>&,std::string&)> *v1; // rax
  std::allocator<char> __a; // [rsp+1Fh] [rbp-31h] BYREF
  std::string __k; // [rsp+20h] [rbp-30h] BYREF

  std::allocator<char>::allocator(&__a);
  std::string::basic_string<std::allocator<char>>(&__k, "GEN_MAP_MARK", &__a);
  v1 = std::unordered_map<std::string,std::function<int ()(GmContext &,std::vector<std::string> const&,std::string&)>>::operator[](
         &GmUtils::op_func_map[abi:cxx11],
         &__k);
  std::function<int ()(GmContext &,std::vector<std::string> const&,std::string&)>::operator=<int (&)(GmContext &,std::vector<std::string> const&,std::string&)>(
    v1,
    (int (*)(GmContext *, const std::vector<std::string> *, std::string *))doGenMapMark);
  std::string::~string(&__k);
  std::allocator<char>::~allocator(&__a);
};

// Line 737: range 0000000017BC27FE-0000000017BC2FE3
int32_t __cdecl doGenMapMark(GmContext *context, const std::vector<std::string> *param_vec, std::string *ret_msg)
{
  unsigned __int64 v3; // r13
  __int64 v4; // rax
  _DWORD *v5; // r12
  int32_t v6; // r14d
  PlayerSceneComp *SceneComp; // rax
  std::unordered_set<proto::MapMarkPoint>::iterator v8; // rax
  std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v9; // rax
  uint32_t MapMarkMaxLength; // eax
  proto::Vector *v11; // r14
  int v12; // eax
  proto::Vector *v13; // r14
  int v14; // eax
  proto::Vector *v15; // r14
  int v16; // eax
  proto::MapMarkPointType v17; // eax
  proto::MapMarkFromType v18; // eax
  proto::MapMarkPointType v19; // eax
  google::protobuf::uint32 v20; // eax
  google::protobuf::uint32 v21; // eax
  PlayerSceneComp *v22; // r14
  google::protobuf::RepeatedPtrField<proto::MapMarkPoint> *v23; // rax
  common::milog::MiLogStream *v24; // rax
  common::milog::MiLogStream *v25; // rax
  common::milog::MiLogStream *v26; // r14
  common::milog::MiLogStream *v27; // rax
  common::milog::MiLogStream *v28; // r14
  int32_t result; // eax
  unsigned __int64 val; // [rsp+28h] [rbp-1F8h] BYREF
  unsigned __int64 v32; // [rsp+30h] [rbp-1F0h] BYREF
  std::unordered_set<proto::MapMarkPoint> *mark_point_set_ptr; // [rsp+38h] [rbp-1E8h]
  std::shared_ptr<Config> v34; // [rsp+40h] [rbp-1E0h] BYREF
  std::string value; // [rsp+50h] [rbp-1D0h] BYREF
  char v36[432]; // [rsp+70h] [rbp-1B0h] BYREF

  v3 = (unsigned __int64)v36;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_3(384LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "5 48 4 12 scene_id:743 64 4 7 num:744 80 48 7 rsp:809 160 56 9 proto:787 256 96 14 player_bin:812";
  *(_QWORD *)(v3 + 16) = doGenMapMark;
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = -234556943;
  v5[536862722] = 61956;
  v5[536862724] = -218959118;
  v5[536862726] = -234881024;
  v5[536862727] = -218959118;
  v5[536862731] = -202116109;
  *(_DWORD *)(v3 + 48) = 3;
  *(_DWORD *)(v3 + 64) = 0;
  if ( std::vector<std::string>::empty(param_vec) )
  {
    std::string::operator=(ret_msg, "param count error");
    v6 = -1;
    goto LABEL_30;
  }
  if ( std::vector<std::string>::size(param_vec) <= 1 )
  {
    if ( common::tools::StringUtils::strVecToNum<0u,unsigned int>(param_vec, (unsigned int *)(v3 + 64)) )
    {
      std::string::operator=(ret_msg, "parse num fail");
      v6 = -1;
      goto LABEL_30;
    }
  }
  else if ( common::tools::StringUtils::strVecToNum<0u,unsigned int,unsigned int &>(
              param_vec,
              (unsigned int *)(v3 + 48),
              (unsigned int *)(v3 + 64),
              (unsigned int *)(v3 + 48)) )
  {
    std::string::operator=(ret_msg, "parse scene_id and num fail");
    v6 = -1;
    goto LABEL_30;
  }
  if ( *(_DWORD *)(v3 + 64) <= 0x2710u )
  {
    if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
      __asan_report_load8(&context->player);
    SceneComp = Player::getSceneComp(context->player);
    mark_point_set_ptr = PlayerSceneComp::getMarkPointSet(SceneComp, *(_DWORD *)(v3 + 48));
    if ( mark_point_set_ptr )
    {
      while ( std::unordered_set<proto::MapMarkPoint>::size(mark_point_set_ptr) > *(unsigned int *)(v3 + 64) )
      {
        v8._M_cur = std::unordered_set<proto::MapMarkPoint>::begin(mark_point_set_ptr)._M_cur;
        std::unordered_set<proto::MapMarkPoint>::erase(mark_point_set_ptr, v8);
      }
      while ( std::unordered_set<proto::MapMarkPoint>::size(mark_point_set_ptr) < *(unsigned int *)(v3 + 64) )
      {
        proto::MapMarkPoint::MapMarkPoint((proto::MapMarkPoint *const)(v3 + 160));
        proto::MapMarkPoint::set_scene_id((proto::MapMarkPoint *const)(v3 + 160), *(_DWORD *)(v3 + 48));
        ServiceBox::findService<GameserverService>();
        GameserverService::getConfig((GameserverService *const)&v34);
        v9 = std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false> *const)&v34);
        MapMarkMaxLength = ConstValueExcelConfigMgr::getMapMarkMaxLength(&v9->design_config.txt_config_mgr.const_value_config_mgr);
        common::tools::RandomUtils::randSimpleString[abi:cxx11](&value, MapMarkMaxLength);
        proto::MapMarkPoint::set_name((proto::MapMarkPoint *const)(v3 + 160), &value);
        std::string::~string(&value);
        std::shared_ptr<Config>::~shared_ptr(&v34);
        v11 = proto::MapMarkPoint::mutable_pos((proto::MapMarkPoint *const)(v3 + 160));
        v12 = common::tools::RandomUtils::rand<int>(-1000, 1000);
        proto::Vector::set_x(v11, (float)v12);
        v13 = proto::MapMarkPoint::mutable_pos((proto::MapMarkPoint *const)(v3 + 160));
        v14 = common::tools::RandomUtils::rand<int>(-1000, 1000);
        proto::Vector::set_y(v13, (float)v14);
        v15 = proto::MapMarkPoint::mutable_pos((proto::MapMarkPoint *const)(v3 + 160));
        v16 = common::tools::RandomUtils::rand<int>(-1000, 1000);
        proto::Vector::set_z(v15, (float)v16);
        v17 = common::tools::RandomUtils::rand<int>(0, 5);
        proto::MapMarkPoint::set_point_type((proto::MapMarkPoint *const)(v3 + 160), v17);
        v18 = common::tools::RandomUtils::rand<int>(0, 2);
        proto::MapMarkPoint::set_from_type((proto::MapMarkPoint *const)(v3 + 160), v18);
        v19 = proto::MapMarkPoint::point_type((const proto::MapMarkPoint *const)(v3 + 160));
        if ( v19 == QUEST )
        {
          v21 = common::tools::RandomUtils::rand<int>(100000, 200000);
          proto::MapMarkPoint::set_quest_id((proto::MapMarkPoint *const)(v3 + 160), v21);
        }
        else if ( v19 == MONSTER )
        {
          v20 = common::tools::RandomUtils::rand<int>(100000, 200000);
          proto::MapMarkPoint::set_monster_id((proto::MapMarkPoint *const)(v3 + 160), v20);
        }
        std::unordered_set<proto::MapMarkPoint>::emplace<proto::MapMarkPoint&>(
          mark_point_set_ptr,
          (proto::MapMarkPoint *)(v3 + 160),
          (proto::MapMarkPoint *)(v3 + 160));
        proto::MapMarkPoint::~MapMarkPoint((proto::MapMarkPoint *const)(v3 + 160));
      }
      proto::MarkMapRsp::MarkMapRsp((proto::MarkMapRsp *const)(v3 + 80));
      proto::MarkMapRsp::set_retcode((proto::MarkMapRsp *const)(v3 + 80), 0);
      if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
        __asan_report_load8(&context->player);
      v22 = Player::getSceneComp(context->player);
      v23 = proto::MarkMapRsp::mutable_mark_list((proto::MarkMapRsp *const)(v3 + 80));
      PlayerSceneComp::getAllMarkPoint(v22, v23);
      proto::PlayerData::PlayerData((proto::PlayerData *const)(v3 + 256));
      if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
        __asan_report_load8(&context->player);
      Player::toBin(context->player, (proto::PlayerData *)(v3 + 256));
      common::milog::MiLogStream::create(
        (common::milog::MiLogStream *)&value,
        &common::milog::MiLogDefault::default_log_obj_,
        1u,
        "./src/player/gm/player_gm_comp.cpp",
        "doGenMapMark",
        814);
      v24 = common::milog::MiLogStream::operator<<<char [5],(char *[5])0>(
              (common::milog::MiLogStream *const)&value,
              (const char (*)[5])"num:");
      v25 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v24, (const unsigned int *)(v3 + 64));
      v26 = common::milog::MiLogStream::operator<<<char [15],(char *[15])0>(v25, (const char (*)[15])" rsp.ByteSize:");
      val = proto::MarkMapRsp::ByteSizeLong((const proto::MarkMapRsp *const)(v3 + 80));
      v27 = common::milog::MiLogStream::operator<<<unsigned long,(unsigned long *)0>(v26, &val);
      v28 = common::milog::MiLogStream::operator<<<char [22],(char *[22])0>(
              v27,
              (const char (*)[22])" player_bin.ByteSize:");
      v32 = proto::PlayerData::ByteSizeLong((const proto::PlayerData *const)(v3 + 256));
      common::milog::MiLogStream::operator<<<unsigned long,(unsigned long *)0>(v28, &v32);
      common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)&value);
      v6 = 0;
      proto::PlayerData::~PlayerData((proto::PlayerData *const)(v3 + 256));
      proto::MarkMapRsp::~MarkMapRsp((proto::MarkMapRsp *const)(v3 + 80));
    }
    else
    {
      std::string::operator=(ret_msg, "mark_point_set_ptr is null");
      v6 = -1;
    }
  }
  else
  {
    std::string::operator=(ret_msg, &off_26351140);
    v6 = -1;
  }
LABEL_30:
  result = v6;
  if ( v36 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8008) = 0;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8010) = 0;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8018) = 0LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF802C) = 0;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8020) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8028) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 819: range 0000000017D721D4-0000000017D72276
void __cdecl doRunLuaRegister::doRunLuaRegister(doRunLuaRegister *const this)
{
  std::function<int(GmContext&,const std::vector<std::string>&,std::string&)> *v1; // rax
  std::allocator<char> __a; // [rsp+1Fh] [rbp-31h] BYREF
  std::string __k; // [rsp+20h] [rbp-30h] BYREF

  std::allocator<char>::allocator(&__a);
  std::string::basic_string<std::allocator<char>>(&__k, "RUN_LUA", &__a);
  v1 = std::unordered_map<std::string,std::function<int ()(GmContext &,std::vector<std::string> const&,std::string&)>>::operator[](
         &GmUtils::op_func_map[abi:cxx11],
         &__k);
  std::function<int ()(GmContext &,std::vector<std::string> const&,std::string&)>::operator=<int (&)(GmContext &,std::vector<std::string> const&,std::string&)>(
    v1,
    (int (*)(GmContext *, const std::vector<std::string> *, std::string *))doRunLua);
  std::string::~string(&__k);
  std::allocator<char>::~allocator(&__a);
};

// Line 820: range 0000000017BC2FE4-0000000017BC3785
int32_t __cdecl doRunLua(GmContext *context, const std::vector<std::string> *param_vec, std::string *ret_msg)
{
  unsigned __int64 v3; // r13
  __int64 v4; // rax
  _DWORD *v5; // r12
  size_t v6; // rax
  char v7; // r14
  __int64 v8; // rax
  int32_t v9; // r14d
  LuaScript *v10; // r14
  ScriptContext *v11; // r14
  LuaScript *v12; // rax
  int32_t result; // eax
  std::allocator<char> __a; // [rsp+2Fh] [rbp-3A1h] BYREF
  ScriptContext *v16; // [rsp+30h] [rbp-3A0h]
  size_t idx; // [rsp+38h] [rbp-398h]
  const std::string *param_str; // [rsp+40h] [rbp-390h]
  ScriptContext *o; // [rsp+48h] [rbp-388h]
  std::shared_ptr<Group> __r; // [rsp+50h] [rbp-380h] BYREF
  std::string func_name; // [rsp+60h] [rbp-370h] BYREF
  char v22[848]; // [rsp+80h] [rbp-350h] BYREF

  v3 = (unsigned __int64)v22;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_4(800LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "5 32 4 12 group_id:823 48 16 13 group_ptr:822 80 16 14 script_ptr:835 112 160 18 script_context:"
                        "843 336 392 6 ss:829";
  *(_QWORD *)(v3 + 16) = doRunLua;
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = 61956;
  v5[536862722] = 62194;
  v5[536862723] = 62194;
  v5[536862728] = -219021312;
  v5[536862729] = -218959118;
  v5[536862730] = 62194;
  v5[536862742] = -218103808;
  v5[536862743] = -202116109;
  v5[536862744] = -202116109;
  idx = 0LL;
  *(_QWORD *)(v3 + 48) = 0LL;
  *(_QWORD *)(v3 + 56) = 0LL;
  *(_DWORD *)(v3 + 32) = 0;
  if ( !common::tools::StringUtils::strVecToNum<0u,unsigned int>(&context->raw_param_vec, (unsigned int *)(v3 + 32)) )
  {
    if ( *(_BYTE *)(((unsigned __int64)&context->scene >> 3) + 0x7FFF8000) )
      __asan_report_load8(&context->scene);
    Scene::findGroup((Scene *const)&__r, (uint32_t)context->scene);
    std::shared_ptr<Group>::operator=((std::shared_ptr<Group> *const)(v3 + 48), &__r);
    std::shared_ptr<Group>::~shared_ptr(&__r);
    ++idx;
  }
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream(v3 + 336);
  while ( 1 )
  {
    v6 = std::vector<std::string>::size(&context->raw_param_vec);
    if ( idx >= v6 )
      break;
    param_str = std::vector<std::string>::operator[](&context->raw_param_vec, idx);
    v7 = 0;
    if ( std::operator==<char>(param_str, "\\n") )
    {
      std::allocator<char>::allocator(&__a);
      v7 = 1;
      std::string::basic_string<std::allocator<char>>(&func_name, "\n", &__a);
    }
    else
    {
      std::string::basic_string(&func_name, param_str);
    }
    v8 = std::operator<<<char>(v3 + 352, &func_name);
    std::operator<<<std::char_traits<char>>(v8, " ");
    std::string::~string(&func_name);
    if ( v7 )
      std::allocator<char>::~allocator(&__a);
    ++idx;
  }
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::str(&func_name, v3 + 336);
  LuaScriptMgr::createFromString((const std::string *)(v3 + 80));
  std::string::~string(&func_name);
  if ( std::operator==<LuaScript>(0LL, (const std::shared_ptr<LuaScript> *)(v3 + 80)) )
  {
    std::string::operator=(ret_msg, "createFromString fail");
    v9 = -1;
  }
  else
  {
    v10 = std::__shared_ptr_access<LuaScript,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<LuaScript,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 80));
    std::allocator<char>::allocator(&__a);
    std::string::basic_string<std::allocator<char>>(&func_name, "func", &__a);
    LOBYTE(v10) = LuaScript::hasFunction(v10, &func_name);
    std::string::~string(&func_name);
    std::allocator<char>::~allocator(&__a);
    if ( (_BYTE)v10 )
    {
      ScriptContext::ScriptContext((ScriptContext *const)(v3 + 112));
      if ( *(_BYTE *)(((unsigned __int64)&context->scene >> 3) + 0x7FFF8000) )
        __asan_report_load8(&context->scene);
      toThisPtr<Scene>((Scene *)&__r);
      ScriptContext::setSceneAndOwnerUid((ScriptContext *const)(v3 + 112), (ScenePtr *)&__r);
      std::shared_ptr<Scene>::~shared_ptr((std::shared_ptr<Scene> *const)&__r);
      std::weak_ptr<Group>::operator=<Group>(
        (std::weak_ptr<Group> *const)(v3 + 128),
        (const std::shared_ptr<Group> *)(v3 + 48));
      if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
        __asan_report_load8(&context->player);
      *(_DWORD *)(v3 + 200) = Player::getUid(context->player);
      o = (ScriptContext *)(v3 + 112);
      v16 = boost::addressof<ScriptContext>((ScriptContext *)(v3 + 112));
      v11 = v16;
      std::allocator<char>::allocator(&__a);
      std::string::basic_string<std::allocator<char>>(&func_name, "func", &__a);
      v12 = std::__shared_ptr_access<LuaScript,(__gnu_cxx::_Lock_policy)2,false,false>::operator*((const std::__shared_ptr_access<LuaScript,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 80));
      ScriptLib::executeFuncWithErrorNotify<void>(v12, &func_name, v11);
      std::string::~string(&func_name);
      std::allocator<char>::~allocator(&__a);
      ScriptContext::~ScriptContext((ScriptContext *const)(v3 + 112));
    }
    v9 = 0;
  }
  std::shared_ptr<LuaScript>::~shared_ptr((std::shared_ptr<LuaScript> *const)(v3 + 80));
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream(v3 + 336);
  std::shared_ptr<Group>::~shared_ptr((std::shared_ptr<Group> *const)(v3 + 48));
  result = v9;
  if ( v22 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8020) = 0LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8028) = 0;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8058) = 0LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8060) = 0;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8020) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8028) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8030) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8038) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8040) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8048) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8050) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8058) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8060) = -168430091;
  }
  return result;
};

// Line 852: range 0000000017D722E0-0000000017D72382
void __cdecl doRunCmdRegister::doRunCmdRegister(doRunCmdRegister *const this)
{
  std::function<int(GmContext&,const std::vector<std::string>&,std::string&)> *v1; // rax
  std::allocator<char> __a; // [rsp+1Fh] [rbp-31h] BYREF
  std::string __k; // [rsp+20h] [rbp-30h] BYREF

  std::allocator<char>::allocator(&__a);
  std::string::basic_string<std::allocator<char>>(&__k, "RUN_CMD", &__a);
  v1 = std::unordered_map<std::string,std::function<int ()(GmContext &,std::vector<std::string> const&,std::string&)>>::operator[](
         &GmUtils::op_func_map[abi:cxx11],
         &__k);
  std::function<int ()(GmContext &,std::vector<std::string> const&,std::string&)>::operator=<int (&)(GmContext &,std::vector<std::string> const&,std::string&)>(
    v1,
    (int (*)(GmContext *, const std::vector<std::string> *, std::string *))doRunCmd);
  std::string::~string(&__k);
  std::allocator<char>::~allocator(&__a);
};

// Line 853: range 0000000017BC3786-0000000017BC401E
int32_t __cdecl doRunCmd(GmContext *context, const std::vector<std::string> *param_vec, std::string *ret_msg)
{
  unsigned __int64 v3; // r13
  __int64 v4; // rax
  _DWORD *v5; // r12
  const std::string *v6; // r14
  int32_t v7; // r14d
  std::vector<std::string>::const_reference v8; // rax
  __int64 v9; // rax
  std::__shared_ptr_access<google::protobuf::Message,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v10; // rax
  common::minet::Packet *v11; // r14
  uint32_t Uid; // eax
  GameserverService *v13; // r14
  unsigned __int64 v14; // rdx
  int32_t result; // eax
  int v16; // [rsp+0h] [rbp-3B0h]
  std::string *ret_msgb; // [rsp+8h] [rbp-3A8h]
  GmContext *contexta; // [rsp+18h] [rbp-398h]
  int v20; // [rsp+20h] [rbp-390h]
  int ret; // [rsp+24h] [rbp-38Ch]
  size_t i; // [rsp+28h] [rbp-388h]
  std::shared_ptr<common::minet::Packet> p___args_0; // [rsp+30h] [rbp-380h] BYREF
  std::string v24; // [rsp+40h] [rbp-370h] BYREF
  std::string v25; // [rsp+60h] [rbp-350h] BYREF
  std::string __lhs; // [rsp+80h] [rbp-330h] BYREF
  char v27[784]; // [rsp+A0h] [rbp-310h] BYREF

  v3 = (unsigned __int64)v27;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_4(736LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "7 32 1 11 options:881 48 4 10 cmd_id:854 64 16 15 message_ptr:868 96 16 14 packet_ptr:889 128 32"
                        " 8 func:899 192 40 10 status:882 272 392 6 ss:875";
  *(_QWORD *)(v3 + 16) = doRunCmd;
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = -234556927;
  v5[536862722] = -219021312;
  v5[536862723] = -219021312;
  v5[536862725] = -218959118;
  v5[536862727] = -218959360;
  v5[536862728] = 62194;
  v5[536862740] = -218103808;
  v5[536862741] = -202116109;
  v5[536862742] = -202116109;
  *(_DWORD *)(v3 + 48) = 0;
  if ( !common::tools::StringUtils::strVecToNum<0u,unsigned int>(&context->raw_param_vec, (unsigned int *)(v3 + 48)) )
    goto LABEL_9;
  if ( !std::vector<std::string>::empty(&context->raw_param_vec) )
  {
    v6 = std::vector<std::string>::operator[](&context->raw_param_vec, 0LL);
    std::literals::string_literals::operator"" s[abi:cxx11](&__lhs, "proto.", 6uLL);
    std::operator+<char>((std::string *)(v3 + 128), &__lhs, v6);
    *(_DWORD *)(v3 + 48) = ProtoUtils::getCmdId((const std::string *)(v3 + 128));
    std::string::~string((void *)(v3 + 128));
    std::string::~string(&__lhs);
  }
  if ( *(_DWORD *)(v3 + 48) )
  {
LABEL_9:
    ProtoUtils::createMessage(*(_DWORD *)(v3 + 48));
    if ( std::operator==<google::protobuf::Message>(0LL, (const std::shared_ptr<google::protobuf::Message> *)(v3 + 64)) )
    {
      std::to_string((std::string *)(v3 + 128), *(_DWORD *)(v3 + 48));
      std::operator+<char>(&v24, "createMessage fail, cmd_id:", (std::string *)(v3 + 128));
      std::string::operator=(ret_msg, &v24);
      std::string::~string(&v24);
      std::string::~string((void *)(v3 + 128));
      v7 = -1;
    }
    else
    {
      std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream(v3 + 272);
      for ( i = 1LL; i < std::vector<std::string>::size(&context->raw_param_vec); ++i )
      {
        v8 = std::vector<std::string>::operator[](&context->raw_param_vec, i);
        v9 = std::operator<<<char>(v3 + 288, v8);
        std::operator<<<std::char_traits<char>>(v9, " ");
      }
      google::protobuf::util::JsonParseOptions::JsonParseOptions((google::protobuf::util::JsonParseOptions *const)(v3 + 32));
      std::__shared_ptr<google::protobuf::Message,(__gnu_cxx::_Lock_policy)2>::get((const std::__shared_ptr<google::protobuf::Message,(__gnu_cxx::_Lock_policy)2> *const)(v3 + 64));
      std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::str(v3 + 128, v3 + 272);
      google::protobuf::util::JsonStringToMessage(
        (google::protobuf::util::Status *)(v3 + 192),
        v16,
        (int)ret_msg,
        (int)param_vec,
        (int)context,
        v20,
        (void *)i,
        (int)p___args_0._M_ptr,
        (char)p___args_0._M_refcount._M_pi);
      std::string::~string((void *)(v3 + 128));
      if ( !google::protobuf::util::Status::ok((const google::protobuf::util::Status *const)(v3 + 192)) )
      {
        google::protobuf::util::Status::ToString[abi:cxx11](v3 + 128, v3 + 192);
        std::operator+<char>(&v25, "parse json fail, ", (std::string *)(v3 + 128));
        std::string::operator=(ret_msgb, &v25);
        std::string::~string(&v25);
        std::string::~string((void *)(v3 + 128));
        v7 = -1;
      }
      else
      {
        v10 = std::__shared_ptr_access<google::protobuf::Message,(__gnu_cxx::_Lock_policy)2,false,false>::operator*((const std::__shared_ptr_access<google::protobuf::Message,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 64));
        common::minet::PacketUtils::createPacket(*(_DWORD *)(v3 + 48), v10);
        if ( std::operator==<common::minet::Packet>(0LL, (const std::shared_ptr<common::minet::Packet> *)(v3 + 96)) )
        {
          std::to_string((std::string *)(v3 + 128), *(_DWORD *)(v3 + 48));
          std::operator+<char>(&__lhs, "createPacket fail, cmd_id:", (std::string *)(v3 + 128));
          std::string::operator=(ret_msgb, &__lhs);
          std::string::~string(&__lhs);
          std::string::~string((void *)(v3 + 128));
          v7 = -1;
        }
        else
        {
          v11 = std::__shared_ptr_access<common::minet::Packet,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<common::minet::Packet,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 96));
          if ( *(_BYTE *)(((unsigned __int64)&contexta->player >> 3) + 0x7FFF8000) )
            __asan_report_load8(&contexta->player);
          Uid = Player::getUid(contexta->player);
          common::minet::Packet::setUserId(v11, Uid);
          if ( *(_BYTE *)(((unsigned __int64)&contexta->player >> 3) + 0x7FFF8000) )
            __asan_report_load8(&contexta->player);
          Player::findPacketProcessFunc((PacketFunc *)(v3 + 128), contexta->player, *(_DWORD *)(v3 + 48));
          if ( std::function<int ()(std::shared_ptr<common::minet::Packet>)>::operator bool((const std::function<int(std::shared_ptr<common::minet::Packet>)> *const)(v3 + 128)) )
          {
            std::shared_ptr<common::minet::Packet>::shared_ptr(
              &p___args_0,
              (const std::shared_ptr<common::minet::Packet> *)(v3 + 96));
            ret = std::function<int ()(std::shared_ptr<common::minet::Packet>)>::operator()(
                    (const std::function<int(std::shared_ptr<common::minet::Packet>)> *const)(v3 + 128),
                    &p___args_0);
          }
          else
          {
            v13 = ServiceBox::findService<GameserverService>();
            std::shared_ptr<common::minet::Packet>::shared_ptr(
              &p___args_0,
              (const std::shared_ptr<common::minet::Packet> *)(v3 + 96));
            ret = ServiceBase::pushPacket(v13, (common::minet::PacketPtr)__PAIR128__(v14, &p___args_0));
          }
          std::shared_ptr<common::minet::Packet>::~shared_ptr(&p___args_0);
          v7 = ret;
          std::function<int ()(std::shared_ptr<common::minet::Packet>)>::~function((std::function<int(std::shared_ptr<common::minet::Packet>)> *const)(v3 + 128));
        }
        std::shared_ptr<common::minet::Packet>::~shared_ptr((std::shared_ptr<common::minet::Packet> *const)(v3 + 96));
      }
      google::protobuf::util::Status::~Status((google::protobuf::util::Status *const)(v3 + 192));
      std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream(v3 + 272);
    }
    std::shared_ptr<google::protobuf::Message>::~shared_ptr((std::shared_ptr<google::protobuf::Message> *const)(v3 + 64));
  }
  else
  {
    std::string::operator=(ret_msg, "parse cmd_id fail");
    v7 = -1;
  }
  result = v7;
  if ( v27 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8014) = 0;
    *(_QWORD *)((v3 >> 3) + 0x7FFF801C) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8050) = 0LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8058) = 0;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8020) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8028) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8030) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8038) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8040) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8048) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8050) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8058) = -168430091;
  }
  return result;
};

// Line 912: range 0000000017D72384-0000000017D72426
void __cdecl doCalcExploreExpRegister::doCalcExploreExpRegister(doCalcExploreExpRegister *const this)
{
  std::function<int(GmContext&,const std::vector<std::string>&,std::string&)> *v1; // rax
  std::allocator<char> __a; // [rsp+1Fh] [rbp-31h] BYREF
  std::string __k; // [rsp+20h] [rbp-30h] BYREF

  std::allocator<char>::allocator(&__a);
  std::string::basic_string<std::allocator<char>>(&__k, "CALC_EXPLORE_EXP", &__a);
  v1 = std::unordered_map<std::string,std::function<int ()(GmContext &,std::vector<std::string> const&,std::string&)>>::operator[](
         &GmUtils::op_func_map[abi:cxx11],
         &__k);
  std::function<int ()(GmContext &,std::vector<std::string> const&,std::string&)>::operator=<int (&)(GmContext &,std::vector<std::string> const&,std::string&)>(
    v1,
    (int (*)(GmContext *, const std::vector<std::string> *, std::string *))doCalcExploreExp);
  std::string::~string(&__k);
  std::allocator<char>::~allocator(&__a);
};

// Line 913: range 0000000017BC4826-0000000017BC4C60
int32_t __cdecl doCalcExploreExp(GmContext *context, const std::vector<std::string> *param_vec, std::string *ret_msg)
{
  unsigned __int64 v3; // r13
  __int64 v4; // rax
  _DWORD *v5; // rbx
  __int64 v6; // rax
  int32_t result; // eax
  std::map<unsigned int,std::map<unsigned int,std::map<unsigned int,std::map<unsigned int,unsigned int>>>>::const_iterator __for_begin; // [rsp+20h] [rbp-2B0h] BYREF
  std::map<unsigned int,std::map<unsigned int,std::map<unsigned int,std::map<unsigned int,unsigned int>>>>::const_iterator __for_end; // [rsp+28h] [rbp-2A8h] BYREF
  const std::map<unsigned int,std::map<unsigned int,std::map<unsigned int,std::map<unsigned int,unsigned int>>>> *__for_range; // [rsp+30h] [rbp-2A0h]
  const std::pair<unsigned int const,std::map<unsigned int,std::map<unsigned int,std::map<unsigned int,unsigned int>>> > *v12; // [rsp+38h] [rbp-298h]
  std::tuple_element<0,const std::pair<unsigned int const,std::map<unsigned int,std::map<unsigned int,std::map<unsigned int,unsigned int>>> > >::type *area_id; // [rsp+40h] [rbp-290h]
  std::tuple_element<1,const std::pair<unsigned int const,std::map<unsigned int,std::map<unsigned int,std::map<unsigned int,unsigned int>>> > >::type *_; // [rsp+48h] [rbp-288h]
  std::shared_ptr<Config> v15; // [rsp+50h] [rbp-280h] BYREF
  std::string v16; // [rsp+60h] [rbp-270h] BYREF
  char v17[592]; // [rsp+80h] [rbp-250h] BYREF

  v3 = (unsigned __int64)v17;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_4(544LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "3 32 4 11 area_id:936 48 8 24 get_area_explore_log:914 80 392 6 ss:935";
  *(_QWORD *)(v3 + 16) = doCalcExploreExp;
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = 61956;
  v5[536862721] = -234881024;
  v5[536862722] = 62194;
  v5[536862734] = -218103808;
  v5[536862735] = -202116109;
  v5[536862736] = -202116109;
  *(_QWORD *)(v3 + 48) = context;
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream(v3 + 80);
  *(_DWORD *)(v3 + 32) = 0;
  common::tools::StringUtils::strVecToNum<0u,unsigned int>(param_vec, (unsigned int *)(v3 + 32));
  if ( *(_DWORD *)(v3 + 32) )
  {
    doCalcExploreExp(GmContext &,std::vector<std::string> const&,std::string&)::{lambda(unsigned int)#1}::operator()(
      &v16,
      (const doCalcExploreExp::<lambda(uint32_t)> *const)(v3 + 48),
      *(_DWORD *)(v3 + 32));
    std::operator<<<char>(v3 + 96, &v16);
    std::string::~string(&v16);
  }
  else
  {
    ServiceBox::findService<GameserverService>();
    GameserverService::getConfig((GameserverService *const)&v15);
    __for_range = &std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false> *const)&v15)->design_config.txt_config_mgr.world_area_config_mgr.area_to_explorable_gadgets_map;
    std::shared_ptr<Config>::~shared_ptr(&v15);
    __for_begin._M_node = std::map<unsigned int,std::map<unsigned int,std::map<unsigned int,std::map<unsigned int,unsigned int>>>>::begin(__for_range)._M_node;
    __for_end._M_node = std::map<unsigned int,std::map<unsigned int,std::map<unsigned int,std::map<unsigned int,unsigned int>>>>::end(__for_range)._M_node;
    while ( std::operator!=(&__for_begin, &__for_end) )
    {
      v12 = std::_Rb_tree_const_iterator<std::pair<unsigned int const,std::map<unsigned int,std::map<unsigned int,std::map<unsigned int,unsigned int>>>>>::operator*(&__for_begin);
      area_id = std::get<0ul,unsigned int const,std::map<unsigned int,std::map<unsigned int,std::map<unsigned int,unsigned int>>>>(v12);
      _ = (std::tuple_element<1,const std::pair<unsigned int const,std::map<unsigned int,std::map<unsigned int,std::map<unsigned int,unsigned int>>> > >::type *)std::get<1ul,unsigned int const,std::map<unsigned int,std::map<unsigned int,std::map<unsigned int,unsigned int>>>>(v12);
      if ( *(_BYTE *)(((unsigned __int64)area_id >> 3) + 0x7FFF8000) != 0
        && (char)(((unsigned __int8)area_id & 7) + 3) >= *(_BYTE *)(((unsigned __int64)area_id >> 3) + 0x7FFF8000) )
      {
        __asan_report_load4(area_id);
      }
      doCalcExploreExp(GmContext &,std::vector<std::string> const&,std::string&)::{lambda(unsigned int)#1}::operator()(
        &v16,
        (const doCalcExploreExp::<lambda(uint32_t)> *const)(v3 + 48),
        *area_id);
      v6 = std::operator<<<char>(v3 + 96, &v16);
      std::operator<<<std::char_traits<char>>(v6, "\n");
      std::string::~string(&v16);
      std::_Rb_tree_const_iterator<std::pair<unsigned int const,std::map<unsigned int,std::map<unsigned int,std::map<unsigned int,unsigned int>>>>>::operator++(&__for_begin);
    }
  }
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::str(&v16, v3 + 80);
  std::string::operator=(ret_msg, &v16);
  std::string::~string(&v16);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream(v3 + 80);
  result = 0;
  if ( v17 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8008) = 0;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8038) = 0LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8040) = 0;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8020) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8028) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8030) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8038) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8040) = -168430091;
  }
  return result;
};

// Line 914: range 0000000017BC4020-0000000017BC4825
std::string *__cdecl doCalcExploreExp(GmContext &,std::vector<std::string> const&,std::string&)::{lambda(unsigned int)#1}::operator()(
        std::string *retstr,
        const doCalcExploreExp::<lambda(uint32_t)> *const __closure,
        uint32_t area_id)
{
  unsigned __int64 v3; // r13
  __int64 v4; // rax
  _DWORD *v5; // r12
  std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v6; // rax
  GmContext *context; // rax
  uint32_t SceneComp; // eax
  uint32_t v9; // eax
  const Area *p_player; // rdi
  GmContext *v11; // rax
  unsigned int scene_id; // [rsp+2Ch] [rbp-1A4h]
  std::string v16; // [rsp+30h] [rbp-1A0h] BYREF
  std::string v17; // [rsp+50h] [rbp-180h] BYREF
  std::string v18; // [rsp+70h] [rbp-160h] BYREF
  std::string v19; // [rsp+90h] [rbp-140h] BYREF
  std::string __lhs; // [rsp+B0h] [rbp-120h] BYREF
  std::string __rhs; // [rsp+D0h] [rbp-100h] BYREF
  char v22[224]; // [rsp+F0h] [rbp-E0h] BYREF

  v3 = (unsigned __int64)v22;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_2(192LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "3 32 16 13 scene_ptr:921 64 16 12 area_ptr:926 96 56 20 area_explore_log:931";
  *(_QWORD *)(v3 + 16) = doCalcExploreExp(GmContext &,std::vector<std::string> const&,std::string&)::{lambda(unsigned int)#1}::operator();
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = -219021312;
  v5[536862722] = -219021312;
  v5[536862724] = -218103808;
  v5[536862725] = -202116109;
  ServiceBox::findService<GameserverService>();
  GameserverService::getConfig((GameserverService *const)(v3 + 64));
  v6 = std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 64));
  scene_id = WorldAreaExcelConfigMgr::findSceneIdByLevel1AreaId(
               &v6->design_config.txt_config_mgr.world_area_config_mgr,
               area_id);
  std::shared_ptr<Config>::~shared_ptr((std::shared_ptr<Config> *const)(v3 + 64));
  if ( scene_id )
  {
    if ( *(_BYTE *)(((unsigned __int64)__closure >> 3) + 0x7FFF8000) )
      __asan_report_load8(__closure);
    context = __closure->__context;
    if ( *(_BYTE *)(((unsigned __int64)&__closure->__context->player >> 3) + 0x7FFF8000) )
      __asan_report_load8(&__closure->__context->player);
    SceneComp = (unsigned int)Player::getSceneComp(context->player);
    PlayerSceneComp::findScene((const PlayerSceneComp *const)(v3 + 32), SceneComp);
    if ( std::operator==<Scene>(0LL, (const std::shared_ptr<Scene> *)(v3 + 32)) )
    {
      std::to_string(&__rhs, area_id);
      std::literals::string_literals::operator"" s[abi:cxx11](&v19, " area_id:", 9uLL);
      std::to_string(&v17, scene_id);
      std::literals::string_literals::operator"" s[abi:cxx11](
        &v16,
        "findScene fail, skip this scene. scene_id:",
        0x2AuLL);
      std::operator+<char>(&v18, &v16, &v17);
      std::operator+<char>(&__lhs, &v18, &v19);
      if ( *(char *)(((unsigned __int64)retstr >> 3) + 0x7FFF8000) < 0
        || *(_BYTE *)((((unsigned __int64)&retstr->_anon_0._M_allocated_capacity + 15) >> 3) + 0x7FFF8000) != 0
        && (((unsigned __int8)retstr + 31) & 7) >= *(_BYTE *)((((unsigned __int64)&retstr->_anon_0._M_allocated_capacity
                                                              + 15) >> 3)
                                                            + 0x7FFF8000) )
      {
        __asan_report_store_n(retstr, 32LL);
      }
      std::operator+<char>(retstr, &__lhs, &__rhs);
      std::string::~string(&__lhs);
      std::string::~string(&v18);
      std::string::~string(&v16);
      std::string::~string(&v17);
      std::string::~string(&v19);
      std::string::~string(&__rhs);
    }
    else
    {
      v9 = (unsigned int)std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 32));
      Scene::findArea((Scene *const)(v3 + 64), v9);
      if ( std::operator==<Area>(0LL, (const std::shared_ptr<Area> *)(v3 + 64)) )
      {
        std::to_string(&__rhs, area_id);
        std::literals::string_literals::operator"" s[abi:cxx11](
          &__lhs,
          "findArea fail, skip this area. area_id:",
          0x27uLL);
        if ( *(char *)(((unsigned __int64)retstr >> 3) + 0x7FFF8000) < 0
          || *(_BYTE *)((((unsigned __int64)&retstr->_anon_0._M_allocated_capacity + 15) >> 3) + 0x7FFF8000) != 0
          && (((unsigned __int8)retstr + 31) & 7) >= *(_BYTE *)((((unsigned __int64)&retstr->_anon_0._M_allocated_capacity
                                                                + 15) >> 3)
                                                              + 0x7FFF8000) )
        {
          __asan_report_store_n(retstr, 32LL);
        }
        std::operator+<char>(retstr, &__lhs, &__rhs);
        std::string::~string(&__lhs);
        std::string::~string(&__rhs);
      }
      else
      {
        proto_log::AreaExploreLog::AreaExploreLog((proto_log::AreaExploreLog *const)(v3 + 96));
        p_player = std::__shared_ptr_access<Area,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Area,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 64));
        if ( *(_BYTE *)(((unsigned __int64)__closure >> 3) + 0x7FFF8000) )
        {
          p_player = (const Area *)__closure;
          __asan_report_load8(__closure);
        }
        v11 = __closure->__context;
        if ( *(_BYTE *)(((unsigned __int64)&__closure->__context->player >> 3) + 0x7FFF8000) )
        {
          p_player = (const Area *)&__closure->__context->player;
          __asan_report_load8(p_player);
        }
        Area::calcTotalExplorePoint(p_player, v11->player, (proto_log::AreaExploreLog *)(v3 + 96));
        if ( *(char *)(((unsigned __int64)retstr >> 3) + 0x7FFF8000) < 0
          || *(_BYTE *)((((unsigned __int64)&retstr->_anon_0._M_allocated_capacity + 15) >> 3) + 0x7FFF8000) != 0
          && (((unsigned __int8)retstr + 31) & 7) >= *(_BYTE *)((((unsigned __int64)&retstr->_anon_0._M_allocated_capacity
                                                                + 15) >> 3)
                                                              + 0x7FFF8000) )
        {
          __asan_report_store_n(retstr, 32LL);
        }
        google::protobuf::Message::ShortDebugString[abi:cxx11](retstr, (google::protobuf::Message *)(v3 + 96));
        proto_log::AreaExploreLog::~AreaExploreLog((proto_log::AreaExploreLog *const)(v3 + 96));
      }
      std::shared_ptr<Area>::~shared_ptr((std::shared_ptr<Area> *const)(v3 + 64));
    }
    std::shared_ptr<Scene>::~shared_ptr((std::shared_ptr<Scene> *const)(v3 + 32));
  }
  else
  {
    std::to_string(&__rhs, area_id);
    std::literals::string_literals::operator"" s[abi:cxx11](&__lhs, "findSceneIdByLevel1AreaId fail, area_id:", 0x28uLL);
    if ( *(char *)(((unsigned __int64)retstr >> 3) + 0x7FFF8000) < 0
      || *(_BYTE *)((((unsigned __int64)&retstr->_anon_0._M_allocated_capacity + 15) >> 3) + 0x7FFF8000) != 0
      && (((unsigned __int8)retstr + 31) & 7) >= *(_BYTE *)((((unsigned __int64)&retstr->_anon_0._M_allocated_capacity
                                                            + 15) >> 3)
                                                          + 0x7FFF8000) )
    {
      __asan_report_store_n(retstr, 32LL);
    }
    std::operator+<char>(retstr, &__lhs, &__rhs);
    std::string::~string(&__lhs);
    std::string::~string(&__rhs);
  }
  if ( v22 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8008) = 0;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8010) = 0LL;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return retstr;
};

// Line 953: range 0000000017D72428-0000000017D724CA
void __cdecl doNotifyH5Register::doNotifyH5Register(doNotifyH5Register *const this)
{
  std::function<int(GmContext&,const std::vector<std::string>&,std::string&)> *v1; // rax
  std::allocator<char> __a; // [rsp+1Fh] [rbp-31h] BYREF
  std::string __k; // [rsp+20h] [rbp-30h] BYREF

  std::allocator<char>::allocator(&__a);
  std::string::basic_string<std::allocator<char>>(&__k, "NOTIFY_H5", &__a);
  v1 = std::unordered_map<std::string,std::function<int ()(GmContext &,std::vector<std::string> const&,std::string&)>>::operator[](
         &GmUtils::op_func_map[abi:cxx11],
         &__k);
  std::function<int ()(GmContext &,std::vector<std::string> const&,std::string&)>::operator=<int (&)(GmContext &,std::vector<std::string> const&,std::string&)>(
    v1,
    (int (*)(GmContext *, const std::vector<std::string> *, std::string *))doNotifyH5);
  std::string::~string(&__k);
  std::allocator<char>::~allocator(&__a);
};

// Line 954: range 0000000017BC4C61-0000000017BC4D00
int32_t __cdecl doNotifyH5(GmContext *context, const std::vector<std::string> *param_vec, std::string *ret_msg)
{
  PlayerH5ActivityComp *H5ActivityComp; // rax
  unsigned __int64 v4; // rdx

  if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
    __asan_report_load8(&context->player);
  H5ActivityComp = Player::getH5ActivityComp(context->player);
  if ( *(_BYTE *)(((unsigned __int64)H5ActivityComp >> 3) + 0x7FFF8000) )
    __asan_report_load8(H5ActivityComp);
  v4 = (unsigned __int64)(H5ActivityComp->_vptr_PlayerCompBase + 15);
  if ( *(_BYTE *)((v4 >> 3) + 0x7FFF8000) )
    __asan_report_load8(H5ActivityComp->_vptr_PlayerCompBase + 15);
  (*(void (__fastcall **)(PlayerH5ActivityComp *))v4)(H5ActivityComp);
  return 0;
};

// Line 959: range 0000000017D724CC-0000000017D7256E
void __cdecl procClearRegister::procClearRegister(procClearRegister *const this)
{
  std::function<int(GmContext&,const std::vector<std::string>&,std::string&)> *v1; // rax
  std::allocator<char> __a; // [rsp+1Fh] [rbp-31h] BYREF
  std::string __k; // [rsp+20h] [rbp-30h] BYREF

  std::allocator<char>::allocator(&__a);
  std::string::basic_string<std::allocator<char>>(&__k, "CLEAR", &__a);
  v1 = std::unordered_map<std::string,std::function<int ()(GmContext &,std::vector<std::string> const&,std::string&)>>::operator[](
         &GmUtils::op_func_map[abi:cxx11],
         &__k);
  std::function<int ()(GmContext &,std::vector<std::string> const&,std::string&)>::operator=<int (&)(GmContext &,std::vector<std::string> const&,std::string&)>(
    v1,
    (int (*)(GmContext *, const std::vector<std::string> *, std::string *))procClear);
  std::string::~string(&__k);
  std::allocator<char>::~allocator(&__a);
};

// Line 960: range 0000000017BC4D01-0000000017BC4F2F
int32_t __cdecl procClear(GmContext *context, const std::vector<std::string> *param_vec, std::string *ret_msg)
{
  unsigned __int64 v3; // rbx
  __int64 v4; // rax
  unsigned __int64 v5; // r13
  int32_t v6; // r14d
  std::vector<std::string>::const_reference v7; // rax
  int32_t result; // eax
  Player *player; // [rsp+28h] [rbp-98h]
  char v10[144]; // [rsp+30h] [rbp-90h] BYREF

  v3 = (unsigned __int64)v10;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_1(96LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "1 32 32 9 param:967";
  *(_QWORD *)(v3 + 16) = procClear;
  v5 = v3 >> 3;
  *(_DWORD *)(v5 + 2147450880) = -235802127;
  *(_DWORD *)(v5 + 2147450888) = -202116109;
  if ( std::vector<std::string>::empty(param_vec) )
  {
    common::milog::MiLogStream::create(
      (common::milog::MiLogStream *)(v3 + 32),
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/player/gm/player_gm_comp.cpp",
      "procClear",
      963);
    common::milog::MiLogStream::operator<<<char [15],(char *[15])0>(
      (common::milog::MiLogStream *const)(v3 + 32),
      (const char (*)[15])"param is empty");
    common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v3 + 32));
    v6 = -1;
  }
  else
  {
    if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
      __asan_report_load8(&context->player);
    player = context->player;
    v7 = std::vector<std::string>::operator[](param_vec, 0LL);
    std::string::basic_string(v3 + 32, v7);
    if ( std::operator==<char>((const std::string *)(v3 + 32), _f.gap0) )
      Player::clearAndInit(player, 0);
    v6 = 0;
    std::string::~string((void *)(v3 + 32));
  }
  result = v6;
  if ( v10 == (char *)v3 )
  {
    *(_DWORD *)((v3 >> 3) + 0x7FFF8000) = 0;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8008) = 0;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8008) = -168430091;
  }
  return result;
};

// Line 975: range 0000000017D72570-0000000017D72612
void __cdecl procSaveRegister::procSaveRegister(procSaveRegister *const this)
{
  std::function<int(GmContext&,const std::vector<std::string>&,std::string&)> *v1; // rax
  std::allocator<char> __a; // [rsp+1Fh] [rbp-31h] BYREF
  std::string __k; // [rsp+20h] [rbp-30h] BYREF

  std::allocator<char>::allocator(&__a);
  std::string::basic_string<std::allocator<char>>(&__k, "SAVE", &__a);
  v1 = std::unordered_map<std::string,std::function<int ()(GmContext &,std::vector<std::string> const&,std::string&)>>::operator[](
         &GmUtils::op_func_map[abi:cxx11],
         &__k);
  std::function<int ()(GmContext &,std::vector<std::string> const&,std::string&)>::operator=<int (&)(GmContext &,std::vector<std::string> const&,std::string&)>(
    v1,
    (int (*)(GmContext *, const std::vector<std::string> *, std::string *))procSave);
  std::string::~string(&__k);
  std::allocator<char>::~allocator(&__a);
};

// Line 976: range 0000000017BC4F30-0000000017BC4F7F
int32_t __cdecl procSave(GmContext *context, const std::vector<std::string> *param_vec, std::string *ret_msg)
{
  if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
    __asan_report_load8(&context->player);
  Player::saveToDb(context->player);
  return 0;
};

// Line 982: range 0000000017D72614-0000000017D726B6
void __cdecl addExpRegister::addExpRegister(addExpRegister *const this)
{
  std::function<int(GmContext&,const std::vector<std::string>&,std::string&)> *v1; // rax
  std::allocator<char> __a; // [rsp+1Fh] [rbp-31h] BYREF
  std::string __k; // [rsp+20h] [rbp-30h] BYREF

  std::allocator<char>::allocator(&__a);
  std::string::basic_string<std::allocator<char>>(&__k, off_26351960, &__a);
  v1 = std::unordered_map<std::string,std::function<int ()(GmContext &,std::vector<std::string> const&,std::string&)>>::operator[](
         &GmUtils::op_func_map[abi:cxx11],
         &__k);
  std::function<int ()(GmContext &,std::vector<std::string> const&,std::string&)>::operator=<int (&)(GmContext &,std::vector<std::string> const&,std::string&)>(
    v1,
    (int (*)(GmContext *, const std::vector<std::string> *, std::string *))addExp);
  std::string::~string(&__k);
  std::allocator<char>::~allocator(&__a);
};

// Line 983: range 0000000017BC4F80-0000000017BC529B
int32_t __cdecl addExp(GmContext *context, const std::vector<std::string> *param_vec, std::string *ret_msg)
{
  unsigned __int64 v3; // r12
  __int64 v4; // rax
  _DWORD *v5; // r13
  common::milog::MiLogStream *v6; // rdx
  int32_t v7; // r14d
  std::__shared_ptr_access<FormalAvatar,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v8; // rax
  std::__shared_ptr_access<FormalAvatar,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v9; // r14
  unsigned __int64 v10; // rax
  void (__fastcall *v11)(std::__shared_ptr_access<FormalAvatar,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *, _QWORD, ActionReason *, __int64, _QWORD, _QWORD); // r15
  int32_t result; // eax
  ActionReason v13; // [rsp+20h] [rbp-F0h] BYREF
  common::milog::MiLogStream v14; // [rsp+40h] [rbp-D0h] BYREF
  char v15[176]; // [rsp+60h] [rbp-B0h] BYREF

  v3 = (unsigned __int64)v15;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_1(128LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "3 48 4 7 exp:984 64 16 14 avatar_ptr:990 96 16 21 formal_avatar_ptr:991";
  *(_QWORD *)(v3 + 16) = addExp;
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = -234556943;
  v5[536862722] = -219021312;
  v5[536862723] = -202178560;
  *(_DWORD *)(v3 + 48) = 0;
  if ( common::tools::StringUtils::strVecToNum<0u,unsigned int>(param_vec, (unsigned int *)(v3 + 48)) )
  {
    common::milog::MiLogStream::create(
      &v14,
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/player/gm/player_gm_comp.cpp",
      "addExp",
      987);
    v6 = common::milog::MiLogStream::operator<<<char [15],(char *[15])0>(&v14, (const char (*)[15])"invalid param:");
    common::milog::MiLogStream::operator<<<std::string>(v6, param_vec);
    common::milog::MiLogStream::~MiLogStream(&v14);
    v7 = -1;
  }
  else
  {
    if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
      __asan_report_load8(&context->player);
    Player::getCurAvatar((Player *const)(v3 + 64));
    std::dynamic_pointer_cast<FormalAvatar,Avatar>((const std::shared_ptr<Avatar> *)(v3 + 96));
    if ( std::operator!=<FormalAvatar>((const std::shared_ptr<FormalAvatar> *)(v3 + 96), 0LL) )
    {
      v8 = std::__shared_ptr_access<FormalAvatar,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<FormalAvatar,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 96));
      v9 = v8;
      if ( *(_BYTE *)(((unsigned __int64)v8 >> 3) + 0x7FFF8000) )
        __asan_report_load8(v8);
      v10 = *(_QWORD *)v9->baseclass_0 + 520LL;
      if ( *(_BYTE *)((v10 >> 3) + 0x7FFF8000) )
        __asan_report_load8(*(_QWORD *)v9->baseclass_0 + 520LL);
      v11 = *(void (__fastcall **)(std::__shared_ptr_access<FormalAvatar,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *, _QWORD, ActionReason *, __int64, _QWORD, _QWORD))v10;
      ActionReason::ActionReason(&v13, ACTION_REASON_GM, ITEM_LIMIT_GM);
      v11(v9, *(unsigned int *)(v3 + 48), &v13, 1LL, 0LL, 0LL);
    }
    v7 = 0;
    std::shared_ptr<FormalAvatar>::~shared_ptr((std::shared_ptr<FormalAvatar> *const)(v3 + 96));
    std::shared_ptr<Avatar>::~shared_ptr((std::shared_ptr<Avatar> *const)(v3 + 64));
  }
  result = v7;
  if ( v15 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 998: range 0000000017D726B8-0000000017D7275A
void __cdecl funcPerfRegister::funcPerfRegister(funcPerfRegister *const this)
{
  std::function<int(GmContext&,const std::vector<std::string>&,std::string&)> *v1; // rax
  std::allocator<char> __a; // [rsp+1Fh] [rbp-31h] BYREF
  std::string __k; // [rsp+20h] [rbp-30h] BYREF

  std::allocator<char>::allocator(&__a);
  std::string::basic_string<std::allocator<char>>(&__k, "PERF", &__a);
  v1 = std::unordered_map<std::string,std::function<int ()(GmContext &,std::vector<std::string> const&,std::string&)>>::operator[](
         &GmUtils::op_func_map[abi:cxx11],
         &__k);
  std::function<int ()(GmContext &,std::vector<std::string> const&,std::string&)>::operator=<int (&)(GmContext &,std::vector<std::string> const&,std::string&)>(
    v1,
    (int (*)(GmContext *, const std::vector<std::string> *, std::string *))funcPerf);
  std::string::~string(&__k);
  std::allocator<char>::~allocator(&__a);
};

// Line 999: range 0000000017BC529C-0000000017BC5337
int32_t __cdecl funcPerf(GmContext *context, const std::vector<std::string> *param_vec, std::string *ret_msg)
{
  const std::string *v3; // rax

  std::vector<std::string>::size(param_vec);
  if ( std::vector<std::string>::size(param_vec) == 1
    && (v3 = std::vector<std::string>::operator[](param_vec, 0LL), std::operator==<char>(v3, "RESET")) )
  {
    common::tools::perf::FunctionPerf::reset();
  }
  else
  {
    common::tools::perf::FunctionPerf::output();
  }
  return 0;
};

// Line 1016: range 0000000017D7275C-0000000017D727FE
void __cdecl setLevelRegister::setLevelRegister(setLevelRegister *const this)
{
  std::function<int(GmContext&,const std::vector<std::string>&,std::string&)> *v1; // rax
  std::allocator<char> __a; // [rsp+1Fh] [rbp-31h] BYREF
  std::string __k; // [rsp+20h] [rbp-30h] BYREF

  std::allocator<char>::allocator(&__a);
  std::string::basic_string<std::allocator<char>>(&__k, "LEVEL", &__a);
  v1 = std::unordered_map<std::string,std::function<int ()(GmContext &,std::vector<std::string> const&,std::string&)>>::operator[](
         &GmUtils::op_func_map[abi:cxx11],
         &__k);
  std::function<int ()(GmContext &,std::vector<std::string> const&,std::string&)>::operator=<int (&)(GmContext &,std::vector<std::string> const&,std::string&)>(
    v1,
    (int (*)(GmContext *, const std::vector<std::string> *, std::string *))setLevel);
  std::string::~string(&__k);
  std::allocator<char>::~allocator(&__a);
};

// Line 1017: range 0000000017BC5338-0000000017BC5721
int32_t __cdecl setLevel(GmContext *context, const std::vector<std::string> *param_vec, std::string *ret_msg)
{
  unsigned __int64 v3; // r12
  __int64 v4; // rax
  _DWORD *v5; // r13
  common::milog::MiLogStream *v6; // rdx
  int32_t v7; // r14d
  std::__shared_ptr_access<FormalAvatar,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v8; // rax
  FormalAvatar *v9; // rax
  std::__shared_ptr_access<FormalAvatar,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v10; // rax
  FightPropComp *FightPropComp; // r14
  std::__shared_ptr_access<FormalAvatar,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v12; // r15
  std::__shared_ptr_access<FormalAvatar,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v13; // rax
  uint32_t Level; // eax
  int32_t result; // eax
  std::__shared_ptr_access<FormalAvatar,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v16; // [rsp+10h] [rbp-140h]
  std::allocator<data::PropType> __a; // [rsp+3Fh] [rbp-111h] BYREF
  std::initializer_list<data::PropType> __l; // [rsp+40h] [rbp-110h] BYREF
  std::vector<data::PropType> prop_type_vec; // [rsp+50h] [rbp-100h] BYREF
  common::milog::MiLogStream v20; // [rsp+70h] [rbp-E0h] BYREF
  FightPropMap modified_fight_prop_map; // [rsp+90h] [rbp-C0h] BYREF
  char v22[144]; // [rsp+C0h] [rbp-90h] BYREF

  v3 = (unsigned __int64)v22;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_1(96LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "2 48 4 10 level:1018 64 16 22 formal_avatar_ptr:1025";
  *(_QWORD *)(v3 + 16) = setLevel;
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = -234556943;
  v5[536862722] = -202178560;
  *(_DWORD *)(v3 + 48) = 0;
  if ( common::tools::StringUtils::strVecToNum<0u,unsigned int>(param_vec, (unsigned int *)(v3 + 48)) )
  {
    common::milog::MiLogStream::create(
      &v20,
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/player/gm/player_gm_comp.cpp",
      "setLevel",
      1021);
    v6 = common::milog::MiLogStream::operator<<<char [15],(char *[15])0>(&v20, (const char (*)[15])"invalid param:");
    common::milog::MiLogStream::operator<<<std::string>(v6, param_vec);
    common::milog::MiLogStream::~MiLogStream(&v20);
    v7 = -1;
  }
  else
  {
    if ( *(_BYTE *)(((unsigned __int64)&context->avatar >> 3) + 0x7FFF8000) )
      __asan_report_load8(&context->avatar);
    __l._M_len = (std::initializer_list<data::PropType>::size_type)context->avatar;
    toPtr<FormalAvatar,Avatar>((Avatar *)(v3 + 64));
    if ( std::operator==<FormalAvatar>(0LL, (const std::shared_ptr<FormalAvatar> *)(v3 + 64)) )
    {
      v7 = -1;
    }
    else
    {
      v8 = std::__shared_ptr_access<FormalAvatar,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<FormalAvatar,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 64));
      HIDWORD(__l._M_array) = Creature::getLevel(v8);
      v9 = std::__shared_ptr_access<FormalAvatar,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<FormalAvatar,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 64));
      FormalAvatar::setLevelByGm(v9, *(_DWORD *)(v3 + 48));
      v16 = std::__shared_ptr_access<FormalAvatar,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<FormalAvatar,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 64));
      LODWORD(__l._M_array) = 4001;
      std::allocator<data::PropType>::allocator(&__a);
      std::vector<data::PropType>::vector(
        &prop_type_vec,
        (std::initializer_list<data::PropType>)__PAIR128__(1LL, &__l),
        &__a);
      Avatar::notifyAvatarProp(v16, &prop_type_vec);
      std::vector<data::PropType>::~vector(&prop_type_vec);
      std::allocator<data::PropType>::~allocator(&__a);
      v10 = std::__shared_ptr_access<FormalAvatar,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<FormalAvatar,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 64));
      FightPropComp = Creature::getFightPropComp(v10);
      v12 = std::__shared_ptr_access<FormalAvatar,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<FormalAvatar,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 64));
      v13 = std::__shared_ptr_access<FormalAvatar,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<FormalAvatar,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 64));
      Level = Creature::getLevel(v13);
      Creature::calcDeltaLevelProp(&modified_fight_prop_map, v12, HIDWORD(__l._M_array), Level);
      FightPropComp::modifyProps(FightPropComp, &modified_fight_prop_map, 0);
      std::map<data::FightPropType,float>::~map(&modified_fight_prop_map);
      v7 = 0;
    }
    std::shared_ptr<FormalAvatar>::~shared_ptr((std::shared_ptr<FormalAvatar> *const)(v3 + 64));
  }
  result = v7;
  if ( v22 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8008) = 0;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8008) = -168430091;
  }
  return result;
};

// Line 1037: range 0000000017D72800-0000000017D728A2
void __cdecl setBreakLevelRegister::setBreakLevelRegister(setBreakLevelRegister *const this)
{
  std::function<int(GmContext&,const std::vector<std::string>&,std::string&)> *v1; // rax
  std::allocator<char> __a; // [rsp+1Fh] [rbp-31h] BYREF
  std::string __k; // [rsp+20h] [rbp-30h] BYREF

  std::allocator<char>::allocator(&__a);
  std::string::basic_string<std::allocator<char>>(&__k, "BREAK", &__a);
  v1 = std::unordered_map<std::string,std::function<int ()(GmContext &,std::vector<std::string> const&,std::string&)>>::operator[](
         &GmUtils::op_func_map[abi:cxx11],
         &__k);
  std::function<int ()(GmContext &,std::vector<std::string> const&,std::string&)>::operator=<int (&)(GmContext &,std::vector<std::string> const&,std::string&)>(
    v1,
    (int (*)(GmContext *, const std::vector<std::string> *, std::string *))setBreakLevel);
  std::string::~string(&__k);
  std::allocator<char>::~allocator(&__a);
};

// Line 1038: range 0000000017BC5722-0000000017BC5980
int32_t __cdecl setBreakLevel(GmContext *context, const std::vector<std::string> *param_vec, std::string *ret_msg)
{
  unsigned __int64 v3; // rbx
  __int64 v4; // rax
  _DWORD *v5; // r12
  common::milog::MiLogStream *v6; // rdx
  int32_t v7; // r14d
  FormalAvatar *v8; // rax
  int32_t result; // eax
  common::milog::MiLogStream v10; // [rsp+20h] [rbp-B0h] BYREF
  char v11[144]; // [rsp+40h] [rbp-90h] BYREF

  v3 = (unsigned __int64)v11;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_1(96LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "2 48 4 16 break_level:1039 64 16 22 formal_avatar_ptr:1045";
  *(_QWORD *)(v3 + 16) = setBreakLevel;
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = -234556943;
  v5[536862722] = -202178560;
  *(_DWORD *)(v3 + 48) = 0;
  if ( common::tools::StringUtils::strVecToNum<0u,unsigned int>(param_vec, (unsigned int *)(v3 + 48)) )
  {
    common::milog::MiLogStream::create(
      &v10,
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/player/gm/player_gm_comp.cpp",
      "setBreakLevel",
      1042);
    v6 = common::milog::MiLogStream::operator<<<char [15],(char *[15])0>(&v10, (const char (*)[15])"invalid param:");
    common::milog::MiLogStream::operator<<<std::string>(v6, param_vec);
    common::milog::MiLogStream::~MiLogStream(&v10);
    v7 = -1;
  }
  else
  {
    if ( *(_BYTE *)(((unsigned __int64)&context->avatar >> 3) + 0x7FFF8000) )
      __asan_report_load8(&context->avatar);
    toPtr<FormalAvatar,Avatar>((Avatar *)(v3 + 64));
    if ( std::operator==<FormalAvatar>(0LL, (const std::shared_ptr<FormalAvatar> *)(v3 + 64)) )
    {
      v7 = -1;
    }
    else
    {
      v8 = std::__shared_ptr_access<FormalAvatar,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<FormalAvatar,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 64));
      FormalAvatar::setPromoteLevelByGm(v8, *(_DWORD *)(v3 + 48));
      v7 = 0;
    }
    std::shared_ptr<FormalAvatar>::~shared_ptr((std::shared_ptr<FormalAvatar> *const)(v3 + 64));
  }
  result = v7;
  if ( v11 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8008) = 0;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8008) = -168430091;
  }
  return result;
};

// Line 1054: range 0000000017D728A4-0000000017D72946
void __cdecl killCreatureRegister::killCreatureRegister(killCreatureRegister *const this)
{
  std::function<int(GmContext&,const std::vector<std::string>&,std::string&)> *v1; // rax
  std::allocator<char> __a; // [rsp+1Fh] [rbp-31h] BYREF
  std::string __k; // [rsp+20h] [rbp-30h] BYREF

  std::allocator<char>::allocator(&__a);
  std::string::basic_string<std::allocator<char>>(&__k, "KILL", &__a);
  v1 = std::unordered_map<std::string,std::function<int ()(GmContext &,std::vector<std::string> const&,std::string&)>>::operator[](
         &GmUtils::op_func_map[abi:cxx11],
         &__k);
  std::function<int ()(GmContext &,std::vector<std::string> const&,std::string&)>::operator=<int (&)(GmContext &,std::vector<std::string> const&,std::string&)>(
    v1,
    (int (*)(GmContext *, const std::vector<std::string> *, std::string *))killCreature);
  std::string::~string(&__k);
  std::allocator<char>::~allocator(&__a);
};

// Line 1055: range 0000000017BC5C4E-0000000017BC713C
int32_t __cdecl killCreature(GmContext *context, const std::vector<std::string> *param_vec, std::string *ret_msg)
{
  unsigned __int64 v3; // r13
  __int64 v4; // rax
  _DWORD *v5; // r12
  int32_t v6; // r14d
  const std::string *v7; // rax
  common::milog::MiLogStream *v8; // rdx
  const std::string *v9; // rax
  Creature *v10; // rax
  const std::string *v11; // rax
  common::milog::MiLogStream *v12; // rdx
  const std::string *v13; // rax
  const std::string *v14; // rax
  common::milog::MiLogStream *v16; // rdx
  const std::string *v17; // rax
  const std::string *v18; // rax
  Scene *v20; // r14
  Scene *v21; // rax
  const std::shared_ptr<Monster> *v22; // rax
  std::__shared_ptr_access<Monster,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v23; // rax
  std::__shared_ptr_access<Monster,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v24; // rax
  std::__shared_ptr_access<Monster,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v26; // rax
  Scene *scene; // r14
  const std::string *v28; // rax
  common::milog::MiLogStream *v29; // rdx
  const std::string *v30; // rax
  const std::string *v31; // rax
  common::milog::MiLogStream *v33; // rdx
  const std::string *v34; // rax
  const std::string *v35; // rax
  Scene *v37; // r14
  Scene *v38; // rax
  const std::shared_ptr<Monster> *v39; // rax
  std::__shared_ptr_access<Monster,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v40; // rax
  std::__shared_ptr_access<Monster,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v41; // rax
  std::__shared_ptr_access<Monster,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v43; // rax
  Scene *v44; // r14
  const std::string *v45; // rax
  common::milog::MiLogStream *v46; // rdx
  const std::string *v47; // rax
  const std::string *v48; // rax
  PlayerAvatarComp *AvatarComp; // rax
  int32_t result; // eax
  Scene *v51; // [rsp+10h] [rbp-230h]
  std::vector<std::shared_ptr<Monster>>::iterator __for_begin; // [rsp+40h] [rbp-200h] BYREF
  std::vector<std::shared_ptr<Monster>>::iterator __for_end; // [rsp+48h] [rbp-1F8h] BYREF
  std::vector<std::shared_ptr<Monster>> *__for_range_0; // [rsp+50h] [rbp-1F0h]
  std::vector<std::shared_ptr<Monster>> *__for_range; // [rsp+58h] [rbp-1E8h]
  std::shared_ptr<Avatar> __r; // [rsp+60h] [rbp-1E0h] BYREF
  common::milog::MiLogStream v57; // [rsp+70h] [rbp-1D0h] BYREF
  char v58[432]; // [rsp+90h] [rbp-1B0h] BYREF
  killCreature::<lambda(Monster&)>_0 v59; // 0:esi.4,8:rdx.8
  killCreature::<lambda(Monster&)>_0 v60; // 0:esi.4,8:rdx.8
  killCreature::<lambda(Gadget&)> v61; // 0:esi.4,8:rdx.8

  v3 = (unsigned __int64)v58;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_3(384LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "6 48 1 15 has_killer:1158 64 4 14 gadget_id:1217 80 16 16 monster_ptr:1191 112 24 16 monster_vec"
                        ":1188 176 48 12 visitor:1189 256 96 15 hp_context:1061";
  *(_QWORD *)(v3 + 16) = killCreature;
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = -234753551;
  v5[536862722] = 61956;
  v5[536862723] = 62194;
  v5[536862724] = -218959360;
  v5[536862725] = 62194;
  v5[536862727] = -218959118;
  v5[536862731] = -202116109;
  if ( std::vector<std::string>::empty(param_vec) )
  {
    common::milog::MiLogStream::create(
      &v57,
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/player/gm/player_gm_comp.cpp",
      "killCreature",
      1058);
    common::milog::MiLogStream::operator<<<char [15],(char *[15])0>(&v57, (const char (*)[15])"param is empty");
    common::milog::MiLogStream::~MiLogStream(&v57);
    v6 = -1;
    goto LABEL_116;
  }
  ChangeHpContext::ChangeHpContext((ChangeHpContext *const)(v3 + 256));
  *(_DWORD *)(v3 + 256) = 11;
  if ( *(_BYTE *)(((unsigned __int64)&context->avatar >> 3) + 0x7FFF8000) )
    __asan_report_load8(&context->avatar);
  toThisPtr<Avatar>((Avatar *)(v3 + 80));
  std::shared_ptr<Creature>::operator=<Avatar>(
    (std::shared_ptr<Creature> *const)(v3 + 264),
    (std::shared_ptr<Avatar> *)(v3 + 80));
  std::shared_ptr<Avatar>::~shared_ptr((std::shared_ptr<Avatar> *const)(v3 + 80));
  v7 = std::vector<std::string>::operator[](param_vec, 0LL);
  if ( !std::operator==<char>(v7, "ENTITY") )
  {
    v11 = std::vector<std::string>::operator[](param_vec, 0LL);
    if ( std::operator==<char>(v11, "MONSTER") )
    {
      if ( std::vector<std::string>::size(param_vec) <= 1 )
      {
        common::milog::MiLogStream::create(
          &v57,
          &common::milog::MiLogDefault::default_log_obj_,
          3u,
          "./src/player/gm/player_gm_comp.cpp",
          "killCreature",
          1081);
        v12 = common::milog::MiLogStream::operator<<<char [15],(char *[15])0>(
                &v57,
                (const char (*)[15])"invalid param:");
        common::milog::MiLogStream::operator<<<std::string>(v12, param_vec);
        common::milog::MiLogStream::~MiLogStream(&v57);
        v6 = -1;
        goto LABEL_115;
      }
      *(_DWORD *)(v3 + 64) = 0;
      v13 = std::vector<std::string>::operator[](param_vec, 1uLL);
      common::tools::StringUtils::strToNum<unsigned int>(v13, (unsigned int *)(v3 + 64), 1);
      if ( !*(_DWORD *)(v3 + 64) )
      {
        v14 = std::vector<std::string>::operator[](param_vec, 1uLL);
        if ( std::operator!=<char>(v14, _f.gap0) )
        {
          common::milog::MiLogStream::create(
            &v57,
            &common::milog::MiLogDefault::default_log_obj_,
            3u,
            "./src/player/gm/player_gm_comp.cpp",
            "killCreature",
            1088);
          v16 = common::milog::MiLogStream::operator<<<char [15],(char *[15])0>(
                  &v57,
                  (const char (*)[15])"invalid param:");
          common::milog::MiLogStream::operator<<<std::string>(v16, param_vec);
          common::milog::MiLogStream::~MiLogStream(&v57);
          v6 = -1;
          goto LABEL_115;
        }
      }
      *(_BYTE *)(v3 + 48) = 1;
      if ( std::vector<std::string>::size(param_vec) > 2 )
      {
        v17 = std::vector<std::string>::operator[](param_vec, 2uLL);
        if ( std::operator==<char>(v17, "FORCE") )
        {
          *(_DWORD *)(v3 + 256) = 12;
        }
        else
        {
          v18 = std::vector<std::string>::operator[](param_vec, 2uLL);
          if ( !common::tools::StringUtils::strToNum<bool>(v18, (bool *)(v3 + 48), 1) && *(_BYTE *)(v3 + 48) != 1 )
          {
            std::shared_ptr<Creature>::shared_ptr((std::shared_ptr<Creature> *const)(v3 + 80), 0LL);
            std::shared_ptr<Creature>::operator=(
              (std::shared_ptr<Creature> *const)(v3 + 264),
              (std::shared_ptr<Creature> *)(v3 + 80));
            std::shared_ptr<Creature>::~shared_ptr((std::shared_ptr<Creature> *const)(v3 + 80));
          }
        }
      }
      if ( *(_DWORD *)(v3 + 64) )
      {
        if ( *(_BYTE *)(((unsigned __int64)&context->scene >> 3) + 0x7FFF8000) )
          __asan_report_load8(&context->scene);
        scene = context->scene;
        v59.__hp_context = (ChangeHpContext *)(v3 + 256);
        v59.__monster_id = *(_DWORD *)(v3 + 64);
        std::function<ForeachPolicy ()(Monster &)>::function<killCreature(GmContext &,std::vector<std::string> const&,std::string&)::{lambda(Monster &)#2},void,void>(
          (std::function<ForeachPolicy(Monster&)> *const)&v57,
          v59);
        Scene::foreachEntity<Monster>(scene, (std::function<ForeachPolicy(Monster&)> *)&v57);
        std::function<ForeachPolicy ()(Monster &)>::~function((std::function<ForeachPolicy(Monster&)> *const)&v57);
        goto LABEL_114;
      }
      if ( *(_BYTE *)(((unsigned __int64)&context->scene >> 3) + 0x7FFF8000) )
        __asan_report_load8(&context->scene);
      if ( Scene::getSceneType(context->scene) == SCENE_DUNGEON )
      {
        if ( *(_BYTE *)(((unsigned __int64)&context->scene >> 3) + 0x7FFF8000) )
          __asan_report_load8(&context->scene);
        v20 = context->scene;
        std::function<ForeachPolicy ()(Monster &)>::function<killCreature(GmContext &,std::vector<std::string> const&,std::string&)::{lambda(Monster &)#1},void,void>(
          (std::function<ForeachPolicy(Monster&)> *const)&v57,
          (killCreature::<lambda(Monster&)>)(v3 + 256));
        Scene::foreachEntity<Monster>(v20, (std::function<ForeachPolicy(Monster&)> *)&v57);
        std::function<ForeachPolicy ()(Monster &)>::~function((std::function<ForeachPolicy(Monster&)> *const)&v57);
        goto LABEL_114;
      }
      std::vector<std::shared_ptr<Monster>>::vector((std::vector<std::shared_ptr<Monster>> *const)(v3 + 112));
      if ( *(_BYTE *)(((unsigned __int64)&context->avatar >> 3) + 0x7FFF8000) )
        __asan_report_load8(&context->avatar);
      toThisPtr<Avatar>((Avatar *)&__r);
      std::shared_ptr<Entity>::shared_ptr<Avatar,void>((std::shared_ptr<Entity> *const)(v3 + 80), &__r);
      ZN13EntityVisitorCI27VisitorESt10shared_ptrI6EntityE((EntityVisitor *const)(v3 + 176), (EntityPtr *)(v3 + 80));
      std::shared_ptr<Entity>::~shared_ptr((std::shared_ptr<Entity> *const)(v3 + 80));
      std::shared_ptr<Avatar>::~shared_ptr(&__r);
      if ( *(_BYTE *)(((unsigned __int64)&context->scene >> 3) + 0x7FFF8000) )
        __asan_report_load8(&context->scene);
      v21 = context->scene;
      if ( *(_BYTE *)(((unsigned __int64)&context->avatar >> 3) + 0x7FFF8000) )
        __asan_report_load8(&context->avatar);
      Scene::getSurroundEntities<std::shared_ptr<Monster>>(
        v21,
        (Visitor *)(v3 + 176),
        (Entity *)context->avatar,
        (std::vector<std::shared_ptr<Monster>> *)(v3 + 112));
      __for_range = (std::vector<std::shared_ptr<Monster>> *)(v3 + 112);
      __for_begin._M_current = std::vector<std::shared_ptr<Monster>>::begin((std::vector<std::shared_ptr<Monster>> *const)(v3 + 112))._M_current;
      __for_end._M_current = std::vector<std::shared_ptr<Monster>>::end((std::vector<std::shared_ptr<Monster>> *const)(v3 + 112))._M_current;
      while ( __gnu_cxx::operator!=<std::shared_ptr<Monster> *,std::vector<std::shared_ptr<Monster>>>(
                &__for_begin,
                &__for_end) )
      {
        v22 = __gnu_cxx::__normal_iterator<std::shared_ptr<Monster> *,std::vector<std::shared_ptr<Monster>>>::operator*(&__for_begin);
        std::shared_ptr<Monster>::shared_ptr((std::shared_ptr<Monster> *const)(v3 + 80), v22);
        v23 = std::__shared_ptr_access<Monster,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Monster,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 80));
        if ( Entity::isOnScene((const Entity *const)v23) )
        {
          v24 = std::__shared_ptr_access<Monster,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Monster,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 80));
          if ( Monster::getMonsterType(v24) != MONSTER_PARTNER )
          {
            v26 = std::__shared_ptr_access<Monster,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Monster,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 80));
            Creature::subCurHpToZero(v26, (ChangeHpContext *)(v3 + 256), 1);
          }
        }
        std::shared_ptr<Monster>::~shared_ptr((std::shared_ptr<Monster> *const)(v3 + 80));
        __gnu_cxx::__normal_iterator<std::shared_ptr<Monster> *,std::vector<std::shared_ptr<Monster>>>::operator++(&__for_begin);
      }
    }
    else
    {
      v28 = std::vector<std::string>::operator[](param_vec, 0LL);
      if ( !std::operator==<char>(v28, "PARTNER") )
      {
        v45 = std::vector<std::string>::operator[](param_vec, 0LL);
        if ( std::operator==<char>(v45, "GADGET") )
        {
          if ( std::vector<std::string>::size(param_vec) <= 1 )
          {
            common::milog::MiLogStream::create(
              &v57,
              &common::milog::MiLogDefault::default_log_obj_,
              3u,
              "./src/player/gm/player_gm_comp.cpp",
              "killCreature",
              1214);
            v46 = common::milog::MiLogStream::operator<<<char [15],(char *[15])0>(
                    &v57,
                    (const char (*)[15])"invalid param:");
            common::milog::MiLogStream::operator<<<std::string>(v46, param_vec);
            common::milog::MiLogStream::~MiLogStream(&v57);
            v6 = -1;
            goto LABEL_115;
          }
          *(_DWORD *)(v3 + 64) = 0;
          v47 = std::vector<std::string>::operator[](param_vec, 1uLL);
          common::tools::StringUtils::strToNum<unsigned int>(v47, (unsigned int *)(v3 + 64), 1);
          if ( *(_BYTE *)(((unsigned __int64)&context->scene >> 3) + 0x7FFF8000) )
            __asan_report_load8(&context->scene);
          v51 = context->scene;
          v61.__hp_context = (ChangeHpContext *)(v3 + 256);
          v61.__gadget_id = *(_DWORD *)(v3 + 64);
          std::function<ForeachPolicy ()(Gadget &)>::function<killCreature(GmContext &,std::vector<std::string> const&,std::string&)::{lambda(Gadget &)#5},void,void>(
            (std::function<ForeachPolicy(Gadget&)> *const)&v57,
            v61);
          Scene::foreachEntity<Gadget>(v51, (std::function<ForeachPolicy(Gadget&)> *)&v57);
          std::function<ForeachPolicy ()(Gadget &)>::~function((std::function<ForeachPolicy(Gadget&)> *const)&v57);
        }
        else
        {
          v48 = std::vector<std::string>::operator[](param_vec, 0LL);
          if ( std::operator==<char>(v48, "SELF") )
          {
            if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
              __asan_report_load8(&context->player);
            AvatarComp = Player::getAvatarComp(context->player);
            PlayerAvatarComp::allAvatarDie(AvatarComp, PLAYER_DIE_KILL_BY_MONSTER);
          }
        }
LABEL_114:
        v6 = 0;
        goto LABEL_115;
      }
      if ( std::vector<std::string>::size(param_vec) <= 1 )
      {
        common::milog::MiLogStream::create(
          &v57,
          &common::milog::MiLogDefault::default_log_obj_,
          3u,
          "./src/player/gm/player_gm_comp.cpp",
          "killCreature",
          1148);
        v29 = common::milog::MiLogStream::operator<<<char [15],(char *[15])0>(
                &v57,
                (const char (*)[15])"invalid param:");
        common::milog::MiLogStream::operator<<<std::string>(v29, param_vec);
        common::milog::MiLogStream::~MiLogStream(&v57);
        v6 = -1;
        goto LABEL_115;
      }
      *(_DWORD *)(v3 + 64) = 0;
      v30 = std::vector<std::string>::operator[](param_vec, 1uLL);
      common::tools::StringUtils::strToNum<unsigned int>(v30, (unsigned int *)(v3 + 64), 1);
      if ( !*(_DWORD *)(v3 + 64) )
      {
        v31 = std::vector<std::string>::operator[](param_vec, 1uLL);
        if ( std::operator!=<char>(v31, _f.gap0) )
        {
          common::milog::MiLogStream::create(
            &v57,
            &common::milog::MiLogDefault::default_log_obj_,
            3u,
            "./src/player/gm/player_gm_comp.cpp",
            "killCreature",
            1155);
          v33 = common::milog::MiLogStream::operator<<<char [15],(char *[15])0>(
                  &v57,
                  (const char (*)[15])"invalid param:");
          common::milog::MiLogStream::operator<<<std::string>(v33, param_vec);
          common::milog::MiLogStream::~MiLogStream(&v57);
          v6 = -1;
          goto LABEL_115;
        }
      }
      *(_BYTE *)(v3 + 48) = 1;
      if ( std::vector<std::string>::size(param_vec) > 2 )
      {
        v34 = std::vector<std::string>::operator[](param_vec, 2uLL);
        if ( std::operator==<char>(v34, "FORCE") )
        {
          *(_DWORD *)(v3 + 256) = 12;
        }
        else
        {
          v35 = std::vector<std::string>::operator[](param_vec, 2uLL);
          if ( !common::tools::StringUtils::strToNum<bool>(v35, (bool *)(v3 + 48), 1) && *(_BYTE *)(v3 + 48) != 1 )
          {
            std::shared_ptr<Creature>::shared_ptr((std::shared_ptr<Creature> *const)(v3 + 80), 0LL);
            std::shared_ptr<Creature>::operator=(
              (std::shared_ptr<Creature> *const)(v3 + 264),
              (std::shared_ptr<Creature> *)(v3 + 80));
            std::shared_ptr<Creature>::~shared_ptr((std::shared_ptr<Creature> *const)(v3 + 80));
          }
        }
      }
      if ( *(_DWORD *)(v3 + 64) )
      {
        if ( *(_BYTE *)(((unsigned __int64)&context->scene >> 3) + 0x7FFF8000) )
          __asan_report_load8(&context->scene);
        v44 = context->scene;
        v60.__hp_context = (ChangeHpContext *)(v3 + 256);
        v60.__monster_id = *(_DWORD *)(v3 + 64);
        std::function<ForeachPolicy ()(Monster &)>::function<killCreature(GmContext &,std::vector<std::string> const&,std::string&)::{lambda(Monster &)#4},void,void>(
          (std::function<ForeachPolicy(Monster&)> *const)&v57,
          v60);
        Scene::foreachEntity<Monster>(v44, (std::function<ForeachPolicy(Monster&)> *)&v57);
        std::function<ForeachPolicy ()(Monster &)>::~function((std::function<ForeachPolicy(Monster&)> *const)&v57);
        goto LABEL_114;
      }
      if ( *(_BYTE *)(((unsigned __int64)&context->scene >> 3) + 0x7FFF8000) )
        __asan_report_load8(&context->scene);
      if ( Scene::getSceneType(context->scene) == SCENE_DUNGEON )
      {
        if ( *(_BYTE *)(((unsigned __int64)&context->scene >> 3) + 0x7FFF8000) )
          __asan_report_load8(&context->scene);
        v37 = context->scene;
        std::function<ForeachPolicy ()(Monster &)>::function<killCreature(GmContext &,std::vector<std::string> const&,std::string&)::{lambda(Monster &)#3},void,void>(
          (std::function<ForeachPolicy(Monster&)> *const)&v57,
          (killCreature::<lambda(Monster&)>)(v3 + 256));
        Scene::foreachEntity<Monster>(v37, (std::function<ForeachPolicy(Monster&)> *)&v57);
        std::function<ForeachPolicy ()(Monster &)>::~function((std::function<ForeachPolicy(Monster&)> *const)&v57);
        goto LABEL_114;
      }
      std::vector<std::shared_ptr<Monster>>::vector((std::vector<std::shared_ptr<Monster>> *const)(v3 + 112));
      if ( *(_BYTE *)(((unsigned __int64)&context->avatar >> 3) + 0x7FFF8000) )
        __asan_report_load8(&context->avatar);
      toThisPtr<Avatar>((Avatar *)&__r);
      std::shared_ptr<Entity>::shared_ptr<Avatar,void>((std::shared_ptr<Entity> *const)(v3 + 80), &__r);
      ZN13EntityVisitorCI27VisitorESt10shared_ptrI6EntityE((EntityVisitor *const)(v3 + 176), (EntityPtr *)(v3 + 80));
      std::shared_ptr<Entity>::~shared_ptr((std::shared_ptr<Entity> *const)(v3 + 80));
      std::shared_ptr<Avatar>::~shared_ptr(&__r);
      if ( *(_BYTE *)(((unsigned __int64)&context->scene >> 3) + 0x7FFF8000) )
        __asan_report_load8(&context->scene);
      v38 = context->scene;
      if ( *(_BYTE *)(((unsigned __int64)&context->avatar >> 3) + 0x7FFF8000) )
        __asan_report_load8(&context->avatar);
      Scene::getSurroundEntities<std::shared_ptr<Monster>>(
        v38,
        (Visitor *)(v3 + 176),
        (Entity *)context->avatar,
        (std::vector<std::shared_ptr<Monster>> *)(v3 + 112));
      __for_range_0 = (std::vector<std::shared_ptr<Monster>> *)(v3 + 112);
      __for_begin._M_current = std::vector<std::shared_ptr<Monster>>::begin((std::vector<std::shared_ptr<Monster>> *const)(v3 + 112))._M_current;
      __for_end._M_current = std::vector<std::shared_ptr<Monster>>::end((std::vector<std::shared_ptr<Monster>> *const)(v3 + 112))._M_current;
      while ( __gnu_cxx::operator!=<std::shared_ptr<Monster> *,std::vector<std::shared_ptr<Monster>>>(
                &__for_begin,
                &__for_end) )
      {
        v39 = __gnu_cxx::__normal_iterator<std::shared_ptr<Monster> *,std::vector<std::shared_ptr<Monster>>>::operator*(&__for_begin);
        std::shared_ptr<Monster>::shared_ptr((std::shared_ptr<Monster> *const)(v3 + 80), v39);
        v40 = std::__shared_ptr_access<Monster,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Monster,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 80));
        if ( Entity::isOnScene((const Entity *const)v40) )
        {
          v41 = std::__shared_ptr_access<Monster,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Monster,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 80));
          if ( Monster::getMonsterType(v41) == MONSTER_PARTNER )
          {
            v43 = std::__shared_ptr_access<Monster,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Monster,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 80));
            Creature::subCurHpToZero(v43, (ChangeHpContext *)(v3 + 256), 1);
          }
        }
        std::shared_ptr<Monster>::~shared_ptr((std::shared_ptr<Monster> *const)(v3 + 80));
        __gnu_cxx::__normal_iterator<std::shared_ptr<Monster> *,std::vector<std::shared_ptr<Monster>>>::operator++(&__for_begin);
      }
    }
    EntityVisitor::~EntityVisitor((EntityVisitor *const)(v3 + 176));
    std::vector<std::shared_ptr<Monster>>::~vector((std::vector<std::shared_ptr<Monster>> *const)(v3 + 112));
    goto LABEL_114;
  }
  if ( std::vector<std::string>::size(param_vec) > 1 )
  {
    *(_DWORD *)(v3 + 64) = 0;
    v9 = std::vector<std::string>::operator[](param_vec, 1uLL);
    common::tools::StringUtils::strToNum<unsigned int>(v9, (unsigned int *)(v3 + 64), 1);
    if ( *(_BYTE *)(((unsigned __int64)&context->scene >> 3) + 0x7FFF8000) )
      __asan_report_load8(&context->scene);
    Scene::findEntity<Creature>((const Scene *const)(v3 + 80), (uint32_t)context->scene);
    if ( std::operator!=<Creature>((const std::shared_ptr<Creature> *)(v3 + 80), 0LL) )
    {
      v10 = std::__shared_ptr_access<Creature,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Creature,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 80));
      Creature::subCurHpToZero(v10, (ChangeHpContext *)(v3 + 256), 1);
    }
    std::shared_ptr<Creature>::~shared_ptr((std::shared_ptr<Creature> *const)(v3 + 80));
    goto LABEL_114;
  }
  common::milog::MiLogStream::create(
    &v57,
    &common::milog::MiLogDefault::default_log_obj_,
    3u,
    "./src/player/gm/player_gm_comp.cpp",
    "killCreature",
    1068);
  v8 = common::milog::MiLogStream::operator<<<char [15],(char *[15])0>(&v57, (const char (*)[15])"invalid param:");
  common::milog::MiLogStream::operator<<<std::string>(v8, param_vec);
  common::milog::MiLogStream::~MiLogStream(&v57);
  v6 = -1;
LABEL_115:
  ChangeHpContext::~ChangeHpContext((ChangeHpContext *const)(v3 + 256));
LABEL_116:
  result = v6;
  if ( v58 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8010) = 0LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF801C) = 0;
    *(_DWORD *)((v3 >> 3) + 0x7FFF802C) = 0;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8020) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8028) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 1110: range 0000000017BC5982-0000000017BC59EA
ForeachPolicy __cdecl killCreature(GmContext &,std::vector<std::string> const&,std::string&)::{lambda(Monster &)#1}::operator()(
        const killCreature::<lambda(Monster&)> *const __closure,
        Monster *monster)
{
  Monster *v2; // rax

  if ( Monster::getMonsterType(monster) != MONSTER_PARTNER )
  {
    v2 = monster;
    if ( *(_BYTE *)(((unsigned __int64)__closure >> 3) + 0x7FFF8000) )
      __asan_report_load8(__closure);
    Creature::subCurHpToZero(v2, __closure->__hp_context, 1);
  }
  return 0;
};

// Line 1136: range 0000000017BC59EC-0000000017BC5A90
ForeachPolicy __cdecl killCreature(GmContext &,std::vector<std::string> const&,std::string&)::{lambda(Monster &)#2}::operator()(
        const killCreature::<lambda(Monster&)>_0 *const __closure,
        Monster *monster)
{
  uint32_t MonsterId; // ecx
  Monster *v3; // rax

  MonsterId = Monster::getMonsterId(monster);
  if ( *(_BYTE *)(((unsigned __int64)__closure >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)__closure >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4(__closure);
  }
  if ( MonsterId == __closure->__monster_id )
  {
    v3 = monster;
    if ( *(_BYTE *)(((unsigned __int64)&__closure->__hp_context >> 3) + 0x7FFF8000) )
      __asan_report_load8(&__closure->__hp_context);
    Creature::subCurHpToZero(v3, __closure->__hp_context, 1);
  }
  return 0;
};

// Line 1176: range 0000000017BC5A92-0000000017BC5AFA
ForeachPolicy __cdecl killCreature(GmContext &,std::vector<std::string> const&,std::string&)::{lambda(Monster &)#3}::operator()(
        const killCreature::<lambda(Monster&)> *const __closure,
        Monster *monster)
{
  Monster *v2; // rax

  if ( Monster::getMonsterType(monster) == MONSTER_PARTNER )
  {
    v2 = monster;
    if ( *(_BYTE *)(((unsigned __int64)__closure >> 3) + 0x7FFF8000) )
      __asan_report_load8(__closure);
    Creature::subCurHpToZero(v2, __closure->__hp_context, 1);
  }
  return 0;
};

// Line 1202: range 0000000017BC5AFC-0000000017BC5BA0
ForeachPolicy __cdecl killCreature(GmContext &,std::vector<std::string> const&,std::string&)::{lambda(Monster &)#4}::operator()(
        const killCreature::<lambda(Monster&)>_0 *const __closure,
        Monster *monster)
{
  uint32_t MonsterId; // ecx
  Monster *v3; // rax

  MonsterId = Monster::getMonsterId(monster);
  if ( *(_BYTE *)(((unsigned __int64)__closure >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)__closure >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4(__closure);
  }
  if ( MonsterId == __closure->__monster_id )
  {
    v3 = monster;
    if ( *(_BYTE *)(((unsigned __int64)&__closure->__hp_context >> 3) + 0x7FFF8000) )
      __asan_report_load8(&__closure->__hp_context);
    Creature::subCurHpToZero(v3, __closure->__hp_context, 1);
  }
  return 0;
};

// Line 1219: range 0000000017BC5BA2-0000000017BC5C4D
ForeachPolicy __cdecl killCreature(GmContext &,std::vector<std::string> const&,std::string&)::{lambda(Gadget &)#5}::operator()(
        const killCreature::<lambda(Gadget&)> *const __closure,
        Gadget *gadget)
{
  uint32_t GadgetId; // ecx
  Gadget *v3; // rax

  GadgetId = Gadget::getGadgetId(gadget);
  if ( *(_BYTE *)(((unsigned __int64)__closure >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)__closure >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4(__closure);
  }
  if ( GadgetId != __closure->__gadget_id )
    return 0;
  v3 = gadget;
  if ( *(_BYTE *)(((unsigned __int64)&__closure->__hp_context >> 3) + 0x7FFF8000) )
    __asan_report_load8(&__closure->__hp_context);
  Creature::subCurHpToZero(v3, __closure->__hp_context, 1);
  return 1;
};

// Line 1236: range 0000000017D72964-0000000017D72A06
void __cdecl changeCurHpRegister::changeCurHpRegister(changeCurHpRegister *const this)
{
  std::function<int(GmContext&,const std::vector<std::string>&,std::string&)> *v1; // rax
  std::allocator<char> __a; // [rsp+1Fh] [rbp-31h] BYREF
  std::string __k; // [rsp+20h] [rbp-30h] BYREF

  std::allocator<char>::allocator(&__a);
  std::string::basic_string<std::allocator<char>>(&__k, "HP", &__a);
  v1 = std::unordered_map<std::string,std::function<int ()(GmContext &,std::vector<std::string> const&,std::string&)>>::operator[](
         &GmUtils::op_func_map[abi:cxx11],
         &__k);
  std::function<int ()(GmContext &,std::vector<std::string> const&,std::string&)>::operator=<int (&)(GmContext &,std::vector<std::string> const&,std::string&)>(
    v1,
    (int (*)(GmContext *, const std::vector<std::string> *, std::string *))changeCurHp);
  std::string::~string(&__k);
  std::allocator<char>::~allocator(&__a);
};

// Line 1237: range 0000000017BC713D-0000000017BC769F
int32_t __cdecl changeCurHp(GmContext *context, const std::vector<std::string> *param_vec, std::string *ret_msg)
{
  int32_t v3; // r14d
  unsigned __int64 v4; // r13
  __int64 v5; // rax
  _DWORD *v6; // r12
  Avatar *avatar; // r14
  uint32_t AvatarComp; // eax
  common::milog::MiLogStream *v9; // rax
  int v10; // r15d
  std::__shared_ptr_access<FormalAvatar,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v11; // r15
  int32_t result; // eax
  std::shared_ptr<Avatar> __r; // [rsp+20h] [rbp-140h] BYREF
  common::milog::MiLogStream v14; // [rsp+30h] [rbp-130h] BYREF
  char v15[272]; // [rsp+50h] [rbp-110h] BYREF

  v4 = (unsigned __int64)v15;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v5 = __asan_stack_malloc_2(224LL);
    if ( v5 )
      v4 = v5;
  }
  *(_QWORD *)v4 = 1102416563LL;
  *(_QWORD *)(v4 + 8) = "4 32 4 14 avatar_id:1253 48 4 13 delta_hp:1254 64 16 22 formal_avatar_ptr:1256 96 96 15 hp_context:1238";
  *(_QWORD *)(v4 + 16) = changeCurHp;
  v6 = (_DWORD *)(v4 >> 3);
  v6[536862720] = -235802127;
  v6[536862721] = -234556924;
  v6[536862722] = -219021312;
  v6[536862726] = -202116109;
  ChangeHpContext::ChangeHpContext((ChangeHpContext *const)(v4 + 96));
  *(_DWORD *)(v4 + 96) = 107;
  if ( *(_BYTE *)(((unsigned __int64)&context->avatar >> 3) + 0x7FFF8000) )
    __asan_report_load8(&context->avatar);
  toThisPtr<Avatar>((Avatar *)&__r);
  std::shared_ptr<Creature>::operator=<Avatar>((std::shared_ptr<Creature> *const)(v4 + 104), &__r);
  std::shared_ptr<Avatar>::~shared_ptr(&__r);
  if ( std::vector<std::string>::size(param_vec) == 1 )
  {
    *(_DWORD *)(v4 + 48) = 0;
    common::tools::StringUtils::strVecToNum<0u,float>(param_vec, (float *)(v4 + 48));
    if ( *(float *)(v4 + 48) < 0.0 )
      *(_DWORD *)(v4 + 96) = 11;
    if ( *(_BYTE *)(((unsigned __int64)&context->avatar >> 3) + 0x7FFF8000) )
      __asan_report_load8(&context->avatar);
    avatar = context->avatar;
    std::shared_ptr<FightPropNtfParam>::shared_ptr((std::shared_ptr<FightPropNtfParam> *const)&__r, 0LL);
    Creature::changeCurHp(avatar, *(float *)(v4 + 48), (ChangeHpContext *)(v4 + 96), 1, (FightPropNtfParamPtr *)&__r);
    std::shared_ptr<FightPropNtfParam>::~shared_ptr((std::shared_ptr<FightPropNtfParam> *const)&__r);
LABEL_23:
    v3 = 0;
    goto LABEL_24;
  }
  if ( std::vector<std::string>::size(param_vec) <= 1 )
  {
    common::milog::MiLogStream::create(
      &v14,
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/player/gm/player_gm_comp.cpp",
      "changeCurHp",
      1270);
    common::milog::MiLogStream::operator<<<char [15],(char *[15])0>(&v14, (const char (*)[15])"param is empty");
    common::milog::MiLogStream::~MiLogStream(&v14);
    v3 = -1;
    goto LABEL_24;
  }
  *(_DWORD *)(v4 + 32) = 0;
  *(_DWORD *)(v4 + 48) = 0;
  common::tools::StringUtils::strVecToNum<0u,unsigned int,float &>(
    param_vec,
    (unsigned int *)(v4 + 32),
    (float *)(v4 + 48),
    (float *)(v4 + 32));
  if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
    __asan_report_load8(&context->player);
  AvatarComp = (unsigned int)Player::getAvatarComp(context->player);
  PlayerAvatarComp::findFormalAvatarByAvatarId((const PlayerAvatarComp *const)(v4 + 64), AvatarComp);
  if ( std::operator==<FormalAvatar>((const std::shared_ptr<FormalAvatar> *)(v4 + 64), 0LL) )
  {
    common::milog::MiLogStream::create(
      &v14,
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/player/gm/player_gm_comp.cpp",
      "changeCurHp",
      1259);
    v9 = common::milog::MiLogStream::operator<<<char [45],(char *[45])0>(
           &v14,
           (const char (*)[45])"findFormalAvatarByAvatarId fails, avatar_id:");
    common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v9, (const unsigned int *)(v4 + 32));
    common::milog::MiLogStream::~MiLogStream(&v14);
    v3 = 104;
    v10 = 0;
  }
  else
  {
    if ( *(float *)(v4 + 48) < 0.0 )
      *(_DWORD *)(v4 + 96) = 11;
    v11 = std::__shared_ptr_access<FormalAvatar,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<FormalAvatar,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 64));
    std::shared_ptr<FightPropNtfParam>::shared_ptr((std::shared_ptr<FightPropNtfParam> *const)&__r, 0LL);
    Creature::changeCurHp(v11, *(float *)(v4 + 48), (ChangeHpContext *)(v4 + 96), 1, (FightPropNtfParamPtr *)&__r);
    std::shared_ptr<FightPropNtfParam>::~shared_ptr((std::shared_ptr<FightPropNtfParam> *const)&__r);
    v10 = 1;
  }
  std::shared_ptr<FormalAvatar>::~shared_ptr((std::shared_ptr<FormalAvatar> *const)(v4 + 64));
  if ( v10 == 1 )
    goto LABEL_23;
LABEL_24:
  ChangeHpContext::~ChangeHpContext((ChangeHpContext *const)(v4 + 96));
  result = v3;
  if ( v15 == (char *)v4 )
  {
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0LL;
    *(_DWORD *)((v4 >> 3) + 0x7FFF8008) = 0;
    *(_DWORD *)((v4 >> 3) + 0x7FFF8018) = 0;
  }
  else
  {
    *(_QWORD *)v4 = 1172321806LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v4 >> 3) + 0x7FFF8018) = -168430091;
  }
  return result;
};

// Line 1276: range 0000000017D72A08-0000000017D72AAA
void __cdecl changeStaminaRegister::changeStaminaRegister(changeStaminaRegister *const this)
{
  std::function<int(GmContext&,const std::vector<std::string>&,std::string&)> *v1; // rax
  std::allocator<char> __a; // [rsp+1Fh] [rbp-31h] BYREF
  std::string __k; // [rsp+20h] [rbp-30h] BYREF

  std::allocator<char>::allocator(&__a);
  std::string::basic_string<std::allocator<char>>(&__k, "STAMINA", &__a);
  v1 = std::unordered_map<std::string,std::function<int ()(GmContext &,std::vector<std::string> const&,std::string&)>>::operator[](
         &GmUtils::op_func_map[abi:cxx11],
         &__k);
  std::function<int ()(GmContext &,std::vector<std::string> const&,std::string&)>::operator=<int (&)(GmContext &,std::vector<std::string> const&,std::string&)>(
    v1,
    (int (*)(GmContext *, const std::vector<std::string> *, std::string *))changeStamina);
  std::string::~string(&__k);
  std::allocator<char>::~allocator(&__a);
};

// Line 1277: range 0000000017BC76A0-0000000017BC8234
int32_t __cdecl changeStamina(GmContext *context, const std::vector<std::string> *param_vec, std::string *ret_msg)
{
  __m128i v3; // xmm0
  unsigned __int64 v4; // rbx
  __int64 v5; // rax
  unsigned __int64 v6; // r13
  int32_t result; // eax
  const std::string *v8; // rax
  const std::string *v9; // rax
  PlayerGmComp *GmComp; // rax
  const std::string *v11; // rax
  PlayerGmComp *v12; // rax
  common::milog::MiLogStream *v13; // rdx
  const std::string *v14; // rax
  PlayerBasicComp *BasicComp; // rax
  const std::string *v16; // rax
  __m128i v17; // xmm0
  const std::string *v18; // rax
  common::milog::MiLogStream *v20; // rdx
  PlayerGmComp *v21; // rax
  PlayerBasicComp *v22; // rax
  Player *player; // r12
  const std::string *v24; // rax
  PlayerGmComp *v25; // rax
  PlayerBasicComp *v26; // rax
  Player *v27; // r12
  common::milog::MiLogStream *v28; // rdx
  common::milog::MiLogStream *v29; // rdx
  Avatar *avatar; // rax
  float old_max; // [rsp+24h] [rbp-DCh]
  float new_max_0; // [rsp+28h] [rbp-D8h]
  float new_max; // [rsp+2Ch] [rbp-D4h]
  StaminaChangeParam param; // [rsp+30h] [rbp-D0h] BYREF
  common::milog::MiLogStream v36; // [rsp+50h] [rbp-B0h] BYREF
  proto::PropValue prop_value; // [rsp+70h] [rbp-90h] BYREF
  char v38[96]; // [rsp+A0h] [rbp-60h] BYREF

  v4 = (unsigned __int64)v38;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v5 = __asan_stack_malloc_0(64LL);
    if ( v5 )
      v4 = v5;
  }
  *(_QWORD *)v4 = 1102416563LL;
  *(_QWORD *)(v4 + 8) = "1 32 4 10 delta:1348";
  *(_QWORD *)(v4 + 16) = changeStamina;
  v6 = v4 >> 3;
  *(_DWORD *)(v6 + 2147450880) = -235802127;
  *(_DWORD *)(v6 + 2147450884) = -202116348;
  if ( std::vector<std::string>::empty(param_vec) )
  {
    common::milog::MiLogStream::create(
      &v36,
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/player/gm/player_gm_comp.cpp",
      "changeStamina",
      1280);
    common::milog::MiLogStream::operator<<<char [17],(char *[17])0>(&v36, (const char (*)[17])"param not enough");
    common::milog::MiLogStream::~MiLogStream(&v36);
    result = -1;
    goto LABEL_58;
  }
  v8 = std::vector<std::string>::operator[](param_vec, 0LL);
  if ( std::operator==<char>(v8, "INFINITE") )
  {
    if ( std::vector<std::string>::size(param_vec) <= 1 )
    {
      common::milog::MiLogStream::create(
        &v36,
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/player/gm/player_gm_comp.cpp",
        "changeStamina",
        1287);
      common::milog::MiLogStream::operator<<<char [17],(char *[17])0>(&v36, (const char (*)[17])"param not enough");
      common::milog::MiLogStream::~MiLogStream(&v36);
      result = -1;
      goto LABEL_58;
    }
    v9 = std::vector<std::string>::operator[](param_vec, 1uLL);
    if ( std::operator==<char>(v9, stru_263521E0.gap0) )
    {
      if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
        __asan_report_load8(&context->player);
      GmComp = Player::getGmComp(context->player);
      PlayerGmComp::setIsStaminaInfinite(GmComp, 1);
      std::string::operator=(ret_msg, "stamina infinite on");
    }
    else
    {
      v11 = std::vector<std::string>::operator[](param_vec, 1uLL);
      if ( !std::operator==<char>(v11, stru_26352260.gap0) )
      {
        common::milog::MiLogStream::create(
          &v36,
          &common::milog::MiLogDefault::default_log_obj_,
          3u,
          "./src/player/gm/player_gm_comp.cpp",
          "changeStamina",
          1302);
        v13 = common::milog::MiLogStream::operator<<<char [15],(char *[15])0>(
                &v36,
                (const char (*)[15])"invalid param:");
        common::milog::MiLogStream::operator<<<std::string>(v13, param_vec);
        common::milog::MiLogStream::~MiLogStream(&v36);
        result = -1;
        goto LABEL_58;
      }
      if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
        __asan_report_load8(&context->player);
      v12 = Player::getGmComp(context->player);
      PlayerGmComp::setIsStaminaInfinite(v12, 0);
      std::string::operator=(ret_msg, "stamina infinite off");
    }
  }
  else
  {
    v14 = std::vector<std::string>::operator[](param_vec, 0LL);
    if ( std::operator==<char>(v14, off_263522E0) )
    {
      if ( std::vector<std::string>::size(param_vec) <= 1 )
      {
        common::milog::MiLogStream::create(
          &v36,
          &common::milog::MiLogDefault::default_log_obj_,
          3u,
          "./src/player/gm/player_gm_comp.cpp",
          "changeStamina",
          1310);
        common::milog::MiLogStream::operator<<<char [17],(char *[17])0>(&v36, (const char (*)[17])"param not enough");
        common::milog::MiLogStream::~MiLogStream(&v36);
        result = -1;
        goto LABEL_58;
      }
      if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
        *(double *)v3.m128i_i64 = __asan_report_load8(&context->player);
      BasicComp = Player::getBasicComp(context->player);
      *(float *)v3.m128i_i32 = PlayerBasicComp::getMaxStamina(BasicComp);
      old_max = COERCE_FLOAT(_mm_cvtsi128_si32(v3));
      v16 = std::vector<std::string>::operator[](param_vec, 1uLL);
      if ( std::operator==<char>(v16, off_26352320) )
      {
        if ( std::vector<std::string>::size(param_vec) <= 2 )
        {
          common::milog::MiLogStream::create(
            &v36,
            &common::milog::MiLogDefault::default_log_obj_,
            3u,
            "./src/player/gm/player_gm_comp.cpp",
            "changeStamina",
            1319);
          common::milog::MiLogStream::operator<<<char [17],(char *[17])0>(&v36, (const char (*)[17])"param not enough");
          common::milog::MiLogStream::~MiLogStream(&v36);
          result = -1;
          goto LABEL_58;
        }
        v17 = 0LL;
        *(_DWORD *)(v4 + 32) = 0;
        v18 = std::vector<std::string>::operator[](param_vec, 2uLL);
        if ( common::tools::StringUtils::strToNum<float>(v18, (float *)(v4 + 32), 1)
          || (v17 = 0LL, *(float *)(v4 + 32) <= 0.0) )
        {
          common::milog::MiLogStream::create(
            &v36,
            &common::milog::MiLogDefault::default_log_obj_,
            3u,
            "./src/player/gm/player_gm_comp.cpp",
            "changeStamina",
            1325);
          v20 = common::milog::MiLogStream::operator<<<char [15],(char *[15])0>(
                  &v36,
                  (const char (*)[15])"invalid param:");
          common::milog::MiLogStream::operator<<<std::string>(v20, param_vec);
          common::milog::MiLogStream::~MiLogStream(&v36);
          result = -1;
          goto LABEL_58;
        }
        if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
          *(double *)v17.m128i_i64 = __asan_report_load8(&context->player);
        v21 = Player::getGmComp(context->player);
        PlayerGmComp::setGmSetValue<float>(v21, 0xAu, (const float *)(v4 + 32));
        if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
          *(double *)v17.m128i_i64 = __asan_report_load8(&context->player);
        v22 = Player::getBasicComp(context->player);
        *(float *)v17.m128i_i32 = PlayerBasicComp::getMaxStamina(v22);
        new_max = COERCE_FLOAT(_mm_cvtsi128_si32(v17));
        if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
          __asan_report_load8(&context->player);
        player = context->player;
        buildHundredIntProp(&prop_value, 0x271Au, new_max);
        Player::notifyPlayerProp(player, &prop_value);
        proto::PropValue::~PropValue(&prop_value);
        if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
          __asan_report_load8(&context->player);
        Player::notifyPlayerPropChange(context->player, PROP_MAX_STAMINA, old_max, new_max, PROP_CHANGE_GM);
      }
      else
      {
        v24 = std::vector<std::string>::operator[](param_vec, 1uLL);
        if ( !std::operator==<char>(v24, "CLEAR") )
        {
          common::milog::MiLogStream::create(
            &v36,
            &common::milog::MiLogDefault::default_log_obj_,
            3u,
            "./src/player/gm/player_gm_comp.cpp",
            "changeStamina",
            1342);
          v28 = common::milog::MiLogStream::operator<<<char [15],(char *[15])0>(
                  &v36,
                  (const char (*)[15])"invalid param:");
          common::milog::MiLogStream::operator<<<std::string>(v28, param_vec);
          common::milog::MiLogStream::~MiLogStream(&v36);
          result = -1;
          goto LABEL_58;
        }
        if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
          *(double *)v3.m128i_i64 = __asan_report_load8(&context->player);
        v25 = Player::getGmComp(context->player);
        PlayerGmComp::clearSetValue<float>(v25, 0xAu);
        if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
          *(double *)v3.m128i_i64 = __asan_report_load8(&context->player);
        v26 = Player::getBasicComp(context->player);
        *(float *)v3.m128i_i32 = PlayerBasicComp::getMaxStamina(v26);
        new_max_0 = COERCE_FLOAT(_mm_cvtsi128_si32(v3));
        if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
          __asan_report_load8(&context->player);
        v27 = context->player;
        buildHundredIntProp(&prop_value, 0x271Au, new_max_0);
        Player::notifyPlayerProp(v27, &prop_value);
        proto::PropValue::~PropValue(&prop_value);
        if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
          __asan_report_load8(&context->player);
        Player::notifyPlayerPropChange(context->player, PROP_MAX_STAMINA, old_max, new_max_0, PROP_CHANGE_GM);
      }
    }
    else
    {
      *(_DWORD *)(v4 + 32) = 0;
      if ( common::tools::StringUtils::strVecToNum<0u,float>(param_vec, (float *)(v4 + 32)) )
      {
        common::milog::MiLogStream::create(
          &v36,
          &common::milog::MiLogDefault::default_log_obj_,
          3u,
          "./src/player/gm/player_gm_comp.cpp",
          "changeStamina",
          1351);
        v29 = common::milog::MiLogStream::operator<<<char [15],(char *[15])0>(
                &v36,
                (const char (*)[15])"invalid param:");
        common::milog::MiLogStream::operator<<<std::string>(v29, param_vec);
        common::milog::MiLogStream::~MiLogStream(&v36);
        result = -1;
        goto LABEL_58;
      }
      if ( *(_BYTE *)(((unsigned __int64)&context->avatar >> 3) + 0x7FFF8000) )
        __asan_report_load8(&context->avatar);
      avatar = context->avatar;
      memset(&param, 0, sizeof(param));
      Avatar::changeStamina(avatar, *(float *)(v4 + 32), &param, 0);
    }
  }
  result = 0;
LABEL_58:
  if ( v38 == (char *)v4 )
  {
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0LL;
  }
  else
  {
    *(_QWORD *)v4 = 1172321806LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 1359: range 0000000017D72AAC-0000000017D72B4E
void __cdecl procEnergyRegister::procEnergyRegister(procEnergyRegister *const this)
{
  std::function<int(GmContext&,const std::vector<std::string>&,std::string&)> *v1; // rax
  std::allocator<char> __a; // [rsp+1Fh] [rbp-31h] BYREF
  std::string __k; // [rsp+20h] [rbp-30h] BYREF

  std::allocator<char>::allocator(&__a);
  std::string::basic_string<std::allocator<char>>(&__k, "ENERGY", &__a);
  v1 = std::unordered_map<std::string,std::function<int ()(GmContext &,std::vector<std::string> const&,std::string&)>>::operator[](
         &GmUtils::op_func_map[abi:cxx11],
         &__k);
  std::function<int ()(GmContext &,std::vector<std::string> const&,std::string&)>::operator=<int (&)(GmContext &,std::vector<std::string> const&,std::string&)>(
    v1,
    (int (*)(GmContext *, const std::vector<std::string> *, std::string *))procEnergy);
  std::string::~string(&__k);
  std::allocator<char>::~allocator(&__a);
};

// Line 1360: range 0000000017BC842A-0000000017BC8988
int32_t __cdecl procEnergy(GmContext *context, const std::vector<std::string> *param_vec, std::string *ret_msg)
{
  unsigned __int64 v3; // rbx
  __int64 v4; // rax
  _DWORD *v5; // r12
  int32_t result; // eax
  const std::string *v7; // rax
  const std::string *v8; // rax
  PlayerGmComp *GmComp; // rax
  PlayerAvatarComp *AvatarComp; // r13
  const std::string *v11; // rax
  PlayerGmComp *v12; // rax
  common::milog::MiLogStream *v13; // rdx
  common::milog::MiLogStream *v14; // rdx
  Avatar *avatar; // r14
  std::shared_ptr<FightPropNtfParam> p_param_ptr; // [rsp+20h] [rbp-C0h] BYREF
  common::milog::MiLogStream v18; // [rsp+30h] [rbp-B0h] BYREF
  char v19[144]; // [rsp+50h] [rbp-90h] BYREF

  v3 = (unsigned __int64)v19;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_1(96LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "2 48 4 14 elem_type:1396 64 4 10 delta:1397";
  *(_QWORD *)(v3 + 16) = procEnergy;
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = -234556943;
  v5[536862722] = -202116348;
  if ( std::vector<std::string>::size(param_vec) <= 1 )
  {
    common::milog::MiLogStream::create(
      &v18,
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/player/gm/player_gm_comp.cpp",
      "procEnergy",
      1363);
    common::milog::MiLogStream::operator<<<char [17],(char *[17])0>(&v18, (const char (*)[17])"param not enough");
    common::milog::MiLogStream::~MiLogStream(&v18);
    result = -1;
    goto LABEL_24;
  }
  v7 = std::vector<std::string>::operator[](param_vec, 0LL);
  if ( std::operator==<char>(v7, "INFINITE") )
  {
    v8 = std::vector<std::string>::operator[](param_vec, 1uLL);
    if ( std::operator==<char>(v8, stru_263521E0.gap0) )
    {
      if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
        __asan_report_load8(&context->player);
      GmComp = Player::getGmComp(context->player);
      PlayerGmComp::setIsEnergyInfinite(GmComp, 1);
      std::string::operator=(ret_msg, "energy infinite on");
      if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
        __asan_report_load8(&context->player);
      AvatarComp = Player::getAvatarComp(context->player);
      std::function<ForeachPolicy ()(Avatar &)>::function<procEnergy(GmContext &,std::vector<std::string> const&,std::string&)::{lambda(Avatar &)#1},void,void>(
        (std::function<ForeachPolicy(Avatar&)> *const)&v18,
        (procEnergy::<lambda(Avatar&)>)context);
      PlayerAvatarComp::foreachMyAvatarInSceneTeam(AvatarComp, (std::function<ForeachPolicy(Avatar&)> *)&v18);
      std::function<ForeachPolicy ()(Avatar &)>::~function((std::function<ForeachPolicy(Avatar&)> *const)&v18);
    }
    else
    {
      v11 = std::vector<std::string>::operator[](param_vec, 1uLL);
      if ( !std::operator==<char>(v11, stru_26352260.gap0) )
      {
        common::milog::MiLogStream::create(
          &v18,
          &common::milog::MiLogDefault::default_log_obj_,
          3u,
          "./src/player/gm/player_gm_comp.cpp",
          "procEnergy",
          1390);
        v13 = common::milog::MiLogStream::operator<<<char [15],(char *[15])0>(
                &v18,
                (const char (*)[15])"invalid param:");
        common::milog::MiLogStream::operator<<<std::string>(v13, param_vec);
        common::milog::MiLogStream::~MiLogStream(&v18);
        result = -1;
        goto LABEL_24;
      }
      if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
        __asan_report_load8(&context->player);
      v12 = Player::getGmComp(context->player);
      PlayerGmComp::setIsEnergyInfinite(v12, 0);
      std::string::operator=(ret_msg, "energy infinite off");
    }
  }
  else
  {
    *(_DWORD *)(v3 + 48) = 0;
    *(_DWORD *)(v3 + 64) = 0;
    if ( common::tools::StringUtils::strVecToNum<0u,int,float &>(
           param_vec,
           (int *)(v3 + 48),
           (float *)(v3 + 64),
           (float *)(v3 + 48)) )
    {
      common::milog::MiLogStream::create(
        &v18,
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/player/gm/player_gm_comp.cpp",
        "procEnergy",
        1400);
      v14 = common::milog::MiLogStream::operator<<<char [15],(char *[15])0>(&v18, (const char (*)[15])"invalid param:");
      common::milog::MiLogStream::operator<<<std::string>(v14, param_vec);
      common::milog::MiLogStream::~MiLogStream(&v18);
      result = -1;
      goto LABEL_24;
    }
    if ( *(_BYTE *)(((unsigned __int64)&context->avatar >> 3) + 0x7FFF8000) )
      __asan_report_load8(&context->avatar);
    avatar = context->avatar;
    std::shared_ptr<FightPropNtfParam>::shared_ptr(&p_param_ptr, 0LL);
    Creature::changeCurEnergy(avatar, *(float *)(v3 + 64), 1, &p_param_ptr);
    std::shared_ptr<FightPropNtfParam>::~shared_ptr(&p_param_ptr);
  }
  result = 0;
LABEL_24:
  if ( v19 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8008) = 0;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8008) = -168430091;
  }
  return result;
};

// Line 1372: range 0000000017BC8236-0000000017BC8429
ForeachPolicy __cdecl procEnergy(GmContext &,std::vector<std::string> const&,std::string&)::{lambda(Avatar &)#1}::operator()(
        const procEnergy::<lambda(Avatar&)> *const __closure,
        Avatar *avatar)
{
  __m128i v2; // xmm0
  unsigned __int64 v3; // rbx
  __int64 v4; // rax
  unsigned __int64 v5; // r13
  std::__shared_ptr_access<FormalAvatar,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v6; // rax
  FightPropComp *FightPropComp; // rax
  std::__shared_ptr_access<FormalAvatar,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v8; // rax
  FightPropComp *v9; // r14
  ForeachPolicy result; // eax
  std::shared_ptr<FightPropNtfParam> p_param_ptr; // [rsp+20h] [rbp-80h] BYREF
  char v12[112]; // [rsp+30h] [rbp-70h] BYREF

  v3 = (unsigned __int64)v12;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_0(64LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "1 32 16 22 formal_avatar_ptr:1374";
  *(_QWORD *)(v3 + 16) = procEnergy(GmContext &,std::vector<std::string> const&,std::string&)::{lambda(Avatar &)#1}::operator();
  v5 = v3 >> 3;
  *(_DWORD *)(v5 + 2147450880) = -235802127;
  *(_DWORD *)(v5 + 2147450884) = -202178560;
  if ( *(_BYTE *)(((unsigned __int64)__closure >> 3) + 0x7FFF8000) )
    *(double *)v2.m128i_i64 = __asan_report_load8(__closure);
  if ( *(_BYTE *)(((unsigned __int64)&__closure->__context->avatar >> 3) + 0x7FFF8000) )
    *(double *)v2.m128i_i64 = __asan_report_load8(&__closure->__context->avatar);
  toPtr<FormalAvatar,Avatar>((Avatar *)(v3 + 32));
  if ( std::operator!=<FormalAvatar>(0LL, (const std::shared_ptr<FormalAvatar> *)(v3 + 32)) )
  {
    v6 = std::__shared_ptr_access<FormalAvatar,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<FormalAvatar,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 32));
    FightPropComp = Creature::getFightPropComp(v6);
    *(float *)v2.m128i_i32 = FightPropComp::getMaxEnergy(FightPropComp);
    v8 = std::__shared_ptr_access<FormalAvatar,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<FormalAvatar,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 32));
    v9 = Creature::getFightPropComp(v8);
    std::shared_ptr<FightPropNtfParam>::shared_ptr(&p_param_ptr, 0LL);
    FightPropComp::setCurEnergy(v9, COERCE_FLOAT(_mm_cvtsi128_si32(v2)), 1, &p_param_ptr);
    std::shared_ptr<FightPropNtfParam>::~shared_ptr(&p_param_ptr);
  }
  std::shared_ptr<FormalAvatar>::~shared_ptr((std::shared_ptr<FormalAvatar> *const)(v3 + 32));
  result = FOREACH_CONTINUE;
  if ( v12 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 1408: range 0000000017D72B50-0000000017D72BF2
void __cdecl createMonsterRegister::createMonsterRegister(createMonsterRegister *const this)
{
  std::function<int(GmContext&,const std::vector<std::string>&,std::string&)> *v1; // rax
  std::allocator<char> __a; // [rsp+1Fh] [rbp-31h] BYREF
  std::string __k; // [rsp+20h] [rbp-30h] BYREF

  std::allocator<char>::allocator(&__a);
  std::string::basic_string<std::allocator<char>>(&__k, "MONSTER", &__a);
  v1 = std::unordered_map<std::string,std::function<int ()(GmContext &,std::vector<std::string> const&,std::string&)>>::operator[](
         &GmUtils::op_func_map[abi:cxx11],
         &__k);
  std::function<int ()(GmContext &,std::vector<std::string> const&,std::string&)>::operator=<int (&)(GmContext &,std::vector<std::string> const&,std::string&)>(
    v1,
    (int (*)(GmContext *, const std::vector<std::string> *, std::string *))createMonster);
  std::string::~string(&__k);
  std::allocator<char>::~allocator(&__a);
};

// Line 1409: range 0000000017BC8989-0000000017BCA3ED
int32_t __cdecl createMonster(GmContext *context, const std::vector<std::string> *param_vec, std::string *ret_msg)
{
  int32_t v3; // r14d
  unsigned __int64 v4; // r13
  __int64 v5; // rax
  _DWORD *v6; // r12
  const std::string *v7; // rax
  const std::string *v9; // rax
  const std::string *v10; // rax
  std::__shared_ptr_access<Monster,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v11; // rax
  common::milog::MiLogStream *v12; // rax
  common::milog::MiLogStream *v13; // rax
  common::milog::MiLogStream *v14; // rax
  const std::string *v15; // rax
  __gnu_cxx::__normal_iterator<std::string*,std::vector<std::string> >::pointer v16; // rax
  const std::string *v17; // rax
  __gnu_cxx::__normal_iterator<std::string*,std::vector<std::string> >::pointer v18; // rax
  const std::string *v19; // rax
  __gnu_cxx::__normal_iterator<std::string*,std::vector<std::string> >::pointer v20; // rax
  std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v21; // rax
  bool v22; // r15
  const std::string *v23; // rax
  __gnu_cxx::__normal_iterator<std::string*,std::vector<std::string> >::pointer v24; // rax
  std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v25; // rax
  bool v26; // r15
  std::string *M_current; // r15
  std::vector<std::string>::iterator v28; // rax
  const std::string *v29; // rax
  common::milog::MiLogStream *v30; // rax
  std::string *v31; // r15
  std::vector<std::string>::iterator v32; // rax
  std::vector<std::string>::iterator v33; // rax
  const std::string *v34; // rax
  common::milog::MiLogStream *v36; // rax
  common::milog::MiLogStream *v37; // rax
  const std::string *v38; // rax
  common::milog::MiLogStream *v40; // rax
  const std::string *v41; // rax
  common::milog::MiLogStream *v42; // rax
  common::milog::MiLogStream *v43; // rax
  common::milog::MiLogStream *v44; // rax
  common::milog::MiLogStream *v45; // rax
  unsigned __int64 Position; // rax
  const std::string *v47; // rax
  common::milog::MiLogStream *v48; // rax
  const std::string *v49; // rax
  common::milog::MiLogStream *v50; // rax
  const std::string *v51; // rax
  common::milog::MiLogStream *v52; // rax
  const std::string *v53; // rax
  common::milog::MiLogStream *v54; // r14
  const std::string *v55; // rax
  PlayerBasicComp *BasicComp; // rax
  common::milog::MiLogStream *v57; // rax
  int v58; // r15d
  std::__shared_ptr_access<Monster,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v59; // rax
  unsigned __int64 v60; // rdx
  void (__fastcall *v61)(std::__shared_ptr_access<Monster,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *, Scene *, VisionContext *); // r8
  std::__shared_ptr_access<Monster,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v62; // rax
  std::__shared_ptr_access<Monster,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v63; // rax
  FightPropComp *FightPropComp; // rax
  PileBoolValue *IsInvincible; // r15
  PlayerGmComp *GmComp; // rax
  bool IsMonsterInvincible; // al
  int32_t result; // eax
  bool v69; // [rsp+17h] [rbp-3C9h]
  bool v70; // [rsp+17h] [rbp-3C9h]
  bool v71; // [rsp+17h] [rbp-3C9h]
  bool is_elite; // [rsp+3Bh] [rbp-3A5h]
  uint32_t i; // [rsp+3Ch] [rbp-3A4h]
  size_t idx; // [rsp+40h] [rbp-3A0h]
  size_t affix_flag_idx; // [rsp+48h] [rbp-398h]
  common::milog::MiLogStream v77; // [rsp+50h] [rbp-390h] BYREF
  char v78[880]; // [rsp+70h] [rbp-370h] BYREF

  v4 = (unsigned __int64)v78;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v5 = __asan_stack_malloc_4(832LL);
    if ( v5 )
      v4 = v5;
  }
  *(_QWORD *)v4 = 1102416563LL;
  *(_QWORD *)(v4 + 8) = "15 32 4 12 drop_id:1433 48 4 20 special_name_id:1435 64 4 13 title_id:1436 80 4 15 monster_id:15"
                        "08 96 4 8 num:1519 112 4 10 level:1532 128 4 14 init_pose:1540 144 4 10 affix:1589 160 8 15 elit"
                        "e_iter:1495 192 8 15 affix_iter:1516 224 12 8 pos:1552 256 16 16 monster_ptr:1604 288 24 18 new_"
                        "param_vec:1438 352 32 13 drop_tag:1434 416 352 18 monster_param:1577";
  *(_QWORD *)(v4 + 16) = createMonster;
  v6 = (_DWORD *)(v4 >> 3);
  v6[536862720] = -235802127;
  v6[536862721] = -234556924;
  v6[536862722] = -234556924;
  v6[536862723] = -234556924;
  v6[536862724] = -234556924;
  v6[536862725] = -218959360;
  v6[536862726] = -218959360;
  v6[536862727] = -219020288;
  v6[536862728] = -219021312;
  v6[536862729] = -234881024;
  v6[536862730] = -218959118;
  v6[536862732] = -218959118;
  v6[536862744] = -202116109;
  v6[536862745] = -202116109;
  if ( std::vector<std::string>::empty(param_vec) )
  {
    common::milog::MiLogStream::create(
      &v77,
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/player/gm/player_gm_comp.cpp",
      "createMonster",
      1412);
    common::milog::MiLogStream::operator<<<char [17],(char *[17])0>(&v77, (const char (*)[17])"param not enough");
    common::milog::MiLogStream::~MiLogStream(&v77);
    v3 = -1;
    goto LABEL_116;
  }
  if ( std::vector<std::string>::size(param_vec) > 2 )
  {
    v7 = std::vector<std::string>::operator[](param_vec, 0LL);
    if ( std::operator==<char>(v7, "HP") )
    {
      *(_DWORD *)(v4 + 128) = 0;
      v9 = std::vector<std::string>::operator[](param_vec, 1uLL);
      common::tools::StringUtils::strToNum<unsigned int>(v9, (unsigned int *)(v4 + 128), 1);
      *(_DWORD *)(v4 + 144) = 0;
      v10 = std::vector<std::string>::operator[](param_vec, 2uLL);
      common::tools::StringUtils::strToNum<float>(v10, (float *)(v4 + 144), 1);
      if ( *(_BYTE *)(((unsigned __int64)&context->scene >> 3) + 0x7FFF8000) )
        __asan_report_load8(&context->scene);
      Scene::findEntity<Monster>((const Scene *const)(v4 + 256), (uint32_t)context->scene);
      if ( std::operator==<Monster>(0LL, (const std::shared_ptr<Monster> *)(v4 + 256)) )
      {
        std::string::operator=(ret_msg, "monster not exist");
        v3 = -1;
      }
      else
      {
        v11 = std::__shared_ptr_access<Monster,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Monster,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 256));
        Creature::setCurHp(v11, *(float *)(v4 + 144), 1);
        common::milog::MiLogStream::create(
          &v77,
          &common::milog::MiLogDefault::default_log_obj_,
          1u,
          "./src/player/gm/player_gm_comp.cpp",
          "createMonster",
          1429);
        v12 = common::milog::MiLogStream::operator<<<char [26],(char *[26])0>(
                &v77,
                (const char (*)[26])"gm set monster entity_id=");
        v13 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                v12,
                (const unsigned int *)(v4 + 128));
        v14 = common::milog::MiLogStream::operator<<<char [5],(char *[5])0>(v13, (const char (*)[5])" hp=");
        common::milog::MiLogStream::operator<<<float,(float *)0>(v14, (const float *)(v4 + 144));
        common::milog::MiLogStream::~MiLogStream(&v77);
        v3 = 0;
      }
      std::shared_ptr<Monster>::~shared_ptr((std::shared_ptr<Monster> *const)(v4 + 256));
      goto LABEL_116;
    }
  }
  *(_DWORD *)(v4 + 32) = 0;
  std::string::basic_string(v4 + 352);
  *(_DWORD *)(v4 + 48) = 0;
  *(_DWORD *)(v4 + 64) = 0;
  std::vector<std::string>::vector((std::vector<std::string> *const)(v4 + 288), param_vec);
  *(std::vector<std::string>::iterator *)(v4 + 160) = std::vector<std::string>::begin((std::vector<std::string> *const)(v4 + 288));
  while ( 1 )
  {
    *(std::vector<std::string>::iterator *)(v4 + 192) = std::vector<std::string>::end((std::vector<std::string> *const)(v4 + 288));
    if ( !__gnu_cxx::operator!=<std::string *,std::vector<std::string>>(
            (const __gnu_cxx::__normal_iterator<std::string*,std::vector<std::string> > *)(v4 + 160),
            (const __gnu_cxx::__normal_iterator<std::string*,std::vector<std::string> > *)(v4 + 192)) )
      break;
    v15 = __gnu_cxx::__normal_iterator<std::string *,std::vector<std::string>>::operator*((const __gnu_cxx::__normal_iterator<std::string*,std::vector<std::string> > *const)(v4 + 160));
    if ( common::tools::StringUtils::isStartsWith(v15, "DROP_ID=") )
    {
      v16 = __gnu_cxx::__normal_iterator<std::string *,std::vector<std::string>>::operator->((const __gnu_cxx::__normal_iterator<std::string*,std::vector<std::string> > *const)(v4 + 160));
      std::string::substr(&v77, v16, 8LL, -1LL);
      v69 = common::tools::StringUtils::strToNum<unsigned int>((const std::string *)&v77, (unsigned int *)(v4 + 32), 1)
         || !*(_DWORD *)(v4 + 32);
      std::string::~string(&v77);
      if ( v69 )
      {
        std::string::operator=(ret_msg, &unk_26352780);
        v3 = -1;
        goto LABEL_115;
      }
      goto LABEL_50;
    }
    v17 = __gnu_cxx::__normal_iterator<std::string *,std::vector<std::string>>::operator*((const __gnu_cxx::__normal_iterator<std::string*,std::vector<std::string> > *const)(v4 + 160));
    if ( common::tools::StringUtils::isStartsWith(v17, "DROP_TAG=") )
    {
      v18 = __gnu_cxx::__normal_iterator<std::string *,std::vector<std::string>>::operator->((const __gnu_cxx::__normal_iterator<std::string*,std::vector<std::string> > *const)(v4 + 160));
      std::string::substr(&v77, v18, 9LL, -1LL);
      std::string::operator=(v4 + 352, &v77);
      std::string::~string(&v77);
      if ( (unsigned __int8)std::string::empty(v4 + 352) )
      {
        std::string::operator=(ret_msg, &unk_26352800);
        v3 = -1;
        goto LABEL_115;
      }
      goto LABEL_50;
    }
    v19 = __gnu_cxx::__normal_iterator<std::string *,std::vector<std::string>>::operator*((const __gnu_cxx::__normal_iterator<std::string*,std::vector<std::string> > *const)(v4 + 160));
    if ( common::tools::StringUtils::isStartsWith(v19, "SPECIAL_NAME_ID=") )
    {
      v20 = __gnu_cxx::__normal_iterator<std::string *,std::vector<std::string>>::operator->((const __gnu_cxx::__normal_iterator<std::string*,std::vector<std::string> > *const)(v4 + 160));
      std::string::substr(&v77, v20, 16LL, -1LL);
      v70 = common::tools::StringUtils::strToNum<unsigned int>((const std::string *)&v77, (unsigned int *)(v4 + 48), 1)
         || !*(_DWORD *)(v4 + 48);
      std::string::~string(&v77);
      if ( v70 )
      {
        std::string::operator=(ret_msg, &unk_26352880);
        v3 = -1;
        goto LABEL_115;
      }
      ServiceBox::findService<GameserverService>();
      GameserverService::getConfig((GameserverService *const)(v4 + 256));
      v21 = std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 256));
      v22 = !common::tools::MiscUtils::isContains<std::unordered_map<unsigned int,data::MonsterSpecialNameExcelConfig> const,unsigned int>(
               &v21->design_config.txt_config_mgr.monster_config_mgr.monster_special_name_excel_config_map,
               (const unsigned int *)(v4 + 48));
      std::shared_ptr<Config>::~shared_ptr((std::shared_ptr<Config> *const)(v4 + 256));
      if ( v22 )
      {
        std::string::operator=(ret_msg, &unk_263528C0);
        v3 = -1;
        goto LABEL_115;
      }
      goto LABEL_50;
    }
    v23 = __gnu_cxx::__normal_iterator<std::string *,std::vector<std::string>>::operator*((const __gnu_cxx::__normal_iterator<std::string*,std::vector<std::string> > *const)(v4 + 160));
    if ( common::tools::StringUtils::isStartsWith(v23, "TITLE_ID=") )
    {
      v24 = __gnu_cxx::__normal_iterator<std::string *,std::vector<std::string>>::operator->((const __gnu_cxx::__normal_iterator<std::string*,std::vector<std::string> > *const)(v4 + 160));
      std::string::substr(&v77, v24, 9LL, -1LL);
      v71 = common::tools::StringUtils::strToNum<unsigned int>((const std::string *)&v77, (unsigned int *)(v4 + 64), 1)
         || !*(_DWORD *)(v4 + 64);
      std::string::~string(&v77);
      if ( v71 )
      {
        std::string::operator=(ret_msg, &unk_26352960);
        v3 = -1;
        goto LABEL_115;
      }
      ServiceBox::findService<GameserverService>();
      GameserverService::getConfig((GameserverService *const)(v4 + 256));
      v25 = std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 256));
      v26 = !common::tools::MiscUtils::isContains<std::unordered_map<unsigned int,data::MonsterTitleExcelConfig> const,unsigned int>(
               &v25->design_config.txt_config_mgr.monster_config_mgr.monster_title_excel_config_map,
               (const unsigned int *)(v4 + 64));
      std::shared_ptr<Config>::~shared_ptr((std::shared_ptr<Config> *const)(v4 + 256));
      if ( v26 )
      {
        std::string::operator=(ret_msg, &unk_263529A0);
        v3 = -1;
        goto LABEL_115;
      }
LABEL_50:
      __gnu_cxx::__normal_iterator<std::string const*,std::vector<std::string>>::__normal_iterator<std::string*>(
        (__gnu_cxx::__normal_iterator<const std::string*,std::vector<std::string> > *const)(v4 + 192),
        (const __gnu_cxx::__normal_iterator<std::string*,std::vector<std::string> > *)(v4 + 160));
      *(std::vector<std::string>::iterator *)(v4 + 160) = std::vector<std::string>::erase(
                                                            (std::vector<std::string> *const)(v4 + 288),
                                                            *(std::vector<std::string>::const_iterator *)(v4 + 192));
    }
    else
    {
      __gnu_cxx::__normal_iterator<std::string *,std::vector<std::string>>::operator++((__gnu_cxx::__normal_iterator<std::string*,std::vector<std::string> > *const)(v4 + 160));
    }
  }
  M_current = std::vector<std::string>::end((std::vector<std::string> *const)(v4 + 288))._M_current;
  v28._M_current = std::vector<std::string>::begin((std::vector<std::string> *const)(v4 + 288))._M_current;
  *(__gnu_cxx::__normal_iterator<std::string*,std::vector<std::string> > *)(v4 + 160) = std::find<__gnu_cxx::__normal_iterator<std::string *,std::vector<std::string>>,char [3]>(
                                                                                          v28,
                                                                                          (__gnu_cxx::__normal_iterator<std::string*,std::vector<std::string> >)M_current,
                                                                                          (const char (*)[3])"-E");
  is_elite = 0;
  *(std::vector<std::string>::iterator *)(v4 + 192) = std::vector<std::string>::end((std::vector<std::string> *const)(v4 + 288));
  if ( __gnu_cxx::operator!=<std::string *,std::vector<std::string>>(
         (const __gnu_cxx::__normal_iterator<std::string*,std::vector<std::string> > *)(v4 + 160),
         (const __gnu_cxx::__normal_iterator<std::string*,std::vector<std::string> > *)(v4 + 192)) )
  {
    is_elite = 1;
    __gnu_cxx::__normal_iterator<std::string const*,std::vector<std::string>>::__normal_iterator<std::string*>(
      (__gnu_cxx::__normal_iterator<const std::string*,std::vector<std::string> > *const)(v4 + 192),
      (const __gnu_cxx::__normal_iterator<std::string*,std::vector<std::string> > *)(v4 + 160));
    std::vector<std::string>::erase(
      (std::vector<std::string> *const)(v4 + 288),
      *(std::vector<std::string>::const_iterator *)(v4 + 192));
  }
  if ( std::vector<std::string>::empty((const std::vector<std::string> *const)(v4 + 288)) )
  {
    common::milog::MiLogStream::create(
      &v77,
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/player/gm/player_gm_comp.cpp",
      "createMonster",
      1505);
    common::milog::MiLogStream::operator<<<char [17],(char *[17])0>(&v77, (const char (*)[17])"param not enough");
    common::milog::MiLogStream::~MiLogStream(&v77);
    v3 = -1;
    goto LABEL_115;
  }
  *(_DWORD *)(v4 + 80) = 0;
  v29 = std::vector<std::string>::operator[]((std::vector<std::string> *const)(v4 + 288), 0LL);
  if ( common::tools::StringUtils::strToNum<unsigned int>(v29, (unsigned int *)(v4 + 80), 1) )
  {
    common::milog::MiLogStream::create(
      &v77,
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/player/gm/player_gm_comp.cpp",
      "createMonster",
      1511);
    v30 = common::milog::MiLogStream::operator<<<char [15],(char *[15])0>(&v77, (const char (*)[15])"invalid param:");
    common::milog::MiLogStream::operator<<<std::string>(v30, (const std::vector<std::string> *)(v4 + 288));
    common::milog::MiLogStream::~MiLogStream(&v77);
    v3 = -1;
    goto LABEL_115;
  }
  v31 = std::vector<std::string>::end((std::vector<std::string> *const)(v4 + 288))._M_current;
  v32._M_current = std::vector<std::string>::begin((std::vector<std::string> *const)(v4 + 288))._M_current;
  *(__gnu_cxx::__normal_iterator<std::string*,std::vector<std::string> > *)(v4 + 192) = std::find<__gnu_cxx::__normal_iterator<std::string *,std::vector<std::string>>,char [3]>(
                                                                                          v32,
                                                                                          (__gnu_cxx::__normal_iterator<std::string*,std::vector<std::string> >)v31,
                                                                                          (const char (*)[3])"-X");
  v33._M_current = std::vector<std::string>::begin((std::vector<std::string> *const)(v4 + 288))._M_current;
  affix_flag_idx = std::distance<__gnu_cxx::__normal_iterator<std::string *,std::vector<std::string>>>(
                     v33,
                     *(__gnu_cxx::__normal_iterator<std::string*,std::vector<std::string> > *)(v4 + 192));
  *(_DWORD *)(v4 + 96) = 1;
  if ( affix_flag_idx > 1 )
  {
    v34 = std::vector<std::string>::operator[]((std::vector<std::string> *const)(v4 + 288), 1uLL);
    if ( common::tools::StringUtils::strToNum<unsigned int>(v34, (unsigned int *)(v4 + 96), 1) )
    {
      common::milog::MiLogStream::create(
        &v77,
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/player/gm/player_gm_comp.cpp",
        "createMonster",
        1524);
      v36 = common::milog::MiLogStream::operator<<<char [15],(char *[15])0>(&v77, (const char (*)[15])"invalid param:");
      common::milog::MiLogStream::operator<<<std::string>(v36, (const std::vector<std::string> *)(v4 + 288));
      common::milog::MiLogStream::~MiLogStream(&v77);
      v3 = -1;
      goto LABEL_115;
    }
  }
  if ( *(_DWORD *)(v4 + 96) > 0x14u )
  {
    common::milog::MiLogStream::create(
      &v77,
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/player/gm/player_gm_comp.cpp",
      "createMonster",
      1529);
    v37 = common::milog::MiLogStream::operator<<<char [23],(char *[23])0>(
            &v77,
            (const char (*)[23])"monster num too large:");
    common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v37, (const unsigned int *)(v4 + 96));
    common::milog::MiLogStream::~MiLogStream(&v77);
    v3 = -1;
    goto LABEL_115;
  }
  *(_DWORD *)(v4 + 112) = 1;
  if ( affix_flag_idx > 2 )
  {
    v38 = std::vector<std::string>::operator[]((std::vector<std::string> *const)(v4 + 288), 2uLL);
    if ( common::tools::StringUtils::strToNum<unsigned int>(v38, (unsigned int *)(v4 + 112), 1) )
    {
      common::milog::MiLogStream::create(
        &v77,
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/player/gm/player_gm_comp.cpp",
        "createMonster",
        1537);
      v40 = common::milog::MiLogStream::operator<<<char [15],(char *[15])0>(&v77, (const char (*)[15])"invalid param:");
      common::milog::MiLogStream::operator<<<std::string>(v40, (const std::vector<std::string> *)(v4 + 288));
      common::milog::MiLogStream::~MiLogStream(&v77);
      v3 = -1;
      goto LABEL_115;
    }
  }
  *(_DWORD *)(v4 + 128) = 0;
  if ( affix_flag_idx > 3 )
  {
    v41 = std::vector<std::string>::operator[]((std::vector<std::string> *const)(v4 + 288), 3uLL);
    if ( common::tools::StringUtils::strToNum<unsigned int>(v41, (unsigned int *)(v4 + 128), 1) )
    {
      common::milog::MiLogStream::create(
        &v77,
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/player/gm/player_gm_comp.cpp",
        "createMonster",
        1547);
      v42 = common::milog::MiLogStream::operator<<<char [15],(char *[15])0>(&v77, (const char (*)[15])"invalid param:");
      common::milog::MiLogStream::operator<<<std::string>(v42, (const std::vector<std::string> *)(v4 + 288));
      common::milog::MiLogStream::~MiLogStream(&v77);
      v3 = -1;
      goto LABEL_115;
    }
    common::milog::MiLogStream::create(
      &v77,
      &common::milog::MiLogDefault::default_log_obj_,
      1u,
      "./src/player/gm/player_gm_comp.cpp",
      "createMonster",
      1550);
    v43 = common::milog::MiLogStream::operator<<<char [33],(char *[33])0>(
            &v77,
            (const char (*)[33])"gm create monster with initpose:");
    v44 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v43, (const unsigned int *)(v4 + 128));
    v45 = common::milog::MiLogStream::operator<<<char [8],(char *[8])0>(v44, (const char (*)[8])" param:");
    common::milog::MiLogStream::operator<<<std::string>(v45, (const std::vector<std::string> *)(v4 + 288));
    common::milog::MiLogStream::~MiLogStream(&v77);
  }
  if ( *(_BYTE *)(((unsigned __int64)&context->avatar >> 3) + 0x7FFF8000) )
    __asan_report_load8(&context->avatar);
  Position = (unsigned __int64)Entity::getPosition((const Entity *const)context->avatar);
  if ( (char)(Position & 7) >= *(_BYTE *)((Position >> 3) + 0x7FFF8000) && *(_BYTE *)((Position >> 3) + 0x7FFF8000) != 0
    || *(_BYTE *)(((Position + 11) >> 3) + 0x7FFF8000) != 0
    && (char)((Position + 11) & 7) >= *(_BYTE *)(((Position + 11) >> 3) + 0x7FFF8000) )
  {
    Position = __asan_report_load_n(Position, 12LL);
  }
  *(_QWORD *)(v4 + 224) = *(_QWORD *)Position;
  *(_DWORD *)(v4 + 232) = *(_DWORD *)(Position + 8);
  if ( affix_flag_idx <= 6 )
    goto LABEL_87;
  v47 = std::vector<std::string>::operator[]((std::vector<std::string> *const)(v4 + 288), 4uLL);
  if ( common::tools::StringUtils::strToNum<float>(v47, (float *)(v4 + 224), 1) )
  {
    common::milog::MiLogStream::create(
      &v77,
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/player/gm/player_gm_comp.cpp",
      "createMonster",
      1559);
    v48 = common::milog::MiLogStream::operator<<<char [15],(char *[15])0>(&v77, (const char (*)[15])"invalid param:");
    common::milog::MiLogStream::operator<<<std::string>(v48, (const std::vector<std::string> *)(v4 + 288));
    common::milog::MiLogStream::~MiLogStream(&v77);
    v3 = -1;
    goto LABEL_115;
  }
  v49 = std::vector<std::string>::operator[]((std::vector<std::string> *const)(v4 + 288), 5uLL);
  if ( common::tools::StringUtils::strToNum<float>(v49, (float *)(v4 + 228), 1) )
  {
    common::milog::MiLogStream::create(
      &v77,
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/player/gm/player_gm_comp.cpp",
      "createMonster",
      1566);
    v50 = common::milog::MiLogStream::operator<<<char [15],(char *[15])0>(&v77, (const char (*)[15])"invalid param:");
    common::milog::MiLogStream::operator<<<std::string>(v50, (const std::vector<std::string> *)(v4 + 288));
    common::milog::MiLogStream::~MiLogStream(&v77);
    v3 = -1;
    goto LABEL_115;
  }
  v51 = std::vector<std::string>::operator[]((std::vector<std::string> *const)(v4 + 288), 6uLL);
  if ( common::tools::StringUtils::strToNum<float>(v51, (float *)(v4 + 232), 1) )
  {
    common::milog::MiLogStream::create(
      &v77,
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/player/gm/player_gm_comp.cpp",
      "createMonster",
      1573);
    v52 = common::milog::MiLogStream::operator<<<char [15],(char *[15])0>(&v77, (const char (*)[15])"invalid param:");
    common::milog::MiLogStream::operator<<<std::string>(v52, (const std::vector<std::string> *)(v4 + 288));
    common::milog::MiLogStream::~MiLogStream(&v77);
    v3 = -1;
  }
  else
  {
LABEL_87:
    MonsterParam::MonsterParam((MonsterParam *const)(v4 + 416));
    *(_DWORD *)(v4 + 416) = *(_DWORD *)(v4 + 80);
    *(_QWORD *)(v4 + 428) = *(_QWORD *)(v4 + 224);
    *(_DWORD *)(v4 + 436) = *(_DWORD *)(v4 + 232);
    *(_DWORD *)(v4 + 452) = *(_DWORD *)(v4 + 112);
    *(_BYTE *)(v4 + 505) = is_elite;
    *(_DWORD *)(v4 + 464) = *(_DWORD *)(v4 + 32);
    std::string::operator=(v4 + 584, v4 + 352);
    *(_DWORD *)(v4 + 624) = *(_DWORD *)(v4 + 128);
    *(_DWORD *)(v4 + 620) = *(_DWORD *)(v4 + 48);
    *(_DWORD *)(v4 + 616) = *(_DWORD *)(v4 + 64);
    for ( idx = affix_flag_idx + 1;
          idx < std::vector<std::string>::size((const std::vector<std::string> *const)(v4 + 288));
          ++idx )
    {
      *(_DWORD *)(v4 + 144) = 0;
      v53 = std::vector<std::string>::operator[]((std::vector<std::string> *const)(v4 + 288), idx);
      if ( common::tools::StringUtils::strToNum<unsigned int>(v53, (unsigned int *)(v4 + 144), 1) )
      {
        common::milog::MiLogStream::create(
          &v77,
          &common::milog::MiLogDefault::default_log_obj_,
          3u,
          "./src/player/gm/player_gm_comp.cpp",
          "createMonster",
          1592);
        v54 = common::milog::MiLogStream::operator<<<char [22],(char *[22])0>(
                &v77,
                (const char (*)[22])"invalid affix param: ");
        v55 = std::vector<std::string>::operator[]((std::vector<std::string> *const)(v4 + 288), idx);
        common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v54, v55);
        common::milog::MiLogStream::~MiLogStream(&v77);
        v3 = -1;
        goto LABEL_114;
      }
      std::set<unsigned int>::insert(
        (std::set<unsigned int> *const)(v4 + 512),
        (const std::set<unsigned int>::value_type *)(v4 + 144));
    }
    for ( i = 0; i < *(_DWORD *)(v4 + 96); ++i )
    {
      *(float *)(v4 + 428) = *(float *)(v4 + 428) + 1.0;
      *(float *)(v4 + 436) = *(float *)(v4 + 436) + 1.0;
      if ( *(_BYTE *)(((unsigned __int64)&context->scene >> 3) + 0x7FFF8000) )
        __asan_report_load8(&context->scene);
      *(_DWORD *)(v4 + 424) = Scene::genNewEntityId(context->scene, PROT_ENTITY_MONSTER);
      if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
        __asan_report_load8(&context->player);
      BasicComp = Player::getBasicComp(context->player);
      *(_DWORD *)(v4 + 420) = PlayerBasicComp::genGuid(BasicComp, GUID_NONE);
      if ( *(_DWORD *)(v4 + 420) <= 0x3B9AC9FFu )
        *(_DWORD *)(v4 + 420) += 1000000000;
      EntityMgr::createMonster((const MonsterParam *)(v4 + 256));
      if ( std::operator==<Monster>((const std::shared_ptr<Monster> *)(v4 + 256), 0LL) )
      {
        common::milog::MiLogStream::create(
          &v77,
          &common::milog::MiLogDefault::default_log_obj_,
          3u,
          "./src/player/gm/player_gm_comp.cpp",
          "createMonster",
          1607);
        v57 = common::milog::MiLogStream::operator<<<char [33],(char *[33])0>(
                &v77,
                (const char (*)[33])"createMonster fails, monster_id:");
        common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v57, (const unsigned int *)(v4 + 80));
        common::milog::MiLogStream::~MiLogStream(&v77);
        v3 = -1;
        v58 = 0;
      }
      else
      {
        v59 = std::__shared_ptr_access<Monster,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Monster,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 256));
        if ( *(_BYTE *)(((unsigned __int64)v59 >> 3) + 0x7FFF8000) )
          __asan_report_load8(v59);
        v60 = *(_QWORD *)v59->baseclass_0 + 56LL;
        if ( *(_BYTE *)((v60 >> 3) + 0x7FFF8000) )
          __asan_report_load8(*(_QWORD *)v59->baseclass_0 + 56LL);
        v61 = *(void (__fastcall **)(std::__shared_ptr_access<Monster,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *, Scene *, VisionContext *))v60;
        if ( *(_BYTE *)(((unsigned __int64)&context->scene >> 3) + 0x7FFF8000) )
          __asan_report_load8(&context->scene);
        v61(v59, context->scene, &VisionContext::meet_context);
        v62 = std::__shared_ptr_access<Monster,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Monster,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 256));
        Creature::setIsCreatedByGm(v62, 1);
        v63 = std::__shared_ptr_access<Monster,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Monster,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 256));
        FightPropComp = Creature::getFightPropComp(v63);
        IsInvincible = FightPropComp::getIsInvincible(FightPropComp);
        if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
          __asan_report_load8(&context->player);
        GmComp = Player::getGmComp(context->player);
        IsMonsterInvincible = PlayerGmComp::getIsMonsterInvincible(GmComp);
        PileBoolValue::set(IsInvincible, 0, IsMonsterInvincible);
        v58 = 1;
      }
      std::shared_ptr<Monster>::~shared_ptr((std::shared_ptr<Monster> *const)(v4 + 256));
      if ( v58 != 1 )
        goto LABEL_114;
    }
    v3 = 0;
LABEL_114:
    MonsterParam::~MonsterParam((MonsterParam *const)(v4 + 416));
  }
LABEL_115:
  std::vector<std::string>::~vector((std::vector<std::string> *const)(v4 + 288));
  std::string::~string((void *)(v4 + 352));
LABEL_116:
  result = v3;
  if ( v78 == (char *)v4 )
  {
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8008) = 0LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8010) = 0LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8018) = 0LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8020) = 0LL;
    *(_DWORD *)((v4 >> 3) + 0x7FFF8028) = 0;
    *(_DWORD *)((v4 >> 3) + 0x7FFF8030) = 0;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8060) = 0LL;
  }
  else
  {
    *(_QWORD *)v4 = 1172321806LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8020) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8028) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8030) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8038) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8040) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8048) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8050) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8058) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8060) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 1617: range 0000000017D72BF4-0000000017D72C96
void __cdecl procGadgetRegister::procGadgetRegister(procGadgetRegister *const this)
{
  std::function<int(GmContext&,const std::vector<std::string>&,std::string&)> *v1; // rax
  std::allocator<char> __a; // [rsp+1Fh] [rbp-31h] BYREF
  std::string __k; // [rsp+20h] [rbp-30h] BYREF

  std::allocator<char>::allocator(&__a);
  std::string::basic_string<std::allocator<char>>(&__k, "GADGET", &__a);
  v1 = std::unordered_map<std::string,std::function<int ()(GmContext &,std::vector<std::string> const&,std::string&)>>::operator[](
         &GmUtils::op_func_map[abi:cxx11],
         &__k);
  std::function<int ()(GmContext &,std::vector<std::string> const&,std::string&)>::operator=<int (&)(GmContext &,std::vector<std::string> const&,std::string&)>(
    v1,
    (int (*)(GmContext *, const std::vector<std::string> *, std::string *))procGadget);
  std::string::~string(&__k);
  std::allocator<char>::~allocator(&__a);
};

// Line 1618: range 0000000017BCA608-0000000017BCBB8E
int32_t __cdecl procGadget(GmContext *context, const std::vector<std::string> *param_vec, std::string *ret_msg)
{
  int32_t v3; // r14d
  unsigned __int64 v4; // r13
  __int64 v5; // rax
  _DWORD *v6; // r12
  common::milog::MiLogStream *v7; // rdx
  const std::string *v8; // rax
  common::milog::MiLogStream *v9; // rdx
  const std::string *v10; // rax
  common::milog::MiLogStream *v11; // rdx
  const std::string *v12; // rax
  common::milog::MiLogStream *v13; // rdx
  Scene *scene; // r14
  const std::string *v15; // rax
  int v16; // r15d
  Gadget *v17; // rax
  const std::string *v18; // rax
  common::milog::MiLogStream *v19; // rdx
  const std::string *v20; // rax
  common::milog::MiLogStream *v21; // rdx
  Scene *v22; // r14
  common::milog::MiLogStream *v23; // rdx
  common::milog::MiLogStream *v24; // rax
  const std::string *v25; // rax
  common::milog::MiLogStream *v27; // rdx
  const std::string *v28; // rax
  common::milog::MiLogStream *v30; // rdx
  const std::string *v31; // rax
  common::milog::MiLogStream *v33; // rdx
  unsigned __int64 Position; // rax
  std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v35; // rax
  common::milog::MiLogStream *v36; // rax
  common::milog::MiLogStream *v37; // rax
  int v38; // r15d
  Scene *v39; // r15
  PlayerBasicComp *BasicComp; // rax
  common::milog::MiLogStream *v41; // rax
  int v42; // r15d
  std::__shared_ptr_access<Gadget,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v43; // rax
  unsigned __int64 v44; // rdx
  void (__fastcall *v45)(std::__shared_ptr_access<Gadget,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *, Scene *, VisionContext *); // r8
  std::__shared_ptr_access<Gadget,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v46; // rax
  uint32_t i; // [rsp+24h] [rbp-4FCh]
  const data::GadgetExcelConfig *gadget_config_ptr; // [rsp+28h] [rbp-4F8h]
  std::string __rhs; // [rsp+30h] [rbp-4F0h] BYREF
  std::string __lhs; // [rsp+50h] [rbp-4D0h] BYREF
  common::milog::MiLogStream v53; // [rsp+70h] [rbp-4B0h] BYREF
  char v54[1168]; // [rsp+90h] [rbp-490h] BYREF
  procGadget::<lambda(Gadget&)> v55; // 0:rsi.8

  v4 = (unsigned __int64)v54;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v5 = __asan_stack_malloc_5(1120LL);
    if ( v5 )
      v4 = v5;
  }
  *(_QWORD *)v4 = 1102416563LL;
  *(_QWORD *)(v4 + 8) = "8 32 4 14 gadget_id:1693 48 4 8 num:1694 64 4 12 drop_id:1705 80 4 10 level:1711 96 4 16 interac"
                        "t_id:1722 112 16 14 group_ptr:1737 144 16 15 gadget_ptr:1764 176 816 17 gadget_param:1728";
  *(_QWORD *)(v4 + 16) = procGadget;
  v6 = (_DWORD *)(v4 >> 3);
  v6[536862720] = -235802127;
  v6[536862721] = -234556924;
  v6[536862722] = -234556924;
  v6[536862723] = 61956;
  v6[536862724] = 62194;
  v6[536862725] = 62194;
  v6[536862751] = -202116109;
  v6[536862752] = -202116109;
  v6[536862753] = -202116109;
  v6[536862754] = -202116109;
  if ( std::vector<std::string>::empty(param_vec) )
  {
    common::milog::MiLogStream::create(
      &v53,
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/player/gm/player_gm_comp.cpp",
      "procGadget",
      1621);
    v7 = common::milog::MiLogStream::operator<<<char [15],(char *[15])0>(&v53, (const char (*)[15])"invalid param:");
    common::milog::MiLogStream::operator<<<std::string>(v7, param_vec);
    common::milog::MiLogStream::~MiLogStream(&v53);
    v3 = -1;
    goto LABEL_95;
  }
  v8 = std::vector<std::string>::operator[](param_vec, 0LL);
  if ( std::operator==<char>(v8, "STATE") )
  {
    if ( std::vector<std::string>::size(param_vec) <= 2 )
    {
      common::milog::MiLogStream::create(
        &v53,
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/player/gm/player_gm_comp.cpp",
        "procGadget",
        1628);
      v9 = common::milog::MiLogStream::operator<<<char [15],(char *[15])0>(&v53, (const char (*)[15])"invalid param:");
      common::milog::MiLogStream::operator<<<std::string>(v9, param_vec);
      common::milog::MiLogStream::~MiLogStream(&v53);
      v3 = -1;
      goto LABEL_95;
    }
    *(_DWORD *)(v4 + 80) = 0;
    v10 = std::vector<std::string>::operator[](param_vec, 1uLL);
    if ( common::tools::StringUtils::strToNum<unsigned int>(v10, (unsigned int *)(v4 + 80), 1) )
    {
      common::milog::MiLogStream::create(
        &v53,
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/player/gm/player_gm_comp.cpp",
        "procGadget",
        1634);
      v11 = common::milog::MiLogStream::operator<<<char [15],(char *[15])0>(&v53, (const char (*)[15])"invalid param:");
      common::milog::MiLogStream::operator<<<std::string>(v11, param_vec);
      common::milog::MiLogStream::~MiLogStream(&v53);
      v3 = -1;
      goto LABEL_95;
    }
    *(_DWORD *)(v4 + 96) = 0;
    v12 = std::vector<std::string>::operator[](param_vec, 2uLL);
    if ( common::tools::StringUtils::strToNum<int>(v12, (int *)(v4 + 96), 1) )
    {
      common::milog::MiLogStream::create(
        &v53,
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/player/gm/player_gm_comp.cpp",
        "procGadget",
        1640);
      v13 = common::milog::MiLogStream::operator<<<char [15],(char *[15])0>(&v53, (const char (*)[15])"invalid param:");
      common::milog::MiLogStream::operator<<<std::string>(v13, param_vec);
      common::milog::MiLogStream::~MiLogStream(&v53);
      v3 = -1;
      goto LABEL_95;
    }
    if ( *(_BYTE *)(((unsigned __int64)&context->scene >> 3) + 0x7FFF8000) )
      __asan_report_load8(&context->scene);
    scene = context->scene;
    v55.__gadget_id = *(_DWORD *)(v4 + 80);
    v55.__gadget_state = *(_DWORD *)(v4 + 96);
    std::function<ForeachPolicy ()(Gadget &)>::function<procGadget(GmContext &,std::vector<std::string> const&,std::string&)::{lambda(Gadget &)#1},void,void>(
      (std::function<ForeachPolicy(Gadget&)> *const)&v53,
      v55);
    Scene::foreachEntity<Gadget>(scene, (std::function<ForeachPolicy(Gadget&)> *)&v53);
    std::function<ForeachPolicy ()(Gadget &)>::~function((std::function<ForeachPolicy(Gadget&)> *const)&v53);
LABEL_94:
    v3 = 0;
    goto LABEL_95;
  }
  v15 = std::vector<std::string>::operator[](param_vec, 0LL);
  if ( std::operator==<char>(v15, "SET_STATE_BY_ENTITY_ID") )
  {
    *(_DWORD *)(v4 + 80) = 0;
    *(_DWORD *)(v4 + 96) = 0;
    if ( common::tools::StringUtils::strVecToNum<1u,unsigned int,unsigned int &>(
           param_vec,
           (unsigned int *)(v4 + 80),
           (unsigned int *)(v4 + 96),
           (unsigned int *)(v4 + 80)) )
    {
      std::string::operator=(ret_msg, "parse param fail");
      v3 = -1;
      goto LABEL_95;
    }
    if ( *(_BYTE *)(((unsigned __int64)&context->scene >> 3) + 0x7FFF8000) )
      __asan_report_load8(&context->scene);
    Scene::findEntity<Gadget>((const Scene *const)(v4 + 144), (uint32_t)context->scene);
    if ( std::operator==<Gadget>(0LL, (const std::shared_ptr<Gadget> *)(v4 + 144)) )
    {
      std::to_string(&__rhs, *(_DWORD *)(v4 + 80));
      std::operator+<char>(&__lhs, "findEntity:", &__rhs);
      std::operator+<char>((std::string *)&v53, &__lhs, " fail");
      std::string::operator=(ret_msg, &v53);
      std::string::~string(&v53);
      std::string::~string(&__lhs);
      std::string::~string(&__rhs);
      v3 = -1;
      v16 = 0;
    }
    else
    {
      v17 = std::__shared_ptr_access<Gadget,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Gadget,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 144));
      Gadget::setState(v17, *(_DWORD *)(v4 + 96), 0, 1);
      v16 = 1;
    }
    std::shared_ptr<Gadget>::~shared_ptr((std::shared_ptr<Gadget> *const)(v4 + 144));
    if ( v16 == 1 )
      goto LABEL_94;
  }
  else
  {
    v18 = std::vector<std::string>::operator[](param_vec, 0LL);
    if ( std::operator==<char>(v18, "REMOVE") )
    {
      if ( std::vector<std::string>::size(param_vec) <= 1 )
      {
        common::milog::MiLogStream::create(
          &v53,
          &common::milog::MiLogDefault::default_log_obj_,
          3u,
          "./src/player/gm/player_gm_comp.cpp",
          "procGadget",
          1673);
        v19 = common::milog::MiLogStream::operator<<<char [15],(char *[15])0>(
                &v53,
                (const char (*)[15])"invalid param:");
        common::milog::MiLogStream::operator<<<std::string>(v19, param_vec);
        common::milog::MiLogStream::~MiLogStream(&v53);
        v3 = -1;
        goto LABEL_95;
      }
      *(_DWORD *)(v4 + 96) = 0;
      v20 = std::vector<std::string>::operator[](param_vec, 1uLL);
      if ( common::tools::StringUtils::strToNum<unsigned int>(v20, (unsigned int *)(v4 + 96), 1) )
      {
        common::milog::MiLogStream::create(
          &v53,
          &common::milog::MiLogDefault::default_log_obj_,
          3u,
          "./src/player/gm/player_gm_comp.cpp",
          "procGadget",
          1679);
        v21 = common::milog::MiLogStream::operator<<<char [15],(char *[15])0>(
                &v53,
                (const char (*)[15])"invalid param:");
        common::milog::MiLogStream::operator<<<std::string>(v21, param_vec);
        common::milog::MiLogStream::~MiLogStream(&v53);
        v3 = -1;
        goto LABEL_95;
      }
      if ( *(_BYTE *)(((unsigned __int64)&context->scene >> 3) + 0x7FFF8000) )
        __asan_report_load8(&context->scene);
      v22 = context->scene;
      std::function<ForeachPolicy ()(Gadget &)>::function<procGadget(GmContext &,std::vector<std::string> const&,std::string&)::{lambda(Gadget &)#2},void,void>(
        (std::function<ForeachPolicy(Gadget&)> *const)&v53,
        *(procGadget::<lambda(Gadget&)>_0 *)(v4 + 96));
      Scene::foreachEntity<Gadget>(v22, (std::function<ForeachPolicy(Gadget&)> *)&v53);
      std::function<ForeachPolicy ()(Gadget &)>::~function((std::function<ForeachPolicy(Gadget&)> *const)&v53);
      goto LABEL_94;
    }
    *(_DWORD *)(v4 + 32) = 0;
    *(_DWORD *)(v4 + 48) = 0;
    if ( common::tools::StringUtils::strVecToNum<0u,unsigned int,unsigned int &>(
           param_vec,
           (unsigned int *)(v4 + 32),
           (unsigned int *)(v4 + 48),
           (unsigned int *)(v4 + 32)) )
    {
      common::milog::MiLogStream::create(
        &v53,
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/player/gm/player_gm_comp.cpp",
        "procGadget",
        1697);
      v23 = common::milog::MiLogStream::operator<<<char [15],(char *[15])0>(&v53, (const char (*)[15])"invalid param:");
      common::milog::MiLogStream::operator<<<std::string>(v23, param_vec);
      common::milog::MiLogStream::~MiLogStream(&v53);
      v3 = -1;
      goto LABEL_95;
    }
    if ( *(_DWORD *)(v4 + 48) > 0x14u )
    {
      common::milog::MiLogStream::create(
        &v53,
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/player/gm/player_gm_comp.cpp",
        "procGadget",
        1702);
      v24 = common::milog::MiLogStream::operator<<<char [22],(char *[22])0>(
              &v53,
              (const char (*)[22])"gadget num too large:");
      common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v24, (const unsigned int *)(v4 + 48));
      common::milog::MiLogStream::~MiLogStream(&v53);
      v3 = -1;
      goto LABEL_95;
    }
    *(_DWORD *)(v4 + 64) = 0;
    if ( std::vector<std::string>::size(param_vec) > 2 )
    {
      v25 = std::vector<std::string>::operator[](param_vec, 2uLL);
      if ( common::tools::StringUtils::strToNum<unsigned int>(v25, (unsigned int *)(v4 + 64), 1) )
      {
        common::milog::MiLogStream::create(
          &v53,
          &common::milog::MiLogDefault::default_log_obj_,
          3u,
          "./src/player/gm/player_gm_comp.cpp",
          "procGadget",
          1708);
        v27 = common::milog::MiLogStream::operator<<<char [15],(char *[15])0>(
                &v53,
                (const char (*)[15])"invalid param:");
        common::milog::MiLogStream::operator<<<std::string>(v27, param_vec);
        common::milog::MiLogStream::~MiLogStream(&v53);
        v3 = -1;
        goto LABEL_95;
      }
    }
    *(_DWORD *)(v4 + 80) = 1;
    if ( std::vector<std::string>::size(param_vec) > 3 )
    {
      v28 = std::vector<std::string>::operator[](param_vec, 3uLL);
      if ( common::tools::StringUtils::strToNum<unsigned int>(v28, (unsigned int *)(v4 + 80), 1) )
      {
        common::milog::MiLogStream::create(
          &v53,
          &common::milog::MiLogDefault::default_log_obj_,
          3u,
          "./src/player/gm/player_gm_comp.cpp",
          "procGadget",
          1714);
        v30 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                &v53,
                (const char (*)[16])"invalid param: ");
        common::milog::MiLogStream::operator<<<std::string>(v30, param_vec);
        common::milog::MiLogStream::~MiLogStream(&v53);
        v3 = -1;
        goto LABEL_95;
      }
    }
    if ( !*(_DWORD *)(v4 + 80) )
    {
      common::milog::MiLogStream::create(
        &v53,
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/player/gm/player_gm_comp.cpp",
        "procGadget",
        1719);
      common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(&v53, (const char (*)[16])"invalid level 0");
      common::milog::MiLogStream::~MiLogStream(&v53);
      v3 = -1;
      goto LABEL_95;
    }
    *(_DWORD *)(v4 + 96) = 0;
    if ( std::vector<std::string>::size(param_vec) > 4 )
    {
      v31 = std::vector<std::string>::operator[](param_vec, 4uLL);
      if ( common::tools::StringUtils::strToNum<unsigned int>(v31, (unsigned int *)(v4 + 96), 1) )
      {
        common::milog::MiLogStream::create(
          &v53,
          &common::milog::MiLogDefault::default_log_obj_,
          3u,
          "./src/player/gm/player_gm_comp.cpp",
          "procGadget",
          1725);
        v33 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                &v53,
                (const char (*)[16])"invalid param: ");
        common::milog::MiLogStream::operator<<<std::string>(v33, param_vec);
        common::milog::MiLogStream::~MiLogStream(&v53);
        v3 = -1;
        goto LABEL_95;
      }
    }
    GadgetParam::GadgetParam((GadgetParam *const)(v4 + 176));
    *(_DWORD *)(v4 + 176) = *(_DWORD *)(v4 + 32);
    if ( *(_BYTE *)(((unsigned __int64)&context->avatar >> 3) + 0x7FFF8000) )
      __asan_report_load8(&context->avatar);
    Position = (unsigned __int64)Entity::getPosition((const Entity *const)context->avatar);
    if ( (char)(Position & 7) >= *(_BYTE *)((Position >> 3) + 0x7FFF8000)
      && *(_BYTE *)((Position >> 3) + 0x7FFF8000) != 0
      || *(_BYTE *)(((Position + 11) >> 3) + 0x7FFF8000) != 0
      && (char)((Position + 11) & 7) >= *(_BYTE *)(((Position + 11) >> 3) + 0x7FFF8000) )
    {
      Position = __asan_report_load_n(Position, 12LL);
    }
    *(_QWORD *)(v4 + 188) = *(_QWORD *)Position;
    *(_DWORD *)(v4 + 196) = *(_DWORD *)(Position + 8);
    *(_DWORD *)(v4 + 224) = *(_DWORD *)(v4 + 64);
    *(_DWORD *)(v4 + 396) = *(_DWORD *)(v4 + 64);
    *(_DWORD *)(v4 + 468) = *(_DWORD *)(v4 + 96);
    *(_DWORD *)(v4 + 212) = *(_DWORD *)(v4 + 80);
    if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
      __asan_report_load8(&context->player);
    toPtr<Player,Player>((Player *)(v4 + 144));
    std::shared_ptr<Player>::operator=(
      (std::shared_ptr<Player> *const)(v4 + 368),
      (std::shared_ptr<Player> *)(v4 + 144));
    std::shared_ptr<Player>::~shared_ptr((std::shared_ptr<Player> *const)(v4 + 144));
    *(_DWORD *)(v4 + 384) = 3;
    *(_QWORD *)(v4 + 112) = 0LL;
    *(_QWORD *)(v4 + 120) = 0LL;
    ServiceBox::findService<GameserverService>();
    GameserverService::getConfig((GameserverService *const)(v4 + 144));
    v35 = std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 144));
    gadget_config_ptr = data::GadgetExcelConfigMgrBase::findGadgetExcelConfig(
                          &v35->design_config.txt_config_mgr.gadget_config_mgr,
                          *(_DWORD *)(v4 + 32));
    std::shared_ptr<Config>::~shared_ptr((std::shared_ptr<Config> *const)(v4 + 144));
    if ( gadget_config_ptr )
    {
      if ( *(_BYTE *)(((unsigned __int64)&gadget_config_ptr->type >> 3) + 0x7FFF8000) != 0
        && (char)((((_BYTE)gadget_config_ptr + 84) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&gadget_config_ptr->type >> 3)
                                                                         + 0x7FFF8000) )
      {
        __asan_report_load4(&gadget_config_ptr->type);
      }
      if ( gadget_config_ptr->type != Vehicle )
      {
        if ( *(_BYTE *)(((unsigned __int64)&context->scene >> 3) + 0x7FFF8000) )
          __asan_report_load8(&context->scene);
        v39 = context->scene;
        std::function<ForeachPolicy ()(Group &)>::function<procGadget(GmContext &,std::vector<std::string> const&,std::string&)::{lambda(Group &)#3},void,void>(
          (std::function<ForeachPolicy(Group&)> *const)&v53,
          (procGadget::<lambda(Group&)>)(v4 + 112));
        Scene::foreachGroup(v39, (std::function<ForeachPolicy(Group&)> *)&v53);
        std::function<ForeachPolicy ()(Group &)>::~function((std::function<ForeachPolicy(Group&)> *const)&v53);
      }
      std::shared_ptr<Group>::operator=(
        (std::shared_ptr<Group> *const)(v4 + 232),
        (const std::shared_ptr<Group> *)(v4 + 112));
      for ( i = 0; i < *(_DWORD *)(v4 + 48); ++i )
      {
        *(float *)(v4 + 188) = *(float *)(v4 + 188) + 1.0;
        *(float *)(v4 + 196) = *(float *)(v4 + 196) + 1.0;
        if ( *(_BYTE *)(((unsigned __int64)&context->scene >> 3) + 0x7FFF8000) )
          __asan_report_load8(&context->scene);
        *(_DWORD *)(v4 + 184) = Scene::genNewEntityId(context->scene, PROT_ENTITY_GADGET);
        if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
          __asan_report_load8(&context->player);
        BasicComp = Player::getBasicComp(context->player);
        *(_DWORD *)(v4 + 180) = PlayerBasicComp::genGuid(BasicComp, GUID_NONE);
        if ( *(_DWORD *)(v4 + 180) <= 0x3B9AC9FFu )
          *(_DWORD *)(v4 + 180) += 1000000000;
        EntityMgr::createGadget((const GadgetParam *)(v4 + 144));
        if ( std::operator==<Gadget>((const std::shared_ptr<Gadget> *)(v4 + 144), 0LL) )
        {
          common::milog::MiLogStream::create(
            &v53,
            &common::milog::MiLogDefault::default_log_obj_,
            3u,
            "./src/player/gm/player_gm_comp.cpp",
            "procGadget",
            1767);
          v41 = common::milog::MiLogStream::operator<<<char [31],(char *[31])0>(
                  &v53,
                  (const char (*)[31])"createGadget fails, gadget_id:");
          common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v41, (const unsigned int *)(v4 + 32));
          common::milog::MiLogStream::~MiLogStream(&v53);
          v3 = -1;
          v42 = 0;
        }
        else
        {
          v43 = std::__shared_ptr_access<Gadget,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Gadget,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 144));
          if ( *(_BYTE *)(((unsigned __int64)v43 >> 3) + 0x7FFF8000) )
            __asan_report_load8(v43);
          v44 = *(_QWORD *)v43->baseclass_0 + 56LL;
          if ( *(_BYTE *)((v44 >> 3) + 0x7FFF8000) )
            __asan_report_load8(*(_QWORD *)v43->baseclass_0 + 56LL);
          v45 = *(void (__fastcall **)(std::__shared_ptr_access<Gadget,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *, Scene *, VisionContext *))v44;
          if ( *(_BYTE *)(((unsigned __int64)&context->scene >> 3) + 0x7FFF8000) )
            __asan_report_load8(&context->scene);
          v45(v43, context->scene, &VisionContext::meet_context);
          v46 = std::__shared_ptr_access<Gadget,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Gadget,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 144));
          Creature::setIsCreatedByGm(v46, 1);
          v42 = 1;
        }
        std::shared_ptr<Gadget>::~shared_ptr((std::shared_ptr<Gadget> *const)(v4 + 144));
        if ( v42 != 1 )
        {
          v38 = 0;
          goto LABEL_93;
        }
      }
      v38 = 1;
    }
    else
    {
      common::milog::MiLogStream::create(
        &v53,
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/player/gm/player_gm_comp.cpp",
        "procGadget",
        1741);
      v36 = common::milog::MiLogStream::operator<<<char [11],(char *[11])0>(&v53, (const char (*)[11])"gadget_id:");
      v37 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v36, (const unsigned int *)(v4 + 32));
      common::milog::MiLogStream::operator<<<char [18],(char *[18])0>(v37, (const char (*)[18])" config not found");
      common::milog::MiLogStream::~MiLogStream(&v53);
      v3 = -1;
      v38 = 0;
    }
LABEL_93:
    std::shared_ptr<Group>::~shared_ptr((std::shared_ptr<Group> *const)(v4 + 112));
    GadgetParam::~GadgetParam((GadgetParam *const)(v4 + 176));
    if ( v38 == 1 )
      goto LABEL_94;
  }
LABEL_95:
  if ( v54 == (char *)v4 )
  {
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8008) = 0LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8010) = 0LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF807C) = 0LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8084) = 0LL;
  }
  else
  {
    *(_QWORD *)v4 = 1172321806LL;
    __asan_stack_free_5(v4, 1120LL, v54);
  }
  return v3;
};

// Line 1643: range 0000000017BCA3EE-0000000017BCA4B3
ForeachPolicy __cdecl procGadget(GmContext &,std::vector<std::string> const&,std::string&)::{lambda(Gadget &)#1}::operator()(
        const procGadget::<lambda(Gadget&)> *const __closure,
        Gadget *gadget)
{
  uint32_t GadgetId; // ecx

  GadgetId = Gadget::getGadgetId(gadget);
  if ( *(_BYTE *)(((unsigned __int64)__closure >> 3) + 0x7FFF8000) != 0
    && (char)(((unsigned __int8)__closure & 7) + 3) >= *(_BYTE *)(((unsigned __int64)__closure >> 3) + 0x7FFF8000) )
  {
    __asan_report_load4(__closure);
  }
  if ( GadgetId == __closure->__gadget_id )
  {
    if ( *(_BYTE *)(((unsigned __int64)&__closure->__gadget_state >> 3) + 0x7FFF8000) != 0
      && (char)((((_BYTE)__closure + 4) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&__closure->__gadget_state >> 3)
                                                              + 0x7FFF8000) )
    {
      __asan_report_load4(&__closure->__gadget_state);
    }
    Gadget::setState(gadget, __closure->__gadget_state, 0, 1);
  }
  return 0;
};

// Line 1682: range 0000000017BCA4B4-0000000017BCA582
ForeachPolicy __cdecl procGadget(GmContext &,std::vector<std::string> const&,std::string&)::{lambda(Gadget &)#2}::operator()(
        const procGadget::<lambda(Gadget&)>_0 *const __closure,
        Gadget *gadget)
{
  uint32_t GadgetId; // ecx
  Gadget *v3; // rdx
  unsigned __int64 v4; // rax

  GadgetId = Gadget::getGadgetId(gadget);
  if ( *(_BYTE *)(((unsigned __int64)__closure >> 3) + 0x7FFF8000) != 0
    && (char)(((unsigned __int8)__closure & 7) + 3) >= *(_BYTE *)(((unsigned __int64)__closure >> 3) + 0x7FFF8000) )
  {
    __asan_report_load4(__closure);
  }
  if ( GadgetId == __closure->__gadget_id )
  {
    v3 = gadget;
    if ( *(_BYTE *)(((unsigned __int64)gadget >> 3) + 0x7FFF8000) )
      __asan_report_load8(gadget);
    v4 = *(_QWORD *)gadget->baseclass_0 + 128LL;
    if ( *(_BYTE *)((v4 >> 3) + 0x7FFF8000) )
      __asan_report_load8(*(_QWORD *)gadget->baseclass_0 + 128LL);
    (*(void (__fastcall **)(Gadget *, VisionContext *))v4)(v3, &VisionContext::miss_context);
  }
  return 0;
};

// Line 1746: range 0000000017BCA584-0000000017BCA607
ForeachPolicy __cdecl procGadget(GmContext &,std::vector<std::string> const&,std::string&)::{lambda(Group &)#3}::operator()(
        const procGadget::<lambda(Group&)> *const __closure,
        Group *group)
{
  std::shared_ptr<Group> __r; // [rsp+10h] [rbp-10h] BYREF

  if ( !Group::isActive(group) )
    return 0;
  toThisPtr<Group>((Group *)&__r);
  if ( *(_BYTE *)(((unsigned __int64)__closure >> 3) + 0x7FFF8000) )
    __asan_report_load8(__closure);
  std::shared_ptr<Group>::operator=(__closure->__group_ptr, &__r);
  std::shared_ptr<Group>::~shared_ptr(&__r);
  return 1;
};

// Line 1777: range 0000000017D72C98-0000000017D72D3A
void __cdecl createTrifleRegister::createTrifleRegister(createTrifleRegister *const this)
{
  std::function<int(GmContext&,const std::vector<std::string>&,std::string&)> *v1; // rax
  std::allocator<char> __a; // [rsp+1Fh] [rbp-31h] BYREF
  std::string __k; // [rsp+20h] [rbp-30h] BYREF

  std::allocator<char>::allocator(&__a);
  std::string::basic_string<std::allocator<char>>(&__k, "TRIFLE", &__a);
  v1 = std::unordered_map<std::string,std::function<int ()(GmContext &,std::vector<std::string> const&,std::string&)>>::operator[](
         &GmUtils::op_func_map[abi:cxx11],
         &__k);
  std::function<int ()(GmContext &,std::vector<std::string> const&,std::string&)>::operator=<int (&)(GmContext &,std::vector<std::string> const&,std::string&)>(
    v1,
    (int (*)(GmContext *, const std::vector<std::string> *, std::string *))createTrifle);
  std::string::~string(&__k);
  std::allocator<char>::~allocator(&__a);
};

// Line 1778: range 0000000017BCBB8F-0000000017BCC562
int32_t __cdecl createTrifle(GmContext *context, const std::vector<std::string> *param_vec, std::string *ret_msg)
{
  int32_t v3; // r14d
  unsigned __int64 v4; // r13
  __int64 v5; // rax
  _DWORD *v6; // r12
  common::milog::MiLogStream *v7; // rdx
  common::milog::MiLogStream *v8; // rax
  unsigned __int64 Position; // rax
  PlayerItemComp *ItemComp; // rax
  common::milog::MiLogStream *v11; // rax
  common::milog::MiLogStream *v12; // rax
  common::milog::MiLogStream *v13; // rax
  _BOOL4 v14; // r15d
  const std::shared_ptr<Item> *v15; // rax
  __int64 v16; // rdx
  common::milog::MiLogStream *v17; // rax
  int v18; // r15d
  std::__shared_ptr_access<Gadget,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v19; // rax
  unsigned __int64 v20; // rdx
  void (__fastcall *v21)(std::__shared_ptr_access<Gadget,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *, Scene *, VisionContext *); // r8
  int32_t result; // eax
  uint32_t i; // [rsp+2Ch] [rbp-1D4h]
  ActionReason action_reason; // [rsp+30h] [rbp-1D0h] BYREF
  common::milog::MiLogStream v25; // [rsp+50h] [rbp-1B0h] BYREF
  char v26[400]; // [rsp+70h] [rbp-190h] BYREF

  v4 = (unsigned __int64)v26;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v5 = __asan_stack_malloc_3(352LL);
    if ( v5 )
      v4 = v5;
  }
  *(_QWORD *)v4 = 1102416563LL;
  *(_QWORD *)(v4 + 8) = "6 48 4 12 item_id:1779 64 4 8 num:1780 80 16 15 item_param:1796 112 16 15 trifle_ptr:1813 144 24"
                        " 13 item_vec:1801 208 112 17 trifle_param:1791";
  *(_QWORD *)(v4 + 16) = createTrifle;
  v6 = (_DWORD *)(v4 >> 3);
  v6[536862720] = -235802127;
  v6[536862721] = -234556943;
  v6[536862722] = 61956;
  v6[536862723] = 62194;
  v6[536862724] = 62194;
  v6[536862725] = -218959360;
  v6[536862726] = 62194;
  v6[536862730] = -202116109;
  *(_DWORD *)(v4 + 48) = 0;
  *(_DWORD *)(v4 + 64) = 0;
  if ( common::tools::StringUtils::strVecToNum<0u,unsigned int,unsigned int &>(
         param_vec,
         (unsigned int *)(v4 + 48),
         (unsigned int *)(v4 + 64),
         (unsigned int *)(v4 + 48)) )
  {
    common::milog::MiLogStream::create(
      &v25,
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/player/gm/player_gm_comp.cpp",
      "createTrifle",
      1783);
    v7 = common::milog::MiLogStream::operator<<<char [15],(char *[15])0>(&v25, (const char (*)[15])"invalid param:");
    common::milog::MiLogStream::operator<<<std::string>(v7, param_vec);
    common::milog::MiLogStream::~MiLogStream(&v25);
    v3 = -1;
  }
  else if ( *(_DWORD *)(v4 + 64) <= 0x14u )
  {
    ActionReason::ActionReason(&action_reason, ACTION_REASON_GM, ITEM_LIMIT_GM);
    TrifleParam::TrifleParam((TrifleParam *const)(v4 + 208), &action_reason);
    if ( *(_BYTE *)(((unsigned __int64)&context->avatar >> 3) + 0x7FFF8000) )
      __asan_report_load8(&context->avatar);
    Position = (unsigned __int64)Entity::getPosition((const Entity *const)context->avatar);
    if ( (char)(Position & 7) >= *(_BYTE *)((Position >> 3) + 0x7FFF8000)
      && *(_BYTE *)((Position >> 3) + 0x7FFF8000) != 0
      || *(_BYTE *)(((Position + 11) >> 3) + 0x7FFF8000) != 0
      && (char)((Position + 11) & 7) >= *(_BYTE *)(((Position + 11) >> 3) + 0x7FFF8000) )
    {
      Position = __asan_report_load_n(Position, 12LL);
    }
    *(_QWORD *)(v4 + 232) = *(_QWORD *)Position;
    *(_DWORD *)(v4 + 240) = *(_DWORD *)(Position + 8);
    std::shared_ptr<Group>::shared_ptr((std::shared_ptr<Group> *const)(v4 + 112), 0LL);
    std::shared_ptr<Group>::operator=((std::shared_ptr<Group> *const)(v4 + 256), (std::shared_ptr<Group> *)(v4 + 112));
    std::shared_ptr<Group>::~shared_ptr((std::shared_ptr<Group> *const)(v4 + 112));
    if ( *(_BYTE *)(((unsigned __int64)&context->avatar >> 3) + 0x7FFF8000) )
      __asan_report_load8(&context->avatar);
    *(_DWORD *)(v4 + 272) = Entity::getEntityId((const Entity *const)context->avatar);
    if ( *(_BYTE *)(((unsigned __int64)&context->avatar >> 3) + 0x7FFF8000) )
      __asan_report_load8(&context->avatar);
    toThisPtr<Avatar>((Avatar *)(v4 + 80));
    std::shared_ptr<Entity>::shared_ptr<Avatar,void>(
      (std::shared_ptr<Entity> *const)(v4 + 112),
      (std::shared_ptr<Avatar> *)(v4 + 80));
    *(_DWORD *)(v4 + 280) = EntityMgr::getBornTypeFromSourceEntity((const EntityPtr *)(v4 + 112));
    std::shared_ptr<Entity>::~shared_ptr((std::shared_ptr<Entity> *const)(v4 + 112));
    std::shared_ptr<Avatar>::~shared_ptr((std::shared_ptr<Avatar> *const)(v4 + 80));
    *(_DWORD *)(v4 + 80) = 0;
    *(_DWORD *)(v4 + 84) = 0;
    *(_DWORD *)(v4 + 88) = 0;
    *(_DWORD *)(v4 + 92) = 0;
    *(_DWORD *)(v4 + 80) = *(_DWORD *)(v4 + 48);
    *(_DWORD *)(v4 + 84) = *(_DWORD *)(v4 + 64);
    for ( i = 0; i < *(_DWORD *)(v4 + 64); ++i )
    {
      if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
        __asan_report_load8(&context->player);
      ItemComp = Player::getItemComp(context->player);
      PlayerItemComp::createItem(
        (std::vector<std::shared_ptr<Item>> *)(v4 + 144),
        ItemComp,
        (const ItemParam *)(v4 + 80));
      if ( std::vector<std::shared_ptr<Item>>::size((const std::vector<std::shared_ptr<Item>> *const)(v4 + 144)) == 1 )
      {
        v15 = std::vector<std::shared_ptr<Item>>::operator[]((std::vector<std::shared_ptr<Item>> *const)(v4 + 144), 0LL);
        std::shared_ptr<Item>::operator=((std::shared_ptr<Item> *const)(v4 + 216), v15);
        *(float *)(v4 + 232) = *(float *)(v4 + 232) + 1.0;
        *(float *)(v4 + 240) = *(float *)(v4 + 240) + 1.0;
        if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
          __asan_report_load8(&context->player);
        *(_DWORD *)(v4 + 276) = Player::getUid(context->player);
        if ( *(_BYTE *)(((unsigned __int64)&context->scene >> 3) + 0x7FFF8000) )
          __asan_report_load8(&context->scene);
        *(_DWORD *)(v4 + 208) = Scene::genNewEntityId(context->scene, PROT_ENTITY_GADGET);
        ActionReason::ActionReason(&action_reason, ACTION_REASON_GM, ITEM_LIMIT_GM);
        v16 = *(_QWORD *)&action_reason.quest_id;
        *(_QWORD *)(v4 + 292) = *(_QWORD *)&action_reason.reason_type;
        *(_QWORD *)(v4 + 300) = v16;
        *(_DWORD *)(v4 + 308) = action_reason.item_exceed_msg_type;
        *(_WORD *)(v4 + 312) = *(_WORD *)&action_reason.is_general_reward_hiden;
        EntityMgr::createTrifle((const TrifleParam *)(v4 + 112));
        if ( std::operator==<Gadget>((const std::shared_ptr<Gadget> *)(v4 + 112), 0LL) )
        {
          common::milog::MiLogStream::create(
            &v25,
            &common::milog::MiLogDefault::default_log_obj_,
            3u,
            "./src/player/gm/player_gm_comp.cpp",
            "createTrifle",
            1816);
          v17 = common::milog::MiLogStream::operator<<<char [29],(char *[29])0>(
                  &v25,
                  (const char (*)[29])"createTrifle fails, item_id:");
          common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v17, (const unsigned int *)(v4 + 48));
          common::milog::MiLogStream::~MiLogStream(&v25);
          v3 = -1;
          v18 = 0;
        }
        else
        {
          v19 = std::__shared_ptr_access<Gadget,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Gadget,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 112));
          if ( *(_BYTE *)(((unsigned __int64)v19 >> 3) + 0x7FFF8000) )
            __asan_report_load8(v19);
          v20 = *(_QWORD *)v19->baseclass_0 + 56LL;
          if ( *(_BYTE *)((v20 >> 3) + 0x7FFF8000) )
            __asan_report_load8(*(_QWORD *)v19->baseclass_0 + 56LL);
          v21 = *(void (__fastcall **)(std::__shared_ptr_access<Gadget,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *, Scene *, VisionContext *))v20;
          if ( *(_BYTE *)(((unsigned __int64)&context->scene >> 3) + 0x7FFF8000) )
            __asan_report_load8(&context->scene);
          v21(v19, context->scene, &VisionContext::meet_context);
          v18 = 1;
        }
        std::shared_ptr<Gadget>::~shared_ptr((std::shared_ptr<Gadget> *const)(v4 + 112));
        v14 = v18 == 1;
      }
      else
      {
        common::milog::MiLogStream::create(
          &v25,
          &common::milog::MiLogDefault::default_log_obj_,
          3u,
          "./src/player/gm/player_gm_comp.cpp",
          "createTrifle",
          1804);
        v11 = common::milog::MiLogStream::operator<<<char [27],(char *[27])0>(
                &v25,
                (const char (*)[27])"createItem fails, item_id:");
        v12 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                v11,
                (const unsigned int *)(v4 + 80));
        v13 = common::milog::MiLogStream::operator<<<char [7],(char *[7])0>(v12, (const char (*)[7])"count:");
        common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v13, (const unsigned int *)(v4 + 84));
        common::milog::MiLogStream::~MiLogStream(&v25);
        v3 = -1;
        v14 = 0;
      }
      std::vector<std::shared_ptr<Item>>::~vector((std::vector<std::shared_ptr<Item>> *const)(v4 + 144));
      if ( !v14 )
        goto LABEL_39;
    }
    v3 = 0;
LABEL_39:
    TrifleParam::~TrifleParam((TrifleParam *const)(v4 + 208));
  }
  else
  {
    common::milog::MiLogStream::create(
      &v25,
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/player/gm/player_gm_comp.cpp",
      "createTrifle",
      1788);
    v8 = common::milog::MiLogStream::operator<<<char [22],(char *[22])0>(
           &v25,
           (const char (*)[22])"trifle num too large:");
    common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v8, (const unsigned int *)(v4 + 64));
    common::milog::MiLogStream::~MiLogStream(&v25);
    v3 = -1;
  }
  result = v3;
  if ( v26 == (char *)v4 )
  {
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8008) = 0LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8010) = 0LL;
    *(_DWORD *)((v4 >> 3) + 0x7FFF8018) = 0;
    *(_DWORD *)((v4 >> 3) + 0x7FFF8028) = 0;
  }
  else
  {
    *(_QWORD *)v4 = 1172321806LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8020) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v4 >> 3) + 0x7FFF8028) = -168430091;
  }
  return result;
};

// Line 1824: range 0000000017D72D3C-0000000017D72DDE
void __cdecl procGroupRegister::procGroupRegister(procGroupRegister *const this)
{
  std::function<int(GmContext&,const std::vector<std::string>&,std::string&)> *v1; // rax
  std::allocator<char> __a; // [rsp+1Fh] [rbp-31h] BYREF
  std::string __k; // [rsp+20h] [rbp-30h] BYREF

  std::allocator<char>::allocator(&__a);
  std::string::basic_string<std::allocator<char>>(&__k, "GROUP", &__a);
  v1 = std::unordered_map<std::string,std::function<int ()(GmContext &,std::vector<std::string> const&,std::string&)>>::operator[](
         &GmUtils::op_func_map[abi:cxx11],
         &__k);
  std::function<int ()(GmContext &,std::vector<std::string> const&,std::string&)>::operator=<int (&)(GmContext &,std::vector<std::string> const&,std::string&)>(
    v1,
    (int (*)(GmContext *, const std::vector<std::string> *, std::string *))procGroup);
  std::string::~string(&__k);
  std::allocator<char>::~allocator(&__a);
};

// Line 1825: range 0000000017BCCAD9-0000000017BD168B
int32_t __cdecl procGroup(GmContext *context, const std::vector<std::string> *param_vec, std::string *ret_msg)
{
  int32_t v3; // r13d
  unsigned __int64 v4; // r14
  __int64 v5; // rax
  _DWORD *v6; // r12
  const std::string *v7; // rax
  const std::string *v8; // rax
  Scene *scene; // r13
  const std::string *v10; // rax
  common::milog::MiLogStream *v11; // rax
  common::milog::MiLogStream *v12; // rax
  const std::string *v13; // rax
  Group *v14; // rax
  Group *v15; // rax
  const std::string *v16; // rax
  const std::string *v17; // rax
  Scene *v18; // r13
  __gnu_cxx::__normal_iterator<unsigned int*,std::vector<unsigned int> >::reference v19; // rax
  uint32_t *v20; // rdx
  SceneBlockGroupComp *v21; // rax
  const std::string *v22; // rax
  SceneBlockGroupComp *BlockGroupComp; // rax
  const std::string *v24; // rax
  const std::string *v25; // rax
  Home *v26; // rax
  HomeSceneComp *SceneComp; // r13
  uint32_t SceneId; // eax
  unsigned int *v29; // rax
  uint32_t *v30; // rdx
  SceneBlockGroupComp *v31; // rax
  unsigned __int64 v32; // rdx
  LuaConfigMgr *p_lua_config_mgr; // r13
  uint32_t v34; // eax
  SceneBlockGroupComp *v35; // rax
  SceneBlockGroupComp *v36; // rcx
  unsigned __int64 v37; // rax
  void (__fastcall *v38)(unsigned __int64, SceneBlockGroupComp *, _QWORD); // r8
  const std::string *v39; // rax
  common::milog::MiLogStream *v40; // r13
  std::__shared_ptr_access<PlayerWorld,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v41; // r13
  const std::string *v42; // rax
  SceneBlockGroupComp *v43; // rax
  unsigned __int64 v44; // rdx
  const std::string *v45; // rax
  const std::string *v46; // rax
  Scene *v47; // r13
  __gnu_cxx::__normal_iterator<unsigned int*,std::vector<unsigned int> >::reference v48; // rax
  uint32_t *v49; // rdx
  SceneBlockGroupComp *v50; // rax
  const std::string *v51; // rax
  SceneBlockGroupComp *v52; // rax
  const std::string *v53; // rax
  const std::string *v54; // rax
  SceneBlockGroupComp *v55; // rax
  unsigned __int64 v56; // rdx
  const std::string *v57; // rax
  SceneBlockGroupComp *v58; // rax
  unsigned __int64 v59; // rdx
  const std::string *v60; // rax
  const std::string *v61; // rax
  const std::string *v62; // rax
  const std::string *v63; // rax
  std::vector<std::string>::const_reference v65; // rax
  const std::string *v66; // rax
  const std::string *v67; // rax
  common::milog::MiLogStream *v69; // rax
  common::milog::MiLogStream *v70; // rax
  Group *v71; // rax
  const std::string *v72; // rax
  const std::string *v74; // rax
  std::vector<std::string>::const_reference v75; // rax
  SceneBlockGroupComp *v76; // rax
  common::tools::StringStream<common::tools::FixedBuffer<4096> > *v77; // rax
  common::tools::StringStream<common::tools::FixedBuffer<4096> > *v78; // rax
  common::tools::StringStream<common::tools::FixedBuffer<4096> > *v79; // rax
  common::tools::StringStream<common::tools::FixedBuffer<4096> > *v80; // rax
  common::tools::StringStream<common::tools::FixedBuffer<4096> > *v81; // rax
  const std::string *v82; // rax
  const std::string *v84; // rax
  std::vector<std::string>::const_reference v85; // rax
  Group *v86; // rax
  common::tools::StringStream<common::tools::FixedBuffer<4096> > *v87; // rax
  common::tools::StringStream<common::tools::FixedBuffer<4096> > *v88; // rax
  common::tools::StringStream<common::tools::FixedBuffer<4096> > *v89; // rax
  common::tools::StringStream<common::tools::FixedBuffer<4096> > *v90; // rax
  common::tools::StringStream<common::tools::FixedBuffer<4096> > *v91; // rax
  const std::string *v92; // rax
  std::vector<std::string>::const_reference v94; // rax
  const std::string *v95; // rax
  const std::string *v96; // rax
  common::milog::MiLogStream *v98; // rax
  common::milog::MiLogStream *v99; // rax
  Group *v100; // rax
  const std::string *v101; // rax
  const std::string *v103; // rax
  std::vector<std::string>::const_reference v104; // rax
  SceneBlockGroupComp *v105; // rax
  common::tools::StringStream<common::tools::FixedBuffer<4096> > *v106; // rax
  common::tools::StringStream<common::tools::FixedBuffer<4096> > *v107; // rax
  common::tools::StringStream<common::tools::FixedBuffer<4096> > *v108; // rax
  common::tools::StringStream<common::tools::FixedBuffer<4096> > *v109; // rax
  common::tools::StringStream<common::tools::FixedBuffer<4096> > *v110; // r13
  unsigned int *v111; // rax
  unsigned int *v112; // rdx
  const std::string *v113; // rax
  const std::string *v114; // rax
  SceneBlockGroupComp *v115; // rax
  SceneBlockGroupComp *v116; // r13
  unsigned __int64 v117; // rax
  const std::string *v118; // rax
  const std::string *v119; // rax
  Scene *v120; // r13
  const std::string *v121; // rax
  common::milog::MiLogStream *v122; // rax
  common::milog::MiLogStream *v123; // rax
  Group *v124; // rax
  const std::string *v125; // rax
  const std::string *v126; // rax
  Scene *v127; // r13
  const std::string *v128; // rax
  common::milog::MiLogStream *v129; // rax
  common::milog::MiLogStream *v130; // rax
  Group *v131; // rax
  const std::string *v132; // rax
  const std::string *v133; // rax
  const std::string *v134; // rax
  uint32_t v135; // eax
  std::__shared_ptr_access<Gadget,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v136; // rax
  unsigned __int64 v137; // rdx
  unsigned int (__fastcall *v138)(std::__shared_ptr_access<Gadget,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *, Player *, unsigned __int64); // r8
  const std::string *v139; // rax
  const std::string *v140; // rax
  const std::string *v141; // rax
  const std::string *v142; // rax
  uint32_t v143; // eax
  uint32_t v144; // r13d
  uint32_t Uid; // esi
  const std::string *v146; // rax
  const std::string *v147; // rax
  const std::string *v148; // rax
  Group *v149; // rax
  common::milog::MiLogStream *v150; // rax
  common::milog::MiLogStream *v151; // rax
  common::milog::MiLogStream *v152; // rax
  const std::string *v153; // rax
  const std::string *v154; // rax
  Group *v155; // rax
  const std::string *v156; // rax
  const std::string *v157; // rax
  std::__shared_ptr_access<Group,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v158; // rax
  Json::Value *v159; // rax
  std::__shared_ptr_access<DungeonScene,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v160; // rax
  uint32_t v161; // eax
  unsigned __int64 v162; // rax
  Json::Value_0 *v163; // rax
  unsigned __int64 v164; // rax
  Json::Value_0 *v165; // rax
  BlockDataMgr *BlockDataMgr; // rax
  unsigned __int64 v167; // rax
  Json::Value_0 *v168; // rax
  unsigned __int64 v169; // rax
  Json::Value_0 *v170; // rax
  int __f; // [rsp+0h] [rbp-A30h]
  __int64 (__fastcall *__fb)(SceneBlockGroupComp *, unsigned __int64, __int64); // [rsp+0h] [rbp-A30h]
  uint32_t __fa; // [rsp+0h] [rbp-A30h]
  void *__f_8; // [rsp+8h] [rbp-A28h]
  int __l; // [rsp+10h] [rbp-A20h]
  std::initializer_list<unsigned int> __lo; // [rsp+10h] [rbp-A20h]
  int __la; // [rsp+10h] [rbp-A20h]
  int __lb; // [rsp+10h] [rbp-A20h]
  WorktopComp *__lc; // [rsp+10h] [rbp-A20h]
  int __ld; // [rsp+10h] [rbp-A20h]
  int __le; // [rsp+10h] [rbp-A20h]
  _BOOL4 __lf; // [rsp+10h] [rbp-A20h]
  _BOOL4 __lg; // [rsp+10h] [rbp-A20h]
  int __lh; // [rsp+10h] [rbp-A20h]
  common::milog::MiLogStream *__li; // [rsp+10h] [rbp-A20h]
  PlayerSceneComp *__lj; // [rsp+10h] [rbp-A20h]
  Json::Value_0 *__lk; // [rsp+10h] [rbp-A20h]
  Json::Value_0 *__ll; // [rsp+10h] [rbp-A20h]
  Json::Value_0 *__lm; // [rsp+10h] [rbp-A20h]
  Json::Value_0 *__ln; // [rsp+10h] [rbp-A20h]
  char __l_8; // [rsp+18h] [rbp-A18h]
  int v193; // [rsp+20h] [rbp-A10h]
  std::string *ret_msgb; // [rsp+28h] [rbp-A08h]
  uint32_t dungeon_id; // [rsp+40h] [rbp-9F0h]
  int value; // [rsp+44h] [rbp-9ECh]
  uint32_t group_id_2; // [rsp+48h] [rbp-9E8h]
  int foreach_ret; // [rsp+4Ch] [rbp-9E4h]
  uint32_t group_id_0; // [rsp+50h] [rbp-9E0h]
  uint32_t group_id; // [rsp+54h] [rbp-9DCh]
  std::vector<unsigned int>::iterator __for_begin; // [rsp+58h] [rbp-9D8h] BYREF
  const proto::GroupProductBin *one_off_product_bin; // [rsp+60h] [rbp-9D0h]
  const google::protobuf::Map<unsigned int,unsigned int> *__for_range_3; // [rsp+68h] [rbp-9C8h]
  const google::protobuf::Map<unsigned int,unsigned int> *__for_range_4; // [rsp+70h] [rbp-9C0h]
  const unsigned int *p_key_0; // [rsp+78h] [rbp-9B8h]
  const unsigned int *p_key; // [rsp+80h] [rbp-9B0h]
  const proto::GroupProductBin *product_bin_ptr; // [rsp+88h] [rbp-9A8h]
  const google::protobuf::Map<unsigned int,unsigned int> *__for_range_5; // [rsp+90h] [rbp-9A0h]
  const google::protobuf::Map<unsigned int,unsigned int> *__for_range_6; // [rsp+98h] [rbp-998h]
  const unsigned int *p_key_2; // [rsp+A0h] [rbp-990h]
  const unsigned int *p_key_1; // [rsp+A8h] [rbp-988h]
  std::vector<unsigned int> *__for_range_2; // [rsp+B0h] [rbp-980h]
  const SceneScriptConfig *scene_script_config_ptr; // [rsp+B8h] [rbp-978h]
  const std::unordered_map<unsigned int,GroupInfoScriptConfig> *__for_range_1; // [rsp+C0h] [rbp-970h]
  const std::pair<unsigned int const,GroupInfoScriptConfig> *v216; // [rsp+C8h] [rbp-968h]
  std::tuple_element<0,const std::pair<unsigned int const,GroupInfoScriptConfig> >::type *group_id_1; // [rsp+D0h] [rbp-960h]
  std::tuple_element<1,const std::pair<unsigned int const,GroupInfoScriptConfig> >::type *group_info_config; // [rsp+D8h] [rbp-958h]
  std::set<unsigned int> *__for_range_0; // [rsp+E0h] [rbp-950h]
  std::vector<unsigned int> *__for_range; // [rsp+E8h] [rbp-948h]
  google::protobuf::Map<unsigned int,unsigned int>::const_iterator __for_begin_0; // [rsp+F0h] [rbp-940h] BYREF
  std::string v222; // [rsp+110h] [rbp-920h] BYREF
  std::string __lhs; // [rsp+130h] [rbp-900h] BYREF
  Json::Value_0 other; // [rsp+150h] [rbp-8E0h] BYREF
  char v225[2224]; // [rsp+180h] [rbp-8B0h] BYREF

  v4 = (unsigned __int64)v225;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v5 = __asan_stack_malloc_6(2176LL);
    if ( v5 )
      v4 = v5;
  }
  *(_QWORD *)v4 = 1102416563LL;
  *(_QWORD *)(v4 + 8) = "20 48 1 19 is_replaceable:2303 64 4 13 group_id:2346 80 4 13 group_id:1848 96 4 12 options:2360 "
                        "112 8 12 cnt_opt:2135 144 16 14 group_ptr:2265 176 16 14 group_ptr:2352 208 16 22 dungeon_scene_"
                        "ptr:2386 240 24 18 group_id_list:1874 304 28 16 log_context:1831 368 32 22 group_json_string:236"
                        "7 432 32 8 key:2029 496 32 8 key:2057 560 40 15 group_info:2359 640 40 15 status_ret:2368 720 40"
                        " 21 group_json_value:2375 800 48 22 active_groups_set:1905 880 160 19 script_context:1835 1104 2"
                        "72 16 json_reader:2374 1440 600 14 group_bin:2365";
  *(_QWORD *)(v4 + 16) = procGroup;
  v6 = (_DWORD *)(v4 >> 3);
  v6[536862720] = -235802127;
  v6[536862721] = -234753551;
  v6[536862722] = -234556924;
  v6[536862723] = 61956;
  v6[536862723] = -234881024;
  v6[536862724] = 62194;
  v6[536862725] = 62194;
  v6[536862726] = 62194;
  v6[536862727] = 62194;
  v6[536862728] = -218959360;
  v6[536862729] = 62194;
  v6[536862730] = -219020288;
  v6[536862731] = 62194;
  v6[536862732] = -219021312;
  v6[536862733] = 62194;
  v6[536862734] = -219021312;
  v6[536862735] = 62194;
  v6[536862736] = -219021312;
  v6[536862737] = 62194;
  v6[536862738] = -234881024;
  v6[536862739] = -218959118;
  v6[536862741] = -218959360;
  v6[536862742] = 62194;
  v6[536862743] = -234881024;
  v6[536862744] = -218959118;
  v6[536862746] = -219021312;
  v6[536862747] = 62194;
  v6[536862752] = -219021312;
  v6[536862753] = -218959118;
  v6[536862754] = 62194;
  v6[536862763] = -218959118;
  v6[536862764] = -218959118;
  v6[536862783] = -218103808;
  v6[536862784] = -202116109;
  v6[536862785] = -202116109;
  v6[536862786] = -202116109;
  v6[536862787] = -202116109;
  if ( std::vector<std::string>::size(param_vec) <= 1 )
  {
    common::milog::MiLogStream::create(
      (common::milog::MiLogStream *)(v4 + 496),
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/player/gm/player_gm_comp.cpp",
      "procGroup",
      1828);
    common::milog::MiLogStream::operator<<<char [17],(char *[17])0>(
      (common::milog::MiLogStream *const)(v4 + 496),
      (const char (*)[17])"param not enough");
    common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v4 + 496));
    v3 = -1;
    goto LABEL_393;
  }
  *(_DWORD *)(v4 + 304) = 11;
  *(_DWORD *)(v4 + 308) = 0;
  *(_DWORD *)(v4 + 312) = 0;
  *(_DWORD *)(v4 + 316) = 0;
  *(_DWORD *)(v4 + 320) = 0;
  *(_DWORD *)(v4 + 324) = 0;
  *(_DWORD *)(v4 + 328) = 0;
  ScriptContext::ScriptContext((ScriptContext *const)(v4 + 880));
  v7 = std::vector<std::string>::operator[](param_vec, 0LL);
  if ( std::operator==<char>(v7, "REFRESH") )
  {
    v8 = std::vector<std::string>::operator[](param_vec, 1uLL);
    if ( std::operator==<char>(v8, _f.gap0) )
    {
      if ( *(_BYTE *)(((unsigned __int64)&context->scene >> 3) + 0x7FFF8000) )
        __asan_report_load8(&context->scene);
      scene = context->scene;
      std::function<ForeachPolicy ()(Group &)>::function<procGroup(GmContext &,std::vector<std::string> const&,std::string&)::{lambda(Group &)#1},void,void>(
        (std::function<ForeachPolicy(Group&)> *const)(v4 + 496),
        (procGroup::<lambda(Group&)>)__PAIR128__(v4 + 304, v4 + 880));
      Scene::foreachGroup(scene, (std::function<ForeachPolicy(Group&)> *)(v4 + 496));
      std::function<ForeachPolicy ()(Group &)>::~function((std::function<ForeachPolicy(Group&)> *const)(v4 + 496));
      goto LABEL_391;
    }
    *(_DWORD *)(v4 + 80) = 0;
    v10 = std::vector<std::string>::operator[](param_vec, 1uLL);
    common::tools::StringUtils::strToNum<unsigned int>(v10, (unsigned int *)(v4 + 80), 1);
    if ( *(_BYTE *)(((unsigned __int64)&context->scene >> 3) + 0x7FFF8000) )
      __asan_report_load8(&context->scene);
    Scene::findGroup((Scene *const)(v4 + 208), (uint32_t)context->scene);
    if ( std::operator==<Group>((const std::shared_ptr<Group> *)(v4 + 208), 0LL) )
    {
      common::milog::MiLogStream::create(
        (common::milog::MiLogStream *)(v4 + 496),
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/player/gm/player_gm_comp.cpp",
        "procGroup",
        1853);
      v11 = common::milog::MiLogStream::operator<<<char [11],(char *[11])0>(
              (common::milog::MiLogStream *const)(v4 + 496),
              (const char (*)[11])"findGroup ");
      v12 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v11, (const unsigned int *)(v4 + 80));
      common::milog::MiLogStream::operator<<<char [7],(char *[7])0>(v12, (const char (*)[7])" fails");
      common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v4 + 496));
      v3 = -1;
    }
    else
    {
      *(_DWORD *)(v4 + 96) = 0;
      if ( std::vector<std::string>::size(param_vec) <= 2 )
      {
        v15 = std::__shared_ptr_access<Group,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Group,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 208));
        v3 = Group::refresh(v15, (const ScriptContext *)(v4 + 880), *(SuiteLogContext *)(v4 + 304));
      }
      else
      {
        v13 = std::vector<std::string>::operator[](param_vec, 2uLL);
        common::tools::StringUtils::strToNum<unsigned int>(v13, (unsigned int *)(v4 + 96), 1);
        if ( *(_DWORD *)(v4 + 96) )
        {
          v14 = std::__shared_ptr_access<Group,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Group,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 208));
          v3 = Group::refresh(
                 v14,
                 (const ScriptContext *)(v4 + 880),
                 *(SuiteLogContext *)(v4 + 304),
                 *(_DWORD *)(v4 + 96));
        }
        else
        {
          common::milog::MiLogStream::create(
            (common::milog::MiLogStream *)(v4 + 496),
            &common::milog::MiLogDefault::default_log_obj_,
            3u,
            "./src/player/gm/player_gm_comp.cpp",
            "procGroup",
            1862);
          common::milog::MiLogStream::operator<<<char [20],(char *[20])0>(
            (common::milog::MiLogStream *const)(v4 + 496),
            (const char (*)[20])"suite_id is invalid");
          common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v4 + 496));
          v3 = -1;
        }
      }
    }
    goto LABEL_99;
  }
  v16 = std::vector<std::string>::operator[](param_vec, 0LL);
  if ( std::operator==<char>(v16, "UNLOAD") )
  {
    v17 = std::vector<std::string>::operator[](param_vec, 1uLL);
    if ( !std::operator==<char>(v17, _f.gap0) )
    {
      *(_DWORD *)(v4 + 96) = 0;
      v22 = std::vector<std::string>::operator[](param_vec, 1uLL);
      common::tools::StringUtils::strToNum<unsigned int>(v22, (unsigned int *)(v4 + 96), 1);
      if ( *(_BYTE *)(((unsigned __int64)&context->scene >> 3) + 0x7FFF8000) )
        __asan_report_load8(&context->scene);
      BlockGroupComp = Scene::getBlockGroupComp(context->scene);
      v3 = SceneBlockGroupComp::unloadGroupByGm(BlockGroupComp, *(_DWORD *)(v4 + 96));
      goto LABEL_392;
    }
    std::vector<unsigned int>::vector((std::vector<unsigned int> *const)(v4 + 240));
    if ( *(_BYTE *)(((unsigned __int64)&context->scene >> 3) + 0x7FFF8000) )
      __asan_report_load8(&context->scene);
    v18 = context->scene;
    std::function<ForeachPolicy ()(Group &)>::function<procGroup(GmContext &,std::vector<std::string> const&,std::string&)::{lambda(Group &)#2},void,void>(
      (std::function<ForeachPolicy(Group&)> *const)(v4 + 496),
      (procGroup::<lambda(Group&)>_0)(v4 + 240));
    Scene::foreachGroup(v18, (std::function<ForeachPolicy(Group&)> *)(v4 + 496));
    std::function<ForeachPolicy ()(Group &)>::~function((std::function<ForeachPolicy(Group&)> *const)(v4 + 496));
    __for_range = (std::vector<unsigned int> *)(v4 + 240);
    __for_begin._M_current = std::vector<unsigned int>::begin((std::vector<unsigned int> *const)(v4 + 240))._M_current;
    *(std::vector<unsigned int>::iterator *)(v4 + 112) = std::vector<unsigned int>::end((std::vector<unsigned int> *const)(v4 + 240));
    while ( __gnu_cxx::operator!=<unsigned int *,std::vector<unsigned int>>(
              &__for_begin,
              (const __gnu_cxx::__normal_iterator<unsigned int*,std::vector<unsigned int> > *)(v4 + 112)) )
    {
      v19 = __gnu_cxx::__normal_iterator<unsigned int *,std::vector<unsigned int>>::operator*(&__for_begin);
      v20 = v19;
      if ( *(_BYTE *)(((unsigned __int64)v19 >> 3) + 0x7FFF8000) != 0
        && (char)(((unsigned __int8)v19 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)v19 >> 3) + 0x7FFF8000) )
      {
        __asan_report_load4(v19);
      }
      group_id = *v20;
      if ( *(_BYTE *)(((unsigned __int64)&context->scene >> 3) + 0x7FFF8000) )
        __asan_report_load8(&context->scene);
      v21 = Scene::getBlockGroupComp(context->scene);
      SceneBlockGroupComp::unloadGroupByGm(v21, group_id);
      __gnu_cxx::__normal_iterator<unsigned int *,std::vector<unsigned int>>::operator++(&__for_begin);
    }
    goto LABEL_31;
  }
  v24 = std::vector<std::string>::operator[](param_vec, 0LL);
  if ( std::operator==<char>(v24, "LOAD") )
  {
    v25 = std::vector<std::string>::operator[](param_vec, 1uLL);
    if ( std::operator==<char>(v25, _f.gap0) )
    {
      if ( *(_BYTE *)(((unsigned __int64)&context->scene >> 3) + 0x7FFF8000) )
        __asan_report_load8(&context->scene);
      if ( Scene::isHomeScene(context->scene) )
      {
        if ( *(_BYTE *)(((unsigned __int64)&context->scene >> 3) + 0x7FFF8000) )
          __asan_report_load8(&context->scene);
        Scene::getOwnHome((const Scene *const)(v4 + 208));
        if ( std::operator==<Home>((const std::shared_ptr<Home> *)(v4 + 208), 0LL) )
        {
          v3 = -1;
        }
        else
        {
          v26 = std::__shared_ptr_access<Home,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Home,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 208));
          SceneComp = Home::getSceneComp(v26);
          if ( *(_BYTE *)(((unsigned __int64)&context->scene >> 3) + 0x7FFF8000) )
            __asan_report_load8(&context->scene);
          SceneId = Scene::getSceneId(context->scene);
          HomeSceneComp::getHomeGroupSet((std::set<unsigned int> *)(v4 + 800), SceneComp, SceneId);
          __for_range_0 = (std::set<unsigned int> *)(v4 + 800);
          __for_begin._M_current = (unsigned int *)std::set<unsigned int>::begin((const std::set<unsigned int> *const)(v4 + 800))._M_node;
          *(std::set<unsigned int>::iterator *)(v4 + 112) = std::set<unsigned int>::end((const std::set<unsigned int> *const)(v4 + 800));
          while ( std::operator!=(
                    (const std::_Rb_tree_const_iterator<unsigned int>::_Self *)&__for_begin,
                    (const std::_Rb_tree_const_iterator<unsigned int>::_Self *)(v4 + 112)) )
          {
            v29 = (unsigned int *)std::_Rb_tree_const_iterator<unsigned int>::operator*((const std::_Rb_tree_const_iterator<unsigned int> *const)&__for_begin);
            v30 = v29;
            if ( *(_BYTE *)(((unsigned __int64)v29 >> 3) + 0x7FFF8000) != 0
              && (char)(((unsigned __int8)v29 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)v29 >> 3) + 0x7FFF8000) )
            {
              __asan_report_load4(v29);
            }
            group_id_0 = *v30;
            if ( *(_BYTE *)(((unsigned __int64)&context->scene >> 3) + 0x7FFF8000) )
              __asan_report_load8(&context->scene);
            v31 = Scene::getBlockGroupComp(context->scene);
            if ( *(_BYTE *)(((unsigned __int64)v31 >> 3) + 0x7FFF8000) )
              __asan_report_load8(v31);
            v32 = (unsigned __int64)(v31->_vptr_SceneCompBase + 18);
            if ( *(_BYTE *)((v32 >> 3) + 0x7FFF8000) )
              __asan_report_load8(v31->_vptr_SceneCompBase + 18);
            (*(void (__fastcall **)(unsigned __int64, SceneBlockGroupComp *, _QWORD))v32)(v4 + 176, v31, group_id_0);
            std::shared_ptr<Group>::~shared_ptr((std::shared_ptr<Group> *const)(v4 + 176));
            std::_Rb_tree_const_iterator<unsigned int>::operator++((std::_Rb_tree_const_iterator<unsigned int> *const)&__for_begin);
          }
          v3 = 0;
          std::set<unsigned int>::~set((std::set<unsigned int> *const)(v4 + 800));
        }
        std::shared_ptr<Home>::~shared_ptr((std::shared_ptr<Home> *const)(v4 + 208));
      }
      else
      {
        ServiceBox::findService<GameserverService>();
        GameserverService::getConfig((GameserverService *const)(v4 + 208));
        p_lua_config_mgr = &std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 208))->design_config.lua_config_mgr;
        if ( *(_BYTE *)(((unsigned __int64)&context->scene >> 3) + 0x7FFF8000) )
          __asan_report_load8(&context->scene);
        v34 = Scene::getSceneId(context->scene);
        scene_script_config_ptr = LuaConfigMgr::findSceneScriptConfig(p_lua_config_mgr, v34);
        std::shared_ptr<Config>::~shared_ptr((std::shared_ptr<Config> *const)(v4 + 208));
        if ( scene_script_config_ptr )
        {
          __for_range_1 = &scene_script_config_ptr->group_info_map;
          __for_begin._M_current = (unsigned int *)std::unordered_map<unsigned int,GroupInfoScriptConfig>::begin(&scene_script_config_ptr->group_info_map)._M_cur;
          *(std::unordered_map<unsigned int,GroupInfoScriptConfig>::const_iterator *)(v4 + 112) = std::unordered_map<unsigned int,GroupInfoScriptConfig>::end(&scene_script_config_ptr->group_info_map);
          while ( std::__detail::operator!=<std::pair<unsigned int const,GroupInfoScriptConfig>,false>(
                    (const std::__detail::_Node_iterator_base<std::pair<unsigned int const,GroupInfoScriptConfig>,false> *)&__for_begin,
                    (const std::__detail::_Node_iterator_base<std::pair<unsigned int const,GroupInfoScriptConfig>,false> *)(v4 + 112)) )
          {
            v216 = std::__detail::_Node_const_iterator<std::pair<unsigned int const,GroupInfoScriptConfig>,false,false>::operator*((const std::__detail::_Node_const_iterator<std::pair<unsigned int const,GroupInfoScriptConfig>,false,false> *const)&__for_begin);
            group_id_1 = std::get<0ul,unsigned int const,GroupInfoScriptConfig>(v216);
            group_info_config = (std::tuple_element<1,const std::pair<unsigned int const,GroupInfoScriptConfig> >::type *)std::get<1ul,unsigned int const,GroupInfoScriptConfig>(v216);
            if ( *(char *)(((unsigned __int64)&group_info_config->is_dynamic_load >> 3) + 0x7FFF8000) < 0 )
              __asan_report_load1(&group_info_config->is_dynamic_load);
            if ( !group_info_config->is_dynamic_load )
            {
              if ( *(_BYTE *)(((unsigned __int64)&context->scene >> 3) + 0x7FFF8000) )
                __asan_report_load8(&context->scene);
              v35 = Scene::getBlockGroupComp(context->scene);
              v36 = v35;
              if ( *(_BYTE *)(((unsigned __int64)v35 >> 3) + 0x7FFF8000) )
                __asan_report_load8(v35);
              v37 = (unsigned __int64)(v36->_vptr_SceneCompBase + 18);
              if ( *(_BYTE *)((v37 >> 3) + 0x7FFF8000) )
                __asan_report_load8(v36->_vptr_SceneCompBase + 18);
              v38 = *(void (__fastcall **)(unsigned __int64, SceneBlockGroupComp *, _QWORD))v37;
              if ( *(_BYTE *)(((unsigned __int64)group_id_1 >> 3) + 0x7FFF8000) != 0
                && (char)(((unsigned __int8)group_id_1 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)group_id_1 >> 3)
                                                                             + 0x7FFF8000) )
              {
                __asan_report_load4(group_id_1);
              }
              v38(v4 + 208, v36, *group_id_1);
              std::shared_ptr<Group>::~shared_ptr((std::shared_ptr<Group> *const)(v4 + 208));
            }
            std::__detail::_Node_const_iterator<std::pair<unsigned int const,GroupInfoScriptConfig>,false,false>::operator++((std::__detail::_Node_const_iterator<std::pair<unsigned int const,GroupInfoScriptConfig>,false,false> *const)&__for_begin);
          }
          v3 = 0;
        }
        else
        {
          v3 = -1;
        }
      }
      goto LABEL_392;
    }
    v39 = std::vector<std::string>::operator[](param_vec, 1uLL);
    if ( std::operator==<char>(v39, "ALL_LOADED_GROUP") )
    {
      if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
        __asan_report_load8(&context->player);
      Player::getSceneComp(context->player);
      PlayerSceneComp::getCurWorld<PlayerWorld>((const PlayerSceneComp *const)(v4 + 208));
      if ( std::operator==<PlayerWorld>(0LL, (const std::shared_ptr<PlayerWorld> *)(v4 + 208)) )
      {
        common::milog::MiLogStream::create(
          (common::milog::MiLogStream *)(v4 + 496),
          &common::milog::MiLogDefault::default_log_obj_,
          3u,
          "./src/player/gm/player_gm_comp.cpp",
          "procGroup",
          1933);
        v40 = common::milog::MiLogStream::operator<<<char [26],(char *[26])0>(
                (common::milog::MiLogStream *const)(v4 + 496),
                (const char (*)[26])"getCurWorld failed, uid: ");
        if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
          __asan_report_load8(&context->player);
        *(_DWORD *)(v4 + 96) = Player::getUid(context->player);
        common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v40, (const unsigned int *)(v4 + 96));
        common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v4 + 496));
        v3 = -1;
      }
      else
      {
        v41 = std::__shared_ptr_access<PlayerWorld,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<PlayerWorld,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 208));
        std::function<ForeachPolicy ()(Scene &)>::function<procGroup(GmContext &,std::vector<std::string> const&,std::string&)::{lambda(Scene &)#3},void,void>(
          (std::function<ForeachPolicy(Scene&)> *const)(v4 + 496),
          (procGroup::<lambda(Scene&)>)(v4 - 48));
        foreach_ret = World::foreachScene(v41, (std::function<ForeachPolicy(Scene&)> *)(v4 + 496));
        std::function<ForeachPolicy ()(Scene &)>::~function((std::function<ForeachPolicy(Scene&)> *const)(v4 + 496));
        if ( foreach_ret )
          v3 = foreach_ret;
        else
          v3 = 0;
      }
      std::shared_ptr<PlayerWorld>::~shared_ptr((std::shared_ptr<PlayerWorld> *const)(v4 + 208));
      goto LABEL_392;
    }
    *(_DWORD *)(v4 + 96) = 0;
    v42 = std::vector<std::string>::operator[](param_vec, 1uLL);
    common::tools::StringUtils::strToNum<unsigned int>(v42, (unsigned int *)(v4 + 96), 1);
    if ( *(_BYTE *)(((unsigned __int64)&context->scene >> 3) + 0x7FFF8000) )
      __asan_report_load8(&context->scene);
    v43 = Scene::getBlockGroupComp(context->scene);
    if ( *(_BYTE *)(((unsigned __int64)v43 >> 3) + 0x7FFF8000) )
      __asan_report_load8(v43);
    v44 = (unsigned __int64)(v43->_vptr_SceneCompBase + 18);
    if ( *(_BYTE *)((v44 >> 3) + 0x7FFF8000) )
      __asan_report_load8(v43->_vptr_SceneCompBase + 18);
    (*(void (__fastcall **)(unsigned __int64, SceneBlockGroupComp *, _QWORD))v44)(
      v4 + 208,
      v43,
      *(unsigned int *)(v4 + 96));
    if ( std::operator!=<Group>((const std::shared_ptr<Group> *)(v4 + 208), 0LL) )
      v3 = 0;
    else
      v3 = -1;
LABEL_99:
    std::shared_ptr<Group>::~shared_ptr((std::shared_ptr<Group> *const)(v4 + 208));
    goto LABEL_392;
  }
  v45 = std::vector<std::string>::operator[](param_vec, 0LL);
  if ( std::operator==<char>(v45, "REMOVE") )
  {
    v46 = std::vector<std::string>::operator[](param_vec, 1uLL);
    if ( !std::operator==<char>(v46, _f.gap0) )
    {
      *(_DWORD *)(v4 + 96) = 0;
      v51 = std::vector<std::string>::operator[](param_vec, 1uLL);
      common::tools::StringUtils::strToNum<unsigned int>(v51, (unsigned int *)(v4 + 96), 1);
      if ( *(_BYTE *)(((unsigned __int64)&context->scene >> 3) + 0x7FFF8000) )
        __asan_report_load8(&context->scene);
      v52 = Scene::getBlockGroupComp(context->scene);
      v3 = SceneBlockGroupComp::removeGroupByGm(v52, *(_DWORD *)(v4 + 96));
      goto LABEL_392;
    }
    std::vector<unsigned int>::vector((std::vector<unsigned int> *const)(v4 + 240));
    if ( *(_BYTE *)(((unsigned __int64)&context->scene >> 3) + 0x7FFF8000) )
      __asan_report_load8(&context->scene);
    v47 = context->scene;
    std::function<ForeachPolicy ()(Group &)>::function<procGroup(GmContext &,std::vector<std::string> const&,std::string&)::{lambda(Group &)#4},void,void>(
      (std::function<ForeachPolicy(Group&)> *const)(v4 + 496),
      (procGroup::<lambda(Group&)>_0)(v4 + 240));
    Scene::foreachGroup(v47, (std::function<ForeachPolicy(Group&)> *)(v4 + 496));
    std::function<ForeachPolicy ()(Group &)>::~function((std::function<ForeachPolicy(Group&)> *const)(v4 + 496));
    __for_range_2 = (std::vector<unsigned int> *)(v4 + 240);
    __for_begin._M_current = std::vector<unsigned int>::begin((std::vector<unsigned int> *const)(v4 + 240))._M_current;
    *(std::vector<unsigned int>::iterator *)(v4 + 112) = std::vector<unsigned int>::end((std::vector<unsigned int> *const)(v4 + 240));
    while ( __gnu_cxx::operator!=<unsigned int *,std::vector<unsigned int>>(
              &__for_begin,
              (const __gnu_cxx::__normal_iterator<unsigned int*,std::vector<unsigned int> > *)(v4 + 112)) )
    {
      v48 = __gnu_cxx::__normal_iterator<unsigned int *,std::vector<unsigned int>>::operator*(&__for_begin);
      v49 = v48;
      if ( *(_BYTE *)(((unsigned __int64)v48 >> 3) + 0x7FFF8000) != 0
        && (char)(((unsigned __int8)v48 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)v48 >> 3) + 0x7FFF8000) )
      {
        __asan_report_load4(v48);
      }
      group_id_2 = *v49;
      if ( *(_BYTE *)(((unsigned __int64)&context->scene >> 3) + 0x7FFF8000) )
        __asan_report_load8(&context->scene);
      v50 = Scene::getBlockGroupComp(context->scene);
      SceneBlockGroupComp::removeGroupByGm(v50, group_id_2);
      __gnu_cxx::__normal_iterator<unsigned int *,std::vector<unsigned int>>::operator++(&__for_begin);
    }
LABEL_31:
    std::vector<unsigned int>::~vector((std::vector<unsigned int> *const)(v4 + 240));
LABEL_391:
    v3 = 0;
    goto LABEL_392;
  }
  v53 = std::vector<std::string>::operator[](param_vec, 0LL);
  if ( std::operator==<char>(v53, "DEAD") )
  {
    v54 = std::vector<std::string>::operator[](param_vec, 1uLL);
    if ( std::operator==<char>(v54, "SCENE") )
    {
      if ( *(_BYTE *)(((unsigned __int64)&context->scene >> 3) + 0x7FFF8000) )
        __asan_report_load8(&context->scene);
      v55 = Scene::getBlockGroupComp(context->scene);
      if ( *(_BYTE *)(((unsigned __int64)v55 >> 3) + 0x7FFF8000) )
        __asan_report_load8(v55);
      v56 = (unsigned __int64)(v55->_vptr_SceneCompBase + 22);
      if ( *(_BYTE *)((v56 >> 3) + 0x7FFF8000) )
        __asan_report_load8(v55->_vptr_SceneCompBase + 22);
LABEL_123:
      (*(void (__fastcall **)(SceneBlockGroupComp *))v56)(v55);
      goto LABEL_391;
    }
    *(_DWORD *)(v4 + 96) = 0;
    v57 = std::vector<std::string>::operator[](param_vec, 1uLL);
    common::tools::StringUtils::strToNum<unsigned int>(v57, (unsigned int *)(v4 + 96), 1);
    if ( *(_BYTE *)(((unsigned __int64)&context->scene >> 3) + 0x7FFF8000) )
      __asan_report_load8(&context->scene);
    v58 = Scene::getBlockGroupComp(context->scene);
    if ( *(_BYTE *)(((unsigned __int64)v58 >> 3) + 0x7FFF8000) )
      __asan_report_load8(v58);
    v59 = (unsigned __int64)(v58->_vptr_SceneCompBase + 19);
    if ( *(_BYTE *)((v59 >> 3) + 0x7FFF8000) )
      __asan_report_load8(v58->_vptr_SceneCompBase + 19);
    goto LABEL_130;
  }
  v60 = std::vector<std::string>::operator[](param_vec, 0LL);
  if ( std::operator==<char>(v60, "RECOVER") )
  {
    v61 = std::vector<std::string>::operator[](param_vec, 1uLL);
    if ( std::operator==<char>(v61, "SCENE") )
    {
      if ( *(_BYTE *)(((unsigned __int64)&context->scene >> 3) + 0x7FFF8000) )
        __asan_report_load8(&context->scene);
      v55 = Scene::getBlockGroupComp(context->scene);
      if ( *(_BYTE *)(((unsigned __int64)v55 >> 3) + 0x7FFF8000) )
        __asan_report_load8(v55);
      v56 = (unsigned __int64)(v55->_vptr_SceneCompBase + 23);
      if ( *(_BYTE *)((v56 >> 3) + 0x7FFF8000) )
        __asan_report_load8(v55->_vptr_SceneCompBase + 23);
      goto LABEL_123;
    }
    *(_DWORD *)(v4 + 96) = 0;
    v62 = std::vector<std::string>::operator[](param_vec, 1uLL);
    common::tools::StringUtils::strToNum<unsigned int>(v62, (unsigned int *)(v4 + 96), 1);
    if ( *(_BYTE *)(((unsigned __int64)&context->scene >> 3) + 0x7FFF8000) )
      __asan_report_load8(&context->scene);
    v58 = Scene::getBlockGroupComp(context->scene);
    if ( *(_BYTE *)(((unsigned __int64)v58 >> 3) + 0x7FFF8000) )
      __asan_report_load8(v58);
    v59 = (unsigned __int64)(v58->_vptr_SceneCompBase + 21);
    if ( *(_BYTE *)((v59 >> 3) + 0x7FFF8000) )
      __asan_report_load8(v58->_vptr_SceneCompBase + 21);
LABEL_130:
    v3 = (*(__int64 (__fastcall **)(SceneBlockGroupComp *, _QWORD))v59)(v58, *(unsigned int *)(v4 + 96));
    goto LABEL_392;
  }
  v63 = std::vector<std::string>::operator[](param_vec, 0LL);
  if ( std::operator==<char>(v63, "SETVAR") )
  {
    if ( std::vector<std::string>::size(param_vec) <= 3 || std::vector<std::string>::size(&context->raw_param_vec) <= 3 )
      goto LABEL_327;
    *(_DWORD *)(v4 + 80) = 0;
    v65 = std::vector<std::string>::operator[](&context->raw_param_vec, 2uLL);
    std::string::basic_string(v4 + 432, v65);
    *(_DWORD *)(v4 + 96) = 0;
    v66 = std::vector<std::string>::operator[](param_vec, 1uLL);
    if ( common::tools::StringUtils::strToNum<unsigned int>(v66, (unsigned int *)(v4 + 80), 1) )
      goto LABEL_159;
    v67 = std::vector<std::string>::operator[](param_vec, 3uLL);
    if ( common::tools::StringUtils::strToNum<int>(v67, (int *)(v4 + 96), 1) )
      goto LABEL_159;
    if ( *(_BYTE *)(((unsigned __int64)&context->scene >> 3) + 0x7FFF8000) )
      __asan_report_load8(&context->scene);
    Scene::findGroup((Scene *const)(v4 + 208), (uint32_t)context->scene);
    if ( std::operator==<Group>((const std::shared_ptr<Group> *)(v4 + 208), 0LL) )
    {
      common::milog::MiLogStream::create(
        (common::milog::MiLogStream *)(v4 + 496),
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/player/gm/player_gm_comp.cpp",
        "procGroup",
        2039);
      v69 = common::milog::MiLogStream::operator<<<char [11],(char *[11])0>(
              (common::milog::MiLogStream *const)(v4 + 496),
              (const char (*)[11])"findGroup ");
      v70 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v69, (const unsigned int *)(v4 + 80));
      common::milog::MiLogStream::operator<<<char [7],(char *[7])0>(v70, (const char (*)[7])" fails");
      common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v4 + 496));
      v3 = -1;
    }
    else
    {
      v71 = std::__shared_ptr_access<Group,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Group,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 208));
      v3 = Group::setVariableValue(v71, (const std::string *)(v4 + 432), *(_DWORD *)(v4 + 96));
    }
    goto LABEL_165;
  }
  v72 = std::vector<std::string>::operator[](param_vec, 0LL);
  if ( std::operator==<char>(v72, "GETVAR") )
  {
    if ( std::vector<std::string>::size(param_vec) <= 2 || std::vector<std::string>::size(&context->raw_param_vec) <= 2 )
      goto LABEL_327;
    *(_DWORD *)(v4 + 96) = 0;
    v74 = std::vector<std::string>::operator[](param_vec, 1uLL);
    if ( !common::tools::StringUtils::strToNum<unsigned int>(v74, (unsigned int *)(v4 + 96), 1) )
    {
      v75 = std::vector<std::string>::operator[](&context->raw_param_vec, 2uLL);
      std::string::basic_string(v4 + 496, v75);
      if ( *(_BYTE *)(((unsigned __int64)&context->scene >> 3) + 0x7FFF8000) )
        __asan_report_load8(&context->scene);
      v76 = Scene::getBlockGroupComp(context->scene);
      value = SceneBlockGroupComp::getGroupVariableValue(v76, *(_DWORD *)(v4 + 96), (const std::string *)(v4 + 496));
      common::tools::StringStream<common::tools::FixedBuffer<4096>>::StringStream((common::tools::StringStream<common::tools::FixedBuffer<4096> > *const)(v4 + 208));
      v77 = common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(
              (common::tools::StringStream<common::tools::FixedBuffer<4096> > *const)(v4 + 208),
              " group_id[");
      v78 = common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(v77, *(_DWORD *)(v4 + 96));
      v79 = common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(v78, "] variable[");
      v80 = common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(
              v79,
              (const std::string *)(v4 + 496));
      v81 = common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(v80, off_263539C0);
      common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(v81, value);
      common::tools::StringStream<common::tools::FixedBuffer<4096>>::str[abi:cxx11](
        &v222,
        (common::tools::StringStream<common::tools::FixedBuffer<4096> > *const)(v4 + 208));
      std::string::operator=(ret_msg, &v222);
      std::string::~string(&v222);
      v3 = 0;
      common::tools::StringStream<common::tools::FixedBuffer<4096>>::~StringStream((common::tools::StringStream<common::tools::FixedBuffer<4096> > *const)(v4 + 208));
      std::string::~string((void *)(v4 + 496));
      goto LABEL_392;
    }
LABEL_174:
    std::string::operator=(ret_msg, " parse group_id failed: ");
    v3 = -1;
    goto LABEL_392;
  }
  v82 = std::vector<std::string>::operator[](param_vec, 0LL);
  if ( std::operator==<char>(v82, "GETTEMPVAR") )
  {
    if ( std::vector<std::string>::size(param_vec) <= 2 || std::vector<std::string>::size(&context->raw_param_vec) <= 2 )
      goto LABEL_327;
    *(_DWORD *)(v4 + 80) = 0;
    v84 = std::vector<std::string>::operator[](param_vec, 1uLL);
    if ( !common::tools::StringUtils::strToNum<unsigned int>(v84, (unsigned int *)(v4 + 80), 1) )
    {
      v85 = std::vector<std::string>::operator[](&context->raw_param_vec, 2uLL);
      std::string::basic_string(v4 + 496, v85);
      if ( *(_BYTE *)(((unsigned __int64)&context->scene >> 3) + 0x7FFF8000) )
        __asan_report_load8(&context->scene);
      Scene::findGroup((Scene *const)(v4 + 176), (uint32_t)context->scene);
      if ( std::operator==<Group>(0LL, (const std::shared_ptr<Group> *)(v4 + 176)) )
      {
        std::string::operator=(ret_msg, "findGroup fails");
        v3 = -1;
      }
      else
      {
        *(_DWORD *)(v4 + 96) = 0;
        v86 = std::__shared_ptr_access<Group,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Group,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 176));
        if ( Group::getTempVariableValue(v86, (const std::string *)(v4 + 496), (int32_t *)(v4 + 96)) )
        {
          std::string::operator=(ret_msg, "getTempVariableValue fails (possibly not found)");
          v3 = -1;
        }
        else
        {
          common::tools::StringStream<common::tools::FixedBuffer<4096>>::StringStream((common::tools::StringStream<common::tools::FixedBuffer<4096> > *const)(v4 + 208));
          v87 = common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(
                  (common::tools::StringStream<common::tools::FixedBuffer<4096> > *const)(v4 + 208),
                  " group_id[");
          v88 = common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(v87, *(_DWORD *)(v4 + 80));
          v89 = common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(v88, "] temp_variable[");
          v90 = common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(
                  v89,
                  (const std::string *)(v4 + 496));
          v91 = common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(v90, off_263539C0);
          common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(v91, *(_DWORD *)(v4 + 96));
          common::tools::StringStream<common::tools::FixedBuffer<4096>>::str[abi:cxx11](
            (std::string *)(v4 + 368),
            (common::tools::StringStream<common::tools::FixedBuffer<4096> > *const)(v4 + 208));
          std::string::operator=(ret_msg, v4 + 368);
          std::string::~string((void *)(v4 + 368));
          v3 = 0;
          common::tools::StringStream<common::tools::FixedBuffer<4096>>::~StringStream((common::tools::StringStream<common::tools::FixedBuffer<4096> > *const)(v4 + 208));
        }
      }
      std::shared_ptr<Group>::~shared_ptr((std::shared_ptr<Group> *const)(v4 + 176));
      std::string::~string((void *)(v4 + 496));
      goto LABEL_392;
    }
    goto LABEL_174;
  }
  v92 = std::vector<std::string>::operator[](param_vec, 0LL);
  if ( std::operator==<char>(v92, "SETTEMPVAR") )
  {
    if ( std::vector<std::string>::size(param_vec) <= 3 || std::vector<std::string>::size(&context->raw_param_vec) <= 3 )
      goto LABEL_327;
    *(_DWORD *)(v4 + 80) = 0;
    v94 = std::vector<std::string>::operator[](&context->raw_param_vec, 2uLL);
    std::string::basic_string(v4 + 432, v94);
    *(_DWORD *)(v4 + 96) = 0;
    v95 = std::vector<std::string>::operator[](param_vec, 1uLL);
    if ( common::tools::StringUtils::strToNum<unsigned int>(v95, (unsigned int *)(v4 + 80), 1)
      || (v96 = std::vector<std::string>::operator[](param_vec, 3uLL),
          common::tools::StringUtils::strToNum<int>(v96, (int *)(v4 + 96), 1)) )
    {
LABEL_159:
      std::string::operator=(ret_msg, " param not valid");
      v3 = -1;
LABEL_166:
      std::string::~string((void *)(v4 + 432));
      goto LABEL_392;
    }
    if ( *(_BYTE *)(((unsigned __int64)&context->scene >> 3) + 0x7FFF8000) )
      __asan_report_load8(&context->scene);
    Scene::findGroup((Scene *const)(v4 + 208), (uint32_t)context->scene);
    if ( std::operator==<Group>(0LL, (const std::shared_ptr<Group> *)(v4 + 208)) )
    {
      common::milog::MiLogStream::create(
        (common::milog::MiLogStream *)(v4 + 496),
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/player/gm/player_gm_comp.cpp",
        "procGroup",
        2115);
      v98 = common::milog::MiLogStream::operator<<<char [11],(char *[11])0>(
              (common::milog::MiLogStream *const)(v4 + 496),
              (const char (*)[11])"findGroup ");
      v99 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v98, (const unsigned int *)(v4 + 80));
      common::milog::MiLogStream::operator<<<char [7],(char *[7])0>(v99, (const char (*)[7])" fails");
      common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v4 + 496));
      v3 = -1;
    }
    else
    {
      v100 = std::__shared_ptr_access<Group,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Group,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 208));
      v3 = Group::setTempVariableValue(v100, (const std::string *)(v4 + 432), *(_DWORD *)(v4 + 96));
    }
LABEL_165:
    std::shared_ptr<Group>::~shared_ptr((std::shared_ptr<Group> *const)(v4 + 208));
    goto LABEL_166;
  }
  v101 = std::vector<std::string>::operator[](param_vec, 0LL);
  if ( std::operator==<char>(v101, "GET_TRIGGER") )
  {
    if ( std::vector<std::string>::size(param_vec) <= 2 || std::vector<std::string>::size(&context->raw_param_vec) <= 2 )
      goto LABEL_327;
    *(_DWORD *)(v4 + 96) = 0;
    v103 = std::vector<std::string>::operator[](param_vec, 1uLL);
    if ( !common::tools::StringUtils::strToNum<unsigned int>(v103, (unsigned int *)(v4 + 96), 1) )
    {
      v104 = std::vector<std::string>::operator[](&context->raw_param_vec, 2uLL);
      std::string::basic_string(v4 + 496, v104);
      if ( *(_BYTE *)(((unsigned __int64)&context->scene >> 3) + 0x7FFF8000) )
        __asan_report_load8(&context->scene);
      v105 = Scene::getBlockGroupComp(context->scene);
      *(std::optional<unsigned int> *)(v4 + 112) = SceneBlockGroupComp::getGroupTriggerCount(
                                                     v105,
                                                     *(_DWORD *)(v4 + 96),
                                                     (const std::string *)(v4 + 496));
      if ( !std::optional<unsigned int>::has_value((const std::optional<unsigned int> *const)(v4 + 112)) )
      {
        std::string::operator=(ret_msg, " trigger not exist in config");
        v3 = -1;
      }
      else
      {
        common::tools::StringStream<common::tools::FixedBuffer<4096>>::StringStream((common::tools::StringStream<common::tools::FixedBuffer<4096> > *const)(v4 + 208));
        v106 = common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(
                 (common::tools::StringStream<common::tools::FixedBuffer<4096> > *const)(v4 + 208),
                 " group_id[");
        v107 = common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(v106, *(_DWORD *)(v4 + 96));
        v108 = common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(v107, "] trigger[");
        v109 = common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(
                 v108,
                 (const std::string *)(v4 + 496));
        v110 = common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(v109, off_263539C0);
        v111 = std::optional<unsigned int>::value((std::optional<unsigned int> *const)(v4 + 112));
        v112 = v111;
        if ( *(_BYTE *)(((unsigned __int64)v111 >> 3) + 0x7FFF8000) != 0
          && (char)(((unsigned __int8)v111 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)v111 >> 3) + 0x7FFF8000) )
        {
          __asan_report_load4(v111);
        }
        common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(v110, *v112);
        common::tools::StringStream<common::tools::FixedBuffer<4096>>::str[abi:cxx11](
          &__lhs,
          (common::tools::StringStream<common::tools::FixedBuffer<4096> > *const)(v4 + 208));
        std::string::operator=(ret_msg, &__lhs);
        std::string::~string(&__lhs);
        v3 = 0;
        common::tools::StringStream<common::tools::FixedBuffer<4096>>::~StringStream((common::tools::StringStream<common::tools::FixedBuffer<4096> > *const)(v4 + 208));
      }
      std::string::~string((void *)(v4 + 496));
      goto LABEL_392;
    }
LABEL_329:
    std::string::operator=(ret_msg, " parse group_id failed");
    v3 = -1;
    goto LABEL_392;
  }
  v113 = std::vector<std::string>::operator[](param_vec, 0LL);
  if ( std::operator==<char>(v113, "UNREGISTER") )
  {
    *(_DWORD *)(v4 + 80) = 0;
    v114 = std::vector<std::string>::operator[](param_vec, 1uLL);
    common::tools::StringUtils::strToNum<unsigned int>(v114, (unsigned int *)(v4 + 80), 1);
    if ( *(_BYTE *)(((unsigned __int64)&context->scene >> 3) + 0x7FFF8000) )
      __asan_report_load8(&context->scene);
    v115 = Scene::getBlockGroupComp(context->scene);
    v116 = v115;
    if ( *(_BYTE *)(((unsigned __int64)v115 >> 3) + 0x7FFF8000) )
      __asan_report_load8(v115);
    v117 = (unsigned __int64)(v116->_vptr_SceneCompBase + 13);
    if ( *(_BYTE *)((v117 >> 3) + 0x7FFF8000) )
      __asan_report_load8(v116->_vptr_SceneCompBase + 13);
    __fb = *(__int64 (__fastcall **)(SceneBlockGroupComp *, unsigned __int64, __int64))v117;
    *(_DWORD *)(v4 + 96) = *(_DWORD *)(v4 + 80);
    __lo._M_array = (std::initializer_list<unsigned int>::iterator)(v4 + 96);
    __lo._M_len = 1LL;
    std::allocator<unsigned int>::allocator((std::allocator<unsigned int> *const)(v4 + 48));
    std::vector<unsigned int>::vector(
      (std::vector<unsigned int> *const)(v4 + 240),
      __lo,
      (const std::vector<unsigned int>::allocator_type *)(v4 + 48));
    v3 = __fb(v116, v4 + 240, 1LL);
    std::vector<unsigned int>::~vector((std::vector<unsigned int> *const)(v4 + 240));
    std::allocator<unsigned int>::~allocator((std::allocator<unsigned int> *const)(v4 + 48));
    goto LABEL_392;
  }
  v118 = std::vector<std::string>::operator[](param_vec, 0LL);
  if ( std::operator==<char>(v118, "DEL_ALL_GATHER") )
  {
    v119 = std::vector<std::string>::operator[](param_vec, 1uLL);
    if ( std::operator==<char>(v119, _f.gap0) )
    {
      if ( *(_BYTE *)(((unsigned __int64)&context->scene >> 3) + 0x7FFF8000) )
        __asan_report_load8(&context->scene);
      v120 = context->scene;
      std::function<ForeachPolicy ()(Group &)>::function<procGroup(GmContext &,std::vector<std::string> const&,std::string&)::{lambda(Group &)#5},void,void>(
        (std::function<ForeachPolicy(Group&)> *const)(v4 + 496),
        (procGroup::<lambda(Group&)>_1)&_f);
      Scene::foreachGroup(v120, (std::function<ForeachPolicy(Group&)> *)(v4 + 496));
      std::function<ForeachPolicy ()(Group &)>::~function((std::function<ForeachPolicy(Group&)> *const)(v4 + 496));
    }
    else
    {
      *(_DWORD *)(v4 + 96) = 0;
      v121 = std::vector<std::string>::operator[](param_vec, 1uLL);
      common::tools::StringUtils::strToNum<unsigned int>(v121, (unsigned int *)(v4 + 96), 1);
      if ( *(_BYTE *)(((unsigned __int64)&context->scene >> 3) + 0x7FFF8000) )
        __asan_report_load8(&context->scene);
      Scene::findGroup((Scene *const)(v4 + 208), (uint32_t)context->scene);
      if ( std::operator==<Group>((const std::shared_ptr<Group> *)(v4 + 208), 0LL) )
      {
        common::milog::MiLogStream::create(
          (common::milog::MiLogStream *)(v4 + 496),
          &common::milog::MiLogDefault::default_log_obj_,
          3u,
          "./src/player/gm/player_gm_comp.cpp",
          "procGroup",
          2169);
        v122 = common::milog::MiLogStream::operator<<<char [11],(char *[11])0>(
                 (common::milog::MiLogStream *const)(v4 + 496),
                 (const char (*)[11])"findGroup ");
        v123 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                 v122,
                 (const unsigned int *)(v4 + 96));
        common::milog::MiLogStream::operator<<<char [7],(char *[7])0>(v123, (const char (*)[7])" fails");
        common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v4 + 496));
        v3 = -1;
        __la = 0;
      }
      else
      {
        v124 = std::__shared_ptr_access<Group,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Group,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 208));
        Group::setAllGatherDelByGm(v124);
        __la = 1;
      }
      std::shared_ptr<Group>::~shared_ptr((std::shared_ptr<Group> *const)(v4 + 208));
      if ( __la != 1 )
        goto LABEL_392;
    }
    v3 = 0;
    goto LABEL_392;
  }
  v125 = std::vector<std::string>::operator[](param_vec, 0LL);
  if ( std::operator==<char>(v125, "KILL_ALL_MONSTER") )
  {
    v126 = std::vector<std::string>::operator[](param_vec, 1uLL);
    if ( std::operator==<char>(v126, _f.gap0) )
    {
      if ( *(_BYTE *)(((unsigned __int64)&context->scene >> 3) + 0x7FFF8000) )
        __asan_report_load8(&context->scene);
      v127 = context->scene;
      std::function<ForeachPolicy ()(Group &)>::function<procGroup(GmContext &,std::vector<std::string> const&,std::string&)::{lambda(Group &)#6},void,void>(
        (std::function<ForeachPolicy(Group&)> *const)(v4 + 496),
        (procGroup::<lambda(Group&)>_1)&_f);
      Scene::foreachGroup(v127, (std::function<ForeachPolicy(Group&)> *)(v4 + 496));
      std::function<ForeachPolicy ()(Group &)>::~function((std::function<ForeachPolicy(Group&)> *const)(v4 + 496));
    }
    else
    {
      *(_DWORD *)(v4 + 96) = 0;
      v128 = std::vector<std::string>::operator[](param_vec, 1uLL);
      common::tools::StringUtils::strToNum<unsigned int>(v128, (unsigned int *)(v4 + 96), 1);
      if ( *(_BYTE *)(((unsigned __int64)&context->scene >> 3) + 0x7FFF8000) )
        __asan_report_load8(&context->scene);
      Scene::findGroup((Scene *const)(v4 + 208), (uint32_t)context->scene);
      if ( std::operator==<Group>((const std::shared_ptr<Group> *)(v4 + 208), 0LL) )
      {
        common::milog::MiLogStream::create(
          (common::milog::MiLogStream *)(v4 + 496),
          &common::milog::MiLogDefault::default_log_obj_,
          3u,
          "./src/player/gm/player_gm_comp.cpp",
          "procGroup",
          2193);
        v129 = common::milog::MiLogStream::operator<<<char [11],(char *[11])0>(
                 (common::milog::MiLogStream *const)(v4 + 496),
                 (const char (*)[11])"findGroup ");
        v130 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                 v129,
                 (const unsigned int *)(v4 + 96));
        common::milog::MiLogStream::operator<<<char [7],(char *[7])0>(v130, (const char (*)[7])" fails");
        common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v4 + 496));
        v3 = -1;
        __lb = 0;
      }
      else
      {
        v131 = std::__shared_ptr_access<Group,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Group,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 208));
        Group::setAllMonsterKilledByGm(v131);
        __lb = 1;
      }
      std::shared_ptr<Group>::~shared_ptr((std::shared_ptr<Group> *const)(v4 + 208));
      if ( __lb != 1 )
        goto LABEL_392;
    }
    v3 = 0;
    goto LABEL_392;
  }
  v132 = std::vector<std::string>::operator[](param_vec, 0LL);
  if ( std::operator==<char>(v132, "GADGET_INTERACT") )
  {
    if ( std::vector<std::string>::size(param_vec) <= 2 )
      goto LABEL_327;
    *(_DWORD *)(v4 + 80) = 0;
    v133 = std::vector<std::string>::operator[](param_vec, 1uLL);
    if ( common::tools::StringUtils::strToNum<unsigned int>(v133, (unsigned int *)(v4 + 80), 1) )
      goto LABEL_329;
    *(_DWORD *)(v4 + 96) = 0;
    v134 = std::vector<std::string>::operator[](param_vec, 2uLL);
    if ( common::tools::StringUtils::strToNum<unsigned int>(v134, (unsigned int *)(v4 + 96), 1) )
    {
LABEL_263:
      std::string::operator=(ret_msg, " parse config_id failed");
      v3 = -1;
      goto LABEL_392;
    }
    if ( *(_BYTE *)(((unsigned __int64)&context->scene >> 3) + 0x7FFF8000) )
      __asan_report_load8(&context->scene);
    Scene::findGroup((Scene *const)(v4 + 144), (uint32_t)context->scene);
    if ( std::operator==<Group>(0LL, (const std::shared_ptr<Group> *)(v4 + 144)) )
      goto LABEL_267;
    v135 = (unsigned int)std::__shared_ptr_access<Group,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Group,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 144));
    Group::findEntityByConfigId<Gadget>((Group *const)(v4 + 176), v135);
    if ( !std::operator==<Gadget>((const std::shared_ptr<Gadget> *)(v4 + 176), 0LL) )
    {
      *(_DWORD *)(v4 + 208) = 0;
      *(_DWORD *)(v4 + 212) = 0;
      *(_DWORD *)(v4 + 216) = 0;
      *(_DWORD *)(v4 + 220) = 0;
      v136 = std::__shared_ptr_access<Gadget,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Gadget,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 176));
      if ( *(_BYTE *)(((unsigned __int64)v136 >> 3) + 0x7FFF8000) )
        __asan_report_load8(v136);
      v137 = *(_QWORD *)v136->baseclass_0 + 208LL;
      if ( *(_BYTE *)((v137 >> 3) + 0x7FFF8000) )
        __asan_report_load8(*(_QWORD *)v136->baseclass_0 + 208LL);
      v138 = *(unsigned int (__fastcall **)(std::__shared_ptr_access<Gadget,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *, Player *, unsigned __int64))v137;
      if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
        __asan_report_load8(&context->player);
      if ( v138(v136, context->player, v4 + 208) )
      {
        std::string::operator=(ret_msg, " gadget failed interact.");
        v3 = -1;
      }
      else
      {
        v3 = 0;
      }
      goto LABEL_279;
    }
LABEL_269:
    std::string::operator=(ret_msg, " gadget not found in group");
    v3 = -1;
LABEL_279:
    std::shared_ptr<Gadget>::~shared_ptr((std::shared_ptr<Gadget> *const)(v4 + 176));
    goto LABEL_280;
  }
  v139 = std::vector<std::string>::operator[](param_vec, 0LL);
  if ( std::operator==<char>(v139, "WORKTOP_SELECT") )
  {
    if ( std::vector<std::string>::size(param_vec) <= 3 )
      goto LABEL_327;
    *(_DWORD *)(v4 + 64) = 0;
    v140 = std::vector<std::string>::operator[](param_vec, 1uLL);
    if ( common::tools::StringUtils::strToNum<unsigned int>(v140, (unsigned int *)(v4 + 64), 1) )
      goto LABEL_329;
    *(_DWORD *)(v4 + 80) = 0;
    v141 = std::vector<std::string>::operator[](param_vec, 2uLL);
    if ( common::tools::StringUtils::strToNum<unsigned int>(v141, (unsigned int *)(v4 + 80), 1) )
      goto LABEL_263;
    *(_DWORD *)(v4 + 96) = 0;
    v142 = std::vector<std::string>::operator[](param_vec, 3uLL);
    if ( common::tools::StringUtils::strToNum<unsigned int>(v142, (unsigned int *)(v4 + 96), 1) )
    {
      std::string::operator=(ret_msg, " parse option_id failed");
      v3 = -1;
      goto LABEL_392;
    }
    if ( *(_BYTE *)(((unsigned __int64)&context->scene >> 3) + 0x7FFF8000) )
      __asan_report_load8(&context->scene);
    Scene::findGroup((Scene *const)(v4 + 144), (uint32_t)context->scene);
    if ( std::operator==<Group>(0LL, (const std::shared_ptr<Group> *)(v4 + 144)) )
    {
LABEL_267:
      std::string::operator=(ret_msg, " group find failed.");
      v3 = -1;
LABEL_280:
      std::shared_ptr<Group>::~shared_ptr((std::shared_ptr<Group> *const)(v4 + 144));
      goto LABEL_392;
    }
    v143 = (unsigned int)std::__shared_ptr_access<Group,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Group,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 144));
    Group::findEntityByConfigId<Gadget>((Group *const)(v4 + 176), v143);
    if ( !std::operator==<Gadget>((const std::shared_ptr<Gadget> *)(v4 + 176), 0LL) )
    {
      std::__shared_ptr_access<Gadget,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Gadget,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 176));
      EcsBase<Gadget,GadgetCompBase,28u>::findComp<WorktopComp>((const EcsBase<Gadget,GadgetCompBase,28> *const)(v4 + 208));
      if ( std::operator==<WorktopComp>((const std::shared_ptr<WorktopComp> *)(v4 + 208), 0LL) )
      {
        std::string::operator=(ret_msg, "findComp WorktopComp failed");
        v3 = -1;
      }
      else
      {
        __lc = std::__shared_ptr_access<WorktopComp,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<WorktopComp,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 208));
        v144 = *(_DWORD *)(v4 + 96);
        if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
          __asan_report_load8(&context->player);
        Uid = Player::getUid(context->player);
        if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
          __asan_report_load8(&context->player);
        if ( WorktopComp::selectOption(__lc, context->player, Uid, v144) )
        {
          std::string::operator=(ret_msg, " select worktop opt failed.");
          v3 = -1;
        }
        else
        {
          v3 = 0;
        }
      }
      std::shared_ptr<WorktopComp>::~shared_ptr((std::shared_ptr<WorktopComp> *const)(v4 + 208));
      goto LABEL_279;
    }
    goto LABEL_269;
  }
  v146 = std::vector<std::string>::operator[](param_vec, 0LL);
  if ( !std::operator==<char>(v146, "SET_REPLACEABLE") )
  {
    v153 = std::vector<std::string>::operator[](param_vec, 0LL);
    if ( std::operator==<char>(v153, "DESTROY") )
    {
      if ( std::vector<std::string>::size(param_vec) > 1 )
      {
        *(_DWORD *)(v4 + 96) = 0;
        v154 = std::vector<std::string>::operator[](param_vec, 1uLL);
        if ( !common::tools::StringUtils::strToNum<unsigned int>(v154, (unsigned int *)(v4 + 96), 1) )
        {
          if ( *(_BYTE *)(((unsigned __int64)&context->scene >> 3) + 0x7FFF8000) )
            __asan_report_load8(&context->scene);
          Scene::findGroup((Scene *const)(v4 + 208), (uint32_t)context->scene);
          if ( std::operator==<Group>(0LL, (const std::shared_ptr<Group> *)(v4 + 208)) )
          {
            std::string::operator=(ret_msg, " group find failed.");
            v3 = -1;
            __le = 0;
          }
          else
          {
            v155 = std::__shared_ptr_access<Group,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Group,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 208));
            Group::addAllVariableValueByOne(v155);
            __le = 1;
          }
          std::shared_ptr<Group>::~shared_ptr((std::shared_ptr<Group> *const)(v4 + 208));
          if ( __le != 1 )
            goto LABEL_392;
          goto LABEL_391;
        }
        goto LABEL_329;
      }
    }
    else
    {
      v156 = std::vector<std::string>::operator[](param_vec, 0LL);
      if ( !std::operator==<char>(v156, "GET_INFO") )
        goto LABEL_391;
      if ( std::vector<std::string>::size(param_vec) > 1 )
      {
        *(_DWORD *)(v4 + 64) = 0;
        v157 = std::vector<std::string>::operator[](param_vec, 1uLL);
        if ( !common::tools::StringUtils::strToNum<unsigned int>(v157, (unsigned int *)(v4 + 64), 1) )
        {
          if ( *(_BYTE *)(((unsigned __int64)&context->scene >> 3) + 0x7FFF8000) )
            __asan_report_load8(&context->scene);
          Scene::findGroup((Scene *const)(v4 + 176), (uint32_t)context->scene);
          if ( std::operator==<Group>(0LL, (const std::shared_ptr<Group> *)(v4 + 176)) )
          {
            std::string::operator=(ret_msg, " group find failed.");
            v3 = -1;
            __lf = 0;
          }
          else
          {
            Json::Value::Value(v4 + 560, 0LL);
            google::protobuf::util::JsonPrintOptions::JsonPrintOptions((google::protobuf::util::JsonPrintOptions *const)(v4 + 96));
            *(_BYTE *)(v4 + 96) = 1;
            *(_BYTE *)(v4 + 97) = 1;
            *(_BYTE *)(v4 + 99) = 1;
            proto::GroupBin::GroupBin((proto::GroupBin *const)(v4 + 1440));
            v158 = std::__shared_ptr_access<Group,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Group,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 176));
            Group::toBin(v158, (proto::GroupBin *)(v4 + 1440));
            std::string::basic_string(v4 + 368);
            google::protobuf::util::MessageToJsonString(
              (google::protobuf::util::Status *)(v4 + 640),
              (google::protobuf::Message *)(v4 + 1440),
              __f,
              __f_8,
              __l,
              __l_8,
              v193,
              ret_msg);
            if ( !google::protobuf::util::Status::ok((const google::protobuf::util::Status *const)(v4 + 640)) )
            {
              google::protobuf::util::Status::ToString[abi:cxx11](v4 + 496, v4 + 640);
              std::literals::string_literals::operator"" s[abi:cxx11](&__lhs, "Parse group bin to json fail! ", 0x1EuLL);
              std::operator+<char>((std::string *)(v4 + 432), &__lhs, (std::string *)(v4 + 496));
              std::string::operator=(ret_msgb, v4 + 432);
              std::string::~string((void *)(v4 + 432));
              std::string::~string(&__lhs);
              std::string::~string((void *)(v4 + 496));
              v3 = -1;
              __lg = 0;
            }
            else
            {
              Json::Reader::Reader((Json::Reader *)(v4 + 1104));
              Json::Value::Value(v4 + 720, 0LL);
              if ( !Json::Reader::parse(
                      (Json::Reader *const)(v4 + 1104),
                      (const std::string *)(v4 + 368),
                      (Json::Value *)(v4 + 720),
                      1) )
              {
                common::milog::MiLogStream::create(
                  (common::milog::MiLogStream *)(v4 + 496),
                  &common::milog::MiLogDefault::default_log_obj_,
                  3u,
                  "./src/player/gm/player_gm_comp.cpp",
                  "procGroup",
                  2378);
                common::milog::MiLogStream::operator<<<char [39],(char *[39])0>(
                  (common::milog::MiLogStream *const)(v4 + 496),
                  (const char (*)[39])"group_json_string to json_value failed");
                common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v4 + 496));
                v3 = -1;
                __lh = 0;
              }
              else
              {
                v159 = (Json::Value *)Json::Value::operator[]((Json::Value_0 *const)(v4 + 560), "group_info");
                Json::Value::operator=(v159);
                dungeon_id = 0;
                if ( *(_BYTE *)(((unsigned __int64)&context->scene >> 3) + 0x7FFF8000) )
                  __asan_report_load8(&context->scene);
                if ( Scene::getSceneType(context->scene) == SCENE_DUNGEON )
                {
                  if ( *(_BYTE *)(((unsigned __int64)&context->scene >> 3) + 0x7FFF8000) )
                    __asan_report_load8(&context->scene);
                  toPtr<DungeonScene,Scene>((Scene *)(v4 + 208));
                  if ( std::operator==<DungeonScene>((const std::shared_ptr<DungeonScene> *)(v4 + 208), 0LL) )
                  {
                    common::milog::MiLogStream::create(
                      (common::milog::MiLogStream *)(v4 + 496),
                      &common::milog::MiLogDefault::default_log_obj_,
                      3u,
                      "./src/player/gm/player_gm_comp.cpp",
                      "procGroup",
                      2389);
                    __li = common::milog::MiLogStream::operator<<<char [53],(char *[53])0>(
                             (common::milog::MiLogStream *const)(v4 + 496),
                             (const char (*)[53])"dynamic_pointer_cast<DungeonScene> failed,scene_id: ");
                    if ( *(_BYTE *)(((unsigned __int64)&context->scene >> 3) + 0x7FFF8000) )
                      __asan_report_load8(&context->scene);
                    *(_DWORD *)(v4 + 80) = Scene::getSceneId(context->scene);
                    common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                      __li,
                      (const unsigned int *)(v4 + 80));
                    common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v4 + 496));
                  }
                  else
                  {
                    v160 = std::__shared_ptr_access<DungeonScene,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<DungeonScene,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 208));
                    dungeon_id = DungeonScene::getDungeonId(v160);
                  }
                  std::shared_ptr<DungeonScene>::~shared_ptr((std::shared_ptr<DungeonScene> *const)(v4 + 208));
                }
                if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
                  __asan_report_load8(&context->player);
                __lj = Player::getSceneComp(context->player);
                __fa = *(_DWORD *)(v4 + 64);
                if ( *(_BYTE *)(((unsigned __int64)&context->scene >> 3) + 0x7FFF8000) )
                  __asan_report_load8(&context->scene);
                v161 = Scene::getSceneId(context->scene);
                one_off_product_bin = PlayerSceneComp::findGroupProductBinByGM(__lj, v161, dungeon_id, __fa);
                if ( one_off_product_bin )
                {
                  __for_range_3 = proto::GroupProductBin::gadget_one_off_map(one_off_product_bin);
                  google::protobuf::Map<unsigned int,unsigned int>::begin(&__for_begin_0, __for_range_3);
                  google::protobuf::Map<unsigned int,unsigned int>::end(
                    (google::protobuf::Map<unsigned int,unsigned int>::const_iterator *)(v4 + 240),
                    __for_range_3);
                  while ( google::protobuf::operator!=(
                            &__for_begin_0,
                            (const google::protobuf::Map<unsigned int,unsigned int>::const_iterator *)(v4 + 240)) )
                  {
                    p_key = (const unsigned int *)google::protobuf::Map<unsigned int,unsigned int>::const_iterator::operator*(&__for_begin_0);
                    v162 = (unsigned __int64)(p_key + 1);
                    if ( *(_BYTE *)((v162 >> 3) + 0x7FFF8000) != 0
                      && (char)((v162 & 7) + 3) >= *(_BYTE *)((v162 >> 3) + 0x7FFF8000) )
                    {
                      __asan_report_load4(v162);
                    }
                    Json::Value::Value((Json::Value *)&other, p_key[1]);
                    __lk = Json::Value::operator[]((Json::Value_0 *const)(v4 + 560), "gadget_one_off_map");
                    if ( *(_BYTE *)(((unsigned __int64)p_key >> 3) + 0x7FFF8000) != 0
                      && (char)(((unsigned __int8)p_key & 7) + 3) >= *(_BYTE *)(((unsigned __int64)p_key >> 3)
                                                                              + 0x7FFF8000) )
                    {
                      __asan_report_load4(p_key);
                    }
                    common::tools::StringUtils::numToStr<unsigned int>((std::string *)(v4 + 496), *p_key);
                    v163 = Json::Value::operator[](__lk, (const Json::String *)(v4 + 496));
                    Json::Value::operator=(v163, &other);
                    std::string::~string((void *)(v4 + 496));
                    Json::Value::~Value(&other);
                    google::protobuf::Map<unsigned int,unsigned int>::const_iterator::operator++(&__for_begin_0);
                  }
                  __for_range_4 = proto::GroupProductBin::monster_one_off_map(one_off_product_bin);
                  google::protobuf::Map<unsigned int,unsigned int>::begin(&__for_begin_0, __for_range_4);
                  google::protobuf::Map<unsigned int,unsigned int>::end(
                    (google::protobuf::Map<unsigned int,unsigned int>::const_iterator *)(v4 + 240),
                    __for_range_4);
                  while ( google::protobuf::operator!=(
                            &__for_begin_0,
                            (const google::protobuf::Map<unsigned int,unsigned int>::const_iterator *)(v4 + 240)) )
                  {
                    p_key_0 = (const unsigned int *)google::protobuf::Map<unsigned int,unsigned int>::const_iterator::operator*(&__for_begin_0);
                    v164 = (unsigned __int64)(p_key_0 + 1);
                    if ( *(_BYTE *)((v164 >> 3) + 0x7FFF8000) != 0
                      && (char)((v164 & 7) + 3) >= *(_BYTE *)((v164 >> 3) + 0x7FFF8000) )
                    {
                      __asan_report_load4(v164);
                    }
                    Json::Value::Value((Json::Value *)&other, p_key_0[1]);
                    __ll = Json::Value::operator[]((Json::Value_0 *const)(v4 + 560), "monster_one_off_map");
                    if ( *(_BYTE *)(((unsigned __int64)p_key_0 >> 3) + 0x7FFF8000) != 0
                      && (char)(((unsigned __int8)p_key_0 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)p_key_0 >> 3)
                                                                                + 0x7FFF8000) )
                    {
                      __asan_report_load4(p_key_0);
                    }
                    common::tools::StringUtils::numToStr<unsigned int>((std::string *)(v4 + 496), *p_key_0);
                    v165 = Json::Value::operator[](__ll, (const Json::String *)(v4 + 496));
                    Json::Value::operator=(v165, &other);
                    std::string::~string((void *)(v4 + 496));
                    Json::Value::~Value(&other);
                    google::protobuf::Map<unsigned int,unsigned int>::const_iterator::operator++(&__for_begin_0);
                  }
                }
                if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
                  __asan_report_load8(&context->player);
                BlockDataMgr = Player::getBlockDataMgr(context->player);
                product_bin_ptr = BlockDataMgr::findGroupProductBin(BlockDataMgr, *(_DWORD *)(v4 + 64));
                if ( product_bin_ptr )
                {
                  __for_range_5 = proto::GroupProductBin::gadget_one_off_map(product_bin_ptr);
                  google::protobuf::Map<unsigned int,unsigned int>::begin(&__for_begin_0, __for_range_5);
                  google::protobuf::Map<unsigned int,unsigned int>::end(
                    (google::protobuf::Map<unsigned int,unsigned int>::const_iterator *)(v4 + 240),
                    __for_range_5);
                  while ( google::protobuf::operator!=(
                            &__for_begin_0,
                            (const google::protobuf::Map<unsigned int,unsigned int>::const_iterator *)(v4 + 240)) )
                  {
                    p_key_1 = (const unsigned int *)google::protobuf::Map<unsigned int,unsigned int>::const_iterator::operator*(&__for_begin_0);
                    v167 = (unsigned __int64)(p_key_1 + 1);
                    if ( *(_BYTE *)((v167 >> 3) + 0x7FFF8000) != 0
                      && (char)((v167 & 7) + 3) >= *(_BYTE *)((v167 >> 3) + 0x7FFF8000) )
                    {
                      __asan_report_load4(v167);
                    }
                    Json::Value::Value((Json::Value *)&other, p_key_1[1]);
                    __lm = Json::Value::operator[]((Json::Value_0 *const)(v4 + 560), "block_gadget_one_off_map");
                    if ( *(_BYTE *)(((unsigned __int64)p_key_1 >> 3) + 0x7FFF8000) != 0
                      && (char)(((unsigned __int8)p_key_1 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)p_key_1 >> 3)
                                                                                + 0x7FFF8000) )
                    {
                      __asan_report_load4(p_key_1);
                    }
                    common::tools::StringUtils::numToStr<unsigned int>((std::string *)(v4 + 496), *p_key_1);
                    v168 = Json::Value::operator[](__lm, (const Json::String *)(v4 + 496));
                    Json::Value::operator=(v168, &other);
                    std::string::~string((void *)(v4 + 496));
                    Json::Value::~Value(&other);
                    google::protobuf::Map<unsigned int,unsigned int>::const_iterator::operator++(&__for_begin_0);
                  }
                  __for_range_6 = proto::GroupProductBin::monster_one_off_map(product_bin_ptr);
                  google::protobuf::Map<unsigned int,unsigned int>::begin(&__for_begin_0, __for_range_6);
                  google::protobuf::Map<unsigned int,unsigned int>::end(
                    (google::protobuf::Map<unsigned int,unsigned int>::const_iterator *)(v4 + 240),
                    __for_range_6);
                  while ( google::protobuf::operator!=(
                            &__for_begin_0,
                            (const google::protobuf::Map<unsigned int,unsigned int>::const_iterator *)(v4 + 240)) )
                  {
                    p_key_2 = (const unsigned int *)google::protobuf::Map<unsigned int,unsigned int>::const_iterator::operator*(&__for_begin_0);
                    v169 = (unsigned __int64)(p_key_2 + 1);
                    if ( *(_BYTE *)((v169 >> 3) + 0x7FFF8000) != 0
                      && (char)((v169 & 7) + 3) >= *(_BYTE *)((v169 >> 3) + 0x7FFF8000) )
                    {
                      __asan_report_load4(v169);
                    }
                    Json::Value::Value((Json::Value *)&other, p_key_2[1]);
                    __ln = Json::Value::operator[]((Json::Value_0 *const)(v4 + 560), "block_monster_one_off_map");
                    if ( *(_BYTE *)(((unsigned __int64)p_key_2 >> 3) + 0x7FFF8000) != 0
                      && (char)(((unsigned __int8)p_key_2 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)p_key_2 >> 3)
                                                                                + 0x7FFF8000) )
                    {
                      __asan_report_load4(p_key_2);
                    }
                    common::tools::StringUtils::numToStr<unsigned int>((std::string *)(v4 + 496), *p_key_2);
                    v170 = Json::Value::operator[](__ln, (const Json::String *)(v4 + 496));
                    Json::Value::operator=(v170, &other);
                    std::string::~string((void *)(v4 + 496));
                    Json::Value::~Value(&other);
                    google::protobuf::Map<unsigned int,unsigned int>::const_iterator::operator++(&__for_begin_0);
                  }
                }
                Json::FastWriter::FastWriter((Json::FastWriter *const)(v4 + 800));
                Json::FastWriter::write[abi:cxx11](
                  (Json::String *)(v4 + 496),
                  (Json::FastWriter *const)(v4 + 800),
                  (const Json::Value *)(v4 + 560));
                std::string::operator=(ret_msgb, v4 + 496);
                std::string::~string((void *)(v4 + 496));
                Json::FastWriter::~FastWriter((Json::FastWriter *const)(v4 + 800));
                if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
                  __asan_report_load8(&context->player);
                Player::notifyGMServerLog(context->player, SERVER_LOG_NONE, LOG_LEVEL_INFO_0, ret_msgb);
                __lh = 1;
              }
              Json::Value::~Value((Json::Value_0 *const)(v4 + 720));
              Json::Reader::~Reader((Json::Reader *const)(v4 + 1104));
              __lg = __lh == 1;
            }
            google::protobuf::util::Status::~Status((google::protobuf::util::Status *const)(v4 + 640));
            std::string::~string((void *)(v4 + 368));
            proto::GroupBin::~GroupBin((proto::GroupBin *const)(v4 + 1440));
            Json::Value::~Value((Json::Value_0 *const)(v4 + 560));
            __lf = __lg;
          }
          std::shared_ptr<Group>::~shared_ptr((std::shared_ptr<Group> *const)(v4 + 176));
          if ( !__lf )
            goto LABEL_392;
          goto LABEL_391;
        }
        goto LABEL_329;
      }
    }
LABEL_327:
    std::string::operator=(ret_msg, " param not enough");
    v3 = -1;
    goto LABEL_392;
  }
  if ( std::vector<std::string>::size(param_vec) <= 2 )
    goto LABEL_327;
  *(_DWORD *)(v4 + 96) = 0;
  v147 = std::vector<std::string>::operator[](param_vec, 1uLL);
  if ( common::tools::StringUtils::strToNum<unsigned int>(v147, (unsigned int *)(v4 + 96), 1) )
    goto LABEL_329;
  *(_BYTE *)(v4 + 48) = 0;
  v148 = std::vector<std::string>::operator[](param_vec, 2uLL);
  if ( !common::tools::StringUtils::strToNum<bool>(v148, (bool *)(v4 + 48), 1) )
  {
    if ( *(_BYTE *)(((unsigned __int64)&context->scene >> 3) + 0x7FFF8000) )
      __asan_report_load8(&context->scene);
    Scene::findGroup((Scene *const)(v4 + 208), (uint32_t)context->scene);
    if ( std::operator==<Group>(0LL, (const std::shared_ptr<Group> *)(v4 + 208)) )
    {
      std::string::operator=(ret_msg, " group find failed.");
      v3 = -1;
      __ld = 0;
    }
    else
    {
      v149 = std::__shared_ptr_access<Group,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Group,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 208));
      Group::setIsReplaceable(v149, *(_BYTE *)(v4 + 48));
      common::milog::MiLogStream::create(
        (common::milog::MiLogStream *)(v4 + 496),
        &common::milog::MiLogDefault::default_log_obj_,
        1u,
        "./src/player/gm/player_gm_comp.cpp",
        "procGroup",
        2316);
      v150 = common::milog::MiLogStream::operator<<<char [10],(char *[10])0>(
               (common::milog::MiLogStream *const)(v4 + 496),
               (const char (*)[10])"group_id=");
      v151 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
               v150,
               (const unsigned int *)(v4 + 96));
      v152 = common::milog::MiLogStream::operator<<<char [21],(char *[21])0>(
               v151,
               (const char (*)[21])" replaceable set to ");
      common::milog::MiLogStream::operator<<(v152, *(_BYTE *)(v4 + 48));
      common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v4 + 496));
      __ld = 1;
    }
    std::shared_ptr<Group>::~shared_ptr((std::shared_ptr<Group> *const)(v4 + 208));
    if ( __ld != 1 )
      goto LABEL_392;
    goto LABEL_391;
  }
  std::string::operator=(ret_msg, " parse is_replaceable failed");
  v3 = -1;
LABEL_392:
  ScriptContext::~ScriptContext((ScriptContext *const)(v4 + 880));
LABEL_393:
  if ( v225 == (char *)v4 )
  {
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8008) = 0LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8010) = 0LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8018) = 0LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8020) = 0LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8028) = 0LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8030) = 0LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8038) = 0LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8040) = 0LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8048) = 0LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8054) = 0LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF805C) = 0LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8068) = 0LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8080) = 0LL;
    *(_DWORD *)((v4 >> 3) + 0x7FFF8088) = 0;
    *(_QWORD *)((v4 >> 3) + 0x7FFF80AC) = 0LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF80FC) = 0LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8104) = 0LL;
    *(_DWORD *)((v4 >> 3) + 0x7FFF810C) = 0;
  }
  else
  {
    *(_QWORD *)v4 = 1172321806LL;
    __asan_stack_free_6(v4, 2176LL, v225);
  }
  return v3;
};

// Line 1840: range 0000000017BCC564-0000000017BCC675
ForeachPolicy __cdecl procGroup(GmContext &,std::vector<std::string> const&,std::string&)::{lambda(Group &)#1}::operator()(
        const procGroup::<lambda(Group&)> *const __closure,
        Group *group)
{
  unsigned __int64 log_context; // rax
  ScriptContext *script_context; // r8

  if ( *(_BYTE *)(((unsigned __int64)&__closure->__log_context >> 3) + 0x7FFF8000) )
    __asan_report_load8(&__closure->__log_context);
  log_context = (unsigned __int64)__closure->__log_context;
  if ( *(_BYTE *)(((unsigned __int64)__closure >> 3) + 0x7FFF8000) )
    __asan_report_load8(__closure);
  script_context = __closure->__script_context;
  if ( (char)(log_context & 7) >= *(_BYTE *)((log_context >> 3) + 0x7FFF8000)
    && *(_BYTE *)((log_context >> 3) + 0x7FFF8000) != 0
    || *(_BYTE *)(((log_context + 27) >> 3) + 0x7FFF8000) != 0
    && (char)((log_context + 27) & 7) >= *(_BYTE *)(((log_context + 27) >> 3) + 0x7FFF8000) )
  {
    log_context = __asan_report_load_n(log_context, 28LL);
  }
  Group::refresh(group, script_context, *(SuiteLogContext *)log_context);
  return 0;
};

// Line 1875: range 0000000017BCC676-0000000017BCC6D8
ForeachPolicy __cdecl procGroup(GmContext &,std::vector<std::string> const&,std::string&)::{lambda(Group &)#2}::operator()(
        const procGroup::<lambda(Group&)>_0 *const __closure,
        Group *group)
{
  std::vector<unsigned int> *group_id_list; // rbx
  std::vector<unsigned int>::value_type __x[5]; // [rsp+1Ch] [rbp-14h] BYREF

  if ( *(_BYTE *)(((unsigned __int64)__closure >> 3) + 0x7FFF8000) )
    __asan_report_load8(__closure);
  group_id_list = __closure->__group_id_list;
  __x[0] = Group::getGroupId(group);
  std::vector<unsigned int>::push_back(group_id_list, __x);
  return 0;
};

// Line 1936: range 0000000017BCC6DA-0000000017BCCA2D
ForeachPolicy __cdecl procGroup(GmContext &,std::vector<std::string> const&,std::string&)::{lambda(Scene &)#3}::operator()(
        const procGroup::<lambda(Scene&)> *const __closure,
        Scene *scene)
{
  LuaConfigMgr *p_lua_config_mgr; // rbx
  uint32_t SceneId; // eax
  unsigned __int64 v5; // rax
  void (__fastcall *v6)(Scene *, _QWORD); // rcx
  __int64 v7; // rdx
  SceneBlockGroupComp *BlockGroupComp; // rax
  SceneBlockGroupComp *v9; // rcx
  unsigned __int64 v10; // rax
  void (__fastcall *v11)(std::shared_ptr<Group> *, SceneBlockGroupComp *, _QWORD); // r8
  common::milog::MiLogStream *v12; // rbx
  common::milog::MiLogStream *v13; // rax
  common::milog::MiLogStream *v14; // rax
  unsigned int val; // [rsp+14h] [rbp-7Ch] BYREF
  std::unordered_map<unsigned int,GroupInfoScriptConfig>::const_iterator __for_begin; // [rsp+18h] [rbp-78h] BYREF
  std::unordered_map<unsigned int,GroupInfoScriptConfig>::const_iterator __for_end; // [rsp+20h] [rbp-70h] BYREF
  const SceneScriptConfig *scene_script_config_ptr; // [rsp+28h] [rbp-68h]
  const std::unordered_map<unsigned int,GroupInfoScriptConfig> *__for_range; // [rsp+30h] [rbp-60h]
  const std::pair<unsigned int const,GroupInfoScriptConfig> *v20; // [rsp+38h] [rbp-58h]
  std::tuple_element<0,const std::pair<unsigned int const,GroupInfoScriptConfig> >::type *group_id; // [rsp+40h] [rbp-50h]
  std::tuple_element<1,const std::pair<unsigned int const,GroupInfoScriptConfig> >::type *group_info_config; // [rsp+48h] [rbp-48h]
  std::shared_ptr<Group> v23; // [rsp+50h] [rbp-40h] BYREF
  common::milog::MiLogStream v24; // [rsp+60h] [rbp-30h] BYREF

  ServiceBox::findService<GameserverService>();
  GameserverService::getConfig((GameserverService *const)&v23);
  p_lua_config_mgr = &std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false> *const)&v23)->design_config.lua_config_mgr;
  SceneId = Scene::getSceneId(scene);
  scene_script_config_ptr = LuaConfigMgr::findSceneScriptConfig(p_lua_config_mgr, SceneId);
  std::shared_ptr<Config>::~shared_ptr((std::shared_ptr<Config> *const)&v23);
  if ( !scene_script_config_ptr )
    return 0;
  __for_range = &scene_script_config_ptr->group_info_map;
  __for_begin._M_cur = std::unordered_map<unsigned int,GroupInfoScriptConfig>::begin(&scene_script_config_ptr->group_info_map)._M_cur;
  __for_end._M_cur = std::unordered_map<unsigned int,GroupInfoScriptConfig>::end(&scene_script_config_ptr->group_info_map)._M_cur;
  while ( std::__detail::operator!=<std::pair<unsigned int const,GroupInfoScriptConfig>,false>(&__for_begin, &__for_end) )
  {
    v20 = std::__detail::_Node_const_iterator<std::pair<unsigned int const,GroupInfoScriptConfig>,false,false>::operator*(&__for_begin);
    group_id = std::get<0ul,unsigned int const,GroupInfoScriptConfig>(v20);
    group_info_config = (std::tuple_element<1,const std::pair<unsigned int const,GroupInfoScriptConfig> >::type *)std::get<1ul,unsigned int const,GroupInfoScriptConfig>(v20);
    if ( *(_BYTE *)(((unsigned __int64)scene >> 3) + 0x7FFF8000) )
      __asan_report_load8(scene);
    v5 = (unsigned __int64)(scene->_vptr_DescribalBase + 57);
    if ( *(_BYTE *)((v5 >> 3) + 0x7FFF8000) )
      __asan_report_load8(scene->_vptr_DescribalBase + 57);
    v6 = *(void (__fastcall **)(Scene *, _QWORD))v5;
    if ( *(_BYTE *)(((unsigned __int64)group_id >> 3) + 0x7FFF8000) != 0
      && (char)(((unsigned __int8)group_id & 7) + 3) >= *(_BYTE *)(((unsigned __int64)group_id >> 3) + 0x7FFF8000) )
    {
      __asan_report_load4(group_id);
    }
    v6(scene, *group_id);
    if ( v7 )
    {
      BlockGroupComp = Scene::getBlockGroupComp(scene);
      v9 = BlockGroupComp;
      if ( *(_BYTE *)(((unsigned __int64)BlockGroupComp >> 3) + 0x7FFF8000) )
        __asan_report_load8(BlockGroupComp);
      v10 = (unsigned __int64)(v9->_vptr_SceneCompBase + 18);
      if ( *(_BYTE *)((v10 >> 3) + 0x7FFF8000) )
        __asan_report_load8(v9->_vptr_SceneCompBase + 18);
      v11 = *(void (__fastcall **)(std::shared_ptr<Group> *, SceneBlockGroupComp *, _QWORD))v10;
      if ( *(_BYTE *)(((unsigned __int64)group_id >> 3) + 0x7FFF8000) != 0
        && (char)(((unsigned __int8)group_id & 7) + 3) >= *(_BYTE *)(((unsigned __int64)group_id >> 3) + 0x7FFF8000) )
      {
        __asan_report_load4(group_id);
      }
      v11(&v23, v9, *group_id);
      std::shared_ptr<Group>::~shared_ptr(&v23);
      common::milog::MiLogStream::create(
        &v24,
        &common::milog::MiLogDefault::default_log_obj_,
        1u,
        "./src/player/gm/player_gm_comp.cpp",
        "operator()",
        1951);
      v12 = common::milog::MiLogStream::operator<<<char [15],(char *[15])0>(&v24, (const char (*)[15])"gm findgroup: ");
      val = Scene::getSceneId(scene);
      v13 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v12, &val);
      v14 = common::milog::MiLogStream::operator<<<char [2],(char *[2])0>(v13, (const char (*)[2])" ");
      common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v14, group_id);
      common::milog::MiLogStream::~MiLogStream(&v24);
    }
    std::__detail::_Node_const_iterator<std::pair<unsigned int const,GroupInfoScriptConfig>,false,false>::operator++(&__for_begin);
  }
  return 0;
};

// Line 1978: range 0000000017BCCA2E-0000000017BCCA90
ForeachPolicy __cdecl procGroup(GmContext &,std::vector<std::string> const&,std::string&)::{lambda(Group &)#4}::operator()(
        const procGroup::<lambda(Group&)>_0 *const __closure,
        Group *group)
{
  std::vector<unsigned int> *group_id_list; // rbx
  std::vector<unsigned int>::value_type __x[5]; // [rsp+1Ch] [rbp-14h] BYREF

  if ( *(_BYTE *)(((unsigned __int64)__closure >> 3) + 0x7FFF8000) )
    __asan_report_load8(__closure);
  group_id_list = __closure->__group_id_list;
  __x[0] = Group::getGroupId(group);
  std::vector<unsigned int>::push_back(group_id_list, __x);
  return 0;
};

// Line 2156: range 0000000017BCCA92-0000000017BCCAB4
ForeachPolicy __cdecl procGroup(GmContext &,std::vector<std::string> const&,std::string&)::{lambda(Group &)#5}::operator()(
        const procGroup::<lambda(Group&)>_1 *const __closure,
        Group *group)
{
  Group::setAllGatherDelByGm(group);
  return 0;
};

// Line 2180: range 0000000017BCCAB6-0000000017BCCAD8
ForeachPolicy __cdecl procGroup(GmContext &,std::vector<std::string> const&,std::string&)::{lambda(Group &)#6}::operator()(
        const procGroup::<lambda(Group&)>_1 *const __closure,
        Group *group)
{
  Group::setAllMonsterKilledByGm(group);
  return 0;
};

// Line 2443: range 0000000017D72DE0-0000000017D72E82
void __cdecl procQuestRegister::procQuestRegister(procQuestRegister *const this)
{
  std::function<int(GmContext&,const std::vector<std::string>&,std::string&)> *v1; // rax
  std::allocator<char> __a; // [rsp+1Fh] [rbp-31h] BYREF
  std::string __k; // [rsp+20h] [rbp-30h] BYREF

  std::allocator<char>::allocator(&__a);
  std::string::basic_string<std::allocator<char>>(&__k, "QUEST", &__a);
  v1 = std::unordered_map<std::string,std::function<int ()(GmContext &,std::vector<std::string> const&,std::string&)>>::operator[](
         &GmUtils::op_func_map[abi:cxx11],
         &__k);
  std::function<int ()(GmContext &,std::vector<std::string> const&,std::string&)>::operator=<int (&)(GmContext &,std::vector<std::string> const&,std::string&)>(
    v1,
    (int (*)(GmContext *, const std::vector<std::string> *, std::string *))procQuest);
  std::string::~string(&__k);
  std::allocator<char>::~allocator(&__a);
};

// Line 2444: range 0000000017BD168C-0000000017BD55C1
int32_t __cdecl procQuest(GmContext *context, const std::vector<std::string> *param_vec, std::string *ret_msg)
{
  int32_t refreshed; // r13d
  unsigned __int64 v4; // r14
  __int64 v5; // rax
  _DWORD *v6; // r12
  const std::string *v7; // rax
  const std::string *v8; // rax
  const std::string *v9; // rax
  common::milog::MiLogStream *v10; // rbx
  const std::string *v11; // rax
  std::__shared_ptr_access<ParentQuest,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v12; // rax
  common::milog::MiLogStream *v14; // rax
  common::milog::MiLogStream *v15; // rax
  common::milog::MiLogStream *v16; // rax
  common::milog::MiLogStream *v17; // rax
  int v18; // r15d
  common::milog::MiLogStream *v19; // rax
  const std::string *v20; // rax
  const std::string *v21; // rax
  const std::string *v22; // rax
  const std::string *v23; // rax
  common::milog::MiLogStream *v24; // rbx
  const std::string *v25; // rax
  common::milog::MiLogStream *v26; // rax
  const std::string *v27; // rax
  const std::string *v28; // rax
  const std::string *v29; // rax
  common::milog::MiLogStream *v30; // r13
  const std::string *v31; // rax
  common::milog::MiLogStream *v32; // rax
  const std::string *v33; // rax
  const std::string *v34; // rax
  common::milog::MiLogStream *v35; // r13
  const std::string *v36; // rax
  common::milog::MiLogStream *v37; // rax
  const std::string *v38; // rax
  common::milog::MiLogStream *v39; // rbx
  const std::string *v40; // rax
  std::__shared_ptr_access<ParentQuest,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v41; // rax
  common::milog::MiLogStream *v43; // rax
  const std::string *v44; // rax
  const std::string *v45; // rax
  common::milog::MiLogStream *v46; // rbx
  const std::string *v47; // rax
  std::__shared_ptr_access<ParentQuest,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v48; // rax
  common::milog::MiLogStream *v50; // rax
  const std::string *v51; // rax
  const std::string *v52; // rax
  const std::string *v53; // rax
  common::milog::MiLogStream *v54; // rbx
  const std::string *v55; // rax
  common::milog::MiLogStream *v56; // rax
  const std::string *v57; // rax
  common::milog::MiLogStream *v58; // rbx
  const std::string *v59; // rax
  common::milog::MiLogStream *v60; // rax
  const std::string *v61; // rax
  const std::string *v62; // rax
  const std::string *v63; // rax
  const std::string *v64; // rax
  common::milog::MiLogStream *v65; // rbx
  const std::string *v66; // rax
  bool v67; // r15
  common::milog::MiLogStream *v68; // rax
  int v69; // r15d
  const std::string *v71; // rax
  common::milog::MiLogStream *v72; // rbx
  const std::string *v73; // rax
  std::vector<std::string>::size_type v74; // r15
  uint32_t v75; // eax
  const std::string *v76; // rax
  common::milog::MiLogStream *v77; // r13
  const std::string *v78; // rax
  std::vector<std::string>::size_type v79; // r15
  uint32_t v80; // eax
  const std::string *v81; // rax
  common::milog::MiLogStream *v82; // r13
  const std::string *v83; // rax
  int v84; // r15d
  char *v85; // rsi
  std::unordered_map<unsigned int,unsigned int>::mapped_type *v86; // rax
  _DWORD *v87; // rdx
  char v88; // cl
  _BOOL4 v89; // r15d
  bool v90; // r15
  common::milog::MiLogStream *v91; // rax
  int v92; // r15d
  common::milog::MiLogStream *v93; // rbx
  const std::string *v94; // rax
  _BOOL4 v95; // r15d
  int v96; // r15d
  PlayerWorldScene *v97; // rax
  SceneEncounterComp *EncounterComp; // rax
  const std::string *v99; // rax
  common::milog::MiLogStream *v100; // rbx
  const std::string *v101; // rax
  common::milog::MiLogStream *v102; // rax
  const std::string *v103; // rax
  const std::string *v104; // rax
  const std::string *v105; // rax
  common::milog::MiLogStream *v106; // rbx
  const std::string *v107; // rax
  common::milog::MiLogStream *v108; // rax
  const std::string *v109; // rax
  const std::string *v110; // rax
  common::milog::MiLogStream *v111; // rbx
  const std::string *v112; // rax
  const std::string *v113; // rax
  common::milog::MiLogStream *v114; // rbx
  const std::string *v115; // rax
  const std::string *v116; // rax
  const std::string *v117; // rax
  common::milog::MiLogStream *v118; // rbx
  const std::string *v119; // rax
  const std::string *v120; // rax
  common::milog::MiLogStream *v121; // rbx
  const std::string *v122; // rax
  const std::string *v123; // rax
  common::milog::MiLogStream *v124; // rbx
  const std::string *v125; // rax
  const std::string *v126; // rax
  const std::string *v127; // rax
  common::milog::MiLogStream *v128; // rbx
  const std::string *v129; // rax
  const std::string *v130; // rax
  const std::string *v131; // rax
  PlayerGmComp *GmComp; // rax
  PlayerMpComp *MpComp; // rax
  const std::string *v134; // rax
  PlayerGmComp *v135; // rax
  common::milog::MiLogStream *v136; // rax
  int32_t result; // eax
  std::unordered_map<unsigned int,unsigned int>::hasher __hf; // [rsp+38h] [rbp-2B8h] BYREF
  std::unordered_map<unsigned int,unsigned int>::key_equal __eql; // [rsp+39h] [rbp-2B7h] BYREF
  std::allocator<std::pair<unsigned int const,unsigned int> > __a; // [rsp+3Ah] [rbp-2B6h] BYREF
  bool all_quest; // [rsp+3Bh] [rbp-2B5h]
  uint32_t idx; // [rsp+3Ch] [rbp-2B4h]
  uint32_t idx_0; // [rsp+40h] [rbp-2B0h]
  uint32_t i; // [rsp+44h] [rbp-2ACh]
  uint32_t quest_id_0; // [rsp+4Ch] [rbp-2A4h]
  std::unordered_map<unsigned int,data::QuestExcelConfig>::const_iterator __for_begin; // [rsp+50h] [rbp-2A0h] BYREF
  std::unordered_map<unsigned int,data::QuestExcelConfig>::const_iterator __for_end; // [rsp+58h] [rbp-298h] BYREF
  PlayerQuestComp *quest_comp; // [rsp+60h] [rbp-290h]
  const data::QuestExcelConfig *quest_config_ptr_1; // [rsp+68h] [rbp-288h]
  const data::QuestExcelConfig *quest_config_ptr_0; // [rsp+70h] [rbp-280h]
  const data::QuestExcelConfig *quest_config_ptr; // [rsp+78h] [rbp-278h]
  const std::unordered_map<unsigned int,data::QuestExcelConfig> *__for_range; // [rsp+80h] [rbp-270h]
  const std::pair<unsigned int const,data::QuestExcelConfig> *v155; // [rsp+88h] [rbp-268h]
  std::tuple_element<0,const std::pair<unsigned int const,data::QuestExcelConfig> >::type *quest_id; // [rsp+90h] [rbp-260h]
  std::tuple_element<1,const std::pair<unsigned int const,data::QuestExcelConfig> >::type *_; // [rsp+98h] [rbp-258h]
  std::string __lhs; // [rsp+A0h] [rbp-250h] BYREF
  std::string __rhs; // [rsp+C0h] [rbp-230h] BYREF
  std::string v160; // [rsp+E0h] [rbp-210h] BYREF
  std::string v161; // [rsp+100h] [rbp-1F0h] BYREF
  std::string v162; // [rsp+120h] [rbp-1D0h] BYREF
  std::string v163; // [rsp+140h] [rbp-1B0h] BYREF
  common::milog::MiLogStream v164; // [rsp+160h] [rbp-190h] BYREF
  char v165[368]; // [rsp+180h] [rbp-170h] BYREF

  v4 = (unsigned __int64)v165;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v5 = __asan_stack_malloc_3(320LL);
    if ( v5 )
      v4 = v5;
  }
  *(_QWORD *)v4 = 1102416563LL;
  *(_QWORD *)(v4 + 8) = "7 48 4 20 parent_quest_id:2818 64 4 8 key:2819 80 4 13 quest_id:2852 96 16 14 world_ptr:2736 128"
                        " 16 20 world_scene_ptr:2742 160 24 16 filter_list:2719 224 56 15 factor_map:2699";
  *(_QWORD *)(v4 + 16) = procQuest;
  v6 = (_DWORD *)(v4 >> 3);
  v6[536862720] = -235802127;
  v6[536862721] = -234556943;
  v6[536862722] = -234556924;
  v6[536862723] = -219021312;
  v6[536862724] = -219021312;
  v6[536862725] = -234881024;
  v6[536862726] = -218959118;
  v6[536862728] = -218103808;
  v6[536862729] = -202116109;
  if ( std::vector<std::string>::size(param_vec) <= 1 )
  {
    common::milog::MiLogStream::create(
      &v164,
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/player/gm/player_gm_comp.cpp",
      "procQuest",
      2447);
    common::milog::MiLogStream::operator<<<char [17],(char *[17])0>(&v164, (const char (*)[17])"param not enough");
    common::milog::MiLogStream::~MiLogStream(&v164);
    refreshed = -1;
    goto LABEL_229;
  }
  if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
    __asan_report_load8(&context->player);
  quest_comp = Player::getQuestComp(context->player);
  v7 = std::vector<std::string>::operator[](param_vec, 0LL);
  if ( !std::operator==<char>(v7, "ACCEPT") )
  {
    v20 = std::vector<std::string>::operator[](param_vec, 0LL);
    if ( std::operator==<char>(v20, "CLEAR") )
    {
      quest_id_0 = 0;
      all_quest = 0;
      v21 = std::vector<std::string>::operator[](param_vec, 1uLL);
      if ( std::operator==<char>(v21, _f.gap0) )
        all_quest = 1;
      if ( all_quest )
      {
        if ( PlayerQuestComp::forceClearAllQuestByGM(quest_comp, 1) )
        {
          common::milog::MiLogStream::create(
            &v164,
            &common::milog::MiLogDefault::default_log_obj_,
            3u,
            "./src/player/gm/player_gm_comp.cpp",
            "procQuest",
            2496);
          common::milog::MiLogStream::operator<<<char [25],(char *[25])0>(
            &v164,
            (const char (*)[25])"forceClearAllQuest fails");
          common::milog::MiLogStream::~MiLogStream(&v164);
          refreshed = -1;
          goto LABEL_229;
        }
      }
      else
      {
        if ( std::vector<std::string>::size(param_vec) <= 2 )
        {
          common::milog::MiLogStream::create(
            &v164,
            &common::milog::MiLogDefault::default_log_obj_,
            3u,
            "./src/player/gm/player_gm_comp.cpp",
            "procQuest",
            2504);
          common::milog::MiLogStream::operator<<<char [17],(char *[17])0>(&v164, (const char (*)[17])"param not enough");
          common::milog::MiLogStream::~MiLogStream(&v164);
          refreshed = -1;
          goto LABEL_229;
        }
        v22 = std::vector<std::string>::operator[](param_vec, 1uLL);
        if ( std::operator==<char>(v22, "FATHER") )
        {
          *(_DWORD *)(v4 + 80) = 0;
          v23 = std::vector<std::string>::operator[](param_vec, 2uLL);
          if ( common::tools::StringUtils::strToNum<unsigned int>(v23, (unsigned int *)(v4 + 80), 1) )
          {
            common::milog::MiLogStream::create(
              &v164,
              &common::milog::MiLogDefault::default_log_obj_,
              3u,
              "./src/player/gm/player_gm_comp.cpp",
              "procQuest",
              2512);
            v24 = common::milog::MiLogStream::operator<<<char [17],(char *[17])0>(
                    &v164,
                    (const char (*)[17])"strToNum failed:");
            v25 = std::vector<std::string>::operator[](param_vec, 2uLL);
            common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v24, v25);
            common::milog::MiLogStream::~MiLogStream(&v164);
            refreshed = -1;
            goto LABEL_229;
          }
          if ( PlayerQuestComp::forceClearParentQuestByGM(quest_comp, *(_DWORD *)(v4 + 80), 1) )
          {
            common::milog::MiLogStream::create(
              &v164,
              &common::milog::MiLogDefault::default_log_obj_,
              3u,
              "./src/player/gm/player_gm_comp.cpp",
              "procQuest",
              2517);
            v26 = common::milog::MiLogStream::operator<<<char [50],(char *[50])0>(
                    &v164,
                    (const char (*)[50])"forceClearParentQuestByGM fails, parent_quest_id:");
            common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v26, (const unsigned int *)(v4 + 80));
            common::milog::MiLogStream::~MiLogStream(&v164);
            refreshed = -1;
            goto LABEL_229;
          }
        }
      }
      goto LABEL_228;
    }
    v27 = std::vector<std::string>::operator[](param_vec, 0LL);
    if ( std::operator==<char>(v27, "FINISH") )
    {
      v28 = std::vector<std::string>::operator[](param_vec, 1uLL);
      if ( std::operator==<char>(v28, "FATHER") )
      {
        if ( std::vector<std::string>::size(param_vec) == 2 )
        {
          common::milog::MiLogStream::create(
            &v164,
            &common::milog::MiLogDefault::default_log_obj_,
            3u,
            "./src/player/gm/player_gm_comp.cpp",
            "procQuest",
            2529);
          common::milog::MiLogStream::operator<<<char [37],(char *[37])0>(
            &v164,
            (const char (*)[37])"QUEST FINISH FATHER not enough param");
          common::milog::MiLogStream::~MiLogStream(&v164);
          refreshed = -1;
          goto LABEL_229;
        }
        for ( idx = 2; idx < std::vector<std::string>::size(param_vec); ++idx )
        {
          *(_DWORD *)(v4 + 80) = 0;
          v29 = std::vector<std::string>::operator[](param_vec, idx);
          if ( common::tools::StringUtils::strToNum<unsigned int>(v29, (unsigned int *)(v4 + 80), 1) )
          {
            common::milog::MiLogStream::create(
              &v164,
              &common::milog::MiLogDefault::default_log_obj_,
              3u,
              "./src/player/gm/player_gm_comp.cpp",
              "procQuest",
              2538);
            v30 = common::milog::MiLogStream::operator<<<char [17],(char *[17])0>(
                    &v164,
                    (const char (*)[17])"strToNum failed:");
            v31 = std::vector<std::string>::operator[](param_vec, idx);
            common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v30, v31);
            common::milog::MiLogStream::~MiLogStream(&v164);
          }
          else if ( PlayerQuestComp::forceAcceptAndFinishParentQuestByGM(quest_comp, *(_DWORD *)(v4 + 80), 0) )
          {
            common::milog::MiLogStream::create(
              &v164,
              &common::milog::MiLogDefault::default_log_obj_,
              3u,
              "./src/player/gm/player_gm_comp.cpp",
              "procQuest",
              2544);
            v32 = common::milog::MiLogStream::operator<<<char [57],(char *[57])0>(
                    &v164,
                    (const char (*)[57])"forceAcceptAndFinishParentQuest failed, parent_quest_id:");
            common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v32, (const unsigned int *)(v4 + 80));
            common::milog::MiLogStream::~MiLogStream(&v164);
          }
        }
      }
      else
      {
        v33 = std::vector<std::string>::operator[](param_vec, 1uLL);
        if ( std::operator==<char>(v33, "FATHERV2") )
        {
          if ( std::vector<std::string>::size(param_vec) == 2 )
          {
            common::milog::MiLogStream::create(
              &v164,
              &common::milog::MiLogDefault::default_log_obj_,
              3u,
              "./src/player/gm/player_gm_comp.cpp",
              "procQuest",
              2554);
            common::milog::MiLogStream::operator<<<char [37],(char *[37])0>(
              &v164,
              (const char (*)[37])"QUEST FINISH FATHER not enough param");
            common::milog::MiLogStream::~MiLogStream(&v164);
            refreshed = -1;
            goto LABEL_229;
          }
          for ( idx_0 = 2; idx_0 < std::vector<std::string>::size(param_vec); ++idx_0 )
          {
            *(_DWORD *)(v4 + 80) = 0;
            v34 = std::vector<std::string>::operator[](param_vec, idx_0);
            if ( common::tools::StringUtils::strToNum<unsigned int>(v34, (unsigned int *)(v4 + 80), 1) )
            {
              common::milog::MiLogStream::create(
                &v164,
                &common::milog::MiLogDefault::default_log_obj_,
                3u,
                "./src/player/gm/player_gm_comp.cpp",
                "procQuest",
                2563);
              v35 = common::milog::MiLogStream::operator<<<char [17],(char *[17])0>(
                      &v164,
                      (const char (*)[17])"strToNum failed:");
              v36 = std::vector<std::string>::operator[](param_vec, idx_0);
              common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v35, v36);
              common::milog::MiLogStream::~MiLogStream(&v164);
            }
            else if ( PlayerQuestComp::forceAcceptAndFinishParentQuestByGM(quest_comp, *(_DWORD *)(v4 + 80), 1) )
            {
              common::milog::MiLogStream::create(
                &v164,
                &common::milog::MiLogDefault::default_log_obj_,
                3u,
                "./src/player/gm/player_gm_comp.cpp",
                "procQuest",
                2569);
              v37 = common::milog::MiLogStream::operator<<<char [57],(char *[57])0>(
                      &v164,
                      (const char (*)[57])"forceAcceptAndFinishParentQuest failed, parent_quest_id:");
              common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                v37,
                (const unsigned int *)(v4 + 80));
              common::milog::MiLogStream::~MiLogStream(&v164);
            }
          }
        }
        else
        {
          *(_DWORD *)(v4 + 80) = 0;
          v38 = std::vector<std::string>::operator[](param_vec, 1uLL);
          if ( common::tools::StringUtils::strToNum<unsigned int>(v38, (unsigned int *)(v4 + 80), 1) )
          {
            common::milog::MiLogStream::create(
              &v164,
              &common::milog::MiLogDefault::default_log_obj_,
              3u,
              "./src/player/gm/player_gm_comp.cpp",
              "procQuest",
              2579);
            v39 = common::milog::MiLogStream::operator<<<char [17],(char *[17])0>(
                    &v164,
                    (const char (*)[17])"strToNum failed:");
            v40 = std::vector<std::string>::operator[](param_vec, 1uLL);
            common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v39, v40);
            common::milog::MiLogStream::~MiLogStream(&v164);
            refreshed = -1;
            goto LABEL_229;
          }
          quest_config_ptr_0 = PlayerQuestComp::findPlayerQuestExcelConfig(quest_comp, *(_DWORD *)(v4 + 80));
          if ( quest_config_ptr_0 )
          {
            if ( *(_BYTE *)(((unsigned __int64)&quest_config_ptr_0->finish_parent >> 3) + 0x7FFF8000) != 0
              && (((unsigned __int8)quest_config_ptr_0 - 68) & 7) >= *(_BYTE *)(((unsigned __int64)&quest_config_ptr_0->finish_parent >> 3)
                                                                              + 0x7FFF8000) )
            {
              __asan_report_load1(&quest_config_ptr_0->finish_parent);
            }
            if ( quest_config_ptr_0->finish_parent )
            {
              if ( *(_BYTE *)(((unsigned __int64)&quest_config_ptr_0->main_id >> 3) + 0x7FFF8000) != 0
                && (char)((((_BYTE)quest_config_ptr_0 + 12) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&quest_config_ptr_0->main_id >> 3)
                                                                                  + 0x7FFF8000) )
              {
                __asan_report_load4(&quest_config_ptr_0->main_id);
              }
              PlayerQuestComp::findParentQuest((const PlayerQuestComp *const)(v4 + 128), (uint32_t)quest_comp);
              if ( std::operator!=<ParentQuest>(0LL, (const std::shared_ptr<ParentQuest> *)(v4 + 128)) )
              {
                v41 = std::__shared_ptr_access<ParentQuest,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<ParentQuest,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 128));
                if ( ParentQuest::getParentQuestState(v41) == PARENT_QUEST_STATE_FINISHED )
                {
                  std::to_string(&v162, *(_DWORD *)(v4 + 80));
                  if ( *(_BYTE *)(((unsigned __int64)&quest_config_ptr_0->main_id >> 3) + 0x7FFF8000) != 0
                    && (char)((((_BYTE)quest_config_ptr_0 + 12) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&quest_config_ptr_0->main_id >> 3)
                                                                                      + 0x7FFF8000) )
                  {
                    __asan_report_load4(&quest_config_ptr_0->main_id);
                  }
                  std::to_string(&__rhs, quest_config_ptr_0->main_id);
                  std::literals::string_literals::operator"" s[abi:cxx11](&__lhs, &byte_263548E0, 0x12uLL);
                  std::operator+<char>(&v160, &__lhs, &__rhs);
                  std::operator+<char>(&v161, &v160, &byte_26354920);
                  std::operator+<char>(&v163, &v161, &v162);
                  std::operator+<char>((std::string *)&v164, &v163, &byte_26354960);
                  std::string::operator=(ret_msg, &v164);
                  std::string::~string(&v164);
                  std::string::~string(&v163);
                  std::string::~string(&v161);
                  std::string::~string(&v160);
                  std::string::~string(&__lhs);
                  std::string::~string(&__rhs);
                  std::string::~string(&v162);
                }
              }
              std::shared_ptr<ParentQuest>::~shared_ptr((std::shared_ptr<ParentQuest> *const)(v4 + 128));
            }
          }
          if ( PlayerQuestComp::forceFinishQuestByGM(quest_comp, *(_DWORD *)(v4 + 80), 1) )
          {
            common::milog::MiLogStream::create(
              &v164,
              &common::milog::MiLogDefault::default_log_obj_,
              3u,
              "./src/player/gm/player_gm_comp.cpp",
              "procQuest",
              2593);
            v43 = common::milog::MiLogStream::operator<<<char [34],(char *[34])0>(
                    &v164,
                    (const char (*)[34])"forceFinishQuest fails, quest_id:");
            common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v43, (const unsigned int *)(v4 + 80));
            common::milog::MiLogStream::~MiLogStream(&v164);
            refreshed = -1;
            goto LABEL_229;
          }
        }
      }
      goto LABEL_228;
    }
    v44 = std::vector<std::string>::operator[](param_vec, 0LL);
    if ( std::operator==<char>(v44, "FINISHV2") )
    {
      *(_DWORD *)(v4 + 80) = 0;
      v45 = std::vector<std::string>::operator[](param_vec, 1uLL);
      if ( common::tools::StringUtils::strToNum<unsigned int>(v45, (unsigned int *)(v4 + 80), 1) )
      {
        common::milog::MiLogStream::create(
          &v164,
          &common::milog::MiLogDefault::default_log_obj_,
          3u,
          "./src/player/gm/player_gm_comp.cpp",
          "procQuest",
          2603);
        v46 = common::milog::MiLogStream::operator<<<char [17],(char *[17])0>(
                &v164,
                (const char (*)[17])"strToNum failed:");
        v47 = std::vector<std::string>::operator[](param_vec, 1uLL);
        common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v46, v47);
        common::milog::MiLogStream::~MiLogStream(&v164);
        refreshed = -1;
        goto LABEL_229;
      }
      quest_config_ptr_1 = PlayerQuestComp::findPlayerQuestExcelConfig(quest_comp, *(_DWORD *)(v4 + 80));
      if ( quest_config_ptr_1 )
      {
        if ( *(_BYTE *)(((unsigned __int64)&quest_config_ptr_1->finish_parent >> 3) + 0x7FFF8000) != 0
          && (((unsigned __int8)quest_config_ptr_1 - 68) & 7) >= *(_BYTE *)(((unsigned __int64)&quest_config_ptr_1->finish_parent >> 3)
                                                                          + 0x7FFF8000) )
        {
          __asan_report_load1(&quest_config_ptr_1->finish_parent);
        }
        if ( quest_config_ptr_1->finish_parent )
        {
          if ( *(_BYTE *)(((unsigned __int64)&quest_config_ptr_1->main_id >> 3) + 0x7FFF8000) != 0
            && (char)((((_BYTE)quest_config_ptr_1 + 12) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&quest_config_ptr_1->main_id >> 3)
                                                                              + 0x7FFF8000) )
          {
            __asan_report_load4(&quest_config_ptr_1->main_id);
          }
          PlayerQuestComp::findParentQuest((const PlayerQuestComp *const)(v4 + 128), (uint32_t)quest_comp);
          if ( std::operator!=<ParentQuest>(0LL, (const std::shared_ptr<ParentQuest> *)(v4 + 128)) )
          {
            v48 = std::__shared_ptr_access<ParentQuest,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<ParentQuest,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 128));
            if ( ParentQuest::getParentQuestState(v48) == PARENT_QUEST_STATE_FINISHED )
            {
              std::to_string(&v162, *(_DWORD *)(v4 + 80));
              if ( *(_BYTE *)(((unsigned __int64)&quest_config_ptr_1->main_id >> 3) + 0x7FFF8000) != 0
                && (char)((((_BYTE)quest_config_ptr_1 + 12) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&quest_config_ptr_1->main_id >> 3)
                                                                                  + 0x7FFF8000) )
              {
                __asan_report_load4(&quest_config_ptr_1->main_id);
              }
              std::to_string(&__rhs, quest_config_ptr_1->main_id);
              std::literals::string_literals::operator"" s[abi:cxx11](&__lhs, &byte_263548E0, 0x12uLL);
              std::operator+<char>(&v160, &__lhs, &__rhs);
              std::operator+<char>(&v161, &v160, &byte_26354920);
              std::operator+<char>(&v163, &v161, &v162);
              std::operator+<char>((std::string *)&v164, &v163, &byte_26354960);
              std::string::operator=(ret_msg, &v164);
              std::string::~string(&v164);
              std::string::~string(&v163);
              std::string::~string(&v161);
              std::string::~string(&v160);
              std::string::~string(&__lhs);
              std::string::~string(&__rhs);
              std::string::~string(&v162);
            }
          }
          std::shared_ptr<ParentQuest>::~shared_ptr((std::shared_ptr<ParentQuest> *const)(v4 + 128));
        }
      }
      if ( PlayerQuestComp::forceFinishQuestV2ByGm(quest_comp, *(_DWORD *)(v4 + 80), 1) )
      {
        common::milog::MiLogStream::create(
          &v164,
          &common::milog::MiLogDefault::default_log_obj_,
          3u,
          "./src/player/gm/player_gm_comp.cpp",
          "procQuest",
          2617);
        v50 = common::milog::MiLogStream::operator<<<char [34],(char *[34])0>(
                &v164,
                (const char (*)[34])"forceFinishQuest fails, quest_id:");
        common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v50, (const unsigned int *)(v4 + 80));
        common::milog::MiLogStream::~MiLogStream(&v164);
        refreshed = -1;
        goto LABEL_229;
      }
      goto LABEL_228;
    }
    v51 = std::vector<std::string>::operator[](param_vec, 0LL);
    if ( std::operator==<char>(v51, "FAIL") )
    {
      v52 = std::vector<std::string>::operator[](param_vec, 1uLL);
      if ( std::operator==<char>(v52, "FATHER") )
      {
        if ( std::vector<std::string>::size(param_vec) == 2 )
        {
          common::milog::MiLogStream::create(
            &v164,
            &common::milog::MiLogDefault::default_log_obj_,
            3u,
            "./src/player/gm/player_gm_comp.cpp",
            "procQuest",
            2627);
          common::milog::MiLogStream::operator<<<char [35],(char *[35])0>(
            &v164,
            (const char (*)[35])"QUEST FAIL FATHER not enough param");
          common::milog::MiLogStream::~MiLogStream(&v164);
          refreshed = -1;
          goto LABEL_229;
        }
        *(_DWORD *)(v4 + 80) = 0;
        v53 = std::vector<std::string>::operator[](param_vec, 2uLL);
        if ( common::tools::StringUtils::strToNum<unsigned int>(v53, (unsigned int *)(v4 + 80), 1) )
        {
          common::milog::MiLogStream::create(
            &v164,
            &common::milog::MiLogDefault::default_log_obj_,
            3u,
            "./src/player/gm/player_gm_comp.cpp",
            "procQuest",
            2633);
          v54 = common::milog::MiLogStream::operator<<<char [17],(char *[17])0>(
                  &v164,
                  (const char (*)[17])"strToNum failed:");
          v55 = std::vector<std::string>::operator[](param_vec, 2uLL);
          common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v54, v55);
          common::milog::MiLogStream::~MiLogStream(&v164);
          refreshed = -1;
          goto LABEL_229;
        }
        if ( PlayerQuestComp::forceFailParentQuestByGm(quest_comp, *(_DWORD *)(v4 + 80), 1) )
        {
          common::milog::MiLogStream::create(
            &v164,
            &common::milog::MiLogDefault::default_log_obj_,
            3u,
            "./src/player/gm/player_gm_comp.cpp",
            "procQuest",
            2638);
          v56 = common::milog::MiLogStream::operator<<<char [50],(char *[50])0>(
                  &v164,
                  (const char (*)[50])"foreceFailParentQuestByGm fails, parent quest_id:");
          common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v56, (const unsigned int *)(v4 + 80));
          common::milog::MiLogStream::~MiLogStream(&v164);
          refreshed = -1;
          goto LABEL_229;
        }
      }
      else
      {
        *(_DWORD *)(v4 + 80) = 0;
        v57 = std::vector<std::string>::operator[](param_vec, 1uLL);
        if ( common::tools::StringUtils::strToNum<unsigned int>(v57, (unsigned int *)(v4 + 80), 1) )
        {
          common::milog::MiLogStream::create(
            &v164,
            &common::milog::MiLogDefault::default_log_obj_,
            3u,
            "./src/player/gm/player_gm_comp.cpp",
            "procQuest",
            2647);
          v58 = common::milog::MiLogStream::operator<<<char [17],(char *[17])0>(
                  &v164,
                  (const char (*)[17])"strToNum failed:");
          v59 = std::vector<std::string>::operator[](param_vec, 1uLL);
          common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v58, v59);
          common::milog::MiLogStream::~MiLogStream(&v164);
          refreshed = -1;
          goto LABEL_229;
        }
        if ( PlayerQuestComp::forceFailQuestByGM(quest_comp, *(_DWORD *)(v4 + 80), 1) )
        {
          common::milog::MiLogStream::create(
            &v164,
            &common::milog::MiLogDefault::default_log_obj_,
            3u,
            "./src/player/gm/player_gm_comp.cpp",
            "procQuest",
            2652);
          v60 = common::milog::MiLogStream::operator<<<char [27],(char *[27])0>(
                  &v164,
                  (const char (*)[27])"failQuest fails, quest_id:");
          common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v60, (const unsigned int *)(v4 + 80));
          common::milog::MiLogStream::~MiLogStream(&v164);
          refreshed = -1;
          goto LABEL_229;
        }
      }
      goto LABEL_228;
    }
    v61 = std::vector<std::string>::operator[](param_vec, 0LL);
    if ( std::operator==<char>(v61, "RANDOM") )
    {
      v62 = std::vector<std::string>::operator[](param_vec, 1uLL);
      if ( std::operator==<char>(v62, "CLEAR") )
      {
        if ( PlayerQuestComp::forceClearAllRandomQuestByGM(quest_comp, 1) )
        {
          common::milog::MiLogStream::create(
            &v164,
            &common::milog::MiLogDefault::default_log_obj_,
            3u,
            "./src/player/gm/player_gm_comp.cpp",
            "procQuest",
            2663);
          common::milog::MiLogStream::operator<<<char [32],(char *[32])0>(
            &v164,
            (const char (*)[32])"forceClearAllRandomQuest failed");
          common::milog::MiLogStream::~MiLogStream(&v164);
          refreshed = -1;
          goto LABEL_229;
        }
        goto LABEL_228;
      }
      v63 = std::vector<std::string>::operator[](param_vec, 1uLL);
      if ( std::operator==<char>(v63, "TEMPLATE") )
      {
        if ( std::vector<std::string>::size(param_vec) <= 2 )
        {
          std::string::operator=(ret_msg, &unk_26354C40);
          common::milog::MiLogStream::create(
            &v164,
            &common::milog::MiLogDefault::default_log_obj_,
            3u,
            "./src/player/gm/player_gm_comp.cpp",
            "procQuest",
            2672);
          common::milog::MiLogStream::operator<<<char [39],(char *[39])0>(
            &v164,
            (const char (*)[39])"QUEST RANDOM TEMPLATE not enough param");
          common::milog::MiLogStream::~MiLogStream(&v164);
          refreshed = -1;
          goto LABEL_229;
        }
        if ( std::vector<std::string>::size(param_vec) == 3 )
        {
          *(_DWORD *)(v4 + 64) = 0;
          v64 = std::vector<std::string>::operator[](param_vec, 2uLL);
          if ( common::tools::StringUtils::strToNum<unsigned int>(v64, (unsigned int *)(v4 + 64), 1) )
          {
            common::milog::MiLogStream::create(
              &v164,
              &common::milog::MiLogDefault::default_log_obj_,
              3u,
              "./src/player/gm/player_gm_comp.cpp",
              "procQuest",
              2680);
            v65 = common::milog::MiLogStream::operator<<<char [17],(char *[17])0>(
                    &v164,
                    (const char (*)[17])"strToNum failed:");
            v66 = std::vector<std::string>::operator[](param_vec, 2uLL);
            common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v65, v66);
            common::milog::MiLogStream::~MiLogStream(&v164);
            refreshed = -1;
            goto LABEL_229;
          }
          *(_QWORD *)(v4 + 160) = 0LL;
          *(_QWORD *)(v4 + 168) = 0LL;
          *(_QWORD *)(v4 + 176) = 0LL;
          std::vector<std::shared_ptr<RandomQuestFilter>>::vector((std::vector<std::shared_ptr<RandomQuestFilter>> *const)(v4 + 160));
          *(_DWORD *)(v4 + 80) = 0;
          std::make_pair<data::LogicType,std::vector<std::shared_ptr<RandomQuestFilter>> &>(
            (std::pair<data::LogicType,std::vector<std::shared_ptr<RandomQuestFilter>> > *)&v164,
            (data::LogicType *)(v4 + 80),
            (std::vector<std::shared_ptr<RandomQuestFilter>> *)(v4 + 160));
          v67 = PlayerQuestComp::tryAcceptRandomQuestByTemplate(
                  quest_comp,
                  0,
                  *(_DWORD *)(v4 + 64),
                  (const std::pair<data::LogicType,std::vector<std::shared_ptr<RandomQuestFilter>> > *)&v164,
                  1) == 0;
          std::pair<data::LogicType,std::vector<std::shared_ptr<RandomQuestFilter>>>::~pair((std::pair<data::LogicType,std::vector<std::shared_ptr<RandomQuestFilter>> > *const)&v164);
          if ( v67 )
          {
            common::milog::MiLogStream::create(
              &v164,
              &common::milog::MiLogDefault::default_log_obj_,
              3u,
              "./src/player/gm/player_gm_comp.cpp",
              "procQuest",
              2686);
            v68 = common::milog::MiLogStream::operator<<<char [52],(char *[52])0>(
                    &v164,
                    (const char (*)[52])"tryAcceptRandomQuestByTemplate failed, template_id:");
            common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v68, (const unsigned int *)(v4 + 64));
            common::milog::MiLogStream::~MiLogStream(&v164);
            refreshed = -1;
            v69 = 0;
          }
          else
          {
            v69 = 1;
          }
          std::vector<std::shared_ptr<RandomQuestFilter>>::~vector((std::vector<std::shared_ptr<RandomQuestFilter>> *const)(v4 + 160));
          if ( v69 == 1 )
            goto LABEL_228;
        }
        else
        {
          if ( std::vector<std::string>::size(param_vec) <= 3 || (std::vector<std::string>::size(param_vec) & 1) != 1 )
          {
            std::string::operator=(ret_msg, &unk_26354DA0);
            common::milog::MiLogStream::create(
              &v164,
              &common::milog::MiLogDefault::default_log_obj_,
              3u,
              "./src/player/gm/player_gm_comp.cpp",
              "procQuest",
              2729);
            v93 = common::milog::MiLogStream::operator<<<char [38],(char *[38])0>(
                    &v164,
                    (const char (*)[38])"param size is not legal, param size: ");
            __for_end._M_cur = (std::__detail::_Node_iterator_base<std::pair<unsigned int const,data::QuestExcelConfig>,false>::__node_type *)std::vector<std::string>::size(param_vec);
            common::milog::MiLogStream::operator<<<unsigned long,(unsigned long *)0>(
              v93,
              (const unsigned __int64 *)&__for_end);
            common::milog::MiLogStream::~MiLogStream(&v164);
            refreshed = -1;
            goto LABEL_229;
          }
          *(_DWORD *)(v4 + 48) = 0;
          v71 = std::vector<std::string>::operator[](param_vec, 2uLL);
          if ( common::tools::StringUtils::strToNum<unsigned int>(v71, (unsigned int *)(v4 + 48), 1) )
          {
            common::milog::MiLogStream::create(
              &v164,
              &common::milog::MiLogDefault::default_log_obj_,
              3u,
              "./src/player/gm/player_gm_comp.cpp",
              "procQuest",
              2696);
            v72 = common::milog::MiLogStream::operator<<<char [17],(char *[17])0>(
                    &v164,
                    (const char (*)[17])"strToNum failed:");
            v73 = std::vector<std::string>::operator[](param_vec, 2uLL);
            common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v72, v73);
            common::milog::MiLogStream::~MiLogStream(&v164);
            refreshed = -1;
            goto LABEL_229;
          }
          std::allocator<std::pair<unsigned int const,unsigned int>>::allocator(&__a);
          std::unordered_map<unsigned int,unsigned int>::unordered_map(
            (std::unordered_map<unsigned int,unsigned int> *const)(v4 + 224),
            (std::initializer_list<std::pair<unsigned int const,unsigned int> >)0LL,
            0LL,
            &__hf,
            &__eql,
            &__a);
          std::allocator<std::pair<unsigned int const,unsigned int>>::~allocator(&__a);
          i = 3;
          while ( 1 )
          {
            v74 = i;
            if ( v74 >= std::vector<std::string>::size(param_vec) )
              break;
            *(_DWORD *)(v4 + 64) = 0;
            v75 = i++;
            v76 = std::vector<std::string>::operator[](param_vec, v75);
            if ( common::tools::StringUtils::strToNum<unsigned int>(v76, (unsigned int *)(v4 + 64), 1) )
            {
              common::milog::MiLogStream::create(
                &v164,
                &common::milog::MiLogDefault::default_log_obj_,
                3u,
                "./src/player/gm/player_gm_comp.cpp",
                "procQuest",
                2706);
              v77 = common::milog::MiLogStream::operator<<<char [17],(char *[17])0>(
                      &v164,
                      (const char (*)[17])"strToNum failed:");
              v78 = std::vector<std::string>::operator[](param_vec, i - 1);
              common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v77, v78);
              common::milog::MiLogStream::~MiLogStream(&v164);
              refreshed = -1;
LABEL_150:
              v89 = 0;
              goto LABEL_155;
            }
            v79 = i;
            if ( v79 >= std::vector<std::string>::size(param_vec) )
            {
              refreshed = -1;
              goto LABEL_150;
            }
            *(_DWORD *)(v4 + 80) = 0;
            v80 = i++;
            v81 = std::vector<std::string>::operator[](param_vec, v80);
            if ( common::tools::StringUtils::strToNum<unsigned int>(v81, (unsigned int *)(v4 + 80), 1) )
            {
              common::milog::MiLogStream::create(
                &v164,
                &common::milog::MiLogDefault::default_log_obj_,
                3u,
                "./src/player/gm/player_gm_comp.cpp",
                "procQuest",
                2714);
              v82 = common::milog::MiLogStream::operator<<<char [17],(char *[17])0>(
                      &v164,
                      (const char (*)[17])"strToNum failed:");
              v83 = std::vector<std::string>::operator[](param_vec, i - 1);
              common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v82, v83);
              common::milog::MiLogStream::~MiLogStream(&v164);
              refreshed = -1;
              goto LABEL_150;
            }
            v84 = *(_DWORD *)(v4 + 80);
            v85 = (char *)(v4 + 64);
            v86 = std::unordered_map<unsigned int,unsigned int>::operator[](
                    (std::unordered_map<unsigned int,unsigned int> *const)(v4 + 224),
                    (const std::unordered_map<unsigned int,unsigned int>::key_type *)(v4 + 64));
            v87 = v86;
            v88 = *(_BYTE *)(((unsigned __int64)v86 >> 3) + 0x7FFF8000);
            if ( v88 != 0 && (char)(((unsigned __int8)v86 & 7) + 3) >= v88 )
            {
              LOBYTE(v85) = v88 != 0;
              __asan_report_store4(v86, v85, v86);
            }
            *v87 = v84;
          }
          *(_QWORD *)(v4 + 160) = 0LL;
          *(_QWORD *)(v4 + 168) = 0LL;
          *(_QWORD *)(v4 + 176) = 0LL;
          std::vector<std::shared_ptr<RandomQuestFilter>>::vector((std::vector<std::shared_ptr<RandomQuestFilter>> *const)(v4 + 160));
          *(_DWORD *)(v4 + 80) = 0;
          std::make_pair<data::LogicType,std::vector<std::shared_ptr<RandomQuestFilter>> &>(
            (std::pair<data::LogicType,std::vector<std::shared_ptr<RandomQuestFilter>> > *)&v164,
            (data::LogicType *)(v4 + 80),
            (std::vector<std::shared_ptr<RandomQuestFilter>> *)(v4 + 160));
          v90 = PlayerQuestComp::tryAcceptRandomQuestByTemplateByGM(
                  quest_comp,
                  0,
                  *(_DWORD *)(v4 + 48),
                  (const std::pair<data::LogicType,std::vector<std::shared_ptr<RandomQuestFilter>> > *)&v164,
                  (const std::unordered_map<unsigned int,unsigned int> *)(v4 + 224),
                  1) == 0;
          std::pair<data::LogicType,std::vector<std::shared_ptr<RandomQuestFilter>>>::~pair((std::pair<data::LogicType,std::vector<std::shared_ptr<RandomQuestFilter>> > *const)&v164);
          if ( v90 )
          {
            common::milog::MiLogStream::create(
              &v164,
              &common::milog::MiLogDefault::default_log_obj_,
              3u,
              "./src/player/gm/player_gm_comp.cpp",
              "procQuest",
              2722);
            v91 = common::milog::MiLogStream::operator<<<char [56],(char *[56])0>(
                    &v164,
                    (const char (*)[56])"tryAcceptRandomQuestByTemplateByGM failed, template_id:");
            common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v91, (const unsigned int *)(v4 + 48));
            common::milog::MiLogStream::~MiLogStream(&v164);
            refreshed = -1;
            v92 = 0;
          }
          else
          {
            v92 = 1;
          }
          std::vector<std::shared_ptr<RandomQuestFilter>>::~vector((std::vector<std::shared_ptr<RandomQuestFilter>> *const)(v4 + 160));
          v89 = v92 == 1;
LABEL_155:
          std::unordered_map<unsigned int,unsigned int>::~unordered_map((std::unordered_map<unsigned int,unsigned int> *const)(v4 + 224));
          if ( v89 )
            goto LABEL_228;
        }
        goto LABEL_229;
      }
      v94 = std::vector<std::string>::operator[](param_vec, 1uLL);
      if ( !std::operator==<char>(v94, "CLEAN") )
      {
        *(_DWORD *)(v4 + 80) = 0;
        v99 = std::vector<std::string>::operator[](param_vec, 1uLL);
        if ( common::tools::StringUtils::strToNum<unsigned int>(v99, (unsigned int *)(v4 + 80), 1) )
        {
          common::milog::MiLogStream::create(
            &v164,
            &common::milog::MiLogDefault::default_log_obj_,
            3u,
            "./src/player/gm/player_gm_comp.cpp",
            "procQuest",
            2755);
          v100 = common::milog::MiLogStream::operator<<<char [17],(char *[17])0>(
                   &v164,
                   (const char (*)[17])"strToNum failed:");
          v101 = std::vector<std::string>::operator[](param_vec, 1uLL);
          common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v100, v101);
          common::milog::MiLogStream::~MiLogStream(&v164);
          refreshed = -1;
          goto LABEL_229;
        }
        if ( !PlayerQuestComp::tryAcceptRandomQuest(quest_comp, *(_DWORD *)(v4 + 80), 1) )
        {
          common::milog::MiLogStream::create(
            &v164,
            &common::milog::MiLogDefault::default_log_obj_,
            3u,
            "./src/player/gm/player_gm_comp.cpp",
            "procQuest",
            2760);
          v102 = common::milog::MiLogStream::operator<<<char [42],(char *[42])0>(
                   &v164,
                   (const char (*)[42])"tryAcceptRandomQuest failed, entrance_id:");
          common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v102, (const unsigned int *)(v4 + 80));
          common::milog::MiLogStream::~MiLogStream(&v164);
          refreshed = -1;
          goto LABEL_229;
        }
        goto LABEL_228;
      }
      if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
        __asan_report_load8(&context->player);
      Player::getSceneComp(context->player);
      PlayerSceneComp::getCurWorld<PlayerWorld>((const PlayerSceneComp *const)(v4 + 96));
      if ( std::operator==<PlayerWorld>((const std::shared_ptr<PlayerWorld> *)(v4 + 96), 0LL) )
      {
        common::milog::MiLogStream::create(
          &v164,
          &common::milog::MiLogDefault::default_log_obj_,
          3u,
          "./src/player/gm/player_gm_comp.cpp",
          "procQuest",
          2739);
        common::milog::MiLogStream::operator<<<char [18],(char *[18])0>(&v164, (const char (*)[18])"getCurWorld fails");
        common::milog::MiLogStream::~MiLogStream(&v164);
        refreshed = -1;
        v95 = 0;
      }
      else
      {
        std::__shared_ptr_access<PlayerWorld,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<PlayerWorld,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 96));
        PlayerWorld::getMainWorldScene((PlayerWorld *const)(v4 + 128));
        if ( std::operator==<PlayerWorldScene>((const std::shared_ptr<PlayerWorldScene> *)(v4 + 128), 0LL) )
        {
          common::milog::MiLogStream::create(
            &v164,
            &common::milog::MiLogDefault::default_log_obj_,
            3u,
            "./src/player/gm/player_gm_comp.cpp",
            "procQuest",
            2745);
          common::milog::MiLogStream::operator<<<char [24],(char *[24])0>(
            &v164,
            (const char (*)[24])"getMainWorldScene fails");
          common::milog::MiLogStream::~MiLogStream(&v164);
          refreshed = -1;
          v96 = 0;
        }
        else
        {
          v97 = std::__shared_ptr_access<PlayerWorldScene,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<PlayerWorldScene,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 128));
          EncounterComp = PlayerWorldScene::getEncounterComp(v97);
          SceneEncounterComp::clearRandQuestByGm(EncounterComp);
          v96 = 1;
        }
        std::shared_ptr<PlayerWorldScene>::~shared_ptr((std::shared_ptr<PlayerWorldScene> *const)(v4 + 128));
        v95 = v96 == 1;
      }
      std::shared_ptr<PlayerWorld>::~shared_ptr((std::shared_ptr<PlayerWorld> *const)(v4 + 96));
      if ( !v95 )
        goto LABEL_229;
    }
    else
    {
      v103 = std::vector<std::string>::operator[](param_vec, 0LL);
      if ( std::operator==<char>(v103, "CANCEL") )
      {
        if ( std::vector<std::string>::size(param_vec) <= 2 )
        {
          common::milog::MiLogStream::create(
            &v164,
            &common::milog::MiLogDefault::default_log_obj_,
            3u,
            "./src/player/gm/player_gm_comp.cpp",
            "procQuest",
            2769);
          common::milog::MiLogStream::operator<<<char [30],(char *[30])0>(
            &v164,
            (const char (*)[30])"QUEST CANCEL not enough param");
          common::milog::MiLogStream::~MiLogStream(&v164);
          refreshed = -1;
          goto LABEL_229;
        }
        v104 = std::vector<std::string>::operator[](param_vec, 1uLL);
        if ( std::operator!=<char>(v104, "FATHER") )
        {
          common::milog::MiLogStream::create(
            &v164,
            &common::milog::MiLogDefault::default_log_obj_,
            3u,
            "./src/player/gm/player_gm_comp.cpp",
            "procQuest",
            2774);
          common::milog::MiLogStream::operator<<<char [28],(char *[28])0>(
            &v164,
            (const char (*)[28])"QUEST CANCEL param no valid");
          common::milog::MiLogStream::~MiLogStream(&v164);
          refreshed = -1;
          goto LABEL_229;
        }
        *(_DWORD *)(v4 + 80) = 0;
        v105 = std::vector<std::string>::operator[](param_vec, 2uLL);
        if ( common::tools::StringUtils::strToNum<unsigned int>(v105, (unsigned int *)(v4 + 80), 1) )
        {
          common::milog::MiLogStream::create(
            &v164,
            &common::milog::MiLogDefault::default_log_obj_,
            3u,
            "./src/player/gm/player_gm_comp.cpp",
            "procQuest",
            2781);
          v106 = common::milog::MiLogStream::operator<<<char [17],(char *[17])0>(
                   &v164,
                   (const char (*)[17])"strToNum failed:");
          v107 = std::vector<std::string>::operator[](param_vec, 2uLL);
          common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v106, v107);
          common::milog::MiLogStream::~MiLogStream(&v164);
          refreshed = -1;
          goto LABEL_229;
        }
        if ( PlayerQuestComp::forceCancelParentQuestByGm(quest_comp, *(_DWORD *)(v4 + 80), 1) )
        {
          common::milog::MiLogStream::create(
            &v164,
            &common::milog::MiLogDefault::default_log_obj_,
            3u,
            "./src/player/gm/player_gm_comp.cpp",
            "procQuest",
            2786);
          v108 = common::milog::MiLogStream::operator<<<char [51],(char *[51])0>(
                   &v164,
                   (const char (*)[51])"forceCancelParentQuestByGm fails, parent quest_id:");
          common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v108, (const unsigned int *)(v4 + 80));
          common::milog::MiLogStream::~MiLogStream(&v164);
          refreshed = -1;
          goto LABEL_229;
        }
        goto LABEL_228;
      }
      v109 = std::vector<std::string>::operator[](param_vec, 0LL);
      if ( std::operator==<char>(v109, "SET_GLOBAL") )
      {
        if ( std::vector<std::string>::size(param_vec) <= 2 )
        {
          common::milog::MiLogStream::create(
            &v164,
            &common::milog::MiLogDefault::default_log_obj_,
            3u,
            "./src/player/gm/player_gm_comp.cpp",
            "procQuest",
            2794);
          common::milog::MiLogStream::operator<<<char [34],(char *[34])0>(
            &v164,
            (const char (*)[34])"QUEST SET_GLOBAL not enough param");
          common::milog::MiLogStream::~MiLogStream(&v164);
          refreshed = -1;
          goto LABEL_229;
        }
        *(_DWORD *)(v4 + 64) = 0;
        *(_DWORD *)(v4 + 80) = 0;
        v110 = std::vector<std::string>::operator[](param_vec, 1uLL);
        if ( common::tools::StringUtils::strToNum<unsigned int>(v110, (unsigned int *)(v4 + 64), 1) )
        {
          common::milog::MiLogStream::create(
            &v164,
            &common::milog::MiLogDefault::default_log_obj_,
            3u,
            "./src/player/gm/player_gm_comp.cpp",
            "procQuest",
            2801);
          v111 = common::milog::MiLogStream::operator<<<char [21],(char *[21])0>(
                   &v164,
                   (const char (*)[21])"strToNum key failed:");
          v112 = std::vector<std::string>::operator[](param_vec, 1uLL);
          common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v111, v112);
          common::milog::MiLogStream::~MiLogStream(&v164);
          refreshed = -1;
          goto LABEL_229;
        }
        v113 = std::vector<std::string>::operator[](param_vec, 2uLL);
        if ( common::tools::StringUtils::strToNum<int>(v113, (int *)(v4 + 80), 1) )
        {
          common::milog::MiLogStream::create(
            &v164,
            &common::milog::MiLogDefault::default_log_obj_,
            3u,
            "./src/player/gm/player_gm_comp.cpp",
            "procQuest",
            2806);
          v114 = common::milog::MiLogStream::operator<<<char [23],(char *[23])0>(
                   &v164,
                   (const char (*)[23])"strToNum value failed:");
          v115 = std::vector<std::string>::operator[](param_vec, 2uLL);
          common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v114, v115);
          common::milog::MiLogStream::~MiLogStream(&v164);
          refreshed = -1;
          goto LABEL_229;
        }
        PlayerQuestComp::setGlobalVarValueByGm(quest_comp, *(_DWORD *)(v4 + 64), *(_DWORD *)(v4 + 80));
        goto LABEL_228;
      }
      v116 = std::vector<std::string>::operator[](param_vec, 0LL);
      if ( std::operator==<char>(v116, "SET_TIMEVAR") )
      {
        if ( std::vector<std::string>::size(param_vec) > 3 )
        {
          *(_DWORD *)(v4 + 48) = 0;
          *(_DWORD *)(v4 + 64) = 0;
          v117 = std::vector<std::string>::operator[](param_vec, 1uLL);
          if ( common::tools::StringUtils::strToNum<unsigned int>(v117, (unsigned int *)(v4 + 48), 1) )
          {
            common::milog::MiLogStream::create(
              &v164,
              &common::milog::MiLogDefault::default_log_obj_,
              3u,
              "./src/player/gm/player_gm_comp.cpp",
              "procQuest",
              2822);
            v118 = common::milog::MiLogStream::operator<<<char [33],(char *[33])0>(
                     &v164,
                     (const char (*)[33])"strToNum parent_quest_id failed:");
            v119 = std::vector<std::string>::operator[](param_vec, 1uLL);
            common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v118, v119);
            common::milog::MiLogStream::~MiLogStream(&v164);
            refreshed = -1;
          }
          else
          {
            v120 = std::vector<std::string>::operator[](param_vec, 2uLL);
            if ( common::tools::StringUtils::strToNum<unsigned int>(v120, (unsigned int *)(v4 + 64), 1) )
            {
              common::milog::MiLogStream::create(
                &v164,
                &common::milog::MiLogDefault::default_log_obj_,
                3u,
                "./src/player/gm/player_gm_comp.cpp",
                "procQuest",
                2827);
              v121 = common::milog::MiLogStream::operator<<<char [21],(char *[21])0>(
                       &v164,
                       (const char (*)[21])"strToNum key failed:");
              v122 = std::vector<std::string>::operator[](param_vec, 2uLL);
              common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v121, v122);
              common::milog::MiLogStream::~MiLogStream(&v164);
              refreshed = -1;
            }
            else if ( std::vector<std::string>::size(param_vec) <= 3 )
            {
              refreshed = PlayerQuestComp::refreshQuestTimeVar(quest_comp, *(_DWORD *)(v4 + 48), *(_DWORD *)(v4 + 64));
            }
            else
            {
              *(_DWORD *)(v4 + 80) = 0;
              v123 = std::vector<std::string>::operator[](param_vec, 3uLL);
              if ( common::tools::StringUtils::strToNum<unsigned int>(v123, (unsigned int *)(v4 + 80), 1) )
              {
                common::milog::MiLogStream::create(
                  &v164,
                  &common::milog::MiLogDefault::default_log_obj_,
                  3u,
                  "./src/player/gm/player_gm_comp.cpp",
                  "procQuest",
                  2835);
                v124 = common::milog::MiLogStream::operator<<<char [27],(char *[27])0>(
                         &v164,
                         (const char (*)[27])"strToNum timestamp failed:");
                v125 = std::vector<std::string>::operator[](param_vec, 3uLL);
                common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v124, v125);
                common::milog::MiLogStream::~MiLogStream(&v164);
                refreshed = -1;
              }
              else
              {
                refreshed = PlayerQuestComp::setQuestTimeVarByGM(
                              quest_comp,
                              *(_DWORD *)(v4 + 48),
                              *(_DWORD *)(v4 + 64),
                              *(_DWORD *)(v4 + 80));
              }
            }
          }
        }
        else
        {
          common::milog::MiLogStream::create(
            &v164,
            &common::milog::MiLogDefault::default_log_obj_,
            3u,
            "./src/player/gm/player_gm_comp.cpp",
            "procQuest",
            2815);
          common::milog::MiLogStream::operator<<<char [35],(char *[35])0>(
            &v164,
            (const char (*)[35])"QUEST SET_TIMEVAR not enough param");
          common::milog::MiLogStream::~MiLogStream(&v164);
          refreshed = -1;
        }
        goto LABEL_229;
      }
      v126 = std::vector<std::string>::operator[](param_vec, 0LL);
      if ( std::operator==<char>(v126, "STATE") )
      {
        if ( std::vector<std::string>::size(param_vec) > 1 )
        {
          *(_DWORD *)(v4 + 80) = 0;
          v127 = std::vector<std::string>::operator[](param_vec, 1uLL);
          if ( common::tools::StringUtils::strToNum<unsigned int>(v127, (unsigned int *)(v4 + 80), 1) )
          {
            common::milog::MiLogStream::create(
              &v164,
              &common::milog::MiLogDefault::default_log_obj_,
              3u,
              "./src/player/gm/player_gm_comp.cpp",
              "procQuest",
              2855);
            v128 = common::milog::MiLogStream::operator<<<char [21],(char *[21])0>(
                     &v164,
                     (const char (*)[21])"strToNum key failed:");
            v129 = std::vector<std::string>::operator[](param_vec, 1uLL);
            common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v128, v129);
            common::milog::MiLogStream::~MiLogStream(&v164);
            refreshed = -1;
          }
          else
          {
            switch ( PlayerQuestComp::getQuestState(quest_comp, *(_DWORD *)(v4 + 80)) )
            {
              case QUEST_STATE_NONE:
                std::string::operator=(ret_msg, "QUEST_STATE_NONE");
                goto LABEL_228;
              case QUEST_STATE_UNSTARTED:
                std::string::operator=(ret_msg, "QUEST_STATE_UNSTARTED");
                goto LABEL_228;
              case QUEST_STATE_UNFINISHED:
                std::string::operator=(ret_msg, "QUEST_STATE_UNFINISHED");
                goto LABEL_228;
              case QUEST_STATE_FINISHED:
                std::string::operator=(ret_msg, "QUEST_STATE_FINISHED");
                goto LABEL_228;
              case QUEST_STATE_FAILED:
                std::string::operator=(ret_msg, "QUEST_STATE_FAILED");
                goto LABEL_228;
              default:
                common::milog::MiLogStream::create(
                  &v164,
                  &common::milog::MiLogDefault::default_log_obj_,
                  3u,
                  "./src/player/gm/player_gm_comp.cpp",
                  "procQuest",
                  2877);
                common::milog::MiLogStream::operator<<<char [14],(char *[14])0>(
                  &v164,
                  (const char (*)[14])"invalid state");
                common::milog::MiLogStream::~MiLogStream(&v164);
                refreshed = -1;
                break;
            }
          }
        }
        else
        {
          common::milog::MiLogStream::create(
            &v164,
            &common::milog::MiLogDefault::default_log_obj_,
            3u,
            "./src/player/gm/player_gm_comp.cpp",
            "procQuest",
            2849);
          common::milog::MiLogStream::operator<<<char [34],(char *[34])0>(
            &v164,
            (const char (*)[34])"QUEST SET_GLOBAL not enough param");
          common::milog::MiLogStream::~MiLogStream(&v164);
          refreshed = -1;
        }
        goto LABEL_229;
      }
      v130 = std::vector<std::string>::operator[](param_vec, 0LL);
      if ( !std::operator==<char>(v130, "BLOCK") )
      {
        common::milog::MiLogStream::create(
          &v164,
          &common::milog::MiLogDefault::default_log_obj_,
          3u,
          "./src/player/gm/player_gm_comp.cpp",
          "procQuest",
          2903);
        v136 = common::milog::MiLogStream::operator<<<char [15],(char *[15])0>(
                 &v164,
                 (const char (*)[15])"unknown param:");
        common::milog::MiLogStream::operator<<<std::string>(v136, param_vec);
        common::milog::MiLogStream::~MiLogStream(&v164);
        refreshed = -1;
        goto LABEL_229;
      }
      if ( std::vector<std::string>::size(param_vec) != 2 )
      {
        common::milog::MiLogStream::create(
          &v164,
          &common::milog::MiLogDefault::default_log_obj_,
          3u,
          "./src/player/gm/player_gm_comp.cpp",
          "procQuest",
          2885);
        common::milog::MiLogStream::operator<<<char [32],(char *[32])0>(
          &v164,
          (const char (*)[32])"QUEST BLOCK param num not match");
        common::milog::MiLogStream::~MiLogStream(&v164);
        refreshed = -1;
        goto LABEL_229;
      }
      v131 = std::vector<std::string>::operator[](param_vec, 1uLL);
      if ( std::operator==<char>(v131, "UNLOCK") )
      {
        if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
          __asan_report_load8(&context->player);
        GmComp = Player::getGmComp(context->player);
        __a.gap0[0] = 1;
        PlayerGmComp::setGmSetValue<bool>(GmComp, 0xCu, (const bool *)__a.gap0);
        if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
          __asan_report_load8(&context->player);
        MpComp = Player::getMpComp(context->player);
        PlayerMpComp::refreshMpModeAvailability(MpComp);
        refreshed = 0;
        goto LABEL_229;
      }
      v134 = std::vector<std::string>::operator[](param_vec, 1uLL);
      if ( std::operator==<char>(v134, "NORMAL") )
      {
        if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
          __asan_report_load8(&context->player);
        v135 = Player::getGmComp(context->player);
        __a.gap0[0] = 0;
        PlayerGmComp::setGmSetValue<bool>(v135, 0xCu, (const bool *)__a.gap0);
        refreshed = 0;
        goto LABEL_229;
      }
    }
LABEL_228:
    refreshed = 0;
    goto LABEL_229;
  }
  v8 = std::vector<std::string>::operator[](param_vec, 1uLL);
  if ( std::operator==<char>(v8, _f.gap0) )
  {
    ServiceBox::findService<GameserverService>();
    GameserverService::getConfig((GameserverService *const)(v4 + 128));
    __for_range = &std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 128))->design_config.txt_config_mgr.quest_config_mgr.quest_excel_config_map;
    std::shared_ptr<Config>::~shared_ptr((std::shared_ptr<Config> *const)(v4 + 128));
    __for_begin._M_cur = std::unordered_map<unsigned int,data::QuestExcelConfig>::begin(__for_range)._M_cur;
    __for_end._M_cur = std::unordered_map<unsigned int,data::QuestExcelConfig>::end(__for_range)._M_cur;
    while ( std::__detail::operator!=<std::pair<unsigned int const,data::QuestExcelConfig>,false>(
              &__for_begin,
              &__for_end) )
    {
      v155 = std::__detail::_Node_const_iterator<std::pair<unsigned int const,data::QuestExcelConfig>,false,false>::operator*(&__for_begin);
      quest_id = std::get<0ul,unsigned int const,data::QuestExcelConfig>(v155);
      _ = (std::tuple_element<1,const std::pair<unsigned int const,data::QuestExcelConfig> >::type *)std::get<1ul,unsigned int const,data::QuestExcelConfig>(v155);
      if ( *(_BYTE *)(((unsigned __int64)quest_id >> 3) + 0x7FFF8000) != 0
        && (char)(((unsigned __int8)quest_id & 7) + 3) >= *(_BYTE *)(((unsigned __int64)quest_id >> 3) + 0x7FFF8000) )
      {
        __asan_report_load4(quest_id);
      }
      PlayerQuestComp::forceAcceptQuestByGM(quest_comp, *quest_id, 1);
      std::__detail::_Node_const_iterator<std::pair<unsigned int const,data::QuestExcelConfig>,false,false>::operator++(&__for_begin);
    }
    goto LABEL_228;
  }
  *(_DWORD *)(v4 + 80) = 0;
  v9 = std::vector<std::string>::operator[](param_vec, 1uLL);
  if ( common::tools::StringUtils::strToNum<unsigned int>(v9, (unsigned int *)(v4 + 80), 1) )
  {
    common::milog::MiLogStream::create(
      &v164,
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/player/gm/player_gm_comp.cpp",
      "procQuest",
      2465);
    v10 = common::milog::MiLogStream::operator<<<char [17],(char *[17])0>(&v164, (const char (*)[17])"strToNum failed:");
    v11 = std::vector<std::string>::operator[](param_vec, 1uLL);
    common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v10, v11);
    common::milog::MiLogStream::~MiLogStream(&v164);
    refreshed = -1;
    goto LABEL_229;
  }
  quest_config_ptr = PlayerQuestComp::findPlayerQuestExcelConfig(quest_comp, *(_DWORD *)(v4 + 80));
  if ( !quest_config_ptr )
    goto LABEL_234;
  if ( *(_BYTE *)(((unsigned __int64)&quest_config_ptr->main_id >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)quest_config_ptr + 12) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&quest_config_ptr->main_id >> 3)
                                                                    + 0x7FFF8000) )
  {
    __asan_report_load4(&quest_config_ptr->main_id);
  }
  PlayerQuestComp::findParentQuest((const PlayerQuestComp *const)(v4 + 128), (uint32_t)quest_comp);
  if ( std::operator!=<ParentQuest>(0LL, (const std::shared_ptr<ParentQuest> *)(v4 + 128))
    && (v12 = std::__shared_ptr_access<ParentQuest,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<ParentQuest,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 128)),
        ParentQuest::getParentQuestState(v12) == PARENT_QUEST_STATE_FINISHED) )
  {
    common::milog::MiLogStream::create(
      &v164,
      &common::milog::MiLogDefault::default_log_obj_,
      1u,
      "./src/player/gm/player_gm_comp.cpp",
      "procQuest",
      2474);
    v14 = common::milog::MiLogStream::operator<<<char [14],(char *[14])0>(&v164, (const char (*)[14])"parent quest ");
    v15 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v14, &quest_config_ptr->main_id);
    v16 = common::milog::MiLogStream::operator<<<char [21],(char *[21])0>(v15, (const char (*)[21])off_26354520);
    v17 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v16, (const unsigned int *)(v4 + 80));
    common::milog::MiLogStream::operator<<<char [18],(char *[18])0>(v17, (const char (*)[18])" failed to accept");
    common::milog::MiLogStream::~MiLogStream(&v164);
    std::to_string(&v162, *(_DWORD *)(v4 + 80));
    if ( *(_BYTE *)(((unsigned __int64)&quest_config_ptr->main_id >> 3) + 0x7FFF8000) != 0
      && (char)((((_BYTE)quest_config_ptr + 12) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&quest_config_ptr->main_id >> 3)
                                                                      + 0x7FFF8000) )
    {
      __asan_report_load4(&quest_config_ptr->main_id);
    }
    std::to_string(&__rhs, quest_config_ptr->main_id);
    std::literals::string_literals::operator"" s[abi:cxx11](&__lhs, &byte_263545A0, 9uLL);
    std::operator+<char>(&v160, &__lhs, &__rhs);
    std::operator+<char>(&v161, &v160, &byte_263545E0);
    std::operator+<char>(&v163, &v161, &v162);
    std::operator+<char>((std::string *)&v164, &v163, &byte_26354620);
    std::string::operator=(ret_msg, &v164);
    std::string::~string(&v164);
    std::string::~string(&v163);
    std::string::~string(&v161);
    std::string::~string(&v160);
    std::string::~string(&__lhs);
    std::string::~string(&__rhs);
    std::string::~string(&v162);
    refreshed = -1;
    v18 = 0;
  }
  else
  {
    v18 = 1;
  }
  std::shared_ptr<ParentQuest>::~shared_ptr((std::shared_ptr<ParentQuest> *const)(v4 + 128));
  if ( v18 == 1 )
  {
LABEL_234:
    if ( PlayerQuestComp::forceAcceptQuestByGM(quest_comp, *(_DWORD *)(v4 + 80), 1) )
    {
      common::milog::MiLogStream::create(
        &v164,
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/player/gm/player_gm_comp.cpp",
        "procQuest",
        2481);
      v19 = common::milog::MiLogStream::operator<<<char [34],(char *[34])0>(
              &v164,
              (const char (*)[34])"forceAcceptQuest fails, quest_id:");
      common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v19, (const unsigned int *)(v4 + 80));
      common::milog::MiLogStream::~MiLogStream(&v164);
      refreshed = -1;
      goto LABEL_229;
    }
    goto LABEL_228;
  }
LABEL_229:
  result = refreshed;
  if ( v165 == (char *)v4 )
  {
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8008) = 0LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8010) = 0LL;
    *(_DWORD *)((v4 >> 3) + 0x7FFF8018) = 0;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8020) = 0LL;
  }
  else
  {
    *(_QWORD *)v4 = 1172321806LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8020) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 2909: range 0000000017D72EB8-0000000017D72F5A
void __cdecl unlockPointRegister::unlockPointRegister(unlockPointRegister *const this)
{
  std::function<int(GmContext&,const std::vector<std::string>&,std::string&)> *v1; // rax
  std::allocator<char> __a; // [rsp+1Fh] [rbp-31h] BYREF
  std::string __k; // [rsp+20h] [rbp-30h] BYREF

  std::allocator<char>::allocator(&__a);
  std::string::basic_string<std::allocator<char>>(&__k, "POINT", &__a);
  v1 = std::unordered_map<std::string,std::function<int ()(GmContext &,std::vector<std::string> const&,std::string&)>>::operator[](
         &GmUtils::op_func_map[abi:cxx11],
         &__k);
  std::function<int ()(GmContext &,std::vector<std::string> const&,std::string&)>::operator=<int (&)(GmContext &,std::vector<std::string> const&,std::string&)>(
    v1,
    (int (*)(GmContext *, const std::vector<std::string> *, std::string *))unlockPoint);
  std::string::~string(&__k);
  std::allocator<char>::~allocator(&__a);
};

// Line 2910: range 0000000017BD55C2-0000000017BD6BD2
int32_t __cdecl unlockPoint(GmContext *context, const std::vector<std::string> *param_vec, std::string *ret_msg)
{
  int32_t v3; // r14d
  unsigned __int64 v4; // r13
  __int64 v5; // rax
  _DWORD *v6; // r12
  const std::string *v7; // rax
  const std::string *v8; // rax
  common::milog::MiLogStream *v9; // rdx
  PlayerSceneComp *SceneComp; // rax
  common::milog::MiLogStream *v11; // rcx
  const std::string *v12; // rax
  const std::string *v13; // rax
  common::milog::MiLogStream *v14; // rdx
  PlayerSceneComp *v15; // rax
  const std::string *v16; // rax
  const std::string *v17; // rax
  common::milog::MiLogStream *v18; // rdx
  PlayerSceneComp *v19; // rax
  const std::string *v20; // rax
  const std::string *v21; // rax
  common::milog::MiLogStream *v22; // rdx
  const std::string *v23; // rax
  common::milog::MiLogStream *v24; // rdx
  PlayerSceneComp *v25; // rax
  common::milog::MiLogStream *v26; // rcx
  int v27; // r15d
  const std::string *v28; // rax
  const std::string *v29; // rax
  common::milog::MiLogStream *v30; // rdx
  const std::string *v31; // rax
  common::milog::MiLogStream *v32; // rdx
  PlayerSceneComp *v33; // r14
  common::milog::MiLogStream *v34; // rcx
  const std::string *v35; // rax
  const std::string *v36; // rax
  common::milog::MiLogStream *v37; // rdx
  const std::string *v38; // rax
  common::milog::MiLogStream *v39; // rdx
  PlayerSceneComp *v40; // r14
  common::milog::MiLogStream *v41; // rdx
  PlayerSceneComp *v42; // rax
  int32_t result; // eax
  std::initializer_list<unsigned int> __l; // [rsp+0h] [rbp-140h]
  std::initializer_list<unsigned int> v45; // [rsp+10h] [rbp-130h]
  std::allocator<unsigned int> __a; // [rsp+4Fh] [rbp-F1h] BYREF
  common::milog::MiLogStream v47; // [rsp+50h] [rbp-F0h] BYREF
  char v48[208]; // [rsp+70h] [rbp-D0h] BYREF

  v4 = (unsigned __int64)v48;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v5 = __asan_stack_malloc_2(160LL);
    if ( v5 )
      v4 = v5;
  }
  *(_QWORD *)v4 = 1102416563LL;
  *(_QWORD *)(v4 + 8) = "4 48 4 13 scene_id:2916 64 4 13 point_id:3018 80 4 13 point_id:3032 96 24 17 point_id_vec:2975";
  *(_QWORD *)(v4 + 16) = unlockPoint;
  v6 = (_DWORD *)(v4 >> 3);
  v6[536862720] = -235802127;
  v6[536862721] = -234556943;
  v6[536862722] = -234556924;
  v6[536862723] = -218103808;
  v6[536862724] = -202116109;
  if ( std::vector<std::string>::size(param_vec) <= 1 )
  {
    common::milog::MiLogStream::create(
      &v47,
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/player/gm/player_gm_comp.cpp",
      "unlockPoint",
      2913);
    common::milog::MiLogStream::operator<<<char [17],(char *[17])0>(&v47, (const char (*)[17])"param not enough");
    common::milog::MiLogStream::~MiLogStream(&v47);
    v3 = -1;
    goto LABEL_84;
  }
  *(_DWORD *)(v4 + 48) = 0;
  v7 = std::vector<std::string>::operator[](param_vec, 1uLL);
  if ( std::operator==<char>(v7, _f.gap0) )
  {
    v8 = std::vector<std::string>::operator[](param_vec, 0LL);
    if ( common::tools::StringUtils::strToNum<unsigned int>(v8, (unsigned int *)(v4 + 48), 1) )
    {
      common::milog::MiLogStream::create(
        &v47,
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/player/gm/player_gm_comp.cpp",
        "unlockPoint",
        2921);
      v9 = common::milog::MiLogStream::operator<<<char [15],(char *[15])0>(&v47, (const char (*)[15])"invalid param:");
      common::milog::MiLogStream::operator<<<std::string>(v9, param_vec);
      common::milog::MiLogStream::~MiLogStream(&v47);
      v3 = -1;
      goto LABEL_84;
    }
    if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
      __asan_report_load8(&context->player);
    SceneComp = Player::getSceneComp(context->player);
    if ( PlayerSceneComp::unlockAllPointByGm(SceneComp, *(_DWORD *)(v4 + 48), 1) )
    {
      common::milog::MiLogStream::create(
        &v47,
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/player/gm/player_gm_comp.cpp",
        "unlockPoint",
        2926);
      v11 = common::milog::MiLogStream::operator<<<char [20],(char *[20])0>(
              &v47,
              (const char (*)[20])"unlockPoint fails, ");
      if ( *(_BYTE *)(((unsigned __int64)context >> 3) + 0x7FFF8000) )
        __asan_report_load8(context);
LABEL_82:
      common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v11, context->msg);
      common::milog::MiLogStream::~MiLogStream(&v47);
      v3 = -1;
      goto LABEL_84;
    }
    goto LABEL_83;
  }
  v12 = std::vector<std::string>::operator[](param_vec, 1uLL);
  if ( std::operator==<char>(v12, "DUNGEON_ENTRY") )
  {
    v13 = std::vector<std::string>::operator[](param_vec, 0LL);
    if ( common::tools::StringUtils::strToNum<unsigned int>(v13, (unsigned int *)(v4 + 48), 1) )
    {
      common::milog::MiLogStream::create(
        &v47,
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/player/gm/player_gm_comp.cpp",
        "unlockPoint",
        2934);
      v14 = common::milog::MiLogStream::operator<<<char [15],(char *[15])0>(&v47, (const char (*)[15])"invalid param:");
      common::milog::MiLogStream::operator<<<std::string>(v14, param_vec);
      common::milog::MiLogStream::~MiLogStream(&v47);
      v3 = -1;
      goto LABEL_84;
    }
    if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
      __asan_report_load8(&context->player);
    v15 = Player::getSceneComp(context->player);
    if ( PlayerSceneComp::unlockAllDailyDungeonEntryByGm(v15, *(_DWORD *)(v4 + 48), 1) )
    {
      common::milog::MiLogStream::create(
        &v47,
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/player/gm/player_gm_comp.cpp",
        "unlockPoint",
        2939);
      v11 = common::milog::MiLogStream::operator<<<char [20],(char *[20])0>(
              &v47,
              (const char (*)[20])"unlockPoint fails, ");
      if ( *(_BYTE *)(((unsigned __int64)context >> 3) + 0x7FFF8000) )
        __asan_report_load8(context);
      goto LABEL_82;
    }
    goto LABEL_83;
  }
  v16 = std::vector<std::string>::operator[](param_vec, 1uLL);
  if ( std::operator==<char>(v16, "REVERT") )
  {
    v17 = std::vector<std::string>::operator[](param_vec, 0LL);
    if ( common::tools::StringUtils::strToNum<unsigned int>(v17, (unsigned int *)(v4 + 48), 1) )
    {
      common::milog::MiLogStream::create(
        &v47,
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/player/gm/player_gm_comp.cpp",
        "unlockPoint",
        2947);
      v18 = common::milog::MiLogStream::operator<<<char [15],(char *[15])0>(&v47, (const char (*)[15])"invalid param:");
      common::milog::MiLogStream::operator<<<std::string>(v18, param_vec);
      common::milog::MiLogStream::~MiLogStream(&v47);
      v3 = -1;
      goto LABEL_84;
    }
    if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
      __asan_report_load8(&context->player);
    v19 = Player::getSceneComp(context->player);
    if ( PlayerSceneComp::revertUnlockAllPointByGm(v19, *(_DWORD *)(v4 + 48)) )
    {
      common::milog::MiLogStream::create(
        &v47,
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/player/gm/player_gm_comp.cpp",
        "unlockPoint",
        2952);
      v11 = common::milog::MiLogStream::operator<<<char [29],(char *[29])0>(
              &v47,
              (const char (*)[29])"revertUnlockAllPoint fails, ");
      if ( *(_BYTE *)(((unsigned __int64)context >> 3) + 0x7FFF8000) )
        __asan_report_load8(context);
      goto LABEL_82;
    }
    goto LABEL_83;
  }
  v20 = std::vector<std::string>::operator[](param_vec, 1uLL);
  if ( !std::operator==<char>(v20, "LOCK") )
  {
    v28 = std::vector<std::string>::operator[](param_vec, 1uLL);
    if ( std::operator==<char>(v28, "HIDE") )
    {
      if ( std::vector<std::string>::size(param_vec) <= 2 )
      {
        common::milog::MiLogStream::create(
          &v47,
          &common::milog::MiLogDefault::default_log_obj_,
          3u,
          "./src/player/gm/player_gm_comp.cpp",
          "unlockPoint",
          2986);
        common::milog::MiLogStream::operator<<<char [17],(char *[17])0>(&v47, (const char (*)[17])"param not enough");
        common::milog::MiLogStream::~MiLogStream(&v47);
        v3 = -1;
        goto LABEL_84;
      }
      v29 = std::vector<std::string>::operator[](param_vec, 0LL);
      if ( common::tools::StringUtils::strToNum<unsigned int>(v29, (unsigned int *)(v4 + 48), 1) )
      {
        common::milog::MiLogStream::create(
          &v47,
          &common::milog::MiLogDefault::default_log_obj_,
          3u,
          "./src/player/gm/player_gm_comp.cpp",
          "unlockPoint",
          2991);
        v30 = common::milog::MiLogStream::operator<<<char [15],(char *[15])0>(
                &v47,
                (const char (*)[15])"invalid param:");
        common::milog::MiLogStream::operator<<<std::string>(v30, param_vec);
        common::milog::MiLogStream::~MiLogStream(&v47);
        v3 = -1;
        goto LABEL_84;
      }
      *(_DWORD *)(v4 + 64) = 0;
      v31 = std::vector<std::string>::operator[](param_vec, 2uLL);
      if ( common::tools::StringUtils::strToNum<unsigned int>(v31, (unsigned int *)(v4 + 64), 1) )
      {
        common::milog::MiLogStream::create(
          &v47,
          &common::milog::MiLogDefault::default_log_obj_,
          3u,
          "./src/player/gm/player_gm_comp.cpp",
          "unlockPoint",
          2997);
        v32 = common::milog::MiLogStream::operator<<<char [15],(char *[15])0>(
                &v47,
                (const char (*)[15])"invalid param:");
        common::milog::MiLogStream::operator<<<std::string>(v32, param_vec);
        common::milog::MiLogStream::~MiLogStream(&v47);
        v3 = -1;
        goto LABEL_84;
      }
      if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
        __asan_report_load8(&context->player);
      v33 = Player::getSceneComp(context->player);
      *(_DWORD *)(v4 + 80) = *(_DWORD *)(v4 + 64);
      __l._M_array = (std::initializer_list<unsigned int>::iterator)(v4 + 80);
      __l._M_len = 1LL;
      std::allocator<unsigned int>::allocator(&__a);
      std::vector<unsigned int>::vector((std::vector<unsigned int> *const)(v4 + 96), __l, &__a);
      LOBYTE(v33) = PlayerSceneComp::hidePoint(
                      v33,
                      *(_DWORD *)(v4 + 48),
                      (const std::vector<unsigned int> *)(v4 + 96),
                      1) != 0;
      std::vector<unsigned int>::~vector((std::vector<unsigned int> *const)(v4 + 96));
      std::allocator<unsigned int>::~allocator(&__a);
      if ( !(_BYTE)v33 )
        goto LABEL_83;
      common::milog::MiLogStream::create(
        &v47,
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/player/gm/player_gm_comp.cpp",
        "unlockPoint",
        3002);
      v34 = common::milog::MiLogStream::operator<<<char [18],(char *[18])0>(
              &v47,
              (const char (*)[18])"hidePoint fails, ");
      if ( *(_BYTE *)(((unsigned __int64)context >> 3) + 0x7FFF8000) )
        __asan_report_load8(context);
    }
    else
    {
      v35 = std::vector<std::string>::operator[](param_vec, 1uLL);
      if ( !std::operator==<char>(v35, "UNHIDE") )
      {
        *(_DWORD *)(v4 + 80) = 0;
        if ( common::tools::StringUtils::strVecToNum<0u,unsigned int,unsigned int &>(
               param_vec,
               (unsigned int *)(v4 + 48),
               (unsigned int *)(v4 + 80),
               (unsigned int *)(v4 + 48)) )
        {
          common::milog::MiLogStream::create(
            &v47,
            &common::milog::MiLogDefault::default_log_obj_,
            3u,
            "./src/player/gm/player_gm_comp.cpp",
            "unlockPoint",
            3035);
          v41 = common::milog::MiLogStream::operator<<<char [15],(char *[15])0>(
                  &v47,
                  (const char (*)[15])"invalid param:");
          common::milog::MiLogStream::operator<<<std::string>(v41, param_vec);
          common::milog::MiLogStream::~MiLogStream(&v47);
          v3 = -1;
          goto LABEL_84;
        }
        if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
          __asan_report_load8(&context->player);
        v42 = Player::getSceneComp(context->player);
        if ( PlayerSceneComp::unlockPoint(v42, *(_DWORD *)(v4 + 48), *(_DWORD *)(v4 + 80), 1) )
        {
          common::milog::MiLogStream::create(
            &v47,
            &common::milog::MiLogDefault::default_log_obj_,
            3u,
            "./src/player/gm/player_gm_comp.cpp",
            "unlockPoint",
            3040);
          v11 = common::milog::MiLogStream::operator<<<char [20],(char *[20])0>(
                  &v47,
                  (const char (*)[20])"unlockPoint fails, ");
          if ( *(_BYTE *)(((unsigned __int64)context >> 3) + 0x7FFF8000) )
            __asan_report_load8(context);
          goto LABEL_82;
        }
        goto LABEL_83;
      }
      if ( std::vector<std::string>::size(param_vec) <= 2 )
      {
        common::milog::MiLogStream::create(
          &v47,
          &common::milog::MiLogDefault::default_log_obj_,
          3u,
          "./src/player/gm/player_gm_comp.cpp",
          "unlockPoint",
          3010);
        common::milog::MiLogStream::operator<<<char [17],(char *[17])0>(&v47, (const char (*)[17])"param not enough");
        common::milog::MiLogStream::~MiLogStream(&v47);
        v3 = -1;
        goto LABEL_84;
      }
      v36 = std::vector<std::string>::operator[](param_vec, 0LL);
      if ( common::tools::StringUtils::strToNum<unsigned int>(v36, (unsigned int *)(v4 + 48), 1) )
      {
        common::milog::MiLogStream::create(
          &v47,
          &common::milog::MiLogDefault::default_log_obj_,
          3u,
          "./src/player/gm/player_gm_comp.cpp",
          "unlockPoint",
          3015);
        v37 = common::milog::MiLogStream::operator<<<char [15],(char *[15])0>(
                &v47,
                (const char (*)[15])"invalid param:");
        common::milog::MiLogStream::operator<<<std::string>(v37, param_vec);
        common::milog::MiLogStream::~MiLogStream(&v47);
        v3 = -1;
        goto LABEL_84;
      }
      *(_DWORD *)(v4 + 64) = 0;
      v38 = std::vector<std::string>::operator[](param_vec, 2uLL);
      if ( common::tools::StringUtils::strToNum<unsigned int>(v38, (unsigned int *)(v4 + 64), 1) )
      {
        common::milog::MiLogStream::create(
          &v47,
          &common::milog::MiLogDefault::default_log_obj_,
          3u,
          "./src/player/gm/player_gm_comp.cpp",
          "unlockPoint",
          3021);
        v39 = common::milog::MiLogStream::operator<<<char [15],(char *[15])0>(
                &v47,
                (const char (*)[15])"invalid param:");
        common::milog::MiLogStream::operator<<<std::string>(v39, param_vec);
        common::milog::MiLogStream::~MiLogStream(&v47);
        v3 = -1;
        goto LABEL_84;
      }
      if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
        __asan_report_load8(&context->player);
      v40 = Player::getSceneComp(context->player);
      *(_DWORD *)(v4 + 80) = *(_DWORD *)(v4 + 64);
      v45._M_array = (std::initializer_list<unsigned int>::iterator)(v4 + 80);
      v45._M_len = 1LL;
      std::allocator<unsigned int>::allocator(&__a);
      std::vector<unsigned int>::vector((std::vector<unsigned int> *const)(v4 + 96), v45, &__a);
      LOBYTE(v40) = PlayerSceneComp::unhidePoint(
                      v40,
                      *(_DWORD *)(v4 + 48),
                      (const std::vector<unsigned int> *)(v4 + 96),
                      1) != 0;
      std::vector<unsigned int>::~vector((std::vector<unsigned int> *const)(v4 + 96));
      std::allocator<unsigned int>::~allocator(&__a);
      if ( !(_BYTE)v40 )
      {
LABEL_83:
        v3 = 0;
        goto LABEL_84;
      }
      common::milog::MiLogStream::create(
        &v47,
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/player/gm/player_gm_comp.cpp",
        "unlockPoint",
        3026);
      v34 = common::milog::MiLogStream::operator<<<char [18],(char *[18])0>(
              &v47,
              (const char (*)[18])"hidePoint fails, ");
      if ( *(_BYTE *)(((unsigned __int64)context >> 3) + 0x7FFF8000) )
        __asan_report_load8(context);
    }
    common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v34, context->msg);
    common::milog::MiLogStream::~MiLogStream(&v47);
    v3 = -1;
    goto LABEL_84;
  }
  if ( std::vector<std::string>::size(param_vec) <= 2 )
  {
    common::milog::MiLogStream::create(
      &v47,
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/player/gm/player_gm_comp.cpp",
      "unlockPoint",
      2960);
    common::milog::MiLogStream::operator<<<char [17],(char *[17])0>(&v47, (const char (*)[17])"param not enough");
    common::milog::MiLogStream::~MiLogStream(&v47);
    v3 = -1;
    goto LABEL_84;
  }
  v21 = std::vector<std::string>::operator[](param_vec, 0LL);
  if ( common::tools::StringUtils::strToNum<unsigned int>(v21, (unsigned int *)(v4 + 48), 1) )
  {
    common::milog::MiLogStream::create(
      &v47,
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/player/gm/player_gm_comp.cpp",
      "unlockPoint",
      2965);
    v22 = common::milog::MiLogStream::operator<<<char [15],(char *[15])0>(&v47, (const char (*)[15])"invalid param:");
    common::milog::MiLogStream::operator<<<std::string>(v22, param_vec);
    common::milog::MiLogStream::~MiLogStream(&v47);
    v3 = -1;
    goto LABEL_84;
  }
  *(_DWORD *)(v4 + 80) = 0;
  v23 = std::vector<std::string>::operator[](param_vec, 2uLL);
  if ( common::tools::StringUtils::strToNum<unsigned int>(v23, (unsigned int *)(v4 + 80), 1) )
  {
    common::milog::MiLogStream::create(
      &v47,
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/player/gm/player_gm_comp.cpp",
      "unlockPoint",
      2971);
    v24 = common::milog::MiLogStream::operator<<<char [15],(char *[15])0>(&v47, (const char (*)[15])"invalid param:");
    common::milog::MiLogStream::operator<<<std::string>(v24, param_vec);
    common::milog::MiLogStream::~MiLogStream(&v47);
    v3 = -1;
    goto LABEL_84;
  }
  std::allocator<unsigned int>::allocator(&__a);
  std::vector<unsigned int>::vector(
    (std::vector<unsigned int> *const)(v4 + 96),
    1uLL,
    (const std::vector<unsigned int>::value_type *)(v4 + 80),
    &__a);
  std::allocator<unsigned int>::~allocator(&__a);
  if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
    __asan_report_load8(&context->player);
  v25 = Player::getSceneComp(context->player);
  if ( PlayerSceneComp::lockPoint(v25, *(_DWORD *)(v4 + 48), (const std::vector<unsigned int> *)(v4 + 96), 1) )
  {
    common::milog::MiLogStream::create(
      &v47,
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/player/gm/player_gm_comp.cpp",
      "unlockPoint",
      2978);
    v26 = common::milog::MiLogStream::operator<<<char [20],(char *[20])0>(
            &v47,
            (const char (*)[20])"unlockPoint fails, ");
    if ( *(_BYTE *)(((unsigned __int64)context >> 3) + 0x7FFF8000) )
      __asan_report_load8(context);
    common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v26, context->msg);
    common::milog::MiLogStream::~MiLogStream(&v47);
    v3 = -1;
    v27 = 0;
  }
  else
  {
    v27 = 1;
  }
  std::vector<unsigned int>::~vector((std::vector<unsigned int> *const)(v4 + 96));
  if ( v27 == 1 )
    goto LABEL_83;
LABEL_84:
  result = v3;
  if ( v48 == (char *)v4 )
  {
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8008) = 0LL;
    *(_DWORD *)((v4 >> 3) + 0x7FFF8010) = 0;
  }
  else
  {
    *(_QWORD *)v4 = 1172321806LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v4 >> 3) + 0x7FFF8010) = -168430091;
  }
  return result;
};

// Line 3047: range 0000000017D72F5C-0000000017D72FFE
void __cdecl transToPointRegister::transToPointRegister(transToPointRegister *const this)
{
  std::function<int(GmContext&,const std::vector<std::string>&,std::string&)> *v1; // rax
  std::allocator<char> __a; // [rsp+1Fh] [rbp-31h] BYREF
  std::string __k; // [rsp+20h] [rbp-30h] BYREF

  std::allocator<char>::allocator(&__a);
  std::string::basic_string<std::allocator<char>>(&__k, "TRANS", &__a);
  v1 = std::unordered_map<std::string,std::function<int ()(GmContext &,std::vector<std::string> const&,std::string&)>>::operator[](
         &GmUtils::op_func_map[abi:cxx11],
         &__k);
  std::function<int ()(GmContext &,std::vector<std::string> const&,std::string&)>::operator=<int (&)(GmContext &,std::vector<std::string> const&,std::string&)>(
    v1,
    (int (*)(GmContext *, const std::vector<std::string> *, std::string *))transToPoint);
  std::string::~string(&__k);
  std::allocator<char>::~allocator(&__a);
};

// Line 3048: range 0000000017BD6BD3-0000000017BD6EF6
int32_t __cdecl transToPoint(GmContext *context, const std::vector<std::string> *param_vec, std::string *ret_msg)
{
  unsigned __int64 v3; // rbx
  __int64 v4; // rax
  _DWORD *v5; // r12
  common::milog::MiLogStream *v6; // rdx
  int32_t result; // eax
  PlayerSceneComp *SceneComp; // r14
  bool v9; // r13
  common::milog::MiLogStream *v10; // rcx
  common::milog::MiLogStream v11; // [rsp+20h] [rbp-F0h] BYREF
  TransferReason p_reason; // [rsp+40h] [rbp-D0h] BYREF
  char v13[144]; // [rsp+80h] [rbp-90h] BYREF

  v3 = (unsigned __int64)v13;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_1(96LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "2 48 4 13 scene_id:3049 64 4 13 point_id:3050";
  *(_QWORD *)(v3 + 16) = transToPoint;
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = -234556943;
  v5[536862722] = -202116348;
  *(_DWORD *)(v3 + 48) = 0;
  *(_DWORD *)(v3 + 64) = 0;
  if ( common::tools::StringUtils::strVecToNum<0u,unsigned int,unsigned int &>(
         param_vec,
         (unsigned int *)(v3 + 48),
         (unsigned int *)(v3 + 64),
         (unsigned int *)(v3 + 48)) )
  {
    common::milog::MiLogStream::create(
      &v11,
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/player/gm/player_gm_comp.cpp",
      "transToPoint",
      3053);
    v6 = common::milog::MiLogStream::operator<<<char [15],(char *[15])0>(&v11, (const char (*)[15])"invalid param:");
    common::milog::MiLogStream::operator<<<std::string>(v6, param_vec);
    common::milog::MiLogStream::~MiLogStream(&v11);
    result = -1;
  }
  else
  {
    if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
      __asan_report_load8(&context->player);
    SceneComp = Player::getSceneComp(context->player);
    TransferReason::TransferReason(&p_reason, ENTER_REASON_GM);
    v9 = PlayerSceneComp::jumpToScene(SceneComp, *(_DWORD *)(v3 + 48), *(_DWORD *)(v3 + 64), &p_reason) != 0;
    TransferReason::~TransferReason(&p_reason);
    if ( v9 )
    {
      common::milog::MiLogStream::create(
        &v11,
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/player/gm/player_gm_comp.cpp",
        "transToPoint",
        3058);
      v10 = common::milog::MiLogStream::operator<<<char [26],(char *[26])0>(
              &v11,
              (const char (*)[26])"transToScenePoint fails, ");
      if ( *(_BYTE *)(((unsigned __int64)context >> 3) + 0x7FFF8000) )
        __asan_report_load8(context);
      common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v10, context->msg);
      common::milog::MiLogStream::~MiLogStream(&v11);
      result = -1;
    }
    else
    {
      result = 0;
    }
  }
  if ( v13 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8008) = 0;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8008) = -168430091;
  }
  return result;
};

// Line 3065: range 0000000017D73000-0000000017D730A2
void __cdecl jumpToSceneRegister::jumpToSceneRegister(jumpToSceneRegister *const this)
{
  std::function<int(GmContext&,const std::vector<std::string>&,std::string&)> *v1; // rax
  std::allocator<char> __a; // [rsp+1Fh] [rbp-31h] BYREF
  std::string __k; // [rsp+20h] [rbp-30h] BYREF

  std::allocator<char>::allocator(&__a);
  std::string::basic_string<std::allocator<char>>(&__k, "JUMP", &__a);
  v1 = std::unordered_map<std::string,std::function<int ()(GmContext &,std::vector<std::string> const&,std::string&)>>::operator[](
         &GmUtils::op_func_map[abi:cxx11],
         &__k);
  std::function<int ()(GmContext &,std::vector<std::string> const&,std::string&)>::operator=<int (&)(GmContext &,std::vector<std::string> const&,std::string&)>(
    v1,
    (int (*)(GmContext *, const std::vector<std::string> *, std::string *))jumpToScene);
  std::string::~string(&__k);
  std::allocator<char>::~allocator(&__a);
};

// Line 3066: range 0000000017BD6EF7-0000000017BD7302
int32_t __cdecl jumpToScene(GmContext *context, const std::vector<std::string> *param_vec, std::string *ret_msg)
{
  unsigned __int64 v3; // rbx
  __int64 v4; // rax
  _DWORD *v5; // r12
  common::milog::MiLogStream *v6; // rdx
  int32_t result; // eax
  const std::string *v8; // rax
  common::milog::MiLogStream *v10; // rdx
  bool v11; // r13
  common::milog::MiLogStream *v12; // rcx
  PlayerSceneComp *scene_comp; // [rsp+28h] [rbp-E8h]
  common::milog::MiLogStream v14; // [rsp+30h] [rbp-E0h] BYREF
  TransferReason p_reason; // [rsp+50h] [rbp-C0h] BYREF
  char v16[128]; // [rsp+90h] [rbp-80h] BYREF

  v3 = (unsigned __int64)v16;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_1(96LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "2 48 4 13 scene_id:3067 64 4 16 fixed_level:3073";
  *(_QWORD *)(v3 + 16) = jumpToScene;
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = -234556943;
  v5[536862722] = -202116348;
  *(_DWORD *)(v3 + 48) = 0;
  if ( common::tools::StringUtils::strVecToNum<0u,unsigned int>(param_vec, (unsigned int *)(v3 + 48)) )
  {
    common::milog::MiLogStream::create(
      &v14,
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/player/gm/player_gm_comp.cpp",
      "jumpToScene",
      3070);
    v6 = common::milog::MiLogStream::operator<<<char [15],(char *[15])0>(&v14, (const char (*)[15])"invalid param:");
    common::milog::MiLogStream::operator<<<std::string>(v6, param_vec);
    common::milog::MiLogStream::~MiLogStream(&v14);
    result = -1;
  }
  else
  {
    *(_DWORD *)(v3 + 64) = 0;
    if ( std::vector<std::string>::size(param_vec) > 1
      && (v8 = std::vector<std::string>::operator[](param_vec, 1uLL),
          common::tools::StringUtils::strToNum<unsigned int>(v8, (unsigned int *)(v3 + 64), 1)) )
    {
      common::milog::MiLogStream::create(
        &v14,
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/player/gm/player_gm_comp.cpp",
        "jumpToScene",
        3076);
      v10 = common::milog::MiLogStream::operator<<<char [15],(char *[15])0>(&v14, (const char (*)[15])"invalid param:");
      common::milog::MiLogStream::operator<<<std::string>(v10, param_vec);
      common::milog::MiLogStream::~MiLogStream(&v14);
      result = -1;
    }
    else
    {
      if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
        __asan_report_load8(&context->player);
      scene_comp = Player::getSceneComp(context->player);
      TransferReason::TransferReason(&p_reason, ENTER_REASON_GM);
      v11 = PlayerSceneComp::jumpToScene(scene_comp, *(_DWORD *)(v3 + 48), 0, &p_reason) != 0;
      TransferReason::~TransferReason(&p_reason);
      if ( v11 )
      {
        common::milog::MiLogStream::create(
          &v14,
          &common::milog::MiLogDefault::default_log_obj_,
          3u,
          "./src/player/gm/player_gm_comp.cpp",
          "jumpToScene",
          3082);
        v12 = common::milog::MiLogStream::operator<<<char [20],(char *[20])0>(
                &v14,
                (const char (*)[20])"jumpToScene fails, ");
        if ( *(_BYTE *)(((unsigned __int64)context >> 3) + 0x7FFF8000) )
          __asan_report_load8(context);
        common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v12, context->msg);
        common::milog::MiLogStream::~MiLogStream(&v14);
        result = -1;
      }
      else
      {
        result = 0;
      }
    }
  }
  if ( v16 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8008) = 0;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8008) = -168430091;
  }
  return result;
};

// Line 3089: range 0000000017D730A4-0000000017D73146
void __cdecl questVarOpRegister::questVarOpRegister(questVarOpRegister *const this)
{
  std::function<int(GmContext&,const std::vector<std::string>&,std::string&)> *v1; // rax
  std::allocator<char> __a; // [rsp+1Fh] [rbp-31h] BYREF
  std::string __k; // [rsp+20h] [rbp-30h] BYREF

  std::allocator<char>::allocator(&__a);
  std::string::basic_string<std::allocator<char>>(&__k, "QUESTVAR", &__a);
  v1 = std::unordered_map<std::string,std::function<int ()(GmContext &,std::vector<std::string> const&,std::string&)>>::operator[](
         &GmUtils::op_func_map[abi:cxx11],
         &__k);
  std::function<int ()(GmContext &,std::vector<std::string> const&,std::string&)>::operator=<int (&)(GmContext &,std::vector<std::string> const&,std::string&)>(
    v1,
    (int (*)(GmContext *, const std::vector<std::string> *, std::string *))questVarOp);
  std::string::~string(&__k);
  std::allocator<char>::~allocator(&__a);
};

// Line 3090: range 0000000017BD7303-0000000017BD77C6
int32_t __cdecl questVarOp(GmContext *context, const std::vector<std::string> *param_vec, std::string *ret_msg)
{
  unsigned __int64 v3; // r12
  __int64 v4; // rax
  _DWORD *v5; // r13
  int32_t v7; // r14d
  const std::string *v8; // rax
  uint32_t QuestComp; // eax
  const std::string *v10; // rax
  ParentQuest *v11; // rax
  const std::string *v12; // rax
  const std::string *v13; // rax
  PlayerQuestComp *v14; // rax
  ParentQuest *v15; // rax
  int32_t result; // eax
  std::string v18; // [rsp+20h] [rbp-110h] BYREF
  std::string v19; // [rsp+40h] [rbp-F0h] BYREF
  std::string v20; // [rsp+60h] [rbp-D0h] BYREF
  char v21[176]; // [rsp+80h] [rbp-B0h] BYREF

  v3 = (unsigned __int64)v21;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_1(128LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "4 48 4 20 parent_quest_id:3096 64 4 10 index:3116 80 4 10 value:3117 96 16 17 parent_quest:3102";
  *(_QWORD *)(v3 + 16) = questVarOp;
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = -234556943;
  v5[536862722] = -234556924;
  v5[536862723] = -202178560;
  if ( std::vector<std::string>::size(param_vec) != 1 && std::vector<std::string>::size(param_vec) != 3 )
  {
    std::string::operator=(ret_msg, &unk_26355B60);
    v7 = 0;
  }
  else
  {
    *(_DWORD *)(v3 + 48) = 0;
    v8 = std::vector<std::string>::operator[](param_vec, 0LL);
    if ( common::tools::StringUtils::strToNum<unsigned int>(v8, (unsigned int *)(v3 + 48), 1) )
    {
      std::string::operator=(ret_msg, "invalid param");
      v7 = -1;
    }
    else
    {
      if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
        __asan_report_load8(&context->player);
      QuestComp = (unsigned int)Player::getQuestComp(context->player);
      PlayerQuestComp::findParentQuest((const PlayerQuestComp *const)(v3 + 96), QuestComp);
      if ( std::operator==<ParentQuest>((const std::shared_ptr<ParentQuest> *)(v3 + 96), 0LL) )
      {
        v10 = std::vector<std::string>::operator[](param_vec, 0LL);
        std::operator+<char>(&v18, "cannot find parent quest,parent_quest_id:", v10);
        std::string::operator=(ret_msg, &v18);
        std::string::~string(&v18);
        v7 = 0;
      }
      else if ( std::vector<std::string>::size(param_vec) == 1 )
      {
        v11 = std::__shared_ptr_access<ParentQuest,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<ParentQuest,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 96));
        ParentQuest::getQuestVarStr[abi:cxx11](&v19, v11);
        std::string::operator=(ret_msg, &v19);
        std::string::~string(&v19);
        v7 = 0;
      }
      else if ( std::vector<std::string>::size(param_vec) == 3 )
      {
        *(_DWORD *)(v3 + 64) = 0;
        *(_DWORD *)(v3 + 80) = 0;
        v12 = std::vector<std::string>::operator[](param_vec, 1uLL);
        if ( common::tools::StringUtils::strToNum<unsigned int>(v12, (unsigned int *)(v3 + 64), 1)
          || (v13 = std::vector<std::string>::operator[](param_vec, 2uLL),
              common::tools::StringUtils::strToNum<int>(v13, (int *)(v3 + 80), 1)) )
        {
          std::string::operator=(ret_msg, "invalid param");
          v7 = -1;
        }
        else
        {
          if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
            __asan_report_load8(&context->player);
          v14 = Player::getQuestComp(context->player);
          if ( PlayerQuestComp::updateQuestVarByGm(
                 v14,
                 *(_DWORD *)(v3 + 48),
                 *(_DWORD *)(v3 + 64),
                 *(_DWORD *)(v3 + 80)) )
          {
            std::string::operator=(ret_msg, "update quest var failed");
            v7 = -1;
          }
          else
          {
            v15 = std::__shared_ptr_access<ParentQuest,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<ParentQuest,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 96));
            ParentQuest::getQuestVarStr[abi:cxx11](&v20, v15);
            std::string::operator=(ret_msg, &v20);
            std::string::~string(&v20);
            v7 = 0;
          }
        }
      }
      else
      {
        v7 = -1;
      }
      std::shared_ptr<ParentQuest>::~shared_ptr((std::shared_ptr<ParentQuest> *const)(v3 + 96));
    }
  }
  result = v7;
  if ( v21 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 3140: range 0000000017D73148-0000000017D731EA
void __cdecl procDungeonRegister::procDungeonRegister(procDungeonRegister *const this)
{
  std::function<int(GmContext&,const std::vector<std::string>&,std::string&)> *v1; // rax
  std::allocator<char> __a; // [rsp+1Fh] [rbp-31h] BYREF
  std::string __k; // [rsp+20h] [rbp-30h] BYREF

  std::allocator<char>::allocator(&__a);
  std::string::basic_string<std::allocator<char>>(&__k, "DUNGEON", &__a);
  v1 = std::unordered_map<std::string,std::function<int ()(GmContext &,std::vector<std::string> const&,std::string&)>>::operator[](
         &GmUtils::op_func_map[abi:cxx11],
         &__k);
  std::function<int ()(GmContext &,std::vector<std::string> const&,std::string&)>::operator=<int (&)(GmContext &,std::vector<std::string> const&,std::string&)>(
    v1,
    (int (*)(GmContext *, const std::vector<std::string> *, std::string *))procDungeon);
  std::string::~string(&__k);
  std::allocator<char>::~allocator(&__a);
};

// Line 3141: range 0000000017BD77C7-0000000017BD8D5A
int32_t __cdecl procDungeon(GmContext *context, const std::vector<std::string> *param_vec, std::string *ret_msg)
{
  int32_t v3; // r14d
  unsigned __int64 v4; // r13
  __int64 v5; // rax
  _DWORD *v6; // r12
  common::milog::MiLogStream *v7; // rax
  const std::string *v8; // rax
  common::milog::MiLogStream *v9; // rax
  const std::string *v10; // rax
  common::milog::MiLogStream *v11; // rax
  DungeonScene *v12; // rax
  common::milog::MiLogStream *v13; // r14
  std::__shared_ptr_access<DungeonScene,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v14; // rax
  const std::string *v15; // rax
  common::milog::MiLogStream *v16; // rax
  const std::string *v17; // rax
  GameserverService *v18; // rax
  DungeonMgr *p_dungeon_mgr; // rbx
  uint32_t Uid; // eax
  const std::string *v21; // rax
  common::milog::MiLogStream *v22; // rax
  GameserverService *v23; // rax
  DungeonMgr *v24; // r15
  uint32_t v25; // r14d
  uint32_t v26; // eax
  const std::string *v27; // rax
  PlayerDungeonComp *DungeonComp; // rax
  common::milog::MiLogStream *v29; // rcx
  const std::string *v30; // rax
  common::milog::MiLogStream *v32; // rax
  const std::string *v33; // rax
  common::milog::MiLogStream *v34; // rax
  const std::string *v35; // rax
  common::milog::MiLogStream *v36; // rax
  const std::string *v37; // rax
  common::milog::MiLogStream *v38; // rax
  const std::string *v39; // rax
  const std::string *v41; // rax
  common::milog::MiLogStream *v42; // rax
  int v43; // r15d
  uint32_t v44; // r15d
  uint32_t v45; // eax
  const std::string *v46; // rax
  int v48; // r15d
  const std::string *v49; // rax
  common::milog::MiLogStream *v50; // rax
  Scene *v51; // rax
  const std::string *v52; // rax
  const std::string *v53; // rax
  const std::string *v54; // rax
  const std::string *v55; // rax
  const std::string *v56; // rax
  const std::string *v57; // rax
  const std::string *v58; // rax
  PlayerDungeonComp *v59; // r14
  common::milog::MiLogStream *v60; // rcx
  int32_t result; // eax
  std::__shared_ptr_access<DungeonScene,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v62; // [rsp+10h] [rbp-1B0h]
  int ret_0; // [rsp+30h] [rbp-190h]
  int32_t ret; // [rsp+34h] [rbp-18Ch]
  PlayerDungeonComp *dungeon_comp; // [rsp+38h] [rbp-188h]
  std::pair<int,std::shared_ptr<DungeonScene> > v67; // [rsp+40h] [rbp-180h] BYREF
  std::string __rhs; // [rsp+60h] [rbp-160h] BYREF
  std::string __lhs; // [rsp+80h] [rbp-140h] BYREF
  common::milog::MiLogStream v70; // [rsp+A0h] [rbp-120h] BYREF
  std::map<unsigned int,unsigned int> level_config_id_map; // [rsp+C0h] [rbp-100h] BYREF
  char v72[208]; // [rsp+F0h] [rbp-D0h] BYREF

  v4 = (unsigned __int64)v72;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v5 = __asan_stack_malloc_2(160LL);
    if ( v5 )
      v4 = v5;
  }
  *(_QWORD *)v4 = 1102416563LL;
  *(_QWORD *)(v4 + 8) = "4 32 4 15 dungeon_id:3148 48 4 15 runtime_id:3273 64 16 22 dungeon_scene_ptr:3267 96 28 8 opt:3287";
  *(_QWORD *)(v4 + 16) = procDungeon;
  v6 = (_DWORD *)(v4 >> 3);
  v6[536862720] = -235802127;
  v6[536862721] = -234556924;
  v6[536862722] = -219021312;
  v6[536862723] = 0x4000000;
  v6[536862724] = -202116109;
  if ( std::vector<std::string>::empty(param_vec) )
  {
    common::milog::MiLogStream::create(
      &v70,
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/player/gm/player_gm_comp.cpp",
      "procDungeon",
      3144);
    v7 = common::milog::MiLogStream::operator<<<char [15],(char *[15])0>(&v70, (const char (*)[15])"invalid param:");
    common::milog::MiLogStream::operator<<<std::string>(v7, param_vec);
    common::milog::MiLogStream::~MiLogStream(&v70);
    v3 = -1;
    goto LABEL_95;
  }
  if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
    __asan_report_load8(&context->player);
  dungeon_comp = Player::getDungeonComp(context->player);
  *(_DWORD *)(v4 + 32) = 0;
  v8 = std::vector<std::string>::operator[](param_vec, 0LL);
  if ( std::operator==<char>(v8, "FORCE_SETTLE") )
  {
    if ( std::vector<std::string>::size(param_vec) > 1 )
    {
      *(_DWORD *)(v4 + 48) = 0;
      v10 = std::vector<std::string>::operator[](param_vec, 1uLL);
      if ( common::tools::StringUtils::strToNum<unsigned int>(v10, (unsigned int *)(v4 + 48), 1) )
      {
        common::milog::MiLogStream::create(
          &v70,
          &common::milog::MiLogDefault::default_log_obj_,
          3u,
          "./src/player/gm/player_gm_comp.cpp",
          "procDungeon",
          3159);
        v11 = common::milog::MiLogStream::operator<<<char [17],(char *[17])0>(
                &v70,
                (const char (*)[17])"invalid param 1:");
        common::milog::MiLogStream::operator<<<std::string>(v11, param_vec);
        common::milog::MiLogStream::~MiLogStream(&v70);
        std::string::operator=(ret_msg, "invalid param 1");
        v3 = -1;
      }
      else
      {
        if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
          __asan_report_load8(&context->player);
        Player::getDungeonComp(context->player);
        PlayerDungeonComp::getCurDungeon((PlayerDungeonComp *const)(v4 + 64));
        if ( std::operator==<DungeonScene>(0LL, (const std::shared_ptr<DungeonScene> *)(v4 + 64)) )
        {
          std::string::operator=(ret_msg, &off_26355E60);
          v3 = -1;
        }
        else
        {
          v12 = std::__shared_ptr_access<DungeonScene,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<DungeonScene,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 64));
          if ( DungeonScene::settleByGm(v12, *(_DWORD *)(v4 + 48)) )
          {
            std::string::operator=(ret_msg, "settle failed.");
            v3 = -1;
          }
          else
          {
            common::milog::MiLogStream::create(
              &v70,
              &common::milog::MiLogDefault::default_log_obj_,
              1u,
              "./src/player/gm/player_gm_comp.cpp",
              "procDungeon",
              3174);
            v13 = common::milog::MiLogStream::operator<<<char [9],(char *[9])0>(&v70, (const char (*)[9])" settle ");
            v14 = std::__shared_ptr_access<DungeonScene,(__gnu_cxx::_Lock_policy)2,false,false>::operator*((const std::__shared_ptr_access<DungeonScene,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 64));
            common::milog::MiLogStream::operator<<<DungeonScene,(DungeonScene*)0>(v13, v14);
            common::milog::MiLogStream::~MiLogStream(&v70);
            v3 = 0;
          }
        }
        std::shared_ptr<DungeonScene>::~shared_ptr((std::shared_ptr<DungeonScene> *const)(v4 + 64));
      }
    }
    else
    {
      common::milog::MiLogStream::create(
        &v70,
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/player/gm/player_gm_comp.cpp",
        "procDungeon",
        3153);
      v9 = common::milog::MiLogStream::operator<<<char [15],(char *[15])0>(&v70, (const char (*)[15])"invalid param:");
      common::milog::MiLogStream::operator<<<std::string>(v9, param_vec);
      common::milog::MiLogStream::~MiLogStream(&v70);
      v3 = -1;
    }
    goto LABEL_95;
  }
  v15 = std::vector<std::string>::operator[](param_vec, 0LL);
  if ( std::operator==<char>(v15, "CLEAR") )
  {
    if ( std::vector<std::string>::size(param_vec) <= 1 )
    {
      common::milog::MiLogStream::create(
        &v70,
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/player/gm/player_gm_comp.cpp",
        "procDungeon",
        3181);
      v16 = common::milog::MiLogStream::operator<<<char [15],(char *[15])0>(&v70, (const char (*)[15])"invalid param:");
      common::milog::MiLogStream::operator<<<std::string>(v16, param_vec);
      common::milog::MiLogStream::~MiLogStream(&v70);
      v3 = -1;
      goto LABEL_95;
    }
    v17 = std::vector<std::string>::operator[](param_vec, 1uLL);
    if ( std::operator==<char>(v17, _f.gap0) )
    {
      v18 = ServiceBox::findService<GameserverService>();
      p_dungeon_mgr = &GameserverService::getGameThreadLocal(v18)->dungeon_mgr;
      if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
        __asan_report_load8(&context->player);
      Uid = Player::getUid(context->player);
      DungeonMgr::delPlayerFromAllDungeon(p_dungeon_mgr, Uid, 1);
      PlayerDungeonComp::clearAllDungeonRecord(dungeon_comp);
      std::string::operator=(ret_msg, "clear all dungeon record succeed");
    }
    else
    {
      v21 = std::vector<std::string>::operator[](param_vec, 1uLL);
      if ( common::tools::StringUtils::strToNum<unsigned int>(v21, (unsigned int *)(v4 + 32), 1) )
      {
        common::milog::MiLogStream::create(
          &v70,
          &common::milog::MiLogDefault::default_log_obj_,
          3u,
          "./src/player/gm/player_gm_comp.cpp",
          "procDungeon",
          3194);
        v22 = common::milog::MiLogStream::operator<<<char [15],(char *[15])0>(
                &v70,
                (const char (*)[15])"invalid param:");
        common::milog::MiLogStream::operator<<<std::string>(v22, param_vec);
        common::milog::MiLogStream::~MiLogStream(&v70);
        v3 = -1;
        goto LABEL_95;
      }
      v23 = ServiceBox::findService<GameserverService>();
      v24 = &GameserverService::getGameThreadLocal(v23)->dungeon_mgr;
      v25 = *(_DWORD *)(v4 + 32);
      if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
        __asan_report_load8(&context->player);
      v26 = Player::getUid(context->player);
      DungeonMgr::delPlayerFromDungeon(v24, v26, v25, 1);
      PlayerDungeonComp::clearDungeonRecord(dungeon_comp, *(_DWORD *)(v4 + 32));
      common::tools::StringUtils::numToStr<unsigned int>(&__rhs, *(_DWORD *)(v4 + 32));
      std::operator+<char>(&__lhs, "clear dungeon ", &__rhs);
      std::operator+<char>((std::string *)&v70, &__lhs, " record succeed");
      std::string::operator=(ret_msg, &v70);
      std::string::~string(&v70);
      std::string::~string(&__lhs);
      std::string::~string(&__rhs);
    }
    goto LABEL_94;
  }
  v27 = std::vector<std::string>::operator[](param_vec, 0LL);
  if ( std::operator==<char>(v27, "QUIT") )
  {
    if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
      __asan_report_load8(&context->player);
    DungeonComp = Player::getDungeonComp(context->player);
    ret = PlayerDungeonComp::quitCurDungeon(DungeonComp, DUNGEON_QUIT_REASON_GM);
    if ( ret )
    {
      common::milog::MiLogStream::create(
        &v70,
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/player/gm/player_gm_comp.cpp",
        "procDungeon",
        3207);
      v29 = common::milog::MiLogStream::operator<<<char [20],(char *[20])0>(
              &v70,
              (const char (*)[20])"jumpToScene fails, ");
      if ( *(_BYTE *)(((unsigned __int64)context >> 3) + 0x7FFF8000) )
        __asan_report_load8(context);
      common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v29, context->msg);
      common::milog::MiLogStream::~MiLogStream(&v70);
      v3 = ret;
      goto LABEL_95;
    }
LABEL_94:
    v3 = 0;
    goto LABEL_95;
  }
  v30 = std::vector<std::string>::operator[](param_vec, 0LL);
  if ( std::operator==<char>(v30, "COUNT") )
  {
    if ( std::vector<std::string>::size(param_vec) <= 1 || std::vector<std::string>::size(param_vec) > 3 )
    {
      common::milog::MiLogStream::create(
        &v70,
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/player/gm/player_gm_comp.cpp",
        "procDungeon",
        3215);
      v32 = common::milog::MiLogStream::operator<<<char [15],(char *[15])0>(&v70, (const char (*)[15])"invalid param:");
      common::milog::MiLogStream::operator<<<std::string>(v32, param_vec);
      common::milog::MiLogStream::~MiLogStream(&v70);
      v3 = -1;
      goto LABEL_95;
    }
    *(_DWORD *)(v4 + 48) = 0;
    if ( std::vector<std::string>::size(param_vec) == 2 )
    {
      v33 = std::vector<std::string>::operator[](param_vec, 1uLL);
      if ( common::tools::StringUtils::strToNum<unsigned int>(v33, (unsigned int *)(v4 + 48), 1) )
      {
        common::milog::MiLogStream::create(
          &v70,
          &common::milog::MiLogDefault::default_log_obj_,
          3u,
          "./src/player/gm/player_gm_comp.cpp",
          "procDungeon",
          3223);
        v34 = common::milog::MiLogStream::operator<<<char [15],(char *[15])0>(
                &v70,
                (const char (*)[15])"invalid param:");
        common::milog::MiLogStream::operator<<<std::string>(v34, param_vec);
        common::milog::MiLogStream::~MiLogStream(&v70);
        v3 = -1;
        goto LABEL_95;
      }
    }
    else if ( std::vector<std::string>::size(param_vec) == 3 )
    {
      v35 = std::vector<std::string>::operator[](param_vec, 1uLL);
      if ( common::tools::StringUtils::strToNum<unsigned int>(v35, (unsigned int *)(v4 + 32), 1) )
      {
        common::milog::MiLogStream::create(
          &v70,
          &common::milog::MiLogDefault::default_log_obj_,
          3u,
          "./src/player/gm/player_gm_comp.cpp",
          "procDungeon",
          3231);
        v36 = common::milog::MiLogStream::operator<<<char [15],(char *[15])0>(
                &v70,
                (const char (*)[15])"invalid param:");
        common::milog::MiLogStream::operator<<<std::string>(v36, param_vec);
        common::milog::MiLogStream::~MiLogStream(&v70);
        v3 = -1;
        goto LABEL_95;
      }
      v37 = std::vector<std::string>::operator[](param_vec, 2uLL);
      if ( common::tools::StringUtils::strToNum<unsigned int>(v37, (unsigned int *)(v4 + 48), 1) )
      {
        common::milog::MiLogStream::create(
          &v70,
          &common::milog::MiLogDefault::default_log_obj_,
          3u,
          "./src/player/gm/player_gm_comp.cpp",
          "procDungeon",
          3236);
        v38 = common::milog::MiLogStream::operator<<<char [15],(char *[15])0>(
                &v70,
                (const char (*)[15])"invalid param:");
        common::milog::MiLogStream::operator<<<std::string>(v38, param_vec);
        common::milog::MiLogStream::~MiLogStream(&v70);
        v3 = -1;
        goto LABEL_95;
      }
    }
    if ( *(_DWORD *)(v4 + 32) )
      PlayerDungeonComp::setDungeonLeftTimes(dungeon_comp, *(_DWORD *)(v4 + 32), *(_DWORD *)(v4 + 48));
    else
      PlayerDungeonComp::setAllDungeonLeftTimes(dungeon_comp, *(_DWORD *)(v4 + 48));
    goto LABEL_94;
  }
  v39 = std::vector<std::string>::operator[](param_vec, 0LL);
  if ( std::operator==<char>(v39, "REVIVE_COUNT") && std::vector<std::string>::size(param_vec) > 1 )
  {
    PlayerDungeonComp::getCurDungeon((PlayerDungeonComp *const)(v4 + 64));
    if ( std::__shared_ptr<DungeonScene,(__gnu_cxx::_Lock_policy)2>::operator bool((const std::__shared_ptr<DungeonScene,(__gnu_cxx::_Lock_policy)2> *const)(v4 + 64)) )
    {
      *(_DWORD *)(v4 + 48) = 0;
      v41 = std::vector<std::string>::operator[](param_vec, 1uLL);
      if ( common::tools::StringUtils::strToNum<unsigned int>(v41, (unsigned int *)(v4 + 48), 1) )
      {
        common::milog::MiLogStream::create(
          &v70,
          &common::milog::MiLogDefault::default_log_obj_,
          3u,
          "./src/player/gm/player_gm_comp.cpp",
          "procDungeon",
          3259);
        v42 = common::milog::MiLogStream::operator<<<char [15],(char *[15])0>(
                &v70,
                (const char (*)[15])"invalid param:");
        common::milog::MiLogStream::operator<<<std::string>(v42, param_vec);
        common::milog::MiLogStream::~MiLogStream(&v70);
        v3 = -1;
        v43 = 0;
        goto LABEL_70;
      }
      v62 = std::__shared_ptr_access<DungeonScene,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<DungeonScene,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 64));
      v44 = *(_DWORD *)(v4 + 48);
      if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
        __asan_report_load8(&context->player);
      v45 = Player::getUid(context->player);
      DungeonScene::forceSetPlayerReviveCount(v62, v45, v44);
    }
    v43 = 1;
LABEL_70:
    std::shared_ptr<DungeonScene>::~shared_ptr((std::shared_ptr<DungeonScene> *const)(v4 + 64));
    if ( v43 != 1 )
      goto LABEL_95;
    goto LABEL_94;
  }
  v46 = std::vector<std::string>::operator[](param_vec, 0LL);
  if ( std::operator==<char>(v46, "RUNTIMEID") && std::vector<std::string>::size(param_vec) > 1 )
  {
    PlayerDungeonComp::getCurDungeon((PlayerDungeonComp *const)(v4 + 64));
    if ( std::operator==<DungeonScene>(0LL, (const std::shared_ptr<DungeonScene> *)(v4 + 64)) )
    {
      common::milog::MiLogStream::create(
        &v70,
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/player/gm/player_gm_comp.cpp",
        "procDungeon",
        3270);
      common::milog::MiLogStream::operator<<<char [21],(char *[21])0>(&v70, (const char (*)[21])"getCurDungeon failed");
      common::milog::MiLogStream::~MiLogStream(&v70);
      v3 = -1;
      v48 = 0;
    }
    else
    {
      *(_DWORD *)(v4 + 48) = 0;
      v49 = std::vector<std::string>::operator[](param_vec, 1uLL);
      if ( common::tools::StringUtils::strToNum<unsigned int>(v49, (unsigned int *)(v4 + 48), 1) )
      {
        common::milog::MiLogStream::create(
          &v70,
          &common::milog::MiLogDefault::default_log_obj_,
          3u,
          "./src/player/gm/player_gm_comp.cpp",
          "procDungeon",
          3276);
        v50 = common::milog::MiLogStream::operator<<<char [15],(char *[15])0>(
                &v70,
                (const char (*)[15])"invalid param:");
        common::milog::MiLogStream::operator<<<std::string>(v50, param_vec);
        common::milog::MiLogStream::~MiLogStream(&v70);
        v3 = -1;
        v48 = 0;
      }
      else
      {
        v51 = (Scene *)std::__shared_ptr_access<DungeonScene,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<DungeonScene,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 64));
        Scene::setNextEntityIndexByGm(v51, *(_DWORD *)(v4 + 48));
        v48 = 1;
      }
    }
    std::shared_ptr<DungeonScene>::~shared_ptr((std::shared_ptr<DungeonScene> *const)(v4 + 64));
    if ( v48 != 1 )
      goto LABEL_95;
    goto LABEL_94;
  }
  if ( std::vector<std::string>::size(param_vec) )
  {
    v52 = std::vector<std::string>::operator[](param_vec, 0LL);
    common::tools::StringUtils::strToNum<unsigned int>(v52, (unsigned int *)(v4 + 32), 1);
  }
  EnterDungeonOption::EnterDungeonOption((EnterDungeonOption *const)(v4 + 96));
  if ( std::vector<std::string>::size(param_vec) > 6 )
  {
    *(_BYTE *)(v4 + 96) = 0;
    v53 = std::vector<std::string>::operator[](param_vec, 1uLL);
    common::tools::StringUtils::strToNum<float>(v53, (float *)(v4 + 100), 1);
    v54 = std::vector<std::string>::operator[](param_vec, 2uLL);
    common::tools::StringUtils::strToNum<float>(v54, (float *)(v4 + 104), 1);
    v55 = std::vector<std::string>::operator[](param_vec, 3uLL);
    common::tools::StringUtils::strToNum<float>(v55, (float *)(v4 + 108), 1);
    v56 = std::vector<std::string>::operator[](param_vec, 4uLL);
    common::tools::StringUtils::strToNum<float>(v56, (float *)(v4 + 112), 1);
    v57 = std::vector<std::string>::operator[](param_vec, 5uLL);
    common::tools::StringUtils::strToNum<float>(v57, (float *)(v4 + 116), 1);
    v58 = std::vector<std::string>::operator[](param_vec, 6uLL);
    common::tools::StringUtils::strToNum<float>(v58, (float *)(v4 + 120), 1);
  }
  if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
    __asan_report_load8(&context->player);
  v59 = Player::getDungeonComp(context->player);
  memset(&level_config_id_map, 0, sizeof(level_config_id_map));
  std::map<unsigned int,unsigned int>::map(&level_config_id_map);
  PlayerDungeonComp::enterDungeon(
    &v67,
    v59,
    *(_DWORD *)(v4 + 32),
    0,
    0,
    &level_config_id_map,
    *(EnterDungeonOption *)(v4 + 96));
  ret_0 = v67.first;
  std::pair<int,std::shared_ptr<DungeonScene>>::~pair(&v67);
  std::map<unsigned int,unsigned int>::~map(&level_config_id_map);
  if ( !ret_0 )
    goto LABEL_94;
  common::milog::MiLogStream::create(
    &v70,
    &common::milog::MiLogDefault::default_log_obj_,
    3u,
    "./src/player/gm/player_gm_comp.cpp",
    "procDungeon",
    3301);
  v60 = common::milog::MiLogStream::operator<<<char [21],(char *[21])0>(
          &v70,
          (const char (*)[21])"enterDungeon fails, ");
  if ( *(_BYTE *)(((unsigned __int64)context >> 3) + 0x7FFF8000) )
    __asan_report_load8(context);
  common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v60, context->msg);
  common::milog::MiLogStream::~MiLogStream(&v70);
  v3 = ret_0;
LABEL_95:
  result = v3;
  if ( v72 == (char *)v4 )
  {
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8008) = 0LL;
    *(_DWORD *)((v4 >> 3) + 0x7FFF8010) = 0;
  }
  else
  {
    *(_QWORD *)v4 = 1172321806LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v4 >> 3) + 0x7FFF8010) = -168430091;
  }
  return result;
};

// Line 3308: range 0000000017D731EC-0000000017D7328E
void __cdecl transToPosRegister::transToPosRegister(transToPosRegister *const this)
{
  std::function<int(GmContext&,const std::vector<std::string>&,std::string&)> *v1; // rax
  std::allocator<char> __a; // [rsp+1Fh] [rbp-31h] BYREF
  std::string __k; // [rsp+20h] [rbp-30h] BYREF

  std::allocator<char>::allocator(&__a);
  std::string::basic_string<std::allocator<char>>(&__k, "GOTO", &__a);
  v1 = std::unordered_map<std::string,std::function<int ()(GmContext &,std::vector<std::string> const&,std::string&)>>::operator[](
         &GmUtils::op_func_map[abi:cxx11],
         &__k);
  std::function<int ()(GmContext &,std::vector<std::string> const&,std::string&)>::operator=<int (&)(GmContext &,std::vector<std::string> const&,std::string&)>(
    v1,
    (int (*)(GmContext *, const std::vector<std::string> *, std::string *))transToPos);
  std::string::~string(&__k);
  std::allocator<char>::~allocator(&__a);
};

// Line 3309: range 0000000017BD8D5B-0000000017BD90DC
int32_t __cdecl transToPos(GmContext *context, const std::vector<std::string> *param_vec, std::string *ret_msg)
{
  unsigned __int64 v3; // rbx
  __int64 v4; // rax
  unsigned __int64 v5; // r13
  float *v6; // r8
  float *v7; // r9
  common::milog::MiLogStream *v8; // rdx
  int32_t result; // eax
  PlayerSceneComp *SceneComp; // r14
  const Vector3 *Rotation; // rcx
  bool v12; // r12
  common::milog::MiLogStream *v13; // rcx
  common::milog::MiLogStream v14; // [rsp+20h] [rbp-D0h] BYREF
  TransferReason p_reason; // [rsp+40h] [rbp-B0h] BYREF
  char v16[112]; // [rsp+80h] [rbp-70h] BYREF

  v3 = (unsigned __int64)v16;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_0(64LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "1 32 12 8 pos:3310";
  *(_QWORD *)(v3 + 16) = transToPos;
  v5 = v3 >> 3;
  *(_DWORD *)(v5 + 2147450880) = -235802127;
  *(_DWORD *)(v5 + 2147450884) = -202177536;
  Vector3::Vector3((Vector3 *const)(v3 + 32), 0.0, 0.0, 0.0);
  if ( common::tools::StringUtils::strVecToNum<0u,float,float &,float &>(
         param_vec,
         (float *)(v3 + 32),
         (float *)(v3 + 36),
         (float *)(v3 + 40),
         v6,
         v7) )
  {
    common::milog::MiLogStream::create(
      &v14,
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/player/gm/player_gm_comp.cpp",
      "transToPos",
      3313);
    v8 = common::milog::MiLogStream::operator<<<char [15],(char *[15])0>(&v14, (const char (*)[15])"invalid param:");
    common::milog::MiLogStream::operator<<<std::string>(v8, param_vec);
    common::milog::MiLogStream::~MiLogStream(&v14);
    result = -1;
  }
  else
  {
    if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
      __asan_report_load8(&context->player);
    SceneComp = Player::getSceneComp(context->player);
    TransferReason::TransferReason(&p_reason, ENTER_REASON_GM);
    if ( *(_BYTE *)(((unsigned __int64)&context->avatar >> 3) + 0x7FFF8000) )
      __asan_report_load8(&context->avatar);
    Rotation = Entity::getRotation((const Entity *const)context->avatar);
    if ( *(_BYTE *)(((unsigned __int64)&context->scene >> 3) + 0x7FFF8000) )
      __asan_report_load8(&context->scene);
    v12 = PlayerSceneComp::jumpToScene(SceneComp, context->scene, (const Vector3 *)(v3 + 32), Rotation, 0, &p_reason) != 0;
    TransferReason::~TransferReason(&p_reason);
    if ( v12 )
    {
      common::milog::MiLogStream::create(
        &v14,
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/player/gm/player_gm_comp.cpp",
        "transToPos",
        3318);
      v13 = common::milog::MiLogStream::operator<<<char [20],(char *[20])0>(
              &v14,
              (const char (*)[20])"jumpToScene fails, ");
      if ( *(_BYTE *)(((unsigned __int64)context >> 3) + 0x7FFF8000) )
        __asan_report_load8(context);
      common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v13, context->msg);
      common::milog::MiLogStream::~MiLogStream(&v14);
      result = -1;
    }
    else
    {
      result = 0;
    }
  }
  if ( v16 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 3324: range 0000000017D73290-0000000017D73332
void __cdecl enterOtherWorldRegister::enterOtherWorldRegister(enterOtherWorldRegister *const this)
{
  std::function<int(GmContext&,const std::vector<std::string>&,std::string&)> *v1; // rax
  std::allocator<char> __a; // [rsp+1Fh] [rbp-31h] BYREF
  std::string __k; // [rsp+20h] [rbp-30h] BYREF

  std::allocator<char>::allocator(&__a);
  std::string::basic_string<std::allocator<char>>(&__k, "ENTER", &__a);
  v1 = std::unordered_map<std::string,std::function<int ()(GmContext &,std::vector<std::string> const&,std::string&)>>::operator[](
         &GmUtils::op_func_map[abi:cxx11],
         &__k);
  std::function<int ()(GmContext &,std::vector<std::string> const&,std::string&)>::operator=<int (&)(GmContext &,std::vector<std::string> const&,std::string&)>(
    v1,
    (int (*)(GmContext *, const std::vector<std::string> *, std::string *))enterOtherWorld);
  std::string::~string(&__k);
  std::allocator<char>::~allocator(&__a);
};

// Line 3325: range 0000000017BD90DD-0000000017BD94D5
int32_t __cdecl enterOtherWorld(GmContext *context, const std::vector<std::string> *param_vec, std::string *ret_msg)
{
  unsigned __int64 v3; // r12
  __int64 v4; // rax
  _DWORD *v5; // r13
  common::milog::MiLogStream *v6; // rdx
  int32_t v7; // r14d
  GameserverService *v8; // rax
  unsigned int GameThreadLocal; // eax
  PlayerSceneComp *SceneComp; // rax
  common::milog::MiLogStream *v11; // rax
  common::milog::MiLogStream *v12; // rax
  common::milog::MiLogStream *v13; // r14
  int32_t result; // eax
  unsigned int val; // [rsp+2Ch] [rbp-D4h] BYREF
  std::string __rhs; // [rsp+30h] [rbp-D0h] BYREF
  common::milog::MiLogStream v18; // [rsp+50h] [rbp-B0h] BYREF
  char v19[144]; // [rsp+70h] [rbp-90h] BYREF

  v3 = (unsigned __int64)v19;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_1(96LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "2 48 4 8 uid:3326 64 16 15 player_ptr:3332";
  *(_QWORD *)(v3 + 16) = enterOtherWorld;
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = -234556943;
  v5[536862722] = -202178560;
  *(_DWORD *)(v3 + 48) = 0;
  if ( common::tools::StringUtils::strVecToNum<0u,unsigned int>(param_vec, (unsigned int *)(v3 + 48)) )
  {
    common::milog::MiLogStream::create(
      &v18,
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/player/gm/player_gm_comp.cpp",
      "enterOtherWorld",
      3329);
    v6 = common::milog::MiLogStream::operator<<<char [15],(char *[15])0>(&v18, (const char (*)[15])"invalid param:");
    common::milog::MiLogStream::operator<<<std::string>(v6, param_vec);
    common::milog::MiLogStream::~MiLogStream(&v18);
    v7 = -1;
  }
  else
  {
    v8 = ServiceBox::findService<GameserverService>();
    GameThreadLocal = (unsigned int)GameserverService::getGameThreadLocal(v8);
    PlayerMgr::findOnlinePlayer((PlayerMgr *const)(v3 + 64), GameThreadLocal + 16);
    if ( std::operator==<Player>((const std::shared_ptr<Player> *)(v3 + 64), 0LL) )
    {
      common::tools::StringUtils::numToStr<unsigned int>(&__rhs, *(_DWORD *)(v3 + 48));
      std::operator+<char>((std::string *)&v18, off_263562E0, &__rhs);
      std::string::operator+=(ret_msg, &v18);
      std::string::~string(&v18);
      std::string::~string(&__rhs);
      v7 = -1;
    }
    else
    {
      if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
        __asan_report_load8(&context->player);
      SceneComp = Player::getSceneComp(context->player);
      if ( PlayerSceneComp::joinPlayerScene(SceneComp, *(_DWORD *)(v3 + 48)) )
      {
        common::milog::MiLogStream::create(
          &v18,
          &common::milog::MiLogDefault::default_log_obj_,
          3u,
          "./src/player/gm/player_gm_comp.cpp",
          "enterOtherWorld",
          3340);
        v11 = common::milog::MiLogStream::operator<<<char [25],(char *[25])0>(
                &v18,
                (const char (*)[25])"joinPlayerScene target: ");
        v12 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                v11,
                (const unsigned int *)(v3 + 48));
        v13 = common::milog::MiLogStream::operator<<<char [14],(char *[14])0>(v12, (const char (*)[14])" fails, uid: ");
        if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
          __asan_report_load8(&context->player);
        val = Player::getUid(context->player);
        common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v13, &val);
        common::milog::MiLogStream::~MiLogStream(&v18);
        v7 = -1;
      }
      else
      {
        v7 = 0;
      }
    }
    std::shared_ptr<Player>::~shared_ptr((std::shared_ptr<Player> *const)(v3 + 64));
  }
  result = v7;
  if ( v19 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8008) = 0;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8008) = -168430091;
  }
  return result;
};

// Line 3346: range 0000000017D73334-0000000017D733D6
void __cdecl unlockAreaRegister::unlockAreaRegister(unlockAreaRegister *const this)
{
  std::function<int(GmContext&,const std::vector<std::string>&,std::string&)> *v1; // rax
  std::allocator<char> __a; // [rsp+1Fh] [rbp-31h] BYREF
  std::string __k; // [rsp+20h] [rbp-30h] BYREF

  std::allocator<char>::allocator(&__a);
  std::string::basic_string<std::allocator<char>>(&__k, "AREA", &__a);
  v1 = std::unordered_map<std::string,std::function<int ()(GmContext &,std::vector<std::string> const&,std::string&)>>::operator[](
         &GmUtils::op_func_map[abi:cxx11],
         &__k);
  std::function<int ()(GmContext &,std::vector<std::string> const&,std::string&)>::operator=<int (&)(GmContext &,std::vector<std::string> const&,std::string&)>(
    v1,
    (int (*)(GmContext *, const std::vector<std::string> *, std::string *))unlockArea);
  std::string::~string(&__k);
  std::allocator<char>::~allocator(&__a);
};

// Line 3347: range 0000000017BD94D6-0000000017BDA125
int32_t __cdecl unlockArea(GmContext *context, const std::vector<std::string> *param_vec, std::string *ret_msg)
{
  unsigned __int64 v3; // r13
  __int64 v4; // rax
  _DWORD *v5; // r12
  int32_t result; // eax
  const std::string *v7; // rax
  const std::string *v8; // rax
  common::milog::MiLogStream *v9; // rdx
  PlayerSceneComp *SceneComp; // rax
  common::milog::MiLogStream *v11; // rcx
  const std::string *v12; // rax
  common::milog::MiLogStream *v13; // rdx
  PlayerSceneComp *v14; // rax
  common::milog::MiLogStream *v15; // rax
  common::milog::MiLogStream *v16; // rax
  common::milog::MiLogStream *v17; // rax
  common::milog::MiLogStream *v18; // rax
  const std::string *v19; // rax
  common::milog::MiLogStream *v20; // rdx
  PlayerSceneComp *v21; // rax
  const std::string *v22; // rax
  Scene *v23; // rax
  std::unordered_set<unsigned int> *AllUnlockArea; // rax
  unsigned int *v25; // rax
  unsigned int *v26; // rdx
  common::tools::StringStream<common::tools::FixedBuffer<4096> > *v27; // rax
  common::milog::MiLogStream *v28; // r14
  std::unordered_set<unsigned int>::iterator __for_begin; // [rsp+28h] [rbp-178h] BYREF
  std::unordered_set<unsigned int>::iterator __for_end; // [rsp+30h] [rbp-170h] BYREF
  std::unordered_set<unsigned int> *__for_range; // [rsp+38h] [rbp-168h]
  std::shared_ptr<PlayerWorldScene> __r; // [rsp+40h] [rbp-160h] BYREF
  common::milog::MiLogStream v33; // [rsp+50h] [rbp-150h] BYREF
  common::milog::MiLogStream v34; // [rsp+70h] [rbp-130h] BYREF
  char v35[272]; // [rsp+90h] [rbp-110h] BYREF

  v3 = (unsigned __int64)v35;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_2(224LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "5 32 4 13 scene_id:3353 48 4 12 area_id:3394 64 16 7 ss:3408 96 16 14 scene_ptr:3409 128 56 13 area_set:3412";
  *(_QWORD *)(v3 + 16) = unlockArea;
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = -234556924;
  v5[536862722] = -219021312;
  v5[536862723] = -219021312;
  v5[536862725] = -218103808;
  v5[536862726] = -202116109;
  if ( std::vector<std::string>::size(param_vec) <= 1 )
  {
    common::milog::MiLogStream::create(
      &v34,
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/player/gm/player_gm_comp.cpp",
      "unlockArea",
      3350);
    common::milog::MiLogStream::operator<<<char [17],(char *[17])0>(&v34, (const char (*)[17])"param not enough");
    common::milog::MiLogStream::~MiLogStream(&v34);
    result = -1;
    goto LABEL_47;
  }
  *(_DWORD *)(v3 + 32) = 0;
  v7 = std::vector<std::string>::operator[](param_vec, 1uLL);
  if ( std::operator==<char>(v7, _f.gap0) )
  {
    v8 = std::vector<std::string>::operator[](param_vec, 0LL);
    if ( common::tools::StringUtils::strToNum<unsigned int>(v8, (unsigned int *)(v3 + 32), 1) )
    {
      common::milog::MiLogStream::create(
        &v34,
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/player/gm/player_gm_comp.cpp",
        "unlockArea",
        3358);
      v9 = common::milog::MiLogStream::operator<<<char [15],(char *[15])0>(&v34, (const char (*)[15])"invalid param:");
      common::milog::MiLogStream::operator<<<std::string>(v9, param_vec);
      common::milog::MiLogStream::~MiLogStream(&v34);
      result = -1;
      goto LABEL_47;
    }
    if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
      __asan_report_load8(&context->player);
    SceneComp = Player::getSceneComp(context->player);
    if ( PlayerSceneComp::unlockAllAreaByGm(SceneComp, *(_DWORD *)(v3 + 32), 1) )
    {
      common::milog::MiLogStream::create(
        &v34,
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/player/gm/player_gm_comp.cpp",
        "unlockArea",
        3363);
      v11 = common::milog::MiLogStream::operator<<<char [26],(char *[26])0>(
              &v34,
              (const char (*)[26])"unlockAllAreaByGm fails, ");
      if ( *(_BYTE *)(((unsigned __int64)context >> 3) + 0x7FFF8000) )
        __asan_report_load8(context);
LABEL_14:
      common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v11, context->msg);
      common::milog::MiLogStream::~MiLogStream(&v34);
      result = -1;
      goto LABEL_47;
    }
  }
  else
  {
    v12 = std::vector<std::string>::operator[](param_vec, 0LL);
    if ( std::operator==<char>(v12, "LOCK") )
    {
      if ( std::vector<std::string>::size(param_vec) <= 2 )
      {
        common::milog::MiLogStream::create(
          &v34,
          &common::milog::MiLogDefault::default_log_obj_,
          3u,
          "./src/player/gm/player_gm_comp.cpp",
          "unlockArea",
          3372);
        common::milog::MiLogStream::operator<<<char [49],(char *[49])0>(
          &v34,
          (const char (*)[49])"invalid param, usage: area lock scene_id area_id");
        common::milog::MiLogStream::~MiLogStream(&v34);
        result = -1;
        goto LABEL_47;
      }
      *(_DWORD *)(v3 + 48) = 0;
      if ( common::tools::StringUtils::strVecToNum<1u,unsigned int,unsigned int &>(
             param_vec,
             (unsigned int *)(v3 + 32),
             (unsigned int *)(v3 + 48),
             (unsigned int *)(v3 + 32)) )
      {
        common::milog::MiLogStream::create(
          &v34,
          &common::milog::MiLogDefault::default_log_obj_,
          3u,
          "./src/player/gm/player_gm_comp.cpp",
          "unlockArea",
          3378);
        v13 = common::milog::MiLogStream::operator<<<char [15],(char *[15])0>(
                &v34,
                (const char (*)[15])"invalid param:");
        common::milog::MiLogStream::operator<<<std::string>(v13, param_vec);
        common::milog::MiLogStream::~MiLogStream(&v34);
        result = -1;
        goto LABEL_47;
      }
      if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
        __asan_report_load8(&context->player);
      v14 = Player::getSceneComp(context->player);
      if ( PlayerSceneComp::lockAreaByGm(v14, *(_DWORD *)(v3 + 32), *(_DWORD *)(v3 + 48)) )
      {
        common::milog::MiLogStream::create(
          &v34,
          &common::milog::MiLogDefault::default_log_obj_,
          3u,
          "./src/player/gm/player_gm_comp.cpp",
          "unlockArea",
          3383);
        v15 = common::milog::MiLogStream::operator<<<char [14],(char *[14])0>(&v34, (const char (*)[14])"lockAreaByGm ");
        v16 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                v15,
                (const unsigned int *)(v3 + 32));
        v17 = common::milog::MiLogStream::operator<<<char [3],(char *[3])0>(v16, (const char (*)[3])" :");
        v18 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                v17,
                (const unsigned int *)(v3 + 48));
        common::milog::MiLogStream::operator<<<char [8],(char *[8])0>(v18, (const char (*)[8])" failed");
        common::milog::MiLogStream::~MiLogStream(&v34);
        result = -1;
        goto LABEL_47;
      }
    }
    else
    {
      v19 = std::vector<std::string>::operator[](param_vec, 0LL);
      if ( std::operator==<char>(v19, "UNLOCK") )
      {
        if ( std::vector<std::string>::size(param_vec) <= 2 )
        {
          common::milog::MiLogStream::create(
            &v34,
            &common::milog::MiLogDefault::default_log_obj_,
            3u,
            "./src/player/gm/player_gm_comp.cpp",
            "unlockArea",
            3391);
          common::milog::MiLogStream::operator<<<char [49],(char *[49])0>(
            &v34,
            (const char (*)[49])"invalid param, usage: area lock scene_id area_id");
          common::milog::MiLogStream::~MiLogStream(&v34);
          result = -1;
          goto LABEL_47;
        }
        *(_DWORD *)(v3 + 48) = 0;
        if ( common::tools::StringUtils::strVecToNum<1u,unsigned int,unsigned int &>(
               param_vec,
               (unsigned int *)(v3 + 32),
               (unsigned int *)(v3 + 48),
               (unsigned int *)(v3 + 32)) )
        {
          common::milog::MiLogStream::create(
            &v34,
            &common::milog::MiLogDefault::default_log_obj_,
            3u,
            "./src/player/gm/player_gm_comp.cpp",
            "unlockArea",
            3397);
          v20 = common::milog::MiLogStream::operator<<<char [15],(char *[15])0>(
                  &v34,
                  (const char (*)[15])"invalid param:");
          common::milog::MiLogStream::operator<<<std::string>(v20, param_vec);
          common::milog::MiLogStream::~MiLogStream(&v34);
          result = -1;
          goto LABEL_47;
        }
        if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
          __asan_report_load8(&context->player);
        v21 = Player::getSceneComp(context->player);
        if ( PlayerSceneComp::unlockArea(v21, *(_DWORD *)(v3 + 32), *(_DWORD *)(v3 + 48), 1) )
        {
          common::milog::MiLogStream::create(
            &v34,
            &common::milog::MiLogDefault::default_log_obj_,
            3u,
            "./src/player/gm/player_gm_comp.cpp",
            "unlockArea",
            3402);
          v11 = common::milog::MiLogStream::operator<<<char [19],(char *[19])0>(
                  &v34,
                  (const char (*)[19])"unlockArea fails, ");
          if ( *(_BYTE *)(((unsigned __int64)context >> 3) + 0x7FFF8000) )
            __asan_report_load8(context);
          goto LABEL_14;
        }
      }
      else
      {
        v22 = std::vector<std::string>::operator[](param_vec, 0LL);
        if ( std::operator==<char>(v22, "MAIN_SCENE_INFO") )
        {
          common::tools::StringStream<common::tools::FixedBuffer<4096>>::StringStream((common::tools::StringStream<common::tools::FixedBuffer<4096> > *const)(v3 + 64));
          if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
            __asan_report_load8(&context->player);
          Player::getSceneComp(context->player);
          PlayerSceneComp::getMainWorldScene((PlayerSceneComp *const)&__r);
          std::shared_ptr<Scene>::shared_ptr<PlayerWorldScene,void>((std::shared_ptr<Scene> *const)(v3 + 96), &__r);
          std::shared_ptr<PlayerWorldScene>::~shared_ptr(&__r);
          if ( std::operator!=<Scene>((const std::shared_ptr<Scene> *)(v3 + 96), 0LL) )
          {
            v23 = std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 96));
            AllUnlockArea = Scene::getAllUnlockArea(v23);
            std::unordered_set<unsigned int>::unordered_set(
              (std::unordered_set<unsigned int> *const)(v3 + 128),
              AllUnlockArea);
            __for_range = (std::unordered_set<unsigned int> *)(v3 + 128);
            __for_begin._M_cur = std::unordered_set<unsigned int>::begin((std::unordered_set<unsigned int> *const)(v3 + 128))._M_cur;
            __for_end._M_cur = std::unordered_set<unsigned int>::end((std::unordered_set<unsigned int> *const)(v3 + 128))._M_cur;
            while ( std::__detail::operator!=<unsigned int,false>(&__for_begin, &__for_end) )
            {
              v25 = (unsigned int *)std::__detail::_Node_iterator<unsigned int,true,false>::operator*(&__for_begin);
              v26 = v25;
              if ( *(_BYTE *)(((unsigned __int64)v25 >> 3) + 0x7FFF8000) != 0
                && (char)(((unsigned __int8)v25 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)v25 >> 3) + 0x7FFF8000) )
              {
                __asan_report_load4(v25);
              }
              v27 = common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(
                      (common::tools::StringStream<common::tools::FixedBuffer<4096> > *const)(v3 + 64),
                      *v26);
              common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(v27, " ");
              std::__detail::_Node_iterator<unsigned int,true,false>::operator++(&__for_begin);
            }
            std::unordered_set<unsigned int>::~unordered_set((std::unordered_set<unsigned int> *const)(v3 + 128));
          }
          common::milog::MiLogStream::create(
            &v33,
            &common::milog::MiLogDefault::default_log_obj_,
            1u,
            "./src/player/gm/player_gm_comp.cpp",
            "unlockArea",
            3418);
          v28 = common::milog::MiLogStream::operator<<<char [12],(char *[12])0>(&v33, (const char (*)[12])"area_list: ");
          common::tools::StringStream<common::tools::FixedBuffer<4096>>::str[abi:cxx11](
            (std::string *)&v34,
            (common::tools::StringStream<common::tools::FixedBuffer<4096> > *const)(v3 + 64));
          common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v28, (const std::string *)&v34);
          std::string::~string(&v34);
          common::milog::MiLogStream::~MiLogStream(&v33);
          std::shared_ptr<Scene>::~shared_ptr((std::shared_ptr<Scene> *const)(v3 + 96));
          common::tools::StringStream<common::tools::FixedBuffer<4096>>::~StringStream((common::tools::StringStream<common::tools::FixedBuffer<4096> > *const)(v3 + 64));
        }
      }
    }
  }
  result = 0;
LABEL_47:
  if ( v35 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8014) = 0LL;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8018) = -168430091;
  }
  return result;
};

// Line 3424: range 0000000017D733D8-0000000017D7347A
void __cdecl procCityRegister::procCityRegister(procCityRegister *const this)
{
  std::function<int(GmContext&,const std::vector<std::string>&,std::string&)> *v1; // rax
  std::allocator<char> __a; // [rsp+1Fh] [rbp-31h] BYREF
  std::string __k; // [rsp+20h] [rbp-30h] BYREF

  std::allocator<char>::allocator(&__a);
  std::string::basic_string<std::allocator<char>>(&__k, "CITY", &__a);
  v1 = std::unordered_map<std::string,std::function<int ()(GmContext &,std::vector<std::string> const&,std::string&)>>::operator[](
         &GmUtils::op_func_map[abi:cxx11],
         &__k);
  std::function<int ()(GmContext &,std::vector<std::string> const&,std::string&)>::operator=<int (&)(GmContext &,std::vector<std::string> const&,std::string&)>(
    v1,
    (int (*)(GmContext *, const std::vector<std::string> *, std::string *))procCity);
  std::string::~string(&__k);
  std::allocator<char>::~allocator(&__a);
};

// Line 3425: range 0000000017BDA126-0000000017BDA6F1
int32_t __cdecl procCity(GmContext *context, const std::vector<std::string> *param_vec, std::string *ret_msg)
{
  unsigned __int64 v3; // r13
  __int64 v4; // rax
  _DWORD *v5; // r12
  int32_t v6; // r14d
  const std::string *v7; // rax
  const std::string *v8; // rax
  common::milog::MiLogStream *v9; // rbx
  const std::string *v10; // rax
  const std::string *v11; // rax
  common::milog::MiLogStream *v12; // rbx
  const std::string *v13; // rax
  PlayerCityComp *CityComp; // rax
  common::milog::MiLogStream *v15; // r14
  common::milog::MiLogStream *v16; // rax
  common::milog::MiLogStream *v17; // rax
  common::milog::MiLogStream *v18; // rax
  common::milog::MiLogStream *v19; // rax
  common::milog::MiLogStream *v20; // rax
  int32_t result; // eax
  unsigned int val; // [rsp+28h] [rbp-F8h] BYREF
  common::milog::MiLogStream v24; // [rsp+30h] [rbp-F0h] BYREF
  char v25[208]; // [rsp+50h] [rbp-D0h] BYREF

  v3 = (unsigned __int64)v25;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_2(160LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "3 48 4 13 scene_id:3433 64 4 12 city_id:3439 80 40 8 rsp:3446";
  *(_QWORD *)(v3 + 16) = procCity;
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = -234556943;
  v5[536862722] = 61956;
  v5[536862723] = -218103808;
  v5[536862724] = -202116109;
  if ( std::vector<std::string>::size(param_vec) > 2 )
  {
    v7 = std::vector<std::string>::operator[](param_vec, 0LL);
    if ( std::operator==<char>(v7, "LEVELUP") )
    {
      *(_DWORD *)(v3 + 48) = 0;
      v8 = std::vector<std::string>::operator[](param_vec, 1uLL);
      if ( common::tools::StringUtils::strToNum<unsigned int>(v8, (unsigned int *)(v3 + 48), 1) )
      {
        common::milog::MiLogStream::create(
          &v24,
          &common::milog::MiLogDefault::default_log_obj_,
          3u,
          "./src/player/gm/player_gm_comp.cpp",
          "procCity",
          3436);
        v9 = common::milog::MiLogStream::operator<<<char [19],(char *[19])0>(
               &v24,
               (const char (*)[19])"invalid scene_id: ");
        v10 = std::vector<std::string>::operator[](param_vec, 1uLL);
        common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v9, v10);
        common::milog::MiLogStream::~MiLogStream(&v24);
        v6 = -1;
      }
      else
      {
        *(_DWORD *)(v3 + 64) = 0;
        v11 = std::vector<std::string>::operator[](param_vec, 2uLL);
        if ( common::tools::StringUtils::strToNum<unsigned int>(v11, (unsigned int *)(v3 + 64), 1) )
        {
          common::milog::MiLogStream::create(
            &v24,
            &common::milog::MiLogDefault::default_log_obj_,
            3u,
            "./src/player/gm/player_gm_comp.cpp",
            "procCity",
            3442);
          v12 = common::milog::MiLogStream::operator<<<char [18],(char *[18])0>(
                  &v24,
                  (const char (*)[18])"invalid area_id: ");
          v13 = std::vector<std::string>::operator[](param_vec, 2uLL);
          common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v12, v13);
          common::milog::MiLogStream::~MiLogStream(&v24);
          v6 = -1;
        }
        else
        {
          proto::LevelupCityRsp::LevelupCityRsp((proto::LevelupCityRsp *const)(v3 + 80));
          proto::LevelupCityRsp::set_retcode((proto::LevelupCityRsp *const)(v3 + 80), 0);
          if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
            __asan_report_load8(&context->player);
          CityComp = Player::getCityComp(context->player);
          if ( (unsigned int)PlayerCityComp::levelupCityByGm(
                               CityComp,
                               *(_DWORD *)(v3 + 48),
                               *(_DWORD *)(v3 + 64),
                               (proto::LevelupCityRsp *)(v3 + 80)) )
          {
            common::milog::MiLogStream::create(
              &v24,
              &common::milog::MiLogDefault::default_log_obj_,
              3u,
              "./src/player/gm/player_gm_comp.cpp",
              "procCity",
              3451);
            v15 = common::milog::MiLogStream::operator<<<char [6],(char *[6])0>(&v24, (const char (*)[6])"uid: ");
            if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
              __asan_report_load8(&context->player);
            val = Player::getUid(context->player);
            v16 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v15, &val);
            v17 = common::milog::MiLogStream::operator<<<char [24],(char *[24])0>(
                    v16,
                    (const char (*)[24])" levelupCity scene_id: ");
            v18 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                    v17,
                    (const unsigned int *)(v3 + 48));
            v19 = common::milog::MiLogStream::operator<<<char [11],(char *[11])0>(v18, (const char (*)[11])" city_id: ");
            v20 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                    v19,
                    (const unsigned int *)(v3 + 64));
            common::milog::MiLogStream::operator<<<char [8],(char *[8])0>(v20, (const char (*)[8])" failed");
            common::milog::MiLogStream::~MiLogStream(&v24);
            v6 = -1;
          }
          else
          {
            if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
              __asan_report_load8(&context->player);
            v6 = Player::sendProto(context->player, (const google::protobuf::Message *)(v3 + 80));
          }
          proto::LevelupCityRsp::~LevelupCityRsp((proto::LevelupCityRsp *const)(v3 + 80));
        }
      }
    }
    else
    {
      v6 = 0;
    }
  }
  else
  {
    common::milog::MiLogStream::create(
      &v24,
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/player/gm/player_gm_comp.cpp",
      "procCity",
      3428);
    common::milog::MiLogStream::operator<<<char [17],(char *[17])0>(&v24, (const char (*)[17])"param not enough");
    common::milog::MiLogStream::~MiLogStream(&v24);
    v6 = -1;
  }
  result = v6;
  if ( v25 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8010) = 0;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8010) = -168430091;
  }
  return result;
};

// Line 3459: range 0000000017D7347C-0000000017D7351E
void __cdecl procForceRegister::procForceRegister(procForceRegister *const this)
{
  std::function<int(GmContext&,const std::vector<std::string>&,std::string&)> *v1; // rax
  std::allocator<char> __a; // [rsp+1Fh] [rbp-31h] BYREF
  std::string __k; // [rsp+20h] [rbp-30h] BYREF

  std::allocator<char>::allocator(&__a);
  std::string::basic_string<std::allocator<char>>(&__k, "FORCE", &__a);
  v1 = std::unordered_map<std::string,std::function<int ()(GmContext &,std::vector<std::string> const&,std::string&)>>::operator[](
         &GmUtils::op_func_map[abi:cxx11],
         &__k);
  std::function<int ()(GmContext &,std::vector<std::string> const&,std::string&)>::operator=<int (&)(GmContext &,std::vector<std::string> const&,std::string&)>(
    v1,
    (int (*)(GmContext *, const std::vector<std::string> *, std::string *))procForce);
  std::string::~string(&__k);
  std::allocator<char>::~allocator(&__a);
};

// Line 3460: range 0000000017BDA6F2-0000000017BDB070
int32_t __cdecl procForce(GmContext *context, const std::vector<std::string> *param_vec, std::string *ret_msg)
{
  unsigned __int64 v3; // r12
  __int64 v4; // rax
  _DWORD *v5; // r13
  int32_t result; // eax
  const std::string *v7; // rax
  const std::string *v8; // rax
  common::milog::MiLogStream *v9; // rdx
  const std::string *v10; // rax
  const std::string *v11; // rax
  common::milog::MiLogStream *v12; // rdx
  PlayerSceneComp *SceneComp; // rax
  common::milog::MiLogStream *v14; // rcx
  PlayerSceneComp *v15; // rax
  const std::string *v16; // rax
  common::milog::MiLogStream *v17; // rdx
  const std::string *v18; // rax
  common::milog::MiLogStream *v19; // rdx
  PlayerSceneComp *v20; // rax
  PlayerSceneComp *v21; // rax
  bool is_lock; // [rsp+2Fh] [rbp-A1h]
  common::milog::MiLogStream v23; // [rsp+30h] [rbp-A0h] BYREF
  char v24[128]; // [rsp+50h] [rbp-80h] BYREF

  v3 = (unsigned __int64)v24;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_1(96LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "2 48 4 13 scene_id:3476 64 4 13 force_id:3508";
  *(_QWORD *)(v3 + 16) = procForce;
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = -234556943;
  v5[536862722] = -202116348;
  if ( std::vector<std::string>::size(param_vec) <= 2 )
  {
    common::milog::MiLogStream::create(
      &v23,
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/player/gm/player_gm_comp.cpp",
      "procForce",
      3463);
    common::milog::MiLogStream::operator<<<char [17],(char *[17])0>(&v23, (const char (*)[17])"param not enough");
    common::milog::MiLogStream::~MiLogStream(&v23);
    result = -1;
    goto LABEL_44;
  }
  is_lock = 0;
  v7 = std::vector<std::string>::operator[](param_vec, 0LL);
  if ( std::operator==<char>(v7, "LOCK") )
  {
    is_lock = 1;
  }
  else
  {
    v8 = std::vector<std::string>::operator[](param_vec, 0LL);
    if ( std::operator!=<char>(v8, "UNLOCK") )
    {
      common::milog::MiLogStream::create(
        &v23,
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/player/gm/player_gm_comp.cpp",
        "procForce",
        3473);
      v9 = common::milog::MiLogStream::operator<<<char [15],(char *[15])0>(&v23, (const char (*)[15])"invalid param:");
      common::milog::MiLogStream::operator<<<std::string>(v9, param_vec);
      common::milog::MiLogStream::~MiLogStream(&v23);
      result = -1;
      goto LABEL_44;
    }
  }
  *(_DWORD *)(v3 + 48) = 0;
  v10 = std::vector<std::string>::operator[](param_vec, 2uLL);
  if ( std::operator==<char>(v10, _f.gap0) )
  {
    v11 = std::vector<std::string>::operator[](param_vec, 1uLL);
    if ( common::tools::StringUtils::strToNum<unsigned int>(v11, (unsigned int *)(v3 + 48), 1) )
    {
      common::milog::MiLogStream::create(
        &v23,
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/player/gm/player_gm_comp.cpp",
        "procForce",
        3481);
      v12 = common::milog::MiLogStream::operator<<<char [15],(char *[15])0>(&v23, (const char (*)[15])"invalid param:");
      common::milog::MiLogStream::operator<<<std::string>(v12, param_vec);
      common::milog::MiLogStream::~MiLogStream(&v23);
      result = -1;
      goto LABEL_44;
    }
    if ( is_lock )
    {
      if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
        __asan_report_load8(&context->player);
      SceneComp = Player::getSceneComp(context->player);
      if ( PlayerSceneComp::lockAllForce(SceneComp, *(_DWORD *)(v3 + 48), 1) )
      {
        common::milog::MiLogStream::create(
          &v23,
          &common::milog::MiLogDefault::default_log_obj_,
          3u,
          "./src/player/gm/player_gm_comp.cpp",
          "procForce",
          3488);
        v14 = common::milog::MiLogStream::operator<<<char [21],(char *[21])0>(
                &v23,
                (const char (*)[21])"lockAllForce fails, ");
        if ( *(_BYTE *)(((unsigned __int64)context >> 3) + 0x7FFF8000) )
          __asan_report_load8(context);
LABEL_42:
        common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v14, context->msg);
        common::milog::MiLogStream::~MiLogStream(&v23);
        result = -1;
        goto LABEL_44;
      }
    }
    else
    {
      if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
        __asan_report_load8(&context->player);
      v15 = Player::getSceneComp(context->player);
      if ( PlayerSceneComp::unlockAllForce(v15, *(_DWORD *)(v3 + 48), 1) )
      {
        common::milog::MiLogStream::create(
          &v23,
          &common::milog::MiLogDefault::default_log_obj_,
          3u,
          "./src/player/gm/player_gm_comp.cpp",
          "procForce",
          3496);
        v14 = common::milog::MiLogStream::operator<<<char [23],(char *[23])0>(
                &v23,
                (const char (*)[23])"unlockAllForce fails, ");
        if ( *(_BYTE *)(((unsigned __int64)context >> 3) + 0x7FFF8000) )
          __asan_report_load8(context);
        goto LABEL_42;
      }
    }
  }
  else
  {
    v16 = std::vector<std::string>::operator[](param_vec, 1uLL);
    if ( common::tools::StringUtils::strToNum<unsigned int>(v16, (unsigned int *)(v3 + 48), 1) )
    {
      common::milog::MiLogStream::create(
        &v23,
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/player/gm/player_gm_comp.cpp",
        "procForce",
        3505);
      v17 = common::milog::MiLogStream::operator<<<char [15],(char *[15])0>(&v23, (const char (*)[15])"invalid param:");
      common::milog::MiLogStream::operator<<<std::string>(v17, param_vec);
      common::milog::MiLogStream::~MiLogStream(&v23);
      result = -1;
      goto LABEL_44;
    }
    *(_DWORD *)(v3 + 64) = 0;
    v18 = std::vector<std::string>::operator[](param_vec, 2uLL);
    if ( common::tools::StringUtils::strToNum<unsigned int>(v18, (unsigned int *)(v3 + 64), 1) )
    {
      common::milog::MiLogStream::create(
        &v23,
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/player/gm/player_gm_comp.cpp",
        "procForce",
        3511);
      v19 = common::milog::MiLogStream::operator<<<char [15],(char *[15])0>(&v23, (const char (*)[15])"invalid param:");
      common::milog::MiLogStream::operator<<<std::string>(v19, param_vec);
      common::milog::MiLogStream::~MiLogStream(&v23);
      result = -1;
      goto LABEL_44;
    }
    if ( is_lock )
    {
      if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
        __asan_report_load8(&context->player);
      v20 = Player::getSceneComp(context->player);
      if ( PlayerSceneComp::lockForce(v20, *(_DWORD *)(v3 + 48), *(_DWORD *)(v3 + 64), 1) )
      {
        common::milog::MiLogStream::create(
          &v23,
          &common::milog::MiLogDefault::default_log_obj_,
          3u,
          "./src/player/gm/player_gm_comp.cpp",
          "procForce",
          3518);
        v14 = common::milog::MiLogStream::operator<<<char [18],(char *[18])0>(
                &v23,
                (const char (*)[18])"lockForce fails, ");
        if ( *(_BYTE *)(((unsigned __int64)context >> 3) + 0x7FFF8000) )
          __asan_report_load8(context);
        goto LABEL_42;
      }
    }
    else
    {
      if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
        __asan_report_load8(&context->player);
      v21 = Player::getSceneComp(context->player);
      if ( PlayerSceneComp::unlockForce(v21, *(_DWORD *)(v3 + 48), *(_DWORD *)(v3 + 64), 1) )
      {
        common::milog::MiLogStream::create(
          &v23,
          &common::milog::MiLogDefault::default_log_obj_,
          3u,
          "./src/player/gm/player_gm_comp.cpp",
          "procForce",
          3526);
        v14 = common::milog::MiLogStream::operator<<<char [20],(char *[20])0>(
                &v23,
                (const char (*)[20])"unlockForce fails, ");
        if ( *(_BYTE *)(((unsigned __int64)context >> 3) + 0x7FFF8000) )
          __asan_report_load8(context);
        goto LABEL_42;
      }
    }
  }
  result = 0;
LABEL_44:
  if ( v24 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8008) = 0;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8008) = -168430091;
  }
  return result;
};

// Line 3534: range 0000000017D73520-0000000017D735C2
void __cdecl procHomeBgmRegister::procHomeBgmRegister(procHomeBgmRegister *const this)
{
  std::function<int(GmContext&,const std::vector<std::string>&,std::string&)> *v1; // rax
  std::allocator<char> __a; // [rsp+1Fh] [rbp-31h] BYREF
  std::string __k; // [rsp+20h] [rbp-30h] BYREF

  std::allocator<char>::allocator(&__a);
  std::string::basic_string<std::allocator<char>>(&__k, "HOME_BGM", &__a);
  v1 = std::unordered_map<std::string,std::function<int ()(GmContext &,std::vector<std::string> const&,std::string&)>>::operator[](
         &GmUtils::op_func_map[abi:cxx11],
         &__k);
  std::function<int ()(GmContext &,std::vector<std::string> const&,std::string&)>::operator=<int (&)(GmContext &,std::vector<std::string> const&,std::string&)>(
    v1,
    (int (*)(GmContext *, const std::vector<std::string> *, std::string *))procHomeBgm);
  std::string::~string(&__k);
  std::allocator<char>::~allocator(&__a);
};

// Line 3535: range 0000000017BDB071-0000000017BDB4F0
int32_t __cdecl procHomeBgm(GmContext *context, const std::vector<std::string> *param_vec, std::string *ret_msg)
{
  unsigned __int64 v3; // rbx
  __int64 v4; // rax
  _DWORD *v5; // r13
  int32_t v6; // r14d
  const std::string *v7; // rax
  const std::string *v8; // rax
  const std::string *v9; // r14
  PlayerHomeComp *HomeComp; // rax
  const std::string *v11; // r12
  int32_t result; // eax
  size_t i; // [rsp+28h] [rbp-118h]
  std::string __lhs; // [rsp+30h] [rbp-110h] BYREF
  std::string v16; // [rsp+50h] [rbp-F0h] BYREF
  common::milog::MiLogStream v17; // [rsp+70h] [rbp-D0h] BYREF
  char v18[176]; // [rsp+90h] [rbp-B0h] BYREF

  v3 = (unsigned __int64)v18;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_1(128LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "2 48 4 11 bgm_id:3546 64 24 15 bgm_id_vec:3543";
  *(_QWORD *)(v3 + 16) = procHomeBgm;
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = -234556943;
  v5[536862722] = -218103808;
  v5[536862723] = -202116109;
  if ( std::vector<std::string>::empty(param_vec) )
  {
    common::milog::MiLogStream::create(
      &v17,
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/player/gm/player_gm_comp.cpp",
      "procHomeBgm",
      3538);
    common::milog::MiLogStream::operator<<<char [17],(char *[17])0>(&v17, (const char (*)[17])"param not enough");
    common::milog::MiLogStream::~MiLogStream(&v17);
    v6 = -1;
  }
  else
  {
    v7 = std::vector<std::string>::operator[](param_vec, 0LL);
    if ( std::operator==<char>(v7, "UNLOCK") )
    {
      std::vector<unsigned int>::vector((std::vector<unsigned int> *const)(v3 + 64));
      for ( i = 1LL; i < std::vector<std::string>::size(param_vec); ++i )
      {
        *(_DWORD *)(v3 + 48) = 0;
        v8 = std::vector<std::string>::operator[](param_vec, i);
        if ( common::tools::StringUtils::strToNum<unsigned int>(v8, (unsigned int *)(v3 + 48), 1) )
        {
          v9 = std::vector<std::string>::operator[](param_vec, i);
          std::literals::string_literals::operator"" s[abi:cxx11](&__lhs, "parse ", 6uLL);
          std::operator+<char>(&v16, &__lhs, v9);
          std::operator+<char>((std::string *)&v17, &v16, " fail");
          std::string::operator=(ret_msg, &v17);
          std::string::~string(&v17);
          std::string::~string(&v16);
          std::string::~string(&__lhs);
          v6 = -1;
          goto LABEL_15;
        }
        std::vector<unsigned int>::push_back(
          (std::vector<unsigned int> *const)(v3 + 64),
          (const std::vector<unsigned int>::value_type *)(v3 + 48));
      }
      if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
        __asan_report_load8(&context->player);
      HomeComp = Player::getHomeComp(context->player);
      v6 = PlayerHomeComp::unlockHomeBgm(HomeComp, (const std::vector<unsigned int> *)(v3 + 64));
LABEL_15:
      std::vector<unsigned int>::~vector((std::vector<unsigned int> *const)(v3 + 64));
    }
    else
    {
      v11 = std::vector<std::string>::operator[](param_vec, 0LL);
      std::literals::string_literals::operator"" s[abi:cxx11](&v16, "invalid param:", 0xEuLL);
      std::operator+<char>((std::string *)&v17, &v16, v11);
      std::string::operator=(ret_msg, &v17);
      std::string::~string(&v17);
      std::string::~string(&v16);
      v6 = -1;
    }
  }
  result = v6;
  if ( v18 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 3564: range 0000000017D735C4-0000000017D73666
void __cdecl procAvatarRegister::procAvatarRegister(procAvatarRegister *const this)
{
  std::function<int(GmContext&,const std::vector<std::string>&,std::string&)> *v1; // rax
  std::allocator<char> __a; // [rsp+1Fh] [rbp-31h] BYREF
  std::string __k; // [rsp+20h] [rbp-30h] BYREF

  std::allocator<char>::allocator(&__a);
  std::string::basic_string<std::allocator<char>>(&__k, "AVATAR", &__a);
  v1 = std::unordered_map<std::string,std::function<int ()(GmContext &,std::vector<std::string> const&,std::string&)>>::operator[](
         &GmUtils::op_func_map[abi:cxx11],
         &__k);
  std::function<int ()(GmContext &,std::vector<std::string> const&,std::string&)>::operator=<int (&)(GmContext &,std::vector<std::string> const&,std::string&)>(
    v1,
    (int (*)(GmContext *, const std::vector<std::string> *, std::string *))procAvatar);
  std::string::~string(&__k);
  std::allocator<char>::~allocator(&__a);
};

// Line 3565: range 0000000017BDB55C-0000000017BDD74E
int32_t __cdecl procAvatar(GmContext *context, const std::vector<std::string> *param_vec, std::string *ret_msg)
{
  int32_t v3; // r13d
  unsigned __int64 v4; // r14
  __int64 v5; // rax
  _DWORD *v6; // r12
  const std::string *v7; // rax
  const std::string *v8; // rax
  common::milog::MiLogStream *v9; // rdx
  std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v10; // rax
  bool v11; // r15
  bool v12; // r15
  int v13; // r15d
  bool v14; // r13
  common::milog::MiLogStream *v15; // rcx
  const std::string *v16; // rax
  const std::string *v17; // rax
  bool v18; // r15
  common::milog::MiLogStream *v19; // rdx
  int v20; // r15d
  __gnu_cxx::__normal_iterator<unsigned int*,std::vector<unsigned int> >::reference v21; // rax
  unsigned int *v22; // rdx
  std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v23; // rax
  bool v24; // r15
  bool v25; // r15
  bool v26; // r15
  common::milog::MiLogStream *v27; // rcx
  const std::string *v28; // rax
  const std::string *v29; // rax
  common::milog::MiLogStream *v30; // rdx
  common::milog::MiLogStream *v31; // rcx
  const std::string *v32; // rax
  const std::string *v33; // rax
  common::milog::MiLogStream *v34; // rdx
  std::vector<std::string>::const_reference v35; // rax
  PlayerAvatarComp *AvatarComp; // rax
  const std::weak_ptr<Avatar> *v37; // rax
  std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v38; // rax
  std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v39; // rax
  unsigned __int64 *M_current; // r15
  std::vector<long unsigned int>::iterator v41; // rax
  uint64_t *v42; // rax
  common::milog::MiLogStream *v43; // rcx
  int v44; // r15d
  const std::string *v45; // rax
  const std::string *v46; // rax
  common::milog::MiLogStream *v47; // rdx
  common::milog::MiLogStream *v48; // rcx
  int v49; // r15d
  std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v50; // rax
  common::milog::MiLogStream *v51; // r13
  std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v52; // rax
  Avatar *v53; // rax
  common::milog::MiLogStream *v54; // rcx
  const std::string *v55; // rax
  SceneTeam *v56; // rax
  const std::string *v57; // rax
  SceneTeam *v58; // rax
  const std::string *v59; // rax
  const std::string *v60; // rax
  bool v61; // r13
  common::milog::MiLogStream *v62; // rdx
  const std::string *v63; // rax
  const std::string *v64; // rax
  common::milog::MiLogStream *v65; // rdx
  const std::string *v66; // rax
  const std::string *v67; // rax
  common::milog::MiLogStream *v68; // rdx
  const std::string *v69; // rax
  common::milog::MiLogStream *v70; // rdx
  common::milog::MiLogStream *v71; // rdx
  int32_t result; // eax
  std::mt19937 *__g; // [rsp+10h] [rbp-2B0h]
  std::allocator<char> __a; // [rsp+37h] [rbp-289h] BYREF
  int32_t ret; // [rsp+38h] [rbp-288h]
  unsigned int avatar_id; // [rsp+3Ch] [rbp-284h]
  std::vector<std::weak_ptr<Avatar>>::iterator __for_begin_0; // [rsp+40h] [rbp-280h] BYREF
  std::vector<std::weak_ptr<Avatar>>::iterator __for_end_0; // [rsp+48h] [rbp-278h] BYREF
  std::vector<unsigned int>::iterator __for_end; // [rsp+50h] [rbp-270h] BYREF
  PlayerAvatarComp *avatar_comp; // [rsp+58h] [rbp-268h]
  std::vector<std::weak_ptr<Avatar>> *__for_range_0; // [rsp+60h] [rbp-260h]
  std::vector<unsigned int> *__for_range; // [rsp+68h] [rbp-258h]
  std::string __lhs; // [rsp+70h] [rbp-250h] BYREF
  std::string __rhs; // [rsp+90h] [rbp-230h] BYREF
  char v86[528]; // [rsp+B0h] [rbp-210h] BYREF

  v4 = (unsigned __int64)v86;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v5 = __asan_stack_malloc_3(480LL);
    if ( v5 )
      v4 = v5;
  }
  *(_QWORD *)v4 = 1102416563LL;
  *(_QWORD *)(v4 + 8) = "9 48 4 20 trial_avatar_id:3780 64 8 7 id:3647 96 16 18 cur_world_ptr:3739 128 16 8 oss:3790 160 "
                        "24 18 avatar_id_vec:3756 224 24 18 avatar_id_vec:3602 288 32 20 avatar_type_str:3653 352 32 11 r"
                        "ecord:3583 416 32 17 grant_record:3762";
  *(_QWORD *)(v4 + 16) = procAvatar;
  v6 = (_DWORD *)(v4 >> 3);
  v6[536862720] = -235802127;
  v6[536862721] = -234556943;
  v6[536862722] = -218959360;
  v6[536862723] = -219021312;
  v6[536862724] = -219021312;
  v6[536862725] = -234881024;
  v6[536862726] = -218959118;
  v6[536862727] = -234881024;
  v6[536862728] = -218959118;
  v6[536862730] = -218959118;
  v6[536862732] = -218959118;
  v6[536862734] = -202116109;
  if ( std::vector<std::string>::size(param_vec) <= 1 )
  {
    common::milog::MiLogStream::create(
      (common::milog::MiLogStream *)(v4 + 416),
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/player/gm/player_gm_comp.cpp",
      "procAvatar",
      3568);
    common::milog::MiLogStream::operator<<<char [17],(char *[17])0>(
      (common::milog::MiLogStream *const)(v4 + 416),
      (const char (*)[17])"param not enough");
    common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v4 + 416));
    v3 = -1;
    goto LABEL_126;
  }
  if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
    __asan_report_load8(&context->player);
  avatar_comp = Player::getAvatarComp(context->player);
  ret = 0;
  v7 = std::vector<std::string>::operator[](param_vec, 0LL);
  if ( !std::operator==<char>(v7, off_26356D00) )
  {
    v16 = std::vector<std::string>::operator[](param_vec, 0LL);
    if ( std::operator==<char>(v16, "ADD_BATCH") )
    {
      std::vector<unsigned int>::vector((std::vector<unsigned int> *const)(v4 + 224));
      std::allocator<char>::allocator(&__a);
      std::string::basic_string<std::allocator<char>>((std::string *const)(v4 + 416), ",", &__a);
      v17 = std::vector<std::string>::operator[](param_vec, 1uLL);
      v18 = common::tools::StringUtils::splitToList<unsigned int>(
              v17,
              (const std::string *)(v4 + 416),
              (std::vector<unsigned int> *)(v4 + 224),
              1) != 0;
      std::string::~string((void *)(v4 + 416));
      std::allocator<char>::~allocator(&__a);
      if ( v18 )
      {
        common::milog::MiLogStream::create(
          (common::milog::MiLogStream *)(v4 + 416),
          &common::milog::MiLogDefault::default_log_obj_,
          3u,
          "./src/player/gm/player_gm_comp.cpp",
          "procAvatar",
          3605);
        v19 = common::milog::MiLogStream::operator<<<char [15],(char *[15])0>(
                (common::milog::MiLogStream *const)(v4 + 416),
                (const char (*)[15])"invalid param:");
        common::milog::MiLogStream::operator<<<std::string>(v19, param_vec);
        common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v4 + 416));
        v3 = -1;
        v20 = 0;
      }
      else
      {
        __for_range = (std::vector<unsigned int> *)(v4 + 224);
        __for_end_0._M_current = (std::weak_ptr<Avatar> *)std::vector<unsigned int>::begin((std::vector<unsigned int> *const)(v4 + 224))._M_current;
        __for_end._M_current = std::vector<unsigned int>::end(__for_range)._M_current;
        while ( __gnu_cxx::operator!=<unsigned int *,std::vector<unsigned int>>(
                  (const __gnu_cxx::__normal_iterator<unsigned int*,std::vector<unsigned int> > *)&__for_end_0,
                  &__for_end) )
        {
          v21 = __gnu_cxx::__normal_iterator<unsigned int *,std::vector<unsigned int>>::operator*((const __gnu_cxx::__normal_iterator<unsigned int*,std::vector<unsigned int> > *const)&__for_end_0);
          v22 = v21;
          if ( *(_BYTE *)(((unsigned __int64)v21 >> 3) + 0x7FFF8000) != 0
            && (char)(((unsigned __int8)v21 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)v21 >> 3) + 0x7FFF8000) )
          {
            __asan_report_load4(v21);
          }
          avatar_id = *v22;
          ServiceBox::findService<GameserverService>();
          GameserverService::getConfig((GameserverService *const)(v4 + 128));
          v23 = std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 128));
          v24 = data::TrialAvatarExcelConfigMgrBase::findTrialAvatarExcelConfig(
                  &v23->design_config.txt_config_mgr.trial_avatar_config_mgr,
                  avatar_id) != 0LL;
          std::shared_ptr<Config>::~shared_ptr((std::shared_ptr<Config> *const)(v4 + 128));
          if ( v24 )
          {
            proto::TrialAvatarGrantRecord::TrialAvatarGrantRecord((proto::TrialAvatarGrantRecord *const)(v4 + 352));
            proto::TrialAvatarGrantRecord::set_grant_reason((proto::TrialAvatarGrantRecord *const)(v4 + 352), 1u);
            PlayerAvatarComp::grantTrialAvatar(
              (PlayerAvatarComp *const)(v4 + 96),
              (uint32_t)avatar_comp,
              (const proto::TrialAvatarGrantRecord *)avatar_id,
              v4 + 96);
            v25 = std::operator==<TrialAvatar>(0LL, (const std::shared_ptr<TrialAvatar> *)(v4 + 96));
            std::shared_ptr<TrialAvatar>::~shared_ptr((std::shared_ptr<TrialAvatar> *const)(v4 + 96));
            if ( v25 )
            {
              common::milog::MiLogStream::create(
                (common::milog::MiLogStream *)(v4 + 416),
                &common::milog::MiLogDefault::default_log_obj_,
                3u,
                "./src/player/gm/player_gm_comp.cpp",
                "procAvatar",
                3616);
              common::milog::MiLogStream::operator<<<char [23],(char *[23])0>(
                (common::milog::MiLogStream *const)(v4 + 416),
                (const char (*)[23])off_26356D40);
              common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v4 + 416));
            }
            proto::TrialAvatarGrantRecord::~TrialAvatarGrantRecord((proto::TrialAvatarGrantRecord *const)(v4 + 352));
          }
          else
          {
            PlayerAvatarComp::addFormalAvatar((PlayerAvatarComp *const)(v4 + 128), avatar_comp, avatar_id, 1u, 3u, 0);
            v26 = std::operator==<FormalAvatar>(0LL, (const std::shared_ptr<FormalAvatar> *)(v4 + 128));
            std::shared_ptr<FormalAvatar>::~shared_ptr((std::shared_ptr<FormalAvatar> *const)(v4 + 128));
            if ( v26 )
            {
              common::milog::MiLogStream::create(
                (common::milog::MiLogStream *)(v4 + 416),
                &common::milog::MiLogDefault::default_log_obj_,
                3u,
                "./src/player/gm/player_gm_comp.cpp",
                "procAvatar",
                3624);
              v27 = common::milog::MiLogStream::operator<<<char [24],(char *[24])0>(
                      (common::milog::MiLogStream *const)(v4 + 416),
                      (const char (*)[24])"addFormalAvatar fails, ");
              if ( *(_BYTE *)(((unsigned __int64)context >> 3) + 0x7FFF8000) )
                __asan_report_load8(context);
              common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v27, context->msg);
              common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v4 + 416));
            }
          }
          __gnu_cxx::__normal_iterator<unsigned int *,std::vector<unsigned int>>::operator++((__gnu_cxx::__normal_iterator<unsigned int*,std::vector<unsigned int> > *const)&__for_end_0);
        }
        v20 = 1;
      }
      std::vector<unsigned int>::~vector((std::vector<unsigned int> *const)(v4 + 224));
      if ( v20 == 1 )
        goto LABEL_125;
      goto LABEL_126;
    }
    v28 = std::vector<std::string>::operator[](param_vec, 0LL);
    if ( std::operator==<char>(v28, off_26356E00) )
    {
      *(_DWORD *)(v4 + 48) = 0;
      v29 = std::vector<std::string>::operator[](param_vec, 1uLL);
      if ( common::tools::StringUtils::strToNum<unsigned int>(v29, (unsigned int *)(v4 + 48), 1) )
      {
        common::milog::MiLogStream::create(
          (common::milog::MiLogStream *)(v4 + 416),
          &common::milog::MiLogDefault::default_log_obj_,
          3u,
          "./src/player/gm/player_gm_comp.cpp",
          "procAvatar",
          3635);
        v30 = common::milog::MiLogStream::operator<<<char [15],(char *[15])0>(
                (common::milog::MiLogStream *const)(v4 + 416),
                (const char (*)[15])"invalid param:");
        common::milog::MiLogStream::operator<<<std::string>(v30, param_vec);
        common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v4 + 416));
        v3 = -1;
        goto LABEL_126;
      }
      ret = PlayerAvatarComp::delAvatar(avatar_comp, *(_DWORD *)(v4 + 48), 1);
      if ( !ret )
        goto LABEL_125;
      common::milog::MiLogStream::create(
        (common::milog::MiLogStream *)(v4 + 416),
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/player/gm/player_gm_comp.cpp",
        "procAvatar",
        3641);
      v31 = common::milog::MiLogStream::operator<<<char [18],(char *[18])0>(
              (common::milog::MiLogStream *const)(v4 + 416),
              (const char (*)[18])"delAvatar fails, ");
      if ( *(_BYTE *)(((unsigned __int64)context >> 3) + 0x7FFF8000) )
        __asan_report_load8(context);
      common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v31, context->msg);
      common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v4 + 416));
      v3 = ret;
      goto LABEL_126;
    }
    v32 = std::vector<std::string>::operator[](param_vec, 0LL);
    if ( std::operator==<char>(v32, "CHANGE") )
    {
      *(_QWORD *)(v4 + 64) = 0LL;
      v33 = std::vector<std::string>::operator[](param_vec, 1uLL);
      if ( common::tools::StringUtils::strToNum<unsigned long>(v33, (unsigned __int64 *)(v4 + 64), 1) )
      {
        common::milog::MiLogStream::create(
          (common::milog::MiLogStream *)(v4 + 416),
          &common::milog::MiLogDefault::default_log_obj_,
          3u,
          "./src/player/gm/player_gm_comp.cpp",
          "procAvatar",
          3650);
        v34 = common::milog::MiLogStream::operator<<<char [15],(char *[15])0>(
                (common::milog::MiLogStream *const)(v4 + 416),
                (const char (*)[15])"invalid param:");
        common::milog::MiLogStream::operator<<<std::string>(v34, param_vec);
        common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v4 + 416));
        v3 = -1;
        goto LABEL_126;
      }
      std::string::basic_string(v4 + 288);
      if ( std::vector<std::string>::size(param_vec) > 2 )
      {
        v35 = std::vector<std::string>::operator[](param_vec, 2uLL);
        std::string::operator=(v4 + 288, v35);
      }
      if ( (unsigned __int64)std::numeric_limits<unsigned int>::max() >= *(_QWORD *)(v4 + 64) )
      {
        std::vector<unsigned long>::vector((std::vector<long unsigned int> *const)(v4 + 160));
        if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
          __asan_report_load8(&context->player);
        AvatarComp = Player::getAvatarComp(context->player);
        PlayerAvatarComp::getAllAvatarVec((std::vector<std::weak_ptr<Avatar>> *)(v4 + 224), AvatarComp);
        __for_range_0 = (std::vector<std::weak_ptr<Avatar>> *)(v4 + 224);
        __for_begin_0._M_current = std::vector<std::weak_ptr<Avatar>>::begin((std::vector<std::weak_ptr<Avatar>> *const)(v4 + 224))._M_current;
        __for_end_0._M_current = std::vector<std::weak_ptr<Avatar>>::end((std::vector<std::weak_ptr<Avatar>> *const)(v4 + 224))._M_current;
        while ( __gnu_cxx::operator!=<std::weak_ptr<Avatar> *,std::vector<std::weak_ptr<Avatar>>>(
                  &__for_begin_0,
                  &__for_end_0) )
        {
          v37 = __gnu_cxx::__normal_iterator<std::weak_ptr<Avatar> *,std::vector<std::weak_ptr<Avatar>>>::operator*(&__for_begin_0);
          std::weak_ptr<Avatar>::weak_ptr((std::weak_ptr<Avatar> *const)(v4 + 96), v37);
          std::weak_ptr<Avatar>::lock((const std::weak_ptr<Avatar> *const)(v4 + 128));
          if ( !std::operator==<Avatar>(0LL, (const std::shared_ptr<Avatar> *)(v4 + 128)) )
          {
            v38 = std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 128));
            if ( Avatar::getAvatarId(v38) == *(_QWORD *)(v4 + 64) )
            {
              v39 = std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 128));
              __for_end._M_current = (unsigned int *)Avatar::getGuid(v39);
              std::vector<unsigned long>::push_back(
                (std::vector<long unsigned int> *const)(v4 + 160),
                (std::vector<long unsigned int>::value_type *)&__for_end);
            }
          }
          std::shared_ptr<Avatar>::~shared_ptr((std::shared_ptr<Avatar> *const)(v4 + 128));
          std::weak_ptr<Avatar>::~weak_ptr((std::weak_ptr<Avatar> *const)(v4 + 96));
          __gnu_cxx::__normal_iterator<std::weak_ptr<Avatar> *,std::vector<std::weak_ptr<Avatar>>>::operator++(&__for_begin_0);
        }
        std::vector<std::weak_ptr<Avatar>>::~vector((std::vector<std::weak_ptr<Avatar>> *const)(v4 + 224));
        __g = common::tools::RandomUtils::getRandGenerator();
        M_current = std::vector<unsigned long>::end((std::vector<long unsigned int> *const)(v4 + 160))._M_current;
        v41._M_current = std::vector<unsigned long>::begin((std::vector<long unsigned int> *const)(v4 + 160))._M_current;
        std::shuffle<__gnu_cxx::__normal_iterator<unsigned long *,std::vector<unsigned long>>,std::mersenne_twister_engine<unsigned long,32ul,624ul,397ul,31ul,2567483615ul,11ul,4294967295ul,7ul,2636928640ul,15ul,4022730752ul,18ul,1812433253ul> &>(
          v41,
          (__gnu_cxx::__normal_iterator<long unsigned int*,std::vector<long unsigned int> >)M_current,
          __g);
        if ( std::vector<unsigned long>::empty((const std::vector<long unsigned int> *const)(v4 + 160)) )
        {
          std::to_string(&__rhs, *(_QWORD *)(v4 + 64));
          std::literals::string_literals::operator"" s[abi:cxx11](&__lhs, "avatar_id:", 0xAuLL);
          std::operator+<char>((std::string *)(v4 + 352), &__lhs, &__rhs);
          std::operator+<char>((std::string *)(v4 + 416), (std::string *)(v4 + 352), " not found");
          std::string::operator=(ret_msg, v4 + 416);
          std::string::~string((void *)(v4 + 416));
          std::string::~string((void *)(v4 + 352));
          std::string::~string(&__lhs);
          std::string::~string(&__rhs);
          ret = -1;
        }
        else
        {
          v42 = std::vector<unsigned long>::operator[]((std::vector<long unsigned int> *const)(v4 + 160), 0LL);
          if ( *(_BYTE *)(((unsigned __int64)v42 >> 3) + 0x7FFF8000) )
            __asan_report_load8(v42);
          ret = PlayerAvatarComp::changeCurAvatar(avatar_comp, *v42, 1);
        }
        std::vector<unsigned long>::~vector((std::vector<long unsigned int> *const)(v4 + 160));
      }
      else
      {
        ret = PlayerAvatarComp::changeCurAvatar(avatar_comp, *(_QWORD *)(v4 + 64), 1);
      }
      if ( ret )
      {
        common::milog::MiLogStream::create(
          (common::milog::MiLogStream *)(v4 + 416),
          &common::milog::MiLogDefault::default_log_obj_,
          3u,
          "./src/player/gm/player_gm_comp.cpp",
          "procAvatar",
          3690);
        v43 = common::milog::MiLogStream::operator<<<char [21],(char *[21])0>(
                (common::milog::MiLogStream *const)(v4 + 416),
                (const char (*)[21])"setCurAvatar fails, ");
        if ( *(_BYTE *)(((unsigned __int64)context >> 3) + 0x7FFF8000) )
          __asan_report_load8(context);
        common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v43, context->msg);
        common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v4 + 416));
        v3 = ret;
        v44 = 0;
      }
      else
      {
        v44 = 1;
      }
      std::string::~string((void *)(v4 + 288));
      if ( v44 == 1 )
        goto LABEL_125;
      goto LABEL_126;
    }
    v45 = std::vector<std::string>::operator[](param_vec, 0LL);
    if ( std::operator==<char>(v45, "ELEM") )
    {
      *(_DWORD *)(v4 + 48) = 0;
      v46 = std::vector<std::string>::operator[](param_vec, 1uLL);
      if ( common::tools::StringUtils::strToNum<int>(v46, (int *)(v4 + 48), 1) )
      {
        common::milog::MiLogStream::create(
          (common::milog::MiLogStream *)(v4 + 416),
          &common::milog::MiLogDefault::default_log_obj_,
          3u,
          "./src/player/gm/player_gm_comp.cpp",
          "procAvatar",
          3699);
        v47 = common::milog::MiLogStream::operator<<<char [15],(char *[15])0>(
                (common::milog::MiLogStream *const)(v4 + 416),
                (const char (*)[15])"invalid param:");
        common::milog::MiLogStream::operator<<<std::string>(v47, param_vec);
        common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v4 + 416));
        v3 = -1;
        goto LABEL_126;
      }
      PlayerAvatarComp::getCurAvatar((const PlayerAvatarComp *const)(v4 + 128));
      if ( std::operator==<Avatar>((const std::shared_ptr<Avatar> *)(v4 + 128), 0LL) )
      {
        common::milog::MiLogStream::create(
          (common::milog::MiLogStream *)(v4 + 416),
          &common::milog::MiLogDefault::default_log_obj_,
          3u,
          "./src/player/gm/player_gm_comp.cpp",
          "procAvatar",
          3705);
        v48 = common::milog::MiLogStream::operator<<<char [19],(char *[19])0>(
                (common::milog::MiLogStream *const)(v4 + 416),
                (const char (*)[19])"getCurAvatar fails");
        if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
          __asan_report_load8(&context->player);
        operator<<(v48, context->player);
        common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v4 + 416));
        v3 = -1;
        v49 = 0;
      }
      else
      {
        v50 = std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 128));
        if ( !Avatar::canChangeElement(v50) )
        {
          common::milog::MiLogStream::create(
            (common::milog::MiLogStream *)(v4 + 416),
            &common::milog::MiLogDefault::default_log_obj_,
            1u,
            "./src/player/gm/player_gm_comp.cpp",
            "procAvatar",
            3710);
          v51 = common::milog::MiLogStream::operator<<<char [28],(char *[28])0>(
                  (common::milog::MiLogStream *const)(v4 + 416),
                  (const char (*)[28])"avatar can't change element");
          v52 = std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::operator*((const std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 128));
          common::milog::MiLogStream::operator<<<Avatar,(Avatar*)0>(v51, v52);
          common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v4 + 416));
          v3 = 109;
          v49 = 0;
        }
        else
        {
          v53 = std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 128));
          ret = Avatar::changeElemType(v53, *(data::ElementType *)(v4 + 48));
          if ( ret )
          {
            common::milog::MiLogStream::create(
              (common::milog::MiLogStream *)(v4 + 416),
              &common::milog::MiLogDefault::default_log_obj_,
              3u,
              "./src/player/gm/player_gm_comp.cpp",
              "procAvatar",
              3716);
            v54 = common::milog::MiLogStream::operator<<<char [23],(char *[23])0>(
                    (common::milog::MiLogStream *const)(v4 + 416),
                    (const char (*)[23])"changeElemType fails, ");
            if ( *(_BYTE *)(((unsigned __int64)context >> 3) + 0x7FFF8000) )
              __asan_report_load8(context);
            common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v54, context->msg);
            common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v4 + 416));
            v3 = ret;
            v49 = 0;
          }
          else
          {
            v49 = 1;
          }
        }
      }
      std::shared_ptr<Avatar>::~shared_ptr((std::shared_ptr<Avatar> *const)(v4 + 128));
      if ( v49 == 1 )
        goto LABEL_125;
      goto LABEL_126;
    }
    v55 = std::vector<std::string>::operator[](param_vec, 0LL);
    if ( std::operator==<char>(v55, "LOCK_SLOT") )
    {
      if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
        __asan_report_load8(&context->player);
      Player::getSceneComp(context->player);
      PlayerSceneComp::getCurWorld<PlayerWorld>((const PlayerSceneComp *const)(v4 + 96));
      if ( std::operator==<PlayerWorld>((const std::shared_ptr<PlayerWorld> *)(v4 + 96), 0LL) )
      {
        common::milog::MiLogStream::create(
          (common::milog::MiLogStream *)(v4 + 416),
          &common::milog::MiLogDefault::default_log_obj_,
          1u,
          "./src/player/gm/player_gm_comp.cpp",
          "procAvatar",
          3725);
        common::milog::MiLogStream::operator<<<char [23],(char *[23])0>(
          (common::milog::MiLogStream *const)(v4 + 416),
          (const char (*)[23])" cur_world_ptr is null");
        common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v4 + 416));
        v3 = -1;
LABEL_100:
        std::shared_ptr<PlayerWorld>::~shared_ptr((std::shared_ptr<PlayerWorld> *const)(v4 + 96));
        goto LABEL_126;
      }
      std::__shared_ptr_access<PlayerWorld,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<PlayerWorld,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 96));
      World::getSceneTeam((World *const)(v4 + 128));
      if ( std::operator==<SceneTeam>((const std::shared_ptr<SceneTeam> *)(v4 + 128), 0LL) )
      {
        common::milog::MiLogStream::create(
          (common::milog::MiLogStream *)(v4 + 416),
          &common::milog::MiLogDefault::default_log_obj_,
          3u,
          "./src/player/gm/player_gm_comp.cpp",
          "procAvatar",
          3731);
        common::milog::MiLogStream::operator<<<char [24],(char *[24])0>(
          (common::milog::MiLogStream *const)(v4 + 416),
          (const char (*)[24])"scene_team_ptr nullptr ");
        common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v4 + 416));
        v3 = -1;
      }
      else
      {
        v56 = std::__shared_ptr_access<SceneTeam,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<SceneTeam,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 128));
        SceneTeam::setInSingeAvatarMode(v56, 1);
        v3 = 0;
      }
    }
    else
    {
      v57 = std::vector<std::string>::operator[](param_vec, 0LL);
      if ( !std::operator==<char>(v57, "UNLOCK_SLOT") )
      {
        v59 = std::vector<std::string>::operator[](param_vec, 0LL);
        if ( std::operator==<char>(v59, "ADD_TRIAL_AVATARS") )
        {
          std::vector<unsigned int>::vector((std::vector<unsigned int> *const)(v4 + 160));
          std::allocator<char>::allocator(&__a);
          std::string::basic_string<std::allocator<char>>((std::string *const)(v4 + 416), ",", &__a);
          v60 = std::vector<std::string>::operator[](param_vec, 1uLL);
          v61 = common::tools::StringUtils::splitToList<unsigned int>(
                  v60,
                  (const std::string *)(v4 + 416),
                  (std::vector<unsigned int> *)(v4 + 160),
                  1) != 0;
          std::string::~string((void *)(v4 + 416));
          std::allocator<char>::~allocator(&__a);
          if ( v61 )
          {
            common::milog::MiLogStream::create(
              (common::milog::MiLogStream *)(v4 + 416),
              &common::milog::MiLogDefault::default_log_obj_,
              3u,
              "./src/player/gm/player_gm_comp.cpp",
              "procAvatar",
              3759);
            v62 = common::milog::MiLogStream::operator<<<char [15],(char *[15])0>(
                    (common::milog::MiLogStream *const)(v4 + 416),
                    (const char (*)[15])"invalid param:");
            common::milog::MiLogStream::operator<<<std::string>(v62, param_vec);
            common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v4 + 416));
            v3 = -1;
          }
          else
          {
            proto::TrialAvatarGrantRecord::TrialAvatarGrantRecord((proto::TrialAvatarGrantRecord *const)(v4 + 416));
            proto::TrialAvatarGrantRecord::set_grant_reason((proto::TrialAvatarGrantRecord *const)(v4 + 416), 1u);
            std::vector<unsigned int>::vector(
              (std::vector<unsigned int> *const)(v4 + 224),
              (const std::vector<unsigned int> *)(v4 + 160));
            v3 = PlayerAvatarComp::setUpTrialAvatarVecInTeamAndLockTeam(
                   avatar_comp,
                   (std::vector<unsigned int> *)(v4 + 224),
                   (const proto::TrialAvatarGrantRecord *)(v4 + 416),
                   1);
            std::vector<unsigned int>::~vector((std::vector<unsigned int> *const)(v4 + 224));
            proto::TrialAvatarGrantRecord::~TrialAvatarGrantRecord((proto::TrialAvatarGrantRecord *const)(v4 + 416));
          }
          std::vector<unsigned int>::~vector((std::vector<unsigned int> *const)(v4 + 160));
        }
        else
        {
          v63 = std::vector<std::string>::operator[](param_vec, 0LL);
          if ( std::operator==<char>(v63, "ADD_TRIAL_AVATAR") )
          {
            *(_DWORD *)(v4 + 48) = 0;
            v64 = std::vector<std::string>::operator[](param_vec, 1uLL);
            if ( common::tools::StringUtils::strToNum<unsigned int>(v64, (unsigned int *)(v4 + 48), 1) )
            {
              common::milog::MiLogStream::create(
                (common::milog::MiLogStream *)(v4 + 416),
                &common::milog::MiLogDefault::default_log_obj_,
                3u,
                "./src/player/gm/player_gm_comp.cpp",
                "procAvatar",
                3771);
              v65 = common::milog::MiLogStream::operator<<<char [15],(char *[15])0>(
                      (common::milog::MiLogStream *const)(v4 + 416),
                      (const char (*)[15])"invalid param:");
              common::milog::MiLogStream::operator<<<std::string>(v65, param_vec);
              common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v4 + 416));
              v3 = -1;
            }
            else
            {
              proto::TrialAvatarGrantRecord::TrialAvatarGrantRecord((proto::TrialAvatarGrantRecord *const)(v4 + 416));
              proto::TrialAvatarGrantRecord::set_grant_reason((proto::TrialAvatarGrantRecord *const)(v4 + 416), 9u);
              v3 = PlayerAvatarComp::setUpTrialAvatarInTeam(
                     avatar_comp,
                     *(_DWORD *)(v4 + 48),
                     (const proto::TrialAvatarGrantRecord *)(v4 + 416),
                     0,
                     1);
              proto::TrialAvatarGrantRecord::~TrialAvatarGrantRecord((proto::TrialAvatarGrantRecord *const)(v4 + 416));
            }
          }
          else
          {
            v66 = std::vector<std::string>::operator[](param_vec, 0LL);
            if ( std::operator==<char>(v66, "DEL_TRIAL_AVATAR") )
            {
              *(_DWORD *)(v4 + 48) = 0;
              v67 = std::vector<std::string>::operator[](param_vec, 1uLL);
              if ( common::tools::StringUtils::strToNum<unsigned int>(v67, (unsigned int *)(v4 + 48), 1) )
              {
                common::milog::MiLogStream::create(
                  (common::milog::MiLogStream *)(v4 + 416),
                  &common::milog::MiLogDefault::default_log_obj_,
                  3u,
                  "./src/player/gm/player_gm_comp.cpp",
                  "procAvatar",
                  3783);
                v68 = common::milog::MiLogStream::operator<<<char [15],(char *[15])0>(
                        (common::milog::MiLogStream *const)(v4 + 416),
                        (const char (*)[15])"invalid param:");
                common::milog::MiLogStream::operator<<<std::string>(v68, param_vec);
                common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v4 + 416));
                v3 = -1;
              }
              else
              {
                v3 = PlayerAvatarComp::delTrialAvatar(avatar_comp, *(_DWORD *)(v4 + 48), 1);
              }
            }
            else
            {
              v69 = std::vector<std::string>::operator[](param_vec, 0LL);
              if ( std::operator==<char>(v69, "SORT") )
              {
                common::tools::StringStream<common::tools::FixedBuffer<4096>>::StringStream((common::tools::StringStream<common::tools::FixedBuffer<4096> > *const)(v4 + 128));
                std::function<ForeachPolicy ()(FormalAvatar const&)>::function<procAvatar(GmContext &,std::vector<std::string> const&,std::string&)::{lambda(FormalAvatar const&)#1},void,void>(
                  (std::function<ForeachPolicy(const FormalAvatar&)> *const)(v4 + 416),
                  (procAvatar::<lambda(const FormalAvatar&)>)(v4 + 128));
                PlayerAvatarComp::foreachFormalAvatarByLevelSort(
                  avatar_comp,
                  (std::function<ForeachPolicy(const FormalAvatar&)> *)(v4 + 416));
                std::function<ForeachPolicy ()(FormalAvatar const&)>::~function((std::function<ForeachPolicy(const FormalAvatar&)> *const)(v4 + 416));
                common::tools::StringStream<common::tools::FixedBuffer<4096>>::str[abi:cxx11](
                  (std::string *)(v4 + 416),
                  (common::tools::StringStream<common::tools::FixedBuffer<4096> > *const)(v4 + 128));
                std::string::operator=(ret_msg, v4 + 416);
                std::string::~string((void *)(v4 + 416));
                common::milog::MiLogStream::create(
                  (common::milog::MiLogStream *)(v4 + 416),
                  &common::milog::MiLogDefault::default_log_obj_,
                  1u,
                  "./src/player/gm/player_gm_comp.cpp",
                  "procAvatar",
                  3797);
                v70 = common::milog::MiLogStream::operator<<<char [14],(char *[14])0>(
                        (common::milog::MiLogStream *const)(v4 + 416),
                        (const char (*)[14])"avatar sort: ");
                common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v70, ret_msg);
                common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v4 + 416));
                v3 = 0;
                common::tools::StringStream<common::tools::FixedBuffer<4096>>::~StringStream((common::tools::StringStream<common::tools::FixedBuffer<4096> > *const)(v4 + 128));
              }
              else
              {
                common::milog::MiLogStream::create(
                  (common::milog::MiLogStream *)(v4 + 416),
                  &common::milog::MiLogDefault::default_log_obj_,
                  3u,
                  "./src/player/gm/player_gm_comp.cpp",
                  "procAvatar",
                  3802);
                v71 = common::milog::MiLogStream::operator<<<char [15],(char *[15])0>(
                        (common::milog::MiLogStream *const)(v4 + 416),
                        (const char (*)[15])"unknown param:");
                common::milog::MiLogStream::operator<<<std::string>(v71, param_vec);
                common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v4 + 416));
                v3 = -1;
              }
            }
          }
        }
        goto LABEL_126;
      }
      if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
        __asan_report_load8(&context->player);
      Player::getSceneComp(context->player);
      PlayerSceneComp::getCurWorld<PlayerWorld>((const PlayerSceneComp *const)(v4 + 96));
      if ( std::operator==<PlayerWorld>((const std::shared_ptr<PlayerWorld> *)(v4 + 96), 0LL) )
      {
        common::milog::MiLogStream::create(
          (common::milog::MiLogStream *)(v4 + 416),
          &common::milog::MiLogDefault::default_log_obj_,
          1u,
          "./src/player/gm/player_gm_comp.cpp",
          "procAvatar",
          3742);
        common::milog::MiLogStream::operator<<<char [23],(char *[23])0>(
          (common::milog::MiLogStream *const)(v4 + 416),
          (const char (*)[23])" cur_world_ptr is null");
        common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v4 + 416));
        v3 = -1;
        goto LABEL_100;
      }
      std::__shared_ptr_access<PlayerWorld,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<PlayerWorld,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 96));
      World::getSceneTeam((World *const)(v4 + 128));
      if ( std::operator==<SceneTeam>((const std::shared_ptr<SceneTeam> *)(v4 + 128), 0LL) )
      {
        common::milog::MiLogStream::create(
          (common::milog::MiLogStream *)(v4 + 416),
          &common::milog::MiLogDefault::default_log_obj_,
          3u,
          "./src/player/gm/player_gm_comp.cpp",
          "procAvatar",
          3748);
        common::milog::MiLogStream::operator<<<char [24],(char *[24])0>(
          (common::milog::MiLogStream *const)(v4 + 416),
          (const char (*)[24])"scene_team_ptr nullptr ");
        common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v4 + 416));
        v3 = -1;
      }
      else
      {
        v58 = std::__shared_ptr_access<SceneTeam,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<SceneTeam,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 128));
        SceneTeam::setInSingeAvatarMode(v58, 0);
        v3 = 0;
      }
    }
    std::shared_ptr<SceneTeam>::~shared_ptr((std::shared_ptr<SceneTeam> *const)(v4 + 128));
    goto LABEL_100;
  }
  *(_DWORD *)(v4 + 48) = 0;
  v8 = std::vector<std::string>::operator[](param_vec, 1uLL);
  if ( common::tools::StringUtils::strToNum<unsigned int>(v8, (unsigned int *)(v4 + 48), 1) )
  {
    common::milog::MiLogStream::create(
      (common::milog::MiLogStream *)(v4 + 416),
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/player/gm/player_gm_comp.cpp",
      "procAvatar",
      3578);
    v9 = common::milog::MiLogStream::operator<<<char [15],(char *[15])0>(
           (common::milog::MiLogStream *const)(v4 + 416),
           (const char (*)[15])"invalid param:");
    common::milog::MiLogStream::operator<<<std::string>(v9, param_vec);
    common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v4 + 416));
    v3 = -1;
    goto LABEL_126;
  }
  ServiceBox::findService<GameserverService>();
  GameserverService::getConfig((GameserverService *const)(v4 + 128));
  v10 = std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 128));
  v11 = data::TrialAvatarExcelConfigMgrBase::findTrialAvatarExcelConfig(
          &v10->design_config.txt_config_mgr.trial_avatar_config_mgr,
          *(_DWORD *)(v4 + 48)) != 0LL;
  std::shared_ptr<Config>::~shared_ptr((std::shared_ptr<Config> *const)(v4 + 128));
  if ( v11 )
  {
    proto::TrialAvatarGrantRecord::TrialAvatarGrantRecord((proto::TrialAvatarGrantRecord *const)(v4 + 352));
    proto::TrialAvatarGrantRecord::set_grant_reason((proto::TrialAvatarGrantRecord *const)(v4 + 352), 1u);
    PlayerAvatarComp::grantTrialAvatar(
      (PlayerAvatarComp *const)(v4 + 128),
      (uint32_t)avatar_comp,
      (const proto::TrialAvatarGrantRecord *)*(unsigned int *)(v4 + 48),
      v4 + 96);
    v12 = std::operator==<TrialAvatar>(0LL, (const std::shared_ptr<TrialAvatar> *)(v4 + 128));
    std::shared_ptr<TrialAvatar>::~shared_ptr((std::shared_ptr<TrialAvatar> *const)(v4 + 128));
    if ( v12 )
    {
      common::milog::MiLogStream::create(
        (common::milog::MiLogStream *)(v4 + 416),
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/player/gm/player_gm_comp.cpp",
        "procAvatar",
        3587);
      common::milog::MiLogStream::operator<<<char [23],(char *[23])0>(
        (common::milog::MiLogStream *const)(v4 + 416),
        (const char (*)[23])off_26356D40);
      common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v4 + 416));
      v3 = -1;
      v13 = 0;
    }
    else
    {
      v13 = 1;
    }
    proto::TrialAvatarGrantRecord::~TrialAvatarGrantRecord((proto::TrialAvatarGrantRecord *const)(v4 + 352));
    if ( v13 == 1 )
      goto LABEL_125;
  }
  else
  {
    PlayerAvatarComp::addFormalAvatar((PlayerAvatarComp *const)(v4 + 128), avatar_comp, *(_DWORD *)(v4 + 48), 1u, 3u, 0);
    v14 = std::operator==<FormalAvatar>(0LL, (const std::shared_ptr<FormalAvatar> *)(v4 + 128));
    std::shared_ptr<FormalAvatar>::~shared_ptr((std::shared_ptr<FormalAvatar> *const)(v4 + 128));
    if ( !v14 )
    {
LABEL_125:
      v3 = 0;
      goto LABEL_126;
    }
    common::milog::MiLogStream::create(
      (common::milog::MiLogStream *)(v4 + 416),
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/player/gm/player_gm_comp.cpp",
      "procAvatar",
      3595);
    v15 = common::milog::MiLogStream::operator<<<char [24],(char *[24])0>(
            (common::milog::MiLogStream *const)(v4 + 416),
            (const char (*)[24])"addFormalAvatar fails, ");
    if ( *(_BYTE *)(((unsigned __int64)context >> 3) + 0x7FFF8000) )
      __asan_report_load8(context);
    common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v15, context->msg);
    common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v4 + 416));
    v3 = -1;
  }
LABEL_126:
  result = v3;
  if ( v86 == (char *)v4 )
  {
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8008) = 0LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8010) = 0LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8018) = 0LL;
    *(_DWORD *)((v4 >> 3) + 0x7FFF8020) = 0;
    *(_DWORD *)((v4 >> 3) + 0x7FFF8028) = 0;
    *(_DWORD *)((v4 >> 3) + 0x7FFF8030) = 0;
    *(_DWORD *)((v4 >> 3) + 0x7FFF8038) = 0;
  }
  else
  {
    *(_QWORD *)v4 = 1172321806LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8020) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8028) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8030) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v4 >> 3) + 0x7FFF8038) = -168430091;
  }
  return result;
};

// Line 3791: range 0000000017BDB4F2-0000000017BDB55B
ForeachPolicy __cdecl procAvatar(GmContext &,std::vector<std::string> const&,std::string&)::{lambda(FormalAvatar const&)#1}::operator()(
        const procAvatar::<lambda(const FormalAvatar&)> *const __closure,
        const FormalAvatar *formal_avatar)
{
  common::tools::StringStream<common::tools::FixedBuffer<4096> > *oss; // rbx
  unsigned int AvatarId; // eax
  common::tools::StringStream<common::tools::FixedBuffer<4096> > *v4; // rax

  if ( *(_BYTE *)(((unsigned __int64)__closure >> 3) + 0x7FFF8000) )
    __asan_report_load8(__closure);
  oss = __closure->__oss;
  AvatarId = Avatar::getAvatarId(formal_avatar);
  v4 = common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(oss, AvatarId);
  common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(v4, "\n");
  return 0;
};

// Line 3808: range 0000000017D73668-0000000017D7370A
void __cdecl reviveAllRegister::reviveAllRegister(reviveAllRegister *const this)
{
  std::function<int(GmContext&,const std::vector<std::string>&,std::string&)> *v1; // rax
  std::allocator<char> __a; // [rsp+1Fh] [rbp-31h] BYREF
  std::string __k; // [rsp+20h] [rbp-30h] BYREF

  std::allocator<char>::allocator(&__a);
  std::string::basic_string<std::allocator<char>>(&__k, "REVIVE", &__a);
  v1 = std::unordered_map<std::string,std::function<int ()(GmContext &,std::vector<std::string> const&,std::string&)>>::operator[](
         &GmUtils::op_func_map[abi:cxx11],
         &__k);
  std::function<int ()(GmContext &,std::vector<std::string> const&,std::string&)>::operator=<int (&)(GmContext &,std::vector<std::string> const&,std::string&)>(
    v1,
    (int (*)(GmContext *, const std::vector<std::string> *, std::string *))reviveAll);
  std::string::~string(&__k);
  std::allocator<char>::~allocator(&__a);
};

// Line 3809: range 0000000017BDD74F-0000000017BDDC94
int32_t __cdecl reviveAll(GmContext *context, const std::vector<std::string> *param_vec, std::string *ret_msg)
{
  __m128i v3; // xmm0
  unsigned __int64 v4; // r13
  __int64 v5; // rax
  _DWORD *v6; // r12
  PlayerAvatarComp *AvatarComp; // rax
  int32_t v8; // r14d
  __gnu_cxx::__normal_iterator<long unsigned int*,std::vector<long unsigned int> >::reference v9; // rax
  PlayerAvatarComp *v10; // rax
  common::milog::MiLogStream *v11; // rax
  PlayerAvatarComp *v12; // rax
  Avatar *v13; // rax
  std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v14; // rax
  std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v15; // r14
  PlayerAvatarComp *v16; // r14
  std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v17; // rax
  uint64_t Guid; // rax
  int32_t result; // eax
  std::vector<long unsigned int>::iterator __for_begin; // [rsp+30h] [rbp-140h] BYREF
  std::vector<long unsigned int>::iterator __for_end; // [rsp+38h] [rbp-138h] BYREF
  Player *player; // [rsp+40h] [rbp-130h]
  std::vector<long unsigned int> *__for_range; // [rsp+48h] [rbp-128h]
  std::shared_ptr<FightPropNtfParam> p_param_ptr; // [rsp+50h] [rbp-120h] BYREF
  common::milog::MiLogStream v25; // [rsp+60h] [rbp-110h] BYREF
  char v26[240]; // [rsp+80h] [rbp-F0h] BYREF

  v4 = (unsigned __int64)v26;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v5 = __asan_stack_malloc_2(192LL);
    if ( v5 )
      v4 = v5;
  }
  *(_QWORD *)v4 = 1102416563LL;
  *(_QWORD *)(v4 + 8) = "4 32 8 16 avatar_guid:3818 64 16 19 cur_avatar_ptr:3812 96 16 15 avatar_ptr:3820 128 24 13 cur_team:3811";
  *(_QWORD *)(v4 + 16) = reviveAll;
  v6 = (_DWORD *)(v4 >> 3);
  v6[536862720] = -235802127;
  v6[536862721] = -218959360;
  v6[536862722] = -219021312;
  v6[536862723] = -219021312;
  v6[536862724] = -218103808;
  v6[536862725] = -202116109;
  if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
    *(double *)v3.m128i_i64 = __asan_report_load8(&context->player);
  player = context->player;
  AvatarComp = Player::getAvatarComp(player);
  PlayerAvatarComp::getMyAvatarTeamInSceneTeam((std::vector<long unsigned int> *)(v4 + 128), AvatarComp);
  Player::getAvatarComp(player);
  PlayerAvatarComp::getCurAvatar((const PlayerAvatarComp *const)(v4 + 64));
  if ( std::operator==<Avatar>(0LL, (const std::shared_ptr<Avatar> *)(v4 + 64)) )
  {
    common::milog::MiLogStream::create(
      &v25,
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/player/gm/player_gm_comp.cpp",
      "reviveAll",
      3815);
    common::milog::MiLogStream::operator<<<char [23],(char *[23])0>(&v25, (const char (*)[23])"cur_avatar_ptr is null");
    common::milog::MiLogStream::~MiLogStream(&v25);
    v8 = -1;
  }
  else
  {
    __for_range = (std::vector<long unsigned int> *)(v4 + 128);
    __for_begin._M_current = std::vector<unsigned long>::begin((std::vector<long unsigned int> *const)(v4 + 128))._M_current;
    __for_end._M_current = std::vector<unsigned long>::end((std::vector<long unsigned int> *const)(v4 + 128))._M_current;
    while ( __gnu_cxx::operator!=<unsigned long *,std::vector<unsigned long>>(&__for_begin, &__for_end) )
    {
      v9 = __gnu_cxx::__normal_iterator<unsigned long *,std::vector<unsigned long>>::operator*(&__for_begin);
      if ( *(_BYTE *)(((unsigned __int64)v9 >> 3) + 0x7FFF8000) )
        *(double *)v3.m128i_i64 = __asan_report_load8(v9);
      *(_QWORD *)(v4 + 32) = *v9;
      v10 = Player::getAvatarComp(player);
      PlayerAvatarComp::findAvatar((const PlayerAvatarComp *const)(v4 + 96), (uint64_t)v10, *(_QWORD *)(v4 + 32));
      if ( std::operator==<Avatar>(0LL, (const std::shared_ptr<Avatar> *)(v4 + 96)) )
      {
        common::milog::MiLogStream::create(
          &v25,
          &common::milog::MiLogDefault::default_log_obj_,
          3u,
          "./src/player/gm/player_gm_comp.cpp",
          "reviveAll",
          3823);
        v11 = common::milog::MiLogStream::operator<<<char [32],(char *[32])0>(
                &v25,
                (const char (*)[32])"avatar_ptr is null, avatar_guid");
        common::milog::MiLogStream::operator<<<unsigned long,(unsigned long *)0>(
          v11,
          (const unsigned __int64 *)(v4 + 32));
        common::milog::MiLogStream::~MiLogStream(&v25);
      }
      else
      {
        v12 = Player::getAvatarComp(player);
        PlayerAvatarComp::changeCurAvatar(v12, *(_QWORD *)(v4 + 32), 1);
        v13 = std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 96));
        Avatar::setLifeAlive(v13, 0x6Eu, 0LL, 1);
        v14 = std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 96));
        *(float *)v3.m128i_i32 = Creature::getMaxHp(v14);
        v15 = std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 96));
        std::shared_ptr<FightPropNtfParam>::shared_ptr(&p_param_ptr, 0LL);
        v3 = _mm_cvtsi32_si128(_mm_cvtsi128_si32(v3));
        Creature::changeCurHp(v15, *(float *)v3.m128i_i32, CHANGE_HP_ADD_GM, 1, &p_param_ptr);
        std::shared_ptr<FightPropNtfParam>::~shared_ptr(&p_param_ptr);
      }
      std::shared_ptr<Avatar>::~shared_ptr((std::shared_ptr<Avatar> *const)(v4 + 96));
      __gnu_cxx::__normal_iterator<unsigned long *,std::vector<unsigned long>>::operator++(&__for_begin);
    }
    v16 = Player::getAvatarComp(player);
    v17 = std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 64));
    Guid = Avatar::getGuid(v17);
    PlayerAvatarComp::changeCurAvatar(v16, Guid, 1);
    v8 = 0;
  }
  std::shared_ptr<Avatar>::~shared_ptr((std::shared_ptr<Avatar> *const)(v4 + 64));
  std::vector<unsigned long>::~vector((std::vector<long unsigned int> *const)(v4 + 128));
  result = v8;
  if ( v26 == (char *)v4 )
  {
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8008) = 0LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8010) = 0LL;
  }
  else
  {
    *(_QWORD *)v4 = 1172321806LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 3835: range 0000000017D7370C-0000000017D737AE
void __cdecl addItemRegister::addItemRegister(addItemRegister *const this)
{
  std::function<int(GmContext&,const std::vector<std::string>&,std::string&)> *v1; // rax
  std::allocator<char> __a; // [rsp+1Fh] [rbp-31h] BYREF
  std::string __k; // [rsp+20h] [rbp-30h] BYREF

  std::allocator<char>::allocator(&__a);
  std::string::basic_string<std::allocator<char>>(&__k, "ITEM", &__a);
  v1 = std::unordered_map<std::string,std::function<int ()(GmContext &,std::vector<std::string> const&,std::string&)>>::operator[](
         &GmUtils::op_func_map[abi:cxx11],
         &__k);
  std::function<int ()(GmContext &,std::vector<std::string> const&,std::string&)>::operator=<int (&)(GmContext &,std::vector<std::string> const&,std::string&)>(
    v1,
    (int (*)(GmContext *, const std::vector<std::string> *, std::string *))addItem);
  std::string::~string(&__k);
  std::allocator<char>::~allocator(&__a);
};

// Line 3836: range 0000000017BDDC95-0000000017BE1EA2
int32_t __cdecl addItem(GmContext *context, const std::vector<std::string> *param_vec, std::string *ret_msg)
{
  int32_t v3; // r13d
  unsigned __int64 v4; // r14
  __int64 v5; // rax
  _DWORD *v6; // r12
  const std::string *v7; // rax
  const std::string *v8; // rax
  const std::string *v9; // rax
  const std::string *v10; // rax
  const std::string *v12; // rax
  const std::string *v13; // rax
  const std::string *v15; // rax
  std::tuple_element<1,const std::pair<unsigned int const,data::ItemConfig*> >::type *v16; // rax
  std::tuple_element<1,const std::pair<unsigned int const,data::ItemConfig*> >::type v17; // rdx
  char v18; // cl
  const std::string *v19; // rax
  PlayerItemComp *ItemComp; // rcx
  char v21; // al
  const std::string *v22; // rax
  std::tuple_element<1,const std::pair<unsigned int const,data::ItemConfig*> >::type v23; // rdx
  char v24; // cl
  char v25; // al
  const std::string *v26; // rax
  std::tuple_element<1,const std::pair<unsigned int const,data::ItemConfig*> >::type v27; // rdx
  char v28; // cl
  char v29; // al
  MaterialExcelConfigMgr *p_material_config_mgr; // rcx
  std::tuple_element<1,const std::pair<unsigned int const,data::ItemConfig*> >::type v31; // rdx
  char v32; // cl
  std::tuple_element<1,const std::pair<unsigned int const,data::ItemConfig*> >::type v33; // rdx
  char v34; // cl
  PlayerItemComp *v35; // rax
  const std::string *v36; // rax
  std::vector<data::ItemUseConfig>::const_reference v37; // rax
  char v38; // al
  std::vector<data::ItemUseConfig>::const_reference v39; // rax
  const unsigned int *v40; // r8
  std::_Rb_tree_iterator<std::pair<unsigned int const,unsigned int> >::pointer v41; // rax
  std::tuple_element<0,const std::pair<unsigned int const,data::MaterialExcelConfig> >::type *v42; // rsi
  unsigned int *v43; // rax
  unsigned int *v44; // rdx
  unsigned int v45; // r13d
  std::_Rb_tree_iterator<std::pair<unsigned int const,unsigned int> >::pointer v46; // rdx
  char v47; // cl
  std::map<unsigned int,unsigned int>::size_type v48; // rax
  std::_Rb_tree_iterator<std::pair<unsigned int const,unsigned int> >::reference v49; // rax
  _QWORD *v50; // rdx
  std::tuple_element<1,std::pair<unsigned int const,unsigned int> >::type *v51; // rax
  PlayerItemComp *v52; // rax
  const std::string *v53; // rax
  std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v54; // rax
  std::vector<ItemParam>::size_type v55; // rax
  const std::pair<unsigned int const,data::WeaponExcelConfig> *v56; // rax
  const std::string *v57; // rax
  const std::string *v58; // rax
  common::milog::MiLogStream *v59; // rdx
  PlayerItemComp *v60; // rax
  common::milog::MiLogStream *v61; // rax
  common::milog::MiLogStream *v62; // rax
  common::milog::MiLogStream *v63; // rax
  PlayerItemComp *v64; // rax
  size_t v65; // rax
  const std::string *v66; // rax
  const std::string *v67; // rax
  std::string *M_current; // r13
  std::vector<std::string>::iterator v69; // rax
  unsigned __int64 v70; // rax
  data::ItemConfig *v71; // rdx
  std::tuple_element<1,std::pair<unsigned int const,data::ItemConfig*> >::type *v72; // rax
  PlayerItemComp *v74; // rax
  const std::string *v75; // rax
  const std::string *v76; // rax
  bool v77; // r13
  size_t v78; // rax
  std::vector<unsigned int>::reference v79; // rax
  _DWORD *v80; // rdx
  std::vector<unsigned int>::reference v81; // rax
  _DWORD *v82; // rdx
  PlayerItemComp *v83; // rax
  const std::string *v84; // rax
  const std::string *v85; // rax
  const std::string *v86; // rax
  const std::string *v87; // rax
  const std::string *v88; // rax
  uint32_t v89; // eax
  int v90; // r15d
  PlayerItemComp *v91; // r15
  std::__shared_ptr_access<Material,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v92; // rax
  uint64_t Guid; // rax
  PlayerItemComp *v94; // r15
  std::__shared_ptr_access<Material,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v95; // rax
  uint64_t v96; // rax
  const std::string *v97; // rax
  const std::string *v98; // rax
  const std::string *v99; // rax
  const std::string *v101; // rax
  const std::string *v102; // rax
  const std::string *v103; // rax
  const std::string *v105; // rax
  const std::string *v106; // rax
  common::milog::MiLogStream *v107; // rdx
  int v108; // r15d
  PlayerItemComp *v109; // rax
  const std::string *v110; // rax
  PlayerGmComp *GmComp; // rax
  PlayerItemComp *v112; // rax
  PlayerWidgetComp *WidgetComp; // rax
  const std::string *v114; // rax
  PlayerGmComp *v115; // rax
  const std::string *v116; // rax
  const std::string *v117; // rax
  const std::string *v118; // rax
  PlayerItemComp *v119; // rax
  common::milog::MiLogStream *v120; // rax
  common::milog::MiLogStream *v121; // rax
  common::milog::MiLogStream *v122; // rax
  PlayerItemComp *v123; // rax
  const std::string *v124; // rax
  const std::string *v125; // rax
  bool v126; // r13
  const std::string *v127; // rax
  PlayerItemComp *v128; // r13
  const std::string *v129; // rax
  const std::string *v130; // rax
  PlayerItemComp *v131; // rax
  const std::string *v132; // rax
  const std::string *v133; // rax
  bool v134; // r13
  size_t v135; // rax
  std::vector<unsigned int>::reference v136; // rax
  _DWORD *v137; // rdx
  std::vector<unsigned int>::reference v138; // rax
  _DWORD *v139; // rdx
  PlayerItemComp *v140; // rax
  const std::string *v141; // rax
  const std::string *v142; // rax
  const std::string *v143; // rax
  std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v144; // rax
  PlayerItemComp *v145; // rax
  const std::string *v146; // rax
  std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v147; // rax
  PlayerItemComp *v148; // rax
  PlayerItemComp *v149; // rax
  common::milog::MiLogStream *v150; // rax
  common::milog::MiLogStream *v151; // rax
  common::milog::MiLogStream *v152; // rax
  const std::string *v153; // rax
  const std::string *v154; // rax
  common::milog::MiLogStream *v155; // rdx
  const std::string *v156; // rax
  common::milog::MiLogStream *v157; // rdx
  int v158; // r15d
  char *v159; // rsi
  unsigned int *v160; // rax
  _DWORD *v161; // rdx
  char v162; // cl
  common::milog::MiLogStream *v163; // rcx
  int v164; // r15d
  common::minet::Packet *v165; // r15
  uint32_t Uid; // eax
  GameserverService *v167; // r15
  common::minet::PacketPtr v168; // rdi
  int32_t result; // eax
  std::allocator<char> v171; // [rsp+2Eh] [rbp-572h] BYREF
  std::allocator<char> __a; // [rsp+2Fh] [rbp-571h] BYREF
  uint32_t idx_0; // [rsp+30h] [rbp-570h]
  uint32_t reliquary_item_limit; // [rsp+34h] [rbp-56Ch]
  uint32_t have_reliquary_num; // [rsp+38h] [rbp-568h]
  uint32_t weapon_item_limit; // [rsp+3Ch] [rbp-564h]
  uint32_t have_weapon_num; // [rsp+40h] [rbp-560h]
  int32_t ret_1; // [rsp+44h] [rbp-55Ch]
  int32_t ret_0; // [rsp+48h] [rbp-558h]
  int32_t ret; // [rsp+4Ch] [rbp-554h]
  std::map<unsigned int,unsigned int>::iterator __for_begin; // [rsp+50h] [rbp-550h] BYREF
  std::unordered_map<unsigned int,data::WeaponExcelConfig>::const_iterator __for_begin_0; // [rsp+58h] [rbp-548h] BYREF
  size_t i; // [rsp+60h] [rbp-540h]
  size_t idx; // [rsp+68h] [rbp-538h]
  size_t idx_1; // [rsp+70h] [rbp-530h]
  google::protobuf::Map<unsigned int,unsigned int> *test_map; // [rsp+78h] [rbp-528h]
  const std::unordered_map<unsigned int,data::ItemConfig*> *__for_range_3; // [rsp+80h] [rbp-520h]
  std::tuple_element<0,std::pair<unsigned int const,data::ItemConfig*> >::type *item_id_3; // [rsp+88h] [rbp-518h]
  std::tuple_element<1,std::pair<unsigned int const,data::ItemConfig*> >::type *item_config_ptr_0; // [rsp+90h] [rbp-510h]
  const std::unordered_map<unsigned int,data::WeaponExcelConfig> *__for_range_2; // [rsp+98h] [rbp-508h]
  std::tuple_element<0,std::pair<unsigned int const,data::WeaponExcelConfig> >::type *item_id_2; // [rsp+A0h] [rbp-500h]
  std::tuple_element<1,std::pair<unsigned int const,data::WeaponExcelConfig> >::type *__0; // [rsp+A8h] [rbp-4F8h]
  const std::unordered_map<unsigned int,data::MaterialExcelConfig> *__for_range_0; // [rsp+B0h] [rbp-4F0h]
  std::map<unsigned int,unsigned int> *__for_range_1; // [rsp+B8h] [rbp-4E8h]
  std::tuple_element<0,std::pair<unsigned int const,unsigned int> >::type *_; // [rsp+C0h] [rbp-4E0h]
  std::tuple_element<1,std::pair<unsigned int const,unsigned int> >::type *item_id_1; // [rsp+C8h] [rbp-4D8h]
  const std::pair<unsigned int const,data::MaterialExcelConfig> *v197; // [rsp+D0h] [rbp-4D0h]
  std::tuple_element<0,const std::pair<unsigned int const,data::MaterialExcelConfig> >::type *item_id_0; // [rsp+D8h] [rbp-4C8h]
  std::tuple_element<1,const std::pair<unsigned int const,data::MaterialExcelConfig> >::type *material_config; // [rsp+E0h] [rbp-4C0h]
  std::tuple_element<0,std::pair<std::_Rb_tree_iterator<std::pair<unsigned int const,unsigned int> >,bool> >::type *iter; // [rsp+E8h] [rbp-4B8h]
  std::tuple_element<1,std::pair<std::_Rb_tree_iterator<std::pair<unsigned int const,unsigned int> >,bool> >::type *inserted; // [rsp+F0h] [rbp-4B0h]
  const std::unordered_map<unsigned int,data::ItemConfig*> *__for_range; // [rsp+F8h] [rbp-4A8h]
  const std::pair<unsigned int const,data::ItemConfig*> *v203; // [rsp+100h] [rbp-4A0h]
  std::tuple_element<0,const std::pair<unsigned int const,data::ItemConfig*> >::type *item_id; // [rsp+108h] [rbp-498h]
  std::tuple_element<1,const std::pair<unsigned int const,data::ItemConfig*> >::type *item_config_ptr; // [rsp+110h] [rbp-490h]
  const data::MaterialExcelConfig *material_config_ptr; // [rsp+118h] [rbp-488h]
  std::string sep_1; // [rsp+120h] [rbp-480h] BYREF
  common::milog::MiLogStream v208; // [rsp+140h] [rbp-460h] BYREF
  std::pair<unsigned int const,data::WeaponExcelConfig> __in; // [rsp+160h] [rbp-440h] BYREF
  char v210[816]; // [rsp+270h] [rbp-330h] BYREF

  v4 = (unsigned __int64)v210;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v5 = __asan_stack_malloc_4(768LL);
    if ( v5 )
      v4 = v5;
  }
  *(_QWORD *)v4 = 1102416563LL;
  *(_QWORD *)(v4 + 8) = "14 32 4 12 item_id:4031 48 4 15 filter_key:4242 64 4 17 filter_value:4249 80 4 14 avatar_id:3909"
                        " 96 8 11 reason:4057 128 16 15 packet_ptr:4255 160 16 15 item_param:3888 192 24 8 vec:4179 256 2"
                        "4 19 item_param_vec:4190 320 24 18 action_reason:4226 384 48 16 item_id_set:4067 464 48 18 item_"
                        "type_set:4068 544 56 26 item_control_type_set:3964 640 96 11 notify:4257";
  *(_QWORD *)(v4 + 16) = addItem;
  v6 = (_DWORD *)(v4 >> 3);
  v6[536862720] = -235802127;
  v6[536862721] = -234556924;
  v6[536862722] = -234556924;
  v6[536862723] = -218959360;
  v6[536862724] = -219021312;
  v6[536862725] = -219021312;
  v6[536862726] = -234881024;
  v6[536862727] = -218959118;
  v6[536862728] = -234881024;
  v6[536862729] = -218959118;
  v6[536862730] = -234881024;
  v6[536862731] = -218959118;
  v6[536862733] = -219021312;
  v6[536862734] = 62194;
  v6[536862736] = -218959118;
  v6[536862738] = -234881024;
  v6[536862739] = -218959118;
  v6[536862743] = -202116109;
  if ( std::vector<std::string>::empty(param_vec) )
  {
    common::milog::MiLogStream::create(
      &v208,
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/player/gm/player_gm_comp.cpp",
      "addItem",
      3839);
    common::milog::MiLogStream::operator<<<char [17],(char *[17])0>(&v208, (const char (*)[17])"param not enough");
    common::milog::MiLogStream::~MiLogStream(&v208);
    v3 = -1;
    goto LABEL_319;
  }
  v7 = std::vector<std::string>::operator[](param_vec, 0LL);
  if ( std::operator==<char>(v7, off_26356D00) )
  {
    *(_DWORD *)(v4 + 48) = 0;
    *(_DWORD *)(v4 + 64) = 1;
    if ( std::vector<std::string>::size(param_vec) <= 1 )
    {
      common::milog::MiLogStream::create(
        &v208,
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/player/gm/player_gm_comp.cpp",
        "addItem",
        3848);
      common::milog::MiLogStream::operator<<<char [17],(char *[17])0>(&v208, (const char (*)[17])"param not enough");
      common::milog::MiLogStream::~MiLogStream(&v208);
      v3 = -1;
      goto LABEL_319;
    }
    v8 = std::vector<std::string>::operator[](param_vec, 1uLL);
    if ( std::operator==<char>(v8, _f.gap0)
      || (v9 = std::vector<std::string>::operator[](param_vec, 1uLL), std::operator==<char>(v9, "MATERIAL"))
      || (v10 = std::vector<std::string>::operator[](param_vec, 1uLL), std::operator==<char>(v10, "FURNITURE")) )
    {
      v12 = std::vector<std::string>::operator[](param_vec, 1uLL);
      if ( std::operator==<char>(v12, "MATERIAL")
        || (v13 = std::vector<std::string>::operator[](param_vec, 1uLL), std::operator==<char>(v13, "FURNITURE")) )
      {
        if ( std::vector<std::string>::size(param_vec) > 2 )
        {
          v15 = std::vector<std::string>::operator[](param_vec, 2uLL);
          common::tools::StringUtils::strToNum<unsigned int>(v15, (unsigned int *)(v4 + 64), 1);
        }
      }
      std::vector<ItemParam>::vector((std::vector<ItemParam> *const)(v4 + 256));
      ServiceBox::findService<GameserverService>();
      GameserverService::getConfig((GameserverService *const)(v4 + 160));
      __for_range = &std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 160))->design_config.txt_config_mgr.item_config_mgr.item_config_map;
      std::shared_ptr<Config>::~shared_ptr((std::shared_ptr<Config> *const)(v4 + 160));
      __for_begin_0._M_cur = (std::__detail::_Node_iterator_base<std::pair<unsigned int const,data::WeaponExcelConfig>,false>::__node_type *)std::unordered_map<unsigned int,data::ItemConfig *>::begin(__for_range)._M_cur;
      *(std::unordered_map<unsigned int,data::ItemConfig*>::const_iterator *)(v4 + 96) = std::unordered_map<unsigned int,data::ItemConfig *>::end(__for_range);
      while ( std::__detail::operator!=<std::pair<unsigned int const,data::ItemConfig *>,false>(
                (const std::__detail::_Node_iterator_base<std::pair<unsigned int const,data::ItemConfig*>,false> *)&__for_begin_0,
                (const std::__detail::_Node_iterator_base<std::pair<unsigned int const,data::ItemConfig*>,false> *)(v4 + 96)) )
      {
        v203 = std::__detail::_Node_const_iterator<std::pair<unsigned int const,data::ItemConfig *>,false,false>::operator*((const std::__detail::_Node_const_iterator<std::pair<unsigned int const,data::ItemConfig*>,false,false> *const)&__for_begin_0);
        item_id = std::get<0ul,unsigned int const,data::ItemConfig *>(v203);
        v16 = (std::tuple_element<1,const std::pair<unsigned int const,data::ItemConfig*> >::type *)std::get<1ul,unsigned int const,data::ItemConfig *>(v203);
        item_config_ptr = v16;
        if ( *(_BYTE *)(((unsigned __int64)v16 >> 3) + 0x7FFF8000) )
          __asan_report_load8(v16);
        if ( *item_config_ptr )
        {
          v17 = *item_config_ptr;
          v18 = *(_BYTE *)(((unsigned __int64)&(*item_config_ptr)->item_type >> 3) + 0x7FFF8000);
          if ( v18 != 0 && (char)(((*(_BYTE *)item_config_ptr + 12) & 7) + 3) >= v18 )
            __asan_report_load4(&(*item_config_ptr)->item_type);
          if ( v17->item_type != ITEM_VIRTUAL )
          {
            v19 = std::vector<std::string>::operator[](param_vec, 1uLL);
            if ( !std::operator==<char>(v19, _f.gap0) )
              goto LABEL_37;
            if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
              __asan_report_load8(&context->player);
            ItemComp = Player::getItemComp(context->player);
            if ( *(_BYTE *)(((unsigned __int64)item_id >> 3) + 0x7FFF8000) != 0
              && (char)(((unsigned __int8)item_id & 7) + 3) >= *(_BYTE *)(((unsigned __int64)item_id >> 3) + 0x7FFF8000) )
            {
              __asan_report_load4(item_id);
            }
            if ( PlayerItemComp::hasItemById(ItemComp, *item_id) )
              v21 = 1;
            else
LABEL_37:
              v21 = 0;
            if ( !v21 )
            {
              v22 = std::vector<std::string>::operator[](param_vec, 1uLL);
              if ( !std::operator==<char>(v22, "MATERIAL") )
                goto LABEL_46;
              if ( *(_BYTE *)(((unsigned __int64)item_config_ptr >> 3) + 0x7FFF8000) )
                __asan_report_load8(item_config_ptr);
              v23 = *item_config_ptr;
              v24 = *(_BYTE *)(((unsigned __int64)&(*item_config_ptr)->item_type >> 3) + 0x7FFF8000);
              if ( v24 != 0 && (char)(((*(_BYTE *)item_config_ptr + 12) & 7) + 3) >= v24 )
                __asan_report_load4(&(*item_config_ptr)->item_type);
              if ( v23->item_type == ITEM_MATERIAL )
LABEL_46:
                v25 = 0;
              else
                v25 = 1;
              if ( !v25 )
              {
                v26 = std::vector<std::string>::operator[](param_vec, 1uLL);
                if ( !std::operator==<char>(v26, "FURNITURE") )
                  goto LABEL_55;
                if ( *(_BYTE *)(((unsigned __int64)item_config_ptr >> 3) + 0x7FFF8000) )
                  __asan_report_load8(item_config_ptr);
                v27 = *item_config_ptr;
                v28 = *(_BYTE *)(((unsigned __int64)&(*item_config_ptr)->item_type >> 3) + 0x7FFF8000);
                if ( v28 != 0 && (char)(((*(_BYTE *)item_config_ptr + 12) & 7) + 3) >= v28 )
                  __asan_report_load4(&(*item_config_ptr)->item_type);
                if ( v27->item_type == ITEM_FURNITURE )
LABEL_55:
                  v29 = 0;
                else
                  v29 = 1;
                if ( !v29 )
                {
                  ServiceBox::findService<GameserverService>();
                  GameserverService::getConfig((GameserverService *const)(v4 + 160));
                  p_material_config_mgr = &std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 160))->design_config.txt_config_mgr.material_config_mgr;
                  if ( *(_BYTE *)(((unsigned __int64)item_id >> 3) + 0x7FFF8000) != 0
                    && (char)(((unsigned __int8)item_id & 7) + 3) >= *(_BYTE *)(((unsigned __int64)item_id >> 3)
                                                                              + 0x7FFF8000) )
                  {
                    __asan_report_load4(item_id);
                  }
                  material_config_ptr = data::MaterialExcelConfigMgrBase::findMaterialExcelConfig(
                                          p_material_config_mgr,
                                          *item_id);
                  std::shared_ptr<Config>::~shared_ptr((std::shared_ptr<Config> *const)(v4 + 160));
                  if ( !material_config_ptr )
                    goto LABEL_66;
                  if ( *(_BYTE *)(((unsigned __int64)&material_config_ptr->material_type >> 3) + 0x7FFF8000) != 0
                    && (char)((((_BYTE)material_config_ptr + 76) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&material_config_ptr->material_type >> 3)
                                                                                       + 0x7FFF8000) )
                  {
                    __asan_report_load4(&material_config_ptr->material_type);
                  }
                  if ( material_config_ptr->material_type != MATERIAL_CHEST )
                    goto LABEL_66;
                  if ( *(char *)(((unsigned __int64)&material_config_ptr->use_on_gain >> 3) + 0x7FFF8000) < 0 )
                    __asan_report_load1(&material_config_ptr->use_on_gain);
                  if ( !material_config_ptr->use_on_gain )
                  {
LABEL_66:
                    *(_DWORD *)(v4 + 160) = 0;
                    *(_DWORD *)(v4 + 164) = 0;
                    *(_DWORD *)(v4 + 168) = 0;
                    *(_DWORD *)(v4 + 172) = 0;
                    if ( *(_BYTE *)(((unsigned __int64)item_id >> 3) + 0x7FFF8000) != 0
                      && (char)(((unsigned __int8)item_id & 7) + 3) >= *(_BYTE *)(((unsigned __int64)item_id >> 3)
                                                                                + 0x7FFF8000) )
                    {
                      __asan_report_load4(item_id);
                    }
                    *(_DWORD *)(v4 + 160) = *item_id;
                    *(_DWORD *)(v4 + 164) = *(_DWORD *)(v4 + 64);
                    if ( *(_BYTE *)(((unsigned __int64)item_config_ptr >> 3) + 0x7FFF8000) )
                      __asan_report_load8(item_config_ptr);
                    v31 = *item_config_ptr;
                    v32 = *(_BYTE *)(((unsigned __int64)&(*item_config_ptr)->item_type >> 3) + 0x7FFF8000);
                    if ( v32 != 0 && (char)(((*(_BYTE *)item_config_ptr + 12) & 7) + 3) >= v32 )
                      __asan_report_load4(&(*item_config_ptr)->item_type);
                    if ( v31->item_type != ITEM_MATERIAL )
                    {
                      v33 = *item_config_ptr;
                      v34 = *(_BYTE *)(((unsigned __int64)&(*item_config_ptr)->item_type >> 3) + 0x7FFF8000);
                      if ( v34 != 0 && (char)(((*(_BYTE *)item_config_ptr + 12) & 7) + 3) >= v34 )
                        __asan_report_load4(&(*item_config_ptr)->item_type);
                      if ( v33->item_type != ITEM_FURNITURE )
                        *(_DWORD *)(v4 + 164) = 1;
                    }
                    std::vector<ItemParam>::push_back(
                      (std::vector<ItemParam> *const)(v4 + 256),
                      (const std::vector<ItemParam>::value_type *)(v4 + 160));
                  }
                }
              }
            }
          }
        }
        std::__detail::_Node_const_iterator<std::pair<unsigned int const,data::ItemConfig *>,false,false>::operator++((std::__detail::_Node_const_iterator<std::pair<unsigned int const,data::ItemConfig*>,false,false> *const)&__for_begin_0);
      }
      ActionReason::ActionReason((ActionReason *const)(v4 + 320), ACTION_REASON_GM, ITEM_LIMIT_GM);
      if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
        __asan_report_load8(&context->player);
LABEL_81:
      v35 = Player::getItemComp(context->player);
      v3 = PlayerItemComp::addItemBatch(
             v35,
             (const std::vector<ItemParam> *)(v4 + 256),
             (const ActionReason *)(v4 + 320),
             0LL);
      std::vector<ItemParam>::~vector((std::vector<ItemParam> *const)(v4 + 256));
      goto LABEL_319;
    }
    v36 = std::vector<std::string>::operator[](param_vec, 1uLL);
    if ( std::operator==<char>(v36, "AVATAR") )
    {
      std::map<unsigned int,unsigned int>::map((std::map<unsigned int,unsigned int> *const)(v4 + 464));
      ServiceBox::findService<GameserverService>();
      GameserverService::getConfig((GameserverService *const)(v4 + 160));
      __for_range_0 = &std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 160))->design_config.txt_config_mgr.material_config_mgr.material_excel_config_map;
      std::shared_ptr<Config>::~shared_ptr((std::shared_ptr<Config> *const)(v4 + 160));
      __for_begin._M_node = (std::_Rb_tree_iterator<std::pair<unsigned int const,unsigned int> >::_Base_ptr)std::unordered_map<unsigned int,data::MaterialExcelConfig>::begin(__for_range_0)._M_cur;
      __for_begin_0._M_cur = (std::__detail::_Node_iterator_base<std::pair<unsigned int const,data::WeaponExcelConfig>,false>::__node_type *)std::unordered_map<unsigned int,data::MaterialExcelConfig>::end(__for_range_0)._M_cur;
      while ( std::__detail::operator!=<std::pair<unsigned int const,data::MaterialExcelConfig>,false>(
                (const std::__detail::_Node_iterator_base<std::pair<unsigned int const,data::MaterialExcelConfig>,false> *)&__for_begin,
                (const std::__detail::_Node_iterator_base<std::pair<unsigned int const,data::MaterialExcelConfig>,false> *)&__for_begin_0) )
      {
        v197 = std::__detail::_Node_const_iterator<std::pair<unsigned int const,data::MaterialExcelConfig>,false,false>::operator*((const std::__detail::_Node_const_iterator<std::pair<unsigned int const,data::MaterialExcelConfig>,false,false> *const)&__for_begin);
        item_id_0 = std::get<0ul,unsigned int const,data::MaterialExcelConfig>(v197);
        material_config = (std::tuple_element<1,const std::pair<unsigned int const,data::MaterialExcelConfig> >::type *)std::get<1ul,unsigned int const,data::MaterialExcelConfig>(v197);
        if ( !std::vector<data::ItemUseConfig>::size(&material_config->item_use) )
          goto LABEL_90;
        v37 = std::vector<data::ItemUseConfig>::operator[](&material_config->item_use, 0LL);
        if ( *(_BYTE *)(((unsigned __int64)&v37->use_op >> 3) + 0x7FFF8000) != 0
          && *(_BYTE *)(((unsigned __int64)&v37->use_op >> 3) + 0x7FFF8000) <= 3 )
        {
          v37 = (std::vector<data::ItemUseConfig>::const_reference)__asan_report_load4(&v37->use_op);
        }
        if ( v37->use_op == ITEM_USE_GAIN_AVATAR )
          v38 = 1;
        else
LABEL_90:
          v38 = 0;
        if ( v38 )
        {
          *(_DWORD *)(v4 + 80) = 0;
          v39 = std::vector<data::ItemUseConfig>::operator[](&material_config->item_use, 0LL);
          if ( !common::tools::StringUtils::strVecToNum<0u,unsigned int>(&v39->use_param, (unsigned int *)(v4 + 80)) )
          {
            *(std::pair<std::_Rb_tree_iterator<std::pair<unsigned int const,unsigned int> >,bool> *)(v4 + 160) = std::map<unsigned int,unsigned int>::emplace<unsigned int &,unsigned int const&>((std::map<unsigned int,unsigned int> *const)(v4 + 464), (unsigned int *)(v4 + 80), item_id_0, (unsigned int *)(v4 + 80), v40);
            iter = std::get<0ul,std::_Rb_tree_iterator<std::pair<unsigned int const,unsigned int>>,bool>((std::pair<std::_Rb_tree_iterator<std::pair<unsigned int const,unsigned int> >,bool> *)(v4 + 160));
            inserted = std::get<1ul,std::_Rb_tree_iterator<std::pair<unsigned int const,unsigned int>>,bool>((std::pair<std::_Rb_tree_iterator<std::pair<unsigned int const,unsigned int> >,bool> *)(v4 + 160));
            *(std::map<unsigned int,unsigned int>::iterator *)(v4 + 96) = std::map<unsigned int,unsigned int>::end((std::map<unsigned int,unsigned int> *const)(v4 + 464));
            if ( std::operator!=(
                   iter,
                   (const std::_Rb_tree_iterator<std::pair<unsigned int const,unsigned int> >::_Self *)(v4 + 96)) )
            {
              v41 = std::_Rb_tree_iterator<std::pair<unsigned int const,unsigned int>>::operator->(iter);
              v42 = item_id_0;
              v43 = (unsigned int *)std::min<unsigned int>(&v41->second, item_id_0);
              v44 = v43;
              if ( *(_BYTE *)(((unsigned __int64)v43 >> 3) + 0x7FFF8000) != 0
                && (char)(((unsigned __int8)v43 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)v43 >> 3) + 0x7FFF8000) )
              {
                __asan_report_load4(v43);
              }
              v45 = *v44;
              v46 = std::_Rb_tree_iterator<std::pair<unsigned int const,unsigned int>>::operator->(iter);
              v47 = *(_BYTE *)(((unsigned __int64)&v46->second >> 3) + 0x7FFF8000);
              if ( v47 != 0 && (char)((((_BYTE)v46 + 4) & 7) + 3) >= v47 )
              {
                LOBYTE(v42) = v47 != 0;
                __asan_report_store4(&v46->second, v42, v46);
              }
              v46->second = v45;
            }
          }
        }
        std::__detail::_Node_const_iterator<std::pair<unsigned int const,data::MaterialExcelConfig>,false,false>::operator++((std::__detail::_Node_const_iterator<std::pair<unsigned int const,data::MaterialExcelConfig>,false,false> *const)&__for_begin);
      }
      std::vector<ItemParam>::vector((std::vector<ItemParam> *const)(v4 + 256));
      v48 = std::map<unsigned int,unsigned int>::size((const std::map<unsigned int,unsigned int> *const)(v4 + 464));
      std::vector<ItemParam>::reserve((std::vector<ItemParam> *const)(v4 + 256), v48);
      __for_range_1 = (std::map<unsigned int,unsigned int> *)(v4 + 464);
      __for_begin._M_node = std::map<unsigned int,unsigned int>::begin((std::map<unsigned int,unsigned int> *const)(v4 + 464))._M_node;
      __for_begin_0._M_cur = (std::__detail::_Node_iterator_base<std::pair<unsigned int const,data::WeaponExcelConfig>,false>::__node_type *)std::map<unsigned int,unsigned int>::end(__for_range_1)._M_node;
      while ( std::operator!=(
                &__for_begin,
                (const std::_Rb_tree_iterator<std::pair<unsigned int const,unsigned int> >::_Self *)&__for_begin_0) )
      {
        v49 = std::_Rb_tree_iterator<std::pair<unsigned int const,unsigned int>>::operator*(&__for_begin);
        v50 = v49;
        if ( ((unsigned __int8)v49 & 7) >= *(_BYTE *)(((unsigned __int64)v49 >> 3) + 0x7FFF8000)
          && *(_BYTE *)(((unsigned __int64)v49 >> 3) + 0x7FFF8000) != 0
          || *(_BYTE *)((((unsigned __int64)&v49->second + 3) >> 3) + 0x7FFF8000) != 0
          && (((unsigned __int8)v49 + 7) & 7) >= *(_BYTE *)((((unsigned __int64)&v49->second + 3) >> 3) + 0x7FFF8000) )
        {
          __asan_report_load_n(v49, 8LL);
        }
        *(_QWORD *)(v4 + 96) = *v50;
        _ = std::get<0ul,unsigned int const,unsigned int>((std::pair<unsigned int const,unsigned int> *)(v4 + 96));
        v51 = std::get<1ul,unsigned int const,unsigned int>((std::pair<unsigned int const,unsigned int> *)(v4 + 96));
        item_id_1 = v51;
        if ( *(_BYTE *)(((unsigned __int64)v51 >> 3) + 0x7FFF8000) != 0
          && (char)(((unsigned __int8)v51 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)v51 >> 3) + 0x7FFF8000) )
        {
          __asan_report_load4(v51);
        }
        *(_DWORD *)(v4 + 160) = *item_id_1;
        *(_DWORD *)(v4 + 164) = 1;
        *(_DWORD *)(v4 + 168) = 0;
        *(_DWORD *)(v4 + 172) = 0;
        std::vector<ItemParam>::push_back(
          (std::vector<ItemParam> *const)(v4 + 256),
          (std::vector<ItemParam>::value_type *)(v4 + 160));
        std::_Rb_tree_iterator<std::pair<unsigned int const,unsigned int>>::operator++(&__for_begin);
      }
      ActionReason::ActionReason((ActionReason *const)(v4 + 320), ACTION_REASON_GM, ITEM_LIMIT_GM);
      if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
        __asan_report_load8(&context->player);
      v52 = Player::getItemComp(context->player);
      v3 = PlayerItemComp::addItemBatch(
             v52,
             (const std::vector<ItemParam> *)(v4 + 256),
             (const ActionReason *)(v4 + 320),
             0LL);
      std::vector<ItemParam>::~vector((std::vector<ItemParam> *const)(v4 + 256));
      std::map<unsigned int,unsigned int>::~map((std::map<unsigned int,unsigned int> *const)(v4 + 464));
      goto LABEL_319;
    }
    v53 = std::vector<std::string>::operator[](param_vec, 1uLL);
    if ( std::operator==<char>(v53, "WEAPON") )
    {
      std::vector<ItemParam>::vector((std::vector<ItemParam> *const)(v4 + 256));
      ServiceBox::findService<GameserverService>();
      GameserverService::getConfig((GameserverService *const)(v4 + 160));
      v54 = std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 160));
      v55 = std::unordered_map<unsigned int,data::WeaponExcelConfig>::size(&v54->design_config.txt_config_mgr.weapon_config_mgr.weapon_excel_config_map);
      std::vector<ItemParam>::reserve((std::vector<ItemParam> *const)(v4 + 256), v55);
      std::shared_ptr<Config>::~shared_ptr((std::shared_ptr<Config> *const)(v4 + 160));
      ServiceBox::findService<GameserverService>();
      GameserverService::getConfig((GameserverService *const)(v4 + 160));
      __for_range_2 = &std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 160))->design_config.txt_config_mgr.weapon_config_mgr.weapon_excel_config_map;
      std::shared_ptr<Config>::~shared_ptr((std::shared_ptr<Config> *const)(v4 + 160));
      __for_begin_0._M_cur = std::unordered_map<unsigned int,data::WeaponExcelConfig>::begin(__for_range_2)._M_cur;
      *(std::unordered_map<unsigned int,data::WeaponExcelConfig>::const_iterator *)(v4 + 96) = std::unordered_map<unsigned int,data::WeaponExcelConfig>::end(__for_range_2);
      while ( std::__detail::operator!=<std::pair<unsigned int const,data::WeaponExcelConfig>,false>(
                &__for_begin_0,
                (const std::__detail::_Node_iterator_base<std::pair<unsigned int const,data::WeaponExcelConfig>,false> *)(v4 + 96)) )
      {
        v56 = std::__detail::_Node_const_iterator<std::pair<unsigned int const,data::WeaponExcelConfig>,false,false>::operator*(&__for_begin_0);
        std::pair<unsigned int const,data::WeaponExcelConfig>::pair(&__in, v56);
        item_id_2 = std::get<0ul,unsigned int const,data::WeaponExcelConfig>(&__in);
        __0 = std::get<1ul,unsigned int const,data::WeaponExcelConfig>(&__in);
        if ( *(_BYTE *)(((unsigned __int64)item_id_2 >> 3) + 0x7FFF8000) != 0
          && (char)(((unsigned __int8)item_id_2 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)item_id_2 >> 3) + 0x7FFF8000) )
        {
          __asan_report_load4(item_id_2);
        }
        *(_DWORD *)(v4 + 160) = *item_id_2;
        *(_DWORD *)(v4 + 164) = 1;
        *(_DWORD *)(v4 + 168) = 0;
        *(_DWORD *)(v4 + 172) = 0;
        std::vector<ItemParam>::push_back(
          (std::vector<ItemParam> *const)(v4 + 256),
          (std::vector<ItemParam>::value_type *)(v4 + 160));
        std::pair<unsigned int const,data::WeaponExcelConfig>::~pair(&__in);
        std::__detail::_Node_const_iterator<std::pair<unsigned int const,data::WeaponExcelConfig>,false,false>::operator++(&__for_begin_0);
      }
      ActionReason::ActionReason((ActionReason *const)(v4 + 320), ACTION_REASON_GM, ITEM_LIMIT_GM);
      if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
        __asan_report_load8(&context->player);
      goto LABEL_81;
    }
    v57 = std::vector<std::string>::operator[](param_vec, 1uLL);
    if ( !common::tools::StringUtils::strToNum<unsigned int>(v57, (unsigned int *)(v4 + 48), 1) )
    {
      if ( std::vector<std::string>::size(param_vec) > 2 )
      {
        v58 = std::vector<std::string>::operator[](param_vec, 2uLL);
        if ( common::tools::StringUtils::strToNum<unsigned int>(v58, (unsigned int *)(v4 + 64), 1) )
        {
          common::milog::MiLogStream::create(
            &v208,
            &common::milog::MiLogDefault::default_log_obj_,
            3u,
            "./src/player/gm/player_gm_comp.cpp",
            "addItem",
            3946);
          v59 = common::milog::MiLogStream::operator<<<char [15],(char *[15])0>(
                  &v208,
                  (const char (*)[15])"invalid param:");
          common::milog::MiLogStream::operator<<<std::string>(v59, param_vec);
          common::milog::MiLogStream::~MiLogStream(&v208);
          v3 = -1;
          goto LABEL_319;
        }
      }
      *(_DWORD *)(v4 + 160) = 0;
      *(_DWORD *)(v4 + 164) = 0;
      *(_DWORD *)(v4 + 168) = 0;
      *(_DWORD *)(v4 + 172) = 0;
      *(_DWORD *)(v4 + 160) = *(_DWORD *)(v4 + 48);
      *(_DWORD *)(v4 + 164) = *(_DWORD *)(v4 + 64);
      ActionReason::ActionReason((ActionReason *const)(v4 + 320), ACTION_REASON_GM, ITEM_LIMIT_GM);
      if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
        __asan_report_load8(&context->player);
      v60 = Player::getItemComp(context->player);
      ret = PlayerItemComp::checkAddItem(v60, (const ItemParam *)(v4 + 160), (const ActionReason *)(v4 + 320));
      if ( ret )
      {
        common::milog::MiLogStream::create(
          &v208,
          &common::milog::MiLogDefault::default_log_obj_,
          3u,
          "./src/player/gm/player_gm_comp.cpp",
          "addItem",
          3957);
        v61 = common::milog::MiLogStream::operator<<<char [29],(char *[29])0>(
                &v208,
                (const char (*)[29])"checkAddItem fails, item_id:");
        v62 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                v61,
                (const unsigned int *)(v4 + 48));
        v63 = common::milog::MiLogStream::operator<<<char [8],(char *[8])0>(v62, (const char (*)[8])" count:");
        common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v63, (const unsigned int *)(v4 + 64));
        common::milog::MiLogStream::~MiLogStream(&v208);
        v3 = ret;
        goto LABEL_319;
      }
      if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
        __asan_report_load8(&context->player);
      goto LABEL_129;
    }
    std::unordered_set<std::string>::unordered_set((std::unordered_set<std::string> *const)(v4 + 544));
    *(_DWORD *)(v4 + 80) = 1;
    for ( i = 1LL; ; ++i )
    {
      v65 = std::vector<std::string>::size(param_vec);
      if ( i >= v65 )
        break;
      v66 = std::vector<std::string>::operator[](param_vec, i);
      if ( common::tools::StringUtils::strToNum<unsigned int>(v66, (unsigned int *)(v4 + 80), 1) )
      {
        std::vector<std::string>::vector((std::vector<std::string> *const)(v4 + 320));
        std::allocator<char>::allocator(&__a);
        std::string::basic_string<std::allocator<char>>((std::string *const)&v208, ",", &__a);
        v67 = std::vector<std::string>::operator[](param_vec, i);
        common::tools::StringUtils::split(v67, (const std::string *)&v208, (std::vector<std::string> *)(v4 + 320), 0);
        std::string::~string(&v208);
        std::allocator<char>::~allocator(&__a);
        M_current = std::vector<std::string>::end((std::vector<std::string> *const)(v4 + 320))._M_current;
        v69._M_current = std::vector<std::string>::begin((std::vector<std::string> *const)(v4 + 320))._M_current;
        std::unordered_set<std::string>::insert<__gnu_cxx::__normal_iterator<std::string*,std::vector<std::string>>>(
          (std::unordered_set<std::string> *const)(v4 + 544),
          v69,
          (__gnu_cxx::__normal_iterator<std::string*,std::vector<std::string> >)M_current);
        std::vector<std::string>::~vector((std::vector<std::string> *const)(v4 + 320));
      }
    }
    std::vector<ItemParam>::vector((std::vector<ItemParam> *const)(v4 + 256));
    ServiceBox::findService<GameserverService>();
    GameserverService::getConfig((GameserverService *const)(v4 + 160));
    __for_range_3 = &std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 160))->design_config.txt_config_mgr.item_config_mgr.item_config_map;
    std::shared_ptr<Config>::~shared_ptr((std::shared_ptr<Config> *const)(v4 + 160));
    __for_begin_0._M_cur = (std::__detail::_Node_iterator_base<std::pair<unsigned int const,data::WeaponExcelConfig>,false>::__node_type *)std::unordered_map<unsigned int,data::ItemConfig *>::begin(__for_range_3)._M_cur;
    *(std::unordered_map<unsigned int,data::ItemConfig*>::const_iterator *)(v4 + 96) = std::unordered_map<unsigned int,data::ItemConfig *>::end(__for_range_3);
    while ( std::__detail::operator!=<std::pair<unsigned int const,data::ItemConfig *>,false>(
              (const std::__detail::_Node_iterator_base<std::pair<unsigned int const,data::ItemConfig*>,false> *)&__for_begin_0,
              (const std::__detail::_Node_iterator_base<std::pair<unsigned int const,data::ItemConfig*>,false> *)(v4 + 96)) )
    {
      v70 = (unsigned __int64)std::__detail::_Node_const_iterator<std::pair<unsigned int const,data::ItemConfig *>,false,false>::operator*((const std::__detail::_Node_const_iterator<std::pair<unsigned int const,data::ItemConfig*>,false,false> *const)&__for_begin_0);
      if ( *(_WORD *)((v70 >> 3) + 0x7FFF8000) )
        v70 = __asan_report_load16(v70);
      v71 = *(data::ItemConfig **)(v70 + 8);
      *(_QWORD *)(v4 + 128) = *(_QWORD *)v70;
      *(_QWORD *)(v4 + 136) = v71;
      item_id_3 = std::get<0ul,unsigned int const,data::ItemConfig *>((std::pair<unsigned int const,data::ItemConfig*> *)(v4 + 128));
      v72 = std::get<1ul,unsigned int const,data::ItemConfig *>((std::pair<unsigned int const,data::ItemConfig*> *)(v4 + 128));
      item_config_ptr_0 = v72;
      if ( *(_BYTE *)(((unsigned __int64)v72 >> 3) + 0x7FFF8000) )
        __asan_report_load8(v72);
      if ( *item_config_ptr_0
        && common::tools::MiscUtils::isContains<std::unordered_set<std::string>,std::string>(
             (std::unordered_set<std::string> *)(v4 + 544),
             &(*item_config_ptr_0)->control_type) )
      {
        *(_DWORD *)(v4 + 160) = 0;
        *(_DWORD *)(v4 + 164) = 0;
        *(_DWORD *)(v4 + 168) = 0;
        *(_DWORD *)(v4 + 172) = 0;
        if ( *(_BYTE *)(((unsigned __int64)item_id_3 >> 3) + 0x7FFF8000) != 0
          && (char)(((unsigned __int8)item_id_3 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)item_id_3 >> 3) + 0x7FFF8000) )
        {
          __asan_report_load4(item_id_3);
        }
        *(_DWORD *)(v4 + 160) = *item_id_3;
        *(_DWORD *)(v4 + 164) = *(_DWORD *)(v4 + 80);
        std::vector<ItemParam>::push_back(
          (std::vector<ItemParam> *const)(v4 + 256),
          (const std::vector<ItemParam>::value_type *)(v4 + 160));
      }
      std::__detail::_Node_const_iterator<std::pair<unsigned int const,data::ItemConfig *>,false,false>::operator++((std::__detail::_Node_const_iterator<std::pair<unsigned int const,data::ItemConfig*>,false,false> *const)&__for_begin_0);
    }
    if ( !std::vector<ItemParam>::empty((const std::vector<ItemParam> *const)(v4 + 256)) )
    {
      ActionReason::ActionReason((ActionReason *const)(v4 + 320), ACTION_REASON_GM, ITEM_LIMIT_GM);
      if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
        __asan_report_load8(&context->player);
      v74 = Player::getItemComp(context->player);
      v3 = PlayerItemComp::addItemBatchWithStackLimit(
             v74,
             (std::vector<ItemParam> *)(v4 + 256),
             (const ActionReason *)(v4 + 320),
             0LL);
    }
    else
    {
      std::string::operator=(ret_msg, "invalid param");
      v3 = -1;
    }
    std::vector<ItemParam>::~vector((std::vector<ItemParam> *const)(v4 + 256));
    std::unordered_set<std::string>::~unordered_set((std::unordered_set<std::string> *const)(v4 + 544));
    goto LABEL_319;
  }
  v75 = std::vector<std::string>::operator[](param_vec, 0LL);
  if ( std::operator==<char>(v75, "ADD_BATCH") )
  {
    if ( std::vector<std::string>::size(param_vec) <= 1 )
    {
      common::milog::MiLogStream::create(
        &v208,
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/player/gm/player_gm_comp.cpp",
        "addItem",
        3999);
      common::milog::MiLogStream::operator<<<char [17],(char *[17])0>(&v208, (const char (*)[17])"param not enough");
      common::milog::MiLogStream::~MiLogStream(&v208);
      v3 = -1;
      goto LABEL_319;
    }
    std::vector<unsigned int>::vector((std::vector<unsigned int> *const)(v4 + 192));
    std::allocator<char>::allocator(&__a);
    std::string::basic_string<std::allocator<char>>((std::string *const)&v208, ":", &__a);
    std::allocator<char>::allocator(&v171);
    std::string::basic_string<std::allocator<char>>(&sep_1, ",", &v171);
    v76 = std::vector<std::string>::operator[](param_vec, 1uLL);
    v77 = common::tools::StringUtils::splitToList<unsigned int>(
            v76,
            &sep_1,
            (const std::string *)&v208,
            2u,
            (std::vector<unsigned int> *)(v4 + 192),
            1) != 0;
    std::string::~string(&sep_1);
    std::allocator<char>::~allocator(&v171);
    std::string::~string(&v208);
    std::allocator<char>::~allocator(&__a);
    if ( !v77 && std::vector<unsigned int>::size((const std::vector<unsigned int> *const)(v4 + 192)) > 1 )
    {
      std::vector<ItemParam>::vector((std::vector<ItemParam> *const)(v4 + 256));
      for ( idx = 1LL; ; idx += 2LL )
      {
        v78 = std::vector<unsigned int>::size((const std::vector<unsigned int> *const)(v4 + 192));
        if ( idx >= v78 )
          break;
        *(_DWORD *)(v4 + 160) = 0;
        *(_DWORD *)(v4 + 164) = 0;
        *(_DWORD *)(v4 + 168) = 0;
        *(_DWORD *)(v4 + 172) = 0;
        v79 = std::vector<unsigned int>::operator[]((std::vector<unsigned int> *const)(v4 + 192), idx - 1);
        v80 = v79;
        if ( *(_BYTE *)(((unsigned __int64)v79 >> 3) + 0x7FFF8000) != 0
          && (char)(((unsigned __int8)v79 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)v79 >> 3) + 0x7FFF8000) )
        {
          __asan_report_load4(v79);
        }
        *(_DWORD *)(v4 + 160) = *v80;
        v81 = std::vector<unsigned int>::operator[]((std::vector<unsigned int> *const)(v4 + 192), idx);
        v82 = v81;
        if ( *(_BYTE *)(((unsigned __int64)v81 >> 3) + 0x7FFF8000) != 0
          && (char)(((unsigned __int8)v81 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)v81 >> 3) + 0x7FFF8000) )
        {
          __asan_report_load4(v81);
        }
        *(_DWORD *)(v4 + 164) = *v82;
        std::vector<ItemParam>::push_back(
          (std::vector<ItemParam> *const)(v4 + 256),
          (const std::vector<ItemParam>::value_type *)(v4 + 160));
      }
      ActionReason::ActionReason((ActionReason *const)(v4 + 320), ACTION_REASON_GM, ITEM_LIMIT_GM);
      if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
        __asan_report_load8(&context->player);
      v83 = Player::getItemComp(context->player);
      v3 = PlayerItemComp::addItemBatch(
             v83,
             (const std::vector<ItemParam> *)(v4 + 256),
             (const ActionReason *)(v4 + 320),
             0LL);
      std::vector<ItemParam>::~vector((std::vector<ItemParam> *const)(v4 + 256));
      goto LABEL_172;
    }
LABEL_160:
    std::string::operator=(ret_msg, "param format wrong");
    v3 = -1;
LABEL_172:
    std::vector<unsigned int>::~vector((std::vector<unsigned int> *const)(v4 + 192));
    goto LABEL_319;
  }
  v84 = std::vector<std::string>::operator[](param_vec, 0LL);
  if ( std::operator==<char>(v84, off_263577C0) )
  {
    if ( std::vector<std::string>::size(param_vec) <= 2 )
    {
      common::milog::MiLogStream::create(
        &v208,
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/player/gm/player_gm_comp.cpp",
        "addItem",
        4028);
      common::milog::MiLogStream::operator<<<char [47],(char *[47])0>(
        &v208,
        (const char (*)[47])"usage: USE item_id count [target] [option_idx]");
      common::milog::MiLogStream::~MiLogStream(&v208);
      v3 = -1;
      goto LABEL_319;
    }
    *(_DWORD *)(v4 + 32) = 0;
    *(_DWORD *)(v4 + 48) = 0;
    *(_DWORD *)(v4 + 64) = 0;
    v85 = std::vector<std::string>::operator[](param_vec, 1uLL);
    common::tools::StringUtils::strToNum<unsigned int>(v85, (unsigned int *)(v4 + 32), 1);
    v86 = std::vector<std::string>::operator[](param_vec, 2uLL);
    common::tools::StringUtils::strToNum<unsigned int>(v86, (unsigned int *)(v4 + 48), 1);
    if ( !*(_DWORD *)(v4 + 32) || !*(_DWORD *)(v4 + 48) )
    {
      common::milog::MiLogStream::create(
        &v208,
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/player/gm/player_gm_comp.cpp",
        "addItem",
        4036);
      common::milog::MiLogStream::operator<<<char [47],(char *[47])0>(
        &v208,
        (const char (*)[47])"usage: USE item_id count [target] [option_idx]");
      common::milog::MiLogStream::~MiLogStream(&v208);
      v3 = -1;
      goto LABEL_319;
    }
    if ( std::vector<std::string>::size(param_vec) > 3 )
    {
      v87 = std::vector<std::string>::operator[](param_vec, 3uLL);
      common::tools::StringUtils::strToNum<unsigned int>(v87, (unsigned int *)(v4 + 64), 1);
    }
    if ( std::vector<std::string>::size(param_vec) > 4 )
    {
      v88 = std::vector<std::string>::operator[](param_vec, 4uLL);
      common::tools::StringUtils::strToNum<unsigned int>(v88, (unsigned int *)(v4 + 80), 1);
    }
    if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
      __asan_report_load8(&context->player);
    v89 = (unsigned int)Player::getItemComp(context->player);
    PlayerItemComp::findMaterial((PlayerItemComp *const)(v4 + 160), v89);
    if ( std::operator==<Material>((const std::shared_ptr<Material> *)(v4 + 160), 0LL) )
    {
      common::milog::MiLogStream::create(
        &v208,
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/player/gm/player_gm_comp.cpp",
        "addItem",
        4050);
      common::milog::MiLogStream::operator<<<char [29],(char *[29])0>(&v208, (const char (*)[29])off_26357860);
      common::milog::MiLogStream::~MiLogStream(&v208);
      v3 = -1;
      v90 = 0;
    }
    else
    {
      *(_DWORD *)(v4 + 320) = 0;
      *(_QWORD *)(v4 + 328) = 0LL;
      *(_DWORD *)(v4 + 336) = 0;
      *(_DWORD *)(v4 + 320) = *(_DWORD *)(v4 + 48);
      *(_QWORD *)(v4 + 328) = *(unsigned int *)(v4 + 64);
      *(_DWORD *)(v4 + 336) = *(_DWORD *)(v4 + 80);
      SubItemReason::SubItemReason((SubItemReason *const)(v4 + 96), ACTION_REASON_PLAYER_USE_ITEM);
      if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
        __asan_report_load8(&context->player);
      v91 = Player::getItemComp(context->player);
      v92 = std::__shared_ptr_access<Material,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Material,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 160));
      Guid = Item::getGuid(v92);
      if ( PlayerItemComp::checkUseItem(v91, Guid, (const ItemUseParam *)(v4 + 320), (const SubItemReason *)(v4 + 96)) )
      {
        common::milog::MiLogStream::create(
          &v208,
          &common::milog::MiLogDefault::default_log_obj_,
          3u,
          "./src/player/gm/player_gm_comp.cpp",
          "addItem",
          4060);
        common::milog::MiLogStream::operator<<<char [19],(char *[19])0>(&v208, (const char (*)[19])"checkUseItem fails");
        common::milog::MiLogStream::~MiLogStream(&v208);
        v3 = -1;
        v90 = 0;
      }
      else
      {
        if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
          __asan_report_load8(&context->player);
        v94 = Player::getItemComp(context->player);
        v95 = std::__shared_ptr_access<Material,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Material,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 160));
        v96 = Item::getGuid(v95);
        PlayerItemComp::useItem(v94, v96, (const ItemUseParam *)(v4 + 320), (const SubItemReason *)(v4 + 96));
        v90 = 1;
      }
    }
    std::shared_ptr<Material>::~shared_ptr((std::shared_ptr<Material> *const)(v4 + 160));
    if ( v90 != 1 )
      goto LABEL_319;
    goto LABEL_318;
  }
  v97 = std::vector<std::string>::operator[](param_vec, 0LL);
  if ( std::operator==<char>(v97, "CLEAR") )
  {
    std::set<unsigned int>::set((std::set<unsigned int> *const)(v4 + 384));
    std::set<data::ItemType>::set((std::set<data::ItemType> *const)(v4 + 464));
    for ( idx_0 = 1; idx_0 < std::vector<std::string>::size(param_vec); ++idx_0 )
    {
      v98 = std::vector<std::string>::operator[](param_vec, idx_0);
      if ( std::operator==<char>(v98, "VIRTUAL")
        || (v99 = std::vector<std::string>::operator[](param_vec, idx_0), std::operator==<char>(v99, "COIN")) )
      {
        *(_DWORD *)(v4 + 80) = 1;
        std::set<data::ItemType>::insert(
          (std::set<data::ItemType> *const)(v4 + 464),
          (std::set<data::ItemType>::value_type *)(v4 + 80));
      }
      else
      {
        v101 = std::vector<std::string>::operator[](param_vec, idx_0);
        if ( std::operator==<char>(v101, "MATERIAL") )
        {
          *(_DWORD *)(v4 + 80) = 2;
          std::set<data::ItemType>::insert(
            (std::set<data::ItemType> *const)(v4 + 464),
            (std::set<data::ItemType>::value_type *)(v4 + 80));
        }
        else
        {
          v102 = std::vector<std::string>::operator[](param_vec, idx_0);
          if ( std::operator==<char>(v102, "RELIC")
            || (v103 = std::vector<std::string>::operator[](param_vec, idx_0), std::operator==<char>(v103, "RELIQUARY")) )
          {
            *(_DWORD *)(v4 + 80) = 3;
            std::set<data::ItemType>::insert(
              (std::set<data::ItemType> *const)(v4 + 464),
              (std::set<data::ItemType>::value_type *)(v4 + 80));
          }
          else
          {
            v105 = std::vector<std::string>::operator[](param_vec, idx_0);
            if ( std::operator==<char>(v105, "WEAPON") )
            {
              *(_DWORD *)(v4 + 80) = 4;
              std::set<data::ItemType>::insert(
                (std::set<data::ItemType> *const)(v4 + 464),
                (std::set<data::ItemType>::value_type *)(v4 + 80));
            }
            else
            {
              *(_DWORD *)(v4 + 80) = 0;
              v106 = std::vector<std::string>::operator[](param_vec, idx_0);
              if ( common::tools::StringUtils::strToNum<unsigned int>(v106, (unsigned int *)(v4 + 80), 1) )
              {
                common::milog::MiLogStream::create(
                  &v208,
                  &common::milog::MiLogDefault::default_log_obj_,
                  3u,
                  "./src/player/gm/player_gm_comp.cpp",
                  "addItem",
                  4092);
                v107 = common::milog::MiLogStream::operator<<<char [29],(char *[29])0>(
                         &v208,
                         (const char (*)[29])"parse param fail, param_vec:");
                common::milog::MiLogStream::operator<<<std::string>(v107, param_vec);
                common::milog::MiLogStream::~MiLogStream(&v208);
                v3 = -1;
                v108 = 0;
                goto LABEL_222;
              }
              std::set<unsigned int>::insert(
                (std::set<unsigned int> *const)(v4 + 384),
                (const std::set<unsigned int>::value_type *)(v4 + 80));
            }
          }
        }
      }
    }
    if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
      __asan_report_load8(&context->player);
    v109 = Player::getItemComp(context->player);
    PlayerItemComp::clearItemsByGm(v109, (std::set<unsigned int> *)(v4 + 384), (std::set<data::ItemType> *)(v4 + 464));
    v108 = 1;
LABEL_222:
    std::set<data::ItemType>::~set((std::set<data::ItemType> *const)(v4 + 464));
    std::set<unsigned int>::~set((std::set<unsigned int> *const)(v4 + 384));
    if ( v108 != 1 )
      goto LABEL_319;
    goto LABEL_318;
  }
  v110 = std::vector<std::string>::operator[](param_vec, 0LL);
  if ( std::operator==<char>(v110, "CLOSE_USE_CD") )
  {
    if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
      __asan_report_load8(&context->player);
    GmComp = Player::getGmComp(context->player);
    __a.gap0[0] = 1;
    PlayerGmComp::setGmSetValue<bool>(GmComp, 0, (const bool *)__a.gap0);
    if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
      __asan_report_load8(&context->player);
    v112 = Player::getItemComp(context->player);
    PlayerItemComp::clearItemCdByGm(v112, 1);
    if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
      __asan_report_load8(&context->player);
    WidgetComp = Player::getWidgetComp(context->player);
    PlayerWidgetComp::clearWidgetCoolDownByGm(WidgetComp);
    goto LABEL_318;
  }
  v114 = std::vector<std::string>::operator[](param_vec, 0LL);
  if ( std::operator==<char>(v114, "OPEN_USE_CD") )
  {
    if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
      __asan_report_load8(&context->player);
    v115 = Player::getGmComp(context->player);
    __a.gap0[0] = 0;
    PlayerGmComp::setGmSetValue<bool>(v115, 0, (const bool *)__a.gap0);
    goto LABEL_318;
  }
  v116 = std::vector<std::string>::operator[](param_vec, 0LL);
  if ( std::operator==<char>(v116, off_26357AA0) )
  {
    if ( std::vector<std::string>::size(param_vec) > 2 )
    {
      *(_DWORD *)(v4 + 64) = 0;
      *(_DWORD *)(v4 + 80) = 0;
      v117 = std::vector<std::string>::operator[](param_vec, 1uLL);
      common::tools::StringUtils::strToNum<unsigned int>(v117, (unsigned int *)(v4 + 64), 1);
      v118 = std::vector<std::string>::operator[](param_vec, 2uLL);
      common::tools::StringUtils::strToNum<unsigned int>(v118, (unsigned int *)(v4 + 80), 1);
      if ( *(_DWORD *)(v4 + 64) && *(_DWORD *)(v4 + 80) )
      {
        *(_DWORD *)(v4 + 160) = 0;
        *(_DWORD *)(v4 + 164) = 0;
        *(_DWORD *)(v4 + 168) = 0;
        *(_DWORD *)(v4 + 172) = 0;
        *(_DWORD *)(v4 + 160) = *(_DWORD *)(v4 + 64);
        *(_DWORD *)(v4 + 164) = *(_DWORD *)(v4 + 80);
        if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
          __asan_report_load8(&context->player);
        v119 = Player::getItemComp(context->player);
        ret_0 = PlayerItemComp::checkSubItem(v119, (const ItemParam *)(v4 + 160));
        if ( ret_0 )
        {
          common::milog::MiLogStream::create(
            &v208,
            &common::milog::MiLogDefault::default_log_obj_,
            3u,
            "./src/player/gm/player_gm_comp.cpp",
            "addItem",
            4133);
          v120 = common::milog::MiLogStream::operator<<<char [29],(char *[29])0>(
                   &v208,
                   (const char (*)[29])"checkSubItem fails, item_id:");
          v121 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                   v120,
                   (const unsigned int *)(v4 + 64));
          v122 = common::milog::MiLogStream::operator<<<char [8],(char *[8])0>(v121, (const char (*)[8])" count:");
          common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v122, (const unsigned int *)(v4 + 80));
          common::milog::MiLogStream::~MiLogStream(&v208);
          v3 = ret_0;
        }
        else
        {
          SubItemReason::SubItemReason((SubItemReason *const)(v4 + 96), ACTION_REASON_GM);
          if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
            __asan_report_load8(&context->player);
          v123 = Player::getItemComp(context->player);
          v3 = PlayerItemComp::subItem(v123, (const ItemParam *)(v4 + 160), (const SubItemReason *)(v4 + 96));
        }
      }
      else
      {
        common::milog::MiLogStream::create(
          &v208,
          &common::milog::MiLogDefault::default_log_obj_,
          3u,
          "./src/player/gm/player_gm_comp.cpp",
          "addItem",
          4122);
        common::milog::MiLogStream::operator<<<char [25],(char *[25])0>(
          &v208,
          (const char (*)[25])"usage: SUB item_id count");
        common::milog::MiLogStream::~MiLogStream(&v208);
        v3 = -1;
      }
    }
    else
    {
      common::milog::MiLogStream::create(
        &v208,
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/player/gm/player_gm_comp.cpp",
        "addItem",
        4114);
      common::milog::MiLogStream::operator<<<char [25],(char *[25])0>(
        &v208,
        (const char (*)[25])"usage: USE item_id count");
      common::milog::MiLogStream::~MiLogStream(&v208);
      v3 = -1;
    }
    goto LABEL_319;
  }
  v124 = std::vector<std::string>::operator[](param_vec, 0LL);
  if ( std::operator==<char>(v124, "SUB_BY_GUIDS") )
  {
    if ( std::vector<std::string>::size(param_vec) > 1 )
    {
      std::vector<unsigned long>::vector((std::vector<long unsigned int> *const)(v4 + 320));
      std::allocator<char>::allocator(&__a);
      std::string::basic_string<std::allocator<char>>((std::string *const)&v208, ",", &__a);
      v125 = std::vector<std::string>::operator[](param_vec, 1uLL);
      v126 = common::tools::StringUtils::splitToList<unsigned long>(
               v125,
               (const std::string *)&v208,
               (std::vector<long unsigned int> *)(v4 + 320),
               0) != 0;
      std::string::~string(&v208);
      std::allocator<char>::~allocator(&__a);
      if ( v126 )
      {
        v127 = std::vector<std::string>::operator[](param_vec, 1uLL);
        std::operator+<char>((std::string *)&v208, "split fail:", v127);
        std::string::operator=(ret_msg, &v208);
        std::string::~string(&v208);
        v3 = -1;
      }
      else
      {
        if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
          __asan_report_load8(&context->player);
        v128 = Player::getItemComp(context->player);
        SubItemReason::SubItemReason((SubItemReason *const)(v4 + 96), ACTION_REASON_GM);
        if ( PlayerItemComp::subItemBatch(
               v128,
               (const std::vector<long unsigned int> *)(v4 + 320),
               (const SubItemReason *)(v4 + 96)) )
        {
          std::string::operator=(ret_msg, "subItemBatch fail");
          v3 = -1;
        }
        else
        {
          v3 = 0;
        }
      }
      std::vector<unsigned long>::~vector((std::vector<long unsigned int> *const)(v4 + 320));
    }
    else
    {
      common::milog::MiLogStream::create(
        &v208,
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/player/gm/player_gm_comp.cpp",
        "addItem",
        4143);
      common::milog::MiLogStream::operator<<<char [35],(char *[35])0>(
        &v208,
        (const char (*)[35])"usage: SUB_BY_GUID guid1,guid2,...");
      common::milog::MiLogStream::~MiLogStream(&v208);
      v3 = -1;
    }
    goto LABEL_319;
  }
  v129 = std::vector<std::string>::operator[](param_vec, 0LL);
  if ( std::operator==<char>(v129, "RESET") )
  {
    if ( std::vector<std::string>::size(param_vec) <= 1 )
    {
      common::milog::MiLogStream::create(
        &v208,
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/player/gm/player_gm_comp.cpp",
        "addItem",
        4163);
      common::milog::MiLogStream::operator<<<char [25],(char *[25])0>(
        &v208,
        (const char (*)[25])"usage: USE item_id count");
      common::milog::MiLogStream::~MiLogStream(&v208);
      v3 = -1;
      goto LABEL_319;
    }
    v130 = std::vector<std::string>::operator[](param_vec, 1uLL);
    if ( std::operator==<char>(v130, "RESIN") )
    {
      if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
        __asan_report_load8(&context->player);
      v131 = Player::getItemComp(context->player);
      PlayerItemComp::onGmResetResinBoughtCount(v131);
    }
    goto LABEL_318;
  }
  v132 = std::vector<std::string>::operator[](param_vec, 0LL);
  if ( std::operator==<char>(v132, "ADD_WITH_STACK_LIMIT") )
  {
    if ( std::vector<std::string>::size(param_vec) <= 1 )
    {
      common::milog::MiLogStream::create(
        &v208,
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/player/gm/player_gm_comp.cpp",
        "addItem",
        4176);
      common::milog::MiLogStream::operator<<<char [17],(char *[17])0>(&v208, (const char (*)[17])"param not enough");
      common::milog::MiLogStream::~MiLogStream(&v208);
      v3 = -1;
      goto LABEL_319;
    }
    std::vector<unsigned int>::vector((std::vector<unsigned int> *const)(v4 + 192));
    std::allocator<char>::allocator(&__a);
    std::string::basic_string<std::allocator<char>>((std::string *const)&v208, ":", &__a);
    std::allocator<char>::allocator(&v171);
    std::string::basic_string<std::allocator<char>>(&sep_1, ",", &v171);
    v133 = std::vector<std::string>::operator[](param_vec, 1uLL);
    v134 = common::tools::StringUtils::splitToList<unsigned int>(
             v133,
             &sep_1,
             (const std::string *)&v208,
             2u,
             (std::vector<unsigned int> *)(v4 + 192),
             1) != 0;
    std::string::~string(&sep_1);
    std::allocator<char>::~allocator(&v171);
    std::string::~string(&v208);
    std::allocator<char>::~allocator(&__a);
    if ( !v134 && std::vector<unsigned int>::size((const std::vector<unsigned int> *const)(v4 + 192)) > 1 )
    {
      std::vector<ItemParam>::vector((std::vector<ItemParam> *const)(v4 + 256));
      for ( idx_1 = 1LL; ; idx_1 += 2LL )
      {
        v135 = std::vector<unsigned int>::size((const std::vector<unsigned int> *const)(v4 + 192));
        if ( idx_1 >= v135 )
          break;
        *(_DWORD *)(v4 + 160) = 0;
        *(_DWORD *)(v4 + 164) = 0;
        *(_DWORD *)(v4 + 168) = 0;
        *(_DWORD *)(v4 + 172) = 0;
        v136 = std::vector<unsigned int>::operator[]((std::vector<unsigned int> *const)(v4 + 192), idx_1 - 1);
        v137 = v136;
        if ( *(_BYTE *)(((unsigned __int64)v136 >> 3) + 0x7FFF8000) != 0
          && (char)(((unsigned __int8)v136 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)v136 >> 3) + 0x7FFF8000) )
        {
          __asan_report_load4(v136);
        }
        *(_DWORD *)(v4 + 160) = *v137;
        v138 = std::vector<unsigned int>::operator[]((std::vector<unsigned int> *const)(v4 + 192), idx_1);
        v139 = v138;
        if ( *(_BYTE *)(((unsigned __int64)v138 >> 3) + 0x7FFF8000) != 0
          && (char)(((unsigned __int8)v138 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)v138 >> 3) + 0x7FFF8000) )
        {
          __asan_report_load4(v138);
        }
        *(_DWORD *)(v4 + 164) = *v139;
        std::vector<ItemParam>::push_back(
          (std::vector<ItemParam> *const)(v4 + 256),
          (const std::vector<ItemParam>::value_type *)(v4 + 160));
      }
      ActionReason::ActionReason((ActionReason *const)(v4 + 320), ACTION_REASON_GM, ITEM_LIMIT_GM);
      if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
        __asan_report_load8(&context->player);
      v140 = Player::getItemComp(context->player);
      v3 = PlayerItemComp::addItemBatchWithStackLimit(
             v140,
             (std::vector<ItemParam> *)(v4 + 256),
             (const ActionReason *)(v4 + 320),
             0LL);
      std::vector<ItemParam>::~vector((std::vector<ItemParam> *const)(v4 + 256));
      goto LABEL_172;
    }
    goto LABEL_160;
  }
  v141 = std::vector<std::string>::operator[](param_vec, 0LL);
  if ( std::operator==<char>(v141, "FULL") )
  {
    if ( std::vector<std::string>::size(param_vec) <= 2 )
    {
      common::milog::MiLogStream::create(
        &v208,
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/player/gm/player_gm_comp.cpp",
        "addItem",
        4205);
      common::milog::MiLogStream::operator<<<char [25],(char *[25])0>(
        &v208,
        (const char (*)[25])"usage: ITEM FULL type id");
      common::milog::MiLogStream::~MiLogStream(&v208);
      v3 = -1;
      goto LABEL_319;
    }
    *(_DWORD *)(v4 + 64) = 0;
    v142 = std::vector<std::string>::operator[](param_vec, 2uLL);
    common::tools::StringUtils::strToNum<unsigned int>(v142, (unsigned int *)(v4 + 64), 1);
    *(_DWORD *)(v4 + 80) = 0;
    v143 = std::vector<std::string>::operator[](param_vec, 1uLL);
    if ( std::operator==<char>(v143, "WEAPON") )
    {
      ServiceBox::findService<GameserverService>();
      GameserverService::getConfig((GameserverService *const)(v4 + 160));
      v144 = std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 160));
      weapon_item_limit = ConstValueExcelConfigMgr::getWeaponItemLimit(&v144->design_config.txt_config_mgr.const_value_config_mgr);
      std::shared_ptr<Config>::~shared_ptr((std::shared_ptr<Config> *const)(v4 + 160));
      if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
        __asan_report_load8(&context->player);
      v145 = Player::getItemComp(context->player);
      have_weapon_num = PlayerItemComp::getTotalWeaponNum(v145);
      *(_DWORD *)(v4 + 80) = weapon_item_limit - have_weapon_num;
    }
    else
    {
      v146 = std::vector<std::string>::operator[](param_vec, 1uLL);
      if ( std::operator==<char>(v146, "RELIQUARY") )
      {
        ServiceBox::findService<GameserverService>();
        GameserverService::getConfig((GameserverService *const)(v4 + 160));
        v147 = std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 160));
        reliquary_item_limit = ConstValueExcelConfigMgr::getReliquaryItemLimit(&v147->design_config.txt_config_mgr.const_value_config_mgr);
        std::shared_ptr<Config>::~shared_ptr((std::shared_ptr<Config> *const)(v4 + 160));
        if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
          __asan_report_load8(&context->player);
        v148 = Player::getItemComp(context->player);
        have_reliquary_num = PlayerItemComp::getTotalReliquaryNum(v148);
        *(_DWORD *)(v4 + 80) = reliquary_item_limit - have_reliquary_num;
      }
    }
    *(_DWORD *)(v4 + 160) = 0;
    *(_DWORD *)(v4 + 164) = 0;
    *(_DWORD *)(v4 + 168) = 0;
    *(_DWORD *)(v4 + 172) = 0;
    *(_DWORD *)(v4 + 160) = *(_DWORD *)(v4 + 64);
    *(_DWORD *)(v4 + 164) = *(_DWORD *)(v4 + 80);
    ActionReason::ActionReason((ActionReason *const)(v4 + 320), ACTION_REASON_GM, ITEM_LIMIT_GM);
    if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
      __asan_report_load8(&context->player);
    v149 = Player::getItemComp(context->player);
    ret_1 = PlayerItemComp::checkAddItem(v149, (const ItemParam *)(v4 + 160), (const ActionReason *)(v4 + 320));
    if ( ret_1 )
    {
      common::milog::MiLogStream::create(
        &v208,
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/player/gm/player_gm_comp.cpp",
        "addItem",
        4230);
      v150 = common::milog::MiLogStream::operator<<<char [29],(char *[29])0>(
               &v208,
               (const char (*)[29])"checkAddItem fails, item_id:");
      v151 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
               v150,
               (const unsigned int *)(v4 + 64));
      v152 = common::milog::MiLogStream::operator<<<char [8],(char *[8])0>(v151, (const char (*)[8])" count:");
      common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v152, (const unsigned int *)(v4 + 80));
      common::milog::MiLogStream::~MiLogStream(&v208);
      v3 = ret_1;
      goto LABEL_319;
    }
    if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
      __asan_report_load8(&context->player);
LABEL_129:
    v64 = Player::getItemComp(context->player);
    v3 = PlayerItemComp::addItem(v64, (const ItemParam *)(v4 + 160), (const ActionReason *)(v4 + 320), 0LL);
    goto LABEL_319;
  }
  v153 = std::vector<std::string>::operator[](param_vec, 0LL);
  if ( !std::operator==<char>(v153, "FILTER") )
    goto LABEL_318;
  if ( std::vector<std::string>::size(param_vec) <= 2 )
  {
    common::milog::MiLogStream::create(
      &v208,
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/player/gm/player_gm_comp.cpp",
      "addItem",
      4239);
    common::milog::MiLogStream::operator<<<char [36],(char *[36])0>(
      &v208,
      (const char (*)[36])"usage: ITEM FILTER param not enough");
    common::milog::MiLogStream::~MiLogStream(&v208);
    v3 = -1;
    goto LABEL_319;
  }
  *(_DWORD *)(v4 + 48) = 0;
  v154 = std::vector<std::string>::operator[](param_vec, 1uLL);
  if ( common::tools::StringUtils::strToNum<int>(v154, (int *)(v4 + 48), 1) )
  {
    common::milog::MiLogStream::create(
      &v208,
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/player/gm/player_gm_comp.cpp",
      "addItem",
      4245);
    v155 = common::milog::MiLogStream::operator<<<char [15],(char *[15])0>(&v208, (const char (*)[15])"invalid param:");
    common::milog::MiLogStream::operator<<<std::string>(v155, param_vec);
    common::milog::MiLogStream::~MiLogStream(&v208);
    v3 = -1;
    goto LABEL_319;
  }
  *(_DWORD *)(v4 + 64) = 0;
  v156 = std::vector<std::string>::operator[](param_vec, 2uLL);
  if ( common::tools::StringUtils::strToNum<int>(v156, (int *)(v4 + 64), 1) )
  {
    common::milog::MiLogStream::create(
      &v208,
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/player/gm/player_gm_comp.cpp",
      "addItem",
      4252);
    v157 = common::milog::MiLogStream::operator<<<char [15],(char *[15])0>(&v208, (const char (*)[15])"invalid param:");
    common::milog::MiLogStream::operator<<<std::string>(v157, param_vec);
    common::milog::MiLogStream::~MiLogStream(&v208);
    v3 = -1;
    goto LABEL_319;
  }
  std::shared_ptr<common::minet::Packet>::shared_ptr((std::shared_ptr<common::minet::Packet> *const)(v4 + 128), 0LL);
  proto::ReliquaryFilterStateSaveNotify::ReliquaryFilterStateSaveNotify((proto::ReliquaryFilterStateSaveNotify *const)(v4 + 640));
  test_map = proto::ReliquaryFilterStateSaveNotify::mutable_reliquary_filter_state_map((proto::ReliquaryFilterStateSaveNotify *const)(v4 + 640));
  v158 = *(_DWORD *)(v4 + 64);
  *(_DWORD *)(v4 + 80) = *(_DWORD *)(v4 + 48);
  v159 = (char *)(v4 + 80);
  v160 = google::protobuf::Map<unsigned int,unsigned int>::operator[](
           test_map,
           (const google::protobuf::Map<unsigned int,unsigned int>::key_type *)(v4 + 80));
  v161 = v160;
  v162 = *(_BYTE *)(((unsigned __int64)v160 >> 3) + 0x7FFF8000);
  if ( v162 != 0 && (char)(((unsigned __int8)v160 & 7) + 3) >= v162 )
  {
    LOBYTE(v159) = v162 != 0;
    __asan_report_store4(v160, v159, v160);
  }
  *v161 = v158;
  common::minet::PacketUtils::createPacket<proto::ReliquaryFilterStateSaveNotify>((const proto::ReliquaryFilterStateSaveNotify *)(v4 + 160));
  std::shared_ptr<common::minet::Packet>::operator=(
    (std::shared_ptr<common::minet::Packet> *const)(v4 + 128),
    (std::shared_ptr<common::minet::Packet> *)(v4 + 160));
  std::shared_ptr<common::minet::Packet>::~shared_ptr((std::shared_ptr<common::minet::Packet> *const)(v4 + 160));
  if ( std::operator==<common::minet::Packet>((const std::shared_ptr<common::minet::Packet> *)(v4 + 128), 0LL) )
  {
    common::milog::MiLogStream::create(
      &v208,
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/player/gm/player_gm_comp.cpp",
      "addItem",
      4264);
    v163 = common::milog::MiLogStream::operator<<<char [26],(char *[26])0>(
             &v208,
             (const char (*)[26])"createPacket failed, uid:");
    if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
      __asan_report_load8(&context->player);
    operator<<(v163, context->player);
    common::milog::MiLogStream::~MiLogStream(&v208);
    v3 = -1;
    v164 = 0;
  }
  else
  {
    v165 = std::__shared_ptr_access<common::minet::Packet,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<common::minet::Packet,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 128));
    if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
      __asan_report_load8(&context->player);
    Uid = Player::getUid(context->player);
    common::minet::Packet::setUserId(v165, Uid);
    v167 = ServiceBox::findService<GameserverService>();
    std::shared_ptr<common::minet::Packet>::shared_ptr(
      (std::shared_ptr<common::minet::Packet> *const)(v4 + 160),
      (const std::shared_ptr<common::minet::Packet> *)(v4 + 128));
    GameserverService::setPacketGameThreadIndex(v167, (common::minet::PacketPtr *)(v4 + 160));
    std::shared_ptr<common::minet::Packet>::~shared_ptr((std::shared_ptr<common::minet::Packet> *const)(v4 + 160));
    v168._M_refcount._M_pi = (std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)2> *)(v4 + 128);
    std::shared_ptr<common::minet::Packet>::shared_ptr(
      (std::shared_ptr<common::minet::Packet> *const)(v4 + 160),
      (const std::shared_ptr<common::minet::Packet> *)(v4 + 128));
    v168._M_ptr = (std::__shared_ptr<common::minet::Packet,(__gnu_cxx::_Lock_policy)2>::element_type *)(v4 + 160);
    ServiceBox::pushPacketToService(v168);
    std::shared_ptr<common::minet::Packet>::~shared_ptr((std::shared_ptr<common::minet::Packet> *const)(v4 + 160));
    v164 = 1;
  }
  proto::ReliquaryFilterStateSaveNotify::~ReliquaryFilterStateSaveNotify((proto::ReliquaryFilterStateSaveNotify *const)(v4 + 640));
  std::shared_ptr<common::minet::Packet>::~shared_ptr((std::shared_ptr<common::minet::Packet> *const)(v4 + 128));
  if ( v164 == 1 )
LABEL_318:
    v3 = 0;
LABEL_319:
  result = v3;
  if ( v210 == (char *)v4 )
  {
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8008) = 0LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8010) = 0LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8018) = 0LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8020) = 0LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8028) = 0LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8034) = 0LL;
    *(_DWORD *)((v4 >> 3) + 0x7FFF8040) = 0;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8048) = 0LL;
    *(_DWORD *)((v4 >> 3) + 0x7FFF805C) = 0;
  }
  else
  {
    *(_QWORD *)v4 = 1172321806LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8020) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8028) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8030) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8038) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8040) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8048) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8050) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8058) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 4274: range 0000000017D7465C-0000000017D746FE
void __cdecl procReliquaryGuaranteeRegister::procReliquaryGuaranteeRegister(procReliquaryGuaranteeRegister *const this)
{
  std::function<int(GmContext&,const std::vector<std::string>&,std::string&)> *v1; // rax
  std::allocator<char> __a; // [rsp+1Fh] [rbp-31h] BYREF
  std::string __k; // [rsp+20h] [rbp-30h] BYREF

  std::allocator<char>::allocator(&__a);
  std::string::basic_string<std::allocator<char>>(&__k, "RELIQUARY_GUARANTEE", &__a);
  v1 = std::unordered_map<std::string,std::function<int ()(GmContext &,std::vector<std::string> const&,std::string&)>>::operator[](
         &GmUtils::op_func_map[abi:cxx11],
         &__k);
  std::function<int ()(GmContext &,std::vector<std::string> const&,std::string&)>::operator=<int (&)(GmContext &,std::vector<std::string> const&,std::string&)>(
    v1,
    (int (*)(GmContext *, const std::vector<std::string> *, std::string *))procReliquaryGuarantee);
  std::string::~string(&__k);
  std::allocator<char>::~allocator(&__a);
};

// Line 4275: range 0000000017BE1EA3-0000000017BE4300
int32_t __cdecl procReliquaryGuarantee(
        GmContext *context,
        const std::vector<std::string> *param_vec,
        std::string *ret_msg)
{
  int32_t v3; // r14d
  unsigned __int64 v4; // r13
  __int64 v5; // rax
  _DWORD *v6; // r12
  const std::string *v7; // rax
  const std::string *v8; // rax
  __int64 v9; // rax
  __int64 v10; // rcx
  __int64 v11; // rax
  __int64 v12; // rcx
  __int64 v13; // rax
  const std::string *v14; // rax
  const std::string *v15; // rax
  const std::string *v16; // rax
  const std::string *v17; // rax
  bool v18; // r15
  int v19; // r15d
  std::_Rb_tree_iterator<std::pair<unsigned int const,unsigned int> >::reference v20; // rax
  _QWORD *v21; // rdx
  ReliquaryExcelConfigMgr *p_reliquary_config_mgr; // rcx
  bool v23; // r15
  std::_Rb_tree_iterator<std::pair<unsigned int const,unsigned int> >::reference v24; // rax
  _QWORD *v25; // rdx
  unsigned __int64 v26; // rax
  std::_Rb_tree_iterator<std::pair<unsigned int const,unsigned int> >::reference v27; // rax
  _QWORD *v28; // rdx
  __int64 v29; // rax
  __int64 v30; // rcx
  __int64 v31; // rax
  const std::string *v32; // rax
  uint32_t v34; // esi
  int v35; // r15d
  const std::shared_ptr<Item> *v36; // rax
  std::__shared_ptr_access<Reliquary,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v37; // rax
  unsigned __int64 v38; // rax
  int v39; // r15d
  common::tools::StringStream<common::tools::FixedBuffer<4096> > *v40; // rax
  common::tools::StringStream<common::tools::FixedBuffer<4096> > *v41; // rax
  common::tools::StringStream<common::tools::FixedBuffer<4096> > *v42; // rax
  common::tools::StringStream<common::tools::FixedBuffer<4096> > *v43; // rax
  const std::string *v44; // rax
  uint32_t v45; // esi
  int v46; // r15d
  const std::shared_ptr<Item> *v47; // rax
  std::__shared_ptr_access<Reliquary,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v48; // rax
  std::__shared_ptr_access<Reliquary,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v49; // rax
  unsigned int ItemId; // eax
  common::tools::StringStream<common::tools::FixedBuffer<4096> > *v51; // rax
  common::tools::StringStream<common::tools::FixedBuffer<4096> > *v52; // r15
  std::__shared_ptr_access<Reliquary,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v53; // rax
  unsigned int MainPropId; // eax
  const std::string *v55; // rax
  bool v56; // r15
  _BOOL4 v57; // r15d
  size_t v58; // rax
  const std::string *v59; // rax
  bool v60; // r15
  const std::string *v61; // rax
  int v62; // r15d
  const std::string *v63; // rax
  std::vector<unsigned int>::reference v64; // rax
  _DWORD *v65; // rdx
  std::vector<unsigned int>::reference v66; // rax
  _DWORD *v67; // rdx
  std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v68; // rax
  bool v69; // r15
  unsigned int *v70; // r8
  std::pair<std::_Rb_tree_iterator<std::pair<unsigned int const,unsigned int> >,bool> v71; // rax
  int v72; // r15d
  unsigned int *v73; // rax
  uint32_t *v74; // rdx
  std::_Rb_tree_iterator<std::pair<unsigned int const,unsigned int> >::reference v75; // rax
  _QWORD *v76; // rdx
  std::tuple_element<1,std::pair<unsigned int const,unsigned int> >::type *v77; // rax
  std::tuple_element<1,std::pair<unsigned int const,unsigned int> >::type v78; // r15d
  std::tuple_element<0,std::pair<unsigned int const,unsigned int> >::type *v79; // rsi
  std::map<unsigned int,ReliquaryMainPropGuaranteeData>::mapped_type *v80; // rax
  std::tuple_element<1,std::pair<unsigned int const,unsigned int> >::type *v81; // rdx
  char v82; // cl
  int32_t result; // eax
  std::allocator<char> v86; // [rsp+29h] [rbp-5E7h] BYREF
  std::allocator<char> __a; // [rsp+2Ah] [rbp-5E6h] BYREF
  bool is_first; // [rsp+2Bh] [rbp-5E5h]
  uint32_t i; // [rsp+2Ch] [rbp-5E4h]
  uint32_t idx; // [rsp+30h] [rbp-5E0h]
  uint32_t depot_id; // [rsp+34h] [rbp-5DCh]
  std::set<unsigned int>::iterator __for_begin_0; // [rsp+38h] [rbp-5D8h] BYREF
  std::set<unsigned int>::iterator __for_end_0; // [rsp+40h] [rbp-5D0h] BYREF
  std::map<unsigned int,unsigned int>::iterator __for_begin; // [rsp+48h] [rbp-5C8h] BYREF
  std::map<unsigned int,unsigned int>::iterator __for_end; // [rsp+50h] [rbp-5C0h] BYREF
  size_t i_0; // [rsp+58h] [rbp-5B8h]
  PlayerItemComp *item_comp; // [rsp+60h] [rbp-5B0h]
  std::set<unsigned int> *__for_range_5; // [rsp+68h] [rbp-5A8h]
  ReliquaryGuaranteeDepot *depot_ptr_0; // [rsp+70h] [rbp-5A0h]
  std::map<unsigned int,ReliquaryMainPropGuaranteeData> *main_prop_guarantee_data_map; // [rsp+78h] [rbp-598h]
  std::map<unsigned int,unsigned int> *__for_range_6; // [rsp+80h] [rbp-590h]
  std::tuple_element<0,std::pair<unsigned int const,unsigned int> >::type *main_prop_id_1; // [rsp+88h] [rbp-588h]
  std::tuple_element<1,std::pair<unsigned int const,unsigned int> >::type *miss_count; // [rsp+90h] [rbp-580h]
  std::vector<std::shared_ptr<Item>> *__for_range_4; // [rsp+98h] [rbp-578h]
  const data::ReliquaryExcelConfig *reliquary_config_ptr; // [rsp+A0h] [rbp-570h]
  std::vector<std::shared_ptr<Item>> *__for_range_3; // [rsp+A8h] [rbp-568h]
  std::map<unsigned int,unsigned int> *__for_range_0; // [rsp+B0h] [rbp-560h]
  std::map<unsigned int,unsigned int> *__for_range_1; // [rsp+B8h] [rbp-558h]
  std::map<unsigned int,unsigned int> *__for_range_2; // [rsp+C0h] [rbp-550h]
  std::tuple_element<0,std::pair<unsigned int const,unsigned int> >::type *main_prop_id_0; // [rsp+C8h] [rbp-548h]
  std::tuple_element<1,std::pair<unsigned int const,unsigned int> >::type *count; // [rsp+D0h] [rbp-540h]
  std::tuple_element<0,std::pair<unsigned int const,unsigned int> >::type *reliquary_id_0; // [rsp+D8h] [rbp-538h]
  std::tuple_element<1,std::pair<unsigned int const,unsigned int> >::type *generate_count_0; // [rsp+E0h] [rbp-530h]
  std::tuple_element<0,std::pair<unsigned int const,unsigned int> >::type *reliquary_id; // [rsp+E8h] [rbp-528h]
  std::tuple_element<1,std::pair<unsigned int const,unsigned int> >::type *generate_count; // [rsp+F0h] [rbp-520h]
  const ReliquaryGuaranteeDepot *depot_ptr; // [rsp+F8h] [rbp-518h]
  const std::map<unsigned int,ReliquaryMainPropGuaranteeData> *__for_range; // [rsp+100h] [rbp-510h]
  const std::pair<unsigned int const,ReliquaryMainPropGuaranteeData> *v118; // [rsp+108h] [rbp-508h]
  std::tuple_element<0,const std::pair<unsigned int const,ReliquaryMainPropGuaranteeData> >::type *main_prop_id; // [rsp+110h] [rbp-500h]
  std::tuple_element<1,const std::pair<unsigned int const,ReliquaryMainPropGuaranteeData> >::type *data; // [rsp+118h] [rbp-4F8h]
  std::string v121; // [rsp+120h] [rbp-4F0h] BYREF
  std::string v122; // [rsp+140h] [rbp-4D0h] BYREF
  std::string v123; // [rsp+160h] [rbp-4B0h] BYREF
  std::string v124; // [rsp+180h] [rbp-490h] BYREF
  std::string sep_1; // [rsp+1A0h] [rbp-470h] BYREF
  std::string sep_2; // [rsp+1C0h] [rbp-450h] BYREF
  char v127[1072]; // [rsp+1E0h] [rbp-430h] BYREF

  v4 = (unsigned __int64)v127;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v5 = __asan_stack_malloc_4(1024LL);
    if ( v5 )
      v4 = v5;
  }
  *(_QWORD *)v4 = 1102416563LL;
  *(_QWORD *)(v4 + 8) = "13 32 4 12 drop_id:4351 48 4 17 main_prop_id:4447 64 4 15 miss_count:4448 80 8 18 output_result:"
                        "4365 112 16 7 ss:4401 144 16 13 item_ptr:4403 176 16 18 reliquary_ptr:4374 208 24 18 action_reas"
                        "on:4393 272 24 19 item_param_vec:4394 336 24 8 vec:4436 400 48 17 depot_id_set:4426 480 48 19 mi"
                        "ss_count_map:4433 560 392 7 ss:4342";
  *(_QWORD *)(v4 + 16) = procReliquaryGuarantee;
  v6 = (_DWORD *)(v4 >> 3);
  v6[536862720] = -235802127;
  v6[536862721] = -234556924;
  v6[536862722] = 61956;
  v6[536862722] = -234881024;
  v6[536862723] = 62194;
  v6[536862724] = 62194;
  v6[536862725] = 62194;
  v6[536862726] = 62194;
  v6[536862727] = -218959360;
  v6[536862728] = 62194;
  v6[536862729] = -218959360;
  v6[536862730] = 62194;
  v6[536862731] = -218959360;
  v6[536862732] = 62194;
  v6[536862734] = -218959118;
  v6[536862736] = -219021312;
  v6[536862737] = 62194;
  v6[536862749] = -218103808;
  v6[536862750] = -202116109;
  v6[536862751] = -202116109;
  if ( std::vector<std::string>::size(param_vec) <= 1 )
  {
    std::string::operator=(ret_msg, "param size less than 2");
    v3 = -1;
    goto LABEL_164;
  }
  if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
    __asan_report_load8(&context->player);
  item_comp = Player::getItemComp(context->player);
  v7 = std::vector<std::string>::operator[](param_vec, 0LL);
  if ( std::operator==<char>(v7, "PRINT") )
  {
    *(_DWORD *)(v4 + 64) = 0;
    v8 = std::vector<std::string>::operator[](param_vec, 1uLL);
    if ( common::tools::StringUtils::strToNum<unsigned int>(v8, (unsigned int *)(v4 + 64), 1) )
    {
LABEL_10:
      std::string::operator=(ret_msg, "parse depot_id fail");
      v3 = -1;
      goto LABEL_164;
    }
    depot_ptr = PlayerItemComp::getReliquaryGuaranteeDepotByGm(item_comp, *(_DWORD *)(v4 + 64));
    if ( !depot_ptr )
    {
      std::string::operator=(ret_msg, "depot not found");
      v3 = -1;
      goto LABEL_164;
    }
    std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream(v4 + 560);
    __for_range = &depot_ptr->main_prop_guarantee_data_map;
    __for_end._M_node = (std::_Rb_tree_iterator<std::pair<unsigned int const,unsigned int> >::_Base_ptr)std::map<unsigned int,ReliquaryMainPropGuaranteeData>::begin(&depot_ptr->main_prop_guarantee_data_map)._M_node;
    *(std::map<unsigned int,ReliquaryMainPropGuaranteeData>::const_iterator *)(v4 + 80) = std::map<unsigned int,ReliquaryMainPropGuaranteeData>::end(&depot_ptr->main_prop_guarantee_data_map);
    while ( std::operator!=(
              (const std::_Rb_tree_const_iterator<std::pair<unsigned int const,ReliquaryMainPropGuaranteeData> >::_Self *)&__for_end,
              (const std::_Rb_tree_const_iterator<std::pair<unsigned int const,ReliquaryMainPropGuaranteeData> >::_Self *)(v4 + 80)) )
    {
      v118 = std::_Rb_tree_const_iterator<std::pair<unsigned int const,ReliquaryMainPropGuaranteeData>>::operator*((const std::_Rb_tree_const_iterator<std::pair<unsigned int const,ReliquaryMainPropGuaranteeData> > *const)&__for_end);
      main_prop_id = std::get<0ul,unsigned int const,ReliquaryMainPropGuaranteeData>(v118);
      data = (std::tuple_element<1,const std::pair<unsigned int const,ReliquaryMainPropGuaranteeData> >::type *)std::get<1ul,unsigned int const,ReliquaryMainPropGuaranteeData>(v118);
      if ( *(_BYTE *)(((unsigned __int64)main_prop_id >> 3) + 0x7FFF8000) != 0
        && (char)(((unsigned __int8)main_prop_id & 7) + 3) >= *(_BYTE *)(((unsigned __int64)main_prop_id >> 3)
                                                                       + 0x7FFF8000) )
      {
        __asan_report_load4(main_prop_id);
      }
      v9 = std::ostream::operator<<(v4 + 576, *main_prop_id);
      v10 = std::operator<<<std::char_traits<char>>(v9, ":");
      if ( *(_BYTE *)(((unsigned __int64)data >> 3) + 0x7FFF8000) != 0
        && (char)(((unsigned __int8)data & 7) + 3) >= *(_BYTE *)(((unsigned __int64)data >> 3) + 0x7FFF8000) )
      {
        __asan_report_load4(data);
      }
      v11 = std::ostream::operator<<(v10, data->miss_count);
      v12 = std::operator<<<std::char_traits<char>>(v11, "/");
      if ( *(_BYTE *)(((unsigned __int64)&data->guarantee_count >> 3) + 0x7FFF8000) != 0
        && (char)((((_BYTE)data + 4) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&data->guarantee_count >> 3) + 0x7FFF8000) )
      {
        __asan_report_load4(&data->guarantee_count);
      }
      v13 = std::ostream::operator<<(v12, data->guarantee_count);
      std::operator<<<std::char_traits<char>>(v13, " ");
      std::_Rb_tree_const_iterator<std::pair<unsigned int const,ReliquaryMainPropGuaranteeData>>::operator++((std::_Rb_tree_const_iterator<std::pair<unsigned int const,ReliquaryMainPropGuaranteeData> > *const)&__for_end);
    }
    std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::str(&sep_2, v4 + 560);
    std::string::operator=(ret_msg, &sep_2);
    std::string::~string(&sep_2);
    std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream(v4 + 560);
    goto LABEL_163;
  }
  v14 = std::vector<std::string>::operator[](param_vec, 0LL);
  if ( std::operator==<char>(v14, "CLEAR") )
  {
    *(_DWORD *)(v4 + 64) = 0;
    v15 = std::vector<std::string>::operator[](param_vec, 1uLL);
    if ( common::tools::StringUtils::strToNum<unsigned int>(v15, (unsigned int *)(v4 + 64), 1) )
      goto LABEL_10;
    PlayerItemComp::clearReliquaryGuaranteeDepotByGm(item_comp, *(_DWORD *)(v4 + 64));
    goto LABEL_163;
  }
  v16 = std::vector<std::string>::operator[](param_vec, 0LL);
  if ( common::tools::StringUtils::isStartsWith(v16, off_26358140) )
  {
    std::map<unsigned int,unsigned int>::map((std::map<unsigned int,unsigned int> *const)(v4 + 400));
    std::allocator<char>::allocator(&__a);
    std::string::basic_string<std::allocator<char>>(&sep_2, ":", &__a);
    std::allocator<char>::allocator(&v86);
    std::string::basic_string<std::allocator<char>>(&sep_1, ",", &v86);
    v17 = std::vector<std::string>::operator[](param_vec, 1uLL);
    v18 = common::tools::StringUtils::splitToMap<unsigned int,unsigned int>(
            v17,
            &sep_1,
            &sep_2,
            (std::map<unsigned int,unsigned int> *)(v4 + 400),
            0) != 0;
    std::string::~string(&sep_1);
    std::allocator<char>::~allocator(&v86);
    std::string::~string(&sep_2);
    std::allocator<char>::~allocator(&__a);
    if ( v18 )
    {
      std::string::operator=(ret_msg, "parse map[reliquary,generate_count] fail");
      v3 = -1;
      v19 = 0;
    }
    else
    {
      __for_range_0 = (std::map<unsigned int,unsigned int> *)(v4 + 400);
      __for_begin._M_node = std::map<unsigned int,unsigned int>::begin((std::map<unsigned int,unsigned int> *const)(v4 + 400))._M_node;
      __for_end._M_node = std::map<unsigned int,unsigned int>::end(__for_range_0)._M_node;
      while ( std::operator!=(&__for_begin, &__for_end) )
      {
        v20 = std::_Rb_tree_iterator<std::pair<unsigned int const,unsigned int>>::operator*(&__for_begin);
        v21 = v20;
        if ( ((unsigned __int8)v20 & 7) >= *(_BYTE *)(((unsigned __int64)v20 >> 3) + 0x7FFF8000)
          && *(_BYTE *)(((unsigned __int64)v20 >> 3) + 0x7FFF8000) != 0
          || *(_BYTE *)((((unsigned __int64)&v20->second + 3) >> 3) + 0x7FFF8000) != 0
          && (((unsigned __int8)v20 + 7) & 7) >= *(_BYTE *)((((unsigned __int64)&v20->second + 3) >> 3) + 0x7FFF8000) )
        {
          __asan_report_load_n(v20, 8LL);
        }
        *(_QWORD *)(v4 + 80) = *v21;
        reliquary_id = std::get<0ul,unsigned int const,unsigned int>((std::pair<unsigned int const,unsigned int> *)(v4 + 80));
        generate_count = std::get<1ul,unsigned int const,unsigned int>((std::pair<unsigned int const,unsigned int> *)(v4 + 80));
        ServiceBox::findService<GameserverService>();
        GameserverService::getConfig((GameserverService *const)(v4 + 176));
        p_reliquary_config_mgr = &std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 176))->design_config.txt_config_mgr.reliquary_config_mgr;
        if ( *(_BYTE *)(((unsigned __int64)reliquary_id >> 3) + 0x7FFF8000) != 0
          && (char)(((unsigned __int8)reliquary_id & 7) + 3) >= *(_BYTE *)(((unsigned __int64)reliquary_id >> 3)
                                                                         + 0x7FFF8000) )
        {
          __asan_report_load4(reliquary_id);
        }
        v23 = data::ReliquaryExcelConfigMgrBase::findReliquaryExcelConfig(p_reliquary_config_mgr, *reliquary_id) == 0LL;
        std::shared_ptr<Config>::~shared_ptr((std::shared_ptr<Config> *const)(v4 + 176));
        if ( v23 )
        {
          if ( *(_BYTE *)(((unsigned __int64)reliquary_id >> 3) + 0x7FFF8000) != 0
            && (char)(((unsigned __int8)reliquary_id & 7) + 3) >= *(_BYTE *)(((unsigned __int64)reliquary_id >> 3)
                                                                           + 0x7FFF8000) )
          {
            __asan_report_load4(reliquary_id);
          }
          std::to_string(&sep_2, *reliquary_id);
          std::operator+<char>(&sep_1, "findReliquaryExcelConfig fail, reliquary_id:", &sep_2);
          std::string::operator=(ret_msg, &sep_1);
          std::string::~string(&sep_1);
          std::string::~string(&sep_2);
          v3 = -1;
          goto LABEL_46;
        }
        if ( *(_BYTE *)(((unsigned __int64)generate_count >> 3) + 0x7FFF8000) != 0
          && (char)(((unsigned __int8)generate_count & 7) + 3) >= *(_BYTE *)(((unsigned __int64)generate_count >> 3)
                                                                           + 0x7FFF8000) )
        {
          __asan_report_load4(generate_count);
        }
        if ( !*generate_count || *generate_count > 0xF4240 )
        {
          std::string::operator=(ret_msg, "generate_count is 0 or greater than 1000000");
          v3 = -1;
LABEL_46:
          v19 = 0;
          goto LABEL_70;
        }
        std::_Rb_tree_iterator<std::pair<unsigned int const,unsigned int>>::operator++(&__for_begin);
      }
      std::map<unsigned int,unsigned int>::map((std::map<unsigned int,unsigned int> *const)(v4 + 480));
      __for_range_1 = (std::map<unsigned int,unsigned int> *)(v4 + 400);
      __for_begin._M_node = std::map<unsigned int,unsigned int>::begin((std::map<unsigned int,unsigned int> *const)(v4 + 400))._M_node;
      __for_end._M_node = std::map<unsigned int,unsigned int>::end(__for_range_1)._M_node;
      while ( std::operator!=(&__for_begin, &__for_end) )
      {
        v24 = std::_Rb_tree_iterator<std::pair<unsigned int const,unsigned int>>::operator*(&__for_begin);
        v25 = v24;
        if ( ((unsigned __int8)v24 & 7) >= *(_BYTE *)(((unsigned __int64)v24 >> 3) + 0x7FFF8000)
          && *(_BYTE *)(((unsigned __int64)v24 >> 3) + 0x7FFF8000) != 0
          || *(_BYTE *)((((unsigned __int64)&v24->second + 3) >> 3) + 0x7FFF8000) != 0
          && (((unsigned __int8)v24 + 7) & 7) >= *(_BYTE *)((((unsigned __int64)&v24->second + 3) >> 3) + 0x7FFF8000) )
        {
          __asan_report_load_n(v24, 8LL);
        }
        *(_QWORD *)(v4 + 80) = *v25;
        reliquary_id_0 = std::get<0ul,unsigned int const,unsigned int>((std::pair<unsigned int const,unsigned int> *)(v4 + 80));
        generate_count_0 = std::get<1ul,unsigned int const,unsigned int>((std::pair<unsigned int const,unsigned int> *)(v4 + 80));
        for ( i = 0; ; ++i )
        {
          if ( *(_BYTE *)(((unsigned __int64)generate_count_0 >> 3) + 0x7FFF8000) != 0
            && (char)(((unsigned __int8)generate_count_0 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)generate_count_0 >> 3)
                                                                               + 0x7FFF8000) )
          {
            __asan_report_load4(generate_count_0);
          }
          if ( i >= *generate_count_0 )
            break;
          if ( *(_BYTE *)(((unsigned __int64)reliquary_id_0 >> 3) + 0x7FFF8000) != 0
            && (char)(((unsigned __int8)reliquary_id_0 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)reliquary_id_0 >> 3)
                                                                             + 0x7FFF8000) )
          {
            __asan_report_load4(reliquary_id_0);
          }
          *(_DWORD *)(v4 + 64) = PlayerItemComp::generateReliquaryMainPropId(item_comp, *reliquary_id_0);
          v26 = (unsigned __int64)std::map<unsigned int,unsigned int>::operator[](
                                    (std::map<unsigned int,unsigned int> *const)(v4 + 480),
                                    (std::map<unsigned int,unsigned int>::key_type *)(v4 + 64));
          if ( *(_BYTE *)((v26 >> 3) + 0x7FFF8000) != 0 && (char)((v26 & 7) + 3) >= *(_BYTE *)((v26 >> 3) + 0x7FFF8000) )
            v26 = __asan_report_load4(v26);
          ++*(_DWORD *)v26;
        }
        std::_Rb_tree_iterator<std::pair<unsigned int const,unsigned int>>::operator++(&__for_begin);
      }
      std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream(v4 + 560);
      __for_range_2 = (std::map<unsigned int,unsigned int> *)(v4 + 480);
      __for_begin._M_node = std::map<unsigned int,unsigned int>::begin((std::map<unsigned int,unsigned int> *const)(v4 + 480))._M_node;
      __for_end._M_node = std::map<unsigned int,unsigned int>::end(__for_range_2)._M_node;
      while ( std::operator!=(&__for_begin, &__for_end) )
      {
        v27 = std::_Rb_tree_iterator<std::pair<unsigned int const,unsigned int>>::operator*(&__for_begin);
        v28 = v27;
        if ( ((unsigned __int8)v27 & 7) >= *(_BYTE *)(((unsigned __int64)v27 >> 3) + 0x7FFF8000)
          && *(_BYTE *)(((unsigned __int64)v27 >> 3) + 0x7FFF8000) != 0
          || *(_BYTE *)((((unsigned __int64)&v27->second + 3) >> 3) + 0x7FFF8000) != 0
          && (((unsigned __int8)v27 + 7) & 7) >= *(_BYTE *)((((unsigned __int64)&v27->second + 3) >> 3) + 0x7FFF8000) )
        {
          __asan_report_load_n(v27, 8LL);
        }
        *(_QWORD *)(v4 + 80) = *v28;
        main_prop_id_0 = std::get<0ul,unsigned int const,unsigned int>((std::pair<unsigned int const,unsigned int> *)(v4 + 80));
        count = std::get<1ul,unsigned int const,unsigned int>((std::pair<unsigned int const,unsigned int> *)(v4 + 80));
        if ( *(_BYTE *)(((unsigned __int64)main_prop_id_0 >> 3) + 0x7FFF8000) != 0
          && (char)(((unsigned __int8)main_prop_id_0 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)main_prop_id_0 >> 3)
                                                                           + 0x7FFF8000) )
        {
          __asan_report_load4(main_prop_id_0);
        }
        v29 = std::ostream::operator<<(v4 + 576, *main_prop_id_0);
        v30 = std::operator<<<std::char_traits<char>>(v29, ":");
        if ( *(_BYTE *)(((unsigned __int64)count >> 3) + 0x7FFF8000) != 0
          && (char)(((unsigned __int8)count & 7) + 3) >= *(_BYTE *)(((unsigned __int64)count >> 3) + 0x7FFF8000) )
        {
          __asan_report_load4(count);
        }
        v31 = std::ostream::operator<<(v30, *count);
        std::operator<<<std::char_traits<char>>(v31, " ");
        std::_Rb_tree_iterator<std::pair<unsigned int const,unsigned int>>::operator++(&__for_begin);
      }
      std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::str(&sep_2, v4 + 560);
      std::string::operator=(ret_msg, &sep_2);
      std::string::~string(&sep_2);
      std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream(v4 + 560);
      std::map<unsigned int,unsigned int>::~map((std::map<unsigned int,unsigned int> *const)(v4 + 480));
      v19 = 1;
    }
LABEL_70:
    std::map<unsigned int,unsigned int>::~map((std::map<unsigned int,unsigned int> *const)(v4 + 400));
    if ( v19 == 1 )
LABEL_163:
      v3 = 0;
  }
  else
  {
    v32 = std::vector<std::string>::operator[](param_vec, 0LL);
    if ( std::operator==<char>(v32, "DROP") )
    {
      *(_DWORD *)(v4 + 32) = 0;
      *(_DWORD *)(v4 + 48) = 0;
      if ( common::tools::StringUtils::strVecToNum<1u,unsigned int,unsigned int &>(
             param_vec,
             (unsigned int *)(v4 + 32),
             (unsigned int *)(v4 + 48),
             (unsigned int *)(v4 + 32))
        || *(_DWORD *)(v4 + 48) > 0xF4240u )
      {
        std::string::operator=(ret_msg, "parse drop_id and drop_count fail, or drop_count is greater than 1000000");
        v3 = -1;
        goto LABEL_164;
      }
      ActionReason::ActionReason((ActionReason *const)(v4 + 208), ACTION_REASON_GM, ITEM_LIMIT_GM);
      std::map<unsigned int,unsigned int>::map((std::map<unsigned int,unsigned int> *const)(v4 + 400));
      std::map<unsigned int,unsigned int>::map((std::map<unsigned int,unsigned int> *const)(v4 + 480));
      for ( idx = 0; idx < *(_DWORD *)(v4 + 48); ++idx )
      {
        std::vector<ItemParam>::vector((std::vector<ItemParam> *const)(v4 + 272));
        v34 = *(_DWORD *)(v4 + 32);
        if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
          __asan_report_load8(&context->player);
        *(OutputResult *)(v4 + 80) = DropUtils::dropItems(
                                       context->player,
                                       v34,
                                       1u,
                                       (const ActionReason *)(v4 + 208),
                                       (std::vector<ItemParam> *)(v4 + 272));
        if ( *(_DWORD *)(v4 + 80) )
        {
          std::string::operator=(ret_msg, "dropItems fail");
          v3 = *(_DWORD *)(v4 + 80);
          v35 = 0;
        }
        else
        {
          ItemParam::addVecToItemCountMap(
            (const std::vector<ItemParam> *)(v4 + 272),
            (std::map<unsigned int,unsigned int> *)(v4 + 400));
          PlayerItemComp::createItemBatch(
            (std::vector<std::shared_ptr<Item>> *)(v4 + 336),
            item_comp,
            (const std::vector<ItemParam> *)(v4 + 272));
          __for_range_3 = (std::vector<std::shared_ptr<Item>> *)(v4 + 336);
          __for_begin._M_node = (std::_Rb_tree_iterator<std::pair<unsigned int const,unsigned int> >::_Base_ptr)std::vector<std::shared_ptr<Item>>::begin((std::vector<std::shared_ptr<Item>> *const)(v4 + 336))._M_current;
          __for_end._M_node = (std::_Rb_tree_iterator<std::pair<unsigned int const,unsigned int> >::_Base_ptr)std::vector<std::shared_ptr<Item>>::end(__for_range_3)._M_current;
          while ( __gnu_cxx::operator!=<std::shared_ptr<Item> *,std::vector<std::shared_ptr<Item>>>(
                    (const __gnu_cxx::__normal_iterator<std::shared_ptr<Item>*,std::vector<std::shared_ptr<Item>> > *)&__for_begin,
                    (const __gnu_cxx::__normal_iterator<std::shared_ptr<Item>*,std::vector<std::shared_ptr<Item>> > *)&__for_end) )
          {
            v36 = __gnu_cxx::__normal_iterator<std::shared_ptr<Item> *,std::vector<std::shared_ptr<Item>>>::operator*((const __gnu_cxx::__normal_iterator<std::shared_ptr<Item>*,std::vector<std::shared_ptr<Item>> > *const)&__for_begin);
            std::shared_ptr<Item>::shared_ptr((std::shared_ptr<Item> *const)(v4 + 144), v36);
            std::dynamic_pointer_cast<Reliquary,Item>((const std::shared_ptr<Item> *)(v4 + 176));
            if ( std::operator!=<Reliquary>(0LL, (const std::shared_ptr<Reliquary> *)(v4 + 176)) )
            {
              v37 = std::__shared_ptr_access<Reliquary,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Reliquary,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 176));
              *(_DWORD *)(v4 + 64) = Reliquary::getMainPropId(v37);
              v38 = (unsigned __int64)std::map<unsigned int,unsigned int>::operator[](
                                        (std::map<unsigned int,unsigned int> *const)(v4 + 480),
                                        (std::map<unsigned int,unsigned int>::key_type *)(v4 + 64));
              if ( *(_BYTE *)((v38 >> 3) + 0x7FFF8000) != 0
                && (char)((v38 & 7) + 3) >= *(_BYTE *)((v38 >> 3) + 0x7FFF8000) )
              {
                v38 = __asan_report_load4(v38);
              }
              ++*(_DWORD *)v38;
            }
            std::shared_ptr<Reliquary>::~shared_ptr((std::shared_ptr<Reliquary> *const)(v4 + 176));
            std::shared_ptr<Item>::~shared_ptr((std::shared_ptr<Item> *const)(v4 + 144));
            __gnu_cxx::__normal_iterator<std::shared_ptr<Item> *,std::vector<std::shared_ptr<Item>>>::operator++((__gnu_cxx::__normal_iterator<std::shared_ptr<Item>*,std::vector<std::shared_ptr<Item>> > *const)&__for_begin);
          }
          std::vector<std::shared_ptr<Item>>::~vector((std::vector<std::shared_ptr<Item>> *const)(v4 + 336));
          v35 = 1;
        }
        std::vector<ItemParam>::~vector((std::vector<ItemParam> *const)(v4 + 272));
        if ( v35 != 1 )
        {
          v39 = 0;
          goto LABEL_97;
        }
      }
      common::tools::StringStream<common::tools::FixedBuffer<4096>>::StringStream((common::tools::StringStream<common::tools::FixedBuffer<4096> > *const)(v4 + 176));
      v40 = common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<<std::string>(
              (common::tools::StringStream<common::tools::FixedBuffer<4096> > *const)(v4 + 176),
              param_vec);
      v41 = common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(v40, " item_map:");
      v42 = common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<<unsigned int,unsigned int>(
              v41,
              (const std::map<unsigned int,unsigned int> *)(v4 + 400));
      v43 = common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(v42, " main_prop_id_map:");
      common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<<unsigned int,unsigned int>(
        v43,
        (const std::map<unsigned int,unsigned int> *)(v4 + 480));
      common::tools::StringStream<common::tools::FixedBuffer<4096>>::str[abi:cxx11](
        &sep_2,
        (common::tools::StringStream<common::tools::FixedBuffer<4096> > *const)(v4 + 176));
      std::string::operator=(ret_msg, &sep_2);
      std::string::~string(&sep_2);
      common::tools::StringStream<common::tools::FixedBuffer<4096>>::~StringStream((common::tools::StringStream<common::tools::FixedBuffer<4096> > *const)(v4 + 176));
      v39 = 1;
LABEL_97:
      std::map<unsigned int,unsigned int>::~map((std::map<unsigned int,unsigned int> *const)(v4 + 480));
      std::map<unsigned int,unsigned int>::~map((std::map<unsigned int,unsigned int> *const)(v4 + 400));
      if ( v39 == 1 )
        goto LABEL_163;
    }
    else
    {
      v44 = std::vector<std::string>::operator[](param_vec, 0LL);
      if ( std::operator==<char>(v44, "MQM_DROP") )
      {
        *(_DWORD *)(v4 + 64) = 0;
        if ( common::tools::StringUtils::strVecToNum<1u,unsigned int>(param_vec, (unsigned int *)(v4 + 64)) )
        {
          std::string::operator=(ret_msg, "parse drop_id and drop_count fail");
          v3 = -1;
          goto LABEL_164;
        }
        ActionReason::ActionReason((ActionReason *const)(v4 + 208), ACTION_REASON_GM, ITEM_LIMIT_GM);
        std::vector<ItemParam>::vector((std::vector<ItemParam> *const)(v4 + 272));
        v45 = *(_DWORD *)(v4 + 64);
        if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
          __asan_report_load8(&context->player);
        *(OutputResult *)(v4 + 80) = DropUtils::dropItems(
                                       context->player,
                                       v45,
                                       1u,
                                       (const ActionReason *)(v4 + 208),
                                       (std::vector<ItemParam> *)(v4 + 272));
        if ( *(_DWORD *)(v4 + 80) )
        {
          std::string::operator=(ret_msg, "dropItems fail");
          v3 = *(_DWORD *)(v4 + 80);
          v46 = 0;
        }
        else
        {
          common::tools::StringStream<common::tools::FixedBuffer<4096>>::StringStream((common::tools::StringStream<common::tools::FixedBuffer<4096> > *const)(v4 + 112));
          is_first = 1;
          PlayerItemComp::createItemBatch(
            (std::vector<std::shared_ptr<Item>> *)(v4 + 336),
            item_comp,
            (const std::vector<ItemParam> *)(v4 + 272));
          __for_range_4 = (std::vector<std::shared_ptr<Item>> *)(v4 + 336);
          __for_begin._M_node = (std::_Rb_tree_iterator<std::pair<unsigned int const,unsigned int> >::_Base_ptr)std::vector<std::shared_ptr<Item>>::begin((std::vector<std::shared_ptr<Item>> *const)(v4 + 336))._M_current;
          __for_end._M_node = (std::_Rb_tree_iterator<std::pair<unsigned int const,unsigned int> >::_Base_ptr)std::vector<std::shared_ptr<Item>>::end((std::vector<std::shared_ptr<Item>> *const)(v4 + 336))._M_current;
          while ( __gnu_cxx::operator!=<std::shared_ptr<Item> *,std::vector<std::shared_ptr<Item>>>(
                    (const __gnu_cxx::__normal_iterator<std::shared_ptr<Item>*,std::vector<std::shared_ptr<Item>> > *)&__for_begin,
                    (const __gnu_cxx::__normal_iterator<std::shared_ptr<Item>*,std::vector<std::shared_ptr<Item>> > *)&__for_end) )
          {
            v47 = __gnu_cxx::__normal_iterator<std::shared_ptr<Item> *,std::vector<std::shared_ptr<Item>>>::operator*((const __gnu_cxx::__normal_iterator<std::shared_ptr<Item>*,std::vector<std::shared_ptr<Item>> > *const)&__for_begin);
            std::shared_ptr<Item>::shared_ptr((std::shared_ptr<Item> *const)(v4 + 144), v47);
            std::dynamic_pointer_cast<Reliquary,Item>((const std::shared_ptr<Item> *)(v4 + 176));
            if ( !std::operator==<Reliquary>(0LL, (const std::shared_ptr<Reliquary> *)(v4 + 176)) )
            {
              v48 = std::__shared_ptr_access<Reliquary,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Reliquary,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 176));
              reliquary_config_ptr = Reliquary::getReliquaryConfig(v48);
              if ( reliquary_config_ptr )
              {
                if ( *(_BYTE *)(((unsigned __int64)&reliquary_config_ptr->rank_level >> 3) + 0x7FFF8000) != 0
                  && *(_BYTE *)(((unsigned __int64)&reliquary_config_ptr->rank_level >> 3) + 0x7FFF8000) <= 3 )
                {
                  __asan_report_load4(&reliquary_config_ptr->rank_level);
                }
                if ( reliquary_config_ptr->rank_level == 5 )
                {
                  if ( !is_first )
                    common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(
                      (common::tools::StringStream<common::tools::FixedBuffer<4096> > *const)(v4 + 112),
                      ",");
                  v49 = std::__shared_ptr_access<Reliquary,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Reliquary,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 176));
                  ItemId = Item::getItemId(v49);
                  v51 = common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(
                          (common::tools::StringStream<common::tools::FixedBuffer<4096> > *const)(v4 + 112),
                          ItemId);
                  v52 = common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(v51, ":");
                  v53 = std::__shared_ptr_access<Reliquary,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Reliquary,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 176));
                  MainPropId = Reliquary::getMainPropId(v53);
                  common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(v52, MainPropId);
                  is_first = 0;
                }
              }
            }
            std::shared_ptr<Reliquary>::~shared_ptr((std::shared_ptr<Reliquary> *const)(v4 + 176));
            std::shared_ptr<Item>::~shared_ptr((std::shared_ptr<Item> *const)(v4 + 144));
            __gnu_cxx::__normal_iterator<std::shared_ptr<Item> *,std::vector<std::shared_ptr<Item>>>::operator++((__gnu_cxx::__normal_iterator<std::shared_ptr<Item>*,std::vector<std::shared_ptr<Item>> > *const)&__for_begin);
          }
          std::vector<std::shared_ptr<Item>>::~vector((std::vector<std::shared_ptr<Item>> *const)(v4 + 336));
          common::tools::StringStream<common::tools::FixedBuffer<4096>>::str[abi:cxx11](
            &sep_2,
            (common::tools::StringStream<common::tools::FixedBuffer<4096> > *const)(v4 + 112));
          std::string::operator=(ret_msg, &sep_2);
          std::string::~string(&sep_2);
          common::tools::StringStream<common::tools::FixedBuffer<4096>>::~StringStream((common::tools::StringStream<common::tools::FixedBuffer<4096> > *const)(v4 + 112));
          v46 = 1;
        }
        std::vector<ItemParam>::~vector((std::vector<ItemParam> *const)(v4 + 272));
        if ( v46 == 1 )
          goto LABEL_163;
      }
      else
      {
        std::set<unsigned int>::set((std::set<unsigned int> *const)(v4 + 400));
        std::allocator<char>::allocator(&__a);
        std::string::basic_string<std::allocator<char>>(&sep_2, "/", &__a);
        v55 = std::vector<std::string>::operator[](param_vec, 0LL);
        v56 = common::tools::StringUtils::splitToSet<std::set<unsigned int>>(
                v55,
                &sep_2,
                (std::set<unsigned int> *)(v4 + 400),
                0) != 0;
        std::string::~string(&sep_2);
        std::allocator<char>::~allocator(&__a);
        if ( v56 )
        {
          std::string::operator=(ret_msg, "unknown param");
          v3 = -1;
          v57 = 0;
        }
        else
        {
          std::map<unsigned int,unsigned int>::map((std::map<unsigned int,unsigned int> *const)(v4 + 480));
          for ( i_0 = 1LL; ; ++i_0 )
          {
            v58 = std::vector<std::string>::size(param_vec);
            if ( i_0 >= v58 )
              break;
            std::vector<unsigned int>::vector((std::vector<unsigned int> *const)(v4 + 336));
            std::allocator<char>::allocator(&__a);
            std::string::basic_string<std::allocator<char>>(&sep_2, ":", &__a);
            v59 = std::vector<std::string>::operator[](param_vec, i_0);
            v60 = common::tools::StringUtils::splitToList<unsigned int>(
                    v59,
                    &sep_2,
                    (std::vector<unsigned int> *)(v4 + 336),
                    0) != 0;
            std::string::~string(&sep_2);
            std::allocator<char>::~allocator(&__a);
            if ( v60 )
            {
              v61 = std::vector<std::string>::operator[](param_vec, i_0);
              std::operator+<char>(&sep_2, "parse ", v61);
              std::operator+<char>(&v121, &sep_2, " fail");
              std::string::operator=(ret_msg, &v121);
              std::string::~string(&v121);
              std::string::~string(&sep_2);
              v3 = -1;
              v62 = 0;
            }
            else if ( std::vector<unsigned int>::size((const std::vector<unsigned int> *const)(v4 + 336)) > 1 )
            {
              v64 = std::vector<unsigned int>::operator[]((std::vector<unsigned int> *const)(v4 + 336), 0LL);
              v65 = v64;
              if ( *(_BYTE *)(((unsigned __int64)v64 >> 3) + 0x7FFF8000) != 0
                && (char)(((unsigned __int8)v64 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)v64 >> 3) + 0x7FFF8000) )
              {
                __asan_report_load4(v64);
              }
              *(_DWORD *)(v4 + 48) = *v65;
              v66 = std::vector<unsigned int>::operator[]((std::vector<unsigned int> *const)(v4 + 336), 1uLL);
              v67 = v66;
              if ( *(_BYTE *)(((unsigned __int64)v66 >> 3) + 0x7FFF8000) != 0
                && (char)(((unsigned __int8)v66 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)v66 >> 3) + 0x7FFF8000) )
              {
                __asan_report_load4(v66);
              }
              *(_DWORD *)(v4 + 64) = *v67;
              ServiceBox::findService<GameserverService>();
              GameserverService::getConfig((GameserverService *const)(v4 + 176));
              v68 = std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 176));
              v69 = data::ReliquaryExcelConfigMgrBase::findReliquaryMainPropGuaranteeExcelConfig(
                      &v68->design_config.txt_config_mgr.reliquary_config_mgr,
                      *(_DWORD *)(v4 + 48)) == 0LL;
              std::shared_ptr<Config>::~shared_ptr((std::shared_ptr<Config> *const)(v4 + 176));
              if ( v69 )
              {
                std::to_string(&sep_2, *(_DWORD *)(v4 + 48));
                std::operator+<char>(&v123, "invalid main_prop_id:", &sep_2);
                std::string::operator=(ret_msg, &v123);
                std::string::~string(&v123);
                std::string::~string(&sep_2);
                v3 = -1;
                v62 = 0;
              }
              else
              {
                v71 = std::map<unsigned int,unsigned int>::emplace<unsigned int &,unsigned int &>(
                        (std::map<unsigned int,unsigned int> *const)(v4 + 480),
                        (unsigned int *)(v4 + 48),
                        (unsigned int *)(v4 + 64),
                        (unsigned int *)(v4 + 48),
                        v70);
                if ( !v71.second )
                {
                  std::to_string(&sep_2, *(_DWORD *)(v4 + 48));
                  std::operator+<char>(&v124, "duplicate main_prop_id:", &sep_2);
                  std::string::operator=(ret_msg, &v124);
                  std::string::~string(&v124);
                  std::string::~string(&sep_2);
                  v3 = -1;
                  v62 = 0;
                }
                else
                {
                  v62 = 1;
                }
              }
            }
            else
            {
              v63 = std::vector<std::string>::operator[](param_vec, i_0);
              std::operator+<char>(&v122, v63, " contains less than 2 elements");
              std::string::operator=(ret_msg, &v122);
              std::string::~string(&v122);
              v3 = -1;
              v62 = 0;
            }
            std::vector<unsigned int>::~vector((std::vector<unsigned int> *const)(v4 + 336));
            if ( v62 != 1 )
            {
              v72 = 0;
              goto LABEL_161;
            }
          }
          __for_range_5 = (std::set<unsigned int> *)(v4 + 400);
          __for_begin_0._M_node = std::set<unsigned int>::begin((const std::set<unsigned int> *const)(v4 + 400))._M_node;
          __for_end_0._M_node = std::set<unsigned int>::end(__for_range_5)._M_node;
          while ( 1 )
          {
            if ( !std::operator!=(&__for_begin_0, &__for_end_0) )
            {
              v72 = 1;
              goto LABEL_161;
            }
            v73 = (unsigned int *)std::_Rb_tree_const_iterator<unsigned int>::operator*(&__for_begin_0);
            v74 = v73;
            if ( *(_BYTE *)(((unsigned __int64)v73 >> 3) + 0x7FFF8000) != 0
              && (char)(((unsigned __int8)v73 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)v73 >> 3) + 0x7FFF8000) )
            {
              __asan_report_load4(v73);
            }
            depot_id = *v74;
            if ( depot_id > 2 )
            {
              std::to_string(&sep_2, depot_id);
              std::operator+<char>(&sep_1, "invalid depot_id:", &sep_2);
              std::string::operator=(ret_msg, &sep_1);
              std::string::~string(&sep_1);
              std::string::~string(&sep_2);
              v3 = -1;
              goto LABEL_160;
            }
            depot_ptr_0 = PlayerItemComp::getReliquaryGuaranteeDepotByGm(item_comp, depot_id);
            if ( !depot_ptr_0 )
              break;
            main_prop_guarantee_data_map = &depot_ptr_0->main_prop_guarantee_data_map;
            __for_range_6 = (std::map<unsigned int,unsigned int> *)(v4 + 480);
            __for_begin._M_node = std::map<unsigned int,unsigned int>::begin((std::map<unsigned int,unsigned int> *const)(v4 + 480))._M_node;
            __for_end._M_node = std::map<unsigned int,unsigned int>::end(__for_range_6)._M_node;
            while ( std::operator!=(&__for_begin, &__for_end) )
            {
              v75 = std::_Rb_tree_iterator<std::pair<unsigned int const,unsigned int>>::operator*(&__for_begin);
              v76 = v75;
              if ( ((unsigned __int8)v75 & 7) >= *(_BYTE *)(((unsigned __int64)v75 >> 3) + 0x7FFF8000)
                && *(_BYTE *)(((unsigned __int64)v75 >> 3) + 0x7FFF8000) != 0
                || *(_BYTE *)((((unsigned __int64)&v75->second + 3) >> 3) + 0x7FFF8000) != 0
                && (((unsigned __int8)v75 + 7) & 7) >= *(_BYTE *)((((unsigned __int64)&v75->second + 3) >> 3)
                                                                + 0x7FFF8000) )
              {
                __asan_report_load_n(v75, 8LL);
              }
              *(_QWORD *)(v4 + 80) = *v76;
              main_prop_id_1 = std::get<0ul,unsigned int const,unsigned int>((std::pair<unsigned int const,unsigned int> *)(v4 + 80));
              v77 = std::get<1ul,unsigned int const,unsigned int>((std::pair<unsigned int const,unsigned int> *)(v4 + 80));
              miss_count = v77;
              if ( *(_BYTE *)(((unsigned __int64)v77 >> 3) + 0x7FFF8000) != 0
                && (char)(((unsigned __int8)v77 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)v77 >> 3) + 0x7FFF8000) )
              {
                __asan_report_load4(v77);
              }
              v78 = *miss_count;
              v79 = main_prop_id_1;
              v80 = std::map<unsigned int,ReliquaryMainPropGuaranteeData>::operator[](
                      main_prop_guarantee_data_map,
                      main_prop_id_1);
              v81 = (std::tuple_element<1,std::pair<unsigned int const,unsigned int> >::type *)v80;
              v82 = *(_BYTE *)(((unsigned __int64)v80 >> 3) + 0x7FFF8000);
              if ( v82 != 0 && (char)(((unsigned __int8)v80 & 7) + 3) >= v82 )
              {
                LOBYTE(v79) = v82 != 0;
                __asan_report_store4(v80, v79, v80);
              }
              *v81 = v78;
              std::_Rb_tree_iterator<std::pair<unsigned int const,unsigned int>>::operator++(&__for_begin);
            }
            std::_Rb_tree_const_iterator<unsigned int>::operator++(&__for_begin_0);
          }
          std::to_string(&sep_1, depot_id);
          std::operator+<char>(&sep_2, "getReliquaryGuaranteeDepotByGm fail, depot_id:", &sep_1);
          std::string::operator=(ret_msg, &sep_2);
          std::string::~string(&sep_2);
          std::string::~string(&sep_1);
          v3 = -1;
LABEL_160:
          v72 = 0;
LABEL_161:
          std::map<unsigned int,unsigned int>::~map((std::map<unsigned int,unsigned int> *const)(v4 + 480));
          v57 = v72 == 1;
        }
        std::set<unsigned int>::~set((std::set<unsigned int> *const)(v4 + 400));
        if ( v57 )
          goto LABEL_163;
      }
    }
  }
LABEL_164:
  result = v3;
  if ( v127 == (char *)v4 )
  {
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8008) = 0LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8010) = 0LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8018) = 0LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8020) = 0LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8028) = 0LL;
    *(_DWORD *)((v4 >> 3) + 0x7FFF8030) = 0;
    *(_DWORD *)((v4 >> 3) + 0x7FFF8038) = 0;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8040) = 0LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8074) = 0LL;
    *(_DWORD *)((v4 >> 3) + 0x7FFF807C) = 0;
  }
  else
  {
    *(_QWORD *)v4 = 1172321806LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8020) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8028) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8030) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8038) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8040) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8048) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8050) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8058) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8060) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8068) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8070) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8078) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 4483: range 0000000017D74734-0000000017D747D6
void __cdecl procWoodExchangeRegister::procWoodExchangeRegister(procWoodExchangeRegister *const this)
{
  std::function<int(GmContext&,const std::vector<std::string>&,std::string&)> *v1; // rax
  std::allocator<char> __a; // [rsp+1Fh] [rbp-31h] BYREF
  std::string __k; // [rsp+20h] [rbp-30h] BYREF

  std::allocator<char>::allocator(&__a);
  std::string::basic_string<std::allocator<char>>(&__k, "WOOD_EXCHANGE", &__a);
  v1 = std::unordered_map<std::string,std::function<int ()(GmContext &,std::vector<std::string> const&,std::string&)>>::operator[](
         &GmUtils::op_func_map[abi:cxx11],
         &__k);
  std::function<int ()(GmContext &,std::vector<std::string> const&,std::string&)>::operator=<int (&)(GmContext &,std::vector<std::string> const&,std::string&)>(
    v1,
    (int (*)(GmContext *, const std::vector<std::string> *, std::string *))procWoodExchange);
  std::string::~string(&__k);
  std::allocator<char>::~allocator(&__a);
};

// Line 4484: range 0000000017BE4301-0000000017BE4AF1
int32_t __cdecl procWoodExchange(GmContext *context, const std::vector<std::string> *param_vec, std::string *ret_msg)
{
  unsigned __int64 v3; // r12
  __int64 v4; // rax
  _DWORD *v5; // r13
  int32_t result; // eax
  const std::string *v7; // rax
  __int64 v8; // rsi
  uint32_t v9; // ecx
  char v10; // dl
  __int64 v11; // rdx
  const std::string *v12; // rax
  __int64 v13; // rsi
  uint32_t v14; // ecx
  char v15; // dl
  __int64 v16; // rdx
  const std::string *v17; // rax
  __int64 v18; // rdx
  const std::string *v19; // rbx
  std::unordered_map<unsigned int,data::HomeWorldWoodExcelConfig>::const_iterator __for_begin; // [rsp+20h] [rbp-160h] BYREF
  std::unordered_map<unsigned int,data::HomeWorldWoodExcelConfig>::const_iterator __for_end; // [rsp+28h] [rbp-158h] BYREF
  PlayerHomeComp *home_comp; // [rsp+30h] [rbp-150h]
  const std::unordered_map<unsigned int,data::HomeWorldWoodExcelConfig> *__for_range; // [rsp+38h] [rbp-148h]
  const std::pair<unsigned int const,data::HomeWorldWoodExcelConfig> *v25; // [rsp+40h] [rbp-140h]
  std::tuple_element<0,const std::pair<unsigned int const,data::HomeWorldWoodExcelConfig> >::type *wood_id; // [rsp+48h] [rbp-138h]
  std::tuple_element<1,const std::pair<unsigned int const,data::HomeWorldWoodExcelConfig> >::type *_; // [rsp+50h] [rbp-130h]
  HomeWorldWoodExchangeData *data_ptr_1; // [rsp+58h] [rbp-128h]
  HomeWorldWoodExchangeData *data_ptr_0; // [rsp+60h] [rbp-120h]
  HomeWorldWoodExchangeData *data_ptr; // [rsp+68h] [rbp-118h]
  std::shared_ptr<Config> v31; // [rsp+70h] [rbp-110h] BYREF
  std::string __lhs; // [rsp+80h] [rbp-100h] BYREF
  std::string __rhs; // [rsp+A0h] [rbp-E0h] BYREF
  std::string v34; // [rsp+C0h] [rbp-C0h] BYREF
  std::string v35; // [rsp+E0h] [rbp-A0h] BYREF
  char v36[128]; // [rsp+100h] [rbp-80h] BYREF

  v3 = (unsigned __int64)v36;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_1(96LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "2 48 4 12 wood_id:4510 64 4 22 last_refresh_time:4511";
  *(_QWORD *)(v3 + 16) = procWoodExchange;
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = -234556943;
  v5[536862722] = -202116348;
  if ( std::vector<std::string>::empty(param_vec) )
  {
    std::string::operator=(ret_msg, "param is empty");
    result = -1;
    goto LABEL_35;
  }
  if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
    __asan_report_load8(&context->player);
  home_comp = Player::getHomeComp(context->player);
  v7 = std::vector<std::string>::operator[](param_vec, 0LL);
  if ( std::operator==<char>(v7, "SET_EXCHANGE_COUNT") )
  {
    *(_DWORD *)(v3 + 48) = 0;
    *(_DWORD *)(v3 + 64) = 0;
    if ( common::tools::StringUtils::strVecToNum<1u,unsigned int,unsigned int &>(
           param_vec,
           (unsigned int *)(v3 + 48),
           (unsigned int *)(v3 + 64),
           (unsigned int *)(v3 + 48)) )
    {
      std::string::operator=(ret_msg, "parse wood_id exchange_count fail");
      result = -1;
      goto LABEL_35;
    }
    v8 = *(unsigned int *)(v3 + 48);
    data_ptr = PlayerHomeComp::getHomeWorldWoodExchangeData(home_comp, v8);
    if ( !data_ptr )
      goto LABEL_12;
    v9 = *(_DWORD *)(v3 + 64);
    v10 = *(_BYTE *)(((unsigned __int64)data_ptr >> 3) + 0x7FFF8000);
    LOBYTE(v8) = v10 != 0;
    v11 = (v10 != 0) & (unsigned __int8)((char)(((unsigned __int8)data_ptr & 7) + 3) >= v10);
    if ( (_BYTE)v11 )
      __asan_report_store4(data_ptr, v8, v11);
    data_ptr->exchange_count = v9;
  }
  else
  {
    v12 = std::vector<std::string>::operator[](param_vec, 0LL);
    if ( std::operator==<char>(v12, "SET_LAST_REFRESH_TIME") )
    {
      *(_DWORD *)(v3 + 48) = 0;
      *(_DWORD *)(v3 + 64) = 0;
      if ( common::tools::StringUtils::strVecToNum<1u,unsigned int,unsigned int &>(
             param_vec,
             (unsigned int *)(v3 + 48),
             (unsigned int *)(v3 + 64),
             (unsigned int *)(v3 + 48)) )
      {
        std::string::operator=(ret_msg, "parse wood_id last_refresh_time fail");
        result = -1;
        goto LABEL_35;
      }
      v13 = *(unsigned int *)(v3 + 48);
      data_ptr_0 = PlayerHomeComp::getHomeWorldWoodExchangeData(home_comp, v13);
      if ( !data_ptr_0 )
      {
LABEL_12:
        std::to_string(&__rhs, *(_DWORD *)(v3 + 48));
        std::literals::string_literals::operator"" s[abi:cxx11](&__lhs, "wood_id:", 8uLL);
        std::operator+<char>(&v34, &__lhs, &__rhs);
        std::operator+<char>(&v35, &v34, " not found");
        std::string::operator=(ret_msg, &v35);
        std::string::~string(&v35);
        std::string::~string(&v34);
        std::string::~string(&__lhs);
        std::string::~string(&__rhs);
        result = -1;
        goto LABEL_35;
      }
      v14 = *(_DWORD *)(v3 + 64);
      v15 = *(_BYTE *)(((unsigned __int64)&data_ptr_0->last_refresh_time >> 3) + 0x7FFF8000);
      LOBYTE(v13) = v15 != 0;
      v16 = (v15 != 0) & (unsigned __int8)((char)((((_BYTE)data_ptr_0 + 4) & 7) + 3) >= v15);
      if ( (_BYTE)v16 )
        __asan_report_store4(&data_ptr_0->last_refresh_time, v13, v16);
      data_ptr_0->last_refresh_time = v14;
    }
    else
    {
      v17 = std::vector<std::string>::operator[](param_vec, 0LL);
      if ( !std::operator==<char>(v17, "CLEAR_ALL_EXCHANGE_COUNT") )
      {
        v19 = std::vector<std::string>::operator[](param_vec, 0LL);
        std::literals::string_literals::operator"" s[abi:cxx11](&v34, "unknown param:", 0xEuLL);
        std::operator+<char>(&v35, &v34, v19);
        std::string::operator=(ret_msg, &v35);
        std::string::~string(&v35);
        std::string::~string(&v34);
        result = -1;
        goto LABEL_35;
      }
      ServiceBox::findService<GameserverService>();
      GameserverService::getConfig((GameserverService *const)&v31);
      __for_range = &std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false> *const)&v31)->design_config.txt_config_mgr.home_config_mgr.home_world_wood_excel_config_map;
      std::shared_ptr<Config>::~shared_ptr(&v31);
      __for_begin._M_cur = std::unordered_map<unsigned int,data::HomeWorldWoodExcelConfig>::begin(__for_range)._M_cur;
      __for_end._M_cur = std::unordered_map<unsigned int,data::HomeWorldWoodExcelConfig>::end(__for_range)._M_cur;
      while ( std::__detail::operator!=<std::pair<unsigned int const,data::HomeWorldWoodExcelConfig>,false>(
                &__for_begin,
                &__for_end) )
      {
        v25 = std::__detail::_Node_const_iterator<std::pair<unsigned int const,data::HomeWorldWoodExcelConfig>,false,false>::operator*(&__for_begin);
        wood_id = std::get<0ul,unsigned int const,data::HomeWorldWoodExcelConfig>(v25);
        _ = (std::tuple_element<1,const std::pair<unsigned int const,data::HomeWorldWoodExcelConfig> >::type *)std::get<1ul,unsigned int const,data::HomeWorldWoodExcelConfig>(v25);
        if ( *(_BYTE *)(((unsigned __int64)wood_id >> 3) + 0x7FFF8000) != 0
          && (char)(((unsigned __int8)wood_id & 7) + 3) >= *(_BYTE *)(((unsigned __int64)wood_id >> 3) + 0x7FFF8000) )
        {
          __asan_report_load4(wood_id);
        }
        data_ptr_1 = PlayerHomeComp::findHomeWorldWoodExchangeData(home_comp, *wood_id);
        if ( data_ptr_1 )
        {
          v18 = (*(_BYTE *)(((unsigned __int64)data_ptr_1 >> 3) + 0x7FFF8000) != 0) & (unsigned __int8)((char)(((unsigned __int8)data_ptr_1 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)data_ptr_1 >> 3) + 0x7FFF8000));
          if ( (_BYTE)v18 )
            __asan_report_store4(data_ptr_1, ((unsigned __int8)data_ptr_1 & 7u) + 3, v18);
          data_ptr_1->exchange_count = 0;
        }
        std::__detail::_Node_const_iterator<std::pair<unsigned int const,data::HomeWorldWoodExcelConfig>,false,false>::operator++(&__for_begin);
      }
    }
  }
  result = 0;
LABEL_35:
  if ( v36 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8008) = 0;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8008) = -168430091;
  }
  return result;
};

// Line 4544: range 0000000017D7480C-0000000017D748AE
void __cdecl procAddItemByProtoRegister::procAddItemByProtoRegister(procAddItemByProtoRegister *const this)
{
  std::function<int(GmContext&,const std::vector<std::string>&,std::string&)> *v1; // rax
  std::allocator<char> __a; // [rsp+1Fh] [rbp-31h] BYREF
  std::string __k; // [rsp+20h] [rbp-30h] BYREF

  std::allocator<char>::allocator(&__a);
  std::string::basic_string<std::allocator<char>>(&__k, "ADD_ITEM_BY_PROTO", &__a);
  v1 = std::unordered_map<std::string,std::function<int ()(GmContext &,std::vector<std::string> const&,std::string&)>>::operator[](
         &GmUtils::op_func_map[abi:cxx11],
         &__k);
  std::function<int ()(GmContext &,std::vector<std::string> const&,std::string&)>::operator=<int (&)(GmContext &,std::vector<std::string> const&,std::string&)>(
    v1,
    (int (*)(GmContext *, const std::vector<std::string> *, std::string *))procAddItemByProto);
  std::string::~string(&__k);
  std::allocator<char>::~allocator(&__a);
};

// Line 4545: range 0000000017BE4AF2-0000000017BE543D
int32_t __cdecl procAddItemByProto(GmContext *context, const std::vector<std::string> *param_vec, std::string *ret_msg)
{
  unsigned __int64 v3; // r13
  __int64 v4; // rax
  _DWORD *v5; // r12
  __int64 v6; // rax
  int32_t v7; // r14d
  PlayerBasicComp *BasicComp; // rax
  google::protobuf::uint64 v9; // rax
  uint32_t ItemComp; // r14d
  google::protobuf::uint32 v11; // r15d
  uint32_t v12; // eax
  std::__shared_ptr_access<Item,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v13; // rax
  unsigned __int64 v14; // rdx
  const std::string *v15; // rax
  std::__shared_ptr_access<Item,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v16; // rax
  unsigned __int64 v17; // rdx
  unsigned int (__fastcall *v18)(std::__shared_ptr_access<Item,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *, Player *, _QWORD); // r8
  PlayerItemComp *v19; // r14
  const std::string *v20; // rax
  int32_t result; // eax
  int v22; // [rsp+0h] [rbp-400h]
  char *v23; // [rsp+8h] [rbp-3F8h]
  int v24; // [rsp+10h] [rbp-3F0h]
  int ret_msga; // [rsp+18h] [rbp-3E8h]
  std::string *ret_msgb; // [rsp+18h] [rbp-3E8h]
  GmContext *contexta; // [rsp+28h] [rbp-3D8h]
  int v28; // [rsp+30h] [rbp-3D0h]
  char v29; // [rsp+38h] [rbp-3C8h]
  int ret; // [rsp+3Ch] [rbp-3C4h]
  int reta; // [rsp+3Ch] [rbp-3C4h]
  std::vector<std::string>::const_iterator __for_begin; // [rsp+40h] [rbp-3C0h] BYREF
  std::vector<std::string>::const_iterator __for_end; // [rsp+48h] [rbp-3B8h] BYREF
  const std::vector<std::string> *__for_range; // [rsp+50h] [rbp-3B0h]
  const std::string *s; // [rsp+58h] [rbp-3A8h]
  std::shared_ptr<Item> p_item_ptr; // [rsp+60h] [rbp-3A0h] BYREF
  std::string v37; // [rsp+70h] [rbp-390h] BYREF
  std::string v38; // [rsp+90h] [rbp-370h] BYREF
  std::string __rhs; // [rsp+B0h] [rbp-350h] BYREF
  char v40[816]; // [rsp+D0h] [rbp-330h] BYREF

  ret_msga = (int)ret_msg;
  v3 = (unsigned __int64)v40;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_4(768LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "6 32 1 12 options:4553 48 16 13 item_ptr:4566 80 24 18 action_reason:4583 144 40 11 status:4554 "
                        "224 48 13 item_bin:4552 304 392 7 ss:4546";
  *(_QWORD *)(v3 + 16) = procAddItemByProto;
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = 61953;
  v5[536862722] = 62194;
  v5[536862723] = -218959360;
  v5[536862724] = 62194;
  v5[536862725] = -234881024;
  v5[536862726] = -218959118;
  v5[536862728] = -219021312;
  v5[536862729] = 62194;
  v5[536862741] = -218103808;
  v5[536862742] = -202116109;
  v5[536862743] = -202116109;
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream(v3 + 304);
  __for_range = &context->raw_param_vec;
  __for_begin._M_current = std::vector<std::string>::begin(&context->raw_param_vec)._M_current;
  __for_end._M_current = std::vector<std::string>::end(&context->raw_param_vec)._M_current;
  while ( __gnu_cxx::operator!=<std::string const*,std::vector<std::string>>(&__for_begin, &__for_end) )
  {
    s = __gnu_cxx::__normal_iterator<std::string const*,std::vector<std::string>>::operator*(&__for_begin);
    v6 = std::operator<<<char>(v3 + 320, s);
    std::operator<<<std::char_traits<char>>(v6, " ");
    __gnu_cxx::__normal_iterator<std::string const*,std::vector<std::string>>::operator++(&__for_begin);
  }
  proto::ItemBin::ItemBin((proto::ItemBin *const)(v3 + 224));
  google::protobuf::util::JsonParseOptions::JsonParseOptions((google::protobuf::util::JsonParseOptions *const)(v3 + 32));
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::str(&__rhs, v3 + 304);
  google::protobuf::util::JsonStringToMessage(
    (google::protobuf::util::Status *)(v3 + 144),
    v22,
    (int)v40,
    v24,
    ret_msga,
    (int)param_vec,
    context,
    v28,
    v29);
  std::string::~string(&__rhs);
  if ( !google::protobuf::util::Status::ok((const google::protobuf::util::Status *const)(v3 + 144)) )
  {
    google::protobuf::util::Status::ToString[abi:cxx11](&__rhs, v3 + 144);
    std::operator+<char>(&v37, "parse json fail, ", &__rhs);
    std::string::operator=(ret_msgb, &v37);
    std::string::~string(&v37);
    std::string::~string(&__rhs);
    v7 = -1;
  }
  else
  {
    if ( !proto::ItemBin::guid((const proto::ItemBin *const)(v3 + 224)) )
    {
      if ( *(_BYTE *)(((unsigned __int64)&contexta->player >> 3) + 0x7FFF8000) )
        __asan_report_load8(&contexta->player);
      BasicComp = Player::getBasicComp(contexta->player);
      v9 = PlayerBasicComp::genGuid(BasicComp, GUID_ITEM);
      proto::ItemBin::set_guid((proto::ItemBin *const)(v3 + 224), v9);
    }
    if ( *(_BYTE *)(((unsigned __int64)&contexta->player >> 3) + 0x7FFF8000) )
      __asan_report_load8(&contexta->player);
    ItemComp = (unsigned int)Player::getItemComp(contexta->player);
    proto::ItemBin::guid((const proto::ItemBin *const)(v3 + 224));
    v11 = proto::ItemBin::item_id((const proto::ItemBin *const)(v3 + 224));
    v12 = proto::ItemBin::item_type((const proto::ItemBin *const)(v3 + 224));
    PlayerItemComp::createItem((PlayerItemComp *const)(v3 + 48), ItemComp, v12, v11);
    if ( std::operator==<Item>(0LL, (const std::shared_ptr<Item> *)(v3 + 48)) )
    {
      std::string::operator=(ret_msgb, "createItem fail");
      v7 = -1;
    }
    else
    {
      v13 = std::__shared_ptr_access<Item,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Item,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 48));
      if ( *(_BYTE *)(((unsigned __int64)v13 >> 3) + 0x7FFF8000) )
        __asan_report_load8(v13);
      v14 = (unsigned __int64)(v13->_vptr_Item + 2);
      if ( *(_BYTE *)((v14 >> 3) + 0x7FFF8000) )
        __asan_report_load8(v13->_vptr_Item + 2);
      ret = (*(__int64 (__fastcall **)(std::__shared_ptr_access<Item,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *, unsigned __int64))v14)(
              v13,
              v3 + 224);
      if ( ret )
      {
        if ( proto::Retcode_IsValid(ret) )
        {
          v15 = proto::Retcode_Name[abi:cxx11]((proto::Retcode)ret);
          std::string::basic_string(&__rhs, v15);
        }
        else
        {
          std::to_string(&__rhs, ret);
        }
        std::operator+<char>(&v38, "fromBin fail, ret:", &__rhs);
        std::string::operator=(ret_msgb, &v38);
        std::string::~string(&v38);
        std::string::~string(&__rhs);
        v7 = -1;
      }
      else
      {
        v16 = std::__shared_ptr_access<Item,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Item,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 48));
        if ( *(_BYTE *)(((unsigned __int64)v16 >> 3) + 0x7FFF8000) )
          __asan_report_load8(v16);
        v17 = (unsigned __int64)(v16->_vptr_Item + 6);
        if ( *(_BYTE *)((v17 >> 3) + 0x7FFF8000) )
          __asan_report_load8(v16->_vptr_Item + 6);
        v18 = *(unsigned int (__fastcall **)(std::__shared_ptr_access<Item,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *, Player *, _QWORD))v17;
        if ( *(_BYTE *)(((unsigned __int64)&contexta->player >> 3) + 0x7FFF8000) )
          __asan_report_load8(&contexta->player);
        if ( v18(v16, contexta->player, 0LL) )
        {
          std::string::operator=(ret_msgb, "init equip fail");
          v7 = -1;
        }
        else
        {
          ActionReason::ActionReason((ActionReason *const)(v3 + 80), ACTION_REASON_GM, ITEM_LIMIT_GM);
          if ( *(_BYTE *)(((unsigned __int64)&contexta->player >> 3) + 0x7FFF8000) )
            __asan_report_load8(&contexta->player);
          v19 = Player::getItemComp(contexta->player);
          std::shared_ptr<Item>::shared_ptr(&p_item_ptr, (const std::shared_ptr<Item> *)(v3 + 48));
          reta = PlayerItemComp::addItem(v19, &p_item_ptr, (const ActionReason *)(v3 + 80), 0LL);
          std::shared_ptr<Item>::~shared_ptr(&p_item_ptr);
          if ( reta )
          {
            if ( proto::Retcode_IsValid(reta) )
            {
              v20 = proto::Retcode_Name[abi:cxx11]((proto::Retcode)reta);
              std::string::basic_string(&v38, v20);
            }
            else
            {
              std::to_string(&v38, reta);
            }
            std::operator+<char>(&__rhs, "addItem fail, ret:", &v38);
            std::string::operator=(ret_msgb, &__rhs);
            std::string::~string(&__rhs);
            std::string::~string(&v38);
            v7 = -1;
          }
          else
          {
            v7 = 0;
          }
        }
      }
    }
    std::shared_ptr<Item>::~shared_ptr((std::shared_ptr<Item> *const)(v3 + 48));
  }
  google::protobuf::util::Status::~Status((google::protobuf::util::Status *const)(v3 + 144));
  proto::ItemBin::~ItemBin((proto::ItemBin *const)(v3 + 224));
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream(v3 + 304);
  result = v7;
  if ( v23 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8010) = 0LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8018) = 0;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8020) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8054) = 0LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF805C) = 0;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8020) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8028) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8030) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8038) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8040) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8048) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8050) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8058) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 4594: range 0000000017D748B0-0000000017D74952
void __cdecl procCheckItemRegister::procCheckItemRegister(procCheckItemRegister *const this)
{
  std::function<int(GmContext&,const std::vector<std::string>&,std::string&)> *v1; // rax
  std::allocator<char> __a; // [rsp+1Fh] [rbp-31h] BYREF
  std::string __k; // [rsp+20h] [rbp-30h] BYREF

  std::allocator<char>::allocator(&__a);
  std::string::basic_string<std::allocator<char>>(&__k, "CHECK_ITEM", &__a);
  v1 = std::unordered_map<std::string,std::function<int ()(GmContext &,std::vector<std::string> const&,std::string&)>>::operator[](
         &GmUtils::op_func_map[abi:cxx11],
         &__k);
  std::function<int ()(GmContext &,std::vector<std::string> const&,std::string&)>::operator=<int (&)(GmContext &,std::vector<std::string> const&,std::string&)>(
    v1,
    (int (*)(GmContext *, const std::vector<std::string> *, std::string *))procCheckItem);
  std::string::~string(&__k);
  std::allocator<char>::~allocator(&__a);
};

// Line 4595: range 0000000017BE5F36-0000000017BE633D
int32_t __cdecl procCheckItem(GmContext *context, const std::vector<std::string> *param_vec, std::string *ret_msg)
{
  unsigned __int64 v3; // rbx
  __int64 v4; // rax
  unsigned __int64 v5; // r13
  std::pair<const std::string,std::function<int(GmContext&,std::string&)> > *i; // r12
  int32_t result; // eax
  const std::unordered_map<std::string,std::function<int(GmContext&,std::string&)>>::key_type *v8; // rax
  std::__detail::_Node_const_iterator<std::pair<const std::string,std::function<int(GmContext&,std::string&)> >,false,true>::pointer v9; // rax
  procCheckItem::<lambda(GmContext&, std::string&)> __y; // [rsp+32h] [rbp-19Eh] BYREF
  procCheckItem::<lambda(GmContext&, std::string&)> v12; // [rsp+33h] [rbp-19Dh] BYREF
  procCheckItem::<lambda(GmContext&, std::string&)> v13; // [rsp+34h] [rbp-19Ch] BYREF
  std::unordered_map<std::string,std::function<int(GmContext&,std::string&)>>::hasher __hf; // [rsp+35h] [rbp-19Bh] BYREF
  std::unordered_map<std::string,std::function<int(GmContext&,std::string&)>>::key_equal __eql; // [rsp+36h] [rbp-19Ah] BYREF
  std::allocator<std::pair<const std::string,std::function<int(GmContext&,std::string&)> > > __a; // [rsp+37h] [rbp-199h] BYREF
  std::__detail::_Node_iterator_base<std::pair<const std::string,std::function<int(GmContext&,std::string&)> >,true> v17; // [rsp+38h] [rbp-198h] BYREF
  std::string __x; // [rsp+40h] [rbp-190h] BYREF
  std::string v19; // [rsp+60h] [rbp-170h] BYREF
  std::string v20; // [rsp+80h] [rbp-150h] BYREF
  std::pair<const std::string,std::function<int(GmContext&,std::string&)> > v21; // [rsp+A0h] [rbp-130h] BYREF
  std::pair<const std::string,std::function<int(GmContext&,std::string&)> > v22; // [rsp+E0h] [rbp-F0h] BYREF
  std::pair<const std::string,std::function<int(GmContext&,std::string&)> > v23; // [rsp+120h] [rbp-B0h] BYREF
  char v24[112]; // [rsp+160h] [rbp-70h] BYREF

  v3 = (unsigned __int64)v24;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_0(64LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "1 32 8 9 iter:4662";
  *(_QWORD *)(v3 + 16) = procCheckItem;
  v5 = v3 >> 3;
  *(_DWORD *)(v5 + 2147450880) = -235802127;
  *(_DWORD *)(v5 + 2147450884) = -202116352;
  if ( !(_BYTE)`guard variable for'procCheckItem(GmContext &,std::vector<std::string> const&,std::string&)::handler_map
    && __cxa_guard_acquire(&`guard variable for'procCheckItem(GmContext &,std::vector<std::string> const&,std::string&)::handler_map) )
  {
    std::literals::string_literals::operator"" s[abi:cxx11](&__x, "checkFrontLooseAddItemBatch", 0x1BuLL);
    std::pair<std::string const,std::function<int ()(GmContext &,std::string&)>>::pair<std::string,procCheckItem(GmContext &,std::vector<std::string> const&,std::string&)::{lambda(GmContext &,std::string&)#1},true>(
      &v21,
      &__x,
      &__y);
    std::literals::string_literals::operator"" s[abi:cxx11](&v19, "checkFrontLooseGrantDropItems", 0x1DuLL);
    std::pair<std::string const,std::function<int ()(GmContext &,std::string&)>>::pair<std::string,procCheckItem(GmContext &,std::vector<std::string> const&,std::string&)::{lambda(GmContext &,std::string&)#2},true>(
      &v22,
      &v19,
      &v12);
    std::literals::string_literals::operator"" s[abi:cxx11](&v20, "checkFrontLooseGrantRewards", 0x1BuLL);
    std::pair<std::string const,std::function<int ()(GmContext &,std::string&)>>::pair<std::string,procCheckItem(GmContext &,std::vector<std::string> const&,std::string&)::{lambda(GmContext &,std::string&)#3},true>(
      &v23,
      &v20,
      &v13);
    std::allocator<std::pair<std::string const,std::function<int ()(GmContext &,std::string&)>>>::allocator(&__a);
    std::unordered_map<std::string,std::function<int ()(GmContext &,std::string&)>>::unordered_map(
      (std::unordered_map<std::string,std::function<int(GmContext&,std::string&)>> *const)&procCheckItem(GmContext &,std::vector<std::string> const&,std::string&)::handler_map,
      (std::initializer_list<std::pair<const std::string,std::function<int(GmContext&,std::string&)> > >)__PAIR128__(3LL, &v21),
      0LL,
      &__hf,
      &__eql,
      &__a);
    __cxa_guard_release(&`guard variable for'procCheckItem(GmContext &,std::vector<std::string> const&,std::string&)::handler_map);
    __cxa_atexit(
      (void (__fastcall *)(void *))std::unordered_map<std::string,std::function<int ()(GmContext &,std::string&)>>::~unordered_map,
      (void *)&procCheckItem(GmContext &,std::vector<std::string> const&,std::string&)::handler_map,
      &_dso_handle);
    std::allocator<std::pair<std::string const,std::function<int ()(GmContext &,std::string&)>>>::~allocator(&__a);
    for ( i = (std::pair<const std::string,std::function<int(GmContext&,std::string&)> > *)v24;
          i != &v21;
          std::pair<std::string const,std::function<int ()(GmContext &,std::string&)>>::~pair(i) )
    {
      --i;
    }
    std::string::~string(&v20);
    std::string::~string(&v19);
    std::string::~string(&__x);
  }
  if ( std::vector<std::string>::empty(&context->raw_param_vec) )
  {
    result = -1;
  }
  else
  {
    v8 = std::vector<std::string>::operator[](&context->raw_param_vec, 0LL);
    *(std::unordered_map<std::string,std::function<int(GmContext&,std::string&)>>::const_iterator *)(v3 + 32) = std::unordered_map<std::string,std::function<int ()(GmContext &,std::string&)>>::find(&procCheckItem(GmContext &,std::vector<std::string> const&,std::string&)::handler_map, v8);
    v17._M_cur = std::unordered_map<std::string,std::function<int ()(GmContext &,std::string&)>>::end(&procCheckItem(GmContext &,std::vector<std::string> const&,std::string&)::handler_map)._M_cur;
    if ( std::__detail::operator!=<std::pair<std::string const,std::function<int ()(GmContext &,std::string&)>>,true>(
           (const std::__detail::_Node_iterator_base<std::pair<const std::string,std::function<int(GmContext&,std::string&)> >,true> *)(v3 + 32),
           &v17) )
    {
      v9 = std::__detail::_Node_const_iterator<std::pair<std::string const,std::function<int ()(GmContext &,std::string&)>>,false,true>::operator->((const std::__detail::_Node_const_iterator<std::pair<const std::string,std::function<int(GmContext&,std::string&)> >,false,true> *const)(v3 + 32));
      result = std::function<int ()(GmContext &,std::string &)>::operator()(&v9->second, context, ret_msg);
    }
    else
    {
      result = -1;
    }
  }
  if ( v24 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 4600: range 0000000017BE543E-0000000017BE57F5
int __cdecl procCheckItem(GmContext &,std::vector<std::string> const&,std::string&)::{lambda(GmContext &,std::string&)#1}::operator()(
        const procCheckItem::<lambda(GmContext&, std::string&)> *const __closure,
        GmContext *context,
        std::string *ret_msg)
{
  unsigned __int64 v3; // r13
  __int64 v4; // rax
  _DWORD *v5; // r12
  unsigned int *v6; // r8
  unsigned int *v7; // r9
  int v8; // r14d
  PlayerItemComp *ItemComp; // rax
  common::tools::StringStream<common::tools::FixedBuffer<4096> > *v10; // rax
  common::tools::StringStream<common::tools::FixedBuffer<4096> > *v11; // rax
  common::tools::StringStream<common::tools::FixedBuffer<4096> > *v12; // rax
  common::tools::StringStream<common::tools::FixedBuffer<4096> > *v13; // rax
  int result; // eax
  int32_t ret; // [rsp+2Ch] [rbp-1B4h]
  std::string v17; // [rsp+30h] [rbp-1B0h] BYREF
  char v18[400]; // [rsp+50h] [rbp-190h] BYREF

  v3 = (unsigned __int64)v18;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_3(352LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "6 32 4 16 reason_type:4603 48 4 15 limit_type:4603 64 16 7 ss:4611 96 24 16 item_id_vec:4602 160"
                        " 24 11 reason:4608 224 96 17 check_result:4609";
  *(_QWORD *)(v3 + 16) = procCheckItem(GmContext &,std::vector<std::string> const&,std::string&)::{lambda(GmContext &,std::string&)#1}::operator();
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = -234556924;
  v5[536862722] = -219021312;
  v5[536862723] = -234881024;
  v5[536862724] = -218959118;
  v5[536862725] = -234881024;
  v5[536862726] = -218959118;
  v5[536862730] = -202116109;
  std::vector<unsigned int>::vector((std::vector<unsigned int> *const)(v3 + 96));
  *(_DWORD *)(v3 + 32) = 0;
  *(_DWORD *)(v3 + 48) = 0;
  if ( common::tools::ConvertUtils::convertTo<1u,std::vector<unsigned int>,unsigned int &,unsigned int &>(
         &context->raw_param_vec,
         (std::vector<unsigned int> *)(v3 + 96),
         (unsigned int *)(v3 + 32),
         (unsigned int *)(v3 + 48),
         v6,
         v7) )
  {
    v8 = -1;
  }
  else
  {
    ActionReason::ActionReason(
      (ActionReason *const)(v3 + 160),
      *(proto::ActionReasonType *)(v3 + 32),
      *(data::ItemLimitType *)(v3 + 48));
    FrontLooseCheckResult::FrontLooseCheckResult((FrontLooseCheckResult *const)(v3 + 224));
    if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
      __asan_report_load8(&context->player);
    ItemComp = Player::getItemComp(context->player);
    ret = PlayerItemComp::checkFrontLooseAddItemBatch(
            ItemComp,
            (const std::vector<unsigned int> *)(v3 + 96),
            (const ActionReason *)(v3 + 160),
            (FrontLooseCheckResult *)(v3 + 224));
    common::tools::StringStream<common::tools::FixedBuffer<4096>>::StringStream((common::tools::StringStream<common::tools::FixedBuffer<4096> > *const)(v3 + 64));
    v10 = common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(
            (common::tools::StringStream<common::tools::FixedBuffer<4096> > *const)(v3 + 64),
            "check_result:{exceeded_item_set:");
    v11 = common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<<unsigned int>(
            v10,
            (const std::set<unsigned int> *)(v3 + 224));
    v12 = common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(v11, ",exceeded_item_type_set:");
    v13 = common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<<unsigned int>(
            v12,
            (const std::set<unsigned int> *)(v3 + 272));
    common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(v13, "}");
    common::tools::StringStream<common::tools::FixedBuffer<4096>>::str[abi:cxx11](
      &v17,
      (common::tools::StringStream<common::tools::FixedBuffer<4096> > *const)(v3 + 64));
    std::string::operator+=(ret_msg, &v17);
    std::string::~string(&v17);
    v8 = ret;
    common::tools::StringStream<common::tools::FixedBuffer<4096>>::~StringStream((common::tools::StringStream<common::tools::FixedBuffer<4096> > *const)(v3 + 64));
    FrontLooseCheckResult::~FrontLooseCheckResult((FrontLooseCheckResult *const)(v3 + 224));
  }
  std::vector<unsigned int>::~vector((std::vector<unsigned int> *const)(v3 + 96));
  result = v8;
  if ( v18 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8010) = 0LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8018) = 0;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8028) = 0;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8020) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8028) = -168430091;
  }
  return result;
};

// Line 4620: range 0000000017BE57F6-0000000017BE5B7C
int __cdecl procCheckItem(GmContext &,std::vector<std::string> const&,std::string&)::{lambda(GmContext &,std::string&)#2}::operator()(
        const procCheckItem::<lambda(GmContext&, std::string&)> *const __closure,
        GmContext *context,
        std::string *ret_msg)
{
  unsigned int *v3; // r9
  unsigned __int64 v4; // r13
  __int64 v5; // rax
  _DWORD *v6; // r12
  int v7; // r14d
  PlayerItemComp *ItemComp; // rax
  common::tools::StringStream<common::tools::FixedBuffer<4096> > *v9; // rax
  common::tools::StringStream<common::tools::FixedBuffer<4096> > *v10; // rax
  common::tools::StringStream<common::tools::FixedBuffer<4096> > *v11; // rax
  common::tools::StringStream<common::tools::FixedBuffer<4096> > *v12; // rax
  int result; // eax
  unsigned int *v14; // [rsp+0h] [rbp-1C0h]
  std::string *ret_msgb; // [rsp+8h] [rbp-1B8h]
  int32_t ret; // [rsp+2Ch] [rbp-194h]
  std::string v18; // [rsp+30h] [rbp-190h] BYREF
  char v19[368]; // [rsp+50h] [rbp-170h] BYREF

  v4 = (unsigned __int64)v19;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v5 = __asan_stack_malloc_3(320LL);
    if ( v5 )
      v4 = v5;
  }
  *(_QWORD *)v4 = 1102416563LL;
  *(_QWORD *)(v4 + 8) = "7 32 4 12 drop_id:4622 48 4 15 drop_count:4622 64 4 16 reason_type:4622 80 4 15 limit_type:4622 "
                        "96 16 7 ss:4630 128 24 11 reason:4627 192 96 17 check_result:4628";
  *(_QWORD *)(v4 + 16) = procCheckItem(GmContext &,std::vector<std::string> const&,std::string&)::{lambda(GmContext &,std::string&)#2}::operator();
  v6 = (_DWORD *)(v4 >> 3);
  v6[536862720] = -235802127;
  v6[536862721] = -234556924;
  v6[536862722] = -234556924;
  v6[536862723] = -219021312;
  v6[536862724] = -234881024;
  v6[536862725] = -218959118;
  v6[536862729] = -202116109;
  *(_DWORD *)(v4 + 32) = 0;
  *(_DWORD *)(v4 + 48) = 0;
  *(_DWORD *)(v4 + 64) = 0;
  *(_DWORD *)(v4 + 80) = 0;
  if ( common::tools::ConvertUtils::convertTo<1u,unsigned int,unsigned int &,unsigned int &,unsigned int &>(
         &context->raw_param_vec,
         (unsigned int *)(v4 + 32),
         (unsigned int *)(v4 + 48),
         (unsigned int *)(v4 + 64),
         (unsigned int *)(v4 + 80),
         v3,
         v14,
         (unsigned int *)ret_msg) )
  {
    v7 = -1;
  }
  else
  {
    ActionReason::ActionReason(
      (ActionReason *const)(v4 + 128),
      *(proto::ActionReasonType *)(v4 + 64),
      *(data::ItemLimitType *)(v4 + 80));
    FrontLooseCheckResult::FrontLooseCheckResult((FrontLooseCheckResult *const)(v4 + 192));
    if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
      __asan_report_load8(&context->player);
    ItemComp = Player::getItemComp(context->player);
    ret = PlayerItemComp::checkFrontLooseGrantDropItems(
            ItemComp,
            *(_DWORD *)(v4 + 32),
            *(_DWORD *)(v4 + 48),
            (const ActionReason *)(v4 + 128),
            (FrontLooseCheckResult *)(v4 + 192));
    common::tools::StringStream<common::tools::FixedBuffer<4096>>::StringStream((common::tools::StringStream<common::tools::FixedBuffer<4096> > *const)(v4 + 96));
    v9 = common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(
           (common::tools::StringStream<common::tools::FixedBuffer<4096> > *const)(v4 + 96),
           "check_result:{exceeded_item_set:");
    v10 = common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<<unsigned int>(
            v9,
            (const std::set<unsigned int> *)(v4 + 192));
    v11 = common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(v10, ",exceeded_item_type_set:");
    v12 = common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<<unsigned int>(
            v11,
            (const std::set<unsigned int> *)(v4 + 240));
    common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(v12, "}");
    common::tools::StringStream<common::tools::FixedBuffer<4096>>::str[abi:cxx11](
      &v18,
      (common::tools::StringStream<common::tools::FixedBuffer<4096> > *const)(v4 + 96));
    std::string::operator+=(ret_msgb, &v18);
    std::string::~string(&v18);
    v7 = ret;
    common::tools::StringStream<common::tools::FixedBuffer<4096>>::~StringStream((common::tools::StringStream<common::tools::FixedBuffer<4096> > *const)(v4 + 96));
    FrontLooseCheckResult::~FrontLooseCheckResult((FrontLooseCheckResult *const)(v4 + 192));
  }
  result = v7;
  if ( v19 == (char *)v4 )
  {
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8008) = 0LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8010) = 0LL;
    *(_DWORD *)((v4 >> 3) + 0x7FFF8024) = 0;
  }
  else
  {
    *(_QWORD *)v4 = 1172321806LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8020) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 4639: range 0000000017BE5B7E-0000000017BE5F35
int __cdecl procCheckItem(GmContext &,std::vector<std::string> const&,std::string&)::{lambda(GmContext &,std::string&)#3}::operator()(
        const procCheckItem::<lambda(GmContext&, std::string&)> *const __closure,
        GmContext *context,
        std::string *ret_msg)
{
  unsigned __int64 v3; // r13
  __int64 v4; // rax
  _DWORD *v5; // r12
  unsigned int *v6; // r8
  unsigned int *v7; // r9
  int v8; // r14d
  PlayerItemComp *ItemComp; // rax
  common::tools::StringStream<common::tools::FixedBuffer<4096> > *v10; // rax
  common::tools::StringStream<common::tools::FixedBuffer<4096> > *v11; // rax
  common::tools::StringStream<common::tools::FixedBuffer<4096> > *v12; // rax
  common::tools::StringStream<common::tools::FixedBuffer<4096> > *v13; // rax
  int result; // eax
  int32_t ret; // [rsp+2Ch] [rbp-1B4h]
  std::string v17; // [rsp+30h] [rbp-1B0h] BYREF
  char v18[400]; // [rsp+50h] [rbp-190h] BYREF

  v3 = (unsigned __int64)v18;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_3(352LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "6 32 4 16 reason_type:4642 48 4 15 limit_type:4642 64 16 7 ss:4650 96 24 18 reward_id_vec:4641 1"
                        "60 24 11 reason:4647 224 96 17 check_result:4648";
  *(_QWORD *)(v3 + 16) = procCheckItem(GmContext &,std::vector<std::string> const&,std::string&)::{lambda(GmContext &,std::string&)#3}::operator();
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = -234556924;
  v5[536862722] = -219021312;
  v5[536862723] = -234881024;
  v5[536862724] = -218959118;
  v5[536862725] = -234881024;
  v5[536862726] = -218959118;
  v5[536862730] = -202116109;
  std::vector<unsigned int>::vector((std::vector<unsigned int> *const)(v3 + 96));
  *(_DWORD *)(v3 + 32) = 0;
  *(_DWORD *)(v3 + 48) = 0;
  if ( common::tools::ConvertUtils::convertTo<1u,std::vector<unsigned int>,unsigned int &,unsigned int &>(
         &context->raw_param_vec,
         (std::vector<unsigned int> *)(v3 + 96),
         (unsigned int *)(v3 + 32),
         (unsigned int *)(v3 + 48),
         v6,
         v7) )
  {
    v8 = -1;
  }
  else
  {
    ActionReason::ActionReason(
      (ActionReason *const)(v3 + 160),
      *(proto::ActionReasonType *)(v3 + 32),
      *(data::ItemLimitType *)(v3 + 48));
    FrontLooseCheckResult::FrontLooseCheckResult((FrontLooseCheckResult *const)(v3 + 224));
    if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
      __asan_report_load8(&context->player);
    ItemComp = Player::getItemComp(context->player);
    ret = PlayerItemComp::checkFrontLooseGrantRewards(
            ItemComp,
            (const std::vector<unsigned int> *)(v3 + 96),
            (const ActionReason *)(v3 + 160),
            (FrontLooseCheckResult *)(v3 + 224));
    common::tools::StringStream<common::tools::FixedBuffer<4096>>::StringStream((common::tools::StringStream<common::tools::FixedBuffer<4096> > *const)(v3 + 64));
    v10 = common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(
            (common::tools::StringStream<common::tools::FixedBuffer<4096> > *const)(v3 + 64),
            "check_result:{exceeded_item_set:");
    v11 = common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<<unsigned int>(
            v10,
            (const std::set<unsigned int> *)(v3 + 224));
    v12 = common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(v11, ",exceeded_item_type_set:");
    v13 = common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<<unsigned int>(
            v12,
            (const std::set<unsigned int> *)(v3 + 272));
    common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(v13, "}");
    common::tools::StringStream<common::tools::FixedBuffer<4096>>::str[abi:cxx11](
      &v17,
      (common::tools::StringStream<common::tools::FixedBuffer<4096> > *const)(v3 + 64));
    std::string::operator+=(ret_msg, &v17);
    std::string::~string(&v17);
    v8 = ret;
    common::tools::StringStream<common::tools::FixedBuffer<4096>>::~StringStream((common::tools::StringStream<common::tools::FixedBuffer<4096> > *const)(v3 + 64));
    FrontLooseCheckResult::~FrontLooseCheckResult((FrontLooseCheckResult *const)(v3 + 224));
  }
  std::vector<unsigned int>::~vector((std::vector<unsigned int> *const)(v3 + 96));
  result = v8;
  if ( v18 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8010) = 0LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8018) = 0;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8028) = 0;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8020) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8028) = -168430091;
  }
  return result;
};

// Line 4670: range 0000000017D749B8-0000000017D74A5A
void __cdecl addEquipRegister::addEquipRegister(addEquipRegister *const this)
{
  std::function<int(GmContext&,const std::vector<std::string>&,std::string&)> *v1; // rax
  std::allocator<char> __a; // [rsp+1Fh] [rbp-31h] BYREF
  std::string __k; // [rsp+20h] [rbp-30h] BYREF

  std::allocator<char>::allocator(&__a);
  std::string::basic_string<std::allocator<char>>(&__k, "EQUIP", &__a);
  v1 = std::unordered_map<std::string,std::function<int ()(GmContext &,std::vector<std::string> const&,std::string&)>>::operator[](
         &GmUtils::op_func_map[abi:cxx11],
         &__k);
  std::function<int ()(GmContext &,std::vector<std::string> const&,std::string&)>::operator=<int (&)(GmContext &,std::vector<std::string> const&,std::string&)>(
    v1,
    (int (*)(GmContext *, const std::vector<std::string> *, std::string *))addEquip);
  std::string::~string(&__k);
  std::allocator<char>::~allocator(&__a);
};

// Line 4671: range 0000000017BE65A6-0000000017BE824D
int32_t __cdecl addEquip(GmContext *context, const std::vector<std::string> *param_vec, std::string *ret_msg)
{
  unsigned __int64 v3; // r13
  __int64 v4; // rax
  _DWORD *v5; // r12
  const std::string *v6; // rax
  const std::string *v7; // rax
  common::milog::MiLogStream *v8; // rdx
  const std::string *v9; // rax
  common::milog::MiLogStream *v10; // rdx
  const std::string *v11; // rax
  common::milog::MiLogStream *v12; // rdx
  PlayerItemComp *ItemComp; // rax
  common::milog::MiLogStream *v14; // rdx
  std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v15; // rax
  uint32_t v16; // eax
  common::milog::MiLogStream *v17; // rdx
  common::milog::MiLogStream *v18; // rax
  common::milog::MiLogStream *v19; // r14
  common::milog::MiLogStream *v20; // rax
  common::milog::MiLogStream *v21; // rax
  __int64 v22; // rax
  __int64 v23; // rax
  _BOOL4 v24; // r14d
  common::milog::MiLogStream *v25; // rdx
  common::milog::MiLogStream *v26; // rax
  common::milog::MiLogStream *v27; // r14
  common::milog::MiLogStream *v28; // rax
  common::milog::MiLogStream *v29; // rax
  int v30; // r14d
  std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v31; // rax
  common::milog::MiLogStream *v32; // rdx
  common::milog::MiLogStream *v33; // rax
  common::milog::MiLogStream *v34; // r14
  common::milog::MiLogStream *v35; // rax
  common::milog::MiLogStream *v36; // rax
  Reliquary *v37; // r14
  Reliquary *v38; // rax
  uint32_t *v39; // rax
  uint32_t *v40; // rdx
  std::__shared_ptr_access<Reliquary,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v41; // rax
  unsigned __int64 v42; // rdx
  std::__shared_ptr_access<Reliquary,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v43; // rax
  __int64 v44; // rax
  __int64 v45; // rax
  __int64 v46; // r14
  std::__shared_ptr_access<Reliquary,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v47; // rax
  uint32_t Level; // eax
  std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v49; // rax
  EquipComp *EquipComp; // r14
  Equip *v51; // rax
  int v53; // r14d
  uint32_t v54; // eax
  common::milog::MiLogStream *v55; // rdx
  common::milog::MiLogStream *v56; // rax
  common::milog::MiLogStream *v57; // r14
  common::milog::MiLogStream *v58; // rax
  common::milog::MiLogStream *v59; // rax
  __int64 v60; // rax
  __int64 v61; // rax
  _BOOL4 v62; // r14d
  common::milog::MiLogStream *v63; // rdx
  common::milog::MiLogStream *v64; // rax
  common::milog::MiLogStream *v65; // r14
  common::milog::MiLogStream *v66; // rax
  common::milog::MiLogStream *v67; // rax
  int v68; // r14d
  std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v69; // rax
  uint32_t *v70; // rax
  uint32_t *v71; // rdx
  Weapon *v72; // rax
  uint32_t *v73; // rax
  uint32_t *v74; // rdx
  const std::string *v75; // rax
  Weapon *v76; // rax
  std::__shared_ptr_access<Weapon,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v77; // rax
  unsigned __int64 v78; // rdx
  std::__shared_ptr_access<Weapon,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v79; // rax
  __int64 v80; // rax
  __int64 v81; // rax
  __int64 v82; // r14
  std::__shared_ptr_access<Weapon,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v83; // rax
  uint32_t v84; // eax
  __int64 v85; // rax
  __int64 v86; // r14
  std::__shared_ptr_access<Weapon,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v87; // rax
  uint32_t PromoteLevel; // eax
  std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v89; // rax
  EquipComp *v90; // r14
  Equip *v91; // rax
  common::milog::MiLogStream *v93; // r14
  common::milog::MiLogStream *v94; // rax
  common::milog::MiLogStream *v95; // rax
  __int64 v96; // rax
  __int64 v97; // rax
  const std::string *v98; // rax
  const std::string *v99; // rax
  PlayerGmComp *GmComp; // rax
  const std::string *v101; // rax
  PlayerGmComp *v102; // rax
  common::milog::MiLogStream *v103; // rdx
  int32_t result; // eax
  data::ItemType ItemType; // [rsp+8h] [rbp-3E8h]
  std::__shared_ptr_access<Weapon,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v106; // [rsp+8h] [rbp-3E8h]
  std::__shared_ptr_access<Weapon,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v107; // [rsp+8h] [rbp-3E8h]
  Weapon *v108; // [rsp+8h] [rbp-3E8h]
  int32_t v109; // [rsp+14h] [rbp-3DCh]
  const data::ReliquaryExcelConfig *reliquary_excel_config; // [rsp+38h] [rbp-3B8h]
  char v112[32]; // [rsp+40h] [rbp-3B0h] BYREF
  char v113[32]; // [rsp+60h] [rbp-390h] BYREF
  common::milog::MiLogStream v114; // [rsp+80h] [rbp-370h] BYREF
  char v115[848]; // [rsp+A0h] [rbp-350h] BYREF
  addEquip::<lambda(uint32_t, uint32_t)> v116; // 0:rsi.8,8:edx.4

  v3 = (unsigned __int64)v115;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_4(800LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "10 32 4 12 item_id:4679 48 4 10 level:4680 64 4 18 promote_level:4681 80 4 17 awaken_level:4775 "
                        "96 16 13 item_ptr:4755 128 16 15 weapon_ptr:4763 160 16 15 avatar_ptr:4799 192 24 18 action_reas"
                        "on:4708 256 48 26 delta_affix_level_map:4779 336 392 19 ret_msg_stream:4714";
  *(_QWORD *)(v3 + 16) = addEquip;
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = -234556924;
  v5[536862722] = -234556924;
  v5[536862723] = -219021312;
  v5[536862724] = -219021312;
  v5[536862725] = -219021312;
  v5[536862726] = -234881024;
  v5[536862727] = -218959118;
  v5[536862729] = -219021312;
  v5[536862730] = 62194;
  v5[536862742] = -218103808;
  v5[536862743] = -202116109;
  v5[536862744] = -202116109;
  if ( std::vector<std::string>::empty(param_vec) )
  {
    common::milog::MiLogStream::create(
      &v114,
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/player/gm/player_gm_comp.cpp",
      "addEquip",
      4674);
    common::milog::MiLogStream::operator<<<char [17],(char *[17])0>(&v114, (const char (*)[17])"param not enough");
    common::milog::MiLogStream::~MiLogStream(&v114);
    v109 = -1;
    goto LABEL_108;
  }
  v6 = std::vector<std::string>::operator[](param_vec, 0LL);
  if ( std::operator==<char>(v6, off_26356D00) )
  {
    *(_DWORD *)(v3 + 32) = 0;
    *(_DWORD *)(v3 + 48) = 1;
    *(_DWORD *)(v3 + 64) = 0;
    if ( std::vector<std::string>::size(param_vec) <= 1 )
    {
      common::milog::MiLogStream::create(
        &v114,
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/player/gm/player_gm_comp.cpp",
        "addEquip",
        4684);
      common::milog::MiLogStream::operator<<<char [17],(char *[17])0>(&v114, (const char (*)[17])"param not enough");
      common::milog::MiLogStream::~MiLogStream(&v114);
      v109 = -1;
      goto LABEL_108;
    }
    v7 = std::vector<std::string>::operator[](param_vec, 1uLL);
    if ( common::tools::StringUtils::strToNum<unsigned int>(v7, (unsigned int *)(v3 + 32), 1) )
    {
      common::milog::MiLogStream::create(
        &v114,
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/player/gm/player_gm_comp.cpp",
        "addEquip",
        4689);
      v8 = common::milog::MiLogStream::operator<<<char [15],(char *[15])0>(&v114, (const char (*)[15])"invalid param:");
      common::milog::MiLogStream::operator<<<std::string>(v8, param_vec);
      common::milog::MiLogStream::~MiLogStream(&v114);
      v109 = -1;
      goto LABEL_108;
    }
    if ( std::vector<std::string>::size(param_vec) > 2 )
    {
      v9 = std::vector<std::string>::operator[](param_vec, 2uLL);
      if ( common::tools::StringUtils::strToNum<unsigned int>(v9, (unsigned int *)(v3 + 48), 1) )
      {
        common::milog::MiLogStream::create(
          &v114,
          &common::milog::MiLogDefault::default_log_obj_,
          3u,
          "./src/player/gm/player_gm_comp.cpp",
          "addEquip",
          4696);
        v10 = common::milog::MiLogStream::operator<<<char [15],(char *[15])0>(
                &v114,
                (const char (*)[15])"invalid param:");
        common::milog::MiLogStream::operator<<<std::string>(v10, param_vec);
        common::milog::MiLogStream::~MiLogStream(&v114);
        v109 = -1;
        goto LABEL_108;
      }
    }
    if ( std::vector<std::string>::size(param_vec) > 3 )
    {
      v11 = std::vector<std::string>::operator[](param_vec, 3uLL);
      if ( common::tools::StringUtils::strToNum<unsigned int>(v11, (unsigned int *)(v3 + 64), 1) )
      {
        common::milog::MiLogStream::create(
          &v114,
          &common::milog::MiLogDefault::default_log_obj_,
          3u,
          "./src/player/gm/player_gm_comp.cpp",
          "addEquip",
          4704);
        v12 = common::milog::MiLogStream::operator<<<char [15],(char *[15])0>(
                &v114,
                (const char (*)[15])"invalid param:");
        common::milog::MiLogStream::operator<<<std::string>(v12, param_vec);
        common::milog::MiLogStream::~MiLogStream(&v114);
        v109 = -1;
        goto LABEL_108;
      }
    }
    ActionReason::ActionReason((ActionReason *const)(v3 + 192), ACTION_REASON_GM, ITEM_LIMIT_GM);
    if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
      __asan_report_load8(&context->player);
    ItemComp = Player::getItemComp(context->player);
    *(_DWORD *)(v3 + 160) = *(_DWORD *)(v3 + 32);
    *(_DWORD *)(v3 + 164) = 1;
    *(_DWORD *)(v3 + 168) = 0;
    *(_DWORD *)(v3 + 172) = 0;
    if ( PlayerItemComp::checkAddItem(ItemComp, (const ItemParam *)(v3 + 160), (const ActionReason *)(v3 + 192)) )
    {
      common::milog::MiLogStream::create(
        &v114,
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/player/gm/player_gm_comp.cpp",
        "addEquip",
        4711);
      v14 = common::milog::MiLogStream::operator<<<char [30],(char *[30])0>(
              &v114,
              (const char (*)[30])"checkAddItem fail, param_vec:");
      common::milog::MiLogStream::operator<<<std::string>(v14, param_vec);
      common::milog::MiLogStream::~MiLogStream(&v114);
      v109 = -1;
      goto LABEL_108;
    }
    std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream(v3 + 336);
    ServiceBox::findService<GameserverService>();
    GameserverService::getConfig((GameserverService *const)(v3 + 160));
    v15 = std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 160));
    ItemType = ItemExcelConfigMgr::getItemType(&v15->design_config.txt_config_mgr.item_config_mgr, *(_DWORD *)(v3 + 32));
    std::shared_ptr<Config>::~shared_ptr((std::shared_ptr<Config> *const)(v3 + 160));
    if ( ItemType == ITEM_RELIQUARY )
    {
      if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
        __asan_report_load8(&context->player);
      v16 = (unsigned int)Player::getItemComp(context->player);
      PlayerItemComp::forceAddEquipByAddAvatar(
        (PlayerItemComp *const)(v3 + 96),
        v16,
        (const ActionReason *)*(unsigned int *)(v3 + 32));
      if ( std::operator==<Item>((const std::shared_ptr<Item> *)(v3 + 96), 0LL) )
      {
        common::milog::MiLogStream::create(
          &v114,
          &common::milog::MiLogDefault::default_log_obj_,
          3u,
          "./src/player/gm/player_gm_comp.cpp",
          "addEquip",
          4722);
        v17 = common::milog::MiLogStream::operator<<<char [8],(char *[8])0>(&v114, (const char (*)[8])"param: ");
        v18 = common::milog::MiLogStream::operator<<<std::string>(v17, param_vec);
        v19 = common::milog::MiLogStream::operator<<<char [7],(char *[7])0>(v18, (const char (*)[7])" uid: ");
        if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
          __asan_report_load8(&context->player);
        *(_DWORD *)(v3 + 80) = Player::getUid(context->player);
        v20 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                v19,
                (const unsigned int *)(v3 + 80));
        v21 = common::milog::MiLogStream::operator<<<char [44],(char *[44])0>(
                v20,
                (const char (*)[44])" forceAddEquipByAddAvatar failed, item_id: ");
        common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v21, (const unsigned int *)(v3 + 32));
        common::milog::MiLogStream::~MiLogStream(&v114);
        v22 = std::operator<<<std::char_traits<char>>(v3 + 352, "item ");
        v23 = std::ostream::operator<<(v22, *(unsigned int *)(v3 + 32));
        std::operator<<<std::char_traits<char>>(v23, " not found.");
        std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::str(v112, v3 + 336);
        std::string::operator=(ret_msg, v112);
        std::string::~string(v112);
        v109 = -1;
        v24 = 0;
      }
      else
      {
        std::dynamic_pointer_cast<Reliquary,Item>((const std::shared_ptr<Item> *)(v3 + 128));
        if ( std::operator==<Reliquary>((const std::shared_ptr<Reliquary> *)(v3 + 128), 0LL) )
        {
          common::milog::MiLogStream::create(
            &v114,
            &common::milog::MiLogDefault::default_log_obj_,
            3u,
            "./src/player/gm/player_gm_comp.cpp",
            "addEquip",
            4730);
          v25 = common::milog::MiLogStream::operator<<<char [8],(char *[8])0>(&v114, (const char (*)[8])"param: ");
          v26 = common::milog::MiLogStream::operator<<<std::string>(v25, param_vec);
          v27 = common::milog::MiLogStream::operator<<<char [7],(char *[7])0>(v26, (const char (*)[7])" uid: ");
          if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
            __asan_report_load8(&context->player);
          *(_DWORD *)(v3 + 80) = Player::getUid(context->player);
          v28 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                  v27,
                  (const unsigned int *)(v3 + 80));
          v29 = common::milog::MiLogStream::operator<<<char [40],(char *[40])0>(
                  v28,
                  (const char (*)[40])" dynamic_pointer_cast failed, item_id :");
          common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v29, (const unsigned int *)(v3 + 32));
          common::milog::MiLogStream::~MiLogStream(&v114);
          v109 = -1;
          v30 = 0;
        }
        else
        {
          ServiceBox::findService<GameserverService>();
          GameserverService::getConfig((GameserverService *const)(v3 + 160));
          v31 = std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 160));
          reliquary_excel_config = data::ReliquaryExcelConfigMgrBase::findReliquaryExcelConfig(
                                     &v31->design_config.txt_config_mgr.reliquary_config_mgr,
                                     *(_DWORD *)(v3 + 32));
          std::shared_ptr<Config>::~shared_ptr((std::shared_ptr<Config> *const)(v3 + 160));
          if ( reliquary_excel_config )
          {
            v37 = std::__shared_ptr_access<Reliquary,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Reliquary,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 128));
            v38 = std::__shared_ptr_access<Reliquary,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Reliquary,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 128));
            *(_DWORD *)(v3 + 80) = Reliquary::getMaxLevel(v38);
            v39 = (uint32_t *)std::min<unsigned int>((const unsigned int *)(v3 + 48), (const unsigned int *)(v3 + 80));
            v40 = v39;
            if ( *(_BYTE *)(((unsigned __int64)v39 >> 3) + 0x7FFF8000) != 0
              && (char)(((unsigned __int8)v39 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)v39 >> 3) + 0x7FFF8000) )
            {
              __asan_report_load4(v39);
            }
            Reliquary::setLevel(v37, *v40);
            v41 = std::__shared_ptr_access<Reliquary,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Reliquary,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 128));
            if ( *(_BYTE *)(((unsigned __int64)v41 >> 3) + 0x7FFF8000) )
              __asan_report_load8(v41);
            v42 = (unsigned __int64)(v41->_vptr_Item + 14);
            if ( *(_BYTE *)((v42 >> 3) + 0x7FFF8000) )
              __asan_report_load8(v41->_vptr_Item + 14);
            (*(void (__fastcall **)(std::__shared_ptr_access<Reliquary,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *))v42)(v41);
            v43 = std::__shared_ptr_access<Reliquary,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Reliquary,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 128));
            Item::notifyItemChange(v43);
            v44 = std::operator<<<std::char_traits<char>>(v3 + 352, &off_263592A0);
            v45 = std::ostream::operator<<(v44, *(unsigned int *)(v3 + 32));
            v46 = std::operator<<<std::char_traits<char>>(v45, " level=");
            v47 = std::__shared_ptr_access<Reliquary,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Reliquary,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 128));
            Level = Reliquary::getLevel(v47);
            std::ostream::operator<<(v46, Level);
            if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
              __asan_report_load8(&context->player);
            Player::getAvatarComp(context->player);
            PlayerAvatarComp::getCurAvatar((const PlayerAvatarComp *const)(v3 + 160));
            if ( std::operator==<Avatar>((const std::shared_ptr<Avatar> *)(v3 + 160), 0LL)
              || (v49 = std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 160)),
                  EquipComp = Avatar::getEquipComp(v49),
                  v51 = (Equip *)std::__shared_ptr_access<Reliquary,(__gnu_cxx::_Lock_policy)2,false,false>::operator*((const std::__shared_ptr_access<Reliquary,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 128)),
                  EquipComp::wearEquipKeepHpRate(EquipComp, v51, 1)) )
            {
              std::operator<<<std::char_traits<char>>(v3 + 352, " But failed to wear it.");
            }
            std::shared_ptr<Avatar>::~shared_ptr((std::shared_ptr<Avatar> *const)(v3 + 160));
            v30 = 1;
          }
          else
          {
            common::milog::MiLogStream::create(
              &v114,
              &common::milog::MiLogDefault::default_log_obj_,
              3u,
              "./src/player/gm/player_gm_comp.cpp",
              "addEquip",
              4738);
            v32 = common::milog::MiLogStream::operator<<<char [8],(char *[8])0>(&v114, (const char (*)[8])"param: ");
            v33 = common::milog::MiLogStream::operator<<<std::string>(v32, param_vec);
            v34 = common::milog::MiLogStream::operator<<<char [7],(char *[7])0>(v33, (const char (*)[7])" uid: ");
            if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
              __asan_report_load8(&context->player);
            *(_DWORD *)(v3 + 80) = Player::getUid(context->player);
            v35 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                    v34,
                    (const unsigned int *)(v3 + 80));
            v36 = common::milog::MiLogStream::operator<<<char [43],(char *[43])0>(
                    v35,
                    (const char (*)[43])" ReliquaryExcelConfig not found, item_id :");
            common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v36, (const unsigned int *)(v3 + 32));
            common::milog::MiLogStream::~MiLogStream(&v114);
            v109 = -1;
            v30 = 0;
          }
        }
        std::shared_ptr<Reliquary>::~shared_ptr((std::shared_ptr<Reliquary> *const)(v3 + 128));
        v24 = v30 != 0;
      }
      std::shared_ptr<Item>::~shared_ptr((std::shared_ptr<Item> *const)(v3 + 96));
      if ( !v24 )
      {
        v53 = 0;
        goto LABEL_93;
      }
    }
    else
    {
      if ( ItemType != ITEM_WEAPON )
      {
        common::milog::MiLogStream::create(
          &v114,
          &common::milog::MiLogDefault::default_log_obj_,
          3u,
          "./src/player/gm/player_gm_comp.cpp",
          "addEquip",
          4807);
        v93 = common::milog::MiLogStream::operator<<<char [6],(char *[6])0>(&v114, (const char (*)[6])"uid: ");
        if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
          __asan_report_load8(&context->player);
        *(_DWORD *)(v3 + 80) = Player::getUid(context->player);
        v94 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                v93,
                (const unsigned int *)(v3 + 80));
        v95 = common::milog::MiLogStream::operator<<<char [19],(char *[19])0>(
                v94,
                (const char (*)[19])" invalid item_id: ");
        common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v95, (const unsigned int *)(v3 + 32));
        common::milog::MiLogStream::~MiLogStream(&v114);
        v96 = std::operator<<<std::char_traits<char>>(v3 + 352, "item_id=");
        v97 = std::ostream::operator<<(v96, *(unsigned int *)(v3 + 32));
        std::operator<<<std::char_traits<char>>(v97, " not found!");
        v109 = -1;
        v53 = 0;
LABEL_93:
        std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream(v3 + 336);
        if ( v53 != 1 )
          goto LABEL_108;
        goto LABEL_107;
      }
      if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
        __asan_report_load8(&context->player);
      v54 = (unsigned int)Player::getItemComp(context->player);
      PlayerItemComp::forceAddEquipByAddAvatar(
        (PlayerItemComp *const)(v3 + 96),
        v54,
        (const ActionReason *)*(unsigned int *)(v3 + 32));
      if ( std::operator==<Item>((const std::shared_ptr<Item> *)(v3 + 96), 0LL) )
      {
        common::milog::MiLogStream::create(
          &v114,
          &common::milog::MiLogDefault::default_log_obj_,
          3u,
          "./src/player/gm/player_gm_comp.cpp",
          "addEquip",
          4758);
        v55 = common::milog::MiLogStream::operator<<<char [8],(char *[8])0>(&v114, (const char (*)[8])"param: ");
        v56 = common::milog::MiLogStream::operator<<<std::string>(v55, param_vec);
        v57 = common::milog::MiLogStream::operator<<<char [7],(char *[7])0>(v56, (const char (*)[7])" uid: ");
        if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
          __asan_report_load8(&context->player);
        *(_DWORD *)(v3 + 80) = Player::getUid(context->player);
        v58 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                v57,
                (const unsigned int *)(v3 + 80));
        v59 = common::milog::MiLogStream::operator<<<char [44],(char *[44])0>(
                v58,
                (const char (*)[44])" forceAddEquipByAddAvatar failed, item_id: ");
        common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v59, (const unsigned int *)(v3 + 32));
        common::milog::MiLogStream::~MiLogStream(&v114);
        v60 = std::operator<<<std::char_traits<char>>(v3 + 352, "item ");
        v61 = std::ostream::operator<<(v60, *(unsigned int *)(v3 + 32));
        std::operator<<<std::char_traits<char>>(v61, " not found.");
        std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::str(v113, v3 + 336);
        std::string::operator=(ret_msg, v113);
        std::string::~string(v113);
        v109 = -1;
        v62 = 0;
      }
      else
      {
        std::dynamic_pointer_cast<Weapon,Item>((const std::shared_ptr<Item> *)(v3 + 128));
        if ( std::operator==<Weapon>((const std::shared_ptr<Weapon> *)(v3 + 128), 0LL) )
        {
          common::milog::MiLogStream::create(
            &v114,
            &common::milog::MiLogDefault::default_log_obj_,
            3u,
            "./src/player/gm/player_gm_comp.cpp",
            "addEquip",
            4766);
          v63 = common::milog::MiLogStream::operator<<<char [8],(char *[8])0>(&v114, (const char (*)[8])"param: ");
          v64 = common::milog::MiLogStream::operator<<<std::string>(v63, param_vec);
          v65 = common::milog::MiLogStream::operator<<<char [7],(char *[7])0>(v64, (const char (*)[7])" uid: ");
          if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
            __asan_report_load8(&context->player);
          *(_DWORD *)(v3 + 80) = Player::getUid(context->player);
          v66 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                  v65,
                  (const unsigned int *)(v3 + 80));
          v67 = common::milog::MiLogStream::operator<<<char [40],(char *[40])0>(
                  v66,
                  (const char (*)[40])" dynamic_pointer_cast failed, item_id :");
          common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v67, (const unsigned int *)(v3 + 32));
          common::milog::MiLogStream::~MiLogStream(&v114);
          v109 = -1;
          v68 = 0;
        }
        else
        {
          v106 = std::__shared_ptr_access<Weapon,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Weapon,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 128));
          ServiceBox::findService<GameserverService>();
          GameserverService::getConfig((GameserverService *const)(v3 + 160));
          v69 = std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 160));
          *(_DWORD *)(v3 + 80) = WeaponExcelConfigMgr::getWeaponMaxPromoteLevel(
                                   &v69->design_config.txt_config_mgr.weapon_config_mgr,
                                   *(_DWORD *)(v3 + 32));
          v70 = (uint32_t *)std::min<unsigned int>((const unsigned int *)(v3 + 64), (const unsigned int *)(v3 + 80));
          v71 = v70;
          if ( *(_BYTE *)(((unsigned __int64)v70 >> 3) + 0x7FFF8000) != 0
            && (char)(((unsigned __int8)v70 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)v70 >> 3) + 0x7FFF8000) )
          {
            __asan_report_load4(v70);
          }
          Weapon::setPromoteLevel(v106, *v71);
          std::shared_ptr<Config>::~shared_ptr((std::shared_ptr<Config> *const)(v3 + 160));
          v107 = std::__shared_ptr_access<Weapon,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Weapon,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 128));
          v72 = std::__shared_ptr_access<Weapon,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Weapon,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 128));
          *(_DWORD *)(v3 + 80) = Weapon::getMaxLevel(v72);
          v73 = (uint32_t *)std::min<unsigned int>((const unsigned int *)(v3 + 48), (const unsigned int *)(v3 + 80));
          v74 = v73;
          if ( *(_BYTE *)(((unsigned __int64)v73 >> 3) + 0x7FFF8000) != 0
            && (char)(((unsigned __int8)v73 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)v73 >> 3) + 0x7FFF8000) )
          {
            __asan_report_load4(v73);
          }
          Weapon::setLevel(v107, *v74);
          if ( std::vector<std::string>::size(param_vec) > 4 )
          {
            v75 = std::vector<std::string>::operator[](param_vec, 4uLL);
            common::tools::StringUtils::strToNum<unsigned int>(v75, (unsigned int *)(v3 + 80), 1);
            if ( *(_DWORD *)(v3 + 80) )
            {
              std::map<unsigned int,unsigned int>::map((std::map<unsigned int,unsigned int> *const)(v3 + 256));
              v108 = std::__shared_ptr_access<Weapon,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Weapon,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 128));
              v116.__awaken_level = *(_DWORD *)(v3 + 80);
              v116.__delta_affix_level_map = (std::map<unsigned int,unsigned int> *)(v3 + 256);
              std::function<ForeachPolicy ()(unsigned int,unsigned int)>::function<addEquip(GmContext &,std::vector<std::string> const&,std::string&)::{lambda(unsigned int,unsigned int)#1},void,void>(
                (std::function<ForeachPolicy(unsigned int,unsigned int)> *const)&v114,
                v116);
              Weapon::foreachSkillAffix(v108, (std::function<ForeachPolicy(unsigned int,unsigned int)> *)&v114);
              std::function<ForeachPolicy ()(unsigned int,unsigned int)>::~function((std::function<ForeachPolicy(unsigned int,unsigned int)> *const)&v114);
              v76 = std::__shared_ptr_access<Weapon,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Weapon,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 128));
              Weapon::upgradeAffixLevel(v76, (const std::map<unsigned int,unsigned int> *)(v3 + 256), 0);
              std::map<unsigned int,unsigned int>::~map((std::map<unsigned int,unsigned int> *const)(v3 + 256));
            }
          }
          v77 = std::__shared_ptr_access<Weapon,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Weapon,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 128));
          if ( *(_BYTE *)(((unsigned __int64)v77 >> 3) + 0x7FFF8000) )
            __asan_report_load8(v77);
          v78 = (unsigned __int64)(v77->_vptr_Item + 14);
          if ( *(_BYTE *)((v78 >> 3) + 0x7FFF8000) )
            __asan_report_load8(v77->_vptr_Item + 14);
          (*(void (__fastcall **)(std::__shared_ptr_access<Weapon,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *))v78)(v77);
          v79 = std::__shared_ptr_access<Weapon,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Weapon,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 128));
          Item::notifyItemChange(v79);
          v80 = std::operator<<<std::char_traits<char>>(v3 + 352, &off_26359360);
          v81 = std::ostream::operator<<(v80, *(unsigned int *)(v3 + 32));
          v82 = std::operator<<<std::char_traits<char>>(v81, " level=");
          v83 = std::__shared_ptr_access<Weapon,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Weapon,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 128));
          v84 = Weapon::getLevel(v83);
          v85 = std::ostream::operator<<(v82, v84);
          v86 = std::operator<<<std::char_traits<char>>(v85, " protomte_level=");
          v87 = std::__shared_ptr_access<Weapon,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Weapon,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 128));
          PromoteLevel = Weapon::getPromoteLevel(v87);
          std::ostream::operator<<(v86, PromoteLevel);
          if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
            __asan_report_load8(&context->player);
          Player::getAvatarComp(context->player);
          PlayerAvatarComp::getCurAvatar((const PlayerAvatarComp *const)(v3 + 160));
          if ( std::operator==<Avatar>((const std::shared_ptr<Avatar> *)(v3 + 160), 0LL)
            || (v89 = std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 160)),
                v90 = Avatar::getEquipComp(v89),
                v91 = (Equip *)std::__shared_ptr_access<Weapon,(__gnu_cxx::_Lock_policy)2,false,false>::operator*((const std::__shared_ptr_access<Weapon,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 128)),
                EquipComp::wearEquipKeepHpRate(v90, v91, 1)) )
          {
            std::operator<<<std::char_traits<char>>(v3 + 352, " But failed to wear it.");
          }
          std::shared_ptr<Avatar>::~shared_ptr((std::shared_ptr<Avatar> *const)(v3 + 160));
          v68 = 1;
        }
        std::shared_ptr<Weapon>::~shared_ptr((std::shared_ptr<Weapon> *const)(v3 + 128));
        v62 = v68 != 0;
      }
      std::shared_ptr<Item>::~shared_ptr((std::shared_ptr<Item> *const)(v3 + 96));
      if ( !v62 )
      {
        v53 = 0;
        goto LABEL_93;
      }
    }
    std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::str(&v114, v3 + 336);
    std::string::operator=(ret_msg, &v114);
    std::string::~string(&v114);
    v53 = 1;
    goto LABEL_93;
  }
  v98 = std::vector<std::string>::operator[](param_vec, 0LL);
  if ( std::operator==<char>(v98, "LEVEL") )
  {
    if ( std::vector<std::string>::size(param_vec) <= 1 )
    {
      common::milog::MiLogStream::create(
        &v114,
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/player/gm/player_gm_comp.cpp",
        "addEquip",
        4817);
      common::milog::MiLogStream::operator<<<char [17],(char *[17])0>(&v114, (const char (*)[17])"param not enough");
      common::milog::MiLogStream::~MiLogStream(&v114);
      v109 = -1;
      goto LABEL_108;
    }
    v99 = std::vector<std::string>::operator[](param_vec, 1uLL);
    if ( std::operator==<char>(v99, stru_263521E0.gap0) )
    {
      if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
        __asan_report_load8(&context->player);
      GmComp = Player::getGmComp(context->player);
      PlayerGmComp::setIsEquipLevelOff(GmComp, 0);
      std::string::operator=(ret_msg, "equip level on");
    }
    else
    {
      v101 = std::vector<std::string>::operator[](param_vec, 1uLL);
      if ( !std::operator==<char>(v101, stru_26352260.gap0) )
      {
        common::milog::MiLogStream::create(
          &v114,
          &common::milog::MiLogDefault::default_log_obj_,
          1u,
          "./src/player/gm/player_gm_comp.cpp",
          "addEquip",
          4832);
        v103 = common::milog::MiLogStream::operator<<<char [15],(char *[15])0>(
                 &v114,
                 (const char (*)[15])"unknown param:");
        common::milog::MiLogStream::operator<<<std::string>(v103, param_vec);
        common::milog::MiLogStream::~MiLogStream(&v114);
        v109 = -1;
        goto LABEL_108;
      }
      if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
        __asan_report_load8(&context->player);
      v102 = Player::getGmComp(context->player);
      PlayerGmComp::setIsEquipLevelOff(v102, 1);
      std::string::operator=(ret_msg, "equip level off");
    }
  }
LABEL_107:
  v109 = 0;
LABEL_108:
  result = v109;
  if ( v115 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8010) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8018) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8024) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8058) = 0LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8060) = 0;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8020) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8028) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8030) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8038) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8040) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8048) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8050) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8058) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8060) = -168430091;
  }
  return result;
};

// Line 4780: range 0000000017BE633E-0000000017BE65A5
__int64 __fastcall addEquip(GmContext &,std::vector<std::string> const&,std::string&)::{lambda(unsigned int,unsigned int)#1}::operator()(
        unsigned __int64 __closure,
        uint32_t affix_id,
        uint32_t affix_level)
{
  unsigned __int64 v3; // rbx
  __int64 v4; // rax
  _DWORD *v5; // r12
  std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v6; // rax
  uint32_t *v7; // rax
  uint32_t *v8; // rdx
  unsigned __int64 v9; // rax
  __int64 result; // rax
  uint32_t target_level; // [rsp+1Ch] [rbp-94h]
  std::shared_ptr<Config> v13; // [rsp+20h] [rbp-90h] BYREF
  char v14[128]; // [rsp+30h] [rbp-80h] BYREF

  v3 = (unsigned __int64)v14;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_1(96LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "2 48 4 20 affix_max_level:4782 64 4 13 affix_id:4780";
  *(_QWORD *)(v3 + 16) = addEquip(GmContext &,std::vector<std::string> const&,std::string&)::{lambda(unsigned int,unsigned int)#1}::operator();
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = -234556943;
  v5[536862722] = -202116348;
  *(_DWORD *)(v3 + 64) = affix_id;
  ServiceBox::findService<GameserverService>();
  GameserverService::getConfig((GameserverService *const)&v13);
  v6 = std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false> *const)&v13);
  *(_DWORD *)(v3 + 48) = EquipAffixExcelConfigMgr::findEquipAffixMaxLevel(
                           &v6->design_config.txt_config_mgr.equip_affix_config_mgr,
                           *(_DWORD *)(v3 + 64));
  std::shared_ptr<Config>::~shared_ptr(&v13);
  v7 = (uint32_t *)std::min<unsigned int>((const unsigned int *)(__closure + 8), (const unsigned int *)(v3 + 48));
  v8 = v7;
  if ( *(_BYTE *)(((unsigned __int64)v7 >> 3) + 0x7FFF8000) != 0
    && (char)(((unsigned __int8)v7 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)v7 >> 3) + 0x7FFF8000) )
  {
    __asan_report_load4(v7);
  }
  target_level = *v8;
  if ( *v8 > affix_level )
  {
    if ( *(_BYTE *)((__closure >> 3) + 0x7FFF8000) )
      __asan_report_load8(__closure);
    v9 = (unsigned __int64)std::map<unsigned int,unsigned int>::operator[](
                             *(std::map<unsigned int,unsigned int> *const *)__closure,
                             (const std::map<unsigned int,unsigned int>::key_type *)(v3 + 64));
    if ( *(_BYTE *)((v9 >> 3) + 0x7FFF8000) != 0 && (char)((v9 & 7) + 3) >= *(_BYTE *)((v9 >> 3) + 0x7FFF8000) )
      v9 = __asan_report_load4(v9);
    *(_DWORD *)v9 += target_level - affix_level;
  }
  result = 0LL;
  if ( v14 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8008) = 0;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8008) = -168430091;
  }
  return result;
};

// Line 4839: range 0000000017D74A5C-0000000017D74AFE
void __cdecl procWeaponRegister::procWeaponRegister(procWeaponRegister *const this)
{
  std::function<int(GmContext&,const std::vector<std::string>&,std::string&)> *v1; // rax
  std::allocator<char> __a; // [rsp+1Fh] [rbp-31h] BYREF
  std::string __k; // [rsp+20h] [rbp-30h] BYREF

  std::allocator<char>::allocator(&__a);
  std::string::basic_string<std::allocator<char>>(&__k, "WEAPON", &__a);
  v1 = std::unordered_map<std::string,std::function<int ()(GmContext &,std::vector<std::string> const&,std::string&)>>::operator[](
         &GmUtils::op_func_map[abi:cxx11],
         &__k);
  std::function<int ()(GmContext &,std::vector<std::string> const&,std::string&)>::operator=<int (&)(GmContext &,std::vector<std::string> const&,std::string&)>(
    v1,
    (int (*)(GmContext *, const std::vector<std::string> *, std::string *))procWeapon);
  std::string::~string(&__k);
  std::allocator<char>::~allocator(&__a);
};

// Line 4840: range 0000000017BE824E-0000000017BE8F46
int32_t __cdecl procWeapon(GmContext *context, const std::vector<std::string> *param_vec, std::string *ret_msg)
{
  int32_t v3; // r14d
  unsigned __int64 v4; // r13
  __int64 v5; // rax
  _DWORD *v6; // r12
  const std::string *v7; // rax
  const std::string *v8; // rax
  common::milog::MiLogStream *v9; // rdx
  common::milog::MiLogStream *v10; // r14
  _BOOL4 v11; // r15d
  std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v12; // rax
  signed int EquipComp; // eax
  common::milog::MiLogStream *v14; // r14
  int v15; // r15d
  Weapon *v16; // rax
  Weapon *v17; // rax
  std::__shared_ptr_access<Weapon,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v18; // rax
  unsigned __int64 v19; // rdx
  std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v20; // rax
  std::__shared_ptr_access<Weapon,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v21; // rax
  const std::string *v22; // rax
  const std::string *v23; // rax
  common::milog::MiLogStream *v24; // rdx
  common::milog::MiLogStream *v25; // r14
  _BOOL4 v26; // r15d
  std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v27; // rax
  signed int v28; // eax
  common::milog::MiLogStream *v29; // r14
  int v30; // r15d
  uint32_t v31; // r15d
  std::__shared_ptr_access<Weapon,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v32; // rax
  uint32_t ItemId; // eax
  common::milog::MiLogStream *v34; // rax
  Weapon *v35; // rax
  WeaponExcelConfigMgr *p_weapon_config_mgr; // r15
  std::__shared_ptr_access<Weapon,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v37; // rax
  uint32_t v38; // eax
  Weapon *v39; // rcx
  Weapon *v40; // rax
  std::__shared_ptr_access<Weapon,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v41; // rax
  unsigned __int64 v42; // rdx
  std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v43; // rax
  EquipComp *v44; // rax
  std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v45; // rax
  std::__shared_ptr_access<Weapon,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v46; // rax
  int32_t result; // eax
  WeaponExcelConfigMgr *promote_level; // [rsp+10h] [rbp-130h]
  int promote_levela; // [rsp+10h] [rbp-130h]
  unsigned int val; // [rsp+3Ch] [rbp-104h] BYREF
  const data::WeaponPromoteExcelConfig *weapon_promote_config_ptr; // [rsp+40h] [rbp-100h]
  const data::WeaponPromoteExcelConfig *prev_weapon_promote_config_ptr; // [rsp+48h] [rbp-F8h]
  common::milog::MiLogStream v54; // [rsp+50h] [rbp-F0h] BYREF
  char v55[208]; // [rsp+70h] [rbp-D0h] BYREF

  v4 = (unsigned __int64)v55;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v5 = __asan_stack_malloc_2(160LL);
    if ( v5 )
      v4 = v5;
  }
  *(_QWORD *)v4 = 1102416563LL;
  *(_QWORD *)(v4 + 8) = "4 48 4 10 level:4879 64 16 15 avatar_ptr:4886 96 16 15 weapon_ptr:4893 128 16 15 weapon_ptr:4862";
  *(_QWORD *)(v4 + 16) = procWeapon;
  v6 = (_DWORD *)(v4 >> 3);
  v6[536862720] = -235802127;
  v6[536862721] = -234556943;
  v6[536862722] = -219021312;
  v6[536862723] = -219021312;
  v6[536862724] = -202178560;
  if ( std::vector<std::string>::size(param_vec) <= 1 )
  {
    common::milog::MiLogStream::create(
      &v54,
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/player/gm/player_gm_comp.cpp",
      "procWeapon",
      4843);
    common::milog::MiLogStream::operator<<<char [17],(char *[17])0>(&v54, (const char (*)[17])"param not enough");
    common::milog::MiLogStream::~MiLogStream(&v54);
    v3 = -1;
    goto LABEL_56;
  }
  v7 = std::vector<std::string>::operator[](param_vec, 0LL);
  if ( std::operator==<char>(v7, "LEVEL") )
  {
    *(_DWORD *)(v4 + 48) = 1;
    v8 = std::vector<std::string>::operator[](param_vec, 1uLL);
    if ( common::tools::StringUtils::strToNum<unsigned int>(v8, (unsigned int *)(v4 + 48), 1) )
    {
      common::milog::MiLogStream::create(
        &v54,
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/player/gm/player_gm_comp.cpp",
        "procWeapon",
        4851);
      v9 = common::milog::MiLogStream::operator<<<char [15],(char *[15])0>(&v54, (const char (*)[15])"invalid param:");
      common::milog::MiLogStream::operator<<<std::string>(v9, param_vec);
      common::milog::MiLogStream::~MiLogStream(&v54);
      v3 = -1;
      goto LABEL_56;
    }
    if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
      __asan_report_load8(&context->player);
    Player::getCurAvatar((Player *const)(v4 + 96));
    if ( std::operator==<Avatar>((const std::shared_ptr<Avatar> *)(v4 + 96), 0LL) )
    {
      common::milog::MiLogStream::create(
        &v54,
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/player/gm/player_gm_comp.cpp",
        "procWeapon",
        4858);
      v10 = common::milog::MiLogStream::operator<<<char [26],(char *[26])0>(
              &v54,
              (const char (*)[26])"getCurAvatar failed, uid:");
      if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
        __asan_report_load8(&context->player);
      val = Player::getUid(context->player);
      common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v10, &val);
      common::milog::MiLogStream::~MiLogStream(&v54);
      v3 = -1;
      v11 = 0;
    }
    else
    {
      v12 = std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 96));
      EquipComp = (unsigned int)Avatar::getEquipComp(v12);
      EquipComp::findEquip<Weapon>((EquipComp *const)(v4 + 128), (data::EquipType)EquipComp);
      if ( std::operator==<Weapon>((const std::shared_ptr<Weapon> *)(v4 + 128), 0LL) )
      {
        common::milog::MiLogStream::create(
          &v54,
          &common::milog::MiLogDefault::default_log_obj_,
          3u,
          "./src/player/gm/player_gm_comp.cpp",
          "procWeapon",
          4865);
        v14 = common::milog::MiLogStream::operator<<<char [26],(char *[26])0>(
                &v54,
                (const char (*)[26])"getCurAvatar failed, uid:");
        if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
          __asan_report_load8(&context->player);
        val = Player::getUid(context->player);
        common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v14, &val);
        common::milog::MiLogStream::~MiLogStream(&v54);
        v3 = -1;
        v15 = 0;
      }
      else
      {
        v16 = std::__shared_ptr_access<Weapon,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Weapon,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 128));
        Weapon::setLevel(v16, *(_DWORD *)(v4 + 48));
        v17 = std::__shared_ptr_access<Weapon,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Weapon,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 128));
        Weapon::setExp(v17, 0);
        v18 = std::__shared_ptr_access<Weapon,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Weapon,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 128));
        if ( *(_BYTE *)(((unsigned __int64)v18 >> 3) + 0x7FFF8000) )
          __asan_report_load8(v18);
        v19 = (unsigned __int64)(v18->_vptr_Item + 14);
        if ( *(_BYTE *)((v19 >> 3) + 0x7FFF8000) )
          __asan_report_load8(v18->_vptr_Item + 14);
        (*(void (__fastcall **)(std::__shared_ptr_access<Weapon,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *))v19)(v18);
        v20 = std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 96));
        Creature::calcProp(v20);
        v21 = std::__shared_ptr_access<Weapon,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Weapon,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 128));
        Item::notifyItemChange(v21);
        std::string::operator=(ret_msg, "weapon set level success");
        v15 = 1;
      }
      std::shared_ptr<Weapon>::~shared_ptr((std::shared_ptr<Weapon> *const)(v4 + 128));
      v11 = v15 == 1;
    }
    std::shared_ptr<Avatar>::~shared_ptr((std::shared_ptr<Avatar> *const)(v4 + 96));
    if ( v11 )
LABEL_55:
      v3 = 0;
  }
  else
  {
    v22 = std::vector<std::string>::operator[](param_vec, 0LL);
    if ( !std::operator==<char>(v22, "BREAK") )
      goto LABEL_55;
    *(_DWORD *)(v4 + 48) = 1;
    v23 = std::vector<std::string>::operator[](param_vec, 1uLL);
    if ( common::tools::StringUtils::strToNum<unsigned int>(v23, (unsigned int *)(v4 + 48), 1) )
    {
      common::milog::MiLogStream::create(
        &v54,
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/player/gm/player_gm_comp.cpp",
        "procWeapon",
        4882);
      v24 = common::milog::MiLogStream::operator<<<char [15],(char *[15])0>(&v54, (const char (*)[15])"invalid param:");
      common::milog::MiLogStream::operator<<<std::string>(v24, param_vec);
      common::milog::MiLogStream::~MiLogStream(&v54);
      v3 = -1;
      goto LABEL_56;
    }
    if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
      __asan_report_load8(&context->player);
    Player::getCurAvatar((Player *const)(v4 + 64));
    if ( std::operator==<Avatar>((const std::shared_ptr<Avatar> *)(v4 + 64), 0LL) )
    {
      common::milog::MiLogStream::create(
        &v54,
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/player/gm/player_gm_comp.cpp",
        "procWeapon",
        4889);
      v25 = common::milog::MiLogStream::operator<<<char [26],(char *[26])0>(
              &v54,
              (const char (*)[26])"getCurAvatar failed, uid:");
      if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
        __asan_report_load8(&context->player);
      val = Player::getUid(context->player);
      common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v25, &val);
      common::milog::MiLogStream::~MiLogStream(&v54);
      v3 = -1;
      v26 = 0;
    }
    else
    {
      v27 = std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 64));
      v28 = (unsigned int)Avatar::getEquipComp(v27);
      EquipComp::findEquip<Weapon>((EquipComp *const)(v4 + 96), (data::EquipType)v28);
      if ( std::operator==<Weapon>((const std::shared_ptr<Weapon> *)(v4 + 96), 0LL) )
      {
        common::milog::MiLogStream::create(
          &v54,
          &common::milog::MiLogDefault::default_log_obj_,
          3u,
          "./src/player/gm/player_gm_comp.cpp",
          "procWeapon",
          4896);
        v29 = common::milog::MiLogStream::operator<<<char [26],(char *[26])0>(
                &v54,
                (const char (*)[26])"getCurAvatar failed, uid:");
        if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
          __asan_report_load8(&context->player);
        val = Player::getUid(context->player);
        common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v29, &val);
        common::milog::MiLogStream::~MiLogStream(&v54);
        v3 = -1;
        v30 = 0;
      }
      else
      {
        ServiceBox::findService<GameserverService>();
        GameserverService::getConfig((GameserverService *const)(v4 + 128));
        promote_level = &std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 128))->design_config.txt_config_mgr.weapon_config_mgr;
        v31 = *(_DWORD *)(v4 + 48);
        v32 = std::__shared_ptr_access<Weapon,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Weapon,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 96));
        ItemId = Item::getItemId(v32);
        weapon_promote_config_ptr = WeaponExcelConfigMgr::findWeaponPromoteExcelConfig(promote_level, ItemId, v31);
        std::shared_ptr<Config>::~shared_ptr((std::shared_ptr<Config> *const)(v4 + 128));
        if ( weapon_promote_config_ptr )
        {
          if ( *(_DWORD *)(v4 + 48) )
          {
            ServiceBox::findService<GameserverService>();
            GameserverService::getConfig((GameserverService *const)(v4 + 128));
            p_weapon_config_mgr = &std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 128))->design_config.txt_config_mgr.weapon_config_mgr;
            promote_levela = *(_DWORD *)(v4 + 48) - 1;
            v37 = std::__shared_ptr_access<Weapon,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Weapon,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 96));
            v38 = Item::getItemId(v37);
            prev_weapon_promote_config_ptr = WeaponExcelConfigMgr::findWeaponPromoteExcelConfig(
                                               p_weapon_config_mgr,
                                               v38,
                                               promote_levela);
            std::shared_ptr<Config>::~shared_ptr((std::shared_ptr<Config> *const)(v4 + 128));
            if ( prev_weapon_promote_config_ptr )
            {
              v39 = std::__shared_ptr_access<Weapon,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Weapon,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 96));
              if ( *(_BYTE *)(((unsigned __int64)&prev_weapon_promote_config_ptr->unlock_max_level >> 3) + 0x7FFF8000) != 0
                && *(_BYTE *)(((unsigned __int64)&prev_weapon_promote_config_ptr->unlock_max_level >> 3) + 0x7FFF8000) <= 3 )
              {
                __asan_report_load4(&prev_weapon_promote_config_ptr->unlock_max_level);
              }
              Weapon::setLevel(v39, prev_weapon_promote_config_ptr->unlock_max_level);
            }
          }
          else
          {
            v35 = std::__shared_ptr_access<Weapon,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Weapon,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 96));
            Weapon::setLevel(v35, 0);
          }
          v40 = std::__shared_ptr_access<Weapon,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Weapon,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 96));
          Weapon::setPromoteLevel(v40, *(_DWORD *)(v4 + 48));
          v41 = std::__shared_ptr_access<Weapon,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Weapon,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 96));
          if ( *(_BYTE *)(((unsigned __int64)v41 >> 3) + 0x7FFF8000) )
            __asan_report_load8(v41);
          v42 = (unsigned __int64)(v41->_vptr_Item + 14);
          if ( *(_BYTE *)((v42 >> 3) + 0x7FFF8000) )
            __asan_report_load8(v41->_vptr_Item + 14);
          (*(void (__fastcall **)(std::__shared_ptr_access<Weapon,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *))v42)(v41);
          v43 = std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 64));
          v44 = Avatar::getEquipComp(v43);
          EquipComp::refreshAffix(v44, EQUIP_WEAPON);
          v45 = std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 64));
          Creature::calcProp(v45);
          v46 = std::__shared_ptr_access<Weapon,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Weapon,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 96));
          Item::notifyItemChange(v46);
          std::string::operator=(ret_msg, "weapon break succ");
          v30 = 1;
        }
        else
        {
          common::milog::MiLogStream::create(
            &v54,
            &common::milog::MiLogDefault::default_log_obj_,
            3u,
            "./src/player/gm/player_gm_comp.cpp",
            "procWeapon",
            4903);
          v34 = common::milog::MiLogStream::operator<<<char [23],(char *[23])0>(
                  &v54,
                  (const char (*)[23])"invalid promote_level:");
          common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v34, (const unsigned int *)(v4 + 48));
          common::milog::MiLogStream::~MiLogStream(&v54);
          v3 = -1;
          v30 = 0;
        }
      }
      std::shared_ptr<Weapon>::~shared_ptr((std::shared_ptr<Weapon> *const)(v4 + 96));
      v26 = v30 == 1;
    }
    std::shared_ptr<Avatar>::~shared_ptr((std::shared_ptr<Avatar> *const)(v4 + 64));
    if ( v26 )
      goto LABEL_55;
  }
LABEL_56:
  result = v3;
  if ( v55 == (char *)v4 )
  {
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8008) = 0LL;
    *(_DWORD *)((v4 >> 3) + 0x7FFF8010) = 0;
  }
  else
  {
    *(_QWORD *)v4 = 1172321806LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v4 >> 3) + 0x7FFF8010) = -168430091;
  }
  return result;
};

// Line 4931: range 0000000017D74B00-0000000017D74BA2
void __cdecl procAbilityRegister::procAbilityRegister(procAbilityRegister *const this)
{
  std::function<int(GmContext&,const std::vector<std::string>&,std::string&)> *v1; // rax
  std::allocator<char> __a; // [rsp+1Fh] [rbp-31h] BYREF
  std::string __k; // [rsp+20h] [rbp-30h] BYREF

  std::allocator<char>::allocator(&__a);
  std::string::basic_string<std::allocator<char>>(&__k, "ABILITY", &__a);
  v1 = std::unordered_map<std::string,std::function<int ()(GmContext &,std::vector<std::string> const&,std::string&)>>::operator[](
         &GmUtils::op_func_map[abi:cxx11],
         &__k);
  std::function<int ()(GmContext &,std::vector<std::string> const&,std::string&)>::operator=<int (&)(GmContext &,std::vector<std::string> const&,std::string&)>(
    v1,
    (int (*)(GmContext *, const std::vector<std::string> *, std::string *))procAbility);
  std::string::~string(&__k);
  std::allocator<char>::~allocator(&__a);
};

// Line 4932: range 0000000017BE90D4-0000000017BEA5A9
int32_t __cdecl procAbility(GmContext *context, const std::vector<std::string> *param_vec, std::string *ret_msg)
{
  unsigned __int64 v3; // r13
  __int64 v4; // rax
  _DWORD *v5; // r12
  const std::string *v6; // rax
  AbilityComp *AbilityComp; // r14
  const std::string *v8; // rax
  common::milog::MiLogStream *v9; // rdx
  Creature *v10; // rax
  AbilityComp *v11; // r14
  int v12; // r14d
  const std::string *v13; // rax
  const std::string *v14; // rax
  uint32_t AvatarComp; // eax
  int v16; // r14d
  std::__shared_ptr_access<FormalAvatar,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v17; // rax
  AbilityComp *v18; // r14
  const std::string *v19; // rax
  const std::string *v20; // rax
  Scene *scene; // r14
  int v22; // r14d
  std::__shared_ptr_access<Monster,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v23; // rax
  AbilityComp *v24; // r14
  const std::string *v25; // rax
  const std::string *v26; // rax
  int v27; // r14d
  std::__shared_ptr_access<Gadget,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v28; // rax
  AbilityComp *v29; // r14
  common::milog::MiLogStream *v30; // rdx
  std::__shared_ptr_access<Creature,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v31; // rax
  void (__fastcall **v32)(common::milog::MiLogStream *, std::__shared_ptr_access<Creature,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *); // rdx
  const std::string *v33; // rax
  bool v34; // r14
  const std::string *v35; // rax
  common::milog::MiLogStream *v36; // rdx
  int v37; // r14d
  std::__shared_ptr_access<Creature,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v38; // rax
  uint32_t EntityId; // eax
  JsonConfigMgr *p_json_config_mgr; // r14
  const std::string *v41; // rax
  uint32_t AbilityHashFromString; // eax
  const std::string *v43; // rax
  common::milog::MiLogStream *v44; // rdx
  std::__shared_ptr_access<Creature,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v45; // rax
  Player *v46; // rax
  common::tools::StringStream<common::tools::FixedBuffer<4096> > *v47; // rdx
  common::tools::StringStream<common::tools::FixedBuffer<4096> > *v48; // rax
  int32_t result; // eax
  bool __f; // [rsp+10h] [rbp-270h]
  Scene *__fa; // [rsp+10h] [rbp-270h]
  bool v52; // [rsp+23h] [rbp-25Dh]
  bool v53; // [rsp+23h] [rbp-25Dh]
  bool v54; // [rsp+23h] [rbp-25Dh]
  int32_t v55; // [rsp+24h] [rbp-25Ch]
  uint32_t index; // [rsp+40h] [rbp-240h]
  const std::vector<std::string> *raw_param_vec; // [rsp+48h] [rbp-238h]
  std::string __lhs; // [rsp+50h] [rbp-230h] BYREF
  std::string v60; // [rsp+70h] [rbp-210h] BYREF
  std::string v61; // [rsp+90h] [rbp-1F0h] BYREF
  std::string v62; // [rsp+B0h] [rbp-1D0h] BYREF
  std::string v63; // [rsp+D0h] [rbp-1B0h] BYREF
  std::string v64; // [rsp+F0h] [rbp-190h] BYREF
  common::milog::MiLogStream v65; // [rsp+110h] [rbp-170h] BYREF
  char v66[336]; // [rsp+130h] [rbp-150h] BYREF
  procAbility::<lambda(Monster&)> v67; // 0:esi.4,8:rdx.8
  procAbility::<lambda(Gadget&)> v68; // 0:esi.4,8:rdx.8

  v3 = (unsigned __int64)v66;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_3(288LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "7 32 4 10 delta:5059 48 16 15 player_ptr:4939 80 16 17 creature_ptr:5032 112 16 17 creature_ptr:"
                        "4942 144 16 22 formal_avatar_ptr:4969 176 16 7 ss:5080 208 40 11 notify:5033";
  *(_QWORD *)(v3 + 16) = procAbility;
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = 61956;
  v5[536862722] = 62194;
  v5[536862723] = 62194;
  v5[536862724] = 62194;
  v5[536862725] = 62194;
  v5[536862726] = 62194;
  v5[536862727] = -218103808;
  v5[536862728] = -202116109;
  raw_param_vec = &context->raw_param_vec;
  if ( std::vector<std::string>::empty(&context->raw_param_vec) )
  {
    common::milog::MiLogStream::create(
      &v65,
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/player/gm/player_gm_comp.cpp",
      "procAbility",
      4936);
    common::milog::MiLogStream::operator<<<char [17],(char *[17])0>(&v65, (const char (*)[17])"param not enough");
    common::milog::MiLogStream::~MiLogStream(&v65);
    v55 = -1;
    goto LABEL_86;
  }
  if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
    __asan_report_load8(&context->player);
  toThisPtr<Player>((Player *)(v3 + 48));
  v6 = std::vector<std::string>::operator[](raw_param_vec, 0LL);
  common::tools::StringUtils::toUpper(&__lhs, v6);
  v52 = std::operator==<char>(&__lhs, "PRINT");
  std::string::~string(&__lhs);
  if ( !v52 )
    goto LABEL_58;
  *(_QWORD *)(v3 + 112) = 0LL;
  *(_QWORD *)(v3 + 120) = 0LL;
  if ( std::vector<std::string>::size(raw_param_vec) == 1 )
  {
    if ( *(_BYTE *)(((unsigned __int64)&context->avatar >> 3) + 0x7FFF8000) )
      __asan_report_load8(&context->avatar);
    AbilityComp = Creature::getAbilityComp(context->avatar);
    std::shared_ptr<Player>::shared_ptr(
      (std::shared_ptr<Player> *const)(v3 + 176),
      (const std::shared_ptr<Player> *)(v3 + 48));
    AbilityComp::print(AbilityComp, (PlayerPtr *)(v3 + 176));
    std::shared_ptr<Player>::~shared_ptr((std::shared_ptr<Player> *const)(v3 + 176));
    if ( *(_BYTE *)(((unsigned __int64)&context->avatar >> 3) + 0x7FFF8000) )
      __asan_report_load8(&context->avatar);
    toThisPtr<Avatar>((Avatar *)(v3 + 80));
    std::shared_ptr<Creature>::operator=<Avatar>(
      (std::shared_ptr<Creature> *const)(v3 + 112),
      (std::shared_ptr<Avatar> *)(v3 + 80));
    std::shared_ptr<Avatar>::~shared_ptr((std::shared_ptr<Avatar> *const)(v3 + 80));
    goto LABEL_50;
  }
  if ( std::vector<std::string>::size(raw_param_vec) == 2 )
  {
    *(_DWORD *)(v3 + 32) = 0;
    v8 = std::vector<std::string>::operator[](raw_param_vec, 1uLL);
    if ( common::tools::StringUtils::strToNum<unsigned int>(v8, (unsigned int *)(v3 + 32), 1) )
    {
      common::milog::MiLogStream::create(
        &v65,
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/player/gm/player_gm_comp.cpp",
        "procAbility",
        4953);
      v9 = common::milog::MiLogStream::operator<<<char [15],(char *[15])0>(&v65, (const char (*)[15])"invalid param:");
      common::milog::MiLogStream::operator<<<std::string>(v9, raw_param_vec);
      common::milog::MiLogStream::~MiLogStream(&v65);
      v55 = -1;
LABEL_23:
      v12 = 0;
      goto LABEL_57;
    }
    if ( *(_BYTE *)(((unsigned __int64)&context->scene >> 3) + 0x7FFF8000) )
      __asan_report_load8(&context->scene);
    Scene::findEntity<Creature>((const Scene *const)(v3 + 176), (uint32_t)context->scene);
    std::shared_ptr<Creature>::operator=(
      (std::shared_ptr<Creature> *const)(v3 + 112),
      (std::shared_ptr<Creature> *)(v3 + 176));
    std::shared_ptr<Creature>::~shared_ptr((std::shared_ptr<Creature> *const)(v3 + 176));
    if ( std::operator==<Creature>((const std::shared_ptr<Creature> *)(v3 + 112), 0LL) )
    {
      v55 = 504;
      goto LABEL_23;
    }
    v10 = std::__shared_ptr_access<Creature,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Creature,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 112));
    v11 = Creature::getAbilityComp(v10);
    std::shared_ptr<Player>::shared_ptr(
      (std::shared_ptr<Player> *const)(v3 + 176),
      (const std::shared_ptr<Player> *)(v3 + 48));
    AbilityComp::print(v11, (PlayerPtr *)(v3 + 176));
    std::shared_ptr<Player>::~shared_ptr((std::shared_ptr<Player> *const)(v3 + 176));
  }
  else if ( std::vector<std::string>::size(raw_param_vec) > 2 )
  {
    v13 = std::vector<std::string>::operator[](raw_param_vec, 1uLL);
    common::tools::StringUtils::toUpper(&v60, v13);
    v53 = std::operator==<char>(&v60, "AVATAR");
    std::string::~string(&v60);
    if ( v53 )
    {
      *(_DWORD *)(v3 + 32) = 0;
      v14 = std::vector<std::string>::operator[](raw_param_vec, 2uLL);
      common::tools::StringUtils::strToNum<unsigned int>(v14, (unsigned int *)(v3 + 32), 1);
      if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
        __asan_report_load8(&context->player);
      AvatarComp = (unsigned int)Player::getAvatarComp(context->player);
      PlayerAvatarComp::findFormalAvatarByAvatarId((const PlayerAvatarComp *const)(v3 + 144), AvatarComp);
      if ( std::operator==<FormalAvatar>((const std::shared_ptr<FormalAvatar> *)(v3 + 144), 0LL) )
      {
        v55 = 104;
        v16 = 0;
      }
      else
      {
        v17 = std::__shared_ptr_access<FormalAvatar,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<FormalAvatar,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 144));
        v18 = Creature::getAbilityComp(v17);
        std::shared_ptr<Player>::shared_ptr(
          (std::shared_ptr<Player> *const)(v3 + 176),
          (const std::shared_ptr<Player> *)(v3 + 48));
        AbilityComp::print(v18, (PlayerPtr *)(v3 + 176));
        std::shared_ptr<Player>::~shared_ptr((std::shared_ptr<Player> *const)(v3 + 176));
        std::shared_ptr<Creature>::operator=<FormalAvatar>(
          (std::shared_ptr<Creature> *const)(v3 + 112),
          (const std::shared_ptr<FormalAvatar> *)(v3 + 144));
        v16 = 1;
      }
      std::shared_ptr<FormalAvatar>::~shared_ptr((std::shared_ptr<FormalAvatar> *const)(v3 + 144));
      if ( v16 != 1 )
      {
        v12 = 0;
        goto LABEL_57;
      }
    }
    else
    {
      v19 = std::vector<std::string>::operator[](raw_param_vec, 1uLL);
      common::tools::StringUtils::toUpper(&v61, v19);
      v54 = std::operator==<char>(&v61, "MONSTER");
      std::string::~string(&v61);
      if ( v54 )
      {
        *(_DWORD *)(v3 + 32) = 0;
        v20 = std::vector<std::string>::operator[](raw_param_vec, 2uLL);
        common::tools::StringUtils::strToNum<unsigned int>(v20, (unsigned int *)(v3 + 32), 1);
        *(_QWORD *)(v3 + 144) = 0LL;
        *(_QWORD *)(v3 + 152) = 0LL;
        if ( *(_BYTE *)(((unsigned __int64)&context->scene >> 3) + 0x7FFF8000) )
          __asan_report_load8(&context->scene);
        scene = context->scene;
        v67.__monster_ptr = (MonsterPtr *)(v3 + 144);
        v67.__monster_id = *(_DWORD *)(v3 + 32);
        std::function<ForeachPolicy ()(Monster &)>::function<procAbility(GmContext &,std::vector<std::string> const&,std::string&)::{lambda(Monster &)#1},void,void>(
          (std::function<ForeachPolicy(Monster&)> *const)&v65,
          v67);
        Scene::foreachEntity<Monster>(scene, (std::function<ForeachPolicy(Monster&)> *)&v65);
        std::function<ForeachPolicy ()(Monster &)>::~function((std::function<ForeachPolicy(Monster&)> *const)&v65);
        if ( std::operator==<Monster>((const std::shared_ptr<Monster> *)(v3 + 144), 0LL) )
        {
          v55 = 1001;
          v22 = 0;
        }
        else
        {
          v23 = std::__shared_ptr_access<Monster,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Monster,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 144));
          v24 = Creature::getAbilityComp(v23);
          std::shared_ptr<Player>::shared_ptr(
            (std::shared_ptr<Player> *const)(v3 + 176),
            (const std::shared_ptr<Player> *)(v3 + 48));
          AbilityComp::print(v24, (PlayerPtr *)(v3 + 176));
          std::shared_ptr<Player>::~shared_ptr((std::shared_ptr<Player> *const)(v3 + 176));
          std::shared_ptr<Creature>::operator=<Monster>(
            (std::shared_ptr<Creature> *const)(v3 + 112),
            (const std::shared_ptr<Monster> *)(v3 + 144));
          v22 = 1;
        }
        std::shared_ptr<Monster>::~shared_ptr((std::shared_ptr<Monster> *const)(v3 + 144));
        if ( v22 != 1 )
        {
          v12 = 0;
          goto LABEL_57;
        }
      }
      else
      {
        v25 = std::vector<std::string>::operator[](raw_param_vec, 1uLL);
        common::tools::StringUtils::toUpper(&v62, v25);
        __f = std::operator==<char>(&v62, "GADGET");
        std::string::~string(&v62);
        if ( !__f )
        {
          common::milog::MiLogStream::create(
            &v65,
            &common::milog::MiLogDefault::default_log_obj_,
            3u,
            "./src/player/gm/player_gm_comp.cpp",
            "procAbility",
            5021);
          v30 = common::milog::MiLogStream::operator<<<char [15],(char *[15])0>(
                  &v65,
                  (const char (*)[15])"invalid param:");
          common::milog::MiLogStream::operator<<<std::string>(v30, raw_param_vec);
          common::milog::MiLogStream::~MiLogStream(&v65);
          v55 = -1;
          v12 = 0;
          goto LABEL_57;
        }
        *(_DWORD *)(v3 + 32) = 0;
        v26 = std::vector<std::string>::operator[](raw_param_vec, 2uLL);
        common::tools::StringUtils::strToNum<unsigned int>(v26, (unsigned int *)(v3 + 32), 1);
        *(_QWORD *)(v3 + 144) = 0LL;
        *(_QWORD *)(v3 + 152) = 0LL;
        if ( *(_BYTE *)(((unsigned __int64)&context->scene >> 3) + 0x7FFF8000) )
          __asan_report_load8(&context->scene);
        __fa = context->scene;
        v68.__gadget_ptr = (GadgetPtr *)(v3 + 144);
        v68.__gadget_id = *(_DWORD *)(v3 + 32);
        std::function<ForeachPolicy ()(Gadget &)>::function<procAbility(GmContext &,std::vector<std::string> const&,std::string&)::{lambda(Gadget &)#2},void,void>(
          (std::function<ForeachPolicy(Gadget&)> *const)&v65,
          v68);
        Scene::foreachEntity<Gadget>(__fa, (std::function<ForeachPolicy(Gadget&)> *)&v65);
        std::function<ForeachPolicy ()(Gadget &)>::~function((std::function<ForeachPolicy(Gadget&)> *const)&v65);
        if ( std::operator==<Gadget>((const std::shared_ptr<Gadget> *)(v3 + 144), 0LL) )
        {
          v55 = 801;
          v27 = 0;
        }
        else
        {
          v28 = std::__shared_ptr_access<Gadget,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Gadget,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 144));
          v29 = Creature::getAbilityComp(v28);
          std::shared_ptr<Player>::shared_ptr(
            (std::shared_ptr<Player> *const)(v3 + 176),
            (const std::shared_ptr<Player> *)(v3 + 48));
          AbilityComp::print(v29, (PlayerPtr *)(v3 + 176));
          std::shared_ptr<Player>::~shared_ptr((std::shared_ptr<Player> *const)(v3 + 176));
          std::shared_ptr<Creature>::operator=<Gadget>(
            (std::shared_ptr<Creature> *const)(v3 + 112),
            (const std::shared_ptr<Gadget> *)(v3 + 144));
          v27 = 1;
        }
        std::shared_ptr<Gadget>::~shared_ptr((std::shared_ptr<Gadget> *const)(v3 + 144));
        if ( v27 != 1 )
        {
          v12 = 0;
          goto LABEL_57;
        }
      }
    }
  }
LABEL_50:
  if ( std::operator!=<Creature>((const std::shared_ptr<Creature> *)(v3 + 112), 0LL) )
  {
    v31 = std::__shared_ptr_access<Creature,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Creature,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 112));
    if ( *(_BYTE *)(((unsigned __int64)v31 >> 3) + 0x7FFF8000) )
      __asan_report_load8(v31);
    v32 = *(void (__fastcall ***)(common::milog::MiLogStream *, std::__shared_ptr_access<Creature,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *))v31->baseclass_0;
    if ( *(_BYTE *)((*(_QWORD *)v31->baseclass_0 >> 3) + 0x7FFF8000LL) )
      __asan_report_load8(*(_QWORD *)v31->baseclass_0);
    (*v32)(&v65, v31);
    std::operator+<char>(&v63, "ability print success", (std::string *)&v65);
    std::string::operator=(ret_msg, &v63);
    std::string::~string(&v63);
    std::string::~string(&v65);
  }
  v12 = 1;
LABEL_57:
  std::shared_ptr<Creature>::~shared_ptr((std::shared_ptr<Creature> *const)(v3 + 112));
  if ( v12 != 1 )
    goto LABEL_85;
LABEL_58:
  v33 = std::vector<std::string>::operator[](raw_param_vec, 0LL);
  common::tools::StringUtils::toUpper(&v64, v33);
  v34 = std::operator==<char>(&v64, "ADD_GLOBAL");
  std::string::~string(&v64);
  if ( !v34 )
  {
LABEL_84:
    v55 = 0;
    goto LABEL_85;
  }
  *(_QWORD *)(v3 + 80) = 0LL;
  *(_QWORD *)(v3 + 88) = 0LL;
  proto::ServerUpdateGlobalValueNotify::ServerUpdateGlobalValueNotify((proto::ServerUpdateGlobalValueNotify *const)(v3 + 208));
  proto::ServerUpdateGlobalValueNotify::set_update_type(
    (proto::ServerUpdateGlobalValueNotify *const)(v3 + 208),
    ServerUpdateGlobalValueNotify_UpdateType_ADD);
  index = 1;
  if ( std::vector<std::string>::size(raw_param_vec) == 3 )
  {
    if ( *(_BYTE *)(((unsigned __int64)&context->avatar >> 3) + 0x7FFF8000) )
      __asan_report_load8(&context->avatar);
    toThisPtr<Avatar>((Avatar *)(v3 + 112));
    std::shared_ptr<Creature>::operator=<Avatar>(
      (std::shared_ptr<Creature> *const)(v3 + 80),
      (std::shared_ptr<Avatar> *)(v3 + 112));
    std::shared_ptr<Avatar>::~shared_ptr((std::shared_ptr<Avatar> *const)(v3 + 112));
  }
  else if ( std::vector<std::string>::size(raw_param_vec) > 3 )
  {
    *(_DWORD *)(v3 + 32) = 0;
    v35 = std::vector<std::string>::operator[](raw_param_vec, 1uLL);
    if ( common::tools::StringUtils::strToNum<unsigned int>(v35, (unsigned int *)(v3 + 32), 1) )
    {
      common::milog::MiLogStream::create(
        &v65,
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/player/gm/player_gm_comp.cpp",
        "procAbility",
        5045);
      v36 = common::milog::MiLogStream::operator<<<char [15],(char *[15])0>(&v65, (const char (*)[15])"invalid param:");
      common::milog::MiLogStream::operator<<<std::string>(v36, raw_param_vec);
      common::milog::MiLogStream::~MiLogStream(&v65);
      v55 = -1;
      v37 = 0;
      goto LABEL_83;
    }
    if ( *(_BYTE *)(((unsigned __int64)&context->scene >> 3) + 0x7FFF8000) )
      __asan_report_load8(&context->scene);
    Scene::findEntity<Creature>((const Scene *const)(v3 + 144), (uint32_t)context->scene);
    std::shared_ptr<Creature>::operator=(
      (std::shared_ptr<Creature> *const)(v3 + 80),
      (std::shared_ptr<Creature> *)(v3 + 144));
    std::shared_ptr<Creature>::~shared_ptr((std::shared_ptr<Creature> *const)(v3 + 144));
    index = 2;
  }
  if ( std::operator==<Creature>((const std::shared_ptr<Creature> *)(v3 + 80), 0LL) )
  {
    std::string::operator=(ret_msg, "entity not exist.");
    v55 = 504;
    v37 = 0;
  }
  else
  {
    v38 = std::__shared_ptr_access<Creature,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Creature,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 80));
    EntityId = Entity::getEntityId((const Entity *const)v38);
    proto::ServerUpdateGlobalValueNotify::set_entity_id(
      (proto::ServerUpdateGlobalValueNotify *const)(v3 + 208),
      EntityId);
    ServiceBox::findService<GameserverService>();
    GameserverService::getConfig((GameserverService *const)(v3 + 176));
    p_json_config_mgr = &std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 176))->design_config.json_config_mgr;
    v41 = std::vector<std::string>::operator[](raw_param_vec, index);
    AbilityHashFromString = JsonConfigMgr::getAbilityHashFromString(p_json_config_mgr, v41);
    proto::ServerUpdateGlobalValueNotify::set_key_hash(
      (proto::ServerUpdateGlobalValueNotify *const)(v3 + 208),
      AbilityHashFromString);
    std::shared_ptr<Config>::~shared_ptr((std::shared_ptr<Config> *const)(v3 + 176));
    *(_DWORD *)(v3 + 32) = 0;
    v43 = std::vector<std::string>::operator[](raw_param_vec, index + 1);
    if ( common::tools::StringUtils::strToNum<float>(v43, (float *)(v3 + 32), 1) )
    {
      common::milog::MiLogStream::create(
        &v65,
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/player/gm/player_gm_comp.cpp",
        "procAbility",
        5062);
      v44 = common::milog::MiLogStream::operator<<<char [15],(char *[15])0>(&v65, (const char (*)[15])"invalid param:");
      common::milog::MiLogStream::operator<<<std::string>(v44, raw_param_vec);
      common::milog::MiLogStream::~MiLogStream(&v65);
      v55 = -1;
      v37 = 0;
    }
    else
    {
      proto::ServerUpdateGlobalValueNotify::set_delta(
        (proto::ServerUpdateGlobalValueNotify *const)(v3 + 208),
        *(float *)(v3 + 32));
      v45 = std::__shared_ptr_access<Creature,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Creature,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 80));
      if ( Creature::getAuthorityPeerId(v45) )
      {
        if ( *(_BYTE *)(((unsigned __int64)&context->scene >> 3) + 0x7FFF8000) )
          __asan_report_load8(&context->scene);
        Scene::findPeerPlayer((const Scene *const)(v3 + 176), (uint32_t)context->scene);
        if ( std::operator!=<Player>((const std::shared_ptr<Player> *)(v3 + 176), 0LL) )
        {
          v46 = std::__shared_ptr_access<Player,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Player,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 176));
          Player::sendProto(v46, (const google::protobuf::Message *)(v3 + 208));
        }
        std::shared_ptr<Player>::~shared_ptr((std::shared_ptr<Player> *const)(v3 + 176));
      }
      else
      {
        if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
          __asan_report_load8(&context->player);
        Player::sendProto(context->player, (const google::protobuf::Message *)(v3 + 208));
      }
      common::tools::StringStream<common::tools::FixedBuffer<4096>>::StringStream((common::tools::StringStream<common::tools::FixedBuffer<4096> > *const)(v3 + 176));
      v47 = common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(
              (common::tools::StringStream<common::tools::FixedBuffer<4096> > *const)(v3 + 176),
              "ability set global:");
      v48 = common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<<std::string>(v47, raw_param_vec);
      common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(v48, " succ.");
      common::tools::StringStream<common::tools::FixedBuffer<4096>>::str[abi:cxx11](
        (std::string *)&v65,
        (common::tools::StringStream<common::tools::FixedBuffer<4096> > *const)(v3 + 176));
      std::string::operator=(ret_msg, &v65);
      std::string::~string(&v65);
      common::tools::StringStream<common::tools::FixedBuffer<4096>>::~StringStream((common::tools::StringStream<common::tools::FixedBuffer<4096> > *const)(v3 + 176));
      v37 = 1;
    }
  }
LABEL_83:
  proto::ServerUpdateGlobalValueNotify::~ServerUpdateGlobalValueNotify((proto::ServerUpdateGlobalValueNotify *const)(v3 + 208));
  std::shared_ptr<Creature>::~shared_ptr((std::shared_ptr<Creature> *const)(v3 + 80));
  if ( v37 == 1 )
    goto LABEL_84;
LABEL_85:
  std::shared_ptr<Player>::~shared_ptr((std::shared_ptr<Player> *const)(v3 + 48));
LABEL_86:
  result = v55;
  if ( v66 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8010) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8018) = 0LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8020) = 0;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8020) = -168430091;
  }
  return result;
};

// Line 4982: range 0000000017BE8F48-0000000017BE900D
ForeachPolicy __cdecl procAbility(GmContext &,std::vector<std::string> const&,std::string&)::{lambda(Monster &)#1}::operator()(
        const procAbility::<lambda(Monster&)> *const __closure,
        Monster *monster)
{
  uint32_t MonsterId; // ecx
  std::shared_ptr<Monster> __r; // [rsp+10h] [rbp-10h] BYREF

  MonsterId = Monster::getMonsterId(monster);
  if ( *(_BYTE *)(((unsigned __int64)__closure >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)__closure >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4(__closure);
  }
  if ( MonsterId != __closure->__monster_id )
    return 0;
  toThisPtr<Monster>((Monster *)&__r);
  if ( *(_BYTE *)(((unsigned __int64)&__closure->__monster_ptr >> 3) + 0x7FFF8000) )
    __asan_report_load8(&__closure->__monster_ptr);
  std::shared_ptr<Monster>::operator=(__closure->__monster_ptr, &__r);
  std::shared_ptr<Monster>::~shared_ptr(&__r);
  return 1;
};

// Line 5003: range 0000000017BE900E-0000000017BE90D3
ForeachPolicy __cdecl procAbility(GmContext &,std::vector<std::string> const&,std::string&)::{lambda(Gadget &)#2}::operator()(
        const procAbility::<lambda(Gadget&)> *const __closure,
        Gadget *gadget)
{
  uint32_t GadgetId; // ecx
  std::shared_ptr<Gadget> __r; // [rsp+10h] [rbp-10h] BYREF

  GadgetId = Gadget::getGadgetId(gadget);
  if ( *(_BYTE *)(((unsigned __int64)__closure >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)__closure >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4(__closure);
  }
  if ( GadgetId != __closure->__gadget_id )
    return 0;
  toThisPtr<Gadget>((Gadget *)&__r);
  if ( *(_BYTE *)(((unsigned __int64)&__closure->__gadget_ptr >> 3) + 0x7FFF8000) )
    __asan_report_load8(&__closure->__gadget_ptr);
  std::shared_ptr<Gadget>::operator=(__closure->__gadget_ptr, &__r);
  std::shared_ptr<Gadget>::~shared_ptr(&__r);
  return 1;
};

// Line 5087: range 0000000017D74BA4-0000000017D74C46
void __cdecl setWudiRegister::setWudiRegister(setWudiRegister *const this)
{
  std::function<int(GmContext&,const std::vector<std::string>&,std::string&)> *v1; // rax
  std::allocator<char> __a; // [rsp+1Fh] [rbp-31h] BYREF
  std::string __k; // [rsp+20h] [rbp-30h] BYREF

  std::allocator<char>::allocator(&__a);
  std::string::basic_string<std::allocator<char>>(&__k, "WUDI", &__a);
  v1 = std::unordered_map<std::string,std::function<int ()(GmContext &,std::vector<std::string> const&,std::string&)>>::operator[](
         &GmUtils::op_func_map[abi:cxx11],
         &__k);
  std::function<int ()(GmContext &,std::vector<std::string> const&,std::string&)>::operator=<int (&)(GmContext &,std::vector<std::string> const&,std::string&)>(
    v1,
    (int (*)(GmContext *, const std::vector<std::string> *, std::string *))setWudi);
  std::string::~string(&__k);
  std::allocator<char>::~allocator(&__a);
};

// Line 5088: range 0000000017BEA625-0000000017BEB0AF
int32_t __cdecl setWudi(GmContext *context, const std::vector<std::string> *param_vec, std::string *ret_msg)
{
  unsigned __int64 v3; // r13
  __int64 v4; // rax
  _DWORD *v5; // r12
  int32_t result; // eax
  const std::string *v7; // rax
  PlayerAvatarComp *AvatarComp; // rax
  const std::weak_ptr<Avatar> *v9; // rax
  std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v10; // rax
  FightPropComp *FightPropComp; // rax
  PileBoolValue *IsInvincible; // rax
  const std::string *v13; // rax
  PlayerAvatarComp *v14; // rax
  const std::weak_ptr<Avatar> *v15; // rax
  std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v16; // rax
  FightPropComp *v17; // rax
  PileBoolValue *v18; // rax
  const std::string *v19; // rax
  const std::string *v20; // rax
  const std::string *v21; // rax
  PlayerGmComp *GmComp; // rax
  const std::string *v23; // rax
  PlayerGmComp *v24; // rax
  const std::string *v25; // rax
  const std::string *v26; // rax
  Scene *scene; // rbx
  PlayerGmComp *v28; // rax
  const std::string *v29; // rax
  Scene *v30; // rbx
  PlayerGmComp *v31; // rax
  std::vector<std::weak_ptr<Avatar>>::iterator __for_begin; // [rsp+28h] [rbp-118h] BYREF
  std::vector<std::weak_ptr<Avatar>>::iterator __for_end; // [rsp+30h] [rbp-110h] BYREF
  Player *player; // [rsp+38h] [rbp-108h]
  std::vector<std::weak_ptr<Avatar>> *__for_range_0; // [rsp+40h] [rbp-100h]
  std::vector<std::weak_ptr<Avatar>> *__for_range; // [rsp+48h] [rbp-F8h]
  common::milog::MiLogStream v38; // [rsp+50h] [rbp-F0h] BYREF
  char v39[208]; // [rsp+70h] [rbp-D0h] BYREF

  v3 = (unsigned __int64)v39;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_2(160LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "3 32 16 15 avatar_wtr:5112 64 16 15 avatar_ptr:5114 96 24 15 avatar_vec:5111";
  *(_QWORD *)(v3 + 16) = setWudi;
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = -219021312;
  v5[536862722] = -219021312;
  v5[536862723] = -218103808;
  v5[536862724] = -202116109;
  if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
    __asan_report_load8(&context->player);
  player = context->player;
  if ( std::vector<std::string>::empty(param_vec) )
  {
    common::milog::MiLogStream::create(
      &v38,
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/player/gm/player_gm_comp.cpp",
      "setWudi",
      5092);
    common::milog::MiLogStream::operator<<<char [17],(char *[17])0>(&v38, (const char (*)[17])"param not enough");
    common::milog::MiLogStream::~MiLogStream(&v38);
    result = -1;
    goto LABEL_50;
  }
  v7 = std::vector<std::string>::operator[](param_vec, 0LL);
  if ( std::operator==<char>(v7, stru_263521E0.gap0) )
  {
    AvatarComp = Player::getAvatarComp(player);
    PlayerAvatarComp::getAllAvatarVec((std::vector<std::weak_ptr<Avatar>> *)(v3 + 96), AvatarComp);
    __for_range = (std::vector<std::weak_ptr<Avatar>> *)(v3 + 96);
    __for_begin._M_current = std::vector<std::weak_ptr<Avatar>>::begin((std::vector<std::weak_ptr<Avatar>> *const)(v3 + 96))._M_current;
    __for_end._M_current = std::vector<std::weak_ptr<Avatar>>::end((std::vector<std::weak_ptr<Avatar>> *const)(v3 + 96))._M_current;
    while ( __gnu_cxx::operator!=<std::weak_ptr<Avatar> *,std::vector<std::weak_ptr<Avatar>>>(&__for_begin, &__for_end) )
    {
      v9 = __gnu_cxx::__normal_iterator<std::weak_ptr<Avatar> *,std::vector<std::weak_ptr<Avatar>>>::operator*(&__for_begin);
      std::weak_ptr<Avatar>::weak_ptr((std::weak_ptr<Avatar> *const)(v3 + 32), v9);
      std::weak_ptr<Avatar>::lock((const std::weak_ptr<Avatar> *const)(v3 + 64));
      if ( !std::operator==<Avatar>(0LL, (const std::shared_ptr<Avatar> *)(v3 + 64)) )
      {
        v10 = std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 64));
        FightPropComp = Creature::getFightPropComp(v10);
        IsInvincible = FightPropComp::getIsInvincible(FightPropComp);
        PileBoolValue::set(IsInvincible, 0, 1);
      }
      std::shared_ptr<Avatar>::~shared_ptr((std::shared_ptr<Avatar> *const)(v3 + 64));
      std::weak_ptr<Avatar>::~weak_ptr((std::weak_ptr<Avatar> *const)(v3 + 32));
      __gnu_cxx::__normal_iterator<std::weak_ptr<Avatar> *,std::vector<std::weak_ptr<Avatar>>>::operator++(&__for_begin);
    }
    std::string::operator=(ret_msg, "avatar wudi on");
    std::vector<std::weak_ptr<Avatar>>::~vector((std::vector<std::weak_ptr<Avatar>> *const)(v3 + 96));
  }
  else
  {
    v13 = std::vector<std::string>::operator[](param_vec, 0LL);
    if ( std::operator==<char>(v13, stru_26352260.gap0) )
    {
      v14 = Player::getAvatarComp(player);
      PlayerAvatarComp::getAllAvatarVec((std::vector<std::weak_ptr<Avatar>> *)(v3 + 96), v14);
      __for_range_0 = (std::vector<std::weak_ptr<Avatar>> *)(v3 + 96);
      __for_begin._M_current = std::vector<std::weak_ptr<Avatar>>::begin((std::vector<std::weak_ptr<Avatar>> *const)(v3 + 96))._M_current;
      __for_end._M_current = std::vector<std::weak_ptr<Avatar>>::end((std::vector<std::weak_ptr<Avatar>> *const)(v3 + 96))._M_current;
      while ( __gnu_cxx::operator!=<std::weak_ptr<Avatar> *,std::vector<std::weak_ptr<Avatar>>>(
                &__for_begin,
                &__for_end) )
      {
        v15 = __gnu_cxx::__normal_iterator<std::weak_ptr<Avatar> *,std::vector<std::weak_ptr<Avatar>>>::operator*(&__for_begin);
        std::weak_ptr<Avatar>::weak_ptr((std::weak_ptr<Avatar> *const)(v3 + 32), v15);
        std::weak_ptr<Avatar>::lock((const std::weak_ptr<Avatar> *const)(v3 + 64));
        if ( !std::operator==<Avatar>(0LL, (const std::shared_ptr<Avatar> *)(v3 + 64)) )
        {
          v16 = std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 64));
          v17 = Creature::getFightPropComp(v16);
          v18 = FightPropComp::getIsInvincible(v17);
          PileBoolValue::set(v18, 0, 0);
        }
        std::shared_ptr<Avatar>::~shared_ptr((std::shared_ptr<Avatar> *const)(v3 + 64));
        std::weak_ptr<Avatar>::~weak_ptr((std::weak_ptr<Avatar> *const)(v3 + 32));
        __gnu_cxx::__normal_iterator<std::weak_ptr<Avatar> *,std::vector<std::weak_ptr<Avatar>>>::operator++(&__for_begin);
      }
      std::string::operator=(ret_msg, "avatar wudi off");
      std::vector<std::weak_ptr<Avatar>>::~vector((std::vector<std::weak_ptr<Avatar>> *const)(v3 + 96));
    }
    else
    {
      v19 = std::vector<std::string>::operator[](param_vec, 0LL);
      if ( std::operator==<char>(v19, "GLOBAL") )
      {
        if ( std::vector<std::string>::size(param_vec) <= 2 )
        {
          common::milog::MiLogStream::create(
            &v38,
            &common::milog::MiLogDefault::default_log_obj_,
            3u,
            "./src/player/gm/player_gm_comp.cpp",
            "setWudi",
            5127);
          common::milog::MiLogStream::operator<<<char [17],(char *[17])0>(&v38, (const char (*)[17])"param not enough");
          common::milog::MiLogStream::~MiLogStream(&v38);
          result = -1;
          goto LABEL_50;
        }
        v20 = std::vector<std::string>::operator[](param_vec, 1uLL);
        if ( std::operator==<char>(v20, "AVATAR") )
        {
          v21 = std::vector<std::string>::operator[](param_vec, 2uLL);
          if ( std::operator==<char>(v21, stru_263521E0.gap0) )
          {
            if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
              __asan_report_load8(&context->player);
            GmComp = Player::getGmComp(context->player);
            PlayerGmComp::setIsGlobalAvatarInvincible(GmComp, 1);
            std::string::operator=(ret_msg, "global avatar invincible on");
          }
          else
          {
            v23 = std::vector<std::string>::operator[](param_vec, 2uLL);
            if ( std::operator==<char>(v23, stru_26352260.gap0) )
            {
              if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
                __asan_report_load8(&context->player);
              v24 = Player::getGmComp(context->player);
              PlayerGmComp::setIsGlobalAvatarInvincible(v24, 0);
              std::string::operator=(ret_msg, "global avatar invincible off");
            }
          }
        }
      }
      else
      {
        v25 = std::vector<std::string>::operator[](param_vec, 0LL);
        if ( std::operator==<char>(v25, "MONSTER") )
        {
          if ( std::vector<std::string>::size(param_vec) <= 1 )
          {
            common::milog::MiLogStream::create(
              &v38,
              &common::milog::MiLogDefault::default_log_obj_,
              3u,
              "./src/player/gm/player_gm_comp.cpp",
              "setWudi",
              5148);
            common::milog::MiLogStream::operator<<<char [17],(char *[17])0>(
              &v38,
              (const char (*)[17])"param not enough");
            common::milog::MiLogStream::~MiLogStream(&v38);
            result = -1;
            goto LABEL_50;
          }
          v26 = std::vector<std::string>::operator[](param_vec, 1uLL);
          if ( std::operator==<char>(v26, stru_263521E0.gap0) )
          {
            if ( *(_BYTE *)(((unsigned __int64)&context->scene >> 3) + 0x7FFF8000) )
              __asan_report_load8(&context->scene);
            scene = context->scene;
            std::function<ForeachPolicy ()(Monster &)>::function<setWudi(GmContext &,std::vector<std::string> const&,std::string&)::{lambda(Monster &)#1},void,void>(
              (std::function<ForeachPolicy(Monster&)> *const)&v38,
              (setWudi::<lambda(Monster&)>)&stru_263521E0);
            Scene::foreachEntity<Monster>(scene, (std::function<ForeachPolicy(Monster&)> *)&v38);
            std::function<ForeachPolicy ()(Monster &)>::~function((std::function<ForeachPolicy(Monster&)> *const)&v38);
            if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
              __asan_report_load8(&context->player);
            v28 = Player::getGmComp(context->player);
            PlayerGmComp::setIsMonsterInvincible(v28, 1);
            std::string::operator=(ret_msg, "monster wudi on");
          }
          else
          {
            v29 = std::vector<std::string>::operator[](param_vec, 1uLL);
            if ( std::operator==<char>(v29, stru_26352260.gap0) )
            {
              if ( *(_BYTE *)(((unsigned __int64)&context->scene >> 3) + 0x7FFF8000) )
                __asan_report_load8(&context->scene);
              v30 = context->scene;
              std::function<ForeachPolicy ()(Monster &)>::function<setWudi(GmContext &,std::vector<std::string> const&,std::string&)::{lambda(Monster &)#2},void,void>(
                (std::function<ForeachPolicy(Monster&)> *const)&v38,
                (setWudi::<lambda(Monster&)>)&stru_26352260);
              Scene::foreachEntity<Monster>(v30, (std::function<ForeachPolicy(Monster&)> *)&v38);
              std::function<ForeachPolicy ()(Monster &)>::~function((std::function<ForeachPolicy(Monster&)> *const)&v38);
              if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
                __asan_report_load8(&context->player);
              v31 = Player::getGmComp(context->player);
              PlayerGmComp::setIsMonsterInvincible(v31, 0);
              std::string::operator=(ret_msg, "monster wudi off");
            }
          }
        }
      }
    }
  }
  result = 0;
LABEL_50:
  if ( v39 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8010) = 0;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8010) = -168430091;
  }
  return result;
};

// Line 5153: range 0000000017BEA5AA-0000000017BEA5E6
ForeachPolicy __cdecl setWudi(GmContext &,std::vector<std::string> const&,std::string&)::{lambda(Monster &)#1}::operator()(
        const setWudi::<lambda(Monster&)> *const __closure,
        Monster *monster)
{
  FightPropComp *FightPropComp; // rax
  PileBoolValue *IsInvincible; // rax

  FightPropComp = Creature::getFightPropComp(monster);
  IsInvincible = FightPropComp::getIsInvincible(FightPropComp);
  PileBoolValue::set(IsInvincible, 0, 1);
  return 0;
};

// Line 5163: range 0000000017BEA5E8-0000000017BEA624
ForeachPolicy __cdecl setWudi(GmContext &,std::vector<std::string> const&,std::string&)::{lambda(Monster &)#2}::operator()(
        const setWudi::<lambda(Monster&)> *const __closure,
        Monster *monster)
{
  FightPropComp *FightPropComp; // rax
  PileBoolValue *IsInvincible; // rax

  FightPropComp = Creature::getFightPropComp(monster);
  IsInvincible = FightPropComp::getIsInvincible(FightPropComp);
  PileBoolValue::set(IsInvincible, 0, 0);
  return 0;
};

// Line 5175: range 0000000017D74C48-0000000017D74CEA
void __cdecl dropItemRegister::dropItemRegister(dropItemRegister *const this)
{
  std::function<int(GmContext&,const std::vector<std::string>&,std::string&)> *v1; // rax
  std::allocator<char> __a; // [rsp+1Fh] [rbp-31h] BYREF
  std::string __k; // [rsp+20h] [rbp-30h] BYREF

  std::allocator<char>::allocator(&__a);
  std::string::basic_string<std::allocator<char>>(&__k, "DROP", &__a);
  v1 = std::unordered_map<std::string,std::function<int ()(GmContext &,std::vector<std::string> const&,std::string&)>>::operator[](
         &GmUtils::op_func_map[abi:cxx11],
         &__k);
  std::function<int ()(GmContext &,std::vector<std::string> const&,std::string&)>::operator=<int (&)(GmContext &,std::vector<std::string> const&,std::string&)>(
    v1,
    (int (*)(GmContext *, const std::vector<std::string> *, std::string *))dropItem);
  std::string::~string(&__k);
  std::allocator<char>::~allocator(&__a);
};

// Line 5176: range 0000000017BEB0B0-0000000017BEBD82
int32_t __cdecl dropItem(GmContext *context, const std::vector<std::string> *param_vec, std::string *ret_msg)
{
  int32_t v3; // r14d
  unsigned __int64 v4; // r13
  __int64 v5; // rax
  _DWORD *v6; // r12
  common::milog::MiLogStream *v7; // rdx
  common::milog::MiLogStream *v8; // rax
  std::vector<std::string>::const_reference v9; // rax
  const char *v10; // rax
  Scene *scene; // r15
  Vector3 *Position; // rax
  common::milog::MiLogStream *v13; // rax
  int v14; // r15d
  uint32_t v15; // esi
  int v16; // r15d
  unsigned __int64 v17; // rax
  int v18; // esi
  int v19; // r15d
  char v20; // r15
  common::tools::StringStream<common::tools::FixedBuffer<4096> > *v21; // rax
  common::tools::StringStream<common::tools::FixedBuffer<4096> > *v22; // rcx
  common::milog::MiLogStream *v23; // rax
  common::milog::MiLogStream *v24; // r15
  int32_t result; // eax
  uint32_t idx; // [rsp+2Ch] [rbp-254h]
  std::vector<ItemParam>::iterator __for_begin; // [rsp+30h] [rbp-250h] BYREF
  std::map<unsigned int,unsigned int>::iterator __for_begin_0; // [rsp+38h] [rbp-248h] BYREF
  std::vector<ItemParam> *__for_range; // [rsp+40h] [rbp-240h]
  const ItemParam *item_param; // [rsp+48h] [rbp-238h]
  std::map<unsigned int,unsigned int> *__for_range_0; // [rsp+50h] [rbp-230h]
  std::vector<ItemParam> *__for_range_1; // [rsp+58h] [rbp-228h]
  const ItemParam *pr_0; // [rsp+60h] [rbp-220h]
  const std::pair<unsigned int const,unsigned int> *pr; // [rsp+68h] [rbp-218h]
  std::string v37; // [rsp+70h] [rbp-210h] BYREF
  common::milog::MiLogStream v38; // [rsp+90h] [rbp-1F0h] BYREF
  char v39[464]; // [rsp+B0h] [rbp-1D0h] BYREF

  v4 = (unsigned __int64)v39;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v5 = __asan_stack_malloc_3(416LL);
    if ( v5 )
      v4 = v5;
  }
  *(_QWORD *)v4 = 1102416563LL;
  *(_QWORD *)(v4 + 8) = "8 48 4 12 drop_id:5177 64 4 15 drop_count:5184 80 8 18 output_result:5214 112 16 8 oss:5229 144 "
                        "24 18 action_reason:5193 208 24 20 drop_result_vec:5209 272 24 13 item_vec:5213 336 48 13 item_map:5210";
  *(_QWORD *)(v4 + 16) = dropItem;
  v6 = (_DWORD *)(v4 >> 3);
  v6[536862720] = -235802127;
  v6[536862721] = -234556943;
  v6[536862722] = 61956;
  v6[536862722] = -234881024;
  v6[536862723] = 62194;
  v6[536862724] = 62194;
  v6[536862725] = -218959360;
  v6[536862726] = 62194;
  v6[536862727] = -218959360;
  v6[536862728] = 62194;
  v6[536862729] = -218959360;
  v6[536862730] = 62194;
  v6[536862732] = -202116109;
  *(_DWORD *)(v4 + 48) = 0;
  if ( common::tools::StringUtils::strVecToNum<0u,unsigned int>(param_vec, (unsigned int *)(v4 + 48)) )
  {
    common::milog::MiLogStream::create(
      &v38,
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/player/gm/player_gm_comp.cpp",
      "dropItem",
      5180);
    v7 = common::milog::MiLogStream::operator<<<char [15],(char *[15])0>(&v38, (const char (*)[15])"invalid param:");
    common::milog::MiLogStream::operator<<<std::string>(v7, param_vec);
    common::milog::MiLogStream::~MiLogStream(&v38);
    v3 = -1;
    goto LABEL_60;
  }
  *(_DWORD *)(v4 + 64) = 0;
  common::tools::StringUtils::strVecToNum<1u,unsigned int>(param_vec, (unsigned int *)(v4 + 64));
  if ( *(_DWORD *)(v4 + 64) > 0xF4240u )
  {
    common::milog::MiLogStream::create(
      &v38,
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/player/gm/player_gm_comp.cpp",
      "dropItem",
      5189);
    v8 = common::milog::MiLogStream::operator<<<char [32],(char *[32])0>(
           &v38,
           (const char (*)[32])"drop_count too big. drop_count:");
    common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v8, (const unsigned int *)(v4 + 64));
    common::milog::MiLogStream::~MiLogStream(&v38);
    v3 = -1;
    goto LABEL_60;
  }
  ActionReason::ActionReason((ActionReason *const)(v4 + 144), ACTION_REASON_GM, ITEM_LIMIT_GM);
  if ( *(_DWORD *)(v4 + 64) )
  {
    std::vector<ItemParam>::vector((std::vector<ItemParam> *const)(v4 + 208));
    std::map<unsigned int,unsigned int>::map((std::map<unsigned int,unsigned int> *const)(v4 + 336));
    for ( idx = 0; idx < *(_DWORD *)(v4 + 64); ++idx )
    {
      std::vector<ItemParam>::vector((std::vector<ItemParam> *const)(v4 + 272));
      v15 = *(_DWORD *)(v4 + 48);
      if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
        __asan_report_load8(&context->player);
      *(OutputResult *)(v4 + 80) = DropUtils::dropItems(
                                     context->player,
                                     v15,
                                     1u,
                                     (const ActionReason *)(v4 + 144),
                                     (std::vector<ItemParam> *)(v4 + 272));
      if ( *(_DWORD *)(v4 + 80) )
      {
        v3 = *(_DWORD *)(v4 + 80);
        v16 = 0;
      }
      else
      {
        __for_range = (std::vector<ItemParam> *)(v4 + 272);
        __for_begin._M_current = std::vector<ItemParam>::begin((std::vector<ItemParam> *const)(v4 + 272))._M_current;
        __for_begin_0._M_node = (std::_Rb_tree_iterator<std::pair<unsigned int const,unsigned int> >::_Base_ptr)std::vector<ItemParam>::end(__for_range)._M_current;
        while ( __gnu_cxx::operator!=<ItemParam *,std::vector<ItemParam>>(
                  &__for_begin,
                  (const __gnu_cxx::__normal_iterator<ItemParam*,std::vector<ItemParam> > *)&__for_begin_0) )
        {
          item_param = __gnu_cxx::__normal_iterator<ItemParam *,std::vector<ItemParam>>::operator*(&__for_begin);
          v17 = (unsigned __int64)std::map<unsigned int,unsigned int>::operator[](
                                    (std::map<unsigned int,unsigned int> *const)(v4 + 336),
                                    &item_param->item_id);
          if ( *(_BYTE *)((v17 >> 3) + 0x7FFF8000) != 0 && (char)((v17 & 7) + 3) >= *(_BYTE *)((v17 >> 3) + 0x7FFF8000) )
            v17 = __asan_report_load4(v17);
          v18 = *(_DWORD *)v17;
          if ( *(_BYTE *)(((unsigned __int64)&item_param->count >> 3) + 0x7FFF8000) != 0
            && (char)((((_BYTE)item_param + 4) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&item_param->count >> 3)
                                                                     + 0x7FFF8000) )
          {
            v17 = __asan_report_load4(&item_param->count);
          }
          *(_DWORD *)v17 = v18 + item_param->count;
          __gnu_cxx::__normal_iterator<ItemParam *,std::vector<ItemParam>>::operator++(&__for_begin);
        }
        v16 = 1;
      }
      std::vector<ItemParam>::~vector((std::vector<ItemParam> *const)(v4 + 272));
      if ( v16 != 1 )
      {
        v19 = 0;
        goto LABEL_58;
      }
    }
    __for_range_0 = (std::map<unsigned int,unsigned int> *)(v4 + 336);
    __for_begin_0._M_node = std::map<unsigned int,unsigned int>::begin((std::map<unsigned int,unsigned int> *const)(v4 + 336))._M_node;
    *(std::map<unsigned int,unsigned int>::iterator *)(v4 + 80) = std::map<unsigned int,unsigned int>::end(__for_range_0);
    while ( std::operator!=(
              &__for_begin_0,
              (const std::_Rb_tree_iterator<std::pair<unsigned int const,unsigned int> >::_Self *)(v4 + 80)) )
    {
      pr = std::_Rb_tree_iterator<std::pair<unsigned int const,unsigned int>>::operator*(&__for_begin_0);
      *(_QWORD *)(v4 + 112) = 0LL;
      *(_QWORD *)(v4 + 120) = 0LL;
      if ( *(_BYTE *)(((unsigned __int64)pr >> 3) + 0x7FFF8000) != 0
        && (char)(((unsigned __int8)pr & 7) + 3) >= *(_BYTE *)(((unsigned __int64)pr >> 3) + 0x7FFF8000) )
      {
        __asan_report_load4(pr);
      }
      *(_DWORD *)(v4 + 112) = pr->first;
      if ( *(_BYTE *)(((unsigned __int64)&pr->second >> 3) + 0x7FFF8000) != 0
        && (char)((((_BYTE)pr + 4) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&pr->second >> 3) + 0x7FFF8000) )
      {
        __asan_report_load4(&pr->second);
      }
      *(_DWORD *)(v4 + 116) = pr->second;
      std::vector<ItemParam>::push_back(
        (std::vector<ItemParam> *const)(v4 + 208),
        (const std::vector<ItemParam>::value_type *)(v4 + 112));
      std::_Rb_tree_iterator<std::pair<unsigned int const,unsigned int>>::operator++(&__for_begin_0);
    }
    common::tools::StringStream<common::tools::FixedBuffer<4096>>::StringStream((common::tools::StringStream<common::tools::FixedBuffer<4096> > *const)(v4 + 112));
    __for_range_1 = (std::vector<ItemParam> *)(v4 + 208);
    __for_begin_0._M_node = (std::_Rb_tree_iterator<std::pair<unsigned int const,unsigned int> >::_Base_ptr)std::vector<ItemParam>::begin((std::vector<ItemParam> *const)(v4 + 208))._M_current;
    *(std::vector<ItemParam>::iterator *)(v4 + 80) = std::vector<ItemParam>::end(__for_range_1);
    while ( __gnu_cxx::operator!=<ItemParam *,std::vector<ItemParam>>(
              (const __gnu_cxx::__normal_iterator<ItemParam*,std::vector<ItemParam> > *)&__for_begin_0,
              (const __gnu_cxx::__normal_iterator<ItemParam*,std::vector<ItemParam> > *)(v4 + 80)) )
    {
      pr_0 = __gnu_cxx::__normal_iterator<ItemParam *,std::vector<ItemParam>>::operator*((const __gnu_cxx::__normal_iterator<ItemParam*,std::vector<ItemParam> > *const)&__for_begin_0);
      common::tools::StringStream<common::tools::FixedBuffer<4096>>::str[abi:cxx11](
        &v37,
        (common::tools::StringStream<common::tools::FixedBuffer<4096> > *const)(v4 + 112));
      v20 = std::string::empty(&v37) ^ 1;
      std::string::~string(&v37);
      if ( v20 )
        common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(
          (common::tools::StringStream<common::tools::FixedBuffer<4096> > *const)(v4 + 112),
          44);
      if ( *(_BYTE *)(((unsigned __int64)pr_0 >> 3) + 0x7FFF8000) != 0
        && (char)(((unsigned __int8)pr_0 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)pr_0 >> 3) + 0x7FFF8000) )
      {
        __asan_report_load4(pr_0);
      }
      v21 = common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(
              (common::tools::StringStream<common::tools::FixedBuffer<4096> > *const)(v4 + 112),
              pr_0->item_id);
      v22 = common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(v21, ":");
      if ( *(_BYTE *)(((unsigned __int64)&pr_0->count >> 3) + 0x7FFF8000) != 0
        && (char)((((_BYTE)pr_0 + 4) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&pr_0->count >> 3) + 0x7FFF8000) )
      {
        __asan_report_load4(&pr_0->count);
      }
      common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(v22, pr_0->count);
      __gnu_cxx::__normal_iterator<ItemParam *,std::vector<ItemParam>>::operator++((__gnu_cxx::__normal_iterator<ItemParam*,std::vector<ItemParam> > *const)&__for_begin_0);
    }
    common::milog::MiLogStream::create(
      (common::milog::MiLogStream *)&v37,
      &common::milog::MiLogDefault::default_log_obj_,
      2u,
      "./src/player/gm/player_gm_comp.cpp",
      "dropItem",
      5236);
    v23 = common::milog::MiLogStream::operator<<<std::string>((common::milog::MiLogStream *const)&v37, param_vec);
    v24 = common::milog::MiLogStream::operator<<<char [2],(char *[2])0>(v23, (const char (*)[2])"\n");
    common::tools::StringStream<common::tools::FixedBuffer<4096>>::str[abi:cxx11](
      (std::string *)&v38,
      (common::tools::StringStream<common::tools::FixedBuffer<4096> > *const)(v4 + 112));
    common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v24, (const std::string *)&v38);
    std::string::~string(&v38);
    common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)&v37);
    common::tools::StringStream<common::tools::FixedBuffer<4096>>::str[abi:cxx11](
      (std::string *)&v38,
      (common::tools::StringStream<common::tools::FixedBuffer<4096> > *const)(v4 + 112));
    std::string::operator=(ret_msg, &v38);
    std::string::~string(&v38);
    common::tools::StringStream<common::tools::FixedBuffer<4096>>::~StringStream((common::tools::StringStream<common::tools::FixedBuffer<4096> > *const)(v4 + 112));
    v19 = 1;
LABEL_58:
    std::map<unsigned int,unsigned int>::~map((std::map<unsigned int,unsigned int> *const)(v4 + 336));
    std::vector<ItemParam>::~vector((std::vector<ItemParam> *const)(v4 + 208));
    if ( v19 == 1 )
      goto LABEL_59;
  }
  else
  {
    if ( std::vector<std::string>::size(param_vec) > 1 )
    {
      v9 = std::vector<std::string>::operator[](param_vec, 1uLL);
      v10 = (const char *)std::string::c_str(v9);
      data::enumNameToVal(v10, (data::ItemLimitType *)(v4 + 148));
    }
    if ( *(_BYTE *)(((unsigned __int64)&context->scene >> 3) + 0x7FFF8000) )
      __asan_report_load8(&context->scene);
    scene = context->scene;
    if ( *(_BYTE *)(((unsigned __int64)&context->avatar >> 3) + 0x7FFF8000) )
      __asan_report_load8(&context->avatar);
    Position = (Vector3 *)Entity::getPosition((const Entity *const)context->avatar);
    if ( ((unsigned __int8)Position & 7) >= *(_BYTE *)(((unsigned __int64)Position >> 3) + 0x7FFF8000)
      && *(_BYTE *)(((unsigned __int64)Position >> 3) + 0x7FFF8000) != 0
      || *(_BYTE *)((((unsigned __int64)&Position->z + 3) >> 3) + 0x7FFF8000) != 0
      && (((unsigned __int8)Position + 11) & 7) >= *(_BYTE *)((((unsigned __int64)&Position->z + 3) >> 3) + 0x7FFF8000) )
    {
      Position = (Vector3 *)__asan_report_load_n(Position, 12LL);
    }
    Scene::getDropSurroundPlayers((std::vector<std::shared_ptr<Player>> *)(v4 + 272), scene, *Position);
    if ( *(_BYTE *)(((unsigned __int64)&context->avatar >> 3) + 0x7FFF8000) )
      __asan_report_load8(&context->avatar);
    if ( Entity::dropItemsForPlayers(
           (Entity *const)context->avatar,
           *(_DWORD *)(v4 + 48),
           1u,
           (const ActionReason *)(v4 + 144),
           (const std::vector<std::shared_ptr<Player>> *)(v4 + 272)) )
    {
      common::milog::MiLogStream::create(
        &v38,
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/player/gm/player_gm_comp.cpp",
        "dropItem",
        5203);
      v13 = common::milog::MiLogStream::operator<<<char [25],(char *[25])0>(
              &v38,
              (const char (*)[25])"dropItem fails, drop_id:");
      common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v13, (const unsigned int *)(v4 + 48));
      common::milog::MiLogStream::~MiLogStream(&v38);
      v3 = -1;
      v14 = 0;
    }
    else
    {
      v14 = 1;
    }
    std::vector<std::shared_ptr<Player>>::~vector((std::vector<std::shared_ptr<Player>> *const)(v4 + 272));
    if ( v14 == 1 )
LABEL_59:
      v3 = 0;
  }
LABEL_60:
  result = v3;
  if ( v39 == (char *)v4 )
  {
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8008) = 0LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8010) = 0LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8018) = 0LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8020) = 0LL;
    *(_DWORD *)((v4 >> 3) + 0x7FFF8028) = 0;
    *(_DWORD *)((v4 >> 3) + 0x7FFF8030) = 0;
  }
  else
  {
    *(_QWORD *)v4 = 1172321806LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8020) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8028) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v4 >> 3) + 0x7FFF8030) = -168430091;
  }
  return result;
};

// Line 5242: range 0000000017D74CEC-0000000017D74D8E
void __cdecl rewardItemRegister::rewardItemRegister(rewardItemRegister *const this)
{
  std::function<int(GmContext&,const std::vector<std::string>&,std::string&)> *v1; // rax
  std::allocator<char> __a; // [rsp+1Fh] [rbp-31h] BYREF
  std::string __k; // [rsp+20h] [rbp-30h] BYREF

  std::allocator<char>::allocator(&__a);
  std::string::basic_string<std::allocator<char>>(&__k, "REWARD", &__a);
  v1 = std::unordered_map<std::string,std::function<int ()(GmContext &,std::vector<std::string> const&,std::string&)>>::operator[](
         &GmUtils::op_func_map[abi:cxx11],
         &__k);
  std::function<int ()(GmContext &,std::vector<std::string> const&,std::string&)>::operator=<int (&)(GmContext &,std::vector<std::string> const&,std::string&)>(
    v1,
    (int (*)(GmContext *, const std::vector<std::string> *, std::string *))rewardItem);
  std::string::~string(&__k);
  std::allocator<char>::~allocator(&__a);
};

// Line 5243: range 0000000017BEBD83-0000000017BEC139
int32_t __cdecl rewardItem(GmContext *context, const std::vector<std::string> *param_vec, std::string *ret_msg)
{
  unsigned __int64 v3; // rbx
  __int64 v4; // rax
  _DWORD *v5; // r13
  common::milog::MiLogStream *v6; // rdx
  int32_t result; // eax
  std::vector<std::string>::const_reference v8; // rax
  const char *v9; // rax
  PlayerItemComp *ItemComp; // rax
  common::milog::MiLogStream *v11; // rax
  common::milog::MiLogStream *v12; // rax
  common::milog::MiLogStream *v13; // rcx
  PlayerItemComp *v14; // rax
  int32_t ret; // [rsp+2Ch] [rbp-C4h]
  common::milog::MiLogStream v16; // [rsp+30h] [rbp-C0h] BYREF
  char v17[160]; // [rsp+50h] [rbp-A0h] BYREF

  v3 = (unsigned __int64)v17;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_1(128LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "2 48 4 14 reward_id:5244 64 24 18 action_reason:5250";
  *(_QWORD *)(v3 + 16) = rewardItem;
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = -234556943;
  v5[536862722] = -218103808;
  v5[536862723] = -202116109;
  *(_DWORD *)(v3 + 48) = 0;
  if ( common::tools::StringUtils::strVecToNum<0u,unsigned int>(param_vec, (unsigned int *)(v3 + 48)) )
  {
    common::milog::MiLogStream::create(
      &v16,
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/player/gm/player_gm_comp.cpp",
      "rewardItem",
      5247);
    v6 = common::milog::MiLogStream::operator<<<char [15],(char *[15])0>(&v16, (const char (*)[15])"invalid param:");
    common::milog::MiLogStream::operator<<<std::string>(v6, param_vec);
    common::milog::MiLogStream::~MiLogStream(&v16);
    result = -1;
  }
  else
  {
    ActionReason::ActionReason((ActionReason *const)(v3 + 64), ACTION_REASON_GM, ITEM_LIMIT_GM);
    if ( std::vector<std::string>::size(param_vec) > 1 )
    {
      v8 = std::vector<std::string>::operator[](param_vec, 1uLL);
      v9 = (const char *)std::string::c_str(v8);
      data::enumNameToVal(v9, (data::ItemLimitType *)(v3 + 68));
    }
    if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
      __asan_report_load8(&context->player);
    ItemComp = Player::getItemComp(context->player);
    ret = PlayerItemComp::checkGrantReward(ItemComp, *(_DWORD *)(v3 + 48), (const ActionReason *)(v3 + 64));
    if ( ret )
    {
      common::milog::MiLogStream::create(
        &v16,
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/player/gm/player_gm_comp.cpp",
        "rewardItem",
        5258);
      v11 = common::milog::MiLogStream::operator<<<char [34],(char *[34])0>(
              &v16,
              (const char (*)[34])"checkGrantReward fail, reward_id:");
      v12 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v11, (const unsigned int *)(v3 + 48));
      v13 = common::milog::MiLogStream::operator<<<char [9],(char *[9])0>(v12, (const char (*)[9])" player:");
      if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
        __asan_report_load8(&context->player);
      operator<<(v13, context->player);
      common::milog::MiLogStream::~MiLogStream(&v16);
      result = ret;
    }
    else
    {
      if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
        __asan_report_load8(&context->player);
      v14 = Player::getItemComp(context->player);
      result = PlayerItemComp::grantReward(v14, *(_DWORD *)(v3 + 48), (const ActionReason *)(v3 + 64), 0LL);
    }
  }
  if ( v17 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 5264: range 0000000017D74D90-0000000017D74E32
void __cdecl procGrantRewardRegister::procGrantRewardRegister(procGrantRewardRegister *const this)
{
  std::function<int(GmContext&,const std::vector<std::string>&,std::string&)> *v1; // rax
  std::allocator<char> __a; // [rsp+1Fh] [rbp-31h] BYREF
  std::string __k; // [rsp+20h] [rbp-30h] BYREF

  std::allocator<char>::allocator(&__a);
  std::string::basic_string<std::allocator<char>>(&__k, "GRANTREWARD", &__a);
  v1 = std::unordered_map<std::string,std::function<int ()(GmContext &,std::vector<std::string> const&,std::string&)>>::operator[](
         &GmUtils::op_func_map[abi:cxx11],
         &__k);
  std::function<int ()(GmContext &,std::vector<std::string> const&,std::string&)>::operator=<int (&)(GmContext &,std::vector<std::string> const&,std::string&)>(
    v1,
    (int (*)(GmContext *, const std::vector<std::string> *, std::string *))procGrantReward);
  std::string::~string(&__k);
  std::allocator<char>::~allocator(&__a);
};

// Line 5265: range 0000000017BEC13A-0000000017BEC3AF
int32_t __cdecl procGrantReward(GmContext *context, const std::vector<std::string> *param_vec, std::string *ret_msg)
{
  unsigned __int64 v3; // rbx
  __int64 v4; // rax
  _DWORD *v5; // r12
  common::milog::MiLogStream *v6; // rdx
  int32_t result; // eax
  std::vector<std::string>::const_reference v8; // rax
  const char *v9; // rax
  PlayerItemComp *ItemComp; // rax
  common::milog::MiLogStream v11; // [rsp+20h] [rbp-C0h] BYREF
  char v12[160]; // [rsp+40h] [rbp-A0h] BYREF

  v3 = (unsigned __int64)v12;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_1(128LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "2 48 4 14 reward_id:5266 64 24 18 action_reason:5272";
  *(_QWORD *)(v3 + 16) = procGrantReward;
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = -234556943;
  v5[536862722] = -218103808;
  v5[536862723] = -202116109;
  *(_DWORD *)(v3 + 48) = 0;
  if ( common::tools::StringUtils::strVecToNum<0u,unsigned int>(param_vec, (unsigned int *)(v3 + 48)) )
  {
    common::milog::MiLogStream::create(
      &v11,
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/player/gm/player_gm_comp.cpp",
      "procGrantReward",
      5269);
    v6 = common::milog::MiLogStream::operator<<<char [15],(char *[15])0>(&v11, (const char (*)[15])"invalid param:");
    common::milog::MiLogStream::operator<<<std::string>(v6, param_vec);
    common::milog::MiLogStream::~MiLogStream(&v11);
    result = -1;
  }
  else
  {
    ActionReason::ActionReason((ActionReason *const)(v3 + 64), ACTION_REASON_GM, ITEM_LIMIT_GM);
    if ( std::vector<std::string>::size(param_vec) > 1 )
    {
      v8 = std::vector<std::string>::operator[](param_vec, 1uLL);
      v9 = (const char *)std::string::c_str(v8);
      data::enumNameToVal(v9, (data::ItemLimitType *)(v3 + 68));
    }
    if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
      __asan_report_load8(&context->player);
    ItemComp = Player::getItemComp(context->player);
    result = PlayerItemComp::grantRewardWithStackLimit(
               ItemComp,
               *(_DWORD *)(v3 + 48),
               (const ActionReason *)(v3 + 64),
               0LL);
  }
  if ( v12 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 5280: range 0000000017D74E34-0000000017D74ED6
void __cdecl procTalentRegister::procTalentRegister(procTalentRegister *const this)
{
  std::function<int(GmContext&,const std::vector<std::string>&,std::string&)> *v1; // rax
  std::allocator<char> __a; // [rsp+1Fh] [rbp-31h] BYREF
  std::string __k; // [rsp+20h] [rbp-30h] BYREF

  std::allocator<char>::allocator(&__a);
  std::string::basic_string<std::allocator<char>>(&__k, "TALENT", &__a);
  v1 = std::unordered_map<std::string,std::function<int ()(GmContext &,std::vector<std::string> const&,std::string&)>>::operator[](
         &GmUtils::op_func_map[abi:cxx11],
         &__k);
  std::function<int ()(GmContext &,std::vector<std::string> const&,std::string&)>::operator=<int (&)(GmContext &,std::vector<std::string> const&,std::string&)>(
    v1,
    (int (*)(GmContext *, const std::vector<std::string> *, std::string *))procTalent);
  std::string::~string(&__k);
  std::allocator<char>::~allocator(&__a);
};

// Line 5281: range 0000000017BEC3B0-0000000017BEC9D2
int32_t __cdecl procTalent(GmContext *context, const std::vector<std::string> *param_vec, std::string *ret_msg)
{
  unsigned __int64 v3; // rbx
  __int64 v4; // rax
  unsigned __int64 v5; // r13
  int32_t result; // eax
  const std::string *v7; // rax
  const std::string *v8; // rax
  TalentComp *TalentComp; // rax
  const std::string *v10; // rax
  common::milog::MiLogStream *v11; // rdx
  TalentComp *v12; // rax
  common::milog::MiLogStream *v13; // rax
  const std::string *v14; // rax
  const std::string *v15; // rax
  TalentComp *v16; // rax
  int32_t ret; // [rsp+2Ch] [rbp-C4h]
  int32_t reta; // [rsp+2Ch] [rbp-C4h]
  int32_t retb; // [rsp+2Ch] [rbp-C4h]
  std::string __rhs; // [rsp+30h] [rbp-C0h] BYREF
  std::string __lhs; // [rsp+50h] [rbp-A0h] BYREF
  common::milog::MiLogStream v23; // [rsp+70h] [rbp-80h] BYREF
  char v24[96]; // [rsp+90h] [rbp-60h] BYREF

  v3 = (unsigned __int64)v24;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_0(64LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "1 32 4 14 talent_id:5302";
  *(_QWORD *)(v3 + 16) = procTalent;
  v5 = v3 >> 3;
  *(_DWORD *)(v5 + 2147450880) = -235802127;
  *(_DWORD *)(v5 + 2147450884) = -202116348;
  if ( std::vector<std::string>::size(param_vec) <= 1 )
  {
    common::milog::MiLogStream::create(
      &v23,
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/player/gm/player_gm_comp.cpp",
      "procTalent",
      5284);
    common::milog::MiLogStream::operator<<<char [17],(char *[17])0>(&v23, (const char (*)[17])"param not enough");
    common::milog::MiLogStream::~MiLogStream(&v23);
    result = -1;
    goto LABEL_27;
  }
  v7 = std::vector<std::string>::operator[](param_vec, 0LL);
  if ( std::operator==<char>(v7, "UNLOCK") )
  {
    v8 = std::vector<std::string>::operator[](param_vec, 1uLL);
    if ( std::operator==<char>(v8, _f.gap0) )
    {
      if ( *(_BYTE *)(((unsigned __int64)&context->avatar >> 3) + 0x7FFF8000) )
        __asan_report_load8(&context->avatar);
      TalentComp = Avatar::getTalentComp(context->avatar);
      ret = TalentComp::forceUnlockAllTalent(TalentComp);
      if ( ret )
      {
        common::milog::MiLogStream::create(
          &v23,
          &common::milog::MiLogDefault::default_log_obj_,
          3u,
          "./src/player/gm/player_gm_comp.cpp",
          "procTalent",
          5295);
        common::milog::MiLogStream::operator<<<char [27],(char *[27])0>(
          &v23,
          (const char (*)[27])"forceUnlockAllTalent fails");
        common::milog::MiLogStream::~MiLogStream(&v23);
        result = ret;
        goto LABEL_27;
      }
      std::string::operator=(ret_msg, "unlock all talents succeed");
    }
    else
    {
      *(_DWORD *)(v3 + 32) = 0;
      v10 = std::vector<std::string>::operator[](param_vec, 1uLL);
      if ( common::tools::StringUtils::strToNum<unsigned int>(v10, (unsigned int *)(v3 + 32), 1) )
      {
        common::milog::MiLogStream::create(
          &v23,
          &common::milog::MiLogDefault::default_log_obj_,
          3u,
          "./src/player/gm/player_gm_comp.cpp",
          "procTalent",
          5305);
        v11 = common::milog::MiLogStream::operator<<<char [15],(char *[15])0>(
                &v23,
                (const char (*)[15])"invalid param:");
        common::milog::MiLogStream::operator<<<std::string>(v11, param_vec);
        common::milog::MiLogStream::~MiLogStream(&v23);
        result = -1;
        goto LABEL_27;
      }
      if ( *(_BYTE *)(((unsigned __int64)&context->avatar >> 3) + 0x7FFF8000) )
        __asan_report_load8(&context->avatar);
      v12 = Avatar::getTalentComp(context->avatar);
      reta = TalentComp::forceUnlockTalent(v12, *(_DWORD *)(v3 + 32));
      if ( reta )
      {
        common::milog::MiLogStream::create(
          &v23,
          &common::milog::MiLogDefault::default_log_obj_,
          3u,
          "./src/player/gm/player_gm_comp.cpp",
          "procTalent",
          5311);
        v13 = common::milog::MiLogStream::operator<<<char [36],(char *[36])0>(
                &v23,
                (const char (*)[36])"forceUnlockTalent fails, talent_id:");
        common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v13, (const unsigned int *)(v3 + 32));
        common::milog::MiLogStream::~MiLogStream(&v23);
        result = reta;
        goto LABEL_27;
      }
      common::tools::StringUtils::numToStr<unsigned int>(&__rhs, *(_DWORD *)(v3 + 32));
      std::operator+<char>(&__lhs, "unlock talent ", &__rhs);
      std::operator+<char>((std::string *)&v23, &__lhs, " succeed");
      std::string::operator=(ret_msg, &v23);
      std::string::~string(&v23);
      std::string::~string(&__lhs);
      std::string::~string(&__rhs);
    }
  }
  else
  {
    v14 = std::vector<std::string>::operator[](param_vec, 0LL);
    if ( std::operator==<char>(v14, "LOCK") )
    {
      v15 = std::vector<std::string>::operator[](param_vec, 1uLL);
      if ( std::operator==<char>(v15, _f.gap0) )
      {
        if ( *(_BYTE *)(((unsigned __int64)&context->avatar >> 3) + 0x7FFF8000) )
          __asan_report_load8(&context->avatar);
        v16 = Avatar::getTalentComp(context->avatar);
        retb = TalentComp::forceLockAllTalent(v16);
        if ( retb )
        {
          common::milog::MiLogStream::create(
            &v23,
            &common::milog::MiLogDefault::default_log_obj_,
            3u,
            "./src/player/gm/player_gm_comp.cpp",
            "procTalent",
            5324);
          common::milog::MiLogStream::operator<<<char [25],(char *[25])0>(
            &v23,
            (const char (*)[25])"forceLockAllTalent fails");
          common::milog::MiLogStream::~MiLogStream(&v23);
          result = retb;
          goto LABEL_27;
        }
      }
    }
  }
  result = 0;
LABEL_27:
  if ( v24 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 5332: range 0000000017D74ED8-0000000017D74F7A
void __cdecl settleDungeonRegister::settleDungeonRegister(settleDungeonRegister *const this)
{
  std::function<int(GmContext&,const std::vector<std::string>&,std::string&)> *v1; // rax
  std::allocator<char> __a; // [rsp+1Fh] [rbp-31h] BYREF
  std::string __k; // [rsp+20h] [rbp-30h] BYREF

  std::allocator<char>::allocator(&__a);
  std::string::basic_string<std::allocator<char>>(&__k, "SETTLE", &__a);
  v1 = std::unordered_map<std::string,std::function<int ()(GmContext &,std::vector<std::string> const&,std::string&)>>::operator[](
         &GmUtils::op_func_map[abi:cxx11],
         &__k);
  std::function<int ()(GmContext &,std::vector<std::string> const&,std::string&)>::operator=<int (&)(GmContext &,std::vector<std::string> const&,std::string&)>(
    v1,
    (int (*)(GmContext *, const std::vector<std::string> *, std::string *))settleDungeon);
  std::string::~string(&__k);
  std::allocator<char>::~allocator(&__a);
};

// Line 5333: range 0000000017BEC9D3-0000000017BECDCF
int32_t __cdecl settleDungeon(GmContext *context, const std::vector<std::string> *param_vec, std::string *ret_msg)
{
  unsigned __int64 v3; // rbx
  __int64 v4; // rax
  _DWORD *v5; // r13
  common::milog::MiLogStream *v6; // rdx
  int32_t v7; // r14d
  int v8; // eax
  DungeonScene *v9; // rax
  common::milog::MiLogStream *v10; // r14
  std::__shared_ptr_access<DungeonScene,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v11; // rax
  int32_t v12; // eax
  DungeonResult result; // [rsp+2Ch] [rbp-B4h]
  common::milog::MiLogStream v15; // [rsp+30h] [rbp-B0h] BYREF
  char v16[144]; // [rsp+50h] [rbp-90h] BYREF

  v3 = (unsigned __int64)v16;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_1(96LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "2 48 4 15 result_num:5334 64 16 22 dungeon_scene_ptr:5356";
  *(_QWORD *)(v3 + 16) = settleDungeon;
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = -234556943;
  v5[536862722] = -202178560;
  *(_DWORD *)(v3 + 48) = 0;
  if ( common::tools::StringUtils::strVecToNum<0u,int>(param_vec, (int *)(v3 + 48)) )
  {
    common::milog::MiLogStream::create(
      &v15,
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/player/gm/player_gm_comp.cpp",
      "settleDungeon",
      5337);
    v6 = common::milog::MiLogStream::operator<<<char [15],(char *[15])0>(&v15, (const char (*)[15])"invalid param:");
    common::milog::MiLogStream::operator<<<std::string>(v6, param_vec);
    common::milog::MiLogStream::~MiLogStream(&v15);
    v7 = -1;
    goto LABEL_23;
  }
  v8 = *(_DWORD *)(v3 + 48);
  if ( v8 == 2 )
  {
    result = DUNGEON_RESULT_CANCEL;
  }
  else
  {
    if ( v8 > 2 )
    {
LABEL_14:
      std::string::operator=(ret_msg, "invalid number");
      v7 = -1;
      goto LABEL_23;
    }
    if ( v8 )
    {
      if ( v8 != 1 )
        goto LABEL_14;
      result = DUNGEON_RESULT_SUCCEED;
    }
    else
    {
      result = DUNGEON_RESULT_FAIL;
    }
  }
  if ( *(_BYTE *)(((unsigned __int64)&context->scene >> 3) + 0x7FFF8000) )
    __asan_report_load8(&context->scene);
  toPtr<DungeonScene,Scene>((Scene *)(v3 + 64));
  if ( std::operator==<DungeonScene>((const std::shared_ptr<DungeonScene> *)(v3 + 64), 0LL) )
  {
    common::milog::MiLogStream::create(
      &v15,
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/player/gm/player_gm_comp.cpp",
      "settleDungeon",
      5359);
    common::milog::MiLogStream::operator<<<char [26],(char *[26])0>(
      &v15,
      (const char (*)[26])"dungeon_scene_ptr is null");
    common::milog::MiLogStream::~MiLogStream(&v15);
    std::string::operator=(ret_msg, "current scene is not dungeon");
    v7 = -1;
  }
  else
  {
    v9 = std::__shared_ptr_access<DungeonScene,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<DungeonScene,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 64));
    if ( DungeonScene::settle(v9, result) )
    {
      common::milog::MiLogStream::create(
        &v15,
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/player/gm/player_gm_comp.cpp",
        "settleDungeon",
        5365);
      v10 = common::milog::MiLogStream::operator<<<char [13],(char *[13])0>(&v15, (const char (*)[13])"settle fails");
      v11 = std::__shared_ptr_access<DungeonScene,(__gnu_cxx::_Lock_policy)2,false,false>::operator*((const std::__shared_ptr_access<DungeonScene,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 64));
      common::milog::MiLogStream::operator<<<DungeonScene,(DungeonScene*)0>(v10, v11);
      common::milog::MiLogStream::~MiLogStream(&v15);
      std::string::operator=(ret_msg, "settle fails");
      v7 = -1;
    }
    else
    {
      v7 = 0;
    }
  }
  std::shared_ptr<DungeonScene>::~shared_ptr((std::shared_ptr<DungeonScene> *const)(v3 + 64));
LABEL_23:
  v12 = v7;
  if ( v16 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8008) = 0;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8008) = -168430091;
  }
  return v12;
};

// Line 5372: range 0000000017D74F7C-0000000017D7501E
void __cdecl procRemindRegister::procRemindRegister(procRemindRegister *const this)
{
  std::function<int(GmContext&,const std::vector<std::string>&,std::string&)> *v1; // rax
  std::allocator<char> __a; // [rsp+1Fh] [rbp-31h] BYREF
  std::string __k; // [rsp+20h] [rbp-30h] BYREF

  std::allocator<char>::allocator(&__a);
  std::string::basic_string<std::allocator<char>>(&__k, "REMIND", &__a);
  v1 = std::unordered_map<std::string,std::function<int ()(GmContext &,std::vector<std::string> const&,std::string&)>>::operator[](
         &GmUtils::op_func_map[abi:cxx11],
         &__k);
  std::function<int ()(GmContext &,std::vector<std::string> const&,std::string&)>::operator=<int (&)(GmContext &,std::vector<std::string> const&,std::string&)>(
    v1,
    (int (*)(GmContext *, const std::vector<std::string> *, std::string *))procRemind);
  std::string::~string(&__k);
  std::allocator<char>::~allocator(&__a);
};

// Line 5373: range 0000000017BECDD0-0000000017BED14E
int32_t __cdecl procRemind(GmContext *context, const std::vector<std::string> *param_vec, std::string *ret_msg)
{
  unsigned __int64 v3; // r13
  __int64 v4; // rax
  _DWORD *v5; // r12
  common::milog::MiLogStream *v6; // rdx
  int32_t v7; // r14d
  int32_t result; // eax
  common::milog::MiLogStream v10; // [rsp+20h] [rbp-F0h] BYREF
  char v11[208]; // [rsp+40h] [rbp-D0h] BYREF

  v3 = (unsigned __int64)v11;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_2(160LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "3 48 4 16 reminder_id:5374 64 16 22 dungeon_scene_ptr:5380 96 24 11 notify:5387";
  *(_QWORD *)(v3 + 16) = procRemind;
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = -234556943;
  v5[536862722] = -219021312;
  v5[536862723] = -218103808;
  v5[536862724] = -202116109;
  *(_DWORD *)(v3 + 48) = 0;
  if ( common::tools::StringUtils::strVecToNum<0u,int>(param_vec, (int *)(v3 + 48)) )
  {
    common::milog::MiLogStream::create(
      &v10,
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/player/gm/player_gm_comp.cpp",
      "procRemind",
      5377);
    v6 = common::milog::MiLogStream::operator<<<char [15],(char *[15])0>(&v10, (const char (*)[15])"invalid param:");
    common::milog::MiLogStream::operator<<<std::string>(v6, param_vec);
    common::milog::MiLogStream::~MiLogStream(&v10);
    v7 = -1;
  }
  else
  {
    if ( *(_BYTE *)(((unsigned __int64)&context->scene >> 3) + 0x7FFF8000) )
      __asan_report_load8(&context->scene);
    toPtr<DungeonScene,Scene>((Scene *)(v3 + 64));
    if ( std::operator==<DungeonScene>((const std::shared_ptr<DungeonScene> *)(v3 + 64), 0LL) )
    {
      common::milog::MiLogStream::create(
        &v10,
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/player/gm/player_gm_comp.cpp",
        "procRemind",
        5383);
      common::milog::MiLogStream::operator<<<char [26],(char *[26])0>(
        &v10,
        (const char (*)[26])"dungeon_scene_ptr is null");
      common::milog::MiLogStream::~MiLogStream(&v10);
      std::string::operator=(ret_msg, "current scene is not dungeon");
      v7 = -1;
    }
    else
    {
      proto::DungeonShowReminderNotify::DungeonShowReminderNotify((proto::DungeonShowReminderNotify *const)(v3 + 96));
      proto::DungeonShowReminderNotify::set_reminder_id(
        (proto::DungeonShowReminderNotify *const)(v3 + 96),
        *(_DWORD *)(v3 + 48));
      if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
        __asan_report_load8(&context->player);
      Player::sendProto(context->player, (const google::protobuf::Message *)(v3 + 96));
      v7 = 0;
      proto::DungeonShowReminderNotify::~DungeonShowReminderNotify((proto::DungeonShowReminderNotify *const)(v3 + 96));
    }
    std::shared_ptr<DungeonScene>::~shared_ptr((std::shared_ptr<DungeonScene> *const)(v3 + 64));
  }
  result = v7;
  if ( v11 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8010) = 0;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8010) = -168430091;
  }
  return result;
};

// Line 5393: range 0000000017D75020-0000000017D750C2
void __cdecl procSpringRegister::procSpringRegister(procSpringRegister *const this)
{
  std::function<int(GmContext&,const std::vector<std::string>&,std::string&)> *v1; // rax
  std::allocator<char> __a; // [rsp+1Fh] [rbp-31h] BYREF
  std::string __k; // [rsp+20h] [rbp-30h] BYREF

  std::allocator<char>::allocator(&__a);
  std::string::basic_string<std::allocator<char>>(&__k, "SPRING", &__a);
  v1 = std::unordered_map<std::string,std::function<int ()(GmContext &,std::vector<std::string> const&,std::string&)>>::operator[](
         &GmUtils::op_func_map[abi:cxx11],
         &__k);
  std::function<int ()(GmContext &,std::vector<std::string> const&,std::string&)>::operator=<int (&)(GmContext &,std::vector<std::string> const&,std::string&)>(
    v1,
    (int (*)(GmContext *, const std::vector<std::string> *, std::string *))procSpring);
  std::string::~string(&__k);
  std::allocator<char>::~allocator(&__a);
};

// Line 5394: range 0000000017BED14F-0000000017BED553
int32_t __cdecl procSpring(GmContext *context, const std::vector<std::string> *param_vec, std::string *ret_msg)
{
  unsigned __int64 v3; // rbx
  __int64 v4; // rax
  _DWORD *v5; // r13
  int32_t v6; // r14d
  common::milog::MiLogStream *v7; // rcx
  const std::string *v8; // rax
  PlayerWorldScene *v9; // rax
  const std::string *v10; // rax
  common::milog::MiLogStream *v11; // rdx
  PlayerWorldScene *v12; // rax
  int32_t result; // eax
  common::milog::MiLogStream v14; // [rsp+20h] [rbp-B0h] BYREF
  char v15[144]; // [rsp+40h] [rbp-90h] BYREF

  v3 = (unsigned __int64)v15;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_1(96LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "2 48 4 15 add_spring:5412 64 16 20 world_scene_ptr:5400";
  *(_QWORD *)(v3 + 16) = procSpring;
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = -234556943;
  v5[536862722] = -202178560;
  if ( std::vector<std::string>::empty(param_vec) )
  {
    common::milog::MiLogStream::create(
      &v14,
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/player/gm/player_gm_comp.cpp",
      "procSpring",
      5397);
    common::milog::MiLogStream::operator<<<char [17],(char *[17])0>(&v14, (const char (*)[17])"param not enough");
    common::milog::MiLogStream::~MiLogStream(&v14);
    v6 = -1;
    goto LABEL_19;
  }
  if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
    __asan_report_load8(&context->player);
  Player::getSceneComp(context->player);
  PlayerSceneComp::getMainWorldScene((PlayerSceneComp *const)(v3 + 64));
  if ( std::operator==<PlayerWorldScene>((const std::shared_ptr<PlayerWorldScene> *)(v3 + 64), 0LL) )
  {
    common::milog::MiLogStream::create(
      &v14,
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/player/gm/player_gm_comp.cpp",
      "procSpring",
      5403);
    v7 = common::milog::MiLogStream::operator<<<char [24],(char *[24])0>(
           &v14,
           (const char (*)[24])"getMainWorldScene fails");
    if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
      __asan_report_load8(&context->player);
    operator<<(v7, context->player);
    common::milog::MiLogStream::~MiLogStream(&v14);
    v6 = -1;
    goto LABEL_18;
  }
  v8 = std::vector<std::string>::operator[](param_vec, 0LL);
  if ( std::operator==<char>(v8, "CLEAR") )
  {
    v9 = std::__shared_ptr_access<PlayerWorldScene,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<PlayerWorldScene,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 64));
    PlayerWorldScene::setCurSpringVolume(v9, 0.0);
LABEL_17:
    v6 = 0;
    goto LABEL_18;
  }
  *(_DWORD *)(v3 + 48) = 0;
  v10 = std::vector<std::string>::operator[](param_vec, 0LL);
  if ( !common::tools::StringUtils::strToNum<float>(v10, (float *)(v3 + 48), 1) )
  {
    v12 = std::__shared_ptr_access<PlayerWorldScene,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<PlayerWorldScene,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 64));
    PlayerWorldScene::changeCurSpringVolume(v12, *(float *)(v3 + 48), 1);
    goto LABEL_17;
  }
  common::milog::MiLogStream::create(
    &v14,
    &common::milog::MiLogDefault::default_log_obj_,
    3u,
    "./src/player/gm/player_gm_comp.cpp",
    "procSpring",
    5415);
  v11 = common::milog::MiLogStream::operator<<<char [15],(char *[15])0>(&v14, (const char (*)[15])"invalid param:");
  common::milog::MiLogStream::operator<<<std::string>(v11, param_vec);
  common::milog::MiLogStream::~MiLogStream(&v14);
  v6 = -1;
LABEL_18:
  std::shared_ptr<PlayerWorldScene>::~shared_ptr((std::shared_ptr<PlayerWorldScene> *const)(v3 + 64));
LABEL_19:
  result = v6;
  if ( v15 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8008) = 0;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8008) = -168430091;
  }
  return result;
};

// Line 5423: range 0000000017D750C4-0000000017D75166
void __cdecl procSkillRegister::procSkillRegister(procSkillRegister *const this)
{
  std::function<int(GmContext&,const std::vector<std::string>&,std::string&)> *v1; // rax
  std::allocator<char> __a; // [rsp+1Fh] [rbp-31h] BYREF
  std::string __k; // [rsp+20h] [rbp-30h] BYREF

  std::allocator<char>::allocator(&__a);
  std::string::basic_string<std::allocator<char>>(&__k, "SKILL", &__a);
  v1 = std::unordered_map<std::string,std::function<int ()(GmContext &,std::vector<std::string> const&,std::string&)>>::operator[](
         &GmUtils::op_func_map[abi:cxx11],
         &__k);
  std::function<int ()(GmContext &,std::vector<std::string> const&,std::string&)>::operator=<int (&)(GmContext &,std::vector<std::string> const&,std::string&)>(
    v1,
    (int (*)(GmContext *, const std::vector<std::string> *, std::string *))procSkill);
  std::string::~string(&__k);
  std::allocator<char>::~allocator(&__a);
};

// Line 5424: range 0000000017BED554-0000000017BEE38B
int32_t __cdecl procSkill(GmContext *context, const std::vector<std::string> *param_vec, std::string *ret_msg)
{
  unsigned __int64 v3; // r13
  __int64 v4; // rax
  _DWORD *v5; // r14
  int32_t v6; // r12d
  const std::string *v7; // rax
  const std::string *v8; // rax
  common::milog::MiLogStream *v9; // rdx
  Avatar *v10; // rax
  uint32_t v11; // edx
  common::milog::MiLogStream *v12; // rax
  common::milog::MiLogStream *v13; // rcx
  const std::string *v14; // rax
  const std::string *v15; // rax
  const std::string *v16; // rax
  const std::string *v18; // rax
  common::milog::MiLogStream *v19; // rdx
  TalentComp *TalentComp; // rdi
  uint32_t v21; // edx
  const std::string *v22; // rax
  const std::string *v23; // rax
  const std::string *v24; // rax
  const std::string *v26; // rax
  common::milog::MiLogStream *v27; // rdx
  TalentComp *p_player; // rdi
  uint32_t v29; // edx
  const std::string *v30; // rax
  const std::string *v31; // rax
  const std::string *v32; // rax
  const std::string *v34; // rax
  common::milog::MiLogStream *v35; // rdx
  TalentComp *v36; // rdi
  uint32_t v37; // edx
  const std::string *v38; // rax
  const std::string *v39; // rax
  const std::string *v40; // rax
  const std::string *v42; // rax
  common::milog::MiLogStream *v43; // rdx
  TalentComp *v44; // rdi
  uint32_t v45; // edx
  const std::string *v46; // rax
  const std::string *v47; // rax
  common::milog::MiLogStream *v48; // rdx
  uint32_t SkillComp; // eax
  Skill *v50; // rax
  common::tools::StringStream<common::tools::FixedBuffer<4096> > *v51; // rax
  common::tools::StringStream<common::tools::FixedBuffer<4096> > *v52; // rax
  common::tools::StringStream<common::tools::FixedBuffer<4096> > *v53; // r12
  std::__shared_ptr_access<Skill,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v54; // rax
  unsigned __int64 CdStartTime; // rax
  common::tools::StringStream<common::tools::FixedBuffer<4096> > *v56; // rax
  common::tools::StringStream<common::tools::FixedBuffer<4096> > *v57; // r12
  std::__shared_ptr_access<Skill,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v58; // rax
  unsigned int PassCdTime; // eax
  common::tools::StringStream<common::tools::FixedBuffer<4096> > *v60; // rax
  common::milog::MiLogStream *v61; // rdx
  int32_t result; // eax
  int32_t ret; // [rsp+24h] [rbp-DCh]
  const Avatar *avatar; // [rsp+28h] [rbp-D8h]
  common::milog::MiLogStream v67; // [rsp+30h] [rbp-D0h] BYREF
  char v68[176]; // [rsp+50h] [rbp-B0h] BYREF

  v3 = (unsigned __int64)v68;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_1(128LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "3 48 4 13 skill_id:5488 64 16 14 skill_ptr:5495 96 16 7 ss:5502";
  *(_QWORD *)(v3 + 16) = procSkill;
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = -234556943;
  v5[536862722] = -219021312;
  v5[536862723] = -202178560;
  if ( std::vector<std::string>::size(param_vec) > 1 )
  {
    if ( *(_BYTE *)(((unsigned __int64)&context->avatar >> 3) + 0x7FFF8000) )
      __asan_report_load8(&context->avatar);
    avatar = context->avatar;
    v7 = std::vector<std::string>::operator[](param_vec, 0LL);
    if ( std::operator==<char>(v7, "DEPOT") )
    {
      *(_DWORD *)(v3 + 48) = 0;
      v8 = std::vector<std::string>::operator[](param_vec, 1uLL);
      if ( common::tools::StringUtils::strToNum<unsigned int>(v8, (unsigned int *)(v3 + 48), 1) )
      {
        common::milog::MiLogStream::create(
          &v67,
          &common::milog::MiLogDefault::default_log_obj_,
          3u,
          "./src/player/gm/player_gm_comp.cpp",
          "procSkill",
          5436);
        v9 = common::milog::MiLogStream::operator<<<char [15],(char *[15])0>(&v67, (const char (*)[15])"invalid param:");
        common::milog::MiLogStream::operator<<<std::string>(v9, param_vec);
        common::milog::MiLogStream::~MiLogStream(&v67);
        v6 = -1;
      }
      else
      {
        if ( *(_BYTE *)(((unsigned __int64)&context->avatar >> 3) + 0x7FFF8000) )
          __asan_report_load8(&context->avatar);
        v10 = context->avatar;
        v11 = *(_DWORD *)(v3 + 48);
        if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
          __asan_report_load8(&context->player);
        ret = Avatar::changeSkillDepotId(v10, context->player, v11);
        if ( ret )
        {
          common::milog::MiLogStream::create(
            &v67,
            &common::milog::MiLogDefault::default_log_obj_,
            3u,
            "./src/player/gm/player_gm_comp.cpp",
            "procSkill",
            5442);
          v12 = common::milog::MiLogStream::operator<<<char [42],(char *[42])0>(
                  &v67,
                  (const char (*)[42])"changeSkillDepotId fails, skill_depot_id:");
          v13 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                  v12,
                  (const unsigned int *)(v3 + 48));
          if ( *(_BYTE *)(((unsigned __int64)&context->avatar >> 3) + 0x7FFF8000) )
            __asan_report_load8(&context->avatar);
          common::milog::MiLogStream::operator<<<Avatar,(Avatar*)0>(v13, context->avatar);
          common::milog::MiLogStream::~MiLogStream(&v67);
          v6 = ret;
        }
        else
        {
          v6 = 0;
        }
      }
    }
    else
    {
      v14 = std::vector<std::string>::operator[](param_vec, 0LL);
      if ( std::operator==<char>(v14, "NORMAL")
        || (v15 = std::vector<std::string>::operator[](param_vec, 0LL), std::operator==<char>(v15, "SKILL1"))
        || (v16 = std::vector<std::string>::operator[](param_vec, 0LL), std::operator==<char>(v16, "1")) )
      {
        *(_DWORD *)(v3 + 48) = 0;
        v18 = std::vector<std::string>::operator[](param_vec, 1uLL);
        if ( common::tools::StringUtils::strToNum<unsigned int>(v18, (unsigned int *)(v3 + 48), 1) )
        {
          common::milog::MiLogStream::create(
            &v67,
            &common::milog::MiLogDefault::default_log_obj_,
            3u,
            "./src/player/gm/player_gm_comp.cpp",
            "procSkill",
            5451);
          v19 = common::milog::MiLogStream::operator<<<char [15],(char *[15])0>(
                  &v67,
                  (const char (*)[15])"invalid param:");
          common::milog::MiLogStream::operator<<<std::string>(v19, param_vec);
          common::milog::MiLogStream::~MiLogStream(&v67);
          v6 = -1;
        }
        else
        {
          TalentComp = Avatar::getTalentComp(avatar);
          v21 = *(_DWORD *)(v3 + 48);
          if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
          {
            TalentComp = (TalentComp *)&context->player;
            __asan_report_load8(&context->player);
          }
          v6 = TalentComp::forceSetProudSkillLevelByGm(TalentComp, context->player, SKILL_NORMAL, v21);
        }
      }
      else
      {
        v22 = std::vector<std::string>::operator[](param_vec, 0LL);
        if ( std::operator==<char>(v22, "SMALL")
          || (v23 = std::vector<std::string>::operator[](param_vec, 0LL), std::operator==<char>(v23, "SKILL2"))
          || (v24 = std::vector<std::string>::operator[](param_vec, 0LL), std::operator==<char>(v24, "2")) )
        {
          *(_DWORD *)(v3 + 48) = 0;
          v26 = std::vector<std::string>::operator[](param_vec, 1uLL);
          if ( common::tools::StringUtils::strToNum<unsigned int>(v26, (unsigned int *)(v3 + 48), 1) )
          {
            common::milog::MiLogStream::create(
              &v67,
              &common::milog::MiLogDefault::default_log_obj_,
              3u,
              "./src/player/gm/player_gm_comp.cpp",
              "procSkill",
              5461);
            v27 = common::milog::MiLogStream::operator<<<char [15],(char *[15])0>(
                    &v67,
                    (const char (*)[15])"invalid param:");
            common::milog::MiLogStream::operator<<<std::string>(v27, param_vec);
            common::milog::MiLogStream::~MiLogStream(&v67);
            v6 = -1;
          }
          else
          {
            p_player = Avatar::getTalentComp(avatar);
            v29 = *(_DWORD *)(v3 + 48);
            if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
            {
              p_player = (TalentComp *)&context->player;
              __asan_report_load8(&context->player);
            }
            v6 = TalentComp::forceSetProudSkillLevelByGm(p_player, context->player, SKILL_SMALL, v29);
          }
        }
        else
        {
          v30 = std::vector<std::string>::operator[](param_vec, 0LL);
          if ( std::operator==<char>(v30, "ENERGY")
            || (v31 = std::vector<std::string>::operator[](param_vec, 0LL), std::operator==<char>(v31, "SKILL3"))
            || (v32 = std::vector<std::string>::operator[](param_vec, 0LL), std::operator==<char>(v32, "3")) )
          {
            *(_DWORD *)(v3 + 48) = 0;
            v34 = std::vector<std::string>::operator[](param_vec, 1uLL);
            if ( common::tools::StringUtils::strToNum<unsigned int>(v34, (unsigned int *)(v3 + 48), 1) )
            {
              common::milog::MiLogStream::create(
                &v67,
                &common::milog::MiLogDefault::default_log_obj_,
                3u,
                "./src/player/gm/player_gm_comp.cpp",
                "procSkill",
                5471);
              v35 = common::milog::MiLogStream::operator<<<char [15],(char *[15])0>(
                      &v67,
                      (const char (*)[15])"invalid param:");
              common::milog::MiLogStream::operator<<<std::string>(v35, param_vec);
              common::milog::MiLogStream::~MiLogStream(&v67);
              v6 = -1;
            }
            else
            {
              v36 = Avatar::getTalentComp(avatar);
              v37 = *(_DWORD *)(v3 + 48);
              if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
              {
                v36 = (TalentComp *)&context->player;
                __asan_report_load8(&context->player);
              }
              v6 = TalentComp::forceSetProudSkillLevelByGm(v36, context->player, SKILL_ENERGY, v37);
            }
          }
          else
          {
            v38 = std::vector<std::string>::operator[](param_vec, 0LL);
            if ( std::operator==<char>(v38, _f.gap0)
              || (v39 = std::vector<std::string>::operator[](param_vec, 0LL), std::operator==<char>(v39, "SKILL4"))
              || (v40 = std::vector<std::string>::operator[](param_vec, 0LL), std::operator==<char>(v40, "4")) )
            {
              *(_DWORD *)(v3 + 48) = 0;
              v42 = std::vector<std::string>::operator[](param_vec, 1uLL);
              if ( common::tools::StringUtils::strToNum<unsigned int>(v42, (unsigned int *)(v3 + 48), 1) )
              {
                common::milog::MiLogStream::create(
                  &v67,
                  &common::milog::MiLogDefault::default_log_obj_,
                  3u,
                  "./src/player/gm/player_gm_comp.cpp",
                  "procSkill",
                  5481);
                v43 = common::milog::MiLogStream::operator<<<char [15],(char *[15])0>(
                        &v67,
                        (const char (*)[15])"invalid param:");
                common::milog::MiLogStream::operator<<<std::string>(v43, param_vec);
                common::milog::MiLogStream::~MiLogStream(&v67);
                v6 = -1;
              }
              else
              {
                v44 = Avatar::getTalentComp(avatar);
                v45 = *(_DWORD *)(v3 + 48);
                if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
                {
                  v44 = (TalentComp *)&context->player;
                  __asan_report_load8(&context->player);
                }
                v6 = TalentComp::forceSetProudSkillLevelByGm(v44, context->player, SKILL_NONE, v45);
              }
            }
            else
            {
              v46 = std::vector<std::string>::operator[](param_vec, 0LL);
              if ( std::operator==<char>(v46, "PRINT_CD") )
              {
                *(_DWORD *)(v3 + 48) = 0;
                v47 = std::vector<std::string>::operator[](param_vec, 1uLL);
                if ( common::tools::StringUtils::strToNum<unsigned int>(v47, (unsigned int *)(v3 + 48), 1) )
                {
                  common::milog::MiLogStream::create(
                    &v67,
                    &common::milog::MiLogDefault::default_log_obj_,
                    3u,
                    "./src/player/gm/player_gm_comp.cpp",
                    "procSkill",
                    5492);
                  v48 = common::milog::MiLogStream::operator<<<char [15],(char *[15])0>(
                          &v67,
                          (const char (*)[15])"invalid param:");
                  common::milog::MiLogStream::operator<<<std::string>(v48, param_vec);
                  common::milog::MiLogStream::~MiLogStream(&v67);
                  v6 = -1;
                }
                else
                {
                  SkillComp = (unsigned int)Avatar::getSkillComp(avatar);
                  SkillComp::findSkill((const SkillComp *const)(v3 + 64), SkillComp);
                  if ( std::operator==<Skill>((const std::shared_ptr<Skill> *)(v3 + 64), 0LL) )
                  {
                    std::string::operator=(ret_msg, "skill not exist");
                    v6 = -1;
                  }
                  else
                  {
                    v50 = std::__shared_ptr_access<Skill,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Skill,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 64));
                    Skill::updateCdTime(v50);
                    common::tools::StringStream<common::tools::FixedBuffer<4096>>::StringStream((common::tools::StringStream<common::tools::FixedBuffer<4096> > *const)(v3 + 96));
                    v51 = common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(
                            (common::tools::StringStream<common::tools::FixedBuffer<4096> > *const)(v3 + 96),
                            "skill: ");
                    v52 = common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(
                            v51,
                            *(_DWORD *)(v3 + 48));
                    v53 = common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(v52, " start_time");
                    v54 = std::__shared_ptr_access<Skill,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Skill,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 64));
                    CdStartTime = Skill::getCdStartTime(v54);
                    v56 = common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(v53, CdStartTime);
                    v57 = common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(
                            v56,
                            "ms,pass_time:");
                    v58 = std::__shared_ptr_access<Skill,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Skill,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 64));
                    PassCdTime = Skill::getPassCdTime(v58);
                    v60 = common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(v57, PassCdTime);
                    common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(v60, "ms.");
                    common::tools::StringStream<common::tools::FixedBuffer<4096>>::str[abi:cxx11](
                      (std::string *)&v67,
                      (common::tools::StringStream<common::tools::FixedBuffer<4096> > *const)(v3 + 96));
                    std::string::operator=(ret_msg, &v67);
                    std::string::~string(&v67);
                    v6 = 0;
                    common::tools::StringStream<common::tools::FixedBuffer<4096>>::~StringStream((common::tools::StringStream<common::tools::FixedBuffer<4096> > *const)(v3 + 96));
                  }
                  std::shared_ptr<Skill>::~shared_ptr((std::shared_ptr<Skill> *const)(v3 + 64));
                }
              }
              else
              {
                common::milog::MiLogStream::create(
                  &v67,
                  &common::milog::MiLogDefault::default_log_obj_,
                  3u,
                  "./src/player/gm/player_gm_comp.cpp",
                  "procSkill",
                  5509);
                v61 = common::milog::MiLogStream::operator<<<char [15],(char *[15])0>(
                        &v67,
                        (const char (*)[15])"unknown param:");
                common::milog::MiLogStream::operator<<<std::string>(v61, param_vec);
                common::milog::MiLogStream::~MiLogStream(&v67);
                v6 = -1;
              }
            }
          }
        }
      }
    }
  }
  else
  {
    common::milog::MiLogStream::create(
      &v67,
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/player/gm/player_gm_comp.cpp",
      "procSkill",
      5427);
    common::milog::MiLogStream::operator<<<char [17],(char *[17])0>(&v67, (const char (*)[17])"param not enough");
    common::milog::MiLogStream::~MiLogStream(&v67);
    v6 = -1;
  }
  result = v6;
  if ( v68 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 5515: range 0000000017D75168-0000000017D7520A
void __cdecl procPlayerRegister::procPlayerRegister(procPlayerRegister *const this)
{
  std::function<int(GmContext&,const std::vector<std::string>&,std::string&)> *v1; // rax
  std::allocator<char> __a; // [rsp+1Fh] [rbp-31h] BYREF
  std::string __k; // [rsp+20h] [rbp-30h] BYREF

  std::allocator<char>::allocator(&__a);
  std::string::basic_string<std::allocator<char>>(&__k, "PLAYER", &__a);
  v1 = std::unordered_map<std::string,std::function<int ()(GmContext &,std::vector<std::string> const&,std::string&)>>::operator[](
         &GmUtils::op_func_map[abi:cxx11],
         &__k);
  std::function<int ()(GmContext &,std::vector<std::string> const&,std::string&)>::operator=<int (&)(GmContext &,std::vector<std::string> const&,std::string&)>(
    v1,
    (int (*)(GmContext *, const std::vector<std::string> *, std::string *))procPlayer);
  std::string::~string(&__k);
  std::allocator<char>::~allocator(&__a);
};

// Line 5516: range 0000000017BEE38C-0000000017BF0727
int32_t __cdecl procPlayer(GmContext *context, const std::vector<std::string> *param_vec, std::string *ret_msg)
{
  int32_t v3; // r13d
  unsigned __int64 v4; // r14
  __int64 v5; // rax
  _DWORD *v6; // r12
  const std::string *v7; // rax
  const std::string *v8; // rax
  common::milog::MiLogStream *v9; // rdx
  PlayerAvatarComp *AvatarComp; // rax
  common::milog::MiLogStream *v11; // rax
  const std::string *v12; // rax
  const std::string *v13; // rax
  common::milog::MiLogStream *v14; // rdx
  PlayerBasicComp *BasicComp; // rax
  const std::string *v16; // rax
  const std::string *v17; // rax
  common::milog::MiLogStream *v18; // rdx
  PlayerBasicComp *v19; // rax
  const std::string *v20; // rax
  common::milog::MiLogStream *v21; // rdx
  PlayerBasicComp *v22; // rax
  const std::string *v23; // rax
  common::milog::MiLogStream *v24; // rdx
  const std::string *v25; // rax
  common::milog::MiLogStream *v26; // rdx
  PlayerBasicComp *v27; // rax
  const std::string *v28; // rax
  common::milog::MiLogStream *v29; // rdx
  const std::string *v30; // rax
  common::milog::MiLogStream *v31; // rdx
  PlayerBasicComp *v32; // r13
  const std::string *v33; // rax
  common::milog::MiLogStream *v34; // rdx
  const std::string *v35; // rax
  common::milog::MiLogStream *v36; // rdx
  PlayerMpComp *MpComp; // rax
  const std::string *v38; // rax
  const std::string *v39; // rax
  common::milog::MiLogStream *v40; // rdx
  common::milog::MiLogStream *v41; // rax
  const std::string *v42; // rax
  const std::string *v43; // rax
  common::milog::MiLogStream *v44; // rdx
  int v45; // r15d
  common::milog::MiLogStream *v46; // rcx
  common::minet::Packet *v47; // r15
  uint32_t Uid; // eax
  GameserverService *v49; // r15
  common::minet::PacketPtr v50; // rdi
  const std::string *v51; // rax
  common::milog::MiLogStream *v52; // rdx
  common::milog::MiLogStream *v53; // rax
  const std::string *v54; // rax
  const std::string *v55; // rax
  common::milog::MiLogStream *v56; // rdx
  int v57; // r15d
  common::milog::MiLogStream *v58; // rcx
  common::minet::Packet *v59; // r15
  uint32_t v60; // eax
  GameserverService *v61; // r15
  common::minet::PacketPtr v62; // rdi
  const std::string *v63; // rax
  common::milog::MiLogStream *v64; // rdx
  const std::string *v65; // rax
  common::milog::MiLogStream *v66; // rdx
  std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v67; // rax
  common::milog::MiLogStream *v68; // rax
  PlayerBasicComp *v69; // rax
  const std::string *v70; // rax
  common::milog::MiLogStream *v71; // rdx
  const std::string *v72; // rax
  common::milog::MiLogStream *v73; // rdx
  std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v74; // rax
  common::milog::MiLogStream *v75; // rax
  PlayerSocialComp *SocialComp; // rax
  int32_t result; // eax
  unsigned int submit_limit_0; // [rsp+24h] [rbp-17Ch]
  unsigned int submit_limit; // [rsp+28h] [rbp-178h]
  int32_t ret; // [rsp+2Ch] [rbp-174h]
  proto::ReadNicknameAuditReq proto; // [rsp+30h] [rbp-170h] BYREF
  common::milog::MiLogStream v82; // [rsp+50h] [rbp-150h] BYREF
  char v83[304]; // [rsp+70h] [rbp-130h] BYREF

  v4 = (unsigned __int64)v83;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v5 = __asan_stack_malloc_2(256LL);
    if ( v5 )
      v4 = v5;
  }
  *(_QWORD *)v4 = 1102416563LL;
  *(_QWORD *)(v4 + 8) = "6 48 1 16 is_set_read:5704 64 4 14 game_time:5580 80 4 24 remain_submit_count:5760 96 16 15 pack"
                        "et_ptr:5705 128 24 13 read_req:5716 192 32 8 req:5702";
  *(_QWORD *)(v4 + 16) = procPlayer;
  v6 = (_DWORD *)(v4 >> 3);
  v6[536862720] = -235802127;
  v6[536862721] = -234753551;
  v6[536862722] = -234556924;
  v6[536862723] = -219021312;
  v6[536862724] = -234881024;
  v6[536862725] = -218959118;
  v6[536862727] = -202116109;
  if ( std::vector<std::string>::empty(param_vec) )
  {
    common::milog::MiLogStream::create(
      &v82,
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/player/gm/player_gm_comp.cpp",
      "procPlayer",
      5519);
    common::milog::MiLogStream::operator<<<char [17],(char *[17])0>(&v82, (const char (*)[17])"param not enough");
    common::milog::MiLogStream::~MiLogStream(&v82);
    v3 = -1;
    goto LABEL_132;
  }
  v7 = std::vector<std::string>::operator[](param_vec, 0LL);
  if ( std::operator==<char>(v7, "FLYABLE") )
  {
    if ( std::vector<std::string>::size(param_vec) <= 1 )
    {
      common::milog::MiLogStream::create(
        &v82,
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/player/gm/player_gm_comp.cpp",
        "procPlayer",
        5526);
      common::milog::MiLogStream::operator<<<char [17],(char *[17])0>(&v82, (const char (*)[17])"param not enough");
      common::milog::MiLogStream::~MiLogStream(&v82);
      v3 = -1;
      goto LABEL_132;
    }
    *(_BYTE *)(v4 + 48) = 0;
    v8 = std::vector<std::string>::operator[](param_vec, 1uLL);
    if ( common::tools::StringUtils::strToNum<bool>(v8, (bool *)(v4 + 48), 1) )
    {
      common::milog::MiLogStream::create(
        &v82,
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/player/gm/player_gm_comp.cpp",
        "procPlayer",
        5532);
      v9 = common::milog::MiLogStream::operator<<<char [15],(char *[15])0>(&v82, (const char (*)[15])"invalid param:");
      common::milog::MiLogStream::operator<<<std::string>(v9, param_vec);
      common::milog::MiLogStream::~MiLogStream(&v82);
      v3 = -1;
      goto LABEL_132;
    }
    if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
      __asan_report_load8(&context->player);
    AvatarComp = Player::getAvatarComp(context->player);
    ret = PlayerAvatarComp::setIsFlyable(AvatarComp, *(_BYTE *)(v4 + 48), 1);
    if ( ret )
    {
      common::milog::MiLogStream::create(
        &v82,
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/player/gm/player_gm_comp.cpp",
        "procPlayer",
        5538);
      v11 = common::milog::MiLogStream::operator<<<char [33],(char *[33])0>(
              &v82,
              (const char (*)[33])"setIsFlyable failed, is_flyable:");
      common::milog::MiLogStream::operator<<(v11, *(_BYTE *)(v4 + 48));
      common::milog::MiLogStream::~MiLogStream(&v82);
      v3 = ret;
      goto LABEL_132;
    }
    goto LABEL_131;
  }
  v12 = std::vector<std::string>::operator[](param_vec, 0LL);
  if ( std::operator==<char>(v12, "WEATHERLOCK") )
  {
    if ( std::vector<std::string>::size(param_vec) <= 1 )
    {
      common::milog::MiLogStream::create(
        &v82,
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/player/gm/player_gm_comp.cpp",
        "procPlayer",
        5546);
      common::milog::MiLogStream::operator<<<char [17],(char *[17])0>(&v82, (const char (*)[17])"param not enough");
      common::milog::MiLogStream::~MiLogStream(&v82);
      v3 = -1;
      goto LABEL_132;
    }
    *(_BYTE *)(v4 + 48) = 0;
    v13 = std::vector<std::string>::operator[](param_vec, 1uLL);
    if ( common::tools::StringUtils::strToNum<bool>(v13, (bool *)(v4 + 48), 1) )
    {
      common::milog::MiLogStream::create(
        &v82,
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/player/gm/player_gm_comp.cpp",
        "procPlayer",
        5552);
      v14 = common::milog::MiLogStream::operator<<<char [15],(char *[15])0>(&v82, (const char (*)[15])"invalid param:");
      common::milog::MiLogStream::operator<<<std::string>(v14, param_vec);
      common::milog::MiLogStream::~MiLogStream(&v82);
      v3 = -1;
      goto LABEL_132;
    }
    if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
      __asan_report_load8(&context->player);
    BasicComp = Player::getBasicComp(context->player);
    PlayerBasicComp::setIsWeatherLocked(BasicComp, *(_BYTE *)(v4 + 48), 1);
    goto LABEL_131;
  }
  v16 = std::vector<std::string>::operator[](param_vec, 0LL);
  if ( std::operator==<char>(v16, "TIMELOCK") )
  {
    if ( std::vector<std::string>::size(param_vec) <= 1 )
    {
      common::milog::MiLogStream::create(
        &v82,
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/player/gm/player_gm_comp.cpp",
        "procPlayer",
        5561);
      common::milog::MiLogStream::operator<<<char [17],(char *[17])0>(&v82, (const char (*)[17])"param not enough");
      common::milog::MiLogStream::~MiLogStream(&v82);
      v3 = -1;
      goto LABEL_132;
    }
    *(_BYTE *)(v4 + 48) = 0;
    v17 = std::vector<std::string>::operator[](param_vec, 1uLL);
    if ( common::tools::StringUtils::strToNum<bool>(v17, (bool *)(v4 + 48), 1) )
    {
      common::milog::MiLogStream::create(
        &v82,
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/player/gm/player_gm_comp.cpp",
        "procPlayer",
        5567);
      v18 = common::milog::MiLogStream::operator<<<char [15],(char *[15])0>(&v82, (const char (*)[15])"invalid param:");
      common::milog::MiLogStream::operator<<<std::string>(v18, param_vec);
      common::milog::MiLogStream::~MiLogStream(&v82);
      v3 = -1;
      goto LABEL_132;
    }
    if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
      __asan_report_load8(&context->player);
    v19 = Player::getBasicComp(context->player);
    PlayerBasicComp::setIsGameTimeLocked(v19, *(_BYTE *)(v4 + 48));
    goto LABEL_131;
  }
  v20 = std::vector<std::string>::operator[](param_vec, 0LL);
  if ( std::operator==<char>(v20, "CHANGE_GAME_TIME") )
  {
    if ( std::vector<std::string>::size(param_vec) > 2 )
    {
      *(_DWORD *)(v4 + 64) = 0;
      *(_DWORD *)(v4 + 80) = 0;
      if ( common::tools::StringUtils::strVecToNum<1u,unsigned int,unsigned int &>(
             param_vec,
             (unsigned int *)(v4 + 64),
             (unsigned int *)(v4 + 80),
             (unsigned int *)(v4 + 64)) )
      {
        common::milog::MiLogStream::create(
          &v82,
          &common::milog::MiLogDefault::default_log_obj_,
          3u,
          "./src/player/gm/player_gm_comp.cpp",
          "procPlayer",
          5584);
        v21 = common::milog::MiLogStream::operator<<<char [15],(char *[15])0>(
                &v82,
                (const char (*)[15])"invalid param:");
        common::milog::MiLogStream::operator<<<std::string>(v21, param_vec);
        common::milog::MiLogStream::~MiLogStream(&v82);
        v3 = -1;
      }
      else
      {
        if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
          __asan_report_load8(&context->player);
        v22 = Player::getBasicComp(context->player);
        v3 = PlayerBasicComp::forceSetGameTime(v22, *(_DWORD *)(v4 + 64), *(_DWORD *)(v4 + 80), 1);
      }
    }
    else
    {
      common::milog::MiLogStream::create(
        &v82,
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/player/gm/player_gm_comp.cpp",
        "procPlayer",
        5576);
      common::milog::MiLogStream::operator<<<char [17],(char *[17])0>(&v82, (const char (*)[17])"param not enough");
      common::milog::MiLogStream::~MiLogStream(&v82);
      v3 = -1;
    }
    goto LABEL_132;
  }
  v23 = std::vector<std::string>::operator[](param_vec, 0LL);
  if ( std::operator==<char>(v23, "LEVEL") )
  {
    if ( std::vector<std::string>::size(param_vec) <= 1 )
    {
      common::milog::MiLogStream::create(
        &v82,
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/player/gm/player_gm_comp.cpp",
        "procPlayer",
        5593);
      v24 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(&v82, (const char (*)[16])"invalid param: ");
      common::milog::MiLogStream::operator<<<std::string>(v24, param_vec);
      common::milog::MiLogStream::~MiLogStream(&v82);
      v3 = -1;
      goto LABEL_132;
    }
    *(_DWORD *)(v4 + 80) = 0;
    v25 = std::vector<std::string>::operator[](param_vec, 1uLL);
    if ( common::tools::StringUtils::strToNum<unsigned int>(v25, (unsigned int *)(v4 + 80), 1) )
    {
      common::milog::MiLogStream::create(
        &v82,
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/player/gm/player_gm_comp.cpp",
        "procPlayer",
        5599);
      v26 = common::milog::MiLogStream::operator<<<char [18],(char *[18])0>(
              &v82,
              (const char (*)[18])"strToNum failed: ");
      common::milog::MiLogStream::operator<<<std::string>(v26, param_vec);
      common::milog::MiLogStream::~MiLogStream(&v82);
      v3 = -1;
      goto LABEL_132;
    }
    if ( !*(_DWORD *)(v4 + 80) )
    {
      common::milog::MiLogStream::create(
        &v82,
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/player/gm/player_gm_comp.cpp",
        "procPlayer",
        5604);
      common::milog::MiLogStream::operator<<<char [13],(char *[13])0>(&v82, (const char (*)[13])"level is 0!!");
      common::milog::MiLogStream::~MiLogStream(&v82);
      v3 = -1;
      goto LABEL_132;
    }
    if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
      __asan_report_load8(&context->player);
    v27 = Player::getBasicComp(context->player);
    PlayerBasicComp::setLevelByGm(v27, *(_DWORD *)(v4 + 80), 1);
    goto LABEL_131;
  }
  v28 = std::vector<std::string>::operator[](param_vec, 0LL);
  if ( std::operator==<char>(v28, off_26351960) )
  {
    if ( std::vector<std::string>::size(param_vec) <= 1 )
    {
      common::milog::MiLogStream::create(
        &v82,
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/player/gm/player_gm_comp.cpp",
        "procPlayer",
        5613);
      v29 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(&v82, (const char (*)[16])"invalid param: ");
      common::milog::MiLogStream::operator<<<std::string>(v29, param_vec);
      common::milog::MiLogStream::~MiLogStream(&v82);
      v3 = -1;
      goto LABEL_132;
    }
    *(_DWORD *)(v4 + 80) = 0;
    v30 = std::vector<std::string>::operator[](param_vec, 1uLL);
    if ( common::tools::StringUtils::strToNum<unsigned int>(v30, (unsigned int *)(v4 + 80), 1) )
    {
      common::milog::MiLogStream::create(
        &v82,
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/player/gm/player_gm_comp.cpp",
        "procPlayer",
        5619);
      v31 = common::milog::MiLogStream::operator<<<char [18],(char *[18])0>(
              &v82,
              (const char (*)[18])"strToNum failed: ");
      common::milog::MiLogStream::operator<<<std::string>(v31, param_vec);
      common::milog::MiLogStream::~MiLogStream(&v82);
      v3 = -1;
      goto LABEL_132;
    }
    if ( !*(_DWORD *)(v4 + 80) )
    {
      common::milog::MiLogStream::create(
        &v82,
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/player/gm/player_gm_comp.cpp",
        "procPlayer",
        5624);
      common::milog::MiLogStream::operator<<<char [11],(char *[11])0>(&v82, (const char (*)[11])off_2635AD80);
      common::milog::MiLogStream::~MiLogStream(&v82);
      v3 = -1;
      goto LABEL_132;
    }
    if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
      __asan_report_load8(&context->player);
    v32 = Player::getBasicComp(context->player);
    ActionReason::ActionReason((ActionReason *const)(v4 + 128), ACTION_REASON_GM, ITEM_LIMIT_GM);
    PlayerBasicComp::addExp(v32, *(_DWORD *)(v4 + 80), (const ActionReason *)(v4 + 128), 1, 0LL);
    goto LABEL_131;
  }
  v33 = std::vector<std::string>::operator[](param_vec, 0LL);
  if ( std::operator==<char>(v33, "MP") )
  {
    if ( std::vector<std::string>::size(param_vec) <= 1 )
    {
      common::milog::MiLogStream::create(
        &v82,
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/player/gm/player_gm_comp.cpp",
        "procPlayer",
        5633);
      v34 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(&v82, (const char (*)[16])"invalid param: ");
      common::milog::MiLogStream::operator<<<std::string>(v34, param_vec);
      common::milog::MiLogStream::~MiLogStream(&v82);
      v3 = -1;
      goto LABEL_132;
    }
    *(_DWORD *)(v4 + 80) = 0;
    v35 = std::vector<std::string>::operator[](param_vec, 1uLL);
    if ( common::tools::StringUtils::strToNum<unsigned int>(v35, (unsigned int *)(v4 + 80), 1) )
    {
      common::milog::MiLogStream::create(
        &v82,
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/player/gm/player_gm_comp.cpp",
        "procPlayer",
        5639);
      v36 = common::milog::MiLogStream::operator<<<char [18],(char *[18])0>(
              &v82,
              (const char (*)[18])"strToNum failed: ");
      common::milog::MiLogStream::operator<<<std::string>(v36, param_vec);
      common::milog::MiLogStream::~MiLogStream(&v82);
      v3 = -1;
      goto LABEL_132;
    }
    if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
      __asan_report_load8(&context->player);
    MpComp = Player::getMpComp(context->player);
    PlayerMpComp::setMpSettingType(MpComp, *(proto::MpSettingType *)(v4 + 80), 1);
    goto LABEL_131;
  }
  v38 = std::vector<std::string>::operator[](param_vec, 0LL);
  if ( std::operator==<char>(v38, "SAVETODB") )
  {
    if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
      __asan_report_load8(&context->player);
    Player::saveToDb(context->player);
    goto LABEL_131;
  }
  v39 = std::vector<std::string>::operator[](param_vec, 0LL);
  if ( std::operator==<char>(v39, "NICKNAME") )
  {
    if ( std::vector<std::string>::size(param_vec) <= 1 )
    {
      common::milog::MiLogStream::create(
        &v82,
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/player/gm/player_gm_comp.cpp",
        "procPlayer",
        5652);
      v40 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(&v82, (const char (*)[16])"invalid param: ");
      common::milog::MiLogStream::operator<<<std::string>(v40, param_vec);
      common::milog::MiLogStream::~MiLogStream(&v82);
      v3 = -1;
      goto LABEL_132;
    }
    if ( std::vector<std::string>::size(&context->raw_param_vec) <= 1 )
    {
      common::milog::MiLogStream::create(
        &v82,
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/player/gm/player_gm_comp.cpp",
        "procPlayer",
        5657);
      v41 = common::milog::MiLogStream::operator<<<char [24],(char *[24])0>(
              &v82,
              (const char (*)[24])"invalid raw_param_vec: ");
      common::milog::MiLogStream::operator<<<std::string>(v41, &context->raw_param_vec);
      common::milog::MiLogStream::~MiLogStream(&v82);
      v3 = -1;
      goto LABEL_132;
    }
    std::shared_ptr<common::minet::Packet>::shared_ptr((std::shared_ptr<common::minet::Packet> *const)(v4 + 96), 0LL);
    proto::SetPlayerNameReq::SetPlayerNameReq((proto::SetPlayerNameReq *const)(v4 + 192));
    v42 = std::vector<std::string>::operator[](&context->raw_param_vec, 1uLL);
    proto::SetPlayerNameReq::set_nick_name((proto::SetPlayerNameReq *const)(v4 + 192), v42);
    *(_BYTE *)(v4 + 48) = 0;
    if ( std::vector<std::string>::size(param_vec) > 2
      && (v43 = std::vector<std::string>::operator[](param_vec, 2uLL),
          common::tools::StringUtils::strToNum<bool>(v43, (bool *)(v4 + 48), 1)) )
    {
      common::milog::MiLogStream::create(
        &v82,
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/player/gm/player_gm_comp.cpp",
        "procPlayer",
        5668);
      v44 = common::milog::MiLogStream::operator<<<char [30],(char *[30])0>(
              &v82,
              (const char (*)[30])"is_set_read strToNum failed: ");
      common::milog::MiLogStream::operator<<<std::string>(v44, param_vec);
      common::milog::MiLogStream::~MiLogStream(&v82);
      v3 = -1;
      v45 = 0;
    }
    else
    {
      if ( *(_BYTE *)(v4 + 48) )
      {
        proto::ReadNicknameAuditReq::ReadNicknameAuditReq((proto::ReadNicknameAuditReq *const)(v4 + 128));
        common::minet::PacketUtils::createPacket<proto::ReadNicknameAuditReq>(&proto);
        std::shared_ptr<common::minet::Packet>::operator=(
          (std::shared_ptr<common::minet::Packet> *const)(v4 + 96),
          (std::shared_ptr<common::minet::Packet> *)&proto);
        std::shared_ptr<common::minet::Packet>::~shared_ptr((std::shared_ptr<common::minet::Packet> *const)&proto);
        proto::ReadNicknameAuditReq::~ReadNicknameAuditReq((proto::ReadNicknameAuditReq *const)(v4 + 128));
      }
      else
      {
        common::minet::PacketUtils::createPacket<proto::SetPlayerNameReq>((const proto::SetPlayerNameReq *)&proto._cached_size_);
        std::shared_ptr<common::minet::Packet>::operator=(
          (std::shared_ptr<common::minet::Packet> *const)(v4 + 96),
          (std::shared_ptr<common::minet::Packet> *)&proto._cached_size_);
        std::shared_ptr<common::minet::Packet>::~shared_ptr((std::shared_ptr<common::minet::Packet> *const)&proto._cached_size_);
      }
      if ( std::operator==<common::minet::Packet>((const std::shared_ptr<common::minet::Packet> *)(v4 + 96), 0LL) )
      {
        common::milog::MiLogStream::create(
          &v82,
          &common::milog::MiLogDefault::default_log_obj_,
          3u,
          "./src/player/gm/player_gm_comp.cpp",
          "procPlayer",
          5683);
        v46 = common::milog::MiLogStream::operator<<<char [26],(char *[26])0>(
                &v82,
                (const char (*)[26])"createPacket failed, uid:");
        if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
          __asan_report_load8(&context->player);
        operator<<(v46, context->player);
        common::milog::MiLogStream::~MiLogStream(&v82);
        v3 = -1;
        v45 = 0;
      }
      else
      {
        v47 = std::__shared_ptr_access<common::minet::Packet,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<common::minet::Packet,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 96));
        if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
          __asan_report_load8(&context->player);
        Uid = Player::getUid(context->player);
        common::minet::Packet::setUserId(v47, Uid);
        v49 = ServiceBox::findService<GameserverService>();
        std::shared_ptr<common::minet::Packet>::shared_ptr(
          (std::shared_ptr<common::minet::Packet> *const)&proto._cached_size_,
          (const std::shared_ptr<common::minet::Packet> *)(v4 + 96));
        GameserverService::setPacketGameThreadIndex(v49, (common::minet::PacketPtr *)&proto._cached_size_);
        std::shared_ptr<common::minet::Packet>::~shared_ptr((std::shared_ptr<common::minet::Packet> *const)&proto._cached_size_);
        v50._M_refcount._M_pi = (std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)2> *)(v4 + 96);
        std::shared_ptr<common::minet::Packet>::shared_ptr(
          (std::shared_ptr<common::minet::Packet> *const)&proto._cached_size_,
          (const std::shared_ptr<common::minet::Packet> *)(v4 + 96));
        v50._M_ptr = (std::__shared_ptr<common::minet::Packet,(__gnu_cxx::_Lock_policy)2>::element_type *)&proto._cached_size_;
        ServiceBox::pushPacketToService(v50);
        std::shared_ptr<common::minet::Packet>::~shared_ptr((std::shared_ptr<common::minet::Packet> *const)&proto._cached_size_);
        v45 = 1;
      }
    }
    proto::SetPlayerNameReq::~SetPlayerNameReq((proto::SetPlayerNameReq *const)(v4 + 192));
    std::shared_ptr<common::minet::Packet>::~shared_ptr((std::shared_ptr<common::minet::Packet> *const)(v4 + 96));
    if ( v45 == 1 )
      goto LABEL_131;
  }
  else
  {
    v51 = std::vector<std::string>::operator[](param_vec, 0LL);
    if ( !std::operator==<char>(v51, "SIGNATURE") )
    {
      v63 = std::vector<std::string>::operator[](param_vec, 0LL);
      if ( std::operator==<char>(v63, "NICK_COUNT") )
      {
        if ( std::vector<std::string>::size(param_vec) <= 1 )
        {
          common::milog::MiLogStream::create(
            &v82,
            &common::milog::MiLogDefault::default_log_obj_,
            3u,
            "./src/player/gm/player_gm_comp.cpp",
            "procPlayer",
            5736);
          v64 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                  &v82,
                  (const char (*)[16])"invalid param: ");
          common::milog::MiLogStream::operator<<<std::string>(v64, param_vec);
          common::milog::MiLogStream::~MiLogStream(&v82);
          v3 = -1;
          goto LABEL_132;
        }
        *(_DWORD *)(v4 + 80) = 0;
        v65 = std::vector<std::string>::operator[](param_vec, 1uLL);
        if ( common::tools::StringUtils::strToNum<unsigned int>(v65, (unsigned int *)(v4 + 80), 1) )
        {
          common::milog::MiLogStream::create(
            &v82,
            &common::milog::MiLogDefault::default_log_obj_,
            3u,
            "./src/player/gm/player_gm_comp.cpp",
            "procPlayer",
            5742);
          v66 = common::milog::MiLogStream::operator<<<char [18],(char *[18])0>(
                  &v82,
                  (const char (*)[18])"strToNum failed: ");
          common::milog::MiLogStream::operator<<<std::string>(v66, param_vec);
          common::milog::MiLogStream::~MiLogStream(&v82);
          v3 = -1;
          goto LABEL_132;
        }
        ServiceBox::findService<GameserverService>();
        GameserverService::getConfig((GameserverService *const)&proto._cached_size_);
        v67 = std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false> *const)&proto._cached_size_);
        submit_limit = FeatureSwitchMgr::getMonthlySubmitNicknameLimit(&v67->feature_switch_mgr);
        std::shared_ptr<Config>::~shared_ptr((std::shared_ptr<Config> *const)&proto._cached_size_);
        if ( submit_limit < *(_DWORD *)(v4 + 80) )
        {
          common::milog::MiLogStream::create(
            &v82,
            &common::milog::MiLogDefault::default_log_obj_,
            3u,
            "./src/player/gm/player_gm_comp.cpp",
            "procPlayer",
            5748);
          v68 = common::milog::MiLogStream::operator<<<char [29],(char *[29])0>(
                  &v82,
                  (const char (*)[29])"invalid remain_submit_count:");
          common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v68, (const unsigned int *)(v4 + 80));
          common::milog::MiLogStream::~MiLogStream(&v82);
          v3 = -1;
          goto LABEL_132;
        }
        if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
          __asan_report_load8(&context->player);
        v69 = Player::getBasicComp(context->player);
        PlayerBasicComp::setNicknameSubmitCountByGm(v69, submit_limit - *(_DWORD *)(v4 + 80));
      }
      else
      {
        v70 = std::vector<std::string>::operator[](param_vec, 0LL);
        if ( std::operator==<char>(v70, "SIGN_COUNT") )
        {
          if ( std::vector<std::string>::size(param_vec) <= 1 )
          {
            common::milog::MiLogStream::create(
              &v82,
              &common::milog::MiLogDefault::default_log_obj_,
              3u,
              "./src/player/gm/player_gm_comp.cpp",
              "procPlayer",
              5757);
            v71 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                    &v82,
                    (const char (*)[16])"invalid param: ");
            common::milog::MiLogStream::operator<<<std::string>(v71, param_vec);
            common::milog::MiLogStream::~MiLogStream(&v82);
            v3 = -1;
            goto LABEL_132;
          }
          *(_DWORD *)(v4 + 80) = 0;
          v72 = std::vector<std::string>::operator[](param_vec, 1uLL);
          if ( common::tools::StringUtils::strToNum<unsigned int>(v72, (unsigned int *)(v4 + 80), 1) )
          {
            common::milog::MiLogStream::create(
              &v82,
              &common::milog::MiLogDefault::default_log_obj_,
              3u,
              "./src/player/gm/player_gm_comp.cpp",
              "procPlayer",
              5763);
            v73 = common::milog::MiLogStream::operator<<<char [18],(char *[18])0>(
                    &v82,
                    (const char (*)[18])"strToNum failed: ");
            common::milog::MiLogStream::operator<<<std::string>(v73, param_vec);
            common::milog::MiLogStream::~MiLogStream(&v82);
            v3 = -1;
            goto LABEL_132;
          }
          ServiceBox::findService<GameserverService>();
          GameserverService::getConfig((GameserverService *const)&proto._cached_size_);
          v74 = std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false> *const)&proto._cached_size_);
          submit_limit_0 = FeatureSwitchMgr::getMonthlySubmitSignatureLimit(&v74->feature_switch_mgr);
          std::shared_ptr<Config>::~shared_ptr((std::shared_ptr<Config> *const)&proto._cached_size_);
          if ( submit_limit_0 < *(_DWORD *)(v4 + 80) )
          {
            common::milog::MiLogStream::create(
              &v82,
              &common::milog::MiLogDefault::default_log_obj_,
              3u,
              "./src/player/gm/player_gm_comp.cpp",
              "procPlayer",
              5769);
            v75 = common::milog::MiLogStream::operator<<<char [29],(char *[29])0>(
                    &v82,
                    (const char (*)[29])"invalid remain_submit_count:");
            common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v75, (const unsigned int *)(v4 + 80));
            common::milog::MiLogStream::~MiLogStream(&v82);
            v3 = -1;
            goto LABEL_132;
          }
          if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
            __asan_report_load8(&context->player);
          SocialComp = Player::getSocialComp(context->player);
          PlayerSocialComp::setSignatureSubmitCountByGm(SocialComp, submit_limit_0 - *(_DWORD *)(v4 + 80));
        }
      }
      goto LABEL_131;
    }
    if ( std::vector<std::string>::size(param_vec) <= 1 )
    {
      common::milog::MiLogStream::create(
        &v82,
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/player/gm/player_gm_comp.cpp",
        "procPlayer",
        5694);
      v52 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(&v82, (const char (*)[16])"invalid param: ");
      common::milog::MiLogStream::operator<<<std::string>(v52, param_vec);
      common::milog::MiLogStream::~MiLogStream(&v82);
      v3 = -1;
      goto LABEL_132;
    }
    if ( std::vector<std::string>::size(&context->raw_param_vec) <= 1 )
    {
      common::milog::MiLogStream::create(
        &v82,
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/player/gm/player_gm_comp.cpp",
        "procPlayer",
        5699);
      v53 = common::milog::MiLogStream::operator<<<char [24],(char *[24])0>(
              &v82,
              (const char (*)[24])"invalid raw_param_vec: ");
      common::milog::MiLogStream::operator<<<std::string>(v53, &context->raw_param_vec);
      common::milog::MiLogStream::~MiLogStream(&v82);
      v3 = -1;
      goto LABEL_132;
    }
    proto::SetPlayerSignatureReq::SetPlayerSignatureReq((proto::SetPlayerSignatureReq *const)(v4 + 192));
    v54 = std::vector<std::string>::operator[](&context->raw_param_vec, 1uLL);
    proto::SetPlayerSignatureReq::set_signature((proto::SetPlayerSignatureReq *const)(v4 + 192), v54);
    *(_BYTE *)(v4 + 48) = 0;
    std::shared_ptr<common::minet::Packet>::shared_ptr((std::shared_ptr<common::minet::Packet> *const)(v4 + 96), 0LL);
    if ( std::vector<std::string>::size(param_vec) > 2
      && (v55 = std::vector<std::string>::operator[](param_vec, 2uLL),
          common::tools::StringUtils::strToNum<bool>(v55, (bool *)(v4 + 48), 1)) )
    {
      common::milog::MiLogStream::create(
        &v82,
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/player/gm/player_gm_comp.cpp",
        "procPlayer",
        5710);
      v56 = common::milog::MiLogStream::operator<<<char [30],(char *[30])0>(
              &v82,
              (const char (*)[30])"is_set_read strToNum failed: ");
      common::milog::MiLogStream::operator<<<std::string>(v56, param_vec);
      common::milog::MiLogStream::~MiLogStream(&v82);
      v3 = -1;
      v57 = 0;
    }
    else
    {
      if ( *(_BYTE *)(v4 + 48) )
      {
        proto::ReadSignatureAuditReq::ReadSignatureAuditReq((proto::ReadSignatureAuditReq *const)(v4 + 128));
        common::minet::PacketUtils::createPacket<proto::ReadSignatureAuditReq>((const proto::ReadSignatureAuditReq *)&proto);
        std::shared_ptr<common::minet::Packet>::operator=(
          (std::shared_ptr<common::minet::Packet> *const)(v4 + 96),
          (std::shared_ptr<common::minet::Packet> *)&proto);
        std::shared_ptr<common::minet::Packet>::~shared_ptr((std::shared_ptr<common::minet::Packet> *const)&proto);
        proto::ReadSignatureAuditReq::~ReadSignatureAuditReq((proto::ReadSignatureAuditReq *const)(v4 + 128));
      }
      else
      {
        common::minet::PacketUtils::createPacket<proto::SetPlayerSignatureReq>((const proto::SetPlayerSignatureReq *)&proto._cached_size_);
        std::shared_ptr<common::minet::Packet>::operator=(
          (std::shared_ptr<common::minet::Packet> *const)(v4 + 96),
          (std::shared_ptr<common::minet::Packet> *)&proto._cached_size_);
        std::shared_ptr<common::minet::Packet>::~shared_ptr((std::shared_ptr<common::minet::Packet> *const)&proto._cached_size_);
      }
      if ( std::operator==<common::minet::Packet>((const std::shared_ptr<common::minet::Packet> *)(v4 + 96), 0LL) )
      {
        common::milog::MiLogStream::create(
          &v82,
          &common::milog::MiLogDefault::default_log_obj_,
          3u,
          "./src/player/gm/player_gm_comp.cpp",
          "procPlayer",
          5725);
        v58 = common::milog::MiLogStream::operator<<<char [26],(char *[26])0>(
                &v82,
                (const char (*)[26])"createPacket failed, uid:");
        if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
          __asan_report_load8(&context->player);
        operator<<(v58, context->player);
        common::milog::MiLogStream::~MiLogStream(&v82);
        v3 = -1;
        v57 = 0;
      }
      else
      {
        v59 = std::__shared_ptr_access<common::minet::Packet,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<common::minet::Packet,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 96));
        if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
          __asan_report_load8(&context->player);
        v60 = Player::getUid(context->player);
        common::minet::Packet::setUserId(v59, v60);
        v61 = ServiceBox::findService<GameserverService>();
        std::shared_ptr<common::minet::Packet>::shared_ptr(
          (std::shared_ptr<common::minet::Packet> *const)&proto._cached_size_,
          (const std::shared_ptr<common::minet::Packet> *)(v4 + 96));
        GameserverService::setPacketGameThreadIndex(v61, (common::minet::PacketPtr *)&proto._cached_size_);
        std::shared_ptr<common::minet::Packet>::~shared_ptr((std::shared_ptr<common::minet::Packet> *const)&proto._cached_size_);
        v62._M_refcount._M_pi = (std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)2> *)(v4 + 96);
        std::shared_ptr<common::minet::Packet>::shared_ptr(
          (std::shared_ptr<common::minet::Packet> *const)&proto._cached_size_,
          (const std::shared_ptr<common::minet::Packet> *)(v4 + 96));
        v62._M_ptr = (std::__shared_ptr<common::minet::Packet,(__gnu_cxx::_Lock_policy)2>::element_type *)&proto._cached_size_;
        ServiceBox::pushPacketToService(v62);
        std::shared_ptr<common::minet::Packet>::~shared_ptr((std::shared_ptr<common::minet::Packet> *const)&proto._cached_size_);
        v57 = 1;
      }
    }
    std::shared_ptr<common::minet::Packet>::~shared_ptr((std::shared_ptr<common::minet::Packet> *const)(v4 + 96));
    proto::SetPlayerSignatureReq::~SetPlayerSignatureReq((proto::SetPlayerSignatureReq *const)(v4 + 192));
    if ( v57 == 1 )
LABEL_131:
      v3 = 0;
  }
LABEL_132:
  result = v3;
  if ( v83 == (char *)v4 )
  {
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8008) = 0LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8010) = 0LL;
    *(_DWORD *)((v4 >> 3) + 0x7FFF801C) = 0;
  }
  else
  {
    *(_QWORD *)v4 = 1172321806LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 5779: range 0000000017D7520C-0000000017D752AE
void __cdecl procBoredRegister::procBoredRegister(procBoredRegister *const this)
{
  std::function<int(GmContext&,const std::vector<std::string>&,std::string&)> *v1; // rax
  std::allocator<char> __a; // [rsp+1Fh] [rbp-31h] BYREF
  std::string __k; // [rsp+20h] [rbp-30h] BYREF

  std::allocator<char>::allocator(&__a);
  std::string::basic_string<std::allocator<char>>(&__k, "BORED", &__a);
  v1 = std::unordered_map<std::string,std::function<int ()(GmContext &,std::vector<std::string> const&,std::string&)>>::operator[](
         &GmUtils::op_func_map[abi:cxx11],
         &__k);
  std::function<int ()(GmContext &,std::vector<std::string> const&,std::string&)>::operator=<int (&)(GmContext &,std::vector<std::string> const&,std::string&)>(
    v1,
    (int (*)(GmContext *, const std::vector<std::string> *, std::string *))procBored);
  std::string::~string(&__k);
  std::allocator<char>::~allocator(&__a);
};

// Line 5780: range 0000000017BF0728-0000000017BF0EE5
int32_t __cdecl procBored(GmContext *context, const std::vector<std::string> *param_vec, std::string *ret_msg)
{
  unsigned __int64 v3; // rbx
  __int64 v4; // rax
  unsigned __int64 v5; // r13
  int32_t result; // eax
  const std::string *v7; // rax
  const std::string *v8; // rax
  common::milog::MiLogStream *v9; // rdx
  PlayerBoredComp *v10; // rax
  PlayerBoredComp *v11; // rax
  PlayerBoredComp *BoredComp; // rax
  PlayerBoredComp *v13; // rax
  const std::string *v14; // rax
  PlayerBoredComp *v15; // rax
  const std::string *v16; // rax
  const std::string *v17; // rax
  PlayerBoredComp *v18; // rax
  const std::string *v19; // rax
  const std::string *v20; // rax
  PlayerBoredComp *v21; // rax
  const std::string *v22; // rax
  const std::string *v23; // rax
  common::milog::MiLogStream v24; // [rsp+20h] [rbp-80h] BYREF
  char v25[96]; // [rsp+40h] [rbp-60h] BYREF

  v3 = (unsigned __int64)v25;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_0(64LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "1 32 4 10 value:5831";
  *(_QWORD *)(v3 + 16) = procBored;
  v5 = v3 >> 3;
  *(_DWORD *)(v5 + 2147450880) = -235802127;
  *(_DWORD *)(v5 + 2147450884) = -202116348;
  if ( std::vector<std::string>::empty(param_vec) )
  {
    common::milog::MiLogStream::create(
      &v24,
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/player/gm/player_gm_comp.cpp",
      "procBored",
      5783);
    common::milog::MiLogStream::operator<<<char [17],(char *[17])0>(&v24, (const char (*)[17])"param not enough");
    common::milog::MiLogStream::~MiLogStream(&v24);
    result = -1;
    goto LABEL_45;
  }
  v7 = std::vector<std::string>::operator[](param_vec, 0LL);
  if ( std::operator==<char>(v7, "ACTION") )
  {
    if ( std::vector<std::string>::size(param_vec) <= 1 )
    {
      if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
        __asan_report_load8(&context->player);
      BoredComp = Player::getBoredComp(context->player);
      PlayerBoredComp::clear(BoredComp);
      if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
        __asan_report_load8(&context->player);
      v13 = Player::getBoredComp(context->player);
      PlayerBoredComp::actionBegin(v13);
    }
    else
    {
      *(_DWORD *)(v3 + 32) = 0;
      v8 = std::vector<std::string>::operator[](param_vec, 1uLL);
      if ( common::tools::StringUtils::strToNum<unsigned int>(v8, (unsigned int *)(v3 + 32), 1) )
      {
        common::milog::MiLogStream::create(
          &v24,
          &common::milog::MiLogDefault::default_log_obj_,
          3u,
          "./src/player/gm/player_gm_comp.cpp",
          "procBored",
          5793);
        v9 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
               &v24,
               (const char (*)[16])"invalid param: ");
        common::milog::MiLogStream::operator<<<std::string>(v9, param_vec);
        common::milog::MiLogStream::~MiLogStream(&v24);
        result = -1;
        goto LABEL_45;
      }
      if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
        __asan_report_load8(&context->player);
      v10 = Player::getBoredComp(context->player);
      PlayerBoredComp::clear(v10);
      if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
        __asan_report_load8(&context->player);
      v11 = Player::getBoredComp(context->player);
      PlayerBoredComp::executeAction(v11, *(unsigned int *)(v3 + 32));
    }
  }
  else
  {
    v14 = std::vector<std::string>::operator[](param_vec, 0LL);
    if ( std::operator==<char>(v14, "CLEAR") )
    {
      if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
        __asan_report_load8(&context->player);
      v15 = Player::getBoredComp(context->player);
      PlayerBoredComp::clear(v15);
    }
    else
    {
      v16 = std::vector<std::string>::operator[](param_vec, 0LL);
      if ( std::operator==<char>(v16, off_26356D00) )
      {
        if ( std::vector<std::string>::size(param_vec) <= 1 )
        {
          common::milog::MiLogStream::create(
            &v24,
            &common::milog::MiLogDefault::default_log_obj_,
            3u,
            "./src/player/gm/player_gm_comp.cpp",
            "procBored",
            5813);
          common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(&v24, (const char (*)[16])"BORED ADD VALUE");
          common::milog::MiLogStream::~MiLogStream(&v24);
          result = -1;
          goto LABEL_45;
        }
        *(_DWORD *)(v3 + 32) = 0;
        v17 = std::vector<std::string>::operator[](param_vec, 1uLL);
        if ( common::tools::StringUtils::strToNum<unsigned int>(v17, (unsigned int *)(v3 + 32), 1) )
        {
          common::milog::MiLogStream::create(
            &v24,
            &common::milog::MiLogDefault::default_log_obj_,
            3u,
            "./src/player/gm/player_gm_comp.cpp",
            "procBored",
            5819);
          common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(&v24, (const char (*)[16])"BORED ADD VALUE");
          common::milog::MiLogStream::~MiLogStream(&v24);
          result = -1;
          goto LABEL_45;
        }
        if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
          __asan_report_load8(&context->player);
        v18 = Player::getBoredComp(context->player);
        PlayerBoredComp::addBoredGm(v18, *(_DWORD *)(v3 + 32));
      }
      else
      {
        v19 = std::vector<std::string>::operator[](param_vec, 0LL);
        if ( std::operator==<char>(v19, off_26352320) )
        {
          if ( std::vector<std::string>::size(param_vec) <= 1 )
          {
            common::milog::MiLogStream::create(
              &v24,
              &common::milog::MiLogDefault::default_log_obj_,
              3u,
              "./src/player/gm/player_gm_comp.cpp",
              "procBored",
              5828);
            common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(&v24, (const char (*)[16])"BORED SET VALUE");
            common::milog::MiLogStream::~MiLogStream(&v24);
            result = -1;
            goto LABEL_45;
          }
          *(_DWORD *)(v3 + 32) = 0;
          v20 = std::vector<std::string>::operator[](param_vec, 1uLL);
          if ( common::tools::StringUtils::strToNum<unsigned int>(v20, (unsigned int *)(v3 + 32), 1) )
          {
            common::milog::MiLogStream::create(
              &v24,
              &common::milog::MiLogDefault::default_log_obj_,
              3u,
              "./src/player/gm/player_gm_comp.cpp",
              "procBored",
              5834);
            common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(&v24, (const char (*)[16])"BORED SET VALUE");
            common::milog::MiLogStream::~MiLogStream(&v24);
            result = -1;
            goto LABEL_45;
          }
          if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
            __asan_report_load8(&context->player);
          v21 = Player::getBoredComp(context->player);
          PlayerBoredComp::setBoredGm(v21, *(_DWORD *)(v3 + 32));
        }
        else
        {
          v22 = std::vector<std::string>::operator[](param_vec, 0LL);
          if ( std::operator==<char>(v22, "OPEN") )
          {
            PlayerGmComp::setGlobalOpenBored(1);
          }
          else
          {
            v23 = std::vector<std::string>::operator[](param_vec, 0LL);
            if ( std::operator==<char>(v23, "CLOSE") )
              PlayerGmComp::setGlobalOpenBored(0);
          }
        }
      }
    }
  }
  result = 0;
LABEL_45:
  if ( v25 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 5850: range 0000000017D752B0-0000000017D75352
void __cdecl showMcoinRegister::showMcoinRegister(showMcoinRegister *const this)
{
  std::function<int(GmContext&,const std::vector<std::string>&,std::string&)> *v1; // rax
  std::allocator<char> __a; // [rsp+1Fh] [rbp-31h] BYREF
  std::string __k; // [rsp+20h] [rbp-30h] BYREF

  std::allocator<char>::allocator(&__a);
  std::string::basic_string<std::allocator<char>>(&__k, "SHOW_MCOIN", &__a);
  v1 = std::unordered_map<std::string,std::function<int ()(GmContext &,std::vector<std::string> const&,std::string&)>>::operator[](
         &GmUtils::op_func_map[abi:cxx11],
         &__k);
  std::function<int ()(GmContext &,std::vector<std::string> const&,std::string&)>::operator=<int (&)(GmContext &,std::vector<std::string> const&,std::string&)>(
    v1,
    (int (*)(GmContext *, const std::vector<std::string> *, std::string *))showMcoin);
  std::string::~string(&__k);
  std::allocator<char>::~allocator(&__a);
};

// Line 5851: range 0000000017BF0EE6-0000000017BF11E1
int32_t __cdecl showMcoin(GmContext *context, const std::vector<std::string> *param_vec, std::string *ret_msg)
{
  unsigned __int64 v3; // rbx
  __int64 v4; // rax
  unsigned __int64 v5; // r12
  common::tools::StringStream<common::tools::FixedBuffer<4096> > *v6; // r14
  PlayerItemComp *ItemComp; // r15
  uint32_t PCMPlatformType; // eax
  unsigned int Mcoin; // eax
  common::tools::StringStream<common::tools::FixedBuffer<4096> > *v10; // rax
  common::tools::StringStream<common::tools::FixedBuffer<4096> > *v11; // r14
  PlayerItemComp *v12; // r15
  uint32_t PsnPlatformType; // eax
  unsigned int v14; // eax
  common::tools::StringStream<common::tools::FixedBuffer<4096> > *v15; // rax
  common::tools::StringStream<common::tools::FixedBuffer<4096> > *v16; // r14
  PlayerItemComp *v17; // r15
  uint32_t v18; // eax
  unsigned int WaitSubMcoin; // eax
  common::tools::StringStream<common::tools::FixedBuffer<4096> > *v20; // rax
  common::tools::StringStream<common::tools::FixedBuffer<4096> > *v21; // r14
  PlayerItemComp *v22; // r15
  uint32_t v23; // eax
  unsigned int v24; // eax
  int32_t result; // eax
  std::string v27; // [rsp+20h] [rbp-90h] BYREF
  char v28[112]; // [rsp+40h] [rbp-70h] BYREF

  v3 = (unsigned __int64)v28;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_0(64LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "1 32 16 8 oss:5852";
  *(_QWORD *)(v3 + 16) = showMcoin;
  v5 = v3 >> 3;
  *(_DWORD *)(v5 + 2147450880) = -235802127;
  *(_DWORD *)(v5 + 2147450884) = -202178560;
  common::tools::StringStream<common::tools::FixedBuffer<4096>>::StringStream((common::tools::StringStream<common::tools::FixedBuffer<4096> > *const)(v3 + 32));
  v6 = common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(
         (common::tools::StringStream<common::tools::FixedBuffer<4096> > *const)(v3 + 32),
         "pc mcoin:");
  if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
    __asan_report_load8(&context->player);
  ItemComp = Player::getItemComp(context->player);
  PCMPlatformType = TxtConfigMgr::getPCMPlatformType();
  Mcoin = PlayerItemComp::getMcoin(ItemComp, PCMPlatformType);
  v10 = common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(v6, Mcoin);
  v11 = common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(v10, " psn mcoin:");
  if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
    __asan_report_load8(&context->player);
  v12 = Player::getItemComp(context->player);
  PsnPlatformType = TxtConfigMgr::getPsnPlatformType();
  v14 = PlayerItemComp::getMcoin(v12, PsnPlatformType);
  v15 = common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(v11, v14);
  v16 = common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(v15, off_2635B2C0);
  if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
    __asan_report_load8(&context->player);
  v17 = Player::getItemComp(context->player);
  v18 = TxtConfigMgr::getPCMPlatformType();
  WaitSubMcoin = PlayerItemComp::getWaitSubMcoin(v17, v18);
  v20 = common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(v16, WaitSubMcoin);
  v21 = common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(v20, " psn wait_sub_mcoin:");
  if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
    __asan_report_load8(&context->player);
  v22 = Player::getItemComp(context->player);
  v23 = TxtConfigMgr::getPsnPlatformType();
  v24 = PlayerItemComp::getWaitSubMcoin(v22, v23);
  common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(v21, v24);
  common::tools::StringStream<common::tools::FixedBuffer<4096>>::str[abi:cxx11](
    &v27,
    (common::tools::StringStream<common::tools::FixedBuffer<4096> > *const)(v3 + 32));
  std::string::operator=(ret_msg, &v27);
  std::string::~string(&v27);
  common::tools::StringStream<common::tools::FixedBuffer<4096>>::~StringStream((common::tools::StringStream<common::tools::FixedBuffer<4096> > *const)(v3 + 32));
  result = 0;
  if ( v28 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 5861: range 0000000017D75354-0000000017D753F6
void __cdecl addMcoinRegister::addMcoinRegister(addMcoinRegister *const this)
{
  std::function<int(GmContext&,const std::vector<std::string>&,std::string&)> *v1; // rax
  std::allocator<char> __a; // [rsp+1Fh] [rbp-31h] BYREF
  std::string __k; // [rsp+20h] [rbp-30h] BYREF

  std::allocator<char>::allocator(&__a);
  std::string::basic_string<std::allocator<char>>(&__k, "MCOIN", &__a);
  v1 = std::unordered_map<std::string,std::function<int ()(GmContext &,std::vector<std::string> const&,std::string&)>>::operator[](
         &GmUtils::op_func_map[abi:cxx11],
         &__k);
  std::function<int ()(GmContext &,std::vector<std::string> const&,std::string&)>::operator=<int (&)(GmContext &,std::vector<std::string> const&,std::string&)>(
    v1,
    (int (*)(GmContext *, const std::vector<std::string> *, std::string *))addMcoin);
  std::string::~string(&__k);
  std::allocator<char>::~allocator(&__a);
};

// Line 5862: range 0000000017BF11E2-0000000017BF16A8
int32_t __cdecl addMcoin(GmContext *context, const std::vector<std::string> *param_vec, std::string *ret_msg)
{
  unsigned __int64 v3; // r12
  __int64 v4; // rax
  _DWORD *v5; // rbx
  int32_t result; // eax
  const std::string *v7; // rax
  common::milog::MiLogStream *v8; // r13
  const std::string *v9; // rax
  const std::string *v10; // rax
  PlayerItemComp *ItemComp; // rax
  common::milog::MiLogStream *v13; // rax
  PlayerItemComp *v14; // rax
  uint32_t platform_type; // [rsp+28h] [rbp-108h]
  int32_t ret; // [rsp+2Ch] [rbp-104h]
  common::milog::MiLogStream v17; // [rsp+30h] [rbp-100h] BYREF
  char v18[224]; // [rsp+50h] [rbp-E0h] BYREF

  v3 = (unsigned __int64)v18;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_2(192LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "3 48 4 14 add_mcoin:5868 64 24 11 reason:5881 128 24 18 action_reason:5888";
  *(_QWORD *)(v3 + 16) = addMcoin;
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = -234556943;
  v5[536862722] = -234881024;
  v5[536862723] = -218959118;
  v5[536862724] = -218103808;
  v5[536862725] = -202116109;
  if ( std::vector<std::string>::empty(param_vec) )
  {
    common::milog::MiLogStream::create(
      &v17,
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/player/gm/player_gm_comp.cpp",
      "addMcoin",
      5865);
    common::milog::MiLogStream::operator<<<char [17],(char *[17])0>(&v17, (const char (*)[17])"param not enough");
    common::milog::MiLogStream::~MiLogStream(&v17);
    result = -1;
  }
  else
  {
    *(_DWORD *)(v3 + 48) = 0;
    v7 = std::vector<std::string>::operator[](param_vec, 0LL);
    if ( common::tools::StringUtils::strToNum<unsigned int>(v7, (unsigned int *)(v3 + 48), 1) )
    {
      common::milog::MiLogStream::create(
        &v17,
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/player/gm/player_gm_comp.cpp",
        "addMcoin",
        5871);
      v8 = common::milog::MiLogStream::operator<<<char [15],(char *[15])0>(&v17, (const char (*)[15])"invalid param:");
      v9 = std::vector<std::string>::operator[](param_vec, 0LL);
      common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v8, v9);
      common::milog::MiLogStream::~MiLogStream(&v17);
      result = -1;
    }
    else
    {
      if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
        __asan_report_load8(&context->player);
      platform_type = Player::getPlatformType(context->player);
      if ( std::vector<std::string>::size(param_vec) == 2 )
      {
        v10 = std::vector<std::string>::operator[](param_vec, 1uLL);
        if ( std::operator==<char>(v10, off_2635B420) )
          platform_type = TxtConfigMgr::getPsnPlatformType();
      }
      ActionReason::ActionReason((ActionReason *const)(v3 + 64), ACTION_REASON_GM, ITEM_LIMIT_GM);
      if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
        __asan_report_load8(&context->player);
      ItemComp = Player::getItemComp(context->player);
      ret = PlayerItemComp::checkAddMcoin(
              ItemComp,
              *(_DWORD *)(v3 + 48),
              (const ActionReason *)(v3 + 64),
              platform_type);
      if ( ret )
      {
        common::milog::MiLogStream::create(
          &v17,
          &common::milog::MiLogDefault::default_log_obj_,
          3u,
          "./src/player/gm/player_gm_comp.cpp",
          "addMcoin",
          5885);
        v13 = common::milog::MiLogStream::operator<<<char [31],(char *[31])0>(
                &v17,
                (const char (*)[31])"checkAddMcoin fail. add_mcoin:");
        common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v13, (const unsigned int *)(v3 + 48));
        common::milog::MiLogStream::~MiLogStream(&v17);
        result = ret;
      }
      else
      {
        ActionReason::ActionReason((ActionReason *const)(v3 + 128), ACTION_REASON_GM, ITEM_LIMIT_GM);
        if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
          __asan_report_load8(&context->player);
        v14 = Player::getItemComp(context->player);
        PlayerItemComp::addMcoin(v14, *(_DWORD *)(v3 + 48), (const ActionReason *)(v3 + 128), 1, platform_type);
        result = 0;
      }
    }
  }
  if ( v18 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8010) = 0LL;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 5893: range 0000000017D753F8-0000000017D7549A
void __cdecl subMcoinRegister::subMcoinRegister(subMcoinRegister *const this)
{
  std::function<int(GmContext&,const std::vector<std::string>&,std::string&)> *v1; // rax
  std::allocator<char> __a; // [rsp+1Fh] [rbp-31h] BYREF
  std::string __k; // [rsp+20h] [rbp-30h] BYREF

  std::allocator<char>::allocator(&__a);
  std::string::basic_string<std::allocator<char>>(&__k, "SUBMCOIN", &__a);
  v1 = std::unordered_map<std::string,std::function<int ()(GmContext &,std::vector<std::string> const&,std::string&)>>::operator[](
         &GmUtils::op_func_map[abi:cxx11],
         &__k);
  std::function<int ()(GmContext &,std::vector<std::string> const&,std::string&)>::operator=<int (&)(GmContext &,std::vector<std::string> const&,std::string&)>(
    v1,
    (int (*)(GmContext *, const std::vector<std::string> *, std::string *))subMcoin);
  std::string::~string(&__k);
  std::allocator<char>::~allocator(&__a);
};

// Line 5894: range 0000000017BF16A9-0000000017BF1B9B
int32_t __cdecl subMcoin(GmContext *context, const std::vector<std::string> *param_vec, std::string *ret_msg)
{
  unsigned __int64 v3; // rbx
  __int64 v4; // rax
  _DWORD *v5; // r12
  int32_t result; // eax
  const std::string *v7; // rax
  common::milog::MiLogStream *v8; // r13
  const std::string *v9; // rax
  const std::string *v10; // rax
  PlayerItemComp *ItemComp; // rax
  common::milog::MiLogStream *v13; // rax
  common::milog::MiLogStream *v14; // r14
  common::milog::MiLogStream *v15; // rax
  common::milog::MiLogStream *v16; // rax
  unsigned int val; // [rsp+24h] [rbp-BCh] BYREF
  uint32_t platform_type; // [rsp+28h] [rbp-B8h]
  int32_t ret; // [rsp+2Ch] [rbp-B4h]
  common::milog::MiLogStream v20; // [rsp+30h] [rbp-B0h] BYREF
  char v21[144]; // [rsp+50h] [rbp-90h] BYREF

  v3 = (unsigned __int64)v21;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_1(96LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "2 48 4 14 sub_mcoin:5900 64 8 11 reason:5911";
  *(_QWORD *)(v3 + 16) = subMcoin;
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = -234556943;
  v5[536862722] = -202116352;
  if ( std::vector<std::string>::empty(param_vec) )
  {
    common::milog::MiLogStream::create(
      &v20,
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/player/gm/player_gm_comp.cpp",
      "subMcoin",
      5897);
    common::milog::MiLogStream::operator<<<char [17],(char *[17])0>(&v20, (const char (*)[17])"param not enough");
    common::milog::MiLogStream::~MiLogStream(&v20);
    result = -1;
  }
  else
  {
    *(_DWORD *)(v3 + 48) = 0;
    v7 = std::vector<std::string>::operator[](param_vec, 0LL);
    if ( common::tools::StringUtils::strToNum<unsigned int>(v7, (unsigned int *)(v3 + 48), 1) )
    {
      common::milog::MiLogStream::create(
        &v20,
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/player/gm/player_gm_comp.cpp",
        "subMcoin",
        5903);
      v8 = common::milog::MiLogStream::operator<<<char [15],(char *[15])0>(&v20, (const char (*)[15])"invalid param:");
      v9 = std::vector<std::string>::operator[](param_vec, 0LL);
      common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v8, v9);
      common::milog::MiLogStream::~MiLogStream(&v20);
      result = -1;
    }
    else
    {
      if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
        __asan_report_load8(&context->player);
      platform_type = Player::getPlatformType(context->player);
      if ( std::vector<std::string>::size(param_vec) == 2 )
      {
        v10 = std::vector<std::string>::operator[](param_vec, 1uLL);
        if ( std::operator==<char>(v10, off_2635B420) )
          platform_type = 4;
      }
      SubItemReason::SubItemReason((SubItemReason *const)(v3 + 64), ACTION_REASON_GM);
      if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
        __asan_report_load8(&context->player);
      ItemComp = Player::getItemComp(context->player);
      ret = PlayerItemComp::subMcoinNegative(ItemComp, *(_DWORD *)(v3 + 48), platform_type);
      if ( ret )
      {
        common::milog::MiLogStream::create(
          &v20,
          &common::milog::MiLogDefault::default_log_obj_,
          3u,
          "./src/player/gm/player_gm_comp.cpp",
          "subMcoin",
          5915);
        v13 = common::milog::MiLogStream::operator<<<char [15],(char *[15])0>(
                &v20,
                (const char (*)[15])"subMcoin fails");
        common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v13, (const unsigned int *)(v3 + 48));
        common::milog::MiLogStream::~MiLogStream(&v20);
        result = ret;
      }
      else
      {
        common::milog::MiLogStream::create(
          &v20,
          &common::milog::MiLogDefault::default_log_obj_,
          2u,
          "./src/player/gm/player_gm_comp.cpp",
          "subMcoin",
          5918);
        v14 = common::milog::MiLogStream::operator<<<char [5],(char *[5])0>(&v20, (const char (*)[5])"uid:");
        if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
          __asan_report_load8(&context->player);
        val = Player::getUid(context->player);
        v15 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v14, &val);
        v16 = common::milog::MiLogStream::operator<<<char [20],(char *[20])0>(
                v15,
                (const char (*)[20])" subMcoinNegative: ");
        common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v16, (const unsigned int *)(v3 + 48));
        common::milog::MiLogStream::~MiLogStream(&v20);
        result = 0;
      }
    }
  }
  if ( v21 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8008) = 0;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8008) = -168430091;
  }
  return result;
};

// Line 5922: range 0000000017D7549C-0000000017D7553E
void __cdecl addHcoinRegister::addHcoinRegister(addHcoinRegister *const this)
{
  std::function<int(GmContext&,const std::vector<std::string>&,std::string&)> *v1; // rax
  std::allocator<char> __a; // [rsp+1Fh] [rbp-31h] BYREF
  std::string __k; // [rsp+20h] [rbp-30h] BYREF

  std::allocator<char>::allocator(&__a);
  std::string::basic_string<std::allocator<char>>(&__k, "HCOIN", &__a);
  v1 = std::unordered_map<std::string,std::function<int ()(GmContext &,std::vector<std::string> const&,std::string&)>>::operator[](
         &GmUtils::op_func_map[abi:cxx11],
         &__k);
  std::function<int ()(GmContext &,std::vector<std::string> const&,std::string&)>::operator=<int (&)(GmContext &,std::vector<std::string> const&,std::string&)>(
    v1,
    (int (*)(GmContext *, const std::vector<std::string> *, std::string *))addHcoin);
  std::string::~string(&__k);
  std::allocator<char>::~allocator(&__a);
};

// Line 5923: range 0000000017BF1B9C-0000000017BF1FB4
int32_t __cdecl addHcoin(GmContext *context, const std::vector<std::string> *param_vec, std::string *ret_msg)
{
  unsigned __int64 v3; // r13
  __int64 v4; // rax
  _DWORD *v5; // r12
  int32_t result; // eax
  const std::string *v7; // rax
  common::milog::MiLogStream *v8; // rbx
  const std::string *v9; // rax
  PlayerItemComp *ItemComp; // rax
  common::milog::MiLogStream *v11; // rax
  PlayerItemComp *v12; // rax
  int32_t ret; // [rsp+2Ch] [rbp-E4h]
  common::milog::MiLogStream v14; // [rsp+30h] [rbp-E0h] BYREF
  char v15[192]; // [rsp+50h] [rbp-C0h] BYREF

  v3 = (unsigned __int64)v15;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_2(160LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "3 48 4 14 add_hcoin:5930 64 16 15 item_param:5937 96 24 11 reason:5938";
  *(_QWORD *)(v3 + 16) = addHcoin;
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = -234556943;
  v5[536862722] = -219021312;
  v5[536862723] = -218103808;
  v5[536862724] = -202116109;
  if ( std::vector<std::string>::empty(param_vec) )
  {
    common::milog::MiLogStream::create(
      &v14,
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/player/gm/player_gm_comp.cpp",
      "addHcoin",
      5926);
    common::milog::MiLogStream::operator<<<char [17],(char *[17])0>(&v14, (const char (*)[17])"param not enough");
    common::milog::MiLogStream::~MiLogStream(&v14);
    result = -1;
  }
  else
  {
    *(_DWORD *)(v3 + 48) = 0;
    v7 = std::vector<std::string>::operator[](param_vec, 0LL);
    if ( common::tools::StringUtils::strToNum<unsigned int>(v7, (unsigned int *)(v3 + 48), 1) )
    {
      common::milog::MiLogStream::create(
        &v14,
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/player/gm/player_gm_comp.cpp",
        "addHcoin",
        5933);
      v8 = common::milog::MiLogStream::operator<<<char [15],(char *[15])0>(&v14, (const char (*)[15])"invalid param:");
      v9 = std::vector<std::string>::operator[](param_vec, 0LL);
      common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v8, v9);
      common::milog::MiLogStream::~MiLogStream(&v14);
      result = -1;
    }
    else
    {
      *(_QWORD *)(v3 + 64) = 0LL;
      *(_QWORD *)(v3 + 72) = 0LL;
      *(_DWORD *)(v3 + 64) = 201;
      *(_DWORD *)(v3 + 68) = *(_DWORD *)(v3 + 48);
      ActionReason::ActionReason((ActionReason *const)(v3 + 96), ACTION_REASON_GM, ITEM_LIMIT_GM);
      if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
        __asan_report_load8(&context->player);
      ItemComp = Player::getItemComp(context->player);
      ret = PlayerItemComp::checkAddItem(ItemComp, (const ItemParam *)(v3 + 64), (const ActionReason *)(v3 + 96));
      if ( ret )
      {
        common::milog::MiLogStream::create(
          &v14,
          &common::milog::MiLogDefault::default_log_obj_,
          3u,
          "./src/player/gm/player_gm_comp.cpp",
          "addHcoin",
          5942);
        v11 = common::milog::MiLogStream::operator<<<char [30],(char *[30])0>(
                &v14,
                (const char (*)[30])"checkAddItem fail. add_hcoin:");
        common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v11, (const unsigned int *)(v3 + 48));
        common::milog::MiLogStream::~MiLogStream(&v14);
        result = ret;
      }
      else
      {
        if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
          __asan_report_load8(&context->player);
        v12 = Player::getItemComp(context->player);
        PlayerItemComp::addItem(v12, (const ItemParam *)(v3 + 64), (const ActionReason *)(v3 + 96), 0LL);
        result = 0;
      }
    }
  }
  if ( v15 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8010) = 0;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8010) = -168430091;
  }
  return result;
};

// Line 5952: range 0000000017D75540-0000000017D755E2
void __cdecl subHcoinRegister::subHcoinRegister(subHcoinRegister *const this)
{
  std::function<int(GmContext&,const std::vector<std::string>&,std::string&)> *v1; // rax
  std::allocator<char> __a; // [rsp+1Fh] [rbp-31h] BYREF
  std::string __k; // [rsp+20h] [rbp-30h] BYREF

  std::allocator<char>::allocator(&__a);
  std::string::basic_string<std::allocator<char>>(&__k, "SUBHCOIN", &__a);
  v1 = std::unordered_map<std::string,std::function<int ()(GmContext &,std::vector<std::string> const&,std::string&)>>::operator[](
         &GmUtils::op_func_map[abi:cxx11],
         &__k);
  std::function<int ()(GmContext &,std::vector<std::string> const&,std::string&)>::operator=<int (&)(GmContext &,std::vector<std::string> const&,std::string&)>(
    v1,
    (int (*)(GmContext *, const std::vector<std::string> *, std::string *))subHcoin);
  std::string::~string(&__k);
  std::allocator<char>::~allocator(&__a);
};

// Line 5953: range 0000000017BF1FB5-0000000017BF23D2
int32_t __cdecl subHcoin(GmContext *context, const std::vector<std::string> *param_vec, std::string *ret_msg)
{
  unsigned __int64 v3; // rbx
  __int64 v4; // rax
  unsigned __int64 v5; // r12
  int32_t result; // eax
  const std::string *v7; // rax
  common::milog::MiLogStream *v8; // r13
  const std::string *v9; // rax
  PlayerItemComp *ItemComp; // rax
  common::milog::MiLogStream *v11; // rax
  common::milog::MiLogStream *v12; // r14
  common::milog::MiLogStream *v13; // rax
  common::milog::MiLogStream *v14; // rax
  unsigned int val; // [rsp+28h] [rbp-98h] BYREF
  int32_t ret; // [rsp+2Ch] [rbp-94h]
  common::milog::MiLogStream v17; // [rsp+30h] [rbp-90h] BYREF
  char v18[112]; // [rsp+50h] [rbp-70h] BYREF

  v3 = (unsigned __int64)v18;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_0(64LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "1 32 4 14 sub_hcoin:5959";
  *(_QWORD *)(v3 + 16) = subHcoin;
  v5 = v3 >> 3;
  *(_DWORD *)(v5 + 2147450880) = -235802127;
  *(_DWORD *)(v5 + 2147450884) = -202116348;
  if ( std::vector<std::string>::empty(param_vec) )
  {
    common::milog::MiLogStream::create(
      &v17,
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/player/gm/player_gm_comp.cpp",
      "subHcoin",
      5956);
    common::milog::MiLogStream::operator<<<char [17],(char *[17])0>(&v17, (const char (*)[17])"param not enough");
    common::milog::MiLogStream::~MiLogStream(&v17);
    result = -1;
  }
  else
  {
    *(_DWORD *)(v3 + 32) = 0;
    v7 = std::vector<std::string>::operator[](param_vec, 0LL);
    if ( common::tools::StringUtils::strToNum<unsigned int>(v7, (unsigned int *)(v3 + 32), 1) )
    {
      common::milog::MiLogStream::create(
        &v17,
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/player/gm/player_gm_comp.cpp",
        "subHcoin",
        5962);
      v8 = common::milog::MiLogStream::operator<<<char [15],(char *[15])0>(&v17, (const char (*)[15])"invalid param:");
      v9 = std::vector<std::string>::operator[](param_vec, 0LL);
      common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v8, v9);
      common::milog::MiLogStream::~MiLogStream(&v17);
      result = -1;
    }
    else
    {
      if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
        __asan_report_load8(&context->player);
      ItemComp = Player::getItemComp(context->player);
      ret = PlayerItemComp::subHcoinNegative(ItemComp, *(_DWORD *)(v3 + 32));
      if ( ret )
      {
        common::milog::MiLogStream::create(
          &v17,
          &common::milog::MiLogDefault::default_log_obj_,
          3u,
          "./src/player/gm/player_gm_comp.cpp",
          "subHcoin",
          5968);
        v11 = common::milog::MiLogStream::operator<<<char [23],(char *[23])0>(
                &v17,
                (const char (*)[23])"subHcoinNegative fails");
        common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v11, (const unsigned int *)(v3 + 32));
        common::milog::MiLogStream::~MiLogStream(&v17);
        result = ret;
      }
      else
      {
        common::milog::MiLogStream::create(
          &v17,
          &common::milog::MiLogDefault::default_log_obj_,
          2u,
          "./src/player/gm/player_gm_comp.cpp",
          "subHcoin",
          5971);
        v12 = common::milog::MiLogStream::operator<<<char [5],(char *[5])0>(&v17, (const char (*)[5])"uid:");
        if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
          __asan_report_load8(&context->player);
        val = Player::getUid(context->player);
        v13 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v12, &val);
        v14 = common::milog::MiLogStream::operator<<<char [20],(char *[20])0>(
                v13,
                (const char (*)[20])" subHcoinNegative: ");
        common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v14, (const unsigned int *)(v3 + 32));
        common::milog::MiLogStream::~MiLogStream(&v17);
        result = 0;
      }
    }
  }
  if ( v18 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 5975: range 0000000017D755E4-0000000017D75686
void __cdecl addScoinRegister::addScoinRegister(addScoinRegister *const this)
{
  std::function<int(GmContext&,const std::vector<std::string>&,std::string&)> *v1; // rax
  std::allocator<char> __a; // [rsp+1Fh] [rbp-31h] BYREF
  std::string __k; // [rsp+20h] [rbp-30h] BYREF

  std::allocator<char>::allocator(&__a);
  std::string::basic_string<std::allocator<char>>(&__k, "SCOIN", &__a);
  v1 = std::unordered_map<std::string,std::function<int ()(GmContext &,std::vector<std::string> const&,std::string&)>>::operator[](
         &GmUtils::op_func_map[abi:cxx11],
         &__k);
  std::function<int ()(GmContext &,std::vector<std::string> const&,std::string&)>::operator=<int (&)(GmContext &,std::vector<std::string> const&,std::string&)>(
    v1,
    (int (*)(GmContext *, const std::vector<std::string> *, std::string *))addScoin);
  std::string::~string(&__k);
  std::allocator<char>::~allocator(&__a);
};

// Line 5976: range 0000000017BF23D3-0000000017BF27EB
int32_t __cdecl addScoin(GmContext *context, const std::vector<std::string> *param_vec, std::string *ret_msg)
{
  unsigned __int64 v3; // r13
  __int64 v4; // rax
  _DWORD *v5; // r12
  int32_t result; // eax
  const std::string *v7; // rax
  common::milog::MiLogStream *v8; // rbx
  const std::string *v9; // rax
  PlayerItemComp *ItemComp; // rax
  common::milog::MiLogStream *v11; // rax
  PlayerItemComp *v12; // rax
  int32_t ret; // [rsp+2Ch] [rbp-E4h]
  common::milog::MiLogStream v14; // [rsp+30h] [rbp-E0h] BYREF
  char v15[192]; // [rsp+50h] [rbp-C0h] BYREF

  v3 = (unsigned __int64)v15;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_2(160LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "3 48 4 14 add_scoin:5983 64 16 15 item_param:5990 96 24 11 reason:5991";
  *(_QWORD *)(v3 + 16) = addScoin;
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = -234556943;
  v5[536862722] = -219021312;
  v5[536862723] = -218103808;
  v5[536862724] = -202116109;
  if ( std::vector<std::string>::empty(param_vec) )
  {
    common::milog::MiLogStream::create(
      &v14,
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/player/gm/player_gm_comp.cpp",
      "addScoin",
      5979);
    common::milog::MiLogStream::operator<<<char [17],(char *[17])0>(&v14, (const char (*)[17])"param not enough");
    common::milog::MiLogStream::~MiLogStream(&v14);
    result = -1;
  }
  else
  {
    *(_DWORD *)(v3 + 48) = 0;
    v7 = std::vector<std::string>::operator[](param_vec, 0LL);
    if ( common::tools::StringUtils::strToNum<unsigned int>(v7, (unsigned int *)(v3 + 48), 1) )
    {
      common::milog::MiLogStream::create(
        &v14,
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/player/gm/player_gm_comp.cpp",
        "addScoin",
        5986);
      v8 = common::milog::MiLogStream::operator<<<char [15],(char *[15])0>(&v14, (const char (*)[15])"invalid param:");
      v9 = std::vector<std::string>::operator[](param_vec, 0LL);
      common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v8, v9);
      common::milog::MiLogStream::~MiLogStream(&v14);
      result = -1;
    }
    else
    {
      *(_QWORD *)(v3 + 64) = 0LL;
      *(_QWORD *)(v3 + 72) = 0LL;
      *(_DWORD *)(v3 + 64) = 202;
      *(_DWORD *)(v3 + 68) = *(_DWORD *)(v3 + 48);
      ActionReason::ActionReason((ActionReason *const)(v3 + 96), ACTION_REASON_GM, ITEM_LIMIT_GM);
      if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
        __asan_report_load8(&context->player);
      ItemComp = Player::getItemComp(context->player);
      ret = PlayerItemComp::checkAddItem(ItemComp, (const ItemParam *)(v3 + 64), (const ActionReason *)(v3 + 96));
      if ( ret )
      {
        common::milog::MiLogStream::create(
          &v14,
          &common::milog::MiLogDefault::default_log_obj_,
          3u,
          "./src/player/gm/player_gm_comp.cpp",
          "addScoin",
          5995);
        v11 = common::milog::MiLogStream::operator<<<char [31],(char *[31])0>(
                &v14,
                (const char (*)[31])"checkAddHcoin fail. add_scoin:");
        common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v11, (const unsigned int *)(v3 + 48));
        common::milog::MiLogStream::~MiLogStream(&v14);
        result = ret;
      }
      else
      {
        if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
          __asan_report_load8(&context->player);
        v12 = Player::getItemComp(context->player);
        PlayerItemComp::addItem(v12, (const ItemParam *)(v3 + 64), (const ActionReason *)(v3 + 96), 0LL);
        result = 0;
      }
    }
  }
  if ( v15 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8010) = 0;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8010) = -168430091;
  }
  return result;
};

// Line 6005: range 0000000017D75688-0000000017D7572A
void __cdecl subScoinRegister::subScoinRegister(subScoinRegister *const this)
{
  std::function<int(GmContext&,const std::vector<std::string>&,std::string&)> *v1; // rax
  std::allocator<char> __a; // [rsp+1Fh] [rbp-31h] BYREF
  std::string __k; // [rsp+20h] [rbp-30h] BYREF

  std::allocator<char>::allocator(&__a);
  std::string::basic_string<std::allocator<char>>(&__k, "SUBSCOIN", &__a);
  v1 = std::unordered_map<std::string,std::function<int ()(GmContext &,std::vector<std::string> const&,std::string&)>>::operator[](
         &GmUtils::op_func_map[abi:cxx11],
         &__k);
  std::function<int ()(GmContext &,std::vector<std::string> const&,std::string&)>::operator=<int (&)(GmContext &,std::vector<std::string> const&,std::string&)>(
    v1,
    (int (*)(GmContext *, const std::vector<std::string> *, std::string *))subScoin);
  std::string::~string(&__k);
  std::allocator<char>::~allocator(&__a);
};

// Line 6006: range 0000000017BF27EC-0000000017BF2C09
int32_t __cdecl subScoin(GmContext *context, const std::vector<std::string> *param_vec, std::string *ret_msg)
{
  unsigned __int64 v3; // rbx
  __int64 v4; // rax
  unsigned __int64 v5; // r12
  int32_t result; // eax
  const std::string *v7; // rax
  common::milog::MiLogStream *v8; // r13
  const std::string *v9; // rax
  PlayerItemComp *ItemComp; // rax
  common::milog::MiLogStream *v11; // rax
  common::milog::MiLogStream *v12; // r14
  common::milog::MiLogStream *v13; // rax
  common::milog::MiLogStream *v14; // rax
  unsigned int val; // [rsp+28h] [rbp-98h] BYREF
  int32_t ret; // [rsp+2Ch] [rbp-94h]
  common::milog::MiLogStream v17; // [rsp+30h] [rbp-90h] BYREF
  char v18[112]; // [rsp+50h] [rbp-70h] BYREF

  v3 = (unsigned __int64)v18;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_0(64LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "1 32 4 14 sub_scoin:6012";
  *(_QWORD *)(v3 + 16) = subScoin;
  v5 = v3 >> 3;
  *(_DWORD *)(v5 + 2147450880) = -235802127;
  *(_DWORD *)(v5 + 2147450884) = -202116348;
  if ( std::vector<std::string>::empty(param_vec) )
  {
    common::milog::MiLogStream::create(
      &v17,
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/player/gm/player_gm_comp.cpp",
      "subScoin",
      6009);
    common::milog::MiLogStream::operator<<<char [17],(char *[17])0>(&v17, (const char (*)[17])"param not enough");
    common::milog::MiLogStream::~MiLogStream(&v17);
    result = -1;
  }
  else
  {
    *(_DWORD *)(v3 + 32) = 0;
    v7 = std::vector<std::string>::operator[](param_vec, 0LL);
    if ( common::tools::StringUtils::strToNum<unsigned int>(v7, (unsigned int *)(v3 + 32), 1) )
    {
      common::milog::MiLogStream::create(
        &v17,
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/player/gm/player_gm_comp.cpp",
        "subScoin",
        6015);
      v8 = common::milog::MiLogStream::operator<<<char [15],(char *[15])0>(&v17, (const char (*)[15])"invalid param:");
      v9 = std::vector<std::string>::operator[](param_vec, 0LL);
      common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v8, v9);
      common::milog::MiLogStream::~MiLogStream(&v17);
      result = -1;
    }
    else
    {
      if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
        __asan_report_load8(&context->player);
      ItemComp = Player::getItemComp(context->player);
      ret = PlayerItemComp::subScoinNegative(ItemComp, *(_DWORD *)(v3 + 32));
      if ( ret )
      {
        common::milog::MiLogStream::create(
          &v17,
          &common::milog::MiLogDefault::default_log_obj_,
          3u,
          "./src/player/gm/player_gm_comp.cpp",
          "subScoin",
          6021);
        v11 = common::milog::MiLogStream::operator<<<char [24],(char *[24])0>(
                &v17,
                (const char (*)[24])"subScoinNegative fails:");
        common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v11, (const unsigned int *)(v3 + 32));
        common::milog::MiLogStream::~MiLogStream(&v17);
        result = ret;
      }
      else
      {
        common::milog::MiLogStream::create(
          &v17,
          &common::milog::MiLogDefault::default_log_obj_,
          2u,
          "./src/player/gm/player_gm_comp.cpp",
          "subScoin",
          6024);
        v12 = common::milog::MiLogStream::operator<<<char [5],(char *[5])0>(&v17, (const char (*)[5])"uid:");
        if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
          __asan_report_load8(&context->player);
        val = Player::getUid(context->player);
        v13 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v12, &val);
        v14 = common::milog::MiLogStream::operator<<<char [20],(char *[20])0>(
                v13,
                (const char (*)[20])" subScoinNegative: ");
        common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v14, (const unsigned int *)(v3 + 32));
        common::milog::MiLogStream::~MiLogStream(&v17);
        result = 0;
      }
    }
  }
  if ( v18 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 6028: range 0000000017D7572C-0000000017D757CE
void __cdecl addHomeCoinRegister::addHomeCoinRegister(addHomeCoinRegister *const this)
{
  std::function<int(GmContext&,const std::vector<std::string>&,std::string&)> *v1; // rax
  std::allocator<char> __a; // [rsp+1Fh] [rbp-31h] BYREF
  std::string __k; // [rsp+20h] [rbp-30h] BYREF

  std::allocator<char>::allocator(&__a);
  std::string::basic_string<std::allocator<char>>(&__k, "HOME_COIN", &__a);
  v1 = std::unordered_map<std::string,std::function<int ()(GmContext &,std::vector<std::string> const&,std::string&)>>::operator[](
         &GmUtils::op_func_map[abi:cxx11],
         &__k);
  std::function<int ()(GmContext &,std::vector<std::string> const&,std::string&)>::operator=<int (&)(GmContext &,std::vector<std::string> const&,std::string&)>(
    v1,
    (int (*)(GmContext *, const std::vector<std::string> *, std::string *))addHomeCoin);
  std::string::~string(&__k);
  std::allocator<char>::~allocator(&__a);
};

// Line 6029: range 0000000017BF2C0A-0000000017BF3022
int32_t __cdecl addHomeCoin(GmContext *context, const std::vector<std::string> *param_vec, std::string *ret_msg)
{
  unsigned __int64 v3; // r13
  __int64 v4; // rax
  _DWORD *v5; // r12
  int32_t result; // eax
  const std::string *v7; // rax
  common::milog::MiLogStream *v8; // rbx
  const std::string *v9; // rax
  PlayerItemComp *ItemComp; // rax
  common::milog::MiLogStream *v11; // rax
  PlayerItemComp *v12; // rax
  int32_t ret; // [rsp+2Ch] [rbp-E4h]
  common::milog::MiLogStream v14; // [rsp+30h] [rbp-E0h] BYREF
  char v15[192]; // [rsp+50h] [rbp-C0h] BYREF

  v3 = (unsigned __int64)v15;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_2(160LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "3 48 4 18 add_home_coin:6036 64 16 15 item_param:6043 96 24 11 reason:6044";
  *(_QWORD *)(v3 + 16) = addHomeCoin;
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = -234556943;
  v5[536862722] = -219021312;
  v5[536862723] = -218103808;
  v5[536862724] = -202116109;
  if ( std::vector<std::string>::empty(param_vec) )
  {
    common::milog::MiLogStream::create(
      &v14,
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/player/gm/player_gm_comp.cpp",
      "addHomeCoin",
      6032);
    common::milog::MiLogStream::operator<<<char [17],(char *[17])0>(&v14, (const char (*)[17])"param not enough");
    common::milog::MiLogStream::~MiLogStream(&v14);
    result = -1;
  }
  else
  {
    *(_DWORD *)(v3 + 48) = 0;
    v7 = std::vector<std::string>::operator[](param_vec, 0LL);
    if ( common::tools::StringUtils::strToNum<unsigned int>(v7, (unsigned int *)(v3 + 48), 1) )
    {
      common::milog::MiLogStream::create(
        &v14,
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/player/gm/player_gm_comp.cpp",
        "addHomeCoin",
        6039);
      v8 = common::milog::MiLogStream::operator<<<char [15],(char *[15])0>(&v14, (const char (*)[15])"invalid param:");
      v9 = std::vector<std::string>::operator[](param_vec, 0LL);
      common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v8, v9);
      common::milog::MiLogStream::~MiLogStream(&v14);
      result = -1;
    }
    else
    {
      *(_QWORD *)(v3 + 64) = 0LL;
      *(_QWORD *)(v3 + 72) = 0LL;
      *(_DWORD *)(v3 + 64) = 204;
      *(_DWORD *)(v3 + 68) = *(_DWORD *)(v3 + 48);
      ActionReason::ActionReason((ActionReason *const)(v3 + 96), ACTION_REASON_GM, ITEM_LIMIT_GM);
      if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
        __asan_report_load8(&context->player);
      ItemComp = Player::getItemComp(context->player);
      ret = PlayerItemComp::checkAddItem(ItemComp, (const ItemParam *)(v3 + 64), (const ActionReason *)(v3 + 96));
      if ( ret )
      {
        common::milog::MiLogStream::create(
          &v14,
          &common::milog::MiLogDefault::default_log_obj_,
          3u,
          "./src/player/gm/player_gm_comp.cpp",
          "addHomeCoin",
          6048);
        v11 = common::milog::MiLogStream::operator<<<char [35],(char *[35])0>(
                &v14,
                (const char (*)[35])"checkAddHcoin fail. add_home_coin:");
        common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v11, (const unsigned int *)(v3 + 48));
        common::milog::MiLogStream::~MiLogStream(&v14);
        result = ret;
      }
      else
      {
        if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
          __asan_report_load8(&context->player);
        v12 = Player::getItemComp(context->player);
        PlayerItemComp::addItem(v12, (const ItemParam *)(v3 + 64), (const ActionReason *)(v3 + 96), 0LL);
        result = 0;
      }
    }
  }
  if ( v15 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8010) = 0;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8010) = -168430091;
  }
  return result;
};

// Line 6058: range 0000000017D757D0-0000000017D75872
void __cdecl subHomeCoinRegister::subHomeCoinRegister(subHomeCoinRegister *const this)
{
  std::function<int(GmContext&,const std::vector<std::string>&,std::string&)> *v1; // rax
  std::allocator<char> __a; // [rsp+1Fh] [rbp-31h] BYREF
  std::string __k; // [rsp+20h] [rbp-30h] BYREF

  std::allocator<char>::allocator(&__a);
  std::string::basic_string<std::allocator<char>>(&__k, "SUBHOME_COIN", &__a);
  v1 = std::unordered_map<std::string,std::function<int ()(GmContext &,std::vector<std::string> const&,std::string&)>>::operator[](
         &GmUtils::op_func_map[abi:cxx11],
         &__k);
  std::function<int ()(GmContext &,std::vector<std::string> const&,std::string&)>::operator=<int (&)(GmContext &,std::vector<std::string> const&,std::string&)>(
    v1,
    (int (*)(GmContext *, const std::vector<std::string> *, std::string *))subHomeCoin);
  std::string::~string(&__k);
  std::allocator<char>::~allocator(&__a);
};

// Line 6059: range 0000000017BF3023-0000000017BF3440
int32_t __cdecl subHomeCoin(GmContext *context, const std::vector<std::string> *param_vec, std::string *ret_msg)
{
  unsigned __int64 v3; // rbx
  __int64 v4; // rax
  unsigned __int64 v5; // r12
  int32_t result; // eax
  const std::string *v7; // rax
  common::milog::MiLogStream *v8; // r13
  const std::string *v9; // rax
  PlayerItemComp *ItemComp; // rax
  common::milog::MiLogStream *v11; // rax
  common::milog::MiLogStream *v12; // r14
  common::milog::MiLogStream *v13; // rax
  common::milog::MiLogStream *v14; // rax
  unsigned int val; // [rsp+28h] [rbp-98h] BYREF
  int32_t ret; // [rsp+2Ch] [rbp-94h]
  common::milog::MiLogStream v17; // [rsp+30h] [rbp-90h] BYREF
  char v18[112]; // [rsp+50h] [rbp-70h] BYREF

  v3 = (unsigned __int64)v18;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_0(64LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "1 32 4 18 sub_home_coin:6065";
  *(_QWORD *)(v3 + 16) = subHomeCoin;
  v5 = v3 >> 3;
  *(_DWORD *)(v5 + 2147450880) = -235802127;
  *(_DWORD *)(v5 + 2147450884) = -202116348;
  if ( std::vector<std::string>::empty(param_vec) )
  {
    common::milog::MiLogStream::create(
      &v17,
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/player/gm/player_gm_comp.cpp",
      "subHomeCoin",
      6062);
    common::milog::MiLogStream::operator<<<char [17],(char *[17])0>(&v17, (const char (*)[17])"param not enough");
    common::milog::MiLogStream::~MiLogStream(&v17);
    result = -1;
  }
  else
  {
    *(_DWORD *)(v3 + 32) = 0;
    v7 = std::vector<std::string>::operator[](param_vec, 0LL);
    if ( common::tools::StringUtils::strToNum<unsigned int>(v7, (unsigned int *)(v3 + 32), 1) )
    {
      common::milog::MiLogStream::create(
        &v17,
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/player/gm/player_gm_comp.cpp",
        "subHomeCoin",
        6068);
      v8 = common::milog::MiLogStream::operator<<<char [15],(char *[15])0>(&v17, (const char (*)[15])"invalid param:");
      v9 = std::vector<std::string>::operator[](param_vec, 0LL);
      common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v8, v9);
      common::milog::MiLogStream::~MiLogStream(&v17);
      result = -1;
    }
    else
    {
      if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
        __asan_report_load8(&context->player);
      ItemComp = Player::getItemComp(context->player);
      ret = PlayerItemComp::subHomeCoinNegative(ItemComp, *(_DWORD *)(v3 + 32));
      if ( ret )
      {
        common::milog::MiLogStream::create(
          &v17,
          &common::milog::MiLogDefault::default_log_obj_,
          3u,
          "./src/player/gm/player_gm_comp.cpp",
          "subHomeCoin",
          6074);
        v11 = common::milog::MiLogStream::operator<<<char [27],(char *[27])0>(
                &v17,
                (const char (*)[27])"subHomeCoinNegative fails:");
        common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v11, (const unsigned int *)(v3 + 32));
        common::milog::MiLogStream::~MiLogStream(&v17);
        result = ret;
      }
      else
      {
        common::milog::MiLogStream::create(
          &v17,
          &common::milog::MiLogDefault::default_log_obj_,
          2u,
          "./src/player/gm/player_gm_comp.cpp",
          "subHomeCoin",
          6077);
        v12 = common::milog::MiLogStream::operator<<<char [5],(char *[5])0>(&v17, (const char (*)[5])"uid:");
        if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
          __asan_report_load8(&context->player);
        val = Player::getUid(context->player);
        v13 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v12, &val);
        v14 = common::milog::MiLogStream::operator<<<char [23],(char *[23])0>(
                v13,
                (const char (*)[23])" subHomeCoinNegative: ");
        common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v14, (const unsigned int *)(v3 + 32));
        common::milog::MiLogStream::~MiLogStream(&v17);
        result = 0;
      }
    }
  }
  if ( v18 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 6081: range 0000000017D75874-0000000017D75916
void __cdecl angleRegister::angleRegister(angleRegister *const this)
{
  std::function<int(GmContext&,const std::vector<std::string>&,std::string&)> *v1; // rax
  std::allocator<char> __a; // [rsp+1Fh] [rbp-31h] BYREF
  std::string __k; // [rsp+20h] [rbp-30h] BYREF

  std::allocator<char>::allocator(&__a);
  std::string::basic_string<std::allocator<char>>(&__k, "ANGLE", &__a);
  v1 = std::unordered_map<std::string,std::function<int ()(GmContext &,std::vector<std::string> const&,std::string&)>>::operator[](
         &GmUtils::op_func_map[abi:cxx11],
         &__k);
  std::function<int ()(GmContext &,std::vector<std::string> const&,std::string&)>::operator=<int (&)(GmContext &,std::vector<std::string> const&,std::string&)>(
    v1,
    (int (*)(GmContext *, const std::vector<std::string> *, std::string *))angle);
  std::string::~string(&__k);
  std::allocator<char>::~allocator(&__a);
};

// Line 6082: range 0000000017BF3441-0000000017BF38E9
int32_t __cdecl angle(GmContext *context, const std::vector<std::string> *param_vec, std::string *ret_msg)
{
  unsigned __int64 v3; // r13
  __int64 v4; // rax
  _DWORD *v5; // r12
  int32_t result; // eax
  const std::string *v7; // rax
  const std::string *v8; // rax
  const std::string *v9; // rax
  const std::string *v10; // rax
  const std::string *v11; // rax
  const std::string *v12; // rax
  common::milog::MiLogStream *v13; // rax
  common::milog::MiLogStream *v14; // rax
  common::milog::MiLogStream *v15; // rax
  common::milog::MiLogStream *v16; // rax
  common::milog::MiLogStream *v17; // rax
  common::milog::MiLogStream *v18; // rax
  common::milog::MiLogStream *v19; // rax
  Quaternion lhs; // [rsp+20h] [rbp-130h] BYREF
  common::milog::MiLogStream v22; // [rsp+30h] [rbp-120h] BYREF
  char v23[256]; // [rsp+50h] [rbp-100h] BYREF

  v3 = (unsigned __int64)v23;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_2(224LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "6 32 12 13 from_dir:6083 64 12 11 to_dir:6084 96 16 8 ret:6098 128 16 13 from_rot:6099 160 16 11"
                        " to_rot:6101 192 16 10 delta:6103";
  *(_QWORD *)(v3 + 16) = angle;
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = -219020288;
  v5[536862722] = -219020288;
  v5[536862723] = -219021312;
  v5[536862724] = -219021312;
  v5[536862725] = -219021312;
  v5[536862726] = -202178560;
  Vector3::Vector3((Vector3 *const)(v3 + 32), 0.0, 0.0, 0.0);
  Vector3::Vector3((Vector3 *const)(v3 + 64), 0.0, 0.0, 0.0);
  if ( std::vector<std::string>::size(param_vec) > 5 )
  {
    v7 = std::vector<std::string>::operator[](param_vec, 0LL);
    common::tools::StringUtils::strToNum<float>(v7, (float *)(v3 + 32), 1);
    v8 = std::vector<std::string>::operator[](param_vec, 1uLL);
    common::tools::StringUtils::strToNum<float>(v8, (float *)(v3 + 36), 1);
    v9 = std::vector<std::string>::operator[](param_vec, 2uLL);
    common::tools::StringUtils::strToNum<float>(v9, (float *)(v3 + 40), 1);
    v10 = std::vector<std::string>::operator[](param_vec, 3uLL);
    common::tools::StringUtils::strToNum<float>(v10, (float *)(v3 + 64), 1);
    v11 = std::vector<std::string>::operator[](param_vec, 4uLL);
    common::tools::StringUtils::strToNum<float>(v11, (float *)(v3 + 68), 1);
    v12 = std::vector<std::string>::operator[](param_vec, 5uLL);
    common::tools::StringUtils::strToNum<float>(v12, (float *)(v3 + 72), 1);
    RouteAxisAngle::RouteAxisAngle((RouteAxisAngle *const)(v3 + 96));
    Quaternion::Quaternion((Quaternion *const)(v3 + 128));
    Quaternion::fromEuler((Quaternion *const)(v3 + 128), (const Vector3 *)(v3 + 32));
    Quaternion::Quaternion((Quaternion *const)(v3 + 160));
    Quaternion::fromEuler((Quaternion *const)(v3 + 160), (const Vector3 *)(v3 + 64));
    lhs = Quaternion::inverse((Quaternion *const)(v3 + 128));
    *(Quaternion *)(v3 + 192) = operator*(&lhs, (const Quaternion *)(v3 + 160));
    Quaternion::toAxisAngle((Quaternion *const)(v3 + 192), (Vector3 *)(v3 + 96), (float *)(v3 + 108));
    common::milog::MiLogStream::create(
      &v22,
      &common::milog::MiLogDefault::default_log_obj_,
      1u,
      "./src/player/gm/player_gm_comp.cpp",
      "angle",
      6105);
    v13 = common::milog::MiLogStream::operator<<<char [9],(char *[9])0>(&v22, (const char (*)[9])"axis_x: ");
    v14 = common::milog::MiLogStream::operator<<<float,(float *)0>(v13, (const float *)(v3 + 96));
    v15 = common::milog::MiLogStream::operator<<<char [10],(char *[10])0>(v14, (const char (*)[10])" axis_y: ");
    v16 = common::milog::MiLogStream::operator<<<float,(float *)0>(v15, (const float *)(v3 + 100));
    v17 = common::milog::MiLogStream::operator<<<char [10],(char *[10])0>(v16, (const char (*)[10])" axis_z: ");
    v18 = common::milog::MiLogStream::operator<<<float,(float *)0>(v17, (const float *)(v3 + 104));
    v19 = common::milog::MiLogStream::operator<<<char [9],(char *[9])0>(v18, (const char (*)[9])" angle: ");
    common::milog::MiLogStream::operator<<<float,(float *)0>(v19, (const float *)(v3 + 108));
    common::milog::MiLogStream::~MiLogStream(&v22);
    result = 0;
  }
  else
  {
    std::string::operator=(ret_msg, "param errro");
    result = -1;
  }
  if ( v23 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8010) = 0LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8018) = 0;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8018) = -168430091;
  }
  return result;
};

// Line 6110: range 0000000017D75918-0000000017D759BA
void __cdecl changeAuthorityRegister::changeAuthorityRegister(changeAuthorityRegister *const this)
{
  std::function<int(GmContext&,const std::vector<std::string>&,std::string&)> *v1; // rax
  std::allocator<char> __a; // [rsp+1Fh] [rbp-31h] BYREF
  std::string __k; // [rsp+20h] [rbp-30h] BYREF

  std::allocator<char>::allocator(&__a);
  std::string::basic_string<std::allocator<char>>(&__k, "AUTHORITY", &__a);
  v1 = std::unordered_map<std::string,std::function<int ()(GmContext &,std::vector<std::string> const&,std::string&)>>::operator[](
         &GmUtils::op_func_map[abi:cxx11],
         &__k);
  std::function<int ()(GmContext &,std::vector<std::string> const&,std::string&)>::operator=<int (&)(GmContext &,std::vector<std::string> const&,std::string&)>(
    v1,
    (int (*)(GmContext *, const std::vector<std::string> *, std::string *))changeAuthority);
  std::string::~string(&__k);
  std::allocator<char>::~allocator(&__a);
};

// Line 6111: range 0000000017BF38EA-0000000017BF5740
int32_t __cdecl changeAuthority(GmContext *context, const std::vector<std::string> *param_vec, std::string *ret_msg)
{
  int32_t v3; // r14d
  unsigned __int64 v4; // r13
  __int64 v5; // rax
  _DWORD *v6; // r12
  const std::string *v7; // rax
  const std::string *v8; // rax
  const std::string *v9; // rax
  _BOOL4 v10; // r15d
  const std::string *v11; // rax
  int v12; // r15d
  _BOOL4 v13; // r15d
  EntitySightGroup *v14; // r15
  int v15; // r15d
  Creature *v16; // r15
  Scene *scene; // r15
  std::__shared_ptr_access<Creature,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v18; // rax
  std::__shared_ptr_access<Player,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v19; // rax
  common::tools::StringStream<common::tools::FixedBuffer<4096> > *v20; // r15
  std::__shared_ptr_access<Creature,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v21; // rax
  void (__fastcall **v22)(common::milog::MiLogStream *, std::__shared_ptr_access<Creature,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *); // rdx
  common::tools::StringStream<common::tools::FixedBuffer<4096> > *v23; // rax
  common::tools::StringStream<common::tools::FixedBuffer<4096> > *v24; // rax
  common::tools::StringStream<common::tools::FixedBuffer<4096> > *v25; // rax
  common::tools::StringStream<common::tools::FixedBuffer<4096> > *v26; // rax
  common::tools::StringStream<common::tools::FixedBuffer<4096> > *v27; // rax
  const std::string *v28; // rax
  Scene *v29; // r15
  std::__shared_ptr_access<Player,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v30; // rax
  int v31; // r15d
  Scene *v32; // r15
  PlayerViewMgr *v33; // rax
  const std::string *v34; // rax
  const std::string *v35; // rax
  int v36; // r15d
  Scene *v37; // r15
  std::__shared_ptr_access<Creature,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v38; // rax
  std::__shared_ptr_access<Player,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v39; // rax
  common::tools::StringStream<common::tools::FixedBuffer<4096> > *v40; // r15
  std::__shared_ptr_access<Creature,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v41; // rax
  void (__fastcall **v42)(common::milog::MiLogStream *, std::__shared_ptr_access<Creature,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *); // rdx
  common::tools::StringStream<common::tools::FixedBuffer<4096> > *v43; // rax
  common::tools::StringStream<common::tools::FixedBuffer<4096> > *v44; // rax
  common::tools::StringStream<common::tools::FixedBuffer<4096> > *v45; // rax
  const std::string *v46; // rax
  const std::string *v47; // rax
  int v48; // r15d
  Creature *v49; // r15
  Entity *v50; // rax
  EntityViewMgr *ViewMgr; // rax
  common::tools::StringStream<common::tools::FixedBuffer<4096> > *v52; // r15
  std::__shared_ptr_access<Creature,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v53; // rax
  void (__fastcall **v54)(common::milog::MiLogStream *, std::__shared_ptr_access<Creature,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *); // rdx
  common::tools::StringStream<common::tools::FixedBuffer<4096> > *v55; // rax
  common::tools::StringStream<common::tools::FixedBuffer<4096> > *v56; // rax
  common::tools::StringStream<common::tools::FixedBuffer<4096> > *v57; // rax
  const std::string *v58; // rax
  Scene *v59; // rbx
  PlayerSceneComp *SceneComp; // rax
  uint32_t PeerId; // eax
  const std::string *v62; // rax
  Scene *v63; // rax
  const std::shared_ptr<Creature> *v64; // rax
  int v65; // r15d
  Scene *v66; // r15
  Entity *v67; // rax
  std::vector<std::shared_ptr<Avatar>>::size_type v68; // r15
  int v69; // r15d
  std::vector<std::shared_ptr<Avatar>>::size_type v70; // rax
  const std::shared_ptr<Avatar> *v71; // rax
  std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v72; // rax
  unsigned __int64 v73; // rdx
  EntitySightGroup *v74; // r15
  int v75; // r15d
  Creature *v76; // r15
  common::tools::StringStream<common::tools::FixedBuffer<4096> > *v77; // r15
  std::__shared_ptr_access<Creature,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v78; // rax
  void (__fastcall **v79)(common::milog::MiLogStream *, std::__shared_ptr_access<Creature,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *); // rdx
  common::tools::StringStream<common::tools::FixedBuffer<4096> > *v80; // rax
  common::tools::StringStream<common::tools::FixedBuffer<4096> > *v81; // r15
  std::__shared_ptr_access<Player,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v82; // rax
  unsigned int v83; // eax
  common::tools::StringStream<common::tools::FixedBuffer<4096> > *v84; // rax
  int v85; // r15d
  int v86; // r15d
  int32_t result; // eax
  unsigned int real_uid; // [rsp+2Ch] [rbp-294h]
  unsigned int uid; // [rsp+30h] [rbp-290h]
  uint32_t idx; // [rsp+34h] [rbp-28Ch]
  std::vector<std::shared_ptr<Creature>>::iterator __for_begin; // [rsp+38h] [rbp-288h] BYREF
  std::vector<std::shared_ptr<Creature>>::iterator __for_end; // [rsp+40h] [rbp-280h] BYREF
  std::vector<std::shared_ptr<Creature>> *__for_range; // [rsp+48h] [rbp-278h]
  common::milog::MiLogStream v95; // [rsp+50h] [rbp-270h] BYREF
  char v96[592]; // [rsp+70h] [rbp-250h] BYREF

  v4 = (unsigned __int64)v96;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v5 = __asan_stack_malloc_4(544LL);
    if ( v5 )
      v4 = v5;
  }
  *(_QWORD *)v4 = 1102416563LL;
  *(_QWORD *)(v4 + 8) = "12 32 4 14 entity_id:6144 48 4 14 entity_id:6249 64 16 8 oss:6274 96 16 17 creature_ptr:6279 128"
                        " 16 20 auth_avatar_ptr:6293 160 16 15 player_ptr:6294 192 16 29 creature_sight_group_ptr:6295 22"
                        "4 16 22 target_player_ptr:6166 256 24 17 creature_vec:6275 320 24 15 avatar_vec:6285 384 48 12 v"
                        "isitor:6276 464 48 13 pvisitor:6286";
  *(_QWORD *)(v4 + 16) = changeAuthority;
  v6 = (_DWORD *)(v4 >> 3);
  v6[536862720] = -235802127;
  v6[536862721] = -234556924;
  v6[536862722] = -219021312;
  v6[536862723] = -219021312;
  v6[536862724] = -219021312;
  v6[536862725] = -219021312;
  v6[536862726] = -219021312;
  v6[536862727] = -219021312;
  v6[536862728] = -234881024;
  v6[536862729] = -218959118;
  v6[536862730] = -234881024;
  v6[536862731] = -218959118;
  v6[536862733] = -219021312;
  v6[536862734] = 62194;
  v6[536862736] = -202116109;
  if ( std::vector<std::string>::empty(param_vec) )
  {
    common::milog::MiLogStream::create(
      &v95,
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/player/gm/player_gm_comp.cpp",
      "changeAuthority",
      6114);
    common::milog::MiLogStream::operator<<<char [17],(char *[17])0>(&v95, (const char (*)[17])"param not enough");
    common::milog::MiLogStream::~MiLogStream(&v95);
    v3 = -1;
    goto LABEL_156;
  }
  v7 = std::vector<std::string>::operator[](param_vec, 0LL);
  if ( std::operator==<char>(v7, "FORCE") )
  {
    std::string::operator=(ret_msg, "AUTHORITY FORCE IS UNAVAILABLE");
    v3 = -1;
    goto LABEL_156;
  }
  v8 = std::vector<std::string>::operator[](param_vec, 0LL);
  if ( std::operator==<char>(v8, off_26352320) )
  {
    if ( std::vector<std::string>::size(param_vec) <= 1 )
      goto LABEL_78;
    *(_DWORD *)(v4 + 32) = 0;
    v9 = std::vector<std::string>::operator[](param_vec, 1uLL);
    if ( common::tools::StringUtils::strToNum<unsigned int>(v9, (unsigned int *)(v4 + 32), 1) )
      goto LABEL_80;
    if ( *(_BYTE *)(((unsigned __int64)&context->scene >> 3) + 0x7FFF8000) )
      __asan_report_load8(&context->scene);
    Scene::findEntity<Creature>((const Scene *const)(v4 + 96), (uint32_t)context->scene);
    if ( std::operator==<Creature>(0LL, (const std::shared_ptr<Creature> *)(v4 + 96)) )
    {
      std::string::operator=(ret_msg, "creature not exist");
      v3 = 504;
      v10 = 0;
      goto LABEL_44;
    }
    if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
      __asan_report_load8(&context->player);
    toThisPtr<Player>((Player *)(v4 + 128));
    *(_DWORD *)(v4 + 48) = Player::getUid(context->player);
    if ( std::vector<std::string>::size(param_vec) > 2 )
    {
      v11 = std::vector<std::string>::operator[](param_vec, 2uLL);
      if ( common::tools::StringUtils::strToNum<unsigned int>(v11, (unsigned int *)(v4 + 48), 1) )
      {
        std::string::operator=(ret_msg, "invalid uid");
        v3 = -1;
LABEL_28:
        v13 = 0;
LABEL_43:
        std::shared_ptr<Player>::~shared_ptr((std::shared_ptr<Player> *const)(v4 + 128));
        v10 = v13;
LABEL_44:
        std::shared_ptr<Creature>::~shared_ptr((std::shared_ptr<Creature> *const)(v4 + 96));
        if ( v10 )
          goto LABEL_155;
        goto LABEL_156;
      }
      if ( *(_BYTE *)(((unsigned __int64)&context->scene >> 3) + 0x7FFF8000) )
        __asan_report_load8(&context->scene);
      Scene::findPlayer((const Scene *const)(v4 + 224), (uint32_t)context->scene);
      if ( std::operator==<Player>(0LL, (const std::shared_ptr<Player> *)(v4 + 224)) )
      {
        std::string::operator=(ret_msg, &off_2635C240);
        v3 = -1;
        v12 = 0;
      }
      else
      {
        std::shared_ptr<Player>::operator=(
          (std::shared_ptr<Player> *const)(v4 + 128),
          (const std::shared_ptr<Player> *)(v4 + 224));
        v12 = 1;
      }
      std::shared_ptr<Player>::~shared_ptr((std::shared_ptr<Player> *const)(v4 + 224));
      if ( v12 != 1 )
        goto LABEL_28;
    }
    std::__shared_ptr_access<Creature,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Creature,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 96));
    Entity::getSightGroup((const Entity *const)(v4 + 160));
    if ( std::operator!=<EntitySightGroup>((const std::shared_ptr<EntitySightGroup> *)(v4 + 160), 0LL) )
    {
      v14 = std::__shared_ptr_access<EntitySightGroup,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<EntitySightGroup,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 160));
      std::shared_ptr<Player>::shared_ptr(
        (std::shared_ptr<Player> *const)(v4 + 224),
        (const std::shared_ptr<Player> *)(v4 + 128));
      LOBYTE(v14) = EntitySightGroup::refreshAuthority(v14, (PlayerPtr *)(v4 + 224), 0) != 0;
      std::shared_ptr<Player>::~shared_ptr((std::shared_ptr<Player> *const)(v4 + 224));
      if ( (_BYTE)v14 )
      {
LABEL_31:
        std::string::operator=(ret_msg, "refreshAuthority failed");
        v3 = -1;
        v15 = 0;
LABEL_42:
        std::shared_ptr<EntitySightGroup>::~shared_ptr((std::shared_ptr<EntitySightGroup> *const)(v4 + 160));
        v13 = v15 == 1;
        goto LABEL_43;
      }
    }
    else
    {
      v16 = std::__shared_ptr_access<Creature,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Creature,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 96));
      std::shared_ptr<Player>::shared_ptr(
        (std::shared_ptr<Player> *const)(v4 + 224),
        (const std::shared_ptr<Player> *)(v4 + 128));
      LOBYTE(v16) = Creature::refreshAuthority(v16, (PlayerPtr *)(v4 + 224), 0) != 0;
      std::shared_ptr<Player>::~shared_ptr((std::shared_ptr<Player> *const)(v4 + 224));
      if ( (_BYTE)v16 )
        goto LABEL_31;
    }
    real_uid = 0;
    if ( *(_BYTE *)(((unsigned __int64)&context->scene >> 3) + 0x7FFF8000) )
      __asan_report_load8(&context->scene);
    scene = context->scene;
    v18 = std::__shared_ptr_access<Creature,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Creature,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 96));
    Creature::getAuthorityPeerId(v18);
    Scene::findPeerPlayer((const Scene *const)(v4 + 192), (uint32_t)scene);
    if ( std::operator!=<Player>((const std::shared_ptr<Player> *)(v4 + 192), 0LL) )
    {
      v19 = std::__shared_ptr_access<Player,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Player,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 192));
      real_uid = Player::getUid(v19);
    }
    common::tools::StringStream<common::tools::FixedBuffer<4096>>::StringStream((common::tools::StringStream<common::tools::FixedBuffer<4096> > *const)(v4 + 224));
    v20 = common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(
            (common::tools::StringStream<common::tools::FixedBuffer<4096> > *const)(v4 + 224),
            "[AUTH]Entity:");
    v21 = std::__shared_ptr_access<Creature,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Creature,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 96));
    if ( *(_BYTE *)(((unsigned __int64)v21 >> 3) + 0x7FFF8000) )
      __asan_report_load8(v21);
    v22 = *(void (__fastcall ***)(common::milog::MiLogStream *, std::__shared_ptr_access<Creature,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *))v21->baseclass_0;
    if ( *(_BYTE *)((*(_QWORD *)v21->baseclass_0 >> 3) + 0x7FFF8000LL) )
      __asan_report_load8(*(_QWORD *)v21->baseclass_0);
    (*v22)(&v95, v21);
    v23 = common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(v20, (const std::string *)&v95);
    v24 = common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(v23, "\n");
    v25 = common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(v24, " try set auth:");
    v26 = common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(v25, *(_DWORD *)(v4 + 48));
    v27 = common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(v26, " now auth uid:");
    common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(v27, real_uid);
    std::string::~string(&v95);
    common::tools::StringStream<common::tools::FixedBuffer<4096>>::str[abi:cxx11](
      (std::string *)&v95,
      (common::tools::StringStream<common::tools::FixedBuffer<4096> > *const)(v4 + 224));
    std::string::operator=(ret_msg, &v95);
    std::string::~string(&v95);
    common::tools::StringStream<common::tools::FixedBuffer<4096>>::~StringStream((common::tools::StringStream<common::tools::FixedBuffer<4096> > *const)(v4 + 224));
    std::shared_ptr<Player>::~shared_ptr((std::shared_ptr<Player> *const)(v4 + 192));
    v15 = 1;
    goto LABEL_42;
  }
  v28 = std::vector<std::string>::operator[](param_vec, 0LL);
  if ( std::operator==<char>(v28, "ONCE") )
  {
    if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
      __asan_report_load8(&context->player);
    toThisPtr<Player>((Player *)(v4 + 160));
    if ( *(_BYTE *)(((unsigned __int64)&context->scene >> 3) + 0x7FFF8000) )
      __asan_report_load8(&context->scene);
    v29 = context->scene;
    v30 = std::__shared_ptr_access<Player,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Player,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 160));
    Player::getUid(v30);
    Scene::findPlayerViewMgr((const Scene *const)(v4 + 192), (uint32_t)v29);
    if ( std::operator==<PlayerViewMgr>((const std::shared_ptr<PlayerViewMgr> *)(v4 + 192), 0LL) )
    {
      std::string::operator=(ret_msg, "player_view_mgr_ptr not exist");
      v3 = -1;
      v31 = 0;
    }
    else
    {
      if ( *(_BYTE *)(((unsigned __int64)&context->scene >> 3) + 0x7FFF8000) )
        __asan_report_load8(&context->scene);
      v32 = context->scene;
      std::shared_ptr<Player>::shared_ptr(
        (std::shared_ptr<Player> *const)(v4 + 224),
        (const std::shared_ptr<Player> *)(v4 + 160));
      v33 = std::__shared_ptr_access<PlayerViewMgr,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<PlayerViewMgr,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 192));
      PlayerViewMgr::validateAndGetEntitiesInView((std::vector<std::shared_ptr<Entity>> *)(v4 + 320), v33);
      Scene::batchRefreshAuthority(
        v32,
        (const std::vector<std::shared_ptr<Entity>> *)(v4 + 320),
        (PlayerPtr *)(v4 + 224));
      std::vector<std::shared_ptr<Entity>>::~vector((std::vector<std::shared_ptr<Entity>> *const)(v4 + 320));
      std::shared_ptr<Player>::~shared_ptr((std::shared_ptr<Player> *const)(v4 + 224));
      std::string::operator=(ret_msg, "authority refresh to me");
      v31 = 1;
    }
    std::shared_ptr<PlayerViewMgr>::~shared_ptr((std::shared_ptr<PlayerViewMgr> *const)(v4 + 192));
    std::shared_ptr<Player>::~shared_ptr((std::shared_ptr<Player> *const)(v4 + 160));
    if ( v31 == 1 )
      goto LABEL_155;
    goto LABEL_156;
  }
  v34 = std::vector<std::string>::operator[](param_vec, 0LL);
  if ( std::operator==<char>(v34, "CHECK") )
  {
    if ( std::vector<std::string>::size(param_vec) <= 1 )
      goto LABEL_78;
    *(_DWORD *)(v4 + 48) = 0;
    v35 = std::vector<std::string>::operator[](param_vec, 1uLL);
    if ( !common::tools::StringUtils::strToNum<unsigned int>(v35, (unsigned int *)(v4 + 48), 1) )
    {
      if ( *(_BYTE *)(((unsigned __int64)&context->scene >> 3) + 0x7FFF8000) )
        __asan_report_load8(&context->scene);
      Scene::findEntity<Creature>((const Scene *const)(v4 + 160), (uint32_t)context->scene);
      if ( std::operator==<Creature>(0LL, (const std::shared_ptr<Creature> *)(v4 + 160)) )
      {
        std::string::operator=(ret_msg, "creature not exist");
        v3 = -1;
        v36 = 0;
      }
      else
      {
        uid = 0;
        if ( *(_BYTE *)(((unsigned __int64)&context->scene >> 3) + 0x7FFF8000) )
          __asan_report_load8(&context->scene);
        v37 = context->scene;
        v38 = std::__shared_ptr_access<Creature,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Creature,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 160));
        Creature::getAuthorityPeerId(v38);
        Scene::findPeerPlayer((const Scene *const)(v4 + 192), (uint32_t)v37);
        if ( std::operator!=<Player>((const std::shared_ptr<Player> *)(v4 + 192), 0LL) )
        {
          v39 = std::__shared_ptr_access<Player,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Player,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 192));
          uid = Player::getUid(v39);
        }
        common::tools::StringStream<common::tools::FixedBuffer<4096>>::StringStream((common::tools::StringStream<common::tools::FixedBuffer<4096> > *const)(v4 + 224));
        v40 = common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(
                (common::tools::StringStream<common::tools::FixedBuffer<4096> > *const)(v4 + 224),
                "[AUTH]Entity:");
        v41 = std::__shared_ptr_access<Creature,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Creature,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 160));
        if ( *(_BYTE *)(((unsigned __int64)v41 >> 3) + 0x7FFF8000) )
          __asan_report_load8(v41);
        v42 = *(void (__fastcall ***)(common::milog::MiLogStream *, std::__shared_ptr_access<Creature,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *))v41->baseclass_0;
        if ( *(_BYTE *)((*(_QWORD *)v41->baseclass_0 >> 3) + 0x7FFF8000LL) )
          __asan_report_load8(*(_QWORD *)v41->baseclass_0);
        (*v42)(&v95, v41);
        v43 = common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(v40, (const std::string *)&v95);
        v44 = common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(v43, "\n");
        v45 = common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(v44, " now_auth_uid:");
        common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(v45, uid);
        std::string::~string(&v95);
        common::tools::StringStream<common::tools::FixedBuffer<4096>>::str[abi:cxx11](
          (std::string *)&v95,
          (common::tools::StringStream<common::tools::FixedBuffer<4096> > *const)(v4 + 224));
        std::string::operator=(ret_msg, &v95);
        std::string::~string(&v95);
        common::tools::StringStream<common::tools::FixedBuffer<4096>>::~StringStream((common::tools::StringStream<common::tools::FixedBuffer<4096> > *const)(v4 + 224));
        std::shared_ptr<Player>::~shared_ptr((std::shared_ptr<Player> *const)(v4 + 192));
        v36 = 1;
      }
      std::shared_ptr<Creature>::~shared_ptr((std::shared_ptr<Creature> *const)(v4 + 160));
      if ( v36 == 1 )
        goto LABEL_155;
      goto LABEL_156;
    }
    goto LABEL_80;
  }
  v46 = std::vector<std::string>::operator[](param_vec, 0LL);
  if ( std::operator==<char>(v46, "CLEAR") )
  {
    if ( std::vector<std::string>::size(param_vec) <= 1 )
    {
LABEL_78:
      std::string::operator=(ret_msg, "param not enough");
      v3 = -1;
      goto LABEL_156;
    }
    *(_DWORD *)(v4 + 48) = 0;
    v47 = std::vector<std::string>::operator[](param_vec, 1uLL);
    if ( !common::tools::StringUtils::strToNum<unsigned int>(v47, (unsigned int *)(v4 + 48), 1) )
    {
      if ( *(_BYTE *)(((unsigned __int64)&context->scene >> 3) + 0x7FFF8000) )
        __asan_report_load8(&context->scene);
      Scene::findEntity<Creature>((const Scene *const)(v4 + 192), (uint32_t)context->scene);
      if ( std::operator==<Creature>(0LL, (const std::shared_ptr<Creature> *)(v4 + 192)) )
      {
        std::string::operator=(ret_msg, "creature not exist");
        v3 = -1;
        v48 = 0;
      }
      else
      {
        v49 = std::__shared_ptr_access<Creature,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Creature,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 192));
        v50 = (Entity *)std::__shared_ptr_access<Creature,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Creature,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 192));
        ViewMgr = Entity::getViewMgr(v50);
        EntityViewMgr::validateAndGetViewingPlayers((std::vector<std::shared_ptr<Player>> *)(v4 + 320), ViewMgr);
        std::shared_ptr<Player>::shared_ptr((std::shared_ptr<Player> *const)(v4 + 224), 0LL);
        Creature::onAuthorityChangedToPlayer(
          v49,
          (PlayerPtr *)(v4 + 224),
          (const std::vector<std::shared_ptr<Player>> *)(v4 + 320),
          0);
        std::shared_ptr<Player>::~shared_ptr((std::shared_ptr<Player> *const)(v4 + 224));
        std::vector<std::shared_ptr<Player>>::~vector((std::vector<std::shared_ptr<Player>> *const)(v4 + 320));
        common::tools::StringStream<common::tools::FixedBuffer<4096>>::StringStream((common::tools::StringStream<common::tools::FixedBuffer<4096> > *const)(v4 + 224));
        v52 = common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(
                (common::tools::StringStream<common::tools::FixedBuffer<4096> > *const)(v4 + 224),
                "[AUTH]Entity:");
        v53 = std::__shared_ptr_access<Creature,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Creature,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 192));
        if ( *(_BYTE *)(((unsigned __int64)v53 >> 3) + 0x7FFF8000) )
          __asan_report_load8(v53);
        v54 = *(void (__fastcall ***)(common::milog::MiLogStream *, std::__shared_ptr_access<Creature,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *))v53->baseclass_0;
        if ( *(_BYTE *)((*(_QWORD *)v53->baseclass_0 >> 3) + 0x7FFF8000LL) )
          __asan_report_load8(*(_QWORD *)v53->baseclass_0);
        (*v54)(&v95, v53);
        v55 = common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(v52, (const std::string *)&v95);
        v56 = common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(v55, "\n");
        v57 = common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(
                v56,
                " auth clear now_auth_uid:");
        common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(v57, 0);
        std::string::~string(&v95);
        common::tools::StringStream<common::tools::FixedBuffer<4096>>::str[abi:cxx11](
          (std::string *)&v95,
          (common::tools::StringStream<common::tools::FixedBuffer<4096> > *const)(v4 + 224));
        std::string::operator=(ret_msg, &v95);
        std::string::~string(&v95);
        common::tools::StringStream<common::tools::FixedBuffer<4096>>::~StringStream((common::tools::StringStream<common::tools::FixedBuffer<4096> > *const)(v4 + 224));
        v48 = 1;
      }
      std::shared_ptr<Creature>::~shared_ptr((std::shared_ptr<Creature> *const)(v4 + 192));
      if ( v48 == 1 )
        goto LABEL_155;
      goto LABEL_156;
    }
LABEL_80:
    std::string::operator=(ret_msg, "invalid entity_id");
    v3 = -1;
    goto LABEL_156;
  }
  v58 = std::vector<std::string>::operator[](param_vec, 0LL);
  if ( std::operator==<char>(v58, "ABANDON") )
  {
    if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
      __asan_report_load8(&context->player);
    Player::setIsValidForAuthority(context->player, 0);
    if ( *(_BYTE *)(((unsigned __int64)&context->scene >> 3) + 0x7FFF8000) )
      __asan_report_load8(&context->scene);
    v59 = context->scene;
    if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
      __asan_report_load8(&context->player);
    SceneComp = Player::getSceneComp(context->player);
    PeerId = PlayerSceneComp::getPeerId(SceneComp);
    Scene::refreshAuthorityByPeerId(v59, PeerId);
    std::string::operator=(ret_msg, "abandon authority, try refresh");
    goto LABEL_155;
  }
  v62 = std::vector<std::string>::operator[](param_vec, 0LL);
  if ( !std::operator==<char>(v62, "RANDOM") )
    goto LABEL_155;
  common::tools::StringStream<common::tools::FixedBuffer<4096>>::StringStream((common::tools::StringStream<common::tools::FixedBuffer<4096> > *const)(v4 + 64));
  std::vector<std::shared_ptr<Creature>>::vector((std::vector<std::shared_ptr<Creature>> *const)(v4 + 256));
  if ( *(_BYTE *)(((unsigned __int64)&context->avatar >> 3) + 0x7FFF8000) )
    __asan_report_load8(&context->avatar);
  toThisPtr<Avatar>((Avatar *)(v4 + 192));
  std::shared_ptr<Entity>::shared_ptr<Avatar,void>(
    (std::shared_ptr<Entity> *const)(v4 + 224),
    (std::shared_ptr<Avatar> *)(v4 + 192));
  ZN16AuthorityVisitorCI27VisitorESt10shared_ptrI6EntityE((AuthorityVisitor *const)(v4 + 384), (EntityPtr *)(v4 + 224));
  std::shared_ptr<Entity>::~shared_ptr((std::shared_ptr<Entity> *const)(v4 + 224));
  std::shared_ptr<Avatar>::~shared_ptr((std::shared_ptr<Avatar> *const)(v4 + 192));
  if ( *(_BYTE *)(((unsigned __int64)&context->scene >> 3) + 0x7FFF8000) )
    __asan_report_load8(&context->scene);
  v63 = context->scene;
  if ( *(_BYTE *)(((unsigned __int64)&context->avatar >> 3) + 0x7FFF8000) )
    __asan_report_load8(&context->avatar);
  Scene::getSurroundEntities<std::shared_ptr<Creature>>(
    v63,
    (Visitor *)(v4 + 384),
    (Entity *)context->avatar,
    (std::vector<std::shared_ptr<Creature>> *)(v4 + 256));
  idx = 0;
  __for_range = (std::vector<std::shared_ptr<Creature>> *)(v4 + 256);
  __for_begin._M_current = std::vector<std::shared_ptr<Creature>>::begin((std::vector<std::shared_ptr<Creature>> *const)(v4 + 256))._M_current;
  __for_end._M_current = std::vector<std::shared_ptr<Creature>>::end((std::vector<std::shared_ptr<Creature>> *const)(v4 + 256))._M_current;
  while ( __gnu_cxx::operator!=<std::shared_ptr<Creature> *,std::vector<std::shared_ptr<Creature>>>(
            &__for_begin,
            &__for_end) )
  {
    v64 = __gnu_cxx::__normal_iterator<std::shared_ptr<Creature> *,std::vector<std::shared_ptr<Creature>>>::operator*(&__for_begin);
    std::shared_ptr<Creature>::shared_ptr((std::shared_ptr<Creature> *const)(v4 + 96), v64);
    if ( std::operator==<Creature>((const std::shared_ptr<Creature> *)(v4 + 96), 0LL) )
    {
      v65 = 0;
      goto LABEL_149;
    }
    std::vector<std::shared_ptr<Avatar>>::vector((std::vector<std::shared_ptr<Avatar>> *const)(v4 + 320));
    std::shared_ptr<Entity>::shared_ptr<Creature,void>(
      (std::shared_ptr<Entity> *const)(v4 + 224),
      (const std::shared_ptr<Creature> *)(v4 + 96));
    ZN13AvatarVisitorCI27VisitorESt10shared_ptrI6EntityE((AvatarVisitor *const)(v4 + 464), (EntityPtr *)(v4 + 224));
    std::shared_ptr<Entity>::~shared_ptr((std::shared_ptr<Entity> *const)(v4 + 224));
    if ( *(_BYTE *)(((unsigned __int64)&context->scene >> 3) + 0x7FFF8000) )
      __asan_report_load8(&context->scene);
    v66 = context->scene;
    v67 = (Entity *)std::__shared_ptr_access<Creature,(__gnu_cxx::_Lock_policy)2,false,false>::operator*((const std::__shared_ptr_access<Creature,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 96));
    Scene::getSurroundEntities<std::shared_ptr<Avatar>>(
      v66,
      (Visitor *)(v4 + 464),
      v67,
      (std::vector<std::shared_ptr<Avatar>> *)(v4 + 320));
    v68 = std::vector<std::shared_ptr<Avatar>>::size((const std::vector<std::shared_ptr<Avatar>> *const)(v4 + 320));
    if ( *(_BYTE *)(((unsigned __int64)&context->scene >> 3) + 0x7FFF8000) )
      __asan_report_load8(&context->scene);
    if ( v68 != Scene::getPlayerCount(context->scene) )
    {
      v69 = 0;
      goto LABEL_139;
    }
    v70 = std::vector<std::shared_ptr<Avatar>>::size((const std::vector<std::shared_ptr<Avatar>> *const)(v4 + 320));
    v71 = std::vector<std::shared_ptr<Avatar>>::operator[](
            (std::vector<std::shared_ptr<Avatar>> *const)(v4 + 320),
            idx % v70);
    std::shared_ptr<Avatar>::shared_ptr((std::shared_ptr<Avatar> *const)(v4 + 128), v71);
    if ( std::operator==<Avatar>((const std::shared_ptr<Avatar> *)(v4 + 128), 0LL) )
    {
      std::shared_ptr<Player>::shared_ptr((std::shared_ptr<Player> *const)(v4 + 160), 0LL);
    }
    else
    {
      v72 = std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 128));
      if ( *(_BYTE *)(((unsigned __int64)v72 >> 3) + 0x7FFF8000) )
        __asan_report_load8(v72);
      v73 = *(_QWORD *)v72->baseclass_0 + 152LL;
      if ( *(_BYTE *)((v73 >> 3) + 0x7FFF8000) )
        __asan_report_load8(*(_QWORD *)v72->baseclass_0 + 152LL);
      (*(void (__fastcall **)(unsigned __int64, std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *))v73)(
        v4 + 160,
        v72);
    }
    std::__shared_ptr_access<Creature,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Creature,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 96));
    Entity::getSightGroup((const Entity *const)(v4 + 192));
    if ( std::operator!=<EntitySightGroup>((const std::shared_ptr<EntitySightGroup> *)(v4 + 192), 0LL) )
    {
      v74 = std::__shared_ptr_access<EntitySightGroup,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<EntitySightGroup,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 192));
      std::shared_ptr<Player>::shared_ptr(
        (std::shared_ptr<Player> *const)(v4 + 224),
        (const std::shared_ptr<Player> *)(v4 + 160));
      LOBYTE(v74) = EntitySightGroup::refreshAuthority(v74, (PlayerPtr *)(v4 + 224), 0) != 0;
      std::shared_ptr<Player>::~shared_ptr((std::shared_ptr<Player> *const)(v4 + 224));
      if ( !(_BYTE)v74 )
        goto LABEL_128;
    }
    else
    {
      v76 = std::__shared_ptr_access<Creature,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Creature,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 96));
      std::shared_ptr<Player>::shared_ptr(
        (std::shared_ptr<Player> *const)(v4 + 224),
        (const std::shared_ptr<Player> *)(v4 + 160));
      LOBYTE(v76) = Creature::refreshAuthority(v76, (PlayerPtr *)(v4 + 224), 0) != 0;
      std::shared_ptr<Player>::~shared_ptr((std::shared_ptr<Player> *const)(v4 + 224));
      if ( !(_BYTE)v76 )
      {
LABEL_128:
        v77 = common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(
                (common::tools::StringStream<common::tools::FixedBuffer<4096> > *const)(v4 + 64),
                "Creature:");
        v78 = std::__shared_ptr_access<Creature,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Creature,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 96));
        if ( *(_BYTE *)(((unsigned __int64)v78 >> 3) + 0x7FFF8000) )
          __asan_report_load8(v78);
        v79 = *(void (__fastcall ***)(common::milog::MiLogStream *, std::__shared_ptr_access<Creature,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *))v78->baseclass_0;
        if ( *(_BYTE *)((*(_QWORD *)v78->baseclass_0 >> 3) + 0x7FFF8000LL) )
          __asan_report_load8(*(_QWORD *)v78->baseclass_0);
        (*v79)(&v95, v78);
        v80 = common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(v77, (const std::string *)&v95);
        v81 = common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(v80, " auth_uid:");
        if ( std::operator!=<Player>((const std::shared_ptr<Player> *)(v4 + 160), 0LL) )
        {
          v82 = std::__shared_ptr_access<Player,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Player,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 160));
          v83 = Player::getUid(v82);
        }
        else
        {
          v83 = 0;
        }
        v84 = common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(v81, v83);
        common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(v84, "\n");
        std::string::~string(&v95);
        ++idx;
        v75 = 1;
        goto LABEL_136;
      }
    }
    std::string::operator=(ret_msg, "refreshAuthority failed");
    v3 = -1;
    v75 = 0;
LABEL_136:
    std::shared_ptr<EntitySightGroup>::~shared_ptr((std::shared_ptr<EntitySightGroup> *const)(v4 + 192));
    std::shared_ptr<Player>::~shared_ptr((std::shared_ptr<Player> *const)(v4 + 160));
    std::shared_ptr<Avatar>::~shared_ptr((std::shared_ptr<Avatar> *const)(v4 + 128));
    if ( v75 == 1 )
      v69 = 2;
    else
      v69 = 1;
LABEL_139:
    AvatarVisitor::~AvatarVisitor((AvatarVisitor *const)(v4 + 464));
    if ( v69 )
    {
      if ( v69 == 2 )
        v85 = 2;
      else
        v85 = 1;
    }
    else
    {
      v85 = 0;
    }
    std::vector<std::shared_ptr<Avatar>>::~vector((std::vector<std::shared_ptr<Avatar>> *const)(v4 + 320));
    if ( v85 )
    {
      if ( v85 == 2 )
        v65 = 2;
      else
        v65 = 1;
    }
    else
    {
      v65 = 0;
    }
LABEL_149:
    std::shared_ptr<Creature>::~shared_ptr((std::shared_ptr<Creature> *const)(v4 + 96));
    if ( v65 && v65 != 2 )
    {
      v86 = 0;
      goto LABEL_154;
    }
    __gnu_cxx::__normal_iterator<std::shared_ptr<Creature> *,std::vector<std::shared_ptr<Creature>>>::operator++(&__for_begin);
  }
  common::tools::StringStream<common::tools::FixedBuffer<4096>>::str[abi:cxx11](
    (std::string *)&v95,
    (common::tools::StringStream<common::tools::FixedBuffer<4096> > *const)(v4 + 64));
  std::string::operator=(ret_msg, &v95);
  std::string::~string(&v95);
  v86 = 1;
LABEL_154:
  AuthorityVisitor::~AuthorityVisitor((AuthorityVisitor *const)(v4 + 384));
  std::vector<std::shared_ptr<Creature>>::~vector((std::vector<std::shared_ptr<Creature>> *const)(v4 + 256));
  common::tools::StringStream<common::tools::FixedBuffer<4096>>::~StringStream((common::tools::StringStream<common::tools::FixedBuffer<4096> > *const)(v4 + 64));
  if ( v86 == 1 )
LABEL_155:
    v3 = 0;
LABEL_156:
  result = v3;
  if ( v96 == (char *)v4 )
  {
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8008) = 0LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8010) = 0LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8018) = 0LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8020) = 0LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8028) = 0LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8034) = 0LL;
    *(_DWORD *)((v4 >> 3) + 0x7FFF8040) = 0;
  }
  else
  {
    *(_QWORD *)v4 = 1172321806LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8020) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8028) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8030) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8038) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v4 >> 3) + 0x7FFF8040) = -168430091;
  }
  return result;
};

// Line 6321: range 0000000017D75B60-0000000017D75C02
void __cdecl changeHostRegister::changeHostRegister(changeHostRegister *const this)
{
  std::function<int(GmContext&,const std::vector<std::string>&,std::string&)> *v1; // rax
  std::allocator<char> __a; // [rsp+1Fh] [rbp-31h] BYREF
  std::string __k; // [rsp+20h] [rbp-30h] BYREF

  std::allocator<char>::allocator(&__a);
  std::string::basic_string<std::allocator<char>>(&__k, "HOST", &__a);
  v1 = std::unordered_map<std::string,std::function<int ()(GmContext &,std::vector<std::string> const&,std::string&)>>::operator[](
         &GmUtils::op_func_map[abi:cxx11],
         &__k);
  std::function<int ()(GmContext &,std::vector<std::string> const&,std::string&)>::operator=<int (&)(GmContext &,std::vector<std::string> const&,std::string&)>(
    v1,
    (int (*)(GmContext *, const std::vector<std::string> *, std::string *))changeHost);
  std::string::~string(&__k);
  std::allocator<char>::~allocator(&__a);
};

// Line 6322: range 0000000017BF5741-0000000017BF5B70
int32_t __cdecl changeHost(GmContext *context, const std::vector<std::string> *param_vec, std::string *ret_msg)
{
  int32_t v3; // r15d
  unsigned __int64 v4; // rbx
  __int64 v5; // rax
  _DWORD *v6; // r13
  Scene *scene; // r12
  common::milog::MiLogStream *v8; // rdx
  GameserverService *v9; // rax
  unsigned int GameThreadLocal; // eax
  common::milog::MiLogStream *v11; // rax
  int v12; // r14d
  Scene *v13; // r14
  int32_t result; // eax
  PlayerPtr p_player_ptr; // [rsp+20h] [rbp-C0h] BYREF
  common::milog::MiLogStream v17; // [rsp+30h] [rbp-B0h] BYREF
  char v18[144]; // [rsp+50h] [rbp-90h] BYREF

  v4 = (unsigned __int64)v18;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v5 = __asan_stack_malloc_1(96LL);
    if ( v5 )
      v4 = v5;
  }
  *(_QWORD *)v4 = 1102416563LL;
  *(_QWORD *)(v4 + 8) = "2 48 4 13 host_uid:6329 64 16 15 player_ptr:6335";
  *(_QWORD *)(v4 + 16) = changeHost;
  v6 = (_DWORD *)(v4 >> 3);
  v6[536862720] = -235802127;
  v6[536862721] = -234556943;
  v6[536862722] = -202178560;
  if ( std::vector<std::string>::empty(param_vec) )
  {
    if ( *(_BYTE *)(((unsigned __int64)&context->scene >> 3) + 0x7FFF8000) )
      __asan_report_load8(&context->scene);
    scene = context->scene;
    if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
      __asan_report_load8(&context->player);
    toThisPtr<Player>((Player *)&p_player_ptr);
    Scene::setHostPlayer(scene, &p_player_ptr);
    std::shared_ptr<Player>::~shared_ptr(&p_player_ptr);
LABEL_18:
    v3 = 0;
    goto LABEL_19;
  }
  *(_DWORD *)(v4 + 48) = 0;
  if ( common::tools::StringUtils::strVecToNum<0u,unsigned int>(param_vec, (unsigned int *)(v4 + 48)) )
  {
    common::milog::MiLogStream::create(
      &v17,
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/player/gm/player_gm_comp.cpp",
      "changeHost",
      6332);
    v8 = common::milog::MiLogStream::operator<<<char [15],(char *[15])0>(&v17, (const char (*)[15])"invalid param:");
    common::milog::MiLogStream::operator<<<std::string>(v8, param_vec);
    common::milog::MiLogStream::~MiLogStream(&v17);
    v3 = -1;
    goto LABEL_19;
  }
  v9 = ServiceBox::findService<GameserverService>();
  GameThreadLocal = (unsigned int)GameserverService::getGameThreadLocal(v9);
  PlayerMgr::findOnlinePlayer((PlayerMgr *const)(v4 + 64), GameThreadLocal + 16);
  if ( std::operator==<Player>((const std::shared_ptr<Player> *)(v4 + 64), 0LL) )
  {
    common::milog::MiLogStream::create(
      &v17,
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/player/gm/player_gm_comp.cpp",
      "changeHost",
      6338);
    v11 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(&v17, (const char (*)[16])off_2635C6C0);
    common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v11, (const unsigned int *)(v4 + 48));
    common::milog::MiLogStream::~MiLogStream(&v17);
    std::string::operator=(ret_msg, &off_2635C700);
    v3 = -1;
    v12 = 0;
  }
  else
  {
    if ( *(_BYTE *)(((unsigned __int64)&context->scene >> 3) + 0x7FFF8000) )
      __asan_report_load8(&context->scene);
    v13 = context->scene;
    std::shared_ptr<Player>::shared_ptr(&p_player_ptr, (const std::shared_ptr<Player> *)(v4 + 64));
    Scene::setHostPlayer(v13, &p_player_ptr);
    std::shared_ptr<Player>::~shared_ptr(&p_player_ptr);
    v12 = 1;
  }
  std::shared_ptr<Player>::~shared_ptr((std::shared_ptr<Player> *const)(v4 + 64));
  if ( v12 == 1 )
    goto LABEL_18;
LABEL_19:
  result = v3;
  if ( v18 == (char *)v4 )
  {
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0LL;
    *(_DWORD *)((v4 >> 3) + 0x7FFF8008) = 0;
  }
  else
  {
    *(_QWORD *)v4 = 1172321806LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v4 >> 3) + 0x7FFF8008) = -168430091;
  }
  return result;
};

// Line 6347: range 0000000017D75C04-0000000017D75CA6
void __cdecl procBuffRegister::procBuffRegister(procBuffRegister *const this)
{
  std::function<int(GmContext&,const std::vector<std::string>&,std::string&)> *v1; // rax
  std::allocator<char> __a; // [rsp+1Fh] [rbp-31h] BYREF
  std::string __k; // [rsp+20h] [rbp-30h] BYREF

  std::allocator<char>::allocator(&__a);
  std::string::basic_string<std::allocator<char>>(&__k, "BUFF", &__a);
  v1 = std::unordered_map<std::string,std::function<int ()(GmContext &,std::vector<std::string> const&,std::string&)>>::operator[](
         &GmUtils::op_func_map[abi:cxx11],
         &__k);
  std::function<int ()(GmContext &,std::vector<std::string> const&,std::string&)>::operator=<int (&)(GmContext &,std::vector<std::string> const&,std::string&)>(
    v1,
    (int (*)(GmContext *, const std::vector<std::string> *, std::string *))procBuff);
  std::string::~string(&__k);
  std::allocator<char>::~allocator(&__a);
};

// Line 6348: range 0000000017BF5B71-0000000017BF6718
int32_t __cdecl procBuff(GmContext *context, const std::vector<std::string> *param_vec, std::string *ret_msg)
{
  unsigned __int64 v3; // r12
  __int64 v4; // rax
  _DWORD *v5; // r13
  int32_t result; // eax
  const std::string *v7; // rax
  const std::string *v8; // rax
  common::milog::MiLogStream *v9; // rdx
  const std::string *v10; // rax
  common::milog::MiLogStream *v11; // rdx
  BuffComp *BuffComp; // rax
  common::milog::MiLogStream *v13; // rax
  const std::string *v14; // rax
  const std::string *v15; // rax
  common::milog::MiLogStream *v16; // rdx
  const std::string *v17; // rax
  common::milog::MiLogStream *v18; // rdx
  PlayerAvatarComp *AvatarComp; // rax
  common::milog::MiLogStream *v20; // rax
  const std::string *v21; // rax
  const std::string *v22; // rax
  common::milog::MiLogStream *v23; // rdx
  BuffComp *v24; // rax
  common::milog::MiLogStream *v25; // rax
  const std::string *v26; // rax
  const std::string *v27; // rax
  common::milog::MiLogStream *v28; // rdx
  PlayerAvatarComp *v29; // rax
  common::milog::MiLogStream *v30; // rax
  const std::string *v31; // rax
  BuffComp *v32; // rax
  common::milog::MiLogStream v34; // [rsp+20h] [rbp-A0h] BYREF
  char v35[128]; // [rsp+40h] [rbp-80h] BYREF

  v3 = (unsigned __int64)v35;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_1(96LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "2 48 4 12 buff_id:6380 64 4 12 buff_id:6418";
  *(_QWORD *)(v3 + 16) = procBuff;
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = -234556943;
  v5[536862722] = -202116348;
  if ( std::vector<std::string>::size(param_vec) <= 1 )
  {
    common::milog::MiLogStream::create(
      &v34,
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/player/gm/player_gm_comp.cpp",
      "procBuff",
      6351);
    common::milog::MiLogStream::operator<<<char [17],(char *[17])0>(&v34, (const char (*)[17])"param not enough");
    common::milog::MiLogStream::~MiLogStream(&v34);
    result = -1;
    goto LABEL_45;
  }
  v7 = std::vector<std::string>::operator[](param_vec, 0LL);
  if ( std::operator==<char>(v7, off_26356D00) )
  {
    *(_DWORD *)(v3 + 48) = 0;
    v8 = std::vector<std::string>::operator[](param_vec, 1uLL);
    if ( common::tools::StringUtils::strToNum<unsigned int>(v8, (unsigned int *)(v3 + 48), 1) )
    {
      common::milog::MiLogStream::create(
        &v34,
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/player/gm/player_gm_comp.cpp",
        "procBuff",
        6359);
      v9 = common::milog::MiLogStream::operator<<<char [15],(char *[15])0>(&v34, (const char (*)[15])"invalid param:");
      common::milog::MiLogStream::operator<<<std::string>(v9, param_vec);
      common::milog::MiLogStream::~MiLogStream(&v34);
      result = -1;
      goto LABEL_45;
    }
    *(_DWORD *)(v3 + 64) = 0;
    if ( std::vector<std::string>::size(param_vec) > 2 )
    {
      v10 = std::vector<std::string>::operator[](param_vec, 2uLL);
      if ( common::tools::StringUtils::strToNum<unsigned int>(v10, (unsigned int *)(v3 + 64), 1) )
      {
        common::milog::MiLogStream::create(
          &v34,
          &common::milog::MiLogDefault::default_log_obj_,
          3u,
          "./src/player/gm/player_gm_comp.cpp",
          "procBuff",
          6367);
        v11 = common::milog::MiLogStream::operator<<<char [15],(char *[15])0>(
                &v34,
                (const char (*)[15])"invalid param:");
        common::milog::MiLogStream::operator<<<std::string>(v11, param_vec);
        common::milog::MiLogStream::~MiLogStream(&v34);
        result = -1;
        goto LABEL_45;
      }
    }
    *(_DWORD *)(v3 + 64) *= 1000;
    if ( *(_BYTE *)(((unsigned __int64)&context->avatar >> 3) + 0x7FFF8000) )
      __asan_report_load8(&context->avatar);
    BuffComp = Avatar::getBuffComp(context->avatar);
    if ( BuffComp::addBuff(BuffComp, *(_DWORD *)(v3 + 48), *(_DWORD *)(v3 + 64)) )
    {
      common::milog::MiLogStream::create(
        &v34,
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/player/gm/player_gm_comp.cpp",
        "procBuff",
        6374);
      v13 = common::milog::MiLogStream::operator<<<char [24],(char *[24])0>(
              &v34,
              (const char (*)[24])"addBuff fails, buff_id:");
      common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v13, (const unsigned int *)(v3 + 48));
      common::milog::MiLogStream::~MiLogStream(&v34);
      result = -1;
      goto LABEL_45;
    }
    goto LABEL_44;
  }
  v14 = std::vector<std::string>::operator[](param_vec, 0LL);
  if ( std::operator==<char>(v14, "ADDTEAM") )
  {
    *(_DWORD *)(v3 + 48) = 0;
    v15 = std::vector<std::string>::operator[](param_vec, 1uLL);
    if ( common::tools::StringUtils::strToNum<unsigned int>(v15, (unsigned int *)(v3 + 48), 1) )
    {
      common::milog::MiLogStream::create(
        &v34,
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/player/gm/player_gm_comp.cpp",
        "procBuff",
        6383);
      v16 = common::milog::MiLogStream::operator<<<char [15],(char *[15])0>(&v34, (const char (*)[15])"invalid param:");
      common::milog::MiLogStream::operator<<<std::string>(v16, param_vec);
      common::milog::MiLogStream::~MiLogStream(&v34);
      result = -1;
      goto LABEL_45;
    }
    *(_DWORD *)(v3 + 64) = 0;
    if ( std::vector<std::string>::size(param_vec) > 2 )
    {
      v17 = std::vector<std::string>::operator[](param_vec, 2uLL);
      if ( common::tools::StringUtils::strToNum<unsigned int>(v17, (unsigned int *)(v3 + 64), 1) )
      {
        common::milog::MiLogStream::create(
          &v34,
          &common::milog::MiLogDefault::default_log_obj_,
          3u,
          "./src/player/gm/player_gm_comp.cpp",
          "procBuff",
          6391);
        v18 = common::milog::MiLogStream::operator<<<char [15],(char *[15])0>(
                &v34,
                (const char (*)[15])"invalid param:");
        common::milog::MiLogStream::operator<<<std::string>(v18, param_vec);
        common::milog::MiLogStream::~MiLogStream(&v34);
        result = -1;
        goto LABEL_45;
      }
    }
    *(_DWORD *)(v3 + 64) *= 1000;
    if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
      __asan_report_load8(&context->player);
    AvatarComp = Player::getAvatarComp(context->player);
    if ( (unsigned int)PlayerAvatarComp::addTeamBuff(AvatarComp, *(_DWORD *)(v3 + 48), *(_DWORD *)(v3 + 64)) )
    {
      common::milog::MiLogStream::create(
        &v34,
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/player/gm/player_gm_comp.cpp",
        "procBuff",
        6398);
      v20 = common::milog::MiLogStream::operator<<<char [24],(char *[24])0>(
              &v34,
              (const char (*)[24])"addBuff fails, buff_id:");
      common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v20, (const unsigned int *)(v3 + 48));
      common::milog::MiLogStream::~MiLogStream(&v34);
      result = -1;
      goto LABEL_45;
    }
    goto LABEL_44;
  }
  v21 = std::vector<std::string>::operator[](param_vec, 0LL);
  if ( std::operator==<char>(v21, off_26356E00) )
  {
    *(_DWORD *)(v3 + 64) = 0;
    v22 = std::vector<std::string>::operator[](param_vec, 1uLL);
    if ( common::tools::StringUtils::strToNum<unsigned int>(v22, (unsigned int *)(v3 + 64), 1) )
    {
      common::milog::MiLogStream::create(
        &v34,
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/player/gm/player_gm_comp.cpp",
        "procBuff",
        6407);
      v23 = common::milog::MiLogStream::operator<<<char [15],(char *[15])0>(&v34, (const char (*)[15])"invalid param:");
      common::milog::MiLogStream::operator<<<std::string>(v23, param_vec);
      common::milog::MiLogStream::~MiLogStream(&v34);
      result = -1;
      goto LABEL_45;
    }
    if ( *(_BYTE *)(((unsigned __int64)&context->avatar >> 3) + 0x7FFF8000) )
      __asan_report_load8(&context->avatar);
    v24 = Avatar::getBuffComp(context->avatar);
    if ( BuffComp::delBuff(v24, *(_DWORD *)(v3 + 64)) )
    {
      common::milog::MiLogStream::create(
        &v34,
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/player/gm/player_gm_comp.cpp",
        "procBuff",
        6412);
      v25 = common::milog::MiLogStream::operator<<<char [24],(char *[24])0>(
              &v34,
              (const char (*)[24])"delBuff fails, buff_id:");
      common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v25, (const unsigned int *)(v3 + 64));
      common::milog::MiLogStream::~MiLogStream(&v34);
      result = -1;
      goto LABEL_45;
    }
    goto LABEL_44;
  }
  v26 = std::vector<std::string>::operator[](param_vec, 0LL);
  if ( std::operator==<char>(v26, "DELTEAM") )
  {
    *(_DWORD *)(v3 + 64) = 0;
    v27 = std::vector<std::string>::operator[](param_vec, 1uLL);
    if ( common::tools::StringUtils::strToNum<unsigned int>(v27, (unsigned int *)(v3 + 64), 1) )
    {
      common::milog::MiLogStream::create(
        &v34,
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/player/gm/player_gm_comp.cpp",
        "procBuff",
        6421);
      v28 = common::milog::MiLogStream::operator<<<char [15],(char *[15])0>(&v34, (const char (*)[15])"invalid param:");
      common::milog::MiLogStream::operator<<<std::string>(v28, param_vec);
      common::milog::MiLogStream::~MiLogStream(&v34);
      result = -1;
      goto LABEL_45;
    }
    if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
      __asan_report_load8(&context->player);
    v29 = Player::getAvatarComp(context->player);
    if ( (unsigned int)PlayerAvatarComp::delTeamBuff(v29, *(_DWORD *)(v3 + 64)) )
    {
      common::milog::MiLogStream::create(
        &v34,
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/player/gm/player_gm_comp.cpp",
        "procBuff",
        6426);
      v30 = common::milog::MiLogStream::operator<<<char [24],(char *[24])0>(
              &v34,
              (const char (*)[24])"delBuff fails, buff_id:");
      common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v30, (const unsigned int *)(v3 + 64));
      common::milog::MiLogStream::~MiLogStream(&v34);
      result = -1;
      goto LABEL_45;
    }
    goto LABEL_44;
  }
  v31 = std::vector<std::string>::operator[](param_vec, 0LL);
  if ( !std::operator==<char>(v31, "PRINT") )
  {
LABEL_44:
    result = 0;
    goto LABEL_45;
  }
  if ( *(_BYTE *)(((unsigned __int64)&context->avatar >> 3) + 0x7FFF8000) )
    __asan_report_load8(&context->avatar);
  v32 = Avatar::getBuffComp(context->avatar);
  BuffComp::getBuffInfoByGm[abi:cxx11]((std::string *)&v34, v32);
  std::string::operator=(ret_msg, &v34);
  std::string::~string(&v34);
  result = 0;
LABEL_45:
  if ( v35 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8008) = 0;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8008) = -168430091;
  }
  return result;
};

// Line 6438: range 0000000017D75CA8-0000000017D75D4A
void __cdecl playerPauseRegister::playerPauseRegister(playerPauseRegister *const this)
{
  std::function<int(GmContext&,const std::vector<std::string>&,std::string&)> *v1; // rax
  std::allocator<char> __a; // [rsp+1Fh] [rbp-31h] BYREF
  std::string __k; // [rsp+20h] [rbp-30h] BYREF

  std::allocator<char>::allocator(&__a);
  std::string::basic_string<std::allocator<char>>(&__k, "PAUSE", &__a);
  v1 = std::unordered_map<std::string,std::function<int ()(GmContext &,std::vector<std::string> const&,std::string&)>>::operator[](
         &GmUtils::op_func_map[abi:cxx11],
         &__k);
  std::function<int ()(GmContext &,std::vector<std::string> const&,std::string&)>::operator=<int (&)(GmContext &,std::vector<std::string> const&,std::string&)>(
    v1,
    (int (*)(GmContext *, const std::vector<std::string> *, std::string *))playerPause);
  std::string::~string(&__k);
  std::allocator<char>::~allocator(&__a);
};

// Line 6439: range 0000000017BF6719-0000000017BF6935
int32_t __cdecl playerPause(GmContext *context, const std::vector<std::string> *param_vec, std::string *ret_msg)
{
  const std::string *v4; // rax
  PlayerBasicComp *BasicComp; // rax
  const std::string *v6; // rax
  PlayerBasicComp *v7; // rax
  common::milog::MiLogStream *v8; // rdx
  common::milog::MiLogStream v10; // [rsp+20h] [rbp-30h] BYREF

  if ( std::vector<std::string>::empty(param_vec) )
  {
    common::milog::MiLogStream::create(
      &v10,
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/player/gm/player_gm_comp.cpp",
      "playerPause",
      6442);
    common::milog::MiLogStream::operator<<<char [17],(char *[17])0>(&v10, (const char (*)[17])"param not enough");
    common::milog::MiLogStream::~MiLogStream(&v10);
    return -1;
  }
  v4 = std::vector<std::string>::operator[](param_vec, 0LL);
  if ( std::operator==<char>(v4, stru_263521E0.gap0) )
  {
    if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
      __asan_report_load8(&context->player);
    BasicComp = Player::getBasicComp(context->player);
    PlayerBasicComp::setIsPaused(BasicComp, 1);
    std::string::operator=(ret_msg, "pause on");
  }
  else
  {
    v6 = std::vector<std::string>::operator[](param_vec, 0LL);
    if ( !std::operator==<char>(v6, stru_26352260.gap0) )
    {
      common::milog::MiLogStream::create(
        &v10,
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/player/gm/player_gm_comp.cpp",
        "playerPause",
        6457);
      v8 = common::milog::MiLogStream::operator<<<char [15],(char *[15])0>(&v10, (const char (*)[15])"invalid param:");
      common::milog::MiLogStream::operator<<<std::string>(v8, param_vec);
      common::milog::MiLogStream::~MiLogStream(&v10);
      return -1;
    }
    if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
      __asan_report_load8(&context->player);
    v7 = Player::getBasicComp(context->player);
    PlayerBasicComp::setIsPaused(v7, 0);
    std::string::operator=(ret_msg, "pause off");
  }
  return 0;
};

// Line 6464: range 0000000017D75D4C-0000000017D75DEE
void __cdecl procMoveRegister::procMoveRegister(procMoveRegister *const this)
{
  std::function<int(GmContext&,const std::vector<std::string>&,std::string&)> *v1; // rax
  std::allocator<char> __a; // [rsp+1Fh] [rbp-31h] BYREF
  std::string __k; // [rsp+20h] [rbp-30h] BYREF

  std::allocator<char>::allocator(&__a);
  std::string::basic_string<std::allocator<char>>(&__k, "MOVE", &__a);
  v1 = std::unordered_map<std::string,std::function<int ()(GmContext &,std::vector<std::string> const&,std::string&)>>::operator[](
         &GmUtils::op_func_map[abi:cxx11],
         &__k);
  std::function<int ()(GmContext &,std::vector<std::string> const&,std::string&)>::operator=<int (&)(GmContext &,std::vector<std::string> const&,std::string&)>(
    v1,
    (int (*)(GmContext *, const std::vector<std::string> *, std::string *))procMove);
  std::string::~string(&__k);
  std::allocator<char>::~allocator(&__a);
};

// Line 6465: range 0000000017BF6936-0000000017BF6EFE
int32_t __cdecl procMove(GmContext *context, const std::vector<std::string> *param_vec, std::string *ret_msg)
{
  unsigned __int64 v3; // rbx
  __int64 v4; // rax
  unsigned __int64 v5; // r13
  int32_t result; // eax
  const std::string *v7; // rax
  common::milog::MiLogStream *v8; // rdx
  const std::string *v9; // rax
  common::milog::MiLogStream *v10; // rdx
  PlayerGmComp *GmComp; // rax
  const std::string *v12; // rax
  common::milog::MiLogStream *v13; // rdx
  const std::string *v14; // rax
  common::milog::MiLogStream *v15; // rdx
  common::milog::MiLogStream *v16; // rdx
  common::milog::MiLogStream v18; // [rsp+20h] [rbp-80h] BYREF
  char v19[96]; // [rsp+40h] [rbp-60h] BYREF

  v3 = (unsigned __int64)v19;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_0(64LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "1 32 1 11 is_log:6501";
  *(_QWORD *)(v3 + 16) = procMove;
  v5 = v3 >> 3;
  *(_DWORD *)(v5 + 2147450880) = -235802127;
  *(_DWORD *)(v5 + 2147450884) = -202116351;
  if ( std::vector<std::string>::empty(param_vec) )
  {
    common::milog::MiLogStream::create(
      &v18,
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/player/gm/player_gm_comp.cpp",
      "procMove",
      6468);
    common::milog::MiLogStream::operator<<<char [17],(char *[17])0>(&v18, (const char (*)[17])"param not enough");
    common::milog::MiLogStream::~MiLogStream(&v18);
    result = -1;
    goto LABEL_26;
  }
  v7 = std::vector<std::string>::operator[](param_vec, 0LL);
  if ( std::operator==<char>(v7, "SELF") )
  {
    if ( std::vector<std::string>::size(param_vec) <= 1 )
    {
      common::milog::MiLogStream::create(
        &v18,
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/player/gm/player_gm_comp.cpp",
        "procMove",
        6475);
      v8 = common::milog::MiLogStream::operator<<<char [15],(char *[15])0>(&v18, (const char (*)[15])"invalid param:");
      common::milog::MiLogStream::operator<<<std::string>(v8, param_vec);
      common::milog::MiLogStream::~MiLogStream(&v18);
      result = -1;
      goto LABEL_26;
    }
    *(_BYTE *)(v3 + 32) = 0;
    v9 = std::vector<std::string>::operator[](param_vec, 1uLL);
    if ( common::tools::StringUtils::strToNum<bool>(v9, (bool *)(v3 + 32), 1) )
    {
      common::milog::MiLogStream::create(
        &v18,
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/player/gm/player_gm_comp.cpp",
        "procMove",
        6481);
      v10 = common::milog::MiLogStream::operator<<<char [15],(char *[15])0>(&v18, (const char (*)[15])"invalid param:");
      common::milog::MiLogStream::operator<<<std::string>(v10, param_vec);
      common::milog::MiLogStream::~MiLogStream(&v18);
      result = -1;
      goto LABEL_26;
    }
    if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
      __asan_report_load8(&context->player);
    GmComp = Player::getGmComp(context->player);
    PlayerGmComp::setIsMovePacketToSelf(GmComp, *(_BYTE *)(v3 + 32));
    if ( *(_BYTE *)(v3 + 32) )
      std::string::operator=(ret_msg, "move packet is sent to self");
    else
      std::string::operator=(ret_msg, "move packet is not sent to self");
  }
  else
  {
    v12 = std::vector<std::string>::operator[](param_vec, 0LL);
    if ( !std::operator==<char>(v12, off_2635CB20) )
    {
      common::milog::MiLogStream::create(
        &v18,
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/player/gm/player_gm_comp.cpp",
        "procMove",
        6519);
      v16 = common::milog::MiLogStream::operator<<<char [15],(char *[15])0>(&v18, (const char (*)[15])"invalid param:");
      common::milog::MiLogStream::operator<<<std::string>(v16, param_vec);
      common::milog::MiLogStream::~MiLogStream(&v18);
      result = -1;
      goto LABEL_26;
    }
    if ( std::vector<std::string>::size(param_vec) <= 1 )
    {
      common::milog::MiLogStream::create(
        &v18,
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/player/gm/player_gm_comp.cpp",
        "procMove",
        6498);
      v13 = common::milog::MiLogStream::operator<<<char [15],(char *[15])0>(&v18, (const char (*)[15])"invalid param:");
      common::milog::MiLogStream::operator<<<std::string>(v13, param_vec);
      common::milog::MiLogStream::~MiLogStream(&v18);
      result = -1;
      goto LABEL_26;
    }
    *(_BYTE *)(v3 + 32) = 0;
    v14 = std::vector<std::string>::operator[](param_vec, 1uLL);
    if ( common::tools::StringUtils::strToNum<bool>(v14, (bool *)(v3 + 32), 1) )
    {
      common::milog::MiLogStream::create(
        &v18,
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/player/gm/player_gm_comp.cpp",
        "procMove",
        6504);
      v15 = common::milog::MiLogStream::operator<<<char [15],(char *[15])0>(&v18, (const char (*)[15])"invalid param:");
      common::milog::MiLogStream::operator<<<std::string>(v15, param_vec);
      common::milog::MiLogStream::~MiLogStream(&v18);
      result = -1;
      goto LABEL_26;
    }
    PlayerGmComp::setLogMovePacket(*(_BYTE *)(v3 + 32));
    if ( *(_BYTE *)(v3 + 32) )
      std::string::operator=(ret_msg, "move packet is written to log");
    else
      std::string::operator=(ret_msg, "move packet is not written to log");
  }
  result = 0;
LABEL_26:
  if ( v19 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 6525: range 0000000017D75DF0-0000000017D75E92
void __cdecl procLoginRegister::procLoginRegister(procLoginRegister *const this)
{
  std::function<int(GmContext&,const std::vector<std::string>&,std::string&)> *v1; // rax
  std::allocator<char> __a; // [rsp+1Fh] [rbp-31h] BYREF
  std::string __k; // [rsp+20h] [rbp-30h] BYREF

  std::allocator<char>::allocator(&__a);
  std::string::basic_string<std::allocator<char>>(&__k, "LOGIN", &__a);
  v1 = std::unordered_map<std::string,std::function<int ()(GmContext &,std::vector<std::string> const&,std::string&)>>::operator[](
         &GmUtils::op_func_map[abi:cxx11],
         &__k);
  std::function<int ()(GmContext &,std::vector<std::string> const&,std::string&)>::operator=<int (&)(GmContext &,std::vector<std::string> const&,std::string&)>(
    v1,
    (int (*)(GmContext *, const std::vector<std::string> *, std::string *))procLogin);
  std::string::~string(&__k);
  std::allocator<char>::~allocator(&__a);
};

// Line 6526: range 0000000017BF6EFF-0000000017BF70BA
int32_t __cdecl procLogin(GmContext *context, const std::vector<std::string> *param_vec, std::string *ret_msg)
{
  const std::string *v4; // rax
  const std::string *v5; // rax
  PlayerLoginComp *LoginComp; // rax
  common::milog::MiLogStream v7; // [rsp+20h] [rbp-30h] BYREF

  if ( std::vector<std::string>::empty(param_vec) )
  {
    common::milog::MiLogStream::create(
      &v7,
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/player/gm/player_gm_comp.cpp",
      "procLogin",
      6529);
    common::milog::MiLogStream::operator<<<char [17],(char *[17])0>(&v7, (const char (*)[17])"param not enough");
    common::milog::MiLogStream::~MiLogStream(&v7);
    return -1;
  }
  v4 = std::vector<std::string>::operator[](param_vec, 0LL);
  if ( !std::operator==<char>(v4, "REWARD") )
    return 0;
  if ( std::vector<std::string>::size(param_vec) <= 1 )
  {
    common::milog::MiLogStream::create(
      &v7,
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/player/gm/player_gm_comp.cpp",
      "procLogin",
      6536);
    common::milog::MiLogStream::operator<<<char [19],(char *[19])0>(&v7, (const char (*)[19])"LOGIN REWARD CLEAR");
    common::milog::MiLogStream::~MiLogStream(&v7);
    return -1;
  }
  v5 = std::vector<std::string>::operator[](param_vec, 1uLL);
  if ( !std::operator==<char>(v5, "CLEAR") )
    return 0;
  if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
    __asan_report_load8(&context->player);
  LoginComp = Player::getLoginComp(context->player);
  PlayerLoginComp::clearLoginRewardHistoryGm(LoginComp);
  return 0;
};

// Line 6548: range 0000000017D75E94-0000000017D75F36
void __cdecl procRegionRegister::procRegionRegister(procRegionRegister *const this)
{
  std::function<int(GmContext&,const std::vector<std::string>&,std::string&)> *v1; // rax
  std::allocator<char> __a; // [rsp+1Fh] [rbp-31h] BYREF
  std::string __k; // [rsp+20h] [rbp-30h] BYREF

  std::allocator<char>::allocator(&__a);
  std::string::basic_string<std::allocator<char>>(&__k, "REGION", &__a);
  v1 = std::unordered_map<std::string,std::function<int ()(GmContext &,std::vector<std::string> const&,std::string&)>>::operator[](
         &GmUtils::op_func_map[abi:cxx11],
         &__k);
  std::function<int ()(GmContext &,std::vector<std::string> const&,std::string&)>::operator=<int (&)(GmContext &,std::vector<std::string> const&,std::string&)>(
    v1,
    (int (*)(GmContext *, const std::vector<std::string> *, std::string *))procRegion);
  std::string::~string(&__k);
  std::allocator<char>::~allocator(&__a);
};

// Line 6549: range 0000000017BF7883-0000000017BF87FB
int32_t __cdecl procRegion(GmContext *context, const std::vector<std::string> *param_vec, std::string *ret_msg)
{
  int32_t v3; // r14d
  unsigned __int64 v4; // r13
  __int64 v5; // rax
  _DWORD *v6; // r12
  const std::string *v7; // rax
  const std::string *v8; // rax
  common::milog::MiLogStream *v9; // rdx
  unsigned __int64 n; // rax
  double v11; // xmm0_8
  PlayerBasicComp *v12; // rax
  common::milog::MiLogStream *v13; // rdx
  int v14; // r15d
  std::__shared_ptr_access<Region,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v15; // rax
  unsigned __int64 v16; // rdx
  void (__fastcall *v17)(std::__shared_ptr_access<Region,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *, Scene *, VisionContext *, double); // r8
  const std::string *v18; // rax
  float *v19; // r8
  float *v20; // r9
  common::milog::MiLogStream *v21; // rdx
  unsigned __int64 Position; // rax
  PlayerBasicComp *BasicComp; // rax
  common::milog::MiLogStream *v24; // rdx
  int v25; // r15d
  std::__shared_ptr_access<Region,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v26; // rax
  unsigned __int64 v27; // rdx
  void (__fastcall *v28)(std::__shared_ptr_access<Region,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *, Scene *, VisionContext *); // r8
  Region *v29; // r14
  Region *v30; // r14
  int32_t result; // eax
  RegionParam region_param; // [rsp+20h] [rbp-1C0h] BYREF
  char v34[336]; // [rsp+90h] [rbp-150h] BYREF

  v4 = (unsigned __int64)v34;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v5 = __asan_stack_malloc_3(288LL);
    if ( v5 )
      v4 = v5;
  }
  *(_QWORD *)v4 = 1102416563LL;
  *(_QWORD *)(v4 + 8) = "5 32 4 11 radius:6563 48 12 15 cubic_size:6594 80 16 15 region_ptr:6555 112 16 15 player_wtr:662"
                        "3 144 112 17 region_param:6600";
  *(_QWORD *)(v4 + 16) = procRegion;
  v6 = (_DWORD *)(v4 >> 3);
  v6[536862720] = -235802127;
  v6[536862721] = 61956;
  v6[536862721] = 0x4000000;
  v6[536862722] = 62194;
  v6[536862723] = 62194;
  v6[536862724] = 62194;
  v6[536862728] = -202116109;
  if ( std::vector<std::string>::empty(param_vec) )
  {
    common::milog::MiLogStream::create(
      (common::milog::MiLogStream *)&region_param.relative_polygon_point_vec._M_impl._M_finish,
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/player/gm/player_gm_comp.cpp",
      "procRegion",
      6552);
    common::milog::MiLogStream::operator<<<char [17],(char *[17])0>(
      (common::milog::MiLogStream *const)&region_param.relative_polygon_point_vec._M_impl._M_finish,
      (const char (*)[17])"param not enough");
    common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)&region_param.relative_polygon_point_vec._M_impl._M_finish);
    v3 = -1;
    goto LABEL_67;
  }
  *(_QWORD *)(v4 + 80) = 0LL;
  *(_QWORD *)(v4 + 88) = 0LL;
  v7 = std::vector<std::string>::operator[](param_vec, 0LL);
  if ( !std::operator==<char>(v7, "S") )
  {
    v18 = std::vector<std::string>::operator[](param_vec, 0LL);
    if ( std::operator==<char>(v18, "C") )
    {
      if ( std::vector<std::string>::size(param_vec) <= 3 )
      {
        common::milog::MiLogStream::create(
          (common::milog::MiLogStream *)&region_param.relative_polygon_point_vec._M_impl._M_finish,
          &common::milog::MiLogDefault::default_log_obj_,
          3u,
          "./src/player/gm/player_gm_comp.cpp",
          "procRegion",
          6591);
        common::milog::MiLogStream::operator<<<char [17],(char *[17])0>(
          (common::milog::MiLogStream *const)&region_param.relative_polygon_point_vec._M_impl._M_finish,
          (const char (*)[17])"param not enough");
        common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)&region_param.relative_polygon_point_vec._M_impl._M_finish);
        v3 = -1;
        goto LABEL_66;
      }
      Vector3::Vector3((Vector3 *const)(v4 + 48), 0.0, 0.0, 0.0);
      if ( common::tools::StringUtils::strVecToNum<1u,float,float &,float &>(
             param_vec,
             (float *)(v4 + 48),
             (float *)(v4 + 52),
             (float *)(v4 + 56),
             v19,
             v20) )
      {
        common::milog::MiLogStream::create(
          (common::milog::MiLogStream *)&region_param.relative_polygon_point_vec._M_impl._M_finish,
          &common::milog::MiLogDefault::default_log_obj_,
          3u,
          "./src/player/gm/player_gm_comp.cpp",
          "procRegion",
          6597);
        v21 = common::milog::MiLogStream::operator<<<char [15],(char *[15])0>(
                (common::milog::MiLogStream *const)&region_param.relative_polygon_point_vec._M_impl._M_finish,
                (const char (*)[15])"invalid param:");
        common::milog::MiLogStream::operator<<<std::string>(v21, param_vec);
        common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)&region_param.relative_polygon_point_vec._M_impl._M_finish);
        v3 = -1;
        goto LABEL_66;
      }
      RegionParam::RegionParam((RegionParam *const)(v4 + 144));
      if ( *(_BYTE *)(((unsigned __int64)&context->scene >> 3) + 0x7FFF8000) )
        __asan_report_load8(&context->scene);
      *(_DWORD *)(v4 + 148) = Scene::genNewEntityId(context->scene, PROT_ENTITY_REGION);
      if ( *(_BYTE *)(((unsigned __int64)&context->avatar >> 3) + 0x7FFF8000) )
        __asan_report_load8(&context->avatar);
      Position = (unsigned __int64)Entity::getPosition((const Entity *const)context->avatar);
      if ( (char)(Position & 7) >= *(_BYTE *)((Position >> 3) + 0x7FFF8000)
        && *(_BYTE *)((Position >> 3) + 0x7FFF8000) != 0
        || *(_BYTE *)(((Position + 11) >> 3) + 0x7FFF8000) != 0
        && (char)((Position + 11) & 7) >= *(_BYTE *)(((Position + 11) >> 3) + 0x7FFF8000) )
      {
        Position = __asan_report_load_n(Position, 12LL);
      }
      *(_QWORD *)(v4 + 152) = *(_QWORD *)Position;
      *(_DWORD *)(v4 + 160) = *(_DWORD *)(Position + 8);
      *(_DWORD *)(v4 + 164) = 2;
      *(_QWORD *)(v4 + 172) = *(_QWORD *)(v4 + 48);
      *(_DWORD *)(v4 + 180) = *(_DWORD *)(v4 + 56);
      if ( *(_BYTE *)(((unsigned __int64)&context->scene >> 3) + 0x7FFF8000) )
        __asan_report_load8(&context->scene);
      *(_DWORD *)(v4 + 204) = Scene::getSceneId(context->scene);
      if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
        __asan_report_load8(&context->player);
      BasicComp = Player::getBasicComp(context->player);
      *(_DWORD *)(v4 + 144) = PlayerBasicComp::genGuid(BasicComp, GUID_NONE);
      if ( *(_DWORD *)(v4 + 144) <= 0x3B9AC9FFu )
        *(_DWORD *)(v4 + 144) += 1000000000;
      EntityMgr::createRegion((RegionParam *)&region_param.pos.z);
      std::shared_ptr<Region>::operator=(
        (std::shared_ptr<Region> *const)(v4 + 80),
        (std::shared_ptr<Region> *)&region_param.pos.z);
      std::shared_ptr<Region>::~shared_ptr((std::shared_ptr<Region> *const)&region_param.pos.z);
      if ( std::operator==<Region>((const std::shared_ptr<Region> *)(v4 + 80), 0LL) )
      {
        std::string::operator=(ret_msg, "create cubic region fails");
        common::milog::MiLogStream::create(
          (common::milog::MiLogStream *)&region_param.relative_polygon_point_vec._M_impl._M_finish,
          &common::milog::MiLogDefault::default_log_obj_,
          3u,
          "./src/player/gm/player_gm_comp.cpp",
          "procRegion",
          6612);
        v24 = common::milog::MiLogStream::operator<<<char [19],(char *[19])0>(
                (common::milog::MiLogStream *const)&region_param.relative_polygon_point_vec._M_impl._M_finish,
                (const char (*)[19])"createRegion fails");
        common::milog::MiLogStream::operator<<<std::string>(v24, param_vec);
        common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)&region_param.relative_polygon_point_vec._M_impl._M_finish);
        v3 = -1;
        v25 = 0;
      }
      else
      {
        v26 = std::__shared_ptr_access<Region,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Region,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 80));
        if ( *(_BYTE *)(((unsigned __int64)v26 >> 3) + 0x7FFF8000) )
          __asan_report_load8(v26);
        v27 = (unsigned __int64)(v26->_vptr_DescribalBase + 7);
        if ( *(_BYTE *)((v27 >> 3) + 0x7FFF8000) )
          __asan_report_load8(v26->_vptr_DescribalBase + 7);
        v28 = *(void (__fastcall **)(std::__shared_ptr_access<Region,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *, Scene *, VisionContext *))v27;
        if ( *(_BYTE *)(((unsigned __int64)&context->scene >> 3) + 0x7FFF8000) )
          __asan_report_load8(&context->scene);
        v28(v26, context->scene, &VisionContext::meet_context);
        std::string::operator=(ret_msg, "create cubic region succeeds");
        v25 = 1;
      }
      RegionParam::~RegionParam((RegionParam *const)(v4 + 144));
      if ( v25 != 1 )
        goto LABEL_66;
    }
    goto LABEL_61;
  }
  if ( std::vector<std::string>::size(param_vec) > 1 )
  {
    *(_DWORD *)(v4 + 32) = 0;
    v8 = std::vector<std::string>::operator[](param_vec, 1uLL);
    if ( common::tools::StringUtils::strToNum<float>(v8, (float *)(v4 + 32), 1) )
    {
      common::milog::MiLogStream::create(
        (common::milog::MiLogStream *)&region_param.relative_polygon_point_vec._M_impl._M_finish,
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/player/gm/player_gm_comp.cpp",
        "procRegion",
        6566);
      v9 = common::milog::MiLogStream::operator<<<char [15],(char *[15])0>(
             (common::milog::MiLogStream *const)&region_param.relative_polygon_point_vec._M_impl._M_finish,
             (const char (*)[15])"invalid param:");
      common::milog::MiLogStream::operator<<<std::string>(v9, param_vec);
      common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)&region_param.relative_polygon_point_vec._M_impl._M_finish);
      v3 = -1;
      goto LABEL_66;
    }
    RegionParam::RegionParam((RegionParam *const)(v4 + 144));
    if ( *(_BYTE *)(((unsigned __int64)&context->scene >> 3) + 0x7FFF8000) )
      __asan_report_load8(&context->scene);
    *(_DWORD *)(v4 + 148) = Scene::genNewEntityId(context->scene, PROT_ENTITY_REGION);
    if ( *(_BYTE *)(((unsigned __int64)&context->avatar >> 3) + 0x7FFF8000) )
      __asan_report_load8(&context->avatar);
    n = (unsigned __int64)Entity::getPosition((const Entity *const)context->avatar);
    if ( (char)(n & 7) >= *(_BYTE *)((n >> 3) + 0x7FFF8000) && *(_BYTE *)((n >> 3) + 0x7FFF8000) != 0
      || *(_BYTE *)(((n + 11) >> 3) + 0x7FFF8000) != 0
      && (char)((n + 11) & 7) >= *(_BYTE *)(((n + 11) >> 3) + 0x7FFF8000) )
    {
      n = __asan_report_load_n(n, 12LL);
    }
    *(_QWORD *)(v4 + 152) = *(_QWORD *)n;
    *(_DWORD *)(v4 + 160) = *(_DWORD *)(n + 8);
    *(_DWORD *)(v4 + 164) = 1;
    *(_QWORD *)&v11 = *(unsigned int *)(v4 + 32);
    *(_DWORD *)(v4 + 168) = LODWORD(v11);
    if ( *(_BYTE *)(((unsigned __int64)&context->scene >> 3) + 0x7FFF8000) )
      v11 = __asan_report_load8(&context->scene);
    *(_DWORD *)(v4 + 204) = Scene::getSceneId(context->scene);
    if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
      v11 = __asan_report_load8(&context->player);
    v12 = Player::getBasicComp(context->player);
    *(_DWORD *)(v4 + 144) = PlayerBasicComp::genGuid(v12, GUID_NONE);
    if ( *(_DWORD *)(v4 + 144) <= 0x3B9AC9FFu )
      *(_DWORD *)(v4 + 144) += 1000000000;
    EntityMgr::createRegion(&region_param);
    std::shared_ptr<Region>::operator=(
      (std::shared_ptr<Region> *const)(v4 + 80),
      (std::shared_ptr<Region> *)&region_param);
    std::shared_ptr<Region>::~shared_ptr((std::shared_ptr<Region> *const)&region_param);
    if ( std::operator==<Region>((const std::shared_ptr<Region> *)(v4 + 80), 0LL) )
    {
      std::string::operator=(ret_msg, "create sphere region fails");
      common::milog::MiLogStream::create(
        (common::milog::MiLogStream *)&region_param.relative_polygon_point_vec._M_impl._M_finish,
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/player/gm/player_gm_comp.cpp",
        "procRegion",
        6581);
      v13 = common::milog::MiLogStream::operator<<<char [19],(char *[19])0>(
              (common::milog::MiLogStream *const)&region_param.relative_polygon_point_vec._M_impl._M_finish,
              (const char (*)[19])"createRegion fails");
      common::milog::MiLogStream::operator<<<std::string>(v13, param_vec);
      common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)&region_param.relative_polygon_point_vec._M_impl._M_finish);
      v3 = -1;
      v14 = 0;
    }
    else
    {
      v15 = std::__shared_ptr_access<Region,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Region,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 80));
      if ( *(_BYTE *)(((unsigned __int64)v15 >> 3) + 0x7FFF8000) )
        v11 = __asan_report_load8(v15);
      v16 = (unsigned __int64)(v15->_vptr_DescribalBase + 7);
      if ( *(_BYTE *)((v16 >> 3) + 0x7FFF8000) )
        v11 = __asan_report_load8(v15->_vptr_DescribalBase + 7);
      v17 = *(void (__fastcall **)(std::__shared_ptr_access<Region,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *, Scene *, VisionContext *, double))v16;
      if ( *(_BYTE *)(((unsigned __int64)&context->scene >> 3) + 0x7FFF8000) )
        v11 = __asan_report_load8(&context->scene);
      v17(v15, context->scene, &VisionContext::meet_context, v11);
      std::string::operator=(ret_msg, "create sphere region succeeds");
      v14 = 1;
    }
    RegionParam::~RegionParam((RegionParam *const)(v4 + 144));
    if ( v14 != 1 )
      goto LABEL_66;
LABEL_61:
    if ( std::operator==<Region>((const std::shared_ptr<Region> *)(v4 + 80), 0LL) )
    {
      common::milog::MiLogStream::create(
        (common::milog::MiLogStream *)&region_param.relative_polygon_point_vec._M_impl._M_finish,
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/player/gm/player_gm_comp.cpp",
        "procRegion",
        6620);
      common::milog::MiLogStream::operator<<<char [19],(char *[19])0>(
        (common::milog::MiLogStream *const)&region_param.relative_polygon_point_vec._M_impl._M_finish,
        (const char (*)[19])"region_ptr is null");
      common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)&region_param.relative_polygon_point_vec._M_impl._M_finish);
      v3 = -1;
    }
    else
    {
      if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
        __asan_report_load8(&context->player);
      toThisPtr<Player>((Player *)&region_param.cubic_size.y);
      std::weak_ptr<Player>::weak_ptr<Player,void>(
        (std::weak_ptr<Player> *const)(v4 + 112),
        (const std::shared_ptr<Player> *)&region_param.cubic_size.y);
      std::shared_ptr<Player>::~shared_ptr((std::shared_ptr<Player> *const)&region_param.cubic_size.y);
      v29 = std::__shared_ptr_access<Region,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Region,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 80));
      std::shared_ptr<Region>::shared_ptr(
        (std::shared_ptr<Region> *const)&region_param.group_ptr._M_refcount,
        (const std::shared_ptr<Region> *)(v4 + 80));
      std::weak_ptr<Player>::weak_ptr(
        (std::weak_ptr<Player> *const)&region_param.cylinder_radius,
        (const std::weak_ptr<Player> *)(v4 + 112));
      std::function<void ()(Entity &)>::function<procRegion(GmContext &,std::vector<std::string> const&,std::string&)::{lambda(Entity &)#1},void,void>(
        (std::function<void(Entity&)> *const)&region_param.relative_polygon_point_vec._M_impl._M_finish,
        (procRegion::<lambda(Entity&)> *)&region_param.group_ptr._M_refcount);
      Region::setAddNotifyFunc(
        v29,
        (std::function<void(Entity&)> *)&region_param.relative_polygon_point_vec._M_impl._M_finish);
      std::function<void ()(Entity &)>::~function((std::function<void(Entity&)> *const)&region_param.relative_polygon_point_vec._M_impl._M_finish);
      procRegion(GmContext &,std::vector<std::string> const&,std::string&)::{lambda(Entity &)#1}::~Entity((procRegion::<lambda(Entity&)> *const)&region_param.group_ptr._M_refcount);
      v30 = std::__shared_ptr_access<Region,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Region,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 80));
      std::shared_ptr<Region>::shared_ptr(
        (std::shared_ptr<Region> *const)&region_param.group_ptr._M_refcount,
        (const std::shared_ptr<Region> *)(v4 + 80));
      std::weak_ptr<Player>::weak_ptr(
        (std::weak_ptr<Player> *const)&region_param.cylinder_radius,
        (const std::weak_ptr<Player> *)(v4 + 112));
      std::function<void ()(Entity &)>::function<procRegion(GmContext &,std::vector<std::string> const&,std::string&)::{lambda(Entity &)#2},void,void>(
        (std::function<void(Entity&)> *const)&region_param.relative_polygon_point_vec._M_impl._M_finish,
        (procRegion::<lambda(Entity&)> *)&region_param.group_ptr._M_refcount);
      Region::setDelNotifyFunc(
        v30,
        (std::function<void(Entity&)> *)&region_param.relative_polygon_point_vec._M_impl._M_finish);
      std::function<void ()(Entity &)>::~function((std::function<void(Entity&)> *const)&region_param.relative_polygon_point_vec._M_impl._M_finish);
      procRegion(GmContext &,std::vector<std::string> const&,std::string&)::{lambda(Entity &)#2}::~Entity((procRegion::<lambda(Entity&)> *const)&region_param.group_ptr._M_refcount);
      v3 = 0;
      std::weak_ptr<Player>::~weak_ptr((std::weak_ptr<Player> *const)(v4 + 112));
    }
    goto LABEL_66;
  }
  common::milog::MiLogStream::create(
    (common::milog::MiLogStream *)&region_param.relative_polygon_point_vec._M_impl._M_finish,
    &common::milog::MiLogDefault::default_log_obj_,
    3u,
    "./src/player/gm/player_gm_comp.cpp",
    "procRegion",
    6560);
  common::milog::MiLogStream::operator<<<char [17],(char *[17])0>(
    (common::milog::MiLogStream *const)&region_param.relative_polygon_point_vec._M_impl._M_finish,
    (const char (*)[17])"param not enough");
  common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)&region_param.relative_polygon_point_vec._M_impl._M_finish);
  v3 = -1;
LABEL_66:
  std::shared_ptr<Region>::~shared_ptr((std::shared_ptr<Region> *const)(v4 + 80));
LABEL_67:
  result = v3;
  if ( v34 == (char *)v4 )
  {
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8008) = 0LL;
    *(_DWORD *)((v4 >> 3) + 0x7FFF8010) = 0;
    *(_DWORD *)((v4 >> 3) + 0x7FFF8020) = 0;
  }
  else
  {
    *(_QWORD *)v4 = 1172321806LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v4 >> 3) + 0x7FFF8020) = -168430091;
  }
  return result;
};

// Line 6624: range 0000000017D4C992-0000000017D4C9D2
void __cdecl procRegion(GmContext &,std::vector<std::string> const&,std::string&)::{lambda(Entity &)#1}::Entity(
        procRegion::<lambda(Entity&)> *const this,
        const procRegion::<lambda(Entity&)> *a2)
{
  std::shared_ptr<Region>::shared_ptr(&this->__region_ptr, &a2->__region_ptr);
  std::weak_ptr<Player>::weak_ptr(&this->__player_wtr, &a2->__player_wtr);
};

// Line 6624: range 0000000017D4C886-0000000017D4C8C6
void __cdecl procRegion(GmContext &,std::vector<std::string> const&,std::string&)::{lambda(Entity &)#1}::Entity(
        procRegion::<lambda(Entity&)> *const this,
        procRegion::<lambda(Entity&)> *a2)
{
  std::shared_ptr<Region>::shared_ptr(&this->__region_ptr, &a2->__region_ptr);
  std::weak_ptr<Player>::weak_ptr(&this->__player_wtr, &a2->__player_wtr);
};

// Line 6624: range 0000000017BF70BC-0000000017BF7473
void __cdecl procRegion(GmContext &,std::vector<std::string> const&,std::string&)::{lambda(Entity &)#1}::operator()(
        const procRegion::<lambda(Entity&)> *const __closure,
        Entity *entity)
{
  unsigned __int64 v2; // r13
  __int64 v3; // rax
  _DWORD *v4; // rbx
  std::__shared_ptr_access<Region,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v5; // rax
  void (__fastcall **vptr_DescribalBase)(std::string *, std::__shared_ptr_access<Region,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *); // rdx
  int (**v7)(...); // rax
  Player *v8; // rax
  std::string __rhs; // [rsp+10h] [rbp-160h] BYREF
  std::string __lhs; // [rsp+30h] [rbp-140h] BYREF
  std::string v11; // [rsp+50h] [rbp-120h] BYREF
  std::string v12; // [rsp+70h] [rbp-100h] BYREF
  std::string value; // [rsp+90h] [rbp-E0h] BYREF
  char v14[192]; // [rsp+B0h] [rbp-C0h] BYREF

  v2 = (unsigned __int64)v14;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_2(160LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "2 48 16 15 player_ptr:6626 80 40 16 gm_talk_rsp:6629";
  *(_QWORD *)(v2 + 16) = procRegion(GmContext &,std::vector<std::string> const&,std::string&)::{lambda(Entity &)#1}::operator();
  v4 = (_DWORD *)(v2 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = 61937;
  v4[536862722] = 62194;
  v4[536862723] = -218103808;
  v4[536862724] = -202116109;
  std::weak_ptr<Player>::lock((const std::weak_ptr<Player> *const)(v2 + 48));
  if ( std::operator!=<Player>((const std::shared_ptr<Player> *)(v2 + 48), 0LL) )
  {
    proto::GmTalkRsp::GmTalkRsp((proto::GmTalkRsp *const)(v2 + 80));
    v5 = std::__shared_ptr_access<Region,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Region,(__gnu_cxx::_Lock_policy)2,false,false> *const)__closure);
    if ( *(_BYTE *)(((unsigned __int64)v5 >> 3) + 0x7FFF8000) )
      __asan_report_load8(v5);
    vptr_DescribalBase = (void (__fastcall **)(std::string *, std::__shared_ptr_access<Region,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *))v5->_vptr_DescribalBase;
    if ( *(_BYTE *)(((unsigned __int64)v5->_vptr_DescribalBase >> 3) + 0x7FFF8000) )
      __asan_report_load8(v5->_vptr_DescribalBase);
    (*vptr_DescribalBase)(&v12, v5);
    if ( *(_BYTE *)(((unsigned __int64)entity >> 3) + 0x7FFF8000) )
      __asan_report_load8(entity);
    v7 = entity->_vptr_DescribalBase;
    if ( *(_BYTE *)(((unsigned __int64)entity->_vptr_DescribalBase >> 3) + 0x7FFF8000) )
      __asan_report_load8(entity->_vptr_DescribalBase);
    (*v7)(&__rhs, entity);
    std::operator+<char>(&__lhs, "[ENTER] entity:", &__rhs);
    std::operator+<char>(&v11, &__lhs, ", enter region:");
    std::operator+<char>(&value, &v11, &v12);
    proto::GmTalkRsp::set_retmsg((proto::GmTalkRsp *const)(v2 + 80), &value);
    std::string::~string(&value);
    std::string::~string(&v11);
    std::string::~string(&__lhs);
    std::string::~string(&__rhs);
    std::string::~string(&v12);
    v8 = std::__shared_ptr_access<Player,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Player,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 48));
    Player::sendProto(v8, (const google::protobuf::Message *)(v2 + 80));
    proto::GmTalkRsp::~GmTalkRsp((proto::GmTalkRsp *const)(v2 + 80));
  }
  std::shared_ptr<Player>::~shared_ptr((std::shared_ptr<Player> *const)(v2 + 48));
  if ( v14 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8010) = 0;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8010) = -168430091;
  }
};

// Line 6624: range 0000000017BF7474-0000000017BF749E
void __cdecl procRegion(GmContext &,std::vector<std::string> const&,std::string&)::{lambda(Entity &)#1}::~Entity(
        procRegion::<lambda(Entity&)> *const this)
{
  std::weak_ptr<Player>::~weak_ptr(&this->__player_wtr);
  std::shared_ptr<Region>::~shared_ptr(&this->__region_ptr);
};

// Line 6634: range 0000000017D4CBD0-0000000017D4CC10
void __cdecl procRegion(GmContext &,std::vector<std::string> const&,std::string&)::{lambda(Entity &)#2}::Entity(
        procRegion::<lambda(Entity&)> *const this,
        const procRegion::<lambda(Entity&)> *a2)
{
  std::shared_ptr<Region>::shared_ptr(&this->__region_ptr, &a2->__region_ptr);
  std::weak_ptr<Player>::weak_ptr(&this->__player_wtr, &a2->__player_wtr);
};

// Line 6634: range 0000000017D4CAC4-0000000017D4CB04
void __cdecl procRegion(GmContext &,std::vector<std::string> const&,std::string&)::{lambda(Entity &)#2}::Entity(
        procRegion::<lambda(Entity&)> *const this,
        procRegion::<lambda(Entity&)> *a2)
{
  std::shared_ptr<Region>::shared_ptr(&this->__region_ptr, &a2->__region_ptr);
  std::weak_ptr<Player>::weak_ptr(&this->__player_wtr, &a2->__player_wtr);
};

// Line 6634: range 0000000017BF74A0-0000000017BF7857
void __cdecl procRegion(GmContext &,std::vector<std::string> const&,std::string&)::{lambda(Entity &)#2}::operator()(
        const procRegion::<lambda(Entity&)> *const __closure,
        Entity *entity)
{
  unsigned __int64 v2; // r13
  __int64 v3; // rax
  _DWORD *v4; // rbx
  std::__shared_ptr_access<Region,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v5; // rax
  void (__fastcall **vptr_DescribalBase)(std::string *, std::__shared_ptr_access<Region,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *); // rdx
  int (**v7)(...); // rax
  Player *v8; // rax
  std::string __rhs; // [rsp+10h] [rbp-160h] BYREF
  std::string __lhs; // [rsp+30h] [rbp-140h] BYREF
  std::string v11; // [rsp+50h] [rbp-120h] BYREF
  std::string v12; // [rsp+70h] [rbp-100h] BYREF
  std::string value; // [rsp+90h] [rbp-E0h] BYREF
  char v14[192]; // [rsp+B0h] [rbp-C0h] BYREF

  v2 = (unsigned __int64)v14;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_2(160LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "2 48 16 15 player_ptr:6636 80 40 16 gm_talk_rsp:6639";
  *(_QWORD *)(v2 + 16) = procRegion(GmContext &,std::vector<std::string> const&,std::string&)::{lambda(Entity &)#2}::operator();
  v4 = (_DWORD *)(v2 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = 61937;
  v4[536862722] = 62194;
  v4[536862723] = -218103808;
  v4[536862724] = -202116109;
  std::weak_ptr<Player>::lock((const std::weak_ptr<Player> *const)(v2 + 48));
  if ( std::operator!=<Player>((const std::shared_ptr<Player> *)(v2 + 48), 0LL) )
  {
    proto::GmTalkRsp::GmTalkRsp((proto::GmTalkRsp *const)(v2 + 80));
    v5 = std::__shared_ptr_access<Region,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Region,(__gnu_cxx::_Lock_policy)2,false,false> *const)__closure);
    if ( *(_BYTE *)(((unsigned __int64)v5 >> 3) + 0x7FFF8000) )
      __asan_report_load8(v5);
    vptr_DescribalBase = (void (__fastcall **)(std::string *, std::__shared_ptr_access<Region,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *))v5->_vptr_DescribalBase;
    if ( *(_BYTE *)(((unsigned __int64)v5->_vptr_DescribalBase >> 3) + 0x7FFF8000) )
      __asan_report_load8(v5->_vptr_DescribalBase);
    (*vptr_DescribalBase)(&v12, v5);
    if ( *(_BYTE *)(((unsigned __int64)entity >> 3) + 0x7FFF8000) )
      __asan_report_load8(entity);
    v7 = entity->_vptr_DescribalBase;
    if ( *(_BYTE *)(((unsigned __int64)entity->_vptr_DescribalBase >> 3) + 0x7FFF8000) )
      __asan_report_load8(entity->_vptr_DescribalBase);
    (*v7)(&__rhs, entity);
    std::operator+<char>(&__lhs, "[EXIT] entity:", &__rhs);
    std::operator+<char>(&v11, &__lhs, ", exit region:");
    std::operator+<char>(&value, &v11, &v12);
    proto::GmTalkRsp::set_retmsg((proto::GmTalkRsp *const)(v2 + 80), &value);
    std::string::~string(&value);
    std::string::~string(&v11);
    std::string::~string(&__lhs);
    std::string::~string(&__rhs);
    std::string::~string(&v12);
    v8 = std::__shared_ptr_access<Player,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Player,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 48));
    Player::sendProto(v8, (const google::protobuf::Message *)(v2 + 80));
    proto::GmTalkRsp::~GmTalkRsp((proto::GmTalkRsp *const)(v2 + 80));
  }
  std::shared_ptr<Player>::~shared_ptr((std::shared_ptr<Player> *const)(v2 + 48));
  if ( v14 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8010) = 0;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8010) = -168430091;
  }
};

// Line 6634: range 0000000017BF7858-0000000017BF7882
void __cdecl procRegion(GmContext &,std::vector<std::string> const&,std::string&)::{lambda(Entity &)#2}::~Entity(
        procRegion::<lambda(Entity&)> *const this)
{
  std::weak_ptr<Player>::~weak_ptr(&this->__player_wtr);
  std::shared_ptr<Region>::~shared_ptr(&this->__region_ptr);
};

// Line 6647: range 0000000017D75F38-0000000017D75FDA
void __cdecl procOpenStateRegister::procOpenStateRegister(procOpenStateRegister *const this)
{
  std::function<int(GmContext&,const std::vector<std::string>&,std::string&)> *v1; // rax
  std::allocator<char> __a; // [rsp+1Fh] [rbp-31h] BYREF
  std::string __k; // [rsp+20h] [rbp-30h] BYREF

  std::allocator<char>::allocator(&__a);
  std::string::basic_string<std::allocator<char>>(&__k, "OPENSTATE", &__a);
  v1 = std::unordered_map<std::string,std::function<int ()(GmContext &,std::vector<std::string> const&,std::string&)>>::operator[](
         &GmUtils::op_func_map[abi:cxx11],
         &__k);
  std::function<int ()(GmContext &,std::vector<std::string> const&,std::string&)>::operator=<int (&)(GmContext &,std::vector<std::string> const&,std::string&)>(
    v1,
    (int (*)(GmContext *, const std::vector<std::string> *, std::string *))procOpenState);
  std::string::~string(&__k);
  std::allocator<char>::~allocator(&__a);
};

// Line 6648: range 0000000017BF87FC-0000000017BF8B9F
int32_t __cdecl procOpenState(GmContext *context, const std::vector<std::string> *param_vec, std::string *ret_msg)
{
  unsigned __int64 v3; // rbx
  __int64 v4; // rax
  unsigned __int64 v5; // r12
  int32_t result; // eax
  const std::string *v7; // rax
  const std::string *v8; // rax
  std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v9; // rax
  _BOOL4 value; // [rsp+24h] [rbp-CCh]
  std::unordered_map<unsigned int,data::OpenStateConfig>::const_iterator __for_begin; // [rsp+28h] [rbp-C8h] BYREF
  std::unordered_map<unsigned int,data::OpenStateConfig>::const_iterator __for_end; // [rsp+30h] [rbp-C0h] BYREF
  PlayerBasicComp *basic_comp; // [rsp+38h] [rbp-B8h]
  const std::unordered_map<unsigned int,data::OpenStateConfig> *__for_range; // [rsp+40h] [rbp-B0h]
  const std::pair<unsigned int const,data::OpenStateConfig> *v15; // [rsp+48h] [rbp-A8h]
  std::tuple_element<0,const std::pair<unsigned int const,data::OpenStateConfig> >::type *open_state_type; // [rsp+50h] [rbp-A0h]
  std::tuple_element<1,const std::pair<unsigned int const,data::OpenStateConfig> >::type *_; // [rsp+58h] [rbp-98h]
  std::shared_ptr<Config> v18; // [rsp+60h] [rbp-90h] BYREF
  common::milog::MiLogStream v19; // [rsp+70h] [rbp-80h] BYREF
  char v20[96]; // [rsp+90h] [rbp-60h] BYREF

  v3 = (unsigned __int64)v20;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_0(64LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "1 32 4 8 key:6666";
  *(_QWORD *)(v3 + 16) = procOpenState;
  v5 = v3 >> 3;
  *(_DWORD *)(v5 + 2147450880) = -235802127;
  *(_DWORD *)(v5 + 2147450884) = -202116348;
  if ( std::vector<std::string>::size(param_vec) > 1 )
  {
    v7 = std::vector<std::string>::operator[](param_vec, 1uLL);
    value = std::operator!=<char>(v7, "0");
    if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
      __asan_report_load8(&context->player);
    basic_comp = Player::getBasicComp(context->player);
    v8 = std::vector<std::string>::operator[](param_vec, 0LL);
    if ( std::operator==<char>(v8, _f.gap0) )
    {
      ServiceBox::findService<GameserverService>();
      GameserverService::getConfig((GameserverService *const)&v18);
      v9 = std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false> *const)&v18);
      __for_range = OpenStateExcelConfigMgr::getOpenStateConfigMap(&v9->design_config.txt_config_mgr.open_state_config_mgr);
      std::shared_ptr<Config>::~shared_ptr(&v18);
      __for_begin._M_cur = std::unordered_map<unsigned int,data::OpenStateConfig>::begin(__for_range)._M_cur;
      __for_end._M_cur = std::unordered_map<unsigned int,data::OpenStateConfig>::end(__for_range)._M_cur;
      while ( std::__detail::operator!=<std::pair<unsigned int const,data::OpenStateConfig>,false>(
                &__for_begin,
                &__for_end) )
      {
        v15 = std::__detail::_Node_const_iterator<std::pair<unsigned int const,data::OpenStateConfig>,false,false>::operator*(&__for_begin);
        open_state_type = std::get<0ul,unsigned int const,data::OpenStateConfig>(v15);
        _ = (std::tuple_element<1,const std::pair<unsigned int const,data::OpenStateConfig> >::type *)std::get<1ul,unsigned int const,data::OpenStateConfig>(v15);
        if ( *(_BYTE *)(((unsigned __int64)open_state_type >> 3) + 0x7FFF8000) != 0
          && (char)(((unsigned __int8)open_state_type & 7) + 3) >= *(_BYTE *)(((unsigned __int64)open_state_type >> 3)
                                                                            + 0x7FFF8000) )
        {
          __asan_report_load4(open_state_type);
        }
        PlayerBasicComp::setOpenState(basic_comp, *open_state_type, value, 0);
        std::__detail::_Node_const_iterator<std::pair<unsigned int const,data::OpenStateConfig>,false,false>::operator++(&__for_begin);
      }
      PlayerBasicComp::notifyAllOpenStateData(basic_comp);
    }
    else if ( !common::tools::StringUtils::strVecToNum<0u,unsigned int>(param_vec, (unsigned int *)(v3 + 32)) )
    {
      PlayerBasicComp::setOpenState(basic_comp, *(_DWORD *)(v3 + 32), value, 1);
    }
    result = 0;
  }
  else
  {
    common::milog::MiLogStream::create(
      &v19,
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/player/gm/player_gm_comp.cpp",
      "procOpenState",
      6651);
    common::milog::MiLogStream::operator<<<char [17],(char *[17])0>(&v19, (const char (*)[17])"param not enough");
    common::milog::MiLogStream::~MiLogStream(&v19);
    result = -1;
  }
  if ( v20 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 6675: range 0000000017D75FDC-0000000017D7607E
void __cdecl procReconnectRegister::procReconnectRegister(procReconnectRegister *const this)
{
  std::function<int(GmContext&,const std::vector<std::string>&,std::string&)> *v1; // rax
  std::allocator<char> __a; // [rsp+1Fh] [rbp-31h] BYREF
  std::string __k; // [rsp+20h] [rbp-30h] BYREF

  std::allocator<char>::allocator(&__a);
  std::string::basic_string<std::allocator<char>>(&__k, "RECONNECT", &__a);
  v1 = std::unordered_map<std::string,std::function<int ()(GmContext &,std::vector<std::string> const&,std::string&)>>::operator[](
         &GmUtils::op_func_map[abi:cxx11],
         &__k);
  std::function<int ()(GmContext &,std::vector<std::string> const&,std::string&)>::operator=<int (&)(GmContext &,std::vector<std::string> const&,std::string&)>(
    v1,
    (int (*)(GmContext *, const std::vector<std::string> *, std::string *))procReconnect);
  std::string::~string(&__k);
  std::allocator<char>::~allocator(&__a);
};

// Line 6676: range 0000000017BF8BA0-0000000017BF8DD4
int32_t __cdecl procReconnect(GmContext *context, const std::vector<std::string> *param_vec, std::string *ret_msg)
{
  unsigned __int64 v3; // rbx
  __int64 v4; // rax
  _DWORD *v5; // r12
  common::milog::MiLogStream *v6; // r14
  int32_t result; // eax
  unsigned int val; // [rsp+2Ch] [rbp-B4h] BYREF
  common::milog::MiLogStream v9; // [rsp+30h] [rbp-B0h] BYREF
  char v10[144]; // [rsp+50h] [rbp-90h] BYREF

  v3 = (unsigned __int64)v10;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_1(96LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "1 32 24 11 notify:6677";
  *(_QWORD *)(v3 + 16) = procReconnect;
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = -218103808;
  v5[536862722] = -202116109;
  proto::ClientReconnectNotify::ClientReconnectNotify((proto::ClientReconnectNotify *const)(v3 + 32));
  if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
    __asan_report_load8(&context->player);
  Player::sendProto(context->player, (const google::protobuf::Message *)(v3 + 32));
  common::milog::MiLogStream::create(
    &v9,
    &common::milog::MiLogDefault::default_log_obj_,
    1u,
    "./src/player/gm/player_gm_comp.cpp",
    "procReconnect",
    6679);
  v6 = common::milog::MiLogStream::operator<<<char [22],(char *[22])0>(&v9, (const char (*)[22])"RECONNECT Player uid:");
  if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
    __asan_report_load8(&context->player);
  val = Player::getUid(context->player);
  common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v6, &val);
  common::milog::MiLogStream::~MiLogStream(&v9);
  proto::ClientReconnectNotify::~ClientReconnectNotify((proto::ClientReconnectNotify *const)(v3 + 32));
  result = 0;
  if ( v10 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8008) = 0;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8008) = -168430091;
  }
  return result;
};

// Line 6683: range 0000000017D76080-0000000017D76122
void __cdecl notifyEventRegister::notifyEventRegister(notifyEventRegister *const this)
{
  std::function<int(GmContext&,const std::vector<std::string>&,std::string&)> *v1; // rax
  std::allocator<char> __a; // [rsp+1Fh] [rbp-31h] BYREF
  std::string __k; // [rsp+20h] [rbp-30h] BYREF

  std::allocator<char>::allocator(&__a);
  std::string::basic_string<std::allocator<char>>(&__k, "EVENT", &__a);
  v1 = std::unordered_map<std::string,std::function<int ()(GmContext &,std::vector<std::string> const&,std::string&)>>::operator[](
         &GmUtils::op_func_map[abi:cxx11],
         &__k);
  std::function<int ()(GmContext &,std::vector<std::string> const&,std::string&)>::operator=<int (&)(GmContext &,std::vector<std::string> const&,std::string&)>(
    v1,
    (int (*)(GmContext *, const std::vector<std::string> *, std::string *))notifyEvent);
  std::string::~string(&__k);
  std::allocator<char>::~allocator(&__a);
};

// Line 6684: range 0000000017BF8DD5-0000000017BF91C5
int32_t __cdecl notifyEvent(GmContext *context, const std::vector<std::string> *param_vec, std::string *ret_msg)
{
  unsigned __int64 v3; // r12
  __int64 v4; // rax
  _DWORD *v5; // r13
  common::milog::MiLogStream *v6; // rdx
  int32_t v7; // r14d
  const std::string *v8; // rax
  const std::string *v10; // rax
  const std::string *v11; // rax
  bool v12; // al
  PlayerEventComp *EventComp; // r14
  int32_t result; // eax
  uint32_t param_size; // [rsp+2Ch] [rbp-C4h]
  std::shared_ptr<FinishParentQuestEvent> __r; // [rsp+30h] [rbp-C0h] BYREF
  common::milog::MiLogStream v17; // [rsp+40h] [rbp-B0h] BYREF
  char v18[144]; // [rsp+60h] [rbp-90h] BYREF

  v3 = (unsigned __int64)v18;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_1(96LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "3 32 1 14 is_random:6698 48 4 20 parent_quest_id:6696 64 16 14 event_ptr:6692";
  *(_QWORD *)(v3 + 16) = notifyEvent;
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = -234556927;
  v5[536862722] = -202178560;
  param_size = std::vector<std::string>::size(param_vec);
  if ( param_size )
  {
    *(_QWORD *)(v3 + 64) = 0LL;
    *(_QWORD *)(v3 + 72) = 0LL;
    v8 = std::vector<std::string>::operator[](param_vec, 0LL);
    if ( std::operator==<char>(v8, "FINISH_PARENT_QUEST") && param_size > 1 )
    {
      *(_DWORD *)(v3 + 48) = 0;
      v10 = std::vector<std::string>::operator[](param_vec, 1uLL);
      common::tools::StringUtils::strToNum<unsigned int>(v10, (unsigned int *)(v3 + 48), 1);
      v12 = 0;
      if ( param_size > 2 )
      {
        v11 = std::vector<std::string>::operator[](param_vec, 2uLL);
        if ( std::operator==<char>(v11, "RANDOM") )
          v12 = 1;
      }
      *(_BYTE *)(v3 + 32) = v12;
      common::tools::perf::make_shared<FinishParentQuestEvent,unsigned int &,bool &>(
        (unsigned int *)&__r,
        (bool *)(v3 + 48),
        (unsigned int *)(v3 + 32),
        (bool *)(v3 + 48));
      std::shared_ptr<BaseEvent>::operator=<FinishParentQuestEvent>((std::shared_ptr<BaseEvent> *const)(v3 + 64), &__r);
      std::shared_ptr<FinishParentQuestEvent>::~shared_ptr(&__r);
    }
    if ( std::operator==<BaseEvent>((const std::shared_ptr<BaseEvent> *)(v3 + 64), 0LL) )
    {
      common::milog::MiLogStream::create(
        &v17,
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/player/gm/player_gm_comp.cpp",
        "notifyEvent",
        6704);
      common::milog::MiLogStream::operator<<<char [18],(char *[18])0>(&v17, (const char (*)[18])"event_ptr is null");
      common::milog::MiLogStream::~MiLogStream(&v17);
      v7 = -1;
    }
    else
    {
      if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
        __asan_report_load8(&context->player);
      EventComp = Player::getEventComp(context->player);
      std::shared_ptr<BaseEvent>::shared_ptr(
        (std::shared_ptr<BaseEvent> *const)&__r,
        (const std::shared_ptr<BaseEvent> *)(v3 + 64));
      PlayerEventComp::notifyEvent(EventComp, (BaseEventPtr *)&__r);
      std::shared_ptr<BaseEvent>::~shared_ptr((std::shared_ptr<BaseEvent> *const)&__r);
      v7 = 0;
    }
    std::shared_ptr<BaseEvent>::~shared_ptr((std::shared_ptr<BaseEvent> *const)(v3 + 64));
  }
  else
  {
    common::milog::MiLogStream::create(
      &v17,
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/player/gm/player_gm_comp.cpp",
      "notifyEvent",
      6688);
    v6 = common::milog::MiLogStream::operator<<<char [15],(char *[15])0>(&v17, (const char (*)[15])"invalid param:");
    common::milog::MiLogStream::operator<<<std::string>(v6, param_vec);
    common::milog::MiLogStream::~MiLogStream(&v17);
    v7 = -1;
  }
  result = v7;
  if ( v18 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8008) = 0;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8008) = -168430091;
  }
  return result;
};

// Line 6711: range 0000000017D76124-0000000017D761C6
void __cdecl gmSPlatFormRegister::gmSPlatFormRegister(gmSPlatFormRegister *const this)
{
  std::function<int(GmContext&,const std::vector<std::string>&,std::string&)> *v1; // rax
  std::allocator<char> __a; // [rsp+1Fh] [rbp-31h] BYREF
  std::string __k; // [rsp+20h] [rbp-30h] BYREF

  std::allocator<char>::allocator(&__a);
  std::string::basic_string<std::allocator<char>>(&__k, "S_PLATFORM", &__a);
  v1 = std::unordered_map<std::string,std::function<int ()(GmContext &,std::vector<std::string> const&,std::string&)>>::operator[](
         &GmUtils::op_func_map[abi:cxx11],
         &__k);
  std::function<int ()(GmContext &,std::vector<std::string> const&,std::string&)>::operator=<int (&)(GmContext &,std::vector<std::string> const&,std::string&)>(
    v1,
    (int (*)(GmContext *, const std::vector<std::string> *, std::string *))gmSPlatForm);
  std::string::~string(&__k);
  std::allocator<char>::~allocator(&__a);
};

// Line 6712: range 0000000017BF91C6-0000000017BF94A4
int32_t __cdecl gmSPlatForm(GmContext *context, const std::vector<std::string> *param_vec, std::string *ret_msg)
{
  unsigned __int64 v3; // r12
  __int64 v4; // rax
  _DWORD *v5; // r13
  int32_t v6; // r14d
  std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v7; // rax
  unsigned __int64 Rotation; // rax
  common::milog::MiLogStream *v9; // rax
  common::milog::MiLogStream *v10; // rax
  common::milog::MiLogStream *v11; // rax
  common::milog::MiLogStream *v12; // rax
  common::milog::MiLogStream *v13; // rax
  int32_t result; // eax
  common::milog::MiLogStream v15; // [rsp+20h] [rbp-B0h] BYREF
  char v16[144]; // [rsp+40h] [rbp-90h] BYREF

  v3 = (unsigned __int64)v16;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_1(96LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "2 32 12 8 rot:6718 64 16 14 avatarPtr:6713";
  *(_QWORD *)(v3 + 16) = gmSPlatForm;
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = -219020288;
  v5[536862722] = -202178560;
  if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
    __asan_report_load8(&context->player);
  Player::getCurAvatar((Player *const)(v3 + 64));
  if ( std::operator==<Avatar>((const std::shared_ptr<Avatar> *)(v3 + 64), 0LL) )
  {
    v6 = -1;
  }
  else
  {
    v7 = std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 64));
    Rotation = (unsigned __int64)Entity::getRotation((const Entity *const)v7);
    if ( (char)(Rotation & 7) >= *(_BYTE *)((Rotation >> 3) + 0x7FFF8000)
      && *(_BYTE *)((Rotation >> 3) + 0x7FFF8000) != 0
      || *(_BYTE *)(((Rotation + 11) >> 3) + 0x7FFF8000) != 0
      && (char)((Rotation + 11) & 7) >= *(_BYTE *)(((Rotation + 11) >> 3) + 0x7FFF8000) )
    {
      Rotation = __asan_report_load_n(Rotation, 12LL);
    }
    *(_QWORD *)(v3 + 32) = *(_QWORD *)Rotation;
    *(_DWORD *)(v3 + 40) = *(_DWORD *)(Rotation + 8);
    common::milog::MiLogStream::create(
      &v15,
      &common::milog::MiLogDefault::default_log_obj_,
      1u,
      "./src/player/gm/player_gm_comp.cpp",
      "gmSPlatForm",
      6719);
    v9 = common::milog::MiLogStream::operator<<<char [6],(char *[6])0>(&v15, (const char (*)[6])"zjh: ");
    v10 = common::milog::MiLogStream::operator<<<float,(float *)0>(v9, (const float *)(v3 + 32));
    v11 = common::milog::MiLogStream::operator<<<char [2],(char *[2])0>(v10, (const char (*)[2])":");
    v12 = common::milog::MiLogStream::operator<<<float,(float *)0>(v11, (const float *)(v3 + 36));
    v13 = common::milog::MiLogStream::operator<<<char [2],(char *[2])0>(v12, (const char (*)[2])":");
    common::milog::MiLogStream::operator<<<float,(float *)0>(v13, (const float *)(v3 + 40));
    common::milog::MiLogStream::~MiLogStream(&v15);
    v6 = 0;
  }
  std::shared_ptr<Avatar>::~shared_ptr((std::shared_ptr<Avatar> *const)(v3 + 64));
  result = v6;
  if ( v16 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8008) = 0;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8008) = -168430091;
  }
  return result;
};

// Line 6723: range 0000000017D761C8-0000000017D7626A
void __cdecl gmExpeditionRegister::gmExpeditionRegister(gmExpeditionRegister *const this)
{
  std::function<int(GmContext&,const std::vector<std::string>&,std::string&)> *v1; // rax
  std::allocator<char> __a; // [rsp+1Fh] [rbp-31h] BYREF
  std::string __k; // [rsp+20h] [rbp-30h] BYREF

  std::allocator<char>::allocator(&__a);
  std::string::basic_string<std::allocator<char>>(&__k, "EXPEDITION", &__a);
  v1 = std::unordered_map<std::string,std::function<int ()(GmContext &,std::vector<std::string> const&,std::string&)>>::operator[](
         &GmUtils::op_func_map[abi:cxx11],
         &__k);
  std::function<int ()(GmContext &,std::vector<std::string> const&,std::string&)>::operator=<int (&)(GmContext &,std::vector<std::string> const&,std::string&)>(
    v1,
    (int (*)(GmContext *, const std::vector<std::string> *, std::string *))gmExpedition);
  std::string::~string(&__k);
  std::allocator<char>::~allocator(&__a);
};

// Line 6724: range 0000000017BF94A5-0000000017BFAB62
int32_t __cdecl gmExpedition(GmContext *context, const std::vector<std::string> *param_vec, std::string *ret_msg)
{
  int32_t v3; // r15d
  unsigned __int64 v4; // r13
  __int64 v5; // rax
  _DWORD *v6; // r12
  int v7; // r14d
  const std::string *v8; // rax
  common::milog::MiLogStream *v9; // r14
  PlayerAvatarComp *AvatarComp; // rax
  __gnu_cxx::__normal_iterator<unsigned int*,std::vector<unsigned int> >::reference v11; // rax
  _DWORD *v12; // rdx
  common::milog::MiLogStream *v13; // rax
  const std::string *v14; // rax
  const std::string *v16; // rax
  common::milog::MiLogStream *v17; // r14
  const std::string *v18; // rax
  unsigned __int64 *v19; // rax
  std::__shared_ptr_access<FormalAvatar,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v20; // rax
  ExpeditionComp *v21; // rax
  const std::string *v22; // rax
  const std::string *v23; // rax
  unsigned __int64 *v24; // rax
  std::__shared_ptr_access<FormalAvatar,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v25; // rax
  ExpeditionComp *v26; // rax
  std::__shared_ptr_access<FormalAvatar,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v28; // rax
  ExpeditionComp *v29; // rax
  const std::string *v30; // rax
  unsigned __int64 *v31; // rax
  std::__shared_ptr_access<FormalAvatar,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v32; // rax
  ExpeditionComp *v33; // rax
  google::protobuf::Map<long unsigned int,proto::AvatarExpeditionInfo> *v34; // rax
  const std::string *v35; // rax
  const std::string *v36; // rax
  std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v37; // rax
  const std::string *v38; // rax
  const std::string *v40; // rax
  const std::string *v41; // rax
  const std::string *v42; // rax
  std::__shared_ptr_access<FormalAvatar,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v43; // rax
  ExpeditionComp *v44; // rax
  std::__shared_ptr_access<FormalAvatar,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v45; // rax
  ExpeditionComp *v46; // rax
  const std::string *v47; // rax
  unsigned __int64 *v48; // rax
  std::__shared_ptr_access<FormalAvatar,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v49; // rax
  ExpeditionComp *v50; // rax
  common::milog::MiLogStream *v51; // rax
  unsigned __int64 *v52; // rax
  std::__shared_ptr_access<FormalAvatar,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v53; // rax
  ExpeditionComp *ExpeditionComp; // rax
  void (__fastcall **vptr_DescribalBase)(unsigned __int64, ExpeditionComp *); // rdx
  int32_t result; // eax
  std::vector<unsigned int>::iterator __for_begin; // [rsp+28h] [rbp-3B8h] BYREF
  std::vector<unsigned int>::iterator __for_end; // [rsp+30h] [rbp-3B0h] BYREF
  PlayerAvatarComp *avatar_comp; // [rsp+38h] [rbp-3A8h]
  PlayerAvatarComp *avatar_comp_0; // [rsp+40h] [rbp-3A0h]
  std::vector<long unsigned int> *__for_range_5; // [rsp+48h] [rbp-398h]
  unsigned __int64 guid_3; // [rsp+50h] [rbp-390h]
  PlayerHandler *handler_ptr; // [rsp+58h] [rbp-388h]
  std::vector<long unsigned int> *__for_range_4; // [rsp+60h] [rbp-380h]
  unsigned __int64 guid_2; // [rsp+68h] [rbp-378h]
  PlayerGmComp *gm_comp; // [rsp+70h] [rbp-370h]
  const std::unordered_map<unsigned int,data::ExpeditionDataExcelConfig> *config_map; // [rsp+78h] [rbp-368h]
  const std::unordered_map<unsigned int,data::ExpeditionDataExcelConfig> *__for_range_3; // [rsp+80h] [rbp-360h]
  const std::pair<unsigned int const,data::ExpeditionDataExcelConfig> *config; // [rsp+88h] [rbp-358h]
  std::vector<long unsigned int> *__for_range_2; // [rsp+90h] [rbp-350h]
  unsigned __int64 guid_1; // [rsp+98h] [rbp-348h]
  std::vector<long unsigned int> *__for_range_1; // [rsp+A0h] [rbp-340h]
  unsigned __int64 guid_0; // [rsp+A8h] [rbp-338h]
  const proto::AvatarExpeditionBin *data; // [rsp+B0h] [rbp-330h]
  std::vector<long unsigned int> *__for_range_0; // [rsp+B8h] [rbp-328h]
  unsigned __int64 guid; // [rsp+C0h] [rbp-320h]
  std::vector<unsigned int> *__for_range; // [rsp+C8h] [rbp-318h]
  common::milog::MiLogStream v78; // [rsp+D0h] [rbp-310h] BYREF
  char v79[752]; // [rsp+F0h] [rbp-2F0h] BYREF

  v4 = (unsigned __int64)v79;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v5 = __asan_stack_malloc_4(704LL);
    if ( v5 )
      v4 = v5;
  }
  *(_QWORD *)v4 = 1102416563LL;
  *(_QWORD *)(v4 + 8) = "12 48 4 8 ret:6739 64 4 8 aid:6864 80 4 11 exp_id:6865 96 4 9 hour:6866 112 16 13 base_ptr:6731 "
                        "144 16 22 formal_avatar_ptr:6826 176 16 22 formal_avatar_ptr:6900 208 24 14 guids_vec:6727 272 2"
                        "4 14 guids_vec:6897 336 32 9 desc:6903 400 56 16 open_id_set:6847 496 144 8 rsp:6829";
  *(_QWORD *)(v4 + 16) = gmExpedition;
  v6 = (_DWORD *)(v4 >> 3);
  v6[536862720] = -235802127;
  v6[536862721] = -234556943;
  v6[536862722] = -234556924;
  v6[536862723] = 61956;
  v6[536862724] = 62194;
  v6[536862725] = 62194;
  v6[536862726] = 62194;
  v6[536862727] = -218959360;
  v6[536862728] = 62194;
  v6[536862729] = -218959360;
  v6[536862730] = 62194;
  v6[536862731] = -219021312;
  v6[536862732] = 62194;
  v6[536862734] = -218959360;
  v6[536862735] = 62194;
  v6[536862740] = -202116109;
  v6[536862741] = -202116109;
  if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
    __asan_report_load8(&context->player);
  avatar_comp = Player::getAvatarComp(context->player);
  PlayerAvatarComp::getAllAvatarGuids((std::vector<long unsigned int> *)(v4 + 208), avatar_comp);
  if ( !std::vector<std::string>::size(param_vec) )
  {
    if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
      __asan_report_load8(&context->player);
    avatar_comp_0 = Player::getAvatarComp(context->player);
    PlayerAvatarComp::getAllAvatarGuids((std::vector<long unsigned int> *)(v4 + 272), avatar_comp_0);
    __for_range_5 = (std::vector<long unsigned int> *)(v4 + 272);
    __for_begin._M_current = (unsigned int *)std::vector<unsigned long>::begin((std::vector<long unsigned int> *const)(v4 + 272))._M_current;
    __for_end._M_current = (unsigned int *)std::vector<unsigned long>::end((std::vector<long unsigned int> *const)(v4 + 272))._M_current;
    while ( __gnu_cxx::operator!=<unsigned long *,std::vector<unsigned long>>(
              (const __gnu_cxx::__normal_iterator<long unsigned int*,std::vector<long unsigned int> > *)&__for_begin,
              (const __gnu_cxx::__normal_iterator<long unsigned int*,std::vector<long unsigned int> > *)&__for_end) )
    {
      v52 = __gnu_cxx::__normal_iterator<unsigned long *,std::vector<unsigned long>>::operator*((const __gnu_cxx::__normal_iterator<long unsigned int*,std::vector<long unsigned int> > *const)&__for_begin);
      if ( *(_BYTE *)(((unsigned __int64)v52 >> 3) + 0x7FFF8000) )
        __asan_report_load8(v52);
      guid_3 = *v52;
      PlayerAvatarComp::findFormalAvatar((const PlayerAvatarComp *const)(v4 + 176), (uint64_t)avatar_comp_0, guid_3);
      if ( std::operator!=<FormalAvatar>(0LL, (const std::shared_ptr<FormalAvatar> *)(v4 + 176)) )
      {
        v53 = std::__shared_ptr_access<FormalAvatar,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<FormalAvatar,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 176));
        ExpeditionComp = FormalAvatar::getExpeditionComp(v53);
        if ( *(_BYTE *)(((unsigned __int64)ExpeditionComp >> 3) + 0x7FFF8000) )
          __asan_report_load8(ExpeditionComp);
        vptr_DescribalBase = (void (__fastcall **)(unsigned __int64, ExpeditionComp *))ExpeditionComp->_vptr_DescribalBase;
        if ( *(_BYTE *)(((unsigned __int64)ExpeditionComp->_vptr_DescribalBase >> 3) + 0x7FFF8000) )
          __asan_report_load8(ExpeditionComp->_vptr_DescribalBase);
        (*vptr_DescribalBase)(v4 + 336, ExpeditionComp);
        common::milog::MiLogStream::create(
          &v78,
          &common::milog::MiLogDefault::default_log_obj_,
          1u,
          "./src/player/gm/player_gm_comp.cpp",
          "gmExpedition",
          6904);
        common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(&v78, (const std::string *)(v4 + 336));
        common::milog::MiLogStream::~MiLogStream(&v78);
        std::string::~string((void *)(v4 + 336));
      }
      std::shared_ptr<FormalAvatar>::~shared_ptr((std::shared_ptr<FormalAvatar> *const)(v4 + 176));
      __gnu_cxx::__normal_iterator<unsigned long *,std::vector<unsigned long>>::operator++((__gnu_cxx::__normal_iterator<long unsigned int*,std::vector<long unsigned int> > *const)&__for_begin);
    }
    std::vector<unsigned long>::~vector((std::vector<long unsigned int> *const)(v4 + 272));
    goto LABEL_109;
  }
  if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
    __asan_report_load8(&context->player);
  Player::getPlayerHandlerPtr((Player *const)(v4 + 112), (uint32_t)context->player);
  if ( std::operator==<PlayerHandlerBase>((const std::shared_ptr<PlayerHandlerBase> *)(v4 + 112), 0LL) )
  {
    common::milog::MiLogStream::create(
      &v78,
      &common::milog::MiLogDefault::default_log_obj_,
      1u,
      "./src/player/gm/player_gm_comp.cpp",
      "gmExpedition",
      6734);
    common::milog::MiLogStream::operator<<<char [21],(char *[21])0>(&v78, (const char (*)[21])" get handler failed ");
    common::milog::MiLogStream::~MiLogStream(&v78);
    v3 = -1;
    v7 = 0;
  }
  else
  {
    handler_ptr = (PlayerHandler *)std::__shared_ptr_access<PlayerHandlerBase,(__gnu_cxx::_Lock_policy)2,false,false>::operator*((const std::__shared_ptr_access<PlayerHandlerBase,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 112));
    *(_DWORD *)(v4 + 48) = -1;
    v8 = std::vector<std::string>::operator[](param_vec, 0LL);
    if ( std::operator==<char>(v8, "DATA") )
    {
      common::milog::MiLogStream::create(
        &v78,
        &common::milog::MiLogDefault::default_log_obj_,
        1u,
        "./src/player/gm/player_gm_comp.cpp",
        "gmExpedition",
        6776);
      v9 = common::milog::MiLogStream::operator<<<char [14],(char *[14])0>(&v78, (const char (*)[14])" count limt: ");
      if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
        __asan_report_load8(&context->player);
      AvatarComp = Player::getAvatarComp(context->player);
      *(_DWORD *)(v4 + 96) = PlayerAvatarComp::getAvatarExpeditionCountLimit(AvatarComp);
      common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v9, (const unsigned int *)(v4 + 96));
      common::milog::MiLogStream::~MiLogStream(&v78);
      std::vector<unsigned int>::vector((std::vector<unsigned int> *const)(v4 + 272));
      if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
        __asan_report_load8(&context->player);
      toThisPtr<Player>((Player *)(v4 + 176));
      ExpeditionComp::getAllOpenedExpedition((std::vector<unsigned int> *)(v4 + 272), (PlayerPtr *)(v4 + 176));
      std::shared_ptr<Player>::~shared_ptr((std::shared_ptr<Player> *const)(v4 + 176));
      __for_range = (std::vector<unsigned int> *)(v4 + 272);
      __for_begin._M_current = std::vector<unsigned int>::begin((std::vector<unsigned int> *const)(v4 + 272))._M_current;
      __for_end._M_current = std::vector<unsigned int>::end((std::vector<unsigned int> *const)(v4 + 272))._M_current;
      while ( __gnu_cxx::operator!=<unsigned int *,std::vector<unsigned int>>(&__for_begin, &__for_end) )
      {
        v11 = __gnu_cxx::__normal_iterator<unsigned int *,std::vector<unsigned int>>::operator*(&__for_begin);
        v12 = v11;
        if ( *(_BYTE *)(((unsigned __int64)v11 >> 3) + 0x7FFF8000) != 0
          && (char)(((unsigned __int8)v11 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)v11 >> 3) + 0x7FFF8000) )
        {
          __asan_report_load4(v11);
        }
        *(_DWORD *)(v4 + 96) = *v12;
        common::milog::MiLogStream::create(
          &v78,
          &common::milog::MiLogDefault::default_log_obj_,
          1u,
          "./src/player/gm/player_gm_comp.cpp",
          "gmExpedition",
          6781);
        v13 = common::milog::MiLogStream::operator<<<char [12],(char *[12])0>(&v78, (const char (*)[12])" open_id : ");
        common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v13, (const unsigned int *)(v4 + 96));
        common::milog::MiLogStream::~MiLogStream(&v78);
        __gnu_cxx::__normal_iterator<unsigned int *,std::vector<unsigned int>>::operator++(&__for_begin);
      }
      std::vector<unsigned int>::~vector((std::vector<unsigned int> *const)(v4 + 272));
    }
    else
    {
      v14 = std::vector<std::string>::operator[](param_vec, 0LL);
      if ( std::operator==<char>(v14, "HADD") && std::vector<std::string>::size(param_vec) > 1 )
      {
        v16 = std::vector<std::string>::operator[](param_vec, 1uLL);
        common::tools::StringUtils::strToNum<unsigned int>(v16, (unsigned int *)(v4 + 80), 1);
        ExpeditionComp::addSecOffsetGM(*(_DWORD *)(v4 + 80));
        common::milog::MiLogStream::create(
          &v78,
          &common::milog::MiLogDefault::default_log_obj_,
          1u,
          "./src/player/gm/player_gm_comp.cpp",
          "gmExpedition",
          6789);
        v17 = common::milog::MiLogStream::operator<<<char [10],(char *[10])0>(&v78, (const char (*)[10])"add_sec: ");
        *(_DWORD *)(v4 + 96) = ExpeditionComp::getSecOffsetGM();
        common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v17, (const unsigned int *)(v4 + 96));
        common::milog::MiLogStream::~MiLogStream(&v78);
      }
      else
      {
        v18 = std::vector<std::string>::operator[](param_vec, 0LL);
        if ( std::operator==<char>(v18, "CALLBACK") )
        {
          __for_range_0 = (std::vector<long unsigned int> *)(v4 + 208);
          __for_begin._M_current = (unsigned int *)std::vector<unsigned long>::begin((std::vector<long unsigned int> *const)(v4 + 208))._M_current;
          __for_end._M_current = (unsigned int *)std::vector<unsigned long>::end((std::vector<long unsigned int> *const)(v4 + 208))._M_current;
          while ( __gnu_cxx::operator!=<unsigned long *,std::vector<unsigned long>>(
                    (const __gnu_cxx::__normal_iterator<long unsigned int*,std::vector<long unsigned int> > *)&__for_begin,
                    (const __gnu_cxx::__normal_iterator<long unsigned int*,std::vector<long unsigned int> > *)&__for_end) )
          {
            v19 = __gnu_cxx::__normal_iterator<unsigned long *,std::vector<unsigned long>>::operator*((const __gnu_cxx::__normal_iterator<long unsigned int*,std::vector<long unsigned int> > *const)&__for_begin);
            if ( *(_BYTE *)(((unsigned __int64)v19 >> 3) + 0x7FFF8000) )
              __asan_report_load8(v19);
            guid = *v19;
            PlayerAvatarComp::findFormalAvatar((const PlayerAvatarComp *const)(v4 + 176), (uint64_t)avatar_comp, guid);
            if ( std::operator!=<FormalAvatar>(0LL, (const std::shared_ptr<FormalAvatar> *)(v4 + 176)) )
            {
              v20 = std::__shared_ptr_access<FormalAvatar,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<FormalAvatar,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 176));
              v21 = FormalAvatar::getExpeditionComp(v20);
              ExpeditionComp::callBack(v21);
            }
            std::shared_ptr<FormalAvatar>::~shared_ptr((std::shared_ptr<FormalAvatar> *const)(v4 + 176));
            __gnu_cxx::__normal_iterator<unsigned long *,std::vector<unsigned long>>::operator++((__gnu_cxx::__normal_iterator<long unsigned int*,std::vector<long unsigned int> > *const)&__for_begin);
          }
        }
        else
        {
          v22 = std::vector<std::string>::operator[](param_vec, 0LL);
          if ( std::operator==<char>(v22, "FINISH") )
          {
            *(_DWORD *)(v4 + 96) = 0;
            if ( std::vector<std::string>::size(param_vec) > 1 )
            {
              v23 = std::vector<std::string>::operator[](param_vec, 1uLL);
              common::tools::StringUtils::strToNum<unsigned int>(v23, (unsigned int *)(v4 + 96), 1);
            }
            __for_range_1 = (std::vector<long unsigned int> *)(v4 + 208);
            __for_begin._M_current = (unsigned int *)std::vector<unsigned long>::begin((std::vector<long unsigned int> *const)(v4 + 208))._M_current;
            __for_end._M_current = (unsigned int *)std::vector<unsigned long>::end((std::vector<long unsigned int> *const)(v4 + 208))._M_current;
            while ( __gnu_cxx::operator!=<unsigned long *,std::vector<unsigned long>>(
                      (const __gnu_cxx::__normal_iterator<long unsigned int*,std::vector<long unsigned int> > *)&__for_begin,
                      (const __gnu_cxx::__normal_iterator<long unsigned int*,std::vector<long unsigned int> > *)&__for_end) )
            {
              v24 = __gnu_cxx::__normal_iterator<unsigned long *,std::vector<unsigned long>>::operator*((const __gnu_cxx::__normal_iterator<long unsigned int*,std::vector<long unsigned int> > *const)&__for_begin);
              if ( *(_BYTE *)(((unsigned __int64)v24 >> 3) + 0x7FFF8000) )
                __asan_report_load8(v24);
              guid_0 = *v24;
              PlayerAvatarComp::findFormalAvatar(
                (const PlayerAvatarComp *const)(v4 + 176),
                (uint64_t)avatar_comp,
                guid_0);
              if ( std::__shared_ptr<FormalAvatar,(__gnu_cxx::_Lock_policy)2>::operator bool((const std::__shared_ptr<FormalAvatar,(__gnu_cxx::_Lock_policy)2> *const)(v4 + 176)) )
              {
                v25 = std::__shared_ptr_access<FormalAvatar,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<FormalAvatar,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 176));
                v26 = FormalAvatar::getExpeditionComp(v25);
                data = ExpeditionComp::binData(v26);
                if ( proto::AvatarExpeditionBin::state(data) == 1
                  && (!*(_DWORD *)(v4 + 96) || proto::AvatarExpeditionBin::exp_id(data) == *(_DWORD *)(v4 + 96)) )
                {
                  v28 = std::__shared_ptr_access<FormalAvatar,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<FormalAvatar,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 176));
                  v29 = FormalAvatar::getExpeditionComp(v28);
                  ExpeditionComp::finishExpeditionGM(v29);
                }
              }
              std::shared_ptr<FormalAvatar>::~shared_ptr((std::shared_ptr<FormalAvatar> *const)(v4 + 176));
              __gnu_cxx::__normal_iterator<unsigned long *,std::vector<unsigned long>>::operator++((__gnu_cxx::__normal_iterator<long unsigned int*,std::vector<long unsigned int> > *const)&__for_begin);
            }
          }
          else
          {
            v30 = std::vector<std::string>::operator[](param_vec, 0LL);
            if ( std::operator==<char>(v30, "TAKEREWARD") )
            {
              __for_range_2 = (std::vector<long unsigned int> *)(v4 + 208);
              __for_begin._M_current = (unsigned int *)std::vector<unsigned long>::begin((std::vector<long unsigned int> *const)(v4 + 208))._M_current;
              __for_end._M_current = (unsigned int *)std::vector<unsigned long>::end((std::vector<long unsigned int> *const)(v4 + 208))._M_current;
              while ( __gnu_cxx::operator!=<unsigned long *,std::vector<unsigned long>>(
                        (const __gnu_cxx::__normal_iterator<long unsigned int*,std::vector<long unsigned int> > *)&__for_begin,
                        (const __gnu_cxx::__normal_iterator<long unsigned int*,std::vector<long unsigned int> > *)&__for_end) )
              {
                v31 = __gnu_cxx::__normal_iterator<unsigned long *,std::vector<unsigned long>>::operator*((const __gnu_cxx::__normal_iterator<long unsigned int*,std::vector<long unsigned int> > *const)&__for_begin);
                if ( *(_BYTE *)(((unsigned __int64)v31 >> 3) + 0x7FFF8000) )
                  __asan_report_load8(v31);
                guid_1 = *v31;
                PlayerAvatarComp::findFormalAvatar(
                  (const PlayerAvatarComp *const)(v4 + 144),
                  (uint64_t)avatar_comp,
                  guid_1);
                if ( std::operator!=<FormalAvatar>(0LL, (const std::shared_ptr<FormalAvatar> *)(v4 + 144)) )
                {
                  proto::AvatarExpeditionGetRewardRsp::AvatarExpeditionGetRewardRsp((proto::AvatarExpeditionGetRewardRsp *const)(v4 + 496));
                  proto::AvatarExpeditionGetRewardRsp::set_retcode(
                    (proto::AvatarExpeditionGetRewardRsp *const)(v4 + 496),
                    0);
                  v32 = std::__shared_ptr_access<FormalAvatar,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<FormalAvatar,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 144));
                  v33 = FormalAvatar::getExpeditionComp(v32);
                  ExpeditionComp::takeReward(v33, (proto::AvatarExpeditionGetRewardRsp *)(v4 + 496));
                  if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
                    __asan_report_load8(&context->player);
                  ZN13AvatarHandlerCI217PlayerHandlerBaseER6Player((AvatarHandler *const)(v4 + 176), context->player);
                  v34 = proto::AvatarExpeditionGetRewardRsp::mutable_expedition_info_map((proto::AvatarExpeditionGetRewardRsp *const)(v4 + 496));
                  AvatarHandler::fillAllAvatarExpeditionInfo((AvatarHandler *const)(v4 + 176), v34);
                  if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
                    __asan_report_load8(&context->player);
                  Player::sendProto(context->player, (const google::protobuf::Message *)(v4 + 496));
                  AvatarHandler::~AvatarHandler((AvatarHandler *const)(v4 + 176));
                  proto::AvatarExpeditionGetRewardRsp::~AvatarExpeditionGetRewardRsp((proto::AvatarExpeditionGetRewardRsp *const)(v4 + 496));
                }
                std::shared_ptr<FormalAvatar>::~shared_ptr((std::shared_ptr<FormalAvatar> *const)(v4 + 144));
                __gnu_cxx::__normal_iterator<unsigned long *,std::vector<unsigned long>>::operator++((__gnu_cxx::__normal_iterator<long unsigned int*,std::vector<long unsigned int> > *const)&__for_begin);
              }
            }
            else
            {
              v35 = std::vector<std::string>::operator[](param_vec, 0LL);
              if ( std::operator==<char>(v35, "OPEN") )
              {
                *(_DWORD *)(v4 + 96) = 0;
                if ( std::vector<std::string>::size(param_vec) > 1 )
                {
                  v36 = std::vector<std::string>::operator[](param_vec, 1uLL);
                  common::tools::StringUtils::strToNum<unsigned int>(v36, (unsigned int *)(v4 + 96), 1);
                }
                if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
                  __asan_report_load8(&context->player);
                gm_comp = Player::getGmComp(context->player);
                PlayerGmComp::getGmSetValue<std::unordered_set<unsigned int>>(
                  (std::unordered_set<unsigned int> *)(v4 + 400),
                  gm_comp,
                  1u);
                if ( *(_DWORD *)(v4 + 96) )
                {
                  std::unordered_set<unsigned int>::insert(
                    (std::unordered_set<unsigned int> *const)(v4 + 400),
                    (const std::unordered_set<unsigned int>::value_type *)(v4 + 96));
                }
                else
                {
                  ServiceBox::findService<GameserverService>();
                  GameserverService::getConfig((GameserverService *const)(v4 + 176));
                  v37 = std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 176));
                  config_map = ExpeditionDataExcelConfigMgr::getAllExpeditionConfig(&v37->design_config.txt_config_mgr.expedition_config_mgr);
                  std::shared_ptr<Config>::~shared_ptr((std::shared_ptr<Config> *const)(v4 + 176));
                  __for_range_3 = config_map;
                  __for_begin._M_current = (unsigned int *)std::unordered_map<unsigned int,data::ExpeditionDataExcelConfig>::begin(config_map)._M_cur;
                  __for_end._M_current = (unsigned int *)std::unordered_map<unsigned int,data::ExpeditionDataExcelConfig>::end(config_map)._M_cur;
                  while ( std::__detail::operator!=<std::pair<unsigned int const,data::ExpeditionDataExcelConfig>,false>(
                            (const std::__detail::_Node_iterator_base<std::pair<unsigned int const,data::ExpeditionDataExcelConfig>,false> *)&__for_begin,
                            (const std::__detail::_Node_iterator_base<std::pair<unsigned int const,data::ExpeditionDataExcelConfig>,false> *)&__for_end) )
                  {
                    config = std::__detail::_Node_const_iterator<std::pair<unsigned int const,data::ExpeditionDataExcelConfig>,false,false>::operator*((const std::__detail::_Node_const_iterator<std::pair<unsigned int const,data::ExpeditionDataExcelConfig>,false,false> *const)&__for_begin);
                    std::unordered_set<unsigned int>::insert(
                      (std::unordered_set<unsigned int> *const)(v4 + 400),
                      &config->first);
                    std::__detail::_Node_const_iterator<std::pair<unsigned int const,data::ExpeditionDataExcelConfig>,false,false>::operator++((std::__detail::_Node_const_iterator<std::pair<unsigned int const,data::ExpeditionDataExcelConfig>,false,false> *const)&__for_begin);
                  }
                }
                PlayerGmComp::setGmSetValue<std::unordered_set<unsigned int>>(
                  gm_comp,
                  1u,
                  (const std::unordered_set<unsigned int> *)(v4 + 400));
                std::unordered_set<unsigned int>::~unordered_set((std::unordered_set<unsigned int> *const)(v4 + 400));
              }
              else
              {
                v38 = std::vector<std::string>::operator[](param_vec, 0LL);
                if ( std::operator==<char>(v38, "START") && std::vector<std::string>::size(param_vec) > 3 )
                {
                  v40 = std::vector<std::string>::operator[](param_vec, 1uLL);
                  common::tools::StringUtils::strToNum<unsigned int>(v40, (unsigned int *)(v4 + 64), 1);
                  v41 = std::vector<std::string>::operator[](param_vec, 2uLL);
                  common::tools::StringUtils::strToNum<unsigned int>(v41, (unsigned int *)(v4 + 80), 1);
                  v42 = std::vector<std::string>::operator[](param_vec, 3uLL);
                  common::tools::StringUtils::strToNum<unsigned int>(v42, (unsigned int *)(v4 + 96), 1);
                  PlayerAvatarComp::findFormalAvatarByAvatarId(
                    (const PlayerAvatarComp *const)(v4 + 176),
                    (uint32_t)avatar_comp);
                  if ( std::__shared_ptr<FormalAvatar,(__gnu_cxx::_Lock_policy)2>::operator bool((const std::__shared_ptr<FormalAvatar,(__gnu_cxx::_Lock_policy)2> *const)(v4 + 176)) )
                  {
                    v43 = std::__shared_ptr_access<FormalAvatar,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<FormalAvatar,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 176));
                    v44 = FormalAvatar::getExpeditionComp(v43);
                    ExpeditionComp::startExpedition(v44, *(_DWORD *)(v4 + 80), *(_DWORD *)(v4 + 96));
                    v45 = std::__shared_ptr_access<FormalAvatar,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<FormalAvatar,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 176));
                    v46 = FormalAvatar::getExpeditionComp(v45);
                    ExpeditionComp::notifyClient(v46);
                  }
                  std::shared_ptr<FormalAvatar>::~shared_ptr((std::shared_ptr<FormalAvatar> *const)(v4 + 176));
                }
                else
                {
                  v47 = std::vector<std::string>::operator[](param_vec, 0LL);
                  if ( std::operator==<char>(v47, "RESETALL") )
                  {
                    __for_range_4 = (std::vector<long unsigned int> *)(v4 + 208);
                    __for_begin._M_current = (unsigned int *)std::vector<unsigned long>::begin((std::vector<long unsigned int> *const)(v4 + 208))._M_current;
                    __for_end._M_current = (unsigned int *)std::vector<unsigned long>::end((std::vector<long unsigned int> *const)(v4 + 208))._M_current;
                    while ( __gnu_cxx::operator!=<unsigned long *,std::vector<unsigned long>>(
                              (const __gnu_cxx::__normal_iterator<long unsigned int*,std::vector<long unsigned int> > *)&__for_begin,
                              (const __gnu_cxx::__normal_iterator<long unsigned int*,std::vector<long unsigned int> > *)&__for_end) )
                    {
                      v48 = __gnu_cxx::__normal_iterator<unsigned long *,std::vector<unsigned long>>::operator*((const __gnu_cxx::__normal_iterator<long unsigned int*,std::vector<long unsigned int> > *const)&__for_begin);
                      if ( *(_BYTE *)(((unsigned __int64)v48 >> 3) + 0x7FFF8000) )
                        __asan_report_load8(v48);
                      guid_2 = *v48;
                      PlayerAvatarComp::findFormalAvatar(
                        (const PlayerAvatarComp *const)(v4 + 176),
                        (uint64_t)avatar_comp,
                        guid_2);
                      if ( std::__shared_ptr<FormalAvatar,(__gnu_cxx::_Lock_policy)2>::operator bool((const std::__shared_ptr<FormalAvatar,(__gnu_cxx::_Lock_policy)2> *const)(v4 + 176)) )
                      {
                        v49 = std::__shared_ptr_access<FormalAvatar,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<FormalAvatar,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 176));
                        v50 = FormalAvatar::getExpeditionComp(v49);
                        ExpeditionComp::resetStateGM(v50);
                      }
                      std::shared_ptr<FormalAvatar>::~shared_ptr((std::shared_ptr<FormalAvatar> *const)(v4 + 176));
                      __gnu_cxx::__normal_iterator<unsigned long *,std::vector<unsigned long>>::operator++((__gnu_cxx::__normal_iterator<long unsigned int*,std::vector<long unsigned int> > *const)&__for_begin);
                    }
                  }
                  else
                  {
                    common::milog::MiLogStream::create(
                      &v78,
                      &common::milog::MiLogDefault::default_log_obj_,
                      3u,
                      "./src/player/gm/player_gm_comp.cpp",
                      "gmExpedition",
                      6890);
                    common::milog::MiLogStream::operator<<<char [12],(char *[12])0>(
                      &v78,
                      (const char (*)[12])"param error");
                    common::milog::MiLogStream::~MiLogStream(&v78);
                  }
                }
              }
            }
          }
        }
      }
    }
    common::milog::MiLogStream::create(
      &v78,
      &common::milog::MiLogDefault::default_log_obj_,
      1u,
      "./src/player/gm/player_gm_comp.cpp",
      "gmExpedition",
      6892);
    v51 = common::milog::MiLogStream::operator<<<char [7],(char *[7])0>(&v78, (const char (*)[7])off_2635D9C0);
    common::milog::MiLogStream::operator<<<int,(int *)0>(v51, (const int *)(v4 + 48));
    common::milog::MiLogStream::~MiLogStream(&v78);
    v7 = 1;
  }
  std::shared_ptr<PlayerHandlerBase>::~shared_ptr((std::shared_ptr<PlayerHandlerBase> *const)(v4 + 112));
  if ( v7 == 1 )
LABEL_109:
    v3 = 0;
  std::vector<unsigned long>::~vector((std::vector<long unsigned int> *const)(v4 + 208));
  result = v3;
  if ( v79 == (char *)v4 )
  {
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8008) = 0LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8010) = 0LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8018) = 0LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8020) = 0LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8028) = 0LL;
    *(_DWORD *)((v4 >> 3) + 0x7FFF8030) = 0;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8038) = 0LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8050) = 0LL;
  }
  else
  {
    *(_QWORD *)v4 = 1172321806LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8020) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8028) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8030) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8038) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8040) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8048) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8050) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 6911: range 0000000017D7626C-0000000017D7630E
void __cdecl gmDungeonTeamRegister::gmDungeonTeamRegister(gmDungeonTeamRegister *const this)
{
  std::function<int(GmContext&,const std::vector<std::string>&,std::string&)> *v1; // rax
  std::allocator<char> __a; // [rsp+1Fh] [rbp-31h] BYREF
  std::string __k; // [rsp+20h] [rbp-30h] BYREF

  std::allocator<char>::allocator(&__a);
  std::string::basic_string<std::allocator<char>>(&__k, "DUNGEONTEAM", &__a);
  v1 = std::unordered_map<std::string,std::function<int ()(GmContext &,std::vector<std::string> const&,std::string&)>>::operator[](
         &GmUtils::op_func_map[abi:cxx11],
         &__k);
  std::function<int ()(GmContext &,std::vector<std::string> const&,std::string&)>::operator=<int (&)(GmContext &,std::vector<std::string> const&,std::string&)>(
    v1,
    (int (*)(GmContext *, const std::vector<std::string> *, std::string *))gmDungeonTeam);
  std::string::~string(&__k);
  std::allocator<char>::~allocator(&__a);
};

// Line 6912: range 0000000017BFAB63-0000000017BFB834
int32_t __cdecl gmDungeonTeam(GmContext *context, const std::vector<std::string> *param_vec, std::string *ret_msg)
{
  int32_t v3; // r14d
  unsigned __int64 v4; // r13
  __int64 v5; // rax
  _DWORD *v6; // r12
  std::__shared_ptr_access<PlayerHandlerBase,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v7; // rax
  PlayerWorld *v8; // rax
  const std::string *v9; // rax
  const std::string *v10; // rax
  GameserverService *v11; // rax
  unsigned int GameThreadLocal; // eax
  const std::string *v13; // rax
  int v14; // r15d
  const std::string *v15; // rax
  const std::string *v16; // rax
  GameserverService *v17; // rax
  unsigned int v18; // eax
  const std::string *v19; // rax
  int v20; // r15d
  const std::string *v21; // rax
  const std::string *v23; // rax
  bool v24; // r14
  const std::string *v25; // rax
  const std::string *v27; // rax
  const std::string *v28; // rax
  const std::string *v29; // rax
  const std::string *v30; // rax
  const std::string *v31; // rax
  common::milog::MiLogStream *v32; // rax
  int32_t result; // eax
  int ret; // [rsp+2Ch] [rbp-194h]
  DungeonCandidateTeam *dungeon_team; // [rsp+38h] [rbp-188h]
  std::shared_ptr<Player> p_player_ptr; // [rsp+40h] [rbp-180h] BYREF
  std::string v38; // [rsp+50h] [rbp-170h] BYREF
  common::milog::MiLogStream v39; // [rsp+70h] [rbp-150h] BYREF
  char v40[304]; // [rsp+90h] [rbp-130h] BYREF

  v4 = (unsigned __int64)v40;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v5 = __asan_stack_malloc_2(256LL);
    if ( v5 )
      v4 = v5;
  }
  *(_QWORD *)v4 = 1102416563LL;
  *(_QWORD *)(v4 + 8) = "7 32 4 15 dungeon_id:7012 48 4 13 point_id:7013 64 8 16 avatar_guid:6997 96 16 18 cur_world_ptr:"
                        "6913 128 16 13 base_ptr:6919 160 16 15 player_ptr:6967 192 32 9 desc:7028";
  *(_QWORD *)(v4 + 16) = gmDungeonTeam;
  v6 = (_DWORD *)(v4 >> 3);
  v6[536862720] = -235802127;
  v6[536862721] = -234556924;
  v6[536862722] = -218959360;
  v6[536862723] = -219021312;
  v6[536862724] = -219021312;
  v6[536862725] = -219021312;
  v6[536862727] = -202116109;
  if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
    __asan_report_load8(&context->player);
  Player::getSceneComp(context->player);
  PlayerSceneComp::getCurWorld<PlayerWorld>((const PlayerSceneComp *const)(v4 + 96));
  if ( std::operator==<PlayerWorld>((const std::shared_ptr<PlayerWorld> *)(v4 + 96), 0LL) )
  {
    common::milog::MiLogStream::create(
      &v39,
      &common::milog::MiLogDefault::default_log_obj_,
      1u,
      "./src/player/gm/player_gm_comp.cpp",
      "gmDungeonTeam",
      6916);
    common::milog::MiLogStream::operator<<<char [23],(char *[23])0>(&v39, (const char (*)[23])" cur_world_ptr is null");
    common::milog::MiLogStream::~MiLogStream(&v39);
    v3 = -1;
    goto LABEL_65;
  }
  if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
    __asan_report_load8(&context->player);
  Player::getPlayerHandlerPtr((Player *const)(v4 + 128), (uint32_t)context->player);
  if ( !std::operator==<PlayerHandlerBase>((const std::shared_ptr<PlayerHandlerBase> *)(v4 + 128), 0LL) )
  {
    v7 = std::__shared_ptr_access<PlayerHandlerBase,(__gnu_cxx::_Lock_policy)2,false,false>::operator*((const std::__shared_ptr_access<PlayerHandlerBase,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 128));
    if ( v7 )
      __dynamic_cast(
        v7,
        (const struct __class_type_info *)&`typeinfo for'PlayerHandlerBase,
        (const struct __class_type_info *)&`typeinfo for'DungeonHandler,
        0LL);
    ret = 0;
    v8 = std::__shared_ptr_access<PlayerWorld,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<PlayerWorld,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 96));
    dungeon_team = PlayerWorld::getDungeonCandidateTeam(v8);
    if ( std::vector<std::string>::size(param_vec) )
    {
      v9 = std::vector<std::string>::operator[](param_vec, 0LL);
      if ( std::operator==<char>(v9, off_26356D00) )
      {
        if ( std::vector<std::string>::size(param_vec) > 1 )
        {
          *(_DWORD *)(v4 + 48) = 0;
          v10 = std::vector<std::string>::operator[](param_vec, 1uLL);
          if ( !common::tools::StringUtils::strToNum<unsigned int>(v10, (unsigned int *)(v4 + 48), 1) )
          {
            v11 = ServiceBox::findService<GameserverService>();
            GameThreadLocal = (unsigned int)GameserverService::getGameThreadLocal(v11);
            PlayerMgr::findOnlinePlayer((PlayerMgr *const)(v4 + 160), GameThreadLocal + 16);
            if ( std::operator==<Player>((const std::shared_ptr<Player> *)(v4 + 160), 0LL) )
            {
              v13 = std::vector<std::string>::operator[](param_vec, 1uLL);
              std::operator+<char>(&v38, "player_uid not online uid: ", v13);
              std::string::operator=(ret_msg, &v38);
              std::string::~string(&v38);
              v3 = -1;
              v14 = 0;
            }
            else
            {
              std::shared_ptr<Player>::shared_ptr(&p_player_ptr, (const std::shared_ptr<Player> *)(v4 + 160));
              ret = DungeonCandidateTeam::addPlayer(dungeon_team, &p_player_ptr);
              std::shared_ptr<Player>::~shared_ptr(&p_player_ptr);
              v14 = 1;
            }
            std::shared_ptr<Player>::~shared_ptr((std::shared_ptr<Player> *const)(v4 + 160));
            if ( v14 != 1 )
              goto LABEL_64;
            goto LABEL_63;
          }
LABEL_29:
          std::string::operator=(ret_msg, "para error");
          v3 = -1;
          goto LABEL_64;
        }
        if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
          __asan_report_load8(&context->player);
        toThisPtr<Player>((Player *)&p_player_ptr);
        ret = DungeonCandidateTeam::addPlayer(dungeon_team, &p_player_ptr);
        std::shared_ptr<Player>::~shared_ptr(&p_player_ptr);
      }
      else
      {
        v15 = std::vector<std::string>::operator[](param_vec, 0LL);
        if ( std::operator==<char>(v15, off_26356E00) )
        {
          if ( std::vector<std::string>::size(param_vec) <= 1 )
          {
            if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
              __asan_report_load8(&context->player);
            toThisPtr<Player>((Player *)&p_player_ptr);
            ret = DungeonCandidateTeam::delPlayer(dungeon_team, &p_player_ptr);
            std::shared_ptr<Player>::~shared_ptr(&p_player_ptr);
          }
          else
          {
            *(_DWORD *)(v4 + 48) = 0;
            v16 = std::vector<std::string>::operator[](param_vec, 1uLL);
            if ( common::tools::StringUtils::strToNum<unsigned int>(v16, (unsigned int *)(v4 + 48), 1) )
              goto LABEL_29;
            v17 = ServiceBox::findService<GameserverService>();
            v18 = (unsigned int)GameserverService::getGameThreadLocal(v17);
            PlayerMgr::findOnlinePlayer((PlayerMgr *const)(v4 + 160), v18 + 16);
            if ( std::operator==<Player>((const std::shared_ptr<Player> *)(v4 + 160), 0LL) )
            {
              v19 = std::vector<std::string>::operator[](param_vec, 1uLL);
              std::operator+<char>((std::string *)&v39, "player_uid not online uid: ", v19);
              std::string::operator=(ret_msg, &v39);
              std::string::~string(&v39);
              v3 = -1;
              v20 = 0;
            }
            else
            {
              std::shared_ptr<Player>::shared_ptr(&p_player_ptr, (const std::shared_ptr<Player> *)(v4 + 160));
              ret = DungeonCandidateTeam::delPlayer(dungeon_team, &p_player_ptr);
              std::shared_ptr<Player>::~shared_ptr(&p_player_ptr);
              v20 = 1;
            }
            std::shared_ptr<Player>::~shared_ptr((std::shared_ptr<Player> *const)(v4 + 160));
            if ( v20 != 1 )
              goto LABEL_64;
          }
        }
        else
        {
          v21 = std::vector<std::string>::operator[](param_vec, 0LL);
          if ( std::operator==<char>(v21, "READY") && std::vector<std::string>::size(param_vec) > 1 )
          {
            v23 = std::vector<std::string>::operator[](param_vec, 1uLL);
            v24 = std::operator==<char>(v23, "1");
            if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
              __asan_report_load8(&context->player);
            toThisPtr<Player>((Player *)&p_player_ptr);
            ret = DungeonCandidateTeam::setPlayerIsReady(dungeon_team, &p_player_ptr, v24);
            std::shared_ptr<Player>::~shared_ptr(&p_player_ptr);
          }
          else
          {
            v25 = std::vector<std::string>::operator[](param_vec, 0LL);
            if ( std::operator==<char>(v25, "CLEARWTR") && std::vector<std::string>::size(param_vec) > 1 )
            {
              *(_DWORD *)(v4 + 48) = 0;
              v27 = std::vector<std::string>::operator[](param_vec, 1uLL);
              if ( common::tools::StringUtils::strToNum<unsigned int>(v27, (unsigned int *)(v4 + 48), 1) )
                goto LABEL_29;
              if ( std::vector<std::string>::size(param_vec) <= 2 )
              {
                DungeonCandidateTeam::resetPlayerWtrGM(dungeon_team, *(_DWORD *)(v4 + 48));
              }
              else
              {
                *(_QWORD *)(v4 + 64) = 0LL;
                v28 = std::vector<std::string>::operator[](param_vec, 2uLL);
                if ( common::tools::StringUtils::strToNum<unsigned long>(v28, (unsigned __int64 *)(v4 + 64), 1) )
                  goto LABEL_29;
                DungeonCandidateTeam::resetAvatarWtrGM(dungeon_team, *(_DWORD *)(v4 + 48), *(_QWORD *)(v4 + 64));
              }
            }
            else
            {
              v29 = std::vector<std::string>::operator[](param_vec, 0LL);
              if ( std::operator==<char>(v29, "RESET") )
              {
                *(_DWORD *)(v4 + 32) = 0;
                *(_DWORD *)(v4 + 48) = 0;
                if ( std::vector<std::string>::size(param_vec) > 1 )
                {
                  v30 = std::vector<std::string>::operator[](param_vec, 1uLL);
                  common::tools::StringUtils::strToNum<unsigned int>(v30, (unsigned int *)(v4 + 32), 1);
                }
                if ( std::vector<std::string>::size(param_vec) > 2 )
                {
                  v31 = std::vector<std::string>::operator[](param_vec, 2uLL);
                  common::tools::StringUtils::strToNum<unsigned int>(v31, (unsigned int *)(v4 + 48), 1);
                }
                DungeonCandidateTeam::resetAll(dungeon_team, *(_DWORD *)(v4 + 32), *(_DWORD *)(v4 + 48), 0, 0);
              }
            }
          }
        }
      }
    }
LABEL_63:
    DungeonCandidateTeam::getDesc[abi:cxx11]((std::string *)(v4 + 192), dungeon_team);
    common::milog::MiLogStream::create(
      &v39,
      &common::milog::MiLogDefault::default_log_obj_,
      1u,
      "./src/player/gm/player_gm_comp.cpp",
      "gmDungeonTeam",
      7029);
    v32 = common::milog::MiLogStream::operator<<<char [2],(char *[2])0>(&v39, (const char (*)[2])"\n");
    common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v32, (const std::string *)(v4 + 192));
    common::milog::MiLogStream::~MiLogStream(&v39);
    v3 = ret;
    std::string::~string((void *)(v4 + 192));
    goto LABEL_64;
  }
  common::milog::MiLogStream::create(
    &v39,
    &common::milog::MiLogDefault::default_log_obj_,
    1u,
    "./src/player/gm/player_gm_comp.cpp",
    "gmDungeonTeam",
    6922);
  common::milog::MiLogStream::operator<<<char [21],(char *[21])0>(&v39, (const char (*)[21])" get handler failed ");
  common::milog::MiLogStream::~MiLogStream(&v39);
  v3 = -1;
LABEL_64:
  std::shared_ptr<PlayerHandlerBase>::~shared_ptr((std::shared_ptr<PlayerHandlerBase> *const)(v4 + 128));
LABEL_65:
  std::shared_ptr<PlayerWorld>::~shared_ptr((std::shared_ptr<PlayerWorld> *const)(v4 + 96));
  result = v3;
  if ( v40 == (char *)v4 )
  {
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8008) = 0LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8010) = 0LL;
    *(_DWORD *)((v4 >> 3) + 0x7FFF801C) = 0;
  }
  else
  {
    *(_QWORD *)v4 = 1172321806LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 7033: range 0000000017D76310-0000000017D763B2
void __cdecl gmMailRegister::gmMailRegister(gmMailRegister *const this)
{
  std::function<int(GmContext&,const std::vector<std::string>&,std::string&)> *v1; // rax
  std::allocator<char> __a; // [rsp+1Fh] [rbp-31h] BYREF
  std::string __k; // [rsp+20h] [rbp-30h] BYREF

  std::allocator<char>::allocator(&__a);
  std::string::basic_string<std::allocator<char>>(&__k, "MAIL", &__a);
  v1 = std::unordered_map<std::string,std::function<int ()(GmContext &,std::vector<std::string> const&,std::string&)>>::operator[](
         &GmUtils::op_func_map[abi:cxx11],
         &__k);
  std::function<int ()(GmContext &,std::vector<std::string> const&,std::string&)>::operator=<int (&)(GmContext &,std::vector<std::string> const&,std::string&)>(
    v1,
    (int (*)(GmContext *, const std::vector<std::string> *, std::string *))gmMail);
  std::string::~string(&__k);
  std::allocator<char>::~allocator(&__a);
};

// Line 7034: range 0000000017BFB835-0000000017BFCE0D
int32_t __cdecl gmMail(GmContext *context, const std::vector<std::string> *param_vec, std::string *ret_msg)
{
  int32_t v3; // r14d
  unsigned __int64 v4; // r13
  __int64 v5; // rax
  _DWORD *v6; // r12
  const std::string *v7; // rax
  const std::string *v8; // rax
  const std::string *v9; // rax
  const std::string *v10; // rax
  const std::string *v11; // rax
  unsigned int v12; // eax
  const std::string *v13; // rax
  std::vector<std::string>::const_reference v14; // rax
  bool v15; // r15
  common::milog::MiLogStream *v16; // rax
  int v17; // r15d
  bool v18; // r15
  common::milog::MiLogStream *v19; // rax
  common::milog::MiLogStream *v20; // rax
  common::milog::MiLogStream *v21; // rax
  int v22; // r15d
  common::milog::MiLogStream *v23; // rax
  common::milog::MiLogStream *v24; // rax
  common::milog::MiLogStream *v25; // rax
  std::vector<unsigned int>::reference v26; // rax
  google::protobuf::uint32 *v27; // rdx
  std::vector<unsigned int>::reference v28; // rax
  google::protobuf::uint32 *v29; // rdx
  std::vector<unsigned int>::reference v30; // rax
  google::protobuf::uint32 *v31; // rdx
  std::vector<unsigned int>::reference v32; // rax
  google::protobuf::uint32 *v33; // rdx
  int v34; // r15d
  int v35; // r15d
  PlayerMailComp *v36; // rax
  const std::string *v37; // rax
  const std::string *v38; // rax
  std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v39; // rax
  const std::vector<std::string>::value_type *v40; // rax
  PlayerMailComp *MailComp; // rax
  common::milog::MiLogStream *v42; // rax
  const std::string *v43; // rax
  PlayerMailComp *v44; // rax
  const std::string *v45; // rax
  std::vector<std::string>::const_reference v46; // rax
  bool v47; // r15
  common::milog::MiLogStream *v48; // rax
  int v49; // r15d
  PlayerMailComp *v50; // rax
  int v51; // r15d
  const std::string *v52; // rax
  std::vector<std::string>::const_reference v53; // rax
  bool v54; // r15
  common::milog::MiLogStream *v55; // rax
  int v56; // r15d
  PlayerMailComp *v57; // rax
  int v58; // r15d
  const std::string *v59; // rax
  PlayerMailComp *v60; // rax
  int32_t result; // eax
  std::allocator<char> __a; // [rsp+23h] [rbp-2ADh] BYREF
  uint32_t idx; // [rsp+24h] [rbp-2ACh]
  uint32_t cur_time; // [rsp+38h] [rbp-298h]
  std::vector<std::string>::iterator __for_begin; // [rsp+40h] [rbp-290h] BYREF
  std::vector<std::string>::iterator __for_end; // [rsp+48h] [rbp-288h] BYREF
  const data::MailExcelConfig *mail_excel_config_ptr; // [rsp+50h] [rbp-280h]
  std::vector<std::string> *__for_range; // [rsp+58h] [rbp-278h]
  const std::string *temp_string; // [rsp+60h] [rbp-270h]
  proto::ItemParamBin *item_param_bin; // [rsp+68h] [rbp-268h]
  std::shared_ptr<Config> v75; // [rsp+70h] [rbp-260h] BYREF
  common::milog::MiLogStream v76; // [rsp+80h] [rbp-250h] BYREF
  char v77[560]; // [rsp+A0h] [rbp-230h] BYREF

  v4 = (unsigned __int64)v77;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v5 = __asan_stack_malloc_3(512LL);
    if ( v5 )
      v4 = v5;
  }
  *(_QWORD *)v4 = 1102416563LL;
  *(_QWORD *)(v4 + 8) = "8 48 4 10 count:7051 64 4 8 ttl:7056 80 4 19 mail_config_id:7136 96 4 8 ret:7149 112 24 20 temp_"
                        "string_vec:7089 176 24 16 mail_id_vec:7200 240 32 16 id_list_str:7197 304 136 13 mail_bin:7055";
  *(_QWORD *)(v4 + 16) = gmMail;
  v6 = (_DWORD *)(v4 >> 3);
  v6[536862720] = -235802127;
  v6[536862721] = -234556943;
  v6[536862722] = -234556924;
  v6[536862723] = 61956;
  v6[536862724] = -218959360;
  v6[536862725] = 62194;
  v6[536862726] = -218959360;
  v6[536862727] = 62194;
  v6[536862728] = -219021312;
  v6[536862729] = 62194;
  v6[536862733] = -218103808;
  v6[536862734] = -202116109;
  v6[536862735] = -202116109;
  if ( std::vector<std::string>::empty(param_vec) )
  {
    common::milog::MiLogStream::create(
      &v76,
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/player/gm/player_gm_comp.cpp",
      "gmMail",
      7037);
    common::milog::MiLogStream::operator<<<char [17],(char *[17])0>(&v76, (const char (*)[17])"param not enough");
    common::milog::MiLogStream::~MiLogStream(&v76);
    v3 = -1;
    goto LABEL_107;
  }
  v7 = std::vector<std::string>::operator[](param_vec, 0LL);
  if ( !std::operator==<char>(v7, off_26356D00) )
  {
    v37 = std::vector<std::string>::operator[](param_vec, 0LL);
    if ( std::operator==<char>(v37, "ADDCONFIG") )
    {
      if ( std::vector<std::string>::size(param_vec) > 1 )
      {
        *(_DWORD *)(v4 + 80) = 0;
        std::vector<std::string>::vector((std::vector<std::string> *const)(v4 + 176));
        v38 = std::vector<std::string>::operator[](param_vec, 1uLL);
        common::tools::StringUtils::strToNum<unsigned int>(v38, (unsigned int *)(v4 + 80), 1);
        ServiceBox::findService<GameserverService>();
        GameserverService::getConfig((GameserverService *const)&v75);
        v39 = std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false> *const)&v75);
        mail_excel_config_ptr = data::MailExcelConfigMgrBase::findMailExcelConfig(
                                  &v39->design_config.txt_config_mgr.mail_config_mgr,
                                  *(_DWORD *)(v4 + 80));
        std::shared_ptr<Config>::~shared_ptr(&v75);
        if ( mail_excel_config_ptr )
        {
          for ( idx = 2; idx < std::vector<std::string>::size(param_vec); ++idx )
          {
            v40 = std::vector<std::string>::operator[](param_vec, idx);
            std::vector<std::string>::push_back((std::vector<std::string> *const)(v4 + 176), v40);
          }
          if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
            __asan_report_load8(&context->player);
          MailComp = Player::getMailComp(context->player);
          *(_DWORD *)(v4 + 96) = PlayerMailComp::addMailByGm(
                                   MailComp,
                                   *(_DWORD *)(v4 + 80),
                                   (const std::vector<std::string> *)(v4 + 176));
          if ( *(_DWORD *)(v4 + 96) )
          {
            common::milog::MiLogStream::create(
              &v76,
              &common::milog::MiLogDefault::default_log_obj_,
              3u,
              "./src/player/gm/player_gm_comp.cpp",
              "gmMail",
              7152);
            v42 = common::milog::MiLogStream::operator<<<char [17],(char *[17])0>(
                    &v76,
                    (const char (*)[17])"addMailByGm ret:");
            common::milog::MiLogStream::operator<<<int,(int *)0>(v42, (const int *)(v4 + 96));
            common::milog::MiLogStream::~MiLogStream(&v76);
          }
          v3 = *(_DWORD *)(v4 + 96);
        }
        else
        {
          std::string::operator=(ret_msg, "mail_config_id invalid");
          v3 = -1;
        }
        std::vector<std::string>::~vector((std::vector<std::string> *const)(v4 + 176));
      }
      else
      {
        std::string::operator=(ret_msg, "MAIL ADDCONFIG config_id ...");
        v3 = -1;
      }
      goto LABEL_107;
    }
    v43 = std::vector<std::string>::operator[](param_vec, 0LL);
    if ( std::operator==<char>(v43, "GETALL") )
    {
      if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
        __asan_report_load8(&context->player);
      v44 = Player::getMailComp(context->player);
      if ( PlayerMailComp::getAllMailByGm(v44) )
      {
        v3 = -1;
        goto LABEL_107;
      }
      goto LABEL_106;
    }
    v45 = std::vector<std::string>::operator[](param_vec, 0LL);
    if ( std::operator==<char>(v45, "UPDATE") )
    {
      if ( std::vector<std::string>::size(param_vec) != 2 )
        goto LABEL_72;
      v46 = std::vector<std::string>::operator[](param_vec, 1uLL);
      std::string::basic_string(v4 + 240, v46);
      if ( (unsigned __int8)std::string::empty(v4 + 240) == 1 )
        goto LABEL_83;
      std::vector<unsigned int>::vector((std::vector<unsigned int> *const)(v4 + 176));
      std::allocator<char>::allocator(&__a);
      std::string::basic_string<std::allocator<char>>((std::string *const)&v76, ",", &__a);
      v47 = common::tools::StringUtils::splitToList<unsigned int>(
              (const std::string *)(v4 + 240),
              (const std::string *)&v76,
              (std::vector<unsigned int> *)(v4 + 176),
              0) != 0;
      std::string::~string(&v76);
      std::allocator<char>::~allocator(&__a);
      if ( v47 )
      {
        common::milog::MiLogStream::create(
          &v76,
          &common::milog::MiLogDefault::default_log_obj_,
          3u,
          "./src/player/gm/player_gm_comp.cpp",
          "gmMail",
          7178);
        v48 = common::milog::MiLogStream::operator<<<char [15],(char *[15])0>(
                &v76,
                (const char (*)[15])"invalid param:");
        common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v48, (const std::string *)(v4 + 240));
        common::milog::MiLogStream::~MiLogStream(&v76);
        v3 = -1;
        v49 = 0;
      }
      else
      {
        if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
          __asan_report_load8(&context->player);
        v50 = Player::getMailComp(context->player);
        if ( PlayerMailComp::updateMailByGm(v50, (const std::vector<unsigned int> *)(v4 + 176)) )
        {
          v3 = -1;
          v49 = 0;
        }
        else
        {
          v49 = 1;
        }
      }
      std::vector<unsigned int>::~vector((std::vector<unsigned int> *const)(v4 + 176));
      if ( v49 == 1 )
LABEL_83:
        v51 = 1;
      else
        v51 = 0;
      std::string::~string((void *)(v4 + 240));
      if ( v51 != 1 )
        goto LABEL_107;
    }
    else
    {
      v52 = std::vector<std::string>::operator[](param_vec, 0LL);
      if ( !std::operator==<char>(v52, off_26356E00) )
      {
        v59 = std::vector<std::string>::operator[](param_vec, 0LL);
        if ( std::operator==<char>(v59, "CLEAN") )
        {
          if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
            __asan_report_load8(&context->player);
          v60 = Player::getMailComp(context->player);
          if ( PlayerMailComp::clear(v60) )
          {
            v3 = -1;
            goto LABEL_107;
          }
        }
        goto LABEL_106;
      }
      if ( std::vector<std::string>::size(param_vec) != 2 )
      {
LABEL_72:
        std::string::operator=(ret_msg, &unk_2635E000);
        v3 = -1;
        goto LABEL_107;
      }
      v53 = std::vector<std::string>::operator[](param_vec, 1uLL);
      std::string::basic_string(v4 + 240, v53);
      if ( (unsigned __int8)std::string::empty(v4 + 240) == 1 )
        goto LABEL_98;
      std::vector<unsigned int>::vector((std::vector<unsigned int> *const)(v4 + 176));
      std::allocator<char>::allocator(&__a);
      std::string::basic_string<std::allocator<char>>((std::string *const)&v76, ",", &__a);
      v54 = common::tools::StringUtils::splitToList<unsigned int>(
              (const std::string *)(v4 + 240),
              (const std::string *)&v76,
              (std::vector<unsigned int> *)(v4 + 176),
              0) != 0;
      std::string::~string(&v76);
      std::allocator<char>::~allocator(&__a);
      if ( v54 )
      {
        common::milog::MiLogStream::create(
          &v76,
          &common::milog::MiLogDefault::default_log_obj_,
          3u,
          "./src/player/gm/player_gm_comp.cpp",
          "gmMail",
          7203);
        v55 = common::milog::MiLogStream::operator<<<char [15],(char *[15])0>(
                &v76,
                (const char (*)[15])"invalid param:");
        common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v55, (const std::string *)(v4 + 240));
        common::milog::MiLogStream::~MiLogStream(&v76);
        v3 = -1;
        v56 = 0;
      }
      else
      {
        if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
          __asan_report_load8(&context->player);
        v57 = Player::getMailComp(context->player);
        if ( PlayerMailComp::delMailByGm(v57, (const std::vector<unsigned int> *)(v4 + 176)) )
        {
          v3 = -1;
          v56 = 0;
        }
        else
        {
          v56 = 1;
        }
      }
      std::vector<unsigned int>::~vector((std::vector<unsigned int> *const)(v4 + 176));
      if ( v56 == 1 )
LABEL_98:
        v58 = 1;
      else
        v58 = 0;
      std::string::~string((void *)(v4 + 240));
      if ( v58 != 1 )
        goto LABEL_107;
    }
LABEL_106:
    v3 = 0;
    goto LABEL_107;
  }
  if ( std::vector<std::string>::size(param_vec) <= 4 )
  {
    std::string::operator=(ret_msg, &unk_2635DD80);
    v3 = -1;
    goto LABEL_107;
  }
  cur_time = common::tools::TimeUtils::getNow();
  *(_DWORD *)(v4 + 48) = 1;
  v8 = std::vector<std::string>::operator[](param_vec, 1uLL);
  common::tools::StringUtils::strToNum<unsigned int>(v8, (unsigned int *)(v4 + 48), 1);
  proto::MailBin::MailBin((proto::MailBin *const)(v4 + 304));
  *(_DWORD *)(v4 + 64) = 1;
  v9 = std::vector<std::string>::operator[](param_vec, 2uLL);
  common::tools::StringUtils::strToNum<unsigned int>(v9, (unsigned int *)(v4 + 64), 1);
  proto::MailBin::set_expire_time((proto::MailBin *const)(v4 + 304), cur_time + *(_DWORD *)(v4 + 64));
  proto::MailBin::set_send_time((proto::MailBin *const)(v4 + 304), cur_time);
  proto::MailBin::set_reason_type((proto::MailBin *const)(v4 + 304), 0x26u);
  proto::MailBin::set_item_limit_type((proto::MailBin *const)(v4 + 304), 1u);
  v10 = std::vector<std::string>::operator[](param_vec, 3uLL);
  proto::MailBin::set_content((proto::MailBin *const)(v4 + 304), v10);
  *(_DWORD *)(v4 + 80) = 0;
  v11 = std::vector<std::string>::operator[](param_vec, 4uLL);
  common::tools::StringUtils::strToNum<unsigned int>(v11, (unsigned int *)(v4 + 80), 1);
  proto::MailBin::set_collect_state((proto::MailBin *const)(v4 + 304), *(_DWORD *)(v4 + 80));
  if ( *(_DWORD *)(v4 + 80) == 3 )
  {
    v12 = std::numeric_limits<unsigned int>::max();
    proto::MailBin::set_expire_time((proto::MailBin *const)(v4 + 304), v12);
  }
  *(_DWORD *)(v4 + 96) = 0;
  v13 = std::vector<std::string>::operator[](param_vec, 5uLL);
  common::tools::StringUtils::strToNum<unsigned int>(v13, (unsigned int *)(v4 + 96), 1);
  if ( *(_DWORD *)(v4 + 96) )
  {
    proto::MailBin::set_send_time((proto::MailBin *const)(v4 + 304), *(_DWORD *)(v4 + 96));
    proto::MailBin::set_expire_time((proto::MailBin *const)(v4 + 304), *(_DWORD *)(v4 + 64) + *(_DWORD *)(v4 + 96));
  }
  if ( std::vector<std::string>::size(param_vec) <= 6 )
    goto LABEL_112;
  v14 = std::vector<std::string>::operator[](param_vec, 6uLL);
  std::string::basic_string(v4 + 240, v14);
  if ( (unsigned __int8)std::string::empty(v4 + 240) == 1 )
    goto LABEL_41;
  std::vector<std::string>::vector((std::vector<std::string> *const)(v4 + 112));
  std::allocator<char>::allocator(&__a);
  std::string::basic_string<std::allocator<char>>((std::string *const)&v76, ",", &__a);
  v15 = common::tools::StringUtils::splitToList(
          (const std::string *)(v4 + 240),
          (const std::string *)&v76,
          (std::vector<std::string> *)(v4 + 112),
          0) != 0;
  std::string::~string(&v76);
  std::allocator<char>::~allocator(&__a);
  if ( v15 )
  {
    common::milog::MiLogStream::create(
      &v76,
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/player/gm/player_gm_comp.cpp",
      "gmMail",
      7092);
    v16 = common::milog::MiLogStream::operator<<<char [15],(char *[15])0>(&v76, (const char (*)[15])"invalid param:");
    common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v16, (const std::string *)(v4 + 240));
    common::milog::MiLogStream::~MiLogStream(&v76);
    v3 = -1;
    v17 = 0;
  }
  else
  {
    __for_range = (std::vector<std::string> *)(v4 + 112);
    __for_begin._M_current = std::vector<std::string>::begin((std::vector<std::string> *const)(v4 + 112))._M_current;
    __for_end._M_current = std::vector<std::string>::end(__for_range)._M_current;
    while ( __gnu_cxx::operator!=<std::string *,std::vector<std::string>>(&__for_begin, &__for_end) )
    {
      temp_string = __gnu_cxx::__normal_iterator<std::string *,std::vector<std::string>>::operator*(&__for_begin);
      std::vector<unsigned int>::vector((std::vector<unsigned int> *const)(v4 + 176));
      std::allocator<char>::allocator(&__a);
      std::string::basic_string<std::allocator<char>>((std::string *const)&v76, ":", &__a);
      v18 = common::tools::StringUtils::splitToList<unsigned int>(
              temp_string,
              (const std::string *)&v76,
              (std::vector<unsigned int> *)(v4 + 176),
              0) != 0;
      std::string::~string(&v76);
      std::allocator<char>::~allocator(&__a);
      if ( v18 )
      {
        common::milog::MiLogStream::create(
          &v76,
          &common::milog::MiLogDefault::default_log_obj_,
          3u,
          "./src/player/gm/player_gm_comp.cpp",
          "gmMail",
          7100);
        v19 = common::milog::MiLogStream::operator<<<char [23],(char *[23])0>(
                &v76,
                (const char (*)[23])"invalid item_list_str:");
        v20 = common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v19, (const std::string *)(v4 + 240));
        v21 = common::milog::MiLogStream::operator<<<char [14],(char *[14])0>(v20, (const char (*)[14])" temp_string:");
        common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v21, temp_string);
        common::milog::MiLogStream::~MiLogStream(&v76);
        v3 = -1;
        v22 = 0;
      }
      else if ( std::vector<unsigned int>::size((const std::vector<unsigned int> *const)(v4 + 176)) > 1 )
      {
        item_param_bin = proto::MailBin::add_item_param_list((proto::MailBin *const)(v4 + 304));
        v26 = std::vector<unsigned int>::operator[]((std::vector<unsigned int> *const)(v4 + 176), 0LL);
        v27 = v26;
        if ( *(_BYTE *)(((unsigned __int64)v26 >> 3) + 0x7FFF8000) != 0
          && (char)(((unsigned __int8)v26 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)v26 >> 3) + 0x7FFF8000) )
        {
          __asan_report_load4(v26);
        }
        proto::ItemParamBin::set_item_id(item_param_bin, *v27);
        v28 = std::vector<unsigned int>::operator[]((std::vector<unsigned int> *const)(v4 + 176), 1uLL);
        v29 = v28;
        if ( *(_BYTE *)(((unsigned __int64)v28 >> 3) + 0x7FFF8000) != 0
          && (char)(((unsigned __int8)v28 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)v28 >> 3) + 0x7FFF8000) )
        {
          __asan_report_load4(v28);
        }
        proto::ItemParamBin::set_count(item_param_bin, *v29);
        if ( std::vector<unsigned int>::size((const std::vector<unsigned int> *const)(v4 + 176)) > 2 )
        {
          v30 = std::vector<unsigned int>::operator[]((std::vector<unsigned int> *const)(v4 + 176), 2uLL);
          v31 = v30;
          if ( *(_BYTE *)(((unsigned __int64)v30 >> 3) + 0x7FFF8000) != 0
            && (char)(((unsigned __int8)v30 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)v30 >> 3) + 0x7FFF8000) )
          {
            __asan_report_load4(v30);
          }
          proto::ItemParamBin::set_level(item_param_bin, *v31);
          if ( std::vector<unsigned int>::size((const std::vector<unsigned int> *const)(v4 + 176)) > 3 )
          {
            v32 = std::vector<unsigned int>::operator[]((std::vector<unsigned int> *const)(v4 + 176), 3uLL);
            v33 = v32;
            if ( *(_BYTE *)(((unsigned __int64)v32 >> 3) + 0x7FFF8000) != 0
              && (char)(((unsigned __int8)v32 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)v32 >> 3) + 0x7FFF8000) )
            {
              __asan_report_load4(v32);
            }
            proto::ItemParamBin::set_promote_level(item_param_bin, *v33);
          }
        }
        v22 = 1;
      }
      else
      {
        common::milog::MiLogStream::create(
          &v76,
          &common::milog::MiLogDefault::default_log_obj_,
          3u,
          "./src/player/gm/player_gm_comp.cpp",
          "gmMail",
          7105);
        v23 = common::milog::MiLogStream::operator<<<char [27],(char *[27])0>(
                &v76,
                (const char (*)[27])"lack param. item_list_str:");
        v24 = common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v23, (const std::string *)(v4 + 240));
        v25 = common::milog::MiLogStream::operator<<<char [14],(char *[14])0>(v24, (const char (*)[14])" temp_string:");
        common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v25, temp_string);
        common::milog::MiLogStream::~MiLogStream(&v76);
        v3 = -1;
        v22 = 0;
      }
      std::vector<unsigned int>::~vector((std::vector<unsigned int> *const)(v4 + 176));
      if ( v22 != 1 )
      {
        v17 = 0;
        goto LABEL_39;
      }
      __gnu_cxx::__normal_iterator<std::string *,std::vector<std::string>>::operator++(&__for_begin);
    }
    v17 = 1;
  }
LABEL_39:
  std::vector<std::string>::~vector((std::vector<std::string> *const)(v4 + 112));
  if ( v17 == 1 )
LABEL_41:
    v34 = 1;
  else
    v34 = 0;
  std::string::~string((void *)(v4 + 240));
  if ( v34 == 1 )
  {
LABEL_112:
    if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
      __asan_report_load8(&context->player);
    v36 = Player::getMailComp(context->player);
    if ( PlayerMailComp::addMailByGm(v36, (const proto::MailBin *)(v4 + 304), *(_DWORD *)(v4 + 48)) )
    {
      v3 = -1;
      v35 = 0;
    }
    else
    {
      v35 = 1;
    }
  }
  else
  {
    v35 = 0;
  }
  proto::MailBin::~MailBin((proto::MailBin *const)(v4 + 304));
  if ( v35 == 1 )
    goto LABEL_106;
LABEL_107:
  result = v3;
  if ( v77 == (char *)v4 )
  {
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8008) = 0LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8010) = 0LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8018) = 0LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8020) = 0LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8034) = 0LL;
    *(_DWORD *)((v4 >> 3) + 0x7FFF803C) = 0;
  }
  else
  {
    *(_QWORD *)v4 = 1172321806LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8020) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8028) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8030) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8038) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 7228: range 0000000017D763B4-0000000017D76456
void __cdecl gmMakeDefineRegister::gmMakeDefineRegister(gmMakeDefineRegister *const this)
{
  std::function<int(GmContext&,const std::vector<std::string>&,std::string&)> *v1; // rax
  std::allocator<char> __a; // [rsp+1Fh] [rbp-31h] BYREF
  std::string __k; // [rsp+20h] [rbp-30h] BYREF

  std::allocator<char>::allocator(&__a);
  std::string::basic_string<std::allocator<char>>(&__k, "MAKEDEFINE", &__a);
  v1 = std::unordered_map<std::string,std::function<int ()(GmContext &,std::vector<std::string> const&,std::string&)>>::operator[](
         &GmUtils::op_func_map[abi:cxx11],
         &__k);
  std::function<int ()(GmContext &,std::vector<std::string> const&,std::string&)>::operator=<int (&)(GmContext &,std::vector<std::string> const&,std::string&)>(
    v1,
    (int (*)(GmContext *, const std::vector<std::string> *, std::string *))gmMakeDefine);
  std::string::~string(&__k);
  std::allocator<char>::~allocator(&__a);
};

// Line 7229: range 0000000017BFCE0E-0000000017BFD028
int32_t __cdecl gmMakeDefine(GmContext *context, const std::vector<std::string> *param_vec, std::string *ret_msg)
{
  unsigned __int64 v3; // rbx
  __int64 v4; // rax
  unsigned __int64 v5; // r13
  common::tools::StringStream<common::tools::FixedBuffer<4096> > *v6; // rax
  common::tools::StringStream<common::tools::FixedBuffer<4096> > *v7; // rax
  common::tools::StringStream<common::tools::FixedBuffer<4096> > *v8; // rax
  int32_t result; // eax
  common::milog::MiLogStream v10; // [rsp+20h] [rbp-B0h] BYREF
  std::string val; // [rsp+40h] [rbp-90h] BYREF
  char v12[112]; // [rsp+60h] [rbp-70h] BYREF

  v3 = (unsigned __int64)v12;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_0(64LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "1 32 16 7 os:7230";
  *(_QWORD *)(v3 + 16) = gmMakeDefine;
  v5 = v3 >> 3;
  *(_DWORD *)(v5 + 2147450880) = -235802127;
  *(_DWORD *)(v5 + 2147450884) = -202178560;
  common::tools::StringStream<common::tools::FixedBuffer<4096>>::StringStream((common::tools::StringStream<common::tools::FixedBuffer<4096> > *const)(v3 + 32));
  v6 = common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(
         (common::tools::StringStream<common::tools::FixedBuffer<4096> > *const)(v3 + 32),
         " game_version: ");
  common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(v6, off_2635E0E0);
  v7 = common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(
         (common::tools::StringStream<common::tools::FixedBuffer<4096> > *const)(v3 + 32),
         " code_version: ");
  common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(v7, "1163352");
  v8 = common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(
         (common::tools::StringStream<common::tools::FixedBuffer<4096> > *const)(v3 + 32),
         " rely_version: ");
  common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(v8, "1163352");
  common::milog::MiLogStream::create(
    &v10,
    &common::milog::MiLogDefault::default_log_obj_,
    1u,
    "./src/player/gm/player_gm_comp.cpp",
    "gmMakeDefine",
    7234);
  common::tools::StringStream<common::tools::FixedBuffer<4096>>::str[abi:cxx11](
    &val,
    (common::tools::StringStream<common::tools::FixedBuffer<4096> > *const)(v3 + 32));
  common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(&v10, &val);
  std::string::~string(&val);
  common::milog::MiLogStream::~MiLogStream(&v10);
  common::tools::StringStream<common::tools::FixedBuffer<4096>>::~StringStream((common::tools::StringStream<common::tools::FixedBuffer<4096> > *const)(v3 + 32));
  result = 0;
  if ( v12 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 7238: range 0000000017D76458-0000000017D764FA
void __cdecl gmDataVersionRegister::gmDataVersionRegister(gmDataVersionRegister *const this)
{
  std::function<int(GmContext&,const std::vector<std::string>&,std::string&)> *v1; // rax
  std::allocator<char> __a; // [rsp+1Fh] [rbp-31h] BYREF
  std::string __k; // [rsp+20h] [rbp-30h] BYREF

  std::allocator<char>::allocator(&__a);
  std::string::basic_string<std::allocator<char>>(&__k, "DATAVERSION", &__a);
  v1 = std::unordered_map<std::string,std::function<int ()(GmContext &,std::vector<std::string> const&,std::string&)>>::operator[](
         &GmUtils::op_func_map[abi:cxx11],
         &__k);
  std::function<int ()(GmContext &,std::vector<std::string> const&,std::string&)>::operator=<int (&)(GmContext &,std::vector<std::string> const&,std::string&)>(
    v1,
    (int (*)(GmContext *, const std::vector<std::string> *, std::string *))gmDataVersion);
  std::string::~string(&__k);
  std::allocator<char>::~allocator(&__a);
};

// Line 7239: range 0000000017BFD029-0000000017BFD5BC
int32_t __cdecl gmDataVersion(GmContext *context, const std::vector<std::string> *param_vec, std::string *ret_msg)
{
  unsigned __int64 v3; // r13
  __int64 v4; // rax
  _DWORD *v5; // r12
  common::tools::StringStream<common::tools::FixedBuffer<4096> > *v6; // r15
  std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v7; // rax
  unsigned int ServerDataVersion; // eax
  common::tools::StringStream<common::tools::FixedBuffer<4096> > *v9; // rax
  common::milog::MiLogStream *v10; // rax
  int32_t v11; // r15d
  common::milog::MiLogStream *v12; // rax
  common::milog::MiLogStream *v13; // rax
  common::tools::StringStream<common::tools::FixedBuffer<4096> > *v14; // r15
  unsigned int v15; // eax
  common::tools::StringStream<common::tools::FixedBuffer<4096> > *v16; // rax
  int v18; // [rsp+0h] [rbp-5A0h]
  int ret_msga; // [rsp+8h] [rbp-598h]
  std::string *ret_msgb; // [rsp+8h] [rbp-598h]
  std::shared_ptr<Config> v21; // [rsp+20h] [rbp-580h] BYREF
  common::milog::MiLogStream v22; // [rsp+30h] [rbp-570h] BYREF
  char v23[1360]; // [rsp+50h] [rbp-550h] BYREF

  ret_msga = (int)ret_msg;
  v3 = (unsigned __int64)v23;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_5(1312LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "6 48 1 11 option:7254 64 16 7 os:7240 96 32 9 line:7250 160 40 11 status:7256 240 344 24 data_ve"
                        "rsion_config:7253 656 520 8 ifs:7243";
  *(_QWORD *)(v3 + 16) = gmDataVersion;
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = -234753551;
  v5[536862722] = -219021312;
  v5[536862724] = -218959118;
  v5[536862726] = -218959360;
  v5[536862727] = 62194;
  v5[536862738] = -218959360;
  v5[536862739] = -218959118;
  v5[536862740] = 62194;
  v5[536862756] = -218103808;
  v5[536862757] = -202116109;
  v5[536862758] = -202116109;
  v5[536862759] = -202116109;
  v5[536862760] = -202116109;
  common::tools::StringStream<common::tools::FixedBuffer<4096>>::StringStream((common::tools::StringStream<common::tools::FixedBuffer<4096> > *const)(v3 + 64));
  v6 = common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(
         (common::tools::StringStream<common::tools::FixedBuffer<4096> > *const)(v3 + 64),
         &byte_2635E300);
  ServiceBox::findService<GameserverService>();
  GameserverService::getConfig((GameserverService *const)&v21);
  v7 = std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false> *const)&v21);
  ServerDataVersion = ClientVersionConfig::getServerDataVersion(&v7->design_config.version_config);
  v9 = common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(v6, ServerDataVersion);
  common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(v9, "]");
  std::shared_ptr<Config>::~shared_ptr(&v21);
  std::ifstream::basic_ifstream(v3 + 656, &HK4EDesignConfig::data_version_path[abi:cxx11], 8LL);
  if ( (unsigned __int8)std::ios::operator!(v3 + 912) )
  {
    common::milog::MiLogStream::create(
      &v22,
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/player/gm/player_gm_comp.cpp",
      "gmDataVersion",
      7246);
    v10 = common::milog::MiLogStream::operator<<<char [33],(char *[33])0>(&v22, (const char (*)[33])off_2635E3E0);
    common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(
      v10,
      &HK4EDesignConfig::data_version_path[abi:cxx11]);
    common::milog::MiLogStream::~MiLogStream(&v22);
    v11 = -1;
  }
  else
  {
    std::string::basic_string(v3 + 96);
    std::getline<char,std::char_traits<char>,std::allocator<char>>(v3 + 656, v3 + 96);
    proto::DataVersionConfig::DataVersionConfig((proto::DataVersionConfig *const)(v3 + 240));
    google::protobuf::util::JsonParseOptions::JsonParseOptions((google::protobuf::util::JsonParseOptions *const)(v3 + 48));
    *(_BYTE *)(v3 + 48) = 1;
    google::protobuf::util::JsonStringToMessage(
      (google::protobuf::util::Status *)(v3 + 160),
      v18,
      ret_msga,
      (int)param_vec,
      (int)context,
      (int)v21._M_ptr,
      v21._M_refcount._M_pi,
      (int)v22.log_,
      (char)v22.ostr_ptr_._M_ptr);
    if ( !google::protobuf::util::Status::ok((const google::protobuf::util::Status *const)(v3 + 160)) )
    {
      common::milog::MiLogStream::create(
        &v22,
        &common::milog::MiLogDefault::default_log_obj_,
        4u,
        "./src/player/gm/player_gm_comp.cpp",
        "gmDataVersion",
        7259);
      v12 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(&v22, (const char (*)[16])"[CONFIG_ERROR] ");
      v13 = common::milog::MiLogStream::operator<<<char [34],(char *[34])0>(
              v12,
              (const char (*)[34])"JsonStringToMessage fails, line: ");
      common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v13, (const std::string *)(v3 + 96));
      common::milog::MiLogStream::~MiLogStream(&v22);
      v11 = -1;
    }
    else
    {
      v14 = common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(
              (common::tools::StringStream<common::tools::FixedBuffer<4096> > *const)(v3 + 64),
              off_2635E4E0);
      v15 = proto::DataVersionConfig::server((const proto::DataVersionConfig *const)(v3 + 240));
      v16 = common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(v14, v15);
      common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(v16, "]");
      common::tools::StringStream<common::tools::FixedBuffer<4096>>::str[abi:cxx11](
        (std::string *)&v22,
        (common::tools::StringStream<common::tools::FixedBuffer<4096> > *const)(v3 + 64));
      std::string::operator=(ret_msgb, &v22);
      std::string::~string(&v22);
      v11 = 0;
    }
    google::protobuf::util::Status::~Status((google::protobuf::util::Status *const)(v3 + 160));
    proto::DataVersionConfig::~DataVersionConfig((proto::DataVersionConfig *const)(v3 + 240));
    std::string::~string((void *)(v3 + 96));
  }
  std::ifstream::~ifstream(v3 + 656);
  common::tools::StringStream<common::tools::FixedBuffer<4096>>::~StringStream((common::tools::StringStream<common::tools::FixedBuffer<4096> > *const)(v3 + 64));
  if ( v23 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8008) = 0;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8010) = 0;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8018) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8048) = 0LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8050) = 0;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8090) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8098) = 0LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF80A0) = 0;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    __asan_stack_free_5(v3, 1312LL, v23);
  }
  return v11;
};

// Line 7267: range 0000000017D764FC-0000000017D7659E
void __cdecl gmSetDataVersionRegister::gmSetDataVersionRegister(gmSetDataVersionRegister *const this)
{
  std::function<int(GmContext&,const std::vector<std::string>&,std::string&)> *v1; // rax
  std::allocator<char> __a; // [rsp+1Fh] [rbp-31h] BYREF
  std::string __k; // [rsp+20h] [rbp-30h] BYREF

  std::allocator<char>::allocator(&__a);
  std::string::basic_string<std::allocator<char>>(&__k, "SET_DATA_VERSION", &__a);
  v1 = std::unordered_map<std::string,std::function<int ()(GmContext &,std::vector<std::string> const&,std::string&)>>::operator[](
         &GmUtils::op_func_map[abi:cxx11],
         &__k);
  std::function<int ()(GmContext &,std::vector<std::string> const&,std::string&)>::operator=<int (&)(GmContext &,std::vector<std::string> const&,std::string&)>(
    v1,
    (int (*)(GmContext *, const std::vector<std::string> *, std::string *))gmSetDataVersion);
  std::string::~string(&__k);
  std::allocator<char>::~allocator(&__a);
};

// Line 7268: range 0000000017BFD5BD-0000000017BFD6EE
int32_t __cdecl gmSetDataVersion(GmContext *context, const std::vector<std::string> *param_vec, std::string *ret_msg)
{
  unsigned __int64 v3; // rbx
  __int64 v4; // rax
  unsigned __int64 v5; // r12
  int32_t result; // eax
  PlayerBasicComp *BasicComp; // rax
  char v8[96]; // [rsp+20h] [rbp-60h] BYREF

  v3 = (unsigned __int64)v8;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_0(64LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "1 32 4 17 data_version:7269";
  *(_QWORD *)(v3 + 16) = gmSetDataVersion;
  v5 = v3 >> 3;
  *(_DWORD *)(v5 + 2147450880) = -235802127;
  *(_DWORD *)(v5 + 2147450884) = -202116348;
  *(_DWORD *)(v3 + 32) = 0;
  if ( common::tools::StringUtils::strVecToNum<0u,unsigned int>(param_vec, (unsigned int *)(v3 + 32)) )
  {
    result = -1;
  }
  else
  {
    if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
      __asan_report_load8(&context->player);
    BasicComp = Player::getBasicComp(context->player);
    PlayerBasicComp::setDataVersionByGm(BasicComp, *(_DWORD *)(v3 + 32));
    result = 0;
  }
  if ( v8 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 7278: range 0000000017D765A0-0000000017D76642
void __cdecl gmSetClientDataVersionRegister::gmSetClientDataVersionRegister(gmSetClientDataVersionRegister *const this)
{
  std::function<int(GmContext&,const std::vector<std::string>&,std::string&)> *v1; // rax
  std::allocator<char> __a; // [rsp+1Fh] [rbp-31h] BYREF
  std::string __k; // [rsp+20h] [rbp-30h] BYREF

  std::allocator<char>::allocator(&__a);
  std::string::basic_string<std::allocator<char>>(&__k, "SET_CLIENT_DATA_VERSION", &__a);
  v1 = std::unordered_map<std::string,std::function<int ()(GmContext &,std::vector<std::string> const&,std::string&)>>::operator[](
         &GmUtils::op_func_map[abi:cxx11],
         &__k);
  std::function<int ()(GmContext &,std::vector<std::string> const&,std::string&)>::operator=<int (&)(GmContext &,std::vector<std::string> const&,std::string&)>(
    v1,
    (int (*)(GmContext *, const std::vector<std::string> *, std::string *))gmSetClientDataVersion);
  std::string::~string(&__k);
  std::allocator<char>::~allocator(&__a);
};

// Line 7279: range 0000000017BFD6EF-0000000017BFD815
int32_t __cdecl gmSetClientDataVersion(
        GmContext *context,
        const std::vector<std::string> *param_vec,
        std::string *ret_msg)
{
  unsigned __int64 v3; // rbx
  __int64 v4; // rax
  unsigned __int64 v5; // r12
  int32_t result; // eax
  char v7[96]; // [rsp+20h] [rbp-60h] BYREF

  v3 = (unsigned __int64)v7;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_0(64LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "1 32 4 17 data_version:7280";
  *(_QWORD *)(v3 + 16) = gmSetClientDataVersion;
  v5 = v3 >> 3;
  *(_DWORD *)(v5 + 2147450880) = -235802127;
  *(_DWORD *)(v5 + 2147450884) = -202116348;
  *(_DWORD *)(v3 + 32) = 0;
  if ( common::tools::StringUtils::strVecToNum<0u,unsigned int>(param_vec, (unsigned int *)(v3 + 32)) )
  {
    result = -1;
  }
  else
  {
    if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
      __asan_report_load8(&context->player);
    Player::setClientDataVersionByGm(context->player, *(_DWORD *)(v3 + 32));
    result = 0;
  }
  if ( v7 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 7289: range 0000000017D76644-0000000017D766E6
void __cdecl gmLuaShellRegister::gmLuaShellRegister(gmLuaShellRegister *const this)
{
  std::function<int(GmContext&,const std::vector<std::string>&,std::string&)> *v1; // rax
  std::allocator<char> __a; // [rsp+1Fh] [rbp-31h] BYREF
  std::string __k; // [rsp+20h] [rbp-30h] BYREF

  std::allocator<char>::allocator(&__a);
  std::string::basic_string<std::allocator<char>>(&__k, "LUASHELL", &__a);
  v1 = std::unordered_map<std::string,std::function<int ()(GmContext &,std::vector<std::string> const&,std::string&)>>::operator[](
         &GmUtils::op_func_map[abi:cxx11],
         &__k);
  std::function<int ()(GmContext &,std::vector<std::string> const&,std::string&)>::operator=<int (&)(GmContext &,std::vector<std::string> const&,std::string&)>(
    v1,
    (int (*)(GmContext *, const std::vector<std::string> *, std::string *))gmLuaShell);
  std::string::~string(&__k);
  std::allocator<char>::~allocator(&__a);
};

// Line 7290: range 0000000017BFD816-0000000017BFDAD9
int32_t __cdecl gmLuaShell(GmContext *context, const std::vector<std::string> *param_vec, std::string *ret_msg)
{
  unsigned __int64 v3; // rbx
  __int64 v4; // rax
  unsigned __int64 v5; // r12
  const std::string *v6; // rax
  std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v7; // rax
  common::milog::MiLogStream *v8; // rax
  int32_t result; // eax
  std::shared_ptr<Config> v10; // [rsp+20h] [rbp-C0h] BYREF
  common::milog::MiLogStream v11; // [rsp+30h] [rbp-B0h] BYREF
  char v12[144]; // [rsp+50h] [rbp-90h] BYREF

  v3 = (unsigned __int64)v12;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_1(96LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "1 32 32 9 desc:7299";
  *(_QWORD *)(v3 + 16) = gmLuaShell;
  v5 = v3 >> 3;
  *(_DWORD *)(v5 + 2147450880) = -235802127;
  *(_DWORD *)(v5 + 2147450888) = -202116109;
  if ( std::vector<std::string>::size(param_vec) )
  {
    v6 = std::vector<std::string>::operator[](param_vec, 0LL);
    if ( std::operator==<char>(v6, "CHECK") )
    {
      if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
        __asan_report_load8(&context->player);
      Player::clearLastSentLuaShellByGm(context->player);
      if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
        __asan_report_load8(&context->player);
      Player::checkLuaShell(context->player);
    }
  }
  ServiceBox::findService<GameserverService>();
  GameserverService::getConfig((GameserverService *const)&v10);
  v7 = std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false> *const)&v10);
  data::DbLuaShellConfigMgr::getDesc[abi:cxx11](
    (std::string *)(v3 + 32),
    &v7->design_config.db_config_mgr.db_local_config_mgr.lua_shell_mgr);
  std::shared_ptr<Config>::~shared_ptr(&v10);
  common::milog::MiLogStream::create(
    &v11,
    &common::milog::MiLogDefault::default_log_obj_,
    1u,
    "./src/player/gm/player_gm_comp.cpp",
    "gmLuaShell",
    7300);
  v8 = common::milog::MiLogStream::operator<<<char [12],(char *[12])0>(&v11, (const char (*)[12])"[LUASHELL]\n");
  common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v8, (const std::string *)(v3 + 32));
  common::milog::MiLogStream::~MiLogStream(&v11);
  std::string::~string((void *)(v3 + 32));
  result = 0;
  if ( v12 == (char *)v3 )
  {
    *(_DWORD *)((v3 >> 3) + 0x7FFF8000) = 0;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8008) = 0;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8008) = -168430091;
  }
  return result;
};

// Line 7304: range 0000000017D766E8-0000000017D7678A
void __cdecl gmFetterRegister::gmFetterRegister(gmFetterRegister *const this)
{
  std::function<int(GmContext&,const std::vector<std::string>&,std::string&)> *v1; // rax
  std::allocator<char> __a; // [rsp+1Fh] [rbp-31h] BYREF
  std::string __k; // [rsp+20h] [rbp-30h] BYREF

  std::allocator<char>::allocator(&__a);
  std::string::basic_string<std::allocator<char>>(&__k, "FETTER", &__a);
  v1 = std::unordered_map<std::string,std::function<int ()(GmContext &,std::vector<std::string> const&,std::string&)>>::operator[](
         &GmUtils::op_func_map[abi:cxx11],
         &__k);
  std::function<int ()(GmContext &,std::vector<std::string> const&,std::string&)>::operator=<int (&)(GmContext &,std::vector<std::string> const&,std::string&)>(
    v1,
    (int (*)(GmContext *, const std::vector<std::string> *, std::string *))gmFetter);
  std::string::~string(&__k);
  std::allocator<char>::~allocator(&__a);
};

// Line 7305: range 0000000017BFDADA-0000000017BFE890
int32_t __cdecl gmFetter(GmContext *context, const std::vector<std::string> *param_vec, std::string *ret_msg)
{
  unsigned __int64 v3; // r13
  __int64 v4; // rax
  _DWORD *v5; // r12
  int32_t v6; // r14d
  std::__shared_ptr_access<FormalAvatar,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v7; // rax
  const std::string *v8; // rax
  const std::string *v9; // rax
  std::__shared_ptr_access<FormalAvatar,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v10; // rax
  FetterComp *FetterComp; // rax
  std::__shared_ptr_access<FormalAvatar,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v12; // rax
  FetterComp *v13; // r14
  const std::string *v14; // rax
  const std::string *v15; // rax
  std::__shared_ptr_access<FormalAvatar,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v17; // rax
  FetterComp *v18; // rax
  const std::string *v19; // rax
  const std::string *v20; // rax
  std::__shared_ptr_access<FormalAvatar,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v22; // rax
  FetterComp *v23; // rax
  const std::string *v24; // rax
  std::__shared_ptr_access<FormalAvatar,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v25; // rax
  FetterComp *v26; // rax
  const std::string *v27; // rax
  const std::string *v28; // rax
  std::__shared_ptr_access<FormalAvatar,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v30; // rax
  FetterComp *v31; // rax
  const std::string *v32; // rax
  const std::string *v34; // rax
  std::__shared_ptr_access<FormalAvatar,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v35; // rax
  FetterComp *v36; // rax
  const std::string *v37; // rax
  unsigned __int64 *v38; // rax
  std::__shared_ptr_access<FormalAvatar,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v39; // rax
  FetterComp *v40; // rax
  const std::string *v41; // rax
  std::__shared_ptr_access<FormalAvatar,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v42; // rax
  FetterComp *v43; // rax
  std::__shared_ptr_access<FormalAvatar,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v44; // rax
  FetterComp *v45; // r14
  const std::string *v46; // rax
  PlayerSocialComp *SocialComp; // rax
  std::__shared_ptr_access<FormalAvatar,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v48; // rax
  FetterComp *v49; // r14
  const std::string *v50; // rax
  const std::string *v51; // rax
  std::__shared_ptr_access<FormalAvatar,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v53; // rax
  FetterComp *v54; // rax
  std::__shared_ptr_access<FormalAvatar,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v55; // rax
  FetterComp *v56; // rax
  unsigned __int64 *v57; // rax
  std::__shared_ptr_access<FormalAvatar,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v58; // rax
  FetterComp *v59; // rax
  void (__fastcall **vptr_DescribalBase)(std::string *, FetterComp *); // rdx
  common::milog::MiLogStream *v61; // rdx
  int32_t result; // eax
  int32_t ret; // [rsp+2Ch] [rbp-1D4h]
  std::vector<long unsigned int>::iterator __for_begin; // [rsp+30h] [rbp-1D0h] BYREF
  std::vector<long unsigned int>::iterator __for_end; // [rsp+38h] [rbp-1C8h] BYREF
  PlayerAvatarComp *avatar_comp; // [rsp+40h] [rbp-1C0h]
  FetterComp *fetter_comp; // [rsp+48h] [rbp-1B8h]
  std::vector<long unsigned int> *__for_range; // [rsp+50h] [rbp-1B0h]
  unsigned __int64 guid; // [rsp+58h] [rbp-1A8h]
  std::vector<long unsigned int> *__for_range_0; // [rsp+60h] [rbp-1A0h]
  unsigned __int64 guid_0; // [rsp+68h] [rbp-198h]
  std::string __rhs; // [rsp+70h] [rbp-190h] BYREF
  std::string __lhs; // [rsp+90h] [rbp-170h] BYREF
  std::string v75; // [rsp+B0h] [rbp-150h] BYREF
  char v76[304]; // [rsp+D0h] [rbp-130h] BYREF

  v3 = (unsigned __int64)v76;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_2(256LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "5 48 4 10 para1:7319 64 16 22 formal_avatar_ptr:7307 96 16 15 avatar_ptr:7389 128 24 14 guids_ve"
                        "c:7314 192 24 18 action_reason:7347";
  *(_QWORD *)(v3 + 16) = gmFetter;
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = -234556943;
  v5[536862722] = -219021312;
  v5[536862723] = -219021312;
  v5[536862724] = -234881024;
  v5[536862725] = -218959118;
  v5[536862726] = -218103808;
  v5[536862727] = -202116109;
  if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
    __asan_report_load8(&context->player);
  avatar_comp = Player::getAvatarComp(context->player);
  if ( *(_BYTE *)(((unsigned __int64)&context->avatar >> 3) + 0x7FFF8000) )
    __asan_report_load8(&context->avatar);
  toPtr<FormalAvatar,Avatar>((Avatar *)(v3 + 64));
  if ( std::operator==<FormalAvatar>(0LL, (const std::shared_ptr<FormalAvatar> *)(v3 + 64)) )
  {
    v6 = -1;
    goto LABEL_81;
  }
  v7 = std::__shared_ptr_access<FormalAvatar,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<FormalAvatar,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 64));
  fetter_comp = FormalAvatar::getFetterComp(v7);
  PlayerAvatarComp::getAllAvatarGuids((std::vector<long unsigned int> *)(v3 + 128), avatar_comp);
  ret = 0;
  if ( !std::vector<std::string>::size(param_vec) )
    goto LABEL_66;
  *(_DWORD *)(v3 + 48) = 0;
  if ( std::vector<std::string>::size(param_vec) > 1 )
  {
    v8 = std::vector<std::string>::operator[](param_vec, 1uLL);
    common::tools::StringUtils::strToNum<unsigned int>(v8, (unsigned int *)(v3 + 48), 1);
  }
  v9 = std::vector<std::string>::operator[](param_vec, 0LL);
  if ( std::operator==<char>(v9, off_26351960) )
  {
    v10 = std::__shared_ptr_access<FormalAvatar,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<FormalAvatar,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 64));
    FetterComp = FormalAvatar::getFetterComp(v10);
    FetterComp::setFetterExpByGm(FetterComp, *(_DWORD *)(v3 + 48));
    v12 = std::__shared_ptr_access<FormalAvatar,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<FormalAvatar,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 64));
    v13 = FormalAvatar::getFetterComp(v12);
    *(_QWORD *)(v3 + 192) = 0LL;
    *(_QWORD *)(v3 + 200) = 0LL;
    *(_QWORD *)(v3 + 208) = 0LL;
    std::vector<data::FetterCondType>::vector((std::vector<data::FetterCondType> *const)(v3 + 192));
    FetterComp::checkRefreshFetterCompAndNotifyClient(v13, (const std::vector<data::FetterCondType> *)(v3 + 192));
    std::vector<data::FetterCondType>::~vector((std::vector<data::FetterCondType> *const)(v3 + 192));
  }
  else
  {
    v14 = std::vector<std::string>::operator[](param_vec, 0LL);
    if ( std::operator==<char>(v14, "CLOSE")
      || (v15 = std::vector<std::string>::operator[](param_vec, 0LL),
          common::tools::StringUtils::isStartsWith(v15, off_26356E00)) )
    {
      v17 = std::__shared_ptr_access<FormalAvatar,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<FormalAvatar,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 64));
      v18 = FormalAvatar::getFetterComp(v17);
      ret = FetterComp::closeFetterByGm(v18, *(_DWORD *)(v3 + 48));
    }
    else
    {
      v19 = std::vector<std::string>::operator[](param_vec, 0LL);
      if ( std::operator==<char>(v19, "OPEN")
        || (v20 = std::vector<std::string>::operator[](param_vec, 0LL), std::operator==<char>(v20, off_26356D00)) )
      {
        v22 = std::__shared_ptr_access<FormalAvatar,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<FormalAvatar,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 64));
        v23 = FormalAvatar::getFetterComp(v22);
        ret = FetterComp::setFetterStateByGm(v23, *(_DWORD *)(v3 + 48), FETTER_STATE_OPEN);
      }
      else
      {
        v24 = std::vector<std::string>::operator[](param_vec, 0LL);
        if ( common::tools::StringUtils::isStartsWith(v24, off_2635E7C0) )
        {
          v25 = std::__shared_ptr_access<FormalAvatar,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<FormalAvatar,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 64));
          v26 = FormalAvatar::getFetterComp(v25);
          ret = FetterComp::setFetterStateByGm(v26, *(_DWORD *)(v3 + 48), FETTER_STATE_FINISH);
        }
        else
        {
          v27 = std::vector<std::string>::operator[](param_vec, 0LL);
          if ( common::tools::StringUtils::isStartsWith(v27, "HIDE")
            || (v28 = std::vector<std::string>::operator[](param_vec, 0LL),
                common::tools::StringUtils::isStartsWith(v28, "CONCEAL")) )
          {
            v30 = std::__shared_ptr_access<FormalAvatar,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<FormalAvatar,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 64));
            v31 = FormalAvatar::getFetterComp(v30);
            ret = FetterComp::setFetterStateByGm(v31, *(_DWORD *)(v3 + 48), FETTER_STATE_CONCEAL);
          }
          else
          {
            v32 = std::vector<std::string>::operator[](param_vec, 0LL);
            if ( std::operator==<char>(v32, "ADDEXP") && std::vector<std::string>::size(param_vec) > 1 )
            {
              ActionReason::ActionReason((ActionReason *const)(v3 + 192), ACTION_REASON_GM, ITEM_LIMIT_GM);
              PlayerAvatarComp::addMyAvatarFetterExpForTeam(
                avatar_comp,
                *(_DWORD *)(v3 + 48),
                (const ActionReason *)(v3 + 192));
            }
            else
            {
              v34 = std::vector<std::string>::operator[](param_vec, 0LL);
              if ( std::operator==<char>(v34, "CLEAR") )
              {
                v35 = std::__shared_ptr_access<FormalAvatar,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<FormalAvatar,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 64));
                v36 = FormalAvatar::getFetterComp(v35);
                FetterComp::clearAll(v36, 1);
              }
              else
              {
                v37 = std::vector<std::string>::operator[](param_vec, 0LL);
                if ( std::operator==<char>(v37, "CLEARALL") )
                {
                  __for_range = (std::vector<long unsigned int> *)(v3 + 128);
                  __for_begin._M_current = std::vector<unsigned long>::begin((std::vector<long unsigned int> *const)(v3 + 128))._M_current;
                  __for_end._M_current = std::vector<unsigned long>::end((std::vector<long unsigned int> *const)(v3 + 128))._M_current;
                  while ( __gnu_cxx::operator!=<unsigned long *,std::vector<unsigned long>>(&__for_begin, &__for_end) )
                  {
                    v38 = __gnu_cxx::__normal_iterator<unsigned long *,std::vector<unsigned long>>::operator*(&__for_begin);
                    if ( *(_BYTE *)(((unsigned __int64)v38 >> 3) + 0x7FFF8000) )
                      __asan_report_load8(v38);
                    guid = *v38;
                    PlayerAvatarComp::findFormalAvatar(
                      (const PlayerAvatarComp *const)(v3 + 96),
                      (uint64_t)avatar_comp,
                      guid);
                    if ( std::operator!=<FormalAvatar>(0LL, (const std::shared_ptr<FormalAvatar> *)(v3 + 96)) )
                    {
                      v39 = std::__shared_ptr_access<FormalAvatar,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<FormalAvatar,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 96));
                      v40 = FormalAvatar::getFetterComp(v39);
                      FetterComp::clearAll(v40, 1);
                    }
                    std::shared_ptr<FormalAvatar>::~shared_ptr((std::shared_ptr<FormalAvatar> *const)(v3 + 96));
                    __gnu_cxx::__normal_iterator<unsigned long *,std::vector<unsigned long>>::operator++(&__for_begin);
                  }
                }
                else
                {
                  v41 = std::vector<std::string>::operator[](param_vec, 0LL);
                  if ( common::tools::StringUtils::isStartsWith(v41, "BIRTH") )
                  {
                    v42 = std::__shared_ptr_access<FormalAvatar,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<FormalAvatar,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 64));
                    v43 = FormalAvatar::getFetterComp(v42);
                    FetterComp::setLoginOnBirthday(v43, *(_DWORD *)(v3 + 48) != 0);
                    v44 = std::__shared_ptr_access<FormalAvatar,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<FormalAvatar,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 64));
                    v45 = FormalAvatar::getFetterComp(v44);
                    *(_QWORD *)(v3 + 192) = 0LL;
                    *(_QWORD *)(v3 + 200) = 0LL;
                    *(_QWORD *)(v3 + 208) = 0LL;
                    std::vector<data::FetterCondType>::vector((std::vector<data::FetterCondType> *const)(v3 + 192));
                    FetterComp::checkRefreshFetterCompAndNotifyClient(
                      v45,
                      (const std::vector<data::FetterCondType> *)(v3 + 192));
                    std::vector<data::FetterCondType>::~vector((std::vector<data::FetterCondType> *const)(v3 + 192));
                  }
                  else
                  {
                    v46 = std::vector<std::string>::operator[](param_vec, 0LL);
                    if ( common::tools::StringUtils::isStartsWith(v46, "PLAYER_BIRTH") )
                    {
                      if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
                        __asan_report_load8(&context->player);
                      SocialComp = Player::getSocialComp(context->player);
                      PlayerSocialComp::setIsLoginOnBirthday(SocialComp, *(_DWORD *)(v3 + 48) != 0);
                      v48 = std::__shared_ptr_access<FormalAvatar,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<FormalAvatar,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 64));
                      v49 = FormalAvatar::getFetterComp(v48);
                      *(_QWORD *)(v3 + 192) = 0LL;
                      *(_QWORD *)(v3 + 200) = 0LL;
                      *(_QWORD *)(v3 + 208) = 0LL;
                      std::vector<data::FetterCondType>::vector((std::vector<data::FetterCondType> *const)(v3 + 192));
                      FetterComp::checkRefreshFetterCompAndNotifyClient(
                        v49,
                        (const std::vector<data::FetterCondType> *)(v3 + 192));
                      std::vector<data::FetterCondType>::~vector((std::vector<data::FetterCondType> *const)(v3 + 192));
                    }
                    else
                    {
                      v50 = std::vector<std::string>::operator[](param_vec, 0LL);
                      if ( std::operator==<char>(v50, "ADD_ALL_FETTERS")
                        || (v51 = std::vector<std::string>::operator[](param_vec, 0LL),
                            std::operator==<char>(v51, "OPEN_ALL_FETTERS")) )
                      {
                        v53 = std::__shared_ptr_access<FormalAvatar,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<FormalAvatar,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 64));
                        v54 = FormalAvatar::getFetterComp(v53);
                        ret = FetterComp::openAllFettersByGM(v54);
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  if ( !ret )
  {
    v55 = std::__shared_ptr_access<FormalAvatar,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<FormalAvatar,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 64));
    v56 = FormalAvatar::getFetterComp(v55);
    FetterComp::notifyClient(v56);
LABEL_66:
    std::string::operator+=(ret_msg, "\n");
    __for_range_0 = (std::vector<long unsigned int> *)(v3 + 128);
    __for_begin._M_current = std::vector<unsigned long>::begin((std::vector<long unsigned int> *const)(v3 + 128))._M_current;
    __for_end._M_current = std::vector<unsigned long>::end(__for_range_0)._M_current;
    while ( __gnu_cxx::operator!=<unsigned long *,std::vector<unsigned long>>(&__for_begin, &__for_end) )
    {
      v57 = __gnu_cxx::__normal_iterator<unsigned long *,std::vector<unsigned long>>::operator*(&__for_begin);
      if ( *(_BYTE *)(((unsigned __int64)v57 >> 3) + 0x7FFF8000) )
        __asan_report_load8(v57);
      guid_0 = *v57;
      PlayerAvatarComp::findFormalAvatar((const PlayerAvatarComp *const)(v3 + 96), (uint64_t)avatar_comp, guid_0);
      if ( std::operator!=<FormalAvatar>(0LL, (const std::shared_ptr<FormalAvatar> *)(v3 + 96)) )
      {
        v58 = std::__shared_ptr_access<FormalAvatar,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<FormalAvatar,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 96));
        v59 = FormalAvatar::getFetterComp(v58);
        if ( *(_BYTE *)(((unsigned __int64)v59 >> 3) + 0x7FFF8000) )
          __asan_report_load8(v59);
        vptr_DescribalBase = (void (__fastcall **)(std::string *, FetterComp *))v59->_vptr_DescribalBase;
        if ( *(_BYTE *)(((unsigned __int64)v59->_vptr_DescribalBase >> 3) + 0x7FFF8000) )
          __asan_report_load8(v59->_vptr_DescribalBase);
        (*vptr_DescribalBase)(&__rhs, v59);
        std::operator+<char>(&__lhs, " fetter: ", &__rhs);
        std::operator+<char>(&v75, &__lhs, "\n");
        std::string::operator+=(ret_msg, &v75);
        std::string::~string(&v75);
        std::string::~string(&__lhs);
        std::string::~string(&__rhs);
      }
      std::shared_ptr<FormalAvatar>::~shared_ptr((std::shared_ptr<FormalAvatar> *const)(v3 + 96));
      __gnu_cxx::__normal_iterator<unsigned long *,std::vector<unsigned long>>::operator++(&__for_begin);
    }
    common::milog::MiLogStream::create(
      (common::milog::MiLogStream *)&v75,
      &common::milog::MiLogDefault::default_log_obj_,
      1u,
      "./src/player/gm/player_gm_comp.cpp",
      "gmFetter",
      7395);
    v61 = common::milog::MiLogStream::operator<<<char [14],(char *[14])0>(
            (common::milog::MiLogStream *const)&v75,
            (const char (*)[14])"fetter_comp: ");
    common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v61, ret_msg);
    common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)&v75);
    if ( !std::vector<std::string>::empty(param_vec) )
      std::string::operator=(ret_msg, byte_262D4440);
    v6 = 0;
    goto LABEL_80;
  }
  std::string::operator=(ret_msg, "invalid param");
  v6 = ret;
LABEL_80:
  std::vector<unsigned long>::~vector((std::vector<long unsigned int> *const)(v3 + 128));
LABEL_81:
  std::shared_ptr<FormalAvatar>::~shared_ptr((std::shared_ptr<FormalAvatar> *const)(v3 + 64));
  result = v6;
  if ( v76 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8010) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8018) = 0LL;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 7403: range 0000000017D7678C-0000000017D7682E
void __cdecl showPropertyRegister::showPropertyRegister(showPropertyRegister *const this)
{
  std::function<int(GmContext&,const std::vector<std::string>&,std::string&)> *v1; // rax
  std::allocator<char> __a; // [rsp+1Fh] [rbp-31h] BYREF
  std::string __k; // [rsp+20h] [rbp-30h] BYREF

  std::allocator<char>::allocator(&__a);
  std::string::basic_string<std::allocator<char>>(&__k, "PROP", &__a);
  v1 = std::unordered_map<std::string,std::function<int ()(GmContext &,std::vector<std::string> const&,std::string&)>>::operator[](
         &GmUtils::op_func_map[abi:cxx11],
         &__k);
  std::function<int ()(GmContext &,std::vector<std::string> const&,std::string&)>::operator=<int (&)(GmContext &,std::vector<std::string> const&,std::string&)>(
    v1,
    (int (*)(GmContext *, const std::vector<std::string> *, std::string *))showProperty);
  std::string::~string(&__k);
  std::allocator<char>::~allocator(&__a);
};

// Line 7404: range 0000000017BFE891-0000000017BFF01B
int32_t __cdecl showProperty(GmContext *context, const std::vector<std::string> *param_vec, std::string *ret_msg)
{
  unsigned __int64 v3; // r13
  __int64 v4; // rax
  _DWORD *v5; // r12
  common::milog::MiLogStream *v6; // rdx
  int32_t v7; // r14d
  common::milog::MiLogStream *v8; // rax
  std::__shared_ptr_access<Creature,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v9; // rax
  void (__fastcall **v10)(common::milog::MiLogStream *, std::__shared_ptr_access<Creature,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *); // rdx
  common::tools::StringStream<common::tools::FixedBuffer<4096> > *v11; // rax
  Creature *v12; // rax
  FightPropComp *FightPropComp; // rax
  common::tools::StringStream<common::tools::FixedBuffer<4096> > *v14; // r14
  const char *v15; // rax
  common::tools::StringStream<common::tools::FixedBuffer<4096> > *v16; // rax
  common::tools::StringStream<common::tools::FixedBuffer<4096> > *v17; // rcx
  common::tools::StringStream<common::tools::FixedBuffer<4096> > *v18; // rax
  std::__shared_ptr_access<Creature,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v19; // rax
  void (__fastcall **v20)(common::milog::MiLogStream *, std::__shared_ptr_access<Creature,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *); // rdx
  common::tools::StringStream<common::tools::FixedBuffer<4096> > *v21; // rax
  common::milog::MiLogStream *v22; // r14
  int32_t result; // eax
  std::map<data::FightPropType,float>::iterator __for_begin; // [rsp+20h] [rbp-180h] BYREF
  std::map<data::FightPropType,float>::iterator __for_end; // [rsp+28h] [rbp-178h] BYREF
  std::map<data::FightPropType,float> *__for_range; // [rsp+30h] [rbp-170h]
  std::pair<const data::FightPropType,float> *__in; // [rsp+38h] [rbp-168h]
  std::tuple_element<0,std::pair<const data::FightPropType,float> >::type *prop_type; // [rsp+40h] [rbp-160h]
  std::tuple_element<1,std::pair<const data::FightPropType,float> >::type *prop_value; // [rsp+48h] [rbp-158h]
  common::milog::MiLogStream v31; // [rsp+50h] [rbp-150h] BYREF
  common::milog::MiLogStream v32; // [rsp+70h] [rbp-130h] BYREF
  char v33[272]; // [rsp+90h] [rbp-110h] BYREF

  v3 = (unsigned __int64)v33;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_2(224LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "5 48 1 23 is_include_ability:7406 64 4 14 entity_id:7405 80 16 17 creature_ptr:7412 112 16 7 os:"
                        "7418 144 48 13 prop_map:7420";
  *(_QWORD *)(v3 + 16) = showProperty;
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = -234753551;
  v5[536862722] = 61956;
  v5[536862723] = 62194;
  v5[536862724] = 62194;
  v5[536862726] = -202116109;
  *(_DWORD *)(v3 + 64) = 0;
  *(_BYTE *)(v3 + 48) = 0;
  if ( common::tools::StringUtils::strVecToNum<0u,unsigned int,bool &>(
         param_vec,
         (unsigned int *)(v3 + 64),
         (bool *)(v3 + 48),
         (bool *)(v3 + 64)) )
  {
    common::milog::MiLogStream::create(
      &v32,
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/player/gm/player_gm_comp.cpp",
      "showProperty",
      7409);
    v6 = common::milog::MiLogStream::operator<<<char [15],(char *[15])0>(&v32, (const char (*)[15])"invalid param:");
    common::milog::MiLogStream::operator<<<std::string>(v6, param_vec);
    common::milog::MiLogStream::~MiLogStream(&v32);
    v7 = -1;
  }
  else
  {
    if ( *(_BYTE *)(((unsigned __int64)&context->scene >> 3) + 0x7FFF8000) )
      __asan_report_load8(&context->scene);
    Scene::findEntity<Creature>((const Scene *const)(v3 + 80), (uint32_t)context->scene);
    if ( std::operator==<Creature>((const std::shared_ptr<Creature> *)(v3 + 80), 0LL) )
    {
      common::milog::MiLogStream::create(
        &v32,
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/player/gm/player_gm_comp.cpp",
        "showProperty",
        7415);
      v8 = common::milog::MiLogStream::operator<<<char [29],(char *[29])0>(
             &v32,
             (const char (*)[29])"findEntity fails, entity_id:");
      common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v8, (const unsigned int *)(v3 + 64));
      common::milog::MiLogStream::~MiLogStream(&v32);
      v7 = -1;
    }
    else
    {
      common::tools::StringStream<common::tools::FixedBuffer<4096>>::StringStream((common::tools::StringStream<common::tools::FixedBuffer<4096> > *const)(v3 + 112));
      v9 = std::__shared_ptr_access<Creature,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Creature,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 80));
      if ( *(_BYTE *)(((unsigned __int64)v9 >> 3) + 0x7FFF8000) )
        __asan_report_load8(v9);
      v10 = *(void (__fastcall ***)(common::milog::MiLogStream *, std::__shared_ptr_access<Creature,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *))v9->baseclass_0;
      if ( *(_BYTE *)((*(_QWORD *)v9->baseclass_0 >> 3) + 0x7FFF8000LL) )
        __asan_report_load8(*(_QWORD *)v9->baseclass_0);
      (*v10)(&v32, v9);
      v11 = common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(
              (common::tools::StringStream<common::tools::FixedBuffer<4096> > *const)(v3 + 112),
              (const std::string *)&v32);
      common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(
        v11,
        "================= begin =================\n");
      std::string::~string(&v32);
      std::map<data::FightPropType,float>::map((std::map<data::FightPropType,float> *const)(v3 + 144));
      v12 = std::__shared_ptr_access<Creature,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Creature,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 80));
      FightPropComp = Creature::getFightPropComp(v12);
      FightPropComp::getFightPropValueMap<std::map<data::FightPropType,float>>(
        FightPropComp,
        (std::map<data::FightPropType,float> *)(v3 + 144),
        *(_BYTE *)(v3 + 48));
      __for_range = (std::map<data::FightPropType,float> *)(v3 + 144);
      __for_begin._M_node = std::map<data::FightPropType,float>::begin((std::map<data::FightPropType,float> *const)(v3 + 144))._M_node;
      __for_end._M_node = std::map<data::FightPropType,float>::end((std::map<data::FightPropType,float> *const)(v3 + 144))._M_node;
      while ( std::operator!=(&__for_begin, &__for_end) )
      {
        __in = std::_Rb_tree_iterator<std::pair<data::FightPropType const,float>>::operator*(&__for_begin);
        prop_type = std::get<0ul,data::FightPropType const,float>(__in);
        prop_value = std::get<1ul,data::FightPropType const,float>(__in);
        v14 = common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(
                (common::tools::StringStream<common::tools::FixedBuffer<4096> > *const)(v3 + 112),
                "[PROP_INFO]\tprop_type:");
        if ( *(_BYTE *)(((unsigned __int64)prop_type >> 3) + 0x7FFF8000) != 0
          && (char)(((unsigned __int8)prop_type & 7) + 3) >= *(_BYTE *)(((unsigned __int64)prop_type >> 3) + 0x7FFF8000) )
        {
          __asan_report_load4(prop_type);
        }
        v15 = data::enumValToStr(*prop_type);
        v16 = common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(v14, v15);
        v17 = common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(v16, ", prop_value:");
        if ( *(_BYTE *)(((unsigned __int64)prop_value >> 3) + 0x7FFF8000) != 0
          && (char)(((unsigned __int8)prop_value & 7) + 3) >= *(_BYTE *)(((unsigned __int64)prop_value >> 3) + 0x7FFF8000) )
        {
          __asan_report_load4(prop_value);
        }
        v18 = common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(v17, *prop_value);
        common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(v18, "\n");
        std::_Rb_tree_iterator<std::pair<data::FightPropType const,float>>::operator++(&__for_begin);
      }
      v19 = std::__shared_ptr_access<Creature,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Creature,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 80));
      if ( *(_BYTE *)(((unsigned __int64)v19 >> 3) + 0x7FFF8000) )
        __asan_report_load8(v19);
      v20 = *(void (__fastcall ***)(common::milog::MiLogStream *, std::__shared_ptr_access<Creature,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *))v19->baseclass_0;
      if ( *(_BYTE *)((*(_QWORD *)v19->baseclass_0 >> 3) + 0x7FFF8000LL) )
        __asan_report_load8(*(_QWORD *)v19->baseclass_0);
      (*v20)(&v32, v19);
      v21 = common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(
              (common::tools::StringStream<common::tools::FixedBuffer<4096> > *const)(v3 + 112),
              (const std::string *)&v32);
      common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(
        v21,
        "================= end =================");
      std::string::~string(&v32);
      common::milog::MiLogStream::create(
        &v31,
        &common::milog::MiLogDefault::default_log_obj_,
        0x11u,
        "./src/player/gm/player_gm_comp.cpp",
        "showProperty",
        7427);
      v22 = common::milog::MiLogStream::operator<<<char [13],(char *[13])0>(&v31, (const char (*)[13])"[PROP_INFO] ");
      common::tools::StringStream<common::tools::FixedBuffer<4096>>::str[abi:cxx11](
        (std::string *)&v32,
        (common::tools::StringStream<common::tools::FixedBuffer<4096> > *const)(v3 + 112));
      common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v22, (const std::string *)&v32);
      std::string::~string(&v32);
      common::milog::MiLogStream::~MiLogStream(&v31);
      std::string::operator=(ret_msg, "prop print succeed");
      v7 = 0;
      std::map<data::FightPropType,float>::~map((std::map<data::FightPropType,float> *const)(v3 + 144));
      common::tools::StringStream<common::tools::FixedBuffer<4096>>::~StringStream((common::tools::StringStream<common::tools::FixedBuffer<4096> > *const)(v3 + 112));
    }
    std::shared_ptr<Creature>::~shared_ptr((std::shared_ptr<Creature> *const)(v3 + 80));
  }
  result = v7;
  if ( v33 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8010) = 0;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8018) = 0;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8018) = -168430091;
  }
  return result;
};

// Line 7432: range 0000000017D76864-0000000017D76906
void __cdecl dailyTaskRegister::dailyTaskRegister(dailyTaskRegister *const this)
{
  std::function<int(GmContext&,const std::vector<std::string>&,std::string&)> *v1; // rax
  std::allocator<char> __a; // [rsp+1Fh] [rbp-31h] BYREF
  std::string __k; // [rsp+20h] [rbp-30h] BYREF

  std::allocator<char>::allocator(&__a);
  std::string::basic_string<std::allocator<char>>(&__k, "DAILYTASK", &__a);
  v1 = std::unordered_map<std::string,std::function<int ()(GmContext &,std::vector<std::string> const&,std::string&)>>::operator[](
         &GmUtils::op_func_map[abi:cxx11],
         &__k);
  std::function<int ()(GmContext &,std::vector<std::string> const&,std::string&)>::operator=<int (&)(GmContext &,std::vector<std::string> const&,std::string&)>(
    v1,
    (int (*)(GmContext *, const std::vector<std::string> *, std::string *))dailyTask);
  std::string::~string(&__k);
  std::allocator<char>::~allocator(&__a);
};

// Line 7433: range 0000000017BFF01C-0000000017C003C2
// local variable allocation has failed, the output may be wrong!
int32_t __cdecl dailyTask(GmContext *context, const std::vector<std::string> *param_vec, std::string *ret_msg)
{
  unsigned __int64 v3; // r12
  __int64 v4; // rax
  _DWORD *v5; // r13
  PlayerSceneComp *SceneComp; // rax
  common::milog::MiLogStream *v7; // r14
  common::milog::MiLogStream *v8; // rax
  int32_t result; // eax
  const std::string *v10; // rax
  PlayerDailyTaskComp *DailyTaskComp; // rax
  const std::string *v12; // rax
  const std::string *v13; // rax
  const std::string *v14; // rax
  const std::string *v15; // rax
  const std::string *v16; // rax
  const std::string *v17; // rax
  PlayerDailyTaskComp *v18; // rax
  const std::string *v19; // rax
  const std::string *v20; // rax
  PlayerDailyTaskComp *v21; // rax
  const std::string *v22; // rax
  PlayerDailyTaskComp *v23; // rax
  const std::string *v24; // rax
  const std::string *v25; // rax
  PlayerDailyTaskComp *v26; // rax
  const std::string *v27; // rax
  const std::string *v28; // rax
  const std::string *v29; // rax
  common::milog::MiLogStream *v30; // rbx
  const std::string *v31; // rax
  PlayerDailyTaskComp *v32; // rax
  const std::string *v33; // rax
  const std::string *v34; // rax
  const std::string *v35; // rax
  const std::string *v36; // rax
  char v37; // al
  PlayerDailyTaskComp *v38; // rax
  const std::string *v39; // rax
  const std::string *v40; // rax
  const std::string *v41; // rax
  const std::string *v42; // rax
  PlayerDailyTaskComp *v43; // rcx
  std::optional<unsigned int> v44; // rsi OVERLAPPED
  const std::string *v45; // rax
  const std::string *v46; // rax
  const std::string *v47; // rax
  PlayerDailyTaskComp *v49; // rax
  const std::string *v50; // rax
  const std::string *v51; // rax
  const std::string *v52; // rax
  PlayerDailyTaskComp *v54; // rax
  const std::string *v55; // rax
  const std::string *v56; // rax
  PlayerDailyTaskComp *v57; // rax
  const std::string *v58; // rax
  PlayerDailyTaskComp *v59; // rax
  DailyTaskExcelConfigMgr *daily_task_config_mgr_1; // [rsp+30h] [rbp-140h]
  DailyTaskExcelConfigMgr *daily_task_config_mgr_0; // [rsp+40h] [rbp-130h]
  DailyTaskExcelConfigMgr *daily_task_config_mgr; // [rsp+50h] [rbp-120h]
  const data::DailyTaskExcelConfig *task_config_ptr; // [rsp+58h] [rbp-118h]
  PlayerDailyTaskComp *daily_task_comp; // [rsp+60h] [rbp-110h]
  std::optional<unsigned int> v66; // [rsp+68h] [rbp-108h] BYREF
  std::shared_ptr<Config> v67; // [rsp+70h] [rbp-100h] BYREF
  std::string __lhs; // [rsp+80h] [rbp-F0h] BYREF
  common::milog::MiLogStream v69; // [rsp+A0h] [rbp-D0h] BYREF
  char v70[176]; // [rsp+C0h] [rbp-B0h] BYREF

  v3 = (unsigned __int64)v70;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_1(128LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "4 48 4 12 task_id:7548 64 4 12 task_id:7611 80 4 12 task_id:7644 96 8 16 task_id_opt:7561";
  *(_QWORD *)(v3 + 16) = dailyTask;
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = -234556943;
  v5[536862722] = -234556924;
  v5[536862723] = -202116352;
  if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
    __asan_report_load8(&context->player);
  SceneComp = Player::getSceneComp(context->player);
  if ( !PlayerSceneComp::isInMyPlayerWorld(SceneComp) )
  {
    common::milog::MiLogStream::create(
      &v69,
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/player/gm/player_gm_comp.cpp",
      "dailyTask",
      7436);
    v7 = common::milog::MiLogStream::operator<<<char [6],(char *[6])0>(&v69, (const char (*)[6])"uid: ");
    if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
      __asan_report_load8(&context->player);
    *(_DWORD *)(v3 + 80) = Player::getUid(context->player);
    v8 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v7, (const unsigned int *)(v3 + 80));
    common::milog::MiLogStream::operator<<<char [24],(char *[24])0>(v8, (const char (*)[24])"isInMyPlayerWorld false");
    common::milog::MiLogStream::~MiLogStream(&v69);
    result = -1;
    goto LABEL_125;
  }
  if ( std::vector<std::string>::empty(param_vec) )
  {
    std::string::operator=(ret_msg, "param num error!");
    result = -1;
    goto LABEL_125;
  }
  v10 = std::vector<std::string>::operator[](param_vec, 0LL);
  if ( std::operator==<char>(v10, "CLEAR") )
  {
    if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
      __asan_report_load8(&context->player);
    DailyTaskComp = Player::getDailyTaskComp(context->player);
    PlayerDailyTaskComp::clearByGm(DailyTaskComp);
    goto LABEL_124;
  }
  v12 = std::vector<std::string>::operator[](param_vec, 0LL);
  if ( std::operator==<char>(v12, "REFRESH") )
  {
    if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
      __asan_report_load8(&context->player);
    daily_task_comp = Player::getDailyTaskComp(context->player);
    if ( std::vector<std::string>::size(param_vec) > 1 )
    {
      v13 = std::vector<std::string>::operator[](param_vec, 1uLL);
      if ( std::operator==<char>(v13, "1") )
      {
        PlayerDailyTaskComp::clearLastRefreshTimeByGm(daily_task_comp);
        PlayerDailyTaskComp::tryRefresh(daily_task_comp, 1);
        goto LABEL_124;
      }
      v14 = std::vector<std::string>::operator[](param_vec, 1uLL);
      if ( !std::operator==<char>(v14, "0") )
      {
        v15 = std::vector<std::string>::operator[](param_vec, 1uLL);
        std::operator+<char>((std::string *)&v69, "unknown param: ", v15);
        std::string::operator=(ret_msg, &v69);
        std::string::~string(&v69);
        goto LABEL_124;
      }
    }
    PlayerDailyTaskComp::tryRefresh(daily_task_comp, 1);
LABEL_124:
    result = 0;
    goto LABEL_125;
  }
  v16 = std::vector<std::string>::operator[](param_vec, 0LL);
  if ( std::operator==<char>(v16, off_26356D00) )
  {
    if ( std::vector<std::string>::size(param_vec) <= 1 )
    {
      std::string::operator=(ret_msg, "DAILYTASK ADD +task_id");
      result = -1;
      goto LABEL_125;
    }
    *(_DWORD *)(v3 + 80) = 0;
    v17 = std::vector<std::string>::operator[](param_vec, 1uLL);
    if ( !common::tools::StringUtils::strToNum<unsigned int>(v17, (unsigned int *)(v3 + 80), 1) )
    {
      if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
        __asan_report_load8(&context->player);
      v18 = Player::getDailyTaskComp(context->player);
      if ( PlayerDailyTaskComp::addDailyTaskByGm(v18, *(_DWORD *)(v3 + 80)) )
      {
        std::string::operator=(ret_msg, "addDailyTaskByGm fails");
        result = -1;
        goto LABEL_125;
      }
      goto LABEL_124;
    }
    goto LABEL_41;
  }
  v19 = std::vector<std::string>::operator[](param_vec, 0LL);
  if ( !std::operator==<char>(v19, "FINISH") )
  {
    v24 = std::vector<std::string>::operator[](param_vec, 0LL);
    if ( std::operator==<char>(v24, "ADDSURE") )
    {
      if ( std::vector<std::string>::size(param_vec) <= 1
        || (*(_DWORD *)(v3 + 80) = 0,
            v25 = std::vector<std::string>::operator[](param_vec, 1uLL),
            common::tools::StringUtils::strToNum<unsigned int>(v25, (unsigned int *)(v3 + 80), 1)) )
      {
        std::string::operator=(ret_msg, "DAILYTASK ADDSURE task_id");
        result = -1;
      }
      else
      {
        if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
          __asan_report_load8(&context->player);
        v26 = Player::getDailyTaskComp(context->player);
        result = PlayerDailyTaskComp::addDailyTaskIntoSurePool(v26, *(_DWORD *)(v3 + 80));
      }
      goto LABEL_125;
    }
    v27 = std::vector<std::string>::operator[](param_vec, 0LL);
    if ( std::operator==<char>(v27, "ADDPOSSIBLE") )
    {
      if ( std::vector<std::string>::size(param_vec) > 2 )
      {
        *(_DWORD *)(v3 + 64) = 0;
        *(_DWORD *)(v3 + 80) = 0;
        v28 = std::vector<std::string>::operator[](param_vec, 1uLL);
        common::tools::StringUtils::strToNum<unsigned int>(v28, (unsigned int *)(v3 + 64), 1);
        v29 = std::vector<std::string>::operator[](param_vec, 2uLL);
        common::tools::StringUtils::strToNum<unsigned int>(v29, (unsigned int *)(v3 + 80), 1);
        if ( *(_DWORD *)(v3 + 64) )
        {
          if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
            __asan_report_load8(&context->player);
          v32 = Player::getDailyTaskComp(context->player);
          result = PlayerDailyTaskComp::addDailyTaskIntoPossiblePool(v32, *(_DWORD *)(v3 + 64), *(_DWORD *)(v3 + 80));
        }
        else
        {
          common::milog::MiLogStream::create(
            &v69,
            &common::milog::MiLogDefault::default_log_obj_,
            3u,
            "./src/player/gm/player_gm_comp.cpp",
            "dailyTask",
            7536);
          v30 = common::milog::MiLogStream::operator<<<char [17],(char *[17])0>(
                  &v69,
                  (const char (*)[17])"strToNum fails, ");
          v31 = std::vector<std::string>::operator[](param_vec, 1uLL);
          common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v30, v31);
          common::milog::MiLogStream::~MiLogStream(&v69);
          result = -1;
        }
      }
      else
      {
        std::string::operator=(ret_msg, "DAILYTASK ADDPOSSIBLE task_id next_days");
        result = -1;
      }
      goto LABEL_125;
    }
    v33 = std::vector<std::string>::operator[](param_vec, 0LL);
    if ( std::operator==<char>(v33, "SETVAR") )
    {
      if ( std::vector<std::string>::size(param_vec) <= 3
        || ((*(_DWORD *)(v3 + 48) = 0,
             *(_DWORD *)(v3 + 64) = 0,
             *(_DWORD *)(v3 + 80) = 0,
             v34 = std::vector<std::string>::operator[](param_vec, 1uLL),
             !common::tools::StringUtils::strToNum<unsigned int>(v34, (unsigned int *)(v3 + 48), 1))
         && (v35 = std::vector<std::string>::operator[](param_vec, 2uLL),
             !common::tools::StringUtils::strToNum<unsigned int>(v35, (unsigned int *)(v3 + 64), 1))
         && (v36 = std::vector<std::string>::operator[](param_vec, 3uLL),
             !common::tools::StringUtils::strToNum<int>(v36, (int *)(v3 + 80), 1))
          ? (v37 = 0)
          : (v37 = 1),
            v37) )
      {
        std::string::operator=(ret_msg, "DAILYTASK SETVAR task_id index value");
        result = -1;
      }
      else
      {
        if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
          __asan_report_load8(&context->player);
        v38 = Player::getDailyTaskComp(context->player);
        result = PlayerDailyTaskComp::setDailyTaskVar(
                   v38,
                   *(_DWORD *)(v3 + 48),
                   *(_DWORD *)(v3 + 64),
                   *(_DWORD *)(v3 + 80));
      }
      goto LABEL_125;
    }
    v39 = std::vector<std::string>::operator[](param_vec, 0LL);
    if ( std::operator==<char>(v39, "RESETVAR") )
    {
      *(_QWORD *)(v3 + 96) = 0LL;
      v40 = std::vector<std::string>::operator[](param_vec, 1uLL);
      if ( std::operator!=<char>(v40, _f.gap0) )
      {
        *(_DWORD *)(v3 + 80) = 0;
        v41 = std::vector<std::string>::operator[](param_vec, 1uLL);
        if ( common::tools::StringUtils::strToNum<unsigned int>(v41, (unsigned int *)(v3 + 80), 1) )
        {
          v42 = std::vector<std::string>::operator[](param_vec, 1uLL);
          std::operator+<char>(&__lhs, "parse task_id:", v42);
          std::operator+<char>((std::string *)&v69, &__lhs, " fail");
          std::string::operator=(ret_msg, &v69);
          std::string::~string(&v69);
          std::string::~string(&__lhs);
          result = -1;
          goto LABEL_125;
        }
        std::optional<unsigned int>::optional<unsigned int &,true>(&v66, (unsigned int *)(v3 + 80));
        *(std::optional<unsigned int> *)(v3 + 96) = v66;
      }
      if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
        __asan_report_load8(&context->player);
      v43 = Player::getDailyTaskComp(context->player);
      v44 = *(std::optional<unsigned int> *)(v3 + 96);
      result = PlayerDailyTaskComp::resetDailyTaskVarByGm(v43, v44, ret_msg);
      goto LABEL_125;
    }
    v45 = std::vector<std::string>::operator[](param_vec, 0LL);
    if ( std::operator==<char>(v45, "SET_CYCLE_REFRESH") )
    {
      if ( std::vector<std::string>::size(param_vec) != 3 )
      {
        std::string::operator=(ret_msg, "DAILYTASK SET_CYCLE_REFRESH task_id value");
        result = -1;
        goto LABEL_125;
      }
      *(_DWORD *)(v3 + 64) = 0;
      *(_DWORD *)(v3 + 80) = 0;
      v46 = std::vector<std::string>::operator[](param_vec, 1uLL);
      if ( common::tools::StringUtils::strToNum<unsigned int>(v46, (unsigned int *)(v3 + 64), 1) )
        goto LABEL_118;
      v47 = std::vector<std::string>::operator[](param_vec, 2uLL);
      if ( common::tools::StringUtils::strToNum<unsigned int>(v47, (unsigned int *)(v3 + 80), 1) )
        goto LABEL_118;
      ServiceBox::findService<GameserverService>();
      GameserverService::getConfig((GameserverService *const)&v67);
      daily_task_config_mgr = &std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false> *const)&v67)->design_config.txt_config_mgr.daily_task_config_mgr;
      std::shared_ptr<Config>::~shared_ptr(&v67);
      task_config_ptr = data::DailyTaskExcelConfigMgrBase::findDailyTaskExcelConfig(
                          daily_task_config_mgr,
                          *(_DWORD *)(v3 + 64));
      if ( task_config_ptr )
      {
        if ( *(_BYTE *)(((unsigned __int64)&task_config_ptr->task_cycle_refresh_times >> 3) + 0x7FFF8000) != 0
          && (char)((((_BYTE)task_config_ptr - 68) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&task_config_ptr->task_cycle_refresh_times >> 3)
                                                                         + 0x7FFF8000) )
        {
          __asan_report_load4(&task_config_ptr->task_cycle_refresh_times);
        }
        if ( task_config_ptr->task_cycle_refresh_times >= *(_DWORD *)(v3 + 80) )
        {
          if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
            __asan_report_load8(&context->player);
          v49 = Player::getDailyTaskComp(context->player);
          PlayerDailyTaskComp::setDailyTaskCycleRefreshTimeByGm(v49, *(_DWORD *)(v3 + 64), *(_DWORD *)(v3 + 80));
          result = 0;
        }
        else
        {
          std::string::operator=(ret_msg, &unk_2635F360);
          result = -1;
        }
        goto LABEL_125;
      }
    }
    else
    {
      v50 = std::vector<std::string>::operator[](param_vec, 0LL);
      if ( std::operator==<char>(v50, "SETWEIGHT") )
      {
        if ( std::vector<std::string>::size(param_vec) != 3 )
        {
          std::string::operator=(ret_msg, "DAILYTASK SETWEIGHT task_id weight");
          result = -1;
          goto LABEL_125;
        }
        *(_DWORD *)(v3 + 64) = 0;
        *(_DWORD *)(v3 + 80) = 0;
        v51 = std::vector<std::string>::operator[](param_vec, 1uLL);
        if ( common::tools::StringUtils::strToNum<unsigned int>(v51, (unsigned int *)(v3 + 64), 1) )
          goto LABEL_118;
        v52 = std::vector<std::string>::operator[](param_vec, 2uLL);
        if ( common::tools::StringUtils::strToNum<unsigned int>(v52, (unsigned int *)(v3 + 80), 1) )
          goto LABEL_118;
        ServiceBox::findService<GameserverService>();
        GameserverService::getConfig((GameserverService *const)&v67);
        daily_task_config_mgr_0 = &std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false> *const)&v67)->design_config.txt_config_mgr.daily_task_config_mgr;
        std::shared_ptr<Config>::~shared_ptr(&v67);
        if ( data::DailyTaskExcelConfigMgrBase::findDailyTaskExcelConfig(daily_task_config_mgr_0, *(_DWORD *)(v3 + 64)) )
        {
          if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
            __asan_report_load8(&context->player);
          v54 = Player::getDailyTaskComp(context->player);
          PlayerDailyTaskComp::setTaskWeightByGm(v54, *(_DWORD *)(v3 + 64), *(_DWORD *)(v3 + 80));
          result = 0;
          goto LABEL_125;
        }
      }
      else
      {
        v55 = std::vector<std::string>::operator[](param_vec, 0LL);
        if ( !std::operator==<char>(v55, "REMOVEWEIGHT") )
          goto LABEL_124;
        if ( std::vector<std::string>::size(param_vec) != 2 )
        {
          std::string::operator=(ret_msg, "DAILYTASK REMOVEWEIGHT (ALL or task_id)");
          result = -1;
          goto LABEL_125;
        }
        v56 = std::vector<std::string>::operator[](param_vec, 1uLL);
        if ( std::operator==<char>(v56, _f.gap0) )
        {
          if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
            __asan_report_load8(&context->player);
          v57 = Player::getDailyTaskComp(context->player);
          PlayerDailyTaskComp::removeAllTaskWeightByGm(v57);
          result = 0;
          goto LABEL_125;
        }
        *(_DWORD *)(v3 + 80) = 0;
        v58 = std::vector<std::string>::operator[](param_vec, 1uLL);
        if ( common::tools::StringUtils::strToNum<unsigned int>(v58, (unsigned int *)(v3 + 80), 1) )
        {
LABEL_118:
          std::string::operator=(ret_msg, &unk_2635F2C0);
          result = -1;
          goto LABEL_125;
        }
        ServiceBox::findService<GameserverService>();
        GameserverService::getConfig((GameserverService *const)&v67);
        daily_task_config_mgr_1 = &std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false> *const)&v67)->design_config.txt_config_mgr.daily_task_config_mgr;
        std::shared_ptr<Config>::~shared_ptr(&v67);
        if ( data::DailyTaskExcelConfigMgrBase::findDailyTaskExcelConfig(daily_task_config_mgr_1, *(_DWORD *)(v3 + 80)) )
        {
          if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
            __asan_report_load8(&context->player);
          v59 = Player::getDailyTaskComp(context->player);
          PlayerDailyTaskComp::removeTaskWeightByGm(v59, *(_DWORD *)(v3 + 80));
          result = 0;
          goto LABEL_125;
        }
      }
    }
    std::string::operator=(ret_msg, &unk_2635F300);
    result = -1;
    goto LABEL_125;
  }
  if ( std::vector<std::string>::size(param_vec) <= 1 )
    goto LABEL_41;
  v20 = std::vector<std::string>::operator[](param_vec, 1uLL);
  if ( !std::operator==<char>(_f.gap0, v20) )
  {
    *(_DWORD *)(v3 + 80) = 0;
    v22 = std::vector<std::string>::operator[](param_vec, 1uLL);
    if ( !common::tools::StringUtils::strToNum<unsigned int>(v22, (unsigned int *)(v3 + 80), 1) )
    {
      if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
        __asan_report_load8(&context->player);
      v23 = Player::getDailyTaskComp(context->player);
      PlayerDailyTaskComp::finishDailyTaskByGm(v23, *(_DWORD *)(v3 + 80));
      goto LABEL_124;
    }
LABEL_41:
    std::string::operator=(ret_msg, "DAILYTASK FINISH +task_id");
    result = -1;
    goto LABEL_125;
  }
  if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
    __asan_report_load8(&context->player);
  v21 = Player::getDailyTaskComp(context->player);
  PlayerDailyTaskComp::finishAllDailyTaskByGm(v21);
  result = 0;
LABEL_125:
  if ( v70 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 7664: range 0000000017D76908-0000000017D769AA
void __cdecl randTaskRegister::randTaskRegister(randTaskRegister *const this)
{
  std::function<int(GmContext&,const std::vector<std::string>&,std::string&)> *v1; // rax
  std::allocator<char> __a; // [rsp+1Fh] [rbp-31h] BYREF
  std::string __k; // [rsp+20h] [rbp-30h] BYREF

  std::allocator<char>::allocator(&__a);
  std::string::basic_string<std::allocator<char>>(&__k, "RANDTASK", &__a);
  v1 = std::unordered_map<std::string,std::function<int ()(GmContext &,std::vector<std::string> const&,std::string&)>>::operator[](
         &GmUtils::op_func_map[abi:cxx11],
         &__k);
  std::function<int ()(GmContext &,std::vector<std::string> const&,std::string&)>::operator=<int (&)(GmContext &,std::vector<std::string> const&,std::string&)>(
    v1,
    (int (*)(GmContext *, const std::vector<std::string> *, std::string *))randTask);
  std::string::~string(&__k);
  std::allocator<char>::~allocator(&__a);
};

// Line 7665: range 0000000017C003C3-0000000017C00B46
int32_t __cdecl randTask(GmContext *context, const std::vector<std::string> *param_vec, std::string *ret_msg)
{
  unsigned __int64 v3; // r12
  __int64 v4; // rax
  _DWORD *v5; // r13
  int32_t v6; // r14d
  const std::string *v7; // rax
  PlayerWorldScene *v8; // rax
  SceneEncounterComp *EncounterComp; // rax
  const std::string *v10; // rax
  const std::string *v11; // rax
  char v12; // al
  const std::string *v13; // rax
  PlayerWorldScene *v14; // rax
  SceneEncounterComp *p_player; // rdi
  uint32_t v16; // ecx
  const std::string *v17; // rax
  const std::string *v18; // rax
  PlayerWorldScene *v19; // rax
  SceneEncounterComp *v20; // rcx
  const std::string *v21; // rax
  const std::string *v22; // rax
  PlayerWorldScene *v23; // rax
  SceneEncounterComp *v24; // rax
  const std::string *v25; // rax
  PlayerWorldScene *v26; // rax
  SceneEncounterComp *v27; // rax
  int32_t result; // eax
  int32_t retcode; // [rsp+2Ch] [rbp-D4h]
  common::milog::MiLogStream v32; // [rsp+30h] [rbp-D0h] BYREF
  char v33[176]; // [rsp+50h] [rbp-B0h] BYREF

  v3 = (unsigned __int64)v33;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_1(128LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "4 32 4 17 rand_task_id:7694 48 4 12 task_id:7735 64 16 14 world_ptr:7666 96 16 20 world_scene_ptr:7672";
  *(_QWORD *)(v3 + 16) = randTask;
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = -234556924;
  v5[536862722] = -219021312;
  v5[536862723] = -202178560;
  if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
    __asan_report_load8(&context->player);
  Player::getSceneComp(context->player);
  PlayerSceneComp::getCurWorld<PlayerWorld>((const PlayerSceneComp *const)(v3 + 64));
  if ( std::operator==<PlayerWorld>((const std::shared_ptr<PlayerWorld> *)(v3 + 64), 0LL) )
  {
    common::milog::MiLogStream::create(
      &v32,
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/player/gm/player_gm_comp.cpp",
      "randTask",
      7669);
    common::milog::MiLogStream::operator<<<char [18],(char *[18])0>(&v32, (const char (*)[18])"getCurWorld fails");
    common::milog::MiLogStream::~MiLogStream(&v32);
    v6 = -1;
    goto LABEL_48;
  }
  std::__shared_ptr_access<PlayerWorld,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<PlayerWorld,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 64));
  PlayerWorld::getMainWorldScene((PlayerWorld *const)(v3 + 96));
  if ( std::operator==<PlayerWorldScene>((const std::shared_ptr<PlayerWorldScene> *)(v3 + 96), 0LL) )
  {
    common::milog::MiLogStream::create(
      &v32,
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/player/gm/player_gm_comp.cpp",
      "randTask",
      7675);
    common::milog::MiLogStream::operator<<<char [24],(char *[24])0>(&v32, (const char (*)[24])"getMainWorldScene fails");
    common::milog::MiLogStream::~MiLogStream(&v32);
    v6 = -1;
  }
  else
  {
    if ( !std::vector<std::string>::empty(param_vec) )
    {
      v7 = std::vector<std::string>::operator[](param_vec, 0LL);
      if ( std::operator==<char>("CLEAR", v7) )
      {
        v8 = std::__shared_ptr_access<PlayerWorldScene,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<PlayerWorldScene,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 96));
        EncounterComp = PlayerWorldScene::getEncounterComp(v8);
        SceneEncounterComp::clearRandTaskByGm(EncounterComp);
      }
      else
      {
        v10 = std::vector<std::string>::operator[](param_vec, 0LL);
        if ( std::operator==<char>("REFRESH", v10) )
        {
          if ( std::vector<std::string>::size(param_vec) <= 2
            || ((*(_DWORD *)(v3 + 32) = 0,
                 *(_DWORD *)(v3 + 48) = 0,
                 v11 = std::vector<std::string>::operator[](param_vec, 1uLL),
                 !common::tools::StringUtils::strToNum<unsigned int>(v11, (unsigned int *)(v3 + 32), 1))
             && *(_DWORD *)(v3 + 32)
              ? (v12 = 0)
              : (v12 = 1),
                v12
             || (v13 = std::vector<std::string>::operator[](param_vec, 2uLL),
                 common::tools::StringUtils::strToNum<unsigned int>(v13, (unsigned int *)(v3 + 48), 1))) )
          {
            std::string::operator=(ret_msg, "RANDTASK REFRESH rand_task_id revise_level");
            v6 = -1;
            goto LABEL_47;
          }
          v14 = std::__shared_ptr_access<PlayerWorldScene,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<PlayerWorldScene,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 96));
          p_player = PlayerWorldScene::getEncounterComp(v14);
          v16 = *(_DWORD *)(v3 + 48);
          if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
          {
            p_player = (SceneEncounterComp *)&context->player;
            __asan_report_load8(&context->player);
          }
          SceneEncounterComp::refreshRandTaskByGm(p_player, *(_DWORD *)(v3 + 32), context->player, v16);
        }
        else
        {
          v17 = std::vector<std::string>::operator[](param_vec, 0LL);
          if ( std::operator==<char>("TRYCREATE", v17) )
          {
            if ( std::vector<std::string>::size(param_vec) <= 1
              || (*(_DWORD *)(v3 + 48) = 0,
                  v18 = std::vector<std::string>::operator[](param_vec, 1uLL),
                  common::tools::StringUtils::strToNum<unsigned int>(v18, (unsigned int *)(v3 + 48), 1)) )
            {
              std::string::operator=(ret_msg, "RANDTASK TRYCREATE rand_task_id");
              v6 = -1;
              goto LABEL_47;
            }
            v19 = std::__shared_ptr_access<PlayerWorldScene,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<PlayerWorldScene,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 96));
            v20 = PlayerWorldScene::getEncounterComp(v19);
            if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
              __asan_report_load8(&context->player);
            retcode = SceneEncounterComp::tryCreateRandTaskByGm(v20, *(_DWORD *)(v3 + 48), context->player);
            if ( retcode )
            {
              if ( retcode == -1 )
                std::string::operator=(ret_msg, "Random task ID is invalid");
              if ( retcode == -2 )
                std::string::operator=(ret_msg, "Current zone has no possible point");
              v6 = -1;
              goto LABEL_47;
            }
          }
          else
          {
            v21 = std::vector<std::string>::operator[](param_vec, 0LL);
            if ( std::operator==<char>("FINISH", v21) )
            {
              if ( std::vector<std::string>::size(param_vec) <= 1
                || (*(_DWORD *)(v3 + 48) = 0,
                    v22 = std::vector<std::string>::operator[](param_vec, 1uLL),
                    common::tools::StringUtils::strToNum<unsigned int>(v22, (unsigned int *)(v3 + 48), 1)) )
              {
                std::string::operator=(ret_msg, "DAILYTASK FINISH +task_id");
                v6 = -1;
                goto LABEL_47;
              }
              v23 = std::__shared_ptr_access<PlayerWorldScene,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<PlayerWorldScene,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 96));
              v24 = PlayerWorldScene::getEncounterComp(v23);
              SceneEncounterComp::finishRandTask(v24, *(_DWORD *)(v3 + 48), 1);
            }
            else
            {
              v25 = std::vector<std::string>::operator[](param_vec, 0LL);
              if ( std::operator==<char>("CLEAR_CD", v25) )
              {
                v26 = std::__shared_ptr_access<PlayerWorldScene,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<PlayerWorldScene,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 96));
                v27 = PlayerWorldScene::getEncounterComp(v26);
                SceneEncounterComp::clearNextRefreshTimeByGm(v27);
              }
            }
          }
        }
      }
      v6 = 0;
      goto LABEL_47;
    }
    std::string::operator=(ret_msg, "param num error!");
    v6 = -1;
  }
LABEL_47:
  std::shared_ptr<PlayerWorldScene>::~shared_ptr((std::shared_ptr<PlayerWorldScene> *const)(v3 + 96));
LABEL_48:
  std::shared_ptr<PlayerWorld>::~shared_ptr((std::shared_ptr<PlayerWorld> *const)(v3 + 64));
  result = v6;
  if ( v33 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 7750: range 0000000017D769AC-0000000017D76A4E
void __cdecl procWorldRegister::procWorldRegister(procWorldRegister *const this)
{
  std::function<int(GmContext&,const std::vector<std::string>&,std::string&)> *v1; // rax
  std::allocator<char> __a; // [rsp+1Fh] [rbp-31h] BYREF
  std::string __k; // [rsp+20h] [rbp-30h] BYREF

  std::allocator<char>::allocator(&__a);
  std::string::basic_string<std::allocator<char>>(&__k, "WORLD", &__a);
  v1 = std::unordered_map<std::string,std::function<int ()(GmContext &,std::vector<std::string> const&,std::string&)>>::operator[](
         &GmUtils::op_func_map[abi:cxx11],
         &__k);
  std::function<int ()(GmContext &,std::vector<std::string> const&,std::string&)>::operator=<int (&)(GmContext &,std::vector<std::string> const&,std::string&)>(
    v1,
    (int (*)(GmContext *, const std::vector<std::string> *, std::string *))procWorld);
  std::string::~string(&__k);
  std::allocator<char>::~allocator(&__a);
};

// Line 7751: range 0000000017C00B47-0000000017C018BF
int32_t __cdecl procWorld(GmContext *context, const std::vector<std::string> *param_vec, std::string *ret_msg)
{
  int32_t v3; // r13d
  unsigned __int64 v4; // r12
  __int64 v5; // rax
  _DWORD *v6; // r14
  const std::string *v7; // rax
  const std::string *v9; // rax
  std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v10; // rax
  PlayerBasicComp *BasicComp; // rax
  PlayerQuestComp *QuestComp; // rcx
  const std::string *v13; // rax
  const std::string *v14; // rax
  PlayerSceneComp *SceneComp; // rax
  PlayerSceneComp *v16; // rax
  const std::string *v17; // rax
  PlayerWorld *v18; // rax
  const std::string *v19; // rax
  PlayerBasicComp *v20; // rax
  PlayerWorld *v21; // rax
  const std::string *v22; // rax
  int v23; // r15d
  const std::string *v24; // rax
  std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v25; // rax
  PlayerBasicComp *v26; // rax
  PlayerWorld *v27; // rax
  PlayerQuestComp *v28; // rcx
  int32_t result; // eax
  int player_level_0; // [rsp+2Ch] [rbp-114h]
  uint32_t world_level_limit; // [rsp+30h] [rbp-110h]
  int ret_0; // [rsp+34h] [rbp-10Ch]
  int ret; // [rsp+38h] [rbp-108h]
  int player_level; // [rsp+3Ch] [rbp-104h]
  const data::PlayerLevelLockExcelConfig *level_config_ptr_0; // [rsp+40h] [rbp-100h]
  const data::PlayerLevelLockExcelConfig *level_config_ptr; // [rsp+48h] [rbp-F8h]
  std::string __rhs; // [rsp+50h] [rbp-F0h] BYREF
  std::string v39; // [rsp+70h] [rbp-D0h] BYREF
  char v40[176]; // [rsp+90h] [rbp-B0h] BYREF

  v4 = (unsigned __int64)v40;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v5 = __asan_stack_malloc_1(128LL);
    if ( v5 )
      v4 = v5;
  }
  *(_QWORD *)v4 = 1102416563LL;
  *(_QWORD *)(v4 + 8) = "4 32 1 25 is_change_to_mp_mode:7787 48 4 10 level:7845 64 16 14 world_ptr:7839 96 16 14 world_ptr:7815";
  *(_QWORD *)(v4 + 16) = procWorld;
  v6 = (_DWORD *)(v4 >> 3);
  v6[536862720] = -235802127;
  v6[536862721] = -234556927;
  v6[536862722] = -219021312;
  v6[536862723] = -202178560;
  if ( std::vector<std::string>::empty(param_vec) )
  {
    std::string::operator=(ret_msg, "param num error!");
    v3 = -1;
    goto LABEL_80;
  }
  v7 = std::vector<std::string>::operator[](param_vec, 0LL);
  if ( std::operator==<char>("LEVELLIMIT", v7) && std::vector<std::string>::size(param_vec) > 1 )
  {
    *(_DWORD *)(v4 + 48) = 0;
    v9 = std::vector<std::string>::operator[](param_vec, 1uLL);
    if ( common::tools::StringUtils::strToNum<unsigned int>(v9, (unsigned int *)(v4 + 48), 1) )
    {
      std::string::operator=(ret_msg, "WORLD LEVEL num");
      v3 = -1;
      goto LABEL_80;
    }
    ServiceBox::findService<GameserverService>();
    GameserverService::getConfig((GameserverService *const)(v4 + 96));
    v10 = std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 96));
    level_config_ptr = data::PlayerExcelConfigMgrBase::findPlayerLevelLockExcelConfig(
                         &v10->design_config.txt_config_mgr.player_config_mgr,
                         *(_DWORD *)(v4 + 48));
    std::shared_ptr<Config>::~shared_ptr((std::shared_ptr<Config> *const)(v4 + 96));
    if ( !level_config_ptr )
    {
      std::to_string(&__rhs, *(_DWORD *)(v4 + 48));
      std::operator+<char>(&v39, "invalid level:", &__rhs);
      std::string::operator=(ret_msg, &v39);
      std::string::~string(&v39);
      std::string::~string(&__rhs);
      v3 = -1;
      goto LABEL_80;
    }
    if ( *(_BYTE *)(((unsigned __int64)&level_config_ptr->player_level_upper_limit >> 3) + 0x7FFF8000) != 0
      && (char)((((_BYTE)level_config_ptr + 20) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&level_config_ptr->player_level_upper_limit >> 3)
                                                                      + 0x7FFF8000) )
    {
      __asan_report_load4(&level_config_ptr->player_level_upper_limit);
    }
    player_level = level_config_ptr->player_level_upper_limit - 1;
    if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
      __asan_report_load8(&context->player);
    BasicComp = Player::getBasicComp(context->player);
    PlayerBasicComp::setLevelByGm(BasicComp, player_level, 1);
    if ( *(_BYTE *)(((unsigned __int64)&level_config_ptr->unlock_main_quest_id >> 3) + 0x7FFF8000) != 0
      && (char)((((_BYTE)level_config_ptr + 12) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&level_config_ptr->unlock_main_quest_id >> 3)
                                                                      + 0x7FFF8000) )
    {
      __asan_report_load4(&level_config_ptr->unlock_main_quest_id);
    }
    if ( level_config_ptr->unlock_main_quest_id )
    {
      if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
        __asan_report_load8(&context->player);
      QuestComp = Player::getQuestComp(context->player);
      if ( *(_BYTE *)(((unsigned __int64)&level_config_ptr->unlock_main_quest_id >> 3) + 0x7FFF8000) != 0
        && (char)((((_BYTE)level_config_ptr + 12) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&level_config_ptr->unlock_main_quest_id >> 3)
                                                                        + 0x7FFF8000) )
      {
        __asan_report_load4(&level_config_ptr->unlock_main_quest_id);
      }
      PlayerQuestComp::forceAcceptAndFinishParentQuestByGM(QuestComp, level_config_ptr->unlock_main_quest_id, 1);
    }
    goto LABEL_79;
  }
  v13 = std::vector<std::string>::operator[](param_vec, 0LL);
  if ( std::operator==<char>("MP", v13) )
  {
    if ( std::vector<std::string>::size(param_vec) <= 1 )
    {
      std::string::operator=(ret_msg, "param not enough");
      v3 = -1;
      goto LABEL_80;
    }
    *(_BYTE *)(v4 + 32) = 0;
    v14 = std::vector<std::string>::operator[](param_vec, 1uLL);
    if ( common::tools::StringUtils::strToNum<bool>(v14, (bool *)(v4 + 32), 1) )
    {
      std::string::operator=(ret_msg, "param error");
      v3 = -1;
      goto LABEL_80;
    }
    if ( *(_BYTE *)(v4 + 32) )
    {
      if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
        __asan_report_load8(&context->player);
      SceneComp = Player::getSceneComp(context->player);
      ret = PlayerSceneComp::changeMyWorldToMpMode(SceneComp);
      if ( ret )
      {
        std::string::operator=(ret_msg, "world change to mp mode failed");
        v3 = ret;
        goto LABEL_80;
      }
    }
    else
    {
      if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
        __asan_report_load8(&context->player);
      v16 = Player::getSceneComp(context->player);
      ret_0 = PlayerSceneComp::changeMyWorldToSingleMode(v16);
      if ( ret_0 )
      {
        std::string::operator=(ret_msg, "world change to single mode failed");
        v3 = ret_0;
        goto LABEL_80;
      }
    }
    goto LABEL_79;
  }
  v17 = std::vector<std::string>::operator[](param_vec, 0LL);
  if ( std::operator==<char>("CLEARCD", v17) )
  {
    if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
      __asan_report_load8(&context->player);
    Player::getSceneComp(context->player);
    PlayerSceneComp::getMyPlayerWorld((const PlayerSceneComp *const)(v4 + 96));
    if ( std::operator==<PlayerWorld>(0LL, (const std::shared_ptr<PlayerWorld> *)(v4 + 96)) )
    {
      common::milog::MiLogStream::create(
        (common::milog::MiLogStream *)&v39,
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/player/gm/player_gm_comp.cpp",
        "procWorld",
        7818);
      common::milog::MiLogStream::operator<<<char [23],(char *[23])0>(
        (common::milog::MiLogStream *const)&v39,
        (const char (*)[23])"getMyPlayerWorld fails");
      common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)&v39);
      v3 = -1;
    }
    else
    {
      v18 = std::__shared_ptr_access<PlayerWorld,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<PlayerWorld,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 96));
      PlayerWorld::clearAdjustCDByGm(v18);
      v3 = 0;
    }
LABEL_47:
    std::shared_ptr<PlayerWorld>::~shared_ptr((std::shared_ptr<PlayerWorld> *const)(v4 + 96));
    goto LABEL_80;
  }
  v19 = std::vector<std::string>::operator[](param_vec, 0LL);
  if ( std::operator==<char>("ADJUSTLEVEL", v19) )
  {
    if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
      __asan_report_load8(&context->player);
    Player::getSceneComp(context->player);
    PlayerSceneComp::getMyPlayerWorld((const PlayerSceneComp *const)(v4 + 96));
    if ( std::operator==<PlayerWorld>(0LL, (const std::shared_ptr<PlayerWorld> *)(v4 + 96)) )
    {
      common::milog::MiLogStream::create(
        (common::milog::MiLogStream *)&v39,
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/player/gm/player_gm_comp.cpp",
        "procWorld",
        7830);
      common::milog::MiLogStream::operator<<<char [23],(char *[23])0>(
        (common::milog::MiLogStream *const)&v39,
        (const char (*)[23])"getMyPlayerWorld fails");
      common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)&v39);
      v3 = -1;
    }
    else
    {
      if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
        __asan_report_load8(&context->player);
      v20 = Player::getBasicComp(context->player);
      world_level_limit = PlayerBasicComp::calcWorldLevelLimit(v20);
      v21 = std::__shared_ptr_access<PlayerWorld,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<PlayerWorld,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 96));
      v3 = PlayerWorld::adjustLevelByGm(v21, world_level_limit, 0);
    }
    goto LABEL_47;
  }
  v22 = std::vector<std::string>::operator[](param_vec, 0LL);
  if ( !std::operator==<char>("DIRECTLEVEL", v22) )
    goto LABEL_79;
  if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
    __asan_report_load8(&context->player);
  Player::getSceneComp(context->player);
  PlayerSceneComp::getMyPlayerWorld((const PlayerSceneComp *const)(v4 + 64));
  if ( std::operator==<PlayerWorld>(0LL, (const std::shared_ptr<PlayerWorld> *)(v4 + 64)) )
  {
    common::milog::MiLogStream::create(
      (common::milog::MiLogStream *)&v39,
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/player/gm/player_gm_comp.cpp",
      "procWorld",
      7842);
    common::milog::MiLogStream::operator<<<char [23],(char *[23])0>(
      (common::milog::MiLogStream *const)&v39,
      (const char (*)[23])"getMyPlayerWorld fails");
    common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)&v39);
    v3 = -1;
    v23 = 0;
  }
  else
  {
    *(_DWORD *)(v4 + 48) = 0;
    v24 = std::vector<std::string>::operator[](param_vec, 1uLL);
    if ( common::tools::StringUtils::strToNum<unsigned int>(v24, (unsigned int *)(v4 + 48), 1) )
    {
      std::string::operator=(ret_msg, "WORLD LEVEL num");
      v3 = -1;
      v23 = 0;
    }
    else
    {
      ServiceBox::findService<GameserverService>();
      GameserverService::getConfig((GameserverService *const)(v4 + 96));
      v25 = std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 96));
      level_config_ptr_0 = data::PlayerExcelConfigMgrBase::findPlayerLevelLockExcelConfig(
                             &v25->design_config.txt_config_mgr.player_config_mgr,
                             *(_DWORD *)(v4 + 48));
      std::shared_ptr<Config>::~shared_ptr((std::shared_ptr<Config> *const)(v4 + 96));
      if ( level_config_ptr_0 )
      {
        if ( *(_BYTE *)(((unsigned __int64)&level_config_ptr_0->player_level_upper_limit >> 3) + 0x7FFF8000) != 0
          && (char)((((_BYTE)level_config_ptr_0 + 20) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&level_config_ptr_0->player_level_upper_limit >> 3)
                                                                            + 0x7FFF8000) )
        {
          __asan_report_load4(&level_config_ptr_0->player_level_upper_limit);
        }
        player_level_0 = level_config_ptr_0->player_level_upper_limit - 1;
        if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
          __asan_report_load8(&context->player);
        v26 = Player::getBasicComp(context->player);
        PlayerBasicComp::setLevelByGm(v26, player_level_0, 1);
        v27 = std::__shared_ptr_access<PlayerWorld,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<PlayerWorld,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 64));
        PlayerWorld::adjustLevelByGm(v27, *(_DWORD *)(v4 + 48), 1);
        if ( *(_BYTE *)(((unsigned __int64)&level_config_ptr_0->unlock_main_quest_id >> 3) + 0x7FFF8000) != 0
          && (char)((((_BYTE)level_config_ptr_0 + 12) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&level_config_ptr_0->unlock_main_quest_id >> 3)
                                                                            + 0x7FFF8000) )
        {
          __asan_report_load4(&level_config_ptr_0->unlock_main_quest_id);
        }
        if ( level_config_ptr_0->unlock_main_quest_id )
        {
          if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
            __asan_report_load8(&context->player);
          v28 = Player::getQuestComp(context->player);
          if ( *(_BYTE *)(((unsigned __int64)&level_config_ptr_0->unlock_main_quest_id >> 3) + 0x7FFF8000) != 0
            && (char)((((_BYTE)level_config_ptr_0 + 12) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&level_config_ptr_0->unlock_main_quest_id >> 3)
                                                                              + 0x7FFF8000) )
          {
            __asan_report_load4(&level_config_ptr_0->unlock_main_quest_id);
          }
          PlayerQuestComp::forceAcceptAndFinishParentQuestByGM(v28, level_config_ptr_0->unlock_main_quest_id, 1);
        }
        v23 = 1;
      }
      else
      {
        std::to_string(&__rhs, *(_DWORD *)(v4 + 48));
        std::operator+<char>(&v39, "invalid level:", &__rhs);
        std::string::operator=(ret_msg, &v39);
        std::string::~string(&v39);
        std::string::~string(&__rhs);
        v3 = -1;
        v23 = 0;
      }
    }
  }
  std::shared_ptr<PlayerWorld>::~shared_ptr((std::shared_ptr<PlayerWorld> *const)(v4 + 64));
  if ( v23 == 1 )
LABEL_79:
    v3 = 0;
LABEL_80:
  result = v3;
  if ( v40 == (char *)v4 )
  {
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v4 = 1172321806LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 7868: range 0000000017D76A50-0000000017D76AF2
void __cdecl procWeatherRegister::procWeatherRegister(procWeatherRegister *const this)
{
  std::function<int(GmContext&,const std::vector<std::string>&,std::string&)> *v1; // rax
  std::allocator<char> __a; // [rsp+1Fh] [rbp-31h] BYREF
  std::string __k; // [rsp+20h] [rbp-30h] BYREF

  std::allocator<char>::allocator(&__a);
  std::string::basic_string<std::allocator<char>>(&__k, "WEATHER", &__a);
  v1 = std::unordered_map<std::string,std::function<int ()(GmContext &,std::vector<std::string> const&,std::string&)>>::operator[](
         &GmUtils::op_func_map[abi:cxx11],
         &__k);
  std::function<int ()(GmContext &,std::vector<std::string> const&,std::string&)>::operator=<int (&)(GmContext &,std::vector<std::string> const&,std::string&)>(
    v1,
    (int (*)(GmContext *, const std::vector<std::string> *, std::string *))procWeather);
  std::string::~string(&__k);
  std::allocator<char>::~allocator(&__a);
};

// Line 7869: range 0000000017C018C0-0000000017C02B4C
int32_t __cdecl procWeather(GmContext *context, const std::vector<std::string> *param_vec, std::string *ret_msg)
{
  unsigned __int64 v3; // r13
  __int64 v4; // rax
  _DWORD *v5; // r12
  int32_t v6; // r14d
  const std::string *v7; // rax
  unsigned __int64 Position; // rax
  __int64 v9; // r14
  __int64 v10; // rax
  __int64 v11; // rax
  __int64 v12; // rax
  __int64 v13; // rax
  __int64 v14; // rax
  std::_Rb_tree_iterator<std::pair<const std::string,unsigned int> >::_Base_ptr *v15; // rax
  std::_Rb_tree_iterator<std::pair<const std::string,unsigned int> >::_Base_ptr *v16; // rdx
  __int64 v17; // rcx
  __int64 v18; // rax
  __int64 v19; // rcx
  __int64 v20; // rax
  __int64 v21; // r14
  Scene *scene; // rcx
  Scene *v23; // rax
  unsigned __int64 v24; // rax
  __int64 (__fastcall *v25)(Scene *, _QWORD, double); // r8
  unsigned __int8 v26; // al
  __int64 v27; // rcx
  __int64 v28; // rcx
  __int64 v29; // rcx
  __int64 v30; // rcx
  __int64 v31; // r14
  std::__shared_ptr_access<InteriorCheckablePolygon,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v32; // r15
  bool isPointInsidePolygon; // al
  std::pair<const std::string,unsigned int> *i; // r14
  std::vector<std::string>::const_reference v35; // rax
  const std::string *v36; // rax
  const std::string *v37; // rax
  PlayerSceneComp *SceneComp; // rax
  int32_t result; // eax
  std::less<std::string > __comp; // [rsp+22h] [rbp-65Eh] BYREF
  std::allocator<std::pair<const std::string,unsigned int> > __a; // [rsp+23h] [rbp-65Dh] BYREF
  data::ClimateType __y; // [rsp+24h] [rbp-65Ch] BYREF
  data::ClimateType v44; // [rsp+28h] [rbp-658h] BYREF
  data::ClimateType v45; // [rsp+2Ch] [rbp-654h] BYREF
  data::ClimateType v46; // [rsp+30h] [rbp-650h] BYREF
  data::ClimateType v47; // [rsp+34h] [rbp-64Ch] BYREF
  data::ClimateType v48; // [rsp+38h] [rbp-648h] BYREF
  data::ClimateType v49; // [rsp+3Ch] [rbp-644h] BYREF
  data::ClimateType v50; // [rsp+40h] [rbp-640h] BYREF
  data::ClimateType v51; // [rsp+44h] [rbp-63Ch] BYREF
  data::ClimateType v52; // [rsp+48h] [rbp-638h] BYREF
  data::ClimateType v53; // [rsp+4Ch] [rbp-634h] BYREF
  data::ClimateType v54; // [rsp+50h] [rbp-630h] BYREF
  data::ClimateType v55; // [rsp+54h] [rbp-62Ch] BYREF
  data::ClimateType v56; // [rsp+58h] [rbp-628h] BYREF
  uint32_t climate_type; // [rsp+5Ch] [rbp-624h]
  std::vector<std::pair<unsigned int,bool>>::const_iterator __for_begin; // [rsp+60h] [rbp-620h] BYREF
  std::vector<std::pair<unsigned int,bool>>::const_iterator __for_end; // [rsp+68h] [rbp-618h] BYREF
  std::map<std::string,unsigned int> *__for_range_0; // [rsp+70h] [rbp-610h]
  const std::pair<const std::string,unsigned int> *v61; // [rsp+78h] [rbp-608h]
  std::tuple_element<0,const std::pair<const std::string,unsigned int> >::type *str; // [rsp+80h] [rbp-600h]
  std::tuple_element<1,const std::pair<const std::string,unsigned int> >::type *weather_type; // [rsp+88h] [rbp-5F8h]
  const SceneScriptConfig *scene_script_config_ptr; // [rsp+90h] [rbp-5F0h]
  const std::vector<std::pair<unsigned int,bool>> *weather_grid_vec_ptr; // [rsp+98h] [rbp-5E8h]
  const std::vector<std::pair<unsigned int,bool>> *__for_range; // [rsp+A0h] [rbp-5E0h]
  std::tuple_element<0,const std::pair<unsigned int,bool> >::type *weather_area_id; // [rsp+A8h] [rbp-5D8h]
  std::tuple_element<1,const std::pair<unsigned int,bool> >::type *is_border; // [rsp+B0h] [rbp-5D0h]
  const SceneJsonConfig *scene_json_config_ptr; // [rsp+B8h] [rbp-5C8h]
  const std::unordered_map<unsigned int,ConfigSceneWeatherArea> *config_scene_weather_area_map; // [rsp+C0h] [rbp-5C0h]
  const ConfigSceneWeatherArea *config_scene_weather_area; // [rsp+C8h] [rbp-5B8h]
  std::map<std::string,unsigned int>::iterator __for_begin_0; // [rsp+D0h] [rbp-5B0h] BYREF
  std::map<std::string,unsigned int>::iterator __for_end_0; // [rsp+D8h] [rbp-5A8h] BYREF
  data::Point2D point; // [rsp+E4h] [rbp-59Ch] BYREF
  std::string v75; // [rsp+F0h] [rbp-590h] BYREF
  std::string __rhs; // [rsp+110h] [rbp-570h] BYREF
  std::pair<const std::string,unsigned int> v77; // [rsp+130h] [rbp-550h] BYREF
  std::pair<const std::string,unsigned int> v78; // [rsp+158h] [rbp-528h] BYREF
  std::pair<const std::string,unsigned int> v79; // [rsp+180h] [rbp-500h] BYREF
  std::pair<const std::string,unsigned int> v80; // [rsp+1A8h] [rbp-4D8h] BYREF
  std::pair<const std::string,unsigned int> v81; // [rsp+1D0h] [rbp-4B0h] BYREF
  std::pair<const std::string,unsigned int> v82; // [rsp+1F8h] [rbp-488h] BYREF
  std::pair<const std::string,unsigned int> v83; // [rsp+220h] [rbp-460h] BYREF
  std::pair<const std::string,unsigned int> v84; // [rsp+248h] [rbp-438h] BYREF
  std::pair<const std::string,unsigned int> v85; // [rsp+270h] [rbp-410h] BYREF
  std::pair<const std::string,unsigned int> v86; // [rsp+298h] [rbp-3E8h] BYREF
  std::pair<const std::string,unsigned int> v87; // [rsp+2C0h] [rbp-3C0h] BYREF
  std::pair<const std::string,unsigned int> v88; // [rsp+2E8h] [rbp-398h] BYREF
  std::pair<const std::string,unsigned int> v89; // [rsp+310h] [rbp-370h] BYREF
  std::pair<const std::string,unsigned int> v90; // [rsp+338h] [rbp-348h] BYREF
  std::pair<const std::string,unsigned int> v91; // [rsp+360h] [rbp-320h] BYREF
  __int64 v92; // [rsp+388h] [rbp-2F8h] BYREF
  char v93[752]; // [rsp+390h] [rbp-2F0h] BYREF
  Vector2 M_node; // 0:xmm0_8.8

  v3 = (unsigned __int64)v93;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_4(704LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "6 48 4 16 extra_count:7958 64 8 9 iter:7903 96 8 10 coord:7885 128 12 13 position:7884 160 48 20"
                        " str_weather_map:7927 240 392 7 ss:7887";
  *(_QWORD *)(v3 + 16) = procWeather;
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = -234556943;
  v5[536862722] = -218959360;
  v5[536862723] = -218959360;
  v5[536862724] = -219020288;
  v5[536862726] = -219021312;
  v5[536862727] = 62194;
  v5[536862739] = -218103808;
  v5[536862740] = -202116109;
  v5[536862741] = -202116109;
  if ( std::vector<std::string>::empty(param_vec) )
  {
    std::string::operator=(ret_msg, "param num error!");
    v6 = -1;
  }
  else
  {
    v7 = std::vector<std::string>::operator[](param_vec, 0LL);
    if ( std::operator==<char>(v7, "PRINT") )
    {
      if ( *(_BYTE *)(((unsigned __int64)&context->scene >> 3) + 0x7FFF8000) )
        __asan_report_load8(&context->scene);
      scene_script_config_ptr = Scene::getScriptConfig(context->scene);
      if ( scene_script_config_ptr )
      {
        if ( *(_BYTE *)(((unsigned __int64)&context->avatar >> 3) + 0x7FFF8000) )
          __asan_report_load8(&context->avatar);
        Position = (unsigned __int64)Entity::getPosition((const Entity *const)context->avatar);
        if ( (char)(Position & 7) >= *(_BYTE *)((Position >> 3) + 0x7FFF8000)
          && *(_BYTE *)((Position >> 3) + 0x7FFF8000) != 0
          || *(_BYTE *)(((Position + 11) >> 3) + 0x7FFF8000) != 0
          && (char)((Position + 11) & 7) >= *(_BYTE *)(((Position + 11) >> 3) + 0x7FFF8000) )
        {
          Position = __asan_report_load_n(Position, 12LL);
        }
        *(_QWORD *)(v3 + 128) = *(_QWORD *)Position;
        *(_DWORD *)(v3 + 136) = *(_DWORD *)(Position + 8);
        Vector2::Vector2((Vector2 *const)&__for_end_0, (const Vector3 *)(v3 + 128));
        M_node = (Vector2)__for_end_0._M_node;
        *(Coordinate *)(v3 + 96) = SceneScriptConfig::getCoordinate(
                                     scene_script_config_ptr,
                                     VISION_LEVEL_NORMAL,
                                     M_node);
        weather_grid_vec_ptr = SceneScriptConfig::getWeatherGridVec(
                                 scene_script_config_ptr,
                                 (const Coordinate *)(v3 + 96));
        std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream(v3 + 240);
        v9 = std::operator<<<std::char_traits<char>>(v3 + 256, "current position:");
        Vector3::toString[abi:cxx11](&__rhs, (const Vector3 *const)(v3 + 128));
        v10 = std::operator<<<char>(v9, &__rhs);
        v11 = std::operator<<<std::char_traits<char>>(v10, "coord:(");
        v12 = std::ostream::operator<<(v11, *(unsigned int *)(v3 + 96));
        v13 = std::operator<<<std::char_traits<char>>(v12, ",");
        v14 = std::ostream::operator<<(v13, *(unsigned int *)(v3 + 100));
        std::operator<<<std::char_traits<char>>(v14, ")\n");
        std::string::~string(&__rhs);
        if ( weather_grid_vec_ptr )
        {
          __for_range = weather_grid_vec_ptr;
          __for_begin._M_current = std::vector<std::pair<unsigned int,bool>>::begin(weather_grid_vec_ptr)._M_current;
          __for_end._M_current = std::vector<std::pair<unsigned int,bool>>::end(weather_grid_vec_ptr)._M_current;
          while ( __gnu_cxx::operator!=<std::pair<unsigned int,bool> const*,std::vector<std::pair<unsigned int,bool>>>(
                    &__for_begin,
                    &__for_end) )
          {
            v15 = (std::_Rb_tree_iterator<std::pair<const std::string,unsigned int> >::_Base_ptr *)__gnu_cxx::__normal_iterator<std::pair<unsigned int,bool> const*,std::vector<std::pair<unsigned int,bool>>>::operator*(&__for_begin);
            v16 = v15;
            if ( ((unsigned __int8)v15 & 7) >= *(_BYTE *)(((unsigned __int64)v15 >> 3) + 0x7FFF8000)
              && *(_BYTE *)(((unsigned __int64)v15 >> 3) + 0x7FFF8000) != 0
              || *(_BYTE *)((((unsigned __int64)v15 + 7) >> 3) + 0x7FFF8000) != 0
              && (((unsigned __int8)v15 + 7) & 7) >= *(_BYTE *)((((unsigned __int64)v15 + 7) >> 3) + 0x7FFF8000) )
            {
              __asan_report_load_n(v15, 8LL);
            }
            __for_begin_0._M_node = *v16;
            weather_area_id = (std::tuple_element<0,const std::pair<unsigned int,bool> >::type *)std::get<0ul,unsigned int,bool>((const std::pair<unsigned int,bool> *)&__for_begin_0);
            is_border = (std::tuple_element<1,const std::pair<unsigned int,bool> >::type *)std::get<1ul,unsigned int,bool>((const std::pair<unsigned int,bool> *)&__for_begin_0);
            v17 = std::operator<<<std::char_traits<char>>(v3 + 256, "[weather_area_id:");
            if ( *(_BYTE *)(((unsigned __int64)weather_area_id >> 3) + 0x7FFF8000) != 0
              && (char)(((unsigned __int8)weather_area_id & 7) + 3) >= *(_BYTE *)(((unsigned __int64)weather_area_id >> 3)
                                                                                + 0x7FFF8000) )
            {
              __asan_report_load4(weather_area_id);
            }
            v18 = std::ostream::operator<<(v17, *weather_area_id);
            v19 = std::operator<<<std::char_traits<char>>(v18, " is_border:");
            if ( *(_BYTE *)(((unsigned __int64)is_border >> 3) + 0x7FFF8000) != 0
              && ((unsigned __int8)is_border & 7) >= *(_BYTE *)(((unsigned __int64)is_border >> 3) + 0x7FFF8000) )
            {
              __asan_report_load1(is_border);
            }
            v20 = std::ostream::operator<<(v19, *is_border);
            v21 = std::operator<<<std::char_traits<char>>(v20, " isWeatherAreaClosed:");
            if ( *(_BYTE *)(((unsigned __int64)&context->scene >> 3) + 0x7FFF8000) )
              *(double *)&M_node = __asan_report_load8(&context->scene);
            scene = context->scene;
            v23 = scene;
            if ( *(_BYTE *)(((unsigned __int64)scene >> 3) + 0x7FFF8000) )
              *(double *)&M_node = __asan_report_load8(context->scene);
            v24 = (unsigned __int64)(v23->_vptr_DescribalBase + 41);
            if ( *(_BYTE *)((v24 >> 3) + 0x7FFF8000) )
              *(double *)&M_node = __asan_report_load8(v24);
            v25 = *(__int64 (__fastcall **)(Scene *, _QWORD, double))v24;
            if ( *(_BYTE *)(((unsigned __int64)weather_area_id >> 3) + 0x7FFF8000) != 0
              && (char)(((unsigned __int8)weather_area_id & 7) + 3) >= *(_BYTE *)(((unsigned __int64)weather_area_id >> 3)
                                                                                + 0x7FFF8000) )
            {
              __asan_report_load4(weather_area_id);
            }
            v26 = v25(scene, *weather_area_id, *(double *)&M_node);
            std::ostream::operator<<(v21, v26);
            if ( *(_BYTE *)(((unsigned __int64)&context->scene >> 3) + 0x7FFF8000) )
              *(double *)&M_node = __asan_report_load8(&context->scene);
            scene_json_config_ptr = Scene::getJsonConfig(context->scene);
            if ( scene_json_config_ptr )
            {
              config_scene_weather_area_map = &scene_json_config_ptr->config_scene_weather_area_map;
              *(std::unordered_map<unsigned int,ConfigSceneWeatherArea>::const_iterator *)(v3 + 64) = std::unordered_map<unsigned int,ConfigSceneWeatherArea>::find(&scene_json_config_ptr->config_scene_weather_area_map, weather_area_id);
              __for_end_0._M_node = (std::_Rb_tree_iterator<std::pair<const std::string,unsigned int> >::_Base_ptr)std::unordered_map<unsigned int,ConfigSceneWeatherArea>::end(config_scene_weather_area_map)._M_cur;
              if ( std::__detail::operator!=<std::pair<unsigned int const,ConfigSceneWeatherArea>,false>(
                     (const std::__detail::_Node_iterator_base<std::pair<unsigned int const,ConfigSceneWeatherArea>,false> *)(v3 + 64),
                     (const std::__detail::_Node_iterator_base<std::pair<unsigned int const,ConfigSceneWeatherArea>,false> *)&__for_end_0) )
              {
                config_scene_weather_area = &std::__detail::_Node_const_iterator<std::pair<unsigned int const,ConfigSceneWeatherArea>,false,false>::operator->((const std::__detail::_Node_const_iterator<std::pair<unsigned int const,ConfigSceneWeatherArea>,false,false> *const)(v3 + 64))->second;
                v27 = std::operator<<<std::char_traits<char>>(v3 + 256, " is_accurate_border:");
                if ( *(_BYTE *)(((unsigned __int64)&config_scene_weather_area->config_weather_area.is_accurate_border >> 3)
                              + 0x7FFF8000) != 0
                  && (((unsigned __int8)config_scene_weather_area + 4) & 7) >= *(_BYTE *)(((unsigned __int64)&config_scene_weather_area->config_weather_area.is_accurate_border >> 3)
                                                                                        + 0x7FFF8000) )
                {
                  __asan_report_load1(&config_scene_weather_area->config_weather_area.is_accurate_border);
                }
                std::ostream::operator<<(v27, config_scene_weather_area->config_weather_area.is_accurate_border);
                v28 = std::operator<<<std::char_traits<char>>(v3 + 256, " is_use_height_border:");
                if ( *(char *)(((unsigned __int64)&config_scene_weather_area->config_weather_area.is_use_height_border >> 3)
                             + 0x7FFF8000) < 0 )
                  __asan_report_load1(&config_scene_weather_area->config_weather_area.is_use_height_border);
                std::ostream::operator<<(v28, config_scene_weather_area->config_weather_area.is_use_height_border);
                if ( *(char *)(((unsigned __int64)&config_scene_weather_area->config_weather_area.is_use_height_border >> 3)
                             + 0x7FFF8000) < 0 )
                  __asan_report_load1(&config_scene_weather_area->config_weather_area.is_use_height_border);
                if ( config_scene_weather_area->config_weather_area.is_use_height_border )
                {
                  v29 = std::operator<<<std::char_traits<char>>(v3 + 256, " bottom:");
                  if ( *(_BYTE *)(((unsigned __int64)&config_scene_weather_area->config_weather_area.bottom >> 3)
                                + 0x7FFF8000) != 0
                    && (char)((((_BYTE)config_scene_weather_area + 36) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&config_scene_weather_area->config_weather_area.bottom >> 3)
                                                                                             + 0x7FFF8000) )
                  {
                    __asan_report_load4(&config_scene_weather_area->config_weather_area.bottom);
                  }
                  std::ostream::operator<<(
                    v29,
                    *(double *)_mm_cvtsi32_si128(LODWORD(config_scene_weather_area->config_weather_area.bottom)).m128i_i64);
                  v30 = std::operator<<<std::char_traits<char>>(v3 + 256, " top:");
                  if ( *(_BYTE *)(((unsigned __int64)&config_scene_weather_area->config_weather_area.top >> 3)
                                + 0x7FFF8000) != 0
                    && *(_BYTE *)(((unsigned __int64)&config_scene_weather_area->config_weather_area.top >> 3)
                                + 0x7FFF8000) <= 3 )
                  {
                    __asan_report_load4(&config_scene_weather_area->config_weather_area.top);
                  }
                  M_node = (Vector2)_mm_cvtsi32_si128(LODWORD(config_scene_weather_area->config_weather_area.top)).m128i_u64[0];
                  std::ostream::operator<<(v30, *(double *)&M_node);
                }
                if ( std::operator!=<InteriorCheckablePolygon>(0LL, &config_scene_weather_area->polygon_ptr) )
                {
                  v31 = std::operator<<<std::char_traits<char>>(v3 + 256, " inside_polygon:");
                  v32 = std::__shared_ptr_access<InteriorCheckablePolygon,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<InteriorCheckablePolygon,(__gnu_cxx::_Lock_policy)2,false,false> *const)&config_scene_weather_area->polygon_ptr);
                  point.x = *(float *)(v3 + 128);
                  M_node = (Vector2)*(unsigned int *)(v3 + 136);
                  point.y = *(float *)(v3 + 136);
                  point.is_json_loaded = 0;
                  Vector2::Vector2((Vector2 *const)&__for_end_0, &point);
                  isPointInsidePolygon = InteriorCheckablePolygon::isPointInsidePolygon(
                                           v32,
                                           (const Vector2 *)&__for_end_0);
                  std::ostream::operator<<(v31, isPointInsidePolygon);
                }
              }
            }
            std::operator<<<std::char_traits<char>>(v3 + 256, "]\n");
            __gnu_cxx::__normal_iterator<std::pair<unsigned int,bool> const*,std::vector<std::pair<unsigned int,bool>>>::operator++(&__for_begin);
          }
          std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::str(&__rhs, v3 + 240);
          std::string::operator=(ret_msg, &__rhs);
          std::string::~string(&__rhs);
          v6 = 0;
        }
        else
        {
          std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::str(&__rhs, v3 + 240);
          std::operator+<char>(&v75, "getWeatherGridVec fail.", &__rhs);
          std::string::operator=(ret_msg, &v75);
          std::string::~string(&v75);
          std::string::~string(&__rhs);
          v6 = -1;
        }
        std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream(v3 + 240);
      }
      else
      {
        std::string::operator=(ret_msg, "getScriptConfig fail");
        v6 = -1;
      }
    }
    else
    {
      climate_type = 0;
      __y = CLIMATE_SUNNY;
      std::pair<std::string const,unsigned int>::pair<char const(&)[4],data::ClimateType,true>(
        &v77,
        (const char (*)[4])off_2635FF80,
        &__y);
      v44 = CLIMATE_SUNNY;
      std::pair<std::string const,unsigned int>::pair<char const(&)[4],data::ClimateType,true>(
        &v78,
        (const char (*)[4])off_2635FFC0,
        &v44);
      v45 = CLIMATE_SUNNY;
      std::pair<std::string const,unsigned int>::pair<char const(&)[5],data::ClimateType,true>(
        &v79,
        (const char (*)[5])"HEAT",
        &v45);
      v46 = CLIMATE_CLOUDY;
      std::pair<std::string const,unsigned int>::pair<char const(&)[6],data::ClimateType,true>(
        &v80,
        (const char (*)[6])"CLOUD",
        &v46);
      v47 = CLIMATE_RAIN;
      std::pair<std::string const,unsigned int>::pair<char const(&)[5],data::ClimateType,true>(
        &v81,
        (const char (*)[5])"RAIN",
        &v47);
      v48 = CLIMATE_THUNDERSTORM;
      std::pair<std::string const,unsigned int>::pair<char const(&)[7],data::ClimateType,true>(
        &v82,
        (const char (*)[7])"THUNER",
        &v48);
      v49 = CLIMATE_THUNDERSTORM;
      std::pair<std::string const,unsigned int>::pair<char const(&)[6],data::ClimateType,true>(
        &v83,
        (const char (*)[6])"STORM",
        &v49);
      v50 = CLIMATE_THUNDERSTORM;
      std::pair<std::string const,unsigned int>::pair<char const(&)[10],data::ClimateType,true>(
        &v84,
        (const char (*)[10])"LIGHTNING",
        &v50);
      v51 = CLIMATE_SNOW;
      std::pair<std::string const,unsigned int>::pair<char const(&)[5],data::ClimateType,true>(
        &v85,
        (const char (*)[5])"SNOW",
        &v51);
      v52 = CLIMATE_SNOW;
      std::pair<std::string const,unsigned int>::pair<char const(&)[7],data::ClimateType,true>(
        &v86,
        (const char (*)[7])"FREEZE",
        &v52);
      v53 = CLIMATE_SNOW;
      std::pair<std::string const,unsigned int>::pair<char const(&)[6],data::ClimateType,true>(
        &v87,
        (const char (*)[6])"FROST",
        &v53);
      v54 = CLIMATE_SNOW;
      std::pair<std::string const,unsigned int>::pair<char const(&)[4],data::ClimateType,true>(
        &v88,
        (const char (*)[4])off_26360240,
        &v54);
      v55 = CLIMATE_MIST;
      std::pair<std::string const,unsigned int>::pair<char const(&)[5],data::ClimateType,true>(
        &v89,
        (const char (*)[5])"MIST",
        &v55);
      v56 = CLIMATE_MIST;
      std::pair<std::string const,unsigned int>::pair<char const(&)[4],data::ClimateType,true>(
        &v90,
        (const char (*)[4])off_263602C0,
        &v56);
      *(_DWORD *)(v3 + 48) = 7;
      std::pair<std::string const,unsigned int>::pair<char const(&)[7],data::ClimateType,true>(
        &v91,
        (const char (*)[7])"DESERT",
        (data::ClimateType *)(v3 + 48));
      std::allocator<std::pair<std::string const,unsigned int>>::allocator(&__a);
      std::map<std::string,unsigned int>::map(
        (std::map<std::string,unsigned int> *const)(v3 + 160),
        (std::initializer_list<std::pair<const std::string,unsigned int> >)__PAIR128__(15LL, &v77),
        &__comp,
        &__a);
      std::allocator<std::pair<std::string const,unsigned int>>::~allocator(&__a);
      for ( i = (std::pair<const std::string,unsigned int> *)&v92;
            i != &v77;
            std::pair<std::string const,unsigned int>::~pair(i) )
      {
        --i;
      }
      __for_range_0 = (std::map<std::string,unsigned int> *)(v3 + 160);
      __for_begin_0._M_node = std::map<std::string,unsigned int>::begin((std::map<std::string,unsigned int> *const)(v3 + 160))._M_node;
      __for_end_0._M_node = std::map<std::string,unsigned int>::end(__for_range_0)._M_node;
      while ( std::operator!=(&__for_begin_0, &__for_end_0) )
      {
        v61 = std::_Rb_tree_iterator<std::pair<std::string const,unsigned int>>::operator*(&__for_begin_0);
        str = std::get<0ul,std::string const,unsigned int>(v61);
        weather_type = (std::tuple_element<1,const std::pair<const std::string,unsigned int> >::type *)std::get<1ul,std::string const,unsigned int>(v61);
        v35 = std::vector<std::string>::operator[](param_vec, 0LL);
        if ( std::string::find(v35, str, 0LL) != -1 )
        {
          if ( *(_BYTE *)(((unsigned __int64)weather_type >> 3) + 0x7FFF8000) != 0
            && (char)(((unsigned __int8)weather_type & 7) + 3) >= *(_BYTE *)(((unsigned __int64)weather_type >> 3)
                                                                           + 0x7FFF8000) )
          {
            __asan_report_load4(weather_type);
          }
          climate_type = *weather_type;
          break;
        }
        std::_Rb_tree_iterator<std::pair<std::string const,unsigned int>>::operator++(&__for_begin_0);
      }
      if ( climate_type )
      {
        *(_DWORD *)(v3 + 48) = 0;
        if ( std::vector<std::string>::size(param_vec) > 1 )
        {
          v37 = std::vector<std::string>::operator[](param_vec, 1uLL);
          common::tools::StringUtils::strToNum<unsigned int>(v37, (unsigned int *)(v3 + 48), 1);
        }
        if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
          __asan_report_load8(&context->player);
        SceneComp = Player::getSceneComp(context->player);
        v6 = PlayerSceneComp::setCurrentWeatherTypeByGm(SceneComp, climate_type, *(_DWORD *)(v3 + 48));
      }
      else
      {
        v36 = std::vector<std::string>::operator[](param_vec, 0LL);
        std::operator+<char>(&__rhs, "unknown weather:", v36);
        std::string::operator=(ret_msg, &__rhs);
        std::string::~string(&__rhs);
        v6 = -1;
      }
      std::map<std::string,unsigned int>::~map((std::map<std::string,unsigned int> *const)(v3 + 160));
    }
  }
  result = v6;
  if ( v93 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8010) = 0;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8018) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF804C) = 0LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8054) = 0;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8020) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8028) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8030) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8038) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8040) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8048) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8050) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 7966: range 0000000017D76FE4-0000000017D77086
void __cdecl robotGetPlayerDataRegister::robotGetPlayerDataRegister(robotGetPlayerDataRegister *const this)
{
  std::function<int(GmContext&,const std::vector<std::string>&,std::string&)> *v1; // rax
  std::allocator<char> __a; // [rsp+1Fh] [rbp-31h] BYREF
  std::string __k; // [rsp+20h] [rbp-30h] BYREF

  std::allocator<char>::allocator(&__a);
  std::string::basic_string<std::allocator<char>>(&__k, "ROBOT_GET_DATA", &__a);
  v1 = std::unordered_map<std::string,std::function<int ()(GmContext &,std::vector<std::string> const&,std::string&)>>::operator[](
         &GmUtils::op_func_map[abi:cxx11],
         &__k);
  std::function<int ()(GmContext &,std::vector<std::string> const&,std::string&)>::operator=<int (&)(GmContext &,std::vector<std::string> const&,std::string&)>(
    v1,
    (int (*)(GmContext *, const std::vector<std::string> *, std::string *))robotGetPlayerData);
  std::string::~string(&__k);
  std::allocator<char>::~allocator(&__a);
};

// Line 7967: range 0000000017C02B4D-0000000017C0309C
int32_t __cdecl robotGetPlayerData(GmContext *context, const std::vector<std::string> *param_vec, std::string *ret_msg)
{
  unsigned __int64 v3; // r13
  __int64 v4; // rax
  _DWORD *v5; // rbx
  std::__shared_ptr_access<PlayerCompBase,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v6; // rax
  unsigned __int64 v7; // rdx
  __int64 Uid; // rcx
  int32_t v9; // r14d
  std::string *v10; // rax
  int32_t result; // eax
  const EcsBase<Player,PlayerCompBase,71>::CompBasePair *v12; // [rsp+28h] [rbp-388h]
  std::tuple_element<0,const std::pair<unsigned int,std::shared_ptr<PlayerCompBase> > >::type *comp_type; // [rsp+30h] [rbp-380h]
  std::tuple_element<1,const std::pair<unsigned int,std::shared_ptr<PlayerCompBase> > >::type *player_comp_ptr; // [rsp+38h] [rbp-378h]
  EcsBase<Player,PlayerCompBase,71>::Iterator __for_begin; // [rsp+40h] [rbp-370h] BYREF
  EcsBase<Player,PlayerCompBase,71>::Iterator __for_end; // [rsp+50h] [rbp-360h] BYREF
  common::milog::MiLogStream v17; // [rsp+60h] [rbp-350h] BYREF
  char v18[816]; // [rsp+80h] [rbp-330h] BYREF

  v3 = (unsigned __int64)v18;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_4(768LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "2 48 32 11 notify:7968 112 520 8 bin:7969";
  *(_QWORD *)(v3 + 16) = robotGetPlayerData;
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = 61937;
  v5[536862722] = -219021312;
  v5[536862723] = 62194;
  v5[536862739] = -218103808;
  v5[536862740] = -202116109;
  v5[536862741] = -202116109;
  v5[536862742] = -202116109;
  v5[536862743] = -202116109;
  proto::RobotPushPlayerDataNotify::RobotPushPlayerDataNotify((proto::RobotPushPlayerDataNotify *const)(v3 + 48));
  proto::PlayerDataBin::PlayerDataBin((proto::PlayerDataBin *const)(v3 + 112));
  if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
    __asan_report_load8(&context->player);
  EcsBase<Player,PlayerCompBase,71u>::begin((const EcsBase<Player,PlayerCompBase,71> *const)&__for_begin);
  EcsBase<Player,PlayerCompBase,71u>::end((const EcsBase<Player,PlayerCompBase,71> *const)&__for_end);
  while ( EcsBase<Player,PlayerCompBase,71u>::Iterator::operator!=(&__for_begin, &__for_end) )
  {
    v12 = EcsBase<Player,PlayerCompBase,71u>::Iterator::operator*(&__for_begin);
    comp_type = (std::tuple_element<0,const std::pair<unsigned int,std::shared_ptr<PlayerCompBase> > >::type *)std::get<0ul,unsigned int,std::shared_ptr<PlayerCompBase>>(v12);
    player_comp_ptr = (std::tuple_element<1,const std::pair<unsigned int,std::shared_ptr<PlayerCompBase> > >::type *)std::get<1ul,unsigned int,std::shared_ptr<PlayerCompBase>>(v12);
    v6 = std::__shared_ptr_access<PlayerCompBase,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<PlayerCompBase,(__gnu_cxx::_Lock_policy)2,false,false> *const)player_comp_ptr);
    if ( *(_BYTE *)(((unsigned __int64)v6 >> 3) + 0x7FFF8000) )
      __asan_report_load8(v6);
    v7 = (unsigned __int64)(v6->_vptr_PlayerCompBase + 3);
    if ( *(_BYTE *)((v7 >> 3) + 0x7FFF8000) )
      __asan_report_load8(v6->_vptr_PlayerCompBase + 3);
    if ( (*(unsigned int (__fastcall **)(std::__shared_ptr_access<PlayerCompBase,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *, unsigned __int64))v7)(
           v6,
           v3 + 112) )
    {
      common::milog::MiLogStream::create(
        &v17,
        &common::milog::MiLogDefault::default_log_obj_,
        4u,
        "./src/player/gm/player_gm_comp.cpp",
        "robotGetPlayerData",
        7974);
      if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
        __asan_report_load8(&context->player);
      Uid = Player::getUid(context->player);
      if ( *(_BYTE *)(((unsigned __int64)comp_type >> 3) + 0x7FFF8000) != 0
        && (char)(((unsigned __int8)comp_type & 7) + 3) >= *(_BYTE *)(((unsigned __int64)comp_type >> 3) + 0x7FFF8000) )
      {
        __asan_report_load4(comp_type);
      }
      common::milog::MiLogStream::operator()(&v17, "toBin type=%u failed, uid=%u", *comp_type, Uid);
      common::milog::MiLogStream::~MiLogStream(&v17);
      v9 = -1;
      goto LABEL_24;
    }
    EcsBase<Player,PlayerCompBase,71u>::Iterator::operator++(&__for_begin);
  }
  v10 = proto::RobotPushPlayerDataNotify::mutable_bin[abi:cxx11]((proto::RobotPushPlayerDataNotify *const)(v3 + 48));
  if ( !google::protobuf::MessageLite::SerializeToString((const google::protobuf::MessageLite *const)(v3 + 112), v10) )
  {
    common::milog::MiLogStream::create(
      &v17,
      &common::milog::MiLogDefault::default_log_obj_,
      4u,
      "./src/player/gm/player_gm_comp.cpp",
      "robotGetPlayerData",
      7980);
    common::milog::MiLogStream::operator<<<char [25],(char *[25])0>(
      &v17,
      (const char (*)[25])"serialize to bin failed.");
    common::milog::MiLogStream::~MiLogStream(&v17);
  }
  if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
    __asan_report_load8(&context->player);
  v9 = Player::sendProto(context->player, (const google::protobuf::Message *)(v3 + 48));
LABEL_24:
  proto::PlayerDataBin::~PlayerDataBin((proto::PlayerDataBin *const)(v3 + 112));
  proto::RobotPushPlayerDataNotify::~RobotPushPlayerDataNotify((proto::RobotPushPlayerDataNotify *const)(v3 + 48));
  result = v9;
  if ( v18 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF804C) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8054) = 0LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF805C) = 0;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8020) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8028) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8030) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8038) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8040) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8048) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8050) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8058) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 7985: range 0000000017D77088-0000000017D7712A
void __cdecl procCombatForceRegister::procCombatForceRegister(procCombatForceRegister *const this)
{
  std::function<int(GmContext&,const std::vector<std::string>&,std::string&)> *v1; // rax
  std::allocator<char> __a; // [rsp+1Fh] [rbp-31h] BYREF
  std::string __k; // [rsp+20h] [rbp-30h] BYREF

  std::allocator<char>::allocator(&__a);
  std::string::basic_string<std::allocator<char>>(&__k, "COMBAT_FORCE", &__a);
  v1 = std::unordered_map<std::string,std::function<int ()(GmContext &,std::vector<std::string> const&,std::string&)>>::operator[](
         &GmUtils::op_func_map[abi:cxx11],
         &__k);
  std::function<int ()(GmContext &,std::vector<std::string> const&,std::string&)>::operator=<int (&)(GmContext &,std::vector<std::string> const&,std::string&)>(
    v1,
    (int (*)(GmContext *, const std::vector<std::string> *, std::string *))procCombatForce);
  std::string::~string(&__k);
  std::allocator<char>::~allocator(&__a);
};

// Line 7986: range 0000000017C032C4-0000000017C037C7
int32_t __cdecl procCombatForce(GmContext *context, const std::vector<std::string> *param_vec, std::string *ret_msg)
{
  unsigned __int64 v3; // r12
  __int64 v4; // rax
  _DWORD *v5; // r13
  int32_t v6; // r14d
  const std::string *v7; // rax
  bool v8; // al
  GameserverService *v9; // rax
  unsigned int GameThreadLocal; // eax
  common::milog::MiLogStream *v11; // rax
  common::tools::StringStream<common::tools::FixedBuffer<4096> > *v12; // r14
  std::__shared_ptr_access<Player,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v13; // rax
  unsigned int Uid; // eax
  common::tools::StringStream<common::tools::FixedBuffer<4096> > *v15; // rax
  common::tools::StringStream<common::tools::FixedBuffer<4096> > *v16; // r14
  Player *v17; // rax
  PlayerAvatarComp *AvatarComp; // rax
  float v19; // xmm0_4
  common::tools::StringStream<common::tools::FixedBuffer<4096> > *v20; // rax
  Player *v21; // rax
  PlayerAvatarComp *v22; // r14
  common::milog::MiLogStream *v23; // r14
  int32_t result; // eax
  std::shared_ptr<Player> __r; // [rsp+20h] [rbp-100h] BYREF
  common::milog::MiLogStream v27; // [rsp+30h] [rbp-F0h] BYREF
  common::milog::MiLogStream v28; // [rsp+50h] [rbp-D0h] BYREF
  char v29[176]; // [rsp+70h] [rbp-B0h] BYREF

  v3 = (unsigned __int64)v29;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_1(128LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "3 48 4 8 uid:7995 64 16 8 oss:7987 96 16 15 player_ptr:7988";
  *(_QWORD *)(v3 + 16) = procCombatForce;
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = -234556943;
  v5[536862722] = -219021312;
  v5[536862723] = -202178560;
  common::tools::StringStream<common::tools::FixedBuffer<4096>>::StringStream((common::tools::StringStream<common::tools::FixedBuffer<4096> > *const)(v3 + 64));
  if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
    __asan_report_load8(&context->player);
  toPtr<Player,Player>((Player *)(v3 + 96));
  if ( std::operator==<Player>((const std::shared_ptr<Player> *)(v3 + 96), 0LL) )
  {
    std::string::operator=(ret_msg, "error");
    v6 = -1;
  }
  else
  {
    *(_DWORD *)(v3 + 48) = 0;
    v8 = 0;
    if ( !std::vector<std::string>::empty(param_vec) )
    {
      v7 = std::vector<std::string>::operator[](param_vec, 0LL);
      if ( !common::tools::StringUtils::strToNum<unsigned int>(v7, (unsigned int *)(v3 + 48), 1) )
      {
        if ( *(_DWORD *)(v3 + 48) )
          v8 = 1;
      }
    }
    if ( v8
      && (v9 = ServiceBox::findService<GameserverService>(),
          GameThreadLocal = (unsigned int)GameserverService::getGameThreadLocal(v9),
          PlayerMgr::findOnlinePlayer((PlayerMgr *const)&__r, GameThreadLocal + 16),
          std::shared_ptr<Player>::operator=((std::shared_ptr<Player> *const)(v3 + 96), &__r),
          std::shared_ptr<Player>::~shared_ptr(&__r),
          std::operator==<Player>((const std::shared_ptr<Player> *)(v3 + 96), 0LL)) )
    {
      common::milog::MiLogStream::create(
        &v28,
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/player/gm/player_gm_comp.cpp",
        "procCombatForce",
        8001);
      v11 = common::milog::MiLogStream::operator<<<char [23],(char *[23])0>(
              &v28,
              (const char (*)[23])"findPlayer fails, uid:");
      common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v11, (const unsigned int *)(v3 + 48));
      common::milog::MiLogStream::~MiLogStream(&v28);
      v6 = 140;
    }
    else
    {
      v12 = common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(
              (common::tools::StringStream<common::tools::FixedBuffer<4096> > *const)(v3 + 64),
              "player uid:");
      v13 = std::__shared_ptr_access<Player,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Player,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 96));
      Uid = Player::getUid(v13);
      v15 = common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(v12, Uid);
      v16 = common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(v15, " combat_force:");
      v17 = std::__shared_ptr_access<Player,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Player,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 96));
      AvatarComp = Player::getAvatarComp(v17);
      v19 = PlayerAvatarComp::calcPlayerCombatForce(AvatarComp);
      v20 = common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(v16, v19);
      common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(v20, "\n");
      v21 = std::__shared_ptr_access<Player,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Player,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 96));
      v22 = Player::getAvatarComp(v21);
      std::function<ForeachPolicy ()(Avatar const&)>::function<procCombatForce(GmContext &,std::vector<std::string> const&,std::string&)::{lambda(Avatar const&)#1},void,void>(
        (std::function<ForeachPolicy(const Avatar&)> *const)&v28,
        (procCombatForce::<lambda(const Avatar&)>)(v3 + 64));
      PlayerAvatarComp::foreachAvatar(v22, (std::function<ForeachPolicy(const Avatar&)> *)&v28);
      std::function<ForeachPolicy ()(Avatar const&)>::~function((std::function<ForeachPolicy(const Avatar&)> *const)&v28);
      common::milog::MiLogStream::create(
        &v27,
        &common::milog::MiLogDefault::default_log_obj_,
        1u,
        "./src/player/gm/player_gm_comp.cpp",
        "procCombatForce",
        8021);
      v23 = common::milog::MiLogStream::operator<<<char [15],(char *[15])0>(&v27, (const char (*)[15])"combat detail:");
      common::tools::StringStream<common::tools::FixedBuffer<4096>>::str[abi:cxx11](
        (std::string *)&v28,
        (common::tools::StringStream<common::tools::FixedBuffer<4096> > *const)(v3 + 64));
      common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v23, (const std::string *)&v28);
      std::string::~string(&v28);
      common::milog::MiLogStream::~MiLogStream(&v27);
      common::tools::StringStream<common::tools::FixedBuffer<4096>>::str[abi:cxx11](
        (std::string *)&v28,
        (common::tools::StringStream<common::tools::FixedBuffer<4096> > *const)(v3 + 64));
      std::string::operator=(ret_msg, &v28);
      std::string::~string(&v28);
      v6 = 0;
    }
  }
  std::shared_ptr<Player>::~shared_ptr((std::shared_ptr<Player> *const)(v3 + 96));
  common::tools::StringStream<common::tools::FixedBuffer<4096>>::~StringStream((common::tools::StringStream<common::tools::FixedBuffer<4096> > *const)(v3 + 64));
  result = v6;
  if ( v29 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 8006: range 0000000017C0309E-0000000017C032C3
ForeachPolicy __cdecl procCombatForce(GmContext &,std::vector<std::string> const&,std::string&)::{lambda(Avatar const&)#1}::operator()(
        const procCombatForce::<lambda(const Avatar&)> *const __closure,
        const Avatar *avatar)
{
  AvatarExcelConfigMgr *p_avatar_config_mgr; // rbx
  uint32_t AvatarId; // eax
  common::tools::StringStream<common::tools::FixedBuffer<4096> > *v4; // rbx
  unsigned int v5; // eax
  common::tools::StringStream<common::tools::FixedBuffer<4096> > *v6; // rax
  common::tools::StringStream<common::tools::FixedBuffer<4096> > *v7; // rbx
  unsigned __int64 v8; // rax
  proto::AvatarType v9; // eax
  const std::string *v10; // rax
  common::tools::StringStream<common::tools::FixedBuffer<4096> > *v11; // rbx
  float v12; // xmm0_4
  common::tools::StringStream<common::tools::FixedBuffer<4096> > *v13; // rax
  common::tools::StringStream<common::tools::FixedBuffer<4096> > *v14; // rbx
  float v15; // xmm0_4
  common::tools::StringStream<common::tools::FixedBuffer<4096> > *v16; // rax
  const data::AvatarExcelConfig *avatar_config_ptr; // [rsp+18h] [rbp-28h]
  std::shared_ptr<Config> v19[2]; // [rsp+20h] [rbp-20h] BYREF

  ServiceBox::findService<GameserverService>();
  GameserverService::getConfig((GameserverService *const)v19);
  p_avatar_config_mgr = &std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false> *const)v19)->design_config.txt_config_mgr.avatar_config_mgr;
  AvatarId = Avatar::getAvatarId(avatar);
  avatar_config_ptr = data::AvatarExcelConfigMgrBase::findAvatarExcelConfig(p_avatar_config_mgr, AvatarId);
  std::shared_ptr<Config>::~shared_ptr(v19);
  if ( avatar_config_ptr )
  {
    if ( *(_BYTE *)(((unsigned __int64)__closure >> 3) + 0x7FFF8000) )
      __asan_report_load8(__closure);
    v6 = common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(
           __closure->__oss,
           &avatar_config_ptr->name);
    v7 = common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(v6, "_");
    if ( *(_BYTE *)(((unsigned __int64)avatar >> 3) + 0x7FFF8000) )
      __asan_report_load8(avatar);
    v8 = *(_QWORD *)avatar->baseclass_0 + 400LL;
    if ( *(_BYTE *)((v8 >> 3) + 0x7FFF8000) )
      __asan_report_load8(*(_QWORD *)avatar->baseclass_0 + 400LL);
    v9 = (*(unsigned int (__fastcall **)(const Avatar *))v8)(avatar);
    v10 = proto::AvatarType_Name[abi:cxx11](v9);
    common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(v7, v10);
  }
  else
  {
    if ( *(_BYTE *)(((unsigned __int64)__closure >> 3) + 0x7FFF8000) )
      __asan_report_load8(__closure);
    v4 = common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(__closure->__oss, "avatar_id:");
    v5 = Avatar::getAvatarId(avatar);
    common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(v4, v5);
  }
  if ( *(_BYTE *)(((unsigned __int64)__closure >> 3) + 0x7FFF8000) )
    __asan_report_load8(__closure);
  v11 = common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(__closure->__oss, ", combat_force:");
  v12 = Avatar::calcAvatarCombatForce(avatar);
  v13 = common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(v11, v12);
  v14 = common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(v13, ", comparison_factor:");
  v15 = Avatar::calcCombatForceComparisonFactor(avatar);
  v16 = common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(v14, v15);
  common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(v16, "\n");
  return 0;
};

// Line 8026: range 0000000017D7712C-0000000017D771CE
void __cdecl procMPRegister::procMPRegister(procMPRegister *const this)
{
  std::function<int(GmContext&,const std::vector<std::string>&,std::string&)> *v1; // rax
  std::allocator<char> __a; // [rsp+1Fh] [rbp-31h] BYREF
  std::string __k; // [rsp+20h] [rbp-30h] BYREF

  std::allocator<char>::allocator(&__a);
  std::string::basic_string<std::allocator<char>>(&__k, "MP", &__a);
  v1 = std::unordered_map<std::string,std::function<int ()(GmContext &,std::vector<std::string> const&,std::string&)>>::operator[](
         &GmUtils::op_func_map[abi:cxx11],
         &__k);
  std::function<int ()(GmContext &,std::vector<std::string> const&,std::string&)>::operator=<int (&)(GmContext &,std::vector<std::string> const&,std::string&)>(
    v1,
    (int (*)(GmContext *, const std::vector<std::string> *, std::string *))procMP);
  std::string::~string(&__k);
  std::allocator<char>::~allocator(&__a);
};

// Line 8027: range 0000000017C037C8-0000000017C03C4D
int32_t __cdecl procMP(GmContext *context, const std::vector<std::string> *param_vec, std::string *ret_msg)
{
  unsigned __int64 v3; // rbx
  __int64 v4; // rax
  _DWORD *v5; // r13
  int32_t v6; // r12d
  const std::string *v7; // rax
  const std::string *v8; // rax
  PlayerMpComp *MpComp; // rax
  const std::string *v10; // rax
  PlayerMpComp *v11; // rax
  const std::string *v12; // rax
  const std::string *v13; // rax
  SceneBlockGroupComp *BlockGroupComp; // rax
  unsigned __int64 v15; // rax
  int32_t result; // eax
  __int64 (__fastcall *v17)(SceneBlockGroupComp *, std::vector<unsigned int> *, __int64); // [rsp+8h] [rbp-E8h]
  SceneBlockGroupComp *v18; // [rsp+10h] [rbp-E0h]
  std::allocator<unsigned int> __a; // [rsp+3Fh] [rbp-B1h] BYREF
  std::vector<unsigned int> v21; // [rsp+40h] [rbp-B0h] BYREF
  char v22[144]; // [rsp+60h] [rbp-90h] BYREF

  v3 = (unsigned __int64)v22;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_1(96LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "2 48 4 13 group_id:8056 64 4 8 uid:8040";
  *(_QWORD *)(v3 + 16) = procMP;
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = -234556943;
  v5[536862722] = -202116348;
  if ( std::vector<std::string>::empty(param_vec) )
  {
    std::string::operator=(ret_msg, "param num error!");
    v6 = -1;
  }
  else
  {
    v7 = std::vector<std::string>::operator[](param_vec, 0LL);
    if ( std::operator==<char>("ALLOW", v7) )
    {
      if ( std::vector<std::string>::size(param_vec) <= 1
        || (*(_DWORD *)(v3 + 64) = 0,
            v8 = std::vector<std::string>::operator[](param_vec, 1uLL),
            common::tools::StringUtils::strToNum<unsigned int>(v8, (unsigned int *)(v3 + 64), 1)) )
      {
        std::string::operator=(ret_msg, "MP ALLOW uid");
        v6 = -1;
      }
      else
      {
        if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
          __asan_report_load8(&context->player);
        MpComp = Player::getMpComp(context->player);
        PlayerMpComp::setEnterAllowPlayerUid(MpComp, *(_DWORD *)(v3 + 64));
        v6 = 0;
      }
    }
    else
    {
      v10 = std::vector<std::string>::operator[](param_vec, 0LL);
      if ( std::operator==<char>("CLEAR", v10) )
      {
        if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
          __asan_report_load8(&context->player);
        v11 = Player::getMpComp(context->player);
        PlayerMpComp::clearAllowPlayerUidByGm(v11);
        v6 = 0;
      }
      else
      {
        v12 = std::vector<std::string>::operator[](param_vec, 0LL);
        if ( std::operator==<char>(v12, "UNREGISTER") )
        {
          *(_DWORD *)(v3 + 48) = 0;
          v13 = std::vector<std::string>::operator[](param_vec, 1uLL);
          common::tools::StringUtils::strToNum<unsigned int>(v13, (unsigned int *)(v3 + 48), 1);
          if ( *(_BYTE *)(((unsigned __int64)&context->scene >> 3) + 0x7FFF8000) )
            __asan_report_load8(&context->scene);
          BlockGroupComp = Scene::getBlockGroupComp(context->scene);
          v18 = BlockGroupComp;
          if ( *(_BYTE *)(((unsigned __int64)BlockGroupComp >> 3) + 0x7FFF8000) )
            __asan_report_load8(BlockGroupComp);
          v15 = (unsigned __int64)(v18->_vptr_SceneCompBase + 13);
          if ( *(_BYTE *)((v15 >> 3) + 0x7FFF8000) )
            __asan_report_load8(v18->_vptr_SceneCompBase + 13);
          v17 = *(__int64 (__fastcall **)(SceneBlockGroupComp *, std::vector<unsigned int> *, __int64))v15;
          *(_DWORD *)(v3 + 64) = *(_DWORD *)(v3 + 48);
          std::allocator<unsigned int>::allocator(&__a);
          std::vector<unsigned int>::vector(&v21, (std::initializer_list<unsigned int>)__PAIR128__(1LL, v3 + 64), &__a);
          v6 = v17(v18, &v21, 1LL);
          std::vector<unsigned int>::~vector(&v21);
          std::allocator<unsigned int>::~allocator(&__a);
        }
        else
        {
          v6 = 0;
        }
      }
    }
  }
  result = v6;
  if ( v22 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8008) = 0;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8008) = -168430091;
  }
  return result;
};

// Line 8063: range 0000000017D771D0-0000000017D77272
void __cdecl procGivingRegister::procGivingRegister(procGivingRegister *const this)
{
  std::function<int(GmContext&,const std::vector<std::string>&,std::string&)> *v1; // rax
  std::allocator<char> __a; // [rsp+1Fh] [rbp-31h] BYREF
  std::string __k; // [rsp+20h] [rbp-30h] BYREF

  std::allocator<char>::allocator(&__a);
  std::string::basic_string<std::allocator<char>>(&__k, "GIVING", &__a);
  v1 = std::unordered_map<std::string,std::function<int ()(GmContext &,std::vector<std::string> const&,std::string&)>>::operator[](
         &GmUtils::op_func_map[abi:cxx11],
         &__k);
  std::function<int ()(GmContext &,std::vector<std::string> const&,std::string&)>::operator=<int (&)(GmContext &,std::vector<std::string> const&,std::string&)>(
    v1,
    (int (*)(GmContext *, const std::vector<std::string> *, std::string *))procGiving);
  std::string::~string(&__k);
  std::allocator<char>::~allocator(&__a);
};

// Line 8064: range 0000000017C03C4E-0000000017C03DBC
int32_t __cdecl procGiving(GmContext *context, const std::vector<std::string> *param_vec, std::string *ret_msg)
{
  unsigned int *v3; // r8
  unsigned int *v4; // r9
  unsigned __int64 v5; // rbx
  __int64 v6; // rax
  _DWORD *v7; // r13
  PlayerGivingComp *GivingComp; // rax
  int32_t result; // eax
  char v10[128]; // [rsp+20h] [rbp-80h] BYREF

  v5 = (unsigned __int64)v10;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v6 = __asan_stack_malloc_1(96LL);
    if ( v6 )
      v5 = v6;
  }
  *(_QWORD *)v5 = 1102416563LL;
  *(_QWORD *)(v5 + 8) = "3 32 4 14 giving_id:8065 48 4 10 state:8066 64 4 18 last_group_id:8067";
  *(_QWORD *)(v5 + 16) = procGiving;
  v7 = (_DWORD *)(v5 >> 3);
  v7[536862720] = -235802127;
  v7[536862721] = -234556924;
  v7[536862722] = -202116348;
  *(_DWORD *)(v5 + 32) = 0;
  *(_DWORD *)(v5 + 48) = 0;
  *(_DWORD *)(v5 + 64) = 0;
  common::tools::StringUtils::strVecToNum<0u,unsigned int,unsigned int &,unsigned int &>(
    param_vec,
    (unsigned int *)(v5 + 32),
    (unsigned int *)(v5 + 48),
    (unsigned int *)(v5 + 64),
    v3,
    v4);
  if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
    __asan_report_load8(&context->player);
  GivingComp = Player::getGivingComp(context->player);
  result = PlayerGivingComp::setGivingStateByGm(
             GivingComp,
             *(_DWORD *)(v5 + 32),
             *(_DWORD *)(v5 + 48),
             *(_DWORD *)(v5 + 64));
  if ( v10 == (char *)v5 )
  {
    *(_QWORD *)((v5 >> 3) + 0x7FFF8000) = 0LL;
    *(_DWORD *)((v5 >> 3) + 0x7FFF8008) = 0;
  }
  else
  {
    *(_QWORD *)v5 = 1172321806LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v5 >> 3) + 0x7FFF8008) = -168430091;
  }
  return result;
};

// Line 8072: range 0000000017D77274-0000000017D77316
void __cdecl procGadgetGivingRegister::procGadgetGivingRegister(procGadgetGivingRegister *const this)
{
  std::function<int(GmContext&,const std::vector<std::string>&,std::string&)> *v1; // rax
  std::allocator<char> __a; // [rsp+1Fh] [rbp-31h] BYREF
  std::string __k; // [rsp+20h] [rbp-30h] BYREF

  std::allocator<char>::allocator(&__a);
  std::string::basic_string<std::allocator<char>>(&__k, "GADGET_GIVING", &__a);
  v1 = std::unordered_map<std::string,std::function<int ()(GmContext &,std::vector<std::string> const&,std::string&)>>::operator[](
         &GmUtils::op_func_map[abi:cxx11],
         &__k);
  std::function<int ()(GmContext &,std::vector<std::string> const&,std::string&)>::operator=<int (&)(GmContext &,std::vector<std::string> const&,std::string&)>(
    v1,
    (int (*)(GmContext *, const std::vector<std::string> *, std::string *))procGadgetGiving);
  std::string::~string(&__k);
  std::allocator<char>::~allocator(&__a);
};

// Line 8073: range 0000000017C03DBD-0000000017C04D2B
int32_t __cdecl procGadgetGiving(GmContext *context, const std::vector<std::string> *param_vec, std::string *ret_msg)
{
  unsigned __int64 v3; // r14
  __int64 v4; // rax
  _DWORD *v5; // r12
  const std::string *v6; // rax
  const std::string *v7; // rax
  const std::string *v8; // rax
  const std::string *v9; // rax
  PlayerGivingComp *GivingComp; // rax
  int32_t active; // r13d
  const std::string *v12; // rax
  const std::string *v13; // rax
  PlayerGivingComp *v14; // rax
  const std::string *v15; // rax
  const std::string *v16; // rax
  const std::string *v17; // rax
  bool v18; // r13
  PlayerGivingComp *v19; // rax
  const std::string *v20; // rax
  const std::string *v21; // rax
  PlayerGivingComp *v22; // rax
  const std::string *v23; // rax
  const std::string *v24; // rax
  PlayerGivingComp *v25; // rax
  const uint32_t *v26; // rax
  __int64 v27; // rax
  int32_t result; // eax
  std::allocator<char> v30; // [rsp+26h] [rbp-43Ah] BYREF
  std::allocator<char> __a; // [rsp+27h] [rbp-439h] BYREF
  std::map<unsigned int,unsigned int>::iterator __for_begin; // [rsp+28h] [rbp-438h] BYREF
  std::map<unsigned int,unsigned int>::iterator __for_end; // [rsp+30h] [rbp-430h] BYREF
  std::vector<unsigned int> *__for_range_0; // [rsp+38h] [rbp-428h]
  const uint32_t *material_id; // [rsp+40h] [rbp-420h]
  std::map<unsigned int,unsigned int> *__for_range; // [rsp+48h] [rbp-418h]
  const std::pair<unsigned int const,unsigned int> *v37; // [rsp+50h] [rbp-410h]
  std::tuple_element<0,const std::pair<unsigned int const,unsigned int> >::type *id; // [rsp+58h] [rbp-408h]
  std::tuple_element<1,const std::pair<unsigned int const,unsigned int> >::type *count; // [rsp+60h] [rbp-400h]
  proto::ItemParam *one_item_param; // [rsp+68h] [rbp-3F8h]
  std::string sep_1; // [rsp+70h] [rbp-3F0h] BYREF
  char v42[976]; // [rsp+90h] [rbp-3D0h] BYREF

  v3 = (unsigned __int64)v42;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_4(928LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "8 48 4 14 giving_id:8086 64 4 13 group_id:8092 80 4 14 giving_id:8185 96 24 18 material_list:819"
                        "2 160 32 8 rsp:8153 224 48 19 item_count_map:8137 304 128 8 req:8144 464 392 7 ss:8194";
  *(_QWORD *)(v3 + 16) = procGadgetGiving;
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = -234556943;
  v5[536862722] = -234556924;
  v5[536862723] = -234881024;
  v5[536862724] = -218959118;
  v5[536862726] = -218959118;
  v5[536862728] = -219021312;
  v5[536862729] = 62194;
  v5[536862733] = -219021312;
  v5[536862734] = 62194;
  v5[536862746] = -218103808;
  v5[536862747] = -202116109;
  v5[536862748] = -202116109;
  if ( !std::vector<std::string>::size(param_vec) )
    goto LABEL_24;
  v6 = std::vector<std::string>::operator[](param_vec, 0LL);
  if ( std::operator==<char>(v6, "ACTIVE") )
  {
    if ( std::vector<std::string>::size(param_vec) > 3 )
    {
      *(_DWORD *)(v3 + 48) = 0;
      v7 = std::vector<std::string>::operator[](param_vec, 1uLL);
      if ( !common::tools::StringUtils::strToNum<unsigned int>(v7, (unsigned int *)(v3 + 48), 1) )
      {
        *(_DWORD *)(v3 + 64) = 0;
        v8 = std::vector<std::string>::operator[](param_vec, 2uLL);
        if ( !common::tools::StringUtils::strToNum<unsigned int>(v8, (unsigned int *)(v3 + 64), 1) )
        {
          *(_DWORD *)(v3 + 80) = 0;
          v9 = std::vector<std::string>::operator[](param_vec, 3uLL);
          if ( !common::tools::StringUtils::strToNum<unsigned int>(v9, (unsigned int *)(v3 + 80), 1) )
          {
            if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
              __asan_report_load8(&context->player);
            GivingComp = Player::getGivingComp(context->player);
            active = PlayerGivingComp::activeGadgetItemGiving(
                       GivingComp,
                       *(_DWORD *)(v3 + 48),
                       *(_DWORD *)(v3 + 64),
                       *(_DWORD *)(v3 + 80));
            goto LABEL_62;
          }
        }
      }
LABEL_50:
      std::string::operator=(ret_msg, "strToNum failed");
      active = -1;
      goto LABEL_62;
    }
LABEL_24:
    std::string::operator=(ret_msg, "param not enough");
    active = -1;
    goto LABEL_62;
  }
  v12 = std::vector<std::string>::operator[](param_vec, 0LL);
  if ( std::operator==<char>(v12, "REMOVE") )
  {
    if ( std::vector<std::string>::size(param_vec) <= 1 )
      goto LABEL_24;
    *(_DWORD *)(v3 + 80) = 0;
    v13 = std::vector<std::string>::operator[](param_vec, 1uLL);
    if ( common::tools::StringUtils::strToNum<unsigned int>(v13, (unsigned int *)(v3 + 80), 1) )
      goto LABEL_50;
    if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
      __asan_report_load8(&context->player);
    v14 = Player::getGivingComp(context->player);
    active = PlayerGivingComp::removeGadgetGivingByGm(v14, *(_DWORD *)(v3 + 80));
  }
  else
  {
    v15 = std::vector<std::string>::operator[](param_vec, 0LL);
    if ( std::operator==<char>(v15, "FINISH") )
    {
      if ( std::vector<std::string>::size(param_vec) <= 2 )
        goto LABEL_24;
      *(_DWORD *)(v3 + 80) = 0;
      v16 = std::vector<std::string>::operator[](param_vec, 1uLL);
      if ( common::tools::StringUtils::strToNum<unsigned int>(v16, (unsigned int *)(v3 + 80), 1) )
        goto LABEL_50;
      std::map<unsigned int,unsigned int>::map((std::map<unsigned int,unsigned int> *const)(v3 + 224));
      std::allocator<char>::allocator(&__a);
      std::string::basic_string<std::allocator<char>>((std::string *const)(v3 + 160), ":", &__a);
      std::allocator<char>::allocator(&v30);
      std::string::basic_string<std::allocator<char>>(&sep_1, ",", &v30);
      v17 = std::vector<std::string>::operator[](param_vec, 2uLL);
      v18 = common::tools::StringUtils::splitToMap<unsigned int,unsigned int>(
              v17,
              &sep_1,
              (const std::string *)(v3 + 160),
              (std::map<unsigned int,unsigned int> *)(v3 + 224),
              0) != 0;
      std::string::~string(&sep_1);
      std::allocator<char>::~allocator(&v30);
      std::string::~string((void *)(v3 + 160));
      std::allocator<char>::~allocator(&__a);
      if ( v18 )
      {
        std::string::operator=(ret_msg, "parse item_count_map fail");
        active = -1;
      }
      else
      {
        proto::ItemGivingReq::ItemGivingReq((proto::ItemGivingReq *const)(v3 + 304));
        proto::ItemGivingReq::set_giving_id((proto::ItemGivingReq *const)(v3 + 304), *(_DWORD *)(v3 + 80));
        proto::ItemGivingReq::set_item_giving_type(
          (proto::ItemGivingReq *const)(v3 + 304),
          ItemGivingReq_ItemGivingType_GADGET);
        __for_range = (std::map<unsigned int,unsigned int> *)(v3 + 224);
        __for_begin._M_node = std::map<unsigned int,unsigned int>::begin((std::map<unsigned int,unsigned int> *const)(v3 + 224))._M_node;
        __for_end._M_node = std::map<unsigned int,unsigned int>::end(__for_range)._M_node;
        while ( std::operator!=(&__for_begin, &__for_end) )
        {
          v37 = std::_Rb_tree_iterator<std::pair<unsigned int const,unsigned int>>::operator*(&__for_begin);
          id = std::get<0ul,unsigned int const,unsigned int>(v37);
          count = (std::tuple_element<1,const std::pair<unsigned int const,unsigned int> >::type *)std::get<1ul,unsigned int const,unsigned int>(v37);
          one_item_param = proto::ItemGivingReq::add_item_param_list((proto::ItemGivingReq *const)(v3 + 304));
          if ( *(_BYTE *)(((unsigned __int64)id >> 3) + 0x7FFF8000) != 0
            && (char)(((unsigned __int8)id & 7) + 3) >= *(_BYTE *)(((unsigned __int64)id >> 3) + 0x7FFF8000) )
          {
            __asan_report_load4(id);
          }
          proto::ItemParam::set_item_id(one_item_param, *id);
          if ( *(_BYTE *)(((unsigned __int64)count >> 3) + 0x7FFF8000) != 0
            && (char)(((unsigned __int8)count & 7) + 3) >= *(_BYTE *)(((unsigned __int64)count >> 3) + 0x7FFF8000) )
          {
            __asan_report_load4(count);
          }
          proto::ItemParam::set_count(one_item_param, *count);
          std::_Rb_tree_iterator<std::pair<unsigned int const,unsigned int>>::operator++(&__for_begin);
        }
        proto::ItemGivingRsp::ItemGivingRsp((proto::ItemGivingRsp *const)(v3 + 160));
        if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
          __asan_report_load8(&context->player);
        v19 = Player::getGivingComp(context->player);
        active = PlayerGivingComp::onItemGivingReq(
                   v19,
                   (const proto::ItemGivingReq *)(v3 + 304),
                   (proto::ItemGivingRsp *)(v3 + 160));
        proto::ItemGivingRsp::~ItemGivingRsp((proto::ItemGivingRsp *const)(v3 + 160));
        proto::ItemGivingReq::~ItemGivingReq((proto::ItemGivingReq *const)(v3 + 304));
      }
      std::map<unsigned int,unsigned int>::~map((std::map<unsigned int,unsigned int> *const)(v3 + 224));
    }
    else
    {
      v20 = std::vector<std::string>::operator[](param_vec, 0LL);
      if ( std::operator==<char>(v20, "TAKE_BACK") )
      {
        if ( std::vector<std::string>::size(param_vec) <= 1 )
          goto LABEL_50;
        *(_DWORD *)(v3 + 80) = 0;
        v21 = std::vector<std::string>::operator[](param_vec, 1uLL);
        if ( common::tools::StringUtils::strToNum<unsigned int>(v21, (unsigned int *)(v3 + 80), 1) )
          goto LABEL_50;
        proto::TakeBackGivingItemReq::TakeBackGivingItemReq((proto::TakeBackGivingItemReq *const)(v3 + 96));
        proto::TakeBackGivingItemReq::set_giving_id(
          (proto::TakeBackGivingItemReq *const)(v3 + 96),
          *(_DWORD *)(v3 + 80));
        proto::TakeBackGivingItemRsp::TakeBackGivingItemRsp((proto::TakeBackGivingItemRsp *const)(v3 + 160));
        if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
          __asan_report_load8(&context->player);
        v22 = Player::getGivingComp(context->player);
        active = PlayerGivingComp::onTakeBackGivingItemReq(
                   v22,
                   (const proto::TakeBackGivingItemReq *)(v3 + 96),
                   (proto::TakeBackGivingItemRsp *)(v3 + 160));
        proto::TakeBackGivingItemRsp::~TakeBackGivingItemRsp((proto::TakeBackGivingItemRsp *const)(v3 + 160));
        proto::TakeBackGivingItemReq::~TakeBackGivingItemReq((proto::TakeBackGivingItemReq *const)(v3 + 96));
      }
      else
      {
        v23 = std::vector<std::string>::operator[](param_vec, 0LL);
        if ( !std::operator==<char>(v23, "GET_LIST") )
        {
          common::milog::MiLogStream::create(
            (common::milog::MiLogStream *)(v3 + 160),
            &common::milog::MiLogDefault::default_log_obj_,
            1u,
            "./src/player/gm/player_gm_comp.cpp",
            "procGadgetGiving",
            8206);
          common::milog::MiLogStream::operator<<<char [33],(char *[33])0>(
            (common::milog::MiLogStream *const)(v3 + 160),
            (const char (*)[33])"[GADGET_GIVING_GM] unknow param.");
          common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v3 + 160));
          active = 0;
          goto LABEL_62;
        }
        if ( std::vector<std::string>::size(param_vec) <= 1 )
          goto LABEL_50;
        *(_DWORD *)(v3 + 80) = 0;
        v24 = std::vector<std::string>::operator[](param_vec, 1uLL);
        if ( common::tools::StringUtils::strToNum<unsigned int>(v24, (unsigned int *)(v3 + 80), 1) )
          goto LABEL_50;
        if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
          __asan_report_load8(&context->player);
        v25 = Player::getGivingComp(context->player);
        PlayerGivingComp::getGivingItemList((std::vector<unsigned int> *)(v3 + 96), v25, *(_DWORD *)(v3 + 80));
        std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream(v3 + 464);
        std::operator<<<std::char_traits<char>>(v3 + 480, "giving material:");
        __for_range_0 = (std::vector<unsigned int> *)(v3 + 96);
        __for_begin._M_node = (std::_Rb_tree_iterator<std::pair<unsigned int const,unsigned int> >::_Base_ptr)std::vector<unsigned int>::begin((std::vector<unsigned int> *const)(v3 + 96))._M_current;
        __for_end._M_node = (std::_Rb_tree_iterator<std::pair<unsigned int const,unsigned int> >::_Base_ptr)std::vector<unsigned int>::end((std::vector<unsigned int> *const)(v3 + 96))._M_current;
        while ( __gnu_cxx::operator!=<unsigned int *,std::vector<unsigned int>>(
                  (const __gnu_cxx::__normal_iterator<unsigned int*,std::vector<unsigned int> > *)&__for_begin,
                  (const __gnu_cxx::__normal_iterator<unsigned int*,std::vector<unsigned int> > *)&__for_end) )
        {
          v26 = __gnu_cxx::__normal_iterator<unsigned int *,std::vector<unsigned int>>::operator*((const __gnu_cxx::__normal_iterator<unsigned int*,std::vector<unsigned int> > *const)&__for_begin);
          material_id = v26;
          if ( *(_BYTE *)(((unsigned __int64)v26 >> 3) + 0x7FFF8000) != 0
            && (char)(((unsigned __int8)v26 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)v26 >> 3) + 0x7FFF8000) )
          {
            __asan_report_load4(v26);
          }
          v27 = std::ostream::operator<<(v3 + 480, *material_id);
          std::operator<<<std::char_traits<char>>(v27, ",");
          __gnu_cxx::__normal_iterator<unsigned int *,std::vector<unsigned int>>::operator++((__gnu_cxx::__normal_iterator<unsigned int*,std::vector<unsigned int> > *const)&__for_begin);
        }
        std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::str(v3 + 160, v3 + 464);
        std::string::operator=(ret_msg, v3 + 160);
        std::string::~string((void *)(v3 + 160));
        if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
          __asan_report_load8(&context->player);
        Player::notifyGMServerLog(context->player, SERVER_LOG_LEVEL, LOG_LEVEL_INFO_0, ret_msg);
        active = 0;
        std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream(v3 + 464);
        std::vector<unsigned int>::~vector((std::vector<unsigned int> *const)(v3 + 96));
      }
    }
  }
LABEL_62:
  result = active;
  if ( v42 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8010) = 0;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8018) = 0;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8020) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8034) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8068) = 0LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8070) = 0;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8020) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8028) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8030) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8038) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8040) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8048) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8050) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8058) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8060) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8068) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8070) = -168430091;
  }
  return result;
};

// Line 8216: range 0000000017D77318-0000000017D7736A
void __cdecl SimulationGuard::SimulationGuard(SimulationGuard *const this, Player *player)
{
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, player);
  this->player_ = player;
  Player::setIsInSimulation(this->player_, 1);
};

// Line 8217: range 0000000017D7736C-0000000017D773AF
void __cdecl SimulationGuard::~SimulationGuard(SimulationGuard *const this)
{
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_load8(this);
  Player::setIsInSimulation(this->player_, 0);
};

// Line 8233: range 0000000017C04D2C-0000000017C05C3B
int32_t __cdecl `anonymous namespace'::openChestsInScene(Player *player, Scene *scene, uint32_t chest_num)
{
  unsigned __int64 v3; // r13
  __int64 v4; // rax
  _DWORD *v5; // r12
  SceneBlockGroupComp *BlockGroupComp; // rax
  SceneBlockGroupComp *v7; // rsi
  unsigned __int64 v8; // rax
  void (__fastcall *v9)(unsigned __int64, SceneBlockGroupComp *, _QWORD, _QWORD, _QWORD, _QWORD); // r10
  std::__shared_ptr_access<Group,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v10; // rax
  std::_Rb_tree_iterator<std::pair<unsigned int const,unsigned int> >::reference v11; // rax
  std::pair<unsigned int,unsigned int> *v12; // rdx
  std::_Rb_tree_const_iterator<unsigned int>::reference v13; // rax
  unsigned int *v14; // r8
  _DWORD *v15; // rdx
  std::mersenne_twister_engine<long unsigned int,32,624,397,31,2567483615,11,4294967295,7,2636928640,15,4022730752,18,1812433253> *RandGenerator; // r15
  std::pair<unsigned int,unsigned int> *M_current; // r14
  std::vector<std::pair<unsigned int,unsigned int>>::iterator v18; // rax
  __gnu_cxx::__normal_iterator<std::pair<unsigned int,unsigned int>*,std::vector<std::pair<unsigned int,unsigned int>> >::reference v19; // rax
  std::pair<unsigned int,unsigned int> *v20; // rdx
  SceneBlockGroupComp *v21; // rax
  SceneBlockGroupComp *v22; // rsi
  unsigned __int64 v23; // rax
  void (__fastcall *v24)(unsigned __int64, SceneBlockGroupComp *, _QWORD, _QWORD, _QWORD, _QWORD); // r10
  common::milog::MiLogStream *v25; // rax
  int v26; // r14d
  uint32_t v27; // ecx
  std::__shared_ptr_access<Group,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v28; // rax
  common::milog::MiLogStream *v29; // rax
  common::milog::MiLogStream *v30; // rax
  common::milog::MiLogStream *v31; // rax
  int v32; // r14d
  std::__shared_ptr_access<Gadget,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v33; // rax
  Gadget *v34; // rax
  std::__shared_ptr_access<Gadget,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v35; // rax
  unsigned __int64 v36; // rdx
  void (__fastcall *v37)(std::__shared_ptr_access<Gadget,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *, Player *, unsigned __int64); // r8
  bool v38; // al
  int32_t result; // eax
  uint32_t open_count; // [rsp+24h] [rbp-4ECh]
  std::unordered_map<unsigned int,GroupScriptConfig>::const_iterator __for_begin; // [rsp+28h] [rbp-4E8h] BYREF
  std::unordered_map<unsigned int,GroupScriptConfig>::const_iterator __for_end; // [rsp+30h] [rbp-4E0h] BYREF
  std::map<unsigned int,unsigned int>::iterator __for_begin_1; // [rsp+38h] [rbp-4D8h] BYREF
  std::vector<std::pair<unsigned int,unsigned int>>::iterator __for_end_1; // [rsp+40h] [rbp-4D0h] BYREF
  const SceneScriptConfig *scene_script_config_ptr; // [rsp+48h] [rbp-4C8h]
  const std::unordered_map<unsigned int,GroupScriptConfig> *__for_range; // [rsp+50h] [rbp-4C0h]
  std::vector<std::pair<unsigned int,unsigned int>> *__for_range_3; // [rsp+58h] [rbp-4B8h]
  std::tuple_element<0,std::pair<unsigned int,unsigned int> >::type *group_id_0; // [rsp+60h] [rbp-4B0h]
  std::tuple_element<1,std::pair<unsigned int,unsigned int> >::type *config_id_0; // [rsp+68h] [rbp-4A8h]
  const std::pair<unsigned int const,GroupScriptConfig> *v52; // [rsp+70h] [rbp-4A0h]
  std::tuple_element<0,const std::pair<unsigned int const,GroupScriptConfig> >::type *group_id; // [rsp+78h] [rbp-498h]
  std::tuple_element<1,const std::pair<unsigned int const,GroupScriptConfig> >::type *group_script_config; // [rsp+80h] [rbp-490h]
  const std::unordered_map<unsigned int,GadgetScriptConfig> *__for_range_0; // [rsp+88h] [rbp-488h]
  std::map<unsigned int,unsigned int> *__for_range_1; // [rsp+90h] [rbp-480h]
  std::set<unsigned int> *__for_range_2; // [rsp+98h] [rbp-478h]
  std::tuple_element<0,std::pair<unsigned int const,unsigned int> >::type *dead_gadget_config_id; // [rsp+A0h] [rbp-470h]
  std::tuple_element<1,std::pair<unsigned int const,unsigned int> >::type *_; // [rsp+A8h] [rbp-468h]
  const std::pair<unsigned int const,GadgetScriptConfig> *v60; // [rsp+B0h] [rbp-460h]
  std::tuple_element<0,const std::pair<unsigned int const,GadgetScriptConfig> >::type *config_id; // [rsp+B8h] [rbp-458h]
  std::tuple_element<1,const std::pair<unsigned int const,GadgetScriptConfig> >::type *gadget_script_config; // [rsp+C0h] [rbp-450h]
  std::pair<unsigned int,unsigned int> __for_end_0; // [rsp+C8h] [rbp-448h] BYREF
  common::milog::MiLogStream v64; // [rsp+D0h] [rbp-440h] BYREF
  std::map<unsigned int,unsigned int> v65; // [rsp+F0h] [rbp-420h] BYREF
  char v66[1008]; // [rsp+120h] [rbp-3F0h] BYREF

  v3 = (unsigned __int64)v66;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_4(960LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "7 48 4 14 config_id:8261 64 16 14 group_ptr:8270 96 16 15 gadget_ptr:8276 128 16 14 group_ptr:82"
                        "52 160 24 24 candidate_chest_vec:8240 224 48 24 chest_config_id_set:8243 304 520 17 entity_param:8279";
  *(_QWORD *)(v3 + 16) = `anonymous namespace'::openChestsInScene;
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = -234556943;
  v5[536862722] = -219021312;
  v5[536862723] = -219021312;
  v5[536862724] = -219021312;
  v5[536862725] = -234881024;
  v5[536862726] = -218959118;
  v5[536862728] = -219021312;
  v5[536862729] = 62194;
  v5[536862745] = -218103808;
  v5[536862746] = -202116109;
  v5[536862747] = -202116109;
  v5[536862748] = -202116109;
  v5[536862749] = -202116109;
  scene_script_config_ptr = Scene::getScriptConfig(scene);
  if ( scene_script_config_ptr )
  {
    std::vector<std::pair<unsigned int,unsigned int>>::vector((std::vector<std::pair<unsigned int,unsigned int>> *const)(v3 + 160));
    __for_range = &scene_script_config_ptr->group_config_map;
    __for_begin._M_cur = std::unordered_map<unsigned int,GroupScriptConfig>::begin(&scene_script_config_ptr->group_config_map)._M_cur;
    __for_end._M_cur = std::unordered_map<unsigned int,GroupScriptConfig>::end(&scene_script_config_ptr->group_config_map)._M_cur;
    while ( std::__detail::operator!=<std::pair<unsigned int const,GroupScriptConfig>,false>(&__for_begin, &__for_end) )
    {
      v52 = std::__detail::_Node_const_iterator<std::pair<unsigned int const,GroupScriptConfig>,false,false>::operator*(&__for_begin);
      group_id = std::get<0ul,unsigned int const,GroupScriptConfig>(v52);
      group_script_config = (std::tuple_element<1,const std::pair<unsigned int const,GroupScriptConfig> >::type *)std::get<1ul,unsigned int const,GroupScriptConfig>(v52);
      std::set<unsigned int>::set((std::set<unsigned int> *const)(v3 + 224));
      __for_range_0 = &group_script_config->gadget_config_map;
      __for_end_1._M_current = (std::pair<unsigned int,unsigned int> *)std::unordered_map<unsigned int,GadgetScriptConfig>::begin(&group_script_config->gadget_config_map)._M_cur;
      __for_end_0 = (std::pair<unsigned int,unsigned int>)std::unordered_map<unsigned int,GadgetScriptConfig>::end(__for_range_0)._M_cur;
      while ( std::__detail::operator!=<std::pair<unsigned int const,GadgetScriptConfig>,false>(
                (const std::__detail::_Node_iterator_base<std::pair<unsigned int const,GadgetScriptConfig>,false> *)&__for_end_1,
                (const std::__detail::_Node_iterator_base<std::pair<unsigned int const,GadgetScriptConfig>,false> *)&__for_end_0) )
      {
        v60 = std::__detail::_Node_const_iterator<std::pair<unsigned int const,GadgetScriptConfig>,false,false>::operator*((const std::__detail::_Node_const_iterator<std::pair<unsigned int const,GadgetScriptConfig>,false,false> *const)&__for_end_1);
        config_id = std::get<0ul,unsigned int const,GadgetScriptConfig>(v60);
        gadget_script_config = (std::tuple_element<1,const std::pair<unsigned int const,GadgetScriptConfig> >::type *)std::get<1ul,unsigned int const,GadgetScriptConfig>(v60);
        if ( !(unsigned __int8)std::string::empty(&gadget_script_config->drop_tag) )
          std::set<unsigned int>::insert((std::set<unsigned int> *const)(v3 + 224), config_id);
        std::__detail::_Node_const_iterator<std::pair<unsigned int const,GadgetScriptConfig>,false,false>::operator++((std::__detail::_Node_const_iterator<std::pair<unsigned int const,GadgetScriptConfig>,false,false> *const)&__for_end_1);
      }
      BlockGroupComp = Scene::getBlockGroupComp(scene);
      v7 = BlockGroupComp;
      if ( *(_BYTE *)(((unsigned __int64)BlockGroupComp >> 3) + 0x7FFF8000) )
        __asan_report_load8(BlockGroupComp);
      v8 = (unsigned __int64)(v7->_vptr_SceneCompBase + 10);
      if ( *(_BYTE *)((v8 >> 3) + 0x7FFF8000) )
        __asan_report_load8(v7->_vptr_SceneCompBase + 10);
      v9 = *(void (__fastcall **)(unsigned __int64, SceneBlockGroupComp *, _QWORD, _QWORD, _QWORD, _QWORD))v8;
      if ( *(_BYTE *)(((unsigned __int64)group_id >> 3) + 0x7FFF8000) != 0
        && (char)(((unsigned __int8)group_id & 7) + 3) >= *(_BYTE *)(((unsigned __int64)group_id >> 3) + 0x7FFF8000) )
      {
        __asan_report_load4(group_id);
      }
      v9(v3 + 128, v7, *group_id, 0LL, 0LL, 0LL);
      if ( !std::operator==<Group>(0LL, (const std::shared_ptr<Group> *)(v3 + 128)) )
      {
        v10 = std::__shared_ptr_access<Group,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Group,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 128));
        Group::getDeadOneoffGadgetMap(&v65, v10);
        __for_range_1 = &v65;
        __for_begin_1._M_node = std::map<unsigned int,unsigned int>::begin(&v65)._M_node;
        __for_end_1._M_current = (std::pair<unsigned int,unsigned int> *)std::map<unsigned int,unsigned int>::end(__for_range_1)._M_node;
        while ( std::operator!=(
                  &__for_begin_1,
                  (const std::_Rb_tree_iterator<std::pair<unsigned int const,unsigned int> >::_Self *)&__for_end_1) )
        {
          v11 = std::_Rb_tree_iterator<std::pair<unsigned int const,unsigned int>>::operator*(&__for_begin_1);
          v12 = (std::pair<unsigned int,unsigned int> *)v11;
          if ( ((unsigned __int8)v11 & 7) >= *(_BYTE *)(((unsigned __int64)v11 >> 3) + 0x7FFF8000)
            && *(_BYTE *)(((unsigned __int64)v11 >> 3) + 0x7FFF8000) != 0
            || *(_BYTE *)((((unsigned __int64)&v11->second + 3) >> 3) + 0x7FFF8000) != 0
            && (((unsigned __int8)v11 + 7) & 7) >= *(_BYTE *)((((unsigned __int64)&v11->second + 3) >> 3) + 0x7FFF8000) )
          {
            __asan_report_load_n(v11, 8LL);
          }
          __for_end_0 = *v12;
          dead_gadget_config_id = std::get<0ul,unsigned int const,unsigned int>((std::pair<unsigned int const,unsigned int> *)&__for_end_0);
          _ = std::get<1ul,unsigned int const,unsigned int>((std::pair<unsigned int const,unsigned int> *)&__for_end_0);
          std::set<unsigned int>::erase((std::set<unsigned int> *const)(v3 + 224), dead_gadget_config_id);
          std::_Rb_tree_iterator<std::pair<unsigned int const,unsigned int>>::operator++(&__for_begin_1);
        }
        std::map<unsigned int,unsigned int>::~map(&v65);
        __for_range_2 = (std::set<unsigned int> *)(v3 + 224);
        __for_end_1._M_current = (std::pair<unsigned int,unsigned int> *)std::set<unsigned int>::begin((const std::set<unsigned int> *const)(v3 + 224))._M_node;
        __for_end_0 = (std::pair<unsigned int,unsigned int>)std::set<unsigned int>::end(__for_range_2)._M_node;
        while ( std::operator!=(
                  (const std::_Rb_tree_const_iterator<unsigned int>::_Self *)&__for_end_1,
                  (const std::_Rb_tree_const_iterator<unsigned int>::_Self *)&__for_end_0) )
        {
          v13 = std::_Rb_tree_const_iterator<unsigned int>::operator*((const std::_Rb_tree_const_iterator<unsigned int> *const)&__for_end_1);
          v15 = v13;
          if ( *(_BYTE *)(((unsigned __int64)v13 >> 3) + 0x7FFF8000) != 0
            && (char)(((unsigned __int8)v13 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)v13 >> 3) + 0x7FFF8000) )
          {
            __asan_report_load4(v13);
          }
          *(_DWORD *)(v3 + 48) = *v15;
          std::vector<std::pair<unsigned int,unsigned int>>::emplace_back<unsigned int const&,unsigned int &>(
            (std::vector<std::pair<unsigned int,unsigned int>> *const)(v3 + 160),
            group_id,
            (unsigned int *)(v3 + 48),
            group_id,
            v14);
          std::_Rb_tree_const_iterator<unsigned int>::operator++((std::_Rb_tree_const_iterator<unsigned int> *const)&__for_end_1);
        }
      }
      std::shared_ptr<Group>::~shared_ptr((std::shared_ptr<Group> *const)(v3 + 128));
      std::set<unsigned int>::~set((std::set<unsigned int> *const)(v3 + 224));
      std::__detail::_Node_const_iterator<std::pair<unsigned int const,GroupScriptConfig>,false,false>::operator++(&__for_begin);
    }
    RandGenerator = common::tools::RandomUtils::getRandGenerator();
    M_current = std::vector<std::pair<unsigned int,unsigned int>>::end((std::vector<std::pair<unsigned int,unsigned int>> *const)(v3 + 160))._M_current;
    v18._M_current = std::vector<std::pair<unsigned int,unsigned int>>::begin((std::vector<std::pair<unsigned int,unsigned int>> *const)(v3 + 160))._M_current;
    std::shuffle<__gnu_cxx::__normal_iterator<std::pair<unsigned int,unsigned int> *,std::vector<std::pair<unsigned int,unsigned int>>>,std::mersenne_twister_engine<unsigned long,32ul,624ul,397ul,31ul,2567483615ul,11ul,4294967295ul,7ul,2636928640ul,15ul,4022730752ul,18ul,1812433253ul> &>(
      v18,
      (__gnu_cxx::__normal_iterator<std::pair<unsigned int,unsigned int>*,std::vector<std::pair<unsigned int,unsigned int>> >)M_current,
      RandGenerator);
    open_count = 0;
    __for_range_3 = (std::vector<std::pair<unsigned int,unsigned int>> *)(v3 + 160);
    __for_begin_1._M_node = (std::_Rb_tree_iterator<std::pair<unsigned int const,unsigned int> >::_Base_ptr)std::vector<std::pair<unsigned int,unsigned int>>::begin((std::vector<std::pair<unsigned int,unsigned int>> *const)(v3 + 160))._M_current;
    __for_end_1._M_current = std::vector<std::pair<unsigned int,unsigned int>>::end(__for_range_3)._M_current;
    while ( __gnu_cxx::operator!=<std::pair<unsigned int,unsigned int> *,std::vector<std::pair<unsigned int,unsigned int>>>(
              (const __gnu_cxx::__normal_iterator<std::pair<unsigned int,unsigned int>*,std::vector<std::pair<unsigned int,unsigned int>> > *)&__for_begin_1,
              &__for_end_1) )
    {
      v19 = __gnu_cxx::__normal_iterator<std::pair<unsigned int,unsigned int> *,std::vector<std::pair<unsigned int,unsigned int>>>::operator*((const __gnu_cxx::__normal_iterator<std::pair<unsigned int,unsigned int>*,std::vector<std::pair<unsigned int,unsigned int>> > *const)&__for_begin_1);
      v20 = v19;
      if ( ((unsigned __int8)v19 & 7) >= *(_BYTE *)(((unsigned __int64)v19 >> 3) + 0x7FFF8000)
        && *(_BYTE *)(((unsigned __int64)v19 >> 3) + 0x7FFF8000) != 0
        || *(_BYTE *)((((unsigned __int64)&v19->second + 3) >> 3) + 0x7FFF8000) != 0
        && (((unsigned __int8)v19 + 7) & 7) >= *(_BYTE *)((((unsigned __int64)&v19->second + 3) >> 3) + 0x7FFF8000) )
      {
        __asan_report_load_n(v19, 8LL);
      }
      __for_end_0 = *v20;
      group_id_0 = std::get<0ul,unsigned int,unsigned int>(&__for_end_0);
      config_id_0 = std::get<1ul,unsigned int,unsigned int>(&__for_end_0);
      v21 = Scene::getBlockGroupComp(scene);
      v22 = v21;
      if ( *(_BYTE *)(((unsigned __int64)v21 >> 3) + 0x7FFF8000) )
        __asan_report_load8(v21);
      v23 = (unsigned __int64)(v22->_vptr_SceneCompBase + 10);
      if ( *(_BYTE *)((v23 >> 3) + 0x7FFF8000) )
        __asan_report_load8(v22->_vptr_SceneCompBase + 10);
      v24 = *(void (__fastcall **)(unsigned __int64, SceneBlockGroupComp *, _QWORD, _QWORD, _QWORD, _QWORD))v23;
      if ( *(_BYTE *)(((unsigned __int64)group_id_0 >> 3) + 0x7FFF8000) != 0
        && (char)(((unsigned __int8)group_id_0 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)group_id_0 >> 3) + 0x7FFF8000) )
      {
        __asan_report_load4(group_id_0);
      }
      v24(v3 + 64, v22, *group_id_0, 0LL, 0LL, 0LL);
      if ( std::operator==<Group>(0LL, (const std::shared_ptr<Group> *)(v3 + 64)) )
      {
        common::milog::MiLogStream::create(
          &v64,
          &common::milog::MiLogDefault::default_log_obj_,
          3u,
          "./src/player/gm/player_gm_comp.cpp",
          "openChestsInScene",
          8273);
        v25 = common::milog::MiLogStream::operator<<<char [27],(char *[27])0>(
                &v64,
                (const char (*)[27])"group not found! group_id:");
        common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v25, group_id_0);
        common::milog::MiLogStream::~MiLogStream(&v64);
        v26 = 0;
      }
      else
      {
        v27 = (unsigned int)std::__shared_ptr_access<Group,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Group,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 64));
        if ( *(_BYTE *)(((unsigned __int64)config_id_0 >> 3) + 0x7FFF8000) != 0
          && (char)(((unsigned __int8)config_id_0 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)config_id_0 >> 3)
                                                                        + 0x7FFF8000) )
        {
          __asan_report_load4(config_id_0);
        }
        Group::findEntityByConfigId<Gadget>((Group *const)(v3 + 96), v27);
        if ( std::operator==<Gadget>(0LL, (const std::shared_ptr<Gadget> *)(v3 + 96)) )
        {
          GroupEntityParam::GroupEntityParam((GroupEntityParam *const)(v3 + 304));
          if ( *(_BYTE *)(((unsigned __int64)config_id_0 >> 3) + 0x7FFF8000) != 0
            && (char)(((unsigned __int8)config_id_0 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)config_id_0 >> 3)
                                                                          + 0x7FFF8000) )
          {
            __asan_report_load4(config_id_0);
          }
          *(_DWORD *)(v3 + 304) = *config_id_0;
          v28 = std::__shared_ptr_access<Group,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Group,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 64));
          Group::createGadget((Group *const)(v3 + 128), (const GroupEntityParam *)v28);
          std::shared_ptr<Gadget>::operator=(
            (std::shared_ptr<Gadget> *const)(v3 + 96),
            (std::shared_ptr<Gadget> *)(v3 + 128));
          std::shared_ptr<Gadget>::~shared_ptr((std::shared_ptr<Gadget> *const)(v3 + 128));
          GroupEntityParam::~GroupEntityParam((GroupEntityParam *const)(v3 + 304));
        }
        if ( std::operator==<Gadget>(0LL, (const std::shared_ptr<Gadget> *)(v3 + 96)) )
        {
          common::milog::MiLogStream::create(
            &v64,
            &common::milog::MiLogDefault::default_log_obj_,
            3u,
            "./src/player/gm/player_gm_comp.cpp",
            "openChestsInScene",
            8285);
          v29 = common::milog::MiLogStream::operator<<<char [36],(char *[36])0>(
                  &v64,
                  (const char (*)[36])"gadget not found! gadget config_id:");
          v30 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v29, config_id_0);
          v31 = common::milog::MiLogStream::operator<<<char [11],(char *[11])0>(v30, (const char (*)[11])" group_id:");
          common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v31, group_id_0);
          common::milog::MiLogStream::~MiLogStream(&v64);
          v32 = 0;
        }
        else
        {
          v33 = std::__shared_ptr_access<Gadget,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Gadget,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 96));
          if ( Gadget::getState(v33) == 102 )
          {
            v32 = 0;
          }
          else
          {
            v34 = std::__shared_ptr_access<Gadget,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Gadget,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 96));
            Gadget::setState(v34, 0, 0, 1);
            v35 = std::__shared_ptr_access<Gadget,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Gadget,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 96));
            if ( *(_BYTE *)(((unsigned __int64)v35 >> 3) + 0x7FFF8000) )
              __asan_report_load8(v35);
            v36 = *(_QWORD *)v35->baseclass_0 + 208LL;
            if ( *(_BYTE *)((v36 >> 3) + 0x7FFF8000) )
              __asan_report_load8(*(_QWORD *)v35->baseclass_0 + 208LL);
            v37 = *(void (__fastcall **)(std::__shared_ptr_access<Gadget,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *, Player *, unsigned __int64))v36;
            *(_DWORD *)(v3 + 128) = 0;
            *(_DWORD *)(v3 + 132) = 0;
            *(_DWORD *)(v3 + 136) = 0;
            *(_DWORD *)(v3 + 140) = 0;
            v37(v35, player, v3 + 128);
            v38 = 0;
            if ( chest_num )
            {
              if ( ++open_count >= chest_num )
                v38 = 1;
            }
            v32 = v38 ? 1 : 2;
          }
        }
        std::shared_ptr<Gadget>::~shared_ptr((std::shared_ptr<Gadget> *const)(v3 + 96));
        if ( v32 )
          v26 = v32 == 2 ? 2 : 1;
        else
          v26 = 0;
      }
      std::shared_ptr<Group>::~shared_ptr((std::shared_ptr<Group> *const)(v3 + 64));
      if ( v26 )
      {
        if ( v26 != 2 )
          break;
      }
      __gnu_cxx::__normal_iterator<std::pair<unsigned int,unsigned int> *,std::vector<std::pair<unsigned int,unsigned int>>>::operator++((__gnu_cxx::__normal_iterator<std::pair<unsigned int,unsigned int>*,std::vector<std::pair<unsigned int,unsigned int>> > *const)&__for_begin_1);
    }
    std::vector<std::pair<unsigned int,unsigned int>>::~vector((std::vector<std::pair<unsigned int,unsigned int>> *const)(v3 + 160));
  }
  else
  {
    common::milog::MiLogStream::create(
      &v64,
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/player/gm/player_gm_comp.cpp",
      "openChestsInScene",
      8237);
    common::milog::MiLogStream::operator<<<char [22],(char *[22])0>(&v64, (const char (*)[22])"getScriptConfig fails");
    common::milog::MiLogStream::~MiLogStream(&v64);
  }
  result = 0;
  if ( v66 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8010) = 0LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8018) = 0;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8020) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8064) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF806C) = 0LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8074) = 0;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8020) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8028) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8030) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8038) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8040) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8048) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8050) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8058) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8060) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8068) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8070) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 8305: range 0000000017D773B0-0000000017D77452
void __cdecl procSimulateNextDayRegister::procSimulateNextDayRegister(procSimulateNextDayRegister *const this)
{
  std::function<int(GmContext&,const std::vector<std::string>&,std::string&)> *v1; // rax
  std::allocator<char> __a; // [rsp+1Fh] [rbp-31h] BYREF
  std::string __k; // [rsp+20h] [rbp-30h] BYREF

  std::allocator<char>::allocator(&__a);
  std::string::basic_string<std::allocator<char>>(&__k, "SIMULATE_NEXT_DAY", &__a);
  v1 = std::unordered_map<std::string,std::function<int ()(GmContext &,std::vector<std::string> const&,std::string&)>>::operator[](
         &GmUtils::op_func_map[abi:cxx11],
         &__k);
  std::function<int ()(GmContext &,std::vector<std::string> const&,std::string&)>::operator=<int (&)(GmContext &,std::vector<std::string> const&,std::string&)>(
    v1,
    (int (*)(GmContext *, const std::vector<std::string> *, std::string *))procSimulateNextDay);
  std::string::~string(&__k);
  std::allocator<char>::~allocator(&__a);
};

// Line 8306: range 0000000017C05CED-0000000017C06674
int32_t __cdecl procSimulateNextDay(
        GmContext *context,
        const std::vector<std::string> *param_vec,
        std::string *ret_msg)
{
  unsigned __int64 v3; // r13
  __int64 v4; // rax
  _DWORD *v5; // r12
  std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v6; // rdx
  bool *p_is_simulation_open; // rax
  bool v8; // r14
  int32_t v9; // r14d
  std::_Ios_Openmode v10; // eax
  std::_Ios_Openmode v11; // eax
  std::_Ios_Openmode v12; // eax
  time_t v13; // rax
  const std::string *v14; // rax
  __int64 v15; // rax
  PlayerAvatarComp *AvatarComp; // r14
  common::milog::MiLogStream *v17; // r14
  PlayerBasicComp *BasicComp; // rax
  common::milog::MiLogStream *v19; // rax
  common::milog::MiLogStream *v20; // r14
  PlayerBasicComp *v21; // rax
  common::milog::MiLogStream *v22; // rax
  common::milog::MiLogStream *v23; // r14
  PlayerBasicComp *v24; // rax
  common::milog::MiLogStream *v25; // rax
  common::milog::MiLogStream *v26; // rax
  common::milog::MiLogStream *v27; // rax
  common::milog::MiLogStream *v28; // r14
  PlayerBasicComp *v29; // rax
  common::milog::MiLogStream *v30; // rax
  common::milog::MiLogStream *v31; // r14
  PlayerBasicComp *v32; // rax
  PlayerBasicComp *v33; // rax
  PlayerBasicComp *v34; // rax
  PlayerBasicComp *v35; // rax
  PlayerDailyTaskComp *DailyTaskComp; // rax
  unsigned int val; // [rsp+28h] [rbp-658h] BYREF
  unsigned int Level; // [rsp+2Ch] [rbp-654h] BYREF
  unsigned int DungeonFinishCount; // [rsp+30h] [rbp-650h] BYREF
  unsigned int EncounterFinishCount; // [rsp+34h] [rbp-64Ch] BYREF
  unsigned __int64 v43; // [rsp+38h] [rbp-648h] BYREF
  Player *player; // [rsp+40h] [rbp-640h]
  time_t now; // [rsp+48h] [rbp-638h]
  time_t next_time; // [rsp+50h] [rbp-630h]
  time_t new_time_offset; // [rsp+58h] [rbp-628h]
  std::shared_ptr<Config> v48; // [rsp+60h] [rbp-620h] BYREF
  std::string __lhs; // [rsp+70h] [rbp-610h] BYREF
  std::string __rhs; // [rsp+90h] [rbp-5F0h] BYREF
  std::string v51; // [rsp+B0h] [rbp-5D0h] BYREF
  char v52[1456]; // [rsp+D0h] [rbp-5B0h] BYREF

  v3 = (unsigned __int64)v52;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_5(1408LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "5 32 8 21 simulation_guard:8309 64 8 22 delta_time_offset:8323 96 48 21 avatar_level_map:8341 17"
                        "6 512 8 ofs:8313 752 528 7 fs:8310";
  *(_QWORD *)(v3 + 16) = procSimulateNextDay;
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = -218959360;
  v5[536862722] = -218959360;
  v5[536862724] = -219021312;
  v5[536862725] = 62194;
  v5[536862741] = -219021312;
  v5[536862742] = -218959118;
  v5[536862743] = 62194;
  v5[536862760] = -202116109;
  v5[536862761] = -202116109;
  v5[536862762] = -202116109;
  v5[536862763] = -202116109;
  ServiceBox::findService<GameserverService>();
  GameserverService::getConfig((GameserverService *const)&v48);
  v6 = std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false> *const)&v48);
  p_is_simulation_open = &v6->is_simulation_open;
  if ( *(_BYTE *)(((unsigned __int64)p_is_simulation_open >> 3) + 0x7FFF8000) != 0
    && ((unsigned __int8)p_is_simulation_open & 7) >= *(_BYTE *)(((unsigned __int64)p_is_simulation_open >> 3)
                                                               + 0x7FFF8000) )
  {
    __asan_report_load1(p_is_simulation_open);
  }
  v8 = !v6->is_simulation_open;
  std::shared_ptr<Config>::~shared_ptr(&v48);
  if ( v8 )
  {
    std::string::operator=(ret_msg, &off_26360F20);
    v9 = 0;
    goto LABEL_23;
  }
  if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
    __asan_report_load8(&context->player);
  player = context->player;
  SimulationGuard::SimulationGuard((SimulationGuard *const)(v3 + 32), player);
  v10 = std::operator|(_S_in, _S_out);
  std::fstream::basic_fstream(v3 + 752, "../time_offset.txt", (unsigned int)v10);
  if ( (unsigned __int8)std::ios::operator!(v3 + 1016) )
  {
    v11 = std::operator|(_S_out, _S_app);
    std::ofstream::basic_ofstream(v3 + 176, "../time_offset.txt", (unsigned int)v11);
    std::operator<<<std::char_traits<char>>(v3 + 176, "\n");
    std::ofstream::close(v3 + 176);
    v12 = std::operator|(_S_in, _S_out);
    std::fstream::open(v3 + 752, "../time_offset.txt", (unsigned int)v12);
    std::ofstream::~ofstream(v3 + 176);
  }
  if ( !(unsigned __int8)std::ios::operator!(v3 + 1016) )
  {
    *(_QWORD *)(v3 + 64) = 0LL;
    if ( std::vector<std::string>::empty(param_vec) )
    {
      now = common::tools::TimeUtils::getNow();
      next_time = common::tools::TimeUtils::getTodayTime() + 86400;
      if ( next_time <= now )
        v13 = 0LL;
      else
        v13 = next_time - now;
      *(_QWORD *)(v3 + 64) = v13;
    }
    else
    {
      v14 = std::vector<std::string>::operator[](param_vec, 0LL);
      if ( common::tools::StringUtils::strToNum<long>(v14, (__int64 *)(v3 + 64), 1) )
      {
        std::string::operator=(ret_msg, "parse delta_time_offset fail!");
        v9 = -1;
        goto LABEL_22;
      }
    }
    new_time_offset = *(_QWORD *)(v3 + 64) + common::tools::TimeUtils::getTimeOffset();
    common::tools::TimeUtils::setTimeOffset(new_time_offset);
    v15 = std::ostream::operator<<(v3 + 768, new_time_offset);
    std::operator<<<std::char_traits<char>>(v15, "\n");
    std::fstream::close(v3 + 752);
    std::to_string(&__rhs, new_time_offset);
    std::literals::string_literals::operator"" s[abi:cxx11](&__lhs, off_26361060, 0x10uLL);
    std::operator+<char>(&v51, &__lhs, &__rhs);
    std::string::operator=(ret_msg, &v51);
    std::string::~string(&v51);
    std::string::~string(&__lhs);
    std::string::~string(&__rhs);
    std::map<unsigned int,unsigned int>::map((std::map<unsigned int,unsigned int> *const)(v3 + 96));
    AvatarComp = Player::getAvatarComp(player);
    std::function<ForeachPolicy ()(Avatar const&)>::function<procSimulateNextDay(GmContext &,std::vector<std::string> const&,std::string&)::{lambda(Avatar const&)#1},void,void>(
      (std::function<ForeachPolicy(const Avatar&)> *const)&v51,
      (procSimulateNextDay::<lambda(const Avatar&)>)(v3 + 96));
    PlayerAvatarComp::foreachAvatar(AvatarComp, (std::function<ForeachPolicy(const Avatar&)> *)&v51);
    std::function<ForeachPolicy ()(Avatar const&)>::~function((std::function<ForeachPolicy(const Avatar&)> *const)&v51);
    common::milog::MiLogStream::create(
      (common::milog::MiLogStream *)&v51,
      &common::milog::MiLogDefault::default_log_obj_,
      2u,
      "./src/player/gm/player_gm_comp.cpp",
      "procSimulateNextDay",
      8347);
    v17 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
            (common::milog::MiLogStream *const)&v51,
            (const char (*)[16])" register_time:");
    BasicComp = Player::getBasicComp(player);
    val = PlayerBasicComp::getRegisterTime(BasicComp);
    v19 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v17, &val);
    v20 = common::milog::MiLogStream::operator<<<char [14],(char *[14])0>(v19, (const char (*)[14])" player_time:");
    v21 = Player::getBasicComp(player);
    v43 = PlayerBasicComp::getPlayerTimeMs(v21) / 0x3E8;
    v22 = common::milog::MiLogStream::operator<<<unsigned long,(unsigned long *)0>(v20, &v43);
    v23 = common::milog::MiLogStream::operator<<<char [15],(char *[15])0>(v22, (const char (*)[15])" player_level:");
    v24 = Player::getBasicComp(player);
    Level = PlayerBasicComp::getLevel(v24);
    v25 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v23, &Level);
    v26 = common::milog::MiLogStream::operator<<<char [15],(char *[15])0>(v25, (const char (*)[15])" avatar_level:");
    v27 = common::milog::MiLogStream::operator<<<unsigned int,unsigned int>(
            v26,
            (const std::map<unsigned int,unsigned int> *)(v3 + 96));
    v28 = common::milog::MiLogStream::operator<<<char [23],(char *[23])0>(
            v27,
            (const char (*)[23])" dungeon_finish_count:");
    v29 = Player::getBasicComp(player);
    DungeonFinishCount = PlayerBasicComp::getDungeonFinishCount(v29);
    v30 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v28, &DungeonFinishCount);
    v31 = common::milog::MiLogStream::operator<<<char [25],(char *[25])0>(
            v30,
            (const char (*)[25])" encounter_finish_count:");
    v32 = Player::getBasicComp(player);
    EncounterFinishCount = PlayerBasicComp::getEncounterFinishCount(v32);
    common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v31, &EncounterFinishCount);
    common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)&v51);
    v33 = Player::getBasicComp(player);
    PlayerBasicComp::setDungeonFinishCount(v33, 0);
    v34 = Player::getBasicComp(player);
    PlayerBasicComp::setEncounterFinishCount(v34, 0);
    v35 = Player::getBasicComp(player);
    PlayerBasicComp::setDailyPlayTime(v35, 0);
    DailyTaskComp = Player::getDailyTaskComp(player);
    PlayerDailyTaskComp::tryRefresh(DailyTaskComp, 1);
    v9 = 0;
    std::map<unsigned int,unsigned int>::~map((std::map<unsigned int,unsigned int> *const)(v3 + 96));
    goto LABEL_22;
  }
  std::literals::string_literals::operator"" s[abi:cxx11](&__lhs, "open file ", 0xAuLL);
  std::operator+<char>(&v51, &__lhs, "../time_offset.txt");
  std::operator+<char>(&__rhs, &v51, " fail!");
  std::string::operator=(ret_msg, &__rhs);
  std::string::~string(&__rhs);
  std::string::~string(&v51);
  std::string::~string(&__lhs);
  v9 = 0;
LABEL_22:
  std::fstream::~fstream(v3 + 752);
  SimulationGuard::~SimulationGuard((SimulationGuard *const)(v3 + 32));
LABEL_23:
  if ( v52 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8008) = 0;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8010) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8054) = 0LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF805C) = 0;
    *(_QWORD *)((v3 >> 3) + 0x7FFF80A0) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF80A8) = 0LL;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    __asan_stack_free_5(v3, 1408LL, v52);
  }
  return v9;
};

// Line 8342: range 0000000017C05C3C-0000000017C05CEC
ForeachPolicy __cdecl procSimulateNextDay(GmContext &,std::vector<std::string> const&,std::string&)::{lambda(Avatar const&)#1}::operator()(
        const procSimulateNextDay::<lambda(const Avatar&)> *const __closure,
        const Avatar *avatar)
{
  uint32_t Level; // ebx
  std::map<unsigned int,unsigned int> *avatar_level_map; // r12
  std::map<unsigned int,unsigned int>::key_type *v4; // rsi
  std::map<unsigned int,unsigned int>::mapped_type *v5; // rax
  uint32_t *v6; // rdx
  char v7; // cl
  std::map<unsigned int,unsigned int>::key_type __k[5]; // [rsp+1Ch] [rbp-14h] BYREF

  Level = Creature::getLevel(avatar);
  if ( *(_BYTE *)(((unsigned __int64)__closure >> 3) + 0x7FFF8000) )
    __asan_report_load8(__closure);
  avatar_level_map = __closure->__avatar_level_map;
  __k[0] = Avatar::getAvatarId(avatar);
  v4 = __k;
  v5 = std::map<unsigned int,unsigned int>::operator[](avatar_level_map, __k);
  v6 = v5;
  v7 = *(_BYTE *)(((unsigned __int64)v5 >> 3) + 0x7FFF8000);
  if ( v7 != 0 && (char)(((unsigned __int8)v5 & 7) + 3) >= v7 )
  {
    LOBYTE(v4) = v7 != 0;
    __asan_report_store4(v5, v4, v5);
  }
  *v6 = Level;
  return 0;
};

// Line 8361: range 0000000017D77454-0000000017D774F6
void __cdecl procSimulateGetLogRegister::procSimulateGetLogRegister(procSimulateGetLogRegister *const this)
{
  std::function<int(GmContext&,const std::vector<std::string>&,std::string&)> *v1; // rax
  std::allocator<char> __a; // [rsp+1Fh] [rbp-31h] BYREF
  std::string __k; // [rsp+20h] [rbp-30h] BYREF

  std::allocator<char>::allocator(&__a);
  std::string::basic_string<std::allocator<char>>(&__k, "SIMULATE_GET_LOG", &__a);
  v1 = std::unordered_map<std::string,std::function<int ()(GmContext &,std::vector<std::string> const&,std::string&)>>::operator[](
         &GmUtils::op_func_map[abi:cxx11],
         &__k);
  std::function<int ()(GmContext &,std::vector<std::string> const&,std::string&)>::operator=<int (&)(GmContext &,std::vector<std::string> const&,std::string&)>(
    v1,
    (int (*)(GmContext *, const std::vector<std::string> *, std::string *))procSimulateGetLog);
  std::string::~string(&__k);
  std::allocator<char>::~allocator(&__a);
};

// Line 8362: range 0000000017C0670C-0000000017C06B8C
int32_t __cdecl procSimulateGetLog(GmContext *context, const std::vector<std::string> *param_vec, std::string *ret_msg)
{
  unsigned __int64 v3; // r13
  __int64 v4; // rax
  _DWORD *v5; // rbx
  __int64 v6; // r14
  uint32_t Uid; // eax
  __int64 v8; // rax
  __int64 v9; // r14
  PlayerBasicComp *BasicComp; // rax
  uint32_t RegisterTime; // eax
  __int64 v12; // rax
  __int64 v13; // r14
  PlayerBasicComp *v14; // rax
  uint64_t PlayerTimeMs; // rax
  __int64 v16; // rax
  __int64 v17; // r14
  PlayerBasicComp *v18; // rax
  uint32_t DailyPlayTime; // eax
  __int64 v20; // rax
  __int64 v21; // r14
  PlayerBasicComp *v22; // rax
  uint32_t Level; // eax
  __int64 v24; // rax
  __int64 v25; // r14
  PlayerBasicComp *v26; // rax
  uint32_t DungeonFinishCount; // eax
  __int64 v28; // rax
  __int64 v29; // r14
  PlayerBasicComp *v30; // rax
  uint32_t EncounterFinishCount; // eax
  __int64 v32; // rax
  PlayerAvatarComp *AvatarComp; // r14
  int32_t result; // eax
  Player *player; // [rsp+28h] [rbp-278h]
  std::function<ForeachPolicy(const Avatar&)> p_func; // [rsp+30h] [rbp-270h] BYREF
  char v38[592]; // [rsp+50h] [rbp-250h] BYREF

  v3 = (unsigned __int64)v38;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_4(544LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "2 48 8 21 simulation_guard:8364 80 392 7 ss:8365";
  *(_QWORD *)(v3 + 16) = procSimulateGetLog;
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = 61937;
  v5[536862721] = -234881024;
  v5[536862722] = 62194;
  v5[536862734] = -218103808;
  v5[536862735] = -202116109;
  v5[536862736] = -202116109;
  if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
    __asan_report_load8(&context->player);
  player = context->player;
  SimulationGuard::SimulationGuard((SimulationGuard *const)(v3 + 48), player);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream(v3 + 80);
  v6 = std::operator<<<std::char_traits<char>>(v3 + 96, "uid:");
  Uid = Player::getUid(player);
  v8 = std::ostream::operator<<(v6, Uid);
  v9 = std::operator<<<std::char_traits<char>>(v8, " register_time:");
  BasicComp = Player::getBasicComp(player);
  RegisterTime = PlayerBasicComp::getRegisterTime(BasicComp);
  v12 = std::ostream::operator<<(v9, RegisterTime);
  v13 = std::operator<<<std::char_traits<char>>(v12, " player_time:");
  v14 = Player::getBasicComp(player);
  PlayerTimeMs = PlayerBasicComp::getPlayerTimeMs(v14);
  v16 = std::ostream::operator<<(v13, PlayerTimeMs / 0x3E8);
  v17 = std::operator<<<std::char_traits<char>>(v16, " daily_play_time:");
  v18 = Player::getBasicComp(player);
  DailyPlayTime = PlayerBasicComp::getDailyPlayTime(v18);
  v20 = std::ostream::operator<<(v17, DailyPlayTime);
  v21 = std::operator<<<std::char_traits<char>>(v20, " player_level:");
  v22 = Player::getBasicComp(player);
  Level = PlayerBasicComp::getLevel(v22);
  v24 = std::ostream::operator<<(v21, Level);
  v25 = std::operator<<<std::char_traits<char>>(v24, " dungeon_finish_count:");
  v26 = Player::getBasicComp(player);
  DungeonFinishCount = PlayerBasicComp::getDungeonFinishCount(v26);
  v28 = std::ostream::operator<<(v25, DungeonFinishCount);
  v29 = std::operator<<<std::char_traits<char>>(v28, " encounter_finish_count:");
  v30 = Player::getBasicComp(player);
  EncounterFinishCount = PlayerBasicComp::getEncounterFinishCount(v30);
  v32 = std::ostream::operator<<(v29, EncounterFinishCount);
  std::operator<<<std::char_traits<char>>(v32, " avatar_level:{");
  AvatarComp = Player::getAvatarComp(player);
  std::function<ForeachPolicy ()(Avatar const&)>::function<procSimulateGetLog(GmContext &,std::vector<std::string> const&,std::string&)::{lambda(Avatar const&)#1},void,void>(
    &p_func,
    (procSimulateGetLog::<lambda(const Avatar&)>)(v3 + 80));
  PlayerAvatarComp::foreachAvatar(AvatarComp, &p_func);
  std::function<ForeachPolicy ()(Avatar const&)>::~function(&p_func);
  std::operator<<<std::char_traits<char>>(v3 + 96, "}");
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::str(&p_func, v3 + 80);
  std::string::operator=(ret_msg, &p_func);
  std::string::~string(&p_func);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream(v3 + 80);
  SimulationGuard::~SimulationGuard((SimulationGuard *const)(v3 + 48));
  result = 0;
  if ( v38 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8008) = 0;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8038) = 0LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8040) = 0;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8020) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8028) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8030) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8038) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8040) = -168430091;
  }
  return result;
};

// Line 8374: range 0000000017C06676-0000000017C0670B
ForeachPolicy __cdecl procSimulateGetLog(GmContext &,std::vector<std::string> const&,std::string&)::{lambda(Avatar const&)#1}::operator()(
        const procSimulateGetLog::<lambda(const Avatar&)> *const __closure,
        const Avatar *avatar)
{
  char *v2; // rbx
  uint32_t AvatarId; // eax
  __int64 v4; // rax
  __int64 v5; // rbx
  uint32_t Level; // eax
  __int64 v7; // rax

  if ( *(_BYTE *)(((unsigned __int64)__closure >> 3) + 0x7FFF8000) )
    __asan_report_load8(__closure);
  v2 = (char *)__closure->__ss + 16;
  AvatarId = Avatar::getAvatarId(avatar);
  v4 = std::ostream::operator<<(v2, AvatarId);
  v5 = std::operator<<<std::char_traits<char>>(v4, ":");
  Level = Creature::getLevel(avatar);
  v7 = std::ostream::operator<<(v5, Level);
  std::operator<<<std::char_traits<char>>(v7, " ");
  return 0;
};

// Line 8385: range 0000000017D774F8-0000000017D7759A
void __cdecl procSimulateBigWorldChestRegister::procSimulateBigWorldChestRegister(
        procSimulateBigWorldChestRegister *const this)
{
  std::function<int(GmContext&,const std::vector<std::string>&,std::string&)> *v1; // rax
  std::allocator<char> __a; // [rsp+1Fh] [rbp-31h] BYREF
  std::string __k; // [rsp+20h] [rbp-30h] BYREF

  std::allocator<char>::allocator(&__a);
  std::string::basic_string<std::allocator<char>>(&__k, "SIMULATE_BIG_WORLD_CHEST", &__a);
  v1 = std::unordered_map<std::string,std::function<int ()(GmContext &,std::vector<std::string> const&,std::string&)>>::operator[](
         &GmUtils::op_func_map[abi:cxx11],
         &__k);
  std::function<int ()(GmContext &,std::vector<std::string> const&,std::string&)>::operator=<int (&)(GmContext &,std::vector<std::string> const&,std::string&)>(
    v1,
    (int (*)(GmContext *, const std::vector<std::string> *, std::string *))procSimulateBigWorldChest);
  std::string::~string(&__k);
  std::allocator<char>::~allocator(&__a);
};

// Line 8386: range 0000000017C06B8D-0000000017C06F87
int32_t __cdecl procSimulateBigWorldChest(
        GmContext *context,
        const std::vector<std::string> *param_vec,
        std::string *ret_msg)
{
  unsigned __int64 v3; // r13
  __int64 v4; // rax
  _DWORD *v5; // r12
  int32_t v6; // r14d
  std::__shared_ptr_access<PlayerWorld,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v7; // rax
  unsigned __int64 v8; // rdx
  uint32_t v9; // r14d
  Scene *v10; // rcx
  int32_t result; // eax
  Player *player; // [rsp+28h] [rbp-118h]
  std::string __rhs; // [rsp+30h] [rbp-110h] BYREF
  std::string v15; // [rsp+50h] [rbp-F0h] BYREF
  char v16[208]; // [rsp+70h] [rbp-D0h] BYREF

  v3 = (unsigned __int64)v16;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_2(160LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "5 32 4 14 chest_num:8389 48 4 13 scene_id:8390 64 8 21 simulation_guard:8388 96 16 14 world_ptr:"
                        "8402 128 16 14 scene_ptr:8408";
  *(_QWORD *)(v3 + 16) = procSimulateBigWorldChest;
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = -234556924;
  v5[536862722] = -218959360;
  v5[536862723] = -219021312;
  v5[536862724] = -202178560;
  if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
    __asan_report_load8(&context->player);
  player = context->player;
  SimulationGuard::SimulationGuard((SimulationGuard *const)(v3 + 64), player);
  *(_DWORD *)(v3 + 32) = 0;
  *(_DWORD *)(v3 + 48) = 0;
  if ( common::tools::StringUtils::strVecToNum<0u,unsigned int>(param_vec, (unsigned int *)(v3 + 32)) )
  {
    std::string::operator=(ret_msg, "param parse error!");
    v6 = 0;
  }
  else
  {
    if ( common::tools::StringUtils::strVecToNum<1u,unsigned int>(param_vec, (unsigned int *)(v3 + 48)) )
    {
      std::string::operator=(ret_msg, "parse scene_id fail, use scene_id=3");
      *(_DWORD *)(v3 + 48) = 3;
    }
    Player::getSceneComp(player);
    PlayerSceneComp::getMyPlayerWorld((const PlayerSceneComp *const)(v3 + 96));
    if ( std::operator==<PlayerWorld>(0LL, (const std::shared_ptr<PlayerWorld> *)(v3 + 96)) )
    {
      std::string::operator=(ret_msg, "getMyPlayerWorld fail!");
      v6 = 0;
    }
    else
    {
      v7 = std::__shared_ptr_access<PlayerWorld,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<PlayerWorld,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 96));
      if ( *(_BYTE *)(((unsigned __int64)v7 >> 3) + 0x7FFF8000) )
        __asan_report_load8(v7);
      v8 = (unsigned __int64)(v7->_vptr_World + 10);
      if ( *(_BYTE *)((v8 >> 3) + 0x7FFF8000) )
        __asan_report_load8(v7->_vptr_World + 10);
      (*(void (__fastcall **)(unsigned __int64, std::__shared_ptr_access<PlayerWorld,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *, _QWORD))v8)(
        v3 + 128,
        v7,
        *(unsigned int *)(v3 + 48));
      if ( std::operator==<Scene>(0LL, (const std::shared_ptr<Scene> *)(v3 + 128)) )
      {
        std::to_string(&__rhs, *(_DWORD *)(v3 + 48));
        std::operator+<char>(&v15, "getScene fail! scene_id:", &__rhs);
        std::string::operator=(ret_msg, &v15);
        std::string::~string(&v15);
        std::string::~string(&__rhs);
        v6 = 0;
      }
      else
      {
        v9 = *(_DWORD *)(v3 + 32);
        v10 = std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::operator*((const std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 128));
        v6 = `anonymous namespace'::openChestsInScene(player, v10, v9);
      }
      std::shared_ptr<Scene>::~shared_ptr((std::shared_ptr<Scene> *const)(v3 + 128));
    }
    std::shared_ptr<PlayerWorld>::~shared_ptr((std::shared_ptr<PlayerWorld> *const)(v3 + 96));
  }
  SimulationGuard::~SimulationGuard((SimulationGuard *const)(v3 + 64));
  result = v6;
  if ( v16 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8010) = 0;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8010) = -168430091;
  }
  return result;
};

// Line 8418: range 0000000017D7759C-0000000017D7763E
void __cdecl procSimulateDungeonRegister::procSimulateDungeonRegister(procSimulateDungeonRegister *const this)
{
  std::function<int(GmContext&,const std::vector<std::string>&,std::string&)> *v1; // rax
  std::allocator<char> __a; // [rsp+1Fh] [rbp-31h] BYREF
  std::string __k; // [rsp+20h] [rbp-30h] BYREF

  std::allocator<char>::allocator(&__a);
  std::string::basic_string<std::allocator<char>>(&__k, "SIMULATE_DUNGEON", &__a);
  v1 = std::unordered_map<std::string,std::function<int ()(GmContext &,std::vector<std::string> const&,std::string&)>>::operator[](
         &GmUtils::op_func_map[abi:cxx11],
         &__k);
  std::function<int ()(GmContext &,std::vector<std::string> const&,std::string&)>::operator=<int (&)(GmContext &,std::vector<std::string> const&,std::string&)>(
    v1,
    (int (*)(GmContext *, const std::vector<std::string> *, std::string *))procSimulateDungeon);
  std::string::~string(&__k);
  std::allocator<char>::~allocator(&__a);
};

// Line 8419: range 0000000017C06F88-0000000017C0765D
int32_t __cdecl procSimulateDungeon(
        GmContext *context,
        const std::vector<std::string> *param_vec,
        std::string *ret_msg)
{
  unsigned __int64 v3; // r13
  __int64 v4; // rax
  _DWORD *v5; // r12
  GameserverService *v6; // rax
  uint32_t v7; // r14d
  common::milog::MiLogStream *v8; // rax
  Scene *v9; // rcx
  PlayerDungeonComp *DungeonComp; // r14
  uint32_t Uid; // eax
  std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v12; // rax
  PlayerItemComp *ItemComp; // rax
  PlayerItemComp *v14; // r14
  PlayerItemComp *v15; // rax
  PlayerBasicComp *BasicComp; // r14
  PlayerBasicComp *v17; // rax
  uint32_t DungeonFinishCount; // eax
  int32_t result; // eax
  Player *player; // [rsp+28h] [rbp-198h]
  const data::DungeonExcelConfig *dungeon_config_ptr; // [rsp+30h] [rbp-190h]
  SubItemReason reason; // [rsp+38h] [rbp-188h] BYREF
  std::shared_ptr<Player> v24; // [rsp+40h] [rbp-180h] BYREF
  common::milog::MiLogStream v25; // [rsp+50h] [rbp-170h] BYREF
  char v26[336]; // [rsp+70h] [rbp-150h] BYREF

  v3 = (unsigned __int64)v26;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_3(288LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "6 48 4 15 dungeon_id:8422 64 8 21 simulation_guard:8421 96 16 14 scene_ptr:8428 128 16 20 cost_i"
                        "tem_param:8441 160 24 18 action_reason:8444 224 24 19 item_param_vec:8446";
  *(_QWORD *)(v3 + 16) = procSimulateDungeon;
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = -234556943;
  v5[536862722] = -218959360;
  v5[536862723] = -219021312;
  v5[536862724] = -219021312;
  v5[536862725] = -234881024;
  v5[536862726] = -218959118;
  v5[536862727] = -218103808;
  v5[536862728] = -202116109;
  if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
    __asan_report_load8(&context->player);
  player = context->player;
  SimulationGuard::SimulationGuard((SimulationGuard *const)(v3 + 64), player);
  *(_DWORD *)(v3 + 48) = 0;
  if ( common::tools::StringUtils::strVecToNum<0u,unsigned int>(param_vec, (unsigned int *)(v3 + 48)) )
  {
    std::string::operator=(ret_msg, "param parse error!");
  }
  else
  {
    v6 = ServiceBox::findService<GameserverService>();
    v7 = (unsigned int)GameserverService::getGameThreadLocal(v6) + 568;
    toPtr<Player,Player>((Player *)&v24);
    DungeonMgr::createDungeon((DungeonMgr *const)(v3 + 128), v7, (PlayerPtr *)*(unsigned int *)(v3 + 48));
    std::shared_ptr<Scene>::shared_ptr<DungeonScene,void>(
      (std::shared_ptr<Scene> *const)(v3 + 96),
      (std::shared_ptr<DungeonScene> *)(v3 + 128));
    std::shared_ptr<DungeonScene>::~shared_ptr((std::shared_ptr<DungeonScene> *const)(v3 + 128));
    std::shared_ptr<Player>::~shared_ptr(&v24);
    if ( std::operator==<Scene>(0LL, (const std::shared_ptr<Scene> *)(v3 + 96)) )
    {
      common::milog::MiLogStream::create(
        &v25,
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/player/gm/player_gm_comp.cpp",
        "procSimulateDungeon",
        8431);
      v8 = common::milog::MiLogStream::operator<<<char [29],(char *[29])0>(
             &v25,
             (const char (*)[29])"scene not found, dungeon_id:");
      common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v8, (const unsigned int *)(v3 + 48));
      common::milog::MiLogStream::~MiLogStream(&v25);
    }
    else
    {
      v9 = std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::operator*((const std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 96));
      `anonymous namespace'::openChestsInScene(player, v9, 0);
      DungeonComp = Player::getDungeonComp(player);
      Uid = Player::getUid(player);
      PlayerDungeonComp::onDungeonSucceed(DungeonComp, *(_DWORD *)(v3 + 48), Uid, 0);
      ServiceBox::findService<GameserverService>();
      GameserverService::getConfig((GameserverService *const)(v3 + 128));
      v12 = std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 128));
      dungeon_config_ptr = data::DungeonExcelConfigMgrBase::findDungeonExcelConfig(
                             &v12->design_config.txt_config_mgr.dungeon_config_mgr,
                             *(_DWORD *)(v3 + 48));
      std::shared_ptr<Config>::~shared_ptr((std::shared_ptr<Config> *const)(v3 + 128));
      if ( dungeon_config_ptr )
      {
        *(_QWORD *)(v3 + 128) = 0LL;
        *(_QWORD *)(v3 + 136) = 0LL;
        if ( *(_BYTE *)(((unsigned __int64)&dungeon_config_ptr->statue_cost_id >> 3) + 0x7FFF8000) != 0
          && (char)((((_BYTE)dungeon_config_ptr - 100) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&dungeon_config_ptr->statue_cost_id >> 3)
                                                                             + 0x7FFF8000) )
        {
          __asan_report_load4(&dungeon_config_ptr->statue_cost_id);
        }
        *(_DWORD *)(v3 + 128) = dungeon_config_ptr->statue_cost_id;
        if ( *(_BYTE *)(((unsigned __int64)&dungeon_config_ptr->statue_cost_count >> 3) + 0x7FFF8000) != 0
          && *(_BYTE *)(((unsigned __int64)&dungeon_config_ptr->statue_cost_count >> 3) + 0x7FFF8000) <= 3 )
        {
          __asan_report_load4(&dungeon_config_ptr->statue_cost_count);
        }
        *(_DWORD *)(v3 + 132) = dungeon_config_ptr->statue_cost_count;
        ItemComp = Player::getItemComp(player);
        if ( !PlayerItemComp::checkSubItem(ItemComp, (const ItemParam *)(v3 + 128)) )
        {
          ActionReason::ActionReason((ActionReason *const)(v3 + 160), ACTION_REASON_GM, ITEM_LIMIT_GM);
          v14 = Player::getItemComp(player);
          SubItemReason::SubItemReason(&reason, (const ActionReason *)(v3 + 160));
          PlayerItemComp::subItem(v14, (const ItemParam *)(v3 + 128), &reason);
          std::vector<ItemParam>::vector((std::vector<ItemParam> *const)(v3 + 224));
          if ( *(_BYTE *)(((unsigned __int64)&dungeon_config_ptr->statue_drop >> 3) + 0x7FFF8000) != 0
            && (char)((((_BYTE)dungeon_config_ptr - 92) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&dungeon_config_ptr->statue_drop >> 3)
                                                                              + 0x7FFF8000) )
          {
            __asan_report_load4(&dungeon_config_ptr->statue_drop);
          }
          DropUtils::dropItems(
            player,
            dungeon_config_ptr->statue_drop,
            1u,
            (const ActionReason *)(v3 + 160),
            (std::vector<ItemParam> *)(v3 + 224));
          v15 = Player::getItemComp(player);
          PlayerItemComp::addItemBatch(
            v15,
            (const std::vector<ItemParam> *)(v3 + 224),
            (const ActionReason *)(v3 + 160),
            0LL);
          std::vector<ItemParam>::~vector((std::vector<ItemParam> *const)(v3 + 224));
        }
      }
      BasicComp = Player::getBasicComp(player);
      v17 = Player::getBasicComp(player);
      DungeonFinishCount = PlayerBasicComp::getDungeonFinishCount(v17);
      PlayerBasicComp::setDungeonFinishCount(BasicComp, DungeonFinishCount + 1);
    }
    std::shared_ptr<Scene>::~shared_ptr((std::shared_ptr<Scene> *const)(v3 + 96));
  }
  SimulationGuard::~SimulationGuard((SimulationGuard *const)(v3 + 64));
  result = 0;
  if ( v26 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8010) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8018) = 0LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8020) = 0;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8020) = -168430091;
  }
  return result;
};

// Line 8457: range 0000000017D77640-0000000017D776E2
void __cdecl procSimulateFinishOneDailyTaskRegister::procSimulateFinishOneDailyTaskRegister(
        procSimulateFinishOneDailyTaskRegister *const this)
{
  std::function<int(GmContext&,const std::vector<std::string>&,std::string&)> *v1; // rax
  std::allocator<char> __a; // [rsp+1Fh] [rbp-31h] BYREF
  std::string __k; // [rsp+20h] [rbp-30h] BYREF

  std::allocator<char>::allocator(&__a);
  std::string::basic_string<std::allocator<char>>(&__k, "SIMULATE_FINISH_ONE_DAILYTASK", &__a);
  v1 = std::unordered_map<std::string,std::function<int ()(GmContext &,std::vector<std::string> const&,std::string&)>>::operator[](
         &GmUtils::op_func_map[abi:cxx11],
         &__k);
  std::function<int ()(GmContext &,std::vector<std::string> const&,std::string&)>::operator=<int (&)(GmContext &,std::vector<std::string> const&,std::string&)>(
    v1,
    (int (*)(GmContext *, const std::vector<std::string> *, std::string *))procSimulateFinishOneDailyTask);
  std::string::~string(&__k);
  std::allocator<char>::~allocator(&__a);
};

// Line 8458: range 0000000017C0765E-0000000017C07AE1
int32_t __cdecl procSimulateFinishOneDailyTask(
        GmContext *context,
        const std::vector<std::string> *param_vec,
        std::string *ret_msg)
{
  unsigned __int64 v3; // r12
  __int64 v4; // rax
  _DWORD *v5; // r13
  PlayerDailyTaskComp *DailyTaskComp; // rcx
  PlayerDailyTaskComp *v7; // rax
  std::mersenne_twister_engine<long unsigned int,32,624,397,31,2567483615,11,4294967295,7,2636928640,15,4022730752,18,1812433253> *RandGenerator; // r15
  unsigned int *M_current; // r14
  std::vector<unsigned int>::iterator v10; // rax
  PlayerDailyTaskComp *v11; // r14
  std::vector<unsigned int>::reference v12; // rax
  uint32_t *v13; // rdx
  PlayerDailyTaskComp *v14; // rax
  bool v15; // r14
  PlayerDailyTaskComp *v16; // rax
  PlayerBasicComp *BasicComp; // r14
  PlayerBasicComp *v18; // rax
  uint32_t EncounterFinishCount; // eax
  int32_t result; // eax
  std::unordered_map<unsigned int,data::DailyTaskExcelConfig>::const_iterator __for_begin; // [rsp+28h] [rbp-118h] BYREF
  std::unordered_map<unsigned int,data::DailyTaskExcelConfig>::const_iterator __for_end; // [rsp+30h] [rbp-110h] BYREF
  Player *player; // [rsp+38h] [rbp-108h]
  const std::unordered_map<unsigned int,data::DailyTaskExcelConfig> *__for_range; // [rsp+40h] [rbp-100h]
  const std::pair<unsigned int const,data::DailyTaskExcelConfig> *v26; // [rsp+48h] [rbp-F8h]
  std::tuple_element<0,const std::pair<unsigned int const,data::DailyTaskExcelConfig> >::type *id; // [rsp+50h] [rbp-F0h]
  std::tuple_element<1,const std::pair<unsigned int const,data::DailyTaskExcelConfig> >::type *_; // [rsp+58h] [rbp-E8h]
  std::shared_ptr<Config> v29; // [rsp+60h] [rbp-E0h] BYREF
  std::vector<unsigned int> v30; // [rsp+70h] [rbp-D0h] BYREF
  char v31[176]; // [rsp+90h] [rbp-B0h] BYREF

  v3 = (unsigned __int64)v31;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_1(128LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "2 32 8 21 simulation_guard:8460 64 24 19 daily_task_vec:8465";
  *(_QWORD *)(v3 + 16) = procSimulateFinishOneDailyTask;
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = -218959360;
  v5[536862722] = -218103808;
  v5[536862723] = -202116109;
  if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
    __asan_report_load8(&context->player);
  player = context->player;
  SimulationGuard::SimulationGuard((SimulationGuard *const)(v3 + 32), player);
  ServiceBox::findService<GameserverService>();
  GameserverService::getConfig((GameserverService *const)&v29);
  __for_range = &std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false> *const)&v29)->design_config.txt_config_mgr.daily_task_config_mgr.daily_task_excel_config_map;
  std::shared_ptr<Config>::~shared_ptr(&v29);
  __for_begin._M_cur = std::unordered_map<unsigned int,data::DailyTaskExcelConfig>::begin(__for_range)._M_cur;
  __for_end._M_cur = std::unordered_map<unsigned int,data::DailyTaskExcelConfig>::end(__for_range)._M_cur;
  while ( std::__detail::operator!=<std::pair<unsigned int const,data::DailyTaskExcelConfig>,false>(
            &__for_begin,
            &__for_end) )
  {
    v26 = std::__detail::_Node_const_iterator<std::pair<unsigned int const,data::DailyTaskExcelConfig>,false,false>::operator*(&__for_begin);
    id = std::get<0ul,unsigned int const,data::DailyTaskExcelConfig>(v26);
    _ = (std::tuple_element<1,const std::pair<unsigned int const,data::DailyTaskExcelConfig> >::type *)std::get<1ul,unsigned int const,data::DailyTaskExcelConfig>(v26);
    DailyTaskComp = Player::getDailyTaskComp(player);
    if ( *(_BYTE *)(((unsigned __int64)id >> 3) + 0x7FFF8000) != 0
      && (char)(((unsigned __int8)id & 7) + 3) >= *(_BYTE *)(((unsigned __int64)id >> 3) + 0x7FFF8000) )
    {
      __asan_report_load4(id);
    }
    PlayerDailyTaskComp::addDailyTaskByGm(DailyTaskComp, *id);
    std::__detail::_Node_const_iterator<std::pair<unsigned int const,data::DailyTaskExcelConfig>,false,false>::operator++(&__for_begin);
  }
  v7 = Player::getDailyTaskComp(player);
  PlayerDailyTaskComp::getUnfinishedDailyTasks((std::vector<unsigned int> *)(v3 + 64), v7);
  if ( std::vector<unsigned int>::empty((const std::vector<unsigned int> *const)(v3 + 64)) )
  {
    std::string::operator=(ret_msg, &off_26361740);
  }
  else
  {
    RandGenerator = common::tools::RandomUtils::getRandGenerator();
    M_current = std::vector<unsigned int>::end((std::vector<unsigned int> *const)(v3 + 64))._M_current;
    v10._M_current = std::vector<unsigned int>::begin((std::vector<unsigned int> *const)(v3 + 64))._M_current;
    std::shuffle<__gnu_cxx::__normal_iterator<unsigned int *,std::vector<unsigned int>>,std::mersenne_twister_engine<unsigned long,32ul,624ul,397ul,31ul,2567483615ul,11ul,4294967295ul,7ul,2636928640ul,15ul,4022730752ul,18ul,1812433253ul> &>(
      v10,
      (__gnu_cxx::__normal_iterator<unsigned int*,std::vector<unsigned int> >)M_current,
      RandGenerator);
    v11 = Player::getDailyTaskComp(player);
    v12 = std::vector<unsigned int>::operator[]((std::vector<unsigned int> *const)(v3 + 64), 0LL);
    v13 = v12;
    if ( *(_BYTE *)(((unsigned __int64)v12 >> 3) + 0x7FFF8000) != 0
      && (char)(((unsigned __int8)v12 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)v12 >> 3) + 0x7FFF8000) )
    {
      __asan_report_load4(v12);
    }
    PlayerDailyTaskComp::finishDailyTaskByGm(v11, *v13);
    v14 = Player::getDailyTaskComp(player);
    PlayerDailyTaskComp::getUnfinishedDailyTasks(&v30, v14);
    v15 = std::vector<unsigned int>::empty(&v30);
    std::vector<unsigned int>::~vector(&v30);
    if ( v15 )
    {
      v16 = Player::getDailyTaskComp(player);
      PlayerDailyTaskComp::takeScoreReward(v16);
    }
    BasicComp = Player::getBasicComp(player);
    v18 = Player::getBasicComp(player);
    EncounterFinishCount = PlayerBasicComp::getEncounterFinishCount(v18);
    PlayerBasicComp::setEncounterFinishCount(BasicComp, EncounterFinishCount + 1);
  }
  std::vector<unsigned int>::~vector((std::vector<unsigned int> *const)(v3 + 64));
  SimulationGuard::~SimulationGuard((SimulationGuard *const)(v3 + 32));
  result = 0;
  if ( v31 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 8482: range 0000000017D77718-0000000017D777BA
void __cdecl procSimulateFinishOneRandTaskRegister::procSimulateFinishOneRandTaskRegister(
        procSimulateFinishOneRandTaskRegister *const this)
{
  std::function<int(GmContext&,const std::vector<std::string>&,std::string&)> *v1; // rax
  std::allocator<char> __a; // [rsp+1Fh] [rbp-31h] BYREF
  std::string __k; // [rsp+20h] [rbp-30h] BYREF

  std::allocator<char>::allocator(&__a);
  std::string::basic_string<std::allocator<char>>(&__k, "SIMULATE_FINISH_ONE_RANDTASK", &__a);
  v1 = std::unordered_map<std::string,std::function<int ()(GmContext &,std::vector<std::string> const&,std::string&)>>::operator[](
         &GmUtils::op_func_map[abi:cxx11],
         &__k);
  std::function<int ()(GmContext &,std::vector<std::string> const&,std::string&)>::operator=<int (&)(GmContext &,std::vector<std::string> const&,std::string&)>(
    v1,
    (int (*)(GmContext *, const std::vector<std::string> *, std::string *))procSimulateFinishOneRandTask);
  std::string::~string(&__k);
  std::allocator<char>::~allocator(&__a);
};

// Line 8483: range 0000000017C07AE2-0000000017C089A4
int32_t __cdecl procSimulateFinishOneRandTask(
        GmContext *context,
        const std::vector<std::string> *param_vec,
        std::string *ret_msg)
{
  unsigned __int64 v3; // r13
  __int64 v4; // rax
  _DWORD *v5; // r12
  std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v6; // rdx
  bool *p_is_simulation_open; // rax
  bool v8; // r14
  std::__shared_ptr_access<PlayerWorldScene,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v9; // rax
  std::__shared_ptr_access<PlayerWorldScene,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v10; // rax
  const ConfigRectZone *v11; // r8
  std::mersenne_twister_engine<long unsigned int,32,624,397,31,2567483615,11,4294967295,7,2636928640,15,4022730752,18,1812433253> *RandGenerator; // r15
  std::pair<unsigned int,ConfigRectZone> *M_current; // r14
  std::vector<std::pair<unsigned int,ConfigRectZone>>::iterator v14; // rax
  PlayerWorldScene *v15; // rax
  SceneEncounterComp *EncounterComp; // rax
  std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v17; // rax
  unsigned __int64 Position; // rax
  PlayerSceneComp *SceneComp; // rax
  std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v20; // rax
  std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v21; // r14
  unsigned __int64 v22; // rax
  void (__fastcall *v23)(std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *, Vector3 *); // r15
  double v24; // xmm0_8
  double v25; // xmm0_8
  float v26; // xmm2_4
  PlayerSceneComp *v27; // rcx
  PlayerWorldScene *v28; // rax
  SceneEncounterComp *v29; // rax
  PlayerWorldScene *v30; // rax
  SceneEncounterComp *v31; // r14
  uint32_t Now; // eax
  PlayerWorldScene *v33; // rax
  SceneEncounterComp *v34; // rax
  SceneEncounterComp *v35; // r14
  unsigned __int64 v36; // rax
  void (__fastcall *v37)(SceneEncounterComp *, _QWORD); // r15
  unsigned int v38; // eax
  std::vector<SceneEncounterRandTask::RandTaskInfo> *RandTaskVec; // rax
  std::set<unsigned int>::size_type v40; // r14
  PlayerWorldScene *v41; // rax
  SceneEncounterComp *v42; // rcx
  std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v43; // rax
  unsigned __int64 v44; // rdx
  PlayerSceneComp *v45; // rax
  PlayerBasicComp *BasicComp; // r14
  PlayerBasicComp *v47; // rax
  uint32_t EncounterFinishCount; // eax
  int32_t result; // eax
  float x_; // [rsp+14h] [rbp-27Ch]
  uint32_t try_count; // [rsp+38h] [rbp-258h]
  uint32_t old_area_id; // [rsp+44h] [rbp-24Ch]
  std::map<unsigned int,std::vector<ConfigRectZone>>::const_iterator __for_begin; // [rsp+48h] [rbp-248h] BYREF
  std::map<unsigned int,std::vector<ConfigRectZone>>::const_iterator __for_end; // [rsp+50h] [rbp-240h] BYREF
  std::vector<ConfigRectZone>::const_iterator __for_begin_0; // [rsp+58h] [rbp-238h] BYREF
  std::vector<ConfigRectZone>::const_iterator __for_end_0; // [rsp+60h] [rbp-230h] BYREF
  Player *player; // [rsp+68h] [rbp-228h]
  const SceneJsonConfig *scene_json_config_ptr; // [rsp+70h] [rbp-220h]
  const std::map<unsigned int,std::vector<ConfigRectZone>> *__for_range; // [rsp+78h] [rbp-218h]
  SceneEncounterRandTask *rand_task_comp_ptr; // [rsp+80h] [rbp-210h]
  std::vector<SceneEncounterRandTask::RandTaskInfo> *__for_range_1; // [rsp+88h] [rbp-208h]
  std::vector<std::pair<unsigned int,ConfigRectZone>> *__for_range_2; // [rsp+90h] [rbp-200h]
  const std::pair<unsigned int,ConfigRectZone> *v64; // [rsp+98h] [rbp-1F8h]
  std::tuple_element<0,const std::pair<unsigned int,ConfigRectZone> >::type *area_id_0; // [rsp+A0h] [rbp-1F0h]
  std::tuple_element<1,const std::pair<unsigned int,ConfigRectZone> >::type *config_rect_zone_0; // [rsp+A8h] [rbp-1E8h]
  std::vector<SceneEncounterRandTask::RandTaskInfo> *__for_range_3; // [rsp+B0h] [rbp-1E0h]
  const SceneEncounterRandTask::RandTaskInfo *rand_task_info_0; // [rsp+B8h] [rbp-1D8h]
  const SceneEncounterRandTask::RandTaskInfo *rand_task_info; // [rsp+C0h] [rbp-1D0h]
  const std::pair<unsigned int const,std::vector<ConfigRectZone> > *v70; // [rsp+C8h] [rbp-1C8h]
  std::tuple_element<0,const std::pair<unsigned int const,std::vector<ConfigRectZone> > >::type *area_id; // [rsp+D0h] [rbp-1C0h]
  std::tuple_element<1,const std::pair<unsigned int const,std::vector<ConfigRectZone> > >::type *config_rect_zone_list; // [rsp+D8h] [rbp-1B8h]
  const std::vector<ConfigRectZone> *__for_range_0; // [rsp+E0h] [rbp-1B0h]
  const ConfigRectZone *config_rect_zone; // [rsp+E8h] [rbp-1A8h]
  Vector3 v75; // [rsp+F4h] [rbp-19Ch] BYREF
  char v76[400]; // [rsp+100h] [rbp-190h] BYREF

  v3 = (unsigned __int64)v76;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_3(352LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "7 48 8 21 simulation_guard:8486 80 12 12 old_pos:8540 112 16 15 avatar_ptr:8487 144 16 14 world_"
                        "ptr:8493 176 16 20 world_scene_ptr:8499 208 24 23 candidate_zone_vec:8513 272 48 25 old_rand_task_id_set:8531";
  *(_QWORD *)(v3 + 16) = procSimulateFinishOneRandTask;
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = 61937;
  v5[536862721] = -234881024;
  v5[536862722] = 62194;
  v5[536862722] = 0x4000000;
  v5[536862723] = 62194;
  v5[536862724] = 62194;
  v5[536862725] = 62194;
  v5[536862726] = 62194;
  v5[536862727] = -218959360;
  v5[536862728] = 62194;
  v5[536862730] = -202116109;
  ServiceBox::findService<GameserverService>();
  GameserverService::getConfig((GameserverService *const)(v3 + 176));
  v6 = std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 176));
  p_is_simulation_open = &v6->is_simulation_open;
  if ( *(_BYTE *)(((unsigned __int64)p_is_simulation_open >> 3) + 0x7FFF8000) != 0
    && ((unsigned __int8)p_is_simulation_open & 7) >= *(_BYTE *)(((unsigned __int64)p_is_simulation_open >> 3)
                                                               + 0x7FFF8000) )
  {
    __asan_report_load1(p_is_simulation_open);
  }
  v8 = !v6->is_simulation_open;
  std::shared_ptr<Config>::~shared_ptr((std::shared_ptr<Config> *const)(v3 + 176));
  if ( v8 )
  {
    std::string::operator=(ret_msg, &off_26360F20);
  }
  else
  {
    if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
      __asan_report_load8(&context->player);
    player = context->player;
    SimulationGuard::SimulationGuard((SimulationGuard *const)(v3 + 48), player);
    Player::getCurAvatar((Player *const)(v3 + 112));
    if ( std::operator==<Avatar>(0LL, (const std::shared_ptr<Avatar> *)(v3 + 112)) )
    {
      std::string::operator=(ret_msg, &off_263618A0);
    }
    else
    {
      Player::getSceneComp(player);
      PlayerSceneComp::getMyPlayerWorld((const PlayerSceneComp *const)(v3 + 144));
      if ( std::operator==<PlayerWorld>(0LL, (const std::shared_ptr<PlayerWorld> *)(v3 + 144)) )
      {
        std::string::operator=(ret_msg, "getMyPlayerWorld fail!");
      }
      else
      {
        std::__shared_ptr_access<PlayerWorld,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<PlayerWorld,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 144));
        PlayerWorld::getMainWorldScene((PlayerWorld *const)(v3 + 176));
        if ( std::operator==<PlayerWorldScene>(0LL, (const std::shared_ptr<PlayerWorldScene> *)(v3 + 176)) )
        {
          std::string::operator=(ret_msg, "getMainWorldScene fail!");
        }
        else
        {
          v9 = std::__shared_ptr_access<PlayerWorldScene,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<PlayerWorldScene,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 176));
          scene_json_config_ptr = Scene::getJsonConfig((const Scene *const)v9);
          if ( scene_json_config_ptr )
          {
            v10 = std::__shared_ptr_access<PlayerWorldScene,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<PlayerWorldScene,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 176));
            Scene::getSceneId((const Scene *const)v10);
            std::vector<std::pair<unsigned int,ConfigRectZone>>::vector((std::vector<std::pair<unsigned int,ConfigRectZone>> *const)(v3 + 208));
            __for_range = &scene_json_config_ptr->rect_zone_list_map;
            __for_begin._M_node = std::map<unsigned int,std::vector<ConfigRectZone>>::begin(&scene_json_config_ptr->rect_zone_list_map)._M_node;
            __for_end._M_node = std::map<unsigned int,std::vector<ConfigRectZone>>::end(&scene_json_config_ptr->rect_zone_list_map)._M_node;
            while ( std::operator!=(&__for_begin, &__for_end) )
            {
              v70 = std::_Rb_tree_const_iterator<std::pair<unsigned int const,std::vector<ConfigRectZone>>>::operator*(&__for_begin);
              area_id = std::get<0ul,unsigned int const,std::vector<ConfigRectZone>>(v70);
              config_rect_zone_list = (std::tuple_element<1,const std::pair<unsigned int const,std::vector<ConfigRectZone> > >::type *)std::get<1ul,unsigned int const,std::vector<ConfigRectZone>>(v70);
              __for_range_0 = config_rect_zone_list;
              __for_begin_0._M_current = std::vector<ConfigRectZone>::begin(config_rect_zone_list)._M_current;
              __for_end_0._M_current = std::vector<ConfigRectZone>::end(__for_range_0)._M_current;
              while ( __gnu_cxx::operator!=<ConfigRectZone const*,std::vector<ConfigRectZone>>(
                        &__for_begin_0,
                        &__for_end_0) )
              {
                config_rect_zone = __gnu_cxx::__normal_iterator<ConfigRectZone const*,std::vector<ConfigRectZone>>::operator*(&__for_begin_0);
                if ( *(_BYTE *)(((unsigned __int64)&config_rect_zone->env_zone_config.zone_bit_type >> 3) + 0x7FFF8000) != 0
                  && *(_BYTE *)(((unsigned __int64)&config_rect_zone->env_zone_config.zone_bit_type >> 3) + 0x7FFF8000) <= 3 )
                {
                  __asan_report_load4(&config_rect_zone->env_zone_config.zone_bit_type);
                }
                if ( (config_rect_zone->env_zone_config.zone_bit_type & 2) != 0 )
                  std::vector<std::pair<unsigned int,ConfigRectZone>>::emplace_back<unsigned int const&,ConfigRectZone const&>(
                    (std::vector<std::pair<unsigned int,ConfigRectZone>> *const)(v3 + 208),
                    area_id,
                    config_rect_zone,
                    area_id,
                    v11);
                __gnu_cxx::__normal_iterator<ConfigRectZone const*,std::vector<ConfigRectZone>>::operator++(&__for_begin_0);
              }
              std::_Rb_tree_const_iterator<std::pair<unsigned int const,std::vector<ConfigRectZone>>>::operator++(&__for_begin);
            }
            RandGenerator = common::tools::RandomUtils::getRandGenerator();
            M_current = std::vector<std::pair<unsigned int,ConfigRectZone>>::end((std::vector<std::pair<unsigned int,ConfigRectZone>> *const)(v3 + 208))._M_current;
            v14._M_current = std::vector<std::pair<unsigned int,ConfigRectZone>>::begin((std::vector<std::pair<unsigned int,ConfigRectZone>> *const)(v3 + 208))._M_current;
            std::shuffle<__gnu_cxx::__normal_iterator<std::pair<unsigned int,ConfigRectZone> *,std::vector<std::pair<unsigned int,ConfigRectZone>>>,std::mersenne_twister_engine<unsigned long,32ul,624ul,397ul,31ul,2567483615ul,11ul,4294967295ul,7ul,2636928640ul,15ul,4022730752ul,18ul,1812433253ul> &>(
              v14,
              (__gnu_cxx::__normal_iterator<std::pair<unsigned int,ConfigRectZone>*,std::vector<std::pair<unsigned int,ConfigRectZone>> >)M_current,
              RandGenerator);
            v15 = std::__shared_ptr_access<PlayerWorldScene,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<PlayerWorldScene,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 176));
            EncounterComp = PlayerWorldScene::getEncounterComp(v15);
            rand_task_comp_ptr = SceneEncounterComp::findSceneEncounterRandTask(EncounterComp);
            if ( rand_task_comp_ptr )
            {
              std::set<unsigned int>::set((std::set<unsigned int> *const)(v3 + 272));
              __for_range_1 = SceneEncounterRandTask::getRandTaskVec(rand_task_comp_ptr);
              __for_begin_0._M_current = (const ConfigRectZone *)std::vector<SceneEncounterRandTask::RandTaskInfo>::begin(__for_range_1)._M_current;
              __for_end_0._M_current = (const ConfigRectZone *)std::vector<SceneEncounterRandTask::RandTaskInfo>::end(__for_range_1)._M_current;
              while ( __gnu_cxx::operator!=<SceneEncounterRandTask::RandTaskInfo *,std::vector<SceneEncounterRandTask::RandTaskInfo>>(
                        (const __gnu_cxx::__normal_iterator<SceneEncounterRandTask::RandTaskInfo*,std::vector<SceneEncounterRandTask::RandTaskInfo> > *)&__for_begin_0,
                        (const __gnu_cxx::__normal_iterator<SceneEncounterRandTask::RandTaskInfo*,std::vector<SceneEncounterRandTask::RandTaskInfo> > *)&__for_end_0) )
              {
                rand_task_info = __gnu_cxx::__normal_iterator<SceneEncounterRandTask::RandTaskInfo *,std::vector<SceneEncounterRandTask::RandTaskInfo>>::operator*((const __gnu_cxx::__normal_iterator<SceneEncounterRandTask::RandTaskInfo*,std::vector<SceneEncounterRandTask::RandTaskInfo> > *const)&__for_begin_0);
                std::set<unsigned int>::insert((std::set<unsigned int> *const)(v3 + 272), &rand_task_info->rand_task_id);
                __gnu_cxx::__normal_iterator<SceneEncounterRandTask::RandTaskInfo *,std::vector<SceneEncounterRandTask::RandTaskInfo>>::operator++((__gnu_cxx::__normal_iterator<SceneEncounterRandTask::RandTaskInfo*,std::vector<SceneEncounterRandTask::RandTaskInfo> > *const)&__for_begin_0);
              }
              try_count = 0;
LABEL_34:
              if ( try_count > 0x270F )
              {
                std::string::operator=(ret_msg, "cannot find any rand task!");
              }
              else
              {
                __for_range_2 = (std::vector<std::pair<unsigned int,ConfigRectZone>> *)(v3 + 208);
                __for_begin._M_node = (std::_Rb_tree_const_iterator<std::pair<unsigned int const,std::vector<ConfigRectZone> > >::_Base_ptr)std::vector<std::pair<unsigned int,ConfigRectZone>>::begin((std::vector<std::pair<unsigned int,ConfigRectZone>> *const)(v3 + 208))._M_current;
                __for_end._M_node = (std::_Rb_tree_const_iterator<std::pair<unsigned int const,std::vector<ConfigRectZone> > >::_Base_ptr)std::vector<std::pair<unsigned int,ConfigRectZone>>::end(__for_range_2)._M_current;
                while ( 1 )
                {
                  if ( !__gnu_cxx::operator!=<std::pair<unsigned int,ConfigRectZone> *,std::vector<std::pair<unsigned int,ConfigRectZone>>>(
                          (const __gnu_cxx::__normal_iterator<std::pair<unsigned int,ConfigRectZone>*,std::vector<std::pair<unsigned int,ConfigRectZone>> > *)&__for_begin,
                          (const __gnu_cxx::__normal_iterator<std::pair<unsigned int,ConfigRectZone>*,std::vector<std::pair<unsigned int,ConfigRectZone>> > *)&__for_end) )
                  {
                    ++try_count;
                    goto LABEL_34;
                  }
                  v64 = __gnu_cxx::__normal_iterator<std::pair<unsigned int,ConfigRectZone> *,std::vector<std::pair<unsigned int,ConfigRectZone>>>::operator*((const __gnu_cxx::__normal_iterator<std::pair<unsigned int,ConfigRectZone>*,std::vector<std::pair<unsigned int,ConfigRectZone>> > *const)&__for_begin);
                  area_id_0 = (std::tuple_element<0,const std::pair<unsigned int,ConfigRectZone> >::type *)std::get<0ul,unsigned int,ConfigRectZone>(v64);
                  config_rect_zone_0 = (std::tuple_element<1,const std::pair<unsigned int,ConfigRectZone> >::type *)std::get<1ul,unsigned int,ConfigRectZone>(v64);
                  v17 = std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 112));
                  Position = (unsigned __int64)Entity::getPosition((const Entity *const)v17);
                  if ( (char)(Position & 7) >= *(_BYTE *)((Position >> 3) + 0x7FFF8000)
                    && *(_BYTE *)((Position >> 3) + 0x7FFF8000) != 0
                    || *(_BYTE *)(((Position + 11) >> 3) + 0x7FFF8000) != 0
                    && (char)((Position + 11) & 7) >= *(_BYTE *)(((Position + 11) >> 3) + 0x7FFF8000) )
                  {
                    Position = __asan_report_load_n(Position, 12LL);
                  }
                  *(_QWORD *)(v3 + 80) = *(_QWORD *)Position;
                  *(_DWORD *)(v3 + 88) = *(_DWORD *)(Position + 8);
                  SceneComp = Player::getSceneComp(player);
                  old_area_id = PlayerSceneComp::getLevel1AreaId(SceneComp);
                  v20 = std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 112));
                  v21 = v20;
                  if ( *(_BYTE *)(((unsigned __int64)v20 >> 3) + 0x7FFF8000) )
                    __asan_report_load8(v20);
                  v22 = *(_QWORD *)v21->baseclass_0 + 80LL;
                  if ( *(_BYTE *)((v22 >> 3) + 0x7FFF8000) )
                    __asan_report_load8(*(_QWORD *)v21->baseclass_0 + 80LL);
                  v23 = *(void (__fastcall **)(std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *, Vector3 *))v22;
                  if ( *(_BYTE *)(((unsigned __int64)&config_rect_zone_0->high_right >> 3) + 0x7FFF8000) != 0
                    && (char)((((_BYTE)config_rect_zone_0 - 52) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&config_rect_zone_0->high_right >> 3)
                                                                                      + 0x7FFF8000) )
                  {
                    __asan_report_load4(&config_rect_zone_0->high_right);
                  }
                  *(float *)&v24 = config_rect_zone_0->high_right.x;
                  if ( *(_BYTE *)(((unsigned __int64)&config_rect_zone_0->low_left >> 3) + 0x7FFF8000) != 0
                    && *(_BYTE *)(((unsigned __int64)&config_rect_zone_0->low_left >> 3) + 0x7FFF8000) <= 3 )
                  {
                    v24 = __asan_report_load4(&config_rect_zone_0->low_left);
                  }
                  x_ = common::tools::RandomUtils::rand<float>(config_rect_zone_0->low_left.x, *(float *)&v24);
                  if ( *(_BYTE *)(((unsigned __int64)&config_rect_zone_0->high_right.y >> 3) + 0x7FFF8000) != 0
                    && *(_BYTE *)(((unsigned __int64)&config_rect_zone_0->high_right.y >> 3) + 0x7FFF8000) <= 3 )
                  {
                    __asan_report_load4(&config_rect_zone_0->high_right.y);
                  }
                  *(float *)&v25 = config_rect_zone_0->high_right.y;
                  if ( *(_BYTE *)(((unsigned __int64)&config_rect_zone_0->low_left.y >> 3) + 0x7FFF8000) != 0
                    && (char)((((_BYTE)config_rect_zone_0 - 60) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&config_rect_zone_0->low_left.y >> 3)
                                                                                      + 0x7FFF8000) )
                  {
                    v25 = __asan_report_load4(&config_rect_zone_0->low_left.y);
                  }
                  v26 = common::tools::RandomUtils::rand<float>(config_rect_zone_0->low_left.y, *(float *)&v25);
                  Vector3::Vector3(&v75, x_, 0.0, v26);
                  v23(v21, &v75);
                  v27 = Player::getSceneComp(player);
                  if ( *(_BYTE *)(((unsigned __int64)area_id_0 >> 3) + 0x7FFF8000) != 0
                    && (char)(((unsigned __int8)area_id_0 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)area_id_0 >> 3)
                                                                                + 0x7FFF8000) )
                  {
                    __asan_report_load4(area_id_0);
                  }
                  PlayerSceneComp::setLevel1AreaId(v27, *area_id_0);
                  v28 = std::__shared_ptr_access<PlayerWorldScene,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<PlayerWorldScene,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 176));
                  v29 = PlayerWorldScene::getEncounterComp(v28);
                  SceneEncounterComp::resetLastCheckTimer(v29);
                  v30 = std::__shared_ptr_access<PlayerWorldScene,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<PlayerWorldScene,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 176));
                  v31 = PlayerWorldScene::getEncounterComp(v30);
                  Now = common::tools::TimeUtils::getNow();
                  SceneEncounterComp::setLastRefreshTime(v31, Now);
                  v33 = std::__shared_ptr_access<PlayerWorldScene,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<PlayerWorldScene,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 176));
                  v34 = PlayerWorldScene::getEncounterComp(v33);
                  v35 = v34;
                  if ( *(_BYTE *)(((unsigned __int64)v34 >> 3) + 0x7FFF8000) )
                    __asan_report_load8(v34);
                  v36 = (unsigned __int64)(v35->_vptr_SceneCompBase + 5);
                  if ( *(_BYTE *)((v36 >> 3) + 0x7FFF8000) )
                    __asan_report_load8(v35->_vptr_SceneCompBase + 5);
                  v37 = *(void (__fastcall **)(SceneEncounterComp *, _QWORD))v36;
                  v38 = common::tools::TimeUtils::getNow();
                  v37(v35, v38);
                  RandTaskVec = SceneEncounterRandTask::getRandTaskVec(rand_task_comp_ptr);
                  v40 = std::vector<SceneEncounterRandTask::RandTaskInfo>::size(RandTaskVec);
                  if ( v40 > std::set<unsigned int>::size((const std::set<unsigned int> *const)(v3 + 272)) )
                    break;
                  __gnu_cxx::__normal_iterator<std::pair<unsigned int,ConfigRectZone> *,std::vector<std::pair<unsigned int,ConfigRectZone>>>::operator++((__gnu_cxx::__normal_iterator<std::pair<unsigned int,ConfigRectZone>*,std::vector<std::pair<unsigned int,ConfigRectZone>> > *const)&__for_begin);
                }
                __for_range_3 = SceneEncounterRandTask::getRandTaskVec(rand_task_comp_ptr);
                __for_begin_0._M_current = (const ConfigRectZone *)std::vector<SceneEncounterRandTask::RandTaskInfo>::begin(__for_range_3)._M_current;
                __for_end_0._M_current = (const ConfigRectZone *)std::vector<SceneEncounterRandTask::RandTaskInfo>::end(__for_range_3)._M_current;
                while ( __gnu_cxx::operator!=<SceneEncounterRandTask::RandTaskInfo *,std::vector<SceneEncounterRandTask::RandTaskInfo>>(
                          (const __gnu_cxx::__normal_iterator<SceneEncounterRandTask::RandTaskInfo*,std::vector<SceneEncounterRandTask::RandTaskInfo> > *)&__for_begin_0,
                          (const __gnu_cxx::__normal_iterator<SceneEncounterRandTask::RandTaskInfo*,std::vector<SceneEncounterRandTask::RandTaskInfo> > *)&__for_end_0) )
                {
                  rand_task_info_0 = __gnu_cxx::__normal_iterator<SceneEncounterRandTask::RandTaskInfo *,std::vector<SceneEncounterRandTask::RandTaskInfo>>::operator*((const __gnu_cxx::__normal_iterator<SceneEncounterRandTask::RandTaskInfo*,std::vector<SceneEncounterRandTask::RandTaskInfo> > *const)&__for_begin_0);
                  if ( !common::tools::MiscUtils::isContains<std::set<unsigned int>,unsigned int>(
                          (std::set<unsigned int> *)(v3 + 272),
                          &rand_task_info_0->rand_task_id) )
                  {
                    v41 = std::__shared_ptr_access<PlayerWorldScene,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<PlayerWorldScene,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 176));
                    v42 = PlayerWorldScene::getEncounterComp(v41);
                    if ( *(_BYTE *)(((unsigned __int64)rand_task_info_0 >> 3) + 0x7FFF8000) != 0
                      && (char)(((unsigned __int8)rand_task_info_0 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)rand_task_info_0 >> 3)
                                                                                         + 0x7FFF8000) )
                    {
                      __asan_report_load4(rand_task_info_0);
                    }
                    SceneEncounterComp::finishRandTask(v42, rand_task_info_0->rand_task_id, 1);
                    v43 = std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 112));
                    if ( *(_BYTE *)(((unsigned __int64)v43 >> 3) + 0x7FFF8000) )
                      __asan_report_load8(v43);
                    v44 = *(_QWORD *)v43->baseclass_0 + 80LL;
                    if ( *(_BYTE *)((v44 >> 3) + 0x7FFF8000) )
                      __asan_report_load8(*(_QWORD *)v43->baseclass_0 + 80LL);
                    (*(void (__fastcall **)(std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *, unsigned __int64))v44)(
                      v43,
                      v3 + 80);
                    v45 = Player::getSceneComp(player);
                    PlayerSceneComp::setLevel1AreaId(v45, old_area_id);
                    BasicComp = Player::getBasicComp(player);
                    v47 = Player::getBasicComp(player);
                    EncounterFinishCount = PlayerBasicComp::getEncounterFinishCount(v47);
                    PlayerBasicComp::setEncounterFinishCount(BasicComp, EncounterFinishCount + 1);
                  }
                  __gnu_cxx::__normal_iterator<SceneEncounterRandTask::RandTaskInfo *,std::vector<SceneEncounterRandTask::RandTaskInfo>>::operator++((__gnu_cxx::__normal_iterator<SceneEncounterRandTask::RandTaskInfo*,std::vector<SceneEncounterRandTask::RandTaskInfo> > *const)&__for_begin_0);
                }
              }
              std::set<unsigned int>::~set((std::set<unsigned int> *const)(v3 + 272));
            }
            else
            {
              std::string::operator=(ret_msg, "findSceneEncounterRandTask fail!");
            }
            std::vector<std::pair<unsigned int,ConfigRectZone>>::~vector((std::vector<std::pair<unsigned int,ConfigRectZone>> *const)(v3 + 208));
          }
          else
          {
            std::string::operator=(ret_msg, "scene_json_config_ptr is null!");
          }
        }
        std::shared_ptr<PlayerWorldScene>::~shared_ptr((std::shared_ptr<PlayerWorldScene> *const)(v3 + 176));
      }
      std::shared_ptr<PlayerWorld>::~shared_ptr((std::shared_ptr<PlayerWorld> *const)(v3 + 144));
    }
    std::shared_ptr<Avatar>::~shared_ptr((std::shared_ptr<Avatar> *const)(v3 + 112));
    SimulationGuard::~SimulationGuard((SimulationGuard *const)(v3 + 48));
  }
  result = 0;
  if ( v76 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8010) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8018) = 0LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8020) = 0;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8028) = 0;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8020) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8028) = -168430091;
  }
  return result;
};

// Line 8568: range 0000000017D77878-0000000017D7791A
void __cdecl gmSimulateExpeditionRegister::gmSimulateExpeditionRegister(gmSimulateExpeditionRegister *const this)
{
  std::function<int(GmContext&,const std::vector<std::string>&,std::string&)> *v1; // rax
  std::allocator<char> __a; // [rsp+1Fh] [rbp-31h] BYREF
  std::string __k; // [rsp+20h] [rbp-30h] BYREF

  std::allocator<char>::allocator(&__a);
  std::string::basic_string<std::allocator<char>>(&__k, "SIMULATE_EXPEDITION", &__a);
  v1 = std::unordered_map<std::string,std::function<int ()(GmContext &,std::vector<std::string> const&,std::string&)>>::operator[](
         &GmUtils::op_func_map[abi:cxx11],
         &__k);
  std::function<int ()(GmContext &,std::vector<std::string> const&,std::string&)>::operator=<int (&)(GmContext &,std::vector<std::string> const&,std::string&)>(
    v1,
    (int (*)(GmContext *, const std::vector<std::string> *, std::string *))gmSimulateExpedition);
  std::string::~string(&__k);
  std::allocator<char>::~allocator(&__a);
};

// Line 8569: range 0000000017C08A0A-0000000017C0936E
int32_t __cdecl gmSimulateExpedition(
        GmContext *context,
        const std::vector<std::string> *param_vec,
        std::string *ret_msg)
{
  int32_t v3; // r15d
  unsigned __int64 v4; // r13
  __int64 v5; // rax
  _DWORD *v6; // r12
  PlayerAvatarComp *AvatarComp; // r14
  unsigned __int64 *M_current; // r14
  std::vector<long unsigned int>::iterator v9; // rax
  uint64_t *v10; // rax
  PlayerAvatarComp *v11; // rax
  int v12; // r14d
  std::__shared_ptr_access<FormalAvatar,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v13; // rax
  ExpeditionComp *ExpeditionComp; // rax
  std::__shared_ptr_access<FormalAvatar,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v15; // rax
  ExpeditionComp *v16; // rax
  std::__shared_ptr_access<FormalAvatar,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v17; // rax
  ExpeditionComp *v18; // rax
  int v19; // r14d
  int32_t result; // eax
  std::mt19937 *__g; // [rsp+10h] [rbp-420h]
  std::vector<long unsigned int>::iterator __for_begin; // [rsp+38h] [rbp-3F8h] BYREF
  std::vector<long unsigned int>::iterator __for_end; // [rsp+40h] [rbp-3F0h] BYREF
  Player *player; // [rsp+48h] [rbp-3E8h]
  std::vector<long unsigned int> *__for_range; // [rsp+50h] [rbp-3E0h]
  uint64_t avatar_guid; // [rsp+58h] [rbp-3D8h]
  std::string __lhs; // [rsp+60h] [rbp-3D0h] BYREF
  std::string __rhs; // [rsp+80h] [rbp-3B0h] BYREF
  std::string v30; // [rsp+A0h] [rbp-390h] BYREF
  std::string v31; // [rsp+C0h] [rbp-370h] BYREF
  std::string v32; // [rsp+E0h] [rbp-350h] BYREF
  std::string v33; // [rsp+100h] [rbp-330h] BYREF
  std::string v34; // [rsp+120h] [rbp-310h] BYREF
  std::string v35; // [rsp+140h] [rbp-2F0h] BYREF
  std::function<ForeachPolicy(const FormalAvatar&)> p_func; // [rsp+160h] [rbp-2D0h] BYREF
  char v37[688]; // [rsp+180h] [rbp-2B0h] BYREF

  v4 = (unsigned __int64)v37;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v5 = __asan_stack_malloc_4(640LL);
    if ( v5 )
      v4 = v5;
  }
  *(_QWORD *)v4 = 1102416563LL;
  *(_QWORD *)(v4 + 8) = "9 32 4 18 expedition_id:8572 48 4 14 hour_time:8573 64 8 21 simulation_guard:8571 96 16 22 forma"
                        "l_avatar_ptr:8588 128 16 19 avatar_handler:8598 160 24 20 avatar_guid_vec:8579 224 40 8 req:8593"
                        " 304 96 8 rsp:8597 432 144 8 rsp:8604";
  *(_QWORD *)(v4 + 16) = gmSimulateExpedition;
  v6 = (_DWORD *)(v4 >> 3);
  v6[536862720] = -235802127;
  v6[536862721] = -234556924;
  v6[536862722] = -218959360;
  v6[536862723] = -219021312;
  v6[536862724] = -219021312;
  v6[536862725] = -234881024;
  v6[536862726] = -218959118;
  v6[536862728] = -218959360;
  v6[536862729] = 62194;
  v6[536862732] = -219021312;
  v6[536862733] = 62194;
  v6[536862738] = -202116109;
  v6[536862739] = -202116109;
  if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
    __asan_report_load8(&context->player);
  player = context->player;
  SimulationGuard::SimulationGuard((SimulationGuard *const)(v4 + 64), player);
  *(_DWORD *)(v4 + 32) = 0;
  *(_DWORD *)(v4 + 48) = 0;
  if ( common::tools::StringUtils::strVecToNum<0u,unsigned int,unsigned int &>(
         param_vec,
         (unsigned int *)(v4 + 32),
         (unsigned int *)(v4 + 48),
         (unsigned int *)(v4 + 32)) )
  {
    std::string::operator=(ret_msg, "param parse error!");
    v3 = 0;
  }
  else
  {
    std::vector<unsigned long>::vector((std::vector<long unsigned int> *const)(v4 + 160));
    AvatarComp = Player::getAvatarComp(player);
    std::function<ForeachPolicy ()(FormalAvatar const&)>::function<gmSimulateExpedition(GmContext &,std::vector<std::string> const&,std::string&)::{lambda(FormalAvatar const&)#1},void,void>(
      &p_func,
      (gmSimulateExpedition::<lambda(const FormalAvatar&)>)(v4 + 160));
    PlayerAvatarComp::foreachFormalAvatar(AvatarComp, &p_func);
    std::function<ForeachPolicy ()(FormalAvatar const&)>::~function(&p_func);
    __g = common::tools::RandomUtils::getRandGenerator();
    M_current = std::vector<unsigned long>::end((std::vector<long unsigned int> *const)(v4 + 160))._M_current;
    v9._M_current = std::vector<unsigned long>::begin((std::vector<long unsigned int> *const)(v4 + 160))._M_current;
    std::shuffle<__gnu_cxx::__normal_iterator<unsigned long *,std::vector<unsigned long>>,std::mersenne_twister_engine<unsigned long,32ul,624ul,397ul,31ul,2567483615ul,11ul,4294967295ul,7ul,2636928640ul,15ul,4022730752ul,18ul,1812433253ul> &>(
      v9,
      (__gnu_cxx::__normal_iterator<long unsigned int*,std::vector<long unsigned int> >)M_current,
      __g);
    __for_range = (std::vector<long unsigned int> *)(v4 + 160);
    __for_begin._M_current = std::vector<unsigned long>::begin((std::vector<long unsigned int> *const)(v4 + 160))._M_current;
    __for_end._M_current = std::vector<unsigned long>::end((std::vector<long unsigned int> *const)(v4 + 160))._M_current;
    while ( __gnu_cxx::operator!=<unsigned long *,std::vector<unsigned long>>(&__for_begin, &__for_end) )
    {
      v10 = __gnu_cxx::__normal_iterator<unsigned long *,std::vector<unsigned long>>::operator*(&__for_begin);
      if ( *(_BYTE *)(((unsigned __int64)v10 >> 3) + 0x7FFF8000) )
        __asan_report_load8(v10);
      avatar_guid = *v10;
      v11 = Player::getAvatarComp(player);
      PlayerAvatarComp::findFormalAvatar((const PlayerAvatarComp *const)(v4 + 96), (uint64_t)v11, avatar_guid);
      if ( std::operator==<FormalAvatar>(0LL, (const std::shared_ptr<FormalAvatar> *)(v4 + 96)) )
      {
        v12 = 0;
      }
      else
      {
        proto::AvatarExpeditionStartReq::AvatarExpeditionStartReq((proto::AvatarExpeditionStartReq *const)(v4 + 224));
        proto::AvatarExpeditionStartReq::set_avatar_guid(
          (proto::AvatarExpeditionStartReq *const)(v4 + 224),
          avatar_guid);
        proto::AvatarExpeditionStartReq::set_exp_id(
          (proto::AvatarExpeditionStartReq *const)(v4 + 224),
          *(_DWORD *)(v4 + 32));
        proto::AvatarExpeditionStartReq::set_hour_time(
          (proto::AvatarExpeditionStartReq *const)(v4 + 224),
          *(_DWORD *)(v4 + 48));
        proto::AvatarExpeditionStartRsp::AvatarExpeditionStartRsp((proto::AvatarExpeditionStartRsp *const)(v4 + 304));
        ZN13AvatarHandlerCI217PlayerHandlerBaseER6Player((AvatarHandler *const)(v4 + 128), player);
        if ( AvatarHandler::onAvatarExpeditionStartReq(
               (AvatarHandler *const)(v4 + 128),
               (const proto::AvatarExpeditionStartReq *)(v4 + 224),
               (proto::AvatarExpeditionStartRsp *)(v4 + 304)) )
        {
          v19 = 1;
        }
        else
        {
          Player::sendProto(player, (const google::protobuf::Message *)(v4 + 304));
          v13 = std::__shared_ptr_access<FormalAvatar,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<FormalAvatar,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 96));
          ExpeditionComp = FormalAvatar::getExpeditionComp(v13);
          ExpeditionComp::notifyClient(ExpeditionComp);
          v15 = std::__shared_ptr_access<FormalAvatar,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<FormalAvatar,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 96));
          v16 = FormalAvatar::getExpeditionComp(v15);
          ExpeditionComp::finishExpedition(v16, 1);
          proto::AvatarExpeditionGetRewardRsp::AvatarExpeditionGetRewardRsp((proto::AvatarExpeditionGetRewardRsp *const)(v4 + 432));
          v17 = std::__shared_ptr_access<FormalAvatar,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<FormalAvatar,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 96));
          v18 = FormalAvatar::getExpeditionComp(v17);
          ExpeditionComp::takeReward(v18, (proto::AvatarExpeditionGetRewardRsp *)(v4 + 432));
          std::to_string(&v35, *(_DWORD *)(v4 + 48));
          std::to_string(&v32, *(_DWORD *)(v4 + 32));
          std::to_string(&__rhs, avatar_guid);
          std::literals::string_literals::operator"" s[abi:cxx11](&__lhs, "avatar_guid:", 0xCuLL);
          std::operator+<char>(&v30, &__lhs, &__rhs);
          std::operator+<char>(&v31, &v30, " expedition_id:");
          std::operator+<char>(&v33, &v31, &v32);
          std::operator+<char>(&v34, &v33, " htime:");
          std::operator+<char>((std::string *)&p_func, &v34, &v35);
          std::string::operator=(ret_msg, &p_func);
          std::string::~string(&p_func);
          std::string::~string(&v34);
          std::string::~string(&v33);
          std::string::~string(&v31);
          std::string::~string(&v30);
          std::string::~string(&__lhs);
          std::string::~string(&__rhs);
          std::string::~string(&v32);
          std::string::~string(&v35);
          v3 = 0;
          proto::AvatarExpeditionGetRewardRsp::~AvatarExpeditionGetRewardRsp((proto::AvatarExpeditionGetRewardRsp *const)(v4 + 432));
          v19 = 0;
        }
        AvatarHandler::~AvatarHandler((AvatarHandler *const)(v4 + 128));
        proto::AvatarExpeditionStartRsp::~AvatarExpeditionStartRsp((proto::AvatarExpeditionStartRsp *const)(v4 + 304));
        proto::AvatarExpeditionStartReq::~AvatarExpeditionStartReq((proto::AvatarExpeditionStartReq *const)(v4 + 224));
        if ( v19 == 1 )
          v12 = 2;
        else
          v12 = 1;
      }
      std::shared_ptr<FormalAvatar>::~shared_ptr((std::shared_ptr<FormalAvatar> *const)(v4 + 96));
      if ( v12 && v12 != 2 )
        goto LABEL_24;
      __gnu_cxx::__normal_iterator<unsigned long *,std::vector<unsigned long>>::operator++(&__for_begin);
    }
    std::string::operator=(ret_msg, "cannot find any available expedition!");
    v3 = 0;
LABEL_24:
    std::vector<unsigned long>::~vector((std::vector<long unsigned int> *const)(v4 + 160));
  }
  SimulationGuard::~SimulationGuard((SimulationGuard *const)(v4 + 64));
  result = v3;
  if ( v37 == (char *)v4 )
  {
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8008) = 0LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8010) = 0LL;
    *(_DWORD *)((v4 >> 3) + 0x7FFF8018) = 0;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8020) = 0LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8030) = 0LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8048) = 0LL;
  }
  else
  {
    *(_QWORD *)v4 = 1172321806LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8020) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8028) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8030) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8038) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8040) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8048) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 8580: range 0000000017C089A6-0000000017C08A09
ForeachPolicy __cdecl gmSimulateExpedition(GmContext &,std::vector<std::string> const&,std::string&)::{lambda(FormalAvatar const&)#1}::operator()(
        const gmSimulateExpedition::<lambda(const FormalAvatar&)> *const __closure,
        const FormalAvatar *formal_avatar)
{
  std::vector<long unsigned int> *avatar_guid_vec; // rbx
  std::vector<long unsigned int>::value_type __x[3]; // [rsp+18h] [rbp-18h] BYREF

  if ( *(_BYTE *)(((unsigned __int64)__closure >> 3) + 0x7FFF8000) )
    __asan_report_load8(__closure);
  avatar_guid_vec = __closure->__avatar_guid_vec;
  __x[0] = Avatar::getGuid(formal_avatar);
  std::vector<unsigned long>::push_back(avatar_guid_vec, __x);
  return 0;
};

// Line 8616: range 0000000017D7791C-0000000017D779BE
void __cdecl gmSimulateKillMonsterRegister::gmSimulateKillMonsterRegister(gmSimulateKillMonsterRegister *const this)
{
  std::function<int(GmContext&,const std::vector<std::string>&,std::string&)> *v1; // rax
  std::allocator<char> __a; // [rsp+1Fh] [rbp-31h] BYREF
  std::string __k; // [rsp+20h] [rbp-30h] BYREF

  std::allocator<char>::allocator(&__a);
  std::string::basic_string<std::allocator<char>>(&__k, "SIMULATE_KILL_MONSTER", &__a);
  v1 = std::unordered_map<std::string,std::function<int ()(GmContext &,std::vector<std::string> const&,std::string&)>>::operator[](
         &GmUtils::op_func_map[abi:cxx11],
         &__k);
  std::function<int ()(GmContext &,std::vector<std::string> const&,std::string&)>::operator=<int (&)(GmContext &,std::vector<std::string> const&,std::string&)>(
    v1,
    (int (*)(GmContext *, const std::vector<std::string> *, std::string *))gmSimulateKillMonster);
  std::string::~string(&__k);
  std::allocator<char>::~allocator(&__a);
};

// Line 8617: range 0000000017C093D3-0000000017C09F9B
int32_t __cdecl gmSimulateKillMonster(
        GmContext *context,
        const std::vector<std::string> *param_vec,
        std::string *ret_msg)
{
  unsigned __int64 v3; // r13
  __int64 v4; // rax
  _DWORD *v5; // r12
  int32_t v6; // r14d
  const char *v7; // rax
  std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v8; // rax
  PlayerAvatarComp *AvatarComp; // r14
  std::vector<unsigned int>::size_type v10; // rax
  float v11; // xmm0_4
  PlayerBasicComp *BasicComp; // rax
  unsigned int *M_current; // r14
  std::vector<unsigned int>::iterator v14; // rax
  std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v15; // rax
  uint32_t drop_count; // edx
  PlayerItemComp *ItemComp; // rax
  int32_t result; // eax
  int monster_level; // [rsp+28h] [rbp-308h]
  uint32_t model_index; // [rsp+2Ch] [rbp-304h]
  unsigned int player_level; // [rsp+34h] [rbp-2FCh]
  __gnu_cxx::__normal_iterator<unsigned int*,std::vector<unsigned int> > v23; // [rsp+38h] [rbp-2F8h] BYREF
  __gnu_cxx::__normal_iterator<unsigned int*,std::vector<unsigned int> > v24; // [rsp+40h] [rbp-2F0h] BYREF
  __gnu_cxx::__normal_iterator<unsigned int*,std::vector<unsigned int> > __i; // [rsp+48h] [rbp-2E8h] BYREF
  std::vector<unsigned int> v26; // [rsp+50h] [rbp-2E0h] BYREF
  const data::MonsterDropExcelConfig *drop_config_ptr; // [rsp+68h] [rbp-2C8h]
  std::shared_ptr<Config> v28; // [rsp+70h] [rbp-2C0h] BYREF
  std::string v29; // [rsp+80h] [rbp-2B0h] BYREF
  std::string __lhs; // [rsp+A0h] [rbp-290h] BYREF
  std::string v31; // [rsp+C0h] [rbp-270h] BYREF
  std::string v32; // [rsp+E0h] [rbp-250h] BYREF
  std::string v33; // [rsp+100h] [rbp-230h] BYREF
  std::string v34; // [rsp+120h] [rbp-210h] BYREF
  std::string v35; // [rsp+140h] [rbp-1F0h] BYREF
  std::string __rhs; // [rsp+160h] [rbp-1D0h] BYREF
  char v37[432]; // [rsp+180h] [rbp-1B0h] BYREF

  v3 = (unsigned __int64)v37;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_3(384LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "8 32 4 15 monster_id:8620 48 4 13 kill_num:8621 64 8 21 simulation_guard:8619 96 8 18 output_res"
                        "ult:8665 128 24 21 avatar_level_vec:8635 192 24 18 action_reason:8663 256 24 19 item_param_vec:8"
                        "664 320 32 19 monster_id_str:8627";
  *(_QWORD *)(v3 + 16) = gmSimulateKillMonster;
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = -234556924;
  v5[536862722] = -218959360;
  v5[536862723] = -218959360;
  v5[536862724] = -234881024;
  v5[536862725] = -218959118;
  v5[536862726] = -234881024;
  v5[536862727] = -218959118;
  v5[536862728] = -234881024;
  v5[536862729] = -218959118;
  v5[536862731] = -202116109;
  if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
    __asan_report_load8(&context->player);
  v26._M_impl._M_finish = (std::_Vector_base<unsigned int>::pointer)context->player;
  SimulationGuard::SimulationGuard((SimulationGuard *const)(v3 + 64), (Player *)v26._M_impl._M_finish);
  *(_DWORD *)(v3 + 32) = 0;
  *(_DWORD *)(v3 + 48) = 0;
  if ( common::tools::StringUtils::strVecToNum<0u,unsigned int,unsigned int &>(
         param_vec,
         (unsigned int *)(v3 + 32),
         (unsigned int *)(v3 + 48),
         (unsigned int *)(v3 + 32)) )
  {
    std::string::operator=(ret_msg, "param parse error!");
    v6 = 0;
  }
  else
  {
    std::to_string((std::string *)(v3 + 320), *(_DWORD *)(v3 + 32));
    std::string::substr(&v33, v3 + 320, 1LL, 5LL);
    v7 = (const char *)std::string::c_str(&v33);
    model_index = atol(v7);
    std::string::~string(&v33);
    ServiceBox::findService<GameserverService>();
    GameserverService::getConfig((GameserverService *const)&v28);
    v8 = std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false> *const)&v28);
    v26._M_impl._M_end_of_storage = (std::_Vector_base<unsigned int>::pointer)data::MonsterExcelConfigMgrBase::findMonsterRelationshipExcelConfig(
                                                                                &v8->design_config.txt_config_mgr.monster_config_mgr,
                                                                                model_index);
    std::shared_ptr<Config>::~shared_ptr(&v28);
    if ( v26._M_impl._M_end_of_storage )
    {
      std::vector<unsigned int>::vector((std::vector<unsigned int> *const)(v3 + 128));
      AvatarComp = Player::getAvatarComp((Player *const)v26._M_impl._M_finish);
      std::function<ForeachPolicy ()(Avatar &)>::function<gmSimulateKillMonster(GmContext &,std::vector<std::string> const&,std::string&)::{lambda(Avatar &)#1},void,void>(
        (std::function<ForeachPolicy(Avatar&)> *const)&__rhs,
        (gmSimulateKillMonster::<lambda(Avatar&)>)(v3 + 128));
      PlayerAvatarComp::foreachMyAvatarInSceneTeam(AvatarComp, (std::function<ForeachPolicy(Avatar&)> *)&__rhs);
      std::function<ForeachPolicy ()(Avatar &)>::~function((std::function<ForeachPolicy(Avatar&)> *const)&__rhs);
      std::vector<unsigned int>::rend((std::vector<unsigned int> *const)(v3 + 96));
      std::vector<unsigned int>::rbegin(&v26);
      std::sort<std::reverse_iterator<__gnu_cxx::__normal_iterator<unsigned int *,std::vector<unsigned int>>>>(
        (std::reverse_iterator<__gnu_cxx::__normal_iterator<unsigned int*,std::vector<unsigned int> > > *)&v26,
        (std::reverse_iterator<__gnu_cxx::__normal_iterator<unsigned int*,std::vector<unsigned int> > > *)(v3 + 96));
      if ( std::vector<unsigned int>::size((const std::vector<unsigned int> *const)(v3 + 128)) > 2 )
      {
        __i._M_current = std::vector<unsigned int>::end((std::vector<unsigned int> *const)(v3 + 128))._M_current;
        __gnu_cxx::__normal_iterator<unsigned int const*,std::vector<unsigned int>>::__normal_iterator<unsigned int *>(
          (__gnu_cxx::__normal_iterator<unsigned int const*,std::vector<unsigned int> > *const)(v3 + 96),
          &__i);
        v23._M_current = std::vector<unsigned int>::begin((std::vector<unsigned int> *const)(v3 + 128))._M_current;
        v24._M_current = __gnu_cxx::__normal_iterator<unsigned int *,std::vector<unsigned int>>::operator+(&v23, 2LL)._M_current;
        __gnu_cxx::__normal_iterator<unsigned int const*,std::vector<unsigned int>>::__normal_iterator<unsigned int *>(
          (__gnu_cxx::__normal_iterator<unsigned int const*,std::vector<unsigned int> > *const)&v26,
          &v24);
        std::vector<unsigned int>::erase(
          (std::vector<unsigned int> *const)(v3 + 128),
          (std::vector<unsigned int>::const_iterator)v26._M_impl._M_start,
          *(std::vector<unsigned int>::const_iterator *)(v3 + 96));
      }
      v10 = std::vector<unsigned int>::size((const std::vector<unsigned int> *const)(v3 + 128));
      if ( (v10 & 0x8000000000000000LL) != 0LL )
        v11 = (float)(int)(v10 & 1 | (v10 >> 1)) + (float)(int)(v10 & 1 | (v10 >> 1));
      else
        v11 = (float)(int)v10;
      BasicComp = Player::getBasicComp((Player *const)v26._M_impl._M_finish);
      player_level = PlayerBasicComp::getLevel(BasicComp);
      if ( v11 == 0.0 )
      {
        monster_level = player_level;
      }
      else
      {
        M_current = std::vector<unsigned int>::end((std::vector<unsigned int> *const)(v3 + 128))._M_current;
        v14._M_current = std::vector<unsigned int>::begin((std::vector<unsigned int> *const)(v3 + 128))._M_current;
        monster_level = (int)(float)((float)((float)(int)std::accumulate<__gnu_cxx::__normal_iterator<unsigned int *,std::vector<unsigned int>>,unsigned int>(
                                                           v14,
                                                           (__gnu_cxx::__normal_iterator<unsigned int*,std::vector<unsigned int> >)M_current,
                                                           0)
                                           / v11)
                                   + 0.5);
      }
      ServiceBox::findService<GameserverService>();
      GameserverService::getConfig((GameserverService *const)&v28);
      v15 = std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false> *const)&v28);
      drop_config_ptr = DropExcelConfigMgr::findMonsterDropConfig(
                          &v15->design_config.txt_config_mgr.drop_config_mgr,
                          monster_level,
                          (const std::string *)(v26._M_impl._M_end_of_storage + 4));
      std::shared_ptr<Config>::~shared_ptr(&v28);
      if ( drop_config_ptr )
      {
        ActionReason::ActionReason((ActionReason *const)(v3 + 192), ACTION_REASON_GM, ITEM_LIMIT_GM);
        std::vector<ItemParam>::vector((std::vector<ItemParam> *const)(v3 + 256));
        if ( *(_BYTE *)(((unsigned __int64)&drop_config_ptr->drop_count >> 3) + 0x7FFF8000) != 0
          && (char)((((_BYTE)drop_config_ptr + 52) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&drop_config_ptr->drop_count >> 3)
                                                                         + 0x7FFF8000) )
        {
          __asan_report_load4(&drop_config_ptr->drop_count);
        }
        drop_count = drop_config_ptr->drop_count;
        if ( *(_BYTE *)(((unsigned __int64)&drop_config_ptr->drop_id >> 3) + 0x7FFF8000) != 0
          && *(_BYTE *)(((unsigned __int64)&drop_config_ptr->drop_id >> 3) + 0x7FFF8000) <= 3 )
        {
          __asan_report_load4(&drop_config_ptr->drop_id);
        }
        *(OutputResult *)(v3 + 96) = DropUtils::dropItems(
                                       (Player *)v26._M_impl._M_finish,
                                       drop_config_ptr->drop_id,
                                       drop_count,
                                       (const ActionReason *)(v3 + 192),
                                       (std::vector<ItemParam> *)(v3 + 256));
        if ( *(_DWORD *)(v3 + 96) )
        {
          std::to_string(&v35, drop_config_ptr->drop_count);
          std::to_string(&v32, drop_config_ptr->drop_id);
          std::operator+<char>(&v33, "drop fail, drop_id:", &v32);
          std::operator+<char>(&v34, &v33, " drop_count:");
          std::operator+<char>(&__rhs, &v34, &v35);
          std::string::operator=(ret_msg, &__rhs);
          std::string::~string(&__rhs);
          std::string::~string(&v34);
          std::string::~string(&v33);
          std::string::~string(&v32);
          std::string::~string(&v35);
          v6 = 0;
        }
        else
        {
          ItemComp = Player::getItemComp((Player *const)v26._M_impl._M_finish);
          v6 = PlayerItemComp::addItemBatch(
                 ItemComp,
                 (const std::vector<ItemParam> *)(v3 + 256),
                 (const ActionReason *)(v3 + 192),
                 0LL);
        }
        std::vector<ItemParam>::~vector((std::vector<ItemParam> *const)(v3 + 256));
      }
      else
      {
        std::to_string(&__rhs, monster_level);
        std::to_string(&v32, *(_DWORD *)(v3 + 32));
        std::to_string(&v29, player_level);
        std::operator+<char>(&__lhs, "cannot find drop config for player_level:", &v29);
        std::operator+<char>(&v31, &__lhs, " monster_id:");
        std::operator+<char>(&v33, &v31, &v32);
        std::operator+<char>(&v34, &v33, " monster_level:");
        std::operator+<char>(&v35, &v34, &__rhs);
        std::string::operator=(ret_msg, &v35);
        std::string::~string(&v35);
        std::string::~string(&v34);
        std::string::~string(&v33);
        std::string::~string(&v31);
        std::string::~string(&__lhs);
        std::string::~string(&v29);
        std::string::~string(&v32);
        std::string::~string(&__rhs);
        v6 = 0;
      }
      std::vector<unsigned int>::~vector((std::vector<unsigned int> *const)(v3 + 128));
    }
    else
    {
      std::to_string(&__rhs, *(_DWORD *)(v3 + 32));
      std::operator+<char>(&v34, "cannot find model index config for monster_id:", &__rhs);
      std::string::operator=(ret_msg, &v34);
      std::string::~string(&v34);
      std::string::~string(&__rhs);
      v6 = 0;
    }
    std::string::~string((void *)(v3 + 320));
  }
  SimulationGuard::~SimulationGuard((SimulationGuard *const)(v3 + 64));
  result = v6;
  if ( v37 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8010) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8018) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8020) = 0LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF802C) = 0;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8020) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8028) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 8636: range 0000000017C09370-0000000017C093D2
ForeachPolicy __cdecl gmSimulateKillMonster(GmContext &,std::vector<std::string> const&,std::string&)::{lambda(Avatar &)#1}::operator()(
        const gmSimulateKillMonster::<lambda(Avatar&)> *const __closure,
        Avatar *avatar)
{
  std::vector<unsigned int> *avatar_level_vec; // rbx
  std::vector<unsigned int>::value_type __x[5]; // [rsp+1Ch] [rbp-14h] BYREF

  if ( *(_BYTE *)(((unsigned __int64)__closure >> 3) + 0x7FFF8000) )
    __asan_report_load8(__closure);
  avatar_level_vec = __closure->__avatar_level_vec;
  __x[0] = Creature::getLevel(avatar);
  std::vector<unsigned int>::push_back(avatar_level_vec, __x);
  return 0;
};

// Line 8675: range 0000000017D779C0-0000000017D77A62
void __cdecl procSimulateAddPlayertimeRegister::procSimulateAddPlayertimeRegister(
        procSimulateAddPlayertimeRegister *const this)
{
  std::function<int(GmContext&,const std::vector<std::string>&,std::string&)> *v1; // rax
  std::allocator<char> __a; // [rsp+1Fh] [rbp-31h] BYREF
  std::string __k; // [rsp+20h] [rbp-30h] BYREF

  std::allocator<char>::allocator(&__a);
  std::string::basic_string<std::allocator<char>>(&__k, "SIMULATE_ADD_PLAYER_TIME", &__a);
  v1 = std::unordered_map<std::string,std::function<int ()(GmContext &,std::vector<std::string> const&,std::string&)>>::operator[](
         &GmUtils::op_func_map[abi:cxx11],
         &__k);
  std::function<int ()(GmContext &,std::vector<std::string> const&,std::string&)>::operator=<int (&)(GmContext &,std::vector<std::string> const&,std::string&)>(
    v1,
    (int (*)(GmContext *, const std::vector<std::string> *, std::string *))procSimulateAddPlayertime);
  std::string::~string(&__k);
  std::allocator<char>::~allocator(&__a);
};

// Line 8676: range 0000000017C09F9C-0000000017C0A1D8
int32_t __cdecl procSimulateAddPlayertime(
        GmContext *context,
        const std::vector<std::string> *param_vec,
        std::string *ret_msg)
{
  unsigned __int64 v3; // rbx
  __int64 v4; // rax
  _DWORD *v5; // r12
  PlayerBasicComp *BasicComp; // r14
  PlayerBasicComp *v7; // rax
  uint64_t PlayerTimeMs; // rax
  PlayerBasicComp *v9; // r14
  PlayerBasicComp *v10; // rax
  uint32_t DailyPlayTime; // eax
  int32_t result; // eax
  Player *player; // [rsp+28h] [rbp-98h]
  char v15[144]; // [rsp+30h] [rbp-90h] BYREF

  v3 = (unsigned __int64)v15;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_1(96LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "2 48 4 18 delta_seconds:8679 64 8 21 simulation_guard:8678";
  *(_QWORD *)(v3 + 16) = procSimulateAddPlayertime;
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = -234556943;
  v5[536862722] = -202116352;
  if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
    __asan_report_load8(&context->player);
  player = context->player;
  SimulationGuard::SimulationGuard((SimulationGuard *const)(v3 + 64), player);
  *(_DWORD *)(v3 + 48) = 0;
  if ( common::tools::StringUtils::strVecToNum<0u,unsigned int>(param_vec, (unsigned int *)(v3 + 48)) )
  {
    std::string::operator=(ret_msg, "param parse error!");
  }
  else
  {
    BasicComp = Player::getBasicComp(player);
    v7 = Player::getBasicComp(player);
    PlayerTimeMs = PlayerBasicComp::getPlayerTimeMs(v7);
    PlayerBasicComp::setPlayerTimeMs(BasicComp, (unsigned int)(1000 * *(_DWORD *)(v3 + 48)) + PlayerTimeMs);
    v9 = Player::getBasicComp(player);
    v10 = Player::getBasicComp(player);
    DailyPlayTime = PlayerBasicComp::getDailyPlayTime(v10);
    PlayerBasicComp::setDailyPlayTime(v9, *(_DWORD *)(v3 + 48) + DailyPlayTime);
  }
  SimulationGuard::~SimulationGuard((SimulationGuard *const)(v3 + 64));
  result = 0;
  if ( v15 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8008) = 0;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8008) = -168430091;
  }
  return result;
};

// Line 8691: range 0000000017D77A64-0000000017D77B06
void __cdecl procRongZaiRegister::procRongZaiRegister(procRongZaiRegister *const this)
{
  std::function<int(GmContext&,const std::vector<std::string>&,std::string&)> *v1; // rax
  std::allocator<char> __a; // [rsp+1Fh] [rbp-31h] BYREF
  std::string __k; // [rsp+20h] [rbp-30h] BYREF

  std::allocator<char>::allocator(&__a);
  std::string::basic_string<std::allocator<char>>(&__k, "SIMULATE_RONG_ZAI", &__a);
  v1 = std::unordered_map<std::string,std::function<int ()(GmContext &,std::vector<std::string> const&,std::string&)>>::operator[](
         &GmUtils::op_func_map[abi:cxx11],
         &__k);
  std::function<int ()(GmContext &,std::vector<std::string> const&,std::string&)>::operator=<int (&)(GmContext &,std::vector<std::string> const&,std::string&)>(
    v1,
    (int (*)(GmContext *, const std::vector<std::string> *, std::string *))procRongZai);
  std::string::~string(&__k);
  std::allocator<char>::~allocator(&__a);
};

// Line 8692: range 0000000017C0A1D9-0000000017C0A446
int32_t __cdecl procRongZai(GmContext *context, const std::vector<std::string> *param_vec, std::string *ret_msg)
{
  unsigned __int64 v3; // rbx
  __int64 v4; // rax
  unsigned __int64 v5; // r12
  std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v6; // rdx
  bool v7; // r14
  int32_t result; // eax
  const std::string *v9; // rax
  common::milog::MiLogStream *v10; // r14
  int *v11; // rax
  std::shared_ptr<Config> v13; // [rsp+20h] [rbp-A0h] BYREF
  common::milog::MiLogStream v14; // [rsp+30h] [rbp-90h] BYREF
  char v15[112]; // [rsp+50h] [rbp-70h] BYREF

  v3 = (unsigned __int64)v15;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_0(64LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "1 32 8 12 int_opt:8700";
  *(_QWORD *)(v3 + 16) = procRongZai;
  v5 = v3 >> 3;
  *(_DWORD *)(v5 + 2147450880) = -235802127;
  *(_DWORD *)(v5 + 2147450884) = -202116352;
  ServiceBox::findService<GameserverService>();
  GameserverService::getConfig((GameserverService *const)&v13);
  v6 = std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false> *const)&v13);
  if ( *(_BYTE *)(((unsigned __int64)&v6->is_simulation_open >> 3) + 0x7FFF8000) != 0
    && (((unsigned __int8)v6 + 53) & 7) >= *(_BYTE *)(((unsigned __int64)&v6->is_simulation_open >> 3) + 0x7FFF8000) )
  {
    __asan_report_load1(&v6->is_simulation_open);
  }
  v7 = !v6->is_simulation_open;
  std::shared_ptr<Config>::~shared_ptr(&v13);
  if ( v7 )
  {
    std::string::operator=(ret_msg, &off_26360F20);
    result = 0;
  }
  else
  {
    if ( std::vector<std::string>::empty(param_vec) )
    {
      __asan_handle_no_return();
      __assert_fail(
        "false",
        "./src/player/gm/player_gm_comp.cpp",
        0x21F8u,
        "int32_t procRongZai(GmContext&, const std::vector<std::__cxx11::basic_string<char> >&, std::string&)");
    }
    v9 = std::vector<std::string>::operator[](param_vec, 0LL);
    if ( std::operator==<char>(v9, "TEST_COVERITY") )
    {
      *(_QWORD *)(v3 + 32) = 0LL;
      common::milog::MiLogStream::create(
        &v14,
        &common::milog::MiLogDefault::default_log_obj_,
        1u,
        "./src/player/gm/player_gm_comp.cpp",
        "procRongZai",
        8701);
      v10 = common::milog::MiLogStream::operator<<<char [19],(char *[19])0>(
              &v14,
              (const char (*)[19])"int_opt.value() = ");
      v11 = std::optional<int>::value((std::optional<int> *const)(v3 + 32));
      common::milog::MiLogStream::operator<<<int,(int *)0>(v10, v11);
      common::milog::MiLogStream::~MiLogStream(&v14);
    }
    result = 0;
  }
  if ( v15 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 8707: range 0000000017D77B08-0000000017D77BAA
void __cdecl procInterruptNextTransferRegister::procInterruptNextTransferRegister(
        procInterruptNextTransferRegister *const this)
{
  std::function<int(GmContext&,const std::vector<std::string>&,std::string&)> *v1; // rax
  std::allocator<char> __a; // [rsp+1Fh] [rbp-31h] BYREF
  std::string __k; // [rsp+20h] [rbp-30h] BYREF

  std::allocator<char>::allocator(&__a);
  std::string::basic_string<std::allocator<char>>(&__k, "SIMULATE_INTERRUPT_NEXT_TRANSFER", &__a);
  v1 = std::unordered_map<std::string,std::function<int ()(GmContext &,std::vector<std::string> const&,std::string&)>>::operator[](
         &GmUtils::op_func_map[abi:cxx11],
         &__k);
  std::function<int ()(GmContext &,std::vector<std::string> const&,std::string&)>::operator=<int (&)(GmContext &,std::vector<std::string> const&,std::string&)>(
    v1,
    (int (*)(GmContext *, const std::vector<std::string> *, std::string *))procInterruptNextTransfer);
  std::string::~string(&__k);
  std::allocator<char>::~allocator(&__a);
};

// Line 8708: range 0000000017C0A447-0000000017C0A535
int32_t __cdecl procInterruptNextTransfer(
        GmContext *context,
        const std::vector<std::string> *param_vec,
        std::string *ret_msg)
{
  std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v3; // rdx
  bool *p_is_simulation_open; // rax
  bool v5; // bl
  std::shared_ptr<Config> v8[2]; // [rsp+20h] [rbp-20h] BYREF

  ServiceBox::findService<GameserverService>();
  GameserverService::getConfig((GameserverService *const)v8);
  v3 = std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false> *const)v8);
  p_is_simulation_open = &v3->is_simulation_open;
  if ( *(_BYTE *)(((unsigned __int64)p_is_simulation_open >> 3) + 0x7FFF8000) != 0
    && ((unsigned __int8)p_is_simulation_open & 7) >= *(_BYTE *)(((unsigned __int64)p_is_simulation_open >> 3)
                                                               + 0x7FFF8000) )
  {
    __asan_report_load1(p_is_simulation_open);
  }
  v5 = !v3->is_simulation_open;
  std::shared_ptr<Config>::~shared_ptr(v8);
  if ( v5 )
  {
    std::string::operator=(ret_msg, &off_26360F20);
    return 0;
  }
  else
  {
    if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
      __asan_report_load8(&context->player);
    Player::setIsInterruptNextTransfer(context->player, 1);
    return 0;
  }
};

// Line 8719: range 0000000017D77BAC-0000000017D77C4E
void __cdecl procClimateRegister::procClimateRegister(procClimateRegister *const this)
{
  std::function<int(GmContext&,const std::vector<std::string>&,std::string&)> *v1; // rax
  std::allocator<char> __a; // [rsp+1Fh] [rbp-31h] BYREF
  std::string __k; // [rsp+20h] [rbp-30h] BYREF

  std::allocator<char>::allocator(&__a);
  std::string::basic_string<std::allocator<char>>(&__k, "CLIMATE", &__a);
  v1 = std::unordered_map<std::string,std::function<int ()(GmContext &,std::vector<std::string> const&,std::string&)>>::operator[](
         &GmUtils::op_func_map[abi:cxx11],
         &__k);
  std::function<int ()(GmContext &,std::vector<std::string> const&,std::string&)>::operator=<int (&)(GmContext &,std::vector<std::string> const&,std::string&)>(
    v1,
    (int (*)(GmContext *, const std::vector<std::string> *, std::string *))procClimate);
  std::string::~string(&__k);
  std::allocator<char>::~allocator(&__a);
};

// Line 8720: range 0000000017C0A536-0000000017C0AE40
int32_t __cdecl procClimate(GmContext *context, const std::vector<std::string> *param_vec, std::string *ret_msg)
{
  unsigned __int64 v3; // r12
  __int64 v4; // rax
  _DWORD *v5; // r13
  int32_t result; // eax
  const std::string *v7; // rax
  PlayerBasicComp *BasicComp; // rax
  PlayerBasicComp *v9; // rax
  size_t v10; // rax
  const std::string *v11; // rax
  const std::string *v12; // rax
  const std::string *v13; // rax
  const std::string *v14; // rax
  const std::string *v15; // rax
  const std::string *v16; // rax
  const std::string *v17; // rax
  const std::string *v19; // rax
  const std::string *v20; // rax
  bool v21; // al
  const std::string *v22; // rax
  const std::string *v23; // rax
  const std::string *v24; // rax
  const std::string *v26; // rax
  const std::string *v27; // rax
  bool v28; // al
  const std::string *v29; // rax
  const std::string *v30; // rax
  PlayerBasicComp *v31; // rax
  data::JsonClimateType CurJsonClimateType; // eax
  char v33; // al
  PlayerBasicComp *v34; // rax
  PlayerGmComp *GmComp; // r14
  bool *v36; // rax
  PlayerGmComp *v37; // r14
  bool *v38; // rax
  PlayerGmComp *v39; // rax
  PlayerGmComp *v40; // rax
  bool __t; // [rsp+2Dh] [rbp-E3h] BYREF
  std::optional<bool> v43; // [rsp+2Eh] [rbp-E2h] BYREF
  data::JsonClimateType json_climate_type; // [rsp+30h] [rbp-E0h]
  float value; // [rsp+34h] [rbp-DCh]
  size_t i; // [rsp+38h] [rbp-D8h]
  std::string v47; // [rsp+40h] [rbp-D0h] BYREF
  char v48[176]; // [rsp+60h] [rbp-B0h] BYREF

  v3 = (unsigned __int64)v48;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_1(128LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "4 48 2 16 is_lock_opt:8735 64 2 19 is_disable_opt:8736 80 2 17 is_reset_opt:8737 96 4 10 delta:8734";
  *(_QWORD *)(v3 + 16) = procClimate;
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = -234688015;
  v5[536862722] = -234687998;
  v5[536862723] = -202116348;
  if ( std::vector<std::string>::size(param_vec) )
  {
    v7 = std::vector<std::string>::operator[](param_vec, 0LL);
    if ( std::operator==<char>(v7, "PRINT") )
    {
      if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
        __asan_report_load8(&context->player);
      BasicComp = Player::getBasicComp(context->player);
      PlayerBasicComp::getClimateInfoByGm[abi:cxx11](&v47, BasicComp);
      std::string::operator=(ret_msg, &v47);
      std::string::~string(&v47);
      result = 0;
    }
    else
    {
      if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
        __asan_report_load8(&context->player);
      v9 = Player::getBasicComp(context->player);
      json_climate_type = PlayerBasicComp::getCurJsonClimateType(v9);
      *(_DWORD *)(v3 + 96) = 0;
      *(_WORD *)(v3 + 48) = 0;
      *(_WORD *)(v3 + 64) = 0;
      *(_WORD *)(v3 + 80) = 0;
      for ( i = 0LL; ; ++i )
      {
        v10 = std::vector<std::string>::size(param_vec);
        if ( i >= v10 )
          break;
        value = 0.0;
        v11 = std::vector<std::string>::operator[](param_vec, i);
        if ( common::tools::StringUtils::strToNum<float>(v11, (float *)(v3 + 96), 1) )
        {
          v12 = std::vector<std::string>::operator[](param_vec, i);
          if ( std::operator==<char>(v12, "COLD") )
          {
            json_climate_type = Cold;
          }
          else
          {
            v13 = std::vector<std::string>::operator[](param_vec, i);
            if ( std::operator==<char>(v13, off_2635FFC0) )
            {
              json_climate_type = Hot;
            }
            else
            {
              v14 = std::vector<std::string>::operator[](param_vec, i);
              if ( std::operator==<char>(v14, "NORMAL") )
              {
                json_climate_type = Normal;
              }
              else
              {
                v15 = std::vector<std::string>::operator[](param_vec, i);
                if ( std::operator==<char>(v15, "LOCK")
                  || (v16 = std::vector<std::string>::operator[](param_vec, i), std::operator==<char>(v16, "FREEZE"))
                  || (v17 = std::vector<std::string>::operator[](param_vec, i), std::operator==<char>(v17, "UNLOCK")) )
                {
                  v19 = std::vector<std::string>::operator[](param_vec, i);
                  v21 = 1;
                  if ( !std::operator==<char>(v19, "LOCK") )
                  {
                    v20 = std::vector<std::string>::operator[](param_vec, i);
                    if ( !std::operator==<char>(v20, "FREEZE") )
                      v21 = 0;
                  }
                  __t = v21;
                  std::optional<bool>::optional<bool,true>(&v43, &__t);
                  *(std::optional<bool> *)(v3 + 48) = v43;
                }
                else
                {
                  v22 = std::vector<std::string>::operator[](param_vec, i);
                  if ( std::operator==<char>(v22, "LETHAL")
                    || (v23 = std::vector<std::string>::operator[](param_vec, i), std::operator==<char>(v23, "UNLETHAL"))
                    || (v24 = std::vector<std::string>::operator[](param_vec, i), std::operator==<char>(v24, "NOLETHAL")) )
                  {
                    v26 = std::vector<std::string>::operator[](param_vec, i);
                    v28 = 1;
                    if ( !std::operator==<char>(v26, "UNLETHAL") )
                    {
                      v27 = std::vector<std::string>::operator[](param_vec, i);
                      if ( !std::operator==<char>(v27, "NOLETHAL") )
                        v28 = 0;
                    }
                    __t = v28;
                    std::optional<bool>::optional<bool,true>(&v43, &__t);
                    *(std::optional<bool> *)(v3 + 64) = v43;
                  }
                  else
                  {
                    v29 = std::vector<std::string>::operator[](param_vec, i);
                    if ( std::operator==<char>(v29, "RESET") )
                    {
                      __t = 1;
                      std::optional<bool>::optional<bool,true>(&v43, &__t);
                      *(std::optional<bool> *)(v3 + 80) = v43;
                    }
                    else
                    {
                      v30 = std::vector<std::string>::operator[](param_vec, i);
                      std::operator+<char>(&v47, asc_26362400, v30);
                      std::string::operator+=(ret_msg, &v47);
                      std::string::~string(&v47);
                    }
                  }
                }
              }
            }
          }
        }
        else
        {
          *(float *)(v3 + 96) = *(float *)(v3 + 96) + value;
        }
      }
      if ( std::fabs(*(float *)(v3 + 96)) > 0.01 )
        goto LABEL_52;
      if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
        __asan_report_load8(&context->player);
      v31 = Player::getBasicComp(context->player);
      CurJsonClimateType = PlayerBasicComp::getCurJsonClimateType(v31);
      if ( json_climate_type == CurJsonClimateType )
        v33 = 0;
      else
LABEL_52:
        v33 = 1;
      if ( v33 )
      {
        if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
          __asan_report_load8(&context->player);
        v34 = Player::getBasicComp(context->player);
        PlayerBasicComp::changeCurClimateMeter(v34, json_climate_type, *(float *)(v3 + 96), 1);
      }
      if ( std::optional<bool>::has_value((const std::optional<bool> *const)(v3 + 48)) )
      {
        if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
          __asan_report_load8(&context->player);
        GmComp = Player::getGmComp(context->player);
        v36 = std::optional<bool>::value((std::optional<bool> *const)(v3 + 48));
        PlayerGmComp::setGmSetValue<bool>(GmComp, 2u, v36);
      }
      if ( std::optional<bool>::has_value((const std::optional<bool> *const)(v3 + 64)) )
      {
        if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
          __asan_report_load8(&context->player);
        v37 = Player::getGmComp(context->player);
        v38 = std::optional<bool>::value((std::optional<bool> *const)(v3 + 64));
        PlayerGmComp::setGmSetValue<bool>(v37, 3u, v38);
      }
      if ( std::optional<bool>::has_value((const std::optional<bool> *const)(v3 + 80)) )
      {
        if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
          __asan_report_load8(&context->player);
        v39 = Player::getGmComp(context->player);
        PlayerGmComp::clearSetValue<bool>(v39, 2u);
        if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
          __asan_report_load8(&context->player);
        v40 = Player::getGmComp(context->player);
        PlayerGmComp::clearSetValue<bool>(v40, 3u);
      }
      result = 0;
    }
  }
  else
  {
    std::string::operator=(ret_msg, &unk_263622C0);
    result = -1;
  }
  if ( v48 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 8796: range 0000000017D77C50-0000000017D77CF2
void __cdecl procSbuffRegister::procSbuffRegister(procSbuffRegister *const this)
{
  std::function<int(GmContext&,const std::vector<std::string>&,std::string&)> *v1; // rax
  std::allocator<char> __a; // [rsp+1Fh] [rbp-31h] BYREF
  std::string __k; // [rsp+20h] [rbp-30h] BYREF

  std::allocator<char>::allocator(&__a);
  std::string::basic_string<std::allocator<char>>(&__k, "SBUFF", &__a);
  v1 = std::unordered_map<std::string,std::function<int ()(GmContext &,std::vector<std::string> const&,std::string&)>>::operator[](
         &GmUtils::op_func_map[abi:cxx11],
         &__k);
  std::function<int ()(GmContext &,std::vector<std::string> const&,std::string&)>::operator=<int (&)(GmContext &,std::vector<std::string> const&,std::string&)>(
    v1,
    (int (*)(GmContext *, const std::vector<std::string> *, std::string *))procSbuff);
  std::string::~string(&__k);
  std::allocator<char>::~allocator(&__a);
};

// Line 8797: range 0000000017C0AE41-0000000017C0AF1F
int32_t __cdecl procSbuff(GmContext *context, const std::vector<std::string> *param_vec, std::string *ret_msg)
{
  const std::string *v4; // rax
  PlayerAvatarComp *AvatarComp; // rax
  std::string v7; // [rsp+20h] [rbp-20h] BYREF

  if ( std::vector<std::string>::size(param_vec) )
  {
    v4 = std::vector<std::string>::operator[](param_vec, 0LL);
    if ( std::operator==<char>(v4, "PRINT") )
    {
      if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
        __asan_report_load8(&context->player);
      AvatarComp = Player::getAvatarComp(context->player);
      PlayerAvatarComp::getSbuffInfoByGm[abi:cxx11](&v7, AvatarComp);
      std::string::operator=(ret_msg, &v7);
      std::string::~string(&v7);
      return 0;
    }
    else
    {
      return 0;
    }
  }
  else
  {
    std::string::operator=(ret_msg, &unk_263622C0);
    return -1;
  }
};

// Line 8814: range 0000000017D77CF4-0000000017D77D96
void __cdecl procGetGameserverAppIdRegister::procGetGameserverAppIdRegister(procGetGameserverAppIdRegister *const this)
{
  std::function<int(GmContext&,const std::vector<std::string>&,std::string&)> *v1; // rax
  std::allocator<char> __a; // [rsp+1Fh] [rbp-31h] BYREF
  std::string __k; // [rsp+20h] [rbp-30h] BYREF

  std::allocator<char>::allocator(&__a);
  std::string::basic_string<std::allocator<char>>(&__k, "GET_GAMESERVER_APPID", &__a);
  v1 = std::unordered_map<std::string,std::function<int ()(GmContext &,std::vector<std::string> const&,std::string&)>>::operator[](
         &GmUtils::op_func_map[abi:cxx11],
         &__k);
  std::function<int ()(GmContext &,std::vector<std::string> const&,std::string&)>::operator=<int (&)(GmContext &,std::vector<std::string> const&,std::string&)>(
    v1,
    (int (*)(GmContext *, const std::vector<std::string> *, std::string *))procGetGameserverAppId);
  std::string::~string(&__k);
  std::allocator<char>::~allocator(&__a);
};

// Line 8815: range 0000000017C0AF20-0000000017C0AFC1
int32_t __cdecl procGetGameserverAppId(
        GmContext *context,
        const std::vector<std::string> *param_vec,
        std::string *ret_msg)
{
  GameserverApp *v3; // rax
  uint32_t app_id; // [rsp+2Ch] [rbp-54h]
  std::string __rhs; // [rsp+30h] [rbp-50h] BYREF
  std::string v8; // [rsp+50h] [rbp-30h] BYREF

  v3 = Singleton<GameserverApp>::instance();
  app_id = AppBase::getAppId((AppBase *const)v3);
  common::tools::AppIdUtils::getAppIdStr[abi:cxx11](&__rhs, app_id);
  std::operator+<char>(&v8, "gameserver app_id: ", &__rhs);
  std::string::operator=(ret_msg, &v8);
  std::string::~string(&v8);
  std::string::~string(&__rhs);
  return 0;
};

// Line 8821: range 0000000017D77D98-0000000017D77E3A
void __cdecl procGetThreadIndexRegister::procGetThreadIndexRegister(procGetThreadIndexRegister *const this)
{
  std::function<int(GmContext&,const std::vector<std::string>&,std::string&)> *v1; // rax
  std::allocator<char> __a; // [rsp+1Fh] [rbp-31h] BYREF
  std::string __k; // [rsp+20h] [rbp-30h] BYREF

  std::allocator<char>::allocator(&__a);
  std::string::basic_string<std::allocator<char>>(&__k, "GET_THREAD_INDEX", &__a);
  v1 = std::unordered_map<std::string,std::function<int ()(GmContext &,std::vector<std::string> const&,std::string&)>>::operator[](
         &GmUtils::op_func_map[abi:cxx11],
         &__k);
  std::function<int ()(GmContext &,std::vector<std::string> const&,std::string&)>::operator=<int (&)(GmContext &,std::vector<std::string> const&,std::string&)>(
    v1,
    (int (*)(GmContext *, const std::vector<std::string> *, std::string *))procGetThreadIndex);
  std::string::~string(&__k);
  std::allocator<char>::~allocator(&__a);
};

// Line 8822: range 0000000017C0AFC2-0000000017C0B091
int32_t __cdecl procGetThreadIndex(GmContext *context, const std::vector<std::string> *param_vec, std::string *ret_msg)
{
  unsigned __int64 v3; // rax
  unsigned int *v4; // rdx
  std::string __rhs; // [rsp+20h] [rbp-50h] BYREF
  std::string v8; // [rsp+40h] [rbp-30h] BYREF

  v3 = ZTWN11ThreadLocal17work_thread_indexE();
  v4 = (unsigned int *)v3;
  if ( *(_BYTE *)((v3 >> 3) + 0x7FFF8000) != 0 && (char)((v3 & 7) + 3) >= *(_BYTE *)((v3 >> 3) + 0x7FFF8000) )
    __asan_report_load4(v3);
  common::tools::StringUtils::numToStr<unsigned int>(&__rhs, *v4);
  std::operator+<char>(&v8, "gameserver thread_index: ", &__rhs);
  std::string::operator=(ret_msg, &v8);
  std::string::~string(&v8);
  std::string::~string(&__rhs);
  return 0;
};

// Line 8828: range 0000000017D77E3C-0000000017D77EDE
void __cdecl procInvestigationRegister::procInvestigationRegister(procInvestigationRegister *const this)
{
  std::function<int(GmContext&,const std::vector<std::string>&,std::string&)> *v1; // rax
  std::allocator<char> __a; // [rsp+1Fh] [rbp-31h] BYREF
  std::string __k; // [rsp+20h] [rbp-30h] BYREF

  std::allocator<char>::allocator(&__a);
  std::string::basic_string<std::allocator<char>>(&__k, "INVESTIGATION", &__a);
  v1 = std::unordered_map<std::string,std::function<int ()(GmContext &,std::vector<std::string> const&,std::string&)>>::operator[](
         &GmUtils::op_func_map[abi:cxx11],
         &__k);
  std::function<int ()(GmContext &,std::vector<std::string> const&,std::string&)>::operator=<int (&)(GmContext &,std::vector<std::string> const&,std::string&)>(
    v1,
    (int (*)(GmContext *, const std::vector<std::string> *, std::string *))procInvestigation);
  std::string::~string(&__k);
  std::allocator<char>::~allocator(&__a);
};

// Line 8829: range 0000000017C0B092-0000000017C0B397
int32_t __cdecl procInvestigation(GmContext *context, const std::vector<std::string> *param_vec, std::string *ret_msg)
{
  unsigned __int64 v3; // rbx
  __int64 v4; // rax
  _DWORD *v5; // r12
  int32_t result; // eax
  const std::string *v7; // rax
  const std::string *v8; // rax
  const std::string *v9; // rax
  PlayerInvestigationComp *InvestigationComp; // rax
  const std::string *v11; // rax
  PlayerInvestigationComp *v12; // rax
  char v14[128]; // [rsp+20h] [rbp-80h] BYREF

  v3 = (unsigned __int64)v14;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_1(96LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "2 48 4 21 investigation_id:8842 64 4 13 progress:8843";
  *(_QWORD *)(v3 + 16) = procInvestigation;
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = -234556943;
  v5[536862722] = -202116348;
  if ( std::vector<std::string>::empty(param_vec) )
  {
    std::string::operator=(ret_msg, "param not enough");
    result = -1;
  }
  else
  {
    v7 = std::vector<std::string>::operator[](param_vec, 0LL);
    if ( std::operator==<char>(v7, "PROGRESS") )
    {
      if ( std::vector<std::string>::size(param_vec) > 2 )
      {
        *(_DWORD *)(v3 + 48) = 0;
        *(_DWORD *)(v3 + 64) = 0;
        v8 = std::vector<std::string>::operator[](param_vec, 1uLL);
        if ( common::tools::StringUtils::strToNum<unsigned int>(v8, (unsigned int *)(v3 + 48), 1) )
        {
          std::string::operator=(ret_msg, "investigation_id parse fail");
          result = -1;
        }
        else
        {
          v9 = std::vector<std::string>::operator[](param_vec, 2uLL);
          if ( common::tools::StringUtils::strToNum<unsigned int>(v9, (unsigned int *)(v3 + 64), 1) )
          {
            std::string::operator=(ret_msg, "progress parse fail");
            result = -1;
          }
          else
          {
            if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
              __asan_report_load8(&context->player);
            InvestigationComp = Player::getInvestigationComp(context->player);
            PlayerInvestigationComp::setInvestigationProgressByGm(
              InvestigationComp,
              *(_DWORD *)(v3 + 48),
              *(_DWORD *)(v3 + 64));
            result = 0;
          }
        }
      }
      else
      {
        std::string::operator=(ret_msg, "'investigation progress' param not enough");
        result = -1;
      }
    }
    else
    {
      v11 = std::vector<std::string>::operator[](param_vec, 0LL);
      if ( std::operator==<char>(v11, "QUEST_DAILY_NOTIFY") )
      {
        if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
          __asan_report_load8(&context->player);
        v12 = Player::getInvestigationComp(context->player);
        PlayerInvestigationComp::sendQuestDailyNotifyByGm(v12);
        result = 0;
      }
      else
      {
        result = 0;
      }
    }
  }
  if ( v14 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8008) = 0;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8008) = -168430091;
  }
  return result;
};

// Line 8866: range 0000000017D77EE0-0000000017D77F82
void __cdecl procPrintRegister::procPrintRegister(procPrintRegister *const this)
{
  std::function<int(GmContext&,const std::vector<std::string>&,std::string&)> *v1; // rax
  std::allocator<char> __a; // [rsp+1Fh] [rbp-31h] BYREF
  std::string __k; // [rsp+20h] [rbp-30h] BYREF

  std::allocator<char>::allocator(&__a);
  std::string::basic_string<std::allocator<char>>(&__k, "PRINT", &__a);
  v1 = std::unordered_map<std::string,std::function<int ()(GmContext &,std::vector<std::string> const&,std::string&)>>::operator[](
         &GmUtils::op_func_map[abi:cxx11],
         &__k);
  std::function<int ()(GmContext &,std::vector<std::string> const&,std::string&)>::operator=<int (&)(GmContext &,std::vector<std::string> const&,std::string&)>(
    v1,
    (int (*)(GmContext *, const std::vector<std::string> *, std::string *))procPrint);
  std::string::~string(&__k);
  std::allocator<char>::~allocator(&__a);
};

// Line 8867: range 0000000017C0B447-0000000017C0CD16
int32_t __cdecl procPrint(GmContext *context, const std::vector<std::string> *param_vec, std::string *ret_msg)
{
  int32_t v3; // r14d
  __m128i second_low; // xmm0
  unsigned __int64 v5; // r13
  __int64 v6; // rax
  _DWORD *v7; // r12
  const std::string *v8; // rax
  const std::string *v9; // rax
  std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v10; // rax
  unsigned __int64 v11; // rdx
  std::__shared_ptr_access<Entity,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v12; // rax
  void (__fastcall **vptr_DescribalBase)(std::string *, std::__shared_ptr_access<Entity,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *); // rdx
  Player *player; // r14
  const std::string *v15; // rax
  const std::string *v16; // rax
  Scene *v17; // rax
  SceneBlockGroupComp *BlockGroupComp; // rax
  unsigned __int64 v19; // rdx
  std::__shared_ptr_access<Group,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v20; // rax
  void (__fastcall **v21)(std::string *, std::__shared_ptr_access<Group,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *); // rdx
  Player *v22; // r14
  const std::string *v23; // rax
  unsigned __int64 Position; // rax
  Scene *scene; // rax
  const std::string *v26; // rax
  const std::string *v27; // rax
  const std::string *v28; // rax
  unsigned int v29; // eax
  bool v30; // r15
  const std::string *v31; // rax
  const std::string *v32; // rax
  std::__shared_ptr_access<Creature,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v33; // rax
  unsigned __int64 v34; // rdx
  std::__shared_ptr_access<Creature,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v35; // rax
  unsigned __int64 v36; // rdx
  int v37; // r15d
  std::__shared_ptr_access<Gadget,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v38; // rax
  std::__shared_ptr_access<Creature,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v39; // rax
  unsigned __int64 n; // rax
  std::priority_queue<std::pair<std::shared_ptr<Creature>,float>,std::vector<std::pair<std::shared_ptr<Creature>,float>>,procPrint(GmContext&,const std::vector<std::string >&,std::string&)::<lambda(std::pair<std::shared_ptr<Creature>,float>,std::pair<std::shared_ptr<Creature>,float>)> >::const_reference v41; // rax
  const std::pair<std::shared_ptr<Creature>,float> *v42; // rax
  common::tools::StringStream<common::tools::FixedBuffer<4096> > *v43; // r14
  std::__shared_ptr_access<Creature,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v44; // rax
  void (__fastcall **v45)(std::string *, std::__shared_ptr_access<Creature,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *); // rdx
  common::tools::StringStream<common::tools::FixedBuffer<4096> > *v46; // r14
  std::__shared_ptr_access<Gadget,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v47; // rax
  unsigned int State; // eax
  common::tools::StringStream<common::tools::FixedBuffer<4096> > *v49; // rax
  common::tools::StringStream<common::tools::FixedBuffer<4096> > *v50; // rcx
  common::tools::StringStream<common::tools::FixedBuffer<4096> > *v51; // rax
  Player *v52; // r14
  int32_t result; // eax
  proto::ProtEntityType filter_entity_type; // [rsp+2Ch] [rbp-3B4h]
  std::vector<std::shared_ptr<Creature>>::iterator __for_begin; // [rsp+30h] [rbp-3B0h] BYREF
  std::vector<std::shared_ptr<Creature>>::iterator __for_end; // [rsp+38h] [rbp-3A8h] BYREF
  std::vector<std::shared_ptr<Creature>> *__for_range; // [rsp+40h] [rbp-3A0h]
  std::deque<std::pair<std::shared_ptr<Creature>,float>> *__for_range_0; // [rsp+48h] [rbp-398h]
  std::pair<std::shared_ptr<Creature>,float> *__in; // [rsp+50h] [rbp-390h]
  std::tuple_element<0,std::pair<std::shared_ptr<Creature>,float> >::type *creature_ptr_0; // [rsp+58h] [rbp-388h]
  std::tuple_element<1,std::pair<std::shared_ptr<Creature>,float> >::type *dis; // [rsp+60h] [rbp-380h]
  std::shared_ptr<Creature> *creature_ptr; // [rsp+68h] [rbp-378h]
  std::pair<std::shared_ptr<Creature>,float> __x; // [rsp+70h] [rbp-370h] BYREF
  std::vector<std::pair<std::shared_ptr<Creature>,float>> __s; // [rsp+90h] [rbp-350h] BYREF
  std::string v66; // [rsp+B0h] [rbp-330h] BYREF
  std::deque<std::pair<std::shared_ptr<Creature>,float>>::iterator __for_begin_0; // [rsp+D0h] [rbp-310h] BYREF
  std::deque<std::pair<std::shared_ptr<Creature>,float>>::iterator __for_end_0; // [rsp+F0h] [rbp-2F0h] BYREF
  std::string v; // [rsp+110h] [rbp-2D0h] BYREF
  char v70[688]; // [rsp+130h] [rbp-2B0h] BYREF

  v5 = (unsigned __int64)v70;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v6 = __asan_stack_malloc_4(640LL);
    if ( v6 )
      v5 = v6;
  }
  *(_QWORD *)v5 = 1102416563LL;
  *(_QWORD *)(v5 + 8) = "13 32 1 8 cmp:8934 48 4 28 filter_entity_config_id:8940 64 4 8 dis:9004 80 12 15 player_pos:8931"
                        " 112 12 8 pos:9003 144 16 14 scene_ptr:8913 176 16 8 oss:9016 208 16 15 gadget_ptr:9038 240 24 1"
                        "7 creature_vec:8929 304 32 7 pq:8937 368 48 18 group_dis_map:8930 448 48 12 visitor:8932 528 80 6 v:9017";
  *(_QWORD *)(v5 + 16) = procPrint;
  v7 = (_DWORD *)(v5 >> 3);
  v7[536862720] = -235802127;
  v7[536862721] = -234556927;
  v7[536862722] = 61956;
  v7[536862722] = 0x4000000;
  v7[536862723] = 62194;
  v7[536862723] = 0x4000000;
  v7[536862724] = 62194;
  v7[536862725] = 62194;
  v7[536862726] = 62194;
  v7[536862727] = 62194;
  v7[536862728] = -218959360;
  v7[536862729] = 62194;
  v7[536862730] = -219021312;
  v7[536862731] = 62194;
  v7[536862733] = -218959118;
  v7[536862735] = -219021312;
  v7[536862736] = 62194;
  v7[536862739] = -202116109;
  if ( !std::vector<std::string>::size(param_vec) )
    goto LABEL_29;
  v8 = std::vector<std::string>::operator[](param_vec, 0LL);
  if ( std::operator==<char>(v8, "ENTITY") )
  {
    if ( std::vector<std::string>::size(param_vec) > 1 )
    {
      *(_DWORD *)(v5 + 64) = 0;
      v9 = std::vector<std::string>::operator[](param_vec, 1uLL);
      if ( common::tools::StringUtils::strToNum<unsigned int>(v9, (unsigned int *)(v5 + 64), 1) )
      {
        std::string::operator=(ret_msg, "entity_id parse fail");
        v3 = -1;
        goto LABEL_127;
      }
      if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
        __asan_report_load8(&context->player);
      Player::getSceneComp(context->player);
      PlayerSceneComp::getCurScene((const PlayerSceneComp *const)(v5 + 144));
      if ( std::operator!=<Scene>((const std::shared_ptr<Scene> *)(v5 + 144), 0LL) )
      {
        v10 = std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v5 + 144));
        if ( *(_BYTE *)(((unsigned __int64)v10 >> 3) + 0x7FFF8000) )
          __asan_report_load8(v10);
        v11 = (unsigned __int64)(v10->_vptr_DescribalBase + 15);
        if ( *(_BYTE *)((v11 >> 3) + 0x7FFF8000) )
          __asan_report_load8(v10->_vptr_DescribalBase + 15);
        (*(void (__fastcall **)(unsigned __int64, std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *, _QWORD))v11)(
          v5 + 176,
          v10,
          *(unsigned int *)(v5 + 64));
        if ( std::operator!=<Entity>((const std::shared_ptr<Entity> *)(v5 + 176), 0LL) )
        {
          common::tools::StringStream<common::tools::FixedBuffer<4096>>::StringStream((common::tools::StringStream<common::tools::FixedBuffer<4096> > *const)(v5 + 208));
          v12 = std::__shared_ptr_access<Entity,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Entity,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v5 + 176));
          if ( *(_BYTE *)(((unsigned __int64)v12 >> 3) + 0x7FFF8000) )
            __asan_report_load8(v12);
          vptr_DescribalBase = (void (__fastcall **)(std::string *, std::__shared_ptr_access<Entity,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *))v12->_vptr_DescribalBase;
          if ( *(_BYTE *)(((unsigned __int64)v12->_vptr_DescribalBase >> 3) + 0x7FFF8000) )
            __asan_report_load8(v12->_vptr_DescribalBase);
          (*vptr_DescribalBase)(&v, v12);
          common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(
            (common::tools::StringStream<common::tools::FixedBuffer<4096> > *const)(v5 + 208),
            &v);
          std::string::~string(&v);
          common::tools::StringStream<common::tools::FixedBuffer<4096>>::str[abi:cxx11](
            &v,
            (common::tools::StringStream<common::tools::FixedBuffer<4096> > *const)(v5 + 208));
          std::string::operator=(ret_msg, &v);
          std::string::~string(&v);
          if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
            __asan_report_load8(&context->player);
          player = context->player;
          common::tools::StringStream<common::tools::FixedBuffer<4096>>::str[abi:cxx11](
            &v,
            (common::tools::StringStream<common::tools::FixedBuffer<4096> > *const)(v5 + 208));
          Player::notifyServerLog(player, SERVER_LOG_ENTITY, LOG_LEVEL_NONE, &v);
          std::string::~string(&v);
          common::tools::StringStream<common::tools::FixedBuffer<4096>>::~StringStream((common::tools::StringStream<common::tools::FixedBuffer<4096> > *const)(v5 + 208));
        }
        std::shared_ptr<Entity>::~shared_ptr((std::shared_ptr<Entity> *const)(v5 + 176));
      }
      goto LABEL_26;
    }
LABEL_29:
    std::string::operator=(ret_msg, "param not enough");
    v3 = -1;
    goto LABEL_127;
  }
  v15 = std::vector<std::string>::operator[](param_vec, 0LL);
  if ( !std::operator==<char>(v15, "GROUP") )
  {
    v23 = std::vector<std::string>::operator[](param_vec, 0LL);
    if ( !std::operator==<char>(v23, "NEARENTITY") )
    {
      v3 = 0;
      goto LABEL_127;
    }
    std::vector<std::shared_ptr<Creature>>::vector((std::vector<std::shared_ptr<Creature>> *const)(v5 + 240));
    std::map<unsigned int,float>::map((std::map<unsigned int,float> *const)(v5 + 368));
    if ( *(_BYTE *)(((unsigned __int64)&context->avatar >> 3) + 0x7FFF8000) )
      *(double *)second_low.m128i_i64 = __asan_report_load8(&context->avatar);
    Position = (unsigned __int64)Entity::getPosition((const Entity *const)context->avatar);
    if ( (char)(Position & 7) >= *(_BYTE *)((Position >> 3) + 0x7FFF8000)
      && *(_BYTE *)((Position >> 3) + 0x7FFF8000) != 0
      || *(_BYTE *)(((Position + 11) >> 3) + 0x7FFF8000) != 0
      && (char)((Position + 11) & 7) >= *(_BYTE *)(((Position + 11) >> 3) + 0x7FFF8000) )
    {
      Position = __asan_report_load_n(Position, 12LL);
    }
    *(_QWORD *)(v5 + 80) = *(_QWORD *)Position;
    *(_DWORD *)(v5 + 88) = *(_DWORD *)(Position + 8);
    if ( *(_BYTE *)(((unsigned __int64)&context->avatar >> 3) + 0x7FFF8000) )
      *(double *)second_low.m128i_i64 = __asan_report_load8(&context->avatar);
    toThisPtr<Avatar>((Avatar *)(v5 + 176));
    std::shared_ptr<Entity>::shared_ptr<Avatar,void>(
      (std::shared_ptr<Entity> *const)(v5 + 208),
      (std::shared_ptr<Avatar> *)(v5 + 176));
    ZN13EntityVisitorCI27VisitorESt10shared_ptrI6EntityE((EntityVisitor *const)(v5 + 448), (EntityPtr *)(v5 + 208));
    std::shared_ptr<Entity>::~shared_ptr((std::shared_ptr<Entity> *const)(v5 + 208));
    std::shared_ptr<Avatar>::~shared_ptr((std::shared_ptr<Avatar> *const)(v5 + 176));
    if ( *(_BYTE *)(((unsigned __int64)&context->scene >> 3) + 0x7FFF8000) )
      *(double *)second_low.m128i_i64 = __asan_report_load8(&context->scene);
    scene = context->scene;
    if ( *(_BYTE *)(((unsigned __int64)&context->avatar >> 3) + 0x7FFF8000) )
      *(double *)second_low.m128i_i64 = __asan_report_load8(&context->avatar);
    Scene::getSurroundEntities<std::shared_ptr<Creature>>(
      scene,
      (Visitor *)(v5 + 448),
      (Entity *)context->avatar,
      (std::vector<std::shared_ptr<Creature>> *)(v5 + 240));
    memset(&__s, 0, sizeof(__s));
    std::vector<std::pair<std::shared_ptr<Creature>,float>>::vector(&__s);
    std::priority_queue<std::pair<std::shared_ptr<Creature>,float>,std::vector<std::pair<std::shared_ptr<Creature>,float>>,procPrint(GmContext &,std::vector const&<std::string,std::allocator<std::char_traits<char>>>,std::char_traits<char>&)::{lambda(std::pair<std::shared_ptr<Creature>,float>,std::pair<std::shared_ptr<Creature>,float>)#1}>::priority_queue(
      (std::priority_queue<std::pair<std::shared_ptr<Creature>,float>,std::vector<std::pair<std::shared_ptr<Creature>,float>>,procPrint(GmContext&,const std::vector<std::string >&,std::string&)::<lambda(std::pair<std::shared_ptr<Creature>,float>,std::pair<std::shared_ptr<Creature>,float>)> > *const)(v5 + 304),
      (const procPrint::<lambda(std::pair<std::shared_ptr<Creature>, float>, std::pair<std::shared_ptr<Creature>, float>)> *)(v5 + 32),
      &__s);
    std::vector<std::pair<std::shared_ptr<Creature>,float>>::~vector(&__s);
    filter_entity_type = PROT_ENTITY_NONE;
    *(_DWORD *)(v5 + 48) = 0;
    if ( std::vector<std::string>::size(param_vec) > 1 )
    {
      v26 = std::vector<std::string>::operator[](param_vec, 1uLL);
      if ( !std::operator==<char>(v26, "GADGET") )
      {
        v32 = std::vector<std::string>::operator[](param_vec, 1uLL);
        std::operator+<char>((std::string *)&__for_end_0, "PRINT NEARENTITY doesn't support entity type: ", v32);
        std::string::operator=(ret_msg, &__for_end_0);
        std::string::~string(&__for_end_0);
        v3 = -1;
        goto LABEL_125;
      }
      filter_entity_type = PROT_ENTITY_GADGET;
      if ( std::vector<std::string>::size(param_vec) > 2 )
      {
        v27 = std::vector<std::string>::operator[](param_vec, 2uLL);
        if ( common::tools::StringUtils::strToNum<unsigned int>(v27, (unsigned int *)(v5 + 48), 1) )
        {
          v28 = std::vector<std::string>::operator[](param_vec, 2uLL);
          std::operator+<char>(&v66, "gadget_config_id parse fail: ", v28);
          std::string::operator=(ret_msg, &v66);
          std::string::~string(&v66);
          v3 = -1;
LABEL_125:
          std::priority_queue<std::pair<std::shared_ptr<Creature>,float>,std::vector<std::pair<std::shared_ptr<Creature>,float>>,procPrint(GmContext &,std::vector const&<std::string,std::allocator<std::char_traits<char>>>,std::char_traits<char>&)::{lambda(std::pair<std::shared_ptr<Creature>,float>,std::pair<std::shared_ptr<Creature>,float>)#1}>::~priority_queue((std::priority_queue<std::pair<std::shared_ptr<Creature>,float>,std::vector<std::pair<std::shared_ptr<Creature>,float>>,procPrint(GmContext&,const std::vector<std::string >&,std::string&)::<lambda(std::pair<std::shared_ptr<Creature>,float>,std::pair<std::shared_ptr<Creature>,float>)> > *const)(v5 + 304));
          EntityVisitor::~EntityVisitor((EntityVisitor *const)(v5 + 448));
          std::map<unsigned int,float>::~map((std::map<unsigned int,float> *const)(v5 + 368));
          std::vector<std::shared_ptr<Creature>>::~vector((std::vector<std::shared_ptr<Creature>> *const)(v5 + 240));
          goto LABEL_127;
        }
        ServiceBox::findService<GameserverService>();
        GameserverService::getConfig((GameserverService *const)(v5 + 176));
        v29 = (unsigned int)std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v5 + 176));
        JsonConfigMgr::findGadgetConfig((const JsonConfigMgr *const)(v5 + 208), v29 + 93080);
        v30 = std::operator==<data::ConfigGadget>(0LL, (const std::shared_ptr<data::ConfigGadget> *)(v5 + 208));
        std::shared_ptr<data::ConfigGadget>::~shared_ptr((std::shared_ptr<data::ConfigGadget> *const)(v5 + 208));
        std::shared_ptr<Config>::~shared_ptr((std::shared_ptr<Config> *const)(v5 + 176));
        if ( v30 )
        {
          v31 = std::vector<std::string>::operator[](param_vec, 2uLL);
          std::operator+<char>((std::string *)&__for_begin_0, "gadget_config_id does't exist: ", v31);
          std::string::operator=(ret_msg, &__for_begin_0);
          std::string::~string(&__for_begin_0);
          v3 = -1;
          goto LABEL_125;
        }
      }
    }
    __for_range = (std::vector<std::shared_ptr<Creature>> *)(v5 + 240);
    __for_begin._M_current = std::vector<std::shared_ptr<Creature>>::begin((std::vector<std::shared_ptr<Creature>> *const)(v5 + 240))._M_current;
    __for_end._M_current = std::vector<std::shared_ptr<Creature>>::end((std::vector<std::shared_ptr<Creature>> *const)(v5 + 240))._M_current;
    while ( __gnu_cxx::operator!=<std::shared_ptr<Creature> *,std::vector<std::shared_ptr<Creature>>>(
              &__for_begin,
              &__for_end) )
    {
      creature_ptr = __gnu_cxx::__normal_iterator<std::shared_ptr<Creature> *,std::vector<std::shared_ptr<Creature>>>::operator*(&__for_begin);
      if ( !std::operator==<Creature>(creature_ptr, 0LL) )
      {
        if ( filter_entity_type == PROT_ENTITY_NONE )
          goto LABEL_92;
        v33 = std::__shared_ptr_access<Creature,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Creature,(__gnu_cxx::_Lock_policy)2,false,false> *const)creature_ptr);
        if ( *(_BYTE *)(((unsigned __int64)v33 >> 3) + 0x7FFF8000) )
          *(double *)second_low.m128i_i64 = __asan_report_load8(v33);
        v34 = *(_QWORD *)v33->baseclass_0 + 24LL;
        if ( *(_BYTE *)((v34 >> 3) + 0x7FFF8000) )
          *(double *)second_low.m128i_i64 = __asan_report_load8(*(_QWORD *)v33->baseclass_0 + 24LL);
        if ( filter_entity_type == (*(unsigned int (__fastcall **)(std::__shared_ptr_access<Creature,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *))v34)(v33) )
        {
          if ( !*(_DWORD *)(v5 + 48) )
            goto LABEL_92;
          v35 = std::__shared_ptr_access<Creature,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Creature,(__gnu_cxx::_Lock_policy)2,false,false> *const)creature_ptr);
          if ( *(_BYTE *)(((unsigned __int64)v35 >> 3) + 0x7FFF8000) )
            *(double *)second_low.m128i_i64 = __asan_report_load8(v35);
          v36 = *(_QWORD *)v35->baseclass_0 + 24LL;
          if ( *(_BYTE *)((v36 >> 3) + 0x7FFF8000) )
            *(double *)second_low.m128i_i64 = __asan_report_load8(*(_QWORD *)v35->baseclass_0 + 24LL);
          if ( (*(unsigned int (__fastcall **)(std::__shared_ptr_access<Creature,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *))v36)(v35) != 4 )
          {
            std::string::operator=(ret_msg, "error");
            v3 = -1;
            goto LABEL_125;
          }
          std::dynamic_pointer_cast<Gadget,Creature>((const std::shared_ptr<Creature> *)(v5 + 208));
          if ( std::operator==<Gadget>((const std::shared_ptr<Gadget> *)(v5 + 208), 0LL) )
          {
            std::string::operator=(ret_msg, "dynamic cast to gadget failed");
            v3 = -1;
            v37 = 0;
          }
          else
          {
            v38 = std::__shared_ptr_access<Gadget,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Gadget,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v5 + 208));
            if ( Gadget::getGadgetId(v38) == *(_DWORD *)(v5 + 48) )
              v37 = 2;
            else
              v37 = 1;
          }
          std::shared_ptr<Gadget>::~shared_ptr((std::shared_ptr<Gadget> *const)(v5 + 208));
          if ( !v37 )
            goto LABEL_125;
          if ( v37 == 2 )
          {
LABEL_92:
            v39 = std::__shared_ptr_access<Creature,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Creature,(__gnu_cxx::_Lock_policy)2,false,false> *const)creature_ptr);
            n = (unsigned __int64)Entity::getPosition((const Entity *const)v39);
            if ( (char)(n & 7) >= *(_BYTE *)((n >> 3) + 0x7FFF8000) && *(_BYTE *)((n >> 3) + 0x7FFF8000) != 0
              || *(_BYTE *)(((n + 11) >> 3) + 0x7FFF8000) != 0
              && (char)((n + 11) & 7) >= *(_BYTE *)(((n + 11) >> 3) + 0x7FFF8000) )
            {
              n = __asan_report_load_n(n, 12LL);
            }
            *(_QWORD *)(v5 + 112) = *(_QWORD *)n;
            *(_DWORD *)(v5 + 120) = *(_DWORD *)(n + 8);
            *(float *)second_low.m128i_i32 = getPlaneDistance((const Vector3 *)(v5 + 80), (const Vector3 *)(v5 + 112));
            *(_DWORD *)(v5 + 64) = _mm_cvtsi128_si32(second_low);
            if ( std::priority_queue<std::pair<std::shared_ptr<Creature>,float>,std::vector<std::pair<std::shared_ptr<Creature>,float>>,procPrint(GmContext &,std::vector const&<std::string,std::allocator<std::char_traits<char>>>,std::char_traits<char>&)::{lambda(std::pair<std::shared_ptr<Creature>,float>,std::pair<std::shared_ptr<Creature>,float>)#1}>::size((const std::priority_queue<std::pair<std::shared_ptr<Creature>,float>,std::vector<std::pair<std::shared_ptr<Creature>,float>>,procPrint(GmContext&,const std::vector<std::string >&,std::string&)::<lambda(std::pair<std::shared_ptr<Creature>,float>,std::pair<std::shared_ptr<Creature>,float>)> > *const)(v5 + 304)) > 9 )
            {
              v41 = std::priority_queue<std::pair<std::shared_ptr<Creature>,float>,std::vector<std::pair<std::shared_ptr<Creature>,float>>,procPrint(GmContext &,std::vector const&<std::string,std::allocator<std::char_traits<char>>>,std::char_traits<char>&)::{lambda(std::pair<std::shared_ptr<Creature>,float>,std::pair<std::shared_ptr<Creature>,float>)#1}>::top((const std::priority_queue<std::pair<std::shared_ptr<Creature>,float>,std::vector<std::pair<std::shared_ptr<Creature>,float>>,procPrint(GmContext&,const std::vector<std::string >&,std::string&)::<lambda(std::pair<std::shared_ptr<Creature>,float>,std::pair<std::shared_ptr<Creature>,float>)> > *const)(v5 + 304));
              if ( *(_BYTE *)(((unsigned __int64)&v41->second >> 3) + 0x7FFF8000) != 0
                && *(_BYTE *)(((unsigned __int64)&v41->second >> 3) + 0x7FFF8000) <= 3 )
              {
                __asan_report_load4(&v41->second);
              }
              second_low = (__m128i)LODWORD(v41->second);
              if ( *(float *)second_low.m128i_i32 > *(float *)(v5 + 64) )
              {
                std::priority_queue<std::pair<std::shared_ptr<Creature>,float>,std::vector<std::pair<std::shared_ptr<Creature>,float>>,procPrint(GmContext &,std::vector const&<std::string,std::allocator<std::char_traits<char>>>,std::char_traits<char>&)::{lambda(std::pair<std::shared_ptr<Creature>,float>,std::pair<std::shared_ptr<Creature>,float>)#1}>::pop((std::priority_queue<std::pair<std::shared_ptr<Creature>,float>,std::vector<std::pair<std::shared_ptr<Creature>,float>>,procPrint(GmContext&,const std::vector<std::string >&,std::string&)::<lambda(std::pair<std::shared_ptr<Creature>,float>,std::pair<std::shared_ptr<Creature>,float>)> > *const)(v5 + 304));
                std::make_pair<std::shared_ptr<Creature> &,float &>(
                  (std::pair<std::shared_ptr<Creature>,float> *)&__s,
                  creature_ptr,
                  (float *)(v5 + 64));
                std::priority_queue<std::pair<std::shared_ptr<Creature>,float>,std::vector<std::pair<std::shared_ptr<Creature>,float>>,procPrint(GmContext &,std::vector const&<std::string,std::allocator<std::char_traits<char>>>,std::char_traits<char>&)::{lambda(std::pair<std::shared_ptr<Creature>,float>,std::pair<std::shared_ptr<Creature>,float>)#1}>::push(
                  (std::priority_queue<std::pair<std::shared_ptr<Creature>,float>,std::vector<std::pair<std::shared_ptr<Creature>,float>>,procPrint(GmContext&,const std::vector<std::string >&,std::string&)::<lambda(std::pair<std::shared_ptr<Creature>,float>,std::pair<std::shared_ptr<Creature>,float>)> > *const)(v5 + 304),
                  (std::priority_queue<std::pair<std::shared_ptr<Creature>,float>,std::vector<std::pair<std::shared_ptr<Creature>,float>>,procPrint(GmContext&,const std::vector<std::string >&,std::string&)::<lambda(std::pair<std::shared_ptr<Creature>,float>,std::pair<std::shared_ptr<Creature>,float>)> >::value_type *)&__s);
                std::pair<std::shared_ptr<Creature>,float>::~pair((std::pair<std::shared_ptr<Creature>,float> *const)&__s);
              }
            }
            else
            {
              std::make_pair<std::shared_ptr<Creature> &,float &>(&__x, creature_ptr, (float *)(v5 + 64));
              std::priority_queue<std::pair<std::shared_ptr<Creature>,float>,std::vector<std::pair<std::shared_ptr<Creature>,float>>,procPrint(GmContext &,std::vector const&<std::string,std::allocator<std::char_traits<char>>>,std::char_traits<char>&)::{lambda(std::pair<std::shared_ptr<Creature>,float>,std::pair<std::shared_ptr<Creature>,float>)#1}>::push(
                (std::priority_queue<std::pair<std::shared_ptr<Creature>,float>,std::vector<std::pair<std::shared_ptr<Creature>,float>>,procPrint(GmContext&,const std::vector<std::string >&,std::string&)::<lambda(std::pair<std::shared_ptr<Creature>,float>,std::pair<std::shared_ptr<Creature>,float>)> > *const)(v5 + 304),
                &__x);
              std::pair<std::shared_ptr<Creature>,float>::~pair(&__x);
            }
          }
        }
      }
      __gnu_cxx::__normal_iterator<std::shared_ptr<Creature> *,std::vector<std::shared_ptr<Creature>>>::operator++(&__for_begin);
    }
    common::tools::StringStream<common::tools::FixedBuffer<4096>>::StringStream((common::tools::StringStream<common::tools::FixedBuffer<4096> > *const)(v5 + 176));
    std::deque<std::pair<std::shared_ptr<Creature>,float>>::deque((std::deque<std::pair<std::shared_ptr<Creature>,float>> *const)(v5 + 528));
    while ( !std::priority_queue<std::pair<std::shared_ptr<Creature>,float>,std::vector<std::pair<std::shared_ptr<Creature>,float>>,procPrint(GmContext &,std::vector const&<std::string,std::allocator<std::char_traits<char>>>,std::char_traits<char>&)::{lambda(std::pair<std::shared_ptr<Creature>,float>,std::pair<std::shared_ptr<Creature>,float>)#1}>::empty((const std::priority_queue<std::pair<std::shared_ptr<Creature>,float>,std::vector<std::pair<std::shared_ptr<Creature>,float>>,procPrint(GmContext&,const std::vector<std::string >&,std::string&)::<lambda(std::pair<std::shared_ptr<Creature>,float>,std::pair<std::shared_ptr<Creature>,float>)> > *const)(v5 + 304)) )
    {
      v42 = std::priority_queue<std::pair<std::shared_ptr<Creature>,float>,std::vector<std::pair<std::shared_ptr<Creature>,float>>,procPrint(GmContext &,std::vector const&<std::string,std::allocator<std::char_traits<char>>>,std::char_traits<char>&)::{lambda(std::pair<std::shared_ptr<Creature>,float>,std::pair<std::shared_ptr<Creature>,float>)#1}>::top((const std::priority_queue<std::pair<std::shared_ptr<Creature>,float>,std::vector<std::pair<std::shared_ptr<Creature>,float>>,procPrint(GmContext&,const std::vector<std::string >&,std::string&)::<lambda(std::pair<std::shared_ptr<Creature>,float>,std::pair<std::shared_ptr<Creature>,float>)> > *const)(v5 + 304));
      std::deque<std::pair<std::shared_ptr<Creature>,float>>::emplace_front<std::pair<std::shared_ptr<Creature>,float> const&>(
        (std::deque<std::pair<std::shared_ptr<Creature>,float>> *const)(v5 + 528),
        v42,
        v42);
      std::priority_queue<std::pair<std::shared_ptr<Creature>,float>,std::vector<std::pair<std::shared_ptr<Creature>,float>>,procPrint(GmContext &,std::vector const&<std::string,std::allocator<std::char_traits<char>>>,std::char_traits<char>&)::{lambda(std::pair<std::shared_ptr<Creature>,float>,std::pair<std::shared_ptr<Creature>,float>)#1}>::pop((std::priority_queue<std::pair<std::shared_ptr<Creature>,float>,std::vector<std::pair<std::shared_ptr<Creature>,float>>,procPrint(GmContext&,const std::vector<std::string >&,std::string&)::<lambda(std::pair<std::shared_ptr<Creature>,float>,std::pair<std::shared_ptr<Creature>,float>)> > *const)(v5 + 304));
    }
    if ( std::deque<std::pair<std::shared_ptr<Creature>,float>>::empty((const std::deque<std::pair<std::shared_ptr<Creature>,float>> *const)(v5 + 528)) )
    {
      std::string::operator=(ret_msg, "PRINT NEARENTITY doesn't find any entity");
      v3 = -1;
    }
    else
    {
      __for_range_0 = (std::deque<std::pair<std::shared_ptr<Creature>,float>> *)(v5 + 528);
      std::deque<std::pair<std::shared_ptr<Creature>,float>>::begin(
        &__for_begin_0,
        (std::deque<std::pair<std::shared_ptr<Creature>,float>> *const)(v5 + 528));
      std::deque<std::pair<std::shared_ptr<Creature>,float>>::end(&__for_end_0, __for_range_0);
      while ( std::operator!=<std::pair<std::shared_ptr<Creature>,float>,std::pair<std::shared_ptr<Creature>,float>&,std::pair<std::shared_ptr<Creature>,float>*>(
                &__for_begin_0,
                &__for_end_0) )
      {
        __in = std::_Deque_iterator<std::pair<std::shared_ptr<Creature>,float>,std::pair<std::shared_ptr<Creature>,float>&,std::pair<std::shared_ptr<Creature>,float>*>::operator*(&__for_begin_0);
        creature_ptr_0 = std::get<0ul,std::shared_ptr<Creature>,float>(__in);
        dis = std::get<1ul,std::shared_ptr<Creature>,float>(__in);
        if ( !std::operator==<Creature>(creature_ptr_0, 0LL) )
        {
          v43 = common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(
                  (common::tools::StringStream<common::tools::FixedBuffer<4096> > *const)(v5 + 176),
                  "Entity:");
          v44 = std::__shared_ptr_access<Creature,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Creature,(__gnu_cxx::_Lock_policy)2,false,false> *const)creature_ptr_0);
          if ( *(_BYTE *)(((unsigned __int64)v44 >> 3) + 0x7FFF8000) )
            __asan_report_load8(v44);
          v45 = *(void (__fastcall ***)(std::string *, std::__shared_ptr_access<Creature,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *))v44->baseclass_0;
          if ( *(_BYTE *)((*(_QWORD *)v44->baseclass_0 >> 3) + 0x7FFF8000LL) )
            __asan_report_load8(*(_QWORD *)v44->baseclass_0);
          (*v45)(&v, v44);
          common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(v43, &v);
          std::string::~string(&v);
          if ( filter_entity_type == PROT_ENTITY_GADGET )
          {
            std::dynamic_pointer_cast<Gadget,Creature>((const std::shared_ptr<Creature> *)(v5 + 208));
            if ( std::operator!=<Gadget>((const std::shared_ptr<Gadget> *)(v5 + 208), 0LL) )
            {
              v46 = common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(
                      (common::tools::StringStream<common::tools::FixedBuffer<4096> > *const)(v5 + 176),
                      "[gadget state: ");
              v47 = std::__shared_ptr_access<Gadget,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Gadget,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v5 + 208));
              State = Gadget::getState(v47);
              v49 = common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(v46, State);
              common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(v49, "]");
            }
            std::shared_ptr<Gadget>::~shared_ptr((std::shared_ptr<Gadget> *const)(v5 + 208));
          }
          v50 = common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(
                  (common::tools::StringStream<common::tools::FixedBuffer<4096> > *const)(v5 + 176),
                  " Distance:");
          if ( *(_BYTE *)(((unsigned __int64)dis >> 3) + 0x7FFF8000) != 0
            && (char)(((unsigned __int8)dis & 7) + 3) >= *(_BYTE *)(((unsigned __int64)dis >> 3) + 0x7FFF8000) )
          {
            __asan_report_load4(dis);
          }
          v51 = common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(v50, *dis);
          common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(v51, "\n");
        }
        std::_Deque_iterator<std::pair<std::shared_ptr<Creature>,float>,std::pair<std::shared_ptr<Creature>,float>&,std::pair<std::shared_ptr<Creature>,float>*>::operator++(&__for_begin_0);
      }
      if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
        __asan_report_load8(&context->player);
      v52 = context->player;
      common::tools::StringStream<common::tools::FixedBuffer<4096>>::str[abi:cxx11](
        &v,
        (common::tools::StringStream<common::tools::FixedBuffer<4096> > *const)(v5 + 176));
      Player::notifyServerLog(v52, SERVER_LOG_LEVEL, LOG_LEVEL_NONE, &v);
      std::string::~string(&v);
      common::tools::StringStream<common::tools::FixedBuffer<4096>>::str[abi:cxx11](
        &v,
        (common::tools::StringStream<common::tools::FixedBuffer<4096> > *const)(v5 + 176));
      std::string::operator=(ret_msg, &v);
      std::string::~string(&v);
      v3 = 0;
    }
    std::deque<std::pair<std::shared_ptr<Creature>,float>>::~deque((std::deque<std::pair<std::shared_ptr<Creature>,float>> *const)(v5 + 528));
    common::tools::StringStream<common::tools::FixedBuffer<4096>>::~StringStream((common::tools::StringStream<common::tools::FixedBuffer<4096> > *const)(v5 + 176));
    goto LABEL_125;
  }
  if ( std::vector<std::string>::size(param_vec) <= 1 )
    goto LABEL_29;
  *(_DWORD *)(v5 + 64) = 0;
  v16 = std::vector<std::string>::operator[](param_vec, 1uLL);
  if ( !common::tools::StringUtils::strToNum<unsigned int>(v16, (unsigned int *)(v5 + 64), 1) )
  {
    if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
      __asan_report_load8(&context->player);
    Player::getSceneComp(context->player);
    PlayerSceneComp::getCurScene((const PlayerSceneComp *const)(v5 + 144));
    if ( std::operator!=<Scene>((const std::shared_ptr<Scene> *)(v5 + 144), 0LL) )
    {
      v17 = std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v5 + 144));
      BlockGroupComp = Scene::getBlockGroupComp(v17);
      if ( *(_BYTE *)(((unsigned __int64)BlockGroupComp >> 3) + 0x7FFF8000) )
        __asan_report_load8(BlockGroupComp);
      v19 = (unsigned __int64)(BlockGroupComp->_vptr_SceneCompBase + 10);
      if ( *(_BYTE *)((v19 >> 3) + 0x7FFF8000) )
        __asan_report_load8(BlockGroupComp->_vptr_SceneCompBase + 10);
      (*(void (__fastcall **)(unsigned __int64, SceneBlockGroupComp *, _QWORD, _QWORD, _QWORD, _QWORD))v19)(
        v5 + 176,
        BlockGroupComp,
        *(unsigned int *)(v5 + 64),
        0LL,
        0LL,
        0LL);
      if ( std::operator!=<Group>((const std::shared_ptr<Group> *)(v5 + 176), 0LL) )
      {
        common::tools::StringStream<common::tools::FixedBuffer<4096>>::StringStream((common::tools::StringStream<common::tools::FixedBuffer<4096> > *const)(v5 + 208));
        v20 = std::__shared_ptr_access<Group,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Group,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v5 + 176));
        if ( *(_BYTE *)(((unsigned __int64)v20 >> 3) + 0x7FFF8000) )
          __asan_report_load8(v20);
        v21 = (void (__fastcall **)(std::string *, std::__shared_ptr_access<Group,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *))v20->_vptr_DescribalBase;
        if ( *(_BYTE *)(((unsigned __int64)v20->_vptr_DescribalBase >> 3) + 0x7FFF8000) )
          __asan_report_load8(v20->_vptr_DescribalBase);
        (*v21)(&v, v20);
        common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(
          (common::tools::StringStream<common::tools::FixedBuffer<4096> > *const)(v5 + 208),
          &v);
        std::string::~string(&v);
        common::tools::StringStream<common::tools::FixedBuffer<4096>>::str[abi:cxx11](
          &v,
          (common::tools::StringStream<common::tools::FixedBuffer<4096> > *const)(v5 + 208));
        std::string::operator=(ret_msg, &v);
        std::string::~string(&v);
        if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
          __asan_report_load8(&context->player);
        v22 = context->player;
        common::tools::StringStream<common::tools::FixedBuffer<4096>>::str[abi:cxx11](
          &v,
          (common::tools::StringStream<common::tools::FixedBuffer<4096> > *const)(v5 + 208));
        Player::notifyServerLog(v22, SERVER_LOG_LEVEL, LOG_LEVEL_NONE, &v);
        std::string::~string(&v);
        common::tools::StringStream<common::tools::FixedBuffer<4096>>::~StringStream((common::tools::StringStream<common::tools::FixedBuffer<4096> > *const)(v5 + 208));
      }
      std::shared_ptr<Group>::~shared_ptr((std::shared_ptr<Group> *const)(v5 + 176));
    }
LABEL_26:
    v3 = 0;
    std::shared_ptr<Scene>::~shared_ptr((std::shared_ptr<Scene> *const)(v5 + 144));
    goto LABEL_127;
  }
  std::string::operator=(ret_msg, "group_id parse fail");
  v3 = -1;
LABEL_127:
  result = v3;
  if ( v70 == (char *)v5 )
  {
    *(_QWORD *)((v5 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8008) = 0LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8010) = 0LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8018) = 0LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8020) = 0LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8028) = 0LL;
    *(_DWORD *)((v5 >> 3) + 0x7FFF8034) = 0;
    *(_QWORD *)((v5 >> 3) + 0x7FFF803C) = 0LL;
    *(_DWORD *)((v5 >> 3) + 0x7FFF804C) = 0;
  }
  else
  {
    *(_QWORD *)v5 = 1172321806LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8020) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8028) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8030) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8038) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8040) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8048) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 8934: range 0000000017C0B398-0000000017C0B42B
bool __cdecl procPrint(GmContext &,std::vector<std::string> const&,std::string&)::{lambda(std::pair<std::shared_ptr<Creature>,float>,std::pair<std::shared_ptr<Creature>,float>)#1}::operator()(
        const procPrint::<lambda(std::pair<std::shared_ptr<Creature>, float>, std::pair<std::shared_ptr<Creature>, float>)> *const __closure,
        std::pair<std::shared_ptr<Creature>,float> *p_l,
        std::pair<std::shared_ptr<Creature>,float> *p_r)
{
  float second; // xmm1_4

  if ( *(_BYTE *)(((unsigned __int64)&p_l->second >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&p_l->second >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4(&p_l->second);
  }
  second = p_l->second;
  if ( *(_BYTE *)(((unsigned __int64)&p_r->second >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&p_r->second >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4(&p_r->second);
  }
  return p_r->second > second;
};

// Line 9054: range 0000000017D78028-0000000017D780CA
void __cdecl procLockTeamRegister::procLockTeamRegister(procLockTeamRegister *const this)
{
  std::function<int(GmContext&,const std::vector<std::string>&,std::string&)> *v1; // rax
  std::allocator<char> __a; // [rsp+1Fh] [rbp-31h] BYREF
  std::string __k; // [rsp+20h] [rbp-30h] BYREF

  std::allocator<char>::allocator(&__a);
  std::string::basic_string<std::allocator<char>>(&__k, "LOCKTEAM", &__a);
  v1 = std::unordered_map<std::string,std::function<int ()(GmContext &,std::vector<std::string> const&,std::string&)>>::operator[](
         &GmUtils::op_func_map[abi:cxx11],
         &__k);
  std::function<int ()(GmContext &,std::vector<std::string> const&,std::string&)>::operator=<int (&)(GmContext &,std::vector<std::string> const&,std::string&)>(
    v1,
    (int (*)(GmContext *, const std::vector<std::string> *, std::string *))procLockTeam);
  std::string::~string(&__k);
  std::allocator<char>::~allocator(&__a);
};

// Line 9055: range 0000000017C0CD17-0000000017C0D2CC
int32_t __cdecl procLockTeam(GmContext *context, const std::vector<std::string> *param_vec, std::string *ret_msg)
{
  int32_t v3; // r14d
  unsigned __int64 v4; // r13
  __int64 v5; // rax
  _DWORD *v6; // r12
  const std::string *v7; // rax
  const std::string *v8; // rax
  common::milog::MiLogStream *v9; // r14
  const std::string *v10; // rax
  int v11; // r15d
  common::milog::MiLogStream *v12; // rdx
  PlayerAvatarComp *v13; // rax
  const std::string *v14; // rax
  PlayerAvatarComp *AvatarComp; // rax
  int32_t result; // eax
  __gnu_cxx::__normal_iterator<const std::string*,std::vector<std::string> > __rhs; // [rsp+28h] [rbp-F8h] BYREF
  common::milog::MiLogStream v19; // [rsp+30h] [rbp-F0h] BYREF
  char v20[208]; // [rsp+50h] [rbp-D0h] BYREF

  v4 = (unsigned __int64)v20;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v5 = __asan_stack_malloc_2(160LL);
    if ( v5 )
      v4 = v5;
  }
  *(_QWORD *)v4 = 1102416563LL;
  *(_QWORD *)(v4 + 8) = "3 48 4 14 avatar_id:9066 64 8 9 iter:9064 96 24 18 avatar_id_vec:9063";
  *(_QWORD *)(v4 + 16) = procLockTeam;
  v6 = (_DWORD *)(v4 >> 3);
  v6[536862720] = -235802127;
  v6[536862721] = -234556943;
  v6[536862722] = -218959360;
  v6[536862723] = -218103808;
  v6[536862724] = -202116109;
  if ( !std::vector<std::string>::size(param_vec) )
  {
    std::string::operator=(ret_msg, "param not enough");
    v3 = -1;
    goto LABEL_27;
  }
  v7 = std::vector<std::string>::operator[](param_vec, 0LL);
  if ( !std::operator==<char>(v7, "LOCK") )
  {
    v14 = std::vector<std::string>::operator[](param_vec, 0LL);
    if ( std::operator==<char>(v14, "UNLOCK") )
    {
      if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
        __asan_report_load8(&context->player);
      AvatarComp = Player::getAvatarComp(context->player);
      if ( PlayerAvatarComp::unlockTeamAvatarByQuest(AvatarComp, CHANGE_SCENE_TEAM_REASON_GM) )
      {
        common::milog::MiLogStream::create(
          &v19,
          &common::milog::MiLogDefault::default_log_obj_,
          3u,
          "./src/player/gm/player_gm_comp.cpp",
          "procLockTeam",
          9089);
        common::milog::MiLogStream::operator<<<char [17],(char *[17])0>(&v19, (const char (*)[17])"unlockTeam fail.");
        common::milog::MiLogStream::~MiLogStream(&v19);
        v3 = -1;
        goto LABEL_27;
      }
    }
    goto LABEL_26;
  }
  std::vector<unsigned int>::vector((std::vector<unsigned int> *const)(v4 + 96));
  __rhs._M_current = std::vector<std::string>::begin(param_vec)._M_current;
  *(__gnu_cxx::__normal_iterator<const std::string*,std::vector<std::string> > *)(v4 + 64) = __gnu_cxx::__normal_iterator<std::string const*,std::vector<std::string>>::operator+(
                                                                                               &__rhs,
                                                                                               1LL);
  while ( 1 )
  {
    __rhs._M_current = std::vector<std::string>::end(param_vec)._M_current;
    if ( !__gnu_cxx::operator!=<std::string const*,std::vector<std::string>>(
            (const __gnu_cxx::__normal_iterator<const std::string*,std::vector<std::string> > *)(v4 + 64),
            &__rhs) )
      break;
    *(_DWORD *)(v4 + 48) = 0;
    v8 = __gnu_cxx::__normal_iterator<std::string const*,std::vector<std::string>>::operator*((const __gnu_cxx::__normal_iterator<const std::string*,std::vector<std::string> > *const)(v4 + 64));
    if ( common::tools::StringUtils::strToNum<unsigned int>(v8, (unsigned int *)(v4 + 48), 1) )
    {
      common::milog::MiLogStream::create(
        &v19,
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/player/gm/player_gm_comp.cpp",
        "procLockTeam",
        9069);
      v9 = common::milog::MiLogStream::operator<<<char [23],(char *[23])0>(
             &v19,
             (const char (*)[23])" param invalid. param:");
      v10 = __gnu_cxx::__normal_iterator<std::string const*,std::vector<std::string>>::operator*((const __gnu_cxx::__normal_iterator<const std::string*,std::vector<std::string> > *const)(v4 + 64));
      common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v9, v10);
      common::milog::MiLogStream::~MiLogStream(&v19);
      v3 = -1;
      v11 = 0;
      goto LABEL_19;
    }
    std::vector<unsigned int>::push_back(
      (std::vector<unsigned int> *const)(v4 + 96),
      (const std::vector<unsigned int>::value_type *)(v4 + 48));
    __gnu_cxx::__normal_iterator<std::string const*,std::vector<std::string>>::operator++((__gnu_cxx::__normal_iterator<const std::string*,std::vector<std::string> > *const)(v4 + 64));
  }
  if ( std::vector<unsigned int>::empty((const std::vector<unsigned int> *const)(v4 + 96)) )
  {
    common::milog::MiLogStream::create(
      &v19,
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/player/gm/player_gm_comp.cpp",
      "procLockTeam",
      9076);
    v12 = common::milog::MiLogStream::operator<<<char [22],(char *[22])0>(
            &v19,
            (const char (*)[22])"param invalid. param:");
    common::milog::MiLogStream::operator<<<std::string>(v12, param_vec);
    common::milog::MiLogStream::~MiLogStream(&v19);
    v3 = -1;
    v11 = 0;
  }
  else
  {
    if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
      __asan_report_load8(&context->player);
    v13 = Player::getAvatarComp(context->player);
    if ( PlayerAvatarComp::lockTeamAvatarByQuest(
           v13,
           (const std::vector<unsigned int> *)(v4 + 96),
           CHANGE_SCENE_TEAM_REASON_GM) )
    {
      common::milog::MiLogStream::create(
        &v19,
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/player/gm/player_gm_comp.cpp",
        "procLockTeam",
        9081);
      common::milog::MiLogStream::operator<<<char [15],(char *[15])0>(&v19, (const char (*)[15])"lockTeam fail.");
      common::milog::MiLogStream::~MiLogStream(&v19);
      v3 = -1;
      v11 = 0;
    }
    else
    {
      v11 = 1;
    }
  }
LABEL_19:
  std::vector<unsigned int>::~vector((std::vector<unsigned int> *const)(v4 + 96));
  if ( v11 == 1 )
LABEL_26:
    v3 = 0;
LABEL_27:
  result = v3;
  if ( v20 == (char *)v4 )
  {
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8008) = 0LL;
    *(_DWORD *)((v4 >> 3) + 0x7FFF8010) = 0;
  }
  else
  {
    *(_QWORD *)v4 = 1172321806LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v4 >> 3) + 0x7FFF8010) = -168430091;
  }
  return result;
};

// Line 9096: range 0000000017D780CC-0000000017D7816E
void __cdecl procActivityRegister::procActivityRegister(procActivityRegister *const this)
{
  std::function<int(GmContext&,const std::vector<std::string>&,std::string&)> *v1; // rax
  std::allocator<char> __a; // [rsp+1Fh] [rbp-31h] BYREF
  std::string __k; // [rsp+20h] [rbp-30h] BYREF

  std::allocator<char>::allocator(&__a);
  std::string::basic_string<std::allocator<char>>(&__k, "ACTIVITY", &__a);
  v1 = std::unordered_map<std::string,std::function<int ()(GmContext &,std::vector<std::string> const&,std::string&)>>::operator[](
         &GmUtils::op_func_map[abi:cxx11],
         &__k);
  std::function<int ()(GmContext &,std::vector<std::string> const&,std::string&)>::operator=<int (&)(GmContext &,std::vector<std::string> const&,std::string&)>(
    v1,
    (int (*)(GmContext *, const std::vector<std::string> *, std::string *))procActivity);
  std::string::~string(&__k);
  std::allocator<char>::~allocator(&__a);
};

// Line 9097: range 0000000017C0D2CD-0000000017C103D6
int32_t __cdecl procActivity(GmContext *context, const std::vector<std::string> *param_vec, std::string *ret_msg)
{
  int32_t AllWatcherTakeable; // r13d
  unsigned __int64 v4; // r14
  __int64 v5; // rax
  _DWORD *v6; // r12
  const std::string *v7; // rax
  PlayerActivityComp *ActivityComp; // rax
  const std::string *v9; // rax
  const std::string *v10; // rax
  const std::string *v11; // rax
  common::milog::MiLogStream *v12; // rcx
  int v13; // r15d
  common::minet::Packet *v14; // r15
  uint32_t Uid; // eax
  GameserverService *v16; // r15
  common::minet::PacketPtr v17; // rdi
  const std::string *v18; // rax
  const std::string *v19; // rax
  uint32_t v20; // eax
  common::milog::MiLogStream *v21; // r13
  common::milog::MiLogStream *v22; // rax
  int v23; // r15d
  const std::string *v24; // rax
  const std::string *v25; // rax
  uint32_t v26; // eax
  std::__shared_ptr_access<BaseActivity,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v27; // rax
  common::milog::MiLogStream *v29; // r13
  common::milog::MiLogStream *v30; // rax
  __int64 v31; // rcx
  __int64 v32; // rax
  __int64 v33; // rax
  const std::string *v34; // rax
  const std::string *v35; // rax
  uint32_t v36; // eax
  std::__shared_ptr_access<BaseActivity,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v37; // rax
  common::milog::MiLogStream *v39; // r13
  common::milog::MiLogStream *v40; // rax
  const std::string *v41; // rax
  const std::string *v42; // rax
  const std::string *v43; // rax
  const std::string *v44; // rax
  const std::string *v45; // rax
  const std::string *v46; // rax
  const std::string *v47; // rax
  const std::string *v48; // rax
  uint32_t v49; // eax
  std::__shared_ptr_access<BaseActivity,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v50; // rax
  common::milog::MiLogStream *v52; // r13
  common::milog::MiLogStream *v53; // rax
  const std::string *v54; // rax
  unsigned int *v55; // r8
  unsigned int *v56; // r9
  uint32_t v57; // eax
  std::__shared_ptr_access<BaseActivity,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v58; // rax
  BaseActivity *v60; // rax
  const std::string *v61; // rax
  const std::string *v62; // rax
  const std::string *v63; // rax
  uint32_t v64; // eax
  std::__shared_ptr_access<BaseActivity,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v65; // rax
  common::milog::MiLogStream *v67; // r13
  common::milog::MiLogStream *v68; // rax
  int v69; // r15d
  const std::string *v70; // rax
  const std::string *v71; // rax
  const std::string *v72; // rax
  uint32_t v73; // eax
  std::__shared_ptr_access<BaseActivity,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v74; // rax
  common::milog::MiLogStream *v76; // r13
  common::milog::MiLogStream *v77; // rax
  int v78; // r15d
  const std::string *v79; // rax
  uint32_t v80; // eax
  const std::string *v81; // rax
  const std::string *v82; // rax
  const std::string *v83; // rax
  uint32_t v84; // eax
  int v85; // r15d
  const std::string *v86; // rax
  const std::string *v87; // rax
  const std::string *v88; // rax
  uint32_t v89; // eax
  _BOOL4 v90; // r15d
  const std::string *v91; // rax
  const std::string *v92; // rax
  const std::string *v93; // rax
  const std::string *v94; // rax
  int v95; // r15d
  const std::string *v96; // rax
  const std::string *v97; // rax
  const std::string *v98; // rax
  uint32_t v99; // eax
  _BOOL4 v100; // r15d
  const std::string *v101; // rax
  int v102; // r15d
  const std::string *v103; // rax
  const std::string *v104; // rax
  const std::string *v105; // rax
  const std::string *v106; // rax
  const std::string *v107; // rax
  const std::string *v108; // rax
  int32_t result; // eax
  proto::VirtualItem coin_type; // [rsp+30h] [rbp-3C0h]
  unsigned int coin_num; // [rsp+34h] [rbp-3BCh]
  std::set<unsigned int>::iterator __for_begin; // [rsp+38h] [rbp-3B8h] BYREF
  std::set<unsigned int>::iterator __for_end; // [rsp+40h] [rbp-3B0h] BYREF
  const std::set<unsigned int> *meet_cond_set; // [rsp+48h] [rbp-3A8h]
  const std::set<unsigned int> *__for_range; // [rsp+50h] [rbp-3A0h]
  const unsigned int *cond_id; // [rsp+58h] [rbp-398h]
  std::string __rhs; // [rsp+60h] [rbp-390h] BYREF
  common::milog::MiLogStream v119; // [rsp+80h] [rbp-370h] BYREF
  char v120[848]; // [rsp+A0h] [rbp-350h] BYREF

  v4 = (unsigned __int64)v120;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v5 = __asan_stack_malloc_4(800LL);
    if ( v5 )
      v4 = v5;
  }
  *(_QWORD *)v4 = 1102416563LL;
  *(_QWORD *)(v4 + 8) = "8 48 4 16 activity_id:9475 64 4 12 coin_id:9500 80 4 8 num:9525 96 16 17 activity_ptr:9481 128 1"
                        "6 17 activity_ptr:9294 160 32 8 req:9130 224 72 11 gmtool:9487 336 392 7 ss:9194";
  *(_QWORD *)(v4 + 16) = procActivity;
  v6 = (_DWORD *)(v4 >> 3);
  v6[536862720] = -235802127;
  v6[536862721] = -234556943;
  v6[536862722] = -234556924;
  v6[536862723] = -219021312;
  v6[536862724] = -219021312;
  v6[536862726] = -218959118;
  v6[536862729] = -218959360;
  v6[536862730] = 62194;
  v6[536862742] = -218103808;
  v6[536862743] = -202116109;
  v6[536862744] = -202116109;
  if ( !std::vector<std::string>::size(param_vec) )
    goto LABEL_201;
  v7 = std::vector<std::string>::operator[](param_vec, 0LL);
  if ( std::operator==<char>(v7, "REFRESH") )
  {
    if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
      __asan_report_load8(&context->player);
    ActivityComp = Player::getActivityComp(context->player);
    PlayerActivityComp::refreshActivityAndUpdateTimer(ActivityComp);
    goto LABEL_229;
  }
  v9 = std::vector<std::string>::operator[](param_vec, 0LL);
  if ( !std::operator==<char>(v9, "CLEAR_BANNER") )
  {
    v18 = std::vector<std::string>::operator[](param_vec, 0LL);
    if ( std::operator==<char>(v18, "CLEAR") )
    {
      if ( std::vector<std::string>::size(param_vec) <= 1 )
        goto LABEL_201;
      *(_DWORD *)(v4 + 64) = 0;
      v19 = std::vector<std::string>::operator[](param_vec, 1uLL);
      if ( !common::tools::StringUtils::strToNum<unsigned int>(v19, (unsigned int *)(v4 + 64), 1) )
      {
        if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
          __asan_report_load8(&context->player);
        v20 = (unsigned int)Player::getActivityComp(context->player);
        PlayerActivityComp::findBaseActivity((PlayerActivityComp *const)(v4 + 96), v20);
        if ( std::operator==<BaseActivity>(0LL, (const std::shared_ptr<BaseActivity> *)(v4 + 96)) )
        {
          common::milog::MiLogStream::create(
            &v119,
            &common::milog::MiLogDefault::default_log_obj_,
            3u,
            "./src/player/gm/player_gm_comp.cpp",
            "procActivity",
            9159);
          v21 = common::milog::MiLogStream::operator<<<char [6],(char *[6])0>(&v119, (const char (*)[6])"uid: ");
          if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
            __asan_report_load8(&context->player);
          *(_DWORD *)(v4 + 80) = Player::getUid(context->player);
          v22 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                  v21,
                  (const unsigned int *)(v4 + 80));
          common::milog::MiLogStream::operator<<<char [19],(char *[19])0>(v22, (const char (*)[19])" activity not open");
          common::milog::MiLogStream::~MiLogStream(&v119);
          AllWatcherTakeable = -1;
          v23 = 0;
        }
        else
        {
          std::shared_ptr<BaseActivity>::shared_ptr(
            (std::shared_ptr<BaseActivity> *const)(v4 + 128),
            (const std::shared_ptr<BaseActivity> *)(v4 + 96));
          BaseActivityGmTool::BaseActivityGmTool((BaseActivityGmTool *const)(v4 + 224), (BaseActivityPtr *)(v4 + 128));
          std::shared_ptr<BaseActivity>::~shared_ptr((std::shared_ptr<BaseActivity> *const)(v4 + 128));
          BaseActivityGmTool::clearByGm((BaseActivityGmTool *const)(v4 + 224));
          BaseActivityGmTool::~BaseActivityGmTool((BaseActivityGmTool *const)(v4 + 224));
          v23 = 1;
        }
        std::shared_ptr<BaseActivity>::~shared_ptr((std::shared_ptr<BaseActivity> *const)(v4 + 96));
        if ( v23 == 1 )
          goto LABEL_229;
        goto LABEL_230;
      }
LABEL_138:
      std::string::operator=(ret_msg, "entity_id parse fail");
      AllWatcherTakeable = -1;
      goto LABEL_230;
    }
    v24 = std::vector<std::string>::operator[](param_vec, 0LL);
    if ( std::operator==<char>(v24, "GET_ALL_MEET_COND") )
    {
      if ( std::vector<std::string>::size(param_vec) > 1 )
      {
        *(_DWORD *)(v4 + 64) = 0;
        v25 = std::vector<std::string>::operator[](param_vec, 1uLL);
        if ( !common::tools::StringUtils::strToNum<unsigned int>(v25, (unsigned int *)(v4 + 64), 1) )
        {
          if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
            __asan_report_load8(&context->player);
          v26 = (unsigned int)Player::getActivityComp(context->player);
          PlayerActivityComp::findBaseActivity((PlayerActivityComp *const)(v4 + 96), v26);
          if ( std::operator==<BaseActivity>(0LL, (const std::shared_ptr<BaseActivity> *)(v4 + 96))
            || (v27 = std::__shared_ptr_access<BaseActivity,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<BaseActivity,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 96)),
                !BaseActivity::isOpening(v27, 0)) )
          {
            common::milog::MiLogStream::create(
              &v119,
              &common::milog::MiLogDefault::default_log_obj_,
              3u,
              "./src/player/gm/player_gm_comp.cpp",
              "procActivity",
              9188);
            v29 = common::milog::MiLogStream::operator<<<char [6],(char *[6])0>(&v119, (const char (*)[6])"uid: ");
            if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
              __asan_report_load8(&context->player);
            *(_DWORD *)(v4 + 80) = Player::getUid(context->player);
            v30 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                    v29,
                    (const unsigned int *)(v4 + 80));
            common::milog::MiLogStream::operator<<<char [19],(char *[19])0>(
              v30,
              (const char (*)[19])" activity not open");
            common::milog::MiLogStream::~MiLogStream(&v119);
            AllWatcherTakeable = -1;
          }
          else
          {
            std::shared_ptr<BaseActivity>::shared_ptr(
              (std::shared_ptr<BaseActivity> *const)(v4 + 128),
              (const std::shared_ptr<BaseActivity> *)(v4 + 96));
            BaseActivityGmTool::BaseActivityGmTool((BaseActivityGmTool *const)(v4 + 224), (BaseActivityPtr *)(v4 + 128));
            std::shared_ptr<BaseActivity>::~shared_ptr((std::shared_ptr<BaseActivity> *const)(v4 + 128));
            meet_cond_set = BaseActivityGmTool::getAllActiveCondByGm((BaseActivityGmTool *const)(v4 + 224));
            std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream(v4 + 336);
            __for_range = meet_cond_set;
            __for_begin._M_node = std::set<unsigned int>::begin(meet_cond_set)._M_node;
            __for_end._M_node = std::set<unsigned int>::end(meet_cond_set)._M_node;
            while ( std::operator!=(&__for_begin, &__for_end) )
            {
              cond_id = std::_Rb_tree_const_iterator<unsigned int>::operator*(&__for_begin);
              v31 = std::operator<<<std::char_traits<char>>(v4 + 352, "[meet conds]: ");
              if ( *(_BYTE *)(((unsigned __int64)cond_id >> 3) + 0x7FFF8000) != 0
                && (char)(((unsigned __int8)cond_id & 7) + 3) >= *(_BYTE *)(((unsigned __int64)cond_id >> 3) + 0x7FFF8000) )
              {
                __asan_report_load4(cond_id);
              }
              v32 = std::ostream::operator<<(v31, *cond_id);
              v33 = std::operator<<<std::char_traits<char>>(v32, byte_262D4440);
              std::operator<<<std::char_traits<char>>(v33, "\n");
              std::_Rb_tree_const_iterator<unsigned int>::operator++(&__for_begin);
            }
            std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::str(&v119, v4 + 336);
            std::string::operator=(ret_msg, &v119);
            std::string::~string(&v119);
            AllWatcherTakeable = 0;
            std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream(v4 + 336);
            BaseActivityGmTool::~BaseActivityGmTool((BaseActivityGmTool *const)(v4 + 224));
          }
          std::shared_ptr<BaseActivity>::~shared_ptr((std::shared_ptr<BaseActivity> *const)(v4 + 96));
          goto LABEL_230;
        }
        goto LABEL_138;
      }
LABEL_201:
      std::string::operator=(ret_msg, "param not enough");
      AllWatcherTakeable = -1;
      goto LABEL_230;
    }
    v34 = std::vector<std::string>::operator[](param_vec, 0LL);
    if ( std::operator==<char>(v34, "COND") )
    {
      if ( std::vector<std::string>::size(param_vec) <= 3 )
        goto LABEL_201;
      *(_DWORD *)(v4 + 64) = 0;
      v35 = std::vector<std::string>::operator[](param_vec, 1uLL);
      if ( common::tools::StringUtils::strToNum<unsigned int>(v35, (unsigned int *)(v4 + 64), 1) )
        goto LABEL_138;
      if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
        __asan_report_load8(&context->player);
      v36 = (unsigned int)Player::getActivityComp(context->player);
      PlayerActivityComp::findBaseActivity((PlayerActivityComp *const)(v4 + 96), v36);
      if ( std::operator==<BaseActivity>(0LL, (const std::shared_ptr<BaseActivity> *)(v4 + 96))
        || (v37 = std::__shared_ptr_access<BaseActivity,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<BaseActivity,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 96)),
            !BaseActivity::isOpening(v37, 0)) )
      {
        common::milog::MiLogStream::create(
          &v119,
          &common::milog::MiLogDefault::default_log_obj_,
          3u,
          "./src/player/gm/player_gm_comp.cpp",
          "procActivity",
          9219);
        v39 = common::milog::MiLogStream::operator<<<char [6],(char *[6])0>(&v119, (const char (*)[6])"uid: ");
        if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
          __asan_report_load8(&context->player);
        *(_DWORD *)(v4 + 80) = Player::getUid(context->player);
        v40 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                v39,
                (const unsigned int *)(v4 + 80));
        common::milog::MiLogStream::operator<<<char [19],(char *[19])0>(v40, (const char (*)[19])" activity not open");
        common::milog::MiLogStream::~MiLogStream(&v119);
        AllWatcherTakeable = -1;
        goto LABEL_158;
      }
      *(_DWORD *)(v4 + 80) = 0;
      v41 = std::vector<std::string>::operator[](param_vec, 2uLL);
      if ( common::tools::StringUtils::strToNum<unsigned int>(v41, (unsigned int *)(v4 + 80), 1) )
      {
        std::string::operator=(ret_msg, "cond_id parse fail");
        AllWatcherTakeable = -1;
LABEL_158:
        std::shared_ptr<BaseActivity>::~shared_ptr((std::shared_ptr<BaseActivity> *const)(v4 + 96));
        goto LABEL_230;
      }
      std::shared_ptr<BaseActivity>::shared_ptr(
        (std::shared_ptr<BaseActivity> *const)(v4 + 128),
        (const std::shared_ptr<BaseActivity> *)(v4 + 96));
      BaseActivityGmTool::BaseActivityGmTool((BaseActivityGmTool *const)(v4 + 224), (BaseActivityPtr *)(v4 + 128));
      std::shared_ptr<BaseActivity>::~shared_ptr((std::shared_ptr<BaseActivity> *const)(v4 + 128));
      v42 = std::vector<std::string>::operator[](param_vec, 3uLL);
      if ( std::operator==<char>(v42, stru_263521E0.gap0) )
      {
        BaseActivityGmTool::openCondByGm((BaseActivityGmTool *const)(v4 + 224), *(_DWORD *)(v4 + 80));
      }
      else
      {
        v43 = std::vector<std::string>::operator[](param_vec, 3uLL);
        if ( std::operator==<char>(v43, stru_26352260.gap0) )
        {
          BaseActivityGmTool::closeCondByGm((BaseActivityGmTool *const)(v4 + 224), *(_DWORD *)(v4 + 80));
        }
        else
        {
          v44 = std::vector<std::string>::operator[](param_vec, 3uLL);
          if ( std::operator==<char>(v44, "RESET") )
          {
            BaseActivityGmTool::resetCondByGm((BaseActivityGmTool *const)(v4 + 224), *(_DWORD *)(v4 + 80));
          }
          else
          {
            v45 = std::vector<std::string>::operator[](param_vec, 3uLL);
            if ( !std::operator==<char>(v45, "IS_MEET") )
            {
              v46 = std::vector<std::string>::operator[](param_vec, 3uLL);
              std::operator+<char>((std::string *)&v119, "flag not known,flag:", v46);
              std::string::operator=(ret_msg, &v119);
              std::string::~string(&v119);
              AllWatcherTakeable = -1;
LABEL_86:
              BaseActivityGmTool::~BaseActivityGmTool((BaseActivityGmTool *const)(v4 + 224));
              goto LABEL_158;
            }
            if ( BaseActivityGmTool::isCondActiveByGm((BaseActivityGmTool *const)(v4 + 224), *(_DWORD *)(v4 + 80)) )
            {
              std::to_string((std::string *)(v4 + 160), *(_DWORD *)(v4 + 80));
              std::operator+<char>((std::string *)&v119, "cond id: ", (std::string *)(v4 + 160));
              std::operator+<char>(&__rhs, (std::string *)&v119, off_26363140);
              std::string::operator=(ret_msg, &__rhs);
              std::string::~string(&__rhs);
              std::string::~string(&v119);
              std::string::~string((void *)(v4 + 160));
            }
            else
            {
              std::to_string(&__rhs, *(_DWORD *)(v4 + 80));
              std::operator+<char>((std::string *)&v119, "cond id: ", &__rhs);
              std::operator+<char>((std::string *)(v4 + 160), (std::string *)&v119, off_26363180);
              std::string::operator=(ret_msg, v4 + 160);
              std::string::~string((void *)(v4 + 160));
              std::string::~string(&v119);
              std::string::~string(&__rhs);
            }
          }
        }
      }
      AllWatcherTakeable = 0;
      goto LABEL_86;
    }
    v47 = std::vector<std::string>::operator[](param_vec, 0LL);
    if ( std::operator==<char>(v47, "SETTLE") )
    {
      if ( std::vector<std::string>::size(param_vec) <= 1 )
        goto LABEL_201;
      *(_DWORD *)(v4 + 64) = 0;
      v48 = std::vector<std::string>::operator[](param_vec, 1uLL);
      if ( !common::tools::StringUtils::strToNum<unsigned int>(v48, (unsigned int *)(v4 + 64), 1) )
      {
        if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
          __asan_report_load8(&context->player);
        v49 = (unsigned int)Player::getActivityComp(context->player);
        PlayerActivityComp::findBaseActivity((PlayerActivityComp *const)(v4 + 96), v49);
        if ( std::operator==<BaseActivity>(0LL, (const std::shared_ptr<BaseActivity> *)(v4 + 96))
          || (v50 = std::__shared_ptr_access<BaseActivity,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<BaseActivity,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 96)),
              !BaseActivity::isOpening(v50, 0)) )
        {
          common::milog::MiLogStream::create(
            &v119,
            &common::milog::MiLogDefault::default_log_obj_,
            3u,
            "./src/player/gm/player_gm_comp.cpp",
            "procActivity",
            9278);
          v52 = common::milog::MiLogStream::operator<<<char [6],(char *[6])0>(&v119, (const char (*)[6])"uid: ");
          if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
            __asan_report_load8(&context->player);
          *(_DWORD *)(v4 + 80) = Player::getUid(context->player);
          v53 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                  v52,
                  (const unsigned int *)(v4 + 80));
          common::milog::MiLogStream::operator<<<char [19],(char *[19])0>(v53, (const char (*)[19])" activity not open");
          common::milog::MiLogStream::~MiLogStream(&v119);
          AllWatcherTakeable = -1;
        }
        else
        {
          std::shared_ptr<BaseActivity>::shared_ptr(
            (std::shared_ptr<BaseActivity> *const)(v4 + 128),
            (const std::shared_ptr<BaseActivity> *)(v4 + 96));
          BaseActivityGmTool::BaseActivityGmTool((BaseActivityGmTool *const)(v4 + 224), (BaseActivityPtr *)(v4 + 128));
          std::shared_ptr<BaseActivity>::~shared_ptr((std::shared_ptr<BaseActivity> *const)(v4 + 128));
          BaseActivityGmTool::settleByGm((BaseActivityGmTool *const)(v4 + 224));
          AllWatcherTakeable = 0;
          BaseActivityGmTool::~BaseActivityGmTool((BaseActivityGmTool *const)(v4 + 224));
        }
        std::shared_ptr<BaseActivity>::~shared_ptr((std::shared_ptr<BaseActivity> *const)(v4 + 96));
        goto LABEL_230;
      }
      goto LABEL_138;
    }
    v54 = std::vector<std::string>::operator[](param_vec, 0LL);
    if ( std::operator==<char>(v54, "SETCOND") )
    {
      *(_DWORD *)(v4 + 48) = 0;
      *(_DWORD *)(v4 + 64) = 0;
      *(_DWORD *)(v4 + 80) = 0;
      common::tools::StringUtils::strVecToNum<1u,unsigned int,unsigned int &,unsigned int &>(
        param_vec,
        (unsigned int *)(v4 + 48),
        (unsigned int *)(v4 + 64),
        (unsigned int *)(v4 + 80),
        v55,
        v56);
      if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
        __asan_report_load8(&context->player);
      v57 = (unsigned int)Player::getActivityComp(context->player);
      PlayerActivityComp::findBaseActivity((PlayerActivityComp *const)(v4 + 128), v57);
      if ( std::operator==<BaseActivity>(0LL, (const std::shared_ptr<BaseActivity> *)(v4 + 128))
        || (v58 = std::__shared_ptr_access<BaseActivity,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<BaseActivity,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 128)),
            !BaseActivity::isOpening(v58, 0)) )
      {
        std::to_string(&__rhs, *(_DWORD *)(v4 + 48));
        std::operator+<char>((std::string *)(v4 + 160), "activity_id:", &__rhs);
        std::operator+<char>((std::string *)&v119, (std::string *)(v4 + 160), " not found");
        std::string::operator=(ret_msg, &v119);
        std::string::~string(&v119);
        std::string::~string((void *)(v4 + 160));
        std::string::~string(&__rhs);
        AllWatcherTakeable = -1;
      }
      else
      {
        v60 = std::__shared_ptr_access<BaseActivity,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<BaseActivity,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 128));
        AllWatcherTakeable = BaseActivity::setCondByGm(v60, *(_DWORD *)(v4 + 64), *(_DWORD *)(v4 + 80) != 0, ret_msg);
      }
      std::shared_ptr<BaseActivity>::~shared_ptr((std::shared_ptr<BaseActivity> *const)(v4 + 128));
      goto LABEL_230;
    }
    v61 = std::vector<std::string>::operator[](param_vec, 0LL);
    if ( std::operator==<char>(v61, "SETSCORE") )
    {
      if ( std::vector<std::string>::size(param_vec) <= 2 )
        goto LABEL_201;
      *(_DWORD *)(v4 + 48) = 0;
      *(_DWORD *)(v4 + 64) = 0;
      v62 = std::vector<std::string>::operator[](param_vec, 1uLL);
      if ( !common::tools::StringUtils::strToNum<unsigned int>(v62, (unsigned int *)(v4 + 48), 1) )
      {
        v63 = std::vector<std::string>::operator[](param_vec, 2uLL);
        if ( !common::tools::StringUtils::strToNum<unsigned int>(v63, (unsigned int *)(v4 + 64), 1) )
        {
          if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
            __asan_report_load8(&context->player);
          v64 = (unsigned int)Player::getActivityComp(context->player);
          PlayerActivityComp::findBaseActivity((PlayerActivityComp *const)(v4 + 96), v64);
          if ( std::operator==<BaseActivity>(0LL, (const std::shared_ptr<BaseActivity> *)(v4 + 96))
            || (v65 = std::__shared_ptr_access<BaseActivity,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<BaseActivity,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 96)),
                !BaseActivity::isOpening(v65, 0)) )
          {
            common::milog::MiLogStream::create(
              &v119,
              &common::milog::MiLogDefault::default_log_obj_,
              3u,
              "./src/player/gm/player_gm_comp.cpp",
              "procActivity",
              9325);
            v67 = common::milog::MiLogStream::operator<<<char [6],(char *[6])0>(&v119, (const char (*)[6])"uid: ");
            if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
              __asan_report_load8(&context->player);
            *(_DWORD *)(v4 + 80) = Player::getUid(context->player);
            v68 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                    v67,
                    (const unsigned int *)(v4 + 80));
            common::milog::MiLogStream::operator<<<char [19],(char *[19])0>(
              v68,
              (const char (*)[19])" activity not open");
            common::milog::MiLogStream::~MiLogStream(&v119);
            AllWatcherTakeable = -1;
            v69 = 0;
          }
          else
          {
            std::shared_ptr<BaseActivity>::shared_ptr(
              (std::shared_ptr<BaseActivity> *const)(v4 + 128),
              (const std::shared_ptr<BaseActivity> *)(v4 + 96));
            BaseActivityGmTool::BaseActivityGmTool((BaseActivityGmTool *const)(v4 + 224), (BaseActivityPtr *)(v4 + 128));
            std::shared_ptr<BaseActivity>::~shared_ptr((std::shared_ptr<BaseActivity> *const)(v4 + 128));
            BaseActivityGmTool::setScoreByGm((BaseActivityGmTool *const)(v4 + 224), *(_DWORD *)(v4 + 64));
            BaseActivityGmTool::~BaseActivityGmTool((BaseActivityGmTool *const)(v4 + 224));
            v69 = 1;
          }
          std::shared_ptr<BaseActivity>::~shared_ptr((std::shared_ptr<BaseActivity> *const)(v4 + 96));
          if ( v69 == 1 )
            goto LABEL_229;
          goto LABEL_230;
        }
      }
      goto LABEL_138;
    }
    v70 = std::vector<std::string>::operator[](param_vec, 0LL);
    if ( std::operator==<char>(v70, "SETSCORELIMIT") )
    {
      if ( std::vector<std::string>::size(param_vec) <= 2 )
        goto LABEL_201;
      *(_DWORD *)(v4 + 48) = 0;
      *(_DWORD *)(v4 + 64) = 0;
      v71 = std::vector<std::string>::operator[](param_vec, 1uLL);
      if ( !common::tools::StringUtils::strToNum<unsigned int>(v71, (unsigned int *)(v4 + 48), 1) )
      {
        v72 = std::vector<std::string>::operator[](param_vec, 2uLL);
        if ( !common::tools::StringUtils::strToNum<unsigned int>(v72, (unsigned int *)(v4 + 64), 1) )
        {
          if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
            __asan_report_load8(&context->player);
          v73 = (unsigned int)Player::getActivityComp(context->player);
          PlayerActivityComp::findBaseActivity((PlayerActivityComp *const)(v4 + 96), v73);
          if ( std::operator==<BaseActivity>(0LL, (const std::shared_ptr<BaseActivity> *)(v4 + 96))
            || (v74 = std::__shared_ptr_access<BaseActivity,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<BaseActivity,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 96)),
                !BaseActivity::isOpening(v74, 0)) )
          {
            common::milog::MiLogStream::create(
              &v119,
              &common::milog::MiLogDefault::default_log_obj_,
              3u,
              "./src/player/gm/player_gm_comp.cpp",
              "procActivity",
              9356);
            v76 = common::milog::MiLogStream::operator<<<char [6],(char *[6])0>(&v119, (const char (*)[6])"uid: ");
            if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
              __asan_report_load8(&context->player);
            *(_DWORD *)(v4 + 80) = Player::getUid(context->player);
            v77 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                    v76,
                    (const unsigned int *)(v4 + 80));
            common::milog::MiLogStream::operator<<<char [19],(char *[19])0>(
              v77,
              (const char (*)[19])" activity not open");
            common::milog::MiLogStream::~MiLogStream(&v119);
            AllWatcherTakeable = -1;
            v78 = 0;
          }
          else
          {
            std::shared_ptr<BaseActivity>::shared_ptr(
              (std::shared_ptr<BaseActivity> *const)(v4 + 128),
              (const std::shared_ptr<BaseActivity> *)(v4 + 96));
            BaseActivityGmTool::BaseActivityGmTool((BaseActivityGmTool *const)(v4 + 224), (BaseActivityPtr *)(v4 + 128));
            std::shared_ptr<BaseActivity>::~shared_ptr((std::shared_ptr<BaseActivity> *const)(v4 + 128));
            BaseActivityGmTool::setScoreLimitByGm((BaseActivityGmTool *const)(v4 + 224), *(_DWORD *)(v4 + 64));
            BaseActivityGmTool::~BaseActivityGmTool((BaseActivityGmTool *const)(v4 + 224));
            v78 = 1;
          }
          std::shared_ptr<BaseActivity>::~shared_ptr((std::shared_ptr<BaseActivity> *const)(v4 + 96));
          if ( v78 == 1 )
            goto LABEL_229;
          goto LABEL_230;
        }
      }
      goto LABEL_138;
    }
    v79 = std::vector<std::string>::operator[](param_vec, 0LL);
    if ( std::operator==<char>(v79, "ALL_WATCHER_TAKEABLE") )
    {
      *(_DWORD *)(v4 + 80) = 0;
      common::tools::StringUtils::strVecToNum<1u,unsigned int>(param_vec, (unsigned int *)(v4 + 80));
      if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
        __asan_report_load8(&context->player);
      v80 = (unsigned int)Player::getActivityComp(context->player);
      PlayerActivityComp::findBaseActivity((PlayerActivityComp *const)(v4 + 96), v80);
      if ( std::operator==<BaseActivity>(0LL, (const std::shared_ptr<BaseActivity> *)(v4 + 96)) )
      {
        std::to_string(&__rhs, *(_DWORD *)(v4 + 80));
        std::operator+<char>((std::string *)(v4 + 160), "activity_id:", &__rhs);
        std::operator+<char>((std::string *)&v119, (std::string *)(v4 + 160), " not found");
        std::string::operator=(ret_msg, &v119);
        std::string::~string(&v119);
        std::string::~string((void *)(v4 + 160));
        std::string::~string(&__rhs);
        AllWatcherTakeable = -1;
      }
      else
      {
        std::shared_ptr<BaseActivity>::shared_ptr(
          (std::shared_ptr<BaseActivity> *const)(v4 + 128),
          (const std::shared_ptr<BaseActivity> *)(v4 + 96));
        BaseActivityGmTool::BaseActivityGmTool((BaseActivityGmTool *const)(v4 + 224), (BaseActivityPtr *)(v4 + 128));
        std::shared_ptr<BaseActivity>::~shared_ptr((std::shared_ptr<BaseActivity> *const)(v4 + 128));
        AllWatcherTakeable = BaseActivityGmTool::makeAllWatcherTakeable((BaseActivityGmTool *const)(v4 + 224));
        BaseActivityGmTool::~BaseActivityGmTool((BaseActivityGmTool *const)(v4 + 224));
      }
      goto LABEL_158;
    }
    v81 = std::vector<std::string>::operator[](param_vec, 0LL);
    if ( std::operator==<char>(v81, "SELECT_AVATAR") )
    {
      if ( std::vector<std::string>::size(param_vec) > 2 )
      {
        *(_DWORD *)(v4 + 64) = 0;
        *(_DWORD *)(v4 + 80) = 0;
        v82 = std::vector<std::string>::operator[](param_vec, 1uLL);
        if ( common::tools::StringUtils::strToNum<unsigned int>(v82, (unsigned int *)(v4 + 64), 1) )
          goto LABEL_203;
        v83 = std::vector<std::string>::operator[](param_vec, 2uLL);
        if ( common::tools::StringUtils::strToNum<unsigned int>(v83, (unsigned int *)(v4 + 80), 1) )
        {
          std::string::operator=(ret_msg, "reward_id parse fail");
          AllWatcherTakeable = -1;
          goto LABEL_230;
        }
        if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
          __asan_report_load8(&context->player);
        v84 = (unsigned int)Player::getActivityComp(context->player);
        PlayerActivityComp::findBaseActivity((PlayerActivityComp *const)(v4 + 96), v84);
        if ( std::operator==<BaseActivity>(0LL, (const std::shared_ptr<BaseActivity> *)(v4 + 96)) )
        {
          std::to_string(&__rhs, *(_DWORD *)(v4 + 64));
          std::operator+<char>((std::string *)(v4 + 160), "activity_id:", &__rhs);
          std::operator+<char>((std::string *)&v119, (std::string *)(v4 + 160), " not found");
          std::string::operator=(ret_msg, &v119);
          std::string::~string(&v119);
          std::string::~string((void *)(v4 + 160));
          std::string::~string(&__rhs);
          AllWatcherTakeable = -1;
          v85 = 0;
        }
        else
        {
          std::shared_ptr<BaseActivity>::shared_ptr(
            (std::shared_ptr<BaseActivity> *const)(v4 + 128),
            (const std::shared_ptr<BaseActivity> *)(v4 + 96));
          BaseActivityGmTool::BaseActivityGmTool((BaseActivityGmTool *const)(v4 + 224), (BaseActivityPtr *)(v4 + 128));
          std::shared_ptr<BaseActivity>::~shared_ptr((std::shared_ptr<BaseActivity> *const)(v4 + 128));
          BaseActivityGmTool::selectAvatarCardByGm((BaseActivityGmTool *const)(v4 + 224), *(_DWORD *)(v4 + 80));
          BaseActivityGmTool::~BaseActivityGmTool((BaseActivityGmTool *const)(v4 + 224));
          v85 = 1;
        }
        std::shared_ptr<BaseActivity>::~shared_ptr((std::shared_ptr<BaseActivity> *const)(v4 + 96));
        if ( v85 == 1 )
          goto LABEL_229;
        goto LABEL_230;
      }
      goto LABEL_201;
    }
    v86 = std::vector<std::string>::operator[](param_vec, 0LL);
    if ( std::operator==<char>(v86, "PUSH_TIPS") )
    {
      if ( std::vector<std::string>::size(param_vec) <= 3 )
        goto LABEL_201;
      *(_DWORD *)(v4 + 48) = 0;
      *(_DWORD *)(v4 + 64) = 0;
      v87 = std::vector<std::string>::operator[](param_vec, 2uLL);
      if ( !common::tools::StringUtils::strToNum<unsigned int>(v87, (unsigned int *)(v4 + 48), 1) )
      {
        v88 = std::vector<std::string>::operator[](param_vec, 3uLL);
        if ( common::tools::StringUtils::strToNum<unsigned int>(v88, (unsigned int *)(v4 + 64), 1) )
        {
          std::string::operator=(ret_msg, "activity_push_tips_id parse fail");
          AllWatcherTakeable = -1;
          goto LABEL_230;
        }
        if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
          __asan_report_load8(&context->player);
        v89 = (unsigned int)Player::getActivityComp(context->player);
        PlayerActivityComp::findBaseActivity((PlayerActivityComp *const)(v4 + 96), v89);
        if ( std::operator==<BaseActivity>(0LL, (const std::shared_ptr<BaseActivity> *)(v4 + 96)) )
        {
          std::to_string(&__rhs, *(_DWORD *)(v4 + 48));
          std::operator+<char>((std::string *)&v119, "activity_id:", &__rhs);
          std::operator+<char>((std::string *)(v4 + 160), (std::string *)&v119, " not found");
          std::string::operator=(ret_msg, v4 + 160);
          std::string::~string((void *)(v4 + 160));
          std::string::~string(&v119);
          std::string::~string(&__rhs);
          AllWatcherTakeable = -1;
          v90 = 0;
          goto LABEL_197;
        }
        std::shared_ptr<BaseActivity>::shared_ptr(
          (std::shared_ptr<BaseActivity> *const)(v4 + 128),
          (const std::shared_ptr<BaseActivity> *)(v4 + 96));
        BaseActivityGmTool::BaseActivityGmTool((BaseActivityGmTool *const)(v4 + 224), (BaseActivityPtr *)(v4 + 128));
        std::shared_ptr<BaseActivity>::~shared_ptr((std::shared_ptr<BaseActivity> *const)(v4 + 128));
        v91 = std::vector<std::string>::operator[](param_vec, 1uLL);
        if ( std::operator==<char>(v91, "RECORD") )
        {
          BaseActivityGmTool::recordPushtipsByGm((BaseActivityGmTool *const)(v4 + 224), *(_DWORD *)(v4 + 64));
        }
        else
        {
          v92 = std::vector<std::string>::operator[](param_vec, 1uLL);
          if ( !std::operator==<char>(v92, "REMOVE") )
          {
            v93 = std::vector<std::string>::operator[](param_vec, 1uLL);
            if ( std::operator==<char>(v93, "SET_STATE") )
            {
              if ( std::vector<std::string>::size(param_vec) > 4 )
              {
                *(_DWORD *)(v4 + 80) = 0;
                v94 = std::vector<std::string>::operator[](param_vec, 4uLL);
                if ( common::tools::StringUtils::strToNum<unsigned int>(v94, (unsigned int *)(v4 + 80), 1) )
                {
                  std::string::operator=(ret_msg, "state parse fail");
                  AllWatcherTakeable = -1;
                }
                else
                {
                  if ( proto::ActivityPushTipsState_IsValid(*(_DWORD *)(v4 + 80)) )
                  {
                    BaseActivityGmTool::setPushtipsStateByGm(
                      (BaseActivityGmTool *const)(v4 + 224),
                      *(_DWORD *)(v4 + 64),
                      *(_DWORD *)(v4 + 80));
                    goto LABEL_195;
                  }
                  std::string::operator=(ret_msg, &off_26363520);
                  AllWatcherTakeable = -1;
                }
              }
              else
              {
                std::string::operator=(ret_msg, "param not enough");
                AllWatcherTakeable = -1;
              }
              v95 = 0;
            }
            else
            {
              v96 = std::vector<std::string>::operator[](param_vec, 1uLL);
              std::operator+<char>((std::string *)&v119, v96, "is not a valid parameter!");
              std::string::operator=(ret_msg, &v119);
              std::string::~string(&v119);
              AllWatcherTakeable = -1;
              v95 = 0;
            }
LABEL_196:
            BaseActivityGmTool::~BaseActivityGmTool((BaseActivityGmTool *const)(v4 + 224));
            v90 = v95 == 1;
LABEL_197:
            std::shared_ptr<BaseActivity>::~shared_ptr((std::shared_ptr<BaseActivity> *const)(v4 + 96));
            if ( !v90 )
              goto LABEL_230;
            goto LABEL_229;
          }
          BaseActivityGmTool::removePushtipsByGm((BaseActivityGmTool *const)(v4 + 224), *(_DWORD *)(v4 + 64));
        }
LABEL_195:
        v95 = 1;
        goto LABEL_196;
      }
LABEL_203:
      std::string::operator=(ret_msg, "activity_id parse fail");
      AllWatcherTakeable = -1;
      goto LABEL_230;
    }
    v97 = std::vector<std::string>::operator[](param_vec, 0LL);
    if ( !std::operator==<char>(v97, "COIN") )
    {
LABEL_229:
      AllWatcherTakeable = 0;
      goto LABEL_230;
    }
    if ( std::vector<std::string>::size(param_vec) <= 2 )
      goto LABEL_201;
    *(_DWORD *)(v4 + 48) = 0;
    v98 = std::vector<std::string>::operator[](param_vec, 2uLL);
    if ( common::tools::StringUtils::strToNum<unsigned int>(v98, (unsigned int *)(v4 + 48), 1) )
      goto LABEL_203;
    if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
      __asan_report_load8(&context->player);
    v99 = (unsigned int)Player::getActivityComp(context->player);
    PlayerActivityComp::findBaseActivity((PlayerActivityComp *const)(v4 + 96), v99);
    if ( std::operator==<BaseActivity>(0LL, (const std::shared_ptr<BaseActivity> *)(v4 + 96)) )
    {
      std::to_string((std::string *)(v4 + 160), *(_DWORD *)(v4 + 48));
      std::operator+<char>((std::string *)&v119, "activity_id:", (std::string *)(v4 + 160));
      std::operator+<char>(&__rhs, (std::string *)&v119, " not found");
      std::string::operator=(ret_msg, &__rhs);
      std::string::~string(&__rhs);
      std::string::~string(&v119);
      std::string::~string((void *)(v4 + 160));
      AllWatcherTakeable = -1;
      v100 = 0;
      goto LABEL_228;
    }
    std::shared_ptr<BaseActivity>::shared_ptr(
      (std::shared_ptr<BaseActivity> *const)(v4 + 128),
      (const std::shared_ptr<BaseActivity> *)(v4 + 96));
    BaseActivityGmTool::BaseActivityGmTool((BaseActivityGmTool *const)(v4 + 224), (BaseActivityPtr *)(v4 + 128));
    std::shared_ptr<BaseActivity>::~shared_ptr((std::shared_ptr<BaseActivity> *const)(v4 + 128));
    v101 = std::vector<std::string>::operator[](param_vec, 1uLL);
    if ( std::operator==<char>(v101, "RESET") )
    {
      BaseActivityGmTool::resetActivityGeneralCoinByGm((BaseActivityGmTool *const)(v4 + 224));
      AllWatcherTakeable = 0;
      v102 = 0;
LABEL_227:
      BaseActivityGmTool::~BaseActivityGmTool((BaseActivityGmTool *const)(v4 + 224));
      v100 = v102 == 1;
LABEL_228:
      std::shared_ptr<BaseActivity>::~shared_ptr((std::shared_ptr<BaseActivity> *const)(v4 + 96));
      if ( !v100 )
        goto LABEL_230;
      goto LABEL_229;
    }
    if ( std::vector<std::string>::size(param_vec) <= 3 )
      goto LABEL_211;
    *(_DWORD *)(v4 + 64) = 0;
    v103 = std::vector<std::string>::operator[](param_vec, 3uLL);
    if ( common::tools::StringUtils::strToNum<unsigned int>(v103, (unsigned int *)(v4 + 64), 1) )
    {
      std::string::operator=(ret_msg, "coin_id parse fail");
      AllWatcherTakeable = -1;
      goto LABEL_226;
    }
    if ( !proto::VirtualItem_IsValid(*(_DWORD *)(v4 + 64)) )
    {
      v104 = std::vector<std::string>::operator[](param_vec, 3uLL);
      std::operator+<char>((std::string *)(v4 + 160), "invalid coin_type: ", v104);
      std::string::operator=(ret_msg, v4 + 160);
      std::string::~string((void *)(v4 + 160));
      AllWatcherTakeable = -1;
      goto LABEL_226;
    }
    coin_type = *(_DWORD *)(v4 + 64);
    v105 = std::vector<std::string>::operator[](param_vec, 1uLL);
    if ( std::operator==<char>(v105, "GET_NUM") )
    {
      coin_num = BaseActivityGmTool::getActivityGeneralCoinByGm((BaseActivityGmTool *const)(v4 + 224), coin_type);
      std::to_string((std::string *)(v4 + 160), coin_num);
      std::operator+<char>((std::string *)&v119, "coin_num: ", (std::string *)(v4 + 160));
      std::string::operator=(ret_msg, &v119);
      std::string::~string(&v119);
      std::string::~string((void *)(v4 + 160));
      AllWatcherTakeable = 0;
      goto LABEL_226;
    }
    if ( std::vector<std::string>::size(param_vec) <= 4 )
    {
LABEL_211:
      std::string::operator=(ret_msg, "param not enough");
      AllWatcherTakeable = -1;
    }
    else
    {
      *(_DWORD *)(v4 + 80) = 0;
      v106 = std::vector<std::string>::operator[](param_vec, 4uLL);
      if ( common::tools::StringUtils::strToNum<unsigned int>(v106, (unsigned int *)(v4 + 80), 1) )
      {
        std::string::operator=(ret_msg, "coin_num parse fail");
        AllWatcherTakeable = -1;
      }
      else
      {
        v107 = std::vector<std::string>::operator[](param_vec, 1uLL);
        if ( std::operator==<char>(v107, off_26356D00) )
        {
          AllWatcherTakeable = BaseActivityGmTool::addActivityGeneralCoinByGm(
                                 (BaseActivityGmTool *const)(v4 + 224),
                                 coin_type,
                                 *(_DWORD *)(v4 + 80));
        }
        else
        {
          v108 = std::vector<std::string>::operator[](param_vec, 1uLL);
          if ( !std::operator==<char>(v108, off_26357AA0) )
          {
            v102 = 1;
            goto LABEL_227;
          }
          AllWatcherTakeable = BaseActivityGmTool::subActivityGeneralCoinByGm(
                                 (BaseActivityGmTool *const)(v4 + 224),
                                 coin_type,
                                 *(_DWORD *)(v4 + 80));
        }
      }
    }
LABEL_226:
    v102 = 0;
    goto LABEL_227;
  }
  if ( std::vector<std::string>::size(param_vec) <= 2 )
    goto LABEL_201;
  *(_DWORD *)(v4 + 64) = 0;
  v10 = std::vector<std::string>::operator[](param_vec, 1uLL);
  if ( common::tools::StringUtils::strToNum<unsigned int>(v10, (unsigned int *)(v4 + 64), 1) )
    goto LABEL_203;
  *(_DWORD *)(v4 + 80) = 0;
  v11 = std::vector<std::string>::operator[](param_vec, 2uLL);
  if ( common::tools::StringUtils::strToNum<unsigned int>(v11, (unsigned int *)(v4 + 80), 1) )
  {
    std::string::operator=(ret_msg, "schedule_id parse fail");
    AllWatcherTakeable = -1;
    goto LABEL_230;
  }
  proto::ActivityBannerClearReq::ActivityBannerClearReq((proto::ActivityBannerClearReq *const)(v4 + 160));
  proto::ActivityBannerClearReq::set_activity_id((proto::ActivityBannerClearReq *const)(v4 + 160), *(_DWORD *)(v4 + 64));
  proto::ActivityBannerClearReq::set_schedule_id((proto::ActivityBannerClearReq *const)(v4 + 160), *(_DWORD *)(v4 + 80));
  common::minet::PacketUtils::createPacket<proto::ActivityBannerClearReq>((const proto::ActivityBannerClearReq *)(v4 + 96));
  if ( std::operator==<common::minet::Packet>((const std::shared_ptr<common::minet::Packet> *)(v4 + 96), 0LL) )
  {
    common::milog::MiLogStream::create(
      &v119,
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/player/gm/player_gm_comp.cpp",
      "procActivity",
      9136);
    v12 = common::milog::MiLogStream::operator<<<char [26],(char *[26])0>(
            &v119,
            (const char (*)[26])"createPacket failed, uid:");
    if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
      __asan_report_load8(&context->player);
    operator<<(v12, context->player);
    common::milog::MiLogStream::~MiLogStream(&v119);
    AllWatcherTakeable = -1;
    v13 = 0;
  }
  else
  {
    v14 = std::__shared_ptr_access<common::minet::Packet,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<common::minet::Packet,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 96));
    if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
      __asan_report_load8(&context->player);
    Uid = Player::getUid(context->player);
    common::minet::Packet::setUserId(v14, Uid);
    v16 = ServiceBox::findService<GameserverService>();
    std::shared_ptr<common::minet::Packet>::shared_ptr(
      (std::shared_ptr<common::minet::Packet> *const)(v4 + 128),
      (const std::shared_ptr<common::minet::Packet> *)(v4 + 96));
    GameserverService::setPacketGameThreadIndex(v16, (common::minet::PacketPtr *)(v4 + 128));
    std::shared_ptr<common::minet::Packet>::~shared_ptr((std::shared_ptr<common::minet::Packet> *const)(v4 + 128));
    v17._M_refcount._M_pi = (std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)2> *)(v4 + 96);
    std::shared_ptr<common::minet::Packet>::shared_ptr(
      (std::shared_ptr<common::minet::Packet> *const)(v4 + 128),
      (const std::shared_ptr<common::minet::Packet> *)(v4 + 96));
    v17._M_ptr = (std::__shared_ptr<common::minet::Packet,(__gnu_cxx::_Lock_policy)2>::element_type *)(v4 + 128);
    ServiceBox::pushPacketToService(v17);
    std::shared_ptr<common::minet::Packet>::~shared_ptr((std::shared_ptr<common::minet::Packet> *const)(v4 + 128));
    v13 = 1;
  }
  std::shared_ptr<common::minet::Packet>::~shared_ptr((std::shared_ptr<common::minet::Packet> *const)(v4 + 96));
  proto::ActivityBannerClearReq::~ActivityBannerClearReq((proto::ActivityBannerClearReq *const)(v4 + 160));
  if ( v13 == 1 )
    goto LABEL_229;
LABEL_230:
  result = AllWatcherTakeable;
  if ( v120 == (char *)v4 )
  {
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8008) = 0LL;
    *(_DWORD *)((v4 >> 3) + 0x7FFF8010) = 0;
    *(_DWORD *)((v4 >> 3) + 0x7FFF8018) = 0;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8024) = 0LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8058) = 0LL;
    *(_DWORD *)((v4 >> 3) + 0x7FFF8060) = 0;
  }
  else
  {
    *(_QWORD *)v4 = 1172321806LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8020) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8028) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8030) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8038) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8040) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8048) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8050) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8058) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v4 >> 3) + 0x7FFF8060) = -168430091;
  }
  return result;
};

// Line 9545: range 0000000017D781D2-0000000017D78274
void __cdecl procActivityMichiaeMatsuriRegister::procActivityMichiaeMatsuriRegister(
        procActivityMichiaeMatsuriRegister *const this)
{
  std::function<int(GmContext&,const std::vector<std::string>&,std::string&)> *v1; // rax
  std::allocator<char> __a; // [rsp+1Fh] [rbp-31h] BYREF
  std::string __k; // [rsp+20h] [rbp-30h] BYREF

  std::allocator<char>::allocator(&__a);
  std::string::basic_string<std::allocator<char>>(&__k, "MICHIAE", &__a);
  v1 = std::unordered_map<std::string,std::function<int ()(GmContext &,std::vector<std::string> const&,std::string&)>>::operator[](
         &GmUtils::op_func_map[abi:cxx11],
         &__k);
  std::function<int ()(GmContext &,std::vector<std::string> const&,std::string&)>::operator=<int (&)(GmContext &,std::vector<std::string> const&,std::string&)>(
    v1,
    (int (*)(GmContext *, const std::vector<std::string> *, std::string *))procActivityMichiaeMatsuri);
  std::string::~string(&__k);
  std::allocator<char>::~allocator(&__a);
};

// Line 9546: range 0000000017C103D7-0000000017C107FD
int32_t __cdecl procActivityMichiaeMatsuri(
        GmContext *context,
        const std::vector<std::string> *param_vec,
        std::string *ret_msg)
{
  unsigned __int64 v3; // r12
  __int64 v4; // rax
  _DWORD *v5; // r13
  int32_t v6; // r14d
  std::__shared_ptr_access<MichiaeMatsuriActivity,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v7; // rax
  std::__shared_ptr_access<MichiaeMatsuriActivity,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v8; // rax
  const std::string *v9; // rax
  const std::string *v10; // rax
  MichiaeMatsuriActivity *v11; // rax
  const std::string *v12; // rax
  const std::string *v13; // rax
  MichiaeMatsuriActivity *v14; // rax
  int32_t result; // eax
  char v17[144]; // [rsp+20h] [rbp-90h] BYREF

  v3 = (unsigned __int64)v17;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_1(96LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "2 48 4 13 stage_id:9591 64 16 17 activity_ptr:9552";
  *(_QWORD *)(v3 + 16) = procActivityMichiaeMatsuri;
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = -234556943;
  v5[536862722] = -202178560;
  if ( std::vector<std::string>::empty(param_vec) )
  {
    std::string::operator=(ret_msg, "param not enough");
    v6 = -1;
    goto LABEL_26;
  }
  if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
    __asan_report_load8(&context->player);
  Player::getActivityComp(context->player);
  PlayerActivityComp::findOpenningActivity<MichiaeMatsuriActivity>((PlayerActivityComp *const)(v3 + 64));
  if ( !std::operator==<MichiaeMatsuriActivity>(0LL, (const std::shared_ptr<MichiaeMatsuriActivity> *)(v3 + 64)) )
  {
    v7 = std::__shared_ptr_access<MichiaeMatsuriActivity,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<MichiaeMatsuriActivity,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 64));
    if ( !BaseActivity::isOpening((const BaseActivity *const)v7, 0) )
    {
      std::string::operator=(ret_msg, "MichiaeMatsuriActivity close!");
      v6 = -1;
      goto LABEL_25;
    }
    v8 = std::__shared_ptr_access<MichiaeMatsuriActivity,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<MichiaeMatsuriActivity,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 64));
    if ( BaseActivity::isSettled((const BaseActivity *const)v8) )
    {
      std::string::operator=(ret_msg, "MichiaeMatsuriActivity settled!");
      v6 = -1;
      goto LABEL_25;
    }
    v9 = std::vector<std::string>::operator[](param_vec, 0LL);
    if ( std::operator==<char>(v9, "OPEN_STAGE") )
    {
      if ( std::vector<std::string>::size(param_vec) <= 1 )
      {
LABEL_16:
        std::string::operator=(ret_msg, "must provide MichiaeMatsuriActivity stage value");
        v6 = -1;
        goto LABEL_25;
      }
      *(_DWORD *)(v3 + 48) = 0;
      v10 = std::vector<std::string>::operator[](param_vec, 1uLL);
      if ( !common::tools::StringUtils::strToNum<unsigned int>(v10, (unsigned int *)(v3 + 48), 1) )
      {
        v11 = std::__shared_ptr_access<MichiaeMatsuriActivity,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<MichiaeMatsuriActivity,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 64));
        MichiaeMatsuriActivity::openActivityStageByGm(v11, *(_DWORD *)(v3 + 48));
        v6 = 0;
        goto LABEL_25;
      }
    }
    else
    {
      v12 = std::vector<std::string>::operator[](param_vec, 0LL);
      if ( !std::operator==<char>(v12, "CLOSE_STAGE") )
      {
        v6 = 0;
        goto LABEL_25;
      }
      if ( std::vector<std::string>::size(param_vec) <= 1 )
        goto LABEL_16;
      *(_DWORD *)(v3 + 48) = 0;
      v13 = std::vector<std::string>::operator[](param_vec, 1uLL);
      if ( !common::tools::StringUtils::strToNum<unsigned int>(v13, (unsigned int *)(v3 + 48), 1) )
      {
        v14 = std::__shared_ptr_access<MichiaeMatsuriActivity,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<MichiaeMatsuriActivity,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 64));
        MichiaeMatsuriActivity::closeActivityStageByGm(v14, *(_DWORD *)(v3 + 48));
        v6 = 0;
        goto LABEL_25;
      }
    }
    std::string::operator=(ret_msg, "Michiae stage should be one of 1,2,3");
    v6 = -1;
    goto LABEL_25;
  }
  std::string::operator=(ret_msg, "no activity open");
  v6 = -1;
LABEL_25:
  std::shared_ptr<MichiaeMatsuriActivity>::~shared_ptr((std::shared_ptr<MichiaeMatsuriActivity> *const)(v3 + 64));
LABEL_26:
  result = v6;
  if ( v17 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8008) = 0;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8008) = -168430091;
  }
  return result;
};

// Line 9603: range 0000000017D78276-0000000017D78318
void __cdecl procActivitySeaLampRegister::procActivitySeaLampRegister(procActivitySeaLampRegister *const this)
{
  std::function<int(GmContext&,const std::vector<std::string>&,std::string&)> *v1; // rax
  std::allocator<char> __a; // [rsp+1Fh] [rbp-31h] BYREF
  std::string __k; // [rsp+20h] [rbp-30h] BYREF

  std::allocator<char>::allocator(&__a);
  std::string::basic_string<std::allocator<char>>(&__k, "SEALAMP", &__a);
  v1 = std::unordered_map<std::string,std::function<int ()(GmContext &,std::vector<std::string> const&,std::string&)>>::operator[](
         &GmUtils::op_func_map[abi:cxx11],
         &__k);
  std::function<int ()(GmContext &,std::vector<std::string> const&,std::string&)>::operator=<int (&)(GmContext &,std::vector<std::string> const&,std::string&)>(
    v1,
    (int (*)(GmContext *, const std::vector<std::string> *, std::string *))procActivitySeaLamp);
  std::string::~string(&__k);
  std::allocator<char>::~allocator(&__a);
};

// Line 9604: range 0000000017C107FE-0000000017C10DA7
int32_t __cdecl procActivitySeaLamp(
        GmContext *context,
        const std::vector<std::string> *param_vec,
        std::string *ret_msg)
{
  unsigned __int64 v3; // r13
  __int64 v4; // rax
  _DWORD *v5; // r12
  int32_t v6; // r14d
  std::__shared_ptr_access<SeaLampActivity,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v7; // rax
  std::__shared_ptr_access<SeaLampActivity,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v8; // rax
  const std::string *v9; // rax
  const std::string *v10; // rax
  SeaLampActivity *v11; // rax
  const std::string *v12; // rax
  SeaLampActivity *v13; // rax
  const std::string *v14; // rax
  SeaLampActivity *v15; // rax
  const std::string *v16; // rax
  SeaLampActivity *v17; // rax
  int32_t result; // eax
  common::milog::MiLogStream v20; // [rsp+20h] [rbp-F0h] BYREF
  char v21[208]; // [rsp+40h] [rbp-D0h] BYREF

  v3 = (unsigned __int64)v21;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_2(160LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "3 48 4 15 popularity:9633 64 16 17 activity_ptr:9610 96 24 11 reason:9639";
  *(_QWORD *)(v3 + 16) = procActivitySeaLamp;
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = -234556943;
  v5[536862722] = -219021312;
  v5[536862723] = -218103808;
  v5[536862724] = -202116109;
  if ( std::vector<std::string>::empty(param_vec) )
  {
    std::string::operator=(ret_msg, "param not enough");
    v6 = -1;
  }
  else
  {
    if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
      __asan_report_load8(&context->player);
    Player::getActivityComp(context->player);
    PlayerActivityComp::findOpenningActivity<SeaLampActivity>((PlayerActivityComp *const)(v3 + 64));
    if ( std::operator==<SeaLampActivity>(0LL, (const std::shared_ptr<SeaLampActivity> *)(v3 + 64)) )
    {
      std::string::operator=(ret_msg, "no activity open");
      v6 = -1;
    }
    else
    {
      v7 = std::__shared_ptr_access<SeaLampActivity,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<SeaLampActivity,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 64));
      if ( !BaseActivity::isOpening((const BaseActivity *const)v7, 0) )
      {
        common::milog::MiLogStream::create(
          &v20,
          &common::milog::MiLogDefault::default_log_obj_,
          3u,
          "./src/player/gm/player_gm_comp.cpp",
          "procActivitySeaLamp",
          9618);
        common::milog::MiLogStream::operator<<<char [23],(char *[23])0>(
          &v20,
          (const char (*)[23])"SeaLampActivity close!");
        common::milog::MiLogStream::~MiLogStream(&v20);
        v6 = -1;
      }
      else
      {
        v8 = std::__shared_ptr_access<SeaLampActivity,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<SeaLampActivity,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 64));
        if ( BaseActivity::isSettled((const BaseActivity *const)v8) )
        {
          common::milog::MiLogStream::create(
            &v20,
            &common::milog::MiLogDefault::default_log_obj_,
            3u,
            "./src/player/gm/player_gm_comp.cpp",
            "procActivitySeaLamp",
            9623);
          common::milog::MiLogStream::operator<<<char [25],(char *[25])0>(
            &v20,
            (const char (*)[25])"SeaLampActivity settled!");
          common::milog::MiLogStream::~MiLogStream(&v20);
          v6 = -1;
        }
        else
        {
          v9 = std::vector<std::string>::operator[](param_vec, 0LL);
          if ( std::operator==<char>(v9, "POPULARITY") )
          {
            if ( std::vector<std::string>::size(param_vec) > 1 )
            {
              *(_DWORD *)(v3 + 48) = 0;
              v10 = std::vector<std::string>::operator[](param_vec, 1uLL);
              if ( common::tools::StringUtils::strToNum<unsigned int>(v10, (unsigned int *)(v3 + 48), 1) )
              {
                common::milog::MiLogStream::create(
                  &v20,
                  &common::milog::MiLogDefault::default_log_obj_,
                  3u,
                  "./src/player/gm/player_gm_comp.cpp",
                  "procActivitySeaLamp",
                  9636);
                common::milog::MiLogStream::operator<<<char [36],(char *[36])0>(
                  &v20,
                  (const char (*)[36])"SEALAMP POPULARITY popularity fails");
                common::milog::MiLogStream::~MiLogStream(&v20);
                v6 = -1;
              }
              else
              {
                ActionReason::ActionReason((ActionReason *const)(v3 + 96), ACTION_REASON_GM, ITEM_LIMIT_GM);
                v11 = std::__shared_ptr_access<SeaLampActivity,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<SeaLampActivity,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 64));
                SeaLampActivity::addPopularity(v11, *(_DWORD *)(v3 + 48), (const ActionReason *)(v3 + 96));
                v6 = 0;
              }
            }
            else
            {
              common::milog::MiLogStream::create(
                &v20,
                &common::milog::MiLogDefault::default_log_obj_,
                3u,
                "./src/player/gm/player_gm_comp.cpp",
                "procActivitySeaLamp",
                9630);
              common::milog::MiLogStream::operator<<<char [25],(char *[25])0>(
                &v20,
                (const char (*)[25])"SEALAMP POPULARITY value");
              common::milog::MiLogStream::~MiLogStream(&v20);
              v6 = -1;
            }
          }
          else
          {
            v12 = std::vector<std::string>::operator[](param_vec, 0LL);
            if ( std::operator==<char>(v12, "CLEAR") )
            {
              v13 = std::__shared_ptr_access<SeaLampActivity,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<SeaLampActivity,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 64));
              v6 = SeaLampActivity::clearByGm(v13);
            }
            else
            {
              v14 = std::vector<std::string>::operator[](param_vec, 0LL);
              if ( std::operator==<char>(v14, "CLOSE") )
              {
                v15 = std::__shared_ptr_access<SeaLampActivity,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<SeaLampActivity,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 64));
                v6 = SeaLampActivity::closeContentByGm(v15);
              }
              else
              {
                v16 = std::vector<std::string>::operator[](param_vec, 0LL);
                if ( std::operator==<char>(v16, "OPEN") )
                {
                  v17 = std::__shared_ptr_access<SeaLampActivity,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<SeaLampActivity,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 64));
                  v6 = SeaLampActivity::openContentByGm(v17);
                }
                else
                {
                  v6 = 0;
                }
              }
            }
          }
        }
      }
    }
    std::shared_ptr<SeaLampActivity>::~shared_ptr((std::shared_ptr<SeaLampActivity> *const)(v3 + 64));
  }
  result = v6;
  if ( v21 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8010) = 0;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8010) = -168430091;
  }
  return result;
};

// Line 9659: range 0000000017D7831A-0000000017D783BC
void __cdecl procResetWatcherRegister::procResetWatcherRegister(procResetWatcherRegister *const this)
{
  std::function<int(GmContext&,const std::vector<std::string>&,std::string&)> *v1; // rax
  std::allocator<char> __a; // [rsp+1Fh] [rbp-31h] BYREF
  std::string __k; // [rsp+20h] [rbp-30h] BYREF

  std::allocator<char>::allocator(&__a);
  std::string::basic_string<std::allocator<char>>(&__k, "RESET_WATCHER", &__a);
  v1 = std::unordered_map<std::string,std::function<int ()(GmContext &,std::vector<std::string> const&,std::string&)>>::operator[](
         &GmUtils::op_func_map[abi:cxx11],
         &__k);
  std::function<int ()(GmContext &,std::vector<std::string> const&,std::string&)>::operator=<int (&)(GmContext &,std::vector<std::string> const&,std::string&)>(
    v1,
    (int (*)(GmContext *, const std::vector<std::string> *, std::string *))procResetWatcher);
  std::string::~string(&__k);
  std::allocator<char>::~allocator(&__a);
};

// Line 9660: range 0000000017C10DA8-0000000017C110DB
int32_t __cdecl procResetWatcher(GmContext *context, const std::vector<std::string> *param_vec, std::string *ret_msg)
{
  unsigned __int64 v3; // rbx
  __int64 v4; // rax
  _DWORD *v5; // r13
  int32_t v6; // r14d
  const std::string *v7; // rax
  const std::string *v8; // rax
  const std::string *v9; // rax
  PlayerWatcherComp *WatcherComp; // rax
  int32_t result; // eax
  size_t i; // [rsp+28h] [rbp-F8h]
  std::string __lhs; // [rsp+30h] [rbp-F0h] BYREF
  std::string v15; // [rsp+50h] [rbp-D0h] BYREF
  char v16[176]; // [rsp+70h] [rbp-B0h] BYREF

  v3 = (unsigned __int64)v16;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_1(128LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "2 48 4 15 watcher_id:9671 64 24 19 watcher_id_vec:9666";
  *(_QWORD *)(v3 + 16) = procResetWatcher;
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = -234556943;
  v5[536862722] = -218103808;
  v5[536862723] = -202116109;
  if ( std::vector<std::string>::size(param_vec) )
  {
    std::vector<unsigned int>::vector((std::vector<unsigned int> *const)(v3 + 64));
    v7 = std::vector<std::string>::operator[](param_vec, 0LL);
    if ( std::operator!=<char>(v7, _f.gap0) )
    {
      for ( i = 0LL; i < std::vector<std::string>::size(param_vec); ++i )
      {
        *(_DWORD *)(v3 + 48) = 0;
        v8 = std::vector<std::string>::operator[](param_vec, i);
        if ( common::tools::StringUtils::strToNum<unsigned int>(v8, (unsigned int *)(v3 + 48), 1) )
        {
          v9 = std::vector<std::string>::operator[](param_vec, i);
          std::operator+<char>(&__lhs, "parse param:", v9);
          std::operator+<char>(&v15, &__lhs, " fail");
          std::string::operator=(ret_msg, &v15);
          std::string::~string(&v15);
          std::string::~string(&__lhs);
          v6 = -1;
          goto LABEL_15;
        }
        std::vector<unsigned int>::push_back(
          (std::vector<unsigned int> *const)(v3 + 64),
          (const std::vector<unsigned int>::value_type *)(v3 + 48));
      }
    }
    if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
      __asan_report_load8(&context->player);
    WatcherComp = Player::getWatcherComp(context->player);
    v6 = PlayerWatcherComp::setWatcherByGm(WatcherComp, (std::vector<unsigned int> *)(v3 + 64), 0);
LABEL_15:
    std::vector<unsigned int>::~vector((std::vector<unsigned int> *const)(v3 + 64));
  }
  else
  {
    std::string::operator=(ret_msg, "param not enough");
    v6 = -1;
  }
  result = v6;
  if ( v16 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 9683: range 0000000017D783BE-0000000017D78460
void __cdecl procActiveWatcherRegister::procActiveWatcherRegister(procActiveWatcherRegister *const this)
{
  std::function<int(GmContext&,const std::vector<std::string>&,std::string&)> *v1; // rax
  std::allocator<char> __a; // [rsp+1Fh] [rbp-31h] BYREF
  std::string __k; // [rsp+20h] [rbp-30h] BYREF

  std::allocator<char>::allocator(&__a);
  std::string::basic_string<std::allocator<char>>(&__k, "ACTIVE_WATCHER", &__a);
  v1 = std::unordered_map<std::string,std::function<int ()(GmContext &,std::vector<std::string> const&,std::string&)>>::operator[](
         &GmUtils::op_func_map[abi:cxx11],
         &__k);
  std::function<int ()(GmContext &,std::vector<std::string> const&,std::string&)>::operator=<int (&)(GmContext &,std::vector<std::string> const&,std::string&)>(
    v1,
    (int (*)(GmContext *, const std::vector<std::string> *, std::string *))procActiveWatcher);
  std::string::~string(&__k);
  std::allocator<char>::~allocator(&__a);
};

// Line 9684: range 0000000017C110DC-0000000017C1140F
int32_t __cdecl procActiveWatcher(GmContext *context, const std::vector<std::string> *param_vec, std::string *ret_msg)
{
  unsigned __int64 v3; // rbx
  __int64 v4; // rax
  _DWORD *v5; // r13
  int32_t v6; // r14d
  const std::string *v7; // rax
  const std::string *v8; // rax
  const std::string *v9; // rax
  PlayerWatcherComp *WatcherComp; // rax
  int32_t result; // eax
  size_t i; // [rsp+28h] [rbp-F8h]
  std::string __lhs; // [rsp+30h] [rbp-F0h] BYREF
  std::string v15; // [rsp+50h] [rbp-D0h] BYREF
  char v16[176]; // [rsp+70h] [rbp-B0h] BYREF

  v3 = (unsigned __int64)v16;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_1(128LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "2 48 4 15 watcher_id:9695 64 24 19 watcher_id_vec:9690";
  *(_QWORD *)(v3 + 16) = procActiveWatcher;
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = -234556943;
  v5[536862722] = -218103808;
  v5[536862723] = -202116109;
  if ( std::vector<std::string>::size(param_vec) )
  {
    std::vector<unsigned int>::vector((std::vector<unsigned int> *const)(v3 + 64));
    v7 = std::vector<std::string>::operator[](param_vec, 0LL);
    if ( std::operator!=<char>(v7, _f.gap0) )
    {
      for ( i = 0LL; i < std::vector<std::string>::size(param_vec); ++i )
      {
        *(_DWORD *)(v3 + 48) = 0;
        v8 = std::vector<std::string>::operator[](param_vec, i);
        if ( common::tools::StringUtils::strToNum<unsigned int>(v8, (unsigned int *)(v3 + 48), 1) )
        {
          v9 = std::vector<std::string>::operator[](param_vec, i);
          std::operator+<char>(&__lhs, "parse param:", v9);
          std::operator+<char>(&v15, &__lhs, " fail");
          std::string::operator=(ret_msg, &v15);
          std::string::~string(&v15);
          std::string::~string(&__lhs);
          v6 = -1;
          goto LABEL_15;
        }
        std::vector<unsigned int>::push_back(
          (std::vector<unsigned int> *const)(v3 + 64),
          (const std::vector<unsigned int>::value_type *)(v3 + 48));
      }
    }
    if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
      __asan_report_load8(&context->player);
    WatcherComp = Player::getWatcherComp(context->player);
    v6 = PlayerWatcherComp::setWatcherByGm(WatcherComp, (std::vector<unsigned int> *)(v3 + 64), 1);
LABEL_15:
    std::vector<unsigned int>::~vector((std::vector<unsigned int> *const)(v3 + 64));
  }
  else
  {
    std::string::operator=(ret_msg, "param not enough");
    v6 = -1;
  }
  result = v6;
  if ( v16 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 9707: range 0000000017D78462-0000000017D78504
void __cdecl procAddWatcherProgressRegister::procAddWatcherProgressRegister(procAddWatcherProgressRegister *const this)
{
  std::function<int(GmContext&,const std::vector<std::string>&,std::string&)> *v1; // rax
  std::allocator<char> __a; // [rsp+1Fh] [rbp-31h] BYREF
  std::string __k; // [rsp+20h] [rbp-30h] BYREF

  std::allocator<char>::allocator(&__a);
  std::string::basic_string<std::allocator<char>>(&__k, "ADD_WATCHER_PROGRESS", &__a);
  v1 = std::unordered_map<std::string,std::function<int ()(GmContext &,std::vector<std::string> const&,std::string&)>>::operator[](
         &GmUtils::op_func_map[abi:cxx11],
         &__k);
  std::function<int ()(GmContext &,std::vector<std::string> const&,std::string&)>::operator=<int (&)(GmContext &,std::vector<std::string> const&,std::string&)>(
    v1,
    (int (*)(GmContext *, const std::vector<std::string> *, std::string *))procAddWatcherProgress);
  std::string::~string(&__k);
  std::allocator<char>::~allocator(&__a);
};

// Line 9708: range 0000000017C11410-0000000017C11704
int32_t __cdecl procAddWatcherProgress(
        GmContext *context,
        const std::vector<std::string> *param_vec,
        std::string *ret_msg)
{
  unsigned __int64 v3; // rbx
  __int64 v4; // rax
  _DWORD *v5; // r12
  int32_t result; // eax
  const std::string *v7; // r13
  const std::string *v8; // rax
  PlayerWatcherComp *WatcherComp; // rax
  std::string __lhs; // [rsp+20h] [rbp-100h] BYREF
  std::string v12; // [rsp+40h] [rbp-E0h] BYREF
  std::string v13; // [rsp+60h] [rbp-C0h] BYREF
  std::string v14; // [rsp+80h] [rbp-A0h] BYREF
  char v15[128]; // [rsp+A0h] [rbp-80h] BYREF

  v3 = (unsigned __int64)v15;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_1(96LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "2 48 4 15 watcher_id:9714 64 4 17 add_progress:9715";
  *(_QWORD *)(v3 + 16) = procAddWatcherProgress;
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = -234556943;
  v5[536862722] = -202116348;
  if ( std::vector<std::string>::size(param_vec) > 1 )
  {
    *(_DWORD *)(v3 + 48) = 0;
    *(_DWORD *)(v3 + 64) = 0;
    if ( common::tools::StringUtils::strVecToNum<0u,unsigned int,unsigned int &>(
           param_vec,
           (unsigned int *)(v3 + 48),
           (unsigned int *)(v3 + 64),
           (unsigned int *)(v3 + 48)) )
    {
      v7 = std::vector<std::string>::operator[](param_vec, 1uLL);
      v8 = std::vector<std::string>::operator[](param_vec, 0LL);
      std::operator+<char>(&__lhs, "parse param:", v8);
      std::operator+<char>(&v12, &__lhs, " ");
      std::operator+<char>(&v13, &v12, v7);
      std::operator+<char>(&v14, &v13, " fail");
      std::string::operator=(ret_msg, &v14);
      std::string::~string(&v14);
      std::string::~string(&v13);
      std::string::~string(&v12);
      std::string::~string(&__lhs);
      result = -1;
    }
    else
    {
      if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
        __asan_report_load8(&context->player);
      WatcherComp = Player::getWatcherComp(context->player);
      result = PlayerWatcherComp::addWatcherProgressByGm(WatcherComp, *(_DWORD *)(v3 + 48), *(_DWORD *)(v3 + 64));
    }
  }
  else
  {
    std::string::operator=(ret_msg, "param not enough");
    result = -1;
  }
  if ( v15 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8008) = 0;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8008) = -168430091;
  }
  return result;
};

// Line 9725: range 0000000017D78506-0000000017D785A8
void __cdecl procWatcherPushTipsRegister::procWatcherPushTipsRegister(procWatcherPushTipsRegister *const this)
{
  std::function<int(GmContext&,const std::vector<std::string>&,std::string&)> *v1; // rax
  std::allocator<char> __a; // [rsp+1Fh] [rbp-31h] BYREF
  std::string __k; // [rsp+20h] [rbp-30h] BYREF

  std::allocator<char>::allocator(&__a);
  std::string::basic_string<std::allocator<char>>(&__k, "WATCHER_PUSHTIPS", &__a);
  v1 = std::unordered_map<std::string,std::function<int ()(GmContext &,std::vector<std::string> const&,std::string&)>>::operator[](
         &GmUtils::op_func_map[abi:cxx11],
         &__k);
  std::function<int ()(GmContext &,std::vector<std::string> const&,std::string&)>::operator=<int (&)(GmContext &,std::vector<std::string> const&,std::string&)>(
    v1,
    (int (*)(GmContext *, const std::vector<std::string> *, std::string *))procWatcherPushTips);
  std::string::~string(&__k);
  std::allocator<char>::~allocator(&__a);
};

// Line 9726: range 0000000017C11705-0000000017C11B92
int32_t __cdecl procWatcherPushTips(
        GmContext *context,
        const std::vector<std::string> *param_vec,
        std::string *ret_msg)
{
  unsigned __int64 v3; // rbx
  __int64 v4; // rax
  _DWORD *v5; // r12
  int32_t result; // eax
  const std::string *v7; // rax
  const std::string *v8; // rax
  const std::string *v9; // rax
  PlayerWatcherComp *WatcherComp; // rax
  const std::string *v11; // rax
  const std::string *v12; // rax
  const std::string *v13; // rax
  PlayerWatcherComp *v14; // rax
  const std::string *v15; // rax
  std::string __lhs; // [rsp+20h] [rbp-C0h] BYREF
  std::string v18; // [rsp+40h] [rbp-A0h] BYREF
  char v19[128]; // [rsp+60h] [rbp-80h] BYREF

  v3 = (unsigned __int64)v19;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_1(96LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "2 48 4 17 push_tips_id:9732 64 4 10 state:9749";
  *(_QWORD *)(v3 + 16) = procWatcherPushTips;
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = -234556943;
  v5[536862722] = -202116348;
  if ( std::vector<std::string>::size(param_vec) <= 1 )
    goto LABEL_5;
  *(_DWORD *)(v3 + 48) = 0;
  v7 = std::vector<std::string>::operator[](param_vec, 1uLL);
  if ( common::tools::StringUtils::strToNum<unsigned int>(v7, (unsigned int *)(v3 + 48), 1) )
  {
    v8 = std::vector<std::string>::operator[](param_vec, 1uLL);
    std::operator+<char>(&__lhs, "parse param: ", v8);
    std::operator+<char>(&v18, &__lhs, " fail");
    std::string::operator=(ret_msg, &v18);
    std::string::~string(&v18);
    std::string::~string(&__lhs);
    result = -1;
  }
  else
  {
    v9 = std::vector<std::string>::operator[](param_vec, 0LL);
    if ( std::operator==<char>(v9, off_26356D00) )
    {
      if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
        __asan_report_load8(&context->player);
      WatcherComp = Player::getWatcherComp(context->player);
      result = PlayerWatcherComp::addPushTipsByGm(WatcherComp, *(_DWORD *)(v3 + 48));
    }
    else
    {
      v11 = std::vector<std::string>::operator[](param_vec, 0LL);
      if ( std::operator==<char>(v11, "SET_STATE") )
      {
        if ( std::vector<std::string>::size(param_vec) <= 2 )
        {
LABEL_5:
          std::string::operator=(ret_msg, "param not enough");
          result = -1;
          goto LABEL_20;
        }
        *(_DWORD *)(v3 + 64) = 0;
        v12 = std::vector<std::string>::operator[](param_vec, 2uLL);
        if ( common::tools::StringUtils::strToNum<unsigned int>(v12, (unsigned int *)(v3 + 64), 1) )
        {
          v13 = std::vector<std::string>::operator[](param_vec, 2uLL);
          std::operator+<char>(&__lhs, "parse param: ", v13);
          std::operator+<char>(&v18, &__lhs, " fail");
          std::string::operator=(ret_msg, &v18);
          std::string::~string(&v18);
          std::string::~string(&__lhs);
          result = -1;
        }
        else
        {
          if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
            __asan_report_load8(&context->player);
          v14 = Player::getWatcherComp(context->player);
          result = PlayerWatcherComp::setPushTipsStateByGm(v14, *(_DWORD *)(v3 + 48), *(_DWORD *)(v3 + 64));
        }
      }
      else
      {
        v15 = std::vector<std::string>::operator[](param_vec, 0LL);
        std::operator+<char>(&v18, "no such command: ", v15);
        std::string::operator=(ret_msg, &v18);
        std::string::~string(&v18);
        result = -1;
      }
    }
  }
LABEL_20:
  if ( v19 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8008) = 0;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8008) = -168430091;
  }
  return result;
};

// Line 9764: range 0000000017D785AA-0000000017D7864C
void __cdecl procTakeActivityWatcherRewardRegister::procTakeActivityWatcherRewardRegister(
        procTakeActivityWatcherRewardRegister *const this)
{
  std::function<int(GmContext&,const std::vector<std::string>&,std::string&)> *v1; // rax
  std::allocator<char> __a; // [rsp+1Fh] [rbp-31h] BYREF
  std::string __k; // [rsp+20h] [rbp-30h] BYREF

  std::allocator<char>::allocator(&__a);
  std::string::basic_string<std::allocator<char>>(&__k, "TAKE_ACTIVITY_WATCHER_REWARD", &__a);
  v1 = std::unordered_map<std::string,std::function<int ()(GmContext &,std::vector<std::string> const&,std::string&)>>::operator[](
         &GmUtils::op_func_map[abi:cxx11],
         &__k);
  std::function<int ()(GmContext &,std::vector<std::string> const&,std::string&)>::operator=<int (&)(GmContext &,std::vector<std::string> const&,std::string&)>(
    v1,
    (int (*)(GmContext *, const std::vector<std::string> *, std::string *))procTakeActivityWatcherReward);
  std::string::~string(&__k);
  std::allocator<char>::~allocator(&__a);
};

// Line 9765: range 0000000017C11B93-0000000017C11F43
int32_t __cdecl procTakeActivityWatcherReward(
        GmContext *context,
        const std::vector<std::string> *param_vec,
        std::string *ret_msg)
{
  unsigned __int64 v3; // r12
  __int64 v4; // rax
  _DWORD *v5; // r13
  int32_t v6; // r14d
  const std::string *v7; // rbx
  const std::string *v8; // rax
  uint32_t ActivityComp; // eax
  std::__shared_ptr_access<BaseActivity,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v10; // rax
  BaseActivity *v12; // rax
  int32_t result; // eax
  std::string __lhs; // [rsp+20h] [rbp-110h] BYREF
  std::string v16; // [rsp+40h] [rbp-F0h] BYREF
  std::string v17; // [rsp+60h] [rbp-D0h] BYREF
  std::string v18; // [rsp+80h] [rbp-B0h] BYREF
  char v19[144]; // [rsp+A0h] [rbp-90h] BYREF

  v3 = (unsigned __int64)v19;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_1(96LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "3 32 4 16 activity_id:9771 48 4 15 watcher_id:9772 64 16 17 activity_ptr:9778";
  *(_QWORD *)(v3 + 16) = procTakeActivityWatcherReward;
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = -234556924;
  v5[536862722] = -202178560;
  if ( std::vector<std::string>::size(param_vec) > 1 )
  {
    *(_DWORD *)(v3 + 32) = 0;
    *(_DWORD *)(v3 + 48) = 0;
    if ( common::tools::StringUtils::strVecToNum<0u,unsigned int,unsigned int &>(
           param_vec,
           (unsigned int *)(v3 + 32),
           (unsigned int *)(v3 + 48),
           (unsigned int *)(v3 + 32)) )
    {
      v7 = std::vector<std::string>::operator[](param_vec, 1uLL);
      v8 = std::vector<std::string>::operator[](param_vec, 0LL);
      std::operator+<char>(&__lhs, "parse param:", v8);
      std::operator+<char>(&v16, &__lhs, " ");
      std::operator+<char>(&v17, &v16, v7);
      std::operator+<char>(&v18, &v17, " fail");
      std::string::operator=(ret_msg, &v18);
      std::string::~string(&v18);
      std::string::~string(&v17);
      std::string::~string(&v16);
      std::string::~string(&__lhs);
      v6 = -1;
    }
    else
    {
      if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
        __asan_report_load8(&context->player);
      ActivityComp = (unsigned int)Player::getActivityComp(context->player);
      PlayerActivityComp::findBaseActivity((PlayerActivityComp *const)(v3 + 64), ActivityComp);
      if ( std::operator==<BaseActivity>(0LL, (const std::shared_ptr<BaseActivity> *)(v3 + 64))
        || (v10 = std::__shared_ptr_access<BaseActivity,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<BaseActivity,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 64)),
            !BaseActivity::isOpening(v10, 0)) )
      {
        std::string::operator=(ret_msg, "activity is not open");
        v6 = -1;
      }
      else
      {
        v12 = std::__shared_ptr_access<BaseActivity,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<BaseActivity,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 64));
        v6 = BaseActivity::takeWatcherReward(v12, *(_DWORD *)(v3 + 48));
      }
      std::shared_ptr<BaseActivity>::~shared_ptr((std::shared_ptr<BaseActivity> *const)(v3 + 64));
    }
  }
  else
  {
    std::string::operator=(ret_msg, "param not enough");
    v6 = -1;
  }
  result = v6;
  if ( v19 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8008) = 0;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8008) = -168430091;
  }
  return result;
};

// Line 9787: range 0000000017D7864E-0000000017D786F0
void __cdecl procTestTriggerWatcherRegister::procTestTriggerWatcherRegister(procTestTriggerWatcherRegister *const this)
{
  std::function<int(GmContext&,const std::vector<std::string>&,std::string&)> *v1; // rax
  std::allocator<char> __a; // [rsp+1Fh] [rbp-31h] BYREF
  std::string __k; // [rsp+20h] [rbp-30h] BYREF

  std::allocator<char>::allocator(&__a);
  std::string::basic_string<std::allocator<char>>(&__k, "TEST_TRIGGER_WATCHER", &__a);
  v1 = std::unordered_map<std::string,std::function<int ()(GmContext &,std::vector<std::string> const&,std::string&)>>::operator[](
         &GmUtils::op_func_map[abi:cxx11],
         &__k);
  std::function<int ()(GmContext &,std::vector<std::string> const&,std::string&)>::operator=<int (&)(GmContext &,std::vector<std::string> const&,std::string&)>(
    v1,
    (int (*)(GmContext *, const std::vector<std::string> *, std::string *))procTestTriggerWatcher);
  std::string::~string(&__k);
  std::allocator<char>::~allocator(&__a);
};

// Line 9788: range 0000000017C11F44-0000000017C12261
int32_t __cdecl procTestTriggerWatcher(
        GmContext *context,
        const std::vector<std::string> *param_vec,
        std::string *ret_msg)
{
  unsigned __int64 v3; // rbx
  __int64 v4; // rax
  unsigned __int64 v5; // r12
  PlayerWatcherComp *WatcherComp; // rax
  const std::string *v7; // rax
  int32_t result; // eax
  const std::string *v9; // rax
  const std::string *v10; // rax
  PlayerWatcherComp *v11; // r14
  uint32_t v12; // r13d
  std::shared_ptr<Creature> p_killer_ptr; // [rsp+20h] [rbp-C0h] BYREF
  std::string __lhs; // [rsp+30h] [rbp-B0h] BYREF
  std::string v16; // [rsp+50h] [rbp-90h] BYREF
  char v17[112]; // [rsp+70h] [rbp-70h] BYREF

  v3 = (unsigned __int64)v17;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_0(64LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "1 32 4 15 monster_id:9801";
  *(_QWORD *)(v3 + 16) = procTestTriggerWatcher;
  v5 = v3 >> 3;
  *(_DWORD *)(v5 + 2147450880) = -235802127;
  *(_DWORD *)(v5 + 2147450884) = -202116348;
  if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
    __asan_report_load8(&context->player);
  WatcherComp = Player::getWatcherComp(context->player);
  PlayerWatcherComp::triggerHomeDoPlant(WatcherComp);
  if ( std::vector<std::string>::size(param_vec) )
  {
    v7 = std::vector<std::string>::operator[](param_vec, 0LL);
    if ( std::operator==<char>(v7, "MP_KILL_MONSTER_NUM") )
    {
      if ( std::vector<std::string>::size(param_vec) <= 1 )
      {
        std::string::operator=(ret_msg, "MP_KILL_MONSTER_NUM param not enough");
        result = -1;
        goto LABEL_16;
      }
      *(_DWORD *)(v3 + 32) = 0;
      v9 = std::vector<std::string>::operator[](param_vec, 1uLL);
      if ( common::tools::StringUtils::strToNum<unsigned int>(v9, (unsigned int *)(v3 + 32), 1) )
      {
        v10 = std::vector<std::string>::operator[](param_vec, 1uLL);
        std::operator+<char>(&__lhs, "MP_KILL_MONSTER_NUM parse monster_id:", v10);
        std::operator+<char>(&v16, &__lhs, " fail");
        std::string::operator=(ret_msg, &v16);
        std::string::~string(&v16);
        std::string::~string(&__lhs);
        result = -1;
        goto LABEL_16;
      }
      if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
        __asan_report_load8(&context->player);
      v11 = Player::getWatcherComp(context->player);
      v12 = *(_DWORD *)(v3 + 32);
      std::shared_ptr<Creature>::shared_ptr(&p_killer_ptr, 0LL);
      PlayerWatcherComp::triggerMpKillMonsterNum(v11, &p_killer_ptr, v12);
      std::shared_ptr<Creature>::~shared_ptr(&p_killer_ptr);
    }
  }
  result = 0;
LABEL_16:
  if ( v17 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 9814: range 0000000017D786F2-0000000017D78794
void __cdecl procTowerRegister::procTowerRegister(procTowerRegister *const this)
{
  std::function<int(GmContext&,const std::vector<std::string>&,std::string&)> *v1; // rax
  std::allocator<char> __a; // [rsp+1Fh] [rbp-31h] BYREF
  std::string __k; // [rsp+20h] [rbp-30h] BYREF

  std::allocator<char>::allocator(&__a);
  std::string::basic_string<std::allocator<char>>(&__k, "TOWER", &__a);
  v1 = std::unordered_map<std::string,std::function<int ()(GmContext &,std::vector<std::string> const&,std::string&)>>::operator[](
         &GmUtils::op_func_map[abi:cxx11],
         &__k);
  std::function<int ()(GmContext &,std::vector<std::string> const&,std::string&)>::operator=<int (&)(GmContext &,std::vector<std::string> const&,std::string&)>(
    v1,
    (int (*)(GmContext *, const std::vector<std::string> *, std::string *))procTower);
  std::string::~string(&__k);
  std::allocator<char>::~allocator(&__a);
};

// Line 9815: range 0000000017C12262-0000000017C13046
int32_t __cdecl procTower(GmContext *context, const std::vector<std::string> *param_vec, std::string *ret_msg)
{
  unsigned __int64 v3; // r13
  __int64 v4; // rax
  _DWORD *v5; // r12
  int32_t v6; // r14d
  const std::string *v7; // rax
  const std::string *v8; // rax
  const std::string *v9; // rax
  const std::string *v10; // rax
  const std::string *v11; // rax
  PlayerTowerComp *TowerComp; // rax
  const std::string *v13; // rax
  unsigned int *v14; // r8
  unsigned int *v15; // r9
  PlayerTowerComp *v16; // rax
  const std::string *v17; // rax
  const std::string *v18; // rax
  std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v20; // rax
  bool v21; // bl
  PlayerTowerComp *v22; // rax
  unsigned int CurrentScheduleIdByGm; // eax
  const std::string *v24; // rax
  std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v26; // rax
  bool v27; // bl
  PlayerTowerComp *v28; // rax
  PlayerTowerComp *v29; // rax
  PlayerTowerComp *v30; // rax
  const std::string *v31; // rax
  const std::string *M_current; // r14
  __gnu_cxx::__normal_iterator<const std::string*,std::vector<std::string> > v33; // rax
  std::vector<unsigned int>::reference v35; // rax
  uint32_t *v36; // rdx
  PlayerTowerComp *v37; // rax
  const std::string *v38; // rax
  int32_t result; // eax
  std::allocator<std::string > __a; // [rsp+2Fh] [rbp-211h] BYREF
  uint32_t newest_schedule_id; // [rsp+30h] [rbp-210h]
  uint32_t idx; // [rsp+34h] [rbp-20Ch]
  uint32_t newest_schedule_id_0; // [rsp+38h] [rbp-208h]
  uint32_t idx_0; // [rsp+3Ch] [rbp-204h]
  uint32_t level_id; // [rsp+40h] [rbp-200h]
  uint32_t cur_schedule_id; // [rsp+44h] [rbp-1FCh]
  __gnu_cxx::__normal_iterator<unsigned int*,std::vector<unsigned int> > __i; // [rsp+48h] [rbp-1F8h] BYREF
  __gnu_cxx::__normal_iterator<const std::string*,std::vector<std::string> > v49; // [rsp+50h] [rbp-1F0h] BYREF
  Player *player; // [rsp+58h] [rbp-1E8h]
  std::shared_ptr<proto::TowerMiddleLevelChangeTeamNotify> __r; // [rsp+60h] [rbp-1E0h] BYREF
  std::string __rhs; // [rsp+70h] [rbp-1D0h] BYREF
  std::string v53; // [rsp+90h] [rbp-1B0h] BYREF
  std::string v54; // [rsp+B0h] [rbp-190h] BYREF
  std::string __lhs; // [rsp+D0h] [rbp-170h] BYREF
  std::string v56; // [rsp+F0h] [rbp-150h] BYREF
  char v57[304]; // [rsp+110h] [rbp-130h] BYREF

  v3 = (unsigned __int64)v57;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_2(256LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "6 48 4 13 star_num:9843 64 4 16 floor_index:9844 80 4 16 schedule_id:9883 96 16 24 for_show_noti"
                        "fy_ptr:9824 128 24 19 temp_param_vec:9893 192 24 12 num_vec:9894";
  *(_QWORD *)(v3 + 16) = procTower;
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = -234556943;
  v5[536862722] = -234556924;
  v5[536862723] = -219021312;
  v5[536862724] = -234881024;
  v5[536862725] = -218959118;
  v5[536862726] = -218103808;
  v5[536862727] = -202116109;
  if ( std::vector<std::string>::size(param_vec) <= 1 )
  {
    std::string::operator=(ret_msg, "param not enough");
    v6 = -1;
    goto LABEL_68;
  }
  if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
    __asan_report_load8(&context->player);
  player = context->player;
  v7 = std::vector<std::string>::operator[](param_vec, 0LL);
  if ( std::operator==<char>(v7, "MID_NTF") )
  {
    common::tools::perf::make_shared<proto::TowerMiddleLevelChangeTeamNotify>();
    std::dynamic_pointer_cast<google::protobuf::Message const,proto::TowerMiddleLevelChangeTeamNotify>(&__r);
    Player::sendMessage(player, (common::minet::ConstMessagePtr *)&__r, 0LL);
    std::shared_ptr<google::protobuf::Message const>::~shared_ptr((std::shared_ptr<const google::protobuf::Message> *const)&__r);
    v6 = 0;
    std::shared_ptr<proto::TowerMiddleLevelChangeTeamNotify>::~shared_ptr((std::shared_ptr<proto::TowerMiddleLevelChangeTeamNotify> *const)(v3 + 96));
    goto LABEL_68;
  }
  v8 = std::vector<std::string>::operator[](param_vec, 0LL);
  if ( std::operator==<char>(v8, "CLEAR") )
  {
    *(_DWORD *)(v3 + 80) = 0;
    v9 = std::vector<std::string>::operator[](param_vec, 1uLL);
    if ( std::operator!=<char>(v9, _f.gap0) )
    {
      v10 = std::vector<std::string>::operator[](param_vec, 1uLL);
      if ( common::tools::StringUtils::strToNum<unsigned int>(v10, (unsigned int *)(v3 + 80), 1) )
      {
        v11 = std::vector<std::string>::operator[](param_vec, 1uLL);
        std::operator+<char>(&__lhs, "parse floor_index:", v11);
        std::operator+<char>(&v56, &__lhs, " fail");
        std::string::operator=(ret_msg, &v56);
        std::string::~string(&v56);
        std::string::~string(&__lhs);
        v6 = -1;
        goto LABEL_68;
      }
    }
    TowerComp = Player::getTowerComp(player);
    PlayerTowerComp::clearRecordByGm(TowerComp, *(_DWORD *)(v3 + 80));
    goto LABEL_67;
  }
  v13 = std::vector<std::string>::operator[](param_vec, 0LL);
  if ( std::operator==<char>(v13, "FINISH") )
  {
    *(_DWORD *)(v3 + 48) = 1;
    *(_DWORD *)(v3 + 64) = 1;
    *(_DWORD *)(v3 + 80) = 1;
    common::tools::StringUtils::strVecToNum<1u,unsigned int,unsigned int &,unsigned int &>(
      param_vec,
      (unsigned int *)(v3 + 48),
      (unsigned int *)(v3 + 64),
      (unsigned int *)(v3 + 80),
      v14,
      v15);
    v16 = Player::getTowerComp(player);
    PlayerTowerComp::finishTowerByGm(v16, *(_DWORD *)(v3 + 48), *(_DWORD *)(v3 + 64), *(_DWORD *)(v3 + 80));
LABEL_67:
    v6 = 0;
    goto LABEL_68;
  }
  v17 = std::vector<std::string>::operator[](param_vec, 0LL);
  if ( std::operator==<char>(v17, "SCHEDULE") )
  {
    if ( std::vector<std::string>::size(param_vec) > 1
      && (v18 = std::vector<std::string>::operator[](param_vec, 1uLL), std::operator==<char>(v18, "PRINT")) )
    {
      newest_schedule_id = 0;
      for ( idx = 1; idx <= 0x3E8; ++idx )
      {
        ServiceBox::findService<GameserverService>();
        GameserverService::getConfig((GameserverService *const)&__r);
        v20 = std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false> *const)&__r);
        v21 = TowerExcelConfigMgr::findTowerScheduleConfig(&v20->design_config.txt_config_mgr.tower_config_mgr, idx) != 0LL;
        std::shared_ptr<Config>::~shared_ptr((std::shared_ptr<Config> *const)&__r);
        if ( v21 )
          newest_schedule_id = idx;
      }
      std::to_string(&__lhs, newest_schedule_id);
      if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
        __asan_report_load8(&context->player);
      v22 = Player::getTowerComp(context->player);
      CurrentScheduleIdByGm = PlayerTowerComp::getCurrentScheduleIdByGm(v22);
      std::to_string(&__rhs, CurrentScheduleIdByGm);
      std::operator+<char>(&v53, "current tower schedule_id:", &__rhs);
      std::operator+<char>(&v54, &v53, " newest schedule_id:");
      std::operator+<char>(&v56, &v54, &__lhs);
      std::string::operator=(ret_msg, &v56);
      std::string::~string(&v56);
      std::string::~string(&v54);
      std::string::~string(&v53);
      std::string::~string(&__rhs);
      std::string::~string(&__lhs);
      v6 = 0;
    }
    else if ( std::vector<std::string>::size(param_vec) > 1
           && (v24 = std::vector<std::string>::operator[](param_vec, 1uLL), std::operator==<char>(v24, "SET_TO_NEWEST")) )
    {
      newest_schedule_id_0 = 0;
      for ( idx_0 = 1; idx_0 <= 0x3E8; ++idx_0 )
      {
        ServiceBox::findService<GameserverService>();
        GameserverService::getConfig((GameserverService *const)&__r);
        v26 = std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false> *const)&__r);
        v27 = TowerExcelConfigMgr::findTowerScheduleConfig(&v26->design_config.txt_config_mgr.tower_config_mgr, idx_0) != 0LL;
        std::shared_ptr<Config>::~shared_ptr((std::shared_ptr<Config> *const)&__r);
        if ( v27 )
          newest_schedule_id_0 = idx_0;
      }
      if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
        __asan_report_load8(&context->player);
      v28 = Player::getTowerComp(context->player);
      cur_schedule_id = PlayerTowerComp::getCurrentScheduleIdByGm(v28);
      if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
        __asan_report_load8(&context->player);
      v29 = Player::getTowerComp(context->player);
      if ( PlayerTowerComp::setCurrentScheduleIdByGm(v29, newest_schedule_id_0, ret_msg) )
      {
        v6 = -1;
      }
      else
      {
        std::to_string(&__lhs, newest_schedule_id_0);
        std::to_string(&__rhs, cur_schedule_id);
        std::operator+<char>(&v53, off_26364320, &__rhs);
        std::operator+<char>(&v54, &v53, " to:");
        std::operator+<char>(&v56, &v54, &__lhs);
        std::string::operator=(ret_msg, &v56);
        std::string::~string(&v56);
        std::string::~string(&v54);
        std::string::~string(&v53);
        std::string::~string(&__rhs);
        std::string::~string(&__lhs);
        v6 = 0;
      }
    }
    else
    {
      *(_DWORD *)(v3 + 80) = 0;
      if ( common::tools::StringUtils::strVecToNum<1u,unsigned int>(param_vec, (unsigned int *)(v3 + 80)) )
      {
        std::string::operator=(ret_msg, "parse schedule_id fail");
        v6 = -1;
      }
      else
      {
        if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
          __asan_report_load8(&context->player);
        v30 = Player::getTowerComp(context->player);
        v6 = PlayerTowerComp::setCurrentScheduleIdByGm(v30, *(_DWORD *)(v3 + 80), ret_msg);
      }
    }
  }
  else
  {
    v31 = std::vector<std::string>::operator[](param_vec, 0LL);
    if ( std::operator==<char>(v31, "SET_BUFF") )
    {
      std::allocator<std::string>::allocator(&__a);
      M_current = std::vector<std::string>::end(param_vec)._M_current;
      v49._M_current = std::vector<std::string>::begin(param_vec)._M_current;
      v33._M_current = __gnu_cxx::__normal_iterator<std::string const*,std::vector<std::string>>::operator+(&v49, 1LL)._M_current;
      std::vector<std::string>::vector<__gnu_cxx::__normal_iterator<std::string const*,std::vector<std::string>>,void>(
        (std::vector<std::string> *const)(v3 + 128),
        v33,
        (__gnu_cxx::__normal_iterator<const std::string*,std::vector<std::string> >)M_current,
        &__a);
      std::allocator<std::string>::~allocator(&__a);
      std::vector<unsigned int>::vector((std::vector<unsigned int> *const)(v3 + 192));
      if ( common::tools::StringUtils::strVecToNumVec<unsigned int>(
             (const std::vector<std::string> *)(v3 + 128),
             (std::vector<unsigned int> *)(v3 + 192))
        || std::vector<unsigned int>::empty((const std::vector<unsigned int> *const)(v3 + 192)) )
      {
        std::string::operator=(ret_msg, "strVecToNumVec fail");
        v6 = -1;
      }
      else
      {
        v35 = std::vector<unsigned int>::operator[]((std::vector<unsigned int> *const)(v3 + 192), 0LL);
        v36 = v35;
        if ( *(_BYTE *)(((unsigned __int64)v35 >> 3) + 0x7FFF8000) != 0
          && (char)(((unsigned __int8)v35 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)v35 >> 3) + 0x7FFF8000) )
        {
          __asan_report_load4(v35);
        }
        level_id = *v36;
        __i._M_current = std::vector<unsigned int>::begin((std::vector<unsigned int> *const)(v3 + 192))._M_current;
        __gnu_cxx::__normal_iterator<unsigned int const*,std::vector<unsigned int>>::__normal_iterator<unsigned int *>(
          (__gnu_cxx::__normal_iterator<unsigned int const*,std::vector<unsigned int> > *const)&v49,
          &__i);
        std::vector<unsigned int>::erase(
          (std::vector<unsigned int> *const)(v3 + 192),
          (std::vector<unsigned int>::const_iterator)v49._M_current);
        if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
          __asan_report_load8(&context->player);
        v37 = Player::getTowerComp(context->player);
        PlayerTowerComp::setDailyLevelBuffByGm(v37, level_id, (const std::vector<unsigned int> *)(v3 + 192));
        v6 = 0;
      }
      std::vector<unsigned int>::~vector((std::vector<unsigned int> *const)(v3 + 192));
      std::vector<std::string>::~vector((std::vector<std::string> *const)(v3 + 128));
    }
    else
    {
      v38 = std::vector<std::string>::operator[](param_vec, 0LL);
      std::operator+<char>(&v56, "unknown:", v38);
      std::string::operator=(ret_msg, &v56);
      std::string::~string(&v56);
      v6 = -1;
    }
  }
LABEL_68:
  result = v6;
  if ( v57 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8010) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8018) = 0LL;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 9914: range 0000000017D78796-0000000017D78838
void __cdecl procWindSeedRegister::procWindSeedRegister(procWindSeedRegister *const this)
{
  std::function<int(GmContext&,const std::vector<std::string>&,std::string&)> *v1; // rax
  std::allocator<char> __a; // [rsp+1Fh] [rbp-31h] BYREF
  std::string __k; // [rsp+20h] [rbp-30h] BYREF

  std::allocator<char>::allocator(&__a);
  std::string::basic_string<std::allocator<char>>(&__k, "WINDSEED", &__a);
  v1 = std::unordered_map<std::string,std::function<int ()(GmContext &,std::vector<std::string> const&,std::string&)>>::operator[](
         &GmUtils::op_func_map[abi:cxx11],
         &__k);
  std::function<int ()(GmContext &,std::vector<std::string> const&,std::string&)>::operator=<int (&)(GmContext &,std::vector<std::string> const&,std::string&)>(
    v1,
    (int (*)(GmContext *, const std::vector<std::string> *, std::string *))procWindSeed);
  std::string::~string(&__k);
  std::allocator<char>::~allocator(&__a);
};

// Line 9915: range 0000000017C13047-0000000017C136D5
int32_t __cdecl procWindSeed(GmContext *context, const std::vector<std::string> *param_vec, std::string *ret_msg)
{
  unsigned __int64 v3; // r13
  __int64 v4; // rax
  _DWORD *v5; // r12
  int32_t v6; // r14d
  const std::string *v7; // rax
  const std::string *v8; // rax
  const std::string *v9; // rax
  unsigned __int64 Position; // rax
  proto::AbilityMixinWindSeedSpawner_RefreshSeed *refreshed; // rax
  float v12; // xmm0_4
  const std::string *v13; // rax
  const std::string *v14; // rax
  proto::AbilityMixinWindSeedSpawner_CatchSeed *v15; // rax
  std::string *v16; // rax
  int32_t result; // eax
  size_t idx; // [rsp+28h] [rbp-318h]
  proto::Vector *proto_pos_ptr; // [rsp+30h] [rbp-310h]
  Vector3 right; // [rsp+38h] [rbp-308h] BYREF
  Vector3 v22; // [rsp+44h] [rbp-2FCh] BYREF
  proto::Vector from; // [rsp+50h] [rbp-2F0h] BYREF
  char v24[720]; // [rsp+70h] [rbp-2D0h] BYREF

  v3 = (unsigned __int64)v24;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_4(672LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "6 32 4 14 entity_id:9939 48 12 8 pos:9930 80 32 10 mixin:9921 144 32 17 ability_data:9945 208 72"
                        " 10 entry:9943 320 280 17 mixin_config:9948";
  *(_QWORD *)(v3 + 16) = procWindSeed;
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = 61956;
  v5[536862721] = 0x4000000;
  v5[536862722] = 62194;
  v5[536862723] = -219021312;
  v5[536862724] = 62194;
  v5[536862725] = -219021312;
  v5[536862726] = 62194;
  v5[536862728] = -234881024;
  v5[536862729] = -218959118;
  v5[536862738] = -218103808;
  v5[536862739] = -202116109;
  v5[536862740] = -202116109;
  if ( std::vector<std::string>::size(param_vec) > 1 )
  {
    proto::AbilityMixinWindSeedSpawner::AbilityMixinWindSeedSpawner((proto::AbilityMixinWindSeedSpawner *const)(v3 + 80));
    v7 = std::vector<std::string>::operator[](param_vec, 0LL);
    if ( std::operator==<char>(v7, "ADD_SIGNAL") )
    {
      proto::AbilityMixinWindSeedSpawner::mutable_add_signal((proto::AbilityMixinWindSeedSpawner *const)(v3 + 80));
    }
    else
    {
      v8 = std::vector<std::string>::operator[](param_vec, 0LL);
      if ( std::operator==<char>(v8, "REFRESH_SEED") )
      {
        *(_DWORD *)(v3 + 32) = 0;
        v9 = std::vector<std::string>::operator[](param_vec, 1uLL);
        common::tools::StringUtils::strToNum<unsigned int>(v9, (unsigned int *)(v3 + 32), 1);
        if ( *(_BYTE *)(((unsigned __int64)&context->avatar >> 3) + 0x7FFF8000) )
          __asan_report_load8(&context->avatar);
        Position = (unsigned __int64)Entity::getPosition((const Entity *const)context->avatar);
        if ( (char)(Position & 7) >= *(_BYTE *)((Position >> 3) + 0x7FFF8000)
          && *(_BYTE *)((Position >> 3) + 0x7FFF8000) != 0
          || *(_BYTE *)(((Position + 11) >> 3) + 0x7FFF8000) != 0
          && (char)((Position + 11) & 7) >= *(_BYTE *)(((Position + 11) >> 3) + 0x7FFF8000) )
        {
          Position = __asan_report_load_n(Position, 12LL);
        }
        *(_QWORD *)(v3 + 48) = *(_QWORD *)Position;
        *(_DWORD *)(v3 + 56) = *(_DWORD *)(Position + 8);
        for ( idx = 0LL; idx < *(unsigned int *)(v3 + 32); ++idx )
        {
          refreshed = proto::AbilityMixinWindSeedSpawner::mutable_refresh_seed((proto::AbilityMixinWindSeedSpawner *const)(v3 + 80));
          proto_pos_ptr = proto::AbilityMixinWindSeedSpawner_RefreshSeed::add_pos_list(refreshed);
          if ( (idx & 0x8000000000000000LL) != 0LL )
            v12 = (float)(int)(idx & 1 | (idx >> 1)) + (float)(int)(idx & 1 | (idx >> 1));
          else
            v12 = (float)(int)idx;
          Vector3::Vector3(&right, v12, 0.0, 0.0);
          v22 = operator+((const Vector3 *)(v3 + 48), &right);
          Vector3::operator proto::Vector(&from, &v22);
          proto::Vector::operator=(proto_pos_ptr, &from);
          proto::Vector::~Vector(&from);
        }
      }
      else
      {
        v13 = std::vector<std::string>::operator[](param_vec, 0LL);
        if ( std::operator==<char>(v13, "CATCH_SEED") )
        {
          *(_DWORD *)(v3 + 32) = 0;
          v14 = std::vector<std::string>::operator[](param_vec, 1uLL);
          common::tools::StringUtils::strToNum<unsigned int>(v14, (unsigned int *)(v3 + 32), 1);
          v15 = proto::AbilityMixinWindSeedSpawner::mutable_catch_seed((proto::AbilityMixinWindSeedSpawner *const)(v3 + 80));
          proto::AbilityMixinWindSeedSpawner_CatchSeed::set_entity_id(v15, *(_DWORD *)(v3 + 32));
        }
      }
    }
    proto::AbilityInvokeEntry::AbilityInvokeEntry((proto::AbilityInvokeEntry *const)(v3 + 208));
    proto::AbilityInvokeEntry::set_argument_type(
      (proto::AbilityInvokeEntry *const)(v3 + 208),
      ABILITY_MIXIN_WIND_SEED_SPAWNER);
    std::string::basic_string(v3 + 144);
    google::protobuf::MessageLite::SerializeToString(
      (const google::protobuf::MessageLite *const)(v3 + 80),
      (std::string *)(v3 + 144));
    v16 = std::move<std::string &>((std::string *)(v3 + 144));
    proto::AbilityInvokeEntry::set_ability_data((proto::AbilityInvokeEntry *const)(v3 + 208), v16);
    data::WindSeedSpawnerMixin::WindSeedSpawnerMixin((data::WindSeedSpawnerMixin *const)(v3 + 320));
    if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
      __asan_report_load8(&context->player);
    AbilityWindSeedSpawnerMixin::invokeImpl(
      (const data::WindSeedSpawnerMixin *)(v3 + 320),
      (const proto::AbilityInvokeEntry *)(v3 + 208),
      context->player);
    v6 = 0;
    data::WindSeedSpawnerMixin::~WindSeedSpawnerMixin((data::WindSeedSpawnerMixin *const)(v3 + 320));
    std::string::~string((void *)(v3 + 144));
    proto::AbilityInvokeEntry::~AbilityInvokeEntry((proto::AbilityInvokeEntry *const)(v3 + 208));
    proto::AbilityMixinWindSeedSpawner::~AbilityMixinWindSeedSpawner((proto::AbilityMixinWindSeedSpawner *const)(v3 + 80));
  }
  else
  {
    std::string::operator=(ret_msg, "param not enough");
    v6 = -1;
  }
  result = v6;
  if ( v24 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8010) = 0LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8018) = 0;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8020) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8048) = 0LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8050) = 0;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8020) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8028) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8030) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8038) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8040) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8048) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8050) = -168430091;
  }
  return result;
};

// Line 9953: range 0000000017D7883A-0000000017D788DC
void __cdecl procBossChestRegister::procBossChestRegister(procBossChestRegister *const this)
{
  std::function<int(GmContext&,const std::vector<std::string>&,std::string&)> *v1; // rax
  std::allocator<char> __a; // [rsp+1Fh] [rbp-31h] BYREF
  std::string __k; // [rsp+20h] [rbp-30h] BYREF

  std::allocator<char>::allocator(&__a);
  std::string::basic_string<std::allocator<char>>(&__k, "BOSSCHEST", &__a);
  v1 = std::unordered_map<std::string,std::function<int ()(GmContext &,std::vector<std::string> const&,std::string&)>>::operator[](
         &GmUtils::op_func_map[abi:cxx11],
         &__k);
  std::function<int ()(GmContext &,std::vector<std::string> const&,std::string&)>::operator=<int (&)(GmContext &,std::vector<std::string> const&,std::string&)>(
    v1,
    (int (*)(GmContext *, const std::vector<std::string> *, std::string *))procBossChest);
  std::string::~string(&__k);
  std::allocator<char>::~allocator(&__a);
};

// Line 9954: range 0000000017C136D6-0000000017C1381C
int32_t __cdecl procBossChest(GmContext *context, const std::vector<std::string> *param_vec, std::string *ret_msg)
{
  const std::string *v4; // rax
  PlayerSceneComp *SceneComp; // rax
  PlayerDungeonComp *DungeonComp; // rax
  PlayerSceneComp *v7; // rax

  if ( std::vector<std::string>::size(param_vec) )
  {
    v4 = std::vector<std::string>::operator[](param_vec, 0LL);
    if ( std::operator==<char>(v4, "CLEAR") )
    {
      if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
        __asan_report_load8(&context->player);
      SceneComp = Player::getSceneComp(context->player);
      PlayerSceneComp::clearBossChestByGm(SceneComp);
      if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
        __asan_report_load8(&context->player);
      DungeonComp = Player::getDungeonComp(context->player);
      PlayerDungeonComp::clearBossChestByGm(DungeonComp);
      if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
        __asan_report_load8(&context->player);
      v7 = Player::getSceneComp(context->player);
      PlayerSceneComp::clearWeeklyBossResinDiscountInfoByGm(v7);
      return 0;
    }
    else
    {
      std::string::operator=(ret_msg, &off_26364780);
      return -1;
    }
  }
  else
  {
    std::string::operator=(ret_msg, "param not enough");
    return -1;
  }
};

// Line 9976: range 0000000017D788DE-0000000017D78980
void __cdecl procMaterialDeleteRegister::procMaterialDeleteRegister(procMaterialDeleteRegister *const this)
{
  std::function<int(GmContext&,const std::vector<std::string>&,std::string&)> *v1; // rax
  std::allocator<char> __a; // [rsp+1Fh] [rbp-31h] BYREF
  std::string __k; // [rsp+20h] [rbp-30h] BYREF

  std::allocator<char>::allocator(&__a);
  std::string::basic_string<std::allocator<char>>(&__k, "MATERIAL_DELETE", &__a);
  v1 = std::unordered_map<std::string,std::function<int ()(GmContext &,std::vector<std::string> const&,std::string&)>>::operator[](
         &GmUtils::op_func_map[abi:cxx11],
         &__k);
  std::function<int ()(GmContext &,std::vector<std::string> const&,std::string&)>::operator=<int (&)(GmContext &,std::vector<std::string> const&,std::string&)>(
    v1,
    (int (*)(GmContext *, const std::vector<std::string> *, std::string *))procMaterialDelete);
  std::string::~string(&__k);
  std::allocator<char>::~allocator(&__a);
};

// Line 9977: range 0000000017C1381D-0000000017C13C5F
int32_t __cdecl procMaterialDelete(GmContext *context, const std::vector<std::string> *param_vec, std::string *ret_msg)
{
  const std::string *v4; // rax
  const std::string *v5; // rax
  const std::string *v6; // rax
  PlayerItemComp *ItemComp; // rax
  const std::string *v8; // rax
  PlayerItemComp *v9; // rax
  const std::string *v10; // rax
  PlayerItemComp *v11; // rax
  std::allocator<char> v13; // [rsp+2Ah] [rbp-D6h] BYREF
  std::allocator<char> __a; // [rsp+2Bh] [rbp-D5h] BYREF
  uint32_t time; // [rsp+2Ch] [rbp-D4h]
  std::string v16; // [rsp+30h] [rbp-D0h] BYREF
  std::string __lhs; // [rsp+50h] [rbp-B0h] BYREF
  std::string v18; // [rsp+70h] [rbp-90h] BYREF
  std::string s; // [rsp+90h] [rbp-70h] BYREF
  std::string __rhs; // [rsp+B0h] [rbp-50h] BYREF
  std::string time_str; // [rsp+D0h] [rbp-30h] BYREF

  if ( !std::vector<std::string>::size(param_vec) )
    goto LABEL_2;
  v4 = std::vector<std::string>::operator[](param_vec, 0LL);
  if ( std::operator==<char>(v4, "CHECK") )
  {
    if ( std::vector<std::string>::size(param_vec) <= 2 )
    {
LABEL_2:
      std::string::operator=(ret_msg, "param not enough");
      return -1;
    }
    std::allocator<char>::allocator(&__a);
    std::string::basic_string<std::allocator<char>>(&s, off_262D4140, &__a);
    v5 = std::vector<std::string>::operator[](param_vec, 2uLL);
    common::tools::StringUtils::trim(&__rhs, v5, &s, 1);
    std::allocator<char>::allocator(&v13);
    std::string::basic_string<std::allocator<char>>(&v16, off_262D4140, &v13);
    v6 = std::vector<std::string>::operator[](param_vec, 1uLL);
    common::tools::StringUtils::trim(&__lhs, v6, &v16, 1);
    std::operator+<char>(&v18, &__lhs, " ");
    std::operator+<char>(&time_str, &v18, &__rhs);
    time = common::tools::TimeUtils::getTimeByStr(&time_str);
    std::string::~string(&time_str);
    std::string::~string(&v18);
    std::string::~string(&__lhs);
    std::string::~string(&v16);
    std::allocator<char>::~allocator(&v13);
    std::string::~string(&__rhs);
    std::string::~string(&s);
    std::allocator<char>::~allocator(&__a);
    if ( time )
    {
      if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
        __asan_report_load8(&context->player);
      ItemComp = Player::getItemComp(context->player);
      PlayerItemComp::checkAllMaterialDelete(ItemComp, time);
    }
  }
  else
  {
    v8 = std::vector<std::string>::operator[](param_vec, 0LL);
    if ( std::operator==<char>(v8, "TAKE_BAG") )
    {
      if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
        __asan_report_load8(&context->player);
      v9 = Player::getItemComp(context->player);
      PlayerItemComp::takeMaterialDeleteReturnItem(v9, MATERIAL_DELETE_RETURN_BAG);
    }
    else
    {
      v10 = std::vector<std::string>::operator[](param_vec, 0LL);
      if ( !std::operator==<char>(v10, "TAKE_SEED") )
      {
        std::string::operator=(ret_msg, &off_26364780);
        return -1;
      }
      if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
        __asan_report_load8(&context->player);
      v11 = Player::getItemComp(context->player);
      PlayerItemComp::takeMaterialDeleteReturnItem(v11, MATERIAL_DELETE_RETURN_SEED);
    }
  }
  return 0;
};

// Line 10013: range 0000000017D78982-0000000017D78A24
void __cdecl procAllowSkillRegister::procAllowSkillRegister(procAllowSkillRegister *const this)
{
  std::function<int(GmContext&,const std::vector<std::string>&,std::string&)> *v1; // rax
  std::allocator<char> __a; // [rsp+1Fh] [rbp-31h] BYREF
  std::string __k; // [rsp+20h] [rbp-30h] BYREF

  std::allocator<char>::allocator(&__a);
  std::string::basic_string<std::allocator<char>>(&__k, "ALLOW_SKILL", &__a);
  v1 = std::unordered_map<std::string,std::function<int ()(GmContext &,std::vector<std::string> const&,std::string&)>>::operator[](
         &GmUtils::op_func_map[abi:cxx11],
         &__k);
  std::function<int ()(GmContext &,std::vector<std::string> const&,std::string&)>::operator=<int (&)(GmContext &,std::vector<std::string> const&,std::string&)>(
    v1,
    (int (*)(GmContext *, const std::vector<std::string> *, std::string *))procAllowSkill);
  std::string::~string(&__k);
  std::allocator<char>::~allocator(&__a);
};

// Line 10014: range 0000000017C13C60-0000000017C13D4A
int32_t __cdecl procAllowSkill(GmContext *context, const std::vector<std::string> *param_vec, std::string *ret_msg)
{
  const std::string *v4; // rax
  const std::string *v5; // rax
  bool v6; // al
  PlayerAvatarComp *AvatarComp; // rax
  bool is_allow_skill; // [rsp+2Fh] [rbp-1h]

  if ( std::vector<std::string>::size(param_vec) )
  {
    v4 = std::vector<std::string>::operator[](param_vec, 0LL);
    v6 = 1;
    if ( !std::operator==<char>(v4, "1") )
    {
      v5 = std::vector<std::string>::operator[](param_vec, 0LL);
      if ( !std::operator==<char>(v5, "TRUE") )
        v6 = 0;
    }
    is_allow_skill = v6;
    if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
      __asan_report_load8(&context->player);
    AvatarComp = Player::getAvatarComp(context->player);
    PlayerAvatarComp::setIsAllowUseSkill(AvatarComp, is_allow_skill);
    return 0;
  }
  else
  {
    std::string::operator=(ret_msg, "param not enough");
    return -1;
  }
};

// Line 10025: range 0000000017D78A26-0000000017D78AC8
void __cdecl procBlossomRegister::procBlossomRegister(procBlossomRegister *const this)
{
  std::function<int(GmContext&,const std::vector<std::string>&,std::string&)> *v1; // rax
  std::allocator<char> __a; // [rsp+1Fh] [rbp-31h] BYREF
  std::string __k; // [rsp+20h] [rbp-30h] BYREF

  std::allocator<char>::allocator(&__a);
  std::string::basic_string<std::allocator<char>>(&__k, "BLOSSOM", &__a);
  v1 = std::unordered_map<std::string,std::function<int ()(GmContext &,std::vector<std::string> const&,std::string&)>>::operator[](
         &GmUtils::op_func_map[abi:cxx11],
         &__k);
  std::function<int ()(GmContext &,std::vector<std::string> const&,std::string&)>::operator=<int (&)(GmContext &,std::vector<std::string> const&,std::string&)>(
    v1,
    (int (*)(GmContext *, const std::vector<std::string> *, std::string *))procBlossom);
  std::string::~string(&__k);
  std::allocator<char>::~allocator(&__a);
};

// Line 10026: range 0000000017C13D4B-0000000017C141C3
int32_t __cdecl procBlossom(GmContext *context, const std::vector<std::string> *param_vec, std::string *ret_msg)
{
  unsigned __int64 v3; // r12
  __int64 v4; // rax
  _DWORD *v5; // r13
  int32_t result; // eax
  const std::string *v7; // rax
  PlayerBlossomComp *BlossomComp; // rax
  const std::string *v9; // rax
  PlayerBlossomComp *v10; // rax
  const std::string *v11; // rax
  PlayerBlossomComp *v12; // rax
  const std::string *v13; // rax
  const std::string *v14; // rax
  PlayerBlossomComp *v15; // rax
  const std::string *v16; // rax
  const std::string *v17; // rax
  PlayerBlossomComp *v18; // rax
  char v20[128]; // [rsp+20h] [rbp-80h] BYREF

  v3 = (unsigned __int64)v20;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_1(96LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "2 48 4 16 refresh_id:10051 64 4 16 refresh_id:10066";
  *(_QWORD *)(v3 + 16) = procBlossom;
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = -234556943;
  v5[536862722] = -202116348;
  if ( !std::vector<std::string>::size(param_vec) )
    goto LABEL_5;
  v7 = std::vector<std::string>::operator[](param_vec, 0LL);
  if ( std::operator==<char>(v7, "CLEAR") )
  {
    if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
      __asan_report_load8(&context->player);
    BlossomComp = Player::getBlossomComp(context->player);
    PlayerBlossomComp::clearBlossomDataByGm(BlossomComp);
  }
  else
  {
    v9 = std::vector<std::string>::operator[](param_vec, 0LL);
    if ( std::operator==<char>(v9, "REFRESH") )
    {
      if ( std::vector<std::string>::size(param_vec) > 1 )
      {
        if ( std::vector<std::string>::size(param_vec) > 2 )
        {
          *(_DWORD *)(v3 + 48) = 0;
          v13 = std::vector<std::string>::operator[](param_vec, 1uLL);
          common::tools::StringUtils::strToNum<unsigned int>(v13, (unsigned int *)(v3 + 48), 1);
          *(_DWORD *)(v3 + 64) = 0;
          v14 = std::vector<std::string>::operator[](param_vec, 2uLL);
          common::tools::StringUtils::strToNum<unsigned int>(v14, (unsigned int *)(v3 + 64), 1);
          if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
            __asan_report_load8(&context->player);
          v15 = Player::getBlossomComp(context->player);
          PlayerBlossomComp::refreshCircleCampByGm(v15, *(_DWORD *)(v3 + 48), *(_DWORD *)(v3 + 64));
        }
        else
        {
          *(_DWORD *)(v3 + 64) = 0;
          v11 = std::vector<std::string>::operator[](param_vec, 1uLL);
          common::tools::StringUtils::strToNum<unsigned int>(v11, (unsigned int *)(v3 + 64), 1);
          if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
            __asan_report_load8(&context->player);
          v12 = Player::getBlossomComp(context->player);
          PlayerBlossomComp::refreshAllAvailableCircleCampByGm(v12, *(_DWORD *)(v3 + 64));
        }
      }
      else
      {
        if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
          __asan_report_load8(&context->player);
        v10 = Player::getBlossomComp(context->player);
        PlayerBlossomComp::forceRefreshByGm(v10);
      }
    }
    else
    {
      v16 = std::vector<std::string>::operator[](param_vec, 0LL);
      if ( !std::operator==<char>(v16, "UPDATE") )
      {
        std::string::operator=(ret_msg, &off_26364780);
        result = -1;
        goto LABEL_29;
      }
      if ( std::vector<std::string>::size(param_vec) <= 1 )
      {
LABEL_5:
        std::string::operator=(ret_msg, "param not enough");
        result = -1;
        goto LABEL_29;
      }
      *(_DWORD *)(v3 + 64) = 0;
      v17 = std::vector<std::string>::operator[](param_vec, 1uLL);
      common::tools::StringUtils::strToNum<unsigned int>(v17, (unsigned int *)(v3 + 64), 1);
      if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
        __asan_report_load8(&context->player);
      v18 = Player::getBlossomComp(context->player);
      PlayerBlossomComp::updateCircleCampByGm(v18, *(_DWORD *)(v3 + 64));
    }
  }
  result = 0;
LABEL_29:
  if ( v20 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8008) = 0;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8008) = -168430091;
  }
  return result;
};

// Line 10078: range 0000000017D78ACA-0000000017D78B6C
void __cdecl procBattlePassRegister::procBattlePassRegister(procBattlePassRegister *const this)
{
  std::function<int(GmContext&,const std::vector<std::string>&,std::string&)> *v1; // rax
  std::allocator<char> __a; // [rsp+1Fh] [rbp-31h] BYREF
  std::string __k; // [rsp+20h] [rbp-30h] BYREF

  std::allocator<char>::allocator(&__a);
  std::string::basic_string<std::allocator<char>>(&__k, "BATTLEPASS", &__a);
  v1 = std::unordered_map<std::string,std::function<int ()(GmContext &,std::vector<std::string> const&,std::string&)>>::operator[](
         &GmUtils::op_func_map[abi:cxx11],
         &__k);
  std::function<int ()(GmContext &,std::vector<std::string> const&,std::string&)>::operator=<int (&)(GmContext &,std::vector<std::string> const&,std::string&)>(
    v1,
    (int (*)(GmContext *, const std::vector<std::string> *, std::string *))procBattlePass);
  std::string::~string(&__k);
  std::allocator<char>::~allocator(&__a);
};

// Line 10079: range 0000000017C141C4-0000000017C14B61
int32_t __cdecl procBattlePass(GmContext *context, const std::vector<std::string> *param_vec, std::string *ret_msg)
{
  unsigned __int64 v3; // r12
  __int64 v4; // rax
  _DWORD *v5; // r13
  int32_t v6; // r14d
  const std::string *v7; // rax
  PlayerBattlePassComp *BattlePassComp; // r14
  PlayerBattlePassComp *v9; // rax
  uint32_t CurScheduleId; // eax
  common::tools::StringStream<common::tools::FixedBuffer<4096> > *v11; // r14
  PlayerBattlePassComp *v12; // rax
  unsigned int v13; // eax
  const std::string *v14; // rax
  const std::string *v15; // rax
  PlayerBattlePassComp *v16; // rax
  const std::string *v17; // rax
  const std::string *v18; // rax
  PlayerBattlePassComp *v19; // r14
  uint32_t PlatformType; // r15d
  PlayerBattlePassComp *v21; // rax
  uint32_t v22; // eax
  common::tools::StringStream<common::tools::FixedBuffer<4096> > *v23; // rax
  const std::string *v24; // rax
  PlayerBattlePassComp *v25; // r14
  uint32_t v26; // r15d
  PlayerBattlePassComp *v27; // rax
  uint32_t v28; // eax
  common::tools::StringStream<common::tools::FixedBuffer<4096> > *v29; // rax
  const std::string *v30; // rax
  PlayerBattlePassComp *v31; // r14
  uint32_t v32; // r15d
  PlayerBattlePassComp *v33; // rax
  uint32_t v34; // eax
  common::tools::StringStream<common::tools::FixedBuffer<4096> > *v35; // rax
  const std::string *v36; // rax
  const std::string *v37; // rax
  PlayerBattlePassComp *v38; // rax
  common::tools::StringStream<common::tools::FixedBuffer<4096> > *v39; // r14
  PlayerBattlePassComp *v40; // rax
  unsigned int v41; // eax
  int32_t result; // eax
  int ret_1; // [rsp+24h] [rbp-13Ch]
  int ret_0; // [rsp+28h] [rbp-138h]
  int ret; // [rsp+2Ch] [rbp-134h]
  std::string v47; // [rsp+30h] [rbp-130h] BYREF
  std::string v48; // [rsp+50h] [rbp-110h] BYREF
  std::string v49; // [rsp+70h] [rbp-F0h] BYREF
  std::string v50; // [rsp+90h] [rbp-D0h] BYREF
  std::string v51; // [rsp+B0h] [rbp-B0h] BYREF
  char v52[144]; // [rsp+D0h] [rbp-90h] BYREF

  v3 = (unsigned __int64)v52;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_1(96LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "2 48 4 17 schedule_id:10130 64 16 9 oss:10080";
  *(_QWORD *)(v3 + 16) = procBattlePass;
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = -234556943;
  v5[536862722] = -202178560;
  common::tools::StringStream<common::tools::FixedBuffer<4096>>::StringStream((common::tools::StringStream<common::tools::FixedBuffer<4096> > *const)(v3 + 64));
  if ( !std::vector<std::string>::size(param_vec) )
    goto LABEL_5;
  v7 = std::vector<std::string>::operator[](param_vec, 0LL);
  if ( std::operator==<char>(v7, "FINISH") )
  {
    if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
      __asan_report_load8(&context->player);
    BattlePassComp = Player::getBattlePassComp(context->player);
    if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
      __asan_report_load8(&context->player);
    v9 = Player::getBattlePassComp(context->player);
    CurScheduleId = PlayerBattlePassComp::getCurScheduleId(v9);
    PlayerBattlePassComp::finishSchedule(BattlePassComp, CurScheduleId, 1);
    v11 = common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(
            (common::tools::StringStream<common::tools::FixedBuffer<4096> > *const)(v3 + 64),
            &byte_26364A00);
    if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
      __asan_report_load8(&context->player);
    v12 = Player::getBattlePassComp(context->player);
    v13 = PlayerBattlePassComp::getCurScheduleId(v12);
    common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(v11, v13);
    common::tools::StringStream<common::tools::FixedBuffer<4096>>::str[abi:cxx11](
      &v47,
      (common::tools::StringStream<common::tools::FixedBuffer<4096> > *const)(v3 + 64));
    std::string::operator=(ret_msg, &v47);
    std::string::~string(&v47);
    v6 = 0;
    goto LABEL_52;
  }
  if ( std::vector<std::string>::size(param_vec) <= 1 )
  {
LABEL_5:
    std::string::operator=(ret_msg, "param not enough");
    v6 = -1;
    goto LABEL_52;
  }
  v14 = std::vector<std::string>::operator[](param_vec, 0LL);
  if ( std::operator==<char>(v14, "ADDPOINT") )
  {
    *(_DWORD *)(v3 + 48) = 0;
    v15 = std::vector<std::string>::operator[](param_vec, 1uLL);
    common::tools::StringUtils::strToNum<unsigned int>(v15, (unsigned int *)(v3 + 48), 1);
    if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
      __asan_report_load8(&context->player);
    v16 = Player::getBattlePassComp(context->player);
    PlayerBattlePassComp::addCurSchedulePointByGm(v16, *(_DWORD *)(v3 + 48));
    goto LABEL_51;
  }
  v17 = std::vector<std::string>::operator[](param_vec, 0LL);
  if ( std::operator==<char>(v17, off_26364AA0) )
  {
    v18 = std::vector<std::string>::operator[](param_vec, 1uLL);
    if ( std::operator==<char>(v18, "NORMAL") )
    {
      if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
        __asan_report_load8(&context->player);
      v19 = Player::getBattlePassComp(context->player);
      if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
        __asan_report_load8(&context->player);
      PlatformType = Player::getPlatformType(context->player);
      if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
        __asan_report_load8(&context->player);
      v21 = Player::getBattlePassComp(context->player);
      v22 = PlayerBattlePassComp::getCurScheduleId(v21);
      ret = PlayerBattlePassComp::normalUnlockPaidBattlePass(v19, v22, PlatformType);
      v23 = common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(
              (common::tools::StringStream<common::tools::FixedBuffer<4096> > *const)(v3 + 64),
              &byte_26364AE0);
      common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(v23, ret);
      common::tools::StringStream<common::tools::FixedBuffer<4096>>::str[abi:cxx11](
        &v48,
        (common::tools::StringStream<common::tools::FixedBuffer<4096> > *const)(v3 + 64));
      std::string::operator=(ret_msg, &v48);
      std::string::~string(&v48);
      v6 = 0;
    }
    else
    {
      v24 = std::vector<std::string>::operator[](param_vec, 1uLL);
      if ( std::operator==<char>(v24, "EXTRA") )
      {
        if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
          __asan_report_load8(&context->player);
        v25 = Player::getBattlePassComp(context->player);
        if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
          __asan_report_load8(&context->player);
        v26 = Player::getPlatformType(context->player);
        if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
          __asan_report_load8(&context->player);
        v27 = Player::getBattlePassComp(context->player);
        v28 = PlayerBattlePassComp::getCurScheduleId(v27);
        ret_0 = PlayerBattlePassComp::extraUnlockPaidBattlePass(v25, v28, v26);
        v29 = common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(
                (common::tools::StringStream<common::tools::FixedBuffer<4096> > *const)(v3 + 64),
                &byte_26364B60);
        common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(v29, ret_0);
        common::tools::StringStream<common::tools::FixedBuffer<4096>>::str[abi:cxx11](
          &v49,
          (common::tools::StringStream<common::tools::FixedBuffer<4096> > *const)(v3 + 64));
        std::string::operator=(ret_msg, &v49);
        std::string::~string(&v49);
        v6 = 0;
      }
      else
      {
        v30 = std::vector<std::string>::operator[](param_vec, 1uLL);
        if ( !std::operator==<char>(v30, "UPGRADE") )
        {
LABEL_51:
          v6 = 0;
          goto LABEL_52;
        }
        if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
          __asan_report_load8(&context->player);
        v31 = Player::getBattlePassComp(context->player);
        if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
          __asan_report_load8(&context->player);
        v32 = Player::getPlatformType(context->player);
        if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
          __asan_report_load8(&context->player);
        v33 = Player::getBattlePassComp(context->player);
        v34 = PlayerBattlePassComp::getCurScheduleId(v33);
        ret_1 = PlayerBattlePassComp::upgradeFromNormalToExtra(v31, v34, v32);
        v35 = common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(
                (common::tools::StringStream<common::tools::FixedBuffer<4096> > *const)(v3 + 64),
                &byte_26364BE0);
        common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(v35, ret_1);
        common::tools::StringStream<common::tools::FixedBuffer<4096>>::str[abi:cxx11](
          &v50,
          (common::tools::StringStream<common::tools::FixedBuffer<4096> > *const)(v3 + 64));
        std::string::operator=(ret_msg, &v50);
        std::string::~string(&v50);
        v6 = 0;
      }
    }
  }
  else
  {
    v36 = std::vector<std::string>::operator[](param_vec, 0LL);
    if ( std::operator==<char>(v36, "RESTART") )
    {
      v37 = std::vector<std::string>::operator[](param_vec, 1uLL);
      common::tools::StringUtils::strToNum<unsigned int>(v37, (unsigned int *)(v3 + 48), 1);
      if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
        __asan_report_load8(&context->player);
      v38 = Player::getBattlePassComp(context->player);
      PlayerBattlePassComp::restartScheduleByGm(v38, *(_DWORD *)(v3 + 48));
      v39 = common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(
              (common::tools::StringStream<common::tools::FixedBuffer<4096> > *const)(v3 + 64),
              &byte_26364A00);
      if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
        __asan_report_load8(&context->player);
      v40 = Player::getBattlePassComp(context->player);
      v41 = PlayerBattlePassComp::getCurScheduleId(v40);
      common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(v39, v41);
      common::tools::StringStream<common::tools::FixedBuffer<4096>>::str[abi:cxx11](
        &v51,
        (common::tools::StringStream<common::tools::FixedBuffer<4096> > *const)(v3 + 64));
      std::string::operator=(ret_msg, &v51);
      std::string::~string(&v51);
      v6 = 0;
    }
    else
    {
      std::string::operator=(ret_msg, &off_26364780);
      v6 = -1;
    }
  }
LABEL_52:
  common::tools::StringStream<common::tools::FixedBuffer<4096>>::~StringStream((common::tools::StringStream<common::tools::FixedBuffer<4096> > *const)(v3 + 64));
  result = v6;
  if ( v52 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8008) = 0;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8008) = -168430091;
  }
  return result;
};

// Line 10145: range 0000000017D78B6E-0000000017D78C10
void __cdecl procSatiationRegister::procSatiationRegister(procSatiationRegister *const this)
{
  std::function<int(GmContext&,const std::vector<std::string>&,std::string&)> *v1; // rax
  std::allocator<char> __a; // [rsp+1Fh] [rbp-31h] BYREF
  std::string __k; // [rsp+20h] [rbp-30h] BYREF

  std::allocator<char>::allocator(&__a);
  std::string::basic_string<std::allocator<char>>(&__k, "SATIATION", &__a);
  v1 = std::unordered_map<std::string,std::function<int ()(GmContext &,std::vector<std::string> const&,std::string&)>>::operator[](
         &GmUtils::op_func_map[abi:cxx11],
         &__k);
  std::function<int ()(GmContext &,std::vector<std::string> const&,std::string&)>::operator=<int (&)(GmContext &,std::vector<std::string> const&,std::string&)>(
    v1,
    (int (*)(GmContext *, const std::vector<std::string> *, std::string *))procSatiation);
  std::string::~string(&__k);
  std::allocator<char>::~allocator(&__a);
};

// Line 10146: range 0000000017C14B62-0000000017C14E93
int32_t __cdecl procSatiation(GmContext *context, const std::vector<std::string> *param_vec, std::string *ret_msg)
{
  unsigned __int64 v3; // rbx
  __int64 v4; // rax
  _DWORD *v5; // r13
  int32_t result; // eax
  const std::string *v7; // rax
  PlayerAvatarComp *AvatarComp; // rax
  const std::weak_ptr<Avatar> *v9; // rax
  Avatar *v10; // rax
  const std::string *v11; // rax
  std::vector<std::weak_ptr<Avatar>>::iterator __for_begin; // [rsp+28h] [rbp-D8h] BYREF
  std::vector<std::weak_ptr<Avatar>>::iterator __for_end; // [rsp+30h] [rbp-D0h] BYREF
  std::vector<std::weak_ptr<Avatar>> *__for_range; // [rsp+38h] [rbp-C8h]
  std::vector<std::weak_ptr<Avatar>> v16; // [rsp+40h] [rbp-C0h] BYREF
  std::string v17; // [rsp+60h] [rbp-A0h] BYREF
  char v18[128]; // [rsp+80h] [rbp-80h] BYREF

  v3 = (unsigned __int64)v18;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_1(96LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "2 32 16 16 avatar_wtr:10154 64 16 16 avatar_ptr:10156";
  *(_QWORD *)(v3 + 16) = procSatiation;
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = -219021312;
  v5[536862722] = -202178560;
  if ( std::vector<std::string>::size(param_vec) )
  {
    v7 = std::vector<std::string>::operator[](param_vec, 0LL);
    if ( std::operator==<char>(v7, "CLEAR") )
    {
      if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
        __asan_report_load8(&context->player);
      AvatarComp = Player::getAvatarComp(context->player);
      PlayerAvatarComp::getAllAvatarVec(&v16, AvatarComp);
      __for_range = &v16;
      __for_begin._M_current = std::vector<std::weak_ptr<Avatar>>::begin(&v16)._M_current;
      __for_end._M_current = std::vector<std::weak_ptr<Avatar>>::end(&v16)._M_current;
      while ( __gnu_cxx::operator!=<std::weak_ptr<Avatar> *,std::vector<std::weak_ptr<Avatar>>>(
                &__for_begin,
                &__for_end) )
      {
        v9 = __gnu_cxx::__normal_iterator<std::weak_ptr<Avatar> *,std::vector<std::weak_ptr<Avatar>>>::operator*(&__for_begin);
        std::weak_ptr<Avatar>::weak_ptr((std::weak_ptr<Avatar> *const)(v3 + 32), v9);
        std::weak_ptr<Avatar>::lock((const std::weak_ptr<Avatar> *const)(v3 + 64));
        if ( std::operator!=<Avatar>(0LL, (const std::shared_ptr<Avatar> *)(v3 + 64)) )
        {
          v10 = std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 64));
          Avatar::resetSatiation(v10);
        }
        std::shared_ptr<Avatar>::~shared_ptr((std::shared_ptr<Avatar> *const)(v3 + 64));
        std::weak_ptr<Avatar>::~weak_ptr((std::weak_ptr<Avatar> *const)(v3 + 32));
        __gnu_cxx::__normal_iterator<std::weak_ptr<Avatar> *,std::vector<std::weak_ptr<Avatar>>>::operator++(&__for_begin);
      }
      std::vector<std::weak_ptr<Avatar>>::~vector(&v16);
      result = 0;
    }
    else
    {
      v11 = std::vector<std::string>::operator[](param_vec, 0LL);
      std::operator+<char>(&v17, off_26364CE0, v11);
      std::string::operator=(ret_msg, &v17);
      std::string::~string(&v17);
      result = -1;
    }
  }
  else
  {
    std::string::operator=(ret_msg, "param not enough");
    result = -1;
  }
  if ( v18 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8008) = 0;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8008) = -168430091;
  }
  return result;
};

// Line 10171: range 0000000017D78C12-0000000017D78CB4
void __cdecl procFriendRegister::procFriendRegister(procFriendRegister *const this)
{
  std::function<int(GmContext&,const std::vector<std::string>&,std::string&)> *v1; // rax
  std::allocator<char> __a; // [rsp+1Fh] [rbp-31h] BYREF
  std::string __k; // [rsp+20h] [rbp-30h] BYREF

  std::allocator<char>::allocator(&__a);
  std::string::basic_string<std::allocator<char>>(&__k, "FRIEND", &__a);
  v1 = std::unordered_map<std::string,std::function<int ()(GmContext &,std::vector<std::string> const&,std::string&)>>::operator[](
         &GmUtils::op_func_map[abi:cxx11],
         &__k);
  std::function<int ()(GmContext &,std::vector<std::string> const&,std::string&)>::operator=<int (&)(GmContext &,std::vector<std::string> const&,std::string&)>(
    v1,
    (int (*)(GmContext *, const std::vector<std::string> *, std::string *))procFriend);
  std::string::~string(&__k);
  std::allocator<char>::~allocator(&__a);
};

// Line 10172: range 0000000017C14E94-0000000017C15A93
int32_t __cdecl procFriend(GmContext *context, const std::vector<std::string> *param_vec, std::string *ret_msg)
{
  int32_t v3; // r14d
  unsigned __int64 v4; // r13
  __int64 v5; // rax
  _DWORD *v6; // r12
  const std::string *v7; // rax
  const std::string *v8; // rax
  const std::string *v9; // rax
  PlayerSocialComp *SocialComp; // rax
  const std::string *v11; // rax
  const std::string *v12; // rax
  bool v13; // r15
  common::milog::MiLogStream *v14; // r14
  const std::string *v15; // rax
  int v16; // r15d
  __gnu_cxx::__normal_iterator<unsigned int*,std::vector<unsigned int> >::reference v17; // rax
  uint32_t *v18; // rdx
  uint32_t v19; // eax
  PlayerSocialComp *v20; // rax
  PlayerSocialComp *v21; // rax
  const std::string *v22; // rax
  const std::string *v23; // rax
  bool v24; // r15
  common::milog::MiLogStream *v25; // r14
  const std::string *v26; // rax
  int v27; // r15d
  __gnu_cxx::__normal_iterator<unsigned int*,std::vector<unsigned int> >::reference v28; // rax
  uint32_t *v29; // rdx
  uint32_t v30; // eax
  int32_t result; // eax
  std::allocator<char> __a; // [rsp+27h] [rbp-139h] BYREF
  uint32_t uid_0; // [rsp+28h] [rbp-138h]
  uint32_t uid; // [rsp+2Ch] [rbp-134h]
  std::vector<unsigned int>::iterator __for_begin; // [rsp+30h] [rbp-130h] BYREF
  std::vector<unsigned int>::iterator __for_end; // [rsp+38h] [rbp-128h] BYREF
  std::vector<unsigned int> *__for_range_0; // [rsp+40h] [rbp-120h]
  std::vector<unsigned int> *__for_range; // [rsp+48h] [rbp-118h]
  common::milog::MiLogStream v40; // [rsp+50h] [rbp-110h] BYREF
  char v41[240]; // [rsp+70h] [rbp-F0h] BYREF

  v4 = (unsigned __int64)v41;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v5 = __asan_stack_malloc_2(192LL);
    if ( v5 )
      v4 = v5;
  }
  *(_QWORD *)v4 = 1102416563LL;
  *(_QWORD *)(v4 + 8) = "3 32 4 16 target_uid:10186 48 24 13 uid_vec:10241 112 40 9 req:10248";
  *(_QWORD *)(v4 + 16) = procFriend;
  v6 = (_DWORD *)(v4 >> 3);
  v6[536862720] = -235802127;
  v6[536862721] = 61956;
  v6[536862722] = -218959360;
  v6[536862723] = 62194;
  v6[536862724] = -218103808;
  v6[536862725] = -202116109;
  if ( !std::vector<std::string>::size(param_vec) )
    goto LABEL_5;
  v7 = std::vector<std::string>::operator[](param_vec, 0LL);
  if ( std::operator==<char>(v7, off_26356D00) )
  {
    if ( std::vector<std::string>::size(param_vec) <= 1 )
    {
LABEL_5:
      std::string::operator=(ret_msg, "param not enough");
      v3 = -1;
      goto LABEL_61;
    }
    *(_DWORD *)(v4 + 32) = 0;
    v8 = std::vector<std::string>::operator[](param_vec, 1uLL);
    if ( common::tools::StringUtils::strToNum<unsigned int>(v8, (unsigned int *)(v4 + 32), 1) )
    {
      std::string::operator=(ret_msg, "strToNum failed");
      v3 = -1;
    }
    else
    {
      proto::ForceAddPlayerFriendReq::ForceAddPlayerFriendReq((proto::ForceAddPlayerFriendReq *const)(v4 + 48));
      proto::ForceAddPlayerFriendReq::set_target_uid(
        (proto::ForceAddPlayerFriendReq *const)(v4 + 48),
        *(_DWORD *)(v4 + 32));
      if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
        __asan_report_load8(&context->player);
      sendProtoToSocialService<proto::ForceAddPlayerFriendReq>(
        context->player,
        (proto::ForceAddPlayerFriendReq *)(v4 + 48));
      v3 = 0;
      proto::ForceAddPlayerFriendReq::~ForceAddPlayerFriendReq((proto::ForceAddPlayerFriendReq *const)(v4 + 48));
    }
    goto LABEL_61;
  }
  v9 = std::vector<std::string>::operator[](param_vec, 0LL);
  if ( std::operator==<char>(v9, "REQUEST_LIST") )
  {
    if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
      __asan_report_load8(&context->player);
    SocialComp = Player::getSocialComp(context->player);
    PlayerSocialComp::requestFriendList(SocialComp);
LABEL_60:
    v3 = 0;
    goto LABEL_61;
  }
  v11 = std::vector<std::string>::operator[](param_vec, 0LL);
  if ( std::operator==<char>(v11, "ADD_PSN_FRIEND") )
  {
    if ( std::vector<std::string>::size(param_vec) <= 1 )
    {
      common::milog::MiLogStream::create(
        &v40,
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/player/gm/player_gm_comp.cpp",
        "procFriend",
        10205);
      common::milog::MiLogStream::operator<<<char [17],(char *[17])0>(&v40, (const char (*)[17])"param not enough");
      common::milog::MiLogStream::~MiLogStream(&v40);
      v3 = -1;
      goto LABEL_61;
    }
    std::vector<unsigned int>::vector((std::vector<unsigned int> *const)(v4 + 48));
    std::allocator<char>::allocator(&__a);
    std::string::basic_string<std::allocator<char>>((std::string *const)&v40, ",", &__a);
    v12 = std::vector<std::string>::operator[](param_vec, 1uLL);
    v13 = common::tools::StringUtils::splitToList<unsigned int>(
            v12,
            (const std::string *)&v40,
            (std::vector<unsigned int> *)(v4 + 48),
            1) != 0;
    std::string::~string(&v40);
    std::allocator<char>::~allocator(&__a);
    if ( v13 )
    {
      common::milog::MiLogStream::create(
        &v40,
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/player/gm/player_gm_comp.cpp",
        "procFriend",
        10211);
      v14 = common::milog::MiLogStream::operator<<<char [24],(char *[24])0>(
              &v40,
              (const char (*)[24])"invalid uid list param:");
      v15 = std::vector<std::string>::operator[](param_vec, 1uLL);
      common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v14, v15);
      common::milog::MiLogStream::~MiLogStream(&v40);
      v3 = -1;
      v16 = 0;
    }
    else
    {
      proto::ServerAddPsnFriendReq::ServerAddPsnFriendReq((proto::ServerAddPsnFriendReq *const)(v4 + 112));
      __for_range = (std::vector<unsigned int> *)(v4 + 48);
      __for_begin._M_current = std::vector<unsigned int>::begin((std::vector<unsigned int> *const)(v4 + 48))._M_current;
      __for_end._M_current = std::vector<unsigned int>::end(__for_range)._M_current;
      while ( __gnu_cxx::operator!=<unsigned int *,std::vector<unsigned int>>(&__for_begin, &__for_end) )
      {
        v17 = __gnu_cxx::__normal_iterator<unsigned int *,std::vector<unsigned int>>::operator*(&__for_begin);
        v18 = v17;
        if ( *(_BYTE *)(((unsigned __int64)v17 >> 3) + 0x7FFF8000) != 0
          && (char)(((unsigned __int8)v17 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)v17 >> 3) + 0x7FFF8000) )
        {
          __asan_report_load4(v17);
        }
        uid = *v18;
        if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
          __asan_report_load8(&context->player);
        v19 = Player::getUid(context->player);
        if ( uid != v19 )
        {
          if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
            __asan_report_load8(&context->player);
          v20 = Player::getSocialComp(context->player);
          if ( !PlayerSocialComp::isPlayerInBlacklist(v20, uid) )
          {
            if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
              __asan_report_load8(&context->player);
            v21 = Player::getSocialComp(context->player);
            if ( !PlayerSocialComp::isPlayerFriend(v21, uid) )
              proto::ServerAddPsnFriendReq::add_force_add_psn_friend_uid_list(
                (proto::ServerAddPsnFriendReq *const)(v4 + 112),
                uid);
          }
        }
        __gnu_cxx::__normal_iterator<unsigned int *,std::vector<unsigned int>>::operator++(&__for_begin);
      }
      if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
        __asan_report_load8(&context->player);
      sendProtoToSocialService<proto::ServerAddPsnFriendReq>(
        context->player,
        (proto::ServerAddPsnFriendReq *)(v4 + 112));
      proto::ServerAddPsnFriendReq::~ServerAddPsnFriendReq((proto::ServerAddPsnFriendReq *const)(v4 + 112));
      v16 = 1;
    }
    std::vector<unsigned int>::~vector((std::vector<unsigned int> *const)(v4 + 48));
    if ( v16 == 1 )
      goto LABEL_60;
  }
  else
  {
    v22 = std::vector<std::string>::operator[](param_vec, 0LL);
    if ( !std::operator==<char>(v22, "ADD_PSN_BLACKLIST") )
      goto LABEL_60;
    if ( std::vector<std::string>::size(param_vec) <= 1 )
    {
      common::milog::MiLogStream::create(
        &v40,
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/player/gm/player_gm_comp.cpp",
        "procFriend",
        10238);
      common::milog::MiLogStream::operator<<<char [17],(char *[17])0>(&v40, (const char (*)[17])"param not enough");
      common::milog::MiLogStream::~MiLogStream(&v40);
      v3 = -1;
      goto LABEL_61;
    }
    std::vector<unsigned int>::vector((std::vector<unsigned int> *const)(v4 + 48));
    std::allocator<char>::allocator(&__a);
    std::string::basic_string<std::allocator<char>>((std::string *const)&v40, ",", &__a);
    v23 = std::vector<std::string>::operator[](param_vec, 1uLL);
    v24 = common::tools::StringUtils::splitToList<unsigned int>(
            v23,
            (const std::string *)&v40,
            (std::vector<unsigned int> *)(v4 + 48),
            1) != 0;
    std::string::~string(&v40);
    std::allocator<char>::~allocator(&__a);
    if ( v24 )
    {
      common::milog::MiLogStream::create(
        &v40,
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/player/gm/player_gm_comp.cpp",
        "procFriend",
        10244);
      v25 = common::milog::MiLogStream::operator<<<char [24],(char *[24])0>(
              &v40,
              (const char (*)[24])"invalid uid list param:");
      v26 = std::vector<std::string>::operator[](param_vec, 1uLL);
      common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v25, v26);
      common::milog::MiLogStream::~MiLogStream(&v40);
      v3 = -1;
      v27 = 0;
    }
    else
    {
      proto::ServerAddPsnBlackReq::ServerAddPsnBlackReq((proto::ServerAddPsnBlackReq *const)(v4 + 112));
      __for_range_0 = (std::vector<unsigned int> *)(v4 + 48);
      __for_begin._M_current = std::vector<unsigned int>::begin((std::vector<unsigned int> *const)(v4 + 48))._M_current;
      __for_end._M_current = std::vector<unsigned int>::end(__for_range_0)._M_current;
      while ( __gnu_cxx::operator!=<unsigned int *,std::vector<unsigned int>>(&__for_begin, &__for_end) )
      {
        v28 = __gnu_cxx::__normal_iterator<unsigned int *,std::vector<unsigned int>>::operator*(&__for_begin);
        v29 = v28;
        if ( *(_BYTE *)(((unsigned __int64)v28 >> 3) + 0x7FFF8000) != 0
          && (char)(((unsigned __int8)v28 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)v28 >> 3) + 0x7FFF8000) )
        {
          __asan_report_load4(v28);
        }
        uid_0 = *v29;
        if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
          __asan_report_load8(&context->player);
        v30 = Player::getUid(context->player);
        if ( uid_0 != v30 )
          proto::ServerAddPsnBlackReq::add_force_add_psn_black_uid_list(
            (proto::ServerAddPsnBlackReq *const)(v4 + 112),
            uid_0);
        __gnu_cxx::__normal_iterator<unsigned int *,std::vector<unsigned int>>::operator++(&__for_begin);
      }
      if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
        __asan_report_load8(&context->player);
      sendProtoToSocialService<proto::ServerAddPsnBlackReq>(context->player, (proto::ServerAddPsnBlackReq *)(v4 + 112));
      proto::ServerAddPsnBlackReq::~ServerAddPsnBlackReq((proto::ServerAddPsnBlackReq *const)(v4 + 112));
      v27 = 1;
    }
    std::vector<unsigned int>::~vector((std::vector<unsigned int> *const)(v4 + 48));
    if ( v27 == 1 )
      goto LABEL_60;
  }
LABEL_61:
  result = v3;
  if ( v41 == (char *)v4 )
  {
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8008) = 0LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8010) = 0LL;
  }
  else
  {
    *(_QWORD *)v4 = 1172321806LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 10262: range 0000000017D78CB6-0000000017D78D58
void __cdecl procChapterRegister::procChapterRegister(procChapterRegister *const this)
{
  std::function<int(GmContext&,const std::vector<std::string>&,std::string&)> *v1; // rax
  std::allocator<char> __a; // [rsp+1Fh] [rbp-31h] BYREF
  std::string __k; // [rsp+20h] [rbp-30h] BYREF

  std::allocator<char>::allocator(&__a);
  std::string::basic_string<std::allocator<char>>(&__k, "CHAPTER", &__a);
  v1 = std::unordered_map<std::string,std::function<int ()(GmContext &,std::vector<std::string> const&,std::string&)>>::operator[](
         &GmUtils::op_func_map[abi:cxx11],
         &__k);
  std::function<int ()(GmContext &,std::vector<std::string> const&,std::string&)>::operator=<int (&)(GmContext &,std::vector<std::string> const&,std::string&)>(
    v1,
    (int (*)(GmContext *, const std::vector<std::string> *, std::string *))procChapter);
  std::string::~string(&__k);
  std::allocator<char>::~allocator(&__a);
};

// Line 10263: range 0000000017C15A94-0000000017C15D39
int32_t __cdecl procChapter(GmContext *context, const std::vector<std::string> *param_vec, std::string *ret_msg)
{
  unsigned __int64 v3; // rbx
  __int64 v4; // rax
  unsigned __int64 v5; // r12
  int32_t result; // eax
  const std::string *v7; // rax
  PlayerQuestComp *v8; // rax
  const std::string *v9; // rax
  const std::string *v10; // rax
  PlayerQuestComp *QuestComp; // rax
  std::string v13; // [rsp+20h] [rbp-80h] BYREF
  char v14[96]; // [rsp+40h] [rbp-60h] BYREF

  v3 = (unsigned __int64)v14;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_0(64LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "1 32 4 16 chapter_id:10277";
  *(_QWORD *)(v3 + 16) = procChapter;
  v5 = v3 >> 3;
  *(_DWORD *)(v5 + 2147450880) = -235802127;
  *(_DWORD *)(v5 + 2147450884) = -202116348;
  if ( std::vector<std::string>::size(param_vec) )
  {
    v7 = std::vector<std::string>::operator[](param_vec, 0LL);
    if ( std::operator==<char>(v7, "CLEAR") )
    {
      if ( std::vector<std::string>::size(param_vec) > 1 )
      {
        *(_DWORD *)(v3 + 32) = 0;
        v9 = std::vector<std::string>::operator[](param_vec, 1uLL);
        if ( common::tools::StringUtils::strToNum<unsigned int>(v9, (unsigned int *)(v3 + 32), 1) )
        {
          std::string::operator=(ret_msg, &off_26364FA0);
          result = -1;
        }
        else
        {
          v10 = std::vector<std::string>::operator[](param_vec, 1uLL);
          std::operator+<char>(&v13, "clear chapter:", v10);
          std::string::operator=(ret_msg, &v13);
          std::string::~string(&v13);
          if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
            __asan_report_load8(&context->player);
          QuestComp = Player::getQuestComp(context->player);
          PlayerQuestComp::forceClearChapterByGM(QuestComp, *(_DWORD *)(v3 + 32));
          result = 0;
        }
      }
      else
      {
        if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
          __asan_report_load8(&context->player);
        v8 = Player::getQuestComp(context->player);
        PlayerQuestComp::forceClearAllChapterByGM(v8);
        std::string::operator=(ret_msg, "clear all chapter.");
        result = 0;
      }
    }
    else
    {
      result = 0;
    }
  }
  else
  {
    std::string::operator=(ret_msg, "param not enough");
    result = -1;
  }
  if ( v14 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 10290: range 0000000017D78D5A-0000000017D78DFC
void __cdecl procMatchRegister::procMatchRegister(procMatchRegister *const this)
{
  std::function<int(GmContext&,const std::vector<std::string>&,std::string&)> *v1; // rax
  std::allocator<char> __a; // [rsp+1Fh] [rbp-31h] BYREF
  std::string __k; // [rsp+20h] [rbp-30h] BYREF

  std::allocator<char>::allocator(&__a);
  std::string::basic_string<std::allocator<char>>(&__k, "MATCH", &__a);
  v1 = std::unordered_map<std::string,std::function<int ()(GmContext &,std::vector<std::string> const&,std::string&)>>::operator[](
         &GmUtils::op_func_map[abi:cxx11],
         &__k);
  std::function<int ()(GmContext &,std::vector<std::string> const&,std::string&)>::operator=<int (&)(GmContext &,std::vector<std::string> const&,std::string&)>(
    v1,
    (int (*)(GmContext *, const std::vector<std::string> *, std::string *))procMatch);
  std::string::~string(&__k);
  std::allocator<char>::~allocator(&__a);
};

// Line 10291: range 0000000017C15D3A-0000000017C16458
int32_t __cdecl procMatch(GmContext *context, const std::vector<std::string> *param_vec, std::string *ret_msg)
{
  unsigned __int64 v3; // r12
  __int64 v4; // rax
  _DWORD *v5; // r13
  const std::string *v6; // rax
  const std::string *v7; // rax
  const std::string *v8; // rax
  PlayerMatchComp *MatchComp; // r14
  int32_t started; // ebx
  const std::string *v11; // rax
  PlayerMatchComp *v12; // rax
  const std::string *v13; // rax
  const std::string *v14; // rax
  common::milog::MiLogStream *v15; // rdx
  PlayerMatchComp *v16; // rax
  const std::string *v17; // rax
  const std::string *v18; // rax
  common::milog::MiLogStream *v19; // rdx
  const std::string *v20; // rax
  common::milog::MiLogStream *v21; // rdx
  PlayerMatchComp *v22; // rax
  int32_t result; // eax
  std::vector<unsigned int> p_match_param_vec; // [rsp+20h] [rbp-D0h] BYREF
  common::milog::MiLogStream v26; // [rsp+40h] [rbp-B0h] BYREF
  char v27[144]; // [rsp+60h] [rbp-90h] BYREF

  v3 = (unsigned __int64)v27;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_1(96LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "3 32 1 15 is_agreed:10324 48 4 14 match_id:10340 64 4 18 punish_times:10346";
  *(_QWORD *)(v3 + 16) = procMatch;
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = -234556927;
  v5[536862722] = -202116348;
  if ( !std::vector<std::string>::size(param_vec) )
    goto LABEL_24;
  v6 = std::vector<std::string>::operator[](param_vec, 0LL);
  if ( std::operator==<char>(v6, "START") )
  {
    if ( std::vector<std::string>::size(param_vec) > 2 )
    {
      *(_DWORD *)(v3 + 48) = 0;
      v7 = std::vector<std::string>::operator[](param_vec, 1uLL);
      common::tools::StringUtils::strToNum<unsigned int>(v7, (unsigned int *)(v3 + 48), 1);
      *(_DWORD *)(v3 + 64) = 0;
      v8 = std::vector<std::string>::operator[](param_vec, 2uLL);
      common::tools::StringUtils::strToNum<unsigned int>(v8, (unsigned int *)(v3 + 64), 1);
      if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
        __asan_report_load8(&context->player);
      MatchComp = Player::getMatchComp(context->player);
      memset(&p_match_param_vec, 0, sizeof(p_match_param_vec));
      std::vector<unsigned int>::vector(&p_match_param_vec);
      started = PlayerMatchComp::startMatchByGm(
                  MatchComp,
                  *(proto::MatchType *)(v3 + 48),
                  *(_DWORD *)(v3 + 64),
                  &p_match_param_vec);
      std::vector<unsigned int>::~vector(&p_match_param_vec);
      goto LABEL_33;
    }
LABEL_24:
    std::string::operator=(ret_msg, "param not enough");
    started = -1;
    goto LABEL_33;
  }
  v11 = std::vector<std::string>::operator[](param_vec, 0LL);
  if ( std::operator==<char>(v11, "CANCEL") )
  {
    if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
      __asan_report_load8(&context->player);
    v12 = Player::getMatchComp(context->player);
    started = PlayerMatchComp::cancelMatchByGm(v12);
  }
  else
  {
    v13 = std::vector<std::string>::operator[](param_vec, 0LL);
    if ( std::operator==<char>(v13, "CONFIRM") )
    {
      if ( std::vector<std::string>::size(param_vec) <= 1 )
        goto LABEL_24;
      *(_BYTE *)(v3 + 32) = 0;
      v14 = std::vector<std::string>::operator[](param_vec, 1uLL);
      if ( common::tools::StringUtils::strToNum<bool>(v14, (bool *)(v3 + 32), 1) )
      {
        common::milog::MiLogStream::create(
          &v26,
          &common::milog::MiLogDefault::default_log_obj_,
          3u,
          "./src/player/gm/player_gm_comp.cpp",
          "procMatch",
          10327);
        v15 = common::milog::MiLogStream::operator<<<char [15],(char *[15])0>(
                &v26,
                (const char (*)[15])"invalid param:");
        common::milog::MiLogStream::operator<<<std::string>(v15, param_vec);
        common::milog::MiLogStream::~MiLogStream(&v26);
        started = -1;
      }
      else
      {
        if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
          __asan_report_load8(&context->player);
        v16 = Player::getMatchComp(context->player);
        started = PlayerMatchComp::confirmMatchByGm(v16, *(_BYTE *)(v3 + 32));
      }
    }
    else
    {
      v17 = std::vector<std::string>::operator[](param_vec, 0LL);
      if ( !std::operator==<char>(v17, "PUNISH") )
      {
        std::string::operator=(ret_msg, &off_26364780);
        started = -1;
        goto LABEL_33;
      }
      if ( std::vector<std::string>::size(param_vec) <= 2 )
        goto LABEL_24;
      *(_DWORD *)(v3 + 48) = 0;
      v18 = std::vector<std::string>::operator[](param_vec, 1uLL);
      if ( common::tools::StringUtils::strToNum<unsigned int>(v18, (unsigned int *)(v3 + 48), 1) )
      {
        common::milog::MiLogStream::create(
          &v26,
          &common::milog::MiLogDefault::default_log_obj_,
          3u,
          "./src/player/gm/player_gm_comp.cpp",
          "procMatch",
          10343);
        v19 = common::milog::MiLogStream::operator<<<char [15],(char *[15])0>(
                &v26,
                (const char (*)[15])"invalid param:");
        common::milog::MiLogStream::operator<<<std::string>(v19, param_vec);
        common::milog::MiLogStream::~MiLogStream(&v26);
        started = -1;
      }
      else
      {
        *(_DWORD *)(v3 + 64) = 0;
        v20 = std::vector<std::string>::operator[](param_vec, 2uLL);
        if ( common::tools::StringUtils::strToNum<unsigned int>(v20, (unsigned int *)(v3 + 64), 1) )
        {
          common::milog::MiLogStream::create(
            &v26,
            &common::milog::MiLogDefault::default_log_obj_,
            3u,
            "./src/player/gm/player_gm_comp.cpp",
            "procMatch",
            10349);
          v21 = common::milog::MiLogStream::operator<<<char [15],(char *[15])0>(
                  &v26,
                  (const char (*)[15])"invalid param:");
          common::milog::MiLogStream::operator<<<std::string>(v21, param_vec);
          common::milog::MiLogStream::~MiLogStream(&v26);
          started = -1;
        }
        else
        {
          if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
            __asan_report_load8(&context->player);
          v22 = Player::getMatchComp(context->player);
          PlayerMatchComp::setPunishTimesByGm(v22, *(_DWORD *)(v3 + 48), *(_DWORD *)(v3 + 64));
          started = 0;
        }
      }
    }
  }
LABEL_33:
  result = started;
  if ( v27 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8008) = 0;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8008) = -168430091;
  }
  return result;
};

// Line 10362: range 0000000017D78DFE-0000000017D78EA0
void __cdecl procRechargeRegister::procRechargeRegister(procRechargeRegister *const this)
{
  std::function<int(GmContext&,const std::vector<std::string>&,std::string&)> *v1; // rax
  std::allocator<char> __a; // [rsp+1Fh] [rbp-31h] BYREF
  std::string __k; // [rsp+20h] [rbp-30h] BYREF

  std::allocator<char>::allocator(&__a);
  std::string::basic_string<std::allocator<char>>(&__k, "RECHARGE", &__a);
  v1 = std::unordered_map<std::string,std::function<int ()(GmContext &,std::vector<std::string> const&,std::string&)>>::operator[](
         &GmUtils::op_func_map[abi:cxx11],
         &__k);
  std::function<int ()(GmContext &,std::vector<std::string> const&,std::string&)>::operator=<int (&)(GmContext &,std::vector<std::string> const&,std::string&)>(
    v1,
    (int (*)(GmContext *, const std::vector<std::string> *, std::string *))procRecharge);
  std::string::~string(&__k);
  std::allocator<char>::~allocator(&__a);
};

// Line 10363: range 0000000017C16459-0000000017C16E80
int32_t __cdecl procRecharge(GmContext *context, const std::vector<std::string> *param_vec, std::string *ret_msg)
{
  unsigned __int64 v3; // r13
  __int64 v4; // rax
  _DWORD *v5; // r12
  const std::string *v6; // rax
  PlayerRechargeComp *RechargeComp; // rax
  int32_t v8; // r14d
  const std::string *v9; // rax
  PlayerRechargeComp *v10; // rax
  unsigned int VipPoint; // eax
  const std::string *v12; // rax
  std::vector<std::string>::const_reference v13; // rax
  PlayerRechargeComp *v14; // rax
  const std::string *v15; // rax
  const std::string *v16; // rax
  std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v17; // rax
  std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v18; // rax
  __int64 v19; // rax
  __int64 v20; // rax
  __int64 v21; // rax
  __int64 v22; // rax
  __int64 v23; // rax
  const std::string *v24; // rax
  unsigned int *v25; // r9
  std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v26; // rax
  const std::string *v27; // rax
  int32_t result; // eax
  bool *v29; // [rsp+0h] [rbp-370h]
  std::string *ret_msgb; // [rsp+8h] [rbp-368h]
  std::map<std::string,std::string>::iterator __for_begin; // [rsp+20h] [rbp-350h] BYREF
  std::map<std::string,std::string>::iterator __for_end; // [rsp+28h] [rbp-348h] BYREF
  std::map<std::string,std::string> *__for_range; // [rsp+30h] [rbp-340h]
  const std::pair<const std::string,std::string > *v35; // [rsp+38h] [rbp-338h]
  std::tuple_element<0,const std::pair<const std::string,std::string > >::type *product_id; // [rsp+40h] [rbp-330h]
  std::tuple_element<1,const std::pair<const std::string,std::string > >::type *price_tier; // [rsp+48h] [rbp-328h]
  std::shared_ptr<Config> v38; // [rsp+50h] [rbp-320h] BYREF
  std::string __rhs; // [rsp+60h] [rbp-310h] BYREF
  char v40[752]; // [rsp+80h] [rbp-2F0h] BYREF

  v3 = (unsigned __int64)v40;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_4(704LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "7 32 1 17 is_internal:10428 48 1 13 is_epic:10430 64 4 19 platform_type:10429 80 4 15 config_id:"
                        "10431 96 32 16 product_id:10433 160 48 17 product_map:10399 240 392 8 ss:10412";
  *(_QWORD *)(v3 + 16) = procRecharge;
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = -234753535;
  v5[536862722] = -234556924;
  v5[536862724] = -218959118;
  v5[536862726] = -219021312;
  v5[536862727] = 62194;
  v5[536862739] = -218103808;
  v5[536862740] = -202116109;
  v5[536862741] = -202116109;
  if ( !std::vector<std::string>::size(param_vec) )
    goto LABEL_30;
  v6 = std::vector<std::string>::operator[](param_vec, 0LL);
  if ( std::operator==<char>(v6, "CLEAR") )
  {
    if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
      __asan_report_load8(&context->player);
    RechargeComp = Player::getRechargeComp(context->player);
    PlayerRechargeComp::clearByGm(RechargeComp);
    v8 = 0;
    goto LABEL_33;
  }
  v9 = std::vector<std::string>::operator[](param_vec, 0LL);
  if ( std::operator==<char>(v9, "PRINT") )
  {
    if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
      __asan_report_load8(&context->player);
    v10 = Player::getRechargeComp(context->player);
    VipPoint = PlayerRechargeComp::getVipPoint(v10);
    std::to_string(&__rhs, VipPoint);
    std::operator+<char>((std::string *)(v3 + 96), "vippoint:", &__rhs);
    std::string::operator=(ret_msg, v3 + 96);
    std::string::~string((void *)(v3 + 96));
    std::string::~string(&__rhs);
    v8 = 0;
    goto LABEL_33;
  }
  v12 = std::vector<std::string>::operator[](param_vec, 0LL);
  if ( !std::operator==<char>(v12, "TAKE_PRODUCT") )
  {
    v15 = std::vector<std::string>::operator[](param_vec, 0LL);
    if ( std::operator==<char>(v15, "DISPLAY_PRODUCT") )
    {
      if ( std::vector<std::string>::size(param_vec) > 1 )
      {
        *(_BYTE *)(v3 + 32) = 0;
        v16 = std::vector<std::string>::operator[](param_vec, 1uLL);
        common::tools::StringUtils::strToNum<bool>(v16, (bool *)(v3 + 32), 1);
        std::map<std::string,std::string>::map((std::map<std::string,std::string> *const)(v3 + 160));
        if ( std::vector<std::string>::size(param_vec) <= 3 )
        {
          ServiceBox::findService<GameserverService>();
          GameserverService::getConfig((GameserverService *const)&v38);
          v18 = std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false> *const)&v38);
          ShopmallExcelConfigMgr::findDisplayProductTierMap(
            &v18->design_config.txt_config_mgr.shopmall_config_mgr,
            *(_BYTE *)(v3 + 32),
            (std::map<std::string,std::string> *)(v3 + 160));
        }
        else
        {
          *(_DWORD *)(v3 + 80) = 0;
          *(_BYTE *)(v3 + 48) = 0;
          common::tools::StringUtils::strVecToNum<2u,unsigned int,bool &>(
            param_vec,
            (unsigned int *)(v3 + 80),
            (bool *)(v3 + 48),
            (bool *)(v3 + 80));
          ServiceBox::findService<GameserverService>();
          GameserverService::getConfig((GameserverService *const)&v38);
          v17 = std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false> *const)&v38);
          ShopmallExcelConfigMgr::findDisplayProductTierMap(
            &v17->design_config.txt_config_mgr.shopmall_config_mgr,
            *(_BYTE *)(v3 + 32),
            *(_DWORD *)(v3 + 80),
            *(_BYTE *)(v3 + 48),
            (std::map<std::string,std::string> *)(v3 + 160));
        }
        std::shared_ptr<Config>::~shared_ptr(&v38);
        std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream(v3 + 240);
        __for_range = (std::map<std::string,std::string> *)(v3 + 160);
        __for_begin._M_node = std::map<std::string,std::string>::begin((std::map<std::string,std::string> *const)(v3 + 160))._M_node;
        __for_end._M_node = std::map<std::string,std::string>::end((std::map<std::string,std::string> *const)(v3 + 160))._M_node;
        while ( std::operator!=(&__for_begin, &__for_end) )
        {
          v35 = std::_Rb_tree_iterator<std::pair<std::string const,std::string>>::operator*(&__for_begin);
          product_id = std::get<0ul,std::string const,std::string>(v35);
          price_tier = (std::tuple_element<1,const std::pair<const std::string,std::string > >::type *)std::get<1ul,std::string const,std::string>(v35);
          v19 = std::operator<<<std::char_traits<char>>(v3 + 256, " product_id[");
          v20 = std::operator<<<char>(v19, product_id);
          v21 = std::operator<<<std::char_traits<char>>(v20, "] price_tier[");
          v22 = std::operator<<<char>(v21, price_tier);
          v23 = std::operator<<<std::char_traits<char>>(v22, "] ");
          std::operator<<<std::char_traits<char>>(v23, "\n");
          std::_Rb_tree_iterator<std::pair<std::string const,std::string>>::operator++(&__for_begin);
        }
        std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::str(v3 + 96, v3 + 240);
        std::string::operator=(ret_msg, v3 + 96);
        std::string::~string((void *)(v3 + 96));
        v8 = 0;
        std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream(v3 + 240);
        std::map<std::string,std::string>::~map((std::map<std::string,std::string> *const)(v3 + 160));
        goto LABEL_33;
      }
    }
    else
    {
      v24 = std::vector<std::string>::operator[](param_vec, 0LL);
      if ( !std::operator==<char>(v24, "FIND_PRODUCT") )
      {
        std::string::operator=(ret_msg, &off_26364780);
        v8 = -1;
        goto LABEL_33;
      }
      if ( std::vector<std::string>::size(param_vec) > 3 )
      {
        *(_BYTE *)(v3 + 32) = 0;
        *(_DWORD *)(v3 + 64) = 0;
        *(_BYTE *)(v3 + 48) = 0;
        *(_DWORD *)(v3 + 80) = 0;
        common::tools::StringUtils::strVecToNum<1u,bool,unsigned int &,bool &,unsigned int &>(
          param_vec,
          (bool *)(v3 + 32),
          (unsigned int *)(v3 + 64),
          (bool *)(v3 + 48),
          (unsigned int *)(v3 + 80),
          v25,
          v29,
          (unsigned int *)ret_msg);
        ServiceBox::findService<GameserverService>();
        GameserverService::getConfig((GameserverService *const)&v38);
        v26 = std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false> *const)&v38);
        v27 = ShopmallExcelConfigMgr::findProductIdByConfigId[abi:cxx11](
                &v26->design_config.txt_config_mgr.shopmall_config_mgr,
                *(_BYTE *)(v3 + 32),
                *(_DWORD *)(v3 + 64),
                *(_BYTE *)(v3 + 48),
                *(_DWORD *)(v3 + 80));
        std::string::basic_string(v3 + 96, v27);
        std::shared_ptr<Config>::~shared_ptr(&v38);
        std::string::operator=(ret_msgb, v3 + 96);
        v8 = 0;
        std::string::~string((void *)(v3 + 96));
        goto LABEL_33;
      }
    }
LABEL_30:
    std::string::operator=(ret_msg, "param not enough");
    v8 = -1;
    goto LABEL_33;
  }
  if ( std::vector<std::string>::size(param_vec) <= 1 )
    goto LABEL_30;
  v13 = std::vector<std::string>::operator[](param_vec, 1uLL);
  std::string::basic_string(v3 + 96, v13);
  if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
    __asan_report_load8(&context->player);
  v14 = Player::getRechargeComp(context->player);
  v8 = PlayerRechargeComp::takeProductByGm(v14, (std::string *)(v3 + 96));
  std::string::~string((void *)(v3 + 96));
LABEL_33:
  result = v8;
  if ( v40 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8008) = 0;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8010) = 0;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8018) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF804C) = 0LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8054) = 0;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8020) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8028) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8030) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8038) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8040) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8048) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8050) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 10441: range 0000000017D78EA2-0000000017D78F44
void __cdecl procMpPlayRegister::procMpPlayRegister(procMpPlayRegister *const this)
{
  std::function<int(GmContext&,const std::vector<std::string>&,std::string&)> *v1; // rax
  std::allocator<char> __a; // [rsp+1Fh] [rbp-31h] BYREF
  std::string __k; // [rsp+20h] [rbp-30h] BYREF

  std::allocator<char>::allocator(&__a);
  std::string::basic_string<std::allocator<char>>(&__k, "MPPLAY", &__a);
  v1 = std::unordered_map<std::string,std::function<int ()(GmContext &,std::vector<std::string> const&,std::string&)>>::operator[](
         &GmUtils::op_func_map[abi:cxx11],
         &__k);
  std::function<int ()(GmContext &,std::vector<std::string> const&,std::string&)>::operator=<int (&)(GmContext &,std::vector<std::string> const&,std::string&)>(
    v1,
    (int (*)(GmContext *, const std::vector<std::string> *, std::string *))procMpPlay);
  std::string::~string(&__k);
  std::allocator<char>::~allocator(&__a);
};

// Line 10442: range 0000000017C16E81-0000000017C173D1
int32_t __cdecl procMpPlay(GmContext *context, const std::vector<std::string> *param_vec, std::string *ret_msg)
{
  unsigned __int64 v3; // r12
  __int64 v4; // rax
  unsigned __int64 v5; // r13
  int32_t result; // eax
  const std::string *v7; // rax
  const std::string *v8; // rax
  PlayerMpPlayComp *MpPlayComp; // rax
  common::milog::MiLogStream *v10; // rax
  common::milog::MiLogStream *v11; // rax
  const std::string *v12; // rax
  const std::string *v13; // rax
  PlayerMpPlayComp *v14; // rax
  common::milog::MiLogStream *v15; // rax
  common::milog::MiLogStream *v16; // rax
  const std::string *v17; // rax
  PlayerMpPlayComp *v18; // rax
  const std::string *v19; // rax
  const std::string *v20; // rax
  PlayerMpPlayComp *v21; // rax
  common::milog::MiLogStream v23; // [rsp+20h] [rbp-80h] BYREF
  char v24[96]; // [rsp+40h] [rbp-60h] BYREF

  v3 = (unsigned __int64)v24;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_0(64LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "1 32 4 16 mp_play_id:10478";
  *(_QWORD *)(v3 + 16) = procMpPlay;
  v5 = v3 >> 3;
  *(_DWORD *)(v5 + 2147450880) = -235802127;
  *(_DWORD *)(v5 + 2147450884) = -202116348;
  if ( std::vector<std::string>::size(param_vec) > 1 )
  {
    v7 = std::vector<std::string>::operator[](param_vec, 0LL);
    if ( std::operator==<char>(v7, "OPEN") )
    {
      *(_DWORD *)(v3 + 32) = 0;
      v8 = std::vector<std::string>::operator[](param_vec, 1uLL);
      common::tools::StringUtils::strToNum<unsigned int>(v8, (unsigned int *)(v3 + 32), 1);
      if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
        __asan_report_load8(&context->player);
      MpPlayComp = Player::getMpPlayComp(context->player);
      if ( PlayerMpPlayComp::openMpPlay(MpPlayComp, *(_DWORD *)(v3 + 32)) )
      {
        common::milog::MiLogStream::create(
          &v23,
          &common::milog::MiLogDefault::default_log_obj_,
          3u,
          "./src/player/gm/player_gm_comp.cpp",
          "procMpPlay",
          10454);
        v10 = common::milog::MiLogStream::operator<<<char [12],(char *[12])0>(&v23, (const char (*)[12])"openMpPlay ");
        v11 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                v10,
                (const unsigned int *)(v3 + 32));
        common::milog::MiLogStream::operator<<<char [7],(char *[7])0>(v11, (const char (*)[7])" fails");
        common::milog::MiLogStream::~MiLogStream(&v23);
        result = -1;
      }
      else
      {
        result = 0;
      }
    }
    else
    {
      v12 = std::vector<std::string>::operator[](param_vec, 0LL);
      if ( std::operator==<char>(v12, "CLOSE") )
      {
        *(_DWORD *)(v3 + 32) = 0;
        v13 = std::vector<std::string>::operator[](param_vec, 1uLL);
        common::tools::StringUtils::strToNum<unsigned int>(v13, (unsigned int *)(v3 + 32), 1);
        if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
          __asan_report_load8(&context->player);
        v14 = Player::getMpPlayComp(context->player);
        if ( PlayerMpPlayComp::closeMpPlay(v14, *(_DWORD *)(v3 + 32)) )
        {
          common::milog::MiLogStream::create(
            &v23,
            &common::milog::MiLogDefault::default_log_obj_,
            3u,
            "./src/player/gm/player_gm_comp.cpp",
            "procMpPlay",
            10465);
          v15 = common::milog::MiLogStream::operator<<<char [12],(char *[12])0>(&v23, (const char (*)[12])"openMpPlay ");
          v16 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                  v15,
                  (const unsigned int *)(v3 + 32));
          common::milog::MiLogStream::operator<<<char [7],(char *[7])0>(v16, (const char (*)[7])" fails");
          common::milog::MiLogStream::~MiLogStream(&v23);
          result = -1;
        }
        else
        {
          result = 0;
        }
      }
      else
      {
        v17 = std::vector<std::string>::operator[](param_vec, 0LL);
        if ( std::operator==<char>(v17, "CLEAR") )
        {
          if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
            __asan_report_load8(&context->player);
          v18 = Player::getMpPlayComp(context->player);
          PlayerMpPlayComp::clearByGm(v18);
          result = 0;
        }
        else
        {
          v19 = std::vector<std::string>::operator[](param_vec, 0LL);
          if ( std::operator==<char>(v19, "MATCH") )
          {
            *(_DWORD *)(v3 + 32) = 0;
            v20 = std::vector<std::string>::operator[](param_vec, 1uLL);
            common::tools::StringUtils::strToNum<unsigned int>(v20, (unsigned int *)(v3 + 32), 1);
            if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
              __asan_report_load8(&context->player);
            v21 = Player::getMpPlayComp(context->player);
            if ( PlayerMpPlayComp::forceMatchByGm(v21, *(_DWORD *)(v3 + 32)) )
            {
              common::milog::MiLogStream::create(
                &v23,
                &common::milog::MiLogDefault::default_log_obj_,
                3u,
                "./src/player/gm/player_gm_comp.cpp",
                "procMpPlay",
                10482);
              common::milog::MiLogStream::operator<<<char [21],(char *[21])0>(
                &v23,
                (const char (*)[21])"forceMatchByGm fails");
              common::milog::MiLogStream::~MiLogStream(&v23);
              result = -1;
            }
            else
            {
              result = 0;
            }
          }
          else
          {
            std::string::operator=(ret_msg, &off_26364780);
            result = -1;
          }
        }
      }
    }
  }
  else
  {
    std::string::operator=(ret_msg, "param not enough");
    result = -1;
  }
  if ( v24 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 10491: range 0000000017D78F46-0000000017D78FE8
void __cdecl procGadgetPlayRegister::procGadgetPlayRegister(procGadgetPlayRegister *const this)
{
  std::function<int(GmContext&,const std::vector<std::string>&,std::string&)> *v1; // rax
  std::allocator<char> __a; // [rsp+1Fh] [rbp-31h] BYREF
  std::string __k; // [rsp+20h] [rbp-30h] BYREF

  std::allocator<char>::allocator(&__a);
  std::string::basic_string<std::allocator<char>>(&__k, "GADGETPLAY", &__a);
  v1 = std::unordered_map<std::string,std::function<int ()(GmContext &,std::vector<std::string> const&,std::string&)>>::operator[](
         &GmUtils::op_func_map[abi:cxx11],
         &__k);
  std::function<int ()(GmContext &,std::vector<std::string> const&,std::string&)>::operator=<int (&)(GmContext &,std::vector<std::string> const&,std::string&)>(
    v1,
    (int (*)(GmContext *, const std::vector<std::string> *, std::string *))procGadgetPlay);
  std::string::~string(&__k);
  std::allocator<char>::~allocator(&__a);
};

// Line 10492: range 0000000017C173D2-0000000017C1800D
int32_t __cdecl procGadgetPlay(GmContext *context, const std::vector<std::string> *param_vec, std::string *ret_msg)
{
  __m128i v3; // xmm0
  unsigned __int64 v4; // r13
  __int64 v5; // rax
  _DWORD *v6; // r12
  int32_t v7; // r14d
  const std::string *v8; // rax
  const std::string *v9; // rax
  SceneBlockGroupComp *BlockGroupComp; // rax
  unsigned __int64 v11; // rdx
  common::milog::MiLogStream *v12; // rax
  uint32_t v13; // eax
  common::milog::MiLogStream *v14; // rax
  const std::string *v15; // rax
  const std::string *v16; // rax
  std::__shared_ptr_access<GadgetPlayComp,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v17; // rax
  const std::string *v18; // rax
  common::milog::MiLogStream *v19; // r14
  std::__shared_ptr_access<AvatarTeamEntity,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v20; // rax
  common::milog::MiLogStream *v21; // rax
  Gadget *v22; // r14
  std::__shared_ptr_access<AvatarTeamEntity,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v23; // rax
  int32_t EntityId; // eax
  const std::string *v25; // rax
  std::__shared_ptr_access<AvatarTeamEntity,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v26; // rax
  common::milog::MiLogStream *v27; // rax
  Gadget *v28; // r14
  std::__shared_ptr_access<AvatarTeamEntity,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v29; // rax
  int32_t v30; // eax
  int32_t result; // eax
  std::allocator<char> __a; // [rsp+2Fh] [rbp-181h] BYREF
  AbilityComp *ability_comp_0; // [rsp+30h] [rbp-180h]
  AbilityComp *ability_comp; // [rsp+38h] [rbp-178h]
  common::milog::MiLogStream v36; // [rsp+40h] [rbp-170h] BYREF
  char v37[336]; // [rsp+60h] [rbp-150h] BYREF

  v4 = (unsigned __int64)v37;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v5 = __asan_stack_malloc_3(288LL);
    if ( v5 )
      v4 = v5;
  }
  *(_QWORD *)v4 = 1102416563LL;
  *(_QWORD *)(v4 + 8) = "8 48 4 14 group_id:10499 64 4 15 config_id:10499 80 4 15 cur_value:10561 96 16 15 group_ptr:1050"
                        "2 128 16 16 gadget_ptr:10508 160 16 19 play_comp_ptr:10514 192 16 21 team_entity_ptr:10552 224 32 9 key:10560";
  *(_QWORD *)(v4 + 16) = procGadgetPlay;
  v6 = (_DWORD *)(v4 >> 3);
  v6[536862720] = -235802127;
  v6[536862721] = -234556943;
  v6[536862722] = -234556924;
  v6[536862723] = -219021312;
  v6[536862724] = -219021312;
  v6[536862725] = -219021312;
  v6[536862726] = -219021312;
  v6[536862728] = -202116109;
  if ( std::vector<std::string>::size(param_vec) <= 2 )
  {
    std::string::operator=(ret_msg, "param not enough");
    v7 = -1;
    goto LABEL_43;
  }
  *(_DWORD *)(v4 + 48) = 0;
  *(_DWORD *)(v4 + 64) = 0;
  v8 = std::vector<std::string>::operator[](param_vec, 1uLL);
  common::tools::StringUtils::strToNum<unsigned int>(v8, (unsigned int *)(v4 + 48), 1);
  v9 = std::vector<std::string>::operator[](param_vec, 2uLL);
  common::tools::StringUtils::strToNum<unsigned int>(v9, (unsigned int *)(v4 + 64), 1);
  if ( *(_BYTE *)(((unsigned __int64)&context->scene >> 3) + 0x7FFF8000) )
    *(double *)v3.m128i_i64 = __asan_report_load8(&context->scene);
  BlockGroupComp = Scene::getBlockGroupComp(context->scene);
  if ( *(_BYTE *)(((unsigned __int64)BlockGroupComp >> 3) + 0x7FFF8000) )
    *(double *)v3.m128i_i64 = __asan_report_load8(BlockGroupComp);
  v11 = (unsigned __int64)(BlockGroupComp->_vptr_SceneCompBase + 10);
  if ( *(_BYTE *)((v11 >> 3) + 0x7FFF8000) )
    *(double *)v3.m128i_i64 = __asan_report_load8(BlockGroupComp->_vptr_SceneCompBase + 10);
  (*(void (__fastcall **)(unsigned __int64, SceneBlockGroupComp *, _QWORD, _QWORD, _QWORD, _QWORD))v11)(
    v4 + 96,
    BlockGroupComp,
    *(unsigned int *)(v4 + 48),
    0LL,
    0LL,
    0LL);
  if ( !std::operator==<Group>(0LL, (const std::shared_ptr<Group> *)(v4 + 96)) )
  {
    v13 = (unsigned int)std::__shared_ptr_access<Group,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Group,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 96));
    Group::findEntityByConfigId<Gadget>((Group *const)(v4 + 128), v13);
    if ( std::operator==<Gadget>(0LL, (const std::shared_ptr<Gadget> *)(v4 + 128)) )
    {
      common::milog::MiLogStream::create(
        &v36,
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/player/gm/player_gm_comp.cpp",
        "procGadgetPlay",
        10511);
      v14 = common::milog::MiLogStream::operator<<<char [29],(char *[29])0>(
              &v36,
              (const char (*)[29])"findEntityByConfigId fails, ");
      common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v14, (const unsigned int *)(v4 + 64));
      common::milog::MiLogStream::~MiLogStream(&v36);
      v7 = -1;
LABEL_41:
      std::shared_ptr<Gadget>::~shared_ptr((std::shared_ptr<Gadget> *const)(v4 + 128));
      goto LABEL_42;
    }
    std::__shared_ptr_access<Gadget,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Gadget,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 128));
    EcsBase<Gadget,GadgetCompBase,28u>::findComp<GadgetPlayComp>((const EcsBase<Gadget,GadgetCompBase,28> *const)(v4 + 160));
    if ( std::operator==<GadgetPlayComp>(0LL, (const std::shared_ptr<GadgetPlayComp> *)(v4 + 160)) )
    {
      common::milog::MiLogStream::create(
        &v36,
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/player/gm/player_gm_comp.cpp",
        "procGadgetPlay",
        10517);
      common::milog::MiLogStream::operator<<<char [31],(char *[31])0>(
        &v36,
        (const char (*)[31])"findComp<GadgetPlayComp> fails");
      common::milog::MiLogStream::~MiLogStream(&v36);
      v7 = -1;
LABEL_40:
      std::shared_ptr<GadgetPlayComp>::~shared_ptr((std::shared_ptr<GadgetPlayComp> *const)(v4 + 160));
      goto LABEL_41;
    }
    v15 = std::vector<std::string>::operator[](param_vec, 0LL);
    if ( std::operator==<char>(v15, "STOP") )
    {
      *(_DWORD *)(v4 + 80) = 0;
      if ( std::vector<std::string>::size(param_vec) > 3 )
      {
        v16 = std::vector<std::string>::operator[](param_vec, 3uLL);
        common::tools::StringUtils::strToNum<unsigned int>(v16, (unsigned int *)(v4 + 80), 1);
      }
      v17 = std::__shared_ptr_access<GadgetPlayComp,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<GadgetPlayComp,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 160));
      v7 = GadgetPlayComp::stopPlayByGm(v17, *(_DWORD *)(v4 + 80) != 0);
      goto LABEL_40;
    }
    v18 = std::vector<std::string>::operator[](param_vec, 0LL);
    if ( std::operator==<char>(v18, "EATBIG") )
    {
      if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
        *(double *)v3.m128i_i64 = __asan_report_load8(&context->player);
      Player::getAvatarComp(context->player);
      PlayerAvatarComp::getTeamEntity((const PlayerAvatarComp *const)(v4 + 192));
      if ( !std::operator==<AvatarTeamEntity>(0LL, (const std::shared_ptr<AvatarTeamEntity> *)(v4 + 192)) )
      {
        v20 = std::__shared_ptr_access<AvatarTeamEntity,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<AvatarTeamEntity,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 192));
        ability_comp = Creature::getAbilityComp(v20);
        std::allocator<char>::allocator(&__a);
        std::string::basic_string<std::allocator<char>>(
          (std::string *const)(v4 + 224),
          "_Crucible_Grume_Player_Sum_Superior",
          &__a);
        std::allocator<char>::~allocator(&__a);
        *(float *)v3.m128i_i32 = AbilityComp::getDynamicValue<float>(ability_comp, (const std::string *)(v4 + 224));
        *(_DWORD *)(v4 + 80) = _mm_cvtsi128_si32(v3);
        AbilityComp::createOrSetDynamicValue<float>(
          ability_comp,
          (const std::string *)(v4 + 224),
          *(float *)(v4 + 80) + 1.0);
        common::milog::MiLogStream::create(
          &v36,
          &common::milog::MiLogDefault::default_log_obj_,
          1u,
          "./src/player/gm/player_gm_comp.cpp",
          "procGadgetPlay",
          10544);
        v21 = common::milog::MiLogStream::operator<<<char [20],(char *[20])0>(
                &v36,
                (const char (*)[20])"superior cur_value:");
        common::milog::MiLogStream::operator<<<float,(float *)0>(v21, (const float *)(v4 + 80));
        common::milog::MiLogStream::~MiLogStream(&v36);
        v22 = std::__shared_ptr_access<Gadget,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Gadget,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 128));
        v23 = std::__shared_ptr_access<AvatarTeamEntity,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<AvatarTeamEntity,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 192));
        EntityId = Entity::getEntityId((const Entity *const)v23);
        v7 = Gadget::executeGadgetLua(v22, 0, 1, EntityId);
        std::string::~string((void *)(v4 + 224));
        goto LABEL_30;
      }
      common::milog::MiLogStream::create(
        &v36,
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/player/gm/player_gm_comp.cpp",
        "procGadgetPlay",
        10536);
      v19 = common::milog::MiLogStream::operator<<<char [26],(char *[26])0>(
              &v36,
              (const char (*)[26])"getTeamEntity fails, uid:");
      if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
        __asan_report_load8(&context->player);
    }
    else
    {
      v25 = std::vector<std::string>::operator[](param_vec, 0LL);
      if ( !std::operator==<char>(v25, "EATSMALL") )
      {
        std::string::operator=(ret_msg, &off_26364780);
        v7 = -1;
        goto LABEL_40;
      }
      if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
        *(double *)v3.m128i_i64 = __asan_report_load8(&context->player);
      Player::getAvatarComp(context->player);
      PlayerAvatarComp::getTeamEntity((const PlayerAvatarComp *const)(v4 + 192));
      if ( !std::operator==<AvatarTeamEntity>(0LL, (const std::shared_ptr<AvatarTeamEntity> *)(v4 + 192)) )
      {
        v26 = std::__shared_ptr_access<AvatarTeamEntity,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<AvatarTeamEntity,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 192));
        ability_comp_0 = Creature::getAbilityComp(v26);
        std::allocator<char>::allocator(&__a);
        std::string::basic_string<std::allocator<char>>(
          (std::string *const)(v4 + 224),
          "_Crucible_Grume_Player_Sum_Inferior",
          &__a);
        std::allocator<char>::~allocator(&__a);
        *(float *)v3.m128i_i32 = AbilityComp::getDynamicValue<float>(ability_comp_0, (const std::string *)(v4 + 224));
        *(_DWORD *)(v4 + 80) = _mm_cvtsi128_si32(v3);
        AbilityComp::createOrSetDynamicValue<float>(
          ability_comp_0,
          (const std::string *)(v4 + 224),
          *(float *)(v4 + 80) + 1.0);
        common::milog::MiLogStream::create(
          &v36,
          &common::milog::MiLogDefault::default_log_obj_,
          1u,
          "./src/player/gm/player_gm_comp.cpp",
          "procGadgetPlay",
          10563);
        v27 = common::milog::MiLogStream::operator<<<char [20],(char *[20])0>(
                &v36,
                (const char (*)[20])"inferior cur_value:");
        common::milog::MiLogStream::operator<<<float,(float *)0>(v27, (const float *)(v4 + 80));
        common::milog::MiLogStream::~MiLogStream(&v36);
        v28 = std::__shared_ptr_access<Gadget,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Gadget,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 128));
        v29 = std::__shared_ptr_access<AvatarTeamEntity,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<AvatarTeamEntity,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 192));
        v30 = Entity::getEntityId((const Entity *const)v29);
        v7 = Gadget::executeGadgetLua(v28, 0, 1, v30);
        std::string::~string((void *)(v4 + 224));
        goto LABEL_30;
      }
      common::milog::MiLogStream::create(
        &v36,
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/player/gm/player_gm_comp.cpp",
        "procGadgetPlay",
        10555);
      v19 = common::milog::MiLogStream::operator<<<char [26],(char *[26])0>(
              &v36,
              (const char (*)[26])"getTeamEntity fails, uid:");
      if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
        __asan_report_load8(&context->player);
    }
    *(_DWORD *)(v4 + 80) = Player::getUid(context->player);
    common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v19, (const unsigned int *)(v4 + 80));
    common::milog::MiLogStream::~MiLogStream(&v36);
    v7 = -1;
LABEL_30:
    std::shared_ptr<AvatarTeamEntity>::~shared_ptr((std::shared_ptr<AvatarTeamEntity> *const)(v4 + 192));
    goto LABEL_40;
  }
  common::milog::MiLogStream::create(
    &v36,
    &common::milog::MiLogDefault::default_log_obj_,
    3u,
    "./src/player/gm/player_gm_comp.cpp",
    "procGadgetPlay",
    10505);
  v12 = common::milog::MiLogStream::operator<<<char [27],(char *[27])0>(
          &v36,
          (const char (*)[27])"group not found! group_id:");
  common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v12, (const unsigned int *)(v4 + 48));
  common::milog::MiLogStream::~MiLogStream(&v36);
  v7 = -1;
LABEL_42:
  std::shared_ptr<Group>::~shared_ptr((std::shared_ptr<Group> *const)(v4 + 96));
LABEL_43:
  result = v7;
  if ( v37 == (char *)v4 )
  {
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8008) = 0LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8010) = 0LL;
    *(_DWORD *)((v4 >> 3) + 0x7FFF8018) = 0;
    *(_DWORD *)((v4 >> 3) + 0x7FFF8020) = 0;
  }
  else
  {
    *(_QWORD *)v4 = 1172321806LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v4 >> 3) + 0x7FFF8020) = -168430091;
  }
  return result;
};

// Line 10573: range 0000000017D78FEA-0000000017D7908C
void __cdecl procYaceRegister::procYaceRegister(procYaceRegister *const this)
{
  std::function<int(GmContext&,const std::vector<std::string>&,std::string&)> *v1; // rax
  std::allocator<char> __a; // [rsp+1Fh] [rbp-31h] BYREF
  std::string __k; // [rsp+20h] [rbp-30h] BYREF

  std::allocator<char>::allocator(&__a);
  std::string::basic_string<std::allocator<char>>(&__k, "YACE", &__a);
  v1 = std::unordered_map<std::string,std::function<int ()(GmContext &,std::vector<std::string> const&,std::string&)>>::operator[](
         &GmUtils::op_func_map[abi:cxx11],
         &__k);
  std::function<int ()(GmContext &,std::vector<std::string> const&,std::string&)>::operator=<int (&)(GmContext &,std::vector<std::string> const&,std::string&)>(
    v1,
    (int (*)(GmContext *, const std::vector<std::string> *, std::string *))procYace);
  std::string::~string(&__k);
  std::allocator<char>::~allocator(&__a);
};

// Line 10574: range 0000000017C19007-0000000017C1953D
int32_t __cdecl procYace(GmContext *context, const std::vector<std::string> *param_vec, std::string *ret_msg)
{
  unsigned __int64 v3; // r13
  __int64 v4; // rax
  _DWORD *v5; // r12
  int v6; // r14d
  std::function<int(const std::vector<std::string>&,std::string&)> *v7; // rax
  std::function<int(const std::vector<std::string>&,std::string&)> *v8; // rax
  std::unordered_map<std::string,std::function<int(const std::vector<std::string>&,std::string&)>>::mapped_type *v9; // r14
  std::function<int(const std::vector<std::string>&,std::string&)> *v10; // rax
  const std::unordered_map<std::string,std::function<int(const std::vector<std::string>&,std::string&)>>::key_type *v11; // rax
  const std::string *v12; // rax
  std::function<int(const std::vector<std::string>&,std::string&)> *p_second; // rcx
  int32_t result; // eax
  std::allocator<char> v16; // [rsp+26h] [rbp-14Ah] BYREF
  std::allocator<char> __a; // [rsp+27h] [rbp-149h] BYREF
  std::__detail::_Node_iterator_base<std::pair<const std::string,std::function<int(const std::vector<std::string>&,std::string&)> >,true> __y; // [rsp+28h] [rbp-148h] BYREF
  procYace::<lambda(const std::vector<std::string>&, std::string&)> __f; // [rsp+30h] [rbp-140h] BYREF
  std::string v20; // [rsp+40h] [rbp-130h] BYREF
  std::string __k; // [rsp+60h] [rbp-110h] BYREF
  char v22[240]; // [rsp+80h] [rbp-F0h] BYREF

  v3 = (unsigned __int64)v22;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_2(192LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "3 32 8 10 iter:10672 64 16 19 create_gadget:10584 96 56 14 func_map:10582";
  *(_QWORD *)(v3 + 16) = procYace;
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = -218959360;
  v5[536862722] = -219021312;
  v5[536862724] = -218103808;
  v5[536862725] = -202116109;
  if ( std::vector<std::string>::empty(param_vec) )
  {
    std::string::operator=(ret_msg, "params is empty");
    v6 = -1;
  }
  else
  {
    std::unordered_map<std::string,std::function<int ()(std::vector<std::string> const&,std::string&)>>::unordered_map((std::unordered_map<std::string,std::function<int(const std::vector<std::string>&,std::string&)>> *const)(v3 + 96));
    *(_QWORD *)(v3 + 64) = param_vec;
    *(_QWORD *)(v3 + 72) = context;
    __f.__create_gadget = (procYace::<lambda()> *)(v3 + 64);
    __f.__context = context;
    std::allocator<char>::allocator(&__a);
    std::string::basic_string<std::allocator<char>>(&__k, "GADGET_INTERACT_REQ", &__a);
    v7 = std::unordered_map<std::string,std::function<int ()(std::vector<std::string> const&,std::string&)>>::operator[](
           (std::unordered_map<std::string,std::function<int(const std::vector<std::string>&,std::string&)>> *const)(v3 + 96),
           &__k);
    std::function<int ()(std::vector<std::string> const&,std::string&)>::operator=<procYace(GmContext &,std::vector<std::string> const&,std::string&)::{lambda(std::vector<std::string> const&,std::string&)#2}>(
      v7,
      &__f);
    std::string::~string(&__k);
    std::allocator<char>::~allocator(&__a);
    __f.__create_gadget = (procYace::<lambda()> *)(v3 + 64);
    __f.__context = context;
    std::allocator<char>::allocator(&__a);
    std::string::basic_string<std::allocator<char>>(&__k, "GADGET_EXECUTE_SCRIPT_REQ", &__a);
    v8 = std::unordered_map<std::string,std::function<int ()(std::vector<std::string> const&,std::string&)>>::operator[](
           (std::unordered_map<std::string,std::function<int(const std::vector<std::string>&,std::string&)>> *const)(v3 + 96),
           &__k);
    std::function<int ()(std::vector<std::string> const&,std::string&)>::operator=<procYace(GmContext &,std::vector<std::string> const&,std::string&)::{lambda(std::vector<std::string> const&,std::string&)#3}>(
      v8,
      &__f);
    std::string::~string(&__k);
    std::allocator<char>::~allocator(&__a);
    std::allocator<char>::allocator(&__a);
    std::string::basic_string<std::allocator<char>>(&__k, "GADGET_EXECUTE_SCRIPT_REQ", &__a);
    v9 = std::unordered_map<std::string,std::function<int ()(std::vector<std::string> const&,std::string&)>>::operator[](
           (std::unordered_map<std::string,std::function<int(const std::vector<std::string>&,std::string&)>> *const)(v3 + 96),
           &__k);
    std::allocator<char>::allocator(&v16);
    std::string::basic_string<std::allocator<char>>(&v20, "EXECUTE_GADGET_LUA_REQ", &v16);
    v10 = std::unordered_map<std::string,std::function<int ()(std::vector<std::string> const&,std::string&)>>::operator[](
            (std::unordered_map<std::string,std::function<int(const std::vector<std::string>&,std::string&)>> *const)(v3 + 96),
            &v20);
    std::function<int ()(std::vector<std::string> const&,std::string&)>::operator=(v10, v9);
    std::string::~string(&v20);
    std::allocator<char>::~allocator(&v16);
    std::string::~string(&__k);
    std::allocator<char>::~allocator(&__a);
    v11 = std::vector<std::string>::operator[](param_vec, 0LL);
    *(std::unordered_map<std::string,std::function<int(const std::vector<std::string>&,std::string&)>>::iterator *)(v3 + 32) = std::unordered_map<std::string,std::function<int ()(std::vector<std::string> const&,std::string&)>>::find((std::unordered_map<std::string,std::function<int(const std::vector<std::string>&,std::string&)>> *const)(v3 + 96), v11);
    __y._M_cur = std::unordered_map<std::string,std::function<int ()(std::vector<std::string> const&,std::string&)>>::end((std::unordered_map<std::string,std::function<int(const std::vector<std::string>&,std::string&)>> *const)(v3 + 96))._M_cur;
    if ( std::__detail::operator==<std::pair<std::string const,std::function<int ()(std::vector<std::string> const&,std::string&)>>,true>(
           (const std::__detail::_Node_iterator_base<std::pair<const std::string,std::function<int(const std::vector<std::string>&,std::string&)> >,true> *)(v3 + 32),
           &__y) )
    {
      v12 = std::vector<std::string>::operator[](param_vec, 0LL);
      std::operator+<char>(&__k, "unknown param:", v12);
      std::string::operator=(ret_msg, &__k);
      std::string::~string(&__k);
      v6 = -1;
    }
    else
    {
      p_second = &std::__detail::_Node_iterator<std::pair<std::string const,std::function<int ()(std::vector<std::string> const&,std::string&)>>,false,true>::operator->((const std::__detail::_Node_iterator<std::pair<const std::string,std::function<int(const std::vector<std::string>&,std::string&)> >,false,true> *const)(v3 + 32))->second;
      v6 = std::function<int ()(std::vector<std::string> const&,std::string&)>::operator()(p_second, param_vec, ret_msg);
    }
    std::unordered_map<std::string,std::function<int ()(std::vector<std::string> const&,std::string&)>>::~unordered_map((std::unordered_map<std::string,std::function<int(const std::vector<std::string>&,std::string&)>> *const)(v3 + 96));
  }
  result = v6;
  if ( v22 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8008) = 0;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8010) = 0LL;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 10584: range 0000000017C1800E-0000000017C1864C
GadgetPtr __cdecl procYace(GmContext &,std::vector<std::string> const&,std::string&)::{lambda(void)#1}::operator()(
        const procYace::<lambda()> *const __closure)
{
  unsigned __int64 v1; // rsi
  unsigned __int64 p_is_enable; // r13
  __int64 v3; // rax
  _DWORD *v4; // r12
  const std::string *v5; // rax
  const std::string *v6; // rax
  __int64 v7; // rax
  unsigned __int64 Position; // rax
  __int64 v9; // rax
  __int64 v10; // rax
  std::__shared_ptr_access<Gadget,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v11; // rax
  unsigned __int64 v12; // rdx
  void (__fastcall *v13)(std::__shared_ptr_access<Gadget,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *, _QWORD, VisionContext *); // r8
  __int64 v14; // rdx
  std::__shared_ptr_access<Gadget,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v15; // rax
  GadgetPtr result; // rax
  SceneBlockGroupComp v17; // [rsp+10h] [rbp-450h] BYREF

  p_is_enable = (unsigned __int64)&v17.is_enable_;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_5(1056LL);
    if ( v3 )
      p_is_enable = v3;
  }
  *(_QWORD *)p_is_enable = 1102416563LL;
  *(_QWORD *)(p_is_enable + 8) = "4 48 4 15 gadget_id:10586 64 4 13 drop_id:10587 80 16 16 gadget_ptr:10605 112 816 18 ga"
                                 "dget_param:10597";
  *(_QWORD *)(p_is_enable + 16) = procYace(GmContext &,std::vector<std::string> const&,std::string&)::{lambda(void)#1}::operator();
  v4 = (_DWORD *)(p_is_enable >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = -234556943;
  v4[536862722] = 61956;
  v4[536862723] = 62194;
  v4[536862749] = -202116109;
  v4[536862750] = -202116109;
  v4[536862751] = -202116109;
  v4[536862752] = -202116109;
  *(_DWORD *)(p_is_enable + 48) = 70210023;
  *(_DWORD *)(p_is_enable + 64) = 1000100;
  if ( *(_BYTE *)((v1 >> 3) + 0x7FFF8000) )
    __asan_report_load8();
  if ( std::vector<std::string>::size(*(const std::vector<std::string> *const *)v1) > 1 )
  {
    if ( *(_BYTE *)((v1 >> 3) + 0x7FFF8000) )
      __asan_report_load8();
    v5 = std::vector<std::string>::operator[](*(const std::vector<std::string> *const *)v1, 1uLL);
    common::tools::StringUtils::strToNum<unsigned int>(v5, (unsigned int *)(p_is_enable + 48), 1);
  }
  if ( *(_BYTE *)((v1 >> 3) + 0x7FFF8000) )
    __asan_report_load8();
  if ( std::vector<std::string>::size(*(const std::vector<std::string> *const *)v1) > 2 )
  {
    if ( *(_BYTE *)((v1 >> 3) + 0x7FFF8000) )
      __asan_report_load8();
    v6 = std::vector<std::string>::operator[](*(const std::vector<std::string> *const *)v1, 2uLL);
    common::tools::StringUtils::strToNum<unsigned int>(v6, (unsigned int *)(p_is_enable + 64), 1);
  }
  GadgetParam::GadgetParam((GadgetParam *const)(p_is_enable + 112));
  *(_DWORD *)(p_is_enable + 112) = *(_DWORD *)(p_is_enable + 48);
  if ( *(_BYTE *)(((v1 + 8) >> 3) + 0x7FFF8000) )
    __asan_report_load8();
  v7 = *(_QWORD *)(v1 + 8);
  if ( *(_BYTE *)(((unsigned __int64)(v7 + 40) >> 3) + 0x7FFF8000) )
    __asan_report_load8();
  Position = (unsigned __int64)Entity::getPosition(*(const Entity *const *)(v7 + 40));
  if ( (char)(Position & 7) >= *(_BYTE *)((Position >> 3) + 0x7FFF8000) && *(_BYTE *)((Position >> 3) + 0x7FFF8000) != 0
    || *(_BYTE *)(((Position + 11) >> 3) + 0x7FFF8000) != 0
    && (char)((Position + 11) & 7) >= *(_BYTE *)(((Position + 11) >> 3) + 0x7FFF8000) )
  {
    Position = __asan_report_load_n(Position, 12LL);
  }
  *(_QWORD *)(p_is_enable + 124) = *(_QWORD *)Position;
  *(_DWORD *)(p_is_enable + 132) = *(_DWORD *)(Position + 8);
  *(_DWORD *)(p_is_enable + 160) = *(_DWORD *)(p_is_enable + 64);
  *(_DWORD *)(p_is_enable + 332) = *(_DWORD *)(p_is_enable + 64);
  *(_DWORD *)(p_is_enable + 148) = 1;
  if ( *(_BYTE *)(((v1 + 8) >> 3) + 0x7FFF8000) )
    __asan_report_load8();
  v9 = *(_QWORD *)(v1 + 8);
  if ( *(_BYTE *)(((unsigned __int64)(v9 + 48) >> 3) + 0x7FFF8000) )
    __asan_report_load8();
  Scene::getBlockGroupComp(*(Scene *const *)(v9 + 48));
  SceneBlockGroupComp::getOneActiveGroupForGm(&v17);
  std::shared_ptr<Group>::operator=((std::shared_ptr<Group> *const)(p_is_enable + 168), (std::shared_ptr<Group> *)&v17);
  std::shared_ptr<Group>::~shared_ptr((std::shared_ptr<Group> *const)&v17);
  if ( *(_BYTE *)(((v1 + 8) >> 3) + 0x7FFF8000) )
    __asan_report_load8();
  v10 = *(_QWORD *)(v1 + 8);
  if ( *(_BYTE *)(((unsigned __int64)(v10 + 48) >> 3) + 0x7FFF8000) )
    __asan_report_load8();
  *(_DWORD *)(p_is_enable + 120) = Scene::genNewEntityId(*(Scene *const *)(v10 + 48), PROT_ENTITY_GADGET);
  EntityMgr::createGadget((const GadgetParam *)(p_is_enable + 80));
  if ( std::operator==<Gadget>((const std::shared_ptr<Gadget> *)(p_is_enable + 80), 0LL) )
  {
    std::shared_ptr<Gadget>::shared_ptr((std::shared_ptr<Gadget> *const)__closure, 0LL);
  }
  else
  {
    v11 = std::__shared_ptr_access<Gadget,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Gadget,(__gnu_cxx::_Lock_policy)2,false,false> *const)(p_is_enable + 80));
    if ( *(_BYTE *)(((unsigned __int64)v11 >> 3) + 0x7FFF8000) )
      __asan_report_load8();
    v12 = *(_QWORD *)v11->baseclass_0 + 56LL;
    if ( *(_BYTE *)((v12 >> 3) + 0x7FFF8000) )
      __asan_report_load8();
    v13 = *(void (__fastcall **)(std::__shared_ptr_access<Gadget,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *, _QWORD, VisionContext *))v12;
    if ( *(_BYTE *)(((v1 + 8) >> 3) + 0x7FFF8000) )
      __asan_report_load8();
    v14 = *(_QWORD *)(v1 + 8);
    if ( *(_BYTE *)(((unsigned __int64)(v14 + 48) >> 3) + 0x7FFF8000) )
      __asan_report_load8();
    v13(v11, *(_QWORD *)(v14 + 48), &VisionContext::meet_context);
    v15 = std::__shared_ptr_access<Gadget,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Gadget,(__gnu_cxx::_Lock_policy)2,false,false> *const)(p_is_enable + 80));
    Creature::setIsCreatedByGm(v15, 1);
    std::shared_ptr<Gadget>::shared_ptr(
      (std::shared_ptr<Gadget> *const)__closure,
      (std::shared_ptr<Gadget> *)(p_is_enable + 80));
  }
  std::shared_ptr<Gadget>::~shared_ptr((std::shared_ptr<Gadget> *const)(p_is_enable + 80));
  GadgetParam::~GadgetParam((GadgetParam *const)(p_is_enable + 112));
  if ( &v17.is_enable_ == (bool *)p_is_enable )
  {
    *(_QWORD *)((p_is_enable >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((p_is_enable >> 3) + 0x7FFF8008) = 0LL;
    *(_QWORD *)((p_is_enable >> 3) + 0x7FFF8074) = 0LL;
    *(_QWORD *)((p_is_enable >> 3) + 0x7FFF807C) = 0LL;
  }
  else
  {
    *(_QWORD *)p_is_enable = 1172321806LL;
    __asan_stack_free_5(p_is_enable, 1056LL, &v17.is_enable_);
  }
  result._M_ptr = (std::__shared_ptr<Gadget,(__gnu_cxx::_Lock_policy)2>::element_type *)__closure;
  return result;
};

// Line 10616: range 0000000017C1864E-0000000017C18B12
int32_t __cdecl procYace(GmContext &,std::vector<std::string> const&,std::string&)::{lambda(std::vector<std::string> const&,std::string&)#2}::operator()(
        const procYace::<lambda(const std::vector<std::string>&, std::string&)> *const __closure,
        const std::vector<std::string> *param_vec,
        std::string *ret_msg)
{
  unsigned __int64 v3; // r13
  __int64 v4; // rax
  _DWORD *v5; // r12
  int32_t v6; // r14d
  std::__shared_ptr_access<Gadget,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v7; // rax
  uint32_t EntityId; // eax
  std::__shared_ptr_access<Gadget,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v9; // rax
  uint32_t GadgetId; // eax
  GmContext *context; // rax
  bool v12; // r14
  std::__shared_ptr_access<Gadget,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v13; // r14
  unsigned __int64 v14; // rax
  void (__fastcall *v15)(std::__shared_ptr_access<Gadget,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *, VisionContext *); // r15
  int32_t result; // eax
  int ret; // [rsp+20h] [rbp-190h]
  VisionContext v19; // [rsp+24h] [rbp-18Ch] BYREF
  std::shared_ptr<Scene> __a; // [rsp+30h] [rbp-180h] BYREF
  std::string __rhs; // [rsp+40h] [rbp-170h] BYREF
  std::string v22; // [rsp+60h] [rbp-150h] BYREF
  char v23[304]; // [rsp+80h] [rbp-130h] BYREF

  v3 = (unsigned __int64)v23;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_2(256LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "4 32 16 16 gadget_ptr:10618 64 16 20 gadget_handler:10631 96 40 9 rsp:10629 176 48 9 req:10625";
  *(_QWORD *)(v3 + 16) = procYace(GmContext &,std::vector<std::string> const&,std::string&)::{lambda(std::vector<std::string> const&,std::string&)#2}::operator();
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = -219021312;
  v5[536862722] = -219021312;
  v5[536862724] = -218959360;
  v5[536862725] = 62194;
  v5[536862727] = -202116109;
  if ( *(_BYTE *)(((unsigned __int64)__closure >> 3) + 0x7FFF8000) )
    __asan_report_load8();
  procYace(GmContext &,std::vector<std::string> const&,std::string&)::{lambda(void)#1}::operator()((const procYace::<lambda()> *const)(v3 + 32));
  if ( std::operator==<Gadget>(0LL, (const std::shared_ptr<Gadget> *)(v3 + 32)) )
  {
    std::string::operator=(ret_msg, "createGadget fails");
    v6 = -1;
  }
  else
  {
    proto::GadgetInteractReq::GadgetInteractReq((proto::GadgetInteractReq *const)(v3 + 176));
    v7 = std::__shared_ptr_access<Gadget,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Gadget,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 32));
    EntityId = Entity::getEntityId((const Entity *const)v7);
    proto::GadgetInteractReq::set_gadget_entity_id((proto::GadgetInteractReq *const)(v3 + 176), EntityId);
    proto::GadgetInteractReq::set_op_type((proto::GadgetInteractReq *const)(v3 + 176), INTER_OP_FINISH);
    v9 = std::__shared_ptr_access<Gadget,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Gadget,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 32));
    GadgetId = Gadget::getGadgetId(v9);
    proto::GadgetInteractReq::set_gadget_id((proto::GadgetInteractReq *const)(v3 + 176), GadgetId);
    proto::GadgetInteractRsp::GadgetInteractRsp((proto::GadgetInteractRsp *const)(v3 + 96));
    if ( *(_BYTE *)(((unsigned __int64)&__closure->__context >> 3) + 0x7FFF8000) )
      __asan_report_load8();
    context = __closure->__context;
    if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
      __asan_report_load8();
    ZN13GadgetHandlerCI217PlayerHandlerBaseER6Player((GadgetHandler *const)(v3 + 64), context->player);
    ret = GadgetHandler::onGadgetInteractReq(
            (GadgetHandler *const)(v3 + 64),
            (const proto::GadgetInteractReq *)(v3 + 176),
            (proto::GadgetInteractRsp *)(v3 + 96));
    std::to_string(&__rhs, ret);
    std::operator+<char>(&v22, "interact ret:", &__rhs);
    std::string::operator=(ret_msg, &v22);
    std::string::~string(&v22);
    std::string::~string(&__rhs);
    std::__shared_ptr_access<Gadget,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Gadget,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 32));
    Entity::getScene((const Entity *const)&__a);
    v12 = std::operator!=<Scene>(&__a, 0LL);
    std::shared_ptr<Scene>::~shared_ptr(&__a);
    if ( v12 )
    {
      v13 = std::__shared_ptr_access<Gadget,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Gadget,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 32));
      if ( *(_BYTE *)(((unsigned __int64)v13 >> 3) + 0x7FFF8000) )
        __asan_report_load8();
      v14 = *(_QWORD *)v13->baseclass_0 + 128LL;
      if ( *(_BYTE *)((v14 >> 3) + 0x7FFF8000) )
        __asan_report_load8();
      v15 = *(void (__fastcall **)(std::__shared_ptr_access<Gadget,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *, VisionContext *))v14;
      VisionContext::VisionContext(&v19, VISION_DIE);
      v15(v13, &v19);
    }
    v6 = 0;
    GadgetHandler::~GadgetHandler((GadgetHandler *const)(v3 + 64));
    proto::GadgetInteractRsp::~GadgetInteractRsp((proto::GadgetInteractRsp *const)(v3 + 96));
    proto::GadgetInteractReq::~GadgetInteractReq((proto::GadgetInteractReq *const)(v3 + 176));
  }
  std::shared_ptr<Gadget>::~shared_ptr((std::shared_ptr<Gadget> *const)(v3 + 32));
  result = v6;
  if ( v23 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8008) = 0;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8010) = 0LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF801C) = 0;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 10643: range 0000000017C18B14-0000000017C19006
int32_t __cdecl procYace(GmContext &,std::vector<std::string> const&,std::string&)::{lambda(std::vector<std::string> const&,std::string&)#3}::operator()(
        const procYace::<lambda(const std::vector<std::string>&, std::string&)> *const __closure,
        const std::vector<std::string> *param_vec,
        std::string *ret_msg)
{
  unsigned __int64 v3; // r13
  __int64 v4; // rax
  _DWORD *v5; // r12
  int32_t v6; // r14d
  Gadget *v7; // rax
  std::__shared_ptr_access<Gadget,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v8; // rax
  uint32_t EntityId; // eax
  GmContext *context; // rax
  bool v11; // r14
  std::__shared_ptr_access<Gadget,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v12; // rax
  unsigned __int64 v13; // rdx
  int32_t result; // eax
  int ret; // [rsp+2Ch] [rbp-1A4h]
  std::shared_ptr<Scene> __a; // [rsp+30h] [rbp-1A0h] BYREF
  std::string __rhs; // [rsp+40h] [rbp-190h] BYREF
  std::string v19; // [rsp+60h] [rbp-170h] BYREF
  char v20[336]; // [rsp+80h] [rbp-150h] BYREF

  v3 = (unsigned __int64)v20;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_3(288LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "4 32 16 16 gadget_ptr:10645 64 24 9 rsp:10658 128 40 9 req:10653 208 40 19 scene_handler:10660";
  *(_QWORD *)(v3 + 16) = procYace(GmContext &,std::vector<std::string> const&,std::string&)::{lambda(std::vector<std::string> const&,std::string&)#3}::operator();
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = -219021312;
  v5[536862722] = -234881024;
  v5[536862723] = -218959118;
  v5[536862725] = -218959360;
  v5[536862726] = 62194;
  v5[536862727] = -218103808;
  v5[536862728] = -202116109;
  if ( *(_BYTE *)(((unsigned __int64)__closure >> 3) + 0x7FFF8000) )
    __asan_report_load8();
  procYace(GmContext &,std::vector<std::string> const&,std::string&)::{lambda(void)#1}::operator()((const procYace::<lambda()> *const)(v3 + 32));
  if ( std::operator==<Gadget>(0LL, (const std::shared_ptr<Gadget> *)(v3 + 32)) )
  {
    std::string::operator=(ret_msg, "createGadget fails");
    v6 = -1;
  }
  else
  {
    v7 = std::__shared_ptr_access<Gadget,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Gadget,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 32));
    Gadget::setState(v7, 1u, 0, 1);
    proto::ExecuteGadgetLuaReq::ExecuteGadgetLuaReq((proto::ExecuteGadgetLuaReq *const)(v3 + 128));
    v8 = std::__shared_ptr_access<Gadget,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Gadget,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 32));
    EntityId = Entity::getEntityId((const Entity *const)v8);
    proto::ExecuteGadgetLuaReq::set_source_entity_id((proto::ExecuteGadgetLuaReq *const)(v3 + 128), EntityId);
    proto::ExecuteGadgetLuaReq::set_param1((proto::ExecuteGadgetLuaReq *const)(v3 + 128), 1);
    proto::ExecuteGadgetLuaReq::set_param2((proto::ExecuteGadgetLuaReq *const)(v3 + 128), 1);
    proto::ExecuteGadgetLuaReq::set_param3((proto::ExecuteGadgetLuaReq *const)(v3 + 128), 1);
    proto::ExecuteGadgetLuaRsp::ExecuteGadgetLuaRsp((proto::ExecuteGadgetLuaRsp *const)(v3 + 64));
    if ( *(_BYTE *)(((unsigned __int64)&__closure->__context >> 3) + 0x7FFF8000) )
      __asan_report_load8();
    context = __closure->__context;
    if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
      __asan_report_load8();
    ZN12SceneHandlerCI217PlayerHandlerBaseER6Player((SceneHandler *const)(v3 + 208), context->player);
    ret = SceneHandler::onExecuteGadgetLuaReq(
            (SceneHandler *const)(v3 + 208),
            (const proto::ExecuteGadgetLuaReq *)(v3 + 128),
            (proto::ExecuteGadgetLuaRsp *)(v3 + 64));
    std::to_string(&__rhs, ret);
    std::operator+<char>(&v19, "execute ret:", &__rhs);
    std::string::operator=(ret_msg, &v19);
    std::string::~string(&v19);
    std::string::~string(&__rhs);
    std::__shared_ptr_access<Gadget,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Gadget,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 32));
    Entity::getScene((const Entity *const)&__a);
    v11 = std::operator!=<Scene>(&__a, 0LL);
    std::shared_ptr<Scene>::~shared_ptr(&__a);
    if ( v11 )
    {
      v12 = std::__shared_ptr_access<Gadget,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Gadget,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 32));
      if ( *(_BYTE *)(((unsigned __int64)v12 >> 3) + 0x7FFF8000) )
        __asan_report_load8();
      v13 = *(_QWORD *)v12->baseclass_0 + 128LL;
      if ( *(_BYTE *)((v13 >> 3) + 0x7FFF8000) )
        __asan_report_load8();
      (*(void (__fastcall **)(std::__shared_ptr_access<Gadget,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *, VisionContext *))v13)(
        v12,
        &VisionContext::miss_context);
    }
    v6 = 0;
    SceneHandler::~SceneHandler((SceneHandler *const)(v3 + 208));
    proto::ExecuteGadgetLuaRsp::~ExecuteGadgetLuaRsp((proto::ExecuteGadgetLuaRsp *const)(v3 + 64));
    proto::ExecuteGadgetLuaReq::~ExecuteGadgetLuaReq((proto::ExecuteGadgetLuaReq *const)(v3 + 128));
  }
  std::shared_ptr<Gadget>::~shared_ptr((std::shared_ptr<Gadget> *const)(v3 + 32));
  result = v6;
  if ( v20 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8014) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF801C) = 0LL;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8020) = -168430091;
  }
  return result;
};

// Line 10682: range 0000000017D7923C-0000000017D792DE
void __cdecl procDestroyItemRegister::procDestroyItemRegister(procDestroyItemRegister *const this)
{
  std::function<int(GmContext&,const std::vector<std::string>&,std::string&)> *v1; // rax
  std::allocator<char> __a; // [rsp+1Fh] [rbp-31h] BYREF
  std::string __k; // [rsp+20h] [rbp-30h] BYREF

  std::allocator<char>::allocator(&__a);
  std::string::basic_string<std::allocator<char>>(&__k, "DESTROY_ITEM", &__a);
  v1 = std::unordered_map<std::string,std::function<int ()(GmContext &,std::vector<std::string> const&,std::string&)>>::operator[](
         &GmUtils::op_func_map[abi:cxx11],
         &__k);
  std::function<int ()(GmContext &,std::vector<std::string> const&,std::string&)>::operator=<int (&)(GmContext &,std::vector<std::string> const&,std::string&)>(
    v1,
    (int (*)(GmContext *, const std::vector<std::string> *, std::string *))procDestroyItem);
  std::string::~string(&__k);
  std::allocator<char>::~allocator(&__a);
};

// Line 10683: range 0000000017C1953E-0000000017C1998E
int32_t __cdecl procDestroyItem(GmContext *context, const std::vector<std::string> *param_vec, std::string *ret_msg)
{
  unsigned __int64 v3; // r13
  __int64 v4; // rax
  _DWORD *v5; // r12
  int32_t M_array_high; // r14d
  const std::string *v7; // rax
  const std::string *v8; // rax
  PlayerItemComp *ItemComp; // rax
  int32_t result; // eax
  std::initializer_list<long unsigned int> __l; // [rsp+0h] [rbp-1A0h]
  std::allocator<long unsigned int> __a; // [rsp+3Fh] [rbp-161h] BYREF
  std::initializer_list<unsigned int> v14; // [rsp+40h] [rbp-160h] BYREF
  char v15[336]; // [rsp+50h] [rbp-150h] BYREF

  v3 = (unsigned __int64)v15;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_3(288LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "5 48 4 11 count:10694 64 8 10 guid:10690 96 24 14 guid_vec:10698 160 24 15 count_vec:10699 224 2"
                        "4 24 add_item_param_vec:10701";
  *(_QWORD *)(v3 + 16) = procDestroyItem;
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = -234556943;
  v5[536862722] = -218959360;
  v5[536862723] = -234881024;
  v5[536862724] = -218959118;
  v5[536862725] = -234881024;
  v5[536862726] = -218959118;
  v5[536862727] = -218103808;
  v5[536862728] = -202116109;
  if ( std::vector<std::string>::size(param_vec) > 1 )
  {
    *(_QWORD *)(v3 + 64) = 0LL;
    v7 = std::vector<std::string>::operator[](param_vec, 0LL);
    HIDWORD(v14._M_array) = common::tools::StringUtils::strToNum<unsigned long>(v7, (unsigned __int64 *)(v3 + 64), 1);
    if ( HIDWORD(v14._M_array) )
    {
      M_array_high = HIDWORD(v14._M_array);
    }
    else
    {
      *(_DWORD *)(v3 + 48) = 0;
      v8 = std::vector<std::string>::operator[](param_vec, 1uLL);
      HIDWORD(v14._M_array) = common::tools::StringUtils::strToNum<unsigned int>(v8, (unsigned int *)(v3 + 48), 1);
      if ( HIDWORD(v14._M_array) )
      {
        M_array_high = HIDWORD(v14._M_array);
      }
      else
      {
        v14._M_len = *(_QWORD *)(v3 + 64);
        __l._M_array = &v14._M_len;
        __l._M_len = 1LL;
        std::allocator<unsigned long>::allocator(&__a);
        std::vector<unsigned long>::vector((std::vector<long unsigned int> *const)(v3 + 96), __l, &__a);
        std::allocator<unsigned long>::~allocator(&__a);
        LODWORD(v14._M_array) = *(_DWORD *)(v3 + 48);
        std::allocator<unsigned int>::allocator((std::allocator<unsigned int> *const)&__a);
        std::vector<unsigned int>::vector(
          (std::vector<unsigned int> *const)(v3 + 160),
          (std::initializer_list<unsigned int>)__PAIR128__(1LL, &v14),
          (const std::vector<unsigned int>::allocator_type *)&__a);
        std::allocator<unsigned int>::~allocator((std::allocator<unsigned int> *const)&__a);
        std::vector<ItemParam>::vector((std::vector<ItemParam> *const)(v3 + 224));
        if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
          __asan_report_load8();
        ItemComp = Player::getItemComp(context->player);
        PlayerItemComp::destroyItemAndReturnMaterial(
          ItemComp,
          (const std::vector<long unsigned int> *)(v3 + 96),
          (const std::vector<unsigned int> *)(v3 + 160),
          (std::vector<ItemParam> *)(v3 + 224));
        M_array_high = 0;
        std::vector<ItemParam>::~vector((std::vector<ItemParam> *const)(v3 + 224));
        std::vector<unsigned int>::~vector((std::vector<unsigned int> *const)(v3 + 160));
        std::vector<unsigned long>::~vector((std::vector<long unsigned int> *const)(v3 + 96));
      }
    }
  }
  else
  {
    std::string::operator=(ret_msg, "param not enough");
    M_array_high = -1;
  }
  result = M_array_high;
  if ( v15 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8010) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8018) = 0LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8020) = 0;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8020) = -168430091;
  }
  return result;
};

// Line 10707: range 0000000017D792E0-0000000017D79382
void __cdecl procFashionRegister::procFashionRegister(procFashionRegister *const this)
{
  std::function<int(GmContext&,const std::vector<std::string>&,std::string&)> *v1; // rax
  std::allocator<char> __a; // [rsp+1Fh] [rbp-31h] BYREF
  std::string __k; // [rsp+20h] [rbp-30h] BYREF

  std::allocator<char>::allocator(&__a);
  std::string::basic_string<std::allocator<char>>(&__k, "FASHION", &__a);
  v1 = std::unordered_map<std::string,std::function<int ()(GmContext &,std::vector<std::string> const&,std::string&)>>::operator[](
         &GmUtils::op_func_map[abi:cxx11],
         &__k);
  std::function<int ()(GmContext &,std::vector<std::string> const&,std::string&)>::operator=<int (&)(GmContext &,std::vector<std::string> const&,std::string&)>(
    v1,
    (int (*)(GmContext *, const std::vector<std::string> *, std::string *))procFashion);
  std::string::~string(&__k);
  std::allocator<char>::~allocator(&__a);
};

// Line 10708: range 0000000017C1998F-0000000017C19FEC
int32_t __cdecl procFashion(GmContext *context, const std::vector<std::string> *param_vec, std::string *ret_msg)
{
  unsigned __int64 v3; // r13
  __int64 v4; // rax
  _DWORD *v5; // r14
  const std::string *v6; // rax
  const std::string *v7; // rax
  const std::string *v8; // rax
  int32_t v9; // r12d
  PlayerAvatarComp *AvatarComp; // rax
  const std::string *v11; // rax
  const std::string *v12; // rax
  PlayerAvatarComp *v13; // rax
  const std::string *v14; // rax
  const std::string *v15; // rax
  const std::string *v16; // rax
  std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v17; // rax
  unsigned __int64 v18; // rdx
  std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v19; // rax
  FashionComp *FashionComp; // rax
  const std::string *v21; // rax
  const std::string *v22; // rax
  PlayerAvatarComp *v23; // rax
  int32_t result; // eax
  int32_t ret_1; // [rsp+24h] [rbp-9Ch]
  int32_t ret_0; // [rsp+28h] [rbp-98h]
  int32_t ret; // [rsp+2Ch] [rbp-94h]
  char v29[144]; // [rsp+30h] [rbp-90h] BYREF

  v3 = (unsigned __int64)v29;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_1(96LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "2 48 4 17 flycloak_id:10748 64 16 16 avatar_ptr:10752";
  *(_QWORD *)(v3 + 16) = procFashion;
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = -234556943;
  v5[536862722] = -202178560;
  if ( !std::vector<std::string>::size(param_vec) )
    goto LABEL_41;
  v6 = std::vector<std::string>::operator[](param_vec, 0LL);
  if ( std::operator==<char>(v6, "GAIN") )
  {
    if ( std::vector<std::string>::size(param_vec) > 2 )
    {
      v7 = std::vector<std::string>::operator[](param_vec, 1uLL);
      if ( std::operator==<char>(v7, "FLYCLOAK") )
      {
        *(_DWORD *)(v3 + 48) = 0;
        v8 = std::vector<std::string>::operator[](param_vec, 2uLL);
        ret = common::tools::StringUtils::strToNum<unsigned int>(v8, (unsigned int *)(v3 + 48), 1);
        if ( ret )
        {
          v9 = ret;
        }
        else
        {
          if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
            __asan_report_load8();
          AvatarComp = Player::getAvatarComp(context->player);
          v9 = PlayerAvatarComp::addFlycloak(AvatarComp, *(_DWORD *)(v3 + 48), 0x26u);
        }
      }
      else
      {
        v11 = std::vector<std::string>::operator[](param_vec, 1uLL);
        if ( std::operator==<char>(v11, "COSTUME") )
        {
          *(_DWORD *)(v3 + 48) = 0;
          v12 = std::vector<std::string>::operator[](param_vec, 2uLL);
          ret_0 = common::tools::StringUtils::strToNum<unsigned int>(v12, (unsigned int *)(v3 + 48), 1);
          if ( ret_0 )
          {
            v9 = ret_0;
          }
          else
          {
            if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
              __asan_report_load8();
            v13 = Player::getAvatarComp(context->player);
            v9 = PlayerAvatarComp::addCostume(v13, *(_DWORD *)(v3 + 48), 0x26u);
          }
        }
        else
        {
          v9 = 0;
        }
      }
      goto LABEL_47;
    }
LABEL_41:
    std::string::operator=(ret_msg, "param not enough");
    v9 = -1;
    goto LABEL_47;
  }
  v14 = std::vector<std::string>::operator[](param_vec, 0LL);
  if ( std::operator==<char>(v14, "WEAR") )
  {
    if ( std::vector<std::string>::size(param_vec) <= 2 )
      goto LABEL_41;
    v15 = std::vector<std::string>::operator[](param_vec, 1uLL);
    if ( std::operator==<char>(v15, "FLYCLOAK") )
    {
      *(_DWORD *)(v3 + 48) = 0;
      v16 = std::vector<std::string>::operator[](param_vec, 2uLL);
      ret_1 = common::tools::StringUtils::strToNum<unsigned int>(v16, (unsigned int *)(v3 + 48), 1);
      if ( ret_1 )
      {
        v9 = ret_1;
      }
      else
      {
        if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
          __asan_report_load8();
        Player::getCurAvatar((Player *const)(v3 + 64));
        if ( std::operator==<Avatar>(0LL, (const std::shared_ptr<Avatar> *)(v3 + 64)) )
        {
          v9 = -1;
        }
        else
        {
          v17 = std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 64));
          if ( *(_BYTE *)(((unsigned __int64)v17 >> 3) + 0x7FFF8000) )
            __asan_report_load8();
          v18 = *(_QWORD *)v17->baseclass_0 + 400LL;
          if ( *(_BYTE *)((v18 >> 3) + 0x7FFF8000) )
            __asan_report_load8();
          if ( (*(unsigned int (__fastcall **)(std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *))v18)(v17) == 1 )
          {
            v19 = std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 64));
            FashionComp = Avatar::getFashionComp(v19);
            v9 = FashionComp::wearFlycloak(FashionComp, *(_DWORD *)(v3 + 48));
          }
          else
          {
            std::string::operator=(ret_msg, "only formal avatar can change flycloak");
            v9 = -1;
          }
        }
        std::shared_ptr<Avatar>::~shared_ptr((std::shared_ptr<Avatar> *const)(v3 + 64));
      }
    }
    else
    {
      v9 = 0;
    }
  }
  else
  {
    v21 = std::vector<std::string>::operator[](param_vec, 0LL);
    if ( !std::operator==<char>(v21, "CLEAR") )
      goto LABEL_46;
    if ( std::vector<std::string>::size(param_vec) <= 1 )
      goto LABEL_41;
    v22 = std::vector<std::string>::operator[](param_vec, 1uLL);
    if ( !std::operator==<char>(v22, "COSTUME") )
    {
LABEL_46:
      std::string::operator=(ret_msg, &off_26364780);
      v9 = -1;
      goto LABEL_47;
    }
    if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
      __asan_report_load8();
    v23 = Player::getAvatarComp(context->player);
    PlayerAvatarComp::gmClearCostume(v23);
    v9 = 0;
  }
LABEL_47:
  result = v9;
  if ( v29 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8008) = 0;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8008) = -168430091;
  }
  return result;
};

// Line 10787: range 0000000017D79384-0000000017D79426
void __cdecl procAddDebugWatcherRegister::procAddDebugWatcherRegister(procAddDebugWatcherRegister *const this)
{
  std::function<int(GmContext&,const std::vector<std::string>&,std::string&)> *v1; // rax
  std::allocator<char> __a; // [rsp+1Fh] [rbp-31h] BYREF
  std::string __k; // [rsp+20h] [rbp-30h] BYREF

  std::allocator<char>::allocator(&__a);
  std::string::basic_string<std::allocator<char>>(&__k, "ADD_DEBUG_WATCHER", &__a);
  v1 = std::unordered_map<std::string,std::function<int ()(GmContext &,std::vector<std::string> const&,std::string&)>>::operator[](
         &GmUtils::op_func_map[abi:cxx11],
         &__k);
  std::function<int ()(GmContext &,std::vector<std::string> const&,std::string&)>::operator=<int (&)(GmContext &,std::vector<std::string> const&,std::string&)>(
    v1,
    (int (*)(GmContext *, const std::vector<std::string> *, std::string *))procAddDebugWatcher);
  std::string::~string(&__k);
  std::allocator<char>::~allocator(&__a);
};

// Line 10788: range 0000000017C19FED-0000000017C1A4FF
int32_t __cdecl procAddDebugWatcher(
        GmContext *context,
        const std::vector<std::string> *param_vec,
        std::string *ret_msg)
{
  unsigned __int64 v3; // r13
  __int64 v4; // rax
  _DWORD *v5; // r12
  unsigned int *v6; // r8
  unsigned int *v7; // r9
  int32_t v8; // r14d
  const std::string *v9; // rax
  PlayerWatcherComp *WatcherComp; // rax
  std::__shared_ptr_access<BaseWatcher,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v11; // rax
  void (__fastcall **vptr_DescribalBase)(std::string *, std::__shared_ptr_access<BaseWatcher,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *); // rdx
  int32_t result; // eax
  size_t i; // [rsp+20h] [rbp-190h]
  TxtConfigMgr *txt_config_mgr; // [rsp+28h] [rbp-188h]
  std::shared_ptr<Config> v17; // [rsp+30h] [rbp-180h] BYREF
  std::string __rhs; // [rsp+40h] [rbp-170h] BYREF
  std::string v19; // [rsp+60h] [rbp-150h] BYREF
  char v20[304]; // [rsp+80h] [rbp-130h] BYREF

  v3 = (unsigned __int64)v20;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_2(256LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "5 32 4 16 watcher_id:10794 48 4 18 trigger_type:10795 64 4 14 progress:10796 80 16 17 watcher_pt"
                        "r:10824 112 112 12 config:10807";
  *(_QWORD *)(v3 + 16) = procAddDebugWatcher;
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = -234556924;
  v5[536862722] = 61956;
  v5[536862723] = 62194;
  v5[536862727] = -202116109;
  if ( std::vector<std::string>::size(param_vec) > 2 )
  {
    *(_DWORD *)(v3 + 32) = 0;
    *(_DWORD *)(v3 + 48) = 0;
    *(_DWORD *)(v3 + 64) = 0;
    if ( common::tools::StringUtils::strVecToNum<0u,unsigned int,unsigned int &,unsigned int &>(
           param_vec,
           (unsigned int *)(v3 + 32),
           (unsigned int *)(v3 + 48),
           (unsigned int *)(v3 + 64),
           v6,
           v7) )
    {
      std::string::operator=(ret_msg, &unk_263660A0);
      v8 = -1;
    }
    else if ( *(_DWORD *)(v3 + 32) <= 0x3E8u )
    {
      data::WatcherConfig::WatcherConfig((data::WatcherConfig *const)(v3 + 112));
      *(_DWORD *)(v3 + 120) = *(_DWORD *)(v3 + 32);
      *(_DWORD *)(v3 + 136) = *(_DWORD *)(v3 + 48);
      *(_DWORD *)(v3 + 192) = *(_DWORD *)(v3 + 64);
      for ( i = 3LL; i < std::vector<std::string>::size(&context->raw_param_vec); ++i )
      {
        v9 = std::vector<std::string>::operator[](&context->raw_param_vec, i);
        std::vector<std::string>::emplace_back<std::string const&>((std::vector<std::string> *const)(v3 + 144), v9, v9);
      }
      std::vector<std::string>::resize((std::vector<std::string> *const)(v3 + 144), 5uLL);
      ServiceBox::findService<GameserverService>();
      GameserverService::getConfig((GameserverService *const)&v17);
      txt_config_mgr = &std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false> *const)&v17)->design_config.txt_config_mgr;
      std::shared_ptr<Config>::~shared_ptr(&v17);
      if ( WatcherExcelConfigMgr::rewriteAndCheckWatcherParam(
             &txt_config_mgr->watcher_config_mgr,
             txt_config_mgr,
             (WatcherConfig *)(v3 + 112)) )
      {
        std::string::operator=(ret_msg, &unk_26366160);
        v8 = -1;
      }
      else
      {
        if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
          __asan_report_load8();
        WatcherComp = Player::getWatcherComp(context->player);
        PlayerWatcherComp::addWatcher((PlayerWatcherComp *const)(v3 + 80), (const WatcherConfig *)WatcherComp, v3 + 112);
        if ( std::operator==<BaseWatcher>(0LL, (const std::shared_ptr<BaseWatcher> *)(v3 + 80)) )
        {
          std::string::operator=(ret_msg, &unk_263661C0);
          v8 = -1;
        }
        else
        {
          v11 = std::__shared_ptr_access<BaseWatcher,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<BaseWatcher,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 80));
          if ( *(_BYTE *)(((unsigned __int64)v11 >> 3) + 0x7FFF8000) )
            __asan_report_load8();
          vptr_DescribalBase = (void (__fastcall **)(std::string *, std::__shared_ptr_access<BaseWatcher,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *))v11->_vptr_DescribalBase;
          if ( *(_BYTE *)(((unsigned __int64)v11->_vptr_DescribalBase >> 3) + 0x7FFF8000) )
            __asan_report_load8();
          (*vptr_DescribalBase)(&__rhs, v11);
          std::operator+<char>(&v19, aDebugWatcher_1, &__rhs);
          std::string::operator=(ret_msg, &v19);
          std::string::~string(&v19);
          std::string::~string(&__rhs);
          v8 = 0;
        }
        std::shared_ptr<BaseWatcher>::~shared_ptr((std::shared_ptr<BaseWatcher> *const)(v3 + 80));
      }
      data::WatcherConfig::~WatcherConfig((data::WatcherConfig *const)(v3 + 112));
    }
    else
    {
      std::string::operator=(ret_msg, &unk_26366100);
      v8 = -1;
    }
  }
  else
  {
    std::string::operator=(ret_msg, &unk_26366040);
    v8 = -1;
  }
  result = v8;
  if ( v20 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF801C) = 0;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 10834: range 0000000017D79428-0000000017D794CA
void __cdecl procDelDebugWatcherRegister::procDelDebugWatcherRegister(procDelDebugWatcherRegister *const this)
{
  std::function<int(GmContext&,const std::vector<std::string>&,std::string&)> *v1; // rax
  std::allocator<char> __a; // [rsp+1Fh] [rbp-31h] BYREF
  std::string __k; // [rsp+20h] [rbp-30h] BYREF

  std::allocator<char>::allocator(&__a);
  std::string::basic_string<std::allocator<char>>(&__k, "DEL_DEBUG_WATCHER", &__a);
  v1 = std::unordered_map<std::string,std::function<int ()(GmContext &,std::vector<std::string> const&,std::string&)>>::operator[](
         &GmUtils::op_func_map[abi:cxx11],
         &__k);
  std::function<int ()(GmContext &,std::vector<std::string> const&,std::string&)>::operator=<int (&)(GmContext &,std::vector<std::string> const&,std::string&)>(
    v1,
    (int (*)(GmContext *, const std::vector<std::string> *, std::string *))procDelDebugWatcher);
  std::string::~string(&__k);
  std::allocator<char>::~allocator(&__a);
};

// Line 10835: range 0000000017C1A500-0000000017C1A7B5
int32_t __cdecl procDelDebugWatcher(
        GmContext *context,
        const std::vector<std::string> *param_vec,
        std::string *ret_msg)
{
  unsigned __int64 v3; // r12
  __int64 v4; // rax
  _DWORD *v5; // r13
  int32_t v6; // r14d
  PlayerWatcherComp *WatcherComp; // rax
  common::tools::StringStream<common::tools::FixedBuffer<4096> > *v8; // rax
  common::tools::StringStream<common::tools::FixedBuffer<4096> > *v9; // rax
  common::tools::StringStream<common::tools::FixedBuffer<4096> > *v10; // rax
  int32_t result; // eax
  int ret; // [rsp+2Ch] [rbp-B4h]
  std::string v14; // [rsp+30h] [rbp-B0h] BYREF
  char v15[144]; // [rsp+50h] [rbp-90h] BYREF

  v3 = (unsigned __int64)v15;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_1(96LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "2 48 4 16 watcher_id:10841 64 16 8 ss:10853";
  *(_QWORD *)(v3 + 16) = procDelDebugWatcher;
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = -234556943;
  v5[536862722] = -202178560;
  if ( std::vector<std::string>::size(param_vec) )
  {
    *(_DWORD *)(v3 + 48) = 0;
    if ( common::tools::StringUtils::strVecToNum<0u,unsigned int>(param_vec, (unsigned int *)(v3 + 48)) )
    {
      std::string::operator=(ret_msg, &unk_26366320);
      v6 = -1;
    }
    else if ( *(_DWORD *)(v3 + 48) <= 0x3E8u )
    {
      if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
        __asan_report_load8();
      WatcherComp = Player::getWatcherComp(context->player);
      ret = PlayerWatcherComp::delWatcher(WatcherComp, *(_DWORD *)(v3 + 48));
      common::tools::StringStream<common::tools::FixedBuffer<4096>>::StringStream((common::tools::StringStream<common::tools::FixedBuffer<4096> > *const)(v3 + 64));
      v8 = common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(
             (common::tools::StringStream<common::tools::FixedBuffer<4096> > *const)(v3 + 64),
             aDebugWatcher_2);
      v9 = common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(v8, *(_DWORD *)(v3 + 48));
      v10 = common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(v9, " ret:");
      common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(v10, ret);
      common::tools::StringStream<common::tools::FixedBuffer<4096>>::str[abi:cxx11](
        &v14,
        (common::tools::StringStream<common::tools::FixedBuffer<4096> > *const)(v3 + 64));
      std::string::operator=(ret_msg, &v14);
      std::string::~string(&v14);
      v6 = 0;
      common::tools::StringStream<common::tools::FixedBuffer<4096>>::~StringStream((common::tools::StringStream<common::tools::FixedBuffer<4096> > *const)(v3 + 64));
    }
    else
    {
      std::string::operator=(ret_msg, &unk_26366100);
      v6 = -1;
    }
  }
  else
  {
    std::string::operator=(ret_msg, &unk_263662C0);
    v6 = -1;
  }
  result = v6;
  if ( v15 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8008) = 0;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8008) = -168430091;
  }
  return result;
};

// Line 10860: range 0000000017D794CC-0000000017D7956E
void __cdecl procPrintWatcherRegister::procPrintWatcherRegister(procPrintWatcherRegister *const this)
{
  std::function<int(GmContext&,const std::vector<std::string>&,std::string&)> *v1; // rax
  std::allocator<char> __a; // [rsp+1Fh] [rbp-31h] BYREF
  std::string __k; // [rsp+20h] [rbp-30h] BYREF

  std::allocator<char>::allocator(&__a);
  std::string::basic_string<std::allocator<char>>(&__k, "PRINT_WATCHER", &__a);
  v1 = std::unordered_map<std::string,std::function<int ()(GmContext &,std::vector<std::string> const&,std::string&)>>::operator[](
         &GmUtils::op_func_map[abi:cxx11],
         &__k);
  std::function<int ()(GmContext &,std::vector<std::string> const&,std::string&)>::operator=<int (&)(GmContext &,std::vector<std::string> const&,std::string&)>(
    v1,
    (int (*)(GmContext *, const std::vector<std::string> *, std::string *))procPrintWatcher);
  std::string::~string(&__k);
  std::allocator<char>::~allocator(&__a);
};

// Line 10861: range 0000000017C1A7B6-0000000017C1AAC0
int32_t __cdecl procPrintWatcher(GmContext *context, const std::vector<std::string> *param_vec, std::string *ret_msg)
{
  unsigned __int64 v3; // rbx
  __int64 v4; // rax
  _DWORD *v5; // r12
  int32_t v6; // r14d
  uint32_t WatcherComp; // eax
  std::__shared_ptr_access<BaseWatcher,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v8; // rax
  void (__fastcall **vptr_DescribalBase)(char *, std::__shared_ptr_access<BaseWatcher,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *); // rdx
  int32_t result; // eax
  char v12[32]; // [rsp+20h] [rbp-B0h] BYREF
  char v13[144]; // [rsp+40h] [rbp-90h] BYREF

  v3 = (unsigned __int64)v13;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_1(96LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "2 48 4 16 watcher_id:10867 64 16 17 watcher_ptr:10873";
  *(_QWORD *)(v3 + 16) = procPrintWatcher;
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = -234556943;
  v5[536862722] = -202178560;
  if ( std::vector<std::string>::size(param_vec) )
  {
    *(_DWORD *)(v3 + 48) = 0;
    if ( common::tools::StringUtils::strVecToNum<0u,unsigned int>(param_vec, (unsigned int *)(v3 + 48)) )
    {
      std::string::operator=(ret_msg, &unk_26366320);
      v6 = -1;
    }
    else
    {
      if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
        __asan_report_load8();
      WatcherComp = (unsigned int)Player::getWatcherComp(context->player);
      PlayerWatcherComp::findWatcher((PlayerWatcherComp *const)(v3 + 64), WatcherComp);
      if ( std::operator==<BaseWatcher>((const std::shared_ptr<BaseWatcher> *)(v3 + 64), 0LL) )
      {
        std::string::operator=(ret_msg, &unk_26366460);
        v6 = -1;
      }
      else
      {
        v8 = std::__shared_ptr_access<BaseWatcher,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<BaseWatcher,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 64));
        if ( *(_BYTE *)(((unsigned __int64)v8 >> 3) + 0x7FFF8000) )
          __asan_report_load8();
        vptr_DescribalBase = (void (__fastcall **)(char *, std::__shared_ptr_access<BaseWatcher,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *))v8->_vptr_DescribalBase;
        if ( *(_BYTE *)(((unsigned __int64)v8->_vptr_DescribalBase >> 3) + 0x7FFF8000) )
          __asan_report_load8();
        (*vptr_DescribalBase)(v12, v8);
        std::string::operator=(ret_msg, v12);
        std::string::~string(v12);
        if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
          __asan_report_load8();
        Player::notifyGMServerLog(context->player, SERVER_LOG_LEVEL, LOG_LEVEL_INFO_0, ret_msg);
        v6 = 0;
      }
      std::shared_ptr<BaseWatcher>::~shared_ptr((std::shared_ptr<BaseWatcher> *const)(v3 + 64));
    }
  }
  else
  {
    std::string::operator=(ret_msg, "param not enough");
    v6 = -1;
  }
  result = v6;
  if ( v13 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8008) = 0;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8008) = -168430091;
  }
  return result;
};

// Line 10884: range 0000000017D79570-0000000017D79612
void __cdecl procPrintAllWatcherRegister::procPrintAllWatcherRegister(procPrintAllWatcherRegister *const this)
{
  std::function<int(GmContext&,const std::vector<std::string>&,std::string&)> *v1; // rax
  std::allocator<char> __a; // [rsp+1Fh] [rbp-31h] BYREF
  std::string __k; // [rsp+20h] [rbp-30h] BYREF

  std::allocator<char>::allocator(&__a);
  std::string::basic_string<std::allocator<char>>(&__k, "PRINT_ALL_WATCHER", &__a);
  v1 = std::unordered_map<std::string,std::function<int ()(GmContext &,std::vector<std::string> const&,std::string&)>>::operator[](
         &GmUtils::op_func_map[abi:cxx11],
         &__k);
  std::function<int ()(GmContext &,std::vector<std::string> const&,std::string&)>::operator=<int (&)(GmContext &,std::vector<std::string> const&,std::string&)>(
    v1,
    (int (*)(GmContext *, const std::vector<std::string> *, std::string *))procPrintAllWatcher);
  std::string::~string(&__k);
  std::allocator<char>::~allocator(&__a);
};

// Line 10885: range 0000000017C1AAC1-0000000017C1AEBF
int32_t __cdecl procPrintAllWatcher(
        GmContext *context,
        const std::vector<std::string> *param_vec,
        std::string *ret_msg)
{
  std::set<data::WatcherTriggerType> *v3; // rbx
  __int64 v4; // rax
  _DWORD *v5; // r12
  common::milog::MiLogStream *v6; // r14
  data::WatcherTriggerType *v7; // rax
  data::WatcherTriggerType *v8; // rdx
  common::milog::MiLogStream *v9; // rax
  common::milog::MiLogStream *v10; // rax
  int32_t result; // eax
  unsigned int val; // [rsp+28h] [rbp-118h] BYREF
  data::WatcherTriggerType watcher_trigger_type_0; // [rsp+2Ch] [rbp-114h]
  std::set<data::WatcherTriggerType>::iterator __for_begin_0; // [rsp+30h] [rbp-110h] BYREF
  std::set<data::WatcherTriggerType>::iterator __for_end_0; // [rsp+38h] [rbp-108h] BYREF
  std::unordered_map<data::WatcherTriggerType,std::function<std::shared_ptr<BaseWatcher>()>>::iterator __for_end; // [rsp+40h] [rbp-100h] BYREF
  std::unordered_map<data::WatcherTriggerType,std::function<std::shared_ptr<BaseWatcher>()>> *__for_range; // [rsp+48h] [rbp-F8h]
  std::set<data::WatcherTriggerType> *__for_range_0; // [rsp+50h] [rbp-F0h]
  const std::pair<const data::WatcherTriggerType,std::function<std::shared_ptr<BaseWatcher>()> > *v19; // [rsp+58h] [rbp-E8h]
  std::tuple_element<0,const std::pair<const data::WatcherTriggerType,std::function<std::shared_ptr<BaseWatcher>()> > >::type *watcher_trigger_type; // [rsp+60h] [rbp-E0h]
  std::tuple_element<1,const std::pair<const data::WatcherTriggerType,std::function<std::shared_ptr<BaseWatcher>()> > >::type *_; // [rsp+68h] [rbp-D8h]
  common::milog::MiLogStream v22; // [rsp+70h] [rbp-D0h] BYREF
  char v23[176]; // [rsp+90h] [rbp-B0h] BYREF

  v3 = (std::set<data::WatcherTriggerType> *)v23;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_1(128LL);
    if ( v4 )
      v3 = (std::set<data::WatcherTriggerType> *)v4;
  }
  *(_QWORD *)v3->_M_t._M_impl.gap0 = 1102416563LL;
  *(_QWORD *)&v3->_M_t._M_impl._M_header._M_color = "1 48 48 30 watcher_trigger_type_set:10886";
  v3->_M_t._M_impl._M_header._M_parent = (std::_Rb_tree_node_base::_Base_ptr)procPrintAllWatcher;
  v5 = (_DWORD *)((unsigned __int64)v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = 61937;
  v5[536862723] = -202116109;
  std::set<data::WatcherTriggerType>::set(v3 + 1);
  __for_range = &WatcherFactory::getInstance()->create_func_map_;
  __for_end_0._M_node = (std::_Rb_tree_const_iterator<data::WatcherTriggerType>::_Base_ptr)std::unordered_map<data::WatcherTriggerType,std::function<std::shared_ptr<BaseWatcher> ()(void)>>::begin(__for_range)._M_cur;
  __for_end._M_cur = std::unordered_map<data::WatcherTriggerType,std::function<std::shared_ptr<BaseWatcher> ()(void)>>::end(__for_range)._M_cur;
  while ( std::__detail::operator!=<std::pair<data::WatcherTriggerType const,std::function<std::shared_ptr<BaseWatcher> ()(void)>>,false>(
            (const std::__detail::_Node_iterator_base<std::pair<const data::WatcherTriggerType,std::function<std::shared_ptr<BaseWatcher>()> >,false> *)&__for_end_0,
            &__for_end) )
  {
    v19 = std::__detail::_Node_iterator<std::pair<data::WatcherTriggerType const,std::function<std::shared_ptr<BaseWatcher> ()(void)>>,false,false>::operator*((const std::__detail::_Node_iterator<std::pair<const data::WatcherTriggerType,std::function<std::shared_ptr<BaseWatcher>()> >,false,false> *const)&__for_end_0);
    watcher_trigger_type = std::get<0ul,data::WatcherTriggerType const,std::function<std::shared_ptr<BaseWatcher> ()(void)>>(v19);
    _ = (std::tuple_element<1,const std::pair<const data::WatcherTriggerType,std::function<std::shared_ptr<BaseWatcher>()> > >::type *)std::get<1ul,data::WatcherTriggerType const,std::function<std::shared_ptr<BaseWatcher> ()(void)>>(v19);
    std::set<data::WatcherTriggerType>::insert(v3 + 1, watcher_trigger_type);
    std::__detail::_Node_iterator<std::pair<data::WatcherTriggerType const,std::function<std::shared_ptr<BaseWatcher> ()(void)>>,false,false>::operator++((std::__detail::_Node_iterator<std::pair<const data::WatcherTriggerType,std::function<std::shared_ptr<BaseWatcher>()> >,false,false> *const)&__for_end_0);
  }
  common::milog::MiLogStream::create(
    &v22,
    &common::milog::MiLogDefault::default_log_obj_,
    1u,
    "./src/player/gm/player_gm_comp.cpp",
    "procPrintAllWatcher",
    10891);
  v6 = common::milog::MiLogStream::operator<<<char [21],(char *[21])0>(&v22, (const char (*)[21])"total watcher count:");
  __for_end._M_cur = (std::__detail::_Node_iterator_base<std::pair<const data::WatcherTriggerType,std::function<std::shared_ptr<BaseWatcher>()> >,false>::__node_type *)std::set<data::WatcherTriggerType>::size(v3 + 1);
  common::milog::MiLogStream::operator<<<unsigned long,(unsigned long *)0>(v6, (const unsigned __int64 *)&__for_end);
  common::milog::MiLogStream::~MiLogStream(&v22);
  __for_range_0 = v3 + 1;
  __for_begin_0._M_node = std::set<data::WatcherTriggerType>::begin(v3 + 1)._M_node;
  __for_end_0._M_node = std::set<data::WatcherTriggerType>::end(__for_range_0)._M_node;
  while ( std::operator!=(&__for_begin_0, &__for_end_0) )
  {
    v7 = (data::WatcherTriggerType *)std::_Rb_tree_const_iterator<data::WatcherTriggerType>::operator*(&__for_begin_0);
    v8 = v7;
    if ( *(_BYTE *)(((unsigned __int64)v7 >> 3) + 0x7FFF8000) != 0
      && (char)(((unsigned __int8)v7 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)v7 >> 3) + 0x7FFF8000) )
    {
      __asan_report_load4(v7);
    }
    watcher_trigger_type_0 = *v8;
    common::milog::MiLogStream::create(
      &v22,
      &common::milog::MiLogDefault::default_log_obj_,
      1u,
      "./src/player/gm/player_gm_comp.cpp",
      "procPrintAllWatcher",
      10894);
    __for_end._M_cur = (std::__detail::_Node_iterator_base<std::pair<const data::WatcherTriggerType,std::function<std::shared_ptr<BaseWatcher>()> >,false>::__node_type *)data::enumValToStr(watcher_trigger_type_0);
    v9 = common::milog::MiLogStream::operator<<<char const*,(char const**)0>(&v22, (const char *const *)&__for_end);
    v10 = common::milog::MiLogStream::operator<<<char [2],(char *[2])0>(v9, (const char (*)[2])"\t");
    val = watcher_trigger_type_0;
    common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v10, &val);
    common::milog::MiLogStream::~MiLogStream(&v22);
    std::_Rb_tree_const_iterator<data::WatcherTriggerType>::operator++(&__for_begin_0);
  }
  std::set<data::WatcherTriggerType>::~set(v3 + 1);
  result = 0;
  if ( v23 == (char *)v3 )
  {
    *(_QWORD *)(((unsigned __int64)v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_DWORD *)(((unsigned __int64)v3 >> 3) + 0x7FFF800C) = 0;
  }
  else
  {
    *(_QWORD *)v3->_M_t._M_impl.gap0 = 1172321806LL;
    *(_QWORD *)(((unsigned __int64)v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)(((unsigned __int64)v3 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 10899: range 0000000017D7962E-0000000017D796D0
void __cdecl procPrintH5ActivityRegister::procPrintH5ActivityRegister(procPrintH5ActivityRegister *const this)
{
  std::function<int(GmContext&,const std::vector<std::string>&,std::string&)> *v1; // rax
  std::allocator<char> __a; // [rsp+1Fh] [rbp-31h] BYREF
  std::string __k; // [rsp+20h] [rbp-30h] BYREF

  std::allocator<char>::allocator(&__a);
  std::string::basic_string<std::allocator<char>>(&__k, "PRINT_H5_ACTIVITY", &__a);
  v1 = std::unordered_map<std::string,std::function<int ()(GmContext &,std::vector<std::string> const&,std::string&)>>::operator[](
         &GmUtils::op_func_map[abi:cxx11],
         &__k);
  std::function<int ()(GmContext &,std::vector<std::string> const&,std::string&)>::operator=<int (&)(GmContext &,std::vector<std::string> const&,std::string&)>(
    v1,
    (int (*)(GmContext *, const std::vector<std::string> *, std::string *))procPrintH5Activity);
  std::string::~string(&__k);
  std::allocator<char>::~allocator(&__a);
};

// Line 10900: range 0000000017C1AEC0-0000000017C1B5D7
int32_t __cdecl procPrintH5Activity(
        GmContext *context,
        const std::vector<std::string> *param_vec,
        std::string *ret_msg)
{
  int32_t v3; // r14d
  unsigned __int64 v4; // r13
  __int64 v5; // rax
  _DWORD *v6; // r12
  PlayerH5ActivityComp *H5ActivityComp; // rax
  unsigned __int64 v8; // rdx
  proto::PlayerH5ActivityCompBin *v9; // rax
  PlayerH5ActivityComp *v10; // rax
  std::remove_reference<std::string&>::type *v11; // rdx
  int v13; // [rsp+0h] [rbp-520h]
  int v14; // [rsp+4h] [rbp-51Ch]
  _BOOL4 v15; // [rsp+4h] [rbp-51Ch]
  int v16; // [rsp+4h] [rbp-51Ch]
  std::string *ret_msga; // [rsp+8h] [rbp-518h]
  GmContext *contexta; // [rsp+18h] [rbp-508h]
  std::string __lhs; // [rsp+20h] [rbp-500h] BYREF
  std::string __rhs; // [rsp+40h] [rbp-4E0h] BYREF
  std::string v21; // [rsp+60h] [rbp-4C0h] BYREF
  google::protobuf::util::Status other; // [rsp+80h] [rbp-4A0h] BYREF
  char v23[1136]; // [rsp+B0h] [rbp-470h] BYREF

  contexta = context;
  ret_msga = ret_msg;
  v4 = (unsigned __int64)v23;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v5 = __asan_stack_malloc_5(1088LL);
    if ( v5 )
      v4 = v5;
  }
  *(_QWORD *)v4 = 1102416563LL;
  *(_QWORD *)(v4 + 8) = "6 48 4 13 options:10902 64 24 24 h5_schedule_id_vec:10919 128 32 17 json_string:10901 192 40 16 "
                        "status_ret:10906 272 120 12 result:10925 432 520 21 player_data_bin:10909";
  *(_QWORD *)(v4 + 16) = procPrintH5Activity;
  v6 = (_DWORD *)(v4 >> 3);
  v6[536862720] = -235802127;
  v6[536862721] = -234556943;
  v6[536862722] = -234881024;
  v6[536862723] = -218959118;
  v6[536862725] = -218959118;
  v6[536862727] = -218959360;
  v6[536862728] = 62194;
  v6[536862732] = -218959360;
  v6[536862733] = 62194;
  v6[536862749] = -218103808;
  v6[536862750] = -202116109;
  v6[536862751] = -202116109;
  v6[536862752] = -202116109;
  v6[536862753] = -202116109;
  std::string::basic_string(v4 + 128);
  google::protobuf::util::JsonPrintOptions::JsonPrintOptions((google::protobuf::util::JsonPrintOptions *const)(v4 + 48));
  *(_BYTE *)(v4 + 49) = 1;
  *(_BYTE *)(v4 + 51) = 1;
  google::protobuf::util::Status::Status((google::protobuf::util::Status *const)(v4 + 192));
  if ( std::vector<std::string>::empty(param_vec) )
  {
    proto::PlayerDataBin::PlayerDataBin((proto::PlayerDataBin *const)(v4 + 432));
    if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
      __asan_report_load8();
    H5ActivityComp = Player::getH5ActivityComp(context->player);
    if ( *(_BYTE *)(((unsigned __int64)H5ActivityComp >> 3) + 0x7FFF8000) )
      __asan_report_load8();
    v8 = (unsigned __int64)(H5ActivityComp->_vptr_PlayerCompBase + 3);
    if ( *(_BYTE *)((v8 >> 3) + 0x7FFF8000) )
      __asan_report_load8();
    if ( (*(unsigned int (__fastcall **)(PlayerH5ActivityComp *, unsigned __int64))v8)(H5ActivityComp, v4 + 432) )
    {
      std::string::operator=(ret_msga, "toBin fail");
      v3 = -1;
      v14 = 0;
    }
    else
    {
      v9 = (proto::PlayerH5ActivityCompBin *)proto::PlayerDataBin::h5_activity_bin((const proto::PlayerDataBin *const)(v4 + 432));
      google::protobuf::util::MessageToJsonString(
        &other,
        v9,
        v13,
        ret_msga,
        (int)param_vec,
        (char)context,
        (int)__lhs._M_dataplus._M_p,
        (void *)__lhs._M_string_length);
      google::protobuf::util::Status::operator=((google::protobuf::util::Status *const)(v4 + 192), &other);
      google::protobuf::util::Status::~Status(&other);
      v14 = 1;
    }
    proto::PlayerDataBin::~PlayerDataBin((proto::PlayerDataBin *const)(v4 + 432));
    if ( v14 == 1 )
    {
LABEL_25:
      if ( !google::protobuf::util::Status::ok((const google::protobuf::util::Status *const)(v4 + 192)) )
      {
        google::protobuf::util::Status::ToString[abi:cxx11](&__rhs, v4 + 192);
        std::literals::string_literals::operator"" s[abi:cxx11](&__lhs, "MessageToJsonString fail! ", 0x1AuLL);
        std::operator+<char>(&v21, &__lhs, &__rhs);
        std::string::operator=(ret_msga, &v21);
        std::string::~string(&v21);
        std::string::~string(&__lhs);
        std::string::~string(&__rhs);
        v3 = -1;
      }
      else
      {
        v11 = std::move<std::string &>((std::string *)(v4 + 128));
        std::string::operator=(ret_msga, v11);
        if ( *(_BYTE *)(((unsigned __int64)&contexta->player >> 3) + 0x7FFF8000) )
          __asan_report_load8();
        Player::notifyGMServerLog(contexta->player, SERVER_LOG_NONE, LOG_LEVEL_INFO_0, ret_msga);
        v3 = 0;
      }
    }
  }
  else
  {
    std::vector<unsigned int>::vector((std::vector<unsigned int> *const)(v4 + 64));
    if ( common::tools::StringUtils::strVecToNumVec<unsigned int>(param_vec, (std::vector<unsigned int> *)(v4 + 64)) )
    {
      std::string::operator=(ret_msga, "strVecToNumVec fail");
      v3 = -1;
      v15 = 0;
    }
    else
    {
      proto::PlayerMemH5ActivityDataResult::PlayerMemH5ActivityDataResult((proto::PlayerMemH5ActivityDataResult *const)(v4 + 272));
      if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
        __asan_report_load8();
      v10 = Player::getH5ActivityComp(context->player);
      if ( PlayerH5ActivityComp::getPlayerMemH5ActivityData(
             v10,
             (const std::vector<unsigned int> *)(v4 + 64),
             (proto::PlayerMemH5ActivityDataResult *)(v4 + 272)) )
      {
        std::string::operator=(ret_msga, "getPlayerMemH5ActivityData fail");
        v3 = -1;
        v16 = 0;
      }
      else
      {
        google::protobuf::util::MessageToJsonString(
          &other,
          (google::protobuf::Message *)(v4 + 272),
          v13,
          ret_msga,
          (int)param_vec,
          (char)context,
          (int)__lhs._M_dataplus._M_p,
          (void *)__lhs._M_string_length);
        google::protobuf::util::Status::operator=((google::protobuf::util::Status *const)(v4 + 192), &other);
        google::protobuf::util::Status::~Status(&other);
        v16 = 1;
      }
      proto::PlayerMemH5ActivityDataResult::~PlayerMemH5ActivityDataResult((proto::PlayerMemH5ActivityDataResult *const)(v4 + 272));
      v15 = v16 == 1;
    }
    std::vector<unsigned int>::~vector((std::vector<unsigned int> *const)(v4 + 64));
    if ( v15 )
      goto LABEL_25;
  }
  google::protobuf::util::Status::~Status((google::protobuf::util::Status *const)(v4 + 192));
  std::string::~string((void *)(v4 + 128));
  if ( v23 == (char *)v4 )
  {
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8008) = 0LL;
    *(_DWORD *)((v4 >> 3) + 0x7FFF8014) = 0;
    *(_QWORD *)((v4 >> 3) + 0x7FFF801C) = 0LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8030) = 0LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8074) = 0LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF807C) = 0LL;
    *(_DWORD *)((v4 >> 3) + 0x7FFF8084) = 0;
  }
  else
  {
    *(_QWORD *)v4 = 1172321806LL;
    __asan_stack_free_5(v4, 1088LL, v23);
  }
  return v3;
};

// Line 10943: range 0000000017D796D2-0000000017D79774
void __cdecl procPersonalLineRegister::procPersonalLineRegister(procPersonalLineRegister *const this)
{
  std::function<int(GmContext&,const std::vector<std::string>&,std::string&)> *v1; // rax
  std::allocator<char> __a; // [rsp+1Fh] [rbp-31h] BYREF
  std::string __k; // [rsp+20h] [rbp-30h] BYREF

  std::allocator<char>::allocator(&__a);
  std::string::basic_string<std::allocator<char>>(&__k, "PERSONAL_LINE", &__a);
  v1 = std::unordered_map<std::string,std::function<int ()(GmContext &,std::vector<std::string> const&,std::string&)>>::operator[](
         &GmUtils::op_func_map[abi:cxx11],
         &__k);
  std::function<int ()(GmContext &,std::vector<std::string> const&,std::string&)>::operator=<int (&)(GmContext &,std::vector<std::string> const&,std::string&)>(
    v1,
    (int (*)(GmContext *, const std::vector<std::string> *, std::string *))procPersonalLine);
  std::string::~string(&__k);
  std::allocator<char>::~allocator(&__a);
};

// Line 10944: range 0000000017C1B5D8-0000000017C1B7B6
int32_t __cdecl procPersonalLine(GmContext *context, const std::vector<std::string> *param_vec, std::string *ret_msg)
{
  unsigned __int64 v3; // rbx
  __int64 v4; // rax
  unsigned __int64 v5; // r12
  int32_t result; // eax
  const std::string *v7; // rax
  const std::string *v8; // rax
  PlayerPersonalLineComp *PersonalLineComp; // rax
  int32_t ret; // [rsp+2Ch] [rbp-64h]
  char v12[96]; // [rsp+30h] [rbp-60h] BYREF

  v3 = (unsigned __int64)v12;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_0(64LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "1 32 4 22 personal_line_id:10957";
  *(_QWORD *)(v3 + 16) = procPersonalLine;
  v5 = v3 >> 3;
  *(_DWORD *)(v5 + 2147450880) = -235802127;
  *(_DWORD *)(v5 + 2147450884) = -202116348;
  if ( !std::vector<std::string>::size(param_vec) )
    goto LABEL_5;
  v7 = std::vector<std::string>::operator[](param_vec, 0LL);
  if ( std::operator==<char>(v7, "UNLOCK") )
  {
    if ( std::vector<std::string>::size(param_vec) <= 1 )
    {
LABEL_5:
      std::string::operator=(ret_msg, "param not enough");
      result = -1;
      goto LABEL_14;
    }
    *(_DWORD *)(v3 + 32) = 0;
    v8 = std::vector<std::string>::operator[](param_vec, 1uLL);
    ret = common::tools::StringUtils::strToNum<unsigned int>(v8, (unsigned int *)(v3 + 32), 1);
    if ( ret )
    {
      result = ret;
    }
    else
    {
      if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
        __asan_report_load8();
      PersonalLineComp = Player::getPersonalLineComp(context->player);
      result = PlayerPersonalLineComp::unlockPersonalLineByGm(PersonalLineComp, *(_DWORD *)(v3 + 32));
    }
  }
  else
  {
    result = 0;
  }
LABEL_14:
  if ( v12 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 10966: range 0000000017D79776-0000000017D79818
void __cdecl procCodexRegister::procCodexRegister(procCodexRegister *const this)
{
  std::function<int(GmContext&,const std::vector<std::string>&,std::string&)> *v1; // rax
  std::allocator<char> __a; // [rsp+1Fh] [rbp-31h] BYREF
  std::string __k; // [rsp+20h] [rbp-30h] BYREF

  std::allocator<char>::allocator(&__a);
  std::string::basic_string<std::allocator<char>>(&__k, "CODEX", &__a);
  v1 = std::unordered_map<std::string,std::function<int ()(GmContext &,std::vector<std::string> const&,std::string&)>>::operator[](
         &GmUtils::op_func_map[abi:cxx11],
         &__k);
  std::function<int ()(GmContext &,std::vector<std::string> const&,std::string&)>::operator=<int (&)(GmContext &,std::vector<std::string> const&,std::string&)>(
    v1,
    (int (*)(GmContext *, const std::vector<std::string> *, std::string *))procCodex);
  std::string::~string(&__k);
  std::allocator<char>::~allocator(&__a);
};

// Line 10967: range 0000000017C1B7B7-0000000017C1BBA9
int32_t __cdecl procCodex(GmContext *context, const std::vector<std::string> *param_vec, std::string *ret_msg)
{
  unsigned __int64 v3; // r12
  __int64 v4; // rax
  _DWORD *v5; // r13
  int32_t result; // eax
  const std::string *v7; // rax
  const std::string *v8; // rax
  PlayerCodexComp *CodexComp; // rax
  const std::string *v11; // rax
  const std::string *v12; // rax
  PlayerCodexComp *v13; // rax
  const std::string *v14; // rax
  PlayerCodexComp *v15; // rax
  int32_t ret_0; // [rsp+28h] [rbp-88h]
  int32_t ret; // [rsp+2Ch] [rbp-84h]
  int32_t reta; // [rsp+2Ch] [rbp-84h]
  char v20[128]; // [rsp+30h] [rbp-80h] BYREF

  v3 = (unsigned __int64)v20;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_1(96LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "2 48 4 10 type:10997 64 4 14 codex_id:10997";
  *(_QWORD *)(v3 + 16) = procCodex;
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = -234556943;
  v5[536862722] = -202116348;
  if ( !std::vector<std::string>::size(param_vec) )
    goto LABEL_5;
  v7 = std::vector<std::string>::operator[](param_vec, 0LL);
  if ( std::operator==<char>(v7, "ACTIVE") )
  {
    if ( std::vector<std::string>::size(param_vec) > 1 )
    {
      v8 = std::vector<std::string>::operator[](param_vec, 1uLL);
      if ( std::operator==<char>(v8, _f.gap0) )
      {
        if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
          __asan_report_load8();
        CodexComp = Player::getCodexComp(context->player);
        result = PlayerCodexComp::unlockAllCodexByGm(CodexComp);
        goto LABEL_32;
      }
    }
    if ( std::vector<std::string>::size(param_vec) <= 2 )
    {
LABEL_5:
      std::string::operator=(ret_msg, "param not enough");
      result = -1;
      goto LABEL_32;
    }
    *(_DWORD *)(v3 + 48) = 0;
    *(_DWORD *)(v3 + 64) = 0;
    v11 = std::vector<std::string>::operator[](param_vec, 1uLL);
    ret = common::tools::StringUtils::strToNum<unsigned int>(v11, (unsigned int *)(v3 + 48), 1);
    if ( ret )
    {
      result = ret;
      goto LABEL_32;
    }
    v12 = std::vector<std::string>::operator[](param_vec, 2uLL);
    reta = common::tools::StringUtils::strToNum<unsigned int>(v12, (unsigned int *)(v3 + 64), 1);
    if ( reta )
    {
      result = reta;
      goto LABEL_32;
    }
    if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
      __asan_report_load8();
    v13 = Player::getCodexComp(context->player);
    PlayerCodexComp::gmActiveCodex(v13, *(_DWORD *)(v3 + 48), *(_DWORD *)(v3 + 64));
LABEL_31:
    result = 0;
    goto LABEL_32;
  }
  v14 = std::vector<std::string>::operator[](param_vec, 0LL);
  if ( !std::operator==<char>(v14, "REMOVE") )
    goto LABEL_31;
  *(_DWORD *)(v3 + 48) = 0;
  *(_DWORD *)(v3 + 64) = 0;
  ret_0 = common::tools::StringUtils::strVecToNum<1u,unsigned int,unsigned int &>(
            param_vec,
            (unsigned int *)(v3 + 48),
            (unsigned int *)(v3 + 64),
            (unsigned int *)(v3 + 48));
  if ( ret_0 )
  {
    result = ret_0;
  }
  else
  {
    if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
      __asan_report_load8();
    v15 = Player::getCodexComp(context->player);
    if ( !PlayerCodexComp::gmRemoveCodex(v15, *(_DWORD *)(v3 + 48), *(_DWORD *)(v3 + 64)) )
      std::string::operator=(ret_msg, "remove success");
    result = 0;
  }
LABEL_32:
  if ( v20 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8008) = 0;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8008) = -168430091;
  }
  return result;
};

// Line 11008: range 0000000017D7981A-0000000017D798BC
void __cdecl procSalesmanRegister::procSalesmanRegister(procSalesmanRegister *const this)
{
  std::function<int(GmContext&,const std::vector<std::string>&,std::string&)> *v1; // rax
  std::allocator<char> __a; // [rsp+1Fh] [rbp-31h] BYREF
  std::string __k; // [rsp+20h] [rbp-30h] BYREF

  std::allocator<char>::allocator(&__a);
  std::string::basic_string<std::allocator<char>>(&__k, "SALESMAN", &__a);
  v1 = std::unordered_map<std::string,std::function<int ()(GmContext &,std::vector<std::string> const&,std::string&)>>::operator[](
         &GmUtils::op_func_map[abi:cxx11],
         &__k);
  std::function<int ()(GmContext &,std::vector<std::string> const&,std::string&)>::operator=<int (&)(GmContext &,std::vector<std::string> const&,std::string&)>(
    v1,
    (int (*)(GmContext *, const std::vector<std::string> *, std::string *))procSalesman);
  std::string::~string(&__k);
  std::allocator<char>::~allocator(&__a);
};

// Line 11009: range 0000000017C1BBAA-0000000017C1BF27
int32_t __cdecl procSalesman(GmContext *context, const std::vector<std::string> *param_vec, std::string *ret_msg)
{
  unsigned __int64 v3; // rbx
  __int64 v4; // rax
  _DWORD *v5; // r12
  int32_t v6; // r14d
  const std::string *v7; // rax
  const std::string *v8; // rax
  const std::string *v10; // rax
  const std::string *v11; // rax
  SalesmanActivity *v12; // rax
  const std::string *v13; // rax
  int32_t result; // eax
  std::string v16; // [rsp+20h] [rbp-D0h] BYREF
  std::string v17; // [rsp+40h] [rbp-B0h] BYREF
  char v18[144]; // [rsp+60h] [rbp-90h] BYREF

  v3 = (unsigned __int64)v18;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_1(96LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "2 48 4 13 talk_id:11023 64 16 18 activity_ptr:11010";
  *(_QWORD *)(v3 + 16) = procSalesman;
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = -234556943;
  v5[536862722] = -202178560;
  if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
    __asan_report_load8();
  Player::getActivityComp(context->player);
  PlayerActivityComp::findOpenningActivity<SalesmanActivity>((PlayerActivityComp *const)(v3 + 64));
  if ( std::operator==<SalesmanActivity>(0LL, (const std::shared_ptr<SalesmanActivity> *)(v3 + 64)) )
  {
    std::string::operator=(ret_msg, "no openning salesman activity");
    v6 = -1;
  }
  else if ( std::vector<std::string>::size(param_vec) )
  {
    v7 = std::vector<std::string>::operator[](param_vec, 0LL);
    if ( common::tools::StringUtils::isStartsWith(v7, "CLEA")
      && (v8 = std::vector<std::string>::operator[](param_vec, 0LL), common::tools::StringUtils::isEndsWith(v8, "TALK")) )
    {
      *(_DWORD *)(v3 + 48) = 0;
      if ( std::vector<std::string>::size(param_vec) > 1
        && (v10 = std::vector<std::string>::operator[](param_vec, 1uLL),
            common::tools::StringUtils::strToNum<unsigned int>(v10, (unsigned int *)(v3 + 48), 1)) )
      {
        v11 = std::vector<std::string>::operator[](param_vec, 1uLL);
        std::operator+<char>(&v16, "invalid talk_id:", v11);
        std::string::operator=(ret_msg, &v16);
        std::string::~string(&v16);
        v6 = -1;
      }
      else
      {
        v12 = std::__shared_ptr_access<SalesmanActivity,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<SalesmanActivity,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 64));
        SalesmanActivity::clearTalkRecordByGm(v12, *(_DWORD *)(v3 + 48));
        v6 = 0;
      }
    }
    else
    {
      v13 = std::vector<std::string>::operator[](param_vec, 0LL);
      std::operator+<char>(&v17, "unknown param:", v13);
      std::string::operator=(ret_msg, &v17);
      std::string::~string(&v17);
      v6 = -1;
    }
  }
  else
  {
    std::string::operator=(ret_msg, "param not enough");
    v6 = -1;
  }
  std::shared_ptr<SalesmanActivity>::~shared_ptr((std::shared_ptr<SalesmanActivity> *const)(v3 + 64));
  result = v6;
  if ( v18 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8008) = 0;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8008) = -168430091;
  }
  return result;
};

// Line 11042: range 0000000017D798BE-0000000017D79960
void __cdecl procShowAvatarBornTimeRegister::procShowAvatarBornTimeRegister(procShowAvatarBornTimeRegister *const this)
{
  std::function<int(GmContext&,const std::vector<std::string>&,std::string&)> *v1; // rax
  std::allocator<char> __a; // [rsp+1Fh] [rbp-31h] BYREF
  std::string __k; // [rsp+20h] [rbp-30h] BYREF

  std::allocator<char>::allocator(&__a);
  std::string::basic_string<std::allocator<char>>(&__k, "SHOW_AVATAR_BORN_TIME", &__a);
  v1 = std::unordered_map<std::string,std::function<int ()(GmContext &,std::vector<std::string> const&,std::string&)>>::operator[](
         &GmUtils::op_func_map[abi:cxx11],
         &__k);
  std::function<int ()(GmContext &,std::vector<std::string> const&,std::string&)>::operator=<int (&)(GmContext &,std::vector<std::string> const&,std::string&)>(
    v1,
    (int (*)(GmContext *, const std::vector<std::string> *, std::string *))procShowAvatarBornTime);
  std::string::~string(&__k);
  std::allocator<char>::~allocator(&__a);
};

// Line 11043: range 0000000017C1BF28-0000000017C1BF7F
int32_t __cdecl procShowAvatarBornTime(
        GmContext *context,
        const std::vector<std::string> *param_vec,
        std::string *ret_msg)
{
  PlayerAvatarComp *AvatarComp; // rax

  if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
    __asan_report_load8();
  AvatarComp = Player::getAvatarComp(context->player);
  PlayerAvatarComp::gmShowAvatarsBornTime(AvatarComp);
  return 0;
};

// Line 11049: range 0000000017D79962-0000000017D79A04
void __cdecl forgePointRegister::forgePointRegister(forgePointRegister *const this)
{
  std::function<int(GmContext&,const std::vector<std::string>&,std::string&)> *v1; // rax
  std::allocator<char> __a; // [rsp+1Fh] [rbp-31h] BYREF
  std::string __k; // [rsp+20h] [rbp-30h] BYREF

  std::allocator<char>::allocator(&__a);
  std::string::basic_string<std::allocator<char>>(&__k, "FORGE_POINT", &__a);
  v1 = std::unordered_map<std::string,std::function<int ()(GmContext &,std::vector<std::string> const&,std::string&)>>::operator[](
         &GmUtils::op_func_map[abi:cxx11],
         &__k);
  std::function<int ()(GmContext &,std::vector<std::string> const&,std::string&)>::operator=<int (&)(GmContext &,std::vector<std::string> const&,std::string&)>(
    v1,
    (int (*)(GmContext *, const std::vector<std::string> *, std::string *))forgePoint);
  std::string::~string(&__k);
  std::allocator<char>::~allocator(&__a);
};

// Line 11050: range 0000000017C1BF80-0000000017C1C48B
int32_t __cdecl forgePoint(GmContext *context, const std::vector<std::string> *param_vec, std::string *ret_msg)
{
  unsigned __int64 v3; // rbx
  __int64 v4; // rax
  unsigned __int64 v5; // r12
  int32_t result; // eax
  const std::string *v7; // rax
  PlayerForgeComp *ForgeComp; // rax
  PlayerForgeComp *v9; // rax
  const std::string *v10; // rax
  PlayerForgeComp *v11; // rax
  common::milog::MiLogStream *v12; // rdx
  PlayerForgeComp *v13; // rax
  PlayerForgeComp *v14; // rax
  unsigned int forge_point_1; // [rsp+24h] [rbp-8Ch]
  unsigned int forge_point_0; // [rsp+28h] [rbp-88h]
  unsigned int forge_point; // [rsp+2Ch] [rbp-84h]
  common::milog::MiLogStream v19; // [rsp+30h] [rbp-80h] BYREF
  char v20[96]; // [rsp+50h] [rbp-60h] BYREF

  v3 = (unsigned __int64)v20;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_0(64LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "1 32 4 21 set_forge_point:11071";
  *(_QWORD *)(v3 + 16) = forgePoint;
  v5 = v3 >> 3;
  *(_DWORD *)(v5 + 2147450880) = -235802127;
  *(_DWORD *)(v5 + 2147450884) = -202116348;
  if ( std::vector<std::string>::empty(param_vec) )
  {
    common::milog::MiLogStream::create(
      &v19,
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/player/gm/player_gm_comp.cpp",
      "forgePoint",
      11053);
    common::milog::MiLogStream::operator<<<char [17],(char *[17])0>(&v19, (const char (*)[17])"param not enough");
    common::milog::MiLogStream::~MiLogStream(&v19);
    result = -1;
    goto LABEL_24;
  }
  v7 = std::vector<std::string>::operator[](param_vec, 0LL);
  if ( std::operator==<char>(v7, "REFRESH") )
  {
    if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
      __asan_report_load8();
    ForgeComp = Player::getForgeComp(context->player);
    PlayerForgeComp::doRefreshForgePointByGm(ForgeComp);
    std::string::operator=(ret_msg, "FORGE_POINT REFRESH SUCCEED, NOW: ");
    if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
      __asan_report_load8();
    v9 = Player::getForgeComp(context->player);
    forge_point = PlayerForgeComp::getCurForgePoint(v9);
    std::to_string((std::string *)&v19, forge_point);
    std::string::operator+=(ret_msg, &v19);
    std::string::~string(&v19);
  }
  else
  {
    v10 = std::vector<std::string>::operator[](param_vec, 0LL);
    if ( std::operator==<char>(v10, "PRINT") )
    {
      if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
        __asan_report_load8();
      v11 = Player::getForgeComp(context->player);
      forge_point_0 = PlayerForgeComp::getCurForgePoint(v11);
      std::string::operator=(ret_msg, "FORGE_POINT: ");
      std::to_string((std::string *)&v19, forge_point_0);
      std::string::operator+=(ret_msg, &v19);
      std::string::~string(&v19);
    }
    else
    {
      *(_DWORD *)(v3 + 32) = 0;
      if ( common::tools::StringUtils::strVecToNum<0u,unsigned int>(param_vec, (unsigned int *)(v3 + 32)) )
      {
        common::milog::MiLogStream::create(
          &v19,
          &common::milog::MiLogDefault::default_log_obj_,
          3u,
          "./src/player/gm/player_gm_comp.cpp",
          "forgePoint",
          11074);
        v12 = common::milog::MiLogStream::operator<<<char [15],(char *[15])0>(
                &v19,
                (const char (*)[15])"invalid param:");
        common::milog::MiLogStream::operator<<<std::string>(v12, param_vec);
        common::milog::MiLogStream::~MiLogStream(&v19);
        result = -1;
        goto LABEL_24;
      }
      if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
        __asan_report_load8();
      v13 = Player::getForgeComp(context->player);
      PlayerForgeComp::setCurForgePointByGm(v13, *(_DWORD *)(v3 + 32));
      if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
        __asan_report_load8();
      v14 = Player::getForgeComp(context->player);
      forge_point_1 = PlayerForgeComp::getCurForgePoint(v14);
      std::string::operator=(ret_msg, "FORGE_POINT: ");
      std::to_string((std::string *)&v19, forge_point_1);
      std::string::operator+=(ret_msg, &v19);
      std::string::~string(&v19);
    }
  }
  result = 0;
LABEL_24:
  if ( v20 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 11085: range 0000000017D79A06-0000000017D79AA8
void __cdecl AreaExploreRegister::AreaExploreRegister(AreaExploreRegister *const this)
{
  std::function<int(GmContext&,const std::vector<std::string>&,std::string&)> *v1; // rax
  std::allocator<char> __a; // [rsp+1Fh] [rbp-31h] BYREF
  std::string __k; // [rsp+20h] [rbp-30h] BYREF

  std::allocator<char>::allocator(&__a);
  std::string::basic_string<std::allocator<char>>(&__k, "AREA_EXPLORE", &__a);
  v1 = std::unordered_map<std::string,std::function<int ()(GmContext &,std::vector<std::string> const&,std::string&)>>::operator[](
         &GmUtils::op_func_map[abi:cxx11],
         &__k);
  std::function<int ()(GmContext &,std::vector<std::string> const&,std::string&)>::operator=<int (&)(GmContext &,std::vector<std::string> const&,std::string&)>(
    v1,
    (int (*)(GmContext *, const std::vector<std::string> *, std::string *))AreaExplore);
  std::string::~string(&__k);
  std::allocator<char>::~allocator(&__a);
};

// Line 11086: range 0000000017C1C48C-0000000017C1CC68
int32_t __cdecl AreaExplore(GmContext *context, const std::vector<std::string> *param_vec, std::string *ret_msg)
{
  unsigned __int64 v3; // r12
  __int64 v4; // rax
  _DWORD *v5; // r13
  int32_t v6; // r14d
  const std::string *v7; // rax
  const std::string *v8; // rax
  common::milog::MiLogStream *v10; // rdx
  std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v11; // rax
  std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v12; // rax
  Scene *v13; // rax
  uint32_t AreaComp; // eax
  common::milog::MiLogStream *v15; // rax
  common::milog::MiLogStream *v16; // rax
  common::milog::MiLogStream *v17; // r14
  std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v18; // rax
  Area *v19; // rax
  int32_t result; // eax
  unsigned int scene_id; // [rsp+24h] [rbp-17Ch]
  std::string v23; // [rsp+30h] [rbp-170h] BYREF
  std::string __rhs; // [rsp+50h] [rbp-150h] BYREF
  std::string v25; // [rsp+70h] [rbp-130h] BYREF
  std::string __lhs; // [rsp+90h] [rbp-110h] BYREF
  std::string v27; // [rsp+B0h] [rbp-F0h] BYREF
  common::milog::MiLogStream v28; // [rsp+D0h] [rbp-D0h] BYREF
  char v29[176]; // [rsp+F0h] [rbp-B0h] BYREF

  v3 = (unsigned __int64)v29;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_1(128LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "4 32 4 13 area_id:11093 48 4 19 explore_point:11093 64 16 19 cur_scene_ptr:11102 96 16 14 area_ptr:11122";
  *(_QWORD *)(v3 + 16) = AreaExplore;
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = -234556924;
  v5[536862722] = -219021312;
  v5[536862723] = -202178560;
  if ( std::vector<std::string>::size(param_vec) > 1 )
  {
    *(_DWORD *)(v3 + 32) = 0;
    *(_DWORD *)(v3 + 48) = 0;
    v7 = std::vector<std::string>::operator[](param_vec, 0LL);
    if ( common::tools::StringUtils::strToNum<unsigned int>(v7, (unsigned int *)(v3 + 32), 1)
      || (v8 = std::vector<std::string>::operator[](param_vec, 1uLL),
          common::tools::StringUtils::strToNum<unsigned int>(v8, (unsigned int *)(v3 + 48), 1)) )
    {
      common::milog::MiLogStream::create(
        &v28,
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/player/gm/player_gm_comp.cpp",
        "AreaExplore",
        11097);
      v10 = common::milog::MiLogStream::operator<<<char [15],(char *[15])0>(&v28, (const char (*)[15])"invalid param:");
      common::milog::MiLogStream::operator<<<std::string>(v10, param_vec);
      common::milog::MiLogStream::~MiLogStream(&v28);
      v6 = -1;
    }
    else
    {
      if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
        __asan_report_load8();
      Player::getSceneComp(context->player);
      PlayerSceneComp::getCurScene((const PlayerSceneComp *const)(v3 + 64));
      if ( std::operator==<Scene>((const std::shared_ptr<Scene> *)(v3 + 64), 0LL) )
      {
        common::milog::MiLogStream::create(
          &v28,
          &common::milog::MiLogDefault::default_log_obj_,
          3u,
          "./src/player/gm/player_gm_comp.cpp",
          "AreaExplore",
          11105);
        common::milog::MiLogStream::operator<<<char [21],(char *[21])0>(&v28, (const char (*)[21])off_26366CE0);
        common::milog::MiLogStream::~MiLogStream(&v28);
        v6 = -1;
      }
      else
      {
        ServiceBox::findService<GameserverService>();
        GameserverService::getConfig((GameserverService *const)(v3 + 96));
        v11 = std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 96));
        scene_id = WorldAreaExcelConfigMgr::findSceneIdByLevel1AreaId(
                     &v11->design_config.txt_config_mgr.world_area_config_mgr,
                     *(_DWORD *)(v3 + 32));
        std::shared_ptr<Config>::~shared_ptr((std::shared_ptr<Config> *const)(v3 + 96));
        if ( scene_id )
        {
          v12 = std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 64));
          if ( scene_id == Scene::getSceneId(v12) )
          {
            v13 = std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 64));
            AreaComp = (unsigned int)Scene::getAreaComp(v13);
            SceneAreaComp::getArea((SceneAreaComp *const)(v3 + 96), AreaComp);
            if ( std::operator==<Area>((const std::shared_ptr<Area> *)(v3 + 96), 0LL) )
            {
              common::milog::MiLogStream::create(
                &v28,
                &common::milog::MiLogDefault::default_log_obj_,
                1u,
                "./src/player/gm/player_gm_comp.cpp",
                "AreaExplore",
                11125);
              v15 = common::milog::MiLogStream::operator<<<char [30],(char *[30])0>(
                      &v28,
                      (const char (*)[30])"area_ptr is nullptr, area_id:");
              v16 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                      v15,
                      (const unsigned int *)(v3 + 32));
              v17 = common::milog::MiLogStream::operator<<<char [8],(char *[8])0>(v16, (const char (*)[8])" scene:");
              v18 = std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::operator*((const std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 64));
              common::milog::MiLogStream::operator<<<Scene,(Scene*)0>(v17, v18);
              common::milog::MiLogStream::~MiLogStream(&v28);
              v6 = -1;
            }
            else
            {
              v19 = std::__shared_ptr_access<Area,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Area,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 96));
              Area::gmSetExplorePoint(v19, *(_DWORD *)(v3 + 48));
              v6 = 0;
            }
            std::shared_ptr<Area>::~shared_ptr((std::shared_ptr<Area> *const)(v3 + 96));
          }
          else
          {
            std::to_string(&v27, scene_id);
            std::to_string(&__rhs, *(_DWORD *)(v3 + 32));
            std::literals::string_literals::operator"" s[abi:cxx11](&v23, "area_id:", 8uLL);
            std::operator+<char>(&v25, &v23, &__rhs);
            std::operator+<char>(&__lhs, &v25, off_26366DA0);
            std::operator+<char>((std::string *)&v28, &__lhs, &v27);
            std::string::operator=(ret_msg, &v28);
            std::string::~string(&v28);
            std::string::~string(&__lhs);
            std::string::~string(&v25);
            std::string::~string(&v23);
            std::string::~string(&__rhs);
            std::string::~string(&v27);
            v6 = -1;
          }
        }
        else
        {
          std::to_string((std::string *)&v28, *(_DWORD *)(v3 + 32));
          std::literals::string_literals::operator"" s[abi:cxx11](&__lhs, "invalid area_id:", 0x10uLL);
          std::operator+<char>(&v27, &__lhs, (std::string *)&v28);
          std::string::operator=(ret_msg, &v27);
          std::string::~string(&v27);
          std::string::~string(&__lhs);
          std::string::~string(&v28);
          v6 = -1;
        }
      }
      std::shared_ptr<Scene>::~shared_ptr((std::shared_ptr<Scene> *const)(v3 + 64));
    }
  }
  else
  {
    common::milog::MiLogStream::create(
      &v28,
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/player/gm/player_gm_comp.cpp",
      "AreaExplore",
      11089);
    common::milog::MiLogStream::operator<<<char [17],(char *[17])0>(&v28, (const char (*)[17])"param not enough");
    common::milog::MiLogStream::~MiLogStream(&v28);
    v6 = -1;
  }
  result = v6;
  if ( v29 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 11134: range 0000000017D79AAA-0000000017D79B4C
void __cdecl ASTERRegister::ASTERRegister(ASTERRegister *const this)
{
  std::function<int(GmContext&,const std::vector<std::string>&,std::string&)> *v1; // rax
  std::allocator<char> __a; // [rsp+1Fh] [rbp-31h] BYREF
  std::string __k; // [rsp+20h] [rbp-30h] BYREF

  std::allocator<char>::allocator(&__a);
  std::string::basic_string<std::allocator<char>>(&__k, "ASTER", &__a);
  v1 = std::unordered_map<std::string,std::function<int ()(GmContext &,std::vector<std::string> const&,std::string&)>>::operator[](
         &GmUtils::op_func_map[abi:cxx11],
         &__k);
  std::function<int ()(GmContext &,std::vector<std::string> const&,std::string&)>::operator=<int (&)(GmContext &,std::vector<std::string> const&,std::string&)>(
    v1,
    (int (*)(GmContext *, const std::vector<std::string> *, std::string *))ASTER);
  std::string::~string(&__k);
  std::allocator<char>::~allocator(&__a);
};

// Line 11135: range 0000000017C1CC69-0000000017C1D105
int32_t __cdecl ASTER(GmContext *context, const std::vector<std::string> *param_vec, std::string *ret_msg)
{
  unsigned __int64 v3; // rbx
  __int64 v4; // rax
  _DWORD *v5; // r12
  int32_t refreshed; // r14d
  const std::string *v7; // rax
  const std::string *v8; // rax
  const std::string *v9; // rax
  common::milog::MiLogStream *v10; // r14
  const std::string *v11; // rax
  AsterActivity *v12; // rax
  int32_t result; // eax
  common::milog::MiLogStream v15; // [rsp+20h] [rbp-B0h] BYREF
  char v16[144]; // [rsp+40h] [rbp-90h] BYREF

  v3 = (unsigned __int64)v16;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_1(96LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "2 48 4 16 refresh_id:11163 64 16 18 activity_ptr:11136";
  *(_QWORD *)(v3 + 16) = ASTER;
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = -234556943;
  v5[536862722] = -202178560;
  if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
    __asan_report_load8();
  Player::getActivityComp(context->player);
  PlayerActivityComp::findOpenningActivity<AsterActivity>((PlayerActivityComp *const)(v3 + 64));
  if ( std::operator==<AsterActivity>(0LL, (const std::shared_ptr<AsterActivity> *)(v3 + 64)) )
  {
    std::string::operator=(ret_msg, "aster activity is not open");
    refreshed = -1;
    goto LABEL_20;
  }
  if ( std::vector<std::string>::size(param_vec) <= 1 )
  {
    common::milog::MiLogStream::create(
      &v15,
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/player/gm/player_gm_comp.cpp",
      "ASTER",
      11145);
    common::milog::MiLogStream::operator<<<char [17],(char *[17])0>(&v15, (const char (*)[17])"param not enough");
    common::milog::MiLogStream::~MiLogStream(&v15);
    refreshed = -1;
    goto LABEL_20;
  }
  v7 = std::vector<std::string>::operator[](param_vec, 0LL);
  if ( std::operator==<char>(v7, off_26366F40) )
  {
    if ( std::vector<std::string>::size(param_vec) <= 1 )
    {
      common::milog::MiLogStream::create(
        &v15,
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/player/gm/player_gm_comp.cpp",
        "ASTER",
        11153);
      common::milog::MiLogStream::operator<<<char [17],(char *[17])0>(&v15, (const char (*)[17])"param not enough");
      common::milog::MiLogStream::~MiLogStream(&v15);
      refreshed = -1;
      goto LABEL_20;
    }
    v8 = std::vector<std::string>::operator[](param_vec, 1uLL);
    if ( std::operator==<char>(v8, "REFRESH") )
    {
      if ( std::vector<std::string>::size(param_vec) > 2 )
      {
        *(_DWORD *)(v3 + 48) = 0;
        v9 = std::vector<std::string>::operator[](param_vec, 2uLL);
        if ( common::tools::StringUtils::strToNum<unsigned int>(v9, (unsigned int *)(v3 + 48), 1) )
        {
          common::milog::MiLogStream::create(
            &v15,
            &common::milog::MiLogDefault::default_log_obj_,
            3u,
            "./src/player/gm/player_gm_comp.cpp",
            "ASTER",
            11166);
          v10 = common::milog::MiLogStream::operator<<<char [15],(char *[15])0>(
                  &v15,
                  (const char (*)[15])"invalid param:");
          v11 = std::vector<std::string>::operator[](param_vec, 2uLL);
          common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v10, v11);
          common::milog::MiLogStream::~MiLogStream(&v15);
          refreshed = -1;
        }
        else
        {
          v12 = std::__shared_ptr_access<AsterActivity,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<AsterActivity,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 64));
          refreshed = AsterActivity::doRefreshAsterMidCamp(v12, *(_DWORD *)(v3 + 48));
        }
      }
      else
      {
        common::milog::MiLogStream::create(
          &v15,
          &common::milog::MiLogDefault::default_log_obj_,
          3u,
          "./src/player/gm/player_gm_comp.cpp",
          "ASTER",
          11160);
        common::milog::MiLogStream::operator<<<char [17],(char *[17])0>(&v15, (const char (*)[17])"param not enough");
        common::milog::MiLogStream::~MiLogStream(&v15);
        refreshed = -1;
      }
      goto LABEL_20;
    }
  }
  refreshed = 0;
LABEL_20:
  std::shared_ptr<AsterActivity>::~shared_ptr((std::shared_ptr<AsterActivity> *const)(v3 + 64));
  result = refreshed;
  if ( v16 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8008) = 0;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8008) = -168430091;
  }
  return result;
};

// Line 11176: range 0000000017D79B4E-0000000017D79BF0
void __cdecl EFFIGYRegister::EFFIGYRegister(EFFIGYRegister *const this)
{
  std::function<int(GmContext&,const std::vector<std::string>&,std::string&)> *v1; // rax
  std::allocator<char> __a; // [rsp+1Fh] [rbp-31h] BYREF
  std::string __k; // [rsp+20h] [rbp-30h] BYREF

  std::allocator<char>::allocator(&__a);
  std::string::basic_string<std::allocator<char>>(&__k, "EFFIGY", &__a);
  v1 = std::unordered_map<std::string,std::function<int ()(GmContext &,std::vector<std::string> const&,std::string&)>>::operator[](
         &GmUtils::op_func_map[abi:cxx11],
         &__k);
  std::function<int ()(GmContext &,std::vector<std::string> const&,std::string&)>::operator=<int (&)(GmContext &,std::vector<std::string> const&,std::string&)>(
    v1,
    (int (*)(GmContext *, const std::vector<std::string> *, std::string *))EFFIGY);
  std::string::~string(&__k);
  std::allocator<char>::~allocator(&__a);
};

// Line 11177: range 0000000017C1D106-0000000017C1D600
int32_t __cdecl EFFIGY(GmContext *context, const std::vector<std::string> *param_vec, std::string *ret_msg)
{
  unsigned __int64 v3; // r12
  __int64 v4; // rax
  _DWORD *v5; // r13
  int32_t v6; // r14d
  const std::string *v7; // rax
  const std::string *v8; // rax
  common::milog::MiLogStream *v9; // r14
  const std::string *v10; // rax
  const std::string *v11; // rax
  common::milog::MiLogStream *v12; // r14
  const std::string *v13; // rax
  EffigyActivity *v14; // rax
  const std::string *v15; // rax
  EffigyActivity *v16; // rax
  int32_t result; // eax
  common::milog::MiLogStream v19; // [rsp+20h] [rbp-B0h] BYREF
  char v20[144]; // [rsp+40h] [rbp-90h] BYREF

  v3 = (unsigned __int64)v20;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_1(96LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "3 32 4 18 challenge_id:11199 48 4 15 max_score:11206 64 16 18 activity_ptr:11178";
  *(_QWORD *)(v3 + 16) = EFFIGY;
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = -234556924;
  v5[536862722] = -202178560;
  if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
    __asan_report_load8();
  Player::getActivityComp(context->player);
  PlayerActivityComp::findOpenningActivity<EffigyActivity>((PlayerActivityComp *const)(v3 + 64));
  if ( std::operator==<EffigyActivity>(0LL, (const std::shared_ptr<EffigyActivity> *)(v3 + 64)) )
  {
    std::string::operator=(ret_msg, "effigy activity is not open");
    v6 = -1;
  }
  else if ( std::vector<std::string>::size(param_vec) > 1 )
  {
    v7 = std::vector<std::string>::operator[](param_vec, 0LL);
    if ( std::operator==<char>(v7, "PASS") )
    {
      if ( std::vector<std::string>::size(param_vec) > 2 )
      {
        *(_DWORD *)(v3 + 32) = 0;
        v8 = std::vector<std::string>::operator[](param_vec, 1uLL);
        if ( common::tools::StringUtils::strToNum<unsigned int>(v8, (unsigned int *)(v3 + 32), 1) )
        {
          common::milog::MiLogStream::create(
            &v19,
            &common::milog::MiLogDefault::default_log_obj_,
            3u,
            "./src/player/gm/player_gm_comp.cpp",
            "EFFIGY",
            11202);
          v9 = common::milog::MiLogStream::operator<<<char [15],(char *[15])0>(
                 &v19,
                 (const char (*)[15])"invalid param:");
          v10 = std::vector<std::string>::operator[](param_vec, 1uLL);
          common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v9, v10);
          common::milog::MiLogStream::~MiLogStream(&v19);
          v6 = -1;
        }
        else
        {
          *(_DWORD *)(v3 + 48) = 0;
          v11 = std::vector<std::string>::operator[](param_vec, 2uLL);
          if ( common::tools::StringUtils::strToNum<unsigned int>(v11, (unsigned int *)(v3 + 48), 1) )
          {
            common::milog::MiLogStream::create(
              &v19,
              &common::milog::MiLogDefault::default_log_obj_,
              3u,
              "./src/player/gm/player_gm_comp.cpp",
              "EFFIGY",
              11209);
            v12 = common::milog::MiLogStream::operator<<<char [15],(char *[15])0>(
                    &v19,
                    (const char (*)[15])"invalid param:");
            v13 = std::vector<std::string>::operator[](param_vec, 2uLL);
            common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v12, v13);
            common::milog::MiLogStream::~MiLogStream(&v19);
            v6 = -1;
          }
          else
          {
            v14 = std::__shared_ptr_access<EffigyActivity,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<EffigyActivity,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 64));
            v6 = EffigyActivity::setChallengeMaxScoreByGm(v14, *(_DWORD *)(v3 + 32), *(_DWORD *)(v3 + 48));
          }
        }
      }
      else
      {
        common::milog::MiLogStream::create(
          &v19,
          &common::milog::MiLogDefault::default_log_obj_,
          3u,
          "./src/player/gm/player_gm_comp.cpp",
          "EFFIGY",
          11195);
        common::milog::MiLogStream::operator<<<char [17],(char *[17])0>(&v19, (const char (*)[17])"param not enough");
        common::milog::MiLogStream::~MiLogStream(&v19);
        v6 = -1;
      }
    }
    else
    {
      v15 = std::vector<std::string>::operator[](param_vec, 0LL);
      if ( std::operator==<char>(v15, "RESET_REWARD") )
      {
        v16 = std::__shared_ptr_access<EffigyActivity,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<EffigyActivity,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 64));
        v6 = EffigyActivity::clearEffigyRewardRecordByGm(v16);
      }
      else
      {
        v6 = 0;
      }
    }
  }
  else
  {
    common::milog::MiLogStream::create(
      &v19,
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/player/gm/player_gm_comp.cpp",
      "EFFIGY",
      11187);
    common::milog::MiLogStream::operator<<<char [17],(char *[17])0>(&v19, (const char (*)[17])"param not enough");
    common::milog::MiLogStream::~MiLogStream(&v19);
    v6 = -1;
  }
  std::shared_ptr<EffigyActivity>::~shared_ptr((std::shared_ptr<EffigyActivity> *const)(v3 + 64));
  result = v6;
  if ( v20 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8008) = 0;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8008) = -168430091;
  }
  return result;
};

// Line 11223: range 0000000017D79BF2-0000000017D79C94
void __cdecl procAbilityGroupRegister::procAbilityGroupRegister(procAbilityGroupRegister *const this)
{
  std::function<int(GmContext&,const std::vector<std::string>&,std::string&)> *v1; // rax
  std::allocator<char> __a; // [rsp+1Fh] [rbp-31h] BYREF
  std::string __k; // [rsp+20h] [rbp-30h] BYREF

  std::allocator<char>::allocator(&__a);
  std::string::basic_string<std::allocator<char>>(&__k, "ABILITY_GROUP", &__a);
  v1 = std::unordered_map<std::string,std::function<int ()(GmContext &,std::vector<std::string> const&,std::string&)>>::operator[](
         &GmUtils::op_func_map[abi:cxx11],
         &__k);
  std::function<int ()(GmContext &,std::vector<std::string> const&,std::string&)>::operator=<int (&)(GmContext &,std::vector<std::string> const&,std::string&)>(
    v1,
    (int (*)(GmContext *, const std::vector<std::string> *, std::string *))procAbilityGroup);
  std::string::~string(&__k);
  std::allocator<char>::~allocator(&__a);
};

// Line 11224: range 0000000017C1D601-0000000017C1DB5E
int32_t __cdecl procAbilityGroup(GmContext *context, const std::vector<std::string> *param_vec, std::string *ret_msg)
{
  int32_t v3; // r14d
  unsigned __int64 v4; // rbx
  __int64 v5; // rax
  _DWORD *v6; // r12
  const std::string *v7; // rax
  PlayerAbilityGroupComp *v8; // rax
  int v9; // r15d
  const std::string *v10; // rax
  PlayerAbilityGroupComp *AbilityGroupComp; // rax
  PlayerAbilityGroupComp *v12; // rax
  const std::string *v13; // rax
  PlayerAbilityGroupComp *v14; // rax
  const std::string *v15; // rax
  int32_t result; // eax
  std::vector<std::string>::iterator __for_begin; // [rsp+20h] [rbp-D0h] BYREF
  std::vector<std::string>::iterator __for_end; // [rsp+28h] [rbp-C8h] BYREF
  std::vector<std::string> *__for_range; // [rsp+30h] [rbp-C0h]
  const std::string *group_name; // [rsp+38h] [rbp-B8h]
  common::milog::MiLogStream v22; // [rsp+40h] [rbp-B0h] BYREF
  char v23[144]; // [rsp+60h] [rbp-90h] BYREF

  v4 = (unsigned __int64)v23;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v5 = __asan_stack_malloc_1(96LL);
    if ( v5 )
      v4 = v5;
  }
  *(_QWORD *)v4 = 1102416563LL;
  *(_QWORD *)(v4 + 8) = "1 32 24 20 group_name_vec:11232";
  *(_QWORD *)(v4 + 16) = procAbilityGroup;
  v6 = (_DWORD *)(v4 >> 3);
  v6[536862720] = -235802127;
  v6[536862721] = -218103808;
  v6[536862722] = -202116109;
  if ( std::vector<std::string>::empty(param_vec) )
  {
    common::milog::MiLogStream::create(
      &v22,
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/player/gm/player_gm_comp.cpp",
      "procAbilityGroup",
      11227);
    common::milog::MiLogStream::operator<<<char [17],(char *[17])0>(&v22, (const char (*)[17])"param not enough");
    common::milog::MiLogStream::~MiLogStream(&v22);
    v3 = -1;
    goto LABEL_30;
  }
  v7 = std::vector<std::string>::operator[](param_vec, 0LL);
  if ( !std::operator==<char>(v7, "PRINT") )
  {
    v10 = std::vector<std::string>::operator[](param_vec, 0LL);
    if ( std::operator==<char>(v10, "ADD_TEAM") )
    {
      std::string::operator=(ret_msg, &off_26367220);
      if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
        __asan_report_load8();
      AbilityGroupComp = Player::getAbilityGroupComp(context->player);
      PlayerAbilityGroupComp::addTeamAbilityGroupByGm(AbilityGroupComp);
      if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
        __asan_report_load8();
    }
    else
    {
      v13 = std::vector<std::string>::operator[](param_vec, 0LL);
      if ( !std::operator==<char>(v13, "DEL_TEAM") )
      {
        v15 = std::vector<std::string>::operator[](param_vec, 0LL);
        std::operator+<char>((std::string *)&v22, "invalid param:", v15);
        std::string::operator=(ret_msg, &v22);
        std::string::~string(&v22);
        v3 = -1;
        goto LABEL_30;
      }
      std::string::operator=(ret_msg, &off_263672A0);
      if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
        __asan_report_load8();
      v14 = Player::getAbilityGroupComp(context->player);
      PlayerAbilityGroupComp::delTeamAbilityGroupByGm(v14);
      if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
        __asan_report_load8();
    }
    v12 = Player::getAbilityGroupComp(context->player);
    PlayerAbilityGroupComp::tryRefreshAbilityGroup(v12);
    v3 = 0;
    goto LABEL_30;
  }
  if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
    __asan_report_load8();
  v8 = Player::getAbilityGroupComp(context->player);
  PlayerAbilityGroupComp::getCurAvatarAbilityGroupsByGm[abi:cxx11]((std::vector<std::string> *)(v4 + 32), v8);
  if ( std::vector<std::string>::empty((const std::vector<std::string> *const)(v4 + 32)) )
  {
    std::string::operator=(ret_msg, &off_26367180);
    v3 = 0;
    v9 = 0;
  }
  else
  {
    __for_range = (std::vector<std::string> *)(v4 + 32);
    __for_begin._M_current = std::vector<std::string>::begin((std::vector<std::string> *const)(v4 + 32))._M_current;
    __for_end._M_current = std::vector<std::string>::end((std::vector<std::string> *const)(v4 + 32))._M_current;
    while ( __gnu_cxx::operator!=<std::string *,std::vector<std::string>>(&__for_begin, &__for_end) )
    {
      group_name = __gnu_cxx::__normal_iterator<std::string *,std::vector<std::string>>::operator*(&__for_begin);
      std::operator+<char>((std::string *)&v22, group_name, " ");
      std::string::operator+=(ret_msg, &v22);
      std::string::~string(&v22);
      __gnu_cxx::__normal_iterator<std::string *,std::vector<std::string>>::operator++(&__for_begin);
    }
    v9 = 1;
  }
  std::vector<std::string>::~vector((std::vector<std::string> *const)(v4 + 32));
  if ( v9 == 1 )
    v3 = 0;
LABEL_30:
  result = v3;
  if ( v23 == (char *)v4 )
  {
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0LL;
    *(_DWORD *)((v4 >> 3) + 0x7FFF8008) = 0;
  }
  else
  {
    *(_QWORD *)v4 = 1172321806LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v4 >> 3) + 0x7FFF8008) = -168430091;
  }
  return result;
};

// Line 11265: range 0000000017D79C96-0000000017D79D38
void __cdecl procSceneTagRegister::procSceneTagRegister(procSceneTagRegister *const this)
{
  std::function<int(GmContext&,const std::vector<std::string>&,std::string&)> *v1; // rax
  std::allocator<char> __a; // [rsp+1Fh] [rbp-31h] BYREF
  std::string __k; // [rsp+20h] [rbp-30h] BYREF

  std::allocator<char>::allocator(&__a);
  std::string::basic_string<std::allocator<char>>(&__k, "SCENE_TAG", &__a);
  v1 = std::unordered_map<std::string,std::function<int ()(GmContext &,std::vector<std::string> const&,std::string&)>>::operator[](
         &GmUtils::op_func_map[abi:cxx11],
         &__k);
  std::function<int ()(GmContext &,std::vector<std::string> const&,std::string&)>::operator=<int (&)(GmContext &,std::vector<std::string> const&,std::string&)>(
    v1,
    (int (*)(GmContext *, const std::vector<std::string> *, std::string *))procSceneTag);
  std::string::~string(&__k);
  std::allocator<char>::~allocator(&__a);
};

// Line 11266: range 0000000017C1DB5F-0000000017C1F40A
int32_t __cdecl procSceneTag(GmContext *context, const std::vector<std::string> *param_vec, std::string *ret_msg)
{
  int32_t v3; // r14d
  unsigned __int64 v4; // r13
  __int64 v5; // rax
  _DWORD *v6; // r12
  const std::string *v7; // rax
  Scene *v8; // rax
  const std::string *v9; // rax
  const std::string *v10; // rax
  const std::string *v12; // rax
  std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v13; // rax
  const std::string *v14; // rax
  PlayerSceneComp *SceneComp; // rdi
  uint32_t v16; // edx
  common::tools::StringStream<common::tools::FixedBuffer<4096> > *v17; // rax
  PlayerSceneComp *p_scene_id; // rdi
  uint32_t v19; // edx
  common::tools::StringStream<common::tools::FixedBuffer<4096> > *v20; // rax
  const std::string *v21; // rax
  int v22; // r15d
  Scene *v23; // rax
  common::tools::StringStream<common::tools::FixedBuffer<4096> > *v24; // r15
  std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v25; // rax
  unsigned int SceneId; // eax
  common::tools::StringStream<common::tools::FixedBuffer<4096> > *v27; // rax
  common::tools::StringStream<common::tools::FixedBuffer<4096> > *v28; // rax
  const std::string *v29; // rax
  common::milog::MiLogStream *v30; // rax
  size_t v31; // rax
  char v32; // r15
  common::milog::MiLogStream *v33; // rax
  int v34; // r15d
  std::vector<unsigned int>::reference v35; // rax
  _DWORD *v36; // rdx
  std::vector<unsigned int>::reference v37; // rax
  _DWORD *v38; // rdx
  char v39; // al
  common::milog::MiLogStream *v40; // rax
  std::vector<unsigned int>::reference v41; // rax
  _DWORD *v42; // rdx
  size_t v43; // rax
  std::vector<unsigned int>::reference v44; // rax
  _DWORD *v45; // rdx
  common::milog::MiLogStream *v46; // rax
  std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v47; // rax
  common::milog::MiLogStream *v48; // rax
  common::milog::MiLogStream *v49; // rax
  std::pair<std::_Rb_tree_const_iterator<unsigned int>,bool> v50; // rax
  common::milog::MiLogStream *v51; // rax
  std::map<unsigned int,std::vector<unsigned int>> *v52; // rax
  std::vector<unsigned int> *v53; // rax
  _BOOL4 v54; // r15d
  std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v55; // rax
  uint32_t v56; // r15d
  std::_Rb_tree_iterator<std::pair<unsigned int const,std::map<unsigned int,std::vector<unsigned int>> > >::pointer v57; // rax
  std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v58; // rax
  char v59; // al
  uint32_t v60; // r15d
  std::_Rb_tree_iterator<std::pair<unsigned int const,std::map<unsigned int,std::vector<unsigned int>> > >::pointer v61; // rax
  common::milog::MiLogStream *v62; // rax
  int v63; // r15d
  Scene *v64; // rax
  common::milog::MiLogStream *v65; // rax
  int v66; // r15d
  int32_t result; // eax
  bool v68; // [rsp+16h] [rbp-28Ah]
  char v69; // [rsp+17h] [rbp-289h]
  std::allocator<char> __a; // [rsp+3Fh] [rbp-261h] BYREF
  std::_Rb_tree_iterator<std::pair<unsigned int const,std::map<unsigned int,std::vector<unsigned int>> > >::_Self __y; // [rsp+40h] [rbp-260h] BYREF
  size_t i; // [rsp+48h] [rbp-258h]
  size_t j; // [rsp+50h] [rbp-250h]
  PlayerGmComp *gm_comp; // [rsp+58h] [rbp-248h]
  std::map<unsigned int,std::vector<unsigned int>> *op_map; // [rsp+60h] [rbp-240h]
  const std::vector<unsigned int> *add_vec; // [rsp+68h] [rbp-238h]
  const std::vector<unsigned int> *del_vec; // [rsp+70h] [rbp-230h]
  const std::string *sub_param; // [rsp+78h] [rbp-228h]
  const data::SceneTagConfig *scene_tag_config_ptr_0; // [rsp+80h] [rbp-220h]
  const data::SceneTagConfig *scene_tag_config_ptr; // [rsp+88h] [rbp-218h]
  common::milog::MiLogStream v82; // [rsp+90h] [rbp-210h] BYREF
  char v83[496]; // [rsp+B0h] [rbp-1F0h] BYREF

  v4 = (unsigned __int64)v83;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v5 = __asan_stack_malloc_3(448LL);
    if ( v5 )
      v4 = v5;
  }
  *(_QWORD *)v4 = 1102416563LL;
  *(_QWORD *)(v4 + 8) = "10 48 4 9 uid:11340 64 4 13 op_type:11365 80 4 12 tag_id:11293 96 8 10 iter:11393 128 16 19 cur_"
                        "scene_ptr:11392 160 16 15 scene_ptr:11395 192 16 15 scene_ptr:11276 224 24 17 sub_num_vec:11352 "
                        "288 48 19 scene_tag_set:11347 368 48 27 scene_tag_operate_map:11348";
  *(_QWORD *)(v4 + 16) = procSceneTag;
  v6 = (_DWORD *)(v4 >> 3);
  v6[536862720] = -235802127;
  v6[536862721] = -234556943;
  v6[536862722] = -234556924;
  v6[536862723] = -218959360;
  v6[536862724] = -219021312;
  v6[536862725] = -219021312;
  v6[536862726] = -219021312;
  v6[536862727] = -234881024;
  v6[536862728] = -218959118;
  v6[536862730] = -219021312;
  v6[536862731] = 62194;
  v6[536862733] = -202116109;
  if ( std::vector<std::string>::empty(param_vec) )
  {
    common::milog::MiLogStream::create(
      &v82,
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/player/gm/player_gm_comp.cpp",
      "procSceneTag",
      11269);
    common::milog::MiLogStream::operator<<<char [17],(char *[17])0>(&v82, (const char (*)[17])"param not enough");
    common::milog::MiLogStream::~MiLogStream(&v82);
    v3 = -1;
    goto LABEL_122;
  }
  if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
    __asan_report_load8();
  gm_comp = Player::getGmComp(context->player);
  v7 = std::vector<std::string>::operator[](param_vec, 0LL);
  if ( std::operator==<char>(v7, "CLEAR") )
  {
    std::string::operator=(ret_msg, &unk_26367480);
    if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
      __asan_report_load8();
    Player::getSceneComp(context->player);
    PlayerSceneComp::getCurScene((const PlayerSceneComp *const)(v4 + 192));
    if ( std::operator==<Scene>(0LL, (const std::shared_ptr<Scene> *)(v4 + 192)) )
    {
      std::string::operator=(ret_msg, "scene_ptr is null");
      v3 = -1;
    }
    else
    {
      v8 = std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 192));
      Scene::clearSceneTagOpMapByGm(v8);
      v3 = 0;
    }
    std::shared_ptr<Scene>::~shared_ptr((std::shared_ptr<Scene> *const)(v4 + 192));
    goto LABEL_122;
  }
  v9 = std::vector<std::string>::operator[](param_vec, 0LL);
  if ( std::operator==<char>(v9, off_26356D00)
    || (v10 = std::vector<std::string>::operator[](param_vec, 0LL), std::operator==<char>(v10, off_26356E00)) )
  {
    if ( std::vector<std::string>::size(param_vec) > 1 )
    {
      *(_DWORD *)(v4 + 80) = 0;
      v12 = std::vector<std::string>::operator[](param_vec, 1uLL);
      if ( common::tools::StringUtils::strToNum<unsigned int>(v12, (unsigned int *)(v4 + 80), 1) )
      {
        std::string::operator=(ret_msg, &unk_26367500);
        v3 = -1;
      }
      else
      {
        ServiceBox::findService<GameserverService>();
        GameserverService::getConfig((GameserverService *const)(v4 + 192));
        v13 = std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 192));
        scene_tag_config_ptr = data::SceneExcelConfigMgrBase::findSceneTagConfig(
                                 &v13->design_config.txt_config_mgr.scene_config_mgr,
                                 *(_DWORD *)(v4 + 80));
        std::shared_ptr<Config>::~shared_ptr((std::shared_ptr<Config> *const)(v4 + 192));
        if ( scene_tag_config_ptr )
        {
          v14 = std::vector<std::string>::operator[](param_vec, 0LL);
          if ( std::operator==<char>(v14, off_26356D00) )
          {
            if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
              __asan_report_load8();
            SceneComp = Player::getSceneComp(context->player);
            v16 = *(_DWORD *)(v4 + 80);
            if ( *(_BYTE *)(((unsigned __int64)&scene_tag_config_ptr->scene_id >> 3) + 0x7FFF8000) != 0
              && *(_BYTE *)(((unsigned __int64)&scene_tag_config_ptr->scene_id >> 3) + 0x7FFF8000) <= 3 )
            {
              SceneComp = (PlayerSceneComp *)&scene_tag_config_ptr->scene_id;
              __asan_report_load4(&scene_tag_config_ptr->scene_id);
            }
            PlayerSceneComp::addSceneTag(SceneComp, scene_tag_config_ptr->scene_id, v16);
            common::tools::StringStream<common::tools::FixedBuffer<4096>>::StringStream((common::tools::StringStream<common::tools::FixedBuffer<4096> > *const)(v4 + 192));
            v17 = common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(
                    (common::tools::StringStream<common::tools::FixedBuffer<4096> > *const)(v4 + 192),
                    aGm_1);
            common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(v17, *(_DWORD *)(v4 + 80));
            common::tools::StringStream<common::tools::FixedBuffer<4096>>::str[abi:cxx11](
              (std::string *)&v82,
              (common::tools::StringStream<common::tools::FixedBuffer<4096> > *const)(v4 + 192));
            std::string::operator=(ret_msg, &v82);
            std::string::~string(&v82);
            common::tools::StringStream<common::tools::FixedBuffer<4096>>::~StringStream((common::tools::StringStream<common::tools::FixedBuffer<4096> > *const)(v4 + 192));
          }
          else
          {
            if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
              __asan_report_load8();
            p_scene_id = Player::getSceneComp(context->player);
            v19 = *(_DWORD *)(v4 + 80);
            if ( *(_BYTE *)(((unsigned __int64)&scene_tag_config_ptr->scene_id >> 3) + 0x7FFF8000) != 0
              && *(_BYTE *)(((unsigned __int64)&scene_tag_config_ptr->scene_id >> 3) + 0x7FFF8000) <= 3 )
            {
              p_scene_id = (PlayerSceneComp *)&scene_tag_config_ptr->scene_id;
              __asan_report_load4(&scene_tag_config_ptr->scene_id);
            }
            PlayerSceneComp::delSceneTag(p_scene_id, scene_tag_config_ptr->scene_id, v19);
            common::tools::StringStream<common::tools::FixedBuffer<4096>>::StringStream((common::tools::StringStream<common::tools::FixedBuffer<4096> > *const)(v4 + 192));
            v20 = common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(
                    (common::tools::StringStream<common::tools::FixedBuffer<4096> > *const)(v4 + 192),
                    aGm_2);
            common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(v20, *(_DWORD *)(v4 + 80));
            common::tools::StringStream<common::tools::FixedBuffer<4096>>::str[abi:cxx11](
              (std::string *)&v82,
              (common::tools::StringStream<common::tools::FixedBuffer<4096> > *const)(v4 + 192));
            std::string::operator=(ret_msg, &v82);
            std::string::~string(&v82);
            common::tools::StringStream<common::tools::FixedBuffer<4096>>::~StringStream((common::tools::StringStream<common::tools::FixedBuffer<4096> > *const)(v4 + 192));
          }
          v3 = 0;
        }
        else
        {
          std::string::operator=(ret_msg, &unk_26367560);
          v3 = -1;
        }
      }
    }
    else
    {
      common::milog::MiLogStream::create(
        &v82,
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/player/gm/player_gm_comp.cpp",
        "procSceneTag",
        11289);
      common::milog::MiLogStream::operator<<<char [17],(char *[17])0>(&v82, (const char (*)[17])"param not enough");
      common::milog::MiLogStream::~MiLogStream(&v82);
      v3 = -1;
    }
    goto LABEL_122;
  }
  v21 = std::vector<std::string>::operator[](param_vec, 0LL);
  if ( std::operator==<char>(v21, "LIST") )
  {
    if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
      __asan_report_load8();
    Player::getSceneComp(context->player);
    PlayerSceneComp::getCurScene((const PlayerSceneComp *const)(v4 + 160));
    if ( std::operator==<Scene>(0LL, (const std::shared_ptr<Scene> *)(v4 + 160)) )
    {
      std::string::operator=(ret_msg, "scene_ptr is null");
      v3 = -1;
      v22 = 0;
    }
    else
    {
      v23 = std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 160));
      Scene::getActiveSceneTagList((std::vector<unsigned int> *)(v4 + 224), v23);
      common::tools::StringStream<common::tools::FixedBuffer<4096>>::StringStream((common::tools::StringStream<common::tools::FixedBuffer<4096> > *const)(v4 + 192));
      v24 = common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(
              (common::tools::StringStream<common::tools::FixedBuffer<4096> > *const)(v4 + 192),
              &byte_26367660);
      v25 = std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 160));
      SceneId = Scene::getSceneId(v25);
      v27 = common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(v24, SceneId);
      v28 = common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(v27, &byte_263676A0);
      common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<<unsigned int>(
        v28,
        (const std::vector<unsigned int> *)(v4 + 224));
      common::tools::StringStream<common::tools::FixedBuffer<4096>>::str[abi:cxx11](
        (std::string *)&v82,
        (common::tools::StringStream<common::tools::FixedBuffer<4096> > *const)(v4 + 192));
      std::string::operator=(ret_msg, &v82);
      std::string::~string(&v82);
      common::tools::StringStream<common::tools::FixedBuffer<4096>>::~StringStream((common::tools::StringStream<common::tools::FixedBuffer<4096> > *const)(v4 + 192));
      std::vector<unsigned int>::~vector((std::vector<unsigned int> *const)(v4 + 224));
      v22 = 1;
    }
    std::shared_ptr<Scene>::~shared_ptr((std::shared_ptr<Scene> *const)(v4 + 160));
    if ( v22 == 1 )
LABEL_121:
      v3 = 0;
  }
  else
  {
    v29 = std::vector<std::string>::operator[](param_vec, 0LL);
    if ( !std::operator==<char>(v29, "OPERATE") )
      goto LABEL_121;
    if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
      __asan_report_load8();
    *(_DWORD *)(v4 + 48) = Player::getUid(context->player);
    if ( std::vector<std::string>::size(param_vec) <= 1 )
    {
      std::string::operator=(ret_msg, "param is not enough");
      common::milog::MiLogStream::create(
        &v82,
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/player/gm/player_gm_comp.cpp",
        "procSceneTag",
        11344);
      v30 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
              &v82,
              (const unsigned int *)(v4 + 48));
      common::milog::MiLogStream::operator<<<char [48],(char *[48])0>(v30, (const char (*)[48])off_26367760);
      common::milog::MiLogStream::~MiLogStream(&v82);
      v3 = -1;
      goto LABEL_122;
    }
    std::set<unsigned int>::set((std::set<unsigned int> *const)(v4 + 288));
    std::map<unsigned int,std::map<unsigned int,std::vector<unsigned int>>>::map((std::map<unsigned int,std::map<unsigned int,std::vector<unsigned int>>> *const)(v4 + 368));
    for ( i = 1LL; ; ++i )
    {
      v31 = std::vector<std::string>::size(param_vec);
      if ( i >= v31 )
        break;
      sub_param = std::vector<std::string>::operator[](param_vec, i);
      std::vector<unsigned int>::vector((std::vector<unsigned int> *const)(v4 + 224));
      v32 = 0;
      v69 = 0;
      v68 = 1;
      if ( !(unsigned __int8)std::string::empty(sub_param) )
      {
        std::allocator<char>::allocator(&__a);
        v32 = 1;
        std::string::basic_string<std::allocator<char>>((std::string *const)&v82, ":", &__a);
        v69 = 1;
        if ( !common::tools::StringUtils::splitToList<unsigned int>(
                sub_param,
                (const std::string *)&v82,
                (std::vector<unsigned int> *)(v4 + 224),
                1) )
          v68 = 0;
      }
      if ( v69 )
        std::string::~string(&v82);
      if ( v32 )
        std::allocator<char>::~allocator(&__a);
      if ( v68 )
      {
        std::string::operator=(ret_msg, "param parse error");
        common::milog::MiLogStream::create(
          &v82,
          &common::milog::MiLogDefault::default_log_obj_,
          3u,
          "./src/player/gm/player_gm_comp.cpp",
          "procSceneTag",
          11356);
        v33 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                &v82,
                (const unsigned int *)(v4 + 48));
        common::milog::MiLogStream::operator<<<char [46],(char *[46])0>(v33, (const char (*)[46])off_26367800);
        common::milog::MiLogStream::~MiLogStream(&v82);
        v3 = -1;
        v34 = 0;
      }
      else
      {
        if ( std::vector<unsigned int>::size((const std::vector<unsigned int> *const)(v4 + 224)) <= 1 )
          goto LABEL_70;
        v35 = std::vector<unsigned int>::operator[]((std::vector<unsigned int> *const)(v4 + 224), 0LL);
        v36 = v35;
        if ( *(_BYTE *)(((unsigned __int64)v35 >> 3) + 0x7FFF8000) != 0
          && (char)(((unsigned __int8)v35 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)v35 >> 3) + 0x7FFF8000) )
        {
          __asan_report_load4(v35);
        }
        if ( *v36 == 1 )
          goto LABEL_71;
        v37 = std::vector<unsigned int>::operator[]((std::vector<unsigned int> *const)(v4 + 224), 0LL);
        v38 = v37;
        if ( *(_BYTE *)(((unsigned __int64)v37 >> 3) + 0x7FFF8000) != 0
          && (char)(((unsigned __int8)v37 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)v37 >> 3) + 0x7FFF8000) )
        {
          __asan_report_load4(v37);
        }
        if ( *v38 == 2 )
LABEL_71:
          v39 = 0;
        else
LABEL_70:
          v39 = 1;
        if ( v39 )
        {
          std::string::operator=(ret_msg, "operate scene tag param error");
          common::milog::MiLogStream::create(
            &v82,
            &common::milog::MiLogDefault::default_log_obj_,
            3u,
            "./src/player/gm/player_gm_comp.cpp",
            "procSceneTag",
            11362);
          v40 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                  &v82,
                  (const unsigned int *)(v4 + 48));
          common::milog::MiLogStream::operator<<<char [58],(char *[58])0>(v40, (const char (*)[58])off_263678A0);
          common::milog::MiLogStream::~MiLogStream(&v82);
          v3 = -1;
          v34 = 0;
        }
        else
        {
          v41 = std::vector<unsigned int>::operator[]((std::vector<unsigned int> *const)(v4 + 224), 0LL);
          v42 = v41;
          if ( *(_BYTE *)(((unsigned __int64)v41 >> 3) + 0x7FFF8000) != 0
            && (char)(((unsigned __int8)v41 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)v41 >> 3) + 0x7FFF8000) )
          {
            __asan_report_load4(v41);
          }
          *(_DWORD *)(v4 + 64) = *v42;
          for ( j = 1LL; ; ++j )
          {
            v43 = std::vector<unsigned int>::size((const std::vector<unsigned int> *const)(v4 + 224));
            if ( j >= v43 )
              break;
            v44 = std::vector<unsigned int>::operator[]((std::vector<unsigned int> *const)(v4 + 224), j);
            v45 = v44;
            if ( *(_BYTE *)(((unsigned __int64)v44 >> 3) + 0x7FFF8000) != 0
              && (char)(((unsigned __int8)v44 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)v44 >> 3) + 0x7FFF8000) )
            {
              __asan_report_load4(v44);
            }
            *(_DWORD *)(v4 + 80) = *v45;
            if ( !*(_DWORD *)(v4 + 80) )
            {
              std::string::operator=(ret_msg, "lack of scene tag para");
              common::milog::MiLogStream::create(
                &v82,
                &common::milog::MiLogDefault::default_log_obj_,
                3u,
                "./src/player/gm/player_gm_comp.cpp",
                "procSceneTag",
                11372);
              v46 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                      &v82,
                      (const unsigned int *)(v4 + 48));
              common::milog::MiLogStream::operator<<<char [50],(char *[50])0>(
                v46,
                (const char (*)[50])"gm exec operate scene tag, lack of scene tag para");
              common::milog::MiLogStream::~MiLogStream(&v82);
              v3 = -1;
LABEL_87:
              v34 = 0;
              goto LABEL_89;
            }
            ServiceBox::findService<GameserverService>();
            GameserverService::getConfig((GameserverService *const)(v4 + 192));
            v47 = std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 192));
            scene_tag_config_ptr_0 = data::SceneExcelConfigMgrBase::findSceneTagConfig(
                                       &v47->design_config.txt_config_mgr.scene_config_mgr,
                                       *(_DWORD *)(v4 + 80));
            std::shared_ptr<Config>::~shared_ptr((std::shared_ptr<Config> *const)(v4 + 192));
            if ( !scene_tag_config_ptr_0 )
            {
              std::string::operator=(ret_msg, &off_263679A0);
              common::milog::MiLogStream::create(
                &v82,
                &common::milog::MiLogDefault::default_log_obj_,
                3u,
                "./src/player/gm/player_gm_comp.cpp",
                "procSceneTag",
                11379);
              v48 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                      &v82,
                      (const unsigned int *)(v4 + 48));
              v49 = common::milog::MiLogStream::operator<<<char [74],(char *[74])0>(
                      v48,
                      (const char (*)[74])"gm exec operate scene tag, can not find scene config, the scene_tag_id : ");
              common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                v49,
                (const unsigned int *)(v4 + 80));
              common::milog::MiLogStream::~MiLogStream(&v82);
              v3 = -1;
              goto LABEL_87;
            }
            v50 = std::set<unsigned int>::insert(
                    (std::set<unsigned int> *const)(v4 + 288),
                    (const std::set<unsigned int>::value_type *)(v4 + 80));
            if ( !v50.second )
            {
              std::string::operator=(ret_msg, "scene tag id repeated");
              common::milog::MiLogStream::create(
                &v82,
                &common::milog::MiLogDefault::default_log_obj_,
                3u,
                "./src/player/gm/player_gm_comp.cpp",
                "procSceneTag",
                11385);
              v51 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                      &v82,
                      (const unsigned int *)(v4 + 48));
              common::milog::MiLogStream::operator<<<char [50],(char *[50])0>(v51, (const char (*)[50])off_26367AA0);
              common::milog::MiLogStream::~MiLogStream(&v82);
              v3 = -1;
              goto LABEL_87;
            }
            v52 = std::map<unsigned int,std::map<unsigned int,std::vector<unsigned int>>>::operator[](
                    (std::map<unsigned int,std::map<unsigned int,std::vector<unsigned int>>> *const)(v4 + 368),
                    &scene_tag_config_ptr_0->scene_id);
            v53 = std::map<unsigned int,std::vector<unsigned int>>::operator[](
                    v52,
                    (const std::map<unsigned int,std::vector<unsigned int>>::key_type *)(v4 + 64));
            std::vector<unsigned int>::push_back(v53, (const std::vector<unsigned int>::value_type *)(v4 + 80));
          }
          v34 = 1;
        }
      }
LABEL_89:
      std::vector<unsigned int>::~vector((std::vector<unsigned int> *const)(v4 + 224));
      if ( v34 != 1 )
      {
        v54 = 0;
        goto LABEL_120;
      }
    }
    if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
      __asan_report_load8();
    Player::getSceneComp(context->player);
    PlayerSceneComp::getCurScene((const PlayerSceneComp *const)(v4 + 128));
    *(std::map<unsigned int,std::map<unsigned int,std::vector<unsigned int>>>::iterator *)(v4 + 96) = std::map<unsigned int,std::map<unsigned int,std::vector<unsigned int>>>::begin((std::map<unsigned int,std::map<unsigned int,std::vector<unsigned int>>> *const)(v4 + 368));
    while ( 1 )
    {
      __y._M_node = std::map<unsigned int,std::map<unsigned int,std::vector<unsigned int>>>::end((std::map<unsigned int,std::map<unsigned int,std::vector<unsigned int>>> *const)(v4 + 368))._M_node;
      if ( !std::operator!=(
              (const std::_Rb_tree_iterator<std::pair<unsigned int const,std::map<unsigned int,std::vector<unsigned int>> > >::_Self *)(v4 + 96),
              &__y) )
        break;
      std::shared_ptr<Scene>::shared_ptr((std::shared_ptr<Scene> *const)(v4 + 160), 0LL);
      if ( !std::operator!=<Scene>(0LL, (const std::shared_ptr<Scene> *)(v4 + 128)) )
        goto LABEL_102;
      v55 = std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 128));
      v56 = Scene::getSceneId(v55);
      v57 = std::_Rb_tree_iterator<std::pair<unsigned int const,std::map<unsigned int,std::vector<unsigned int>>>>::operator->((const std::_Rb_tree_iterator<std::pair<unsigned int const,std::map<unsigned int,std::vector<unsigned int>> > > *const)(v4 + 96));
      if ( *(_BYTE *)(((unsigned __int64)v57 >> 3) + 0x7FFF8000) != 0
        && *(_BYTE *)(((unsigned __int64)v57 >> 3) + 0x7FFF8000) <= 3 )
      {
        __asan_report_load4(v57);
      }
      if ( v56 == v57->first
        && (v58 = std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 128)),
            Scene::getSceneType(v58) == SCENE_DUNGEON) )
      {
        v59 = 1;
      }
      else
      {
LABEL_102:
        v59 = 0;
      }
      if ( v59 )
      {
        std::shared_ptr<Scene>::operator=(
          (std::shared_ptr<Scene> *const)(v4 + 160),
          (const std::shared_ptr<Scene> *)(v4 + 128));
      }
      else
      {
        if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
          __asan_report_load8();
        v60 = (unsigned int)Player::getSceneComp(context->player);
        v61 = std::_Rb_tree_iterator<std::pair<unsigned int const,std::map<unsigned int,std::vector<unsigned int>>>>::operator->((const std::_Rb_tree_iterator<std::pair<unsigned int const,std::map<unsigned int,std::vector<unsigned int>> > > *const)(v4 + 96));
        if ( *(_BYTE *)(((unsigned __int64)v61 >> 3) + 0x7FFF8000) != 0
          && *(_BYTE *)(((unsigned __int64)v61 >> 3) + 0x7FFF8000) <= 3 )
        {
          __asan_report_load4(v61);
        }
        PlayerSceneComp::getWorldOrPersistentDungeonScenePtr((PlayerSceneComp *const)(v4 + 192), v60);
        std::shared_ptr<Scene>::operator=(
          (std::shared_ptr<Scene> *const)(v4 + 160),
          (std::shared_ptr<Scene> *)(v4 + 192));
        std::shared_ptr<Scene>::~shared_ptr((std::shared_ptr<Scene> *const)(v4 + 192));
      }
      if ( std::operator==<Scene>(0LL, (const std::shared_ptr<Scene> *)(v4 + 160)) )
      {
        std::string::operator=(ret_msg, &off_26367B00);
        common::milog::MiLogStream::create(
          &v82,
          &common::milog::MiLogDefault::default_log_obj_,
          3u,
          "./src/player/gm/player_gm_comp.cpp",
          "procSceneTag",
          11409);
        v62 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                &v82,
                (const unsigned int *)(v4 + 48));
        common::milog::MiLogStream::operator<<<char [50],(char *[50])0>(v62, (const char (*)[50])off_26367B40);
        common::milog::MiLogStream::~MiLogStream(&v82);
        v3 = -1;
        v63 = 0;
      }
      else
      {
        op_map = &std::_Rb_tree_iterator<std::pair<unsigned int const,std::map<unsigned int,std::vector<unsigned int>>>>::operator->((const std::_Rb_tree_iterator<std::pair<unsigned int const,std::map<unsigned int,std::vector<unsigned int>> > > *const)(v4 + 96))->second;
        *(_DWORD *)(v4 + 80) = 1;
        add_vec = std::map<unsigned int,std::vector<unsigned int>>::operator[](
                    op_map,
                    (std::map<unsigned int,std::vector<unsigned int>>::key_type *)(v4 + 80));
        *(_DWORD *)(v4 + 80) = 2;
        del_vec = std::map<unsigned int,std::vector<unsigned int>>::operator[](
                    op_map,
                    (std::map<unsigned int,std::vector<unsigned int>>::key_type *)(v4 + 80));
        v64 = std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 160));
        if ( Scene::processSceneTag(v64, add_vec, del_vec, 0LL) )
        {
          std::string::operator=(ret_msg, "process scene tag error");
          common::milog::MiLogStream::create(
            &v82,
            &common::milog::MiLogDefault::default_log_obj_,
            3u,
            "./src/player/gm/player_gm_comp.cpp",
            "procSceneTag",
            11418);
          v65 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                  &v82,
                  (const unsigned int *)(v4 + 48));
          common::milog::MiLogStream::operator<<<char [53],(char *[53])0>(v65, (const char (*)[53])off_26367BE0);
          common::milog::MiLogStream::~MiLogStream(&v82);
          v3 = -1;
          v63 = 0;
        }
        else
        {
          v63 = 1;
        }
      }
      std::shared_ptr<Scene>::~shared_ptr((std::shared_ptr<Scene> *const)(v4 + 160));
      if ( v63 != 1 )
      {
        v66 = 0;
        goto LABEL_119;
      }
      std::_Rb_tree_iterator<std::pair<unsigned int const,std::map<unsigned int,std::vector<unsigned int>>>>::operator++(
        (std::_Rb_tree_iterator<std::pair<unsigned int const,std::map<unsigned int,std::vector<unsigned int>> > > *const)(v4 + 96),
        0);
    }
    std::string::operator=(ret_msg, "scene tag operate success");
    v66 = 1;
LABEL_119:
    std::shared_ptr<Scene>::~shared_ptr((std::shared_ptr<Scene> *const)(v4 + 128));
    v54 = v66 == 1;
LABEL_120:
    std::map<unsigned int,std::map<unsigned int,std::vector<unsigned int>>>::~map((std::map<unsigned int,std::map<unsigned int,std::vector<unsigned int>>> *const)(v4 + 368));
    std::set<unsigned int>::~set((std::set<unsigned int> *const)(v4 + 288));
    if ( v54 )
      goto LABEL_121;
  }
LABEL_122:
  result = v3;
  if ( v83 == (char *)v4 )
  {
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8008) = 0LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8010) = 0LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8018) = 0LL;
    *(_DWORD *)((v4 >> 3) + 0x7FFF8020) = 0;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8028) = 0LL;
    *(_DWORD *)((v4 >> 3) + 0x7FFF8034) = 0;
  }
  else
  {
    *(_QWORD *)v4 = 1172321806LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8020) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8028) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8030) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 11427: range 0000000017D79D3A-0000000017D79DDC
void __cdecl procAnchorRegister::procAnchorRegister(procAnchorRegister *const this)
{
  std::function<int(GmContext&,const std::vector<std::string>&,std::string&)> *v1; // rax
  std::allocator<char> __a; // [rsp+1Fh] [rbp-31h] BYREF
  std::string __k; // [rsp+20h] [rbp-30h] BYREF

  std::allocator<char>::allocator(&__a);
  std::string::basic_string<std::allocator<char>>(&__k, "ANCHOR", &__a);
  v1 = std::unordered_map<std::string,std::function<int ()(GmContext &,std::vector<std::string> const&,std::string&)>>::operator[](
         &GmUtils::op_func_map[abi:cxx11],
         &__k);
  std::function<int ()(GmContext &,std::vector<std::string> const&,std::string&)>::operator=<int (&)(GmContext &,std::vector<std::string> const&,std::string&)>(
    v1,
    (int (*)(GmContext *, const std::vector<std::string> *, std::string *))procAnchor);
  std::string::~string(&__k);
  std::allocator<char>::~allocator(&__a);
};

// Line 11428: range 0000000017C1F40B-0000000017C1F529
int32_t __cdecl procAnchor(GmContext *context, const std::vector<std::string> *param_vec, std::string *ret_msg)
{
  const std::string *v4; // rax
  PlayerWidgetComp *WidgetComp; // rax
  common::milog::MiLogStream v7; // [rsp+20h] [rbp-30h] BYREF

  if ( std::vector<std::string>::empty(param_vec) )
  {
    common::milog::MiLogStream::create(
      &v7,
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/player/gm/player_gm_comp.cpp",
      "procAnchor",
      11431);
    common::milog::MiLogStream::operator<<<char [17],(char *[17])0>(&v7, (const char (*)[17])"param not enough");
    common::milog::MiLogStream::~MiLogStream(&v7);
    return -1;
  }
  else
  {
    v4 = std::vector<std::string>::operator[](param_vec, 0LL);
    if ( std::operator==<char>(v4, "CLEAR") )
    {
      if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
        __asan_report_load8();
      WidgetComp = Player::getWidgetComp(context->player);
      PlayerWidgetComp::clearAnchorPointsByGm(WidgetComp);
      std::string::operator=(ret_msg, &unk_26367D00);
      return 0;
    }
    else
    {
      return 0;
    }
  }
};

// Line 11443: range 0000000017D79DDE-0000000017D79E80
void __cdecl procBonfireRegister::procBonfireRegister(procBonfireRegister *const this)
{
  std::function<int(GmContext&,const std::vector<std::string>&,std::string&)> *v1; // rax
  std::allocator<char> __a; // [rsp+1Fh] [rbp-31h] BYREF
  std::string __k; // [rsp+20h] [rbp-30h] BYREF

  std::allocator<char>::allocator(&__a);
  std::string::basic_string<std::allocator<char>>(&__k, "BONFIRE", &__a);
  v1 = std::unordered_map<std::string,std::function<int ()(GmContext &,std::vector<std::string> const&,std::string&)>>::operator[](
         &GmUtils::op_func_map[abi:cxx11],
         &__k);
  std::function<int ()(GmContext &,std::vector<std::string> const&,std::string&)>::operator=<int (&)(GmContext &,std::vector<std::string> const&,std::string&)>(
    v1,
    (int (*)(GmContext *, const std::vector<std::string> *, std::string *))procBonfire);
  std::string::~string(&__k);
  std::allocator<char>::~allocator(&__a);
};

// Line 11444: range 0000000017C1F52A-0000000017C1F648
int32_t __cdecl procBonfire(GmContext *context, const std::vector<std::string> *param_vec, std::string *ret_msg)
{
  const std::string *v4; // rax
  PlayerWidgetComp *WidgetComp; // rax
  common::milog::MiLogStream v7; // [rsp+20h] [rbp-30h] BYREF

  if ( std::vector<std::string>::empty(param_vec) )
  {
    common::milog::MiLogStream::create(
      &v7,
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/player/gm/player_gm_comp.cpp",
      "procBonfire",
      11447);
    common::milog::MiLogStream::operator<<<char [17],(char *[17])0>(&v7, (const char (*)[17])"param not enough");
    common::milog::MiLogStream::~MiLogStream(&v7);
    return -1;
  }
  else
  {
    v4 = std::vector<std::string>::operator[](param_vec, 0LL);
    if ( std::operator==<char>(v4, "CLEAR") )
    {
      if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
        __asan_report_load8();
      WidgetComp = Player::getWidgetComp(context->player);
      PlayerWidgetComp::clearBonfiresByGm(WidgetComp);
      std::string::operator=(ret_msg, &unk_26367DC0);
      return 0;
    }
    else
    {
      return 0;
    }
  }
};

// Line 11459: range 0000000017D79E82-0000000017D79F24
void __cdecl procReputationRegister::procReputationRegister(procReputationRegister *const this)
{
  std::function<int(GmContext&,const std::vector<std::string>&,std::string&)> *v1; // rax
  std::allocator<char> __a; // [rsp+1Fh] [rbp-31h] BYREF
  std::string __k; // [rsp+20h] [rbp-30h] BYREF

  std::allocator<char>::allocator(&__a);
  std::string::basic_string<std::allocator<char>>(&__k, "REPUTATION", &__a);
  v1 = std::unordered_map<std::string,std::function<int ()(GmContext &,std::vector<std::string> const&,std::string&)>>::operator[](
         &GmUtils::op_func_map[abi:cxx11],
         &__k);
  std::function<int ()(GmContext &,std::vector<std::string> const&,std::string&)>::operator=<int (&)(GmContext &,std::vector<std::string> const&,std::string&)>(
    v1,
    (int (*)(GmContext *, const std::vector<std::string> *, std::string *))procReputation);
  std::string::~string(&__k);
  std::allocator<char>::~allocator(&__a);
};

// Line 11460: range 0000000017C1F649-0000000017C1FFE3
int32_t __cdecl procReputation(GmContext *context, const std::vector<std::string> *param_vec, std::string *ret_msg)
{
  unsigned __int64 v3; // r12
  __int64 v4; // rax
  _DWORD *v5; // r13
  int32_t refreshed; // r14d
  const std::string *v7; // rax
  const std::string *v8; // rax
  const std::string *v10; // rax
  const std::string *v11; // rax
  const std::string *v12; // rax
  const std::string *v13; // rax
  const std::string *v14; // rax
  const std::string *v15; // rax
  common::milog::MiLogStream *v16; // rax
  CityReputation *v17; // rax
  const std::string *v18; // rax
  const std::string *v19; // rax
  const std::string *v20; // rax
  common::milog::MiLogStream *v21; // rax
  CityReputation *v22; // rax
  int32_t result; // eax
  PlayerReputationComp *reputation_comp; // [rsp+28h] [rbp-B8h]
  common::milog::MiLogStream v25; // [rsp+30h] [rbp-B0h] BYREF
  char v26[144]; // [rsp+50h] [rbp-90h] BYREF

  v3 = (unsigned __int64)v26;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_1(96LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "3 32 4 13 city_id:11525 48 4 16 request_id:11525 64 16 20 reputation_ptr:11528";
  *(_QWORD *)(v3 + 16) = procReputation;
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = -234556924;
  v5[536862722] = -202178560;
  if ( std::vector<std::string>::empty(param_vec) )
  {
    common::milog::MiLogStream::create(
      &v25,
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/player/gm/player_gm_comp.cpp",
      "procReputation",
      11463);
    common::milog::MiLogStream::operator<<<char [17],(char *[17])0>(&v25, (const char (*)[17])"param not enough");
    common::milog::MiLogStream::~MiLogStream(&v25);
    refreshed = -1;
    goto LABEL_39;
  }
  if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
    __asan_report_load8();
  reputation_comp = Player::getReputationComp(context->player);
  v7 = std::vector<std::string>::operator[](param_vec, 0LL);
  if ( !std::operator==<char>(v7, "CLEAR") )
  {
    v10 = std::vector<std::string>::operator[](param_vec, 0LL);
    if ( std::operator==<char>(v10, off_26351960) )
    {
      if ( std::vector<std::string>::size(param_vec) > 2 )
      {
        *(_DWORD *)(v3 + 32) = 0;
        *(_DWORD *)(v3 + 48) = 0;
        v11 = std::vector<std::string>::operator[](param_vec, 1uLL);
        common::tools::StringUtils::strToNum<unsigned int>(v11, (unsigned int *)(v3 + 32), 1);
        v12 = std::vector<std::string>::operator[](param_vec, 2uLL);
        common::tools::StringUtils::strToNum<unsigned int>(v12, (unsigned int *)(v3 + 48), 1);
        refreshed = PlayerReputationComp::addCityReputationExpByGm(
                      reputation_comp,
                      *(_DWORD *)(v3 + 32),
                      *(_DWORD *)(v3 + 48));
      }
      else
      {
        common::milog::MiLogStream::create(
          &v25,
          &common::milog::MiLogDefault::default_log_obj_,
          3u,
          "./src/player/gm/player_gm_comp.cpp",
          "procReputation",
          11486);
        common::milog::MiLogStream::operator<<<char [17],(char *[17])0>(&v25, (const char (*)[17])"param not enough");
        common::milog::MiLogStream::~MiLogStream(&v25);
        refreshed = -1;
      }
      goto LABEL_39;
    }
    v13 = std::vector<std::string>::operator[](param_vec, 0LL);
    if ( std::operator==<char>(v13, "REQUEST") )
    {
      if ( std::vector<std::string>::size(param_vec) <= 1 )
      {
        common::milog::MiLogStream::create(
          &v25,
          &common::milog::MiLogDefault::default_log_obj_,
          3u,
          "./src/player/gm/player_gm_comp.cpp",
          "procReputation",
          11498);
        common::milog::MiLogStream::operator<<<char [45],(char *[45])0>(
          &v25,
          (const char (*)[45])"param not enough, REPUTATION REQUEST OP_NAME");
        common::milog::MiLogStream::~MiLogStream(&v25);
        refreshed = -1;
        goto LABEL_39;
      }
      v14 = std::vector<std::string>::operator[](param_vec, 1uLL);
      if ( std::operator==<char>(v14, "REFRESH") )
      {
        if ( std::vector<std::string>::size(param_vec) <= 2 )
        {
          common::milog::MiLogStream::create(
            &v25,
            &common::milog::MiLogDefault::default_log_obj_,
            3u,
            "./src/player/gm/player_gm_comp.cpp",
            "procReputation",
            11505);
          common::milog::MiLogStream::operator<<<char [53],(char *[53])0>(
            &v25,
            (const char (*)[53])"param not enough, REPUTATION REQUEST REFRESH city_id");
          common::milog::MiLogStream::~MiLogStream(&v25);
          refreshed = -1;
          goto LABEL_39;
        }
        *(_DWORD *)(v3 + 48) = 0;
        v15 = std::vector<std::string>::operator[](param_vec, 2uLL);
        common::tools::StringUtils::strToNum<unsigned int>(v15, (unsigned int *)(v3 + 48), 1);
        PlayerReputationComp::findCityReputationPtr((PlayerReputationComp *const)(v3 + 64), (uint32_t)reputation_comp);
        if ( std::operator==<CityReputation>(0LL, (const std::shared_ptr<CityReputation> *)(v3 + 64)) )
        {
          common::milog::MiLogStream::create(
            &v25,
            &common::milog::MiLogDefault::default_log_obj_,
            3u,
            "./src/player/gm/player_gm_comp.cpp",
            "procReputation",
            11513);
          v16 = common::milog::MiLogStream::operator<<<char [29],(char *[29])0>(
                  &v25,
                  (const char (*)[29])"findCityReputationPtr fails:");
          common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v16, (const unsigned int *)(v3 + 48));
          common::milog::MiLogStream::~MiLogStream(&v25);
          refreshed = -1;
        }
        else
        {
          v17 = std::__shared_ptr_access<CityReputation,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<CityReputation,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 64));
          refreshed = CityReputation::refreshRequestByGm(v17);
        }
        goto LABEL_31;
      }
      v18 = std::vector<std::string>::operator[](param_vec, 1uLL);
      if ( std::operator==<char>(v18, off_26356D00) )
      {
        if ( std::vector<std::string>::size(param_vec) <= 3 )
        {
          common::milog::MiLogStream::create(
            &v25,
            &common::milog::MiLogDefault::default_log_obj_,
            3u,
            "./src/player/gm/player_gm_comp.cpp",
            "procReputation",
            11522);
          common::milog::MiLogStream::operator<<<char [60],(char *[60])0>(
            &v25,
            (const char (*)[60])"param not enough, REPUTATION REQUEST ADD city_id request_id");
          common::milog::MiLogStream::~MiLogStream(&v25);
          refreshed = -1;
          goto LABEL_39;
        }
        *(_DWORD *)(v3 + 32) = 0;
        *(_DWORD *)(v3 + 48) = 0;
        v19 = std::vector<std::string>::operator[](param_vec, 2uLL);
        common::tools::StringUtils::strToNum<unsigned int>(v19, (unsigned int *)(v3 + 32), 1);
        v20 = std::vector<std::string>::operator[](param_vec, 3uLL);
        common::tools::StringUtils::strToNum<unsigned int>(v20, (unsigned int *)(v3 + 48), 1);
        PlayerReputationComp::findCityReputationPtr((PlayerReputationComp *const)(v3 + 64), (uint32_t)reputation_comp);
        if ( std::operator==<CityReputation>(0LL, (const std::shared_ptr<CityReputation> *)(v3 + 64)) )
        {
          common::milog::MiLogStream::create(
            &v25,
            &common::milog::MiLogDefault::default_log_obj_,
            3u,
            "./src/player/gm/player_gm_comp.cpp",
            "procReputation",
            11531);
          v21 = common::milog::MiLogStream::operator<<<char [29],(char *[29])0>(
                  &v25,
                  (const char (*)[29])"findCityReputationPtr fails:");
          common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v21, (const unsigned int *)(v3 + 32));
          common::milog::MiLogStream::~MiLogStream(&v25);
          refreshed = -1;
        }
        else
        {
          v22 = std::__shared_ptr_access<CityReputation,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<CityReputation,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 64));
          refreshed = CityReputation::addRequestByGm(v22, *(_DWORD *)(v3 + 48));
        }
LABEL_31:
        std::shared_ptr<CityReputation>::~shared_ptr((std::shared_ptr<CityReputation> *const)(v3 + 64));
        goto LABEL_39;
      }
    }
    refreshed = -1;
    goto LABEL_39;
  }
  if ( std::vector<std::string>::size(param_vec) > 1 )
  {
    *(_DWORD *)(v3 + 48) = 0;
    v8 = std::vector<std::string>::operator[](param_vec, 1uLL);
    if ( common::tools::StringUtils::strToNum<unsigned int>(v8, (unsigned int *)(v3 + 48), 1) || !*(_DWORD *)(v3 + 48) )
    {
      common::milog::MiLogStream::create(
        &v25,
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/player/gm/player_gm_comp.cpp",
        "procReputation",
        11477);
      common::milog::MiLogStream::operator<<<char [23],(char *[23])0>(
        &v25,
        (const char (*)[23])"city_id strToNum fails");
      common::milog::MiLogStream::~MiLogStream(&v25);
      refreshed = -1;
    }
    else
    {
      refreshed = PlayerReputationComp::clearCityReputationByGm(reputation_comp, *(_DWORD *)(v3 + 48));
    }
  }
  else
  {
    common::milog::MiLogStream::create(
      &v25,
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/player/gm/player_gm_comp.cpp",
      "procReputation",
      11471);
    common::milog::MiLogStream::operator<<<char [17],(char *[17])0>(&v25, (const char (*)[17])"param not enough");
    common::milog::MiLogStream::~MiLogStream(&v25);
    refreshed = -1;
  }
LABEL_39:
  result = refreshed;
  if ( v26 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8008) = 0;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8008) = -168430091;
  }
  return result;
};

// Line 11540: range 0000000017D79F26-0000000017D79FC8
void __cdecl procHuntingRegister::procHuntingRegister(procHuntingRegister *const this)
{
  std::function<int(GmContext&,const std::vector<std::string>&,std::string&)> *v1; // rax
  std::allocator<char> __a; // [rsp+1Fh] [rbp-31h] BYREF
  std::string __k; // [rsp+20h] [rbp-30h] BYREF

  std::allocator<char>::allocator(&__a);
  std::string::basic_string<std::allocator<char>>(&__k, "HUNTING", &__a);
  v1 = std::unordered_map<std::string,std::function<int ()(GmContext &,std::vector<std::string> const&,std::string&)>>::operator[](
         &GmUtils::op_func_map[abi:cxx11],
         &__k);
  std::function<int ()(GmContext &,std::vector<std::string> const&,std::string&)>::operator=<int (&)(GmContext &,std::vector<std::string> const&,std::string&)>(
    v1,
    (int (*)(GmContext *, const std::vector<std::string> *, std::string *))procHunting);
  std::string::~string(&__k);
  std::allocator<char>::~allocator(&__a);
};

// Line 11541: range 0000000017C1FFE4-0000000017C208E6
int32_t __cdecl procHunting(GmContext *context, const std::vector<std::string> *param_vec, std::string *ret_msg)
{
  unsigned __int64 v3; // r12
  __int64 v4; // rax
  _DWORD *v5; // r13
  int32_t result; // eax
  const std::string *v7; // rax
  const std::string *v8; // rax
  const std::string *v9; // rax
  const std::string *v10; // rax
  const std::string *v11; // rax
  const std::string *v12; // rax
  const std::string *v13; // rax
  const std::string *v14; // rax
  const std::string *v15; // rax
  const std::string *v16; // rax
  const std::string *v17; // rax
  const std::string *v18; // rax
  const std::string *v19; // rax
  const std::string *v20; // rax
  const std::string *v21; // rax
  const std::string *v22; // rax
  const std::string *v23; // rax
  PlayerHuntingComp *hunting_comp; // [rsp+28h] [rbp-C8h]
  common::milog::MiLogStream v26; // [rsp+30h] [rbp-C0h] BYREF
  char v27[160]; // [rsp+50h] [rbp-A0h] BYREF

  v3 = (unsigned __int64)v27;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_1(128LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "4 48 4 13 city_id:11577 64 4 16 refresh_id:11577 80 4 14 group_id:11614 96 4 15 ref_index:11614";
  *(_QWORD *)(v3 + 16) = procHunting;
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = -234556943;
  v5[536862722] = -234556924;
  v5[536862723] = -202116348;
  if ( std::vector<std::string>::empty(param_vec) )
  {
    common::milog::MiLogStream::create(
      &v26,
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/player/gm/player_gm_comp.cpp",
      "procHunting",
      11544);
    common::milog::MiLogStream::operator<<<char [17],(char *[17])0>(&v26, (const char (*)[17])"param not enough");
    common::milog::MiLogStream::~MiLogStream(&v26);
    result = -1;
  }
  else
  {
    if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
      __asan_report_load8();
    hunting_comp = Player::getHuntingComp(context->player);
    v7 = std::vector<std::string>::operator[](param_vec, 0LL);
    if ( std::operator==<char>(v7, "REFRESH") )
    {
      if ( std::vector<std::string>::size(param_vec) > 1 )
      {
        v8 = std::vector<std::string>::operator[](param_vec, 1uLL);
        if ( std::operator==<char>(v8, _f.gap0) )
        {
          result = PlayerHuntingComp::forceRefreshAll(hunting_comp);
        }
        else if ( std::vector<std::string>::size(param_vec) > 2 )
        {
          *(_DWORD *)(v3 + 80) = 0;
          *(_DWORD *)(v3 + 96) = 0;
          v9 = std::vector<std::string>::operator[](param_vec, 1uLL);
          common::tools::StringUtils::strToNum<unsigned int>(v9, (unsigned int *)(v3 + 80), 1);
          v10 = std::vector<std::string>::operator[](param_vec, 2uLL);
          common::tools::StringUtils::strToNum<unsigned int>(v10, (unsigned int *)(v3 + 96), 1);
          result = PlayerHuntingComp::forceRefresh(hunting_comp, *(_DWORD *)(v3 + 80), *(_DWORD *)(v3 + 96));
        }
        else
        {
          common::milog::MiLogStream::create(
            &v26,
            &common::milog::MiLogDefault::default_log_obj_,
            3u,
            "./src/player/gm/player_gm_comp.cpp",
            "procHunting",
            11562);
          common::milog::MiLogStream::operator<<<char [17],(char *[17])0>(&v26, (const char (*)[17])"param not enough");
          common::milog::MiLogStream::~MiLogStream(&v26);
          result = -1;
        }
      }
      else
      {
        common::milog::MiLogStream::create(
          &v26,
          &common::milog::MiLogDefault::default_log_obj_,
          3u,
          "./src/player/gm/player_gm_comp.cpp",
          "procHunting",
          11552);
        common::milog::MiLogStream::operator<<<char [17],(char *[17])0>(&v26, (const char (*)[17])"param not enough");
        common::milog::MiLogStream::~MiLogStream(&v26);
        result = -1;
      }
    }
    else
    {
      v11 = std::vector<std::string>::operator[](param_vec, 0LL);
      if ( std::operator==<char>(v11, "TAKE") )
      {
        if ( std::vector<std::string>::size(param_vec) > 3 )
        {
          *(_DWORD *)(v3 + 48) = 0;
          *(_DWORD *)(v3 + 64) = 0;
          *(_DWORD *)(v3 + 80) = 0;
          *(_DWORD *)(v3 + 96) = 0;
          v12 = std::vector<std::string>::operator[](param_vec, 1uLL);
          common::tools::StringUtils::strToNum<unsigned int>(v12, (unsigned int *)(v3 + 48), 1);
          v13 = std::vector<std::string>::operator[](param_vec, 2uLL);
          common::tools::StringUtils::strToNum<unsigned int>(v13, (unsigned int *)(v3 + 64), 1);
          v14 = std::vector<std::string>::operator[](param_vec, 3uLL);
          common::tools::StringUtils::strToNum<unsigned int>(v14, (unsigned int *)(v3 + 80), 1);
          if ( std::vector<std::string>::size(param_vec) == 5 )
          {
            v15 = std::vector<std::string>::operator[](param_vec, 4uLL);
            common::tools::StringUtils::strToNum<unsigned int>(v15, (unsigned int *)(v3 + 96), 1);
            result = PlayerHuntingComp::takeHuntingOfferByGm(
                       hunting_comp,
                       *(_DWORD *)(v3 + 48),
                       *(_DWORD *)(v3 + 64),
                       *(_DWORD *)(v3 + 80),
                       *(_DWORD *)(v3 + 96));
          }
          else
          {
            result = PlayerHuntingComp::takeHuntingOfferByGm(
                       hunting_comp,
                       *(_DWORD *)(v3 + 48),
                       *(_DWORD *)(v3 + 64),
                       *(_DWORD *)(v3 + 80));
          }
        }
        else
        {
          common::milog::MiLogStream::create(
            &v26,
            &common::milog::MiLogDefault::default_log_obj_,
            3u,
            "./src/player/gm/player_gm_comp.cpp",
            "procHunting",
            11574);
          common::milog::MiLogStream::operator<<<char [17],(char *[17])0>(&v26, (const char (*)[17])"param not enough");
          common::milog::MiLogStream::~MiLogStream(&v26);
          result = -1;
        }
      }
      else
      {
        v16 = std::vector<std::string>::operator[](param_vec, 0LL);
        if ( std::operator==<char>(v16, "FINISH") )
        {
          if ( std::vector<std::string>::size(param_vec) > 2 )
          {
            *(_DWORD *)(v3 + 80) = 0;
            *(_DWORD *)(v3 + 96) = 0;
            v17 = std::vector<std::string>::operator[](param_vec, 1uLL);
            common::tools::StringUtils::strToNum<unsigned int>(v17, (unsigned int *)(v3 + 80), 1);
            v18 = std::vector<std::string>::operator[](param_vec, 2uLL);
            common::tools::StringUtils::strToNum<unsigned int>(v18, (unsigned int *)(v3 + 96), 1);
            result = PlayerHuntingComp::finishOngoingHuntingByGm(
                       hunting_comp,
                       *(_DWORD *)(v3 + 80),
                       *(_DWORD *)(v3 + 96));
          }
          else
          {
            common::milog::MiLogStream::create(
              &v26,
              &common::milog::MiLogDefault::default_log_obj_,
              3u,
              "./src/player/gm/player_gm_comp.cpp",
              "procHunting",
              11595);
            common::milog::MiLogStream::operator<<<char [17],(char *[17])0>(
              &v26,
              (const char (*)[17])"param not enough");
            common::milog::MiLogStream::~MiLogStream(&v26);
            result = -1;
          }
        }
        else
        {
          v19 = std::vector<std::string>::operator[](param_vec, 0LL);
          if ( std::operator==<char>(v19, "FIN_CLUE") )
          {
            result = PlayerHuntingComp::finishHuntingClueByGm(hunting_comp);
          }
          else
          {
            v20 = std::vector<std::string>::operator[](param_vec, 0LL);
            if ( std::operator==<char>(v20, "LOAD_GROUP") )
            {
              if ( std::vector<std::string>::size(param_vec) > 2 )
              {
                *(_DWORD *)(v3 + 80) = 0;
                *(_DWORD *)(v3 + 96) = 0;
                v21 = std::vector<std::string>::operator[](param_vec, 1uLL);
                common::tools::StringUtils::strToNum<unsigned int>(v21, (unsigned int *)(v3 + 80), 1);
                v22 = std::vector<std::string>::operator[](param_vec, 2uLL);
                common::tools::StringUtils::strToNum<unsigned int>(v22, (unsigned int *)(v3 + 96), 1);
                if ( !PlayerHuntingComp::hasOngoingStartedHunting(hunting_comp) )
                {
                  std::string::operator=(ret_msg, &unk_26368260);
                  result = -1;
                }
                else
                {
                  result = PlayerHuntingComp::loadHuntingGroupByGm(
                             hunting_comp,
                             *(_DWORD *)(v3 + 80),
                             *(_DWORD *)(v3 + 96));
                }
              }
              else
              {
                common::milog::MiLogStream::create(
                  &v26,
                  &common::milog::MiLogDefault::default_log_obj_,
                  3u,
                  "./src/player/gm/player_gm_comp.cpp",
                  "procHunting",
                  11611);
                common::milog::MiLogStream::operator<<<char [17],(char *[17])0>(
                  &v26,
                  (const char (*)[17])"param not enough");
                common::milog::MiLogStream::~MiLogStream(&v26);
                result = -1;
              }
            }
            else
            {
              v23 = std::vector<std::string>::operator[](param_vec, 0LL);
              if ( std::operator==<char>(v23, "FAIL") )
                result = PlayerHuntingComp::failOngoingHuntingByGm(hunting_comp);
              else
                result = -1;
            }
          }
        }
      }
    }
  }
  if ( v27 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 11631: range 0000000017D79FCA-0000000017D7A06C
void __cdecl procScenePlayRegister::procScenePlayRegister(procScenePlayRegister *const this)
{
  std::function<int(GmContext&,const std::vector<std::string>&,std::string&)> *v1; // rax
  std::allocator<char> __a; // [rsp+1Fh] [rbp-31h] BYREF
  std::string __k; // [rsp+20h] [rbp-30h] BYREF

  std::allocator<char>::allocator(&__a);
  std::string::basic_string<std::allocator<char>>(&__k, "SCENEPLAY", &__a);
  v1 = std::unordered_map<std::string,std::function<int ()(GmContext &,std::vector<std::string> const&,std::string&)>>::operator[](
         &GmUtils::op_func_map[abi:cxx11],
         &__k);
  std::function<int ()(GmContext &,std::vector<std::string> const&,std::string&)>::operator=<int (&)(GmContext &,std::vector<std::string> const&,std::string&)>(
    v1,
    (int (*)(GmContext *, const std::vector<std::string> *, std::string *))procScenePlay);
  std::string::~string(&__k);
  std::allocator<char>::~allocator(&__a);
};

// Line 11632: range 0000000017C208E7-0000000017C216D1
int32_t __cdecl procScenePlay(GmContext *context, const std::vector<std::string> *param_vec, std::string *ret_msg)
{
  unsigned __int64 v3; // r13
  __int64 v4; // rax
  _DWORD *v5; // r12
  int32_t v6; // r14d
  const std::string *v7; // rax
  const std::string *v8; // rax
  const std::string *v9; // rax
  uint32_t ScenePlayComp; // eax
  bool v11; // r14
  common::milog::MiLogStream *v12; // rax
  common::milog::MiLogStream *v13; // rax
  const std::string *v14; // rax
  const std::string *v15; // rax
  PlayerScenePlayComp *v16; // rax
  common::milog::MiLogStream *v17; // rax
  common::milog::MiLogStream *v18; // rax
  const std::string *v19; // rax
  const std::string *v20; // rax
  PlayerScenePlayComp *v21; // rax
  common::milog::MiLogStream *v22; // rax
  common::milog::MiLogStream *v23; // rax
  const std::string *v24; // rax
  const std::string *v25; // rax
  const std::string *v26; // rax
  PlayerScenePlayComp *v27; // rax
  common::milog::MiLogStream *v28; // rax
  common::milog::MiLogStream *v29; // rax
  PlayerScenePlayComp *v30; // rax
  common::milog::MiLogStream *v31; // rax
  common::milog::MiLogStream *v32; // rax
  PlayerScenePlayComp *v33; // rax
  common::milog::MiLogStream *v34; // rax
  common::milog::MiLogStream *v35; // rax
  const std::string *v36; // rax
  uint32_t v37; // eax
  BaseScenePlayBattle *v38; // rax
  const std::string *v39; // rax
  const std::string *v40; // rax
  PlayerScenePlayComp *v41; // rax
  common::milog::MiLogStream *v42; // rax
  common::milog::MiLogStream *v43; // rax
  int32_t result; // eax
  common::milog::MiLogStream v46; // [rsp+20h] [rbp-110h] BYREF
  char v47[240]; // [rsp+40h] [rbp-F0h] BYREF

  v3 = (unsigned __int64)v47;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_2(192LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "6 48 4 13 play_id:11691 64 4 10 oper:11692 80 4 13 play_id:11750 96 8 17 source_info:11643 128 1"
                        "6 14 play_ptr:11732 160 16 16 battle_ptr:11737";
  *(_QWORD *)(v3 + 16) = procScenePlay;
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = -234556943;
  v5[536862722] = -234556924;
  v5[536862723] = -218959360;
  v5[536862724] = -219021312;
  v5[536862725] = -202178560;
  if ( std::vector<std::string>::size(param_vec) <= 1 )
  {
    std::string::operator=(ret_msg, "param not enough");
    v6 = -1;
    goto LABEL_64;
  }
  v7 = std::vector<std::string>::operator[](param_vec, 0LL);
  if ( std::operator==<char>(v7, "CREATE") )
  {
    *(_DWORD *)(v3 + 64) = 0;
    v8 = std::vector<std::string>::operator[](param_vec, 1uLL);
    common::tools::StringUtils::strToNum<unsigned int>(v8, (unsigned int *)(v3 + 64), 1);
    *(_DWORD *)(v3 + 96) = 0;
    *(_DWORD *)(v3 + 100) = 0;
    *(_DWORD *)(v3 + 96) = 1;
    *(_DWORD *)(v3 + 80) = 2001001;
    if ( std::vector<std::string>::size(param_vec) > 2 )
    {
      v9 = std::vector<std::string>::operator[](param_vec, 2uLL);
      common::tools::StringUtils::strToNum<unsigned int>(v9, (unsigned int *)(v3 + 80), 1);
    }
    *(_DWORD *)(v3 + 100) = *(_DWORD *)(v3 + 80);
    if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
      __asan_report_load8();
    ScenePlayComp = (unsigned int)Player::getScenePlayComp(context->player);
    PlayerScenePlayComp::createAndInitScenePlay(
      (PlayerScenePlayComp *const)(v3 + 160),
      ScenePlayComp,
      (const ScenePlaySourceInfo *)*(unsigned int *)(v3 + 64));
    v11 = std::operator==<BaseScenePlay>(0LL, (const std::shared_ptr<BaseScenePlay> *)(v3 + 160));
    std::shared_ptr<BaseScenePlay>::~shared_ptr((std::shared_ptr<BaseScenePlay> *const)(v3 + 160));
    if ( v11 )
    {
      common::milog::MiLogStream::create(
        &v46,
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/player/gm/player_gm_comp.cpp",
        "procScenePlay",
        11653);
      v12 = common::milog::MiLogStream::operator<<<char [24],(char *[24])0>(
              &v46,
              (const char (*)[24])"createAndInitScenePlay ");
      v13 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v12, (const unsigned int *)(v3 + 64));
      common::milog::MiLogStream::operator<<<char [8],(char *[8])0>(v13, (const char (*)[8])" failed");
      common::milog::MiLogStream::~MiLogStream(&v46);
      v6 = -1;
    }
    else
    {
      v6 = 0;
    }
    goto LABEL_64;
  }
  v14 = std::vector<std::string>::operator[](param_vec, 0LL);
  if ( std::operator==<char>(v14, "ACTIVATE") )
  {
    *(_DWORD *)(v3 + 80) = 0;
    v15 = std::vector<std::string>::operator[](param_vec, 1uLL);
    common::tools::StringUtils::strToNum<unsigned int>(v15, (unsigned int *)(v3 + 80), 1);
    if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
      __asan_report_load8();
    v16 = Player::getScenePlayComp(context->player);
    if ( PlayerScenePlayComp::activateScenePlay(v16, *(_DWORD *)(v3 + 80)) )
    {
      common::milog::MiLogStream::create(
        &v46,
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/player/gm/player_gm_comp.cpp",
        "procScenePlay",
        11665);
      v17 = common::milog::MiLogStream::operator<<<char [19],(char *[19])0>(
              &v46,
              (const char (*)[19])"activateScenePlay ");
      v18 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v17, (const unsigned int *)(v3 + 80));
      common::milog::MiLogStream::operator<<<char [8],(char *[8])0>(v18, (const char (*)[8])" failed");
      common::milog::MiLogStream::~MiLogStream(&v46);
      v6 = -1;
    }
    else
    {
      v6 = 0;
    }
    goto LABEL_64;
  }
  v19 = std::vector<std::string>::operator[](param_vec, 0LL);
  if ( std::operator==<char>(v19, "OPEN") )
  {
    *(_DWORD *)(v3 + 80) = 0;
    v20 = std::vector<std::string>::operator[](param_vec, 1uLL);
    common::tools::StringUtils::strToNum<unsigned int>(v20, (unsigned int *)(v3 + 80), 1);
    if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
      __asan_report_load8();
    v21 = Player::getScenePlayComp(context->player);
    if ( PlayerScenePlayComp::openScenePlay(v21, *(_DWORD *)(v3 + 80)) )
    {
      common::milog::MiLogStream::create(
        &v46,
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/player/gm/player_gm_comp.cpp",
        "procScenePlay",
        11677);
      v22 = common::milog::MiLogStream::operator<<<char [15],(char *[15])0>(&v46, (const char (*)[15])"openScenePlay ");
      v23 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v22, (const unsigned int *)(v3 + 80));
      common::milog::MiLogStream::operator<<<char [8],(char *[8])0>(v23, (const char (*)[8])" failed");
      common::milog::MiLogStream::~MiLogStream(&v46);
      v6 = -1;
    }
    else
    {
      v6 = 0;
    }
    goto LABEL_64;
  }
  v24 = std::vector<std::string>::operator[](param_vec, 0LL);
  if ( std::operator==<char>(v24, "BATTLE") )
  {
    if ( std::vector<std::string>::size(param_vec) <= 2 )
    {
      common::milog::MiLogStream::create(
        &v46,
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/player/gm/player_gm_comp.cpp",
        "procScenePlay",
        11687);
      common::milog::MiLogStream::operator<<<char [17],(char *[17])0>(&v46, (const char (*)[17])"param not enough");
      common::milog::MiLogStream::~MiLogStream(&v46);
      v6 = -1;
      goto LABEL_64;
    }
    *(_DWORD *)(v3 + 48) = 0;
    *(_DWORD *)(v3 + 64) = 0;
    v25 = std::vector<std::string>::operator[](param_vec, 1uLL);
    common::tools::StringUtils::strToNum<unsigned int>(v25, (unsigned int *)(v3 + 48), 1);
    v26 = std::vector<std::string>::operator[](param_vec, 2uLL);
    common::tools::StringUtils::strToNum<unsigned int>(v26, (unsigned int *)(v3 + 64), 1);
    switch ( *(_DWORD *)(v3 + 64) )
    {
      case 1:
        if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
          __asan_report_load8();
        v27 = Player::getScenePlayComp(context->player);
        if ( PlayerScenePlayComp::enableScenePlayBattle(v27, *(_DWORD *)(v3 + 48), Direct) )
        {
          common::milog::MiLogStream::create(
            &v46,
            &common::milog::MiLogDefault::default_log_obj_,
            3u,
            "./src/player/gm/player_gm_comp.cpp",
            "procScenePlay",
            11699);
          v28 = common::milog::MiLogStream::operator<<<char [23],(char *[23])0>(
                  &v46,
                  (const char (*)[23])"enableScenePlayBattle ");
          v29 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                  v28,
                  (const unsigned int *)(v3 + 48));
          common::milog::MiLogStream::operator<<<char [8],(char *[8])0>(v29, (const char (*)[8])" failed");
          common::milog::MiLogStream::~MiLogStream(&v46);
          v6 = -1;
          goto LABEL_64;
        }
        goto LABEL_56;
      case 2:
        if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
          __asan_report_load8();
        v30 = Player::getScenePlayComp(context->player);
        if ( PlayerScenePlayComp::stopScenePlayBattle(v30, *(_DWORD *)(v3 + 48), 0) )
        {
          common::milog::MiLogStream::create(
            &v46,
            &common::milog::MiLogDefault::default_log_obj_,
            3u,
            "./src/player/gm/player_gm_comp.cpp",
            "procScenePlay",
            11708);
          v31 = common::milog::MiLogStream::operator<<<char [12],(char *[12])0>(&v46, (const char (*)[12])"stopBattle ");
          v32 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                  v31,
                  (const unsigned int *)(v3 + 48));
          common::milog::MiLogStream::operator<<<char [8],(char *[8])0>(v32, (const char (*)[8])" failed");
          common::milog::MiLogStream::~MiLogStream(&v46);
          v6 = -1;
          goto LABEL_64;
        }
        goto LABEL_56;
      case 3:
        if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
          __asan_report_load8();
        v33 = Player::getScenePlayComp(context->player);
        if ( PlayerScenePlayComp::stopScenePlayBattle(v33, *(_DWORD *)(v3 + 48), 1) )
        {
          common::milog::MiLogStream::create(
            &v46,
            &common::milog::MiLogDefault::default_log_obj_,
            3u,
            "./src/player/gm/player_gm_comp.cpp",
            "procScenePlay",
            11717);
          v34 = common::milog::MiLogStream::operator<<<char [12],(char *[12])0>(&v46, (const char (*)[12])"stopBattle ");
          v35 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                  v34,
                  (const unsigned int *)(v3 + 48));
          common::milog::MiLogStream::operator<<<char [8],(char *[8])0>(v35, (const char (*)[8])" failed");
          common::milog::MiLogStream::~MiLogStream(&v46);
          v6 = -1;
          goto LABEL_64;
        }
        goto LABEL_56;
    }
    if ( *(_DWORD *)(v3 + 64) != 4 )
    {
LABEL_56:
      v6 = 0;
      goto LABEL_64;
    }
    if ( std::vector<std::string>::size(param_vec) > 3 )
    {
      *(_DWORD *)(v3 + 80) = 0;
      v36 = std::vector<std::string>::operator[](param_vec, 3uLL);
      common::tools::StringUtils::strToNum<unsigned int>(v36, (unsigned int *)(v3 + 80), 1);
      if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
        __asan_report_load8();
      v37 = (unsigned int)Player::getScenePlayComp(context->player);
      PlayerScenePlayComp::findScenePlayPtr((PlayerScenePlayComp *const)(v3 + 128), v37);
      if ( std::operator==<BaseScenePlay>(0LL, (const std::shared_ptr<BaseScenePlay> *)(v3 + 128)) )
      {
        v6 = -1;
      }
      else
      {
        std::__shared_ptr_access<BaseScenePlay,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<BaseScenePlay,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 128));
        BaseScenePlay::findBattlePtr((BaseScenePlay *const)(v3 + 160));
        if ( std::operator==<BaseScenePlayBattle>(0LL, (const std::shared_ptr<BaseScenePlayBattle> *)(v3 + 160)) )
        {
          v6 = -1;
        }
        else
        {
          v38 = std::__shared_ptr_access<BaseScenePlayBattle,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<BaseScenePlayBattle,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 160));
          v6 = BaseScenePlayBattle::addProgress(v38, *(_DWORD *)(v3 + 80));
        }
        std::shared_ptr<BaseScenePlayBattle>::~shared_ptr((std::shared_ptr<BaseScenePlayBattle> *const)(v3 + 160));
      }
      std::shared_ptr<BaseScenePlay>::~shared_ptr((std::shared_ptr<BaseScenePlay> *const)(v3 + 128));
    }
    else
    {
      common::milog::MiLogStream::create(
        &v46,
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/player/gm/player_gm_comp.cpp",
        "procScenePlay",
        11725);
      common::milog::MiLogStream::operator<<<char [17],(char *[17])0>(&v46, (const char (*)[17])"param not enough");
      common::milog::MiLogStream::~MiLogStream(&v46);
      v6 = -1;
    }
  }
  else
  {
    v39 = std::vector<std::string>::operator[](param_vec, 0LL);
    if ( std::operator==<char>(v39, "CLOSE") )
    {
      *(_DWORD *)(v3 + 80) = 0;
      v40 = std::vector<std::string>::operator[](param_vec, 1uLL);
      common::tools::StringUtils::strToNum<unsigned int>(v40, (unsigned int *)(v3 + 80), 1);
      if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
        __asan_report_load8();
      v41 = Player::getScenePlayComp(context->player);
      if ( PlayerScenePlayComp::closeScenePlay(v41, *(_DWORD *)(v3 + 80)) )
      {
        common::milog::MiLogStream::create(
          &v46,
          &common::milog::MiLogDefault::default_log_obj_,
          3u,
          "./src/player/gm/player_gm_comp.cpp",
          "procScenePlay",
          11754);
        v42 = common::milog::MiLogStream::operator<<<char [23],(char *[23])0>(
                &v46,
                (const char (*)[23])"enableScenePlayBattle ");
        v43 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                v42,
                (const unsigned int *)(v3 + 80));
        common::milog::MiLogStream::operator<<<char [8],(char *[8])0>(v43, (const char (*)[8])" failed");
        common::milog::MiLogStream::~MiLogStream(&v46);
        v6 = -1;
      }
      else
      {
        v6 = 0;
      }
    }
    else
    {
      std::string::operator=(ret_msg, &off_26364780);
      v6 = -1;
    }
  }
LABEL_64:
  result = v6;
  if ( v47 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8010) = 0LL;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 11765: range 0000000017D7A06E-0000000017D7A110
void __cdecl groupReloadPressRegister::groupReloadPressRegister(groupReloadPressRegister *const this)
{
  std::function<int(GmContext&,const std::vector<std::string>&,std::string&)> *v1; // rax
  std::allocator<char> __a; // [rsp+1Fh] [rbp-31h] BYREF
  std::string __k; // [rsp+20h] [rbp-30h] BYREF

  std::allocator<char>::allocator(&__a);
  std::string::basic_string<std::allocator<char>>(&__k, "GROUP_RELOAD_PRESS", &__a);
  v1 = std::unordered_map<std::string,std::function<int ()(GmContext &,std::vector<std::string> const&,std::string&)>>::operator[](
         &GmUtils::op_func_map[abi:cxx11],
         &__k);
  std::function<int ()(GmContext &,std::vector<std::string> const&,std::string&)>::operator=<int (&)(GmContext &,std::vector<std::string> const&,std::string&)>(
    v1,
    (int (*)(GmContext *, const std::vector<std::string> *, std::string *))groupReloadPress);
  std::string::~string(&__k);
  std::allocator<char>::~allocator(&__a);
};

// Line 11766: range 0000000017C216D2-0000000017C222E3
int32_t __cdecl groupReloadPress(GmContext *context, const std::vector<std::string> *param_vec, std::string *ret_msg)
{
  int32_t v3; // r14d
  unsigned __int64 v4; // r13
  __int64 v5; // rax
  _DWORD *v6; // r12
  PlayerSceneComp *SceneComp; // r15
  const Vector3 *Rotation; // rcx
  bool v9; // r15
  common::milog::MiLogStream *v10; // rcx
  uint32_t EnterSceneToken; // eax
  int v12; // r15d
  uint32_t v13; // eax
  int v14; // r15d
  uint32_t v15; // eax
  int v16; // r15d
  uint32_t v17; // eax
  int v18; // r15d
  PlayerDailyTaskComp *DailyTaskComp; // rax
  PlayerDailyTaskComp *v20; // rax
  PlayerDailyTaskComp *v21; // rax
  Scene *scene; // rax
  const std::shared_ptr<Monster> *v23; // rax
  std::__shared_ptr_access<Monster,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v24; // rax
  int32_t result; // eax
  std::vector<std::shared_ptr<Monster>>::iterator __for_begin; // [rsp+28h] [rbp-248h] BYREF
  std::vector<std::shared_ptr<Monster>>::iterator __for_end; // [rsp+30h] [rbp-240h] BYREF
  Player *player; // [rsp+38h] [rbp-238h]
  PlayerSceneComp *scene_comp; // [rsp+40h] [rbp-230h]
  std::vector<std::shared_ptr<Monster>> *__for_range; // [rsp+48h] [rbp-228h]
  std::shared_ptr<Avatar> __r; // [rsp+50h] [rbp-220h] BYREF
  common::milog::MiLogStream v32; // [rsp+60h] [rbp-210h] BYREF
  TransferReason p_reason; // [rsp+80h] [rbp-1F0h] BYREF
  char v34[432]; // [rsp+C0h] [rbp-1B0h] BYREF

  v4 = (unsigned __int64)v34;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v5 = __asan_stack_malloc_3(384LL);
    if ( v5 )
      v4 = v5;
  }
  *(_QWORD *)v4 = 1102416563LL;
  *(_QWORD *)(v4 + 8) = "5 48 12 9 pos:11767 80 16 17 monster_ptr:11831 112 24 17 monster_vec:11828 176 48 13 visitor:118"
                        "29 256 96 16 hp_context:11825";
  *(_QWORD *)(v4 + 16) = groupReloadPress;
  v6 = (_DWORD *)(v4 >> 3);
  v6[536862720] = -235802127;
  v6[536862721] = 61937;
  v6[536862721] = 0x4000000;
  v6[536862722] = 62194;
  v6[536862723] = 62194;
  v6[536862724] = -218959360;
  v6[536862725] = 62194;
  v6[536862727] = -218959118;
  v6[536862731] = -202116109;
  Vector3::Vector3((Vector3 *const)(v4 + 48), 2189.0, 267.0, -1732.0);
  if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
    __asan_report_load8();
  SceneComp = Player::getSceneComp(context->player);
  TransferReason::TransferReason(&p_reason, ENTER_REASON_GM);
  if ( *(_BYTE *)(((unsigned __int64)&context->avatar >> 3) + 0x7FFF8000) )
    __asan_report_load8();
  Rotation = Entity::getRotation((const Entity *const)context->avatar);
  if ( *(_BYTE *)(((unsigned __int64)&context->scene >> 3) + 0x7FFF8000) )
    __asan_report_load8();
  v9 = PlayerSceneComp::jumpToScene(SceneComp, context->scene, (const Vector3 *)(v4 + 48), Rotation, 0, &p_reason) != 0;
  TransferReason::~TransferReason(&p_reason);
  if ( v9 )
  {
    common::milog::MiLogStream::create(
      &v32,
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/player/gm/player_gm_comp.cpp",
      "groupReloadPress",
      11770);
    v10 = common::milog::MiLogStream::operator<<<char [20],(char *[20])0>(
            &v32,
            (const char (*)[20])"jumpToScene fails, ");
    if ( *(_BYTE *)(((unsigned __int64)context >> 3) + 0x7FFF8000) )
      __asan_report_load8();
    common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v10, context->msg);
    common::milog::MiLogStream::~MiLogStream(&v32);
    v3 = -1;
  }
  else
  {
    if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
      __asan_report_load8();
    player = context->player;
    scene_comp = Player::getSceneComp(context->player);
    proto::EnterSceneReadyReq::EnterSceneReadyReq((proto::EnterSceneReadyReq *const)(v4 + 112));
    EnterSceneToken = PlayerSceneComp::getEnterSceneToken(scene_comp);
    proto::EnterSceneReadyReq::set_enter_scene_token((proto::EnterSceneReadyReq *const)(v4 + 112), EnterSceneToken);
    if ( Player::enterSceneReady(player, (const proto::EnterSceneReadyReq *)(v4 + 112)) )
    {
      common::milog::MiLogStream::create(
        &v32,
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/player/gm/player_gm_comp.cpp",
        "groupReloadPress",
        11781);
      common::milog::MiLogStream::operator<<<char [28],(char *[28])0>(
        &v32,
        (const char (*)[28])"enter scene ready req fails");
      common::milog::MiLogStream::~MiLogStream(&v32);
      v3 = -1;
      v12 = 0;
    }
    else
    {
      v12 = 1;
    }
    proto::EnterSceneReadyReq::~EnterSceneReadyReq((proto::EnterSceneReadyReq *const)(v4 + 112));
    if ( v12 == 1 )
    {
      proto::SceneInitFinishReq::SceneInitFinishReq((proto::SceneInitFinishReq *const)(v4 + 112));
      v13 = PlayerSceneComp::getEnterSceneToken(scene_comp);
      proto::SceneInitFinishReq::set_enter_scene_token((proto::SceneInitFinishReq *const)(v4 + 112), v13);
      if ( Player::sceneInitFinish(player, (const proto::SceneInitFinishReq *)(v4 + 112)) )
      {
        common::milog::MiLogStream::create(
          &v32,
          &common::milog::MiLogDefault::default_log_obj_,
          3u,
          "./src/player/gm/player_gm_comp.cpp",
          "groupReloadPress",
          11791);
        common::milog::MiLogStream::operator<<<char [28],(char *[28])0>(
          &v32,
          (const char (*)[28])"scene init finish req fails");
        common::milog::MiLogStream::~MiLogStream(&v32);
        v3 = -1;
        v14 = 0;
      }
      else
      {
        v14 = 1;
      }
      proto::SceneInitFinishReq::~SceneInitFinishReq((proto::SceneInitFinishReq *const)(v4 + 112));
      if ( v14 == 1 )
      {
        proto::EnterSceneDoneReq::EnterSceneDoneReq((proto::EnterSceneDoneReq *const)(v4 + 112));
        v15 = PlayerSceneComp::getEnterSceneToken(scene_comp);
        proto::EnterSceneDoneReq::set_enter_scene_token((proto::EnterSceneDoneReq *const)(v4 + 112), v15);
        if ( Player::enterSceneDone(player, (const proto::EnterSceneDoneReq *)(v4 + 112)) )
        {
          common::milog::MiLogStream::create(
            &v32,
            &common::milog::MiLogDefault::default_log_obj_,
            3u,
            "./src/player/gm/player_gm_comp.cpp",
            "groupReloadPress",
            11801);
          common::milog::MiLogStream::operator<<<char [24],(char *[24])0>(
            &v32,
            (const char (*)[24])"EnterSceneDoneReq fails");
          common::milog::MiLogStream::~MiLogStream(&v32);
          v3 = -1;
          v16 = 0;
        }
        else
        {
          v16 = 1;
        }
        proto::EnterSceneDoneReq::~EnterSceneDoneReq((proto::EnterSceneDoneReq *const)(v4 + 112));
        if ( v16 == 1 )
        {
          proto::PostEnterSceneReq::PostEnterSceneReq((proto::PostEnterSceneReq *const)(v4 + 112));
          v17 = PlayerSceneComp::getEnterSceneToken(scene_comp);
          proto::PostEnterSceneReq::set_enter_scene_token((proto::PostEnterSceneReq *const)(v4 + 112), v17);
          if ( Player::postEnterScene(player, (const proto::PostEnterSceneReq *)(v4 + 112)) )
          {
            common::milog::MiLogStream::create(
              &v32,
              &common::milog::MiLogDefault::default_log_obj_,
              3u,
              "./src/player/gm/player_gm_comp.cpp",
              "groupReloadPress",
              11811);
            common::milog::MiLogStream::operator<<<char [24],(char *[24])0>(
              &v32,
              (const char (*)[24])"PostEnterSceneReq fails");
            common::milog::MiLogStream::~MiLogStream(&v32);
            v3 = -1;
            v18 = 0;
          }
          else
          {
            v18 = 1;
          }
          proto::PostEnterSceneReq::~PostEnterSceneReq((proto::PostEnterSceneReq *const)(v4 + 112));
          if ( v18 == 1 )
          {
            DailyTaskComp = Player::getDailyTaskComp(player);
            PlayerDailyTaskComp::clearByGm(DailyTaskComp);
            v20 = Player::getDailyTaskComp(player);
            PlayerDailyTaskComp::tryRefresh(v20, 1);
            v21 = Player::getDailyTaskComp(player);
            if ( PlayerDailyTaskComp::addDailyTaskByGm(v21, 0x277Bu) )
            {
              common::milog::MiLogStream::create(
                &v32,
                &common::milog::MiLogDefault::default_log_obj_,
                3u,
                "./src/player/gm/player_gm_comp.cpp",
                "groupReloadPress",
                11820);
              common::milog::MiLogStream::operator<<<char [29],(char *[29])0>(
                &v32,
                (const char (*)[29])"addDailyTaskByGm 10107 fails");
              common::milog::MiLogStream::~MiLogStream(&v32);
              v3 = -1;
            }
            else
            {
              ChangeHpContext::ChangeHpContext((ChangeHpContext *const)(v4 + 256));
              *(_DWORD *)(v4 + 256) = 11;
              if ( *(_BYTE *)(((unsigned __int64)&context->avatar >> 3) + 0x7FFF8000) )
                __asan_report_load8();
              toThisPtr<Avatar>((Avatar *)(v4 + 80));
              std::shared_ptr<Creature>::operator=<Avatar>(
                (std::shared_ptr<Creature> *const)(v4 + 264),
                (std::shared_ptr<Avatar> *)(v4 + 80));
              std::shared_ptr<Avatar>::~shared_ptr((std::shared_ptr<Avatar> *const)(v4 + 80));
              std::vector<std::shared_ptr<Monster>>::vector((std::vector<std::shared_ptr<Monster>> *const)(v4 + 112));
              if ( *(_BYTE *)(((unsigned __int64)&context->avatar >> 3) + 0x7FFF8000) )
                __asan_report_load8();
              toThisPtr<Avatar>((Avatar *)&__r);
              std::shared_ptr<Entity>::shared_ptr<Avatar,void>((std::shared_ptr<Entity> *const)(v4 + 80), &__r);
              ZN13EntityVisitorCI27VisitorESt10shared_ptrI6EntityE(
                (EntityVisitor *const)(v4 + 176),
                (EntityPtr *)(v4 + 80));
              std::shared_ptr<Entity>::~shared_ptr((std::shared_ptr<Entity> *const)(v4 + 80));
              std::shared_ptr<Avatar>::~shared_ptr(&__r);
              if ( *(_BYTE *)(((unsigned __int64)&context->scene >> 3) + 0x7FFF8000) )
                __asan_report_load8();
              scene = context->scene;
              if ( *(_BYTE *)(((unsigned __int64)&context->avatar >> 3) + 0x7FFF8000) )
                __asan_report_load8();
              Scene::getSurroundEntities<std::shared_ptr<Monster>>(
                scene,
                (Visitor *)(v4 + 176),
                (Entity *)context->avatar,
                (std::vector<std::shared_ptr<Monster>> *)(v4 + 112));
              __for_range = (std::vector<std::shared_ptr<Monster>> *)(v4 + 112);
              __for_begin._M_current = std::vector<std::shared_ptr<Monster>>::begin((std::vector<std::shared_ptr<Monster>> *const)(v4 + 112))._M_current;
              __for_end._M_current = std::vector<std::shared_ptr<Monster>>::end((std::vector<std::shared_ptr<Monster>> *const)(v4 + 112))._M_current;
              while ( __gnu_cxx::operator!=<std::shared_ptr<Monster> *,std::vector<std::shared_ptr<Monster>>>(
                        &__for_begin,
                        &__for_end) )
              {
                v23 = __gnu_cxx::__normal_iterator<std::shared_ptr<Monster> *,std::vector<std::shared_ptr<Monster>>>::operator*(&__for_begin);
                std::shared_ptr<Monster>::shared_ptr((std::shared_ptr<Monster> *const)(v4 + 80), v23);
                v24 = std::__shared_ptr_access<Monster,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Monster,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 80));
                Creature::subCurHpToZero(v24, (ChangeHpContext *)(v4 + 256), 1);
                std::shared_ptr<Monster>::~shared_ptr((std::shared_ptr<Monster> *const)(v4 + 80));
                __gnu_cxx::__normal_iterator<std::shared_ptr<Monster> *,std::vector<std::shared_ptr<Monster>>>::operator++(&__for_begin);
              }
              v3 = 0;
              EntityVisitor::~EntityVisitor((EntityVisitor *const)(v4 + 176));
              std::vector<std::shared_ptr<Monster>>::~vector((std::vector<std::shared_ptr<Monster>> *const)(v4 + 112));
              ChangeHpContext::~ChangeHpContext((ChangeHpContext *const)(v4 + 256));
            }
          }
        }
      }
    }
  }
  result = v3;
  if ( v34 == (char *)v4 )
  {
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8008) = 0LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8010) = 0LL;
    *(_DWORD *)((v4 >> 3) + 0x7FFF801C) = 0;
    *(_DWORD *)((v4 >> 3) + 0x7FFF802C) = 0;
  }
  else
  {
    *(_QWORD *)v4 = 1172321806LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8020) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8028) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 11839: range 0000000017D7A112-0000000017D7A1B4
void __cdecl procGroupLuaTestRegister::procGroupLuaTestRegister(procGroupLuaTestRegister *const this)
{
  std::function<int(GmContext&,const std::vector<std::string>&,std::string&)> *v1; // rax
  std::allocator<char> __a; // [rsp+1Fh] [rbp-31h] BYREF
  std::string __k; // [rsp+20h] [rbp-30h] BYREF

  std::allocator<char>::allocator(&__a);
  std::string::basic_string<std::allocator<char>>(&__k, "GROUP_LUA_TEST", &__a);
  v1 = std::unordered_map<std::string,std::function<int ()(GmContext &,std::vector<std::string> const&,std::string&)>>::operator[](
         &GmUtils::op_func_map[abi:cxx11],
         &__k);
  std::function<int ()(GmContext &,std::vector<std::string> const&,std::string&)>::operator=<int (&)(GmContext &,std::vector<std::string> const&,std::string&)>(
    v1,
    (int (*)(GmContext *, const std::vector<std::string> *, std::string *))procGroupLuaTest);
  std::string::~string(&__k);
  std::allocator<char>::~allocator(&__a);
};

// Line 11840: range 0000000017C222E4-0000000017C22487
int32_t __cdecl procGroupLuaTest(GmContext *context, const std::vector<std::string> *param_vec, std::string *ret_msg)
{
  unsigned __int64 v3; // rbx
  __int64 v4; // rax
  unsigned __int64 v5; // r12
  int32_t result; // eax
  const std::string *v7; // rax
  PlayerGmComp *GmComp; // rax
  char v10[96]; // [rsp+30h] [rbp-60h] BYREF

  v3 = (unsigned __int64)v10;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_0(64LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "1 32 4 14 scene_id:11846";
  *(_QWORD *)(v3 + 16) = procGroupLuaTest;
  v5 = v3 >> 3;
  *(_DWORD *)(v5 + 2147450880) = -235802127;
  *(_DWORD *)(v5 + 2147450884) = -202116348;
  if ( std::vector<std::string>::size(param_vec) )
  {
    *(_DWORD *)(v3 + 32) = 0;
    v7 = std::vector<std::string>::operator[](param_vec, 0LL);
    common::tools::StringUtils::strToNum<unsigned int>(v7, (unsigned int *)(v3 + 32), 1);
    if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
      __asan_report_load8();
    GmComp = Player::getGmComp(context->player);
    if ( PlayerGmComp::testGroupLua(GmComp, *(_DWORD *)(v3 + 32), ret_msg) )
    {
      std::string::operator=(ret_msg, "test failed");
      result = -1;
    }
    else
    {
      result = 0;
    }
  }
  else
  {
    std::string::operator=(ret_msg, "param not enough");
    result = -1;
  }
  if ( v10 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 11858: range 0000000017D7A1B6-0000000017D7A258
void __cdecl procWidgetRegister::procWidgetRegister(procWidgetRegister *const this)
{
  std::function<int(GmContext&,const std::vector<std::string>&,std::string&)> *v1; // rax
  std::allocator<char> __a; // [rsp+1Fh] [rbp-31h] BYREF
  std::string __k; // [rsp+20h] [rbp-30h] BYREF

  std::allocator<char>::allocator(&__a);
  std::string::basic_string<std::allocator<char>>(&__k, "WIDGET", &__a);
  v1 = std::unordered_map<std::string,std::function<int ()(GmContext &,std::vector<std::string> const&,std::string&)>>::operator[](
         &GmUtils::op_func_map[abi:cxx11],
         &__k);
  std::function<int ()(GmContext &,std::vector<std::string> const&,std::string&)>::operator=<int (&)(GmContext &,std::vector<std::string> const&,std::string&)>(
    v1,
    (int (*)(GmContext *, const std::vector<std::string> *, std::string *))procWidget);
  std::string::~string(&__k);
  std::allocator<char>::~allocator(&__a);
};

// Line 11859: range 0000000017C22488-0000000017C2316D
int32_t __cdecl procWidget(GmContext *context, const std::vector<std::string> *param_vec, std::string *ret_msg)
{
  unsigned __int64 v3; // r13
  __int64 v4; // rax
  _DWORD *v5; // r12
  int32_t v6; // r14d
  const std::string *v7; // rax
  const std::string *v8; // rax
  std::__shared_ptr_access<WidgetHandler,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v9; // rax
  common::milog::MiLogStream *v10; // r14
  common::milog::MiLogStream *v11; // rax
  common::milog::MiLogStream *v12; // rax
  const std::string *v13; // rax
  std::__shared_ptr_access<WidgetHandler,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v14; // rax
  common::milog::MiLogStream *v15; // r14
  common::milog::MiLogStream *v16; // rax
  common::milog::MiLogStream *v17; // rax
  const std::string *v18; // rax
  const std::string *v19; // rax
  const std::string *v20; // rax
  std::__shared_ptr_access<WidgetHandler,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v21; // rax
  common::milog::MiLogStream *v22; // r14
  const std::string *v23; // rax
  const std::string *v24; // rax
  const std::string *v25; // rax
  std::__shared_ptr_access<WidgetHandler,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v26; // rax
  common::milog::MiLogStream *v27; // r14
  const std::string *v28; // rax
  const std::string *v29; // rax
  PlayerGmComp *GmComp; // rax
  int32_t result; // eax
  common::milog::MiLogStream v33; // [rsp+20h] [rbp-290h] BYREF
  common::milog::MiLogStream v34; // [rsp+40h] [rbp-270h] BYREF
  char v35[592]; // [rsp+60h] [rbp-250h] BYREF

  v3 = (unsigned __int64)v35;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_4(544LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "10 48 1 10 flag:11941 64 4 17 material_id:11881 80 4 17 material_id:11922 96 16 14 base_ptr:1186"
                        "6 128 16 17 handler_ptr:11872 160 32 9 req:11930 224 32 9 rsp:11933 288 40 9 rsp:11895 368 48 9 "
                        "req:11883 448 56 9 rsp:11884";
  *(_QWORD *)(v3 + 16) = procWidget;
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = -234753551;
  v5[536862722] = -234556924;
  v5[536862723] = -219021312;
  v5[536862724] = -219021312;
  v5[536862726] = -218959118;
  v5[536862728] = -218959118;
  v5[536862730] = -218959360;
  v5[536862731] = 62194;
  v5[536862733] = -218959118;
  v5[536862735] = -218103808;
  v5[536862736] = -202116109;
  if ( std::vector<std::string>::size(param_vec) > 1 )
  {
    if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
      __asan_report_load8();
    Player::getPlayerHandlerPtr((Player *const)(v3 + 96), (uint32_t)context->player);
    if ( std::operator==<PlayerHandlerBase>((const std::shared_ptr<PlayerHandlerBase> *)(v3 + 96), 0LL) )
    {
      common::milog::MiLogStream::create(
        &v34,
        &common::milog::MiLogDefault::default_log_obj_,
        1u,
        "./src/player/gm/player_gm_comp.cpp",
        "procWidget",
        11869);
      common::milog::MiLogStream::operator<<<char [21],(char *[21])0>(&v34, (const char (*)[21])" get handler failed ");
      common::milog::MiLogStream::~MiLogStream(&v34);
      v6 = -1;
    }
    else
    {
      std::dynamic_pointer_cast<WidgetHandler,PlayerHandlerBase>((const std::shared_ptr<PlayerHandlerBase> *)(v3 + 128));
      if ( std::operator==<WidgetHandler>(0LL, (const std::shared_ptr<WidgetHandler> *)(v3 + 128)) )
      {
        common::milog::MiLogStream::create(
          &v34,
          &common::milog::MiLogDefault::default_log_obj_,
          1u,
          "./src/player/gm/player_gm_comp.cpp",
          "procWidget",
          11875);
        common::milog::MiLogStream::operator<<<char [28],(char *[28])0>(
          &v34,
          (const char (*)[28])" cast WidgetHandler failed ");
        common::milog::MiLogStream::~MiLogStream(&v34);
        v6 = -1;
      }
      else
      {
        v7 = std::vector<std::string>::operator[](param_vec, 0LL);
        if ( std::operator==<char>(v7, "SET_QUICK_USE") )
        {
          *(_DWORD *)(v3 + 64) = 0;
          v8 = std::vector<std::string>::operator[](param_vec, 1uLL);
          common::tools::StringUtils::strToNum<unsigned int>(v8, (unsigned int *)(v3 + 64), 1);
          proto::SetWidgetSlotReq::SetWidgetSlotReq((proto::SetWidgetSlotReq *const)(v3 + 368));
          proto::SetWidgetSlotRsp::SetWidgetSlotRsp((proto::SetWidgetSlotRsp *const)(v3 + 448));
          proto::SetWidgetSlotReq::set_material_id((proto::SetWidgetSlotReq *const)(v3 + 368), *(_DWORD *)(v3 + 64));
          proto::SetWidgetSlotReq::set_op((proto::SetWidgetSlotReq *const)(v3 + 368), WIDGET_SLOT_OP_ATTACH);
          v9 = std::__shared_ptr_access<WidgetHandler,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<WidgetHandler,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 128));
          *(_DWORD *)(v3 + 80) = WidgetHandler::onSetWidgetSlotReq(
                                   v9,
                                   (const proto::SetWidgetSlotReq *)(v3 + 368),
                                   (proto::SetWidgetSlotRsp *)(v3 + 448));
          common::milog::MiLogStream::create(
            &v33,
            &common::milog::MiLogDefault::default_log_obj_,
            1u,
            "./src/player/gm/player_gm_comp.cpp",
            "procWidget",
            11888);
          v10 = common::milog::MiLogStream::operator<<<char [21],(char *[21])0>(
                  &v33,
                  (const char (*)[21])"onSetWidgetSlotReq: ");
          google::protobuf::Message::DebugString[abi:cxx11](
            (std::string *)&v34,
            (google::protobuf::Message *)(v3 + 448));
          v11 = common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v10, (const std::string *)&v34);
          v12 = common::milog::MiLogStream::operator<<<char [7],(char *[7])0>(v11, (const char (*)[7])" ret: ");
          common::milog::MiLogStream::operator<<<int,(int *)0>(v12, (const int *)(v3 + 80));
          std::string::~string(&v34);
          common::milog::MiLogStream::~MiLogStream(&v33);
          v6 = 0;
          proto::SetWidgetSlotRsp::~SetWidgetSlotRsp((proto::SetWidgetSlotRsp *const)(v3 + 448));
          proto::SetWidgetSlotReq::~SetWidgetSlotReq((proto::SetWidgetSlotReq *const)(v3 + 368));
        }
        else
        {
          v13 = std::vector<std::string>::operator[](param_vec, 0LL);
          if ( std::operator==<char>(v13, "QUICK_USE") )
          {
            proto::QuickUseWidgetReq::QuickUseWidgetReq((proto::QuickUseWidgetReq *const)(v3 + 224));
            proto::QuickUseWidgetRsp::QuickUseWidgetRsp((proto::QuickUseWidgetRsp *const)(v3 + 288));
            v14 = std::__shared_ptr_access<WidgetHandler,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<WidgetHandler,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 128));
            *(_DWORD *)(v3 + 80) = WidgetHandler::onQuickUseWidgetReq(
                                     v14,
                                     (const proto::QuickUseWidgetReq *)(v3 + 224),
                                     (proto::QuickUseWidgetRsp *)(v3 + 288));
            common::milog::MiLogStream::create(
              &v33,
              &common::milog::MiLogDefault::default_log_obj_,
              1u,
              "./src/player/gm/player_gm_comp.cpp",
              "procWidget",
              11897);
            v15 = common::milog::MiLogStream::operator<<<char [20],(char *[20])0>(
                    &v33,
                    (const char (*)[20])"QuickUseWidgetRsp: ");
            google::protobuf::Message::DebugString[abi:cxx11](
              (std::string *)&v34,
              (google::protobuf::Message *)(v3 + 288));
            v16 = common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v15, (const std::string *)&v34);
            v17 = common::milog::MiLogStream::operator<<<char [7],(char *[7])0>(v16, (const char (*)[7])" ret: ");
            common::milog::MiLogStream::operator<<<int,(int *)0>(v17, (const int *)(v3 + 80));
            std::string::~string(&v34);
            common::milog::MiLogStream::~MiLogStream(&v33);
            v6 = 0;
            proto::QuickUseWidgetRsp::~QuickUseWidgetRsp((proto::QuickUseWidgetRsp *const)(v3 + 288));
            proto::QuickUseWidgetReq::~QuickUseWidgetReq((proto::QuickUseWidgetReq *const)(v3 + 224));
          }
          else
          {
            v18 = std::vector<std::string>::operator[](param_vec, 0LL);
            if ( std::operator==<char>(v18, "REPORT_CLEAR_HINT") )
            {
              *(_DWORD *)(v3 + 80) = 0;
              v19 = std::vector<std::string>::operator[](param_vec, 1uLL);
              common::tools::StringUtils::strToNum<unsigned int>(v19, (unsigned int *)(v3 + 80), 1);
              *(_BYTE *)(v3 + 48) = 0;
              if ( std::vector<std::string>::size(param_vec) > 2 )
              {
                v20 = std::vector<std::string>::operator[](param_vec, 2uLL);
                common::tools::StringUtils::strToNum<bool>(v20, (bool *)(v3 + 48), 1);
              }
              proto::WidgetReportReq::WidgetReportReq((proto::WidgetReportReq *const)(v3 + 160));
              proto::WidgetReportReq::set_material_id((proto::WidgetReportReq *const)(v3 + 160), *(_DWORD *)(v3 + 80));
              proto::WidgetReportReq::set_is_clear_hint((proto::WidgetReportReq *const)(v3 + 160), *(_BYTE *)(v3 + 48));
              proto::WidgetReportRsp::WidgetReportRsp((proto::WidgetReportRsp *const)(v3 + 224));
              v21 = std::__shared_ptr_access<WidgetHandler,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<WidgetHandler,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 128));
              WidgetHandler::onWidgetReportReq(
                v21,
                (const proto::WidgetReportReq *)(v3 + 160),
                (proto::WidgetReportRsp *)(v3 + 224));
              common::milog::MiLogStream::create(
                &v33,
                &common::milog::MiLogDefault::default_log_obj_,
                1u,
                "./src/player/gm/player_gm_comp.cpp",
                "procWidget",
                11916);
              v22 = common::milog::MiLogStream::operator<<<char [18],(char *[18])0>(
                      &v33,
                      (const char (*)[18])"WidgetReportRsp: ");
              google::protobuf::Message::DebugString[abi:cxx11](
                (std::string *)&v34,
                (google::protobuf::Message *)(v3 + 224));
              common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v22, (const std::string *)&v34);
              std::string::~string(&v34);
              common::milog::MiLogStream::~MiLogStream(&v33);
              v6 = 0;
              proto::WidgetReportRsp::~WidgetReportRsp((proto::WidgetReportRsp *const)(v3 + 224));
              proto::WidgetReportReq::~WidgetReportReq((proto::WidgetReportReq *const)(v3 + 160));
            }
            else
            {
              v23 = std::vector<std::string>::operator[](param_vec, 0LL);
              if ( std::operator==<char>(v23, "REPORT_WIND_FRAG") )
              {
                *(_DWORD *)(v3 + 80) = 0;
                v24 = std::vector<std::string>::operator[](param_vec, 1uLL);
                common::tools::StringUtils::strToNum<unsigned int>(v24, (unsigned int *)(v3 + 80), 1);
                *(_BYTE *)(v3 + 48) = 0;
                if ( std::vector<std::string>::size(param_vec) > 2 )
                {
                  v25 = std::vector<std::string>::operator[](param_vec, 2uLL);
                  common::tools::StringUtils::strToNum<bool>(v25, (bool *)(v3 + 48), 1);
                }
                proto::WidgetReportReq::WidgetReportReq((proto::WidgetReportReq *const)(v3 + 160));
                proto::WidgetReportReq::set_material_id((proto::WidgetReportReq *const)(v3 + 160), *(_DWORD *)(v3 + 80));
                proto::WidgetReportReq::set_is_client_collect(
                  (proto::WidgetReportReq *const)(v3 + 160),
                  *(_BYTE *)(v3 + 48));
                proto::WidgetReportRsp::WidgetReportRsp((proto::WidgetReportRsp *const)(v3 + 224));
                v26 = std::__shared_ptr_access<WidgetHandler,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<WidgetHandler,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 128));
                WidgetHandler::onWidgetReportReq(
                  v26,
                  (const proto::WidgetReportReq *)(v3 + 160),
                  (proto::WidgetReportRsp *)(v3 + 224));
                common::milog::MiLogStream::create(
                  &v33,
                  &common::milog::MiLogDefault::default_log_obj_,
                  1u,
                  "./src/player/gm/player_gm_comp.cpp",
                  "procWidget",
                  11935);
                v27 = common::milog::MiLogStream::operator<<<char [18],(char *[18])0>(
                        &v33,
                        (const char (*)[18])"WidgetReportRsp: ");
                google::protobuf::Message::DebugString[abi:cxx11](
                  (std::string *)&v34,
                  (google::protobuf::Message *)(v3 + 224));
                common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v27, (const std::string *)&v34);
                std::string::~string(&v34);
                common::milog::MiLogStream::~MiLogStream(&v33);
                v6 = 0;
                proto::WidgetReportRsp::~WidgetReportRsp((proto::WidgetReportRsp *const)(v3 + 224));
                proto::WidgetReportReq::~WidgetReportReq((proto::WidgetReportReq *const)(v3 + 160));
              }
              else
              {
                v28 = std::vector<std::string>::operator[](param_vec, 0LL);
                if ( std::operator==<char>(v28, "OPEN_ALL_GATHER") )
                {
                  *(_BYTE *)(v3 + 48) = 0;
                  v29 = std::vector<std::string>::operator[](param_vec, 1uLL);
                  common::tools::StringUtils::strToNum<bool>(v29, (bool *)(v3 + 48), 1);
                  if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
                    __asan_report_load8();
                  GmComp = Player::getGmComp(context->player);
                  PlayerGmComp::setGmSetValue<bool>(GmComp, 4u, (const bool *)(v3 + 48));
                  v6 = 0;
                }
                else
                {
                  v6 = -1;
                }
              }
            }
          }
        }
      }
      std::shared_ptr<WidgetHandler>::~shared_ptr((std::shared_ptr<WidgetHandler> *const)(v3 + 128));
    }
    std::shared_ptr<PlayerHandlerBase>::~shared_ptr((std::shared_ptr<PlayerHandlerBase> *const)(v3 + 96));
  }
  else
  {
    std::string::operator=(ret_msg, "param not enough");
    v6 = -1;
  }
  result = v6;
  if ( v35 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8010) = 0;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8018) = 0;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8020) = 0;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8028) = 0LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8034) = 0;
    *(_QWORD *)((v3 >> 3) + 0x7FFF803C) = 0LL;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8020) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8028) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8030) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8038) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8040) = -168430091;
  }
  return result;
};

// Line 11950: range 0000000017D7A25A-0000000017D7A2FC
void __cdecl procPlayTeamEntityRegister::procPlayTeamEntityRegister(procPlayTeamEntityRegister *const this)
{
  std::function<int(GmContext&,const std::vector<std::string>&,std::string&)> *v1; // rax
  std::allocator<char> __a; // [rsp+1Fh] [rbp-31h] BYREF
  std::string __k; // [rsp+20h] [rbp-30h] BYREF

  std::allocator<char>::allocator(&__a);
  std::string::basic_string<std::allocator<char>>(&__k, "PLAY_TEAM_ENTITY", &__a);
  v1 = std::unordered_map<std::string,std::function<int ()(GmContext &,std::vector<std::string> const&,std::string&)>>::operator[](
         &GmUtils::op_func_map[abi:cxx11],
         &__k);
  std::function<int ()(GmContext &,std::vector<std::string> const&,std::string&)>::operator=<int (&)(GmContext &,std::vector<std::string> const&,std::string&)>(
    v1,
    (int (*)(GmContext *, const std::vector<std::string> *, std::string *))procPlayTeamEntity);
  std::string::~string(&__k);
  std::allocator<char>::~allocator(&__a);
};

// Line 11951: range 0000000017C2316E-0000000017C2369F
int32_t __cdecl procPlayTeamEntity(GmContext *context, const std::vector<std::string> *param_vec, std::string *ret_msg)
{
  unsigned __int64 v3; // rbx
  __int64 v4; // rax
  _DWORD *v5; // r13
  int32_t v6; // r14d
  const std::string *v7; // rax
  const std::string *v8; // rax
  Player *scene; // rsi
  std::__shared_ptr_access<PlayTeamEntity,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v10; // rax
  std::__shared_ptr_access<PlayTeamEntity,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v11; // rax
  void (__fastcall **v12)(std::string *, std::__shared_ptr_access<PlayTeamEntity,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *); // rdx
  const std::string *v13; // rax
  Scene *v14; // rax
  int32_t result; // eax
  Scene *v16; // [rsp+10h] [rbp-120h]
  std::allocator<unsigned int> __a; // [rsp+3Bh] [rbp-F5h] BYREF
  std::initializer_list<unsigned int> __l; // [rsp+3Ch] [rbp-F4h] BYREF
  std::string __rhs; // [rsp+60h] [rbp-D0h] BYREF
  std::string v21; // [rsp+80h] [rbp-B0h] BYREF
  char v22[144]; // [rsp+A0h] [rbp-90h] BYREF

  v3 = (unsigned __int64)v22;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_1(96LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "2 48 4 15 gadget_id:11965 64 16 21 team_entity_ptr:11971";
  *(_QWORD *)(v3 + 16) = procPlayTeamEntity;
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = -234556943;
  v5[536862722] = -202178560;
  if ( !std::vector<std::string>::size(param_vec) )
    goto LABEL_5;
  v7 = std::vector<std::string>::operator[](param_vec, 0LL);
  if ( std::operator==<char>(v7, "CREATE") )
  {
    if ( std::vector<std::string>::size(param_vec) <= 1 )
    {
LABEL_5:
      std::string::operator=(ret_msg, "param not enough");
      v6 = -1;
      goto LABEL_30;
    }
    *(_DWORD *)(v3 + 48) = 0;
    v8 = std::vector<std::string>::operator[](param_vec, 1uLL);
    if ( common::tools::StringUtils::strToNum<unsigned int>(v8, (unsigned int *)(v3 + 48), 1) )
    {
      std::string::operator=(ret_msg, " gadget_id not valid ");
      v6 = -1;
    }
    else
    {
      if ( *(_BYTE *)(((unsigned __int64)&context->scene >> 3) + 0x7FFF8000) )
        __asan_report_load8();
      scene = (Player *)context->scene;
      if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
        __asan_report_load8();
      Scene::addPlayTeamEntity((Scene *const)(v3 + 64), scene, (uint32_t)context->player);
      if ( std::operator!=<PlayTeamEntity>((const std::shared_ptr<PlayTeamEntity> *)(v3 + 64), 0LL) )
      {
        if ( *(_BYTE *)(((unsigned __int64)&context->scene >> 3) + 0x7FFF8000) )
          __asan_report_load8();
        v16 = context->scene;
        v10 = std::__shared_ptr_access<PlayTeamEntity,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<PlayTeamEntity,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 64));
        LODWORD(__l._M_array) = Entity::getEntityId((const Entity *const)v10);
        std::allocator<unsigned int>::allocator(&__a);
        std::vector<unsigned int>::vector(
          (std::vector<unsigned int> *const)((char *)&__l._M_array + 4),
          (std::initializer_list<unsigned int>)__PAIR128__(1LL, &__l),
          &__a);
        Scene::notifyPlayTeamEntity(v16, (const std::vector<unsigned int> *)((char *)&__l._M_array + 4));
        std::vector<unsigned int>::~vector((std::vector<unsigned int> *const)((char *)&__l._M_array + 4));
        std::allocator<unsigned int>::~allocator(&__a);
        v11 = std::__shared_ptr_access<PlayTeamEntity,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<PlayTeamEntity,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 64));
        if ( *(_BYTE *)(((unsigned __int64)v11 >> 3) + 0x7FFF8000) )
          __asan_report_load8();
        v12 = *(void (__fastcall ***)(std::string *, std::__shared_ptr_access<PlayTeamEntity,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *))v11->baseclass_0;
        if ( *(_BYTE *)((*(_QWORD *)v11->baseclass_0 >> 3) + 0x7FFF8000LL) )
          __asan_report_load8();
        (*v12)(&__rhs, v11);
        std::operator+<char>(&v21, " create:", &__rhs);
        std::string::operator=(ret_msg, &v21);
        std::string::~string(&v21);
        std::string::~string(&__rhs);
      }
      v6 = 0;
      std::shared_ptr<PlayTeamEntity>::~shared_ptr((std::shared_ptr<PlayTeamEntity> *const)(v3 + 64));
    }
  }
  else
  {
    v13 = std::vector<std::string>::operator[](param_vec, 0LL);
    if ( std::operator==<char>(v13, "CLEAR") )
    {
      if ( *(_BYTE *)(((unsigned __int64)&context->scene >> 3) + 0x7FFF8000) )
        __asan_report_load8();
      v14 = context->scene;
      if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
        __asan_report_load8();
      Scene::delPlayTeamEntity(v14, context->player);
      v6 = 0;
    }
    else
    {
      v6 = 0;
    }
  }
LABEL_30:
  result = v6;
  if ( v22 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8008) = 0;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8008) = -168430091;
  }
  return result;
};

// Line 11987: range 0000000017D7A2FE-0000000017D7A3A0
void __cdecl procFlightChallengeEventRegister::procFlightChallengeEventRegister(
        procFlightChallengeEventRegister *const this)
{
  std::function<int(GmContext&,const std::vector<std::string>&,std::string&)> *v1; // rax
  std::allocator<char> __a; // [rsp+1Fh] [rbp-31h] BYREF
  std::string __k; // [rsp+20h] [rbp-30h] BYREF

  std::allocator<char>::allocator(&__a);
  std::string::basic_string<std::allocator<char>>(&__k, "FLIGHT", &__a);
  v1 = std::unordered_map<std::string,std::function<int ()(GmContext &,std::vector<std::string> const&,std::string&)>>::operator[](
         &GmUtils::op_func_map[abi:cxx11],
         &__k);
  std::function<int ()(GmContext &,std::vector<std::string> const&,std::string&)>::operator=<int (&)(GmContext &,std::vector<std::string> const&,std::string&)>(
    v1,
    (int (*)(GmContext *, const std::vector<std::string> *, std::string *))procFlightChallengeEvent);
  std::string::~string(&__k);
  std::allocator<char>::~allocator(&__a);
};

// Line 11988: range 0000000017C236A0-0000000017C245EF
int32_t __cdecl procFlightChallengeEvent(
        GmContext *context,
        const std::vector<std::string> *param_vec,
        std::string *ret_msg)
{
  unsigned __int64 v3; // r13
  __int64 v4; // rax
  _DWORD *v5; // r12
  const std::string *v6; // rax
  const std::string *v8; // rax
  int32_t v9; // r14d
  const std::string *v10; // rax
  PlayerEventComp *EventComp; // r14
  const std::string *v12; // rax
  const std::string *v13; // rax
  const std::string *v14; // rax
  const std::string *v15; // rax
  const std::string *v16; // rax
  const std::string *v17; // rax
  PlayerEventComp *v18; // r14
  const std::string *v19; // rax
  const std::string *v20; // rax
  const std::string *v21; // rax
  const std::string *v22; // rax
  PlayerEventComp *v23; // r14
  int32_t result; // eax
  unsigned int *v25; // [rsp-8h] [rbp-1A8h]
  data::ChallengeEventMarkType *v26; // [rsp+0h] [rbp-1A0h]
  GmContext *contexta; // [rsp+18h] [rbp-188h]
  GmContext *contextb; // [rsp+18h] [rbp-188h]
  std::shared_ptr<BaseEvent> p_event_ptr; // [rsp+20h] [rbp-180h] BYREF
  common::milog::MiLogStream v31; // [rsp+30h] [rbp-170h] BYREF
  char v32[336]; // [rsp+50h] [rbp-150h] BYREF

  v3 = (unsigned __int64)v32;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_3(288LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "9 32 1 16 is_success:12044 48 4 14 group_id:12023 64 4 15 mark_type:12030 80 4 14 group_id:12075"
                        " 96 4 21 challenge_index:12082 112 4 18 challenge_id:12089 128 16 15 event_ptr:12098 160 24 14 u"
                        "id_list:12097 224 32 13 tmp_str:12096";
  *(_QWORD *)(v3 + 16) = procFlightChallengeEvent;
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = -234556927;
  v5[536862722] = -234556924;
  v5[536862723] = -234556924;
  v5[536862724] = -219021312;
  v5[536862725] = -234881024;
  v5[536862726] = -218959118;
  v5[536862728] = -202116109;
  if ( std::vector<std::string>::size(param_vec) > 2
    && (v6 = std::vector<std::string>::operator[](param_vec, 0LL), std::operator==<char>(v6, "POINT_WATCHER")) )
  {
    *(_DWORD *)(v3 + 96) = 0;
    v8 = std::vector<std::string>::operator[](param_vec, 1uLL);
    if ( common::tools::StringUtils::strToNum<unsigned int>(v8, (unsigned int *)(v3 + 96), 1) )
    {
      common::milog::MiLogStream::create(
        &v31,
        &common::milog::MiLogDefault::default_log_obj_,
        4u,
        "./src/player/gm/player_gm_comp.cpp",
        "procFlightChallengeEvent",
        11994);
      common::milog::MiLogStream::operator()(&v31, "parse group_id failed");
      common::milog::MiLogStream::~MiLogStream(&v31);
      v9 = -1;
    }
    else
    {
      *(_DWORD *)(v3 + 112) = 0;
      v10 = std::vector<std::string>::operator[](param_vec, 2uLL);
      if ( common::tools::StringUtils::strToNum<unsigned int>(v10, (unsigned int *)(v3 + 112), 1) )
      {
        common::milog::MiLogStream::create(
          &v31,
          &common::milog::MiLogDefault::default_log_obj_,
          4u,
          "./src/player/gm/player_gm_comp.cpp",
          "procFlightChallengeEvent",
          12001);
        common::milog::MiLogStream::operator()(&v31, "parse left_time failed");
        common::milog::MiLogStream::~MiLogStream(&v31);
        v9 = -1;
      }
      else
      {
        common::tools::perf::make_shared<GroupFlightChallengeReachPointsEvent,unsigned int &,unsigned int &>(
          (unsigned int *)(v3 + 128),
          (unsigned int *)(v3 + 96),
          (unsigned int *)(v3 + 112),
          (unsigned int *)(v3 + 96));
        if ( std::operator==<GroupFlightChallengeReachPointsEvent>(
               (const std::shared_ptr<GroupFlightChallengeReachPointsEvent> *)(v3 + 128),
               0LL) )
        {
          common::milog::MiLogStream::create(
            &v31,
            &common::milog::MiLogDefault::default_log_obj_,
            3u,
            "./src/player/gm/player_gm_comp.cpp",
            "procFlightChallengeEvent",
            12008);
          common::milog::MiLogStream::operator<<<char [18],(char *[18])0>(&v31, (const char (*)[18])"event_ptr is null");
          common::milog::MiLogStream::~MiLogStream(&v31);
          v9 = -1;
        }
        else
        {
          if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
            __asan_report_load8();
          EventComp = Player::getEventComp(context->player);
          std::shared_ptr<BaseEvent>::shared_ptr<GroupFlightChallengeReachPointsEvent,void>(
            &p_event_ptr,
            (const std::shared_ptr<GroupFlightChallengeReachPointsEvent> *)(v3 + 128));
          PlayerEventComp::notifyEvent(EventComp, &p_event_ptr);
          std::shared_ptr<BaseEvent>::~shared_ptr(&p_event_ptr);
          v9 = 0;
        }
        std::shared_ptr<GroupFlightChallengeReachPointsEvent>::~shared_ptr((std::shared_ptr<GroupFlightChallengeReachPointsEvent> *const)(v3 + 128));
      }
    }
  }
  else if ( std::vector<std::string>::size(param_vec) > 3 )
  {
    v12 = std::vector<std::string>::operator[](param_vec, 0LL);
    if ( std::operator==<char>(v12, "MARK_EVENT") )
    {
      *(_DWORD *)(v3 + 48) = 0;
      v13 = std::vector<std::string>::operator[](param_vec, 1uLL);
      if ( common::tools::StringUtils::strToNum<unsigned int>(v13, (unsigned int *)(v3 + 48), 1) )
      {
        common::milog::MiLogStream::create(
          &v31,
          &common::milog::MiLogDefault::default_log_obj_,
          4u,
          "./src/player/gm/player_gm_comp.cpp",
          "procFlightChallengeEvent",
          12026);
        common::milog::MiLogStream::operator()(&v31, "parse group_id failed");
        common::milog::MiLogStream::~MiLogStream(&v31);
        v9 = -1;
      }
      else
      {
        *(_DWORD *)(v3 + 64) = 0;
        v14 = std::vector<std::string>::operator[](param_vec, 2uLL);
        if ( common::tools::StringUtils::strToNum<unsigned int>(v14, (unsigned int *)(v3 + 64), 1) )
        {
          common::milog::MiLogStream::create(
            &v31,
            &common::milog::MiLogDefault::default_log_obj_,
            4u,
            "./src/player/gm/player_gm_comp.cpp",
            "procFlightChallengeEvent",
            12033);
          common::milog::MiLogStream::operator()(&v31, "parse mark_type failed");
          common::milog::MiLogStream::~MiLogStream(&v31);
          v9 = -1;
        }
        else
        {
          *(_DWORD *)(v3 + 80) = 0;
          v15 = std::vector<std::string>::operator[](param_vec, 3uLL);
          if ( common::tools::StringUtils::strToNum<unsigned int>(v15, (unsigned int *)(v3 + 80), 1) )
          {
            common::milog::MiLogStream::create(
              &v31,
              &common::milog::MiLogDefault::default_log_obj_,
              4u,
              "./src/player/gm/player_gm_comp.cpp",
              "procFlightChallengeEvent",
              12040);
            common::milog::MiLogStream::operator()(&v31, "parse value failed");
            common::milog::MiLogStream::~MiLogStream(&v31);
            v9 = -1;
          }
          else
          {
            *(_BYTE *)(v3 + 32) = 0;
            if ( std::vector<std::string>::size(param_vec) > 4
              && (v16 = std::vector<std::string>::operator[](param_vec, 4uLL),
                  common::tools::StringUtils::strToNum<bool>(v16, (bool *)(v3 + 32), 1)) )
            {
              common::milog::MiLogStream::create(
                &v31,
                &common::milog::MiLogDefault::default_log_obj_,
                4u,
                "./src/player/gm/player_gm_comp.cpp",
                "procFlightChallengeEvent",
                12049);
              common::milog::MiLogStream::operator()(&v31, "parse is_success failed");
              common::milog::MiLogStream::~MiLogStream(&v31);
              v9 = -1;
            }
            else
            {
              *(_DWORD *)(v3 + 96) = 0;
              if ( std::vector<std::string>::size(param_vec) > 5
                && (v17 = std::vector<std::string>::operator[](param_vec, 5uLL),
                    common::tools::StringUtils::strToNum<unsigned int>(v17, (unsigned int *)(v3 + 96), 1)) )
              {
                common::milog::MiLogStream::create(
                  &v31,
                  &common::milog::MiLogDefault::default_log_obj_,
                  4u,
                  "./src/player/gm/player_gm_comp.cpp",
                  "procFlightChallengeEvent",
                  12059);
                common::milog::MiLogStream::operator()(&v31, "parse is_success failed");
                common::milog::MiLogStream::~MiLogStream(&v31);
                v9 = -1;
              }
              else
              {
                *(_DWORD *)(v3 + 112) = *(_DWORD *)(v3 + 64);
                common::tools::perf::make_shared<LuaMarkedChallengeEvent,unsigned int &,data::ChallengeEventMarkType,unsigned int &,bool &,unsigned int &>(
                  (unsigned int *)(v3 + 128),
                  (data::ChallengeEventMarkType *)(v3 + 48),
                  (unsigned int *)(v3 + 112),
                  (bool *)(v3 + 80),
                  (unsigned int *)(v3 + 32),
                  (unsigned int *)(v3 + 96),
                  v26,
                  (unsigned int *)ret_msg,
                  (bool *)param_vec,
                  (unsigned int *)context);
                if ( std::operator==<LuaMarkedChallengeEvent>(
                       (const std::shared_ptr<LuaMarkedChallengeEvent> *)(v3 + 128),
                       0LL) )
                {
                  common::milog::MiLogStream::create(
                    &v31,
                    &common::milog::MiLogDefault::default_log_obj_,
                    3u,
                    "./src/player/gm/player_gm_comp.cpp",
                    "procFlightChallengeEvent",
                    12067);
                  common::milog::MiLogStream::operator<<<char [18],(char *[18])0>(
                    &v31,
                    (const char (*)[18])"event_ptr is null");
                  common::milog::MiLogStream::~MiLogStream(&v31);
                  v9 = -1;
                }
                else
                {
                  if ( *(_BYTE *)(((unsigned __int64)&contexta->player >> 3) + 0x7FFF8000) )
                    __asan_report_load8();
                  v18 = Player::getEventComp(contexta->player);
                  std::shared_ptr<BaseEvent>::shared_ptr<LuaMarkedChallengeEvent,void>(
                    &p_event_ptr,
                    (const std::shared_ptr<LuaMarkedChallengeEvent> *)(v3 + 128));
                  PlayerEventComp::notifyEvent(v18, &p_event_ptr);
                  std::shared_ptr<BaseEvent>::~shared_ptr(&p_event_ptr);
                  v9 = 0;
                }
                std::shared_ptr<LuaMarkedChallengeEvent>::~shared_ptr((std::shared_ptr<LuaMarkedChallengeEvent> *const)(v3 + 128));
              }
            }
          }
        }
      }
    }
    else
    {
      v19 = std::vector<std::string>::operator[](param_vec, 0LL);
      if ( std::operator==<char>(v19, "BEGIN_EVENT") )
      {
        *(_DWORD *)(v3 + 80) = 0;
        v20 = std::vector<std::string>::operator[](param_vec, 1uLL);
        if ( common::tools::StringUtils::strToNum<unsigned int>(v20, (unsigned int *)(v3 + 80), 1) )
        {
          common::milog::MiLogStream::create(
            &v31,
            &common::milog::MiLogDefault::default_log_obj_,
            4u,
            "./src/player/gm/player_gm_comp.cpp",
            "procFlightChallengeEvent",
            12078);
          common::milog::MiLogStream::operator()(&v31, "parse group_id failed");
          common::milog::MiLogStream::~MiLogStream(&v31);
          v9 = -1;
        }
        else
        {
          *(_DWORD *)(v3 + 96) = 0;
          v21 = std::vector<std::string>::operator[](param_vec, 2uLL);
          if ( common::tools::StringUtils::strToNum<unsigned int>(v21, (unsigned int *)(v3 + 96), 1) )
          {
            common::milog::MiLogStream::create(
              &v31,
              &common::milog::MiLogDefault::default_log_obj_,
              4u,
              "./src/player/gm/player_gm_comp.cpp",
              "procFlightChallengeEvent",
              12085);
            common::milog::MiLogStream::operator()(&v31, "parse challenge_index failed");
            common::milog::MiLogStream::~MiLogStream(&v31);
            v9 = -1;
          }
          else
          {
            *(_DWORD *)(v3 + 112) = 0;
            v22 = std::vector<std::string>::operator[](param_vec, 3uLL);
            if ( common::tools::StringUtils::strToNum<unsigned int>(v22, (unsigned int *)(v3 + 112), 1) )
            {
              common::milog::MiLogStream::create(
                &v31,
                &common::milog::MiLogDefault::default_log_obj_,
                4u,
                "./src/player/gm/player_gm_comp.cpp",
                "procFlightChallengeEvent",
                12092);
              common::milog::MiLogStream::operator()(&v31, "parse challenge_id failed");
              common::milog::MiLogStream::~MiLogStream(&v31);
              v9 = -1;
            }
            else
            {
              std::string::basic_string(v3 + 224);
              std::vector<unsigned int>::vector((std::vector<unsigned int> *const)(v3 + 160));
              common::tools::perf::make_shared<ChallengeBeginEvent,unsigned int &,unsigned int &,unsigned int &,unsigned int &,std::vector<unsigned int> &,std::string &>(
                (unsigned int *)&p_event_ptr,
                (unsigned int *)(v3 + 96),
                (unsigned int *)(v3 + 112),
                (unsigned int *)(v3 + 96),
                (std::vector<unsigned int> *)(v3 + 80),
                (std::string *)(v3 + 160),
                (unsigned int *)(v3 + 224),
                v25,
                (unsigned int *)v26,
                (unsigned int *)ret_msg,
                (std::vector<unsigned int> *)param_vec,
                (std::string *)context);
              std::shared_ptr<BaseEvent>::shared_ptr<ChallengeBeginEvent,void>(
                (std::shared_ptr<BaseEvent> *const)(v3 + 128),
                (std::shared_ptr<ChallengeBeginEvent> *)&p_event_ptr);
              std::shared_ptr<ChallengeBeginEvent>::~shared_ptr((std::shared_ptr<ChallengeBeginEvent> *const)&p_event_ptr);
              if ( std::operator==<BaseEvent>((const std::shared_ptr<BaseEvent> *)(v3 + 128), 0LL) )
              {
                common::milog::MiLogStream::create(
                  &v31,
                  &common::milog::MiLogDefault::default_log_obj_,
                  3u,
                  "./src/player/gm/player_gm_comp.cpp",
                  "procFlightChallengeEvent",
                  12101);
                common::milog::MiLogStream::operator<<<char [18],(char *[18])0>(
                  &v31,
                  (const char (*)[18])"event_ptr is null");
                common::milog::MiLogStream::~MiLogStream(&v31);
                v9 = -1;
              }
              else
              {
                if ( *(_BYTE *)(((unsigned __int64)&contextb->player >> 3) + 0x7FFF8000) )
                  __asan_report_load8();
                v23 = Player::getEventComp(contextb->player);
                std::shared_ptr<BaseEvent>::shared_ptr(&p_event_ptr, (const std::shared_ptr<BaseEvent> *)(v3 + 128));
                PlayerEventComp::notifyEvent(v23, &p_event_ptr);
                std::shared_ptr<BaseEvent>::~shared_ptr(&p_event_ptr);
                v9 = 0;
              }
              std::shared_ptr<BaseEvent>::~shared_ptr((std::shared_ptr<BaseEvent> *const)(v3 + 128));
              std::vector<unsigned int>::~vector((std::vector<unsigned int> *const)(v3 + 160));
              std::string::~string((void *)(v3 + 224));
            }
          }
        }
      }
      else
      {
        v9 = 0;
      }
    }
  }
  else
  {
    std::string::operator=(ret_msg, "param not enough");
    v9 = -1;
  }
  result = v9;
  if ( v32 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8010) = 0LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8018) = 0;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8020) = 0;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8020) = -168430091;
  }
  return result;
};

// Line 12110: range 0000000017D7A3A2-0000000017D7A444
void __cdecl procTestReloadRegister::procTestReloadRegister(procTestReloadRegister *const this)
{
  std::function<int(GmContext&,const std::vector<std::string>&,std::string&)> *v1; // rax
  std::allocator<char> __a; // [rsp+1Fh] [rbp-31h] BYREF
  std::string __k; // [rsp+20h] [rbp-30h] BYREF

  std::allocator<char>::allocator(&__a);
  std::string::basic_string<std::allocator<char>>(&__k, "TEST_RELOAD", &__a);
  v1 = std::unordered_map<std::string,std::function<int ()(GmContext &,std::vector<std::string> const&,std::string&)>>::operator[](
         &GmUtils::op_func_map[abi:cxx11],
         &__k);
  std::function<int ()(GmContext &,std::vector<std::string> const&,std::string&)>::operator=<int (&)(GmContext &,std::vector<std::string> const&,std::string&)>(
    v1,
    (int (*)(GmContext *, const std::vector<std::string> *, std::string *))procTestReload);
  std::string::~string(&__k);
  std::allocator<char>::~allocator(&__a);
};

// Line 12111: range 0000000017C245F0-0000000017C24657
int32_t __cdecl procTestReload(GmContext *context, const std::vector<std::string> *param_vec, std::string *ret_msg)
{
  if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
    __asan_report_load8();
  Player::setIsDataResVersionChanged(context->player, 1);
  std::string::operator=(ret_msg, &unk_263691C0);
  return 0;
};

// Line 12117: range 0000000017D7A446-0000000017D7A4E8
void __cdecl procOfferingRegister::procOfferingRegister(procOfferingRegister *const this)
{
  std::function<int(GmContext&,const std::vector<std::string>&,std::string&)> *v1; // rax
  std::allocator<char> __a; // [rsp+1Fh] [rbp-31h] BYREF
  std::string __k; // [rsp+20h] [rbp-30h] BYREF

  std::allocator<char>::allocator(&__a);
  std::string::basic_string<std::allocator<char>>(&__k, "OFFERING", &__a);
  v1 = std::unordered_map<std::string,std::function<int ()(GmContext &,std::vector<std::string> const&,std::string&)>>::operator[](
         &GmUtils::op_func_map[abi:cxx11],
         &__k);
  std::function<int ()(GmContext &,std::vector<std::string> const&,std::string&)>::operator=<int (&)(GmContext &,std::vector<std::string> const&,std::string&)>(
    v1,
    (int (*)(GmContext *, const std::vector<std::string> *, std::string *))procOffering);
  std::string::~string(&__k);
  std::allocator<char>::~allocator(&__a);
};

// Line 12118: range 0000000017C24658-0000000017C249E2
int32_t __cdecl procOffering(GmContext *context, const std::vector<std::string> *param_vec, std::string *ret_msg)
{
  unsigned __int64 v3; // r12
  __int64 v4; // rax
  _DWORD *v5; // r13
  int32_t result; // eax
  const std::string *v7; // rax
  const std::string *v8; // rax
  PlayerOfferingComp *OfferingComp; // rax
  const std::string *v11; // rax
  const std::string *v12; // rax
  const std::string *v13; // rax
  PlayerOfferingComp *v14; // rax
  char v16[128]; // [rsp+20h] [rbp-80h] BYREF

  v3 = (unsigned __int64)v16;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_1(96LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "2 48 4 17 offering_id:12146 64 4 15 dst_level:12146";
  *(_QWORD *)(v3 + 16) = procOffering;
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = -234556943;
  v5[536862722] = -202116348;
  if ( !std::vector<std::string>::size(param_vec) )
  {
    std::string::operator=(ret_msg, "param not enough");
    result = -1;
    goto LABEL_27;
  }
  v7 = std::vector<std::string>::operator[](param_vec, 0LL);
  if ( std::operator==<char>(v7, "CLEAR") )
  {
    if ( std::vector<std::string>::size(param_vec) <= 1 )
    {
LABEL_8:
      std::string::operator=(ret_msg, "param not enough, OFFERING CLEAR offering_id");
      result = -1;
      goto LABEL_27;
    }
    *(_DWORD *)(v3 + 64) = 0;
    v8 = std::vector<std::string>::operator[](param_vec, 1uLL);
    if ( common::tools::StringUtils::strToNum<unsigned int>(v8, (unsigned int *)(v3 + 64), 1) || !*(_DWORD *)(v3 + 64) )
    {
      std::string::operator=(ret_msg, "param offering_id invalid");
      result = -1;
    }
    else
    {
      if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
        __asan_report_load8();
      OfferingComp = Player::getOfferingComp(context->player);
      result = PlayerOfferingComp::clearByGm(OfferingComp, *(_DWORD *)(v3 + 64));
    }
  }
  else
  {
    v11 = std::vector<std::string>::operator[](param_vec, 0LL);
    if ( std::operator==<char>(v11, "LEVEL") )
    {
      if ( std::vector<std::string>::size(param_vec) <= 2 )
        goto LABEL_8;
      *(_DWORD *)(v3 + 48) = 0;
      *(_DWORD *)(v3 + 64) = 0;
      v12 = std::vector<std::string>::operator[](param_vec, 1uLL);
      common::tools::StringUtils::strToNum<unsigned int>(v12, (unsigned int *)(v3 + 48), 1);
      v13 = std::vector<std::string>::operator[](param_vec, 2uLL);
      common::tools::StringUtils::strToNum<unsigned int>(v13, (unsigned int *)(v3 + 64), 1);
      if ( *(_DWORD *)(v3 + 48) && *(_DWORD *)(v3 + 64) )
      {
        if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
          __asan_report_load8();
        v14 = Player::getOfferingComp(context->player);
        result = PlayerOfferingComp::setLevelByGm(v14, *(_DWORD *)(v3 + 48), *(_DWORD *)(v3 + 64));
      }
      else
      {
        std::string::operator=(ret_msg, "param invalid, OFFERING LEVEL offering_id dst_level");
        result = -1;
      }
    }
    else
    {
      result = 0;
    }
  }
LABEL_27:
  if ( v16 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8008) = 0;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8008) = -168430091;
  }
  return result;
};

// Line 12159: range 0000000017D7A4EA-0000000017D7A58C
void __cdecl procShopRegister::procShopRegister(procShopRegister *const this)
{
  std::function<int(GmContext&,const std::vector<std::string>&,std::string&)> *v1; // rax
  std::allocator<char> __a; // [rsp+1Fh] [rbp-31h] BYREF
  std::string __k; // [rsp+20h] [rbp-30h] BYREF

  std::allocator<char>::allocator(&__a);
  std::string::basic_string<std::allocator<char>>(&__k, "SHOP", &__a);
  v1 = std::unordered_map<std::string,std::function<int ()(GmContext &,std::vector<std::string> const&,std::string&)>>::operator[](
         &GmUtils::op_func_map[abi:cxx11],
         &__k);
  std::function<int ()(GmContext &,std::vector<std::string> const&,std::string&)>::operator=<int (&)(GmContext &,std::vector<std::string> const&,std::string&)>(
    v1,
    (int (*)(GmContext *, const std::vector<std::string> *, std::string *))procShop);
  std::string::~string(&__k);
  std::allocator<char>::~allocator(&__a);
};

// Line 12160: range 0000000017C249E3-0000000017C24F59
int32_t __cdecl procShop(GmContext *context, const std::vector<std::string> *param_vec, std::string *ret_msg)
{
  unsigned __int64 v3; // r13
  __int64 v4; // rax
  _DWORD *v5; // r12
  int32_t v6; // r14d
  const std::string *v7; // rax
  const std::string *v8; // rax
  const std::string *v9; // rax
  const std::string *v12; // rax
  const std::unordered_map<std::string,data::ShopType>::key_type *v13; // r14
  const std::unordered_map<std::string,data::ShopType> *v14; // rax
  const std::string *v15; // rax
  PlayerShopComp *ShopComp; // rax
  int32_t result; // eax
  bool __rhs; // [rsp+27h] [rbp-199h] BYREF
  size_t i; // [rsp+28h] [rbp-198h]
  std::string v21; // [rsp+30h] [rbp-190h] BYREF
  char v22[368]; // [rsp+50h] [rbp-170h] BYREF

  v3 = (unsigned __int64)v22;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_3(320LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "4 48 4 14 goods_id:12188 64 48 19 shop_type_set:12178 144 48 18 goods_id_set:12179 224 56 11 param:12171";
  *(_QWORD *)(v3 + 16) = procShop;
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = -234556943;
  v5[536862723] = -219021312;
  v5[536862724] = 62194;
  v5[536862726] = -218959118;
  v5[536862728] = -218103808;
  v5[536862729] = -202116109;
  if ( std::vector<std::string>::size(param_vec) )
  {
    v7 = std::vector<std::string>::operator[](param_vec, 0LL);
    if ( std::operator!=<char>(v7, "CLEAR") )
    {
      v8 = std::vector<std::string>::operator[](param_vec, 0LL);
      std::operator+<char>(&v21, "unknown param:", v8);
      std::string::operator=(ret_msg, &v21);
      std::string::~string(&v21);
      v6 = -1;
    }
    else
    {
      *(_QWORD *)(v3 + 224) = 0LL;
      *(_QWORD *)(v3 + 232) = 0LL;
      *(_QWORD *)(v3 + 240) = 0LL;
      *(_QWORD *)(v3 + 248) = 0LL;
      *(_QWORD *)(v3 + 256) = 0LL;
      *(_QWORD *)(v3 + 264) = 0LL;
      *(_QWORD *)(v3 + 272) = 0LL;
      if ( std::vector<std::string>::size(param_vec) <= 1
        || (v9 = std::vector<std::string>::operator[](param_vec, 1uLL), std::operator==<char>(v9, _f.gap0)) )
      {
        __rhs = 1;
        std::variant<bool,std::set<data::ShopType>,std::set<unsigned int>>::operator=<bool>(
          (std::variant<bool,std::set<data::ShopType>,std::set<unsigned int> > *const)(v3 + 224),
          &__rhs);
      }
      else
      {
        std::set<data::ShopType>::set((std::set<data::ShopType> *const)(v3 + 64));
        std::set<unsigned int>::set((std::set<unsigned int> *const)(v3 + 144));
        for ( i = 1LL;
              i < std::vector<std::string>::size(param_vec)
           && i < std::vector<std::string>::size(&context->raw_param_vec);
              ++i )
        {
          v12 = std::vector<std::string>::operator[](&context->raw_param_vec, i);
          if ( data::isValidShopTypeName(v12) )
          {
            v13 = std::vector<std::string>::operator[](&context->raw_param_vec, i);
            v14 = data::getShopTypeNameMap[abi:cxx11]();
            *(_DWORD *)(v3 + 48) = common::tools::MiscUtils::findMapWithDefaultValue<std::unordered_map<std::string,data::ShopType>>(
                                     v14,
                                     v13,
                                     SHOP_TYPE_NONE);
            std::set<data::ShopType>::insert(
              (std::set<data::ShopType> *const)(v3 + 64),
              (std::set<data::ShopType>::value_type *)(v3 + 48));
          }
          else
          {
            *(_DWORD *)(v3 + 48) = 0;
            v15 = std::vector<std::string>::operator[](param_vec, i);
            common::tools::StringUtils::strToNum<unsigned int>(v15, (unsigned int *)(v3 + 48), 1);
            std::set<unsigned int>::insert(
              (std::set<unsigned int> *const)(v3 + 144),
              (const std::set<unsigned int>::value_type *)(v3 + 48));
          }
        }
        *(_DWORD *)(v3 + 48) = 0;
        std::set<data::ShopType>::erase(
          (std::set<data::ShopType> *const)(v3 + 64),
          (const std::set<data::ShopType>::key_type *)(v3 + 48));
        *(_DWORD *)(v3 + 48) = 0;
        std::set<unsigned int>::erase(
          (std::set<unsigned int> *const)(v3 + 144),
          (const std::set<unsigned int>::key_type *)(v3 + 48));
        if ( !std::set<data::ShopType>::empty((const std::set<data::ShopType> *const)(v3 + 64)) )
          std::variant<bool,std::set<data::ShopType>,std::set<unsigned int>>::operator=<std::set<data::ShopType>&>(
            (std::variant<bool,std::set<data::ShopType>,std::set<unsigned int> > *const)(v3 + 224),
            (std::set<data::ShopType> *)(v3 + 64));
        else
          std::variant<bool,std::set<data::ShopType>,std::set<unsigned int>>::operator=<std::set<unsigned int>&>(
            (std::variant<bool,std::set<data::ShopType>,std::set<unsigned int> > *const)(v3 + 224),
            (std::set<unsigned int> *)(v3 + 144));
        std::set<unsigned int>::~set((std::set<unsigned int> *const)(v3 + 144));
        std::set<data::ShopType>::~set((std::set<data::ShopType> *const)(v3 + 64));
      }
      if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
        __asan_report_load8();
      ShopComp = Player::getShopComp(context->player);
      PlayerShopComp::clearShopRecordByGm(
        ShopComp,
        (const std::variant<bool,std::set<data::ShopType>,std::set<unsigned int> > *)(v3 + 224));
      v6 = 0;
      std::variant<bool,std::set<data::ShopType>,std::set<unsigned int>>::~variant((std::variant<bool,std::set<data::ShopType>,std::set<unsigned int> > *const)(v3 + 224));
    }
  }
  else
  {
    std::string::operator=(ret_msg, "param not enough");
    v6 = -1;
  }
  result = v6;
  if ( v22 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF800C) = 0LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8018) = 0;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8020) = 0LL;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8020) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 12208: range 0000000017D7A6B0-0000000017D7A752
void __cdecl procChatRegister::procChatRegister(procChatRegister *const this)
{
  std::function<int(GmContext&,const std::vector<std::string>&,std::string&)> *v1; // rax
  std::allocator<char> __a; // [rsp+1Fh] [rbp-31h] BYREF
  std::string __k; // [rsp+20h] [rbp-30h] BYREF

  std::allocator<char>::allocator(&__a);
  std::string::basic_string<std::allocator<char>>(&__k, "CHAT", &__a);
  v1 = std::unordered_map<std::string,std::function<int ()(GmContext &,std::vector<std::string> const&,std::string&)>>::operator[](
         &GmUtils::op_func_map[abi:cxx11],
         &__k);
  std::function<int ()(GmContext &,std::vector<std::string> const&,std::string&)>::operator=<int (&)(GmContext &,std::vector<std::string> const&,std::string&)>(
    v1,
    (int (*)(GmContext *, const std::vector<std::string> *, std::string *))procChat);
  std::string::~string(&__k);
  std::allocator<char>::~allocator(&__a);
};

// Line 12209: range 0000000017C24F5A-0000000017C2631E
int32_t __cdecl procChat(GmContext *context, const std::vector<std::string> *param_vec, std::string *ret_msg)
{
  unsigned __int64 v3; // r14
  __int64 v4; // rax
  _DWORD *v5; // r12
  const std::string *v6; // rax
  const std::string *v7; // rax
  const std::string *v8; // rax
  common::milog::MiLogStream *v9; // rcx
  int32_t v10; // r13d
  common::minet::Packet *v11; // r13
  uint32_t Uid; // eax
  GameserverService *v13; // r13
  common::minet::PacketPtr v14; // rdi
  const std::string *v15; // rax
  const std::string *v16; // rax
  const std::string *v17; // rax
  const std::string *v18; // rax
  common::milog::MiLogStream *v19; // rcx
  common::minet::Packet *v20; // r13
  uint32_t v21; // eax
  GameserverService *v22; // r13
  common::minet::PacketPtr v23; // rdi
  const std::string *v24; // rax
  const std::string *v25; // rax
  const std::string *v26; // rax
  common::milog::MiLogStream *v27; // rcx
  common::minet::Packet *v28; // r13
  uint32_t v29; // eax
  GameserverService *v30; // r13
  common::minet::PacketPtr v31; // rdi
  const std::string *v32; // rax
  const std::string *v33; // rax
  const std::string *v34; // rax
  const std::string *v35; // rax
  std::__shared_ptr_access<PlayerWorld,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v36; // rax
  const std::string *v37; // rax
  const std::string *v38; // rax
  std::__shared_ptr_access<PlayerWorld,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v39; // rax
  const std::string *v40; // rax
  const std::string *v41; // rax
  PlayerSocialComp *SocialComp; // rax
  const std::string *v43; // rax
  const std::string *v44; // rax
  PlayerSocialComp *v45; // rax
  int32_t result; // eax
  uint32_t idx; // [rsp+2Ch] [rbp-1D4h]
  common::milog::MiLogStream v49; // [rsp+30h] [rbp-1D0h] BYREF
  char v50[432]; // [rsp+50h] [rbp-1B0h] BYREF

  v3 = (unsigned __int64)v50;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_3(384LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "8 48 4 12 to_uid:12249 64 4 16 channel_id:12335 80 4 16 channel_id:12388 96 16 16 packet_ptr:123"
                        "09 128 16 15 world_ptr:12368 160 32 9 req:12306 224 40 9 req:12228 304 48 13 uid_set:12347";
  *(_QWORD *)(v3 + 16) = procChat;
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = -234556943;
  v5[536862722] = -234556924;
  v5[536862723] = -219021312;
  v5[536862724] = -219021312;
  v5[536862726] = -218959118;
  v5[536862728] = -218959360;
  v5[536862729] = 62194;
  v5[536862731] = -202116109;
  if ( !std::vector<std::string>::size(param_vec) )
    goto LABEL_51;
  v6 = std::vector<std::string>::operator[](param_vec, 0LL);
  if ( std::operator==<char>(v6, "SEND") )
  {
    if ( std::vector<std::string>::size(param_vec) > 2 )
    {
      *(_DWORD *)(v3 + 80) = 0;
      v7 = std::vector<std::string>::operator[](param_vec, 1uLL);
      if ( common::tools::StringUtils::strToNum<unsigned int>(v7, (unsigned int *)(v3 + 80), 1) )
        goto LABEL_38;
      proto::PrivateChatReq::PrivateChatReq((proto::PrivateChatReq *const)(v3 + 224));
      proto::PrivateChatReq::set_target_uid((proto::PrivateChatReq *const)(v3 + 224), *(_DWORD *)(v3 + 80));
      v8 = std::vector<std::string>::operator[](param_vec, 2uLL);
      proto::PrivateChatReq::set_text((proto::PrivateChatReq *const)(v3 + 224), v8);
      common::minet::PacketUtils::createPacket<proto::PrivateChatReq>((const proto::PrivateChatReq *)(v3 + 96));
      if ( std::operator==<common::minet::Packet>((const std::shared_ptr<common::minet::Packet> *)(v3 + 96), 0LL) )
      {
        common::milog::MiLogStream::create(
          &v49,
          &common::milog::MiLogDefault::default_log_obj_,
          3u,
          "./src/player/gm/player_gm_comp.cpp",
          "procChat",
          12234);
        v9 = common::milog::MiLogStream::operator<<<char [26],(char *[26])0>(
               &v49,
               (const char (*)[26])"createPacket failed, uid:");
        if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
          __asan_report_load8();
        operator<<(v9, context->player);
        common::milog::MiLogStream::~MiLogStream(&v49);
        v10 = -1;
      }
      else
      {
        v11 = std::__shared_ptr_access<common::minet::Packet,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<common::minet::Packet,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 96));
        if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
          __asan_report_load8();
        Uid = Player::getUid(context->player);
        common::minet::Packet::setUserId(v11, Uid);
        v13 = ServiceBox::findService<GameserverService>();
        std::shared_ptr<common::minet::Packet>::shared_ptr(
          (std::shared_ptr<common::minet::Packet> *const)(v3 + 128),
          (const std::shared_ptr<common::minet::Packet> *)(v3 + 96));
        GameserverService::setPacketGameThreadIndex(v13, (common::minet::PacketPtr *)(v3 + 128));
        std::shared_ptr<common::minet::Packet>::~shared_ptr((std::shared_ptr<common::minet::Packet> *const)(v3 + 128));
        v14._M_refcount._M_pi = (std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)2> *)(v3 + 96);
        std::shared_ptr<common::minet::Packet>::shared_ptr(
          (std::shared_ptr<common::minet::Packet> *const)(v3 + 128),
          (const std::shared_ptr<common::minet::Packet> *)(v3 + 96));
        v14._M_ptr = (std::__shared_ptr<common::minet::Packet,(__gnu_cxx::_Lock_policy)2>::element_type *)(v3 + 128);
        ServiceBox::pushPacketToService(v14);
        std::shared_ptr<common::minet::Packet>::~shared_ptr((std::shared_ptr<common::minet::Packet> *const)(v3 + 128));
        v10 = 0;
      }
      std::shared_ptr<common::minet::Packet>::~shared_ptr((std::shared_ptr<common::minet::Packet> *const)(v3 + 96));
      proto::PrivateChatReq::~PrivateChatReq((proto::PrivateChatReq *const)(v3 + 224));
      goto LABEL_85;
    }
LABEL_51:
    std::string::operator=(ret_msg, "param not enough");
    v10 = -1;
    goto LABEL_85;
  }
  v15 = std::vector<std::string>::operator[](param_vec, 0LL);
  if ( std::operator==<char>(v15, "PULL_PRIVATE") )
  {
    if ( std::vector<std::string>::size(param_vec) <= 3 )
      goto LABEL_51;
    *(_DWORD *)(v3 + 48) = 0;
    v16 = std::vector<std::string>::operator[](param_vec, 1uLL);
    if ( common::tools::StringUtils::strToNum<unsigned int>(v16, (unsigned int *)(v3 + 48), 1) )
      goto LABEL_38;
    *(_DWORD *)(v3 + 64) = 0;
    v17 = std::vector<std::string>::operator[](param_vec, 2uLL);
    if ( !common::tools::StringUtils::strToNum<unsigned int>(v17, (unsigned int *)(v3 + 64), 1) )
    {
      *(_DWORD *)(v3 + 80) = 0;
      v18 = std::vector<std::string>::operator[](param_vec, 3uLL);
      if ( common::tools::StringUtils::strToNum<unsigned int>(v18, (unsigned int *)(v3 + 80), 1) )
      {
        std::string::operator=(ret_msg, "param num invalid");
        v10 = -1;
      }
      else
      {
        proto::PullPrivateChatReq::PullPrivateChatReq((proto::PullPrivateChatReq *const)(v3 + 160));
        proto::PullPrivateChatReq::set_target_uid((proto::PullPrivateChatReq *const)(v3 + 160), *(_DWORD *)(v3 + 48));
        proto::PullPrivateChatReq::set_from_sequence((proto::PullPrivateChatReq *const)(v3 + 160), *(_DWORD *)(v3 + 64));
        proto::PullPrivateChatReq::set_pull_num((proto::PullPrivateChatReq *const)(v3 + 160), *(_DWORD *)(v3 + 80));
        common::minet::PacketUtils::createPacket<proto::PullPrivateChatReq>((const proto::PullPrivateChatReq *)(v3 + 96));
        if ( std::operator==<common::minet::Packet>((const std::shared_ptr<common::minet::Packet> *)(v3 + 96), 0LL) )
        {
          common::milog::MiLogStream::create(
            &v49,
            &common::milog::MiLogDefault::default_log_obj_,
            3u,
            "./src/player/gm/player_gm_comp.cpp",
            "procChat",
            12277);
          v19 = common::milog::MiLogStream::operator<<<char [26],(char *[26])0>(
                  &v49,
                  (const char (*)[26])"createPacket failed, uid:");
          if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
            __asan_report_load8();
          operator<<(v19, context->player);
          common::milog::MiLogStream::~MiLogStream(&v49);
          v10 = -1;
        }
        else
        {
          v20 = std::__shared_ptr_access<common::minet::Packet,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<common::minet::Packet,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 96));
          if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
            __asan_report_load8();
          v21 = Player::getUid(context->player);
          common::minet::Packet::setUserId(v20, v21);
          v22 = ServiceBox::findService<GameserverService>();
          std::shared_ptr<common::minet::Packet>::shared_ptr(
            (std::shared_ptr<common::minet::Packet> *const)(v3 + 128),
            (const std::shared_ptr<common::minet::Packet> *)(v3 + 96));
          GameserverService::setPacketGameThreadIndex(v22, (common::minet::PacketPtr *)(v3 + 128));
          std::shared_ptr<common::minet::Packet>::~shared_ptr((std::shared_ptr<common::minet::Packet> *const)(v3 + 128));
          v23._M_refcount._M_pi = (std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)2> *)(v3 + 96);
          std::shared_ptr<common::minet::Packet>::shared_ptr(
            (std::shared_ptr<common::minet::Packet> *const)(v3 + 128),
            (const std::shared_ptr<common::minet::Packet> *)(v3 + 96));
          v23._M_ptr = (std::__shared_ptr<common::minet::Packet,(__gnu_cxx::_Lock_policy)2>::element_type *)(v3 + 128);
          ServiceBox::pushPacketToService(v23);
          std::shared_ptr<common::minet::Packet>::~shared_ptr((std::shared_ptr<common::minet::Packet> *const)(v3 + 128));
          v10 = 0;
        }
        std::shared_ptr<common::minet::Packet>::~shared_ptr((std::shared_ptr<common::minet::Packet> *const)(v3 + 96));
        proto::PullPrivateChatReq::~PullPrivateChatReq((proto::PullPrivateChatReq *const)(v3 + 160));
      }
      goto LABEL_85;
    }
LABEL_22:
    std::string::operator=(ret_msg, "param seq invalid");
    v10 = -1;
    goto LABEL_85;
  }
  v24 = std::vector<std::string>::operator[](param_vec, 0LL);
  if ( !std::operator==<char>(v24, "PULL_RECENT") )
  {
    v32 = std::vector<std::string>::operator[](param_vec, 0LL);
    if ( std::operator==<char>(v32, "CHANNEL") )
    {
      if ( std::vector<std::string>::size(param_vec) <= 2 )
        goto LABEL_51;
      v33 = std::vector<std::string>::operator[](param_vec, 1uLL);
      if ( std::operator==<char>(v33, off_26356D00) )
      {
        if ( std::vector<std::string>::size(param_vec) <= 4 )
          goto LABEL_51;
        *(_DWORD *)(v3 + 64) = 0;
        v34 = std::vector<std::string>::operator[](param_vec, 2uLL);
        if ( common::tools::StringUtils::strToNum<unsigned int>(v34, (unsigned int *)(v3 + 64), 1) )
        {
LABEL_80:
          std::string::operator=(ret_msg, "param channel_id invalid");
          v10 = -1;
          goto LABEL_85;
        }
        if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
          __asan_report_load8();
        Player::getSceneComp(context->player);
        PlayerSceneComp::getCurWorld<PlayerWorld>((const PlayerSceneComp *const)(v3 + 128));
        if ( std::operator==<PlayerWorld>((const std::shared_ptr<PlayerWorld> *)(v3 + 128), 0LL) )
        {
          common::milog::MiLogStream::create(
            &v49,
            &common::milog::MiLogDefault::default_log_obj_,
            3u,
            "./src/player/gm/player_gm_comp.cpp",
            "procChat",
            12344);
          common::milog::MiLogStream::operator<<<char [34],(char *[34])0>(
            &v49,
            (const char (*)[34])"getCurWorld<PlayerWorld> got null");
          common::milog::MiLogStream::~MiLogStream(&v49);
          v10 = -1;
        }
        else
        {
          std::set<unsigned int>::set((std::set<unsigned int> *const)(v3 + 304));
          for ( idx = 3; idx < std::vector<std::string>::size(param_vec); ++idx )
          {
            *(_DWORD *)(v3 + 80) = 0;
            v35 = std::vector<std::string>::operator[](param_vec, idx);
            if ( common::tools::StringUtils::strToNum<unsigned int>(v35, (unsigned int *)(v3 + 80), 1) )
            {
              std::string::operator=(ret_msg, "param uid invalid");
              v10 = -1;
              goto LABEL_64;
            }
            std::set<unsigned int>::insert(
              (std::set<unsigned int> *const)(v3 + 304),
              (const std::set<unsigned int>::value_type *)(v3 + 80));
          }
          v36 = std::__shared_ptr_access<PlayerWorld,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<PlayerWorld,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 128));
          v10 = World::addChatChannel(v36, *(_DWORD *)(v3 + 64), (const std::set<unsigned int> *)(v3 + 304));
LABEL_64:
          std::set<unsigned int>::~set((std::set<unsigned int> *const)(v3 + 304));
        }
LABEL_65:
        std::shared_ptr<PlayerWorld>::~shared_ptr((std::shared_ptr<PlayerWorld> *const)(v3 + 128));
        goto LABEL_85;
      }
      v37 = std::vector<std::string>::operator[](param_vec, 1uLL);
      if ( std::operator==<char>(v37, off_26356E00) )
      {
        *(_DWORD *)(v3 + 80) = 0;
        v38 = std::vector<std::string>::operator[](param_vec, 2uLL);
        if ( common::tools::StringUtils::strToNum<unsigned int>(v38, (unsigned int *)(v3 + 80), 1) )
          goto LABEL_80;
        if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
          __asan_report_load8();
        Player::getSceneComp(context->player);
        PlayerSceneComp::getCurWorld<PlayerWorld>((const PlayerSceneComp *const)(v3 + 128));
        if ( std::operator==<PlayerWorld>((const std::shared_ptr<PlayerWorld> *)(v3 + 128), 0LL) )
        {
          common::milog::MiLogStream::create(
            &v49,
            &common::milog::MiLogDefault::default_log_obj_,
            3u,
            "./src/player/gm/player_gm_comp.cpp",
            "procChat",
            12371);
          common::milog::MiLogStream::operator<<<char [34],(char *[34])0>(
            &v49,
            (const char (*)[34])"getCurWorld<PlayerWorld> got null");
          common::milog::MiLogStream::~MiLogStream(&v49);
          v10 = -1;
        }
        else
        {
          v39 = std::__shared_ptr_access<PlayerWorld,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<PlayerWorld,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 128));
          v10 = World::delChatChannel(v39, *(_DWORD *)(v3 + 80));
        }
        goto LABEL_65;
      }
      v40 = std::vector<std::string>::operator[](param_vec, 1uLL);
      if ( std::operator==<char>(v40, "SHIELD") )
      {
        *(_DWORD *)(v3 + 80) = 0;
        v41 = std::vector<std::string>::operator[](param_vec, 2uLL);
        if ( !common::tools::StringUtils::strToNum<unsigned int>(v41, (unsigned int *)(v3 + 80), 1) )
        {
          if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
            __asan_report_load8();
          SocialComp = Player::getSocialComp(context->player);
          v10 = PlayerSocialComp::shieldChatChannel(SocialComp, *(_DWORD *)(v3 + 80));
          goto LABEL_85;
        }
        goto LABEL_80;
      }
      v43 = std::vector<std::string>::operator[](param_vec, 1uLL);
      if ( std::operator==<char>(v43, "UNSHIELD") )
      {
        *(_DWORD *)(v3 + 80) = 0;
        v44 = std::vector<std::string>::operator[](param_vec, 2uLL);
        if ( !common::tools::StringUtils::strToNum<unsigned int>(v44, (unsigned int *)(v3 + 80), 1) )
        {
          if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
            __asan_report_load8();
          v45 = Player::getSocialComp(context->player);
          v10 = PlayerSocialComp::unshieldChatChannel(v45, *(_DWORD *)(v3 + 80));
          goto LABEL_85;
        }
        goto LABEL_80;
      }
    }
    v10 = -1;
    goto LABEL_85;
  }
  if ( std::vector<std::string>::size(param_vec) <= 2 )
    goto LABEL_51;
  *(_DWORD *)(v3 + 64) = 0;
  v25 = std::vector<std::string>::operator[](param_vec, 1uLL);
  if ( common::tools::StringUtils::strToNum<unsigned int>(v25, (unsigned int *)(v3 + 64), 1) )
    goto LABEL_22;
  *(_DWORD *)(v3 + 80) = 0;
  v26 = std::vector<std::string>::operator[](param_vec, 2uLL);
  if ( common::tools::StringUtils::strToNum<unsigned int>(v26, (unsigned int *)(v3 + 80), 1) )
  {
LABEL_38:
    std::string::operator=(ret_msg, "param to_uid invalid");
    v10 = -1;
    goto LABEL_85;
  }
  proto::PullRecentChatReq::PullRecentChatReq((proto::PullRecentChatReq *const)(v3 + 160));
  proto::PullRecentChatReq::set_begin_sequence((proto::PullRecentChatReq *const)(v3 + 160), *(_DWORD *)(v3 + 64));
  proto::PullRecentChatReq::set_pull_num((proto::PullRecentChatReq *const)(v3 + 160), *(_DWORD *)(v3 + 80));
  common::minet::PacketUtils::createPacket<proto::PullRecentChatReq>((const proto::PullRecentChatReq *)(v3 + 96));
  if ( std::operator==<common::minet::Packet>((const std::shared_ptr<common::minet::Packet> *)(v3 + 96), 0LL) )
  {
    common::milog::MiLogStream::create(
      &v49,
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/player/gm/player_gm_comp.cpp",
      "procChat",
      12312);
    v27 = common::milog::MiLogStream::operator<<<char [26],(char *[26])0>(
            &v49,
            (const char (*)[26])"createPacket failed, uid:");
    if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
      __asan_report_load8();
    operator<<(v27, context->player);
    common::milog::MiLogStream::~MiLogStream(&v49);
    v10 = -1;
  }
  else
  {
    v28 = std::__shared_ptr_access<common::minet::Packet,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<common::minet::Packet,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 96));
    if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
      __asan_report_load8();
    v29 = Player::getUid(context->player);
    common::minet::Packet::setUserId(v28, v29);
    v30 = ServiceBox::findService<GameserverService>();
    std::shared_ptr<common::minet::Packet>::shared_ptr(
      (std::shared_ptr<common::minet::Packet> *const)(v3 + 128),
      (const std::shared_ptr<common::minet::Packet> *)(v3 + 96));
    GameserverService::setPacketGameThreadIndex(v30, (common::minet::PacketPtr *)(v3 + 128));
    std::shared_ptr<common::minet::Packet>::~shared_ptr((std::shared_ptr<common::minet::Packet> *const)(v3 + 128));
    v31._M_refcount._M_pi = (std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)2> *)(v3 + 96);
    std::shared_ptr<common::minet::Packet>::shared_ptr(
      (std::shared_ptr<common::minet::Packet> *const)(v3 + 128),
      (const std::shared_ptr<common::minet::Packet> *)(v3 + 96));
    v31._M_ptr = (std::__shared_ptr<common::minet::Packet,(__gnu_cxx::_Lock_policy)2>::element_type *)(v3 + 128);
    ServiceBox::pushPacketToService(v31);
    std::shared_ptr<common::minet::Packet>::~shared_ptr((std::shared_ptr<common::minet::Packet> *const)(v3 + 128));
    v10 = 0;
  }
  std::shared_ptr<common::minet::Packet>::~shared_ptr((std::shared_ptr<common::minet::Packet> *const)(v3 + 96));
  proto::PullRecentChatReq::~PullRecentChatReq((proto::PullRecentChatReq *const)(v3 + 160));
LABEL_85:
  result = v10;
  if ( v50 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8010) = 0;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8018) = 0;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8020) = 0LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF802C) = 0;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8020) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8028) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 12400: range 0000000017D7A754-0000000017D7A7F6
void __cdecl procReunionRegister::procReunionRegister(procReunionRegister *const this)
{
  std::function<int(GmContext&,const std::vector<std::string>&,std::string&)> *v1; // rax
  std::allocator<char> __a; // [rsp+1Fh] [rbp-31h] BYREF
  std::string __k; // [rsp+20h] [rbp-30h] BYREF

  std::allocator<char>::allocator(&__a);
  std::string::basic_string<std::allocator<char>>(&__k, "REUNION", &__a);
  v1 = std::unordered_map<std::string,std::function<int ()(GmContext &,std::vector<std::string> const&,std::string&)>>::operator[](
         &GmUtils::op_func_map[abi:cxx11],
         &__k);
  std::function<int ()(GmContext &,std::vector<std::string> const&,std::string&)>::operator=<int (&)(GmContext &,std::vector<std::string> const&,std::string&)>(
    v1,
    (int (*)(GmContext *, const std::vector<std::string> *, std::string *))procReunion);
  std::string::~string(&__k);
  std::allocator<char>::~allocator(&__a);
};

// Line 12401: range 0000000017C2631F-0000000017C26D63
int32_t __cdecl procReunion(GmContext *context, const std::vector<std::string> *param_vec, std::string *ret_msg)
{
  int32_t v3; // r14d
  unsigned __int64 v4; // r13
  __int64 v5; // rax
  _DWORD *v6; // r12
  const std::string *v7; // rax
  PlayerReunionComp *ReunionComp; // rax
  const std::string *v9; // rax
  const std::string *v10; // rax
  PlayerReunionComp *v11; // rax
  const std::string *v12; // rax
  PlayerReunionComp *v13; // rax
  const std::string *v14; // rax
  const std::string *v15; // rax
  common::milog::MiLogStream *v16; // rcx
  int v17; // r15d
  common::minet::Packet *v18; // r15
  uint32_t Uid; // eax
  GameserverService *v20; // r15
  common::minet::PacketPtr v21; // rdi
  const std::string *v22; // rax
  const std::string *v23; // rax
  common::milog::MiLogStream *v24; // rcx
  int v25; // r15d
  common::minet::Packet *v26; // r15
  uint32_t v27; // eax
  GameserverService *v28; // r15
  common::minet::PacketPtr v29; // rdi
  const std::string *v30; // rax
  PlayerGmComp *GmComp; // rax
  int32_t result; // eax
  bool value; // [rsp+2Fh] [rbp-101h] BYREF
  std::shared_ptr<common::minet::Packet> p_packet_ptr; // [rsp+30h] [rbp-100h] BYREF
  common::milog::MiLogStream v36; // [rsp+40h] [rbp-F0h] BYREF
  char v37[208]; // [rsp+60h] [rbp-D0h] BYREF

  v4 = (unsigned __int64)v37;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v5 = __asan_stack_malloc_2(160LL);
    if ( v5 )
      v4 = v5;
  }
  *(_QWORD *)v4 = 1102416563LL;
  *(_QWORD *)(v4 + 8) = "3 48 4 16 watcher_id:12462 64 16 16 packet_ptr:12470 96 32 9 req:12468";
  *(_QWORD *)(v4 + 16) = procReunion;
  v6 = (_DWORD *)(v4 >> 3);
  v6[536862720] = -235802127;
  v6[536862721] = -234556943;
  v6[536862722] = -219021312;
  v6[536862724] = -202116109;
  if ( !std::vector<std::string>::size(param_vec) )
    goto LABEL_36;
  v7 = std::vector<std::string>::operator[](param_vec, 0LL);
  if ( std::operator==<char>(v7, "CLEAR") )
  {
    if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
      __asan_report_load8();
    ReunionComp = Player::getReunionComp(context->player);
    v3 = PlayerReunionComp::clearAllByGm(ReunionComp);
    goto LABEL_53;
  }
  v9 = std::vector<std::string>::operator[](param_vec, 0LL);
  if ( std::operator==<char>(v9, "ADD_MISSION_SCORE") )
  {
    if ( std::vector<std::string>::size(param_vec) > 1 )
    {
      *(_DWORD *)(v4 + 48) = 0;
      v10 = std::vector<std::string>::operator[](param_vec, 1uLL);
      if ( common::tools::StringUtils::strToNum<unsigned int>(v10, (unsigned int *)(v4 + 48), 1) )
      {
        std::string::operator=(ret_msg, "param score invalid");
        v3 = -1;
      }
      else
      {
        if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
          __asan_report_load8();
        v11 = Player::getReunionComp(context->player);
        v3 = PlayerReunionComp::addMissionScoreByGm(v11, *(_DWORD *)(v4 + 48));
      }
      goto LABEL_53;
    }
LABEL_36:
    std::string::operator=(ret_msg, "param not enough");
    v3 = -1;
    goto LABEL_53;
  }
  v12 = std::vector<std::string>::operator[](param_vec, 0LL);
  if ( std::operator==<char>(v12, "FORCE_TAKE") )
  {
    if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
      __asan_report_load8();
    v13 = Player::getReunionComp(context->player);
    v3 = PlayerReunionComp::forceTakeReunion(v13);
    goto LABEL_53;
  }
  v14 = std::vector<std::string>::operator[](param_vec, 0LL);
  if ( std::operator==<char>(v14, "TAKE_MISSION_REWARD") )
  {
    if ( std::vector<std::string>::size(param_vec) <= 1 )
      goto LABEL_36;
    *(_DWORD *)(v4 + 48) = 0;
    v15 = std::vector<std::string>::operator[](param_vec, 1uLL);
    if ( common::tools::StringUtils::strToNum<unsigned int>(v15, (unsigned int *)(v4 + 48), 1) )
    {
      std::string::operator=(ret_msg, "param reward_index invalid");
      v3 = -1;
      goto LABEL_53;
    }
    proto::TakeReunionMissionRewardReq::TakeReunionMissionRewardReq((proto::TakeReunionMissionRewardReq *const)(v4 + 96));
    proto::TakeReunionMissionRewardReq::set_reward_index(
      (proto::TakeReunionMissionRewardReq *const)(v4 + 96),
      *(_DWORD *)(v4 + 48));
    common::minet::PacketUtils::createPacket<proto::TakeReunionMissionRewardReq>((const proto::TakeReunionMissionRewardReq *)(v4 + 64));
    if ( std::operator==<common::minet::Packet>((const std::shared_ptr<common::minet::Packet> *)(v4 + 64), 0LL) )
    {
      common::milog::MiLogStream::create(
        &v36,
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/player/gm/player_gm_comp.cpp",
        "procReunion",
        12448);
      v16 = common::milog::MiLogStream::operator<<<char [26],(char *[26])0>(
              &v36,
              (const char (*)[26])"createPacket failed, uid:");
      if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
        __asan_report_load8();
      operator<<(v16, context->player);
      common::milog::MiLogStream::~MiLogStream(&v36);
      v3 = -1;
      v17 = 0;
    }
    else
    {
      v18 = std::__shared_ptr_access<common::minet::Packet,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<common::minet::Packet,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 64));
      if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
        __asan_report_load8();
      Uid = Player::getUid(context->player);
      common::minet::Packet::setUserId(v18, Uid);
      v20 = ServiceBox::findService<GameserverService>();
      std::shared_ptr<common::minet::Packet>::shared_ptr(
        &p_packet_ptr,
        (const std::shared_ptr<common::minet::Packet> *)(v4 + 64));
      GameserverService::setPacketGameThreadIndex(v20, &p_packet_ptr);
      std::shared_ptr<common::minet::Packet>::~shared_ptr(&p_packet_ptr);
      v21._M_refcount._M_pi = (std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)2> *)(v4 + 64);
      std::shared_ptr<common::minet::Packet>::shared_ptr(
        &p_packet_ptr,
        (const std::shared_ptr<common::minet::Packet> *)(v4 + 64));
      v21._M_ptr = (std::__shared_ptr<common::minet::Packet,(__gnu_cxx::_Lock_policy)2>::element_type *)&p_packet_ptr;
      ServiceBox::pushPacketToService(v21);
      std::shared_ptr<common::minet::Packet>::~shared_ptr(&p_packet_ptr);
      v17 = 1;
    }
    std::shared_ptr<common::minet::Packet>::~shared_ptr((std::shared_ptr<common::minet::Packet> *const)(v4 + 64));
    proto::TakeReunionMissionRewardReq::~TakeReunionMissionRewardReq((proto::TakeReunionMissionRewardReq *const)(v4 + 96));
    if ( v17 == 1 )
      goto LABEL_52;
  }
  else
  {
    v22 = std::vector<std::string>::operator[](param_vec, 0LL);
    if ( !std::operator==<char>(v22, "TAKE_WATCHER_REWARD") )
    {
      v30 = std::vector<std::string>::operator[](param_vec, 0LL);
      if ( std::operator==<char>(v30, "NO_DAY_LOCK") )
      {
        if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
          __asan_report_load8();
        GmComp = Player::getGmComp(context->player);
        value = 1;
        PlayerGmComp::setGmSetValue<bool>(GmComp, 0xBu, &value);
      }
      goto LABEL_52;
    }
    if ( std::vector<std::string>::size(param_vec) <= 1 )
      goto LABEL_36;
    *(_DWORD *)(v4 + 48) = 0;
    v23 = std::vector<std::string>::operator[](param_vec, 1uLL);
    if ( common::tools::StringUtils::strToNum<unsigned int>(v23, (unsigned int *)(v4 + 48), 1) )
    {
      std::string::operator=(ret_msg, "param watcher_id invalid");
      v3 = -1;
      goto LABEL_53;
    }
    proto::TakeReunionWatcherRewardReq::TakeReunionWatcherRewardReq((proto::TakeReunionWatcherRewardReq *const)(v4 + 96));
    proto::TakeReunionWatcherRewardReq::set_watcher_id(
      (proto::TakeReunionWatcherRewardReq *const)(v4 + 96),
      *(_DWORD *)(v4 + 48));
    common::minet::PacketUtils::createPacket<proto::TakeReunionWatcherRewardReq>((const proto::TakeReunionWatcherRewardReq *)(v4 + 64));
    if ( std::operator==<common::minet::Packet>((const std::shared_ptr<common::minet::Packet> *)(v4 + 64), 0LL) )
    {
      common::milog::MiLogStream::create(
        &v36,
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/player/gm/player_gm_comp.cpp",
        "procReunion",
        12473);
      v24 = common::milog::MiLogStream::operator<<<char [26],(char *[26])0>(
              &v36,
              (const char (*)[26])"createPacket failed, uid:");
      if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
        __asan_report_load8();
      operator<<(v24, context->player);
      common::milog::MiLogStream::~MiLogStream(&v36);
      v3 = -1;
      v25 = 0;
    }
    else
    {
      v26 = std::__shared_ptr_access<common::minet::Packet,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<common::minet::Packet,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 64));
      if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
        __asan_report_load8();
      v27 = Player::getUid(context->player);
      common::minet::Packet::setUserId(v26, v27);
      v28 = ServiceBox::findService<GameserverService>();
      std::shared_ptr<common::minet::Packet>::shared_ptr(
        &p_packet_ptr,
        (const std::shared_ptr<common::minet::Packet> *)(v4 + 64));
      GameserverService::setPacketGameThreadIndex(v28, &p_packet_ptr);
      std::shared_ptr<common::minet::Packet>::~shared_ptr(&p_packet_ptr);
      v29._M_refcount._M_pi = (std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)2> *)(v4 + 64);
      std::shared_ptr<common::minet::Packet>::shared_ptr(
        &p_packet_ptr,
        (const std::shared_ptr<common::minet::Packet> *)(v4 + 64));
      v29._M_ptr = (std::__shared_ptr<common::minet::Packet,(__gnu_cxx::_Lock_policy)2>::element_type *)&p_packet_ptr;
      ServiceBox::pushPacketToService(v29);
      std::shared_ptr<common::minet::Packet>::~shared_ptr(&p_packet_ptr);
      v25 = 1;
    }
    std::shared_ptr<common::minet::Packet>::~shared_ptr((std::shared_ptr<common::minet::Packet> *const)(v4 + 64));
    proto::TakeReunionWatcherRewardReq::~TakeReunionWatcherRewardReq((proto::TakeReunionWatcherRewardReq *const)(v4 + 96));
    if ( v25 == 1 )
LABEL_52:
      v3 = 0;
  }
LABEL_53:
  result = v3;
  if ( v37 == (char *)v4 )
  {
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0LL;
    *(_DWORD *)((v4 >> 3) + 0x7FFF8008) = 0;
    *(_DWORD *)((v4 >> 3) + 0x7FFF8010) = 0;
  }
  else
  {
    *(_QWORD *)v4 = 1172321806LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v4 >> 3) + 0x7FFF8010) = -168430091;
  }
  return result;
};

// Line 12487: range 0000000017D7A7F8-0000000017D7A89A
void __cdecl procRoutineRegister::procRoutineRegister(procRoutineRegister *const this)
{
  std::function<int(GmContext&,const std::vector<std::string>&,std::string&)> *v1; // rax
  std::allocator<char> __a; // [rsp+1Fh] [rbp-31h] BYREF
  std::string __k; // [rsp+20h] [rbp-30h] BYREF

  std::allocator<char>::allocator(&__a);
  std::string::basic_string<std::allocator<char>>(&__k, "ROUTINE", &__a);
  v1 = std::unordered_map<std::string,std::function<int ()(GmContext &,std::vector<std::string> const&,std::string&)>>::operator[](
         &GmUtils::op_func_map[abi:cxx11],
         &__k);
  std::function<int ()(GmContext &,std::vector<std::string> const&,std::string&)>::operator=<int (&)(GmContext &,std::vector<std::string> const&,std::string&)>(
    v1,
    (int (*)(GmContext *, const std::vector<std::string> *, std::string *))procRoutine);
  std::string::~string(&__k);
  std::allocator<char>::~allocator(&__a);
};

// Line 12488: range 0000000017C26D64-0000000017C27290
int32_t __cdecl procRoutine(GmContext *context, const std::vector<std::string> *param_vec, std::string *ret_msg)
{
  unsigned __int64 v3; // r12
  __int64 v4; // rax
  unsigned __int64 v5; // r13
  int32_t result; // eax
  const std::string *v7; // rax
  const std::string *v8; // rax
  PlayerRoutineComp *RoutineComp; // rax
  const std::string *v11; // rax
  const std::string *v12; // rax
  PlayerRoutineComp *v14; // rax
  const std::string *v15; // rax
  const std::string *v16; // rax
  PlayerRoutineComp *v18; // rax
  const std::string *v19; // rax
  const std::string *v20; // rax
  PlayerRoutineComp *v22; // rax
  const std::string *v23; // rax
  const std::string *v24; // rax
  PlayerRoutineComp *v26; // rax
  char v28[96]; // [rsp+20h] [rbp-60h] BYREF

  v3 = (unsigned __int64)v28;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_0(64LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "1 32 4 16 routine_id:12536";
  *(_QWORD *)(v3 + 16) = procRoutine;
  v5 = v3 >> 3;
  *(_DWORD *)(v5 + 2147450880) = -235802127;
  *(_DWORD *)(v5 + 2147450884) = -202116348;
  if ( std::vector<std::string>::size(param_vec) <= 1 )
  {
    std::string::operator=(ret_msg, "param not enough");
    result = -1;
    goto LABEL_55;
  }
  v7 = std::vector<std::string>::operator[](param_vec, 0LL);
  if ( std::operator==<char>(v7, "OPEN") )
  {
    *(_DWORD *)(v3 + 32) = 0;
    v8 = std::vector<std::string>::operator[](param_vec, 1uLL);
    if ( common::tools::StringUtils::strToNum<unsigned int>(v8, (unsigned int *)(v3 + 32), 1) || !*(_DWORD *)(v3 + 32) )
    {
LABEL_50:
      std::string::operator=(ret_msg, "param routine_type invalid");
      result = -1;
      goto LABEL_55;
    }
    if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
      __asan_report_load8();
    RoutineComp = Player::getRoutineComp(context->player);
    result = PlayerRoutineComp::openRoutineTypeByGm(RoutineComp, *(_DWORD *)(v3 + 32));
  }
  else
  {
    v11 = std::vector<std::string>::operator[](param_vec, 0LL);
    if ( std::operator==<char>(v11, "CLOSE") )
    {
      *(_DWORD *)(v3 + 32) = 0;
      v12 = std::vector<std::string>::operator[](param_vec, 1uLL);
      if ( common::tools::StringUtils::strToNum<unsigned int>(v12, (unsigned int *)(v3 + 32), 1)
        || !*(_DWORD *)(v3 + 32) )
      {
        goto LABEL_50;
      }
      if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
        __asan_report_load8();
      v14 = Player::getRoutineComp(context->player);
      result = PlayerRoutineComp::closeRoutineTypeByGm(v14, *(_DWORD *)(v3 + 32));
    }
    else
    {
      v15 = std::vector<std::string>::operator[](param_vec, 0LL);
      if ( std::operator==<char>(v15, "REFRESH") )
      {
        *(_DWORD *)(v3 + 32) = 0;
        v16 = std::vector<std::string>::operator[](param_vec, 1uLL);
        if ( common::tools::StringUtils::strToNum<unsigned int>(v16, (unsigned int *)(v3 + 32), 1)
          || !*(_DWORD *)(v3 + 32) )
        {
          goto LABEL_50;
        }
        if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
          __asan_report_load8();
        v18 = Player::getRoutineComp(context->player);
        result = PlayerRoutineComp::refreshRoutineTypeByGm(v18, *(_DWORD *)(v3 + 32));
      }
      else
      {
        v19 = std::vector<std::string>::operator[](param_vec, 0LL);
        if ( std::operator==<char>(v19, "FINISH") )
        {
          *(_DWORD *)(v3 + 32) = 0;
          v20 = std::vector<std::string>::operator[](param_vec, 1uLL);
          if ( common::tools::StringUtils::strToNum<unsigned int>(v20, (unsigned int *)(v3 + 32), 1)
            || !*(_DWORD *)(v3 + 32) )
          {
            goto LABEL_50;
          }
          if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
            __asan_report_load8();
          v22 = Player::getRoutineComp(context->player);
          result = PlayerRoutineComp::finishRoutineByGm(v22, *(_DWORD *)(v3 + 32));
        }
        else
        {
          v23 = std::vector<std::string>::operator[](param_vec, 0LL);
          if ( std::operator==<char>(v23, off_26356D00) )
          {
            *(_DWORD *)(v3 + 32) = 0;
            v24 = std::vector<std::string>::operator[](param_vec, 1uLL);
            if ( common::tools::StringUtils::strToNum<unsigned int>(v24, (unsigned int *)(v3 + 32), 1)
              || !*(_DWORD *)(v3 + 32) )
            {
              goto LABEL_50;
            }
            if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
              __asan_report_load8();
            v26 = Player::getRoutineComp(context->player);
            result = PlayerRoutineComp::addRoutineByGm(v26, *(_DWORD *)(v3 + 32));
          }
          else
          {
            result = -1;
          }
        }
      }
    }
  }
LABEL_55:
  if ( v28 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 12547: range 0000000017D7A89C-0000000017D7A93E
void __cdecl procTreasureMapRegister::procTreasureMapRegister(procTreasureMapRegister *const this)
{
  std::function<int(GmContext&,const std::vector<std::string>&,std::string&)> *v1; // rax
  std::allocator<char> __a; // [rsp+1Fh] [rbp-31h] BYREF
  std::string __k; // [rsp+20h] [rbp-30h] BYREF

  std::allocator<char>::allocator(&__a);
  std::string::basic_string<std::allocator<char>>(&__k, "TREASURE", &__a);
  v1 = std::unordered_map<std::string,std::function<int ()(GmContext &,std::vector<std::string> const&,std::string&)>>::operator[](
         &GmUtils::op_func_map[abi:cxx11],
         &__k);
  std::function<int ()(GmContext &,std::vector<std::string> const&,std::string&)>::operator=<int (&)(GmContext &,std::vector<std::string> const&,std::string&)>(
    v1,
    (int (*)(GmContext *, const std::vector<std::string> *, std::string *))procTreasureMap);
  std::string::~string(&__k);
  std::allocator<char>::~allocator(&__a);
};

// Line 12548: range 0000000017C27291-0000000017C277C2
int32_t __cdecl procTreasureMap(GmContext *context, const std::vector<std::string> *param_vec, std::string *ret_msg)
{
  unsigned __int64 v3; // r12
  __int64 v4; // rax
  _DWORD *v5; // r13
  int32_t active; // r14d
  const std::string *v7; // rax
  std::__shared_ptr_access<TreasureMapActivity,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v8; // rdx
  const std::string *v9; // rax
  std::__shared_ptr_access<TreasureMapActivity,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v10; // rdx
  const std::string *v11; // rax
  const std::string *v12; // rax
  std::__shared_ptr_access<TreasureMapActivity,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v13; // rax
  const std::string *v14; // rax
  std::__shared_ptr_access<TreasureMapActivity,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v15; // rax
  const std::string *v16; // rax
  std::__shared_ptr_access<TreasureMapActivity,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v17; // rdx
  const std::string *v18; // rax
  const std::string *v19; // rax
  const std::string *v21; // rax
  std::__shared_ptr_access<TreasureMapActivity,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v22; // rax
  int32_t result; // eax
  std::string v25; // [rsp+20h] [rbp-B0h] BYREF
  char v26[144]; // [rsp+40h] [rbp-90h] BYREF

  v3 = (unsigned __int64)v26;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_1(96LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "2 48 4 15 region_id:12600 64 16 18 activity_ptr:12549";
  *(_QWORD *)(v3 + 16) = procTreasureMap;
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = -234556943;
  v5[536862722] = -202178560;
  if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
    __asan_report_load8();
  Player::getActivityComp(context->player);
  PlayerActivityComp::findOpenningActivity<TreasureMapActivity>((PlayerActivityComp *const)(v3 + 64));
  if ( std::operator==<TreasureMapActivity>(0LL, (const std::shared_ptr<TreasureMapActivity> *)(v3 + 64)) )
  {
    std::string::operator=(ret_msg, "no activity open");
    active = -1;
    goto LABEL_34;
  }
  if ( !std::vector<std::string>::size(param_vec) )
    goto LABEL_25;
  v7 = std::vector<std::string>::operator[](param_vec, 0LL);
  if ( std::operator==<char>(v7, "QUERY_TOKEN") )
  {
    v8 = std::__shared_ptr_access<TreasureMapActivity,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<TreasureMapActivity,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 64));
    TreasureMapActivity::formatTokenString(v8, ret_msg);
LABEL_33:
    active = 0;
    goto LABEL_34;
  }
  v9 = std::vector<std::string>::operator[](param_vec, 0LL);
  if ( std::operator==<char>(v9, "QUERY_GROUPS") )
  {
    v10 = std::__shared_ptr_access<TreasureMapActivity,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<TreasureMapActivity,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 64));
    active = TreasureMapActivity::formatActiveRegionGroups(v10, ret_msg);
    goto LABEL_34;
  }
  v11 = std::vector<std::string>::operator[](param_vec, 0LL);
  if ( std::operator==<char>(v11, "FINISH_REGION_GROUP") )
  {
    if ( std::vector<std::string>::size(param_vec) > 1 )
    {
      *(_DWORD *)(v3 + 48) = 0;
      v12 = std::vector<std::string>::operator[](param_vec, 1uLL);
      if ( common::tools::StringUtils::strToNum<unsigned int>(v12, (unsigned int *)(v3 + 48), 1) )
      {
        std::string::operator=(ret_msg, "param group_id invalid");
        active = -1;
      }
      else
      {
        v13 = std::__shared_ptr_access<TreasureMapActivity,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<TreasureMapActivity,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 64));
        active = TreasureMapActivity::finishRegionGroupByGM(v13, *(_DWORD *)(v3 + 48));
      }
      goto LABEL_34;
    }
    goto LABEL_25;
  }
  v14 = std::vector<std::string>::operator[](param_vec, 0LL);
  if ( std::operator==<char>(v14, "RESET_ALL") )
  {
    v15 = std::__shared_ptr_access<TreasureMapActivity,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<TreasureMapActivity,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 64));
    TreasureMapActivity::resetAllRegions(v15);
    goto LABEL_33;
  }
  v16 = std::vector<std::string>::operator[](param_vec, 0LL);
  if ( std::operator==<char>(v16, "FINISH_NEXT_REGION_GROUP") )
  {
    v17 = std::__shared_ptr_access<TreasureMapActivity,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<TreasureMapActivity,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 64));
    active = TreasureMapActivity::finishNextRegionGroupByGM(v17, ret_msg);
    goto LABEL_34;
  }
  v18 = std::vector<std::string>::operator[](param_vec, 0LL);
  if ( !std::operator==<char>(v18, "FINISH_REGION") )
    goto LABEL_33;
  if ( std::vector<std::string>::size(param_vec) <= 1 )
  {
LABEL_25:
    std::string::operator=(ret_msg, "param not enough");
    active = -1;
    goto LABEL_34;
  }
  *(_DWORD *)(v3 + 48) = 0;
  v19 = std::vector<std::string>::operator[](param_vec, 1uLL);
  if ( common::tools::StringUtils::strToNum<unsigned int>(v19, (unsigned int *)(v3 + 48), 1) || !*(_DWORD *)(v3 + 48) )
  {
    v21 = std::vector<std::string>::operator[](param_vec, 1uLL);
    std::operator+<char>(&v25, " param region_id invalid:", v21);
    std::string::operator=(ret_msg, &v25);
    std::string::~string(&v25);
    active = -1;
  }
  else
  {
    v22 = std::__shared_ptr_access<TreasureMapActivity,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<TreasureMapActivity,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 64));
    active = TreasureMapActivity::finishRegionByGM(v22, *(_DWORD *)(v3 + 48), ret_msg);
  }
LABEL_34:
  std::shared_ptr<TreasureMapActivity>::~shared_ptr((std::shared_ptr<TreasureMapActivity> *const)(v3 + 64));
  result = active;
  if ( v26 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8008) = 0;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8008) = -168430091;
  }
  return result;
};

// Line 12612: range 0000000017D7A940-0000000017D7A9E2
void __cdecl procDragonSpineRegister::procDragonSpineRegister(procDragonSpineRegister *const this)
{
  std::function<int(GmContext&,const std::vector<std::string>&,std::string&)> *v1; // rax
  std::allocator<char> __a; // [rsp+1Fh] [rbp-31h] BYREF
  std::string __k; // [rsp+20h] [rbp-30h] BYREF

  std::allocator<char>::allocator(&__a);
  std::string::basic_string<std::allocator<char>>(&__k, "DRAGON_SPINE", &__a);
  v1 = std::unordered_map<std::string,std::function<int ()(GmContext &,std::vector<std::string> const&,std::string&)>>::operator[](
         &GmUtils::op_func_map[abi:cxx11],
         &__k);
  std::function<int ()(GmContext &,std::vector<std::string> const&,std::string&)>::operator=<int (&)(GmContext &,std::vector<std::string> const&,std::string&)>(
    v1,
    (int (*)(GmContext *, const std::vector<std::string> *, std::string *))procDragonSpine);
  std::string::~string(&__k);
  std::allocator<char>::~allocator(&__a);
};

// Line 12613: range 0000000017C277C3-0000000017C279E8
int32_t __cdecl procDragonSpine(GmContext *context, const std::vector<std::string> *param_vec, std::string *ret_msg)
{
  unsigned __int64 v3; // rbx
  __int64 v4; // rax
  unsigned __int64 v5; // r13
  int32_t v6; // r14d
  const std::string *v7; // rax
  std::__shared_ptr_access<DragonSpineActivity,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v8; // rax
  const std::string *v9; // rax
  std::__shared_ptr_access<DragonSpineActivity,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v10; // rax
  int32_t result; // eax
  char v13[112]; // [rsp+20h] [rbp-70h] BYREF

  v3 = (unsigned __int64)v13;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_0(64LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "1 32 16 18 activity_ptr:12614";
  *(_QWORD *)(v3 + 16) = procDragonSpine;
  v5 = v3 >> 3;
  *(_DWORD *)(v5 + 2147450880) = -235802127;
  *(_DWORD *)(v5 + 2147450884) = -202178560;
  if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
    __asan_report_load8();
  Player::getActivityComp(context->player);
  PlayerActivityComp::findOpenningActivity<DragonSpineActivity>((PlayerActivityComp *const)(v3 + 32));
  if ( std::operator==<DragonSpineActivity>(0LL, (const std::shared_ptr<DragonSpineActivity> *)(v3 + 32)) )
  {
    std::string::operator=(ret_msg, "no activity open");
    v6 = -1;
  }
  else if ( std::vector<std::string>::size(param_vec) )
  {
    v7 = std::vector<std::string>::operator[](param_vec, 0LL);
    if ( std::operator==<char>(v7, "UP_WEAPON_ENHANCE") )
    {
      v8 = std::__shared_ptr_access<DragonSpineActivity,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<DragonSpineActivity,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 32));
      v6 = DragonSpineActivity::forceUpWeaponEnhanceLevel(v8);
    }
    else
    {
      v9 = std::vector<std::string>::operator[](param_vec, 0LL);
      if ( std::operator==<char>(v9, "CLEAR_WEAPON_ENHANCE") )
      {
        v10 = std::__shared_ptr_access<DragonSpineActivity,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<DragonSpineActivity,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 32));
        v6 = DragonSpineActivity::clearWeaponEnhanceLevel(v10);
      }
      else
      {
        v6 = 0;
      }
    }
  }
  else
  {
    std::string::operator=(ret_msg, "param not enough");
    v6 = -1;
  }
  std::shared_ptr<DragonSpineActivity>::~shared_ptr((std::shared_ptr<DragonSpineActivity> *const)(v3 + 32));
  result = v6;
  if ( v13 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 12637: range 0000000017D7A9E4-0000000017D7AA86
void __cdecl procBlessingActivityRegister::procBlessingActivityRegister(procBlessingActivityRegister *const this)
{
  std::function<int(GmContext&,const std::vector<std::string>&,std::string&)> *v1; // rax
  std::allocator<char> __a; // [rsp+1Fh] [rbp-31h] BYREF
  std::string __k; // [rsp+20h] [rbp-30h] BYREF

  std::allocator<char>::allocator(&__a);
  std::string::basic_string<std::allocator<char>>(&__k, "BLESSING", &__a);
  v1 = std::unordered_map<std::string,std::function<int ()(GmContext &,std::vector<std::string> const&,std::string&)>>::operator[](
         &GmUtils::op_func_map[abi:cxx11],
         &__k);
  std::function<int ()(GmContext &,std::vector<std::string> const&,std::string&)>::operator=<int (&)(GmContext &,std::vector<std::string> const&,std::string&)>(
    v1,
    (int (*)(GmContext *, const std::vector<std::string> *, std::string *))procBlessingActivity);
  std::string::~string(&__k);
  std::allocator<char>::~allocator(&__a);
};

// Line 12638: range 0000000017C279E9-0000000017C27FB6
int32_t __cdecl procBlessingActivity(
        GmContext *context,
        const std::vector<std::string> *param_vec,
        std::string *ret_msg)
{
  unsigned __int64 v3; // r12
  __int64 v4; // rax
  _DWORD *v5; // r13
  int32_t AllPicByGm; // r14d
  const std::string *v7; // rax
  std::__shared_ptr_access<BlessingActivity,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v8; // rax
  void (__fastcall **vptr_DescribalBase)(char *, std::__shared_ptr_access<BlessingActivity,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *); // rdx
  const std::string *v10; // rax
  const std::string *v11; // rax
  BlessingActivity *v12; // rax
  const std::string *v13; // rax
  const std::string *v14; // rax
  BlessingActivity *v15; // rax
  const std::string *v16; // rax
  const std::string *v17; // rax
  BlessingActivity *v18; // rax
  const std::string *v19; // rax
  BlessingActivity *v20; // rax
  const std::string *v21; // rax
  BlessingActivity *v22; // rax
  int32_t result; // eax
  char v25[32]; // [rsp+20h] [rbp-B0h] BYREF
  char v26[144]; // [rsp+40h] [rbp-90h] BYREF

  v3 = (unsigned __int64)v26;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_1(96LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "2 48 4 11 count:12693 64 16 18 activity_ptr:12639";
  *(_QWORD *)(v3 + 16) = procBlessingActivity;
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = -234556943;
  v5[536862722] = -202178560;
  if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
    __asan_report_load8();
  Player::getActivityComp(context->player);
  PlayerActivityComp::findOpenningActivity<BlessingActivity>((PlayerActivityComp *const)(v3 + 64));
  if ( std::operator==<BlessingActivity>(0LL, (const std::shared_ptr<BlessingActivity> *)(v3 + 64)) )
  {
    std::string::operator=(ret_msg, "no activity open");
    AllPicByGm = -1;
    goto LABEL_36;
  }
  if ( !std::vector<std::string>::size(param_vec) )
    goto LABEL_27;
  v7 = std::vector<std::string>::operator[](param_vec, 0LL);
  if ( std::operator==<char>(v7, "DESC") )
  {
    v8 = std::__shared_ptr_access<BlessingActivity,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<BlessingActivity,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 64));
    if ( *(_BYTE *)(((unsigned __int64)v8 >> 3) + 0x7FFF8000) )
      __asan_report_load8();
    vptr_DescribalBase = (void (__fastcall **)(char *, std::__shared_ptr_access<BlessingActivity,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *))v8->_vptr_DescribalBase;
    if ( *(_BYTE *)(((unsigned __int64)v8->_vptr_DescribalBase >> 3) + 0x7FFF8000) )
      __asan_report_load8();
    (*vptr_DescribalBase)(v25, v8);
    std::string::operator=(ret_msg, v25);
    std::string::~string(v25);
    AllPicByGm = 0;
    goto LABEL_36;
  }
  v10 = std::vector<std::string>::operator[](param_vec, 0LL);
  if ( std::operator==<char>(v10, "SCAN") )
  {
    if ( std::vector<std::string>::size(param_vec) > 1 )
    {
      *(_DWORD *)(v3 + 48) = 0;
      v11 = std::vector<std::string>::operator[](param_vec, 1uLL);
      if ( !common::tools::StringUtils::strToNum<unsigned int>(v11, (unsigned int *)(v3 + 48), 1) )
      {
        v12 = std::__shared_ptr_access<BlessingActivity,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<BlessingActivity,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 64));
        AllPicByGm = BlessingActivity::scanEntityByGm(v12, *(_DWORD *)(v3 + 48));
        goto LABEL_36;
      }
      goto LABEL_19;
    }
    goto LABEL_27;
  }
  v13 = std::vector<std::string>::operator[](param_vec, 0LL);
  if ( std::operator==<char>(v13, "SIMULATE") )
  {
    if ( std::vector<std::string>::size(param_vec) > 1 )
    {
      *(_DWORD *)(v3 + 48) = 0;
      v14 = std::vector<std::string>::operator[](param_vec, 1uLL);
      if ( !common::tools::StringUtils::strToNum<unsigned int>(v14, (unsigned int *)(v3 + 48), 1) )
      {
        v15 = std::__shared_ptr_access<BlessingActivity,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<BlessingActivity,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 64));
        AllPicByGm = BlessingActivity::simulateDrop(v15, *(_DWORD *)(v3 + 48));
        goto LABEL_36;
      }
LABEL_19:
      std::string::operator=(ret_msg, "param scan_config_id invalid");
      AllPicByGm = -1;
      goto LABEL_36;
    }
LABEL_27:
    std::string::operator=(ret_msg, "param not enough");
    AllPicByGm = -1;
    goto LABEL_36;
  }
  v16 = std::vector<std::string>::operator[](param_vec, 0LL);
  if ( std::operator==<char>(v16, _f.gap0) )
  {
    if ( std::vector<std::string>::size(param_vec) > 1 )
    {
      *(_DWORD *)(v3 + 48) = 0;
      v17 = std::vector<std::string>::operator[](param_vec, 1uLL);
      if ( common::tools::StringUtils::strToNum<unsigned int>(v17, (unsigned int *)(v3 + 48), 1) )
      {
        std::string::operator=(ret_msg, "param count invalid");
        AllPicByGm = -1;
      }
      else
      {
        v18 = std::__shared_ptr_access<BlessingActivity,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<BlessingActivity,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 64));
        AllPicByGm = BlessingActivity::generateAllPicByGm(v18, *(_DWORD *)(v3 + 48));
      }
      goto LABEL_36;
    }
    goto LABEL_27;
  }
  v19 = std::vector<std::string>::operator[](param_vec, 0LL);
  if ( std::operator==<char>(v19, "RESET_DAILY") )
  {
    v20 = std::__shared_ptr_access<BlessingActivity,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<BlessingActivity,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 64));
    BlessingActivity::resetAndRefreshDailyData(v20);
  }
  else
  {
    v21 = std::vector<std::string>::operator[](param_vec, 0LL);
    if ( std::operator==<char>(v21, "RESET_ALL") )
    {
      v22 = std::__shared_ptr_access<BlessingActivity,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<BlessingActivity,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 64));
      BlessingActivity::resetAllByGm(v22);
    }
  }
  AllPicByGm = 0;
LABEL_36:
  std::shared_ptr<BlessingActivity>::~shared_ptr((std::shared_ptr<BlessingActivity> *const)(v3 + 64));
  result = AllPicByGm;
  if ( v26 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8008) = 0;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8008) = -168430091;
  }
  return result;
};

// Line 12712: range 0000000017D7AA88-0000000017D7AB2A
void __cdecl procMiracleRingRegister::procMiracleRingRegister(procMiracleRingRegister *const this)
{
  std::function<int(GmContext&,const std::vector<std::string>&,std::string&)> *v1; // rax
  std::allocator<char> __a; // [rsp+1Fh] [rbp-31h] BYREF
  std::string __k; // [rsp+20h] [rbp-30h] BYREF

  std::allocator<char>::allocator(&__a);
  std::string::basic_string<std::allocator<char>>(&__k, "MIRACLERING", &__a);
  v1 = std::unordered_map<std::string,std::function<int ()(GmContext &,std::vector<std::string> const&,std::string&)>>::operator[](
         &GmUtils::op_func_map[abi:cxx11],
         &__k);
  std::function<int ()(GmContext &,std::vector<std::string> const&,std::string&)>::operator=<int (&)(GmContext &,std::vector<std::string> const&,std::string&)>(
    v1,
    (int (*)(GmContext *, const std::vector<std::string> *, std::string *))procMiracleRing);
  std::string::~string(&__k);
  std::allocator<char>::~allocator(&__a);
};

// Line 12713: range 0000000017C27FB7-0000000017C28479
int32_t __cdecl procMiracleRing(GmContext *context, const std::vector<std::string> *param_vec, std::string *ret_msg)
{
  unsigned __int64 v3; // rbx
  __int64 v4; // rax
  unsigned __int64 v5; // r14
  int32_t refreshed; // r12d
  const std::string *v7; // rax
  PlayerMiracleRingComp *MiracleRingComp; // rax
  const std::string *v9; // rax
  PlayerMiracleRingComp *v10; // rax
  const std::string *v11; // rax
  PlayerMiracleRingComp *v12; // rax
  const std::string *v13; // rax
  common::milog::MiLogStream *v14; // rcx
  PlayerMiracleRingComp *v15; // r12
  std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v16; // rax
  const Vector3 *Rotation; // r15
  std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v18; // rax
  const Vector3 *Position; // rax
  const std::string *v20; // rax
  PlayerMiracleRingComp *v21; // rax
  int32_t result; // eax
  common::milog::MiLogStream v24; // [rsp+20h] [rbp-90h] BYREF
  char v25[112]; // [rsp+40h] [rbp-70h] BYREF

  v3 = (unsigned __int64)v25;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_0(64LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "1 32 16 16 avatar_ptr:12733";
  *(_QWORD *)(v3 + 16) = procMiracleRing;
  v5 = v3 >> 3;
  *(_DWORD *)(v5 + 2147450880) = -235802127;
  *(_DWORD *)(v5 + 2147450884) = -202178560;
  if ( std::vector<std::string>::size(param_vec) )
  {
    v7 = std::vector<std::string>::operator[](param_vec, 0LL);
    if ( std::operator==<char>(v7, "DELIVER") )
    {
      if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
        __asan_report_load8();
      MiracleRingComp = Player::getMiracleRingComp(context->player);
      refreshed = PlayerMiracleRingComp::setDeliverdItemFinishedByGm(MiracleRingComp);
    }
    else
    {
      v9 = std::vector<std::string>::operator[](param_vec, 0LL);
      if ( std::operator==<char>(v9, "GRANT") )
      {
        if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
          __asan_report_load8();
        v10 = Player::getMiracleRingComp(context->player);
        refreshed = PlayerMiracleRingComp::grantMiracleRingDropItemsByGm(v10);
      }
      else
      {
        v11 = std::vector<std::string>::operator[](param_vec, 0LL);
        if ( std::operator==<char>(v11, "REFRESH") )
        {
          if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
            __asan_report_load8();
          v12 = Player::getMiracleRingComp(context->player);
          refreshed = PlayerMiracleRingComp::refreshMiracleRingCdByGm(v12);
        }
        else
        {
          v13 = std::vector<std::string>::operator[](param_vec, 0LL);
          if ( std::operator==<char>(v13, "PLACE") )
          {
            if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
              __asan_report_load8();
            Player::getAvatarComp(context->player);
            PlayerAvatarComp::getCurAvatar((const PlayerAvatarComp *const)(v3 + 32));
            if ( std::operator==<Avatar>((const std::shared_ptr<Avatar> *)(v3 + 32), 0LL) )
            {
              common::milog::MiLogStream::create(
                &v24,
                &common::milog::MiLogDefault::default_log_obj_,
                3u,
                "./src/player/gm/player_gm_comp.cpp",
                "procMiracleRing",
                12736);
              v14 = common::milog::MiLogStream::operator<<<char [19],(char *[19])0>(
                      &v24,
                      (const char (*)[19])"getCurAvatar fails");
              if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
                __asan_report_load8();
              operator<<(v14, context->player);
              common::milog::MiLogStream::~MiLogStream(&v24);
              refreshed = -1;
            }
            else
            {
              if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
                __asan_report_load8();
              v15 = Player::getMiracleRingComp(context->player);
              v16 = std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 32));
              Rotation = Entity::getRotation((const Entity *const)v16);
              v18 = std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 32));
              Position = Entity::getPosition((const Entity *const)v18);
              refreshed = PlayerMiracleRingComp::placeMiracleRing(v15, Position, Rotation);
            }
            std::shared_ptr<Avatar>::~shared_ptr((std::shared_ptr<Avatar> *const)(v3 + 32));
          }
          else
          {
            v20 = std::vector<std::string>::operator[](param_vec, 0LL);
            if ( std::operator==<char>(v20, "RETRACT") )
            {
              if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
                __asan_report_load8();
              v21 = Player::getMiracleRingComp(context->player);
              refreshed = PlayerMiracleRingComp::retractMiracleRing(v21);
            }
            else
            {
              refreshed = 0;
            }
          }
        }
      }
    }
  }
  else
  {
    std::string::operator=(ret_msg, "param not enough");
    refreshed = -1;
  }
  result = refreshed;
  if ( v25 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 12748: range 0000000017D7AB2C-0000000017D7ABCE
void __cdecl procMechanicusRegister::procMechanicusRegister(procMechanicusRegister *const this)
{
  std::function<int(GmContext&,const std::vector<std::string>&,std::string&)> *v1; // rax
  std::allocator<char> __a; // [rsp+1Fh] [rbp-31h] BYREF
  std::string __k; // [rsp+20h] [rbp-30h] BYREF

  std::allocator<char>::allocator(&__a);
  std::string::basic_string<std::allocator<char>>(&__k, "MECHANICUS", &__a);
  v1 = std::unordered_map<std::string,std::function<int ()(GmContext &,std::vector<std::string> const&,std::string&)>>::operator[](
         &GmUtils::op_func_map[abi:cxx11],
         &__k);
  std::function<int ()(GmContext &,std::vector<std::string> const&,std::string&)>::operator=<int (&)(GmContext &,std::vector<std::string> const&,std::string&)>(
    v1,
    (int (*)(GmContext *, const std::vector<std::string> *, std::string *))procMechanicus);
  std::string::~string(&__k);
  std::allocator<char>::~allocator(&__a);
};

// Line 12749: range 0000000017C2847A-0000000017C2A63D
int32_t __cdecl procMechanicus(GmContext *context, const std::vector<std::string> *param_vec, std::string *ret_msg)
{
  unsigned __int64 v3; // r14
  __int64 v4; // rax
  _DWORD *v5; // r12
  const std::string *v6; // rax
  int32_t v7; // r13d
  const std::string *v8; // rax
  PlayerGmComp *GmComp; // rax
  const std::string *v10; // rax
  PlayerGmComp *v11; // rax
  const std::string *v12; // rax
  PlayerMechanicusComp *MechanicusComp; // rax
  const std::string *v14; // rax
  PlayerMechanicusComp *v15; // rax
  const std::string *v16; // rax
  PlayerMechanicusComp *v17; // rax
  const std::string *v18; // rax
  PlayerMechanicusComp *v19; // rax
  const std::string *v20; // rax
  PlayerMechanicusComp *v21; // rax
  const std::string *v22; // rax
  PlayerMechanicusComp *v23; // rax
  const std::string *v24; // rax
  PlayerMechanicusComp *v25; // rax
  const std::string *v26; // rax
  PlayerMechanicusComp *v27; // rax
  const std::string *v28; // rax
  common::milog::MiLogStream *v29; // r13
  const std::string *v30; // rax
  PlayerMechanicusComp *v31; // rax
  const std::string *v32; // rax
  PlayerMatchComp *MatchComp; // rax
  common::milog::MiLogStream *v34; // rax
  const std::string *v35; // rax
  Scene *v36; // rax
  std::__shared_ptr_access<MechanicusMultistagePlay,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v37; // rax
  unsigned __int64 v38; // rdx
  const std::string *v39; // rax
  Scene *v40; // rax
  MechanicusMultistagePlay *p_player; // rdi
  uint32_t v42; // edx
  const std::string *v43; // rax
  Scene *v44; // rax
  MechanicusMultistagePlay *v45; // rdi
  uint32_t v46; // edx
  const std::string *v47; // rax
  const std::string *v48; // rax
  const std::string *v49; // rax
  Scene *v50; // rax
  std::__shared_ptr_access<MechanicusMultistagePlay,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v51; // rax
  const std::string *v52; // rax
  Scene *v53; // rax
  const std::string *v54; // rax
  MechanicusMultistagePlay *v55; // rdi
  uint32_t v56; // ecx
  uint32_t v57; // edx
  const std::string *v58; // rax
  const std::string *v59; // rax
  const std::string *v60; // rax
  const std::string *v61; // rax
  common::milog::MiLogStream *v62; // rcx
  common::minet::Packet *v63; // r13
  uint32_t Uid; // eax
  GameserverService *v65; // r13
  common::minet::PacketPtr v66; // rdi
  const std::string *v67; // rax
  const std::string *v68; // rax
  const std::string *v69; // rax
  const std::string *v70; // rax
  common::milog::MiLogStream *v71; // rcx
  common::minet::Packet *v72; // r13
  uint32_t v73; // eax
  GameserverService *v74; // r13
  common::minet::PacketPtr v75; // rdi
  const std::string *v76; // rax
  PlayerGmComp *v77; // rax
  int32_t result; // eax
  bool value; // [rsp+22h] [rbp-2BEh] BYREF
  bool is_succ; // [rsp+23h] [rbp-2BDh]
  uint32_t card_id; // [rsp+24h] [rbp-2BCh]
  SceneMultistagePlayComp *multistage_comp_3; // [rsp+28h] [rbp-2B8h]
  SceneMultistagePlayComp *multistage_comp_2; // [rsp+30h] [rbp-2B0h]
  SceneMultistagePlayComp *multistage_comp_1; // [rsp+38h] [rbp-2A8h]
  SceneMultistagePlayComp *multistage_comp_0; // [rsp+40h] [rbp-2A0h]
  SceneMultistagePlayComp *multistage_comp; // [rsp+48h] [rbp-298h]
  common::milog::MiLogStream v89; // [rsp+50h] [rbp-290h] BYREF
  char v90[624]; // [rsp+70h] [rbp-270h] BYREF

  v3 = (unsigned __int64)v90;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_4(576LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "11 48 4 11 param:12755 64 4 14 group_id:13009 80 4 16 play_index:13016 96 4 13 card_id:13023 112"
                        " 16 16 packet_ptr:13035 144 16 24 mechanicus_handler:12809 176 24 9 req:12806 240 32 9 req:13030"
                        " 304 40 9 rsp:12807 384 56 9 rsp:12825 480 64 9 req:12824";
  *(_QWORD *)(v3 + 16) = procMechanicus;
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = -234556943;
  v5[536862722] = -234556924;
  v5[536862723] = 61956;
  v5[536862724] = 62194;
  v5[536862725] = 62194;
  v5[536862726] = -218959360;
  v5[536862727] = 62194;
  v5[536862728] = -219021312;
  v5[536862729] = 62194;
  v5[536862730] = -234881024;
  v5[536862731] = -218959118;
  v5[536862733] = -234881024;
  v5[536862734] = -218959118;
  v5[536862737] = -202116109;
  if ( std::vector<std::string>::size(param_vec) <= 1 )
    goto LABEL_139;
  *(_DWORD *)(v3 + 48) = 0;
  v6 = std::vector<std::string>::operator[](param_vec, 1uLL);
  if ( common::tools::StringUtils::strToNum<unsigned int>(v6, (unsigned int *)(v3 + 48), 1) )
  {
    std::string::operator=(ret_msg, "param strToNum invalid");
    v7 = -1;
    goto LABEL_156;
  }
  v8 = std::vector<std::string>::operator[](param_vec, 0LL);
  if ( std::operator==<char>(v8, "PRESS_BATTLE") )
  {
    if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
      __asan_report_load8();
    GmComp = Player::getGmComp(context->player);
    value = *(_DWORD *)(v3 + 48) != 0;
    PlayerGmComp::setGmSetValue<bool>(GmComp, 8u, &value);
    v7 = 0;
    goto LABEL_156;
  }
  v10 = std::vector<std::string>::operator[](param_vec, 0LL);
  if ( std::operator==<char>(v10, "DISABLE_LIMITS") )
  {
    if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
      __asan_report_load8();
    v11 = Player::getGmComp(context->player);
    value = *(_DWORD *)(v3 + 48) != 0;
    PlayerGmComp::setGmSetValue<bool>(v11, 7u, &value);
    v7 = 0;
    goto LABEL_156;
  }
  v12 = std::vector<std::string>::operator[](param_vec, 0LL);
  if ( std::operator==<char>(v12, "ONE_KEY_OPEN") )
  {
    if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
      __asan_report_load8();
    MechanicusComp = Player::getMechanicusComp(context->player);
    v7 = PlayerMechanicusComp::oneKeyOpenByGm(MechanicusComp, *(_DWORD *)(v3 + 48));
    goto LABEL_156;
  }
  v14 = std::vector<std::string>::operator[](param_vec, 0LL);
  if ( std::operator==<char>(v14, "OPEN") )
  {
    if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
      __asan_report_load8();
    v15 = Player::getMechanicusComp(context->player);
    v7 = PlayerMechanicusComp::openMechanicusByGm(v15, *(_DWORD *)(v3 + 48));
    goto LABEL_156;
  }
  v16 = std::vector<std::string>::operator[](param_vec, 0LL);
  if ( std::operator==<char>(v16, "CLOSE") )
  {
    if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
      __asan_report_load8();
    v17 = Player::getMechanicusComp(context->player);
    v7 = PlayerMechanicusComp::closeMechanicusByGm(v17, *(_DWORD *)(v3 + 48));
    goto LABEL_156;
  }
  v18 = std::vector<std::string>::operator[](param_vec, 0LL);
  if ( std::operator==<char>(v18, "SEQUENCE") )
  {
    if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
      __asan_report_load8();
    v19 = Player::getMechanicusComp(context->player);
    v7 = PlayerMechanicusComp::openSequenceIdByGm(v19, *(_DWORD *)(v3 + 48));
    goto LABEL_156;
  }
  v20 = std::vector<std::string>::operator[](param_vec, 0LL);
  if ( std::operator==<char>(v20, "COIN") )
  {
    if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
      __asan_report_load8();
    v21 = Player::getMechanicusComp(context->player);
    v7 = PlayerMechanicusComp::addCoinByGm(v21, *(_DWORD *)(v3 + 48));
    goto LABEL_156;
  }
  v22 = std::vector<std::string>::operator[](param_vec, 0LL);
  if ( std::operator==<char>(v22, "UNLOCK") )
  {
    if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
      __asan_report_load8();
    v23 = Player::getMechanicusComp(context->player);
    v7 = PlayerMechanicusComp::unlockGearByGm(v23, *(_DWORD *)(v3 + 48));
    goto LABEL_156;
  }
  v24 = std::vector<std::string>::operator[](param_vec, 0LL);
  if ( std::operator==<char>(v24, "LEVELUP") )
  {
    if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
      __asan_report_load8();
    v25 = Player::getMechanicusComp(context->player);
    v7 = PlayerMechanicusComp::levelupGearByGm(v25, *(_DWORD *)(v3 + 48));
    goto LABEL_156;
  }
  v26 = std::vector<std::string>::operator[](param_vec, 0LL);
  if ( std::operator==<char>(v26, "PUNISH") )
  {
    if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
      __asan_report_load8();
    v27 = Player::getMechanicusComp(context->player);
    v7 = PlayerMechanicusComp::clearPunishByGm(v27);
    goto LABEL_156;
  }
  v28 = std::vector<std::string>::operator[](param_vec, 0LL);
  if ( std::operator==<char>(v28, "DUNGEON") )
  {
    proto::EnterMechanicusDungeonReq::EnterMechanicusDungeonReq((proto::EnterMechanicusDungeonReq *const)(v3 + 176));
    proto::EnterMechanicusDungeonRsp::EnterMechanicusDungeonRsp((proto::EnterMechanicusDungeonRsp *const)(v3 + 304));
    proto::EnterMechanicusDungeonReq::set_difficult_level(
      (proto::EnterMechanicusDungeonReq *const)(v3 + 176),
      *(_DWORD *)(v3 + 48));
    if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
      __asan_report_load8();
    ZN17MechanicusHandlerCI217PlayerHandlerBaseER6Player((MechanicusHandler *const)(v3 + 144), context->player);
    if ( MechanicusHandler::onEnterMechanicusDungeonReq(
           (MechanicusHandler *const)(v3 + 144),
           (const proto::EnterMechanicusDungeonReq *)(v3 + 176),
           (proto::EnterMechanicusDungeonRsp *)(v3 + 304)) )
    {
      common::milog::MiLogStream::create(
        &v89,
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/player/gm/player_gm_comp.cpp",
        "procMechanicus",
        12812);
      common::milog::MiLogStream::operator<<<char [34],(char *[34])0>(
        &v89,
        (const char (*)[34])"onEnterMechanicusDungeonReq fails");
      common::milog::MiLogStream::~MiLogStream(&v89);
      v7 = -1;
    }
    else
    {
      common::milog::MiLogStream::create(
        (common::milog::MiLogStream *)(v3 + 240),
        &common::milog::MiLogDefault::default_log_obj_,
        1u,
        "./src/player/gm/player_gm_comp.cpp",
        "procMechanicus",
        12815);
      v29 = common::milog::MiLogStream::operator<<<char [8],(char *[8])0>(
              (common::milog::MiLogStream *const)(v3 + 240),
              (const char (*)[8])"result:");
      google::protobuf::Message::ShortDebugString[abi:cxx11](
        (std::string *)&v89,
        (google::protobuf::Message *)(v3 + 304));
      common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v29, (const std::string *)&v89);
      std::string::~string(&v89);
      common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v3 + 240));
      v7 = 0;
    }
    MechanicusHandler::~MechanicusHandler((MechanicusHandler *const)(v3 + 144));
    proto::EnterMechanicusDungeonRsp::~EnterMechanicusDungeonRsp((proto::EnterMechanicusDungeonRsp *const)(v3 + 304));
    proto::EnterMechanicusDungeonReq::~EnterMechanicusDungeonReq((proto::EnterMechanicusDungeonReq *const)(v3 + 176));
    goto LABEL_156;
  }
  v30 = std::vector<std::string>::operator[](param_vec, 0LL);
  if ( std::operator==<char>(v30, "FINISH") )
  {
    if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
      __asan_report_load8();
    v31 = Player::getMechanicusComp(context->player);
    v7 = PlayerMechanicusComp::finishDifficutLevelByGm(v31, *(_DWORD *)(v3 + 48));
    goto LABEL_156;
  }
  v32 = std::vector<std::string>::operator[](param_vec, 0LL);
  if ( std::operator==<char>(v32, "MATCH") )
  {
    proto::PlayerStartMatchReq::PlayerStartMatchReq((proto::PlayerStartMatchReq *const)(v3 + 480));
    proto::PlayerStartMatchRsp::PlayerStartMatchRsp((proto::PlayerStartMatchRsp *const)(v3 + 384));
    proto::PlayerStartMatchReq::set_match_type((proto::PlayerStartMatchReq *const)(v3 + 480), MATCH_TYPE_MECHANICUS);
    proto::PlayerStartMatchReq::set_mechanicus_difficult_level(
      (proto::PlayerStartMatchReq *const)(v3 + 480),
      *(_DWORD *)(v3 + 48));
    if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
      __asan_report_load8();
    MatchComp = Player::getMatchComp(context->player);
    *(_DWORD *)(v3 + 96) = PlayerMatchComp::onPlayerStartMatchReq(
                             MatchComp,
                             (const proto::PlayerStartMatchReq *)(v3 + 480));
    common::milog::MiLogStream::create(
      &v89,
      &common::milog::MiLogDefault::default_log_obj_,
      1u,
      "./src/player/gm/player_gm_comp.cpp",
      "procMechanicus",
      12829);
    v34 = common::milog::MiLogStream::operator<<<char [9],(char *[9])0>(&v89, (const char (*)[9])"GM ret: ");
    common::milog::MiLogStream::operator<<<int,(int *)0>(v34, (const int *)(v3 + 96));
    common::milog::MiLogStream::~MiLogStream(&v89);
    v7 = *(_DWORD *)(v3 + 96);
    proto::PlayerStartMatchRsp::~PlayerStartMatchRsp((proto::PlayerStartMatchRsp *const)(v3 + 384));
    proto::PlayerStartMatchReq::~PlayerStartMatchReq((proto::PlayerStartMatchReq *const)(v3 + 480));
    goto LABEL_156;
  }
  v35 = std::vector<std::string>::operator[](param_vec, 0LL);
  if ( std::operator==<char>(v35, "SETTLE") )
  {
    is_succ = *(_DWORD *)(v3 + 48) != 0;
    if ( *(_BYTE *)(((unsigned __int64)&context->scene >> 3) + 0x7FFF8000) )
      __asan_report_load8();
    std::enable_shared_from_this<Scene>::shared_from_this((std::enable_shared_from_this<Scene> *const)(v3 + 144));
    std::dynamic_pointer_cast<DungeonScene,Scene>((const std::shared_ptr<Scene> *)(v3 + 112));
    std::shared_ptr<Scene>::~shared_ptr((std::shared_ptr<Scene> *const)(v3 + 144));
    if ( !std::operator==<DungeonScene>(0LL, (const std::shared_ptr<DungeonScene> *)(v3 + 112)) )
    {
      v36 = (Scene *)std::__shared_ptr_access<DungeonScene,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<DungeonScene,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 112));
      multistage_comp = Scene::getMultistagePlayComp(v36);
      SceneMultistagePlayComp::findAnyPlayByGm<MechanicusMultistagePlay>((SceneMultistagePlayComp *const)(v3 + 144));
      if ( std::operator==<MechanicusMultistagePlay>(0LL, (const std::shared_ptr<MechanicusMultistagePlay> *)(v3 + 144)) )
      {
        common::milog::MiLogStream::create(
          &v89,
          &common::milog::MiLogDefault::default_log_obj_,
          3u,
          "./src/player/gm/player_gm_comp.cpp",
          "procMechanicus",
          12845);
        common::milog::MiLogStream::operator<<<char [47],(char *[47])0>(
          &v89,
          (const char (*)[47])"findAnyPlayByGm MechanicusMultistagePlay fails");
        common::milog::MiLogStream::~MiLogStream(&v89);
        v7 = -1;
      }
      else
      {
        v37 = std::__shared_ptr_access<MechanicusMultistagePlay,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<MechanicusMultistagePlay,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 144));
        if ( *(_BYTE *)(((unsigned __int64)v37 >> 3) + 0x7FFF8000) )
          __asan_report_load8();
        v38 = (unsigned __int64)(v37->_vptr_DescribalBase + 12);
        if ( *(_BYTE *)((v38 >> 3) + 0x7FFF8000) )
          __asan_report_load8();
        (*(void (__fastcall **)(std::__shared_ptr_access<MechanicusMultistagePlay,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *, bool))v38)(
          v37,
          is_succ);
        v7 = 0;
      }
      goto LABEL_119;
    }
    goto LABEL_110;
  }
  v39 = std::vector<std::string>::operator[](param_vec, 0LL);
  if ( std::operator==<char>(v39, "ADD_POINTS") )
  {
    if ( *(_BYTE *)(((unsigned __int64)&context->scene >> 3) + 0x7FFF8000) )
      __asan_report_load8();
    toPtr<DungeonScene,Scene>((Scene *)(v3 + 112));
    if ( !std::operator==<DungeonScene>(0LL, (const std::shared_ptr<DungeonScene> *)(v3 + 112)) )
    {
      v40 = (Scene *)std::__shared_ptr_access<DungeonScene,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<DungeonScene,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 112));
      multistage_comp_0 = Scene::getMultistagePlayComp(v40);
      SceneMultistagePlayComp::findAnyPlayByGm<MechanicusMultistagePlay>((SceneMultistagePlayComp *const)(v3 + 144));
      if ( std::operator==<MechanicusMultistagePlay>(0LL, (const std::shared_ptr<MechanicusMultistagePlay> *)(v3 + 144)) )
      {
        common::milog::MiLogStream::create(
          &v89,
          &common::milog::MiLogDefault::default_log_obj_,
          3u,
          "./src/player/gm/player_gm_comp.cpp",
          "procMechanicus",
          12863);
        common::milog::MiLogStream::operator<<<char [47],(char *[47])0>(
          &v89,
          (const char (*)[47])"findAnyPlayByGm MechanicusMultistagePlay fails");
        common::milog::MiLogStream::~MiLogStream(&v89);
        v7 = -1;
      }
      else
      {
        p_player = std::__shared_ptr_access<MechanicusMultistagePlay,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<MechanicusMultistagePlay,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 144));
        v42 = *(_DWORD *)(v3 + 48);
        if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
        {
          p_player = (MechanicusMultistagePlay *)&context->player;
          __asan_report_load8();
        }
        MechanicusMultistagePlay::addPointsByGm(p_player, context->player, v42);
        v7 = 0;
      }
      goto LABEL_119;
    }
    goto LABEL_110;
  }
  v43 = std::vector<std::string>::operator[](param_vec, 0LL);
  if ( std::operator==<char>(v43, "SUB_POINTS") )
  {
    if ( *(_BYTE *)(((unsigned __int64)&context->scene >> 3) + 0x7FFF8000) )
      __asan_report_load8();
    toPtr<DungeonScene,Scene>((Scene *)(v3 + 112));
    if ( !std::operator==<DungeonScene>(0LL, (const std::shared_ptr<DungeonScene> *)(v3 + 112)) )
    {
      v44 = (Scene *)std::__shared_ptr_access<DungeonScene,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<DungeonScene,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 112));
      multistage_comp_1 = Scene::getMultistagePlayComp(v44);
      SceneMultistagePlayComp::findAnyPlayByGm<MechanicusMultistagePlay>((SceneMultistagePlayComp *const)(v3 + 144));
      if ( std::operator==<MechanicusMultistagePlay>(0LL, (const std::shared_ptr<MechanicusMultistagePlay> *)(v3 + 144)) )
      {
        common::milog::MiLogStream::create(
          &v89,
          &common::milog::MiLogDefault::default_log_obj_,
          3u,
          "./src/player/gm/player_gm_comp.cpp",
          "procMechanicus",
          12882);
        common::milog::MiLogStream::operator<<<char [47],(char *[47])0>(
          &v89,
          (const char (*)[47])"findAnyPlayByGm MechanicusMultistagePlay fails");
        common::milog::MiLogStream::~MiLogStream(&v89);
        v7 = -1;
      }
      else
      {
        v45 = std::__shared_ptr_access<MechanicusMultistagePlay,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<MechanicusMultistagePlay,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 144));
        v46 = *(_DWORD *)(v3 + 48);
        if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
        {
          v45 = (MechanicusMultistagePlay *)&context->player;
          __asan_report_load8();
        }
        MechanicusMultistagePlay::subPointsByGm(v45, context->player, v46);
        v7 = 0;
      }
      goto LABEL_119;
    }
    goto LABEL_110;
  }
  v47 = std::vector<std::string>::operator[](param_vec, 0LL);
  if ( std::operator==<char>("SET_CHALLENGE_STATE", v47) )
  {
    card_id = *(_DWORD *)(v3 + 48);
    if ( std::vector<std::string>::size(param_vec) > 2 )
    {
      *(_DWORD *)(v3 + 80) = 0;
      v48 = std::vector<std::string>::operator[](param_vec, 1uLL);
      if ( common::tools::StringUtils::strToNum<unsigned int>(v48, (unsigned int *)(v3 + 80), 1) )
      {
        std::string::operator=(ret_msg, "param effect_id invalid");
        v7 = -1;
        goto LABEL_156;
      }
      *(_DWORD *)(v3 + 96) = 0;
      v49 = std::vector<std::string>::operator[](param_vec, 2uLL);
      if ( common::tools::StringUtils::strToNum<unsigned int>(v49, (unsigned int *)(v3 + 96), 1) )
      {
        std::string::operator=(ret_msg, "param state invalid");
        v7 = -1;
        goto LABEL_156;
      }
      if ( *(_BYTE *)(((unsigned __int64)&context->scene >> 3) + 0x7FFF8000) )
        __asan_report_load8();
      std::enable_shared_from_this<Scene>::shared_from_this((std::enable_shared_from_this<Scene> *const)(v3 + 144));
      std::dynamic_pointer_cast<DungeonScene,Scene>((const std::shared_ptr<Scene> *)(v3 + 112));
      std::shared_ptr<Scene>::~shared_ptr((std::shared_ptr<Scene> *const)(v3 + 144));
      if ( !std::operator==<DungeonScene>(0LL, (const std::shared_ptr<DungeonScene> *)(v3 + 112)) )
      {
        v50 = (Scene *)std::__shared_ptr_access<DungeonScene,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<DungeonScene,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 112));
        multistage_comp_2 = Scene::getMultistagePlayComp(v50);
        SceneMultistagePlayComp::findAnyPlayByGm<MechanicusMultistagePlay>((SceneMultistagePlayComp *const)(v3 + 144));
        if ( std::operator==<MechanicusMultistagePlay>(
               0LL,
               (const std::shared_ptr<MechanicusMultistagePlay> *)(v3 + 144)) )
        {
          common::milog::MiLogStream::create(
            &v89,
            &common::milog::MiLogDefault::default_log_obj_,
            3u,
            "./src/player/gm/player_gm_comp.cpp",
            "procMechanicus",
            12922);
          common::milog::MiLogStream::operator<<<char [47],(char *[47])0>(
            &v89,
            (const char (*)[47])"findAnyPlayByGm MechanicusMultistagePlay fails");
          common::milog::MiLogStream::~MiLogStream(&v89);
          v7 = -1;
        }
        else
        {
          v51 = std::__shared_ptr_access<MechanicusMultistagePlay,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<MechanicusMultistagePlay,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 144));
          v7 = MechanicusMultistagePlay::setChallengeState(
                 v51,
                 card_id,
                 *(_DWORD *)(v3 + 80),
                 *(proto::InBattleMechanicusCardChallengeState *)(v3 + 96));
        }
LABEL_119:
        std::shared_ptr<MechanicusMultistagePlay>::~shared_ptr((std::shared_ptr<MechanicusMultistagePlay> *const)(v3 + 144));
        goto LABEL_120;
      }
LABEL_110:
      std::string::operator=(ret_msg, "player not in dungeon scene");
      v7 = -1;
LABEL_120:
      std::shared_ptr<DungeonScene>::~shared_ptr((std::shared_ptr<DungeonScene> *const)(v3 + 112));
      goto LABEL_156;
    }
LABEL_139:
    std::string::operator=(ret_msg, "param not enough");
    v7 = -1;
    goto LABEL_156;
  }
  v52 = std::vector<std::string>::operator[](param_vec, 0LL);
  if ( std::operator==<char>("FORCE_PICK_CARD", v52) )
  {
    if ( *(_BYTE *)(((unsigned __int64)&context->scene >> 3) + 0x7FFF8000) )
      __asan_report_load8();
    std::enable_shared_from_this<Scene>::shared_from_this((std::enable_shared_from_this<Scene> *const)(v3 + 144));
    std::dynamic_pointer_cast<DungeonScene,Scene>((const std::shared_ptr<Scene> *)(v3 + 112));
    std::shared_ptr<Scene>::~shared_ptr((std::shared_ptr<Scene> *const)(v3 + 144));
    if ( !std::operator==<DungeonScene>(0LL, (const std::shared_ptr<DungeonScene> *)(v3 + 112)) )
    {
      v53 = (Scene *)std::__shared_ptr_access<DungeonScene,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<DungeonScene,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 112));
      multistage_comp_3 = Scene::getMultistagePlayComp(v53);
      SceneMultistagePlayComp::findAnyPlayByGm<MechanicusMultistagePlay>((SceneMultistagePlayComp *const)(v3 + 144));
      if ( std::operator==<MechanicusMultistagePlay>(0LL, (const std::shared_ptr<MechanicusMultistagePlay> *)(v3 + 144)) )
      {
        common::milog::MiLogStream::create(
          &v89,
          &common::milog::MiLogDefault::default_log_obj_,
          3u,
          "./src/player/gm/player_gm_comp.cpp",
          "procMechanicus",
          12939);
        common::milog::MiLogStream::operator<<<char [47],(char *[47])0>(
          &v89,
          (const char (*)[47])"findAnyPlayByGm MechanicusMultistagePlay fails");
        common::milog::MiLogStream::~MiLogStream(&v89);
        v7 = -1;
      }
      else
      {
        *(_DWORD *)(v3 + 96) = 0;
        if ( std::vector<std::string>::size(param_vec) > 2
          && (v54 = std::vector<std::string>::operator[](param_vec, 2uLL),
              common::tools::StringUtils::strToNum<unsigned int>(v54, (unsigned int *)(v3 + 96), 1)) )
        {
          std::string::operator=(ret_msg, "param curse_id invalid");
          v7 = -1;
        }
        else
        {
          v55 = std::__shared_ptr_access<MechanicusMultistagePlay,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<MechanicusMultistagePlay,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 144));
          v56 = *(_DWORD *)(v3 + 96);
          v57 = *(_DWORD *)(v3 + 48);
          if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
          {
            v55 = (MechanicusMultistagePlay *)&context->player;
            __asan_report_load8();
          }
          MechanicusMultistagePlay::forceTakeCardEffectByGm(v55, context->player, v57, v56);
          v7 = 0;
        }
      }
      goto LABEL_119;
    }
    goto LABEL_110;
  }
  v58 = std::vector<std::string>::operator[](param_vec, 0LL);
  if ( std::operator==<char>("PICK_CARD", v58) )
  {
    if ( std::vector<std::string>::size(param_vec) <= 3 )
      goto LABEL_139;
    *(_DWORD *)(v3 + 64) = 0;
    v59 = std::vector<std::string>::operator[](param_vec, 1uLL);
    if ( common::tools::StringUtils::strToNum<unsigned int>(v59, (unsigned int *)(v3 + 64), 1) )
    {
LABEL_124:
      std::string::operator=(ret_msg, "param group_id invalid");
      v7 = -1;
      goto LABEL_156;
    }
    *(_DWORD *)(v3 + 80) = 0;
    v60 = std::vector<std::string>::operator[](param_vec, 2uLL);
    if ( common::tools::StringUtils::strToNum<unsigned int>(v60, (unsigned int *)(v3 + 80), 1) )
    {
LABEL_126:
      std::string::operator=(ret_msg, "param play_index invalid");
      v7 = -1;
      goto LABEL_156;
    }
    *(_DWORD *)(v3 + 96) = 0;
    v61 = std::vector<std::string>::operator[](param_vec, 3uLL);
    if ( common::tools::StringUtils::strToNum<unsigned int>(v61, (unsigned int *)(v3 + 96), 1) )
    {
LABEL_128:
      std::string::operator=(ret_msg, "param card_id invalid");
      v7 = -1;
      goto LABEL_156;
    }
    proto::InBattleMechanicusPickCardReq::InBattleMechanicusPickCardReq((proto::InBattleMechanicusPickCardReq *const)(v3 + 240));
    proto::InBattleMechanicusPickCardReq::set_play_index(
      (proto::InBattleMechanicusPickCardReq *const)(v3 + 240),
      *(_DWORD *)(v3 + 80));
    proto::InBattleMechanicusPickCardReq::set_group_id(
      (proto::InBattleMechanicusPickCardReq *const)(v3 + 240),
      *(_DWORD *)(v3 + 64));
    proto::InBattleMechanicusPickCardReq::set_card_id(
      (proto::InBattleMechanicusPickCardReq *const)(v3 + 240),
      *(_DWORD *)(v3 + 96));
    common::minet::PacketUtils::createPacket<proto::InBattleMechanicusPickCardReq>((const proto::InBattleMechanicusPickCardReq *)(v3 + 112));
    if ( std::operator==<common::minet::Packet>((const std::shared_ptr<common::minet::Packet> *)(v3 + 112), 0LL) )
    {
      common::milog::MiLogStream::create(
        &v89,
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/player/gm/player_gm_comp.cpp",
        "procMechanicus",
        12992);
      v62 = common::milog::MiLogStream::operator<<<char [26],(char *[26])0>(
              &v89,
              (const char (*)[26])"createPacket failed, uid:");
      if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
        __asan_report_load8();
      operator<<(v62, context->player);
      common::milog::MiLogStream::~MiLogStream(&v89);
      v7 = -1;
    }
    else
    {
      v63 = std::__shared_ptr_access<common::minet::Packet,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<common::minet::Packet,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 112));
      if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
        __asan_report_load8();
      Uid = Player::getUid(context->player);
      common::minet::Packet::setUserId(v63, Uid);
      v65 = ServiceBox::findService<GameserverService>();
      std::shared_ptr<common::minet::Packet>::shared_ptr(
        (std::shared_ptr<common::minet::Packet> *const)(v3 + 144),
        (const std::shared_ptr<common::minet::Packet> *)(v3 + 112));
      GameserverService::setPacketGameThreadIndex(v65, (common::minet::PacketPtr *)(v3 + 144));
      std::shared_ptr<common::minet::Packet>::~shared_ptr((std::shared_ptr<common::minet::Packet> *const)(v3 + 144));
      v66._M_refcount._M_pi = (std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)2> *)(v3 + 112);
      std::shared_ptr<common::minet::Packet>::shared_ptr(
        (std::shared_ptr<common::minet::Packet> *const)(v3 + 144),
        (const std::shared_ptr<common::minet::Packet> *)(v3 + 112));
      v66._M_ptr = (std::__shared_ptr<common::minet::Packet,(__gnu_cxx::_Lock_policy)2>::element_type *)(v3 + 144);
      ServiceBox::pushPacketToService(v66);
      std::shared_ptr<common::minet::Packet>::~shared_ptr((std::shared_ptr<common::minet::Packet> *const)(v3 + 144));
      v7 = 0;
    }
    std::shared_ptr<common::minet::Packet>::~shared_ptr((std::shared_ptr<common::minet::Packet> *const)(v3 + 112));
    proto::InBattleMechanicusPickCardReq::~InBattleMechanicusPickCardReq((proto::InBattleMechanicusPickCardReq *const)(v3 + 240));
  }
  else
  {
    v67 = std::vector<std::string>::operator[](param_vec, 0LL);
    if ( std::operator==<char>("CONFIRM_CARD", v67) )
    {
      if ( std::vector<std::string>::size(param_vec) <= 3 )
        goto LABEL_139;
      *(_DWORD *)(v3 + 64) = 0;
      v68 = std::vector<std::string>::operator[](param_vec, 1uLL);
      if ( common::tools::StringUtils::strToNum<unsigned int>(v68, (unsigned int *)(v3 + 64), 1) )
        goto LABEL_124;
      *(_DWORD *)(v3 + 80) = 0;
      v69 = std::vector<std::string>::operator[](param_vec, 2uLL);
      if ( common::tools::StringUtils::strToNum<unsigned int>(v69, (unsigned int *)(v3 + 80), 1) )
        goto LABEL_126;
      *(_DWORD *)(v3 + 96) = 0;
      v70 = std::vector<std::string>::operator[](param_vec, 3uLL);
      if ( common::tools::StringUtils::strToNum<unsigned int>(v70, (unsigned int *)(v3 + 96), 1) )
        goto LABEL_128;
      proto::InBattleMechanicusConfirmCardReq::InBattleMechanicusConfirmCardReq((proto::InBattleMechanicusConfirmCardReq *const)(v3 + 240));
      proto::InBattleMechanicusConfirmCardReq::set_play_index(
        (proto::InBattleMechanicusConfirmCardReq *const)(v3 + 240),
        *(_DWORD *)(v3 + 80));
      proto::InBattleMechanicusConfirmCardReq::set_group_id(
        (proto::InBattleMechanicusConfirmCardReq *const)(v3 + 240),
        *(_DWORD *)(v3 + 64));
      proto::InBattleMechanicusConfirmCardReq::set_card_id(
        (proto::InBattleMechanicusConfirmCardReq *const)(v3 + 240),
        *(_DWORD *)(v3 + 96));
      common::minet::PacketUtils::createPacket<proto::InBattleMechanicusConfirmCardReq>((const proto::InBattleMechanicusConfirmCardReq *)(v3 + 112));
      if ( std::operator==<common::minet::Packet>((const std::shared_ptr<common::minet::Packet> *)(v3 + 112), 0LL) )
      {
        common::milog::MiLogStream::create(
          &v89,
          &common::milog::MiLogDefault::default_log_obj_,
          3u,
          "./src/player/gm/player_gm_comp.cpp",
          "procMechanicus",
          13038);
        v71 = common::milog::MiLogStream::operator<<<char [26],(char *[26])0>(
                &v89,
                (const char (*)[26])"createPacket failed, uid:");
        if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
          __asan_report_load8();
        operator<<(v71, context->player);
        common::milog::MiLogStream::~MiLogStream(&v89);
        v7 = -1;
      }
      else
      {
        v72 = std::__shared_ptr_access<common::minet::Packet,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<common::minet::Packet,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 112));
        if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
          __asan_report_load8();
        v73 = Player::getUid(context->player);
        common::minet::Packet::setUserId(v72, v73);
        v74 = ServiceBox::findService<GameserverService>();
        std::shared_ptr<common::minet::Packet>::shared_ptr(
          (std::shared_ptr<common::minet::Packet> *const)(v3 + 144),
          (const std::shared_ptr<common::minet::Packet> *)(v3 + 112));
        GameserverService::setPacketGameThreadIndex(v74, (common::minet::PacketPtr *)(v3 + 144));
        std::shared_ptr<common::minet::Packet>::~shared_ptr((std::shared_ptr<common::minet::Packet> *const)(v3 + 144));
        v75._M_refcount._M_pi = (std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)2> *)(v3 + 112);
        std::shared_ptr<common::minet::Packet>::shared_ptr(
          (std::shared_ptr<common::minet::Packet> *const)(v3 + 144),
          (const std::shared_ptr<common::minet::Packet> *)(v3 + 112));
        v75._M_ptr = (std::__shared_ptr<common::minet::Packet,(__gnu_cxx::_Lock_policy)2>::element_type *)(v3 + 144);
        ServiceBox::pushPacketToService(v75);
        std::shared_ptr<common::minet::Packet>::~shared_ptr((std::shared_ptr<common::minet::Packet> *const)(v3 + 144));
        v7 = 0;
      }
      std::shared_ptr<common::minet::Packet>::~shared_ptr((std::shared_ptr<common::minet::Packet> *const)(v3 + 112));
      proto::InBattleMechanicusConfirmCardReq::~InBattleMechanicusConfirmCardReq((proto::InBattleMechanicusConfirmCardReq *const)(v3 + 240));
    }
    else
    {
      v76 = std::vector<std::string>::operator[](param_vec, 0LL);
      if ( std::operator==<char>("DISABLE_GEAR_LIMIT", v76) )
      {
        if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
          __asan_report_load8();
        v77 = Player::getGmComp(context->player);
        value = *(_DWORD *)(v3 + 48) != 0;
        PlayerGmComp::setGmSetValue<bool>(v77, 5u, &value);
        v7 = 0;
      }
      else
      {
        v7 = -1;
      }
    }
  }
LABEL_156:
  result = v7;
  if ( v90 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8010) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8018) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8020) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8028) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8034) = 0LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8044) = 0;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8020) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8028) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8030) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8038) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8040) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 13055: range 0000000017D7ABD0-0000000017D7AC72
void __cdecl procFoundationRegister::procFoundationRegister(procFoundationRegister *const this)
{
  std::function<int(GmContext&,const std::vector<std::string>&,std::string&)> *v1; // rax
  std::allocator<char> __a; // [rsp+1Fh] [rbp-31h] BYREF
  std::string __k; // [rsp+20h] [rbp-30h] BYREF

  std::allocator<char>::allocator(&__a);
  std::string::basic_string<std::allocator<char>>(&__k, "FOUNDATION", &__a);
  v1 = std::unordered_map<std::string,std::function<int ()(GmContext &,std::vector<std::string> const&,std::string&)>>::operator[](
         &GmUtils::op_func_map[abi:cxx11],
         &__k);
  std::function<int ()(GmContext &,std::vector<std::string> const&,std::string&)>::operator=<int (&)(GmContext &,std::vector<std::string> const&,std::string&)>(
    v1,
    (int (*)(GmContext *, const std::vector<std::string> *, std::string *))procFoundation);
  std::string::~string(&__k);
  std::allocator<char>::~allocator(&__a);
};

// Line 13056: range 0000000017C2A63E-0000000017C2AE33
int32_t __cdecl procFoundation(GmContext *context, const std::vector<std::string> *param_vec, std::string *ret_msg)
{
  unsigned __int64 v3; // r13
  __int64 v4; // rax
  _DWORD *v5; // r12
  int32_t v6; // r14d
  const std::string *v7; // rax
  const std::string *v8; // rax
  const std::string *v9; // rax
  const std::string *v10; // rax
  common::milog::MiLogStream *v11; // rax
  common::milog::MiLogStream *v12; // rax
  uint32_t v13; // eax
  common::milog::MiLogStream *v14; // rax
  common::milog::MiLogStream *v15; // rax
  std::__shared_ptr_access<Entity,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v16; // rax
  uint32_t EntityId; // eax
  common::milog::MiLogStream *v18; // rcx
  common::minet::Packet *v19; // r14
  uint32_t Uid; // eax
  GameserverService *v21; // r14
  common::minet::PacketPtr v22; // rdi
  int32_t result; // eax
  std::shared_ptr<common::minet::Packet> p_packet_ptr; // [rsp+20h] [rbp-180h] BYREF
  common::milog::MiLogStream v26; // [rsp+30h] [rbp-170h] BYREF
  char v27[336]; // [rsp+50h] [rbp-150h] BYREF

  v3 = (unsigned __int64)v27;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_3(288LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "8 48 4 8 op:13063 64 4 17 building_id:13070 80 4 14 group_id:13077 96 4 15 config_id:13084 112 1"
                        "6 15 group_ptr:13091 144 16 16 entity_ptr:13098 176 16 16 packet_ptr:13109 208 40 9 req:13105";
  *(_QWORD *)(v3 + 16) = procFoundation;
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = -234556943;
  v5[536862722] = -234556924;
  v5[536862723] = 61956;
  v5[536862724] = 62194;
  v5[536862725] = 62194;
  v5[536862726] = 62194;
  v5[536862727] = -218103808;
  v5[536862728] = -202116109;
  if ( std::vector<std::string>::size(param_vec) > 3 )
  {
    *(_DWORD *)(v3 + 48) = 0;
    v7 = std::vector<std::string>::operator[](param_vec, 0LL);
    if ( common::tools::StringUtils::strToNum<unsigned int>(v7, (unsigned int *)(v3 + 48), 1) )
    {
      std::string::operator=(ret_msg, "op strToNum invalid");
      v6 = -1;
    }
    else
    {
      *(_DWORD *)(v3 + 64) = 0;
      v8 = std::vector<std::string>::operator[](param_vec, 1uLL);
      if ( common::tools::StringUtils::strToNum<unsigned int>(v8, (unsigned int *)(v3 + 64), 1) )
      {
        std::string::operator=(ret_msg, "building_id strToNum invalid");
        v6 = -1;
      }
      else
      {
        *(_DWORD *)(v3 + 80) = 0;
        v9 = std::vector<std::string>::operator[](param_vec, 2uLL);
        if ( common::tools::StringUtils::strToNum<unsigned int>(v9, (unsigned int *)(v3 + 80), 1) )
        {
          std::string::operator=(ret_msg, "group_id strToNum invalid");
          v6 = -1;
        }
        else
        {
          *(_DWORD *)(v3 + 96) = 0;
          v10 = std::vector<std::string>::operator[](param_vec, 3uLL);
          if ( common::tools::StringUtils::strToNum<unsigned int>(v10, (unsigned int *)(v3 + 96), 1) )
          {
            std::string::operator=(ret_msg, "config_id strToNum invalid");
            v6 = -1;
          }
          else
          {
            if ( *(_BYTE *)(((unsigned __int64)&context->scene >> 3) + 0x7FFF8000) )
              __asan_report_load8();
            Scene::findGroup((Scene *const)(v3 + 112), (uint32_t)context->scene);
            if ( std::operator==<Group>((const std::shared_ptr<Group> *)(v3 + 112), 0LL) )
            {
              common::milog::MiLogStream::create(
                &v26,
                &common::milog::MiLogDefault::default_log_obj_,
                3u,
                "./src/player/gm/player_gm_comp.cpp",
                "procFoundation",
                13094);
              v11 = common::milog::MiLogStream::operator<<<char [11],(char *[11])0>(
                      &v26,
                      (const char (*)[11])"findGroup ");
              v12 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                      v11,
                      (const unsigned int *)(v3 + 80));
              common::milog::MiLogStream::operator<<<char [7],(char *[7])0>(v12, (const char (*)[7])" fails");
              common::milog::MiLogStream::~MiLogStream(&v26);
              v6 = -1;
            }
            else
            {
              v13 = (unsigned int)std::__shared_ptr_access<Group,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Group,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 112));
              Group::findEntityByConfigId((Group *const)(v3 + 144), v13);
              if ( std::operator==<Entity>((const std::shared_ptr<Entity> *)(v3 + 144), 0LL) )
              {
                common::milog::MiLogStream::create(
                  &v26,
                  &common::milog::MiLogDefault::default_log_obj_,
                  3u,
                  "./src/player/gm/player_gm_comp.cpp",
                  "procFoundation",
                  13101);
                v14 = common::milog::MiLogStream::operator<<<char [22],(char *[22])0>(
                        &v26,
                        (const char (*)[22])"findEntityByConfigId ");
                v15 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                        v14,
                        (const unsigned int *)(v3 + 96));
                common::milog::MiLogStream::operator<<<char [7],(char *[7])0>(v15, (const char (*)[7])" fails");
                common::milog::MiLogStream::~MiLogStream(&v26);
                v6 = -1;
              }
              else
              {
                proto::FoundationReq::FoundationReq((proto::FoundationReq *const)(v3 + 208));
                v16 = std::__shared_ptr_access<Entity,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Entity,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 144));
                EntityId = Entity::getEntityId(v16);
                proto::FoundationReq::set_gadget_entity_id((proto::FoundationReq *const)(v3 + 208), EntityId);
                proto::FoundationReq::set_op_type(
                  (proto::FoundationReq *const)(v3 + 208),
                  *(proto::FoundationOpType *)(v3 + 48));
                proto::FoundationReq::set_building_id((proto::FoundationReq *const)(v3 + 208), *(_DWORD *)(v3 + 64));
                common::minet::PacketUtils::createPacket<proto::FoundationReq>((const proto::FoundationReq *)(v3 + 176));
                if ( std::operator==<common::minet::Packet>(
                       (const std::shared_ptr<common::minet::Packet> *)(v3 + 176),
                       0LL) )
                {
                  common::milog::MiLogStream::create(
                    &v26,
                    &common::milog::MiLogDefault::default_log_obj_,
                    3u,
                    "./src/player/gm/player_gm_comp.cpp",
                    "procFoundation",
                    13112);
                  v18 = common::milog::MiLogStream::operator<<<char [26],(char *[26])0>(
                          &v26,
                          (const char (*)[26])"createPacket failed, uid:");
                  if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
                    __asan_report_load8();
                  operator<<(v18, context->player);
                  common::milog::MiLogStream::~MiLogStream(&v26);
                  v6 = -1;
                }
                else
                {
                  v19 = std::__shared_ptr_access<common::minet::Packet,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<common::minet::Packet,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 176));
                  if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
                    __asan_report_load8();
                  Uid = Player::getUid(context->player);
                  common::minet::Packet::setUserId(v19, Uid);
                  v21 = ServiceBox::findService<GameserverService>();
                  std::shared_ptr<common::minet::Packet>::shared_ptr(
                    &p_packet_ptr,
                    (const std::shared_ptr<common::minet::Packet> *)(v3 + 176));
                  GameserverService::setPacketGameThreadIndex(v21, &p_packet_ptr);
                  std::shared_ptr<common::minet::Packet>::~shared_ptr(&p_packet_ptr);
                  v22._M_refcount._M_pi = (std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)2> *)(v3 + 176);
                  std::shared_ptr<common::minet::Packet>::shared_ptr(
                    &p_packet_ptr,
                    (const std::shared_ptr<common::minet::Packet> *)(v3 + 176));
                  v22._M_ptr = (std::__shared_ptr<common::minet::Packet,(__gnu_cxx::_Lock_policy)2>::element_type *)&p_packet_ptr;
                  ServiceBox::pushPacketToService(v22);
                  std::shared_ptr<common::minet::Packet>::~shared_ptr(&p_packet_ptr);
                  v6 = 0;
                }
                std::shared_ptr<common::minet::Packet>::~shared_ptr((std::shared_ptr<common::minet::Packet> *const)(v3 + 176));
                proto::FoundationReq::~FoundationReq((proto::FoundationReq *const)(v3 + 208));
              }
              std::shared_ptr<Entity>::~shared_ptr((std::shared_ptr<Entity> *const)(v3 + 144));
            }
            std::shared_ptr<Group>::~shared_ptr((std::shared_ptr<Group> *const)(v3 + 112));
          }
        }
      }
    }
  }
  else
  {
    std::string::operator=(ret_msg, "param not enough");
    v6 = -1;
  }
  result = v6;
  if ( v27 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8010) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8018) = 0LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8020) = 0;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8020) = -168430091;
  }
  return result;
};

// Line 13122: range 0000000017D7AC74-0000000017D7AD16
void __cdecl procSpeedRegister::procSpeedRegister(procSpeedRegister *const this)
{
  std::function<int(GmContext&,const std::vector<std::string>&,std::string&)> *v1; // rax
  std::allocator<char> __a; // [rsp+1Fh] [rbp-31h] BYREF
  std::string __k; // [rsp+20h] [rbp-30h] BYREF

  std::allocator<char>::allocator(&__a);
  std::string::basic_string<std::allocator<char>>(&__k, "SPEED_CHECK", &__a);
  v1 = std::unordered_map<std::string,std::function<int ()(GmContext &,std::vector<std::string> const&,std::string&)>>::operator[](
         &GmUtils::op_func_map[abi:cxx11],
         &__k);
  std::function<int ()(GmContext &,std::vector<std::string> const&,std::string&)>::operator=<int (&)(GmContext &,std::vector<std::string> const&,std::string&)>(
    v1,
    (int (*)(GmContext *, const std::vector<std::string> *, std::string *))procSpeed);
  std::string::~string(&__k);
  std::allocator<char>::~allocator(&__a);
};

// Line 13123: range 0000000017C2AE34-0000000017C2AFF7
int32_t __cdecl procSpeed(GmContext *context, const std::vector<std::string> *param_vec, std::string *ret_msg)
{
  unsigned __int64 v3; // rbx
  __int64 v4; // rax
  unsigned __int64 v5; // r12
  const std::string *v6; // rax
  const std::string *v7; // rax
  const std::string *v8; // rax
  bool v9; // al
  PlayerGmComp *GmComp; // rax
  const char *v11; // rax
  int32_t result; // eax
  char v14[96]; // [rsp+20h] [rbp-60h] BYREF

  v3 = (unsigned __int64)v14;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_0(64LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "1 32 1 14 is_close:13124";
  *(_QWORD *)(v3 + 16) = procSpeed;
  v5 = v3 >> 3;
  *(_DWORD *)(v5 + 2147450880) = -235802127;
  *(_DWORD *)(v5 + 2147450884) = -202116351;
  v9 = 0;
  if ( !std::vector<std::string>::empty(param_vec) )
  {
    v6 = std::vector<std::string>::operator[](param_vec, 0LL);
    if ( common::tools::StringUtils::isStartsWith(v6, "CLOSE")
      || (v7 = std::vector<std::string>::operator[](param_vec, 0LL),
          common::tools::StringUtils::isStartsWith(v7, "DISABLE"))
      || (v8 = std::vector<std::string>::operator[](param_vec, 0LL), std::operator==<char>(v8, "0")) )
    {
      v9 = 1;
    }
  }
  *(_BYTE *)(v3 + 32) = v9;
  if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
    __asan_report_load8();
  GmComp = Player::getGmComp(context->player);
  PlayerGmComp::setGmSetValue<bool>(GmComp, 6u, (const bool *)(v3 + 32));
  if ( *(_BYTE *)(v3 + 32) )
    v11 = "speed check disabled";
  else
    v11 = "speed check enabled";
  std::string::operator=(ret_msg, v11);
  result = 0;
  if ( v14 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 13130: range 0000000017D7AD18-0000000017D7ADBA
void __cdecl procExpeditionActivityRegister::procExpeditionActivityRegister(procExpeditionActivityRegister *const this)
{
  std::function<int(GmContext&,const std::vector<std::string>&,std::string&)> *v1; // rax
  std::allocator<char> __a; // [rsp+1Fh] [rbp-31h] BYREF
  std::string __k; // [rsp+20h] [rbp-30h] BYREF

  std::allocator<char>::allocator(&__a);
  std::string::basic_string<std::allocator<char>>(&__k, "EXPEDITION_ACTIVITY", &__a);
  v1 = std::unordered_map<std::string,std::function<int ()(GmContext &,std::vector<std::string> const&,std::string&)>>::operator[](
         &GmUtils::op_func_map[abi:cxx11],
         &__k);
  std::function<int ()(GmContext &,std::vector<std::string> const&,std::string&)>::operator=<int (&)(GmContext &,std::vector<std::string> const&,std::string&)>(
    v1,
    (int (*)(GmContext *, const std::vector<std::string> *, std::string *))procExpeditionActivity);
  std::string::~string(&__k);
  std::allocator<char>::~allocator(&__a);
};

// Line 13131: range 0000000017C2AFF8-0000000017C2B6A1
int32_t __cdecl procExpeditionActivity(
        GmContext *context,
        const std::vector<std::string> *param_vec,
        std::string *ret_msg)
{
  unsigned __int64 v3; // r12
  __int64 v4; // rax
  _DWORD *v5; // r13
  int32_t CandidatePathPoolByGm; // r14d
  const std::string *v7; // rax
  const std::string *v8; // rax
  common::milog::MiLogStream *v9; // r14
  const std::string *v10; // rax
  const std::string *v11; // rax
  common::milog::MiLogStream *v12; // r14
  const std::string *v13; // rax
  ExpeditionActivity *v14; // rax
  const std::string *v15; // rax
  ExpeditionActivity *v16; // rax
  const std::string *v17; // rax
  ExpeditionActivity *v18; // rax
  const std::string *v19; // rax
  ExpeditionActivity *v20; // rax
  const std::string *v21; // rax
  const std::string *v22; // rax
  common::milog::MiLogStream *v23; // r14
  const std::string *v24; // rax
  ExpeditionActivity *v25; // rax
  int32_t result; // eax
  common::milog::MiLogStream v28; // [rsp+20h] [rbp-B0h] BYREF
  char v29[144]; // [rsp+40h] [rbp-90h] BYREF

  v3 = (unsigned __int64)v29;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_1(96LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "3 32 4 13 path_id:13147 48 4 13 path_id:13183 64 16 18 activity_ptr:13132";
  *(_QWORD *)(v3 + 16) = procExpeditionActivity;
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = -234556924;
  v5[536862722] = -202178560;
  if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
    __asan_report_load8();
  Player::getActivityComp(context->player);
  PlayerActivityComp::findOpenningActivity<ExpeditionActivity>((PlayerActivityComp *const)(v3 + 64));
  if ( std::operator==<ExpeditionActivity>(0LL, (const std::shared_ptr<ExpeditionActivity> *)(v3 + 64)) )
  {
    std::string::operator=(ret_msg, "expedition activity is not open");
    CandidatePathPoolByGm = -1;
  }
  else
  {
    v7 = std::vector<std::string>::operator[](param_vec, 0LL);
    if ( std::operator==<char>(v7, "ACCELERATE") )
    {
      if ( std::vector<std::string>::size(param_vec) > 2 )
      {
        *(_DWORD *)(v3 + 32) = 0;
        v8 = std::vector<std::string>::operator[](param_vec, 1uLL);
        if ( common::tools::StringUtils::strToNum<unsigned int>(v8, (unsigned int *)(v3 + 32), 1) )
        {
          common::milog::MiLogStream::create(
            &v28,
            &common::milog::MiLogDefault::default_log_obj_,
            3u,
            "./src/player/gm/player_gm_comp.cpp",
            "procExpeditionActivity",
            13150);
          v9 = common::milog::MiLogStream::operator<<<char [15],(char *[15])0>(
                 &v28,
                 (const char (*)[15])"invalid param:");
          v10 = std::vector<std::string>::operator[](param_vec, 1uLL);
          common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v9, v10);
          common::milog::MiLogStream::~MiLogStream(&v28);
          CandidatePathPoolByGm = -1;
        }
        else
        {
          *(_DWORD *)(v3 + 48) = 0;
          v11 = std::vector<std::string>::operator[](param_vec, 2uLL);
          if ( common::tools::StringUtils::strToNum<unsigned int>(v11, (unsigned int *)(v3 + 48), 1) )
          {
            common::milog::MiLogStream::create(
              &v28,
              &common::milog::MiLogDefault::default_log_obj_,
              3u,
              "./src/player/gm/player_gm_comp.cpp",
              "procExpeditionActivity",
              13157);
            v12 = common::milog::MiLogStream::operator<<<char [15],(char *[15])0>(
                    &v28,
                    (const char (*)[15])"invalid param:");
            v13 = std::vector<std::string>::operator[](param_vec, 2uLL);
            common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v12, v13);
            common::milog::MiLogStream::~MiLogStream(&v28);
            CandidatePathPoolByGm = -1;
          }
          else
          {
            v14 = std::__shared_ptr_access<ExpeditionActivity,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<ExpeditionActivity,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 64));
            CandidatePathPoolByGm = ExpeditionActivity::accelerateExpeditionByGm(
                                      v14,
                                      *(_DWORD *)(v3 + 32),
                                      *(_DWORD *)(v3 + 48));
          }
        }
      }
      else
      {
        common::milog::MiLogStream::create(
          &v28,
          &common::milog::MiLogDefault::default_log_obj_,
          3u,
          "./src/player/gm/player_gm_comp.cpp",
          "procExpeditionActivity",
          13143);
        common::milog::MiLogStream::operator<<<char [17],(char *[17])0>(&v28, (const char (*)[17])"param not enough");
        common::milog::MiLogStream::~MiLogStream(&v28);
        CandidatePathPoolByGm = -1;
      }
    }
    else
    {
      v15 = std::vector<std::string>::operator[](param_vec, 0LL);
      if ( std::operator==<char>(v15, "RESET") )
      {
        v16 = std::__shared_ptr_access<ExpeditionActivity,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<ExpeditionActivity,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 64));
        CandidatePathPoolByGm = ExpeditionActivity::resetExpeditionByGm(v16);
      }
      else
      {
        v17 = std::vector<std::string>::operator[](param_vec, 0LL);
        if ( std::operator==<char>(v17, "RESET_COUNT") )
        {
          v18 = std::__shared_ptr_access<ExpeditionActivity,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<ExpeditionActivity,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 64));
          CandidatePathPoolByGm = ExpeditionActivity::resetExpeditionCountByGm(v18);
        }
        else
        {
          v19 = std::vector<std::string>::operator[](param_vec, 0LL);
          if ( std::operator==<char>(v19, "GENERATE_POOL") )
          {
            v20 = std::__shared_ptr_access<ExpeditionActivity,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<ExpeditionActivity,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 64));
            CandidatePathPoolByGm = ExpeditionActivity::generateCandidatePathPoolByGm(v20);
          }
          else
          {
            v21 = std::vector<std::string>::operator[](param_vec, 0LL);
            if ( std::operator==<char>(v21, "UNLOCK") )
            {
              if ( std::vector<std::string>::size(param_vec) > 1 )
              {
                *(_DWORD *)(v3 + 48) = 0;
                v22 = std::vector<std::string>::operator[](param_vec, 1uLL);
                if ( common::tools::StringUtils::strToNum<unsigned int>(v22, (unsigned int *)(v3 + 48), 1) )
                {
                  common::milog::MiLogStream::create(
                    &v28,
                    &common::milog::MiLogDefault::default_log_obj_,
                    3u,
                    "./src/player/gm/player_gm_comp.cpp",
                    "procExpeditionActivity",
                    13186);
                  v23 = common::milog::MiLogStream::operator<<<char [15],(char *[15])0>(
                          &v28,
                          (const char (*)[15])"invalid param:");
                  v24 = std::vector<std::string>::operator[](param_vec, 1uLL);
                  common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v23, v24);
                  common::milog::MiLogStream::~MiLogStream(&v28);
                  CandidatePathPoolByGm = -1;
                }
                else
                {
                  v25 = std::__shared_ptr_access<ExpeditionActivity,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<ExpeditionActivity,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 64));
                  CandidatePathPoolByGm = ExpeditionActivity::unlockPathByGm(v25, *(_DWORD *)(v3 + 48));
                }
              }
              else
              {
                common::milog::MiLogStream::create(
                  &v28,
                  &common::milog::MiLogDefault::default_log_obj_,
                  3u,
                  "./src/player/gm/player_gm_comp.cpp",
                  "procExpeditionActivity",
                  13179);
                common::milog::MiLogStream::operator<<<char [17],(char *[17])0>(
                  &v28,
                  (const char (*)[17])"param not enough");
                common::milog::MiLogStream::~MiLogStream(&v28);
                CandidatePathPoolByGm = -1;
              }
            }
            else
            {
              CandidatePathPoolByGm = 0;
            }
          }
        }
      }
    }
  }
  std::shared_ptr<ExpeditionActivity>::~shared_ptr((std::shared_ptr<ExpeditionActivity> *const)(v3 + 64));
  result = CandidatePathPoolByGm;
  if ( v29 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8008) = 0;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8008) = -168430091;
  }
  return result;
};

// Line 13195: range 0000000017D7ADBC-0000000017D7AE5E
void __cdecl procFleurFairActivityRegister::procFleurFairActivityRegister(procFleurFairActivityRegister *const this)
{
  std::function<int(GmContext&,const std::vector<std::string>&,std::string&)> *v1; // rax
  std::allocator<char> __a; // [rsp+1Fh] [rbp-31h] BYREF
  std::string __k; // [rsp+20h] [rbp-30h] BYREF

  std::allocator<char>::allocator(&__a);
  std::string::basic_string<std::allocator<char>>(&__k, "FLEUR_FAIR_ACTIVITY", &__a);
  v1 = std::unordered_map<std::string,std::function<int ()(GmContext &,std::vector<std::string> const&,std::string&)>>::operator[](
         &GmUtils::op_func_map[abi:cxx11],
         &__k);
  std::function<int ()(GmContext &,std::vector<std::string> const&,std::string&)>::operator=<int (&)(GmContext &,std::vector<std::string> const&,std::string&)>(
    v1,
    (int (*)(GmContext *, const std::vector<std::string> *, std::string *))procFleurFairActivity);
  std::string::~string(&__k);
  std::allocator<char>::~allocator(&__a);
};

// Line 13196: range 0000000017C2B6A2-0000000017C2C848
int32_t __cdecl procFleurFairActivity(
        GmContext *context,
        const std::vector<std::string> *param_vec,
        std::string *ret_msg)
{
  int32_t updated; // r14d
  unsigned __int64 v4; // r13
  __int64 v5; // rax
  _DWORD *v6; // r12
  const std::string *v7; // rax
  const char *v8; // rsi
  std::__shared_ptr_access<FleurFairActivity,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v9; // rdx
  char v10; // cl
  const std::string *v11; // rax
  char *v12; // rsi
  common::milog::MiLogStream *v13; // r14
  const std::string *v14; // rax
  uint32_t v15; // r14d
  std::__shared_ptr_access<FleurFairActivity,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v16; // rdx
  char v17; // cl
  const std::string *v18; // rax
  std::__shared_ptr_access<FleurFairActivity,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v19; // rax
  const std::string *M_current; // r15
  __gnu_cxx::__normal_iterator<const std::string*,std::vector<std::string> > v21; // rax
  int v22; // r15d
  __gnu_cxx::__normal_iterator<unsigned int*,std::vector<unsigned int> >::reference v23; // rax
  unsigned int *v24; // rdx
  std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v25; // rax
  bool v26; // r15
  std::__shared_ptr_access<FleurFairActivity,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v27; // rax
  const std::string *v28; // rax
  const std::string *v29; // rax
  common::milog::MiLogStream *v30; // r14
  const std::string *v31; // rax
  Scene *v32; // rax
  std::__shared_ptr_access<FleurFairMultistagePlay,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v33; // r15
  uint32_t v34; // r14d
  uint32_t Uid; // eax
  const std::string *v36; // rax
  std::__shared_ptr_access<FleurFairActivity,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v37; // rax
  std::__shared_ptr_access<FleurFairActivity,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v38; // rax
  const std::string *v39; // rax
  const std::string *v40; // rax
  common::milog::MiLogStream *v41; // r14
  const std::string *v42; // rax
  int v43; // r15d
  common::milog::MiLogStream *v44; // rax
  common::milog::MiLogStream *v45; // rax
  common::milog::MiLogStream *v46; // rax
  int v47; // r15d
  std::__shared_ptr_access<FleurFairActivity,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v48; // rax
  char *v49; // rsi
  std::unordered_map<std::string,int>::mapped_type *v50; // rax
  _DWORD *v51; // rdx
  char v52; // cl
  const std::string *v53; // rax
  const std::string *v54; // rax
  common::milog::MiLogStream *v55; // r14
  const std::string *v56; // rax
  const std::string *v57; // rax
  common::milog::MiLogStream *v58; // r14
  const std::string *v59; // rax
  FleurFairActivity *v60; // rax
  int32_t result; // eax
  std::allocator<std::string > __a; // [rsp+23h] [rbp-1DDh] BYREF
  unsigned int gallery_id; // [rsp+24h] [rbp-1DCh]
  std::vector<unsigned int>::iterator __for_begin; // [rsp+28h] [rbp-1D8h] BYREF
  std::vector<unsigned int>::iterator __for_end; // [rsp+30h] [rbp-1D0h] BYREF
  const std::string *key; // [rsp+38h] [rbp-1C8h]
  SceneMultistagePlayComp *multistage_comp; // [rsp+40h] [rbp-1C0h]
  std::vector<unsigned int> *__for_range; // [rsp+48h] [rbp-1B8h]
  common::milog::MiLogStream v71; // [rsp+50h] [rbp-1B0h] BYREF
  char v72[400]; // [rsp+70h] [rbp-190h] BYREF

  v4 = (unsigned __int64)v72;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v5 = __asan_stack_malloc_3(352LL);
    if ( v5 )
      v4 = v5;
  }
  *(_QWORD *)v4 = 1102416563LL;
  *(_QWORD *)(v4 + 8) = "8 32 4 20 music_basic_id:13322 48 4 11 score:13323 64 16 18 activity_ptr:13197 96 16 23 dungeon_"
                        "scene_ptr:13272 128 16 14 play_ptr:13280 160 24 23 gallery_param_vec:13236 224 24 20 gallery_id_"
                        "vec:13237 288 32 9 key:13303";
  *(_QWORD *)(v4 + 16) = procFleurFairActivity;
  v6 = (_DWORD *)(v4 >> 3);
  v6[536862720] = -235802127;
  v6[536862721] = -234556924;
  v6[536862722] = -219021312;
  v6[536862723] = -219021312;
  v6[536862724] = -219021312;
  v6[536862725] = -234881024;
  v6[536862726] = -218959118;
  v6[536862727] = -234881024;
  v6[536862728] = -218959118;
  v6[536862730] = -202116109;
  if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
    __asan_report_load8();
  Player::getActivityComp(context->player);
  PlayerActivityComp::findOpenningActivity<FleurFairActivity>((PlayerActivityComp *const)(v4 + 64));
  if ( std::operator==<FleurFairActivity>(0LL, (const std::shared_ptr<FleurFairActivity> *)(v4 + 64)) )
  {
    std::string::operator=(ret_msg, "fleur fair activity is not open");
    updated = -1;
    goto LABEL_73;
  }
  if ( !std::vector<std::string>::size(param_vec) )
  {
    std::string::operator=(ret_msg, "param not engough");
    updated = -1;
    goto LABEL_73;
  }
  v7 = std::vector<std::string>::operator[](param_vec, 0LL);
  v8 = "DUNGEON_SECTION";
  if ( !std::operator==<char>(v7, "DUNGEON_SECTION") )
  {
    v18 = std::vector<std::string>::operator[](param_vec, 0LL);
    if ( !std::operator==<char>(v18, "DUNGEON_GALLERY") )
    {
      v28 = std::vector<std::string>::operator[](param_vec, 0LL);
      if ( std::operator==<char>(v28, "DUNGEON_BUFF_ENERGY") )
      {
        if ( std::vector<std::string>::size(param_vec) > 1 )
        {
          *(_DWORD *)(v4 + 48) = 0;
          v29 = std::vector<std::string>::operator[](param_vec, 1uLL);
          if ( common::tools::StringUtils::strToNum<unsigned int>(v29, (unsigned int *)(v4 + 48), 1) )
          {
            common::milog::MiLogStream::create(
              &v71,
              &common::milog::MiLogDefault::default_log_obj_,
              3u,
              "./src/player/gm/player_gm_comp.cpp",
              "procFleurFairActivity",
              13268);
            v30 = common::milog::MiLogStream::operator<<<char [15],(char *[15])0>(
                    &v71,
                    (const char (*)[15])"invalid param:");
            v31 = std::vector<std::string>::operator[](param_vec, 1uLL);
            common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v30, v31);
            common::milog::MiLogStream::~MiLogStream(&v71);
            updated = -1;
          }
          else
          {
            if ( *(_BYTE *)(((unsigned __int64)&context->scene >> 3) + 0x7FFF8000) )
              __asan_report_load8();
            std::enable_shared_from_this<Scene>::shared_from_this((std::enable_shared_from_this<Scene> *const)(v4 + 128));
            std::dynamic_pointer_cast<DungeonScene,Scene>((const std::shared_ptr<Scene> *)(v4 + 96));
            std::shared_ptr<Scene>::~shared_ptr((std::shared_ptr<Scene> *const)(v4 + 128));
            if ( std::operator==<DungeonScene>(0LL, (const std::shared_ptr<DungeonScene> *)(v4 + 96)) )
            {
              std::string::operator=(ret_msg, "player not in dungeon scene");
              updated = -1;
            }
            else
            {
              v32 = (Scene *)std::__shared_ptr_access<DungeonScene,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<DungeonScene,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 96));
              multistage_comp = Scene::getMultistagePlayComp(v32);
              SceneMultistagePlayComp::findAnyPlayByGm<FleurFairMultistagePlay>((SceneMultistagePlayComp *const)(v4 + 128));
              if ( std::operator==<FleurFairMultistagePlay>(
                     0LL,
                     (const std::shared_ptr<FleurFairMultistagePlay> *)(v4 + 128)) )
              {
                common::milog::MiLogStream::create(
                  &v71,
                  &common::milog::MiLogDefault::default_log_obj_,
                  3u,
                  "./src/player/gm/player_gm_comp.cpp",
                  "procFleurFairActivity",
                  13283);
                common::milog::MiLogStream::operator<<<char [47],(char *[47])0>(
                  &v71,
                  (const char (*)[47])"findAnyPlayByGm FleurFairMultistagePlay failed");
                common::milog::MiLogStream::~MiLogStream(&v71);
                updated = -1;
              }
              else
              {
                v33 = std::__shared_ptr_access<FleurFairMultistagePlay,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<FleurFairMultistagePlay,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 128));
                v34 = *(_DWORD *)(v4 + 48);
                if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
                  __asan_report_load8();
                Uid = Player::getUid(context->player);
                FleurFairMultistagePlay::setPlayerEnergy(v33, Uid, v34);
                updated = 0;
              }
              std::shared_ptr<FleurFairMultistagePlay>::~shared_ptr((std::shared_ptr<FleurFairMultistagePlay> *const)(v4 + 128));
            }
            std::shared_ptr<DungeonScene>::~shared_ptr((std::shared_ptr<DungeonScene> *const)(v4 + 96));
          }
        }
        else
        {
          common::milog::MiLogStream::create(
            &v71,
            &common::milog::MiLogDefault::default_log_obj_,
            3u,
            "./src/player/gm/player_gm_comp.cpp",
            "procFleurFairActivity",
            13261);
          common::milog::MiLogStream::operator<<<char [17],(char *[17])0>(&v71, (const char (*)[17])"param not enough");
          common::milog::MiLogStream::~MiLogStream(&v71);
          updated = -1;
        }
        goto LABEL_73;
      }
      v36 = std::vector<std::string>::operator[](param_vec, 0LL);
      if ( !std::operator==<char>(v36, "DUNGEON_GALLERY_TEMP_VALUE") )
      {
        v53 = std::vector<std::string>::operator[](param_vec, 0LL);
        if ( std::operator==<char>(v53, "MUSIC_GAME") )
        {
          if ( std::vector<std::string>::size(param_vec) > 2 )
          {
            *(_DWORD *)(v4 + 32) = 0;
            *(_DWORD *)(v4 + 48) = 0;
            v54 = std::vector<std::string>::operator[](param_vec, 1uLL);
            if ( common::tools::StringUtils::strToNum<unsigned int>(v54, (unsigned int *)(v4 + 32), 1) )
            {
              common::milog::MiLogStream::create(
                &v71,
                &common::milog::MiLogDefault::default_log_obj_,
                3u,
                "./src/player/gm/player_gm_comp.cpp",
                "procFleurFairActivity",
                13326);
              v55 = common::milog::MiLogStream::operator<<<char [15],(char *[15])0>(
                      &v71,
                      (const char (*)[15])"invalid param:");
              v56 = std::vector<std::string>::operator[](param_vec, 1uLL);
              common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v55, v56);
              common::milog::MiLogStream::~MiLogStream(&v71);
              updated = -1;
            }
            else
            {
              v57 = std::vector<std::string>::operator[](param_vec, 2uLL);
              if ( common::tools::StringUtils::strToNum<unsigned int>(v57, (unsigned int *)(v4 + 48), 1) )
              {
                common::milog::MiLogStream::create(
                  &v71,
                  &common::milog::MiLogDefault::default_log_obj_,
                  3u,
                  "./src/player/gm/player_gm_comp.cpp",
                  "procFleurFairActivity",
                  13331);
                v58 = common::milog::MiLogStream::operator<<<char [15],(char *[15])0>(
                        &v71,
                        (const char (*)[15])"invalid param:");
                v59 = std::vector<std::string>::operator[](param_vec, 2uLL);
                common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v58, v59);
                common::milog::MiLogStream::~MiLogStream(&v71);
                updated = -1;
              }
              else
              {
                v60 = std::__shared_ptr_access<FleurFairActivity,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<FleurFairActivity,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 64));
                updated = FleurFairActivity::updateMusicGameScoreByGm(v60, *(_DWORD *)(v4 + 32), *(_DWORD *)(v4 + 48));
              }
            }
          }
          else
          {
            std::string::operator=(ret_msg, "param not enough");
            updated = -1;
          }
        }
        else
        {
          updated = 0;
        }
        goto LABEL_73;
      }
      if ( std::vector<std::string>::size(param_vec) > 1 )
      {
        if ( std::vector<std::string>::size(param_vec) > 2 )
        {
          std::allocator<char>::allocator(&__a);
          std::string::basic_string<std::allocator<char>>(
            (std::string *const)&v71,
            off_262D4140,
            (const std::allocator<char> *)&__a);
          v39 = std::vector<std::string>::operator[](param_vec, 1uLL);
          common::tools::StringUtils::trim((std::string *)(v4 + 288), v39, (const std::string *)&v71, 1);
          std::string::~string(&v71);
          std::allocator<char>::~allocator(&__a);
          *(_DWORD *)(v4 + 48) = 0;
          v40 = std::vector<std::string>::operator[](param_vec, 2uLL);
          if ( common::tools::StringUtils::strToNum<int>(v40, (int *)(v4 + 48), 1) )
          {
            common::milog::MiLogStream::create(
              &v71,
              &common::milog::MiLogDefault::default_log_obj_,
              3u,
              "./src/player/gm/player_gm_comp.cpp",
              "procFleurFairActivity",
              13307);
            v41 = common::milog::MiLogStream::operator<<<char [15],(char *[15])0>(
                    &v71,
                    (const char (*)[15])"invalid param:");
            v42 = std::vector<std::string>::operator[](param_vec, 2uLL);
            common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v41, v42);
            common::milog::MiLogStream::~MiLogStream(&v71);
            updated = -1;
            v43 = 0;
          }
          else
          {
            common::milog::MiLogStream::create(
              &v71,
              &common::milog::MiLogDefault::default_log_obj_,
              1u,
              "./src/player/gm/player_gm_comp.cpp",
              "procFleurFairActivity",
              13310);
            v44 = common::milog::MiLogStream::operator<<<char [34],(char *[34])0>(
                    &v71,
                    (const char (*)[34])"DUNGEON_GALLERY_TEMP_VALUE, key: ");
            v45 = common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(
                    v44,
                    (const std::string *)(v4 + 288));
            v46 = common::milog::MiLogStream::operator<<<char [10],(char *[10])0>(v45, (const char (*)[10])" ,value: ");
            common::milog::MiLogStream::operator<<<int,(int *)0>(v46, (const int *)(v4 + 48));
            common::milog::MiLogStream::~MiLogStream(&v71);
            v47 = *(_DWORD *)(v4 + 48);
            v48 = std::__shared_ptr_access<FleurFairActivity,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<FleurFairActivity,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 64));
            v49 = (char *)(v4 + 288);
            v50 = std::unordered_map<std::string,int>::operator[](
                    &v48->gm_dungeon_gallery_temp_value_map,
                    (const std::unordered_map<std::string,int>::key_type *)(v4 + 288));
            v51 = v50;
            v52 = *(_BYTE *)(((unsigned __int64)v50 >> 3) + 0x7FFF8000);
            if ( v52 != 0 && (char)(((unsigned __int8)v50 & 7) + 3) >= v52 )
            {
              LOBYTE(v49) = v52 != 0;
              __asan_report_store4(v50, v49, v50);
            }
            *v51 = v47;
            v43 = 1;
          }
          std::string::~string((void *)(v4 + 288));
          if ( v43 != 1 )
            goto LABEL_73;
        }
        else
        {
          key = std::vector<std::string>::operator[](param_vec, 1uLL);
          v38 = std::__shared_ptr_access<FleurFairActivity,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<FleurFairActivity,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 64));
          std::unordered_map<std::string,int>::erase(&v38->gm_dungeon_gallery_temp_value_map, key);
        }
      }
      else
      {
        v37 = std::__shared_ptr_access<FleurFairActivity,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<FleurFairActivity,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 64));
        std::unordered_map<std::string,int>::clear(&v37->gm_dungeon_gallery_temp_value_map);
      }
      updated = 0;
      goto LABEL_73;
    }
    if ( std::vector<std::string>::size(param_vec) > 1 )
    {
      std::allocator<std::string>::allocator(&__a);
      M_current = std::vector<std::string>::end(param_vec)._M_current;
      __for_end._M_current = (unsigned int *)std::vector<std::string>::begin(param_vec)._M_current;
      v21._M_current = __gnu_cxx::__normal_iterator<std::string const*,std::vector<std::string>>::operator+(
                         (const __gnu_cxx::__normal_iterator<const std::string*,std::vector<std::string> > *const)&__for_end,
                         1LL)._M_current;
      std::vector<std::string>::vector<__gnu_cxx::__normal_iterator<std::string const*,std::vector<std::string>>,void>(
        (std::vector<std::string> *const)(v4 + 160),
        v21,
        (__gnu_cxx::__normal_iterator<const std::string*,std::vector<std::string> >)M_current,
        &__a);
      std::allocator<std::string>::~allocator(&__a);
      std::vector<unsigned int>::vector((std::vector<unsigned int> *const)(v4 + 224));
      if ( common::tools::StringUtils::strVecToNumVec<unsigned int>(
             (const std::vector<std::string> *)(v4 + 160),
             (std::vector<unsigned int> *)(v4 + 224)) )
      {
        common::milog::MiLogStream::create(
          &v71,
          &common::milog::MiLogDefault::default_log_obj_,
          3u,
          "./src/player/gm/player_gm_comp.cpp",
          "procFleurFairActivity",
          13240);
        common::milog::MiLogStream::operator<<<char [22],(char *[22])0>(
          &v71,
          (const char (*)[22])"strVecToNumVec failed");
        common::milog::MiLogStream::~MiLogStream(&v71);
        updated = -1;
        v22 = 0;
      }
      else
      {
        __for_range = (std::vector<unsigned int> *)(v4 + 224);
        __for_begin._M_current = std::vector<unsigned int>::begin((std::vector<unsigned int> *const)(v4 + 224))._M_current;
        __for_end._M_current = std::vector<unsigned int>::end(__for_range)._M_current;
        while ( __gnu_cxx::operator!=<unsigned int *,std::vector<unsigned int>>(&__for_begin, &__for_end) )
        {
          v23 = __gnu_cxx::__normal_iterator<unsigned int *,std::vector<unsigned int>>::operator*(&__for_begin);
          v24 = v23;
          if ( *(_BYTE *)(((unsigned __int64)v23 >> 3) + 0x7FFF8000) != 0
            && (char)(((unsigned __int8)v23 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)v23 >> 3) + 0x7FFF8000) )
          {
            __asan_report_load4(v23);
          }
          gallery_id = *v24;
          ServiceBox::findService<GameserverService>();
          GameserverService::getConfig((GameserverService *const)(v4 + 128));
          v25 = std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 128));
          v26 = data::GalleryExcelConfigMgrBase::findGalleryExcelConfig(
                  &v25->design_config.txt_config_mgr.gallery_config_mgr,
                  gallery_id) == 0LL;
          std::shared_ptr<Config>::~shared_ptr((std::shared_ptr<Config> *const)(v4 + 128));
          if ( v26 )
          {
            std::string::operator=(ret_msg, "gallery_id invalid");
            updated = -1;
            v22 = 0;
            goto LABEL_34;
          }
          __gnu_cxx::__normal_iterator<unsigned int *,std::vector<unsigned int>>::operator++(&__for_begin);
        }
        v27 = std::__shared_ptr_access<FleurFairActivity,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<FleurFairActivity,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 64));
        std::vector<unsigned int>::operator=(
          &v27->gm_dungeon_gallery_id_vec,
          (const std::vector<unsigned int> *)(v4 + 224));
        v22 = 1;
      }
LABEL_34:
      std::vector<unsigned int>::~vector((std::vector<unsigned int> *const)(v4 + 224));
      std::vector<std::string>::~vector((std::vector<std::string> *const)(v4 + 160));
      if ( v22 != 1 )
        goto LABEL_73;
    }
    else
    {
      v19 = std::__shared_ptr_access<FleurFairActivity,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<FleurFairActivity,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 64));
      std::vector<unsigned int>::clear(&v19->gm_dungeon_gallery_id_vec);
    }
    updated = 0;
    goto LABEL_73;
  }
  if ( std::vector<std::string>::size(param_vec) > 1 )
  {
    *(_DWORD *)(v4 + 48) = 0;
    v11 = std::vector<std::string>::operator[](param_vec, 1uLL);
    v12 = (char *)(v4 + 48);
    if ( common::tools::StringUtils::strToNum<unsigned int>(v11, (unsigned int *)(v4 + 48), 1) )
    {
      common::milog::MiLogStream::create(
        &v71,
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/player/gm/player_gm_comp.cpp",
        "procFleurFairActivity",
        13220);
      v13 = common::milog::MiLogStream::operator<<<char [15],(char *[15])0>(&v71, (const char (*)[15])"invalid param:");
      v14 = std::vector<std::string>::operator[](param_vec, 1uLL);
      common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v13, v14);
      common::milog::MiLogStream::~MiLogStream(&v71);
      updated = -1;
      goto LABEL_73;
    }
    v15 = *(_DWORD *)(v4 + 48);
    v16 = std::__shared_ptr_access<FleurFairActivity,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<FleurFairActivity,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 64));
    v17 = *(_BYTE *)(((unsigned __int64)&v16->gm_dungeon_section_id >> 3) + 0x7FFF8000);
    if ( v17 != 0 && (char)((((_BYTE)v16 - 92) & 7) + 3) >= v17 )
    {
      LOBYTE(v12) = v17 != 0;
      __asan_report_store4(&v16->gm_dungeon_section_id, v12, v16);
    }
    v16->gm_dungeon_section_id = v15;
  }
  else
  {
    v9 = std::__shared_ptr_access<FleurFairActivity,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<FleurFairActivity,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 64));
    v10 = *(_BYTE *)(((unsigned __int64)&v9->gm_dungeon_section_id >> 3) + 0x7FFF8000);
    if ( v10 != 0 && (char)((((_BYTE)v9 - 92) & 7) + 3) >= v10 )
    {
      LOBYTE(v8) = v10 != 0;
      __asan_report_store4(&v9->gm_dungeon_section_id, v8, v9);
    }
    v9->gm_dungeon_section_id = 0;
  }
  updated = 0;
LABEL_73:
  std::shared_ptr<FleurFairActivity>::~shared_ptr((std::shared_ptr<FleurFairActivity> *const)(v4 + 64));
  result = updated;
  if ( v72 == (char *)v4 )
  {
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8008) = 0LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8010) = 0LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8018) = 0LL;
    *(_DWORD *)((v4 >> 3) + 0x7FFF8020) = 0;
    *(_DWORD *)((v4 >> 3) + 0x7FFF8028) = 0;
  }
  else
  {
    *(_QWORD *)v4 = 1172321806LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8020) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v4 >> 3) + 0x7FFF8028) = -168430091;
  }
  return result;
};

// Line 13340: range 0000000017D7AE60-0000000017D7AF02
void __cdecl procMultistageRegister::procMultistageRegister(procMultistageRegister *const this)
{
  std::function<int(GmContext&,const std::vector<std::string>&,std::string&)> *v1; // rax
  std::allocator<char> __a; // [rsp+1Fh] [rbp-31h] BYREF
  std::string __k; // [rsp+20h] [rbp-30h] BYREF

  std::allocator<char>::allocator(&__a);
  std::string::basic_string<std::allocator<char>>(&__k, "MULTISTAGE", &__a);
  v1 = std::unordered_map<std::string,std::function<int ()(GmContext &,std::vector<std::string> const&,std::string&)>>::operator[](
         &GmUtils::op_func_map[abi:cxx11],
         &__k);
  std::function<int ()(GmContext &,std::vector<std::string> const&,std::string&)>::operator=<int (&)(GmContext &,std::vector<std::string> const&,std::string&)>(
    v1,
    (int (*)(GmContext *, const std::vector<std::string> *, std::string *))procMultistage);
  std::string::~string(&__k);
  std::allocator<char>::~allocator(&__a);
};

// Line 13341: range 0000000017C2C849-0000000017C2D820
int32_t __cdecl procMultistage(GmContext *context, const std::vector<std::string> *param_vec, std::string *ret_msg)
{
  unsigned __int64 v3; // r13
  __int64 v4; // rax
  _DWORD *v5; // r12
  int32_t v6; // r14d
  const std::string *v7; // rax
  common::milog::MiLogStream *v8; // r14
  const std::string *v9; // rax
  common::milog::MiLogStream *v10; // rax
  common::milog::MiLogStream *v11; // rax
  const std::string *v12; // rax
  common::milog::MiLogStream *v13; // r14
  const std::string *v14; // rax
  const std::string *v15; // rax
  const std::string *v16; // rax
  common::milog::MiLogStream *v17; // rax
  const std::string *v18; // rax
  common::milog::MiLogStream *v19; // rax
  uint32_t v20; // r15d
  uint32_t v21; // r14d
  Group *v22; // rax
  const std::string *v23; // rax
  const std::string *v24; // rax
  const std::string *v25; // rax
  common::milog::MiLogStream *v26; // rax
  uint32_t v27; // r15d
  uint32_t v28; // r14d
  Group *v29; // rax
  const std::string *v30; // rax
  const std::string *v31; // rax
  const std::string *v32; // rax
  common::milog::MiLogStream *v33; // rax
  uint32_t Uid; // r15d
  uint32_t v35; // r14d
  Group *v36; // rax
  const std::string *v37; // rax
  const std::string *v38; // rax
  common::milog::MiLogStream *v39; // rax
  char v40; // r15
  uint32_t v41; // r14d
  Group *v42; // rax
  const std::string *v43; // rax
  const std::string *v44; // rax
  common::milog::MiLogStream *v45; // rax
  char v46; // r15
  uint32_t v47; // r14d
  Group *v48; // rax
  int32_t result; // eax
  int32_t value; // [rsp+14h] [rbp-19Ch]
  data::MultistageStageType enum_stage_type; // [rsp+34h] [rbp-17Ch]
  SceneMultistagePlayComp *play_comp; // [rsp+38h] [rbp-178h]
  char v54[368]; // [rsp+40h] [rbp-170h] BYREF

  v3 = (unsigned __int64)v54;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_3(320LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "10 32 1 13 is_succ:13480 48 1 13 is_succ:13503 64 4 14 group_id:13353 80 4 16 play_index:13366 9"
                        "6 4 14 duration:13398 112 4 11 value:13457 128 16 15 group_ptr:13359 160 16 17 param_table:13414"
                        " 192 32 16 param_name:13455 256 32 16 stage_name:13413";
  *(_QWORD *)(v3 + 16) = procMultistage;
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = -234753535;
  v5[536862722] = -234556924;
  v5[536862723] = -234556924;
  v5[536862724] = -219021312;
  v5[536862725] = -219021312;
  v5[536862727] = -218959118;
  v5[536862729] = -202116109;
  if ( std::vector<std::string>::size(param_vec) <= 2 )
  {
    std::string::operator=(ret_msg, "param not enough");
    v6 = -1;
    goto LABEL_64;
  }
  *(_DWORD *)(v3 + 64) = 0;
  v7 = std::vector<std::string>::operator[](param_vec, 1uLL);
  if ( common::tools::StringUtils::strToNum<unsigned int>(v7, (unsigned int *)(v3 + 64), 1) )
  {
    common::milog::MiLogStream::create(
      (common::milog::MiLogStream *)(v3 + 256),
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/player/gm/player_gm_comp.cpp",
      "procMultistage",
      13356);
    v8 = common::milog::MiLogStream::operator<<<char [18],(char *[18])0>(
           (common::milog::MiLogStream *const)(v3 + 256),
           (const char (*)[18])"invalid group_id:");
    v9 = std::vector<std::string>::operator[](param_vec, 1uLL);
    common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v8, v9);
    common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v3 + 256));
    v6 = -1;
    goto LABEL_64;
  }
  if ( *(_BYTE *)(((unsigned __int64)&context->scene >> 3) + 0x7FFF8000) )
    __asan_report_load8();
  Scene::findGroup((Scene *const)(v3 + 128), (uint32_t)context->scene);
  if ( !std::operator==<Group>(0LL, (const std::shared_ptr<Group> *)(v3 + 128)) )
  {
    *(_DWORD *)(v3 + 80) = 0;
    v12 = std::vector<std::string>::operator[](param_vec, 2uLL);
    if ( common::tools::StringUtils::strToNum<unsigned int>(v12, (unsigned int *)(v3 + 80), 1) )
    {
      common::milog::MiLogStream::create(
        (common::milog::MiLogStream *)(v3 + 256),
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/player/gm/player_gm_comp.cpp",
        "procMultistage",
        13369);
      v13 = common::milog::MiLogStream::operator<<<char [20],(char *[20])0>(
              (common::milog::MiLogStream *const)(v3 + 256),
              (const char (*)[20])"invalid play_index:");
      v14 = std::vector<std::string>::operator[](param_vec, 1uLL);
      common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v13, v14);
      common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v3 + 256));
      v6 = -1;
      goto LABEL_63;
    }
    if ( *(_BYTE *)(((unsigned __int64)&context->scene >> 3) + 0x7FFF8000) )
      __asan_report_load8();
    play_comp = Scene::getMultistagePlayComp(context->scene);
    v15 = std::vector<std::string>::operator[](param_vec, 0LL);
    if ( std::operator==<char>("START_STAGE", v15) )
    {
      if ( std::vector<std::string>::size(param_vec) > 4 )
      {
        *(_DWORD *)(v3 + 96) = 0;
        v16 = std::vector<std::string>::operator[](param_vec, 3uLL);
        if ( common::tools::StringUtils::strToNum<unsigned int>(v16, (unsigned int *)(v3 + 96), 1) )
        {
          common::milog::MiLogStream::create(
            (common::milog::MiLogStream *)(v3 + 256),
            &common::milog::MiLogDefault::default_log_obj_,
            3u,
            "./src/player/gm/player_gm_comp.cpp",
            "procMultistage",
            13401);
          v17 = common::milog::MiLogStream::operator<<<char [18],(char *[18])0>(
                  (common::milog::MiLogStream *const)(v3 + 256),
                  (const char (*)[18])"invalid duration:");
          common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v17, (const unsigned int *)(v3 + 96));
          common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v3 + 256));
          v6 = -1;
        }
        else
        {
          *(_DWORD *)(v3 + 112) = 0;
          v18 = std::vector<std::string>::operator[](param_vec, 4uLL);
          if ( common::tools::StringUtils::strToNum<unsigned int>(v18, (unsigned int *)(v3 + 112), 1) )
          {
            common::milog::MiLogStream::create(
              (common::milog::MiLogStream *)(v3 + 256),
              &common::milog::MiLogDefault::default_log_obj_,
              3u,
              "./src/player/gm/player_gm_comp.cpp",
              "procMultistage",
              13408);
            v19 = common::milog::MiLogStream::operator<<<char [20],(char *[20])0>(
                    (common::milog::MiLogStream *const)(v3 + 256),
                    (const char (*)[20])"invalid stage_type:");
            common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
              v19,
              (const unsigned int *)(v3 + 112));
            common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v3 + 256));
            v6 = -1;
          }
          else
          {
            enum_stage_type = *(_DWORD *)(v3 + 112);
            std::allocator<char>::allocator(v3 + 48);
            std::string::basic_string<std::allocator<char>>(
              (std::string *const)(v3 + 256),
              "from_gm",
              (const std::allocator<char> *)(v3 + 48));
            std::allocator<char>::~allocator(v3 + 48);
            luabind::adl::object::object((luabind::adl::object *const)(v3 + 160));
            v20 = *(_DWORD *)(v3 + 96);
            v21 = *(_DWORD *)(v3 + 80);
            v22 = std::__shared_ptr_access<Group,(__gnu_cxx::_Lock_policy)2,false,false>::operator*((const std::__shared_ptr_access<Group,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 128));
            if ( SceneMultistagePlayComp::startStage(
                   play_comp,
                   v22,
                   v21,
                   v20,
                   enum_stage_type,
                   (const std::string *)(v3 + 256),
                   (const luabind::adl::object *)(v3 + 160)) )
            {
              std::string::operator=(ret_msg, "start stage failed");
              v6 = -1;
            }
            else
            {
              v6 = 0;
            }
            luabind::adl::object::~object((luabind::adl::object *const)(v3 + 160));
            std::string::~string((void *)(v3 + 256));
          }
        }
        goto LABEL_63;
      }
      goto LABEL_56;
    }
    v23 = std::vector<std::string>::operator[](param_vec, 0LL);
    if ( std::operator==<char>("SET_PLAY_VALUE", v23) )
    {
      if ( std::vector<std::string>::size(param_vec) > 4 )
      {
        v24 = std::vector<std::string>::operator[](param_vec, 3uLL);
        common::tools::StringUtils::toLower((std::string *)(v3 + 192), v24);
        *(_DWORD *)(v3 + 112) = 0;
        v25 = std::vector<std::string>::operator[](param_vec, 4uLL);
        if ( common::tools::StringUtils::strToNum<unsigned int>(v25, (unsigned int *)(v3 + 112), 1) )
        {
          common::milog::MiLogStream::create(
            (common::milog::MiLogStream *)(v3 + 256),
            &common::milog::MiLogDefault::default_log_obj_,
            3u,
            "./src/player/gm/player_gm_comp.cpp",
            "procMultistage",
            13435);
          v26 = common::milog::MiLogStream::operator<<<char [15],(char *[15])0>(
                  (common::milog::MiLogStream *const)(v3 + 256),
                  (const char (*)[15])"invalid value:");
          common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v26, (const unsigned int *)(v3 + 112));
          common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v3 + 256));
          v6 = -1;
        }
        else
        {
          std::allocator<char>::allocator(v3 + 48);
          std::string::basic_string<std::allocator<char>>(
            (std::string *const)(v3 + 256),
            "from_gm",
            (const std::allocator<char> *)(v3 + 48));
          std::allocator<char>::~allocator(v3 + 48);
          v27 = *(_DWORD *)(v3 + 112);
          v28 = *(_DWORD *)(v3 + 80);
          v29 = std::__shared_ptr_access<Group,(__gnu_cxx::_Lock_policy)2,false,false>::operator*((const std::__shared_ptr_access<Group,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 128));
          if ( SceneMultistagePlayComp::setPlayValue(play_comp, v29, v28, (const std::string *)(v3 + 192), v27, 1) )
          {
            std::string::operator=(ret_msg, "setPlayValue failed");
            v6 = -1;
          }
          else
          {
            v6 = 0;
          }
          std::string::~string((void *)(v3 + 256));
        }
LABEL_35:
        std::string::~string((void *)(v3 + 192));
        goto LABEL_63;
      }
    }
    else
    {
      v30 = std::vector<std::string>::operator[](param_vec, 0LL);
      if ( !std::operator==<char>("SET_PLAY_UID_VALUE", v30) )
      {
        v37 = std::vector<std::string>::operator[](param_vec, 0LL);
        if ( std::operator==<char>("END_STAGE", v37) )
        {
          if ( std::vector<std::string>::size(param_vec) > 3 )
          {
            *(_BYTE *)(v3 + 32) = 0;
            v38 = std::vector<std::string>::operator[](param_vec, 3uLL);
            if ( common::tools::StringUtils::strToNum<bool>(v38, (bool *)(v3 + 32), 1) )
            {
              common::milog::MiLogStream::create(
                (common::milog::MiLogStream *)(v3 + 256),
                &common::milog::MiLogDefault::default_log_obj_,
                3u,
                "./src/player/gm/player_gm_comp.cpp",
                "procMultistage",
                13483);
              v39 = common::milog::MiLogStream::operator<<<char [17],(char *[17])0>(
                      (common::milog::MiLogStream *const)(v3 + 256),
                      (const char (*)[17])"invalid is_succ:");
              common::milog::MiLogStream::operator<<(v39, *(_BYTE *)(v3 + 32));
              common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v3 + 256));
              v6 = -1;
            }
            else
            {
              std::allocator<char>::allocator(v3 + 48);
              std::string::basic_string<std::allocator<char>>(
                (std::string *const)(v3 + 256),
                "from_gm",
                (const std::allocator<char> *)(v3 + 48));
              std::allocator<char>::~allocator(v3 + 48);
              v40 = *(_BYTE *)(v3 + 32);
              v41 = *(_DWORD *)(v3 + 80);
              v42 = std::__shared_ptr_access<Group,(__gnu_cxx::_Lock_policy)2,false,false>::operator*((const std::__shared_ptr_access<Group,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 128));
              if ( SceneMultistagePlayComp::endStage(play_comp, v42, v41, (const std::string *)(v3 + 256), v40) )
              {
                std::string::operator=(ret_msg, "endStage failed");
                v6 = -1;
              }
              else
              {
                v6 = 0;
              }
              std::string::~string((void *)(v3 + 256));
            }
            goto LABEL_63;
          }
        }
        else
        {
          v43 = std::vector<std::string>::operator[](param_vec, 0LL);
          if ( !std::operator==<char>("END_PLAY", v43) )
          {
            v6 = 0;
            goto LABEL_63;
          }
          if ( std::vector<std::string>::size(param_vec) > 3 )
          {
            *(_BYTE *)(v3 + 48) = 0;
            v44 = std::vector<std::string>::operator[](param_vec, 3uLL);
            if ( common::tools::StringUtils::strToNum<bool>(v44, (bool *)(v3 + 48), 1) )
            {
              common::milog::MiLogStream::create(
                (common::milog::MiLogStream *)(v3 + 256),
                &common::milog::MiLogDefault::default_log_obj_,
                3u,
                "./src/player/gm/player_gm_comp.cpp",
                "procMultistage",
                13506);
              v45 = common::milog::MiLogStream::operator<<<char [17],(char *[17])0>(
                      (common::milog::MiLogStream *const)(v3 + 256),
                      (const char (*)[17])"invalid is_succ:");
              common::milog::MiLogStream::operator<<(v45, *(_BYTE *)(v3 + 48));
              common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v3 + 256));
              v6 = -1;
            }
            else
            {
              v46 = *(_BYTE *)(v3 + 48);
              v47 = *(_DWORD *)(v3 + 80);
              v48 = std::__shared_ptr_access<Group,(__gnu_cxx::_Lock_policy)2,false,false>::operator*((const std::__shared_ptr_access<Group,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 128));
              if ( SceneMultistagePlayComp::endPlay(play_comp, v48, v47, v46) )
              {
                std::string::operator=(ret_msg, "endPlay failed");
                v6 = -1;
              }
              else
              {
                v6 = 0;
              }
            }
            goto LABEL_63;
          }
        }
        goto LABEL_56;
      }
      if ( std::vector<std::string>::size(param_vec) > 4 )
      {
        v31 = std::vector<std::string>::operator[](param_vec, 3uLL);
        common::tools::StringUtils::toLower((std::string *)(v3 + 192), v31);
        *(_DWORD *)(v3 + 112) = 0;
        v32 = std::vector<std::string>::operator[](param_vec, 4uLL);
        if ( common::tools::StringUtils::strToNum<unsigned int>(v32, (unsigned int *)(v3 + 112), 1) )
        {
          common::milog::MiLogStream::create(
            (common::milog::MiLogStream *)(v3 + 256),
            &common::milog::MiLogDefault::default_log_obj_,
            3u,
            "./src/player/gm/player_gm_comp.cpp",
            "procMultistage",
            13460);
          v33 = common::milog::MiLogStream::operator<<<char [15],(char *[15])0>(
                  (common::milog::MiLogStream *const)(v3 + 256),
                  (const char (*)[15])"invalid value:");
          common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v33, (const unsigned int *)(v3 + 112));
          common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v3 + 256));
          v6 = -1;
        }
        else
        {
          value = *(_DWORD *)(v3 + 112);
          if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
            __asan_report_load8();
          Uid = Player::getUid(context->player);
          v35 = *(_DWORD *)(v3 + 80);
          v36 = std::__shared_ptr_access<Group,(__gnu_cxx::_Lock_policy)2,false,false>::operator*((const std::__shared_ptr_access<Group,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 128));
          if ( SceneMultistagePlayComp::setPlayUidValue(
                 play_comp,
                 v36,
                 v35,
                 (const std::string *)(v3 + 192),
                 Uid,
                 value) )
          {
            std::string::operator=(ret_msg, "setPlayUidValue failed");
            v6 = -1;
          }
          else
          {
            v6 = 0;
          }
        }
        goto LABEL_35;
      }
    }
LABEL_56:
    std::string::operator=(ret_msg, "param not enough");
    v6 = -1;
    goto LABEL_63;
  }
  common::milog::MiLogStream::create(
    (common::milog::MiLogStream *)(v3 + 256),
    &common::milog::MiLogDefault::default_log_obj_,
    3u,
    "./src/player/gm/player_gm_comp.cpp",
    "procMultistage",
    13362);
  v10 = common::milog::MiLogStream::operator<<<char [25],(char *[25])0>(
          (common::milog::MiLogStream *const)(v3 + 256),
          (const char (*)[25])"invalid findGroup group:");
  v11 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v10, (const unsigned int *)(v3 + 64));
  common::milog::MiLogStream::operator<<<char [9],(char *[9])0>(v11, (const char (*)[9])" failed.");
  common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v3 + 256));
  v6 = -1;
LABEL_63:
  std::shared_ptr<Group>::~shared_ptr((std::shared_ptr<Group> *const)(v3 + 128));
LABEL_64:
  result = v6;
  if ( v54 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8010) = 0LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF801C) = 0;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8024) = 0;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8020) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 13521: range 0000000017D7AF04-0000000017D7AFA6
void __cdecl procOpActivityRegister::procOpActivityRegister(procOpActivityRegister *const this)
{
  std::function<int(GmContext&,const std::vector<std::string>&,std::string&)> *v1; // rax
  std::allocator<char> __a; // [rsp+1Fh] [rbp-31h] BYREF
  std::string __k; // [rsp+20h] [rbp-30h] BYREF

  std::allocator<char>::allocator(&__a);
  std::string::basic_string<std::allocator<char>>(&__k, "OP_ACTIVITY", &__a);
  v1 = std::unordered_map<std::string,std::function<int ()(GmContext &,std::vector<std::string> const&,std::string&)>>::operator[](
         &GmUtils::op_func_map[abi:cxx11],
         &__k);
  std::function<int ()(GmContext &,std::vector<std::string> const&,std::string&)>::operator=<int (&)(GmContext &,std::vector<std::string> const&,std::string&)>(
    v1,
    (int (*)(GmContext *, const std::vector<std::string> *, std::string *))procOpActivity);
  std::string::~string(&__k);
  std::allocator<char>::~allocator(&__a);
};

// Line 13522: range 0000000017C2D821-0000000017C2D8DF
int32_t __cdecl procOpActivity(GmContext *context, const std::vector<std::string> *param_vec, std::string *ret_msg)
{
  const std::string *v4; // rax
  PlayerOpActivityComp *OpActivityComp; // rax

  if ( std::vector<std::string>::size(param_vec) )
  {
    v4 = std::vector<std::string>::operator[](param_vec, 0LL);
    if ( std::operator==<char>(v4, "REFRESH") )
    {
      if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
        __asan_report_load8();
      OpActivityComp = Player::getOpActivityComp(context->player);
      PlayerOpActivityComp::clearUseBonusCountByGm(OpActivityComp);
      std::string::operator=(ret_msg, "fresh succ");
    }
    return 0;
  }
  else
  {
    std::string::operator=(ret_msg, "param not enough");
    return -1;
  }
};

// Line 13536: range 0000000017D7AFA8-0000000017D7B04A
void __cdecl procArenaChallengeRegister::procArenaChallengeRegister(procArenaChallengeRegister *const this)
{
  std::function<int(GmContext&,const std::vector<std::string>&,std::string&)> *v1; // rax
  std::allocator<char> __a; // [rsp+1Fh] [rbp-31h] BYREF
  std::string __k; // [rsp+20h] [rbp-30h] BYREF

  std::allocator<char>::allocator(&__a);
  std::string::basic_string<std::allocator<char>>(&__k, "ARENA_CHALLENGE", &__a);
  v1 = std::unordered_map<std::string,std::function<int ()(GmContext &,std::vector<std::string> const&,std::string&)>>::operator[](
         &GmUtils::op_func_map[abi:cxx11],
         &__k);
  std::function<int ()(GmContext &,std::vector<std::string> const&,std::string&)>::operator=<int (&)(GmContext &,std::vector<std::string> const&,std::string&)>(
    v1,
    (int (*)(GmContext *, const std::vector<std::string> *, std::string *))procArenaChallenge);
  std::string::~string(&__k);
  std::allocator<char>::~allocator(&__a);
};

// Line 13537: range 0000000017C2D8E0-0000000017C2DB55
int32_t __cdecl procArenaChallenge(GmContext *context, const std::vector<std::string> *param_vec, std::string *ret_msg)
{
  unsigned __int64 v3; // rbx
  __int64 v4; // rax
  _DWORD *v5; // r12
  const std::string *v6; // rax
  const std::string *v7; // rax
  int32_t v9; // r14d
  ArenaChallengeActivity *v10; // rax
  int32_t result; // eax
  char v13[144]; // [rsp+20h] [rbp-90h] BYREF

  v3 = (unsigned __int64)v13;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_1(96LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "2 48 4 17 world_level:13540 64 16 18 activity_ptr:13546";
  *(_QWORD *)(v3 + 16) = procArenaChallenge;
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = -234556943;
  v5[536862722] = -202178560;
  v6 = std::vector<std::string>::operator[](param_vec, 0LL);
  if ( std::operator==<char>(v6, "WORLD_LEVEL") )
  {
    *(_DWORD *)(v3 + 48) = 0;
    if ( std::vector<std::string>::size(param_vec) <= 1
      || (v7 = std::vector<std::string>::operator[](param_vec, 1uLL),
          common::tools::StringUtils::strToNum<unsigned int>(v7, (unsigned int *)(v3 + 48), 1)) )
    {
      std::string::operator=(ret_msg, "invalid world_level");
      v9 = -1;
    }
    else
    {
      if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
        __asan_report_load8();
      Player::getActivityComp(context->player);
      PlayerActivityComp::findOpenningActivity<ArenaChallengeActivity>((PlayerActivityComp *const)(v3 + 64));
      if ( std::operator==<ArenaChallengeActivity>(0LL, (const std::shared_ptr<ArenaChallengeActivity> *)(v3 + 64)) )
      {
        std::string::operator=(ret_msg, "activity not open");
        v9 = -1;
      }
      else
      {
        v10 = std::__shared_ptr_access<ArenaChallengeActivity,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<ArenaChallengeActivity,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 64));
        ArenaChallengeActivity::setRecordedWorldLevelByGm(v10, *(_DWORD *)(v3 + 48));
        v9 = 0;
      }
      std::shared_ptr<ArenaChallengeActivity>::~shared_ptr((std::shared_ptr<ArenaChallengeActivity> *const)(v3 + 64));
    }
  }
  else
  {
    v9 = -1;
  }
  result = v9;
  if ( v13 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8008) = 0;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8008) = -168430091;
  }
  return result;
};

// Line 13558: range 0000000017D7B04C-0000000017D7B0EE
void __cdecl procHomeRegister::procHomeRegister(procHomeRegister *const this)
{
  std::function<int(GmContext&,const std::vector<std::string>&,std::string&)> *v1; // rax
  std::allocator<char> __a; // [rsp+1Fh] [rbp-31h] BYREF
  std::string __k; // [rsp+20h] [rbp-30h] BYREF

  std::allocator<char>::allocator(&__a);
  std::string::basic_string<std::allocator<char>>(&__k, "HOME", &__a);
  v1 = std::unordered_map<std::string,std::function<int ()(GmContext &,std::vector<std::string> const&,std::string&)>>::operator[](
         &GmUtils::op_func_map[abi:cxx11],
         &__k);
  std::function<int ()(GmContext &,std::vector<std::string> const&,std::string&)>::operator=<int (&)(GmContext &,std::vector<std::string> const&,std::string&)>(
    v1,
    (int (*)(GmContext *, const std::vector<std::string> *, std::string *))procHome);
  std::string::~string(&__k);
  std::allocator<char>::~allocator(&__a);
};

// Line 13559: range 0000000017C2DB56-0000000017C2F2D0
int32_t __cdecl procHome(GmContext *context, const std::vector<std::string> *param_vec, std::string *ret_msg)
{
  unsigned __int64 v3; // r14
  __int64 v4; // rax
  _DWORD *v5; // r13
  int32_t v6; // r12d
  std::__shared_ptr_access<PlayerHandlerBase,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v7; // rax
  PlayerHomeHandler *v8; // rax
  const std::string *v9; // rax
  const std::string *v10; // rax
  PlayerHomeComp *HomeComp; // rax
  const std::string *v12; // rax
  PlayerHomeComp *v13; // rax
  PlayerBasicComp *BasicComp; // r12
  uint64_t NowMs; // rax
  const std::string *v16; // rax
  const std::string *v17; // rax
  PlayerHomeComp *v18; // r15
  uint32_t v19; // r12d
  uint32_t Uid; // eax
  const std::string *v21; // rax
  Home *v22; // rax
  const std::string *v23; // rax
  Home *v24; // rax
  const std::string *v25; // rax
  Home *v26; // rax
  HomeSceneComp *SceneComp; // rax
  unsigned __int64 v28; // rdx
  const std::string *v29; // rax
  const std::string *v30; // rax
  const std::string *v31; // rax
  const std::string *v32; // rax
  Home *v33; // rax
  HomeBasicComp *v34; // rax
  const std::string *v35; // rax
  const std::string *v36; // rax
  Home *v37; // rax
  HomeBasicComp *v38; // rax
  const std::string *v39; // rax
  const std::string *v40; // rax
  const std::string *v41; // rax
  const std::string *v42; // rax
  Home *v43; // rax
  HomeSceneComp *v44; // rax
  Home *v45; // rcx
  const std::string *v46; // rax
  std::__shared_ptr_access<Home,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v47; // rax
  Home *v48; // rax
  HomeSceneComp *v49; // rax
  unsigned __int64 v50; // rax
  Home *v51; // rax
  GameserverService *v52; // rax
  GameThreadLocal *GameThreadLocal; // rax
  const std::string *v54; // rax
  Home *v55; // rax
  Home *v56; // rax
  const std::string *v57; // rax
  const std::string *v58; // rax
  const std::string *v59; // rax
  const std::string *v60; // rax
  SceneBlockGroupComp *BlockGroupComp; // rax
  const std::string *v62; // rax
  const std::string *v63; // rax
  const std::string *v64; // rax
  SceneBlockGroupComp *v65; // rax
  const std::string *v66; // rax
  const std::string *v67; // rax
  float *v68; // r8
  float *v69; // r9
  SceneBlockGroupComp *v70; // rax
  const std::string *v71; // rax
  const std::string *v72; // rax
  SceneBlockGroupComp *v73; // rax
  const std::string *v74; // rax
  Home *v75; // rax
  int32_t result; // eax
  float *v77; // [rsp-8h] [rbp-1D8h]
  float *v78; // [rsp+0h] [rbp-1D0h]
  std::string *ret_msga; // [rsp+8h] [rbp-1C8h]
  GmContext *contexta; // [rsp+18h] [rbp-1B8h]
  uint32_t home_uid; // [rsp+24h] [rbp-1ACh]
  PlayerHomeHandler *handler_ptr; // [rsp+28h] [rbp-1A8h]
  HomeWorld *home_world; // [rsp+38h] [rbp-198h]
  float v84[100]; // [rsp+40h] [rbp-190h] BYREF

  ret_msga = ret_msg;
  v3 = (unsigned __int64)v84;
  v78 = v84;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_3(352LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "9 48 4 15 module_id:13696 64 4 14 group_id:13782 80 4 14 group_id:13826 96 12 9 pos:13763 128 12"
                        " 9 rot:13764 160 16 14 base_ptr:13566 192 16 14 home_ptr:13617 224 24 29 virtual_center_trasform"
                        ":13809 288 32 20 override_param:13770";
  *(_QWORD *)(v3 + 16) = procHome;
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = -234556943;
  v5[536862722] = -234556924;
  v5[536862723] = -219020288;
  v5[536862724] = -219020288;
  v5[536862725] = -219021312;
  v5[536862726] = -219021312;
  v5[536862727] = -234881024;
  v5[536862728] = -218959118;
  v5[536862730] = -202116109;
  if ( !std::vector<std::string>::size(param_vec) )
  {
    std::string::operator=(ret_msga, "param not enough");
    v6 = -1;
    goto LABEL_129;
  }
  if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
    __asan_report_load8();
  Player::getPlayerHandlerPtr((Player *const)(v3 + 160), (uint32_t)context->player);
  if ( !std::operator==<PlayerHandlerBase>((const std::shared_ptr<PlayerHandlerBase> *)(v3 + 160), 0LL) )
  {
    v7 = std::__shared_ptr_access<PlayerHandlerBase,(__gnu_cxx::_Lock_policy)2,false,false>::operator*((const std::__shared_ptr_access<PlayerHandlerBase,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 160));
    if ( v7 )
      v8 = (PlayerHomeHandler *)__dynamic_cast(
                                  v7,
                                  (const struct __class_type_info *)&`typeinfo for'PlayerHandlerBase,
                                  (const struct __class_type_info *)&`typeinfo for'PlayerHomeHandler,
                                  0LL);
    else
      v8 = 0LL;
    handler_ptr = v8;
    if ( !v8 )
    {
      common::milog::MiLogStream::create(
        (common::milog::MiLogStream *)(v3 + 288),
        &common::milog::MiLogDefault::default_log_obj_,
        1u,
        "./src/player/gm/player_gm_comp.cpp",
        "procHome",
        13575);
      common::milog::MiLogStream::operator<<<char [32],(char *[32])0>(
        (common::milog::MiLogStream *const)(v3 + 288),
        (const char (*)[32])" cast PlayerHomeHandler failed ");
      common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v3 + 288));
      v6 = -1;
      goto LABEL_128;
    }
    v9 = std::vector<std::string>::operator[](param_vec, 0LL);
    if ( std::operator==<char>(v9, "UNLOCK_MODULE") )
    {
      if ( std::vector<std::string>::size(param_vec) <= 1 )
      {
LABEL_17:
        std::string::operator=(ret_msga, "param not enough");
        v6 = -1;
        goto LABEL_128;
      }
      *(_DWORD *)(v3 + 80) = 0;
      v10 = std::vector<std::string>::operator[](param_vec, 1uLL);
      if ( !common::tools::StringUtils::strToNum<unsigned int>(v10, (unsigned int *)(v3 + 80), 1) )
      {
        if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
          __asan_report_load8();
        HomeComp = Player::getHomeComp(context->player);
        v6 = PlayerHomeComp::unlockModule(HomeComp, *(_DWORD *)(v3 + 80), 0);
        goto LABEL_128;
      }
LABEL_19:
      std::string::operator=(ret_msga, "strToNum failed");
      v6 = -1;
      goto LABEL_128;
    }
    v12 = std::vector<std::string>::operator[](param_vec, 0LL);
    if ( std::operator==<char>(v12, "RESET_PRIOR") )
    {
      if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
        __asan_report_load8();
      v13 = Player::getHomeComp(context->player);
      PlayerHomeComp::clearPriorCheckTime(v13);
      if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
        __asan_report_load8();
      BasicComp = Player::getBasicComp(context->player);
      NowMs = common::tools::TimeUtils::getNowMs();
      PlayerBasicComp::notifyPlayerBriefData(BasicComp, NowMs);
      v6 = 0;
      goto LABEL_128;
    }
    v16 = std::vector<std::string>::operator[](param_vec, 0LL);
    if ( std::operator==<char>(v16, "TRANSFER") )
    {
      if ( std::vector<std::string>::size(param_vec) <= 1 )
        goto LABEL_17;
      *(_DWORD *)(v3 + 80) = 0;
      v17 = std::vector<std::string>::operator[](param_vec, 1uLL);
      if ( !common::tools::StringUtils::strToNum<unsigned int>(v17, (unsigned int *)(v3 + 80), 1) )
      {
        if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
          __asan_report_load8();
        v18 = Player::getHomeComp(context->player);
        v19 = *(_DWORD *)(v3 + 80);
        if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
          __asan_report_load8();
        Uid = Player::getUid(context->player);
        v6 = PlayerHomeComp::handleTryEnterHomeReq(v18, Uid, v19, 0);
        goto LABEL_128;
      }
      goto LABEL_19;
    }
    if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
      __asan_report_load8();
    Player::getHomeComp(context->player);
    PlayerHomeComp::findMyHome((const PlayerHomeComp *const)(v3 + 192));
    if ( std::operator==<Home>((const std::shared_ptr<Home> *)(v3 + 192), 0LL) )
    {
      common::milog::MiLogStream::create(
        (common::milog::MiLogStream *)(v3 + 288),
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/player/gm/player_gm_comp.cpp",
        "procHome",
        13620);
      common::milog::MiLogStream::operator<<<char [17],(char *[17])0>(
        (common::milog::MiLogStream *const)(v3 + 288),
        (const char (*)[17])"home_ptr is null");
      common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v3 + 288));
      v6 = -1;
LABEL_127:
      std::shared_ptr<Home>::~shared_ptr((std::shared_ptr<Home> *const)(v3 + 192));
      goto LABEL_128;
    }
    v21 = std::vector<std::string>::operator[](param_vec, 0LL);
    if ( std::operator==<char>(v21, "SAVE") )
    {
      v22 = std::__shared_ptr_access<Home,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Home,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 192));
      Home::saveToDb(v22);
      v6 = 0;
      goto LABEL_127;
    }
    v23 = std::vector<std::string>::operator[](param_vec, 0LL);
    if ( std::operator==<char>(v23, "RESET") )
    {
      v24 = std::__shared_ptr_access<Home,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Home,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 192));
      Home::resetByGm(v24);
      v6 = 0;
      goto LABEL_127;
    }
    v25 = std::vector<std::string>::operator[](param_vec, 0LL);
    if ( std::operator==<char>(v25, "RESET_SCENE_COMP") )
    {
      v26 = std::__shared_ptr_access<Home,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Home,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 192));
      SceneComp = Home::getSceneComp(v26);
      if ( *(_BYTE *)(((unsigned __int64)SceneComp >> 3) + 0x7FFF8000) )
        __asan_report_load8();
      v28 = (unsigned __int64)(SceneComp->_vptr_HomeCompBase + 12);
      if ( *(_BYTE *)((v28 >> 3) + 0x7FFF8000) )
        __asan_report_load8();
      (*(void (__fastcall **)(HomeSceneComp *))v28)(SceneComp);
      v6 = 0;
      goto LABEL_127;
    }
    v29 = std::vector<std::string>::operator[](param_vec, 0LL);
    if ( std::operator==<char>(v29, "CHANGE_MODULE") )
    {
      if ( std::vector<std::string>::size(param_vec) <= 1 )
        goto LABEL_117;
      *(_DWORD *)(v3 + 80) = 0;
      v30 = std::vector<std::string>::operator[](param_vec, 1uLL);
      if ( !common::tools::StringUtils::strToNum<unsigned int>(v30, (unsigned int *)(v3 + 80), 1) )
      {
        proto::HomeChangeModuleReq::HomeChangeModuleReq((proto::HomeChangeModuleReq *const)(v3 + 224));
        proto::HomeChangeModuleRsp::HomeChangeModuleRsp((proto::HomeChangeModuleRsp *const)(v3 + 288));
        proto::HomeChangeModuleReq::set_target_module_id(
          (proto::HomeChangeModuleReq *const)(v3 + 224),
          *(_DWORD *)(v3 + 80));
        v6 = PlayerHomeHandler::onHomeChangeModuleReq(
               handler_ptr,
               (const proto::HomeChangeModuleReq *)(v3 + 224),
               (proto::HomeChangeModuleRsp *)(v3 + 288));
        proto::HomeChangeModuleRsp::~HomeChangeModuleRsp((proto::HomeChangeModuleRsp *const)(v3 + 288));
        proto::HomeChangeModuleReq::~HomeChangeModuleReq((proto::HomeChangeModuleReq *const)(v3 + 224));
        goto LABEL_127;
      }
    }
    else
    {
      v31 = std::vector<std::string>::operator[](param_vec, 0LL);
      if ( std::operator==<char>(v31, "LEVEL") )
      {
        if ( std::vector<std::string>::size(param_vec) <= 1 )
          goto LABEL_117;
        *(_DWORD *)(v3 + 80) = 0;
        v32 = std::vector<std::string>::operator[](param_vec, 1uLL);
        if ( !common::tools::StringUtils::strToNum<unsigned int>(v32, (unsigned int *)(v3 + 80), 1) )
        {
          v33 = std::__shared_ptr_access<Home,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Home,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 192));
          v34 = Home::getBasicComp(v33);
          v6 = HomeBasicComp::setLevelByGm(v34, *(_DWORD *)(v3 + 80));
          goto LABEL_127;
        }
      }
      else
      {
        v35 = std::vector<std::string>::operator[](param_vec, 0LL);
        if ( std::operator==<char>(v35, "ADD_EXP") )
        {
          if ( std::vector<std::string>::size(param_vec) <= 1 )
            goto LABEL_117;
          *(_DWORD *)(v3 + 80) = 0;
          v36 = std::vector<std::string>::operator[](param_vec, 1uLL);
          if ( !common::tools::StringUtils::strToNum<unsigned int>(v36, (unsigned int *)(v3 + 80), 1) )
          {
            v37 = std::__shared_ptr_access<Home,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Home,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 192));
            v38 = Home::getBasicComp(v37);
            HomeBasicComp::addExp(v38, *(unsigned int *)(v3 + 80), HOME_ADD_EXP_REASON_GM, 0);
            v6 = 0;
            goto LABEL_127;
          }
        }
        else
        {
          v39 = std::vector<std::string>::operator[](param_vec, 0LL);
          if ( std::operator==<char>(v39, "COMFORT") )
          {
            if ( std::vector<std::string>::size(param_vec) <= 3 )
              goto LABEL_117;
            *(_DWORD *)(v3 + 48) = 0;
            v40 = std::vector<std::string>::operator[](param_vec, 1uLL);
            if ( !common::tools::StringUtils::strToNum<unsigned int>(v40, (unsigned int *)(v3 + 48), 1) )
            {
              *(_DWORD *)(v3 + 64) = 0;
              v41 = std::vector<std::string>::operator[](param_vec, 2uLL);
              if ( !common::tools::StringUtils::strToNum<unsigned int>(v41, (unsigned int *)(v3 + 64), 1) )
              {
                *(_DWORD *)(v3 + 80) = 0;
                v42 = std::vector<std::string>::operator[](param_vec, 3uLL);
                if ( !common::tools::StringUtils::strToNum<unsigned int>(v42, (unsigned int *)(v3 + 80), 1) )
                {
                  v43 = std::__shared_ptr_access<Home,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Home,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 192));
                  v44 = Home::getSceneComp(v43);
                  if ( HomeSceneComp::setComfortValueByGm(
                         v44,
                         *(_DWORD *)(v3 + 48),
                         *(_DWORD *)(v3 + 64),
                         *(_DWORD *)(v3 + 80)) )
                  {
                    std::string::operator=(ret_msga, "setComfortValueByGm failed");
                    v6 = -1;
                  }
                  else
                  {
                    v45 = std::__shared_ptr_access<Home,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Home,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 192));
                    if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
                      __asan_report_load8();
                    Home::notifyHomeComfortInfo(v45, context->player);
                    v6 = 0;
                  }
                  goto LABEL_127;
                }
              }
            }
          }
          else
          {
            v46 = std::vector<std::string>::operator[](param_vec, 0LL);
            if ( std::operator==<char>(v46, "STOP") )
            {
              v47 = std::__shared_ptr_access<Home,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Home,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 192));
              home_uid = Home::getHomeUid(v47);
              v48 = std::__shared_ptr_access<Home,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Home,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 192));
              v49 = Home::getSceneComp(v48);
              home_world = HomeSceneComp::getHomeWorld(v49);
              if ( *(_BYTE *)(((unsigned __int64)home_world >> 3) + 0x7FFF8000) )
                __asan_report_load8();
              v50 = (unsigned __int64)(home_world->_vptr_World + 15);
              if ( *(_BYTE *)((v50 >> 3) + 0x7FFF8000) )
                __asan_report_load8();
              (*(void (__fastcall **)(HomeWorld *, __int64, __int64))v50)(home_world, 1LL, 1LL);
              v51 = std::__shared_ptr_access<Home,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Home,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 192));
              Home::stop(v51);
              v52 = ServiceBox::findService<GameserverService>();
              GameThreadLocal = GameserverService::getGameThreadLocal(v52);
              HomeMgr::mvOnlineHomeToSaveWait(&GameThreadLocal->home_mgr, home_uid);
              v6 = 0;
              goto LABEL_127;
            }
            v54 = std::vector<std::string>::operator[](param_vec, 0LL);
            if ( std::operator==<char>(v54, "CLEAR_CD") )
            {
              v55 = std::__shared_ptr_access<Home,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Home,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 192));
              Home::onGMClearUpdateArrangementCD(v55);
              v56 = std::__shared_ptr_access<Home,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Home,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 192));
              Home::onGMClearUpdateEditModeCD(v56);
              v6 = 0;
              goto LABEL_127;
            }
            v57 = std::vector<std::string>::operator[](param_vec, 0LL);
            if ( !std::operator==<char>(v57, "GROUP") )
            {
              v74 = std::vector<std::string>::operator[](param_vec, 0LL);
              if ( std::operator==<char>(v74, "OFF_LOAD_LIMIT") )
              {
                v75 = std::__shared_ptr_access<Home,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Home,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 192));
                Home::onGMTurnOffLoadLimit(v75);
                v6 = 0;
              }
              else
              {
                v6 = -1;
              }
              goto LABEL_127;
            }
            if ( std::vector<std::string>::size(param_vec) <= 1 )
            {
LABEL_117:
              std::string::operator=(ret_msga, "param not enough");
              v6 = -1;
              goto LABEL_127;
            }
            v58 = std::vector<std::string>::operator[](param_vec, 1uLL);
            if ( std::operator==<char>(v58, "MOVE_ENTITY") )
            {
              if ( std::vector<std::string>::size(param_vec) <= 9 )
                goto LABEL_117;
              *(_DWORD *)(v3 + 64) = 0;
              v59 = std::vector<std::string>::operator[](param_vec, 2uLL);
              if ( !common::tools::StringUtils::strToNum<unsigned int>(v59, (unsigned int *)(v3 + 64), 1) )
              {
                *(_DWORD *)(v3 + 80) = 0;
                v60 = std::vector<std::string>::operator[](param_vec, 3uLL);
                if ( !common::tools::StringUtils::strToNum<unsigned int>(v60, (unsigned int *)(v3 + 80), 1) )
                {
                  Vector3::Vector3((Vector3 *const)(v3 + 96), 0.0, 0.0, 0.0);
                  Vector3::Vector3((Vector3 *const)(v3 + 128), 0.0, 0.0, 0.0);
                  if ( !common::tools::StringUtils::strVecToNum<4u,float,float &,float &,float &,float &,float &>(
                          param_vec,
                          (float *)(v3 + 96),
                          (float *)(v3 + 100),
                          (float *)(v3 + 104),
                          (float *)(v3 + 128),
                          (float *)(v3 + 132),
                          (float *)(v3 + 136),
                          v77,
                          v84,
                          (float *)ret_msga,
                          (float *)param_vec,
                          (float *)context) )
                  {
                    *(_QWORD *)(v3 + 288) = 0LL;
                    *(_QWORD *)(v3 + 296) = 0LL;
                    *(_QWORD *)(v3 + 304) = 0LL;
                    *(_QWORD *)(v3 + 312) = 0LL;
                    std::optional<Vector3>::operator=<Vector3&>(
                      (std::optional<Vector3> *const)(v3 + 288),
                      (Vector3 *)(v3 + 96));
                    std::optional<Vector3>::operator=<Vector3&>(
                      (std::optional<Vector3> *const)(v3 + 304),
                      (Vector3 *)(v3 + 128));
                    if ( *(_BYTE *)(((unsigned __int64)&contexta->scene >> 3) + 0x7FFF8000) )
                      __asan_report_load8();
                    BlockGroupComp = Scene::getBlockGroupComp(contexta->scene);
                    v6 = SceneBlockGroupComp::setGroupEntityParamByGm(
                           BlockGroupComp,
                           *(_DWORD *)(v3 + 64),
                           *(_DWORD *)(v3 + 80),
                           (const GroupEntityOverrideParam *)(v3 + 288));
                    goto LABEL_127;
                  }
                }
              }
            }
            else
            {
              v62 = std::vector<std::string>::operator[](param_vec, 1uLL);
              if ( std::operator==<char>(v62, "RESET_ENTITY") )
              {
                if ( std::vector<std::string>::size(param_vec) <= 3 )
                  goto LABEL_117;
                *(_DWORD *)(v3 + 64) = 0;
                v63 = std::vector<std::string>::operator[](param_vec, 2uLL);
                if ( !common::tools::StringUtils::strToNum<unsigned int>(v63, (unsigned int *)(v3 + 64), 1) )
                {
                  *(_DWORD *)(v3 + 80) = 0;
                  v64 = std::vector<std::string>::operator[](param_vec, 3uLL);
                  if ( !common::tools::StringUtils::strToNum<unsigned int>(v64, (unsigned int *)(v3 + 80), 1) )
                  {
                    if ( *(_BYTE *)(((unsigned __int64)&context->scene >> 3) + 0x7FFF8000) )
                      __asan_report_load8();
                    v65 = Scene::getBlockGroupComp(context->scene);
                    v6 = SceneBlockGroupComp::removeGroupEntityParamByGm(
                           v65,
                           *(_DWORD *)(v3 + 64),
                           *(_DWORD *)(v3 + 80));
                    goto LABEL_127;
                  }
                }
              }
              else
              {
                v66 = std::vector<std::string>::operator[](param_vec, 1uLL);
                if ( std::operator==<char>(v66, "MOVE_GROUP") )
                {
                  if ( std::vector<std::string>::size(param_vec) <= 5 )
                    goto LABEL_117;
                  *(_DWORD *)(v3 + 80) = 0;
                  v67 = std::vector<std::string>::operator[](param_vec, 2uLL);
                  if ( !common::tools::StringUtils::strToNum<unsigned int>(v67, (unsigned int *)(v3 + 80), 1) )
                  {
                    Transform::Transform((Transform *const)(v3 + 224));
                    if ( !common::tools::StringUtils::strVecToNum<3u,float,float &,float &>(
                            param_vec,
                            (float *)(v3 + 224),
                            (float *)(v3 + 228),
                            (float *)(v3 + 232),
                            v68,
                            v69) )
                    {
                      if ( *(_BYTE *)(((unsigned __int64)&context->scene >> 3) + 0x7FFF8000) )
                        __asan_report_load8();
                      v70 = Scene::getBlockGroupComp(context->scene);
                      v6 = SceneBlockGroupComp::setGroupVirtualCenterByGm(
                             v70,
                             *(_DWORD *)(v3 + 80),
                             (const Transform *)(v3 + 224));
                      goto LABEL_127;
                    }
                  }
                }
                else
                {
                  v71 = std::vector<std::string>::operator[](param_vec, 1uLL);
                  if ( !std::operator==<char>(v71, "RESET_GROUP") )
                  {
                    v6 = 0;
                    goto LABEL_127;
                  }
                  if ( std::vector<std::string>::size(param_vec) <= 2 )
                    goto LABEL_117;
                  *(_DWORD *)(v3 + 80) = 0;
                  v72 = std::vector<std::string>::operator[](param_vec, 2uLL);
                  if ( !common::tools::StringUtils::strToNum<unsigned int>(v72, (unsigned int *)(v3 + 80), 1) )
                  {
                    if ( *(_BYTE *)(((unsigned __int64)&context->scene >> 3) + 0x7FFF8000) )
                      __asan_report_load8();
                    v73 = Scene::getBlockGroupComp(context->scene);
                    v6 = SceneBlockGroupComp::resetGroupOverrideParamByGm(v73, *(_DWORD *)(v3 + 80));
                    goto LABEL_127;
                  }
                }
              }
            }
          }
        }
      }
    }
    std::string::operator=(ret_msga, "strToNum failed");
    v6 = -1;
    goto LABEL_127;
  }
  common::milog::MiLogStream::create(
    (common::milog::MiLogStream *)(v3 + 288),
    &common::milog::MiLogDefault::default_log_obj_,
    1u,
    "./src/player/gm/player_gm_comp.cpp",
    "procHome",
    13569);
  common::milog::MiLogStream::operator<<<char [21],(char *[21])0>(
    (common::milog::MiLogStream *const)(v3 + 288),
    (const char (*)[21])" get handler failed ");
  common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v3 + 288));
  v6 = -1;
LABEL_128:
  std::shared_ptr<PlayerHandlerBase>::~shared_ptr((std::shared_ptr<PlayerHandlerBase> *const)(v3 + 160));
LABEL_129:
  result = v6;
  if ( v78 == (float *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8010) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8018) = 0LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8020) = 0;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8028) = 0;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8020) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8028) = -168430091;
  }
  return result;
};

// Line 13844: range 0000000017D7B0F0-0000000017D7B192
void __cdecl procFurnitureRegister::procFurnitureRegister(procFurnitureRegister *const this)
{
  std::function<int(GmContext&,const std::vector<std::string>&,std::string&)> *v1; // rax
  std::allocator<char> __a; // [rsp+1Fh] [rbp-31h] BYREF
  std::string __k; // [rsp+20h] [rbp-30h] BYREF

  std::allocator<char>::allocator(&__a);
  std::string::basic_string<std::allocator<char>>(&__k, "FURNITURE", &__a);
  v1 = std::unordered_map<std::string,std::function<int ()(GmContext &,std::vector<std::string> const&,std::string&)>>::operator[](
         &GmUtils::op_func_map[abi:cxx11],
         &__k);
  std::function<int ()(GmContext &,std::vector<std::string> const&,std::string&)>::operator=<int (&)(GmContext &,std::vector<std::string> const&,std::string&)>(
    v1,
    (int (*)(GmContext *, const std::vector<std::string> *, std::string *))procFurniture);
  std::string::~string(&__k);
  std::allocator<char>::~allocator(&__a);
};

// Line 13845: range 0000000017C2F2D1-0000000017C2FEAD
int32_t __cdecl procFurniture(GmContext *context, const std::vector<std::string> *param_vec, std::string *ret_msg)
{
  unsigned __int64 v3; // r13
  __int64 v4; // rax
  _DWORD *v5; // r12
  int32_t v6; // r14d
  const std::string *v7; // rax
  const std::string *v8; // rax
  uint32_t *p_furniture_item_id; // rax
  const std::string *v10; // rax
  common::milog::MiLogStream *v11; // rdx
  PlayerHomeComp *HomeComp; // rax
  const std::string *v13; // rax
  const std::string *v14; // rax
  PlayerHomeComp *v15; // rax
  const std::string *v16; // rax
  common::milog::MiLogStream *v17; // rdx
  PlayerHomeComp *v18; // rax
  const std::string *v19; // rax
  const std::string *v20; // rax
  const std::string *v21; // rax
  PlayerItemComp *ItemComp; // rax
  int32_t result; // eax
  std::unordered_map<unsigned int,data::FurnitureMakeExcelConfig>::const_iterator __for_begin; // [rsp+20h] [rbp-190h] BYREF
  std::unordered_map<unsigned int,data::FurnitureMakeExcelConfig>::const_iterator __for_end; // [rsp+28h] [rbp-188h] BYREF
  const HomeWorldExcelConfigMgr *home_config_mgr; // [rsp+30h] [rbp-180h]
  const std::unordered_map<unsigned int,data::HomeWorldFurnitureExcelConfig> *__for_range_0; // [rsp+38h] [rbp-178h]
  const std::pair<unsigned int const,data::HomeWorldFurnitureExcelConfig> *v28; // [rsp+40h] [rbp-170h]
  std::tuple_element<0,const std::pair<unsigned int const,data::HomeWorldFurnitureExcelConfig> >::type *item_id; // [rsp+48h] [rbp-168h]
  std::tuple_element<1,const std::pair<unsigned int const,data::HomeWorldFurnitureExcelConfig> >::type *item_config; // [rsp+50h] [rbp-160h]
  PlayerHomeComp *home_comp; // [rsp+58h] [rbp-158h]
  const std::unordered_map<unsigned int,data::FurnitureMakeExcelConfig> *__for_range; // [rsp+60h] [rbp-150h]
  const std::pair<unsigned int const,data::FurnitureMakeExcelConfig> *v33; // [rsp+68h] [rbp-148h]
  std::tuple_element<0,const std::pair<unsigned int const,data::FurnitureMakeExcelConfig> >::type *make_id; // [rsp+70h] [rbp-140h]
  std::tuple_element<1,const std::pair<unsigned int const,data::FurnitureMakeExcelConfig> >::type *make_config; // [rsp+78h] [rbp-138h]
  common::milog::MiLogStream v36; // [rsp+80h] [rbp-130h] BYREF
  char v37[272]; // [rsp+A0h] [rbp-110h] BYREF

  v3 = (unsigned __int64)v37;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_2(224LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "4 48 4 11 count:13907 64 16 16 item_param:13926 96 24 20 item_param_vec:13919 160 24 19 action_reason:13931";
  *(_QWORD *)(v3 + 16) = procFurniture;
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = -234556943;
  v5[536862722] = -219021312;
  v5[536862723] = -234881024;
  v5[536862724] = -218959118;
  v5[536862725] = -218103808;
  v5[536862726] = -202116109;
  if ( std::vector<std::string>::empty(param_vec) )
  {
    common::milog::MiLogStream::create(
      &v36,
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/player/gm/player_gm_comp.cpp",
      "procFurniture",
      13848);
    common::milog::MiLogStream::operator<<<char [17],(char *[17])0>(&v36, (const char (*)[17])"param not enough");
    common::milog::MiLogStream::~MiLogStream(&v36);
    v6 = -1;
    goto LABEL_55;
  }
  v7 = std::vector<std::string>::operator[](param_vec, 0LL);
  if ( std::operator==<char>(v7, "UNLOCK") )
  {
    if ( std::vector<std::string>::size(param_vec) <= 1 )
    {
      common::milog::MiLogStream::create(
        &v36,
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/player/gm/player_gm_comp.cpp",
        "procFurniture",
        13856);
      common::milog::MiLogStream::operator<<<char [17],(char *[17])0>(&v36, (const char (*)[17])"param not enough");
      common::milog::MiLogStream::~MiLogStream(&v36);
      v6 = -1;
      goto LABEL_55;
    }
    v8 = std::vector<std::string>::operator[](param_vec, 1uLL);
    if ( std::operator==<char>(v8, _f.gap0) )
    {
      if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
        __asan_report_load8();
      home_comp = Player::getHomeComp(context->player);
      ServiceBox::findService<GameserverService>();
      GameserverService::getConfig((GameserverService *const)(v3 + 64));
      __for_range = &std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 64))->design_config.txt_config_mgr.home_config_mgr.furniture_make_excel_config_map;
      std::shared_ptr<Config>::~shared_ptr((std::shared_ptr<Config> *const)(v3 + 64));
      __for_begin._M_cur = std::unordered_map<unsigned int,data::FurnitureMakeExcelConfig>::begin(__for_range)._M_cur;
      __for_end._M_cur = std::unordered_map<unsigned int,data::FurnitureMakeExcelConfig>::end(__for_range)._M_cur;
      while ( std::__detail::operator!=<std::pair<unsigned int const,data::FurnitureMakeExcelConfig>,false>(
                &__for_begin,
                &__for_end) )
      {
        v33 = std::__detail::_Node_const_iterator<std::pair<unsigned int const,data::FurnitureMakeExcelConfig>,false,false>::operator*(&__for_begin);
        make_id = std::get<0ul,unsigned int const,data::FurnitureMakeExcelConfig>(v33);
        make_config = (std::tuple_element<1,const std::pair<unsigned int const,data::FurnitureMakeExcelConfig> >::type *)std::get<1ul,unsigned int const,data::FurnitureMakeExcelConfig>(v33);
        p_furniture_item_id = &make_config->furniture_item_id;
        if ( *(_BYTE *)(((unsigned __int64)p_furniture_item_id >> 3) + 0x7FFF8000) != 0
          && (char)(((unsigned __int8)p_furniture_item_id & 7) + 3) >= *(_BYTE *)(((unsigned __int64)p_furniture_item_id >> 3)
                                                                                + 0x7FFF8000) )
        {
          __asan_report_load4(p_furniture_item_id);
        }
        PlayerHomeComp::unlockFurnitureFormula(home_comp, make_config->furniture_item_id);
        std::__detail::_Node_const_iterator<std::pair<unsigned int const,data::FurnitureMakeExcelConfig>,false,false>::operator++(&__for_begin);
      }
    }
    else
    {
      *(_DWORD *)(v3 + 48) = 0;
      v10 = std::vector<std::string>::operator[](param_vec, 1uLL);
      if ( common::tools::StringUtils::strToNum<unsigned int>(v10, (unsigned int *)(v3 + 48), 1) )
      {
        common::milog::MiLogStream::create(
          &v36,
          &common::milog::MiLogDefault::default_log_obj_,
          3u,
          "./src/player/gm/player_gm_comp.cpp",
          "procFurniture",
          13872);
        v11 = common::milog::MiLogStream::operator<<<char [15],(char *[15])0>(
                &v36,
                (const char (*)[15])"invalid param:");
        common::milog::MiLogStream::operator<<<std::string>(v11, param_vec);
        common::milog::MiLogStream::~MiLogStream(&v36);
        v6 = -1;
        goto LABEL_55;
      }
      if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
        __asan_report_load8();
      HomeComp = Player::getHomeComp(context->player);
      PlayerHomeComp::unlockFurnitureFormula(HomeComp, *(_DWORD *)(v3 + 48));
    }
    v6 = 0;
  }
  else
  {
    v13 = std::vector<std::string>::operator[](param_vec, 0LL);
    if ( std::operator==<char>(v13, "UNLOCK_SUITE") )
    {
      if ( std::vector<std::string>::size(param_vec) <= 1 )
      {
        common::milog::MiLogStream::create(
          &v36,
          &common::milog::MiLogDefault::default_log_obj_,
          3u,
          "./src/player/gm/player_gm_comp.cpp",
          "procFurniture",
          13884);
        common::milog::MiLogStream::operator<<<char [17],(char *[17])0>(&v36, (const char (*)[17])"param not enough");
        common::milog::MiLogStream::~MiLogStream(&v36);
        v6 = -1;
        goto LABEL_55;
      }
      v14 = std::vector<std::string>::operator[](param_vec, 1uLL);
      if ( std::operator==<char>(v14, _f.gap0) )
      {
        if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
          __asan_report_load8();
        v15 = Player::getHomeComp(context->player);
        PlayerHomeComp::unlockAllFurnitureSuiteByGm(v15);
      }
      else
      {
        *(_DWORD *)(v3 + 48) = 0;
        v16 = std::vector<std::string>::operator[](param_vec, 1uLL);
        if ( common::tools::StringUtils::strToNum<unsigned int>(v16, (unsigned int *)(v3 + 48), 1) )
        {
          common::milog::MiLogStream::create(
            &v36,
            &common::milog::MiLogDefault::default_log_obj_,
            3u,
            "./src/player/gm/player_gm_comp.cpp",
            "procFurniture",
            13896);
          v17 = common::milog::MiLogStream::operator<<<char [15],(char *[15])0>(
                  &v36,
                  (const char (*)[15])"invalid param:");
          common::milog::MiLogStream::operator<<<std::string>(v17, param_vec);
          common::milog::MiLogStream::~MiLogStream(&v36);
          v6 = -1;
          goto LABEL_55;
        }
        if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
          __asan_report_load8();
        v18 = Player::getHomeComp(context->player);
        PlayerHomeComp::unlockFurnitureSuite(v18, *(_DWORD *)(v3 + 48));
      }
      v6 = 0;
    }
    else
    {
      v19 = std::vector<std::string>::operator[](param_vec, 0LL);
      if ( !std::operator==<char>(v19, off_26356D00) )
        goto LABEL_54;
      ServiceBox::findService<GameserverService>();
      GameserverService::getConfig((GameserverService *const)(v3 + 64));
      home_config_mgr = &std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 64))->design_config.txt_config_mgr.home_config_mgr;
      std::shared_ptr<Config>::~shared_ptr((std::shared_ptr<Config> *const)(v3 + 64));
      *(_DWORD *)(v3 + 48) = 1;
      if ( std::vector<std::string>::size(param_vec) <= 1 )
      {
        common::milog::MiLogStream::create(
          &v36,
          &common::milog::MiLogDefault::default_log_obj_,
          3u,
          "./src/player/gm/player_gm_comp.cpp",
          "procFurniture",
          13910);
        common::milog::MiLogStream::operator<<<char [17],(char *[17])0>(&v36, (const char (*)[17])"param not enough");
        common::milog::MiLogStream::~MiLogStream(&v36);
        v6 = -1;
        goto LABEL_55;
      }
      v20 = std::vector<std::string>::operator[](param_vec, 1uLL);
      if ( std::operator==<char>(v20, _f.gap0) )
      {
        if ( std::vector<std::string>::size(param_vec) > 2 )
        {
          v21 = std::vector<std::string>::operator[](param_vec, 2uLL);
          common::tools::StringUtils::strToNum<unsigned int>(v21, (unsigned int *)(v3 + 48), 1);
        }
        std::vector<ItemParam>::vector((std::vector<ItemParam> *const)(v3 + 96));
        __for_range_0 = &home_config_mgr->home_world_furniture_excel_config_map;
        __for_begin._M_cur = (std::__detail::_Node_iterator_base<std::pair<unsigned int const,data::FurnitureMakeExcelConfig>,false>::__node_type *)std::unordered_map<unsigned int,data::HomeWorldFurnitureExcelConfig>::begin(&home_config_mgr->home_world_furniture_excel_config_map)._M_cur;
        __for_end._M_cur = (std::__detail::_Node_iterator_base<std::pair<unsigned int const,data::FurnitureMakeExcelConfig>,false>::__node_type *)std::unordered_map<unsigned int,data::HomeWorldFurnitureExcelConfig>::end(&home_config_mgr->home_world_furniture_excel_config_map)._M_cur;
        while ( std::__detail::operator!=<std::pair<unsigned int const,data::HomeWorldFurnitureExcelConfig>,false>(
                  (const std::__detail::_Node_iterator_base<std::pair<unsigned int const,data::HomeWorldFurnitureExcelConfig>,false> *)&__for_begin,
                  (const std::__detail::_Node_iterator_base<std::pair<unsigned int const,data::HomeWorldFurnitureExcelConfig>,false> *)&__for_end) )
        {
          v28 = std::__detail::_Node_const_iterator<std::pair<unsigned int const,data::HomeWorldFurnitureExcelConfig>,false,false>::operator*((const std::__detail::_Node_const_iterator<std::pair<unsigned int const,data::HomeWorldFurnitureExcelConfig>,false,false> *const)&__for_begin);
          item_id = std::get<0ul,unsigned int const,data::HomeWorldFurnitureExcelConfig>(v28);
          item_config = (std::tuple_element<1,const std::pair<unsigned int const,data::HomeWorldFurnitureExcelConfig> >::type *)std::get<1ul,unsigned int const,data::HomeWorldFurnitureExcelConfig>(v28);
          if ( *(_BYTE *)(((unsigned __int64)&item_config->stack_limit >> 3) + 0x7FFF8000) != 0
            && (char)((((_BYTE)item_config - 108) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&item_config->stack_limit >> 3)
                                                                        + 0x7FFF8000) )
          {
            __asan_report_load4(&item_config->stack_limit);
          }
          if ( item_config->stack_limit )
          {
            *(_DWORD *)(v3 + 64) = 0;
            *(_DWORD *)(v3 + 68) = 0;
            *(_DWORD *)(v3 + 72) = 0;
            *(_DWORD *)(v3 + 76) = 0;
            if ( *(_BYTE *)(((unsigned __int64)item_id >> 3) + 0x7FFF8000) != 0
              && (char)(((unsigned __int8)item_id & 7) + 3) >= *(_BYTE *)(((unsigned __int64)item_id >> 3) + 0x7FFF8000) )
            {
              __asan_report_load4(item_id);
            }
            *(_DWORD *)(v3 + 64) = *item_id;
            *(_DWORD *)(v3 + 68) = *(_DWORD *)(v3 + 48);
            std::vector<ItemParam>::push_back(
              (std::vector<ItemParam> *const)(v3 + 96),
              (const std::vector<ItemParam>::value_type *)(v3 + 64));
          }
          std::__detail::_Node_const_iterator<std::pair<unsigned int const,data::HomeWorldFurnitureExcelConfig>,false,false>::operator++((std::__detail::_Node_const_iterator<std::pair<unsigned int const,data::HomeWorldFurnitureExcelConfig>,false,false> *const)&__for_begin);
        }
        ActionReason::ActionReason((ActionReason *const)(v3 + 160), ACTION_REASON_GM, ITEM_LIMIT_GM);
        if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
          __asan_report_load8();
        ItemComp = Player::getItemComp(context->player);
        v6 = PlayerItemComp::addItemBatchWithStackLimit(
               ItemComp,
               (std::vector<ItemParam> *)(v3 + 96),
               (const ActionReason *)(v3 + 160),
               0LL);
        std::vector<ItemParam>::~vector((std::vector<ItemParam> *const)(v3 + 96));
      }
      else
      {
LABEL_54:
        v6 = -1;
      }
    }
  }
LABEL_55:
  result = v6;
  if ( v37 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8010) = 0LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8018) = 0;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8018) = -168430091;
  }
  return result;
};

// Line 13938: range 0000000017D7B1FC-0000000017D7B29E
void __cdecl procTransferGuardRegister::procTransferGuardRegister(procTransferGuardRegister *const this)
{
  std::function<int(GmContext&,const std::vector<std::string>&,std::string&)> *v1; // rax
  std::allocator<char> __a; // [rsp+1Fh] [rbp-31h] BYREF
  std::string __k; // [rsp+20h] [rbp-30h] BYREF

  std::allocator<char>::allocator(&__a);
  std::string::basic_string<std::allocator<char>>(&__k, "TRANSFERGUARD", &__a);
  v1 = std::unordered_map<std::string,std::function<int ()(GmContext &,std::vector<std::string> const&,std::string&)>>::operator[](
         &GmUtils::op_func_map[abi:cxx11],
         &__k);
  std::function<int ()(GmContext &,std::vector<std::string> const&,std::string&)>::operator=<int (&)(GmContext &,std::vector<std::string> const&,std::string&)>(
    v1,
    (int (*)(GmContext *, const std::vector<std::string> *, std::string *))procTransferGuard);
  std::string::~string(&__k);
  std::allocator<char>::~allocator(&__a);
};

// Line 13939: range 0000000017C2FF46-0000000017C306F0
int32_t __cdecl procTransferGuard(GmContext *context, const std::vector<std::string> *param_vec, std::string *ret_msg)
{
  unsigned __int64 v3; // r13
  __int64 v4; // rax
  _DWORD *v5; // r12
  int32_t v6; // r14d
  SceneExcelConfigMgr *p_scene_config_mgr; // r14
  std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v8; // rax
  uint32_t SceneId; // eax
  common::milog::MiLogStream *v10; // r14
  std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v11; // rax
  std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v12; // rax
  unsigned __int64 v13; // rdx
  std::__shared_ptr_access<PlayerWorld,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v14; // rax
  uint32_t v15; // r14d
  std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v16; // rax
  uint32_t v17; // eax
  std::__shared_ptr_access<data::SceneTransPoint,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v18; // rax
  std::__shared_ptr_access<data::SceneTransPoint,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v19; // rax
  std::__shared_ptr_access<PlayerWorld,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v20; // r14
  Scene *v21; // rax
  SceneTransferGuardComp *TransferGuardComp; // r14
  int32_t result; // eax
  procTransferGuard::<lambda(Player&)> v24; // [rsp-20h] [rbp-2D0h]
  unsigned int val; // [rsp+20h] [rbp-290h] BYREF
  uint32_t point_id; // [rsp+24h] [rbp-28Ch]
  const data::SceneExcelConfig *scene_config_ptr; // [rsp+28h] [rbp-288h]
  std::any v29; // [rsp+30h] [rbp-280h] BYREF
  std::function<ForeachPolicy(Player&)> p_func; // [rsp+40h] [rbp-270h] BYREF
  common::milog::MiLogStream v31; // [rsp+60h] [rbp-250h] BYREF
  char v32[560]; // [rsp+80h] [rbp-230h] BYREF

  v3 = (unsigned __int64)v32;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_3(512LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "6 48 12 14 tran_pos:13970 80 12 14 tran_rot:13971 112 16 15 scene_ptr:13940 144 16 15 world_ptr:"
                        "13952 176 16 20 tran_point_ptr:13964 208 232 11 param:13972";
  *(_QWORD *)(v3 + 16) = procTransferGuard;
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = 61937;
  v5[536862721] = 0x4000000;
  v5[536862722] = 62194;
  v5[536862722] = 0x4000000;
  v5[536862723] = 62194;
  v5[536862724] = 62194;
  v5[536862725] = 62194;
  v5[536862726] = 62194;
  v5[536862733] = -218103808;
  v5[536862734] = -202116109;
  v5[536862735] = -202116109;
  if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
    __asan_report_load8();
  Player::getSceneComp(context->player);
  PlayerSceneComp::getCurScene((const PlayerSceneComp *const)(v3 + 112));
  if ( std::operator==<Scene>((const std::shared_ptr<Scene> *)(v3 + 112), 0LL) )
  {
    std::string::operator=(ret_msg, "scene_ptr is null");
    v6 = -1;
  }
  else
  {
    ServiceBox::findService<GameserverService>();
    GameserverService::getConfig((GameserverService *const)&v29);
    p_scene_config_mgr = &std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false> *const)&v29)->design_config.txt_config_mgr.scene_config_mgr;
    v8 = std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 112));
    SceneId = Scene::getSceneId(v8);
    scene_config_ptr = data::SceneExcelConfigMgrBase::findSceneExcelConfig(p_scene_config_mgr, SceneId);
    std::shared_ptr<Config>::~shared_ptr((std::shared_ptr<Config> *const)&v29);
    if ( scene_config_ptr )
    {
      v12 = std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 112));
      if ( *(_BYTE *)(((unsigned __int64)v12 >> 3) + 0x7FFF8000) )
        __asan_report_load8();
      v13 = (unsigned __int64)(v12->_vptr_DescribalBase + 8);
      if ( *(_BYTE *)((v13 >> 3) + 0x7FFF8000) )
        __asan_report_load8();
      (*(void (__fastcall **)(unsigned __int64, std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *))v13)(
        v3 + 144,
        v12);
      if ( std::operator==<PlayerWorld>((const std::shared_ptr<PlayerWorld> *)(v3 + 144), 0LL) )
      {
        std::string::operator=(ret_msg, "world_ptr is null");
        v6 = -1;
      }
      else
      {
        v14 = std::__shared_ptr_access<PlayerWorld,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<PlayerWorld,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 144));
        if ( World::getPlayerCount(v14) > 1 )
        {
          if ( *(_BYTE *)(((unsigned __int64)&scene_config_ptr->safe_point >> 3) + 0x7FFF8000) != 0
            && *(_BYTE *)(((unsigned __int64)&scene_config_ptr->safe_point >> 3) + 0x7FFF8000) <= 3 )
          {
            __asan_report_load4(&scene_config_ptr->safe_point);
          }
          point_id = scene_config_ptr->safe_point;
          ServiceBox::findService<GameserverService>();
          GameserverService::getConfig((GameserverService *const)&v29);
          v15 = (unsigned int)std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false> *const)&v29)
              + 93080;
          v16 = std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 112));
          v17 = Scene::getSceneId(v16);
          JsonConfigMgr::findScenePoint<data::SceneTransPoint>((const JsonConfigMgr *const)(v3 + 176), v15, v17);
          std::shared_ptr<Config>::~shared_ptr((std::shared_ptr<Config> *const)&v29);
          if ( std::operator==<data::SceneTransPoint>((const std::shared_ptr<data::SceneTransPoint> *)(v3 + 176), 0LL) )
          {
            std::string::operator=(ret_msg, "find save point pos failed");
            v6 = -1;
          }
          else
          {
            v18 = std::__shared_ptr_access<data::SceneTransPoint,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<data::SceneTransPoint,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 176));
            Vector3::Vector3((Vector3 *const)(v3 + 48), &v18->tran_pos);
            v19 = std::__shared_ptr_access<data::SceneTransPoint,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<data::SceneTransPoint,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 176));
            Vector3::Vector3((Vector3 *const)(v3 + 80), &v19->tran_rot);
            TransferGuardParam::TransferGuardParam((TransferGuardParam *const)(v3 + 208));
            v20 = std::__shared_ptr_access<PlayerWorld,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<PlayerWorld,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 144));
            v31.log_ = *(common::milog::MiLog **)(v3 + 48);
            LODWORD(v31.ostr_ptr_._M_ptr) = *(_DWORD *)(v3 + 56);
            *(std::__shared_ptr<common::tools::StringStream<common::tools::FixedBuffer<16384> >,(__gnu_cxx::_Lock_policy)2>::element_type **)((char *)&v31.ostr_ptr_._M_ptr + 4) = *(std::__shared_ptr<common::tools::StringStream<common::tools::FixedBuffer<16384> >,(__gnu_cxx::_Lock_policy)2>::element_type **)(v3 + 80);
            HIDWORD(v31.ostr_ptr_._M_refcount._M_pi) = *(_DWORD *)(v3 + 88);
            v31.ostr_ = (common::milog::MilogStringStream *)(v3 + 208);
            v24.__param = (TransferGuardParam *)(v3 + 208);
            *(_QWORD *)&v24.__tran_rot.y = v31.ostr_ptr_._M_refcount._M_pi;
            *(_OWORD *)&v24.__tran_pos.x = *(_OWORD *)&v31.log_;
            std::function<ForeachPolicy ()(Player &)>::function<procTransferGuard(GmContext &,std::vector<std::string> const&,std::string&)::{lambda(Player &)#1},void,void>(
              &p_func,
              v24);
            World::foreachPlayer(v20, &p_func);
            std::function<ForeachPolicy ()(Player &)>::~function(&p_func);
            *(_BYTE *)(v3 + 360) = 1;
            *(_DWORD *)(v3 + 364) = 21;
            *(_BYTE *)(v3 + 368) = 1;
            v21 = std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 112));
            TransferGuardComp = Scene::getTransferGuardComp(v21);
            std::any::any(&v29);
            SceneTransferGuardComp::startTransferGuard(TransferGuardComp, (const TransferGuardParam *)(v3 + 208), &v29);
            std::any::~any(&v29);
            v6 = 0;
            TransferGuardParam::~TransferGuardParam((TransferGuardParam *const)(v3 + 208));
          }
          std::shared_ptr<data::SceneTransPoint>::~shared_ptr((std::shared_ptr<data::SceneTransPoint> *const)(v3 + 176));
        }
        else
        {
          std::string::operator=(ret_msg, "world_ptr getPlayerCount less than 1");
          v6 = -1;
        }
      }
      std::shared_ptr<PlayerWorld>::~shared_ptr((std::shared_ptr<PlayerWorld> *const)(v3 + 144));
    }
    else
    {
      common::milog::MiLogStream::create(
        &v31,
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/player/gm/player_gm_comp.cpp",
        "procTransferGuard",
        13949);
      v10 = common::milog::MiLogStream::operator<<<char [39],(char *[39])0>(
              &v31,
              (const char (*)[39])"findSceneExcelConfig failed, scene_id:");
      v11 = std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 112));
      val = Scene::getSceneId(v11);
      common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v10, &val);
      common::milog::MiLogStream::~MiLogStream(&v31);
      v6 = -1;
    }
  }
  std::shared_ptr<Scene>::~shared_ptr((std::shared_ptr<Scene> *const)(v3 + 112));
  result = v6;
  if ( v32 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8010) = 0LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8018) = 0;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8034) = 0LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF803C) = 0;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8020) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8028) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8030) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8038) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 13973: range 0000000017C2FEAE-0000000017C2FF45
ForeachPolicy __cdecl procTransferGuard(GmContext &,std::vector<std::string> const&,std::string&)::{lambda(Player &)#1}::operator()(
        const procTransferGuard::<lambda(Player&)> *const __closure,
        Player *player)
{
  TransferGuardParam *param; // rbx
  std::pair<Vector3,Vector3> *v3; // rax
  std::map<unsigned int,std::pair<Vector3,Vector3>>::key_type __k; // [rsp+1Ch] [rbp-34h] BYREF
  std::pair<Vector3,Vector3> __p; // [rsp+20h] [rbp-30h] BYREF

  std::make_pair<Vector3 const&,Vector3 const&>(&__p, &__closure->__tran_pos, &__closure->__tran_rot);
  if ( *(_BYTE *)(((unsigned __int64)&__closure->__param >> 3) + 0x7FFF8000) )
    __asan_report_load8();
  param = __closure->__param;
  __k = Player::getUid(player);
  v3 = std::map<unsigned int,std::pair<Vector3,Vector3>>::operator[](&param->uid_location_map, &__k);
  std::pair<Vector3,Vector3>::operator=(v3, &__p);
  return 0;
};

// Line 13985: range 0000000017D7B2A0-0000000017D7B342
void __cdecl procGalleryRegister::procGalleryRegister(procGalleryRegister *const this)
{
  std::function<int(GmContext&,const std::vector<std::string>&,std::string&)> *v1; // rax
  std::allocator<char> __a; // [rsp+1Fh] [rbp-31h] BYREF
  std::string __k; // [rsp+20h] [rbp-30h] BYREF

  std::allocator<char>::allocator(&__a);
  std::string::basic_string<std::allocator<char>>(&__k, "GALLERY", &__a);
  v1 = std::unordered_map<std::string,std::function<int ()(GmContext &,std::vector<std::string> const&,std::string&)>>::operator[](
         &GmUtils::op_func_map[abi:cxx11],
         &__k);
  std::function<int ()(GmContext &,std::vector<std::string> const&,std::string&)>::operator=<int (&)(GmContext &,std::vector<std::string> const&,std::string&)>(
    v1,
    (int (*)(GmContext *, const std::vector<std::string> *, std::string *))procGallery);
  std::string::~string(&__k);
  std::allocator<char>::~allocator(&__a);
};

// Line 13986: range 0000000017C306F1-0000000017C321C0
int32_t __cdecl procGallery(GmContext *context, const std::vector<std::string> *param_vec, std::string *ret_msg)
{
  int32_t inited; // r12d
  unsigned __int64 v4; // r14
  __int64 v5; // rax
  _DWORD *v6; // r13
  const std::string *v7; // rax
  const std::string *v8; // rax
  Scene *v9; // rax
  std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v10; // rax
  Scene *v11; // rax
  SceneGalleryComp *GalleryComp; // r12
  uint32_t Uid; // eax
  Scene *v14; // rax
  SceneGalleryComp *v15; // rax
  const std::string *v16; // rax
  const std::string *v17; // rax
  Scene *v18; // rax
  SceneGalleryComp *v19; // rax
  const std::string *v20; // rax
  const std::string *v21; // rax
  Scene *v22; // rax
  SceneGalleryComp *v23; // rax
  const std::string *v24; // rax
  const std::string *v25; // rax
  const std::string *v26; // rax
  Scene *v27; // rax
  SceneGalleryComp *v28; // rax
  const std::string *v29; // rax
  _BOOL4 v30; // r15d
  const std::string *v31; // rax
  Scene *v32; // rax
  uint32_t v33; // eax
  _BOOL4 v34; // r15d
  BaseGallery *v35; // rax
  int v36; // r15d
  const std::string *v37; // rax
  const std::string *v38; // rax
  BalloonGallery *v39; // r15
  uint32_t v40; // r12d
  uint32_t v41; // eax
  const std::string *v42; // rax
  const std::string *v43; // rax
  BalloonGallery *v44; // r15
  uint32_t v45; // r12d
  uint32_t v46; // eax
  const std::string *v47; // rax
  _BOOL4 v48; // r15d
  const std::string *v49; // rax
  Scene *v50; // rax
  uint32_t v51; // eax
  _BOOL4 v52; // r15d
  BaseGallery *v53; // rax
  int v54; // r15d
  const std::string *v55; // rax
  const std::string *v56; // rax
  FallGallery *v57; // r15
  uint32_t v58; // r12d
  uint32_t v59; // eax
  const std::string *v60; // rax
  const std::string *v61; // rax
  Scene *v62; // rax
  uint32_t v63; // eax
  BaseGallery *v64; // rax
  std::vector<std::string>::const_reference v65; // rax
  const std::string *v66; // rax
  int v67; // r12d
  char *v68; // rsi
  std::unordered_map<std::string,unsigned int>::mapped_type *v69; // rax
  _DWORD *v70; // rdx
  char v71; // cl
  BounceConjuringGallery *v72; // r12
  uint32_t v73; // eax
  const std::string *v74; // rax
  const std::string *v76; // rax
  std::vector<std::string>::const_reference v77; // rax
  const std::string *v78; // rax
  Scene *v79; // rax
  uint32_t v80; // eax
  BaseGallery *v81; // rax
  BaseGallery *v82; // rax
  int32_t result; // eax
  proto::GalleryStopReason reason_proto; // [rsp+2Ch] [rbp-1D4h]
  char v86[464]; // [rsp+30h] [rbp-1D0h] BYREF

  v4 = (unsigned __int64)v86;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v5 = __asan_stack_malloc_3(416LL);
    if ( v5 )
      v4 = v5;
  }
  *(_QWORD *)v4 = 1102416563LL;
  *(_QWORD *)(v4 + 8) = "8 48 4 16 gallery_id:14259 64 4 20 progress_level:14266 80 16 15 scene_ptr:14203 112 16 15 scene"
                        "_ptr:14253 144 16 22 base_gallery_ptr:14272 176 32 17 gallery_key:14265 240 48 13 uid_set:14011 "
                        "320 56 15 param_map:14241";
  *(_QWORD *)(v4 + 16) = procGallery;
  v6 = (_DWORD *)(v4 >> 3);
  v6[536862720] = -235802127;
  v6[536862721] = -234556943;
  v6[536862722] = 61956;
  v6[536862723] = 62194;
  v6[536862724] = 62194;
  v6[536862725] = 62194;
  v6[536862726] = -219021312;
  v6[536862727] = 62194;
  v6[536862729] = -218959118;
  v6[536862731] = -218103808;
  v6[536862732] = -202116109;
  if ( !std::vector<std::string>::size(param_vec) )
    goto LABEL_83;
  v7 = std::vector<std::string>::operator[](param_vec, 0LL);
  if ( std::operator==<char>(v7, "INIT") )
  {
    if ( std::vector<std::string>::size(param_vec) > 1 )
    {
      if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
        __asan_report_load8();
      Player::getSceneComp(context->player);
      PlayerSceneComp::getCurScene((const PlayerSceneComp *const)(v4 + 144));
      if ( !std::operator==<Scene>((const std::shared_ptr<Scene> *)(v4 + 144), 0LL) )
      {
        *(_DWORD *)(v4 + 64) = 0;
        v8 = std::vector<std::string>::operator[](param_vec, 1uLL);
        if ( !common::tools::StringUtils::strToNum<unsigned int>(v8, (unsigned int *)(v4 + 64), 1) )
        {
          std::set<unsigned int>::set((std::set<unsigned int> *const)(v4 + 240));
          v9 = std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 144));
          Scene::getPlayerUidSet(v9, (std::set<unsigned int> *)(v4 + 240));
          v10 = std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 144));
          if ( Scene::isHomeScene(v10) )
          {
            v11 = std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 144));
            GalleryComp = Scene::getGalleryComp(v11);
            if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
              __asan_report_load8();
            Uid = Player::getUid(context->player);
            inited = SceneGalleryComp::initHomeGallery(
                       GalleryComp,
                       *(_DWORD *)(v4 + 64),
                       (const std::set<unsigned int> *)(v4 + 240),
                       Uid);
          }
          else
          {
            v14 = std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 144));
            v15 = Scene::getGalleryComp(v14);
            inited = SceneGalleryComp::initGallery(
                       v15,
                       *(_DWORD *)(v4 + 64),
                       (const std::set<unsigned int> *)(v4 + 240));
          }
          std::set<unsigned int>::~set((std::set<unsigned int> *const)(v4 + 240));
          goto LABEL_46;
        }
        goto LABEL_24;
      }
      goto LABEL_41;
    }
    goto LABEL_83;
  }
  v16 = std::vector<std::string>::operator[](param_vec, 0LL);
  if ( std::operator==<char>(v16, "START") )
  {
    if ( std::vector<std::string>::size(param_vec) > 1 )
    {
      if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
        __asan_report_load8();
      Player::getSceneComp(context->player);
      PlayerSceneComp::getCurScene((const PlayerSceneComp *const)(v4 + 144));
      if ( !std::operator==<Scene>((const std::shared_ptr<Scene> *)(v4 + 144), 0LL) )
      {
        *(_DWORD *)(v4 + 64) = 0;
        v17 = std::vector<std::string>::operator[](param_vec, 1uLL);
        if ( !common::tools::StringUtils::strToNum<unsigned int>(v17, (unsigned int *)(v4 + 64), 1) )
        {
          v18 = std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 144));
          v19 = Scene::getGalleryComp(v18);
          inited = SceneGalleryComp::startGallery(v19, *(_DWORD *)(v4 + 64));
          goto LABEL_46;
        }
LABEL_24:
        std::string::operator=(ret_msg, "strToNum failed");
        inited = -1;
LABEL_46:
        std::shared_ptr<Scene>::~shared_ptr((std::shared_ptr<Scene> *const)(v4 + 144));
        goto LABEL_157;
      }
LABEL_41:
      std::string::operator=(ret_msg, "scene_ptr is null");
      inited = -1;
      goto LABEL_46;
    }
LABEL_83:
    std::string::operator=(ret_msg, "param not enough");
    inited = -1;
    goto LABEL_157;
  }
  v20 = std::vector<std::string>::operator[](param_vec, 0LL);
  if ( std::operator==<char>(v20, "STOP") )
  {
    if ( std::vector<std::string>::size(param_vec) > 1 )
    {
      if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
        __asan_report_load8();
      Player::getSceneComp(context->player);
      PlayerSceneComp::getCurScene((const PlayerSceneComp *const)(v4 + 144));
      if ( !std::operator==<Scene>((const std::shared_ptr<Scene> *)(v4 + 144), 0LL) )
      {
        *(_DWORD *)(v4 + 64) = 0;
        v21 = std::vector<std::string>::operator[](param_vec, 1uLL);
        if ( !common::tools::StringUtils::strToNum<unsigned int>(v21, (unsigned int *)(v4 + 64), 1) )
        {
          v22 = std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 144));
          v23 = Scene::getGalleryComp(v22);
          inited = SceneGalleryComp::forceStopAndClearGallery(v23, *(_DWORD *)(v4 + 64), 0, GALLERY_STOP_NONE);
          goto LABEL_46;
        }
        goto LABEL_24;
      }
      goto LABEL_41;
    }
    goto LABEL_83;
  }
  v24 = std::vector<std::string>::operator[](param_vec, 0LL);
  if ( std::operator==<char>(v24, "STOP_WITH_REASON") )
  {
    if ( std::vector<std::string>::size(param_vec) > 2 )
    {
      if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
        __asan_report_load8();
      Player::getSceneComp(context->player);
      PlayerSceneComp::getCurScene((const PlayerSceneComp *const)(v4 + 144));
      if ( !std::operator==<Scene>((const std::shared_ptr<Scene> *)(v4 + 144), 0LL) )
      {
        *(_DWORD *)(v4 + 48) = 0;
        v25 = std::vector<std::string>::operator[](param_vec, 1uLL);
        if ( !common::tools::StringUtils::strToNum<unsigned int>(v25, (unsigned int *)(v4 + 48), 1) )
        {
          *(_DWORD *)(v4 + 64) = 0;
          v26 = std::vector<std::string>::operator[](param_vec, 2uLL);
          if ( !common::tools::StringUtils::strToNum<unsigned int>(v26, (unsigned int *)(v4 + 64), 1) )
          {
            reason_proto = *(_DWORD *)(v4 + 64);
            v27 = std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 144));
            v28 = Scene::getGalleryComp(v27);
            inited = SceneGalleryComp::forceStopAndClearGallery(v28, *(_DWORD *)(v4 + 48), 0, reason_proto);
            goto LABEL_46;
          }
        }
        goto LABEL_24;
      }
      goto LABEL_41;
    }
    goto LABEL_83;
  }
  v29 = std::vector<std::string>::operator[](param_vec, 0LL);
  if ( std::operator==<char>(v29, "BALLOON") )
  {
    if ( std::vector<std::string>::size(param_vec) <= 3 )
      goto LABEL_83;
    if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
      __asan_report_load8();
    Player::getSceneComp(context->player);
    PlayerSceneComp::getCurScene((const PlayerSceneComp *const)(v4 + 80));
    if ( std::operator==<Scene>((const std::shared_ptr<Scene> *)(v4 + 80), 0LL) )
    {
      std::string::operator=(ret_msg, "scene_ptr is null");
      inited = -1;
      v30 = 0;
    }
    else
    {
      *(_DWORD *)(v4 + 48) = 0;
      v31 = std::vector<std::string>::operator[](param_vec, 1uLL);
      if ( common::tools::StringUtils::strToNum<unsigned int>(v31, (unsigned int *)(v4 + 48), 1) )
      {
        std::string::operator=(ret_msg, "strToNum failed");
        inited = -1;
        v30 = 0;
      }
      else
      {
        v32 = std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 80));
        v33 = (unsigned int)Scene::getGalleryComp(v32);
        SceneGalleryComp::findGallery((SceneGalleryComp *const)(v4 + 112), v33);
        if ( std::operator==<BaseGallery>(0LL, (const std::shared_ptr<BaseGallery> *)(v4 + 112)) )
        {
          std::string::operator=(ret_msg, "gallery not exists");
          inited = -1;
          v34 = 0;
        }
        else
        {
          v35 = std::__shared_ptr_access<BaseGallery,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<BaseGallery,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 112));
          if ( !BaseGallery::isStart(v35) )
          {
            std::string::operator=(ret_msg, "gallery not started");
            inited = -1;
            v34 = 0;
          }
          else
          {
            std::dynamic_pointer_cast<BalloonGallery,BaseGallery>((const std::shared_ptr<BaseGallery> *)(v4 + 144));
            if ( std::operator==<BalloonGallery>((const std::shared_ptr<BalloonGallery> *)(v4 + 144), 0LL) )
            {
              inited = -1;
              v36 = 0;
            }
            else
            {
              v37 = std::vector<std::string>::operator[](param_vec, 2uLL);
              if ( std::operator==<char>(v37, "COMBO") )
              {
                *(_DWORD *)(v4 + 64) = 0;
                v38 = std::vector<std::string>::operator[](param_vec, 3uLL);
                if ( common::tools::StringUtils::strToNum<unsigned int>(v38, (unsigned int *)(v4 + 64), 1) )
                {
                  std::string::operator=(ret_msg, "strToNum failed");
                  inited = -1;
                }
                else
                {
                  v39 = std::__shared_ptr_access<BalloonGallery,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<BalloonGallery,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 144));
                  v40 = *(_DWORD *)(v4 + 64);
                  if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
                    __asan_report_load8();
                  v41 = Player::getUid(context->player);
                  inited = BalloonGallery::addComboByGm(v39, v41, v40);
                }
                v36 = 0;
              }
              else
              {
                v42 = std::vector<std::string>::operator[](param_vec, 2uLL);
                if ( std::operator==<char>(v42, "SCORE") )
                {
                  *(_DWORD *)(v4 + 64) = 0;
                  v43 = std::vector<std::string>::operator[](param_vec, 3uLL);
                  if ( common::tools::StringUtils::strToNum<unsigned int>(v43, (unsigned int *)(v4 + 64), 1) )
                  {
                    std::string::operator=(ret_msg, "strToNum failed");
                    inited = -1;
                  }
                  else
                  {
                    v44 = std::__shared_ptr_access<BalloonGallery,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<BalloonGallery,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 144));
                    v45 = *(_DWORD *)(v4 + 64);
                    if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
                      __asan_report_load8();
                    v46 = Player::getUid(context->player);
                    inited = BalloonGallery::addScoreByGm(v44, v46, v45);
                  }
                  v36 = 0;
                }
                else
                {
                  v36 = 1;
                }
              }
            }
            std::shared_ptr<BalloonGallery>::~shared_ptr((std::shared_ptr<BalloonGallery> *const)(v4 + 144));
            v34 = v36 == 1;
          }
        }
        std::shared_ptr<BaseGallery>::~shared_ptr((std::shared_ptr<BaseGallery> *const)(v4 + 112));
        v30 = v34;
      }
    }
    std::shared_ptr<Scene>::~shared_ptr((std::shared_ptr<Scene> *const)(v4 + 80));
    if ( v30 )
      goto LABEL_156;
  }
  else
  {
    v47 = std::vector<std::string>::operator[](param_vec, 0LL);
    if ( std::operator==<char>(v47, "FALL") )
    {
      if ( std::vector<std::string>::size(param_vec) <= 3 )
        goto LABEL_83;
      if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
        __asan_report_load8();
      Player::getSceneComp(context->player);
      PlayerSceneComp::getCurScene((const PlayerSceneComp *const)(v4 + 80));
      if ( std::operator==<Scene>((const std::shared_ptr<Scene> *)(v4 + 80), 0LL) )
      {
        std::string::operator=(ret_msg, "scene_ptr is null");
        inited = -1;
        v48 = 0;
      }
      else
      {
        *(_DWORD *)(v4 + 48) = 0;
        v49 = std::vector<std::string>::operator[](param_vec, 1uLL);
        if ( common::tools::StringUtils::strToNum<unsigned int>(v49, (unsigned int *)(v4 + 48), 1) )
        {
          std::string::operator=(ret_msg, "strToNum failed");
          inited = -1;
          v48 = 0;
        }
        else
        {
          v50 = std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 80));
          v51 = (unsigned int)Scene::getGalleryComp(v50);
          SceneGalleryComp::findGallery((SceneGalleryComp *const)(v4 + 112), v51);
          if ( std::operator==<BaseGallery>(0LL, (const std::shared_ptr<BaseGallery> *)(v4 + 112)) )
          {
            std::string::operator=(ret_msg, "gallery not exists");
            inited = -1;
            v52 = 0;
          }
          else
          {
            v53 = std::__shared_ptr_access<BaseGallery,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<BaseGallery,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 112));
            if ( !BaseGallery::isStart(v53) )
            {
              std::string::operator=(ret_msg, "gallery not started");
              inited = -1;
              v52 = 0;
            }
            else
            {
              std::dynamic_pointer_cast<FallGallery,BaseGallery>((const std::shared_ptr<BaseGallery> *)(v4 + 144));
              if ( std::operator==<FallGallery>((const std::shared_ptr<FallGallery> *)(v4 + 144), 0LL) )
              {
                inited = -1;
                v54 = 0;
              }
              else
              {
                v55 = std::vector<std::string>::operator[](param_vec, 2uLL);
                if ( std::operator==<char>(v55, "SCORE") )
                {
                  *(_DWORD *)(v4 + 64) = 0;
                  v56 = std::vector<std::string>::operator[](param_vec, 3uLL);
                  if ( common::tools::StringUtils::strToNum<unsigned int>(v56, (unsigned int *)(v4 + 64), 1) )
                  {
                    std::string::operator=(ret_msg, "strToNum failed");
                    inited = -1;
                  }
                  else
                  {
                    v57 = std::__shared_ptr_access<FallGallery,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<FallGallery,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 144));
                    v58 = *(_DWORD *)(v4 + 64);
                    if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
                      __asan_report_load8();
                    v59 = Player::getUid(context->player);
                    inited = FallGallery::addScoreByGm(v57, v59, v58);
                  }
                  v54 = 0;
                }
                else
                {
                  v54 = 1;
                }
              }
              std::shared_ptr<FallGallery>::~shared_ptr((std::shared_ptr<FallGallery> *const)(v4 + 144));
              v52 = v54 == 1;
            }
          }
          std::shared_ptr<BaseGallery>::~shared_ptr((std::shared_ptr<BaseGallery> *const)(v4 + 112));
          v48 = v52;
        }
      }
      std::shared_ptr<Scene>::~shared_ptr((std::shared_ptr<Scene> *const)(v4 + 80));
      if ( v48 )
        goto LABEL_156;
    }
    else
    {
      v60 = std::vector<std::string>::operator[](param_vec, 0LL);
      if ( std::operator==<char>(v60, "BOUNCE_CONJURING") )
      {
        if ( std::vector<std::string>::size(param_vec) <= 3 )
          goto LABEL_83;
        if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
          __asan_report_load8();
        Player::getSceneComp(context->player);
        PlayerSceneComp::getCurScene((const PlayerSceneComp *const)(v4 + 80));
        if ( std::operator==<Scene>(0LL, (const std::shared_ptr<Scene> *)(v4 + 80)) )
        {
          std::string::operator=(ret_msg, "scene_ptr is null");
          inited = -1;
        }
        else
        {
          *(_DWORD *)(v4 + 48) = 0;
          v61 = std::vector<std::string>::operator[](param_vec, 1uLL);
          if ( common::tools::StringUtils::strToNum<unsigned int>(v61, (unsigned int *)(v4 + 48), 1) )
          {
            std::string::operator=(ret_msg, "strToNum failed");
            inited = -1;
          }
          else
          {
            v62 = std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 80));
            v63 = (unsigned int)Scene::getGalleryComp(v62);
            SceneGalleryComp::findGallery((SceneGalleryComp *const)(v4 + 112), v63);
            if ( std::operator==<BaseGallery>(0LL, (const std::shared_ptr<BaseGallery> *)(v4 + 112)) )
            {
              std::string::operator=(ret_msg, "gallery not exists");
              inited = -1;
            }
            else
            {
              v64 = std::__shared_ptr_access<BaseGallery,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<BaseGallery,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 112));
              if ( !BaseGallery::isStart(v64) )
              {
                std::string::operator=(ret_msg, "gallery not started");
                inited = -1;
              }
              else
              {
                std::dynamic_pointer_cast<BounceConjuringGallery,BaseGallery>((const std::shared_ptr<BaseGallery> *)(v4 + 144));
                if ( std::operator==<BounceConjuringGallery>(
                       0LL,
                       (const std::shared_ptr<BounceConjuringGallery> *)(v4 + 144)) )
                {
                  std::string::operator=(ret_msg, "gallery invalid");
                  inited = -1;
                }
                else
                {
                  v65 = std::vector<std::string>::operator[](param_vec, 2uLL);
                  std::string::basic_string(v4 + 176, v65);
                  *(_DWORD *)(v4 + 64) = 0;
                  v66 = std::vector<std::string>::operator[](param_vec, 3uLL);
                  if ( common::tools::StringUtils::strToNum<unsigned int>(v66, (unsigned int *)(v4 + 64), 1) )
                  {
                    std::string::operator=(ret_msg, "strToNum failed");
                    inited = -1;
                  }
                  else
                  {
                    std::unordered_map<std::string,unsigned int>::unordered_map((std::unordered_map<std::string,unsigned int> *const)(v4 + 320));
                    v67 = *(_DWORD *)(v4 + 64);
                    v68 = (char *)(v4 + 176);
                    v69 = std::unordered_map<std::string,unsigned int>::operator[](
                            (std::unordered_map<std::string,unsigned int> *const)(v4 + 320),
                            (const std::unordered_map<std::string,unsigned int>::key_type *)(v4 + 176));
                    v70 = v69;
                    v71 = *(_BYTE *)(((unsigned __int64)v69 >> 3) + 0x7FFF8000);
                    if ( v71 != 0 && (char)(((unsigned __int8)v69 & 7) + 3) >= v71 )
                    {
                      LOBYTE(v68) = v71 != 0;
                      __asan_report_store4(v69, v68, v69);
                    }
                    *v70 = v67;
                    v72 = std::__shared_ptr_access<BounceConjuringGallery,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<BounceConjuringGallery,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 144));
                    if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
                      __asan_report_load8();
                    v73 = Player::getUid(context->player);
                    inited = BounceConjuringGallery::updatePlayerScoreByGm(
                               v72,
                               v73,
                               (std::unordered_map<std::string,unsigned int> *)(v4 + 320));
                    std::unordered_map<std::string,unsigned int>::~unordered_map((std::unordered_map<std::string,unsigned int> *const)(v4 + 320));
                  }
                  std::string::~string((void *)(v4 + 176));
                }
                std::shared_ptr<BounceConjuringGallery>::~shared_ptr((std::shared_ptr<BounceConjuringGallery> *const)(v4 + 144));
              }
            }
            std::shared_ptr<BaseGallery>::~shared_ptr((std::shared_ptr<BaseGallery> *const)(v4 + 112));
          }
        }
        std::shared_ptr<Scene>::~shared_ptr((std::shared_ptr<Scene> *const)(v4 + 80));
      }
      else
      {
        v74 = std::vector<std::string>::operator[](param_vec, 0LL);
        if ( !std::operator==<char>(v74, "PROGRESS") )
        {
LABEL_156:
          inited = 0;
          goto LABEL_157;
        }
        if ( std::vector<std::string>::size(param_vec) <= 3
          || std::vector<std::string>::size(&context->raw_param_vec) <= 3 )
        {
          goto LABEL_83;
        }
        if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
          __asan_report_load8();
        Player::getSceneComp(context->player);
        PlayerSceneComp::getCurScene((const PlayerSceneComp *const)(v4 + 112));
        if ( std::operator==<Scene>((const std::shared_ptr<Scene> *)(v4 + 112), 0LL) )
        {
          std::string::operator=(ret_msg, "scene_ptr is null");
          inited = -1;
        }
        else
        {
          *(_DWORD *)(v4 + 48) = 0;
          v76 = std::vector<std::string>::operator[](param_vec, 1uLL);
          if ( common::tools::StringUtils::strToNum<unsigned int>(v76, (unsigned int *)(v4 + 48), 1) )
          {
            std::string::operator=(ret_msg, "strToNum failed");
            inited = -1;
          }
          else
          {
            v77 = std::vector<std::string>::operator[](&context->raw_param_vec, 2uLL);
            std::string::basic_string(v4 + 176, v77);
            *(_DWORD *)(v4 + 64) = 0;
            v78 = std::vector<std::string>::operator[](param_vec, 3uLL);
            if ( common::tools::StringUtils::strToNum<unsigned int>(v78, (unsigned int *)(v4 + 64), 1) )
            {
              std::string::operator=(ret_msg, "strToNum failed");
              inited = -1;
            }
            else
            {
              v79 = std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 112));
              v80 = (unsigned int)Scene::getGalleryComp(v79);
              SceneGalleryComp::findGallery((SceneGalleryComp *const)(v4 + 144), v80);
              if ( std::operator==<BaseGallery>(0LL, (const std::shared_ptr<BaseGallery> *)(v4 + 144)) )
              {
                std::string::operator=(ret_msg, "gallery not exists");
                inited = -1;
              }
              else
              {
                v81 = std::__shared_ptr_access<BaseGallery,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<BaseGallery,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 144));
                if ( !BaseGallery::isStart(v81) )
                {
                  std::string::operator=(ret_msg, "gallery not started");
                  inited = -1;
                }
                else
                {
                  v82 = std::__shared_ptr_access<BaseGallery,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<BaseGallery,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 144));
                  inited = BaseGallery::forceSetStage(v82, (const std::string *)(v4 + 176), *(_DWORD *)(v4 + 64));
                }
              }
              std::shared_ptr<BaseGallery>::~shared_ptr((std::shared_ptr<BaseGallery> *const)(v4 + 144));
            }
            std::string::~string((void *)(v4 + 176));
          }
        }
        std::shared_ptr<Scene>::~shared_ptr((std::shared_ptr<Scene> *const)(v4 + 112));
      }
    }
  }
LABEL_157:
  result = inited;
  if ( v86 == (char *)v4 )
  {
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8008) = 0LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8010) = 0LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8018) = 0LL;
    *(_DWORD *)((v4 >> 3) + 0x7FFF8024) = 0;
    *(_QWORD *)((v4 >> 3) + 0x7FFF802C) = 0LL;
  }
  else
  {
    *(_QWORD *)v4 = 1172321806LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8020) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8028) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v4 >> 3) + 0x7FFF8030) = -168430091;
  }
  return result;
};

// Line 14288: range 0000000017D7B344-0000000017D7B3E6
void __cdecl procRegionSearchRegister::procRegionSearchRegister(procRegionSearchRegister *const this)
{
  std::function<int(GmContext&,const std::vector<std::string>&,std::string&)> *v1; // rax
  std::allocator<char> __a; // [rsp+1Fh] [rbp-31h] BYREF
  std::string __k; // [rsp+20h] [rbp-30h] BYREF

  std::allocator<char>::allocator(&__a);
  std::string::basic_string<std::allocator<char>>(&__k, "REGION_SEARCH", &__a);
  v1 = std::unordered_map<std::string,std::function<int ()(GmContext &,std::vector<std::string> const&,std::string&)>>::operator[](
         &GmUtils::op_func_map[abi:cxx11],
         &__k);
  std::function<int ()(GmContext &,std::vector<std::string> const&,std::string&)>::operator=<int (&)(GmContext &,std::vector<std::string> const&,std::string&)>(
    v1,
    (int (*)(GmContext *, const std::vector<std::string> *, std::string *))procRegionSearch);
  std::string::~string(&__k);
  std::allocator<char>::~allocator(&__a);
};

// Line 14289: range 0000000017C321C1-0000000017C327F2
int32_t __cdecl procRegionSearch(GmContext *context, const std::vector<std::string> *param_vec, std::string *ret_msg)
{
  unsigned __int64 v3; // r12
  __int64 v4; // rax
  _DWORD *v5; // r13
  const std::string *v6; // rax
  const std::string *v7; // rax
  PlayerRegionSearchComp *v8; // rax
  int32_t result; // eax
  const std::string *v10; // rax
  const std::string *v11; // rax
  PlayerRegionSearchComp *RegionSearchComp; // rax
  const std::string *v13; // rax
  const std::string *v14; // rax
  const std::string *v15; // rax
  PlayerRegionSearchComp *v16; // rax
  const std::string *v17; // rax
  const std::string *v18; // rax
  const std::string *v19; // rax
  PlayerRegionSearchComp *v20; // rax
  char v22[128]; // [rsp+20h] [rbp-80h] BYREF

  v3 = (unsigned __int64)v22;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_1(96LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "3 32 4 15 region_id:14355 48 4 18 add_progress:14361 64 8 12 source:14308";
  *(_QWORD *)(v3 + 16) = procRegionSearch;
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = -234556924;
  v5[536862722] = -202116352;
  if ( !std::vector<std::string>::size(param_vec) )
    goto LABEL_30;
  v6 = std::vector<std::string>::operator[](param_vec, 0LL);
  if ( !std::operator==<char>(v6, off_26356D00) )
  {
    v10 = std::vector<std::string>::operator[](param_vec, 0LL);
    if ( std::operator==<char>(v10, off_26356E00) )
    {
      if ( std::vector<std::string>::size(param_vec) > 1 )
      {
        *(_DWORD *)(v3 + 48) = 0;
        v11 = std::vector<std::string>::operator[](param_vec, 1uLL);
        if ( common::tools::StringUtils::strToNum<unsigned int>(v11, (unsigned int *)(v3 + 48), 1) )
          goto LABEL_33;
        if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
          __asan_report_load8();
        RegionSearchComp = Player::getRegionSearchComp(context->player);
        PlayerRegionSearchComp::delRegionSearchPlay(RegionSearchComp, *(_DWORD *)(v3 + 48));
        result = 0;
        goto LABEL_38;
      }
    }
    else
    {
      v13 = std::vector<std::string>::operator[](param_vec, 0LL);
      if ( std::operator==<char>(v13, "ADD_PROGRESS") )
      {
        if ( std::vector<std::string>::size(param_vec) > 2 )
        {
          *(_DWORD *)(v3 + 32) = 0;
          v14 = std::vector<std::string>::operator[](param_vec, 1uLL);
          if ( common::tools::StringUtils::strToNum<unsigned int>(v14, (unsigned int *)(v3 + 32), 1) )
            goto LABEL_33;
          *(_DWORD *)(v3 + 48) = 0;
          v15 = std::vector<std::string>::operator[](param_vec, 2uLL);
          if ( common::tools::StringUtils::strToNum<unsigned int>(v15, (unsigned int *)(v3 + 48), 1) )
            goto LABEL_33;
          if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
            __asan_report_load8();
          v16 = Player::getRegionSearchComp(context->player);
          result = PlayerRegionSearchComp::addSearchProgress(v16, *(_DWORD *)(v3 + 32), *(_DWORD *)(v3 + 48));
          goto LABEL_38;
        }
      }
      else
      {
        v17 = std::vector<std::string>::operator[](param_vec, 0LL);
        if ( !std::operator==<char>(v17, "ADD_RECYCLE") )
        {
          result = 0;
          goto LABEL_38;
        }
        if ( std::vector<std::string>::size(param_vec) > 2 )
        {
          *(_DWORD *)(v3 + 32) = 0;
          v18 = std::vector<std::string>::operator[](param_vec, 1uLL);
          if ( common::tools::StringUtils::strToNum<unsigned int>(v18, (unsigned int *)(v3 + 32), 1) )
            goto LABEL_33;
          *(_DWORD *)(v3 + 48) = 0;
          v19 = std::vector<std::string>::operator[](param_vec, 2uLL);
          if ( common::tools::StringUtils::strToNum<unsigned int>(v19, (unsigned int *)(v3 + 48), 1) )
            goto LABEL_33;
          if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
            __asan_report_load8();
          v20 = Player::getRegionSearchComp(context->player);
          result = PlayerRegionSearchComp::addRecycleProgress(v20, *(_DWORD *)(v3 + 32), *(_DWORD *)(v3 + 48));
          goto LABEL_38;
        }
      }
    }
LABEL_30:
    std::string::operator=(ret_msg, "param not enough");
    result = -1;
    goto LABEL_38;
  }
  if ( std::vector<std::string>::size(param_vec) <= 1 )
    goto LABEL_30;
  *(_DWORD *)(v3 + 48) = 0;
  v7 = std::vector<std::string>::operator[](param_vec, 1uLL);
  if ( common::tools::StringUtils::strToNum<unsigned int>(v7, (unsigned int *)(v3 + 48), 1) )
  {
LABEL_33:
    std::string::operator=(ret_msg, "strToNum failed");
    result = -1;
    goto LABEL_38;
  }
  *(_DWORD *)(v3 + 64) = 0;
  *(_DWORD *)(v3 + 68) = 0;
  if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
    __asan_report_load8();
  v8 = Player::getRegionSearchComp(context->player);
  result = PlayerRegionSearchComp::addRegionSearchPlay(v8, *(_DWORD *)(v3 + 48), (const RegionSearchSource *)(v3 + 64));
LABEL_38:
  if ( v22 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8008) = 0;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8008) = -168430091;
  }
  return result;
};

// Line 14372: range 0000000017D7B3E8-0000000017D7B48A
void __cdecl procCoopChapterRegister::procCoopChapterRegister(procCoopChapterRegister *const this)
{
  std::function<int(GmContext&,const std::vector<std::string>&,std::string&)> *v1; // rax
  std::allocator<char> __a; // [rsp+1Fh] [rbp-31h] BYREF
  std::string __k; // [rsp+20h] [rbp-30h] BYREF

  std::allocator<char>::allocator(&__a);
  std::string::basic_string<std::allocator<char>>(&__k, "COOP_CHAPTER", &__a);
  v1 = std::unordered_map<std::string,std::function<int ()(GmContext &,std::vector<std::string> const&,std::string&)>>::operator[](
         &GmUtils::op_func_map[abi:cxx11],
         &__k);
  std::function<int ()(GmContext &,std::vector<std::string> const&,std::string&)>::operator=<int (&)(GmContext &,std::vector<std::string> const&,std::string&)>(
    v1,
    (int (*)(GmContext *, const std::vector<std::string> *, std::string *))procCoopChapter);
  std::string::~string(&__k);
  std::allocator<char>::~allocator(&__a);
};

// Line 14373: range 0000000017C327F3-0000000017C3327B
int32_t __cdecl procCoopChapter(GmContext *context, const std::vector<std::string> *param_vec, std::string *ret_msg)
{
  unsigned __int64 v3; // r12
  __int64 v4; // rax
  _DWORD *v5; // r13
  int32_t v6; // r14d
  const std::string *v7; // rax
  const std::string *v8; // rax
  common::tools::StringStream<common::tools::FixedBuffer<4096> > *v9; // rax
  PlayerCoopComp *v10; // rax
  const std::string *v11; // rax
  const std::string *v12; // rax
  common::tools::StringStream<common::tools::FixedBuffer<4096> > *v13; // rax
  PlayerCoopComp *CoopComp; // rax
  const std::string *v15; // rax
  PlayerCoopComp *v16; // rax
  const std::string *v17; // rax
  common::tools::StringStream<common::tools::FixedBuffer<4096> > *v18; // rax
  PlayerCoopComp *v19; // rax
  const std::string *v20; // rax
  const std::string *v21; // rax
  common::tools::StringStream<common::tools::FixedBuffer<4096> > *v22; // rax
  PlayerCoopComp *v23; // rax
  const std::string *v24; // rax
  const std::string *v25; // rax
  const std::string *v26; // rax
  common::tools::StringStream<common::tools::FixedBuffer<4096> > *v27; // rax
  PlayerCoopComp *v28; // rax
  const std::string *v29; // rax
  const std::string *v30; // rax
  common::tools::StringStream<common::tools::FixedBuffer<4096> > *v31; // rax
  PlayerCoopComp *v32; // rax
  const std::string *v33; // rax
  PlayerCoopComp *v34; // rax
  int32_t result; // eax
  common::milog::MiLogStream v37; // [rsp+20h] [rbp-B0h] BYREF
  char v38[144]; // [rsp+40h] [rbp-90h] BYREF

  v3 = (unsigned __int64)v38;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_1(96LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "2 48 4 18 main_coop_id:14470 64 16 8 ss:14379";
  *(_QWORD *)(v3 + 16) = procCoopChapter;
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = -234556943;
  v5[536862722] = -202178560;
  if ( std::vector<std::string>::empty(param_vec) )
  {
    common::milog::MiLogStream::create(
      &v37,
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/player/gm/player_gm_comp.cpp",
      "procCoopChapter",
      14376);
    common::milog::MiLogStream::operator<<<char [17],(char *[17])0>(&v37, "param not enough");
    common::milog::MiLogStream::~MiLogStream(&v37);
    v6 = -1;
    goto LABEL_58;
  }
  common::tools::StringStream<common::tools::FixedBuffer<4096>>::StringStream((common::tools::StringStream<common::tools::FixedBuffer<4096> > *const)(v3 + 64));
  v7 = std::vector<std::string>::operator[](param_vec, 0LL);
  if ( !std::operator==<char>(v7, "START") )
  {
    v11 = std::vector<std::string>::operator[](param_vec, 0LL);
    if ( std::operator==<char>(v11, "POINTSTART") )
    {
      if ( std::vector<std::string>::size(param_vec) <= 1 )
      {
        common::milog::MiLogStream::create(
          &v37,
          &common::milog::MiLogDefault::default_log_obj_,
          3u,
          "./src/player/gm/player_gm_comp.cpp",
          "procCoopChapter",
          14400);
        common::milog::MiLogStream::operator<<<char [17],(char *[17])0>(&v37, "param not enough");
        common::milog::MiLogStream::~MiLogStream(&v37);
        v6 = -1;
        goto LABEL_57;
      }
      *(_DWORD *)(v3 + 48) = 0;
      v12 = std::vector<std::string>::operator[](param_vec, 1uLL);
      if ( common::tools::StringUtils::strToNum<unsigned int>(v12, (unsigned int *)(v3 + 48), 1) )
      {
        std::string::operator=(ret_msg, &unk_2636CB60);
        v6 = -1;
        goto LABEL_57;
      }
      v13 = common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(
              (common::tools::StringStream<common::tools::FixedBuffer<4096> > *const)(v3 + 64),
              aCooppoint);
      common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(v13, *(_DWORD *)(v3 + 48));
      if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
        __asan_report_load8();
      CoopComp = Player::getCoopComp(context->player);
      PlayerCoopComp::startPointByGm(CoopComp, *(_DWORD *)(v3 + 48));
      goto LABEL_56;
    }
    v15 = std::vector<std::string>::operator[](param_vec, 0LL);
    if ( std::operator==<char>(v15, "RESET") )
    {
      if ( std::vector<std::string>::size(param_vec) > 1 )
      {
        *(_DWORD *)(v3 + 48) = 0;
        v17 = std::vector<std::string>::operator[](param_vec, 1uLL);
        if ( common::tools::StringUtils::strToNum<unsigned int>(v17, (unsigned int *)(v3 + 48), 1) )
          goto LABEL_35;
        v18 = common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(
                (common::tools::StringStream<common::tools::FixedBuffer<4096> > *const)(v3 + 64),
                &byte_2636CC40);
        common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(v18, *(_DWORD *)(v3 + 48));
        if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
          __asan_report_load8();
        v19 = Player::getCoopComp(context->player);
        PlayerCoopComp::resetChapterByGm(v19, *(_DWORD *)(v3 + 48));
      }
      else
      {
        common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(
          (common::tools::StringStream<common::tools::FixedBuffer<4096> > *const)(v3 + 64),
          &byte_2636CBE0);
        if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
          __asan_report_load8();
        v16 = Player::getCoopComp(context->player);
        PlayerCoopComp::resetAllChapterByGm(v16);
      }
      goto LABEL_56;
    }
    v20 = std::vector<std::string>::operator[](param_vec, 0LL);
    if ( std::operator==<char>(v20, "FINISH") )
    {
      if ( std::vector<std::string>::size(param_vec) > 1 )
      {
        *(_DWORD *)(v3 + 48) = 0;
        v21 = std::vector<std::string>::operator[](param_vec, 1uLL);
        if ( common::tools::StringUtils::strToNum<unsigned int>(v21, (unsigned int *)(v3 + 48), 1) )
        {
LABEL_35:
          std::string::operator=(ret_msg, &unk_2636CAA0);
          v6 = -1;
          goto LABEL_57;
        }
        v22 = common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(
                (common::tools::StringStream<common::tools::FixedBuffer<4096> > *const)(v3 + 64),
                &byte_2636CC80);
        common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(v22, *(_DWORD *)(v3 + 48));
        if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
          __asan_report_load8();
        v23 = Player::getCoopComp(context->player);
        PlayerCoopComp::finishChapterByGm(v23, *(_DWORD *)(v3 + 48));
LABEL_56:
        common::tools::StringStream<common::tools::FixedBuffer<4096>>::str[abi:cxx11](
          (std::string *)&v37,
          (common::tools::StringStream<common::tools::FixedBuffer<4096> > *const)(v3 + 64));
        std::string::operator=(ret_msg, &v37);
        std::string::~string(&v37);
        v6 = 0;
        goto LABEL_57;
      }
    }
    else
    {
      v24 = std::vector<std::string>::operator[](param_vec, 0LL);
      if ( !std::operator==<char>(v24, "MAINCOOP") )
      {
        v33 = std::vector<std::string>::operator[](param_vec, 0LL);
        if ( std::operator==<char>(v33, "OPENALL") )
        {
          common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(
            (common::tools::StringStream<common::tools::FixedBuffer<4096> > *const)(v3 + 64),
            &byte_2636CE20);
          if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
            __asan_report_load8();
          v34 = Player::getCoopComp(context->player);
          PlayerCoopComp::openAllCoopChapterByGm(v34);
        }
        goto LABEL_56;
      }
      if ( std::vector<std::string>::size(param_vec) > 2 )
      {
        v25 = std::vector<std::string>::operator[](param_vec, 1uLL);
        if ( std::operator==<char>(v25, "START") )
        {
          *(_DWORD *)(v3 + 48) = 0;
          v26 = std::vector<std::string>::operator[](param_vec, 2uLL);
          if ( !common::tools::StringUtils::strToNum<unsigned int>(v26, (unsigned int *)(v3 + 48), 1) )
          {
            v27 = common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(
                    (common::tools::StringStream<common::tools::FixedBuffer<4096> > *const)(v3 + 64),
                    aMaincoop_0);
            common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(v27, *(_DWORD *)(v3 + 48));
            if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
              __asan_report_load8();
            v28 = Player::getCoopComp(context->player);
            PlayerCoopComp::startMainCoopByGM(v28, *(unsigned int *)(v3 + 48));
            goto LABEL_56;
          }
        }
        else
        {
          v29 = std::vector<std::string>::operator[](param_vec, 1uLL);
          if ( !std::operator==<char>(v29, "CLEAR") )
            goto LABEL_56;
          *(_DWORD *)(v3 + 48) = 0;
          v30 = std::vector<std::string>::operator[](param_vec, 2uLL);
          if ( !common::tools::StringUtils::strToNum<unsigned int>(v30, (unsigned int *)(v3 + 48), 1) )
          {
            v31 = common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(
                    (common::tools::StringStream<common::tools::FixedBuffer<4096> > *const)(v3 + 64),
                    aMaincoop_1);
            common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(v31, *(_DWORD *)(v3 + 48));
            if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
              __asan_report_load8();
            v32 = Player::getCoopComp(context->player);
            PlayerCoopComp::clearMainCoopByGM(v32, *(_DWORD *)(v3 + 48));
            goto LABEL_56;
          }
        }
        std::string::operator=(ret_msg, &unk_2636CD20);
        v6 = -1;
        goto LABEL_57;
      }
    }
    common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(
      (common::tools::StringStream<common::tools::FixedBuffer<4096> > *const)(v3 + 64),
      aParamNotEnough_0[0]);
    v6 = -1;
    goto LABEL_57;
  }
  if ( std::vector<std::string>::size(param_vec) > 1 )
  {
    *(_DWORD *)(v3 + 48) = 0;
    v8 = std::vector<std::string>::operator[](param_vec, 1uLL);
    if ( common::tools::StringUtils::strToNum<unsigned int>(v8, (unsigned int *)(v3 + 48), 1) )
      goto LABEL_35;
    v9 = common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(
           (common::tools::StringStream<common::tools::FixedBuffer<4096> > *const)(v3 + 64),
           aCoopchapter);
    common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(v9, *(_DWORD *)(v3 + 48));
    if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
      __asan_report_load8();
    v10 = Player::getCoopComp(context->player);
    PlayerCoopComp::unlockCoopChapterByGm(v10, *(_DWORD *)(v3 + 48));
    goto LABEL_56;
  }
  common::milog::MiLogStream::create(
    &v37,
    &common::milog::MiLogDefault::default_log_obj_,
    3u,
    "./src/player/gm/player_gm_comp.cpp",
    "procCoopChapter",
    14384);
  common::milog::MiLogStream::operator<<<char [17],(char *[17])0>(&v37, "param not enough");
  common::milog::MiLogStream::~MiLogStream(&v37);
  v6 = -1;
LABEL_57:
  common::tools::StringStream<common::tools::FixedBuffer<4096>>::~StringStream((common::tools::StringStream<common::tools::FixedBuffer<4096> > *const)(v3 + 64));
LABEL_58:
  result = v6;
  if ( v38 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8008) = 0;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8008) = -168430091;
  }
  return result;
};

// Line 14490: range 0000000017D7B48C-0000000017D7B52E
void __cdecl procSetPlatformRegister::procSetPlatformRegister(procSetPlatformRegister *const this)
{
  std::function<int(GmContext&,const std::vector<std::string>&,std::string&)> *v1; // rax
  std::allocator<char> __a; // [rsp+1Fh] [rbp-31h] BYREF
  std::string __k; // [rsp+20h] [rbp-30h] BYREF

  std::allocator<char>::allocator(&__a);
  std::string::basic_string<std::allocator<char>>(&__k, "SET_PLATFORM", &__a);
  v1 = std::unordered_map<std::string,std::function<int ()(GmContext &,std::vector<std::string> const&,std::string&)>>::operator[](
         &GmUtils::op_func_map[abi:cxx11],
         &__k);
  std::function<int ()(GmContext &,std::vector<std::string> const&,std::string&)>::operator=<int (&)(GmContext &,std::vector<std::string> const&,std::string&)>(
    v1,
    (int (*)(GmContext *, const std::vector<std::string> *, std::string *))procSetPlatform);
  std::string::~string(&__k);
  std::allocator<char>::~allocator(&__a);
};

// Line 14491: range 0000000017C3327C-0000000017C3352C
int32_t __cdecl procSetPlatform(GmContext *context, const std::vector<std::string> *param_vec, std::string *ret_msg)
{
  unsigned __int64 v3; // rbx
  __int64 v4; // rax
  unsigned __int64 v5; // r12
  int32_t result; // eax
  const std::string *v7; // rax
  const std::string *v8; // rax
  Player *player; // [rsp+28h] [rbp-88h]
  common::milog::MiLogStream v11; // [rsp+30h] [rbp-80h] BYREF
  char v12[96]; // [rsp+50h] [rbp-60h] BYREF

  v3 = (unsigned __int64)v12;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_0(64LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "1 32 4 19 platform_type:14506";
  *(_QWORD *)(v3 + 16) = procSetPlatform;
  v5 = v3 >> 3;
  *(_DWORD *)(v5 + 2147450880) = -235802127;
  *(_DWORD *)(v5 + 2147450884) = -202116348;
  if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
    __asan_report_load8();
  player = context->player;
  if ( std::vector<std::string>::empty(param_vec) )
  {
    common::milog::MiLogStream::create(
      &v11,
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/player/gm/player_gm_comp.cpp",
      "procSetPlatform",
      14495);
    common::milog::MiLogStream::operator<<<char [17],(char *[17])0>(&v11, "param not enough");
    common::milog::MiLogStream::~MiLogStream(&v11);
    result = -1;
    goto LABEL_15;
  }
  v7 = std::vector<std::string>::operator[](param_vec, 0LL);
  if ( std::operator==<char>(v7, "LOGIN") )
  {
    if ( std::vector<std::string>::size(param_vec) <= 1 )
    {
      common::milog::MiLogStream::create(
        &v11,
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/player/gm/player_gm_comp.cpp",
        "procSetPlatform",
        14503);
      common::milog::MiLogStream::operator<<<char [17],(char *[17])0>(&v11, "param not enough");
      common::milog::MiLogStream::~MiLogStream(&v11);
      result = -1;
      goto LABEL_15;
    }
    *(_DWORD *)(v3 + 32) = 0;
    v8 = std::vector<std::string>::operator[](param_vec, 1uLL);
    if ( common::tools::StringUtils::strToNum<unsigned int>(v8, (unsigned int *)(v3 + 32), 1) )
    {
      std::string::operator=(ret_msg, "strToNum failed");
      result = -1;
      goto LABEL_15;
    }
    Player::setPlayerLoginPlatformByGm(player, *(_DWORD *)(v3 + 32));
  }
  result = 0;
LABEL_15:
  if ( v12 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 14517: range 0000000017D7B530-0000000017D7B5D2
void __cdecl procHomeAvatarRegister::procHomeAvatarRegister(procHomeAvatarRegister *const this)
{
  std::function<int(GmContext&,const std::vector<std::string>&,std::string&)> *v1; // rax
  std::allocator<char> __a; // [rsp+1Fh] [rbp-31h] BYREF
  std::string __k; // [rsp+20h] [rbp-30h] BYREF

  std::allocator<char>::allocator(&__a);
  std::string::basic_string<std::allocator<char>>(&__k, "HOME_AVATAR", &__a);
  v1 = std::unordered_map<std::string,std::function<int ()(GmContext &,std::vector<std::string> const&,std::string&)>>::operator[](
         &GmUtils::op_func_map[abi:cxx11],
         &__k);
  std::function<int ()(GmContext &,std::vector<std::string> const&,std::string&)>::operator=<int (&)(GmContext &,std::vector<std::string> const&,std::string&)>(
    v1,
    (int (*)(GmContext *, const std::vector<std::string> *, std::string *))procHomeAvatar);
  std::string::~string(&__k);
  std::allocator<char>::~allocator(&__a);
};

// Line 14518: range 0000000017C3352D-0000000017C3406B
int32_t __cdecl procHomeAvatar(GmContext *context, const std::vector<std::string> *param_vec, std::string *ret_msg)
{
  unsigned __int64 v3; // r13
  __int64 v4; // rax
  _DWORD *v5; // r14
  int32_t updated; // r12d
  const std::string *v7; // rax
  const std::string *v8; // rax
  const std::string *v9; // rax
  PlayerHomeComp *HomeComp; // rax
  HomeAvatar *HomeAvatar; // rax
  const std::string *v12; // rax
  const std::string *v13; // rax
  PlayerHomeComp *v14; // rax
  HomeAvatar *v15; // rax
  const std::string *v16; // rax
  const std::string *v17; // rax
  PlayerHomeComp *v18; // rax
  HomeAvatar *v19; // rax
  const std::string *v20; // rax
  const std::string *v21; // rax
  bool v22; // r12
  common::milog::MiLogStream *v23; // rdx
  PlayerHomeComp *v24; // rax
  HomeAvatar *v25; // rax
  const std::string *v26; // rax
  const std::string *v27; // rax
  PlayerHomeComp *v28; // rax
  HomeAvatar *v29; // rax
  const std::string *v30; // rax
  bool v31; // r12
  common::milog::MiLogStream *v32; // rdx
  PlayerHomeComp *v33; // rax
  HomeAvatar *v34; // rax
  int32_t result; // eax
  std::allocator<char> __a; // [rsp+27h] [rbp-D9h] BYREF
  Player *player; // [rsp+28h] [rbp-D8h]
  common::milog::MiLogStream v39; // [rsp+30h] [rbp-D0h] BYREF
  char v40[176]; // [rsp+50h] [rbp-B0h] BYREF

  v3 = (unsigned __int64)v40;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_1(128LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "3 32 4 14 event_id:14533 48 4 13 add_num:14569 64 24 19 avatar_id_vec:14600";
  *(_QWORD *)(v3 + 16) = procHomeAvatar;
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = -234556924;
  v5[536862722] = -218103808;
  v5[536862723] = -202116109;
  if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
    __asan_report_load8();
  player = context->player;
  if ( std::vector<std::string>::empty(param_vec) )
  {
    common::milog::MiLogStream::create(
      &v39,
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/player/gm/player_gm_comp.cpp",
      "procHomeAvatar",
      14522);
    common::milog::MiLogStream::operator<<<char [17],(char *[17])0>(&v39, "param not enough");
    common::milog::MiLogStream::~MiLogStream(&v39);
    updated = -1;
    goto LABEL_42;
  }
  v7 = std::vector<std::string>::operator[](param_vec, 0LL);
  if ( std::operator==<char>(v7, "EVENT_ADD") )
  {
    if ( std::vector<std::string>::size(param_vec) <= 2 )
    {
      common::milog::MiLogStream::create(
        &v39,
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/player/gm/player_gm_comp.cpp",
        "procHomeAvatar",
        14530);
      common::milog::MiLogStream::operator<<<char [17],(char *[17])0>(&v39, "param not enough");
      common::milog::MiLogStream::~MiLogStream(&v39);
      updated = -1;
      goto LABEL_42;
    }
    *(_DWORD *)(v3 + 32) = 0;
    v8 = std::vector<std::string>::operator[](param_vec, 1uLL);
    if ( !common::tools::StringUtils::strToNum<unsigned int>(v8, (unsigned int *)(v3 + 32), 1) )
    {
      *(_DWORD *)(v3 + 48) = 0;
      v9 = std::vector<std::string>::operator[](param_vec, 2uLL);
      if ( !common::tools::StringUtils::strToNum<unsigned int>(v9, (unsigned int *)(v3 + 48), 1) )
      {
        HomeComp = Player::getHomeComp(player);
        HomeAvatar = PlayerHomeComp::getHomeAvatar(HomeComp);
        updated = HomeAvatar::addEventInfoByGm(HomeAvatar, *(_DWORD *)(v3 + 32), *(_DWORD *)(v3 + 48));
        goto LABEL_42;
      }
    }
LABEL_24:
    std::string::operator=(ret_msg, "strToNum failed");
    updated = -1;
    goto LABEL_42;
  }
  v12 = std::vector<std::string>::operator[](param_vec, 0LL);
  if ( std::operator==<char>(v12, "EVENT_DEL") )
  {
    if ( std::vector<std::string>::size(param_vec) <= 1 )
    {
      common::milog::MiLogStream::create(
        &v39,
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/player/gm/player_gm_comp.cpp",
        "procHomeAvatar",
        14551);
      common::milog::MiLogStream::operator<<<char [17],(char *[17])0>(&v39, "param not enough");
      common::milog::MiLogStream::~MiLogStream(&v39);
      updated = -1;
      goto LABEL_42;
    }
    *(_DWORD *)(v3 + 48) = 0;
    v13 = std::vector<std::string>::operator[](param_vec, 1uLL);
    if ( !common::tools::StringUtils::strToNum<unsigned int>(v13, (unsigned int *)(v3 + 48), 1) )
    {
      v14 = Player::getHomeComp(player);
      v15 = PlayerHomeComp::getHomeAvatar(v14);
      updated = HomeAvatar::delEventInfoByGm(v15, *(_DWORD *)(v3 + 48));
      goto LABEL_42;
    }
    goto LABEL_24;
  }
  v16 = std::vector<std::string>::operator[](param_vec, 0LL);
  if ( std::operator==<char>(v16, "ADD_FETTER") )
  {
    if ( std::vector<std::string>::size(param_vec) <= 1 )
    {
      common::milog::MiLogStream::create(
        &v39,
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/player/gm/player_gm_comp.cpp",
        "procHomeAvatar",
        14566);
      common::milog::MiLogStream::operator<<<char [17],(char *[17])0>(&v39, "param not enough");
      common::milog::MiLogStream::~MiLogStream(&v39);
      updated = -1;
      goto LABEL_42;
    }
    *(_DWORD *)(v3 + 48) = 0;
    v17 = std::vector<std::string>::operator[](param_vec, 1uLL);
    if ( common::tools::StringUtils::strToNum<unsigned int>(v17, (unsigned int *)(v3 + 48), 1) )
      goto LABEL_24;
    v18 = Player::getHomeComp(player);
    v19 = PlayerHomeComp::getHomeAvatar(v18);
    HomeAvatar::addAvatarsFetter(v19, *(_DWORD *)(v3 + 48));
    goto LABEL_41;
  }
  v20 = std::vector<std::string>::operator[](param_vec, 0LL);
  if ( std::operator==<char>(v20, "ADD_AVATAR_SHOW") )
  {
    if ( std::vector<std::string>::size(param_vec) <= 1 )
    {
      common::milog::MiLogStream::create(
        &v39,
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/player/gm/player_gm_comp.cpp",
        "procHomeAvatar",
        14581);
      common::milog::MiLogStream::operator<<<char [17],(char *[17])0>(&v39, "param not enough");
      common::milog::MiLogStream::~MiLogStream(&v39);
      updated = -1;
      goto LABEL_42;
    }
    std::vector<unsigned int>::vector((std::vector<unsigned int> *const)(v3 + 64));
    std::allocator<char>::allocator(&__a);
    std::string::basic_string<std::allocator<char>>((std::string *const)&v39, ",", &__a);
    v21 = std::vector<std::string>::operator[](param_vec, 1uLL);
    v22 = common::tools::StringUtils::splitToList<unsigned int>(
            v21,
            (const std::string *)&v39,
            (std::vector<unsigned int> *)(v3 + 64),
            1) != 0;
    std::string::~string(&v39);
    std::allocator<char>::~allocator(&__a);
    if ( v22 )
    {
      common::milog::MiLogStream::create(
        &v39,
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/player/gm/player_gm_comp.cpp",
        "procHomeAvatar",
        14587);
      v23 = common::milog::MiLogStream::operator<<<char [15],(char *[15])0>(&v39, (const char (*)[15])"invalid param:");
      common::milog::MiLogStream::operator<<<std::string>(v23, param_vec);
      common::milog::MiLogStream::~MiLogStream(&v39);
      updated = -1;
    }
    else
    {
      v24 = Player::getHomeComp(player);
      v25 = PlayerHomeComp::getHomeAvatar(v24);
      updated = HomeAvatar::updateAvatarsInHomeByGm(v25, (const std::vector<unsigned int> *)(v3 + 64));
    }
    goto LABEL_32;
  }
  v26 = std::vector<std::string>::operator[](param_vec, 0LL);
  if ( std::operator==<char>(v26, "DATA_CLEAR") )
  {
    if ( std::vector<std::string>::size(param_vec) <= 1 )
    {
      common::milog::MiLogStream::create(
        &v39,
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/player/gm/player_gm_comp.cpp",
        "procHomeAvatar",
        14596);
      common::milog::MiLogStream::operator<<<char [17],(char *[17])0>(&v39, "param not enough");
      common::milog::MiLogStream::~MiLogStream(&v39);
      updated = -1;
      goto LABEL_42;
    }
    std::vector<unsigned int>::vector((std::vector<unsigned int> *const)(v3 + 64));
    v27 = std::vector<std::string>::operator[](param_vec, 1uLL);
    if ( std::operator==<char>(v27, _f.gap0) )
    {
      v28 = Player::getHomeComp(player);
      v29 = PlayerHomeComp::getHomeAvatar(v28);
      updated = HomeAvatar::clearAllEventByGm(v29, (const std::vector<unsigned int> *)(v3 + 64), 1);
    }
    else
    {
      std::allocator<char>::allocator(&__a);
      std::string::basic_string<std::allocator<char>>((std::string *const)&v39, ",", &__a);
      v30 = std::vector<std::string>::operator[](param_vec, 1uLL);
      v31 = common::tools::StringUtils::splitToList<unsigned int>(
              v30,
              (const std::string *)&v39,
              (std::vector<unsigned int> *)(v3 + 64),
              1) != 0;
      std::string::~string(&v39);
      std::allocator<char>::~allocator(&__a);
      if ( v31 )
      {
        common::milog::MiLogStream::create(
          &v39,
          &common::milog::MiLogDefault::default_log_obj_,
          3u,
          "./src/player/gm/player_gm_comp.cpp",
          "procHomeAvatar",
          14609);
        v32 = common::milog::MiLogStream::operator<<<char [15],(char *[15])0>(
                &v39,
                (const char (*)[15])"invalid param:");
        common::milog::MiLogStream::operator<<<std::string>(v32, param_vec);
        common::milog::MiLogStream::~MiLogStream(&v39);
        updated = -1;
      }
      else
      {
        v33 = Player::getHomeComp(player);
        v34 = PlayerHomeComp::getHomeAvatar(v33);
        updated = HomeAvatar::clearAllEventByGm(v34, (const std::vector<unsigned int> *)(v3 + 64), 0);
      }
    }
LABEL_32:
    std::vector<unsigned int>::~vector((std::vector<unsigned int> *const)(v3 + 64));
    goto LABEL_42;
  }
LABEL_41:
  updated = 0;
LABEL_42:
  result = updated;
  if ( v40 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 14618: range 0000000017D7B5D4-0000000017D7B676
void __cdecl procClearOutputControlRecordsByYaceRegister::procClearOutputControlRecordsByYaceRegister(
        procClearOutputControlRecordsByYaceRegister *const this)
{
  std::function<int(GmContext&,const std::vector<std::string>&,std::string&)> *v1; // rax
  std::allocator<char> __a; // [rsp+1Fh] [rbp-31h] BYREF
  std::string __k; // [rsp+20h] [rbp-30h] BYREF

  std::allocator<char>::allocator(&__a);
  std::string::basic_string<std::allocator<char>>(&__k, "CLEAR_OUTPUT_CONTROL_RECORDS_BY_YACE", &__a);
  v1 = std::unordered_map<std::string,std::function<int ()(GmContext &,std::vector<std::string> const&,std::string&)>>::operator[](
         &GmUtils::op_func_map[abi:cxx11],
         &__k);
  std::function<int ()(GmContext &,std::vector<std::string> const&,std::string&)>::operator=<int (&)(GmContext &,std::vector<std::string> const&,std::string&)>(
    v1,
    (int (*)(GmContext *, const std::vector<std::string> *, std::string *))procClearOutputControlRecordsByYace);
  std::string::~string(&__k);
  std::allocator<char>::~allocator(&__a);
};

// Line 14619: range 0000000017C3406C-0000000017C340C3
int32_t __cdecl procClearOutputControlRecordsByYace(
        GmContext *context,
        const std::vector<std::string> *param_vec,
        std::string *ret_msg)
{
  PlayerItemComp *ItemComp; // rax

  if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
    __asan_report_load8();
  ItemComp = Player::getItemComp(context->player);
  PlayerItemComp::clearOutputControlRecordsByYaceAndGm(ItemComp);
  return 0;
};

// Line 14624: range 0000000017D7B678-0000000017D7B71A
void __cdecl procDynamicGroupRegister::procDynamicGroupRegister(procDynamicGroupRegister *const this)
{
  std::function<int(GmContext&,const std::vector<std::string>&,std::string&)> *v1; // rax
  std::allocator<char> __a; // [rsp+1Fh] [rbp-31h] BYREF
  std::string __k; // [rsp+20h] [rbp-30h] BYREF

  std::allocator<char>::allocator(&__a);
  std::string::basic_string<std::allocator<char>>(&__k, "DYNAMICGROUP", &__a);
  v1 = std::unordered_map<std::string,std::function<int ()(GmContext &,std::vector<std::string> const&,std::string&)>>::operator[](
         &GmUtils::op_func_map[abi:cxx11],
         &__k);
  std::function<int ()(GmContext &,std::vector<std::string> const&,std::string&)>::operator=<int (&)(GmContext &,std::vector<std::string> const&,std::string&)>(
    v1,
    (int (*)(GmContext *, const std::vector<std::string> *, std::string *))procDynamicGroup);
  std::string::~string(&__k);
  std::allocator<char>::~allocator(&__a);
};

// Line 14625: range 0000000017C340C4-0000000017C356EE
int32_t __cdecl procDynamicGroup(GmContext *context, const std::vector<std::string> *param_vec, std::string *ret_msg)
{
  unsigned __int64 v3; // r14
  __int64 v4; // rax
  _DWORD *v5; // r13
  int32_t v6; // r12d
  const std::string *v7; // rax
  const std::string *v8; // rax
  std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v9; // rax
  uint32_t SceneComp; // eax
  Scene *v11; // rax
  SceneBlockGroupComp *BlockGroupComp; // r12
  unsigned __int64 v13; // rax
  __int64 (__fastcall *v14)(SceneBlockGroupComp *, unsigned __int64, _QWORD, _QWORD); // r15
  const std::string *v15; // rax
  const std::string *v16; // rax
  std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v17; // rax
  uint32_t v18; // eax
  Scene *v19; // rax
  SceneBlockGroupComp *v20; // r12
  unsigned __int64 v21; // rax
  __int64 (__fastcall *v22)(SceneBlockGroupComp *, unsigned __int64, __int64); // r15
  const std::string *v23; // rax
  const std::string *v24; // rax
  std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v25; // rax
  uint32_t v26; // eax
  Scene *v27; // rax
  SceneBlockGroupComp *v28; // r12
  unsigned __int64 v29; // rax
  __int64 (__fastcall *v30)(SceneBlockGroupComp *, unsigned __int64, _QWORD); // r15
  const std::string *v31; // rax
  SceneBlockGroupComp *v32; // rax
  const std::string *v33; // rax
  const std::string *v34; // rax
  uint32_t v35; // eax
  common::milog::MiLogStream *v36; // rax
  std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v37; // rax
  common::milog::MiLogStream *v38; // rax
  common::milog::MiLogStream *v39; // r12
  Scene *v40; // rax
  SceneBlockGroupComp *v41; // rax
  unsigned __int64 v42; // rdx
  const std::string *v43; // rax
  const std::string *v44; // rax
  uint32_t v45; // eax
  common::milog::MiLogStream *v46; // rax
  const std::string *v47; // rax
  Scene *v48; // rax
  SceneBlockGroupComp *v49; // rax
  const std::string *v50; // rax
  const std::string *v51; // rax
  uint32_t v52; // eax
  common::milog::MiLogStream *v53; // rax
  Scene *v54; // rax
  SceneBlockGroupComp *v55; // rax
  int32_t result; // eax
  std::initializer_list<unsigned int> __l; // [rsp+0h] [rbp-1B0h]
  std::initializer_list<unsigned int> v58; // [rsp+10h] [rbp-1A0h]
  std::initializer_list<unsigned int> v59; // [rsp+20h] [rbp-190h]
  std::allocator<unsigned int> __a; // [rsp+5Bh] [rbp-155h] BYREF
  uint32_t scene_id_1; // [rsp+5Ch] [rbp-154h]
  uint32_t scene_id_0; // [rsp+60h] [rbp-150h]
  uint32_t scene_id; // [rsp+64h] [rbp-14Ch]
  std::unordered_map<unsigned int,GroupInfoScriptConfig>::const_iterator __for_begin; // [rsp+68h] [rbp-148h] BYREF
  std::unordered_map<unsigned int,GroupInfoScriptConfig>::const_iterator __for_end; // [rsp+70h] [rbp-140h] BYREF
  const SceneScriptConfig *scene_script_config_ptr; // [rsp+78h] [rbp-138h]
  const std::unordered_map<unsigned int,GroupInfoScriptConfig> *__for_range; // [rsp+80h] [rbp-130h]
  const std::pair<unsigned int const,GroupInfoScriptConfig> *v68; // [rsp+88h] [rbp-128h]
  std::tuple_element<0,const std::pair<unsigned int const,GroupInfoScriptConfig> >::type *group_id; // [rsp+90h] [rbp-120h]
  std::tuple_element<1,const std::pair<unsigned int const,GroupInfoScriptConfig> >::type *group_info_config; // [rsp+98h] [rbp-118h]
  common::milog::MiLogStream v71; // [rsp+A0h] [rbp-110h] BYREF
  char v72[240]; // [rsp+C0h] [rbp-F0h] BYREF

  v3 = (unsigned __int64)v72;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_2(192LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "5 32 4 14 scene_id:14726 48 4 14 scene_id:14750 64 16 15 scene_ptr:14696 96 16 15 scene_ptr:1475"
                        "2 128 24 15 group_vec:14708";
  *(_QWORD *)(v3 + 16) = procDynamicGroup;
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = -234556924;
  v5[536862722] = -219021312;
  v5[536862723] = -219021312;
  v5[536862724] = -218103808;
  v5[536862725] = -202116109;
  if ( std::vector<std::string>::empty(param_vec) )
  {
    common::milog::MiLogStream::create(
      &v71,
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/player/gm/player_gm_comp.cpp",
      "procDynamicGroup",
      14628);
    common::milog::MiLogStream::operator<<<char [17],(char *[17])0>(&v71, "param not enough");
    common::milog::MiLogStream::~MiLogStream(&v71);
    v6 = -1;
    goto LABEL_89;
  }
  v7 = std::vector<std::string>::operator[](param_vec, 0LL);
  if ( std::operator==<char>(v7, off_2636D280) )
  {
    if ( std::vector<std::string>::size(param_vec) <= 1 )
    {
      common::milog::MiLogStream::create(
        &v71,
        &common::milog::MiLogDefault::default_log_obj_,
        1u,
        "./src/player/gm/player_gm_comp.cpp",
        "procDynamicGroup",
        14635);
      common::milog::MiLogStream::operator<<<char [17],(char *[17])0>(&v71, "param not enough");
      common::milog::MiLogStream::~MiLogStream(&v71);
      v6 = -1;
      goto LABEL_89;
    }
    *(_DWORD *)(v3 + 32) = 0;
    v8 = std::vector<std::string>::operator[](param_vec, 1uLL);
    common::tools::StringUtils::strToNum<unsigned int>(v8, (unsigned int *)(v3 + 32), 1);
    ServiceBox::findService<GameserverService>();
    GameserverService::getConfig((GameserverService *const)(v3 + 96));
    v9 = std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 96));
    scene_id = LuaConfigMgr::getSceneIdByGroupId(&v9->design_config.lua_config_mgr, *(_DWORD *)(v3 + 32));
    std::shared_ptr<Config>::~shared_ptr((std::shared_ptr<Config> *const)(v3 + 96));
    if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
      __asan_report_load8();
    SceneComp = (unsigned int)Player::getSceneComp(context->player);
    PlayerSceneComp::findScene((const PlayerSceneComp *const)(v3 + 96), SceneComp);
    if ( std::operator==<Scene>((const std::shared_ptr<Scene> *)(v3 + 96), 0LL) )
    {
      v6 = -1;
    }
    else
    {
      v11 = std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 96));
      BlockGroupComp = Scene::getBlockGroupComp(v11);
      if ( *(_BYTE *)(((unsigned __int64)BlockGroupComp >> 3) + 0x7FFF8000) )
        __asan_report_load8();
      v13 = (unsigned __int64)(BlockGroupComp->_vptr_SceneCompBase + 12);
      if ( *(_BYTE *)((v13 >> 3) + 0x7FFF8000) )
        __asan_report_load8();
      v14 = *(__int64 (__fastcall **)(SceneBlockGroupComp *, unsigned __int64, _QWORD, _QWORD))v13;
      *(_DWORD *)(v3 + 48) = *(_DWORD *)(v3 + 32);
      __l._M_array = (std::initializer_list<unsigned int>::iterator)(v3 + 48);
      __l._M_len = 1LL;
      std::allocator<unsigned int>::allocator(&__a);
      std::vector<unsigned int>::vector((std::vector<unsigned int> *const)(v3 + 128), __l, &__a);
      v6 = v14(BlockGroupComp, v3 + 128, 0LL, 0LL);
      std::vector<unsigned int>::~vector((std::vector<unsigned int> *const)(v3 + 128));
      std::allocator<unsigned int>::~allocator(&__a);
    }
LABEL_42:
    std::shared_ptr<Scene>::~shared_ptr((std::shared_ptr<Scene> *const)(v3 + 96));
    goto LABEL_89;
  }
  v15 = std::vector<std::string>::operator[](param_vec, 0LL);
  if ( std::operator==<char>(v15, "UNREG") )
  {
    if ( std::vector<std::string>::size(param_vec) <= 1 )
    {
      common::milog::MiLogStream::create(
        &v71,
        &common::milog::MiLogDefault::default_log_obj_,
        1u,
        "./src/player/gm/player_gm_comp.cpp",
        "procDynamicGroup",
        14652);
      common::milog::MiLogStream::operator<<<char [17],(char *[17])0>(&v71, "param not enough");
      common::milog::MiLogStream::~MiLogStream(&v71);
      v6 = -1;
      goto LABEL_89;
    }
    *(_DWORD *)(v3 + 32) = 0;
    v16 = std::vector<std::string>::operator[](param_vec, 1uLL);
    common::tools::StringUtils::strToNum<unsigned int>(v16, (unsigned int *)(v3 + 32), 1);
    ServiceBox::findService<GameserverService>();
    GameserverService::getConfig((GameserverService *const)(v3 + 96));
    v17 = std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 96));
    scene_id_0 = LuaConfigMgr::getSceneIdByGroupId(&v17->design_config.lua_config_mgr, *(_DWORD *)(v3 + 32));
    std::shared_ptr<Config>::~shared_ptr((std::shared_ptr<Config> *const)(v3 + 96));
    if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
      __asan_report_load8();
    v18 = (unsigned int)Player::getSceneComp(context->player);
    PlayerSceneComp::findScene((const PlayerSceneComp *const)(v3 + 96), v18);
    if ( std::operator==<Scene>((const std::shared_ptr<Scene> *)(v3 + 96), 0LL) )
    {
      v6 = -1;
    }
    else
    {
      v19 = std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 96));
      v20 = Scene::getBlockGroupComp(v19);
      if ( *(_BYTE *)(((unsigned __int64)v20 >> 3) + 0x7FFF8000) )
        __asan_report_load8();
      v21 = (unsigned __int64)(v20->_vptr_SceneCompBase + 13);
      if ( *(_BYTE *)((v21 >> 3) + 0x7FFF8000) )
        __asan_report_load8();
      v22 = *(__int64 (__fastcall **)(SceneBlockGroupComp *, unsigned __int64, __int64))v21;
      *(_DWORD *)(v3 + 48) = *(_DWORD *)(v3 + 32);
      v58._M_array = (std::initializer_list<unsigned int>::iterator)(v3 + 48);
      v58._M_len = 1LL;
      std::allocator<unsigned int>::allocator(&__a);
      std::vector<unsigned int>::vector((std::vector<unsigned int> *const)(v3 + 128), v58, &__a);
      v6 = v22(v20, v3 + 128, 1LL);
      std::vector<unsigned int>::~vector((std::vector<unsigned int> *const)(v3 + 128));
      std::allocator<unsigned int>::~allocator(&__a);
    }
    goto LABEL_42;
  }
  v23 = std::vector<std::string>::operator[](param_vec, 0LL);
  if ( std::operator==<char>(v23, "DELAY") )
  {
    if ( std::vector<std::string>::size(param_vec) <= 1 )
    {
      common::milog::MiLogStream::create(
        &v71,
        &common::milog::MiLogDefault::default_log_obj_,
        1u,
        "./src/player/gm/player_gm_comp.cpp",
        "procDynamicGroup",
        14669);
      common::milog::MiLogStream::operator<<<char [17],(char *[17])0>(&v71, "param not enough");
      common::milog::MiLogStream::~MiLogStream(&v71);
      v6 = -1;
      goto LABEL_89;
    }
    *(_DWORD *)(v3 + 32) = 0;
    v24 = std::vector<std::string>::operator[](param_vec, 1uLL);
    common::tools::StringUtils::strToNum<unsigned int>(v24, (unsigned int *)(v3 + 32), 1);
    ServiceBox::findService<GameserverService>();
    GameserverService::getConfig((GameserverService *const)(v3 + 96));
    v25 = std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 96));
    scene_id_1 = LuaConfigMgr::getSceneIdByGroupId(&v25->design_config.lua_config_mgr, *(_DWORD *)(v3 + 32));
    std::shared_ptr<Config>::~shared_ptr((std::shared_ptr<Config> *const)(v3 + 96));
    if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
      __asan_report_load8();
    v26 = (unsigned int)Player::getSceneComp(context->player);
    PlayerSceneComp::findScene((const PlayerSceneComp *const)(v3 + 96), v26);
    if ( std::operator==<Scene>((const std::shared_ptr<Scene> *)(v3 + 96), 0LL) )
    {
      v6 = -1;
    }
    else
    {
      v27 = std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 96));
      v28 = Scene::getBlockGroupComp(v27);
      if ( *(_BYTE *)(((unsigned __int64)v28 >> 3) + 0x7FFF8000) )
        __asan_report_load8();
      v29 = (unsigned __int64)(v28->_vptr_SceneCompBase + 13);
      if ( *(_BYTE *)((v29 >> 3) + 0x7FFF8000) )
        __asan_report_load8();
      v30 = *(__int64 (__fastcall **)(SceneBlockGroupComp *, unsigned __int64, _QWORD))v29;
      *(_DWORD *)(v3 + 48) = *(_DWORD *)(v3 + 32);
      v59._M_array = (std::initializer_list<unsigned int>::iterator)(v3 + 48);
      v59._M_len = 1LL;
      std::allocator<unsigned int>::allocator(&__a);
      std::vector<unsigned int>::vector((std::vector<unsigned int> *const)(v3 + 128), v59, &__a);
      v6 = v30(v28, v3 + 128, 0LL);
      std::vector<unsigned int>::~vector((std::vector<unsigned int> *const)(v3 + 128));
      std::allocator<unsigned int>::~allocator(&__a);
    }
    goto LABEL_42;
  }
  v31 = std::vector<std::string>::operator[](param_vec, 0LL);
  if ( std::operator==<char>(v31, "RELOAD") )
  {
    if ( *(_BYTE *)(((unsigned __int64)&context->scene >> 3) + 0x7FFF8000) )
      __asan_report_load8();
    v32 = Scene::getBlockGroupComp(context->scene);
    v6 = SceneBlockGroupComp::reloadGroupByGm(v32);
  }
  else
  {
    v33 = std::vector<std::string>::operator[](param_vec, 0LL);
    if ( !std::operator==<char>(v33, "REG_BY_SCENE") )
    {
      v43 = std::vector<std::string>::operator[](param_vec, 0LL);
      if ( std::operator==<char>(v43, "REG_RANDOM_BATCH") )
      {
        if ( std::vector<std::string>::size(param_vec) <= 2 )
        {
          common::milog::MiLogStream::create(
            &v71,
            &common::milog::MiLogDefault::default_log_obj_,
            1u,
            "./src/player/gm/player_gm_comp.cpp",
            "procDynamicGroup",
            14723);
          common::milog::MiLogStream::operator<<<char [17],(char *[17])0>(&v71, "param not enough");
          common::milog::MiLogStream::~MiLogStream(&v71);
          v6 = -1;
          goto LABEL_89;
        }
        *(_DWORD *)(v3 + 32) = 0;
        v44 = std::vector<std::string>::operator[](param_vec, 1uLL);
        common::tools::StringUtils::strToNum<unsigned int>(v44, (unsigned int *)(v3 + 32), 1);
        if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
          __asan_report_load8();
        v45 = (unsigned int)Player::getSceneComp(context->player);
        PlayerSceneComp::findScene((const PlayerSceneComp *const)(v3 + 96), v45);
        if ( std::operator==<Scene>((const std::shared_ptr<Scene> *)(v3 + 96), 0LL) )
        {
          common::milog::MiLogStream::create(
            &v71,
            &common::milog::MiLogDefault::default_log_obj_,
            1u,
            "./src/player/gm/player_gm_comp.cpp",
            "procDynamicGroup",
            14731);
          v46 = common::milog::MiLogStream::operator<<<char [23],(char *[23])0>(
                  &v71,
                  (const char (*)[23])"cannot find scene_id: ");
          common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v46, (const unsigned int *)(v3 + 32));
          common::milog::MiLogStream::~MiLogStream(&v71);
          v6 = -1;
        }
        else
        {
          *(_DWORD *)(v3 + 48) = 0;
          v47 = std::vector<std::string>::operator[](param_vec, 2uLL);
          common::tools::StringUtils::strToNum<unsigned int>(v47, (unsigned int *)(v3 + 48), 1);
          if ( *(_DWORD *)(v3 + 48) )
          {
            v48 = std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 96));
            v49 = Scene::getBlockGroupComp(v48);
            v6 = SceneBlockGroupComp::randomSelectAndRegisterGroupsByGm(v49, *(_DWORD *)(v3 + 48));
          }
          else
          {
            common::milog::MiLogStream::create(
              &v71,
              &common::milog::MiLogDefault::default_log_obj_,
              1u,
              "./src/player/gm/player_gm_comp.cpp",
              "procDynamicGroup",
              14738);
            common::milog::MiLogStream::operator<<<char [48],(char *[48])0>(
              &v71,
              (const char (*)[48])"REG_RANDOM_BATCH group count cannot less than 0");
            common::milog::MiLogStream::~MiLogStream(&v71);
            v6 = -1;
          }
        }
      }
      else
      {
        v50 = std::vector<std::string>::operator[](param_vec, 0LL);
        if ( !std::operator==<char>(v50, "UNREG_ALL_RANDOM_BATCH") )
        {
          v6 = -1;
          goto LABEL_89;
        }
        if ( std::vector<std::string>::size(param_vec) <= 1 )
        {
          common::milog::MiLogStream::create(
            &v71,
            &common::milog::MiLogDefault::default_log_obj_,
            1u,
            "./src/player/gm/player_gm_comp.cpp",
            "procDynamicGroup",
            14747);
          common::milog::MiLogStream::operator<<<char [17],(char *[17])0>(&v71, "param not enough");
          common::milog::MiLogStream::~MiLogStream(&v71);
          v6 = -1;
          goto LABEL_89;
        }
        *(_DWORD *)(v3 + 48) = 0;
        v51 = std::vector<std::string>::operator[](param_vec, 1uLL);
        common::tools::StringUtils::strToNum<unsigned int>(v51, (unsigned int *)(v3 + 48), 1);
        if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
          __asan_report_load8();
        v52 = (unsigned int)Player::getSceneComp(context->player);
        PlayerSceneComp::findScene((const PlayerSceneComp *const)(v3 + 96), v52);
        if ( std::operator==<Scene>((const std::shared_ptr<Scene> *)(v3 + 96), 0LL) )
        {
          common::milog::MiLogStream::create(
            &v71,
            &common::milog::MiLogDefault::default_log_obj_,
            1u,
            "./src/player/gm/player_gm_comp.cpp",
            "procDynamicGroup",
            14755);
          v53 = common::milog::MiLogStream::operator<<<char [23],(char *[23])0>(
                  &v71,
                  (const char (*)[23])"cannot find scene_id: ");
          common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v53, (const unsigned int *)(v3 + 48));
          common::milog::MiLogStream::~MiLogStream(&v71);
          v6 = -1;
        }
        else
        {
          v54 = std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 96));
          v55 = Scene::getBlockGroupComp(v54);
          v6 = SceneBlockGroupComp::unregisterAllRandomSelectedGroupsByGm(v55);
        }
      }
      std::shared_ptr<Scene>::~shared_ptr((std::shared_ptr<Scene> *const)(v3 + 96));
      goto LABEL_89;
    }
    if ( std::vector<std::string>::size(param_vec) > 1 )
    {
      *(_DWORD *)(v3 + 48) = 0;
      v34 = std::vector<std::string>::operator[](param_vec, 1uLL);
      common::tools::StringUtils::strToNum<unsigned int>(v34, (unsigned int *)(v3 + 48), 1);
      if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
        __asan_report_load8();
      v35 = (unsigned int)Player::getSceneComp(context->player);
      PlayerSceneComp::findScene((const PlayerSceneComp *const)(v3 + 64), v35);
      if ( std::operator==<Scene>((const std::shared_ptr<Scene> *)(v3 + 64), 0LL) )
      {
        common::milog::MiLogStream::create(
          &v71,
          &common::milog::MiLogDefault::default_log_obj_,
          1u,
          "./src/player/gm/player_gm_comp.cpp",
          "procDynamicGroup",
          14699);
        v36 = common::milog::MiLogStream::operator<<<char [23],(char *[23])0>(
                &v71,
                (const char (*)[23])"cannot find scene_id: ");
        common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v36, (const unsigned int *)(v3 + 48));
        common::milog::MiLogStream::~MiLogStream(&v71);
        v6 = -1;
      }
      else
      {
        ServiceBox::findService<GameserverService>();
        GameserverService::getConfig((GameserverService *const)(v3 + 96));
        v37 = std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 96));
        scene_script_config_ptr = LuaConfigMgr::findSceneScriptConfig(
                                    &v37->design_config.lua_config_mgr,
                                    *(_DWORD *)(v3 + 48));
        std::shared_ptr<Config>::~shared_ptr((std::shared_ptr<Config> *const)(v3 + 96));
        if ( scene_script_config_ptr )
        {
          std::vector<unsigned int>::vector((std::vector<unsigned int> *const)(v3 + 128));
          __for_range = &scene_script_config_ptr->group_info_map;
          __for_begin._M_cur = std::unordered_map<unsigned int,GroupInfoScriptConfig>::begin(&scene_script_config_ptr->group_info_map)._M_cur;
          __for_end._M_cur = std::unordered_map<unsigned int,GroupInfoScriptConfig>::end(&scene_script_config_ptr->group_info_map)._M_cur;
          while ( std::__detail::operator!=<std::pair<unsigned int const,GroupInfoScriptConfig>,false>(
                    &__for_begin,
                    &__for_end) )
          {
            v68 = std::__detail::_Node_const_iterator<std::pair<unsigned int const,GroupInfoScriptConfig>,false,false>::operator*(&__for_begin);
            group_id = std::get<0ul,unsigned int const,GroupInfoScriptConfig>(v68);
            group_info_config = (std::tuple_element<1,const std::pair<unsigned int const,GroupInfoScriptConfig> >::type *)std::get<1ul,unsigned int const,GroupInfoScriptConfig>(v68);
            if ( *(char *)(((unsigned __int64)&group_info_config->is_dynamic_load >> 3) + 0x7FFF8000) < 0 )
              __asan_report_load1(&group_info_config->is_dynamic_load);
            if ( group_info_config->is_dynamic_load )
              std::vector<unsigned int>::emplace_back<unsigned int const&>(
                (std::vector<unsigned int> *const)(v3 + 128),
                group_id,
                group_id);
            std::__detail::_Node_const_iterator<std::pair<unsigned int const,GroupInfoScriptConfig>,false,false>::operator++(&__for_begin);
          }
          common::milog::MiLogStream::create(
            &v71,
            &common::milog::MiLogDefault::default_log_obj_,
            1u,
            "./src/player/gm/player_gm_comp.cpp",
            "procDynamicGroup",
            14716);
          v39 = common::milog::MiLogStream::operator<<<char [30],(char *[30])0>(
                  &v71,
                  (const char (*)[30])"REG_BY_SCENE group_vec size: ");
          __for_end._M_cur = (std::__detail::_Node_iterator_base<std::pair<unsigned int const,GroupInfoScriptConfig>,false>::__node_type *)std::vector<unsigned int>::size((const std::vector<unsigned int> *const)(v3 + 128));
          common::milog::MiLogStream::operator<<<unsigned long,(unsigned long *)0>(
            v39,
            (const unsigned __int64 *)&__for_end);
          common::milog::MiLogStream::~MiLogStream(&v71);
          v40 = std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 64));
          v41 = Scene::getBlockGroupComp(v40);
          if ( *(_BYTE *)(((unsigned __int64)v41 >> 3) + 0x7FFF8000) )
            __asan_report_load8();
          v42 = (unsigned __int64)(v41->_vptr_SceneCompBase + 12);
          if ( *(_BYTE *)((v42 >> 3) + 0x7FFF8000) )
            __asan_report_load8();
          v6 = (*(__int64 (__fastcall **)(SceneBlockGroupComp *, unsigned __int64, _QWORD, _QWORD))v42)(
                 v41,
                 v3 + 128,
                 0LL,
                 0LL);
          std::vector<unsigned int>::~vector((std::vector<unsigned int> *const)(v3 + 128));
        }
        else
        {
          common::milog::MiLogStream::create(
            &v71,
            &common::milog::MiLogDefault::default_log_obj_,
            1u,
            "./src/player/gm/player_gm_comp.cpp",
            "procDynamicGroup",
            14705);
          v38 = common::milog::MiLogStream::operator<<<char [33],(char *[33])0>(
                  &v71,
                  (const char (*)[33])"cannot find config of scene_id: ");
          common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v38, (const unsigned int *)(v3 + 48));
          common::milog::MiLogStream::~MiLogStream(&v71);
          v6 = -1;
        }
      }
      std::shared_ptr<Scene>::~shared_ptr((std::shared_ptr<Scene> *const)(v3 + 64));
    }
    else
    {
      common::milog::MiLogStream::create(
        &v71,
        &common::milog::MiLogDefault::default_log_obj_,
        1u,
        "./src/player/gm/player_gm_comp.cpp",
        "procDynamicGroup",
        14691);
      common::milog::MiLogStream::operator<<<char [17],(char *[17])0>(&v71, "param not enough");
      common::milog::MiLogStream::~MiLogStream(&v71);
      v6 = -1;
    }
  }
LABEL_89:
  result = v6;
  if ( v72 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8010) = 0LL;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 14763: range 0000000017D7B71C-0000000017D7B7BE
void __cdecl procOfflineOpRegister::procOfflineOpRegister(procOfflineOpRegister *const this)
{
  std::function<int(GmContext&,const std::vector<std::string>&,std::string&)> *v1; // rax
  std::allocator<char> __a; // [rsp+1Fh] [rbp-31h] BYREF
  std::string __k; // [rsp+20h] [rbp-30h] BYREF

  std::allocator<char>::allocator(&__a);
  std::string::basic_string<std::allocator<char>>(&__k, "OFFLINE_OP", &__a);
  v1 = std::unordered_map<std::string,std::function<int ()(GmContext &,std::vector<std::string> const&,std::string&)>>::operator[](
         &GmUtils::op_func_map[abi:cxx11],
         &__k);
  std::function<int ()(GmContext &,std::vector<std::string> const&,std::string&)>::operator=<int (&)(GmContext &,std::vector<std::string> const&,std::string&)>(
    v1,
    (int (*)(GmContext *, const std::vector<std::string> *, std::string *))procOfflineOp);
  std::string::~string(&__k);
  std::allocator<char>::~allocator(&__a);
};

// Line 14764: range 0000000017C356EF-0000000017C35A32
int32_t __cdecl procOfflineOp(GmContext *context, const std::vector<std::string> *param_vec, std::string *ret_msg)
{
  unsigned __int64 v3; // rbx
  __int64 v4; // rax
  _DWORD *v5; // r12
  int32_t result; // eax
  common::milog::MiLogStream *v7; // rdx
  common::milog::MiLogStream *v8; // rdx
  std::vector<std::string>::const_reference uid_str; // [rsp+20h] [rbp-C0h]
  std::vector<std::string>::const_reference msg_str; // [rsp+28h] [rbp-B8h]
  std::vector<std::string>::const_reference max_length_str; // [rsp+30h] [rbp-B0h]
  PlayerOfflineOpComp *comp; // [rsp+38h] [rbp-A8h]
  common::milog::MiLogStream v13; // [rsp+40h] [rbp-A0h] BYREF
  char v14[128]; // [rsp+60h] [rbp-80h] BYREF

  v3 = (unsigned __int64)v14;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_1(96LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "2 48 4 9 uid:14772 64 4 16 max_length:14773";
  *(_QWORD *)(v3 + 16) = procOfflineOp;
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = -234556943;
  v5[536862722] = -202116348;
  if ( std::vector<std::string>::size(param_vec) == 3 )
  {
    uid_str = std::vector<std::string>::operator[](param_vec, 0LL);
    msg_str = std::vector<std::string>::operator[](param_vec, 1uLL);
    max_length_str = std::vector<std::string>::operator[](param_vec, 2uLL);
    *(_DWORD *)(v3 + 48) = 0;
    *(_DWORD *)(v3 + 64) = 0;
    if ( common::tools::StringUtils::strToNum<unsigned int>(uid_str, (unsigned int *)(v3 + 48), 1) )
    {
      common::milog::MiLogStream::create(
        &v13,
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/player/gm/player_gm_comp.cpp",
        "procOfflineOp",
        14776);
      v7 = common::milog::MiLogStream::operator<<<char [23],(char *[23])0>(
             &v13,
             (const char (*)[23])"invalid param uid_str:");
      common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v7, uid_str);
      common::milog::MiLogStream::~MiLogStream(&v13);
      result = -1;
    }
    else if ( common::tools::StringUtils::strToNum<unsigned int>(max_length_str, (unsigned int *)(v3 + 64), 1) )
    {
      common::milog::MiLogStream::create(
        &v13,
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/player/gm/player_gm_comp.cpp",
        "procOfflineOp",
        14781);
      v8 = common::milog::MiLogStream::operator<<<char [30],(char *[30])0>(
             &v13,
             (const char (*)[30])"invalid param max_length_str:");
      common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v8, max_length_str);
      common::milog::MiLogStream::~MiLogStream(&v13);
      result = -1;
    }
    else
    {
      if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
        __asan_report_load8();
      comp = Player::getOfflineOpComp(context->player);
      PlayerOfflineOpComp::onSendTestOfflineOp(comp, *(_DWORD *)(v3 + 48), msg_str, *(_DWORD *)(v3 + 64));
      result = 0;
    }
  }
  else
  {
    result = -1;
  }
  if ( v14 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8008) = 0;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8008) = -168430091;
  }
  return result;
};

// Line 14789: range 0000000017D7B7C0-0000000017D7B862
void __cdecl procChannellerSlabActivityRegister::procChannellerSlabActivityRegister(
        procChannellerSlabActivityRegister *const this)
{
  std::function<int(GmContext&,const std::vector<std::string>&,std::string&)> *v1; // rax
  std::allocator<char> __a; // [rsp+1Fh] [rbp-31h] BYREF
  std::string __k; // [rsp+20h] [rbp-30h] BYREF

  std::allocator<char>::allocator(&__a);
  std::string::basic_string<std::allocator<char>>(&__k, "CHANNELLER_SLAB_ACTIVITY", &__a);
  v1 = std::unordered_map<std::string,std::function<int ()(GmContext &,std::vector<std::string> const&,std::string&)>>::operator[](
         &GmUtils::op_func_map[abi:cxx11],
         &__k);
  std::function<int ()(GmContext &,std::vector<std::string> const&,std::string&)>::operator=<int (&)(GmContext &,std::vector<std::string> const&,std::string&)>(
    v1,
    (int (*)(GmContext *, const std::vector<std::string> *, std::string *))procChannellerSlabActivity);
  std::string::~string(&__k);
  std::allocator<char>::~allocator(&__a);
};

// Line 14790: range 0000000017C35A33-0000000017C3662D
int32_t __cdecl procChannellerSlabActivity(
        GmContext *context,
        const std::vector<std::string> *param_vec,
        std::string *ret_msg)
{
  unsigned __int64 v3; // r14
  __int64 v4; // rax
  _DWORD *v5; // r13
  int32_t v6; // r12d
  const std::string *v7; // rax
  const std::string *v8; // rax
  common::milog::MiLogStream *v9; // r12
  const std::string *v10; // rax
  ChannellerSlabActivity *v11; // rax
  const std::string *v12; // rax
  ChannellerSlabActivity *v13; // rax
  const std::string *v14; // rax
  const std::string *v15; // rax
  common::milog::MiLogStream *v16; // r12
  const std::string *v17; // rax
  ChannellerSlabActivity *v18; // rax
  const std::string *v19; // rax
  const std::string *v20; // rax
  common::milog::MiLogStream *v21; // r12
  const std::string *v22; // rax
  const std::string *v23; // rax
  common::milog::MiLogStream *v24; // r12
  const std::string *v25; // rax
  ChannellerSlabActivity *v26; // rax
  const std::string *v27; // rax
  ChannellerSlabActivity *v28; // rax
  const std::string *v29; // rax
  const std::string *v30; // rax
  const std::string *v31; // rax
  PlayerEventComp *EventComp; // r12
  const std::string *v33; // rax
  ChannellerSlabActivity *v34; // rax
  const std::string *v35; // rax
  ChannellerSlabActivity *v36; // rax
  int32_t result; // eax
  unsigned int *v38; // [rsp+0h] [rbp-140h]
  GmContext *contexta; // [rsp+18h] [rbp-128h]
  int *v41; // [rsp+20h] [rbp-120h]
  unsigned int v42; // [rsp+28h] [rbp-118h]
  unsigned int v43; // [rsp+2Ch] [rbp-114h] BYREF
  __int64 v44; // [rsp+30h] [rbp-110h] BYREF
  __int64 v45; // [rsp+38h] [rbp-108h] BYREF
  std::shared_ptr<BaseEvent> p_event_ptr; // [rsp+40h] [rbp-100h] BYREF
  common::milog::MiLogStream v47; // [rsp+50h] [rbp-F0h] BYREF
  char v48[208]; // [rsp+70h] [rbp-D0h] BYREF

  v3 = (unsigned __int64)v48;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_2(160LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "6 32 4 14 group_id:14878 48 4 15 gadget_id:14885 64 4 19 dungeon_index:14851 80 4 13 buff_id:148"
                        "12 96 16 18 activity_ptr:14797 128 16 15 event_ptr:14892";
  *(_QWORD *)(v3 + 16) = procChannellerSlabActivity;
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = -234556924;
  v5[536862722] = -234556924;
  v5[536862723] = -219021312;
  v5[536862724] = -202178560;
  if ( std::vector<std::string>::empty(param_vec) )
  {
    common::milog::MiLogStream::create(
      &v47,
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/player/gm/player_gm_comp.cpp",
      "procChannellerSlabActivity",
      14793);
    common::milog::MiLogStream::operator<<<char [17],(char *[17])0>(&v47, "param not enough");
    common::milog::MiLogStream::~MiLogStream(&v47);
    v6 = -1;
    goto LABEL_51;
  }
  if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
    __asan_report_load8();
  Player::getActivityComp(context->player);
  PlayerActivityComp::findOpenningActivity<ChannellerSlabActivity>((PlayerActivityComp *const)(v3 + 96));
  if ( !std::operator==<ChannellerSlabActivity>(0LL, (const std::shared_ptr<ChannellerSlabActivity> *)(v3 + 96)) )
  {
    v7 = std::vector<std::string>::operator[](param_vec, 0LL);
    if ( std::operator==<char>(v7, "ADD_BUFF") )
    {
      if ( std::vector<std::string>::size(param_vec) > 1 )
      {
        *(_DWORD *)(v3 + 80) = 0;
        v8 = std::vector<std::string>::operator[](param_vec, 1uLL);
        if ( common::tools::StringUtils::strToNum<unsigned int>(v8, (unsigned int *)(v3 + 80), 1) )
        {
          common::milog::MiLogStream::create(
            &v47,
            &common::milog::MiLogDefault::default_log_obj_,
            3u,
            "./src/player/gm/player_gm_comp.cpp",
            "procChannellerSlabActivity",
            14815);
          v9 = common::milog::MiLogStream::operator<<<char [15],(char *[15])0>(
                 &v47,
                 (const char (*)[15])"invalid param:");
          v10 = std::vector<std::string>::operator[](param_vec, 1uLL);
          common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v9, v10);
          common::milog::MiLogStream::~MiLogStream(&v47);
          v6 = -1;
        }
        else
        {
          v11 = std::__shared_ptr_access<ChannellerSlabActivity,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<ChannellerSlabActivity,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 96));
          v6 = ChannellerSlabActivity::addBuff(v11, *(_DWORD *)(v3 + 80));
        }
        goto LABEL_50;
      }
    }
    else
    {
      v12 = std::vector<std::string>::operator[](param_vec, 0LL);
      if ( std::operator==<char>(v12, "ADD_BUFF_ALL") )
      {
        v13 = std::__shared_ptr_access<ChannellerSlabActivity,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<ChannellerSlabActivity,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 96));
        v6 = ChannellerSlabActivity::addAllBuffByGM(v13);
        goto LABEL_50;
      }
      v14 = std::vector<std::string>::operator[](param_vec, 0LL);
      if ( std::operator==<char>(v14, "ADD_BUFF_ENERGY") )
      {
        if ( std::vector<std::string>::size(param_vec) > 1 )
        {
          *(_DWORD *)(v3 + 80) = 0;
          v15 = std::vector<std::string>::operator[](param_vec, 1uLL);
          if ( common::tools::StringUtils::strToNum<unsigned int>(v15, (unsigned int *)(v3 + 80), 1) )
          {
            common::milog::MiLogStream::create(
              &v47,
              &common::milog::MiLogDefault::default_log_obj_,
              3u,
              "./src/player/gm/player_gm_comp.cpp",
              "procChannellerSlabActivity",
              14836);
            v16 = common::milog::MiLogStream::operator<<<char [15],(char *[15])0>(
                    &v47,
                    (const char (*)[15])"invalid param:");
            v17 = std::vector<std::string>::operator[](param_vec, 1uLL);
            common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v16, v17);
            common::milog::MiLogStream::~MiLogStream(&v47);
            v6 = -1;
          }
          else
          {
            v18 = std::__shared_ptr_access<ChannellerSlabActivity,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<ChannellerSlabActivity,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 96));
            ChannellerSlabActivity::addBuffEnergyByGm(v18, *(_DWORD *)(v3 + 80));
            v6 = 0;
          }
          goto LABEL_50;
        }
      }
      else
      {
        v19 = std::vector<std::string>::operator[](param_vec, 0LL);
        if ( std::operator==<char>(v19, "PASS_LOOP_DUNGEON") )
        {
          if ( std::vector<std::string>::size(param_vec) > 2 )
          {
            *(_DWORD *)(v3 + 64) = 0;
            v20 = std::vector<std::string>::operator[](param_vec, 1uLL);
            if ( common::tools::StringUtils::strToNum<unsigned int>(v20, (unsigned int *)(v3 + 64), 1) )
            {
              common::milog::MiLogStream::create(
                &v47,
                &common::milog::MiLogDefault::default_log_obj_,
                3u,
                "./src/player/gm/player_gm_comp.cpp",
                "procChannellerSlabActivity",
                14854);
              v21 = common::milog::MiLogStream::operator<<<char [15],(char *[15])0>(
                      &v47,
                      (const char (*)[15])"invalid param:");
              v22 = std::vector<std::string>::operator[](param_vec, 1uLL);
              common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v21, v22);
              common::milog::MiLogStream::~MiLogStream(&v47);
              v6 = -1;
            }
            else
            {
              *(_DWORD *)(v3 + 80) = 0;
              v23 = std::vector<std::string>::operator[](param_vec, 2uLL);
              if ( common::tools::StringUtils::strToNum<unsigned int>(v23, (unsigned int *)(v3 + 80), 1) )
              {
                common::milog::MiLogStream::create(
                  &v47,
                  &common::milog::MiLogDefault::default_log_obj_,
                  3u,
                  "./src/player/gm/player_gm_comp.cpp",
                  "procChannellerSlabActivity",
                  14861);
                v24 = common::milog::MiLogStream::operator<<<char [15],(char *[15])0>(
                        &v47,
                        (const char (*)[15])"invalid param:");
                v25 = std::vector<std::string>::operator[](param_vec, 2uLL);
                common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v24, v25);
                common::milog::MiLogStream::~MiLogStream(&v47);
                v6 = -1;
              }
              else
              {
                v26 = std::__shared_ptr_access<ChannellerSlabActivity,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<ChannellerSlabActivity,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 96));
                v6 = ChannellerSlabActivity::passLoopDungeonByGm(v26, *(_DWORD *)(v3 + 64), *(_DWORD *)(v3 + 80));
              }
            }
            goto LABEL_50;
          }
        }
        else
        {
          v27 = std::vector<std::string>::operator[](param_vec, 0LL);
          if ( std::operator==<char>(v27, "RESET_LOOP_DUNGEON_REWARD") )
          {
            v28 = std::__shared_ptr_access<ChannellerSlabActivity,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<ChannellerSlabActivity,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 96));
            v6 = ChannellerSlabActivity::resetLoopDungeonRewardByGm(v28);
            goto LABEL_50;
          }
          v29 = std::vector<std::string>::operator[](param_vec, 0LL);
          if ( !std::operator==<char>(v29, "REWARD_EVENT") )
          {
            v33 = std::vector<std::string>::operator[](param_vec, 0LL);
            if ( std::operator==<char>(v33, "FINISH_ONE_CAMP") )
            {
              v34 = std::__shared_ptr_access<ChannellerSlabActivity,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<ChannellerSlabActivity,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 96));
              v6 = ChannellerSlabActivity::finishOneCampByGM(v34);
            }
            else
            {
              v35 = std::vector<std::string>::operator[](param_vec, 0LL);
              if ( std::operator==<char>(v35, "RESET_ALL_CAMP") )
              {
                v36 = std::__shared_ptr_access<ChannellerSlabActivity,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<ChannellerSlabActivity,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 96));
                v6 = ChannellerSlabActivity::resetAllCampByGM(v36);
              }
              else
              {
                v6 = 0;
              }
            }
            goto LABEL_50;
          }
          if ( std::vector<std::string>::size(param_vec) > 2 )
          {
            *(_DWORD *)(v3 + 32) = 0;
            v30 = std::vector<std::string>::operator[](param_vec, 1uLL);
            if ( common::tools::StringUtils::strToNum<unsigned int>(v30, (unsigned int *)(v3 + 32), 1) )
            {
              common::milog::MiLogStream::create(
                &v47,
                &common::milog::MiLogDefault::default_log_obj_,
                4u,
                "./src/player/gm/player_gm_comp.cpp",
                "procChannellerSlabActivity",
                14881);
              common::milog::MiLogStream::operator()(&v47, "parse group_id failed");
              common::milog::MiLogStream::~MiLogStream(&v47);
              v6 = -1;
            }
            else
            {
              *(_DWORD *)(v3 + 48) = 0;
              v31 = std::vector<std::string>::operator[](param_vec, 2uLL);
              if ( common::tools::StringUtils::strToNum<unsigned int>(v31, (unsigned int *)(v3 + 48), 1) )
              {
                common::milog::MiLogStream::create(
                  &v47,
                  &common::milog::MiLogDefault::default_log_obj_,
                  4u,
                  "./src/player/gm/player_gm_comp.cpp",
                  "procChannellerSlabActivity",
                  14888);
                common::milog::MiLogStream::operator()(&v47, "parse gadget_id failed");
                common::milog::MiLogStream::~MiLogStream(&v47);
                v6 = -1;
              }
              else
              {
                *(_DWORD *)(v3 + 80) = 0;
                *(_DWORD *)(v3 + 64) = 0;
                common::tools::perf::make_shared<ChestOpenEvent,int,unsigned int &,int,int,unsigned int &,int,int,int,int>(
                  (int *)(v3 + 128),
                  &v43,
                  (int *)(v3 + 32),
                  (int *)&v44,
                  (unsigned int *)&v44 + 1,
                  (int *)(v3 + 48),
                  (int *)&v45,
                  (int *)&v45 + 1,
                  (int *)(v3 + 64),
                  (int *)(v3 + 80),
                  v38,
                  (int *)ret_msg,
                  (int *)param_vec,
                  (unsigned int *)context,
                  v41,
                  (int *)v42,
                  0LL,
                  0LL);
                if ( std::operator==<ChestOpenEvent>((const std::shared_ptr<ChestOpenEvent> *)(v3 + 128), 0LL) )
                {
                  common::milog::MiLogStream::create(
                    &v47,
                    &common::milog::MiLogDefault::default_log_obj_,
                    3u,
                    "./src/player/gm/player_gm_comp.cpp",
                    "procChannellerSlabActivity",
                    14895);
                  common::milog::MiLogStream::operator<<<char [18],(char *[18])0>(
                    &v47,
                    (const char (*)[18])"event_ptr is null");
                  common::milog::MiLogStream::~MiLogStream(&v47);
                  v6 = -1;
                }
                else
                {
                  if ( *(_BYTE *)(((unsigned __int64)&contexta->player >> 3) + 0x7FFF8000) )
                    __asan_report_load8();
                  EventComp = Player::getEventComp(contexta->player);
                  std::shared_ptr<BaseEvent>::shared_ptr<ChestOpenEvent,void>(
                    &p_event_ptr,
                    (const std::shared_ptr<ChestOpenEvent> *)(v3 + 128));
                  PlayerEventComp::notifyEvent(EventComp, &p_event_ptr);
                  std::shared_ptr<BaseEvent>::~shared_ptr(&p_event_ptr);
                  v6 = 0;
                }
                std::shared_ptr<ChestOpenEvent>::~shared_ptr((std::shared_ptr<ChestOpenEvent> *const)(v3 + 128));
              }
            }
            goto LABEL_50;
          }
        }
      }
    }
    std::string::operator=(ret_msg, "param not enough");
    v6 = -1;
    goto LABEL_50;
  }
  std::string::operator=(ret_msg, "channller slab activity is not open");
  v6 = -1;
LABEL_50:
  std::shared_ptr<ChannellerSlabActivity>::~shared_ptr((std::shared_ptr<ChannellerSlabActivity> *const)(v3 + 96));
LABEL_51:
  result = v6;
  if ( v48 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8010) = 0;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8010) = -168430091;
  }
  return result;
};

// Line 14913: range 0000000017D7B864-0000000017D7B906
void __cdecl procMistTrialActivityRegister::procMistTrialActivityRegister(procMistTrialActivityRegister *const this)
{
  std::function<int(GmContext&,const std::vector<std::string>&,std::string&)> *v1; // rax
  std::allocator<char> __a; // [rsp+1Fh] [rbp-31h] BYREF
  std::string __k; // [rsp+20h] [rbp-30h] BYREF

  std::allocator<char>::allocator(&__a);
  std::string::basic_string<std::allocator<char>>(&__k, "MIST_TRIAL_ACTIVITY", &__a);
  v1 = std::unordered_map<std::string,std::function<int ()(GmContext &,std::vector<std::string> const&,std::string&)>>::operator[](
         &GmUtils::op_func_map[abi:cxx11],
         &__k);
  std::function<int ()(GmContext &,std::vector<std::string> const&,std::string&)>::operator=<int (&)(GmContext &,std::vector<std::string> const&,std::string&)>(
    v1,
    (int (*)(GmContext *, const std::vector<std::string> *, std::string *))procMistTrialActivity);
  std::string::~string(&__k);
  std::allocator<char>::~allocator(&__a);
};

// Line 14914: range 0000000017C3662E-0000000017C36C01
int32_t __cdecl procMistTrialActivity(
        GmContext *context,
        const std::vector<std::string> *param_vec,
        std::string *ret_msg)
{
  unsigned __int64 v3; // r13
  __int64 v4; // rax
  _DWORD *v5; // r12
  int32_t v6; // r14d
  const std::string *v7; // rax
  const std::string *v8; // rax
  DungeonScene *v9; // r15
  uint32_t v10; // r14d
  uint32_t Uid; // eax
  __int64 v12; // rax
  __int64 v13; // rax
  __int64 v14; // rax
  int32_t result; // eax
  uint32_t stat_val; // [rsp+2Ch] [rbp-2B4h]
  char v18[32]; // [rsp+30h] [rbp-2B0h] BYREF
  char v19[656]; // [rsp+50h] [rbp-290h] BYREF

  v3 = (unsigned __int64)v19;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_4(608LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "5 32 4 13 stat_id:14945 48 16 18 activity_ptr:14915 80 16 15 scene_ptr:14933 112 16 17 dungeon_p"
                        "tr:14939 144 392 8 ss:14952";
  *(_QWORD *)(v3 + 16) = procMistTrialActivity;
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = 61956;
  v5[536862722] = 62194;
  v5[536862723] = 62194;
  v5[536862724] = 62194;
  v5[536862736] = -218103808;
  v5[536862737] = -202116109;
  v5[536862738] = -202116109;
  if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
    __asan_report_load8();
  Player::getActivityComp(context->player);
  PlayerActivityComp::findOpenningActivity<MistTrialActivity>((PlayerActivityComp *const)(v3 + 48));
  if ( std::operator==<MistTrialActivity>(0LL, (const std::shared_ptr<MistTrialActivity> *)(v3 + 48)) )
  {
    std::string::operator=(ret_msg, "activity is not open");
    v6 = -1;
    goto LABEL_26;
  }
  if ( !std::vector<std::string>::size(param_vec) )
    goto LABEL_9;
  v7 = std::vector<std::string>::operator[](param_vec, 0LL);
  if ( std::operator==<char>(v7, "PRINT_STAT") )
  {
    if ( std::vector<std::string>::size(param_vec) <= 1 )
    {
LABEL_9:
      std::string::operator=(ret_msg, "param not enough");
      v6 = -1;
      goto LABEL_26;
    }
    if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
      __asan_report_load8();
    Player::getSceneComp(context->player);
    PlayerSceneComp::getCurScene((const PlayerSceneComp *const)(v3 + 80));
    if ( std::operator==<Scene>(0LL, (const std::shared_ptr<Scene> *)(v3 + 80)) )
    {
      std::string::operator=(ret_msg, "scene_ptr is nullptr");
      v6 = -1;
    }
    else
    {
      std::dynamic_pointer_cast<DungeonScene,Scene>((const std::shared_ptr<Scene> *)(v3 + 112));
      if ( std::operator==<DungeonScene>(0LL, (const std::shared_ptr<DungeonScene> *)(v3 + 112)) )
      {
        std::string::operator=(ret_msg, "dungeon_ptr is nullptr");
        v6 = -1;
      }
      else
      {
        *(_DWORD *)(v3 + 32) = 0;
        v8 = std::vector<std::string>::operator[](param_vec, 1uLL);
        if ( common::tools::StringUtils::strToNum<unsigned int>(v8, (unsigned int *)(v3 + 32), 1) )
        {
          std::string::operator=(ret_msg, "strToNum failed");
          v6 = -1;
        }
        else
        {
          v9 = std::__shared_ptr_access<DungeonScene,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<DungeonScene,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 112));
          v10 = *(_DWORD *)(v3 + 32);
          if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
            __asan_report_load8();
          Uid = Player::getUid(context->player);
          stat_val = DungeonScene::getMistTrialStatValue(v9, Uid, v10);
          std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream(v3 + 144);
          v12 = std::operator<<<std::char_traits<char>>(v3 + 160, "MistTrial dungeon stat_id:");
          v13 = std::ostream::operator<<(v12, *(unsigned int *)(v3 + 32));
          v14 = std::operator<<<std::char_traits<char>>(v13, " value:");
          std::ostream::operator<<(v14, stat_val);
          std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::str(v18, v3 + 144);
          std::string::operator=(ret_msg, v18);
          std::string::~string(v18);
          v6 = 0;
          std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream(v3 + 144);
        }
      }
      std::shared_ptr<DungeonScene>::~shared_ptr((std::shared_ptr<DungeonScene> *const)(v3 + 112));
    }
    std::shared_ptr<Scene>::~shared_ptr((std::shared_ptr<Scene> *const)(v3 + 80));
  }
  else
  {
    v6 = 0;
  }
LABEL_26:
  std::shared_ptr<MistTrialActivity>::~shared_ptr((std::shared_ptr<MistTrialActivity> *const)(v3 + 48));
  result = v6;
  if ( v19 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8010) = 0;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8040) = 0LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8048) = 0;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8020) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8028) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8030) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8038) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8040) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8048) = -168430091;
  }
  return result;
};

// Line 14960: range 0000000017D7B908-0000000017D7B9AA
void __cdecl procExhibitionRegister::procExhibitionRegister(procExhibitionRegister *const this)
{
  std::function<int(GmContext&,const std::vector<std::string>&,std::string&)> *v1; // rax
  std::allocator<char> __a; // [rsp+1Fh] [rbp-31h] BYREF
  std::string __k; // [rsp+20h] [rbp-30h] BYREF

  std::allocator<char>::allocator(&__a);
  std::string::basic_string<std::allocator<char>>(&__k, "EXHIBITION", &__a);
  v1 = std::unordered_map<std::string,std::function<int ()(GmContext &,std::vector<std::string> const&,std::string&)>>::operator[](
         &GmUtils::op_func_map[abi:cxx11],
         &__k);
  std::function<int ()(GmContext &,std::vector<std::string> const&,std::string&)>::operator=<int (&)(GmContext &,std::vector<std::string> const&,std::string&)>(
    v1,
    (int (*)(GmContext *, const std::vector<std::string> *, std::string *))procExhibition);
  std::string::~string(&__k);
  std::allocator<char>::~allocator(&__a);
};

// Line 14961: range 0000000017C36C02-0000000017C37232
int32_t __cdecl procExhibition(GmContext *context, const std::vector<std::string> *param_vec, std::string *ret_msg)
{
  unsigned __int64 v3; // rbx
  __int64 v4; // rax
  unsigned __int64 v5; // r13
  int32_t result; // eax
  const std::string *v7; // rax
  const std::string *v8; // rax
  PlayerExhibitionComp *ExhibitionComp; // rax
  const std::string *v10; // rax
  PlayerExhibitionComp *v11; // rax
  const std::string *v12; // rax
  PlayerExhibitionComp *v13; // rax
  uint32_t series_id; // [rsp+20h] [rbp-110h]
  int32_t ret; // [rsp+24h] [rbp-10Ch]
  unsigned int value_0; // [rsp+28h] [rbp-108h]
  unsigned int value; // [rsp+2Ch] [rbp-104h]
  std::string __rhs; // [rsp+30h] [rbp-100h] BYREF
  std::string __lhs; // [rsp+50h] [rbp-E0h] BYREF
  std::string v21; // [rsp+70h] [rbp-C0h] BYREF
  std::string v22; // [rsp+90h] [rbp-A0h] BYREF
  std::string v23; // [rsp+B0h] [rbp-80h] BYREF
  char v24[96]; // [rsp+D0h] [rbp-60h] BYREF

  v3 = (unsigned __int64)v24;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_0(64LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "1 32 4 19 exhibition_id:14967";
  *(_QWORD *)(v3 + 16) = procExhibition;
  v5 = v3 >> 3;
  *(_DWORD *)(v5 + 2147450880) = -235802127;
  *(_DWORD *)(v5 + 2147450884) = -202116348;
  if ( std::vector<std::string>::size(param_vec) <= 1 )
  {
    std::string::operator=(ret_msg, "param not enough");
    result = -1;
    goto LABEL_24;
  }
  *(_DWORD *)(v3 + 32) = 0;
  v7 = std::vector<std::string>::operator[](param_vec, 1uLL);
  if ( common::tools::StringUtils::strToNum<unsigned int>(v7, (unsigned int *)(v3 + 32), 1) )
  {
    std::string::operator=(ret_msg, "strToNum failed");
    result = -1;
    goto LABEL_24;
  }
  v8 = std::vector<std::string>::operator[](param_vec, 0LL);
  if ( std::operator==<char>(v8, "ACCUMULABLE") )
  {
    if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
      __asan_report_load8();
    ExhibitionComp = Player::getExhibitionComp(context->player);
    value = PlayerExhibitionComp::getExhibitionAccumulableData(ExhibitionComp, *(_DWORD *)(v3 + 32));
    std::to_string(&v22, value);
    std::to_string(&__rhs, *(_DWORD *)(v3 + 32));
    std::operator+<char>(&__lhs, "exhibition_id:", &__rhs);
    std::operator+<char>(&v21, &__lhs, " accumulable_data:");
    std::operator+<char>(&v23, &v21, &v22);
    std::string::operator=(ret_msg, &v23);
    std::string::~string(&v23);
    std::string::~string(&v21);
    std::string::~string(&__lhs);
    std::string::~string(&__rhs);
    std::string::~string(&v22);
  }
  else
  {
    v10 = std::vector<std::string>::operator[](param_vec, 0LL);
    if ( std::operator==<char>(v10, "REPLACEABLE") )
    {
      if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
        __asan_report_load8();
      v11 = Player::getExhibitionComp(context->player);
      value_0 = PlayerExhibitionComp::getExhibitionReplaceableData(v11, *(_DWORD *)(v3 + 32));
      std::to_string(&v22, value_0);
      std::to_string(&__rhs, *(_DWORD *)(v3 + 32));
      std::operator+<char>(&__lhs, "exhibition_id:", &__rhs);
      std::operator+<char>(&v21, &__lhs, " replaceable_data:");
      std::operator+<char>(&v23, &v21, &v22);
      std::string::operator=(ret_msg, &v23);
      std::string::~string(&v23);
      std::string::~string(&v21);
      std::string::~string(&__lhs);
      std::string::~string(&__rhs);
      std::string::~string(&v22);
    }
    else
    {
      v12 = std::vector<std::string>::operator[](param_vec, 0LL);
      if ( !std::operator==<char>(v12, "CLEAR") )
      {
        std::string::operator=(ret_msg, "param error");
        result = -1;
        goto LABEL_24;
      }
      series_id = *(_DWORD *)(v3 + 32);
      if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
        __asan_report_load8();
      v13 = Player::getExhibitionComp(context->player);
      ret = PlayerExhibitionComp::clearSeriesExhibitionData(v13, series_id);
      if ( ret )
      {
        result = ret;
        goto LABEL_24;
      }
      std::to_string(&v22, series_id);
      std::operator+<char>(&v23, "clearSeriesExhibitionData success! series_id: ", &v22);
      std::string::operator=(ret_msg, &v23);
      std::string::~string(&v23);
      std::string::~string(&v22);
    }
  }
  result = 0;
LABEL_24:
  if ( v24 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 14999: range 0000000017D7B9AC-0000000017D7BA4E
void __cdecl procHideAndSeekActivityRegister::procHideAndSeekActivityRegister(
        procHideAndSeekActivityRegister *const this)
{
  std::function<int(GmContext&,const std::vector<std::string>&,std::string&)> *v1; // rax
  std::allocator<char> __a; // [rsp+1Fh] [rbp-31h] BYREF
  std::string __k; // [rsp+20h] [rbp-30h] BYREF

  std::allocator<char>::allocator(&__a);
  std::string::basic_string<std::allocator<char>>(&__k, "HIDE_AND_SEEK", &__a);
  v1 = std::unordered_map<std::string,std::function<int ()(GmContext &,std::vector<std::string> const&,std::string&)>>::operator[](
         &GmUtils::op_func_map[abi:cxx11],
         &__k);
  std::function<int ()(GmContext &,std::vector<std::string> const&,std::string&)>::operator=<int (&)(GmContext &,std::vector<std::string> const&,std::string&)>(
    v1,
    (int (*)(GmContext *, const std::vector<std::string> *, std::string *))procHideAndSeekActivity);
  std::string::~string(&__k);
  std::allocator<char>::~allocator(&__a);
};

// Line 15000: range 0000000017C37297-0000000017C37F01
int32_t __cdecl procHideAndSeekActivity(
        GmContext *context,
        const std::vector<std::string> *param_vec,
        std::string *ret_msg)
{
  unsigned __int64 v3; // r13
  __int64 v4; // rax
  _DWORD *v5; // r12
  int32_t started; // r14d
  const std::string *v7; // rax
  const std::string *v8; // rax
  common::milog::MiLogStream *v9; // r14
  std::__shared_ptr_access<World,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v10; // rax
  uint32_t OwnerUid; // r14d
  World *v12; // r14
  HideAndSeekActivity *v13; // rax
  const std::string *v14; // rax
  HideAndSeekActivity *v15; // rax
  const std::string *v16; // rax
  HideAndSeekActivity *v17; // rax
  const std::string *v18; // rax
  HideAndSeekActivity *v19; // rax
  const std::string *v20; // rax
  HideAndSeekActivity *v21; // rax
  const std::string *v22; // rax
  const std::string *v23; // rax
  HideAndSeekActivity *v24; // rax
  common::milog::MiLogStream *v25; // rax
  common::milog::MiLogStream *v26; // rax
  common::milog::MiLogStream *v27; // rax
  const std::string *v28; // rax
  const std::string *v29; // rax
  HideAndSeekActivity *v30; // rax
  const std::string *v31; // rax
  const std::string *M_current; // r14
  __gnu_cxx::__normal_iterator<const std::string*,std::vector<std::string> > v33; // rax
  HideAndSeekActivity *v34; // rax
  int32_t result; // eax
  std::allocator<std::string > __a; // [rsp+27h] [rbp-1D9h] BYREF
  __gnu_cxx::__normal_iterator<const std::string*,std::vector<std::string> > __rhs; // [rsp+28h] [rbp-1D8h] BYREF
  common::milog::MiLogStream v39; // [rsp+30h] [rbp-1D0h] BYREF
  char v40[432]; // [rsp+50h] [rbp-1B0h] BYREF

  v3 = (unsigned __int64)v40;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_3(384LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "8 48 4 12 map_id:15019 64 4 20 disappear_time:15091 80 8 10 iter:15067 112 16 18 activity_ptr:15"
                        "001 144 16 19 cur_world_ptr:15026 176 24 17 tmp_str_vec:15101 240 24 13 uid_vec:15102 304 48 23 "
                        "chosen_map_id_set:15066";
  *(_QWORD *)(v3 + 16) = procHideAndSeekActivity;
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = -234556943;
  v5[536862722] = 61956;
  v5[536862722] = -234881024;
  v5[536862723] = 62194;
  v5[536862724] = 62194;
  v5[536862725] = 62194;
  v5[536862726] = -218959360;
  v5[536862727] = 62194;
  v5[536862728] = -218959360;
  v5[536862729] = 62194;
  v5[536862731] = -202116109;
  if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
    __asan_report_load8();
  Player::getActivityComp(context->player);
  PlayerActivityComp::findOpenningActivity<HideAndSeekActivity>((PlayerActivityComp *const)(v3 + 112));
  if ( std::operator==<HideAndSeekActivity>(0LL, (const std::shared_ptr<HideAndSeekActivity> *)(v3 + 112)) )
  {
    std::string::operator=(ret_msg, "activity is not open");
    started = -1;
    goto LABEL_55;
  }
  if ( !std::vector<std::string>::size(param_vec) )
    goto LABEL_46;
  v7 = std::vector<std::string>::operator[](param_vec, 0LL);
  if ( !std::operator==<char>(v7, "START") )
  {
    v14 = std::vector<std::string>::operator[](param_vec, 0LL);
    if ( std::operator==<char>(v14, off_2636E0C0) )
    {
      v15 = std::__shared_ptr_access<HideAndSeekActivity,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<HideAndSeekActivity,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 112));
      started = HideAndSeekActivity::endHideAndSeekPlayByGm(v15);
      goto LABEL_55;
    }
    v16 = std::vector<std::string>::operator[](param_vec, 0LL);
    if ( std::operator==<char>(v16, "OPEN") )
    {
      v17 = std::__shared_ptr_access<HideAndSeekActivity,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<HideAndSeekActivity,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 112));
      HideAndSeekActivity::setPlayOpen(v17, 1);
      started = 0;
      goto LABEL_55;
    }
    v18 = std::vector<std::string>::operator[](param_vec, 0LL);
    if ( std::operator==<char>(v18, "END_STAGE") )
    {
      v19 = std::__shared_ptr_access<HideAndSeekActivity,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<HideAndSeekActivity,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 112));
      HideAndSeekActivity::endStageByGm(v19, 1);
      started = 0;
      goto LABEL_55;
    }
    v20 = std::vector<std::string>::operator[](param_vec, 0LL);
    if ( std::operator==<char>(v20, "OPEN_MAP") )
    {
      v21 = std::__shared_ptr_access<HideAndSeekActivity,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<HideAndSeekActivity,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 112));
      HideAndSeekActivity::openAllMapByGm(v21);
      started = 0;
      goto LABEL_55;
    }
    v22 = std::vector<std::string>::operator[](param_vec, 0LL);
    if ( std::operator==<char>(v22, "CHOOSE_MAP") )
    {
      std::set<unsigned int>::set((std::set<unsigned int> *const)(v3 + 304));
      __rhs._M_current = std::vector<std::string>::begin(param_vec)._M_current;
      *(__gnu_cxx::__normal_iterator<const std::string*,std::vector<std::string> > *)(v3 + 80) = __gnu_cxx::__normal_iterator<std::string const*,std::vector<std::string>>::operator+(
                                                                                                   &__rhs,
                                                                                                   1LL);
      while ( 1 )
      {
        __rhs._M_current = std::vector<std::string>::end(param_vec)._M_current;
        if ( !__gnu_cxx::operator!=<std::string const*,std::vector<std::string>>(
                (const __gnu_cxx::__normal_iterator<const std::string*,std::vector<std::string> > *)(v3 + 80),
                &__rhs) )
          break;
        v23 = __gnu_cxx::__normal_iterator<std::string const*,std::vector<std::string>>::operator*((const __gnu_cxx::__normal_iterator<const std::string*,std::vector<std::string> > *const)(v3 + 80));
        if ( common::tools::StringUtils::strToNum<unsigned int>(v23, (unsigned int *)(v3 + 64), 1) )
        {
          std::string::operator=(ret_msg, "strToNum failed");
          started = -1;
          goto LABEL_43;
        }
        std::set<unsigned int>::insert(
          (std::set<unsigned int> *const)(v3 + 304),
          (const std::set<unsigned int>::value_type *)(v3 + 64));
        __gnu_cxx::__normal_iterator<std::string const*,std::vector<std::string>>::operator++(
          (__gnu_cxx::__normal_iterator<const std::string*,std::vector<std::string> > *const)(v3 + 80),
          0);
      }
      v24 = std::__shared_ptr_access<HideAndSeekActivity,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<HideAndSeekActivity,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 112));
      *(_DWORD *)(v3 + 64) = HideAndSeekActivity::updateUnselectedHideAndSeekMap(
                               v24,
                               (const std::set<unsigned int> *)(v3 + 304));
      if ( *(_DWORD *)(v3 + 64) )
      {
        common::milog::MiLogStream::create(
          &v39,
          &common::milog::MiLogDefault::default_log_obj_,
          3u,
          "./src/player/gm/player_gm_comp.cpp",
          "procHideAndSeekActivity",
          15080);
        v25 = common::milog::MiLogStream::operator<<<char [38],(char *[38])0>(
                &v39,
                (const char (*)[38])"cannot choose hide and seek map, ret:");
        v26 = common::milog::MiLogStream::operator<<<int,(int *)0>(v25, (const int *)(v3 + 64));
        v27 = common::milog::MiLogStream::operator<<<char [10],(char *[10])0>(v26, (const char (*)[10])" map_set:");
        common::milog::MiLogStream::operator<<<unsigned int>(v27, (const std::set<unsigned int> *)(v3 + 304));
        common::milog::MiLogStream::~MiLogStream(&v39);
      }
      started = *(_DWORD *)(v3 + 64);
LABEL_43:
      std::set<unsigned int>::~set((std::set<unsigned int> *const)(v3 + 304));
      goto LABEL_55;
    }
    v28 = std::vector<std::string>::operator[](param_vec, 0LL);
    if ( std::operator==<char>(v28, "SET_DISAPPEAR_TIME") )
    {
      if ( std::vector<std::string>::size(param_vec) <= 1 )
      {
LABEL_46:
        std::string::operator=(ret_msg, "param not enough");
        started = -1;
        goto LABEL_55;
      }
      v29 = std::vector<std::string>::operator[](param_vec, 1uLL);
      if ( common::tools::StringUtils::strToNum<unsigned int>(v29, (unsigned int *)(v3 + 64), 1) )
        goto LABEL_13;
      v30 = std::__shared_ptr_access<HideAndSeekActivity,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<HideAndSeekActivity,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 112));
      HideAndSeekActivity::setDisappearTime(v30, *(_DWORD *)(v3 + 64));
    }
    else
    {
      v31 = std::vector<std::string>::operator[](param_vec, 0LL);
      if ( std::operator==<char>(v31, "SET_DELAY_UID") )
      {
        std::allocator<std::string>::allocator(&__a);
        M_current = std::vector<std::string>::end(param_vec)._M_current;
        __rhs._M_current = std::vector<std::string>::begin(param_vec)._M_current;
        v33._M_current = __gnu_cxx::__normal_iterator<std::string const*,std::vector<std::string>>::operator+(
                           &__rhs,
                           1LL)._M_current;
        std::vector<std::string>::vector<__gnu_cxx::__normal_iterator<std::string const*,std::vector<std::string>>,void>(
          (std::vector<std::string> *const)(v3 + 176),
          v33,
          (__gnu_cxx::__normal_iterator<const std::string*,std::vector<std::string> >)M_current,
          &__a);
        std::allocator<std::string>::~allocator(&__a);
        std::vector<unsigned int>::vector((std::vector<unsigned int> *const)(v3 + 240));
        if ( common::tools::StringUtils::strVecToNumVec<unsigned int>(
               (const std::vector<std::string> *)(v3 + 176),
               (std::vector<unsigned int> *)(v3 + 240)) )
        {
          common::milog::MiLogStream::create(
            &v39,
            &common::milog::MiLogDefault::default_log_obj_,
            3u,
            "./src/player/gm/player_gm_comp.cpp",
            "procHideAndSeekActivity",
            15105);
          common::milog::MiLogStream::operator<<<char [22],(char *[22])0>(
            &v39,
            (const char (*)[22])"strVecToNumVec failed");
          common::milog::MiLogStream::~MiLogStream(&v39);
          started = -1;
        }
        else
        {
          v34 = std::__shared_ptr_access<HideAndSeekActivity,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<HideAndSeekActivity,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 112));
          started = HideAndSeekActivity::setDelayUidByGm(v34, (const std::vector<unsigned int> *)(v3 + 240));
        }
        std::vector<unsigned int>::~vector((std::vector<unsigned int> *const)(v3 + 240));
        std::vector<std::string>::~vector((std::vector<std::string> *const)(v3 + 176));
        goto LABEL_55;
      }
    }
    started = 0;
    goto LABEL_55;
  }
  if ( std::vector<std::string>::size(param_vec) <= 1 )
    goto LABEL_46;
  v8 = std::vector<std::string>::operator[](param_vec, 1uLL);
  if ( common::tools::StringUtils::strToNum<unsigned int>(v8, (unsigned int *)(v3 + 48), 1) )
  {
LABEL_13:
    std::string::operator=(ret_msg, "strToNum failed");
    started = -1;
    goto LABEL_55;
  }
  std::set<unsigned int>::set((std::set<unsigned int> *const)(v3 + 304));
  if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
    __asan_report_load8();
  Player::getSceneComp(context->player);
  PlayerSceneComp::getCurWorld((const PlayerSceneComp *const)(v3 + 144));
  if ( std::operator==<World>((const std::shared_ptr<World> *)(v3 + 144), 0LL) )
  {
    common::milog::MiLogStream::create(
      &v39,
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/player/gm/player_gm_comp.cpp",
      "procHideAndSeekActivity",
      15029);
    v9 = common::milog::MiLogStream::operator<<<char [32],(char *[32])0>(
           &v39,
           (const char (*)[32])"cur_world_ptr null player_uid: ");
    if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
      __asan_report_load8();
    *(_DWORD *)(v3 + 64) = Player::getUid(context->player);
    common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v9, (const unsigned int *)(v3 + 64));
    common::milog::MiLogStream::~MiLogStream(&v39);
    started = -1;
  }
  else
  {
    v10 = std::__shared_ptr_access<World,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<World,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 144));
    OwnerUid = World::getOwnerUid(v10);
    if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
      __asan_report_load8();
    if ( OwnerUid == Player::getUid(context->player) )
    {
      v12 = std::__shared_ptr_access<World,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<World,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 144));
      std::function<ForeachPolicy ()(Player &)>::function<procHideAndSeekActivity(GmContext &,std::vector<std::string> const&,std::string&)::{lambda(Player &)#1},void,void>(
        (std::function<ForeachPolicy(Player&)> *const)&v39,
        (procHideAndSeekActivity::<lambda(Player&)>)(v3 + 304));
      World::foreachPlayer(v12, (std::function<ForeachPolicy(Player&)> *)&v39);
      std::function<ForeachPolicy ()(Player &)>::~function((std::function<ForeachPolicy(Player&)> *const)&v39);
      v13 = std::__shared_ptr_access<HideAndSeekActivity,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<HideAndSeekActivity,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 112));
      started = HideAndSeekActivity::startHideAndSeekByGm(v13, *(_DWORD *)(v3 + 48), 0);
    }
    else
    {
      common::milog::MiLogStream::create(
        &v39,
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/player/gm/player_gm_comp.cpp",
        "procHideAndSeekActivity",
        15034);
      common::milog::MiLogStream::operator<<<char [30],(char *[30])0>(
        &v39,
        (const char (*)[30])"owner can start hide and seek");
      common::milog::MiLogStream::~MiLogStream(&v39);
      std::string::operator=(ret_msg, "only world owner can start HideAndSeek");
      started = -1;
    }
  }
  std::shared_ptr<World>::~shared_ptr((std::shared_ptr<World> *const)(v3 + 144));
  std::set<unsigned int>::~set((std::set<unsigned int> *const)(v3 + 304));
LABEL_55:
  std::shared_ptr<HideAndSeekActivity>::~shared_ptr((std::shared_ptr<HideAndSeekActivity> *const)(v3 + 112));
  result = started;
  if ( v40 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8010) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8018) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8020) = 0LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF802C) = 0;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8020) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8028) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 15038: range 0000000017C37234-0000000017C37296
ForeachPolicy __cdecl procHideAndSeekActivity(GmContext &,std::vector<std::string> const&,std::string&)::{lambda(Player &)#1}::operator()(
        const procHideAndSeekActivity::<lambda(Player&)> *const __closure,
        Player *player)
{
  std::set<unsigned int> *uid_set; // rbx
  std::set<unsigned int>::value_type __x[5]; // [rsp+1Ch] [rbp-14h] BYREF

  if ( *(_BYTE *)(((unsigned __int64)__closure >> 3) + 0x7FFF8000) )
    __asan_report_load8();
  uid_set = __closure->__uid_set;
  __x[0] = Player::getUid(player);
  std::set<unsigned int>::insert(uid_set, __x);
  return 0;
};

// Line 15113: range 0000000017D7BA50-0000000017D7BAF2
void __cdecl procRefreshShopRegister::procRefreshShopRegister(procRefreshShopRegister *const this)
{
  std::function<int(GmContext&,const std::vector<std::string>&,std::string&)> *v1; // rax
  std::allocator<char> __a; // [rsp+1Fh] [rbp-31h] BYREF
  std::string __k; // [rsp+20h] [rbp-30h] BYREF

  std::allocator<char>::allocator(&__a);
  std::string::basic_string<std::allocator<char>>(&__k, "HOME_SHOP", &__a);
  v1 = std::unordered_map<std::string,std::function<int ()(GmContext &,std::vector<std::string> const&,std::string&)>>::operator[](
         &GmUtils::op_func_map[abi:cxx11],
         &__k);
  std::function<int ()(GmContext &,std::vector<std::string> const&,std::string&)>::operator=<int (&)(GmContext &,std::vector<std::string> const&,std::string&)>(
    v1,
    (int (*)(GmContext *, const std::vector<std::string> *, std::string *))procRefreshShop);
  std::string::~string(&__k);
  std::allocator<char>::~allocator(&__a);
};

// Line 15114: range 0000000017C37F02-0000000017C3825A
int32_t __cdecl procRefreshShop(GmContext *context, const std::vector<std::string> *param_vec, std::string *ret_msg)
{
  unsigned __int64 v3; // r12
  __int64 v4; // rax
  _DWORD *v5; // r13
  PlayerHomeComp *HomeComp; // rax
  common::milog::MiLogStream *v8; // rax
  int32_t v9; // r14d
  const std::string *v10; // rax
  Home *v11; // rax
  HomeLimitedShopComp *HomeLimitedShopComp; // rax
  const std::string *v13; // rax
  Home *v14; // rax
  HomeLimitedShopComp *v15; // rax
  int32_t result; // eax
  common::milog::MiLogStream v17; // [rsp+20h] [rbp-D0h] BYREF
  char v18[176]; // [rsp+40h] [rbp-B0h] BYREF

  v3 = (unsigned __int64)v18;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_1(128LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "3 48 4 9 ret:15117 64 16 20 home_world_ptr:15115 96 16 14 home_ptr:15116";
  *(_QWORD *)(v3 + 16) = procRefreshShop;
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = -234556943;
  v5[536862722] = -219021312;
  v5[536862723] = -202178560;
  std::shared_ptr<HomeWorld>::shared_ptr((std::shared_ptr<HomeWorld> *const)(v3 + 64), 0LL);
  std::shared_ptr<Home>::shared_ptr((std::shared_ptr<Home> *const)(v3 + 96), 0LL);
  if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
    __asan_report_load8();
  HomeComp = Player::getHomeComp(context->player);
  *(_DWORD *)(v3 + 48) = PlayerHomeComp::getCurHomeWorldAndHome(
                           HomeComp,
                           (HomeWorldPtr *)(v3 + 64),
                           (HomePtr *)(v3 + 96));
  if ( *(_DWORD *)(v3 + 48)
    || std::operator==<HomeWorld>((const std::shared_ptr<HomeWorld> *)(v3 + 64), 0LL)
    || std::operator==<Home>((const std::shared_ptr<Home> *)(v3 + 96), 0LL) )
  {
    common::milog::MiLogStream::create(
      &v17,
      &common::milog::MiLogDefault::default_log_obj_,
      1u,
      "./src/player/gm/player_gm_comp.cpp",
      "procRefreshShop",
      15120);
    v8 = common::milog::MiLogStream::operator<<<char [36],(char *[36])0>(
           &v17,
           (const char (*)[36])"getCurHomeWorldAndHome failed. ret:");
    common::milog::MiLogStream::operator<<<int,(int *)0>(v8, (const int *)(v3 + 48));
    common::milog::MiLogStream::~MiLogStream(&v17);
    if ( *(_DWORD *)(v3 + 48) )
      v9 = *(_DWORD *)(v3 + 48);
    else
      v9 = -1;
  }
  else
  {
    if ( std::vector<std::string>::size(param_vec) == 1 )
    {
      v10 = std::vector<std::string>::operator[](param_vec, 0LL);
      if ( std::operator==<char>(v10, "REFRESH") )
      {
        v11 = std::__shared_ptr_access<Home,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Home,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 96));
        HomeLimitedShopComp = Home::getHomeLimitedShopComp(v11);
        *(_DWORD *)(v3 + 48) = HomeLimitedShopComp::refreshShop(HomeLimitedShopComp);
      }
      else
      {
        v13 = std::vector<std::string>::operator[](param_vec, 0LL);
        if ( std::operator==<char>(v13, "OPEN") )
        {
          v14 = std::__shared_ptr_access<Home,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Home,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 96));
          v15 = Home::getHomeLimitedShopComp(v14);
          HomeLimitedShopComp::setGmOpen(v15, 1);
          *(_DWORD *)(v3 + 48) = 0;
        }
      }
    }
    v9 = *(_DWORD *)(v3 + 48);
  }
  std::shared_ptr<Home>::~shared_ptr((std::shared_ptr<Home> *const)(v3 + 96));
  std::shared_ptr<HomeWorld>::~shared_ptr((std::shared_ptr<HomeWorld> *const)(v3 + 64));
  result = v9;
  if ( v18 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 15139: range 0000000017D7BAF4-0000000017D7BB96
void __cdecl procGadgetChainRegister::procGadgetChainRegister(procGadgetChainRegister *const this)
{
  std::function<int(GmContext&,const std::vector<std::string>&,std::string&)> *v1; // rax
  std::allocator<char> __a; // [rsp+1Fh] [rbp-31h] BYREF
  std::string __k; // [rsp+20h] [rbp-30h] BYREF

  std::allocator<char>::allocator(&__a);
  std::string::basic_string<std::allocator<char>>(&__k, "GADGET_CHAIN", &__a);
  v1 = std::unordered_map<std::string,std::function<int ()(GmContext &,std::vector<std::string> const&,std::string&)>>::operator[](
         &GmUtils::op_func_map[abi:cxx11],
         &__k);
  std::function<int ()(GmContext &,std::vector<std::string> const&,std::string&)>::operator=<int (&)(GmContext &,std::vector<std::string> const&,std::string&)>(
    v1,
    (int (*)(GmContext *, const std::vector<std::string> *, std::string *))procGadgetChain);
  std::string::~string(&__k);
  std::allocator<char>::~allocator(&__a);
};

// Line 15140: range 0000000017C3825B-0000000017C38822
int32_t __cdecl procGadgetChain(GmContext *context, const std::vector<std::string> *param_vec, std::string *ret_msg)
{
  unsigned __int64 p_M_node_count; // r12
  __int64 v4; // rax
  _DWORD *v5; // r13
  int32_t result; // eax
  const std::string *v7; // rax
  const std::string *v8; // rax
  PlayerSceneComp *SceneComp; // rax
  const std::string *v10; // rax
  const std::string *v11; // rax
  PlayerSceneComp *v12; // rax
  std::__shared_ptr_access<LightStoneRegionalPlay,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v13; // rax
  PlayerRegionalPlayComp v15; // [rsp+20h] [rbp-130h] BYREF

  p_M_node_count = (unsigned __int64)&v15.mp_var_map_._M_t._M_impl._M_node_count;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_1(96LL);
    if ( v4 )
      p_M_node_count = v4;
  }
  *(_QWORD *)p_M_node_count = 1102416563LL;
  *(_QWORD *)(p_M_node_count + 8) = "3 32 4 14 chain_id:15165 48 4 18 target_level:15166 64 16 35 light_stone_regional_play_ptr:15178";
  *(_QWORD *)(p_M_node_count + 16) = procGadgetChain;
  v5 = (_DWORD *)(p_M_node_count >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = -234556924;
  v5[536862722] = -202178560;
  if ( std::vector<std::string>::size(param_vec) > 1 )
  {
    v7 = std::vector<std::string>::operator[](param_vec, 0LL);
    if ( std::operator==<char>(v7, "GET_LEVEL") )
    {
      *(_DWORD *)(p_M_node_count + 32) = 0;
      v8 = std::vector<std::string>::operator[](param_vec, 1uLL);
      if ( common::tools::StringUtils::strToNum<unsigned int>(v8, (unsigned int *)(p_M_node_count + 32), 1) )
      {
        std::string::operator=(ret_msg, "chain_id strToNum failed");
        result = -1;
      }
      else
      {
        *(_DWORD *)(p_M_node_count + 48) = 0;
        if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
          __asan_report_load8();
        SceneComp = Player::getSceneComp(context->player);
        if ( PlayerSceneComp::findGadgetChainLevel(
               SceneComp,
               *(_DWORD *)(p_M_node_count + 32),
               (uint32_t *)(p_M_node_count + 48)) )
        {
          std::to_string((std::string *)&v15.var_map_._M_t._M_impl._M_header._M_left, *(_DWORD *)(p_M_node_count + 32));
          std::operator+<char>(
            (std::string *)&v15.mp_var_map_._M_t._M_impl.std::_Rb_tree_header,
            "cannot find chain_id",
            (std::string *)&v15.var_map_._M_t._M_impl._M_header._M_left);
          std::string::operator=(ret_msg, &v15.mp_var_map_._M_t._M_impl.std::_Rb_tree_header);
          std::string::~string(&v15.mp_var_map_._M_t._M_impl.std::_Rb_tree_header);
          std::string::~string(&v15.var_map_._M_t._M_impl._M_header._M_left);
          result = -1;
        }
        else
        {
          std::to_string((std::string *)&v15.var_map_._M_t._M_impl._M_header._M_left, *(_DWORD *)(p_M_node_count + 48));
          std::to_string((std::string *)&v15._M_weak_this._M_refcount, *(_DWORD *)(p_M_node_count + 32));
          std::operator+<char>(
            (std::string *)&v15.play_ptr_map_._M_t._M_impl.std::_Rb_tree_header,
            "chain_id: ",
            (std::string *)&v15._M_weak_this._M_refcount);
          std::operator+<char>(
            (std::string *)&v15.play_ptr_map_._M_t._M_impl._M_node_count,
            (std::string *)&v15.play_ptr_map_._M_t._M_impl.std::_Rb_tree_header,
            " chain_level: ");
          std::operator+<char>(
            (std::string *)&v15.mp_var_map_._M_t._M_impl.std::_Rb_tree_header,
            (std::string *)&v15.play_ptr_map_._M_t._M_impl._M_node_count,
            (std::string *)&v15.var_map_._M_t._M_impl._M_header._M_left);
          std::string::operator=(ret_msg, &v15.mp_var_map_._M_t._M_impl.std::_Rb_tree_header);
          std::string::~string(&v15.mp_var_map_._M_t._M_impl.std::_Rb_tree_header);
          std::string::~string(&v15.play_ptr_map_._M_t._M_impl._M_node_count);
          std::string::~string(&v15.play_ptr_map_._M_t._M_impl.std::_Rb_tree_header);
          std::string::~string(&v15._M_weak_this._M_refcount);
          std::string::~string(&v15.var_map_._M_t._M_impl._M_header._M_left);
          result = 0;
        }
      }
    }
    else
    {
      *(_DWORD *)(p_M_node_count + 32) = 0;
      *(_DWORD *)(p_M_node_count + 48) = 0;
      v10 = std::vector<std::string>::operator[](param_vec, 0LL);
      if ( common::tools::StringUtils::strToNum<unsigned int>(v10, (unsigned int *)(p_M_node_count + 32), 1)
        || (v11 = std::vector<std::string>::operator[](param_vec, 1uLL),
            common::tools::StringUtils::strToNum<unsigned int>(v11, (unsigned int *)(p_M_node_count + 48), 1)) )
      {
        std::string::operator=(ret_msg, "strToNum failed");
        result = -1;
      }
      else
      {
        if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
          __asan_report_load8();
        v12 = Player::getSceneComp(context->player);
        PlayerSceneComp::setGadgetChainLevel(v12, *(_DWORD *)(p_M_node_count + 32), *(_DWORD *)(p_M_node_count + 48), 1);
        if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
          __asan_report_load8();
        Player::getRegionalPlayComp(context->player);
        PlayerRegionalPlayComp::getLastRegionalPlayPtr(&v15);
        std::dynamic_pointer_cast<LightStoneRegionalPlay,BaseRegionalPlay>((const std::shared_ptr<BaseRegionalPlay> *)(p_M_node_count + 64));
        std::shared_ptr<BaseRegionalPlay>::~shared_ptr((std::shared_ptr<BaseRegionalPlay> *const)&v15);
        if ( std::operator!=<LightStoneRegionalPlay>(
               0LL,
               (const std::shared_ptr<LightStoneRegionalPlay> *)(p_M_node_count + 64)) )
        {
          v13 = std::__shared_ptr_access<LightStoneRegionalPlay,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<LightStoneRegionalPlay,(__gnu_cxx::_Lock_policy)2,false,false> *const)(p_M_node_count + 64));
          LightStoneRegionalPlay::checkUpdateRelatedTeamEntitySgv(v13);
        }
        std::shared_ptr<LightStoneRegionalPlay>::~shared_ptr((std::shared_ptr<LightStoneRegionalPlay> *const)(p_M_node_count + 64));
        result = 0;
      }
    }
  }
  else
  {
    std::string::operator=(ret_msg, "param not enough");
    result = -1;
  }
  if ( &v15.mp_var_map_._M_t._M_impl._M_node_count == (std::size_t *)p_M_node_count )
  {
    *(_QWORD *)((p_M_node_count >> 3) + 0x7FFF8000) = 0LL;
    *(_DWORD *)((p_M_node_count >> 3) + 0x7FFF8008) = 0;
  }
  else
  {
    *(_QWORD *)p_M_node_count = 1172321806LL;
    *(_QWORD *)((p_M_node_count >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((p_M_node_count >> 3) + 0x7FFF8008) = -168430091;
  }
  return result;
};

// Line 15187: range 0000000017D7BB98-0000000017D7BC3A
void __cdecl procFurnitureMakeRegister::procFurnitureMakeRegister(procFurnitureMakeRegister *const this)
{
  std::function<int(GmContext&,const std::vector<std::string>&,std::string&)> *v1; // rax
  std::allocator<char> __a; // [rsp+1Fh] [rbp-31h] BYREF
  std::string __k; // [rsp+20h] [rbp-30h] BYREF

  std::allocator<char>::allocator(&__a);
  std::string::basic_string<std::allocator<char>>(&__k, "FURNITURE_MAKE", &__a);
  v1 = std::unordered_map<std::string,std::function<int ()(GmContext &,std::vector<std::string> const&,std::string&)>>::operator[](
         &GmUtils::op_func_map[abi:cxx11],
         &__k);
  std::function<int ()(GmContext &,std::vector<std::string> const&,std::string&)>::operator=<int (&)(GmContext &,std::vector<std::string> const&,std::string&)>(
    v1,
    (int (*)(GmContext *, const std::vector<std::string> *, std::string *))procFurnitureMake);
  std::string::~string(&__k);
  std::allocator<char>::~allocator(&__a);
};

// Line 15188: range 0000000017C38823-0000000017C38DCD
int32_t __cdecl procFurnitureMake(GmContext *context, const std::vector<std::string> *param_vec, std::string *ret_msg)
{
  unsigned __int64 v3; // r13
  __int64 v4; // rax
  _DWORD *v5; // r12
  PlayerHomeComp *HomeComp; // rax
  common::milog::MiLogStream *v8; // rax
  int32_t DataAvatarIdByGm; // r14d
  const std::string *v10; // rax
  PlayerHomeComp *v11; // rax
  FurnitureMake *v12; // rax
  const std::string *v13; // rax
  PlayerHomeComp *v14; // rax
  FurnitureMake *v15; // rax
  const std::string *v16; // rax
  const std::string *v17; // rax
  PlayerHomeComp *v18; // rax
  FurnitureMake *v19; // rax
  const std::string *v20; // rax
  PlayerHomeComp *v21; // rax
  FurnitureMake *v22; // rax
  int32_t result; // eax
  common::milog::MiLogStream v24; // [rsp+20h] [rbp-F0h] BYREF
  char v25[208]; // [rsp+40h] [rbp-D0h] BYREF

  v3 = (unsigned __int64)v25;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_2(160LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "5 48 4 9 ret:15191 64 4 11 index:15230 80 4 15 avatar_id:15231 96 16 20 home_world_ptr:15189 128"
                        " 16 14 home_ptr:15190";
  *(_QWORD *)(v3 + 16) = procFurnitureMake;
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = -234556943;
  v5[536862722] = -234556924;
  v5[536862723] = -219021312;
  v5[536862724] = -202178560;
  std::shared_ptr<HomeWorld>::shared_ptr((std::shared_ptr<HomeWorld> *const)(v3 + 96), 0LL);
  std::shared_ptr<Home>::shared_ptr((std::shared_ptr<Home> *const)(v3 + 128), 0LL);
  if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
    __asan_report_load8();
  HomeComp = Player::getHomeComp(context->player);
  *(_DWORD *)(v3 + 48) = PlayerHomeComp::getCurHomeWorldAndHome(
                           HomeComp,
                           (HomeWorldPtr *)(v3 + 96),
                           (HomePtr *)(v3 + 128));
  if ( *(_DWORD *)(v3 + 48)
    || std::operator==<HomeWorld>((const std::shared_ptr<HomeWorld> *)(v3 + 96), 0LL)
    || std::operator==<Home>((const std::shared_ptr<Home> *)(v3 + 128), 0LL) )
  {
    common::milog::MiLogStream::create(
      &v24,
      &common::milog::MiLogDefault::default_log_obj_,
      1u,
      "./src/player/gm/player_gm_comp.cpp",
      "procFurnitureMake",
      15194);
    v8 = common::milog::MiLogStream::operator<<<char [36],(char *[36])0>(
           &v24,
           (const char (*)[36])"getCurHomeWorldAndHome failed. ret:");
    common::milog::MiLogStream::operator<<<int,(int *)0>(v8, (const int *)(v3 + 48));
    common::milog::MiLogStream::~MiLogStream(&v24);
    if ( *(_DWORD *)(v3 + 48) )
      DataAvatarIdByGm = *(_DWORD *)(v3 + 48);
    else
      DataAvatarIdByGm = -1;
    goto LABEL_39;
  }
  if ( std::vector<std::string>::size(param_vec) == 1 )
  {
    v10 = std::vector<std::string>::operator[](param_vec, 0LL);
    if ( std::operator==<char>(v10, "CLEAR") )
    {
      if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
        __asan_report_load8();
      v11 = Player::getHomeComp(context->player);
      v12 = PlayerHomeComp::getFurnitureMake(v11);
      FurnitureMake::clearPlayerHelpData(v12);
      DataAvatarIdByGm = 0;
      goto LABEL_39;
    }
    v13 = std::vector<std::string>::operator[](param_vec, 0LL);
    if ( std::operator==<char>(v13, "HELP") )
    {
      if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
        __asan_report_load8();
      v14 = Player::getHomeComp(context->player);
      v15 = PlayerHomeComp::getFurnitureMake(v14);
      FurnitureMake::onGMHelpHomeOwner(v15);
      DataAvatarIdByGm = 0;
      goto LABEL_39;
    }
LABEL_38:
    DataAvatarIdByGm = -1;
    goto LABEL_39;
  }
  if ( std::vector<std::string>::size(param_vec) == 2 )
  {
    v16 = std::vector<std::string>::operator[](param_vec, 0LL);
    if ( !std::operator==<char>(v16, off_2636E720) )
      goto LABEL_38;
    *(_DWORD *)(v3 + 80) = 0;
    v17 = std::vector<std::string>::operator[](param_vec, 1uLL);
    if ( common::tools::StringUtils::strToNum<unsigned int>(v17, (unsigned int *)(v3 + 80), 1) )
    {
      DataAvatarIdByGm = -1;
    }
    else
    {
      if ( *(_DWORD *)(v3 + 80) )
      {
        if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
          __asan_report_load8();
        v18 = Player::getHomeComp(context->player);
        v19 = PlayerHomeComp::getFurnitureMake(v18);
        FurnitureMake::onGMAccelerate(v19, *(_DWORD *)(v3 + 80));
      }
      DataAvatarIdByGm = 0;
    }
  }
  else
  {
    if ( std::vector<std::string>::size(param_vec) != 3 )
      goto LABEL_38;
    v20 = std::vector<std::string>::operator[](param_vec, 0LL);
    if ( !std::operator==<char>(v20, "SET_AVATAR") )
      goto LABEL_38;
    *(_DWORD *)(v3 + 64) = 0;
    *(_DWORD *)(v3 + 80) = 0;
    common::tools::StringUtils::strVecToNum<1u,unsigned int,unsigned int &>(
      param_vec,
      (unsigned int *)(v3 + 64),
      (unsigned int *)(v3 + 80),
      (unsigned int *)(v3 + 64));
    if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
      __asan_report_load8();
    v21 = Player::getHomeComp(context->player);
    v22 = PlayerHomeComp::getFurnitureMake(v21);
    DataAvatarIdByGm = FurnitureMake::setFurnitureMakeDataAvatarIdByGm(v22, *(_DWORD *)(v3 + 64), *(_DWORD *)(v3 + 80));
  }
LABEL_39:
  std::shared_ptr<Home>::~shared_ptr((std::shared_ptr<Home> *const)(v3 + 128));
  std::shared_ptr<HomeWorld>::~shared_ptr((std::shared_ptr<HomeWorld> *const)(v3 + 96));
  result = DataAvatarIdByGm;
  if ( v25 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8010) = 0;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8010) = -168430091;
  }
  return result;
};

// Line 15240: range 0000000017D7BC3C-0000000017D7BCDE
void __cdecl procHomeResourceRegister::procHomeResourceRegister(procHomeResourceRegister *const this)
{
  std::function<int(GmContext&,const std::vector<std::string>&,std::string&)> *v1; // rax
  std::allocator<char> __a; // [rsp+1Fh] [rbp-31h] BYREF
  std::string __k; // [rsp+20h] [rbp-30h] BYREF

  std::allocator<char>::allocator(&__a);
  std::string::basic_string<std::allocator<char>>(&__k, "HOME_RESOURCE_REFRESH", &__a);
  v1 = std::unordered_map<std::string,std::function<int ()(GmContext &,std::vector<std::string> const&,std::string&)>>::operator[](
         &GmUtils::op_func_map[abi:cxx11],
         &__k);
  std::function<int ()(GmContext &,std::vector<std::string> const&,std::string&)>::operator=<int (&)(GmContext &,std::vector<std::string> const&,std::string&)>(
    v1,
    (int (*)(GmContext *, const std::vector<std::string> *, std::string *))procHomeResource);
  std::string::~string(&__k);
  std::allocator<char>::~allocator(&__a);
};

// Line 15241: range 0000000017C38DCE-0000000017C38F33
int32_t __cdecl procHomeResource(GmContext *context, const std::vector<std::string> *param_vec, std::string *ret_msg)
{
  unsigned __int64 v3; // rbx
  __int64 v4; // rax
  unsigned __int64 v5; // r12
  const std::string *v6; // rax
  int32_t result; // eax
  PlayerHomeComp *HomeComp; // rax
  HomeResource *HomeResource; // rax
  char v10[96]; // [rsp+20h] [rbp-60h] BYREF

  v3 = (unsigned __int64)v10;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_0(64LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "1 32 4 11 count:15242";
  *(_QWORD *)(v3 + 16) = procHomeResource;
  v5 = v3 >> 3;
  *(_DWORD *)(v5 + 2147450880) = -235802127;
  *(_DWORD *)(v5 + 2147450884) = -202116348;
  *(_DWORD *)(v3 + 32) = 1;
  if ( std::vector<std::string>::size(param_vec) == 1
    && (v6 = std::vector<std::string>::operator[](param_vec, 0LL),
        common::tools::StringUtils::strToNum<unsigned int>(v6, (unsigned int *)(v3 + 32), 1)) )
  {
    result = -1;
  }
  else
  {
    if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
      __asan_report_load8();
    HomeComp = Player::getHomeComp(context->player);
    HomeResource = PlayerHomeComp::getHomeResource(HomeComp);
    HomeResource::onGMForceUpdateHomeResource(HomeResource, *(_DWORD *)(v3 + 32));
    result = 0;
  }
  if ( v10 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 15253: range 0000000017D7BCE0-0000000017D7BD82
void __cdecl procWorldSceneRegister::procWorldSceneRegister(procWorldSceneRegister *const this)
{
  std::function<int(GmContext&,const std::vector<std::string>&,std::string&)> *v1; // rax
  std::allocator<char> __a; // [rsp+1Fh] [rbp-31h] BYREF
  std::string __k; // [rsp+20h] [rbp-30h] BYREF

  std::allocator<char>::allocator(&__a);
  std::string::basic_string<std::allocator<char>>(&__k, "WORLD_SCENE", &__a);
  v1 = std::unordered_map<std::string,std::function<int ()(GmContext &,std::vector<std::string> const&,std::string&)>>::operator[](
         &GmUtils::op_func_map[abi:cxx11],
         &__k);
  std::function<int ()(GmContext &,std::vector<std::string> const&,std::string&)>::operator=<int (&)(GmContext &,std::vector<std::string> const&,std::string&)>(
    v1,
    (int (*)(GmContext *, const std::vector<std::string> *, std::string *))procWorldScene);
  std::string::~string(&__k);
  std::allocator<char>::~allocator(&__a);
};

// Line 15254: range 0000000017C38F34-0000000017C3921D
int32_t __cdecl procWorldScene(GmContext *context, const std::vector<std::string> *param_vec, std::string *ret_msg)
{
  unsigned __int64 v3; // rbx
  __int64 v4; // rax
  unsigned __int64 v5; // r13
  const std::string *v6; // rax
  const std::string *v7; // rax
  int32_t result; // eax
  PlayerSceneComp *v9; // rax
  const std::string *v10; // rax
  const std::string *v11; // rax
  PlayerSceneComp *SceneComp; // rax
  char v14[96]; // [rsp+20h] [rbp-60h] BYREF

  v3 = (unsigned __int64)v14;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_0(64LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "1 32 4 14 scene_id:15286";
  *(_QWORD *)(v3 + 16) = procWorldScene;
  v5 = v3 >> 3;
  *(_DWORD *)(v5 + 2147450880) = -235802127;
  *(_DWORD *)(v5 + 2147450884) = -202116348;
  if ( !std::vector<std::string>::size(param_vec) )
    goto LABEL_15;
  v6 = std::vector<std::string>::operator[](param_vec, 0LL);
  if ( !std::operator==<char>(v6, "LOCK") )
  {
    v10 = std::vector<std::string>::operator[](param_vec, 0LL);
    if ( !std::operator==<char>(v10, "UNLOCK") )
    {
      result = 0;
      goto LABEL_21;
    }
    if ( std::vector<std::string>::size(param_vec) > 1 )
    {
      *(_DWORD *)(v3 + 32) = 0;
      v11 = std::vector<std::string>::operator[](param_vec, 1uLL);
      if ( common::tools::StringUtils::strToNum<unsigned int>(v11, (unsigned int *)(v3 + 32), 1) )
        goto LABEL_9;
      if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
        __asan_report_load8();
      SceneComp = Player::getSceneComp(context->player);
      result = PlayerSceneComp::unlockPlayerWorldScene(SceneComp, *(_DWORD *)(v3 + 32));
      goto LABEL_21;
    }
LABEL_15:
    std::string::operator=(ret_msg, "param not enough");
    result = -1;
    goto LABEL_21;
  }
  if ( std::vector<std::string>::size(param_vec) <= 1 )
    goto LABEL_15;
  *(_DWORD *)(v3 + 32) = 0;
  v7 = std::vector<std::string>::operator[](param_vec, 1uLL);
  if ( common::tools::StringUtils::strToNum<unsigned int>(v7, (unsigned int *)(v3 + 32), 1) )
  {
LABEL_9:
    std::string::operator=(ret_msg, "strToNum failed");
    result = -1;
    goto LABEL_21;
  }
  if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
    __asan_report_load8();
  v9 = Player::getSceneComp(context->player);
  result = PlayerSceneComp::lockPlayerWorldScene(v9, *(_DWORD *)(v3 + 32));
LABEL_21:
  if ( v14 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 15299: range 0000000017D7BD84-0000000017D7BE26
void __cdecl procSummerTimeActivityRegister::procSummerTimeActivityRegister(procSummerTimeActivityRegister *const this)
{
  std::function<int(GmContext&,const std::vector<std::string>&,std::string&)> *v1; // rax
  std::allocator<char> __a; // [rsp+1Fh] [rbp-31h] BYREF
  std::string __k; // [rsp+20h] [rbp-30h] BYREF

  std::allocator<char>::allocator(&__a);
  std::string::basic_string<std::allocator<char>>(&__k, "SUMMER_TIME_ACTIVITY", &__a);
  v1 = std::unordered_map<std::string,std::function<int ()(GmContext &,std::vector<std::string> const&,std::string&)>>::operator[](
         &GmUtils::op_func_map[abi:cxx11],
         &__k);
  std::function<int ()(GmContext &,std::vector<std::string> const&,std::string&)>::operator=<int (&)(GmContext &,std::vector<std::string> const&,std::string&)>(
    v1,
    (int (*)(GmContext *, const std::vector<std::string> *, std::string *))procSummerTimeActivity);
  std::string::~string(&__k);
  std::allocator<char>::~allocator(&__a);
};

// Line 15300: range 0000000017C3921E-0000000017C3974F
int32_t __cdecl procSummerTimeActivity(
        GmContext *context,
        const std::vector<std::string> *param_vec,
        std::string *ret_msg)
{
  unsigned __int64 v3; // r12
  __int64 v4; // rax
  _DWORD *v5; // r13
  int32_t v6; // r14d
  const std::string *v7; // rax
  const std::string *v8; // rax
  SummerTimeActivity *v9; // rax
  const std::string *v10; // rax
  SummerTimeActivity *v11; // rax
  const std::string *v12; // rax
  const std::string *v13; // rax
  const std::string *v14; // rax
  SummerTimeActivity *v15; // rax
  const std::string *v16; // rax
  const std::string *v17; // rax
  SummerTimeActivity *v18; // rax
  int32_t result; // eax
  char v21[144]; // [rsp+20h] [rbp-90h] BYREF

  v3 = (unsigned __int64)v21;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_1(96LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "3 32 4 13 race_id:15338 48 4 13 race_id:15359 64 16 18 activity_ptr:15301";
  *(_QWORD *)(v3 + 16) = procSummerTimeActivity;
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = -234556924;
  v5[536862722] = -202178560;
  if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
    __asan_report_load8();
  Player::getActivityComp(context->player);
  PlayerActivityComp::findOpenningActivity<SummerTimeActivity>((PlayerActivityComp *const)(v3 + 64));
  if ( std::operator==<SummerTimeActivity>(0LL, (const std::shared_ptr<SummerTimeActivity> *)(v3 + 64)) )
  {
    std::string::operator=(ret_msg, "activity is not open");
    v6 = -1;
    goto LABEL_30;
  }
  if ( !std::vector<std::string>::size(param_vec) )
    goto LABEL_26;
  v7 = std::vector<std::string>::operator[](param_vec, 0LL);
  if ( std::operator==<char>(v7, "SIGNAL") )
  {
    if ( std::vector<std::string>::size(param_vec) > 1 )
    {
      *(_DWORD *)(v3 + 48) = 0;
      v8 = std::vector<std::string>::operator[](param_vec, 1uLL);
      if ( common::tools::StringUtils::strToNum<unsigned int>(v8, (unsigned int *)(v3 + 48), 1) )
      {
        std::string::operator=(ret_msg, "strToNum failed");
        v6 = -1;
      }
      else
      {
        v9 = std::__shared_ptr_access<SummerTimeActivity,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<SummerTimeActivity,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 64));
        v6 = SummerTimeActivity::unlockFloatSignalByGm(v9, *(_DWORD *)(v3 + 48));
      }
      goto LABEL_30;
    }
    goto LABEL_26;
  }
  v10 = std::vector<std::string>::operator[](param_vec, 0LL);
  if ( !std::operator==<char>(v10, "RESET_SIGNAL") )
  {
    v12 = std::vector<std::string>::operator[](param_vec, 0LL);
    if ( std::operator==<char>(v12, "SETTLE_RACE") )
    {
      if ( std::vector<std::string>::size(param_vec) > 2 )
      {
        *(_DWORD *)(v3 + 32) = 0;
        v13 = std::vector<std::string>::operator[](param_vec, 1uLL);
        if ( !common::tools::StringUtils::strToNum<unsigned int>(v13, (unsigned int *)(v3 + 32), 1) )
        {
          *(_DWORD *)(v3 + 48) = 0;
          v14 = std::vector<std::string>::operator[](param_vec, 2uLL);
          if ( common::tools::StringUtils::strToNum<unsigned int>(v14, (unsigned int *)(v3 + 48), 1) )
          {
            std::string::operator=(ret_msg, "points strToNum failed");
            v6 = -1;
          }
          else
          {
            v15 = std::__shared_ptr_access<SummerTimeActivity,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<SummerTimeActivity,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 64));
            v6 = SummerTimeActivity::settleSprintBoatByGm(v15, *(_DWORD *)(v3 + 32), *(_DWORD *)(v3 + 48));
          }
          goto LABEL_30;
        }
        goto LABEL_20;
      }
    }
    else
    {
      v16 = std::vector<std::string>::operator[](param_vec, 0LL);
      if ( !std::operator==<char>(v16, "BEGIN_RACE") )
        goto LABEL_29;
      if ( std::vector<std::string>::size(param_vec) > 1 )
      {
        *(_DWORD *)(v3 + 48) = 0;
        v17 = std::vector<std::string>::operator[](param_vec, 1uLL);
        if ( !common::tools::StringUtils::strToNum<unsigned int>(v17, (unsigned int *)(v3 + 48), 1) )
        {
          v18 = std::__shared_ptr_access<SummerTimeActivity,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<SummerTimeActivity,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 64));
          v6 = SummerTimeActivity::beginSprintBoatByGm(v18, *(_DWORD *)(v3 + 48));
          goto LABEL_30;
        }
LABEL_20:
        std::string::operator=(ret_msg, "race_id strToNum failed");
        v6 = -1;
        goto LABEL_30;
      }
    }
LABEL_26:
    std::string::operator=(ret_msg, "param not enough");
    v6 = -1;
    goto LABEL_30;
  }
  v11 = std::__shared_ptr_access<SummerTimeActivity,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<SummerTimeActivity,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 64));
  SummerTimeActivity::resetAllSignalByGm(v11);
LABEL_29:
  v6 = 0;
LABEL_30:
  std::shared_ptr<SummerTimeActivity>::~shared_ptr((std::shared_ptr<SummerTimeActivity> *const)(v3 + 64));
  result = v6;
  if ( v21 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8008) = 0;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8008) = -168430091;
  }
  return result;
};

// Line 15370: range 0000000017D7BE28-0000000017D7BECA
void __cdecl procReleaseLuaStateRegister::procReleaseLuaStateRegister(procReleaseLuaStateRegister *const this)
{
  std::function<int(GmContext&,const std::vector<std::string>&,std::string&)> *v1; // rax
  std::allocator<char> __a; // [rsp+1Fh] [rbp-31h] BYREF
  std::string __k; // [rsp+20h] [rbp-30h] BYREF

  std::allocator<char>::allocator(&__a);
  std::string::basic_string<std::allocator<char>>(&__k, "RELEASE_LUA_STATE", &__a);
  v1 = std::unordered_map<std::string,std::function<int ()(GmContext &,std::vector<std::string> const&,std::string&)>>::operator[](
         &GmUtils::op_func_map[abi:cxx11],
         &__k);
  std::function<int ()(GmContext &,std::vector<std::string> const&,std::string&)>::operator=<int (&)(GmContext &,std::vector<std::string> const&,std::string&)>(
    v1,
    (int (*)(GmContext *, const std::vector<std::string> *, std::string *))procReleaseLuaState);
  std::string::~string(&__k);
  std::allocator<char>::~allocator(&__a);
};

// Line 15371: range 0000000017C39750-0000000017C39B33
int32_t __cdecl procReleaseLuaState(
        GmContext *context,
        const std::vector<std::string> *param_vec,
        std::string *ret_msg)
{
  unsigned __int64 v3; // rbx
  __int64 v4; // rax
  _DWORD *v5; // r13
  const std::string *v6; // rdi
  const std::string *v7; // rax
  int32_t result; // eax
  LuaScriptMgr *v9; // rax
  PlayerGmComp *GmComp; // rax
  const char *v11; // rsi
  common::minet::Coroutine *v12; // rax
  __int64 v13; // rax
  char v14; // dl
  __int64 v15; // rdx
  uint32_t now; // [rsp+24h] [rbp-CCh]
  std::__shared_ptr_access<LuaScriptMgr,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *lua_script_mgr; // [rsp+28h] [rbp-C8h]
  common::minet::CoroutineContext v20; // [rsp+30h] [rbp-C0h] BYREF
  char v21[144]; // [rsp+60h] [rbp-90h] BYREF

  v3 = (unsigned __int64)v21;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_1(96LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "2 48 4 14 interval:15372 64 16 14 coro_ptr:15390";
  *(_QWORD *)(v3 + 16) = procReleaseLuaState;
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = -234556943;
  v5[536862722] = -202178560;
  *(_DWORD *)(v3 + 48) = 600;
  if ( std::vector<std::string>::size(param_vec)
    && (v6 = std::vector<std::string>::operator[](param_vec, 0LL),
        common::tools::StringUtils::strToNum<unsigned int>(v6, (unsigned int *)(v3 + 48), 1)) )
  {
    v7 = std::vector<std::string>::operator[](param_vec, 0LL);
    std::operator+<char>((std::string *)&v20.container_._M_t._M_impl._M_header._M_parent, "strToNum failed:", v7);
    std::string::operator=(ret_msg, &v20.container_._M_t._M_impl._M_header._M_parent);
    std::string::~string(&v20.container_._M_t._M_impl._M_header._M_parent);
    result = -1;
  }
  else
  {
    now = common::tools::TimeUtils::getNow();
    if ( now > *(uint32_t *)((char *)&PlayerGmComp::last_time_release_tl_lua_script_mgr + __readfsqword(0))
             + *(_DWORD *)(v3 + 48) )
    {
      v9 = (LuaScriptMgr *)ZTWN12LuaScriptMgr17tl_lua_script_mgrE();
      LuaScriptMgr::clear(v9);
      *(uint32_t *)((char *)&PlayerGmComp::last_time_release_tl_lua_script_mgr + __readfsqword(0)) = now;
      std::string::operator=(ret_msg, "tl release ");
    }
    if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
      __asan_report_load8();
    GmComp = Player::getGmComp(context->player);
    if ( *(_BYTE *)(((unsigned __int64)&GmComp->last_time_release_coro_lua_script_mgr >> 3) + 0x7FFF8000) != 0
      && *(_BYTE *)(((unsigned __int64)&GmComp->last_time_release_coro_lua_script_mgr >> 3) + 0x7FFF8000) <= 3 )
    {
      __asan_report_load4(&GmComp->last_time_release_coro_lua_script_mgr);
    }
    if ( now > GmComp->last_time_release_coro_lua_script_mgr + *(_DWORD *)(v3 + 48) )
    {
      common::minet::Coroutine::thisCoro();
      v11 = 0LL;
      if ( std::operator!=<common::minet::Coroutine>((const std::shared_ptr<common::minet::Coroutine> *)(v3 + 64), 0LL) )
      {
        v12 = std::__shared_ptr_access<common::minet::Coroutine,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<common::minet::Coroutine,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 64));
        common::minet::Coroutine::getContext(v12);
        common::minet::CoroutineContext::get<std::shared_ptr<LuaScriptMgr>>(&v20);
        lua_script_mgr = std::__shared_ptr_access<LuaScriptMgr,(__gnu_cxx::_Lock_policy)2,false,false>::operator*((const std::__shared_ptr_access<LuaScriptMgr,(__gnu_cxx::_Lock_policy)2,false,false> *const)&v20);
        std::shared_ptr<LuaScriptMgr>::~shared_ptr((std::shared_ptr<LuaScriptMgr> *const)&v20);
        LuaScriptMgr::clear(lua_script_mgr);
        v11 = "coro release";
        std::string::operator+=(ret_msg, "coro release");
      }
      if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
        __asan_report_load8();
      v13 = (__int64)Player::getGmComp(context->player);
      v14 = *(_BYTE *)(((unsigned __int64)(v13 + 168) >> 3) + 0x7FFF8000);
      LOBYTE(v11) = v14 != 0;
      v15 = (v14 != 0) & (unsigned __int8)(v14 <= 3);
      if ( (_BYTE)v15 )
        v13 = __asan_report_store4(v13 + 168, v11, v15);
      *(_DWORD *)(v13 + 168) = now;
      std::shared_ptr<common::minet::Coroutine>::~shared_ptr((std::shared_ptr<common::minet::Coroutine> *const)(v3 + 64));
    }
    result = 0;
  }
  if ( v21 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8008) = 0;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8008) = -168430091;
  }
  return result;
};

// Line 15404: range 0000000017D7BECC-0000000017D7BF6E
void __cdecl procLoadSceneGridRegister::procLoadSceneGridRegister(procLoadSceneGridRegister *const this)
{
  std::function<int(GmContext&,const std::vector<std::string>&,std::string&)> *v1; // rax
  std::allocator<char> __a; // [rsp+1Fh] [rbp-31h] BYREF
  std::string __k; // [rsp+20h] [rbp-30h] BYREF

  std::allocator<char>::allocator(&__a);
  std::string::basic_string<std::allocator<char>>(&__k, "LOAD_SCENE_GRID", &__a);
  v1 = std::unordered_map<std::string,std::function<int ()(GmContext &,std::vector<std::string> const&,std::string&)>>::operator[](
         &GmUtils::op_func_map[abi:cxx11],
         &__k);
  std::function<int ()(GmContext &,std::vector<std::string> const&,std::string&)>::operator=<int (&)(GmContext &,std::vector<std::string> const&,std::string&)>(
    v1,
    (int (*)(GmContext *, const std::vector<std::string> *, std::string *))procLoadSceneGrid);
  std::string::~string(&__k);
  std::allocator<char>::~allocator(&__a);
};

// Line 15405: range 0000000017C39B34-0000000017C39EBA
int32_t __cdecl procLoadSceneGrid(GmContext *context, const std::vector<std::string> *param_vec, std::string *ret_msg)
{
  unsigned __int64 v3; // r12
  __int64 v4; // rax
  _DWORD *v5; // r13
  int32_t v6; // r14d
  const std::string *v7; // rax
  const std::string *v8; // rax
  const std::string *v9; // rax
  const std::string *v10; // rax
  Scene *v12; // rax
  SceneSightComp *SightComp; // rax
  unsigned __int64 v14; // rdx
  int32_t result; // eax
  char v17[176]; // [rsp+20h] [rbp-B0h] BYREF

  v3 = (unsigned __int64)v17;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_1(128LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "3 32 8 15 pos_begin:15412 64 8 13 pos_end:15413 96 16 15 scene_ptr:15423";
  *(_QWORD *)(v3 + 16) = procLoadSceneGrid;
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = -218959360;
  v5[536862722] = -218959360;
  v5[536862723] = -202178560;
  if ( std::vector<std::string>::size(param_vec) == 4 )
  {
    Vector2::Vector2((Vector2 *const)(v3 + 32), 0.0, 0.0);
    Vector2::Vector2((Vector2 *const)(v3 + 64), 0.0, 0.0);
    v7 = std::vector<std::string>::operator[](param_vec, 0LL);
    if ( common::tools::StringUtils::strToNum<float>(v7, (float *)(v3 + 32), 1)
      || (v8 = std::vector<std::string>::operator[](param_vec, 1uLL),
          common::tools::StringUtils::strToNum<float>(v8, (float *)(v3 + 36), 1))
      || (v9 = std::vector<std::string>::operator[](param_vec, 2uLL),
          common::tools::StringUtils::strToNum<float>(v9, (float *)(v3 + 64), 1))
      || (v10 = std::vector<std::string>::operator[](param_vec, 3uLL),
          common::tools::StringUtils::strToNum<float>(v10, (float *)(v3 + 68), 1)) )
    {
      std::string::operator=(ret_msg, "strToNum failed:");
      v6 = -1;
    }
    else
    {
      if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
        __asan_report_load8();
      Player::getSceneComp(context->player);
      PlayerSceneComp::getCurScene((const PlayerSceneComp *const)(v3 + 96));
      if ( std::operator==<Scene>(0LL, (const std::shared_ptr<Scene> *)(v3 + 96)) )
      {
        std::string::operator=(ret_msg, "scene is null");
        v6 = -1;
      }
      else
      {
        v12 = std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 96));
        SightComp = Scene::getSightComp(v12);
        if ( *(_BYTE *)(((unsigned __int64)SightComp >> 3) + 0x7FFF8000) )
          __asan_report_load8();
        v14 = (unsigned __int64)(SightComp->_vptr_SceneCompBase + 13);
        if ( *(_BYTE *)((v14 >> 3) + 0x7FFF8000) )
          __asan_report_load8();
        v6 = (*(__int64 (__fastcall **)(SceneSightComp *, unsigned __int64, unsigned __int64))v14)(
               SightComp,
               v3 + 32,
               v3 + 64);
      }
      std::shared_ptr<Scene>::~shared_ptr((std::shared_ptr<Scene> *const)(v3 + 96));
    }
  }
  else
  {
    std::string::operator=(ret_msg, "param need 4");
    v6 = -1;
  }
  result = v6;
  if ( v17 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 15433: range 0000000017D7BF70-0000000017D7C012
void __cdecl procEchoShellActivityRegister::procEchoShellActivityRegister(procEchoShellActivityRegister *const this)
{
  std::function<int(GmContext&,const std::vector<std::string>&,std::string&)> *v1; // rax
  std::allocator<char> __a; // [rsp+1Fh] [rbp-31h] BYREF
  std::string __k; // [rsp+20h] [rbp-30h] BYREF

  std::allocator<char>::allocator(&__a);
  std::string::basic_string<std::allocator<char>>(&__k, "ECHO_SHELL_ACTIVITY", &__a);
  v1 = std::unordered_map<std::string,std::function<int ()(GmContext &,std::vector<std::string> const&,std::string&)>>::operator[](
         &GmUtils::op_func_map[abi:cxx11],
         &__k);
  std::function<int ()(GmContext &,std::vector<std::string> const&,std::string&)>::operator=<int (&)(GmContext &,std::vector<std::string> const&,std::string&)>(
    v1,
    (int (*)(GmContext *, const std::vector<std::string> *, std::string *))procEchoShellActivity);
  std::string::~string(&__k);
  std::allocator<char>::~allocator(&__a);
};

// Line 15434: range 0000000017C39EBB-0000000017C3A42E
int32_t __cdecl procEchoShellActivity(
        GmContext *context,
        const std::vector<std::string> *param_vec,
        std::string *ret_msg)
{
  unsigned __int64 v3; // r13
  __int64 v4; // rax
  _DWORD *v5; // r12
  int32_t v6; // r14d
  const std::string *v7; // rax
  const std::string *v8; // rax
  EchoShellActivity *v9; // rax
  const std::string *v10; // rax
  EchoShellActivity *v11; // rax
  const std::string *v12; // rax
  const std::string *v13; // rax
  const std::string *v14; // rax
  EchoShellActivity *v15; // rax
  const std::string *v16; // rax
  EchoShellActivity *v17; // rax
  int32_t result; // eax
  uint32_t index; // [rsp+2Ch] [rbp-F4h]
  char v21[240]; // [rsp+30h] [rbp-F0h] BYREF

  v3 = (unsigned __int64)v21;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_2(192LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "4 32 4 16 dungeon_id:15475 48 4 17 chest_count:15481 64 16 18 activity_ptr:15435 96 64 11 event:15490";
  *(_QWORD *)(v3 + 16) = procEchoShellActivity;
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = -234556924;
  v5[536862722] = -219021312;
  v5[536862725] = -202116109;
  if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
    __asan_report_load8();
  Player::getActivityComp(context->player);
  PlayerActivityComp::findOpenningActivity<EchoShellActivity>((PlayerActivityComp *const)(v3 + 64));
  if ( std::operator==<EchoShellActivity>(0LL, (const std::shared_ptr<EchoShellActivity> *)(v3 + 64)) )
  {
    std::string::operator=(ret_msg, "activity is not open");
    v6 = -1;
    goto LABEL_31;
  }
  if ( !std::vector<std::string>::size(param_vec) )
    goto LABEL_19;
  v7 = std::vector<std::string>::operator[](param_vec, 0LL);
  if ( std::operator==<char>(v7, "ADD_VOICE") )
  {
    if ( std::vector<std::string>::size(param_vec) > 1 )
    {
      v8 = std::vector<std::string>::operator[](param_vec, 1uLL);
      if ( std::operator==<char>(v8, _f.gap0) )
      {
        v9 = std::__shared_ptr_access<EchoShellActivity,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<EchoShellActivity,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 64));
        v6 = EchoShellActivity::addAllVoiceByGm(v9);
        goto LABEL_31;
      }
      *(_DWORD *)(v3 + 48) = 0;
      v10 = std::vector<std::string>::operator[](param_vec, 1uLL);
      if ( !common::tools::StringUtils::strToNum<unsigned int>(v10, (unsigned int *)(v3 + 48), 1) )
      {
        v11 = std::__shared_ptr_access<EchoShellActivity,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<EchoShellActivity,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 64));
        v6 = EchoShellActivity::addVoiceByGm(v11, *(_DWORD *)(v3 + 48));
        goto LABEL_31;
      }
      goto LABEL_23;
    }
LABEL_19:
    std::string::operator=(ret_msg, "param not enough");
    v6 = -1;
    goto LABEL_31;
  }
  v12 = std::vector<std::string>::operator[](param_vec, 0LL);
  if ( !std::operator==<char>(v12, "ADD_CHEST") )
  {
    v16 = std::vector<std::string>::operator[](param_vec, 0LL);
    if ( std::operator==<char>(v16, "CLEAR") )
    {
      v17 = std::__shared_ptr_access<EchoShellActivity,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<EchoShellActivity,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 64));
      v6 = EchoShellActivity::clearByGm(v17);
    }
    else
    {
      v6 = 0;
    }
    goto LABEL_31;
  }
  if ( std::vector<std::string>::size(param_vec) <= 1 )
    goto LABEL_19;
  *(_DWORD *)(v3 + 32) = 0;
  v13 = std::vector<std::string>::operator[](param_vec, 1uLL);
  if ( !common::tools::StringUtils::strToNum<unsigned int>(v13, (unsigned int *)(v3 + 32), 1) )
  {
    *(_DWORD *)(v3 + 48) = 1;
    if ( std::vector<std::string>::size(param_vec) <= 2
      || (v14 = std::vector<std::string>::operator[](param_vec, 2uLL),
          !common::tools::StringUtils::strToNum<unsigned int>(v14, (unsigned int *)(v3 + 48), 1)) )
    {
      ChestOpenEvent::ChestOpenEvent((ChestOpenEvent *const)(v3 + 96), 0, 0, 0, *(_DWORD *)(v3 + 32), 0, 0, 0, 0, 0);
      *(_DWORD *)(v3 + 132) = *(_DWORD *)(v3 + 32);
      for ( index = 0; index < *(_DWORD *)(v3 + 48); ++index )
      {
        v15 = std::__shared_ptr_access<EchoShellActivity,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<EchoShellActivity,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 64));
        EchoShellActivity::onChestOpenEvent(v15, (const ChestOpenEvent *)(v3 + 96));
      }
      v6 = 0;
      ChestOpenEvent::~ChestOpenEvent((ChestOpenEvent *const)(v3 + 96));
      goto LABEL_31;
    }
  }
LABEL_23:
  std::string::operator=(ret_msg, "strToNum failed");
  v6 = -1;
LABEL_31:
  std::shared_ptr<EchoShellActivity>::~shared_ptr((std::shared_ptr<EchoShellActivity> *const)(v3 + 64));
  result = v6;
  if ( v21 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8008) = 0;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8014) = 0;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 15505: range 0000000017D7C014-0000000017D7C0B6
void __cdecl procBlitzRushActivityRegister::procBlitzRushActivityRegister(procBlitzRushActivityRegister *const this)
{
  std::function<int(GmContext&,const std::vector<std::string>&,std::string&)> *v1; // rax
  std::allocator<char> __a; // [rsp+1Fh] [rbp-31h] BYREF
  std::string __k; // [rsp+20h] [rbp-30h] BYREF

  std::allocator<char>::allocator(&__a);
  std::string::basic_string<std::allocator<char>>(&__k, "BLITZ_RUSH_ACTIVITY", &__a);
  v1 = std::unordered_map<std::string,std::function<int ()(GmContext &,std::vector<std::string> const&,std::string&)>>::operator[](
         &GmUtils::op_func_map[abi:cxx11],
         &__k);
  std::function<int ()(GmContext &,std::vector<std::string> const&,std::string&)>::operator=<int (&)(GmContext &,std::vector<std::string> const&,std::string&)>(
    v1,
    (int (*)(GmContext *, const std::vector<std::string> *, std::string *))procBlitzRushActivity);
  std::string::~string(&__k);
  std::allocator<char>::~allocator(&__a);
};

// Line 15506: range 0000000017C3A42F-0000000017C3AA47
int32_t __cdecl procBlitzRushActivity(
        GmContext *context,
        const std::vector<std::string> *param_vec,
        std::string *ret_msg)
{
  unsigned __int64 v3; // r13
  __int64 v4; // rax
  _DWORD *v5; // r12
  int32_t v6; // r14d
  const std::string *v7; // rax
  const std::string *v8; // rax
  const std::string *v9; // rax
  std::__shared_ptr_access<BlitzRushActivity,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v10; // rax
  const std::string *v11; // rax
  const std::string *v12; // rax
  const std::string *v13; // rax
  std::__shared_ptr_access<BlitzRushActivity,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v14; // rax
  const std::string *v15; // rax
  const std::string *v16; // rax
  const std::string *v17; // rax
  std::__shared_ptr_access<BlitzRushActivity,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v18; // r14
  int32_t result; // eax
  SubItemReason reason; // [rsp+28h] [rbp-D8h] BYREF
  char v22[208]; // [rsp+30h] [rbp-D0h] BYREF

  v3 = (unsigned __int64)v22;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_2(160LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "4 32 4 15 coin_type:15565 48 4 16 coin_count:15566 64 16 18 activity_ptr:15507 96 24 19 action_reason:15577";
  *(_QWORD *)(v3 + 16) = procBlitzRushActivity;
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = -234556924;
  v5[536862722] = -219021312;
  v5[536862723] = -218103808;
  v5[536862724] = -202116109;
  if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
    __asan_report_load8();
  Player::getActivityComp(context->player);
  PlayerActivityComp::findOpenningActivity<BlitzRushActivity>((PlayerActivityComp *const)(v3 + 64));
  if ( std::operator==<BlitzRushActivity>(0LL, (const std::shared_ptr<BlitzRushActivity> *)(v3 + 64)) )
  {
    std::string::operator=(ret_msg, "activity is not open");
    v6 = -1;
    goto LABEL_30;
  }
  if ( !std::vector<std::string>::size(param_vec) )
    goto LABEL_23;
  v7 = std::vector<std::string>::operator[](param_vec, 0LL);
  if ( std::operator==<char>(v7, "STAGE") )
  {
    if ( std::vector<std::string>::size(param_vec) <= 2 )
      goto LABEL_23;
    v8 = std::vector<std::string>::operator[](param_vec, 1uLL);
    if ( std::operator==<char>(v8, "OPEN") )
    {
      *(_DWORD *)(v3 + 48) = 0;
      v9 = std::vector<std::string>::operator[](param_vec, 2uLL);
      if ( !common::tools::StringUtils::strToNum<unsigned int>(v9, (unsigned int *)(v3 + 48), 1) )
      {
        v10 = std::__shared_ptr_access<BlitzRushActivity,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<BlitzRushActivity,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 64));
        v6 = BlitzRushActivity::openActivityStageByGm(v10, *(_DWORD *)(v3 + 48));
        goto LABEL_30;
      }
      goto LABEL_27;
    }
  }
  v11 = std::vector<std::string>::operator[](param_vec, 0LL);
  if ( std::operator==<char>(v11, "ADD_COIN") )
  {
    if ( std::vector<std::string>::size(param_vec) > 2 )
    {
      *(_DWORD *)(v3 + 32) = 0;
      *(_DWORD *)(v3 + 48) = 0;
      v12 = std::vector<std::string>::operator[](param_vec, 1uLL);
      if ( !common::tools::StringUtils::strToNum<unsigned int>(v12, (unsigned int *)(v3 + 32), 1) )
      {
        v13 = std::vector<std::string>::operator[](param_vec, 2uLL);
        if ( !common::tools::StringUtils::strToNum<unsigned int>(v13, (unsigned int *)(v3 + 48), 1) )
        {
          ActionReason::ActionReason((ActionReason *const)(v3 + 96), ACTION_REASON_GM, ITEM_LIMIT_GM);
          v14 = std::__shared_ptr_access<BlitzRushActivity,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<BlitzRushActivity,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 64));
          v6 = BlitzRushActivity::addActivityCoin(
                 v14,
                 *(proto::VirtualItem *)(v3 + 32),
                 *(_DWORD *)(v3 + 48),
                 (const ActionReason *)(v3 + 96),
                 1);
          goto LABEL_30;
        }
      }
      goto LABEL_27;
    }
LABEL_23:
    std::string::operator=(ret_msg, "param not enough");
    v6 = -1;
    goto LABEL_30;
  }
  v15 = std::vector<std::string>::operator[](param_vec, 0LL);
  if ( std::operator==<char>(v15, "SUB_COIN") )
  {
    if ( std::vector<std::string>::size(param_vec) <= 2 )
      goto LABEL_23;
    *(_DWORD *)(v3 + 32) = 0;
    *(_DWORD *)(v3 + 48) = 0;
    v16 = std::vector<std::string>::operator[](param_vec, 1uLL);
    if ( common::tools::StringUtils::strToNum<unsigned int>(v16, (unsigned int *)(v3 + 32), 1)
      || (v17 = std::vector<std::string>::operator[](param_vec, 2uLL),
          common::tools::StringUtils::strToNum<unsigned int>(v17, (unsigned int *)(v3 + 48), 1)) )
    {
LABEL_27:
      std::string::operator=(ret_msg, "strToNum failed");
      v6 = -1;
      goto LABEL_30;
    }
    ActionReason::ActionReason((ActionReason *const)(v3 + 96), ACTION_REASON_GM, ITEM_LIMIT_GM);
    v18 = std::__shared_ptr_access<BlitzRushActivity,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<BlitzRushActivity,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 64));
    SubItemReason::SubItemReason(&reason, (const ActionReason *)(v3 + 96));
    v6 = BlitzRushActivity::subActivityCoin(v18, *(proto::VirtualItem *)(v3 + 32), *(_DWORD *)(v3 + 48), &reason, 1);
  }
  else
  {
    v6 = 0;
  }
LABEL_30:
  std::shared_ptr<BlitzRushActivity>::~shared_ptr((std::shared_ptr<BlitzRushActivity> *const)(v3 + 64));
  result = v6;
  if ( v22 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8010) = 0;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8010) = -168430091;
  }
  return result;
};

// Line 15585: range 0000000017D7C0B8-0000000017D7C15A
void __cdecl procMonsterYaceRegister::procMonsterYaceRegister(procMonsterYaceRegister *const this)
{
  std::function<int(GmContext&,const std::vector<std::string>&,std::string&)> *v1; // rax
  std::allocator<char> __a; // [rsp+1Fh] [rbp-31h] BYREF
  std::string __k; // [rsp+20h] [rbp-30h] BYREF

  std::allocator<char>::allocator(&__a);
  std::string::basic_string<std::allocator<char>>(&__k, "MONSTER_YACE", &__a);
  v1 = std::unordered_map<std::string,std::function<int ()(GmContext &,std::vector<std::string> const&,std::string&)>>::operator[](
         &GmUtils::op_func_map[abi:cxx11],
         &__k);
  std::function<int ()(GmContext &,std::vector<std::string> const&,std::string&)>::operator=<int (&)(GmContext &,std::vector<std::string> const&,std::string&)>(
    v1,
    (int (*)(GmContext *, const std::vector<std::string> *, std::string *))procMonsterYace);
  std::string::~string(&__k);
  std::allocator<char>::~allocator(&__a);
};

// Line 15586: range 0000000017C3AA48-0000000017C3C17B
int32_t __cdecl procMonsterYace(GmContext *context, const std::vector<std::string> *param_vec, std::string *ret_msg)
{
  int32_t v3; // r14d
  unsigned __int64 v4; // r13
  __int64 v5; // rax
  _DWORD *v6; // r12
  const std::weak_ptr<Monster> *v7; // rax
  std::__shared_ptr_access<Monster,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v8; // rax
  const std::string *v9; // rax
  const std::string *v11; // rax
  const std::string *v12; // rax
  std::__shared_ptr_access<Monster,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v13; // rax
  common::milog::MiLogStream *v14; // rax
  common::milog::MiLogStream *v15; // rax
  common::milog::MiLogStream *v16; // rax
  const std::string *v17; // rax
  __gnu_cxx::__normal_iterator<std::string*,std::vector<std::string> >::pointer v18; // rax
  const std::string *v19; // rax
  __gnu_cxx::__normal_iterator<std::string*,std::vector<std::string> >::pointer v20; // rax
  std::string *M_current; // r15
  std::vector<std::string>::iterator v22; // rax
  const std::string *v23; // rax
  common::milog::MiLogStream *v24; // rax
  std::string *v25; // r15
  std::vector<std::string>::iterator v26; // rax
  std::vector<std::string>::iterator v27; // rax
  const std::string *v28; // rax
  common::milog::MiLogStream *v30; // rax
  common::milog::MiLogStream *v31; // rax
  const std::string *v32; // rax
  common::milog::MiLogStream *v34; // rax
  unsigned __int64 Position; // rax
  const std::string *v36; // rax
  common::milog::MiLogStream *v37; // rax
  const std::string *v38; // rax
  common::milog::MiLogStream *v39; // rax
  const std::string *v40; // rax
  common::milog::MiLogStream *v41; // rax
  const std::string *v42; // rax
  common::milog::MiLogStream *v43; // r14
  const std::string *v44; // rax
  common::milog::MiLogStream *v45; // rax
  int v46; // r15d
  std::__shared_ptr_access<Monster,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v47; // rax
  unsigned __int64 v48; // rdx
  void (__fastcall *v49)(std::__shared_ptr_access<Monster,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *, Scene *, VisionContext *); // r8
  std::__shared_ptr_access<Monster,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v50; // rax
  std::__shared_ptr_access<Monster,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v51; // rax
  FightPropComp *FightPropComp; // rax
  PileBoolValue *IsInvincible; // r15
  PlayerGmComp *GmComp; // rax
  bool IsMonsterInvincible; // al
  int32_t result; // eax
  bool v57; // [rsp+17h] [rbp-479h]
  bool is_elite; // [rsp+3Bh] [rbp-455h]
  uint32_t i; // [rsp+3Ch] [rbp-454h]
  size_t idx; // [rsp+40h] [rbp-450h]
  std::vector<std::weak_ptr<Monster>> *last_create_monster_by_yace; // [rsp+48h] [rbp-448h]
  size_t affix_flag_idx; // [rsp+58h] [rbp-438h]
  common::milog::MiLogStream v64; // [rsp+60h] [rbp-430h] BYREF
  char v65[1040]; // [rsp+80h] [rbp-410h] BYREF

  v4 = (unsigned __int64)v65;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v5 = __asan_stack_malloc_4(992LL);
    if ( v5 )
      v4 = v5;
  }
  *(_QWORD *)v4 = 1102416563LL;
  *(_QWORD *)(v4 + 8) = "15 48 4 13 drop_id:15624 64 4 16 monster_id:15669 80 4 9 num:15680 96 4 11 level:15693 112 4 11 "
                        "affix:15735 128 8 16 elite_iter:15656 160 8 16 affix_iter:15677 192 12 9 pos:15701 224 16 17 mon"
                        "ster_wtr:15588 256 16 17 monster_ptr:15590 288 16 17 monster_ptr:15748 320 24 19 new_param_vec:1"
                        "5627 384 32 14 drop_tag:15625 448 96 16 hp_context:15593 576 352 19 monster_param:15726";
  *(_QWORD *)(v4 + 16) = procMonsterYace;
  v6 = (_DWORD *)(v4 >> 3);
  v6[536862720] = -235802127;
  v6[536862721] = -234556943;
  v6[536862722] = -234556924;
  v6[536862723] = -234556924;
  v6[536862724] = -218959360;
  v6[536862725] = -218959360;
  v6[536862726] = -219020288;
  v6[536862727] = -219021312;
  v6[536862728] = -219021312;
  v6[536862729] = -219021312;
  v6[536862730] = -234881024;
  v6[536862731] = -218959118;
  v6[536862733] = -218959118;
  v6[536862737] = -218959118;
  v6[536862749] = -202116109;
  v6[536862750] = -202116109;
  if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
    __asan_report_load8();
  last_create_monster_by_yace = &Player::getGmComp(context->player)->last_create_monster_by_yace;
  *(std::vector<std::weak_ptr<Monster>>::iterator *)(v4 + 128) = std::vector<std::weak_ptr<Monster>>::begin(last_create_monster_by_yace);
  *(std::vector<std::weak_ptr<Monster>>::iterator *)(v4 + 160) = std::vector<std::weak_ptr<Monster>>::end(last_create_monster_by_yace);
  while ( __gnu_cxx::operator!=<std::weak_ptr<Monster> *,std::vector<std::weak_ptr<Monster>>>(
            (const __gnu_cxx::__normal_iterator<std::weak_ptr<Monster>*,std::vector<std::weak_ptr<Monster>> > *)(v4 + 128),
            (const __gnu_cxx::__normal_iterator<std::weak_ptr<Monster>*,std::vector<std::weak_ptr<Monster>> > *)(v4 + 160)) )
  {
    v7 = __gnu_cxx::__normal_iterator<std::weak_ptr<Monster> *,std::vector<std::weak_ptr<Monster>>>::operator*((const __gnu_cxx::__normal_iterator<std::weak_ptr<Monster>*,std::vector<std::weak_ptr<Monster>> > *const)(v4 + 128));
    std::weak_ptr<Monster>::weak_ptr((std::weak_ptr<Monster> *const)(v4 + 224), v7);
    std::weak_ptr<Monster>::lock((const std::weak_ptr<Monster> *const)(v4 + 256));
    if ( std::__shared_ptr<Monster,(__gnu_cxx::_Lock_policy)2>::operator bool((const std::__shared_ptr<Monster,(__gnu_cxx::_Lock_policy)2> *const)(v4 + 256)) )
    {
      ChangeHpContext::ChangeHpContext((ChangeHpContext *const)(v4 + 448));
      *(_DWORD *)(v4 + 448) = 11;
      if ( *(_BYTE *)(((unsigned __int64)&context->avatar >> 3) + 0x7FFF8000) )
        __asan_report_load8();
      toThisPtr<Avatar>((Avatar *)(v4 + 288));
      std::shared_ptr<Creature>::operator=<Avatar>(
        (std::shared_ptr<Creature> *const)(v4 + 456),
        (std::shared_ptr<Avatar> *)(v4 + 288));
      std::shared_ptr<Avatar>::~shared_ptr((std::shared_ptr<Avatar> *const)(v4 + 288));
      v8 = std::__shared_ptr_access<Monster,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Monster,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 256));
      Creature::subCurHpToZero(v8, (ChangeHpContext *)(v4 + 448), 1);
      ChangeHpContext::~ChangeHpContext((ChangeHpContext *const)(v4 + 448));
    }
    std::shared_ptr<Monster>::~shared_ptr((std::shared_ptr<Monster> *const)(v4 + 256));
    std::weak_ptr<Monster>::~weak_ptr((std::weak_ptr<Monster> *const)(v4 + 224));
    __gnu_cxx::__normal_iterator<std::weak_ptr<Monster> *,std::vector<std::weak_ptr<Monster>>>::operator++((__gnu_cxx::__normal_iterator<std::weak_ptr<Monster>*,std::vector<std::weak_ptr<Monster>> > *const)(v4 + 128));
  }
  std::vector<std::weak_ptr<Monster>>::clear(last_create_monster_by_yace);
  if ( std::vector<std::string>::empty(param_vec) )
  {
    common::milog::MiLogStream::create(
      &v64,
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/player/gm/player_gm_comp.cpp",
      "procMonsterYace",
      15603);
    common::milog::MiLogStream::operator<<<char [17],(char *[17])0>(&v64, "param not enough");
    common::milog::MiLogStream::~MiLogStream(&v64);
    v3 = -1;
    goto LABEL_97;
  }
  if ( std::vector<std::string>::size(param_vec) > 2 )
  {
    v9 = std::vector<std::string>::operator[](param_vec, 0LL);
    if ( std::operator==<char>(v9, "HP") )
    {
      *(_DWORD *)(v4 + 96) = 0;
      v11 = std::vector<std::string>::operator[](param_vec, 1uLL);
      common::tools::StringUtils::strToNum<unsigned int>(v11, (unsigned int *)(v4 + 96), 1);
      *(_DWORD *)(v4 + 112) = 0;
      v12 = std::vector<std::string>::operator[](param_vec, 2uLL);
      common::tools::StringUtils::strToNum<float>(v12, (float *)(v4 + 112), 1);
      if ( *(_BYTE *)(((unsigned __int64)&context->scene >> 3) + 0x7FFF8000) )
        __asan_report_load8();
      Scene::findEntity<Monster>((const Scene *const)(v4 + 288), (uint32_t)context->scene);
      if ( std::operator==<Monster>(0LL, (const std::shared_ptr<Monster> *)(v4 + 288)) )
      {
        std::string::operator=(ret_msg, "monster not exist");
        v3 = -1;
      }
      else
      {
        v13 = std::__shared_ptr_access<Monster,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Monster,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 288));
        Creature::setCurHp(v13, *(float *)(v4 + 112), 1);
        common::milog::MiLogStream::create(
          &v64,
          &common::milog::MiLogDefault::default_log_obj_,
          1u,
          "./src/player/gm/player_gm_comp.cpp",
          "procMonsterYace",
          15620);
        v14 = common::milog::MiLogStream::operator<<<char [26],(char *[26])0>(
                &v64,
                (const char (*)[26])"gm set monster entity_id=");
        v15 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                v14,
                (const unsigned int *)(v4 + 96));
        v16 = common::milog::MiLogStream::operator<<<char [5],(char *[5])0>(v15, (const char (*)[5])" hp=");
        common::milog::MiLogStream::operator<<<float,(float *)0>(v16, (const float *)(v4 + 112));
        common::milog::MiLogStream::~MiLogStream(&v64);
        v3 = 0;
      }
      std::shared_ptr<Monster>::~shared_ptr((std::shared_ptr<Monster> *const)(v4 + 288));
      goto LABEL_97;
    }
  }
  *(_DWORD *)(v4 + 48) = 0;
  std::string::basic_string(v4 + 384);
  std::vector<std::string>::vector((std::vector<std::string> *const)(v4 + 320), param_vec);
  *(std::vector<std::string>::iterator *)(v4 + 128) = std::vector<std::string>::begin((std::vector<std::string> *const)(v4 + 320));
  while ( 1 )
  {
    *(std::vector<std::string>::iterator *)(v4 + 160) = std::vector<std::string>::end((std::vector<std::string> *const)(v4 + 320));
    if ( !__gnu_cxx::operator!=<std::string *,std::vector<std::string>>(
            (const __gnu_cxx::__normal_iterator<std::string*,std::vector<std::string> > *)(v4 + 128),
            (const __gnu_cxx::__normal_iterator<std::string*,std::vector<std::string> > *)(v4 + 160)) )
      break;
    v17 = __gnu_cxx::__normal_iterator<std::string *,std::vector<std::string>>::operator*((const __gnu_cxx::__normal_iterator<std::string*,std::vector<std::string> > *const)(v4 + 128));
    if ( common::tools::StringUtils::isStartsWith(v17, "DROP_ID=") )
    {
      v18 = __gnu_cxx::__normal_iterator<std::string *,std::vector<std::string>>::operator->((const __gnu_cxx::__normal_iterator<std::string*,std::vector<std::string> > *const)(v4 + 128));
      std::string::substr(&v64, v18, 8LL, -1LL);
      v57 = common::tools::StringUtils::strToNum<unsigned int>((const std::string *)&v64, (unsigned int *)(v4 + 48), 1)
         || !*(_DWORD *)(v4 + 48);
      std::string::~string(&v64);
      if ( v57 )
      {
        std::string::operator=(ret_msg, &unk_26352780);
        v3 = -1;
        goto LABEL_96;
      }
      goto LABEL_35;
    }
    v19 = __gnu_cxx::__normal_iterator<std::string *,std::vector<std::string>>::operator*((const __gnu_cxx::__normal_iterator<std::string*,std::vector<std::string> > *const)(v4 + 128));
    if ( common::tools::StringUtils::isStartsWith(v19, "DROP_TAG=") )
    {
      v20 = __gnu_cxx::__normal_iterator<std::string *,std::vector<std::string>>::operator->((const __gnu_cxx::__normal_iterator<std::string*,std::vector<std::string> > *const)(v4 + 128));
      std::string::substr(&v64, v20, 9LL, -1LL);
      std::string::operator=(v4 + 384, &v64);
      std::string::~string(&v64);
      if ( (unsigned __int8)std::string::empty(v4 + 384) )
      {
        std::string::operator=(ret_msg, &unk_26352800);
        v3 = -1;
        goto LABEL_96;
      }
LABEL_35:
      __gnu_cxx::__normal_iterator<std::string const*,std::vector<std::string>>::__normal_iterator<std::string*>(
        (__gnu_cxx::__normal_iterator<const std::string*,std::vector<std::string> > *const)(v4 + 160),
        (const __gnu_cxx::__normal_iterator<std::string*,std::vector<std::string> > *)(v4 + 128));
      *(std::vector<std::string>::iterator *)(v4 + 128) = std::vector<std::string>::erase(
                                                            (std::vector<std::string> *const)(v4 + 320),
                                                            *(std::vector<std::string>::const_iterator *)(v4 + 160));
    }
    else
    {
      __gnu_cxx::__normal_iterator<std::string *,std::vector<std::string>>::operator++((__gnu_cxx::__normal_iterator<std::string*,std::vector<std::string> > *const)(v4 + 128));
    }
  }
  M_current = std::vector<std::string>::end((std::vector<std::string> *const)(v4 + 320))._M_current;
  v22._M_current = std::vector<std::string>::begin((std::vector<std::string> *const)(v4 + 320))._M_current;
  *(__gnu_cxx::__normal_iterator<std::string*,std::vector<std::string> > *)(v4 + 128) = std::find<__gnu_cxx::__normal_iterator<std::string *,std::vector<std::string>>,char [3]>(
                                                                                          v22,
                                                                                          (__gnu_cxx::__normal_iterator<std::string*,std::vector<std::string> >)M_current,
                                                                                          (const char (*)[3])"-E");
  is_elite = 0;
  *(std::vector<std::string>::iterator *)(v4 + 160) = std::vector<std::string>::end((std::vector<std::string> *const)(v4 + 320));
  if ( __gnu_cxx::operator!=<std::string *,std::vector<std::string>>(
         (const __gnu_cxx::__normal_iterator<std::string*,std::vector<std::string> > *)(v4 + 128),
         (const __gnu_cxx::__normal_iterator<std::string*,std::vector<std::string> > *)(v4 + 160)) )
  {
    is_elite = 1;
    __gnu_cxx::__normal_iterator<std::string const*,std::vector<std::string>>::__normal_iterator<std::string*>(
      (__gnu_cxx::__normal_iterator<const std::string*,std::vector<std::string> > *const)(v4 + 160),
      (const __gnu_cxx::__normal_iterator<std::string*,std::vector<std::string> > *)(v4 + 128));
    std::vector<std::string>::erase(
      (std::vector<std::string> *const)(v4 + 320),
      *(std::vector<std::string>::const_iterator *)(v4 + 160));
  }
  if ( std::vector<std::string>::empty((const std::vector<std::string> *const)(v4 + 320)) )
  {
    common::milog::MiLogStream::create(
      &v64,
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/player/gm/player_gm_comp.cpp",
      "procMonsterYace",
      15666);
    common::milog::MiLogStream::operator<<<char [17],(char *[17])0>(&v64, "param not enough");
    common::milog::MiLogStream::~MiLogStream(&v64);
    v3 = -1;
    goto LABEL_96;
  }
  *(_DWORD *)(v4 + 64) = 0;
  v23 = std::vector<std::string>::operator[]((std::vector<std::string> *const)(v4 + 320), 0LL);
  if ( common::tools::StringUtils::strToNum<unsigned int>(v23, (unsigned int *)(v4 + 64), 1) )
  {
    common::milog::MiLogStream::create(
      &v64,
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/player/gm/player_gm_comp.cpp",
      "procMonsterYace",
      15672);
    v24 = common::milog::MiLogStream::operator<<<char [15],(char *[15])0>(&v64, (const char (*)[15])"invalid param:");
    common::milog::MiLogStream::operator<<<std::string>(v24, (const std::vector<std::string> *)(v4 + 320));
    common::milog::MiLogStream::~MiLogStream(&v64);
    v3 = -1;
    goto LABEL_96;
  }
  v25 = std::vector<std::string>::end((std::vector<std::string> *const)(v4 + 320))._M_current;
  v26._M_current = std::vector<std::string>::begin((std::vector<std::string> *const)(v4 + 320))._M_current;
  *(__gnu_cxx::__normal_iterator<std::string*,std::vector<std::string> > *)(v4 + 160) = std::find<__gnu_cxx::__normal_iterator<std::string *,std::vector<std::string>>,char [3]>(
                                                                                          v26,
                                                                                          (__gnu_cxx::__normal_iterator<std::string*,std::vector<std::string> >)v25,
                                                                                          (const char (*)[3])"-X");
  v27._M_current = std::vector<std::string>::begin((std::vector<std::string> *const)(v4 + 320))._M_current;
  affix_flag_idx = std::distance<__gnu_cxx::__normal_iterator<std::string *,std::vector<std::string>>>(
                     v27,
                     *(__gnu_cxx::__normal_iterator<std::string*,std::vector<std::string> > *)(v4 + 160));
  *(_DWORD *)(v4 + 80) = 1;
  if ( affix_flag_idx > 1 )
  {
    v28 = std::vector<std::string>::operator[]((std::vector<std::string> *const)(v4 + 320), 1uLL);
    if ( common::tools::StringUtils::strToNum<unsigned int>(v28, (unsigned int *)(v4 + 80), 1) )
    {
      common::milog::MiLogStream::create(
        &v64,
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/player/gm/player_gm_comp.cpp",
        "procMonsterYace",
        15685);
      v30 = common::milog::MiLogStream::operator<<<char [15],(char *[15])0>(&v64, (const char (*)[15])"invalid param:");
      common::milog::MiLogStream::operator<<<std::string>(v30, (const std::vector<std::string> *)(v4 + 320));
      common::milog::MiLogStream::~MiLogStream(&v64);
      v3 = -1;
      goto LABEL_96;
    }
  }
  if ( *(_DWORD *)(v4 + 80) > 0x14u )
  {
    common::milog::MiLogStream::create(
      &v64,
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/player/gm/player_gm_comp.cpp",
      "procMonsterYace",
      15690);
    v31 = common::milog::MiLogStream::operator<<<char [23],(char *[23])0>(
            &v64,
            (const char (*)[23])"monster num too large:");
    common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v31, (const unsigned int *)(v4 + 80));
    common::milog::MiLogStream::~MiLogStream(&v64);
    v3 = -1;
    goto LABEL_96;
  }
  *(_DWORD *)(v4 + 96) = 1;
  if ( affix_flag_idx > 2 )
  {
    v32 = std::vector<std::string>::operator[]((std::vector<std::string> *const)(v4 + 320), 2uLL);
    if ( common::tools::StringUtils::strToNum<unsigned int>(v32, (unsigned int *)(v4 + 96), 1) )
    {
      common::milog::MiLogStream::create(
        &v64,
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/player/gm/player_gm_comp.cpp",
        "procMonsterYace",
        15698);
      v34 = common::milog::MiLogStream::operator<<<char [15],(char *[15])0>(&v64, (const char (*)[15])"invalid param:");
      common::milog::MiLogStream::operator<<<std::string>(v34, (const std::vector<std::string> *)(v4 + 320));
      common::milog::MiLogStream::~MiLogStream(&v64);
      v3 = -1;
      goto LABEL_96;
    }
  }
  if ( *(_BYTE *)(((unsigned __int64)&context->avatar >> 3) + 0x7FFF8000) )
    __asan_report_load8();
  Position = (unsigned __int64)Entity::getPosition((const Entity *const)context->avatar);
  if ( (char)(Position & 7) >= *(_BYTE *)((Position >> 3) + 0x7FFF8000) && *(_BYTE *)((Position >> 3) + 0x7FFF8000) != 0
    || *(_BYTE *)(((Position + 11) >> 3) + 0x7FFF8000) != 0
    && (char)((Position + 11) & 7) >= *(_BYTE *)(((Position + 11) >> 3) + 0x7FFF8000) )
  {
    Position = __asan_report_load_n(Position, 12LL);
  }
  *(_QWORD *)(v4 + 192) = *(_QWORD *)Position;
  *(_DWORD *)(v4 + 200) = *(_DWORD *)(Position + 8);
  if ( affix_flag_idx <= 5 )
    goto LABEL_72;
  v36 = std::vector<std::string>::operator[]((std::vector<std::string> *const)(v4 + 320), 3uLL);
  if ( common::tools::StringUtils::strToNum<float>(v36, (float *)(v4 + 192), 1) )
  {
    common::milog::MiLogStream::create(
      &v64,
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/player/gm/player_gm_comp.cpp",
      "procMonsterYace",
      15708);
    v37 = common::milog::MiLogStream::operator<<<char [15],(char *[15])0>(&v64, (const char (*)[15])"invalid param:");
    common::milog::MiLogStream::operator<<<std::string>(v37, (const std::vector<std::string> *)(v4 + 320));
    common::milog::MiLogStream::~MiLogStream(&v64);
    v3 = -1;
    goto LABEL_96;
  }
  v38 = std::vector<std::string>::operator[]((std::vector<std::string> *const)(v4 + 320), 4uLL);
  if ( common::tools::StringUtils::strToNum<float>(v38, (float *)(v4 + 196), 1) )
  {
    common::milog::MiLogStream::create(
      &v64,
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/player/gm/player_gm_comp.cpp",
      "procMonsterYace",
      15715);
    v39 = common::milog::MiLogStream::operator<<<char [15],(char *[15])0>(&v64, (const char (*)[15])"invalid param:");
    common::milog::MiLogStream::operator<<<std::string>(v39, (const std::vector<std::string> *)(v4 + 320));
    common::milog::MiLogStream::~MiLogStream(&v64);
    v3 = -1;
    goto LABEL_96;
  }
  v40 = std::vector<std::string>::operator[]((std::vector<std::string> *const)(v4 + 320), 5uLL);
  if ( common::tools::StringUtils::strToNum<float>(v40, (float *)(v4 + 200), 1) )
  {
    common::milog::MiLogStream::create(
      &v64,
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/player/gm/player_gm_comp.cpp",
      "procMonsterYace",
      15722);
    v41 = common::milog::MiLogStream::operator<<<char [15],(char *[15])0>(&v64, (const char (*)[15])"invalid param:");
    common::milog::MiLogStream::operator<<<std::string>(v41, (const std::vector<std::string> *)(v4 + 320));
    common::milog::MiLogStream::~MiLogStream(&v64);
    v3 = -1;
  }
  else
  {
LABEL_72:
    MonsterParam::MonsterParam((MonsterParam *const)(v4 + 576));
    *(_DWORD *)(v4 + 576) = *(_DWORD *)(v4 + 64);
    *(_QWORD *)(v4 + 588) = *(_QWORD *)(v4 + 192);
    *(_DWORD *)(v4 + 596) = *(_DWORD *)(v4 + 200);
    *(_DWORD *)(v4 + 612) = *(_DWORD *)(v4 + 96);
    *(_BYTE *)(v4 + 665) = is_elite;
    *(_DWORD *)(v4 + 624) = *(_DWORD *)(v4 + 48);
    std::string::operator=(v4 + 744, v4 + 384);
    for ( idx = affix_flag_idx + 1;
          idx < std::vector<std::string>::size((const std::vector<std::string> *const)(v4 + 320));
          ++idx )
    {
      *(_DWORD *)(v4 + 112) = 0;
      v42 = std::vector<std::string>::operator[]((std::vector<std::string> *const)(v4 + 320), idx);
      if ( common::tools::StringUtils::strToNum<unsigned int>(v42, (unsigned int *)(v4 + 112), 1) )
      {
        common::milog::MiLogStream::create(
          &v64,
          &common::milog::MiLogDefault::default_log_obj_,
          3u,
          "./src/player/gm/player_gm_comp.cpp",
          "procMonsterYace",
          15738);
        v43 = common::milog::MiLogStream::operator<<<char [22],(char *[22])0>(
                &v64,
                (const char (*)[22])"invalid affix param: ");
        v44 = std::vector<std::string>::operator[]((std::vector<std::string> *const)(v4 + 320), idx);
        common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v43, v44);
        common::milog::MiLogStream::~MiLogStream(&v64);
        v3 = -1;
        goto LABEL_95;
      }
      std::set<unsigned int>::insert(
        (std::set<unsigned int> *const)(v4 + 672),
        (const std::set<unsigned int>::value_type *)(v4 + 112));
    }
    for ( i = 0; i < *(_DWORD *)(v4 + 80); ++i )
    {
      *(float *)(v4 + 588) = *(float *)(v4 + 588) + 1.0;
      *(float *)(v4 + 596) = *(float *)(v4 + 596) + 1.0;
      if ( *(_BYTE *)(((unsigned __int64)&context->scene >> 3) + 0x7FFF8000) )
        __asan_report_load8();
      *(_DWORD *)(v4 + 584) = Scene::genNewEntityId(context->scene, PROT_ENTITY_MONSTER);
      EntityMgr::createMonster((const MonsterParam *)(v4 + 288));
      if ( std::operator==<Monster>((const std::shared_ptr<Monster> *)(v4 + 288), 0LL) )
      {
        common::milog::MiLogStream::create(
          &v64,
          &common::milog::MiLogDefault::default_log_obj_,
          3u,
          "./src/player/gm/player_gm_comp.cpp",
          "procMonsterYace",
          15751);
        v45 = common::milog::MiLogStream::operator<<<char [33],(char *[33])0>(
                &v64,
                (const char (*)[33])"createMonster fails, monster_id:");
        common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v45, (const unsigned int *)(v4 + 64));
        common::milog::MiLogStream::~MiLogStream(&v64);
        v3 = -1;
        v46 = 0;
      }
      else
      {
        v47 = std::__shared_ptr_access<Monster,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Monster,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 288));
        if ( *(_BYTE *)(((unsigned __int64)v47 >> 3) + 0x7FFF8000) )
          __asan_report_load8();
        v48 = *(_QWORD *)v47->baseclass_0 + 56LL;
        if ( *(_BYTE *)((v48 >> 3) + 0x7FFF8000) )
          __asan_report_load8();
        v49 = *(void (__fastcall **)(std::__shared_ptr_access<Monster,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *, Scene *, VisionContext *))v48;
        if ( *(_BYTE *)(((unsigned __int64)&context->scene >> 3) + 0x7FFF8000) )
          __asan_report_load8();
        v49(v47, context->scene, &VisionContext::meet_context);
        v50 = std::__shared_ptr_access<Monster,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Monster,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 288));
        Creature::setIsCreatedByGm(v50, 1);
        v51 = std::__shared_ptr_access<Monster,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Monster,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 288));
        FightPropComp = Creature::getFightPropComp(v51);
        IsInvincible = FightPropComp::getIsInvincible(FightPropComp);
        if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
          __asan_report_load8();
        GmComp = Player::getGmComp(context->player);
        IsMonsterInvincible = PlayerGmComp::getIsMonsterInvincible(GmComp);
        PileBoolValue::set(IsInvincible, 0, IsMonsterInvincible);
        std::vector<std::weak_ptr<Monster>>::emplace_back<std::shared_ptr<Monster> &>(
          last_create_monster_by_yace,
          (std::shared_ptr<Monster> *)(v4 + 288),
          (std::shared_ptr<Monster> *)(v4 + 288));
        v46 = 1;
      }
      std::shared_ptr<Monster>::~shared_ptr((std::shared_ptr<Monster> *const)(v4 + 288));
      if ( v46 != 1 )
        goto LABEL_95;
    }
    v3 = 0;
LABEL_95:
    MonsterParam::~MonsterParam((MonsterParam *const)(v4 + 576));
  }
LABEL_96:
  std::vector<std::string>::~vector((std::vector<std::string> *const)(v4 + 320));
  std::string::~string((void *)(v4 + 384));
LABEL_97:
  result = v3;
  if ( v65 == (char *)v4 )
  {
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8008) = 0LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8010) = 0LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8018) = 0LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8020) = 0LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8028) = 0LL;
    *(_DWORD *)((v4 >> 3) + 0x7FFF8034) = 0;
    *(_DWORD *)((v4 >> 3) + 0x7FFF8044) = 0;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8074) = 0LL;
  }
  else
  {
    *(_QWORD *)v4 = 1172321806LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8020) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8028) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8030) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8038) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8040) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8048) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8050) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8058) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8060) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8068) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8070) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v4 >> 3) + 0x7FFF8078) = -168430091;
  }
  return result;
};

// Line 15762: range 0000000017D7C15C-0000000017D7C1FE
void __cdecl procChessRegister::procChessRegister(procChessRegister *const this)
{
  std::function<int(GmContext&,const std::vector<std::string>&,std::string&)> *v1; // rax
  std::allocator<char> __a; // [rsp+1Fh] [rbp-31h] BYREF
  std::string __k; // [rsp+20h] [rbp-30h] BYREF

  std::allocator<char>::allocator(&__a);
  std::string::basic_string<std::allocator<char>>(&__k, "CHESS", &__a);
  v1 = std::unordered_map<std::string,std::function<int ()(GmContext &,std::vector<std::string> const&,std::string&)>>::operator[](
         &GmUtils::op_func_map[abi:cxx11],
         &__k);
  std::function<int ()(GmContext &,std::vector<std::string> const&,std::string&)>::operator=<int (&)(GmContext &,std::vector<std::string> const&,std::string&)>(
    v1,
    (int (*)(GmContext *, const std::vector<std::string> *, std::string *))procChess);
  std::string::~string(&__k);
  std::allocator<char>::~allocator(&__a);
};

// Line 15763: range 0000000017C3C17C-0000000017C3D065
int32_t __cdecl procChess(GmContext *context, const std::vector<std::string> *param_vec, std::string *ret_msg)
{
  unsigned __int64 v3; // r14
  __int64 v4; // rax
  _DWORD *v5; // r13
  int32_t v6; // r12d
  const std::string *v7; // rax
  const std::string *v8; // rax
  Scene *v9; // rax
  std::__shared_ptr_access<TowerDefensePlay,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v10; // rax
  std::__shared_ptr_access<TowerDefensePlay,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v11; // rax
  const std::string *v12; // rax
  const std::string *v13; // rax
  Scene *v14; // rax
  ChessMultistagePlay *p_player; // rdi
  uint32_t v16; // edx
  const std::string *v17; // rax
  const std::string *v18; // rax
  ChessActivity *v19; // rax
  const std::string *v20; // rax
  ChessActivity *v21; // rax
  const std::string *v22; // rax
  const std::string *v23; // rax
  ChessActivity *v24; // rax
  const std::string *v25; // rax
  const std::string *v26; // rax
  Scene *v27; // rax
  std::__shared_ptr_access<ChessMultistagePlay,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v28; // rsi
  uint32_t v29; // ecx
  const std::string *v30; // rax
  const std::string *v31; // rax
  Scene *v32; // rax
  std::__shared_ptr_access<ChessMultistagePlay,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v33; // rax
  int32_t result; // eax
  unsigned int uid; // [rsp+28h] [rbp-118h]
  unsigned int cost_points; // [rsp+2Ch] [rbp-114h]
  int ret_0; // [rsp+30h] [rbp-110h]
  int ret; // [rsp+34h] [rbp-10Ch]
  std::string v41; // [rsp+50h] [rbp-F0h] BYREF
  char v42[208]; // [rsp+70h] [rbp-D0h] BYREF

  v3 = (unsigned __int64)v42;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_2(160LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "5 32 1 13 is_succ:15920 48 4 13 card_id:15896 64 16 23 dungeon_scene_ptr:15778 96 16 23 dungeon_"
                        "scene_ptr:15927 128 16 14 play_ptr:15934";
  *(_QWORD *)(v3 + 16) = procChess;
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = -234556927;
  v5[536862722] = -219021312;
  v5[536862723] = -219021312;
  v5[536862724] = -202178560;
  if ( std::vector<std::string>::size(param_vec) <= 1 )
  {
    std::string::operator=(ret_msg, "param not enough");
    v6 = -1;
    goto LABEL_89;
  }
  v7 = std::vector<std::string>::operator[](param_vec, 0LL);
  if ( std::operator==<char>(v7, "POINTS") )
  {
    *(_DWORD *)(v3 + 48) = 0;
    v8 = std::vector<std::string>::operator[](param_vec, 1uLL);
    if ( common::tools::StringUtils::strToNum<int>(v8, (int *)(v3 + 48), 1) )
    {
      std::string::operator=(ret_msg, "param delta invalid");
      v6 = -1;
      goto LABEL_89;
    }
    if ( *(_BYTE *)(((unsigned __int64)&context->scene >> 3) + 0x7FFF8000) )
      __asan_report_load8();
    toPtr<DungeonScene,Scene>((Scene *)(v3 + 64));
    if ( std::operator==<DungeonScene>(0LL, (const std::shared_ptr<DungeonScene> *)(v3 + 64)) )
    {
      std::string::operator=(ret_msg, "player not in dungeon scene");
      v6 = -1;
LABEL_27:
      std::shared_ptr<DungeonScene>::~shared_ptr((std::shared_ptr<DungeonScene> *const)(v3 + 64));
      goto LABEL_89;
    }
    v9 = (Scene *)std::__shared_ptr_access<DungeonScene,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<DungeonScene,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 64));
    Scene::getMultistagePlayComp(v9);
    SceneMultistagePlayComp::findAnyPlayByGm<ChessMultistagePlay>((SceneMultistagePlayComp *const)(v3 + 96));
    if ( std::operator==<ChessMultistagePlay>(0LL, (const std::shared_ptr<ChessMultistagePlay> *)(v3 + 96)) )
    {
      std::string::operator=(ret_msg, "findAnyPlayByGm ChessMultistagePlay fails.");
      v6 = -1;
LABEL_26:
      std::shared_ptr<ChessMultistagePlay>::~shared_ptr((std::shared_ptr<ChessMultistagePlay> *const)(v3 + 96));
      goto LABEL_27;
    }
    if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
      __asan_report_load8();
    uid = Player::getUid(context->player);
    std::__shared_ptr_access<ChessMultistagePlay,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<ChessMultistagePlay,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 96));
    EcsBase<SceneMultistagePlay,SceneMultistagePlayCompBase,2u>::findComp<TowerDefensePlay>((const EcsBase<SceneMultistagePlay,SceneMultistagePlayCompBase,2> *const)(v3 + 128));
    if ( std::operator==<TowerDefensePlay>(0LL, (const std::shared_ptr<TowerDefensePlay> *)(v3 + 128)) )
    {
      std::string::operator=(ret_msg, "tower defense comp not found.");
      v6 = -1;
LABEL_25:
      std::shared_ptr<TowerDefensePlay>::~shared_ptr((std::shared_ptr<TowerDefensePlay> *const)(v3 + 128));
      goto LABEL_26;
    }
    if ( *(int *)(v3 + 48) < 0 )
    {
      cost_points = abs32(*(_DWORD *)(v3 + 48));
      v11 = std::__shared_ptr_access<TowerDefensePlay,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<TowerDefensePlay,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 128));
      ret_0 = TowerDefensePlay::subBuildingPoints(v11, uid, cost_points);
      if ( ret_0 )
      {
        std::string::operator=(ret_msg, " cost building points failed.");
        v6 = ret_0;
        goto LABEL_25;
      }
    }
    else
    {
      v10 = std::__shared_ptr_access<TowerDefensePlay,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<TowerDefensePlay,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 128));
      ret = TowerDefensePlay::addBuildingPoints(v10, uid, *(_DWORD *)(v3 + 48), 1);
      if ( ret )
      {
        std::string::operator=(ret_msg, " add building points failed.");
        v6 = ret;
        goto LABEL_25;
      }
    }
    v6 = 0;
    goto LABEL_25;
  }
  v12 = std::vector<std::string>::operator[](param_vec, 0LL);
  if ( !std::operator==<char>(v12, "FORCE_CARD_EFFECT") )
  {
    v17 = std::vector<std::string>::operator[](param_vec, 0LL);
    if ( std::operator==<char>(v17, "FINISH_MAP") )
    {
      *(_DWORD *)(v3 + 48) = 0;
      v18 = std::vector<std::string>::operator[](param_vec, 1uLL);
      if ( common::tools::StringUtils::strToNum<unsigned int>(v18, (unsigned int *)(v3 + 48), 1) )
      {
LABEL_46:
        std::string::operator=(ret_msg, "strToNum failed");
        v6 = -1;
        goto LABEL_89;
      }
      if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
        __asan_report_load8();
      Player::getActivityComp(context->player);
      PlayerActivityComp::findOpenningActivity<ChessActivity>((PlayerActivityComp *const)(v3 + 128));
      if ( !std::operator==<ChessActivity>(0LL, (const std::shared_ptr<ChessActivity> *)(v3 + 128)) )
      {
        v19 = std::__shared_ptr_access<ChessActivity,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<ChessActivity,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 128));
        v6 = ChessActivity::finishChessMapByGm(v19, *(_DWORD *)(v3 + 48));
LABEL_64:
        std::shared_ptr<ChessActivity>::~shared_ptr((std::shared_ptr<ChessActivity> *const)(v3 + 128));
        goto LABEL_89;
      }
LABEL_55:
      std::string::operator=(ret_msg, "chess activity is not open");
      v6 = -1;
      goto LABEL_64;
    }
    v20 = std::vector<std::string>::operator[](param_vec, 0LL);
    if ( std::operator==<char>(v20, "CLEAR_FINISHED_MAP") )
    {
      if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
        __asan_report_load8();
      Player::getActivityComp(context->player);
      PlayerActivityComp::findOpenningActivity<ChessActivity>((PlayerActivityComp *const)(v3 + 128));
      if ( !std::operator==<ChessActivity>(0LL, (const std::shared_ptr<ChessActivity> *)(v3 + 128)) )
      {
        v21 = std::__shared_ptr_access<ChessActivity,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<ChessActivity,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 128));
        v6 = ChessActivity::clearFinishedChessMapByGm(v21);
        goto LABEL_64;
      }
      goto LABEL_55;
    }
    v22 = std::vector<std::string>::operator[](param_vec, 0LL);
    if ( std::operator==<char>(v22, "SET_LEVEL") )
    {
      *(_DWORD *)(v3 + 48) = 0;
      v23 = std::vector<std::string>::operator[](param_vec, 1uLL);
      if ( common::tools::StringUtils::strToNum<unsigned int>(v23, (unsigned int *)(v3 + 48), 1) )
        goto LABEL_46;
      if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
        __asan_report_load8();
      Player::getActivityComp(context->player);
      PlayerActivityComp::findOpenningActivity<ChessActivity>((PlayerActivityComp *const)(v3 + 128));
      if ( !std::operator==<ChessActivity>(0LL, (const std::shared_ptr<ChessActivity> *)(v3 + 128)) )
      {
        v24 = std::__shared_ptr_access<ChessActivity,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<ChessActivity,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 128));
        v6 = ChessActivity::setLevelByGm(v24, *(_DWORD *)(v3 + 48));
        goto LABEL_64;
      }
      goto LABEL_55;
    }
    v25 = std::vector<std::string>::operator[](param_vec, 0LL);
    if ( std::operator==<char>(v25, "GET_CARD_NUM") )
    {
      *(_DWORD *)(v3 + 48) = 0;
      v26 = std::vector<std::string>::operator[](param_vec, 1uLL);
      if ( common::tools::StringUtils::strToNum<unsigned int>(v26, (unsigned int *)(v3 + 48), 1) )
      {
        std::string::operator=(ret_msg, "card_id strToNum failed");
        v6 = -1;
        goto LABEL_89;
      }
      if ( *(_BYTE *)(((unsigned __int64)&context->scene >> 3) + 0x7FFF8000) )
        __asan_report_load8();
      toPtr<DungeonScene,Scene>((Scene *)(v3 + 96));
      if ( std::operator==<DungeonScene>(0LL, (const std::shared_ptr<DungeonScene> *)(v3 + 96)) )
      {
LABEL_71:
        std::string::operator=(ret_msg, "player not in dungeon scene");
        v6 = -1;
LABEL_78:
        std::shared_ptr<DungeonScene>::~shared_ptr((std::shared_ptr<DungeonScene> *const)(v3 + 96));
        goto LABEL_89;
      }
      v27 = (Scene *)std::__shared_ptr_access<DungeonScene,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<DungeonScene,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 96));
      Scene::getMultistagePlayComp(v27);
      SceneMultistagePlayComp::findAnyPlayByGm<ChessMultistagePlay>((SceneMultistagePlayComp *const)(v3 + 128));
      if ( std::operator==<ChessMultistagePlay>(0LL, (const std::shared_ptr<ChessMultistagePlay> *)(v3 + 128)) )
      {
        std::string::operator=(ret_msg, "findAnyPlayByGm ChessMultistagePlay fails.");
        v6 = -1;
      }
      else
      {
        v28 = std::__shared_ptr_access<ChessMultistagePlay,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<ChessMultistagePlay,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 128));
        v29 = *(_DWORD *)(v3 + 48);
        if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
          __asan_report_load8();
        ChessMultistagePlay::getCardNumByGM[abi:cxx11](&v41, v28, context->player, v29);
        std::string::operator=(ret_msg, &v41);
        std::string::~string(&v41);
        v6 = 0;
      }
    }
    else
    {
      v30 = std::vector<std::string>::operator[](param_vec, 0LL);
      if ( !std::operator==<char>(v30, "SETTLE") )
      {
        std::string::operator=(ret_msg, "invalid gm command.");
        v6 = -1;
        goto LABEL_89;
      }
      *(_BYTE *)(v3 + 32) = 0;
      v31 = std::vector<std::string>::operator[](param_vec, 1uLL);
      if ( common::tools::StringUtils::strToNum<bool>(v31, (bool *)(v3 + 32), 1) )
      {
        std::string::operator=(ret_msg, "param_vec[1] strToNum failed");
        v6 = -1;
        goto LABEL_89;
      }
      if ( *(_BYTE *)(((unsigned __int64)&context->scene >> 3) + 0x7FFF8000) )
        __asan_report_load8();
      std::enable_shared_from_this<Scene>::shared_from_this((std::enable_shared_from_this<Scene> *const)(v3 + 128));
      std::dynamic_pointer_cast<DungeonScene,Scene>((const std::shared_ptr<Scene> *)(v3 + 96));
      std::shared_ptr<Scene>::~shared_ptr((std::shared_ptr<Scene> *const)(v3 + 128));
      if ( std::operator==<DungeonScene>(0LL, (const std::shared_ptr<DungeonScene> *)(v3 + 96)) )
        goto LABEL_71;
      v32 = (Scene *)std::__shared_ptr_access<DungeonScene,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<DungeonScene,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 96));
      Scene::getMultistagePlayComp(v32);
      SceneMultistagePlayComp::findPlay<ChessMultistagePlay>((const SceneMultistagePlayComp *const)(v3 + 128));
      if ( std::operator==<ChessMultistagePlay>(0LL, (const std::shared_ptr<ChessMultistagePlay> *)(v3 + 128)) )
      {
        common::milog::MiLogStream::create(
          (common::milog::MiLogStream *)&v41,
          &common::milog::MiLogDefault::default_log_obj_,
          3u,
          "./src/player/gm/player_gm_comp.cpp",
          "procChess",
          15937);
        common::milog::MiLogStream::operator<<<char [37],(char *[37])0>(
          (common::milog::MiLogStream *const)&v41,
          (const char (*)[37])"findPlay<ChessMultistagePlay> failed");
        common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)&v41);
        v6 = -1;
      }
      else
      {
        v33 = std::__shared_ptr_access<ChessMultistagePlay,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<ChessMultistagePlay,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 128));
        SceneMultistagePlay::end(v33, *(_BYTE *)(v3 + 32));
        v6 = 0;
      }
    }
    std::shared_ptr<ChessMultistagePlay>::~shared_ptr((std::shared_ptr<ChessMultistagePlay> *const)(v3 + 128));
    goto LABEL_78;
  }
  *(_DWORD *)(v3 + 48) = 0;
  v13 = std::vector<std::string>::operator[](param_vec, 1uLL);
  if ( common::tools::StringUtils::strToNum<unsigned int>(v13, (unsigned int *)(v3 + 48), 1) )
  {
    std::string::operator=(ret_msg, "param card_id failed");
    v6 = -1;
  }
  else
  {
    if ( *(_BYTE *)(((unsigned __int64)&context->scene >> 3) + 0x7FFF8000) )
      __asan_report_load8();
    toPtr<DungeonScene,Scene>((Scene *)(v3 + 96));
    if ( std::operator==<DungeonScene>(0LL, (const std::shared_ptr<DungeonScene> *)(v3 + 96)) )
    {
      std::string::operator=(ret_msg, "player not in dungeon scene");
      v6 = -1;
    }
    else
    {
      v14 = (Scene *)std::__shared_ptr_access<DungeonScene,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<DungeonScene,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 96));
      Scene::getMultistagePlayComp(v14);
      SceneMultistagePlayComp::findAnyPlayByGm<ChessMultistagePlay>((SceneMultistagePlayComp *const)(v3 + 128));
      if ( std::operator==<ChessMultistagePlay>(0LL, (const std::shared_ptr<ChessMultistagePlay> *)(v3 + 128)) )
      {
        std::string::operator=(ret_msg, "findAnyPlayByGm ChessMultistagePlay fails.");
        v6 = -1;
      }
      else
      {
        p_player = std::__shared_ptr_access<ChessMultistagePlay,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<ChessMultistagePlay,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 128));
        v16 = *(_DWORD *)(v3 + 48);
        if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
        {
          p_player = (ChessMultistagePlay *)&context->player;
          __asan_report_load8();
        }
        if ( ChessMultistagePlay::forceCardEffectByGM(p_player, context->player, v16) )
        {
          std::string::operator=(ret_msg, "forceCardEffectByGM fails.");
          v6 = -1;
        }
        else
        {
          v6 = 0;
        }
      }
      std::shared_ptr<ChessMultistagePlay>::~shared_ptr((std::shared_ptr<ChessMultistagePlay> *const)(v3 + 128));
    }
    std::shared_ptr<DungeonScene>::~shared_ptr((std::shared_ptr<DungeonScene> *const)(v3 + 96));
  }
LABEL_89:
  result = v6;
  if ( v42 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8010) = 0;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8010) = -168430091;
  }
  return result;
};

// Line 15948: range 0000000017D7C200-0000000017D7C2A2
void __cdecl procCombatStatLogBeginRegister::procCombatStatLogBeginRegister(procCombatStatLogBeginRegister *const this)
{
  std::function<int(GmContext&,const std::vector<std::string>&,std::string&)> *v1; // rax
  std::allocator<char> __a; // [rsp+1Fh] [rbp-31h] BYREF
  std::string __k; // [rsp+20h] [rbp-30h] BYREF

  std::allocator<char>::allocator(&__a);
  std::string::basic_string<std::allocator<char>>(&__k, "COMBAT_STAT_LOG_BEGIN", &__a);
  v1 = std::unordered_map<std::string,std::function<int ()(GmContext &,std::vector<std::string> const&,std::string&)>>::operator[](
         &GmUtils::op_func_map[abi:cxx11],
         &__k);
  std::function<int ()(GmContext &,std::vector<std::string> const&,std::string&)>::operator=<int (&)(GmContext &,std::vector<std::string> const&,std::string&)>(
    v1,
    (int (*)(GmContext *, const std::vector<std::string> *, std::string *))procCombatStatLogBegin);
  std::string::~string(&__k);
  std::allocator<char>::~allocator(&__a);
};

// Line 15949: range 0000000017C3D066-0000000017C3D123
int32_t __cdecl procCombatStatLogBegin(
        GmContext *context,
        const std::vector<std::string> *param_vec,
        std::string *ret_msg)
{
  PlayerBasicComp *BasicComp; // rax
  StatLogReporter *StatLogReporter; // rbx
  proto_log::TransType v5; // eax
  std::string p_transaction; // [rsp+20h] [rbp-30h] BYREF

  if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
    __asan_report_load8();
  BasicComp = Player::getBasicComp(context->player);
  StatLogReporter = PlayerBasicComp::getStatLogReporter(BasicComp);
  common::tools::RandomUtils::randSimpleString[abi:cxx11](&p_transaction, 0x14u);
  v5 = common::tools::RandomUtils::rand<int>(1, 2);
  StatLogReporter::setTransStateByGm(StatLogReporter, v5, &p_transaction);
  std::string::~string(&p_transaction);
  return 0;
};

// Line 15954: range 0000000017D7C2A4-0000000017D7C346
void __cdecl procAddAbilityRegister::procAddAbilityRegister(procAddAbilityRegister *const this)
{
  std::function<int(GmContext&,const std::vector<std::string>&,std::string&)> *v1; // rax
  std::allocator<char> __a; // [rsp+1Fh] [rbp-31h] BYREF
  std::string __k; // [rsp+20h] [rbp-30h] BYREF

  std::allocator<char>::allocator(&__a);
  std::string::basic_string<std::allocator<char>>(&__k, "ADD_ABILITY", &__a);
  v1 = std::unordered_map<std::string,std::function<int ()(GmContext &,std::vector<std::string> const&,std::string&)>>::operator[](
         &GmUtils::op_func_map[abi:cxx11],
         &__k);
  std::function<int ()(GmContext &,std::vector<std::string> const&,std::string&)>::operator=<int (&)(GmContext &,std::vector<std::string> const&,std::string&)>(
    v1,
    (int (*)(GmContext *, const std::vector<std::string> *, std::string *))procAddAbility);
  std::string::~string(&__k);
  std::allocator<char>::~allocator(&__a);
};

// Line 15955: range 0000000017C3D124-0000000017C3D310
int32_t __cdecl procAddAbility(GmContext *context, const std::vector<std::string> *param_vec, std::string *ret_msg)
{
  unsigned __int64 v3; // r12
  __int64 v4; // rax
  _DWORD *v5; // r13
  int32_t v6; // r14d
  Creature *v7; // rax
  AbilityComp *AbilityComp; // rax
  int32_t result; // eax
  char v10[144]; // [rsp+20h] [rbp-90h] BYREF

  v3 = (unsigned __int64)v10;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_1(96LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "3 32 4 15 entity_id:15956 48 4 23 ability_name_hash:15957 64 16 16 entity_ptr:15959";
  *(_QWORD *)(v3 + 16) = procAddAbility;
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = -234556924;
  v5[536862722] = -202178560;
  *(_DWORD *)(v3 + 32) = 0;
  *(_DWORD *)(v3 + 48) = 0;
  if ( common::tools::StringUtils::strVecToNum<0u,unsigned int,int &>(
         param_vec,
         (unsigned int *)(v3 + 32),
         (int *)(v3 + 48),
         (int *)(v3 + 32)) )
  {
    v6 = -1;
  }
  else
  {
    if ( *(_BYTE *)(((unsigned __int64)&context->scene >> 3) + 0x7FFF8000) )
      __asan_report_load8();
    Scene::findEntity<Creature>((const Scene *const)(v3 + 64), (uint32_t)context->scene);
    if ( std::operator==<Creature>(0LL, (const std::shared_ptr<Creature> *)(v3 + 64)) )
    {
      v6 = -2;
    }
    else
    {
      v7 = std::__shared_ptr_access<Creature,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Creature,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 64));
      AbilityComp = Creature::getAbilityComp(v7);
      v6 = AbilityComp::addNewAbility(AbilityComp, *(_DWORD *)(v3 + 48), 0);
    }
    std::shared_ptr<Creature>::~shared_ptr((std::shared_ptr<Creature> *const)(v3 + 64));
  }
  result = v6;
  if ( v10 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8008) = 0;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8008) = -168430091;
  }
  return result;
};

// Line 15964: range 0000000017D7C348-0000000017D7C3EA
void __cdecl procSetAvatarOverrideMapRegister::procSetAvatarOverrideMapRegister(
        procSetAvatarOverrideMapRegister *const this)
{
  std::function<int(GmContext&,const std::vector<std::string>&,std::string&)> *v1; // rax
  std::allocator<char> __a; // [rsp+1Fh] [rbp-31h] BYREF
  std::string __k; // [rsp+20h] [rbp-30h] BYREF

  std::allocator<char>::allocator(&__a);
  std::string::basic_string<std::allocator<char>>(&__k, "SET_AVATAR_OVERRIDEMAP", &__a);
  v1 = std::unordered_map<std::string,std::function<int ()(GmContext &,std::vector<std::string> const&,std::string&)>>::operator[](
         &GmUtils::op_func_map[abi:cxx11],
         &__k);
  std::function<int ()(GmContext &,std::vector<std::string> const&,std::string&)>::operator=<int (&)(GmContext &,std::vector<std::string> const&,std::string&)>(
    v1,
    (int (*)(GmContext *, const std::vector<std::string> *, std::string *))procSetAvatarOverrideMap);
  std::string::~string(&__k);
  std::allocator<char>::~allocator(&__a);
};

// Line 15965: range 0000000017C3D311-0000000017C3D81A
int32_t __cdecl procSetAvatarOverrideMap(
        GmContext *context,
        const std::vector<std::string> *param_vec,
        std::string *ret_msg)
{
  unsigned __int64 v3; // r13
  __int64 v4; // rax
  _DWORD *v5; // r12
  int32_t v7; // r14d
  const std::string *v8; // rax
  std::vector<std::string>::const_reference v9; // rax
  std::vector<std::string>::const_reference v10; // rax
  std::vector<std::string>::size_type v11; // rdx
  const std::string *v12; // rax
  std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v13; // rax
  AbilityComp *AbilityComp; // rax
  int32_t result; // eax
  std::allocator<char> __a; // [rsp+2Bh] [rbp-125h] BYREF
  int32_t ret; // [rsp+2Ch] [rbp-124h]
  std::shared_ptr<Avatar> __r; // [rsp+30h] [rbp-120h] BYREF
  char v20[272]; // [rsp+40h] [rbp-110h] BYREF

  v3 = (unsigned __int64)v20;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_2(224LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "5 32 4 15 entity_id:15974 48 4 20 override_value:15994 64 16 16 avatar_ptr:15972 96 32 18 abilit"
                        "y_name:15985 160 32 18 override_key:15988";
  *(_QWORD *)(v3 + 16) = procSetAvatarOverrideMap;
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = -234556924;
  v5[536862722] = -219021312;
  v5[536862724] = -218959118;
  v5[536862726] = -202116109;
  if ( std::vector<std::string>::size(param_vec) <= 2 || std::vector<std::string>::size(&context->raw_param_vec) <= 2 )
  {
    std::string::operator=(ret_msg, "param size error");
    v7 = -1;
  }
  else
  {
    if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
      __asan_report_load8();
    Player::getCurAvatar((Player *const)(v3 + 64));
    *(_DWORD *)(v3 + 32) = 0;
    v8 = std::vector<std::string>::operator[](param_vec, 0LL);
    if ( common::tools::StringUtils::strToNum<unsigned int>(v8, (unsigned int *)(v3 + 32), 1) )
    {
      std::string::operator=(ret_msg, "param 1st is not num");
      v7 = -1;
    }
    else
    {
      if ( *(_DWORD *)(v3 + 32) )
      {
        if ( *(_BYTE *)(((unsigned __int64)&context->scene >> 3) + 0x7FFF8000) )
          __asan_report_load8();
        Scene::findEntity<Avatar>((const Scene *const)&__r, (uint32_t)context->scene);
        std::shared_ptr<Avatar>::operator=((std::shared_ptr<Avatar> *const)(v3 + 64), &__r);
        std::shared_ptr<Avatar>::~shared_ptr(&__r);
      }
      v9 = std::vector<std::string>::operator[](&context->raw_param_vec, 1uLL);
      std::string::basic_string(v3 + 96, v9);
      std::allocator<char>::allocator(&__a);
      std::string::basic_string<std::allocator<char>>((std::string *const)(v3 + 160), byte_262D4440, &__a);
      std::allocator<char>::~allocator(&__a);
      if ( std::vector<std::string>::size(&context->raw_param_vec) > 3 )
      {
        v10 = std::vector<std::string>::operator[](&context->raw_param_vec, 2uLL);
        std::string::operator=(v3 + 160, v10);
      }
      *(_DWORD *)(v3 + 48) = 0;
      v11 = std::vector<std::string>::size(param_vec) - 1;
      v12 = std::vector<std::string>::operator[](param_vec, v11);
      if ( common::tools::StringUtils::strToNum<float>(v12, (float *)(v3 + 48), 1) )
      {
        std::string::operator=(ret_msg, "param 4st is not float");
        v7 = -1;
      }
      else if ( std::operator==<Avatar>(0LL, (const std::shared_ptr<Avatar> *)(v3 + 64)) )
      {
        std::string::operator=(ret_msg, "entity not found");
        v7 = -2;
      }
      else
      {
        v13 = std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 64));
        AbilityComp = Creature::getAbilityComp(v13);
        ret = AbilityComp::setOverrideValueByGm(
                AbilityComp,
                (const std::string *)(v3 + 96),
                (const std::string *)(v3 + 160),
                *(float *)(v3 + 48));
        if ( ret )
          std::string::operator=(ret_msg, &off_2636FA00);
        v7 = ret;
      }
      std::string::~string((void *)(v3 + 160));
      std::string::~string((void *)(v3 + 96));
    }
    std::shared_ptr<Avatar>::~shared_ptr((std::shared_ptr<Avatar> *const)(v3 + 64));
  }
  result = v7;
  if ( v20 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8008) = 0;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8010) = 0;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8018) = 0;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8018) = -168430091;
  }
  return result;
};

// Line 16015: range 0000000017D7C3EC-0000000017D7C48E
void __cdecl procAddAvatarAbilityRegister::procAddAvatarAbilityRegister(procAddAvatarAbilityRegister *const this)
{
  std::function<int(GmContext&,const std::vector<std::string>&,std::string&)> *v1; // rax
  std::allocator<char> __a; // [rsp+1Fh] [rbp-31h] BYREF
  std::string __k; // [rsp+20h] [rbp-30h] BYREF

  std::allocator<char>::allocator(&__a);
  std::string::basic_string<std::allocator<char>>(&__k, "ADD_AVATAR_ABILITY", &__a);
  v1 = std::unordered_map<std::string,std::function<int ()(GmContext &,std::vector<std::string> const&,std::string&)>>::operator[](
         &GmUtils::op_func_map[abi:cxx11],
         &__k);
  std::function<int ()(GmContext &,std::vector<std::string> const&,std::string&)>::operator=<int (&)(GmContext &,std::vector<std::string> const&,std::string&)>(
    v1,
    (int (*)(GmContext *, const std::vector<std::string> *, std::string *))procAddAvatarAbility);
  std::string::~string(&__k);
  std::allocator<char>::~allocator(&__a);
};

// Line 16016: range 0000000017C3D81B-0000000017C3DC30
int32_t __cdecl procAddAvatarAbility(
        GmContext *context,
        const std::vector<std::string> *param_vec,
        std::string *ret_msg)
{
  unsigned __int64 v3; // r13
  __int64 v4; // rax
  _DWORD *v5; // r12
  int32_t v7; // r14d
  std::vector<std::string>::size_type v8; // rax
  std::vector<std::string>::const_reference v9; // rax
  const std::string *v10; // rax
  std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v11; // rax
  AbilityComp *AbilityComp; // rax
  int32_t result; // eax
  std::shared_ptr<Avatar> __r; // [rsp+20h] [rbp-E0h] BYREF
  char v16[208]; // [rsp+30h] [rbp-D0h] BYREF

  v3 = (unsigned __int64)v16;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_2(160LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "3 48 4 15 entity_id:16027 64 16 16 avatar_ptr:16024 96 32 18 ability_name:16023";
  *(_QWORD *)(v3 + 16) = procAddAvatarAbility;
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = -234556943;
  v5[536862722] = -219021312;
  v5[536862724] = -202116109;
  if ( !std::vector<std::string>::size(param_vec) || !std::vector<std::string>::size(&context->raw_param_vec) )
  {
    std::string::operator=(ret_msg, off_2636FAE0);
    common::milog::MiLogStream::create(
      (common::milog::MiLogStream *)(v3 + 96),
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/player/gm/player_gm_comp.cpp",
      "procAddAvatarAbility",
      16020);
    common::milog::MiLogStream::operator<<<char [17],(char *[17])0>(
      (common::milog::MiLogStream *const)(v3 + 96),
      (const char (*)[17])off_2636FAE0);
    common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v3 + 96));
    v7 = -1;
    goto LABEL_23;
  }
  v8 = std::vector<std::string>::size(&context->raw_param_vec);
  v9 = std::vector<std::string>::operator[](&context->raw_param_vec, v8 - 1);
  std::string::basic_string(v3 + 96, v9);
  if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
    __asan_report_load8();
  Player::getAvatarComp(context->player);
  PlayerAvatarComp::getCurAvatar((const PlayerAvatarComp *const)(v3 + 64));
  if ( std::vector<std::string>::size(param_vec) <= 1 )
    goto LABEL_19;
  *(_DWORD *)(v3 + 48) = 0;
  v10 = std::vector<std::string>::operator[](param_vec, 0LL);
  if ( !common::tools::StringUtils::strToNum<unsigned int>(v10, (unsigned int *)(v3 + 48), 1) )
  {
    if ( *(_DWORD *)(v3 + 48) )
    {
      if ( *(_BYTE *)(((unsigned __int64)&context->scene >> 3) + 0x7FFF8000) )
        __asan_report_load8();
      Scene::findEntity<Avatar>((const Scene *const)&__r, (uint32_t)context->scene);
      std::shared_ptr<Avatar>::operator=((std::shared_ptr<Avatar> *const)(v3 + 64), &__r);
      std::shared_ptr<Avatar>::~shared_ptr(&__r);
    }
LABEL_19:
    if ( std::operator==<Avatar>(0LL, (const std::shared_ptr<Avatar> *)(v3 + 64)) )
    {
      std::string::operator=(ret_msg, "avatar_ptr is not found");
      v7 = -1;
    }
    else
    {
      v11 = std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 64));
      AbilityComp = Creature::getAbilityComp(v11);
      AbilityComp::addTargetAbilityByGm(AbilityComp, (const std::string *)(v3 + 96));
      v7 = 0;
    }
    goto LABEL_22;
  }
  std::string::operator=(ret_msg, "param is invalid");
  v7 = -1;
LABEL_22:
  std::shared_ptr<Avatar>::~shared_ptr((std::shared_ptr<Avatar> *const)(v3 + 64));
  std::string::~string((void *)(v3 + 96));
LABEL_23:
  result = v7;
  if ( v16 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8008) = 0;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8010) = 0;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8010) = -168430091;
  }
  return result;
};

// Line 16047: range 0000000017D7C490-0000000017D7C532
void __cdecl procRemoveAvatarAbilityRegister::procRemoveAvatarAbilityRegister(
        procRemoveAvatarAbilityRegister *const this)
{
  std::function<int(GmContext&,const std::vector<std::string>&,std::string&)> *v1; // rax
  std::allocator<char> __a; // [rsp+1Fh] [rbp-31h] BYREF
  std::string __k; // [rsp+20h] [rbp-30h] BYREF

  std::allocator<char>::allocator(&__a);
  std::string::basic_string<std::allocator<char>>(&__k, "REMOVE_AVATAR_ABILITY", &__a);
  v1 = std::unordered_map<std::string,std::function<int ()(GmContext &,std::vector<std::string> const&,std::string&)>>::operator[](
         &GmUtils::op_func_map[abi:cxx11],
         &__k);
  std::function<int ()(GmContext &,std::vector<std::string> const&,std::string&)>::operator=<int (&)(GmContext &,std::vector<std::string> const&,std::string&)>(
    v1,
    (int (*)(GmContext *, const std::vector<std::string> *, std::string *))procRemoveAvatarAbility);
  std::string::~string(&__k);
  std::allocator<char>::~allocator(&__a);
};

// Line 16048: range 0000000017C3DC31-0000000017C3E046
int32_t __cdecl procRemoveAvatarAbility(
        GmContext *context,
        const std::vector<std::string> *param_vec,
        std::string *ret_msg)
{
  unsigned __int64 v3; // r13
  __int64 v4; // rax
  _DWORD *v5; // r12
  int32_t v7; // r14d
  std::vector<std::string>::size_type v8; // rax
  std::vector<std::string>::const_reference v9; // rax
  const std::string *v10; // rax
  std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v11; // rax
  AbilityComp *AbilityComp; // rax
  int32_t result; // eax
  std::shared_ptr<Avatar> __r; // [rsp+20h] [rbp-E0h] BYREF
  char v16[208]; // [rsp+30h] [rbp-D0h] BYREF

  v3 = (unsigned __int64)v16;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_2(160LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "3 48 4 15 entity_id:16059 64 16 16 avatar_ptr:16056 96 32 18 ability_name:16055";
  *(_QWORD *)(v3 + 16) = procRemoveAvatarAbility;
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = -234556943;
  v5[536862722] = -219021312;
  v5[536862724] = -202116109;
  if ( !std::vector<std::string>::size(param_vec) || !std::vector<std::string>::size(&context->raw_param_vec) )
  {
    std::string::operator=(ret_msg, off_2636FAE0);
    common::milog::MiLogStream::create(
      (common::milog::MiLogStream *)(v3 + 96),
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/player/gm/player_gm_comp.cpp",
      "procRemoveAvatarAbility",
      16052);
    common::milog::MiLogStream::operator<<<char [17],(char *[17])0>(
      (common::milog::MiLogStream *const)(v3 + 96),
      (const char (*)[17])off_2636FAE0);
    common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v3 + 96));
    v7 = -1;
    goto LABEL_23;
  }
  v8 = std::vector<std::string>::size(&context->raw_param_vec);
  v9 = std::vector<std::string>::operator[](&context->raw_param_vec, v8 - 1);
  std::string::basic_string(v3 + 96, v9);
  if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
    __asan_report_load8();
  Player::getAvatarComp(context->player);
  PlayerAvatarComp::getCurAvatar((const PlayerAvatarComp *const)(v3 + 64));
  if ( std::vector<std::string>::size(param_vec) <= 1 )
    goto LABEL_19;
  *(_DWORD *)(v3 + 48) = 0;
  v10 = std::vector<std::string>::operator[](param_vec, 0LL);
  if ( !common::tools::StringUtils::strToNum<unsigned int>(v10, (unsigned int *)(v3 + 48), 1) )
  {
    if ( *(_DWORD *)(v3 + 48) )
    {
      if ( *(_BYTE *)(((unsigned __int64)&context->scene >> 3) + 0x7FFF8000) )
        __asan_report_load8();
      Scene::findEntity<Avatar>((const Scene *const)&__r, (uint32_t)context->scene);
      std::shared_ptr<Avatar>::operator=((std::shared_ptr<Avatar> *const)(v3 + 64), &__r);
      std::shared_ptr<Avatar>::~shared_ptr(&__r);
    }
LABEL_19:
    if ( std::operator==<Avatar>(0LL, (const std::shared_ptr<Avatar> *)(v3 + 64)) )
    {
      std::string::operator=(ret_msg, "avatar_ptr is not found");
      v7 = -1;
    }
    else
    {
      v11 = std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 64));
      AbilityComp = Creature::getAbilityComp(v11);
      AbilityComp::removeTargetAbilityByGm(AbilityComp, (const std::string *)(v3 + 96));
      v7 = 0;
    }
    goto LABEL_22;
  }
  std::string::operator=(ret_msg, "param is invalid");
  v7 = -1;
LABEL_22:
  std::shared_ptr<Avatar>::~shared_ptr((std::shared_ptr<Avatar> *const)(v3 + 64));
  std::string::~string((void *)(v3 + 96));
LABEL_23:
  result = v7;
  if ( v16 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8008) = 0;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8010) = 0;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8010) = -168430091;
  }
  return result;
};

// Line 16079: range 0000000017D7C534-0000000017D7C5D6
void __cdecl procAddModifierRegister::procAddModifierRegister(procAddModifierRegister *const this)
{
  std::function<int(GmContext&,const std::vector<std::string>&,std::string&)> *v1; // rax
  std::allocator<char> __a; // [rsp+1Fh] [rbp-31h] BYREF
  std::string __k; // [rsp+20h] [rbp-30h] BYREF

  std::allocator<char>::allocator(&__a);
  std::string::basic_string<std::allocator<char>>(&__k, "ADD_MODIFIER", &__a);
  v1 = std::unordered_map<std::string,std::function<int ()(GmContext &,std::vector<std::string> const&,std::string&)>>::operator[](
         &GmUtils::op_func_map[abi:cxx11],
         &__k);
  std::function<int ()(GmContext &,std::vector<std::string> const&,std::string&)>::operator=<int (&)(GmContext &,std::vector<std::string> const&,std::string&)>(
    v1,
    (int (*)(GmContext *, const std::vector<std::string> *, std::string *))procAddModifier);
  std::string::~string(&__k);
  std::allocator<char>::~allocator(&__a);
};

// Line 16080: range 0000000017C3E047-0000000017C3E05D
int32_t __cdecl procAddModifier(GmContext *context, const std::vector<std::string> *param_vec, std::string *ret_msg)
{
  return 0;
};

// Line 16085: range 0000000017D7C5D8-0000000017D7C67A
void __cdecl procCombatStatLogDoHurtRegister::procCombatStatLogDoHurtRegister(
        procCombatStatLogDoHurtRegister *const this)
{
  std::function<int(GmContext&,const std::vector<std::string>&,std::string&)> *v1; // rax
  std::allocator<char> __a; // [rsp+1Fh] [rbp-31h] BYREF
  std::string __k; // [rsp+20h] [rbp-30h] BYREF

  std::allocator<char>::allocator(&__a);
  std::string::basic_string<std::allocator<char>>(&__k, "COMBAT_STAT_LOG_DO_HURT", &__a);
  v1 = std::unordered_map<std::string,std::function<int ()(GmContext &,std::vector<std::string> const&,std::string&)>>::operator[](
         &GmUtils::op_func_map[abi:cxx11],
         &__k);
  std::function<int ()(GmContext &,std::vector<std::string> const&,std::string&)>::operator=<int (&)(GmContext &,std::vector<std::string> const&,std::string&)>(
    v1,
    (int (*)(GmContext *, const std::vector<std::string> *, std::string *))procCombatStatLogDoHurt);
  std::string::~string(&__k);
  std::allocator<char>::~allocator(&__a);
};

// Line 16086: range 0000000017C3E05E-0000000017C3E6CE
int32_t __cdecl procCombatStatLogDoHurt(
        GmContext *context,
        const std::vector<std::string> *param_vec,
        std::string *ret_msg)
{
  unsigned __int64 v3; // r13
  __int64 v4; // rax
  _DWORD *v5; // r12
  int32_t v6; // r14d
  float v8; // xmm0_4
  float v9; // xmm0_4
  __int64 v10; // rdx
  float v11; // xmm0_4
  __int64 v12; // rdx
  Creature *v13; // rax
  Creature *v14; // rax
  char v15; // al
  int v16; // ecx
  char v17; // dl
  __int64 v18; // rsi
  __int64 v19; // rdx
  __int64 v20; // rsi
  __m128i v21; // xmm0
  Creature *v22; // rax
  int32_t result; // eax
  std::__shared_ptr_access<HurtContext,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *attack_result; // [rsp+28h] [rbp-178h]
  std::shared_ptr<ActorAbility> __r; // [rsp+30h] [rbp-170h] BYREF
  std::shared_ptr<ActorModifier> v26; // [rsp+40h] [rbp-160h] BYREF
  char v27[336]; // [rsp+50h] [rbp-150h] BYREF

  v3 = (unsigned __int64)v27;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_3(288LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "6 32 4 24 attacker_entity_id:16087 48 4 22 target_entity_id:16087 64 16 18 attacker_ptr:16089 96"
                        " 16 16 target_ptr:16090 128 16 22 hurt_context_ptr:16092 160 96 23 change_hp_context:16103";
  *(_QWORD *)(v3 + 16) = procCombatStatLogDoHurt;
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = -234556924;
  v5[536862722] = -219021312;
  v5[536862723] = -219021312;
  v5[536862724] = -219021312;
  v5[536862728] = -202116109;
  *(_DWORD *)(v3 + 32) = 0;
  *(_DWORD *)(v3 + 48) = 0;
  if ( common::tools::StringUtils::strVecToNum<0u,unsigned int,unsigned int &>(
         param_vec,
         (unsigned int *)(v3 + 32),
         (unsigned int *)(v3 + 48),
         (unsigned int *)(v3 + 32)) )
  {
    v6 = -1;
  }
  else
  {
    if ( *(_BYTE *)(((unsigned __int64)&context->scene >> 3) + 0x7FFF8000) )
      __asan_report_load8();
    Scene::findEntity<Creature>((const Scene *const)(v3 + 64), (uint32_t)context->scene);
    Scene::findEntity<Creature>((const Scene *const)(v3 + 96), (uint32_t)context->scene);
    if ( std::operator==<Creature>(0LL, (const std::shared_ptr<Creature> *)(v3 + 64))
      || std::operator==<Creature>(0LL, (const std::shared_ptr<Creature> *)(v3 + 96)) )
    {
      v6 = -2;
    }
    else
    {
      std::__shared_ptr_access<Creature,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Creature,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 96));
      Creature::getOrCreateHurtContextByGm((Creature *const)(v3 + 128));
      if ( std::operator==<HurtContext>(0LL, (const std::shared_ptr<HurtContext> *)(v3 + 128)) )
      {
        v6 = -1;
      }
      else
      {
        attack_result = std::__shared_ptr_access<HurtContext,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<HurtContext,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 128));
        v8 = (float)common::tools::RandomUtils::rand<int>(0, 100);
        if ( *(_BYTE *)(((unsigned __int64)&attack_result->attack_result.ori_server_damage >> 3) + 0x7FFF8000) != 0
          && *(_BYTE *)(((unsigned __int64)&attack_result->attack_result.ori_server_damage >> 3) + 0x7FFF8000) <= 3 )
        {
          __asan_report_store4(
            &attack_result->attack_result.ori_server_damage,
            100LL,
            &attack_result->attack_result.ori_server_damage);
        }
        attack_result->attack_result.ori_server_damage = v8;
        v9 = (float)common::tools::RandomUtils::rand<int>(0, 100);
        v10 = (*(_BYTE *)(((unsigned __int64)&attack_result->attack_result.block_shield_hurt >> 3) + 0x7FFF8000) != 0) & (unsigned __int8)((char)((((_BYTE)attack_result + 12) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&attack_result->attack_result.block_shield_hurt >> 3) + 0x7FFF8000));
        if ( (_BYTE)v10 )
          __asan_report_store4(
            &attack_result->attack_result.block_shield_hurt,
            (((_BYTE)attack_result + 12) & 7u) + 3,
            v10);
        attack_result->attack_result.block_shield_hurt = v9;
        v11 = (float)common::tools::RandomUtils::rand<int>(0, 100);
        v12 = (*(_BYTE *)(((unsigned __int64)&attack_result->attack_result.server_damage >> 3) + 0x7FFF8000) != 0) & (unsigned __int8)((char)((((_BYTE)attack_result + 4) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&attack_result->attack_result.server_damage >> 3) + 0x7FFF8000));
        if ( (_BYTE)v12 )
          __asan_report_store4(&attack_result->attack_result.server_damage, (((_BYTE)attack_result + 4) & 7u) + 3, v12);
        attack_result->attack_result.server_damage = v11;
        v13 = std::__shared_ptr_access<Creature,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Creature,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 64));
        Creature::getAbilityComp(v13);
        AbilityComp::findRandomAbilityByGm((const AbilityComp *const)&__r);
        std::shared_ptr<ActorAbility>::operator=(&attack_result->attack_result.ability_ptr, &__r);
        std::shared_ptr<ActorAbility>::~shared_ptr(&__r);
        v14 = std::__shared_ptr_access<Creature,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Creature,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 64));
        Creature::getAbilityComp(v14);
        AbilityComp::findRandomModifierByGm((const AbilityComp *const)&v26);
        std::shared_ptr<ActorModifier>::operator=(&attack_result->attack_result.modifier_ptr, &v26);
        std::shared_ptr<ActorModifier>::~shared_ptr(&v26);
        v15 = common::tools::RandomUtils::rand<int>(0, 5);
        std::string::operator=(&attack_result->attack_result.attack_tag, (unsigned int)(char)(v15 + 97));
        v18 = 7LL;
        v16 = common::tools::RandomUtils::rand<int>(0, 7);
        v17 = *(_BYTE *)(((unsigned __int64)&attack_result->attack_result.element_type >> 3) + 0x7FFF8000);
        LOBYTE(v18) = v17 != 0;
        v19 = (v17 != 0) & (unsigned __int8)((char)((((_BYTE)attack_result + 28) & 7) + 3) >= v17);
        if ( (_BYTE)v19 )
          __asan_report_store4(&attack_result->attack_result.element_type, v18, v19);
        attack_result->attack_result.element_type = v16;
        v20 = (unsigned int)common::tools::RandomUtils::rand<int>(1, 20);
        if ( *(_BYTE *)(((unsigned __int64)&attack_result->attack_result.hashed_anim_event_id >> 3) + 0x7FFF8000) != 0
          && *(_BYTE *)(((unsigned __int64)&attack_result->attack_result.hashed_anim_event_id >> 3) + 0x7FFF8000) <= 3 )
        {
          __asan_report_store4(
            &attack_result->attack_result.hashed_anim_event_id,
            v20,
            &attack_result->attack_result.hashed_anim_event_id);
        }
        attack_result->attack_result.hashed_anim_event_id = v20;
        ChangeHpContext::ChangeHpContext((ChangeHpContext *const)(v3 + 160));
        std::shared_ptr<Creature>::operator=(
          (std::shared_ptr<Creature> *const)(v3 + 168),
          (const std::shared_ptr<Creature> *)(v3 + 64));
        v21 = (__m128i)0xC2C80000;
        *(float *)v21.m128i_i32 = common::tools::RandomUtils::rand<float>(-100.0, 0.0);
        *(_DWORD *)(v3 + 248) = _mm_cvtsi128_si32(v21);
        std::string::operator=(v3 + 184, &attack_result->attack_result.attack_tag);
        v22 = std::__shared_ptr_access<Creature,(__gnu_cxx::_Lock_policy)2,false,false>::operator*((const std::__shared_ptr_access<Creature,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 96));
        StatLogReporter::onCreatureDoHurt(v22, (const ChangeHpContext *)(v3 + 160));
        v6 = 0;
        ChangeHpContext::~ChangeHpContext((ChangeHpContext *const)(v3 + 160));
      }
      std::shared_ptr<HurtContext>::~shared_ptr((std::shared_ptr<HurtContext> *const)(v3 + 128));
    }
    std::shared_ptr<Creature>::~shared_ptr((std::shared_ptr<Creature> *const)(v3 + 96));
    std::shared_ptr<Creature>::~shared_ptr((std::shared_ptr<Creature> *const)(v3 + 64));
  }
  result = v6;
  if ( v27 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8010) = 0;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8020) = 0;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8020) = -168430091;
  }
  return result;
};

// Line 16111: range 0000000017D7C67C-0000000017D7C71E
void __cdecl procCombatStatLogDoHealRegister::procCombatStatLogDoHealRegister(
        procCombatStatLogDoHealRegister *const this)
{
  std::function<int(GmContext&,const std::vector<std::string>&,std::string&)> *v1; // rax
  std::allocator<char> __a; // [rsp+1Fh] [rbp-31h] BYREF
  std::string __k; // [rsp+20h] [rbp-30h] BYREF

  std::allocator<char>::allocator(&__a);
  std::string::basic_string<std::allocator<char>>(&__k, "COMBAT_STAT_LOG_DO_HEAL", &__a);
  v1 = std::unordered_map<std::string,std::function<int ()(GmContext &,std::vector<std::string> const&,std::string&)>>::operator[](
         &GmUtils::op_func_map[abi:cxx11],
         &__k);
  std::function<int ()(GmContext &,std::vector<std::string> const&,std::string&)>::operator=<int (&)(GmContext &,std::vector<std::string> const&,std::string&)>(
    v1,
    (int (*)(GmContext *, const std::vector<std::string> *, std::string *))procCombatStatLogDoHeal);
  std::string::~string(&__k);
  std::allocator<char>::~allocator(&__a);
};

// Line 16112: range 0000000017C3E6CF-0000000017C3EA8E
int32_t __cdecl procCombatStatLogDoHeal(
        GmContext *context,
        const std::vector<std::string> *param_vec,
        std::string *ret_msg)
{
  unsigned __int64 v3; // r13
  __int64 v4; // rax
  _DWORD *v5; // r12
  int32_t v6; // r14d
  Creature *v7; // rax
  Creature *v8; // rax
  __m128i v9; // xmm0
  Creature *v10; // rax
  int32_t result; // eax
  float hp_amount; // [rsp+2Ch] [rbp-1B4h]
  std::shared_ptr<ActorAbility> __r; // [rsp+30h] [rbp-1B0h] BYREF
  std::shared_ptr<ActorModifier> v14; // [rsp+40h] [rbp-1A0h] BYREF
  char v15[400]; // [rsp+50h] [rbp-190h] BYREF

  v3 = (unsigned __int64)v15;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_3(352LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "4 48 4 22 target_entity_id:16113 64 16 18 creature_ptr:16115 96 88 18 action_param:16117 224 96 "
                        "23 change_hp_context:16120";
  *(_QWORD *)(v3 + 16) = procCombatStatLogDoHeal;
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = -234556943;
  v5[536862722] = -219021312;
  v5[536862725] = -234881024;
  v5[536862726] = -218959118;
  v5[536862730] = -202116109;
  *(_DWORD *)(v3 + 48) = 0;
  if ( common::tools::StringUtils::strVecToNum<0u,unsigned int>(param_vec, (unsigned int *)(v3 + 48)) )
  {
    v6 = -1;
  }
  else
  {
    if ( *(_BYTE *)(((unsigned __int64)&context->scene >> 3) + 0x7FFF8000) )
      __asan_report_load8();
    Scene::findEntity<Creature>((const Scene *const)(v3 + 64), (uint32_t)context->scene);
    if ( std::operator==<Creature>(0LL, (const std::shared_ptr<Creature> *)(v3 + 64)) )
    {
      v6 = -2;
    }
    else
    {
      memset((void *)(v3 + 96), 0, 0x58uLL);
      v7 = std::__shared_ptr_access<Creature,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Creature,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 64));
      Creature::getAbilityComp(v7);
      AbilityComp::findRandomAbilityByGm((const AbilityComp *const)&__r);
      std::shared_ptr<ActorAbility>::operator=((std::shared_ptr<ActorAbility> *const)(v3 + 96), &__r);
      std::shared_ptr<ActorAbility>::~shared_ptr(&__r);
      v8 = std::__shared_ptr_access<Creature,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Creature,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 64));
      Creature::getAbilityComp(v8);
      AbilityComp::findRandomModifierByGm((const AbilityComp *const)&v14);
      std::shared_ptr<ActorModifier>::operator=((std::shared_ptr<ActorModifier> *const)(v3 + 112), &v14);
      std::shared_ptr<ActorModifier>::~shared_ptr(&v14);
      ChangeHpContext::ChangeHpContext((ChangeHpContext *const)(v3 + 224));
      v9 = (__m128i)0xC2C80000;
      *(float *)v9.m128i_i32 = common::tools::RandomUtils::rand<float>(-100.0, 100.0);
      *(_DWORD *)(v3 + 312) = _mm_cvtsi128_si32(v9);
      hp_amount = (float)common::tools::RandomUtils::rand<int>(0, 100);
      v10 = std::__shared_ptr_access<Creature,(__gnu_cxx::_Lock_policy)2,false,false>::operator*((const std::__shared_ptr_access<Creature,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 64));
      StatLogReporter::onCreatureBeHealed(
        v10,
        (const ActionParam *)(v3 + 96),
        (const ChangeHpContext *)(v3 + 224),
        hp_amount);
      v6 = 0;
      ChangeHpContext::~ChangeHpContext((ChangeHpContext *const)(v3 + 224));
      ActionParam::~ActionParam((ActionParam *const)(v3 + 96));
    }
    std::shared_ptr<Creature>::~shared_ptr((std::shared_ptr<Creature> *const)(v3 + 64));
  }
  result = v6;
  if ( v15 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8008) = 0;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8014) = 0LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8028) = 0;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8020) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8028) = -168430091;
  }
  return result;
};

// Line 16127: range 0000000017D7C720-0000000017D7C7C2
void __cdecl procCombatStatLogEndRegister::procCombatStatLogEndRegister(procCombatStatLogEndRegister *const this)
{
  std::function<int(GmContext&,const std::vector<std::string>&,std::string&)> *v1; // rax
  std::allocator<char> __a; // [rsp+1Fh] [rbp-31h] BYREF
  std::string __k; // [rsp+20h] [rbp-30h] BYREF

  std::allocator<char>::allocator(&__a);
  std::string::basic_string<std::allocator<char>>(&__k, "COMBAT_STAT_LOG_END", &__a);
  v1 = std::unordered_map<std::string,std::function<int ()(GmContext &,std::vector<std::string> const&,std::string&)>>::operator[](
         &GmUtils::op_func_map[abi:cxx11],
         &__k);
  std::function<int ()(GmContext &,std::vector<std::string> const&,std::string&)>::operator=<int (&)(GmContext &,std::vector<std::string> const&,std::string&)>(
    v1,
    (int (*)(GmContext *, const std::vector<std::string> *, std::string *))procCombatStatLogEnd);
  std::string::~string(&__k);
  std::allocator<char>::~allocator(&__a);
};

// Line 16128: range 0000000017C3EA8F-0000000017C3EB6D
int32_t __cdecl procCombatStatLogEnd(
        GmContext *context,
        const std::vector<std::string> *param_vec,
        std::string *ret_msg)
{
  PlayerBasicComp *BasicComp; // rax
  StatLogReporter *StatLogReporter; // rbx
  std::allocator<char> __a; // [rsp+2Fh] [rbp-31h] BYREF
  std::string p_transaction; // [rsp+30h] [rbp-30h] BYREF

  if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
    __asan_report_load8();
  BasicComp = Player::getBasicComp(context->player);
  StatLogReporter = PlayerBasicComp::getStatLogReporter(BasicComp);
  std::allocator<char>::allocator(&__a);
  std::string::basic_string<std::allocator<char>>(&p_transaction, byte_262D4440, &__a);
  StatLogReporter::setTransStateByGm(StatLogReporter, TRANS_NONE, &p_transaction);
  std::string::~string(&p_transaction);
  std::allocator<char>::~allocator(&__a);
  return 0;
};

// Line 16133: range 0000000017D7C7C4-0000000017D7C866
void __cdecl procVehicleRegister::procVehicleRegister(procVehicleRegister *const this)
{
  std::function<int(GmContext&,const std::vector<std::string>&,std::string&)> *v1; // rax
  std::allocator<char> __a; // [rsp+1Fh] [rbp-31h] BYREF
  std::string __k; // [rsp+20h] [rbp-30h] BYREF

  std::allocator<char>::allocator(&__a);
  std::string::basic_string<std::allocator<char>>(&__k, "VEHICLE", &__a);
  v1 = std::unordered_map<std::string,std::function<int ()(GmContext &,std::vector<std::string> const&,std::string&)>>::operator[](
         &GmUtils::op_func_map[abi:cxx11],
         &__k);
  std::function<int ()(GmContext &,std::vector<std::string> const&,std::string&)>::operator=<int (&)(GmContext &,std::vector<std::string> const&,std::string&)>(
    v1,
    (int (*)(GmContext *, const std::vector<std::string> *, std::string *))procVehicle);
  std::string::~string(&__k);
  std::allocator<char>::~allocator(&__a);
};

// Line 16134: range 0000000017C3EB6E-0000000017C3F659
int32_t __cdecl procVehicle(GmContext *context, const std::vector<std::string> *param_vec, std::string *ret_msg)
{
  int32_t v3; // r14d
  unsigned __int64 v4; // r13
  __int64 v5; // rax
  _DWORD *v6; // r12
  common::milog::MiLogStream *v7; // rax
  const std::string *v8; // rax
  _BOOL4 v9; // r15d
  int v10; // r15d
  GadgetVehicleComp *v11; // r15
  const std::string *v12; // rax
  std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v13; // rax
  unsigned __int64 Position; // rax
  unsigned __int64 Rotation; // rax
  Scene *scene; // r15
  common::milog::MiLogStream *v17; // rax
  common::milog::MiLogStream *v18; // rax
  common::milog::MiLogStream *v19; // rcx
  _BOOL4 v20; // r15d
  std::__shared_ptr_access<Gadget,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v21; // rax
  common::milog::MiLogStream *v22; // rax
  common::milog::MiLogStream *v23; // rcx
  int v24; // r15d
  GadgetVehicleComp *v25; // r15
  std::__shared_ptr_access<Gadget,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v26; // rax
  common::milog::MiLogStream *v27; // rax
  common::milog::MiLogStream *v28; // rcx
  int32_t result; // eax
  int ret; // [rsp+2Ch] [rbp-124h]
  PlayerPtr p_player_ptr; // [rsp+30h] [rbp-120h] BYREF
  common::milog::MiLogStream v33; // [rsp+40h] [rbp-110h] BYREF
  char v34[240]; // [rsp+60h] [rbp-F0h] BYREF

  v4 = (unsigned __int64)v34;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v5 = __asan_stack_malloc_2(192LL);
    if ( v5 )
      v4 = v5;
  }
  *(_QWORD *)v4 = 1102416563LL;
  *(_QWORD *)(v4 + 8) = "5 48 4 20 boat_gadget_id:16158 64 12 9 pos:16159 96 12 9 rot:16160 128 16 21 boat_gadget_ptr:161"
                        "61 160 16 22 vehicle_comp_ptr:16169";
  *(_QWORD *)(v4 + 16) = procVehicle;
  v6 = (_DWORD *)(v4 >> 3);
  v6[536862720] = -235802127;
  v6[536862721] = -234556943;
  v6[536862722] = -219020288;
  v6[536862723] = -219020288;
  v6[536862724] = -219021312;
  v6[536862725] = -202178560;
  if ( std::vector<std::string>::empty(param_vec) )
  {
    common::milog::MiLogStream::create(
      &v33,
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/player/gm/player_gm_comp.cpp",
      "procVehicle",
      16137);
    v7 = common::milog::MiLogStream::operator<<<char [15],(char *[15])0>(&v33, (const char (*)[15])"invalid param:");
    common::milog::MiLogStream::operator<<<std::string>(v7, param_vec);
    common::milog::MiLogStream::~MiLogStream(&v33);
    v3 = -1;
    goto LABEL_50;
  }
  v8 = std::vector<std::string>::operator[](param_vec, 0LL);
  if ( std::operator==<char>(v8, "EXIT") )
  {
    if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
      __asan_report_load8();
    Player::getVehicleComp(context->player);
    PlayerVehicleComp::getCurVehicle((const PlayerVehicleComp *const)(v4 + 128));
    if ( std::operator==<Gadget>(0LL, (const std::shared_ptr<Gadget> *)(v4 + 128)) )
    {
      std::string::operator=(ret_msg, " player not on vehicle.");
      v3 = 0;
      v9 = 0;
    }
    else
    {
      std::__shared_ptr_access<Gadget,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Gadget,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 128));
      EcsBase<Gadget,GadgetCompBase,28u>::findComp<GadgetVehicleComp>((const EcsBase<Gadget,GadgetCompBase,28> *const)(v4 + 160));
      if ( std::operator==<GadgetVehicleComp>(0LL, (const std::shared_ptr<GadgetVehicleComp> *)(v4 + 160)) )
      {
        std::string::operator=(ret_msg, " player not on vehicle. comp not found");
        v3 = 0;
        v10 = 0;
      }
      else
      {
        v11 = std::__shared_ptr_access<GadgetVehicleComp,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<GadgetVehicleComp,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 160));
        if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
          __asan_report_load8();
        toPtr<Player,Player>((Player *)&p_player_ptr);
        GadgetVehicleComp::exitVehicle(v11, &p_player_ptr);
        std::shared_ptr<Player>::~shared_ptr(&p_player_ptr);
        v10 = 1;
      }
      std::shared_ptr<GadgetVehicleComp>::~shared_ptr((std::shared_ptr<GadgetVehicleComp> *const)(v4 + 160));
      v9 = v10 == 1;
    }
    std::shared_ptr<Gadget>::~shared_ptr((std::shared_ptr<Gadget> *const)(v4 + 128));
    if ( v9 )
LABEL_49:
      v3 = 0;
  }
  else
  {
    v12 = std::vector<std::string>::operator[](param_vec, 0LL);
    if ( !std::operator==<char>(v12, "CREATE_AND_ENTER") )
      goto LABEL_49;
    ServiceBox::findService<GameserverService>();
    GameserverService::getConfig((GameserverService *const)&p_player_ptr);
    v13 = std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false> *const)&p_player_ptr);
    *(_DWORD *)(v4 + 48) = ActivitySummerTimeExcelConfigMgr::getVehicleGadgetId(&v13->design_config.txt_config_mgr.activity_summer_time_config_mgr);
    std::shared_ptr<Config>::~shared_ptr((std::shared_ptr<Config> *const)&p_player_ptr);
    if ( *(_BYTE *)(((unsigned __int64)&context->avatar >> 3) + 0x7FFF8000) )
      __asan_report_load8();
    Position = (unsigned __int64)Entity::getPosition((const Entity *const)context->avatar);
    if ( (char)(Position & 7) >= *(_BYTE *)((Position >> 3) + 0x7FFF8000)
      && *(_BYTE *)((Position >> 3) + 0x7FFF8000) != 0
      || *(_BYTE *)(((Position + 11) >> 3) + 0x7FFF8000) != 0
      && (char)((Position + 11) & 7) >= *(_BYTE *)(((Position + 11) >> 3) + 0x7FFF8000) )
    {
      Position = __asan_report_load_n(Position, 12LL);
    }
    *(_QWORD *)(v4 + 64) = *(_QWORD *)Position;
    *(_DWORD *)(v4 + 72) = *(_DWORD *)(Position + 8);
    if ( *(_BYTE *)(((unsigned __int64)&context->avatar >> 3) + 0x7FFF8000) )
      __asan_report_load8();
    Rotation = (unsigned __int64)Entity::getRotation((const Entity *const)context->avatar);
    if ( (char)(Rotation & 7) >= *(_BYTE *)((Rotation >> 3) + 0x7FFF8000)
      && *(_BYTE *)((Rotation >> 3) + 0x7FFF8000) != 0
      || *(_BYTE *)(((Rotation + 11) >> 3) + 0x7FFF8000) != 0
      && (char)((Rotation + 11) & 7) >= *(_BYTE *)(((Rotation + 11) >> 3) + 0x7FFF8000) )
    {
      Rotation = __asan_report_load_n(Rotation, 12LL);
    }
    *(_QWORD *)(v4 + 96) = *(_QWORD *)Rotation;
    *(_DWORD *)(v4 + 104) = *(_DWORD *)(Rotation + 8);
    if ( *(_BYTE *)(((unsigned __int64)&context->scene >> 3) + 0x7FFF8000) )
      __asan_report_load8();
    scene = context->scene;
    if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
      __asan_report_load8();
    toPtr<Player,Player>((Player *)&p_player_ptr);
    Scene::createPlayerVehicle(
      (Scene *const)(v4 + 128),
      (uint32_t)scene,
      (const Vector3 *)*(unsigned int *)(v4 + 48),
      (const Vector3 *)(v4 + 64),
      (PlayerPtr *)(v4 + 96),
      (proto::CreateGadgetReason)&p_player_ptr,
      0);
    std::shared_ptr<Player>::~shared_ptr(&p_player_ptr);
    if ( std::operator==<Gadget>(0LL, (const std::shared_ptr<Gadget> *)(v4 + 128)) )
    {
      std::string::operator=(ret_msg, " create boat vehicle failed");
      common::milog::MiLogStream::create(
        &v33,
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/player/gm/player_gm_comp.cpp",
        "procVehicle",
        16165);
      v17 = common::milog::MiLogStream::operator<<<char [14],(char *[14])0>(&v33, (const char (*)[14])" create boat:");
      v18 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v17, (const unsigned int *)(v4 + 48));
      v19 = common::milog::MiLogStream::operator<<<char [10],(char *[10])0>(v18, (const char (*)[10])" failed. ");
      if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
        __asan_report_load8();
      operator<<(v19, context->player);
      common::milog::MiLogStream::~MiLogStream(&v33);
      v3 = -1;
      v20 = 0;
    }
    else
    {
      std::__shared_ptr_access<Gadget,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Gadget,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 128));
      EcsBase<Gadget,GadgetCompBase,28u>::findComp<GadgetVehicleComp>((const EcsBase<Gadget,GadgetCompBase,28> *const)(v4 + 160));
      if ( std::operator==<GadgetVehicleComp>(0LL, (const std::shared_ptr<GadgetVehicleComp> *)(v4 + 160)) )
      {
        common::milog::MiLogStream::create(
          &v33,
          &common::milog::MiLogDefault::default_log_obj_,
          3u,
          "./src/player/gm/player_gm_comp.cpp",
          "procVehicle",
          16172);
        v21 = std::__shared_ptr_access<Gadget,(__gnu_cxx::_Lock_policy)2,false,false>::operator*((const std::__shared_ptr_access<Gadget,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 128));
        v22 = common::milog::MiLogStream::operator<<<Gadget,(Gadget*)0>(&v33, v21);
        v23 = common::milog::MiLogStream::operator<<<char [23],(char *[23])0>(
                v22,
                (const char (*)[23])" has not vehicle comp.");
        if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
          __asan_report_load8();
        operator<<(v23, context->player);
        common::milog::MiLogStream::~MiLogStream(&v33);
        std::string::operator=(ret_msg, " vehicle comp not found.");
        v3 = -1;
        v24 = 0;
      }
      else
      {
        v25 = std::__shared_ptr_access<GadgetVehicleComp,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<GadgetVehicleComp,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 160));
        if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
          __asan_report_load8();
        toPtr<Player,Player>((Player *)&p_player_ptr);
        ret = GadgetVehicleComp::enterVehicle(v25, 0, &p_player_ptr);
        std::shared_ptr<Player>::~shared_ptr(&p_player_ptr);
        if ( ret )
        {
          common::milog::MiLogStream::create(
            &v33,
            &common::milog::MiLogDefault::default_log_obj_,
            3u,
            "./src/player/gm/player_gm_comp.cpp",
            "procVehicle",
            16179);
          v26 = std::__shared_ptr_access<Gadget,(__gnu_cxx::_Lock_policy)2,false,false>::operator*((const std::__shared_ptr_access<Gadget,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 128));
          v27 = common::milog::MiLogStream::operator<<<Gadget,(Gadget*)0>(&v33, v26);
          v28 = common::milog::MiLogStream::operator<<<char [15],(char *[15])0>(
                  v27,
                  (const char (*)[15])" enter failed.");
          if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
            __asan_report_load8();
          operator<<(v28, context->player);
          common::milog::MiLogStream::~MiLogStream(&v33);
          std::string::operator=(ret_msg, " enter boat failed.");
          v3 = -1;
          v24 = 0;
        }
        else
        {
          v24 = 1;
        }
      }
      std::shared_ptr<GadgetVehicleComp>::~shared_ptr((std::shared_ptr<GadgetVehicleComp> *const)(v4 + 160));
      v20 = v24 == 1;
    }
    std::shared_ptr<Gadget>::~shared_ptr((std::shared_ptr<Gadget> *const)(v4 + 128));
    if ( v20 )
      goto LABEL_49;
  }
LABEL_50:
  result = v3;
  if ( v34 == (char *)v4 )
  {
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8008) = 0LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8010) = 0LL;
  }
  else
  {
    *(_QWORD *)v4 = 1172321806LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 16187: range 0000000017D7C868-0000000017D7C90A
void __cdecl procHomeFieldRegister::procHomeFieldRegister(procHomeFieldRegister *const this)
{
  std::function<int(GmContext&,const std::vector<std::string>&,std::string&)> *v1; // rax
  std::allocator<char> __a; // [rsp+1Fh] [rbp-31h] BYREF
  std::string __k; // [rsp+20h] [rbp-30h] BYREF

  std::allocator<char>::allocator(&__a);
  std::string::basic_string<std::allocator<char>>(&__k, "HOME_FIELD", &__a);
  v1 = std::unordered_map<std::string,std::function<int ()(GmContext &,std::vector<std::string> const&,std::string&)>>::operator[](
         &GmUtils::op_func_map[abi:cxx11],
         &__k);
  std::function<int ()(GmContext &,std::vector<std::string> const&,std::string&)>::operator=<int (&)(GmContext &,std::vector<std::string> const&,std::string&)>(
    v1,
    (int (*)(GmContext *, const std::vector<std::string> *, std::string *))procHomeField);
  std::string::~string(&__k);
  std::allocator<char>::~allocator(&__a);
};

// Line 16188: range 0000000017C3F65A-0000000017C3FB46
int32_t __cdecl procHomeField(GmContext *context, const std::vector<std::string> *param_vec, std::string *ret_msg)
{
  unsigned __int64 v3; // r12
  __int64 v4; // rax
  _DWORD *v5; // r13
  int32_t v6; // r14d
  const std::string *v7; // rax
  const std::string *v8; // rax
  Home *v9; // rax
  HomePlantComp *PlantComp; // rax
  const std::string *v11; // rax
  unsigned int *v12; // r8
  unsigned int *v13; // r9
  Home *v14; // rax
  HomePlantComp *p_player; // rdi
  uint32_t v16; // r8d
  uint32_t v17; // ecx
  uint32_t v18; // edx
  common::milog::MiLogStream *v19; // rax
  int32_t result; // eax
  common::milog::MiLogStream v23; // [rsp+20h] [rbp-D0h] BYREF
  char v24[176]; // [rsp+40h] [rbp-B0h] BYREF

  v3 = (unsigned __int64)v24;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_1(128LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "5 32 4 10 guid:16222 48 4 21 sub_field_index:16223 64 4 16 bundle_idx:16224 80 4 9 ret:16230 96 "
                        "16 14 home_ptr:16194";
  *(_QWORD *)(v3 + 16) = procHomeField;
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = -234556924;
  v5[536862722] = -234556924;
  v5[536862723] = -202178560;
  if ( !std::vector<std::string>::size(param_vec) )
  {
    std::string::operator=(ret_msg, "param not enough");
    v6 = -1;
    goto LABEL_27;
  }
  if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
    __asan_report_load8();
  Player::getHomeComp(context->player);
  PlayerHomeComp::findMyHome((const PlayerHomeComp *const)(v3 + 96));
  if ( !std::operator==<Home>((const std::shared_ptr<Home> *)(v3 + 96), 0LL) )
  {
    v7 = std::vector<std::string>::operator[](param_vec, 0LL);
    if ( std::operator==<char>(v7, "TIME") )
    {
      if ( std::vector<std::string>::size(param_vec) <= 1 )
      {
LABEL_12:
        std::string::operator=(ret_msg, "param not enough");
        v6 = -1;
        goto LABEL_26;
      }
      *(_DWORD *)(v3 + 80) = 0;
      v8 = std::vector<std::string>::operator[](param_vec, 1uLL);
      if ( !common::tools::StringUtils::strToNum<unsigned int>(v8, (unsigned int *)(v3 + 80), 1) )
      {
        v9 = std::__shared_ptr_access<Home,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Home,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 96));
        PlantComp = Home::getPlantComp(v9);
        HomePlantComp::onGMJumpTime(PlantComp, *(_DWORD *)(v3 + 80));
        v6 = 0;
        goto LABEL_26;
      }
    }
    else
    {
      v11 = std::vector<std::string>::operator[](param_vec, 0LL);
      if ( !std::operator==<char>(v11, "GATHER") )
      {
        v6 = -1;
        goto LABEL_26;
      }
      if ( std::vector<std::string>::size(param_vec) <= 1 )
        goto LABEL_12;
      *(_DWORD *)(v3 + 32) = 0;
      *(_DWORD *)(v3 + 48) = 0;
      *(_DWORD *)(v3 + 64) = 0;
      if ( !common::tools::StringUtils::strVecToNum<1u,unsigned int,unsigned int &,unsigned int &>(
              param_vec,
              (unsigned int *)(v3 + 32),
              (unsigned int *)(v3 + 48),
              (unsigned int *)(v3 + 64),
              v12,
              v13) )
      {
        v14 = std::__shared_ptr_access<Home,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Home,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 96));
        p_player = Home::getPlantComp(v14);
        v16 = *(_DWORD *)(v3 + 64);
        v17 = *(_DWORD *)(v3 + 48);
        v18 = *(_DWORD *)(v3 + 32);
        if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
        {
          p_player = (HomePlantComp *)&context->player;
          __asan_report_load8();
        }
        *(_DWORD *)(v3 + 80) = HomePlantComp::gather(p_player, context->player, v18, v17, v16);
        if ( *(_DWORD *)(v3 + 80) )
        {
          common::milog::MiLogStream::create(
            &v23,
            &common::milog::MiLogDefault::default_log_obj_,
            3u,
            "./src/player/gm/player_gm_comp.cpp",
            "procHomeField",
            16233);
          v19 = common::milog::MiLogStream::operator<<<char [34],(char *[34])0>(
                  &v23,
                  (const char (*)[34])"[HOME_PLANT]gm gather fail. ret: ");
          common::milog::MiLogStream::operator<<<int,(int *)0>(v19, (const int *)(v3 + 80));
          common::milog::MiLogStream::~MiLogStream(&v23);
        }
        v6 = *(_DWORD *)(v3 + 80);
        goto LABEL_26;
      }
    }
    std::string::operator=(ret_msg, "strToNum failed");
    v6 = -1;
    goto LABEL_26;
  }
  common::milog::MiLogStream::create(
    &v23,
    &common::milog::MiLogDefault::default_log_obj_,
    3u,
    "./src/player/gm/player_gm_comp.cpp",
    "procHomeField",
    16197);
  common::milog::MiLogStream::operator<<<char [17],(char *[17])0>(&v23, (const char (*)[17])"home_ptr is null");
  common::milog::MiLogStream::~MiLogStream(&v23);
  v6 = -1;
LABEL_26:
  std::shared_ptr<Home>::~shared_ptr((std::shared_ptr<Home> *const)(v3 + 96));
LABEL_27:
  result = v6;
  if ( v24 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 16245: range 0000000017D7C90C-0000000017D7C9AE
void __cdecl procGachaRegister::procGachaRegister(procGachaRegister *const this)
{
  std::function<int(GmContext&,const std::vector<std::string>&,std::string&)> *v1; // rax
  std::allocator<char> __a; // [rsp+1Fh] [rbp-31h] BYREF
  std::string __k; // [rsp+20h] [rbp-30h] BYREF

  std::allocator<char>::allocator(&__a);
  std::string::basic_string<std::allocator<char>>(&__k, "GACHA", &__a);
  v1 = std::unordered_map<std::string,std::function<int ()(GmContext &,std::vector<std::string> const&,std::string&)>>::operator[](
         &GmUtils::op_func_map[abi:cxx11],
         &__k);
  std::function<int ()(GmContext &,std::vector<std::string> const&,std::string&)>::operator=<int (&)(GmContext &,std::vector<std::string> const&,std::string&)>(
    v1,
    (int (*)(GmContext *, const std::vector<std::string> *, std::string *))procGacha);
  std::string::~string(&__k);
  std::allocator<char>::~allocator(&__a);
};

// Line 16246: range 0000000017C3FB47-0000000017C400A0
int32_t __cdecl procGacha(GmContext *context, const std::vector<std::string> *param_vec, std::string *ret_msg)
{
  unsigned __int64 v3; // r12
  __int64 v4; // rax
  _DWORD *v5; // r13
  const std::string *v6; // rax
  const std::string *v7; // rax
  PlayerGachaComp *GachaComp; // rax
  int32_t result; // eax
  const std::string *v10; // rax
  PlayerGachaComp *v11; // rax
  unsigned int DailyGachaTimes; // eax
  const std::string *v13; // rax
  PlayerGachaComp *v14; // rax
  const std::string *v15; // rax
  const std::string *v16; // rax
  PlayerGachaComp *v17; // rax
  unsigned int CurScheduleDailyGachaTimesByGm; // eax
  std::string v20; // [rsp+20h] [rbp-A0h] BYREF
  char v21[128]; // [rsp+40h] [rbp-80h] BYREF

  v3 = (unsigned __int64)v21;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_1(96LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "2 48 4 16 gacha_type:16282 64 4 16 gacha_type:16300";
  *(_QWORD *)(v3 + 16) = procGacha;
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = -234556943;
  v5[536862722] = -202116348;
  if ( !std::vector<std::string>::size(param_vec) )
    goto LABEL_25;
  v6 = std::vector<std::string>::operator[](param_vec, 0LL);
  if ( std::operator==<char>(v6, "SET_DAILY_GACHA_TIMES") )
  {
    if ( std::vector<std::string>::size(param_vec) > 1 )
    {
      *(_DWORD *)(v3 + 64) = 0;
      v7 = std::vector<std::string>::operator[](param_vec, 1uLL);
      if ( common::tools::StringUtils::strToNum<unsigned int>(v7, (unsigned int *)(v3 + 64), 1) )
        goto LABEL_27;
      if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
        __asan_report_load8();
      GachaComp = Player::getGachaComp(context->player);
      result = PlayerGachaComp::setDailyGachaTimesByGm(GachaComp, *(_DWORD *)(v3 + 64));
      goto LABEL_32;
    }
LABEL_25:
    std::string::operator=(ret_msg, "param not enough");
    result = -1;
    goto LABEL_32;
  }
  v10 = std::vector<std::string>::operator[](param_vec, 0LL);
  if ( std::operator==<char>(v10, "GET_DAILY_GACHA_TIMES") )
  {
    if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
      __asan_report_load8();
    v11 = Player::getGachaComp(context->player);
    DailyGachaTimes = PlayerGachaComp::getDailyGachaTimes(v11);
    std::to_string(&v20, DailyGachaTimes);
    std::string::operator=(ret_msg, &v20);
    std::string::~string(&v20);
    result = 0;
    goto LABEL_32;
  }
  v13 = std::vector<std::string>::operator[](param_vec, 0LL);
  if ( std::operator==<char>(v13, "SET_CUR_SCHEDULE_DAILY_GACHA_TIMES") )
  {
    if ( std::vector<std::string>::size(param_vec) > 2 )
    {
      *(_DWORD *)(v3 + 48) = 0;
      *(_DWORD *)(v3 + 64) = 0;
      if ( common::tools::StringUtils::strVecToNum<1u,unsigned int,unsigned int &>(
             param_vec,
             (unsigned int *)(v3 + 48),
             (unsigned int *)(v3 + 64),
             (unsigned int *)(v3 + 48)) )
      {
        goto LABEL_27;
      }
      if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
        __asan_report_load8();
      v14 = Player::getGachaComp(context->player);
      result = PlayerGachaComp::setCurScheduleDailyGachaTimesByGm(v14, *(_DWORD *)(v3 + 48), *(_DWORD *)(v3 + 64));
      goto LABEL_32;
    }
    goto LABEL_25;
  }
  v15 = std::vector<std::string>::operator[](param_vec, 0LL);
  if ( !std::operator==<char>(v15, "GET_CUR_SCHEDULE_DAILY_GACHA_TIMES") )
  {
    std::string::operator=(ret_msg, "invalid gm command");
    result = -1;
    goto LABEL_32;
  }
  if ( std::vector<std::string>::size(param_vec) <= 1 )
    goto LABEL_25;
  *(_DWORD *)(v3 + 64) = 0;
  v16 = std::vector<std::string>::operator[](param_vec, 1uLL);
  if ( common::tools::StringUtils::strToNum<unsigned int>(v16, (unsigned int *)(v3 + 64), 1) )
  {
LABEL_27:
    std::string::operator=(ret_msg, "strToNum fails");
    result = -1;
    goto LABEL_32;
  }
  if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
    __asan_report_load8();
  v17 = Player::getGachaComp(context->player);
  CurScheduleDailyGachaTimesByGm = PlayerGachaComp::getCurScheduleDailyGachaTimesByGm(v17, *(_DWORD *)(v3 + 64));
  std::to_string(&v20, CurScheduleDailyGachaTimesByGm);
  std::string::operator=(ret_msg, &v20);
  std::string::~string(&v20);
  result = 0;
LABEL_32:
  if ( v21 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8008) = 0;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8008) = -168430091;
  }
  return result;
};

// Line 16315: range 0000000017D7C9B0-0000000017D7CA52
void __cdecl procGachaWishRegister::procGachaWishRegister(procGachaWishRegister *const this)
{
  std::function<int(GmContext&,const std::vector<std::string>&,std::string&)> *v1; // rax
  std::allocator<char> __a; // [rsp+1Fh] [rbp-31h] BYREF
  std::string __k; // [rsp+20h] [rbp-30h] BYREF

  std::allocator<char>::allocator(&__a);
  std::string::basic_string<std::allocator<char>>(&__k, "GACHA_WISH", &__a);
  v1 = std::unordered_map<std::string,std::function<int ()(GmContext &,std::vector<std::string> const&,std::string&)>>::operator[](
         &GmUtils::op_func_map[abi:cxx11],
         &__k);
  std::function<int ()(GmContext &,std::vector<std::string> const&,std::string&)>::operator=<int (&)(GmContext &,std::vector<std::string> const&,std::string&)>(
    v1,
    (int (*)(GmContext *, const std::vector<std::string> *, std::string *))procGachaWish);
  std::string::~string(&__k);
  std::allocator<char>::~allocator(&__a);
};

// Line 16316: range 0000000017C400A1-0000000017C40228
int32_t __cdecl procGachaWish(GmContext *context, const std::vector<std::string> *param_vec, std::string *ret_msg)
{
  unsigned __int64 v3; // rbx
  __int64 v4; // rax
  unsigned __int64 v5; // r12
  int32_t result; // eax
  const std::string *v7; // rax
  PlayerGachaComp *GachaComp; // rax
  char v10[96]; // [rsp+20h] [rbp-60h] BYREF

  v3 = (unsigned __int64)v10;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_0(64LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "1 32 4 14 progress:16322";
  *(_QWORD *)(v3 + 16) = procGachaWish;
  v5 = v3 >> 3;
  *(_DWORD *)(v5 + 2147450880) = -235802127;
  *(_DWORD *)(v5 + 2147450884) = -202116348;
  if ( std::vector<std::string>::size(param_vec) )
  {
    *(_DWORD *)(v3 + 32) = 0;
    v7 = std::vector<std::string>::operator[](param_vec, 0LL);
    if ( common::tools::StringUtils::strToNum<unsigned int>(v7, (unsigned int *)(v3 + 32), 1) )
    {
      std::string::operator=(ret_msg, "strToNum fails");
      result = -1;
    }
    else
    {
      if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
        __asan_report_load8();
      GachaComp = Player::getGachaComp(context->player);
      result = PlayerGachaComp::setWishProgressByGm(GachaComp, *(_DWORD *)(v3 + 32));
    }
  }
  else
  {
    std::string::operator=(ret_msg, "param not enough");
    result = -1;
  }
  if ( v10 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 16331: range 0000000017D7CA54-0000000017D7CAF6
void __cdecl procThunderSakuraRegister::procThunderSakuraRegister(procThunderSakuraRegister *const this)
{
  std::function<int(GmContext&,const std::vector<std::string>&,std::string&)> *v1; // rax
  std::allocator<char> __a; // [rsp+1Fh] [rbp-31h] BYREF
  std::string __k; // [rsp+20h] [rbp-30h] BYREF

  std::allocator<char>::allocator(&__a);
  std::string::basic_string<std::allocator<char>>(&__k, "THUNDER_SAKURA", &__a);
  v1 = std::unordered_map<std::string,std::function<int ()(GmContext &,std::vector<std::string> const&,std::string&)>>::operator[](
         &GmUtils::op_func_map[abi:cxx11],
         &__k);
  std::function<int ()(GmContext &,std::vector<std::string> const&,std::string&)>::operator=<int (&)(GmContext &,std::vector<std::string> const&,std::string&)>(
    v1,
    (int (*)(GmContext *, const std::vector<std::string> *, std::string *))procThunderSakura);
  std::string::~string(&__k);
  std::allocator<char>::~allocator(&__a);
};

// Line 16332: range 0000000017C40229-0000000017C406CB
int32_t __cdecl procThunderSakura(GmContext *context, const std::vector<std::string> *param_vec, std::string *ret_msg)
{
  unsigned __int64 v3; // r12
  __int64 v4; // rax
  _DWORD *v5; // r13
  int32_t v6; // r14d
  const std::string *v7; // rax
  std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v8; // rax
  PlayerSceneComp *SceneComp; // rax
  std::vector<unsigned int>::size_type v10; // r14
  __gnu_cxx::__alloc_traits<std::allocator<unsigned int>,unsigned int>::value_type *v11; // rax
  uint32_t *v12; // rdx
  PlayerAvatarComp *AvatarComp; // rax
  int32_t result; // eax
  uint32_t buff_id; // [rsp+24h] [rbp-9Ch]
  const data::GadgetChainExcelConfig *chain_config_ptr; // [rsp+28h] [rbp-98h]
  char v18[144]; // [rsp+30h] [rbp-90h] BYREF

  v3 = (unsigned __int64)v18;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_1(96LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "3 32 4 14 chain_id:16338 48 4 17 chain_level:16356 64 16 15 scene_ptr:16350";
  *(_QWORD *)(v3 + 16) = procThunderSakura;
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = -234556924;
  v5[536862722] = -202178560;
  if ( std::vector<std::string>::size(param_vec) )
  {
    *(_DWORD *)(v3 + 32) = 0;
    v7 = std::vector<std::string>::operator[](param_vec, 0LL);
    if ( common::tools::StringUtils::strToNum<unsigned int>(v7, (unsigned int *)(v3 + 32), 1) )
    {
      std::string::operator=(ret_msg, "strToNum failed");
      v6 = -1;
    }
    else
    {
      ServiceBox::findService<GameserverService>();
      GameserverService::getConfig((GameserverService *const)(v3 + 64));
      v8 = std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 64));
      chain_config_ptr = data::GadgetExcelConfigMgrBase::findGadgetChainExcelConfig(
                           &v8->design_config.txt_config_mgr.gadget_config_mgr,
                           *(_DWORD *)(v3 + 32));
      std::shared_ptr<Config>::~shared_ptr((std::shared_ptr<Config> *const)(v3 + 64));
      if ( chain_config_ptr )
      {
        if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
          __asan_report_load8();
        Player::getSceneComp(context->player);
        PlayerSceneComp::getCurScene((const PlayerSceneComp *const)(v3 + 64));
        if ( std::operator==<Scene>((const std::shared_ptr<Scene> *)(v3 + 64), 0LL) )
        {
          std::string::operator=(ret_msg, "scene_ptr is nullptr");
          v6 = -1;
        }
        else
        {
          *(_DWORD *)(v3 + 48) = 0;
          if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
            __asan_report_load8();
          SceneComp = Player::getSceneComp(context->player);
          if ( PlayerSceneComp::findGadgetChainLevel(SceneComp, *(_DWORD *)(v3 + 32), (uint32_t *)(v3 + 48)) )
          {
            std::string::operator=(ret_msg, "findGadgetChainLevel failed");
            v6 = -1;
          }
          else if ( *(_DWORD *)(v3 + 48) )
          {
            v10 = *(unsigned int *)(v3 + 48);
            if ( v10 <= std::vector<unsigned int>::size(&chain_config_ptr->buff_list) )
            {
              v11 = (__gnu_cxx::__alloc_traits<std::allocator<unsigned int>,unsigned int>::value_type *)std::vector<unsigned int>::operator[](&chain_config_ptr->buff_list, (unsigned int)(*(_DWORD *)(v3 + 48) - 1));
              v12 = v11;
              if ( *(_BYTE *)(((unsigned __int64)v11 >> 3) + 0x7FFF8000) != 0
                && (char)(((unsigned __int8)v11 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)v11 >> 3) + 0x7FFF8000) )
              {
                __asan_report_load4(v11);
              }
              buff_id = *v12;
              if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
                __asan_report_load8();
              AvatarComp = Player::getAvatarComp(context->player);
              if ( (unsigned int)PlayerAvatarComp::addTeamBuff(AvatarComp, buff_id, 0) )
              {
                std::string::operator=(ret_msg, "addTeamBuff failed");
                v6 = -1;
              }
              else
              {
                v6 = 0;
              }
            }
            else
            {
              std::string::operator=(ret_msg, "chain_level exceed");
              v6 = -1;
            }
          }
          else
          {
            std::string::operator=(ret_msg, "chain_level should not be 0");
            v6 = -1;
          }
        }
        std::shared_ptr<Scene>::~shared_ptr((std::shared_ptr<Scene> *const)(v3 + 64));
      }
      else
      {
        std::string::operator=(ret_msg, "chain config not found");
        v6 = -1;
      }
    }
  }
  else
  {
    std::string::operator=(ret_msg, "param not enough");
    v6 = -1;
  }
  result = v6;
  if ( v18 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8008) = 0;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8008) = -168430091;
  }
  return result;
};

// Line 16381: range 0000000017D7CAF8-0000000017D7CB9A
void __cdecl procVisionTypeRegister::procVisionTypeRegister(procVisionTypeRegister *const this)
{
  std::function<int(GmContext&,const std::vector<std::string>&,std::string&)> *v1; // rax
  std::allocator<char> __a; // [rsp+1Fh] [rbp-31h] BYREF
  std::string __k; // [rsp+20h] [rbp-30h] BYREF

  std::allocator<char>::allocator(&__a);
  std::string::basic_string<std::allocator<char>>(&__k, "VISIONTYPE", &__a);
  v1 = std::unordered_map<std::string,std::function<int ()(GmContext &,std::vector<std::string> const&,std::string&)>>::operator[](
         &GmUtils::op_func_map[abi:cxx11],
         &__k);
  std::function<int ()(GmContext &,std::vector<std::string> const&,std::string&)>::operator=<int (&)(GmContext &,std::vector<std::string> const&,std::string&)>(
    v1,
    (int (*)(GmContext *, const std::vector<std::string> *, std::string *))procVisionType);
  std::string::~string(&__k);
  std::allocator<char>::~allocator(&__a);
};

// Line 16382: range 0000000017C406CC-0000000017C413D2
int32_t __cdecl procVisionType(GmContext *context, const std::vector<std::string> *param_vec, std::string *ret_msg)
{
  int32_t v3; // r14d
  unsigned __int64 v4; // r13
  __int64 v5; // rax
  _DWORD *v6; // r12
  common::milog::MiLogStream *v7; // rdx
  const std::string *v8; // rax
  const std::string *v9; // rax
  int v11; // r15d
  common::tools::StringStream<common::tools::FixedBuffer<4096> > *v12; // r15
  PlayerViewMgr *v13; // rax
  const std::string *v14; // rax
  const std::string *v15; // rax
  const std::string *v16; // rax
  const std::string *v17; // rax
  int v19; // r15d
  PlayerViewMgr *v20; // rax
  PlayerViewMgr *v21; // rax
  const std::string *v22; // rax
  const std::string *v23; // rax
  const std::string *v24; // rax
  int v26; // r15d
  PlayerViewMgr *v27; // r15
  const std::string *v28; // rax
  const std::string *v29; // rax
  int v30; // r15d
  PlayerViewMgr *v31; // rax
  int32_t result; // eax
  std::initializer_list<unsigned int> __l; // [rsp+0h] [rbp-1C0h]
  std::less<unsigned int> __comp; // [rsp+3Ah] [rbp-186h] BYREF
  bool is_all; // [rsp+3Bh] [rbp-185h]
  uint32_t uid; // [rsp+3Ch] [rbp-184h]
  common::milog::MiLogStream v38; // [rsp+40h] [rbp-180h] BYREF
  std::set<unsigned int> set; // [rsp+60h] [rbp-160h] BYREF
  char v40[304]; // [rsp+90h] [rbp-130h] BYREF

  v4 = (unsigned __int64)v40;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v5 = __asan_stack_malloc_2(256LL);
    if ( v5 )
      v4 = v5;
  }
  *(_QWORD *)v4 = 1102416563LL;
  *(_QWORD *)(v4 + 8) = "7 48 1 29 is_region_vision_active:16479 64 4 9 uid:16445 80 4 17 vision_type:16451 96 4 9 uid:16"
                        "390 112 16 25 player_view_mgr_ptr:16396 144 16 25 player_view_mgr_ptr:16485 176 48 16 vision_set:16434";
  *(_QWORD *)(v4 + 16) = procVisionType;
  v6 = (_DWORD *)(v4 >> 3);
  v6[536862720] = -235802127;
  v6[536862721] = -234753551;
  v6[536862722] = -234556924;
  v6[536862723] = 61956;
  v6[536862724] = 62194;
  v6[536862725] = 62194;
  v6[536862727] = -202116109;
  if ( std::vector<std::string>::empty(param_vec) )
  {
    common::milog::MiLogStream::create(
      &v38,
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/player/gm/player_gm_comp.cpp",
      "procVisionType",
      16385);
    v7 = common::milog::MiLogStream::operator<<<char [15],(char *[15])0>(&v38, (const char (*)[15])"invalid param:");
    common::milog::MiLogStream::operator<<<std::string>(v7, param_vec);
    common::milog::MiLogStream::~MiLogStream(&v38);
    v3 = -1;
    goto LABEL_77;
  }
  v8 = std::vector<std::string>::operator[](param_vec, 0LL);
  if ( !std::operator==<char>(off_26370AC0, v8) )
  {
    v14 = std::vector<std::string>::operator[](param_vec, 0LL);
    if ( std::operator==<char>(off_26356E00, v14) )
    {
      if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
        __asan_report_load8();
      *(_DWORD *)(v4 + 80) = Player::getUid(context->player);
      is_all = 0;
      *(_DWORD *)(v4 + 96) = 0;
      if ( std::vector<std::string>::size(param_vec) > 1 )
      {
        v15 = std::vector<std::string>::operator[](param_vec, 1uLL);
        if ( std::operator==<char>(_f.gap0, v15) )
        {
          is_all = 1;
        }
        else
        {
          v16 = std::vector<std::string>::operator[](param_vec, 1uLL);
          if ( common::tools::StringUtils::strToNum<unsigned int>(v16, (unsigned int *)(v4 + 96), 1) )
            goto LABEL_28;
        }
      }
      if ( std::vector<std::string>::size(param_vec) <= 2
        || (v17 = std::vector<std::string>::operator[](param_vec, 2uLL),
            !common::tools::StringUtils::strToNum<unsigned int>(v17, (unsigned int *)(v4 + 80), 1)) )
      {
        if ( *(_BYTE *)(((unsigned __int64)&context->scene >> 3) + 0x7FFF8000) )
          __asan_report_load8();
        Scene::findPlayerViewMgr((const Scene *const)(v4 + 144), (uint32_t)context->scene);
        if ( std::operator==<PlayerViewMgr>(0LL, (const std::shared_ptr<PlayerViewMgr> *)(v4 + 144)) )
        {
          std::string::operator=(ret_msg, &off_26370B00);
          v3 = -1;
          v19 = 0;
        }
        else
        {
          std::set<unsigned int>::set((std::set<unsigned int> *const)(v4 + 176));
          std::set<unsigned int>::insert(
            (std::set<unsigned int> *const)(v4 + 176),
            (const std::set<unsigned int>::value_type *)(v4 + 96));
          if ( is_all )
          {
            v20 = std::__shared_ptr_access<PlayerViewMgr,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<PlayerViewMgr,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 144));
            PlayerViewMgr::getGroupVisionTypeSet(&set, v20);
            std::set<unsigned int>::operator=((std::set<unsigned int> *const)(v4 + 176), &set);
            std::set<unsigned int>::~set(&set);
          }
          v21 = std::__shared_ptr_access<PlayerViewMgr,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<PlayerViewMgr,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 144));
          PlayerViewMgr::delGroupVisionTypeSet(v21, (const std::set<unsigned int> *)(v4 + 176));
          std::string::operator=(ret_msg, &off_26370B80);
          std::set<unsigned int>::~set((std::set<unsigned int> *const)(v4 + 176));
          v19 = 1;
        }
        std::shared_ptr<PlayerViewMgr>::~shared_ptr((std::shared_ptr<PlayerViewMgr> *const)(v4 + 144));
        if ( v19 == 1 )
          goto LABEL_76;
        goto LABEL_77;
      }
LABEL_28:
      std::string::operator=(ret_msg, "strToNum failed");
      v3 = -1;
      goto LABEL_77;
    }
    v22 = std::vector<std::string>::operator[](param_vec, 0LL);
    if ( std::operator==<char>(off_26356D00, v22) )
    {
      if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
        __asan_report_load8();
      *(_DWORD *)(v4 + 64) = Player::getUid(context->player);
      if ( std::vector<std::string>::size(param_vec) > 1 )
      {
        *(_DWORD *)(v4 + 80) = 0;
        v23 = std::vector<std::string>::operator[](param_vec, 1uLL);
        if ( !common::tools::StringUtils::strToNum<unsigned int>(v23, (unsigned int *)(v4 + 80), 1) )
        {
          if ( std::vector<std::string>::size(param_vec) <= 2
            || (v24 = std::vector<std::string>::operator[](param_vec, 2uLL),
                !common::tools::StringUtils::strToNum<unsigned int>(v24, (unsigned int *)(v4 + 64), 1)) )
          {
            if ( *(_BYTE *)(((unsigned __int64)&context->scene >> 3) + 0x7FFF8000) )
              __asan_report_load8();
            Scene::findPlayerViewMgr((const Scene *const)(v4 + 144), (uint32_t)context->scene);
            if ( std::operator==<PlayerViewMgr>(0LL, (const std::shared_ptr<PlayerViewMgr> *)(v4 + 144)) )
            {
              std::string::operator=(ret_msg, &off_26370B00);
              v3 = -1;
              v26 = 0;
            }
            else
            {
              v27 = std::__shared_ptr_access<PlayerViewMgr,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<PlayerViewMgr,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 144));
              *(_DWORD *)(v4 + 96) = *(_DWORD *)(v4 + 80);
              __l._M_array = (std::initializer_list<unsigned int>::iterator)(v4 + 96);
              __l._M_len = 1LL;
              std::allocator<unsigned int>::allocator((std::allocator<unsigned int> *const)(v4 + 48));
              std::set<unsigned int>::set(&set, __l, &__comp, (const std::set<unsigned int>::allocator_type *)(v4 + 48));
              PlayerViewMgr::addGroupVisionTypeSet(v27, &set);
              std::set<unsigned int>::~set(&set);
              std::allocator<unsigned int>::~allocator((std::allocator<unsigned int> *const)(v4 + 48));
              std::string::operator=(ret_msg, &off_26370BC0);
              v26 = 1;
            }
            std::shared_ptr<PlayerViewMgr>::~shared_ptr((std::shared_ptr<PlayerViewMgr> *const)(v4 + 144));
            if ( v26 == 1 )
              goto LABEL_76;
            goto LABEL_77;
          }
        }
        goto LABEL_28;
      }
    }
    else
    {
      v28 = std::vector<std::string>::operator[](param_vec, 0LL);
      if ( !std::operator==<char>("REGION", v28) )
      {
        std::string::operator=(ret_msg, "unknown param");
        v3 = -1;
        goto LABEL_77;
      }
      if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
        __asan_report_load8();
      uid = Player::getUid(context->player);
      if ( std::vector<std::string>::size(param_vec) > 1 )
      {
        *(_BYTE *)(v4 + 48) = 0;
        v29 = std::vector<std::string>::operator[](param_vec, 1uLL);
        if ( !common::tools::StringUtils::strToNum<bool>(v29, (bool *)(v4 + 48), 1) )
        {
          if ( *(_BYTE *)(((unsigned __int64)&context->scene >> 3) + 0x7FFF8000) )
            __asan_report_load8();
          Scene::findPlayerViewMgr((const Scene *const)(v4 + 144), (uint32_t)context->scene);
          if ( std::operator==<PlayerViewMgr>(0LL, (const std::shared_ptr<PlayerViewMgr> *)(v4 + 144)) )
          {
            std::string::operator=(ret_msg, &off_26370B00);
            v3 = -1;
            v30 = 0;
          }
          else
          {
            v31 = std::__shared_ptr_access<PlayerViewMgr,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<PlayerViewMgr,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 144));
            PlayerViewMgr::setRegionGroupVisionActive(v31, *(_BYTE *)(v4 + 48));
            v30 = 1;
          }
          std::shared_ptr<PlayerViewMgr>::~shared_ptr((std::shared_ptr<PlayerViewMgr> *const)(v4 + 144));
          if ( v30 == 1 )
            goto LABEL_76;
          goto LABEL_77;
        }
        goto LABEL_28;
      }
    }
    std::string::operator=(ret_msg, "param not enough");
    v3 = -1;
    goto LABEL_77;
  }
  if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
    __asan_report_load8();
  *(_DWORD *)(v4 + 96) = Player::getUid(context->player);
  if ( std::vector<std::string>::size(param_vec) > 1 )
  {
    v9 = std::vector<std::string>::operator[](param_vec, 1uLL);
    if ( common::tools::StringUtils::strToNum<unsigned int>(v9, (unsigned int *)(v4 + 96), 1) )
      goto LABEL_28;
  }
  if ( *(_BYTE *)(((unsigned __int64)&context->scene >> 3) + 0x7FFF8000) )
    __asan_report_load8();
  Scene::findPlayerViewMgr((const Scene *const)(v4 + 112), (uint32_t)context->scene);
  if ( std::operator==<PlayerViewMgr>(0LL, (const std::shared_ptr<PlayerViewMgr> *)(v4 + 112)) )
  {
    std::string::operator=(ret_msg, &off_26370B00);
    v3 = -1;
    v11 = 0;
  }
  else
  {
    common::tools::StringStream<common::tools::FixedBuffer<4096>>::StringStream((common::tools::StringStream<common::tools::FixedBuffer<4096> > *const)(v4 + 144));
    v12 = common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(
            (common::tools::StringStream<common::tools::FixedBuffer<4096> > *const)(v4 + 144),
            "vision_type set: ");
    v13 = std::__shared_ptr_access<PlayerViewMgr,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<PlayerViewMgr,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 112));
    PlayerViewMgr::getGroupVisionTypeSet(&set, v13);
    common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<<unsigned int>(v12, &set);
    std::set<unsigned int>::~set(&set);
    common::tools::StringStream<common::tools::FixedBuffer<4096>>::str[abi:cxx11](
      (std::string *)&v38,
      (common::tools::StringStream<common::tools::FixedBuffer<4096> > *const)(v4 + 144));
    std::string::operator=(ret_msg, &v38);
    std::string::~string(&v38);
    common::tools::StringStream<common::tools::FixedBuffer<4096>>::~StringStream((common::tools::StringStream<common::tools::FixedBuffer<4096> > *const)(v4 + 144));
    v11 = 1;
  }
  std::shared_ptr<PlayerViewMgr>::~shared_ptr((std::shared_ptr<PlayerViewMgr> *const)(v4 + 112));
  if ( v11 == 1 )
LABEL_76:
    v3 = 0;
LABEL_77:
  result = v3;
  if ( v40 == (char *)v4 )
  {
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8008) = 0LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8010) = 0LL;
    *(_DWORD *)((v4 >> 3) + 0x7FFF801C) = 0;
  }
  else
  {
    *(_QWORD *)v4 = 1172321806LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 16501: range 0000000017D7CB9C-0000000017D7CC3E
void __cdecl procSetEntityIdRegister::procSetEntityIdRegister(procSetEntityIdRegister *const this)
{
  std::function<int(GmContext&,const std::vector<std::string>&,std::string&)> *v1; // rax
  std::allocator<char> __a; // [rsp+1Fh] [rbp-31h] BYREF
  std::string __k; // [rsp+20h] [rbp-30h] BYREF

  std::allocator<char>::allocator(&__a);
  std::string::basic_string<std::allocator<char>>(&__k, "SET_ENTITY_ID", &__a);
  v1 = std::unordered_map<std::string,std::function<int ()(GmContext &,std::vector<std::string> const&,std::string&)>>::operator[](
         &GmUtils::op_func_map[abi:cxx11],
         &__k);
  std::function<int ()(GmContext &,std::vector<std::string> const&,std::string&)>::operator=<int (&)(GmContext &,std::vector<std::string> const&,std::string&)>(
    v1,
    (int (*)(GmContext *, const std::vector<std::string> *, std::string *))procSetEntityId);
  std::string::~string(&__k);
  std::allocator<char>::~allocator(&__a);
};

// Line 16502: range 0000000017C413D3-0000000017C41744
int32_t __cdecl procSetEntityId(GmContext *context, const std::vector<std::string> *param_vec, std::string *ret_msg)
{
  unsigned __int64 v3; // r12
  __int64 v4; // rax
  _DWORD *v5; // r13
  int32_t v6; // r14d
  uint32_t AvatarComp; // eax
  common::milog::MiLogStream *v8; // rax
  std::__shared_ptr_access<FormalAvatar,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v9; // rax
  common::milog::MiLogStream *v10; // rax
  common::milog::MiLogStream *v11; // rax
  Entity *v12; // rax
  int32_t result; // eax
  common::milog::MiLogStream v15; // [rsp+20h] [rbp-B0h] BYREF
  char v16[144]; // [rsp+40h] [rbp-90h] BYREF

  v3 = (unsigned __int64)v16;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_1(96LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "3 32 4 15 avatar_id:16508 48 4 15 entity_id:16509 64 16 23 formal_avatar_ptr:16515";
  *(_QWORD *)(v3 + 16) = procSetEntityId;
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = -234556924;
  v5[536862722] = -202178560;
  if ( std::vector<std::string>::size(param_vec) > 1 )
  {
    *(_DWORD *)(v3 + 32) = 0;
    *(_DWORD *)(v3 + 48) = 0;
    if ( common::tools::StringUtils::strVecToNum<0u,unsigned int,unsigned int &>(
           param_vec,
           (unsigned int *)(v3 + 32),
           (unsigned int *)(v3 + 48),
           (unsigned int *)(v3 + 32)) )
    {
      std::string::operator=(ret_msg, "strToNum fails");
      v6 = -1;
    }
    else
    {
      if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
        __asan_report_load8();
      AvatarComp = (unsigned int)Player::getAvatarComp(context->player);
      PlayerAvatarComp::findFormalAvatarByAvatarId((const PlayerAvatarComp *const)(v3 + 64), AvatarComp);
      if ( std::operator==<FormalAvatar>((const std::shared_ptr<FormalAvatar> *)(v3 + 64), 0LL) )
      {
        common::milog::MiLogStream::create(
          &v15,
          &common::milog::MiLogDefault::default_log_obj_,
          3u,
          "./src/player/gm/player_gm_comp.cpp",
          "procSetEntityId",
          16518);
        v8 = common::milog::MiLogStream::operator<<<char [44],(char *[44])0>(
               &v15,
               (const char (*)[44])"findFormalAvatarByAvatarId fail. avatar_id:");
        common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v8, (const unsigned int *)(v3 + 32));
        common::milog::MiLogStream::~MiLogStream(&v15);
        v6 = -1;
      }
      else
      {
        v9 = std::__shared_ptr_access<FormalAvatar,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<FormalAvatar,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 64));
        if ( Entity::getEntityId((const Entity *const)v9) )
        {
          common::milog::MiLogStream::create(
            &v15,
            &common::milog::MiLogDefault::default_log_obj_,
            3u,
            "./src/player/gm/player_gm_comp.cpp",
            "procSetEntityId",
            16523);
          v10 = common::milog::MiLogStream::operator<<<char [44],(char *[44])0>(
                  &v15,
                  (const char (*)[44])"formal_avatar_ptr has entity id. avatar_id:");
          v11 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                  v10,
                  (const unsigned int *)(v3 + 32));
          common::milog::MiLogStream::operator<<<FormalAvatar,(FormalAvatar*)0>(
            v11,
            (const std::shared_ptr<FormalAvatar> *)(v3 + 64));
          common::milog::MiLogStream::~MiLogStream(&v15);
          v6 = -1;
        }
        else
        {
          v12 = (Entity *)std::__shared_ptr_access<FormalAvatar,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<FormalAvatar,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 64));
          Entity::setEntityId(v12, *(_DWORD *)(v3 + 48));
          v6 = 0;
        }
      }
      std::shared_ptr<FormalAvatar>::~shared_ptr((std::shared_ptr<FormalAvatar> *const)(v3 + 64));
    }
  }
  else
  {
    std::string::operator=(ret_msg, "param not enough");
    v6 = -1;
  }
  result = v6;
  if ( v16 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8008) = 0;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8008) = -168430091;
  }
  return result;
};

// Line 16530: range 0000000017D7CC40-0000000017D7CCE2
void __cdecl procSetNextEntityIdRegister::procSetNextEntityIdRegister(procSetNextEntityIdRegister *const this)
{
  std::function<int(GmContext&,const std::vector<std::string>&,std::string&)> *v1; // rax
  std::allocator<char> __a; // [rsp+1Fh] [rbp-31h] BYREF
  std::string __k; // [rsp+20h] [rbp-30h] BYREF

  std::allocator<char>::allocator(&__a);
  std::string::basic_string<std::allocator<char>>(&__k, "SET_NEXT_ENTITY_ID", &__a);
  v1 = std::unordered_map<std::string,std::function<int ()(GmContext &,std::vector<std::string> const&,std::string&)>>::operator[](
         &GmUtils::op_func_map[abi:cxx11],
         &__k);
  std::function<int ()(GmContext &,std::vector<std::string> const&,std::string&)>::operator=<int (&)(GmContext &,std::vector<std::string> const&,std::string&)>(
    v1,
    (int (*)(GmContext *, const std::vector<std::string> *, std::string *))procSetNextEntityId);
  std::string::~string(&__k);
  std::allocator<char>::~allocator(&__a);
};

// Line 16531: range 0000000017C41745-0000000017C419A1
int32_t __cdecl procSetNextEntityId(
        GmContext *context,
        const std::vector<std::string> *param_vec,
        std::string *ret_msg)
{
  unsigned __int64 v3; // rbx
  __int64 v4; // rax
  _DWORD *v5; // r12
  int32_t v6; // r14d
  const std::string *v7; // rax
  Scene *v8; // rax
  int32_t result; // eax
  char v11[144]; // [rsp+20h] [rbp-90h] BYREF

  v3 = (unsigned __int64)v11;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_1(96LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "2 48 4 15 entity_id:16537 64 16 19 cur_scene_ptr:16543";
  *(_QWORD *)(v3 + 16) = procSetNextEntityId;
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = -234556943;
  v5[536862722] = -202178560;
  if ( std::vector<std::string>::size(param_vec) )
  {
    *(_DWORD *)(v3 + 48) = 0;
    v7 = std::vector<std::string>::operator[](param_vec, 0LL);
    if ( common::tools::StringUtils::strToNum<unsigned int>(v7, (unsigned int *)(v3 + 48), 1) )
    {
      std::string::operator=(ret_msg, "strToNum fails");
      v6 = -1;
    }
    else
    {
      if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
        __asan_report_load8();
      Player::getSceneComp(context->player);
      PlayerSceneComp::getCurScene((const PlayerSceneComp *const)(v3 + 64));
      if ( std::operator==<Scene>(0LL, (const std::shared_ptr<Scene> *)(v3 + 64)) )
      {
        std::string::operator=(ret_msg, &off_26370E20);
        v6 = -1;
      }
      else
      {
        v8 = std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 64));
        Scene::setNextEntityIndexByGm(v8, *(_DWORD *)(v3 + 48));
        v6 = 0;
      }
      std::shared_ptr<Scene>::~shared_ptr((std::shared_ptr<Scene> *const)(v3 + 64));
    }
  }
  else
  {
    std::string::operator=(ret_msg, "param not enough");
    v6 = -1;
  }
  result = v6;
  if ( v11 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8008) = 0;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8008) = -168430091;
  }
  return result;
};

// Line 16553: range 0000000017D7CCE4-0000000017D7CD86
void __cdecl procGroupLinkRegister::procGroupLinkRegister(procGroupLinkRegister *const this)
{
  std::function<int(GmContext&,const std::vector<std::string>&,std::string&)> *v1; // rax
  std::allocator<char> __a; // [rsp+1Fh] [rbp-31h] BYREF
  std::string __k; // [rsp+20h] [rbp-30h] BYREF

  std::allocator<char>::allocator(&__a);
  std::string::basic_string<std::allocator<char>>(&__k, "GROUP_LINK", &__a);
  v1 = std::unordered_map<std::string,std::function<int ()(GmContext &,std::vector<std::string> const&,std::string&)>>::operator[](
         &GmUtils::op_func_map[abi:cxx11],
         &__k);
  std::function<int ()(GmContext &,std::vector<std::string> const&,std::string&)>::operator=<int (&)(GmContext &,std::vector<std::string> const&,std::string&)>(
    v1,
    (int (*)(GmContext *, const std::vector<std::string> *, std::string *))procGroupLink);
  std::string::~string(&__k);
  std::allocator<char>::~allocator(&__a);
};

// Line 16554: range 0000000017C419A2-0000000017C4235C
int32_t __cdecl procGroupLink(GmContext *context, const std::vector<std::string> *param_vec, std::string *ret_msg)
{
  unsigned __int64 v3; // r12
  __int64 v4; // rax
  _DWORD *v5; // r13
  const std::string *v6; // rax
  const std::string *v7; // rax
  PlayerGroupLinkComp *GroupLinkComp; // rax
  int32_t result; // eax
  const std::string *v10; // rax
  const std::string *v11; // rax
  PlayerGroupLinkComp *v12; // rax
  const std::string *v13; // rax
  PlayerGroupLinkComp *v14; // rax
  const std::string *v15; // rax
  const std::string *v16; // rax
  const std::string *v17; // rax
  PlayerGroupLinkComp *v18; // rax
  const std::string *v19; // rax
  PlayerGroupLinkComp *v20; // rax
  PlayerGroupLinkComp *v21; // r14
  const std::string *v22; // rax
  const std::string *v23; // rax
  PlayerGroupLinkComp *v24; // rax
  const std::string *v25; // rax
  const std::string *v26; // rax
  PlayerGroupLinkComp *v27; // rax
  bool is_force; // [rsp+2Fh] [rbp-C1h]
  ActivityScheduleEvent event; // [rsp+30h] [rbp-C0h] BYREF
  char v31[144]; // [rsp+60h] [rbp-90h] BYREF

  v3 = (unsigned __int64)v31;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_1(96LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "2 48 4 13 link_id:16662 64 4 13 link_id:16678";
  *(_QWORD *)(v3 + 16) = procGroupLink;
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = -234556943;
  v5[536862722] = -202116348;
  if ( !std::vector<std::string>::size(param_vec) )
    goto LABEL_58;
  v6 = std::vector<std::string>::operator[](param_vec, 0LL);
  if ( std::operator==<char>(v6, "FINISH") )
  {
    if ( std::vector<std::string>::size(param_vec) > 1 )
    {
      *(_DWORD *)(v3 + 64) = 0;
      v7 = std::vector<std::string>::operator[](param_vec, 1uLL);
      if ( common::tools::StringUtils::strToNum<unsigned int>(v7, (unsigned int *)(v3 + 64), 1) )
        goto LABEL_60;
      if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
        __asan_report_load8();
      GroupLinkComp = Player::getGroupLinkComp(context->player);
      result = PlayerGroupLinkComp::finishGroupBundle(GroupLinkComp, *(_DWORD *)(v3 + 64));
      goto LABEL_65;
    }
LABEL_58:
    std::string::operator=(ret_msg, "param not enough");
    result = -1;
    goto LABEL_65;
  }
  v10 = std::vector<std::string>::operator[](param_vec, 0LL);
  if ( std::operator==<char>(v10, "ACTIVATE") )
  {
    if ( std::vector<std::string>::size(param_vec) > 1 )
    {
      *(_DWORD *)(v3 + 64) = 0;
      v11 = std::vector<std::string>::operator[](param_vec, 1uLL);
      if ( common::tools::StringUtils::strToNum<unsigned int>(v11, (unsigned int *)(v3 + 64), 1) )
        goto LABEL_60;
      if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
        __asan_report_load8();
      v12 = Player::getGroupLinkComp(context->player);
      result = PlayerGroupLinkComp::activateGroupBundle(v12, *(_DWORD *)(v3 + 64));
      goto LABEL_65;
    }
    goto LABEL_58;
  }
  v13 = std::vector<std::string>::operator[](param_vec, 0LL);
  if ( std::operator==<char>(v13, "REGISTER") )
  {
    if ( std::vector<std::string>::size(param_vec) > 2 )
    {
      *(_DWORD *)(v3 + 48) = 0;
      *(_DWORD *)(v3 + 64) = 0;
      if ( common::tools::StringUtils::strVecToNum<1u,unsigned int,unsigned int &>(
             param_vec,
             (unsigned int *)(v3 + 48),
             (unsigned int *)(v3 + 64),
             (unsigned int *)(v3 + 48)) )
      {
        goto LABEL_60;
      }
      if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
        __asan_report_load8();
      v14 = Player::getGroupLinkComp(context->player);
      result = PlayerGroupLinkComp::registerGroupBundle(v14, *(_DWORD *)(v3 + 48), *(_DWORD *)(v3 + 64));
      goto LABEL_65;
    }
    goto LABEL_58;
  }
  v15 = std::vector<std::string>::operator[](param_vec, 0LL);
  if ( std::operator==<char>(v15, "UNREGISTER") )
  {
    if ( std::vector<std::string>::size(param_vec) > 1 )
    {
      *(_DWORD *)(v3 + 64) = 0;
      v16 = std::vector<std::string>::operator[](param_vec, 1uLL);
      if ( common::tools::StringUtils::strToNum<unsigned int>(v16, (unsigned int *)(v3 + 64), 1) )
        goto LABEL_60;
      is_force = 0;
      if ( std::vector<std::string>::size(param_vec) > 2 )
      {
        v17 = std::vector<std::string>::operator[](param_vec, 2uLL);
        if ( std::operator!=<char>(v17, "0") )
          is_force = 1;
      }
      if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
        __asan_report_load8();
      v18 = Player::getGroupLinkComp(context->player);
      result = PlayerGroupLinkComp::unregisterGroupBundle(v18, *(_DWORD *)(v3 + 64), is_force);
      goto LABEL_65;
    }
    goto LABEL_58;
  }
  v19 = std::vector<std::string>::operator[](param_vec, 0LL);
  if ( std::operator==<char>(v19, "CLEAR") )
  {
    if ( std::vector<std::string>::size(param_vec) > 1 )
    {
      *(_DWORD *)(v3 + 48) = 0;
      *(_DWORD *)(v3 + 64) = 0;
      if ( common::tools::StringUtils::strVecToNum<1u,unsigned int,unsigned int &>(
             param_vec,
             (unsigned int *)(v3 + 48),
             (unsigned int *)(v3 + 64),
             (unsigned int *)(v3 + 48)) )
      {
        goto LABEL_60;
      }
      if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
        __asan_report_load8();
      v21 = Player::getGroupLinkComp(context->player);
      ActivityScheduleEvent::ActivityScheduleEvent(&event, *(_DWORD *)(v3 + 48), *(_DWORD *)(v3 + 64), 0);
      PlayerGroupLinkComp::onActivitySettle(v21, &event);
      ActivityScheduleEvent::~ActivityScheduleEvent(&event);
    }
    else
    {
      if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
        __asan_report_load8();
      v20 = Player::getGroupLinkComp(context->player);
      PlayerGroupLinkComp::onGMClearAll(v20);
    }
    result = 0;
    goto LABEL_65;
  }
  v22 = std::vector<std::string>::operator[](param_vec, 0LL);
  if ( !std::operator==<char>(v22, "LINK") )
    goto LABEL_64;
  if ( std::vector<std::string>::size(param_vec) <= 1 )
    goto LABEL_58;
  v23 = std::vector<std::string>::operator[](param_vec, 1uLL);
  if ( std::operator==<char>(v23, "REGISTER") )
  {
    if ( std::vector<std::string>::size(param_vec) > 3 )
    {
      *(_DWORD *)(v3 + 48) = 0;
      *(_DWORD *)(v3 + 64) = 0;
      if ( common::tools::StringUtils::strVecToNum<2u,unsigned int,unsigned int &>(
             param_vec,
             (unsigned int *)(v3 + 48),
             (unsigned int *)(v3 + 64),
             (unsigned int *)(v3 + 48)) )
      {
        goto LABEL_60;
      }
      if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
        __asan_report_load8();
      v24 = Player::getGroupLinkComp(context->player);
      result = PlayerGroupLinkComp::registerGroupLink(v24, *(_DWORD *)(v3 + 48), *(_DWORD *)(v3 + 64));
      goto LABEL_65;
    }
    goto LABEL_58;
  }
  v25 = std::vector<std::string>::operator[](param_vec, 0LL);
  if ( !std::operator==<char>(v25, "UNREGISTER") )
  {
LABEL_64:
    result = -1;
    goto LABEL_65;
  }
  if ( std::vector<std::string>::size(param_vec) <= 2 )
    goto LABEL_58;
  *(_DWORD *)(v3 + 64) = 0;
  v26 = std::vector<std::string>::operator[](param_vec, 2uLL);
  if ( common::tools::StringUtils::strToNum<unsigned int>(v26, (unsigned int *)(v3 + 64), 1) )
  {
LABEL_60:
    std::string::operator=(ret_msg, "strToNum fails");
    result = -1;
    goto LABEL_65;
  }
  if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
    __asan_report_load8();
  v27 = Player::getGroupLinkComp(context->player);
  result = PlayerGroupLinkComp::unregisterGroupLink(v27, *(_DWORD *)(v3 + 64));
LABEL_65:
  if ( v31 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8008) = 0;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8008) = -168430091;
  }
  return result;
};

// Line 16691: range 0000000017D7CD88-0000000017D7CE2A
void __cdecl procFishFarmingRegister::procFishFarmingRegister(procFishFarmingRegister *const this)
{
  std::function<int(GmContext&,const std::vector<std::string>&,std::string&)> *v1; // rax
  std::allocator<char> __a; // [rsp+1Fh] [rbp-31h] BYREF
  std::string __k; // [rsp+20h] [rbp-30h] BYREF

  std::allocator<char>::allocator(&__a);
  std::string::basic_string<std::allocator<char>>(&__k, "HOME_FISH_FARMING", &__a);
  v1 = std::unordered_map<std::string,std::function<int ()(GmContext &,std::vector<std::string> const&,std::string&)>>::operator[](
         &GmUtils::op_func_map[abi:cxx11],
         &__k);
  std::function<int ()(GmContext &,std::vector<std::string> const&,std::string&)>::operator=<int (&)(GmContext &,std::vector<std::string> const&,std::string&)>(
    v1,
    (int (*)(GmContext *, const std::vector<std::string> *, std::string *))procFishFarming);
  std::string::~string(&__k);
  std::allocator<char>::~allocator(&__a);
};

// Line 16692: range 0000000017C4235D-0000000017C425F5
int32_t __cdecl procFishFarming(GmContext *context, const std::vector<std::string> *param_vec, std::string *ret_msg)
{
  unsigned __int64 v3; // r12
  __int64 v4; // rax
  _DWORD *v5; // r13
  PlayerHomeComp *HomeComp; // rax
  int32_t v8; // r14d
  const std::string *v9; // rax
  Home *v10; // rax
  HomeFishFarmingComp *FishFarmingComp; // rax
  int32_t result; // eax
  char v14[144]; // [rsp+30h] [rbp-90h] BYREF

  v3 = (unsigned __int64)v14;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_1(96LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "2 32 16 20 home_world_ptr:16693 64 16 14 home_ptr:16694";
  *(_QWORD *)(v3 + 16) = procFishFarming;
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = -219021312;
  v5[536862722] = -202178560;
  std::shared_ptr<HomeWorld>::shared_ptr((std::shared_ptr<HomeWorld> *const)(v3 + 32), 0LL);
  std::shared_ptr<Home>::shared_ptr((std::shared_ptr<Home> *const)(v3 + 64), 0LL);
  if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
    __asan_report_load8();
  HomeComp = Player::getHomeComp(context->player);
  if ( PlayerHomeComp::getCurHomeWorldAndHome(HomeComp, (HomeWorldPtr *)(v3 + 32), (HomePtr *)(v3 + 64))
    || std::operator==<HomeWorld>((const std::shared_ptr<HomeWorld> *)(v3 + 32), 0LL)
    || std::operator==<Home>((const std::shared_ptr<Home> *)(v3 + 64), 0LL) )
  {
    std::string::operator=(ret_msg, "getCurHomeWorldAndHome failed");
    v8 = -1;
  }
  else if ( std::vector<std::string>::size(param_vec) )
  {
    v9 = std::vector<std::string>::operator[](param_vec, 0LL);
    if ( std::operator==<char>(v9, "RESET") )
    {
      v10 = std::__shared_ptr_access<Home,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Home,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 64));
      FishFarmingComp = Home::getFishFarmingComp(v10);
      HomeFishFarmingComp::resetFishFarmingByGm(FishFarmingComp);
    }
    v8 = 0;
  }
  else
  {
    std::string::operator=(ret_msg, "param not enough");
    v8 = -1;
  }
  std::shared_ptr<Home>::~shared_ptr((std::shared_ptr<Home> *const)(v3 + 64));
  std::shared_ptr<HomeWorld>::~shared_ptr((std::shared_ptr<HomeWorld> *const)(v3 + 32));
  result = v8;
  if ( v14 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8008) = 0;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8008) = -168430091;
  }
  return result;
};

// Line 16716: range 0000000017D7CE2C-0000000017D7CECE
void __cdecl procLunaRiteRegister::procLunaRiteRegister(procLunaRiteRegister *const this)
{
  std::function<int(GmContext&,const std::vector<std::string>&,std::string&)> *v1; // rax
  std::allocator<char> __a; // [rsp+1Fh] [rbp-31h] BYREF
  std::string __k; // [rsp+20h] [rbp-30h] BYREF

  std::allocator<char>::allocator(&__a);
  std::string::basic_string<std::allocator<char>>(&__k, "LUNA_RITE", &__a);
  v1 = std::unordered_map<std::string,std::function<int ()(GmContext &,std::vector<std::string> const&,std::string&)>>::operator[](
         &GmUtils::op_func_map[abi:cxx11],
         &__k);
  std::function<int ()(GmContext &,std::vector<std::string> const&,std::string&)>::operator=<int (&)(GmContext &,std::vector<std::string> const&,std::string&)>(
    v1,
    (int (*)(GmContext *, const std::vector<std::string> *, std::string *))procLunaRite);
  std::string::~string(&__k);
  std::allocator<char>::~allocator(&__a);
};

// Line 16717: range 0000000017C425F6-0000000017C42AB7
int32_t __cdecl procLunaRite(GmContext *context, const std::vector<std::string> *param_vec, std::string *ret_msg)
{
  unsigned __int64 v3; // r12
  __int64 v4; // rax
  _DWORD *v5; // r13
  int32_t v6; // r14d
  std::__shared_ptr_access<LunaRiteActivity,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v7; // rax
  common::milog::MiLogStream *v9; // r14
  const std::string *v10; // rax
  LunaRiteActivity *v11; // rax
  const std::string *v12; // rax
  LunaRiteActivity *v13; // rax
  const std::string *v14; // rax
  const std::string *v15; // rax
  LunaRiteActivity *v16; // rax
  int32_t result; // eax
  common::milog::MiLogStream v19; // [rsp+20h] [rbp-B0h] BYREF
  char v20[144]; // [rsp+40h] [rbp-90h] BYREF

  v3 = (unsigned __int64)v20;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_1(96LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "3 32 4 13 area_id:16741 48 4 13 area_id:16757 64 16 28 luna_rite_activity_ptr:16723";
  *(_QWORD *)(v3 + 16) = procLunaRite;
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = -234556924;
  v5[536862722] = -202178560;
  if ( !std::vector<std::string>::size(param_vec) )
  {
    std::string::operator=(ret_msg, "param not enough");
    v6 = -1;
    goto LABEL_30;
  }
  if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
    __asan_report_load8();
  Player::getActivityComp(context->player);
  PlayerActivityComp::findOpenningActivity<LunaRiteActivity>((PlayerActivityComp *const)(v3 + 64));
  if ( std::operator==<LunaRiteActivity>((const std::shared_ptr<LunaRiteActivity> *)(v3 + 64), 0LL)
    || (v7 = std::__shared_ptr_access<LunaRiteActivity,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<LunaRiteActivity,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 64)),
        !BaseActivity::isOpening((const BaseActivity *const)v7, 0)) )
  {
    common::milog::MiLogStream::create(
      &v19,
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/player/gm/player_gm_comp.cpp",
      "procLunaRite",
      16726);
    v9 = common::milog::MiLogStream::operator<<<char [43],(char *[43])0>(
           &v19,
           (const char (*)[43])"[LUNA_RITE] activity is not opening, uid: ");
    if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
      __asan_report_load8();
    *(_DWORD *)(v3 + 48) = Player::getUid(context->player);
    common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v9, (const unsigned int *)(v3 + 48));
    common::milog::MiLogStream::~MiLogStream(&v19);
    v6 = 860;
    goto LABEL_29;
  }
  v10 = std::vector<std::string>::operator[](param_vec, 0LL);
  if ( !std::operator==<char>(v10, "CLEAR") )
  {
    v12 = std::vector<std::string>::operator[](param_vec, 0LL);
    if ( std::operator==<char>(v12, "SACRIFICE") )
    {
      if ( std::vector<std::string>::size(param_vec) <= 2 )
      {
LABEL_20:
        std::string::operator=(ret_msg, "param not enough");
        v6 = -1;
        goto LABEL_29;
      }
      *(_DWORD *)(v3 + 32) = 0;
      *(_DWORD *)(v3 + 48) = 0;
      if ( !common::tools::StringUtils::strVecToNum<1u,unsigned int,unsigned int &>(
              param_vec,
              (unsigned int *)(v3 + 32),
              (unsigned int *)(v3 + 48),
              (unsigned int *)(v3 + 32)) )
      {
        v13 = std::__shared_ptr_access<LunaRiteActivity,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<LunaRiteActivity,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 64));
        v6 = LunaRiteActivity::onGMSetSacrifice(v13, *(_DWORD *)(v3 + 32), *(_DWORD *)(v3 + 48));
        goto LABEL_29;
      }
    }
    else
    {
      v14 = std::vector<std::string>::operator[](param_vec, 0LL);
      if ( !std::operator==<char>(v14, "HINT") )
      {
        v6 = -1;
        goto LABEL_29;
      }
      if ( std::vector<std::string>::size(param_vec) <= 1 )
        goto LABEL_20;
      *(_DWORD *)(v3 + 48) = 0;
      v15 = std::vector<std::string>::operator[](param_vec, 1uLL);
      if ( !common::tools::StringUtils::strToNum<unsigned int>(v15, (unsigned int *)(v3 + 48), 1) )
      {
        v16 = std::__shared_ptr_access<LunaRiteActivity,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<LunaRiteActivity,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 64));
        v6 = LunaRiteActivity::onGMHint(v16, *(_DWORD *)(v3 + 48));
        goto LABEL_29;
      }
    }
    std::string::operator=(ret_msg, "strToNum fails");
    v6 = -1;
    goto LABEL_29;
  }
  v11 = std::__shared_ptr_access<LunaRiteActivity,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<LunaRiteActivity,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 64));
  LunaRiteActivity::clearByGm(v11);
  v6 = 0;
LABEL_29:
  std::shared_ptr<LunaRiteActivity>::~shared_ptr((std::shared_ptr<LunaRiteActivity> *const)(v3 + 64));
LABEL_30:
  result = v6;
  if ( v20 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8008) = 0;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8008) = -168430091;
  }
  return result;
};

// Line 16768: range 0000000017D7CED0-0000000017D7CF72
void __cdecl procInformalAvatarRegister::procInformalAvatarRegister(procInformalAvatarRegister *const this)
{
  std::function<int(GmContext&,const std::vector<std::string>&,std::string&)> *v1; // rax
  std::allocator<char> __a; // [rsp+1Fh] [rbp-31h] BYREF
  std::string __k; // [rsp+20h] [rbp-30h] BYREF

  std::allocator<char>::allocator(&__a);
  std::string::basic_string<std::allocator<char>>(&__k, "INFORMAL_AVATAR", &__a);
  v1 = std::unordered_map<std::string,std::function<int ()(GmContext &,std::vector<std::string> const&,std::string&)>>::operator[](
         &GmUtils::op_func_map[abi:cxx11],
         &__k);
  std::function<int ()(GmContext &,std::vector<std::string> const&,std::string&)>::operator=<int (&)(GmContext &,std::vector<std::string> const&,std::string&)>(
    v1,
    (int (*)(GmContext *, const std::vector<std::string> *, std::string *))procInformalAvatar);
  std::string::~string(&__k);
  std::allocator<char>::~allocator(&__a);
};

// Line 16769: range 0000000017C42B78-0000000017C4338B
int32_t __cdecl procInformalAvatar(GmContext *context, const std::vector<std::string> *param_vec, std::string *ret_msg)
{
  unsigned __int64 v3; // r13
  __int64 v4; // rax
  _DWORD *v5; // r12
  int32_t v6; // r14d
  const std::string *v7; // rax
  PlayerAvatarComp *AvatarComp; // r14
  const std::string *v9; // rax
  uint32_t v10; // eax
  std::__shared_ptr_access<FormalAvatar,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v11; // rax
  const std::string *v12; // rax
  const std::string *v13; // rax
  const std::string *v14; // r14
  PlayerAvatarComp *v15; // rax
  int32_t result; // eax
  PlayerAvatarComp *v17; // [rsp+10h] [rbp-380h]
  std::allocator<long unsigned int> __a; // [rsp+33h] [rbp-35Dh] BYREF
  int32_t ret; // [rsp+34h] [rbp-35Ch]
  size_t i; // [rsp+38h] [rbp-358h]
  std::string __lhs; // [rsp+40h] [rbp-350h] BYREF
  std::string v23; // [rsp+60h] [rbp-330h] BYREF
  std::function<ForeachPolicy(const Avatar&)> p_func; // [rsp+80h] [rbp-310h] BYREF
  char v25[752]; // [rsp+A0h] [rbp-2F0h] BYREF

  v3 = (unsigned __int64)v25;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_4(704LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "6 32 4 15 avatar_id:16790 48 8 17 avatar_guid:16806 80 16 23 formal_avatar_ptr:16792 112 24 21 m"
                        "irror_guid_vec:16798 176 24 25 del_avatar_guid_vec:16803 240 392 8 ss:16776";
  *(_QWORD *)(v3 + 16) = procInformalAvatar;
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = 61956;
  v5[536862721] = -234881024;
  v5[536862722] = 62194;
  v5[536862723] = 62194;
  v5[536862724] = -218959360;
  v5[536862725] = 62194;
  v5[536862726] = -218959360;
  v5[536862727] = 62194;
  v5[536862739] = -218103808;
  v5[536862740] = -202116109;
  v5[536862741] = -202116109;
  if ( std::vector<std::string>::empty(param_vec) )
  {
    v6 = -1;
  }
  else
  {
    v7 = std::vector<std::string>::operator[](param_vec, 0LL);
    if ( std::operator==<char>(v7, "PRINT") )
    {
      std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream(v3 + 240);
      if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
        __asan_report_load8();
      AvatarComp = Player::getAvatarComp(context->player);
      std::function<ForeachPolicy ()(Avatar const&)>::function<procInformalAvatar(GmContext &,std::vector<std::string> const&,std::string&)::{lambda(Avatar const&)#1},void,void>(
        &p_func,
        (procInformalAvatar::<lambda(const Avatar&)>)(v3 + 240));
      ret = PlayerAvatarComp::foreachAvatar(AvatarComp, &p_func);
      std::function<ForeachPolicy ()(Avatar const&)>::~function(&p_func);
      std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::str(&p_func, v3 + 240);
      std::string::operator=(ret_msg, &p_func);
      std::string::~string(&p_func);
      v6 = ret;
      std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream(v3 + 240);
    }
    else
    {
      v9 = std::vector<std::string>::operator[](param_vec, 0LL);
      if ( std::operator==<char>(v9, "ADD_MIRROR") )
      {
        *(_DWORD *)(v3 + 32) = 0;
        common::tools::StringUtils::strVecToNum<1u,unsigned int>(param_vec, (unsigned int *)(v3 + 32));
        if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
          __asan_report_load8();
        v10 = (unsigned int)Player::getAvatarComp(context->player);
        PlayerAvatarComp::findFormalAvatarByAvatarId((const PlayerAvatarComp *const)(v3 + 80), v10);
        if ( std::operator==<FormalAvatar>(0LL, (const std::shared_ptr<FormalAvatar> *)(v3 + 80)) )
        {
          std::string::operator=(ret_msg, "find source avatar fail");
          v6 = -1;
        }
        else
        {
          std::vector<unsigned long>::vector((std::vector<long unsigned int> *const)(v3 + 112));
          if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
            __asan_report_load8();
          v17 = Player::getAvatarComp(context->player);
          v11 = std::__shared_ptr_access<FormalAvatar,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<FormalAvatar,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 80));
          *(_QWORD *)(v3 + 48) = Avatar::getGuid(v11);
          std::allocator<unsigned long>::allocator(&__a);
          std::vector<unsigned long>::vector(
            (std::vector<long unsigned int> *const)(v3 + 176),
            (std::initializer_list<long unsigned int>)__PAIR128__(1LL, v3 + 48),
            &__a);
          v6 = PlayerAvatarComp::addMirrorAvatars(
                 v17,
                 (const std::vector<long unsigned int> *)(v3 + 176),
                 (std::vector<long unsigned int> *)(v3 + 112),
                 AVATAR_SNAPSHOT_TYPE_NONE);
          std::vector<unsigned long>::~vector((std::vector<long unsigned int> *const)(v3 + 176));
          std::allocator<unsigned long>::~allocator(&__a);
          std::vector<unsigned long>::~vector((std::vector<long unsigned int> *const)(v3 + 112));
        }
        std::shared_ptr<FormalAvatar>::~shared_ptr((std::shared_ptr<FormalAvatar> *const)(v3 + 80));
      }
      else
      {
        v12 = std::vector<std::string>::operator[](param_vec, 0LL);
        if ( std::operator==<char>(v12, off_26356E00) )
        {
          std::vector<unsigned long>::vector((std::vector<long unsigned int> *const)(v3 + 176));
          for ( i = 1LL; i < std::vector<std::string>::size(param_vec); ++i )
          {
            *(_QWORD *)(v3 + 48) = 0LL;
            v13 = std::vector<std::string>::operator[](param_vec, i);
            if ( common::tools::StringUtils::strToNum<unsigned long>(v13, (unsigned __int64 *)(v3 + 48), 1) )
            {
              v14 = std::vector<std::string>::operator[](param_vec, i);
              std::literals::string_literals::operator"" s[abi:cxx11](&__lhs, "parse ", 6uLL);
              std::operator+<char>(&v23, &__lhs, v14);
              std::operator+<char>((std::string *)&p_func, &v23, " fail");
              std::string::operator=(ret_msg, &p_func);
              std::string::~string(&p_func);
              std::string::~string(&v23);
              std::string::~string(&__lhs);
              v6 = -1;
              goto LABEL_28;
            }
            std::vector<unsigned long>::push_back(
              (std::vector<long unsigned int> *const)(v3 + 176),
              (const std::vector<long unsigned int>::value_type *)(v3 + 48));
          }
          if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
            __asan_report_load8();
          v15 = Player::getAvatarComp(context->player);
          v6 = PlayerAvatarComp::delInformalAvatarBatchAndReplaceByAvatarTeam(
                 v15,
                 (const std::vector<long unsigned int> *)(v3 + 176));
LABEL_28:
          std::vector<unsigned long>::~vector((std::vector<long unsigned int> *const)(v3 + 176));
        }
        else
        {
          v6 = -1;
        }
      }
    }
  }
  result = v6;
  if ( v25 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8010) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8018) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF804C) = 0LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8054) = 0;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8020) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8028) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8030) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8038) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8040) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8048) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8050) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 16777: range 0000000017C42AB8-0000000017C42B77
ForeachPolicy __cdecl procInformalAvatar(GmContext &,std::vector<std::string> const&,std::string&)::{lambda(Avatar const&)#1}::operator()(
        const procInformalAvatar::<lambda(const Avatar&)> *const __closure,
        const Avatar *avatar)
{
  __int64 v2; // rbx
  uint32_t AvatarId; // eax
  __int64 v4; // rax
  __int64 v5; // rbx
  uint64_t Guid; // rax
  __int64 v7; // rax

  if ( !Avatar::isFormal(avatar) )
  {
    if ( *(_BYTE *)(((unsigned __int64)__closure >> 3) + 0x7FFF8000) )
      __asan_report_load8();
    v2 = std::operator<<<std::char_traits<char>>((char *)__closure->__ss + 16, "[avatar_id:");
    AvatarId = Avatar::getAvatarId(avatar);
    v4 = std::ostream::operator<<(v2, AvatarId);
    v5 = std::operator<<<std::char_traits<char>>(v4, " guid:");
    Guid = Avatar::getGuid(avatar);
    v7 = std::ostream::operator<<(v5, Guid);
    std::operator<<<std::char_traits<char>>(v7, "]\n");
  }
  return 0;
};

// Line 16819: range 0000000017D7CF74-0000000017D7D016
void __cdecl procSceneTeamRegister::procSceneTeamRegister(procSceneTeamRegister *const this)
{
  std::function<int(GmContext&,const std::vector<std::string>&,std::string&)> *v1; // rax
  std::allocator<char> __a; // [rsp+1Fh] [rbp-31h] BYREF
  std::string __k; // [rsp+20h] [rbp-30h] BYREF

  std::allocator<char>::allocator(&__a);
  std::string::basic_string<std::allocator<char>>(&__k, "SCENE_TEAM", &__a);
  v1 = std::unordered_map<std::string,std::function<int ()(GmContext &,std::vector<std::string> const&,std::string&)>>::operator[](
         &GmUtils::op_func_map[abi:cxx11],
         &__k);
  std::function<int ()(GmContext &,std::vector<std::string> const&,std::string&)>::operator=<int (&)(GmContext &,std::vector<std::string> const&,std::string&)>(
    v1,
    (int (*)(GmContext *, const std::vector<std::string> *, std::string *))procSceneTeam);
  std::string::~string(&__k);
  std::allocator<char>::~allocator(&__a);
};

// Line 16820: range 0000000017C4338C-0000000017C440B5
int32_t __cdecl procSceneTeam(GmContext *context, const std::vector<std::string> *param_vec, std::string *ret_msg)
{
  unsigned __int64 v3; // r13
  __int64 v4; // rax
  _DWORD *v5; // r12
  int32_t v6; // r14d
  const std::string *v7; // rax
  PlayerAvatarComp *AvatarComp; // rax
  uint64_t *v9; // rax
  PlayerAvatarComp *v10; // rax
  __int64 v11; // r14
  std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v12; // rax
  uint32_t AvatarId; // eax
  __int64 v14; // rax
  __int64 v15; // r14
  std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v16; // rax
  uint64_t v17; // rax
  __int64 v18; // rax
  __int64 v19; // rax
  const std::string *v20; // rax
  const std::string *v21; // rax
  const std::string *v22; // r14
  PlayerAvatarComp *v23; // r14
  uint64_t *v24; // rax
  const std::string *v25; // rax
  const std::string *v26; // rax
  const std::string *v27; // r14
  unsigned __int64 *v28; // rax
  google::protobuf::uint64 *v29; // rax
  int32_t result; // eax
  std::vector<long unsigned int>::iterator __for_begin; // [rsp+28h] [rbp-428h] BYREF
  size_t i; // [rsp+30h] [rbp-420h]
  size_t i_0; // [rsp+38h] [rbp-418h]
  std::vector<long unsigned int> *__for_range_0; // [rsp+40h] [rbp-410h]
  unsigned __int64 guid; // [rsp+48h] [rbp-408h]
  std::vector<long unsigned int> *__for_range; // [rsp+50h] [rbp-400h]
  uint64_t avatar_guid; // [rsp+58h] [rbp-3F8h]
  std::string __lhs; // [rsp+60h] [rbp-3F0h] BYREF
  std::string v40; // [rsp+80h] [rbp-3D0h] BYREF
  std::string v41; // [rsp+A0h] [rbp-3B0h] BYREF
  char v42[912]; // [rsp+C0h] [rbp-390h] BYREF

  v3 = (unsigned __int64)v42;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_4(864LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "7 48 8 17 avatar_guid:16848 80 16 15 scene_ptr:16861 112 16 20 avatar_handler:16866 144 24 21 av"
                        "atar_guid_vec:16869 208 56 9 req:16867 304 56 9 rsp:16868 400 392 8 ss:16827";
  *(_QWORD *)(v3 + 16) = procSceneTeam;
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = 61937;
  v5[536862721] = -234881024;
  v5[536862722] = 62194;
  v5[536862723] = 62194;
  v5[536862724] = 62194;
  v5[536862725] = -218959360;
  v5[536862726] = 62194;
  v5[536862728] = -218959360;
  v5[536862729] = 62194;
  v5[536862731] = -218959360;
  v5[536862732] = 62194;
  v5[536862744] = -218103808;
  v5[536862745] = -202116109;
  v5[536862746] = -202116109;
  if ( std::vector<std::string>::empty(param_vec) )
  {
    v6 = -1;
  }
  else
  {
    v7 = std::vector<std::string>::operator[](param_vec, 0LL);
    if ( std::operator==<char>(v7, "PRINT") )
    {
      std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream(v3 + 400);
      if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
        __asan_report_load8();
      AvatarComp = Player::getAvatarComp(context->player);
      PlayerAvatarComp::getMyAvatarTeamInSceneTeam((std::vector<long unsigned int> *)(v3 + 144), AvatarComp);
      __for_range = (std::vector<long unsigned int> *)(v3 + 144);
      __for_begin._M_current = std::vector<unsigned long>::begin((std::vector<long unsigned int> *const)(v3 + 144))._M_current;
      *(std::vector<long unsigned int>::iterator *)(v3 + 48) = std::vector<unsigned long>::end((std::vector<long unsigned int> *const)(v3 + 144));
      while ( __gnu_cxx::operator!=<unsigned long *,std::vector<unsigned long>>(
                &__for_begin,
                (const __gnu_cxx::__normal_iterator<long unsigned int*,std::vector<long unsigned int> > *)(v3 + 48)) )
      {
        v9 = __gnu_cxx::__normal_iterator<unsigned long *,std::vector<unsigned long>>::operator*(&__for_begin);
        if ( *(_BYTE *)(((unsigned __int64)v9 >> 3) + 0x7FFF8000) )
          __asan_report_load8();
        avatar_guid = *v9;
        if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
          __asan_report_load8();
        v10 = Player::getAvatarComp(context->player);
        PlayerAvatarComp::findAvatar((const PlayerAvatarComp *const)(v3 + 112), (uint64_t)v10, avatar_guid);
        if ( std::operator!=<Avatar>(0LL, (const std::shared_ptr<Avatar> *)(v3 + 112)) )
        {
          v11 = std::operator<<<std::char_traits<char>>(v3 + 416, "[avatar_id:");
          v12 = std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 112));
          AvatarId = Avatar::getAvatarId(v12);
          v14 = std::ostream::operator<<(v11, AvatarId);
          v15 = std::operator<<<std::char_traits<char>>(v14, " guid:");
          v16 = std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 112));
          v17 = Avatar::getGuid(v16);
          v18 = std::ostream::operator<<(v15, v17);
        }
        else
        {
          v19 = std::operator<<<std::char_traits<char>>(v3 + 416, "[null, guid:");
          v18 = std::ostream::operator<<(v19, avatar_guid);
        }
        std::operator<<<std::char_traits<char>>(v18, "]\n");
        std::shared_ptr<Avatar>::~shared_ptr((std::shared_ptr<Avatar> *const)(v3 + 112));
        __gnu_cxx::__normal_iterator<unsigned long *,std::vector<unsigned long>>::operator++(&__for_begin);
      }
      std::vector<unsigned long>::~vector((std::vector<long unsigned int> *const)(v3 + 144));
      std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::str(&v41, v3 + 400);
      std::string::operator=(ret_msg, &v41);
      std::string::~string(&v41);
      v6 = 0;
      std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream(v3 + 400);
    }
    else
    {
      v20 = std::vector<std::string>::operator[](param_vec, 0LL);
      if ( std::operator==<char>(v20, off_26352320) )
      {
        std::vector<unsigned long>::vector((std::vector<long unsigned int> *const)(v3 + 144));
        for ( i = 1LL; i < std::vector<std::string>::size(param_vec); ++i )
        {
          *(_QWORD *)(v3 + 48) = 0LL;
          v21 = std::vector<std::string>::operator[](param_vec, i);
          if ( common::tools::StringUtils::strToNum<unsigned long>(v21, (unsigned __int64 *)(v3 + 48), 1) )
          {
            v22 = std::vector<std::string>::operator[](param_vec, i);
            std::literals::string_literals::operator"" s[abi:cxx11](&__lhs, "parse ", 6uLL);
            std::operator+<char>(&v40, &__lhs, v22);
            std::operator+<char>(&v41, &v40, " fail");
            std::string::operator=(ret_msg, &v41);
            std::string::~string(&v41);
            std::string::~string(&v40);
            std::string::~string(&__lhs);
            v6 = -1;
            goto LABEL_35;
          }
          std::vector<unsigned long>::push_back(
            (std::vector<long unsigned int> *const)(v3 + 144),
            (const std::vector<long unsigned int>::value_type *)(v3 + 48));
        }
        if ( std::vector<unsigned long>::empty((const std::vector<long unsigned int> *const)(v3 + 144)) )
        {
          std::string::operator=(ret_msg, "avatar_guid_vec is empty");
          v6 = -1;
        }
        else
        {
          if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
            __asan_report_load8();
          Player::getSceneComp(context->player);
          PlayerSceneComp::getCurScene((const PlayerSceneComp *const)(v3 + 80));
          if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
            __asan_report_load8();
          v23 = Player::getAvatarComp(context->player);
          std::shared_ptr<Scene>::shared_ptr(
            (std::shared_ptr<Scene> *const)(v3 + 112),
            (const std::shared_ptr<Scene> *)(v3 + 80));
          v24 = std::vector<unsigned long>::operator[]((std::vector<long unsigned int> *const)(v3 + 144), 0LL);
          if ( *(_BYTE *)(((unsigned __int64)v24 >> 3) + 0x7FFF8000) )
            __asan_report_load8();
          v6 = PlayerAvatarComp::setSceneTeamAndAddToScene(
                 v23,
                 (const std::vector<long unsigned int> *)(v3 + 144),
                 *v24,
                 (ScenePtr *)(v3 + 112),
                 CHANGE_SCENE_TEAM_REASON_GM);
          std::shared_ptr<Scene>::~shared_ptr((std::shared_ptr<Scene> *const)(v3 + 112));
          std::shared_ptr<Scene>::~shared_ptr((std::shared_ptr<Scene> *const)(v3 + 80));
        }
LABEL_35:
        std::vector<unsigned long>::~vector((std::vector<long unsigned int> *const)(v3 + 144));
      }
      else
      {
        v25 = std::vector<std::string>::operator[](param_vec, 0LL);
        if ( std::operator==<char>(v25, "DUNGEON_SET") )
        {
          if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
            __asan_report_load8();
          ZN13AvatarHandlerCI217PlayerHandlerBaseER6Player((AvatarHandler *const)(v3 + 112), context->player);
          proto::PersistentDungeonSwitchAvatarReq::PersistentDungeonSwitchAvatarReq((proto::PersistentDungeonSwitchAvatarReq *const)(v3 + 208));
          proto::PersistentDungeonSwitchAvatarRsp::PersistentDungeonSwitchAvatarRsp((proto::PersistentDungeonSwitchAvatarRsp *const)(v3 + 304));
          std::vector<unsigned long>::vector((std::vector<long unsigned int> *const)(v3 + 144));
          for ( i_0 = 1LL; i_0 < std::vector<std::string>::size(param_vec); ++i_0 )
          {
            *(_QWORD *)(v3 + 48) = 0LL;
            v26 = std::vector<std::string>::operator[](param_vec, i_0);
            if ( common::tools::StringUtils::strToNum<unsigned long>(v26, (unsigned __int64 *)(v3 + 48), 1) )
            {
              v27 = std::vector<std::string>::operator[](param_vec, i_0);
              std::literals::string_literals::operator"" s[abi:cxx11](&__lhs, "parse ", 6uLL);
              std::operator+<char>(&v40, &__lhs, v27);
              std::operator+<char>(&v41, &v40, " fail");
              std::string::operator=(ret_msg, &v41);
              std::string::~string(&v41);
              std::string::~string(&v40);
              std::string::~string(&__lhs);
              v6 = -1;
              goto LABEL_54;
            }
            std::vector<unsigned long>::push_back(
              (std::vector<long unsigned int> *const)(v3 + 144),
              (const std::vector<long unsigned int>::value_type *)(v3 + 48));
          }
          if ( std::vector<unsigned long>::empty((const std::vector<long unsigned int> *const)(v3 + 144)) )
          {
            std::string::operator=(ret_msg, "avatar_guid_vec is empty");
            v6 = -1;
          }
          else
          {
            __for_range_0 = (std::vector<long unsigned int> *)(v3 + 144);
            __for_begin._M_current = std::vector<unsigned long>::begin((std::vector<long unsigned int> *const)(v3 + 144))._M_current;
            *(std::vector<long unsigned int>::iterator *)(v3 + 48) = std::vector<unsigned long>::end((std::vector<long unsigned int> *const)(v3 + 144));
            while ( __gnu_cxx::operator!=<unsigned long *,std::vector<unsigned long>>(
                      &__for_begin,
                      (const __gnu_cxx::__normal_iterator<long unsigned int*,std::vector<long unsigned int> > *)(v3 + 48)) )
            {
              v28 = __gnu_cxx::__normal_iterator<unsigned long *,std::vector<unsigned long>>::operator*(&__for_begin);
              if ( *(_BYTE *)(((unsigned __int64)v28 >> 3) + 0x7FFF8000) )
                __asan_report_load8();
              guid = *v28;
              proto::PersistentDungeonSwitchAvatarReq::add_avatar_team_guid_list(
                (proto::PersistentDungeonSwitchAvatarReq *const)(v3 + 208),
                guid);
              __gnu_cxx::__normal_iterator<unsigned long *,std::vector<unsigned long>>::operator++(&__for_begin);
            }
            v29 = std::vector<unsigned long>::operator[]((std::vector<long unsigned int> *const)(v3 + 144), 0LL);
            if ( *(_BYTE *)(((unsigned __int64)v29 >> 3) + 0x7FFF8000) )
              __asan_report_load8();
            proto::PersistentDungeonSwitchAvatarReq::set_cur_avatar_guid(
              (proto::PersistentDungeonSwitchAvatarReq *const)(v3 + 208),
              *v29);
            v6 = AvatarHandler::onPersistentDungeonSwitchAvatarReq(
                   (AvatarHandler *const)(v3 + 112),
                   (const proto::PersistentDungeonSwitchAvatarReq *)(v3 + 208),
                   (proto::PersistentDungeonSwitchAvatarRsp *)(v3 + 304));
          }
LABEL_54:
          std::vector<unsigned long>::~vector((std::vector<long unsigned int> *const)(v3 + 144));
          proto::PersistentDungeonSwitchAvatarRsp::~PersistentDungeonSwitchAvatarRsp((proto::PersistentDungeonSwitchAvatarRsp *const)(v3 + 304));
          proto::PersistentDungeonSwitchAvatarReq::~PersistentDungeonSwitchAvatarReq((proto::PersistentDungeonSwitchAvatarReq *const)(v3 + 208));
          AvatarHandler::~AvatarHandler((AvatarHandler *const)(v3 + 112));
        }
        else
        {
          v6 = -1;
        }
      }
    }
  }
  result = v6;
  if ( v42 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8010) = 0LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8018) = 0;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8020) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF802C) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8060) = 0LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8068) = 0;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8020) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8028) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8030) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8038) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8040) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8048) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8050) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8058) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8060) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8068) = -168430091;
  }
  return result;
};

// Line 16895: range 0000000017D7D018-0000000017D7D0BA
void __cdecl procFishingRegister::procFishingRegister(procFishingRegister *const this)
{
  std::function<int(GmContext&,const std::vector<std::string>&,std::string&)> *v1; // rax
  std::allocator<char> __a; // [rsp+1Fh] [rbp-31h] BYREF
  std::string __k; // [rsp+20h] [rbp-30h] BYREF

  std::allocator<char>::allocator(&__a);
  std::string::basic_string<std::allocator<char>>(&__k, "FISH", &__a);
  v1 = std::unordered_map<std::string,std::function<int ()(GmContext &,std::vector<std::string> const&,std::string&)>>::operator[](
         &GmUtils::op_func_map[abi:cxx11],
         &__k);
  std::function<int ()(GmContext &,std::vector<std::string> const&,std::string&)>::operator=<int (&)(GmContext &,std::vector<std::string> const&,std::string&)>(
    v1,
    (int (*)(GmContext *, const std::vector<std::string> *, std::string *))procFishing);
  std::string::~string(&__k);
  std::allocator<char>::~allocator(&__a);
};

// Line 16896: range 0000000017C440B6-0000000017C459F9
int32_t __cdecl procFishing(GmContext *context, const std::vector<std::string> *param_vec, std::string *ret_msg)
{
  int32_t v3; // r14d
  unsigned __int64 v4; // r13
  __int64 v5; // rax
  _DWORD *v6; // r12
  const std::string *v7; // rax
  const std::string *v8; // rax
  common::milog::MiLogStream *v9; // rdx
  const std::string *v10; // rax
  common::milog::MiLogStream *v11; // rdx
  common::milog::MiLogStream *v12; // rax
  common::milog::MiLogStream *v13; // rax
  std::__shared_ptr_access<FishPoolComp,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v14; // rax
  const std::string *v15; // rax
  const std::string *v16; // rax
  common::milog::MiLogStream *v17; // rdx
  const std::string *v18; // rax
  common::milog::MiLogStream *v19; // rdx
  std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v20; // rax
  common::milog::MiLogStream *v21; // rax
  common::milog::MiLogStream *v22; // rax
  common::milog::MiLogStream *v23; // rax
  common::milog::MiLogStream *v24; // rax
  unsigned __int64 Position; // rax
  PlayerBasicComp *BasicComp; // rax
  common::milog::MiLogStream *v27; // rax
  common::milog::MiLogStream *v28; // rax
  std::__shared_ptr_access<Gadget,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v29; // rax
  unsigned __int64 v30; // rdx
  void (__fastcall *v31)(std::__shared_ptr_access<Gadget,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *, Scene *, VisionContext *); // r8
  std::__shared_ptr_access<Gadget,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v32; // rax
  common::milog::MiLogStream *v33; // rax
  common::milog::MiLogStream *v34; // rax
  std::__shared_ptr_access<FishPoolComp,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v35; // rax
  std::__shared_ptr_access<Gadget,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v36; // rax
  unsigned __int64 v37; // rdx
  common::tools::StringStream<common::tools::FixedBuffer<4096> > *v38; // rax
  const std::string *v39; // rax
  const std::string *v40; // rax
  common::milog::MiLogStream *v41; // rdx
  const std::string *v42; // rax
  common::milog::MiLogStream *v43; // rdx
  common::milog::MiLogStream *v44; // rax
  common::milog::MiLogStream *v45; // rax
  common::milog::MiLogStream *v46; // rax
  common::milog::MiLogStream *v47; // rax
  uint32_t Uid; // eax
  const std::string *v49; // rax
  common::milog::MiLogStream *v50; // rdx
  PlayerEventComp *EventComp; // r14
  unsigned int *v53; // [rsp+0h] [rbp-550h]
  bool *v54; // [rsp+8h] [rbp-548h]
  uint32_t bait_id; // [rsp+Ch] [rbp-544h]
  bool *v56; // [rsp+10h] [rbp-540h]
  _BOOL4 v57; // [rsp+10h] [rbp-540h]
  int v58; // [rsp+10h] [rbp-540h]
  _BOOL4 v59; // [rsp+10h] [rbp-540h]
  int v60; // [rsp+10h] [rbp-540h]
  _BOOL4 v61; // [rsp+10h] [rbp-540h]
  int v62; // [rsp+10h] [rbp-540h]
  std::__shared_ptr_access<FishPoolComp,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v63; // [rsp+10h] [rbp-540h]
  std::string *ret_msgb; // [rsp+18h] [rbp-538h]
  bool v66; // [rsp+36h] [rbp-51Ah] BYREF
  char v67[9]; // [rsp+37h] [rbp-519h] BYREF
  common::milog::MiLogStream v68; // [rsp+40h] [rbp-510h] BYREF
  char v69[1264]; // [rsp+60h] [rbp-4F0h] BYREF

  v4 = (unsigned __int64)v69;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v5 = __asan_stack_malloc_5(1216LL);
    if ( v5 )
      v4 = v5;
  }
  *(_QWORD *)v4 = 1102416563LL;
  *(_QWORD *)(v4 + 8) = "8 48 4 13 fish_id:17026 64 4 15 entity_id:16909 80 4 16 fished_num:16910 96 16 16 gadget_ptr:169"
                        "70 128 16 16 gadget_ptr:16921 160 16 19 fish_pool_ptr:16926 192 48 18 gen_fish_map:16984 272 816"
                        " 18 gadget_param:16964";
  *(_QWORD *)(v4 + 16) = procFishing;
  v6 = (_DWORD *)(v4 >> 3);
  v6[536862720] = -235802127;
  v6[536862721] = -234556943;
  v6[536862722] = -234556924;
  v6[536862723] = -219021312;
  v6[536862724] = -219021312;
  v6[536862725] = -219021312;
  v6[536862727] = -219021312;
  v6[536862728] = 62194;
  v6[536862754] = -202116109;
  v6[536862755] = -202116109;
  v6[536862756] = -202116109;
  v6[536862757] = -202116109;
  if ( std::vector<std::string>::empty(param_vec) )
  {
    common::milog::MiLogStream::create(
      &v68,
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/player/gm/player_gm_comp.cpp",
      "procFishing",
      16899);
    common::milog::MiLogStream::operator<<<char [17],(char *[17])0>(&v68, "param not enough");
    common::milog::MiLogStream::~MiLogStream(&v68);
    v3 = -1;
    goto LABEL_89;
  }
  v7 = std::vector<std::string>::operator[](param_vec, 0LL);
  if ( std::operator==<char>(v7, "POOL") )
  {
    if ( std::vector<std::string>::size(param_vec) <= 2 )
    {
      common::milog::MiLogStream::create(
        &v68,
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/player/gm/player_gm_comp.cpp",
        "procFishing",
        16906);
      common::milog::MiLogStream::operator<<<char [17],(char *[17])0>(&v68, "param not enough");
      common::milog::MiLogStream::~MiLogStream(&v68);
      v3 = -1;
      goto LABEL_89;
    }
    *(_DWORD *)(v4 + 64) = 0;
    *(_DWORD *)(v4 + 80) = 0;
    v8 = std::vector<std::string>::operator[](param_vec, 1uLL);
    if ( common::tools::StringUtils::strToNum<unsigned int>(v8, (unsigned int *)(v4 + 64), 1) )
    {
      common::milog::MiLogStream::create(
        &v68,
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/player/gm/player_gm_comp.cpp",
        "procFishing",
        16913);
      v9 = common::milog::MiLogStream::operator<<<char [15],(char *[15])0>(&v68, (const char (*)[15])"invalid param:");
      common::milog::MiLogStream::operator<<<std::string>(v9, param_vec);
      common::milog::MiLogStream::~MiLogStream(&v68);
      v3 = -1;
      goto LABEL_89;
    }
    v10 = std::vector<std::string>::operator[](param_vec, 2uLL);
    if ( common::tools::StringUtils::strToNum<unsigned int>(v10, (unsigned int *)(v4 + 80), 1) )
    {
      common::milog::MiLogStream::create(
        &v68,
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/player/gm/player_gm_comp.cpp",
        "procFishing",
        16918);
      v11 = common::milog::MiLogStream::operator<<<char [15],(char *[15])0>(&v68, (const char (*)[15])"invalid param:");
      common::milog::MiLogStream::operator<<<std::string>(v11, param_vec);
      common::milog::MiLogStream::~MiLogStream(&v68);
      v3 = -1;
      goto LABEL_89;
    }
    if ( *(_BYTE *)(((unsigned __int64)&context->scene >> 3) + 0x7FFF8000) )
      __asan_report_load8();
    Scene::findEntity<Gadget>((const Scene *const)(v4 + 128), (uint32_t)context->scene);
    if ( std::operator==<Gadget>(0LL, (const std::shared_ptr<Gadget> *)(v4 + 128)) )
    {
      v3 = 504;
      v57 = 0;
    }
    else
    {
      std::__shared_ptr_access<Gadget,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Gadget,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 128));
      EcsBase<Gadget,GadgetCompBase,28u>::findComp<FishPoolComp>((const EcsBase<Gadget,GadgetCompBase,28> *const)(v4 + 160));
      if ( std::operator==<FishPoolComp>(0LL, (const std::shared_ptr<FishPoolComp> *)(v4 + 160)) )
      {
        common::milog::MiLogStream::create(
          &v68,
          &common::milog::MiLogDefault::default_log_obj_,
          3u,
          "./src/player/gm/player_gm_comp.cpp",
          "procFishing",
          16929);
        v12 = common::milog::MiLogStream::operator<<<char [11],(char *[11])0>(&v68, (const char (*)[11])"entity_id:");
        v13 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                v12,
                (const unsigned int *)(v4 + 64));
        common::milog::MiLogStream::operator<<<char [18],(char *[18])0>(v13, (const char (*)[18])off_26371780);
        common::milog::MiLogStream::~MiLogStream(&v68);
        v3 = -1;
        v58 = 0;
      }
      else
      {
        v14 = std::__shared_ptr_access<FishPoolComp,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<FishPoolComp,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 160));
        FishPoolComp::setTodayFishNumByGm(v14, *(_DWORD *)(v4 + 80));
        v58 = 1;
      }
      std::shared_ptr<FishPoolComp>::~shared_ptr((std::shared_ptr<FishPoolComp> *const)(v4 + 160));
      v57 = v58 == 1;
    }
    std::shared_ptr<Gadget>::~shared_ptr((std::shared_ptr<Gadget> *const)(v4 + 128));
    if ( v57 )
      goto LABEL_88;
  }
  else
  {
    v15 = std::vector<std::string>::operator[](param_vec, 0LL);
    if ( std::operator==<char>(v15, "GENFISH") )
    {
      *(_DWORD *)(v4 + 64) = 0;
      *(_DWORD *)(v4 + 80) = 0;
      if ( std::vector<std::string>::size(param_vec) <= 2 )
      {
        common::milog::MiLogStream::create(
          &v68,
          &common::milog::MiLogDefault::default_log_obj_,
          3u,
          "./src/player/gm/player_gm_comp.cpp",
          "procFishing",
          16940);
        common::milog::MiLogStream::operator<<<char [17],(char *[17])0>(&v68, "param not enough");
        common::milog::MiLogStream::~MiLogStream(&v68);
        v3 = -1;
        goto LABEL_89;
      }
      v16 = std::vector<std::string>::operator[](param_vec, 1uLL);
      if ( common::tools::StringUtils::strToNum<unsigned int>(v16, (unsigned int *)(v4 + 64), 1) )
      {
        common::milog::MiLogStream::create(
          &v68,
          &common::milog::MiLogDefault::default_log_obj_,
          3u,
          "./src/player/gm/player_gm_comp.cpp",
          "procFishing",
          16945);
        v17 = common::milog::MiLogStream::operator<<<char [15],(char *[15])0>(
                &v68,
                (const char (*)[15])"invalid param:");
        common::milog::MiLogStream::operator<<<std::string>(v17, param_vec);
        common::milog::MiLogStream::~MiLogStream(&v68);
        v3 = -1;
        goto LABEL_89;
      }
      v18 = std::vector<std::string>::operator[](param_vec, 2uLL);
      if ( common::tools::StringUtils::strToNum<unsigned int>(v18, (unsigned int *)(v4 + 80), 1) )
      {
        common::milog::MiLogStream::create(
          &v68,
          &common::milog::MiLogDefault::default_log_obj_,
          3u,
          "./src/player/gm/player_gm_comp.cpp",
          "procFishing",
          16950);
        v19 = common::milog::MiLogStream::operator<<<char [15],(char *[15])0>(
                &v68,
                (const char (*)[15])"invalid param:");
        common::milog::MiLogStream::operator<<<std::string>(v19, param_vec);
        common::milog::MiLogStream::~MiLogStream(&v68);
        v3 = -1;
        goto LABEL_89;
      }
      ServiceBox::findService<GameserverService>();
      GameserverService::getConfig((GameserverService *const)(v4 + 160));
      v20 = std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 160));
      *(_QWORD *)&v67[1] = data::GadgetExcelConfigMgrBase::findGadgetExcelConfig(
                             &v20->design_config.txt_config_mgr.gadget_config_mgr,
                             *(_DWORD *)(v4 + 64));
      std::shared_ptr<Config>::~shared_ptr((std::shared_ptr<Config> *const)(v4 + 160));
      if ( !*(_QWORD *)&v67[1] )
      {
        common::milog::MiLogStream::create(
          &v68,
          &common::milog::MiLogDefault::default_log_obj_,
          3u,
          "./src/player/gm/player_gm_comp.cpp",
          "procFishing",
          16956);
        v21 = common::milog::MiLogStream::operator<<<char [11],(char *[11])0>(&v68, (const char (*)[11])"gadget_id:");
        v22 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                v21,
                (const unsigned int *)(v4 + 64));
        common::milog::MiLogStream::operator<<<char [18],(char *[18])0>(v22, (const char (*)[18])" config not found");
        common::milog::MiLogStream::~MiLogStream(&v68);
        v3 = -1;
        goto LABEL_89;
      }
      if ( *(_BYTE *)(((unsigned __int64)(*(_QWORD *)&v67[1] + 340LL) >> 3) + 0x7FFF8000) != 0
        && (char)(((v67[1] + 84) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)(*(_QWORD *)&v67[1] + 340LL) >> 3)
                                                       + 0x7FFF8000) )
      {
        __asan_report_load4(*(_QWORD *)&v67[1] + 340LL);
      }
      if ( *(_DWORD *)(*(_QWORD *)&v67[1] + 340LL) != 61 )
      {
        common::milog::MiLogStream::create(
          &v68,
          &common::milog::MiLogDefault::default_log_obj_,
          3u,
          "./src/player/gm/player_gm_comp.cpp",
          "procFishing",
          16961);
        v23 = common::milog::MiLogStream::operator<<<char [11],(char *[11])0>(&v68, (const char (*)[11])"gadget_id:");
        v24 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                v23,
                (const unsigned int *)(v4 + 64));
        common::milog::MiLogStream::operator<<<char [18],(char *[18])0>(v24, (const char (*)[18])off_26371800);
        common::milog::MiLogStream::~MiLogStream(&v68);
        v3 = -1;
        goto LABEL_89;
      }
      GadgetParam::GadgetParam((GadgetParam *const)(v4 + 272));
      *(_DWORD *)(v4 + 272) = *(_DWORD *)(v4 + 64);
      if ( *(_BYTE *)(((unsigned __int64)&context->avatar >> 3) + 0x7FFF8000) )
        __asan_report_load8();
      Position = (unsigned __int64)Entity::getPosition((const Entity *const)context->avatar);
      if ( (char)(Position & 7) >= *(_BYTE *)((Position >> 3) + 0x7FFF8000)
        && *(_BYTE *)((Position >> 3) + 0x7FFF8000) != 0
        || *(_BYTE *)(((Position + 11) >> 3) + 0x7FFF8000) != 0
        && (char)((Position + 11) & 7) >= *(_BYTE *)(((Position + 11) >> 3) + 0x7FFF8000) )
      {
        Position = __asan_report_load_n(Position, 12LL);
      }
      *(_QWORD *)(v4 + 284) = *(_QWORD *)Position;
      *(_DWORD *)(v4 + 292) = *(_DWORD *)(Position + 8);
      *(_DWORD *)(v4 + 480) = 3;
      if ( *(_BYTE *)(((unsigned __int64)&context->scene >> 3) + 0x7FFF8000) )
        __asan_report_load8();
      *(_DWORD *)(v4 + 280) = Scene::genNewEntityId(context->scene, PROT_ENTITY_GADGET);
      if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
        __asan_report_load8();
      BasicComp = Player::getBasicComp(context->player);
      *(_DWORD *)(v4 + 276) = PlayerBasicComp::genGuid(BasicComp, GUID_NONE);
      EntityMgr::createGadget((const GadgetParam *)(v4 + 96));
      if ( std::operator==<Gadget>(0LL, (const std::shared_ptr<Gadget> *)(v4 + 96)) )
      {
        common::milog::MiLogStream::create(
          &v68,
          &common::milog::MiLogDefault::default_log_obj_,
          3u,
          "./src/player/gm/player_gm_comp.cpp",
          "procFishing",
          16973);
        v27 = common::milog::MiLogStream::operator<<<char [18],(char *[18])0>(
                &v68,
                (const char (*)[18])"create gadget_id:");
        v28 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                v27,
                (const unsigned int *)(v4 + 64));
        common::milog::MiLogStream::operator<<<char [8],(char *[8])0>(v28, (const char (*)[8])" failed");
        common::milog::MiLogStream::~MiLogStream(&v68);
        v3 = -1;
        v59 = 0;
      }
      else
      {
        v29 = std::__shared_ptr_access<Gadget,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Gadget,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 96));
        if ( *(_BYTE *)(((unsigned __int64)v29 >> 3) + 0x7FFF8000) )
          __asan_report_load8();
        v30 = *(_QWORD *)v29->baseclass_0 + 56LL;
        if ( *(_BYTE *)((v30 >> 3) + 0x7FFF8000) )
          __asan_report_load8();
        v31 = *(void (__fastcall **)(std::__shared_ptr_access<Gadget,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *, Scene *, VisionContext *))v30;
        if ( *(_BYTE *)(((unsigned __int64)&context->scene >> 3) + 0x7FFF8000) )
          __asan_report_load8();
        v31(v29, context->scene, &VisionContext::meet_context);
        v32 = std::__shared_ptr_access<Gadget,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Gadget,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 96));
        Creature::setIsCreatedByGm(v32, 1);
        std::__shared_ptr_access<Gadget,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Gadget,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 96));
        EcsBase<Gadget,GadgetCompBase,28u>::findComp<FishPoolComp>((const EcsBase<Gadget,GadgetCompBase,28> *const)(v4 + 128));
        if ( std::operator==<FishPoolComp>(0LL, (const std::shared_ptr<FishPoolComp> *)(v4 + 128)) )
        {
          common::milog::MiLogStream::create(
            &v68,
            &common::milog::MiLogDefault::default_log_obj_,
            3u,
            "./src/player/gm/player_gm_comp.cpp",
            "procFishing",
            16981);
          v33 = common::milog::MiLogStream::operator<<<char [18],(char *[18])0>(
                  &v68,
                  (const char (*)[18])"create gadget_id:");
          v34 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                  v33,
                  (const unsigned int *)(v4 + 64));
          common::milog::MiLogStream::operator<<<char [19],(char *[19])0>(v34, (const char (*)[19])off_26371880);
          common::milog::MiLogStream::~MiLogStream(&v68);
          v3 = -1;
          v60 = 0;
        }
        else
        {
          std::map<unsigned int,unsigned int>::map((std::map<unsigned int,unsigned int> *const)(v4 + 192));
          v35 = std::__shared_ptr_access<FishPoolComp,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<FishPoolComp,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 128));
          FishPoolComp::genFishByGm(v35, (std::map<unsigned int,unsigned int> *)(v4 + 192), *(_DWORD *)(v4 + 80));
          v36 = std::__shared_ptr_access<Gadget,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Gadget,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 96));
          if ( *(_BYTE *)(((unsigned __int64)v36 >> 3) + 0x7FFF8000) )
            __asan_report_load8();
          v37 = *(_QWORD *)v36->baseclass_0 + 128LL;
          if ( *(_BYTE *)((v37 >> 3) + 0x7FFF8000) )
            __asan_report_load8();
          (*(void (__fastcall **)(std::__shared_ptr_access<Gadget,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *, VisionContext *))v37)(
            v36,
            &VisionContext::miss_context);
          common::tools::StringStream<common::tools::FixedBuffer<4096>>::StringStream((common::tools::StringStream<common::tools::FixedBuffer<4096> > *const)(v4 + 160));
          v38 = common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(
                  (common::tools::StringStream<common::tools::FixedBuffer<4096> > *const)(v4 + 160),
                  off_263718C0);
          common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<<unsigned int,unsigned int>(
            v38,
            (const std::map<unsigned int,unsigned int> *)(v4 + 192));
          common::tools::StringStream<common::tools::FixedBuffer<4096>>::str[abi:cxx11](
            (std::string *)&v68,
            (common::tools::StringStream<common::tools::FixedBuffer<4096> > *const)(v4 + 160));
          std::string::operator=(ret_msg, &v68);
          std::string::~string(&v68);
          common::tools::StringStream<common::tools::FixedBuffer<4096>>::~StringStream((common::tools::StringStream<common::tools::FixedBuffer<4096> > *const)(v4 + 160));
          std::map<unsigned int,unsigned int>::~map((std::map<unsigned int,unsigned int> *const)(v4 + 192));
          v60 = 1;
        }
        std::shared_ptr<FishPoolComp>::~shared_ptr((std::shared_ptr<FishPoolComp> *const)(v4 + 128));
        v59 = v60 == 1;
      }
      std::shared_ptr<Gadget>::~shared_ptr((std::shared_ptr<Gadget> *const)(v4 + 96));
      GadgetParam::~GadgetParam((GadgetParam *const)(v4 + 272));
      if ( v59 )
        goto LABEL_88;
    }
    else
    {
      v39 = std::vector<std::string>::operator[](param_vec, 0LL);
      if ( !std::operator==<char>(v39, "CAST") )
      {
        *(_DWORD *)(v4 + 48) = 0;
        if ( std::vector<std::string>::size(param_vec) <= 1 )
        {
          common::milog::MiLogStream::create(
            &v68,
            &common::milog::MiLogDefault::default_log_obj_,
            3u,
            "./src/player/gm/player_gm_comp.cpp",
            "procFishing",
            17029);
          common::milog::MiLogStream::operator<<<char [17],(char *[17])0>(&v68, "param not enough");
          common::milog::MiLogStream::~MiLogStream(&v68);
          v3 = -1;
          goto LABEL_89;
        }
        v49 = std::vector<std::string>::operator[](param_vec, 1uLL);
        if ( common::tools::StringUtils::strToNum<unsigned int>(v49, (unsigned int *)(v4 + 48), 1) )
        {
          common::milog::MiLogStream::create(
            &v68,
            &common::milog::MiLogDefault::default_log_obj_,
            3u,
            "./src/player/gm/player_gm_comp.cpp",
            "procFishing",
            17034);
          v50 = common::milog::MiLogStream::operator<<<char [15],(char *[15])0>(
                  &v68,
                  (const char (*)[15])"invalid param:");
          common::milog::MiLogStream::operator<<<std::string>(v50, param_vec);
          common::milog::MiLogStream::~MiLogStream(&v68);
          v3 = -1;
          goto LABEL_89;
        }
        if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
          __asan_report_load8();
        EventComp = Player::getEventComp(context->player);
        *(_DWORD *)(v4 + 80) = 0;
        v67[0] = 0;
        v66 = 0;
        *(_DWORD *)(v4 + 64) = 0;
        common::tools::perf::make_shared<FishingSuccEvent,int,unsigned int &,bool,bool,int>(
          (int *)(v4 + 128),
          (unsigned int *)(v4 + 64),
          (bool *)(v4 + 48),
          &v66,
          (int *)v67,
          (int *)(v4 + 80),
          v53,
          v54,
          v56,
          (int *)ret_msg);
        std::shared_ptr<BaseEvent>::shared_ptr<FishingSuccEvent,void>(
          (std::shared_ptr<BaseEvent> *const)(v4 + 160),
          (std::shared_ptr<FishingSuccEvent> *)(v4 + 128));
        PlayerEventComp::notifyEvent(EventComp, (BaseEventPtr *)(v4 + 160));
        std::shared_ptr<BaseEvent>::~shared_ptr((std::shared_ptr<BaseEvent> *const)(v4 + 160));
        std::shared_ptr<FishingSuccEvent>::~shared_ptr((std::shared_ptr<FishingSuccEvent> *const)(v4 + 128));
        std::string::operator=(ret_msgb, "SUCC");
        goto LABEL_88;
      }
      *(_DWORD *)(v4 + 64) = 0;
      *(_DWORD *)(v4 + 80) = 0;
      if ( std::vector<std::string>::size(param_vec) <= 2 )
      {
        common::milog::MiLogStream::create(
          &v68,
          &common::milog::MiLogDefault::default_log_obj_,
          3u,
          "./src/player/gm/player_gm_comp.cpp",
          "procFishing",
          16997);
        common::milog::MiLogStream::operator<<<char [17],(char *[17])0>(&v68, "param not enough");
        common::milog::MiLogStream::~MiLogStream(&v68);
        v3 = -1;
        goto LABEL_89;
      }
      v40 = std::vector<std::string>::operator[](param_vec, 1uLL);
      if ( common::tools::StringUtils::strToNum<unsigned int>(v40, (unsigned int *)(v4 + 64), 1) )
      {
        common::milog::MiLogStream::create(
          &v68,
          &common::milog::MiLogDefault::default_log_obj_,
          3u,
          "./src/player/gm/player_gm_comp.cpp",
          "procFishing",
          17002);
        v41 = common::milog::MiLogStream::operator<<<char [15],(char *[15])0>(
                &v68,
                (const char (*)[15])"invalid param:");
        common::milog::MiLogStream::operator<<<std::string>(v41, param_vec);
        common::milog::MiLogStream::~MiLogStream(&v68);
        v3 = -1;
        goto LABEL_89;
      }
      v42 = std::vector<std::string>::operator[](param_vec, 2uLL);
      if ( common::tools::StringUtils::strToNum<unsigned int>(v42, (unsigned int *)(v4 + 80), 1) )
      {
        common::milog::MiLogStream::create(
          &v68,
          &common::milog::MiLogDefault::default_log_obj_,
          3u,
          "./src/player/gm/player_gm_comp.cpp",
          "procFishing",
          17007);
        v43 = common::milog::MiLogStream::operator<<<char [15],(char *[15])0>(
                &v68,
                (const char (*)[15])"invalid param:");
        common::milog::MiLogStream::operator<<<std::string>(v43, param_vec);
        common::milog::MiLogStream::~MiLogStream(&v68);
        v3 = -1;
        goto LABEL_89;
      }
      if ( *(_BYTE *)(((unsigned __int64)&context->scene >> 3) + 0x7FFF8000) )
        __asan_report_load8();
      Scene::findEntity<Gadget>((const Scene *const)(v4 + 128), (uint32_t)context->scene);
      if ( std::operator==<Gadget>(0LL, (const std::shared_ptr<Gadget> *)(v4 + 128)) )
      {
        common::milog::MiLogStream::create(
          &v68,
          &common::milog::MiLogDefault::default_log_obj_,
          3u,
          "./src/player/gm/player_gm_comp.cpp",
          "procFishing",
          17013);
        v44 = common::milog::MiLogStream::operator<<<char [11],(char *[11])0>(&v68, (const char (*)[11])"entity_id:");
        v45 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                v44,
                (const unsigned int *)(v4 + 64));
        common::milog::MiLogStream::operator<<<char [14],(char *[14])0>(v45, (const char (*)[14])off_26371940);
        common::milog::MiLogStream::~MiLogStream(&v68);
        v3 = -1;
        v61 = 0;
      }
      else
      {
        std::__shared_ptr_access<Gadget,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Gadget,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 128));
        EcsBase<Gadget,GadgetCompBase,28u>::findComp<FishPoolComp>((const EcsBase<Gadget,GadgetCompBase,28> *const)(v4 + 160));
        if ( std::operator==<FishPoolComp>(0LL, (const std::shared_ptr<FishPoolComp> *)(v4 + 160)) )
        {
          common::milog::MiLogStream::create(
            &v68,
            &common::milog::MiLogDefault::default_log_obj_,
            3u,
            "./src/player/gm/player_gm_comp.cpp",
            "procFishing",
            17019);
          v46 = common::milog::MiLogStream::operator<<<char [11],(char *[11])0>(&v68, (const char (*)[11])"entity_id:");
          v47 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                  v46,
                  (const unsigned int *)(v4 + 64));
          common::milog::MiLogStream::operator<<<char [18],(char *[18])0>(v47, (const char (*)[18])off_26371800);
          common::milog::MiLogStream::~MiLogStream(&v68);
          v3 = -1;
          v62 = 0;
        }
        else
        {
          v63 = std::__shared_ptr_access<FishPoolComp,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<FishPoolComp,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 160));
          bait_id = *(_DWORD *)(v4 + 80);
          if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
            __asan_report_load8();
          Uid = Player::getUid(context->player);
          FishPoolComp::castRodByGm(v63, Uid, bait_id);
          v62 = 1;
        }
        std::shared_ptr<FishPoolComp>::~shared_ptr((std::shared_ptr<FishPoolComp> *const)(v4 + 160));
        v61 = v62 == 1;
      }
      std::shared_ptr<Gadget>::~shared_ptr((std::shared_ptr<Gadget> *const)(v4 + 128));
      if ( v61 )
LABEL_88:
        v3 = 0;
    }
  }
LABEL_89:
  if ( v69 == (char *)v4 )
  {
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8008) = 0LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8010) = 0LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF801C) = 0LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8088) = 0LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8090) = 0LL;
  }
  else
  {
    *(_QWORD *)v4 = 1172321806LL;
    __asan_stack_free_5(v4, 1216LL, v69);
  }
  return v3;
};

// Line 17044: range 0000000017D7D0BC-0000000017D7D15E
void __cdecl procCompoundRegister::procCompoundRegister(procCompoundRegister *const this)
{
  std::function<int(GmContext&,const std::vector<std::string>&,std::string&)> *v1; // rax
  std::allocator<char> __a; // [rsp+1Fh] [rbp-31h] BYREF
  std::string __k; // [rsp+20h] [rbp-30h] BYREF

  std::allocator<char>::allocator(&__a);
  std::string::basic_string<std::allocator<char>>(&__k, "COMPOUND", &__a);
  v1 = std::unordered_map<std::string,std::function<int ()(GmContext &,std::vector<std::string> const&,std::string&)>>::operator[](
         &GmUtils::op_func_map[abi:cxx11],
         &__k);
  std::function<int ()(GmContext &,std::vector<std::string> const&,std::string&)>::operator=<int (&)(GmContext &,std::vector<std::string> const&,std::string&)>(
    v1,
    (int (*)(GmContext *, const std::vector<std::string> *, std::string *))procCompound);
  std::string::~string(&__k);
  std::allocator<char>::~allocator(&__a);
};

// Line 17045: range 0000000017C459FA-0000000017C45EE8
int32_t __cdecl procCompound(GmContext *context, const std::vector<std::string> *param_vec, std::string *ret_msg)
{
  int32_t v3; // r14d
  unsigned __int64 v4; // rbx
  __int64 v5; // rax
  _DWORD *v6; // r13
  const std::string *v7; // rax
  const std::string *v8; // rax
  bool *p_is_default_unlocked; // rax
  int v11; // r15d
  __gnu_cxx::__normal_iterator<unsigned int*,std::vector<unsigned int> >::reference v12; // rax
  uint32_t *v13; // rdx
  PlayerCookComp *CookComp; // rax
  int32_t result; // eax
  uint32_t compound_id; // [rsp+24h] [rbp-FCh]
  std::unordered_map<unsigned int,data::CompoundExcelConfig>::const_iterator __for_begin; // [rsp+28h] [rbp-F8h] BYREF
  std::unordered_map<unsigned int,data::CompoundExcelConfig>::const_iterator __for_end; // [rsp+30h] [rbp-F0h] BYREF
  const std::unordered_map<unsigned int,data::CompoundExcelConfig> *__for_range; // [rsp+38h] [rbp-E8h]
  const std::pair<unsigned int const,data::CompoundExcelConfig> *v21; // [rsp+40h] [rbp-E0h]
  std::tuple_element<0,const std::pair<unsigned int const,data::CompoundExcelConfig> >::type *_; // [rsp+48h] [rbp-D8h]
  std::tuple_element<1,const std::pair<unsigned int const,data::CompoundExcelConfig> >::type *config; // [rsp+50h] [rbp-D0h]
  std::vector<unsigned int> *__for_range_0; // [rsp+58h] [rbp-C8h]
  std::shared_ptr<Config> v25; // [rsp+60h] [rbp-C0h] BYREF
  char v26[176]; // [rsp+70h] [rbp-B0h] BYREF

  v4 = (unsigned __int64)v26;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v5 = __asan_stack_malloc_1(128LL);
    if ( v5 )
      v4 = v5;
  }
  *(_QWORD *)v4 = 1102416563LL;
  *(_QWORD *)(v4 + 8) = "2 48 4 17 compound_id:17066 64 24 21 compound_id_vec:17053";
  *(_QWORD *)(v4 + 16) = procCompound;
  v6 = (_DWORD *)(v4 >> 3);
  v6[536862720] = -235802127;
  v6[536862721] = -234556943;
  v6[536862722] = -218103808;
  v6[536862723] = -202116109;
  if ( std::vector<std::string>::empty(param_vec) )
  {
    std::string::operator=(ret_msg, "no param found!");
    v3 = -1;
    goto LABEL_33;
  }
  v7 = std::vector<std::string>::operator[](param_vec, 0LL);
  if ( !std::operator==<char>(v7, "UNLOCK") )
  {
    std::string::operator=(ret_msg, "unknown param!");
    v3 = -1;
    goto LABEL_33;
  }
  std::vector<unsigned int>::vector((std::vector<unsigned int> *const)(v4 + 64));
  if ( std::vector<std::string>::size(param_vec) > 1
    && (v8 = std::vector<std::string>::operator[](param_vec, 1uLL), std::operator==<char>(v8, _f.gap0)) )
  {
    ServiceBox::findService<GameserverService>();
    GameserverService::getConfig((GameserverService *const)&v25);
    __for_range = &std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false> *const)&v25)->design_config.txt_config_mgr.compound_config_mgr.compound_excel_config_map;
    std::shared_ptr<Config>::~shared_ptr(&v25);
    __for_begin._M_cur = std::unordered_map<unsigned int,data::CompoundExcelConfig>::begin(__for_range)._M_cur;
    __for_end._M_cur = std::unordered_map<unsigned int,data::CompoundExcelConfig>::end(__for_range)._M_cur;
    while ( std::__detail::operator!=<std::pair<unsigned int const,data::CompoundExcelConfig>,false>(
              &__for_begin,
              &__for_end) )
    {
      v21 = std::__detail::_Node_const_iterator<std::pair<unsigned int const,data::CompoundExcelConfig>,false,false>::operator*(&__for_begin);
      _ = std::get<0ul,unsigned int const,data::CompoundExcelConfig>(v21);
      config = (std::tuple_element<1,const std::pair<unsigned int const,data::CompoundExcelConfig> >::type *)std::get<1ul,unsigned int const,data::CompoundExcelConfig>(v21);
      p_is_default_unlocked = &config->is_default_unlocked;
      if ( *(_BYTE *)(((unsigned __int64)p_is_default_unlocked >> 3) + 0x7FFF8000) != 0
        && ((unsigned __int8)p_is_default_unlocked & 7) >= *(_BYTE *)(((unsigned __int64)p_is_default_unlocked >> 3)
                                                                    + 0x7FFF8000) )
      {
        __asan_report_load1(p_is_default_unlocked);
      }
      if ( !config->is_default_unlocked )
        std::vector<unsigned int>::push_back((std::vector<unsigned int> *const)(v4 + 64), &config->id);
      std::__detail::_Node_const_iterator<std::pair<unsigned int const,data::CompoundExcelConfig>,false,false>::operator++(&__for_begin);
    }
  }
  else
  {
    *(_DWORD *)(v4 + 48) = 0;
    if ( common::tools::StringUtils::strVecToNum<1u,unsigned int>(param_vec, (unsigned int *)(v4 + 48)) )
    {
      std::string::operator=(ret_msg, "parse compound_id fail");
      v3 = -1;
      v11 = 0;
      goto LABEL_30;
    }
    std::vector<unsigned int>::push_back(
      (std::vector<unsigned int> *const)(v4 + 64),
      (const std::vector<unsigned int>::value_type *)(v4 + 48));
  }
  __for_range_0 = (std::vector<unsigned int> *)(v4 + 64);
  __for_begin._M_cur = (std::__detail::_Node_iterator_base<std::pair<unsigned int const,data::CompoundExcelConfig>,false>::__node_type *)std::vector<unsigned int>::begin((std::vector<unsigned int> *const)(v4 + 64))._M_current;
  __for_end._M_cur = (std::__detail::_Node_iterator_base<std::pair<unsigned int const,data::CompoundExcelConfig>,false>::__node_type *)std::vector<unsigned int>::end(__for_range_0)._M_current;
  while ( __gnu_cxx::operator!=<unsigned int *,std::vector<unsigned int>>(
            (const __gnu_cxx::__normal_iterator<unsigned int*,std::vector<unsigned int> > *)&__for_begin,
            (const __gnu_cxx::__normal_iterator<unsigned int*,std::vector<unsigned int> > *)&__for_end) )
  {
    v12 = __gnu_cxx::__normal_iterator<unsigned int *,std::vector<unsigned int>>::operator*((const __gnu_cxx::__normal_iterator<unsigned int*,std::vector<unsigned int> > *const)&__for_begin);
    v13 = v12;
    if ( *(_BYTE *)(((unsigned __int64)v12 >> 3) + 0x7FFF8000) != 0
      && (char)(((unsigned __int8)v12 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)v12 >> 3) + 0x7FFF8000) )
    {
      __asan_report_load4(v12);
    }
    compound_id = *v13;
    if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
      __asan_report_load8();
    CookComp = Player::getCookComp(context->player);
    PlayerCookComp::unlockCompoundId(CookComp, compound_id);
    __gnu_cxx::__normal_iterator<unsigned int *,std::vector<unsigned int>>::operator++((__gnu_cxx::__normal_iterator<unsigned int*,std::vector<unsigned int> > *const)&__for_begin);
  }
  v11 = 1;
LABEL_30:
  std::vector<unsigned int>::~vector((std::vector<unsigned int> *const)(v4 + 64));
  if ( v11 == 1 )
    v3 = 0;
LABEL_33:
  result = v3;
  if ( v26 == (char *)v4 )
  {
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v4 = 1172321806LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 17087: range 0000000017D7D160-0000000017D7D202
void __cdecl procExtraPropRegister::procExtraPropRegister(procExtraPropRegister *const this)
{
  std::function<int(GmContext&,const std::vector<std::string>&,std::string&)> *v1; // rax
  std::allocator<char> __a; // [rsp+1Fh] [rbp-31h] BYREF
  std::string __k; // [rsp+20h] [rbp-30h] BYREF

  std::allocator<char>::allocator(&__a);
  std::string::basic_string<std::allocator<char>>(&__k, "EXTRA_PROP", &__a);
  v1 = std::unordered_map<std::string,std::function<int ()(GmContext &,std::vector<std::string> const&,std::string&)>>::operator[](
         &GmUtils::op_func_map[abi:cxx11],
         &__k);
  std::function<int ()(GmContext &,std::vector<std::string> const&,std::string&)>::operator=<int (&)(GmContext &,std::vector<std::string> const&,std::string&)>(
    v1,
    (int (*)(GmContext *, const std::vector<std::string> *, std::string *))procExtraProp);
  std::string::~string(&__k);
  std::allocator<char>::~allocator(&__a);
};

// Line 17088: range 0000000017C45EE9-0000000017C4661C
int32_t __cdecl procExtraProp(GmContext *context, const std::vector<std::string> *param_vec, std::string *ret_msg)
{
  unsigned __int64 v3; // r12
  __int64 v4; // rax
  _DWORD *v5; // r13
  int32_t v6; // r14d
  const std::string *v7; // rax
  uint32_t AvatarComp; // eax
  std::__shared_ptr_access<FormalAvatar,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v9; // rax
  ExtraPropComp *ExtraPropComp; // rax
  const std::string *v11; // rax
  uint32_t v12; // eax
  std::__shared_ptr_access<FormalAvatar,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v13; // rax
  ExtraPropComp *v14; // rax
  const std::string *v15; // rax
  uint32_t v16; // eax
  std::__shared_ptr_access<FormalAvatar,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v17; // rax
  ExtraPropComp *v18; // rax
  int32_t result; // eax
  char v21[176]; // [rsp+20h] [rbp-B0h] BYREF

  v3 = (unsigned __int64)v21;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_1(128LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "4 48 4 15 avatar_id:17138 64 4 19 extra_prop_id:17144 80 4 15 avatar_id:17172 96 16 16 avatar_ptr:17178";
  *(_QWORD *)(v3 + 16) = procExtraProp;
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = -234556943;
  v5[536862722] = -234556924;
  v5[536862723] = -202178560;
  if ( std::vector<std::string>::empty(param_vec) )
  {
    std::string::operator=(ret_msg, "no param");
    v6 = -1;
    goto LABEL_42;
  }
  v7 = std::vector<std::string>::operator[](param_vec, 0LL);
  if ( std::operator==<char>(v7, off_26356D00) )
  {
    if ( std::vector<std::string>::size(param_vec) <= 2 )
      goto LABEL_32;
    *(_DWORD *)(v3 + 48) = 0;
    if ( common::tools::StringUtils::strVecToNum<1u,unsigned int>(param_vec, (unsigned int *)(v3 + 48)) )
      goto LABEL_34;
    *(_DWORD *)(v3 + 64) = 0;
    if ( common::tools::StringUtils::strVecToNum<2u,unsigned int>(param_vec, (unsigned int *)(v3 + 64)) )
      goto LABEL_12;
    *(_DWORD *)(v3 + 80) = 1;
    if ( std::vector<std::string>::size(param_vec) > 3
      && common::tools::StringUtils::strVecToNum<3u,unsigned int>(param_vec, (unsigned int *)(v3 + 80)) )
    {
      goto LABEL_15;
    }
    if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
      __asan_report_load8();
    AvatarComp = (unsigned int)Player::getAvatarComp(context->player);
    PlayerAvatarComp::findFormalAvatarByAvatarId((const PlayerAvatarComp *const)(v3 + 96), AvatarComp);
    if ( !std::operator==<FormalAvatar>((const std::shared_ptr<FormalAvatar> *)(v3 + 96), 0LL) )
    {
      v9 = std::__shared_ptr_access<FormalAvatar,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<FormalAvatar,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 96));
      ExtraPropComp = Avatar::getExtraPropComp(v9);
      ExtraPropComp::addExtraProp(
        ExtraPropComp,
        *(_DWORD *)(v3 + 64),
        *(_DWORD *)(v3 + 80),
        CHANGE_AVATAR_EXTRA_PROP_REASON_GM);
      v6 = 0;
LABEL_40:
      std::shared_ptr<FormalAvatar>::~shared_ptr((std::shared_ptr<FormalAvatar> *const)(v3 + 96));
      goto LABEL_42;
    }
LABEL_28:
    std::string::operator=(ret_msg, "find avatar fail.");
    v6 = -1;
    goto LABEL_40;
  }
  v11 = std::vector<std::string>::operator[](param_vec, 0LL);
  if ( std::operator==<char>(v11, off_26352320) )
  {
    if ( std::vector<std::string>::size(param_vec) <= 3 )
      goto LABEL_32;
    *(_DWORD *)(v3 + 48) = 0;
    if ( common::tools::StringUtils::strVecToNum<1u,unsigned int>(param_vec, (unsigned int *)(v3 + 48)) )
    {
LABEL_34:
      std::string::operator=(ret_msg, "parse avatar_id fail");
      v6 = -1;
      goto LABEL_42;
    }
    *(_DWORD *)(v3 + 64) = 0;
    if ( common::tools::StringUtils::strVecToNum<2u,unsigned int>(param_vec, (unsigned int *)(v3 + 64)) )
    {
LABEL_12:
      std::string::operator=(ret_msg, "parse extra_prop_id fail");
      v6 = -1;
      goto LABEL_42;
    }
    *(_DWORD *)(v3 + 80) = 0;
    if ( common::tools::StringUtils::strVecToNum<3u,unsigned int>(param_vec, (unsigned int *)(v3 + 80)) )
    {
LABEL_15:
      std::string::operator=(ret_msg, "parse add_count fail");
      v6 = -1;
      goto LABEL_42;
    }
    if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
      __asan_report_load8();
    v12 = (unsigned int)Player::getAvatarComp(context->player);
    PlayerAvatarComp::findFormalAvatarByAvatarId((const PlayerAvatarComp *const)(v3 + 96), v12);
    if ( !std::operator==<FormalAvatar>((const std::shared_ptr<FormalAvatar> *)(v3 + 96), 0LL) )
    {
      v13 = std::__shared_ptr_access<FormalAvatar,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<FormalAvatar,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 96));
      v14 = Avatar::getExtraPropComp(v13);
      ExtraPropComp::setExtraProp(v14, *(_DWORD *)(v3 + 64), *(_DWORD *)(v3 + 80), CHANGE_AVATAR_EXTRA_PROP_REASON_GM);
      v6 = 0;
      goto LABEL_40;
    }
    goto LABEL_28;
  }
  v15 = std::vector<std::string>::operator[](param_vec, 0LL);
  if ( std::operator==<char>(v15, "CLEAR") )
  {
    if ( std::vector<std::string>::size(param_vec) <= 1 )
    {
LABEL_32:
      std::string::operator=(ret_msg, "param not enough");
      v6 = -1;
      goto LABEL_42;
    }
    *(_DWORD *)(v3 + 80) = 0;
    if ( common::tools::StringUtils::strVecToNum<1u,unsigned int>(param_vec, (unsigned int *)(v3 + 80)) )
      goto LABEL_34;
    if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
      __asan_report_load8();
    v16 = (unsigned int)Player::getAvatarComp(context->player);
    PlayerAvatarComp::findFormalAvatarByAvatarId((const PlayerAvatarComp *const)(v3 + 96), v16);
    if ( !std::operator==<FormalAvatar>((const std::shared_ptr<FormalAvatar> *)(v3 + 96), 0LL) )
    {
      v17 = std::__shared_ptr_access<FormalAvatar,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<FormalAvatar,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 96));
      v18 = Avatar::getExtraPropComp(v17);
      ExtraPropComp::clearExtraPropByGM(v18);
      v6 = 0;
      goto LABEL_40;
    }
    goto LABEL_28;
  }
  std::string::operator=(ret_msg, "unknown param");
  v6 = -1;
LABEL_42:
  result = v6;
  if ( v21 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 17195: range 0000000017D7D204-0000000017D7D2A6
void __cdecl procMusicGameActivityRegister::procMusicGameActivityRegister(procMusicGameActivityRegister *const this)
{
  std::function<int(GmContext&,const std::vector<std::string>&,std::string&)> *v1; // rax
  std::allocator<char> __a; // [rsp+1Fh] [rbp-31h] BYREF
  std::string __k; // [rsp+20h] [rbp-30h] BYREF

  std::allocator<char>::allocator(&__a);
  std::string::basic_string<std::allocator<char>>(&__k, "MUSIC_GAME_ACTIVITY", &__a);
  v1 = std::unordered_map<std::string,std::function<int ()(GmContext &,std::vector<std::string> const&,std::string&)>>::operator[](
         &GmUtils::op_func_map[abi:cxx11],
         &__k);
  std::function<int ()(GmContext &,std::vector<std::string> const&,std::string&)>::operator=<int (&)(GmContext &,std::vector<std::string> const&,std::string&)>(
    v1,
    (int (*)(GmContext *, const std::vector<std::string> *, std::string *))procMusicGameActivity);
  std::string::~string(&__k);
  std::allocator<char>::~allocator(&__a);
};

// Line 17196: range 0000000017C4661D-0000000017C46C08
int32_t __cdecl procMusicGameActivity(
        GmContext *context,
        const std::vector<std::string> *param_vec,
        std::string *ret_msg)
{
  int32_t v3; // r14d
  unsigned __int64 v4; // r13
  __int64 v5; // rax
  _DWORD *v6; // r12
  const std::string *v7; // rax
  MusicGameActivity *v8; // rax
  const std::string *v9; // rax
  std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v10; // rax
  std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v11; // rax
  bool v12; // r15
  int v13; // r15d
  __gnu_cxx::__normal_iterator<unsigned int*,std::vector<unsigned int> >::reference v14; // rax
  _DWORD *v15; // rdx
  char *v16; // rsi
  std::map<unsigned int,MusicGameRecord>::mapped_type *v17; // rdx
  char v18; // cl
  std::__shared_ptr_access<MusicGameActivity,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v19; // rax
  int32_t result; // eax
  std::vector<unsigned int>::iterator __for_begin; // [rsp+30h] [rbp-120h] BYREF
  std::vector<unsigned int>::iterator __for_end; // [rsp+38h] [rbp-118h] BYREF
  std::map<unsigned int,MusicGameRecord> *record_map; // [rsp+40h] [rbp-110h]
  std::vector<unsigned int> *__for_range; // [rsp+48h] [rbp-108h]
  std::shared_ptr<Config> v26; // [rsp+50h] [rbp-100h] BYREF
  std::vector<unsigned int> __x; // [rsp+60h] [rbp-F0h] BYREF
  char v28[208]; // [rsp+80h] [rbp-D0h] BYREF

  v4 = (unsigned __int64)v28;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v5 = __asan_stack_malloc_2(160LL);
    if ( v5 )
      v4 = v5;
  }
  *(_QWORD *)v4 = 1102416563LL;
  *(_QWORD *)(v4 + 8) = "3 48 4 8 id:17223 64 16 18 activity_ptr:17197 96 24 12 id_vec:17216";
  *(_QWORD *)(v4 + 16) = procMusicGameActivity;
  v6 = (_DWORD *)(v4 >> 3);
  v6[536862720] = -235802127;
  v6[536862721] = -234556943;
  v6[536862722] = -219021312;
  v6[536862723] = -218103808;
  v6[536862724] = -202116109;
  if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
    __asan_report_load8();
  Player::getActivityComp(context->player);
  PlayerActivityComp::findOpenningActivity<MusicGameActivity>((PlayerActivityComp *const)(v4 + 64));
  if ( std::operator==<MusicGameActivity>(0LL, (const std::shared_ptr<MusicGameActivity> *)(v4 + 64)) )
  {
    std::string::operator=(ret_msg, "activity is not open");
    v3 = -1;
    goto LABEL_32;
  }
  if ( std::vector<std::string>::empty(param_vec) )
  {
    std::string::operator=(ret_msg, "no param");
    v3 = -1;
    goto LABEL_32;
  }
  v7 = std::vector<std::string>::operator[](param_vec, 0LL);
  if ( !std::operator==<char>(v7, "UNLOCK") )
  {
    std::string::operator=(ret_msg, "unknown param");
    v3 = -1;
    goto LABEL_32;
  }
  v8 = std::__shared_ptr_access<MusicGameActivity,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<MusicGameActivity,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 64));
  record_map = MusicGameActivity::getMusicGameRecordMapByGm(v8);
  if ( std::vector<std::string>::size(param_vec) <= 1 )
  {
    std::string::operator=(ret_msg, "param not enough");
    v3 = -1;
    goto LABEL_32;
  }
  std::vector<unsigned int>::vector((std::vector<unsigned int> *const)(v4 + 96));
  v9 = std::vector<std::string>::operator[](param_vec, 1uLL);
  if ( std::operator==<char>(v9, _f.gap0) )
  {
    ServiceBox::findService<GameserverService>();
    GameserverService::getConfig((GameserverService *const)&v26);
    v10 = std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false> *const)&v26);
    common::tools::MiscUtils::getAllMapKeys<std::unordered_map<unsigned int,data::MusicGameBasicConfig>>(
      &__x,
      &v10->design_config.txt_config_mgr.activity_music_game_config_mgr.music_game_basic_config_map);
    std::vector<unsigned int>::operator=((std::vector<unsigned int> *const)(v4 + 96), &__x);
    std::vector<unsigned int>::~vector(&__x);
    std::shared_ptr<Config>::~shared_ptr(&v26);
    goto LABEL_21;
  }
  *(_DWORD *)(v4 + 48) = 0;
  if ( common::tools::StringUtils::strVecToNum<1u,unsigned int>(param_vec, (unsigned int *)(v4 + 48)) )
  {
    std::string::operator=(ret_msg, "parse id fail");
    v3 = -1;
LABEL_20:
    v13 = 0;
    goto LABEL_29;
  }
  ServiceBox::findService<GameserverService>();
  GameserverService::getConfig((GameserverService *const)&v26);
  v11 = std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false> *const)&v26);
  v12 = !common::tools::MiscUtils::isContains<std::unordered_map<unsigned int,data::MusicGameBasicConfig> const,unsigned int>(
           &v11->design_config.txt_config_mgr.activity_music_game_config_mgr.music_game_basic_config_map,
           (const unsigned int *)(v4 + 48));
  std::shared_ptr<Config>::~shared_ptr(&v26);
  if ( v12 )
  {
    std::string::operator=(ret_msg, "invalid id");
    v3 = -1;
    goto LABEL_20;
  }
  std::vector<unsigned int>::push_back(
    (std::vector<unsigned int> *const)(v4 + 96),
    (const std::vector<unsigned int>::value_type *)(v4 + 48));
LABEL_21:
  __for_range = (std::vector<unsigned int> *)(v4 + 96);
  __for_begin._M_current = std::vector<unsigned int>::begin((std::vector<unsigned int> *const)(v4 + 96))._M_current;
  __for_end._M_current = std::vector<unsigned int>::end((std::vector<unsigned int> *const)(v4 + 96))._M_current;
  while ( __gnu_cxx::operator!=<unsigned int *,std::vector<unsigned int>>(&__for_begin, &__for_end) )
  {
    v14 = __gnu_cxx::__normal_iterator<unsigned int *,std::vector<unsigned int>>::operator*(&__for_begin);
    v15 = v14;
    if ( *(_BYTE *)(((unsigned __int64)v14 >> 3) + 0x7FFF8000) != 0
      && (char)(((unsigned __int8)v14 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)v14 >> 3) + 0x7FFF8000) )
    {
      __asan_report_load4(v14);
    }
    *(_DWORD *)(v4 + 48) = *v15;
    v16 = (char *)(v4 + 48);
    v17 = std::map<unsigned int,MusicGameRecord>::operator[](
            record_map,
            (std::map<unsigned int,MusicGameRecord>::key_type *)(v4 + 48));
    v18 = *(_BYTE *)(((unsigned __int64)&v17->is_unlock >> 3) + 0x7FFF8000);
    if ( v18 != 0 && (((unsigned __int8)v17 + 8) & 7) >= v18 )
    {
      LOBYTE(v16) = v18 != 0;
      __asan_report_store1(&v17->is_unlock, v16, v17);
    }
    v17->is_unlock = 1;
    __gnu_cxx::__normal_iterator<unsigned int *,std::vector<unsigned int>>::operator++(&__for_begin);
  }
  v19 = std::__shared_ptr_access<MusicGameActivity,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<MusicGameActivity,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 64));
  BaseActivity::notifyClientData(v19, 0);
  v13 = 1;
LABEL_29:
  std::vector<unsigned int>::~vector((std::vector<unsigned int> *const)(v4 + 96));
  if ( v13 == 1 )
    v3 = 0;
LABEL_32:
  std::shared_ptr<MusicGameActivity>::~shared_ptr((std::shared_ptr<MusicGameActivity> *const)(v4 + 64));
  result = v3;
  if ( v28 == (char *)v4 )
  {
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8008) = 0LL;
    *(_DWORD *)((v4 >> 3) + 0x7FFF8010) = 0;
  }
  else
  {
    *(_QWORD *)v4 = 1172321806LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v4 >> 3) + 0x7FFF8010) = -168430091;
  }
  return result;
};

// Line 17250: range 0000000017D7D2A8-0000000017D7D34A
void __cdecl procMoonfinTrialActivityRegister::procMoonfinTrialActivityRegister(
        procMoonfinTrialActivityRegister *const this)
{
  std::function<int(GmContext&,const std::vector<std::string>&,std::string&)> *v1; // rax
  std::allocator<char> __a; // [rsp+1Fh] [rbp-31h] BYREF
  std::string __k; // [rsp+20h] [rbp-30h] BYREF

  std::allocator<char>::allocator(&__a);
  std::string::basic_string<std::allocator<char>>(&__k, "MOONFIN_TRIAL_ACTIVITY", &__a);
  v1 = std::unordered_map<std::string,std::function<int ()(GmContext &,std::vector<std::string> const&,std::string&)>>::operator[](
         &GmUtils::op_func_map[abi:cxx11],
         &__k);
  std::function<int ()(GmContext &,std::vector<std::string> const&,std::string&)>::operator=<int (&)(GmContext &,std::vector<std::string> const&,std::string&)>(
    v1,
    (int (*)(GmContext *, const std::vector<std::string> *, std::string *))procMoonfinTrialActivity);
  std::string::~string(&__k);
  std::allocator<char>::~allocator(&__a);
};

// Line 17251: range 0000000017C46C09-0000000017C46ED0
int32_t __cdecl procMoonfinTrialActivity(
        GmContext *context,
        const std::vector<std::string> *param_vec,
        std::string *ret_msg)
{
  unsigned __int64 v3; // rbx
  __int64 v4; // rax
  _DWORD *v5; // r12
  int32_t v6; // r14d
  const std::string *v7; // rax
  const std::string *v8; // rax
  std::__shared_ptr_access<MoonfinTrialActivity,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v9; // rax
  int32_t result; // eax
  char v12[144]; // [rsp+20h] [rbp-90h] BYREF

  v3 = (unsigned __int64)v12;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_1(96LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "2 48 4 25 activity_fish_count:17271 64 16 18 activity_ptr:17252";
  *(_QWORD *)(v3 + 16) = procMoonfinTrialActivity;
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = -234556943;
  v5[536862722] = -202178560;
  if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
    __asan_report_load8();
  Player::getActivityComp(context->player);
  PlayerActivityComp::findOpenningActivity<MoonfinTrialActivity>((PlayerActivityComp *const)(v3 + 64));
  if ( std::operator==<MoonfinTrialActivity>(0LL, (const std::shared_ptr<MoonfinTrialActivity> *)(v3 + 64)) )
  {
    std::string::operator=(ret_msg, "activity is not open");
    v6 = -1;
    goto LABEL_16;
  }
  if ( !std::vector<std::string>::size(param_vec) )
    goto LABEL_9;
  v7 = std::vector<std::string>::operator[](param_vec, 0LL);
  if ( std::operator==<char>(v7, "ACTIVITY_FISH_COUNT") )
  {
    if ( std::vector<std::string>::size(param_vec) > 1 )
    {
      *(_DWORD *)(v3 + 48) = 0;
      v8 = std::vector<std::string>::operator[](param_vec, 1uLL);
      if ( common::tools::StringUtils::strToNum<unsigned int>(v8, (unsigned int *)(v3 + 48), 1) )
      {
        std::string::operator=(ret_msg, "strToNum failed");
        v6 = -1;
      }
      else
      {
        v9 = std::__shared_ptr_access<MoonfinTrialActivity,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<MoonfinTrialActivity,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 64));
        v6 = MoonfinTrialActivity::setActivityFishCountByGM(v9, *(_DWORD *)(v3 + 48));
      }
      goto LABEL_16;
    }
LABEL_9:
    std::string::operator=(ret_msg, "param not enough");
    v6 = -1;
    goto LABEL_16;
  }
  v6 = 0;
LABEL_16:
  std::shared_ptr<MoonfinTrialActivity>::~shared_ptr((std::shared_ptr<MoonfinTrialActivity> *const)(v3 + 64));
  result = v6;
  if ( v12 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8008) = 0;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8008) = -168430091;
  }
  return result;
};

// Line 17282: range 0000000017D7D34C-0000000017D7D3EE
void __cdecl procRogueDiaryActivityRegister::procRogueDiaryActivityRegister(procRogueDiaryActivityRegister *const this)
{
  std::function<int(GmContext&,const std::vector<std::string>&,std::string&)> *v1; // rax
  std::allocator<char> __a; // [rsp+1Fh] [rbp-31h] BYREF
  std::string __k; // [rsp+20h] [rbp-30h] BYREF

  std::allocator<char>::allocator(&__a);
  std::string::basic_string<std::allocator<char>>(&__k, "ROGUEDIARY", &__a);
  v1 = std::unordered_map<std::string,std::function<int ()(GmContext &,std::vector<std::string> const&,std::string&)>>::operator[](
         &GmUtils::op_func_map[abi:cxx11],
         &__k);
  std::function<int ()(GmContext &,std::vector<std::string> const&,std::string&)>::operator=<int (&)(GmContext &,std::vector<std::string> const&,std::string&)>(
    v1,
    (int (*)(GmContext *, const std::vector<std::string> *, std::string *))procRogueDiaryActivity);
  std::string::~string(&__k);
  std::allocator<char>::~allocator(&__a);
};

// Line 17283: range 0000000017C46ED1-0000000017C47973
int32_t __cdecl procRogueDiaryActivity(
        GmContext *context,
        const std::vector<std::string> *param_vec,
        std::string *ret_msg)
{
  unsigned __int64 v3; // r14
  __int64 v4; // rax
  _DWORD *v5; // r13
  std::__shared_ptr_access<RogueDiaryActivity,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v6; // rax
  int32_t started; // r12d
  const std::string *v9; // rax
  RogueDiaryActivity *v10; // rax
  RogueDiaryRuntimeMgr *RuntimeMgr; // rax
  const std::string *v12; // rax
  RogueDiaryActivity *v13; // rax
  RogueDiaryRuntimeMgr *v14; // rax
  const std::string *v15; // rax
  RogueDiaryActivity *v16; // rax
  const std::string *v17; // rax
  RogueDiaryActivity *v18; // rax
  const std::string *v19; // rax
  RogueDiaryActivity *v20; // rax
  const std::string *v21; // rax
  RogueDiaryActivity *v22; // rax
  RogueDiaryRuntimeMgr *v23; // rax
  const std::string *v24; // rax
  RogueDiaryActivity *v25; // rax
  RogueDiaryRuntimeMgr *v26; // rax
  const std::string *v27; // rax
  RogueDiaryActivity *v28; // rax
  const std::string *v29; // rax
  RogueDiaryActivity *v30; // rax
  RogueDiaryRuntimeMgr *v31; // rax
  const std::string *v32; // rax
  const std::string *v33; // rax
  bool v34; // r12
  common::milog::MiLogStream *v35; // rdx
  RogueDiaryActivity *v36; // rax
  RogueDiaryRuntimeMgr *v37; // rax
  const std::string *v38; // rax
  const std::string *v39; // rax
  bool v40; // r12
  common::milog::MiLogStream *v41; // rdx
  RogueDiaryActivity *v42; // rax
  RogueDiaryRuntimeMgr *v43; // rax
  const std::string *v44; // rax
  const std::string *v45; // rax
  common::milog::MiLogStream *v46; // r12
  const std::string *v47; // rax
  RogueDiaryActivity *v48; // rax
  int32_t result; // eax
  std::allocator<char> __a; // [rsp+2Eh] [rbp-F2h] BYREF
  bool is_content_closed; // [rsp+2Fh] [rbp-F1h]
  std::string sep; // [rsp+30h] [rbp-F0h] BYREF
  char v54[208]; // [rsp+50h] [rbp-D0h] BYREF

  v3 = (unsigned __int64)v54;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_2(160LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "3 48 4 9 num:17370 64 16 18 activity_ptr:17284 96 24 17 room_id_vec:17355";
  *(_QWORD *)(v3 + 16) = procRogueDiaryActivity;
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = -234556943;
  v5[536862722] = -219021312;
  v5[536862723] = -218103808;
  v5[536862724] = -202116109;
  if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
    __asan_report_load8();
  Player::getActivityComp(context->player);
  PlayerActivityComp::findOpenningActivity<RogueDiaryActivity>((PlayerActivityComp *const)(v3 + 64));
  if ( std::operator==<RogueDiaryActivity>(0LL, (const std::shared_ptr<RogueDiaryActivity> *)(v3 + 64))
    || (v6 = std::__shared_ptr_access<RogueDiaryActivity,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<RogueDiaryActivity,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 64)),
        !BaseActivity::isOpening(v6, 0)) )
  {
    std::string::operator=(ret_msg, "activity is not open");
    started = 860;
    goto LABEL_51;
  }
  if ( !std::vector<std::string>::size(param_vec) )
    goto LABEL_40;
  v9 = std::vector<std::string>::operator[](param_vec, 0LL);
  if ( std::operator==<char>(v9, "FIGHT") )
  {
    v10 = std::__shared_ptr_access<RogueDiaryActivity,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<RogueDiaryActivity,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 64));
    RuntimeMgr = RogueDiaryActivity::getRuntimeMgr(v10);
    started = RogueDiaryRuntimeMgr::startNextFightByGm(RuntimeMgr);
    goto LABEL_51;
  }
  v12 = std::vector<std::string>::operator[](param_vec, 0LL);
  if ( std::operator==<char>(v12, "QUICK_REPAIR") )
  {
    v13 = std::__shared_ptr_access<RogueDiaryActivity,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<RogueDiaryActivity,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 64));
    v14 = RogueDiaryActivity::getRuntimeMgr(v13);
    started = RogueDiaryRuntimeMgr::finishRepairByGm(v14);
    goto LABEL_51;
  }
  v15 = std::vector<std::string>::operator[](param_vec, 0LL);
  if ( std::operator==<char>(v15, "RESUME") )
  {
    v16 = std::__shared_ptr_access<RogueDiaryActivity,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<RogueDiaryActivity,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 64));
    started = RogueDiaryActivity::resumeRogueDiaryDungeonByGm(v16);
    goto LABEL_51;
  }
  v17 = std::vector<std::string>::operator[](param_vec, 0LL);
  if ( std::operator==<char>(v17, "OPEN") )
  {
    v18 = std::__shared_ptr_access<RogueDiaryActivity,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<RogueDiaryActivity,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 64));
    started = RogueDiaryActivity::openAllRogueDiaryStageByGm(v18);
    goto LABEL_51;
  }
  v19 = std::vector<std::string>::operator[](param_vec, 0LL);
  if ( std::operator==<char>(v19, "RESET") )
  {
    v20 = std::__shared_ptr_access<RogueDiaryActivity,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<RogueDiaryActivity,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 64));
    started = RogueDiaryActivity::resetRogueDiaryPlayByGm(v20);
    goto LABEL_51;
  }
  v21 = std::vector<std::string>::operator[](param_vec, 0LL);
  if ( std::operator==<char>(v21, "ADD_COIN") )
  {
    v22 = std::__shared_ptr_access<RogueDiaryActivity,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<RogueDiaryActivity,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 64));
    v23 = RogueDiaryActivity::getRuntimeMgr(v22);
    RogueDiaryRuntimeMgr::addCoinByGm(v23);
    started = 0;
    goto LABEL_51;
  }
  v24 = std::vector<std::string>::operator[](param_vec, 0LL);
  if ( std::operator==<char>(v24, "CLEAR_TIRED") )
  {
    v25 = std::__shared_ptr_access<RogueDiaryActivity,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<RogueDiaryActivity,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 64));
    v26 = RogueDiaryActivity::getRuntimeMgr(v25);
    started = RogueDiaryRuntimeMgr::clearTiredStatusByGm(v26);
    goto LABEL_51;
  }
  v27 = std::vector<std::string>::operator[](param_vec, 0LL);
  if ( std::operator==<char>(v27, "ENTER_NEXT") )
  {
    v28 = std::__shared_ptr_access<RogueDiaryActivity,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<RogueDiaryActivity,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 64));
    started = RogueDiaryActivity::enterNextDungeonByGm(v28);
    goto LABEL_51;
  }
  v29 = std::vector<std::string>::operator[](param_vec, 0LL);
  if ( std::operator==<char>(v29, "PRINT_ROOM") )
  {
    v30 = std::__shared_ptr_access<RogueDiaryActivity,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<RogueDiaryActivity,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 64));
    v31 = RogueDiaryActivity::getRuntimeMgr(v30);
    RogueDiaryRuntimeMgr::getAndNotifyRoundPoolInfoByGm[abi:cxx11](&sep, v31);
    std::string::operator=(ret_msg, &sep);
    std::string::~string(&sep);
    started = 0;
    goto LABEL_51;
  }
  v32 = std::vector<std::string>::operator[](param_vec, 0LL);
  if ( std::operator==<char>(v32, "SET_CARD") )
  {
    if ( std::vector<std::string>::size(param_vec) > 1 )
    {
      std::vector<unsigned int>::vector((std::vector<unsigned int> *const)(v3 + 96));
      std::allocator<char>::allocator(&__a);
      std::string::basic_string<std::allocator<char>>(&sep, ",", &__a);
      v33 = std::vector<std::string>::operator[](param_vec, 1uLL);
      v34 = common::tools::StringUtils::splitToList<unsigned int>(v33, &sep, (std::vector<unsigned int> *)(v3 + 96), 1) != 0;
      std::string::~string(&sep);
      std::allocator<char>::~allocator(&__a);
      if ( v34 )
      {
        common::milog::MiLogStream::create(
          (common::milog::MiLogStream *)&sep,
          &common::milog::MiLogDefault::default_log_obj_,
          3u,
          "./src/player/gm/player_gm_comp.cpp",
          "procRogueDiaryActivity",
          17343);
        v35 = common::milog::MiLogStream::operator<<<char [15],(char *[15])0>(
                (common::milog::MiLogStream *const)&sep,
                (const char (*)[15])"invalid param:");
        common::milog::MiLogStream::operator<<<std::string>(v35, param_vec);
        common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)&sep);
        started = -1;
      }
      else
      {
        v36 = std::__shared_ptr_access<RogueDiaryActivity,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<RogueDiaryActivity,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 64));
        v37 = RogueDiaryActivity::getRuntimeMgr(v36);
        started = RogueDiaryRuntimeMgr::setNextRandCardByGm(v37, (const std::vector<unsigned int> *)(v3 + 96));
      }
LABEL_37:
      std::vector<unsigned int>::~vector((std::vector<unsigned int> *const)(v3 + 96));
      goto LABEL_51;
    }
  }
  else
  {
    v38 = std::vector<std::string>::operator[](param_vec, 0LL);
    if ( !std::operator==<char>(v38, "SET_ROOM") )
    {
      v44 = std::vector<std::string>::operator[](param_vec, 0LL);
      if ( std::operator==<char>(v44, "SET_CONTENT") )
      {
        if ( std::vector<std::string>::size(param_vec) > 1 )
        {
          *(_DWORD *)(v3 + 48) = 0;
          v45 = std::vector<std::string>::operator[](param_vec, 1uLL);
          if ( common::tools::StringUtils::strToNum<unsigned int>(v45, (unsigned int *)(v3 + 48), 1) )
          {
            common::milog::MiLogStream::create(
              (common::milog::MiLogStream *)&sep,
              &common::milog::MiLogDefault::default_log_obj_,
              3u,
              "./src/player/gm/player_gm_comp.cpp",
              "procRogueDiaryActivity",
              17373);
            v46 = common::milog::MiLogStream::operator<<<char [15],(char *[15])0>(
                    (common::milog::MiLogStream *const)&sep,
                    (const char (*)[15])"invalid param:");
            v47 = std::vector<std::string>::operator[](param_vec, 1uLL);
            common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v46, v47);
            common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)&sep);
            started = -1;
          }
          else
          {
            is_content_closed = *(_DWORD *)(v3 + 48) == 0;
            v48 = std::__shared_ptr_access<RogueDiaryActivity,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<RogueDiaryActivity,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 64));
            RogueDiaryActivity::setContentCloseByGm(v48, is_content_closed);
            started = 0;
          }
        }
        else
        {
          common::milog::MiLogStream::create(
            (common::milog::MiLogStream *)&sep,
            &common::milog::MiLogDefault::default_log_obj_,
            3u,
            "./src/player/gm/player_gm_comp.cpp",
            "procRogueDiaryActivity",
            17367);
          common::milog::MiLogStream::operator<<<char [17],(char *[17])0>(
            (common::milog::MiLogStream *const)&sep,
            "param not enough");
          common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)&sep);
          started = -1;
        }
      }
      else
      {
        started = 0;
      }
      goto LABEL_51;
    }
    if ( std::vector<std::string>::size(param_vec) > 1 )
    {
      std::vector<unsigned int>::vector((std::vector<unsigned int> *const)(v3 + 96));
      std::allocator<char>::allocator(&__a);
      std::string::basic_string<std::allocator<char>>(&sep, ",", &__a);
      v39 = std::vector<std::string>::operator[](param_vec, 1uLL);
      v40 = common::tools::StringUtils::splitToList<unsigned int>(v39, &sep, (std::vector<unsigned int> *)(v3 + 96), 1) != 0;
      std::string::~string(&sep);
      std::allocator<char>::~allocator(&__a);
      if ( v40 )
      {
        common::milog::MiLogStream::create(
          (common::milog::MiLogStream *)&sep,
          &common::milog::MiLogDefault::default_log_obj_,
          3u,
          "./src/player/gm/player_gm_comp.cpp",
          "procRogueDiaryActivity",
          17358);
        v41 = common::milog::MiLogStream::operator<<<char [15],(char *[15])0>(
                (common::milog::MiLogStream *const)&sep,
                (const char (*)[15])"invalid param:");
        common::milog::MiLogStream::operator<<<std::string>(v41, param_vec);
        common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)&sep);
        started = -1;
      }
      else
      {
        v42 = std::__shared_ptr_access<RogueDiaryActivity,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<RogueDiaryActivity,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 64));
        v43 = RogueDiaryActivity::getRuntimeMgr(v42);
        started = RogueDiaryRuntimeMgr::setRoundPoolVecByGm(v43, (const std::vector<unsigned int> *)(v3 + 96));
      }
      goto LABEL_37;
    }
  }
LABEL_40:
  std::string::operator=(ret_msg, "param not enough");
  started = -1;
LABEL_51:
  std::shared_ptr<RogueDiaryActivity>::~shared_ptr((std::shared_ptr<RogueDiaryActivity> *const)(v3 + 64));
  result = started;
  if ( v54 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8010) = 0;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8010) = -168430091;
  }
  return result;
};

// Line 17382: range 0000000017D7D3F0-0000000017D7D492
void __cdecl procRoguelikeDungeonActivityRegister::procRoguelikeDungeonActivityRegister(
        procRoguelikeDungeonActivityRegister *const this)
{
  std::function<int(GmContext&,const std::vector<std::string>&,std::string&)> *v1; // rax
  std::allocator<char> __a; // [rsp+1Fh] [rbp-31h] BYREF
  std::string __k; // [rsp+20h] [rbp-30h] BYREF

  std::allocator<char>::allocator(&__a);
  std::string::basic_string<std::allocator<char>>(&__k, "ROGUE", &__a);
  v1 = std::unordered_map<std::string,std::function<int ()(GmContext &,std::vector<std::string> const&,std::string&)>>::operator[](
         &GmUtils::op_func_map[abi:cxx11],
         &__k);
  std::function<int ()(GmContext &,std::vector<std::string> const&,std::string&)>::operator=<int (&)(GmContext &,std::vector<std::string> const&,std::string&)>(
    v1,
    (int (*)(GmContext *, const std::vector<std::string> *, std::string *))procRoguelikeDungeonActivity);
  std::string::~string(&__k);
  std::allocator<char>::~allocator(&__a);
};

// Line 17383: range 0000000017C47974-0000000017C4A05B
int32_t __cdecl procRoguelikeDungeonActivity(
        GmContext *context,
        const std::vector<std::string> *param_vec,
        std::string *ret_msg)
{
  int32_t refreshed; // r12d
  unsigned __int64 v4; // r14
  __int64 v5; // rax
  _DWORD *v6; // r13
  std::__shared_ptr_access<RoguelikeDungeonActivity,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v7; // rax
  const std::string *v9; // rax
  RoguelikeDungeonActivity *v10; // rax
  const std::string *v11; // rax
  const std::string *v12; // rax
  RoguelikeDungeonActivity *v13; // rax
  RoguelikeMiscMgr *RoguelikeMiscMgr; // rax
  RoguelikeDungeonActivity *v15; // rax
  RoguelikeMiscMgr *v16; // rax
  const std::string *v17; // rax
  RoguelikeDungeonActivity *v18; // rax
  RoguelikeMiscMgr *v19; // rax
  const std::string *v20; // rax
  RoguelikeDungeonActivity *v21; // rax
  RoguelikeMiscMgr *v22; // rax
  const std::string *v23; // rax
  RoguelikeDungeonActivity *v24; // rax
  RoguelikeMiscMgr *v25; // rax
  const std::string *v26; // rax
  RoguelikeDungeonActivity *v27; // rax
  RoguelikeMiscMgr *v28; // rax
  const std::string *v29; // rax
  RoguelikeDungeonActivity *v30; // rax
  RoguelikeMiscMgr *v31; // rax
  const std::string *v32; // rax
  const std::string *v33; // rax
  bool v34; // r12
  common::milog::MiLogStream *v35; // rdx
  RoguelikeDungeonActivity *v36; // rax
  RoguelikeMiscMgr *v37; // rax
  __gnu_cxx::__normal_iterator<unsigned int*,std::vector<unsigned int> >::reference v38; // rax
  uint32_t *v39; // rdx
  const std::string *v40; // rax
  RoguelikeDungeonActivity *v41; // rax
  RoguelikeMiscMgr *v42; // rax
  const std::string *v43; // rax
  const std::string *v44; // rax
  const std::string *v45; // rax
  RoguelikeDungeonActivity *v46; // rax
  RoguelikeMiscMgr *v47; // rax
  const std::string *v48; // rax
  const std::string *v49; // rax
  RoguelikeDungeonActivity *v50; // rax
  RoguelikeMiscMgr *v51; // rax
  const std::string *v52; // rax
  RoguelikeDungeonActivity *v53; // rax
  RoguelikeMiscMgr *v54; // rax
  const std::string *v55; // rax
  const std::string *v56; // rax
  RoguelikeDungeonActivity *v57; // rax
  const std::string *v58; // rax
  RoguelikeDungeonActivity *v59; // rax
  const std::string *v60; // rax
  RoguelikeDungeonActivity *v61; // rax
  RoguelikeMiscMgr *v62; // rax
  const std::string *v63; // rax
  const std::string *v64; // rax
  RoguelikeDungeonActivity *v65; // rax
  const std::string *v66; // rax
  const std::string *v67; // rax
  const std::string *v68; // rax
  RoguelikeDungeonActivity *v70; // rax
  const std::string *v71; // rax
  const std::string *v72; // rax
  RoguelikeDungeonActivity *v73; // rax
  const std::string *v74; // rax
  int v75; // r15d
  RoguelikeDungeonActivity *v76; // rax
  bool v77; // r15
  const std::string *v78; // rax
  const std::string *v79; // rax
  int (**vptr_DescribalBase)(...); // rax
  __int64 v81; // rax
  __int64 v82; // rcx
  __int64 v83; // rax
  __int64 v84; // r12
  std::__shared_ptr_access<Gadget,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v85; // rax
  void (__fastcall **v86)(std::string *, std::__shared_ptr_access<Gadget,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *); // rdx
  __int64 v87; // rax
  __int64 v88; // r12
  std::__shared_ptr_access<Gadget,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v89; // rax
  uint32_t State; // eax
  __int64 v91; // rax
  const std::string *v92; // rax
  const std::string *v93; // rax
  const std::string *v94; // rax
  const std::string *v95; // rax
  RoguelikeDungeonActivity *v96; // rax
  const std::string *v97; // rax
  const std::string *v98; // rax
  RoguelikeDungeonActivity *v99; // rax
  RoguelikeMiscMgr *v100; // rax
  const std::string *v101; // rax
  const std::string *v102; // rax
  RoguelikeDungeonActivity *v103; // rax
  RoguelikeMiscMgr *v104; // rax
  const std::string *v105; // rax
  RoguelikeDungeonActivity *v106; // rax
  RoguelikeMiscMgr *v107; // rax
  const std::string *v108; // rax
  RoguelikeDungeonActivity *v109; // rax
  RoguelikeMiscMgr *v110; // rax
  const std::string *v111; // rax
  RoguelikeDungeonActivity *v112; // rax
  RoguelikeMiscMgr *v113; // rax
  const std::string *v114; // rax
  const std::string *v115; // rax
  RoguelikeDungeonActivity *v116; // rax
  const std::string *v117; // rax
  const std::string *v118; // rax
  RoguelikeDungeonActivity *v119; // rax
  char v120; // r15
  common::milog::MiLogStream *v121; // r12
  int v122; // r15d
  const std::string *v123; // rax
  const std::string *v124; // rax
  const std::string *v125; // rax
  RoguelikeDungeonActivity *v126; // rax
  int32_t result; // eax
  bool v128; // [rsp+17h] [rbp-4F9h]
  std::allocator<char> __a; // [rsp+3Bh] [rbp-4D5h] BYREF
  uint32_t card_id; // [rsp+3Ch] [rbp-4D4h]
  int32_t ret_0; // [rsp+40h] [rbp-4D0h]
  int32_t ret; // [rsp+44h] [rbp-4CCh]
  std::vector<unsigned int>::iterator __for_begin; // [rsp+48h] [rbp-4C8h] BYREF
  std::vector<unsigned int>::iterator __for_end; // [rsp+50h] [rbp-4C0h] BYREF
  RogueLikeDungeonRuntimeMgr *runtime_mgr_0; // [rsp+58h] [rbp-4B8h]
  RogueLikeDungeonRuntimeMgr *runtime_mgr; // [rsp+60h] [rbp-4B0h]
  RogueCell *cell_ptr; // [rsp+68h] [rbp-4A8h]
  RogueCell *cell; // [rsp+70h] [rbp-4A0h]
  std::map<data::RogueGadgetDirType,std::weak_ptr<Gadget>> *__for_range_0; // [rsp+78h] [rbp-498h]
  std::pair<const data::RogueGadgetDirType,std::weak_ptr<Gadget> > *__in; // [rsp+80h] [rbp-490h]
  std::tuple_element<0,std::pair<const data::RogueGadgetDirType,std::weak_ptr<Gadget> > >::type *dir; // [rsp+88h] [rbp-488h]
  std::tuple_element<1,std::pair<const data::RogueGadgetDirType,std::weak_ptr<Gadget> > >::type *door_wtr; // [rsp+90h] [rbp-480h]
  std::vector<unsigned int> *__for_range; // [rsp+98h] [rbp-478h]
  std::string v145; // [rsp+A0h] [rbp-470h] BYREF
  std::string v146; // [rsp+C0h] [rbp-450h] BYREF
  std::string v147; // [rsp+E0h] [rbp-430h] BYREF
  char v148[32]; // [rsp+100h] [rbp-410h] BYREF
  char v149[32]; // [rsp+120h] [rbp-3F0h] BYREF
  std::string v150; // [rsp+140h] [rbp-3D0h] BYREF
  std::string v151; // [rsp+160h] [rbp-3B0h] BYREF
  std::string v152; // [rsp+180h] [rbp-390h] BYREF
  std::string __rhs; // [rsp+1A0h] [rbp-370h] BYREF
  std::string sep; // [rsp+1C0h] [rbp-350h] BYREF
  char v155[816]; // [rsp+1E0h] [rbp-330h] BYREF

  v4 = (unsigned __int64)v155;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v5 = __asan_stack_malloc_4(768LL);
    if ( v5 )
      v4 = v5;
  }
  *(_QWORD *)v4 = 1102416563LL;
  *(_QWORD *)(v4 + 8) = "8 48 4 14 stage_id:17806 64 4 16 delta_coin:17812 80 16 18 activity_ptr:17384 112 16 23 dungeon_"
                        "scene_ptr:17781 144 16 16 gadget_ptr:17671 176 24 17 card_id_vec:17468 240 24 19 wish_card_vec:1"
                        "7474 304 392 8 ss:17666";
  *(_QWORD *)(v4 + 16) = procRoguelikeDungeonActivity;
  v6 = (_DWORD *)(v4 >> 3);
  v6[536862720] = -235802127;
  v6[536862721] = -234556943;
  v6[536862722] = 61956;
  v6[536862723] = 62194;
  v6[536862724] = 62194;
  v6[536862725] = 62194;
  v6[536862726] = -218959360;
  v6[536862727] = 62194;
  v6[536862728] = -218959360;
  v6[536862729] = 62194;
  v6[536862741] = -218103808;
  v6[536862742] = -202116109;
  v6[536862743] = -202116109;
  if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
    __asan_report_load8();
  Player::getActivityComp(context->player);
  PlayerActivityComp::findOpenningActivity<RoguelikeDungeonActivity>((PlayerActivityComp *const)(v4 + 80));
  if ( std::operator==<RoguelikeDungeonActivity>(0LL, (const std::shared_ptr<RoguelikeDungeonActivity> *)(v4 + 80))
    || (v7 = std::__shared_ptr_access<RoguelikeDungeonActivity,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<RoguelikeDungeonActivity,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 80)),
        !BaseActivity::isOpening(v7, 0)) )
  {
    std::string::operator=(ret_msg, "activity is not open");
    refreshed = 860;
    goto LABEL_188;
  }
  if ( !std::vector<std::string>::size(param_vec) )
    goto LABEL_160;
  v9 = std::vector<std::string>::operator[](param_vec, 0LL);
  if ( std::operator==<char>(v9, "OPEN") )
  {
    std::string::operator=(ret_msg, "REOPEN ROGUE CONTENT");
    v10 = std::__shared_ptr_access<RoguelikeDungeonActivity,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<RoguelikeDungeonActivity,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 80));
    RoguelikeDungeonActivity::setIsContentClosed(v10, 0);
    refreshed = 0;
    goto LABEL_188;
  }
  v11 = std::vector<std::string>::operator[](param_vec, 0LL);
  if ( std::operator==<char>(v11, "MISC") )
  {
    if ( std::vector<std::string>::size(param_vec) > 1 )
    {
      v12 = std::vector<std::string>::operator[](param_vec, 1uLL);
      if ( std::operator==<char>(v12, "INIT") )
      {
        std::string::operator=(ret_msg, "ROGUE MISC INIT");
        v13 = std::__shared_ptr_access<RoguelikeDungeonActivity,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<RoguelikeDungeonActivity,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 80));
        RoguelikeMiscMgr = RoguelikeDungeonActivity::getRoguelikeMiscMgr(v13);
        ret = RoguelikeMiscMgr::initRoguelikeDungeonMiscDataByGm(RoguelikeMiscMgr);
        if ( ret )
        {
          std::string::operator+=(ret_msg, " FAILED");
          refreshed = ret;
          goto LABEL_188;
        }
        goto LABEL_21;
      }
      v17 = std::vector<std::string>::operator[](param_vec, 1uLL);
      if ( std::operator==<char>(v17, "SAVE") )
      {
        std::string::operator=(ret_msg, "ROGUE MISC SAVE");
        v18 = std::__shared_ptr_access<RoguelikeDungeonActivity,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<RoguelikeDungeonActivity,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 80));
        v19 = RoguelikeDungeonActivity::getRoguelikeMiscMgr(v18);
        RoguelikeMiscMgr::saveRoguelikeDungeonMiscDataByGm(v19);
        refreshed = 0;
        goto LABEL_188;
      }
      v20 = std::vector<std::string>::operator[](param_vec, 1uLL);
      if ( std::operator==<char>(v20, "RECOVER") )
      {
        std::string::operator=(ret_msg, "ROGUE MISC RECOVER");
        v21 = std::__shared_ptr_access<RoguelikeDungeonActivity,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<RoguelikeDungeonActivity,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 80));
        v22 = RoguelikeDungeonActivity::getRoguelikeMiscMgr(v21);
        ret_0 = RoguelikeMiscMgr::recoverRoguelikeDungeonMiscDataByGm(v22);
        if ( ret_0 )
        {
          std::string::operator+=(ret_msg, " FAILED");
          refreshed = ret_0;
          goto LABEL_188;
        }
LABEL_21:
        v15 = std::__shared_ptr_access<RoguelikeDungeonActivity,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<RoguelikeDungeonActivity,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 80));
        v16 = RoguelikeDungeonActivity::getRoguelikeMiscMgr(v15);
        RoguelikeMiscMgr::initRoguelikeDungeonCombatByGm(v16);
        refreshed = 0;
        goto LABEL_188;
      }
      v23 = std::vector<std::string>::operator[](param_vec, 1uLL);
      if ( std::operator==<char>(v23, "CLEAR") )
      {
        std::string::operator=(ret_msg, "ROGUE MISC CLEAR");
        v24 = std::__shared_ptr_access<RoguelikeDungeonActivity,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<RoguelikeDungeonActivity,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 80));
        v25 = RoguelikeDungeonActivity::getRoguelikeMiscMgr(v24);
        RoguelikeMiscMgr::clearRoguelikeDungeonMiscDataByGm(v25);
        refreshed = 0;
        goto LABEL_188;
      }
      goto LABEL_187;
    }
LABEL_160:
    std::string::operator=(ret_msg, "param not enough");
    refreshed = -1;
    goto LABEL_188;
  }
  v26 = std::vector<std::string>::operator[](param_vec, 0LL);
  if ( std::operator==<char>(v26, "GACHA") )
  {
    if ( std::vector<std::string>::size(param_vec) == 1 )
    {
      std::string::operator=(ret_msg, "ROGUELIKE DO GACHA");
      v27 = std::__shared_ptr_access<RoguelikeDungeonActivity,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<RoguelikeDungeonActivity,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 80));
      v28 = RoguelikeDungeonActivity::getRoguelikeMiscMgr(v27);
      refreshed = RoguelikeMiscMgr::doRoguelikeDungeonCardByGm(v28);
      goto LABEL_188;
    }
    v29 = std::vector<std::string>::operator[](param_vec, 1uLL);
    if ( std::operator==<char>(v29, "REFRESH") )
    {
      std::string::operator=(ret_msg, "ROGUELIKE REFRESH GACHA");
      v30 = std::__shared_ptr_access<RoguelikeDungeonActivity,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<RoguelikeDungeonActivity,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 80));
      v31 = RoguelikeDungeonActivity::getRoguelikeMiscMgr(v30);
      refreshed = RoguelikeMiscMgr::refreshRoguelikeDungeonCardByGm(v31);
      goto LABEL_188;
    }
    v32 = std::vector<std::string>::operator[](param_vec, 1uLL);
    if ( std::operator==<char>(v32, "WISH") )
    {
      if ( std::vector<std::string>::size(param_vec) <= 2 )
        goto LABEL_160;
      std::vector<unsigned int>::vector((std::vector<unsigned int> *const)(v4 + 176));
      std::allocator<char>::allocator(&__a);
      std::string::basic_string<std::allocator<char>>(&sep, ",", &__a);
      v33 = std::vector<std::string>::operator[](param_vec, 2uLL);
      v34 = common::tools::StringUtils::splitToList<unsigned int>(v33, &sep, (std::vector<unsigned int> *)(v4 + 176), 1) != 0;
      std::string::~string(&sep);
      std::allocator<char>::~allocator(&__a);
      if ( v34 )
      {
        common::milog::MiLogStream::create(
          (common::milog::MiLogStream *)&sep,
          &common::milog::MiLogDefault::default_log_obj_,
          3u,
          "./src/player/gm/player_gm_comp.cpp",
          "procRoguelikeDungeonActivity",
          17471);
        v35 = common::milog::MiLogStream::operator<<<char [15],(char *[15])0>(
                (common::milog::MiLogStream *const)&sep,
                (const char (*)[15])"invalid param:");
        common::milog::MiLogStream::operator<<<std::string>(v35, param_vec);
        common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)&sep);
        refreshed = -1;
      }
      else
      {
        v36 = std::__shared_ptr_access<RoguelikeDungeonActivity,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<RoguelikeDungeonActivity,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 80));
        v37 = RoguelikeDungeonActivity::getRoguelikeMiscMgr(v36);
        RoguelikeMiscMgr::wishNextRoguelikeCardByGm(
          (std::vector<unsigned int> *)(v4 + 240),
          v37,
          (const std::vector<unsigned int> *)(v4 + 176));
        std::string::operator=(ret_msg, "SUCC WISH CARD LIST:");
        __for_range = (std::vector<unsigned int> *)(v4 + 240);
        __for_begin._M_current = std::vector<unsigned int>::begin((std::vector<unsigned int> *const)(v4 + 240))._M_current;
        __for_end._M_current = std::vector<unsigned int>::end(__for_range)._M_current;
        while ( __gnu_cxx::operator!=<unsigned int *,std::vector<unsigned int>>(&__for_begin, &__for_end) )
        {
          v38 = __gnu_cxx::__normal_iterator<unsigned int *,std::vector<unsigned int>>::operator*(&__for_begin);
          v39 = v38;
          if ( *(_BYTE *)(((unsigned __int64)v38 >> 3) + 0x7FFF8000) != 0
            && (char)(((unsigned __int8)v38 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)v38 >> 3) + 0x7FFF8000) )
          {
            __asan_report_load4(v38);
          }
          card_id = *v39;
          std::to_string(&__rhs, card_id);
          std::operator+<char>(&sep, " ", &__rhs);
          std::string::operator+=(ret_msg, &sep);
          std::string::~string(&sep);
          std::string::~string(&__rhs);
          __gnu_cxx::__normal_iterator<unsigned int *,std::vector<unsigned int>>::operator++(&__for_begin);
        }
        refreshed = 0;
        std::vector<unsigned int>::~vector((std::vector<unsigned int> *const)(v4 + 240));
      }
      std::vector<unsigned int>::~vector((std::vector<unsigned int> *const)(v4 + 176));
      goto LABEL_188;
    }
    if ( std::vector<std::string>::size(param_vec) <= 1 )
      goto LABEL_160;
    *(_DWORD *)(v4 + 64) = 0;
    v40 = std::vector<std::string>::operator[](param_vec, 1uLL);
    if ( !common::tools::StringUtils::strToNum<unsigned int>(v40, (unsigned int *)(v4 + 64), 1) )
    {
      std::to_string(&sep, *(_DWORD *)(v4 + 64));
      std::operator+<char>(&v145, "ROGUE GACHA, DEPOT_ID:", &sep);
      std::string::operator=(ret_msg, &v145);
      std::string::~string(&v145);
      std::string::~string(&sep);
      v41 = std::__shared_ptr_access<RoguelikeDungeonActivity,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<RoguelikeDungeonActivity,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 80));
      v42 = RoguelikeDungeonActivity::getRoguelikeMiscMgr(v41);
      refreshed = RoguelikeMiscMgr::doDirectDepotRoguelikeDungeonCardByGm(v42, *(_DWORD *)(v4 + 64));
      goto LABEL_188;
    }
LABEL_184:
    std::string::operator=(ret_msg, "strToNum failed");
    refreshed = -1;
    goto LABEL_188;
  }
  v43 = std::vector<std::string>::operator[](param_vec, 0LL);
  if ( std::operator==<char>(v43, "CURSE") )
  {
    if ( std::vector<std::string>::size(param_vec) <= 1 )
      goto LABEL_160;
    v44 = std::vector<std::string>::operator[](param_vec, 1uLL);
    if ( std::operator==<char>(v44, "TRIGGER") )
    {
      if ( std::vector<std::string>::size(param_vec) <= 2 )
        goto LABEL_160;
      *(_DWORD *)(v4 + 64) = 0;
      v45 = std::vector<std::string>::operator[](param_vec, 2uLL);
      if ( !common::tools::StringUtils::strToNum<unsigned int>(v45, (unsigned int *)(v4 + 64), 1) )
      {
        std::to_string(&sep, *(_DWORD *)(v4 + 64));
        std::operator+<char>(&v146, "TRIGGER CURSE:", &sep);
        std::string::operator=(ret_msg, &v146);
        std::string::~string(&v146);
        std::string::~string(&sep);
        v46 = std::__shared_ptr_access<RoguelikeDungeonActivity,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<RoguelikeDungeonActivity,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 80));
        v47 = RoguelikeDungeonActivity::getRoguelikeMiscMgr(v46);
        refreshed = RoguelikeMiscMgr::triggerRoguelikeCurseByGm(v47, *(_DWORD *)(v4 + 64));
        goto LABEL_188;
      }
      goto LABEL_184;
    }
    v48 = std::vector<std::string>::operator[](param_vec, 1uLL);
    if ( std::operator==<char>(v48, "CLEAR") )
    {
      if ( std::vector<std::string>::size(param_vec) <= 2 )
        goto LABEL_160;
      v49 = std::vector<std::string>::operator[](param_vec, 2uLL);
      if ( std::operator==<char>(v49, _f.gap0) )
      {
        std::string::operator=(ret_msg, "ROGUE TRY CLEAR ALL CURSE:");
        v50 = std::__shared_ptr_access<RoguelikeDungeonActivity,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<RoguelikeDungeonActivity,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 80));
        v51 = RoguelikeDungeonActivity::getRoguelikeMiscMgr(v50);
        RoguelikeMiscMgr::clearAllCurseByGm(v51);
        refreshed = 0;
        goto LABEL_188;
      }
      *(_DWORD *)(v4 + 64) = 0;
      v52 = std::vector<std::string>::operator[](param_vec, 2uLL);
      if ( !common::tools::StringUtils::strToNum<unsigned int>(v52, (unsigned int *)(v4 + 64), 1) )
      {
        std::to_string(&sep, *(_DWORD *)(v4 + 64));
        std::operator+<char>(&v147, off_26372760, &sep);
        std::string::operator=(ret_msg, &v147);
        std::string::~string(&v147);
        std::string::~string(&sep);
        v53 = std::__shared_ptr_access<RoguelikeDungeonActivity,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<RoguelikeDungeonActivity,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 80));
        v54 = RoguelikeDungeonActivity::getRoguelikeMiscMgr(v53);
        refreshed = RoguelikeMiscMgr::clearCurseByGm(v54, *(_DWORD *)(v4 + 64));
        goto LABEL_188;
      }
      goto LABEL_184;
    }
LABEL_187:
    refreshed = 0;
    goto LABEL_188;
  }
  v55 = std::vector<std::string>::operator[](param_vec, 0LL);
  if ( std::operator==<char>(v55, "RUNE") )
  {
    if ( std::vector<std::string>::size(param_vec) <= 1 )
      goto LABEL_160;
    v56 = std::vector<std::string>::operator[](param_vec, 1uLL);
    if ( std::operator==<char>(v56, "UNLOCK") )
    {
      std::string::operator=(ret_msg, "ROGUE RUNE UNLOCK ALL");
      v57 = std::__shared_ptr_access<RoguelikeDungeonActivity,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<RoguelikeDungeonActivity,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 80));
      RoguelikeDungeonActivity::unlockAllRuneByGm(v57);
      refreshed = 0;
      goto LABEL_188;
    }
    v58 = std::vector<std::string>::operator[](param_vec, 1uLL);
    if ( std::operator==<char>(v58, "EQUIP") )
    {
      std::string::operator=(ret_msg, "ROGUE RUNE QUICK EQUIP");
      v59 = std::__shared_ptr_access<RoguelikeDungeonActivity,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<RoguelikeDungeonActivity,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 80));
      RoguelikeDungeonActivity::quickEquipRuneByGm(v59);
      refreshed = 0;
      goto LABEL_188;
    }
    v60 = std::vector<std::string>::operator[](param_vec, 1uLL);
    if ( std::operator==<char>(v60, "RECOVER") )
    {
      std::string::operator=(ret_msg, "ROGUE RUNE RECOVER COUNT TO MAX");
      v61 = std::__shared_ptr_access<RoguelikeDungeonActivity,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<RoguelikeDungeonActivity,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 80));
      v62 = RoguelikeDungeonActivity::getRoguelikeMiscMgr(v61);
      RoguelikeMiscMgr::addRuneLeftCountToMaxCountByGm(v62);
      refreshed = 0;
      goto LABEL_188;
    }
    goto LABEL_187;
  }
  v63 = std::vector<std::string>::operator[](param_vec, 0LL);
  if ( std::operator==<char>(v63, "SHIKIGAMI") )
  {
    if ( std::vector<std::string>::size(param_vec) <= 1 )
      goto LABEL_160;
    v64 = std::vector<std::string>::operator[](param_vec, 1uLL);
    if ( std::operator==<char>(v64, "UNLOCK") )
    {
      std::string::operator=(ret_msg, "ROGUE SHIKIGAMI UNLOCK ALL TO MAX LEVEL");
      v65 = std::__shared_ptr_access<RoguelikeDungeonActivity,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<RoguelikeDungeonActivity,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 80));
      RoguelikeDungeonActivity::unlockAllShikigamiByGm(v65);
      refreshed = 0;
      goto LABEL_188;
    }
    v66 = std::vector<std::string>::operator[](param_vec, 1uLL);
    if ( std::operator==<char>(v66, off_26352320) )
    {
      if ( std::vector<std::string>::size(param_vec) <= 3 )
        goto LABEL_160;
      *(_DWORD *)(v4 + 48) = 0;
      *(_DWORD *)(v4 + 64) = 0;
      v67 = std::vector<std::string>::operator[](param_vec, 2uLL);
      if ( common::tools::StringUtils::strToNum<unsigned int>(v67, (unsigned int *)(v4 + 48), 1)
        || (v68 = std::vector<std::string>::operator[](param_vec, 3uLL),
            common::tools::StringUtils::strToNum<unsigned int>(v68, (unsigned int *)(v4 + 64), 1)) )
      {
        std::string::operator=(ret_msg, " param not valid");
        refreshed = -1;
      }
      else
      {
        v70 = std::__shared_ptr_access<RoguelikeDungeonActivity,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<RoguelikeDungeonActivity,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 80));
        refreshed = RoguelikeDungeonActivity::setShikigamiToDirectLevelByGm(
                      v70,
                      *(_DWORD *)(v4 + 48),
                      *(_DWORD *)(v4 + 64));
      }
      goto LABEL_188;
    }
    goto LABEL_187;
  }
  v71 = std::vector<std::string>::operator[](param_vec, 0LL);
  if ( !std::operator==<char>(v71, "DUNGEON") )
  {
    v97 = std::vector<std::string>::operator[](param_vec, 0LL);
    if ( std::operator==<char>(v97, "PRINT") )
    {
      if ( std::vector<std::string>::size(param_vec) <= 1 )
        goto LABEL_160;
      v98 = std::vector<std::string>::operator[](param_vec, 1uLL);
      if ( std::operator==<char>(v98, "CARD") )
      {
        v99 = std::__shared_ptr_access<RoguelikeDungeonActivity,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<RoguelikeDungeonActivity,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 80));
        v100 = RoguelikeDungeonActivity::getRoguelikeMiscMgr(v99);
        RoguelikeMiscMgr::getAndNotifyCardDesc[abi:cxx11](&v150, v100);
        std::string::operator=(ret_msg, &v150);
        std::string::~string(&v150);
        refreshed = 0;
        goto LABEL_188;
      }
      v101 = std::vector<std::string>::operator[](param_vec, 1uLL);
      if ( std::operator==<char>(v101, "CARDDEPOT") )
      {
        if ( std::vector<std::string>::size(param_vec) <= 2 )
          goto LABEL_160;
        *(_DWORD *)(v4 + 64) = 0;
        v102 = std::vector<std::string>::operator[](param_vec, 2uLL);
        if ( !common::tools::StringUtils::strToNum<unsigned int>(v102, (unsigned int *)(v4 + 64), 1) )
        {
          v103 = std::__shared_ptr_access<RoguelikeDungeonActivity,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<RoguelikeDungeonActivity,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 80));
          v104 = RoguelikeDungeonActivity::getRoguelikeMiscMgr(v103);
          RoguelikeMiscMgr::getAndNotifyCardDepotDesc[abi:cxx11](&v151, v104, *(_DWORD *)(v4 + 64));
          std::string::operator=(ret_msg, &v151);
          std::string::~string(&v151);
          refreshed = 0;
          goto LABEL_188;
        }
        goto LABEL_184;
      }
      v105 = std::vector<std::string>::operator[](param_vec, 1uLL);
      if ( std::operator==<char>(v105, "CURSE") )
      {
        v106 = std::__shared_ptr_access<RoguelikeDungeonActivity,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<RoguelikeDungeonActivity,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 80));
        v107 = RoguelikeDungeonActivity::getRoguelikeMiscMgr(v106);
        RoguelikeMiscMgr::getAndNotifyCurseDesc[abi:cxx11](&v152, v107);
        std::string::operator=(ret_msg, &v152);
        std::string::~string(&v152);
        refreshed = 0;
        goto LABEL_188;
      }
      v108 = std::vector<std::string>::operator[](param_vec, 1uLL);
      if ( std::operator==<char>(v108, "CELL") )
      {
        v109 = std::__shared_ptr_access<RoguelikeDungeonActivity,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<RoguelikeDungeonActivity,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 80));
        v110 = RoguelikeDungeonActivity::getRoguelikeMiscMgr(v109);
        RoguelikeMiscMgr::getAndNotifyCellEffectDesc[abi:cxx11](&__rhs, v110);
        std::string::operator=(ret_msg, &__rhs);
        std::string::~string(&__rhs);
        refreshed = 0;
        goto LABEL_188;
      }
      v111 = std::vector<std::string>::operator[](param_vec, 1uLL);
      if ( std::operator==<char>(v111, "OTHER") )
      {
        v112 = std::__shared_ptr_access<RoguelikeDungeonActivity,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<RoguelikeDungeonActivity,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 80));
        v113 = RoguelikeDungeonActivity::getRoguelikeMiscMgr(v112);
        RoguelikeMiscMgr::getAndNotifyOtherEffectDesc[abi:cxx11](&sep, v113);
        std::string::operator=(ret_msg, &sep);
        std::string::~string(&sep);
        refreshed = 0;
        goto LABEL_188;
      }
      goto LABEL_187;
    }
    v114 = std::vector<std::string>::operator[](param_vec, 0LL);
    if ( std::operator==<char>(v114, "WORLD_LEVEL") )
    {
      if ( std::vector<std::string>::size(param_vec) <= 1 )
        goto LABEL_160;
      *(_DWORD *)(v4 + 64) = 0;
      v115 = std::vector<std::string>::operator[](param_vec, 1uLL);
      if ( common::tools::StringUtils::strToNum<unsigned int>(v115, (unsigned int *)(v4 + 64), 1) )
        goto LABEL_184;
      v116 = std::__shared_ptr_access<RoguelikeDungeonActivity,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<RoguelikeDungeonActivity,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 80));
      RoguelikeDungeonActivity::setWorldLevelByGm(v116, *(_DWORD *)(v4 + 64));
      goto LABEL_187;
    }
    v117 = std::vector<std::string>::operator[](param_vec, 0LL);
    if ( !std::operator==<char>(v117, "YACE") )
    {
      v123 = std::vector<std::string>::operator[](param_vec, 0LL);
      if ( std::operator==<char>(v123, "COIN_C") )
      {
        if ( std::vector<std::string>::size(param_vec) <= 2 )
          goto LABEL_160;
        *(_DWORD *)(v4 + 48) = 0;
        v124 = std::vector<std::string>::operator[](param_vec, 1uLL);
        if ( !common::tools::StringUtils::strToNum<unsigned int>(v124, (unsigned int *)(v4 + 48), 1) )
        {
          *(_DWORD *)(v4 + 64) = 0;
          v125 = std::vector<std::string>::operator[](param_vec, 2uLL);
          if ( !common::tools::StringUtils::strToNum<int>(v125, (int *)(v4 + 64), 1) )
          {
            v126 = std::__shared_ptr_access<RoguelikeDungeonActivity,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<RoguelikeDungeonActivity,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 80));
            if ( (unsigned int)RoguelikeDungeonActivity::manipulateStageCoinCNumByGm(
                                 v126,
                                 *(_DWORD *)(v4 + 48),
                                 *(_DWORD *)(v4 + 64)) )
            {
              std::string::operator=(ret_msg, "manipulateStageCoinCNumByGm failed");
              refreshed = -1;
              goto LABEL_188;
            }
            goto LABEL_187;
          }
        }
        goto LABEL_184;
      }
      goto LABEL_187;
    }
    if ( std::vector<std::string>::size(param_vec) <= 1 )
      goto LABEL_160;
    if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
      __asan_report_load8();
    Player::getDungeonComp(context->player);
    PlayerDungeonComp::getCurDungeon((PlayerDungeonComp *const)(v4 + 112));
    v118 = std::vector<std::string>::operator[](param_vec, 1uLL);
    if ( std::operator==<char>(v118, "ENTER_NEXT") )
    {
      v119 = std::__shared_ptr_access<RoguelikeDungeonActivity,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<RoguelikeDungeonActivity,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 80));
      runtime_mgr_0 = RoguelikeDungeonActivity::getRogueDungeonRuntimeMgr(v119);
      v120 = 0;
      v128 = 1;
      if ( RogueLikeDungeonRuntimeMgr::isValid(runtime_mgr_0) )
      {
        std::shared_ptr<DungeonScene>::shared_ptr(
          (std::shared_ptr<DungeonScene> *const)(v4 + 144),
          (const std::shared_ptr<DungeonScene> *)(v4 + 112));
        v120 = 1;
        if ( RogueLikeDungeonRuntimeMgr::isPlayerInDungeon(runtime_mgr_0, (DungeonScenePtr *)(v4 + 144)) )
          v128 = 0;
      }
      if ( v120 )
        std::shared_ptr<DungeonScene>::~shared_ptr((std::shared_ptr<DungeonScene> *const)(v4 + 144));
      if ( v128 )
      {
        std::string::operator=(ret_msg, "player not in rogue dungeon!");
        common::milog::MiLogStream::create(
          (common::milog::MiLogStream *)&sep,
          &common::milog::MiLogDefault::default_log_obj_,
          3u,
          "./src/player/gm/player_gm_comp.cpp",
          "procRoguelikeDungeonActivity",
          17788);
        v121 = common::milog::MiLogStream::operator<<<char [42],(char *[42])0>(
                 (common::milog::MiLogStream *const)&sep,
                 (const char (*)[42])"[ROGUE] player not in rogue dungeon, uid:");
        if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
          __asan_report_load8();
        *(_DWORD *)(v4 + 64) = Player::getUid(context->player);
        common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v121, (const unsigned int *)(v4 + 64));
        common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)&sep);
        refreshed = -1;
        v122 = 0;
LABEL_177:
        std::shared_ptr<DungeonScene>::~shared_ptr((std::shared_ptr<DungeonScene> *const)(v4 + 112));
        if ( v122 != 1 )
          goto LABEL_188;
        goto LABEL_187;
      }
      if ( RogueLikeDungeonRuntimeMgr::causeDungeonSuccessAndEnterNext(runtime_mgr_0) )
      {
        std::string::operator=(ret_msg, "causeDungeonSuccessAndEnterNext failed");
        common::milog::MiLogStream::create(
          (common::milog::MiLogStream *)&sep,
          &common::milog::MiLogDefault::default_log_obj_,
          3u,
          "./src/player/gm/player_gm_comp.cpp",
          "procRoguelikeDungeonActivity",
          17794);
        common::milog::MiLogStream::operator<<<char [40],(char *[40])0>(
          (common::milog::MiLogStream *const)&sep,
          (const char (*)[40])"[ROGUE] causeDungeonSuccessAndEnterNext");
        common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)&sep);
        refreshed = -1;
        v122 = 0;
        goto LABEL_177;
      }
    }
    v122 = 1;
    goto LABEL_177;
  }
  if ( std::vector<std::string>::size(param_vec) <= 1 )
    goto LABEL_160;
  v72 = std::vector<std::string>::operator[](param_vec, 1uLL);
  if ( std::operator==<char>(v72, "CLEAR") )
  {
    v73 = std::__shared_ptr_access<RoguelikeDungeonActivity,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<RoguelikeDungeonActivity,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 80));
    if ( RoguelikeDungeonActivity::clearDungeonRuntimeByGm(v73) )
    {
      std::string::operator=(ret_msg, "CLEAR ALL FALIED");
      refreshed = -1;
    }
    else
    {
      std::string::operator=(ret_msg, "CLEAR ALL");
      refreshed = 0;
    }
    goto LABEL_188;
  }
  v74 = std::vector<std::string>::operator[](param_vec, 1uLL);
  if ( !std::operator==<char>(v74, "CELL") )
  {
    v94 = std::vector<std::string>::operator[](param_vec, 1uLL);
    if ( std::operator==<char>(v94, "FINISH") )
    {
      if ( std::vector<std::string>::size(param_vec) <= 2 )
        goto LABEL_160;
      *(_DWORD *)(v4 + 64) = 0;
      v95 = std::vector<std::string>::operator[](param_vec, 2uLL);
      if ( !common::tools::StringUtils::strToNum<unsigned int>(v95, (unsigned int *)(v4 + 64), 1) )
      {
        v96 = std::__shared_ptr_access<RoguelikeDungeonActivity,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<RoguelikeDungeonActivity,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 80));
        refreshed = RoguelikeDungeonActivity::forceFinishStageByGm(v96, *(_DWORD *)(v4 + 64));
        goto LABEL_188;
      }
      goto LABEL_184;
    }
    goto LABEL_187;
  }
  if ( std::vector<std::string>::size(param_vec) <= 3 )
    goto LABEL_160;
  if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
    __asan_report_load8();
  Player::getSceneComp(context->player);
  PlayerSceneComp::getCurScene((const PlayerSceneComp *const)(v4 + 112));
  if ( std::operator==<Scene>(0LL, (const std::shared_ptr<Scene> *)(v4 + 112)) )
  {
    std::string::operator=(ret_msg, "[ROGUE] cur scene is nullptr");
    refreshed = -1;
    v75 = 0;
  }
  else
  {
    v76 = std::__shared_ptr_access<RoguelikeDungeonActivity,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<RoguelikeDungeonActivity,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 80));
    runtime_mgr = RoguelikeDungeonActivity::getRogueDungeonRuntimeMgr(v76);
    std::dynamic_pointer_cast<DungeonScene,Scene>((const std::shared_ptr<Scene> *)(v4 + 144));
    v77 = !RogueLikeDungeonRuntimeMgr::isPlayerInDungeon(runtime_mgr, (DungeonScenePtr *)(v4 + 144));
    std::shared_ptr<DungeonScene>::~shared_ptr((std::shared_ptr<DungeonScene> *const)(v4 + 144));
    if ( v77 )
    {
      std::string::operator=(ret_msg, "[ROGUE] player still in dungeon");
      refreshed = -1;
      v75 = 0;
    }
    else
    {
      *(_DWORD *)(v4 + 48) = 0;
      v78 = std::vector<std::string>::operator[](param_vec, 3uLL);
      if ( common::tools::StringUtils::strToNum<unsigned int>(v78, (unsigned int *)(v4 + 48), 1) )
      {
        std::string::operator=(ret_msg, "strToNum failed");
        refreshed = -1;
        v75 = 0;
      }
      else
      {
        v79 = std::vector<std::string>::operator[](param_vec, 2uLL);
        if ( std::operator==<char>(v79, "PRINT") )
        {
          cell_ptr = RogueLikeDungeonRuntimeMgr::findCell(runtime_mgr, *(_DWORD *)(v4 + 48));
          if ( cell_ptr )
          {
            cell = cell_ptr;
            std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream(v4 + 304);
            if ( *(_BYTE *)(((unsigned __int64)cell_ptr >> 3) + 0x7FFF8000) )
              __asan_report_load8();
            vptr_DescribalBase = cell->_vptr_DescribalBase;
            if ( *(_BYTE *)(((unsigned __int64)cell->_vptr_DescribalBase >> 3) + 0x7FFF8000) )
              __asan_report_load8();
            (*vptr_DescribalBase)(&sep, cell);
            v81 = std::operator<<<char>(v4 + 320, &sep);
            std::operator<<<std::char_traits<char>>(v81, "\n");
            std::string::~string(&sep);
            std::operator<<<std::char_traits<char>>(v4 + 320, "door: {");
            __for_range_0 = &cell_ptr->door_entity_map;
            __for_begin._M_current = (unsigned int *)std::map<data::RogueGadgetDirType,std::weak_ptr<Gadget>>::begin(&cell_ptr->door_entity_map)._M_node;
            __for_end._M_current = (unsigned int *)std::map<data::RogueGadgetDirType,std::weak_ptr<Gadget>>::end(&cell_ptr->door_entity_map)._M_node;
            while ( std::operator!=(
                      (const std::_Rb_tree_iterator<std::pair<const data::RogueGadgetDirType,std::weak_ptr<Gadget> > >::_Self *)&__for_begin,
                      (const std::_Rb_tree_iterator<std::pair<const data::RogueGadgetDirType,std::weak_ptr<Gadget> > >::_Self *)&__for_end) )
            {
              __in = std::_Rb_tree_iterator<std::pair<data::RogueGadgetDirType const,std::weak_ptr<Gadget>>>::operator*((const std::_Rb_tree_iterator<std::pair<const data::RogueGadgetDirType,std::weak_ptr<Gadget> > > *const)&__for_begin);
              dir = std::get<0ul,data::RogueGadgetDirType const,std::weak_ptr<Gadget>>(__in);
              door_wtr = std::get<1ul,data::RogueGadgetDirType const,std::weak_ptr<Gadget>>(__in);
              std::weak_ptr<Gadget>::lock((const std::weak_ptr<Gadget> *const)(v4 + 144));
              if ( !std::operator==<Gadget>(0LL, (const std::shared_ptr<Gadget> *)(v4 + 144)) )
              {
                v82 = std::operator<<<std::char_traits<char>>(v4 + 320, "{");
                if ( *(_BYTE *)(((unsigned __int64)dir >> 3) + 0x7FFF8000) != 0
                  && (char)(((unsigned __int8)dir & 7) + 3) >= *(_BYTE *)(((unsigned __int64)dir >> 3) + 0x7FFF8000) )
                {
                  __asan_report_load4(dir);
                }
                v83 = std::ostream::operator<<(v82, *(unsigned int *)dir);
                v84 = std::operator<<<std::char_traits<char>>(v83, ": ");
                v85 = std::__shared_ptr_access<Gadget,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Gadget,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 144));
                if ( *(_BYTE *)(((unsigned __int64)v85 >> 3) + 0x7FFF8000) )
                  __asan_report_load8();
                v86 = *(void (__fastcall ***)(std::string *, std::__shared_ptr_access<Gadget,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *))v85->baseclass_0;
                if ( *(_BYTE *)((*(_QWORD *)v85->baseclass_0 >> 3) + 0x7FFF8000LL) )
                  __asan_report_load8();
                (*v86)(&sep, v85);
                v87 = std::operator<<<char>(v84, &sep);
                v88 = std::operator<<<std::char_traits<char>>(v87, " state:");
                v89 = std::__shared_ptr_access<Gadget,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Gadget,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 144));
                State = Gadget::getState(v89);
                v91 = std::ostream::operator<<(v88, State);
                std::operator<<<std::char_traits<char>>(v91, "},");
                std::string::~string(&sep);
              }
              std::shared_ptr<Gadget>::~shared_ptr((std::shared_ptr<Gadget> *const)(v4 + 144));
              std::_Rb_tree_iterator<std::pair<data::RogueGadgetDirType const,std::weak_ptr<Gadget>>>::operator++((std::_Rb_tree_iterator<std::pair<const data::RogueGadgetDirType,std::weak_ptr<Gadget> > > *const)&__for_begin);
            }
            std::operator<<<std::char_traits<char>>(v4 + 320, "}");
            std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::str(v149, v4 + 304);
            std::string::operator=(ret_msg, v149);
            std::string::~string(v149);
            refreshed = 0;
            std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream(v4 + 304);
            v75 = 0;
          }
          else
          {
            std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream(v4 + 304);
            std::operator<<<std::char_traits<char>>(v4 + 320, &unk_26372A80);
            std::ostream::operator<<(v4 + 320, *(unsigned int *)(v4 + 48));
            std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::str(v148, v4 + 304);
            std::string::operator=(ret_msg, v148);
            std::string::~string(v148);
            refreshed = -1;
            std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream(v4 + 304);
            v75 = 0;
          }
        }
        else
        {
          v92 = std::vector<std::string>::operator[](param_vec, 2uLL);
          if ( std::operator==<char>(v92, off_26352320) )
          {
            if ( std::vector<std::string>::size(param_vec) > 4 )
            {
              *(_DWORD *)(v4 + 64) = 0;
              v93 = std::vector<std::string>::operator[](param_vec, 4uLL);
              if ( common::tools::StringUtils::strToNum<unsigned int>(v93, (unsigned int *)(v4 + 64), 1) )
              {
                std::string::operator=(ret_msg, "strToNum failed");
                refreshed = -1;
              }
              else
              {
                refreshed = RogueLikeDungeonRuntimeMgr::setCellStateByGm(
                              runtime_mgr,
                              *(_DWORD *)(v4 + 48),
                              *(proto::RogueCellState *)(v4 + 64));
              }
            }
            else
            {
              std::string::operator=(ret_msg, "param not enough");
              refreshed = -1;
            }
            v75 = 0;
          }
          else
          {
            v75 = 1;
          }
        }
      }
    }
  }
  std::shared_ptr<Scene>::~shared_ptr((std::shared_ptr<Scene> *const)(v4 + 112));
  if ( v75 == 1 )
    goto LABEL_187;
LABEL_188:
  std::shared_ptr<RoguelikeDungeonActivity>::~shared_ptr((std::shared_ptr<RoguelikeDungeonActivity> *const)(v4 + 80));
  result = refreshed;
  if ( v155 == (char *)v4 )
  {
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8008) = 0LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8010) = 0LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8018) = 0LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8020) = 0LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8054) = 0LL;
    *(_DWORD *)((v4 >> 3) + 0x7FFF805C) = 0;
  }
  else
  {
    *(_QWORD *)v4 = 1172321806LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8020) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8028) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8030) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8038) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8040) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8048) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8050) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8058) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 17827: range 0000000017D7D494-0000000017D7D536
void __cdecl procPlantFlowerActivityRegister::procPlantFlowerActivityRegister(
        procPlantFlowerActivityRegister *const this)
{
  std::function<int(GmContext&,const std::vector<std::string>&,std::string&)> *v1; // rax
  std::allocator<char> __a; // [rsp+1Fh] [rbp-31h] BYREF
  std::string __k; // [rsp+20h] [rbp-30h] BYREF

  std::allocator<char>::allocator(&__a);
  std::string::basic_string<std::allocator<char>>(&__k, "PLANT_FLOWER_ACTIVITY", &__a);
  v1 = std::unordered_map<std::string,std::function<int ()(GmContext &,std::vector<std::string> const&,std::string&)>>::operator[](
         &GmUtils::op_func_map[abi:cxx11],
         &__k);
  std::function<int ()(GmContext &,std::vector<std::string> const&,std::string&)>::operator=<int (&)(GmContext &,std::vector<std::string> const&,std::string&)>(
    v1,
    (int (*)(GmContext *, const std::vector<std::string> *, std::string *))procPlantFlowerActivity);
  std::string::~string(&__k);
  std::allocator<char>::~allocator(&__a);
};

// Line 17828: range 0000000017C4A05C-0000000017C4A23C
int32_t __cdecl procPlantFlowerActivity(
        GmContext *context,
        const std::vector<std::string> *param_vec,
        std::string *ret_msg)
{
  unsigned __int64 v3; // rbx
  __int64 v4; // rax
  unsigned __int64 v5; // r12
  int32_t v6; // r14d
  const std::string *v7; // rax
  PlantFlowerActivity *v8; // rax
  int32_t result; // eax
  char v11[112]; // [rsp+20h] [rbp-70h] BYREF

  v3 = (unsigned __int64)v11;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_0(64LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "1 32 16 18 activity_ptr:17829";
  *(_QWORD *)(v3 + 16) = procPlantFlowerActivity;
  v5 = v3 >> 3;
  *(_DWORD *)(v5 + 2147450880) = -235802127;
  *(_DWORD *)(v5 + 2147450884) = -202178560;
  if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
    __asan_report_load8();
  Player::getActivityComp(context->player);
  PlayerActivityComp::findOpenningActivity<PlantFlowerActivity>((PlayerActivityComp *const)(v3 + 32));
  if ( std::operator==<PlantFlowerActivity>(0LL, (const std::shared_ptr<PlantFlowerActivity> *)(v3 + 32)) )
  {
    std::string::operator=(ret_msg, "activity is not open");
    v6 = -1;
  }
  else if ( std::vector<std::string>::size(param_vec) )
  {
    v7 = std::vector<std::string>::operator[](param_vec, 0LL);
    if ( std::operator==<char>(v7, "CLEAR") )
    {
      v8 = std::__shared_ptr_access<PlantFlowerActivity,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<PlantFlowerActivity,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 32));
      v6 = PlantFlowerActivity::clearByGm(v8);
    }
    else
    {
      v6 = 0;
    }
  }
  else
  {
    std::string::operator=(ret_msg, "param not enough");
    v6 = -1;
  }
  std::shared_ptr<PlantFlowerActivity>::~shared_ptr((std::shared_ptr<PlantFlowerActivity> *const)(v3 + 32));
  result = v6;
  if ( v11 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 17848: range 0000000017D7D538-0000000017D7D5DA
void __cdecl procSetSGVValueRegister::procSetSGVValueRegister(procSetSGVValueRegister *const this)
{
  std::function<int(GmContext&,const std::vector<std::string>&,std::string&)> *v1; // rax
  std::allocator<char> __a; // [rsp+1Fh] [rbp-31h] BYREF
  std::string __k; // [rsp+20h] [rbp-30h] BYREF

  std::allocator<char>::allocator(&__a);
  std::string::basic_string<std::allocator<char>>(&__k, "SETSGVVALUE", &__a);
  v1 = std::unordered_map<std::string,std::function<int ()(GmContext &,std::vector<std::string> const&,std::string&)>>::operator[](
         &GmUtils::op_func_map[abi:cxx11],
         &__k);
  std::function<int ()(GmContext &,std::vector<std::string> const&,std::string&)>::operator=<int (&)(GmContext &,std::vector<std::string> const&,std::string&)>(
    v1,
    (int (*)(GmContext *, const std::vector<std::string> *, std::string *))procSetSGVValue);
  std::string::~string(&__k);
  std::allocator<char>::~allocator(&__a);
};

// Line 17849: range 0000000017C4A23D-0000000017C4AA66
int32_t __cdecl procSetSGVValue(GmContext *context, const std::vector<std::string> *param_vec, std::string *ret_msg)
{
  int32_t v3; // r14d
  unsigned __int64 v4; // r13
  __int64 v5; // rax
  _DWORD *v6; // r12
  const std::string *v8; // rax
  common::milog::MiLogStream *v9; // rdx
  std::vector<std::string>::const_reference v10; // rax
  std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v11; // rax
  bool v12; // r15
  common::milog::MiLogStream *v13; // rdx
  common::milog::MiLogStream *v14; // rax
  common::milog::MiLogStream *v15; // rax
  common::milog::MiLogStream *v16; // rax
  _BOOL4 v17; // r15d
  const std::string *v18; // rax
  common::milog::MiLogStream *v19; // rdx
  int v20; // r15d
  Creature *v21; // rcx
  common::tools::StringStream<common::tools::FixedBuffer<4096> > *v22; // rdx
  common::tools::StringStream<common::tools::FixedBuffer<4096> > *v23; // rax
  int32_t result; // eax
  const std::vector<std::string> *raw_param_vec; // [rsp+28h] [rbp-138h]
  common::milog::MiLogStream v27; // [rsp+30h] [rbp-130h] BYREF
  char v28[272]; // [rsp+50h] [rbp-110h] BYREF

  v4 = (unsigned __int64)v28;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v5 = __asan_stack_malloc_2(224LL);
    if ( v5 )
      v4 = v5;
  }
  *(_QWORD *)v4 = 1102416563LL;
  *(_QWORD *)(v4 + 8) = "6 32 4 15 entity_id:17859 48 4 15 sgv_value:17875 64 16 16 player_ptr:17858 96 16 18 creature_pt"
                        "r:17882 128 16 8 ss:17893 160 32 13 sgv_key:17868";
  *(_QWORD *)(v4 + 16) = procSetSGVValue;
  v6 = (_DWORD *)(v4 >> 3);
  v6[536862720] = -235802127;
  v6[536862721] = -234556924;
  v6[536862722] = -219021312;
  v6[536862723] = -219021312;
  v6[536862724] = -219021312;
  v6[536862726] = -202116109;
  raw_param_vec = &context->raw_param_vec;
  if ( std::vector<std::string>::empty(&context->raw_param_vec) || std::vector<std::string>::size(raw_param_vec) <= 2 )
  {
    common::milog::MiLogStream::create(
      &v27,
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/player/gm/player_gm_comp.cpp",
      "procSetSGVValue",
      17853);
    common::milog::MiLogStream::operator<<<char [17],(char *[17])0>(&v27, "param not enough");
    common::milog::MiLogStream::~MiLogStream(&v27);
    std::string::operator=(ret_msg, "SETSGV param not enough");
    v3 = -1;
  }
  else
  {
    if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
      __asan_report_load8();
    toThisPtr<Player>((Player *)(v4 + 64));
    *(_DWORD *)(v4 + 32) = 0;
    v8 = std::vector<std::string>::operator[](raw_param_vec, 0LL);
    if ( common::tools::StringUtils::strToNum<unsigned int>(v8, (unsigned int *)(v4 + 32), 1) )
    {
      common::milog::MiLogStream::create(
        &v27,
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/player/gm/player_gm_comp.cpp",
        "procSetSGVValue",
        17862);
      v9 = common::milog::MiLogStream::operator<<<char [15],(char *[15])0>(&v27, (const char (*)[15])"invalid param:");
      common::milog::MiLogStream::operator<<<std::string>(v9, raw_param_vec);
      common::milog::MiLogStream::~MiLogStream(&v27);
      std::string::operator=(ret_msg, "SETSGV entityid not valid");
      v3 = -1;
    }
    else if ( std::vector<std::string>::size(raw_param_vec) <= 2 )
    {
      std::string::operator=(ret_msg, "SETSGV param not enough");
      v3 = -1;
    }
    else
    {
      v10 = std::vector<std::string>::operator[](raw_param_vec, 1uLL);
      std::string::basic_string(v4 + 160, v10);
      ServiceBox::findService<GameserverService>();
      GameserverService::getConfig((GameserverService *const)(v4 + 128));
      v11 = std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 128));
      v12 = JsonConfigMgr::getAbilityHashFromString(
              &v11->design_config.json_config_mgr,
              (const std::string *)(v4 + 160)) == 0;
      std::shared_ptr<Config>::~shared_ptr((std::shared_ptr<Config> *const)(v4 + 128));
      if ( v12 )
      {
        common::milog::MiLogStream::create(
          &v27,
          &common::milog::MiLogDefault::default_log_obj_,
          3u,
          "./src/player/gm/player_gm_comp.cpp",
          "procSetSGVValue",
          17871);
        v13 = common::milog::MiLogStream::operator<<<char [15],(char *[15])0>(
                &v27,
                (const char (*)[15])"invalid param:");
        v14 = common::milog::MiLogStream::operator<<<std::string>(v13, raw_param_vec);
        v15 = common::milog::MiLogStream::operator<<<char [2],(char *[2])0>(v14, (const char (*)[2])" ");
        v16 = common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v15, (const std::string *)(v4 + 160));
        common::milog::MiLogStream::operator<<<char [14],(char *[14])0>(v16, (const char (*)[14])" not has hash");
        common::milog::MiLogStream::~MiLogStream(&v27);
        std::string::operator=(ret_msg, "SETSGV SGV_KEY not has ability hash");
        v3 = -1;
        v17 = 0;
      }
      else
      {
        *(_DWORD *)(v4 + 48) = 0;
        v18 = std::vector<std::string>::operator[](raw_param_vec, 2uLL);
        if ( common::tools::StringUtils::strToNum<unsigned int>(v18, (unsigned int *)(v4 + 48), 1) )
        {
          common::milog::MiLogStream::create(
            &v27,
            &common::milog::MiLogDefault::default_log_obj_,
            3u,
            "./src/player/gm/player_gm_comp.cpp",
            "procSetSGVValue",
            17878);
          v19 = common::milog::MiLogStream::operator<<<char [15],(char *[15])0>(
                  &v27,
                  (const char (*)[15])"invalid param:");
          common::milog::MiLogStream::operator<<<std::string>(v19, raw_param_vec);
          common::milog::MiLogStream::~MiLogStream(&v27);
          std::string::operator=(ret_msg, "SETSGV sgv value not valid");
          v3 = -1;
          v17 = 0;
        }
        else
        {
          if ( *(_BYTE *)(((unsigned __int64)&context->scene >> 3) + 0x7FFF8000) )
            __asan_report_load8();
          Scene::findEntity<Creature>((const Scene *const)(v4 + 96), (uint32_t)context->scene);
          if ( std::operator==<Creature>((const std::shared_ptr<Creature> *)(v4 + 96), 0LL) )
          {
            std::string::operator=(ret_msg, "entity not exist.");
            v3 = 504;
            v20 = 0;
          }
          else
          {
            v21 = std::__shared_ptr_access<Creature,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Creature,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 96));
            if ( Creature::setServerGlobalValue(v21, (const std::string *)(v4 + 160), (float)*(int *)(v4 + 48), 1) )
            {
              std::string::operator=(ret_msg, "setServerGlobalValue failed");
              v3 = -1;
              v20 = 0;
            }
            else
            {
              common::tools::StringStream<common::tools::FixedBuffer<4096>>::StringStream((common::tools::StringStream<common::tools::FixedBuffer<4096> > *const)(v4 + 128));
              v22 = common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(
                      (common::tools::StringStream<common::tools::FixedBuffer<4096> > *const)(v4 + 128),
                      "SETSGVVALUE exec [");
              v23 = common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<<std::string>(
                      v22,
                      raw_param_vec);
              common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(v23, "] succ.");
              common::tools::StringStream<common::tools::FixedBuffer<4096>>::str[abi:cxx11](
                (std::string *)&v27,
                (common::tools::StringStream<common::tools::FixedBuffer<4096> > *const)(v4 + 128));
              std::string::operator=(ret_msg, &v27);
              std::string::~string(&v27);
              common::tools::StringStream<common::tools::FixedBuffer<4096>>::~StringStream((common::tools::StringStream<common::tools::FixedBuffer<4096> > *const)(v4 + 128));
              v20 = 1;
            }
          }
          std::shared_ptr<Creature>::~shared_ptr((std::shared_ptr<Creature> *const)(v4 + 96));
          v17 = v20 == 1;
        }
      }
      std::string::~string((void *)(v4 + 160));
      if ( v17 )
        v3 = 0;
    }
    std::shared_ptr<Player>::~shared_ptr((std::shared_ptr<Player> *const)(v4 + 64));
  }
  result = v3;
  if ( v28 == (char *)v4 )
  {
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8008) = 0LL;
    *(_DWORD *)((v4 >> 3) + 0x7FFF8010) = 0;
    *(_DWORD *)((v4 >> 3) + 0x7FFF8018) = 0;
  }
  else
  {
    *(_QWORD *)v4 = 1172321806LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v4 >> 3) + 0x7FFF8018) = -168430091;
  }
  return result;
};

// Line 17906: range 0000000017D7D5DC-0000000017D7D67E
void __cdecl procDigActivityRegister::procDigActivityRegister(procDigActivityRegister *const this)
{
  std::function<int(GmContext&,const std::vector<std::string>&,std::string&)> *v1; // rax
  std::allocator<char> __a; // [rsp+1Fh] [rbp-31h] BYREF
  std::string __k; // [rsp+20h] [rbp-30h] BYREF

  std::allocator<char>::allocator(&__a);
  std::string::basic_string<std::allocator<char>>(&__k, off_26373220, &__a);
  v1 = std::unordered_map<std::string,std::function<int ()(GmContext &,std::vector<std::string> const&,std::string&)>>::operator[](
         &GmUtils::op_func_map[abi:cxx11],
         &__k);
  std::function<int ()(GmContext &,std::vector<std::string> const&,std::string&)>::operator=<int (&)(GmContext &,std::vector<std::string> const&,std::string&)>(
    v1,
    (int (*)(GmContext *, const std::vector<std::string> *, std::string *))procDigActivity);
  std::string::~string(&__k);
  std::allocator<char>::~allocator(&__a);
};

// Line 17907: range 0000000017C4AA67-0000000017C4B19A
int32_t __cdecl procDigActivity(GmContext *context, const std::vector<std::string> *param_vec, std::string *ret_msg)
{
  unsigned __int64 v3; // r13
  __int64 v4; // rax
  _DWORD *v5; // r12
  int32_t v6; // r14d
  const std::string *v7; // rax
  std::__shared_ptr_access<DigActivity,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v8; // rax
  const std::string *v9; // rax
  const std::string *v10; // rax
  DigActivity *v11; // rax
  const std::string *v12; // rax
  DigActivity *v13; // rax
  const std::string *v14; // rax
  std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v15; // rax
  const Vector3 *Position; // r14
  proto::Vector *v17; // rax
  PlayerWidgetComp *WidgetComp; // rax
  int32_t result; // eax
  proto::WidgetCreatorInfo *info; // [rsp+30h] [rbp-160h]
  proto::WidgetCreateLocationInfo *location_info; // [rsp+38h] [rbp-158h]
  char v23[336]; // [rsp+40h] [rbp-150h] BYREF

  v3 = (unsigned __int64)v23;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_3(288LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "6 48 4 14 group_id:17943 64 4 13 op_type:17959 80 16 18 activity_ptr:17908 112 16 16 avatar_ptr:"
                        "17974 144 32 9 rsp:17982 208 40 9 req:17966";
  *(_QWORD *)(v3 + 16) = procDigActivity;
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = -234556943;
  v5[536862722] = 61956;
  v5[536862723] = 62194;
  v5[536862724] = 62194;
  v5[536862725] = -219021312;
  v5[536862726] = 62194;
  v5[536862727] = -218103808;
  v5[536862728] = -202116109;
  if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
    __asan_report_load8();
  Player::getActivityComp(context->player);
  PlayerActivityComp::findOpenningActivity<DigActivity>((PlayerActivityComp *const)(v3 + 80));
  if ( std::operator==<DigActivity>(0LL, (const std::shared_ptr<DigActivity> *)(v3 + 80)) )
  {
    std::string::operator=(ret_msg, "activity is not open");
    v6 = -1;
    goto LABEL_36;
  }
  if ( !std::vector<std::string>::size(param_vec) )
    goto LABEL_23;
  v7 = std::vector<std::string>::operator[](param_vec, 0LL);
  if ( std::operator==<char>(v7, "CLEAR") )
  {
    v8 = std::__shared_ptr_access<DigActivity,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<DigActivity,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 80));
    BaseActivity::clear(v8);
    v6 = 0;
    goto LABEL_36;
  }
  v9 = std::vector<std::string>::operator[](param_vec, 0LL);
  if ( !std::operator==<char>(v9, "GADGET") )
    goto LABEL_35;
  if ( std::vector<std::string>::size(param_vec) <= 1 )
    goto LABEL_23;
  v10 = std::vector<std::string>::operator[](param_vec, 1uLL);
  if ( std::operator==<char>(v10, "CLEAR") )
  {
    v11 = std::__shared_ptr_access<DigActivity,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<DigActivity,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 80));
    DigActivity::clearSearchingGadget(v11);
    v6 = 0;
    goto LABEL_36;
  }
  v12 = std::vector<std::string>::operator[](param_vec, 1uLL);
  if ( std::operator==<char>(v12, off_26352320) )
  {
    if ( std::vector<std::string>::size(param_vec) > 3 )
    {
      *(_DWORD *)(v3 + 48) = 0;
      *(_DWORD *)(v3 + 64) = 0;
      if ( !common::tools::StringUtils::strVecToNum<2u,unsigned int,unsigned int &>(
              param_vec,
              (unsigned int *)(v3 + 48),
              (unsigned int *)(v3 + 64),
              (unsigned int *)(v3 + 48)) )
      {
        v13 = std::__shared_ptr_access<DigActivity,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<DigActivity,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 80));
        v6 = DigActivity::setSearchingTarget(v13, *(_DWORD *)(v3 + 48), *(_DWORD *)(v3 + 64));
        goto LABEL_36;
      }
LABEL_19:
      std::string::operator=(ret_msg, "strVecToNum fail.");
      v6 = -1;
      goto LABEL_36;
    }
LABEL_23:
    std::string::operator=(ret_msg, "param not enough");
    v6 = -1;
    goto LABEL_36;
  }
  v14 = std::vector<std::string>::operator[](param_vec, 1uLL);
  if ( std::operator==<char>(v14, "CREATE") )
  {
    if ( std::vector<std::string>::size(param_vec) <= 2 )
      goto LABEL_23;
    *(_DWORD *)(v3 + 64) = 0;
    if ( common::tools::StringUtils::strVecToNum<2u,unsigned int>(param_vec, (unsigned int *)(v3 + 64)) )
      goto LABEL_19;
    proto::WidgetDoBagReq::WidgetDoBagReq((proto::WidgetDoBagReq *const)(v3 + 208));
    proto::WidgetDoBagReq::set_material_id((proto::WidgetDoBagReq *const)(v3 + 208), 0x35B8Au);
    info = proto::WidgetDoBagReq::mutable_widget_creator_info((proto::WidgetDoBagReq *const)(v3 + 208));
    if ( *(_DWORD *)(v3 + 64) == 1 )
      proto::WidgetCreatorInfo::set_op_type(info, WIDGET_CREATOR_TYPE_RETRACT_AND_CREATE);
    location_info = proto::WidgetCreatorInfo::mutable_location_info(info);
    if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
      __asan_report_load8();
    Player::getAvatarComp(context->player);
    PlayerAvatarComp::getCurAvatar((const PlayerAvatarComp *const)(v3 + 112));
    if ( std::operator==<Avatar>((const std::shared_ptr<Avatar> *)(v3 + 112), 0LL) )
    {
      std::string::operator=(ret_msg, "getCurAvatar fail.");
      v6 = -1;
    }
    else
    {
      v15 = std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 112));
      Position = Entity::getPosition((const Entity *const)v15);
      v17 = proto::WidgetCreateLocationInfo::mutable_pos(location_info);
      Vector3::toClient(Position, v17);
      proto::WidgetDoBagRsp::WidgetDoBagRsp((proto::WidgetDoBagRsp *const)(v3 + 144));
      if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
        __asan_report_load8();
      WidgetComp = Player::getWidgetComp(context->player);
      PlayerWidgetComp::doBag(
        WidgetComp,
        (const proto::WidgetDoBagReq *)(v3 + 208),
        (proto::WidgetDoBagRsp *)(v3 + 144));
      v6 = proto::WidgetDoBagRsp::retcode((const proto::WidgetDoBagRsp *const)(v3 + 144));
      proto::WidgetDoBagRsp::~WidgetDoBagRsp((proto::WidgetDoBagRsp *const)(v3 + 144));
    }
    std::shared_ptr<Avatar>::~shared_ptr((std::shared_ptr<Avatar> *const)(v3 + 112));
    proto::WidgetDoBagReq::~WidgetDoBagReq((proto::WidgetDoBagReq *const)(v3 + 208));
  }
  else
  {
LABEL_35:
    v6 = -1;
  }
LABEL_36:
  std::shared_ptr<DigActivity>::~shared_ptr((std::shared_ptr<DigActivity> *const)(v3 + 80));
  result = v6;
  if ( v23 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8010) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8018) = 0LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8020) = 0;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8020) = -168430091;
  }
  return result;
};

// Line 17990: range 0000000017D7D680-0000000017D7D722
void __cdecl procWinterCampActivityRegister::procWinterCampActivityRegister(procWinterCampActivityRegister *const this)
{
  std::function<int(GmContext&,const std::vector<std::string>&,std::string&)> *v1; // rax
  std::allocator<char> __a; // [rsp+1Fh] [rbp-31h] BYREF
  std::string __k; // [rsp+20h] [rbp-30h] BYREF

  std::allocator<char>::allocator(&__a);
  std::string::basic_string<std::allocator<char>>(&__k, "WINTER", &__a);
  v1 = std::unordered_map<std::string,std::function<int ()(GmContext &,std::vector<std::string> const&,std::string&)>>::operator[](
         &GmUtils::op_func_map[abi:cxx11],
         &__k);
  std::function<int ()(GmContext &,std::vector<std::string> const&,std::string&)>::operator=<int (&)(GmContext &,std::vector<std::string> const&,std::string&)>(
    v1,
    (int (*)(GmContext *, const std::vector<std::string> *, std::string *))procWinterCampActivity);
  std::string::~string(&__k);
  std::allocator<char>::~allocator(&__a);
};

// Line 17991: range 0000000017C4B19B-0000000017C4B589
int32_t __cdecl procWinterCampActivity(
        GmContext *context,
        const std::vector<std::string> *param_vec,
        std::string *ret_msg)
{
  unsigned __int64 v3; // r12
  __int64 v4; // rax
  _DWORD *v5; // r13
  int32_t v6; // r14d
  const std::string *v7; // rax
  WinterCampActivity *v8; // rax
  const std::string *v9; // rax
  const std::string *v10; // rax
  WinterCampActivity *v11; // rax
  const std::string *v12; // rax
  WinterCampActivity *v13; // rax
  const std::string *v14; // rax
  WinterCampActivity *v15; // rax
  int32_t result; // eax
  char v18[144]; // [rsp+20h] [rbp-90h] BYREF

  v3 = (unsigned __int64)v18;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_1(96LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "3 32 4 8 id:18030 48 4 11 score:18031 64 16 18 activity_ptr:17992";
  *(_QWORD *)(v3 + 16) = procWinterCampActivity;
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = -234556924;
  v5[536862722] = -202178560;
  if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
    __asan_report_load8();
  Player::getActivityComp(context->player);
  PlayerActivityComp::findOpenningActivity<WinterCampActivity>((PlayerActivityComp *const)(v3 + 64));
  if ( std::operator==<WinterCampActivity>(0LL, (const std::shared_ptr<WinterCampActivity> *)(v3 + 64)) )
  {
    std::string::operator=(ret_msg, "activity is not open");
    v6 = -1;
    goto LABEL_25;
  }
  if ( !std::vector<std::string>::size(param_vec) )
    goto LABEL_20;
  v7 = std::vector<std::string>::operator[](param_vec, 0LL);
  if ( std::operator==<char>(v7, "CLEAR") )
  {
    v8 = std::__shared_ptr_access<WinterCampActivity,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<WinterCampActivity,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 64));
    WinterCampActivity::onGMClear(v8);
    v6 = 0;
    goto LABEL_25;
  }
  v9 = std::vector<std::string>::operator[](param_vec, 0LL);
  if ( std::operator==<char>(v9, "FINISH") )
  {
    if ( std::vector<std::string>::size(param_vec) <= 1 )
    {
LABEL_20:
      std::string::operator=(ret_msg, "param not enough");
      v6 = -1;
      goto LABEL_25;
    }
    v10 = std::vector<std::string>::operator[](param_vec, 1uLL);
    if ( std::operator==<char>(v10, "EXPLORE") )
    {
      v11 = std::__shared_ptr_access<WinterCampActivity,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<WinterCampActivity,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 64));
      v6 = WinterCampActivity::onGMFinishExplore(v11);
      goto LABEL_25;
    }
    v12 = std::vector<std::string>::operator[](param_vec, 1uLL);
    if ( std::operator==<char>(v12, "BATTLE") )
    {
      v13 = std::__shared_ptr_access<WinterCampActivity,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<WinterCampActivity,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 64));
      v6 = WinterCampActivity::onGMFinishBattle(v13);
      goto LABEL_25;
    }
    v14 = std::vector<std::string>::operator[](param_vec, 1uLL);
    if ( std::operator==<char>(v14, "RACE") )
    {
      if ( std::vector<std::string>::size(param_vec) > 3 )
      {
        *(_DWORD *)(v3 + 32) = 0;
        *(_DWORD *)(v3 + 48) = 0;
        if ( common::tools::StringUtils::strVecToNum<2u,unsigned int,unsigned int &>(
               param_vec,
               (unsigned int *)(v3 + 32),
               (unsigned int *)(v3 + 48),
               (unsigned int *)(v3 + 32)) )
        {
          std::string::operator=(ret_msg, "strVecToNum fail.");
          v6 = -1;
        }
        else
        {
          v15 = std::__shared_ptr_access<WinterCampActivity,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<WinterCampActivity,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 64));
          v6 = WinterCampActivity::onGMFinishRace(v15, *(_DWORD *)(v3 + 32), *(_DWORD *)(v3 + 48));
        }
        goto LABEL_25;
      }
      goto LABEL_20;
    }
  }
  v6 = -1;
LABEL_25:
  std::shared_ptr<WinterCampActivity>::~shared_ptr((std::shared_ptr<WinterCampActivity> *const)(v3 + 64));
  result = v6;
  if ( v18 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8008) = 0;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8008) = -168430091;
  }
  return result;
};

// Line 18043: range 0000000017D7D724-0000000017D7D7C6
void __cdecl procBirthdayRegister::procBirthdayRegister(procBirthdayRegister *const this)
{
  std::function<int(GmContext&,const std::vector<std::string>&,std::string&)> *v1; // rax
  std::allocator<char> __a; // [rsp+1Fh] [rbp-31h] BYREF
  std::string __k; // [rsp+20h] [rbp-30h] BYREF

  std::allocator<char>::allocator(&__a);
  std::string::basic_string<std::allocator<char>>(&__k, "BIRTHDAY", &__a);
  v1 = std::unordered_map<std::string,std::function<int ()(GmContext &,std::vector<std::string> const&,std::string&)>>::operator[](
         &GmUtils::op_func_map[abi:cxx11],
         &__k);
  std::function<int ()(GmContext &,std::vector<std::string> const&,std::string&)>::operator=<int (&)(GmContext &,std::vector<std::string> const&,std::string&)>(
    v1,
    (int (*)(GmContext *, const std::vector<std::string> *, std::string *))procBirthday);
  std::string::~string(&__k);
  std::allocator<char>::~allocator(&__a);
};

// Line 18044: range 0000000017C4B58A-0000000017C4BCAC
int32_t __cdecl procBirthday(GmContext *context, const std::vector<std::string> *param_vec, std::string *ret_msg)
{
  unsigned __int64 v3; // r12
  __int64 v4; // rax
  _DWORD *v5; // r13
  int32_t v6; // r14d
  const std::string *v7; // rax
  const std::string *v8; // rax
  common::tools::StringStream<common::tools::FixedBuffer<4096> > *v9; // r14
  const std::string *v10; // rax
  Player *player; // r14
  const std::string *v12; // rax
  common::tools::StringStream<common::tools::FixedBuffer<4096> > *v13; // r14
  const std::string *v14; // rax
  const std::string *v15; // rax
  Player *v16; // rbx
  const std::string *v17; // rax
  const char *v18; // rax
  common::tools::StringStream<common::tools::FixedBuffer<4096> > *v19; // rax
  common::tools::StringStream<common::tools::FixedBuffer<4096> > *v20; // rax
  common::tools::StringStream<common::tools::FixedBuffer<4096> > *v21; // r14
  int32_t result; // eax
  std::allocator<char> __a; // [rsp+2Eh] [rbp-D2h] BYREF
  bool is_minor; // [rsp+2Fh] [rbp-D1h]
  common::milog::MiLogStream v26; // [rsp+30h] [rbp-D0h] BYREF
  char v27[176]; // [rsp+50h] [rbp-B0h] BYREF

  v3 = (unsigned __int64)v27;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_1(128LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "2 32 16 8 ss:18081 64 32 13 tmp_str:18082";
  *(_QWORD *)(v3 + 16) = procBirthday;
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = -219021312;
  v5[536862723] = -202116109;
  if ( std::vector<std::string>::empty(param_vec) )
  {
    common::milog::MiLogStream::create(
      &v26,
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/player/gm/player_gm_comp.cpp",
      "procBirthday",
      18047);
    common::milog::MiLogStream::operator<<<char [17],(char *[17])0>(&v26, "param not enough");
    common::milog::MiLogStream::~MiLogStream(&v26);
    v6 = -1;
  }
  else
  {
    v7 = std::vector<std::string>::operator[](param_vec, 0LL);
    if ( std::operator==<char>(v7, off_26352320) )
    {
      if ( std::vector<std::string>::size(param_vec) > 1 )
      {
        common::tools::StringStream<common::tools::FixedBuffer<4096>>::StringStream((common::tools::StringStream<common::tools::FixedBuffer<4096> > *const)(v3 + 32));
        v8 = std::vector<std::string>::operator[](param_vec, 1uLL);
        if ( !common::tools::TimeUtils::isDayStrValid(v8) )
        {
          v9 = common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(
                 (common::tools::StringStream<common::tools::FixedBuffer<4096> > *const)(v3 + 32),
                 &byte_26373560);
          v10 = std::vector<std::string>::operator[](param_vec, 1uLL);
          common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(v9, v10);
          common::tools::StringStream<common::tools::FixedBuffer<4096>>::str[abi:cxx11](
            (std::string *)(v3 + 64),
            (common::tools::StringStream<common::tools::FixedBuffer<4096> > *const)(v3 + 32));
          std::string::operator=(ret_msg, v3 + 64);
          std::string::~string((void *)(v3 + 64));
          v6 = 0;
        }
        else
        {
          if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
            __asan_report_load8();
          player = context->player;
          v12 = std::vector<std::string>::operator[](param_vec, 1uLL);
          Player::setBirthday(player, v12);
          v13 = common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(
                  (common::tools::StringStream<common::tools::FixedBuffer<4096> > *const)(v3 + 32),
                  &byte_263735A0);
          v14 = std::vector<std::string>::operator[](param_vec, 1uLL);
          common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(v13, v14);
          common::tools::StringStream<common::tools::FixedBuffer<4096>>::str[abi:cxx11](
            (std::string *)&v26,
            (common::tools::StringStream<common::tools::FixedBuffer<4096> > *const)(v3 + 32));
          std::string::operator=(ret_msg, &v26);
          std::string::~string(&v26);
          v6 = 0;
        }
        common::tools::StringStream<common::tools::FixedBuffer<4096>>::~StringStream((common::tools::StringStream<common::tools::FixedBuffer<4096> > *const)(v3 + 32));
      }
      else
      {
        common::milog::MiLogStream::create(
          &v26,
          &common::milog::MiLogDefault::default_log_obj_,
          3u,
          "./src/player/gm/player_gm_comp.cpp",
          "procBirthday",
          18055);
        common::milog::MiLogStream::operator<<<char [17],(char *[17])0>(&v26, "param not enough");
        common::milog::MiLogStream::~MiLogStream(&v26);
        v6 = -1;
      }
    }
    else
    {
      v15 = std::vector<std::string>::operator[](param_vec, 0LL);
      if ( std::operator==<char>(v15, "CLEAR") )
      {
        if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
          __asan_report_load8();
        v16 = context->player;
        std::allocator<char>::allocator(&__a);
        std::string::basic_string<std::allocator<char>>((std::string *const)&v26, byte_262D4440, &__a);
        Player::setBirthday(v16, (const std::string *)&v26);
        std::string::~string(&v26);
        std::allocator<char>::~allocator(&__a);
        std::string::operator=(ret_msg, &unk_263735E0);
        v6 = 0;
      }
      else
      {
        v17 = std::vector<std::string>::operator[](param_vec, 0LL);
        if ( std::operator==<char>(v17, "PRINT") )
        {
          if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
            __asan_report_load8();
          is_minor = Player::isMinor(context->player);
          common::tools::StringStream<common::tools::FixedBuffer<4096>>::StringStream((common::tools::StringStream<common::tools::FixedBuffer<4096> > *const)(v3 + 32));
          std::allocator<char>::allocator(&__a);
          if ( is_minor )
            v18 = &byte_26373620;
          else
            v18 = (const char *)&unk_26373660;
          std::string::basic_string<std::allocator<char>>((std::string *const)(v3 + 64), v18, &__a);
          std::allocator<char>::~allocator(&__a);
          v19 = common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(
                  (common::tools::StringStream<common::tools::FixedBuffer<4096> > *const)(v3 + 32),
                  &byte_263736A0);
          v20 = common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(
                  v19,
                  (const std::string *)(v3 + 64));
          v21 = common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(v20, asc_263736E0);
          if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
            __asan_report_load8();
          Player::getBirthday[abi:cxx11]((std::string *)&v26, context->player);
          common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(v21, (const std::string *)&v26);
          std::string::~string(&v26);
          common::tools::StringStream<common::tools::FixedBuffer<4096>>::str[abi:cxx11](
            (std::string *)&v26,
            (common::tools::StringStream<common::tools::FixedBuffer<4096> > *const)(v3 + 32));
          std::string::operator=(ret_msg, &v26);
          std::string::~string(&v26);
          v6 = 0;
          std::string::~string((void *)(v3 + 64));
          common::tools::StringStream<common::tools::FixedBuffer<4096>>::~StringStream((common::tools::StringStream<common::tools::FixedBuffer<4096> > *const)(v3 + 32));
        }
        else
        {
          v6 = 0;
        }
      }
    }
  }
  result = v6;
  if ( v27 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF800C) = 0;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 18091: range 0000000017D7D7C8-0000000017D7D86A
void __cdecl procLevelTagRegister::procLevelTagRegister(procLevelTagRegister *const this)
{
  std::function<int(GmContext&,const std::vector<std::string>&,std::string&)> *v1; // rax
  std::allocator<char> __a; // [rsp+1Fh] [rbp-31h] BYREF
  std::string __k; // [rsp+20h] [rbp-30h] BYREF

  std::allocator<char>::allocator(&__a);
  std::string::basic_string<std::allocator<char>>(&__k, "LEVEL_TAG", &__a);
  v1 = std::unordered_map<std::string,std::function<int ()(GmContext &,std::vector<std::string> const&,std::string&)>>::operator[](
         &GmUtils::op_func_map[abi:cxx11],
         &__k);
  std::function<int ()(GmContext &,std::vector<std::string> const&,std::string&)>::operator=<int (&)(GmContext &,std::vector<std::string> const&,std::string&)>(
    v1,
    (int (*)(GmContext *, const std::vector<std::string> *, std::string *))procLevelTag);
  std::string::~string(&__k);
  std::allocator<char>::~allocator(&__a);
};

// Line 18092: range 0000000017C4BCAD-0000000017C4C450
int32_t __cdecl procLevelTag(GmContext *context, const std::vector<std::string> *param_vec, std::string *ret_msg)
{
  unsigned __int64 v3; // r13
  __int64 v4; // rax
  _DWORD *v5; // r12
  int32_t v6; // r14d
  const std::string *v7; // rax
  const std::string *v8; // rax
  common::milog::MiLogStream *v9; // rbx
  const std::string *v10; // rax
  const std::string *v11; // rax
  common::milog::MiLogStream *v13; // rbx
  const std::string *v14; // rax
  PlayerSceneComp *v15; // rax
  const std::string *v16; // rax
  PlayerSceneComp *v17; // rax
  const std::string *v18; // rax
  common::milog::MiLogStream *v19; // r14
  const std::string *v20; // rax
  PlayerSceneComp *SceneComp; // rax
  common::tools::StringStream<common::tools::FixedBuffer<4096> > *v22; // rax
  int32_t result; // eax
  std::vector<unsigned int> __x; // [rsp+20h] [rbp-130h] BYREF
  std::vector<unsigned int> v26; // [rsp+40h] [rbp-110h] BYREF
  common::milog::MiLogStream v27; // [rsp+60h] [rbp-F0h] BYREF
  char v28[208]; // [rsp+80h] [rbp-D0h] BYREF

  v3 = (unsigned __int64)v28;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_2(160LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "4 32 1 17 is_check_cd:18114 48 4 15 series_id:18132 64 16 8 ss:18141 96 24 22 level_tag_id_vec:18125";
  *(_QWORD *)(v3 + 16) = procLevelTag;
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = -234556927;
  v5[536862722] = -219021312;
  v5[536862723] = -218103808;
  v5[536862724] = -202116109;
  if ( std::vector<std::string>::empty(param_vec) )
  {
    common::milog::MiLogStream::create(
      &v27,
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/player/gm/player_gm_comp.cpp",
      "procLevelTag",
      18095);
    common::milog::MiLogStream::operator<<<char [17],(char *[17])0>(&v27, "param not enough");
    common::milog::MiLogStream::~MiLogStream(&v27);
    v6 = -1;
    goto LABEL_33;
  }
  v7 = std::vector<std::string>::operator[](param_vec, 0LL);
  if ( !std::operator==<char>(v7, "CHANGE") )
  {
    v16 = std::vector<std::string>::operator[](param_vec, 0LL);
    if ( !std::operator==<char>(v16, "LIST") )
    {
      v6 = 0;
      goto LABEL_33;
    }
    std::vector<unsigned int>::vector((std::vector<unsigned int> *const)(v3 + 96));
    if ( std::vector<std::string>::size(param_vec) > 1 )
    {
      *(_DWORD *)(v3 + 48) = 0;
      v18 = std::vector<std::string>::operator[](param_vec, 1uLL);
      if ( common::tools::StringUtils::strToNum<unsigned int>(v18, (unsigned int *)(v3 + 48), 1) )
      {
        common::milog::MiLogStream::create(
          &v27,
          &common::milog::MiLogDefault::default_log_obj_,
          3u,
          "./src/player/gm/player_gm_comp.cpp",
          "procLevelTag",
          18135);
        v19 = common::milog::MiLogStream::operator<<<char [15],(char *[15])0>(
                &v27,
                (const char (*)[15])"invalid param:");
        v20 = std::vector<std::string>::operator[](param_vec, 1uLL);
        common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v19, v20);
        common::milog::MiLogStream::~MiLogStream(&v27);
        v6 = -1;
LABEL_31:
        std::vector<unsigned int>::~vector((std::vector<unsigned int> *const)(v3 + 96));
        goto LABEL_33;
      }
      if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
        __asan_report_load8();
      SceneComp = Player::getSceneComp(context->player);
      PlayerSceneComp::getCurLevelTagIdVecBySeriesId(&v26, SceneComp, *(_DWORD *)(v3 + 48));
      std::vector<unsigned int>::operator=((std::vector<unsigned int> *const)(v3 + 96), &v26);
      std::vector<unsigned int>::~vector(&v26);
    }
    else
    {
      if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
        __asan_report_load8();
      v17 = Player::getSceneComp(context->player);
      PlayerSceneComp::getCurLevelTagIdVec(&__x, v17);
      std::vector<unsigned int>::operator=((std::vector<unsigned int> *const)(v3 + 96), &__x);
      std::vector<unsigned int>::~vector(&__x);
    }
    common::tools::StringStream<common::tools::FixedBuffer<4096>>::StringStream((common::tools::StringStream<common::tools::FixedBuffer<4096> > *const)(v3 + 64));
    v22 = common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(
            (common::tools::StringStream<common::tools::FixedBuffer<4096> > *const)(v3 + 64),
            &byte_26373820);
    common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<<unsigned int>(
      v22,
      (const std::vector<unsigned int> *)(v3 + 96));
    common::tools::StringStream<common::tools::FixedBuffer<4096>>::str[abi:cxx11](
      (std::string *)&v27,
      (common::tools::StringStream<common::tools::FixedBuffer<4096> > *const)(v3 + 64));
    std::string::operator=(ret_msg, &v27);
    std::string::~string(&v27);
    v6 = 0;
    common::tools::StringStream<common::tools::FixedBuffer<4096>>::~StringStream((common::tools::StringStream<common::tools::FixedBuffer<4096> > *const)(v3 + 64));
    goto LABEL_31;
  }
  if ( std::vector<std::string>::size(param_vec) > 1 )
  {
    *(_DWORD *)(v3 + 48) = 0;
    v8 = std::vector<std::string>::operator[](param_vec, 1uLL);
    if ( common::tools::StringUtils::strToNum<unsigned int>(v8, (unsigned int *)(v3 + 48), 1) )
    {
      common::milog::MiLogStream::create(
        &v27,
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/player/gm/player_gm_comp.cpp",
        "procLevelTag",
        18110);
      v9 = common::milog::MiLogStream::operator<<<char [15],(char *[15])0>(&v27, (const char (*)[15])"invalid param:");
      v10 = std::vector<std::string>::operator[](param_vec, 1uLL);
      common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v9, v10);
      common::milog::MiLogStream::~MiLogStream(&v27);
      v6 = -1;
    }
    else
    {
      *(_BYTE *)(v3 + 32) = 0;
      if ( std::vector<std::string>::size(param_vec) > 2
        && (v11 = std::vector<std::string>::operator[](param_vec, 2uLL),
            common::tools::StringUtils::strToNum<bool>(v11, (bool *)(v3 + 32), 1)) )
      {
        common::milog::MiLogStream::create(
          &v27,
          &common::milog::MiLogDefault::default_log_obj_,
          3u,
          "./src/player/gm/player_gm_comp.cpp",
          "procLevelTag",
          18117);
        v13 = common::milog::MiLogStream::operator<<<char [15],(char *[15])0>(
                &v27,
                (const char (*)[15])"invalid param:");
        v14 = std::vector<std::string>::operator[](param_vec, 2uLL);
        common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v13, v14);
        common::milog::MiLogStream::~MiLogStream(&v27);
        v6 = -1;
      }
      else
      {
        if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
          __asan_report_load8();
        v15 = Player::getSceneComp(context->player);
        v6 = PlayerSceneComp::changeToTargetLevelTag(v15, *(_DWORD *)(v3 + 48), *(_BYTE *)(v3 + 32), 0LL);
      }
    }
  }
  else
  {
    common::milog::MiLogStream::create(
      &v27,
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/player/gm/player_gm_comp.cpp",
      "procLevelTag",
      18103);
    common::milog::MiLogStream::operator<<<char [17],(char *[17])0>(&v27, "param not enough");
    common::milog::MiLogStream::~MiLogStream(&v27);
    v6 = -1;
  }
LABEL_33:
  result = v6;
  if ( v28 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8010) = 0;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8010) = -168430091;
  }
  return result;
};

// Line 18150: range 0000000017D7D86C-0000000017D7D90E
void __cdecl procPotionActivityRegister::procPotionActivityRegister(procPotionActivityRegister *const this)
{
  std::function<int(GmContext&,const std::vector<std::string>&,std::string&)> *v1; // rax
  std::allocator<char> __a; // [rsp+1Fh] [rbp-31h] BYREF
  std::string __k; // [rsp+20h] [rbp-30h] BYREF

  std::allocator<char>::allocator(&__a);
  std::string::basic_string<std::allocator<char>>(&__k, "POTION_ACTIVITY", &__a);
  v1 = std::unordered_map<std::string,std::function<int ()(GmContext &,std::vector<std::string> const&,std::string&)>>::operator[](
         &GmUtils::op_func_map[abi:cxx11],
         &__k);
  std::function<int ()(GmContext &,std::vector<std::string> const&,std::string&)>::operator=<int (&)(GmContext &,std::vector<std::string> const&,std::string&)>(
    v1,
    (int (*)(GmContext *, const std::vector<std::string> *, std::string *))procPotionActivity);
  std::string::~string(&__k);
  std::allocator<char>::~allocator(&__a);
};

// Line 18151: range 0000000017C4C451-0000000017C4D48A
int32_t __cdecl procPotionActivity(GmContext *context, const std::vector<std::string> *param_vec, std::string *ret_msg)
{
  unsigned __int64 v3; // r14
  __int64 v4; // rax
  _DWORD *v5; // r12
  int32_t restarted; // r13d
  const std::string *v7; // rax
  const std::string *v8; // rax
  common::milog::MiLogStream *v9; // r13
  const std::string *v10; // rax
  const std::string *v11; // rax
  common::milog::MiLogStream *v12; // r13
  const std::string *v13; // rax
  const std::string *v14; // rax
  PotionActivity *v15; // rax
  const std::string *v16; // rax
  const std::string *v17; // rax
  common::milog::MiLogStream *v18; // r13
  const std::string *v19; // rax
  PotionActivity *v20; // rax
  const std::string *v21; // rax
  const std::string *v22; // rax
  common::milog::MiLogStream *v23; // r13
  const std::string *v24; // rax
  PotionActivity *v25; // rax
  const std::string *v26; // rax
  const std::string *v27; // rax
  common::milog::MiLogStream *v28; // r13
  const std::string *v29; // rax
  const std::string *v30; // rax
  common::milog::MiLogStream *v31; // r13
  const std::string *v32; // rax
  PotionActivity *v33; // rax
  const std::string *v34; // rax
  unsigned int *v35; // r8
  unsigned int *v36; // r9
  common::milog::MiLogStream *v37; // rdx
  PotionActivity *v38; // rax
  const std::string *v39; // rax
  PotionActivity *v40; // rax
  int32_t result; // eax
  uint32_t idx; // [rsp+24h] [rbp-1FCh]
  proto::PotionAvatarInfo *avatar_info; // [rsp+28h] [rbp-1F8h]
  char v45[496]; // [rsp+30h] [rbp-1F0h] BYREF

  v3 = (unsigned __int64)v45;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_3(448LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "9 32 4 14 stage_id:18270 48 4 14 level_id:18271 64 4 11 score:18272 80 8 15 avatar_id:18190 112 "
                        "16 18 activity_ptr:18158 144 24 9 req:18234 208 32 9 req:18246 272 32 9 rsp:18236 336 80 9 req:18172";
  *(_QWORD *)(v3 + 16) = procPotionActivity;
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = -234556924;
  v5[536862722] = 61956;
  v5[536862722] = -234881024;
  v5[536862723] = 62194;
  v5[536862724] = 62194;
  v5[536862725] = -218959360;
  v5[536862726] = 62194;
  v5[536862727] = -219021312;
  v5[536862728] = 62194;
  v5[536862729] = -219021312;
  v5[536862730] = 62194;
  v5[536862733] = -202116109;
  if ( std::vector<std::string>::empty(param_vec) )
  {
    common::milog::MiLogStream::create(
      (common::milog::MiLogStream *)(v3 + 272),
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/player/gm/player_gm_comp.cpp",
      "procPotionActivity",
      18154);
    common::milog::MiLogStream::operator<<<char [17],(char *[17])0>(
      (common::milog::MiLogStream *const)(v3 + 272),
      "param not enough");
    common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v3 + 272));
    restarted = -1;
  }
  else
  {
    if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
      __asan_report_load8();
    Player::getActivityComp(context->player);
    PlayerActivityComp::findOpenningActivity<PotionActivity>((PlayerActivityComp *const)(v3 + 112));
    if ( std::operator==<PotionActivity>(0LL, (const std::shared_ptr<PotionActivity> *)(v3 + 112)) )
    {
      std::string::operator=(ret_msg, "channller slab activity is not open");
      restarted = -1;
    }
    else
    {
      v7 = std::vector<std::string>::operator[](param_vec, 0LL);
      if ( std::operator==<char>(v7, "ENTER_DUNGEON") )
      {
        if ( std::vector<std::string>::size(param_vec) > 2 )
        {
          proto::PotionEnterDungeonReq::PotionEnterDungeonReq((proto::PotionEnterDungeonReq *const)(v3 + 336));
          proto::PotionEnterDungeonReq::set_mode_id((proto::PotionEnterDungeonReq *const)(v3 + 336), 1u);
          *(_DWORD *)(v3 + 48) = 0;
          v8 = std::vector<std::string>::operator[](param_vec, 1uLL);
          if ( common::tools::StringUtils::strToNum<unsigned int>(v8, (unsigned int *)(v3 + 48), 1) )
          {
            common::milog::MiLogStream::create(
              (common::milog::MiLogStream *)(v3 + 272),
              &common::milog::MiLogDefault::default_log_obj_,
              3u,
              "./src/player/gm/player_gm_comp.cpp",
              "procPotionActivity",
              18177);
            v9 = common::milog::MiLogStream::operator<<<char [15],(char *[15])0>(
                   (common::milog::MiLogStream *const)(v3 + 272),
                   (const char (*)[15])"invalid param:");
            v10 = std::vector<std::string>::operator[](param_vec, 1uLL);
            common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v9, v10);
            common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v3 + 272));
            restarted = -1;
          }
          else
          {
            proto::PotionEnterDungeonReq::set_stage_id(
              (proto::PotionEnterDungeonReq *const)(v3 + 336),
              *(_DWORD *)(v3 + 48));
            *(_DWORD *)(v3 + 64) = 0;
            v11 = std::vector<std::string>::operator[](param_vec, 2uLL);
            if ( common::tools::StringUtils::strToNum<unsigned int>(v11, (unsigned int *)(v3 + 64), 1) )
            {
              common::milog::MiLogStream::create(
                (common::milog::MiLogStream *)(v3 + 272),
                &common::milog::MiLogDefault::default_log_obj_,
                3u,
                "./src/player/gm/player_gm_comp.cpp",
                "procPotionActivity",
                18184);
              v12 = common::milog::MiLogStream::operator<<<char [15],(char *[15])0>(
                      (common::milog::MiLogStream *const)(v3 + 272),
                      (const char (*)[15])"invalid param:");
              v13 = std::vector<std::string>::operator[](param_vec, 2uLL);
              common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v12, v13);
              common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v3 + 272));
              restarted = -1;
            }
            else
            {
              proto::PotionEnterDungeonReq::set_level_id(
                (proto::PotionEnterDungeonReq *const)(v3 + 336),
                *(_DWORD *)(v3 + 64));
              for ( idx = 3; idx < std::vector<std::string>::size(param_vec); ++idx )
              {
                *(_QWORD *)(v3 + 80) = 0LL;
                v14 = std::vector<std::string>::operator[](param_vec, idx);
                if ( common::tools::StringUtils::strToNum<unsigned long>(v14, (unsigned __int64 *)(v3 + 80), 1) )
                {
                  std::string::operator=(ret_msg, "param uid invalid");
                  restarted = -1;
                  goto LABEL_25;
                }
                avatar_info = proto::PotionEnterDungeonReq::add_avatar_info_list((proto::PotionEnterDungeonReq *const)(v3 + 336));
                proto::PotionAvatarInfo::set_is_trial(avatar_info, 1);
                proto::PotionAvatarInfo::set_avatar_id(avatar_info, *(_QWORD *)(v3 + 80));
                if ( *(_QWORD *)(v3 + 80) > 0x2710uLL )
                  proto::PotionAvatarInfo::set_is_trial(avatar_info, 0);
              }
              v15 = std::__shared_ptr_access<PotionActivity,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<PotionActivity,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 112));
              restarted = PotionActivity::enterPotionDungeon(v15, (const proto::PotionEnterDungeonReq *)(v3 + 336));
            }
          }
LABEL_25:
          proto::PotionEnterDungeonReq::~PotionEnterDungeonReq((proto::PotionEnterDungeonReq *const)(v3 + 336));
        }
        else
        {
          common::milog::MiLogStream::create(
            (common::milog::MiLogStream *)(v3 + 272),
            &common::milog::MiLogDefault::default_log_obj_,
            3u,
            "./src/player/gm/player_gm_comp.cpp",
            "procPotionActivity",
            18169);
          common::milog::MiLogStream::operator<<<char [17],(char *[17])0>(
            (common::milog::MiLogStream *const)(v3 + 272),
            "param not enough");
          common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v3 + 272));
          restarted = -1;
        }
      }
      else
      {
        v16 = std::vector<std::string>::operator[](param_vec, 0LL);
        if ( std::operator==<char>(v16, "OPEN_STAGE") )
        {
          if ( std::vector<std::string>::size(param_vec) > 1 )
          {
            *(_DWORD *)(v3 + 64) = 0;
            v17 = std::vector<std::string>::operator[](param_vec, 1uLL);
            if ( common::tools::StringUtils::strToNum<unsigned int>(v17, (unsigned int *)(v3 + 64), 1) )
            {
              common::milog::MiLogStream::create(
                (common::milog::MiLogStream *)(v3 + 272),
                &common::milog::MiLogDefault::default_log_obj_,
                3u,
                "./src/player/gm/player_gm_comp.cpp",
                "procPotionActivity",
                18216);
              v18 = common::milog::MiLogStream::operator<<<char [15],(char *[15])0>(
                      (common::milog::MiLogStream *const)(v3 + 272),
                      (const char (*)[15])"invalid param:");
              v19 = std::vector<std::string>::operator[](param_vec, 1uLL);
              common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v18, v19);
              common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v3 + 272));
              restarted = -1;
            }
            else
            {
              v20 = std::__shared_ptr_access<PotionActivity,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<PotionActivity,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 112));
              restarted = PotionActivity::openStage(v20, *(_DWORD *)(v3 + 64));
            }
          }
          else
          {
            common::milog::MiLogStream::create(
              (common::milog::MiLogStream *)(v3 + 272),
              &common::milog::MiLogDefault::default_log_obj_,
              3u,
              "./src/player/gm/player_gm_comp.cpp",
              "procPotionActivity",
              18210);
            common::milog::MiLogStream::operator<<<char [17],(char *[17])0>(
              (common::milog::MiLogStream *const)(v3 + 272),
              "param not enough");
            common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v3 + 272));
            restarted = -1;
          }
        }
        else
        {
          v21 = std::vector<std::string>::operator[](param_vec, 0LL);
          if ( std::operator==<char>(v21, "RESET_CHALLENGE") )
          {
            if ( std::vector<std::string>::size(param_vec) > 1 )
            {
              *(_DWORD *)(v3 + 64) = 0;
              v22 = std::vector<std::string>::operator[](param_vec, 1uLL);
              if ( common::tools::StringUtils::strToNum<unsigned int>(v22, (unsigned int *)(v3 + 64), 1) )
              {
                common::milog::MiLogStream::create(
                  (common::milog::MiLogStream *)(v3 + 272),
                  &common::milog::MiLogDefault::default_log_obj_,
                  3u,
                  "./src/player/gm/player_gm_comp.cpp",
                  "procPotionActivity",
                  18231);
                v23 = common::milog::MiLogStream::operator<<<char [15],(char *[15])0>(
                        (common::milog::MiLogStream *const)(v3 + 272),
                        (const char (*)[15])"invalid param:");
                v24 = std::vector<std::string>::operator[](param_vec, 1uLL);
                common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v23, v24);
                common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v3 + 272));
                restarted = -1;
              }
              else
              {
                proto::PotionResetChallengeReq::PotionResetChallengeReq((proto::PotionResetChallengeReq *const)(v3 + 144));
                proto::PotionResetChallengeReq::set_stage_id(
                  (proto::PotionResetChallengeReq *const)(v3 + 144),
                  *(_DWORD *)(v3 + 64));
                proto::PotionResetChallengeRsp::PotionResetChallengeRsp((proto::PotionResetChallengeRsp *const)(v3 + 272));
                v25 = std::__shared_ptr_access<PotionActivity,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<PotionActivity,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 112));
                restarted = PotionActivity::resetChallenge(
                              v25,
                              (const proto::PotionResetChallengeReq *)(v3 + 144),
                              (proto::PotionResetChallengeRsp *)(v3 + 272));
                proto::PotionResetChallengeRsp::~PotionResetChallengeRsp((proto::PotionResetChallengeRsp *const)(v3 + 272));
                proto::PotionResetChallengeReq::~PotionResetChallengeReq((proto::PotionResetChallengeReq *const)(v3 + 144));
              }
            }
            else
            {
              common::milog::MiLogStream::create(
                (common::milog::MiLogStream *)(v3 + 272),
                &common::milog::MiLogDefault::default_log_obj_,
                3u,
                "./src/player/gm/player_gm_comp.cpp",
                "procPotionActivity",
                18225);
              common::milog::MiLogStream::operator<<<char [17],(char *[17])0>(
                (common::milog::MiLogStream *const)(v3 + 272),
                "param not enough");
              common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v3 + 272));
              restarted = -1;
            }
          }
          else
          {
            v26 = std::vector<std::string>::operator[](param_vec, 0LL);
            if ( std::operator==<char>(v26, "SAVE_CHALLENGE") )
            {
              if ( std::vector<std::string>::size(param_vec) > 2 )
              {
                proto::PotionSaveDungeonResultReq::PotionSaveDungeonResultReq((proto::PotionSaveDungeonResultReq *const)(v3 + 208));
                *(_DWORD *)(v3 + 48) = 0;
                v27 = std::vector<std::string>::operator[](param_vec, 1uLL);
                if ( common::tools::StringUtils::strToNum<unsigned int>(v27, (unsigned int *)(v3 + 48), 1) )
                {
                  common::milog::MiLogStream::create(
                    (common::milog::MiLogStream *)(v3 + 272),
                    &common::milog::MiLogDefault::default_log_obj_,
                    3u,
                    "./src/player/gm/player_gm_comp.cpp",
                    "procPotionActivity",
                    18250);
                  v28 = common::milog::MiLogStream::operator<<<char [15],(char *[15])0>(
                          (common::milog::MiLogStream *const)(v3 + 272),
                          (const char (*)[15])"invalid param:");
                  v29 = std::vector<std::string>::operator[](param_vec, 1uLL);
                  common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v28, v29);
                  common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v3 + 272));
                  restarted = -1;
                }
                else
                {
                  proto::PotionSaveDungeonResultReq::set_stage_id(
                    (proto::PotionSaveDungeonResultReq *const)(v3 + 208),
                    *(_DWORD *)(v3 + 48));
                  *(_DWORD *)(v3 + 64) = 0;
                  v30 = std::vector<std::string>::operator[](param_vec, 2uLL);
                  if ( common::tools::StringUtils::strToNum<unsigned int>(v30, (unsigned int *)(v3 + 64), 1) )
                  {
                    common::milog::MiLogStream::create(
                      (common::milog::MiLogStream *)(v3 + 272),
                      &common::milog::MiLogDefault::default_log_obj_,
                      3u,
                      "./src/player/gm/player_gm_comp.cpp",
                      "procPotionActivity",
                      18257);
                    v31 = common::milog::MiLogStream::operator<<<char [15],(char *[15])0>(
                            (common::milog::MiLogStream *const)(v3 + 272),
                            (const char (*)[15])"invalid param:");
                    v32 = std::vector<std::string>::operator[](param_vec, 2uLL);
                    common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v31, v32);
                    common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v3 + 272));
                    restarted = -1;
                  }
                  else
                  {
                    proto::PotionSaveDungeonResultReq::set_level_id(
                      (proto::PotionSaveDungeonResultReq *const)(v3 + 208),
                      *(_DWORD *)(v3 + 64));
                    v33 = std::__shared_ptr_access<PotionActivity,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<PotionActivity,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 112));
                    restarted = PotionActivity::saveDungeonResult(
                                  v33,
                                  (const proto::PotionSaveDungeonResultReq *)(v3 + 208));
                  }
                }
                proto::PotionSaveDungeonResultReq::~PotionSaveDungeonResultReq((proto::PotionSaveDungeonResultReq *const)(v3 + 208));
              }
              else
              {
                common::milog::MiLogStream::create(
                  (common::milog::MiLogStream *)(v3 + 272),
                  &common::milog::MiLogDefault::default_log_obj_,
                  3u,
                  "./src/player/gm/player_gm_comp.cpp",
                  "procPotionActivity",
                  18243);
                common::milog::MiLogStream::operator<<<char [17],(char *[17])0>(
                  (common::milog::MiLogStream *const)(v3 + 272),
                  "param not enough");
                common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v3 + 272));
                restarted = -1;
              }
            }
            else
            {
              v34 = std::vector<std::string>::operator[](param_vec, 0LL);
              if ( std::operator==<char>(v34, "SET_LEVEL_SCORE") )
              {
                if ( std::vector<std::string>::size(param_vec) > 3 )
                {
                  *(_DWORD *)(v3 + 32) = 0;
                  *(_DWORD *)(v3 + 48) = 0;
                  *(_DWORD *)(v3 + 64) = 0;
                  if ( common::tools::StringUtils::strVecToNum<1u,unsigned int,unsigned int &,unsigned int &>(
                         param_vec,
                         (unsigned int *)(v3 + 32),
                         (unsigned int *)(v3 + 48),
                         (unsigned int *)(v3 + 64),
                         v35,
                         v36) )
                  {
                    common::milog::MiLogStream::create(
                      (common::milog::MiLogStream *)(v3 + 272),
                      &common::milog::MiLogDefault::default_log_obj_,
                      3u,
                      "./src/player/gm/player_gm_comp.cpp",
                      "procPotionActivity",
                      18275);
                    v37 = common::milog::MiLogStream::operator<<<char [15],(char *[15])0>(
                            (common::milog::MiLogStream *const)(v3 + 272),
                            (const char (*)[15])"invalid param:");
                    common::milog::MiLogStream::operator<<<std::string>(v37, param_vec);
                    common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v3 + 272));
                    restarted = -1;
                  }
                  else
                  {
                    v38 = std::__shared_ptr_access<PotionActivity,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<PotionActivity,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 112));
                    restarted = PotionActivity::setStageLevelScoreByGm(
                                  v38,
                                  *(_DWORD *)(v3 + 32),
                                  *(_DWORD *)(v3 + 48),
                                  *(_DWORD *)(v3 + 64));
                  }
                }
                else
                {
                  common::milog::MiLogStream::create(
                    (common::milog::MiLogStream *)(v3 + 272),
                    &common::milog::MiLogDefault::default_log_obj_,
                    3u,
                    "./src/player/gm/player_gm_comp.cpp",
                    "procPotionActivity",
                    18267);
                  common::milog::MiLogStream::operator<<<char [17],(char *[17])0>(
                    (common::milog::MiLogStream *const)(v3 + 272),
                    "param not enough");
                  common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v3 + 272));
                  restarted = -1;
                }
              }
              else
              {
                v39 = std::vector<std::string>::operator[](param_vec, 0LL);
                if ( std::operator==<char>(v39, "RESTART_DUNGEON") )
                {
                  v40 = std::__shared_ptr_access<PotionActivity,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<PotionActivity,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 112));
                  restarted = PotionActivity::restartDungeon(v40);
                }
                else
                {
                  restarted = 0;
                }
              }
            }
          }
        }
      }
    }
    std::shared_ptr<PotionActivity>::~shared_ptr((std::shared_ptr<PotionActivity> *const)(v3 + 112));
  }
  result = restarted;
  if ( v45 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8010) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8018) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8020) = 0LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8028) = 0;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8034) = 0;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8020) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8028) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8030) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 18287: range 0000000017D7D910-0000000017D7D9B2
void __cdecl procLanternRiteActivityRegister::procLanternRiteActivityRegister(
        procLanternRiteActivityRegister *const this)
{
  std::function<int(GmContext&,const std::vector<std::string>&,std::string&)> *v1; // rax
  std::allocator<char> __a; // [rsp+1Fh] [rbp-31h] BYREF
  std::string __k; // [rsp+20h] [rbp-30h] BYREF

  std::allocator<char>::allocator(&__a);
  std::string::basic_string<std::allocator<char>>(&__k, "LANTERN", &__a);
  v1 = std::unordered_map<std::string,std::function<int ()(GmContext &,std::vector<std::string> const&,std::string&)>>::operator[](
         &GmUtils::op_func_map[abi:cxx11],
         &__k);
  std::function<int ()(GmContext &,std::vector<std::string> const&,std::string&)>::operator=<int (&)(GmContext &,std::vector<std::string> const&,std::string&)>(
    v1,
    (int (*)(GmContext *, const std::vector<std::string> *, std::string *))procLanternRiteActivity);
  std::string::~string(&__k);
  std::allocator<char>::~allocator(&__a);
};

// Line 18288: range 0000000017C4D48B-0000000017C4E5D1
int32_t __cdecl procLanternRiteActivity(
        GmContext *context,
        const std::vector<std::string> *param_vec,
        std::string *ret_msg)
{
  unsigned __int64 v3; // r13
  __int64 v4; // rax
  _DWORD *v5; // r14
  int32_t updated; // r12d
  std::__shared_ptr_access<LanternRiteActivity,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v7; // rax
  std::__shared_ptr_access<LanternRiteActivity,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v8; // rax
  const std::string *v9; // rax
  std::__shared_ptr_access<LanternRiteActivity,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v10; // rax
  unsigned __int64 v11; // rdx
  const std::string *v12; // rax
  const std::string *v13; // rax
  LanternRiteActivity *v14; // rax
  const std::string *v15; // rax
  LanternRiteActivity *v16; // rax
  const std::string *v17; // rax
  LanternRiteActivity *v18; // rax
  const std::string *v19; // rax
  LanternRiteActivity *v20; // rax
  const std::string *v21; // rax
  const std::string *v22; // rax
  LanternRiteActivity *v23; // rax
  const std::string *v24; // rax
  const std::string *v25; // rax
  const std::string *v26; // rax
  LanternRiteActivity *v27; // rax
  const std::string *v28; // rax
  common::milog::MiLogStream *v29; // rdx
  LanternRiteActivity *v30; // rax
  const std::string *v31; // rax
  const std::string *v32; // rax
  LanternRiteActivity *v33; // rax
  const std::string *v34; // rax
  const std::string *v35; // rax
  LanternRiteActivity *v36; // rax
  const std::string *v37; // rax
  const std::string *v38; // rax
  const std::string *v39; // rax
  const std::string *v40; // rax
  LanternRiteActivity *v41; // rax
  int32_t result; // eax
  common::milog::MiLogStream v44; // [rsp+20h] [rbp-B0h] BYREF
  char v45[144]; // [rsp+40h] [rbp-90h] BYREF

  v3 = (unsigned __int64)v45;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_1(96LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "3 32 4 14 stage_id:18443 48 4 20 challenge_type:18444 64 16 18 activity_ptr:18294";
  *(_QWORD *)(v3 + 16) = procLanternRiteActivity;
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = -234556924;
  v5[536862722] = -202178560;
  if ( std::vector<std::string>::empty(param_vec) )
  {
    common::milog::MiLogStream::create(
      &v44,
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/player/gm/player_gm_comp.cpp",
      "procLanternRiteActivity",
      18291);
    common::milog::MiLogStream::operator<<<char [17],(char *[17])0>(&v44, "param not enough");
    common::milog::MiLogStream::~MiLogStream(&v44);
    updated = -1;
    goto LABEL_77;
  }
  if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
    __asan_report_load8();
  Player::getActivityComp(context->player);
  PlayerActivityComp::findOpenningActivity<LanternRiteActivity>((PlayerActivityComp *const)(v3 + 64));
  if ( std::operator==<LanternRiteActivity>(0LL, (const std::shared_ptr<LanternRiteActivity> *)(v3 + 64)) )
  {
    std::string::operator=(ret_msg, "no activity open");
    updated = -1;
  }
  else
  {
    v7 = std::__shared_ptr_access<LanternRiteActivity,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<LanternRiteActivity,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 64));
    if ( !BaseActivity::isOpening(v7, 0) )
    {
      common::milog::MiLogStream::create(
        &v44,
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/player/gm/player_gm_comp.cpp",
        "procLanternRiteActivity",
        18302);
      common::milog::MiLogStream::operator<<<char [27],(char *[27])0>(
        &v44,
        (const char (*)[27])"LanternRiteActivity close!");
      common::milog::MiLogStream::~MiLogStream(&v44);
      updated = -1;
    }
    else
    {
      v8 = std::__shared_ptr_access<LanternRiteActivity,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<LanternRiteActivity,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 64));
      if ( !BaseActivity::isSettled(v8) )
      {
        v9 = std::vector<std::string>::operator[](param_vec, 0LL);
        if ( std::operator==<char>(v9, "SETTLE") )
        {
          v10 = std::__shared_ptr_access<LanternRiteActivity,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<LanternRiteActivity,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 64));
          if ( *(_BYTE *)(((unsigned __int64)v10 >> 3) + 0x7FFF8000) )
            __asan_report_load8();
          v11 = (unsigned __int64)(v10->_vptr_DescribalBase + 38);
          if ( *(_BYTE *)((v11 >> 3) + 0x7FFF8000) )
            __asan_report_load8();
          (*(void (__fastcall **)(std::__shared_ptr_access<LanternRiteActivity,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *))v11)(v10);
          updated = 0;
          goto LABEL_76;
        }
        v12 = std::vector<std::string>::operator[](param_vec, 0LL);
        if ( std::operator==<char>(v12, "PROJECTION") )
        {
          if ( std::vector<std::string>::size(param_vec) <= 1 )
          {
            common::milog::MiLogStream::create(
              &v44,
              &common::milog::MiLogDefault::default_log_obj_,
              3u,
              "./src/player/gm/player_gm_comp.cpp",
              "procLanternRiteActivity",
              18321);
            common::milog::MiLogStream::operator<<<char [17],(char *[17])0>(&v44, "param not enough");
            common::milog::MiLogStream::~MiLogStream(&v44);
            updated = -1;
            goto LABEL_76;
          }
          v13 = std::vector<std::string>::operator[](param_vec, 1uLL);
          if ( std::operator==<char>(v13, "OPEN") )
          {
            v14 = std::__shared_ptr_access<LanternRiteActivity,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<LanternRiteActivity,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 64));
            LanternRiteActivity::openProjectionContentByGm(v14);
            updated = 0;
            goto LABEL_76;
          }
          v15 = std::vector<std::string>::operator[](param_vec, 1uLL);
          if ( std::operator==<char>(v15, "CLOSE") )
          {
            v16 = std::__shared_ptr_access<LanternRiteActivity,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<LanternRiteActivity,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 64));
            LanternRiteActivity::closeProjectionContentByGm(v16);
            updated = 0;
            goto LABEL_76;
          }
          v17 = std::vector<std::string>::operator[](param_vec, 1uLL);
          if ( std::operator==<char>(v17, "CLEAR") )
          {
            v18 = std::__shared_ptr_access<LanternRiteActivity,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<LanternRiteActivity,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 64));
            LanternRiteActivity::clearProjectionDataByGm(v18);
            updated = 0;
            goto LABEL_76;
          }
          v19 = std::vector<std::string>::operator[](param_vec, 1uLL);
          if ( std::operator==<char>(v19, "UNLOCK") )
          {
            v20 = std::__shared_ptr_access<LanternRiteActivity,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<LanternRiteActivity,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 64));
            LanternRiteActivity::unlockAllProjectionStageByGm(v20);
            updated = 0;
            goto LABEL_76;
          }
          v21 = std::vector<std::string>::operator[](param_vec, 1uLL);
          if ( std::operator==<char>(v21, "FINISH") )
          {
            if ( std::vector<std::string>::size(param_vec) > 2 )
            {
              *(_DWORD *)(v3 + 48) = 0;
              v22 = std::vector<std::string>::operator[](param_vec, 2uLL);
              if ( common::tools::StringUtils::strToNum<unsigned int>(v22, (unsigned int *)(v3 + 48), 1) )
              {
                common::milog::MiLogStream::create(
                  &v44,
                  &common::milog::MiLogDefault::default_log_obj_,
                  3u,
                  "./src/player/gm/player_gm_comp.cpp",
                  "procLanternRiteActivity",
                  18354);
                common::milog::MiLogStream::operator<<<char [17],(char *[17])0>(&v44, "param not enough");
                common::milog::MiLogStream::~MiLogStream(&v44);
                updated = -1;
              }
              else
              {
                v23 = std::__shared_ptr_access<LanternRiteActivity,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<LanternRiteActivity,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 64));
                updated = LanternRiteActivity::finishProjectionLevelByGm(v23, *(_DWORD *)(v3 + 48));
              }
            }
            else
            {
              common::milog::MiLogStream::create(
                &v44,
                &common::milog::MiLogDefault::default_log_obj_,
                3u,
                "./src/player/gm/player_gm_comp.cpp",
                "procLanternRiteActivity",
                18348);
              common::milog::MiLogStream::operator<<<char [17],(char *[17])0>(&v44, "param not enough");
              common::milog::MiLogStream::~MiLogStream(&v44);
              updated = -1;
            }
            goto LABEL_76;
          }
        }
        else
        {
          v24 = std::vector<std::string>::operator[](param_vec, 0LL);
          if ( std::operator==<char>(v24, "FIREWORKS") )
          {
            if ( std::vector<std::string>::size(param_vec) <= 1 )
            {
              common::milog::MiLogStream::create(
                &v44,
                &common::milog::MiLogDefault::default_log_obj_,
                3u,
                "./src/player/gm/player_gm_comp.cpp",
                "procLanternRiteActivity",
                18364);
              common::milog::MiLogStream::operator<<<char [17],(char *[17])0>(&v44, "param not enough");
              common::milog::MiLogStream::~MiLogStream(&v44);
              updated = -1;
              goto LABEL_76;
            }
            v25 = std::vector<std::string>::operator[](param_vec, 1uLL);
            if ( std::operator==<char>(v25, "OPEN_STAGE") )
            {
              if ( std::vector<std::string>::size(param_vec) > 2 )
              {
                *(_DWORD *)(v3 + 48) = 0;
                v26 = std::vector<std::string>::operator[](param_vec, 2uLL);
                if ( common::tools::StringUtils::strToNum<unsigned int>(v26, (unsigned int *)(v3 + 48), 1) )
                {
                  common::milog::MiLogStream::create(
                    &v44,
                    &common::milog::MiLogDefault::default_log_obj_,
                    3u,
                    "./src/player/gm/player_gm_comp.cpp",
                    "procLanternRiteActivity",
                    18377);
                  common::milog::MiLogStream::operator<<<char [17],(char *[17])0>(&v44, "param not enough");
                  common::milog::MiLogStream::~MiLogStream(&v44);
                  updated = -1;
                }
                else
                {
                  v27 = std::__shared_ptr_access<LanternRiteActivity,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<LanternRiteActivity,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 64));
                  updated = LanternRiteActivity::openFireworksStageByGm(v27, *(_DWORD *)(v3 + 48));
                }
              }
              else
              {
                common::milog::MiLogStream::create(
                  &v44,
                  &common::milog::MiLogDefault::default_log_obj_,
                  3u,
                  "./src/player/gm/player_gm_comp.cpp",
                  "procLanternRiteActivity",
                  18371);
                common::milog::MiLogStream::operator<<<char [17],(char *[17])0>(&v44, "param not enough");
                common::milog::MiLogStream::~MiLogStream(&v44);
                updated = -1;
              }
              goto LABEL_76;
            }
            v28 = std::vector<std::string>::operator[](param_vec, 1uLL);
            if ( std::operator==<char>(v28, "SET_CHALLENGE_SCORE") )
            {
              if ( std::vector<std::string>::size(param_vec) > 3 )
              {
                *(_DWORD *)(v3 + 32) = 0;
                *(_DWORD *)(v3 + 48) = 0;
                if ( common::tools::StringUtils::strVecToNum<2u,unsigned int,unsigned int &>(
                       param_vec,
                       (unsigned int *)(v3 + 32),
                       (unsigned int *)(v3 + 48),
                       (unsigned int *)(v3 + 32)) )
                {
                  common::milog::MiLogStream::create(
                    &v44,
                    &common::milog::MiLogDefault::default_log_obj_,
                    3u,
                    "./src/player/gm/player_gm_comp.cpp",
                    "procLanternRiteActivity",
                    18393);
                  v29 = common::milog::MiLogStream::operator<<<char [15],(char *[15])0>(
                          &v44,
                          (const char (*)[15])"invalid param:");
                  common::milog::MiLogStream::operator<<<std::string>(v29, param_vec);
                  common::milog::MiLogStream::~MiLogStream(&v44);
                  updated = -1;
                }
                else
                {
                  v30 = std::__shared_ptr_access<LanternRiteActivity,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<LanternRiteActivity,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 64));
                  updated = LanternRiteActivity::setFireworksChallengeScoreByGm(
                              v30,
                              *(_DWORD *)(v3 + 32),
                              *(_DWORD *)(v3 + 48));
                }
              }
              else
              {
                common::milog::MiLogStream::create(
                  &v44,
                  &common::milog::MiLogDefault::default_log_obj_,
                  3u,
                  "./src/player/gm/player_gm_comp.cpp",
                  "procLanternRiteActivity",
                  18386);
                common::milog::MiLogStream::operator<<<char [17],(char *[17])0>(&v44, "param not enough");
                common::milog::MiLogStream::~MiLogStream(&v44);
                updated = -1;
              }
              goto LABEL_76;
            }
            v31 = std::vector<std::string>::operator[](param_vec, 1uLL);
            if ( std::operator==<char>(v31, "SET_CHALLENGE_STAMINA") )
            {
              if ( std::vector<std::string>::size(param_vec) > 2 )
              {
                *(_DWORD *)(v3 + 48) = 0;
                v32 = std::vector<std::string>::operator[](param_vec, 2uLL);
                if ( common::tools::StringUtils::strToNum<unsigned int>(v32, (unsigned int *)(v3 + 48), 1) )
                {
                  common::milog::MiLogStream::create(
                    &v44,
                    &common::milog::MiLogDefault::default_log_obj_,
                    3u,
                    "./src/player/gm/player_gm_comp.cpp",
                    "procLanternRiteActivity",
                    18408);
                  common::milog::MiLogStream::operator<<<char [17],(char *[17])0>(&v44, "param not enough");
                  common::milog::MiLogStream::~MiLogStream(&v44);
                  updated = -1;
                }
                else
                {
                  v33 = std::__shared_ptr_access<LanternRiteActivity,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<LanternRiteActivity,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 64));
                  updated = LanternRiteActivity::setFireworksReformStaminaByGm(v33, *(_DWORD *)(v3 + 48));
                }
              }
              else
              {
                common::milog::MiLogStream::create(
                  &v44,
                  &common::milog::MiLogDefault::default_log_obj_,
                  3u,
                  "./src/player/gm/player_gm_comp.cpp",
                  "procLanternRiteActivity",
                  18402);
                common::milog::MiLogStream::operator<<<char [17],(char *[17])0>(&v44, "param not enough");
                common::milog::MiLogStream::~MiLogStream(&v44);
                updated = -1;
              }
              goto LABEL_76;
            }
            v34 = std::vector<std::string>::operator[](param_vec, 1uLL);
            if ( std::operator==<char>(v34, "SET_REFORM_SCORE") )
            {
              if ( std::vector<std::string>::size(param_vec) > 2 )
              {
                *(_DWORD *)(v3 + 48) = 0;
                v35 = std::vector<std::string>::operator[](param_vec, 2uLL);
                if ( common::tools::StringUtils::strToNum<unsigned int>(v35, (unsigned int *)(v3 + 48), 1) )
                {
                  common::milog::MiLogStream::create(
                    &v44,
                    &common::milog::MiLogDefault::default_log_obj_,
                    3u,
                    "./src/player/gm/player_gm_comp.cpp",
                    "procLanternRiteActivity",
                    18423);
                  common::milog::MiLogStream::operator<<<char [17],(char *[17])0>(&v44, "param not enough");
                  common::milog::MiLogStream::~MiLogStream(&v44);
                  updated = -1;
                }
                else
                {
                  v36 = std::__shared_ptr_access<LanternRiteActivity,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<LanternRiteActivity,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 64));
                  updated = LanternRiteActivity::setFireworksReformScoreByGm(v36, *(_DWORD *)(v3 + 48));
                }
              }
              else
              {
                common::milog::MiLogStream::create(
                  &v44,
                  &common::milog::MiLogDefault::default_log_obj_,
                  3u,
                  "./src/player/gm/player_gm_comp.cpp",
                  "procLanternRiteActivity",
                  18417);
                common::milog::MiLogStream::operator<<<char [17],(char *[17])0>(&v44, "param not enough");
                common::milog::MiLogStream::~MiLogStream(&v44);
                updated = -1;
              }
              goto LABEL_76;
            }
          }
          else
          {
            v37 = std::vector<std::string>::operator[](param_vec, 0LL);
            if ( std::operator==<char>(v37, "SALVAGE") )
            {
              if ( std::vector<std::string>::size(param_vec) <= 1 )
              {
                common::milog::MiLogStream::create(
                  &v44,
                  &common::milog::MiLogDefault::default_log_obj_,
                  3u,
                  "./src/player/gm/player_gm_comp.cpp",
                  "procLanternRiteActivity",
                  18433);
                common::milog::MiLogStream::operator<<<char [17],(char *[17])0>(&v44, "param not enough");
                common::milog::MiLogStream::~MiLogStream(&v44);
                updated = -1;
                goto LABEL_76;
              }
              v38 = std::vector<std::string>::operator[](param_vec, 1uLL);
              if ( std::operator==<char>(v38, "MARK") )
              {
                if ( std::vector<std::string>::size(param_vec) > 3 )
                {
                  *(_DWORD *)(v3 + 32) = 0;
                  *(_DWORD *)(v3 + 48) = 0;
                  v39 = std::vector<std::string>::operator[](param_vec, 2uLL);
                  if ( common::tools::StringUtils::strToNum<unsigned int>(v39, (unsigned int *)(v3 + 32), 1) )
                  {
                    common::milog::MiLogStream::create(
                      &v44,
                      &common::milog::MiLogDefault::default_log_obj_,
                      3u,
                      "./src/player/gm/player_gm_comp.cpp",
                      "procLanternRiteActivity",
                      18447);
                    common::milog::MiLogStream::operator<<<char [17],(char *[17])0>(&v44, "param not enough");
                    common::milog::MiLogStream::~MiLogStream(&v44);
                    updated = -1;
                  }
                  else
                  {
                    v40 = std::vector<std::string>::operator[](param_vec, 3uLL);
                    if ( common::tools::StringUtils::strToNum<unsigned int>(v40, (unsigned int *)(v3 + 48), 1) )
                    {
                      common::milog::MiLogStream::create(
                        &v44,
                        &common::milog::MiLogDefault::default_log_obj_,
                        3u,
                        "./src/player/gm/player_gm_comp.cpp",
                        "procLanternRiteActivity",
                        18452);
                      common::milog::MiLogStream::operator<<<char [17],(char *[17])0>(&v44, "param not enough");
                      common::milog::MiLogStream::~MiLogStream(&v44);
                      updated = -1;
                    }
                    else
                    {
                      v41 = std::__shared_ptr_access<LanternRiteActivity,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<LanternRiteActivity,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 64));
                      updated = LanternRiteActivity::updateSalvageBundleByGm(
                                  v41,
                                  *(_DWORD *)(v3 + 32),
                                  *(_DWORD *)(v3 + 48));
                    }
                  }
                }
                else
                {
                  common::milog::MiLogStream::create(
                    &v44,
                    &common::milog::MiLogDefault::default_log_obj_,
                    3u,
                    "./src/player/gm/player_gm_comp.cpp",
                    "procLanternRiteActivity",
                    18440);
                  common::milog::MiLogStream::operator<<<char [17],(char *[17])0>(&v44, "param not enough");
                  common::milog::MiLogStream::~MiLogStream(&v44);
                  updated = -1;
                }
                goto LABEL_76;
              }
            }
          }
        }
        updated = 0;
        goto LABEL_76;
      }
      common::milog::MiLogStream::create(
        &v44,
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/player/gm/player_gm_comp.cpp",
        "procLanternRiteActivity",
        18307);
      common::milog::MiLogStream::operator<<<char [29],(char *[29])0>(
        &v44,
        (const char (*)[29])"LanternRiteActivity settled!");
      common::milog::MiLogStream::~MiLogStream(&v44);
      updated = -1;
    }
  }
LABEL_76:
  std::shared_ptr<LanternRiteActivity>::~shared_ptr((std::shared_ptr<LanternRiteActivity> *const)(v3 + 64));
LABEL_77:
  result = updated;
  if ( v45 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8008) = 0;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8008) = -168430091;
  }
  return result;
};

// Line 18461: range 0000000017D7D9B4-0000000017D7DA56
void __cdecl procGCGRegister::procGCGRegister(procGCGRegister *const this)
{
  std::function<int(GmContext&,const std::vector<std::string>&,std::string&)> *v1; // rax
  std::allocator<char> __a; // [rsp+1Fh] [rbp-31h] BYREF
  std::string __k; // [rsp+20h] [rbp-30h] BYREF

  std::allocator<char>::allocator(&__a);
  std::string::basic_string<std::allocator<char>>(&__k, off_26373E20, &__a);
  v1 = std::unordered_map<std::string,std::function<int ()(GmContext &,std::vector<std::string> const&,std::string&)>>::operator[](
         &GmUtils::op_func_map[abi:cxx11],
         &__k);
  std::function<int ()(GmContext &,std::vector<std::string> const&,std::string&)>::operator=<int (&)(GmContext &,std::vector<std::string> const&,std::string&)>(
    v1,
    (int (*)(GmContext *, const std::vector<std::string> *, std::string *))procGCG);
  std::string::~string(&__k);
  std::allocator<char>::~allocator(&__a);
};

// Line 18462: range 0000000017C4E5D2-0000000017C50415
int32_t __cdecl procGCG(GmContext *context, const std::vector<std::string> *param_vec, std::string *ret_msg)
{
  int32_t refreshed; // r12d
  unsigned __int64 v4; // r14
  __int64 v5; // rax
  _DWORD *v6; // r13
  const std::string *v7; // rax
  GameserverService *v8; // rax
  uint32_t v9; // r12d
  std::__shared_ptr_access<DungeonScene,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v10; // rax
  common::milog::MiLogStream *v12; // r12
  PlayerDungeonComp *DungeonComp; // r12
  PlayerSceneComp *SceneComp; // rax
  uint32_t CurSceneId; // r15d
  bool v16; // r12
  const std::string *v17; // rax
  const std::string *v18; // rax
  GCGWeekChallenge *WeekChallenge; // rax
  const std::string *v20; // rax
  const std::string *v21; // rax
  GCGWeekChallenge *v22; // rax
  const std::string *v23; // rax
  GCGWeekChallenge *v24; // rax
  const std::string *v25; // rax
  GCGTavernSceneBuilder *TavernSceneBuilder; // rax
  const std::string *v27; // rax
  unsigned int *v28; // r8
  unsigned int *v29; // r9
  GCGLevelChallenge *LevelChallenge; // rax
  const std::string *v31; // rax
  const std::string *v32; // rax
  const std::string *v33; // rax
  GCGLevelChallenge *v34; // rax
  const std::string *v35; // rax
  GCGLevelChallenge *v36; // rax
  const std::string *v37; // rax
  GCGLevelChallenge *v38; // rax
  const std::string *v39; // rax
  const std::string *v40; // rax
  GCGLevelChallenge *v41; // rax
  const std::string *v42; // rax
  const std::string *v43; // rax
  PlayerGCGComp *GCGComp; // rax
  GCGBasic *v45; // rax
  const std::string *v46; // rax
  unsigned int *v47; // r9
  PlayerGCGComp *v48; // rax
  bool v49; // r15
  uint32_t v50; // r12d
  uint32_t MatchScore; // ecx
  const std::string *v52; // rax
  PlayerGCGComp *v53; // rax
  GCGBasic *v54; // rax
  PlayerGCGComp *v55; // rax
  GCGBasic *v56; // rax
  const std::string *v57; // rax
  const std::string *v58; // rax
  const std::string *v59; // rax
  GameserverService *v60; // rax
  unsigned int GameThreadLocal; // eax
  int v62; // r15d
  Player *v63; // rdx
  const std::string *v64; // rax
  const std::string *v65; // rax
  GCGBasic *Basic; // rax
  const std::string *v67; // rax
  GCGBasic *v68; // rax
  const std::string *v69; // rax
  unsigned int *v70; // r8
  unsigned int *v71; // r9
  const std::string *v72; // rax
  const std::string *v73; // rax
  const std::string *v74; // rax
  const std::string *v75; // rax
  uint32_t v76; // ebx
  const std::string *v77; // rcx
  int32_t result; // eax
  unsigned int *v79; // [rsp+0h] [rbp-210h]
  std::string *ret_msga; // [rsp+8h] [rbp-208h]
  unsigned int score; // [rsp+28h] [rbp-1E8h]
  PlayerGCGComp *gcg_comp; // [rsp+30h] [rbp-1E0h]
  GCGBasic *gcg_basic; // [rsp+38h] [rbp-1D8h]
  unsigned int v84[116]; // [rsp+40h] [rbp-1D0h] BYREF

  ret_msga = ret_msg;
  v4 = (unsigned __int64)v84;
  v79 = v84;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v5 = __asan_stack_malloc_3(416LL);
    if ( v5 )
      v4 = v5;
  }
  *(_QWORD *)v4 = 1102416563LL;
  *(_QWORD *)(v4 + 8) = "10 48 4 14 match_id:18613 64 4 15 config_id:18727 80 4 14 level_id:18728 96 4 9 num:18757 112 16"
                        " 22 owner_player_ptr:18472 144 16 23 dungeon_scene_ptr:18479 176 16 16 player_ptr:18691 208 24 1"
                        "2 reason:18657 272 32 9 rsp:18708 336 40 9 rsp:18717";
  *(_QWORD *)(v4 + 16) = procGCG;
  v6 = (_DWORD *)(v4 >> 3);
  v6[536862720] = -235802127;
  v6[536862721] = -234556943;
  v6[536862722] = -234556924;
  v6[536862723] = 61956;
  v6[536862724] = 62194;
  v6[536862725] = 62194;
  v6[536862726] = 62194;
  v6[536862727] = -218959360;
  v6[536862728] = 62194;
  v6[536862729] = -219021312;
  v6[536862730] = 62194;
  v6[536862731] = -218103808;
  v6[536862732] = -202116109;
  if ( std::vector<std::string>::empty(param_vec) )
  {
    common::milog::MiLogStream::create(
      (common::milog::MiLogStream *)(v4 + 272),
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/player/gm/player_gm_comp.cpp",
      "procGCG",
      18465);
    common::milog::MiLogStream::operator<<<char [17],(char *[17])0>(
      (common::milog::MiLogStream *const)(v4 + 272),
      "param not enough");
    common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v4 + 272));
    refreshed = -1;
    goto LABEL_137;
  }
  if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
    __asan_report_load8();
  gcg_comp = Player::getGCGComp(context->player);
  v7 = std::vector<std::string>::operator[](param_vec, 0LL);
  if ( std::operator==<char>(v7, "ENTER") )
  {
    if ( *(_BYTE *)(((unsigned __int64)&context->scene >> 3) + 0x7FFF8000) )
      __asan_report_load8();
    Scene::getOwnPlayer((const Scene *const)(v4 + 112));
    if ( std::operator==<Player>((const std::shared_ptr<Player> *)(v4 + 112), 0LL) )
    {
      std::string::operator=(ret_msga, "owner is nullptr.");
      refreshed = -1;
    }
    else
    {
      v8 = ServiceBox::findService<GameserverService>();
      v9 = (unsigned int)GameserverService::getGameThreadLocal(v8) + 568;
      std::__shared_ptr_access<Player,(__gnu_cxx::_Lock_policy)2,false,false>::operator*((const std::__shared_ptr_access<Player,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 112));
      toThisPtr<Player>((Player *)(v4 + 176));
      DungeonMgr::createDungeon((DungeonMgr *const)(v4 + 144), v9, (PlayerPtr *)0x872);
      std::shared_ptr<Player>::~shared_ptr((std::shared_ptr<Player> *const)(v4 + 176));
      if ( std::operator==<DungeonScene>(0LL, (const std::shared_ptr<DungeonScene> *)(v4 + 144))
        || (v10 = std::__shared_ptr_access<DungeonScene,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<DungeonScene,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 144)),
            DungeonScene::getDungeonId(v10) != 2162) )
      {
        std::string::operator=(ret_msga, "createDungeon failed.");
        common::milog::MiLogStream::create(
          (common::milog::MiLogStream *)(v4 + 272),
          &common::milog::MiLogDefault::default_log_obj_,
          3u,
          "./src/player/gm/player_gm_comp.cpp",
          "procGCG",
          18483);
        v12 = common::milog::MiLogStream::operator<<<char [27],(char *[27])0>(
                (common::milog::MiLogStream *const)(v4 + 272),
                (const char (*)[27])"createDungeon failed, uid:");
        if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
          __asan_report_load8();
        *(_DWORD *)(v4 + 96) = Player::getUid(context->player);
        common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v12, (const unsigned int *)(v4 + 96));
        common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v4 + 272));
        refreshed = -1;
      }
      else
      {
        if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
          __asan_report_load8();
        DungeonComp = Player::getDungeonComp(context->player);
        if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
          __asan_report_load8();
        SceneComp = Player::getSceneComp(context->player);
        CurSceneId = PlayerSceneComp::getCurSceneId(SceneComp);
        std::shared_ptr<DungeonScene>::shared_ptr(
          (std::shared_ptr<DungeonScene> *const)(v4 + 176),
          (const std::shared_ptr<DungeonScene> *)(v4 + 144));
        v16 = PlayerDungeonComp::enterDungeon(DungeonComp, (DungeonScenePtr *)(v4 + 176), CurSceneId, 0) != 0;
        std::shared_ptr<DungeonScene>::~shared_ptr((std::shared_ptr<DungeonScene> *const)(v4 + 176));
        if ( v16 )
        {
          std::string::operator=(ret_msga, " enterDungeon failed");
          refreshed = -1;
        }
        else
        {
          refreshed = 0;
        }
      }
      std::shared_ptr<DungeonScene>::~shared_ptr((std::shared_ptr<DungeonScene> *const)(v4 + 144));
    }
    std::shared_ptr<Player>::~shared_ptr((std::shared_ptr<Player> *const)(v4 + 112));
    goto LABEL_137;
  }
  v17 = std::vector<std::string>::operator[](param_vec, 0LL);
  if ( std::operator==<char>(v17, "SET_GCG_RELEASE_TIME") )
  {
    if ( std::vector<std::string>::size(param_vec) <= 1 )
    {
      common::milog::MiLogStream::create(
        (common::milog::MiLogStream *)(v4 + 272),
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/player/gm/player_gm_comp.cpp",
        "procGCG",
        18497);
      common::milog::MiLogStream::operator<<<char [17],(char *[17])0>(
        (common::milog::MiLogStream *const)(v4 + 272),
        "param not enough");
      common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v4 + 272));
      refreshed = -1;
      goto LABEL_137;
    }
    *(_DWORD *)(v4 + 96) = 0;
    v18 = std::vector<std::string>::operator[](param_vec, 1uLL);
    if ( !common::tools::StringUtils::strToNum<unsigned int>(v18, (unsigned int *)(v4 + 96), 1) )
    {
      WeekChallenge = PlayerGCGComp::getWeekChallenge(gcg_comp);
      GCGWeekChallenge::setGCGReleaseTimeByGM(WeekChallenge, *(_DWORD *)(v4 + 96));
      refreshed = 0;
      goto LABEL_137;
    }
    goto LABEL_66;
  }
  v20 = std::vector<std::string>::operator[](param_vec, 0LL);
  if ( std::operator==<char>(v20, "SET_WEEK_START_DAY") )
  {
    if ( std::vector<std::string>::size(param_vec) <= 1 )
    {
      common::milog::MiLogStream::create(
        (common::milog::MiLogStream *)(v4 + 272),
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/player/gm/player_gm_comp.cpp",
        "procGCG",
        18513);
      common::milog::MiLogStream::operator<<<char [17],(char *[17])0>(
        (common::milog::MiLogStream *const)(v4 + 272),
        "param not enough");
      common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v4 + 272));
      refreshed = -1;
      goto LABEL_137;
    }
    *(_DWORD *)(v4 + 96) = 0;
    v21 = std::vector<std::string>::operator[](param_vec, 1uLL);
    if ( !common::tools::StringUtils::strToNum<int>(v21, (int *)(v4 + 96), 1) )
    {
      v22 = PlayerGCGComp::getWeekChallenge(gcg_comp);
      refreshed = GCGWeekChallenge::setRefreshStartWeekDayByGM(v22, *(_DWORD *)(v4 + 96));
      goto LABEL_137;
    }
    goto LABEL_66;
  }
  v23 = std::vector<std::string>::operator[](param_vec, 0LL);
  if ( std::operator==<char>(v23, "REFRESH_WEEK_CHALLENGE") )
  {
    v24 = PlayerGCGComp::getWeekChallenge(gcg_comp);
    refreshed = GCGWeekChallenge::refreshNpcInfoByGM(v24);
    goto LABEL_137;
  }
  v25 = std::vector<std::string>::operator[](param_vec, 0LL);
  if ( std::operator==<char>(v25, "REFRESH_TAVERN_SCENE") )
  {
    TavernSceneBuilder = PlayerGCGComp::getTavernSceneBuilder(gcg_comp);
    refreshed = GCGTavernSceneBuilder::refreshNpcInfoByGM(TavernSceneBuilder);
    goto LABEL_137;
  }
  v27 = std::vector<std::string>::operator[](param_vec, 0LL);
  if ( std::operator==<char>(v27, "START_LEVEL_CHALLENGE") )
  {
    if ( std::vector<std::string>::size(param_vec) <= 3 )
    {
      common::milog::MiLogStream::create(
        (common::milog::MiLogStream *)(v4 + 272),
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/player/gm/player_gm_comp.cpp",
        "procGCG",
        18536);
      common::milog::MiLogStream::operator<<<char [17],(char *[17])0>(
        (common::milog::MiLogStream *const)(v4 + 272),
        "param not enough");
      common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v4 + 272));
      refreshed = -1;
      goto LABEL_137;
    }
    *(_DWORD *)(v4 + 64) = 0;
    *(_DWORD *)(v4 + 80) = 0;
    *(_DWORD *)(v4 + 96) = 0;
    if ( common::tools::StringUtils::strVecToNum<1u,unsigned int,unsigned int &,unsigned int &>(
           param_vec,
           (unsigned int *)(v4 + 64),
           (unsigned int *)(v4 + 80),
           (unsigned int *)(v4 + 96),
           v28,
           v29) )
    {
      goto LABEL_133;
    }
LABEL_50:
    LevelChallenge = PlayerGCGComp::getLevelChallenge(gcg_comp);
    refreshed = GCGLevelChallenge::startLevel(
                  LevelChallenge,
                  *(_DWORD *)(v4 + 64),
                  *(_DWORD *)(v4 + 80),
                  (proto::GCGLevelType)*(_DWORD *)(v4 + 96),
                  0);
    goto LABEL_137;
  }
  v31 = std::vector<std::string>::operator[](param_vec, 0LL);
  if ( std::operator==<char>(v31, "SET_RES_COMPLETE") )
  {
    if ( std::vector<std::string>::size(param_vec) <= 1 )
    {
      common::milog::MiLogStream::create(
        (common::milog::MiLogStream *)(v4 + 272),
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/player/gm/player_gm_comp.cpp",
        "procGCG",
        18553);
      common::milog::MiLogStream::operator<<<char [17],(char *[17])0>(
        (common::milog::MiLogStream *const)(v4 + 272),
        "param not enough");
      common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v4 + 272));
      refreshed = -1;
      goto LABEL_137;
    }
    *(_DWORD *)(v4 + 96) = 0;
    v32 = std::vector<std::string>::operator[](param_vec, 1uLL);
    if ( !common::tools::StringUtils::strToNum<unsigned int>(v32, (unsigned int *)(v4 + 96), 1) )
    {
      PlayerGCGComp::setIsResourceComplete(gcg_comp, *(_DWORD *)(v4 + 96) != 0);
      refreshed = 0;
      goto LABEL_137;
    }
    goto LABEL_66;
  }
  v33 = std::vector<std::string>::operator[](param_vec, 0LL);
  if ( std::operator==<char>(v33, "CLEAR_LEVEL_CHALLENGE") )
  {
    v34 = PlayerGCGComp::getLevelChallenge(gcg_comp);
    GCGLevelChallenge::onGMLevelChallengeClear(v34);
    refreshed = 0;
    goto LABEL_137;
  }
  v35 = std::vector<std::string>::operator[](param_vec, 0LL);
  if ( std::operator==<char>(v35, "RESTART_LEVEL") )
  {
    v36 = PlayerGCGComp::getLevelChallenge(gcg_comp);
    refreshed = GCGLevelChallenge::restartLevel(v36);
    goto LABEL_137;
  }
  v37 = std::vector<std::string>::operator[](param_vec, 0LL);
  if ( std::operator==<char>(v37, "CONTINUE_LEVEL") )
  {
    v38 = PlayerGCGComp::getLevelChallenge(gcg_comp);
    refreshed = GCGLevelChallenge::continueLevel(v38);
    goto LABEL_137;
  }
  v39 = std::vector<std::string>::operator[](param_vec, 0LL);
  if ( std::operator==<char>(v39, "RESET_GUIDE") )
  {
    if ( std::vector<std::string>::size(param_vec) <= 1 )
    {
      common::milog::MiLogStream::create(
        (common::milog::MiLogStream *)(v4 + 272),
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/player/gm/player_gm_comp.cpp",
        "procGCG",
        18582);
      common::milog::MiLogStream::operator<<<char [17],(char *[17])0>(
        (common::milog::MiLogStream *const)(v4 + 272),
        "param not enough");
      common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v4 + 272));
      refreshed = -1;
      goto LABEL_137;
    }
    *(_DWORD *)(v4 + 96) = 0;
    v40 = std::vector<std::string>::operator[](param_vec, 1uLL);
    if ( !common::tools::StringUtils::strToNum<unsigned int>(v40, (unsigned int *)(v4 + 96), 1) )
    {
      v41 = PlayerGCGComp::getLevelChallenge(gcg_comp);
      GCGLevelChallenge::onGMResetGuideProgress(v41, *(_DWORD *)(v4 + 96));
      refreshed = 0;
      goto LABEL_137;
    }
LABEL_66:
    std::string::operator=(ret_msga, "strToNum fail.");
    refreshed = -1;
    goto LABEL_137;
  }
  v42 = std::vector<std::string>::operator[](param_vec, 0LL);
  if ( !std::operator==<char>(v42, "MATCH") )
  {
    v57 = std::vector<std::string>::operator[](param_vec, 0LL);
    if ( std::operator==<char>(v57, "SINGLE") )
    {
      if ( std::vector<std::string>::size(param_vec) <= 1 )
      {
        common::milog::MiLogStream::create(
          (common::milog::MiLogStream *)(v4 + 272),
          &common::milog::MiLogDefault::default_log_obj_,
          3u,
          "./src/player/gm/player_gm_comp.cpp",
          "procGCG",
          18666);
        common::milog::MiLogStream::operator<<<char [17],(char *[17])0>(
          (common::milog::MiLogStream *const)(v4 + 272),
          "param not enough");
        common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v4 + 272));
        refreshed = -1;
        goto LABEL_137;
      }
      *(_DWORD *)(v4 + 96) = 0;
      v58 = std::vector<std::string>::operator[](param_vec, 1uLL);
      if ( common::tools::StringUtils::strToNum<unsigned int>(v58, (unsigned int *)(v4 + 96), 1) )
        goto LABEL_133;
      *(_QWORD *)(v4 + 208) = 0LL;
      *(_QWORD *)(v4 + 216) = 0LL;
      *(_QWORD *)(v4 + 224) = 0LL;
      std::vector<unsigned int>::vector((std::vector<unsigned int> *const)(v4 + 208));
      PlayerGCGComp::startSingleGame(
        gcg_comp,
        *(_DWORD *)(v4 + 96),
        GCG_GAME_GM,
        (const std::vector<unsigned int> *)(v4 + 208));
      std::vector<unsigned int>::~vector((std::vector<unsigned int> *const)(v4 + 208));
    }
    else
    {
      v59 = std::vector<std::string>::operator[](param_vec, 0LL);
      if ( std::operator==<char>(v59, "MULTI") )
      {
        if ( std::vector<std::string>::size(param_vec) <= 2 )
        {
          common::milog::MiLogStream::create(
            (common::milog::MiLogStream *)(v4 + 272),
            &common::milog::MiLogDefault::default_log_obj_,
            3u,
            "./src/player/gm/player_gm_comp.cpp",
            "procGCG",
            18681);
          common::milog::MiLogStream::operator<<<char [17],(char *[17])0>(
            (common::milog::MiLogStream *const)(v4 + 272),
            "param not enough");
          common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v4 + 272));
          refreshed = -1;
          goto LABEL_137;
        }
        *(_DWORD *)(v4 + 80) = 0;
        *(_DWORD *)(v4 + 96) = 0;
        if ( common::tools::StringUtils::strVecToNum<1u,unsigned int,unsigned int &>(
               param_vec,
               (unsigned int *)(v4 + 80),
               (unsigned int *)(v4 + 96),
               (unsigned int *)(v4 + 80)) )
        {
          goto LABEL_133;
        }
        v60 = ServiceBox::findService<GameserverService>();
        GameThreadLocal = (unsigned int)GameserverService::getGameThreadLocal(v60);
        PlayerMgr::findOnlinePlayer((PlayerMgr *const)(v4 + 176), GameThreadLocal + 16);
        if ( std::operator==<Player>((const std::shared_ptr<Player> *)(v4 + 176), 0LL) )
        {
          std::string::operator=(ret_msga, "find player fail.");
          refreshed = -1;
          v62 = 0;
        }
        else
        {
          v63 = std::__shared_ptr_access<Player,(__gnu_cxx::_Lock_policy)2,false,false>::operator*((const std::__shared_ptr_access<Player,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 176));
          PlayerGCGComp::startMultiGame(gcg_comp, *(_DWORD *)(v4 + 80), GCG_GAME_GM, v63);
          v62 = 1;
        }
        std::shared_ptr<Player>::~shared_ptr((std::shared_ptr<Player> *const)(v4 + 176));
        if ( v62 != 1 )
          goto LABEL_137;
      }
      else
      {
        v64 = std::vector<std::string>::operator[](param_vec, 0LL);
        if ( std::operator==<char>(v64, "INVITE") )
        {
          if ( std::vector<std::string>::size(param_vec) <= 1 )
          {
            common::milog::MiLogStream::create(
              (common::milog::MiLogStream *)(v4 + 272),
              &common::milog::MiLogDefault::default_log_obj_,
              3u,
              "./src/player/gm/player_gm_comp.cpp",
              "procGCG",
              18703);
            common::milog::MiLogStream::operator<<<char [17],(char *[17])0>(
              (common::milog::MiLogStream *const)(v4 + 272),
              "param not enough");
            common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v4 + 272));
            refreshed = -1;
            goto LABEL_137;
          }
          v65 = std::vector<std::string>::operator[](param_vec, 1uLL);
          if ( std::operator==<char>(v65, "AGREE") )
          {
            proto::GCGApplyInviteBattleRsp::GCGApplyInviteBattleRsp((proto::GCGApplyInviteBattleRsp *const)(v4 + 272));
            Basic = PlayerGCGComp::getBasic(gcg_comp);
            refreshed = GCGBasic::inviteApply(Basic, 1, (proto::GCGApplyInviteBattleRsp *)(v4 + 272));
            proto::GCGApplyInviteBattleRsp::~GCGApplyInviteBattleRsp((proto::GCGApplyInviteBattleRsp *const)(v4 + 272));
            goto LABEL_137;
          }
          *(_DWORD *)(v4 + 96) = 0;
          v67 = std::vector<std::string>::operator[](param_vec, 1uLL);
          if ( !common::tools::StringUtils::strToNum<unsigned int>(v67, (unsigned int *)(v4 + 96), 1) )
          {
            proto::GCGInviteGuestBattleRsp::GCGInviteGuestBattleRsp((proto::GCGInviteGuestBattleRsp *const)(v4 + 336));
            v68 = PlayerGCGComp::getBasic(gcg_comp);
            refreshed = GCGBasic::invite(v68, *(_DWORD *)(v4 + 96), (proto::GCGInviteGuestBattleRsp *)(v4 + 336));
            proto::GCGInviteGuestBattleRsp::~GCGInviteGuestBattleRsp((proto::GCGInviteGuestBattleRsp *const)(v4 + 336));
            goto LABEL_137;
          }
          goto LABEL_133;
        }
        v69 = std::vector<std::string>::operator[](param_vec, 0LL);
        if ( std::operator==<char>(v69, "START_LEVEL") )
        {
          if ( std::vector<std::string>::size(param_vec) <= 3 )
          {
            common::milog::MiLogStream::create(
              (common::milog::MiLogStream *)(v4 + 272),
              &common::milog::MiLogDefault::default_log_obj_,
              3u,
              "./src/player/gm/player_gm_comp.cpp",
              "procGCG",
              18724);
            common::milog::MiLogStream::operator<<<char [17],(char *[17])0>(
              (common::milog::MiLogStream *const)(v4 + 272),
              "param not enough");
            common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v4 + 272));
            refreshed = -1;
            goto LABEL_137;
          }
          *(_DWORD *)(v4 + 64) = 0;
          *(_DWORD *)(v4 + 80) = 0;
          *(_DWORD *)(v4 + 96) = 0;
          if ( common::tools::StringUtils::strVecToNum<1u,unsigned int,unsigned int &,unsigned int &>(
                 param_vec,
                 (unsigned int *)(v4 + 64),
                 (unsigned int *)(v4 + 80),
                 (unsigned int *)(v4 + 96),
                 v70,
                 v71) )
          {
            goto LABEL_133;
          }
          goto LABEL_50;
        }
        v72 = std::vector<std::string>::operator[](param_vec, 0LL);
        if ( std::operator==<char>(v72, "RESET") )
        {
          PlayerGCGComp::resetGameInfo(gcg_comp);
        }
        else
        {
          v73 = std::vector<std::string>::operator[](param_vec, 0LL);
          if ( std::operator==<char>(v73, "PACKET_LOSS") )
          {
            if ( std::vector<std::string>::size(param_vec) == 2 )
            {
              v74 = std::vector<std::string>::operator[](param_vec, 1uLL);
              if ( std::operator==<char>(v74, "CLEAR") )
              {
                PlayerGCGComp::onGMClearDropPacketMap(gcg_comp);
                refreshed = 0;
                goto LABEL_137;
              }
            }
            if ( std::vector<std::string>::size(param_vec) <= 2 )
            {
              common::milog::MiLogStream::create(
                (common::milog::MiLogStream *)(v4 + 272),
                &common::milog::MiLogDefault::default_log_obj_,
                3u,
                "./src/player/gm/player_gm_comp.cpp",
                "procGCG",
                18754);
              common::milog::MiLogStream::operator<<<char [17],(char *[17])0>(
                (common::milog::MiLogStream *const)(v4 + 272),
                "param not enough");
              common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v4 + 272));
              refreshed = -1;
              goto LABEL_137;
            }
            *(_DWORD *)(v4 + 96) = 0;
            v75 = std::vector<std::string>::operator[](param_vec, 2uLL);
            if ( !common::tools::StringUtils::strToNum<unsigned int>(v75, (unsigned int *)(v4 + 96), 1) )
            {
              v76 = *(_DWORD *)(v4 + 96);
              v77 = std::vector<std::string>::operator[](param_vec, 1uLL);
              PlayerGCGComp::onGMSetDropPacketAndNum(gcg_comp, v77, v76);
              refreshed = 0;
              goto LABEL_137;
            }
LABEL_133:
            std::string::operator=(ret_msga, "strVecToNum fail.");
            refreshed = -1;
            goto LABEL_137;
          }
          PlayerGCGComp::sendGM(gcg_comp, param_vec);
        }
      }
    }
    refreshed = 0;
    goto LABEL_137;
  }
  if ( std::vector<std::string>::size(param_vec) <= 1 )
  {
    common::milog::MiLogStream::create(
      (common::milog::MiLogStream *)(v4 + 272),
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/player/gm/player_gm_comp.cpp",
      "procGCG",
      18598);
    common::milog::MiLogStream::operator<<<char [17],(char *[17])0>(
      (common::milog::MiLogStream *const)(v4 + 272),
      "param not enough");
    common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v4 + 272));
    refreshed = -1;
    goto LABEL_137;
  }
  v43 = std::vector<std::string>::operator[](param_vec, 1uLL);
  if ( std::operator==<char>(v43, "CLEAR") )
  {
    if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
      __asan_report_load8();
    GCGComp = Player::getGCGComp(context->player);
    v45 = PlayerGCGComp::getBasic(GCGComp);
    GCGBasic::onGMMatchClear(v45);
    refreshed = 0;
  }
  else
  {
    v46 = std::vector<std::string>::operator[](param_vec, 1uLL);
    if ( std::operator==<char>(v46, "SETTLE") )
    {
      if ( std::vector<std::string>::size(param_vec) <= 4 )
      {
        common::milog::MiLogStream::create(
          (common::milog::MiLogStream *)(v4 + 272),
          &common::milog::MiLogDefault::default_log_obj_,
          3u,
          "./src/player/gm/player_gm_comp.cpp",
          "procGCG",
          18610);
        common::milog::MiLogStream::operator<<<char [17],(char *[17])0>(
          (common::milog::MiLogStream *const)(v4 + 272),
          "param not enough");
        common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v4 + 272));
        refreshed = -1;
        goto LABEL_137;
      }
      *(_DWORD *)(v4 + 48) = 0;
      *(_DWORD *)(v4 + 64) = 0;
      *(_DWORD *)(v4 + 80) = 0;
      *(_DWORD *)(v4 + 96) = 0;
      if ( common::tools::StringUtils::strVecToNum<2u,unsigned int,unsigned int &,unsigned int &,unsigned int &>(
             param_vec,
             (unsigned int *)(v4 + 48),
             (unsigned int *)(v4 + 64),
             (unsigned int *)(v4 + 80),
             (unsigned int *)(v4 + 96),
             v47,
             v84,
             (unsigned int *)ret_msga) )
      {
        goto LABEL_133;
      }
      if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
        __asan_report_load8();
      v48 = Player::getGCGComp(context->player);
      gcg_basic = PlayerGCGComp::getBasic(v48);
      v49 = *(_DWORD *)(v4 + 96) == 1;
      v50 = *(_DWORD *)(v4 + 80);
      MatchScore = GCGBasic::getMatchScore(gcg_basic, *(_DWORD *)(v4 + 48));
      GCGBasic::onMatchSettle(gcg_basic, *(_DWORD *)(v4 + 48), *(_DWORD *)(v4 + 64) != 0, MatchScore, v50, v49);
      refreshed = 0;
    }
    else
    {
      v52 = std::vector<std::string>::operator[](param_vec, 1uLL);
      if ( std::operator==<char>(v52, "SHOW") )
      {
        if ( std::vector<std::string>::size(param_vec) <= 2 )
        {
          common::milog::MiLogStream::create(
            (common::milog::MiLogStream *)(v4 + 272),
            &common::milog::MiLogDefault::default_log_obj_,
            3u,
            "./src/player/gm/player_gm_comp.cpp",
            "procGCG",
            18630);
          common::milog::MiLogStream::operator<<<char [17],(char *[17])0>(
            (common::milog::MiLogStream *const)(v4 + 272),
            "param not enough");
          common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v4 + 272));
          refreshed = -1;
          goto LABEL_137;
        }
        *(_DWORD *)(v4 + 96) = 0;
        if ( common::tools::StringUtils::strVecToNum<2u,unsigned int>(param_vec, (unsigned int *)(v4 + 96)) )
          goto LABEL_133;
        if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
          __asan_report_load8();
        v53 = Player::getGCGComp(context->player);
        v54 = PlayerGCGComp::getBasic(v53);
        score = GCGBasic::getMatchScore(v54, *(_DWORD *)(v4 + 96));
        common::tools::StringUtils::numToStr<unsigned int>((std::string *)(v4 + 272), score);
        std::string::operator=(ret_msga, v4 + 272);
        std::string::~string((void *)(v4 + 272));
        refreshed = 0;
      }
      else
      {
        if ( std::vector<std::string>::size(param_vec) <= 2 )
        {
          common::milog::MiLogStream::create(
            (common::milog::MiLogStream *)(v4 + 272),
            &common::milog::MiLogDefault::default_log_obj_,
            3u,
            "./src/player/gm/player_gm_comp.cpp",
            "procGCG",
            18647);
          common::milog::MiLogStream::operator<<<char [17],(char *[17])0>(
            (common::milog::MiLogStream *const)(v4 + 272),
            "param not enough");
          common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v4 + 272));
          refreshed = -1;
          goto LABEL_137;
        }
        *(_DWORD *)(v4 + 80) = 0;
        *(_DWORD *)(v4 + 96) = 0;
        if ( common::tools::StringUtils::strVecToNum<1u,unsigned int,unsigned int &>(
               param_vec,
               (unsigned int *)(v4 + 80),
               (unsigned int *)(v4 + 96),
               (unsigned int *)(v4 + 80)) )
        {
          goto LABEL_133;
        }
        ActionReason::ActionReason((ActionReason *const)(v4 + 208), ACTION_REASON_GM, ITEM_LIMIT_GM);
        if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
          __asan_report_load8();
        v55 = Player::getGCGComp(context->player);
        v56 = PlayerGCGComp::getBasic(v55);
        GCGBasic::setMatchScore(v56, *(_DWORD *)(v4 + 80), *(_DWORD *)(v4 + 96));
        refreshed = 0;
      }
    }
  }
LABEL_137:
  result = refreshed;
  if ( v79 == (unsigned int *)v4 )
  {
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8008) = 0LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8010) = 0LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8018) = 0LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8020) = 0LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8028) = 0LL;
    *(_DWORD *)((v4 >> 3) + 0x7FFF8030) = 0;
  }
  else
  {
    *(_QWORD *)v4 = 1172321806LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8020) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8028) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v4 >> 3) + 0x7FFF8030) = -168430091;
  }
  return result;
};

// Line 18774: range 0000000017D7DA58-0000000017D7DAFA
void __cdecl procGCGDeckRegister::procGCGDeckRegister(procGCGDeckRegister *const this)
{
  std::function<int(GmContext&,const std::vector<std::string>&,std::string&)> *v1; // rax
  std::allocator<char> __a; // [rsp+1Fh] [rbp-31h] BYREF
  std::string __k; // [rsp+20h] [rbp-30h] BYREF

  std::allocator<char>::allocator(&__a);
  std::string::basic_string<std::allocator<char>>(&__k, "DECK", &__a);
  v1 = std::unordered_map<std::string,std::function<int ()(GmContext &,std::vector<std::string> const&,std::string&)>>::operator[](
         &GmUtils::op_func_map[abi:cxx11],
         &__k);
  std::function<int ()(GmContext &,std::vector<std::string> const&,std::string&)>::operator=<int (&)(GmContext &,std::vector<std::string> const&,std::string&)>(
    v1,
    (int (*)(GmContext *, const std::vector<std::string> *, std::string *))procGCGDeck);
  std::string::~string(&__k);
  std::allocator<char>::~allocator(&__a);
};

// Line 18775: range 0000000017C50416-0000000017C5226A
int32_t __cdecl procGCGDeck(GmContext *context, const std::vector<std::string> *param_vec, std::string *ret_msg)
{
  unsigned __int64 v3; // r14
  __int64 v4; // rax
  _DWORD *v5; // r13
  int32_t v6; // r12d
  PlayerGCGComp *GCGComp; // rax
  const std::string *v8; // rax
  const std::string *v9; // rax
  const std::string *v10; // rax
  const std::string *v11; // rax
  bool v12; // r12
  __gnu_cxx::__normal_iterator<unsigned int*,std::vector<unsigned int> >::reference v13; // rax
  unsigned int *v14; // rdx
  const std::string *v15; // rax
  const std::string *v16; // rax
  const std::string *v17; // rax
  const std::string *v18; // rax
  const std::string *v19; // rax
  const std::string *v20; // rax
  const std::string *v21; // rax
  const std::string *v22; // rax
  const std::string *v23; // rax
  const std::string *v24; // rax
  const std::string *v25; // rax
  const std::string *v26; // rax
  const std::string *v27; // rax
  const std::string *v28; // rax
  const std::string *v29; // rax
  const std::string *v30; // rax
  const std::string *v31; // rax
  const std::string *v32; // rax
  const std::string *v33; // rax
  const std::string *v34; // rax
  std::vector<std::string>::const_reference v35; // rax
  const std::string *v36; // rax
  bool v37; // r12
  const std::string *v38; // rax
  bool v39; // r12
  const std::string *v40; // rax
  std::vector<std::string>::const_reference v41; // rax
  std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v42; // rax
  common::milog::MiLogStream *v43; // rax
  const std::string *v44; // rax
  const std::string *v45; // rax
  const std::string *v46; // rax
  const std::string *v47; // rax
  int32_t result; // eax
  std::allocator<char> __a; // [rsp+2Fh] [rbp-191h] BYREF
  uint32_t card_id; // [rsp+30h] [rbp-190h]
  unsigned int card_id_0; // [rsp+34h] [rbp-18Ch]
  std::vector<unsigned int>::iterator __for_begin; // [rsp+38h] [rbp-188h] BYREF
  std::vector<unsigned int>::iterator __for_end; // [rsp+40h] [rbp-180h] BYREF
  GCGDeckSystem *deck_system; // [rsp+48h] [rbp-178h]
  const data::GCGDeckExcelConfig *card_group_config_ptr; // [rsp+50h] [rbp-170h]
  std::vector<unsigned int> *__for_range; // [rsp+58h] [rbp-168h]
  std::shared_ptr<Config> v58; // [rsp+60h] [rbp-160h] BYREF
  common::milog::MiLogStream v59; // [rsp+70h] [rbp-150h] BYREF
  char v60[304]; // [rsp+90h] [rbp-130h] BYREF

  v3 = (unsigned __int64)v60;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_2(256LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "5 32 4 13 card_id:19030 48 4 9 num:19038 64 24 24 character_card_vec:18971 128 24 14 card_vec:18"
                        "972 192 32 10 name:18994";
  *(_QWORD *)(v3 + 16) = procGCGDeck;
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = -234556924;
  v5[536862722] = -234881024;
  v5[536862723] = -218959118;
  v5[536862724] = -234881024;
  v5[536862725] = -218959118;
  v5[536862727] = -202116109;
  if ( std::vector<std::string>::empty(param_vec) )
  {
    common::milog::MiLogStream::create(
      &v59,
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/player/gm/player_gm_comp.cpp",
      "procGCGDeck",
      18778);
    common::milog::MiLogStream::operator<<<char [17],(char *[17])0>(&v59, "param not enough");
    common::milog::MiLogStream::~MiLogStream(&v59);
    v6 = -1;
    goto LABEL_117;
  }
  if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
    __asan_report_load8();
  GCGComp = Player::getGCGComp(context->player);
  deck_system = PlayerGCGComp::getDeckSystem(GCGComp);
  v8 = std::vector<std::string>::operator[](param_vec, 0LL);
  if ( !std::operator==<char>(v8, "CARD") )
  {
    v18 = std::vector<std::string>::operator[](param_vec, 0LL);
    if ( std::operator==<char>(v18, "CARD_BACK") )
    {
      if ( std::vector<std::string>::size(param_vec) <= 1 )
      {
        common::milog::MiLogStream::create(
          &v59,
          &common::milog::MiLogDefault::default_log_obj_,
          3u,
          "./src/player/gm/player_gm_comp.cpp",
          "procGCGDeck",
          18839);
        common::milog::MiLogStream::operator<<<char [17],(char *[17])0>(&v59, "param not enough");
        common::milog::MiLogStream::~MiLogStream(&v59);
        v6 = -1;
        goto LABEL_117;
      }
      v19 = std::vector<std::string>::operator[](param_vec, 1uLL);
      if ( std::operator==<char>(v19, "UNLOCK") )
      {
        if ( std::vector<std::string>::size(param_vec) > 2 )
        {
          *(_DWORD *)(v3 + 48) = 0;
          v20 = std::vector<std::string>::operator[](param_vec, 2uLL);
          if ( common::tools::StringUtils::strToNum<unsigned int>(v20, (unsigned int *)(v3 + 48), 1) )
          {
            common::milog::MiLogStream::create(
              &v59,
              &common::milog::MiLogDefault::default_log_obj_,
              3u,
              "./src/player/gm/player_gm_comp.cpp",
              "procGCGDeck",
              18852);
            common::milog::MiLogStream::operator<<<char [15],(char *[15])0>(&v59, (const char (*)[15])"strToNum fail.");
            common::milog::MiLogStream::~MiLogStream(&v59);
            v6 = -1;
          }
          else
          {
            v6 = GCGDeckSystem::onGMUnlockCardBack(deck_system, *(_DWORD *)(v3 + 48));
          }
        }
        else
        {
          common::milog::MiLogStream::create(
            &v59,
            &common::milog::MiLogDefault::default_log_obj_,
            3u,
            "./src/player/gm/player_gm_comp.cpp",
            "procGCGDeck",
            18846);
          common::milog::MiLogStream::operator<<<char [17],(char *[17])0>(&v59, "param not enough");
          common::milog::MiLogStream::~MiLogStream(&v59);
          v6 = -1;
        }
        goto LABEL_117;
      }
      v21 = std::vector<std::string>::operator[](param_vec, 1uLL);
      if ( std::operator==<char>(v21, "CLEAR") )
      {
        GCGDeckSystem::onGMClearCardBack(deck_system);
        v6 = 0;
        goto LABEL_117;
      }
    }
    else
    {
      v22 = std::vector<std::string>::operator[](param_vec, 0LL);
      if ( std::operator==<char>(v22, "FIELD") )
      {
        if ( std::vector<std::string>::size(param_vec) <= 1 )
        {
          common::milog::MiLogStream::create(
            &v59,
            &common::milog::MiLogDefault::default_log_obj_,
            3u,
            "./src/player/gm/player_gm_comp.cpp",
            "procGCGDeck",
            18867);
          common::milog::MiLogStream::operator<<<char [17],(char *[17])0>(&v59, "param not enough");
          common::milog::MiLogStream::~MiLogStream(&v59);
          v6 = -1;
          goto LABEL_117;
        }
        v23 = std::vector<std::string>::operator[](param_vec, 1uLL);
        if ( std::operator==<char>(v23, "UNLOCK") )
        {
          if ( std::vector<std::string>::size(param_vec) > 2 )
          {
            *(_DWORD *)(v3 + 48) = 0;
            v24 = std::vector<std::string>::operator[](param_vec, 2uLL);
            if ( common::tools::StringUtils::strToNum<unsigned int>(v24, (unsigned int *)(v3 + 48), 1) )
            {
              common::milog::MiLogStream::create(
                &v59,
                &common::milog::MiLogDefault::default_log_obj_,
                3u,
                "./src/player/gm/player_gm_comp.cpp",
                "procGCGDeck",
                18880);
              common::milog::MiLogStream::operator<<<char [15],(char *[15])0>(
                &v59,
                (const char (*)[15])"strToNum fail.");
              common::milog::MiLogStream::~MiLogStream(&v59);
              v6 = -1;
            }
            else
            {
              v6 = GCGDeckSystem::onGMUnlockField(deck_system, *(_DWORD *)(v3 + 48));
            }
          }
          else
          {
            common::milog::MiLogStream::create(
              &v59,
              &common::milog::MiLogDefault::default_log_obj_,
              3u,
              "./src/player/gm/player_gm_comp.cpp",
              "procGCGDeck",
              18874);
            common::milog::MiLogStream::operator<<<char [17],(char *[17])0>(&v59, "param not enough");
            common::milog::MiLogStream::~MiLogStream(&v59);
            v6 = -1;
          }
          goto LABEL_117;
        }
        v25 = std::vector<std::string>::operator[](param_vec, 1uLL);
        if ( std::operator==<char>(v25, "CLEAR") )
        {
          GCGDeckSystem::onGMClearField(deck_system);
          v6 = 0;
          goto LABEL_117;
        }
      }
      else
      {
        v26 = std::vector<std::string>::operator[](param_vec, 0LL);
        if ( std::operator==<char>(v26, "CARD_FACE") )
        {
          if ( std::vector<std::string>::size(param_vec) <= 1 )
          {
            common::milog::MiLogStream::create(
              &v59,
              &common::milog::MiLogDefault::default_log_obj_,
              3u,
              "./src/player/gm/player_gm_comp.cpp",
              "procGCGDeck",
              18895);
            common::milog::MiLogStream::operator<<<char [17],(char *[17])0>(&v59, "param not enough");
            common::milog::MiLogStream::~MiLogStream(&v59);
            v6 = -1;
            goto LABEL_117;
          }
          v27 = std::vector<std::string>::operator[](param_vec, 1uLL);
          if ( std::operator==<char>(v27, "UNLOCK") )
          {
            if ( std::vector<std::string>::size(param_vec) == 3
              && (v28 = std::vector<std::string>::operator[](param_vec, 2uLL), std::operator==<char>(v28, _f.gap0)) )
            {
              v6 = GCGDeckSystem::onGMUnlockCardFaceAll(deck_system, 1u);
            }
            else if ( std::vector<std::string>::size(param_vec) > 3 )
            {
              *(_DWORD *)(v3 + 32) = 0;
              *(_DWORD *)(v3 + 48) = 0;
              if ( common::tools::StringUtils::strVecToNum<2u,unsigned int,unsigned int &>(
                     param_vec,
                     (unsigned int *)(v3 + 32),
                     (unsigned int *)(v3 + 48),
                     (unsigned int *)(v3 + 32)) )
              {
                common::milog::MiLogStream::create(
                  &v59,
                  &common::milog::MiLogDefault::default_log_obj_,
                  3u,
                  "./src/player/gm/player_gm_comp.cpp",
                  "procGCGDeck",
                  18916);
                common::milog::MiLogStream::operator<<<char [15],(char *[15])0>(
                  &v59,
                  (const char (*)[15])"strToNum fail.");
                common::milog::MiLogStream::~MiLogStream(&v59);
                v6 = -1;
              }
              else
              {
                v6 = GCGDeckSystem::onGMUnlockCardFace(deck_system, *(_DWORD *)(v3 + 32), *(_DWORD *)(v3 + 48));
              }
            }
            else
            {
              common::milog::MiLogStream::create(
                &v59,
                &common::milog::MiLogDefault::default_log_obj_,
                3u,
                "./src/player/gm/player_gm_comp.cpp",
                "procGCGDeck",
                18909);
              common::milog::MiLogStream::operator<<<char [17],(char *[17])0>(&v59, "param not enough");
              common::milog::MiLogStream::~MiLogStream(&v59);
              v6 = -1;
            }
            goto LABEL_117;
          }
          v29 = std::vector<std::string>::operator[](param_vec, 1uLL);
          if ( std::operator==<char>(v29, "CLEAR") )
          {
            if ( std::vector<std::string>::size(param_vec) > 2 )
            {
              *(_DWORD *)(v3 + 48) = 0;
              if ( common::tools::StringUtils::strVecToNum<2u,unsigned int>(param_vec, (unsigned int *)(v3 + 48)) )
              {
                common::milog::MiLogStream::create(
                  &v59,
                  &common::milog::MiLogDefault::default_log_obj_,
                  3u,
                  "./src/player/gm/player_gm_comp.cpp",
                  "procGCGDeck",
                  18931);
                common::milog::MiLogStream::operator<<<char [15],(char *[15])0>(
                  &v59,
                  (const char (*)[15])"strToNum fail.");
                common::milog::MiLogStream::~MiLogStream(&v59);
                v6 = -1;
              }
              else
              {
                GCGDeckSystem::onGMClearCardFace(deck_system, *(_DWORD *)(v3 + 48));
                v6 = 0;
              }
            }
            else
            {
              common::milog::MiLogStream::create(
                &v59,
                &common::milog::MiLogDefault::default_log_obj_,
                3u,
                "./src/player/gm/player_gm_comp.cpp",
                "procGCGDeck",
                18925);
              common::milog::MiLogStream::operator<<<char [17],(char *[17])0>(&v59, "param not enough");
              common::milog::MiLogStream::~MiLogStream(&v59);
              v6 = -1;
            }
            goto LABEL_117;
          }
          v30 = std::vector<std::string>::operator[](param_vec, 1uLL);
          if ( std::operator==<char>(v30, off_26352320) )
          {
            if ( std::vector<std::string>::size(param_vec) > 3 )
            {
              v31 = std::vector<std::string>::operator[](param_vec, 2uLL);
              if ( std::operator==<char>(v31, _f.gap0) )
              {
                *(_DWORD *)(v3 + 48) = 0;
                v32 = std::vector<std::string>::operator[](param_vec, 3uLL);
                if ( common::tools::StringUtils::strToNum<unsigned int>(v32, (unsigned int *)(v3 + 48), 1) )
                {
                  common::milog::MiLogStream::create(
                    &v59,
                    &common::milog::MiLogDefault::default_log_obj_,
                    3u,
                    "./src/player/gm/player_gm_comp.cpp",
                    "procGCGDeck",
                    18949);
                  common::milog::MiLogStream::operator<<<char [15],(char *[15])0>(
                    &v59,
                    (const char (*)[15])"strToNum fail.");
                  common::milog::MiLogStream::~MiLogStream(&v59);
                  v6 = -1;
                }
                else
                {
                  v6 = GCGDeckSystem::onGMSetCardFaceAll(deck_system, *(_DWORD *)(v3 + 48));
                }
              }
              else
              {
                v6 = -1;
              }
            }
            else
            {
              common::milog::MiLogStream::create(
                &v59,
                &common::milog::MiLogDefault::default_log_obj_,
                3u,
                "./src/player/gm/player_gm_comp.cpp",
                "procGCGDeck",
                18941);
              common::milog::MiLogStream::operator<<<char [17],(char *[17])0>(&v59, "param not enough");
              common::milog::MiLogStream::~MiLogStream(&v59);
              v6 = -1;
            }
            goto LABEL_117;
          }
        }
        else
        {
          v33 = std::vector<std::string>::operator[](param_vec, 0LL);
          if ( std::operator==<char>(v33, "SAVE_DECK") )
          {
            if ( std::vector<std::string>::size(param_vec) > 4 )
            {
              *(_DWORD *)(v3 + 48) = 0;
              v34 = std::vector<std::string>::operator[](param_vec, 1uLL);
              if ( common::tools::StringUtils::strToNum<unsigned int>(v34, (unsigned int *)(v3 + 48), 1) )
              {
                common::milog::MiLogStream::create(
                  &v59,
                  &common::milog::MiLogDefault::default_log_obj_,
                  3u,
                  "./src/player/gm/player_gm_comp.cpp",
                  "procGCGDeck",
                  18967);
                common::milog::MiLogStream::operator<<<char [15],(char *[15])0>(
                  &v59,
                  (const char (*)[15])"strToNum fail.");
                common::milog::MiLogStream::~MiLogStream(&v59);
                v6 = -1;
              }
              else
              {
                v35 = std::vector<std::string>::operator[](param_vec, 2uLL);
                std::string::basic_string(v3 + 192, v35);
                std::vector<unsigned int>::vector((std::vector<unsigned int> *const)(v3 + 64));
                std::vector<unsigned int>::vector((std::vector<unsigned int> *const)(v3 + 128));
                std::allocator<char>::allocator(&__a);
                std::string::basic_string<std::allocator<char>>((std::string *const)&v59, ",", &__a);
                v36 = std::vector<std::string>::operator[](param_vec, 3uLL);
                v37 = common::tools::StringUtils::splitToList<unsigned int>(
                        v36,
                        (const std::string *)&v59,
                        (std::vector<unsigned int> *)(v3 + 64),
                        0) != 0;
                std::string::~string(&v59);
                std::allocator<char>::~allocator(&__a);
                if ( v37
                  || (std::allocator<char>::allocator(&__a),
                      std::string::basic_string<std::allocator<char>>((std::string *const)&v59, ",", &__a),
                      v38 = std::vector<std::string>::operator[](param_vec, 4uLL),
                      v39 = common::tools::StringUtils::splitToList<unsigned int>(
                              v38,
                              (const std::string *)&v59,
                              (std::vector<unsigned int> *)(v3 + 128),
                              0) != 0,
                      std::string::~string(&v59),
                      std::allocator<char>::~allocator(&__a),
                      v39) )
                {
                  std::string::operator=(ret_msg, "parse guid list fail");
                  v6 = -1;
                }
                else
                {
                  v6 = GCGDeckSystem::onGMSetDeck(
                         deck_system,
                         *(_DWORD *)(v3 + 48),
                         (const std::string *)(v3 + 192),
                         (const std::vector<unsigned int> *)(v3 + 64),
                         (const std::vector<unsigned int> *)(v3 + 128));
                }
                std::vector<unsigned int>::~vector((std::vector<unsigned int> *const)(v3 + 128));
                std::vector<unsigned int>::~vector((std::vector<unsigned int> *const)(v3 + 64));
                std::string::~string((void *)(v3 + 192));
              }
            }
            else
            {
              common::milog::MiLogStream::create(
                &v59,
                &common::milog::MiLogDefault::default_log_obj_,
                3u,
                "./src/player/gm/player_gm_comp.cpp",
                "procGCGDeck",
                18961);
              common::milog::MiLogStream::operator<<<char [17],(char *[17])0>(&v59, "param not enough");
              common::milog::MiLogStream::~MiLogStream(&v59);
              v6 = -1;
            }
            goto LABEL_117;
          }
          v40 = std::vector<std::string>::operator[](param_vec, 0LL);
          if ( std::operator==<char>(v40, "SET_DECK") )
          {
            if ( std::vector<std::string>::size(param_vec) > 3 )
            {
              *(_DWORD *)(v3 + 32) = 0;
              *(_DWORD *)(v3 + 48) = 0;
              v41 = std::vector<std::string>::operator[](param_vec, 1uLL);
              std::string::basic_string(v3 + 192, v41);
              if ( common::tools::StringUtils::strVecToNum<2u,unsigned int,unsigned int &>(
                     param_vec,
                     (unsigned int *)(v3 + 32),
                     (unsigned int *)(v3 + 48),
                     (unsigned int *)(v3 + 32)) )
              {
                common::milog::MiLogStream::create(
                  &v59,
                  &common::milog::MiLogDefault::default_log_obj_,
                  3u,
                  "./src/player/gm/player_gm_comp.cpp",
                  "procGCGDeck",
                  18997);
                common::milog::MiLogStream::operator<<<char [15],(char *[15])0>(
                  &v59,
                  (const char (*)[15])"strToNum fail.");
                common::milog::MiLogStream::~MiLogStream(&v59);
                v6 = -1;
              }
              else
              {
                ServiceBox::findService<GameserverService>();
                GameserverService::getConfig((GameserverService *const)&v58);
                v42 = std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false> *const)&v58);
                card_group_config_ptr = data::GCGGameExcelConfigMgrBase::findGCGDeckExcelConfig(
                                          &v42->design_config.txt_config_mgr.gcg_game_config_mgr,
                                          *(_DWORD *)(v3 + 48));
                std::shared_ptr<Config>::~shared_ptr(&v58);
                if ( card_group_config_ptr )
                {
                  v6 = GCGDeckSystem::onGMSetDeck(
                         deck_system,
                         *(_DWORD *)(v3 + 32),
                         (const std::string *)(v3 + 192),
                         &card_group_config_ptr->character_list,
                         &card_group_config_ptr->card_list);
                }
                else
                {
                  common::milog::MiLogStream::create(
                    &v59,
                    &common::milog::MiLogDefault::default_log_obj_,
                    3u,
                    "./src/player/gm/player_gm_comp.cpp",
                    "procGCGDeck",
                    19003);
                  v43 = common::milog::MiLogStream::operator<<<char [41],(char *[41])0>(
                          &v59,
                          (const char (*)[41])"findGCGDeckExcelConfig fail. config_id: ");
                  common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                    v43,
                    (const unsigned int *)(v3 + 48));
                  common::milog::MiLogStream::~MiLogStream(&v59);
                  v6 = -1;
                }
              }
              std::string::~string((void *)(v3 + 192));
            }
            else
            {
              common::milog::MiLogStream::create(
                &v59,
                &common::milog::MiLogDefault::default_log_obj_,
                3u,
                "./src/player/gm/player_gm_comp.cpp",
                "procGCGDeck",
                18989);
              common::milog::MiLogStream::operator<<<char [17],(char *[17])0>(&v59, "param not enough");
              common::milog::MiLogStream::~MiLogStream(&v59);
              v6 = -1;
            }
            goto LABEL_117;
          }
          v44 = std::vector<std::string>::operator[](param_vec, 0LL);
          if ( std::operator==<char>(v44, "UNLOCK") )
          {
            if ( std::vector<std::string>::size(param_vec) > 1 )
            {
              *(_DWORD *)(v3 + 48) = 0;
              v45 = std::vector<std::string>::operator[](param_vec, 1uLL);
              if ( common::tools::StringUtils::strToNum<unsigned int>(v45, (unsigned int *)(v3 + 48), 1) )
              {
                common::milog::MiLogStream::create(
                  &v59,
                  &common::milog::MiLogDefault::default_log_obj_,
                  3u,
                  "./src/player/gm/player_gm_comp.cpp",
                  "procGCGDeck",
                  19018);
                common::milog::MiLogStream::operator<<<char [15],(char *[15])0>(
                  &v59,
                  (const char (*)[15])"strToNum fail.");
                common::milog::MiLogStream::~MiLogStream(&v59);
                v6 = -1;
              }
              else
              {
                v6 = GCGDeckSystem::unlockDeck(deck_system, *(_DWORD *)(v3 + 48));
              }
            }
            else
            {
              common::milog::MiLogStream::create(
                &v59,
                &common::milog::MiLogDefault::default_log_obj_,
                3u,
                "./src/player/gm/player_gm_comp.cpp",
                "procGCGDeck",
                19012);
              common::milog::MiLogStream::operator<<<char [17],(char *[17])0>(&v59, "param not enough");
              common::milog::MiLogStream::~MiLogStream(&v59);
              v6 = -1;
            }
            goto LABEL_117;
          }
          v46 = std::vector<std::string>::operator[](param_vec, 0LL);
          if ( std::operator==<char>(v46, "PROFICIENCY") )
          {
            if ( std::vector<std::string>::size(param_vec) > 1 )
            {
              *(_DWORD *)(v3 + 32) = 0;
              if ( common::tools::StringUtils::strVecToNum<1u,unsigned int>(param_vec, (unsigned int *)(v3 + 32)) )
              {
                common::milog::MiLogStream::create(
                  &v59,
                  &common::milog::MiLogDefault::default_log_obj_,
                  3u,
                  "./src/player/gm/player_gm_comp.cpp",
                  "procGCGDeck",
                  19033);
                common::milog::MiLogStream::operator<<<char [18],(char *[18])0>(
                  &v59,
                  (const char (*)[18])"strVecToNum fail.");
                common::milog::MiLogStream::~MiLogStream(&v59);
                v6 = -1;
              }
              else if ( std::vector<std::string>::size(param_vec) <= 2 )
              {
                GCGDeckSystem::addCardProficiency(deck_system, *(_DWORD *)(v3 + 32));
                v6 = 0;
              }
              else
              {
                *(_DWORD *)(v3 + 48) = 0;
                v47 = std::vector<std::string>::operator[](param_vec, 2uLL);
                if ( common::tools::StringUtils::strToNum<unsigned int>(v47, (unsigned int *)(v3 + 48), 1) )
                {
                  common::milog::MiLogStream::create(
                    &v59,
                    &common::milog::MiLogDefault::default_log_obj_,
                    3u,
                    "./src/player/gm/player_gm_comp.cpp",
                    "procGCGDeck",
                    19041);
                  common::milog::MiLogStream::operator<<<char [15],(char *[15])0>(
                    &v59,
                    (const char (*)[15])"strToNum fail.");
                  common::milog::MiLogStream::~MiLogStream(&v59);
                  v6 = -1;
                }
                else
                {
                  v6 = GCGDeckSystem::onGMSetCardProficiency(deck_system, *(_DWORD *)(v3 + 32), *(_DWORD *)(v3 + 48));
                }
              }
            }
            else
            {
              common::milog::MiLogStream::create(
                &v59,
                &common::milog::MiLogDefault::default_log_obj_,
                3u,
                "./src/player/gm/player_gm_comp.cpp",
                "procGCGDeck",
                19027);
              common::milog::MiLogStream::operator<<<char [17],(char *[17])0>(&v59, "param not enough");
              common::milog::MiLogStream::~MiLogStream(&v59);
              v6 = -1;
            }
            goto LABEL_117;
          }
        }
      }
    }
LABEL_116:
    v6 = -1;
    goto LABEL_117;
  }
  if ( std::vector<std::string>::size(param_vec) <= 1 )
  {
    common::milog::MiLogStream::create(
      &v59,
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/player/gm/player_gm_comp.cpp",
      "procGCGDeck",
      18786);
    common::milog::MiLogStream::operator<<<char [17],(char *[17])0>(&v59, "param not enough");
    common::milog::MiLogStream::~MiLogStream(&v59);
    v6 = -1;
    goto LABEL_117;
  }
  v9 = std::vector<std::string>::operator[](param_vec, 1uLL);
  if ( !std::operator==<char>(v9, off_26356D00) )
  {
    v15 = std::vector<std::string>::operator[](param_vec, 1uLL);
    if ( std::operator==<char>(v15, "CLEAR") )
    {
      GCGDeckSystem::onGMClearCard(deck_system);
      v6 = 0;
      goto LABEL_117;
    }
    v16 = std::vector<std::string>::operator[](param_vec, 1uLL);
    if ( std::operator==<char>(v16, "DELETE") )
    {
      if ( std::vector<std::string>::size(param_vec) > 2 )
      {
        *(_DWORD *)(v3 + 48) = 0;
        v17 = std::vector<std::string>::operator[](param_vec, 2uLL);
        if ( common::tools::StringUtils::strToNum<unsigned int>(v17, (unsigned int *)(v3 + 48), 1) )
        {
          common::milog::MiLogStream::create(
            &v59,
            &common::milog::MiLogDefault::default_log_obj_,
            3u,
            "./src/player/gm/player_gm_comp.cpp",
            "procGCGDeck",
            18828);
          common::milog::MiLogStream::operator<<<char [15],(char *[15])0>(&v59, (const char (*)[15])"strToNum fail.");
          common::milog::MiLogStream::~MiLogStream(&v59);
          v6 = -1;
        }
        else
        {
          GCGDeckSystem::onGMDeleteCard(deck_system, *(_DWORD *)(v3 + 48));
          v6 = 0;
        }
      }
      else
      {
        common::milog::MiLogStream::create(
          &v59,
          &common::milog::MiLogDefault::default_log_obj_,
          3u,
          "./src/player/gm/player_gm_comp.cpp",
          "procGCGDeck",
          18822);
        common::milog::MiLogStream::operator<<<char [17],(char *[17])0>(&v59, "param not enough");
        common::milog::MiLogStream::~MiLogStream(&v59);
        v6 = -1;
      }
      goto LABEL_117;
    }
    goto LABEL_116;
  }
  if ( std::vector<std::string>::size(param_vec) > 2 )
  {
    card_id = 0;
    v10 = std::vector<std::string>::operator[](param_vec, 2uLL);
    if ( std::operator==<char>(v10, _f.gap0) )
    {
      v6 = GCGDeckSystem::onGMAddCardAll(deck_system);
    }
    else
    {
      std::vector<unsigned int>::vector((std::vector<unsigned int> *const)(v3 + 128));
      std::allocator<char>::allocator(&__a);
      std::string::basic_string<std::allocator<char>>((std::string *const)&v59, ",", &__a);
      v11 = std::vector<std::string>::operator[](param_vec, 2uLL);
      v12 = common::tools::StringUtils::splitToList<unsigned int>(
              v11,
              (const std::string *)&v59,
              (std::vector<unsigned int> *)(v3 + 128),
              0) != 0;
      std::string::~string(&v59);
      std::allocator<char>::~allocator(&__a);
      if ( v12 )
      {
        std::string::operator=(ret_msg, "parse card id list fail");
        v6 = -1;
      }
      else
      {
        __for_range = (std::vector<unsigned int> *)(v3 + 128);
        __for_begin._M_current = std::vector<unsigned int>::begin((std::vector<unsigned int> *const)(v3 + 128))._M_current;
        __for_end._M_current = std::vector<unsigned int>::end(__for_range)._M_current;
        while ( __gnu_cxx::operator!=<unsigned int *,std::vector<unsigned int>>(&__for_begin, &__for_end) )
        {
          v13 = __gnu_cxx::__normal_iterator<unsigned int *,std::vector<unsigned int>>::operator*(&__for_begin);
          v14 = v13;
          if ( *(_BYTE *)(((unsigned __int64)v13 >> 3) + 0x7FFF8000) != 0
            && (char)(((unsigned __int8)v13 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)v13 >> 3) + 0x7FFF8000) )
          {
            __asan_report_load4(v13);
          }
          card_id_0 = *v14;
          GCGDeckSystem::onGMAddCard(deck_system, card_id_0);
          __gnu_cxx::__normal_iterator<unsigned int *,std::vector<unsigned int>>::operator++(&__for_begin);
        }
        v6 = 0;
      }
      std::vector<unsigned int>::~vector((std::vector<unsigned int> *const)(v3 + 128));
    }
  }
  else
  {
    common::milog::MiLogStream::create(
      &v59,
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/player/gm/player_gm_comp.cpp",
      "procGCGDeck",
      18793);
    common::milog::MiLogStream::operator<<<char [17],(char *[17])0>(&v59, "param not enough");
    common::milog::MiLogStream::~MiLogStream(&v59);
    v6 = -1;
  }
LABEL_117:
  result = v6;
  if ( v60 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8010) = 0LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF801C) = 0;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 19055: range 0000000017D7DAFC-0000000017D7DB9E
void __cdecl procGCGTavernRegister::procGCGTavernRegister(procGCGTavernRegister *const this)
{
  std::function<int(GmContext&,const std::vector<std::string>&,std::string&)> *v1; // rax
  std::allocator<char> __a; // [rsp+1Fh] [rbp-31h] BYREF
  std::string __k; // [rsp+20h] [rbp-30h] BYREF

  std::allocator<char>::allocator(&__a);
  std::string::basic_string<std::allocator<char>>(&__k, "TAVERN", &__a);
  v1 = std::unordered_map<std::string,std::function<int ()(GmContext &,std::vector<std::string> const&,std::string&)>>::operator[](
         &GmUtils::op_func_map[abi:cxx11],
         &__k);
  std::function<int ()(GmContext &,std::vector<std::string> const&,std::string&)>::operator=<int (&)(GmContext &,std::vector<std::string> const&,std::string&)>(
    v1,
    (int (*)(GmContext *, const std::vector<std::string> *, std::string *))procGCGTavern);
  std::string::~string(&__k);
  std::allocator<char>::~allocator(&__a);
};

// Line 19056: range 0000000017C5226B-0000000017C525C8
int32_t __cdecl procGCGTavern(GmContext *context, const std::vector<std::string> *param_vec, std::string *ret_msg)
{
  unsigned __int64 v3; // rbx
  __int64 v4; // rax
  _DWORD *v5; // r12
  int32_t result; // eax
  PlayerGCGComp *GCGComp; // rax
  const std::string *v8; // rax
  GCGTavernChallenge *tavern_challenge; // [rsp+28h] [rbp-A8h]
  common::milog::MiLogStream v10; // [rsp+30h] [rbp-A0h] BYREF
  char v11[128]; // [rsp+50h] [rbp-80h] BYREF

  v3 = (unsigned __int64)v11;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_1(96LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "2 48 4 18 character_id:19070 64 4 14 level_id:19071";
  *(_QWORD *)(v3 + 16) = procGCGTavern;
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = -234556943;
  v5[536862722] = -202116348;
  if ( std::vector<std::string>::empty(param_vec) )
  {
    common::milog::MiLogStream::create(
      &v10,
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/player/gm/player_gm_comp.cpp",
      "procGCGTavern",
      19059);
    common::milog::MiLogStream::operator<<<char [17],(char *[17])0>(&v10, "param not enough");
    common::milog::MiLogStream::~MiLogStream(&v10);
    result = -1;
  }
  else
  {
    if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
      __asan_report_load8();
    GCGComp = Player::getGCGComp(context->player);
    tavern_challenge = PlayerGCGComp::getTavernChallenge(GCGComp);
    v8 = std::vector<std::string>::operator[](param_vec, 0LL);
    if ( std::operator==<char>(v8, "INVITE") )
    {
      if ( std::vector<std::string>::size(param_vec) > 2 )
      {
        *(_DWORD *)(v3 + 48) = 0;
        *(_DWORD *)(v3 + 64) = 0;
        if ( common::tools::StringUtils::strVecToNum<1u,unsigned int,unsigned int &>(
               param_vec,
               (unsigned int *)(v3 + 48),
               (unsigned int *)(v3 + 64),
               (unsigned int *)(v3 + 48)) )
        {
          common::milog::MiLogStream::create(
            &v10,
            &common::milog::MiLogDefault::default_log_obj_,
            3u,
            "./src/player/gm/player_gm_comp.cpp",
            "procGCGTavern",
            19074);
          common::milog::MiLogStream::operator<<<char [15],(char *[15])0>(&v10, (const char (*)[15])"strToNum fail.");
          common::milog::MiLogStream::~MiLogStream(&v10);
          result = -1;
        }
        else
        {
          result = GCGTavernChallenge::invite(tavern_challenge, *(_DWORD *)(v3 + 48), *(_DWORD *)(v3 + 64));
        }
      }
      else
      {
        common::milog::MiLogStream::create(
          &v10,
          &common::milog::MiLogDefault::default_log_obj_,
          3u,
          "./src/player/gm/player_gm_comp.cpp",
          "procGCGTavern",
          19067);
        common::milog::MiLogStream::operator<<<char [17],(char *[17])0>(&v10, "param not enough");
        common::milog::MiLogStream::~MiLogStream(&v10);
        result = -1;
      }
    }
    else
    {
      result = -1;
    }
  }
  if ( v11 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8008) = 0;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8008) = -168430091;
  }
  return result;
};

// Line 19082: range 0000000017D7DBA0-0000000017D7DC42
void __cdecl procGCGGrowthRegister::procGCGGrowthRegister(procGCGGrowthRegister *const this)
{
  std::function<int(GmContext&,const std::vector<std::string>&,std::string&)> *v1; // rax
  std::allocator<char> __a; // [rsp+1Fh] [rbp-31h] BYREF
  std::string __k; // [rsp+20h] [rbp-30h] BYREF

  std::allocator<char>::allocator(&__a);
  std::string::basic_string<std::allocator<char>>(&__k, "GCG_GROWTH", &__a);
  v1 = std::unordered_map<std::string,std::function<int ()(GmContext &,std::vector<std::string> const&,std::string&)>>::operator[](
         &GmUtils::op_func_map[abi:cxx11],
         &__k);
  std::function<int ()(GmContext &,std::vector<std::string> const&,std::string&)>::operator=<int (&)(GmContext &,std::vector<std::string> const&,std::string&)>(
    v1,
    (int (*)(GmContext *, const std::vector<std::string> *, std::string *))procGCGGrowth);
  std::string::~string(&__k);
  std::allocator<char>::~allocator(&__a);
};

// Line 19083: range 0000000017C525C9-0000000017C529E1
int32_t __cdecl procGCGGrowth(GmContext *context, const std::vector<std::string> *param_vec, std::string *ret_msg)
{
  unsigned __int64 v3; // rbx
  __int64 v4; // rax
  _DWORD *v5; // r13
  int32_t result; // eax
  const std::string *v7; // rax
  PlayerGCGComp *GCGComp; // rax
  GCGBasic *Basic; // rax
  const std::string *v10; // rax
  PlayerGCGComp *v11; // rax
  GCGBasic *v12; // rax
  common::milog::MiLogStream v14; // [rsp+20h] [rbp-C0h] BYREF
  char v15[160]; // [rsp+40h] [rbp-A0h] BYREF

  v3 = (unsigned __int64)v15;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_1(128LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "2 48 4 9 exp:19111 64 24 12 reason:19117";
  *(_QWORD *)(v3 + 16) = procGCGGrowth;
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = -234556943;
  v5[536862722] = -218103808;
  v5[536862723] = -202116109;
  if ( std::vector<std::string>::empty(param_vec) )
  {
    std::string::operator=(ret_msg, "param not enough");
    result = -1;
    goto LABEL_22;
  }
  v7 = std::vector<std::string>::operator[](param_vec, 0LL);
  if ( std::operator==<char>(v7, "LEVEL") )
  {
    if ( std::vector<std::string>::size(param_vec) <= 1 )
    {
      common::milog::MiLogStream::create(
        &v14,
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/player/gm/player_gm_comp.cpp",
        "procGCGGrowth",
        19093);
      common::milog::MiLogStream::operator<<<char [17],(char *[17])0>(&v14, "param not enough");
      common::milog::MiLogStream::~MiLogStream(&v14);
      result = -1;
      goto LABEL_22;
    }
    *(_DWORD *)(v3 + 48) = 0;
    if ( common::tools::StringUtils::strVecToNum<1u,unsigned int>(param_vec, (unsigned int *)(v3 + 48)) )
      goto LABEL_10;
    if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
      __asan_report_load8();
    GCGComp = Player::getGCGComp(context->player);
    Basic = PlayerGCGComp::getBasic(GCGComp);
    result = GCGBasic::onGMSetLevel(Basic, *(_DWORD *)(v3 + 48));
  }
  else
  {
    v10 = std::vector<std::string>::operator[](param_vec, 0LL);
    if ( std::operator==<char>(v10, off_26351960) )
    {
      if ( std::vector<std::string>::size(param_vec) > 1 )
      {
        *(_DWORD *)(v3 + 48) = 0;
        if ( common::tools::StringUtils::strVecToNum<1u,unsigned int>(param_vec, (unsigned int *)(v3 + 48)) )
        {
LABEL_10:
          std::string::operator=(ret_msg, "strToNum fail.");
          result = -1;
          goto LABEL_22;
        }
        ActionReason::ActionReason((ActionReason *const)(v3 + 64), ACTION_REASON_GM, ITEM_LIMIT_GM);
        if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
          __asan_report_load8();
        v11 = Player::getGCGComp(context->player);
        v12 = PlayerGCGComp::getBasic(v11);
        result = GCGBasic::addExp(v12, *(_DWORD *)(v3 + 48), (const ActionReason *)(v3 + 64));
      }
      else
      {
        common::milog::MiLogStream::create(
          &v14,
          &common::milog::MiLogDefault::default_log_obj_,
          3u,
          "./src/player/gm/player_gm_comp.cpp",
          "procGCGGrowth",
          19108);
        common::milog::MiLogStream::operator<<<char [17],(char *[17])0>(&v14, "param not enough");
        common::milog::MiLogStream::~MiLogStream(&v14);
        result = -1;
      }
    }
    else
    {
      result = -1;
    }
  }
LABEL_22:
  if ( v15 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 19124: range 0000000017D7DC44-0000000017D7DCE6
void __cdecl procGCGLevelRegister::procGCGLevelRegister(procGCGLevelRegister *const this)
{
  std::function<int(GmContext&,const std::vector<std::string>&,std::string&)> *v1; // rax
  std::allocator<char> __a; // [rsp+1Fh] [rbp-31h] BYREF
  std::string __k; // [rsp+20h] [rbp-30h] BYREF

  std::allocator<char>::allocator(&__a);
  std::string::basic_string<std::allocator<char>>(&__k, "GCG_LEVEL", &__a);
  v1 = std::unordered_map<std::string,std::function<int ()(GmContext &,std::vector<std::string> const&,std::string&)>>::operator[](
         &GmUtils::op_func_map[abi:cxx11],
         &__k);
  std::function<int ()(GmContext &,std::vector<std::string> const&,std::string&)>::operator=<int (&)(GmContext &,std::vector<std::string> const&,std::string&)>(
    v1,
    (int (*)(GmContext *, const std::vector<std::string> *, std::string *))procGCGLevel);
  std::string::~string(&__k);
  std::allocator<char>::~allocator(&__a);
};

// Line 19125: range 0000000017C529E2-0000000017C52CEB
int32_t __cdecl procGCGLevel(GmContext *context, const std::vector<std::string> *param_vec, std::string *ret_msg)
{
  unsigned __int64 v3; // rbx
  __int64 v4; // rax
  unsigned __int64 v5; // r12
  int32_t result; // eax
  const std::string *v7; // rax
  const std::string *v8; // rax
  PlayerGCGComp *GCGComp; // rax
  GCGLevelChallenge *LevelChallenge; // rax
  common::milog::MiLogStream v12; // [rsp+20h] [rbp-80h] BYREF
  char v13[96]; // [rsp+40h] [rbp-60h] BYREF

  v3 = (unsigned __int64)v13;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_0(64LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "1 32 4 19 game_group_id:19145";
  *(_QWORD *)(v3 + 16) = procGCGLevel;
  v5 = v3 >> 3;
  *(_DWORD *)(v5 + 2147450880) = -235802127;
  *(_DWORD *)(v5 + 2147450884) = -202116348;
  if ( std::vector<std::string>::empty(param_vec) )
  {
    std::string::operator=(ret_msg, "param not enough");
    result = -1;
    goto LABEL_18;
  }
  v7 = std::vector<std::string>::operator[](param_vec, 0LL);
  if ( !std::operator==<char>(v7, "GUIDE") )
    goto LABEL_17;
  if ( std::vector<std::string>::size(param_vec) <= 1 )
  {
    common::milog::MiLogStream::create(
      &v12,
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/player/gm/player_gm_comp.cpp",
      "procGCGLevel",
      19135);
    common::milog::MiLogStream::operator<<<char [17],(char *[17])0>(&v12, "param not enough");
    common::milog::MiLogStream::~MiLogStream(&v12);
    result = -1;
    goto LABEL_18;
  }
  v8 = std::vector<std::string>::operator[](param_vec, 1uLL);
  if ( std::operator==<char>(v8, "RESET") )
  {
    if ( std::vector<std::string>::size(param_vec) > 2 )
    {
      *(_DWORD *)(v3 + 32) = 0;
      if ( common::tools::StringUtils::strVecToNum<2u,unsigned int>(param_vec, (unsigned int *)(v3 + 32)) )
      {
        std::string::operator=(ret_msg, "strToNum fail.");
        result = -1;
      }
      else
      {
        if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
          __asan_report_load8();
        GCGComp = Player::getGCGComp(context->player);
        LevelChallenge = PlayerGCGComp::getLevelChallenge(GCGComp);
        GCGLevelChallenge::onGMResetGuideProgress(LevelChallenge, *(_DWORD *)(v3 + 32));
        result = 0;
      }
    }
    else
    {
      common::milog::MiLogStream::create(
        &v12,
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/player/gm/player_gm_comp.cpp",
        "procGCGLevel",
        19142);
      common::milog::MiLogStream::operator<<<char [17],(char *[17])0>(&v12, "param not enough");
      common::milog::MiLogStream::~MiLogStream(&v12);
      result = -1;
    }
  }
  else
  {
LABEL_17:
    result = -1;
  }
LABEL_18:
  if ( v13 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 19158: range 0000000017D7DCE8-0000000017D7DD8A
void __cdecl doRegionalPlayRegister::doRegionalPlayRegister(doRegionalPlayRegister *const this)
{
  std::function<int(GmContext&,const std::vector<std::string>&,std::string&)> *v1; // rax
  std::allocator<char> __a; // [rsp+1Fh] [rbp-31h] BYREF
  std::string __k; // [rsp+20h] [rbp-30h] BYREF

  std::allocator<char>::allocator(&__a);
  std::string::basic_string<std::allocator<char>>(&__k, "REGIONAL_PLAY", &__a);
  v1 = std::unordered_map<std::string,std::function<int ()(GmContext &,std::vector<std::string> const&,std::string&)>>::operator[](
         &GmUtils::op_func_map[abi:cxx11],
         &__k);
  std::function<int ()(GmContext &,std::vector<std::string> const&,std::string&)>::operator=<int (&)(GmContext &,std::vector<std::string> const&,std::string&)>(
    v1,
    (int (*)(GmContext *, const std::vector<std::string> *, std::string *))doRegionalPlay);
  std::string::~string(&__k);
  std::allocator<char>::~allocator(&__a);
};

// Line 19159: range 0000000017C52CEC-0000000017C52EDD
int32_t __cdecl doRegionalPlay(GmContext *context, const std::vector<std::string> *param_vec, std::string *ret_msg)
{
  unsigned __int64 v3; // rbx
  __int64 v4; // rax
  _DWORD *v5; // r12
  int32_t result; // eax
  const std::string *v7; // rax
  PlayerRegionalPlayComp *RegionalPlayComp; // rax
  char v10[128]; // [rsp+20h] [rbp-80h] BYREF

  v3 = (unsigned __int64)v10;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_1(96LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "2 48 4 10 type:19167 64 4 11 value:19168";
  *(_QWORD *)(v3 + 16) = doRegionalPlay;
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = -234556943;
  v5[536862722] = -202116348;
  if ( std::vector<std::string>::empty(param_vec) )
  {
    std::string::operator=(ret_msg, "param not enough");
    result = -1;
    goto LABEL_13;
  }
  v7 = std::vector<std::string>::operator[](param_vec, 0LL);
  if ( std::operator==<char>(v7, "SET_VAR") )
  {
    *(_DWORD *)(v3 + 48) = 0;
    *(_DWORD *)(v3 + 64) = 0;
    if ( common::tools::StringUtils::strVecToNum<1u,unsigned int,float &>(
           param_vec,
           (unsigned int *)(v3 + 48),
           (float *)(v3 + 64),
           (float *)(v3 + 48)) )
    {
      std::string::operator=(ret_msg, "parse [type] [value] fail");
      result = -1;
      goto LABEL_13;
    }
    if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
      __asan_report_load8();
    RegionalPlayComp = Player::getRegionalPlayComp(context->player);
    PlayerRegionalPlayComp::setVarValue(RegionalPlayComp, *(_DWORD *)(v3 + 48), *(float *)(v3 + 64));
  }
  result = 0;
LABEL_13:
  if ( v10 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8008) = 0;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8008) = -168430091;
  }
  return result;
};

// Line 19179: range 0000000017D7DD8C-0000000017D7DE2E
void __cdecl protTimeUtilsRegister::protTimeUtilsRegister(protTimeUtilsRegister *const this)
{
  std::function<int(GmContext&,const std::vector<std::string>&,std::string&)> *v1; // rax
  std::allocator<char> __a; // [rsp+1Fh] [rbp-31h] BYREF
  std::string __k; // [rsp+20h] [rbp-30h] BYREF

  std::allocator<char>::allocator(&__a);
  std::string::basic_string<std::allocator<char>>(&__k, "TIME_UTILS", &__a);
  v1 = std::unordered_map<std::string,std::function<int ()(GmContext &,std::vector<std::string> const&,std::string&)>>::operator[](
         &GmUtils::op_func_map[abi:cxx11],
         &__k);
  std::function<int ()(GmContext &,std::vector<std::string> const&,std::string&)>::operator=<int (&)(GmContext &,std::vector<std::string> const&,std::string&)>(
    v1,
    (int (*)(GmContext *, const std::vector<std::string> *, std::string *))protTimeUtils);
  std::string::~string(&__k);
  std::allocator<char>::~allocator(&__a);
};

// Line 19180: range 0000000017C52EDE-0000000017C53631
int32_t __cdecl protTimeUtils(GmContext *context, const std::vector<std::string> *param_vec, std::string *ret_msg)
{
  unsigned __int64 v3; // r12
  __int64 v4; // rax
  unsigned __int64 v5; // r13
  int32_t v6; // r14d
  const std::string *v7; // rax
  const std::string *v8; // rax
  common::tools::StringStream<common::tools::FixedBuffer<4096> > *v9; // r14
  const std::string *v10; // rax
  const std::string *v11; // rax
  common::tools::StringStream<common::tools::FixedBuffer<4096> > *v12; // r14
  const std::string *v13; // rax
  common::tools::StringStream<common::tools::FixedBuffer<4096> > *v14; // rax
  common::tools::StringStream<common::tools::FixedBuffer<4096> > *v15; // rax
  common::tools::StringStream<common::tools::FixedBuffer<4096> > *v16; // rdx
  common::tools::StringStream<common::tools::FixedBuffer<4096> > *v17; // rax
  common::tools::StringStream<common::tools::FixedBuffer<4096> > *v18; // r14
  const std::string *v19; // rax
  const std::string *v20; // rax
  const std::string *v21; // rax
  common::tools::StringStream<common::tools::FixedBuffer<4096> > *v22; // r14
  const std::string *v23; // rax
  common::tools::StringStream<common::tools::FixedBuffer<4096> > *v24; // rax
  common::tools::StringStream<common::tools::FixedBuffer<4096> > *v25; // rax
  common::tools::StringStream<common::tools::FixedBuffer<4096> > *v26; // rdx
  common::tools::StringStream<common::tools::FixedBuffer<4096> > *v27; // rax
  common::tools::StringStream<common::tools::FixedBuffer<4096> > *v28; // r14
  int32_t result; // eax
  time_t utc_time_0; // [rsp+20h] [rbp-C0h]
  time_t utc_time; // [rsp+28h] [rbp-B8h]
  std::string v33; // [rsp+30h] [rbp-B0h] BYREF
  common::milog::MiLogStream v34; // [rsp+50h] [rbp-90h] BYREF
  char v35[112]; // [rsp+70h] [rbp-70h] BYREF

  v3 = (unsigned __int64)v35;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_0(64LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "1 32 16 8 ss:19216";
  *(_QWORD *)(v3 + 16) = protTimeUtils;
  v5 = v3 >> 3;
  *(_DWORD *)(v5 + 2147450880) = -235802127;
  *(_DWORD *)(v5 + 2147450884) = -202178560;
  if ( std::vector<std::string>::empty(param_vec) )
  {
    common::milog::MiLogStream::create(
      &v34,
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/player/gm/player_gm_comp.cpp",
      "protTimeUtils",
      19183);
    common::milog::MiLogStream::operator<<<char [17],(char *[17])0>(&v34, "param not enough");
    common::milog::MiLogStream::~MiLogStream(&v34);
    v6 = -1;
    goto LABEL_19;
  }
  v7 = std::vector<std::string>::operator[](param_vec, 0LL);
  if ( std::operator==<char>(v7, "VALID_DAY") )
  {
    if ( std::vector<std::string>::size(param_vec) <= 1 )
    {
      common::milog::MiLogStream::create(
        &v34,
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/player/gm/player_gm_comp.cpp",
        "protTimeUtils",
        19191);
      common::milog::MiLogStream::operator<<<char [17],(char *[17])0>(&v34, "param not enough");
      common::milog::MiLogStream::~MiLogStream(&v34);
      v6 = -1;
      goto LABEL_19;
    }
    common::tools::StringStream<common::tools::FixedBuffer<4096>>::StringStream((common::tools::StringStream<common::tools::FixedBuffer<4096> > *const)(v3 + 32));
    v8 = std::vector<std::string>::operator[](param_vec, 1uLL);
    if ( common::tools::TimeUtils::isDayStrValid(v8) )
    {
      v11 = std::vector<std::string>::operator[](param_vec, 1uLL);
      std::operator+<char>((std::string *)&v34, v11, " 00:00:00");
      utc_time = common::tools::TimeUtils::getUTCTimeByStr((const std::string *)&v34);
      std::string::~string(&v34);
      v12 = common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(
              (common::tools::StringStream<common::tools::FixedBuffer<4096> > *const)(v3 + 32),
              "origin: ");
      v13 = std::vector<std::string>::operator[](param_vec, 1uLL);
      v14 = common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(v12, v13);
      v15 = common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(v14, ", ");
      v16 = common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(v15, " time: ");
      v17 = common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(v16, utc_time);
      v18 = common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(v17, " local:");
      common::tools::TimeUtils::getStrByTime[abi:cxx11]((std::string *)&v34, utc_time);
      common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(v18, (const std::string *)&v34);
      std::string::~string(&v34);
      common::tools::StringStream<common::tools::FixedBuffer<4096>>::str[abi:cxx11](
        (std::string *)&v34,
        (common::tools::StringStream<common::tools::FixedBuffer<4096> > *const)(v3 + 32));
      std::string::operator=(ret_msg, &v34);
      std::string::~string(&v34);
      goto LABEL_12;
    }
LABEL_10:
    v9 = common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(
           (common::tools::StringStream<common::tools::FixedBuffer<4096> > *const)(v3 + 32),
           &byte_26374D00);
    v10 = std::vector<std::string>::operator[](param_vec, 1uLL);
    common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(v9, v10);
    common::tools::StringStream<common::tools::FixedBuffer<4096>>::str[abi:cxx11](
      &v33,
      (common::tools::StringStream<common::tools::FixedBuffer<4096> > *const)(v3 + 32));
    std::string::operator=(ret_msg, &v33);
    std::string::~string(&v33);
LABEL_12:
    v6 = 0;
    common::tools::StringStream<common::tools::FixedBuffer<4096>>::~StringStream((common::tools::StringStream<common::tools::FixedBuffer<4096> > *const)(v3 + 32));
    goto LABEL_19;
  }
  v19 = std::vector<std::string>::operator[](param_vec, 0LL);
  if ( std::operator==<char>(v19, "VALID_TIME") )
  {
    if ( std::vector<std::string>::size(param_vec) > 1 )
    {
      common::tools::StringStream<common::tools::FixedBuffer<4096>>::StringStream((common::tools::StringStream<common::tools::FixedBuffer<4096> > *const)(v3 + 32));
      v20 = std::vector<std::string>::operator[](param_vec, 1uLL);
      if ( common::tools::TimeUtils::isTimeStrValid(v20) )
      {
        v21 = std::vector<std::string>::operator[](param_vec, 1uLL);
        utc_time_0 = common::tools::TimeUtils::getUTCTimeByStr(v21);
        v22 = common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(
                (common::tools::StringStream<common::tools::FixedBuffer<4096> > *const)(v3 + 32),
                "origin: ");
        v23 = std::vector<std::string>::operator[](param_vec, 1uLL);
        v24 = common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(v22, v23);
        v25 = common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(v24, ", ");
        v26 = common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(v25, " time: ");
        v27 = common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(v26, utc_time_0);
        v28 = common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(v27, " local:");
        common::tools::TimeUtils::getStrByTime[abi:cxx11]((std::string *)&v34, utc_time_0);
        common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(v28, (const std::string *)&v34);
        std::string::~string(&v34);
        common::tools::StringStream<common::tools::FixedBuffer<4096>>::str[abi:cxx11](
          (std::string *)&v34,
          (common::tools::StringStream<common::tools::FixedBuffer<4096> > *const)(v3 + 32));
        std::string::operator=(ret_msg, &v34);
        std::string::~string(&v34);
        goto LABEL_12;
      }
      goto LABEL_10;
    }
    common::milog::MiLogStream::create(
      &v34,
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/player/gm/player_gm_comp.cpp",
      "protTimeUtils",
      19212);
    common::milog::MiLogStream::operator<<<char [17],(char *[17])0>(&v34, "param not enough");
    common::milog::MiLogStream::~MiLogStream(&v34);
    v6 = -1;
  }
  else
  {
    v6 = 0;
  }
LABEL_19:
  result = v6;
  if ( v35 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 19234: range 0000000017D7DE30-0000000017D7DED2
void __cdecl protHomeBalloonRegister::protHomeBalloonRegister(protHomeBalloonRegister *const this)
{
  std::function<int(GmContext&,const std::vector<std::string>&,std::string&)> *v1; // rax
  std::allocator<char> __a; // [rsp+1Fh] [rbp-31h] BYREF
  std::string __k; // [rsp+20h] [rbp-30h] BYREF

  std::allocator<char>::allocator(&__a);
  std::string::basic_string<std::allocator<char>>(&__k, "HOME_BALLOON", &__a);
  v1 = std::unordered_map<std::string,std::function<int ()(GmContext &,std::vector<std::string> const&,std::string&)>>::operator[](
         &GmUtils::op_func_map[abi:cxx11],
         &__k);
  std::function<int ()(GmContext &,std::vector<std::string> const&,std::string&)>::operator=<int (&)(GmContext &,std::vector<std::string> const&,std::string&)>(
    v1,
    (int (*)(GmContext *, const std::vector<std::string> *, std::string *))protHomeBalloon);
  std::string::~string(&__k);
  std::allocator<char>::~allocator(&__a);
};

// Line 19235: range 0000000017C53632-0000000017C53E69
int32_t __cdecl protHomeBalloon(GmContext *context, const std::vector<std::string> *param_vec, std::string *ret_msg)
{
  unsigned __int64 v3; // r13
  __int64 v4; // rax
  _DWORD *v5; // r12
  int32_t v6; // r14d
  Scene *v7; // rax
  uint32_t GalleryComp; // eax
  const std::string *v9; // rax
  std::__shared_ptr_access<HomeBalloonGallery,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v10; // rax
  const std::string *v11; // rax
  const std::string *v12; // rax
  uint32_t v13; // eax
  std::__shared_ptr_access<Group,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v14; // rax
  std::_Rb_tree_const_iterator<unsigned int>::reference v15; // rax
  uint32_t v16; // eax
  std::__shared_ptr_access<Gadget,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v17; // rax
  std::__shared_ptr_access<Gadget,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v18; // rax
  HomeBalloonGallery *v19; // r14
  uint32_t Uid; // eax
  int32_t result; // eax
  std::set<unsigned int>::iterator __for_begin; // [rsp+28h] [rbp-228h] BYREF
  std::set<unsigned int>::iterator __for_end; // [rsp+30h] [rbp-220h] BYREF
  Player *player; // [rsp+38h] [rbp-218h]
  const GroupScriptConfig *group_script_config_ptr; // [rsp+40h] [rbp-210h]
  const SuiteScriptConfig *suite_script_config_ptr; // [rsp+48h] [rbp-208h]
  const std::set<unsigned int> *gadget_config_set; // [rsp+50h] [rbp-200h]
  const std::set<unsigned int> *__for_range; // [rsp+58h] [rbp-1F8h]
  common::milog::MiLogStream v30; // [rsp+60h] [rbp-1F0h] BYREF
  char v31[464]; // [rsp+80h] [rbp-1D0h] BYREF

  v3 = (unsigned __int64)v31;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_3(416LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "7 32 4 14 group_id:19270 48 4 17 suite_index:19277 64 16 15 scene_ptr:19243 96 16 17 gallery_ptr"
                        ":19249 128 16 15 group_ptr:19284 160 16 26 last_wave_gadget_ptr:19311 192 160 20 script_context:19306";
  *(_QWORD *)(v3 + 16) = protHomeBalloon;
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = -234556924;
  v5[536862722] = -219021312;
  v5[536862723] = -219021312;
  v5[536862724] = -219021312;
  v5[536862725] = -219021312;
  v5[536862731] = -202116109;
  v5[536862732] = -202116109;
  if ( std::vector<std::string>::empty(param_vec) )
  {
    common::milog::MiLogStream::create(
      &v30,
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/player/gm/player_gm_comp.cpp",
      "protHomeBalloon",
      19238);
    common::milog::MiLogStream::operator<<<char [17],(char *[17])0>(&v30, "param not enough");
    common::milog::MiLogStream::~MiLogStream(&v30);
    v6 = -1;
  }
  else
  {
    if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
      __asan_report_load8();
    player = context->player;
    Player::getSceneComp(player);
    PlayerSceneComp::getCurScene((const PlayerSceneComp *const)(v3 + 64));
    if ( std::operator==<Scene>(0LL, (const std::shared_ptr<Scene> *)(v3 + 64)) )
    {
      std::string::operator=(ret_msg, "scene is null");
      v6 = -1;
    }
    else
    {
      v7 = std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 64));
      GalleryComp = (unsigned int)Scene::getGalleryComp(v7);
      SceneGalleryComp::findGallery<HomeBalloonGallery>((SceneGalleryComp *const)(v3 + 96), GalleryComp);
      if ( std::operator==<HomeBalloonGallery>(0LL, (const std::shared_ptr<HomeBalloonGallery> *)(v3 + 96)) )
      {
        std::string::operator=(ret_msg, "gallery not exists");
        v6 = -1;
      }
      else
      {
        v9 = std::vector<std::string>::operator[](param_vec, 0LL);
        if ( std::operator==<char>(v9, "SHOOT_ALL") )
        {
          if ( std::vector<std::string>::size(param_vec) > 2 )
          {
            v10 = std::__shared_ptr_access<HomeBalloonGallery,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<HomeBalloonGallery,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 96));
            if ( !BaseGallery::isStart(v10) )
            {
              std::string::operator=(ret_msg, "gallery not start");
              v6 = -1;
            }
            else
            {
              *(_DWORD *)(v3 + 32) = 0;
              v11 = std::vector<std::string>::operator[](param_vec, 1uLL);
              if ( common::tools::StringUtils::strToNum<unsigned int>(v11, (unsigned int *)(v3 + 32), 1) )
              {
                std::string::operator=(ret_msg, "parse group_id fail.");
                v6 = -1;
              }
              else
              {
                *(_DWORD *)(v3 + 48) = 0;
                v12 = std::vector<std::string>::operator[](param_vec, 2uLL);
                if ( common::tools::StringUtils::strToNum<unsigned int>(v12, (unsigned int *)(v3 + 48), 1) )
                {
                  std::string::operator=(ret_msg, "parse suite_index fail.");
                  v6 = -1;
                }
                else
                {
                  v13 = (unsigned int)std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 64));
                  Scene::findGroup((Scene *const)(v3 + 128), v13);
                  if ( std::operator==<Group>(0LL, (const std::shared_ptr<Group> *)(v3 + 128)) )
                  {
                    std::string::operator=(ret_msg, "group_ptr is null");
                    v6 = -1;
                  }
                  else
                  {
                    v14 = std::__shared_ptr_access<Group,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Group,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 128));
                    group_script_config_ptr = Group::getScriptConfig(v14);
                    if ( group_script_config_ptr )
                    {
                      suite_script_config_ptr = GroupScriptConfig::getSuiteConfig(
                                                  group_script_config_ptr,
                                                  *(_DWORD *)(v3 + 48));
                      if ( suite_script_config_ptr )
                      {
                        gadget_config_set = &suite_script_config_ptr->gadget_config_set;
                        ScriptContext::ScriptContext((ScriptContext *const)(v3 + 192));
                        __for_range = &suite_script_config_ptr->gadget_config_set;
                        __for_begin._M_node = std::set<unsigned int>::begin(&suite_script_config_ptr->gadget_config_set)._M_node;
                        __for_end._M_node = std::set<unsigned int>::end(&suite_script_config_ptr->gadget_config_set)._M_node;
                        while ( std::operator!=(&__for_begin, &__for_end) )
                        {
                          v15 = std::_Rb_tree_const_iterator<unsigned int>::operator*(&__for_begin);
                          if ( *(_BYTE *)(((unsigned __int64)v15 >> 3) + 0x7FFF8000) != 0
                            && (char)(((unsigned __int8)v15 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)v15 >> 3)
                                                                                  + 0x7FFF8000) )
                          {
                            __asan_report_load4(v15);
                          }
                          v16 = (unsigned int)std::__shared_ptr_access<Group,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Group,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 128));
                          Group::findEntityByConfigId<Gadget>((Group *const)(v3 + 160), v16);
                          if ( std::operator!=<Gadget>(0LL, (const std::shared_ptr<Gadget> *)(v3 + 160)) )
                          {
                            v17 = std::__shared_ptr_access<Gadget,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Gadget,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 160));
                            Creature::subCurHpToZero(v17, CHANGE_HP_SUB_SCRIPT, 1);
                            v18 = std::__shared_ptr_access<Gadget,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Gadget,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 160));
                            *(_DWORD *)(v3 + 272) = Entity::getEntityId((const Entity *const)v18);
                            v19 = std::__shared_ptr_access<HomeBalloonGallery,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<HomeBalloonGallery,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 96));
                            Uid = Player::getUid(player);
                            HomeBalloonGallery::updatePlayerScore(v19, Uid, 0xAu, (const ScriptContext *)(v3 + 192));
                          }
                          std::shared_ptr<Gadget>::~shared_ptr((std::shared_ptr<Gadget> *const)(v3 + 160));
                          std::_Rb_tree_const_iterator<unsigned int>::operator++(&__for_begin);
                        }
                        v6 = 0;
                        ScriptContext::~ScriptContext((ScriptContext *const)(v3 + 192));
                      }
                      else
                      {
                        std::string::operator=(ret_msg, "getSuiteConfig failed");
                        v6 = -1;
                      }
                    }
                    else
                    {
                      std::string::operator=(ret_msg, "getScriptConfig failed");
                      v6 = -1;
                    }
                  }
                  std::shared_ptr<Group>::~shared_ptr((std::shared_ptr<Group> *const)(v3 + 128));
                }
              }
            }
          }
          else
          {
            common::milog::MiLogStream::create(
              &v30,
              &common::milog::MiLogDefault::default_log_obj_,
              3u,
              "./src/player/gm/player_gm_comp.cpp",
              "protHomeBalloon",
              19260);
            common::milog::MiLogStream::operator<<<char [17],(char *[17])0>(&v30, "param not enough");
            common::milog::MiLogStream::~MiLogStream(&v30);
            v6 = -1;
          }
        }
        else
        {
          v6 = 0;
        }
      }
      std::shared_ptr<HomeBalloonGallery>::~shared_ptr((std::shared_ptr<HomeBalloonGallery> *const)(v3 + 96));
    }
    std::shared_ptr<Scene>::~shared_ptr((std::shared_ptr<Scene> *const)(v3 + 64));
  }
  result = v6;
  if ( v31 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8010) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF802C) = 0LL;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8020) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8028) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8030) = -168430091;
  }
  return result;
};

// Line 19325: range 0000000017D7DED4-0000000017D7DF76
void __cdecl procCustomDungeonRegister::procCustomDungeonRegister(procCustomDungeonRegister *const this)
{
  std::function<int(GmContext&,const std::vector<std::string>&,std::string&)> *v1; // rax
  std::allocator<char> __a; // [rsp+1Fh] [rbp-31h] BYREF
  std::string __k; // [rsp+20h] [rbp-30h] BYREF

  std::allocator<char>::allocator(&__a);
  std::string::basic_string<std::allocator<char>>(&__k, "CUSTOM_DUNGEON", &__a);
  v1 = std::unordered_map<std::string,std::function<int ()(GmContext &,std::vector<std::string> const&,std::string&)>>::operator[](
         &GmUtils::op_func_map[abi:cxx11],
         &__k);
  std::function<int ()(GmContext &,std::vector<std::string> const&,std::string&)>::operator=<int (&)(GmContext &,std::vector<std::string> const&,std::string&)>(
    v1,
    (int (*)(GmContext *, const std::vector<std::string> *, std::string *))procCustomDungeon);
  std::string::~string(&__k);
  std::allocator<char>::~allocator(&__a);
};

// Line 19326: range 0000000017C543BC-0000000017C5586B
// local variable allocation has failed, the output may be wrong!
int32_t __cdecl procCustomDungeon(GmContext *context, const std::vector<std::string> *param_vec, std::string *ret_msg)
{
  unsigned __int64 v3; // r12
  __int64 v4; // rax
  _DWORD *v5; // r13
  int32_t result; // eax
  const std::string *v7; // rax
  const std::string *v8; // rax
  const std::string *v9; // rax
  PlayerCustomDungeonComp *CustomDungeonComp; // rax
  const std::string *v11; // rax
  const std::string *v12; // rax
  PlayerCustomDungeonComp *v13; // rax
  const std::string *v14; // rax
  const std::string *v15; // rax
  PlayerCustomDungeonComp *v16; // rax
  const std::string *v17; // rax
  const std::string *v18; // rax
  PlayerCustomDungeonComp *v19; // rax
  const std::string *v20; // rax
  const std::string *v21; // rax
  PlayerCustomDungeonComp *v22; // rax
  const std::string *v23; // rax
  const std::string *v24; // rax
  const std::string *v25; // rax
  const std::string *v26; // rax
  const std::string *v27; // rax
  const std::string *v28; // rax
  PlayerCustomDungeonComp *v29; // rax
  const std::string *v30; // rax
  const std::string *v31; // rax
  PlayerCustomDungeonComp *v32; // rax
  const std::string *v33; // rax
  PlayerCustomDungeonComp *v34; // rax
  const std::string *v35; // rax
  const std::string *v36; // rax
  PlayerCustomDungeonComp *v37; // rax
  const std::string *v38; // rax
  PlayerCustomDungeonComp *v39; // rax
  const std::string *v40; // rax
  PlayerCustomDungeonComp *v41; // rax
  const std::string *v42; // rax
  const std::string *v43; // rax
  const std::string *v45; // rax
  common::milog::MiLogStream *v46; // rbx
  const std::string *v47; // rax
  const std::string *v48; // rax
  common::milog::MiLogStream *v50; // rbx
  const std::string *v51; // rax
  Scene *v52; // r14
  unsigned __int64 v53; // rsi OVERLAPPED
  Scene *v54; // [rsp+10h] [rbp-E0h]
  Scene *scene; // [rsp+10h] [rbp-E0h]
  uint32_t update_type; // [rsp+38h] [rbp-B8h]
  uint32_t uid; // [rsp+3Ch] [rbp-B4h]
  common::milog::MiLogStream v59; // [rsp+40h] [rbp-B0h] BYREF
  char v60[144]; // [rsp+60h] [rbp-90h] BYREF
  procCustomDungeon::<lambda(Gadget&)> v61; // 0:rsi.8,8:edx.4

  v3 = (unsigned __int64)v60;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_1(96LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "3 32 1 13 is_succ:19556 48 4 18 challenge_id:19555 64 8 18 dungeon_guid:19507";
  *(_QWORD *)(v3 + 16) = procCustomDungeon;
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = -234556927;
  v5[536862722] = -202116352;
  if ( std::vector<std::string>::empty(param_vec) )
  {
    common::milog::MiLogStream::create(
      &v59,
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/player/gm/player_gm_comp.cpp",
      "procCustomDungeon",
      19329);
    common::milog::MiLogStream::operator<<<char [17],(char *[17])0>(&v59, "param not enough");
    common::milog::MiLogStream::~MiLogStream(&v59);
    result = -1;
    goto LABEL_115;
  }
  v7 = std::vector<std::string>::operator[](param_vec, 0LL);
  if ( std::operator==<char>(v7, "STATE") )
  {
    if ( std::vector<std::string>::size(param_vec) <= 2 )
    {
      common::milog::MiLogStream::create(
        &v59,
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/player/gm/player_gm_comp.cpp",
        "procCustomDungeon",
        19337);
      common::milog::MiLogStream::operator<<<char [17],(char *[17])0>(&v59, "param not enough");
      common::milog::MiLogStream::~MiLogStream(&v59);
      result = -1;
      goto LABEL_115;
    }
    *(_QWORD *)(v3 + 64) = 0LL;
    v8 = std::vector<std::string>::operator[](param_vec, 1uLL);
    if ( common::tools::StringUtils::strToNum<unsigned long>(v8, (unsigned __int64 *)(v3 + 64), 1) )
    {
LABEL_49:
      std::string::operator=(ret_msg, &off_26375320);
      result = -1;
      goto LABEL_115;
    }
    *(_DWORD *)(v3 + 48) = 0;
    v9 = std::vector<std::string>::operator[](param_vec, 2uLL);
    if ( common::tools::StringUtils::strToNum<unsigned int>(v9, (unsigned int *)(v3 + 48), 1) )
    {
      std::string::operator=(ret_msg, &off_26375360);
      result = -1;
    }
    else
    {
      if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
        __asan_report_load8();
      CustomDungeonComp = Player::getCustomDungeonComp(context->player);
      result = PlayerCustomDungeonComp::setCustomDungeonStateByGm(
                 CustomDungeonComp,
                 *(_QWORD *)(v3 + 64),
                 *(_DWORD *)(v3 + 48));
    }
  }
  else
  {
    v11 = std::vector<std::string>::operator[](param_vec, 0LL);
    if ( std::operator==<char>(v11, "PUBLISH") )
    {
      if ( std::vector<std::string>::size(param_vec) <= 1 )
      {
        common::milog::MiLogStream::create(
          &v59,
          &common::milog::MiLogDefault::default_log_obj_,
          3u,
          "./src/player/gm/player_gm_comp.cpp",
          "procCustomDungeon",
          19361);
        common::milog::MiLogStream::operator<<<char [17],(char *[17])0>(&v59, "param not enough");
        common::milog::MiLogStream::~MiLogStream(&v59);
        result = -1;
        goto LABEL_115;
      }
      *(_QWORD *)(v3 + 64) = 0LL;
      v12 = std::vector<std::string>::operator[](param_vec, 1uLL);
      if ( common::tools::StringUtils::strToNum<unsigned long>(v12, (unsigned __int64 *)(v3 + 64), 1) )
        goto LABEL_49;
      if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
        __asan_report_load8();
      v13 = Player::getCustomDungeonComp(context->player);
      result = PlayerCustomDungeonComp::publishCustomDungeonByGm(v13, *(_QWORD *)(v3 + 64));
    }
    else
    {
      v14 = std::vector<std::string>::operator[](param_vec, 0LL);
      if ( std::operator==<char>(v14, "OFFICIAL_EDIT") )
      {
        if ( std::vector<std::string>::size(param_vec) <= 1 )
        {
          common::milog::MiLogStream::create(
            &v59,
            &common::milog::MiLogDefault::default_log_obj_,
            3u,
            "./src/player/gm/player_gm_comp.cpp",
            "procCustomDungeon",
            19377);
          common::milog::MiLogStream::operator<<<char [17],(char *[17])0>(&v59, "param not enough");
          common::milog::MiLogStream::~MiLogStream(&v59);
          result = -1;
          goto LABEL_115;
        }
        *(_DWORD *)(v3 + 48) = 0;
        v15 = std::vector<std::string>::operator[](param_vec, 1uLL);
        if ( common::tools::StringUtils::strToNum<unsigned int>(v15, (unsigned int *)(v3 + 48), 1) )
          goto LABEL_49;
        if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
          __asan_report_load8();
        v16 = Player::getCustomDungeonComp(context->player);
        result = PlayerCustomDungeonComp::enterCustomDungeonOfficialEdit(v16, *(_DWORD *)(v3 + 48));
      }
      else
      {
        v17 = std::vector<std::string>::operator[](param_vec, 0LL);
        if ( std::operator==<char>(v17, "OFFICIAL_UNLOCK") )
        {
          if ( std::vector<std::string>::size(param_vec) <= 1 )
          {
            common::milog::MiLogStream::create(
              &v59,
              &common::milog::MiLogDefault::default_log_obj_,
              3u,
              "./src/player/gm/player_gm_comp.cpp",
              "procCustomDungeon",
              19392);
            common::milog::MiLogStream::operator<<<char [17],(char *[17])0>(&v59, "param not enough");
            common::milog::MiLogStream::~MiLogStream(&v59);
            result = -1;
            goto LABEL_115;
          }
          *(_DWORD *)(v3 + 48) = 0;
          v18 = std::vector<std::string>::operator[](param_vec, 1uLL);
          if ( common::tools::StringUtils::strToNum<unsigned int>(v18, (unsigned int *)(v3 + 48), 1) )
            goto LABEL_49;
          if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
            __asan_report_load8();
          v19 = Player::getCustomDungeonComp(context->player);
          PlayerCustomDungeonComp::unlockOfficialDungeon(v19, *(_DWORD *)(v3 + 48));
          result = 0;
        }
        else
        {
          v20 = std::vector<std::string>::operator[](param_vec, 0LL);
          if ( std::operator==<char>(v20, "OFFICIAL_FINISH") )
          {
            if ( std::vector<std::string>::size(param_vec) <= 1 )
            {
              common::milog::MiLogStream::create(
                &v59,
                &common::milog::MiLogDefault::default_log_obj_,
                3u,
                "./src/player/gm/player_gm_comp.cpp",
                "procCustomDungeon",
                19410);
              common::milog::MiLogStream::operator<<<char [17],(char *[17])0>(&v59, "param not enough");
              common::milog::MiLogStream::~MiLogStream(&v59);
              result = -1;
              goto LABEL_115;
            }
            *(_DWORD *)(v3 + 48) = 0;
            v21 = std::vector<std::string>::operator[](param_vec, 1uLL);
            if ( common::tools::StringUtils::strToNum<unsigned int>(v21, (unsigned int *)(v3 + 48), 1) )
              goto LABEL_49;
            if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
              __asan_report_load8();
            v22 = Player::getCustomDungeonComp(context->player);
            result = PlayerCustomDungeonComp::finishOfficialDungeonByGm(v22, *(_DWORD *)(v3 + 48));
          }
          else
          {
            v23 = std::vector<std::string>::operator[](param_vec, 0LL);
            if ( !std::operator==<char>(v23, "SOCIAL") )
            {
              v30 = std::vector<std::string>::operator[](param_vec, 0LL);
              if ( std::operator==<char>(v30, "OPEN") )
              {
                if ( std::vector<std::string>::size(param_vec) > 1 )
                {
                  *(_DWORD *)(v3 + 48) = 0;
                  v31 = std::vector<std::string>::operator[](param_vec, 1uLL);
                  if ( common::tools::StringUtils::strToNum<unsigned int>(v31, (unsigned int *)(v3 + 48), 1) )
                  {
                    std::string::operator=(ret_msg, &off_26375620);
                    result = -1;
                  }
                  else
                  {
                    if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
                      __asan_report_load8();
                    v32 = Player::getCustomDungeonComp(context->player);
                    PlayerCustomDungeonComp::openCustomDungeon(v32, *(_DWORD *)(v3 + 48));
                    result = 0;
                  }
                  goto LABEL_115;
                }
              }
              else
              {
                v33 = std::vector<std::string>::operator[](param_vec, 0LL);
                if ( std::operator==<char>(v33, "ENABLE_UGC") )
                {
                  if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
                    __asan_report_load8();
                  v34 = Player::getCustomDungeonComp(context->player);
                  PlayerCustomDungeonComp::enableUGC(v34);
                  result = 0;
                  goto LABEL_115;
                }
                v35 = std::vector<std::string>::operator[](param_vec, 0LL);
                if ( !std::operator==<char>(v35, "INVALID_CACHE") )
                {
                  v38 = std::vector<std::string>::operator[](param_vec, 0LL);
                  if ( std::operator==<char>(v38, "SCORE") )
                  {
                    if ( std::vector<std::string>::size(param_vec) > 1 )
                    {
                      *(_QWORD *)(v3 + 64) = 0LL;
                      v40 = std::vector<std::string>::operator[](param_vec, 1uLL);
                      if ( common::tools::StringUtils::strToNum<unsigned long>(v40, (unsigned __int64 *)(v3 + 64), 1) )
                      {
                        std::string::operator=(ret_msg, "invalid dungeon guid param");
                        result = -1;
                      }
                      else
                      {
                        if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
                          __asan_report_load8();
                        v41 = Player::getCustomDungeonComp(context->player);
                        PlayerCustomDungeonComp::getCustomDungeonScoreByGm(v41, *(_QWORD *)(v3 + 64));
                        result = 0;
                      }
                    }
                    else
                    {
                      std::string::operator=(ret_msg, "score_list:\n");
                      if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
                        __asan_report_load8();
                      v39 = Player::getCustomDungeonComp(context->player);
                      PlayerCustomDungeonComp::getRecommendScoreByGm[abi:cxx11]((std::string *)&v59, v39);
                      std::string::operator+=(ret_msg, &v59);
                      std::string::~string(&v59);
                      result = 0;
                    }
                  }
                  else
                  {
                    v42 = std::vector<std::string>::operator[](param_vec, 0LL);
                    if ( std::operator==<char>(v42, "OPEN_CHALLENGE") )
                    {
                      *(_BYTE *)(v3 + 32) = 0;
                      if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
                        __asan_report_load8();
                      uid = Player::getUid(context->player);
                      if ( *(_BYTE *)(((unsigned __int64)&context->scene >> 3) + 0x7FFF8000) )
                        __asan_report_load8();
                      scene = context->scene;
                      v61.__uid = uid;
                      v61.__is_open = (bool *)(v3 + 32);
                      std::function<ForeachPolicy ()(Gadget &)>::function<procCustomDungeon(GmContext &,std::vector<std::string> const&,std::string&)::{lambda(Gadget &)#1},void,void>(
                        (std::function<ForeachPolicy(Gadget&)> *const)&v59,
                        v61);
                      Scene::foreachEntity<Gadget>(scene, (std::function<ForeachPolicy(Gadget&)> *)&v59);
                      std::function<ForeachPolicy ()(Gadget &)>::~function((std::function<ForeachPolicy(Gadget&)> *const)&v59);
                      if ( *(_BYTE *)(v3 + 32) != 1 )
                      {
                        common::milog::MiLogStream::create(
                          &v59,
                          &common::milog::MiLogDefault::default_log_obj_,
                          3u,
                          "./src/player/gm/player_gm_comp.cpp",
                          "procCustomDungeon",
                          19546);
                        common::milog::MiLogStream::operator<<<char [22],(char *[22])0>(
                          &v59,
                          (const char (*)[22])"challenge is not open");
                        common::milog::MiLogStream::~MiLogStream(&v59);
                        std::string::operator=(ret_msg, "challenge is not open");
                        result = -1;
                      }
                      else
                      {
                        result = 0;
                      }
                    }
                    else
                    {
                      v43 = std::vector<std::string>::operator[](param_vec, 0LL);
                      if ( std::operator==<char>(v43, "FINISH_CHALLENGE")
                        && std::vector<std::string>::size(param_vec) > 1 )
                      {
                        *(_DWORD *)(v3 + 48) = 0;
                        *(_BYTE *)(v3 + 32) = 1;
                        v45 = std::vector<std::string>::operator[](param_vec, 1uLL);
                        if ( common::tools::StringUtils::strToNum<unsigned int>(v45, (unsigned int *)(v3 + 48), 1) )
                        {
                          common::milog::MiLogStream::create(
                            &v59,
                            &common::milog::MiLogDefault::default_log_obj_,
                            3u,
                            "./src/player/gm/player_gm_comp.cpp",
                            "procCustomDungeon",
                            19559);
                          v46 = common::milog::MiLogStream::operator<<<char [22],(char *[22])0>(
                                  &v59,
                                  (const char (*)[22])"invalid challenge_id:");
                          v47 = std::vector<std::string>::operator[](param_vec, 1uLL);
                          common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v46, v47);
                          common::milog::MiLogStream::~MiLogStream(&v59);
                          result = -1;
                        }
                        else if ( std::vector<std::string>::size(param_vec) > 2
                               && (v48 = std::vector<std::string>::operator[](param_vec, 2uLL),
                                   common::tools::StringUtils::strToNum<bool>(v48, (bool *)(v3 + 32), 1)) )
                        {
                          common::milog::MiLogStream::create(
                            &v59,
                            &common::milog::MiLogDefault::default_log_obj_,
                            3u,
                            "./src/player/gm/player_gm_comp.cpp",
                            "procCustomDungeon",
                            19564);
                          v50 = common::milog::MiLogStream::operator<<<char [27],(char *[27])0>(
                                  &v59,
                                  (const char (*)[27])"invalid challenge is_succ:");
                          v51 = std::vector<std::string>::operator[](param_vec, 2uLL);
                          common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v50, v51);
                          common::milog::MiLogStream::~MiLogStream(&v59);
                          result = -1;
                        }
                        else
                        {
                          if ( *(_BYTE *)(((unsigned __int64)&context->scene >> 3) + 0x7FFF8000) )
                            __asan_report_load8();
                          v52 = context->scene;
                          v53 = *(unsigned int *)(v3 + 48) | (unsigned __int64)v54 & 0xFFFFFF0000000000LL | ((unsigned __int64)*(unsigned __int8 *)(v3 + 32) << 32);
                          std::function<ForeachPolicy ()(Group &)>::function<procCustomDungeon(GmContext &,std::vector<std::string> const&,std::string&)::{lambda(Group &)#2},void,void>(
                            (std::function<ForeachPolicy(Group&)> *const)&v59,
                            (procCustomDungeon::<lambda(Group&)>)v53);
                          Scene::foreachGroup(v52, (std::function<ForeachPolicy(Group&)> *)&v59);
                          std::function<ForeachPolicy ()(Group &)>::~function((std::function<ForeachPolicy(Group&)> *const)&v59);
                          result = 0;
                        }
                      }
                      else
                      {
                        result = 0;
                      }
                    }
                  }
                  goto LABEL_115;
                }
                if ( std::vector<std::string>::size(param_vec) > 1 )
                {
                  *(_QWORD *)(v3 + 64) = 0LL;
                  v36 = std::vector<std::string>::operator[](param_vec, 1uLL);
                  if ( common::tools::StringUtils::strToNum<unsigned long>(v36, (unsigned __int64 *)(v3 + 64), 1) )
                  {
                    std::string::operator=(ret_msg, &off_263756E0);
                    result = -1;
                  }
                  else
                  {
                    if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
                      __asan_report_load8();
                    v37 = Player::getCustomDungeonComp(context->player);
                    PlayerCustomDungeonComp::invalidCustomDungeonCache(v37, *(_QWORD *)(v3 + 64));
                    result = 0;
                  }
                  goto LABEL_115;
                }
              }
              std::string::operator=(ret_msg, &off_263755E0);
              result = -1;
              goto LABEL_115;
            }
            if ( std::vector<std::string>::size(param_vec) <= 3 )
            {
              common::milog::MiLogStream::create(
                &v59,
                &common::milog::MiLogDefault::default_log_obj_,
                3u,
                "./src/player/gm/player_gm_comp.cpp",
                "procCustomDungeon",
                19427);
              common::milog::MiLogStream::operator<<<char [17],(char *[17])0>(&v59, "param not enough");
              common::milog::MiLogStream::~MiLogStream(&v59);
              result = -1;
              goto LABEL_115;
            }
            *(_QWORD *)(v3 + 64) = 0LL;
            *(_DWORD *)(v3 + 48) = 0;
            v24 = std::vector<std::string>::operator[](param_vec, 2uLL);
            if ( common::tools::StringUtils::strToNum<unsigned long>(v24, (unsigned __int64 *)(v3 + 64), 1) )
              goto LABEL_49;
            v25 = std::vector<std::string>::operator[](param_vec, 3uLL);
            if ( common::tools::StringUtils::strToNum<unsigned int>(v25, (unsigned int *)(v3 + 48), 1) )
            {
              std::string::operator=(ret_msg, &off_263754E0);
              result = -1;
            }
            else
            {
              update_type = 0;
              v26 = std::vector<std::string>::operator[](param_vec, 1uLL);
              if ( std::operator==<char>(v26, "LIKE") )
              {
                update_type = 3;
              }
              else
              {
                v27 = std::vector<std::string>::operator[](param_vec, 1uLL);
                if ( std::operator==<char>(v27, "STORE") )
                {
                  update_type = 1;
                }
                else
                {
                  v28 = std::vector<std::string>::operator[](param_vec, 1uLL);
                  if ( std::operator==<char>(v28, "PLAY") )
                    update_type = 2;
                }
              }
              if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
                __asan_report_load8();
              v29 = Player::getCustomDungeonComp(context->player);
              result = PlayerCustomDungeonComp::setCustomDungeonSocialByGm(
                         v29,
                         *(_QWORD *)(v3 + 64),
                         update_type,
                         *(_DWORD *)(v3 + 48));
            }
          }
        }
      }
    }
  }
LABEL_115:
  if ( v60 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8008) = 0;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8008) = -168430091;
  }
  return result;
};

// Line 19521: range 0000000017C53E6A-0000000017C5419C
ForeachPolicy __cdecl procCustomDungeon(GmContext &,std::vector<std::string> const&,std::string&)::{lambda(Gadget &)#1}::operator()(
        const procCustomDungeon::<lambda(Gadget&)> *const __closure,
        Gadget *gadget)
{
  unsigned __int64 v2; // r12
  __int64 v3; // rax
  _DWORD *v4; // r13
  ForeachPolicy v5; // r14d
  char *v6; // rsi
  uint32_t EntityId; // r14d
  std::__shared_ptr_access<Event,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v8; // rdx
  char v9; // cl
  uint32_t uid; // r14d
  std::__shared_ptr_access<Event,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v11; // rdx
  char v12; // cl
  Group *v13; // rax
  char *v14; // rsi
  bool *is_open; // rdx
  char v16; // cl
  ForeachPolicy result; // eax
  char v19[144]; // [rsp+10h] [rbp-90h] BYREF

  v2 = (unsigned __int64)v19;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_1(96LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "2 32 16 15 group_ptr:19527 64 16 13 evt_ptr:19532";
  *(_QWORD *)(v2 + 16) = procCustomDungeon(GmContext &,std::vector<std::string> const&,std::string&)::{lambda(Gadget &)#1}::operator();
  v4 = (_DWORD *)(v2 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = -219021312;
  v4[536862722] = -202178560;
  if ( Gadget::getGadgetId(gadget) == 70350353 )
  {
    Entity::getGroup((const Entity *const)(v2 + 32));
    if ( std::operator==<Group>(0LL, (const std::shared_ptr<Group> *)(v2 + 32)) )
    {
      v5 = FOREACH_CONTINUE;
    }
    else
    {
      EventUtil::createEvent((data::EventType)(v2 + 64));
      v6 = (char *)(v2 + 64);
      if ( std::operator==<Event>(0LL, (const std::shared_ptr<Event> *)(v2 + 64)) )
      {
        v5 = FOREACH_BREAK;
      }
      else
      {
        EntityId = Entity::getEntityId((const Entity *const)gadget);
        v8 = std::__shared_ptr_access<Event,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Event,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 64));
        v9 = *(_BYTE *)(((unsigned __int64)&v8->source_entity_id >> 3) + 0x7FFF8000);
        if ( v9 != 0 && (char)((((_BYTE)v8 + 4) & 7) + 3) >= v9 )
        {
          LOBYTE(v6) = v9 != 0;
          __asan_report_store4(&v8->source_entity_id, v6, v8);
        }
        v8->source_entity_id = EntityId;
        if ( *(_BYTE *)(((unsigned __int64)&__closure->__uid >> 3) + 0x7FFF8000) != 0
          && *(_BYTE *)(((unsigned __int64)&__closure->__uid >> 3) + 0x7FFF8000) <= 3 )
        {
          __asan_report_load4(&__closure->__uid);
        }
        uid = __closure->__uid;
        v11 = std::__shared_ptr_access<Event,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Event,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 64));
        v12 = *(_BYTE *)(((unsigned __int64)&v11->uid >> 3) + 0x7FFF8000);
        if ( v12 != 0 && (char)((((_BYTE)v11 + 60) & 7) + 3) >= v12 )
        {
          LOBYTE(v6) = v12 != 0;
          __asan_report_store4(&v11->uid, v6, v11);
        }
        v11->uid = uid;
        v13 = std::__shared_ptr_access<Group,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Group,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 32));
        v14 = (char *)(v2 + 64);
        Group::handleEvent(v13, (EventPtr *)(v2 + 64));
        if ( *(_BYTE *)(((unsigned __int64)__closure >> 3) + 0x7FFF8000) )
          __asan_report_load8();
        is_open = __closure->__is_open;
        v16 = *(_BYTE *)(((unsigned __int64)__closure->__is_open >> 3) + 0x7FFF8000);
        if ( v16 != 0 && ((__int64)__closure->__is_open & 7) >= v16 )
        {
          LOBYTE(v14) = v16 != 0;
          __asan_report_store1(__closure->__is_open, v14, is_open);
        }
        *is_open = 1;
        v5 = FOREACH_BREAK;
      }
      std::shared_ptr<Event>::~shared_ptr((std::shared_ptr<Event> *const)(v2 + 64));
    }
    std::shared_ptr<Group>::~shared_ptr((std::shared_ptr<Group> *const)(v2 + 32));
  }
  else
  {
    v5 = FOREACH_CONTINUE;
  }
  result = v5;
  if ( v19 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8008) = 0;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8008) = -168430091;
  }
  return result;
};

// Line 19569: range 0000000017C5419E-0000000017C543BB
ForeachPolicy __cdecl procCustomDungeon(GmContext &,std::vector<std::string> const&,std::string&)::{lambda(Group &)#2}::operator()(
        const procCustomDungeon::<lambda(Group&)> *const __closure,
        Group *group)
{
  unsigned __int64 v2; // rbx
  __int64 v3; // rax
  unsigned __int64 v4; // r12
  uint32_t ChallengeComp; // ecx
  ChallengeComp *v6; // r15
  bool is_succ; // r14
  std::__shared_ptr_access<Challenge,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v8; // rdx
  uint32_t *p_challenge_index; // rax
  ForeachPolicy v10; // r14d
  ForeachPolicy result; // eax
  char v12[112]; // [rsp+20h] [rbp-70h] BYREF

  v2 = (unsigned __int64)v12;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_0(64LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "1 32 16 19 challenge_ptr:19571";
  *(_QWORD *)(v2 + 16) = procCustomDungeon(GmContext &,std::vector<std::string> const&,std::string&)::{lambda(Group &)#2}::operator();
  v4 = v2 >> 3;
  *(_DWORD *)(v4 + 2147450880) = -235802127;
  *(_DWORD *)(v4 + 2147450884) = -202178560;
  ChallengeComp = (unsigned int)Group::getChallengeComp(group);
  if ( *(_BYTE *)(((unsigned __int64)__closure >> 3) + 0x7FFF8000) != 0
    && (char)(((unsigned __int8)__closure & 7) + 3) >= *(_BYTE *)(((unsigned __int64)__closure >> 3) + 0x7FFF8000) )
  {
    __asan_report_load4(__closure);
  }
  ChallengeComp::findChallengeById((const ChallengeComp *const)(v2 + 32), ChallengeComp);
  if ( std::operator!=<Challenge>(0LL, (const std::shared_ptr<Challenge> *)(v2 + 32)) )
  {
    v6 = Group::getChallengeComp(group);
    if ( *(_BYTE *)(((unsigned __int64)&__closure->__is_succ >> 3) + 0x7FFF8000) != 0
      && (((unsigned __int8)__closure + 4) & 7) >= *(_BYTE *)(((unsigned __int64)&__closure->__is_succ >> 3) + 0x7FFF8000) )
    {
      __asan_report_load1(&__closure->__is_succ);
    }
    is_succ = __closure->__is_succ;
    v8 = std::__shared_ptr_access<Challenge,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Challenge,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 32));
    p_challenge_index = &v8->challenge_index;
    if ( *(_BYTE *)(((unsigned __int64)p_challenge_index >> 3) + 0x7FFF8000) != 0
      && (char)(((unsigned __int8)p_challenge_index & 7) + 3) >= *(_BYTE *)(((unsigned __int64)p_challenge_index >> 3)
                                                                          + 0x7FFF8000) )
    {
      __asan_report_load4(p_challenge_index);
    }
    ChallengeComp::finishChallengeByGm(v6, v8->challenge_index, is_succ);
    v10 = FOREACH_BREAK;
  }
  else
  {
    v10 = FOREACH_CONTINUE;
  }
  std::shared_ptr<Challenge>::~shared_ptr((std::shared_ptr<Challenge> *const)(v2 + 32));
  result = v10;
  if ( v12 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 19586: range 0000000017D7DF78-0000000017D7E01A
void __cdecl procBartenderActivityRegister::procBartenderActivityRegister(procBartenderActivityRegister *const this)
{
  std::function<int(GmContext&,const std::vector<std::string>&,std::string&)> *v1; // rax
  std::allocator<char> __a; // [rsp+1Fh] [rbp-31h] BYREF
  std::string __k; // [rsp+20h] [rbp-30h] BYREF

  std::allocator<char>::allocator(&__a);
  std::string::basic_string<std::allocator<char>>(&__k, "BARTENDER", &__a);
  v1 = std::unordered_map<std::string,std::function<int ()(GmContext &,std::vector<std::string> const&,std::string&)>>::operator[](
         &GmUtils::op_func_map[abi:cxx11],
         &__k);
  std::function<int ()(GmContext &,std::vector<std::string> const&,std::string&)>::operator=<int (&)(GmContext &,std::vector<std::string> const&,std::string&)>(
    v1,
    (int (*)(GmContext *, const std::vector<std::string> *, std::string *))procBartenderActivity);
  std::string::~string(&__k);
  std::allocator<char>::~allocator(&__a);
};

// Line 19587: range 0000000017C5586C-0000000017C5676D
int32_t __cdecl procBartenderActivity(
        GmContext *context,
        const std::vector<std::string> *param_vec,
        std::string *ret_msg)
{
  unsigned __int64 v3; // r13
  __int64 v4; // rax
  _DWORD *v5; // r14
  int32_t v6; // r12d
  std::__shared_ptr_access<BartenderActivity,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v7; // rax
  std::__shared_ptr_access<BartenderActivity,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v8; // rax
  const std::string *v9; // rax
  BartenderActivity *v10; // rax
  const std::string *v11; // rax
  BartenderActivity *v12; // rax
  const std::string *v13; // rax
  BartenderActivity *v14; // rax
  const std::string *v15; // rax
  BartenderActivity *v16; // rax
  const std::string *v17; // rax
  BartenderActivity *v18; // rax
  const std::string *v19; // rax
  common::milog::MiLogStream *v20; // r12
  const std::string *v21; // rax
  BartenderActivity *v22; // rax
  const std::string *v23; // rax
  BartenderActivity *v24; // rax
  const std::string *v25; // rax
  common::milog::MiLogStream *v26; // r12
  const std::string *v27; // rax
  BartenderActivity *v28; // rax
  const std::string *v29; // rax
  BartenderActivity *v30; // rax
  const std::string *v31; // rax
  common::milog::MiLogStream *v32; // r12
  const std::string *v33; // rax
  BartenderActivity *v34; // rax
  const std::string *v35; // rax
  BartenderActivity *v36; // rax
  const std::string *v37; // rax
  common::milog::MiLogStream *v38; // r12
  const std::string *v39; // rax
  BartenderActivity *v40; // rax
  const std::string *v41; // rax
  BartenderActivity *v42; // rax
  const std::string *v43; // rax
  common::milog::MiLogStream *v44; // r12
  const std::string *v45; // rax
  BartenderActivity *v46; // rax
  const std::string *v47; // rax
  const std::string *v48; // rax
  common::milog::MiLogStream *v49; // r12
  const std::string *v50; // rax
  BartenderActivity *v51; // rax
  const std::string *v52; // rax
  const std::string *v53; // rax
  common::milog::MiLogStream *v54; // r12
  const std::string *v55; // rax
  BartenderActivity *v56; // rax
  const std::string *v57; // rax
  BartenderActivity *v58; // rax
  int32_t result; // eax
  bool is_content_closed; // [rsp+2Fh] [rbp-B1h]
  common::milog::MiLogStream v62; // [rsp+30h] [rbp-B0h] BYREF
  char v63[144]; // [rsp+50h] [rbp-90h] BYREF

  v3 = (unsigned __int64)v63;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_1(96LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "2 48 4 9 num:19724 64 16 18 activity_ptr:19593";
  *(_QWORD *)(v3 + 16) = procBartenderActivity;
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = -234556943;
  v5[536862722] = -202178560;
  if ( std::vector<std::string>::empty(param_vec) )
  {
    common::milog::MiLogStream::create(
      &v62,
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/player/gm/player_gm_comp.cpp",
      "procBartenderActivity",
      19590);
    common::milog::MiLogStream::operator<<<char [17],(char *[17])0>(&v62, "param not enough");
    common::milog::MiLogStream::~MiLogStream(&v62);
    v6 = -1;
  }
  else
  {
    if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
      __asan_report_load8();
    Player::getActivityComp(context->player);
    PlayerActivityComp::findOpenningActivity<BartenderActivity>((PlayerActivityComp *const)(v3 + 64));
    if ( std::operator==<BartenderActivity>(0LL, (const std::shared_ptr<BartenderActivity> *)(v3 + 64)) )
    {
      std::string::operator=(ret_msg, "no activity open");
      v6 = -1;
    }
    else
    {
      v7 = std::__shared_ptr_access<BartenderActivity,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<BartenderActivity,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 64));
      if ( !BaseActivity::isOpening(v7, 0) )
      {
        common::milog::MiLogStream::create(
          &v62,
          &common::milog::MiLogDefault::default_log_obj_,
          3u,
          "./src/player/gm/player_gm_comp.cpp",
          "procBartenderActivity",
          19601);
        common::milog::MiLogStream::operator<<<char [25],(char *[25])0>(
          &v62,
          (const char (*)[25])"BartenderActivity close!");
        common::milog::MiLogStream::~MiLogStream(&v62);
        v6 = -1;
      }
      else
      {
        v8 = std::__shared_ptr_access<BartenderActivity,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<BartenderActivity,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 64));
        if ( BaseActivity::isSettled(v8) )
        {
          common::milog::MiLogStream::create(
            &v62,
            &common::milog::MiLogDefault::default_log_obj_,
            3u,
            "./src/player/gm/player_gm_comp.cpp",
            "procBartenderActivity",
            19606);
          common::milog::MiLogStream::operator<<<char [27],(char *[27])0>(
            &v62,
            (const char (*)[27])"BartenderActivity settled!");
          common::milog::MiLogStream::~MiLogStream(&v62);
          v6 = -1;
        }
        else
        {
          v9 = std::vector<std::string>::operator[](param_vec, 0LL);
          if ( std::operator==<char>(v9, "OPEN_ALL") )
          {
            v10 = std::__shared_ptr_access<BartenderActivity,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<BartenderActivity,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 64));
            BartenderActivity::openAllByGm(v10);
            v6 = 0;
          }
          else
          {
            v11 = std::vector<std::string>::operator[](param_vec, 0LL);
            if ( std::operator==<char>(v11, "CLEAR_ALL") )
            {
              v12 = std::__shared_ptr_access<BartenderActivity,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<BartenderActivity,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 64));
              BartenderActivity::clearAllByGm(v12);
              v6 = 0;
            }
            else
            {
              v13 = std::vector<std::string>::operator[](param_vec, 0LL);
              if ( std::operator==<char>(v13, "FINISH_ALL") )
              {
                v14 = std::__shared_ptr_access<BartenderActivity,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<BartenderActivity,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 64));
                BartenderActivity::finishAllByGm(v14);
                v6 = 0;
              }
              else
              {
                v15 = std::vector<std::string>::operator[](param_vec, 0LL);
                if ( std::operator==<char>(v15, "OPEN_DEVELOP") )
                {
                  v16 = std::__shared_ptr_access<BartenderActivity,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<BartenderActivity,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 64));
                  BartenderActivity::openDevelopModuleByGm(v16);
                  v6 = 0;
                }
                else
                {
                  v17 = std::vector<std::string>::operator[](param_vec, 0LL);
                  if ( std::operator==<char>(v17, "OPEN_ITEM") )
                  {
                    if ( std::vector<std::string>::size(param_vec) > 1 )
                    {
                      *(_DWORD *)(v3 + 48) = 0;
                      v19 = std::vector<std::string>::operator[](param_vec, 1uLL);
                      if ( common::tools::StringUtils::strToNum<unsigned int>(v19, (unsigned int *)(v3 + 48), 1) )
                      {
                        common::milog::MiLogStream::create(
                          &v62,
                          &common::milog::MiLogDefault::default_log_obj_,
                          3u,
                          "./src/player/gm/player_gm_comp.cpp",
                          "procBartenderActivity",
                          19639);
                        v20 = common::milog::MiLogStream::operator<<<char [15],(char *[15])0>(
                                &v62,
                                (const char (*)[15])"invalid param:");
                        v21 = std::vector<std::string>::operator[](param_vec, 1uLL);
                        common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v20, v21);
                        common::milog::MiLogStream::~MiLogStream(&v62);
                        v6 = -1;
                      }
                      else
                      {
                        v22 = std::__shared_ptr_access<BartenderActivity,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<BartenderActivity,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 64));
                        v6 = BartenderActivity::openItemByGm(v22, *(_DWORD *)(v3 + 48));
                      }
                    }
                    else
                    {
                      v18 = std::__shared_ptr_access<BartenderActivity,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<BartenderActivity,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 64));
                      v6 = BartenderActivity::openItemByGm(v18, 0);
                    }
                  }
                  else
                  {
                    v23 = std::vector<std::string>::operator[](param_vec, 0LL);
                    if ( std::operator==<char>(v23, "OPEN_TASK") )
                    {
                      if ( std::vector<std::string>::size(param_vec) > 1 )
                      {
                        *(_DWORD *)(v3 + 48) = 0;
                        v25 = std::vector<std::string>::operator[](param_vec, 1uLL);
                        if ( common::tools::StringUtils::strToNum<unsigned int>(v25, (unsigned int *)(v3 + 48), 1) )
                        {
                          common::milog::MiLogStream::create(
                            &v62,
                            &common::milog::MiLogDefault::default_log_obj_,
                            3u,
                            "./src/player/gm/player_gm_comp.cpp",
                            "procBartenderActivity",
                            19653);
                          v26 = common::milog::MiLogStream::operator<<<char [15],(char *[15])0>(
                                  &v62,
                                  (const char (*)[15])"invalid param:");
                          v27 = std::vector<std::string>::operator[](param_vec, 1uLL);
                          common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v26, v27);
                          common::milog::MiLogStream::~MiLogStream(&v62);
                          v6 = -1;
                        }
                        else
                        {
                          v28 = std::__shared_ptr_access<BartenderActivity,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<BartenderActivity,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 64));
                          v6 = BartenderActivity::openTaskByGm(v28, *(_DWORD *)(v3 + 48));
                        }
                      }
                      else
                      {
                        v24 = std::__shared_ptr_access<BartenderActivity,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<BartenderActivity,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 64));
                        v6 = BartenderActivity::openTaskByGm(v24, 0);
                      }
                    }
                    else
                    {
                      v29 = std::vector<std::string>::operator[](param_vec, 0LL);
                      if ( std::operator==<char>(v29, "OPEN_LEVEL") )
                      {
                        if ( std::vector<std::string>::size(param_vec) > 1 )
                        {
                          *(_DWORD *)(v3 + 48) = 0;
                          v31 = std::vector<std::string>::operator[](param_vec, 1uLL);
                          if ( common::tools::StringUtils::strToNum<unsigned int>(v31, (unsigned int *)(v3 + 48), 1) )
                          {
                            common::milog::MiLogStream::create(
                              &v62,
                              &common::milog::MiLogDefault::default_log_obj_,
                              3u,
                              "./src/player/gm/player_gm_comp.cpp",
                              "procBartenderActivity",
                              19667);
                            v32 = common::milog::MiLogStream::operator<<<char [15],(char *[15])0>(
                                    &v62,
                                    (const char (*)[15])"invalid param:");
                            v33 = std::vector<std::string>::operator[](param_vec, 1uLL);
                            common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v32, v33);
                            common::milog::MiLogStream::~MiLogStream(&v62);
                            v6 = -1;
                          }
                          else
                          {
                            v34 = std::__shared_ptr_access<BartenderActivity,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<BartenderActivity,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 64));
                            v6 = BartenderActivity::openLevelByGm(v34, *(_DWORD *)(v3 + 48));
                          }
                        }
                        else
                        {
                          v30 = std::__shared_ptr_access<BartenderActivity,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<BartenderActivity,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 64));
                          v6 = BartenderActivity::openLevelByGm(v30, 0);
                        }
                      }
                      else
                      {
                        v35 = std::vector<std::string>::operator[](param_vec, 0LL);
                        if ( std::operator==<char>(v35, "FINISH_TASK") )
                        {
                          if ( std::vector<std::string>::size(param_vec) > 1 )
                          {
                            *(_DWORD *)(v3 + 48) = 0;
                            v37 = std::vector<std::string>::operator[](param_vec, 1uLL);
                            if ( common::tools::StringUtils::strToNum<unsigned int>(v37, (unsigned int *)(v3 + 48), 1) )
                            {
                              common::milog::MiLogStream::create(
                                &v62,
                                &common::milog::MiLogDefault::default_log_obj_,
                                3u,
                                "./src/player/gm/player_gm_comp.cpp",
                                "procBartenderActivity",
                                19682);
                              v38 = common::milog::MiLogStream::operator<<<char [15],(char *[15])0>(
                                      &v62,
                                      (const char (*)[15])"invalid param:");
                              v39 = std::vector<std::string>::operator[](param_vec, 1uLL);
                              common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v38, v39);
                              common::milog::MiLogStream::~MiLogStream(&v62);
                              v6 = -1;
                            }
                            else
                            {
                              v40 = std::__shared_ptr_access<BartenderActivity,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<BartenderActivity,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 64));
                              v6 = BartenderActivity::finishTaskByGm(v40, *(_DWORD *)(v3 + 48));
                            }
                          }
                          else
                          {
                            v36 = std::__shared_ptr_access<BartenderActivity,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<BartenderActivity,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 64));
                            v6 = BartenderActivity::finishTaskByGm(v36, 0);
                          }
                        }
                        else
                        {
                          v41 = std::vector<std::string>::operator[](param_vec, 0LL);
                          if ( std::operator==<char>(v41, "FINISH_LEVEL") )
                          {
                            if ( std::vector<std::string>::size(param_vec) > 1 )
                            {
                              *(_DWORD *)(v3 + 48) = 0;
                              v43 = std::vector<std::string>::operator[](param_vec, 1uLL);
                              if ( common::tools::StringUtils::strToNum<unsigned int>(v43, (unsigned int *)(v3 + 48), 1) )
                              {
                                common::milog::MiLogStream::create(
                                  &v62,
                                  &common::milog::MiLogDefault::default_log_obj_,
                                  3u,
                                  "./src/player/gm/player_gm_comp.cpp",
                                  "procBartenderActivity",
                                  19696);
                                v44 = common::milog::MiLogStream::operator<<<char [15],(char *[15])0>(
                                        &v62,
                                        (const char (*)[15])"invalid param:");
                                v45 = std::vector<std::string>::operator[](param_vec, 1uLL);
                                common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v44, v45);
                                common::milog::MiLogStream::~MiLogStream(&v62);
                                v6 = -1;
                              }
                              else
                              {
                                v46 = std::__shared_ptr_access<BartenderActivity,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<BartenderActivity,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 64));
                                v6 = BartenderActivity::finishLevelByGm(v46, *(_DWORD *)(v3 + 48));
                              }
                            }
                            else
                            {
                              v42 = std::__shared_ptr_access<BartenderActivity,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<BartenderActivity,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 64));
                              v6 = BartenderActivity::finishLevelByGm(v42, 0);
                            }
                          }
                          else
                          {
                            v47 = std::vector<std::string>::operator[](param_vec, 0LL);
                            if ( std::operator==<char>(v47, "FINISH_ORDER") )
                            {
                              if ( std::vector<std::string>::size(param_vec) > 1 )
                              {
                                *(_DWORD *)(v3 + 48) = 0;
                                v48 = std::vector<std::string>::operator[](param_vec, 1uLL);
                                if ( common::tools::StringUtils::strToNum<unsigned int>(
                                       v48,
                                       (unsigned int *)(v3 + 48),
                                       1) )
                                {
                                  common::milog::MiLogStream::create(
                                    &v62,
                                    &common::milog::MiLogDefault::default_log_obj_,
                                    3u,
                                    "./src/player/gm/player_gm_comp.cpp",
                                    "procBartenderActivity",
                                    19712);
                                  v49 = common::milog::MiLogStream::operator<<<char [15],(char *[15])0>(
                                          &v62,
                                          (const char (*)[15])"invalid param:");
                                  v50 = std::vector<std::string>::operator[](param_vec, 1uLL);
                                  common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v49, v50);
                                  common::milog::MiLogStream::~MiLogStream(&v62);
                                  v6 = -1;
                                }
                                else
                                {
                                  v51 = std::__shared_ptr_access<BartenderActivity,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<BartenderActivity,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 64));
                                  v6 = BartenderActivity::finishOrderByGm(v51, *(_DWORD *)(v3 + 48));
                                }
                              }
                              else
                              {
                                common::milog::MiLogStream::create(
                                  &v62,
                                  &common::milog::MiLogDefault::default_log_obj_,
                                  3u,
                                  "./src/player/gm/player_gm_comp.cpp",
                                  "procBartenderActivity",
                                  19705);
                                common::milog::MiLogStream::operator<<<char [17],(char *[17])0>(
                                  &v62,
                                  "param not enough");
                                common::milog::MiLogStream::~MiLogStream(&v62);
                                v6 = -1;
                              }
                            }
                            else
                            {
                              v52 = std::vector<std::string>::operator[](param_vec, 0LL);
                              if ( std::operator==<char>(v52, "CONTENT") )
                              {
                                if ( std::vector<std::string>::size(param_vec) > 1 )
                                {
                                  *(_DWORD *)(v3 + 48) = 0;
                                  v53 = std::vector<std::string>::operator[](param_vec, 1uLL);
                                  if ( common::tools::StringUtils::strToNum<unsigned int>(
                                         v53,
                                         (unsigned int *)(v3 + 48),
                                         1) )
                                  {
                                    common::milog::MiLogStream::create(
                                      &v62,
                                      &common::milog::MiLogDefault::default_log_obj_,
                                      3u,
                                      "./src/player/gm/player_gm_comp.cpp",
                                      "procBartenderActivity",
                                      19727);
                                    v54 = common::milog::MiLogStream::operator<<<char [15],(char *[15])0>(
                                            &v62,
                                            (const char (*)[15])"invalid param:");
                                    v55 = std::vector<std::string>::operator[](param_vec, 1uLL);
                                    common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v54, v55);
                                    common::milog::MiLogStream::~MiLogStream(&v62);
                                    v6 = -1;
                                  }
                                  else
                                  {
                                    is_content_closed = *(_DWORD *)(v3 + 48) == 0;
                                    v56 = std::__shared_ptr_access<BartenderActivity,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<BartenderActivity,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 64));
                                    v6 = BartenderActivity::setContentCloseStateByGm(v56, is_content_closed);
                                  }
                                }
                                else
                                {
                                  common::milog::MiLogStream::create(
                                    &v62,
                                    &common::milog::MiLogDefault::default_log_obj_,
                                    3u,
                                    "./src/player/gm/player_gm_comp.cpp",
                                    "procBartenderActivity",
                                    19721);
                                  common::milog::MiLogStream::operator<<<char [17],(char *[17])0>(
                                    &v62,
                                    "param not enough");
                                  common::milog::MiLogStream::~MiLogStream(&v62);
                                  v6 = -1;
                                }
                              }
                              else
                              {
                                v57 = std::vector<std::string>::operator[](param_vec, 0LL);
                                if ( std::operator==<char>(v57, "SETTLE_LEVEL") )
                                {
                                  v58 = std::__shared_ptr_access<BartenderActivity,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<BartenderActivity,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 64));
                                  v6 = BartenderActivity::settleLevelByGm(v58);
                                }
                                else
                                {
                                  v6 = 0;
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
    std::shared_ptr<BartenderActivity>::~shared_ptr((std::shared_ptr<BartenderActivity> *const)(v3 + 64));
  }
  result = v6;
  if ( v63 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8008) = 0;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8008) = -168430091;
  }
  return result;
};

// Line 19741: range 0000000017D7E01C-0000000017D7E0BE
void __cdecl procShareCdRegister::procShareCdRegister(procShareCdRegister *const this)
{
  std::function<int(GmContext&,const std::vector<std::string>&,std::string&)> *v1; // rax
  std::allocator<char> __a; // [rsp+1Fh] [rbp-31h] BYREF
  std::string __k; // [rsp+20h] [rbp-30h] BYREF

  std::allocator<char>::allocator(&__a);
  std::string::basic_string<std::allocator<char>>(&__k, "PLAYER_SHARECD", &__a);
  v1 = std::unordered_map<std::string,std::function<int ()(GmContext &,std::vector<std::string> const&,std::string&)>>::operator[](
         &GmUtils::op_func_map[abi:cxx11],
         &__k);
  std::function<int ()(GmContext &,std::vector<std::string> const&,std::string&)>::operator=<int (&)(GmContext &,std::vector<std::string> const&,std::string&)>(
    v1,
    (int (*)(GmContext *, const std::vector<std::string> *, std::string *))procShareCd);
  std::string::~string(&__k);
  std::allocator<char>::~allocator(&__a);
};

// Line 19742: range 0000000017C5676E-0000000017C56BB3
int32_t __cdecl procShareCd(GmContext *context, const std::vector<std::string> *param_vec, std::string *ret_msg)
{
  unsigned __int64 v3; // rbx
  __int64 v4; // rax
  _DWORD *v5; // r13
  int32_t result; // eax
  const std::string *v7; // rax
  const std::string *v8; // rax
  PlayerShareCDComp *ShareCDComp; // rax
  const std::string *v10; // rax
  const std::string *v11; // rax
  const std::string *v12; // rax
  PlayerShareCDComp *v13; // rax
  common::milog::MiLogStream v15; // [rsp+20h] [rbp-A0h] BYREF
  char v16[128]; // [rsp+40h] [rbp-80h] BYREF

  v3 = (unsigned __int64)v16;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_1(96LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "2 48 4 17 share_cd_id:19767 64 4 11 index:19773";
  *(_QWORD *)(v3 + 16) = procShareCd;
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = -234556943;
  v5[536862722] = -202116348;
  if ( std::vector<std::string>::size(param_vec) <= 1 )
  {
    common::milog::MiLogStream::create(
      &v15,
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/player/gm/player_gm_comp.cpp",
      "procShareCd",
      19745);
    common::milog::MiLogStream::operator<<<char [17],(char *[17])0>(&v15, "param not enough");
    common::milog::MiLogStream::~MiLogStream(&v15);
    result = -1;
    goto LABEL_22;
  }
  v7 = std::vector<std::string>::operator[](param_vec, 0LL);
  if ( std::operator==<char>(v7, "COST_TOKEN") )
  {
    *(_DWORD *)(v3 + 64) = 0;
    v8 = std::vector<std::string>::operator[](param_vec, 1uLL);
    if ( common::tools::StringUtils::strToNum<unsigned int>(v8, (unsigned int *)(v3 + 64), 1) )
    {
LABEL_8:
      std::string::operator=(ret_msg, &off_26375E20);
      result = -1;
      goto LABEL_22;
    }
    if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
      __asan_report_load8();
    ShareCDComp = Player::getShareCDComp(context->player);
    result = PlayerShareCDComp::checkAndCostShareCDToken(ShareCDComp, *(_DWORD *)(v3 + 64));
  }
  else
  {
    v10 = std::vector<std::string>::operator[](param_vec, 0LL);
    if ( std::operator==<char>(v10, "UPDATE") )
    {
      if ( std::vector<std::string>::size(param_vec) > 2 )
      {
        *(_DWORD *)(v3 + 48) = 0;
        v11 = std::vector<std::string>::operator[](param_vec, 1uLL);
        if ( common::tools::StringUtils::strToNum<unsigned int>(v11, (unsigned int *)(v3 + 48), 1) )
          goto LABEL_8;
        *(_DWORD *)(v3 + 64) = 0;
        v12 = std::vector<std::string>::operator[](param_vec, 2uLL);
        if ( common::tools::StringUtils::strToNum<unsigned int>(v12, (unsigned int *)(v3 + 64), 1) )
        {
          std::string::operator=(ret_msg, &off_26375E60);
          result = -1;
        }
        else
        {
          if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
            __asan_report_load8();
          v13 = Player::getShareCDComp(context->player);
          result = PlayerShareCDComp::updateShareCD(v13, *(_DWORD *)(v3 + 48), *(_DWORD *)(v3 + 64));
        }
      }
      else
      {
        common::milog::MiLogStream::create(
          &v15,
          &common::milog::MiLogDefault::default_log_obj_,
          3u,
          "./src/player/gm/player_gm_comp.cpp",
          "procShareCd",
          19764);
        common::milog::MiLogStream::operator<<<char [17],(char *[17])0>(&v15, "param not enough");
        common::milog::MiLogStream::~MiLogStream(&v15);
        result = -1;
      }
    }
    else
    {
      std::string::operator=(ret_msg, &off_26375EA0);
      result = -1;
    }
  }
LABEL_22:
  if ( v16 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8008) = 0;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8008) = -168430091;
  }
  return result;
};

// Line 19791: range 0000000017D7E0C0-0000000017D7E162
void __cdecl procCrystalLinkActivityRegister::procCrystalLinkActivityRegister(
        procCrystalLinkActivityRegister *const this)
{
  std::function<int(GmContext&,const std::vector<std::string>&,std::string&)> *v1; // rax
  std::allocator<char> __a; // [rsp+1Fh] [rbp-31h] BYREF
  std::string __k; // [rsp+20h] [rbp-30h] BYREF

  std::allocator<char>::allocator(&__a);
  std::string::basic_string<std::allocator<char>>(&__k, "CRYSTAL_LINK_ACTIVITY", &__a);
  v1 = std::unordered_map<std::string,std::function<int ()(GmContext &,std::vector<std::string> const&,std::string&)>>::operator[](
         &GmUtils::op_func_map[abi:cxx11],
         &__k);
  std::function<int ()(GmContext &,std::vector<std::string> const&,std::string&)>::operator=<int (&)(GmContext &,std::vector<std::string> const&,std::string&)>(
    v1,
    (int (*)(GmContext *, const std::vector<std::string> *, std::string *))procCrystalLinkActivity);
  std::string::~string(&__k);
  std::allocator<char>::~allocator(&__a);
};

// Line 19792: range 0000000017C56BB4-0000000017C57963
int32_t __cdecl procCrystalLinkActivity(
        GmContext *context,
        const std::vector<std::string> *param_vec,
        std::string *ret_msg)
{
  unsigned __int64 v3; // r14
  __int64 v4; // rax
  _DWORD *v5; // r12
  int32_t restarted; // r13d
  const std::string *v7; // rax
  const std::string *v8; // rax
  common::milog::MiLogStream *v9; // r13
  const std::string *v10; // rax
  std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v11; // rax
  common::milog::MiLogStream *v12; // rax
  common::milog::MiLogStream *v14; // rax
  std::vector<unsigned int>::const_reference v15; // rax
  unsigned int *v16; // rdx
  __gnu_cxx::__alloc_traits<std::allocator<unsigned int>,unsigned int>::value_type *v17; // rax
  google::protobuf::uint32 *v18; // rdx
  __gnu_cxx::__alloc_traits<std::allocator<unsigned int>,unsigned int>::value_type *v19; // rax
  google::protobuf::uint32 *v20; // rdx
  CrystalLinkActivity *v21; // rax
  const std::string *v22; // rax
  const std::string *v23; // rax
  common::milog::MiLogStream *v24; // r13
  const std::string *v25; // rax
  CrystalLinkActivity *v26; // rax
  const std::string *v27; // rax
  const std::string *v28; // rax
  common::milog::MiLogStream *v29; // r13
  const std::string *v30; // rax
  CrystalLinkActivity *v31; // rax
  const std::string *v32; // rax
  CrystalLinkActivity *v33; // rax
  const std::string *v34; // rax
  const std::string *v35; // rax
  Scene *v36; // rax
  SceneGalleryComp *GalleryComp; // rax
  int32_t result; // eax
  uint32_t team_index; // [rsp+2Ch] [rbp-154h]
  const data::ActivityCrystalLinkLevelExcelConfig *level_config_ptr; // [rsp+30h] [rbp-150h]
  proto::CrystalLinkTeamInfo *team_info; // [rsp+38h] [rbp-148h]
  proto::CrystalLinkAvatarInfo *team_avatar_info; // [rsp+40h] [rbp-140h]
  proto::CrystalLinkBuffInfo *team_buff_info; // [rsp+48h] [rbp-138h]
  common::milog::MiLogStream v45; // [rsp+50h] [rbp-130h] BYREF
  char v46[272]; // [rsp+70h] [rbp-110h] BYREF

  v3 = (unsigned __int64)v46;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_2(224LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "4 48 4 16 gallery_id:19895 64 16 18 activity_ptr:19799 96 16 15 scene_ptr:19889 128 56 9 req:19813";
  *(_QWORD *)(v3 + 16) = procCrystalLinkActivity;
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = -234556943;
  v5[536862722] = -219021312;
  v5[536862723] = -219021312;
  v5[536862725] = -218103808;
  v5[536862726] = -202116109;
  if ( std::vector<std::string>::empty(param_vec) )
  {
    common::milog::MiLogStream::create(
      &v45,
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/player/gm/player_gm_comp.cpp",
      "procCrystalLinkActivity",
      19795);
    common::milog::MiLogStream::operator<<<char [17],(char *[17])0>(&v45, "param not enough");
    common::milog::MiLogStream::~MiLogStream(&v45);
    restarted = -1;
  }
  else
  {
    if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
      __asan_report_load8();
    Player::getActivityComp(context->player);
    PlayerActivityComp::findOpenningActivity<CrystalLinkActivity>((PlayerActivityComp *const)(v3 + 64));
    if ( std::operator==<CrystalLinkActivity>(0LL, (const std::shared_ptr<CrystalLinkActivity> *)(v3 + 64)) )
    {
      std::string::operator=(ret_msg, "crystal link activity is not open");
      restarted = -1;
    }
    else
    {
      v7 = std::vector<std::string>::operator[](param_vec, 0LL);
      if ( std::operator==<char>(v7, "ENTER_DUNGEON") )
      {
        if ( std::vector<std::string>::size(param_vec) > 1 )
        {
          proto::CrystalLinkEnterDungeonReq::CrystalLinkEnterDungeonReq((proto::CrystalLinkEnterDungeonReq *const)(v3 + 128));
          proto::CrystalLinkEnterDungeonReq::set_difficulty_id((proto::CrystalLinkEnterDungeonReq *const)(v3 + 128), 1u);
          *(_DWORD *)(v3 + 48) = 0;
          v8 = std::vector<std::string>::operator[](param_vec, 1uLL);
          if ( common::tools::StringUtils::strToNum<unsigned int>(v8, (unsigned int *)(v3 + 48), 1) )
          {
            common::milog::MiLogStream::create(
              &v45,
              &common::milog::MiLogDefault::default_log_obj_,
              3u,
              "./src/player/gm/player_gm_comp.cpp",
              "procCrystalLinkActivity",
              19818);
            v9 = common::milog::MiLogStream::operator<<<char [15],(char *[15])0>(
                   &v45,
                   (const char (*)[15])"invalid param:");
            v10 = std::vector<std::string>::operator[](param_vec, 1uLL);
            common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v9, v10);
            common::milog::MiLogStream::~MiLogStream(&v45);
            restarted = -1;
          }
          else
          {
            proto::CrystalLinkEnterDungeonReq::set_level_id(
              (proto::CrystalLinkEnterDungeonReq *const)(v3 + 128),
              *(_DWORD *)(v3 + 48));
            ServiceBox::findService<GameserverService>();
            GameserverService::getConfig((GameserverService *const)(v3 + 96));
            v11 = std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 96));
            level_config_ptr = data::ActivityCrystalLinkExcelConfigMgrBase::findActivityCrystalLinkLevelExcelConfig(
                                 &v11->design_config.txt_config_mgr.activity_crystal_link_config_mgr,
                                 *(_DWORD *)(v3 + 48));
            std::shared_ptr<Config>::~shared_ptr((std::shared_ptr<Config> *const)(v3 + 96));
            if ( level_config_ptr )
            {
              for ( team_index = 0; team_index <= 1; ++team_index )
              {
                if ( team_index >= std::vector<unsigned int>::size(&level_config_ptr->trial_avatar_list)
                  || team_index >= std::vector<unsigned int>::size(&level_config_ptr->cond_buff_id_list)
                  || team_index >= std::vector<unsigned int>::size(&level_config_ptr->effect_buff_id_list) )
                {
                  common::milog::MiLogStream::create(
                    &v45,
                    &common::milog::MiLogDefault::default_log_obj_,
                    3u,
                    "./src/player/gm/player_gm_comp.cpp",
                    "procCrystalLinkActivity",
                    19835);
                  v14 = common::milog::MiLogStream::operator<<<char [43],(char *[43])0>(
                          &v45,
                          (const char (*)[43])"crystal link level config error, level id:");
                  common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                    v14,
                    (const unsigned int *)(v3 + 48));
                  common::milog::MiLogStream::~MiLogStream(&v45);
                  restarted = -1;
                  goto LABEL_34;
                }
                team_info = proto::CrystalLinkEnterDungeonReq::add_team_info_list((proto::CrystalLinkEnterDungeonReq *const)(v3 + 128));
                team_avatar_info = proto::CrystalLinkTeamInfo::add_avatar_info_list(team_info);
                proto::CrystalLinkAvatarInfo::set_is_trial(team_avatar_info, 1);
                v15 = std::vector<unsigned int>::operator[](&level_config_ptr->trial_avatar_list, team_index);
                v16 = (unsigned int *)v15;
                if ( *(_BYTE *)(((unsigned __int64)v15 >> 3) + 0x7FFF8000) != 0
                  && (char)(((unsigned __int8)v15 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)v15 >> 3) + 0x7FFF8000) )
                {
                  __asan_report_load4(v15);
                }
                proto::CrystalLinkAvatarInfo::set_avatar_id(team_avatar_info, *v16);
                team_buff_info = proto::CrystalLinkTeamInfo::add_buff_info_list(team_info);
                v17 = (__gnu_cxx::__alloc_traits<std::allocator<unsigned int>,unsigned int>::value_type *)std::vector<unsigned int>::operator[](&level_config_ptr->cond_buff_id_list, team_index);
                v18 = v17;
                if ( *(_BYTE *)(((unsigned __int64)v17 >> 3) + 0x7FFF8000) != 0
                  && (char)(((unsigned __int8)v17 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)v17 >> 3) + 0x7FFF8000) )
                {
                  __asan_report_load4(v17);
                }
                proto::CrystalLinkBuffInfo::set_cond_buff_id(team_buff_info, *v18);
                v19 = (__gnu_cxx::__alloc_traits<std::allocator<unsigned int>,unsigned int>::value_type *)std::vector<unsigned int>::operator[](&level_config_ptr->effect_buff_id_list, team_index);
                v20 = v19;
                if ( *(_BYTE *)(((unsigned __int64)v19 >> 3) + 0x7FFF8000) != 0
                  && (char)(((unsigned __int8)v19 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)v19 >> 3) + 0x7FFF8000) )
                {
                  __asan_report_load4(v19);
                }
                proto::CrystalLinkBuffInfo::set_effect_buff_id(team_buff_info, *v20);
              }
              v21 = std::__shared_ptr_access<CrystalLinkActivity,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<CrystalLinkActivity,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 64));
              restarted = CrystalLinkActivity::enterCrystalLinkDungeon(
                            v21,
                            (const proto::CrystalLinkEnterDungeonReq *)(v3 + 128));
            }
            else
            {
              common::milog::MiLogStream::create(
                &v45,
                &common::milog::MiLogDefault::default_log_obj_,
                3u,
                "./src/player/gm/player_gm_comp.cpp",
                "procCrystalLinkActivity",
                19825);
              v12 = common::milog::MiLogStream::operator<<<char [47],(char *[47])0>(
                      &v45,
                      (const char (*)[47])"crystal link not found level config, level id:");
              common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                v12,
                (const unsigned int *)(v3 + 48));
              common::milog::MiLogStream::~MiLogStream(&v45);
              restarted = -1;
            }
          }
LABEL_34:
          proto::CrystalLinkEnterDungeonReq::~CrystalLinkEnterDungeonReq((proto::CrystalLinkEnterDungeonReq *const)(v3 + 128));
        }
        else
        {
          common::milog::MiLogStream::create(
            &v45,
            &common::milog::MiLogDefault::default_log_obj_,
            3u,
            "./src/player/gm/player_gm_comp.cpp",
            "procCrystalLinkActivity",
            19810);
          common::milog::MiLogStream::operator<<<char [17],(char *[17])0>(&v45, "param not enough");
          common::milog::MiLogStream::~MiLogStream(&v45);
          restarted = -1;
        }
      }
      else
      {
        v22 = std::vector<std::string>::operator[](param_vec, 0LL);
        if ( std::operator==<char>(v22, "SWITCH_TEAM") )
        {
          if ( std::vector<std::string>::size(param_vec) > 1 )
          {
            *(_DWORD *)(v3 + 48) = 0;
            v23 = std::vector<std::string>::operator[](param_vec, 1uLL);
            if ( common::tools::StringUtils::strToNum<unsigned int>(v23, (unsigned int *)(v3 + 48), 1) )
            {
              common::milog::MiLogStream::create(
                &v45,
                &common::milog::MiLogDefault::default_log_obj_,
                3u,
                "./src/player/gm/player_gm_comp.cpp",
                "procCrystalLinkActivity",
                19858);
              v24 = common::milog::MiLogStream::operator<<<char [15],(char *[15])0>(
                      &v45,
                      (const char (*)[15])"invalid param:");
              v25 = std::vector<std::string>::operator[](param_vec, 1uLL);
              common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v24, v25);
              common::milog::MiLogStream::~MiLogStream(&v45);
              restarted = -1;
            }
            else
            {
              v26 = std::__shared_ptr_access<CrystalLinkActivity,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<CrystalLinkActivity,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 64));
              restarted = CrystalLinkActivity::forceSetUpDungeonTeam(v26, *(_DWORD *)(v3 + 48), 0);
            }
          }
          else
          {
            common::milog::MiLogStream::create(
              &v45,
              &common::milog::MiLogDefault::default_log_obj_,
              3u,
              "./src/player/gm/player_gm_comp.cpp",
              "procCrystalLinkActivity",
              19852);
            common::milog::MiLogStream::operator<<<char [17],(char *[17])0>(&v45, "param not enough");
            common::milog::MiLogStream::~MiLogStream(&v45);
            restarted = -1;
          }
        }
        else
        {
          v27 = std::vector<std::string>::operator[](param_vec, 0LL);
          if ( std::operator==<char>(v27, "OPEN_LEVEL") )
          {
            if ( std::vector<std::string>::size(param_vec) > 1 )
            {
              *(_DWORD *)(v3 + 48) = 0;
              v28 = std::vector<std::string>::operator[](param_vec, 1uLL);
              if ( common::tools::StringUtils::strToNum<unsigned int>(v28, (unsigned int *)(v3 + 48), 1) )
              {
                common::milog::MiLogStream::create(
                  &v45,
                  &common::milog::MiLogDefault::default_log_obj_,
                  3u,
                  "./src/player/gm/player_gm_comp.cpp",
                  "procCrystalLinkActivity",
                  19873);
                v29 = common::milog::MiLogStream::operator<<<char [15],(char *[15])0>(
                        &v45,
                        (const char (*)[15])"invalid param:");
                v30 = std::vector<std::string>::operator[](param_vec, 1uLL);
                common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v29, v30);
                common::milog::MiLogStream::~MiLogStream(&v45);
                restarted = -1;
              }
              else
              {
                v31 = std::__shared_ptr_access<CrystalLinkActivity,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<CrystalLinkActivity,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 64));
                restarted = CrystalLinkActivity::openLevel(v31, *(_DWORD *)(v3 + 48));
              }
            }
            else
            {
              common::milog::MiLogStream::create(
                &v45,
                &common::milog::MiLogDefault::default_log_obj_,
                3u,
                "./src/player/gm/player_gm_comp.cpp",
                "procCrystalLinkActivity",
                19867);
              common::milog::MiLogStream::operator<<<char [17],(char *[17])0>(&v45, "param not enough");
              common::milog::MiLogStream::~MiLogStream(&v45);
              restarted = -1;
            }
          }
          else
          {
            v32 = std::vector<std::string>::operator[](param_vec, 0LL);
            if ( std::operator==<char>(v32, "RESTART_DUNGEON") )
            {
              v33 = std::__shared_ptr_access<CrystalLinkActivity,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<CrystalLinkActivity,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 64));
              restarted = CrystalLinkActivity::restartDungeon(v33);
            }
            else
            {
              v34 = std::vector<std::string>::operator[](param_vec, 0LL);
              if ( std::operator==<char>(v34, "STOP_GALLERY") )
              {
                if ( std::vector<std::string>::size(param_vec) > 1 )
                {
                  if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
                    __asan_report_load8();
                  Player::getSceneComp(context->player);
                  PlayerSceneComp::getCurScene((const PlayerSceneComp *const)(v3 + 96));
                  if ( std::operator==<Scene>((const std::shared_ptr<Scene> *)(v3 + 96), 0LL) )
                  {
                    std::string::operator=(ret_msg, "scene_ptr is null");
                    restarted = -1;
                  }
                  else
                  {
                    *(_DWORD *)(v3 + 48) = 0;
                    v35 = std::vector<std::string>::operator[](param_vec, 1uLL);
                    if ( common::tools::StringUtils::strToNum<unsigned int>(v35, (unsigned int *)(v3 + 48), 1) )
                    {
                      std::string::operator=(ret_msg, "strToNum failed");
                      restarted = -1;
                    }
                    else
                    {
                      v36 = std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 96));
                      GalleryComp = Scene::getGalleryComp(v36);
                      restarted = SceneGalleryComp::forceStopAndClearGallery(
                                    GalleryComp,
                                    *(_DWORD *)(v3 + 48),
                                    0,
                                    GALLERY_STOP_TIMEUP);
                    }
                  }
                  std::shared_ptr<Scene>::~shared_ptr((std::shared_ptr<Scene> *const)(v3 + 96));
                }
                else
                {
                  std::string::operator=(ret_msg, "param not enough");
                  restarted = -1;
                }
              }
              else
              {
                restarted = 0;
              }
            }
          }
        }
      }
    }
    std::shared_ptr<CrystalLinkActivity>::~shared_ptr((std::shared_ptr<CrystalLinkActivity> *const)(v3 + 64));
  }
  result = restarted;
  if ( v46 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8014) = 0LL;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8018) = -168430091;
  }
  return result;
};

// Line 19907: range 0000000017D7E164-0000000017D7E206
void __cdecl procIrodoriActivityRegister::procIrodoriActivityRegister(procIrodoriActivityRegister *const this)
{
  std::function<int(GmContext&,const std::vector<std::string>&,std::string&)> *v1; // rax
  std::allocator<char> __a; // [rsp+1Fh] [rbp-31h] BYREF
  std::string __k; // [rsp+20h] [rbp-30h] BYREF

  std::allocator<char>::allocator(&__a);
  std::string::basic_string<std::allocator<char>>(&__k, "IRODORI", &__a);
  v1 = std::unordered_map<std::string,std::function<int ()(GmContext &,std::vector<std::string> const&,std::string&)>>::operator[](
         &GmUtils::op_func_map[abi:cxx11],
         &__k);
  std::function<int ()(GmContext &,std::vector<std::string> const&,std::string&)>::operator=<int (&)(GmContext &,std::vector<std::string> const&,std::string&)>(
    v1,
    (int (*)(GmContext *, const std::vector<std::string> *, std::string *))procIrodoriActivity);
  std::string::~string(&__k);
  std::allocator<char>::~allocator(&__a);
};

// Line 19908: range 0000000017C57964-0000000017C57E74
int32_t __cdecl procIrodoriActivity(
        GmContext *context,
        const std::vector<std::string> *param_vec,
        std::string *ret_msg)
{
  unsigned __int64 v3; // r12
  __int64 v4; // rax
  _DWORD *v5; // r13
  int32_t v6; // r14d
  const std::string *v7; // rax
  IrodoriActivity *v8; // rax
  const std::string *v9; // rax
  const std::string *v10; // rax
  common::milog::MiLogStream *v11; // r14
  const std::string *v12; // rax
  IrodoriActivity *v13; // rax
  const std::string *v14; // rax
  IrodoriActivity *v15; // rax
  const std::string *v16; // rax
  const std::string *v17; // rax
  common::milog::MiLogStream *v18; // r14
  const std::string *v19; // rax
  IrodoriActivity *v20; // rax
  int32_t result; // eax
  common::milog::MiLogStream v23; // [rsp+20h] [rbp-B0h] BYREF
  char v24[144]; // [rsp+40h] [rbp-90h] BYREF

  v3 = (unsigned __int64)v24;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_1(96LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "2 48 4 14 theme_id:19950 64 16 18 activity_ptr:19914";
  *(_QWORD *)(v3 + 16) = procIrodoriActivity;
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = -234556943;
  v5[536862722] = -202178560;
  if ( std::vector<std::string>::empty(param_vec) )
  {
    std::string::operator=(ret_msg, "param not enough");
    v6 = -1;
    goto LABEL_27;
  }
  if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
    __asan_report_load8();
  Player::getActivityComp(context->player);
  PlayerActivityComp::findOpenningActivity<IrodoriActivity>((PlayerActivityComp *const)(v3 + 64));
  if ( !std::operator==<IrodoriActivity>((const std::shared_ptr<IrodoriActivity> *)(v3 + 64), 0LL) )
  {
    v7 = std::vector<std::string>::operator[](param_vec, 0LL);
    if ( std::operator==<char>(v7, "CLEAR") )
    {
      v8 = std::__shared_ptr_access<IrodoriActivity,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<IrodoriActivity,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 64));
      IrodoriActivity::clearByGm(v8);
      goto LABEL_25;
    }
    v9 = std::vector<std::string>::operator[](param_vec, 0LL);
    if ( std::operator==<char>(v9, "MASTER") )
    {
      if ( std::vector<std::string>::size(param_vec) > 1 )
      {
        *(_DWORD *)(v3 + 48) = 0;
        v10 = std::vector<std::string>::operator[](param_vec, 1uLL);
        if ( common::tools::StringUtils::strToNum<unsigned int>(v10, (unsigned int *)(v3 + 48), 1) )
        {
          common::milog::MiLogStream::create(
            &v23,
            &common::milog::MiLogDefault::default_log_obj_,
            3u,
            "./src/player/gm/player_gm_comp.cpp",
            "procIrodoriActivity",
            19934);
          v11 = common::milog::MiLogStream::operator<<<char [15],(char *[15])0>(
                  &v23,
                  (const char (*)[15])"invalid param:");
          v12 = std::vector<std::string>::operator[](param_vec, 1uLL);
          common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v11, v12);
          common::milog::MiLogStream::~MiLogStream(&v23);
          v6 = -1;
        }
        else
        {
          v13 = std::__shared_ptr_access<IrodoriActivity,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<IrodoriActivity,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 64));
          v6 = IrodoriActivity::openMasterLevelByGm(v13, *(_DWORD *)(v3 + 48));
        }
        goto LABEL_26;
      }
      goto LABEL_14;
    }
    v14 = std::vector<std::string>::operator[](param_vec, 0LL);
    if ( std::operator==<char>(v14, "RESET_CG") )
    {
      v15 = std::__shared_ptr_access<IrodoriActivity,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<IrodoriActivity,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 64));
      v6 = IrodoriActivity::resetCgViewByGm(v15);
      goto LABEL_26;
    }
    v16 = std::vector<std::string>::operator[](param_vec, 0LL);
    if ( std::operator==<char>(v16, "FLOWER_FINISH") )
    {
      if ( std::vector<std::string>::size(param_vec) <= 1 )
      {
LABEL_14:
        std::string::operator=(ret_msg, "param not enough");
        v6 = -1;
        goto LABEL_26;
      }
      *(_DWORD *)(v3 + 48) = 0;
      v17 = std::vector<std::string>::operator[](param_vec, 1uLL);
      if ( common::tools::StringUtils::strToNum<unsigned int>(v17, (unsigned int *)(v3 + 48), 1) )
      {
        common::milog::MiLogStream::create(
          &v23,
          &common::milog::MiLogDefault::default_log_obj_,
          3u,
          "./src/player/gm/player_gm_comp.cpp",
          "procIrodoriActivity",
          19953);
        v18 = common::milog::MiLogStream::operator<<<char [15],(char *[15])0>(
                &v23,
                (const char (*)[15])"invalid param:");
        v19 = std::vector<std::string>::operator[](param_vec, 1uLL);
        common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v18, v19);
        common::milog::MiLogStream::~MiLogStream(&v23);
        v6 = -1;
        goto LABEL_26;
      }
      v20 = std::__shared_ptr_access<IrodoriActivity,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<IrodoriActivity,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 64));
      IrodoriActivity::finishFlowerThemeByGm(v20, *(_DWORD *)(v3 + 48));
    }
LABEL_25:
    v6 = 0;
    goto LABEL_26;
  }
  std::string::operator=(ret_msg, "activity is not open");
  v6 = -1;
LABEL_26:
  std::shared_ptr<IrodoriActivity>::~shared_ptr((std::shared_ptr<IrodoriActivity> *const)(v3 + 64));
LABEL_27:
  result = v6;
  if ( v24 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8008) = 0;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8008) = -168430091;
  }
  return result;
};

// Line 19961: range 0000000017D7E208-0000000017D7E2AA
void __cdecl procIrodoriChessRegister::procIrodoriChessRegister(procIrodoriChessRegister *const this)
{
  std::function<int(GmContext&,const std::vector<std::string>&,std::string&)> *v1; // rax
  std::allocator<char> __a; // [rsp+1Fh] [rbp-31h] BYREF
  std::string __k; // [rsp+20h] [rbp-30h] BYREF

  std::allocator<char>::allocator(&__a);
  std::string::basic_string<std::allocator<char>>(&__k, "IRODORI_CHESS", &__a);
  v1 = std::unordered_map<std::string,std::function<int ()(GmContext &,std::vector<std::string> const&,std::string&)>>::operator[](
         &GmUtils::op_func_map[abi:cxx11],
         &__k);
  std::function<int ()(GmContext &,std::vector<std::string> const&,std::string&)>::operator=<int (&)(GmContext &,std::vector<std::string> const&,std::string&)>(
    v1,
    (int (*)(GmContext *, const std::vector<std::string> *, std::string *))procIrodoriChess);
  std::string::~string(&__k);
  std::allocator<char>::~allocator(&__a);
};

// Line 19962: range 0000000017C57E75-0000000017C599CF
int32_t __cdecl procIrodoriChess(GmContext *context, const std::vector<std::string> *param_vec, std::string *ret_msg)
{
  unsigned __int64 v3; // r14
  __int64 v4; // rax
  _DWORD *v5; // r12
  int32_t v6; // r13d
  const std::string *v7; // rax
  IrodoriActivity *v8; // rax
  const std::string *v9; // rax
  const std::string *v10; // rax
  common::milog::MiLogStream *v11; // r13
  const std::string *v12; // rax
  const std::string *v13; // rax
  common::milog::MiLogStream *v14; // r13
  const std::string *v15; // rax
  const std::string *v16; // rax
  common::milog::MiLogStream *v17; // r13
  const std::string *v18; // rax
  IrodoriActivity *v19; // rax
  const std::string *v20; // rax
  const std::string *v21; // rax
  common::milog::MiLogStream *v22; // r13
  const std::string *v23; // rax
  const std::string *v24; // rax
  common::milog::MiLogStream *v25; // r13
  const std::string *v26; // rax
  IrodoriActivity *v27; // rax
  const std::string *v28; // rax
  const std::string *v29; // rax
  const std::string *v30; // rax
  const std::string *v31; // rax
  common::milog::MiLogStream *v32; // rcx
  common::minet::Packet *v33; // r13
  uint32_t Uid; // eax
  GameserverService *v35; // r13
  common::minet::PacketPtr v36; // rdi
  const std::string *v37; // rax
  const std::string *v38; // rax
  const std::string *v39; // rax
  const std::string *v40; // rax
  common::milog::MiLogStream *v41; // rcx
  common::minet::Packet *v42; // r13
  uint32_t v43; // eax
  GameserverService *v44; // r13
  common::minet::PacketPtr v45; // rdi
  const std::string *v46; // rax
  const std::string *v47; // rax
  const std::string *v48; // rax
  const std::string *v49; // rax
  bool v50; // r13
  const std::string *v51; // rax
  IrodoriActivity *v52; // rax
  const std::string *v53; // rax
  const std::string *v54; // rax
  const std::string *v55; // rax
  const std::string *v56; // rax
  const std::string *v57; // rax
  Scene *v58; // rax
  Monster *v59; // rax
  std::__shared_ptr_access<IrodoriChessMultistagePlay,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v60; // r13
  unsigned __int64 v61; // rax
  void (__fastcall *v62)(std::__shared_ptr_access<IrodoriChessMultistagePlay,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *, unsigned __int64, std::__shared_ptr_access<Monster,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *); // r15
  std::__shared_ptr_access<Monster,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v63; // rax
  const std::string *v64; // rax
  const std::string *v65; // rax
  const std::string *v66; // rax
  Scene *v67; // rax
  std::__shared_ptr_access<IrodoriTowerDefensePlay,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v68; // rax
  IrodoriTowerDefensePlay *v69; // rax
  IrodoriTowerDefensePlay *v70; // rax
  int32_t result; // eax
  uint32_t player_uid; // [rsp+2Ch] [rbp-2A4h]
  std::string v74; // [rsp+40h] [rbp-290h] BYREF
  std::string v75; // [rsp+60h] [rbp-270h] BYREF
  common::milog::MiLogStream v76; // [rsp+80h] [rbp-250h] BYREF
  char v77[560]; // [rsp+A0h] [rbp-230h] BYREF

  v3 = (unsigned __int64)v77;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_3(512LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "11 48 1 17 is_hard_map:20134 64 1 17 is_hard_map:19994 80 4 16 monster_id:20157 96 4 11 delta:20"
                        "202 112 16 18 activity_ptr:19969 144 16 23 dungeon_scene_ptr:20209 176 16 14 play_ptr:20216 208 "
                        "16 22 irodori_play_ptr:20223 240 32 9 req:20060 304 48 17 card_id_set:20141 384 96 16 hp_context:20191";
  *(_QWORD *)(v3 + 16) = procIrodoriChess;
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = -234753551;
  v5[536862722] = -234556927;
  v5[536862723] = 61956;
  v5[536862724] = 62194;
  v5[536862725] = 62194;
  v5[536862726] = 62194;
  v5[536862727] = 62194;
  v5[536862728] = -219021312;
  v5[536862729] = 62194;
  v5[536862731] = -218959118;
  v5[536862735] = -202116109;
  if ( !std::vector<std::string>::size(param_vec) )
  {
    std::string::operator=(ret_msg, "param not enough");
    v6 = -1;
    goto LABEL_109;
  }
  if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
    __asan_report_load8();
  Player::getActivityComp(context->player);
  PlayerActivityComp::findOpenningActivity<IrodoriActivity>((PlayerActivityComp *const)(v3 + 112));
  if ( !std::operator==<IrodoriActivity>(0LL, (const std::shared_ptr<IrodoriActivity> *)(v3 + 112)) )
  {
    v7 = std::vector<std::string>::operator[](param_vec, 0LL);
    if ( std::operator==<char>(v7, "OPEN") )
    {
      v8 = std::__shared_ptr_access<IrodoriActivity,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<IrodoriActivity,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 112));
      IrodoriActivity::openChessByGm(v8);
      v6 = 0;
      goto LABEL_108;
    }
    v9 = std::vector<std::string>::operator[](param_vec, 0LL);
    if ( std::operator==<char>(v9, "SET_SCORE") )
    {
      if ( std::vector<std::string>::size(param_vec) > 3 )
      {
        *(_DWORD *)(v3 + 80) = 0;
        v10 = std::vector<std::string>::operator[](param_vec, 1uLL);
        if ( common::tools::StringUtils::strToNum<unsigned int>(v10, (unsigned int *)(v3 + 80), 1) )
        {
          common::milog::MiLogStream::create(
            &v76,
            &common::milog::MiLogDefault::default_log_obj_,
            3u,
            "./src/player/gm/player_gm_comp.cpp",
            "procIrodoriChess",
            19991);
          v11 = common::milog::MiLogStream::operator<<<char [15],(char *[15])0>(
                  &v76,
                  (const char (*)[15])"invalid param:");
          v12 = std::vector<std::string>::operator[](param_vec, 1uLL);
          common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v11, v12);
          common::milog::MiLogStream::~MiLogStream(&v76);
          v6 = -1;
        }
        else
        {
          *(_BYTE *)(v3 + 64) = 0;
          v13 = std::vector<std::string>::operator[](param_vec, 2uLL);
          if ( common::tools::StringUtils::strToNum<bool>(v13, (bool *)(v3 + 64), 1) )
          {
            common::milog::MiLogStream::create(
              &v76,
              &common::milog::MiLogDefault::default_log_obj_,
              3u,
              "./src/player/gm/player_gm_comp.cpp",
              "procIrodoriChess",
              19997);
            v14 = common::milog::MiLogStream::operator<<<char [15],(char *[15])0>(
                    &v76,
                    (const char (*)[15])"invalid param:");
            v15 = std::vector<std::string>::operator[](param_vec, 2uLL);
            common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v14, v15);
            common::milog::MiLogStream::~MiLogStream(&v76);
            v6 = -1;
          }
          else
          {
            *(_DWORD *)(v3 + 96) = 0;
            v16 = std::vector<std::string>::operator[](param_vec, 3uLL);
            if ( common::tools::StringUtils::strToNum<unsigned int>(v16, (unsigned int *)(v3 + 96), 1) )
            {
              common::milog::MiLogStream::create(
                &v76,
                &common::milog::MiLogDefault::default_log_obj_,
                3u,
                "./src/player/gm/player_gm_comp.cpp",
                "procIrodoriChess",
                20003);
              v17 = common::milog::MiLogStream::operator<<<char [15],(char *[15])0>(
                      &v76,
                      (const char (*)[15])"invalid param:");
              v18 = std::vector<std::string>::operator[](param_vec, 3uLL);
              common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v17, v18);
              common::milog::MiLogStream::~MiLogStream(&v76);
              v6 = -1;
            }
            else
            {
              v19 = std::__shared_ptr_access<IrodoriActivity,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<IrodoriActivity,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 112));
              IrodoriActivity::setChessScoreByGm(v19, *(_DWORD *)(v3 + 80), *(_BYTE *)(v3 + 64), *(_DWORD *)(v3 + 96));
              v6 = 0;
            }
          }
        }
        goto LABEL_108;
      }
      goto LABEL_94;
    }
    v20 = std::vector<std::string>::operator[](param_vec, 0LL);
    if ( std::operator==<char>(v20, "ENTER") )
    {
      if ( std::vector<std::string>::size(param_vec) > 2 )
      {
        *(_DWORD *)(v3 + 96) = 0;
        v21 = std::vector<std::string>::operator[](param_vec, 1uLL);
        if ( common::tools::StringUtils::strToNum<unsigned int>(v21, (unsigned int *)(v3 + 96), 1) )
        {
          common::milog::MiLogStream::create(
            &v76,
            &common::milog::MiLogDefault::default_log_obj_,
            3u,
            "./src/player/gm/player_gm_comp.cpp",
            "procIrodoriChess",
            20019);
          v22 = common::milog::MiLogStream::operator<<<char [15],(char *[15])0>(
                  &v76,
                  (const char (*)[15])"invalid param:");
          v23 = std::vector<std::string>::operator[](param_vec, 1uLL);
          common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v22, v23);
          common::milog::MiLogStream::~MiLogStream(&v76);
          v6 = -1;
        }
        else
        {
          *(_BYTE *)(v3 + 64) = 0;
          v24 = std::vector<std::string>::operator[](param_vec, 2uLL);
          if ( common::tools::StringUtils::strToNum<bool>(v24, (bool *)(v3 + 64), 1) )
          {
            common::milog::MiLogStream::create(
              &v76,
              &common::milog::MiLogDefault::default_log_obj_,
              3u,
              "./src/player/gm/player_gm_comp.cpp",
              "procIrodoriChess",
              20025);
            v25 = common::milog::MiLogStream::operator<<<char [15],(char *[15])0>(
                    &v76,
                    (const char (*)[15])"invalid param:");
            v26 = std::vector<std::string>::operator[](param_vec, 2uLL);
            common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v25, v26);
            common::milog::MiLogStream::~MiLogStream(&v76);
            v6 = -1;
          }
          else
          {
            v27 = std::__shared_ptr_access<IrodoriActivity,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<IrodoriActivity,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 112));
            IrodoriActivity::enterChessMapByGm(v27, *(_DWORD *)(v3 + 96), *(_BYTE *)(v3 + 64));
            v6 = 0;
          }
        }
        goto LABEL_108;
      }
      goto LABEL_94;
    }
    v28 = std::vector<std::string>::operator[](param_vec, 0LL);
    if ( std::operator==<char>(v28, "EQUIP_CARD") )
    {
      if ( std::vector<std::string>::size(param_vec) > 3 )
      {
        *(_DWORD *)(v3 + 80) = 0;
        v29 = std::vector<std::string>::operator[](param_vec, 1uLL);
        if ( common::tools::StringUtils::strToNum<unsigned int>(v29, (unsigned int *)(v3 + 80), 1) )
          goto LABEL_62;
        *(_BYTE *)(v3 + 64) = 0;
        v30 = std::vector<std::string>::operator[](param_vec, 2uLL);
        if ( common::tools::StringUtils::strToNum<bool>(v30, (bool *)(v3 + 64), 1) )
          goto LABEL_64;
        *(_DWORD *)(v3 + 96) = 0;
        v31 = std::vector<std::string>::operator[](param_vec, 3uLL);
        if ( !common::tools::StringUtils::strToNum<unsigned int>(v31, (unsigned int *)(v3 + 96), 1) )
        {
          proto::IrodoriChessEquipCardReq::IrodoriChessEquipCardReq((proto::IrodoriChessEquipCardReq *const)(v3 + 240));
          proto::IrodoriChessEquipCardReq::set_level_id(
            (proto::IrodoriChessEquipCardReq *const)(v3 + 240),
            *(_DWORD *)(v3 + 80));
          proto::IrodoriChessEquipCardReq::set_is_hard_map(
            (proto::IrodoriChessEquipCardReq *const)(v3 + 240),
            *(_BYTE *)(v3 + 64));
          proto::IrodoriChessEquipCardReq::set_card_id(
            (proto::IrodoriChessEquipCardReq *const)(v3 + 240),
            *(_DWORD *)(v3 + 96));
          common::minet::PacketUtils::createPacket<proto::IrodoriChessEquipCardReq>((const proto::IrodoriChessEquipCardReq *)(v3 + 176));
          if ( std::operator==<common::minet::Packet>((const std::shared_ptr<common::minet::Packet> *)(v3 + 176), 0LL) )
          {
            common::milog::MiLogStream::create(
              &v76,
              &common::milog::MiLogDefault::default_log_obj_,
              3u,
              "./src/player/gm/player_gm_comp.cpp",
              "procIrodoriChess",
              20067);
            v32 = common::milog::MiLogStream::operator<<<char [26],(char *[26])0>(
                    &v76,
                    (const char (*)[26])"createPacket failed, uid:");
            if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
              __asan_report_load8();
            operator<<(v32, context->player);
            common::milog::MiLogStream::~MiLogStream(&v76);
            v6 = -1;
          }
          else
          {
            v33 = std::__shared_ptr_access<common::minet::Packet,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<common::minet::Packet,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 176));
            if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
              __asan_report_load8();
            Uid = Player::getUid(context->player);
            common::minet::Packet::setUserId(v33, Uid);
            v35 = ServiceBox::findService<GameserverService>();
            std::shared_ptr<common::minet::Packet>::shared_ptr(
              (std::shared_ptr<common::minet::Packet> *const)(v3 + 208),
              (const std::shared_ptr<common::minet::Packet> *)(v3 + 176));
            GameserverService::setPacketGameThreadIndex(v35, (common::minet::PacketPtr *)(v3 + 208));
            std::shared_ptr<common::minet::Packet>::~shared_ptr((std::shared_ptr<common::minet::Packet> *const)(v3 + 208));
            v36._M_refcount._M_pi = (std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)2> *)(v3 + 176);
            std::shared_ptr<common::minet::Packet>::shared_ptr(
              (std::shared_ptr<common::minet::Packet> *const)(v3 + 208),
              (const std::shared_ptr<common::minet::Packet> *)(v3 + 176));
            v36._M_ptr = (std::__shared_ptr<common::minet::Packet,(__gnu_cxx::_Lock_policy)2>::element_type *)(v3 + 208);
            ServiceBox::pushPacketToService(v36);
            std::shared_ptr<common::minet::Packet>::~shared_ptr((std::shared_ptr<common::minet::Packet> *const)(v3 + 208));
            v6 = 0;
          }
          std::shared_ptr<common::minet::Packet>::~shared_ptr((std::shared_ptr<common::minet::Packet> *const)(v3 + 176));
          proto::IrodoriChessEquipCardReq::~IrodoriChessEquipCardReq((proto::IrodoriChessEquipCardReq *const)(v3 + 240));
          goto LABEL_108;
        }
LABEL_36:
        std::string::operator=(ret_msg, "card_id parse fail");
        v6 = -1;
        goto LABEL_108;
      }
      goto LABEL_94;
    }
    v37 = std::vector<std::string>::operator[](param_vec, 0LL);
    if ( std::operator==<char>(v37, "UNEQUIP_CARD") )
    {
      if ( std::vector<std::string>::size(param_vec) > 3 )
      {
        *(_DWORD *)(v3 + 80) = 0;
        v38 = std::vector<std::string>::operator[](param_vec, 1uLL);
        if ( common::tools::StringUtils::strToNum<unsigned int>(v38, (unsigned int *)(v3 + 80), 1) )
          goto LABEL_62;
        *(_BYTE *)(v3 + 64) = 0;
        v39 = std::vector<std::string>::operator[](param_vec, 2uLL);
        if ( common::tools::StringUtils::strToNum<bool>(v39, (bool *)(v3 + 64), 1) )
          goto LABEL_64;
        *(_DWORD *)(v3 + 96) = 0;
        v40 = std::vector<std::string>::operator[](param_vec, 3uLL);
        if ( !common::tools::StringUtils::strToNum<unsigned int>(v40, (unsigned int *)(v3 + 96), 1) )
        {
          proto::IrodoriChessUnequipCardReq::IrodoriChessUnequipCardReq((proto::IrodoriChessUnequipCardReq *const)(v3 + 240));
          proto::IrodoriChessUnequipCardReq::set_level_id(
            (proto::IrodoriChessUnequipCardReq *const)(v3 + 240),
            *(_DWORD *)(v3 + 80));
          proto::IrodoriChessUnequipCardReq::set_is_hard_map(
            (proto::IrodoriChessUnequipCardReq *const)(v3 + 240),
            *(_BYTE *)(v3 + 64));
          proto::IrodoriChessUnequipCardReq::set_card_id(
            (proto::IrodoriChessUnequipCardReq *const)(v3 + 240),
            *(_DWORD *)(v3 + 96));
          common::minet::PacketUtils::createPacket<proto::IrodoriChessUnequipCardReq>((const proto::IrodoriChessUnequipCardReq *)(v3 + 176));
          if ( std::operator==<common::minet::Packet>((const std::shared_ptr<common::minet::Packet> *)(v3 + 176), 0LL) )
          {
            common::milog::MiLogStream::create(
              &v76,
              &common::milog::MiLogDefault::default_log_obj_,
              3u,
              "./src/player/gm/player_gm_comp.cpp",
              "procIrodoriChess",
              20111);
            v41 = common::milog::MiLogStream::operator<<<char [26],(char *[26])0>(
                    &v76,
                    (const char (*)[26])"createPacket failed, uid:");
            if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
              __asan_report_load8();
            operator<<(v41, context->player);
            common::milog::MiLogStream::~MiLogStream(&v76);
            v6 = -1;
          }
          else
          {
            v42 = std::__shared_ptr_access<common::minet::Packet,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<common::minet::Packet,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 176));
            if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
              __asan_report_load8();
            v43 = Player::getUid(context->player);
            common::minet::Packet::setUserId(v42, v43);
            v44 = ServiceBox::findService<GameserverService>();
            std::shared_ptr<common::minet::Packet>::shared_ptr(
              (std::shared_ptr<common::minet::Packet> *const)(v3 + 208),
              (const std::shared_ptr<common::minet::Packet> *)(v3 + 176));
            GameserverService::setPacketGameThreadIndex(v44, (common::minet::PacketPtr *)(v3 + 208));
            std::shared_ptr<common::minet::Packet>::~shared_ptr((std::shared_ptr<common::minet::Packet> *const)(v3 + 208));
            v45._M_refcount._M_pi = (std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)2> *)(v3 + 176);
            std::shared_ptr<common::minet::Packet>::shared_ptr(
              (std::shared_ptr<common::minet::Packet> *const)(v3 + 208),
              (const std::shared_ptr<common::minet::Packet> *)(v3 + 176));
            v45._M_ptr = (std::__shared_ptr<common::minet::Packet,(__gnu_cxx::_Lock_policy)2>::element_type *)(v3 + 208);
            ServiceBox::pushPacketToService(v45);
            std::shared_ptr<common::minet::Packet>::~shared_ptr((std::shared_ptr<common::minet::Packet> *const)(v3 + 208));
            v6 = 0;
          }
          std::shared_ptr<common::minet::Packet>::~shared_ptr((std::shared_ptr<common::minet::Packet> *const)(v3 + 176));
          proto::IrodoriChessUnequipCardReq::~IrodoriChessUnequipCardReq((proto::IrodoriChessUnequipCardReq *const)(v3 + 240));
          goto LABEL_108;
        }
        goto LABEL_36;
      }
LABEL_94:
      std::string::operator=(ret_msg, "param not enough");
      v6 = -1;
      goto LABEL_108;
    }
    v46 = std::vector<std::string>::operator[](param_vec, 0LL);
    if ( std::operator==<char>(v46, "SET_CARDS") )
    {
      if ( std::vector<std::string>::size(param_vec) > 3 )
      {
        *(_DWORD *)(v3 + 96) = 0;
        v47 = std::vector<std::string>::operator[](param_vec, 1uLL);
        if ( common::tools::StringUtils::strToNum<unsigned int>(v47, (unsigned int *)(v3 + 96), 1) )
        {
LABEL_62:
          std::string::operator=(ret_msg, "level_id parse fail");
          v6 = -1;
          goto LABEL_108;
        }
        *(_BYTE *)(v3 + 48) = 0;
        v48 = std::vector<std::string>::operator[](param_vec, 2uLL);
        if ( !common::tools::StringUtils::strToNum<bool>(v48, (bool *)(v3 + 48), 1) )
        {
          std::set<unsigned int>::set((std::set<unsigned int> *const)(v3 + 304));
          std::allocator<char>::allocator(v3 + 64);
          std::string::basic_string<std::allocator<char>>(
            (std::string *const)&v76,
            ",",
            (const std::allocator<char> *)(v3 + 64));
          v49 = std::vector<std::string>::operator[](param_vec, 3uLL);
          v50 = common::tools::StringUtils::splitToSet<std::set<unsigned int>>(
                  v49,
                  (const std::string *)&v76,
                  (std::set<unsigned int> *)(v3 + 304),
                  1) != 0;
          std::string::~string(&v76);
          std::allocator<char>::~allocator(v3 + 64);
          if ( v50 )
          {
            v51 = std::vector<std::string>::operator[](param_vec, 3uLL);
            std::operator+<char>(&v74, "splitToSet fail, card_id_set: ", v51);
            std::string::operator=(ret_msg, &v74);
            std::string::~string(&v74);
            v6 = -1;
          }
          else
          {
            v52 = std::__shared_ptr_access<IrodoriActivity,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<IrodoriActivity,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 112));
            v6 = IrodoriActivity::setMapCardsByGm(
                   v52,
                   *(_DWORD *)(v3 + 96),
                   *(_BYTE *)(v3 + 48),
                   (const std::set<unsigned int> *)(v3 + 304));
          }
          std::set<unsigned int>::~set((std::set<unsigned int> *const)(v3 + 304));
          goto LABEL_108;
        }
LABEL_64:
        std::string::operator=(ret_msg, "is_hard_map parse fail");
        v6 = -1;
        goto LABEL_108;
      }
      goto LABEL_94;
    }
    v53 = std::vector<std::string>::operator[](param_vec, 0LL);
    if ( std::operator==<char>(v53, "MONSTER_DIE") )
    {
      if ( std::vector<std::string>::size(param_vec) <= 2 )
        goto LABEL_94;
      *(_DWORD *)(v3 + 80) = 0;
      v54 = std::vector<std::string>::operator[](param_vec, 1uLL);
      if ( common::tools::StringUtils::strToNum<unsigned int>(v54, (unsigned int *)(v3 + 80), 1) )
      {
        v55 = std::vector<std::string>::operator[](param_vec, 1uLL);
        std::operator+<char>(&v75, "monster_id parse fail:", v55);
        std::string::operator=(ret_msg, &v75);
        std::string::~string(&v75);
        v6 = -1;
        goto LABEL_108;
      }
      *(_DWORD *)(v3 + 96) = 0;
      v56 = std::vector<std::string>::operator[](param_vec, 2uLL);
      if ( common::tools::StringUtils::strToNum<unsigned int>(v56, (unsigned int *)(v3 + 96), 1) )
      {
        v57 = std::vector<std::string>::operator[](param_vec, 2uLL);
        std::operator+<char>((std::string *)(v3 + 240), "kill_score parse fail:", v57);
        std::string::operator=(ret_msg, v3 + 240);
        std::string::~string((void *)(v3 + 240));
        v6 = -1;
        goto LABEL_108;
      }
      if ( *(_BYTE *)(((unsigned __int64)&context->scene >> 3) + 0x7FFF8000) )
        __asan_report_load8();
      std::enable_shared_from_this<Scene>::shared_from_this((std::enable_shared_from_this<Scene> *const)(v3 + 176));
      std::dynamic_pointer_cast<DungeonScene,Scene>((const std::shared_ptr<Scene> *)(v3 + 144));
      std::shared_ptr<Scene>::~shared_ptr((std::shared_ptr<Scene> *const)(v3 + 176));
      if ( std::operator==<DungeonScene>(0LL, (const std::shared_ptr<DungeonScene> *)(v3 + 144)) )
        goto LABEL_79;
      v58 = (Scene *)std::__shared_ptr_access<DungeonScene,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<DungeonScene,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 144));
      Scene::getMultistagePlayComp(v58);
      SceneMultistagePlayComp::findAnyPlayByGm<IrodoriChessMultistagePlay>((SceneMultistagePlayComp *const)(v3 + 176));
      if ( !std::operator==<IrodoriChessMultistagePlay>(
              0LL,
              (const std::shared_ptr<IrodoriChessMultistagePlay> *)(v3 + 176)) )
      {
        common::tools::perf::make_shared<Monster,unsigned int &>((unsigned int *)(v3 + 208), (unsigned int *)(v3 + 80));
        if ( std::operator==<Monster>(0LL, (const std::shared_ptr<Monster> *)(v3 + 208)) )
        {
          std::string::operator=(ret_msg, "make monster fails");
          v6 = -1;
        }
        else
        {
          v59 = std::__shared_ptr_access<Monster,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Monster,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 208));
          Monster::setKillScore(v59, *(_DWORD *)(v3 + 96));
          ChangeHpContext::ChangeHpContext((ChangeHpContext *const)(v3 + 384));
          v60 = std::__shared_ptr_access<IrodoriChessMultistagePlay,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<IrodoriChessMultistagePlay,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 176));
          if ( *(_BYTE *)(((unsigned __int64)v60 >> 3) + 0x7FFF8000) )
            __asan_report_load8();
          v61 = (unsigned __int64)(v60->_vptr_DescribalBase + 18);
          if ( *(_BYTE *)((v61 >> 3) + 0x7FFF8000) )
            __asan_report_load8();
          v62 = *(void (__fastcall **)(std::__shared_ptr_access<IrodoriChessMultistagePlay,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *, unsigned __int64, std::__shared_ptr_access<Monster,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *))v61;
          v63 = std::__shared_ptr_access<Monster,(__gnu_cxx::_Lock_policy)2,false,false>::operator*((const std::__shared_ptr_access<Monster,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 208));
          v62(v60, v3 + 384, v63);
          v6 = 0;
          ChangeHpContext::~ChangeHpContext((ChangeHpContext *const)(v3 + 384));
        }
        std::shared_ptr<Monster>::~shared_ptr((std::shared_ptr<Monster> *const)(v3 + 208));
        goto LABEL_90;
      }
    }
    else
    {
      v64 = std::vector<std::string>::operator[](param_vec, 0LL);
      if ( !std::operator==<char>(v64, "POINTS") )
      {
        std::string::operator=(ret_msg, "invalid gm command.");
        v6 = -1;
        goto LABEL_108;
      }
      if ( std::vector<std::string>::size(param_vec) <= 1 )
        goto LABEL_94;
      *(_DWORD *)(v3 + 96) = 0;
      v65 = std::vector<std::string>::operator[](param_vec, 1uLL);
      if ( common::tools::StringUtils::strToNum<int>(v65, (int *)(v3 + 96), 1) )
      {
        v66 = std::vector<std::string>::operator[](param_vec, 1uLL);
        std::operator+<char>((std::string *)&v76, "delta parse fail:", v66);
        std::string::operator=(ret_msg, &v76);
        std::string::~string(&v76);
        v6 = -1;
        goto LABEL_108;
      }
      if ( *(_BYTE *)(((unsigned __int64)&context->scene >> 3) + 0x7FFF8000) )
        __asan_report_load8();
      std::enable_shared_from_this<Scene>::shared_from_this((std::enable_shared_from_this<Scene> *const)(v3 + 208));
      std::dynamic_pointer_cast<DungeonScene,Scene>((const std::shared_ptr<Scene> *)(v3 + 144));
      std::shared_ptr<Scene>::~shared_ptr((std::shared_ptr<Scene> *const)(v3 + 208));
      if ( std::operator==<DungeonScene>(0LL, (const std::shared_ptr<DungeonScene> *)(v3 + 144)) )
      {
LABEL_79:
        std::string::operator=(ret_msg, "player not in dungeon scene");
        v6 = -1;
LABEL_91:
        std::shared_ptr<DungeonScene>::~shared_ptr((std::shared_ptr<DungeonScene> *const)(v3 + 144));
        goto LABEL_108;
      }
      v67 = (Scene *)std::__shared_ptr_access<DungeonScene,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<DungeonScene,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 144));
      Scene::getMultistagePlayComp(v67);
      SceneMultistagePlayComp::findAnyPlayByGm<IrodoriChessMultistagePlay>((SceneMultistagePlayComp *const)(v3 + 176));
      if ( !std::operator==<IrodoriChessMultistagePlay>(
              0LL,
              (const std::shared_ptr<IrodoriChessMultistagePlay> *)(v3 + 176)) )
      {
        std::__shared_ptr_access<IrodoriChessMultistagePlay,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<IrodoriChessMultistagePlay,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 176));
        EcsBase<SceneMultistagePlay,SceneMultistagePlayCompBase,2u>::findComp<IrodoriTowerDefensePlay>((const EcsBase<SceneMultistagePlay,SceneMultistagePlayCompBase,2> *const)(v3 + 208));
        if ( std::operator==<IrodoriTowerDefensePlay>(0LL, (const std::shared_ptr<IrodoriTowerDefensePlay> *)(v3 + 208)) )
        {
          std::string::operator=(ret_msg, "find IrodoriTowerDefensePlay failed.");
          v6 = -1;
        }
        else
        {
          v68 = std::__shared_ptr_access<IrodoriTowerDefensePlay,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<IrodoriTowerDefensePlay,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 208));
          player_uid = IrodoriTowerDefensePlay::getPlayerUid(v68);
          if ( *(int *)(v3 + 96) < 0 )
          {
            v70 = std::__shared_ptr_access<IrodoriTowerDefensePlay,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<IrodoriTowerDefensePlay,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 208));
            v6 = IrodoriTowerDefensePlay::subBuildingPoints(v70, player_uid, abs32(*(_DWORD *)(v3 + 96)));
          }
          else
          {
            v69 = std::__shared_ptr_access<IrodoriTowerDefensePlay,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<IrodoriTowerDefensePlay,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 208));
            v6 = IrodoriTowerDefensePlay::addBuildingPoints(v69, player_uid, *(_DWORD *)(v3 + 96));
          }
        }
        std::shared_ptr<IrodoriTowerDefensePlay>::~shared_ptr((std::shared_ptr<IrodoriTowerDefensePlay> *const)(v3 + 208));
        goto LABEL_90;
      }
    }
    std::string::operator=(ret_msg, "findAnyPlayByGm IrodoriChessMultistagePlay fails");
    v6 = -1;
LABEL_90:
    std::shared_ptr<IrodoriChessMultistagePlay>::~shared_ptr((std::shared_ptr<IrodoriChessMultistagePlay> *const)(v3 + 176));
    goto LABEL_91;
  }
  std::string::operator=(ret_msg, "no activity open");
  v6 = -1;
LABEL_108:
  std::shared_ptr<IrodoriActivity>::~shared_ptr((std::shared_ptr<IrodoriActivity> *const)(v3 + 112));
LABEL_109:
  result = v6;
  if ( v77 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8010) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8018) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8020) = 0LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF802C) = 0;
    *(_DWORD *)((v3 >> 3) + 0x7FFF803C) = 0;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8020) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8028) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8030) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8038) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 20245: range 0000000017D7E2AC-0000000017D7E34E
void __cdecl procQuickOpenActivityRegister::procQuickOpenActivityRegister(procQuickOpenActivityRegister *const this)
{
  std::function<int(GmContext&,const std::vector<std::string>&,std::string&)> *v1; // rax
  std::allocator<char> __a; // [rsp+1Fh] [rbp-31h] BYREF
  std::string __k; // [rsp+20h] [rbp-30h] BYREF

  std::allocator<char>::allocator(&__a);
  std::string::basic_string<std::allocator<char>>(&__k, "QUICK_OPEN_ACTIVITY", &__a);
  v1 = std::unordered_map<std::string,std::function<int ()(GmContext &,std::vector<std::string> const&,std::string&)>>::operator[](
         &GmUtils::op_func_map[abi:cxx11],
         &__k);
  std::function<int ()(GmContext &,std::vector<std::string> const&,std::string&)>::operator=<int (&)(GmContext &,std::vector<std::string> const&,std::string&)>(
    v1,
    (int (*)(GmContext *, const std::vector<std::string> *, std::string *))procQuickOpenActivity);
  std::string::~string(&__k);
  std::allocator<char>::~allocator(&__a);
};

// Line 20246: range 0000000017C599D0-0000000017C59D39
int32_t __cdecl procQuickOpenActivity(
        GmContext *context,
        const std::vector<std::string> *param_vec,
        std::string *ret_msg)
{
  int32_t v3; // r14d
  unsigned __int64 v4; // rbx
  __int64 v5; // rax
  _DWORD *v6; // r13
  const std::string *v7; // rax
  const std::string *v8; // rax
  common::milog::MiLogStream *v9; // r12
  const std::string *v10; // rax
  uint32_t ActivityComp; // eax
  int v12; // r15d
  std::__shared_ptr_access<BaseActivity,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v13; // rax
  BaseActivity *v14; // rax
  int32_t result; // eax
  common::milog::MiLogStream v17; // [rsp+20h] [rbp-B0h] BYREF
  char v18[144]; // [rsp+40h] [rbp-90h] BYREF

  v4 = (unsigned __int64)v18;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v5 = __asan_stack_malloc_1(96LL);
    if ( v5 )
      v4 = v5;
  }
  *(_QWORD *)v4 = 1102416563LL;
  *(_QWORD *)(v4 + 8) = "2 48 4 17 activity_id:20254 64 16 18 activity_ptr:20260";
  *(_QWORD *)(v4 + 16) = procQuickOpenActivity;
  v6 = (_DWORD *)(v4 >> 3);
  v6[536862720] = -235802127;
  v6[536862721] = -234556943;
  v6[536862722] = -202178560;
  if ( std::vector<std::string>::size(param_vec) <= 1 )
  {
    std::string::operator=(ret_msg, "param not enough");
    v3 = -1;
    goto LABEL_18;
  }
  v7 = std::vector<std::string>::operator[](param_vec, 0LL);
  if ( !std::operator==<char>(v7, "CLEAR") )
    goto LABEL_17;
  *(_DWORD *)(v4 + 48) = 0;
  v8 = std::vector<std::string>::operator[](param_vec, 1uLL);
  if ( common::tools::StringUtils::strToNum<unsigned int>(v8, (unsigned int *)(v4 + 48), 1) )
  {
    common::milog::MiLogStream::create(
      &v17,
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/player/gm/player_gm_comp.cpp",
      "procQuickOpenActivity",
      20257);
    v9 = common::milog::MiLogStream::operator<<<char [15],(char *[15])0>(&v17, (const char (*)[15])"invalid param:");
    v10 = std::vector<std::string>::operator[](param_vec, 1uLL);
    common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v9, v10);
    common::milog::MiLogStream::~MiLogStream(&v17);
    v3 = -1;
    goto LABEL_18;
  }
  if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
    __asan_report_load8();
  ActivityComp = (unsigned int)Player::getActivityComp(context->player);
  PlayerActivityComp::findBaseActivity((PlayerActivityComp *const)(v4 + 64), ActivityComp);
  if ( std::operator==<BaseActivity>((const std::shared_ptr<BaseActivity> *)(v4 + 64), 0LL) )
  {
    std::string::operator=(ret_msg, "activity not exists");
    v3 = -1;
    v12 = 0;
  }
  else
  {
    v13 = std::__shared_ptr_access<BaseActivity,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<BaseActivity,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 64));
    if ( !BaseActivity::isOpening(v13, 0) )
    {
      std::string::operator=(ret_msg, "activity is not opening");
      v3 = -1;
      v12 = 0;
    }
    else
    {
      v14 = std::__shared_ptr_access<BaseActivity,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<BaseActivity,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 64));
      BaseActivity::clearQuickOpenByGm(v14);
      v12 = 1;
    }
  }
  std::shared_ptr<BaseActivity>::~shared_ptr((std::shared_ptr<BaseActivity> *const)(v4 + 64));
  if ( v12 == 1 )
LABEL_17:
    v3 = 0;
LABEL_18:
  result = v3;
  if ( v18 == (char *)v4 )
  {
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0LL;
    *(_DWORD *)((v4 >> 3) + 0x7FFF8008) = 0;
  }
  else
  {
    *(_QWORD *)v4 = 1172321806LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v4 >> 3) + 0x7FFF8008) = -168430091;
  }
  return result;
};

// Line 20276: range 0000000017D7E350-0000000017D7E3F2
void __cdecl procSpiceActivityRegister::procSpiceActivityRegister(procSpiceActivityRegister *const this)
{
  std::function<int(GmContext&,const std::vector<std::string>&,std::string&)> *v1; // rax
  std::allocator<char> __a; // [rsp+1Fh] [rbp-31h] BYREF
  std::string __k; // [rsp+20h] [rbp-30h] BYREF

  std::allocator<char>::allocator(&__a);
  std::string::basic_string<std::allocator<char>>(&__k, "SPICE_ACTIVITY", &__a);
  v1 = std::unordered_map<std::string,std::function<int ()(GmContext &,std::vector<std::string> const&,std::string&)>>::operator[](
         &GmUtils::op_func_map[abi:cxx11],
         &__k);
  std::function<int ()(GmContext &,std::vector<std::string> const&,std::string&)>::operator=<int (&)(GmContext &,std::vector<std::string> const&,std::string&)>(
    v1,
    (int (*)(GmContext *, const std::vector<std::string> *, std::string *))procSpiceActivity);
  std::string::~string(&__k);
  std::allocator<char>::~allocator(&__a);
};

// Line 20277: range 0000000017C59D3A-0000000017C5A45A
int32_t __cdecl procSpiceActivity(GmContext *context, const std::vector<std::string> *param_vec, std::string *ret_msg)
{
  unsigned __int64 v3; // r13
  __int64 v4; // rax
  _DWORD *v5; // r12
  int32_t v6; // r14d
  const std::string *v7; // rax
  const std::string *v8; // rax
  const std::string *v9; // rax
  std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v10; // rax
  common::milog::MiLogStream *v11; // rax
  const unsigned int *M_current; // r14
  std::vector<unsigned int>::const_iterator v13; // rax
  common::milog::MiLogStream *v14; // rax
  common::milog::MiLogStream *v15; // rax
  common::milog::MiLogStream *v16; // rax
  std::__shared_ptr_access<SpiceActivity,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v17; // rax
  __int64 v18; // rax
  __int64 v19; // rax
  __int64 v20; // rax
  int32_t result; // eax
  __gnu_cxx::__normal_iterator<unsigned int const*,std::vector<unsigned int> > __rhs; // [rsp+20h] [rbp-2D0h] BYREF
  const data::GivingExcelConfig *giving_config_ptr; // [rsp+28h] [rbp-2C8h]
  std::shared_ptr<Config> v25; // [rsp+30h] [rbp-2C0h] BYREF
  common::milog::MiLogStream v26; // [rsp+40h] [rbp-2B0h] BYREF
  char v27[656]; // [rsp+60h] [rbp-290h] BYREF

  v3 = (unsigned __int64)v27;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_4(608LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "5 48 4 15 giving_id:20296 64 4 21 giving_group_id:20302 80 8 10 iter:20314 112 16 18 activity_pt"
                        "r:20278 144 392 8 ss:20324";
  *(_QWORD *)(v3 + 16) = procSpiceActivity;
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = -234556943;
  v5[536862722] = 61956;
  v5[536862722] = -234881024;
  v5[536862723] = 62194;
  v5[536862724] = 62194;
  v5[536862736] = -218103808;
  v5[536862737] = -202116109;
  v5[536862738] = -202116109;
  if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
    __asan_report_load8();
  Player::getActivityComp(context->player);
  PlayerActivityComp::findOpenningActivity<SpiceActivity>((PlayerActivityComp *const)(v3 + 112));
  if ( std::operator==<SpiceActivity>(0LL, (const std::shared_ptr<SpiceActivity> *)(v3 + 112)) )
  {
    std::string::operator=(ret_msg, "activity is not open");
    v6 = -1;
    goto LABEL_21;
  }
  if ( !std::vector<std::string>::size(param_vec) )
    goto LABEL_9;
  v7 = std::vector<std::string>::operator[](param_vec, 0LL);
  if ( std::operator==<char>(v7, "FINISH_GIVING") )
  {
    if ( std::vector<std::string>::size(param_vec) <= 2 )
    {
LABEL_9:
      std::string::operator=(ret_msg, "param not enough");
      v6 = -1;
      goto LABEL_21;
    }
    *(_DWORD *)(v3 + 48) = 0;
    v8 = std::vector<std::string>::operator[](param_vec, 1uLL);
    if ( common::tools::StringUtils::strToNum<unsigned int>(v8, (unsigned int *)(v3 + 48), 1)
      || (*(_DWORD *)(v3 + 64) = 0,
          v9 = std::vector<std::string>::operator[](param_vec, 2uLL),
          common::tools::StringUtils::strToNum<unsigned int>(v9, (unsigned int *)(v3 + 64), 1)) )
    {
      std::string::operator=(ret_msg, "strToNum failed");
      v6 = -1;
    }
    else
    {
      ServiceBox::findService<GameserverService>();
      GameserverService::getConfig((GameserverService *const)&v25);
      v10 = std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false> *const)&v25);
      giving_config_ptr = data::GivingExcelConfigMgrBase::findGivingExcelConfig(
                            &v10->design_config.txt_config_mgr.giving_config_mgr,
                            *(_DWORD *)(v3 + 48));
      std::shared_ptr<Config>::~shared_ptr(&v25);
      if ( giving_config_ptr )
      {
        M_current = std::vector<unsigned int>::end(&giving_config_ptr->giving_group_ids)._M_current;
        v13._M_current = std::vector<unsigned int>::begin(&giving_config_ptr->giving_group_ids)._M_current;
        *(__gnu_cxx::__normal_iterator<unsigned int const*,std::vector<unsigned int> > *)(v3 + 80) = std::find<__gnu_cxx::__normal_iterator<unsigned int const*,std::vector<unsigned int>>,unsigned int>(v13, (__gnu_cxx::__normal_iterator<unsigned int const*,std::vector<unsigned int> >)M_current, (const unsigned int *)(v3 + 64));
        __rhs._M_current = std::vector<unsigned int>::end(&giving_config_ptr->giving_group_ids)._M_current;
        if ( __gnu_cxx::operator==<unsigned int const*,std::vector<unsigned int>>(
               (const __gnu_cxx::__normal_iterator<unsigned int const*,std::vector<unsigned int> > *)(v3 + 80),
               &__rhs) )
        {
          std::string::operator=(ret_msg, "giving_group_id not belong to the giving!");
          common::milog::MiLogStream::create(
            &v26,
            &common::milog::MiLogDefault::default_log_obj_,
            3u,
            "./src/player/gm/player_gm_comp.cpp",
            "procSpiceActivity",
            20318);
          v14 = common::milog::MiLogStream::operator<<<char [53],(char *[53])0>(
                  &v26,
                  (const char (*)[53])"giving_group_id not belong to the giving! giving_id:");
          v15 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                  v14,
                  (const unsigned int *)(v3 + 48));
          v16 = common::milog::MiLogStream::operator<<<char [19],(char *[19])0>(
                  v15,
                  (const char (*)[19])", giving_group_id:");
          common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v16, (const unsigned int *)(v3 + 64));
          common::milog::MiLogStream::~MiLogStream(&v26);
          v6 = -1;
        }
        else
        {
          v17 = std::__shared_ptr_access<SpiceActivity,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<SpiceActivity,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 112));
          SpiceActivity::addHomeAvatarFetterByGM(v17, *(_DWORD *)(v3 + 48), *(_DWORD *)(v3 + 64));
          std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream(v3 + 144);
          v18 = std::operator<<<std::char_traits<char>>(v3 + 160, &off_26376CA0);
          v19 = std::ostream::operator<<(v18, *(unsigned int *)(v3 + 48));
          v20 = std::operator<<<std::char_traits<char>>(v19, ", giving_group_id:");
          std::ostream::operator<<(v20, *(unsigned int *)(v3 + 64));
          std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::str(&v26, v3 + 144);
          std::string::operator=(ret_msg, &v26);
          std::string::~string(&v26);
          v6 = 0;
          std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream(v3 + 144);
        }
      }
      else
      {
        common::milog::MiLogStream::create(
          &v26,
          &common::milog::MiLogDefault::default_log_obj_,
          3u,
          "./src/player/gm/player_gm_comp.cpp",
          "procSpiceActivity",
          20311);
        v11 = common::milog::MiLogStream::operator<<<char [39],(char *[39])0>(
                &v26,
                (const char (*)[39])"findGivingExcelConfig fail, giving_id:");
        common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v11, (const unsigned int *)(v3 + 48));
        common::milog::MiLogStream::~MiLogStream(&v26);
        v6 = -1;
      }
    }
  }
  else
  {
    v6 = 0;
  }
LABEL_21:
  std::shared_ptr<SpiceActivity>::~shared_ptr((std::shared_ptr<SpiceActivity> *const)(v3 + 112));
  result = v6;
  if ( v27 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8010) = 0;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8040) = 0LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8048) = 0;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8020) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8028) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8030) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8038) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8040) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8048) = -168430091;
  }
  return result;
};

// Line 20333: range 0000000017D7E3F4-0000000017D7E496
void __cdecl procGearActivityRegister::procGearActivityRegister(procGearActivityRegister *const this)
{
  std::function<int(GmContext&,const std::vector<std::string>&,std::string&)> *v1; // rax
  std::allocator<char> __a; // [rsp+1Fh] [rbp-31h] BYREF
  std::string __k; // [rsp+20h] [rbp-30h] BYREF

  std::allocator<char>::allocator(&__a);
  std::string::basic_string<std::allocator<char>>(&__k, "GEAR_ACTIVITY", &__a);
  v1 = std::unordered_map<std::string,std::function<int ()(GmContext &,std::vector<std::string> const&,std::string&)>>::operator[](
         &GmUtils::op_func_map[abi:cxx11],
         &__k);
  std::function<int ()(GmContext &,std::vector<std::string> const&,std::string&)>::operator=<int (&)(GmContext &,std::vector<std::string> const&,std::string&)>(
    v1,
    (int (*)(GmContext *, const std::vector<std::string> *, std::string *))procGearActivity);
  std::string::~string(&__k);
  std::allocator<char>::~allocator(&__a);
};

// Line 20334: range 0000000017C5A45B-0000000017C5ABCD
int32_t __cdecl procGearActivity(GmContext *context, const std::vector<std::string> *param_vec, std::string *ret_msg)
{
  int32_t v3; // r14d
  unsigned __int64 v4; // r13
  __int64 v5; // rax
  _DWORD *v6; // r12
  const std::string *v7; // rax
  const std::string *v8; // rax
  std::__shared_ptr_access<GearActivity,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v9; // rax
  std::__shared_ptr_access<GearActivity,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v10; // rax
  const std::string *v11; // rax
  std::__shared_ptr_access<GearActivity,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v12; // rax
  _BOOL4 v13; // r15d
  std::__shared_ptr_access<GearActivity,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v14; // rax
  int v15; // r15d
  int32_t result; // eax
  char v18[560]; // [rsp+20h] [rbp-230h] BYREF

  v4 = (unsigned __int64)v18;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v5 = __asan_stack_malloc_3(512LL);
    if ( v5 )
      v4 = v5;
  }
  *(_QWORD *)v4 = 1102416563LL;
  *(_QWORD *)(v4 + 8) = "8 48 4 14 level_id:20356 64 16 18 activity_ptr:20335 96 24 15 start_req:20385 160 24 15 start_rs"
                        "p:20386 224 24 13 end_req:20393 288 32 15 start_rsp:20364 352 32 13 end_rsp:20395 416 56 16 finish_req:20371";
  *(_QWORD *)(v4 + 16) = procGearActivity;
  v6 = (_DWORD *)(v4 >> 3);
  v6[536862720] = -235802127;
  v6[536862721] = -234556943;
  v6[536862722] = -219021312;
  v6[536862723] = -234881024;
  v6[536862724] = -218959118;
  v6[536862725] = -234881024;
  v6[536862726] = -218959118;
  v6[536862727] = -234881024;
  v6[536862728] = -218959118;
  v6[536862730] = -218959118;
  v6[536862732] = -218959118;
  v6[536862734] = -218103808;
  v6[536862735] = -202116109;
  if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
    __asan_report_load8();
  Player::getActivityComp(context->player);
  PlayerActivityComp::findOpenningActivity<GearActivity>((PlayerActivityComp *const)(v4 + 64));
  if ( std::operator==<GearActivity>(0LL, (const std::shared_ptr<GearActivity> *)(v4 + 64)) )
  {
    std::string::operator=(ret_msg, "activity is not open");
    v3 = -1;
    goto LABEL_30;
  }
  if ( !std::vector<std::string>::size(param_vec) )
    goto LABEL_9;
  v7 = std::vector<std::string>::operator[](param_vec, 0LL);
  if ( std::operator==<char>(v7, "FINISH_GEAR") )
  {
    if ( std::vector<std::string>::size(param_vec) <= 1 )
    {
LABEL_9:
      std::string::operator=(ret_msg, "param not enough");
      v3 = -1;
      goto LABEL_30;
    }
    *(_DWORD *)(v4 + 48) = 0;
    v8 = std::vector<std::string>::operator[](param_vec, 1uLL);
    if ( common::tools::StringUtils::strToNum<unsigned int>(v8, (unsigned int *)(v4 + 48), 1) )
    {
      std::string::operator=(ret_msg, "strToNum failed");
      v3 = -1;
    }
    else
    {
      proto::GearActivityStartPlayGearReq::GearActivityStartPlayGearReq((proto::GearActivityStartPlayGearReq *const)(v4 + 224));
      proto::GearActivityStartPlayGearReq::set_level_id(
        (proto::GearActivityStartPlayGearReq *const)(v4 + 224),
        *(_DWORD *)(v4 + 48));
      proto::GearActivityStartPlayGearRsp::GearActivityStartPlayGearRsp((proto::GearActivityStartPlayGearRsp *const)(v4 + 288));
      v9 = std::__shared_ptr_access<GearActivity,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<GearActivity,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 64));
      if ( GearActivity::onGearActivityStartPlayGearReq(
             v9,
             (const proto::GearActivityStartPlayGearReq *)(v4 + 224),
             (proto::GearActivityStartPlayGearRsp *)(v4 + 288)) )
      {
        std::string::operator=(ret_msg, "[GM] onGearActivityStartPlayGearReq failed");
        v3 = -1;
      }
      else
      {
        proto::GearActivityFinishPlayGearReq::GearActivityFinishPlayGearReq((proto::GearActivityFinishPlayGearReq *const)(v4 + 416));
        proto::GearActivityFinishPlayGearReq::set_level_id(
          (proto::GearActivityFinishPlayGearReq *const)(v4 + 416),
          *(_DWORD *)(v4 + 48));
        proto::GearActivityFinishPlayGearReq::set_is_success((proto::GearActivityFinishPlayGearReq *const)(v4 + 416), 1);
        proto::GearActivityFinishPlayGearRsp::GearActivityFinishPlayGearRsp((proto::GearActivityFinishPlayGearRsp *const)(v4 + 352));
        v10 = std::__shared_ptr_access<GearActivity,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<GearActivity,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 64));
        if ( GearActivity::onGearActivityFinishPlayGearReq(
               v10,
               (const proto::GearActivityFinishPlayGearReq *)(v4 + 416),
               (proto::GearActivityFinishPlayGearRsp *)(v4 + 352)) )
        {
          std::string::operator=(ret_msg, "[GM] onGearActivityFinishPlayGearReq failed");
          v3 = -1;
        }
        else
        {
          v3 = 0;
        }
        proto::GearActivityFinishPlayGearRsp::~GearActivityFinishPlayGearRsp((proto::GearActivityFinishPlayGearRsp *const)(v4 + 352));
        proto::GearActivityFinishPlayGearReq::~GearActivityFinishPlayGearReq((proto::GearActivityFinishPlayGearReq *const)(v4 + 416));
      }
      proto::GearActivityStartPlayGearRsp::~GearActivityStartPlayGearRsp((proto::GearActivityStartPlayGearRsp *const)(v4 + 288));
      proto::GearActivityStartPlayGearReq::~GearActivityStartPlayGearReq((proto::GearActivityStartPlayGearReq *const)(v4 + 224));
    }
  }
  else
  {
    v11 = std::vector<std::string>::operator[](param_vec, 0LL);
    if ( !std::operator==<char>(v11, "FINISH_PICTURE") )
      goto LABEL_29;
    proto::GearActivityStartPlayPictureReq::GearActivityStartPlayPictureReq((proto::GearActivityStartPlayPictureReq *const)(v4 + 96));
    proto::GearActivityStartPlayPictureRsp::GearActivityStartPlayPictureRsp((proto::GearActivityStartPlayPictureRsp *const)(v4 + 160));
    v12 = std::__shared_ptr_access<GearActivity,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<GearActivity,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 64));
    if ( GearActivity::onGearActivityStartPlayPictureReq(
           v12,
           (const proto::GearActivityStartPlayPictureReq *)(v4 + 96),
           (proto::GearActivityStartPlayPictureRsp *)(v4 + 160)) )
    {
      std::string::operator=(ret_msg, "[GM] onGearActivityStartPlayPictureReq failed");
      v3 = -1;
      v13 = 0;
    }
    else
    {
      proto::GearActivityFinishPlayPictureReq::GearActivityFinishPlayPictureReq((proto::GearActivityFinishPlayPictureReq *const)(v4 + 224));
      proto::GearActivityFinishPlayPictureReq::set_is_success(
        (proto::GearActivityFinishPlayPictureReq *const)(v4 + 224),
        1);
      proto::GearActivityFinishPlayPictureRsp::GearActivityFinishPlayPictureRsp((proto::GearActivityFinishPlayPictureRsp *const)(v4 + 352));
      v14 = std::__shared_ptr_access<GearActivity,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<GearActivity,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 64));
      if ( GearActivity::onGearActivityFinishPlayPictureReq(
             v14,
             (const proto::GearActivityFinishPlayPictureReq *)(v4 + 224),
             (proto::GearActivityFinishPlayPictureRsp *)(v4 + 352)) )
      {
        std::string::operator=(ret_msg, "[GM] onGearActivityFinishPlayPictureReq failed");
        v3 = -1;
        v15 = 0;
      }
      else
      {
        v15 = 1;
      }
      proto::GearActivityFinishPlayPictureRsp::~GearActivityFinishPlayPictureRsp((proto::GearActivityFinishPlayPictureRsp *const)(v4 + 352));
      proto::GearActivityFinishPlayPictureReq::~GearActivityFinishPlayPictureReq((proto::GearActivityFinishPlayPictureReq *const)(v4 + 224));
      v13 = v15 == 1;
    }
    proto::GearActivityStartPlayPictureRsp::~GearActivityStartPlayPictureRsp((proto::GearActivityStartPlayPictureRsp *const)(v4 + 160));
    proto::GearActivityStartPlayPictureReq::~GearActivityStartPlayPictureReq((proto::GearActivityStartPlayPictureReq *const)(v4 + 96));
    if ( v13 )
LABEL_29:
      v3 = 0;
  }
LABEL_30:
  std::shared_ptr<GearActivity>::~shared_ptr((std::shared_ptr<GearActivity> *const)(v4 + 64));
  result = v3;
  if ( v18 == (char *)v4 )
  {
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8008) = 0LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8010) = 0LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8018) = 0LL;
    *(_DWORD *)((v4 >> 3) + 0x7FFF8020) = 0;
    *(_DWORD *)((v4 >> 3) + 0x7FFF8028) = 0;
    *(_DWORD *)((v4 >> 3) + 0x7FFF8030) = 0;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8038) = 0LL;
  }
  else
  {
    *(_QWORD *)v4 = 1172321806LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8020) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8028) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8030) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8038) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 20406: range 0000000017D7E498-0000000017D7E53A
void __cdecl procQueryChallengeRegister::procQueryChallengeRegister(procQueryChallengeRegister *const this)
{
  std::function<int(GmContext&,const std::vector<std::string>&,std::string&)> *v1; // rax
  std::allocator<char> __a; // [rsp+1Fh] [rbp-31h] BYREF
  std::string __k; // [rsp+20h] [rbp-30h] BYREF

  std::allocator<char>::allocator(&__a);
  std::string::basic_string<std::allocator<char>>(&__k, "QUERY_CHALLENGE_STATE", &__a);
  v1 = std::unordered_map<std::string,std::function<int ()(GmContext &,std::vector<std::string> const&,std::string&)>>::operator[](
         &GmUtils::op_func_map[abi:cxx11],
         &__k);
  std::function<int ()(GmContext &,std::vector<std::string> const&,std::string&)>::operator=<int (&)(GmContext &,std::vector<std::string> const&,std::string&)>(
    v1,
    (int (*)(GmContext *, const std::vector<std::string> *, std::string *))procQueryChallenge);
  std::string::~string(&__k);
  std::allocator<char>::~allocator(&__a);
};

// Line 20407: range 0000000017C5ABCE-0000000017C5B0EB
int32_t __cdecl procQueryChallenge(GmContext *context, const std::vector<std::string> *param_vec, std::string *ret_msg)
{
  unsigned __int64 v3; // r12
  __int64 v4; // rax
  _DWORD *v5; // r13
  int32_t v6; // r14d
  const std::string *v7; // rax
  const std::string *v8; // rax
  const std::string *v9; // rax
  Scene *v10; // rax
  uint32_t BlockGroupComp; // eax
  Group *v12; // rax
  ChallengeComp *ChallengeComp; // rax
  const std::string *v14; // rax
  const std::string *v15; // rax
  Scene *v16; // rax
  int32_t result; // eax
  char v19[176]; // [rsp+20h] [rbp-B0h] BYREF

  v3 = (unsigned __int64)v19;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_1(128LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "4 32 4 14 group_id:20426 48 4 18 challenge_id:20461 64 16 15 scene_ptr:20413 96 16 15 group_ptr:20438";
  *(_QWORD *)(v3 + 16) = procQueryChallenge;
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = -234556924;
  v5[536862722] = -219021312;
  v5[536862723] = -202178560;
  if ( std::vector<std::string>::size(param_vec) )
  {
    if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
      __asan_report_load8();
    Player::getSceneComp(context->player);
    PlayerSceneComp::getCurScene((const PlayerSceneComp *const)(v3 + 64));
    if ( std::operator==<Scene>(0LL, (const std::shared_ptr<Scene> *)(v3 + 64)) )
    {
      std::string::operator=(ret_msg, off_26366CE0);
      v6 = -1;
    }
    else
    {
      v7 = std::vector<std::string>::operator[](param_vec, 0LL);
      if ( std::operator==<char>(v7, "IN_GROUP") )
      {
        if ( std::vector<std::string>::size(param_vec) > 2 )
        {
          *(_DWORD *)(v3 + 32) = 0;
          v8 = std::vector<std::string>::operator[](param_vec, 1uLL);
          if ( common::tools::StringUtils::strToNum<unsigned int>(v8, (unsigned int *)(v3 + 32), 1) )
          {
            std::string::operator=(ret_msg, "group_id strToNum failed");
            v6 = -1;
          }
          else
          {
            *(_DWORD *)(v3 + 48) = 0;
            v9 = std::vector<std::string>::operator[](param_vec, 2uLL);
            if ( common::tools::StringUtils::strToNum<unsigned int>(v9, (unsigned int *)(v3 + 48), 1) )
            {
              std::string::operator=(ret_msg, "challenge_index strToNum failed");
              v6 = -1;
            }
            else
            {
              v10 = std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 64));
              BlockGroupComp = (unsigned int)Scene::getBlockGroupComp(v10);
              SceneBlockGroupComp::getActiveGroup((SceneBlockGroupComp *const)(v3 + 96), BlockGroupComp);
              if ( std::operator==<Group>(0LL, (const std::shared_ptr<Group> *)(v3 + 96)) )
              {
                std::string::operator=(ret_msg, "cannot find active group_id");
                v6 = -1;
              }
              else
              {
                v12 = std::__shared_ptr_access<Group,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Group,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 96));
                ChallengeComp = Group::getChallengeComp(v12);
                if ( ChallengeComp::isChallengeOnGoing(ChallengeComp, *(_DWORD *)(v3 + 48)) )
                  std::string::operator=(ret_msg, "YES, certain challenge is ongoing in this group!");
                else
                  std::string::operator=(ret_msg, "NO challenge is ongoing in this group!");
                v6 = 0;
              }
              std::shared_ptr<Group>::~shared_ptr((std::shared_ptr<Group> *const)(v3 + 96));
            }
          }
        }
        else
        {
          std::string::operator=(ret_msg, "QUERY_CHALLENGE_STATE IN_GROUP group_id challenge_index");
          v6 = -1;
        }
      }
      else
      {
        v14 = std::vector<std::string>::operator[](param_vec, 0LL);
        if ( std::operator==<char>(v14, "IN_SCENE") )
        {
          if ( std::vector<std::string>::size(param_vec) > 1 )
          {
            *(_DWORD *)(v3 + 48) = 0;
            v15 = std::vector<std::string>::operator[](param_vec, 1uLL);
            if ( common::tools::StringUtils::strToNum<unsigned int>(v15, (unsigned int *)(v3 + 48), 1) )
            {
              std::string::operator=(ret_msg, "challenge_id strToNum failed");
              v6 = -1;
            }
            else
            {
              v16 = std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 64));
              if ( Scene::isChallengeOnGoingByChallengeId(v16, *(_DWORD *)(v3 + 48)) )
                std::string::operator=(ret_msg, "YES, certain challenge is ongoing in current Scene!");
              else
                std::string::operator=(ret_msg, "NO challenge is ongoing in current Scene!");
              v6 = 0;
            }
          }
          else
          {
            std::string::operator=(ret_msg, "QUERY_CHALLENGE_STATE IN_SCENE challenge_id");
            v6 = -1;
          }
        }
        else
        {
          std::string::operator=(ret_msg, "QUERY_CHALLENGE_STATE IN_GROUP/IN_SCENE params");
          v6 = -1;
        }
      }
    }
    std::shared_ptr<Scene>::~shared_ptr((std::shared_ptr<Scene> *const)(v3 + 64));
  }
  else
  {
    std::string::operator=(ret_msg, "param not enough");
    v6 = -1;
  }
  result = v6;
  if ( v19 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 20485: range 0000000017D7E53C-0000000017D7E5DE
void __cdecl procGachaActivityRegister::procGachaActivityRegister(procGachaActivityRegister *const this)
{
  std::function<int(GmContext&,const std::vector<std::string>&,std::string&)> *v1; // rax
  std::allocator<char> __a; // [rsp+1Fh] [rbp-31h] BYREF
  std::string __k; // [rsp+20h] [rbp-30h] BYREF

  std::allocator<char>::allocator(&__a);
  std::string::basic_string<std::allocator<char>>(&__k, "GACHA_ACTIVITY", &__a);
  v1 = std::unordered_map<std::string,std::function<int ()(GmContext &,std::vector<std::string> const&,std::string&)>>::operator[](
         &GmUtils::op_func_map[abi:cxx11],
         &__k);
  std::function<int ()(GmContext &,std::vector<std::string> const&,std::string&)>::operator=<int (&)(GmContext &,std::vector<std::string> const&,std::string&)>(
    v1,
    (int (*)(GmContext *, const std::vector<std::string> *, std::string *))procGachaActivity);
  std::string::~string(&__k);
  std::allocator<char>::~allocator(&__a);
};

// Line 20486: range 0000000017C5B0EC-0000000017C5BDD1
int32_t __cdecl procGachaActivity(GmContext *context, const std::vector<std::string> *param_vec, std::string *ret_msg)
{
  unsigned __int64 v3; // r13
  __int64 v4; // rax
  _DWORD *v5; // r12
  int32_t v6; // r14d
  const std::string *v7; // rax
  const std::string *v8; // rax
  std::__shared_ptr_access<GachaActivity,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v9; // rax
  __int64 v10; // rax
  const std::string *v11; // rax
  const std::string *v12; // rax
  std::__shared_ptr_access<GachaActivity,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v13; // rax
  __int64 v14; // rax
  const std::string *v15; // rax
  const std::string *v16; // rax
  std::__shared_ptr_access<GachaActivity,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v17; // rax
  __int64 v18; // rax
  const std::string *v19; // rax
  const std::string *v20; // rax
  std::__shared_ptr_access<GachaActivity,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v21; // rax
  std::__shared_ptr_access<GachaActivity,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v22; // rax
  __int64 v23; // rax
  const std::string *v24; // rax
  const std::string *v25; // rax
  std::__shared_ptr_access<GachaActivity,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v26; // rax
  const std::string *v27; // rax
  const std::string *v28; // rax
  const std::string *v29; // rax
  std::__shared_ptr_access<GachaActivity,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v30; // rax
  const std::string *v31; // rax
  const std::string *v32; // rax
  std::__shared_ptr_access<GachaActivity,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v33; // rax
  int32_t result; // eax
  char v36[32]; // [rsp+30h] [rbp-310h] BYREF
  char v37[32]; // [rsp+50h] [rbp-2F0h] BYREF
  char v38[32]; // [rsp+70h] [rbp-2D0h] BYREF
  char v39[32]; // [rsp+90h] [rbp-2B0h] BYREF
  std::string v40; // [rsp+B0h] [rbp-290h] BYREF
  char v41[624]; // [rsp+D0h] [rbp-270h] BYREF

  v3 = (unsigned __int64)v41;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_4(576LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "4 48 4 15 sub_stage:20609 64 4 17 robot_limit:20635 80 16 18 activity_ptr:20487 112 392 8 ss:20581";
  *(_QWORD *)(v3 + 16) = procGachaActivity;
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = -234556943;
  v5[536862722] = 61956;
  v5[536862723] = 62194;
  v5[536862735] = -218103808;
  v5[536862736] = -202116109;
  v5[536862737] = -202116109;
  if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
    __asan_report_load8();
  Player::getActivityComp(context->player);
  PlayerActivityComp::findOpenningActivity<GachaActivity>((PlayerActivityComp *const)(v3 + 80));
  if ( std::operator==<GachaActivity>(0LL, (const std::shared_ptr<GachaActivity> *)(v3 + 80)) )
  {
    std::string::operator=(ret_msg, "activity is not open");
    v6 = -1;
    goto LABEL_52;
  }
  if ( !std::vector<std::string>::size(param_vec) )
    goto LABEL_47;
  v7 = std::vector<std::string>::operator[](param_vec, 0LL);
  if ( std::operator==<char>(v7, "STAGE") )
  {
    if ( std::vector<std::string>::size(param_vec) > 1 )
    {
      *(_DWORD *)(v3 + 64) = 0;
      v8 = std::vector<std::string>::operator[](param_vec, 1uLL);
      if ( !common::tools::StringUtils::strToNum<unsigned int>(v8, (unsigned int *)(v3 + 64), 1) )
      {
        v9 = std::__shared_ptr_access<GachaActivity,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<GachaActivity,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 80));
        GachaActivity::setStageIdByGM(v9, *(_DWORD *)(v3 + 64));
        std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream(v3 + 112);
        v10 = std::operator<<<std::char_traits<char>>(v3 + 128, &off_263775A0);
        std::ostream::operator<<(v10, *(unsigned int *)(v3 + 64));
        std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::str(v36, v3 + 112);
        std::string::operator=(ret_msg, v36);
        std::string::~string(v36);
        v6 = 0;
        std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream(v3 + 112);
        goto LABEL_52;
      }
      goto LABEL_49;
    }
LABEL_47:
    std::string::operator=(ret_msg, "param not enough");
    v6 = -1;
    goto LABEL_52;
  }
  v11 = std::vector<std::string>::operator[](param_vec, 0LL);
  if ( std::operator==<char>(v11, "SUB_STAGE") )
  {
    if ( std::vector<std::string>::size(param_vec) > 1 )
    {
      *(_DWORD *)(v3 + 64) = 0;
      v12 = std::vector<std::string>::operator[](param_vec, 1uLL);
      if ( !common::tools::StringUtils::strToNum<unsigned int>(v12, (unsigned int *)(v3 + 64), 1) )
      {
        v13 = std::__shared_ptr_access<GachaActivity,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<GachaActivity,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 80));
        GachaActivity::setSubStageIdByGM(v13, *(_DWORD *)(v3 + 64));
        std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream(v3 + 112);
        v14 = std::operator<<<std::char_traits<char>>(v3 + 128, &off_263775A0);
        std::ostream::operator<<(v14, *(unsigned int *)(v3 + 64));
        std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::str(v37, v3 + 112);
        std::string::operator=(ret_msg, v37);
        std::string::~string(v37);
        v6 = 0;
        std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream(v3 + 112);
        goto LABEL_52;
      }
      goto LABEL_49;
    }
    goto LABEL_47;
  }
  v15 = std::vector<std::string>::operator[](param_vec, 0LL);
  if ( std::operator==<char>(v15, "SCALE") )
  {
    if ( std::vector<std::string>::size(param_vec) > 1 )
    {
      *(_DWORD *)(v3 + 64) = 0;
      v16 = std::vector<std::string>::operator[](param_vec, 1uLL);
      if ( !common::tools::StringUtils::strToNum<unsigned int>(v16, (unsigned int *)(v3 + 64), 1) )
      {
        v17 = std::__shared_ptr_access<GachaActivity,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<GachaActivity,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 80));
        GachaActivity::setScaleByGM(v17, *(_DWORD *)(v3 + 64));
        std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream(v3 + 112);
        v18 = std::operator<<<std::char_traits<char>>(v3 + 128, &off_26377660);
        std::ostream::operator<<(v18, *(unsigned int *)(v3 + 64));
        std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::str(v38, v3 + 112);
        std::string::operator=(ret_msg, v38);
        std::string::~string(v38);
        v6 = 0;
        std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream(v3 + 112);
        goto LABEL_52;
      }
      goto LABEL_49;
    }
    goto LABEL_47;
  }
  v19 = std::vector<std::string>::operator[](param_vec, 0LL);
  if ( std::operator==<char>(v19, "CREATE_ROBOT") )
  {
    *(_DWORD *)(v3 + 64) = 0;
    if ( std::vector<std::string>::size(param_vec) == 2 )
    {
      v20 = std::vector<std::string>::operator[](param_vec, 1uLL);
      if ( common::tools::StringUtils::strToNum<unsigned int>(v20, (unsigned int *)(v3 + 64), 1) )
        goto LABEL_49;
      v21 = std::__shared_ptr_access<GachaActivity,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<GachaActivity,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 80));
      if ( GachaActivity::createRobotByGm(v21, *(_DWORD *)(v3 + 64)) )
      {
LABEL_29:
        std::string::operator=(ret_msg, "create robot failed");
        v6 = -1;
        goto LABEL_52;
      }
    }
    else
    {
      v22 = std::__shared_ptr_access<GachaActivity,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<GachaActivity,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 80));
      if ( GachaActivity::calcWeightAndProduct(v22, (uint32_t *)(v3 + 64)) )
        goto LABEL_29;
    }
    std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream(v3 + 112);
    v23 = std::operator<<<std::char_traits<char>>(v3 + 128, "create robot succ! robot_id:");
    std::ostream::operator<<(v23, *(unsigned int *)(v3 + 64));
    std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::str(v39, v3 + 112);
    std::string::operator=(ret_msg, v39);
    std::string::~string(v39);
    v6 = 0;
    std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream(v3 + 112);
    goto LABEL_52;
  }
  v24 = std::vector<std::string>::operator[](param_vec, 0LL);
  if ( std::operator==<char>(v24, "RANDOM_ROBOT") )
  {
    if ( std::vector<std::string>::size(param_vec) > 1 )
    {
      *(_DWORD *)(v3 + 64) = 0;
      v25 = std::vector<std::string>::operator[](param_vec, 1uLL);
      if ( !common::tools::StringUtils::strToNum<unsigned int>(v25, (unsigned int *)(v3 + 64), 1) )
      {
        v26 = std::__shared_ptr_access<GachaActivity,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<GachaActivity,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 80));
        GachaActivity::randRobotByGm[abi:cxx11](&v40, v26, *(_DWORD *)(v3 + 64));
        std::string::operator=(ret_msg, &v40);
        std::string::~string(&v40);
        v6 = 0;
        goto LABEL_52;
      }
      goto LABEL_49;
    }
    goto LABEL_47;
  }
  v27 = std::vector<std::string>::operator[](param_vec, 0LL);
  if ( std::operator==<char>(v27, "UPDATE") )
  {
    if ( std::vector<std::string>::size(param_vec) <= 2 )
      goto LABEL_47;
    *(_DWORD *)(v3 + 48) = 0;
    v28 = std::vector<std::string>::operator[](param_vec, 1uLL);
    if ( !common::tools::StringUtils::strToNum<unsigned int>(v28, (unsigned int *)(v3 + 48), 1) )
    {
      *(_DWORD *)(v3 + 64) = 0;
      v29 = std::vector<std::string>::operator[](param_vec, 2uLL);
      if ( !common::tools::StringUtils::strToNum<unsigned int>(v29, (unsigned int *)(v3 + 64), 1) )
      {
        v30 = std::__shared_ptr_access<GachaActivity,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<GachaActivity,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 80));
        if ( GachaActivity::checkAndUpdate(v30, *(_DWORD *)(v3 + 64), *(data::ActivityGachaTargetType *)(v3 + 48)) )
        {
          std::string::operator=(ret_msg, "fail");
          v6 = -1;
        }
        else
        {
          v6 = 0;
        }
        goto LABEL_52;
      }
    }
    goto LABEL_49;
  }
  v31 = std::vector<std::string>::operator[](param_vec, 0LL);
  if ( std::operator==<char>(v31, "ROBOT_LIMIT") )
  {
    if ( std::vector<std::string>::size(param_vec) <= 1 )
      goto LABEL_47;
    *(_DWORD *)(v3 + 64) = 0;
    v32 = std::vector<std::string>::operator[](param_vec, 1uLL);
    if ( common::tools::StringUtils::strToNum<unsigned int>(v32, (unsigned int *)(v3 + 64), 1) )
    {
LABEL_49:
      std::string::operator=(ret_msg, "strToNum failed");
      v6 = -1;
      goto LABEL_52;
    }
    v33 = std::__shared_ptr_access<GachaActivity,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<GachaActivity,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 80));
    GachaActivity::setRobotLimitByGM(v33, *(_DWORD *)(v3 + 64));
    v6 = 0;
  }
  else
  {
    v6 = 0;
  }
LABEL_52:
  std::shared_ptr<GachaActivity>::~shared_ptr((std::shared_ptr<GachaActivity> *const)(v3 + 80));
  result = v6;
  if ( v41 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF803C) = 0LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8044) = 0;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8020) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8028) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8030) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8038) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8040) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 20647: range 0000000017D7E5E0-0000000017D7E682
void __cdecl procLuminanceStoneActivityRegister::procLuminanceStoneActivityRegister(
        procLuminanceStoneActivityRegister *const this)
{
  std::function<int(GmContext&,const std::vector<std::string>&,std::string&)> *v1; // rax
  std::allocator<char> __a; // [rsp+1Fh] [rbp-31h] BYREF
  std::string __k; // [rsp+20h] [rbp-30h] BYREF

  std::allocator<char>::allocator(&__a);
  std::string::basic_string<std::allocator<char>>(&__k, "LUMINANCE", &__a);
  v1 = std::unordered_map<std::string,std::function<int ()(GmContext &,std::vector<std::string> const&,std::string&)>>::operator[](
         &GmUtils::op_func_map[abi:cxx11],
         &__k);
  std::function<int ()(GmContext &,std::vector<std::string> const&,std::string&)>::operator=<int (&)(GmContext &,std::vector<std::string> const&,std::string&)>(
    v1,
    (int (*)(GmContext *, const std::vector<std::string> *, std::string *))procLuminanceStoneActivity);
  std::string::~string(&__k);
  std::allocator<char>::~allocator(&__a);
};

// Line 20648: range 0000000017C5BDD2-0000000017C5C544
int32_t __cdecl procLuminanceStoneActivity(
        GmContext *context,
        const std::vector<std::string> *param_vec,
        std::string *ret_msg)
{
  unsigned __int64 v3; // r13
  __int64 v4; // rax
  _DWORD *v5; // r12
  int32_t v6; // r14d
  std::__shared_ptr_access<LuminanceStoneChallengeActivity,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v7; // rax
  std::__shared_ptr_access<LuminanceStoneChallengeActivity,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v8; // rax
  const std::string *v9; // rax
  const std::string *v10; // rax
  std::__shared_ptr_access<LuminanceStoneChallengeActivity,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v11; // rax
  __int64 v12; // rax
  const std::string *v13; // rax
  const std::string *v14; // rax
  const std::string *v15; // rax
  std::__shared_ptr_access<LuminanceStoneChallengeActivity,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v16; // rax
  __int64 v17; // rax
  int32_t result; // eax
  bool is_complete; // [rsp+2Fh] [rbp-291h]
  char v21[32]; // [rsp+30h] [rbp-290h] BYREF
  common::milog::MiLogStream v22; // [rsp+50h] [rbp-270h] BYREF
  char v23[592]; // [rsp+70h] [rbp-250h] BYREF

  v3 = (unsigned __int64)v23;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_4(544LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "3 32 4 14 stage_id:20677 48 16 18 activity_ptr:20654 80 392 8 ss:20715";
  *(_QWORD *)(v3 + 16) = procLuminanceStoneActivity;
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = 61956;
  v5[536862722] = 62194;
  v5[536862734] = -218103808;
  v5[536862735] = -202116109;
  v5[536862736] = -202116109;
  if ( std::vector<std::string>::empty(param_vec) )
  {
    common::milog::MiLogStream::create(
      &v22,
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/player/gm/player_gm_comp.cpp",
      "procLuminanceStoneActivity",
      20651);
    common::milog::MiLogStream::operator<<<char [17],(char *[17])0>(&v22, "param not enough");
    common::milog::MiLogStream::~MiLogStream(&v22);
    v6 = -1;
    goto LABEL_32;
  }
  if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
    __asan_report_load8();
  Player::getActivityComp(context->player);
  PlayerActivityComp::findOpenningActivity<LuminanceStoneChallengeActivity>((PlayerActivityComp *const)(v3 + 48));
  if ( std::operator==<LuminanceStoneChallengeActivity>(
         0LL,
         (const std::shared_ptr<LuminanceStoneChallengeActivity> *)(v3 + 48)) )
  {
    std::string::operator=(ret_msg, "activity is not open");
    v6 = -1;
  }
  else
  {
    v7 = std::__shared_ptr_access<LuminanceStoneChallengeActivity,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<LuminanceStoneChallengeActivity,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 48));
    if ( !BaseActivity::isOpening((const BaseActivity *const)v7, 0) )
    {
      common::milog::MiLogStream::create(
        &v22,
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/player/gm/player_gm_comp.cpp",
        "procLuminanceStoneActivity",
        20662);
      common::milog::MiLogStream::operator<<<char [39],(char *[39])0>(
        &v22,
        (const char (*)[39])"LuminanceStoneChallengeActivity close!");
      common::milog::MiLogStream::~MiLogStream(&v22);
      v6 = -1;
    }
    else
    {
      v8 = std::__shared_ptr_access<LuminanceStoneChallengeActivity,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<LuminanceStoneChallengeActivity,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 48));
      if ( BaseActivity::isSettled((const BaseActivity *const)v8) )
      {
        common::milog::MiLogStream::create(
          &v22,
          &common::milog::MiLogDefault::default_log_obj_,
          3u,
          "./src/player/gm/player_gm_comp.cpp",
          "procLuminanceStoneActivity",
          20667);
        common::milog::MiLogStream::operator<<<char [41],(char *[41])0>(
          &v22,
          (const char (*)[41])"LuminanceStoneChallengeActivity settled!");
        common::milog::MiLogStream::~MiLogStream(&v22);
        v6 = -1;
      }
      else
      {
        v9 = std::vector<std::string>::operator[](param_vec, 0LL);
        if ( std::operator==<char>(v9, "SET_STAGE") )
        {
          if ( std::vector<std::string>::size(param_vec) > 1 )
          {
            *(_DWORD *)(v3 + 32) = 0;
            v10 = std::vector<std::string>::operator[](param_vec, 1uLL);
            if ( common::tools::StringUtils::strToNum<unsigned int>(v10, (unsigned int *)(v3 + 32), 1) )
            {
              std::string::operator=(ret_msg, "strToNum failed");
              v6 = -1;
            }
            else
            {
              v11 = std::__shared_ptr_access<LuminanceStoneChallengeActivity,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<LuminanceStoneChallengeActivity,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 48));
              if ( LuminanceStoneChallengeActivity::setStageByGm(v11, *(_DWORD *)(v3 + 32)) )
              {
                std::string::operator=(ret_msg, &off_26377A00);
                v6 = -1;
              }
              else
              {
                std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream(v3 + 80);
                v12 = std::operator<<<std::char_traits<char>>(v3 + 96, &off_263775A0);
                std::ostream::operator<<(v12, *(unsigned int *)(v3 + 32));
                std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::str(v21, v3 + 80);
                std::string::operator=(ret_msg, v21);
                std::string::~string(v21);
                v6 = 0;
                std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream(v3 + 80);
              }
            }
            goto LABEL_31;
          }
        }
        else
        {
          v13 = std::vector<std::string>::operator[](param_vec, 0LL);
          if ( !std::operator==<char>(v13, "SET_FINAL_GALLERY") )
          {
            v6 = 0;
            goto LABEL_31;
          }
          if ( std::vector<std::string>::size(param_vec) > 1 )
          {
            v14 = std::vector<std::string>::operator[](param_vec, 1uLL);
            if ( std::operator==<char>(v14, "TRUE") )
            {
              is_complete = 1;
            }
            else
            {
              v15 = std::vector<std::string>::operator[](param_vec, 1uLL);
              if ( !std::operator==<char>(v15, "FALSE") )
              {
                std::string::operator=(ret_msg, "LUMINANCE SET_FINAL_GALLERY TRUE or FALSE");
                v6 = -1;
                goto LABEL_31;
              }
              is_complete = 0;
            }
            v16 = std::__shared_ptr_access<LuminanceStoneChallengeActivity,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<LuminanceStoneChallengeActivity,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 48));
            LuminanceStoneChallengeActivity::setFinalGalleryCompletebyGm(v16, is_complete);
            std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream(v3 + 80);
            v17 = std::operator<<<std::char_traits<char>>(v3 + 96, "SET_FINAL_GALLERY succ! current state: ");
            std::ostream::operator<<(v17, is_complete);
            std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::str(&v22, v3 + 80);
            std::string::operator=(ret_msg, &v22);
            std::string::~string(&v22);
            v6 = 0;
            std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream(v3 + 80);
            goto LABEL_31;
          }
        }
        std::string::operator=(ret_msg, "param not enough");
        v6 = -1;
      }
    }
  }
LABEL_31:
  std::shared_ptr<LuminanceStoneChallengeActivity>::~shared_ptr((std::shared_ptr<LuminanceStoneChallengeActivity> *const)(v3 + 48));
LABEL_32:
  result = v6;
  if ( v23 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8008) = 0;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8038) = 0LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8040) = 0;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8020) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8028) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8030) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8038) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8040) = -168430091;
  }
  return result;
};

// Line 20723: range 0000000017D7E684-0000000017D7E726
void __cdecl procResetQuestionnaireRecordsRegister::procResetQuestionnaireRecordsRegister(
        procResetQuestionnaireRecordsRegister *const this)
{
  std::function<int(GmContext&,const std::vector<std::string>&,std::string&)> *v1; // rax
  std::allocator<char> __a; // [rsp+1Fh] [rbp-31h] BYREF
  std::string __k; // [rsp+20h] [rbp-30h] BYREF

  std::allocator<char>::allocator(&__a);
  std::string::basic_string<std::allocator<char>>(&__k, "QUESTIONNAIRE", &__a);
  v1 = std::unordered_map<std::string,std::function<int ()(GmContext &,std::vector<std::string> const&,std::string&)>>::operator[](
         &GmUtils::op_func_map[abi:cxx11],
         &__k);
  std::function<int ()(GmContext &,std::vector<std::string> const&,std::string&)>::operator=<int (&)(GmContext &,std::vector<std::string> const&,std::string&)>(
    v1,
    (int (*)(GmContext *, const std::vector<std::string> *, std::string *))procResetQuestionnaireRecords);
  std::string::~string(&__k);
  std::allocator<char>::~allocator(&__a);
};

// Line 20724: range 0000000017C5C545-0000000017C5C763
int32_t __cdecl procResetQuestionnaireRecords(
        GmContext *context,
        const std::vector<std::string> *param_vec,
        std::string *ret_msg)
{
  const std::string *v4; // rax
  PlayerLoginComp *LoginComp; // rax
  const std::string *v6; // rax
  PlayerBasicComp *BasicComp; // rax
  PlayerLoginComp *v8; // rax
  uint32_t last_logout_time; // [rsp+2Ch] [rbp-34h]
  common::milog::MiLogStream v11; // [rsp+30h] [rbp-30h] BYREF

  if ( std::vector<std::string>::empty(param_vec) )
  {
    common::milog::MiLogStream::create(
      &v11,
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/player/gm/player_gm_comp.cpp",
      "procResetQuestionnaireRecords",
      20727);
    common::milog::MiLogStream::operator<<<char [17],(char *[17])0>(&v11, "param not enough");
    common::milog::MiLogStream::~MiLogStream(&v11);
    std::string::operator=(ret_msg, "QUESTIONNAIRE [CLEAR/SEND]");
    return -1;
  }
  else
  {
    if ( std::vector<std::string>::size(param_vec) )
    {
      v4 = std::vector<std::string>::operator[](param_vec, 0LL);
      if ( std::operator==<char>(v4, "CLEAR") )
      {
        if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
          __asan_report_load8();
        LoginComp = Player::getLoginComp(context->player);
        PlayerLoginComp::clearRecvQuestionnaireMailHistoryByGM(LoginComp);
        std::string::operator=(ret_msg, "clear succ...");
      }
      else
      {
        v6 = std::vector<std::string>::operator[](param_vec, 0LL);
        if ( std::operator==<char>(v6, "SEND") )
        {
          last_logout_time = common::tools::TimeUtils::getNow() - 31536000;
          if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
            __asan_report_load8();
          BasicComp = Player::getBasicComp(context->player);
          PlayerBasicComp::SetLastLogoutTimeByGm(BasicComp, last_logout_time);
          if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
            __asan_report_load8();
          v8 = Player::getLoginComp(context->player);
          PlayerLoginComp::refreshQuestionnaireMail(v8, 0);
          std::string::operator=(ret_msg, "send succ...");
        }
      }
    }
    return 0;
  }
};

// Line 20752: range 0000000017D7E728-0000000017D7E7CA
void __cdecl procSummerTimeV2ActivityRegister::procSummerTimeV2ActivityRegister(
        procSummerTimeV2ActivityRegister *const this)
{
  std::function<int(GmContext&,const std::vector<std::string>&,std::string&)> *v1; // rax
  std::allocator<char> __a; // [rsp+1Fh] [rbp-31h] BYREF
  std::string __k; // [rsp+20h] [rbp-30h] BYREF

  std::allocator<char>::allocator(&__a);
  std::string::basic_string<std::allocator<char>>(&__k, "SUMMERV2", &__a);
  v1 = std::unordered_map<std::string,std::function<int ()(GmContext &,std::vector<std::string> const&,std::string&)>>::operator[](
         &GmUtils::op_func_map[abi:cxx11],
         &__k);
  std::function<int ()(GmContext &,std::vector<std::string> const&,std::string&)>::operator=<int (&)(GmContext &,std::vector<std::string> const&,std::string&)>(
    v1,
    (int (*)(GmContext *, const std::vector<std::string> *, std::string *))procSummerTimeV2Activity);
  std::string::~string(&__k);
  std::allocator<char>::~allocator(&__a);
};

// Line 20753: range 0000000017C5C764-0000000017C5DA09
int32_t __cdecl procSummerTimeV2Activity(
        GmContext *context,
        const std::vector<std::string> *param_vec,
        std::string *ret_msg)
{
  unsigned __int64 v3; // r14
  __int64 v4; // rax
  _DWORD *v5; // r12
  int32_t v6; // r13d
  std::__shared_ptr_access<SummerTimeV2Activity,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v7; // rax
  std::__shared_ptr_access<SummerTimeV2Activity,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v8; // rax
  const std::string *v9; // rax
  const std::string *v10; // rax
  SummerTimeV2Activity *v11; // rax
  __int64 v12; // rax
  const std::string *v13; // rax
  const std::string *v14; // rax
  SummerTimeV2Activity *v15; // rax
  __int64 v16; // rax
  const std::string *v17; // rax
  const std::string *v18; // rax
  SummerTimeV2Activity *v19; // rax
  __int64 v20; // rax
  const std::string *v21; // rax
  const std::string *v22; // rax
  SummerTimeV2Activity *v23; // rax
  __int64 v24; // rax
  const std::string *v25; // rax
  const std::string *v26; // rax
  SummerTimeV2Activity *v27; // rax
  __int64 v28; // rax
  const std::string *v29; // rax
  const std::string *v30; // rax
  SummerTimeV2Activity *v31; // rax
  __int64 v32; // rax
  const std::string *v33; // rax
  const std::string *v34; // rax
  SummerTimeV2Activity *v35; // rax
  __int64 v36; // rax
  const std::string *v37; // rax
  const std::string *v38; // rax
  Scene *v39; // rax
  SceneGalleryComp *GalleryComp; // rax
  const std::string *v41; // rax
  SummerTimeV2Activity *v42; // rax
  int32_t result; // eax
  char v45[32]; // [rsp+20h] [rbp-370h] BYREF
  char v46[32]; // [rsp+40h] [rbp-350h] BYREF
  char v47[32]; // [rsp+60h] [rbp-330h] BYREF
  char v48[32]; // [rsp+80h] [rbp-310h] BYREF
  char v49[32]; // [rsp+A0h] [rbp-2F0h] BYREF
  char v50[32]; // [rsp+C0h] [rbp-2D0h] BYREF
  char v51[32]; // [rsp+E0h] [rbp-2B0h] BYREF
  common::milog::MiLogStream v52; // [rsp+100h] [rbp-290h] BYREF
  char v53[624]; // [rsp+120h] [rbp-270h] BYREF

  v3 = (unsigned __int64)v53;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_4(576LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "4 32 4 16 gallery_id:20945 48 16 18 activity_ptr:20759 80 16 15 scene_ptr:20939 112 392 8 ss:20956";
  *(_QWORD *)(v3 + 16) = procSummerTimeV2Activity;
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = 61956;
  v5[536862722] = 62194;
  v5[536862723] = 62194;
  v5[536862735] = -218103808;
  v5[536862736] = -202116109;
  v5[536862737] = -202116109;
  if ( std::vector<std::string>::empty(param_vec) )
  {
    common::milog::MiLogStream::create(
      &v52,
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/player/gm/player_gm_comp.cpp",
      "procSummerTimeV2Activity",
      20756);
    common::milog::MiLogStream::operator<<<char [17],(char *[17])0>(&v52, "param not enough");
    common::milog::MiLogStream::~MiLogStream(&v52);
    v6 = -1;
    goto LABEL_76;
  }
  if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
    __asan_report_load8();
  Player::getActivityComp(context->player);
  PlayerActivityComp::findOpenningActivity<SummerTimeV2Activity>((PlayerActivityComp *const)(v3 + 48));
  if ( !std::operator==<SummerTimeV2Activity>(0LL, (const std::shared_ptr<SummerTimeV2Activity> *)(v3 + 48)) )
  {
    v7 = std::__shared_ptr_access<SummerTimeV2Activity,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<SummerTimeV2Activity,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 48));
    if ( !BaseActivity::isOpening(v7, 0) )
    {
      common::milog::MiLogStream::create(
        &v52,
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/player/gm/player_gm_comp.cpp",
        "procSummerTimeV2Activity",
        20767);
      common::milog::MiLogStream::operator<<<char [28],(char *[28])0>(
        &v52,
        (const char (*)[28])"SummerTimeV2Activity close!");
      common::milog::MiLogStream::~MiLogStream(&v52);
      v6 = -1;
      goto LABEL_75;
    }
    v8 = std::__shared_ptr_access<SummerTimeV2Activity,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<SummerTimeV2Activity,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 48));
    if ( BaseActivity::isSettled(v8) )
    {
      common::milog::MiLogStream::create(
        &v52,
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/player/gm/player_gm_comp.cpp",
        "procSummerTimeV2Activity",
        20772);
      common::milog::MiLogStream::operator<<<char [30],(char *[30])0>(
        &v52,
        (const char (*)[30])"SummerTimeV2Activity settled!");
      common::milog::MiLogStream::~MiLogStream(&v52);
      v6 = -1;
      goto LABEL_75;
    }
    v9 = std::vector<std::string>::operator[](param_vec, 0LL);
    if ( std::operator==<char>(v9, "OPEN_DUNGEON_STAGE") )
    {
      if ( std::vector<std::string>::size(param_vec) <= 1 )
        goto LABEL_63;
      *(_DWORD *)(v3 + 32) = 0;
      v10 = std::vector<std::string>::operator[](param_vec, 1uLL);
      if ( !common::tools::StringUtils::strToNum<unsigned int>(v10, (unsigned int *)(v3 + 32), 1) )
      {
        v11 = std::__shared_ptr_access<SummerTimeV2Activity,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<SummerTimeV2Activity,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 48));
        if ( SummerTimeV2Activity::openActivityDungeonStageByGm(v11, *(_DWORD *)(v3 + 32)) )
        {
          std::string::operator=(ret_msg, "OPEN_DUNGEON_STAGE failed");
          v6 = -1;
        }
        else
        {
          std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream(v3 + 112);
          v12 = std::operator<<<std::char_traits<char>>(v3 + 128, "OPEN_DUNGEON_STAGE succ! stage_id:");
          std::ostream::operator<<(v12, *(unsigned int *)(v3 + 32));
          std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::str(v45, v3 + 112);
          std::string::operator=(ret_msg, v45);
          std::string::~string(v45);
          v6 = 0;
          std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream(v3 + 112);
        }
        goto LABEL_75;
      }
    }
    else
    {
      v13 = std::vector<std::string>::operator[](param_vec, 0LL);
      if ( std::operator==<char>(v13, "CLOSE_DUNGEON_STAGE") )
      {
        if ( std::vector<std::string>::size(param_vec) <= 1 )
          goto LABEL_63;
        *(_DWORD *)(v3 + 32) = 0;
        v14 = std::vector<std::string>::operator[](param_vec, 1uLL);
        if ( !common::tools::StringUtils::strToNum<unsigned int>(v14, (unsigned int *)(v3 + 32), 1) )
        {
          v15 = std::__shared_ptr_access<SummerTimeV2Activity,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<SummerTimeV2Activity,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 48));
          if ( (unsigned int)SummerTimeV2Activity::closeActivityDungeonStageByGm(v15, *(_DWORD *)(v3 + 32)) )
          {
            std::string::operator=(ret_msg, "CLOSE_DUNGEON_STAGE failed");
            v6 = -1;
          }
          else
          {
            std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream(v3 + 112);
            v16 = std::operator<<<std::char_traits<char>>(v3 + 128, "CLOSE_DUNGEON_STAGE succ! stage_id:");
            std::ostream::operator<<(v16, *(unsigned int *)(v3 + 32));
            std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::str(v46, v3 + 112);
            std::string::operator=(ret_msg, v46);
            std::string::~string(v46);
            v6 = 0;
            std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream(v3 + 112);
          }
          goto LABEL_75;
        }
      }
      else
      {
        v17 = std::vector<std::string>::operator[](param_vec, 0LL);
        if ( std::operator==<char>(v17, "CLEAR_DUNGEON_STAGE") )
        {
          if ( std::vector<std::string>::size(param_vec) <= 1 )
            goto LABEL_63;
          *(_DWORD *)(v3 + 32) = 0;
          v18 = std::vector<std::string>::operator[](param_vec, 1uLL);
          if ( !common::tools::StringUtils::strToNum<unsigned int>(v18, (unsigned int *)(v3 + 32), 1) )
          {
            v19 = std::__shared_ptr_access<SummerTimeV2Activity,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<SummerTimeV2Activity,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 48));
            if ( (unsigned int)SummerTimeV2Activity::clearActivityDungeonStageByGm(v19, *(_DWORD *)(v3 + 32)) )
            {
              std::string::operator=(ret_msg, "CLEAR_DUNGEON_STAGE failed");
              v6 = -1;
            }
            else
            {
              std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream(v3 + 112);
              v20 = std::operator<<<std::char_traits<char>>(v3 + 128, "CLEAR_DUNGEON_STAGE succ! stage_id:");
              std::ostream::operator<<(v20, *(unsigned int *)(v3 + 32));
              std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::str(v47, v3 + 112);
              std::string::operator=(ret_msg, v47);
              std::string::~string(v47);
              v6 = 0;
              std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream(v3 + 112);
            }
            goto LABEL_75;
          }
        }
        else
        {
          v21 = std::vector<std::string>::operator[](param_vec, 0LL);
          if ( std::operator==<char>(v21, "OPEN_BOAT_STAGE") )
          {
            if ( std::vector<std::string>::size(param_vec) <= 1 )
              goto LABEL_63;
            *(_DWORD *)(v3 + 32) = 0;
            v22 = std::vector<std::string>::operator[](param_vec, 1uLL);
            if ( !common::tools::StringUtils::strToNum<unsigned int>(v22, (unsigned int *)(v3 + 32), 1) )
            {
              v23 = std::__shared_ptr_access<SummerTimeV2Activity,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<SummerTimeV2Activity,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 48));
              if ( SummerTimeV2Activity::openActivityBoatStageByGm(v23, *(_DWORD *)(v3 + 32)) )
              {
                std::string::operator=(ret_msg, "OPEN_BOAT_STAGE failed");
                v6 = -1;
              }
              else
              {
                std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream(v3 + 112);
                v24 = std::operator<<<std::char_traits<char>>(v3 + 128, "OPEN_BOAT_STAGE succ! stage_id:");
                std::ostream::operator<<(v24, *(unsigned int *)(v3 + 32));
                std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::str(v48, v3 + 112);
                std::string::operator=(ret_msg, v48);
                std::string::~string(v48);
                v6 = 0;
                std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream(v3 + 112);
              }
              goto LABEL_75;
            }
          }
          else
          {
            v25 = std::vector<std::string>::operator[](param_vec, 0LL);
            if ( std::operator==<char>(v25, "CLOSE_BOAT_STAGE") )
            {
              if ( std::vector<std::string>::size(param_vec) <= 1 )
                goto LABEL_63;
              *(_DWORD *)(v3 + 32) = 0;
              v26 = std::vector<std::string>::operator[](param_vec, 1uLL);
              if ( !common::tools::StringUtils::strToNum<unsigned int>(v26, (unsigned int *)(v3 + 32), 1) )
              {
                v27 = std::__shared_ptr_access<SummerTimeV2Activity,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<SummerTimeV2Activity,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 48));
                if ( (unsigned int)SummerTimeV2Activity::closeActivityBoatStageByGm(v27, *(_DWORD *)(v3 + 32)) )
                {
                  std::string::operator=(ret_msg, "CLOSE_BOAT_STAGE failed");
                  v6 = -1;
                }
                else
                {
                  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream(v3 + 112);
                  v28 = std::operator<<<std::char_traits<char>>(v3 + 128, "CLOSE_BOAT_STAGE succ! stage_id:");
                  std::ostream::operator<<(v28, *(unsigned int *)(v3 + 32));
                  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::str(v49, v3 + 112);
                  std::string::operator=(ret_msg, v49);
                  std::string::~string(v49);
                  v6 = 0;
                  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream(v3 + 112);
                }
                goto LABEL_75;
              }
            }
            else
            {
              v29 = std::vector<std::string>::operator[](param_vec, 0LL);
              if ( std::operator==<char>(v29, "CLEAR_BOAT_STAGE") )
              {
                if ( std::vector<std::string>::size(param_vec) <= 1 )
                  goto LABEL_63;
                *(_DWORD *)(v3 + 32) = 0;
                v30 = std::vector<std::string>::operator[](param_vec, 1uLL);
                if ( !common::tools::StringUtils::strToNum<unsigned int>(v30, (unsigned int *)(v3 + 32), 1) )
                {
                  v31 = std::__shared_ptr_access<SummerTimeV2Activity,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<SummerTimeV2Activity,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 48));
                  if ( (unsigned int)SummerTimeV2Activity::clearActivityBoatStageByGm(v31, *(_DWORD *)(v3 + 32)) )
                  {
                    std::string::operator=(ret_msg, "CLEAR_BOAT_STAGE failed");
                    v6 = -1;
                  }
                  else
                  {
                    std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream(v3 + 112);
                    v32 = std::operator<<<std::char_traits<char>>(v3 + 128, "CLEAR_BOAT_STAGE succ! stage_id:");
                    std::ostream::operator<<(v32, *(unsigned int *)(v3 + 32));
                    std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::str(v50, v3 + 112);
                    std::string::operator=(ret_msg, v50);
                    std::string::~string(v50);
                    v6 = 0;
                    std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream(v3 + 112);
                  }
                  goto LABEL_75;
                }
              }
              else
              {
                v33 = std::vector<std::string>::operator[](param_vec, 0LL);
                if ( !std::operator==<char>(v33, "SET_REWARD_COUNT") )
                {
                  v37 = std::vector<std::string>::operator[](param_vec, 0LL);
                  if ( !std::operator==<char>(v37, "STOP_GALLERY_SUCC") )
                  {
                    v41 = std::vector<std::string>::operator[](param_vec, 0LL);
                    if ( std::operator==<char>(v41, "RESET") )
                    {
                      v42 = std::__shared_ptr_access<SummerTimeV2Activity,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<SummerTimeV2Activity,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 48));
                      SummerTimeV2Activity::resetActivityDataByGm(v42);
                      std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream(v3 + 112);
                      std::operator<<<std::char_traits<char>>(v3 + 128, "RESET all data succ!");
                      std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::str(&v52, v3 + 112);
                      std::string::operator=(ret_msg, &v52);
                      std::string::~string(&v52);
                      v6 = 0;
                      std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream(v3 + 112);
                    }
                    else
                    {
                      v6 = 0;
                    }
                    goto LABEL_75;
                  }
                  if ( std::vector<std::string>::size(param_vec) > 1 )
                  {
                    if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
                      __asan_report_load8();
                    Player::getSceneComp(context->player);
                    PlayerSceneComp::getCurScene((const PlayerSceneComp *const)(v3 + 80));
                    if ( std::operator==<Scene>((const std::shared_ptr<Scene> *)(v3 + 80), 0LL) )
                    {
                      std::string::operator=(ret_msg, "scene_ptr is null");
                      v6 = -1;
                    }
                    else
                    {
                      *(_DWORD *)(v3 + 32) = 0;
                      v38 = std::vector<std::string>::operator[](param_vec, 1uLL);
                      if ( common::tools::StringUtils::strToNum<unsigned int>(v38, (unsigned int *)(v3 + 32), 1) )
                      {
                        std::string::operator=(ret_msg, "strToNum failed");
                        v6 = -1;
                      }
                      else
                      {
                        v39 = std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 80));
                        GalleryComp = Scene::getGalleryComp(v39);
                        v6 = SceneGalleryComp::forceStopAndClearGallery(
                               GalleryComp,
                               *(_DWORD *)(v3 + 32),
                               1,
                               GALLERY_STOP_LUA_INTERRUPT_SUCCESS);
                      }
                    }
                    std::shared_ptr<Scene>::~shared_ptr((std::shared_ptr<Scene> *const)(v3 + 80));
                    goto LABEL_75;
                  }
                  goto LABEL_63;
                }
                if ( std::vector<std::string>::size(param_vec) <= 1 )
                {
LABEL_63:
                  std::string::operator=(ret_msg, "param not enough");
                  v6 = -1;
                  goto LABEL_75;
                }
                *(_DWORD *)(v3 + 32) = 0;
                v34 = std::vector<std::string>::operator[](param_vec, 1uLL);
                if ( !common::tools::StringUtils::strToNum<unsigned int>(v34, (unsigned int *)(v3 + 32), 1) )
                {
                  v35 = std::__shared_ptr_access<SummerTimeV2Activity,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<SummerTimeV2Activity,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 48));
                  SummerTimeV2Activity::setActivityTakenDungeonRewardCountByGm(v35, *(_DWORD *)(v3 + 32));
                  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream(v3 + 112);
                  v36 = std::operator<<<std::char_traits<char>>(v3 + 128, "SET_REWARD_COUNT succ! reward_count:");
                  std::ostream::operator<<(v36, *(unsigned int *)(v3 + 32));
                  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::str(v51, v3 + 112);
                  std::string::operator=(ret_msg, v51);
                  std::string::~string(v51);
                  v6 = 0;
                  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream(v3 + 112);
                  goto LABEL_75;
                }
              }
            }
          }
        }
      }
    }
    std::string::operator=(ret_msg, "strToNum failed");
    v6 = -1;
    goto LABEL_75;
  }
  std::string::operator=(ret_msg, "activity is not open");
  v6 = -1;
LABEL_75:
  std::shared_ptr<SummerTimeV2Activity>::~shared_ptr((std::shared_ptr<SummerTimeV2Activity> *const)(v3 + 48));
LABEL_76:
  result = v6;
  if ( v53 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF803C) = 0LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8044) = 0;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8020) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8028) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8030) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8038) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8040) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 20964: range 0000000017D7E7CC-0000000017D7E86E
void __cdecl procDeathZoneRegister::procDeathZoneRegister(procDeathZoneRegister *const this)
{
  std::function<int(GmContext&,const std::vector<std::string>&,std::string&)> *v1; // rax
  std::allocator<char> __a; // [rsp+1Fh] [rbp-31h] BYREF
  std::string __k; // [rsp+20h] [rbp-30h] BYREF

  std::allocator<char>::allocator(&__a);
  std::string::basic_string<std::allocator<char>>(&__k, "DEATH_ZONE", &__a);
  v1 = std::unordered_map<std::string,std::function<int ()(GmContext &,std::vector<std::string> const&,std::string&)>>::operator[](
         &GmUtils::op_func_map[abi:cxx11],
         &__k);
  std::function<int ()(GmContext &,std::vector<std::string> const&,std::string&)>::operator=<int (&)(GmContext &,std::vector<std::string> const&,std::string&)>(
    v1,
    (int (*)(GmContext *, const std::vector<std::string> *, std::string *))procDeathZone);
  std::string::~string(&__k);
  std::allocator<char>::~allocator(&__a);
};

// Line 20965: range 0000000017C5DA0A-0000000017C5E219
int32_t __cdecl procDeathZone(GmContext *context, const std::vector<std::string> *param_vec, std::string *ret_msg)
{
  unsigned __int64 v3; // r12
  __int64 v4; // rax
  _DWORD *v5; // r13
  int32_t v6; // r14d
  const std::string *v7; // rax
  const std::string *v8; // rax
  common::milog::MiLogStream *v9; // rbx
  const std::string *v10; // rax
  const std::string *v11; // rax
  common::milog::MiLogStream *v12; // rbx
  const std::string *v13; // rax
  uint32_t v14; // r14d
  const std::string *v15; // rax
  const std::string *v16; // rax
  common::milog::MiLogStream *v17; // rbx
  const std::string *v18; // rax
  std::__shared_ptr_access<DeathZoneRegionalPlay,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v19; // rax
  int32_t result; // eax
  PlayerRegionalPlayComp *RegionalPlayComp; // [rsp+10h] [rbp-100h]
  bool is_stop; // [rsp+36h] [rbp-DAh]
  bool is_open; // [rsp+37h] [rbp-D9h]
  Player *player; // [rsp+38h] [rbp-D8h]
  common::milog::MiLogStream v25; // [rsp+40h] [rbp-D0h] BYREF
  char v26[176]; // [rsp+60h] [rbp-B0h] BYREF

  v3 = (unsigned __int64)v26;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_1(128LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "4 32 4 19 death_zone_id:20978 48 4 15 stop_flag:21002 64 16 19 cur_scene_ptr:20992 96 16 25 deat"
                        "h_zone_play_ptr:21010";
  *(_QWORD *)(v3 + 16) = procDeathZone;
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = -234556924;
  v5[536862722] = -219021312;
  v5[536862723] = -202178560;
  if ( std::vector<std::string>::empty(param_vec) )
  {
    common::milog::MiLogStream::create(
      &v25,
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/player/gm/player_gm_comp.cpp",
      "procDeathZone",
      20968);
    common::milog::MiLogStream::operator<<<char [17],(char *[17])0>(&v25, "param not enough");
    common::milog::MiLogStream::~MiLogStream(&v25);
    v6 = -1;
  }
  else
  {
    v7 = std::vector<std::string>::operator[](param_vec, 0LL);
    if ( std::operator==<char>(v7, "SET_OPEN") )
    {
      if ( std::vector<std::string>::size(param_vec) > 2 )
      {
        *(_DWORD *)(v3 + 32) = 0;
        *(_DWORD *)(v3 + 48) = 0;
        v8 = std::vector<std::string>::operator[](param_vec, 1uLL);
        if ( common::tools::StringUtils::strToNum<unsigned int>(v8, (unsigned int *)(v3 + 32), 1) )
        {
          common::milog::MiLogStream::create(
            &v25,
            &common::milog::MiLogDefault::default_log_obj_,
            3u,
            "./src/player/gm/player_gm_comp.cpp",
            "procDeathZone",
            20982);
          v9 = common::milog::MiLogStream::operator<<<char [21],(char *[21])0>(
                 &v25,
                 (const char (*)[21])"strToNum key failed:");
          v10 = std::vector<std::string>::operator[](param_vec, 1uLL);
          common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v9, v10);
          common::milog::MiLogStream::~MiLogStream(&v25);
          v6 = -1;
        }
        else
        {
          v11 = std::vector<std::string>::operator[](param_vec, 2uLL);
          if ( common::tools::StringUtils::strToNum<unsigned int>(v11, (unsigned int *)(v3 + 48), 1) )
          {
            common::milog::MiLogStream::create(
              &v25,
              &common::milog::MiLogDefault::default_log_obj_,
              3u,
              "./src/player/gm/player_gm_comp.cpp",
              "procDeathZone",
              20987);
            v12 = common::milog::MiLogStream::operator<<<char [23],(char *[23])0>(
                    &v25,
                    (const char (*)[23])"strToNum value failed:");
            v13 = std::vector<std::string>::operator[](param_vec, 2uLL);
            common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v12, v13);
            common::milog::MiLogStream::~MiLogStream(&v25);
            v6 = -1;
          }
          else
          {
            is_open = *(_DWORD *)(v3 + 48) != 0;
            if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
              __asan_report_load8();
            player = context->player;
            Player::getSceneComp(player);
            PlayerSceneComp::getCurScene((const PlayerSceneComp *const)(v3 + 64));
            RegionalPlayComp = Player::getRegionalPlayComp(player);
            v14 = *(_DWORD *)(v3 + 32);
            std::shared_ptr<Scene>::shared_ptr(
              (std::shared_ptr<Scene> *const)(v3 + 96),
              (const std::shared_ptr<Scene> *)(v3 + 64));
            v6 = PlayerRegionalPlayComp::setDeathZoneSwitch(RegionalPlayComp, (ScenePtr *)(v3 + 96), v14, is_open);
            std::shared_ptr<Scene>::~shared_ptr((std::shared_ptr<Scene> *const)(v3 + 96));
            std::shared_ptr<Scene>::~shared_ptr((std::shared_ptr<Scene> *const)(v3 + 64));
          }
        }
      }
      else
      {
        common::milog::MiLogStream::create(
          &v25,
          &common::milog::MiLogDefault::default_log_obj_,
          3u,
          "./src/player/gm/player_gm_comp.cpp",
          "procDeathZone",
          20975);
        common::milog::MiLogStream::operator<<<char [37],(char *[37])0>(
          &v25,
          (const char (*)[37])"DEATH_ZONE SET_OPEN not enough param");
        common::milog::MiLogStream::~MiLogStream(&v25);
        v6 = -1;
      }
    }
    else
    {
      v15 = std::vector<std::string>::operator[](param_vec, 0LL);
      if ( std::operator==<char>(v15, "SET_STOP_ADD_EROSION") )
      {
        if ( std::vector<std::string>::size(param_vec) > 1 )
        {
          *(_DWORD *)(v3 + 48) = 0;
          v16 = std::vector<std::string>::operator[](param_vec, 1uLL);
          if ( common::tools::StringUtils::strToNum<unsigned int>(v16, (unsigned int *)(v3 + 48), 1) )
          {
            common::milog::MiLogStream::create(
              &v25,
              &common::milog::MiLogDefault::default_log_obj_,
              3u,
              "./src/player/gm/player_gm_comp.cpp",
              "procDeathZone",
              21005);
            v17 = common::milog::MiLogStream::operator<<<char [21],(char *[21])0>(
                    &v25,
                    (const char (*)[21])"strToNum key failed:");
            v18 = std::vector<std::string>::operator[](param_vec, 1uLL);
            common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v17, v18);
            common::milog::MiLogStream::~MiLogStream(&v25);
            v6 = -1;
          }
          else
          {
            is_stop = *(_DWORD *)(v3 + 48) != 0;
            if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
              __asan_report_load8();
            Player::getRegionalPlayComp(context->player);
            PlayerRegionalPlayComp::findRegionalPlay<DeathZoneRegionalPlay>((PlayerRegionalPlayComp *const)(v3 + 96));
            if ( std::operator==<DeathZoneRegionalPlay>((const std::shared_ptr<DeathZoneRegionalPlay> *)(v3 + 96), 0LL) )
            {
              common::milog::MiLogStream::create(
                &v25,
                &common::milog::MiLogDefault::default_log_obj_,
                3u,
                "./src/player/gm/player_gm_comp.cpp",
                "procDeathZone",
                21013);
              common::milog::MiLogStream::operator<<<char [32],(char *[32])0>(
                &v25,
                (const char (*)[32])"find DeathZoneRegionalPlay fail");
              common::milog::MiLogStream::~MiLogStream(&v25);
              v6 = -1;
            }
            else
            {
              v19 = std::__shared_ptr_access<DeathZoneRegionalPlay,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<DeathZoneRegionalPlay,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 96));
              DeathZoneRegionalPlay::setStopAddExtraErosion(v19, is_stop);
              v6 = 0;
            }
            std::shared_ptr<DeathZoneRegionalPlay>::~shared_ptr((std::shared_ptr<DeathZoneRegionalPlay> *const)(v3 + 96));
          }
        }
        else
        {
          common::milog::MiLogStream::create(
            &v25,
            &common::milog::MiLogDefault::default_log_obj_,
            3u,
            "./src/player/gm/player_gm_comp.cpp",
            "procDeathZone",
            20999);
          common::milog::MiLogStream::operator<<<char [44],(char *[44])0>(
            &v25,
            (const char (*)[44])"DEATH_ZONE SET_STOP_UPDATE not enough param");
          common::milog::MiLogStream::~MiLogStream(&v25);
          v6 = -1;
        }
      }
      else
      {
        v6 = 0;
      }
    }
  }
  result = v6;
  if ( v26 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 21022: range 0000000017D7E870-0000000017D7E912
void __cdecl procAranaraCollectionRegister::procAranaraCollectionRegister(procAranaraCollectionRegister *const this)
{
  std::function<int(GmContext&,const std::vector<std::string>&,std::string&)> *v1; // rax
  std::allocator<char> __a; // [rsp+1Fh] [rbp-31h] BYREF
  std::string __k; // [rsp+20h] [rbp-30h] BYREF

  std::allocator<char>::allocator(&__a);
  std::string::basic_string<std::allocator<char>>(&__k, "COLLECTION", &__a);
  v1 = std::unordered_map<std::string,std::function<int ()(GmContext &,std::vector<std::string> const&,std::string&)>>::operator[](
         &GmUtils::op_func_map[abi:cxx11],
         &__k);
  std::function<int ()(GmContext &,std::vector<std::string> const&,std::string&)>::operator=<int (&)(GmContext &,std::vector<std::string> const&,std::string&)>(
    v1,
    (int (*)(GmContext *, const std::vector<std::string> *, std::string *))procAranaraCollection);
  std::string::~string(&__k);
  std::allocator<char>::~allocator(&__a);
};

// Line 21023: range 0000000017C5E21A-0000000017C5E761
int32_t __cdecl procAranaraCollection(
        GmContext *context,
        const std::vector<std::string> *param_vec,
        std::string *ret_msg)
{
  unsigned __int64 v3; // rbx
  __int64 v4; // rax
  _DWORD *v5; // r13
  int32_t result; // eax
  const std::string *v7; // rax
  const std::string *v8; // rax
  common::milog::MiLogStream *v9; // r12
  const std::string *v10; // rax
  const std::string *v11; // rax
  common::milog::MiLogStream *v12; // r12
  const std::string *v13; // rax
  const std::string *v14; // rax
  common::milog::MiLogStream *v15; // r12
  const std::string *v16; // rax
  PlayerAranaraCollectionComp *AranaraCollectionComp; // rax
  Player *player; // [rsp+28h] [rbp-A8h]
  common::milog::MiLogStream v19; // [rsp+30h] [rbp-A0h] BYREF
  char v20[128]; // [rsp+50h] [rbp-80h] BYREF

  v3 = (unsigned __int64)v20;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_1(96LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "3 32 4 21 collection_type:21037 48 4 19 collection_id:21038 64 4 22 collection_state:21039";
  *(_QWORD *)(v3 + 16) = procAranaraCollection;
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = -234556924;
  v5[536862722] = -202116348;
  if ( std::vector<std::string>::empty(param_vec) )
  {
    common::milog::MiLogStream::create(
      &v19,
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/player/gm/player_gm_comp.cpp",
      "procAranaraCollection",
      21026);
    common::milog::MiLogStream::operator<<<char [17],(char *[17])0>(&v19, "param not enough");
    common::milog::MiLogStream::~MiLogStream(&v19);
    result = -1;
  }
  else
  {
    if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
      __asan_report_load8();
    player = context->player;
    v7 = std::vector<std::string>::operator[](param_vec, 0LL);
    if ( std::operator==<char>(v7, "STATE") )
    {
      if ( std::vector<std::string>::size(param_vec) > 3 )
      {
        *(_DWORD *)(v3 + 32) = 0;
        *(_DWORD *)(v3 + 48) = 0;
        *(_DWORD *)(v3 + 64) = 0;
        v8 = std::vector<std::string>::operator[](param_vec, 1uLL);
        if ( common::tools::StringUtils::strToNum<unsigned int>(v8, (unsigned int *)(v3 + 32), 1) )
        {
          common::milog::MiLogStream::create(
            &v19,
            &common::milog::MiLogDefault::default_log_obj_,
            3u,
            "./src/player/gm/player_gm_comp.cpp",
            "procAranaraCollection",
            21042);
          v9 = common::milog::MiLogStream::operator<<<char [33],(char *[33])0>(
                 &v19,
                 (const char (*)[33])"strToNum collection_type failed:");
          v10 = std::vector<std::string>::operator[](param_vec, 1uLL);
          common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v9, v10);
          common::milog::MiLogStream::~MiLogStream(&v19);
          result = -1;
        }
        else
        {
          v11 = std::vector<std::string>::operator[](param_vec, 2uLL);
          if ( common::tools::StringUtils::strToNum<unsigned int>(v11, (unsigned int *)(v3 + 48), 1) )
          {
            common::milog::MiLogStream::create(
              &v19,
              &common::milog::MiLogDefault::default_log_obj_,
              3u,
              "./src/player/gm/player_gm_comp.cpp",
              "procAranaraCollection",
              21047);
            v12 = common::milog::MiLogStream::operator<<<char [31],(char *[31])0>(
                    &v19,
                    (const char (*)[31])"strToNum collection_id failed:");
            v13 = std::vector<std::string>::operator[](param_vec, 2uLL);
            common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v12, v13);
            common::milog::MiLogStream::~MiLogStream(&v19);
            result = -1;
          }
          else
          {
            v14 = std::vector<std::string>::operator[](param_vec, 3uLL);
            if ( common::tools::StringUtils::strToNum<unsigned int>(v14, (unsigned int *)(v3 + 64), 1) )
            {
              common::milog::MiLogStream::create(
                &v19,
                &common::milog::MiLogDefault::default_log_obj_,
                3u,
                "./src/player/gm/player_gm_comp.cpp",
                "procAranaraCollection",
                21052);
              v15 = common::milog::MiLogStream::operator<<<char [34],(char *[34])0>(
                      &v19,
                      (const char (*)[34])"strToNum collection_state failed:");
              v16 = std::vector<std::string>::operator[](param_vec, 3uLL);
              common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v15, v16);
              common::milog::MiLogStream::~MiLogStream(&v19);
              result = -1;
            }
            else
            {
              AranaraCollectionComp = Player::getAranaraCollectionComp(player);
              result = PlayerAranaraCollectionComp::modifyCollectionState(
                         AranaraCollectionComp,
                         *(_DWORD *)(v3 + 32),
                         *(_DWORD *)(v3 + 48),
                         *(_DWORD *)(v3 + 64));
            }
          }
        }
      }
      else
      {
        common::milog::MiLogStream::create(
          &v19,
          &common::milog::MiLogDefault::default_log_obj_,
          3u,
          "./src/player/gm/player_gm_comp.cpp",
          "procAranaraCollection",
          21034);
        common::milog::MiLogStream::operator<<<char [34],(char *[34])0>(
          &v19,
          (const char (*)[34])"COLLECTION STATE not enough param");
        common::milog::MiLogStream::~MiLogStream(&v19);
        result = -1;
      }
    }
    else
    {
      result = 0;
    }
  }
  if ( v20 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8008) = 0;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8008) = -168430091;
  }
  return result;
};

// Line 21060: range 0000000017D7E914-0000000017D7E9B6
void __cdecl procIslandPartyActivityRegister::procIslandPartyActivityRegister(
        procIslandPartyActivityRegister *const this)
{
  std::function<int(GmContext&,const std::vector<std::string>&,std::string&)> *v1; // rax
  std::allocator<char> __a; // [rsp+1Fh] [rbp-31h] BYREF
  std::string __k; // [rsp+20h] [rbp-30h] BYREF

  std::allocator<char>::allocator(&__a);
  std::string::basic_string<std::allocator<char>>(&__k, "ISLAND_PARTY", &__a);
  v1 = std::unordered_map<std::string,std::function<int ()(GmContext &,std::vector<std::string> const&,std::string&)>>::operator[](
         &GmUtils::op_func_map[abi:cxx11],
         &__k);
  std::function<int ()(GmContext &,std::vector<std::string> const&,std::string&)>::operator=<int (&)(GmContext &,std::vector<std::string> const&,std::string&)>(
    v1,
    (int (*)(GmContext *, const std::vector<std::string> *, std::string *))procIslandPartyActivity);
  std::string::~string(&__k);
  std::allocator<char>::~allocator(&__a);
};

// Line 21061: range 0000000017C5E762-0000000017C5EA6A
int32_t __cdecl procIslandPartyActivity(
        GmContext *context,
        const std::vector<std::string> *param_vec,
        std::string *ret_msg)
{
  unsigned __int64 v3; // rbx
  __int64 v4; // rax
  _DWORD *v5; // r13
  int32_t v6; // r14d
  const std::string *v7; // rax
  const std::string *v8; // rax
  std::__shared_ptr_access<IslandPartyActivity,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v9; // rax
  const std::string *v10; // rax
  std::__shared_ptr_access<IslandPartyActivity,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v11; // rax
  int32_t result; // eax
  char v14[144]; // [rsp+20h] [rbp-90h] BYREF

  v3 = (unsigned __int64)v14;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_1(96LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "2 48 4 14 stage_id:21074 64 16 18 activity_ptr:21062";
  *(_QWORD *)(v3 + 16) = procIslandPartyActivity;
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = -234556943;
  v5[536862722] = -202178560;
  if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
    __asan_report_load8();
  Player::getActivityComp(context->player);
  PlayerActivityComp::findOpenningActivity<IslandPartyActivity>((PlayerActivityComp *const)(v3 + 64));
  if ( std::operator==<IslandPartyActivity>((const std::shared_ptr<IslandPartyActivity> *)(v3 + 64), 0LL) )
  {
    std::string::operator=(ret_msg, "activity is not open");
    v6 = -1;
    goto LABEL_19;
  }
  if ( !std::vector<std::string>::size(param_vec) )
    goto LABEL_16;
  v7 = std::vector<std::string>::operator[](param_vec, 0LL);
  if ( std::operator==<char>(v7, "STAGE") )
  {
    if ( std::vector<std::string>::size(param_vec) > 1 )
    {
      *(_DWORD *)(v3 + 48) = 0;
      v8 = std::vector<std::string>::operator[](param_vec, 1uLL);
      if ( common::tools::StringUtils::strToNum<unsigned int>(v8, (unsigned int *)(v3 + 48), 1) )
      {
        std::string::operator=(ret_msg, "strToNum failed");
        v6 = -1;
        goto LABEL_19;
      }
      v9 = std::__shared_ptr_access<IslandPartyActivity,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<IslandPartyActivity,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 64));
      IslandPartyActivity::openStageByGm(v9, *(_DWORD *)(v3 + 48));
    }
    goto LABEL_18;
  }
  v10 = std::vector<std::string>::operator[](param_vec, 0LL);
  if ( !std::operator==<char>(v10, "CLEAR") )
  {
LABEL_16:
    std::string::operator=(ret_msg, "invalid params");
    v6 = -1;
    goto LABEL_19;
  }
  v11 = std::__shared_ptr_access<IslandPartyActivity,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<IslandPartyActivity,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 64));
  IslandPartyActivity::clearByGm(v11);
LABEL_18:
  v6 = 0;
LABEL_19:
  std::shared_ptr<IslandPartyActivity>::~shared_ptr((std::shared_ptr<IslandPartyActivity> *const)(v3 + 64));
  result = v6;
  if ( v14 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8008) = 0;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8008) = -168430091;
  }
  return result;
};

// Line 21102: range 0000000017D7E9B8-0000000017D7EA5A
void __cdecl procChallengeRegister::procChallengeRegister(procChallengeRegister *const this)
{
  std::function<int(GmContext&,const std::vector<std::string>&,std::string&)> *v1; // rax
  std::allocator<char> __a; // [rsp+1Fh] [rbp-31h] BYREF
  std::string __k; // [rsp+20h] [rbp-30h] BYREF

  std::allocator<char>::allocator(&__a);
  std::string::basic_string<std::allocator<char>>(&__k, "CHALLENGE", &__a);
  v1 = std::unordered_map<std::string,std::function<int ()(GmContext &,std::vector<std::string> const&,std::string&)>>::operator[](
         &GmUtils::op_func_map[abi:cxx11],
         &__k);
  std::function<int ()(GmContext &,std::vector<std::string> const&,std::string&)>::operator=<int (&)(GmContext &,std::vector<std::string> const&,std::string&)>(
    v1,
    (int (*)(GmContext *, const std::vector<std::string> *, std::string *))procChallenge);
  std::string::~string(&__k);
  std::allocator<char>::~allocator(&__a);
};

// Line 21103: range 0000000017C5EA6B-0000000017C5F13C
int32_t __cdecl procChallenge(GmContext *context, const std::vector<std::string> *param_vec, std::string *ret_msg)
{
  unsigned __int64 v3; // r13
  __int64 v4; // rax
  _DWORD *v5; // r12
  int32_t v6; // r14d
  const std::string *v7; // rax
  common::milog::MiLogStream *v8; // rax
  const std::string *v9; // rax
  common::milog::MiLogStream *v10; // rax
  const std::string *v11; // rax
  common::milog::MiLogStream *v12; // rax
  const std::string *v13; // rax
  common::milog::MiLogStream *v14; // rax
  Group *v15; // rax
  uint32_t ChallengeComp; // eax
  Challenge *v17; // rax
  int32_t result; // eax
  common::milog::MiLogStream v20; // [rsp+20h] [rbp-F0h] BYREF
  char v21[208]; // [rsp+40h] [rbp-D0h] BYREF

  v3 = (unsigned __int64)v21;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_2(160LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "5 48 4 14 group_id:21119 64 4 21 challenge_index:21126 80 4 14 duration:21133 96 16 15 group_ptr"
                        ":21140 128 16 19 challenge_ptr:21146";
  *(_QWORD *)(v3 + 16) = procChallenge;
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = -234556943;
  v5[536862722] = -234556924;
  v5[536862723] = -219021312;
  v5[536862724] = -202178560;
  if ( std::vector<std::string>::empty(param_vec) )
  {
    common::milog::MiLogStream::create(
      &v20,
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/player/gm/player_gm_comp.cpp",
      "procChallenge",
      21106);
    common::milog::MiLogStream::operator<<<char [17],(char *[17])0>(&v20, "param not enough");
    common::milog::MiLogStream::~MiLogStream(&v20);
    v6 = -1;
  }
  else if ( std::vector<std::string>::size(param_vec)
         && (v7 = std::vector<std::string>::operator[](param_vec, 0LL), std::operator==<char>(v7, "SET_DURATION")) )
  {
    if ( std::vector<std::string>::size(param_vec) > 3 )
    {
      *(_DWORD *)(v3 + 48) = 0;
      v9 = std::vector<std::string>::operator[](param_vec, 1uLL);
      if ( common::tools::StringUtils::strToNum<unsigned int>(v9, (unsigned int *)(v3 + 48), 1) )
      {
        common::milog::MiLogStream::create(
          &v20,
          &common::milog::MiLogDefault::default_log_obj_,
          3u,
          "./src/player/gm/player_gm_comp.cpp",
          "procChallenge",
          21122);
        v10 = common::milog::MiLogStream::operator<<<std::string>(&v20, param_vec);
        common::milog::MiLogStream::operator<<<char [34],(char *[34])0>(
          v10,
          (const char (*)[34])" parse group_id failed of param 1");
        common::milog::MiLogStream::~MiLogStream(&v20);
        std::string::operator=(ret_msg, "invalid group_id");
        v6 = -1;
      }
      else
      {
        *(_DWORD *)(v3 + 64) = 0;
        v11 = std::vector<std::string>::operator[](param_vec, 2uLL);
        if ( common::tools::StringUtils::strToNum<unsigned int>(v11, (unsigned int *)(v3 + 64), 1) )
        {
          common::milog::MiLogStream::create(
            &v20,
            &common::milog::MiLogDefault::default_log_obj_,
            3u,
            "./src/player/gm/player_gm_comp.cpp",
            "procChallenge",
            21129);
          v12 = common::milog::MiLogStream::operator<<<std::string>(&v20, param_vec);
          common::milog::MiLogStream::operator<<<char [41],(char *[41])0>(
            v12,
            (const char (*)[41])" parse challenge_index failed of param 2");
          common::milog::MiLogStream::~MiLogStream(&v20);
          std::string::operator=(ret_msg, "invalid challenge_index");
          v6 = -1;
        }
        else
        {
          *(_DWORD *)(v3 + 80) = 0;
          v13 = std::vector<std::string>::operator[](param_vec, 3uLL);
          if ( common::tools::StringUtils::strToNum<unsigned int>(v13, (unsigned int *)(v3 + 80), 1) )
          {
            common::milog::MiLogStream::create(
              &v20,
              &common::milog::MiLogDefault::default_log_obj_,
              3u,
              "./src/player/gm/player_gm_comp.cpp",
              "procChallenge",
              21136);
            v14 = common::milog::MiLogStream::operator<<<std::string>(&v20, param_vec);
            common::milog::MiLogStream::operator<<<char [34],(char *[34])0>(
              v14,
              (const char (*)[34])" parse duration failed of param 3");
            common::milog::MiLogStream::~MiLogStream(&v20);
            std::string::operator=(ret_msg, "invalid duration seconds");
            v6 = -1;
          }
          else
          {
            if ( *(_BYTE *)(((unsigned __int64)&context->scene >> 3) + 0x7FFF8000) )
              __asan_report_load8();
            Scene::findGroup((Scene *const)(v3 + 96), (uint32_t)context->scene);
            if ( std::operator==<Group>(0LL, (const std::shared_ptr<Group> *)(v3 + 96)) )
            {
              std::string::operator=(ret_msg, "findGroup failed.");
              v6 = -1;
            }
            else
            {
              v15 = std::__shared_ptr_access<Group,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Group,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 96));
              ChallengeComp = (unsigned int)Group::getChallengeComp(v15);
              ChallengeComp::findChallenge((const ChallengeComp *const)(v3 + 128), ChallengeComp);
              if ( std::operator==<Challenge>(0LL, (const std::shared_ptr<Challenge> *)(v3 + 128)) )
              {
                std::string::operator=(ret_msg, "challenge not exist.");
                v6 = -1;
              }
              else
              {
                v17 = std::__shared_ptr_access<Challenge,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Challenge,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 128));
                Challenge::setDurationByGm(v17, *(_DWORD *)(v3 + 80));
                v6 = 0;
              }
              std::shared_ptr<Challenge>::~shared_ptr((std::shared_ptr<Challenge> *const)(v3 + 128));
            }
            std::shared_ptr<Group>::~shared_ptr((std::shared_ptr<Group> *const)(v3 + 96));
          }
        }
      }
    }
    else
    {
      common::milog::MiLogStream::create(
        &v20,
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/player/gm/player_gm_comp.cpp",
        "procChallenge",
        21115);
      v8 = common::milog::MiLogStream::operator<<<std::string>(&v20, param_vec);
      common::milog::MiLogStream::operator<<<char [12],(char *[12])0>(v8, (const char (*)[12])" not enough");
      common::milog::MiLogStream::~MiLogStream(&v20);
      std::string::operator=(ret_msg, "CHALLENGE SET_DURATION group_id challenge_index seconds");
      v6 = -1;
    }
  }
  else
  {
    v6 = 0;
  }
  result = v6;
  if ( v21 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8010) = 0;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8010) = -168430091;
  }
  return result;
};

// Line 21159: range 0000000017D7EA5C-0000000017D7EAFE
void __cdecl procAuditRegister::procAuditRegister(procAuditRegister *const this)
{
  std::function<int(GmContext&,const std::vector<std::string>&,std::string&)> *v1; // rax
  std::allocator<char> __a; // [rsp+1Fh] [rbp-31h] BYREF
  std::string __k; // [rsp+20h] [rbp-30h] BYREF

  std::allocator<char>::allocator(&__a);
  std::string::basic_string<std::allocator<char>>(&__k, "AUDIT", &__a);
  v1 = std::unordered_map<std::string,std::function<int ()(GmContext &,std::vector<std::string> const&,std::string&)>>::operator[](
         &GmUtils::op_func_map[abi:cxx11],
         &__k);
  std::function<int ()(GmContext &,std::vector<std::string> const&,std::string&)>::operator=<int (&)(GmContext &,std::vector<std::string> const&,std::string&)>(
    v1,
    (int (*)(GmContext *, const std::vector<std::string> *, std::string *))procAudit);
  std::string::~string(&__k);
  std::allocator<char>::~allocator(&__a);
};

// Line 21160: range 0000000017C5F13D-0000000017C5F455
int32_t __cdecl procAudit(GmContext *context, const std::vector<std::string> *param_vec, std::string *ret_msg)
{
  unsigned __int64 v3; // rbx
  __int64 v4; // rax
  unsigned __int64 v5; // r12
  int32_t result; // eax
  const std::string *v7; // rax
  common::milog::MiLogStream *v8; // rax
  const std::string *v9; // rax
  PlayerBasicComp *BasicComp; // rax
  const std::string *v11; // rax
  PlayerSocialComp *SocialComp; // rax
  common::milog::MiLogStream v14; // [rsp+20h] [rbp-80h] BYREF
  char v15[96]; // [rsp+40h] [rbp-60h] BYREF

  v3 = (unsigned __int64)v15;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_0(64LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "1 32 1 11 is_ok:21166";
  *(_QWORD *)(v3 + 16) = procAudit;
  v5 = v3 >> 3;
  *(_DWORD *)(v5 + 2147450880) = -235802127;
  *(_DWORD *)(v5 + 2147450884) = -202116351;
  if ( std::vector<std::string>::size(param_vec) > 1 )
  {
    *(_BYTE *)(v3 + 32) = 0;
    v7 = std::vector<std::string>::operator[](param_vec, 1uLL);
    if ( common::tools::StringUtils::strToNum<bool>(v7, (bool *)(v3 + 32), 1) )
    {
      common::milog::MiLogStream::create(
        &v14,
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/player/gm/player_gm_comp.cpp",
        "procAudit",
        21169);
      v8 = common::milog::MiLogStream::operator<<<std::string>(&v14, param_vec);
      common::milog::MiLogStream::operator<<<char [31],(char *[31])0>(
        v8,
        (const char (*)[31])" parse is_ok failed of param 2");
      common::milog::MiLogStream::~MiLogStream(&v14);
      std::string::operator=(ret_msg, "invalid is_ok param");
      result = -1;
    }
    else
    {
      v9 = std::vector<std::string>::operator[](param_vec, 0LL);
      if ( std::operator==<char>(v9, "NICKNAME") )
      {
        if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
          __asan_report_load8();
        BasicComp = Player::getBasicComp(context->player);
        PlayerBasicComp::onNicknameAuditByGm(BasicComp, *(_BYTE *)(v3 + 32));
      }
      else
      {
        v11 = std::vector<std::string>::operator[](param_vec, 0LL);
        if ( std::operator==<char>(v11, "SIGNATURE") )
        {
          if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
            __asan_report_load8();
          SocialComp = Player::getSocialComp(context->player);
          PlayerSocialComp::onSignatureAuditByGm(SocialComp, *(_BYTE *)(v3 + 32));
        }
      }
      result = 0;
    }
  }
  else
  {
    common::milog::MiLogStream::create(
      &v14,
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/player/gm/player_gm_comp.cpp",
      "procAudit",
      21163);
    common::milog::MiLogStream::operator<<<char [32],(char *[32])0>(
      &v14,
      (const char (*)[32])"param not enough. need 2 params");
    common::milog::MiLogStream::~MiLogStream(&v14);
    result = -1;
  }
  if ( v15 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 21184: range 0000000017D7EB00-0000000017D7EBA2
void __cdecl procResCollectionRegister::procResCollectionRegister(procResCollectionRegister *const this)
{
  std::function<int(GmContext&,const std::vector<std::string>&,std::string&)> *v1; // rax
  std::allocator<char> __a; // [rsp+1Fh] [rbp-31h] BYREF
  std::string __k; // [rsp+20h] [rbp-30h] BYREF

  std::allocator<char>::allocator(&__a);
  std::string::basic_string<std::allocator<char>>(&__k, "RESCOLLECTION", &__a);
  v1 = std::unordered_map<std::string,std::function<int ()(GmContext &,std::vector<std::string> const&,std::string&)>>::operator[](
         &GmUtils::op_func_map[abi:cxx11],
         &__k);
  std::function<int ()(GmContext &,std::vector<std::string> const&,std::string&)>::operator=<int (&)(GmContext &,std::vector<std::string> const&,std::string&)>(
    v1,
    (int (*)(GmContext *, const std::vector<std::string> *, std::string *))procResCollection);
  std::string::~string(&__k);
  std::allocator<char>::~allocator(&__a);
};

// Line 21185: range 0000000017C5F456-0000000017C5F82E
int32_t __cdecl procResCollection(GmContext *context, const std::vector<std::string> *param_vec, std::string *ret_msg)
{
  unsigned __int64 v3; // r12
  __int64 v4; // rax
  _DWORD *v5; // rbx
  int32_t v6; // r14d
  const std::string *v7; // rax
  const std::string *v8; // rax
  PlayerQuestComp *QuestComp; // rax
  int32_t result; // eax
  common::milog::MiLogStream v12; // [rsp+20h] [rbp-250h] BYREF
  char v13[560]; // [rsp+40h] [rbp-230h] BYREF

  v3 = (unsigned __int64)v13;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_3(512LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "2 32 4 23 res_collection_id:21198 48 392 8 ss:21186";
  *(_QWORD *)(v3 + 16) = procResCollection;
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = 61956;
  v5[536862733] = -218103808;
  v5[536862734] = -202116109;
  v5[536862735] = -202116109;
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream(v3 + 48);
  if ( std::vector<std::string>::empty(param_vec) )
  {
    common::milog::MiLogStream::create(
      &v12,
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/player/gm/player_gm_comp.cpp",
      "procResCollection",
      21190);
    common::milog::MiLogStream::operator<<<char [17],(char *[17])0>(&v12, "param not enough");
    common::milog::MiLogStream::~MiLogStream(&v12);
    std::string::operator=(ret_msg, "RESCOLLECTION [SET]");
    v6 = -1;
    goto LABEL_17;
  }
  if ( std::vector<std::string>::size(param_vec) )
  {
    v7 = std::vector<std::string>::operator[](param_vec, 0LL);
    if ( std::operator==<char>(v7, off_26352320) )
    {
      *(_DWORD *)(v3 + 32) = 0;
      if ( std::vector<std::string>::size(param_vec) > 1 )
      {
        v8 = std::vector<std::string>::operator[](param_vec, 1uLL);
        if ( common::tools::StringUtils::strToNum<unsigned int>(v8, (unsigned int *)(v3 + 32), 1) )
        {
          std::string::operator=(ret_msg, "strToNum failed");
          v6 = -1;
          goto LABEL_17;
        }
      }
      if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
        __asan_report_load8();
      QuestComp = Player::getQuestComp(context->player);
      PlayerQuestComp::forceAcceptAndFinishParentQuestInResCollectionByGM(QuestComp, *(_DWORD *)(v3 + 32), 1);
      if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
        __asan_report_load8();
      Player::savePlayerDataToDB(context->player);
    }
  }
  std::operator<<<std::char_traits<char>>(v3 + 64, "RESCOLLECTION succ ...");
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::str(&v12, v3 + 48);
  std::string::operator=(ret_msg, &v12);
  std::string::~string(&v12);
  v6 = 0;
LABEL_17:
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream(v3 + 48);
  result = v6;
  if ( v13 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8034) = 0LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF803C) = 0;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8020) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8028) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8030) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8038) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 21217: range 0000000017D7EBA4-0000000017D7EC46
void __cdecl procGravenInnocenceActivityRegister::procGravenInnocenceActivityRegister(
        procGravenInnocenceActivityRegister *const this)
{
  std::function<int(GmContext&,const std::vector<std::string>&,std::string&)> *v1; // rax
  std::allocator<char> __a; // [rsp+1Fh] [rbp-31h] BYREF
  std::string __k; // [rsp+20h] [rbp-30h] BYREF

  std::allocator<char>::allocator(&__a);
  std::string::basic_string<std::allocator<char>>(&__k, "GRAVEN_INNOCENCE", &__a);
  v1 = std::unordered_map<std::string,std::function<int ()(GmContext &,std::vector<std::string> const&,std::string&)>>::operator[](
         &GmUtils::op_func_map[abi:cxx11],
         &__k);
  std::function<int ()(GmContext &,std::vector<std::string> const&,std::string&)>::operator=<int (&)(GmContext &,std::vector<std::string> const&,std::string&)>(
    v1,
    (int (*)(GmContext *, const std::vector<std::string> *, std::string *))procGravenInnocenceActivity);
  std::string::~string(&__k);
  std::allocator<char>::~allocator(&__a);
};

// Line 21218: range 0000000017C5F82F-0000000017C60A76
int32_t __cdecl procGravenInnocenceActivity(
        GmContext *context,
        const std::vector<std::string> *param_vec,
        std::string *ret_msg)
{
  unsigned __int64 v3; // r13
  __int64 v4; // rax
  _DWORD *v5; // r14
  int32_t restarted; // r12d
  const std::string *v7; // rax
  const std::string *v8; // rax
  const std::string *v9; // rax
  common::milog::MiLogStream *v10; // r12
  const std::string *v11; // rax
  GravenInnocenceActivity *v12; // rax
  const std::string *v13; // rax
  const std::string *v14; // rax
  common::milog::MiLogStream *v15; // r12
  const std::string *v16; // rax
  GravenInnocenceActivity *v17; // rax
  const std::string *v18; // rax
  GravenInnocenceActivity *v19; // rax
  const std::string *v20; // rax
  const std::string *v21; // rax
  const std::string *v22; // rax
  common::milog::MiLogStream *v23; // r12
  const std::string *v24; // rax
  GravenInnocenceActivity *v25; // rax
  const std::string *v26; // rax
  const std::string *v27; // rax
  common::milog::MiLogStream *v28; // r12
  const std::string *v29; // rax
  GravenInnocenceActivity *v30; // rax
  const std::string *v31; // rax
  const std::string *v32; // rax
  common::milog::MiLogStream *v33; // r12
  const std::string *v34; // rax
  const std::string *v35; // rax
  common::milog::MiLogStream *v36; // r12
  const std::string *v37; // rax
  GravenInnocenceActivity *v38; // rax
  const std::string *v39; // rax
  const std::string *v40; // rax
  const std::string *v41; // rax
  common::milog::MiLogStream *v42; // r12
  const std::string *v43; // rax
  GravenInnocenceActivity *v44; // rax
  const std::string *v45; // rax
  const std::string *v46; // rax
  const std::string *v47; // rax
  GravenInnocenceActivity *v48; // rax
  const std::string *v49; // rax
  GravenInnocenceActivity *v50; // rax
  int32_t result; // eax
  common::milog::MiLogStream v53; // [rsp+20h] [rbp-B0h] BYREF
  char v54[144]; // [rsp+40h] [rbp-90h] BYREF

  v3 = (unsigned __int64)v54;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_1(96LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "3 32 4 14 level_id:21316 48 4 14 stage_id:21368 64 16 18 activity_ptr:21224";
  *(_QWORD *)(v3 + 16) = procGravenInnocenceActivity;
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = -234556924;
  v5[536862722] = -202178560;
  if ( std::vector<std::string>::empty(param_vec) )
  {
    common::milog::MiLogStream::create(
      &v53,
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/player/gm/player_gm_comp.cpp",
      "procGravenInnocenceActivity",
      21221);
    common::milog::MiLogStream::operator<<<char [17],(char *[17])0>(&v53, "param not enough");
    common::milog::MiLogStream::~MiLogStream(&v53);
    restarted = -1;
    goto LABEL_72;
  }
  if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
    __asan_report_load8();
  Player::getActivityComp(context->player);
  PlayerActivityComp::findOpenningActivity<GravenInnocenceActivity>((PlayerActivityComp *const)(v3 + 64));
  if ( !std::operator==<GravenInnocenceActivity>(0LL, (const std::shared_ptr<GravenInnocenceActivity> *)(v3 + 64)) )
  {
    v7 = std::vector<std::string>::operator[](param_vec, 0LL);
    if ( std::operator==<char>(v7, "CAMP") )
    {
      if ( std::vector<std::string>::size(param_vec) <= 1 )
      {
        common::milog::MiLogStream::create(
          &v53,
          &common::milog::MiLogDefault::default_log_obj_,
          3u,
          "./src/player/gm/player_gm_comp.cpp",
          "procGravenInnocenceActivity",
          21234);
        common::milog::MiLogStream::operator<<<char [17],(char *[17])0>(&v53, "param not enough");
        common::milog::MiLogStream::~MiLogStream(&v53);
        restarted = -1;
        goto LABEL_71;
      }
      v8 = std::vector<std::string>::operator[](param_vec, 1uLL);
      if ( std::operator==<char>(v8, "OPEN_STAGE") )
      {
        if ( std::vector<std::string>::size(param_vec) > 2 )
        {
          *(_DWORD *)(v3 + 48) = 0;
          v9 = std::vector<std::string>::operator[](param_vec, 2uLL);
          if ( common::tools::StringUtils::strToNum<unsigned int>(v9, (unsigned int *)(v3 + 48), 1) )
          {
            common::milog::MiLogStream::create(
              &v53,
              &common::milog::MiLogDefault::default_log_obj_,
              3u,
              "./src/player/gm/player_gm_comp.cpp",
              "procGravenInnocenceActivity",
              21247);
            v10 = common::milog::MiLogStream::operator<<<char [15],(char *[15])0>(
                    &v53,
                    (const char (*)[15])"invalid param:");
            v11 = std::vector<std::string>::operator[](param_vec, 2uLL);
            common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v10, v11);
            common::milog::MiLogStream::~MiLogStream(&v53);
            restarted = -1;
          }
          else
          {
            v12 = std::__shared_ptr_access<GravenInnocenceActivity,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<GravenInnocenceActivity,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 64));
            restarted = GravenInnocenceActivity::openCampStageByGm(v12, *(_DWORD *)(v3 + 48));
          }
        }
        else
        {
          common::milog::MiLogStream::create(
            &v53,
            &common::milog::MiLogDefault::default_log_obj_,
            3u,
            "./src/player/gm/player_gm_comp.cpp",
            "procGravenInnocenceActivity",
            21241);
          common::milog::MiLogStream::operator<<<char [17],(char *[17])0>(&v53, "param not enough");
          common::milog::MiLogStream::~MiLogStream(&v53);
          restarted = -1;
        }
        goto LABEL_71;
      }
      v13 = std::vector<std::string>::operator[](param_vec, 1uLL);
      if ( std::operator==<char>(v13, "FINISH_STAGE_LEVEL") )
      {
        if ( std::vector<std::string>::size(param_vec) > 2 )
        {
          *(_DWORD *)(v3 + 48) = 0;
          v14 = std::vector<std::string>::operator[](param_vec, 2uLL);
          if ( common::tools::StringUtils::strToNum<unsigned int>(v14, (unsigned int *)(v3 + 48), 1) )
          {
            common::milog::MiLogStream::create(
              &v53,
              &common::milog::MiLogDefault::default_log_obj_,
              3u,
              "./src/player/gm/player_gm_comp.cpp",
              "procGravenInnocenceActivity",
              21262);
            v15 = common::milog::MiLogStream::operator<<<char [15],(char *[15])0>(
                    &v53,
                    (const char (*)[15])"invalid param:");
            v16 = std::vector<std::string>::operator[](param_vec, 2uLL);
            common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v15, v16);
            common::milog::MiLogStream::~MiLogStream(&v53);
            restarted = -1;
          }
          else
          {
            v17 = std::__shared_ptr_access<GravenInnocenceActivity,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<GravenInnocenceActivity,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 64));
            restarted = GravenInnocenceActivity::finishCampStageLevelByGm(v17, *(_DWORD *)(v3 + 48));
          }
        }
        else
        {
          common::milog::MiLogStream::create(
            &v53,
            &common::milog::MiLogDefault::default_log_obj_,
            3u,
            "./src/player/gm/player_gm_comp.cpp",
            "procGravenInnocenceActivity",
            21256);
          common::milog::MiLogStream::operator<<<char [17],(char *[17])0>(&v53, "param not enough");
          common::milog::MiLogStream::~MiLogStream(&v53);
          restarted = -1;
        }
        goto LABEL_71;
      }
      v18 = std::vector<std::string>::operator[](param_vec, 1uLL);
      if ( std::operator==<char>(v18, "RESET") )
      {
        v19 = std::__shared_ptr_access<GravenInnocenceActivity,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<GravenInnocenceActivity,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 64));
        restarted = GravenInnocenceActivity::resetCampDataByGm(v19);
        goto LABEL_71;
      }
    }
    else
    {
      v20 = std::vector<std::string>::operator[](param_vec, 0LL);
      if ( std::operator==<char>(v20, "RACE") )
      {
        if ( std::vector<std::string>::size(param_vec) <= 1 )
        {
          common::milog::MiLogStream::create(
            &v53,
            &common::milog::MiLogDefault::default_log_obj_,
            3u,
            "./src/player/gm/player_gm_comp.cpp",
            "procGravenInnocenceActivity",
            21276);
          common::milog::MiLogStream::operator<<<char [17],(char *[17])0>(&v53, "param not enough");
          common::milog::MiLogStream::~MiLogStream(&v53);
          restarted = -1;
          goto LABEL_71;
        }
        v21 = std::vector<std::string>::operator[](param_vec, 1uLL);
        if ( std::operator==<char>(v21, "OPEN_LEVEL") )
        {
          if ( std::vector<std::string>::size(param_vec) > 2 )
          {
            *(_DWORD *)(v3 + 48) = 0;
            v22 = std::vector<std::string>::operator[](param_vec, 2uLL);
            if ( common::tools::StringUtils::strToNum<unsigned int>(v22, (unsigned int *)(v3 + 48), 1) )
            {
              common::milog::MiLogStream::create(
                &v53,
                &common::milog::MiLogDefault::default_log_obj_,
                3u,
                "./src/player/gm/player_gm_comp.cpp",
                "procGravenInnocenceActivity",
                21289);
              v23 = common::milog::MiLogStream::operator<<<char [15],(char *[15])0>(
                      &v53,
                      (const char (*)[15])"invalid param:");
              v24 = std::vector<std::string>::operator[](param_vec, 2uLL);
              common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v23, v24);
              common::milog::MiLogStream::~MiLogStream(&v53);
              restarted = -1;
            }
            else
            {
              v25 = std::__shared_ptr_access<GravenInnocenceActivity,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<GravenInnocenceActivity,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 64));
              restarted = GravenInnocenceActivity::openRaceLevelByGm(v25, *(_DWORD *)(v3 + 48));
            }
          }
          else
          {
            common::milog::MiLogStream::create(
              &v53,
              &common::milog::MiLogDefault::default_log_obj_,
              3u,
              "./src/player/gm/player_gm_comp.cpp",
              "procGravenInnocenceActivity",
              21283);
            common::milog::MiLogStream::operator<<<char [17],(char *[17])0>(&v53, "param not enough");
            common::milog::MiLogStream::~MiLogStream(&v53);
            restarted = -1;
          }
          goto LABEL_71;
        }
        v26 = std::vector<std::string>::operator[](param_vec, 1uLL);
        if ( std::operator==<char>(v26, "RESTART_LEVEL") )
        {
          if ( std::vector<std::string>::size(param_vec) > 2 )
          {
            *(_DWORD *)(v3 + 48) = 0;
            v27 = std::vector<std::string>::operator[](param_vec, 2uLL);
            if ( common::tools::StringUtils::strToNum<unsigned int>(v27, (unsigned int *)(v3 + 48), 1) )
            {
              common::milog::MiLogStream::create(
                &v53,
                &common::milog::MiLogDefault::default_log_obj_,
                3u,
                "./src/player/gm/player_gm_comp.cpp",
                "procGravenInnocenceActivity",
                21304);
              v28 = common::milog::MiLogStream::operator<<<char [15],(char *[15])0>(
                      &v53,
                      (const char (*)[15])"invalid param:");
              v29 = std::vector<std::string>::operator[](param_vec, 2uLL);
              common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v28, v29);
              common::milog::MiLogStream::~MiLogStream(&v53);
              restarted = -1;
            }
            else
            {
              v30 = std::__shared_ptr_access<GravenInnocenceActivity,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<GravenInnocenceActivity,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 64));
              restarted = GravenInnocenceActivity::restartRaceLevelByGm(v30, *(_DWORD *)(v3 + 48));
            }
          }
          else
          {
            common::milog::MiLogStream::create(
              &v53,
              &common::milog::MiLogDefault::default_log_obj_,
              3u,
              "./src/player/gm/player_gm_comp.cpp",
              "procGravenInnocenceActivity",
              21298);
            common::milog::MiLogStream::operator<<<char [17],(char *[17])0>(&v53, "param not enough");
            common::milog::MiLogStream::~MiLogStream(&v53);
            restarted = -1;
          }
          goto LABEL_71;
        }
        v31 = std::vector<std::string>::operator[](param_vec, 1uLL);
        if ( std::operator==<char>(v31, "SET_LEVEL_SCORE") )
        {
          if ( std::vector<std::string>::size(param_vec) > 3 )
          {
            *(_DWORD *)(v3 + 32) = 0;
            v32 = std::vector<std::string>::operator[](param_vec, 2uLL);
            if ( common::tools::StringUtils::strToNum<unsigned int>(v32, (unsigned int *)(v3 + 32), 1) )
            {
              common::milog::MiLogStream::create(
                &v53,
                &common::milog::MiLogDefault::default_log_obj_,
                3u,
                "./src/player/gm/player_gm_comp.cpp",
                "procGravenInnocenceActivity",
                21319);
              v33 = common::milog::MiLogStream::operator<<<char [15],(char *[15])0>(
                      &v53,
                      (const char (*)[15])"invalid param:");
              v34 = std::vector<std::string>::operator[](param_vec, 2uLL);
              common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v33, v34);
              common::milog::MiLogStream::~MiLogStream(&v53);
              restarted = -1;
            }
            else
            {
              *(_DWORD *)(v3 + 48) = 0;
              v35 = std::vector<std::string>::operator[](param_vec, 3uLL);
              if ( common::tools::StringUtils::strToNum<unsigned int>(v35, (unsigned int *)(v3 + 48), 1) )
              {
                common::milog::MiLogStream::create(
                  &v53,
                  &common::milog::MiLogDefault::default_log_obj_,
                  3u,
                  "./src/player/gm/player_gm_comp.cpp",
                  "procGravenInnocenceActivity",
                  21325);
                v36 = common::milog::MiLogStream::operator<<<char [15],(char *[15])0>(
                        &v53,
                        (const char (*)[15])"invalid param:");
                v37 = std::vector<std::string>::operator[](param_vec, 3uLL);
                common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v36, v37);
                common::milog::MiLogStream::~MiLogStream(&v53);
                restarted = -1;
              }
              else
              {
                v38 = std::__shared_ptr_access<GravenInnocenceActivity,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<GravenInnocenceActivity,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 64));
                restarted = GravenInnocenceActivity::setRaceLevelScoreByGm(
                              v38,
                              *(_DWORD *)(v3 + 32),
                              *(_DWORD *)(v3 + 48));
              }
            }
          }
          else
          {
            common::milog::MiLogStream::create(
              &v53,
              &common::milog::MiLogDefault::default_log_obj_,
              3u,
              "./src/player/gm/player_gm_comp.cpp",
              "procGravenInnocenceActivity",
              21313);
            common::milog::MiLogStream::operator<<<char [17],(char *[17])0>(&v53, "param not enough");
            common::milog::MiLogStream::~MiLogStream(&v53);
            restarted = -1;
          }
          goto LABEL_71;
        }
      }
      else
      {
        v39 = std::vector<std::string>::operator[](param_vec, 0LL);
        if ( std::operator==<char>(v39, "CARVE") )
        {
          if ( std::vector<std::string>::size(param_vec) <= 1 )
          {
            common::milog::MiLogStream::create(
              &v53,
              &common::milog::MiLogDefault::default_log_obj_,
              3u,
              "./src/player/gm/player_gm_comp.cpp",
              "procGravenInnocenceActivity",
              21335);
            common::milog::MiLogStream::operator<<<char [17],(char *[17])0>(&v53, "param not enough");
            common::milog::MiLogStream::~MiLogStream(&v53);
            restarted = -1;
            goto LABEL_71;
          }
          v40 = std::vector<std::string>::operator[](param_vec, 1uLL);
          if ( std::operator==<char>(v40, "OPEN_STAGE") )
          {
            if ( std::vector<std::string>::size(param_vec) > 2 )
            {
              *(_DWORD *)(v3 + 48) = 0;
              v41 = std::vector<std::string>::operator[](param_vec, 2uLL);
              if ( common::tools::StringUtils::strToNum<unsigned int>(v41, (unsigned int *)(v3 + 48), 1) )
              {
                common::milog::MiLogStream::create(
                  &v53,
                  &common::milog::MiLogDefault::default_log_obj_,
                  3u,
                  "./src/player/gm/player_gm_comp.cpp",
                  "procGravenInnocenceActivity",
                  21348);
                v42 = common::milog::MiLogStream::operator<<<char [15],(char *[15])0>(
                        &v53,
                        (const char (*)[15])"invalid param:");
                v43 = std::vector<std::string>::operator[](param_vec, 2uLL);
                common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v42, v43);
                common::milog::MiLogStream::~MiLogStream(&v53);
                restarted = -1;
              }
              else
              {
                v44 = std::__shared_ptr_access<GravenInnocenceActivity,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<GravenInnocenceActivity,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 64));
                restarted = GravenInnocenceActivity::openCarveStageByGm(v44, *(_DWORD *)(v3 + 48));
              }
            }
            else
            {
              common::milog::MiLogStream::create(
                &v53,
                &common::milog::MiLogDefault::default_log_obj_,
                3u,
                "./src/player/gm/player_gm_comp.cpp",
                "procGravenInnocenceActivity",
                21342);
              common::milog::MiLogStream::operator<<<char [17],(char *[17])0>(&v53, "param not enough");
              common::milog::MiLogStream::~MiLogStream(&v53);
              restarted = -1;
            }
            goto LABEL_71;
          }
        }
        else
        {
          v45 = std::vector<std::string>::operator[](param_vec, 0LL);
          if ( std::operator==<char>(v45, "PHOTO") )
          {
            if ( std::vector<std::string>::size(param_vec) <= 1 )
            {
              common::milog::MiLogStream::create(
                &v53,
                &common::milog::MiLogDefault::default_log_obj_,
                3u,
                "./src/player/gm/player_gm_comp.cpp",
                "procGravenInnocenceActivity",
                21358);
              common::milog::MiLogStream::operator<<<char [17],(char *[17])0>(&v53, "param not enough");
              common::milog::MiLogStream::~MiLogStream(&v53);
              restarted = -1;
              goto LABEL_71;
            }
            v46 = std::vector<std::string>::operator[](param_vec, 1uLL);
            if ( std::operator==<char>(v46, "OPEN_STAGE") )
            {
              if ( std::vector<std::string>::size(param_vec) > 2 )
              {
                *(_DWORD *)(v3 + 48) = 0;
                v47 = std::vector<std::string>::operator[](param_vec, 2uLL);
                if ( common::tools::StringUtils::strToNum<unsigned int>(v47, (unsigned int *)(v3 + 48), 1) )
                {
                  common::milog::MiLogStream::create(
                    &v53,
                    &common::milog::MiLogDefault::default_log_obj_,
                    3u,
                    "./src/player/gm/player_gm_comp.cpp",
                    "procGravenInnocenceActivity",
                    21371);
                  common::milog::MiLogStream::operator<<<char [17],(char *[17])0>(&v53, "param not enough");
                  common::milog::MiLogStream::~MiLogStream(&v53);
                  restarted = -1;
                }
                else
                {
                  v48 = std::__shared_ptr_access<GravenInnocenceActivity,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<GravenInnocenceActivity,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 64));
                  restarted = GravenInnocenceActivity::openPhotoStageByGm(v48, *(_DWORD *)(v3 + 48));
                }
              }
              else
              {
                common::milog::MiLogStream::create(
                  &v53,
                  &common::milog::MiLogDefault::default_log_obj_,
                  3u,
                  "./src/player/gm/player_gm_comp.cpp",
                  "procGravenInnocenceActivity",
                  21365);
                common::milog::MiLogStream::operator<<<char [17],(char *[17])0>(&v53, "param not enough");
                common::milog::MiLogStream::~MiLogStream(&v53);
                restarted = -1;
              }
              goto LABEL_71;
            }
            v49 = std::vector<std::string>::operator[](param_vec, 1uLL);
            if ( std::operator==<char>(v49, "RESET") )
            {
              v50 = std::__shared_ptr_access<GravenInnocenceActivity,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<GravenInnocenceActivity,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 64));
              restarted = GravenInnocenceActivity::resetPhotoDataByGm(v50);
              goto LABEL_71;
            }
          }
        }
      }
    }
    restarted = 0;
    goto LABEL_71;
  }
  std::string::operator=(ret_msg, "no activity open");
  restarted = -1;
LABEL_71:
  std::shared_ptr<GravenInnocenceActivity>::~shared_ptr((std::shared_ptr<GravenInnocenceActivity> *const)(v3 + 64));
LABEL_72:
  result = restarted;
  if ( v54 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8008) = 0;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8008) = -168430091;
  }
  return result;
};

// Line 21384: range 0000000017D7EC48-0000000017D7ECEA
void __cdecl procCompoundMaterialBoostRegister::procCompoundMaterialBoostRegister(
        procCompoundMaterialBoostRegister *const this)
{
  std::function<int(GmContext&,const std::vector<std::string>&,std::string&)> *v1; // rax
  std::allocator<char> __a; // [rsp+1Fh] [rbp-31h] BYREF
  std::string __k; // [rsp+20h] [rbp-30h] BYREF

  std::allocator<char>::allocator(&__a);
  std::string::basic_string<std::allocator<char>>(&__k, "COMPOUND_MATERIAL_BOOST", &__a);
  v1 = std::unordered_map<std::string,std::function<int ()(GmContext &,std::vector<std::string> const&,std::string&)>>::operator[](
         &GmUtils::op_func_map[abi:cxx11],
         &__k);
  std::function<int ()(GmContext &,std::vector<std::string> const&,std::string&)>::operator=<int (&)(GmContext &,std::vector<std::string> const&,std::string&)>(
    v1,
    (int (*)(GmContext *, const std::vector<std::string> *, std::string *))procCompoundMaterialBoost);
  std::string::~string(&__k);
  std::allocator<char>::~allocator(&__a);
};

// Line 21385: range 0000000017C60A77-0000000017C61272
int32_t __cdecl procCompoundMaterialBoost(
        GmContext *context,
        const std::vector<std::string> *param_vec,
        std::string *ret_msg)
{
  unsigned __int64 v3; // r13
  __int64 v4; // rax
  _DWORD *v5; // r12
  int32_t v6; // r14d
  const std::string *v7; // rax
  common::milog::MiLogStream *v8; // rdx
  const std::string *v9; // rax
  const std::string *v10; // rax
  const std::string *v11; // rax
  const std::string *v12; // rax
  PlayerCookComp *CookComp; // rax
  common::milog::MiLogStream *v14; // rbx
  const std::string *v15; // rax
  common::milog::MiLogStream *v16; // rax
  int32_t result; // eax
  common::milog::MiLogStream v18; // [rsp+20h] [rbp-170h] BYREF
  char v19[336]; // [rsp+40h] [rbp-150h] BYREF

  v3 = (unsigned __int64)v19;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_3(288LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "6 32 4 30 target_compound_group_id:21398 48 4 25 consume_material_id:21399 64 4 28 consume_mater"
                        "ial_count:21400 80 4 18 is_boost_all:21401 96 40 9 req:21422 176 80 9 rsp:21423";
  *(_QWORD *)(v3 + 16) = procCompoundMaterialBoost;
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = -234556924;
  v5[536862722] = -234556924;
  v5[536862724] = -218959360;
  v5[536862725] = 62194;
  v5[536862728] = -202116109;
  if ( std::vector<std::string>::empty(param_vec) )
  {
    common::milog::MiLogStream::create(
      &v18,
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/player/gm/player_gm_comp.cpp",
      "procCompoundMaterialBoost",
      21388);
    common::milog::MiLogStream::operator<<<char [17],(char *[17])0>(&v18, "param not enough");
    common::milog::MiLogStream::~MiLogStream(&v18);
    v6 = -1;
  }
  else
  {
    v7 = std::vector<std::string>::operator[](param_vec, 0LL);
    if ( std::operator==<char>(v7, "BOOST") )
    {
      if ( std::vector<std::string>::size(param_vec) > 4 )
      {
        *(_DWORD *)(v3 + 32) = 0;
        *(_DWORD *)(v3 + 48) = 0;
        *(_DWORD *)(v3 + 64) = 0;
        *(_DWORD *)(v3 + 80) = 0;
        v9 = std::vector<std::string>::operator[](param_vec, 1uLL);
        if ( common::tools::StringUtils::strToNum<unsigned int>(v9, (unsigned int *)(v3 + 32), 1) )
        {
          common::milog::MiLogStream::create(
            &v18,
            &common::milog::MiLogDefault::default_log_obj_,
            3u,
            "./src/player/gm/player_gm_comp.cpp",
            "procCompoundMaterialBoost",
            21404);
          common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(&v18, (const char (*)[16])"param 1 invalid");
          common::milog::MiLogStream::~MiLogStream(&v18);
          v6 = -1;
        }
        else
        {
          v10 = std::vector<std::string>::operator[](param_vec, 2uLL);
          if ( common::tools::StringUtils::strToNum<unsigned int>(v10, (unsigned int *)(v3 + 48), 1) )
          {
            common::milog::MiLogStream::create(
              &v18,
              &common::milog::MiLogDefault::default_log_obj_,
              3u,
              "./src/player/gm/player_gm_comp.cpp",
              "procCompoundMaterialBoost",
              21409);
            common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(&v18, (const char (*)[16])"param 2 invalid");
            common::milog::MiLogStream::~MiLogStream(&v18);
            v6 = -1;
          }
          else
          {
            v11 = std::vector<std::string>::operator[](param_vec, 3uLL);
            if ( common::tools::StringUtils::strToNum<unsigned int>(v11, (unsigned int *)(v3 + 64), 1) )
            {
              common::milog::MiLogStream::create(
                &v18,
                &common::milog::MiLogDefault::default_log_obj_,
                3u,
                "./src/player/gm/player_gm_comp.cpp",
                "procCompoundMaterialBoost",
                21414);
              common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                &v18,
                (const char (*)[16])"param 3 invalid");
              common::milog::MiLogStream::~MiLogStream(&v18);
              v6 = -1;
            }
            else
            {
              v12 = std::vector<std::string>::operator[](param_vec, 4uLL);
              if ( common::tools::StringUtils::strToNum<unsigned int>(v12, (unsigned int *)(v3 + 80), 1) )
              {
                common::milog::MiLogStream::create(
                  &v18,
                  &common::milog::MiLogDefault::default_log_obj_,
                  3u,
                  "./src/player/gm/player_gm_comp.cpp",
                  "procCompoundMaterialBoost",
                  21419);
                common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                  &v18,
                  (const char (*)[16])"param 4 invalid");
                common::milog::MiLogStream::~MiLogStream(&v18);
                v6 = -1;
              }
              else
              {
                proto::PlayerCompoundMaterialBoostReq::PlayerCompoundMaterialBoostReq((proto::PlayerCompoundMaterialBoostReq *const)(v3 + 96));
                proto::PlayerCompoundMaterialBoostRsp::PlayerCompoundMaterialBoostRsp((proto::PlayerCompoundMaterialBoostRsp *const)(v3 + 176));
                proto::PlayerCompoundMaterialBoostReq::set_target_compound_group_id(
                  (proto::PlayerCompoundMaterialBoostReq *const)(v3 + 96),
                  *(_DWORD *)(v3 + 32));
                proto::PlayerCompoundMaterialBoostReq::set_consume_material_id(
                  (proto::PlayerCompoundMaterialBoostReq *const)(v3 + 96),
                  *(_DWORD *)(v3 + 48));
                proto::PlayerCompoundMaterialBoostReq::set_consume_material_count(
                  (proto::PlayerCompoundMaterialBoostReq *const)(v3 + 96),
                  *(_DWORD *)(v3 + 64));
                proto::PlayerCompoundMaterialBoostReq::set_is_boost_all(
                  (proto::PlayerCompoundMaterialBoostReq *const)(v3 + 96),
                  *(_DWORD *)(v3 + 80) != 0);
                if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
                  __asan_report_load8();
                CookComp = Player::getCookComp(context->player);
                PlayerCookComp::onPlayerCompoundMaterialBoostReq(
                  CookComp,
                  (const proto::PlayerCompoundMaterialBoostReq *)(v3 + 96),
                  (proto::PlayerCompoundMaterialBoostRsp *)(v3 + 176));
                if ( proto::PlayerCompoundMaterialBoostRsp::retcode((const proto::PlayerCompoundMaterialBoostRsp *const)(v3 + 176)) )
                {
                  v6 = -1;
                }
                else
                {
                  if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
                    __asan_report_load8();
                  v6 = Player::sendProto(context->player, (const google::protobuf::Message *)(v3 + 176));
                }
                proto::PlayerCompoundMaterialBoostRsp::~PlayerCompoundMaterialBoostRsp((proto::PlayerCompoundMaterialBoostRsp *const)(v3 + 176));
                proto::PlayerCompoundMaterialBoostReq::~PlayerCompoundMaterialBoostReq((proto::PlayerCompoundMaterialBoostReq *const)(v3 + 96));
              }
            }
          }
        }
      }
      else
      {
        common::milog::MiLogStream::create(
          &v18,
          &common::milog::MiLogDefault::default_log_obj_,
          3u,
          "./src/player/gm/player_gm_comp.cpp",
          "procCompoundMaterialBoost",
          21395);
        v8 = common::milog::MiLogStream::operator<<<char [30],(char *[30])0>(
               &v18,
               (const char (*)[30])"boost param size is invalid: ");
        common::milog::MiLogStream::operator<<<std::string>(v8, param_vec);
        common::milog::MiLogStream::~MiLogStream(&v18);
        v6 = -1;
      }
    }
    else
    {
      common::milog::MiLogStream::create(
        &v18,
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/player/gm/player_gm_comp.cpp",
        "procCompoundMaterialBoost",
        21437);
      v14 = common::milog::MiLogStream::operator<<<char [7],(char *[7])0>(&v18, (const char (*)[7])"param ");
      v15 = std::vector<std::string>::operator[](param_vec, 0LL);
      v16 = common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v14, v15);
      common::milog::MiLogStream::operator<<<char [13],(char *[13])0>(v16, (const char (*)[13])off_263795E0);
      common::milog::MiLogStream::~MiLogStream(&v18);
      v6 = -1;
    }
  }
  result = v6;
  if ( v19 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8008) = 0;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8010) = 0LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8020) = 0;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8020) = -168430091;
  }
  return result;
};

// Line 21443: range 0000000017D7ECEC-0000000017D7ED8E
void __cdecl procInstableSprayRegister::procInstableSprayRegister(procInstableSprayRegister *const this)
{
  std::function<int(GmContext&,const std::vector<std::string>&,std::string&)> *v1; // rax
  std::allocator<char> __a; // [rsp+1Fh] [rbp-31h] BYREF
  std::string __k; // [rsp+20h] [rbp-30h] BYREF

  std::allocator<char>::allocator(&__a);
  std::string::basic_string<std::allocator<char>>(&__k, "INSTABLE_SPRAY", &__a);
  v1 = std::unordered_map<std::string,std::function<int ()(GmContext &,std::vector<std::string> const&,std::string&)>>::operator[](
         &GmUtils::op_func_map[abi:cxx11],
         &__k);
  std::function<int ()(GmContext &,std::vector<std::string> const&,std::string&)>::operator=<int (&)(GmContext &,std::vector<std::string> const&,std::string&)>(
    v1,
    (int (*)(GmContext *, const std::vector<std::string> *, std::string *))procInstableSpray);
  std::string::~string(&__k);
  std::allocator<char>::~allocator(&__a);
};

// Line 21444: range 0000000017C61273-0000000017C61DD2
int32_t __cdecl procInstableSpray(GmContext *context, const std::vector<std::string> *param_vec, std::string *ret_msg)
{
  int32_t v3; // r14d
  unsigned __int64 v4; // r13
  __int64 v5; // rax
  _DWORD *v6; // r12
  const std::string *v7; // rax
  const std::string *v8; // rax
  std::__shared_ptr_access<InstableSprayActivity,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v9; // rax
  const std::string *v10; // rax
  std::__shared_ptr_access<InstableSprayActivity,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v11; // rax
  const std::string *v12; // rax
  std::__shared_ptr_access<InstableSprayActivity,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v13; // rax
  const std::string *v14; // rax
  const std::string *M_current; // r15
  _BOOL4 v16; // r15d
  int v17; // r15d
  uint32_t GalleryComp; // ecx
  std::vector<unsigned int>::size_type v19; // r15
  std::vector<unsigned int>::const_reference v20; // rax
  _DWORD *v21; // rdx
  int v22; // r15d
  std::__shared_ptr_access<AvatarTeamEntity,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v23; // rax
  InstableSprayGallery *v24; // rax
  std::__shared_ptr_access<AvatarTeamEntity,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v25; // rax
  InstableSprayGallery *v26; // rax
  InstableSprayGallery *v27; // r15
  int v28; // r15d
  int32_t result; // eax
  const std::string *__last; // [rsp+10h] [rbp-260h]
  std::allocator<std::string > __a; // [rsp+3Bh] [rbp-235h] BYREF
  unsigned int i; // [rsp+3Ch] [rbp-234h]
  std::unordered_map<unsigned int,data::InstableSprayLevelExcelConfig>::const_iterator __for_begin; // [rsp+40h] [rbp-230h] BYREF
  std::unordered_map<unsigned int,data::InstableSprayLevelExcelConfig>::const_iterator __for_end; // [rsp+48h] [rbp-228h] BYREF
  const ActivityInstableSprayExcelConfigMgr *config_mgr; // [rsp+50h] [rbp-220h]
  const std::unordered_map<unsigned int,data::InstableSprayLevelExcelConfig> *__for_range; // [rsp+58h] [rbp-218h]
  const std::pair<unsigned int const,data::InstableSprayLevelExcelConfig> *v38; // [rsp+60h] [rbp-210h]
  std::tuple_element<0,const std::pair<unsigned int const,data::InstableSprayLevelExcelConfig> >::type *level_id; // [rsp+68h] [rbp-208h]
  std::tuple_element<1,const std::pair<unsigned int const,data::InstableSprayLevelExcelConfig> >::type *level_config; // [rsp+70h] [rbp-200h]
  const data::InstableSprayBuffExcelConfig *buff_config_ptr; // [rsp+78h] [rbp-1F8h]
  std::vector<unsigned int> p_buff_id_vec; // [rsp+80h] [rbp-1F0h] BYREF
  std::string __rhs; // [rsp+A0h] [rbp-1D0h] BYREF
  std::string v44; // [rsp+C0h] [rbp-1B0h] BYREF
  char v45[400]; // [rsp+E0h] [rbp-190h] BYREF

  v4 = (unsigned __int64)v45;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v5 = __asan_stack_malloc_3(352LL);
    if ( v5 )
      v4 = v5;
  }
  *(_QWORD *)v4 = 1102416563LL;
  *(_QWORD *)(v4 + 8) = "8 32 4 13 buff_id:21502 48 4 14 stage_id:21463 64 16 18 activity_ptr:21445 96 16 21 team_entity_"
                        "ptr:21487 128 16 17 gallery_ptr:21496 160 24 18 buff_idx_vec:21480 224 24 22 buff_idx_str_vec:21"
                        "481 288 24 17 buff_id_vec:21499";
  *(_QWORD *)(v4 + 16) = procInstableSpray;
  v6 = (_DWORD *)(v4 >> 3);
  v6[536862720] = -235802127;
  v6[536862721] = -234556924;
  v6[536862722] = -219021312;
  v6[536862723] = -219021312;
  v6[536862724] = -219021312;
  v6[536862725] = -234881024;
  v6[536862726] = -218959118;
  v6[536862727] = -234881024;
  v6[536862728] = -218959118;
  v6[536862729] = -218103808;
  v6[536862730] = -202116109;
  if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
    __asan_report_load8();
  Player::getActivityComp(context->player);
  PlayerActivityComp::findOpenningActivity<InstableSprayActivity>((PlayerActivityComp *const)(v4 + 64));
  if ( std::operator==<InstableSprayActivity>((const std::shared_ptr<InstableSprayActivity> *)(v4 + 64), 0LL) )
  {
    std::string::operator=(ret_msg, "activity is not open");
    v3 = -1;
    goto LABEL_56;
  }
  if ( !std::vector<std::string>::size(param_vec) )
    goto LABEL_53;
  v7 = std::vector<std::string>::operator[](param_vec, 0LL);
  if ( std::operator==<char>(v7, "STAGE") )
  {
    if ( std::vector<std::string>::size(param_vec) > 1 )
    {
      v8 = std::vector<std::string>::operator[](param_vec, 1uLL);
      if ( std::operator==<char>(v8, _f.gap0) )
      {
        v9 = std::__shared_ptr_access<InstableSprayActivity,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<InstableSprayActivity,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 64));
        InstableSprayActivity::openAllStageByGm(v9);
      }
      else
      {
        *(_DWORD *)(v4 + 48) = 0;
        v10 = std::vector<std::string>::operator[](param_vec, 1uLL);
        if ( common::tools::StringUtils::strToNum<unsigned int>(v10, (unsigned int *)(v4 + 48), 1) )
        {
          std::string::operator=(ret_msg, "strToNum failed");
          v3 = -1;
          goto LABEL_56;
        }
        v11 = std::__shared_ptr_access<InstableSprayActivity,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<InstableSprayActivity,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 64));
        InstableSprayActivity::openStageByGm(v11, *(_DWORD *)(v4 + 48));
      }
    }
    goto LABEL_55;
  }
  v12 = std::vector<std::string>::operator[](param_vec, 0LL);
  if ( std::operator==<char>(v12, "CLEAR") )
  {
    v13 = std::__shared_ptr_access<InstableSprayActivity,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<InstableSprayActivity,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 64));
    InstableSprayActivity::clearByGm(v13);
LABEL_55:
    v3 = 0;
    goto LABEL_56;
  }
  v14 = std::vector<std::string>::operator[](param_vec, 0LL);
  if ( !std::operator==<char>(v14, "BUFF") )
  {
LABEL_53:
    std::string::operator=(ret_msg, "invalid params");
    v3 = -1;
    goto LABEL_56;
  }
  std::vector<unsigned int>::vector((std::vector<unsigned int> *const)(v4 + 160));
  __for_end._M_cur = (std::__detail::_Node_iterator_base<std::pair<unsigned int const,data::InstableSprayLevelExcelConfig>,false>::__node_type *)std::vector<std::string>::begin(param_vec)._M_current;
  M_current = __gnu_cxx::__normal_iterator<std::string const*,std::vector<std::string>>::operator+(
                (const __gnu_cxx::__normal_iterator<const std::string*,std::vector<std::string> > *const)&__for_end,
                1LL)._M_current;
  __last = std::vector<std::string>::end(param_vec)._M_current;
  std::allocator<std::string>::allocator(&__a);
  std::vector<std::string>::vector<__gnu_cxx::__normal_iterator<std::string const*,std::vector<std::string>>,void>(
    (std::vector<std::string> *const)(v4 + 224),
    (__gnu_cxx::__normal_iterator<const std::string*,std::vector<std::string> >)M_current,
    (__gnu_cxx::__normal_iterator<const std::string*,std::vector<std::string> >)__last,
    &__a);
  std::allocator<std::string>::~allocator(&__a);
  if ( common::tools::StringUtils::strVecToNumVec<unsigned int>(
         (const std::vector<std::string> *)(v4 + 224),
         (std::vector<unsigned int> *)(v4 + 160)) )
  {
    std::string::operator=(ret_msg, "strVecToNumVec failed");
    v3 = -1;
    v16 = 0;
  }
  else
  {
    if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
      __asan_report_load8();
    Player::getAvatarComp(context->player);
    PlayerAvatarComp::getTeamEntity((const PlayerAvatarComp *const)(v4 + 96));
    if ( std::operator==<AvatarTeamEntity>((const std::shared_ptr<AvatarTeamEntity> *)(v4 + 96), 0LL) )
    {
      std::string::operator=(ret_msg, "team entity is null");
      v3 = -1;
      v17 = 0;
    }
    else
    {
      ServiceBox::findService<GameserverService>();
      GameserverService::getConfig((GameserverService *const)(v4 + 128));
      config_mgr = &std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 128))->design_config.txt_config_mgr.activity_instable_spray_mgr;
      std::shared_ptr<Config>::~shared_ptr((std::shared_ptr<Config> *const)(v4 + 128));
      __for_range = &config_mgr->instable_spray_level_excel_config_map;
      __for_begin._M_cur = std::unordered_map<unsigned int,data::InstableSprayLevelExcelConfig>::begin(&config_mgr->instable_spray_level_excel_config_map)._M_cur;
      __for_end._M_cur = std::unordered_map<unsigned int,data::InstableSprayLevelExcelConfig>::end(__for_range)._M_cur;
      while ( std::__detail::operator!=<std::pair<unsigned int const,data::InstableSprayLevelExcelConfig>,false>(
                &__for_begin,
                &__for_end) )
      {
        v38 = std::__detail::_Node_const_iterator<std::pair<unsigned int const,data::InstableSprayLevelExcelConfig>,false,false>::operator*(&__for_begin);
        level_id = std::get<0ul,unsigned int const,data::InstableSprayLevelExcelConfig>(v38);
        level_config = (std::tuple_element<1,const std::pair<unsigned int const,data::InstableSprayLevelExcelConfig> >::type *)std::get<1ul,unsigned int const,data::InstableSprayLevelExcelConfig>(v38);
        if ( *(_BYTE *)(((unsigned __int64)&context->scene >> 3) + 0x7FFF8000) )
          __asan_report_load8();
        GalleryComp = (unsigned int)Scene::getGalleryComp(context->scene);
        if ( *(_BYTE *)(((unsigned __int64)&level_config->gallery_id >> 3) + 0x7FFF8000) != 0
          && (char)((((_BYTE)level_config + 12) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&level_config->gallery_id >> 3)
                                                                      + 0x7FFF8000) )
        {
          __asan_report_load4(&level_config->gallery_id);
        }
        SceneGalleryComp::findGallery<InstableSprayGallery>((SceneGalleryComp *const)(v4 + 128), GalleryComp);
        if ( std::operator!=<InstableSprayGallery>((const std::shared_ptr<InstableSprayGallery> *)(v4 + 128), 0LL) )
        {
          std::vector<unsigned int>::vector((std::vector<unsigned int> *const)(v4 + 288));
          for ( i = 0; ; ++i )
          {
            v19 = i;
            if ( v19 >= std::vector<unsigned int>::size(&level_config->buff_id_list) )
              break;
            v20 = std::vector<unsigned int>::operator[](&level_config->buff_id_list, i);
            v21 = v20;
            if ( *(_BYTE *)(((unsigned __int64)v20 >> 3) + 0x7FFF8000) != 0
              && (char)(((unsigned __int8)v20 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)v20 >> 3) + 0x7FFF8000) )
            {
              __asan_report_load4(v20);
            }
            *(_DWORD *)(v4 + 32) = *v21;
            buff_config_ptr = data::ActivityInstableSprayExcelConfigMgrBase::findInstableSprayBuffExcelConfig(
                                config_mgr,
                                *(_DWORD *)(v4 + 32));
            if ( !buff_config_ptr )
            {
              std::to_string(&__rhs, *(_DWORD *)(v4 + 32));
              std::operator+<char>(&v44, "invalid buff_id: ", &__rhs);
              std::string::operator=(ret_msg, &v44);
              std::string::~string(&v44);
              std::string::~string(&__rhs);
              v3 = -1;
              v22 = 0;
              goto LABEL_43;
            }
            *(_DWORD *)(v4 + 48) = i + 1;
            if ( common::tools::MiscUtils::isContains<unsigned int>(
                   (std::vector<unsigned int> *)(v4 + 160),
                   (const unsigned int *)(v4 + 48)) )
            {
              v23 = std::__shared_ptr_access<AvatarTeamEntity,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<AvatarTeamEntity,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 96));
              Creature::setServerGlobalValue(v23, &buff_config_ptr->sgv, 1.0, 1);
              std::vector<unsigned int>::emplace_back<unsigned int &>(
                (std::vector<unsigned int> *const)(v4 + 288),
                (unsigned int *)(v4 + 32),
                (unsigned int *)(v4 + 32));
              v24 = std::__shared_ptr_access<InstableSprayGallery,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<InstableSprayGallery,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 128));
              InstableSprayGallery::updateBuffByGm(v24, *(_DWORD *)(v4 + 32), 0x258u);
            }
            else
            {
              v25 = std::__shared_ptr_access<AvatarTeamEntity,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<AvatarTeamEntity,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 96));
              Creature::setServerGlobalValue(v25, &buff_config_ptr->sgv, 0.0, 1);
              v26 = std::__shared_ptr_access<InstableSprayGallery,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<InstableSprayGallery,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 128));
              InstableSprayGallery::updateBuffByGm(v26, *(_DWORD *)(v4 + 32), 0);
            }
          }
          v27 = std::__shared_ptr_access<InstableSprayGallery,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<InstableSprayGallery,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 128));
          std::vector<unsigned int>::vector(&p_buff_id_vec, (const std::vector<unsigned int> *)(v4 + 288));
          InstableSprayGallery::setBuffByGm(v27, &p_buff_id_vec);
          std::vector<unsigned int>::~vector(&p_buff_id_vec);
          v22 = 1;
LABEL_43:
          std::vector<unsigned int>::~vector((std::vector<unsigned int> *const)(v4 + 288));
          v28 = v22 != 0;
        }
        else
        {
          v28 = 2;
        }
        std::shared_ptr<InstableSprayGallery>::~shared_ptr((std::shared_ptr<InstableSprayGallery> *const)(v4 + 128));
        if ( !v28 )
        {
          v17 = 0;
          goto LABEL_50;
        }
        if ( v28 != 2 )
          break;
        std::__detail::_Node_const_iterator<std::pair<unsigned int const,data::InstableSprayLevelExcelConfig>,false,false>::operator++(&__for_begin);
      }
      v17 = 1;
    }
LABEL_50:
    std::shared_ptr<AvatarTeamEntity>::~shared_ptr((std::shared_ptr<AvatarTeamEntity> *const)(v4 + 96));
    v16 = v17 == 1;
  }
  std::vector<std::string>::~vector((std::vector<std::string> *const)(v4 + 224));
  std::vector<unsigned int>::~vector((std::vector<unsigned int> *const)(v4 + 160));
  if ( v16 )
    goto LABEL_55;
LABEL_56:
  std::shared_ptr<InstableSprayActivity>::~shared_ptr((std::shared_ptr<InstableSprayActivity> *const)(v4 + 64));
  result = v3;
  if ( v45 == (char *)v4 )
  {
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8008) = 0LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8010) = 0LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8018) = 0LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8020) = 0LL;
    *(_DWORD *)((v4 >> 3) + 0x7FFF8028) = 0;
  }
  else
  {
    *(_QWORD *)v4 = 1172321806LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8020) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v4 >> 3) + 0x7FFF8028) = -168430091;
  }
  return result;
};

// Line 21542: range 0000000017D7EDC4-0000000017D7EE66
void __cdecl procTreasureSeelieRegister::procTreasureSeelieRegister(procTreasureSeelieRegister *const this)
{
  std::function<int(GmContext&,const std::vector<std::string>&,std::string&)> *v1; // rax
  std::allocator<char> __a; // [rsp+1Fh] [rbp-31h] BYREF
  std::string __k; // [rsp+20h] [rbp-30h] BYREF

  std::allocator<char>::allocator(&__a);
  std::string::basic_string<std::allocator<char>>(&__k, "TREASURE_SEELIE", &__a);
  v1 = std::unordered_map<std::string,std::function<int ()(GmContext &,std::vector<std::string> const&,std::string&)>>::operator[](
         &GmUtils::op_func_map[abi:cxx11],
         &__k);
  std::function<int ()(GmContext &,std::vector<std::string> const&,std::string&)>::operator=<int (&)(GmContext &,std::vector<std::string> const&,std::string&)>(
    v1,
    (int (*)(GmContext *, const std::vector<std::string> *, std::string *))procTreasureSeelie);
  std::string::~string(&__k);
  std::allocator<char>::~allocator(&__a);
};

// Line 21543: range 0000000017C61DD3-0000000017C6238E
int32_t __cdecl procTreasureSeelie(GmContext *context, const std::vector<std::string> *param_vec, std::string *ret_msg)
{
  unsigned __int64 v3; // r12
  __int64 v4; // rax
  _DWORD *v5; // r13
  int32_t v6; // r14d
  std::__shared_ptr_access<TreasureSeelieActivity,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v7; // rax
  const std::string *v8; // rax
  const std::string *v9; // rax
  TreasureSeelieActivity *v10; // rax
  const std::string *v11; // rax
  const std::string *v12; // rax
  TreasureSeelieActivity *v13; // rax
  const std::string *v14; // rax
  const std::string *v15; // rax
  TreasureSeelieActivity *v16; // rax
  int32_t result; // eax
  std::string v19; // [rsp+20h] [rbp-F0h] BYREF
  std::string v20; // [rsp+40h] [rbp-D0h] BYREF
  common::milog::MiLogStream v21; // [rsp+60h] [rbp-B0h] BYREF
  char v22[144]; // [rsp+80h] [rbp-90h] BYREF

  v3 = (unsigned __int64)v22;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_1(96LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "2 48 4 9 day:21599 64 16 18 activity_ptr:21549";
  *(_QWORD *)(v3 + 16) = procTreasureSeelie;
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = -234556943;
  v5[536862722] = -202178560;
  if ( std::vector<std::string>::empty(param_vec) )
  {
    common::milog::MiLogStream::create(
      &v21,
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/player/gm/player_gm_comp.cpp",
      "procTreasureSeelie",
      21546);
    common::milog::MiLogStream::operator<<<char [17],(char *[17])0>(&v21, "param not enough");
    common::milog::MiLogStream::~MiLogStream(&v21);
    v6 = -1;
    goto LABEL_30;
  }
  if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
    __asan_report_load8();
  Player::getActivityComp(context->player);
  PlayerActivityComp::findOpenningActivity<TreasureSeelieActivity>((PlayerActivityComp *const)(v3 + 64));
  if ( !std::operator==<TreasureSeelieActivity>(0LL, (const std::shared_ptr<TreasureSeelieActivity> *)(v3 + 64)) )
  {
    v7 = std::__shared_ptr_access<TreasureSeelieActivity,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<TreasureSeelieActivity,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 64));
    if ( BaseActivity::isSettled((const BaseActivity *const)v7) )
    {
      std::string::operator=(ret_msg, "activity settled!");
      v6 = -1;
      goto LABEL_29;
    }
    v8 = std::vector<std::string>::operator[](param_vec, 0LL);
    if ( std::operator==<char>(v8, "OPEN_REGION") )
    {
      if ( std::vector<std::string>::size(param_vec) <= 1 )
      {
LABEL_24:
        std::string::operator=(ret_msg, "param not enough");
        v6 = -1;
        goto LABEL_29;
      }
      *(_DWORD *)(v3 + 48) = 0;
      v9 = std::vector<std::string>::operator[](param_vec, 1uLL);
      if ( !common::tools::StringUtils::strToNum<unsigned int>(v9, (unsigned int *)(v3 + 48), 1) )
      {
        v10 = std::__shared_ptr_access<TreasureSeelieActivity,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<TreasureSeelieActivity,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 64));
        TreasureSeelieActivity::openRegionByGm[abi:cxx11](&v19, v10, *(_DWORD *)(v3 + 48));
        std::string::operator=(ret_msg, &v19);
        std::string::~string(&v19);
        v6 = 0;
        goto LABEL_29;
      }
    }
    else
    {
      v11 = std::vector<std::string>::operator[](param_vec, 0LL);
      if ( std::operator==<char>(v11, "FINISH_REGION") )
      {
        if ( std::vector<std::string>::size(param_vec) <= 1 )
          goto LABEL_24;
        *(_DWORD *)(v3 + 48) = 0;
        v12 = std::vector<std::string>::operator[](param_vec, 1uLL);
        if ( !common::tools::StringUtils::strToNum<unsigned int>(v12, (unsigned int *)(v3 + 48), 1) )
        {
          v13 = std::__shared_ptr_access<TreasureSeelieActivity,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<TreasureSeelieActivity,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 64));
          TreasureSeelieActivity::finishRegionByGm[abi:cxx11](&v20, v13, *(_DWORD *)(v3 + 48));
          std::string::operator=(ret_msg, &v20);
          std::string::~string(&v20);
          v6 = 0;
          goto LABEL_29;
        }
      }
      else
      {
        v14 = std::vector<std::string>::operator[](param_vec, 0LL);
        if ( !std::operator==<char>(v14, "RESET_REGION") )
        {
          v6 = 0;
          goto LABEL_29;
        }
        if ( std::vector<std::string>::size(param_vec) <= 1 )
          goto LABEL_24;
        *(_DWORD *)(v3 + 48) = 0;
        v15 = std::vector<std::string>::operator[](param_vec, 1uLL);
        if ( !common::tools::StringUtils::strToNum<unsigned int>(v15, (unsigned int *)(v3 + 48), 1) )
        {
          v16 = std::__shared_ptr_access<TreasureSeelieActivity,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<TreasureSeelieActivity,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 64));
          TreasureSeelieActivity::resetRegionByGm[abi:cxx11]((std::string *)&v21, v16, *(_DWORD *)(v3 + 48));
          std::string::operator=(ret_msg, &v21);
          std::string::~string(&v21);
          v6 = 0;
          goto LABEL_29;
        }
      }
    }
    std::string::operator=(ret_msg, &off_26379900);
    v6 = -1;
    goto LABEL_29;
  }
  std::string::operator=(ret_msg, "activity is not open");
  v6 = -1;
LABEL_29:
  std::shared_ptr<TreasureSeelieActivity>::~shared_ptr((std::shared_ptr<TreasureSeelieActivity> *const)(v3 + 64));
LABEL_30:
  result = v6;
  if ( v22 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8008) = 0;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8008) = -168430091;
  }
  return result;
};

// Line 21612: range 0000000017D7EE68-0000000017D7EF0A
void __cdecl procMuqadasActivityRegister::procMuqadasActivityRegister(procMuqadasActivityRegister *const this)
{
  std::function<int(GmContext&,const std::vector<std::string>&,std::string&)> *v1; // rax
  std::allocator<char> __a; // [rsp+1Fh] [rbp-31h] BYREF
  std::string __k; // [rsp+20h] [rbp-30h] BYREF

  std::allocator<char>::allocator(&__a);
  std::string::basic_string<std::allocator<char>>(&__k, "MUQADAS", &__a);
  v1 = std::unordered_map<std::string,std::function<int ()(GmContext &,std::vector<std::string> const&,std::string&)>>::operator[](
         &GmUtils::op_func_map[abi:cxx11],
         &__k);
  std::function<int ()(GmContext &,std::vector<std::string> const&,std::string&)>::operator=<int (&)(GmContext &,std::vector<std::string> const&,std::string&)>(
    v1,
    (int (*)(GmContext *, const std::vector<std::string> *, std::string *))procMuqadasActivity);
  std::string::~string(&__k);
  std::allocator<char>::~allocator(&__a);
};

// Line 21613: range 0000000017C6238F-0000000017C62C21
int32_t __cdecl procMuqadasActivity(
        GmContext *context,
        const std::vector<std::string> *param_vec,
        std::string *ret_msg)
{
  int32_t v3; // r14d
  unsigned __int64 v4; // r13
  __int64 v5; // rax
  _DWORD *v6; // r12
  const std::string *v7; // rax
  const std::string *v8; // rax
  std::__shared_ptr_access<MuqadasPotionActivity,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v9; // rax
  int v10; // r15d
  const std::string *v11; // rax
  _BOOL4 v12; // r15d
  const std::string *v13; // rax
  Scene *v14; // rax
  uint32_t GalleryComp; // eax
  int v16; // r15d
  const std::string *v17; // rax
  Scene *v18; // rax
  SceneGalleryComp *v19; // r15
  uint32_t Uid; // eax
  MuqadasPotionGallery *v21; // rax
  int32_t result; // eax
  char v24[336]; // [rsp+30h] [rbp-150h] BYREF

  v4 = (unsigned __int64)v24;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v5 = __asan_stack_malloc_3(288LL);
    if ( v5 )
      v4 = v5;
  }
  *(_QWORD *)v4 = 1102416563LL;
  *(_QWORD *)(v4 + 8) = "7 32 4 16 gallery_id:21667 48 4 16 add_energy:21680 64 16 18 activity_ptr:21614 96 16 19 cur_sce"
                        "ne_ptr:21660 128 16 17 gallery_ptr:21673 160 24 9 req:21642 224 32 9 rsp:21644";
  *(_QWORD *)(v4 + 16) = procMuqadasActivity;
  v6 = (_DWORD *)(v4 >> 3);
  v6[536862720] = -235802127;
  v6[536862721] = -234556924;
  v6[536862722] = -219021312;
  v6[536862723] = -219021312;
  v6[536862724] = -219021312;
  v6[536862725] = -234881024;
  v6[536862726] = -218959118;
  v6[536862728] = -202116109;
  if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
    __asan_report_load8();
  Player::getActivityComp(context->player);
  PlayerActivityComp::findOpenningActivity<MuqadasPotionActivity>((PlayerActivityComp *const)(v4 + 64));
  if ( std::operator==<MuqadasPotionActivity>(0LL, (const std::shared_ptr<MuqadasPotionActivity> *)(v4 + 64)) )
  {
    std::string::operator=(ret_msg, "activity is not open");
    v3 = -1;
    goto LABEL_42;
  }
  if ( !std::vector<std::string>::size(param_vec) )
    goto LABEL_21;
  v7 = std::vector<std::string>::operator[](param_vec, 0LL);
  if ( !std::operator==<char>(v7, "ENTER_LEVEL") )
  {
    v11 = std::vector<std::string>::operator[](param_vec, 0LL);
    if ( std::operator==<char>(v11, "ADD_ENERGY") )
    {
      if ( std::vector<std::string>::size(param_vec) <= 2 )
      {
LABEL_21:
        std::string::operator=(ret_msg, "param not enough");
        v3 = -1;
        goto LABEL_42;
      }
      if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
        __asan_report_load8();
      Player::getSceneComp(context->player);
      PlayerSceneComp::getCurScene((const PlayerSceneComp *const)(v4 + 96));
      if ( std::operator==<Scene>((const std::shared_ptr<Scene> *)(v4 + 96), 0LL) )
      {
        common::milog::MiLogStream::create(
          (common::milog::MiLogStream *)(v4 + 224),
          &common::milog::MiLogDefault::default_log_obj_,
          3u,
          "./src/player/gm/player_gm_comp.cpp",
          "procMuqadasActivity",
          21663);
        common::milog::MiLogStream::operator<<<char [21],(char *[21])0>(
          (common::milog::MiLogStream *const)(v4 + 224),
          (const char (*)[21])off_26366CE0);
        common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v4 + 224));
        v3 = -1;
        v12 = 0;
      }
      else
      {
        *(_DWORD *)(v4 + 32) = 0;
        v13 = std::vector<std::string>::operator[](param_vec, 1uLL);
        if ( common::tools::StringUtils::strToNum<unsigned int>(v13, (unsigned int *)(v4 + 32), 1) )
        {
          std::string::operator=(ret_msg, "strToNum failed");
          v3 = -1;
          v12 = 0;
        }
        else
        {
          v14 = std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 96));
          GalleryComp = (unsigned int)Scene::getGalleryComp(v14);
          SceneGalleryComp::findGallery<MuqadasPotionGallery>((SceneGalleryComp *const)(v4 + 128), GalleryComp);
          if ( std::operator==<MuqadasPotionGallery>(0LL, (const std::shared_ptr<MuqadasPotionGallery> *)(v4 + 128)) )
          {
            common::milog::MiLogStream::create(
              (common::milog::MiLogStream *)(v4 + 224),
              &common::milog::MiLogDefault::default_log_obj_,
              3u,
              "./src/player/gm/player_gm_comp.cpp",
              "procMuqadasActivity",
              21676);
            common::milog::MiLogStream::operator<<<char [30],(char *[30])0>(
              (common::milog::MiLogStream *const)(v4 + 224),
              (const char (*)[30])off_26379B40);
            common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v4 + 224));
            v3 = -1;
            v16 = 0;
          }
          else
          {
            *(_DWORD *)(v4 + 48) = 0;
            v17 = std::vector<std::string>::operator[](param_vec, 2uLL);
            if ( common::tools::StringUtils::strToNum<unsigned int>(v17, (unsigned int *)(v4 + 48), 1) )
            {
              std::string::operator=(ret_msg, "strToNum failed");
              v3 = -1;
              v16 = 0;
            }
            else if ( *(_DWORD *)(v4 + 48) <= 0x3E8u )
            {
              v18 = std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 96));
              v19 = Scene::getGalleryComp(v18);
              if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
                __asan_report_load8();
              Uid = Player::getUid(context->player);
              if ( !SceneGalleryComp::isPlayerInStartedGallery<MuqadasPotionGallery>(v19, Uid) )
              {
                common::milog::MiLogStream::create(
                  (common::milog::MiLogStream *)(v4 + 224),
                  &common::milog::MiLogDefault::default_log_obj_,
                  3u,
                  "./src/player/gm/player_gm_comp.cpp",
                  "procMuqadasActivity",
                  21694);
                common::milog::MiLogStream::operator<<<char [30],(char *[30])0>(
                  (common::milog::MiLogStream *const)(v4 + 224),
                  (const char (*)[30])off_26379B40);
                common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v4 + 224));
                v3 = -1;
                v16 = 0;
              }
              else
              {
                v21 = std::__shared_ptr_access<MuqadasPotionGallery,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<MuqadasPotionGallery,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 128));
                MuqadasPotionGallery::addEnergyByGM(v21, *(_DWORD *)(v4 + 48));
                v16 = 1;
              }
            }
            else
            {
              std::string::operator=(ret_msg, "add_energy too large, max_value:1000");
              v3 = -1;
              v16 = 0;
            }
          }
          std::shared_ptr<MuqadasPotionGallery>::~shared_ptr((std::shared_ptr<MuqadasPotionGallery> *const)(v4 + 128));
          v12 = v16 == 1;
        }
      }
      std::shared_ptr<Scene>::~shared_ptr((std::shared_ptr<Scene> *const)(v4 + 96));
      if ( !v12 )
        goto LABEL_42;
    }
LABEL_41:
    v3 = 0;
    goto LABEL_42;
  }
  if ( std::vector<std::string>::size(param_vec) <= 1 )
    goto LABEL_21;
  *(_DWORD *)(v4 + 48) = 0;
  v8 = std::vector<std::string>::operator[](param_vec, 1uLL);
  if ( common::tools::StringUtils::strToNum<unsigned int>(v8, (unsigned int *)(v4 + 48), 1) )
  {
    std::string::operator=(ret_msg, "strToNum failed");
    v3 = -1;
    goto LABEL_42;
  }
  proto::MuqadasPotionActivityEnterDungeonReq::MuqadasPotionActivityEnterDungeonReq((proto::MuqadasPotionActivityEnterDungeonReq *const)(v4 + 160));
  proto::MuqadasPotionActivityEnterDungeonReq::set_level_id(
    (proto::MuqadasPotionActivityEnterDungeonReq *const)(v4 + 160),
    *(_DWORD *)(v4 + 48));
  proto::MuqadasPotionActivityEnterDungeonRsp::MuqadasPotionActivityEnterDungeonRsp((proto::MuqadasPotionActivityEnterDungeonRsp *const)(v4 + 224));
  v9 = std::__shared_ptr_access<MuqadasPotionActivity,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<MuqadasPotionActivity,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 64));
  if ( MuqadasPotionActivity::onMuqadasPotionActivityEnterDungeonReq(
         v9,
         (const proto::MuqadasPotionActivityEnterDungeonReq *)(v4 + 160),
         (proto::MuqadasPotionActivityEnterDungeonRsp *)(v4 + 224)) )
  {
    std::string::operator=(ret_msg, "[GM] onGearActivityStartPlayGearReq failed");
    v3 = -1;
    v10 = 0;
  }
  else
  {
    v10 = 1;
  }
  proto::MuqadasPotionActivityEnterDungeonRsp::~MuqadasPotionActivityEnterDungeonRsp((proto::MuqadasPotionActivityEnterDungeonRsp *const)(v4 + 224));
  proto::MuqadasPotionActivityEnterDungeonReq::~MuqadasPotionActivityEnterDungeonReq((proto::MuqadasPotionActivityEnterDungeonReq *const)(v4 + 160));
  if ( v10 == 1 )
    goto LABEL_41;
LABEL_42:
  std::shared_ptr<MuqadasPotionActivity>::~shared_ptr((std::shared_ptr<MuqadasPotionActivity> *const)(v4 + 64));
  result = v3;
  if ( v24 == (char *)v4 )
  {
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8008) = 0LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8010) = 0LL;
    *(_DWORD *)((v4 >> 3) + 0x7FFF8018) = 0;
    *(_DWORD *)((v4 >> 3) + 0x7FFF8020) = 0;
  }
  else
  {
    *(_QWORD *)v4 = 1172321806LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v4 >> 3) + 0x7FFF8020) = -168430091;
  }
  return result;
};

// Line 21704: range 0000000017D7EF0C-0000000017D7EFAE
void __cdecl procQuickHitTreeRegister::procQuickHitTreeRegister(procQuickHitTreeRegister *const this)
{
  std::function<int(GmContext&,const std::vector<std::string>&,std::string&)> *v1; // rax
  std::allocator<char> __a; // [rsp+1Fh] [rbp-31h] BYREF
  std::string __k; // [rsp+20h] [rbp-30h] BYREF

  std::allocator<char>::allocator(&__a);
  std::string::basic_string<std::allocator<char>>(&__k, "QUICKHITTREE", &__a);
  v1 = std::unordered_map<std::string,std::function<int ()(GmContext &,std::vector<std::string> const&,std::string&)>>::operator[](
         &GmUtils::op_func_map[abi:cxx11],
         &__k);
  std::function<int ()(GmContext &,std::vector<std::string> const&,std::string&)>::operator=<int (&)(GmContext &,std::vector<std::string> const&,std::string&)>(
    v1,
    (int (*)(GmContext *, const std::vector<std::string> *, std::string *))procQuickHitTree);
  std::string::~string(&__k);
  std::allocator<char>::~allocator(&__a);
};

// Line 21705: range 0000000017C62C22-0000000017C63338
int32_t __cdecl procQuickHitTree(GmContext *context, const std::vector<std::string> *param_vec, std::string *ret_msg)
{
  unsigned __int64 v3; // r13
  __int64 v4; // rax
  _DWORD *v5; // rbx
  int32_t result; // eax
  const std::string *v7; // rax
  __int64 v8; // rax
  __int64 v9; // rax
  __int64 v10; // rax
  __int64 v11; // rax
  __int64 v12; // rax
  double v13; // xmm0_8
  __int64 v14; // rax
  PlayerSceneComp *SceneComp; // rax
  __int64 v16; // rcx
  uint32_t v17; // eax
  __int64 v18; // rax
  __int64 v19; // r14
  __int64 v20; // rax
  __int64 v21; // rcx
  __int64 v22; // rax
  __int64 v23; // rcx
  __int64 v24; // rax
  __int64 v25; // rcx
  __int64 v26; // rax
  __int64 v27; // rax
  __int64 v28; // rcx
  __int64 v29; // rax
  __int64 v30; // rcx
  __int64 v31; // rax
  __int64 v32; // rcx
  __int64 v33; // rax
  uint32_t idx; // [rsp+2Ch] [rbp-294h]
  std::vector<HitTreePos>::const_iterator __for_begin; // [rsp+30h] [rbp-290h] BYREF
  std::vector<HitTreePos>::const_iterator __for_end; // [rsp+38h] [rbp-288h] BYREF
  const std::vector<HitTreePos> *__for_range; // [rsp+40h] [rbp-280h]
  const HitTreePos *hit_tree_pos; // [rsp+48h] [rbp-278h]
  common::milog::MiLogStream v40; // [rsp+50h] [rbp-270h] BYREF
  char v41[592]; // [rsp+70h] [rbp-250h] BYREF

  v3 = (unsigned __int64)v41;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_4(544LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "2 48 12 16 player_pos:21715 80 392 8 ss:21714";
  *(_QWORD *)(v3 + 16) = procQuickHitTree;
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = 61937;
  v5[536862721] = 0x4000000;
  v5[536862722] = 62194;
  v5[536862734] = -218103808;
  v5[536862735] = -202116109;
  v5[536862736] = -202116109;
  if ( std::vector<std::string>::empty(param_vec) )
  {
    common::milog::MiLogStream::create(
      &v40,
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/player/gm/player_gm_comp.cpp",
      "procQuickHitTree",
      21708);
    common::milog::MiLogStream::operator<<<char [17],(char *[17])0>(&v40, "param not enough");
    common::milog::MiLogStream::~MiLogStream(&v40);
    result = -1;
  }
  else
  {
    v7 = std::vector<std::string>::operator[](param_vec, 0LL);
    if ( std::operator==<char>(v7, "SHOW") )
    {
      std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream(v3 + 80);
      if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
        __asan_report_load8();
      *(Vector3 *)(v3 + 48) = Player::getPosition(context->player);
      v8 = std::operator<<<std::char_traits<char>>(v3 + 96, "player pos: [");
      v9 = std::ostream::operator<<(v8, *(double *)_mm_cvtsi32_si128(*(_DWORD *)(v3 + 48)).m128i_i64);
      v10 = std::operator<<<std::char_traits<char>>(v9, ", ");
      v11 = std::ostream::operator<<(v10, *(double *)_mm_cvtsi32_si128(*(_DWORD *)(v3 + 52)).m128i_i64);
      v12 = std::operator<<<std::char_traits<char>>(v11, ", ");
      *(_QWORD *)&v13 = _mm_cvtsi32_si128(*(_DWORD *)(v3 + 56)).m128i_u64[0];
      v14 = std::ostream::operator<<(v12, v13);
      std::operator<<<std::char_traits<char>>(v14, "]\n");
      idx = 1;
      if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
        v13 = __asan_report_load8();
      SceneComp = Player::getSceneComp(context->player);
      __for_range = PlayerSceneComp::getHitTreePosInfo(SceneComp);
      __for_begin._M_current = std::vector<HitTreePos>::begin(__for_range)._M_current;
      __for_end._M_current = std::vector<HitTreePos>::end(__for_range)._M_current;
      while ( __gnu_cxx::operator!=<HitTreePos const*,std::vector<HitTreePos>>(&__for_begin, &__for_end) )
      {
        hit_tree_pos = __gnu_cxx::__normal_iterator<HitTreePos const*,std::vector<HitTreePos>>::operator*(&__for_begin);
        v16 = std::operator<<<std::char_traits<char>>(v3 + 96, "tree idx:");
        v17 = idx++;
        v18 = std::ostream::operator<<(v16, v17);
        v19 = std::operator<<<std::char_traits<char>>(v18, ", dis:");
        *(float *)&v13 = getDistance((const Vector3 *)(v3 + 48), &hit_tree_pos->tree_pos);
        v20 = std::ostream::operator<<(v19, v13);
        v21 = std::operator<<<std::char_traits<char>>(v20, ", pos: [");
        if ( *(_BYTE *)(((unsigned __int64)hit_tree_pos >> 3) + 0x7FFF8000) != 0
          && *(_BYTE *)(((unsigned __int64)hit_tree_pos >> 3) + 0x7FFF8000) <= 3 )
        {
          __asan_report_load4(hit_tree_pos);
        }
        v22 = std::ostream::operator<<(v21, *(double *)_mm_cvtsi32_si128(LODWORD(hit_tree_pos->tree_pos.x)).m128i_i64);
        v23 = std::operator<<<std::char_traits<char>>(v22, ", ");
        if ( *(_BYTE *)(((unsigned __int64)&hit_tree_pos->tree_pos.y >> 3) + 0x7FFF8000) != 0
          && (char)((((_BYTE)hit_tree_pos + 4) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&hit_tree_pos->tree_pos.y >> 3)
                                                                     + 0x7FFF8000) )
        {
          __asan_report_load4(&hit_tree_pos->tree_pos.y);
        }
        v24 = std::ostream::operator<<(v23, *(double *)_mm_cvtsi32_si128(LODWORD(hit_tree_pos->tree_pos.y)).m128i_i64);
        v25 = std::operator<<<std::char_traits<char>>(v24, ", ");
        if ( *(_BYTE *)(((unsigned __int64)&hit_tree_pos->tree_pos.z >> 3) + 0x7FFF8000) != 0
          && *(_BYTE *)(((unsigned __int64)&hit_tree_pos->tree_pos.z >> 3) + 0x7FFF8000) <= 3 )
        {
          __asan_report_load4(&hit_tree_pos->tree_pos.z);
        }
        *(_QWORD *)&v13 = _mm_cvtsi32_si128(LODWORD(hit_tree_pos->tree_pos.z)).m128i_u64[0];
        v26 = std::ostream::operator<<(v25, v13);
        v27 = std::operator<<<std::char_traits<char>>(v26, "], ");
        v28 = std::operator<<<std::char_traits<char>>(v27, "type: ");
        if ( *(_BYTE *)(((unsigned __int64)&hit_tree_pos->tree_type >> 3) + 0x7FFF8000) != 0
          && (char)((((_BYTE)hit_tree_pos + 12) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&hit_tree_pos->tree_type >> 3)
                                                                      + 0x7FFF8000) )
        {
          v13 = __asan_report_load4(&hit_tree_pos->tree_type);
        }
        v29 = std::ostream::operator<<(v28, (unsigned int)hit_tree_pos->tree_type);
        v30 = std::operator<<<std::char_traits<char>>(v29, ", droptimes: ");
        if ( *(_BYTE *)(((unsigned __int64)&hit_tree_pos->drop_times >> 3) + 0x7FFF8000) != 0
          && *(_BYTE *)(((unsigned __int64)&hit_tree_pos->drop_times >> 3) + 0x7FFF8000) <= 3 )
        {
          v13 = __asan_report_load4(&hit_tree_pos->drop_times);
        }
        v31 = std::ostream::operator<<(v30, hit_tree_pos->drop_times);
        v32 = std::operator<<<std::char_traits<char>>(v31, ", hitts: ");
        if ( *(_BYTE *)(((unsigned __int64)&hit_tree_pos->last_hit_ms >> 3) + 0x7FFF8000) )
          v13 = __asan_report_load8();
        v33 = std::ostream::operator<<(v32, hit_tree_pos->last_hit_ms);
        std::operator<<<std::char_traits<char>>(v33, "\n");
        __gnu_cxx::__normal_iterator<HitTreePos const*,std::vector<HitTreePos>>::operator++(&__for_begin);
      }
      std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::str(&v40, v3 + 80);
      std::string::operator=(ret_msg, &v40);
      std::string::~string(&v40);
      std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream(v3 + 80);
    }
    result = 0;
  }
  if ( v41 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8008) = 0;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8038) = 0LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8040) = 0;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8020) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8028) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8030) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8038) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8040) = -168430091;
  }
  return result;
};

// Line 21732: range 0000000017D7EFB0-0000000017D7F052
void __cdecl procRockBoardExploreActivityRegister::procRockBoardExploreActivityRegister(
        procRockBoardExploreActivityRegister *const this)
{
  std::function<int(GmContext&,const std::vector<std::string>&,std::string&)> *v1; // rax
  std::allocator<char> __a; // [rsp+1Fh] [rbp-31h] BYREF
  std::string __k; // [rsp+20h] [rbp-30h] BYREF

  std::allocator<char>::allocator(&__a);
  std::string::basic_string<std::allocator<char>>(&__k, "ROCK_BOARD_EXPLORE", &__a);
  v1 = std::unordered_map<std::string,std::function<int ()(GmContext &,std::vector<std::string> const&,std::string&)>>::operator[](
         &GmUtils::op_func_map[abi:cxx11],
         &__k);
  std::function<int ()(GmContext &,std::vector<std::string> const&,std::string&)>::operator=<int (&)(GmContext &,std::vector<std::string> const&,std::string&)>(
    v1,
    (int (*)(GmContext *, const std::vector<std::string> *, std::string *))procRockBoardExploreActivity);
  std::string::~string(&__k);
  std::allocator<char>::~allocator(&__a);
};

// Line 21733: range 0000000017C63339-0000000017C637DA
int32_t __cdecl procRockBoardExploreActivity(
        GmContext *context,
        const std::vector<std::string> *param_vec,
        std::string *ret_msg)
{
  unsigned __int64 v3; // r12
  __int64 v4; // rax
  _DWORD *v5; // r13
  int32_t v6; // r14d
  const std::string *v7; // rax
  const std::string *v8; // rax
  std::__shared_ptr_access<RockBoardExploreActivity,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v9; // rax
  unsigned int v10; // edx
  const std::string *v11; // rax
  const std::string *v12; // rax
  std::__shared_ptr_access<RockBoardExploreActivity,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v13; // rax
  unsigned int v14; // edx
  const std::string *v15; // rax
  std::__shared_ptr_access<RockBoardExploreActivity,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v16; // rax
  unsigned int v17; // edx
  int32_t result; // eax
  common::milog::MiLogStream v20; // [rsp+20h] [rbp-B0h] BYREF
  char v21[144]; // [rsp+40h] [rbp-90h] BYREF

  v3 = (unsigned __int64)v21;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_1(96LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "2 48 4 14 stage_id:21768 64 16 18 activity_ptr:21739";
  *(_QWORD *)(v3 + 16) = procRockBoardExploreActivity;
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = -234556943;
  v5[536862722] = -202178560;
  if ( std::vector<std::string>::empty(param_vec) )
  {
    common::milog::MiLogStream::create(
      &v20,
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/player/gm/player_gm_comp.cpp",
      "procRockBoardExploreActivity",
      21736);
    common::milog::MiLogStream::operator<<<char [17],(char *[17])0>(&v20, "param not enough");
    common::milog::MiLogStream::~MiLogStream(&v20);
    v6 = -1;
    goto LABEL_24;
  }
  if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
    __asan_report_load8();
  Player::getActivityComp(context->player);
  PlayerActivityComp::findOpenningActivity<RockBoardExploreActivity>((PlayerActivityComp *const)(v3 + 64));
  if ( !std::operator==<RockBoardExploreActivity>(0LL, (const std::shared_ptr<RockBoardExploreActivity> *)(v3 + 64)) )
  {
    v7 = std::vector<std::string>::operator[](param_vec, 0LL);
    if ( std::operator==<char>(v7, "OPEN") )
    {
      if ( std::vector<std::string>::size(param_vec) <= 1 )
      {
LABEL_12:
        std::string::operator=(ret_msg, "param not enough");
        v6 = -1;
        goto LABEL_23;
      }
      *(_DWORD *)(v3 + 48) = 0;
      v8 = std::vector<std::string>::operator[](param_vec, 1uLL);
      if ( !common::tools::StringUtils::strToNum<unsigned int>(v8, (unsigned int *)(v3 + 48), 1) )
      {
        v9 = std::__shared_ptr_access<RockBoardExploreActivity,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<RockBoardExploreActivity,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 64));
        v10 = (char)RockBoardExploreActivity::openStageByGm(v9, *(_DWORD *)(v3 + 48));
        std::string::operator=(ret_msg, v10);
        v6 = 0;
        goto LABEL_23;
      }
    }
    else
    {
      v11 = std::vector<std::string>::operator[](param_vec, 0LL);
      if ( !std::operator==<char>(v11, "FINISH") )
      {
        v15 = std::vector<std::string>::operator[](param_vec, 0LL);
        if ( std::operator==<char>(v15, "RESET") )
        {
          v16 = std::__shared_ptr_access<RockBoardExploreActivity,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<RockBoardExploreActivity,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 64));
          v17 = (char)RockBoardExploreActivity::resetDataByGm(v16);
          std::string::operator=(ret_msg, v17);
          v6 = 0;
        }
        else
        {
          std::string::operator=(ret_msg, &off_26379FA0);
          v6 = -1;
        }
        goto LABEL_23;
      }
      if ( std::vector<std::string>::size(param_vec) <= 1 )
        goto LABEL_12;
      *(_DWORD *)(v3 + 48) = 0;
      v12 = std::vector<std::string>::operator[](param_vec, 1uLL);
      if ( !common::tools::StringUtils::strToNum<unsigned int>(v12, (unsigned int *)(v3 + 48), 1) )
      {
        v13 = std::__shared_ptr_access<RockBoardExploreActivity,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<RockBoardExploreActivity,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 64));
        v14 = (char)RockBoardExploreActivity::finishStageByGm(v13, *(_DWORD *)(v3 + 48));
        std::string::operator=(ret_msg, v14);
        v6 = 0;
        goto LABEL_23;
      }
    }
    std::string::operator=(ret_msg, "stage_id strToNum failed.");
    v6 = -1;
    goto LABEL_23;
  }
  std::string::operator=(ret_msg, "no activity open");
  v6 = -1;
LABEL_23:
  std::shared_ptr<RockBoardExploreActivity>::~shared_ptr((std::shared_ptr<RockBoardExploreActivity> *const)(v3 + 64));
LABEL_24:
  result = v6;
  if ( v21 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8008) = 0;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8008) = -168430091;
  }
  return result;
};

// Line 21790: range 0000000017D7F054-0000000017D7F0F6
void __cdecl procWindFieldActivityRegister::procWindFieldActivityRegister(procWindFieldActivityRegister *const this)
{
  std::function<int(GmContext&,const std::vector<std::string>&,std::string&)> *v1; // rax
  std::allocator<char> __a; // [rsp+1Fh] [rbp-31h] BYREF
  std::string __k; // [rsp+20h] [rbp-30h] BYREF

  std::allocator<char>::allocator(&__a);
  std::string::basic_string<std::allocator<char>>(&__k, "WIND_FIELD", &__a);
  v1 = std::unordered_map<std::string,std::function<int ()(GmContext &,std::vector<std::string> const&,std::string&)>>::operator[](
         &GmUtils::op_func_map[abi:cxx11],
         &__k);
  std::function<int ()(GmContext &,std::vector<std::string> const&,std::string&)>::operator=<int (&)(GmContext &,std::vector<std::string> const&,std::string&)>(
    v1,
    (int (*)(GmContext *, const std::vector<std::string> *, std::string *))procWindFieldActivity);
  std::string::~string(&__k);
  std::allocator<char>::~allocator(&__a);
};

// Line 21791: range 0000000017C637DB-0000000017C64029
int32_t __cdecl procWindFieldActivity(
        GmContext *context,
        const std::vector<std::string> *param_vec,
        std::string *ret_msg)
{
  unsigned __int64 v3; // r13
  __int64 v4; // rax
  _DWORD *v5; // r12
  int32_t v6; // r14d
  std::__shared_ptr_access<WindFieldActivity,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v7; // rax
  std::__shared_ptr_access<WindFieldActivity,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v8; // rax
  const std::string *v9; // rax
  const std::string *v10; // rax
  WindFieldActivity *v11; // rax
  __int64 v12; // rax
  const std::string *v13; // rax
  const std::string *v14; // rax
  WindFieldActivity *v15; // rax
  __int64 v16; // rax
  const std::string *v17; // rax
  WindFieldActivity *v18; // rax
  int32_t result; // eax
  char v21[32]; // [rsp+20h] [rbp-2B0h] BYREF
  char v22[32]; // [rsp+40h] [rbp-290h] BYREF
  common::milog::MiLogStream v23; // [rsp+60h] [rbp-270h] BYREF
  char v24[592]; // [rsp+80h] [rbp-250h] BYREF

  v3 = (unsigned __int64)v24;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_4(544LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "3 32 4 14 stage_id:21843 48 16 18 activity_ptr:21797 80 392 8 ss:21862";
  *(_QWORD *)(v3 + 16) = procWindFieldActivity;
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = 61956;
  v5[536862722] = 62194;
  v5[536862734] = -218103808;
  v5[536862735] = -202116109;
  v5[536862736] = -202116109;
  if ( std::vector<std::string>::empty(param_vec) )
  {
    common::milog::MiLogStream::create(
      &v23,
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/player/gm/player_gm_comp.cpp",
      "procWindFieldActivity",
      21794);
    common::milog::MiLogStream::operator<<<char [17],(char *[17])0>(&v23, "param not enough");
    common::milog::MiLogStream::~MiLogStream(&v23);
    v6 = -1;
    goto LABEL_32;
  }
  if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
    __asan_report_load8();
  Player::getActivityComp(context->player);
  PlayerActivityComp::findOpenningActivity<WindFieldActivity>((PlayerActivityComp *const)(v3 + 48));
  if ( !std::operator==<WindFieldActivity>(0LL, (const std::shared_ptr<WindFieldActivity> *)(v3 + 48)) )
  {
    v7 = std::__shared_ptr_access<WindFieldActivity,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<WindFieldActivity,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 48));
    if ( !BaseActivity::isOpening(v7, 0) )
    {
      common::milog::MiLogStream::create(
        &v23,
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/player/gm/player_gm_comp.cpp",
        "procWindFieldActivity",
        21805);
      common::milog::MiLogStream::operator<<<char [25],(char *[25])0>(
        &v23,
        (const char (*)[25])"WindFieldActivity close!");
      common::milog::MiLogStream::~MiLogStream(&v23);
      v6 = -1;
      goto LABEL_31;
    }
    v8 = std::__shared_ptr_access<WindFieldActivity,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<WindFieldActivity,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 48));
    if ( BaseActivity::isSettled(v8) )
    {
      common::milog::MiLogStream::create(
        &v23,
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/player/gm/player_gm_comp.cpp",
        "procWindFieldActivity",
        21810);
      common::milog::MiLogStream::operator<<<char [27],(char *[27])0>(
        &v23,
        (const char (*)[27])"WindFieldActivity settled!");
      common::milog::MiLogStream::~MiLogStream(&v23);
      v6 = -1;
      goto LABEL_31;
    }
    v9 = std::vector<std::string>::operator[](param_vec, 0LL);
    if ( std::operator==<char>(v9, "OPEN_STAGE") )
    {
      if ( std::vector<std::string>::size(param_vec) <= 1 )
      {
LABEL_16:
        std::string::operator=(ret_msg, "param not enough");
        v6 = -1;
        goto LABEL_31;
      }
      *(_DWORD *)(v3 + 32) = 0;
      v10 = std::vector<std::string>::operator[](param_vec, 1uLL);
      if ( !common::tools::StringUtils::strToNum<unsigned int>(v10, (unsigned int *)(v3 + 32), 1) )
      {
        v11 = std::__shared_ptr_access<WindFieldActivity,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<WindFieldActivity,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 48));
        if ( (unsigned int)WindFieldActivity::openActivityStage(v11, *(_DWORD *)(v3 + 32)) )
        {
          std::string::operator=(ret_msg, "OPEN_STAGE failed");
          v6 = -1;
        }
        else
        {
          std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream(v3 + 80);
          v12 = std::operator<<<std::char_traits<char>>(v3 + 96, "OPEN_STAGE succ! stage_id:");
          std::ostream::operator<<(v12, *(unsigned int *)(v3 + 32));
          std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::str(v21, v3 + 80);
          std::string::operator=(ret_msg, v21);
          std::string::~string(v21);
          v6 = 0;
          std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream(v3 + 80);
        }
        goto LABEL_31;
      }
    }
    else
    {
      v13 = std::vector<std::string>::operator[](param_vec, 0LL);
      if ( !std::operator==<char>(v13, "CLOSE_STAGE") )
      {
        v17 = std::vector<std::string>::operator[](param_vec, 0LL);
        if ( std::operator==<char>(v17, "RESET") )
        {
          v18 = std::__shared_ptr_access<WindFieldActivity,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<WindFieldActivity,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 48));
          WindFieldActivity::resetActivityDataByGm(v18);
          std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream(v3 + 80);
          std::operator<<<std::char_traits<char>>(v3 + 96, "RESET all data succ!");
          std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::str(&v23, v3 + 80);
          std::string::operator=(ret_msg, &v23);
          std::string::~string(&v23);
          v6 = 0;
          std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream(v3 + 80);
        }
        else
        {
          v6 = 0;
        }
        goto LABEL_31;
      }
      if ( std::vector<std::string>::size(param_vec) <= 1 )
        goto LABEL_16;
      *(_DWORD *)(v3 + 32) = 0;
      v14 = std::vector<std::string>::operator[](param_vec, 1uLL);
      if ( !common::tools::StringUtils::strToNum<unsigned int>(v14, (unsigned int *)(v3 + 32), 1) )
      {
        v15 = std::__shared_ptr_access<WindFieldActivity,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<WindFieldActivity,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 48));
        if ( (unsigned int)WindFieldActivity::closeActivityStageByGm(v15, *(_DWORD *)(v3 + 32)) )
        {
          std::string::operator=(ret_msg, "CLOSE_STAGE failed");
          v6 = -1;
        }
        else
        {
          std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream(v3 + 80);
          v16 = std::operator<<<std::char_traits<char>>(v3 + 96, "CLOSE_STAGE succ! stage_id:");
          std::ostream::operator<<(v16, *(unsigned int *)(v3 + 32));
          std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::str(v22, v3 + 80);
          std::string::operator=(ret_msg, v22);
          std::string::~string(v22);
          v6 = 0;
          std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream(v3 + 80);
        }
        goto LABEL_31;
      }
    }
    std::string::operator=(ret_msg, "strToNum failed");
    v6 = -1;
    goto LABEL_31;
  }
  std::string::operator=(ret_msg, "activity is not open");
  v6 = -1;
LABEL_31:
  std::shared_ptr<WindFieldActivity>::~shared_ptr((std::shared_ptr<WindFieldActivity> *const)(v3 + 48));
LABEL_32:
  result = v6;
  if ( v24 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8008) = 0;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8038) = 0LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8040) = 0;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8020) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8028) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8030) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8038) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8040) = -168430091;
  }
  return result;
};

// Line 21871: range 0000000017D7F0F8-0000000017D7F19A
void __cdecl procVintageActivityRegister::procVintageActivityRegister(procVintageActivityRegister *const this)
{
  std::function<int(GmContext&,const std::vector<std::string>&,std::string&)> *v1; // rax
  std::allocator<char> __a; // [rsp+1Fh] [rbp-31h] BYREF
  std::string __k; // [rsp+20h] [rbp-30h] BYREF

  std::allocator<char>::allocator(&__a);
  std::string::basic_string<std::allocator<char>>(&__k, "VINTAGE", &__a);
  v1 = std::unordered_map<std::string,std::function<int ()(GmContext &,std::vector<std::string> const&,std::string&)>>::operator[](
         &GmUtils::op_func_map[abi:cxx11],
         &__k);
  std::function<int ()(GmContext &,std::vector<std::string> const&,std::string&)>::operator=<int (&)(GmContext &,std::vector<std::string> const&,std::string&)>(
    v1,
    (int (*)(GmContext *, const std::vector<std::string> *, std::string *))procVintageActivity);
  std::string::~string(&__k);
  std::allocator<char>::~allocator(&__a);
};

// Line 21872: range 0000000017C6402A-0000000017C6532E
int32_t __cdecl procVintageActivity(
        GmContext *context,
        const std::vector<std::string> *param_vec,
        std::string *ret_msg)
{
  int32_t started; // r13d
  unsigned __int64 v4; // r14
  __int64 v5; // rax
  _DWORD *v6; // r12
  const std::string *v7; // rax
  const std::string *v8; // rax
  VintageActivity *v9; // rax
  const std::string *v10; // rax
  const std::string *v11; // rax
  common::milog::MiLogStream *v12; // r13
  const std::string *v13; // rax
  VintageActivity *v14; // rax
  const std::string *v15; // rax
  VintageActivity *v16; // r13
  const std::string *v17; // rax
  const std::string *M_current; // r15
  __gnu_cxx::__normal_iterator<const std::string*,std::vector<std::string> > v19; // rax
  int v20; // r15d
  unsigned int *v21; // r15
  std::vector<unsigned int>::iterator v22; // rax
  VintageActivity *v23; // rax
  const std::string *v24; // rax
  VintageActivity *v25; // rax
  const std::string *v26; // rax
  const std::string *v27; // rax
  common::milog::MiLogStream *v28; // r13
  const std::string *v29; // rax
  VintageActivity *v30; // rax
  const std::string *v31; // rax
  VintageActivity *v32; // rax
  const std::string *v33; // rax
  VintageActivity *v34; // rax
  const std::string *v35; // rax
  VintageActivity *v36; // rax
  const std::string *v37; // rax
  VintageActivity *v38; // rax
  const std::string *v39; // rax
  const std::string *v40; // r13
  __gnu_cxx::__normal_iterator<const std::string*,std::vector<std::string> > v41; // rax
  unsigned int *v42; // r13
  std::vector<unsigned int>::iterator v43; // rax
  VintageActivity *v44; // rax
  const std::string *v45; // rax
  VintageActivity *v46; // rax
  const std::string *v47; // rax
  const std::string *v48; // rax
  const std::string *v49; // rax
  VintageActivity *v50; // rax
  const std::string *v51; // rax
  const std::string *v52; // rax
  VintageActivity *v53; // rax
  const std::string *v54; // rax
  const std::string *v55; // rax
  const std::string *v56; // rax
  _BOOL4 v57; // r15d
  uint32_t v58; // eax
  int v59; // r15d
  Gadget *v60; // rax
  int32_t result; // eax
  std::allocator<std::string > __a; // [rsp+26h] [rbp-1DAh] BYREF
  bool is_open; // [rsp+27h] [rbp-1D9h]
  __gnu_cxx::__normal_iterator<const std::string*,std::vector<std::string> > v65; // [rsp+28h] [rbp-1D8h] BYREF
  common::milog::MiLogStream v66; // [rsp+30h] [rbp-1D0h] BYREF
  char v67[432]; // [rsp+50h] [rbp-1B0h] BYREF

  v4 = (unsigned __int64)v67;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v5 = __asan_stack_malloc_3(384LL);
    if ( v5 )
      v4 = v5;
  }
  *(_QWORD *)v4 = 1102416563LL;
  *(_QWORD *)(v4 + 8) = "8 48 4 14 group_id:22035 64 4 15 config_id:22041 80 16 18 activity_ptr:21879 112 16 15 group_ptr"
                        ":22047 144 16 16 gadget_ptr:22053 176 24 18 id_param_vec:21976 240 24 12 id_vec:21977 304 48 12 id_set:21983";
  *(_QWORD *)(v4 + 16) = procVintageActivity;
  v6 = (_DWORD *)(v4 >> 3);
  v6[536862720] = -235802127;
  v6[536862721] = -234556943;
  v6[536862722] = 61956;
  v6[536862723] = 62194;
  v6[536862724] = 62194;
  v6[536862725] = 62194;
  v6[536862726] = -218959360;
  v6[536862727] = 62194;
  v6[536862728] = -218959360;
  v6[536862729] = 62194;
  v6[536862731] = -202116109;
  if ( std::vector<std::string>::empty(param_vec) )
  {
    common::milog::MiLogStream::create(
      &v66,
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/player/gm/player_gm_comp.cpp",
      "procVintageActivity",
      21875);
    common::milog::MiLogStream::operator<<<char [17],(char *[17])0>(&v66, "param not enough");
    common::milog::MiLogStream::~MiLogStream(&v66);
    started = -1;
    goto LABEL_82;
  }
  if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
    __asan_report_load8();
  Player::getActivityComp(context->player);
  PlayerActivityComp::findOpenningActivity<VintageActivity>((PlayerActivityComp *const)(v4 + 80));
  if ( !std::operator==<VintageActivity>(0LL, (const std::shared_ptr<VintageActivity> *)(v4 + 80)) )
  {
    v7 = std::vector<std::string>::operator[](param_vec, 0LL);
    if ( std::operator==<char>(v7, "OPEN_HUNTING_STAGE") )
    {
      if ( std::vector<std::string>::size(param_vec) <= 1 )
        goto LABEL_60;
      *(_DWORD *)(v4 + 64) = 0;
      v8 = std::vector<std::string>::operator[](param_vec, 1uLL);
      if ( !common::tools::StringUtils::strToNum<unsigned int>(v8, (unsigned int *)(v4 + 64), 1) )
      {
        proto::VintageHuntingStartGalleryReq::VintageHuntingStartGalleryReq((proto::VintageHuntingStartGalleryReq *const)(v4 + 176));
        proto::VintageHuntingStartGalleryReq::set_stage_id(
          (proto::VintageHuntingStartGalleryReq *const)(v4 + 176),
          *(_DWORD *)(v4 + 64));
        proto::VintageHuntingStartGalleryRsp::VintageHuntingStartGalleryRsp((proto::VintageHuntingStartGalleryRsp *const)(v4 + 240));
        v9 = std::__shared_ptr_access<VintageActivity,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<VintageActivity,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 80));
        started = VintageActivity::onVintageHuntingStartGalleryReq(
                    v9,
                    (const proto::VintageHuntingStartGalleryReq *)(v4 + 176),
                    (proto::VintageHuntingStartGalleryRsp *)(v4 + 240));
        proto::VintageHuntingStartGalleryRsp::~VintageHuntingStartGalleryRsp((proto::VintageHuntingStartGalleryRsp *const)(v4 + 240));
        proto::VintageHuntingStartGalleryReq::~VintageHuntingStartGalleryReq((proto::VintageHuntingStartGalleryReq *const)(v4 + 176));
        goto LABEL_81;
      }
      goto LABEL_62;
    }
    v10 = std::vector<std::string>::operator[](param_vec, 0LL);
    if ( std::operator==<char>(v10, "OPEN_MARKET") )
    {
      if ( std::vector<std::string>::size(param_vec) <= 1 )
        goto LABEL_60;
      *(_DWORD *)(v4 + 64) = 0;
      v11 = std::vector<std::string>::operator[](param_vec, 1uLL);
      if ( common::tools::StringUtils::strToNum<unsigned int>(v11, (unsigned int *)(v4 + 64), 1) )
      {
        common::milog::MiLogStream::create(
          &v66,
          &common::milog::MiLogDefault::default_log_obj_,
          3u,
          "./src/player/gm/player_gm_comp.cpp",
          "procVintageActivity",
          21917);
        v12 = common::milog::MiLogStream::operator<<<char [15],(char *[15])0>(
                &v66,
                (const char (*)[15])"invalid param:");
        v13 = std::vector<std::string>::operator[](param_vec, 1uLL);
        common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v12, v13);
        common::milog::MiLogStream::~MiLogStream(&v66);
        started = -1;
        goto LABEL_81;
      }
      is_open = *(_DWORD *)(v4 + 64) != 0;
      v14 = std::__shared_ptr_access<VintageActivity,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<VintageActivity,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 80));
      VintageActivity::setMarketContentByGm(v14, is_open);
    }
    else
    {
      v15 = std::vector<std::string>::operator[](param_vec, 0LL);
      if ( std::operator==<char>(v15, "OPEN_ALL_STORE") )
      {
        v16 = std::__shared_ptr_access<VintageActivity,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<VintageActivity,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 80));
        *(_QWORD *)(v4 + 304) = 0LL;
        *(_QWORD *)(v4 + 312) = 0LL;
        *(_QWORD *)(v4 + 320) = 0LL;
        *(_QWORD *)(v4 + 328) = 0LL;
        *(_QWORD *)(v4 + 336) = 0LL;
        *(_QWORD *)(v4 + 344) = 0LL;
        std::set<unsigned int>::set((std::set<unsigned int> *const)(v4 + 304));
        VintageActivity::openStoreContentByGm(v16, (const std::set<unsigned int> *)(v4 + 304));
        std::set<unsigned int>::~set((std::set<unsigned int> *const)(v4 + 304));
      }
      else
      {
        v17 = std::vector<std::string>::operator[](param_vec, 0LL);
        if ( std::operator==<char>(v17, "OPEN_STORE") )
        {
          std::allocator<std::string>::allocator(&__a);
          M_current = std::vector<std::string>::end(param_vec)._M_current;
          v65._M_current = std::vector<std::string>::begin(param_vec)._M_current;
          v19._M_current = __gnu_cxx::__normal_iterator<std::string const*,std::vector<std::string>>::operator+(
                             &v65,
                             1LL)._M_current;
          std::vector<std::string>::vector<__gnu_cxx::__normal_iterator<std::string const*,std::vector<std::string>>,void>(
            (std::vector<std::string> *const)(v4 + 176),
            v19,
            (__gnu_cxx::__normal_iterator<const std::string*,std::vector<std::string> >)M_current,
            &__a);
          std::allocator<std::string>::~allocator(&__a);
          std::vector<unsigned int>::vector((std::vector<unsigned int> *const)(v4 + 240));
          if ( common::tools::StringUtils::strVecToNumVec<unsigned int>(
                 (const std::vector<std::string> *)(v4 + 176),
                 (std::vector<unsigned int> *)(v4 + 240)) )
          {
            common::milog::MiLogStream::create(
              &v66,
              &common::milog::MiLogDefault::default_log_obj_,
              3u,
              "./src/player/gm/player_gm_comp.cpp",
              "procVintageActivity",
              21933);
            common::milog::MiLogStream::operator<<<char [22],(char *[22])0>(
              &v66,
              (const char (*)[22])"strVecToNumVec failed");
            common::milog::MiLogStream::~MiLogStream(&v66);
            started = -1;
            v20 = 0;
          }
          else
          {
            v21 = std::vector<unsigned int>::end((std::vector<unsigned int> *const)(v4 + 240))._M_current;
            v22._M_current = std::vector<unsigned int>::begin((std::vector<unsigned int> *const)(v4 + 240))._M_current;
            std::set<unsigned int>::set<__gnu_cxx::__normal_iterator<unsigned int *,std::vector<unsigned int>>>(
              (std::set<unsigned int> *const)(v4 + 304),
              v22,
              (__gnu_cxx::__normal_iterator<unsigned int*,std::vector<unsigned int> >)v21);
            v23 = std::__shared_ptr_access<VintageActivity,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<VintageActivity,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 80));
            VintageActivity::openStoreContentByGm(v23, (const std::set<unsigned int> *)(v4 + 304));
            std::set<unsigned int>::~set((std::set<unsigned int> *const)(v4 + 304));
            v20 = 1;
          }
          std::vector<unsigned int>::~vector((std::vector<unsigned int> *const)(v4 + 240));
          std::vector<std::string>::~vector((std::vector<std::string> *const)(v4 + 176));
          if ( v20 != 1 )
            goto LABEL_81;
        }
        else
        {
          v24 = std::vector<std::string>::operator[](param_vec, 0LL);
          if ( std::operator==<char>(v24, "PERFECT_STORE_PLAY") )
          {
            v25 = std::__shared_ptr_access<VintageActivity,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<VintageActivity,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 80));
            started = VintageActivity::perfectFinishStorePlayByGm(v25);
            goto LABEL_81;
          }
          v26 = std::vector<std::string>::operator[](param_vec, 0LL);
          if ( std::operator==<char>(v26, "FINISH_BARGAIN") )
          {
            if ( std::vector<std::string>::size(param_vec) > 1 )
            {
              *(_DWORD *)(v4 + 64) = 0;
              v27 = std::vector<std::string>::operator[](param_vec, 1uLL);
              if ( common::tools::StringUtils::strToNum<unsigned int>(v27, (unsigned int *)(v4 + 64), 1) )
              {
                common::milog::MiLogStream::create(
                  &v66,
                  &common::milog::MiLogDefault::default_log_obj_,
                  3u,
                  "./src/player/gm/player_gm_comp.cpp",
                  "procVintageActivity",
                  21953);
                v28 = common::milog::MiLogStream::operator<<<char [15],(char *[15])0>(
                        &v66,
                        (const char (*)[15])"invalid param:");
                v29 = std::vector<std::string>::operator[](param_vec, 1uLL);
                common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v28, v29);
                common::milog::MiLogStream::~MiLogStream(&v66);
                started = -1;
              }
              else
              {
                v30 = std::__shared_ptr_access<VintageActivity,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<VintageActivity,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 80));
                started = VintageActivity::finishBargainByGm(v30, *(_DWORD *)(v4 + 64));
              }
              goto LABEL_81;
            }
            goto LABEL_60;
          }
          v31 = std::vector<std::string>::operator[](param_vec, 0LL);
          if ( std::operator==<char>(v31, "SIMULATE_NEXT_ROUND") )
          {
            v32 = std::__shared_ptr_access<VintageActivity,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<VintageActivity,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 80));
            started = VintageActivity::simulateCalcRoundAimAttrByGm(v32);
            goto LABEL_81;
          }
          v33 = std::vector<std::string>::operator[](param_vec, 0LL);
          if ( std::operator==<char>(v33, "UNLOCK_ALL_STRATEGY") )
          {
            v34 = std::__shared_ptr_access<VintageActivity,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<VintageActivity,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 80));
            VintageActivity::unlockStoreSkillByGm(v34);
          }
          else
          {
            v35 = std::vector<std::string>::operator[](param_vec, 0LL);
            if ( std::operator==<char>(v35, "CLOSE_STORE_CONTENT") )
            {
              v36 = std::__shared_ptr_access<VintageActivity,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<VintageActivity,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 80));
              VintageActivity::clearStoreContentByGm(v36);
            }
            else
            {
              v37 = std::vector<std::string>::operator[](param_vec, 0LL);
              if ( std::operator==<char>(v37, "REFRESH_HELP_CD") )
              {
                v38 = std::__shared_ptr_access<VintageActivity,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<VintageActivity,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 80));
                VintageActivity::refreshHelpCdByGm(v38);
              }
              else
              {
                v39 = std::vector<std::string>::operator[](param_vec, 0LL);
                if ( std::operator==<char>(v39, "TRIGGER_ENV_EVENT") )
                {
                  std::allocator<std::string>::allocator(&__a);
                  v40 = std::vector<std::string>::end(param_vec)._M_current;
                  v65._M_current = std::vector<std::string>::begin(param_vec)._M_current;
                  v41._M_current = __gnu_cxx::__normal_iterator<std::string const*,std::vector<std::string>>::operator+(
                                     &v65,
                                     1LL)._M_current;
                  std::vector<std::string>::vector<__gnu_cxx::__normal_iterator<std::string const*,std::vector<std::string>>,void>(
                    (std::vector<std::string> *const)(v4 + 176),
                    v41,
                    (__gnu_cxx::__normal_iterator<const std::string*,std::vector<std::string> >)v40,
                    &__a);
                  std::allocator<std::string>::~allocator(&__a);
                  std::vector<unsigned int>::vector((std::vector<unsigned int> *const)(v4 + 240));
                  if ( common::tools::StringUtils::strVecToNumVec<unsigned int>(
                         (const std::vector<std::string> *)(v4 + 176),
                         (std::vector<unsigned int> *)(v4 + 240)) )
                  {
                    common::milog::MiLogStream::create(
                      &v66,
                      &common::milog::MiLogDefault::default_log_obj_,
                      3u,
                      "./src/player/gm/player_gm_comp.cpp",
                      "procVintageActivity",
                      21980);
                    common::milog::MiLogStream::operator<<<char [22],(char *[22])0>(
                      &v66,
                      (const char (*)[22])"strVecToNumVec failed");
                    common::milog::MiLogStream::~MiLogStream(&v66);
                    started = -1;
                  }
                  else
                  {
                    v42 = std::vector<unsigned int>::end((std::vector<unsigned int> *const)(v4 + 240))._M_current;
                    v43._M_current = std::vector<unsigned int>::begin((std::vector<unsigned int> *const)(v4 + 240))._M_current;
                    std::set<unsigned int>::set<__gnu_cxx::__normal_iterator<unsigned int *,std::vector<unsigned int>>>(
                      (std::set<unsigned int> *const)(v4 + 304),
                      v43,
                      (__gnu_cxx::__normal_iterator<unsigned int*,std::vector<unsigned int> >)v42);
                    v44 = std::__shared_ptr_access<VintageActivity,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<VintageActivity,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 80));
                    started = VintageActivity::triggerEnvEventByGm(v44, (const std::set<unsigned int> *)(v4 + 304));
                    std::set<unsigned int>::~set((std::set<unsigned int> *const)(v4 + 304));
                  }
                  std::vector<unsigned int>::~vector((std::vector<unsigned int> *const)(v4 + 240));
                  std::vector<std::string>::~vector((std::vector<std::string> *const)(v4 + 176));
                  goto LABEL_81;
                }
                v45 = std::vector<std::string>::operator[](param_vec, 0LL);
                if ( std::operator==<char>(v45, "CLEAR_ENV_EVENT") )
                {
                  v46 = std::__shared_ptr_access<VintageActivity,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<VintageActivity,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 80));
                  VintageActivity::clearEnvEventByGm(v46);
                }
                else
                {
                  v47 = std::vector<std::string>::operator[](param_vec, 0LL);
                  if ( std::operator==<char>(v47, "QUICK_DIVIDEND") )
                  {
                    if ( std::vector<std::string>::size(param_vec) <= 2 )
                      goto LABEL_60;
                    *(_DWORD *)(v4 + 48) = 0;
                    v48 = std::vector<std::string>::operator[](param_vec, 1uLL);
                    if ( common::tools::StringUtils::strToNum<unsigned int>(v48, (unsigned int *)(v4 + 48), 1) )
                    {
                      std::string::operator=(ret_msg, " strToNum failed");
                      started = -1;
                      goto LABEL_81;
                    }
                    *(_DWORD *)(v4 + 64) = 0;
                    v49 = std::vector<std::string>::operator[](param_vec, 2uLL);
                    if ( !common::tools::StringUtils::strToNum<unsigned int>(v49, (unsigned int *)(v4 + 64), 1) )
                    {
                      v50 = std::__shared_ptr_access<VintageActivity,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<VintageActivity,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 80));
                      started = VintageActivity::quickDividendByGm(v50, *(_DWORD *)(v4 + 48), *(_DWORD *)(v4 + 64));
                      goto LABEL_81;
                    }
                    goto LABEL_62;
                  }
                  v51 = std::vector<std::string>::operator[](param_vec, 0LL);
                  if ( std::operator==<char>(v51, "FINISH_PRESENT") )
                  {
                    if ( std::vector<std::string>::size(param_vec) <= 1 )
                    {
LABEL_60:
                      std::string::operator=(ret_msg, "param not enough");
                      started = -1;
                      goto LABEL_81;
                    }
                    *(_DWORD *)(v4 + 64) = 0;
                    v52 = std::vector<std::string>::operator[](param_vec, 1uLL);
                    if ( !common::tools::StringUtils::strToNum<unsigned int>(v52, (unsigned int *)(v4 + 64), 1) )
                    {
                      v53 = std::__shared_ptr_access<VintageActivity,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<VintageActivity,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 80));
                      started = VintageActivity::finishPresentStageByGM(v53, *(_DWORD *)(v4 + 64));
                      goto LABEL_81;
                    }
LABEL_62:
                    std::string::operator=(ret_msg, "strToNum failed");
                    started = -1;
                    goto LABEL_81;
                  }
                  v54 = std::vector<std::string>::operator[](param_vec, 0LL);
                  if ( std::operator==<char>(v54, "CHANGE_PRESENT_STATE") )
                  {
                    if ( std::vector<std::string>::size(param_vec) <= 2 )
                    {
                      std::string::operator=(ret_msg, " param not enough");
                      started = -1;
                      goto LABEL_81;
                    }
                    *(_DWORD *)(v4 + 48) = 0;
                    v55 = std::vector<std::string>::operator[](param_vec, 1uLL);
                    if ( common::tools::StringUtils::strToNum<unsigned int>(v55, (unsigned int *)(v4 + 48), 1) )
                    {
                      std::string::operator=(ret_msg, " parse group_id failed");
                      started = -1;
                      goto LABEL_81;
                    }
                    *(_DWORD *)(v4 + 64) = 0;
                    v56 = std::vector<std::string>::operator[](param_vec, 2uLL);
                    if ( common::tools::StringUtils::strToNum<unsigned int>(v56, (unsigned int *)(v4 + 64), 1) )
                    {
                      std::string::operator=(ret_msg, " parse config_id failed");
                      started = -1;
                      goto LABEL_81;
                    }
                    if ( *(_BYTE *)(((unsigned __int64)&context->scene >> 3) + 0x7FFF8000) )
                      __asan_report_load8();
                    Scene::findGroup((Scene *const)(v4 + 112), (uint32_t)context->scene);
                    if ( std::operator==<Group>(0LL, (const std::shared_ptr<Group> *)(v4 + 112)) )
                    {
                      std::string::operator=(ret_msg, " group find failed.");
                      started = -1;
                      v57 = 0;
                    }
                    else
                    {
                      v58 = (unsigned int)std::__shared_ptr_access<Group,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Group,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 112));
                      Group::findEntityByConfigId<Gadget>((Group *const)(v4 + 144), v58);
                      if ( std::operator==<Gadget>((const std::shared_ptr<Gadget> *)(v4 + 144), 0LL) )
                      {
                        std::string::operator=(ret_msg, " gadget not found in group");
                        started = -1;
                        v59 = 0;
                      }
                      else
                      {
                        v60 = std::__shared_ptr_access<Gadget,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Gadget,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 144));
                        Gadget::setState(v60, 0xC9u, 0, 1);
                        v59 = 1;
                      }
                      std::shared_ptr<Gadget>::~shared_ptr((std::shared_ptr<Gadget> *const)(v4 + 144));
                      v57 = v59 == 1;
                    }
                    std::shared_ptr<Group>::~shared_ptr((std::shared_ptr<Group> *const)(v4 + 112));
                    if ( !v57 )
                      goto LABEL_81;
                  }
                }
              }
            }
          }
        }
      }
    }
    started = 0;
    goto LABEL_81;
  }
  std::string::operator=(ret_msg, "no activity open");
  started = -1;
LABEL_81:
  std::shared_ptr<VintageActivity>::~shared_ptr((std::shared_ptr<VintageActivity> *const)(v4 + 80));
LABEL_82:
  result = started;
  if ( v67 == (char *)v4 )
  {
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8008) = 0LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8010) = 0LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8018) = 0LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8020) = 0LL;
    *(_DWORD *)((v4 >> 3) + 0x7FFF802C) = 0;
  }
  else
  {
    *(_QWORD *)v4 = 1172321806LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8020) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8028) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 22065: range 0000000017D7F19C-0000000017D7F23E
void __cdecl procCharAmusementActivityRegister::procCharAmusementActivityRegister(
        procCharAmusementActivityRegister *const this)
{
  std::function<int(GmContext&,const std::vector<std::string>&,std::string&)> *v1; // rax
  std::allocator<char> __a; // [rsp+1Fh] [rbp-31h] BYREF
  std::string __k; // [rsp+20h] [rbp-30h] BYREF

  std::allocator<char>::allocator(&__a);
  std::string::basic_string<std::allocator<char>>(&__k, "CHAR_AMUSEMENT", &__a);
  v1 = std::unordered_map<std::string,std::function<int ()(GmContext &,std::vector<std::string> const&,std::string&)>>::operator[](
         &GmUtils::op_func_map[abi:cxx11],
         &__k);
  std::function<int ()(GmContext &,std::vector<std::string> const&,std::string&)>::operator=<int (&)(GmContext &,std::vector<std::string> const&,std::string&)>(
    v1,
    (int (*)(GmContext *, const std::vector<std::string> *, std::string *))procCharAmusementActivity);
  std::string::~string(&__k);
  std::allocator<char>::~allocator(&__a);
};

// Line 22066: range 0000000017C6532F-0000000017C65C24
int32_t __cdecl procCharAmusementActivity(
        GmContext *context,
        const std::vector<std::string> *param_vec,
        std::string *ret_msg)
{
  unsigned __int64 v3; // r13
  __int64 v4; // rax
  _DWORD *v5; // r12
  int32_t v6; // r14d
  const std::string *v7; // rax
  const std::string *v8; // rax
  std::__shared_ptr_access<CharAmusementActivity,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v9; // rax
  unsigned int v10; // edx
  const std::string *v11; // rax
  const std::string *v12; // rax
  std::__shared_ptr_access<CharAmusementActivity,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v13; // rax
  unsigned int v14; // edx
  const std::string *v15; // rax
  std::__shared_ptr_access<CharAmusementActivity,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v16; // rax
  unsigned int v17; // edx
  const std::string *v18; // rax
  std::__shared_ptr_access<CharAmusementActivity,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v19; // rax
  uint32_t ScheduleId; // eax
  std::vector<std::string>::size_type v21; // rcx
  const std::string *v22; // rax
  const std::string *v23; // rax
  const std::string *v24; // rax
  std::__shared_ptr_access<CharAmusementActivity,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v25; // r14
  std::vector<unsigned int> *v26; // rax
  int32_t result; // eax
  int idx; // [rsp+2Ch] [rbp-154h]
  ActivityCharAmusementExcelConfigMgr *config_mgr; // [rsp+30h] [rbp-150h]
  const data::ActivityCharAmusementOverallExcelConfig *overall_config_ptr; // [rsp+38h] [rbp-148h]
  std::shared_ptr<Config> v32; // [rsp+40h] [rbp-140h] BYREF
  std::vector<unsigned int> p_gm_level_id_vec; // [rsp+50h] [rbp-130h] BYREF
  std::string v34; // [rsp+70h] [rbp-110h] BYREF
  common::milog::MiLogStream v35; // [rsp+90h] [rbp-F0h] BYREF
  char v36[208]; // [rsp+B0h] [rbp-D0h] BYREF

  v3 = (unsigned __int64)v36;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_2(160LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "3 48 4 14 level_id:22137 64 16 18 activity_ptr:22072 96 24 18 level_id_vec:22129";
  *(_QWORD *)(v3 + 16) = procCharAmusementActivity;
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = -234556943;
  v5[536862722] = -219021312;
  v5[536862723] = -218103808;
  v5[536862724] = -202116109;
  if ( std::vector<std::string>::empty(param_vec) )
  {
    common::milog::MiLogStream::create(
      &v35,
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/player/gm/player_gm_comp.cpp",
      "procCharAmusementActivity",
      22069);
    common::milog::MiLogStream::operator<<<char [17],(char *[17])0>(&v35, "param not enough");
    common::milog::MiLogStream::~MiLogStream(&v35);
    v6 = -1;
    goto LABEL_46;
  }
  if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
    __asan_report_load8();
  Player::getActivityComp(context->player);
  PlayerActivityComp::findOpenningActivity<CharAmusementActivity>((PlayerActivityComp *const)(v3 + 64));
  if ( !std::operator==<CharAmusementActivity>(0LL, (const std::shared_ptr<CharAmusementActivity> *)(v3 + 64)) )
  {
    v7 = std::vector<std::string>::operator[](param_vec, 0LL);
    if ( std::operator==<char>(v7, "OPEN") )
    {
      if ( std::vector<std::string>::size(param_vec) <= 1 )
      {
LABEL_12:
        std::string::operator=(ret_msg, "param not enough");
        v6 = -1;
        goto LABEL_45;
      }
      *(_DWORD *)(v3 + 48) = 0;
      v8 = std::vector<std::string>::operator[](param_vec, 1uLL);
      if ( !common::tools::StringUtils::strToNum<unsigned int>(v8, (unsigned int *)(v3 + 48), 1) )
      {
        v9 = std::__shared_ptr_access<CharAmusementActivity,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<CharAmusementActivity,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 64));
        v10 = (char)CharAmusementActivity::openStageByGm(v9, *(_DWORD *)(v3 + 48));
        std::string::operator=(ret_msg, v10);
        v6 = 0;
        goto LABEL_45;
      }
    }
    else
    {
      v11 = std::vector<std::string>::operator[](param_vec, 0LL);
      if ( !std::operator==<char>(v11, "FINISH") )
      {
        v15 = std::vector<std::string>::operator[](param_vec, 0LL);
        if ( std::operator==<char>(v15, "RESET") )
        {
          v16 = std::__shared_ptr_access<CharAmusementActivity,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<CharAmusementActivity,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 64));
          v17 = (char)CharAmusementActivity::resetDataByGm(v16);
          std::string::operator=(ret_msg, v17);
          v6 = 0;
        }
        else
        {
          v18 = std::vector<std::string>::operator[](param_vec, 0LL);
          if ( std::operator==<char>(v18, "SET_LEVEL") )
          {
            ServiceBox::findService<GameserverService>();
            GameserverService::getConfig((GameserverService *const)&v32);
            config_mgr = &std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false> *const)&v32)->design_config.txt_config_mgr.activity_char_amusement_config_mgr;
            std::shared_ptr<Config>::~shared_ptr(&v32);
            v19 = std::__shared_ptr_access<CharAmusementActivity,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<CharAmusementActivity,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 64));
            ScheduleId = BaseActivity::getScheduleId(v19);
            overall_config_ptr = data::ActivityCharAmusementExcelConfigMgrBase::findActivityCharAmusementOverallExcelConfig(
                                   config_mgr,
                                   ScheduleId);
            if ( overall_config_ptr )
            {
              v21 = std::vector<std::string>::size(param_vec);
              if ( *(_BYTE *)(((unsigned __int64)&overall_config_ptr->random_level_count >> 3) + 0x7FFF8000) != 0
                && (char)((((_BYTE)overall_config_ptr + 44) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&overall_config_ptr->random_level_count >> 3)
                                                                                  + 0x7FFF8000) )
              {
                __asan_report_load4(&overall_config_ptr->random_level_count);
              }
              if ( v21 >= overall_config_ptr->random_level_count + 1 )
              {
                std::vector<unsigned int>::vector((std::vector<unsigned int> *const)(v3 + 96));
                if ( *(_BYTE *)(((unsigned __int64)&overall_config_ptr->random_level_count >> 3) + 0x7FFF8000) != 0
                  && (char)((((_BYTE)overall_config_ptr + 44) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&overall_config_ptr->random_level_count >> 3)
                                                                                    + 0x7FFF8000) )
                {
                  __asan_report_load4(&overall_config_ptr->random_level_count);
                }
                std::vector<unsigned int>::reserve(
                  (std::vector<unsigned int> *const)(v3 + 96),
                  overall_config_ptr->random_level_count);
                for ( idx = 1; ; ++idx )
                {
                  if ( *(_BYTE *)(((unsigned __int64)&overall_config_ptr->random_level_count >> 3) + 0x7FFF8000) != 0
                    && (char)((((_BYTE)overall_config_ptr + 44) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&overall_config_ptr->random_level_count >> 3)
                                                                                      + 0x7FFF8000) )
                  {
                    __asan_report_load4(&overall_config_ptr->random_level_count);
                  }
                  if ( overall_config_ptr->random_level_count + 1 <= idx )
                    break;
                  if ( idx >= std::vector<std::string>::size(param_vec) )
                  {
                    v6 = -1;
                    goto LABEL_43;
                  }
                  *(_DWORD *)(v3 + 48) = 0;
                  v22 = std::vector<std::string>::operator[](param_vec, idx);
                  if ( common::tools::StringUtils::strToNum<unsigned int>(v22, (unsigned int *)(v3 + 48), 1) )
                  {
                    v23 = std::vector<std::string>::operator[](param_vec, idx);
                    std::operator+<char>(&v34, "invalid level id: ", v23);
                    std::string::operator=(ret_msg, &v34);
                    std::string::~string(&v34);
                    v6 = -1;
                    goto LABEL_43;
                  }
                  if ( !data::ActivityCharAmusementExcelConfigMgrBase::findActivityCharAmusementLevelExcelConfig(
                          config_mgr,
                          *(_DWORD *)(v3 + 48)) )
                  {
                    v24 = std::vector<std::string>::operator[](param_vec, idx);
                    std::operator+<char>((std::string *)&v35, "level config not found: ", v24);
                    std::string::operator=(ret_msg, &v35);
                    std::string::~string(&v35);
                    v6 = -1;
                    goto LABEL_43;
                  }
                  std::vector<unsigned int>::emplace_back<unsigned int &>(
                    (std::vector<unsigned int> *const)(v3 + 96),
                    (unsigned int *)(v3 + 48),
                    (unsigned int *)(v3 + 48));
                }
                v25 = std::__shared_ptr_access<CharAmusementActivity,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<CharAmusementActivity,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 64));
                v26 = std::move<std::vector<unsigned int> &>((std::vector<unsigned int> *)(v3 + 96));
                std::vector<unsigned int>::vector(&p_gm_level_id_vec, v26);
                CharAmusementActivity::setGmLevelIdVec(v25, &p_gm_level_id_vec);
                std::vector<unsigned int>::~vector(&p_gm_level_id_vec);
                v6 = 0;
LABEL_43:
                std::vector<unsigned int>::~vector((std::vector<unsigned int> *const)(v3 + 96));
              }
              else
              {
                std::string::operator=(ret_msg, "level id count not enough");
                v6 = -1;
              }
            }
            else
            {
              std::string::operator=(ret_msg, "overall config not found");
              v6 = -1;
            }
          }
          else
          {
            std::string::operator=(ret_msg, &off_26379FA0);
            v6 = -1;
          }
        }
        goto LABEL_45;
      }
      if ( std::vector<std::string>::size(param_vec) <= 1 )
        goto LABEL_12;
      *(_DWORD *)(v3 + 48) = 0;
      v12 = std::vector<std::string>::operator[](param_vec, 1uLL);
      if ( !common::tools::StringUtils::strToNum<unsigned int>(v12, (unsigned int *)(v3 + 48), 1) )
      {
        v13 = std::__shared_ptr_access<CharAmusementActivity,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<CharAmusementActivity,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 64));
        v14 = (char)CharAmusementActivity::finishStageByGm(v13, *(_DWORD *)(v3 + 48));
        std::string::operator=(ret_msg, v14);
        v6 = 0;
        goto LABEL_45;
      }
    }
    std::string::operator=(ret_msg, "stage_id strToNum failed.");
    v6 = -1;
    goto LABEL_45;
  }
  std::string::operator=(ret_msg, "no activity open");
  v6 = -1;
LABEL_45:
  std::shared_ptr<CharAmusementActivity>::~shared_ptr((std::shared_ptr<CharAmusementActivity> *const)(v3 + 64));
LABEL_46:
  result = v6;
  if ( v36 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8010) = 0;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8010) = -168430091;
  }
  return result;
};

// Line 22162: range 0000000017D7F240-0000000017D7F2E2
void __cdecl procFungusFighterActivityRegister::procFungusFighterActivityRegister(
        procFungusFighterActivityRegister *const this)
{
  std::function<int(GmContext&,const std::vector<std::string>&,std::string&)> *v1; // rax
  std::allocator<char> __a; // [rsp+1Fh] [rbp-31h] BYREF
  std::string __k; // [rsp+20h] [rbp-30h] BYREF

  std::allocator<char>::allocator(&__a);
  std::string::basic_string<std::allocator<char>>(&__k, "FUNGUS_FIGHTER", &__a);
  v1 = std::unordered_map<std::string,std::function<int ()(GmContext &,std::vector<std::string> const&,std::string&)>>::operator[](
         &GmUtils::op_func_map[abi:cxx11],
         &__k);
  std::function<int ()(GmContext &,std::vector<std::string> const&,std::string&)>::operator=<int (&)(GmContext &,std::vector<std::string> const&,std::string&)>(
    v1,
    (int (*)(GmContext *, const std::vector<std::string> *, std::string *))procFungusFighterActivity);
  std::string::~string(&__k);
  std::allocator<char>::~allocator(&__a);
};

// Line 22163: range 0000000017C65C25-0000000017C670DC
int32_t __cdecl procFungusFighterActivity(
        GmContext *context,
        const std::vector<std::string> *param_vec,
        std::string *ret_msg)
{
  unsigned __int64 v3; // r13
  __int64 v4; // rax
  _DWORD *v5; // r12
  int32_t v6; // r14d
  std::__shared_ptr_access<FungusFighterActivity,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v7; // rax
  std::__shared_ptr_access<FungusFighterActivity,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v8; // rax
  const std::string *v9; // rax
  const std::string *v10; // rax
  FungusFighterActivity *v11; // rax
  __int64 v12; // rax
  const std::string *v13; // rax
  const std::string *v14; // rax
  const std::string *v15; // rax
  FungusFighterActivity *v16; // rax
  __int64 v17; // rax
  const std::string *v18; // rax
  const std::string *v19; // rax
  bool v20; // r14
  FungusFighterActivity *v21; // rax
  __int64 v22; // r14
  std::vector<std::string>::const_reference v23; // rax
  const std::string *v24; // rax
  const std::string *v25; // rax
  bool v26; // r14
  FungusFighterActivity *v27; // rax
  __int64 v28; // r14
  std::vector<std::string>::const_reference v29; // rax
  const std::string *v30; // rax
  const std::string *v31; // rax
  FungusFighterActivity *v32; // rax
  const std::string *v33; // rax
  FungusFighterActivity *v34; // rax
  common::milog::MiLogStream *v35; // r14
  const std::string *v36; // rax
  __int64 v37; // r14
  std::vector<std::string>::const_reference v38; // rax
  const std::string *v39; // rax
  const std::string *v40; // rax
  bool v41; // r14
  FungusFighterActivity *v42; // rax
  __int64 v43; // r14
  std::vector<std::string>::const_reference v44; // rax
  const std::string *v45; // rax
  const std::string *v46; // rax
  bool v47; // r14
  FungusFighterActivity *v48; // rax
  __int64 v49; // r14
  std::vector<std::string>::const_reference v50; // rax
  common::milog::MiLogStream *v51; // r14
  const std::string *v52; // rax
  int32_t result; // eax
  std::allocator<char> __a; // [rsp+2Fh] [rbp-391h] BYREF
  char v56[32]; // [rsp+30h] [rbp-390h] BYREF
  char v57[32]; // [rsp+50h] [rbp-370h] BYREF
  char v58[32]; // [rsp+70h] [rbp-350h] BYREF
  char v59[32]; // [rsp+90h] [rbp-330h] BYREF
  char v60[32]; // [rsp+B0h] [rbp-310h] BYREF
  char v61[32]; // [rsp+D0h] [rbp-2F0h] BYREF
  common::milog::MiLogStream v62; // [rsp+F0h] [rbp-2D0h] BYREF
  char v63[688]; // [rsp+110h] [rbp-2B0h] BYREF

  v3 = (unsigned __int64)v63;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_4(640LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "5 48 4 18 cultivate_id:22215 64 4 20 cultivate_step:22221 80 16 18 activity_ptr:22169 112 24 18 "
                        "stage_id_vec:22339 176 392 8 ss:22350";
  *(_QWORD *)(v3 + 16) = procFungusFighterActivity;
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = -234556943;
  v5[536862722] = 61956;
  v5[536862723] = 62194;
  v5[536862724] = -218959360;
  v5[536862725] = 62194;
  v5[536862737] = -218103808;
  v5[536862738] = -202116109;
  v5[536862739] = -202116109;
  if ( std::vector<std::string>::empty(param_vec) )
  {
    common::milog::MiLogStream::create(
      &v62,
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/player/gm/player_gm_comp.cpp",
      "procFungusFighterActivity",
      22166);
    common::milog::MiLogStream::operator<<<char [17],(char *[17])0>(&v62, "param not enough");
    common::milog::MiLogStream::~MiLogStream(&v62);
    v6 = -1;
    goto LABEL_71;
  }
  if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
    __asan_report_load8();
  Player::getActivityComp(context->player);
  PlayerActivityComp::findOpenningActivity<FungusFighterActivity>((PlayerActivityComp *const)(v3 + 80));
  if ( !std::operator==<FungusFighterActivity>(0LL, (const std::shared_ptr<FungusFighterActivity> *)(v3 + 80)) )
  {
    v7 = std::__shared_ptr_access<FungusFighterActivity,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<FungusFighterActivity,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 80));
    if ( !BaseActivity::isOpening(v7, 0) )
    {
      common::milog::MiLogStream::create(
        &v62,
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/player/gm/player_gm_comp.cpp",
        "procFungusFighterActivity",
        22177);
      common::milog::MiLogStream::operator<<<char [29],(char *[29])0>(
        &v62,
        (const char (*)[29])"FungusFighterActivity close!");
      common::milog::MiLogStream::~MiLogStream(&v62);
      v6 = -1;
      goto LABEL_70;
    }
    v8 = std::__shared_ptr_access<FungusFighterActivity,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<FungusFighterActivity,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 80));
    if ( BaseActivity::isSettled(v8) )
    {
      common::milog::MiLogStream::create(
        &v62,
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/player/gm/player_gm_comp.cpp",
        "procFungusFighterActivity",
        22182);
      common::milog::MiLogStream::operator<<<char [31],(char *[31])0>(
        &v62,
        (const char (*)[31])"FungusFighterActivity settled!");
      common::milog::MiLogStream::~MiLogStream(&v62);
      v6 = -1;
      goto LABEL_70;
    }
    v9 = std::vector<std::string>::operator[](param_vec, 0LL);
    if ( std::operator==<char>(v9, "CAPTURE") )
    {
      if ( std::vector<std::string>::size(param_vec) > 1 )
      {
        *(_DWORD *)(v3 + 64) = 0;
        v10 = std::vector<std::string>::operator[](param_vec, 1uLL);
        if ( common::tools::StringUtils::strToNum<unsigned int>(v10, (unsigned int *)(v3 + 64), 1) )
        {
          std::string::operator=(ret_msg, "fungus_id strToNum failed.");
          v6 = -1;
        }
        else
        {
          v11 = std::__shared_ptr_access<FungusFighterActivity,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<FungusFighterActivity,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 80));
          if ( FungusFighterActivity::captureFungusByGm(v11, *(_DWORD *)(v3 + 64)) )
          {
            std::string::operator=(ret_msg, "CAPTURE failed");
            v6 = -1;
          }
          else
          {
            std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream(v3 + 176);
            v12 = std::operator<<<std::char_traits<char>>(v3 + 192, "CAPTURE succ! fungus_id:");
            std::ostream::operator<<(v12, *(unsigned int *)(v3 + 64));
            std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::str(v56, v3 + 176);
            std::string::operator=(ret_msg, v56);
            std::string::~string(v56);
            v6 = 0;
            std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream(v3 + 176);
          }
        }
        goto LABEL_70;
      }
      goto LABEL_62;
    }
    v13 = std::vector<std::string>::operator[](param_vec, 0LL);
    if ( std::operator==<char>(v13, "CULTIVATE") )
    {
      if ( std::vector<std::string>::size(param_vec) > 2 )
      {
        *(_DWORD *)(v3 + 48) = 0;
        v14 = std::vector<std::string>::operator[](param_vec, 1uLL);
        if ( common::tools::StringUtils::strToNum<unsigned int>(v14, (unsigned int *)(v3 + 48), 1) )
        {
          std::string::operator=(ret_msg, "cultivate_id strToNum failed.");
          v6 = -1;
        }
        else
        {
          *(_DWORD *)(v3 + 64) = 0;
          v15 = std::vector<std::string>::operator[](param_vec, 2uLL);
          if ( common::tools::StringUtils::strToNum<unsigned int>(v15, (unsigned int *)(v3 + 64), 1) )
          {
            std::string::operator=(ret_msg, "cultivate_step strToNum failed.");
            v6 = -1;
          }
          else
          {
            v16 = std::__shared_ptr_access<FungusFighterActivity,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<FungusFighterActivity,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 80));
            if ( FungusFighterActivity::cultivateByGm(v16, *(_DWORD *)(v3 + 48), *(_DWORD *)(v3 + 64)) )
            {
              std::string::operator=(ret_msg, "CULTIVATE failed");
              v6 = -1;
            }
            else
            {
              std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream(v3 + 176);
              v17 = std::operator<<<std::char_traits<char>>(v3 + 192, "CULTIVATE succ! cultivate_id:");
              std::ostream::operator<<(v17, *(unsigned int *)(v3 + 48));
              std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::str(v57, v3 + 176);
              std::string::operator=(ret_msg, v57);
              std::string::~string(v57);
              v6 = 0;
              std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream(v3 + 176);
            }
          }
        }
        goto LABEL_70;
      }
      goto LABEL_62;
    }
    v18 = std::vector<std::string>::operator[](param_vec, 0LL);
    if ( std::operator==<char>(v18, "OPEN_PLOT_STAGE") )
    {
      if ( std::vector<std::string>::size(param_vec) > 1 )
      {
        std::vector<unsigned int>::vector((std::vector<unsigned int> *const)(v3 + 112));
        std::allocator<char>::allocator(&__a);
        std::string::basic_string<std::allocator<char>>((std::string *const)&v62, ",", &__a);
        v19 = std::vector<std::string>::operator[](param_vec, 1uLL);
        v20 = common::tools::StringUtils::splitToList<unsigned int>(
                v19,
                (const std::string *)&v62,
                (std::vector<unsigned int> *)(v3 + 112),
                0) != 0;
        std::string::~string(&v62);
        std::allocator<char>::~allocator(&__a);
        if ( !v20 )
        {
          v21 = std::__shared_ptr_access<FungusFighterActivity,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<FungusFighterActivity,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 80));
          if ( FungusFighterActivity::openFungusPlotDungeonStageByGm(v21, (const std::vector<unsigned int> *)(v3 + 112)) )
          {
            std::string::operator=(ret_msg, "OPEN_PLOT_STAGE failed");
            v6 = -1;
          }
          else
          {
            std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream(v3 + 176);
            v22 = std::operator<<<std::char_traits<char>>(v3 + 192, "OPEN_PLOT_STAGE succ! stage_id_vec:");
            v23 = std::vector<std::string>::operator[](param_vec, 1uLL);
            std::operator<<<char>(v22, v23);
            std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::str(v58, v3 + 176);
            std::string::operator=(ret_msg, v58);
            std::string::~string(v58);
            v6 = 0;
            std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream(v3 + 176);
          }
          goto LABEL_68;
        }
LABEL_64:
        std::string::operator=(ret_msg, "splitToList failed");
        v6 = -1;
LABEL_68:
        std::vector<unsigned int>::~vector((std::vector<unsigned int> *const)(v3 + 112));
        goto LABEL_70;
      }
    }
    else
    {
      v24 = std::vector<std::string>::operator[](param_vec, 0LL);
      if ( std::operator==<char>(v24, "CLOSE_PLOT_STAGE") )
      {
        if ( std::vector<std::string>::size(param_vec) > 1 )
        {
          std::vector<unsigned int>::vector((std::vector<unsigned int> *const)(v3 + 112));
          std::allocator<char>::allocator(&__a);
          std::string::basic_string<std::allocator<char>>((std::string *const)&v62, ",", &__a);
          v25 = std::vector<std::string>::operator[](param_vec, 1uLL);
          v26 = common::tools::StringUtils::splitToList<unsigned int>(
                  v25,
                  (const std::string *)&v62,
                  (std::vector<unsigned int> *)(v3 + 112),
                  0) != 0;
          std::string::~string(&v62);
          std::allocator<char>::~allocator(&__a);
          if ( !v26 )
          {
            v27 = std::__shared_ptr_access<FungusFighterActivity,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<FungusFighterActivity,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 80));
            if ( FungusFighterActivity::closeFungusPlotDungeonStageByGm(
                   v27,
                   (const std::vector<unsigned int> *)(v3 + 112)) )
            {
              std::string::operator=(ret_msg, "CLOSE_PLOT_STAGE failed");
              v6 = -1;
            }
            else
            {
              std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream(v3 + 176);
              v28 = std::operator<<<std::char_traits<char>>(v3 + 192, "CLOSE_PLOT_STAGE succ! stage_id_vec:");
              v29 = std::vector<std::string>::operator[](param_vec, 1uLL);
              std::operator<<<char>(v28, v29);
              std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::str(v59, v3 + 176);
              std::string::operator=(ret_msg, v59);
              std::string::~string(v59);
              v6 = 0;
              std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream(v3 + 176);
            }
            goto LABEL_68;
          }
          goto LABEL_64;
        }
      }
      else
      {
        v30 = std::vector<std::string>::operator[](param_vec, 0LL);
        if ( std::operator==<char>(v30, "SET_IS_CONTENT_CLOSE") )
        {
          if ( std::vector<std::string>::size(param_vec) > 1 )
          {
            v31 = std::vector<std::string>::operator[](param_vec, 1uLL);
            if ( std::operator==<char>(v31, "TRUE") )
            {
              v32 = std::__shared_ptr_access<FungusFighterActivity,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<FungusFighterActivity,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 80));
              FungusFighterActivity::setIsCloseContentByGm(v32, 1);
            }
            else
            {
              v33 = std::vector<std::string>::operator[](param_vec, 1uLL);
              if ( !std::operator==<char>(v33, "FALSE") )
              {
                common::milog::MiLogStream::create(
                  &v62,
                  &common::milog::MiLogDefault::default_log_obj_,
                  1u,
                  "./src/player/gm/player_gm_comp.cpp",
                  "procFungusFighterActivity",
                  22301);
                v35 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                        &v62,
                        (const char (*)[16])"unknown param: ");
                v36 = std::vector<std::string>::operator[](param_vec, 1uLL);
                common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v35, v36);
                common::milog::MiLogStream::~MiLogStream(&v62);
                v6 = -1;
                goto LABEL_70;
              }
              v34 = std::__shared_ptr_access<FungusFighterActivity,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<FungusFighterActivity,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 80));
              FungusFighterActivity::setIsCloseContentByGm(v34, 0);
            }
            std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream(v3 + 176);
            v37 = std::operator<<<std::char_traits<char>>(v3 + 192, "SET_IS_CONTENT_CLOSE ");
            v38 = std::vector<std::string>::operator[](param_vec, 1uLL);
            std::operator<<<char>(v37, v38);
            std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::str(v60, v3 + 176);
            std::string::operator=(ret_msg, v60);
            std::string::~string(v60);
            v6 = 0;
            std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream(v3 + 176);
            goto LABEL_70;
          }
        }
        else
        {
          v39 = std::vector<std::string>::operator[](param_vec, 0LL);
          if ( !std::operator==<char>(v39, "OPEN_TRAINING_STAGE") )
          {
            v45 = std::vector<std::string>::operator[](param_vec, 0LL);
            if ( !std::operator==<char>(v45, "CLOSE_TRAINING_STAGE") )
            {
              common::milog::MiLogStream::create(
                &v62,
                &common::milog::MiLogDefault::default_log_obj_,
                1u,
                "./src/player/gm/player_gm_comp.cpp",
                "procFungusFighterActivity",
                22355);
              v51 = common::milog::MiLogStream::operator<<<char [15],(char *[15])0>(
                      &v62,
                      (const char (*)[15])"unknown param ");
              v52 = std::vector<std::string>::operator[](param_vec, 0LL);
              common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v51, v52);
              common::milog::MiLogStream::~MiLogStream(&v62);
              v6 = -1;
              goto LABEL_70;
            }
            if ( std::vector<std::string>::size(param_vec) <= 1 )
              goto LABEL_62;
            std::vector<unsigned int>::vector((std::vector<unsigned int> *const)(v3 + 112));
            std::allocator<char>::allocator(&__a);
            std::string::basic_string<std::allocator<char>>((std::string *const)&v62, ",", &__a);
            v46 = std::vector<std::string>::operator[](param_vec, 1uLL);
            v47 = common::tools::StringUtils::splitToList<unsigned int>(
                    v46,
                    (const std::string *)&v62,
                    (std::vector<unsigned int> *)(v3 + 112),
                    0) != 0;
            std::string::~string(&v62);
            std::allocator<char>::~allocator(&__a);
            if ( !v47 )
            {
              v48 = std::__shared_ptr_access<FungusFighterActivity,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<FungusFighterActivity,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 80));
              if ( FungusFighterActivity::closeFungusTrainingDungeonStageByGm(
                     v48,
                     (const std::vector<unsigned int> *)(v3 + 112)) )
              {
                std::string::operator=(ret_msg, "CLOSE_TRAINING_STAGE failed");
                v6 = -1;
              }
              else
              {
                std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream(v3 + 176);
                v49 = std::operator<<<std::char_traits<char>>(v3 + 192, "CLOSE_TRAINING_STAGE succ! stage_id_vec:");
                v50 = std::vector<std::string>::operator[](param_vec, 1uLL);
                std::operator<<<char>(v49, v50);
                std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::str(&v62, v3 + 176);
                std::string::operator=(ret_msg, &v62);
                std::string::~string(&v62);
                v6 = 0;
                std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream(v3 + 176);
              }
              goto LABEL_68;
            }
            goto LABEL_64;
          }
          if ( std::vector<std::string>::size(param_vec) > 1 )
          {
            std::vector<unsigned int>::vector((std::vector<unsigned int> *const)(v3 + 112));
            std::allocator<char>::allocator(&__a);
            std::string::basic_string<std::allocator<char>>((std::string *const)&v62, ",", &__a);
            v40 = std::vector<std::string>::operator[](param_vec, 1uLL);
            v41 = common::tools::StringUtils::splitToList<unsigned int>(
                    v40,
                    (const std::string *)&v62,
                    (std::vector<unsigned int> *)(v3 + 112),
                    0) != 0;
            std::string::~string(&v62);
            std::allocator<char>::~allocator(&__a);
            if ( !v41 )
            {
              v42 = std::__shared_ptr_access<FungusFighterActivity,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<FungusFighterActivity,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 80));
              if ( FungusFighterActivity::openFungusTrainingDungeonStageByGm(
                     v42,
                     (const std::vector<unsigned int> *)(v3 + 112)) )
              {
                std::string::operator=(ret_msg, "OPEN_TRAINING_STAGE failed");
                v6 = -1;
              }
              else
              {
                std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream(v3 + 176);
                v43 = std::operator<<<std::char_traits<char>>(v3 + 192, "OPEN_TRAINING_STAGE succ! stage_id_vec:");
                v44 = std::vector<std::string>::operator[](param_vec, 1uLL);
                std::operator<<<char>(v43, v44);
                std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::str(v61, v3 + 176);
                std::string::operator=(ret_msg, v61);
                std::string::~string(v61);
                v6 = 0;
                std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream(v3 + 176);
              }
              goto LABEL_68;
            }
            goto LABEL_64;
          }
        }
      }
    }
LABEL_62:
    std::string::operator=(ret_msg, "param not enough");
    v6 = -1;
    goto LABEL_70;
  }
  std::string::operator=(ret_msg, "activity is not open");
  v6 = -1;
LABEL_70:
  std::shared_ptr<FungusFighterActivity>::~shared_ptr((std::shared_ptr<FungusFighterActivity> *const)(v3 + 80));
LABEL_71:
  result = v6;
  if ( v63 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8010) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8044) = 0LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF804C) = 0;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8020) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8028) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8030) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8038) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8040) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8048) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 22360: range 0000000017D7F2E4-0000000017D7F386
void __cdecl procCommonActivityRegister::procCommonActivityRegister(procCommonActivityRegister *const this)
{
  std::function<int(GmContext&,const std::vector<std::string>&,std::string&)> *v1; // rax
  std::allocator<char> __a; // [rsp+1Fh] [rbp-31h] BYREF
  std::string __k; // [rsp+20h] [rbp-30h] BYREF

  std::allocator<char>::allocator(&__a);
  std::string::basic_string<std::allocator<char>>(&__k, "COMMON_ACTIVITY", &__a);
  v1 = std::unordered_map<std::string,std::function<int ()(GmContext &,std::vector<std::string> const&,std::string&)>>::operator[](
         &GmUtils::op_func_map[abi:cxx11],
         &__k);
  std::function<int ()(GmContext &,std::vector<std::string> const&,std::string&)>::operator=<int (&)(GmContext &,std::vector<std::string> const&,std::string&)>(
    v1,
    (int (*)(GmContext *, const std::vector<std::string> *, std::string *))procCommonActivity);
  std::string::~string(&__k);
  std::allocator<char>::~allocator(&__a);
};

// Line 22361: range 0000000017C670DD-0000000017C6754A
int32_t __cdecl procCommonActivity(GmContext *context, const std::vector<std::string> *param_vec, std::string *ret_msg)
{
  unsigned __int64 v3; // r13
  __int64 v4; // rax
  _DWORD *v5; // r12
  int32_t v6; // r14d
  const std::string *v7; // rax
  const std::string *v8; // rax
  uint32_t ActivityComp; // eax
  const std::string *v10; // rax
  const std::string *v11; // rax
  const std::string *v12; // rax
  int32_t result; // eax
  std::shared_ptr<BaseActivity> p_activity_ptr; // [rsp+20h] [rbp-120h] BYREF
  common::milog::MiLogStream v16; // [rsp+30h] [rbp-110h] BYREF
  char v17[240]; // [rsp+50h] [rbp-F0h] BYREF

  v3 = (unsigned __int64)v17;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_2(192LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "3 32 4 17 activity_id:22367 48 16 18 activity_ptr:22373 80 72 13 gm_tool:22379";
  *(_QWORD *)(v3 + 16) = procCommonActivity;
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = 61956;
  v5[536862722] = 62194;
  v5[536862724] = -218103808;
  v5[536862725] = -202116109;
  if ( std::vector<std::string>::size(param_vec) <= 1 )
  {
    common::milog::MiLogStream::create(
      &v16,
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/player/gm/player_gm_comp.cpp",
      "procCommonActivity",
      22364);
    common::milog::MiLogStream::operator<<<char [17],(char *[17])0>(&v16, "param not enough");
    common::milog::MiLogStream::~MiLogStream(&v16);
    v6 = -1;
    goto LABEL_20;
  }
  *(_DWORD *)(v3 + 32) = 0;
  v7 = std::vector<std::string>::operator[](param_vec, 1uLL);
  if ( common::tools::StringUtils::strToNum<unsigned int>(v7, (unsigned int *)(v3 + 32), 1) )
  {
    v8 = std::vector<std::string>::operator[](param_vec, 1uLL);
    std::operator+<char>((std::string *)&v16, "activity_id strToNum failed: ", v8);
    std::string::operator=(ret_msg, &v16);
    std::string::~string(&v16);
    v6 = -1;
    goto LABEL_20;
  }
  if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
    __asan_report_load8();
  ActivityComp = (unsigned int)Player::getActivityComp(context->player);
  PlayerActivityComp::findBaseActivity((PlayerActivityComp *const)(v3 + 48), ActivityComp);
  if ( !std::operator==<BaseActivity>(0LL, (const std::shared_ptr<BaseActivity> *)(v3 + 48)) )
  {
    std::shared_ptr<BaseActivity>::shared_ptr(&p_activity_ptr, (const std::shared_ptr<BaseActivity> *)(v3 + 48));
    BaseActivityGmTool::BaseActivityGmTool((BaseActivityGmTool *const)(v3 + 80), &p_activity_ptr);
    std::shared_ptr<BaseActivity>::~shared_ptr(&p_activity_ptr);
    v10 = std::vector<std::string>::operator[](param_vec, 0LL);
    if ( std::operator==<char>(v10, "OPEN") )
    {
      BaseActivityGmTool::controlCommonContentCloseStateByGm((BaseActivityGmTool *const)(v3 + 80), 0);
    }
    else
    {
      v11 = std::vector<std::string>::operator[](param_vec, 0LL);
      if ( !std::operator==<char>(v11, "CLOSE") )
      {
        v12 = std::vector<std::string>::operator[](param_vec, 0LL);
        std::operator+<char>((std::string *)&v16, "unknown param 0: ", v12);
        std::string::operator=(ret_msg, &v16);
        std::string::~string(&v16);
        v6 = -1;
LABEL_18:
        BaseActivityGmTool::~BaseActivityGmTool((BaseActivityGmTool *const)(v3 + 80));
        goto LABEL_19;
      }
      BaseActivityGmTool::controlCommonContentCloseStateByGm((BaseActivityGmTool *const)(v3 + 80), 1);
    }
    v6 = 0;
    goto LABEL_18;
  }
  std::string::operator=(ret_msg, "activity is not in schedule");
  v6 = -1;
LABEL_19:
  std::shared_ptr<BaseActivity>::~shared_ptr((std::shared_ptr<BaseActivity> *const)(v3 + 48));
LABEL_20:
  result = v6;
  if ( v17 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8008) = 0;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8010) = 0LL;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 22396: range 0000000017D7F388-0000000017D7F42A
void __cdecl procHomeBlueprintRegister::procHomeBlueprintRegister(procHomeBlueprintRegister *const this)
{
  std::function<int(GmContext&,const std::vector<std::string>&,std::string&)> *v1; // rax
  std::allocator<char> __a; // [rsp+1Fh] [rbp-31h] BYREF
  std::string __k; // [rsp+20h] [rbp-30h] BYREF

  std::allocator<char>::allocator(&__a);
  std::string::basic_string<std::allocator<char>>(&__k, "HOME_BLUEPRINT", &__a);
  v1 = std::unordered_map<std::string,std::function<int ()(GmContext &,std::vector<std::string> const&,std::string&)>>::operator[](
         &GmUtils::op_func_map[abi:cxx11],
         &__k);
  std::function<int ()(GmContext &,std::vector<std::string> const&,std::string&)>::operator=<int (&)(GmContext &,std::vector<std::string> const&,std::string&)>(
    v1,
    (int (*)(GmContext *, const std::vector<std::string> *, std::string *))procHomeBlueprint);
  std::string::~string(&__k);
  std::allocator<char>::~allocator(&__a);
};

// Line 22397: range 0000000017C6754B-0000000017C67BEE
int32_t __cdecl procHomeBlueprint(GmContext *context, const std::vector<std::string> *param_vec, std::string *ret_msg)
{
  unsigned __int64 v3; // r13
  __int64 v4; // rax
  _DWORD *v5; // rbx
  int32_t v6; // r14d
  const std::string *v7; // rax
  PlayerHomeComp *HomeComp; // rax
  const std::string *v9; // rax
  PlayerHomeComp *v10; // rax
  const std::string *v11; // rax
  PlayerHomeComp *v12; // r12
  const std::string *v13; // rax
  const std::string *v14; // rax
  const std::string *v15; // rax
  common::milog::MiLogStream *v16; // rdx
  __int64 v17; // rax
  __int64 v18; // rax
  __int64 v19; // rax
  common::milog::MiLogStream *v20; // rax
  common::milog::MiLogStream *v21; // rax
  common::milog::MiLogStream *v22; // rax
  const std::string *v23; // rax
  int32_t result; // eax
  common::milog::MiLogStream v26; // [rsp+20h] [rbp-270h] BYREF
  char v27[592]; // [rsp+40h] [rbp-250h] BYREF

  v3 = (unsigned __int64)v27;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_4(544LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "3 32 4 9 uid:22429 48 8 16 share_code:22423 80 392 8 ss:22430";
  *(_QWORD *)(v3 + 16) = procHomeBlueprint;
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = 61956;
  v5[536862721] = -234881024;
  v5[536862722] = 62194;
  v5[536862734] = -218103808;
  v5[536862735] = -202116109;
  v5[536862736] = -202116109;
  if ( std::vector<std::string>::empty(param_vec) )
  {
    common::milog::MiLogStream::create(
      &v26,
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/player/gm/player_gm_comp.cpp",
      "procHomeBlueprint",
      22400);
    common::milog::MiLogStream::operator<<<char [17],(char *[17])0>(&v26, "param not enough");
    common::milog::MiLogStream::~MiLogStream(&v26);
    v6 = -1;
    goto LABEL_26;
  }
  v7 = std::vector<std::string>::operator[](param_vec, 0LL);
  if ( std::operator==<char>(v7, "CLEAR_CREATE_CD") )
  {
    if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
      __asan_report_load8();
    HomeComp = Player::getHomeComp(context->player);
    PlayerHomeComp::onGMClearBlueprintCreateCD(HomeComp);
LABEL_25:
    v6 = 0;
    goto LABEL_26;
  }
  v9 = std::vector<std::string>::operator[](param_vec, 0LL);
  if ( std::operator==<char>(v9, "CLEAR_SET_OPTION_CD") )
  {
    if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
      __asan_report_load8();
    v10 = Player::getHomeComp(context->player);
    PlayerHomeComp::onGMClearBlueprintSetOptionCD(v10);
    goto LABEL_25;
  }
  v11 = std::vector<std::string>::operator[](param_vec, 0LL);
  if ( std::operator==<char>(v11, "INVALID_CACHE") )
  {
    if ( std::vector<std::string>::size(param_vec) > 1 )
    {
      if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
        __asan_report_load8();
      v12 = Player::getHomeComp(context->player);
      v13 = std::vector<std::string>::operator[](param_vec, 1uLL);
      PlayerHomeComp::invalidHomeBlueprintCache(v12, v13);
      v6 = 0;
    }
    else
    {
      std::string::operator=(ret_msg, &off_263755E0);
      v6 = -1;
    }
  }
  else
  {
    v14 = std::vector<std::string>::operator[](param_vec, 0LL);
    if ( std::operator==<char>(v14, "GET_UID") )
    {
      *(_QWORD *)(v3 + 48) = 0LL;
      v15 = std::vector<std::string>::operator[](param_vec, 1uLL);
      if ( common::tools::StringUtils::strToNum<unsigned long>(v15, (unsigned __int64 *)(v3 + 48), 1) )
      {
        common::milog::MiLogStream::create(
          &v26,
          &common::milog::MiLogDefault::default_log_obj_,
          3u,
          "./src/player/gm/player_gm_comp.cpp",
          "procHomeBlueprint",
          22426);
        v16 = common::milog::MiLogStream::operator<<<char [15],(char *[15])0>(
                &v26,
                (const char (*)[15])"invalid param:");
        common::milog::MiLogStream::operator<<<std::string>(v16, param_vec);
        common::milog::MiLogStream::~MiLogStream(&v26);
        v6 = -1;
      }
      else
      {
        *(_DWORD *)(v3 + 32) = *(_QWORD *)(v3 + 48);
        std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream(v3 + 80);
        v17 = std::operator<<<std::char_traits<char>>(v3 + 96, "share code:");
        v18 = std::ostream::operator<<(v17, *(_QWORD *)(v3 + 48));
        v19 = std::operator<<<std::char_traits<char>>(v18, " --> uid:");
        std::ostream::operator<<(v19, *(unsigned int *)(v3 + 32));
        std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::str(&v26, v3 + 80);
        std::string::operator=(ret_msg, &v26);
        std::string::~string(&v26);
        common::milog::MiLogStream::create(
          &v26,
          &common::milog::MiLogDefault::default_log_obj_,
          1u,
          "./src/player/gm/player_gm_comp.cpp",
          "procHomeBlueprint",
          22433);
        v20 = common::milog::MiLogStream::operator<<<char [39],(char *[39])0>(&v26, (const char (*)[39])off_2637B580);
        v21 = common::milog::MiLogStream::operator<<<unsigned long,(unsigned long *)0>(
                v20,
                (const unsigned __int64 *)(v3 + 48));
        v22 = common::milog::MiLogStream::operator<<<char [10],(char *[10])0>(v21, (const char (*)[10])" --> uid:");
        common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v22, (const unsigned int *)(v3 + 32));
        common::milog::MiLogStream::~MiLogStream(&v26);
        v6 = 0;
        std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream(v3 + 80);
      }
    }
    else
    {
      v23 = std::vector<std::string>::operator[](param_vec, 0LL);
      std::operator+<char>((std::string *)&v26, "unknown param 0: ", v23);
      std::string::operator=(ret_msg, &v26);
      std::string::~string(&v26);
      v6 = -1;
    }
  }
LABEL_26:
  result = v6;
  if ( v27 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8008) = 0;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8038) = 0LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8040) = 0;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8020) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8028) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8030) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8038) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8040) = -168430091;
  }
  return result;
};

// Line 22445: range 0000000017D7F42C-0000000017D7F4CE
void __cdecl procEffigyChallengeV2ActivityRegister::procEffigyChallengeV2ActivityRegister(
        procEffigyChallengeV2ActivityRegister *const this)
{
  std::function<int(GmContext&,const std::vector<std::string>&,std::string&)> *v1; // rax
  std::allocator<char> __a; // [rsp+1Fh] [rbp-31h] BYREF
  std::string __k; // [rsp+20h] [rbp-30h] BYREF

  std::allocator<char>::allocator(&__a);
  std::string::basic_string<std::allocator<char>>(&__k, "EFFIGYCHALLENGEV2", &__a);
  v1 = std::unordered_map<std::string,std::function<int ()(GmContext &,std::vector<std::string> const&,std::string&)>>::operator[](
         &GmUtils::op_func_map[abi:cxx11],
         &__k);
  std::function<int ()(GmContext &,std::vector<std::string> const&,std::string&)>::operator=<int (&)(GmContext &,std::vector<std::string> const&,std::string&)>(
    v1,
    (int (*)(GmContext *, const std::vector<std::string> *, std::string *))procEffigyChallengeV2Activity);
  std::string::~string(&__k);
  std::allocator<char>::~allocator(&__a);
};

// Line 22446: range 0000000017C67BEF-0000000017C6808C
int32_t __cdecl procEffigyChallengeV2Activity(
        GmContext *context,
        const std::vector<std::string> *param_vec,
        std::string *ret_msg)
{
  unsigned __int64 v3; // r12
  __int64 v4; // rax
  _DWORD *v5; // r13
  int32_t v6; // r14d
  const std::string *v7; // rax
  const std::string *v8; // rax
  const std::string *v10; // rax
  const std::string *v11; // rax
  const std::string *v12; // rax
  std::__shared_ptr_access<EffigyChallengeV2Activity,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v13; // rax
  std::__shared_ptr_access<EffigyChallengeV2Activity,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v14; // rax
  int32_t result; // eax
  common::milog::MiLogStream v17; // [rsp+20h] [rbp-B0h] BYREF
  char v18[144]; // [rsp+40h] [rbp-90h] BYREF

  v3 = (unsigned __int64)v18;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_1(96LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "3 32 4 11 level:22466 48 4 16 difficulty:22472 64 16 18 activity_ptr:22452";
  *(_QWORD *)(v3 + 16) = procEffigyChallengeV2Activity;
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = -234556924;
  v5[536862722] = -202178560;
  if ( !std::vector<std::string>::size(param_vec) )
  {
    common::milog::MiLogStream::create(
      &v17,
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/player/gm/player_gm_comp.cpp",
      "procEffigyChallengeV2Activity",
      22449);
    common::milog::MiLogStream::operator<<<char [17],(char *[17])0>(&v17, "param not enough");
    common::milog::MiLogStream::~MiLogStream(&v17);
    v6 = -1;
    goto LABEL_28;
  }
  if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
    __asan_report_load8();
  Player::getActivityComp(context->player);
  PlayerActivityComp::findOpenningActivity<EffigyChallengeV2Activity>((PlayerActivityComp *const)(v3 + 64));
  if ( !std::operator==<EffigyChallengeV2Activity>(0LL, (const std::shared_ptr<EffigyChallengeV2Activity> *)(v3 + 64)) )
  {
    v7 = std::vector<std::string>::operator[](param_vec, 0LL);
    if ( std::operator==<char>(v7, "FINISH")
      || (v8 = std::vector<std::string>::operator[](param_vec, 0LL), std::operator==<char>(v8, off_26352320)) )
    {
      if ( std::vector<std::string>::size(param_vec) <= 2 )
      {
        common::milog::MiLogStream::create(
          &v17,
          &common::milog::MiLogDefault::default_log_obj_,
          3u,
          "./src/player/gm/player_gm_comp.cpp",
          "procEffigyChallengeV2Activity",
          22463);
        common::milog::MiLogStream::operator<<<char [17],(char *[17])0>(&v17, "param not enough");
        common::milog::MiLogStream::~MiLogStream(&v17);
        v6 = -1;
        goto LABEL_27;
      }
      *(_DWORD *)(v3 + 32) = 0;
      v10 = std::vector<std::string>::operator[](param_vec, 1uLL);
      if ( common::tools::StringUtils::strToNum<unsigned int>(v10, (unsigned int *)(v3 + 32), 1) )
      {
        std::string::operator=(ret_msg, "level strToNum failed.");
        v6 = -1;
        goto LABEL_27;
      }
      *(_DWORD *)(v3 + 48) = 0;
      v11 = std::vector<std::string>::operator[](param_vec, 2uLL);
      if ( common::tools::StringUtils::strToNum<unsigned int>(v11, (unsigned int *)(v3 + 48), 1) )
      {
        std::string::operator=(ret_msg, "difficulty strToNum failed.");
        v6 = -1;
        goto LABEL_27;
      }
      v12 = std::vector<std::string>::operator[](param_vec, 0LL);
      if ( std::operator==<char>(v12, "FINISH") )
      {
        v13 = std::__shared_ptr_access<EffigyChallengeV2Activity,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<EffigyChallengeV2Activity,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 64));
        if ( EffigyChallengeV2Activity::openEffigyChallengeLevelByGm(v13, *(_DWORD *)(v3 + 32), *(_DWORD *)(v3 + 48)) )
        {
          std::string::operator=(ret_msg, "open effigy challenge v2 level failed");
          v6 = -1;
          goto LABEL_27;
        }
      }
      else
      {
        v14 = std::__shared_ptr_access<EffigyChallengeV2Activity,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<EffigyChallengeV2Activity,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 64));
        if ( EffigyChallengeV2Activity::setEffigyChallengeLevelByGm(v14, *(_DWORD *)(v3 + 32), *(_DWORD *)(v3 + 48)) )
        {
          std::string::operator=(ret_msg, &off_2637B7A0);
          v6 = -1;
          goto LABEL_27;
        }
      }
    }
    v6 = 0;
    goto LABEL_27;
  }
  std::string::operator=(ret_msg, "activity is not in schedule");
  v6 = -1;
LABEL_27:
  std::shared_ptr<EffigyChallengeV2Activity>::~shared_ptr((std::shared_ptr<EffigyChallengeV2Activity> *const)(v3 + 64));
LABEL_28:
  result = v6;
  if ( v18 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8008) = 0;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8008) = -168430091;
  }
  return result;
};

// Line 22498: range 0000000017D7F4D0-0000000017D7F572
void __cdecl procStrUtilsRegister::procStrUtilsRegister(procStrUtilsRegister *const this)
{
  std::function<int(GmContext&,const std::vector<std::string>&,std::string&)> *v1; // rax
  std::allocator<char> __a; // [rsp+1Fh] [rbp-31h] BYREF
  std::string __k; // [rsp+20h] [rbp-30h] BYREF

  std::allocator<char>::allocator(&__a);
  std::string::basic_string<std::allocator<char>>(&__k, "STR_VEC_TO_NUM_VEC_TEST", &__a);
  v1 = std::unordered_map<std::string,std::function<int ()(GmContext &,std::vector<std::string> const&,std::string&)>>::operator[](
         &GmUtils::op_func_map[abi:cxx11],
         &__k);
  std::function<int ()(GmContext &,std::vector<std::string> const&,std::string&)>::operator=<int (&)(GmContext &,std::vector<std::string> const&,std::string&)>(
    v1,
    (int (*)(GmContext *, const std::vector<std::string> *, std::string *))procStrUtils);
  std::string::~string(&__k);
  std::allocator<char>::~allocator(&__a);
};

// Line 22499: range 0000000017C6808D-0000000017C683A1
int32_t __cdecl procStrUtils(GmContext *context, const std::vector<std::string> *param_vec, std::string *ret_msg)
{
  unsigned __int64 v3; // r13
  __int64 v4; // rax
  _DWORD *v5; // r12
  int32_t v6; // r14d
  int32_t result; // eax
  std::vector<std::string>::const_iterator __for_begin; // [rsp+20h] [rbp-130h] BYREF
  std::vector<std::string>::const_iterator __for_end; // [rsp+28h] [rbp-128h] BYREF
  const std::vector<std::string> *__for_range; // [rsp+30h] [rbp-120h]
  const std::string *param; // [rsp+38h] [rbp-118h]
  std::string v13; // [rsp+40h] [rbp-110h] BYREF
  char v14[240]; // [rsp+60h] [rbp-F0h] BYREF

  v3 = (unsigned __int64)v14;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_2(192LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "3 32 16 8 ss:22512 64 24 13 str_vec:22500 128 24 13 num_vec:22501";
  *(_QWORD *)(v3 + 16) = procStrUtils;
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = -219021312;
  v5[536862722] = -234881024;
  v5[536862723] = -218959118;
  v5[536862724] = -218103808;
  v5[536862725] = -202116109;
  std::vector<std::string>::vector((std::vector<std::string> *const)(v3 + 64));
  std::vector<unsigned int>::vector((std::vector<unsigned int> *const)(v3 + 128));
  __for_range = param_vec;
  __for_begin._M_current = std::vector<std::string>::begin(param_vec)._M_current;
  __for_end._M_current = std::vector<std::string>::end(param_vec)._M_current;
  while ( __gnu_cxx::operator!=<std::string const*,std::vector<std::string>>(&__for_begin, &__for_end) )
  {
    param = __gnu_cxx::__normal_iterator<std::string const*,std::vector<std::string>>::operator*(&__for_begin);
    std::vector<std::string>::push_back((std::vector<std::string> *const)(v3 + 64), param);
    __gnu_cxx::__normal_iterator<std::string const*,std::vector<std::string>>::operator++(&__for_begin);
  }
  std::vector<std::string>::resize((std::vector<std::string> *const)(v3 + 64), 5uLL);
  if ( common::tools::StringUtils::strVecToNumVec<unsigned int>(
         (const std::vector<std::string> *)(v3 + 64),
         (std::vector<unsigned int> *)(v3 + 128)) )
  {
    std::string::operator=(ret_msg, "strVecToNumVec fail");
    v6 = -1;
  }
  else
  {
    common::tools::StringStream<common::tools::FixedBuffer<4096>>::StringStream((common::tools::StringStream<common::tools::FixedBuffer<4096> > *const)(v3 + 32));
    common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<<unsigned int>(
      (common::tools::StringStream<common::tools::FixedBuffer<4096> > *const)(v3 + 32),
      (const std::vector<unsigned int> *)(v3 + 128));
    common::tools::StringStream<common::tools::FixedBuffer<4096>>::str[abi:cxx11](
      &v13,
      (common::tools::StringStream<common::tools::FixedBuffer<4096> > *const)(v3 + 32));
    std::string::operator=(ret_msg, &v13);
    std::string::~string(&v13);
    v6 = 0;
    common::tools::StringStream<common::tools::FixedBuffer<4096>>::~StringStream((common::tools::StringStream<common::tools::FixedBuffer<4096> > *const)(v3 + 32));
  }
  std::vector<unsigned int>::~vector((std::vector<unsigned int> *const)(v3 + 128));
  std::vector<std::string>::~vector((std::vector<std::string> *const)(v3 + 64));
  result = v6;
  if ( v14 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8010) = 0LL;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 22519: range 0000000017D7F574-0000000017D7F616
void __cdecl procAvatarRenameRegister::procAvatarRenameRegister(procAvatarRenameRegister *const this)
{
  std::function<int(GmContext&,const std::vector<std::string>&,std::string&)> *v1; // rax
  std::allocator<char> __a; // [rsp+1Fh] [rbp-31h] BYREF
  std::string __k; // [rsp+20h] [rbp-30h] BYREF

  std::allocator<char>::allocator(&__a);
  std::string::basic_string<std::allocator<char>>(&__k, "AVATAR_RENAME", &__a);
  v1 = std::unordered_map<std::string,std::function<int ()(GmContext &,std::vector<std::string> const&,std::string&)>>::operator[](
         &GmUtils::op_func_map[abi:cxx11],
         &__k);
  std::function<int ()(GmContext &,std::vector<std::string> const&,std::string&)>::operator=<int (&)(GmContext &,std::vector<std::string> const&,std::string&)>(
    v1,
    (int (*)(GmContext *, const std::vector<std::string> *, std::string *))procAvatarRename);
  std::string::~string(&__k);
  std::allocator<char>::~allocator(&__a);
};

// Line 22520: range 0000000017C683A2-0000000017C68CC1
int32_t __cdecl procAvatarRename(GmContext *context, const std::vector<std::string> *param_vec, std::string *ret_msg)
{
  unsigned __int64 v3; // r12
  __int64 v4; // rax
  _DWORD *v5; // r13
  int32_t v6; // r14d
  const std::string *v7; // rax
  std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v8; // rax
  const std::string *v9; // rax
  const std::string *v10; // rax
  const std::string *v11; // rax
  const std::string *v12; // rax
  const std::string *v13; // rax
  const std::string *v14; // rax
  const std::string *v15; // rax
  const std::string *v16; // rax
  const std::string *v17; // rax
  const std::string *v18; // rax
  common::milog::MiLogStream *v19; // rax
  common::milog::MiLogStream *v20; // rax
  common::milog::MiLogStream *v21; // r14
  const std::string *v22; // rax
  int32_t result; // eax
  int val; // [rsp+24h] [rbp-ECh] BYREF
  uint32_t i; // [rsp+28h] [rbp-E8h]
  uint32_t avatar_id; // [rsp+2Ch] [rbp-E4h]
  const data::AvatarRenameExcelConfig *rename_config_ptr; // [rsp+30h] [rbp-E0h]
  PlayerAvatarComp *avatar_comp; // [rsp+38h] [rbp-D8h]
  std::string __rhs; // [rsp+40h] [rbp-D0h] BYREF
  common::milog::MiLogStream v31; // [rsp+60h] [rbp-B0h] BYREF
  char v32[144]; // [rsp+80h] [rbp-90h] BYREF

  v3 = (unsigned __int64)v32;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_1(96LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "3 32 4 15 rename_id:22526 48 4 16 loop_count:22591 64 16 11 timer:22600";
  *(_QWORD *)(v3 + 16) = procAvatarRename;
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = -234556924;
  v5[536862722] = -202178560;
  if ( std::vector<std::string>::size(param_vec) > 1 )
  {
    *(_DWORD *)(v3 + 32) = 0;
    v7 = std::vector<std::string>::operator[](param_vec, 1uLL);
    if ( common::tools::StringUtils::strToNum<unsigned int>(v7, (unsigned int *)(v3 + 32), 1) )
    {
      std::string::operator=(ret_msg, "rename_id strToNum failed.");
      v6 = -1;
    }
    else
    {
      ServiceBox::findService<GameserverService>();
      GameserverService::getConfig((GameserverService *const)(v3 + 64));
      v8 = std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 64));
      rename_config_ptr = data::RenameExcelConfigMgrBase::findAvatarRenameExcelConfig(
                            &v8->design_config.txt_config_mgr.rename_config_mgr,
                            *(_DWORD *)(v3 + 32));
      std::shared_ptr<Config>::~shared_ptr((std::shared_ptr<Config> *const)(v3 + 64));
      if ( rename_config_ptr )
      {
        if ( *(_BYTE *)(((unsigned __int64)&rename_config_ptr->related_avatar_id >> 3) + 0x7FFF8000) != 0
          && *(_BYTE *)(((unsigned __int64)&rename_config_ptr->related_avatar_id >> 3) + 0x7FFF8000) <= 3 )
        {
          __asan_report_load4(&rename_config_ptr->related_avatar_id);
        }
        avatar_id = rename_config_ptr->related_avatar_id;
        if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
          __asan_report_load8();
        avatar_comp = Player::getAvatarComp(context->player);
        v9 = std::vector<std::string>::operator[](param_vec, 0LL);
        if ( std::operator==<char>(v9, "CLEAR_QUEST") )
        {
          std::string::operator=(ret_msg, "CLEAR_QUEST succ!");
          PlayerAvatarComp::clearQuestRenameRecordByGm(avatar_comp, avatar_id);
          v6 = 0;
        }
        else
        {
          v10 = std::vector<std::string>::operator[](param_vec, 0LL);
          if ( std::operator==<char>(v10, "AUDIT_RESULT") )
          {
            if ( std::vector<std::string>::size(param_vec) > 2 )
            {
              v11 = std::vector<std::string>::operator[](param_vec, 2uLL);
              if ( std::operator==<char>(v11, "TRUE") )
              {
                v6 = PlayerAvatarComp::avatarRenameAuditResultByGm(avatar_comp, avatar_id, 1);
              }
              else
              {
                v12 = std::vector<std::string>::operator[](param_vec, 2uLL);
                if ( std::operator==<char>(v12, "FALSE") )
                {
                  v6 = PlayerAvatarComp::avatarRenameAuditResultByGm(avatar_comp, avatar_id, 0);
                }
                else
                {
                  v13 = std::vector<std::string>::operator[](param_vec, 2uLL);
                  std::operator+<char>((std::string *)&v31, "unknown param: ", v13);
                  std::string::operator=(ret_msg, &v31);
                  std::string::~string(&v31);
                  v6 = -1;
                }
              }
            }
            else
            {
              common::milog::MiLogStream::create(
                &v31,
                &common::milog::MiLogDefault::default_log_obj_,
                3u,
                "./src/player/gm/player_gm_comp.cpp",
                "procAvatarRename",
                22552);
              common::milog::MiLogStream::operator<<<char [17],(char *[17])0>(&v31, "param not enough");
              common::milog::MiLogStream::~MiLogStream(&v31);
              v6 = -1;
            }
          }
          else
          {
            v14 = std::vector<std::string>::operator[](param_vec, 0LL);
            if ( std::operator==<char>(v14, "SET_NAME") )
            {
              if ( std::vector<std::string>::size(param_vec) > 2 )
              {
                std::string::operator=(ret_msg, "SET_NAME succ!");
                v15 = std::vector<std::string>::operator[](param_vec, 2uLL);
                PlayerAvatarComp::setAvatarRenameByGm(avatar_comp, avatar_id, v15);
                v6 = 0;
              }
              else
              {
                common::milog::MiLogStream::create(
                  &v31,
                  &common::milog::MiLogDefault::default_log_obj_,
                  3u,
                  "./src/player/gm/player_gm_comp.cpp",
                  "procAvatarRename",
                  22575);
                common::milog::MiLogStream::operator<<<char [17],(char *[17])0>(&v31, "param not enough");
                common::milog::MiLogStream::~MiLogStream(&v31);
                v6 = -1;
              }
            }
            else
            {
              v16 = std::vector<std::string>::operator[](param_vec, 0LL);
              if ( std::operator==<char>(v16, "CLEAR_CD") )
              {
                std::string::operator=(ret_msg, "CLEAR_CD succ!");
                PlayerAvatarComp::clearAvatarRenameCdByGm(avatar_comp);
                v6 = 0;
              }
              else
              {
                v17 = std::vector<std::string>::operator[](param_vec, 0LL);
                if ( std::operator==<char>(v17, "SCAN_TEST") )
                {
                  *(_DWORD *)(v3 + 48) = 1;
                  if ( std::vector<std::string>::size(param_vec) > 2
                    && (v18 = std::vector<std::string>::operator[](param_vec, 2uLL),
                        common::tools::StringUtils::strToNum<unsigned int>(v18, (unsigned int *)(v3 + 48), 1)) )
                  {
                    std::string::operator=(ret_msg, "loop_count strToNum failed.");
                    v6 = -1;
                  }
                  else
                  {
                    common::tools::TimeUtils::Timer::Timer((common::tools::TimeUtils::Timer *const)(v3 + 64));
                    for ( i = 0; i < *(_DWORD *)(v3 + 48); ++i )
                      PlayerAvatarComp::checkAllAvatarRenameByGm(avatar_comp);
                    common::milog::MiLogStream::create(
                      &v31,
                      &common::milog::MiLogDefault::default_log_obj_,
                      1u,
                      "./src/player/gm/player_gm_comp.cpp",
                      "procAvatarRename",
                      22605);
                    v19 = common::milog::MiLogStream::operator<<<char [12],(char *[12])0>(
                            &v31,
                            (const char (*)[12])"loop count:");
                    v20 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                            v19,
                            (const unsigned int *)(v3 + 48));
                    v21 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                            v20,
                            (const char (*)[16])" time_cost(us):");
                    val = common::tools::TimeUtils::Timer::time((const common::tools::TimeUtils::Timer *const)(v3 + 64));
                    common::milog::MiLogStream::operator<<<int,(int *)0>(v21, &val);
                    common::milog::MiLogStream::~MiLogStream(&v31);
                    v6 = 0;
                    common::tools::TimeUtils::Timer::~Timer((common::tools::TimeUtils::Timer *const)(v3 + 64));
                  }
                }
                else
                {
                  v22 = std::vector<std::string>::operator[](param_vec, 0LL);
                  std::operator+<char>((std::string *)&v31, "unknown gm param: ", v22);
                  std::string::operator=(ret_msg, &v31);
                  std::string::~string(&v31);
                  v6 = -1;
                }
              }
            }
          }
        }
      }
      else
      {
        std::to_string(&__rhs, *(_DWORD *)(v3 + 32));
        std::operator+<char>((std::string *)&v31, "cannot find rename config, rename_id: ", &__rhs);
        std::string::operator=(ret_msg, &v31);
        std::string::~string(&v31);
        std::string::~string(&__rhs);
        v6 = -1;
      }
    }
  }
  else
  {
    common::milog::MiLogStream::create(
      &v31,
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/player/gm/player_gm_comp.cpp",
      "procAvatarRename",
      22523);
    common::milog::MiLogStream::operator<<<char [17],(char *[17])0>(&v31, "param not enough");
    common::milog::MiLogStream::~MiLogStream(&v31);
    v6 = -1;
  }
  result = v6;
  if ( v32 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8008) = 0;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8008) = -168430091;
  }
  return result;
};

// Line 22618: range 0000000017D7F618-0000000017D7F6BA
void __cdecl doMovingPlatformRegister::doMovingPlatformRegister(doMovingPlatformRegister *const this)
{
  std::function<int(GmContext&,const std::vector<std::string>&,std::string&)> *v1; // rax
  std::allocator<char> __a; // [rsp+1Fh] [rbp-31h] BYREF
  std::string __k; // [rsp+20h] [rbp-30h] BYREF

  std::allocator<char>::allocator(&__a);
  std::string::basic_string<std::allocator<char>>(&__k, "MOVING_PLATFORM", &__a);
  v1 = std::unordered_map<std::string,std::function<int ()(GmContext &,std::vector<std::string> const&,std::string&)>>::operator[](
         &GmUtils::op_func_map[abi:cxx11],
         &__k);
  std::function<int ()(GmContext &,std::vector<std::string> const&,std::string&)>::operator=<int (&)(GmContext &,std::vector<std::string> const&,std::string&)>(
    v1,
    (int (*)(GmContext *, const std::vector<std::string> *, std::string *))doMovingPlatform);
  std::string::~string(&__k);
  std::allocator<char>::~allocator(&__a);
};

// Line 22619: range 0000000017C68DFE-0000000017C6AA74
int32_t __cdecl doMovingPlatform(GmContext *context, const std::vector<std::string> *param_vec, std::string *ret_msg)
{
  int32_t v3; // r15d
  unsigned __int64 v4; // r13
  __int64 v5; // rax
  _DWORD *v6; // r12
  size_t v7; // rax
  const std::string *v8; // rax
  int v9; // r14d
  __gnu_cxx::__normal_iterator<char*,std::string > v10; // r14
  __gnu_cxx::__normal_iterator<char*,std::string > v11; // rax
  __gnu_cxx::__normal_iterator<char*,std::string >::difference_type v12; // rax
  __gnu_cxx::__normal_iterator<char*,std::string >::difference_type v13; // rax
  std::string *v14; // rax
  std::string *v15; // r8
  std::pair<std::__detail::_Node_iterator<std::pair<const std::string,std::string >,false,true>,bool> v16; // rax
  int v17; // r14d
  size_t v18; // rax
  Json::Value_0 *v19; // rax
  Json::Value_0 *v20; // rax
  Json::Value_0 *v21; // rax
  Json::Value_0 *v22; // rax
  Json::Value_0 *v23; // rax
  Json::Value_0 *v24; // rax
  Json::Value_0 *v25; // rax
  Json::Value_0 *v26; // rax
  Json::Value_0 *v27; // rax
  Json::Value_0 *v28; // rax
  Json::Value_0 *v29; // rax
  Json::CharReader *v30; // rax
  _BOOL4 v31; // r14d
  size_t v32; // rax
  std::vector<std::string>::const_reference v33; // rsi
  __int64 v34; // rax
  std::unique_ptr<Json::CharReader>::pointer v35; // r14
  unsigned __int64 v36; // rax
  __int64 v37; // rsi
  int v38; // r14d
  uint32_t v39; // eax
  int v40; // r14d
  PlatformRoute *v41; // r14
  Entity *v42; // rax
  PlatformComp *v43; // r14
  int v44; // r14d
  PlatformComp *v45; // rax
  __int64 v47; // [rsp+0h] [rbp-700h]
  __int64 v48; // [rsp+0h] [rbp-700h]
  unsigned __int8 (__fastcall *v49)(std::unique_ptr<Json::CharReader>::pointer, __int64, __int64, unsigned __int64, unsigned __int64); // [rsp+8h] [rbp-6F8h]
  std::allocator<char> __a; // [rsp+37h] [rbp-6C9h] BYREF
  uint32_t entity_id; // [rsp+38h] [rbp-6C8h]
  uint32_t moving_platform_type; // [rsp+3Ch] [rbp-6C4h]
  size_t param_index; // [rsp+40h] [rbp-6C0h]
  std::shared_ptr<PlatformRoute> p_route_ptr; // [rsp+50h] [rbp-6B0h] BYREF
  Transform current_transform; // [rsp+60h] [rbp-6A0h] BYREF
  std::string v57; // [rsp+80h] [rbp-680h] BYREF
  Json::Value_0 other; // [rsp+A0h] [rbp-660h] BYREF
  char v59[1584]; // [rsp+D0h] [rbp-630h] BYREF

  v4 = (unsigned __int64)v59;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v5 = __asan_stack_malloc_5(1536LL);
    if ( v5 )
      v4 = v5;
  }
  *(_QWORD *)v4 = 1102416563LL;
  *(_QWORD *)(v4 + 8) = "18 48 4 14 route_id:22721 64 8 15 get_param:22687 96 8 19 get_param_str:22697 128 16 15 scene_pt"
                        "r:22620 160 16 16 gadget_ptr:22703 192 16 23 platform_comp_ptr:22709 224 16 15 route_ptr:22722 2"
                        "56 32 7 s:22633 320 32 13 key_str:22637 384 32 15 value_str:22638 448 32 17 content_str:22672 51"
                        "2 32 13 err_msg:22673 576 40 16 json_value:22628 656 48 20 reader_builder:22649 736 56 15 param_"
                        "map:22627 832 80 11 param:22739 944 88 18 config_route:22723 1072 392 20 content_stream:22667";
  *(_QWORD *)(v4 + 16) = doMovingPlatform;
  v6 = (_DWORD *)(v4 >> 3);
  v6[536862720] = -235802127;
  v6[536862721] = -234556943;
  v6[536862722] = -218959360;
  v6[536862723] = -218959360;
  v6[536862724] = -219021312;
  v6[536862725] = -219021312;
  v6[536862726] = -219021312;
  v6[536862727] = -219021312;
  v6[536862729] = -218959118;
  v6[536862731] = -218959118;
  v6[536862733] = -218959118;
  v6[536862735] = -218959118;
  v6[536862737] = -218959118;
  v6[536862739] = -218959360;
  v6[536862740] = 62194;
  v6[536862742] = -218959118;
  v6[536862744] = -234881024;
  v6[536862745] = -218959118;
  v6[536862748] = -219021312;
  v6[536862749] = 62194;
  v6[536862752] = -218959360;
  v6[536862753] = 62194;
  v6[536862765] = -218103808;
  v6[536862766] = -202116109;
  v6[536862767] = -202116109;
  if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
    __asan_report_load8();
  Player::getSceneComp(context->player);
  PlayerSceneComp::getCurScene((const PlayerSceneComp *const)(v4 + 128));
  if ( std::operator==<Scene>(0LL, (const std::shared_ptr<Scene> *)(v4 + 128)) )
  {
    std::string::operator=(ret_msg, "scene is null");
    v3 = -1;
    goto LABEL_64;
  }
  std::unordered_map<std::string,std::string>::unordered_map((std::unordered_map<std::string,std::string> *const)(v4 + 736));
  Json::Value::Value(v4 + 576, 0LL);
  for ( param_index = 0LL; ; ++param_index )
  {
    v7 = std::vector<std::string>::size(&context->raw_param_vec);
    if ( param_index >= v7 )
      break;
    std::allocator<char>::allocator(&__a);
    std::string::basic_string<std::allocator<char>>((std::string *const)(v4 + 512), off_262D4140, &__a);
    v8 = std::vector<std::string>::operator[](&context->raw_param_vec, param_index);
    common::tools::StringUtils::trim((std::string *)(v4 + 256), v8, (const std::string *)(v4 + 512), 1);
    std::string::~string((void *)(v4 + 512));
    std::allocator<char>::~allocator(&__a);
    if ( (unsigned __int8)std::string::empty(v4 + 256) )
    {
      v9 = 0;
    }
    else
    {
      __a.gap0[0] = 61;
      v10._M_current = (char *)std::string::end(v4 + 256);
      v11._M_current = (char *)std::string::begin(v4 + 256);
      *(__gnu_cxx::__normal_iterator<char*,std::string > *)(v4 + 64) = std::find<__gnu_cxx::__normal_iterator<char *,std::string>,char>(
                                                                         v11,
                                                                         v10,
                                                                         __a.gap0);
      *(_QWORD *)(v4 + 96) = std::string::end(v4 + 256);
      if ( __gnu_cxx::operator==<char *,std::string>(
             (const __gnu_cxx::__normal_iterator<char*,std::string > *)(v4 + 64),
             (const __gnu_cxx::__normal_iterator<char*,std::string > *)(v4 + 96)) )
      {
        v9 = 1;
      }
      else
      {
        std::allocator<char>::allocator(&__a);
        std::string::basic_string<std::allocator<char>>((std::string *const)(v4 + 512), off_262D4140, &__a);
        *(_QWORD *)(v4 + 96) = std::string::begin(v4 + 256);
        v12 = __gnu_cxx::operator-<char *,std::string>(
                (const __gnu_cxx::__normal_iterator<char*,std::string > *)(v4 + 64),
                (const __gnu_cxx::__normal_iterator<char*,std::string > *)(v4 + 96));
        std::string::substr(v4 + 448, v4 + 256, 0LL, v12);
        common::tools::StringUtils::trim(
          (std::string *)(v4 + 320),
          (const std::string *)(v4 + 448),
          (const std::string *)(v4 + 512),
          1);
        std::string::~string((void *)(v4 + 448));
        std::string::~string((void *)(v4 + 512));
        std::allocator<char>::~allocator(&__a);
        std::allocator<char>::allocator(&__a);
        std::string::basic_string<std::allocator<char>>((std::string *const)(v4 + 512), off_262D4140, &__a);
        *(_QWORD *)(v4 + 96) = std::string::begin(v4 + 256);
        v13 = __gnu_cxx::operator-<char *,std::string>(
                (const __gnu_cxx::__normal_iterator<char*,std::string > *)(v4 + 64),
                (const __gnu_cxx::__normal_iterator<char*,std::string > *)(v4 + 96));
        std::string::substr(v4 + 448, v4 + 256, v13 + 1, -1LL);
        common::tools::StringUtils::trim(
          (std::string *)(v4 + 384),
          (const std::string *)(v4 + 448),
          (const std::string *)(v4 + 512),
          1);
        std::string::~string((void *)(v4 + 448));
        std::string::~string((void *)(v4 + 512));
        std::allocator<char>::~allocator(&__a);
        v14 = std::move<std::string &>((std::string *)(v4 + 384));
        v16 = std::unordered_map<std::string,std::string>::emplace<std::string&,std::string>(
                (std::unordered_map<std::string,std::string> *const)(v4 + 736),
                (std::string *)(v4 + 320),
                v14,
                (std::string *)(v4 + 320),
                v15);
        if ( !v16.second )
        {
          std::operator+<char>(&v57, "duplicate key:", (const std::string *)(v4 + 320));
          std::string::operator=(ret_msg, &v57);
          std::string::~string(&v57);
          v3 = -1;
          v17 = 0;
        }
        else
        {
          v17 = 1;
        }
        std::string::~string((void *)(v4 + 384));
        std::string::~string((void *)(v4 + 320));
        if ( v17 == 1 )
          v9 = 3;
        else
          v9 = 2;
      }
    }
    std::string::~string((void *)(v4 + 256));
    if ( v9 != 3 && v9 )
    {
      if ( v9 != 1 )
        goto LABEL_63;
      break;
    }
  }
  v18 = std::vector<std::string>::size(&context->raw_param_vec);
  if ( param_index >= v18 )
    goto LABEL_40;
  Json::CharReaderBuilder::CharReaderBuilder((Json::CharReaderBuilder *)(v4 + 656));
  Json::Value::Value((Json::Value *)&other, 0);
  v19 = Json::Value::operator[]((Json::Value_0 *const)(v4 + 664), "collectComments");
  Json::Value::operator=(v19, &other);
  Json::Value::~Value(&other);
  Json::Value::Value((Json::Value *)&other, 1);
  v20 = Json::Value::operator[]((Json::Value_0 *const)(v4 + 664), "allowComments");
  Json::Value::operator=(v20, &other);
  Json::Value::~Value(&other);
  Json::Value::Value((Json::Value *)&other, 1);
  v21 = Json::Value::operator[]((Json::Value_0 *const)(v4 + 664), "allowTrailingCommas");
  Json::Value::operator=(v21, &other);
  Json::Value::~Value(&other);
  Json::Value::Value((Json::Value *)&other, 1);
  v22 = Json::Value::operator[]((Json::Value_0 *const)(v4 + 664), "strictRoot");
  Json::Value::operator=(v22, &other);
  Json::Value::~Value(&other);
  Json::Value::Value((Json::Value *)&other, 1);
  v23 = Json::Value::operator[]((Json::Value_0 *const)(v4 + 664), "allowDroppedNullPlaceholders");
  Json::Value::operator=(v23, &other);
  Json::Value::~Value(&other);
  Json::Value::Value((Json::Value *)&other, 0);
  v24 = Json::Value::operator[]((Json::Value_0 *const)(v4 + 664), "allowNumericKeys");
  Json::Value::operator=(v24, &other);
  Json::Value::~Value(&other);
  Json::Value::Value((Json::Value *)&other, 0);
  v25 = Json::Value::operator[]((Json::Value_0 *const)(v4 + 664), "allowSingleQuotes");
  Json::Value::operator=(v25, &other);
  Json::Value::~Value(&other);
  Json::Value::Value((Json::Value *)&other, 1000);
  v26 = Json::Value::operator[]((Json::Value_0 *const)(v4 + 664), "stackLimit");
  Json::Value::operator=(v26, &other);
  Json::Value::~Value(&other);
  Json::Value::Value((Json::Value *)&other, 0);
  v27 = Json::Value::operator[]((Json::Value_0 *const)(v4 + 664), "failIfExtra");
  Json::Value::operator=(v27, &other);
  Json::Value::~Value(&other);
  Json::Value::Value((Json::Value *)&other, 1);
  v28 = Json::Value::operator[]((Json::Value_0 *const)(v4 + 664), "rejectDupKeys");
  Json::Value::operator=(v28, &other);
  Json::Value::~Value(&other);
  Json::Value::Value((Json::Value *)&other, 0);
  v29 = Json::Value::operator[]((Json::Value_0 *const)(v4 + 664), "allowSpecialFloats");
  Json::Value::operator=(v29, &other);
  Json::Value::~Value(&other);
  v30 = (Json::CharReader *)Json::CharReaderBuilder::newCharReader((Json::CharReaderBuilder *)(v4 + 656));
  std::unique_ptr<Json::CharReader>::unique_ptr<std::default_delete<Json::CharReader>,void>(
    (std::unique_ptr<Json::CharReader> *const)(v4 + 96),
    v30);
  if ( std::operator==<Json::CharReader,std::default_delete<Json::CharReader>>(
         (const std::unique_ptr<Json::CharReader> *)(v4 + 96),
         0LL) )
  {
    std::string::operator=(ret_msg, "reader_utr is null");
    v3 = -1;
    v31 = 0;
  }
  else
  {
    std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream(v4 + 1072);
    while ( 1 )
    {
      v32 = std::vector<std::string>::size(&context->raw_param_vec);
      if ( param_index >= v32 )
        break;
      v33 = std::vector<std::string>::operator[](&context->raw_param_vec, param_index);
      v34 = std::operator<<<char>(v4 + 1088, v33);
      std::operator<<<std::char_traits<char>>(v34, 32LL);
      ++param_index;
    }
    std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::str(v4 + 448, v4 + 1072);
    std::string::basic_string(v4 + 512);
    v35 = std::unique_ptr<Json::CharReader>::operator->((const std::unique_ptr<Json::CharReader> *const)(v4 + 96));
    if ( *(_BYTE *)(((unsigned __int64)v35 >> 3) + 0x7FFF8000) )
      __asan_report_load8();
    v36 = (unsigned __int64)(v35->_vptr_CharReader + 2);
    if ( *(_BYTE *)((v36 >> 3) + 0x7FFF8000) )
      __asan_report_load8();
    v49 = *(unsigned __int8 (__fastcall **)(std::unique_ptr<Json::CharReader>::pointer, __int64, __int64, unsigned __int64, unsigned __int64))v36;
    v47 = std::string::data(v4 + 448);
    v48 = v47 + std::string::size(v4 + 448);
    v37 = std::string::data(v4 + 448);
    if ( v49(v35, v37, v48, v4 + 576, v4 + 512) != 1 )
    {
      std::string::operator=(ret_msg, "parse json fail");
      v3 = -1;
      v38 = 0;
    }
    else
    {
      v38 = 1;
    }
    std::string::~string((void *)(v4 + 512));
    std::string::~string((void *)(v4 + 448));
    std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream(v4 + 1072);
    v31 = v38 == 1;
  }
  std::unique_ptr<Json::CharReader>::~unique_ptr((std::unique_ptr<Json::CharReader> *const)(v4 + 96));
  Json::CharReaderBuilder::~CharReaderBuilder((Json::CharReaderBuilder *const)(v4 + 656));
  if ( v31 )
  {
LABEL_40:
    *(_QWORD *)(v4 + 64) = v4 + 736;
    *(_QWORD *)(v4 + 96) = v4 + 736;
    std::allocator<char>::allocator(&__a);
    std::string::basic_string<std::allocator<char>>((std::string *const)(v4 + 512), "entity_id", &__a);
    entity_id = doMovingPlatform(GmContext &,std::vector<std::string> const&,std::string&)::{lambda(std::string const&)#1}::operator()(
                  (const doMovingPlatform::<lambda(const string&)> *const)(v4 + 64),
                  (const std::string *)(v4 + 512));
    std::string::~string((void *)(v4 + 512));
    std::allocator<char>::~allocator(&__a);
    v39 = (unsigned int)std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 128));
    Scene::findEntity<Gadget>((const Scene *const)(v4 + 160), v39);
    if ( std::operator==<Gadget>(0LL, (const std::shared_ptr<Gadget> *)(v4 + 160)) )
    {
      std::to_string((std::string *)(v4 + 512), entity_id);
      std::operator+<char>((std::string *)(v4 + 448), "findEntity<Gadget> fail, entity_id", (std::string *)(v4 + 512));
      std::string::operator=(ret_msg, v4 + 448);
      std::string::~string((void *)(v4 + 448));
      std::string::~string((void *)(v4 + 512));
      v3 = -1;
LABEL_62:
      std::shared_ptr<Gadget>::~shared_ptr((std::shared_ptr<Gadget> *const)(v4 + 160));
      goto LABEL_63;
    }
    std::__shared_ptr_access<Gadget,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Gadget,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 160));
    EcsBase<Gadget,GadgetCompBase,28u>::findComp<PlatformComp>((const EcsBase<Gadget,GadgetCompBase,28> *const)(v4 + 192));
    if ( std::operator==<PlatformComp>((const std::shared_ptr<PlatformComp> *)(v4 + 192), 0LL) )
    {
      std::string::operator=(ret_msg, "gadget_ptr->findComp<PlatformComp> failed");
      v3 = -1;
LABEL_61:
      std::shared_ptr<PlatformComp>::~shared_ptr((std::shared_ptr<PlatformComp> *const)(v4 + 192));
      goto LABEL_62;
    }
    std::allocator<char>::allocator(&__a);
    std::string::basic_string<std::allocator<char>>((std::string *const)(v4 + 512), "moving_platform_type", &__a);
    moving_platform_type = doMovingPlatform(GmContext &,std::vector<std::string> const&,std::string&)::{lambda(std::string const&)#1}::operator()(
                             (const doMovingPlatform::<lambda(const string&)> *const)(v4 + 64),
                             (const std::string *)(v4 + 512));
    std::string::~string((void *)(v4 + 512));
    std::allocator<char>::~allocator(&__a);
    if ( moving_platform_type == 1 )
    {
      std::allocator<char>::allocator(&__a);
      std::string::basic_string<std::allocator<char>>((std::string *const)(v4 + 512), "route_id", &__a);
      *(_DWORD *)(v4 + 48) = doMovingPlatform(GmContext &,std::vector<std::string> const&,std::string&)::{lambda(std::string const&)#1}::operator()(
                               (const doMovingPlatform::<lambda(const string&)> *const)(v4 + 64),
                               (const std::string *)(v4 + 512));
      std::string::~string((void *)(v4 + 512));
      std::allocator<char>::~allocator(&__a);
      common::tools::perf::make_shared<PlatformRoute,unsigned int &>(
        (unsigned int *)(v4 + 224),
        (unsigned int *)(v4 + 48));
      data::ConfigRoute::ConfigRoute((data::ConfigRoute *const)(v4 + 944));
      if ( !data::ConfigRoute::fromJson((data::ConfigRoute *const)(v4 + 944), (const Json::Value *)(v4 + 576)) )
      {
        std::string::operator=(ret_msg, "config_route.fromJson fail");
        v3 = -1;
        v40 = 0;
      }
      else
      {
        v41 = std::__shared_ptr_access<PlatformRoute,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<PlatformRoute,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 224));
        v42 = (Entity *)std::__shared_ptr_access<Gadget,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Gadget,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 160));
        Entity::getTransform(&current_transform, v42);
        if ( PlatformRoute::init(
               v41,
               (const data::ConfigRoute *)(v4 + 944),
               &Quaternion::identity,
               &Vector3::zero,
               &current_transform) )
        {
          std::string::operator=(ret_msg, "route init fail");
          v3 = -1;
          v40 = 0;
        }
        else
        {
          v43 = std::__shared_ptr_access<PlatformComp,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<PlatformComp,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 192));
          std::shared_ptr<PlatformRoute>::shared_ptr(&p_route_ptr, (const std::shared_ptr<PlatformRoute> *)(v4 + 224));
          PlatformComp::setPlatformRouteByGm(v43, &p_route_ptr);
          std::shared_ptr<PlatformRoute>::~shared_ptr(&p_route_ptr);
          v40 = 1;
        }
      }
      data::ConfigRoute::~ConfigRoute((data::ConfigRoute *const)(v4 + 944));
      std::shared_ptr<PlatformRoute>::~shared_ptr((std::shared_ptr<PlatformRoute> *const)(v4 + 224));
      if ( !v40 )
        goto LABEL_61;
    }
    else
    {
      if ( moving_platform_type != 3 )
      {
        std::to_string((std::string *)(v4 + 448), moving_platform_type);
        std::operator+<char>((std::string *)(v4 + 512), "invalid moving_platform_type:", (std::string *)(v4 + 448));
        std::string::operator=(ret_msg, v4 + 512);
        std::string::~string((void *)(v4 + 512));
        std::string::~string((void *)(v4 + 448));
        v3 = -1;
        goto LABEL_61;
      }
      PlatformRouteParam::PlatformRouteParam((PlatformRouteParam *const)(v4 + 832));
      std::allocator<char>::allocator(&__a);
      std::string::basic_string<std::allocator<char>>((std::string *const)(v4 + 512), "point_array_id", &__a);
      *(_DWORD *)(v4 + 832) = doMovingPlatform(GmContext &,std::vector<std::string> const&,std::string&)::{lambda(std::string const&)#1}::operator()(
                                (const doMovingPlatform::<lambda(const string&)> *const)(v4 + 64),
                                (const std::string *)(v4 + 512));
      std::string::~string((void *)(v4 + 512));
      std::allocator<char>::~allocator(&__a);
      std::allocator<char>::allocator(&__a);
      std::string::basic_string<std::allocator<char>>((std::string *const)(v4 + 512), "route_type", &__a);
      *(_DWORD *)(v4 + 888) = doMovingPlatform(GmContext &,std::vector<std::string> const&,std::string&)::{lambda(std::string const&)#1}::operator()(
                                (const doMovingPlatform::<lambda(const string&)> *const)(v4 + 64),
                                (const std::string *)(v4 + 512));
      std::string::~string((void *)(v4 + 512));
      std::allocator<char>::~allocator(&__a);
      std::allocator<char>::allocator(&__a);
      std::string::basic_string<std::allocator<char>>((std::string *const)(v4 + 512), "is_turn_mode", &__a);
      *(_BYTE *)(v4 + 892) = doMovingPlatform(GmContext &,std::vector<std::string> const&,std::string&)::{lambda(std::string const&)#1}::operator()(
                               (const doMovingPlatform::<lambda(const string&)> *const)(v4 + 64),
                               (const std::string *)(v4 + 512)) != 0;
      std::string::~string((void *)(v4 + 512));
      std::allocator<char>::~allocator(&__a);
      std::allocator<char>::allocator(&__a);
      std::string::basic_string<std::allocator<char>>((std::string *const)(v4 + 512), "record_mode", &__a);
      *(_DWORD *)(v4 + 896) = doMovingPlatform(GmContext &,std::vector<std::string> const&,std::string&)::{lambda(std::string const&)#1}::operator()(
                                (const doMovingPlatform::<lambda(const string&)> *const)(v4 + 64),
                                (const std::string *)(v4 + 512));
      std::string::~string((void *)(v4 + 512));
      std::allocator<char>::~allocator(&__a);
      std::allocator<char>::allocator(&__a);
      std::string::basic_string<std::allocator<char>>((std::string *const)(v4 + 512), "is_trigger_one_way_end", &__a);
      *(_BYTE *)(v4 + 900) = doMovingPlatform(GmContext &,std::vector<std::string> const&,std::string&)::{lambda(std::string const&)#1}::operator()(
                               (const doMovingPlatform::<lambda(const string&)> *const)(v4 + 64),
                               (const std::string *)(v4 + 512)) != 0;
      std::string::~string((void *)(v4 + 512));
      std::allocator<char>::~allocator(&__a);
      std::allocator<char>::allocator(&__a);
      std::string::basic_string<std::allocator<char>>((std::string *const)(v4 + 512), "speed_level", &__a);
      *(_DWORD *)(v4 + 904) = doMovingPlatform(GmContext &,std::vector<std::string> const&,std::string&)::{lambda(std::string const&)#1}::operator()(
                                (const doMovingPlatform::<lambda(const string&)> *const)(v4 + 64),
                                (const std::string *)(v4 + 512));
      std::string::~string((void *)(v4 + 512));
      std::allocator<char>::~allocator(&__a);
      std::allocator<char>::allocator(&__a);
      std::string::basic_string<std::allocator<char>>(
        (std::string *const)(v4 + 512),
        "is_simulate_temp_route_by_time",
        &__a);
      *(_BYTE *)(v4 + 901) = doMovingPlatform(GmContext &,std::vector<std::string> const&,std::string&)::{lambda(std::string const&)#1}::operator()(
                               (const doMovingPlatform::<lambda(const string&)> *const)(v4 + 64),
                               (const std::string *)(v4 + 512)) != 0;
      std::string::~string((void *)(v4 + 512));
      std::allocator<char>::~allocator(&__a);
      if ( !data::vecFromJson((const Json::Value *)(v4 + 576), (data::ConfigPointList *)(v4 + 840)) )
      {
        std::string::operator=(ret_msg, "vecFromJson fail");
        v3 = -1;
        v44 = 0;
      }
      else
      {
        v45 = std::__shared_ptr_access<PlatformComp,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<PlatformComp,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 192));
        if ( PlatformComp::setupRouteAndStartMove(v45, (PlatformRouteParam *)(v4 + 832)) )
        {
          std::string::operator=(ret_msg, "setupRouteAndStartMove fail");
          v3 = -1;
          v44 = 0;
        }
        else
        {
          v44 = 1;
        }
      }
      PlatformRouteParam::~PlatformRouteParam((PlatformRouteParam *const)(v4 + 832));
      if ( !v44 )
        goto LABEL_61;
    }
    v3 = 0;
    goto LABEL_61;
  }
LABEL_63:
  Json::Value::~Value((Json::Value_0 *const)(v4 + 576));
  std::unordered_map<std::string,std::string>::~unordered_map((std::unordered_map<std::string,std::string> *const)(v4 + 736));
LABEL_64:
  std::shared_ptr<Scene>::~shared_ptr((std::shared_ptr<Scene> *const)(v4 + 128));
  if ( v59 == (char *)v4 )
  {
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8008) = 0LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8010) = 0LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8018) = 0LL;
    *(_DWORD *)((v4 >> 3) + 0x7FFF8024) = 0;
    *(_DWORD *)((v4 >> 3) + 0x7FFF802C) = 0;
    *(_DWORD *)((v4 >> 3) + 0x7FFF8034) = 0;
    *(_DWORD *)((v4 >> 3) + 0x7FFF803C) = 0;
    *(_DWORD *)((v4 >> 3) + 0x7FFF8044) = 0;
    *(_QWORD *)((v4 >> 3) + 0x7FFF804C) = 0LL;
    *(_DWORD *)((v4 >> 3) + 0x7FFF8058) = 0;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8060) = 0LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8070) = 0LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8080) = 0LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF80B4) = 0LL;
    *(_DWORD *)((v4 >> 3) + 0x7FFF80BC) = 0;
  }
  else
  {
    *(_QWORD *)v4 = 1172321806LL;
    __asan_stack_free_5(v4, 1536LL, v59);
  }
  return v3;
};

// Line 22687: range 0000000017C68CC2-0000000017C68DFD
uint32_t __cdecl doMovingPlatform(GmContext &,std::vector<std::string> const&,std::string&)::{lambda(std::string const&)#1}::operator()(
        const doMovingPlatform::<lambda(const string&)> *const __closure,
        const std::string *param_name_str)
{
  unsigned __int64 v2; // rbx
  __int64 v3; // rax
  unsigned __int64 v4; // r12
  uint32_t result; // eax
  std::__detail::_Node_iterator<std::pair<const std::string,std::string >,false,true>::pointer v6; // rax
  std::__detail::_Node_iterator_base<std::pair<const std::string,std::string >,true> __y; // [rsp+18h] [rbp-68h] BYREF
  char v8[96]; // [rsp+20h] [rbp-60h] BYREF

  v2 = (unsigned __int64)v8;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_0(64LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "1 32 8 8 it:22689";
  *(_QWORD *)(v2 + 16) = doMovingPlatform(GmContext &,std::vector<std::string> const&,std::string&)::{lambda(std::string const&)#1}::operator();
  v4 = v2 >> 3;
  *(_DWORD *)(v4 + 2147450880) = -235802127;
  *(_DWORD *)(v4 + 2147450884) = -202116352;
  if ( *(_BYTE *)(((unsigned __int64)__closure >> 3) + 0x7FFF8000) )
    __asan_report_load8();
  *(std::unordered_map<std::string,std::string>::iterator *)(v2 + 32) = std::unordered_map<std::string,std::string>::find(
                                                                          __closure->__param_map,
                                                                          param_name_str);
  __y._M_cur = std::unordered_map<std::string,std::string>::end(__closure->__param_map)._M_cur;
  if ( std::__detail::operator==<std::pair<std::string const,std::string>,true>(
         (const std::__detail::_Node_iterator_base<std::pair<const std::string,std::string >,true> *)(v2 + 32),
         &__y) )
  {
    result = 0;
  }
  else
  {
    v6 = std::__detail::_Node_iterator<std::pair<std::string const,std::string>,false,true>::operator->((const std::__detail::_Node_iterator<std::pair<const std::string,std::string >,false,true> *const)(v2 + 32));
    result = common::tools::Converter<unsigned int>::convertTo(&v6->second);
  }
  if ( v8 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 22769: range 0000000017C6AA75-0000000017C6B196
int32_t __cdecl procCoinCollectActivity(
        GmContext *context,
        const std::vector<std::string> *param_vec,
        std::string *ret_msg)
{
  int32_t v3; // r14d
  unsigned __int64 v4; // r13
  __int64 v5; // rax
  _DWORD *v6; // r12
  const std::string *v7; // rax
  const std::string *v8; // rax
  bool v9; // r15
  int v10; // r15d
  common::milog::MiLogStream *v11; // r15
  const std::string *v12; // rax
  std::__shared_ptr_access<CoinCollectActivity,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v13; // rax
  const std::string *v14; // rax
  const std::string *v15; // rax
  const std::string *v16; // rax
  std::__shared_ptr_access<CoinCollectActivity,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v17; // rax
  int32_t result; // eax
  std::allocator<char> __a; // [rsp+2Fh] [rbp-F1h] BYREF
  common::milog::MiLogStream v21; // [rsp+30h] [rbp-F0h] BYREF
  char v22[208]; // [rsp+50h] [rbp-D0h] BYREF

  v4 = (unsigned __int64)v22;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v5 = __asan_stack_malloc_2(160LL);
    if ( v5 )
      v4 = v5;
  }
  *(_QWORD *)v4 = 1102416563LL;
  *(_QWORD *)(v4 + 8) = "4 32 4 11 level:22817 48 4 13 is_open:22823 64 16 18 activity_ptr:22775 96 24 25 internal_param_list:22790";
  *(_QWORD *)(v4 + 16) = procCoinCollectActivity;
  v6 = (_DWORD *)(v4 >> 3);
  v6[536862720] = -235802127;
  v6[536862721] = -234556924;
  v6[536862722] = -219021312;
  v6[536862723] = -218103808;
  v6[536862724] = -202116109;
  if ( !std::vector<std::string>::size(param_vec) )
  {
    common::milog::MiLogStream::create(
      &v21,
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/player/gm/player_gm_comp.cpp",
      "procCoinCollectActivity",
      22772);
    common::milog::MiLogStream::operator<<<char [17],(char *[17])0>(&v21, "param not enough");
    common::milog::MiLogStream::~MiLogStream(&v21);
    v3 = -1;
    goto LABEL_33;
  }
  if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
    __asan_report_load8();
  Player::getActivityComp(context->player);
  PlayerActivityComp::findOpenningActivity<CoinCollectActivity>((PlayerActivityComp *const)(v4 + 64));
  if ( !std::operator==<CoinCollectActivity>(0LL, (const std::shared_ptr<CoinCollectActivity> *)(v4 + 64)) )
  {
    v7 = std::vector<std::string>::operator[](param_vec, 0LL);
    if ( std::operator==<char>(v7, "SETFAKE") )
    {
      if ( std::vector<std::string>::size(param_vec) <= 1 )
      {
        common::milog::MiLogStream::create(
          &v21,
          &common::milog::MiLogDefault::default_log_obj_,
          3u,
          "./src/player/gm/player_gm_comp.cpp",
          "procCoinCollectActivity",
          22787);
        common::milog::MiLogStream::operator<<<char [17],(char *[17])0>(&v21, "param not enough");
        common::milog::MiLogStream::~MiLogStream(&v21);
        v3 = -1;
        goto LABEL_32;
      }
      std::vector<unsigned int>::vector((std::vector<unsigned int> *const)(v4 + 96));
      std::allocator<char>::allocator(&__a);
      std::string::basic_string<std::allocator<char>>((std::string *const)&v21, ",", &__a);
      v8 = std::vector<std::string>::operator[](param_vec, 1uLL);
      v9 = common::tools::StringUtils::splitToList<unsigned int>(
             v8,
             (const std::string *)&v21,
             (std::vector<unsigned int> *)(v4 + 96),
             0) != 0;
      std::string::~string(&v21);
      std::allocator<char>::~allocator(&__a);
      if ( v9 )
      {
        std::string::operator=(ret_msg, &off_2637C8A0);
        v3 = -1;
        v10 = 0;
      }
      else if ( std::vector<unsigned int>::size((const std::vector<unsigned int> *const)(v4 + 96)) > 4 )
      {
        common::milog::MiLogStream::create(
          &v21,
          &common::milog::MiLogDefault::default_log_obj_,
          1u,
          "./src/player/gm/player_gm_comp.cpp",
          "procCoinCollectActivity",
          22802);
        v11 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(&v21, (const char (*)[16])off_2637C940);
        v12 = std::vector<std::string>::operator[](param_vec, 1uLL);
        common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v11, v12);
        common::milog::MiLogStream::~MiLogStream(&v21);
        v13 = std::__shared_ptr_access<CoinCollectActivity,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<CoinCollectActivity,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 64));
        if ( CoinCollectActivity::setFakeLevelDataByGM(v13, (const std::vector<unsigned int> *)(v4 + 96)) )
        {
          std::string::operator=(ret_msg, "setFakeLevelDataByGM failed.");
          v3 = -1;
          v10 = 0;
        }
        else
        {
          v10 = 1;
        }
      }
      else
      {
        std::string::operator=(ret_msg, "internal param list len is invalid.");
        v3 = -1;
        v10 = 0;
      }
      std::vector<unsigned int>::~vector((std::vector<unsigned int> *const)(v4 + 96));
      if ( v10 != 1 )
        goto LABEL_32;
    }
    else
    {
      v14 = std::vector<std::string>::operator[](param_vec, 0LL);
      if ( std::operator==<char>(v14, "SETLEVEL") )
      {
        if ( std::vector<std::string>::size(param_vec) <= 2 )
        {
          common::milog::MiLogStream::create(
            &v21,
            &common::milog::MiLogDefault::default_log_obj_,
            3u,
            "./src/player/gm/player_gm_comp.cpp",
            "procCoinCollectActivity",
            22814);
          common::milog::MiLogStream::operator<<<char [17],(char *[17])0>(&v21, "param not enough");
          common::milog::MiLogStream::~MiLogStream(&v21);
          v3 = -1;
          goto LABEL_32;
        }
        *(_DWORD *)(v4 + 32) = 0;
        v15 = std::vector<std::string>::operator[](param_vec, 1uLL);
        if ( common::tools::StringUtils::strToNum<unsigned int>(v15, (unsigned int *)(v4 + 32), 1) )
        {
          std::string::operator=(ret_msg, "level strToNum failed.");
          v3 = -1;
          goto LABEL_32;
        }
        *(_DWORD *)(v4 + 48) = 0;
        v16 = std::vector<std::string>::operator[](param_vec, 2uLL);
        if ( common::tools::StringUtils::strToNum<unsigned int>(v16, (unsigned int *)(v4 + 48), 1) )
        {
          std::string::operator=(ret_msg, "is_open strToNum failed.");
          v3 = -1;
          goto LABEL_32;
        }
        v17 = std::__shared_ptr_access<CoinCollectActivity,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<CoinCollectActivity,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 64));
        if ( CoinCollectActivity::setLevelOpenStateByGM(v17, *(_DWORD *)(v4 + 32), *(_DWORD *)(v4 + 48)) )
        {
          std::string::operator=(ret_msg, "setLevelOpenStateByGM failed.");
          v3 = -1;
          goto LABEL_32;
        }
      }
    }
    v3 = 0;
    goto LABEL_32;
  }
  std::string::operator=(ret_msg, "activity is not in schedule");
  v3 = -1;
LABEL_32:
  std::shared_ptr<CoinCollectActivity>::~shared_ptr((std::shared_ptr<CoinCollectActivity> *const)(v4 + 64));
LABEL_33:
  result = v3;
  if ( v22 == (char *)v4 )
  {
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8008) = 0LL;
    *(_DWORD *)((v4 >> 3) + 0x7FFF8010) = 0;
  }
  else
  {
    *(_QWORD *)v4 = 1172321806LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v4 >> 3) + 0x7FFF8010) = -168430091;
  }
  return result;
};

// Line 22839: range 0000000017D7F9C6-0000000017D7FA68
void __cdecl procBrickBreakerActivityRegister::procBrickBreakerActivityRegister(
        procBrickBreakerActivityRegister *const this)
{
  std::function<int(GmContext&,const std::vector<std::string>&,std::string&)> *v1; // rax
  std::allocator<char> __a; // [rsp+1Fh] [rbp-31h] BYREF
  std::string __k; // [rsp+20h] [rbp-30h] BYREF

  std::allocator<char>::allocator(&__a);
  std::string::basic_string<std::allocator<char>>(&__k, "BRICK_BREAKER", &__a);
  v1 = std::unordered_map<std::string,std::function<int ()(GmContext &,std::vector<std::string> const&,std::string&)>>::operator[](
         &GmUtils::op_func_map[abi:cxx11],
         &__k);
  std::function<int ()(GmContext &,std::vector<std::string> const&,std::string&)>::operator=<int (&)(GmContext &,std::vector<std::string> const&,std::string&)>(
    v1,
    (int (*)(GmContext *, const std::vector<std::string> *, std::string *))procBrickBreakerActivity);
  std::string::~string(&__k);
  std::allocator<char>::~allocator(&__a);
};

// Line 22840: range 0000000017C6B197-0000000017C6B83A
int32_t __cdecl procBrickBreakerActivity(
        GmContext *context,
        const std::vector<std::string> *param_vec,
        std::string *ret_msg)
{
  unsigned __int64 v3; // r12
  __int64 v4; // rax
  _DWORD *v5; // r13
  int32_t v6; // r14d
  const std::string *v7; // rax
  const std::string *v8; // rax
  common::milog::MiLogStream *v9; // rax
  BrickBreakerActivity *v10; // rax
  const std::string *v11; // rax
  const std::string *v12; // rax
  common::milog::MiLogStream *v13; // r14
  const std::string *v14; // rax
  const std::string *v15; // rax
  BrickBreakerActivity *v16; // rax
  const std::string *v17; // rax
  BrickBreakerActivity *v18; // rax
  int32_t result; // eax
  common::milog::MiLogStream v21; // [rsp+20h] [rbp-B0h] BYREF
  char v22[144]; // [rsp+40h] [rbp-90h] BYREF

  v3 = (unsigned __int64)v22;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_1(96LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "3 32 1 27 is_ignore_check_by_gm:22860 48 4 14 level_id:22876 64 16 18 activity_ptr:22846";
  *(_QWORD *)(v3 + 16) = procBrickBreakerActivity;
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = -234556927;
  v5[536862722] = -202178560;
  if ( !std::vector<std::string>::size(param_vec) )
  {
    common::milog::MiLogStream::create(
      &v21,
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/player/gm/player_gm_comp.cpp",
      "procBrickBreakerActivity",
      22843);
    common::milog::MiLogStream::operator<<<char [17],(char *[17])0>(&v21, "param not enough");
    common::milog::MiLogStream::~MiLogStream(&v21);
    v6 = -1;
    goto LABEL_28;
  }
  if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
    __asan_report_load8();
  Player::getActivityComp(context->player);
  PlayerActivityComp::findOpenningActivity<BrickBreakerActivity>((PlayerActivityComp *const)(v3 + 64));
  if ( !std::operator==<BrickBreakerActivity>(0LL, (const std::shared_ptr<BrickBreakerActivity> *)(v3 + 64)) )
  {
    v7 = std::vector<std::string>::operator[](param_vec, 0LL);
    if ( std::operator==<char>(v7, "IGNORE") )
    {
      if ( std::vector<std::string>::size(param_vec) <= 1 )
      {
        common::milog::MiLogStream::create(
          &v21,
          &common::milog::MiLogDefault::default_log_obj_,
          3u,
          "./src/player/gm/player_gm_comp.cpp",
          "procBrickBreakerActivity",
          22857);
        common::milog::MiLogStream::operator<<<char [17],(char *[17])0>(&v21, "param not enough");
        common::milog::MiLogStream::~MiLogStream(&v21);
        v6 = -1;
        goto LABEL_27;
      }
      *(_BYTE *)(v3 + 32) = 0;
      v8 = std::vector<std::string>::operator[](param_vec, 1uLL);
      if ( common::tools::StringUtils::strToNum<bool>(v8, (bool *)(v3 + 32), 1) )
      {
        common::milog::MiLogStream::create(
          &v21,
          &common::milog::MiLogDefault::default_log_obj_,
          3u,
          "./src/player/gm/player_gm_comp.cpp",
          "procBrickBreakerActivity",
          22863);
        v9 = common::milog::MiLogStream::operator<<<std::string>(&v21, param_vec);
        common::milog::MiLogStream::operator<<<char [47],(char *[47])0>(
          v9,
          (const char (*)[47])" parse is_ignore_check_by_gm failed of param 2");
        common::milog::MiLogStream::~MiLogStream(&v21);
        std::string::operator=(ret_msg, "invalid is_ignore_check_by_gm param");
        v6 = -1;
        goto LABEL_27;
      }
      v10 = std::__shared_ptr_access<BrickBreakerActivity,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<BrickBreakerActivity,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 64));
      BrickBreakerActivity::setIsIgnoreCheckByGm(v10, *(_BYTE *)(v3 + 32));
    }
    else
    {
      v11 = std::vector<std::string>::operator[](param_vec, 0LL);
      if ( std::operator==<char>(v11, "FINISH") )
      {
        if ( std::vector<std::string>::size(param_vec) > 2 )
        {
          *(_DWORD *)(v3 + 48) = 0;
          v12 = std::vector<std::string>::operator[](param_vec, 2uLL);
          if ( common::tools::StringUtils::strToNum<unsigned int>(v12, (unsigned int *)(v3 + 48), 1) )
          {
            common::milog::MiLogStream::create(
              &v21,
              &common::milog::MiLogDefault::default_log_obj_,
              3u,
              "./src/player/gm/player_gm_comp.cpp",
              "procBrickBreakerActivity",
              22879);
            v13 = common::milog::MiLogStream::operator<<<char [24],(char *[24])0>(
                    &v21,
                    (const char (*)[24])"strToNum failed, param:");
            v14 = std::vector<std::string>::operator[](param_vec, 2uLL);
            common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v13, v14);
            common::milog::MiLogStream::~MiLogStream(&v21);
            std::string::operator=(ret_msg, "invalid param");
            v6 = -1;
          }
          else
          {
            v15 = std::vector<std::string>::operator[](param_vec, 1uLL);
            if ( std::operator==<char>(v15, "WORLD") )
            {
              v16 = std::__shared_ptr_access<BrickBreakerActivity,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<BrickBreakerActivity,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 64));
              v6 = BrickBreakerActivity::finishWorldLevelByGm(v16, *(_DWORD *)(v3 + 48));
            }
            else
            {
              v17 = std::vector<std::string>::operator[](param_vec, 1uLL);
              if ( std::operator==<char>(v17, "DUNGEON") )
              {
                v18 = std::__shared_ptr_access<BrickBreakerActivity,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<BrickBreakerActivity,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 64));
                v6 = BrickBreakerActivity::finishDungeonLevelByGm(v18, *(_DWORD *)(v3 + 48));
              }
              else
              {
                common::milog::MiLogStream::create(
                  &v21,
                  &common::milog::MiLogDefault::default_log_obj_,
                  3u,
                  "./src/player/gm/player_gm_comp.cpp",
                  "procBrickBreakerActivity",
                  22893);
                common::milog::MiLogStream::operator<<<char [12],(char *[12])0>(&v21, (const char (*)[12])"param error");
                common::milog::MiLogStream::~MiLogStream(&v21);
                v6 = -1;
              }
            }
          }
        }
        else
        {
          common::milog::MiLogStream::create(
            &v21,
            &common::milog::MiLogDefault::default_log_obj_,
            3u,
            "./src/player/gm/player_gm_comp.cpp",
            "procBrickBreakerActivity",
            22873);
          common::milog::MiLogStream::operator<<<char [17],(char *[17])0>(&v21, "param not enough");
          common::milog::MiLogStream::~MiLogStream(&v21);
          v6 = -1;
        }
        goto LABEL_27;
      }
    }
    v6 = 0;
    goto LABEL_27;
  }
  std::string::operator=(ret_msg, "activity is not in schedule");
  v6 = -1;
LABEL_27:
  std::shared_ptr<BrickBreakerActivity>::~shared_ptr((std::shared_ptr<BrickBreakerActivity> *const)(v3 + 64));
LABEL_28:
  result = v6;
  if ( v22 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8008) = 0;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8008) = -168430091;
  }
  return result;
};

// Line 22901: range 0000000017D7FA6A-0000000017D7FB0C
void __cdecl procElectroherculesBattleActivityRegister::procElectroherculesBattleActivityRegister(
        procElectroherculesBattleActivityRegister *const this)
{
  std::function<int(GmContext&,const std::vector<std::string>&,std::string&)> *v1; // rax
  std::allocator<char> __a; // [rsp+1Fh] [rbp-31h] BYREF
  std::string __k; // [rsp+20h] [rbp-30h] BYREF

  std::allocator<char>::allocator(&__a);
  std::string::basic_string<std::allocator<char>>(&__k, "ELECTROHERCULES_BATTLE", &__a);
  v1 = std::unordered_map<std::string,std::function<int ()(GmContext &,std::vector<std::string> const&,std::string&)>>::operator[](
         &GmUtils::op_func_map[abi:cxx11],
         &__k);
  std::function<int ()(GmContext &,std::vector<std::string> const&,std::string&)>::operator=<int (&)(GmContext &,std::vector<std::string> const&,std::string&)>(
    v1,
    (int (*)(GmContext *, const std::vector<std::string> *, std::string *))procElectroherculesBattleActivity);
  std::string::~string(&__k);
  std::allocator<char>::~allocator(&__a);
};

// Line 22902: range 0000000017C6B83B-0000000017C6BD5B
int32_t __cdecl procElectroherculesBattleActivity(
        GmContext *context,
        const std::vector<std::string> *param_vec,
        std::string *ret_msg)
{
  unsigned __int64 v3; // r12
  __int64 v4; // rax
  _DWORD *v5; // r13
  int32_t v6; // r14d
  const std::string *v7; // rax
  const std::string *v8; // rax
  ElectroherculesBattleActivity *v9; // rax
  const std::string *v10; // rax
  const std::string *v11; // rax
  const std::string *v12; // rax
  ElectroherculesBattleActivity *v13; // rax
  common::milog::MiLogStream *v14; // rax
  int32_t result; // eax
  common::milog::MiLogStream v17; // [rsp+20h] [rbp-D0h] BYREF
  char v18[176]; // [rsp+40h] [rbp-B0h] BYREF

  v3 = (unsigned __int64)v18;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_1(128LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "4 48 4 14 stage_id:22936 64 4 16 difficulty:22942 80 4 16 gallery_id:22948 96 16 18 activity_ptr:22903";
  *(_QWORD *)(v3 + 16) = procElectroherculesBattleActivity;
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = -234556943;
  v5[536862722] = -234556924;
  v5[536862723] = -202178560;
  if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
    __asan_report_load8();
  Player::getActivityComp(context->player);
  PlayerActivityComp::findOpenningActivity<ElectroherculesBattleActivity>((PlayerActivityComp *const)(v3 + 96));
  if ( std::operator==<ElectroherculesBattleActivity>(
         0LL,
         (const std::shared_ptr<ElectroherculesBattleActivity> *)(v3 + 96)) )
  {
    std::string::operator=(ret_msg, "activity is not open");
    v6 = -1;
  }
  else
  {
    if ( !std::vector<std::string>::size(param_vec) )
      goto LABEL_9;
    v7 = std::vector<std::string>::operator[](param_vec, 0LL);
    if ( !std::operator==<char>(v7, "OPEN") )
    {
      v10 = std::vector<std::string>::operator[](param_vec, 0LL);
      if ( std::operator==<char>(v10, "START") )
      {
        if ( std::vector<std::string>::size(param_vec) > 2 )
        {
          *(_DWORD *)(v3 + 48) = 0;
          v11 = std::vector<std::string>::operator[](param_vec, 1uLL);
          if ( common::tools::StringUtils::strToNum<unsigned int>(v11, (unsigned int *)(v3 + 48), 1) )
          {
            std::string::operator=(ret_msg, "invalid stage_id param");
            v6 = -1;
          }
          else
          {
            *(_DWORD *)(v3 + 64) = 0;
            v12 = std::vector<std::string>::operator[](param_vec, 2uLL);
            if ( common::tools::StringUtils::strToNum<unsigned int>(v12, (unsigned int *)(v3 + 64), 1) )
            {
              std::string::operator=(ret_msg, "invalid gallery_id param");
              v6 = -1;
            }
            else
            {
              *(_DWORD *)(v3 + 80) = 0;
              v13 = std::__shared_ptr_access<ElectroherculesBattleActivity,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<ElectroherculesBattleActivity,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 96));
              if ( ElectroherculesBattleActivity::selectGalleryDifficulty(
                     v13,
                     *(_DWORD *)(v3 + 48),
                     *(_DWORD *)(v3 + 64),
                     (uint32_t *)(v3 + 80)) )
              {
                std::string::operator=(ret_msg, "select gallery difficulty failed.");
                v6 = -1;
              }
              else
              {
                common::milog::MiLogStream::create(
                  &v17,
                  &common::milog::MiLogDefault::default_log_obj_,
                  1u,
                  "./src/player/gm/player_gm_comp.cpp",
                  "procElectroherculesBattleActivity",
                  22954);
                v14 = common::milog::MiLogStream::operator<<<char [49],(char *[49])0>(
                        &v17,
                        (const char (*)[49])"electrohercules gm select diffculty, gallery id:");
                common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                  v14,
                  (const unsigned int *)(v3 + 80));
                common::milog::MiLogStream::~MiLogStream(&v17);
                v6 = 0;
              }
            }
          }
        }
        else
        {
          common::milog::MiLogStream::create(
            &v17,
            &common::milog::MiLogDefault::default_log_obj_,
            3u,
            "./src/player/gm/player_gm_comp.cpp",
            "procElectroherculesBattleActivity",
            22933);
          common::milog::MiLogStream::operator<<<char [17],(char *[17])0>(&v17, "param not enough");
          common::milog::MiLogStream::~MiLogStream(&v17);
          v6 = -1;
        }
      }
      else
      {
        v6 = 0;
      }
      goto LABEL_26;
    }
    if ( std::vector<std::string>::size(param_vec) > 1 )
    {
      *(_DWORD *)(v3 + 80) = 0;
      v8 = std::vector<std::string>::operator[](param_vec, 1uLL);
      if ( common::tools::StringUtils::strToNum<unsigned int>(v8, (unsigned int *)(v3 + 80), 1) )
      {
        std::string::operator=(ret_msg, "stage_id strToNum failed.");
        v6 = -1;
      }
      else
      {
        v9 = std::__shared_ptr_access<ElectroherculesBattleActivity,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<ElectroherculesBattleActivity,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 96));
        v6 = ElectroherculesBattleActivity::openStageByGm(v9, *(_DWORD *)(v3 + 80));
      }
    }
    else
    {
LABEL_9:
      std::string::operator=(ret_msg, "param not enough");
      v6 = -1;
    }
  }
LABEL_26:
  std::shared_ptr<ElectroherculesBattleActivity>::~shared_ptr((std::shared_ptr<ElectroherculesBattleActivity> *const)(v3 + 96));
  result = v6;
  if ( v18 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 22961: range 0000000017D7FB0E-0000000017D7FBB0
void __cdecl procGroupSuiteRegister::procGroupSuiteRegister(procGroupSuiteRegister *const this)
{
  std::function<int(GmContext&,const std::vector<std::string>&,std::string&)> *v1; // rax
  std::allocator<char> __a; // [rsp+1Fh] [rbp-31h] BYREF
  std::string __k; // [rsp+20h] [rbp-30h] BYREF

  std::allocator<char>::allocator(&__a);
  std::string::basic_string<std::allocator<char>>(&__k, "GROUP_SUITE", &__a);
  v1 = std::unordered_map<std::string,std::function<int ()(GmContext &,std::vector<std::string> const&,std::string&)>>::operator[](
         &GmUtils::op_func_map[abi:cxx11],
         &__k);
  std::function<int ()(GmContext &,std::vector<std::string> const&,std::string&)>::operator=<int (&)(GmContext &,std::vector<std::string> const&,std::string&)>(
    v1,
    (int (*)(GmContext *, const std::vector<std::string> *, std::string *))procGroupSuite);
  std::string::~string(&__k);
  std::allocator<char>::~allocator(&__a);
};

// Line 22962: range 0000000017C6BD5C-0000000017C6C88F
int32_t __cdecl procGroupSuite(GmContext *context, const std::vector<std::string> *param_vec, std::string *ret_msg)
{
  unsigned __int64 v3; // r13
  __int64 v4; // rax
  _DWORD *v5; // r12
  int32_t v6; // r14d
  const std::string *v7; // rax
  const std::string *v8; // rax
  const std::string *v9; // rax
  Group *v10; // rax
  const std::string *v11; // rax
  const std::string *v12; // rax
  Group *v13; // rax
  const std::string *v14; // rax
  const std::string *v15; // rax
  Group *v16; // rax
  const std::string *v17; // rax
  const std::string *v18; // rax
  Group *v19; // rax
  const std::string *v20; // rax
  common::tools::StringStream<common::tools::FixedBuffer<4096> > *v21; // rax
  common::tools::StringStream<common::tools::FixedBuffer<4096> > *v22; // rax
  common::tools::StringStream<common::tools::FixedBuffer<4096> > *v23; // r14
  Group *v24; // rax
  unsigned int SuiteIndex; // eax
  int32_t result; // eax
  common::milog::MiLogStream v28; // [rsp+20h] [rbp-1F0h] BYREF
  char v29[464]; // [rsp+40h] [rbp-1D0h] BYREF

  v3 = (unsigned __int64)v29;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_3(416LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "6 32 4 14 group_id:22969 48 4 14 suite_id:23063 64 16 15 group_ptr:22976 96 16 9 oss:23083 128 2"
                        "8 17 log_context:23071 192 160 26 dummy_script_context:23070";
  *(_QWORD *)(v3 + 16) = procGroupSuite;
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = -234556924;
  v5[536862722] = -219021312;
  v5[536862723] = -219021312;
  v5[536862724] = 0x4000000;
  v5[536862725] = -218959118;
  v5[536862731] = -202116109;
  v5[536862732] = -202116109;
  if ( std::vector<std::string>::size(param_vec) <= 1 )
  {
    common::milog::MiLogStream::create(
      &v28,
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/player/gm/player_gm_comp.cpp",
      "procGroupSuite",
      22965);
    common::milog::MiLogStream::operator<<<char [17],(char *[17])0>(&v28, "param not enough");
    common::milog::MiLogStream::~MiLogStream(&v28);
    v6 = -1;
    goto LABEL_47;
  }
  *(_DWORD *)(v3 + 32) = 0;
  v7 = std::vector<std::string>::operator[](param_vec, 1uLL);
  if ( common::tools::StringUtils::strToNum<unsigned int>(v7, (unsigned int *)(v3 + 32), 1) )
  {
    std::string::operator=(ret_msg, "group_id strToNum failed.");
    v6 = -1;
    goto LABEL_47;
  }
  if ( *(_BYTE *)(((unsigned __int64)&context->scene >> 3) + 0x7FFF8000) )
    __asan_report_load8();
  Scene::findGroup((Scene *const)(v3 + 64), (uint32_t)context->scene);
  if ( !std::operator==<Group>(0LL, (const std::shared_ptr<Group> *)(v3 + 64)) )
  {
    v8 = std::vector<std::string>::operator[](param_vec, 0LL);
    if ( std::operator==<char>(v8, "ADD_EXTRA") )
    {
      if ( std::vector<std::string>::size(param_vec) <= 2 )
      {
        common::milog::MiLogStream::create(
          &v28,
          &common::milog::MiLogDefault::default_log_obj_,
          3u,
          "./src/player/gm/player_gm_comp.cpp",
          "procGroupSuite",
          22987);
        common::milog::MiLogStream::operator<<<char [17],(char *[17])0>(&v28, "param not enough");
        common::milog::MiLogStream::~MiLogStream(&v28);
        v6 = -1;
        goto LABEL_46;
      }
      *(_DWORD *)(v3 + 48) = 0;
      v9 = std::vector<std::string>::operator[](param_vec, 2uLL);
      if ( common::tools::StringUtils::strToNum<unsigned int>(v9, (unsigned int *)(v3 + 48), 1) )
      {
LABEL_38:
        std::string::operator=(ret_msg, "suite_id strToNum failed.");
        v6 = -1;
        goto LABEL_46;
      }
      ScriptContext::ScriptContext((ScriptContext *const)(v3 + 192));
      v10 = std::__shared_ptr_access<Group,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Group,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 64));
      if ( Group::addExtraGroupSuite(v10, (const ScriptContext *)(v3 + 192), *(_DWORD *)(v3 + 48)) )
      {
        std::string::operator=(ret_msg, "addExtraGroupSuite failed.");
        v6 = -1;
      }
      else
      {
        v6 = 0;
      }
    }
    else
    {
      v11 = std::vector<std::string>::operator[](param_vec, 0LL);
      if ( std::operator==<char>(v11, "REMOVE_EXTRA") )
      {
        if ( std::vector<std::string>::size(param_vec) <= 2 )
        {
          common::milog::MiLogStream::create(
            &v28,
            &common::milog::MiLogDefault::default_log_obj_,
            3u,
            "./src/player/gm/player_gm_comp.cpp",
            "procGroupSuite",
            23011);
          common::milog::MiLogStream::operator<<<char [17],(char *[17])0>(&v28, "param not enough");
          common::milog::MiLogStream::~MiLogStream(&v28);
          v6 = -1;
          goto LABEL_46;
        }
        *(_DWORD *)(v3 + 48) = 0;
        v12 = std::vector<std::string>::operator[](param_vec, 2uLL);
        if ( common::tools::StringUtils::strToNum<unsigned int>(v12, (unsigned int *)(v3 + 48), 1) )
          goto LABEL_38;
        ScriptContext::ScriptContext((ScriptContext *const)(v3 + 192));
        v13 = std::__shared_ptr_access<Group,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Group,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 64));
        if ( Group::removeExtraGroupSuite(v13, (const ScriptContext *)(v3 + 192), *(_DWORD *)(v3 + 48)) )
        {
          std::string::operator=(ret_msg, "removeExtraGroupSuite failed.");
          v6 = -1;
        }
        else
        {
          v6 = 0;
        }
      }
      else
      {
        v14 = std::vector<std::string>::operator[](param_vec, 0LL);
        if ( std::operator==<char>(v14, "KILL_EXTRA") )
        {
          if ( std::vector<std::string>::size(param_vec) <= 2 )
          {
            common::milog::MiLogStream::create(
              &v28,
              &common::milog::MiLogDefault::default_log_obj_,
              3u,
              "./src/player/gm/player_gm_comp.cpp",
              "procGroupSuite",
              23035);
            common::milog::MiLogStream::operator<<<char [17],(char *[17])0>(&v28, "param not enough");
            common::milog::MiLogStream::~MiLogStream(&v28);
            v6 = -1;
            goto LABEL_46;
          }
          *(_DWORD *)(v3 + 48) = 0;
          v15 = std::vector<std::string>::operator[](param_vec, 2uLL);
          if ( common::tools::StringUtils::strToNum<unsigned int>(v15, (unsigned int *)(v3 + 48), 1) )
            goto LABEL_38;
          ScriptContext::ScriptContext((ScriptContext *const)(v3 + 192));
          v16 = std::__shared_ptr_access<Group,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Group,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 64));
          if ( Group::killExtraGroupSuite(v16, (const ScriptContext *)(v3 + 192), *(_DWORD *)(v3 + 48)) )
          {
            std::string::operator=(ret_msg, "killExtraGroupSuite failed.");
            v6 = -1;
          }
          else
          {
            v6 = 0;
          }
        }
        else
        {
          v17 = std::vector<std::string>::operator[](param_vec, 0LL);
          if ( !std::operator==<char>(v17, "GOTO") )
          {
            v20 = std::vector<std::string>::operator[](param_vec, 0LL);
            if ( std::operator==<char>(v20, off_26370AC0) )
            {
              common::tools::StringStream<common::tools::FixedBuffer<4096>>::StringStream((common::tools::StringStream<common::tools::FixedBuffer<4096> > *const)(v3 + 96));
              v21 = common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(
                      (common::tools::StringStream<common::tools::FixedBuffer<4096> > *const)(v3 + 96),
                      " group_id[");
              v22 = common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(v21, *(_DWORD *)(v3 + 32));
              v23 = common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(v22, "].suite_index = ");
              v24 = std::__shared_ptr_access<Group,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Group,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 64));
              SuiteIndex = Group::getSuiteIndex(v24);
              common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(v23, SuiteIndex);
              common::tools::StringStream<common::tools::FixedBuffer<4096>>::str[abi:cxx11](
                (std::string *)&v28,
                (common::tools::StringStream<common::tools::FixedBuffer<4096> > *const)(v3 + 96));
              std::string::operator=(ret_msg, &v28);
              std::string::~string(&v28);
              v6 = 0;
              common::tools::StringStream<common::tools::FixedBuffer<4096>>::~StringStream((common::tools::StringStream<common::tools::FixedBuffer<4096> > *const)(v3 + 96));
            }
            else
            {
              v6 = 0;
            }
            goto LABEL_46;
          }
          if ( std::vector<std::string>::size(param_vec) <= 2 )
          {
            common::milog::MiLogStream::create(
              &v28,
              &common::milog::MiLogDefault::default_log_obj_,
              3u,
              "./src/player/gm/player_gm_comp.cpp",
              "procGroupSuite",
              23059);
            common::milog::MiLogStream::operator<<<char [17],(char *[17])0>(&v28, "param not enough");
            common::milog::MiLogStream::~MiLogStream(&v28);
            v6 = -1;
            goto LABEL_46;
          }
          *(_DWORD *)(v3 + 48) = 0;
          v18 = std::vector<std::string>::operator[](param_vec, 2uLL);
          if ( common::tools::StringUtils::strToNum<unsigned int>(v18, (unsigned int *)(v3 + 48), 1) )
            goto LABEL_38;
          ScriptContext::ScriptContext((ScriptContext *const)(v3 + 192));
          SuiteLogContext::SuiteLogContext((SuiteLogContext *const)(v3 + 128));
          *(_DWORD *)(v3 + 128) = 11;
          v19 = std::__shared_ptr_access<Group,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Group,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 64));
          if ( Group::goToGroupSuite(
                 v19,
                 (const ScriptContext *)(v3 + 192),
                 *(SuiteLogContext *)(v3 + 128),
                 *(_DWORD *)(v3 + 48)) )
          {
            std::string::operator=(ret_msg, "goToGroupSuite failed.");
            v6 = -1;
          }
          else
          {
            v6 = 0;
          }
        }
      }
    }
    ScriptContext::~ScriptContext((ScriptContext *const)(v3 + 192));
    goto LABEL_46;
  }
  std::string::operator=(ret_msg, "findGroup failed.");
  v6 = -1;
LABEL_46:
  std::shared_ptr<Group>::~shared_ptr((std::shared_ptr<Group> *const)(v3 + 64));
LABEL_47:
  result = v6;
  if ( v29 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8010) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF802C) = 0LL;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8020) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8028) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8030) = -168430091;
  }
  return result;
};

// Line 23092: range 0000000017D7FBB2-0000000017D7FC54
void __cdecl procDuelHeartRegister::procDuelHeartRegister(procDuelHeartRegister *const this)
{
  std::function<int(GmContext&,const std::vector<std::string>&,std::string&)> *v1; // rax
  std::allocator<char> __a; // [rsp+1Fh] [rbp-31h] BYREF
  std::string __k; // [rsp+20h] [rbp-30h] BYREF

  std::allocator<char>::allocator(&__a);
  std::string::basic_string<std::allocator<char>>(&__k, "DUEL_HEART", &__a);
  v1 = std::unordered_map<std::string,std::function<int ()(GmContext &,std::vector<std::string> const&,std::string&)>>::operator[](
         &GmUtils::op_func_map[abi:cxx11],
         &__k);
  std::function<int ()(GmContext &,std::vector<std::string> const&,std::string&)>::operator=<int (&)(GmContext &,std::vector<std::string> const&,std::string&)>(
    v1,
    (int (*)(GmContext *, const std::vector<std::string> *, std::string *))procDuelHeart);
  std::string::~string(&__k);
  std::allocator<char>::~allocator(&__a);
};

// Line 23093: range 0000000017C6C890-0000000017C6CCE1
int32_t __cdecl procDuelHeart(GmContext *context, const std::vector<std::string> *param_vec, std::string *ret_msg)
{
  unsigned __int64 v3; // r12
  __int64 v4; // rax
  _DWORD *v5; // r13
  int32_t v6; // r14d
  const std::string *v7; // rax
  std::__shared_ptr_access<DuelHeartActivity,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v8; // rax
  const std::string *v9; // rax
  const std::string *v10; // rax
  std::__shared_ptr_access<DuelHeartActivity,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v11; // rax
  const std::string *v12; // rax
  const std::string *v13; // rax
  const std::string *v14; // rax
  std::__shared_ptr_access<DuelHeartActivity,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v15; // rax
  int32_t result; // eax
  char v18[144]; // [rsp+20h] [rbp-90h] BYREF

  v3 = (unsigned __int64)v18;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_1(96LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "3 32 4 14 level_id:23133 48 4 16 difficulty:23139 64 16 18 activity_ptr:23094";
  *(_QWORD *)(v3 + 16) = procDuelHeart;
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = -234556924;
  v5[536862722] = -202178560;
  if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
    __asan_report_load8();
  Player::getActivityComp(context->player);
  PlayerActivityComp::findOpenningActivity<DuelHeartActivity>((PlayerActivityComp *const)(v3 + 64));
  if ( std::operator==<DuelHeartActivity>((const std::shared_ptr<DuelHeartActivity> *)(v3 + 64), 0LL) )
  {
    std::string::operator=(ret_msg, "activity is not open");
    v6 = -1;
    goto LABEL_25;
  }
  if ( std::vector<std::string>::empty(param_vec) )
    goto LABEL_19;
  v7 = std::vector<std::string>::operator[](param_vec, 0LL);
  if ( std::operator==<char>(v7, "OPEN_ALL") )
  {
    v8 = std::__shared_ptr_access<DuelHeartActivity,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<DuelHeartActivity,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 64));
    DuelHeartActivity::openAllLevelByGm(v8);
    v6 = 0;
    goto LABEL_25;
  }
  v9 = std::vector<std::string>::operator[](param_vec, 0LL);
  if ( std::operator==<char>(v9, "OPEN") )
  {
    if ( std::vector<std::string>::size(param_vec) > 1 )
    {
      *(_DWORD *)(v3 + 48) = 0;
      v10 = std::vector<std::string>::operator[](param_vec, 1uLL);
      if ( !common::tools::StringUtils::strToNum<unsigned int>(v10, (unsigned int *)(v3 + 48), 1) )
      {
        v11 = std::__shared_ptr_access<DuelHeartActivity,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<DuelHeartActivity,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 64));
        DuelHeartActivity::openLevelByGm(v11, *(_DWORD *)(v3 + 48));
        v6 = 0;
        goto LABEL_25;
      }
      goto LABEL_22;
    }
LABEL_19:
    std::string::operator=(ret_msg, "invalid param");
    v6 = -1;
    goto LABEL_25;
  }
  v12 = std::vector<std::string>::operator[](param_vec, 0LL);
  if ( std::operator==<char>(v12, "OPEN_DIFFICULTY") )
  {
    if ( std::vector<std::string>::size(param_vec) <= 2 )
      goto LABEL_19;
    *(_DWORD *)(v3 + 32) = 0;
    v13 = std::vector<std::string>::operator[](param_vec, 1uLL);
    if ( common::tools::StringUtils::strToNum<unsigned int>(v13, (unsigned int *)(v3 + 32), 1)
      || (*(_DWORD *)(v3 + 48) = 0,
          v14 = std::vector<std::string>::operator[](param_vec, 2uLL),
          common::tools::StringUtils::strToNum<unsigned int>(v14, (unsigned int *)(v3 + 48), 1)) )
    {
LABEL_22:
      std::string::operator=(ret_msg, "strToNum failed");
      v6 = -1;
      goto LABEL_25;
    }
    v15 = std::__shared_ptr_access<DuelHeartActivity,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<DuelHeartActivity,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 64));
    DuelHeartActivity::openLevelDifficultyByGm(v15, *(_DWORD *)(v3 + 32), *(_DWORD *)(v3 + 48));
    v6 = 0;
  }
  else
  {
    v6 = 0;
  }
LABEL_25:
  std::shared_ptr<DuelHeartActivity>::~shared_ptr((std::shared_ptr<DuelHeartActivity> *const)(v3 + 64));
  result = v6;
  if ( v18 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8008) = 0;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8008) = -168430091;
  }
  return result;
};

// Line 23151: range 0000000017D7FC56-0000000017D7FCF8
void __cdecl procSeaLampV3ActivityRegister::procSeaLampV3ActivityRegister(procSeaLampV3ActivityRegister *const this)
{
  std::function<int(GmContext&,const std::vector<std::string>&,std::string&)> *v1; // rax
  std::allocator<char> __a; // [rsp+1Fh] [rbp-31h] BYREF
  std::string __k; // [rsp+20h] [rbp-30h] BYREF

  std::allocator<char>::allocator(&__a);
  std::string::basic_string<std::allocator<char>>(&__k, "LAN_V3", &__a);
  v1 = std::unordered_map<std::string,std::function<int ()(GmContext &,std::vector<std::string> const&,std::string&)>>::operator[](
         &GmUtils::op_func_map[abi:cxx11],
         &__k);
  std::function<int ()(GmContext &,std::vector<std::string> const&,std::string&)>::operator=<int (&)(GmContext &,std::vector<std::string> const&,std::string&)>(
    v1,
    (int (*)(GmContext *, const std::vector<std::string> *, std::string *))procSeaLampV3Activity);
  std::string::~string(&__k);
  std::allocator<char>::~allocator(&__a);
};

// Line 23152: range 0000000017C6CCE2-0000000017C6DADA
int32_t __cdecl procSeaLampV3Activity(
        GmContext *context,
        const std::vector<std::string> *param_vec,
        std::string *ret_msg)
{
  unsigned __int64 v3; // r13
  __int64 v4; // rax
  _DWORD *v5; // r14
  int32_t restarted; // r12d
  const std::string *v7; // rax
  const std::string *v8; // rax
  const std::string *v9; // rax
  common::milog::MiLogStream *v10; // r12
  const std::string *v11; // rax
  SeaLampV3Activity *v12; // rax
  const std::string *v13; // rax
  const std::string *v14; // rax
  common::milog::MiLogStream *v15; // r12
  const std::string *v16; // rax
  SeaLampV3Activity *v17; // rax
  const std::string *v18; // rax
  const std::string *v19; // rax
  common::milog::MiLogStream *v20; // r12
  const std::string *v21; // rax
  const std::string *v22; // rax
  common::milog::MiLogStream *v23; // r12
  const std::string *v24; // rax
  SeaLampV3Activity *v25; // rax
  const std::string *v26; // rax
  const std::string *v27; // rax
  const std::string *v28; // rax
  common::milog::MiLogStream *v29; // r12
  const std::string *v30; // rax
  SeaLampV3Activity *v31; // rax
  const std::string *v32; // rax
  const std::string *v33; // rax
  common::milog::MiLogStream *v34; // r12
  const std::string *v35; // rax
  const std::string *v36; // rax
  common::milog::MiLogStream *v37; // r12
  const std::string *v38; // rax
  SeaLampV3Activity *v39; // rax
  int32_t result; // eax
  common::milog::MiLogStream v42; // [rsp+20h] [rbp-B0h] BYREF
  char v43[144]; // [rsp+40h] [rbp-90h] BYREF

  v3 = (unsigned __int64)v43;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_1(96LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "3 32 4 14 level_id:23253 48 4 17 finish_time:23259 64 16 18 activity_ptr:23158";
  *(_QWORD *)(v3 + 16) = procSeaLampV3Activity;
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = -234556924;
  v5[536862722] = -202178560;
  if ( std::vector<std::string>::empty(param_vec) )
  {
    common::milog::MiLogStream::create(
      &v42,
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/player/gm/player_gm_comp.cpp",
      "procSeaLampV3Activity",
      23155);
    common::milog::MiLogStream::operator<<<char [17],(char *[17])0>(&v42, "param not enough");
    common::milog::MiLogStream::~MiLogStream(&v42);
    restarted = -1;
    goto LABEL_53;
  }
  if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
    __asan_report_load8();
  Player::getActivityComp(context->player);
  PlayerActivityComp::findOpenningActivity<SeaLampV3Activity>((PlayerActivityComp *const)(v3 + 64));
  if ( !std::operator==<SeaLampV3Activity>(0LL, (const std::shared_ptr<SeaLampV3Activity> *)(v3 + 64)) )
  {
    v7 = std::vector<std::string>::operator[](param_vec, 0LL);
    if ( std::operator==<char>(v7, "RACE") )
    {
      if ( std::vector<std::string>::size(param_vec) <= 1 )
      {
        common::milog::MiLogStream::create(
          &v42,
          &common::milog::MiLogDefault::default_log_obj_,
          3u,
          "./src/player/gm/player_gm_comp.cpp",
          "procSeaLampV3Activity",
          23169);
        common::milog::MiLogStream::operator<<<char [17],(char *[17])0>(&v42, "param not enough");
        common::milog::MiLogStream::~MiLogStream(&v42);
        restarted = -1;
        goto LABEL_52;
      }
      v8 = std::vector<std::string>::operator[](param_vec, 1uLL);
      if ( std::operator==<char>(v8, "OPEN_LEVEL") )
      {
        if ( std::vector<std::string>::size(param_vec) > 2 )
        {
          *(_DWORD *)(v3 + 48) = 0;
          v9 = std::vector<std::string>::operator[](param_vec, 2uLL);
          if ( common::tools::StringUtils::strToNum<unsigned int>(v9, (unsigned int *)(v3 + 48), 1) )
          {
            common::milog::MiLogStream::create(
              &v42,
              &common::milog::MiLogDefault::default_log_obj_,
              3u,
              "./src/player/gm/player_gm_comp.cpp",
              "procSeaLampV3Activity",
              23182);
            v10 = common::milog::MiLogStream::operator<<<char [15],(char *[15])0>(
                    &v42,
                    (const char (*)[15])"invalid param:");
            v11 = std::vector<std::string>::operator[](param_vec, 2uLL);
            common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v10, v11);
            common::milog::MiLogStream::~MiLogStream(&v42);
            restarted = -1;
          }
          else
          {
            v12 = std::__shared_ptr_access<SeaLampV3Activity,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<SeaLampV3Activity,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 64));
            restarted = SeaLampV3Activity::openRaceLevelByGm(v12, *(_DWORD *)(v3 + 48));
          }
        }
        else
        {
          common::milog::MiLogStream::create(
            &v42,
            &common::milog::MiLogDefault::default_log_obj_,
            3u,
            "./src/player/gm/player_gm_comp.cpp",
            "procSeaLampV3Activity",
            23176);
          common::milog::MiLogStream::operator<<<char [17],(char *[17])0>(&v42, "param not enough");
          common::milog::MiLogStream::~MiLogStream(&v42);
          restarted = -1;
        }
        goto LABEL_52;
      }
      v13 = std::vector<std::string>::operator[](param_vec, 1uLL);
      if ( std::operator==<char>(v13, "RESTART_LEVEL") )
      {
        if ( std::vector<std::string>::size(param_vec) > 2 )
        {
          *(_DWORD *)(v3 + 48) = 0;
          v14 = std::vector<std::string>::operator[](param_vec, 2uLL);
          if ( common::tools::StringUtils::strToNum<unsigned int>(v14, (unsigned int *)(v3 + 48), 1) )
          {
            common::milog::MiLogStream::create(
              &v42,
              &common::milog::MiLogDefault::default_log_obj_,
              3u,
              "./src/player/gm/player_gm_comp.cpp",
              "procSeaLampV3Activity",
              23197);
            v15 = common::milog::MiLogStream::operator<<<char [15],(char *[15])0>(
                    &v42,
                    (const char (*)[15])"invalid param:");
            v16 = std::vector<std::string>::operator[](param_vec, 2uLL);
            common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v15, v16);
            common::milog::MiLogStream::~MiLogStream(&v42);
            restarted = -1;
          }
          else
          {
            v17 = std::__shared_ptr_access<SeaLampV3Activity,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<SeaLampV3Activity,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 64));
            restarted = SeaLampV3Activity::restartRaceLevelByGm(v17, *(_DWORD *)(v3 + 48));
          }
        }
        else
        {
          common::milog::MiLogStream::create(
            &v42,
            &common::milog::MiLogDefault::default_log_obj_,
            3u,
            "./src/player/gm/player_gm_comp.cpp",
            "procSeaLampV3Activity",
            23191);
          common::milog::MiLogStream::operator<<<char [17],(char *[17])0>(&v42, "param not enough");
          common::milog::MiLogStream::~MiLogStream(&v42);
          restarted = -1;
        }
        goto LABEL_52;
      }
      v18 = std::vector<std::string>::operator[](param_vec, 1uLL);
      if ( std::operator==<char>(v18, "SET_LEVEL_SCORE") )
      {
        if ( std::vector<std::string>::size(param_vec) > 3 )
        {
          *(_DWORD *)(v3 + 32) = 0;
          v19 = std::vector<std::string>::operator[](param_vec, 2uLL);
          if ( common::tools::StringUtils::strToNum<unsigned int>(v19, (unsigned int *)(v3 + 32), 1) )
          {
            common::milog::MiLogStream::create(
              &v42,
              &common::milog::MiLogDefault::default_log_obj_,
              3u,
              "./src/player/gm/player_gm_comp.cpp",
              "procSeaLampV3Activity",
              23212);
            v20 = common::milog::MiLogStream::operator<<<char [15],(char *[15])0>(
                    &v42,
                    (const char (*)[15])"invalid param:");
            v21 = std::vector<std::string>::operator[](param_vec, 2uLL);
            common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v20, v21);
            common::milog::MiLogStream::~MiLogStream(&v42);
            restarted = -1;
          }
          else
          {
            *(_DWORD *)(v3 + 48) = 0;
            v22 = std::vector<std::string>::operator[](param_vec, 3uLL);
            if ( common::tools::StringUtils::strToNum<unsigned int>(v22, (unsigned int *)(v3 + 48), 1) )
            {
              common::milog::MiLogStream::create(
                &v42,
                &common::milog::MiLogDefault::default_log_obj_,
                3u,
                "./src/player/gm/player_gm_comp.cpp",
                "procSeaLampV3Activity",
                23218);
              v23 = common::milog::MiLogStream::operator<<<char [15],(char *[15])0>(
                      &v42,
                      (const char (*)[15])"invalid param:");
              v24 = std::vector<std::string>::operator[](param_vec, 3uLL);
              common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v23, v24);
              common::milog::MiLogStream::~MiLogStream(&v42);
              restarted = -1;
            }
            else
            {
              v25 = std::__shared_ptr_access<SeaLampV3Activity,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<SeaLampV3Activity,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 64));
              restarted = SeaLampV3Activity::setRaceLevelScoreByGm(v25, *(_DWORD *)(v3 + 32), *(_DWORD *)(v3 + 48));
            }
          }
        }
        else
        {
          common::milog::MiLogStream::create(
            &v42,
            &common::milog::MiLogDefault::default_log_obj_,
            3u,
            "./src/player/gm/player_gm_comp.cpp",
            "procSeaLampV3Activity",
            23206);
          common::milog::MiLogStream::operator<<<char [17],(char *[17])0>(&v42, "param not enough");
          common::milog::MiLogStream::~MiLogStream(&v42);
          restarted = -1;
        }
        goto LABEL_52;
      }
    }
    else
    {
      v26 = std::vector<std::string>::operator[](param_vec, 0LL);
      if ( std::operator==<char>(v26, "SHADOW") )
      {
        if ( std::vector<std::string>::size(param_vec) <= 1 )
        {
          common::milog::MiLogStream::create(
            &v42,
            &common::milog::MiLogDefault::default_log_obj_,
            3u,
            "./src/player/gm/player_gm_comp.cpp",
            "procSeaLampV3Activity",
            23228);
          common::milog::MiLogStream::operator<<<char [17],(char *[17])0>(&v42, "param not enough");
          common::milog::MiLogStream::~MiLogStream(&v42);
          restarted = -1;
          goto LABEL_52;
        }
        v27 = std::vector<std::string>::operator[](param_vec, 1uLL);
        if ( std::operator==<char>(v27, "OPEN_STAGE") )
        {
          if ( std::vector<std::string>::size(param_vec) > 2 )
          {
            *(_DWORD *)(v3 + 48) = 0;
            v28 = std::vector<std::string>::operator[](param_vec, 2uLL);
            if ( common::tools::StringUtils::strToNum<unsigned int>(v28, (unsigned int *)(v3 + 48), 1) )
            {
              common::milog::MiLogStream::create(
                &v42,
                &common::milog::MiLogDefault::default_log_obj_,
                3u,
                "./src/player/gm/player_gm_comp.cpp",
                "procSeaLampV3Activity",
                23241);
              v29 = common::milog::MiLogStream::operator<<<char [15],(char *[15])0>(
                      &v42,
                      (const char (*)[15])"invalid param:");
              v30 = std::vector<std::string>::operator[](param_vec, 2uLL);
              common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v29, v30);
              common::milog::MiLogStream::~MiLogStream(&v42);
              restarted = -1;
            }
            else
            {
              v31 = std::__shared_ptr_access<SeaLampV3Activity,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<SeaLampV3Activity,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 64));
              restarted = SeaLampV3Activity::openShadowStage(v31, *(_DWORD *)(v3 + 48));
            }
          }
          else
          {
            common::milog::MiLogStream::create(
              &v42,
              &common::milog::MiLogDefault::default_log_obj_,
              3u,
              "./src/player/gm/player_gm_comp.cpp",
              "procSeaLampV3Activity",
              23235);
            common::milog::MiLogStream::operator<<<char [17],(char *[17])0>(&v42, "param not enough");
            common::milog::MiLogStream::~MiLogStream(&v42);
            restarted = -1;
          }
          goto LABEL_52;
        }
        v32 = std::vector<std::string>::operator[](param_vec, 1uLL);
        if ( std::operator==<char>(v32, "FINISH_LEVEL") )
        {
          if ( std::vector<std::string>::size(param_vec) > 2 )
          {
            *(_DWORD *)(v3 + 32) = 0;
            v33 = std::vector<std::string>::operator[](param_vec, 2uLL);
            if ( common::tools::StringUtils::strToNum<unsigned int>(v33, (unsigned int *)(v3 + 32), 1) )
            {
              common::milog::MiLogStream::create(
                &v42,
                &common::milog::MiLogDefault::default_log_obj_,
                3u,
                "./src/player/gm/player_gm_comp.cpp",
                "procSeaLampV3Activity",
                23256);
              v34 = common::milog::MiLogStream::operator<<<char [15],(char *[15])0>(
                      &v42,
                      (const char (*)[15])"invalid param:");
              v35 = std::vector<std::string>::operator[](param_vec, 2uLL);
              common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v34, v35);
              common::milog::MiLogStream::~MiLogStream(&v42);
              restarted = -1;
            }
            else
            {
              *(_DWORD *)(v3 + 48) = 1;
              if ( std::vector<std::string>::size(param_vec) > 3
                && (v36 = std::vector<std::string>::operator[](param_vec, 3uLL),
                    common::tools::StringUtils::strToNum<unsigned int>(v36, (unsigned int *)(v3 + 48), 1)) )
              {
                common::milog::MiLogStream::create(
                  &v42,
                  &common::milog::MiLogDefault::default_log_obj_,
                  3u,
                  "./src/player/gm/player_gm_comp.cpp",
                  "procSeaLampV3Activity",
                  23264);
                v37 = common::milog::MiLogStream::operator<<<char [15],(char *[15])0>(
                        &v42,
                        (const char (*)[15])"invalid param:");
                v38 = std::vector<std::string>::operator[](param_vec, 3uLL);
                common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v37, v38);
                common::milog::MiLogStream::~MiLogStream(&v42);
                restarted = -1;
              }
              else
              {
                v39 = std::__shared_ptr_access<SeaLampV3Activity,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<SeaLampV3Activity,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 64));
                restarted = SeaLampV3Activity::finishShadowLevel(v39, *(_DWORD *)(v3 + 32), *(_DWORD *)(v3 + 48));
              }
            }
          }
          else
          {
            common::milog::MiLogStream::create(
              &v42,
              &common::milog::MiLogDefault::default_log_obj_,
              3u,
              "./src/player/gm/player_gm_comp.cpp",
              "procSeaLampV3Activity",
              23250);
            common::milog::MiLogStream::operator<<<char [17],(char *[17])0>(&v42, "param not enough");
            common::milog::MiLogStream::~MiLogStream(&v42);
            restarted = -1;
          }
          goto LABEL_52;
        }
      }
    }
    restarted = 0;
    goto LABEL_52;
  }
  std::string::operator=(ret_msg, "activity not open");
  restarted = -1;
LABEL_52:
  std::shared_ptr<SeaLampV3Activity>::~shared_ptr((std::shared_ptr<SeaLampV3Activity> *const)(v3 + 64));
LABEL_53:
  result = restarted;
  if ( v43 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8008) = 0;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8008) = -168430091;
  }
  return result;
};

// Line 23275: range 0000000017D7FCFA-0000000017D7FD9C
void __cdecl procIpRegionClosedRegister::procIpRegionClosedRegister(procIpRegionClosedRegister *const this)
{
  std::function<int(GmContext&,const std::vector<std::string>&,std::string&)> *v1; // rax
  std::allocator<char> __a; // [rsp+1Fh] [rbp-31h] BYREF
  std::string __k; // [rsp+20h] [rbp-30h] BYREF

  std::allocator<char>::allocator(&__a);
  std::string::basic_string<std::allocator<char>>(&__k, "TEST_IP_REGION", &__a);
  v1 = std::unordered_map<std::string,std::function<int ()(GmContext &,std::vector<std::string> const&,std::string&)>>::operator[](
         &GmUtils::op_func_map[abi:cxx11],
         &__k);
  std::function<int ()(GmContext &,std::vector<std::string> const&,std::string&)>::operator=<int (&)(GmContext &,std::vector<std::string> const&,std::string&)>(
    v1,
    (int (*)(GmContext *, const std::vector<std::string> *, std::string *))procIpRegionClosed);
  std::string::~string(&__k);
  std::allocator<char>::~allocator(&__a);
};

// Line 23276: range 0000000017C6DADB-0000000017C6DE6E
int32_t __cdecl procIpRegionClosed(GmContext *context, const std::vector<std::string> *param_vec, std::string *ret_msg)
{
  unsigned __int64 v3; // rbx
  __int64 v4; // rax
  unsigned __int64 v5; // r13
  int32_t result; // eax
  const std::string *v7; // rax
  std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v8; // rax
  bool isIpRegionClosed; // r12
  std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v10; // rax
  bool v11; // r14
  const std::string *v12; // rax
  PlayerBasicComp *BasicComp; // rax
  std::shared_ptr<Config> v15; // [rsp+20h] [rbp-A0h] BYREF
  char v16[144]; // [rsp+30h] [rbp-90h] BYREF

  v3 = (unsigned __int64)v16;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_1(96LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "1 32 32 14 ip_proto:23300";
  *(_QWORD *)(v3 + 16) = procIpRegionClosed;
  v5 = v3 >> 3;
  *(_DWORD *)(v5 + 2147450880) = -235802127;
  *(_DWORD *)(v5 + 2147450888) = -202116109;
  if ( std::vector<std::string>::empty(param_vec) )
  {
    common::milog::MiLogStream::create(
      (common::milog::MiLogStream *)(v3 + 32),
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/player/gm/player_gm_comp.cpp",
      "procIpRegionClosed",
      23279);
    common::milog::MiLogStream::operator<<<char [17],(char *[17])0>(
      (common::milog::MiLogStream *const)(v3 + 32),
      "param not enough");
    common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v3 + 32));
    result = -1;
    goto LABEL_16;
  }
  v7 = std::vector<std::string>::operator[](param_vec, 0LL);
  if ( std::operator==<char>(v7, "IS_CLOSED") )
  {
    ServiceBox::findService<GameserverService>();
    GameserverService::getConfig((GameserverService *const)&v15);
    v8 = std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false> *const)&v15);
    isIpRegionClosed = FeatureSwitchMgr::isIpRegionClosed(&v8->feature_switch_mgr);
    std::shared_ptr<Config>::~shared_ptr(&v15);
    if ( isIpRegionClosed )
      std::string::operator=(ret_msg, "ip region is closed!");
    else
      std::string::operator=(ret_msg, "ip region is open!");
  }
  else
  {
    ServiceBox::findService<GameserverService>();
    GameserverService::getConfig((GameserverService *const)&v15);
    v10 = std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false> *const)&v15);
    v11 = FeatureSwitchMgr::isIpRegionClosed(&v10->feature_switch_mgr);
    std::shared_ptr<Config>::~shared_ptr(&v15);
    if ( v11 )
    {
      std::string::operator=(ret_msg, "ip region is closed!");
      result = 0;
      goto LABEL_16;
    }
    proto::QueryIpRegionData::QueryIpRegionData((proto::QueryIpRegionData *const)(v3 + 32));
    v12 = std::vector<std::string>::operator[](param_vec, 0LL);
    proto::QueryIpRegionData::set_ip((proto::QueryIpRegionData *const)(v3 + 32), v12);
    if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
      __asan_report_load8();
    BasicComp = Player::getBasicComp(context->player);
    PlayerBasicComp::asyncQueryIpRegionRequst(BasicComp, (const proto::QueryIpRegionData *)(v3 + 32));
    std::string::operator=(ret_msg, "start query ip region.");
    proto::QueryIpRegionData::~QueryIpRegionData((proto::QueryIpRegionData *const)(v3 + 32));
  }
  result = 0;
LABEL_16:
  if ( v16 == (char *)v3 )
  {
    *(_DWORD *)((v3 >> 3) + 0x7FFF8000) = 0;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8008) = 0;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8008) = -168430091;
  }
  return result;
};

// Line 23310: range 0000000017D7FD9E-0000000017D7FE40
void __cdecl procTeamChainActivityRegister::procTeamChainActivityRegister(procTeamChainActivityRegister *const this)
{
  std::function<int(GmContext&,const std::vector<std::string>&,std::string&)> *v1; // rax
  std::allocator<char> __a; // [rsp+1Fh] [rbp-31h] BYREF
  std::string __k; // [rsp+20h] [rbp-30h] BYREF

  std::allocator<char>::allocator(&__a);
  std::string::basic_string<std::allocator<char>>(&__k, "TEAMCHAIN", &__a);
  v1 = std::unordered_map<std::string,std::function<int ()(GmContext &,std::vector<std::string> const&,std::string&)>>::operator[](
         &GmUtils::op_func_map[abi:cxx11],
         &__k);
  std::function<int ()(GmContext &,std::vector<std::string> const&,std::string&)>::operator=<int (&)(GmContext &,std::vector<std::string> const&,std::string&)>(
    v1,
    (int (*)(GmContext *, const std::vector<std::string> *, std::string *))procTeamChainActivity);
  std::string::~string(&__k);
  std::allocator<char>::~allocator(&__a);
};

// Line 23311: range 0000000017C6DE6F-0000000017C6E436
int32_t __cdecl procTeamChainActivity(
        GmContext *context,
        const std::vector<std::string> *param_vec,
        std::string *ret_msg)
{
  unsigned __int64 v3; // r12
  __int64 v4; // rax
  _DWORD *v5; // r13
  int32_t v6; // r14d
  const std::string *v7; // rax
  const std::string *v8; // rax
  TeamChainActivity *v9; // rax
  const std::string *v10; // rax
  const std::string *v11; // rax
  TeamChainActivity *v12; // rax
  const std::string *v13; // rax
  const std::string *v14; // rax
  TeamChainActivity *v15; // rax
  int32_t result; // eax
  common::milog::MiLogStream v18; // [rsp+20h] [rbp-B0h] BYREF
  char v19[144]; // [rsp+40h] [rbp-90h] BYREF

  v3 = (unsigned __int64)v19;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_1(96LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "3 32 4 14 stage_id:23317 48 4 16 difficulty:23356 64 16 18 activity_ptr:23323";
  *(_QWORD *)(v3 + 16) = procTeamChainActivity;
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = -234556924;
  v5[536862722] = -202178560;
  if ( std::vector<std::string>::size(param_vec) > 1 )
  {
    *(_DWORD *)(v3 + 32) = 0;
    v7 = std::vector<std::string>::operator[](param_vec, 1uLL);
    if ( common::tools::StringUtils::strToNum<unsigned int>(v7, (unsigned int *)(v3 + 32), 1) )
    {
      std::string::operator=(ret_msg, "stage_id strToNum failed.");
      v6 = -1;
    }
    else
    {
      if ( *(_BYTE *)(((unsigned __int64)&context->player >> 3) + 0x7FFF8000) )
        __asan_report_load8();
      Player::getActivityComp(context->player);
      PlayerActivityComp::findOpenningActivity<TeamChainActivity>((PlayerActivityComp *const)(v3 + 64));
      if ( std::operator==<TeamChainActivity>(0LL, (const std::shared_ptr<TeamChainActivity> *)(v3 + 64)) )
      {
        std::string::operator=(ret_msg, "activity is not in schedule");
        v6 = -1;
      }
      else
      {
        v8 = std::vector<std::string>::operator[](param_vec, 0LL);
        if ( std::operator==<char>(v8, "OPEN") )
        {
          v9 = std::__shared_ptr_access<TeamChainActivity,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<TeamChainActivity,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 64));
          v6 = TeamChainActivity::openStageLevelByGm(v9, *(_DWORD *)(v3 + 32));
        }
        else
        {
          v10 = std::vector<std::string>::operator[](param_vec, 0LL);
          if ( std::operator==<char>(v10, off_26352320) )
          {
            if ( std::vector<std::string>::size(param_vec) > 2 )
            {
              *(_DWORD *)(v3 + 48) = 0;
              v11 = std::vector<std::string>::operator[](param_vec, 2uLL);
              if ( common::tools::StringUtils::strToNum<unsigned int>(v11, (unsigned int *)(v3 + 48), 1) )
              {
                std::string::operator=(ret_msg, "score strToNum failed.");
                v6 = -1;
              }
              else
              {
                v12 = std::__shared_ptr_access<TeamChainActivity,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<TeamChainActivity,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 64));
                v6 = TeamChainActivity::setRandomStageLevelDataByGm(v12, *(_DWORD *)(v3 + 32), *(_DWORD *)(v3 + 48));
              }
            }
            else
            {
              common::milog::MiLogStream::create(
                &v18,
                &common::milog::MiLogDefault::default_log_obj_,
                3u,
                "./src/player/gm/player_gm_comp.cpp",
                "procTeamChainActivity",
                23338);
              common::milog::MiLogStream::operator<<<char [17],(char *[17])0>(&v18, "param not enough");
              common::milog::MiLogStream::~MiLogStream(&v18);
              v6 = -1;
            }
          }
          else
          {
            v13 = std::vector<std::string>::operator[](param_vec, 0LL);
            if ( std::operator==<char>(v13, "ENTER") )
            {
              if ( std::vector<std::string>::size(param_vec) > 2 )
              {
                *(_DWORD *)(v3 + 48) = 0;
                v14 = std::vector<std::string>::operator[](param_vec, 2uLL);
                if ( common::tools::StringUtils::strToNum<unsigned int>(v14, (unsigned int *)(v3 + 48), 1) )
                {
                  std::string::operator=(ret_msg, "difficulty strToNum failed.");
                  v6 = -1;
                }
                else
                {
                  v15 = std::__shared_ptr_access<TeamChainActivity,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<TeamChainActivity,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 64));
                  v6 = TeamChainActivity::enterDungeonByGm(v15, *(_DWORD *)(v3 + 32), *(_DWORD *)(v3 + 48));
                }
              }
              else
              {
                common::milog::MiLogStream::create(
                  &v18,
                  &common::milog::MiLogDefault::default_log_obj_,
                  3u,
                  "./src/player/gm/player_gm_comp.cpp",
                  "procTeamChainActivity",
                  23353);
                common::milog::MiLogStream::operator<<<char [17],(char *[17])0>(&v18, "param not enough");
                common::milog::MiLogStream::~MiLogStream(&v18);
                v6 = -1;
              }
            }
            else
            {
              common::milog::MiLogStream::create(
                &v18,
                &common::milog::MiLogDefault::default_log_obj_,
                3u,
                "./src/player/gm/player_gm_comp.cpp",
                "procTeamChainActivity",
                23366);
              common::milog::MiLogStream::operator<<<char [11],(char *[11])0>(&v18, (const char (*)[11])"unknown gm");
              common::milog::MiLogStream::~MiLogStream(&v18);
              v6 = -1;
            }
          }
        }
      }
      std::shared_ptr<TeamChainActivity>::~shared_ptr((std::shared_ptr<TeamChainActivity> *const)(v3 + 64));
    }
  }
  else
  {
    common::milog::MiLogStream::create(
      &v18,
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/player/gm/player_gm_comp.cpp",
      "procTeamChainActivity",
      23314);
    common::milog::MiLogStream::operator<<<char [17],(char *[17])0>(&v18, "param not enough");
    common::milog::MiLogStream::~MiLogStream(&v18);
    v6 = -1;
  }
  result = v6;
  if ( v19 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8008) = 0;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8008) = -168430091;
  }
  return result;
};
