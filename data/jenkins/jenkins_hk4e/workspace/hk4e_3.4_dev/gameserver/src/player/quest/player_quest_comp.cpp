// File: /data/jenkins/jenkins_hk4e/workspace/hk4e_3.4_dev/gameserver/src/player/quest/player_quest_comp.cpp

// Line 54: range 0000000013DC9A0D-0000000013DC9A2E
bool __cdecl isQuestContentProcessedByClient(data::QuestContentType content_type)
{
  return content_type == QUEST_CONTENT_FINISH_PLOT || content_type == QUEST_CONTENT_NOT_FINISH_PLOT;
};

// Line 66: range 0000000013DC9A30-0000000013DC9B2C
void __cdecl Chapter::fromBin(Chapter *const this, const proto::ChapterBin *chapter_bin)
{
  __int64 v2; // rcx
  char v3; // dl
  __int64 v4; // rdx
  google::protobuf::uint32 v5; // edi
  char v6; // dl
  __int64 v7; // rcx
  __int64 v8; // rsi
  __int64 v9; // rdx
  _BOOL4 v10; // eax
  bool v11; // cl
  char v12; // dl
  __int64 v13; // rdx
  const proto::ChapterBin *chapter_bina; // [rsp+0h] [rbp-10h]

  chapter_bina = chapter_bin;
  v2 = proto::ChapterBin::chapter_id(chapter_bin);
  v3 = *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000);
  LOBYTE(chapter_bin) = v3 != 0;
  v4 = (v3 != 0) & (unsigned __int8)((char)(((unsigned __int8)this & 7) + 3) >= v3);
  if ( (_BYTE)v4 )
    __asan_report_store4(this, chapter_bin, v4, v2);
  this->chapter_id_ = v2;
  v5 = proto::ChapterBin::chapter_state(chapter_bina);
  v6 = *(_BYTE *)(((unsigned __int64)&this->chapter_state_ >> 3) + 0x7FFF8000);
  LOBYTE(v7) = v6 != 0;
  v8 = (((_BYTE)this + 4) & 7u) + 3;
  v9 = (v6 != 0) & (unsigned __int8)((char)((((_BYTE)this + 4) & 7) + 3) >= v6);
  if ( (_BYTE)v9 )
  {
    v5 = (_DWORD)this + 4;
    __asan_report_store4(&this->chapter_state_, v8, v9, v7);
  }
  this->chapter_state_ = v5;
  LOBYTE(v10) = proto::ChapterBin::is_notify_sent(chapter_bina);
  v11 = v10;
  v12 = *(_BYTE *)(((unsigned __int64)&this->is_notify_sent_ >> 3) + 0x7FFF8000);
  LOBYTE(v8) = v12 != 0;
  v13 = (v12 != 0) & (unsigned __int8)((((unsigned __int8)this + 8) & 7) >= v12);
  if ( (_BYTE)v13 )
    __asan_report_store1(&this->is_notify_sent_, v8, v13, v10);
  this->is_notify_sent_ = v11;
};

// Line 73: range 0000000013DC9B2E-0000000013DC9C2E
void __cdecl Chapter::toBin(const Chapter *const this, proto::ChapterBin *chapter_bin)
{
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) != 0
    && (char)(((unsigned __int8)this & 7) + 3) >= *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
  {
    __asan_report_load4(this);
  }
  proto::ChapterBin::set_chapter_id(chapter_bin, this->chapter_id_);
  if ( *(_BYTE *)(((unsigned __int64)&this->chapter_state_ >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)this + 4) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&this->chapter_state_ >> 3) + 0x7FFF8000) )
  {
    __asan_report_load4(&this->chapter_state_);
  }
  proto::ChapterBin::set_chapter_state(chapter_bin, this->chapter_state_);
  if ( *(_BYTE *)(((unsigned __int64)&this->is_notify_sent_ >> 3) + 0x7FFF8000) != 0
    && (((unsigned __int8)this + 8) & 7) >= *(_BYTE *)(((unsigned __int64)&this->is_notify_sent_ >> 3) + 0x7FFF8000) )
  {
    __asan_report_load1(&this->is_notify_sent_);
  }
  proto::ChapterBin::set_is_notify_sent(chapter_bin, this->is_notify_sent_);
};

// Line 80: range 0000000013DC9C30-0000000013DCA3EA
int32_t __cdecl Chapter::notifyChapter(Chapter *const this, Player *player)
{
  unsigned __int64 v2; // r12
  __int64 v3; // rax
  unsigned __int64 v4; // r13
  common::milog::MiLogStream *v5; // rbx
  int32_t v6; // r14d
  QuestExcelConfigMgr *p_quest_config_mgr; // r14
  uint32_t ChapterId; // eax
  common::milog::MiLogStream *v9; // rbx
  common::milog::MiLogStream *v10; // rax
  common::milog::MiLogStream *v11; // rdx
  std::__shared_ptr_access<proto::ChapterStateNotify,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v12; // r14
  uint32_t v13; // eax
  std::__shared_ptr_access<proto::ChapterStateNotify,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v14; // r14
  proto::ChapterState ChapterState; // eax
  PlayerQuestComp *QuestComp; // rcx
  uint32_t in_activity_need_player_level; // r14d
  PlayerBasicComp *BasicComp; // rax
  std::__shared_ptr_access<proto::ChapterStateNotify,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v19; // rax
  proto::ChapterStateNotify_NeedPlayerLevel *v20; // rax
  std::__shared_ptr_access<proto::ChapterStateNotify,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v21; // rax
  proto::ChapterStateNotify_NeedPlayerLevel *v22; // rcx
  uint32_t need_player_level; // r14d
  PlayerBasicComp *v24; // rax
  std::__shared_ptr_access<proto::ChapterStateNotify,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v25; // rax
  proto::ChapterStateNotify_NeedPlayerLevel *v26; // rax
  std::__shared_ptr_access<proto::ChapterStateNotify,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v27; // rax
  proto::ChapterStateNotify_NeedPlayerLevel *v28; // rcx
  time_t Now; // rcx
  std::__shared_ptr_access<proto::ChapterStateNotify,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v30; // rax
  proto::ChapterStateNotify_NeedBeginTime *v31; // rax
  std::__shared_ptr_access<proto::ChapterStateNotify,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v32; // rax
  proto::ChapterStateNotify_NeedBeginTime *v33; // rcx
  int32_t result; // eax
  unsigned int val; // [rsp+10h] [rbp-B0h] BYREF
  int32_t ret; // [rsp+14h] [rbp-ACh]
  const data::ChapterExcelConfig *chapter_config_ptr; // [rsp+18h] [rbp-A8h]
  std::shared_ptr<const google::protobuf::Message> v38; // [rsp+20h] [rbp-A0h] BYREF
  common::milog::MiLogStream v39; // [rsp+30h] [rbp-90h] BYREF
  char v40[112]; // [rsp+50h] [rbp-70h] BYREF

  v2 = (unsigned __int64)v40;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_0(64LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "1 32 16 14 notify_ptr:102";
  *(_QWORD *)(v2 + 16) = Chapter::notifyChapter;
  v4 = v2 >> 3;
  *(_DWORD *)(v4 + 2147450880) = -235802127;
  *(_DWORD *)(v4 + 2147450884) = -202178560;
  if ( Chapter::getIsNotifySent(this) )
  {
    common::milog::MiLogStream::create(
      &v39,
      &common::milog::MiLogDefault::default_log_obj_,
      1u,
      "./src/player/quest/player_quest_comp.cpp",
      "notifyChapter",
      85);
    v5 = common::milog::MiLogStream::operator<<<char [53],(char *[53])0>(
           &v39,
           (const char (*)[53])"[CHAPTER NOTIFY] chapter notify is sent. chapter_id:");
    val = Chapter::getChapterId(this);
    common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v5, &val);
    common::milog::MiLogStream::~MiLogStream(&v39);
    v6 = 0;
  }
  else
  {
    ServiceBox::findService<GameserverService>();
    GameserverService::getConfig((GameserverService *const)&v38);
    p_quest_config_mgr = &std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false> *const)&v38)->design_config.txt_config_mgr.quest_config_mgr;
    ChapterId = Chapter::getChapterId(this);
    chapter_config_ptr = data::QuestExcelConfigMgrBase::findChapterExcelConfig(p_quest_config_mgr, ChapterId);
    std::shared_ptr<Config>::~shared_ptr((std::shared_ptr<Config> *const)&v38);
    if ( chapter_config_ptr )
    {
      if ( *(_BYTE *)(((unsigned __int64)&chapter_config_ptr->chapter_show_type >> 3) + 0x7FFF8000) != 0
        && (char)((((_BYTE)chapter_config_ptr + 60) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&chapter_config_ptr->chapter_show_type >> 3)
                                                                          + 0x7FFF8000) )
      {
        __asan_report_load4(&chapter_config_ptr->chapter_show_type);
      }
      if ( chapter_config_ptr->chapter_show_type == QUEST_HIDDEN )
      {
        Chapter::setIsNotifySent(this, 1);
        v6 = 0;
      }
      else
      {
        common::tools::perf::make_shared<proto::ChapterStateNotify>();
        v12 = std::__shared_ptr_access<proto::ChapterStateNotify,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<proto::ChapterStateNotify,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 32));
        v13 = Chapter::getChapterId(this);
        proto::ChapterStateNotify::set_chapter_id(v12, v13);
        v14 = std::__shared_ptr_access<proto::ChapterStateNotify,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<proto::ChapterStateNotify,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 32));
        ChapterState = Chapter::getChapterState(this);
        proto::ChapterStateNotify::set_chapter_state(v14, ChapterState);
        if ( Chapter::getChapterState(this) == CHAPTER_STATE_UNABLE_TO_BEGIN )
        {
          QuestComp = Player::getQuestComp(player);
          if ( *(_BYTE *)(((unsigned __int64)&chapter_config_ptr->id >> 3) + 0x7FFF8000) != 0
            && *(_BYTE *)(((unsigned __int64)&chapter_config_ptr->id >> 3) + 0x7FFF8000) <= 3 )
          {
            __asan_report_load4(&chapter_config_ptr->id);
          }
          if ( PlayerQuestComp::isChapterPreOpen(QuestComp, chapter_config_ptr->id) )
          {
            if ( *(_BYTE *)(((unsigned __int64)&chapter_config_ptr->in_activity_need_player_level >> 3) + 0x7FFF8000) != 0
              && (char)((((_BYTE)chapter_config_ptr + 68) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&chapter_config_ptr->in_activity_need_player_level >> 3)
                                                                                + 0x7FFF8000) )
            {
              __asan_report_load4(&chapter_config_ptr->in_activity_need_player_level);
            }
            in_activity_need_player_level = chapter_config_ptr->in_activity_need_player_level;
            BasicComp = Player::getBasicComp(player);
            if ( in_activity_need_player_level > PlayerBasicComp::getLevel(BasicComp) )
            {
              v19 = std::__shared_ptr_access<proto::ChapterStateNotify,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<proto::ChapterStateNotify,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 32));
              v20 = proto::ChapterStateNotify::mutable_need_player_level(v19);
              proto::ChapterStateNotify_NeedPlayerLevel::set_is_limit(v20, 1);
              v21 = std::__shared_ptr_access<proto::ChapterStateNotify,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<proto::ChapterStateNotify,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 32));
              v22 = proto::ChapterStateNotify::mutable_need_player_level(v21);
              if ( *(_BYTE *)(((unsigned __int64)&chapter_config_ptr->in_activity_need_player_level >> 3) + 0x7FFF8000) != 0
                && (char)((((_BYTE)chapter_config_ptr + 68) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&chapter_config_ptr->in_activity_need_player_level >> 3)
                                                                                  + 0x7FFF8000) )
              {
                __asan_report_load4(&chapter_config_ptr->in_activity_need_player_level);
              }
              proto::ChapterStateNotify_NeedPlayerLevel::set_config_need_player_level(
                v22,
                chapter_config_ptr->in_activity_need_player_level);
            }
          }
          else
          {
            if ( *(_BYTE *)(((unsigned __int64)&chapter_config_ptr->need_player_level >> 3) + 0x7FFF8000) != 0
              && (char)((((_BYTE)chapter_config_ptr + 20) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&chapter_config_ptr->need_player_level >> 3)
                                                                                + 0x7FFF8000) )
            {
              __asan_report_load4(&chapter_config_ptr->need_player_level);
            }
            need_player_level = chapter_config_ptr->need_player_level;
            v24 = Player::getBasicComp(player);
            if ( need_player_level > PlayerBasicComp::getLevel(v24) )
            {
              v25 = std::__shared_ptr_access<proto::ChapterStateNotify,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<proto::ChapterStateNotify,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 32));
              v26 = proto::ChapterStateNotify::mutable_need_player_level(v25);
              proto::ChapterStateNotify_NeedPlayerLevel::set_is_limit(v26, 1);
              v27 = std::__shared_ptr_access<proto::ChapterStateNotify,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<proto::ChapterStateNotify,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 32));
              v28 = proto::ChapterStateNotify::mutable_need_player_level(v27);
              if ( *(_BYTE *)(((unsigned __int64)&chapter_config_ptr->need_player_level >> 3) + 0x7FFF8000) != 0
                && (char)((((_BYTE)chapter_config_ptr + 20) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&chapter_config_ptr->need_player_level >> 3)
                                                                                  + 0x7FFF8000) )
              {
                __asan_report_load4(&chapter_config_ptr->need_player_level);
              }
              proto::ChapterStateNotify_NeedPlayerLevel::set_config_need_player_level(
                v28,
                chapter_config_ptr->need_player_level);
            }
          }
          Now = common::tools::TimeUtils::getNow();
          if ( *(_BYTE *)(((unsigned __int64)&chapter_config_ptr->need_begin_time >> 3) + 0x7FFF8000) != 0
            && *(_BYTE *)(((unsigned __int64)&chapter_config_ptr->need_begin_time >> 3) + 0x7FFF8000) <= 3 )
          {
            __asan_report_load4(&chapter_config_ptr->need_begin_time);
          }
          if ( Now < chapter_config_ptr->need_begin_time )
          {
            v30 = std::__shared_ptr_access<proto::ChapterStateNotify,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<proto::ChapterStateNotify,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 32));
            v31 = proto::ChapterStateNotify::mutable_need_begin_time(v30);
            proto::ChapterStateNotify_NeedBeginTime::set_is_limit(v31, 1);
            v32 = std::__shared_ptr_access<proto::ChapterStateNotify,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<proto::ChapterStateNotify,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 32));
            v33 = proto::ChapterStateNotify::mutable_need_begin_time(v32);
            if ( *(_BYTE *)(((unsigned __int64)&chapter_config_ptr->need_begin_time >> 3) + 0x7FFF8000) != 0
              && *(_BYTE *)(((unsigned __int64)&chapter_config_ptr->need_begin_time >> 3) + 0x7FFF8000) <= 3 )
            {
              __asan_report_load4(&chapter_config_ptr->need_begin_time);
            }
            proto::ChapterStateNotify_NeedBeginTime::set_config_need_begin_time(
              v33,
              chapter_config_ptr->need_begin_time);
          }
        }
        std::dynamic_pointer_cast<google::protobuf::Message const,proto::ChapterStateNotify>((const std::shared_ptr<proto::ChapterStateNotify> *)&v38);
        ret = Player::sendMessage(player, &v38, 0LL);
        std::shared_ptr<google::protobuf::Message const>::~shared_ptr(&v38);
        if ( !ret )
          Chapter::setIsNotifySent(this, 1);
        v6 = ret;
        std::shared_ptr<proto::ChapterStateNotify>::~shared_ptr((std::shared_ptr<proto::ChapterStateNotify> *const)(v2 + 32));
      }
    }
    else
    {
      common::milog::MiLogStream::create(
        &v39,
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/player/quest/player_quest_comp.cpp",
        "notifyChapter",
        92);
      v9 = common::milog::MiLogStream::operator<<<char [39],(char *[39])0>(
             &v39,
             (const char (*)[39])"chapter config not exist, chapter_id: ");
      val = Chapter::getChapterId(this);
      v10 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v9, &val);
      v11 = common::milog::MiLogStream::operator<<<char [8],(char *[8])0>(v10, (const char (*)[8])"player:");
      operator<<(v11, player);
      common::milog::MiLogStream::~MiLogStream(&v39);
      v6 = -1;
    }
  }
  result = v6;
  if ( v40 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 135: range 0000000013DCA3EC-0000000013DCA6F9
int32_t __cdecl SceneRange::getPosFromConfig(SceneRange *const this)
{
  LuaConfigMgr *p_lua_config_mgr; // rcx
  common::milog::MiLogStream *v2; // rdx
  common::milog::MiLogStream *v4; // rax
  const SceneScriptConfig *scene_script_config_ptr; // [rsp+10h] [rbp-50h]
  const DummyPointScriptConfig *point_config_ptr; // [rsp+18h] [rbp-48h]
  std::shared_ptr<Config> v7; // [rsp+20h] [rbp-40h] BYREF
  common::milog::MiLogStream v8; // [rsp+30h] [rbp-30h] BYREF

  ServiceBox::findService<GameserverService>();
  GameserverService::getConfig((GameserverService *const)&v7);
  p_lua_config_mgr = &std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false> *const)&v7)->design_config.lua_config_mgr;
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4(this);
  }
  scene_script_config_ptr = LuaConfigMgr::findSceneScriptConfig(p_lua_config_mgr, this->scene_id_);
  std::shared_ptr<Config>::~shared_ptr(&v7);
  if ( scene_script_config_ptr )
  {
    std::string::basic_string(&v8, &this->dummy_point_);
    point_config_ptr = SceneScriptConfig::findDummyPointScriptConfig(scene_script_config_ptr, (std::string *)&v8);
    std::string::~string(&v8);
    if ( point_config_ptr )
    {
      if ( (((unsigned __int8)this + 44) & 7) >= *(_BYTE *)(((unsigned __int64)&this->dummy_point_pos_ >> 3) + 0x7FFF8000)
        && *(_BYTE *)(((unsigned __int64)&this->dummy_point_pos_ >> 3) + 0x7FFF8000) != 0
        || *(_BYTE *)((((unsigned __int64)&this->dummy_point_pos_.z + 3) >> 3) + 0x7FFF8000) != 0
        && (((unsigned __int8)this + 55) & 7) >= *(_BYTE *)((((unsigned __int64)&this->dummy_point_pos_.z + 3) >> 3)
                                                          + 0x7FFF8000) )
      {
        __asan_report_store_n(&this->dummy_point_pos_, 12LL);
      }
      if ( ((unsigned __int8)point_config_ptr & 7) >= *(_BYTE *)(((unsigned __int64)point_config_ptr >> 3) + 0x7FFF8000)
        && *(_BYTE *)(((unsigned __int64)point_config_ptr >> 3) + 0x7FFF8000) != 0
        || *(_BYTE *)((((unsigned __int64)&point_config_ptr->pos.z + 3) >> 3) + 0x7FFF8000) != 0
        && (((unsigned __int8)point_config_ptr + 11) & 7) >= *(_BYTE *)((((unsigned __int64)&point_config_ptr->pos.z + 3) >> 3)
                                                                      + 0x7FFF8000) )
      {
        __asan_report_load_n(point_config_ptr, 12LL);
      }
      this->dummy_point_pos_ = point_config_ptr->pos;
      return 0;
    }
    else
    {
      common::milog::MiLogStream::create(
        &v8,
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/player/quest/player_quest_comp.cpp",
        "getPosFromConfig",
        145);
      v4 = common::milog::MiLogStream::operator<<<char [35],(char *[35])0>(
             &v8,
             (const char (*)[35])"findDummyPointScriptConfig fails, ");
      common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v4, &this->dummy_point_);
      common::milog::MiLogStream::~MiLogStream(&v8);
      return -1;
    }
  }
  else
  {
    common::milog::MiLogStream::create(
      &v8,
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/player/quest/player_quest_comp.cpp",
      "getPosFromConfig",
      139);
    v2 = common::milog::MiLogStream::operator<<<char [39],(char *[39])0>(
           &v8,
           (const char (*)[39])"SceneScriptConfig not find, scene_id: ");
    common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v2, &this->scene_id_);
    common::milog::MiLogStream::~MiLogStream(&v8);
    return -1;
  }
};

// Line 153: range 0000000013DCA6FA-0000000013DCA7A7
bool __cdecl SceneRange::isNotIn(SceneRange *const this, Player *player)
{
  PlayerQuestComp *QuestComp; // rdi
  uint32_t radius; // edx

  QuestComp = Player::getQuestComp(player);
  if ( *(_BYTE *)(((unsigned __int64)&this->radius_ >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)this + 4) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&this->radius_ >> 3) + 0x7FFF8000) )
  {
    QuestComp = (PlayerQuestComp *)&this->radius_;
    __asan_report_load4(&this->radius_);
  }
  radius = this->radius_;
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) <= 3 )
  {
    QuestComp = (PlayerQuestComp *)this;
    __asan_report_load4(this);
  }
  return PlayerQuestComp::isNotInSceneRange(QuestComp, this->scene_id_, radius, &this->dummy_point_pos_);
};

// Line 158: range 0000000013DCA7A8-0000000013DCA82E
void __cdecl SceneRange::checkAndNotify(SceneRange *const this, Player *player)
{
  bool is_not_in_range; // [rsp+1Fh] [rbp-1h]

  is_not_in_range = SceneRange::isNotIn(this, player);
  if ( *(char *)(((unsigned __int64)&this->is_not_in_range_ >> 3) + 0x7FFF8000) < 0 )
    __asan_report_load1(&this->is_not_in_range_);
  if ( is_not_in_range != this->is_not_in_range_ )
  {
    this->is_not_in_range_ = is_not_in_range;
    SceneRange::notifyEvent(this, player);
  }
};

// Line 168: range 0000000013DCA830-0000000013DCA8A5
void __cdecl SceneRange::checkAndForceNotify(SceneRange *const this, Player *player)
{
  unsigned int v2; // eax
  __int64 v3; // rdx
  char v4; // al
  Player *playera; // [rsp+0h] [rbp-10h]

  playera = player;
  LOBYTE(v2) = SceneRange::isNotIn(this, player);
  v3 = v2;
  v4 = *(_BYTE *)(((unsigned __int64)&this->is_not_in_range_ >> 3) + 0x7FFF8000);
  if ( v4 < 0 )
  {
    LOBYTE(player) = v4 != 0;
    __asan_report_store1(&this->is_not_in_range_, player, v3, &this->is_not_in_range_);
  }
  this->is_not_in_range_ = v3;
  SceneRange::notifyEvent(this, playera);
};

// Line 174: range 0000000013DCA8A6-0000000013DCA95B
void __cdecl SceneRange::notifyEvent(SceneRange *const this, Player *player)
{
  PlayerEventComp *EventComp; // rbx
  unsigned int *v3; // r9
  std::shared_ptr<CrossSceneRangeEvent> __r; // [rsp+10h] [rbp-30h] BYREF
  std::shared_ptr<BaseEvent> p_event_ptr; // [rsp+20h] [rbp-20h] BYREF

  EventComp = Player::getEventComp(player);
  common::tools::perf::make_shared<CrossSceneRangeEvent,unsigned int &,unsigned int &,std::string &,bool &>(
    (unsigned int *)&__r,
    &this->scene_id_,
    (std::string *)&this->radius_,
    (bool *)&this->dummy_point_,
    (unsigned int *)&this->is_not_in_range_,
    v3,
    (std::string *)player,
    (bool *)this);
  std::shared_ptr<BaseEvent>::shared_ptr<CrossSceneRangeEvent,void>(&p_event_ptr, &__r);
  PlayerEventComp::notifyEvent(EventComp, &p_event_ptr);
  std::shared_ptr<BaseEvent>::~shared_ptr(&p_event_ptr);
  std::shared_ptr<CrossSceneRangeEvent>::~shared_ptr(&__r);
};

// Line 179: range 0000000013DCA95C-0000000013DCABFD
void __cdecl SceneRangeHelper::checkAllSceneRange(SceneRangeHelper *const this)
{
  std::map<unsigned int,std::vector<SceneRange>> *v1; // rbx
  __int64 v2; // rax
  _DWORD *v3; // r12
  std::map<unsigned int,std::vector<SceneRange>>::iterator __for_begin; // [rsp+10h] [rbp-F0h] BYREF
  std::map<unsigned int,std::vector<SceneRange>>::iterator __for_end; // [rsp+18h] [rbp-E8h] BYREF
  std::vector<SceneRange>::iterator __for_begin_0; // [rsp+20h] [rbp-E0h] BYREF
  std::vector<SceneRange>::iterator __for_end_0; // [rsp+28h] [rbp-D8h] BYREF
  std::map<unsigned int,std::vector<SceneRange>> *__for_range; // [rsp+30h] [rbp-D0h]
  std::pair<unsigned int const,std::vector<SceneRange> > *__in; // [rsp+38h] [rbp-C8h]
  std::tuple_element<0,std::pair<unsigned int const,std::vector<SceneRange> > >::type *_; // [rsp+40h] [rbp-C0h]
  std::tuple_element<1,std::pair<unsigned int const,std::vector<SceneRange> > >::type *scene_range_vec; // [rsp+48h] [rbp-B8h]
  std::vector<SceneRange> *__for_range_0; // [rsp+50h] [rbp-B0h]
  SceneRange *scene_range; // [rsp+58h] [rbp-A8h]
  char v14[160]; // [rsp+60h] [rbp-A0h] BYREF

  v1 = (std::map<unsigned int,std::vector<SceneRange>> *)v14;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_1(128LL);
    if ( v2 )
      v1 = (std::map<unsigned int,std::vector<SceneRange>> *)v2;
  }
  *(_QWORD *)v1->_M_t._M_impl.gap0 = 1102416563LL;
  *(_QWORD *)&v1->_M_t._M_impl._M_header._M_color = "1 48 48 19 scene_range_map:180";
  v1->_M_t._M_impl._M_header._M_parent = (std::_Rb_tree_node_base::_Base_ptr)SceneRangeHelper::checkAllSceneRange;
  v3 = (_DWORD *)((unsigned __int64)v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = 61937;
  v3[536862723] = -202116109;
  std::map<unsigned int,std::vector<SceneRange>>::map(v1 + 1, &this->scene_range_map_);
  __for_range = v1 + 1;
  __for_begin._M_node = std::map<unsigned int,std::vector<SceneRange>>::begin(v1 + 1)._M_node;
  __for_end._M_node = std::map<unsigned int,std::vector<SceneRange>>::end(v1 + 1)._M_node;
  while ( std::operator!=(&__for_begin, &__for_end) )
  {
    __in = std::_Rb_tree_iterator<std::pair<unsigned int const,std::vector<SceneRange>>>::operator*(&__for_begin);
    _ = std::get<0ul,unsigned int const,std::vector<SceneRange>>(__in);
    scene_range_vec = std::get<1ul,unsigned int const,std::vector<SceneRange>>(__in);
    __for_range_0 = scene_range_vec;
    __for_begin_0._M_current = std::vector<SceneRange>::begin(scene_range_vec)._M_current;
    __for_end_0._M_current = std::vector<SceneRange>::end(__for_range_0)._M_current;
    while ( __gnu_cxx::operator!=<SceneRange *,std::vector<SceneRange>>(&__for_begin_0, &__for_end_0) )
    {
      scene_range = __gnu_cxx::__normal_iterator<SceneRange *,std::vector<SceneRange>>::operator*(&__for_begin_0);
      if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
        __asan_report_load8(&this->player_);
      SceneRange::checkAndNotify(scene_range, this->player_);
      __gnu_cxx::__normal_iterator<SceneRange *,std::vector<SceneRange>>::operator++(&__for_begin_0);
    }
    std::_Rb_tree_iterator<std::pair<unsigned int const,std::vector<SceneRange>>>::operator++(&__for_begin);
  }
  std::map<unsigned int,std::vector<SceneRange>>::~map(v1 + 1);
  if ( v14 == (char *)v1 )
  {
    *(_QWORD *)(((unsigned __int64)v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_DWORD *)(((unsigned __int64)v1 >> 3) + 0x7FFF800C) = 0;
  }
  else
  {
    *(_QWORD *)v1->_M_t._M_impl.gap0 = 1172321806LL;
    *(_QWORD *)(((unsigned __int64)v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)(((unsigned __int64)v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
};

// Line 191: range 0000000013DCABFE-0000000013DCAED0
void __fastcall SceneRangeHelper::addQuestSceneRange(
        SceneRangeHelper *const this,
        uint32_t quest_id,
        uint32_t scene_id,
        uint32_t radius,
        std::string *p_dummy_point)
{
  unsigned __int64 v5; // rbx
  __int64 v6; // rax
  _DWORD *v7; // r12
  common::milog::MiLogStream *v8; // rax
  std::vector<SceneRange> *v9; // r14
  SceneRange *v10; // rax
  SceneRange *v11; // rdx
  std::string v15; // [rsp+20h] [rbp-F0h] BYREF
  char v16[208]; // [rsp+40h] [rbp-D0h] BYREF

  v5 = (unsigned __int64)v16;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v6 = __asan_stack_malloc_2(160LL);
    if ( v6 )
      v5 = v6;
  }
  *(_QWORD *)v5 = 1102416563LL;
  *(_QWORD *)(v5 + 8) = "2 48 4 12 quest_id:190 64 56 15 scene_range:192";
  *(_QWORD *)(v5 + 16) = SceneRangeHelper::addQuestSceneRange;
  v7 = (_DWORD *)(v5 >> 3);
  v7[536862720] = -235802127;
  v7[536862721] = -234556943;
  v7[536862723] = -218103808;
  v7[536862724] = -202116109;
  *(_DWORD *)(v5 + 48) = quest_id;
  std::string::basic_string(&v15, p_dummy_point);
  SceneRange::SceneRange((SceneRange *const)(v5 + 64), scene_id, radius, &v15);
  std::string::~string(&v15);
  if ( SceneRange::getPosFromConfig((SceneRange *const)(v5 + 64)) )
  {
    common::milog::MiLogStream::create(
      (common::milog::MiLogStream *)&v15,
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/player/quest/player_quest_comp.cpp",
      "addQuestSceneRange",
      195);
    v8 = common::milog::MiLogStream::operator<<<char [36],(char *[36])0>(
           (common::milog::MiLogStream *const)&v15,
           (const char (*)[36])"addQuestSceneRange fail, quest_id: ");
    common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v8, (const unsigned int *)(v5 + 48));
    common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)&v15);
  }
  else
  {
    if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
      __asan_report_load8(&this->player_);
    SceneRange::checkAndForceNotify((SceneRange *const)(v5 + 64), this->player_);
    v9 = std::map<unsigned int,std::vector<SceneRange>>::operator[](
           &this->scene_range_map_,
           (const std::map<unsigned int,std::vector<SceneRange>>::key_type *)(v5 + 48));
    v10 = std::move<SceneRange &>((SceneRange *)(v5 + 64));
    std::vector<SceneRange>::emplace_back<SceneRange>(v9, v10, v11);
  }
  SceneRange::~SceneRange((SceneRange *const)(v5 + 64));
  if ( v16 == (char *)v5 )
  {
    *(_QWORD *)((v5 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF800C) = 0LL;
  }
  else
  {
    *(_QWORD *)v5 = 1172321806LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v5 >> 3) + 0x7FFF8010) = -168430091;
  }
};

// Line 203: range 0000000013DCAED2-0000000013DCAF9E
void __fastcall SceneRangeHelper::clearQuestSceneRange(SceneRangeHelper *const this, uint32_t quest_id)
{
  unsigned __int64 v2; // rbx
  __int64 v3; // rax
  unsigned __int64 v4; // r12
  char v5[96]; // [rsp+10h] [rbp-60h] BYREF

  v2 = (unsigned __int64)v5;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_0(64LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "1 32 4 12 quest_id:202";
  *(_QWORD *)(v2 + 16) = SceneRangeHelper::clearQuestSceneRange;
  v4 = v2 >> 3;
  *(_DWORD *)(v4 + 2147450880) = -235802127;
  *(_DWORD *)(v4 + 2147450884) = -202116348;
  *(_DWORD *)(v2 + 32) = quest_id;
  std::map<unsigned int,std::vector<SceneRange>>::erase(
    &this->scene_range_map_,
    (const std::map<unsigned int,std::vector<SceneRange>>::key_type *)(v2 + 32));
  if ( v5 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
  }
};

// Line 208: range 0000000013DCAFA0-0000000013DCB8AE
void __cdecl PlayerQuestComp::PlayerQuestComp(PlayerQuestComp *const this, Player *player)
{
  int (**v2)(...); // rdx
  __int64 v3; // rcx
  char v4; // al
  char v5; // dl
  __int64 v6; // rsi
  __int64 v7; // rdx
  __int64 v8; // rcx
  char v9; // al
  __int64 v10; // rcx
  char v11; // al
  PlayerQuestComp **v12; // r8
  const std::_Placeholder<1> *v13; // r9
  __int64 v14; // rcx
  char v15; // al
  PlayerQuestComp **v16; // r8
  const std::_Placeholder<1> *v17; // r9
  __int64 v18; // rcx
  char v19; // al
  PlayerQuestComp **v20; // r8
  const std::_Placeholder<1> *v21; // r9
  PlayerQuestComp *v23; // [rsp+18h] [rbp-A8h] BYREF
  PlayerQuestComp *v24; // [rsp+20h] [rbp-A0h] BYREF
  PlayerQuestComp *v25; // [rsp+28h] [rbp-98h] BYREF
  void (*__f[2])(PlayerQuestComp *, unsigned __int64); // [rsp+30h] [rbp-90h] BYREF
  void (*v27[2])(PlayerQuestComp *, unsigned __int64); // [rsp+40h] [rbp-80h] BYREF
  PlayerPtr v28; // [rsp+50h] [rbp-70h] BYREF
  PlayerPtr p_player_ptr; // [rsp+60h] [rbp-60h] BYREF
  std::_Bind_helper<false,void (PlayerQuestComp::*)(long unsigned int),PlayerQuestComp*,const std::_Placeholder<1>&>::type p___f; // [rsp+70h] [rbp-50h] BYREF
  std::function<void(long unsigned int)> p_callback; // [rsp+90h] [rbp-30h] BYREF

  PlayerCompBase::PlayerCompBase(this, player);
  v2 = (int (**)(...))(&`vtable for'PlayerQuestComp + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, player, v2);
  this->_vptr_PlayerCompBase = v2;
  std::map<unsigned int,std::shared_ptr<Quest>>::map(&this->quest_map_);
  std::map<unsigned int,std::shared_ptr<ParentQuest>>::map(&this->parent_quest_map_);
  std::map<data::QuestContentType,std::set<unsigned int>>::map(&this->event_quest_map_);
  std::unordered_map<unsigned int,std::set<unsigned int>>::unordered_map(&this->item_event_quest_map_);
  std::map<unsigned int,std::set<unsigned int>>::map(&this->occupied_npc_map_);
  std::map<unsigned int,std::set<unsigned int>>::map(&this->occupied_place_map_);
  v4 = *(_BYTE *)(((unsigned __int64)&this->last_random_parent_quest_id_ >> 3) + 0x7FFF8000);
  if ( v4 != 0 && v4 <= 3 )
  {
    LOBYTE(v3) = v4 != 0;
    __asan_report_store4(&this->last_random_parent_quest_id_, player, &this->last_random_parent_quest_id_, v3);
  }
  this->last_random_parent_quest_id_ = 100000;
  v5 = *(_BYTE *)(((unsigned __int64)&this->last_random_quest_id_ >> 3) + 0x7FFF8000);
  LOBYTE(v3) = v5 != 0;
  v6 = (((_BYTE)this + 76) & 7u) + 3;
  v7 = (v5 != 0) & (unsigned __int8)((char)((((_BYTE)this + 76) & 7) + 3) >= v5);
  if ( (_BYTE)v7 )
    __asan_report_store4(&this->last_random_quest_id_, v6, v7, v3);
  this->last_random_quest_id_ = 10000000;
  std::set<unsigned int>::set(&this->mp_block_quest_set_);
  std::map<unsigned int,Chapter>::map(&this->chapter_map_);
  std::unordered_set<unsigned int>::unordered_set(&this->server_cond_meet_quest_set_);
  std::unordered_map<unsigned int,int>::unordered_map(&this->quest_global_var_map_);
  v9 = *(_BYTE *)(((unsigned __int64)&this->lua_notity_quest_param_ >> 3) + 0x7FFF8000);
  if ( v9 != 0 && v9 <= 3 )
  {
    LOBYTE(v8) = v9 != 0;
    __asan_report_store4(&this->lua_notity_quest_param_, v6, &this->lua_notity_quest_param_, v8);
  }
  this->lua_notity_quest_param_ = 0;
  QuestOperator::QuestOperator(&this->quest_op_, this);
  std::map<unsigned int,data::MainQuestExcelConfig *>::map(&this->parent_quest_config_map_);
  std::map<unsigned int,data::QuestExcelConfig *>::map(&this->quest_config_map_);
  std::map<unsigned int,std::set<unsigned int>>::map(&this->exclusive_npc_quest_map_);
  std::map<unsigned int,std::set<unsigned int>>::map(&this->shared_npc_quest_map_);
  v11 = *(_BYTE *)(((unsigned __int64)&this->is_move_pos_on_login_ >> 3) + 0x7FFF8000);
  if ( v11 < 0 )
  {
    LOBYTE(v10) = v11 != 0;
    __asan_report_store1(&this->is_move_pos_on_login_, this, &this->is_move_pos_on_login_, v10);
  }
  this->is_move_pos_on_login_ = 0;
  std::weak_ptr<Scene>::weak_ptr(&this->move_scene_wtr_);
  Vector3::Vector3(&this->move_pos_, 0.0, 0.0, 0.0);
  Vector3::Vector3(&this->move_rot_, 0.0, 0.0, 0.0);
  std::queue<PlayerQuestComp::QuestActionSnapShot>::queue<std::deque<PlayerQuestComp::QuestActionSnapShot>,void>(&this->quest_group_action_list_);
  std::unordered_map<unsigned int,unsigned int>::unordered_map(&this->last_dungeon_settle_map_);
  std::unordered_set<unsigned int>::unordered_set(&this->pre_open_chapter_id_set_);
  std::map<unsigned int,std::set<unsigned int>>::map(&this->wq_parent_quest_linked_group_map_);
  if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
    __asan_report_load8(&this->player_);
  toPtr<Player,Player>((Player *)&p_player_ptr);
  v23 = this;
  __f[0] = (void (*)(PlayerQuestComp *, unsigned __int64))PlayerQuestComp::onCheckQuestStartTimer;
  __f[1] = 0LL;
  std::bind<void (PlayerQuestComp::*)(unsigned long),PlayerQuestComp*,std::_Placeholder<1> const&>(
    &p___f,
    __f,
    &v23,
    (const std::_Placeholder<1> *)&std::placeholders::_1,
    v12,
    v13);
  std::function<void ()(unsigned long)>::function<std::_Bind<void (PlayerQuestComp::*)(unsigned long) ()(PlayerQuestComp*,std::_Placeholder<1>)>,void,void>(
    &p_callback,
    &p___f);
  PlayerUnixTimer::PlayerUnixTimer(&this->check_quest_start_timer_, &p_player_ptr, &p_callback);
  std::function<void ()(unsigned long)>::~function(&p_callback);
  std::shared_ptr<Player>::~shared_ptr(&p_player_ptr);
  v15 = *(_BYTE *)(((unsigned __int64)&this->next_check_quest_start_time_ >> 3) + 0x7FFF8000);
  if ( v15 != 0 && v15 <= 3 )
  {
    LOBYTE(v14) = v15 != 0;
    __asan_report_store4(&this->next_check_quest_start_time_, &p_player_ptr, &this->next_check_quest_start_time_, v14);
  }
  this->next_check_quest_start_time_ = 0;
  if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
    __asan_report_load8(&this->player_);
  toPtr<Player,Player>((Player *)&p_player_ptr);
  v24 = this;
  v27[0] = (void (*)(PlayerQuestComp *, unsigned __int64))PlayerQuestComp::onQuestTimeVarCheckTimer;
  v27[1] = 0LL;
  std::bind<void (PlayerQuestComp::*)(unsigned long),PlayerQuestComp*,std::_Placeholder<1> const&>(
    &p___f,
    v27,
    &v24,
    (const std::_Placeholder<1> *)&std::placeholders::_1,
    v16,
    v17);
  std::function<void ()(unsigned long)>::function<std::_Bind<void (PlayerQuestComp::*)(unsigned long) ()(PlayerQuestComp*,std::_Placeholder<1>)>,void,void>(
    &p_callback,
    &p___f);
  PlayerUnixTimer::PlayerUnixTimer(&this->check_quest_time_var_timer_, &p_player_ptr, &p_callback);
  std::function<void ()(unsigned long)>::~function(&p_callback);
  std::shared_ptr<Player>::~shared_ptr(&p_player_ptr);
  v19 = *(_BYTE *)(((unsigned __int64)&this->is_any_parent_quest_has_time_var_when_login >> 3) + 0x7FFF8000);
  if ( v19 < 0 )
  {
    LOBYTE(v18) = v19 != 0;
    __asan_report_store1(
      &this->is_any_parent_quest_has_time_var_when_login,
      &p_player_ptr,
      &this->is_any_parent_quest_has_time_var_when_login,
      v18);
  }
  this->is_any_parent_quest_has_time_var_when_login = 0;
  if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
    __asan_report_load8(&this->player_);
  toPtr<Player,Player>((Player *)&v28);
  v25 = this;
  p_player_ptr._M_ptr = (std::__shared_ptr<Player,(__gnu_cxx::_Lock_policy)2>::element_type *)PlayerQuestComp::onLeaveSceneRangeCheckTimer;
  p_player_ptr._M_refcount._M_pi = 0LL;
  std::bind<void (PlayerQuestComp::*)(unsigned long),PlayerQuestComp*,std::_Placeholder<1> const&>(
    &p___f,
    (void (**)(PlayerQuestComp *, unsigned __int64))&p_player_ptr,
    &v25,
    (const std::_Placeholder<1> *)&std::placeholders::_1,
    v20,
    v21);
  std::function<void ()(unsigned long)>::function<std::_Bind<void (PlayerQuestComp::*)(unsigned long) ()(PlayerQuestComp*,std::_Placeholder<1>)>,void,void>(
    &p_callback,
    &p___f);
  PlayerUnixTimer::PlayerUnixTimer(&this->check_leave_scene_range_timer_, &v28, &p_callback);
  std::function<void ()(unsigned long)>::~function(&p_callback);
  std::shared_ptr<Player>::~shared_ptr(&v28);
  SceneRangeHelper::SceneRangeHelper(&this->scene_range_helper_, player);
};

// Line 214: range 0000000013DCB8B0-0000000013DCCBA6
int32_t __cdecl PlayerQuestComp::fromBin(PlayerQuestComp *const this, const proto::PlayerDataBin *player_data_bin)
{
  int32_t v2; // r14d
  unsigned __int64 v3; // r12
  __int64 v4; // rax
  _DWORD *v5; // r13
  common::milog::MiLogStream *v6; // rax
  common::milog::MiLogStream *v7; // rax
  common::milog::MiLogStream *v8; // r14
  ParentQuest *v9; // rax
  common::milog::MiLogStream *v10; // rax
  common::milog::MiLogStream *v11; // rax
  ParentQuest *v12; // rax
  common::milog::MiLogStream *v13; // rax
  common::milog::MiLogStream *v14; // rax
  bool v15; // r15
  common::milog::MiLogStream *v16; // rax
  common::milog::MiLogStream *v17; // rax
  int v18; // r15d
  std::__shared_ptr_access<ParentQuest,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v19; // rax
  __int64 v20; // rcx
  char v21; // al
  google::protobuf::RepeatedPtrField<proto::ParentQuestBin>::const_iterator *p_for_end; // rsi
  common::milog::MiLogStream *v23; // rax
  common::milog::MiLogStream *v24; // rax
  common::milog::MiLogStream *v25; // r14
  Quest *v26; // rax
  common::milog::MiLogStream *v27; // rax
  common::milog::MiLogStream *v28; // rax
  Quest *v29; // r15
  bool v30; // r15
  common::milog::MiLogStream *v31; // rax
  common::milog::MiLogStream *v32; // rax
  bool v33; // r15
  common::milog::MiLogStream *v34; // rax
  common::milog::MiLogStream *v35; // rax
  int v36; // r15d
  __int64 random_parent_quest_id; // rdx
  char v38; // al
  __int64 random_quest_id; // rcx
  char v40; // dl
  __int64 v41; // rdx
  unsigned __int64 v42; // rax
  unsigned int v43; // r14d
  std::unordered_map<unsigned int,unsigned int>::mapped_type *v44; // rax
  unsigned int *v45; // rdx
  char v46; // cl
  const unsigned int *v47; // rsi
  __int64 v48; // rcx
  const proto::PlayerChapterBin *v49; // rax
  unsigned int *v50; // rcx
  int *v51; // r8
  int32_t result; // eax
  google::protobuf::RepeatedPtrField<proto::ParentQuestBin>::const_iterator __for_begin; // [rsp+28h] [rbp-1C8h] BYREF
  google::protobuf::RepeatedPtrField<proto::ParentQuestBin>::const_iterator __for_end; // [rsp+30h] [rbp-1C0h] BYREF
  google::protobuf::RepeatedField<unsigned int>::const_iterator __for_begin_1; // [rsp+38h] [rbp-1B8h]
  google::protobuf::RepeatedField<unsigned int>::const_iterator __for_begin_2; // [rsp+40h] [rbp-1B0h]
  const proto::PlayerQuestCompBin *proto_comp; // [rsp+48h] [rbp-1A8h]
  const proto::PlayerParentQuestBin *player_parent_quest_bin; // [rsp+50h] [rbp-1A0h]
  const google::protobuf::RepeatedPtrField<proto::ParentQuestBin> *__for_range; // [rsp+58h] [rbp-198h]
  const proto::PlayerQuestBin *player_quest_bin; // [rsp+60h] [rbp-190h]
  const google::protobuf::RepeatedPtrField<proto::QuestBin> *__for_range_0; // [rsp+68h] [rbp-188h]
  const google::protobuf::Map<unsigned int,unsigned int> *__for_range_1; // [rsp+70h] [rbp-180h]
  const google::protobuf::RepeatedPtrField<proto::ChapterBin> *__for_range_2; // [rsp+78h] [rbp-178h]
  const google::protobuf::RepeatedPtrField<proto::QuestGlobalVarBin> *__for_range_3; // [rsp+80h] [rbp-170h]
  const google::protobuf::RepeatedField<unsigned int> *__for_range_4; // [rsp+88h] [rbp-168h]
  google::protobuf::RepeatedField<unsigned int>::const_iterator __for_end_1; // [rsp+90h] [rbp-160h]
  const google::protobuf::RepeatedPtrField<proto::WorldQuestBin> *__for_range_5; // [rsp+98h] [rbp-158h]
  const proto::WorldQuestBin *world_quest_bin; // [rsp+A0h] [rbp-150h]
  std::set<unsigned int> *linked_flow_group_set; // [rsp+A8h] [rbp-148h]
  const google::protobuf::RepeatedField<unsigned int> *__for_range_6; // [rsp+B0h] [rbp-140h]
  google::protobuf::RepeatedField<unsigned int>::const_iterator __for_end_2; // [rsp+B8h] [rbp-138h]
  const proto::QuestGlobalVarBin *v72; // [rsp+C0h] [rbp-130h]
  const proto::ChapterBin *chapter_bin; // [rsp+C8h] [rbp-128h]
  Chapter *chapter; // [rsp+D0h] [rbp-120h]
  const unsigned int *p_dungeon_id; // [rsp+D8h] [rbp-118h]
  const proto::QuestBin *quest_bin; // [rsp+E0h] [rbp-110h]
  const proto::ParentQuestBin *parent_quest_bin; // [rsp+E8h] [rbp-108h]
  std::shared_ptr<ParentQuest> p_parent_quest_ptr; // [rsp+F0h] [rbp-100h] BYREF
  google::protobuf::Map<unsigned int,unsigned int>::const_iterator __for_begin_0; // [rsp+100h] [rbp-F0h] BYREF
  google::protobuf::Map<unsigned int,unsigned int>::const_iterator __for_end_0; // [rsp+120h] [rbp-D0h] BYREF
  common::milog::MiLogStream v81; // [rsp+140h] [rbp-B0h] BYREF
  char v82[144]; // [rsp+160h] [rbp-90h] BYREF

  v3 = (unsigned __int64)v82;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_1(96LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "3 32 4 19 parent_quest_id:222 48 4 12 group_id:313 64 16 13 quest_ptr:259";
  *(_QWORD *)(v3 + 16) = PlayerQuestComp::fromBin;
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = -234556924;
  v5[536862722] = -202178560;
  proto_comp = proto::PlayerDataBin::quest_bin(player_data_bin);
  player_parent_quest_bin = proto::PlayerQuestCompBin::parent_quest_bin(proto_comp);
  __for_range = proto::PlayerParentQuestBin::parent_quest_list(player_parent_quest_bin);
  __for_begin.it_ = google::protobuf::RepeatedPtrField<proto::ParentQuestBin>::begin(__for_range).it_;
  __for_end.it_ = google::protobuf::RepeatedPtrField<proto::ParentQuestBin>::end(__for_range).it_;
  while ( google::protobuf::internal::RepeatedPtrIterator<proto::ParentQuestBin const>::operator!=(
            &__for_begin,
            &__for_end) )
  {
    parent_quest_bin = google::protobuf::internal::RepeatedPtrIterator<proto::ParentQuestBin const>::operator*(&__for_begin);
    *(_DWORD *)(v3 + 32) = proto::ParentQuestBin::parent_quest_id(parent_quest_bin);
    proto::ParentQuestBin::parent_quest_id(parent_quest_bin);
    PlayerQuestComp::createParentQuest((PlayerQuestComp *const)(v3 + 64), (uint32_t)this);
    if ( std::operator==<ParentQuest>((const std::shared_ptr<ParentQuest> *)(v3 + 64), 0LL) )
    {
      common::milog::MiLogStream::create(
        &v81,
        &common::milog::MiLogDefault::default_log_obj_,
        4u,
        "./src/player/quest/player_quest_comp.cpp",
        "fromBin",
        226);
      v6 = common::milog::MiLogStream::operator<<<char [43],(char *[43])0>(
             &v81,
             (const char (*)[43])"createParentQuest failed, parent_quest_id:");
      v7 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v6, (const unsigned int *)(v3 + 32));
      v8 = common::milog::MiLogStream::operator<<<char [6],(char *[6])0>(v7, (const char (*)[6])" uid:");
      if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
        __asan_report_load8(&this->player_);
LABEL_21:
      *(_DWORD *)(v3 + 48) = Player::getUid(this->player_);
      common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v8, (const unsigned int *)(v3 + 48));
      common::milog::MiLogStream::~MiLogStream(&v81);
      v2 = -1;
      v18 = 0;
      goto LABEL_27;
    }
    v9 = std::__shared_ptr_access<ParentQuest,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<ParentQuest,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 64));
    if ( ParentQuest::fromBin(v9, parent_quest_bin) )
    {
      common::milog::MiLogStream::create(
        &v81,
        &common::milog::MiLogDefault::default_log_obj_,
        4u,
        "./src/player/quest/player_quest_comp.cpp",
        "fromBin",
        232);
      v10 = common::milog::MiLogStream::operator<<<char [46],(char *[46])0>(
              &v81,
              (const char (*)[46])"parent_quest fromBin failed, parent_quest_id:");
      v11 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v10, (const unsigned int *)(v3 + 32));
      v8 = common::milog::MiLogStream::operator<<<char [6],(char *[6])0>(v11, (const char (*)[6])" uid:");
      if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
        __asan_report_load8(&this->player_);
      goto LABEL_21;
    }
    v12 = std::__shared_ptr_access<ParentQuest,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<ParentQuest,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 64));
    if ( ParentQuest::checkAndInit(v12) )
    {
      common::milog::MiLogStream::create(
        &v81,
        &common::milog::MiLogDefault::default_log_obj_,
        4u,
        "./src/player/quest/player_quest_comp.cpp",
        "fromBin",
        238);
      v13 = common::milog::MiLogStream::operator<<<char [42],(char *[42])0>(
              &v81,
              (const char (*)[42])"parent_quest init fails, parent_quest_id:");
      v14 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v13, (const unsigned int *)(v3 + 32));
      v8 = common::milog::MiLogStream::operator<<<char [6],(char *[6])0>(v14, (const char (*)[6])" uid:");
      if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
        __asan_report_load8(&this->player_);
      goto LABEL_21;
    }
    std::shared_ptr<ParentQuest>::shared_ptr(&p_parent_quest_ptr, (const std::shared_ptr<ParentQuest> *)(v3 + 64));
    v15 = PlayerQuestComp::emplaceParentQuest(this, &p_parent_quest_ptr, 0) != 0;
    std::shared_ptr<ParentQuest>::~shared_ptr(&p_parent_quest_ptr);
    if ( v15 )
    {
      common::milog::MiLogStream::create(
        &v81,
        &common::milog::MiLogDefault::default_log_obj_,
        4u,
        "./src/player/quest/player_quest_comp.cpp",
        "fromBin",
        244);
      v16 = common::milog::MiLogStream::operator<<<char [44],(char *[44])0>(
              &v81,
              (const char (*)[44])"emplaceParentQuest failed, parent_quest_id:");
      v17 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v16, (const unsigned int *)(v3 + 32));
      v8 = common::milog::MiLogStream::operator<<<char [6],(char *[6])0>(v17, (const char (*)[6])" uid:");
      if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
        __asan_report_load8(&this->player_);
      goto LABEL_21;
    }
    v19 = std::__shared_ptr_access<ParentQuest,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<ParentQuest,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 64));
    if ( ParentQuest::getQuestTimeVarCount(v19) )
    {
      v21 = *(_BYTE *)(((unsigned __int64)&this->is_any_parent_quest_has_time_var_when_login >> 3) + 0x7FFF8000);
      if ( v21 < 0 )
      {
        LOBYTE(v20) = v21 != 0;
        __asan_report_store1(
          &this->is_any_parent_quest_has_time_var_when_login,
          &p_parent_quest_ptr,
          &this->is_any_parent_quest_has_time_var_when_login,
          v20);
      }
      this->is_any_parent_quest_has_time_var_when_login = 1;
    }
    v18 = 1;
LABEL_27:
    std::shared_ptr<ParentQuest>::~shared_ptr((std::shared_ptr<ParentQuest> *const)(v3 + 64));
    if ( v18 != 1 )
      goto LABEL_83;
    google::protobuf::internal::RepeatedPtrIterator<proto::ParentQuestBin const>::operator++(&__for_begin);
  }
  player_quest_bin = proto::PlayerQuestCompBin::quest_bin(proto_comp);
  __for_range_0 = proto::PlayerQuestBin::quest_list(player_quest_bin);
  __for_begin.it_ = google::protobuf::RepeatedPtrField<proto::QuestBin>::begin(__for_range_0).it_;
  __for_end.it_ = google::protobuf::RepeatedPtrField<proto::QuestBin>::end(__for_range_0).it_;
  while ( 1 )
  {
    p_for_end = &__for_end;
    if ( !google::protobuf::internal::RepeatedPtrIterator<proto::QuestBin const>::operator!=(
            (const google::protobuf::internal::RepeatedPtrIterator<const proto::QuestBin> *const)&__for_begin,
            (const google::protobuf::internal::RepeatedPtrIterator<const proto::QuestBin>::iterator *)&__for_end) )
      break;
    quest_bin = google::protobuf::internal::RepeatedPtrIterator<proto::QuestBin const>::operator*((const google::protobuf::internal::RepeatedPtrIterator<const proto::QuestBin> *const)&__for_begin);
    *(_DWORD *)(v3 + 32) = proto::QuestBin::quest_id(quest_bin);
    proto::QuestBin::quest_id(quest_bin);
    PlayerQuestComp::createQuest((PlayerQuestComp *const)(v3 + 64), (uint32_t)this);
    if ( std::operator==<Quest>((const std::shared_ptr<Quest> *)(v3 + 64), 0LL) )
    {
      common::milog::MiLogStream::create(
        &v81,
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/player/quest/player_quest_comp.cpp",
        "fromBin",
        262);
      v23 = common::milog::MiLogStream::operator<<<char [29],(char *[29])0>(
              &v81,
              (const char (*)[29])"createQuest fails, quest_id:");
      v24 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v23, (const unsigned int *)(v3 + 32));
      v25 = common::milog::MiLogStream::operator<<<char [6],(char *[6])0>(v24, (const char (*)[6])" uid:");
      if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
        __asan_report_load8(&this->player_);
LABEL_48:
      *(_DWORD *)(v3 + 48) = Player::getUid(this->player_);
      common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v25, (const unsigned int *)(v3 + 48));
      common::milog::MiLogStream::~MiLogStream(&v81);
      v2 = -1;
      v36 = 0;
      goto LABEL_50;
    }
    v26 = std::__shared_ptr_access<Quest,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Quest,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 64));
    if ( Quest::fromBin(v26, quest_bin) )
    {
      common::milog::MiLogStream::create(
        &v81,
        &common::milog::MiLogDefault::default_log_obj_,
        4u,
        "./src/player/quest/player_quest_comp.cpp",
        "fromBin",
        268);
      v27 = common::milog::MiLogStream::operator<<<char [32],(char *[32])0>(
              &v81,
              (const char (*)[32])"quest fromBin failed, quest_id:");
      v28 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v27, (const unsigned int *)(v3 + 32));
      v25 = common::milog::MiLogStream::operator<<<char [6],(char *[6])0>(v28, (const char (*)[6])" uid:");
      if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
        __asan_report_load8(&this->player_);
      goto LABEL_48;
    }
    v29 = std::__shared_ptr_access<Quest,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Quest,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 64));
    if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
      __asan_report_load8(&this->player_);
    toThisPtr<Player>((Player *)&p_parent_quest_ptr);
    v30 = Quest::checkAndInit(v29, (PlayerPtr *)&p_parent_quest_ptr) != 0;
    std::shared_ptr<Player>::~shared_ptr((std::shared_ptr<Player> *const)&p_parent_quest_ptr);
    if ( v30 )
    {
      common::milog::MiLogStream::create(
        &v81,
        &common::milog::MiLogDefault::default_log_obj_,
        4u,
        "./src/player/quest/player_quest_comp.cpp",
        "fromBin",
        274);
      v31 = common::milog::MiLogStream::operator<<<char [29],(char *[29])0>(
              &v81,
              (const char (*)[29])"quest init failed, quest_id:");
      v32 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v31, (const unsigned int *)(v3 + 32));
      v25 = common::milog::MiLogStream::operator<<<char [6],(char *[6])0>(v32, (const char (*)[6])" uid:");
      if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
        __asan_report_load8(&this->player_);
      goto LABEL_48;
    }
    std::shared_ptr<Quest>::shared_ptr(
      (std::shared_ptr<Quest> *const)&p_parent_quest_ptr,
      (const std::shared_ptr<Quest> *)(v3 + 64));
    v33 = PlayerQuestComp::emplaceQuest(this, (QuestPtr *)&p_parent_quest_ptr, 0) != 0;
    std::shared_ptr<Quest>::~shared_ptr((std::shared_ptr<Quest> *const)&p_parent_quest_ptr);
    if ( v33 )
    {
      common::milog::MiLogStream::create(
        &v81,
        &common::milog::MiLogDefault::default_log_obj_,
        4u,
        "./src/player/quest/player_quest_comp.cpp",
        "fromBin",
        280);
      v34 = common::milog::MiLogStream::operator<<<char [31],(char *[31])0>(
              &v81,
              (const char (*)[31])"emplaceQuest failed, quest_id:");
      v35 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v34, (const unsigned int *)(v3 + 32));
      v25 = common::milog::MiLogStream::operator<<<char [6],(char *[6])0>(v35, (const char (*)[6])" uid:");
      if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
        __asan_report_load8(&this->player_);
      goto LABEL_48;
    }
    v36 = 1;
LABEL_50:
    std::shared_ptr<Quest>::~shared_ptr((std::shared_ptr<Quest> *const)(v3 + 64));
    if ( v36 != 1 )
      goto LABEL_83;
    google::protobuf::internal::RepeatedPtrIterator<proto::QuestBin const>::operator++((google::protobuf::internal::RepeatedPtrIterator<const proto::QuestBin> *const)&__for_begin);
  }
  random_parent_quest_id = proto::PlayerQuestCompBin::last_random_parent_quest_id(proto_comp);
  v38 = *(_BYTE *)(((unsigned __int64)&this->last_random_parent_quest_id_ >> 3) + 0x7FFF8000);
  if ( v38 != 0 && v38 <= 3 )
  {
    LOBYTE(p_for_end) = v38 != 0;
    __asan_report_store4(
      &this->last_random_parent_quest_id_,
      p_for_end,
      random_parent_quest_id,
      &this->last_random_parent_quest_id_);
  }
  this->last_random_parent_quest_id_ = random_parent_quest_id;
  random_quest_id = proto::PlayerQuestCompBin::last_random_quest_id(proto_comp);
  v40 = *(_BYTE *)(((unsigned __int64)&this->last_random_quest_id_ >> 3) + 0x7FFF8000);
  LOBYTE(p_for_end) = v40 != 0;
  v41 = (v40 != 0) & (unsigned __int8)((char)((((_BYTE)this + 76) & 7) + 3) >= v40);
  if ( (_BYTE)v41 )
    __asan_report_store4(&this->last_random_quest_id_, p_for_end, v41, random_quest_id);
  this->last_random_quest_id_ = random_quest_id;
  std::unordered_map<unsigned int,unsigned int>::clear(&this->last_dungeon_settle_map_);
  __for_range_1 = proto::PlayerQuestCompBin::last_dungeon_settle_map(proto_comp);
  google::protobuf::Map<unsigned int,unsigned int>::begin(&__for_begin_0, __for_range_1);
  google::protobuf::Map<unsigned int,unsigned int>::end(&__for_end_0, __for_range_1);
  while ( google::protobuf::operator!=(&__for_begin_0, &__for_end_0) )
  {
    p_dungeon_id = (const unsigned int *)google::protobuf::Map<unsigned int,unsigned int>::const_iterator::operator*(&__for_begin_0);
    v42 = (unsigned __int64)(p_dungeon_id + 1);
    if ( *(_BYTE *)((v42 >> 3) + 0x7FFF8000) != 0 && (char)((v42 & 7) + 3) >= *(_BYTE *)((v42 >> 3) + 0x7FFF8000) )
      __asan_report_load4(v42);
    v43 = p_dungeon_id[1];
    v47 = p_dungeon_id;
    v44 = std::unordered_map<unsigned int,unsigned int>::operator[](&this->last_dungeon_settle_map_, p_dungeon_id);
    v45 = v44;
    v46 = *(_BYTE *)(((unsigned __int64)v44 >> 3) + 0x7FFF8000);
    LOBYTE(v47) = v46 != 0;
    v48 = (v46 != 0) & (unsigned __int8)((char)(((unsigned __int8)v44 & 7) + 3) >= v46);
    if ( (_BYTE)v48 )
      __asan_report_store4(v44, v47, v44, v48);
    *v45 = v43;
    google::protobuf::Map<unsigned int,unsigned int>::const_iterator::operator++(&__for_begin_0);
  }
  v49 = proto::PlayerQuestCompBin::chapter_bin(proto_comp);
  __for_range_2 = proto::PlayerChapterBin::chapter_list(v49);
  __for_begin.it_ = google::protobuf::RepeatedPtrField<proto::ChapterBin>::begin(__for_range_2).it_;
  __for_end.it_ = google::protobuf::RepeatedPtrField<proto::ChapterBin>::end(__for_range_2).it_;
  while ( google::protobuf::internal::RepeatedPtrIterator<proto::ChapterBin const>::operator!=(
            (const google::protobuf::internal::RepeatedPtrIterator<const proto::ChapterBin> *const)&__for_begin,
            (const google::protobuf::internal::RepeatedPtrIterator<const proto::ChapterBin>::iterator *)&__for_end) )
  {
    chapter_bin = google::protobuf::internal::RepeatedPtrIterator<proto::ChapterBin const>::operator*((const google::protobuf::internal::RepeatedPtrIterator<const proto::ChapterBin> *const)&__for_begin);
    *(_DWORD *)(v3 + 48) = proto::ChapterBin::chapter_id(chapter_bin);
    chapter = std::map<unsigned int,Chapter>::operator[](
                &this->chapter_map_,
                (std::map<unsigned int,Chapter>::key_type *)(v3 + 48));
    Chapter::fromBin(chapter, chapter_bin);
    google::protobuf::internal::RepeatedPtrIterator<proto::ChapterBin const>::operator++((google::protobuf::internal::RepeatedPtrIterator<const proto::ChapterBin> *const)&__for_begin);
  }
  __for_range_3 = proto::PlayerQuestCompBin::quest_global_var_list(proto_comp);
  __for_begin.it_ = google::protobuf::RepeatedPtrField<proto::QuestGlobalVarBin>::begin(__for_range_3).it_;
  __for_end.it_ = google::protobuf::RepeatedPtrField<proto::QuestGlobalVarBin>::end(__for_range_3).it_;
  while ( google::protobuf::internal::RepeatedPtrIterator<proto::QuestGlobalVarBin const>::operator!=(
            (const google::protobuf::internal::RepeatedPtrIterator<const proto::QuestGlobalVarBin> *const)&__for_begin,
            (const google::protobuf::internal::RepeatedPtrIterator<const proto::QuestGlobalVarBin>::iterator *)&__for_end) )
  {
    v72 = google::protobuf::internal::RepeatedPtrIterator<proto::QuestGlobalVarBin const>::operator*((const google::protobuf::internal::RepeatedPtrIterator<const proto::QuestGlobalVarBin> *const)&__for_begin);
    *(_DWORD *)(v3 + 48) = proto::QuestGlobalVarBin::value(v72);
    *(_DWORD *)(v3 + 32) = proto::QuestGlobalVarBin::key(v72);
    std::unordered_map<unsigned int,int>::emplace<unsigned int,int>(
      &this->quest_global_var_map_,
      (unsigned int *)(v3 + 32),
      (int *)(v3 + 48),
      v50,
      v51);
    google::protobuf::internal::RepeatedPtrIterator<proto::QuestGlobalVarBin const>::operator++((google::protobuf::internal::RepeatedPtrIterator<const proto::QuestGlobalVarBin> *const)&__for_begin);
  }
  __for_range_4 = proto::PlayerQuestCompBin::pre_open_chapter_id_list(proto_comp);
  __for_begin_1 = google::protobuf::RepeatedField<unsigned int>::begin(__for_range_4);
  __for_end_1 = google::protobuf::RepeatedField<unsigned int>::end(__for_range_4);
  while ( __for_begin_1 != __for_end_1 )
  {
    if ( *(_BYTE *)(((unsigned __int64)__for_begin_1 >> 3) + 0x7FFF8000) != 0
      && (char)(((unsigned __int8)__for_begin_1 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)__for_begin_1 >> 3)
                                                                      + 0x7FFF8000) )
    {
      __asan_report_load4(__for_begin_1);
    }
    *(_DWORD *)(v3 + 48) = *__for_begin_1;
    std::unordered_set<unsigned int>::insert(
      &this->pre_open_chapter_id_set_,
      (const std::unordered_set<unsigned int>::value_type *)(v3 + 48));
    ++__for_begin_1;
  }
  __for_range_5 = proto::PlayerQuestCompBin::world_quest_bin_list(proto_comp);
  __for_begin.it_ = google::protobuf::RepeatedPtrField<proto::WorldQuestBin>::begin(__for_range_5).it_;
  __for_end.it_ = google::protobuf::RepeatedPtrField<proto::WorldQuestBin>::end(__for_range_5).it_;
  while ( google::protobuf::internal::RepeatedPtrIterator<proto::WorldQuestBin const>::operator!=(
            (const google::protobuf::internal::RepeatedPtrIterator<const proto::WorldQuestBin> *const)&__for_begin,
            (const google::protobuf::internal::RepeatedPtrIterator<const proto::WorldQuestBin>::iterator *)&__for_end) )
  {
    world_quest_bin = google::protobuf::internal::RepeatedPtrIterator<proto::WorldQuestBin const>::operator*((const google::protobuf::internal::RepeatedPtrIterator<const proto::WorldQuestBin> *const)&__for_begin);
    *(_DWORD *)(v3 + 48) = proto::WorldQuestBin::parent_quest_id(world_quest_bin);
    linked_flow_group_set = std::map<unsigned int,std::set<unsigned int>>::operator[](
                              &this->wq_parent_quest_linked_group_map_,
                              (std::map<unsigned int,std::set<unsigned int>>::key_type *)(v3 + 48));
    __for_range_6 = proto::WorldQuestBin::linked_flow_group_list(world_quest_bin);
    __for_begin_2 = google::protobuf::RepeatedField<unsigned int>::begin(__for_range_6);
    __for_end_2 = google::protobuf::RepeatedField<unsigned int>::end(__for_range_6);
    while ( __for_begin_2 != __for_end_2 )
    {
      if ( *(_BYTE *)(((unsigned __int64)__for_begin_2 >> 3) + 0x7FFF8000) != 0
        && (char)(((unsigned __int8)__for_begin_2 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)__for_begin_2 >> 3)
                                                                        + 0x7FFF8000) )
      {
        __asan_report_load4(__for_begin_2);
      }
      *(_DWORD *)(v3 + 48) = *__for_begin_2;
      std::set<unsigned int>::insert(linked_flow_group_set, (const std::set<unsigned int>::value_type *)(v3 + 48));
      ++__for_begin_2;
    }
    google::protobuf::internal::RepeatedPtrIterator<proto::WorldQuestBin const>::operator++((google::protobuf::internal::RepeatedPtrIterator<const proto::WorldQuestBin> *const)&__for_begin);
  }
  v2 = 0;
LABEL_83:
  result = v2;
  if ( v82 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8008) = 0;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8008) = -168430091;
  }
  return result;
};

// Line 324: range 0000000013DCCBA8-0000000013DCD733
int32_t __cdecl PlayerQuestComp::toBin(PlayerQuestComp *const this, proto::PlayerDataBin *player_data_bin)
{
  std::__shared_ptr_access<Quest,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v2; // rax
  common::milog::MiLogStream *v3; // rax
  common::milog::MiLogStream *v4; // rax
  common::milog::MiLogStream *v5; // rbx
  std::__shared_ptr_access<ParentQuest,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v7; // rax
  common::milog::MiLogStream *v8; // rax
  common::milog::MiLogStream *v9; // rax
  std::tuple_element<1,const std::pair<unsigned int const,unsigned int> >::type *v10; // rax
  std::tuple_element<1,const std::pair<unsigned int const,unsigned int> >::type v11; // ebx
  unsigned int *v12; // rax
  std::tuple_element<1,const std::pair<unsigned int const,unsigned int> >::type *v13; // rdx
  char v14; // cl
  std::tuple_element<0,const std::pair<unsigned int const,unsigned int> >::type *v15; // rsi
  __int64 v16; // rcx
  proto::PlayerChapterBin *v17; // rax
  std::__detail::_Node_iterator<std::pair<unsigned int const,int>,false,false>::reference v18; // rax
  std::pair<unsigned int const,int> *v19; // rdx
  unsigned int *v20; // rax
  unsigned int *v21; // rdx
  unsigned int *v22; // rax
  uint32_t *v23; // rdx
  unsigned int val; // [rsp+14h] [rbp-16Ch] BYREF
  uint32_t group_id; // [rsp+18h] [rbp-168h]
  unsigned int id; // [rsp+1Ch] [rbp-164h]
  std::map<unsigned int,std::set<unsigned int>>::iterator __for_begin_1; // [rsp+20h] [rbp-160h] BYREF
  std::map<unsigned int,std::set<unsigned int>>::iterator __for_end_0; // [rsp+28h] [rbp-158h] BYREF
  std::unordered_set<unsigned int>::iterator __for_begin; // [rsp+30h] [rbp-150h] BYREF
  proto::PlayerQuestCompBin *proto_comp; // [rsp+38h] [rbp-148h]
  proto::PlayerQuestBin *player_quest_bin; // [rsp+40h] [rbp-140h]
  std::map<unsigned int,std::shared_ptr<Quest>> *__for_range; // [rsp+48h] [rbp-138h]
  proto::PlayerParentQuestBin *player_parent_quest_bin; // [rsp+50h] [rbp-130h]
  std::map<unsigned int,std::shared_ptr<ParentQuest>> *__for_range_0; // [rsp+58h] [rbp-128h]
  google::protobuf::Map<unsigned int,unsigned int> *dungeon_settle_bin; // [rsp+60h] [rbp-120h]
  std::unordered_map<unsigned int,unsigned int> *__for_range_1; // [rsp+68h] [rbp-118h]
  std::map<unsigned int,Chapter> *__for_range_2; // [rsp+70h] [rbp-110h]
  std::unordered_map<unsigned int,int> *__for_range_3; // [rsp+78h] [rbp-108h]
  std::unordered_set<unsigned int> *__for_range_4; // [rsp+80h] [rbp-100h]
  std::map<unsigned int,std::set<unsigned int>> *__for_range_5; // [rsp+88h] [rbp-F8h]
  const std::pair<unsigned int const,std::set<unsigned int> > *v41; // [rsp+90h] [rbp-F0h]
  std::tuple_element<0,const std::pair<unsigned int const,std::set<unsigned int> > >::type *parent_quest_id_0; // [rsp+98h] [rbp-E8h]
  std::tuple_element<1,const std::pair<unsigned int const,std::set<unsigned int> > >::type *linked_group_set; // [rsp+A0h] [rbp-E0h]
  proto::WorldQuestBin *world_quest_bin; // [rsp+A8h] [rbp-D8h]
  const std::set<unsigned int> *__for_range_6; // [rsp+B0h] [rbp-D0h]
  std::tuple_element<0,std::pair<unsigned int const,int> >::type *key; // [rsp+B8h] [rbp-C8h]
  std::tuple_element<1,std::pair<unsigned int const,int> >::type *value; // [rsp+C0h] [rbp-C0h]
  proto::QuestGlobalVarBin *bin; // [rsp+C8h] [rbp-B8h]
  const std::pair<unsigned int const,Chapter> *v49; // [rsp+D0h] [rbp-B0h]
  std::tuple_element<0,const std::pair<unsigned int const,Chapter> >::type *_; // [rsp+D8h] [rbp-A8h]
  std::tuple_element<1,const std::pair<unsigned int const,Chapter> >::type *chapter; // [rsp+E0h] [rbp-A0h]
  proto::ChapterBin *bin_ptr; // [rsp+E8h] [rbp-98h]
  const std::pair<unsigned int const,unsigned int> *v53; // [rsp+F0h] [rbp-90h]
  std::tuple_element<0,const std::pair<unsigned int const,unsigned int> >::type *dungeon_id; // [rsp+F8h] [rbp-88h]
  std::tuple_element<1,const std::pair<unsigned int const,unsigned int> >::type *result; // [rsp+100h] [rbp-80h]
  const std::pair<unsigned int const,std::shared_ptr<ParentQuest> > *v56; // [rsp+108h] [rbp-78h]
  std::tuple_element<0,const std::pair<unsigned int const,std::shared_ptr<ParentQuest> > >::type *parent_quest_id; // [rsp+110h] [rbp-70h]
  std::tuple_element<1,const std::pair<unsigned int const,std::shared_ptr<ParentQuest> > >::type *parent_quest_ptr; // [rsp+118h] [rbp-68h]
  proto::ParentQuestBin *parent_quest_bin; // [rsp+120h] [rbp-60h]
  const std::pair<unsigned int const,std::shared_ptr<Quest> > *v60; // [rsp+128h] [rbp-58h]
  std::tuple_element<0,const std::pair<unsigned int const,std::shared_ptr<Quest> > >::type *quest_id; // [rsp+130h] [rbp-50h]
  std::tuple_element<1,const std::pair<unsigned int const,std::shared_ptr<Quest> > >::type *quest_ptr; // [rsp+138h] [rbp-48h]
  proto::QuestBin *quest_bin; // [rsp+140h] [rbp-40h]
  std::pair<unsigned int const,int> __for_end; // [rsp+148h] [rbp-38h] BYREF
  common::milog::MiLogStream v65; // [rsp+150h] [rbp-30h] BYREF

  proto_comp = proto::PlayerDataBin::mutable_quest_bin(player_data_bin);
  player_quest_bin = proto::PlayerQuestCompBin::mutable_quest_bin(proto_comp);
  __for_range = &this->quest_map_;
  __for_begin._M_cur = (std::__detail::_Node_iterator_base<unsigned int,false>::__node_type *)std::map<unsigned int,std::shared_ptr<Quest>>::begin(&this->quest_map_)._M_node;
  __for_end = (std::pair<unsigned int const,int>)std::map<unsigned int,std::shared_ptr<Quest>>::end(&this->quest_map_)._M_node;
  while ( std::operator!=(
            (const std::_Rb_tree_iterator<std::pair<unsigned int const,std::shared_ptr<Quest> > >::_Self *)&__for_begin,
            (const std::_Rb_tree_iterator<std::pair<unsigned int const,std::shared_ptr<Quest> > >::_Self *)&__for_end) )
  {
    v60 = std::_Rb_tree_iterator<std::pair<unsigned int const,std::shared_ptr<Quest>>>::operator*((const std::_Rb_tree_iterator<std::pair<unsigned int const,std::shared_ptr<Quest> > > *const)&__for_begin);
    quest_id = std::get<0ul,unsigned int const,std::shared_ptr<Quest>>(v60);
    quest_ptr = (std::tuple_element<1,const std::pair<unsigned int const,std::shared_ptr<Quest> > >::type *)std::get<1ul,unsigned int const,std::shared_ptr<Quest>>(v60);
    quest_bin = proto::PlayerQuestBin::add_quest_list(player_quest_bin);
    v2 = std::__shared_ptr_access<Quest,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Quest,(__gnu_cxx::_Lock_policy)2,false,false> *const)quest_ptr);
    if ( Quest::toBin(v2, quest_bin) )
    {
      common::milog::MiLogStream::create(
        &v65,
        &common::milog::MiLogDefault::default_log_obj_,
        4u,
        "./src/player/quest/player_quest_comp.cpp",
        "toBin",
        335);
      v3 = common::milog::MiLogStream::operator<<<char [33],(char *[33])0>(
             &v65,
             (const char (*)[33])"quest_bin_ptr is null, quest_id:");
      v4 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v3, quest_id);
      v5 = common::milog::MiLogStream::operator<<<char [6],(char *[6])0>(v4, (const char (*)[6])" uid:");
      if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
        __asan_report_load8(&this->player_);
LABEL_6:
      val = Player::getUid(this->player_);
      common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v5, &val);
      common::milog::MiLogStream::~MiLogStream(&v65);
      return -1;
    }
    std::_Rb_tree_iterator<std::pair<unsigned int const,std::shared_ptr<Quest>>>::operator++((std::_Rb_tree_iterator<std::pair<unsigned int const,std::shared_ptr<Quest> > > *const)&__for_begin);
  }
  player_parent_quest_bin = proto::PlayerQuestCompBin::mutable_parent_quest_bin(proto_comp);
  __for_range_0 = &this->parent_quest_map_;
  __for_begin._M_cur = (std::__detail::_Node_iterator_base<unsigned int,false>::__node_type *)std::map<unsigned int,std::shared_ptr<ParentQuest>>::begin(&this->parent_quest_map_)._M_node;
  __for_end = (std::pair<unsigned int const,int>)std::map<unsigned int,std::shared_ptr<ParentQuest>>::end(__for_range_0)._M_node;
  while ( std::operator!=(
            (const std::_Rb_tree_iterator<std::pair<unsigned int const,std::shared_ptr<ParentQuest> > >::_Self *)&__for_begin,
            (const std::_Rb_tree_iterator<std::pair<unsigned int const,std::shared_ptr<ParentQuest> > >::_Self *)&__for_end) )
  {
    v56 = std::_Rb_tree_iterator<std::pair<unsigned int const,std::shared_ptr<ParentQuest>>>::operator*((const std::_Rb_tree_iterator<std::pair<unsigned int const,std::shared_ptr<ParentQuest> > > *const)&__for_begin);
    parent_quest_id = std::get<0ul,unsigned int const,std::shared_ptr<ParentQuest>>(v56);
    parent_quest_ptr = (std::tuple_element<1,const std::pair<unsigned int const,std::shared_ptr<ParentQuest> > >::type *)std::get<1ul,unsigned int const,std::shared_ptr<ParentQuest>>(v56);
    parent_quest_bin = proto::PlayerParentQuestBin::add_parent_quest_list(player_parent_quest_bin);
    v7 = std::__shared_ptr_access<ParentQuest,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<ParentQuest,(__gnu_cxx::_Lock_policy)2,false,false> *const)parent_quest_ptr);
    if ( ParentQuest::toBin(v7, parent_quest_bin) )
    {
      common::milog::MiLogStream::create(
        &v65,
        &common::milog::MiLogDefault::default_log_obj_,
        4u,
        "./src/player/quest/player_quest_comp.cpp",
        "toBin",
        347);
      v8 = common::milog::MiLogStream::operator<<<char [43],(char *[43])0>(
             &v65,
             (const char (*)[43])"parent_quest toBin fails, parent_quest_id:");
      v9 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v8, parent_quest_id);
      v5 = common::milog::MiLogStream::operator<<<char [6],(char *[6])0>(v9, (const char (*)[6])" uid:");
      if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
        __asan_report_load8(&this->player_);
      goto LABEL_6;
    }
    std::_Rb_tree_iterator<std::pair<unsigned int const,std::shared_ptr<ParentQuest>>>::operator++((std::_Rb_tree_iterator<std::pair<unsigned int const,std::shared_ptr<ParentQuest> > > *const)&__for_begin);
  }
  if ( *(_BYTE *)(((unsigned __int64)&this->last_random_parent_quest_id_ >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->last_random_parent_quest_id_ >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4(&this->last_random_parent_quest_id_);
  }
  proto::PlayerQuestCompBin::set_last_random_parent_quest_id(proto_comp, this->last_random_parent_quest_id_);
  if ( *(_BYTE *)(((unsigned __int64)&this->last_random_quest_id_ >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)this + 76) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&this->last_random_quest_id_ >> 3)
                                                        + 0x7FFF8000) )
  {
    __asan_report_load4(&this->last_random_quest_id_);
  }
  proto::PlayerQuestCompBin::set_last_random_quest_id(proto_comp, this->last_random_quest_id_);
  dungeon_settle_bin = proto::PlayerQuestCompBin::mutable_last_dungeon_settle_map(proto_comp);
  __for_range_1 = &this->last_dungeon_settle_map_;
  __for_begin._M_cur = (std::__detail::_Node_iterator_base<unsigned int,false>::__node_type *)std::unordered_map<unsigned int,unsigned int>::begin(&this->last_dungeon_settle_map_)._M_cur;
  __for_end = (std::pair<unsigned int const,int>)std::unordered_map<unsigned int,unsigned int>::end(__for_range_1)._M_cur;
  while ( std::__detail::operator!=<std::pair<unsigned int const,unsigned int>,false>(
            (const std::__detail::_Node_iterator_base<std::pair<unsigned int const,unsigned int>,false> *)&__for_begin,
            (const std::__detail::_Node_iterator_base<std::pair<unsigned int const,unsigned int>,false> *)&__for_end) )
  {
    v53 = std::__detail::_Node_iterator<std::pair<unsigned int const,unsigned int>,false,false>::operator*((const std::__detail::_Node_iterator<std::pair<unsigned int const,unsigned int>,false,false> *const)&__for_begin);
    dungeon_id = std::get<0ul,unsigned int const,unsigned int>(v53);
    v10 = (std::tuple_element<1,const std::pair<unsigned int const,unsigned int> >::type *)std::get<1ul,unsigned int const,unsigned int>(v53);
    result = v10;
    if ( *(_BYTE *)(((unsigned __int64)v10 >> 3) + 0x7FFF8000) != 0
      && (char)(((unsigned __int8)v10 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)v10 >> 3) + 0x7FFF8000) )
    {
      __asan_report_load4(v10);
    }
    v11 = *result;
    v15 = dungeon_id;
    v12 = google::protobuf::Map<unsigned int,unsigned int>::operator[](dungeon_settle_bin, dungeon_id);
    v13 = v12;
    v14 = *(_BYTE *)(((unsigned __int64)v12 >> 3) + 0x7FFF8000);
    LOBYTE(v15) = v14 != 0;
    v16 = (v14 != 0) & (unsigned __int8)((char)(((unsigned __int8)v12 & 7) + 3) >= v14);
    if ( (_BYTE)v16 )
      __asan_report_store4(v12, v15, v12, v16);
    *v13 = v11;
    std::__detail::_Node_iterator<std::pair<unsigned int const,unsigned int>,false,false>::operator++((std::__detail::_Node_iterator<std::pair<unsigned int const,unsigned int>,false,false> *const)&__for_begin);
  }
  __for_range_2 = &this->chapter_map_;
  __for_begin._M_cur = (std::__detail::_Node_iterator_base<unsigned int,false>::__node_type *)std::map<unsigned int,Chapter>::begin(&this->chapter_map_)._M_node;
  __for_end = (std::pair<unsigned int const,int>)std::map<unsigned int,Chapter>::end(__for_range_2)._M_node;
  while ( std::operator!=(
            (const std::_Rb_tree_iterator<std::pair<unsigned int const,Chapter> >::_Self *)&__for_begin,
            (const std::_Rb_tree_iterator<std::pair<unsigned int const,Chapter> >::_Self *)&__for_end) )
  {
    v49 = std::_Rb_tree_iterator<std::pair<unsigned int const,Chapter>>::operator*((const std::_Rb_tree_iterator<std::pair<unsigned int const,Chapter> > *const)&__for_begin);
    _ = std::get<0ul,unsigned int const,Chapter>(v49);
    chapter = (std::tuple_element<1,const std::pair<unsigned int const,Chapter> >::type *)std::get<1ul,unsigned int const,Chapter>(v49);
    v17 = proto::PlayerQuestCompBin::mutable_chapter_bin(proto_comp);
    bin_ptr = proto::PlayerChapterBin::add_chapter_list(v17);
    Chapter::toBin(chapter, bin_ptr);
    std::_Rb_tree_iterator<std::pair<unsigned int const,Chapter>>::operator++((std::_Rb_tree_iterator<std::pair<unsigned int const,Chapter> > *const)&__for_begin);
  }
  __for_range_3 = &this->quest_global_var_map_;
  __for_end_0._M_node = (std::_Rb_tree_iterator<std::pair<unsigned int const,std::set<unsigned int> > >::_Base_ptr)std::unordered_map<unsigned int,int>::begin(&this->quest_global_var_map_)._M_cur;
  __for_begin._M_cur = (std::__detail::_Node_iterator_base<unsigned int,false>::__node_type *)std::unordered_map<unsigned int,int>::end(__for_range_3)._M_cur;
  while ( std::__detail::operator!=<std::pair<unsigned int const,int>,false>(
            (const std::__detail::_Node_iterator_base<std::pair<unsigned int const,int>,false> *)&__for_end_0,
            (const std::__detail::_Node_iterator_base<std::pair<unsigned int const,int>,false> *)&__for_begin) )
  {
    v18 = std::__detail::_Node_iterator<std::pair<unsigned int const,int>,false,false>::operator*((const std::__detail::_Node_iterator<std::pair<unsigned int const,int>,false,false> *const)&__for_end_0);
    v19 = v18;
    if ( ((unsigned __int8)v18 & 7) >= *(_BYTE *)(((unsigned __int64)v18 >> 3) + 0x7FFF8000)
      && *(_BYTE *)(((unsigned __int64)v18 >> 3) + 0x7FFF8000) != 0
      || *(_BYTE *)((((unsigned __int64)&v18->second + 3) >> 3) + 0x7FFF8000) != 0
      && (((unsigned __int8)v18 + 7) & 7) >= *(_BYTE *)((((unsigned __int64)&v18->second + 3) >> 3) + 0x7FFF8000) )
    {
      __asan_report_load_n(v18, 8LL);
    }
    __for_end = *v19;
    key = std::get<0ul,unsigned int const,int>(&__for_end);
    value = std::get<1ul,unsigned int const,int>(&__for_end);
    bin = proto::PlayerQuestCompBin::add_quest_global_var_list(proto_comp);
    if ( *(_BYTE *)(((unsigned __int64)key >> 3) + 0x7FFF8000) != 0
      && (char)(((unsigned __int8)key & 7) + 3) >= *(_BYTE *)(((unsigned __int64)key >> 3) + 0x7FFF8000) )
    {
      __asan_report_load4(key);
    }
    proto::QuestGlobalVarBin::set_key(bin, *key);
    if ( *(_BYTE *)(((unsigned __int64)value >> 3) + 0x7FFF8000) != 0
      && (char)(((unsigned __int8)value & 7) + 3) >= *(_BYTE *)(((unsigned __int64)value >> 3) + 0x7FFF8000) )
    {
      __asan_report_load4(value);
    }
    proto::QuestGlobalVarBin::set_value(bin, *value);
    std::__detail::_Node_iterator<std::pair<unsigned int const,int>,false,false>::operator++((std::__detail::_Node_iterator<std::pair<unsigned int const,int>,false,false> *const)&__for_end_0);
  }
  __for_range_4 = &this->pre_open_chapter_id_set_;
  __for_begin._M_cur = std::unordered_set<unsigned int>::begin(&this->pre_open_chapter_id_set_)._M_cur;
  __for_end = (std::pair<unsigned int const,int>)std::unordered_set<unsigned int>::end(__for_range_4)._M_cur;
  while ( std::__detail::operator!=<unsigned int,false>(
            &__for_begin,
            (const std::__detail::_Node_iterator_base<unsigned int,false> *)&__for_end) )
  {
    v20 = (unsigned int *)std::__detail::_Node_iterator<unsigned int,true,false>::operator*(&__for_begin);
    v21 = v20;
    if ( *(_BYTE *)(((unsigned __int64)v20 >> 3) + 0x7FFF8000) != 0
      && (char)(((unsigned __int8)v20 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)v20 >> 3) + 0x7FFF8000) )
    {
      __asan_report_load4(v20);
    }
    id = *v21;
    proto::PlayerQuestCompBin::add_pre_open_chapter_id_list(proto_comp, id);
    std::__detail::_Node_iterator<unsigned int,true,false>::operator++(&__for_begin);
  }
  __for_range_5 = &this->wq_parent_quest_linked_group_map_;
  __for_begin_1._M_node = std::map<unsigned int,std::set<unsigned int>>::begin(&this->wq_parent_quest_linked_group_map_)._M_node;
  __for_end_0._M_node = std::map<unsigned int,std::set<unsigned int>>::end(__for_range_5)._M_node;
  while ( std::operator!=(&__for_begin_1, &__for_end_0) )
  {
    v41 = std::_Rb_tree_iterator<std::pair<unsigned int const,std::set<unsigned int>>>::operator*(&__for_begin_1);
    parent_quest_id_0 = std::get<0ul,unsigned int const,std::set<unsigned int>>(v41);
    linked_group_set = (std::tuple_element<1,const std::pair<unsigned int const,std::set<unsigned int> > >::type *)std::get<1ul,unsigned int const,std::set<unsigned int>>(v41);
    world_quest_bin = proto::PlayerQuestCompBin::add_world_quest_bin_list(proto_comp);
    if ( *(_BYTE *)(((unsigned __int64)parent_quest_id_0 >> 3) + 0x7FFF8000) != 0
      && (char)(((unsigned __int8)parent_quest_id_0 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)parent_quest_id_0 >> 3)
                                                                          + 0x7FFF8000) )
    {
      __asan_report_load4(parent_quest_id_0);
    }
    proto::WorldQuestBin::set_parent_quest_id(world_quest_bin, *parent_quest_id_0);
    __for_range_6 = linked_group_set;
    __for_begin._M_cur = (std::__detail::_Node_iterator_base<unsigned int,false>::__node_type *)std::set<unsigned int>::begin(linked_group_set)._M_node;
    __for_end = (std::pair<unsigned int const,int>)std::set<unsigned int>::end(__for_range_6)._M_node;
    while ( std::operator!=(
              (const std::_Rb_tree_const_iterator<unsigned int>::_Self *)&__for_begin,
              (const std::_Rb_tree_const_iterator<unsigned int>::_Self *)&__for_end) )
    {
      v22 = (unsigned int *)std::_Rb_tree_const_iterator<unsigned int>::operator*((const std::_Rb_tree_const_iterator<unsigned int> *const)&__for_begin);
      v23 = v22;
      if ( *(_BYTE *)(((unsigned __int64)v22 >> 3) + 0x7FFF8000) != 0
        && (char)(((unsigned __int8)v22 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)v22 >> 3) + 0x7FFF8000) )
      {
        __asan_report_load4(v22);
      }
      group_id = *v23;
      proto::WorldQuestBin::add_linked_flow_group_list(world_quest_bin, group_id);
      std::_Rb_tree_const_iterator<unsigned int>::operator++((std::_Rb_tree_const_iterator<unsigned int> *const)&__for_begin);
    }
    std::_Rb_tree_iterator<std::pair<unsigned int const,std::set<unsigned int>>>::operator++(&__for_begin_1);
  }
  return 0;
};

// Line 392: range 0000000013DCD734-0000000013DCD752
int32_t __cdecl PlayerQuestComp::init(PlayerQuestComp *const this)
{
  PlayerQuestComp::initEventObservers(this);
  return 0;
};

// Line 401: range 0000000013DCD754-0000000013DCDF1D
int32_t __cdecl PlayerQuestComp::onLogin(PlayerQuestComp *const this, bool is_new_player)
{
  unsigned __int64 v2; // r13
  __int64 v3; // rax
  _DWORD *v4; // r12
  PlayerDungeonComp *DungeonComp; // rax
  std::unordered_map<unsigned int,unsigned int>::mapped_type *v6; // rax
  _DWORD *v7; // rdx
  char v8; // cl
  char *v9; // rsi
  __int64 v10; // rcx
  char v11; // r14
  std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v12; // rax
  uint32_t ProficientPlayerQuestId; // edx
  bool v14; // r15
  std::__shared_ptr<TracingMgr,(__gnu_cxx::_Lock_policy)2>::element_type *v15; // rax
  PlayerBasicComp *BasicComp; // rax
  uint32_t v18; // eax
  uint32_t v19; // eax
  std::__shared_ptr_access<Gadget,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v20; // rax
  common::milog::MiLogStream *v21; // r14
  common::milog::MiLogStream *v22; // rax
  int32_t result; // eax
  unsigned int val; // [rsp+2Ch] [rbp-F4h] BYREF
  common::milog::MiLogStream v25; // [rsp+30h] [rbp-F0h] BYREF
  char v26[208]; // [rsp+50h] [rbp-D0h] BYREF

  v2 = (unsigned __int64)v26;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_2(160LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "4 48 4 14 dungeon_id:403 64 16 13 scene_ptr:423 96 16 13 group_ptr:426 128 16 14 gadget_ptr:429";
  *(_QWORD *)(v2 + 16) = PlayerQuestComp::onLogin;
  v4 = (_DWORD *)(v2 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = -234556943;
  v4[536862722] = -219021312;
  v4[536862723] = -219021312;
  v4[536862724] = -202178560;
  if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
    __asan_report_load8(&this->player_);
  DungeonComp = Player::getDungeonComp(this->player_);
  *(_DWORD *)(v2 + 48) = PlayerDungeonComp::getLastUnsettledDungeonId(DungeonComp);
  if ( *(_DWORD *)(v2 + 48) )
  {
    v9 = (char *)(v2 + 48);
    v6 = std::unordered_map<unsigned int,unsigned int>::operator[](
           &this->last_dungeon_settle_map_,
           (const std::unordered_map<unsigned int,unsigned int>::key_type *)(v2 + 48));
    v7 = v6;
    v8 = *(_BYTE *)(((unsigned __int64)v6 >> 3) + 0x7FFF8000);
    LOBYTE(v9) = v8 != 0;
    v10 = (v8 != 0) & (unsigned __int8)((char)(((unsigned __int8)v6 & 7) + 3) >= v8);
    if ( (_BYTE)v10 )
      __asan_report_store4(v6, v9, v6, v10);
    *v7 = 2;
  }
  PlayerQuestComp::refreshQuestComp(this, 0);
  v11 = 0;
  if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
    __asan_report_load8(&this->player_);
  v14 = 0;
  if ( !Player::getIsJsonDataProficient(this->player_) )
  {
    ServiceBox::findService<GameserverService>();
    GameserverService::getConfig((GameserverService *const)(v2 + 128));
    v11 = 1;
    v12 = std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 128));
    ProficientPlayerQuestId = ConstValueExcelConfigMgr::getProficientPlayerQuestId(&v12->design_config.txt_config_mgr.const_value_config_mgr);
    if ( PlayerQuestComp::getQuestState(this, ProficientPlayerQuestId) == QUEST_STATE_FINISHED )
      v14 = 1;
  }
  if ( v11 )
    std::shared_ptr<Config>::~shared_ptr((std::shared_ptr<Config> *const)(v2 + 128));
  if ( v14 )
  {
    opentracing::v3::string_view::string_view((opentracing::v3::string_view *const)(v2 + 128), "ProficientQuestSave");
    v15 = std::__shared_ptr<TracingMgr,(__gnu_cxx::_Lock_policy)2>::get(&ResourceBox::tracing_mgr_ptr);
    PerfSpanProxy::PerfSpanProxy((PerfSpanProxy *const)(v2 + 96), v15, *(opentracing::v3::string_view *)(v2 + 128));
    if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
      __asan_report_load8(&this->player_);
    BasicComp = Player::getBasicComp(this->player_);
    PlayerBasicComp::setIsProficientPlayer(BasicComp, 1);
    if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
      __asan_report_load8(&this->player_);
    Player::savePlayerDataToDB(this->player_);
    PerfSpanProxy::~PerfSpanProxy((PerfSpanProxy *const)(v2 + 96));
  }
  if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
    __asan_report_load8(&this->player_);
  if ( !Player::isRelogin(this->player_) && PlayerQuestComp::getQuestState(this, 0x9793u) == QUEST_STATE_FINISHED )
  {
    if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
      __asan_report_load8(&this->player_);
    Player::getSceneComp(this->player_);
    PlayerSceneComp::getMainWorldScene((PlayerSceneComp *const)(v2 + 128));
    std::shared_ptr<Scene>::shared_ptr<PlayerWorldScene,void>(
      (std::shared_ptr<Scene> *const)(v2 + 64),
      (std::shared_ptr<PlayerWorldScene> *)(v2 + 128));
    std::shared_ptr<PlayerWorldScene>::~shared_ptr((std::shared_ptr<PlayerWorldScene> *const)(v2 + 128));
    if ( std::operator!=<Scene>((const std::shared_ptr<Scene> *)(v2 + 64), 0LL) )
    {
      v18 = (unsigned int)std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 64));
      Scene::findGroup((Scene *const)(v2 + 96), v18);
      if ( std::operator!=<Group>((const std::shared_ptr<Group> *)(v2 + 96), 0LL) )
      {
        v19 = (unsigned int)std::__shared_ptr_access<Group,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Group,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 96));
        Group::findEntityByConfigId<Gadget>((Group *const)(v2 + 128), v19);
        if ( std::operator!=<Gadget>((const std::shared_ptr<Gadget> *)(v2 + 128), 0LL) )
        {
          v20 = std::__shared_ptr_access<Gadget,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Gadget,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 128));
          Creature::subCurHpToZero(v20, CHANGE_HP_SUB_SCRIPT, 1);
          common::milog::MiLogStream::create(
            &v25,
            &common::milog::MiLogDefault::default_log_obj_,
            2u,
            "./src/player/quest/player_quest_comp.cpp",
            "onLogin",
            433);
          v21 = common::milog::MiLogStream::operator<<<char [5],(char *[5])0>(&v25, (const char (*)[5])"uid:");
          if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
            __asan_report_load8(&this->player_);
          val = Player::getUid(this->player_);
          v22 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v21, &val);
          common::milog::MiLogStream::operator<<<char [20],(char *[20])0>(
            v22,
            (const char (*)[20])" kill 133007001-191");
          common::milog::MiLogStream::~MiLogStream(&v25);
        }
        std::shared_ptr<Gadget>::~shared_ptr((std::shared_ptr<Gadget> *const)(v2 + 128));
      }
      else
      {
        common::milog::MiLogStream::create(
          &v25,
          &common::milog::MiLogDefault::default_log_obj_,
          3u,
          "./src/player/quest/player_quest_comp.cpp",
          "onLogin",
          438);
        common::milog::MiLogStream::operator<<<char [26],(char *[26])0>(
          &v25,
          (const char (*)[26])"findGroup 133007001 fails");
        common::milog::MiLogStream::~MiLogStream(&v25);
      }
      std::shared_ptr<Group>::~shared_ptr((std::shared_ptr<Group> *const)(v2 + 96));
    }
    else
    {
      common::milog::MiLogStream::create(
        &v25,
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/player/quest/player_quest_comp.cpp",
        "onLogin",
        443);
      common::milog::MiLogStream::operator<<<char [24],(char *[24])0>(
        &v25,
        (const char (*)[24])"getMainWorldScene fails");
      common::milog::MiLogStream::~MiLogStream(&v25);
    }
    std::shared_ptr<Scene>::~shared_ptr((std::shared_ptr<Scene> *const)(v2 + 64));
  }
  if ( *(char *)(((unsigned __int64)&this->is_any_parent_quest_has_time_var_when_login >> 3) + 0x7FFF8000) < 0 )
    __asan_report_load1(&this->is_any_parent_quest_has_time_var_when_login);
  if ( this->is_any_parent_quest_has_time_var_when_login )
    PlayerQuestComp::tryStartCheckQuestTimeVarTimer(this);
  PlayerQuestComp::tryStartLeaveSceneRangeCheckTimer(this);
  result = 0;
  if ( v26 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8010) = 0;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8010) = -168430091;
  }
  return result;
};

// Line 459: range 0000000013DCDF1E-0000000013DCDF3C
int32_t __cdecl PlayerQuestComp::onLogout(PlayerQuestComp *const this)
{
  PlayerQuestComp::flushQuestGroupAction(this);
  return 0;
};

// Line 465: range 0000000013DCDF3E-0000000013DCE0D6
bool __fastcall PlayerQuestComp::isLastDungeonFinished(const PlayerQuestComp *const this, uint32_t dungeon_id)
{
  unsigned __int64 v2; // rbx
  __int64 v3; // rax
  _DWORD *v4; // r12
  std::__detail::_Node_const_iterator<std::pair<unsigned int const,unsigned int>,false,false>::pointer v5; // rdx
  unsigned int *p_second; // rax
  bool result; // al
  std::__detail::_Node_iterator_base<std::pair<unsigned int const,unsigned int>,false> __y; // [rsp+18h] [rbp-88h] BYREF
  char v9[128]; // [rsp+20h] [rbp-80h] BYREF

  v2 = (unsigned __int64)v9;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_1(96LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "2 48 4 14 dungeon_id:464 64 8 8 iter:466";
  *(_QWORD *)(v2 + 16) = PlayerQuestComp::isLastDungeonFinished;
  v4 = (_DWORD *)(v2 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = -234556943;
  v4[536862722] = -202116352;
  *(_DWORD *)(v2 + 48) = dungeon_id;
  *(std::unordered_map<unsigned int,unsigned int>::const_iterator *)(v2 + 64) = std::unordered_map<unsigned int,unsigned int>::find(
                                                                                  &this->last_dungeon_settle_map_,
                                                                                  (const std::unordered_map<unsigned int,unsigned int>::key_type *)(v2 + 48));
  __y._M_cur = std::unordered_map<unsigned int,unsigned int>::end(&this->last_dungeon_settle_map_)._M_cur;
  if ( std::__detail::operator!=<std::pair<unsigned int const,unsigned int>,false>(
         (const std::__detail::_Node_iterator_base<std::pair<unsigned int const,unsigned int>,false> *)(v2 + 64),
         &__y) )
  {
    v5 = std::__detail::_Node_const_iterator<std::pair<unsigned int const,unsigned int>,false,false>::operator->((const std::__detail::_Node_const_iterator<std::pair<unsigned int const,unsigned int>,false,false> *const)(v2 + 64));
    p_second = &v5->second;
    if ( *(_BYTE *)(((unsigned __int64)p_second >> 3) + 0x7FFF8000) != 0
      && (char)(((unsigned __int8)p_second & 7) + 3) >= *(_BYTE *)(((unsigned __int64)p_second >> 3) + 0x7FFF8000) )
    {
      __asan_report_load4(p_second);
    }
    result = v5->second == 1;
  }
  else
  {
    result = 0;
  }
  if ( v9 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8008) = 0;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8008) = -168430091;
  }
  return result;
};

// Line 475: range 0000000013DCE0D8-0000000013DCE270
bool __fastcall PlayerQuestComp::isLastDungeonFailed(const PlayerQuestComp *const this, uint32_t dungeon_id)
{
  unsigned __int64 v2; // rbx
  __int64 v3; // rax
  _DWORD *v4; // r12
  std::__detail::_Node_const_iterator<std::pair<unsigned int const,unsigned int>,false,false>::pointer v5; // rdx
  unsigned int *p_second; // rax
  bool result; // al
  std::__detail::_Node_iterator_base<std::pair<unsigned int const,unsigned int>,false> __y; // [rsp+18h] [rbp-88h] BYREF
  char v9[128]; // [rsp+20h] [rbp-80h] BYREF

  v2 = (unsigned __int64)v9;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_1(96LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "2 48 4 14 dungeon_id:474 64 8 8 iter:476";
  *(_QWORD *)(v2 + 16) = PlayerQuestComp::isLastDungeonFailed;
  v4 = (_DWORD *)(v2 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = -234556943;
  v4[536862722] = -202116352;
  *(_DWORD *)(v2 + 48) = dungeon_id;
  *(std::unordered_map<unsigned int,unsigned int>::const_iterator *)(v2 + 64) = std::unordered_map<unsigned int,unsigned int>::find(
                                                                                  &this->last_dungeon_settle_map_,
                                                                                  (const std::unordered_map<unsigned int,unsigned int>::key_type *)(v2 + 48));
  __y._M_cur = std::unordered_map<unsigned int,unsigned int>::end(&this->last_dungeon_settle_map_)._M_cur;
  if ( std::__detail::operator!=<std::pair<unsigned int const,unsigned int>,false>(
         (const std::__detail::_Node_iterator_base<std::pair<unsigned int const,unsigned int>,false> *)(v2 + 64),
         &__y) )
  {
    v5 = std::__detail::_Node_const_iterator<std::pair<unsigned int const,unsigned int>,false,false>::operator->((const std::__detail::_Node_const_iterator<std::pair<unsigned int const,unsigned int>,false,false> *const)(v2 + 64));
    p_second = &v5->second;
    if ( *(_BYTE *)(((unsigned __int64)p_second >> 3) + 0x7FFF8000) != 0
      && (char)(((unsigned __int8)p_second & 7) + 3) >= *(_BYTE *)(((unsigned __int64)p_second >> 3) + 0x7FFF8000) )
    {
      __asan_report_load4(p_second);
    }
    result = v5->second == 2;
  }
  else
  {
    result = 0;
  }
  if ( v9 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8008) = 0;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8008) = -168430091;
  }
  return result;
};

// Line 488: range 0000000013DCE272-0000000013DCE6EB
std::pair<int,std::vector<unsigned int> > *__cdecl PlayerQuestComp::checkMpModeAvailability(
        std::pair<int,std::vector<unsigned int> > *retstr,
        const PlayerQuestComp *const this)
{
  unsigned __int64 v2; // r12
  __int64 v3; // rax
  _DWORD *v4; // r13
  std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v5; // rdx
  bool *p_is_gm_talk_open; // rax
  PlayerGmComp *GmComp; // rax
  char v8; // r15
  std::_Rb_tree_const_iterator<unsigned int>::_Base_ptr M_node; // r14
  std::set<unsigned int>::iterator v10; // rax
  std::allocator<unsigned int> __a; // [rsp+2Bh] [rbp-C5h] BYREF
  proto::Retcode __x; // [rsp+2Ch] [rbp-C4h] BYREF
  std::shared_ptr<Config> v14; // [rsp+30h] [rbp-C0h] BYREF
  std::pair<proto::Retcode,std::vector<unsigned int> > __p; // [rsp+40h] [rbp-B0h] BYREF
  char v16[144]; // [rsp+60h] [rbp-90h] BYREF

  v2 = (unsigned __int64)v16;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_1(96LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "1 32 24 13 param_vec:498";
  *(_QWORD *)(v2 + 16) = PlayerQuestComp::checkMpModeAvailability;
  v4 = (_DWORD *)(v2 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = -218103808;
  v4[536862722] = -202116109;
  ServiceBox::findService<GameserverService>();
  GameserverService::getConfig((GameserverService *const)&v14);
  v5 = std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false> *const)&v14);
  p_is_gm_talk_open = &v5->is_gm_talk_open;
  if ( *(_BYTE *)(((unsigned __int64)p_is_gm_talk_open >> 3) + 0x7FFF8000) != 0
    && ((unsigned __int8)p_is_gm_talk_open & 7) >= *(_BYTE *)(((unsigned __int64)p_is_gm_talk_open >> 3) + 0x7FFF8000) )
  {
    __asan_report_load1(p_is_gm_talk_open);
  }
  if ( !v5->is_gm_talk_open )
    goto LABEL_11;
  if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
    __asan_report_load8(&this->player_);
  GmComp = Player::getGmComp(this->player_);
  if ( PlayerGmComp::getGmSetValue<bool>(GmComp, 0xCu) )
    v8 = 1;
  else
LABEL_11:
    v8 = 0;
  std::shared_ptr<Config>::~shared_ptr(&v14);
  if ( v8 || std::set<unsigned int>::empty(&this->mp_block_quest_set_) )
  {
    *(_QWORD *)(v2 + 32) = 0LL;
    *(_QWORD *)(v2 + 40) = 0LL;
    *(_QWORD *)(v2 + 48) = 0LL;
    std::vector<unsigned int>::vector((std::vector<unsigned int> *const)(v2 + 32));
    __x = RET_SUCC;
    std::make_pair<proto::Retcode,std::vector<unsigned int>>(&__p, &__x, (std::vector<unsigned int> *)(v2 + 32));
    std::pair<int,std::vector<unsigned int>>::pair<proto::Retcode,std::vector<unsigned int>,true>(retstr, &__p);
    std::pair<proto::Retcode,std::vector<unsigned int>>::~pair(&__p);
    std::vector<unsigned int>::~vector((std::vector<unsigned int> *const)(v2 + 32));
  }
  else
  {
    std::allocator<unsigned int>::allocator(&__a);
    M_node = std::set<unsigned int>::end(&this->mp_block_quest_set_)._M_node;
    v10._M_node = std::set<unsigned int>::begin(&this->mp_block_quest_set_)._M_node;
    std::vector<unsigned int>::vector<std::_Rb_tree_const_iterator<unsigned int>,void>(
      (std::vector<unsigned int> *const)(v2 + 32),
      v10,
      (std::_Rb_tree_const_iterator<unsigned int>)M_node,
      &__a);
    std::allocator<unsigned int>::~allocator(&__a);
    __x = RET_MP_QUEST_BLOCK_MP;
    std::make_pair<proto::Retcode,std::vector<unsigned int> &>(&__p, &__x, (std::vector<unsigned int> *)(v2 + 32));
    std::pair<int,std::vector<unsigned int>>::pair<proto::Retcode,std::vector<unsigned int>,true>(retstr, &__p);
    std::pair<proto::Retcode,std::vector<unsigned int>>::~pair(&__p);
    std::vector<unsigned int>::~vector((std::vector<unsigned int> *const)(v2 + 32));
  }
  if ( v16 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8008) = 0;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8008) = -168430091;
  }
  return retstr;
};

// Line 503: range 0000000013DCE6EC-0000000013DCE9A1
std::pair<int,std::vector<unsigned int> > *__cdecl PlayerQuestComp::checkHomeAvailability(
        std::pair<int,std::vector<unsigned int> > *retstr,
        const PlayerQuestComp *const this)
{
  unsigned __int64 v2; // rbx
  __int64 v3; // rax
  _DWORD *v4; // r13
  std::_Rb_tree_const_iterator<unsigned int>::_Base_ptr M_node; // r14
  std::set<unsigned int>::iterator v6; // rax
  std::allocator<unsigned int> __a; // [rsp+1Bh] [rbp-B5h] BYREF
  proto::Retcode __x; // [rsp+1Ch] [rbp-B4h] BYREF
  std::pair<proto::Retcode,std::vector<unsigned int> > __p; // [rsp+20h] [rbp-B0h] BYREF
  char v11[144]; // [rsp+40h] [rbp-90h] BYREF

  v2 = (unsigned __int64)v11;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_1(96LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "1 32 24 13 param_vec:508";
  *(_QWORD *)(v2 + 16) = PlayerQuestComp::checkHomeAvailability;
  v4 = (_DWORD *)(v2 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = -218103808;
  v4[536862722] = -202116109;
  if ( std::set<unsigned int>::empty(&this->mp_block_quest_set_) )
  {
    *(_QWORD *)(v2 + 32) = 0LL;
    *(_QWORD *)(v2 + 40) = 0LL;
    *(_QWORD *)(v2 + 48) = 0LL;
    std::vector<unsigned int>::vector((std::vector<unsigned int> *const)(v2 + 32));
    __x = RET_SUCC;
    std::make_pair<proto::Retcode,std::vector<unsigned int>>(&__p, &__x, (std::vector<unsigned int> *)(v2 + 32));
    std::pair<int,std::vector<unsigned int>>::pair<proto::Retcode,std::vector<unsigned int>,true>(retstr, &__p);
    std::pair<proto::Retcode,std::vector<unsigned int>>::~pair(&__p);
    std::vector<unsigned int>::~vector((std::vector<unsigned int> *const)(v2 + 32));
  }
  else
  {
    std::allocator<unsigned int>::allocator(&__a);
    M_node = std::set<unsigned int>::end(&this->mp_block_quest_set_)._M_node;
    v6._M_node = std::set<unsigned int>::begin(&this->mp_block_quest_set_)._M_node;
    std::vector<unsigned int>::vector<std::_Rb_tree_const_iterator<unsigned int>,void>(
      (std::vector<unsigned int> *const)(v2 + 32),
      v6,
      (std::_Rb_tree_const_iterator<unsigned int>)M_node,
      &__a);
    std::allocator<unsigned int>::~allocator(&__a);
    __x = RET_HOME_QUEST_BLOCK_HOME;
    std::make_pair<proto::Retcode,std::vector<unsigned int> &>(&__p, &__x, (std::vector<unsigned int> *)(v2 + 32));
    std::pair<int,std::vector<unsigned int>>::pair<proto::Retcode,std::vector<unsigned int>,true>(retstr, &__p);
    std::pair<proto::Retcode,std::vector<unsigned int>>::~pair(&__p);
    std::vector<unsigned int>::~vector((std::vector<unsigned int> *const)(v2 + 32));
  }
  if ( v11 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8008) = 0;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8008) = -168430091;
  }
  return retstr;
};

// Line 516: range 0000000013DCE9A2-0000000013DD112C
void __cdecl PlayerQuestComp::initEventObservers(PlayerQuestComp *const this)
{
  unsigned __int64 p_M_element_count; // r13
  __int64 v2; // rax
  common::milog::MiLogStream *v3; // rbx
  _DWORD *v4; // [rsp+3C0h] [rbp-490h]
  unsigned int val; // [rsp+3D4h] [rbp-47Ch] BYREF
  PlayerEventComp *event_comp; // [rsp+3D8h] [rbp-478h]
  PlayerEventComp v7; // [rsp+3E0h] [rbp-470h] BYREF
  PlayerEventComp v8; // [rsp+4B0h] [rbp-3A0h] BYREF
  PlayerEventComp v9; // [rsp+580h] [rbp-2D0h] BYREF
  PlayerEventComp v10; // [rsp+650h] [rbp-200h] BYREF
  PlayerEventComp v11; // [rsp+720h] [rbp-130h] BYREF

  p_M_element_count = (unsigned __int64)&v11.event_center_.observer_list_map_._M_h._M_element_count;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_1(96LL);
    if ( v2 )
      p_M_element_count = v2;
  }
  *(_QWORD *)p_M_element_count = 1102416563LL;
  *(_QWORD *)(p_M_element_count + 8) = "2 32 16 12 this_ptr:519 64 16 12 this_wtr:525";
  *(_QWORD *)(p_M_element_count + 16) = PlayerQuestComp::initEventObservers;
  v4 = (_DWORD *)(p_M_element_count >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = -219021312;
  v4[536862722] = -202178560;
  common::milog::MiLogStream::create(
    (common::milog::MiLogStream *)&v11.event_center_.context_.event_center_,
    &common::milog::MiLogDefault::default_log_obj_,
    1u,
    "./src/player/quest/player_quest_comp.cpp",
    "initEventObservers",
    517);
  v3 = common::milog::MiLogStream::operator<<<char [18],(char *[18])0>(
         (common::milog::MiLogStream *const)&v11.event_center_.context_.event_center_,
         (const char (*)[18])"initObservers....");
  if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
    __asan_report_load8(&this->player_);
  val = Player::getUid(this->player_);
  common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v3, &val);
  common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)&v11.event_center_.context_.event_center_);
  toThisPtr<PlayerQuestComp>((PlayerQuestComp *)(p_M_element_count + 32));
  if ( std::operator==<PlayerQuestComp>(0LL, (const std::shared_ptr<PlayerQuestComp> *)(p_M_element_count + 32)) )
  {
    common::milog::MiLogStream::create(
      (common::milog::MiLogStream *)&v11.event_center_.context_.event_center_,
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/player/quest/player_quest_comp.cpp",
      "initEventObservers",
      522);
    common::milog::MiLogStream::operator<<<char [47],(char *[47])0>(
      (common::milog::MiLogStream *const)&v11.event_center_.context_.event_center_,
      (const char (*)[47])"dynamic_pointer_cast to PlayerQuestComp failed");
    common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)&v11.event_center_.context_.event_center_);
  }
  else
  {
    std::weak_ptr<PlayerQuestComp>::weak_ptr<PlayerQuestComp,void>(
      (std::weak_ptr<PlayerQuestComp> *const)(p_M_element_count + 64),
      (const std::shared_ptr<PlayerQuestComp> *)(p_M_element_count + 32));
    if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
      __asan_report_load8(&this->player_);
    event_comp = Player::getEventComp(this->player_);
    std::weak_ptr<PlayerQuestComp>::weak_ptr(
      (std::weak_ptr<PlayerQuestComp> *const)&v11.event_center_.context_.pending_que_.c._M_impl._M_finish._M_last,
      (const std::weak_ptr<PlayerQuestComp> *)(p_M_element_count + 64));
    PlayerEventComp::registerObserver<PlayerQuestComp,KillMonsterEvent>(
      &v7,
      (std::weak_ptr<PlayerQuestComp> *)event_comp,
      (void (*)(PlayerQuestComp *, const KillMonsterEvent *))&v11.event_center_.context_.pending_que_.c._M_impl._M_finish._M_last);
    std::weak_ptr<Observer>::~weak_ptr((std::weak_ptr<Observer> *const)&v7);
    std::weak_ptr<PlayerQuestComp>::~weak_ptr((std::weak_ptr<PlayerQuestComp> *const)&v11.event_center_.context_.pending_que_.c._M_impl._M_finish._M_last);
    std::weak_ptr<PlayerQuestComp>::weak_ptr(
      (std::weak_ptr<PlayerQuestComp> *const)&v11.event_center_.context_.pending_que_.c._M_impl._M_finish._M_last,
      (const std::weak_ptr<PlayerQuestComp> *)(p_M_element_count + 64));
    PlayerEventComp::registerObserver<PlayerQuestComp,CompleteTalkEvent>(
      (PlayerEventComp *const)&v7._M_weak_this._M_refcount,
      (std::weak_ptr<PlayerQuestComp> *)event_comp,
      (void (*)(PlayerQuestComp *, const CompleteTalkEvent *))&v11.event_center_.context_.pending_que_.c._M_impl._M_finish._M_last);
    std::weak_ptr<Observer>::~weak_ptr((std::weak_ptr<Observer> *const)&v7._M_weak_this._M_refcount);
    std::weak_ptr<PlayerQuestComp>::~weak_ptr((std::weak_ptr<PlayerQuestComp> *const)&v11.event_center_.context_.pending_que_.c._M_impl._M_finish._M_last);
    std::weak_ptr<PlayerQuestComp>::weak_ptr(
      (std::weak_ptr<PlayerQuestComp> *const)&v11.event_center_.context_.pending_que_.c._M_impl._M_finish._M_last,
      (const std::weak_ptr<PlayerQuestComp> *)(p_M_element_count + 64));
    PlayerEventComp::registerObserver<PlayerQuestComp,MonsterDieEvent>(
      (PlayerEventComp *const)&v7.event_center_,
      (std::weak_ptr<PlayerQuestComp> *)event_comp,
      (void (*)(PlayerQuestComp *, const MonsterDieEvent *))&v11.event_center_.context_.pending_que_.c._M_impl._M_finish._M_last);
    std::weak_ptr<Observer>::~weak_ptr((std::weak_ptr<Observer> *const)&v7.event_center_);
    std::weak_ptr<PlayerQuestComp>::~weak_ptr((std::weak_ptr<PlayerQuestComp> *const)&v11.event_center_.context_.pending_que_.c._M_impl._M_finish._M_last);
    std::weak_ptr<PlayerQuestComp>::weak_ptr(
      (std::weak_ptr<PlayerQuestComp> *const)&v11.event_center_.context_.pending_que_.c._M_impl._M_finish._M_last,
      (const std::weak_ptr<PlayerQuestComp> *)(p_M_element_count + 64));
    PlayerEventComp::registerObserver<PlayerQuestComp,ObtainItemEvent>(
      (PlayerEventComp *const)&v7.event_center_.context_.pending_que_,
      (std::weak_ptr<PlayerQuestComp> *)event_comp,
      (void (*)(PlayerQuestComp *, const ObtainItemEvent *))&v11.event_center_.context_.pending_que_.c._M_impl._M_finish._M_last);
    std::weak_ptr<Observer>::~weak_ptr((std::weak_ptr<Observer> *const)&v7.event_center_.context_.pending_que_);
    std::weak_ptr<PlayerQuestComp>::~weak_ptr((std::weak_ptr<PlayerQuestComp> *const)&v11.event_center_.context_.pending_que_.c._M_impl._M_finish._M_last);
    std::weak_ptr<PlayerQuestComp>::weak_ptr(
      (std::weak_ptr<PlayerQuestComp> *const)&v11.event_center_.context_.pending_que_.c._M_impl._M_finish._M_last,
      (const std::weak_ptr<PlayerQuestComp> *)(p_M_element_count + 64));
    PlayerEventComp::registerObserver<PlayerQuestComp,LoseItemEvent>(
      (PlayerEventComp *const)&v7.event_center_.context_.pending_que_.c._M_impl._M_start,
      (std::weak_ptr<PlayerQuestComp> *)event_comp,
      (void (*)(PlayerQuestComp *, const LoseItemEvent *))&v11.event_center_.context_.pending_que_.c._M_impl._M_finish._M_last);
    std::weak_ptr<Observer>::~weak_ptr((std::weak_ptr<Observer> *const)&v7.event_center_.context_.pending_que_.c._M_impl._M_start);
    std::weak_ptr<PlayerQuestComp>::~weak_ptr((std::weak_ptr<PlayerQuestComp> *const)&v11.event_center_.context_.pending_que_.c._M_impl._M_finish._M_last);
    std::weak_ptr<PlayerQuestComp>::weak_ptr(
      (std::weak_ptr<PlayerQuestComp> *const)&v11.event_center_.context_.pending_que_.c._M_impl._M_finish._M_last,
      (const std::weak_ptr<PlayerQuestComp> *)(p_M_element_count + 64));
    PlayerEventComp::registerObserver<PlayerQuestComp,TriggerFireEvent>(
      (PlayerEventComp *const)&v7.event_center_.context_.pending_que_.c._M_impl._M_start._M_last,
      (std::weak_ptr<PlayerQuestComp> *)event_comp,
      (void (*)(PlayerQuestComp *, const TriggerFireEvent *))&v11.event_center_.context_.pending_que_.c._M_impl._M_finish._M_last);
    std::weak_ptr<Observer>::~weak_ptr((std::weak_ptr<Observer> *const)&v7.event_center_.context_.pending_que_.c._M_impl._M_start._M_last);
    std::weak_ptr<PlayerQuestComp>::~weak_ptr((std::weak_ptr<PlayerQuestComp> *const)&v11.event_center_.context_.pending_que_.c._M_impl._M_finish._M_last);
    std::weak_ptr<PlayerQuestComp>::weak_ptr(
      (std::weak_ptr<PlayerQuestComp> *const)&v11.event_center_.context_.pending_que_.c._M_impl._M_finish._M_last,
      (const std::weak_ptr<PlayerQuestComp> *)(p_M_element_count + 64));
    PlayerEventComp::registerObserver<PlayerQuestComp,ClearGroupMonsterEvent>(
      (PlayerEventComp *const)&v7.event_center_.context_.pending_que_.c._M_impl._M_finish,
      (std::weak_ptr<PlayerQuestComp> *)event_comp,
      (void (*)(PlayerQuestComp *, const ClearGroupMonsterEvent *))&v11.event_center_.context_.pending_que_.c._M_impl._M_finish._M_last);
    std::weak_ptr<Observer>::~weak_ptr((std::weak_ptr<Observer> *const)&v7.event_center_.context_.pending_que_.c._M_impl._M_finish);
    std::weak_ptr<PlayerQuestComp>::~weak_ptr((std::weak_ptr<PlayerQuestComp> *const)&v11.event_center_.context_.pending_que_.c._M_impl._M_finish._M_last);
    std::weak_ptr<PlayerQuestComp>::weak_ptr(
      (std::weak_ptr<PlayerQuestComp> *const)&v11.event_center_.context_.pending_que_.c._M_impl._M_finish._M_last,
      (const std::weak_ptr<PlayerQuestComp> *)(p_M_element_count + 64));
    PlayerEventComp::registerObserver<PlayerQuestComp,ManualTransportEvent>(
      (PlayerEventComp *const)&v7.event_center_.context_.pending_que_.c._M_impl._M_finish._M_last,
      (std::weak_ptr<PlayerQuestComp> *)event_comp,
      (void (*)(PlayerQuestComp *, const ManualTransportEvent *))&v11.event_center_.context_.pending_que_.c._M_impl._M_finish._M_last);
    std::weak_ptr<Observer>::~weak_ptr((std::weak_ptr<Observer> *const)&v7.event_center_.context_.pending_que_.c._M_impl._M_finish._M_last);
    std::weak_ptr<PlayerQuestComp>::~weak_ptr((std::weak_ptr<PlayerQuestComp> *const)&v11.event_center_.context_.pending_que_.c._M_impl._M_finish._M_last);
    std::weak_ptr<PlayerQuestComp>::weak_ptr(
      (std::weak_ptr<PlayerQuestComp> *const)&v11.event_center_.context_.pending_que_.c._M_impl._M_finish._M_last,
      (const std::weak_ptr<PlayerQuestComp> *)(p_M_element_count + 64));
    PlayerEventComp::registerObserver<PlayerQuestComp,EnterDungeonEvent>(
      (PlayerEventComp *const)&v7.event_center_.context_.event_center_,
      (std::weak_ptr<PlayerQuestComp> *)event_comp,
      (void (*)(PlayerQuestComp *, const EnterDungeonEvent *))&v11.event_center_.context_.pending_que_.c._M_impl._M_finish._M_last);
    std::weak_ptr<Observer>::~weak_ptr((std::weak_ptr<Observer> *const)&v7.event_center_.context_.event_center_);
    std::weak_ptr<PlayerQuestComp>::~weak_ptr((std::weak_ptr<PlayerQuestComp> *const)&v11.event_center_.context_.pending_que_.c._M_impl._M_finish._M_last);
    std::weak_ptr<PlayerQuestComp>::weak_ptr(
      (std::weak_ptr<PlayerQuestComp> *const)&v11.event_center_.context_.pending_que_.c._M_impl._M_finish._M_last,
      (const std::weak_ptr<PlayerQuestComp> *)(p_M_element_count + 64));
    PlayerEventComp::registerObserver<PlayerQuestComp,EnterMyWorldEvent>(
      (PlayerEventComp *const)&v7.event_center_.observer_list_map_._M_h._M_bucket_count,
      (std::weak_ptr<PlayerQuestComp> *)event_comp,
      (void (*)(PlayerQuestComp *, const EnterMyWorldEvent *))&v11.event_center_.context_.pending_que_.c._M_impl._M_finish._M_last);
    std::weak_ptr<Observer>::~weak_ptr((std::weak_ptr<Observer> *const)&v7.event_center_.observer_list_map_._M_h._M_bucket_count);
    std::weak_ptr<PlayerQuestComp>::~weak_ptr((std::weak_ptr<PlayerQuestComp> *const)&v11.event_center_.context_.pending_que_.c._M_impl._M_finish._M_last);
    std::weak_ptr<PlayerQuestComp>::weak_ptr(
      (std::weak_ptr<PlayerQuestComp> *const)&v11.event_center_.context_.pending_que_.c._M_impl._M_finish._M_last,
      (const std::weak_ptr<PlayerQuestComp> *)(p_M_element_count + 64));
    PlayerEventComp::registerObserver<PlayerQuestComp,EnterMyWorldSceneEvent>(
      (PlayerEventComp *const)&v7.event_center_.observer_list_map_._M_h._M_element_count,
      (std::weak_ptr<PlayerQuestComp> *)event_comp,
      (void (*)(PlayerQuestComp *, const EnterMyWorldSceneEvent *))&v11.event_center_.context_.pending_que_.c._M_impl._M_finish._M_last);
    std::weak_ptr<Observer>::~weak_ptr((std::weak_ptr<Observer> *const)&v7.event_center_.observer_list_map_._M_h._M_element_count);
    std::weak_ptr<PlayerQuestComp>::~weak_ptr((std::weak_ptr<PlayerQuestComp> *const)&v11.event_center_.context_.pending_que_.c._M_impl._M_finish._M_last);
    std::weak_ptr<PlayerQuestComp>::weak_ptr(
      (std::weak_ptr<PlayerQuestComp> *const)&v11.event_center_.context_.pending_que_.c._M_impl._M_finish._M_last,
      (const std::weak_ptr<PlayerQuestComp> *)(p_M_element_count + 64));
    PlayerEventComp::registerObserver<PlayerQuestComp,EnterRoomEvent>(
      (PlayerEventComp *const)&v7.event_center_.observer_list_map_._M_h._M_rehash_policy._M_next_resize,
      (std::weak_ptr<PlayerQuestComp> *)event_comp,
      (void (*)(PlayerQuestComp *, const EnterRoomEvent *))&v11.event_center_.context_.pending_que_.c._M_impl._M_finish._M_last);
    std::weak_ptr<Observer>::~weak_ptr((std::weak_ptr<Observer> *const)&v7.event_center_.observer_list_map_._M_h._M_rehash_policy._M_next_resize);
    std::weak_ptr<PlayerQuestComp>::~weak_ptr((std::weak_ptr<PlayerQuestComp> *const)&v11.event_center_.context_.pending_que_.c._M_impl._M_finish._M_last);
    std::weak_ptr<PlayerQuestComp>::weak_ptr(
      (std::weak_ptr<PlayerQuestComp> *const)&v11.event_center_.context_.pending_que_.c._M_impl._M_finish._M_last,
      (const std::weak_ptr<PlayerQuestComp> *)(p_M_element_count + 64));
    PlayerEventComp::registerObserver<PlayerQuestComp,EnterMyHomeWorldEvent>(
      (PlayerEventComp *const)&v7.is_started_,
      (std::weak_ptr<PlayerQuestComp> *)event_comp,
      (void (*)(PlayerQuestComp *, const EnterMyHomeWorldEvent *))&v11.event_center_.context_.pending_que_.c._M_impl._M_finish._M_last);
    std::weak_ptr<Observer>::~weak_ptr((std::weak_ptr<Observer> *const)&v7.is_started_);
    std::weak_ptr<PlayerQuestComp>::~weak_ptr((std::weak_ptr<PlayerQuestComp> *const)&v11.event_center_.context_.pending_que_.c._M_impl._M_finish._M_last);
    std::weak_ptr<PlayerQuestComp>::weak_ptr(
      (std::weak_ptr<PlayerQuestComp> *const)&v11.event_center_.context_.pending_que_.c._M_impl._M_finish._M_last,
      (const std::weak_ptr<PlayerQuestComp> *)(p_M_element_count + 64));
    PlayerEventComp::registerObserver<PlayerQuestComp,FinishDungeonEvent>(
      &v8,
      (std::weak_ptr<PlayerQuestComp> *)event_comp,
      (void (*)(PlayerQuestComp *, const FinishDungeonEvent *))&v11.event_center_.context_.pending_que_.c._M_impl._M_finish._M_last);
    std::weak_ptr<Observer>::~weak_ptr((std::weak_ptr<Observer> *const)&v8);
    std::weak_ptr<PlayerQuestComp>::~weak_ptr((std::weak_ptr<PlayerQuestComp> *const)&v11.event_center_.context_.pending_que_.c._M_impl._M_finish._M_last);
    std::weak_ptr<PlayerQuestComp>::weak_ptr(
      (std::weak_ptr<PlayerQuestComp> *const)&v11.event_center_.context_.pending_que_.c._M_impl._M_finish._M_last,
      (const std::weak_ptr<PlayerQuestComp> *)(p_M_element_count + 64));
    PlayerEventComp::registerObserver<PlayerQuestComp,FailDungeonEvent>(
      (PlayerEventComp *const)&v8._M_weak_this._M_refcount,
      (std::weak_ptr<PlayerQuestComp> *)event_comp,
      (void (*)(PlayerQuestComp *, const FailDungeonEvent *))&v11.event_center_.context_.pending_que_.c._M_impl._M_finish._M_last);
    std::weak_ptr<Observer>::~weak_ptr((std::weak_ptr<Observer> *const)&v8._M_weak_this._M_refcount);
    std::weak_ptr<PlayerQuestComp>::~weak_ptr((std::weak_ptr<PlayerQuestComp> *const)&v11.event_center_.context_.pending_que_.c._M_impl._M_finish._M_last);
    std::weak_ptr<PlayerQuestComp>::weak_ptr(
      (std::weak_ptr<PlayerQuestComp> *const)&v11.event_center_.context_.pending_que_.c._M_impl._M_finish._M_last,
      (const std::weak_ptr<PlayerQuestComp> *)(p_M_element_count + 64));
    PlayerEventComp::registerObserver<PlayerQuestComp,GadgetDieEvent>(
      (PlayerEventComp *const)&v8.event_center_,
      (std::weak_ptr<PlayerQuestComp> *)event_comp,
      (void (*)(PlayerQuestComp *, const GadgetDieEvent *))&v11.event_center_.context_.pending_que_.c._M_impl._M_finish._M_last);
    std::weak_ptr<Observer>::~weak_ptr((std::weak_ptr<Observer> *const)&v8.event_center_);
    std::weak_ptr<PlayerQuestComp>::~weak_ptr((std::weak_ptr<PlayerQuestComp> *const)&v11.event_center_.context_.pending_que_.c._M_impl._M_finish._M_last);
    std::weak_ptr<PlayerQuestComp>::weak_ptr(
      (std::weak_ptr<PlayerQuestComp> *const)&v11.event_center_.context_.pending_que_.c._M_impl._M_finish._M_last,
      (const std::weak_ptr<PlayerQuestComp> *)(p_M_element_count + 64));
    PlayerEventComp::registerObserver<PlayerQuestComp,NickNameEvent>(
      (PlayerEventComp *const)&v8.event_center_.context_.pending_que_,
      (std::weak_ptr<PlayerQuestComp> *)event_comp,
      (void (*)(PlayerQuestComp *, const NickNameEvent *))&v11.event_center_.context_.pending_que_.c._M_impl._M_finish._M_last);
    std::weak_ptr<Observer>::~weak_ptr((std::weak_ptr<Observer> *const)&v8.event_center_.context_.pending_que_);
    std::weak_ptr<PlayerQuestComp>::~weak_ptr((std::weak_ptr<PlayerQuestComp> *const)&v11.event_center_.context_.pending_que_.c._M_impl._M_finish._M_last);
    std::weak_ptr<PlayerQuestComp>::weak_ptr(
      (std::weak_ptr<PlayerQuestComp> *const)&v11.event_center_.context_.pending_que_.c._M_impl._M_finish._M_last,
      (const std::weak_ptr<PlayerQuestComp> *)(p_M_element_count + 64));
    PlayerEventComp::registerObserver<PlayerQuestComp,SealBattleEndEvent>(
      (PlayerEventComp *const)&v8.event_center_.context_.pending_que_.c._M_impl._M_start,
      (std::weak_ptr<PlayerQuestComp> *)event_comp,
      (void (*)(PlayerQuestComp *, const SealBattleEndEvent *))&v11.event_center_.context_.pending_que_.c._M_impl._M_finish._M_last);
    std::weak_ptr<Observer>::~weak_ptr((std::weak_ptr<Observer> *const)&v8.event_center_.context_.pending_que_.c._M_impl._M_start);
    std::weak_ptr<PlayerQuestComp>::~weak_ptr((std::weak_ptr<PlayerQuestComp> *const)&v11.event_center_.context_.pending_que_.c._M_impl._M_finish._M_last);
    std::weak_ptr<PlayerQuestComp>::weak_ptr(
      (std::weak_ptr<PlayerQuestComp> *const)&v11.event_center_.context_.pending_que_.c._M_impl._M_finish._M_last,
      (const std::weak_ptr<PlayerQuestComp> *)(p_M_element_count + 64));
    PlayerEventComp::registerObserver<PlayerQuestComp,WorktopSelectEvent>(
      (PlayerEventComp *const)&v8.event_center_.context_.pending_que_.c._M_impl._M_start._M_last,
      (std::weak_ptr<PlayerQuestComp> *)event_comp,
      (void (*)(PlayerQuestComp *, const WorktopSelectEvent *))&v11.event_center_.context_.pending_que_.c._M_impl._M_finish._M_last);
    std::weak_ptr<Observer>::~weak_ptr((std::weak_ptr<Observer> *const)&v8.event_center_.context_.pending_que_.c._M_impl._M_start._M_last);
    std::weak_ptr<PlayerQuestComp>::~weak_ptr((std::weak_ptr<PlayerQuestComp> *const)&v11.event_center_.context_.pending_que_.c._M_impl._M_finish._M_last);
    std::weak_ptr<PlayerQuestComp>::weak_ptr(
      (std::weak_ptr<PlayerQuestComp> *const)&v11.event_center_.context_.pending_que_.c._M_impl._M_finish._M_last,
      (const std::weak_ptr<PlayerQuestComp> *)(p_M_element_count + 64));
    PlayerEventComp::registerObserver<PlayerQuestComp,LuaNotifyQuestEvent>(
      (PlayerEventComp *const)&v8.event_center_.context_.pending_que_.c._M_impl._M_finish,
      (std::weak_ptr<PlayerQuestComp> *)event_comp,
      (void (*)(PlayerQuestComp *, const LuaNotifyQuestEvent *))&v11.event_center_.context_.pending_que_.c._M_impl._M_finish._M_last);
    std::weak_ptr<Observer>::~weak_ptr((std::weak_ptr<Observer> *const)&v8.event_center_.context_.pending_que_.c._M_impl._M_finish);
    std::weak_ptr<PlayerQuestComp>::~weak_ptr((std::weak_ptr<PlayerQuestComp> *const)&v11.event_center_.context_.pending_que_.c._M_impl._M_finish._M_last);
    std::weak_ptr<PlayerQuestComp>::weak_ptr(
      (std::weak_ptr<PlayerQuestComp> *const)&v11.event_center_.context_.pending_que_.c._M_impl._M_finish._M_last,
      (const std::weak_ptr<PlayerQuestComp> *)(p_M_element_count + 64));
    PlayerEventComp::registerObserver<PlayerQuestComp,TeamDeadEvent>(
      (PlayerEventComp *const)&v8.event_center_.context_.pending_que_.c._M_impl._M_finish._M_last,
      (std::weak_ptr<PlayerQuestComp> *)event_comp,
      (void (*)(PlayerQuestComp *, const TeamDeadEvent *))&v11.event_center_.context_.pending_que_.c._M_impl._M_finish._M_last);
    std::weak_ptr<Observer>::~weak_ptr((std::weak_ptr<Observer> *const)&v8.event_center_.context_.pending_que_.c._M_impl._M_finish._M_last);
    std::weak_ptr<PlayerQuestComp>::~weak_ptr((std::weak_ptr<PlayerQuestComp> *const)&v11.event_center_.context_.pending_que_.c._M_impl._M_finish._M_last);
    std::weak_ptr<PlayerQuestComp>::weak_ptr(
      (std::weak_ptr<PlayerQuestComp> *const)&v11.event_center_.context_.pending_que_.c._M_impl._M_finish._M_last,
      (const std::weak_ptr<PlayerQuestComp> *)(p_M_element_count + 64));
    PlayerEventComp::registerObserver<PlayerQuestComp,CityLevelupEvent>(
      (PlayerEventComp *const)&v8.event_center_.context_.event_center_,
      (std::weak_ptr<PlayerQuestComp> *)event_comp,
      (void (*)(PlayerQuestComp *, const CityLevelupEvent *))&v11.event_center_.context_.pending_que_.c._M_impl._M_finish._M_last);
    std::weak_ptr<Observer>::~weak_ptr((std::weak_ptr<Observer> *const)&v8.event_center_.context_.event_center_);
    std::weak_ptr<PlayerQuestComp>::~weak_ptr((std::weak_ptr<PlayerQuestComp> *const)&v11.event_center_.context_.pending_que_.c._M_impl._M_finish._M_last);
    std::weak_ptr<PlayerQuestComp>::weak_ptr(
      (std::weak_ptr<PlayerQuestComp> *const)&v11.event_center_.context_.pending_que_.c._M_impl._M_finish._M_last,
      (const std::weak_ptr<PlayerQuestComp> *)(p_M_element_count + 64));
    PlayerEventComp::registerObserver<PlayerQuestComp,PlayerLevelupEvent>(
      (PlayerEventComp *const)&v8.event_center_.observer_list_map_._M_h._M_bucket_count,
      (std::weak_ptr<PlayerQuestComp> *)event_comp,
      (void (*)(PlayerQuestComp *, const PlayerLevelupEvent *))&v11.event_center_.context_.pending_que_.c._M_impl._M_finish._M_last);
    std::weak_ptr<Observer>::~weak_ptr((std::weak_ptr<Observer> *const)&v8.event_center_.observer_list_map_._M_h._M_bucket_count);
    std::weak_ptr<PlayerQuestComp>::~weak_ptr((std::weak_ptr<PlayerQuestComp> *const)&v11.event_center_.context_.pending_que_.c._M_impl._M_finish._M_last);
    std::weak_ptr<PlayerQuestComp>::weak_ptr(
      (std::weak_ptr<PlayerQuestComp> *const)&v11.event_center_.context_.pending_que_.c._M_impl._M_finish._M_last,
      (const std::weak_ptr<PlayerQuestComp> *)(p_M_element_count + 64));
    PlayerEventComp::registerObserver<PlayerQuestComp,SkillEvent>(
      (PlayerEventComp *const)&v8.event_center_.observer_list_map_._M_h._M_element_count,
      (std::weak_ptr<PlayerQuestComp> *)event_comp,
      (void (*)(PlayerQuestComp *, const SkillEvent *))&v11.event_center_.context_.pending_que_.c._M_impl._M_finish._M_last);
    std::weak_ptr<Observer>::~weak_ptr((std::weak_ptr<Observer> *const)&v8.event_center_.observer_list_map_._M_h._M_element_count);
    std::weak_ptr<PlayerQuestComp>::~weak_ptr((std::weak_ptr<PlayerQuestComp> *const)&v11.event_center_.context_.pending_que_.c._M_impl._M_finish._M_last);
    std::weak_ptr<PlayerQuestComp>::weak_ptr(
      (std::weak_ptr<PlayerQuestComp> *const)&v11.event_center_.context_.pending_que_.c._M_impl._M_finish._M_last,
      (const std::weak_ptr<PlayerQuestComp> *)(p_M_element_count + 64));
    PlayerEventComp::registerObserver<PlayerQuestComp,AbilityAvatarSkillStartEvent>(
      (PlayerEventComp *const)&v8.event_center_.observer_list_map_._M_h._M_rehash_policy._M_next_resize,
      (std::weak_ptr<PlayerQuestComp> *)event_comp,
      (void (*)(PlayerQuestComp *, const AbilityAvatarSkillStartEvent *))&v11.event_center_.context_.pending_que_.c._M_impl._M_finish._M_last);
    std::weak_ptr<Observer>::~weak_ptr((std::weak_ptr<Observer> *const)&v8.event_center_.observer_list_map_._M_h._M_rehash_policy._M_next_resize);
    std::weak_ptr<PlayerQuestComp>::~weak_ptr((std::weak_ptr<PlayerQuestComp> *const)&v11.event_center_.context_.pending_que_.c._M_impl._M_finish._M_last);
    std::weak_ptr<PlayerQuestComp>::weak_ptr(
      (std::weak_ptr<PlayerQuestComp> *const)&v11.event_center_.context_.pending_que_.c._M_impl._M_finish._M_last,
      (const std::weak_ptr<PlayerQuestComp> *)(p_M_element_count + 64));
    PlayerEventComp::registerObserver<PlayerQuestComp,UnlockTransPointEvent>(
      (PlayerEventComp *const)&v8.is_started_,
      (std::weak_ptr<PlayerQuestComp> *)event_comp,
      (void (*)(PlayerQuestComp *, const UnlockTransPointEvent *))&v11.event_center_.context_.pending_que_.c._M_impl._M_finish._M_last);
    std::weak_ptr<Observer>::~weak_ptr((std::weak_ptr<Observer> *const)&v8.is_started_);
    std::weak_ptr<PlayerQuestComp>::~weak_ptr((std::weak_ptr<PlayerQuestComp> *const)&v11.event_center_.context_.pending_que_.c._M_impl._M_finish._M_last);
    std::weak_ptr<PlayerQuestComp>::weak_ptr(
      (std::weak_ptr<PlayerQuestComp> *const)&v11.event_center_.context_.pending_que_.c._M_impl._M_finish._M_last,
      (const std::weak_ptr<PlayerQuestComp> *)(p_M_element_count + 64));
    PlayerEventComp::registerObserver<PlayerQuestComp,InteractGadgetEvent>(
      &v9,
      (std::weak_ptr<PlayerQuestComp> *)event_comp,
      (void (*)(PlayerQuestComp *, const InteractGadgetEvent *))&v11.event_center_.context_.pending_que_.c._M_impl._M_finish._M_last);
    std::weak_ptr<Observer>::~weak_ptr((std::weak_ptr<Observer> *const)&v9);
    std::weak_ptr<PlayerQuestComp>::~weak_ptr((std::weak_ptr<PlayerQuestComp> *const)&v11.event_center_.context_.pending_que_.c._M_impl._M_finish._M_last);
    std::weak_ptr<PlayerQuestComp>::weak_ptr(
      (std::weak_ptr<PlayerQuestComp> *const)&v11.event_center_.context_.pending_que_.c._M_impl._M_finish._M_last,
      (const std::weak_ptr<PlayerQuestComp> *)(p_M_element_count + 64));
    PlayerEventComp::registerObserver<PlayerQuestComp,FinishItemGivingEvent>(
      (PlayerEventComp *const)&v9._M_weak_this._M_refcount,
      (std::weak_ptr<PlayerQuestComp> *)event_comp,
      (void (*)(PlayerQuestComp *, const FinishItemGivingEvent *))&v11.event_center_.context_.pending_que_.c._M_impl._M_finish._M_last);
    std::weak_ptr<Observer>::~weak_ptr((std::weak_ptr<Observer> *const)&v9._M_weak_this._M_refcount);
    std::weak_ptr<PlayerQuestComp>::~weak_ptr((std::weak_ptr<PlayerQuestComp> *const)&v11.event_center_.context_.pending_que_.c._M_impl._M_finish._M_last);
    std::weak_ptr<PlayerQuestComp>::weak_ptr(
      (std::weak_ptr<PlayerQuestComp> *const)&v11.event_center_.context_.pending_que_.c._M_impl._M_finish._M_last,
      (const std::weak_ptr<PlayerQuestComp> *)(p_M_element_count + 64));
    PlayerEventComp::registerObserver<PlayerQuestComp,DungeonOpenStatueEvent>(
      (PlayerEventComp *const)&v9.event_center_,
      (std::weak_ptr<PlayerQuestComp> *)event_comp,
      (void (*)(PlayerQuestComp *, const DungeonOpenStatueEvent *))&v11.event_center_.context_.pending_que_.c._M_impl._M_finish._M_last);
    std::weak_ptr<Observer>::~weak_ptr((std::weak_ptr<Observer> *const)&v9.event_center_);
    std::weak_ptr<PlayerQuestComp>::~weak_ptr((std::weak_ptr<PlayerQuestComp> *const)&v11.event_center_.context_.pending_que_.c._M_impl._M_finish._M_last);
    std::weak_ptr<PlayerQuestComp>::weak_ptr(
      (std::weak_ptr<PlayerQuestComp> *const)&v11.event_center_.context_.pending_que_.c._M_impl._M_finish._M_last,
      (const std::weak_ptr<PlayerQuestComp> *)(p_M_element_count + 64));
    PlayerEventComp::registerObserver<PlayerQuestComp,UnlockAreaEvent>(
      (PlayerEventComp *const)&v9.event_center_.context_.pending_que_,
      (std::weak_ptr<PlayerQuestComp> *)event_comp,
      (void (*)(PlayerQuestComp *, const UnlockAreaEvent *))&v11.event_center_.context_.pending_que_.c._M_impl._M_finish._M_last);
    std::weak_ptr<Observer>::~weak_ptr((std::weak_ptr<Observer> *const)&v9.event_center_.context_.pending_que_);
    std::weak_ptr<PlayerQuestComp>::~weak_ptr((std::weak_ptr<PlayerQuestComp> *const)&v11.event_center_.context_.pending_que_.c._M_impl._M_finish._M_last);
    std::weak_ptr<PlayerQuestComp>::weak_ptr(
      (std::weak_ptr<PlayerQuestComp> *const)&v11.event_center_.context_.pending_que_.c._M_impl._M_finish._M_last,
      (const std::weak_ptr<PlayerQuestComp> *)(p_M_element_count + 64));
    PlayerEventComp::registerObserver<PlayerQuestComp,ChestOpenEvent>(
      (PlayerEventComp *const)&v9.event_center_.context_.pending_que_.c._M_impl._M_start,
      (std::weak_ptr<PlayerQuestComp> *)event_comp,
      (void (*)(PlayerQuestComp *, const ChestOpenEvent *))&v11.event_center_.context_.pending_que_.c._M_impl._M_finish._M_last);
    std::weak_ptr<Observer>::~weak_ptr((std::weak_ptr<Observer> *const)&v9.event_center_.context_.pending_que_.c._M_impl._M_start);
    std::weak_ptr<PlayerQuestComp>::~weak_ptr((std::weak_ptr<PlayerQuestComp> *const)&v11.event_center_.context_.pending_que_.c._M_impl._M_finish._M_last);
    std::weak_ptr<PlayerQuestComp>::weak_ptr(
      (std::weak_ptr<PlayerQuestComp> *const)&v11.event_center_.context_.pending_que_.c._M_impl._M_finish._M_last,
      (const std::weak_ptr<PlayerQuestComp> *)(p_M_element_count + 64));
    PlayerEventComp::registerObserver<PlayerQuestComp,FinishTowerLevelEvent>(
      (PlayerEventComp *const)&v9.event_center_.context_.pending_que_.c._M_impl._M_start._M_last,
      (std::weak_ptr<PlayerQuestComp> *)event_comp,
      (void (*)(PlayerQuestComp *, const FinishTowerLevelEvent *))&v11.event_center_.context_.pending_que_.c._M_impl._M_finish._M_last);
    std::weak_ptr<Observer>::~weak_ptr((std::weak_ptr<Observer> *const)&v9.event_center_.context_.pending_que_.c._M_impl._M_start._M_last);
    std::weak_ptr<PlayerQuestComp>::~weak_ptr((std::weak_ptr<PlayerQuestComp> *const)&v11.event_center_.context_.pending_que_.c._M_impl._M_finish._M_last);
    std::weak_ptr<PlayerQuestComp>::weak_ptr(
      (std::weak_ptr<PlayerQuestComp> *const)&v11.event_center_.context_.pending_que_.c._M_impl._M_finish._M_last,
      (const std::weak_ptr<PlayerQuestComp> *)(p_M_element_count + 64));
    PlayerEventComp::registerObserver<PlayerQuestComp,BargainFinishEvent>(
      (PlayerEventComp *const)&v9.event_center_.context_.pending_que_.c._M_impl._M_finish,
      (std::weak_ptr<PlayerQuestComp> *)event_comp,
      (void (*)(PlayerQuestComp *, const BargainFinishEvent *))&v11.event_center_.context_.pending_que_.c._M_impl._M_finish._M_last);
    std::weak_ptr<Observer>::~weak_ptr((std::weak_ptr<Observer> *const)&v9.event_center_.context_.pending_que_.c._M_impl._M_finish);
    std::weak_ptr<PlayerQuestComp>::~weak_ptr((std::weak_ptr<PlayerQuestComp> *const)&v11.event_center_.context_.pending_que_.c._M_impl._M_finish._M_last);
    std::weak_ptr<PlayerQuestComp>::weak_ptr(
      (std::weak_ptr<PlayerQuestComp> *const)&v11.event_center_.context_.pending_que_.c._M_impl._M_finish._M_last,
      (const std::weak_ptr<PlayerQuestComp> *)(p_M_element_count + 64));
    PlayerEventComp::registerObserver<PlayerQuestComp,UnlockPersonalLineEvent>(
      (PlayerEventComp *const)&v9.event_center_.context_.pending_que_.c._M_impl._M_finish._M_last,
      (std::weak_ptr<PlayerQuestComp> *)event_comp,
      (void (*)(PlayerQuestComp *, const UnlockPersonalLineEvent *))&v11.event_center_.context_.pending_que_.c._M_impl._M_finish._M_last);
    std::weak_ptr<Observer>::~weak_ptr((std::weak_ptr<Observer> *const)&v9.event_center_.context_.pending_que_.c._M_impl._M_finish._M_last);
    std::weak_ptr<PlayerQuestComp>::~weak_ptr((std::weak_ptr<PlayerQuestComp> *const)&v11.event_center_.context_.pending_que_.c._M_impl._M_finish._M_last);
    std::weak_ptr<PlayerQuestComp>::weak_ptr(
      (std::weak_ptr<PlayerQuestComp> *const)&v11.event_center_.context_.pending_que_.c._M_impl._M_finish._M_last,
      (const std::weak_ptr<PlayerQuestComp> *)(p_M_element_count + 64));
    PlayerEventComp::registerObserver<PlayerQuestComp,DailyTaskVarUpdateEvent>(
      (PlayerEventComp *const)&v9.event_center_.context_.event_center_,
      (std::weak_ptr<PlayerQuestComp> *)event_comp,
      (void (*)(PlayerQuestComp *, const DailyTaskVarUpdateEvent *))&v11.event_center_.context_.pending_que_.c._M_impl._M_finish._M_last);
    std::weak_ptr<Observer>::~weak_ptr((std::weak_ptr<Observer> *const)&v9.event_center_.context_.event_center_);
    std::weak_ptr<PlayerQuestComp>::~weak_ptr((std::weak_ptr<PlayerQuestComp> *const)&v11.event_center_.context_.pending_que_.c._M_impl._M_finish._M_last);
    std::weak_ptr<PlayerQuestComp>::weak_ptr(
      (std::weak_ptr<PlayerQuestComp> *const)&v11.event_center_.context_.pending_que_.c._M_impl._M_finish._M_last,
      (const std::weak_ptr<PlayerQuestComp> *)(p_M_element_count + 64));
    PlayerEventComp::registerObserver<PlayerQuestComp,ActivityTriggerQuestEvent>(
      (PlayerEventComp *const)&v9.event_center_.observer_list_map_._M_h._M_bucket_count,
      (std::weak_ptr<PlayerQuestComp> *)event_comp,
      (void (*)(PlayerQuestComp *, const ActivityTriggerQuestEvent *))&v11.event_center_.context_.pending_que_.c._M_impl._M_finish._M_last);
    std::weak_ptr<Observer>::~weak_ptr((std::weak_ptr<Observer> *const)&v9.event_center_.observer_list_map_._M_h._M_bucket_count);
    std::weak_ptr<PlayerQuestComp>::~weak_ptr((std::weak_ptr<PlayerQuestComp> *const)&v11.event_center_.context_.pending_que_.c._M_impl._M_finish._M_last);
    std::weak_ptr<PlayerQuestComp>::weak_ptr(
      (std::weak_ptr<PlayerQuestComp> *const)&v11.event_center_.context_.pending_que_.c._M_impl._M_finish._M_last,
      (const std::weak_ptr<PlayerQuestComp> *)(p_M_element_count + 64));
    PlayerEventComp::registerObserver<PlayerQuestComp,MainCoopStartEvent>(
      (PlayerEventComp *const)&v9.event_center_.observer_list_map_._M_h._M_element_count,
      (std::weak_ptr<PlayerQuestComp> *)event_comp,
      (void (*)(PlayerQuestComp *, const MainCoopStartEvent *))&v11.event_center_.context_.pending_que_.c._M_impl._M_finish._M_last);
    std::weak_ptr<Observer>::~weak_ptr((std::weak_ptr<Observer> *const)&v9.event_center_.observer_list_map_._M_h._M_element_count);
    std::weak_ptr<PlayerQuestComp>::~weak_ptr((std::weak_ptr<PlayerQuestComp> *const)&v11.event_center_.context_.pending_que_.c._M_impl._M_finish._M_last);
    std::weak_ptr<PlayerQuestComp>::weak_ptr(
      (std::weak_ptr<PlayerQuestComp> *const)&v11.event_center_.context_.pending_que_.c._M_impl._M_finish._M_last,
      (const std::weak_ptr<PlayerQuestComp> *)(p_M_element_count + 64));
    PlayerEventComp::registerObserver<PlayerQuestComp,MainCoopSavePointEvent>(
      (PlayerEventComp *const)&v9.event_center_.observer_list_map_._M_h._M_rehash_policy._M_next_resize,
      (std::weak_ptr<PlayerQuestComp> *)event_comp,
      (void (*)(PlayerQuestComp *, const MainCoopSavePointEvent *))&v11.event_center_.context_.pending_que_.c._M_impl._M_finish._M_last);
    std::weak_ptr<Observer>::~weak_ptr((std::weak_ptr<Observer> *const)&v9.event_center_.observer_list_map_._M_h._M_rehash_policy._M_next_resize);
    std::weak_ptr<PlayerQuestComp>::~weak_ptr((std::weak_ptr<PlayerQuestComp> *const)&v11.event_center_.context_.pending_que_.c._M_impl._M_finish._M_last);
    std::weak_ptr<PlayerQuestComp>::weak_ptr(
      (std::weak_ptr<PlayerQuestComp> *const)&v11.event_center_.context_.pending_que_.c._M_impl._M_finish._M_last,
      (const std::weak_ptr<PlayerQuestComp> *)(p_M_element_count + 64));
    PlayerEventComp::registerObserver<PlayerQuestComp,UseItemEvent>(
      (PlayerEventComp *const)&v9.is_started_,
      (std::weak_ptr<PlayerQuestComp> *)event_comp,
      (void (*)(PlayerQuestComp *, const UseItemEvent *))&v11.event_center_.context_.pending_que_.c._M_impl._M_finish._M_last);
    std::weak_ptr<Observer>::~weak_ptr((std::weak_ptr<Observer> *const)&v9.is_started_);
    std::weak_ptr<PlayerQuestComp>::~weak_ptr((std::weak_ptr<PlayerQuestComp> *const)&v11.event_center_.context_.pending_que_.c._M_impl._M_finish._M_last);
    std::weak_ptr<PlayerQuestComp>::weak_ptr(
      (std::weak_ptr<PlayerQuestComp> *const)&v11.event_center_.context_.pending_que_.c._M_impl._M_finish._M_last,
      (const std::weak_ptr<PlayerQuestComp> *)(p_M_element_count + 64));
    PlayerEventComp::registerObserver<PlayerQuestComp,ChangeClimateAreaEvent>(
      &v10,
      (std::weak_ptr<PlayerQuestComp> *)event_comp,
      (void (*)(PlayerQuestComp *, const ChangeClimateAreaEvent *))&v11.event_center_.context_.pending_que_.c._M_impl._M_finish._M_last);
    std::weak_ptr<Observer>::~weak_ptr((std::weak_ptr<Observer> *const)&v10);
    std::weak_ptr<PlayerQuestComp>::~weak_ptr((std::weak_ptr<PlayerQuestComp> *const)&v11.event_center_.context_.pending_que_.c._M_impl._M_finish._M_last);
    std::weak_ptr<PlayerQuestComp>::weak_ptr(
      (std::weak_ptr<PlayerQuestComp> *const)&v11.event_center_.context_.pending_que_.c._M_impl._M_finish._M_last,
      (const std::weak_ptr<PlayerQuestComp> *)(p_M_element_count + 64));
    PlayerEventComp::registerObserver<PlayerQuestComp,QuestStateChangeEvent>(
      (PlayerEventComp *const)&v10._M_weak_this._M_refcount,
      (std::weak_ptr<PlayerQuestComp> *)event_comp,
      (void (*)(PlayerQuestComp *, const QuestStateChangeEvent *))&v11.event_center_.context_.pending_que_.c._M_impl._M_finish._M_last);
    std::weak_ptr<Observer>::~weak_ptr((std::weak_ptr<Observer> *const)&v10._M_weak_this._M_refcount);
    std::weak_ptr<PlayerQuestComp>::~weak_ptr((std::weak_ptr<PlayerQuestComp> *const)&v11.event_center_.context_.pending_que_.c._M_impl._M_finish._M_last);
    std::weak_ptr<PlayerQuestComp>::weak_ptr(
      (std::weak_ptr<PlayerQuestComp> *const)&v11.event_center_.context_.pending_que_.c._M_impl._M_finish._M_last,
      (const std::weak_ptr<PlayerQuestComp> *)(p_M_element_count + 64));
    PlayerEventComp::registerObserver<PlayerQuestComp,UnlockRecipeEvent>(
      (PlayerEventComp *const)&v10.event_center_,
      (std::weak_ptr<PlayerQuestComp> *)event_comp,
      (void (*)(PlayerQuestComp *, const UnlockRecipeEvent *))&v11.event_center_.context_.pending_que_.c._M_impl._M_finish._M_last);
    std::weak_ptr<Observer>::~weak_ptr((std::weak_ptr<Observer> *const)&v10.event_center_);
    std::weak_ptr<PlayerQuestComp>::~weak_ptr((std::weak_ptr<PlayerQuestComp> *const)&v11.event_center_.context_.pending_que_.c._M_impl._M_finish._M_last);
    std::weak_ptr<PlayerQuestComp>::weak_ptr(
      (std::weak_ptr<PlayerQuestComp> *const)&v11.event_center_.context_.pending_que_.c._M_impl._M_finish._M_last,
      (const std::weak_ptr<PlayerQuestComp> *)(p_M_element_count + 64));
    PlayerEventComp::registerObserver<PlayerQuestComp,FishingSuccEvent>(
      (PlayerEventComp *const)&v10.event_center_.context_.pending_que_,
      (std::weak_ptr<PlayerQuestComp> *)event_comp,
      (void (*)(PlayerQuestComp *, const FishingSuccEvent *))&v11.event_center_.context_.pending_que_.c._M_impl._M_finish._M_last);
    std::weak_ptr<Observer>::~weak_ptr((std::weak_ptr<Observer> *const)&v10.event_center_.context_.pending_que_);
    std::weak_ptr<PlayerQuestComp>::~weak_ptr((std::weak_ptr<PlayerQuestComp> *const)&v11.event_center_.context_.pending_que_.c._M_impl._M_finish._M_last);
    std::weak_ptr<PlayerQuestComp>::weak_ptr(
      (std::weak_ptr<PlayerQuestComp> *const)&v11.event_center_.context_.pending_que_.c._M_impl._M_finish._M_last,
      (const std::weak_ptr<PlayerQuestComp> *)(p_M_element_count + 64));
    PlayerEventComp::registerObserver<PlayerQuestComp,UseWidgetEvent>(
      (PlayerEventComp *const)&v10.event_center_.context_.pending_que_.c._M_impl._M_start,
      (std::weak_ptr<PlayerQuestComp> *)event_comp,
      (void (*)(PlayerQuestComp *, const UseWidgetEvent *))&v11.event_center_.context_.pending_que_.c._M_impl._M_finish._M_last);
    std::weak_ptr<Observer>::~weak_ptr((std::weak_ptr<Observer> *const)&v10.event_center_.context_.pending_que_.c._M_impl._M_start);
    std::weak_ptr<PlayerQuestComp>::~weak_ptr((std::weak_ptr<PlayerQuestComp> *const)&v11.event_center_.context_.pending_que_.c._M_impl._M_finish._M_last);
    std::weak_ptr<PlayerQuestComp>::weak_ptr(
      (std::weak_ptr<PlayerQuestComp> *const)&v11.event_center_.context_.pending_que_.c._M_impl._M_finish._M_last,
      (const std::weak_ptr<PlayerQuestComp> *)(p_M_element_count + 64));
    PlayerEventComp::registerObserver<PlayerQuestComp,CaptureSuccEvent>(
      (PlayerEventComp *const)&v10.event_center_.context_.pending_que_.c._M_impl._M_start._M_last,
      (std::weak_ptr<PlayerQuestComp> *)event_comp,
      (void (*)(PlayerQuestComp *, const CaptureSuccEvent *))&v11.event_center_.context_.pending_que_.c._M_impl._M_finish._M_last);
    std::weak_ptr<Observer>::~weak_ptr((std::weak_ptr<Observer> *const)&v10.event_center_.context_.pending_que_.c._M_impl._M_start._M_last);
    std::weak_ptr<PlayerQuestComp>::~weak_ptr((std::weak_ptr<PlayerQuestComp> *const)&v11.event_center_.context_.pending_que_.c._M_impl._M_finish._M_last);
    std::weak_ptr<PlayerQuestComp>::weak_ptr(
      (std::weak_ptr<PlayerQuestComp> *const)&v11.event_center_.context_.pending_que_.c._M_impl._M_finish._M_last,
      (const std::weak_ptr<PlayerQuestComp> *)(p_M_element_count + 64));
    PlayerEventComp::registerObserver<PlayerQuestComp,PostEnterRogueDungeonEvent>(
      (PlayerEventComp *const)&v10.event_center_.context_.pending_que_.c._M_impl._M_finish,
      (std::weak_ptr<PlayerQuestComp> *)event_comp,
      (void (*)(PlayerQuestComp *, const PostEnterRogueDungeonEvent *))&v11.event_center_.context_.pending_que_.c._M_impl._M_finish._M_last);
    std::weak_ptr<Observer>::~weak_ptr((std::weak_ptr<Observer> *const)&v10.event_center_.context_.pending_que_.c._M_impl._M_finish);
    std::weak_ptr<PlayerQuestComp>::~weak_ptr((std::weak_ptr<PlayerQuestComp> *const)&v11.event_center_.context_.pending_que_.c._M_impl._M_finish._M_last);
    std::weak_ptr<PlayerQuestComp>::weak_ptr(
      (std::weak_ptr<PlayerQuestComp> *const)&v11.event_center_.context_.pending_que_.c._M_impl._M_finish._M_last,
      (const std::weak_ptr<PlayerQuestComp> *)(p_M_element_count + 64));
    PlayerEventComp::registerObserver<PlayerQuestComp,EnterVehicleEvent>(
      (PlayerEventComp *const)&v10.event_center_.context_.pending_que_.c._M_impl._M_finish._M_last,
      (std::weak_ptr<PlayerQuestComp> *)event_comp,
      (void (*)(PlayerQuestComp *, const EnterVehicleEvent *))&v11.event_center_.context_.pending_que_.c._M_impl._M_finish._M_last);
    std::weak_ptr<Observer>::~weak_ptr((std::weak_ptr<Observer> *const)&v10.event_center_.context_.pending_que_.c._M_impl._M_finish._M_last);
    std::weak_ptr<PlayerQuestComp>::~weak_ptr((std::weak_ptr<PlayerQuestComp> *const)&v11.event_center_.context_.pending_que_.c._M_impl._M_finish._M_last);
    std::weak_ptr<PlayerQuestComp>::weak_ptr(
      (std::weak_ptr<PlayerQuestComp> *const)&v11.event_center_.context_.pending_que_.c._M_impl._M_finish._M_last,
      (const std::weak_ptr<PlayerQuestComp> *)(p_M_element_count + 64));
    PlayerEventComp::registerObserver<PlayerQuestComp,ChangeLevelTagEvent>(
      (PlayerEventComp *const)&v10.event_center_.context_.event_center_,
      (std::weak_ptr<PlayerQuestComp> *)event_comp,
      (void (*)(PlayerQuestComp *, const ChangeLevelTagEvent *))&v11.event_center_.context_.pending_que_.c._M_impl._M_finish._M_last);
    std::weak_ptr<Observer>::~weak_ptr((std::weak_ptr<Observer> *const)&v10.event_center_.context_.event_center_);
    std::weak_ptr<PlayerQuestComp>::~weak_ptr((std::weak_ptr<PlayerQuestComp> *const)&v11.event_center_.context_.pending_que_.c._M_impl._M_finish._M_last);
    std::weak_ptr<PlayerQuestComp>::weak_ptr(
      (std::weak_ptr<PlayerQuestComp> *const)&v11.event_center_.context_.pending_que_.c._M_impl._M_finish._M_last,
      (const std::weak_ptr<PlayerQuestComp> *)(p_M_element_count + 64));
    PlayerEventComp::registerObserver<PlayerQuestComp,PostEnterSceneEvent>(
      (PlayerEventComp *const)&v10.event_center_.observer_list_map_._M_h._M_bucket_count,
      (std::weak_ptr<PlayerQuestComp> *)event_comp,
      (void (*)(PlayerQuestComp *, const PostEnterSceneEvent *))&v11.event_center_.context_.pending_que_.c._M_impl._M_finish._M_last);
    std::weak_ptr<Observer>::~weak_ptr((std::weak_ptr<Observer> *const)&v10.event_center_.observer_list_map_._M_h._M_bucket_count);
    std::weak_ptr<PlayerQuestComp>::~weak_ptr((std::weak_ptr<PlayerQuestComp> *const)&v11.event_center_.context_.pending_que_.c._M_impl._M_finish._M_last);
    std::weak_ptr<PlayerQuestComp>::weak_ptr(
      (std::weak_ptr<PlayerQuestComp> *const)&v11.event_center_.context_.pending_que_.c._M_impl._M_finish._M_last,
      (const std::weak_ptr<PlayerQuestComp> *)(p_M_element_count + 64));
    PlayerEventComp::registerObserver<PlayerQuestComp,CrossSceneRangeEvent>(
      (PlayerEventComp *const)&v10.event_center_.observer_list_map_._M_h._M_element_count,
      (std::weak_ptr<PlayerQuestComp> *)event_comp,
      (void (*)(PlayerQuestComp *, const CrossSceneRangeEvent *))&v11.event_center_.context_.pending_que_.c._M_impl._M_finish._M_last);
    std::weak_ptr<Observer>::~weak_ptr((std::weak_ptr<Observer> *const)&v10.event_center_.observer_list_map_._M_h._M_element_count);
    std::weak_ptr<PlayerQuestComp>::~weak_ptr((std::weak_ptr<PlayerQuestComp> *const)&v11.event_center_.context_.pending_que_.c._M_impl._M_finish._M_last);
    std::weak_ptr<PlayerQuestComp>::weak_ptr(
      (std::weak_ptr<PlayerQuestComp> *const)&v11.event_center_.context_.pending_que_.c._M_impl._M_finish._M_last,
      (const std::weak_ptr<PlayerQuestComp> *)(p_M_element_count + 64));
    PlayerEventComp::registerObserver<PlayerQuestComp,IrodoriFinishFlowerThemeEvent>(
      (PlayerEventComp *const)&v10.event_center_.observer_list_map_._M_h._M_rehash_policy._M_next_resize,
      (std::weak_ptr<PlayerQuestComp> *)event_comp,
      (void (*)(PlayerQuestComp *, const IrodoriFinishFlowerThemeEvent *))&v11.event_center_.context_.pending_que_.c._M_impl._M_finish._M_last);
    std::weak_ptr<Observer>::~weak_ptr((std::weak_ptr<Observer> *const)&v10.event_center_.observer_list_map_._M_h._M_rehash_policy._M_next_resize);
    std::weak_ptr<PlayerQuestComp>::~weak_ptr((std::weak_ptr<PlayerQuestComp> *const)&v11.event_center_.context_.pending_que_.c._M_impl._M_finish._M_last);
    std::weak_ptr<PlayerQuestComp>::weak_ptr(
      (std::weak_ptr<PlayerQuestComp> *const)&v11.event_center_.context_.pending_que_.c._M_impl._M_finish._M_last,
      (const std::weak_ptr<PlayerQuestComp> *)(p_M_element_count + 64));
    PlayerEventComp::registerObserver<PlayerQuestComp,IrodoriPoetryReachMinProgressEvent>(
      (PlayerEventComp *const)&v10.is_started_,
      (std::weak_ptr<PlayerQuestComp> *)event_comp,
      (void (*)(PlayerQuestComp *, const IrodoriPoetryReachMinProgressEvent *))&v11.event_center_.context_.pending_que_.c._M_impl._M_finish._M_last);
    std::weak_ptr<Observer>::~weak_ptr((std::weak_ptr<Observer> *const)&v10.is_started_);
    std::weak_ptr<PlayerQuestComp>::~weak_ptr((std::weak_ptr<PlayerQuestComp> *const)&v11.event_center_.context_.pending_que_.c._M_impl._M_finish._M_last);
    std::weak_ptr<PlayerQuestComp>::weak_ptr(
      (std::weak_ptr<PlayerQuestComp> *const)&v11.event_center_.context_.pending_que_.c._M_impl._M_finish._M_last,
      (const std::weak_ptr<PlayerQuestComp> *)(p_M_element_count + 64));
    PlayerEventComp::registerObserver<PlayerQuestComp,IrodoriFinishPoetryThemeEvent>(
      &v11,
      (std::weak_ptr<PlayerQuestComp> *)event_comp,
      (void (*)(PlayerQuestComp *, const IrodoriFinishPoetryThemeEvent *))&v11.event_center_.context_.pending_que_.c._M_impl._M_finish._M_last);
    std::weak_ptr<Observer>::~weak_ptr((std::weak_ptr<Observer> *const)&v11);
    std::weak_ptr<PlayerQuestComp>::~weak_ptr((std::weak_ptr<PlayerQuestComp> *const)&v11.event_center_.context_.pending_que_.c._M_impl._M_finish._M_last);
    std::weak_ptr<PlayerQuestComp>::weak_ptr(
      (std::weak_ptr<PlayerQuestComp> *const)&v11.event_center_.context_.pending_que_.c._M_impl._M_finish._M_last,
      (const std::weak_ptr<PlayerQuestComp> *)(p_M_element_count + 64));
    PlayerEventComp::registerObserver<PlayerQuestComp,ActivityTriggerUpdateQuestEvent>(
      (PlayerEventComp *const)&v11._M_weak_this._M_refcount,
      (std::weak_ptr<PlayerQuestComp> *)event_comp,
      (void (*)(PlayerQuestComp *, const ActivityTriggerUpdateQuestEvent *))&v11.event_center_.context_.pending_que_.c._M_impl._M_finish._M_last);
    std::weak_ptr<Observer>::~weak_ptr((std::weak_ptr<Observer> *const)&v11._M_weak_this._M_refcount);
    std::weak_ptr<PlayerQuestComp>::~weak_ptr((std::weak_ptr<PlayerQuestComp> *const)&v11.event_center_.context_.pending_que_.c._M_impl._M_finish._M_last);
    std::weak_ptr<PlayerQuestComp>::weak_ptr(
      (std::weak_ptr<PlayerQuestComp> *const)&v11.event_center_.context_.pending_que_.c._M_impl._M_finish._M_last,
      (const std::weak_ptr<PlayerQuestComp> *)(p_M_element_count + 64));
    PlayerEventComp::registerObserver<PlayerQuestComp,PlayerEnterLeaveRegionEvent>(
      (PlayerEventComp *const)&v11.event_center_,
      (std::weak_ptr<PlayerQuestComp> *)event_comp,
      (void (*)(PlayerQuestComp *, const PlayerEnterLeaveRegionEvent *))&v11.event_center_.context_.pending_que_.c._M_impl._M_finish._M_last);
    std::weak_ptr<Observer>::~weak_ptr((std::weak_ptr<Observer> *const)&v11.event_center_);
    std::weak_ptr<PlayerQuestComp>::~weak_ptr((std::weak_ptr<PlayerQuestComp> *const)&v11.event_center_.context_.pending_que_.c._M_impl._M_finish._M_last);
    std::weak_ptr<PlayerQuestComp>::weak_ptr(
      (std::weak_ptr<PlayerQuestComp> *const)&v11.event_center_.context_.pending_que_.c._M_impl._M_finish._M_last,
      (const std::weak_ptr<PlayerQuestComp> *)(p_M_element_count + 64));
    PlayerEventComp::registerObserver<PlayerQuestComp,GadgetStateChangeEvent>(
      (PlayerEventComp *const)&v11.event_center_.context_.pending_que_,
      (std::weak_ptr<PlayerQuestComp> *)event_comp,
      (void (*)(PlayerQuestComp *, const GadgetStateChangeEvent *))&v11.event_center_.context_.pending_que_.c._M_impl._M_finish._M_last);
    std::weak_ptr<Observer>::~weak_ptr((std::weak_ptr<Observer> *const)&v11.event_center_.context_.pending_que_);
    std::weak_ptr<PlayerQuestComp>::~weak_ptr((std::weak_ptr<PlayerQuestComp> *const)&v11.event_center_.context_.pending_que_.c._M_impl._M_finish._M_last);
    std::weak_ptr<PlayerQuestComp>::weak_ptr(
      (std::weak_ptr<PlayerQuestComp> *const)&v11.event_center_.context_.pending_que_.c._M_impl._M_finish._M_last,
      (const std::weak_ptr<PlayerQuestComp> *)(p_M_element_count + 64));
    PlayerEventComp::registerObserver<PlayerQuestComp,AranaraCollectionStateChangeEvent>(
      (PlayerEventComp *const)&v11.event_center_.context_.pending_que_.c._M_impl._M_start,
      (std::weak_ptr<PlayerQuestComp> *)event_comp,
      (void (*)(PlayerQuestComp *, const AranaraCollectionStateChangeEvent *))&v11.event_center_.context_.pending_que_.c._M_impl._M_finish._M_last);
    std::weak_ptr<Observer>::~weak_ptr((std::weak_ptr<Observer> *const)&v11.event_center_.context_.pending_que_.c._M_impl._M_start);
    std::weak_ptr<PlayerQuestComp>::~weak_ptr((std::weak_ptr<PlayerQuestComp> *const)&v11.event_center_.context_.pending_que_.c._M_impl._M_finish._M_last);
    std::weak_ptr<PlayerQuestComp>::weak_ptr(
      (std::weak_ptr<PlayerQuestComp> *const)&v11.event_center_.context_.pending_que_.c._M_impl._M_finish._M_last,
      (const std::weak_ptr<PlayerQuestComp> *)(p_M_element_count + 64));
    PlayerEventComp::registerObserver<PlayerQuestComp,GCGLevelSettleEvent>(
      (PlayerEventComp *const)&v11.event_center_.context_.pending_que_.c._M_impl._M_start._M_last,
      (std::weak_ptr<PlayerQuestComp> *)event_comp,
      (void (*)(PlayerQuestComp *, const GCGLevelSettleEvent *))&v11.event_center_.context_.pending_que_.c._M_impl._M_finish._M_last);
    std::weak_ptr<Observer>::~weak_ptr((std::weak_ptr<Observer> *const)&v11.event_center_.context_.pending_que_.c._M_impl._M_start._M_last);
    std::weak_ptr<PlayerQuestComp>::~weak_ptr((std::weak_ptr<PlayerQuestComp> *const)&v11.event_center_.context_.pending_que_.c._M_impl._M_finish._M_last);
    std::weak_ptr<PlayerQuestComp>::weak_ptr(
      (std::weak_ptr<PlayerQuestComp> *const)&v11.event_center_.context_.pending_que_.c._M_impl._M_finish._M_last,
      (const std::weak_ptr<PlayerQuestComp> *)(p_M_element_count + 64));
    PlayerEventComp::registerObserver<PlayerQuestComp,QuestAvatarRenameEvent>(
      (PlayerEventComp *const)&v11.event_center_.context_.pending_que_.c._M_impl._M_finish,
      (std::weak_ptr<PlayerQuestComp> *)event_comp,
      (void (*)(PlayerQuestComp *, const QuestAvatarRenameEvent *))&v11.event_center_.context_.pending_que_.c._M_impl._M_finish._M_last);
    std::weak_ptr<Observer>::~weak_ptr((std::weak_ptr<Observer> *const)&v11.event_center_.context_.pending_que_.c._M_impl._M_finish);
    std::weak_ptr<PlayerQuestComp>::~weak_ptr((std::weak_ptr<PlayerQuestComp> *const)&v11.event_center_.context_.pending_que_.c._M_impl._M_finish._M_last);
    std::weak_ptr<PlayerQuestComp>::weak_ptr(
      (std::weak_ptr<PlayerQuestComp> *const)&v11.event_center_.context_.pending_que_.c._M_impl._M_finish,
      (const std::weak_ptr<PlayerQuestComp> *)(p_M_element_count + 64));
    PlayerEventComp::registerObserver<PlayerQuestComp,QuestGlobalVarUpdateEvent>(
      (PlayerEventComp *const)&v11.event_center_.context_.pending_que_.c._M_impl._M_finish._M_last,
      (std::weak_ptr<PlayerQuestComp> *)event_comp,
      (void (*)(PlayerQuestComp *, const QuestGlobalVarUpdateEvent *))&v11.event_center_.context_.pending_que_.c._M_impl._M_finish);
    std::weak_ptr<Observer>::~weak_ptr((std::weak_ptr<Observer> *const)&v11.event_center_.context_.pending_que_.c._M_impl._M_finish._M_last);
    std::weak_ptr<PlayerQuestComp>::~weak_ptr((std::weak_ptr<PlayerQuestComp> *const)&v11.event_center_.context_.pending_que_.c._M_impl._M_finish);
    std::weak_ptr<PlayerQuestComp>::~weak_ptr((std::weak_ptr<PlayerQuestComp> *const)(p_M_element_count + 64));
  }
  std::shared_ptr<PlayerQuestComp>::~shared_ptr((std::shared_ptr<PlayerQuestComp> *const)(p_M_element_count + 32));
  if ( &v11.event_center_.observer_list_map_._M_h._M_element_count == (std::_Hashtable<std::type_index,std::pair<const std::type_index,std::vector<std::shared_ptr<Observer>> >,std::allocator<std::pair<const std::type_index,std::vector<std::shared_ptr<Observer>> > >,std::__detail::_Select1st,std::equal_to<std::type_index>,std::hash<std::type_index>,std::__detail::_Mod_range_hashing,std::__detail::_Default_ranged_hash,std::__detail::_Prime_rehash_policy,std::__detail::_Hashtable_traits<false,false,true> >::size_type *)p_M_element_count )
  {
    *(_QWORD *)((p_M_element_count >> 3) + 0x7FFF8000) = 0LL;
    *(_DWORD *)((p_M_element_count >> 3) + 0x7FFF8008) = 0;
  }
  else
  {
    *(_QWORD *)p_M_element_count = 1172321806LL;
    *(_QWORD *)((p_M_element_count >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((p_M_element_count >> 3) + 0x7FFF8008) = -168430091;
  }
};

// Line 593: range 0000000013DD112E-0000000013DD11B4
void __cdecl PlayerQuestComp::clear(PlayerQuestComp *const this)
{
  std::map<unsigned int,std::shared_ptr<Quest>>::clear(&this->quest_map_);
  std::map<unsigned int,std::shared_ptr<ParentQuest>>::clear(&this->parent_quest_map_);
  std::map<data::QuestContentType,std::set<unsigned int>>::clear(&this->event_quest_map_);
  std::unordered_map<unsigned int,std::set<unsigned int>>::clear(&this->item_event_quest_map_);
  std::map<unsigned int,std::set<unsigned int>>::clear(&this->occupied_npc_map_);
  std::set<unsigned int>::clear(&this->mp_block_quest_set_);
  std::map<unsigned int,std::set<unsigned int>>::clear(&this->occupied_place_map_);
};

// Line 605: range 0000000013DD11B6-0000000013DD133E
const PlayerQuestComp *__fastcall PlayerQuestComp::findQuest(
        const PlayerQuestComp *const this,
        __int64 quest_id,
        int a3)
{
  unsigned __int64 v3; // rbx
  __int64 v4; // rax
  _DWORD *v5; // r12
  std::_Rb_tree_const_iterator<std::pair<unsigned int const,std::shared_ptr<Quest> > >::pointer v6; // rax
  std::_Rb_tree_const_iterator<std::pair<unsigned int const,std::shared_ptr<Quest> > >::_Self __y; // [rsp+28h] [rbp-88h] BYREF
  char v10[128]; // [rsp+30h] [rbp-80h] BYREF

  v3 = (unsigned __int64)v10;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_1(96LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "2 48 4 12 quest_id:604 64 8 6 it:606";
  *(_QWORD *)(v3 + 16) = PlayerQuestComp::findQuest;
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = -234556943;
  v5[536862722] = -202116352;
  *(_DWORD *)(v3 + 48) = a3;
  *(std::map<unsigned int,std::shared_ptr<Quest>>::const_iterator *)(v3 + 64) = std::map<unsigned int,std::shared_ptr<Quest>>::find(
                                                                                  (const std::map<unsigned int,std::shared_ptr<Quest>> *const)(quest_id + 32),
                                                                                  (const std::map<unsigned int,std::shared_ptr<Quest>>::key_type *)(v3 + 48));
  __y._M_node = std::map<unsigned int,std::shared_ptr<Quest>>::end((const std::map<unsigned int,std::shared_ptr<Quest>> *const)(quest_id + 32))._M_node;
  if ( std::operator==(
         (const std::_Rb_tree_const_iterator<std::pair<unsigned int const,std::shared_ptr<Quest> > >::_Self *)(v3 + 64),
         &__y) )
  {
    std::shared_ptr<Quest>::shared_ptr((std::shared_ptr<Quest> *const)this, 0LL);
  }
  else
  {
    v6 = std::_Rb_tree_const_iterator<std::pair<unsigned int const,std::shared_ptr<Quest>>>::operator->((const std::_Rb_tree_const_iterator<std::pair<unsigned int const,std::shared_ptr<Quest> > > *const)(v3 + 64));
    std::shared_ptr<Quest>::shared_ptr((std::shared_ptr<Quest> *const)this, &v6->second);
  }
  if ( v10 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8008) = 0;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8008) = -168430091;
  }
  return this;
};

// Line 619: range 0000000013DD1340-0000000013DD14C8
const PlayerQuestComp *__fastcall PlayerQuestComp::findParentQuest(
        const PlayerQuestComp *const this,
        __int64 parent_quest_id,
        int a3)
{
  unsigned __int64 v3; // rbx
  __int64 v4; // rax
  _DWORD *v5; // r12
  std::_Rb_tree_const_iterator<std::pair<unsigned int const,std::shared_ptr<ParentQuest> > >::pointer v6; // rax
  std::_Rb_tree_const_iterator<std::pair<unsigned int const,std::shared_ptr<ParentQuest> > >::_Self __y; // [rsp+28h] [rbp-88h] BYREF
  char v10[128]; // [rsp+30h] [rbp-80h] BYREF

  v3 = (unsigned __int64)v10;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_1(96LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "2 48 4 19 parent_quest_id:618 64 8 6 it:620";
  *(_QWORD *)(v3 + 16) = PlayerQuestComp::findParentQuest;
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = -234556943;
  v5[536862722] = -202116352;
  *(_DWORD *)(v3 + 48) = a3;
  *(std::map<unsigned int,std::shared_ptr<ParentQuest>>::const_iterator *)(v3 + 64) = std::map<unsigned int,std::shared_ptr<ParentQuest>>::find(
                                                                                        (const std::map<unsigned int,std::shared_ptr<ParentQuest>> *const)(parent_quest_id + 80),
                                                                                        (const std::map<unsigned int,std::shared_ptr<ParentQuest>>::key_type *)(v3 + 48));
  __y._M_node = std::map<unsigned int,std::shared_ptr<ParentQuest>>::end((const std::map<unsigned int,std::shared_ptr<ParentQuest>> *const)(parent_quest_id + 80))._M_node;
  if ( std::operator==(
         (const std::_Rb_tree_const_iterator<std::pair<unsigned int const,std::shared_ptr<ParentQuest> > >::_Self *)(v3 + 64),
         &__y) )
  {
    std::shared_ptr<ParentQuest>::shared_ptr((std::shared_ptr<ParentQuest> *const)this, 0LL);
  }
  else
  {
    v6 = std::_Rb_tree_const_iterator<std::pair<unsigned int const,std::shared_ptr<ParentQuest>>>::operator->((const std::_Rb_tree_const_iterator<std::pair<unsigned int const,std::shared_ptr<ParentQuest> > > *const)(v3 + 64));
    std::shared_ptr<ParentQuest>::shared_ptr((std::shared_ptr<ParentQuest> *const)this, &v6->second);
  }
  if ( v10 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8008) = 0;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8008) = -168430091;
  }
  return this;
};

// Line 633: range 0000000013DD14CA-0000000013DD153F
uint32_t __cdecl PlayerQuestComp::findParentQuestId(const PlayerQuestComp *const this, uint32_t quest_id)
{
  const data::QuestExcelConfig *quest_config_ptr; // [rsp+18h] [rbp-8h]

  quest_config_ptr = PlayerQuestComp::findPlayerQuestExcelConfig(this, quest_id);
  if ( !quest_config_ptr )
    return 0;
  if ( *(_BYTE *)(((unsigned __int64)&quest_config_ptr->main_id >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)quest_config_ptr + 12) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&quest_config_ptr->main_id >> 3)
                                                                    + 0x7FFF8000) )
  {
    __asan_report_load4(&quest_config_ptr->main_id);
  }
  return quest_config_ptr->main_id;
};

// Line 647: range 0000000013DD1540-0000000013DD17F6
__int64 __fastcall PlayerQuestComp::findQuestConfigId(PlayerQuestComp *const this, uint32_t quest_id)
{
  unsigned __int64 v2; // r12
  __int64 v3; // rax
  _DWORD *v4; // r13
  common::milog::MiLogStream *v5; // r14
  common::milog::MiLogStream *v6; // rax
  common::milog::MiLogStream *v7; // rax
  common::milog::MiLogStream *v8; // rax
  common::milog::MiLogStream *v9; // rax
  uint32_t RandomQuestConfigId; // r14d
  std::__shared_ptr_access<ParentQuest,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v11; // rax
  __int64 result; // rax
  unsigned int val; // [rsp+1Ch] [rbp-B4h] BYREF
  common::milog::MiLogStream v14; // [rsp+20h] [rbp-B0h] BYREF
  char v15[144]; // [rsp+40h] [rbp-90h] BYREF

  v2 = (unsigned __int64)v15;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_1(96LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "3 32 4 19 parent_quest_id:650 48 4 12 quest_id:646 64 16 20 parent_quest_ptr:651";
  *(_QWORD *)(v2 + 16) = PlayerQuestComp::findQuestConfigId;
  v4 = (_DWORD *)(v2 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = -234556924;
  v4[536862722] = -202178560;
  *(_DWORD *)(v2 + 48) = quest_id;
  if ( PlayerQuestComp::isRandomQuest(this, *(_DWORD *)(v2 + 48)) )
  {
    *(_DWORD *)(v2 + 32) = PlayerQuestComp::findParentQuestId(this, *(_DWORD *)(v2 + 48));
    PlayerQuestComp::findParentQuest((const PlayerQuestComp *const)(v2 + 64), (__int64)this, *(_DWORD *)(v2 + 32));
    if ( std::operator==<ParentQuest>((const std::shared_ptr<ParentQuest> *)(v2 + 64), 0LL) )
    {
      common::milog::MiLogStream::create(
        &v14,
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/player/quest/player_quest_comp.cpp",
        "findQuestConfigId",
        654);
      v5 = common::milog::MiLogStream::operator<<<char [29],(char *[29])0>(
             &v14,
             (const char (*)[29])"findParentQuest failed, uid:");
      if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
        __asan_report_load8(&this->player_);
      val = Player::getUid(this->player_);
      v6 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v5, &val);
      v7 = common::milog::MiLogStream::operator<<<char [18],(char *[18])0>(v6, (const char (*)[18])" parent_quest_id:");
      v8 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v7, (const unsigned int *)(v2 + 32));
      v9 = common::milog::MiLogStream::operator<<<char [11],(char *[11])0>(v8, (const char (*)[11])" quest_id:");
      common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v9, (const unsigned int *)(v2 + 48));
      common::milog::MiLogStream::~MiLogStream(&v14);
      RandomQuestConfigId = 0;
    }
    else
    {
      v11 = std::__shared_ptr_access<ParentQuest,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<ParentQuest,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 64));
      RandomQuestConfigId = ParentQuest::findRandomQuestConfigId(v11, *(_DWORD *)(v2 + 48));
    }
    std::shared_ptr<ParentQuest>::~shared_ptr((std::shared_ptr<ParentQuest> *const)(v2 + 64));
  }
  else
  {
    RandomQuestConfigId = *(_DWORD *)(v2 + 48);
  }
  result = RandomQuestConfigId;
  if ( v15 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8008) = 0;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8008) = -168430091;
  }
  return result;
};

// Line 669: range 0000000013DD17F8-0000000013DD1A0A
data::QuestState __cdecl PlayerQuestComp::getQuestState(const PlayerQuestComp *const this, uint32_t quest_id)
{
  unsigned __int64 v2; // r12
  __int64 v3; // rax
  _DWORD *v4; // r13
  data::QuestState ChildQuestState; // r14d
  ParentQuest *v6; // rax
  std::__shared_ptr_access<Quest,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v7; // rax
  data::QuestState result; // eax
  int parent_quest_id; // [rsp+1Ch] [rbp-94h]
  char v10[144]; // [rsp+20h] [rbp-90h] BYREF

  v2 = (unsigned __int64)v10;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_1(96LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "2 32 16 13 quest_ptr:670 64 16 20 parent_quest_ptr:678";
  *(_QWORD *)(v2 + 16) = PlayerQuestComp::getQuestState;
  v4 = (_DWORD *)(v2 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = -219021312;
  v4[536862722] = -202178560;
  PlayerQuestComp::findQuest((const PlayerQuestComp *const)(v2 + 32), (__int64)this, quest_id);
  if ( std::operator==<Quest>((const std::shared_ptr<Quest> *)(v2 + 32), 0LL) )
  {
    parent_quest_id = PlayerQuestComp::findParentQuestId(this, quest_id);
    if ( parent_quest_id )
    {
      PlayerQuestComp::findParentQuest((const PlayerQuestComp *const)(v2 + 64), (__int64)this, parent_quest_id);
      if ( std::operator==<ParentQuest>((const std::shared_ptr<ParentQuest> *)(v2 + 64), 0LL) )
      {
        ChildQuestState = QUEST_STATE_NONE;
      }
      else
      {
        v6 = std::__shared_ptr_access<ParentQuest,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<ParentQuest,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 64));
        ChildQuestState = ParentQuest::getChildQuestState(v6, quest_id);
      }
      std::shared_ptr<ParentQuest>::~shared_ptr((std::shared_ptr<ParentQuest> *const)(v2 + 64));
    }
    else
    {
      ChildQuestState = QUEST_STATE_NONE;
    }
  }
  else
  {
    v7 = std::__shared_ptr_access<Quest,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Quest,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 32));
    ChildQuestState = Quest::getState(v7);
  }
  std::shared_ptr<Quest>::~shared_ptr((std::shared_ptr<Quest> *const)(v2 + 32));
  result = ChildQuestState;
  if ( v10 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8008) = 0;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8008) = -168430091;
  }
  return result;
};

// Line 690: range 0000000013DD1A0C-0000000013DD1D7F
bool __fastcall PlayerQuestComp::isSingleModeQuest(PlayerQuestComp *const this, uint32_t quest_id)
{
  unsigned __int64 v2; // rbx
  __int64 v3; // rax
  _DWORD *v4; // r12
  common::milog::MiLogStream *v5; // r14
  common::milog::MiLogStream *v6; // rax
  common::milog::MiLogStream *v7; // rax
  bool result; // al
  common::milog::MiLogStream *v9; // r14
  common::milog::MiLogStream *v10; // rax
  common::milog::MiLogStream *v11; // rax
  unsigned int val; // [rsp+14h] [rbp-BCh] BYREF
  const data::MainQuestExcelConfig *parent_config_ptr; // [rsp+18h] [rbp-B8h]
  common::milog::MiLogStream v14; // [rsp+20h] [rbp-B0h] BYREF
  char v15[144]; // [rsp+40h] [rbp-90h] BYREF

  v2 = (unsigned __int64)v15;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_1(96LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "2 48 4 19 parent_quest_id:691 64 4 12 quest_id:689";
  *(_QWORD *)(v2 + 16) = PlayerQuestComp::isSingleModeQuest;
  v4 = (_DWORD *)(v2 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = -234556943;
  v4[536862722] = -202116348;
  *(_DWORD *)(v2 + 64) = quest_id;
  *(_DWORD *)(v2 + 48) = PlayerQuestComp::findParentQuestId(this, *(_DWORD *)(v2 + 64));
  if ( *(_DWORD *)(v2 + 48) )
  {
    parent_config_ptr = PlayerQuestComp::findPlayerParentQuestExcelConfig(this, *(_DWORD *)(v2 + 48));
    if ( parent_config_ptr )
    {
      if ( *(_BYTE *)(((unsigned __int64)&parent_config_ptr->active_mode >> 3) + 0x7FFF8000) != 0
        && *(_BYTE *)(((unsigned __int64)&parent_config_ptr->active_mode >> 3) + 0x7FFF8000) <= 3 )
      {
        __asan_report_load4(&parent_config_ptr->active_mode);
      }
      result = parent_config_ptr->active_mode == PLAY_MODE_SINGLE;
    }
    else
    {
      common::milog::MiLogStream::create(
        &v14,
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/player/quest/player_quest_comp.cpp",
        "isSingleModeQuest",
        701);
      v9 = common::milog::MiLogStream::operator<<<char [46],(char *[46])0>(
             &v14,
             (const char (*)[46])"findPlayerParentQuestExcelConfig failed, uid:");
      if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
        __asan_report_load8(&this->player_);
      val = Player::getUid(this->player_);
      v10 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v9, &val);
      v11 = common::milog::MiLogStream::operator<<<char [18],(char *[18])0>(
              v10,
              (const char (*)[18])" parent_quest_id:");
      common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v11, (const unsigned int *)(v2 + 48));
      common::milog::MiLogStream::~MiLogStream(&v14);
      result = 0;
    }
  }
  else
  {
    common::milog::MiLogStream::create(
      &v14,
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/player/quest/player_quest_comp.cpp",
      "isSingleModeQuest",
      694);
    v5 = common::milog::MiLogStream::operator<<<char [31],(char *[31])0>(
           &v14,
           (const char (*)[31])"findParentQuestId failed, uid:");
    if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
      __asan_report_load8(&this->player_);
    val = Player::getUid(this->player_);
    v6 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v5, &val);
    v7 = common::milog::MiLogStream::operator<<<char [11],(char *[11])0>(v6, (const char (*)[11])" quest_id:");
    common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v7, (const unsigned int *)(v2 + 64));
    common::milog::MiLogStream::~MiLogStream(&v14);
    result = 0;
  }
  if ( v15 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8008) = 0;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8008) = -168430091;
  }
  return result;
};

// Line 710: range 0000000013DD1D80-0000000013DD1FB3
bool __fastcall PlayerQuestComp::isSingleModeParentQuest(PlayerQuestComp *const this, uint32_t parent_quest_id)
{
  unsigned __int64 v2; // rbx
  __int64 v3; // rax
  unsigned __int64 v4; // r12
  common::milog::MiLogStream *v5; // r14
  common::milog::MiLogStream *v6; // rax
  common::milog::MiLogStream *v7; // rax
  bool result; // al
  unsigned int val; // [rsp+14h] [rbp-9Ch] BYREF
  const data::MainQuestExcelConfig *parent_config_ptr; // [rsp+18h] [rbp-98h]
  common::milog::MiLogStream v11; // [rsp+20h] [rbp-90h] BYREF
  char v12[112]; // [rsp+40h] [rbp-70h] BYREF

  v2 = (unsigned __int64)v12;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_0(64LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "1 32 4 19 parent_quest_id:709";
  *(_QWORD *)(v2 + 16) = PlayerQuestComp::isSingleModeParentQuest;
  v4 = v2 >> 3;
  *(_DWORD *)(v4 + 2147450880) = -235802127;
  *(_DWORD *)(v4 + 2147450884) = -202116348;
  *(_DWORD *)(v2 + 32) = parent_quest_id;
  parent_config_ptr = PlayerQuestComp::findPlayerParentQuestExcelConfig(this, *(_DWORD *)(v2 + 32));
  if ( parent_config_ptr )
  {
    if ( *(_BYTE *)(((unsigned __int64)&parent_config_ptr->active_mode >> 3) + 0x7FFF8000) != 0
      && *(_BYTE *)(((unsigned __int64)&parent_config_ptr->active_mode >> 3) + 0x7FFF8000) <= 3 )
    {
      __asan_report_load4(&parent_config_ptr->active_mode);
    }
    result = parent_config_ptr->active_mode == PLAY_MODE_SINGLE;
  }
  else
  {
    common::milog::MiLogStream::create(
      &v11,
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/player/quest/player_quest_comp.cpp",
      "isSingleModeParentQuest",
      714);
    v5 = common::milog::MiLogStream::operator<<<char [46],(char *[46])0>(
           &v11,
           (const char (*)[46])"findPlayerParentQuestExcelConfig failed, uid:");
    if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
      __asan_report_load8(&this->player_);
    val = Player::getUid(this->player_);
    v6 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v5, &val);
    v7 = common::milog::MiLogStream::operator<<<char [18],(char *[18])0>(v6, (const char (*)[18])" parent_quest_id:");
    common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v7, (const unsigned int *)(v2 + 32));
    common::milog::MiLogStream::~MiLogStream(&v11);
    result = 0;
  }
  if ( v12 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 723: range 0000000013DD20E8-0000000013DD259E
__int64 __fastcall PlayerQuestComp::isMainQuestBeginQuest(PlayerQuestComp *const this, uint32_t quest_id)
{
  unsigned __int64 v2; // r13
  __int64 v3; // rax
  _DWORD *v4; // r12
  common::milog::MiLogStream *v5; // r14
  common::milog::MiLogStream *v6; // rax
  common::milog::MiLogStream *v7; // rax
  common::milog::MiLogStream *v8; // rax
  common::milog::MiLogStream *v9; // rax
  const unsigned int *M_current; // r15
  std::vector<unsigned int>::const_iterator v11; // rax
  std::vector<std::pair<unsigned int,int>>::iterator v12; // rax
  PlayerQuestComp::isMainQuestBeginQuest::<lambda(const auto:23&, const auto:24&)> v13; // dl
  __gnu_cxx::__normal_iterator<std::pair<unsigned int,int>*,std::vector<std::pair<unsigned int,int>> >::pointer v14; // rax
  _DWORD *v15; // rdx
  __int64 result; // rax
  std::vector<std::pair<unsigned int,int>> *__result; // [rsp+8h] [rbp-128h]
  unsigned int val; // [rsp+2Ch] [rbp-104h] BYREF
  __gnu_cxx::__normal_iterator<std::pair<unsigned int,int>*,std::vector<std::pair<unsigned int,int>> > __rhs; // [rsp+30h] [rbp-100h] BYREF
  const data::MainQuestExcelConfig *parent_config_ptr; // [rsp+38h] [rbp-F8h]
  common::milog::MiLogStream v21; // [rsp+40h] [rbp-F0h] BYREF
  char v22[208]; // [rsp+60h] [rbp-D0h] BYREF

  v2 = (unsigned __int64)v22;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_2(160LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "4 32 4 19 parent_quest_id:724 48 4 12 quest_id:722 64 8 8 iter:754 96 24 25 child_quest_order_vec:738";
  *(_QWORD *)(v2 + 16) = PlayerQuestComp::isMainQuestBeginQuest;
  v4 = (_DWORD *)(v2 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = -234556924;
  v4[536862722] = -218959360;
  v4[536862723] = -218103808;
  v4[536862724] = -202116109;
  *(_DWORD *)(v2 + 48) = quest_id;
  *(_DWORD *)(v2 + 32) = PlayerQuestComp::findParentQuestId(this, *(_DWORD *)(v2 + 48));
  if ( *(_DWORD *)(v2 + 32) )
  {
    parent_config_ptr = PlayerQuestComp::findPlayerParentQuestExcelConfig(this, *(_DWORD *)(v2 + 32));
    if ( parent_config_ptr )
    {
      std::vector<std::pair<unsigned int,int>>::vector((std::vector<std::pair<unsigned int,int>> *const)(v2 + 96));
      __result = std::back_inserter<std::vector<std::pair<unsigned int,int>>>((std::vector<std::pair<unsigned int,int>> *)(v2 + 96)).container;
      M_current = std::vector<unsigned int>::end(&parent_config_ptr->child_quest_list)._M_current;
      v11._M_current = std::vector<unsigned int>::begin(&parent_config_ptr->child_quest_list)._M_current;
      std::transform<__gnu_cxx::__normal_iterator<unsigned int const*,std::vector<unsigned int>>,std::back_insert_iterator<std::vector<std::pair<unsigned int,int>>>,PlayerQuestComp::isMainQuestBeginQuest(unsigned int)::{lambda(unsigned int)#1}>(
        v11,
        (__gnu_cxx::__normal_iterator<unsigned int const*,std::vector<unsigned int> >)M_current,
        (std::back_insert_iterator<std::vector<std::pair<unsigned int,int>> >)__result,
        (PlayerQuestComp::isMainQuestBeginQuest::<lambda(uint32_t)>)this);
      v5 = (common::milog::MiLogStream *)std::vector<std::pair<unsigned int,int>>::end((std::vector<std::pair<unsigned int,int>> *const)(v2 + 96))._M_current;
      v12._M_current = std::vector<std::pair<unsigned int,int>>::begin((std::vector<std::pair<unsigned int,int>> *const)(v2 + 96))._M_current;
      *(__gnu_cxx::__normal_iterator<std::pair<unsigned int,int>*,std::vector<std::pair<unsigned int,int>> > *)(v2 + 64) = std::min_element___gnu_cxx::__normal_iterator_std::pair_unsigned_int_int___std::vector_std::pair_unsigned_int_int______PlayerQuestComp::isMainQuestBeginQuest_uint32_t_::_lambda_const_auto_23__const_auto_24_____(v12, (__gnu_cxx::__normal_iterator<std::pair<unsigned int,int>*,std::vector<std::pair<unsigned int,int>> >)v5, v13);
      __rhs._M_current = std::vector<std::pair<unsigned int,int>>::end((std::vector<std::pair<unsigned int,int>> *const)(v2 + 96))._M_current;
      if ( __gnu_cxx::operator==<std::pair<unsigned int,int> *,std::vector<std::pair<unsigned int,int>>>(
             (const __gnu_cxx::__normal_iterator<std::pair<unsigned int,int>*,std::vector<std::pair<unsigned int,int>> > *)(v2 + 64),
             &__rhs) )
      {
        LODWORD(v5) = 0;
      }
      else
      {
        v14 = __gnu_cxx::__normal_iterator<std::pair<unsigned int,int> *,std::vector<std::pair<unsigned int,int>>>::operator->((const __gnu_cxx::__normal_iterator<std::pair<unsigned int,int>*,std::vector<std::pair<unsigned int,int>> > *const)(v2 + 64));
        v15 = v14;
        if ( *(_BYTE *)(((unsigned __int64)v14 >> 3) + 0x7FFF8000) != 0
          && (char)(((unsigned __int8)v14 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)v14 >> 3) + 0x7FFF8000) )
        {
          __asan_report_load4(v14);
        }
        LOBYTE(v5) = *v15 == *(_DWORD *)(v2 + 48);
      }
      std::vector<std::pair<unsigned int,int>>::~vector((std::vector<std::pair<unsigned int,int>> *const)(v2 + 96));
    }
    else
    {
      common::milog::MiLogStream::create(
        &v21,
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/player/quest/player_quest_comp.cpp",
        "isMainQuestBeginQuest",
        734);
      v5 = common::milog::MiLogStream::operator<<<char [46],(char *[46])0>(
             &v21,
             (const char (*)[46])"findPlayerParentQuestExcelConfig failed, uid:");
      if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
        __asan_report_load8(&this->player_);
      val = Player::getUid(this->player_);
      v8 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v5, &val);
      v9 = common::milog::MiLogStream::operator<<<char [18],(char *[18])0>(v8, (const char (*)[18])" parent_quest_id:");
      common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v9, (const unsigned int *)(v2 + 32));
      common::milog::MiLogStream::~MiLogStream(&v21);
      LODWORD(v5) = 0;
    }
  }
  else
  {
    common::milog::MiLogStream::create(
      &v21,
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/player/quest/player_quest_comp.cpp",
      "isMainQuestBeginQuest",
      727);
    v5 = common::milog::MiLogStream::operator<<<char [31],(char *[31])0>(
           &v21,
           (const char (*)[31])"findParentQuestId failed, uid:");
    if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
      __asan_report_load8(&this->player_);
    val = Player::getUid(this->player_);
    v6 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v5, &val);
    v7 = common::milog::MiLogStream::operator<<<char [11],(char *[11])0>(v6, (const char (*)[11])" quest_id:");
    common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v7, (const unsigned int *)(v2 + 48));
    common::milog::MiLogStream::~MiLogStream(&v21);
    LODWORD(v5) = 0;
  }
  result = (unsigned int)v5;
  if ( v22 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8010) = 0;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8010) = -168430091;
  }
  return result;
};

// Line 743: range 0000000013DD1FB4-0000000013DD20E6
std::pair<unsigned int,int> __fastcall PlayerQuestComp::isMainQuestBeginQuest(unsigned int)::{lambda(unsigned int)#1}::operator()(
        unsigned __int64 __closure,
        uint32_t child_quest_id)
{
  unsigned __int64 v2; // rbx
  __int64 v3; // rax
  unsigned __int64 v4; // r12
  std::pair<unsigned int,int> result; // rax
  int __y; // [rsp+14h] [rbp-6Ch] BYREF
  const data::QuestExcelConfig *quest_config_ptr; // [rsp+18h] [rbp-68h]
  char v8[96]; // [rsp+20h] [rbp-60h] BYREF

  v2 = (unsigned __int64)v8;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_0(64LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "1 32 4 18 child_quest_id:743";
  *(_QWORD *)(v2 + 16) = PlayerQuestComp::isMainQuestBeginQuest(unsigned int)::{lambda(unsigned int)#1}::operator();
  v4 = v2 >> 3;
  *(_DWORD *)(v4 + 2147450880) = -235802127;
  *(_DWORD *)(v4 + 2147450884) = -202116348;
  *(_DWORD *)(v2 + 32) = child_quest_id;
  if ( *(_BYTE *)((__closure >> 3) + 0x7FFF8000) )
    __asan_report_load8(__closure);
  quest_config_ptr = PlayerQuestComp::findPlayerQuestExcelConfig(
                       *(const PlayerQuestComp *const *)__closure,
                       *(_DWORD *)(v2 + 32));
  if ( quest_config_ptr )
  {
    result = std::make_pair<unsigned int &,int const&>((unsigned int *)(v2 + 32), &quest_config_ptr->order);
  }
  else
  {
    __y = std::numeric_limits<int>::max();
    result = std::make_pair<unsigned int &,int>((unsigned int *)(v2 + 32), &__y);
  }
  if ( v8 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 755: range 0000000013E967F0-0000000013E9688F
bool __cdecl PlayerQuestComp::isMainQuestBeginQuest::_lambda_const_auto_23___const_auto_24___::operator()_std::pair_unsigned_int_int__std::pair_unsigned_int_int___(
        const PlayerQuestComp::isMainQuestBeginQuest::<lambda(const auto:23&, const auto:24&)> *const __closure,
        const std::pair<unsigned int,int> *a,
        const std::pair<unsigned int,int> *b)
{
  int second; // ecx

  if ( *(_BYTE *)(((unsigned __int64)&a->second >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)a + 4) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&a->second >> 3) + 0x7FFF8000) )
  {
    __asan_report_load4(&a->second);
  }
  second = a->second;
  if ( *(_BYTE *)(((unsigned __int64)&b->second >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)b + 4) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&b->second >> 3) + 0x7FFF8000) )
  {
    __asan_report_load4(&b->second);
  }
  return second < b->second;
};

// Line 765: range 0000000013DD25A0-0000000013DD26B6
bool __cdecl PlayerQuestComp::isParentQuestOnceFinished(const PlayerQuestComp *const this, uint32_t parent_quest_id)
{
  unsigned __int64 v2; // rbx
  __int64 v3; // rax
  unsigned __int64 v4; // r12
  bool v5; // r14
  ParentQuest *v6; // rax
  bool result; // al
  char v8[112]; // [rsp+10h] [rbp-70h] BYREF

  v2 = (unsigned __int64)v8;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_0(64LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "1 32 16 20 parent_quest_ptr:766";
  *(_QWORD *)(v2 + 16) = PlayerQuestComp::isParentQuestOnceFinished;
  v4 = v2 >> 3;
  *(_DWORD *)(v4 + 2147450880) = -235802127;
  *(_DWORD *)(v4 + 2147450884) = -202178560;
  PlayerQuestComp::findParentQuest((const PlayerQuestComp *const)(v2 + 32), (__int64)this, parent_quest_id);
  if ( std::operator==<ParentQuest>(0LL, (const std::shared_ptr<ParentQuest> *)(v2 + 32)) )
  {
    v5 = 0;
  }
  else
  {
    v6 = std::__shared_ptr_access<ParentQuest,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<ParentQuest,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 32));
    v5 = ParentQuest::getTotalFinishCount(v6) != 0;
  }
  std::shared_ptr<ParentQuest>::~shared_ptr((std::shared_ptr<ParentQuest> *const)(v2 + 32));
  result = v5;
  if ( v8 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 776: range 0000000013DD26B8-0000000013DD2809
bool __cdecl PlayerQuestComp::isQuestResCollectionFinished(const PlayerQuestComp *const this, uint32_t quest_res_id)
{
  std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v2; // rax
  unsigned int *v4; // rax
  uint32_t *v5; // rdx
  std::set<unsigned int>::iterator __for_begin; // [rsp+20h] [rbp-40h] BYREF
  std::set<unsigned int>::iterator __for_end; // [rsp+28h] [rbp-38h] BYREF
  const std::set<unsigned int> *parent_quest_id_set_ptr; // [rsp+30h] [rbp-30h]
  const std::set<unsigned int> *__for_range; // [rsp+38h] [rbp-28h]
  std::shared_ptr<Config> v10[2]; // [rsp+40h] [rbp-20h] BYREF

  ServiceBox::findService<GameserverService>();
  GameserverService::getConfig((GameserverService *const)v10);
  v2 = std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false> *const)v10);
  parent_quest_id_set_ptr = QuestExcelConfigMgr::findParentQuestIdSetByResCollection(
                              &v2->design_config.txt_config_mgr.quest_config_mgr,
                              quest_res_id);
  std::shared_ptr<Config>::~shared_ptr(v10);
  if ( !parent_quest_id_set_ptr )
    return 0;
  __for_range = parent_quest_id_set_ptr;
  __for_begin._M_node = std::set<unsigned int>::begin(parent_quest_id_set_ptr)._M_node;
  __for_end._M_node = std::set<unsigned int>::end(parent_quest_id_set_ptr)._M_node;
  while ( std::operator!=(&__for_begin, &__for_end) )
  {
    v4 = (unsigned int *)std::_Rb_tree_const_iterator<unsigned int>::operator*(&__for_begin);
    v5 = v4;
    if ( *(_BYTE *)(((unsigned __int64)v4 >> 3) + 0x7FFF8000) != 0
      && (char)(((unsigned __int8)v4 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)v4 >> 3) + 0x7FFF8000) )
    {
      __asan_report_load4(v4);
    }
    if ( !PlayerQuestComp::isParentQuestOnceFinished(this, *v5) )
      return 0;
    std::_Rb_tree_const_iterator<unsigned int>::operator++(&__for_begin);
  }
  return 1;
};

// Line 798: range 0000000013DD280A-0000000013DD2945
void __cdecl PlayerQuestComp::getAllFinishQuestResCollection(
        const PlayerQuestComp *const this,
        std::set<unsigned int> *quest_res_collection)
{
  std::unordered_map<unsigned int,data::QuestResCollectionExcelConfig>::const_iterator __for_begin; // [rsp+10h] [rbp-40h] BYREF
  std::unordered_map<unsigned int,data::QuestResCollectionExcelConfig>::const_iterator __for_end; // [rsp+18h] [rbp-38h] BYREF
  const std::unordered_map<unsigned int,data::QuestResCollectionExcelConfig> *__for_range; // [rsp+20h] [rbp-30h]
  const std::pair<unsigned int const,data::QuestResCollectionExcelConfig> *v5; // [rsp+28h] [rbp-28h]
  std::tuple_element<0,const std::pair<unsigned int const,data::QuestResCollectionExcelConfig> >::type *quest_res_id; // [rsp+30h] [rbp-20h]
  std::tuple_element<1,const std::pair<unsigned int const,data::QuestResCollectionExcelConfig> >::type *quest_res_collection_config; // [rsp+38h] [rbp-18h]
  std::shared_ptr<Config> v8; // [rsp+40h] [rbp-10h] BYREF

  std::set<unsigned int>::clear(quest_res_collection);
  ServiceBox::findService<GameserverService>();
  GameserverService::getConfig((GameserverService *const)&v8);
  __for_range = &std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false> *const)&v8)->design_config.txt_config_mgr.quest_config_mgr.quest_res_collection_excel_config_map;
  std::shared_ptr<Config>::~shared_ptr(&v8);
  __for_begin._M_cur = std::unordered_map<unsigned int,data::QuestResCollectionExcelConfig>::begin(__for_range)._M_cur;
  __for_end._M_cur = std::unordered_map<unsigned int,data::QuestResCollectionExcelConfig>::end(__for_range)._M_cur;
  while ( std::__detail::operator!=<std::pair<unsigned int const,data::QuestResCollectionExcelConfig>,false>(
            &__for_begin,
            &__for_end) )
  {
    v5 = std::__detail::_Node_const_iterator<std::pair<unsigned int const,data::QuestResCollectionExcelConfig>,false,false>::operator*(&__for_begin);
    quest_res_id = std::get<0ul,unsigned int const,data::QuestResCollectionExcelConfig>(v5);
    quest_res_collection_config = (std::tuple_element<1,const std::pair<unsigned int const,data::QuestResCollectionExcelConfig> >::type *)std::get<1ul,unsigned int const,data::QuestResCollectionExcelConfig>(v5);
    if ( *(_BYTE *)(((unsigned __int64)quest_res_id >> 3) + 0x7FFF8000) != 0
      && (char)(((unsigned __int8)quest_res_id & 7) + 3) >= *(_BYTE *)(((unsigned __int64)quest_res_id >> 3) + 0x7FFF8000) )
    {
      __asan_report_load4(quest_res_id);
    }
    if ( PlayerQuestComp::isQuestResCollectionFinished(this, *quest_res_id) )
      std::set<unsigned int>::insert(quest_res_collection, quest_res_id);
    std::__detail::_Node_const_iterator<std::pair<unsigned int const,data::QuestResCollectionExcelConfig>,false,false>::operator++(&__for_begin);
  }
};

// Line 814: range 0000000013DD2946-0000000013DD2988
uint32_t __cdecl PlayerQuestComp::getUid(const PlayerQuestComp *const this)
{
  if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
    __asan_report_load8(&this->player_);
  return Player::getUid(this->player_);
};

// Line 820: range 0000000013DD298A-0000000013DD3244
__int64 __fastcall PlayerQuestComp::getQuestTalkHistory(
        PlayerQuestComp *const this,
        uint32_t parent_quest_id,
        std::vector<unsigned int> *history_talk_vec)
{
  unsigned __int64 v3; // r13
  __int64 v4; // rax
  _DWORD *v5; // r12
  common::milog::MiLogStream *v6; // rax
  unsigned int v7; // r14d
  unsigned int *v8; // rax
  int *v9; // rdx
  std::__shared_ptr_access<Quest,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v10; // rax
  std::__shared_ptr_access<Quest,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v11; // rax
  std::__shared_ptr_access<Quest,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v12; // rax
  Quest *v14; // rax
  std::map<unsigned int,Quest::QuestTalkRecord>::mapped_type *v15; // rax
  std::tuple_element<1,const std::pair<unsigned int const,Quest::QuestTalkRecord> >::type *v16; // rdx
  uint32_t talk_time; // ecx
  Quest::QuestTalkRecord *M_current; // r14
  std::vector<Quest::QuestTalkRecord>::iterator v19; // rax
  PlayerQuestComp::getQuestTalkHistory::<lambda(const auto:25&, const auto:26&)> v20; // dl
  __int64 result; // rax
  std::vector<unsigned int>::const_iterator __for_begin; // [rsp+28h] [rbp-1E8h] BYREF
  std::vector<unsigned int>::const_iterator __for_end; // [rsp+30h] [rbp-1E0h] BYREF
  std::map<unsigned int,Quest::QuestTalkRecord>::const_iterator __for_begin_0; // [rsp+38h] [rbp-1D8h] BYREF
  std::map<unsigned int,Quest::QuestTalkRecord>::const_iterator __for_end_0; // [rsp+40h] [rbp-1D0h] BYREF
  std::map<unsigned int,Quest::QuestTalkRecord>::iterator __for_end_1; // [rsp+48h] [rbp-1C8h] BYREF
  const data::MainQuestExcelConfig *parent_quest_config_ptr; // [rsp+50h] [rbp-1C0h]
  const std::vector<unsigned int> *__for_range; // [rsp+58h] [rbp-1B8h]
  std::map<unsigned int,Quest::QuestTalkRecord> *__for_range_1; // [rsp+60h] [rbp-1B0h]
  std::vector<Quest::QuestTalkRecord> *__for_range_2; // [rsp+68h] [rbp-1A8h]
  const Quest::QuestTalkRecord *talk_record_1; // [rsp+70h] [rbp-1A0h]
  const std::pair<unsigned int const,Quest::QuestTalkRecord> *v33; // [rsp+78h] [rbp-198h]
  std::tuple_element<0,const std::pair<unsigned int const,Quest::QuestTalkRecord> >::type *talk_id_0; // [rsp+80h] [rbp-190h]
  std::tuple_element<1,const std::pair<unsigned int const,Quest::QuestTalkRecord> >::type *talk_record_0; // [rsp+88h] [rbp-188h]
  const std::map<unsigned int,Quest::QuestTalkRecord> *quest_talk_history_map; // [rsp+90h] [rbp-180h]
  const std::map<unsigned int,Quest::QuestTalkRecord> *__for_range_0; // [rsp+98h] [rbp-178h]
  const std::pair<unsigned int const,Quest::QuestTalkRecord> *v38; // [rsp+A0h] [rbp-170h]
  std::tuple_element<0,const std::pair<unsigned int const,Quest::QuestTalkRecord> >::type *talk_id; // [rsp+A8h] [rbp-168h]
  std::tuple_element<1,const std::pair<unsigned int const,Quest::QuestTalkRecord> >::type *quest_talk_record; // [rsp+B0h] [rbp-160h]
  Quest::QuestTalkRecord *talk_record; // [rsp+B8h] [rbp-158h]
  common::milog::MiLogStream v42; // [rsp+C0h] [rbp-150h] BYREF
  char v43[304]; // [rsp+E0h] [rbp-130h] BYREF

  v3 = (unsigned __int64)v43;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_2(256LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "5 32 4 19 parent_quest_id:819 48 8 8 iter:848 80 16 13 quest_ptr:832 112 24 12 talk_vec:864 176 "
                        "48 12 talk_map:822";
  *(_QWORD *)(v3 + 16) = PlayerQuestComp::getQuestTalkHistory;
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = 61956;
  v5[536862721] = -234881024;
  v5[536862722] = 62194;
  v5[536862723] = 62194;
  v5[536862724] = -218959360;
  v5[536862725] = 62194;
  v5[536862727] = -202116109;
  *(_DWORD *)(v3 + 32) = parent_quest_id;
  std::map<unsigned int,Quest::QuestTalkRecord>::map((std::map<unsigned int,Quest::QuestTalkRecord> *const)(v3 + 176));
  parent_quest_config_ptr = PlayerQuestComp::findPlayerParentQuestExcelConfig(this, *(_DWORD *)(v3 + 32));
  if ( parent_quest_config_ptr )
  {
    __for_range = &parent_quest_config_ptr->child_quest_list;
    __for_begin._M_current = std::vector<unsigned int>::begin(&parent_quest_config_ptr->child_quest_list)._M_current;
    __for_end._M_current = std::vector<unsigned int>::end(&parent_quest_config_ptr->child_quest_list)._M_current;
    while ( __gnu_cxx::operator!=<unsigned int const*,std::vector<unsigned int>>(&__for_begin, &__for_end) )
    {
      v8 = (unsigned int *)__gnu_cxx::__normal_iterator<unsigned int const*,std::vector<unsigned int>>::operator*(&__for_begin);
      v9 = (int *)v8;
      if ( *(_BYTE *)(((unsigned __int64)v8 >> 3) + 0x7FFF8000) != 0
        && (char)(((unsigned __int8)v8 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)v8 >> 3) + 0x7FFF8000) )
      {
        __asan_report_load4(v8);
      }
      PlayerQuestComp::findQuest((const PlayerQuestComp *const)(v3 + 80), (__int64)this, *v9);
      if ( !std::operator==<Quest>((const std::shared_ptr<Quest> *)(v3 + 80), 0LL) )
      {
        v10 = std::__shared_ptr_access<Quest,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Quest,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 80));
        if ( Quest::getState(v10) == QUEST_STATE_UNFINISHED
          || (v11 = std::__shared_ptr_access<Quest,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Quest,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 80)),
              Quest::getState(v11) == QUEST_STATE_FINISHED)
          || (v12 = std::__shared_ptr_access<Quest,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Quest,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 80)),
              Quest::getState(v12) == QUEST_STATE_FAILED) )
        {
          v14 = std::__shared_ptr_access<Quest,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Quest,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 80));
          quest_talk_history_map = Quest::getTalkHistory(v14);
          __for_range_0 = quest_talk_history_map;
          __for_begin_0._M_node = std::map<unsigned int,Quest::QuestTalkRecord>::begin(quest_talk_history_map)._M_node;
          __for_end_0._M_node = std::map<unsigned int,Quest::QuestTalkRecord>::end(__for_range_0)._M_node;
          while ( std::operator!=(&__for_begin_0, &__for_end_0) )
          {
            v38 = std::_Rb_tree_const_iterator<std::pair<unsigned int const,Quest::QuestTalkRecord>>::operator*(&__for_begin_0);
            talk_id = std::get<0ul,unsigned int const,Quest::QuestTalkRecord>(v38);
            quest_talk_record = (std::tuple_element<1,const std::pair<unsigned int const,Quest::QuestTalkRecord> >::type *)std::get<1ul,unsigned int const,Quest::QuestTalkRecord>(v38);
            *(std::map<unsigned int,Quest::QuestTalkRecord>::iterator *)(v3 + 48) = std::map<unsigned int,Quest::QuestTalkRecord>::find(
                                                                                      (std::map<unsigned int,Quest::QuestTalkRecord> *const)(v3 + 176),
                                                                                      talk_id);
            __for_end_1._M_node = std::map<unsigned int,Quest::QuestTalkRecord>::end((std::map<unsigned int,Quest::QuestTalkRecord> *const)(v3 + 176))._M_node;
            if ( std::operator==(
                   (const std::_Rb_tree_iterator<std::pair<unsigned int const,Quest::QuestTalkRecord> >::_Self *)(v3 + 48),
                   &__for_end_1) )
            {
              v15 = std::map<unsigned int,Quest::QuestTalkRecord>::operator[](
                      (std::map<unsigned int,Quest::QuestTalkRecord> *const)(v3 + 176),
                      talk_id);
              v16 = v15;
              if ( ((unsigned __int8)v15 & 7) >= *(_BYTE *)(((unsigned __int64)v15 >> 3) + 0x7FFF8000)
                && *(_BYTE *)(((unsigned __int64)v15 >> 3) + 0x7FFF8000) != 0
                || *(_BYTE *)((((unsigned __int64)&v15->talk_time + 3) >> 3) + 0x7FFF8000) != 0
                && (((unsigned __int8)v15 + 7) & 7) >= *(_BYTE *)((((unsigned __int64)&v15->talk_time + 3) >> 3)
                                                                + 0x7FFF8000) )
              {
                __asan_report_store_n(v15, 8LL);
              }
              if ( ((unsigned __int8)quest_talk_record & 7) >= *(_BYTE *)(((unsigned __int64)quest_talk_record >> 3)
                                                                        + 0x7FFF8000)
                && *(_BYTE *)(((unsigned __int64)quest_talk_record >> 3) + 0x7FFF8000) != 0
                || *(_BYTE *)((((unsigned __int64)&quest_talk_record->talk_time + 3) >> 3) + 0x7FFF8000) != 0
                && (((unsigned __int8)quest_talk_record + 7) & 7) >= *(_BYTE *)((((unsigned __int64)&quest_talk_record->talk_time
                                                                                + 3) >> 3)
                                                                              + 0x7FFF8000) )
              {
                __asan_report_load_n(quest_talk_record, 8LL);
              }
              *v16 = *quest_talk_record;
            }
            else
            {
              talk_record = &std::_Rb_tree_iterator<std::pair<unsigned int const,Quest::QuestTalkRecord>>::operator->((const std::_Rb_tree_iterator<std::pair<unsigned int const,Quest::QuestTalkRecord> > *const)(v3 + 48))->second;
              if ( *(_BYTE *)(((unsigned __int64)&quest_talk_record->talk_time >> 3) + 0x7FFF8000) != 0
                && (char)((((_BYTE)quest_talk_record + 4) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&quest_talk_record->talk_time >> 3)
                                                                                + 0x7FFF8000) )
              {
                __asan_report_load4(&quest_talk_record->talk_time);
              }
              talk_time = quest_talk_record->talk_time;
              if ( *(_BYTE *)(((unsigned __int64)&talk_record->talk_time >> 3) + 0x7FFF8000) != 0
                && (char)((((_BYTE)talk_record + 4) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&talk_record->talk_time >> 3)
                                                                          + 0x7FFF8000) )
              {
                __asan_report_load4(&talk_record->talk_time);
              }
              if ( talk_time < talk_record->talk_time )
                talk_record->talk_time = quest_talk_record->talk_time;
            }
            std::_Rb_tree_const_iterator<std::pair<unsigned int const,Quest::QuestTalkRecord>>::operator++(&__for_begin_0);
          }
        }
      }
      std::shared_ptr<Quest>::~shared_ptr((std::shared_ptr<Quest> *const)(v3 + 80));
      __gnu_cxx::__normal_iterator<unsigned int const*,std::vector<unsigned int>>::operator++(&__for_begin);
    }
    std::vector<Quest::QuestTalkRecord>::vector((std::vector<Quest::QuestTalkRecord> *const)(v3 + 112));
    __for_range_1 = (std::map<unsigned int,Quest::QuestTalkRecord> *)(v3 + 176);
    *(std::map<unsigned int,Quest::QuestTalkRecord>::iterator *)(v3 + 48) = std::map<unsigned int,Quest::QuestTalkRecord>::begin((std::map<unsigned int,Quest::QuestTalkRecord> *const)(v3 + 176));
    __for_end_1._M_node = std::map<unsigned int,Quest::QuestTalkRecord>::end(__for_range_1)._M_node;
    while ( std::operator!=(
              (const std::_Rb_tree_iterator<std::pair<unsigned int const,Quest::QuestTalkRecord> >::_Self *)(v3 + 48),
              &__for_end_1) )
    {
      v33 = std::_Rb_tree_iterator<std::pair<unsigned int const,Quest::QuestTalkRecord>>::operator*((const std::_Rb_tree_iterator<std::pair<unsigned int const,Quest::QuestTalkRecord> > *const)(v3 + 48));
      talk_id_0 = std::get<0ul,unsigned int const,Quest::QuestTalkRecord>(v33);
      talk_record_0 = (std::tuple_element<1,const std::pair<unsigned int const,Quest::QuestTalkRecord> >::type *)std::get<1ul,unsigned int const,Quest::QuestTalkRecord>(v33);
      std::vector<Quest::QuestTalkRecord>::emplace_back<Quest::QuestTalkRecord const&>(
        (std::vector<Quest::QuestTalkRecord> *const)(v3 + 112),
        talk_record_0,
        talk_record_0);
      std::_Rb_tree_iterator<std::pair<unsigned int const,Quest::QuestTalkRecord>>::operator++((std::_Rb_tree_iterator<std::pair<unsigned int const,Quest::QuestTalkRecord> > *const)(v3 + 48));
    }
    M_current = std::vector<Quest::QuestTalkRecord>::end((std::vector<Quest::QuestTalkRecord> *const)(v3 + 112))._M_current;
    v19._M_current = std::vector<Quest::QuestTalkRecord>::begin((std::vector<Quest::QuestTalkRecord> *const)(v3 + 112))._M_current;
    std::sort___gnu_cxx::__normal_iterator_Quest::QuestTalkRecord__std::vector_Quest::QuestTalkRecord____PlayerQuestComp::getQuestTalkHistory_uint32_t_std::vector_unsigned_int___::_lambda_const_auto_25__const_auto_26_____(
      v19,
      (__gnu_cxx::__normal_iterator<Quest::QuestTalkRecord*,std::vector<Quest::QuestTalkRecord> >)M_current,
      v20);
    __for_range_2 = (std::vector<Quest::QuestTalkRecord> *)(v3 + 112);
    *(std::vector<Quest::QuestTalkRecord>::iterator *)(v3 + 48) = std::vector<Quest::QuestTalkRecord>::begin((std::vector<Quest::QuestTalkRecord> *const)(v3 + 112));
    __for_end_1._M_node = (std::_Rb_tree_iterator<std::pair<unsigned int const,Quest::QuestTalkRecord> >::_Base_ptr)std::vector<Quest::QuestTalkRecord>::end(__for_range_2)._M_current;
    while ( __gnu_cxx::operator!=<Quest::QuestTalkRecord *,std::vector<Quest::QuestTalkRecord>>(
              (const __gnu_cxx::__normal_iterator<Quest::QuestTalkRecord*,std::vector<Quest::QuestTalkRecord> > *)(v3 + 48),
              (const __gnu_cxx::__normal_iterator<Quest::QuestTalkRecord*,std::vector<Quest::QuestTalkRecord> > *)&__for_end_1) )
    {
      talk_record_1 = __gnu_cxx::__normal_iterator<Quest::QuestTalkRecord *,std::vector<Quest::QuestTalkRecord>>::operator*((const __gnu_cxx::__normal_iterator<Quest::QuestTalkRecord*,std::vector<Quest::QuestTalkRecord> > *const)(v3 + 48));
      std::vector<unsigned int>::emplace_back<unsigned int const&>(
        history_talk_vec,
        (const unsigned int *)talk_record_1,
        (const unsigned int *)talk_record_1);
      __gnu_cxx::__normal_iterator<Quest::QuestTalkRecord *,std::vector<Quest::QuestTalkRecord>>::operator++((__gnu_cxx::__normal_iterator<Quest::QuestTalkRecord*,std::vector<Quest::QuestTalkRecord> > *const)(v3 + 48));
    }
    v7 = 0;
    std::vector<Quest::QuestTalkRecord>::~vector((std::vector<Quest::QuestTalkRecord> *const)(v3 + 112));
  }
  else
  {
    common::milog::MiLogStream::create(
      &v42,
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/player/quest/player_quest_comp.cpp",
      "getQuestTalkHistory",
      826);
    v6 = common::milog::MiLogStream::operator<<<char [57],(char *[57])0>(
           &v42,
           (const char (*)[57])"findPlayerParentQuestExcelConfig fails, parent_quest_id:");
    common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v6, (const unsigned int *)(v3 + 32));
    common::milog::MiLogStream::~MiLogStream(&v42);
    v7 = -1;
  }
  std::map<unsigned int,Quest::QuestTalkRecord>::~map((std::map<unsigned int,Quest::QuestTalkRecord> *const)(v3 + 176));
  result = v7;
  if ( v43 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8010) = 0LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF801C) = 0;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 870: range 0000000013E9EC46-0000000013E9ECE5
bool __cdecl PlayerQuestComp::getQuestTalkHistory::_lambda_const_auto_25___const_auto_26___::operator()_Quest::QuestTalkRecord_Quest::QuestTalkRecord_(
        const PlayerQuestComp::getQuestTalkHistory::<lambda(const auto:25&, const auto:26&)> *const __closure,
        const Quest::QuestTalkRecord *lhs,
        const Quest::QuestTalkRecord *rhs)
{
  uint32_t talk_time; // ecx

  if ( *(_BYTE *)(((unsigned __int64)&lhs->talk_time >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)lhs + 4) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&lhs->talk_time >> 3) + 0x7FFF8000) )
  {
    __asan_report_load4(&lhs->talk_time);
  }
  talk_time = lhs->talk_time;
  if ( *(_BYTE *)(((unsigned __int64)&rhs->talk_time >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)rhs + 4) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&rhs->talk_time >> 3) + 0x7FFF8000) )
  {
    __asan_report_load4(&rhs->talk_time);
  }
  return talk_time < rhs->talk_time;
};

// Line 882: range 0000000013DD3246-0000000013DD327C
void __cdecl PlayerQuestComp::updateQuestContentProgress(
        PlayerQuestComp *const this,
        data::QuestContentType type,
        PlayerQuestComp::UpdateType up_type,
        uint32_t delta)
{
  PlayerQuestComp::updateQuestContentProgress(this, type, 0, up_type, delta);
};

// Line 887: range 0000000013DD327E-0000000013DD3338
void __cdecl PlayerQuestComp::updateQuestContentProgress(
        PlayerQuestComp *const this,
        data::QuestContentType type,
        uint32_t param,
        PlayerQuestComp::UpdateType up_type,
        uint32_t delta)
{
  std::allocator<char> __a; // [rsp+2Fh] [rbp-31h] BYREF
  std::string param_str; // [rsp+30h] [rbp-30h] BYREF

  std::allocator<char>::allocator(&__a);
  std::string::basic_string<std::allocator<char>>(&param_str, byte_250F2040, &__a);
  PlayerQuestComp::updateQuestContentProgress(this, type, param, 0, &param_str, up_type, delta);
  std::string::~string(&param_str);
  std::allocator<char>::~allocator(&__a);
};

// Line 892: range 0000000013DD333A-0000000013DD33F5
void __cdecl PlayerQuestComp::updateQuestContentProgress(
        PlayerQuestComp *const this,
        data::QuestContentType type,
        uint32_t param1,
        uint32_t param2,
        PlayerQuestComp::UpdateType up_type,
        uint32_t delta)
{
  std::allocator<char> __a; // [rsp+2Fh] [rbp-31h] BYREF
  std::string param_str; // [rsp+30h] [rbp-30h] BYREF

  std::allocator<char>::allocator(&__a);
  std::string::basic_string<std::allocator<char>>(&param_str, byte_250F2040, &__a);
  PlayerQuestComp::updateQuestContentProgress(this, type, param1, param2, 0, &param_str, up_type, delta);
  std::string::~string(&param_str);
  std::allocator<char>::~allocator(&__a);
};

// Line 897: range 0000000013DD33F6-0000000013DD34AC
void __cdecl PlayerQuestComp::updateQuestContentProgress(
        PlayerQuestComp *const this,
        data::QuestContentType type,
        uint32_t param1,
        uint32_t param2,
        uint32_t param3,
        PlayerQuestComp::UpdateType up_type,
        uint32_t delta)
{
  std::allocator<char> __a; // [rsp+2Fh] [rbp-31h] BYREF
  std::string param_str; // [rsp+30h] [rbp-30h] BYREF

  std::allocator<char>::allocator(&__a);
  std::string::basic_string<std::allocator<char>>(&param_str, byte_250F2040, &__a);
  PlayerQuestComp::updateQuestContentProgress(this, type, param1, param2, param3, &param_str, up_type, delta);
  std::string::~string(&param_str);
  std::allocator<char>::~allocator(&__a);
};

// Line 902: range 0000000013DD34AE-0000000013DD34FB
void __cdecl PlayerQuestComp::updateQuestContentProgress(
        PlayerQuestComp *const this,
        data::QuestContentType type,
        uint32_t param1,
        uint32_t param2,
        const std::string *param_str,
        PlayerQuestComp::UpdateType up_type,
        uint32_t delta)
{
  PlayerQuestComp::updateQuestContentProgress(this, type, param1, param2, 0, param_str, up_type, delta);
};

// Line 907: range 0000000013DD34FC-0000000013DD3635
void __cdecl PlayerQuestComp::updateQuestContentProgress(
        PlayerQuestComp *const this,
        data::QuestContentType type,
        uint32_t param1,
        uint32_t param2,
        uint32_t param3,
        const std::string *param_str,
        PlayerQuestComp::UpdateType up_type,
        uint32_t delta)
{
  unsigned __int64 v8; // rbx
  __int64 v9; // rax
  unsigned __int64 v10; // r12
  char v15[96]; // [rsp+20h] [rbp-60h] BYREF

  v8 = (unsigned __int64)v15;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v9 = __asan_stack_malloc_0(64LL);
    if ( v9 )
      v8 = v9;
  }
  *(_QWORD *)v8 = 1102416563LL;
  *(_QWORD *)(v8 + 8) = "1 32 16 9 guard:908";
  *(_QWORD *)(v8 + 16) = PlayerQuestComp::updateQuestContentProgress;
  v10 = v8 >> 3;
  *(_DWORD *)(v10 + 2147450880) = -235802127;
  *(_DWORD *)(v10 + 2147450884) = -202178560;
  QuestOperatorGuard::QuestOperatorGuard((QuestOperatorGuard *const)(v8 + 32), &this->quest_op_);
  QuestOperator::updateQuest(&this->quest_op_, type, param1, param2, param3, param_str, up_type, delta);
  QuestOperatorGuard::~QuestOperatorGuard((QuestOperatorGuard *const)(v8 + 32));
  if ( v15 == (char *)v8 )
  {
    *(_QWORD *)((v8 >> 3) + 0x7FFF8000) = 0LL;
  }
  else
  {
    *(_QWORD *)v8 = 1172321806LL;
    *(_QWORD *)((v8 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
  }
};

// Line 914: range 0000000013DD3636-0000000013DD3DEC
void __fastcall PlayerQuestComp::internalUpdateQuestContentProgress(
        PlayerQuestComp *const this,
        data::QuestContentType type,
        uint32_t param1,
        uint32_t param2,
        uint32_t param3,
        const std::string *param_str,
        uint32_t up_type,
        uint32_t delta)
{
  unsigned __int64 v8; // r13
  __int64 v9; // rax
  _DWORD *v10; // r12
  std::__detail::_Node_iterator<std::pair<unsigned int const,std::set<unsigned int> >,false,false>::pointer v11; // rax
  std::_Rb_tree_iterator<std::pair<const data::QuestContentType,std::set<unsigned int> > >::pointer v12; // rax
  std::_Rb_tree_const_iterator<unsigned int>::reference v13; // rax
  _DWORD *v14; // rdx
  PlayerMpComp *MpComp; // rax
  PlayerMpComp *v17; // rax
  std::__shared_ptr_access<World,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v18; // rax
  uint32_t OwnerUid; // r14d
  char v20; // al
  common::milog::MiLogStream *v21; // rax
  std::__shared_ptr_access<Quest,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v22; // rax
  uint32_t ParentQuestId; // eax
  Quest *v24; // rax
  bool is_exit; // [rsp+2Fh] [rbp-171h]
  std::set<unsigned int>::iterator __for_end; // [rsp+30h] [rbp-170h] BYREF
  std::set<unsigned int> *__for_range; // [rsp+38h] [rbp-168h]
  std::shared_ptr<Quest> p_quest_ptr; // [rsp+40h] [rbp-160h] BYREF
  common::milog::MiLogStream v33; // [rsp+50h] [rbp-150h] BYREF
  char v34[304]; // [rsp+70h] [rbp-130h] BYREF

  v8 = (unsigned __int64)v34;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v9 = __asan_stack_malloc_2(256LL);
    if ( v9 )
      v8 = v9;
  }
  *(_QWORD *)v8 = 1102416563LL;
  *(_QWORD *)(v8 + 8) = "7 32 4 12 quest_id:936 48 4 8 type:913 64 4 10 param1:913 80 8 25 item_event_quest_iter:918 112 "
                        "16 13 world_ptr:946 144 16 13 quest_ptr:954 176 48 13 quest_set:915";
  *(_QWORD *)(v8 + 16) = PlayerQuestComp::internalUpdateQuestContentProgress;
  v10 = (_DWORD *)(v8 >> 3);
  v10[536862720] = -235802127;
  v10[536862721] = -234556924;
  v10[536862722] = 61956;
  v10[536862722] = -234881024;
  v10[536862723] = 62194;
  v10[536862724] = 62194;
  v10[536862725] = 62194;
  v10[536862727] = -202116109;
  *(_DWORD *)(v8 + 48) = type;
  *(_DWORD *)(v8 + 64) = param1;
  std::set<unsigned int>::set((std::set<unsigned int> *const)(v8 + 176));
  if ( PlayerQuestComp::isQuestContentItemRelated(this, *(data::QuestContentType *)(v8 + 48)) )
  {
    *(std::unordered_map<unsigned int,std::set<unsigned int>>::iterator *)(v8 + 80) = std::unordered_map<unsigned int,std::set<unsigned int>>::find(
                                                                                        &this->item_event_quest_map_,
                                                                                        (const std::unordered_map<unsigned int,std::set<unsigned int>>::key_type *)(v8 + 64));
    __for_end._M_node = (std::_Rb_tree_const_iterator<unsigned int>::_Base_ptr)std::unordered_map<unsigned int,std::set<unsigned int>>::end(&this->item_event_quest_map_)._M_cur;
    if ( std::__detail::operator==<std::pair<unsigned int const,std::set<unsigned int>>,false>(
           (const std::__detail::_Node_iterator_base<std::pair<unsigned int const,std::set<unsigned int> >,false> *)(v8 + 80),
           (const std::__detail::_Node_iterator_base<std::pair<unsigned int const,std::set<unsigned int> >,false> *)&__for_end) )
    {
      goto LABEL_42;
    }
    v11 = std::__detail::_Node_iterator<std::pair<unsigned int const,std::set<unsigned int>>,false,false>::operator->((const std::__detail::_Node_iterator<std::pair<unsigned int const,std::set<unsigned int> >,false,false> *const)(v8 + 80));
    std::set<unsigned int>::operator=((std::set<unsigned int> *const)(v8 + 176), &v11->second);
  }
  else
  {
    *(std::map<data::QuestContentType,std::set<unsigned int>>::iterator *)(v8 + 80) = std::map<data::QuestContentType,std::set<unsigned int>>::find(
                                                                                        &this->event_quest_map_,
                                                                                        (const std::map<data::QuestContentType,std::set<unsigned int>>::key_type *)(v8 + 48));
    __for_end._M_node = std::map<data::QuestContentType,std::set<unsigned int>>::end(&this->event_quest_map_)._M_node;
    if ( std::operator==(
           (const std::_Rb_tree_iterator<std::pair<const data::QuestContentType,std::set<unsigned int> > >::_Self *)(v8 + 80),
           (const std::_Rb_tree_iterator<std::pair<const data::QuestContentType,std::set<unsigned int> > >::_Self *)&__for_end) )
    {
      goto LABEL_42;
    }
    v12 = std::_Rb_tree_iterator<std::pair<data::QuestContentType const,std::set<unsigned int>>>::operator->((const std::_Rb_tree_iterator<std::pair<const data::QuestContentType,std::set<unsigned int> > > *const)(v8 + 80));
    std::set<unsigned int>::operator=((std::set<unsigned int> *const)(v8 + 176), &v12->second);
  }
  __for_range = (std::set<unsigned int> *)(v8 + 176);
  *(std::set<unsigned int>::iterator *)(v8 + 80) = std::set<unsigned int>::begin((const std::set<unsigned int> *const)(v8 + 176));
  __for_end._M_node = std::set<unsigned int>::end(__for_range)._M_node;
  while ( std::operator!=((const std::_Rb_tree_const_iterator<unsigned int>::_Self *)(v8 + 80), &__for_end) )
  {
    v13 = std::_Rb_tree_const_iterator<unsigned int>::operator*((const std::_Rb_tree_const_iterator<unsigned int> *const)(v8 + 80));
    v14 = v13;
    if ( *(_BYTE *)(((unsigned __int64)v13 >> 3) + 0x7FFF8000) != 0
      && (char)(((unsigned __int8)v13 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)v13 >> 3) + 0x7FFF8000) )
    {
      __asan_report_load4(v13);
    }
    *(_DWORD *)(v8 + 32) = *v14;
    if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
      __asan_report_load8(&this->player_);
    MpComp = Player::getMpComp(this->player_);
    if ( !PlayerMpComp::isInMpMode(MpComp) || !PlayerQuestComp::isSingleModeQuest(this, *(_DWORD *)(v8 + 32)) )
    {
      if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
        __asan_report_load8(&this->player_);
      Player::getSceneComp(this->player_);
      PlayerSceneComp::getCurWorld((const PlayerSceneComp *const)(v8 + 112));
      if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
        __asan_report_load8(&this->player_);
      v17 = Player::getMpComp(this->player_);
      if ( !PlayerMpComp::isInMpMode(v17) || !std::operator!=<World>((const std::shared_ptr<World> *)(v8 + 112), 0LL) )
        goto LABEL_30;
      v18 = std::__shared_ptr_access<World,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<World,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v8 + 112));
      OwnerUid = World::getOwnerUid(v18);
      if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
        __asan_report_load8(&this->player_);
      if ( OwnerUid != Player::getUid(this->player_) )
        v20 = 1;
      else
LABEL_30:
        v20 = 0;
      if ( !v20 )
      {
        PlayerQuestComp::findQuest((const PlayerQuestComp *const)(v8 + 144), (__int64)this, *(_DWORD *)(v8 + 32));
        if ( std::operator==<Quest>((const std::shared_ptr<Quest> *)(v8 + 144), 0LL) )
        {
          common::milog::MiLogStream::create(
            &v33,
            &common::milog::MiLogDefault::default_log_obj_,
            3u,
            "./src/player/quest/player_quest_comp.cpp",
            "internalUpdateQuestContentProgress",
            957);
          v21 = common::milog::MiLogStream::operator<<<char [25],(char *[25])0>(
                  &v33,
                  (const char (*)[25])"quest is null. quest_id:");
          common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v21, (const unsigned int *)(v8 + 32));
          common::milog::MiLogStream::~MiLogStream(&v33);
        }
        else
        {
          v22 = std::__shared_ptr_access<Quest,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Quest,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v8 + 144));
          if ( Quest::getState(v22) == QUEST_STATE_UNFINISHED )
          {
            is_exit = 0;
            if ( !QuestOperator::getCurParentQuestId(&this->quest_op_) )
            {
              ParentQuestId = PlayerQuestComp::findParentQuestId(this, *(_DWORD *)(v8 + 32));
              QuestOperator::setCurParentQuestId(&this->quest_op_, ParentQuestId);
              is_exit = 1;
            }
            v24 = std::__shared_ptr_access<Quest,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Quest,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v8 + 144));
            Quest::updateContentProgress(
              v24,
              *(data::QuestContentType *)(v8 + 48),
              *(_DWORD *)(v8 + 64),
              param2,
              param3,
              param_str,
              up_type,
              delta);
            std::shared_ptr<Quest>::shared_ptr(&p_quest_ptr, (const std::shared_ptr<Quest> *)(v8 + 144));
            PlayerQuestComp::trySettleQuestAfterUpdate(this, &p_quest_ptr, 1);
            std::shared_ptr<Quest>::~shared_ptr(&p_quest_ptr);
            if ( is_exit )
              QuestOperator::setCurParentQuestId(&this->quest_op_, 0);
          }
        }
        std::shared_ptr<Quest>::~shared_ptr((std::shared_ptr<Quest> *const)(v8 + 144));
      }
      std::shared_ptr<World>::~shared_ptr((std::shared_ptr<World> *const)(v8 + 112));
    }
    std::_Rb_tree_const_iterator<unsigned int>::operator++((std::_Rb_tree_const_iterator<unsigned int> *const)(v8 + 80));
  }
LABEL_42:
  std::set<unsigned int>::~set((std::set<unsigned int> *const)(v8 + 176));
  if ( v34 == (char *)v8 )
  {
    *(_QWORD *)((v8 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v8 >> 3) + 0x7FFF8008) = 0LL;
    *(_QWORD *)((v8 >> 3) + 0x7FFF8010) = 0LL;
    *(_DWORD *)((v8 >> 3) + 0x7FFF801C) = 0;
  }
  else
  {
    *(_QWORD *)v8 = 1172321806LL;
    *(_QWORD *)((v8 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v8 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v8 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v8 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
  }
};

// Line 988: range 0000000013DD3DEE-0000000013DD4912
void __cdecl PlayerQuestComp::tryAcceptQuestByCond(
        PlayerQuestComp *const this,
        data::QuestCondType cond_type,
        bool is_notify,
        uint32_t param)
{
  unsigned __int64 v4; // r13
  __int64 v5; // rax
  _DWORD *v6; // r12
  QuestExcelConfigMgr *p_quest_config_mgr; // rcx
  unsigned int *v8; // rax
  uint32_t *v9; // rdx
  std::_Rb_tree_const_iterator<unsigned int>::_Base_ptr v10; // r15
  std::_Rb_tree_const_iterator<unsigned int>::_Base_ptr v11; // r14
  ParentQuest *v12; // rax
  char v13; // al
  unsigned int *v14; // rax
  uint32_t *v15; // rdx
  const unsigned int *M_current; // r15
  const unsigned int *v17; // r14
  common::milog::MiLogStream *v18; // r14
  common::milog::MiLogStream *v19; // rax
  common::milog::MiLogStream *v20; // rax
  std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v21; // rax
  unsigned int *v22; // rax
  uint32_t *v23; // rdx
  std::_Rb_tree_const_iterator<unsigned int>::_Base_ptr M_node; // r15
  std::_Rb_tree_const_iterator<unsigned int>::_Base_ptr v25; // r14
  unsigned int quest_id_0; // [rsp+28h] [rbp-208h]
  unsigned int quest_id; // [rsp+2Ch] [rbp-204h]
  std::unordered_map<unsigned int,data::MainQuestExcelConfig>::const_iterator __for_begin; // [rsp+30h] [rbp-200h] BYREF
  std::unordered_map<unsigned int,data::MainQuestExcelConfig>::const_iterator __for_end; // [rsp+38h] [rbp-1F8h] BYREF
  std::set<unsigned int>::iterator __for_begin_0; // [rsp+40h] [rbp-1F0h] BYREF
  std::set<unsigned int>::iterator __for_end_0; // [rsp+48h] [rbp-1E8h] BYREF
  const std::set<unsigned int> *quest_set_ptr; // [rsp+50h] [rbp-1E0h]
  const std::set<unsigned int> *__for_range_2; // [rsp+58h] [rbp-1D8h]
  const std::unordered_map<unsigned int,data::MainQuestExcelConfig> *__for_range; // [rsp+60h] [rbp-1D0h]
  const std::pair<unsigned int const,data::MainQuestExcelConfig> *v37; // [rsp+68h] [rbp-1C8h]
  std::tuple_element<0,const std::pair<unsigned int const,data::MainQuestExcelConfig> >::type *parent_quest_id; // [rsp+70h] [rbp-1C0h]
  std::tuple_element<1,const std::pair<unsigned int const,data::MainQuestExcelConfig> >::type *parent_quest_config; // [rsp+78h] [rbp-1B8h]
  const std::vector<unsigned int> *__for_range_1; // [rsp+80h] [rbp-1B0h]
  std::set<unsigned int> *__for_range_0; // [rsp+88h] [rbp-1A8h]
  std::shared_ptr<Config> v42; // [rsp+90h] [rbp-1A0h] BYREF
  common::milog::MiLogStream v43; // [rsp+A0h] [rbp-190h] BYREF
  char v44[368]; // [rsp+C0h] [rbp-170h] BYREF

  v4 = (unsigned __int64)v44;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v5 = __asan_stack_malloc_3(320LL);
    if ( v5 )
      v4 = v5;
  }
  *(_QWORD *)v4 = 1102416563LL;
  *(_QWORD *)(v4 + 8) = "5 32 16 9 guard:990 64 16 20 parent_quest_ptr:996 96 24 16 quest_id_vec:989 160 48 32 no_repeate"
                        "d_parent_quest_set:993 240 48 22 parent_entrace_set:999";
  *(_QWORD *)(v4 + 16) = PlayerQuestComp::tryAcceptQuestByCond;
  v6 = (_DWORD *)(v4 >> 3);
  v6[536862720] = -235802127;
  v6[536862721] = -219021312;
  v6[536862722] = -219021312;
  v6[536862723] = -234881024;
  v6[536862724] = -218959118;
  v6[536862726] = -219021312;
  v6[536862727] = 62194;
  v6[536862729] = -202116109;
  std::vector<unsigned int>::vector((std::vector<unsigned int> *const)(v4 + 96));
  QuestOperatorGuard::QuestOperatorGuard((QuestOperatorGuard *const)(v4 + 32), &this->quest_op_);
  if ( cond_type )
  {
    ServiceBox::findService<GameserverService>();
    GameserverService::getConfig((GameserverService *const)&v42);
    v21 = std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false> *const)&v42);
    quest_set_ptr = QuestExcelConfigMgr::findAcceptCondQuestSet(
                      &v21->design_config.txt_config_mgr.quest_config_mgr,
                      cond_type,
                      param);
    std::shared_ptr<Config>::~shared_ptr(&v42);
    if ( !quest_set_ptr )
      goto LABEL_47;
    __for_range_2 = quest_set_ptr;
    __for_begin_0._M_node = std::set<unsigned int>::begin(quest_set_ptr)._M_node;
    __for_end_0._M_node = std::set<unsigned int>::end(quest_set_ptr)._M_node;
    while ( std::operator!=(&__for_begin_0, &__for_end_0) )
    {
      v22 = (unsigned int *)std::_Rb_tree_const_iterator<unsigned int>::operator*(&__for_begin_0);
      v23 = v22;
      if ( *(_BYTE *)(((unsigned __int64)v22 >> 3) + 0x7FFF8000) != 0
        && (char)(((unsigned __int8)v22 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)v22 >> 3) + 0x7FFF8000) )
      {
        __asan_report_load4(v22);
      }
      PlayerQuestComp::acceptQuest(this, *v23, 0, is_notify);
      std::_Rb_tree_const_iterator<unsigned int>::operator++(&__for_begin_0);
    }
    M_node = std::set<unsigned int>::end(quest_set_ptr)._M_node;
    v25 = std::set<unsigned int>::begin(quest_set_ptr)._M_node;
    __for_begin_0._M_node = (std::_Rb_tree_const_iterator<unsigned int>::_Base_ptr)std::vector<unsigned int>::end((std::vector<unsigned int> *const)(v4 + 96))._M_current;
    __gnu_cxx::__normal_iterator<unsigned int const*,std::vector<unsigned int>>::__normal_iterator<unsigned int *>(
      (__gnu_cxx::__normal_iterator<unsigned int const*,std::vector<unsigned int> > *const)&__for_end_0,
      (const __gnu_cxx::__normal_iterator<unsigned int*,std::vector<unsigned int> > *)&__for_begin_0);
    std::vector<unsigned int>::insert<std::_Rb_tree_const_iterator<unsigned int>,void>(
      (std::vector<unsigned int> *const)(v4 + 96),
      (std::vector<unsigned int>::const_iterator)__for_end_0._M_node,
      (std::_Rb_tree_const_iterator<unsigned int>)v25,
      (std::_Rb_tree_const_iterator<unsigned int>)M_node);
  }
  else
  {
    std::set<unsigned int>::set((std::set<unsigned int> *const)(v4 + 160));
    ServiceBox::findService<GameserverService>();
    GameserverService::getConfig((GameserverService *const)&v42);
    __for_range = &std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false> *const)&v42)->design_config.txt_config_mgr.quest_config_mgr.main_quest_excel_config_map;
    std::shared_ptr<Config>::~shared_ptr(&v42);
    __for_begin._M_cur = std::unordered_map<unsigned int,data::MainQuestExcelConfig>::begin(__for_range)._M_cur;
    __for_end._M_cur = std::unordered_map<unsigned int,data::MainQuestExcelConfig>::end(__for_range)._M_cur;
    while ( std::__detail::operator!=<std::pair<unsigned int const,data::MainQuestExcelConfig>,false>(
              &__for_begin,
              &__for_end) )
    {
      v37 = std::__detail::_Node_const_iterator<std::pair<unsigned int const,data::MainQuestExcelConfig>,false,false>::operator*(&__for_begin);
      parent_quest_id = std::get<0ul,unsigned int const,data::MainQuestExcelConfig>(v37);
      parent_quest_config = (std::tuple_element<1,const std::pair<unsigned int const,data::MainQuestExcelConfig> >::type *)std::get<1ul,unsigned int const,data::MainQuestExcelConfig>(v37);
      if ( *(_BYTE *)(((unsigned __int64)parent_quest_id >> 3) + 0x7FFF8000) != 0
        && (char)(((unsigned __int8)parent_quest_id & 7) + 3) >= *(_BYTE *)(((unsigned __int64)parent_quest_id >> 3)
                                                                          + 0x7FFF8000) )
      {
        __asan_report_load4(parent_quest_id);
      }
      PlayerQuestComp::findParentQuest((const PlayerQuestComp *const)(v4 + 64), (__int64)this, *parent_quest_id);
      if ( std::operator==<ParentQuest>((const std::shared_ptr<ParentQuest> *)(v4 + 64), 0LL) )
      {
        ServiceBox::findService<GameserverService>();
        GameserverService::getConfig((GameserverService *const)&v42);
        p_quest_config_mgr = &std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false> *const)&v42)->design_config.txt_config_mgr.quest_config_mgr;
        if ( *(_BYTE *)(((unsigned __int64)parent_quest_id >> 3) + 0x7FFF8000) != 0
          && (char)(((unsigned __int8)parent_quest_id & 7) + 3) >= *(_BYTE *)(((unsigned __int64)parent_quest_id >> 3)
                                                                            + 0x7FFF8000) )
        {
          __asan_report_load4(parent_quest_id);
        }
        QuestExcelConfigMgr::findParentQuestEntrance(
          (std::set<unsigned int> *)(v4 + 240),
          p_quest_config_mgr,
          *parent_quest_id);
        std::shared_ptr<Config>::~shared_ptr(&v42);
        __for_range_0 = (std::set<unsigned int> *)(v4 + 240);
        __for_begin_0._M_node = std::set<unsigned int>::begin((const std::set<unsigned int> *const)(v4 + 240))._M_node;
        __for_end_0._M_node = std::set<unsigned int>::end(__for_range_0)._M_node;
        while ( std::operator!=(&__for_begin_0, &__for_end_0) )
        {
          v8 = (unsigned int *)std::_Rb_tree_const_iterator<unsigned int>::operator*(&__for_begin_0);
          v9 = v8;
          if ( *(_BYTE *)(((unsigned __int64)v8 >> 3) + 0x7FFF8000) != 0
            && (char)(((unsigned __int8)v8 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)v8 >> 3) + 0x7FFF8000) )
          {
            __asan_report_load4(v8);
          }
          quest_id = *v9;
          if ( PlayerQuestComp::canAcceptQuest(this, *v9) )
            PlayerQuestComp::acceptQuest(this, quest_id, 0, is_notify);
          std::_Rb_tree_const_iterator<unsigned int>::operator++(&__for_begin_0);
        }
        v10 = std::set<unsigned int>::end((const std::set<unsigned int> *const)(v4 + 240))._M_node;
        v11 = std::set<unsigned int>::begin((const std::set<unsigned int> *const)(v4 + 240))._M_node;
        __for_begin_0._M_node = (std::_Rb_tree_const_iterator<unsigned int>::_Base_ptr)std::vector<unsigned int>::end((std::vector<unsigned int> *const)(v4 + 96))._M_current;
        __gnu_cxx::__normal_iterator<unsigned int const*,std::vector<unsigned int>>::__normal_iterator<unsigned int *>(
          (__gnu_cxx::__normal_iterator<unsigned int const*,std::vector<unsigned int> > *const)&__for_end_0,
          (const __gnu_cxx::__normal_iterator<unsigned int*,std::vector<unsigned int> > *)&__for_begin_0);
        std::vector<unsigned int>::insert<std::_Rb_tree_const_iterator<unsigned int>,void>(
          (std::vector<unsigned int> *const)(v4 + 96),
          (std::vector<unsigned int>::const_iterator)__for_end_0._M_node,
          (std::_Rb_tree_const_iterator<unsigned int>)v11,
          (std::_Rb_tree_const_iterator<unsigned int>)v10);
        std::set<unsigned int>::~set((std::set<unsigned int> *const)(v4 + 240));
      }
      else
      {
        if ( !std::operator!=<ParentQuest>((const std::shared_ptr<ParentQuest> *)(v4 + 64), 0LL) )
          goto LABEL_26;
        if ( *(_BYTE *)(((unsigned __int64)&parent_quest_config->repeatable >> 3) + 0x7FFF8000) != 0
          && (((unsigned __int8)parent_quest_config + 68) & 7) >= *(_BYTE *)(((unsigned __int64)&parent_quest_config->repeatable >> 3)
                                                                           + 0x7FFF8000) )
        {
          __asan_report_load1(&parent_quest_config->repeatable);
        }
        if ( !parent_quest_config->repeatable
          && (v12 = std::__shared_ptr_access<ParentQuest,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<ParentQuest,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 64)),
              ParentQuest::getTotalFinishCount(v12)) )
        {
          v13 = 1;
        }
        else
        {
LABEL_26:
          v13 = 0;
        }
        if ( v13 )
        {
          std::set<unsigned int>::insert((std::set<unsigned int> *const)(v4 + 160), parent_quest_id);
        }
        else
        {
          __for_range_1 = &parent_quest_config->child_quest_list;
          __for_begin_0._M_node = (std::_Rb_tree_const_iterator<unsigned int>::_Base_ptr)std::vector<unsigned int>::begin(&parent_quest_config->child_quest_list)._M_current;
          __for_end_0._M_node = (std::_Rb_tree_const_iterator<unsigned int>::_Base_ptr)std::vector<unsigned int>::end(__for_range_1)._M_current;
          while ( __gnu_cxx::operator!=<unsigned int const*,std::vector<unsigned int>>(
                    (const __gnu_cxx::__normal_iterator<unsigned int const*,std::vector<unsigned int> > *)&__for_begin_0,
                    (const __gnu_cxx::__normal_iterator<unsigned int const*,std::vector<unsigned int> > *)&__for_end_0) )
          {
            v14 = (unsigned int *)__gnu_cxx::__normal_iterator<unsigned int const*,std::vector<unsigned int>>::operator*((const __gnu_cxx::__normal_iterator<unsigned int const*,std::vector<unsigned int> > *const)&__for_begin_0);
            v15 = v14;
            if ( *(_BYTE *)(((unsigned __int64)v14 >> 3) + 0x7FFF8000) != 0
              && (char)(((unsigned __int8)v14 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)v14 >> 3) + 0x7FFF8000) )
            {
              __asan_report_load4(v14);
            }
            quest_id_0 = *v15;
            if ( PlayerQuestComp::canAcceptQuest(this, *v15) )
              PlayerQuestComp::acceptQuest(this, quest_id_0, 0, is_notify);
            __gnu_cxx::__normal_iterator<unsigned int const*,std::vector<unsigned int>>::operator++((__gnu_cxx::__normal_iterator<unsigned int const*,std::vector<unsigned int> > *const)&__for_begin_0);
          }
          M_current = std::vector<unsigned int>::end(&parent_quest_config->child_quest_list)._M_current;
          v17 = std::vector<unsigned int>::begin(&parent_quest_config->child_quest_list)._M_current;
          __for_begin_0._M_node = (std::_Rb_tree_const_iterator<unsigned int>::_Base_ptr)std::vector<unsigned int>::end((std::vector<unsigned int> *const)(v4 + 96))._M_current;
          __gnu_cxx::__normal_iterator<unsigned int const*,std::vector<unsigned int>>::__normal_iterator<unsigned int *>(
            (__gnu_cxx::__normal_iterator<unsigned int const*,std::vector<unsigned int> > *const)&__for_end_0,
            (const __gnu_cxx::__normal_iterator<unsigned int*,std::vector<unsigned int> > *)&__for_begin_0);
          std::vector<unsigned int>::insert<__gnu_cxx::__normal_iterator<unsigned int const*,std::vector<unsigned int>>,void>(
            (std::vector<unsigned int> *const)(v4 + 96),
            (std::vector<unsigned int>::const_iterator)__for_end_0._M_node,
            (__gnu_cxx::__normal_iterator<unsigned int const*,std::vector<unsigned int> >)v17,
            (__gnu_cxx::__normal_iterator<unsigned int const*,std::vector<unsigned int> >)M_current);
        }
      }
      std::shared_ptr<ParentQuest>::~shared_ptr((std::shared_ptr<ParentQuest> *const)(v4 + 64));
      std::__detail::_Node_const_iterator<std::pair<unsigned int const,data::MainQuestExcelConfig>,false,false>::operator++(&__for_begin);
    }
    common::milog::MiLogStream::create(
      &v43,
      &common::milog::MiLogDefault::default_log_obj_,
      1u,
      "./src/player/quest/player_quest_comp.cpp",
      "tryAcceptQuestByCond",
      1020);
    v18 = common::milog::MiLogStream::operator<<<char [35],(char *[35])0>(
            &v43,
            (const char (*)[35])"no_repeated_parent_quest_set,size:");
    __for_end_0._M_node = (std::_Rb_tree_const_iterator<unsigned int>::_Base_ptr)std::set<unsigned int>::size((const std::set<unsigned int> *const)(v4 + 160));
    v19 = common::milog::MiLogStream::operator<<<unsigned long,(unsigned long *)0>(
            v18,
            (const unsigned __int64 *)&__for_end_0);
    v20 = common::milog::MiLogStream::operator<<<char [10],(char *[10])0>(v19, (const char (*)[10])" content:");
    common::milog::MiLogStream::operator<<<unsigned int>(v20, (const std::set<unsigned int> *)(v4 + 160));
    common::milog::MiLogStream::~MiLogStream(&v43);
    std::set<unsigned int>::~set((std::set<unsigned int> *const)(v4 + 160));
  }
  PlayerQuestComp::updateServerCondMeetStatus(this, (const std::vector<unsigned int> *)(v4 + 96), is_notify);
LABEL_47:
  QuestOperatorGuard::~QuestOperatorGuard((QuestOperatorGuard *const)(v4 + 32));
  std::vector<unsigned int>::~vector((std::vector<unsigned int> *const)(v4 + 96));
  if ( v44 == (char *)v4 )
  {
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8008) = 0LL;
    *(_DWORD *)((v4 >> 3) + 0x7FFF8010) = 0;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8018) = 0LL;
    *(_DWORD *)((v4 >> 3) + 0x7FFF8024) = 0;
  }
  else
  {
    *(_QWORD *)v4 = 1172321806LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8020) = 0xF5F5F5F5F5F5F5F5LL;
  }
};

// Line 1040: range 0000000013DD4914-0000000013DD4DEA
void __cdecl PlayerQuestComp::tryRollbackAllParentQuest(PlayerQuestComp *const this, bool is_notify)
{
  unsigned __int64 v2; // r12
  __int64 v3; // rax
  _DWORD *v4; // r13
  common::milog::MiLogStream *v5; // rax
  unsigned int *v6; // rax
  uint32_t *v7; // rdx
  common::milog::MiLogStream *v8; // r14
  common::milog::MiLogStream *v9; // rax
  common::milog::MiLogStream *v10; // rax
  std::map<unsigned int,std::shared_ptr<Quest>>::iterator __for_begin; // [rsp+20h] [rbp-110h] BYREF
  std::map<unsigned int,std::shared_ptr<Quest>>::iterator __for_end; // [rsp+28h] [rbp-108h] BYREF
  std::map<unsigned int,std::shared_ptr<Quest>> *__for_range; // [rsp+30h] [rbp-100h]
  std::set<unsigned int> *__for_range_0; // [rsp+38h] [rbp-F8h]
  const std::pair<unsigned int const,std::shared_ptr<Quest> > *v15; // [rsp+40h] [rbp-F0h]
  std::tuple_element<0,const std::pair<unsigned int const,std::shared_ptr<Quest> > >::type *quest_id; // [rsp+48h] [rbp-E8h]
  std::tuple_element<1,const std::pair<unsigned int const,std::shared_ptr<Quest> > >::type *quest_ptr; // [rsp+50h] [rbp-E0h]
  const data::MainQuestExcelConfig *parent_quest_config; // [rsp+58h] [rbp-D8h]
  common::milog::MiLogStream v19; // [rsp+60h] [rbp-D0h] BYREF
  char v20[176]; // [rsp+80h] [rbp-B0h] BYREF

  v2 = (unsigned __int64)v20;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_1(128LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "2 32 4 20 parent_quest_id:1044 48 48 24 parent_quest_id_set:1041";
  *(_QWORD *)(v2 + 16) = PlayerQuestComp::tryRollbackAllParentQuest;
  v4 = (_DWORD *)(v2 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = 61956;
  v4[536862723] = -202116109;
  std::set<unsigned int>::set((std::set<unsigned int> *const)(v2 + 48));
  __for_range = &this->quest_map_;
  __for_begin._M_node = std::map<unsigned int,std::shared_ptr<Quest>>::begin(&this->quest_map_)._M_node;
  __for_end._M_node = std::map<unsigned int,std::shared_ptr<Quest>>::end(&this->quest_map_)._M_node;
  while ( std::operator!=(&__for_begin, &__for_end) )
  {
    v15 = std::_Rb_tree_iterator<std::pair<unsigned int const,std::shared_ptr<Quest>>>::operator*(&__for_begin);
    quest_id = std::get<0ul,unsigned int const,std::shared_ptr<Quest>>(v15);
    quest_ptr = (std::tuple_element<1,const std::pair<unsigned int const,std::shared_ptr<Quest> > >::type *)std::get<1ul,unsigned int const,std::shared_ptr<Quest>>(v15);
    if ( *(_BYTE *)(((unsigned __int64)quest_id >> 3) + 0x7FFF8000) != 0
      && (char)(((unsigned __int8)quest_id & 7) + 3) >= *(_BYTE *)(((unsigned __int64)quest_id >> 3) + 0x7FFF8000) )
    {
      __asan_report_load4(quest_id);
    }
    *(_DWORD *)(v2 + 32) = PlayerQuestComp::findParentQuestId(this, *quest_id);
    parent_quest_config = PlayerQuestComp::findPlayerParentQuestExcelConfig(this, *(_DWORD *)(v2 + 32));
    if ( parent_quest_config )
    {
      if ( *(_BYTE *)(((unsigned __int64)&parent_quest_config->min_rewind_quest >> 3) + 0x7FFF8000) != 0
        && *(_BYTE *)(((unsigned __int64)&parent_quest_config->min_rewind_quest >> 3) + 0x7FFF8000) <= 3 )
      {
        __asan_report_load4(&parent_quest_config->min_rewind_quest);
      }
      if ( parent_quest_config->min_rewind_quest )
        std::set<unsigned int>::insert(
          (std::set<unsigned int> *const)(v2 + 48),
          (const std::set<unsigned int>::value_type *)(v2 + 32));
    }
    else
    {
      common::milog::MiLogStream::create(
        &v19,
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/player/quest/player_quest_comp.cpp",
        "tryRollbackAllParentQuest",
        1048);
      v5 = common::milog::MiLogStream::operator<<<char [57],(char *[57])0>(
             &v19,
             (const char (*)[57])"findPlayerParentQuestExcelConfig failed,parent_quest_id:");
      common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v5, (const unsigned int *)(v2 + 32));
      common::milog::MiLogStream::~MiLogStream(&v19);
    }
    std::_Rb_tree_iterator<std::pair<unsigned int const,std::shared_ptr<Quest>>>::operator++(&__for_begin);
  }
  __for_range_0 = (std::set<unsigned int> *)(v2 + 48);
  __for_begin._M_node = (std::_Rb_tree_iterator<std::pair<unsigned int const,std::shared_ptr<Quest> > >::_Base_ptr)std::set<unsigned int>::begin((const std::set<unsigned int> *const)(v2 + 48))._M_node;
  __for_end._M_node = (std::_Rb_tree_iterator<std::pair<unsigned int const,std::shared_ptr<Quest> > >::_Base_ptr)std::set<unsigned int>::end(__for_range_0)._M_node;
  while ( std::operator!=(
            (const std::_Rb_tree_const_iterator<unsigned int>::_Self *)&__for_begin,
            (const std::_Rb_tree_const_iterator<unsigned int>::_Self *)&__for_end) )
  {
    v6 = (unsigned int *)std::_Rb_tree_const_iterator<unsigned int>::operator*((const std::_Rb_tree_const_iterator<unsigned int> *const)&__for_begin);
    v7 = v6;
    if ( *(_BYTE *)(((unsigned __int64)v6 >> 3) + 0x7FFF8000) != 0
      && (char)(((unsigned __int8)v6 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)v6 >> 3) + 0x7FFF8000) )
    {
      __asan_report_load4(v6);
    }
    PlayerQuestComp::rollbackParentQuest(this, *v7, 0, 0, is_notify);
    std::_Rb_tree_const_iterator<unsigned int>::operator++((std::_Rb_tree_const_iterator<unsigned int> *const)&__for_begin);
  }
  common::milog::MiLogStream::create(
    &v19,
    &common::milog::MiLogDefault::default_log_obj_,
    1u,
    "./src/player/quest/player_quest_comp.cpp",
    "tryRollbackAllParentQuest",
    1063);
  v8 = common::milog::MiLogStream::operator<<<char [28],(char *[28])0>(
         &v19,
         (const char (*)[28])"rollback parent quest,size:");
  __for_end._M_node = (std::_Rb_tree_iterator<std::pair<unsigned int const,std::shared_ptr<Quest> > >::_Base_ptr)std::set<unsigned int>::size((const std::set<unsigned int> *const)(v2 + 48));
  v9 = common::milog::MiLogStream::operator<<<unsigned long,(unsigned long *)0>(
         v8,
         (const unsigned __int64 *)&__for_end);
  v10 = common::milog::MiLogStream::operator<<<char [6],(char *[6])0>(v9, (const char (*)[6])" set:");
  common::milog::MiLogStream::operator<<<unsigned int>(v10, (const std::set<unsigned int> *)(v2 + 48));
  common::milog::MiLogStream::~MiLogStream(&v19);
  std::set<unsigned int>::~set((std::set<unsigned int> *const)(v2 + 48));
  if ( v20 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF800C) = 0;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
};

// Line 1068: range 0000000013DD4DEC-0000000013DD4F1E
int32_t __cdecl PlayerQuestComp::acceptQuest(
        PlayerQuestComp *const this,
        uint32_t quest_id,
        bool is_force,
        bool is_notify)
{
  unsigned __int64 v4; // rbx
  __int64 v5; // rax
  unsigned __int64 v6; // r12
  int32_t result; // eax
  char v10[112]; // [rsp+20h] [rbp-70h] BYREF

  v4 = (unsigned __int64)v10;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v5 = __asan_stack_malloc_0(64LL);
    if ( v5 )
      v4 = v5;
  }
  *(_QWORD *)v4 = 1102416563LL;
  *(_QWORD *)(v4 + 8) = "1 32 16 10 guard:1069";
  *(_QWORD *)(v4 + 16) = PlayerQuestComp::acceptQuest;
  v6 = v4 >> 3;
  *(_DWORD *)(v6 + 2147450880) = -235802127;
  *(_DWORD *)(v6 + 2147450884) = -202178560;
  QuestOperatorGuard::QuestOperatorGuard((QuestOperatorGuard *const)(v4 + 32), &this->quest_op_);
  QuestOperator::acceptQuest(&this->quest_op_, quest_id, is_force, is_notify);
  QuestOperatorGuard::~QuestOperatorGuard((QuestOperatorGuard *const)(v4 + 32));
  result = 0;
  if ( v10 == (char *)v4 )
  {
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0LL;
  }
  else
  {
    *(_QWORD *)v4 = 1172321806LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 1076: range 0000000013DD4F20-0000000013DD5D1F
__int64 __fastcall PlayerQuestComp::internalAcceptQuest(
        PlayerQuestComp *const this,
        __int32 quest_id,
        __int8 is_force,
        __int8 is_notify)
{
  unsigned __int64 v4; // r13
  __int64 v5; // rax
  _DWORD *v6; // r12
  unsigned int v8; // r14d
  common::milog::MiLogStream *v9; // r14
  common::milog::MiLogStream *v10; // rax
  common::milog::MiLogStream *v11; // rax
  PlayerBasicComp *BasicComp; // rax
  Quest *v13; // r14
  bool v14; // r14
  common::milog::MiLogStream *v15; // r14
  common::milog::MiLogStream *v16; // rax
  common::milog::MiLogStream *v17; // rax
  common::milog::MiLogStream *v18; // r14
  ParentQuest *v19; // rax
  bool v20; // r14
  common::milog::MiLogStream *v21; // rax
  common::milog::MiLogStream *v22; // rax
  QuestExcelConfigMgr *p_quest_config_mgr; // r15
  std::__shared_ptr_access<ParentQuest,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v24; // rax
  uint32_t ParentQuestId; // eax
  std::__shared_ptr_access<ParentQuest,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v26; // rax
  uint32_t v27; // eax
  bool v28; // r15
  std::__shared_ptr_access<ParentQuest,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v29; // rax
  uint32_t v30; // eax
  ParentQuest *v31; // rax
  bool v32; // r14
  common::milog::MiLogStream *v33; // r14
  common::milog::MiLogStream *v34; // rax
  common::milog::MiLogStream *v35; // rax
  common::milog::MiLogStream *v36; // r14
  common::milog::MiLogStream *v37; // rax
  common::milog::MiLogStream *v38; // rax
  __int64 result; // rax
  std::string v40; // [rsp+0h] [rbp-130h]
  unsigned int val; // [rsp+2Ch] [rbp-104h] BYREF
  PlayerPtr p_player_ptr; // [rsp+30h] [rbp-100h] BYREF
  common::milog::MiLogStream v43; // [rsp+40h] [rbp-F0h] BYREF
  char v44[208]; // [rsp+60h] [rbp-D0h] BYREF

  *(&v40._anon_0._M_allocated_capacity + 1) = (std::string::size_type)this;
  HIDWORD(v40._anon_0._M_allocated_capacity) = quest_id;
  v40._anon_0._M_local_buf[0] = is_force;
  BYTE4(v40._M_string_length) = is_notify;
  v4 = (unsigned __int64)v44;
  v40._M_dataplus._M_p = v44;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v5 = __asan_stack_malloc_2(160LL);
    if ( v5 )
      v4 = v5;
  }
  *(_QWORD *)v4 = 1102416563LL;
  *(_QWORD *)(v4 + 8) = "5 48 1 11 holder:1093 64 4 20 parent_quest_id:1101 80 4 13 quest_id:1075 96 16 14 quest_ptr:1087"
                        " 128 16 21 parent_quest_ptr:1109";
  *(_QWORD *)(v4 + 16) = PlayerQuestComp::internalAcceptQuest;
  v6 = (_DWORD *)(v4 >> 3);
  v6[536862720] = -235802127;
  v6[536862721] = -234753551;
  v6[536862722] = -234556924;
  v6[536862723] = -219021312;
  v6[536862724] = -202178560;
  *(_DWORD *)(v4 + 80) = quest_id;
  if ( !PlayerQuestComp::canAcceptQuest(this, *(_DWORD *)(v4 + 80)) && v40._anon_0._M_local_buf[0] != 1 )
  {
    v8 = 0;
    goto LABEL_58;
  }
  if ( PlayerQuestComp::isQuestExist(this, *(_DWORD *)(v4 + 80)) )
  {
    v8 = 0;
    goto LABEL_58;
  }
  PlayerQuestComp::createQuest((PlayerQuestComp *const)(v4 + 96), (uint32_t)this);
  if ( std::operator==<Quest>((const std::shared_ptr<Quest> *)(v4 + 96), 0LL) )
  {
    common::milog::MiLogStream::create(
      &v43,
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/player/quest/player_quest_comp.cpp",
      "internalAcceptQuest",
      1090);
    v9 = common::milog::MiLogStream::operator<<<char [27],(char *[27])0>(
           &v43,
           (const char (*)[27])"quest_ptr is nullptr, uid:");
    if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
      __asan_report_load8(&this->player_);
    val = Player::getUid(this->player_);
    v10 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v9, &val);
    v11 = common::milog::MiLogStream::operator<<<char [11],(char *[11])0>(v10, (const char (*)[11])" quest_id:");
    common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v11, (const unsigned int *)(v4 + 80));
    common::milog::MiLogStream::~MiLogStream(&v43);
    v8 = -1;
    goto LABEL_57;
  }
  if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
    __asan_report_load8(&this->player_);
  BasicComp = Player::getBasicComp(this->player_);
  PlayerBasicComp::getNextTransNo[abi:cxx11]((std::string *)&v43, BasicComp);
  StatLogUtils::ContextHolder::ContextHolder((StatLogUtils::ContextHolder *const)(v4 + 48), 0xC9u, v40);
  std::string::~string(&v43);
  v13 = std::__shared_ptr_access<Quest,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Quest,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 96));
  if ( *(_BYTE *)(((*(&v40._anon_0._M_allocated_capacity + 1) + 24) >> 3) + 0x7FFF8000) )
    __asan_report_load8(*(&v40._anon_0._M_allocated_capacity + 1) + 24);
  toThisPtr<Player>((Player *)&p_player_ptr);
  v14 = Quest::onAccept(v13, &p_player_ptr) != 0;
  std::shared_ptr<Player>::~shared_ptr(&p_player_ptr);
  if ( !v14 )
  {
    *(_DWORD *)(v4 + 64) = PlayerQuestComp::findParentQuestId(
                             *((const PlayerQuestComp *const *)&v40._anon_0._M_allocated_capacity + 1),
                             *(_DWORD *)(v4 + 80));
    if ( !*(_DWORD *)(v4 + 64) )
    {
      common::milog::MiLogStream::create(
        &v43,
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/player/quest/player_quest_comp.cpp",
        "internalAcceptQuest",
        1104);
      v15 = common::milog::MiLogStream::operator<<<char [31],(char *[31])0>(
              &v43,
              (const char (*)[31])"findParentQuestId failed, uid:");
      if ( *(_BYTE *)(((*(&v40._anon_0._M_allocated_capacity + 1) + 24) >> 3) + 0x7FFF8000) )
        __asan_report_load8(*(&v40._anon_0._M_allocated_capacity + 1) + 24);
      goto LABEL_23;
    }
    PlayerQuestComp::findParentQuest(
      (const PlayerQuestComp *const)(v4 + 128),
      *((__int64 *)&v40._anon_0._M_allocated_capacity + 1),
      *(_DWORD *)(v4 + 64));
    if ( std::operator==<ParentQuest>((const std::shared_ptr<ParentQuest> *)(v4 + 128), 0LL) )
    {
      PlayerQuestComp::createParentQuest(
        (PlayerQuestComp *const)&p_player_ptr,
        *((uint32_t *)&v40._anon_0._M_allocated_capacity + 2));
      std::shared_ptr<ParentQuest>::operator=(
        (std::shared_ptr<ParentQuest> *const)(v4 + 128),
        (std::shared_ptr<ParentQuest> *)&p_player_ptr);
      std::shared_ptr<ParentQuest>::~shared_ptr((std::shared_ptr<ParentQuest> *const)&p_player_ptr);
      if ( std::operator==<ParentQuest>((const std::shared_ptr<ParentQuest> *)(v4 + 128), 0LL) )
      {
        common::milog::MiLogStream::create(
          &v43,
          &common::milog::MiLogDefault::default_log_obj_,
          3u,
          "./src/player/quest/player_quest_comp.cpp",
          "internalAcceptQuest",
          1115);
        v18 = common::milog::MiLogStream::operator<<<char [31],(char *[31])0>(
                &v43,
                (const char (*)[31])"createParentQuest failed, uid:");
        if ( *(_BYTE *)(((*(&v40._anon_0._M_allocated_capacity + 1) + 24) >> 3) + 0x7FFF8000) )
          __asan_report_load8(*(&v40._anon_0._M_allocated_capacity + 1) + 24);
LABEL_40:
        val = Player::getUid(*(const Player *const *)(*(&v40._anon_0._M_allocated_capacity + 1) + 24));
        v21 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v18, &val);
        v22 = common::milog::MiLogStream::operator<<<char [18],(char *[18])0>(
                v21,
                (const char (*)[18])" parent_quest_id:");
        common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v22, (const unsigned int *)(v4 + 64));
        common::milog::MiLogStream::~MiLogStream(&v43);
        v8 = -1;
LABEL_55:
        std::shared_ptr<ParentQuest>::~shared_ptr((std::shared_ptr<ParentQuest> *const)(v4 + 128));
        goto LABEL_56;
      }
      v19 = std::__shared_ptr_access<ParentQuest,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<ParentQuest,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 128));
      if ( ParentQuest::onAccept(v19) )
      {
        common::milog::MiLogStream::create(
          &v43,
          &common::milog::MiLogDefault::default_log_obj_,
          3u,
          "./src/player/quest/player_quest_comp.cpp",
          "internalAcceptQuest",
          1121);
        v18 = common::milog::MiLogStream::operator<<<char [35],(char *[35])0>(
                &v43,
                (const char (*)[35])"parent_quest_ptr init failed, uid:");
        if ( *(_BYTE *)(((*(&v40._anon_0._M_allocated_capacity + 1) + 24) >> 3) + 0x7FFF8000) )
          __asan_report_load8(*(&v40._anon_0._M_allocated_capacity + 1) + 24);
        goto LABEL_40;
      }
      std::shared_ptr<ParentQuest>::shared_ptr(
        (std::shared_ptr<ParentQuest> *const)&p_player_ptr,
        (const std::shared_ptr<ParentQuest> *)(v4 + 128));
      v20 = PlayerQuestComp::emplaceParentQuest(
              *((PlayerQuestComp *const *)&v40._anon_0._M_allocated_capacity + 1),
              (ParentQuestPtr *)&p_player_ptr,
              SBYTE4(v40._M_string_length)) != 0;
      std::shared_ptr<ParentQuest>::~shared_ptr((std::shared_ptr<ParentQuest> *const)&p_player_ptr);
      if ( v20 )
      {
        common::milog::MiLogStream::create(
          &v43,
          &common::milog::MiLogDefault::default_log_obj_,
          3u,
          "./src/player/quest/player_quest_comp.cpp",
          "internalAcceptQuest",
          1127);
        v18 = common::milog::MiLogStream::operator<<<char [32],(char *[32])0>(
                &v43,
                (const char (*)[32])"emplaceParentQuest failed, uid:");
        if ( *(_BYTE *)(((*(&v40._anon_0._M_allocated_capacity + 1) + 24) >> 3) + 0x7FFF8000) )
          __asan_report_load8(*(&v40._anon_0._M_allocated_capacity + 1) + 24);
        goto LABEL_40;
      }
      ServiceBox::findService<GameserverService>();
      GameserverService::getConfig((GameserverService *const)&p_player_ptr);
      p_quest_config_mgr = &std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false> *const)&p_player_ptr)->design_config.txt_config_mgr.quest_config_mgr;
      v24 = std::__shared_ptr_access<ParentQuest,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<ParentQuest,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 128));
      ParentQuestId = ParentQuest::getParentQuestId(v24);
      v28 = 0;
      if ( QuestExcelConfigMgr::isChapterBeginMainQuest(p_quest_config_mgr, ParentQuestId) )
      {
        v26 = std::__shared_ptr_access<ParentQuest,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<ParentQuest,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 128));
        v27 = ParentQuest::getParentQuestId(v26);
        if ( !PlayerQuestComp::canStartParentQuest(
                *((PlayerQuestComp *const *)&v40._anon_0._M_allocated_capacity + 1),
                v27) )
          v28 = 1;
      }
      std::shared_ptr<Config>::~shared_ptr((std::shared_ptr<Config> *const)&p_player_ptr);
      if ( v28 )
      {
        v29 = std::__shared_ptr_access<ParentQuest,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<ParentQuest,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 128));
        v30 = ParentQuest::getParentQuestId(v29);
        PlayerQuestComp::setChapterStateByParentQuestId(
          *((PlayerQuestComp *const *)&v40._anon_0._M_allocated_capacity + 1),
          v30,
          CHAPTER_STATE_UNABLE_TO_BEGIN,
          SBYTE4(v40._M_string_length));
      }
      PlayerQuestComp::logPlayerMissionAccept(
        *((PlayerQuestComp *const *)&v40._anon_0._M_allocated_capacity + 1),
        1u,
        *(_DWORD *)(v4 + 64));
    }
    v31 = std::__shared_ptr_access<ParentQuest,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<ParentQuest,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 128));
    ParentQuest::clearChildQuestState(v31, SBYTE4(v40._M_string_length));
    std::shared_ptr<Quest>::shared_ptr(
      (std::shared_ptr<Quest> *const)&p_player_ptr,
      (const std::shared_ptr<Quest> *)(v4 + 96));
    v32 = PlayerQuestComp::emplaceQuest(
            *((PlayerQuestComp *const *)&v40._anon_0._M_allocated_capacity + 1),
            (QuestPtr *)&p_player_ptr,
            SBYTE4(v40._M_string_length)) != 0;
    std::shared_ptr<Quest>::~shared_ptr((std::shared_ptr<Quest> *const)&p_player_ptr);
    if ( v32 )
    {
      common::milog::MiLogStream::create(
        &v43,
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/player/quest/player_quest_comp.cpp",
        "internalAcceptQuest",
        1143);
      v33 = common::milog::MiLogStream::operator<<<char [26],(char *[26])0>(
              &v43,
              (const char (*)[26])"emplaceQuest failed, uid:");
      if ( *(_BYTE *)(((*(&v40._anon_0._M_allocated_capacity + 1) + 24) >> 3) + 0x7FFF8000) )
        __asan_report_load8(*(&v40._anon_0._M_allocated_capacity + 1) + 24);
      val = Player::getUid(*(const Player *const *)(*(&v40._anon_0._M_allocated_capacity + 1) + 24));
      v34 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v33, &val);
      v35 = common::milog::MiLogStream::operator<<<char [11],(char *[11])0>(v34, (const char (*)[11])" quest_id:");
      common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v35, (const unsigned int *)(v4 + 80));
      common::milog::MiLogStream::~MiLogStream(&v43);
      v8 = -1;
    }
    else
    {
      PlayerQuestComp::logPlayerMissionAccept(
        *((PlayerQuestComp *const *)&v40._anon_0._M_allocated_capacity + 1),
        2u,
        *(_DWORD *)(v4 + 80));
      PlayerQuestComp::tryRecordChapterPreOpenByQuestId(
        *((PlayerQuestComp *const *)&v40._anon_0._M_allocated_capacity + 1),
        *(_DWORD *)(v4 + 80));
      PlayerQuestComp::internalStartQuest(
        *((PlayerQuestComp *const *)&v40._anon_0._M_allocated_capacity + 1),
        *(_DWORD *)(v4 + 80),
        SBYTE4(v40._M_string_length));
      common::milog::MiLogStream::create(
        &v43,
        &common::milog::MiLogDefault::default_log_obj_,
        2u,
        "./src/player/quest/player_quest_comp.cpp",
        "internalAcceptQuest",
        1154);
      v36 = common::milog::MiLogStream::operator<<<char [27],(char *[27])0>(
              &v43,
              (const char (*)[27])"[QUEST] accept quest, uid:");
      if ( *(_BYTE *)(((*(&v40._anon_0._M_allocated_capacity + 1) + 24) >> 3) + 0x7FFF8000) )
        __asan_report_load8(*(&v40._anon_0._M_allocated_capacity + 1) + 24);
      val = Player::getUid(*(const Player *const *)(*(&v40._anon_0._M_allocated_capacity + 1) + 24));
      v37 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v36, &val);
      v38 = common::milog::MiLogStream::operator<<<char [11],(char *[11])0>(v37, (const char (*)[11])" quest_id:");
      common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v38, (const unsigned int *)(v4 + 80));
      common::milog::MiLogStream::~MiLogStream(&v43);
      v8 = 0;
    }
    goto LABEL_55;
  }
  common::milog::MiLogStream::create(
    &v43,
    &common::milog::MiLogDefault::default_log_obj_,
    3u,
    "./src/player/quest/player_quest_comp.cpp",
    "internalAcceptQuest",
    1097);
  v15 = common::milog::MiLogStream::operator<<<char [35],(char *[35])0>(
          &v43,
          (const char (*)[35])"quest_ptr accept init failed, uid:");
  if ( *(_BYTE *)(((*(&v40._anon_0._M_allocated_capacity + 1) + 24) >> 3) + 0x7FFF8000) )
    __asan_report_load8(*(&v40._anon_0._M_allocated_capacity + 1) + 24);
LABEL_23:
  val = Player::getUid(*(const Player *const *)(*(&v40._anon_0._M_allocated_capacity + 1) + 24));
  v16 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v15, &val);
  v17 = common::milog::MiLogStream::operator<<<char [11],(char *[11])0>(v16, (const char (*)[11])" quest_id:");
  common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v17, (const unsigned int *)(v4 + 80));
  common::milog::MiLogStream::~MiLogStream(&v43);
  v8 = -1;
LABEL_56:
  StatLogUtils::ContextHolder::~ContextHolder((StatLogUtils::ContextHolder *const)(v4 + 48));
LABEL_57:
  std::shared_ptr<Quest>::~shared_ptr((std::shared_ptr<Quest> *const)(v4 + 96));
LABEL_58:
  result = v8;
  if ( v40._M_dataplus._M_p == (std::string::pointer)v4 )
  {
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8008) = 0LL;
    *(_DWORD *)((v4 >> 3) + 0x7FFF8010) = 0;
  }
  else
  {
    *(_QWORD *)v4 = 1172321806LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v4 >> 3) + 0x7FFF8010) = -168430091;
  }
  return result;
};

// Line 1161: range 0000000013DD5D20-0000000013DD5F4F
__int64 __fastcall PlayerQuestComp::startQuest(PlayerQuestComp *const this, uint32_t quest_id, bool is_notify)
{
  unsigned __int64 v3; // rbx
  __int64 v4; // rax
  _DWORD *v5; // r13
  common::milog::MiLogStream *v6; // rax
  unsigned int v7; // r14d
  std::__shared_ptr_access<Quest,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v8; // rax
  uint32_t AcceptTime; // eax
  __int64 result; // rax
  common::milog::MiLogStream v12; // [rsp+20h] [rbp-B0h] BYREF
  char v13[144]; // [rsp+40h] [rbp-90h] BYREF

  v3 = (unsigned __int64)v13;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_1(96LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "2 48 4 13 quest_id:1160 64 16 14 quest_ptr:1162";
  *(_QWORD *)(v3 + 16) = PlayerQuestComp::startQuest;
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = -234556943;
  v5[536862722] = -202178560;
  *(_DWORD *)(v3 + 48) = quest_id;
  PlayerQuestComp::findQuest((const PlayerQuestComp *const)(v3 + 64), (__int64)this, *(_DWORD *)(v3 + 48));
  if ( std::operator==<Quest>(0LL, (const std::shared_ptr<Quest> *)(v3 + 64)) )
  {
    common::milog::MiLogStream::create(
      &v12,
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/player/quest/player_quest_comp.cpp",
      "startQuest",
      1165);
    v6 = common::milog::MiLogStream::operator<<<char [26],(char *[26])0>(
           &v12,
           (const char (*)[26])"findQuest fail. quest_id:");
    common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v6, (const unsigned int *)(v3 + 48));
    common::milog::MiLogStream::~MiLogStream(&v12);
    v7 = -1;
  }
  else
  {
    v8 = std::__shared_ptr_access<Quest,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Quest,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 64));
    AcceptTime = Quest::getAcceptTime(v8);
    QuestOperator::startQuest(&this->quest_op_, *(_DWORD *)(v3 + 48), AcceptTime, 0, is_notify);
    v7 = 0;
  }
  std::shared_ptr<Quest>::~shared_ptr((std::shared_ptr<Quest> *const)(v3 + 64));
  result = v7;
  if ( v13 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8008) = 0;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8008) = -168430091;
  }
  return result;
};

// Line 1173: range 0000000013DD5F50-0000000013DD617F
__int64 __fastcall PlayerQuestComp::startQuestImm(PlayerQuestComp *const this, uint32_t quest_id, bool is_notify)
{
  unsigned __int64 v3; // rbx
  __int64 v4; // rax
  _DWORD *v5; // r13
  common::milog::MiLogStream *v6; // rax
  unsigned int v7; // r14d
  std::__shared_ptr_access<Quest,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v8; // rax
  uint32_t AcceptTime; // eax
  __int64 result; // rax
  common::milog::MiLogStream v12; // [rsp+20h] [rbp-B0h] BYREF
  char v13[144]; // [rsp+40h] [rbp-90h] BYREF

  v3 = (unsigned __int64)v13;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_1(96LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "2 48 4 13 quest_id:1172 64 16 14 quest_ptr:1174";
  *(_QWORD *)(v3 + 16) = PlayerQuestComp::startQuestImm;
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = -234556943;
  v5[536862722] = -202178560;
  *(_DWORD *)(v3 + 48) = quest_id;
  PlayerQuestComp::findQuest((const PlayerQuestComp *const)(v3 + 64), (__int64)this, *(_DWORD *)(v3 + 48));
  if ( std::operator==<Quest>(0LL, (const std::shared_ptr<Quest> *)(v3 + 64)) )
  {
    common::milog::MiLogStream::create(
      &v12,
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/player/quest/player_quest_comp.cpp",
      "startQuestImm",
      1177);
    v6 = common::milog::MiLogStream::operator<<<char [26],(char *[26])0>(
           &v12,
           (const char (*)[26])"findQuest fail. quest_id:");
    common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v6, (const unsigned int *)(v3 + 48));
    common::milog::MiLogStream::~MiLogStream(&v12);
    v7 = -1;
  }
  else
  {
    v8 = std::__shared_ptr_access<Quest,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Quest,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 64));
    AcceptTime = Quest::getAcceptTime(v8);
    QuestOperator::startQuest(&this->quest_op_, *(_DWORD *)(v3 + 48), AcceptTime, 1, is_notify);
    v7 = 0;
  }
  std::shared_ptr<Quest>::~shared_ptr((std::shared_ptr<Quest> *const)(v3 + 64));
  result = v7;
  if ( v13 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8008) = 0;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8008) = -168430091;
  }
  return result;
};

// Line 1186: range 0000000013DD6180-0000000013DD6728
// local variable allocation has failed, the output may be wrong!
__int64 __fastcall PlayerQuestComp::internalStartQuest(PlayerQuestComp *const this, uint32_t quest_id, bool is_notify)
{
  unsigned __int64 v3; // r12
  __int64 v4; // rax
  _DWORD *v5; // r13
  common::milog::MiLogStream *v6; // rax
  common::milog::MiLogStream *v7; // rax
  common::milog::MiLogStream *v8; // r14
  unsigned int v9; // r14d
  std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v10; // rax
  PlayerBasicComp *BasicComp; // rax
  Quest *v12; // rax
  std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v13; // rax
  bool isChapterBeginQuest; // r14
  std::__shared_ptr_access<Quest,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v15; // rax
  Quest *v16; // rax
  PlayerMpComp *MpComp; // rax
  __int64 result; // rax
  std::string is_notifya; // [rsp+0h] [rbp-E0h] OVERLAPPED BYREF
  std::shared_ptr<Config> v20; // [rsp+20h] [rbp-C0h] BYREF
  common::milog::MiLogStream v21; // [rsp+30h] [rbp-B0h] BYREF
  char v22[144]; // [rsp+50h] [rbp-90h] BYREF

  is_notifya._M_string_length = (std::string::size_type)this;
  HIDWORD(is_notifya._M_dataplus._M_p) = quest_id;
  LOBYTE(is_notifya._M_dataplus._M_p) = is_notify;
  v3 = (unsigned __int64)v22;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_1(96LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "3 32 1 11 holder:1203 48 4 13 quest_id:1185 64 16 14 quest_ptr:1187";
  *(_QWORD *)(v3 + 16) = PlayerQuestComp::internalStartQuest;
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = -234556927;
  v5[536862722] = -202178560;
  *(_DWORD *)(v3 + 48) = HIDWORD(is_notifya._M_dataplus._M_p);
  PlayerQuestComp::findQuest((const PlayerQuestComp *const)(v3 + 64), is_notifya._M_string_length, *(_DWORD *)(v3 + 48));
  if ( std::operator==<Quest>((const std::shared_ptr<Quest> *)(v3 + 64), 0LL) )
  {
    common::milog::MiLogStream::create(
      &v21,
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/player/quest/player_quest_comp.cpp",
      "internalStartQuest",
      1190);
    v6 = common::milog::MiLogStream::operator<<<char [28],(char *[28])0>(
           &v21,
           (const char (*)[28])"findQuest failed, quest_id:");
    v7 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v6, (const unsigned int *)(v3 + 48));
    v8 = common::milog::MiLogStream::operator<<<char [6],(char *[6])0>(v7, (const char (*)[6])" uid:");
    if ( *(_BYTE *)(((is_notifya._M_string_length + 24) >> 3) + 0x7FFF8000) )
      __asan_report_load8(is_notifya._M_string_length + 24);
    HIDWORD(is_notifya._anon_0._M_allocated_capacity) = Player::getUid(*(const Player *const *)(is_notifya._M_string_length
                                                                                              + 24));
    common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
      v8,
      (const unsigned int *)&is_notifya._anon_0._M_allocated_capacity + 1);
    common::milog::MiLogStream::~MiLogStream(&v21);
    v9 = -1;
  }
  else if ( !PlayerQuestComp::canStartQuest((PlayerQuestComp *const)is_notifya._M_string_length, *(_DWORD *)(v3 + 48)) )
  {
    ServiceBox::findService<GameserverService>();
    GameserverService::getConfig((GameserverService *const)&v20);
    v10 = std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false> *const)&v20);
    *((_DWORD *)&is_notifya._anon_0._M_allocated_capacity + 3) = QuestExcelConfigMgr::getQuestStartTime(
                                                                   &v10->design_config.txt_config_mgr.quest_config_mgr,
                                                                   *(_DWORD *)(v3 + 48));
    std::shared_ptr<Config>::~shared_ptr(&v20);
    PlayerQuestComp::tryRegisterCheckQuestStartTimer(
      (PlayerQuestComp *const)is_notifya._M_string_length,
      *((uint32_t *)&is_notifya._anon_0._M_allocated_capacity + 3));
    v9 = 0;
  }
  else
  {
    if ( *(_BYTE *)(((is_notifya._M_string_length + 24) >> 3) + 0x7FFF8000) )
      __asan_report_load8(is_notifya._M_string_length + 24);
    BasicComp = Player::getBasicComp(*(Player *const *)(is_notifya._M_string_length + 24));
    PlayerBasicComp::getNextTransNo[abi:cxx11]((std::string *)&v21, BasicComp);
    StatLogUtils::ContextHolder::ContextHolder((StatLogUtils::ContextHolder *const)(v3 + 32), 0xCCu, is_notifya);
    std::string::~string(&v21);
    v12 = std::__shared_ptr_access<Quest,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Quest,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 64));
    Quest::onStart(v12, (bool)is_notifya._M_dataplus._M_p);
    PlayerQuestComp::logPlayerMissionStart(
      (PlayerQuestComp *const)is_notifya._M_string_length,
      2u,
      *(_DWORD *)(v3 + 48));
    *((_DWORD *)&is_notifya._anon_0._M_allocated_capacity + 2) = PlayerQuestComp::findParentQuestId(
                                                                   (const PlayerQuestComp *const)is_notifya._M_string_length,
                                                                   *(_DWORD *)(v3 + 48));
    PlayerQuestComp::onQuestVarUpdate(
      (PlayerQuestComp *const)is_notifya._M_string_length,
      *((uint32_t *)&is_notifya._anon_0._M_allocated_capacity + 2),
      (bool)is_notifya._M_dataplus._M_p);
    ServiceBox::findService<GameserverService>();
    GameserverService::getConfig((GameserverService *const)&v20);
    v13 = std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false> *const)&v20);
    isChapterBeginQuest = QuestExcelConfigMgr::isChapterBeginQuest(
                            &v13->design_config.txt_config_mgr.quest_config_mgr,
                            *(_DWORD *)(v3 + 48));
    std::shared_ptr<Config>::~shared_ptr(&v20);
    if ( isChapterBeginQuest )
      PlayerQuestComp::setChapterStateByQuestId(
        (PlayerQuestComp *const)is_notifya._M_string_length,
        *(_DWORD *)(v3 + 48),
        CHAPTER_STATE_BEGIN,
        (bool)is_notifya._M_dataplus._M_p);
    std::shared_ptr<Quest>::shared_ptr((std::shared_ptr<Quest> *const)&v20, (const std::shared_ptr<Quest> *)(v3 + 64));
    PlayerQuestComp::trySettleQuestAfterUpdate(
      (PlayerQuestComp *const)is_notifya._M_string_length,
      (QuestPtr *)&v20,
      (bool)is_notifya._M_dataplus._M_p);
    std::shared_ptr<Quest>::~shared_ptr((std::shared_ptr<Quest> *const)&v20);
    v15 = std::__shared_ptr_access<Quest,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Quest,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 64));
    if ( Quest::getState(v15) == QUEST_STATE_UNFINISHED )
    {
      v16 = std::__shared_ptr_access<Quest,(__gnu_cxx::_Lock_policy)2,false,false>::operator*((const std::__shared_ptr_access<Quest,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 64));
      PlayerQuestComp::tryRollbackSharedQuests(
        (PlayerQuestComp *const)is_notifya._M_string_length,
        v16,
        (bool)is_notifya._M_dataplus._M_p);
      PlayerQuestComp::triggerPostQuest(
        (PlayerQuestComp *const)is_notifya._M_string_length,
        *(_DWORD *)(v3 + 48),
        (bool)is_notifya._M_dataplus._M_p);
    }
    if ( *(_BYTE *)(((is_notifya._M_string_length + 24) >> 3) + 0x7FFF8000) )
      __asan_report_load8(is_notifya._M_string_length + 24);
    MpComp = Player::getMpComp(*(Player *const *)(is_notifya._M_string_length + 24));
    PlayerMpComp::refreshMpModeAvailability(MpComp);
    v9 = 0;
    StatLogUtils::ContextHolder::~ContextHolder((StatLogUtils::ContextHolder *const)(v3 + 32));
  }
  std::shared_ptr<Quest>::~shared_ptr((std::shared_ptr<Quest> *const)(v3 + 64));
  result = v9;
  if ( v22 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8008) = 0;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8008) = -168430091;
  }
  return result;
};

// Line 1230: range 0000000013DD672A-0000000013DD6760
int32_t __cdecl PlayerQuestComp::refreshQuestProgress(PlayerQuestComp *const this, uint32_t quest_id, bool is_notify)
{
  QuestOperator::refreshQuestProgress(&this->quest_op_, quest_id, is_notify);
  return 0;
};

// Line 1237: range 0000000013DD6762-0000000013DD6B91
__int64 __fastcall PlayerQuestComp::internalRefreshQuestProgress(
        PlayerQuestComp *const this,
        uint32_t quest_id,
        bool is_notify)
{
  unsigned __int64 v3; // r12
  __int64 v4; // rax
  _DWORD *v5; // r13
  common::milog::MiLogStream *v6; // rax
  common::milog::MiLogStream *v7; // rax
  common::milog::MiLogStream *v8; // r14
  unsigned int v9; // r14d
  PlayerMpComp *MpComp; // rax
  std::__shared_ptr_access<Quest,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v12; // rax
  common::milog::MiLogStream *v13; // rax
  common::milog::MiLogStream *v14; // rax
  common::milog::MiLogStream *v15; // rcx
  Quest *v16; // rax
  __int64 result; // rax
  unsigned int val; // [rsp+14h] [rbp-BCh] BYREF
  const data::QuestExcelConfig *quest_config_ptr; // [rsp+18h] [rbp-B8h]
  common::milog::MiLogStream v21; // [rsp+20h] [rbp-B0h] BYREF
  char v22[144]; // [rsp+40h] [rbp-90h] BYREF

  v3 = (unsigned __int64)v22;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_1(96LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "2 48 4 13 quest_id:1236 64 16 14 quest_ptr:1238";
  *(_QWORD *)(v3 + 16) = PlayerQuestComp::internalRefreshQuestProgress;
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = -234556943;
  v5[536862722] = -202178560;
  *(_DWORD *)(v3 + 48) = quest_id;
  PlayerQuestComp::findQuest((const PlayerQuestComp *const)(v3 + 64), (__int64)this, *(_DWORD *)(v3 + 48));
  if ( std::operator==<Quest>((const std::shared_ptr<Quest> *)(v3 + 64), 0LL) )
  {
    common::milog::MiLogStream::create(
      &v21,
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/player/quest/player_quest_comp.cpp",
      "internalRefreshQuestProgress",
      1241);
    v6 = common::milog::MiLogStream::operator<<<char [28],(char *[28])0>(
           &v21,
           (const char (*)[28])"findQuest failed, quest_id:");
    v7 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v6, (const unsigned int *)(v3 + 48));
    v8 = common::milog::MiLogStream::operator<<<char [6],(char *[6])0>(v7, (const char (*)[6])" uid:");
    if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
      __asan_report_load8(&this->player_);
    val = Player::getUid(this->player_);
    common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v8, &val);
    common::milog::MiLogStream::~MiLogStream(&v21);
    v9 = -1;
  }
  else
  {
    if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
      __asan_report_load8(&this->player_);
    MpComp = Player::getMpComp(this->player_);
    if ( !PlayerMpComp::isInMpMode(MpComp) || !PlayerQuestComp::isSingleModeQuest(this, *(_DWORD *)(v3 + 48)) )
      goto LABEL_22;
    v12 = std::__shared_ptr_access<Quest,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Quest,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 64));
    quest_config_ptr = Quest::getQuestConfig(v12);
    if ( !quest_config_ptr )
      goto LABEL_22;
    if ( *(char *)(((unsigned __int64)&quest_config_ptr->is_refresh_single_mode_only >> 3) + 0x7FFF8000) < 0 )
      __asan_report_load1(&quest_config_ptr->is_refresh_single_mode_only);
    if ( quest_config_ptr->is_refresh_single_mode_only )
    {
      common::milog::MiLogStream::create(
        &v21,
        &common::milog::MiLogDefault::default_log_obj_,
        1u,
        "./src/player/quest/player_quest_comp.cpp",
        "internalRefreshQuestProgress",
        1251);
      v13 = common::milog::MiLogStream::operator<<<char [8],(char *[8])0>(&v21, (const char (*)[8])" quest:");
      v14 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v13, (const unsigned int *)(v3 + 48));
      v15 = common::milog::MiLogStream::operator<<<char [34],(char *[34])0>(
              v14,
              (const char (*)[34])" can NOT be refreshed in mp mode.");
      if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
        __asan_report_load8(&this->player_);
      operator<<(v15, this->player_);
      common::milog::MiLogStream::~MiLogStream(&v21);
      v9 = 0;
    }
    else
    {
LABEL_22:
      v16 = std::__shared_ptr_access<Quest,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Quest,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 64));
      Quest::refreshProgress(v16, is_notify, 0);
      v9 = 0;
    }
  }
  std::shared_ptr<Quest>::~shared_ptr((std::shared_ptr<Quest> *const)(v3 + 64));
  result = v9;
  if ( v22 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8008) = 0;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8008) = -168430091;
  }
  return result;
};

// Line 1263: range 0000000013DD6B92-0000000013DD6BC8
int32_t __cdecl PlayerQuestComp::finishQuest(PlayerQuestComp *const this, uint32_t quest_id, bool is_notify)
{
  QuestOperator::finishQuest(&this->quest_op_, quest_id, is_notify);
  return 0;
};

// Line 1269: range 0000000013DD6BCA-0000000013DD724F
__int64 __fastcall PlayerQuestComp::internalFinishQuest(PlayerQuestComp *const this, uint32_t quest_id, bool is_notify)
{
  unsigned __int64 v3; // r12
  __int64 v4; // rax
  unsigned __int64 v5; // r13
  common::milog::MiLogStream *v6; // r14
  common::milog::MiLogStream *v7; // rax
  common::milog::MiLogStream *v8; // rax
  __int64 result; // rax
  std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v10; // rax
  bool isChapterEndQuest; // r14
  std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v12; // rax
  bool v13; // r14
  PlayerBasicComp *BasicComp; // rax
  common::milog::MiLogStream *v15; // rax
  common::milog::MiLogStream *v16; // rax
  common::milog::MiLogStream *v17; // r14
  common::milog::MiLogStream *v18; // rax
  common::milog::MiLogStream *v19; // rax
  common::milog::MiLogStream *v20; // rbx
  PlayerMpComp *MpComp; // rax
  unsigned int val; // [rsp+14h] [rbp-ACh] BYREF
  const data::QuestExcelConfig *quest_config_ptr; // [rsp+18h] [rbp-A8h]
  std::shared_ptr<Config> v25; // [rsp+20h] [rbp-A0h] BYREF
  common::milog::MiLogStream v26; // [rsp+30h] [rbp-90h] BYREF
  char v27[112]; // [rsp+50h] [rbp-70h] BYREF

  v3 = (unsigned __int64)v27;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_0(64LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "1 32 4 13 quest_id:1268";
  *(_QWORD *)(v3 + 16) = PlayerQuestComp::internalFinishQuest;
  v5 = v3 >> 3;
  *(_DWORD *)(v5 + 2147450880) = -235802127;
  *(_DWORD *)(v5 + 2147450884) = -202116348;
  *(_DWORD *)(v3 + 32) = quest_id;
  quest_config_ptr = PlayerQuestComp::findPlayerQuestExcelConfig(this, *(_DWORD *)(v3 + 32));
  if ( quest_config_ptr )
  {
    PlayerQuestComp::triggerQuestFinishEvent(this, *(_DWORD *)(v3 + 32));
    if ( *(_BYTE *)(((unsigned __int64)&quest_config_ptr->finish_parent >> 3) + 0x7FFF8000) != 0
      && (((unsigned __int8)quest_config_ptr - 68) & 7) >= *(_BYTE *)(((unsigned __int64)&quest_config_ptr->finish_parent >> 3)
                                                                    + 0x7FFF8000) )
    {
      __asan_report_load1(&quest_config_ptr->finish_parent);
    }
    if ( quest_config_ptr->finish_parent )
    {
      if ( *(_BYTE *)(((unsigned __int64)&quest_config_ptr->main_id >> 3) + 0x7FFF8000) != 0
        && (char)((((_BYTE)quest_config_ptr + 12) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&quest_config_ptr->main_id >> 3)
                                                                        + 0x7FFF8000) )
      {
        __asan_report_load4(&quest_config_ptr->main_id);
      }
      PlayerQuestComp::finishParentQuest(this, quest_config_ptr->main_id, is_notify);
    }
    ServiceBox::findService<GameserverService>();
    GameserverService::getConfig((GameserverService *const)&v25);
    v10 = std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false> *const)&v25);
    isChapterEndQuest = QuestExcelConfigMgr::isChapterEndQuest(
                          &v10->design_config.txt_config_mgr.quest_config_mgr,
                          *(_DWORD *)(v3 + 32));
    std::shared_ptr<Config>::~shared_ptr(&v25);
    if ( isChapterEndQuest )
      PlayerQuestComp::setChapterStateByQuestId(this, *(_DWORD *)(v3 + 32), CHAPTER_STATE_END, is_notify);
    PlayerQuestComp::triggerPostQuest(this, *(_DWORD *)(v3 + 32), is_notify);
    PlayerQuestComp::tryRemoveMpBlockQuest(this, *(_DWORD *)(v3 + 32));
    ServiceBox::findService<GameserverService>();
    GameserverService::getConfig((GameserverService *const)&v25);
    v12 = std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false> *const)&v25);
    v13 = ConstValueExcelConfigMgr::getProficientPlayerQuestId(&v12->design_config.txt_config_mgr.const_value_config_mgr) == *(_DWORD *)(v3 + 32);
    std::shared_ptr<Config>::~shared_ptr(&v25);
    if ( v13 )
    {
      if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
        __asan_report_load8(&this->player_);
      BasicComp = Player::getBasicComp(this->player_);
      PlayerBasicComp::setIsProficientPlayer(BasicComp, 1);
      if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
        __asan_report_load8(&this->player_);
      Player::savePlayerDataToDB(this->player_);
      common::milog::MiLogStream::create(
        &v26,
        &common::milog::MiLogDefault::default_log_obj_,
        2u,
        "./src/player/quest/player_quest_comp.cpp",
        "internalFinishQuest",
        1299);
      v15 = common::milog::MiLogStream::operator<<<char [39],(char *[39])0>(
              &v26,
              (const char (*)[39])"Player finish proficient_player_quest:");
      v16 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v15, (const unsigned int *)(v3 + 32));
      v17 = common::milog::MiLogStream::operator<<<char [6],(char *[6])0>(v16, (const char (*)[6])" uid:");
      if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
        __asan_report_load8(&this->player_);
      val = Player::getUid(this->player_);
      common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v17, &val);
      common::milog::MiLogStream::~MiLogStream(&v26);
    }
    common::milog::MiLogStream::create(
      &v26,
      &common::milog::MiLogDefault::default_log_obj_,
      2u,
      "./src/player/quest/player_quest_comp.cpp",
      "internalFinishQuest",
      1302);
    v18 = common::milog::MiLogStream::operator<<<char [32],(char *[32])0>(
            &v26,
            (const char (*)[32])"[QUEST] quest finish, quest_id:");
    v19 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v18, (const unsigned int *)(v3 + 32));
    v20 = common::milog::MiLogStream::operator<<<char [6],(char *[6])0>(v19, (const char (*)[6])" uid:");
    if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
      __asan_report_load8(&this->player_);
    val = Player::getUid(this->player_);
    common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v20, &val);
    common::milog::MiLogStream::~MiLogStream(&v26);
    if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
      __asan_report_load8(&this->player_);
    MpComp = Player::getMpComp(this->player_);
    PlayerMpComp::refreshMpModeAvailability(MpComp);
    result = 0LL;
  }
  else
  {
    common::milog::MiLogStream::create(
      &v26,
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/player/quest/player_quest_comp.cpp",
      "internalFinishQuest",
      1273);
    v6 = common::milog::MiLogStream::operator<<<char [40],(char *[40])0>(
           &v26,
           (const char (*)[40])"findPlayerQuestExcelConfig failed, uid:");
    if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
      __asan_report_load8(&this->player_);
    val = Player::getUid(this->player_);
    v7 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v6, &val);
    v8 = common::milog::MiLogStream::operator<<<char [11],(char *[11])0>(v7, (const char (*)[11])" quest_id:");
    common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v8, (const unsigned int *)(v3 + 32));
    common::milog::MiLogStream::~MiLogStream(&v26);
    result = 0xFFFFFFFFLL;
  }
  if ( v27 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 1311: range 0000000013DD7250-0000000013DD7286
int32_t __cdecl PlayerQuestComp::finishParentQuest(
        PlayerQuestComp *const this,
        uint32_t parent_quest_id,
        bool is_notify)
{
  QuestOperator::finishParentQuest(&this->quest_op_, parent_quest_id, is_notify);
  return 0;
};

// Line 1317: range 0000000013DD7288-0000000013DD7798
// local variable allocation has failed, the output may be wrong!
__int64 __fastcall PlayerQuestComp::internalFinishParentQuest(
        PlayerQuestComp *const this,
        uint32_t parent_quest_id,
        bool is_notify)
{
  unsigned __int64 v3; // r12
  __int64 v4; // rax
  _DWORD *v5; // r13
  PlayerBasicComp *BasicComp; // rax
  common::milog::MiLogStream *v7; // r14
  common::milog::MiLogStream *v8; // rax
  common::milog::MiLogStream *v9; // rax
  unsigned int v10; // r14d
  ParentQuest *v11; // rax
  __gnu_cxx::__normal_iterator<unsigned int const*,std::vector<unsigned int> >::reference v12; // rax
  _DWORD *v13; // rdx
  common::milog::MiLogStream *v14; // rax
  common::milog::MiLogStream *v15; // rax
  common::milog::MiLogStream *v16; // r14
  __int64 result; // rax
  std::string is_notifya; // [rsp+0h] [rbp-F0h] OVERLAPPED BYREF
  std::vector<unsigned int>::const_iterator __for_begin; // [rsp+20h] [rbp-D0h] BYREF
  std::vector<unsigned int>::const_iterator __for_end; // [rsp+28h] [rbp-C8h] BYREF
  const data::MainQuestExcelConfig *parent_quest_config_ptr; // [rsp+30h] [rbp-C0h]
  const std::vector<unsigned int> *__for_range; // [rsp+38h] [rbp-B8h]
  std::string v23; // [rsp+40h] [rbp-B0h] BYREF
  char v24[144]; // [rsp+60h] [rbp-90h] BYREF

  is_notifya._M_string_length = (std::string::size_type)this;
  HIDWORD(is_notifya._M_dataplus._M_p) = parent_quest_id;
  LOBYTE(is_notifya._M_dataplus._M_p) = is_notify;
  v3 = (unsigned __int64)v24;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_1(96LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "3 32 1 11 holder:1318 48 4 20 parent_quest_id:1316 64 16 21 parent_quest_ptr:1319";
  *(_QWORD *)(v3 + 16) = PlayerQuestComp::internalFinishParentQuest;
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = -234556927;
  v5[536862722] = -202178560;
  *(_DWORD *)(v3 + 48) = HIDWORD(is_notifya._M_dataplus._M_p);
  if ( *(_BYTE *)(((is_notifya._M_string_length + 24) >> 3) + 0x7FFF8000) )
    __asan_report_load8(is_notifya._M_string_length + 24);
  BasicComp = Player::getBasicComp(*(Player *const *)(is_notifya._M_string_length + 24));
  PlayerBasicComp::getNextTransNo[abi:cxx11](&v23, BasicComp);
  StatLogUtils::ContextHolder::ContextHolder((StatLogUtils::ContextHolder *const)(v3 + 32), 0xCAu, is_notifya);
  std::string::~string(&v23);
  PlayerQuestComp::findParentQuest(
    (const PlayerQuestComp *const)(v3 + 64),
    is_notifya._M_string_length,
    *(_DWORD *)(v3 + 48));
  if ( std::operator==<ParentQuest>((const std::shared_ptr<ParentQuest> *)(v3 + 64), 0LL) )
  {
    common::milog::MiLogStream::create(
      (common::milog::MiLogStream *)&v23,
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/player/quest/player_quest_comp.cpp",
      "internalFinishParentQuest",
      1322);
    v7 = common::milog::MiLogStream::operator<<<char [29],(char *[29])0>(
           (common::milog::MiLogStream *const)&v23,
           (const char (*)[29])"findParentQuest failed, uid:");
    if ( *(_BYTE *)(((is_notifya._M_string_length + 24) >> 3) + 0x7FFF8000) )
      __asan_report_load8(is_notifya._M_string_length + 24);
    *((_DWORD *)&is_notifya._anon_0._M_allocated_capacity + 2) = Player::getUid(*(const Player *const *)(is_notifya._M_string_length + 24));
    v8 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
           v7,
           (const unsigned int *)&is_notifya._anon_0._M_allocated_capacity + 2);
    v9 = common::milog::MiLogStream::operator<<<char [18],(char *[18])0>(v8, (const char (*)[18])" parent_quest_id:");
    common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v9, (const unsigned int *)(v3 + 48));
    common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)&v23);
    v10 = -1;
  }
  else
  {
    v11 = std::__shared_ptr_access<ParentQuest,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<ParentQuest,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 64));
    ParentQuest::finish(v11, (bool)is_notifya._M_dataplus._M_p);
    parent_quest_config_ptr = PlayerQuestComp::findPlayerParentQuestExcelConfig(
                                (const PlayerQuestComp *const)is_notifya._M_string_length,
                                *(_DWORD *)(v3 + 48));
    if ( parent_quest_config_ptr )
    {
      __for_range = &parent_quest_config_ptr->child_quest_list;
      __for_begin._M_current = std::vector<unsigned int>::begin(&parent_quest_config_ptr->child_quest_list)._M_current;
      __for_end._M_current = std::vector<unsigned int>::end(&parent_quest_config_ptr->child_quest_list)._M_current;
      while ( __gnu_cxx::operator!=<unsigned int const*,std::vector<unsigned int>>(&__for_begin, &__for_end) )
      {
        v12 = __gnu_cxx::__normal_iterator<unsigned int const*,std::vector<unsigned int>>::operator*(&__for_begin);
        v13 = v12;
        if ( *(_BYTE *)(((unsigned __int64)v12 >> 3) + 0x7FFF8000) != 0
          && (char)(((unsigned __int8)v12 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)v12 >> 3) + 0x7FFF8000) )
        {
          __asan_report_load4(v12);
        }
        *((_DWORD *)&is_notifya._anon_0._M_allocated_capacity + 3) = *v13;
        PlayerQuestComp::removeQuest(
          (PlayerQuestComp *const)is_notifya._M_string_length,
          *((uint32_t *)&is_notifya._anon_0._M_allocated_capacity + 3),
          1u,
          0);
        __gnu_cxx::__normal_iterator<unsigned int const*,std::vector<unsigned int>>::operator++(&__for_begin);
      }
    }
    common::milog::MiLogStream::create(
      (common::milog::MiLogStream *)&v23,
      &common::milog::MiLogDefault::default_log_obj_,
      2u,
      "./src/player/quest/player_quest_comp.cpp",
      "internalFinishParentQuest",
      1339);
    v14 = common::milog::MiLogStream::operator<<<char [46],(char *[46])0>(
            (common::milog::MiLogStream *const)&v23,
            (const char (*)[46])"[QUEST] parent quest finish, parent_quest_id:");
    v15 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v14, (const unsigned int *)(v3 + 48));
    v16 = common::milog::MiLogStream::operator<<<char [6],(char *[6])0>(v15, (const char (*)[6])" uid:");
    if ( *(_BYTE *)(((is_notifya._M_string_length + 24) >> 3) + 0x7FFF8000) )
      __asan_report_load8(is_notifya._M_string_length + 24);
    *((_DWORD *)&is_notifya._anon_0._M_allocated_capacity + 2) = Player::getUid(*(const Player *const *)(is_notifya._M_string_length + 24));
    common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
      v16,
      (const unsigned int *)&is_notifya._anon_0._M_allocated_capacity + 2);
    common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)&v23);
    v10 = 0;
  }
  std::shared_ptr<ParentQuest>::~shared_ptr((std::shared_ptr<ParentQuest> *const)(v3 + 64));
  StatLogUtils::ContextHolder::~ContextHolder((StatLogUtils::ContextHolder *const)(v3 + 32));
  result = v10;
  if ( v24 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8008) = 0;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8008) = -168430091;
  }
  return result;
};

// Line 1346: range 0000000013DD779A-0000000013DD77D0
int32_t __cdecl PlayerQuestComp::failParentQuest(PlayerQuestComp *const this, uint32_t parent_quest_id, bool is_notify)
{
  QuestOperator::failParentQuest(&this->quest_op_, parent_quest_id, is_notify);
  return 0;
};

// Line 1352: range 0000000013DD77D2-0000000013DD7CFF
// local variable allocation has failed, the output may be wrong!
__int64 __fastcall PlayerQuestComp::internalFailParentQuest(
        PlayerQuestComp *const this,
        uint32_t parent_quest_id,
        bool is_notify)
{
  unsigned __int64 v3; // r12
  __int64 v4; // rax
  _DWORD *v5; // r13
  PlayerBasicComp *BasicComp; // rax
  common::milog::MiLogStream *v7; // r14
  common::milog::MiLogStream *v8; // rax
  common::milog::MiLogStream *v9; // rax
  unsigned int v10; // r14d
  ParentQuest *v11; // rax
  __gnu_cxx::__normal_iterator<unsigned int const*,std::vector<unsigned int> >::reference v12; // rax
  _DWORD *v13; // rdx
  common::milog::MiLogStream *v14; // rax
  common::milog::MiLogStream *v15; // rax
  common::milog::MiLogStream *v16; // r14
  __int64 result; // rax
  std::string is_notifya; // [rsp+0h] [rbp-F0h] OVERLAPPED BYREF
  std::vector<unsigned int>::const_iterator __for_begin; // [rsp+20h] [rbp-D0h] BYREF
  std::vector<unsigned int>::const_iterator __for_end; // [rsp+28h] [rbp-C8h] BYREF
  const data::MainQuestExcelConfig *parent_quest_config_ptr; // [rsp+30h] [rbp-C0h]
  const std::vector<unsigned int> *__for_range; // [rsp+38h] [rbp-B8h]
  std::string v23; // [rsp+40h] [rbp-B0h] BYREF
  char v24[144]; // [rsp+60h] [rbp-90h] BYREF

  is_notifya._M_string_length = (std::string::size_type)this;
  HIDWORD(is_notifya._M_dataplus._M_p) = parent_quest_id;
  LOBYTE(is_notifya._M_dataplus._M_p) = is_notify;
  v3 = (unsigned __int64)v24;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_1(96LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "3 32 1 11 holder:1353 48 4 20 parent_quest_id:1351 64 16 21 parent_quest_ptr:1354";
  *(_QWORD *)(v3 + 16) = PlayerQuestComp::internalFailParentQuest;
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = -234556927;
  v5[536862722] = -202178560;
  *(_DWORD *)(v3 + 48) = HIDWORD(is_notifya._M_dataplus._M_p);
  if ( *(_BYTE *)(((is_notifya._M_string_length + 24) >> 3) + 0x7FFF8000) )
    __asan_report_load8(is_notifya._M_string_length + 24);
  BasicComp = Player::getBasicComp(*(Player *const *)(is_notifya._M_string_length + 24));
  PlayerBasicComp::getNextTransNo[abi:cxx11](&v23, BasicComp);
  StatLogUtils::ContextHolder::ContextHolder((StatLogUtils::ContextHolder *const)(v3 + 32), 0xCBu, is_notifya);
  std::string::~string(&v23);
  PlayerQuestComp::findParentQuest(
    (const PlayerQuestComp *const)(v3 + 64),
    is_notifya._M_string_length,
    *(_DWORD *)(v3 + 48));
  if ( std::operator==<ParentQuest>((const std::shared_ptr<ParentQuest> *)(v3 + 64), 0LL) )
  {
    common::milog::MiLogStream::create(
      (common::milog::MiLogStream *)&v23,
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/player/quest/player_quest_comp.cpp",
      "internalFailParentQuest",
      1357);
    v7 = common::milog::MiLogStream::operator<<<char [29],(char *[29])0>(
           (common::milog::MiLogStream *const)&v23,
           (const char (*)[29])"findParentQuest failed, uid:");
    if ( *(_BYTE *)(((is_notifya._M_string_length + 24) >> 3) + 0x7FFF8000) )
      __asan_report_load8(is_notifya._M_string_length + 24);
    *((_DWORD *)&is_notifya._anon_0._M_allocated_capacity + 2) = Player::getUid(*(const Player *const *)(is_notifya._M_string_length + 24));
    v8 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
           v7,
           (const unsigned int *)&is_notifya._anon_0._M_allocated_capacity + 2);
    v9 = common::milog::MiLogStream::operator<<<char [18],(char *[18])0>(v8, (const char (*)[18])" parent_quest_id:");
    common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v9, (const unsigned int *)(v3 + 48));
    common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)&v23);
    v10 = -1;
  }
  else
  {
    v11 = std::__shared_ptr_access<ParentQuest,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<ParentQuest,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 64));
    ParentQuest::fail(v11, (bool)is_notifya._M_dataplus._M_p);
    parent_quest_config_ptr = PlayerQuestComp::findPlayerParentQuestExcelConfig(
                                (const PlayerQuestComp *const)is_notifya._M_string_length,
                                *(_DWORD *)(v3 + 48));
    if ( parent_quest_config_ptr )
    {
      __for_range = &parent_quest_config_ptr->child_quest_list;
      __for_begin._M_current = std::vector<unsigned int>::begin(&parent_quest_config_ptr->child_quest_list)._M_current;
      __for_end._M_current = std::vector<unsigned int>::end(&parent_quest_config_ptr->child_quest_list)._M_current;
      while ( __gnu_cxx::operator!=<unsigned int const*,std::vector<unsigned int>>(&__for_begin, &__for_end) )
      {
        v12 = __gnu_cxx::__normal_iterator<unsigned int const*,std::vector<unsigned int>>::operator*(&__for_begin);
        v13 = v12;
        if ( *(_BYTE *)(((unsigned __int64)v12 >> 3) + 0x7FFF8000) != 0
          && (char)(((unsigned __int8)v12 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)v12 >> 3) + 0x7FFF8000) )
        {
          __asan_report_load4(v12);
        }
        *((_DWORD *)&is_notifya._anon_0._M_allocated_capacity + 3) = *v13;
        PlayerQuestComp::removeQuest(
          (PlayerQuestComp *const)is_notifya._M_string_length,
          *((uint32_t *)&is_notifya._anon_0._M_allocated_capacity + 3),
          6u,
          (bool)is_notifya._M_dataplus._M_p);
        __gnu_cxx::__normal_iterator<unsigned int const*,std::vector<unsigned int>>::operator++(&__for_begin);
      }
    }
    PlayerQuestComp::removeParentQuest((PlayerQuestComp *const)is_notifya._M_string_length, *(_DWORD *)(v3 + 48), 1);
    common::milog::MiLogStream::create(
      (common::milog::MiLogStream *)&v23,
      &common::milog::MiLogDefault::default_log_obj_,
      2u,
      "./src/player/quest/player_quest_comp.cpp",
      "internalFailParentQuest",
      1374);
    v14 = common::milog::MiLogStream::operator<<<char [44],(char *[44])0>(
            (common::milog::MiLogStream *const)&v23,
            (const char (*)[44])"[QUEST] parent quest fail, parent_quest_id:");
    v15 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v14, (const unsigned int *)(v3 + 48));
    v16 = common::milog::MiLogStream::operator<<<char [6],(char *[6])0>(v15, (const char (*)[6])" uid:");
    if ( *(_BYTE *)(((is_notifya._M_string_length + 24) >> 3) + 0x7FFF8000) )
      __asan_report_load8(is_notifya._M_string_length + 24);
    *((_DWORD *)&is_notifya._anon_0._M_allocated_capacity + 2) = Player::getUid(*(const Player *const *)(is_notifya._M_string_length + 24));
    common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
      v16,
      (const unsigned int *)&is_notifya._anon_0._M_allocated_capacity + 2);
    common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)&v23);
    v10 = 0;
  }
  std::shared_ptr<ParentQuest>::~shared_ptr((std::shared_ptr<ParentQuest> *const)(v3 + 64));
  StatLogUtils::ContextHolder::~ContextHolder((StatLogUtils::ContextHolder *const)(v3 + 32));
  result = v10;
  if ( v24 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8008) = 0;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8008) = -168430091;
  }
  return result;
};

// Line 1380: range 0000000013DD7D00-0000000013DD7E28
int32_t __cdecl PlayerQuestComp::cancelParentQuest(
        PlayerQuestComp *const this,
        uint32_t parent_quest_id,
        bool is_notify)
{
  unsigned __int64 v3; // rbx
  __int64 v4; // rax
  unsigned __int64 v5; // r12
  int32_t result; // eax
  char v8[112]; // [rsp+10h] [rbp-70h] BYREF

  v3 = (unsigned __int64)v8;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_0(64LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "1 32 16 10 guard:1381";
  *(_QWORD *)(v3 + 16) = PlayerQuestComp::cancelParentQuest;
  v5 = v3 >> 3;
  *(_DWORD *)(v5 + 2147450880) = -235802127;
  *(_DWORD *)(v5 + 2147450884) = -202178560;
  QuestOperatorGuard::QuestOperatorGuard((QuestOperatorGuard *const)(v3 + 32), &this->quest_op_);
  QuestOperator::cancelParentQuest(&this->quest_op_, parent_quest_id, is_notify);
  QuestOperatorGuard::~QuestOperatorGuard((QuestOperatorGuard *const)(v3 + 32));
  result = 0;
  if ( v8 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 1388: range 0000000013DD7E2A-0000000013DD83A8
// local variable allocation has failed, the output may be wrong!
__int64 __fastcall PlayerQuestComp::internalCancelParentQuest(
        PlayerQuestComp *const this,
        uint32_t parent_quest_id,
        bool is_notify)
{
  unsigned __int64 v3; // r12
  __int64 v4; // rax
  _DWORD *v5; // r13
  PlayerBasicComp *BasicComp; // rax
  common::milog::MiLogStream *v7; // r14
  common::milog::MiLogStream *v8; // rax
  common::milog::MiLogStream *v9; // rax
  unsigned int v10; // r14d
  std::__shared_ptr_access<ParentQuest,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v11; // rax
  ParentQuest *v12; // rax
  std::__shared_ptr_access<ParentQuest,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v13; // rax
  __gnu_cxx::__normal_iterator<unsigned int const*,std::vector<unsigned int> >::reference v14; // rax
  _DWORD *v15; // rdx
  common::milog::MiLogStream *v16; // rax
  common::milog::MiLogStream *v17; // rax
  common::milog::MiLogStream *v18; // r14
  __int64 result; // rax
  std::string is_notifya; // [rsp+0h] [rbp-F0h] OVERLAPPED BYREF
  std::vector<unsigned int>::const_iterator __for_begin; // [rsp+20h] [rbp-D0h] BYREF
  std::vector<unsigned int>::const_iterator __for_end; // [rsp+28h] [rbp-C8h] BYREF
  const data::MainQuestExcelConfig *parent_quest_config_ptr; // [rsp+30h] [rbp-C0h]
  const std::vector<unsigned int> *__for_range; // [rsp+38h] [rbp-B8h]
  std::string v25; // [rsp+40h] [rbp-B0h] BYREF
  char v26[144]; // [rsp+60h] [rbp-90h] BYREF

  is_notifya._M_string_length = (std::string::size_type)this;
  HIDWORD(is_notifya._M_dataplus._M_p) = parent_quest_id;
  LOBYTE(is_notifya._M_dataplus._M_p) = is_notify;
  v3 = (unsigned __int64)v26;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_1(96LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "3 32 1 11 holder:1389 48 4 20 parent_quest_id:1387 64 16 21 parent_quest_ptr:1390";
  *(_QWORD *)(v3 + 16) = PlayerQuestComp::internalCancelParentQuest;
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = -234556927;
  v5[536862722] = -202178560;
  *(_DWORD *)(v3 + 48) = HIDWORD(is_notifya._M_dataplus._M_p);
  if ( *(_BYTE *)(((is_notifya._M_string_length + 24) >> 3) + 0x7FFF8000) )
    __asan_report_load8(is_notifya._M_string_length + 24);
  BasicComp = Player::getBasicComp(*(Player *const *)(is_notifya._M_string_length + 24));
  PlayerBasicComp::getNextTransNo[abi:cxx11](&v25, BasicComp);
  StatLogUtils::ContextHolder::ContextHolder((StatLogUtils::ContextHolder *const)(v3 + 32), 0xCDu, is_notifya);
  std::string::~string(&v25);
  PlayerQuestComp::findParentQuest(
    (const PlayerQuestComp *const)(v3 + 64),
    is_notifya._M_string_length,
    *(_DWORD *)(v3 + 48));
  if ( std::operator==<ParentQuest>((const std::shared_ptr<ParentQuest> *)(v3 + 64), 0LL) )
  {
    common::milog::MiLogStream::create(
      (common::milog::MiLogStream *)&v25,
      &common::milog::MiLogDefault::default_log_obj_,
      1u,
      "./src/player/quest/player_quest_comp.cpp",
      "internalCancelParentQuest",
      1393);
    v7 = common::milog::MiLogStream::operator<<<char [29],(char *[29])0>(
           (common::milog::MiLogStream *const)&v25,
           (const char (*)[29])"findParentQuest failed, uid:");
    if ( *(_BYTE *)(((is_notifya._M_string_length + 24) >> 3) + 0x7FFF8000) )
      __asan_report_load8(is_notifya._M_string_length + 24);
    *((_DWORD *)&is_notifya._anon_0._M_allocated_capacity + 2) = Player::getUid(*(const Player *const *)(is_notifya._M_string_length + 24));
    v8 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
           v7,
           (const unsigned int *)&is_notifya._anon_0._M_allocated_capacity + 2);
    v9 = common::milog::MiLogStream::operator<<<char [18],(char *[18])0>(v8, (const char (*)[18])" parent_quest_id:");
    common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v9, (const unsigned int *)(v3 + 48));
    common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)&v25);
    v10 = -1;
  }
  else
  {
    v11 = std::__shared_ptr_access<ParentQuest,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<ParentQuest,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 64));
    if ( ParentQuest::getParentQuestState(v11) )
    {
      v13 = std::__shared_ptr_access<ParentQuest,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<ParentQuest,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 64));
      if ( ParentQuest::getParentQuestState(v13) == PARENT_QUEST_STATE_FINISHED )
        PlayerQuestComp::notifyCancelFinishParentQuest(
          (PlayerQuestComp *const)is_notifya._M_string_length,
          *(_DWORD *)(v3 + 48));
    }
    else
    {
      v12 = std::__shared_ptr_access<ParentQuest,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<ParentQuest,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 64));
      ParentQuest::cancel(v12, (bool)is_notifya._M_dataplus._M_p);
    }
    parent_quest_config_ptr = PlayerQuestComp::findPlayerParentQuestExcelConfig(
                                (const PlayerQuestComp *const)is_notifya._M_string_length,
                                *(_DWORD *)(v3 + 48));
    if ( parent_quest_config_ptr )
    {
      __for_range = &parent_quest_config_ptr->child_quest_list;
      __for_begin._M_current = std::vector<unsigned int>::begin(&parent_quest_config_ptr->child_quest_list)._M_current;
      __for_end._M_current = std::vector<unsigned int>::end(&parent_quest_config_ptr->child_quest_list)._M_current;
      while ( __gnu_cxx::operator!=<unsigned int const*,std::vector<unsigned int>>(&__for_begin, &__for_end) )
      {
        v14 = __gnu_cxx::__normal_iterator<unsigned int const*,std::vector<unsigned int>>::operator*(&__for_begin);
        v15 = v14;
        if ( *(_BYTE *)(((unsigned __int64)v14 >> 3) + 0x7FFF8000) != 0
          && (char)(((unsigned __int8)v14 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)v14 >> 3) + 0x7FFF8000) )
        {
          __asan_report_load4(v14);
        }
        *((_DWORD *)&is_notifya._anon_0._M_allocated_capacity + 3) = *v15;
        PlayerQuestComp::removeQuest(
          (PlayerQuestComp *const)is_notifya._M_string_length,
          *((uint32_t *)&is_notifya._anon_0._M_allocated_capacity + 3),
          7u,
          (bool)is_notifya._M_dataplus._M_p);
        __gnu_cxx::__normal_iterator<unsigned int const*,std::vector<unsigned int>>::operator++(&__for_begin);
      }
    }
    PlayerQuestComp::removeParentQuest((PlayerQuestComp *const)is_notifya._M_string_length, *(_DWORD *)(v3 + 48), 1);
    common::milog::MiLogStream::create(
      (common::milog::MiLogStream *)&v25,
      &common::milog::MiLogDefault::default_log_obj_,
      2u,
      "./src/player/quest/player_quest_comp.cpp",
      "internalCancelParentQuest",
      1417);
    v16 = common::milog::MiLogStream::operator<<<char [46],(char *[46])0>(
            (common::milog::MiLogStream *const)&v25,
            (const char (*)[46])"[QUEST] parent quest cancel, parent_quest_id:");
    v17 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v16, (const unsigned int *)(v3 + 48));
    v18 = common::milog::MiLogStream::operator<<<char [6],(char *[6])0>(v17, (const char (*)[6])" uid:");
    if ( *(_BYTE *)(((is_notifya._M_string_length + 24) >> 3) + 0x7FFF8000) )
      __asan_report_load8(is_notifya._M_string_length + 24);
    *((_DWORD *)&is_notifya._anon_0._M_allocated_capacity + 2) = Player::getUid(*(const Player *const *)(is_notifya._M_string_length + 24));
    common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
      v18,
      (const unsigned int *)&is_notifya._anon_0._M_allocated_capacity + 2);
    common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)&v25);
    v10 = 0;
  }
  std::shared_ptr<ParentQuest>::~shared_ptr((std::shared_ptr<ParentQuest> *const)(v3 + 64));
  StatLogUtils::ContextHolder::~ContextHolder((StatLogUtils::ContextHolder *const)(v3 + 32));
  result = v10;
  if ( v26 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8008) = 0;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8008) = -168430091;
  }
  return result;
};

// Line 1424: range 0000000013DD83AA-0000000013DD83E0
int32_t __cdecl PlayerQuestComp::failQuest(PlayerQuestComp *const this, uint32_t quest_id, bool is_notify)
{
  QuestOperator::failQuest(&this->quest_op_, quest_id, is_notify);
  return 0;
};

// Line 1430: range 0000000013DD83E2-0000000013DD8949
__int64 __fastcall PlayerQuestComp::internalFailQuest(PlayerQuestComp *const this, uint32_t quest_id, bool is_notify)
{
  unsigned __int64 v3; // r12
  __int64 v4; // rax
  _DWORD *v5; // r13
  common::milog::MiLogStream *v6; // rax
  common::milog::MiLogStream *v7; // rax
  common::milog::MiLogStream *v8; // r14
  unsigned int v9; // r14d
  std::__shared_ptr_access<Quest,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v10; // rax
  common::milog::MiLogStream *v11; // rax
  common::milog::MiLogStream *v12; // rax
  common::milog::MiLogStream *v13; // rax
  common::milog::MiLogStream *v14; // rax
  common::milog::MiLogStream *v15; // r14
  PlayerMpComp *MpComp; // rax
  __int64 result; // rax
  unsigned int val; // [rsp+14h] [rbp-BCh] BYREF
  const data::QuestExcelConfig *quest_config_ptr; // [rsp+18h] [rbp-B8h]
  common::milog::MiLogStream v21; // [rsp+20h] [rbp-B0h] BYREF
  char v22[144]; // [rsp+40h] [rbp-90h] BYREF

  v3 = (unsigned __int64)v22;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_1(96LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "2 48 4 13 quest_id:1429 64 16 14 quest_ptr:1431";
  *(_QWORD *)(v3 + 16) = PlayerQuestComp::internalFailQuest;
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = -234556943;
  v5[536862722] = -202178560;
  *(_DWORD *)(v3 + 48) = quest_id;
  PlayerQuestComp::findQuest((const PlayerQuestComp *const)(v3 + 64), (__int64)this, *(_DWORD *)(v3 + 48));
  if ( std::operator==<Quest>((const std::shared_ptr<Quest> *)(v3 + 64), 0LL) )
  {
    common::milog::MiLogStream::create(
      &v21,
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/player/quest/player_quest_comp.cpp",
      "internalFailQuest",
      1434);
    v6 = common::milog::MiLogStream::operator<<<char [28],(char *[28])0>(
           &v21,
           (const char (*)[28])"findQuest failed, quest_id:");
    v7 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v6, (const unsigned int *)(v3 + 48));
    v8 = common::milog::MiLogStream::operator<<<char [6],(char *[6])0>(v7, (const char (*)[6])" uid:");
    if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
      __asan_report_load8(&this->player_);
LABEL_7:
    val = Player::getUid(this->player_);
    common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v8, &val);
    common::milog::MiLogStream::~MiLogStream(&v21);
    v9 = -1;
    goto LABEL_23;
  }
  v10 = std::__shared_ptr_access<Quest,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Quest,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 64));
  quest_config_ptr = Quest::getQuestConfig(v10);
  if ( !quest_config_ptr )
  {
    common::milog::MiLogStream::create(
      &v21,
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/player/quest/player_quest_comp.cpp",
      "internalFailQuest",
      1441);
    v11 = common::milog::MiLogStream::operator<<<char [33],(char *[33])0>(
            &v21,
            (const char (*)[33])"getQuestConfig failed, quest_id:");
    v12 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v11, (const unsigned int *)(v3 + 48));
    v8 = common::milog::MiLogStream::operator<<<char [6],(char *[6])0>(v12, (const char (*)[6])" uid:");
    if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
      __asan_report_load8(&this->player_);
    goto LABEL_7;
  }
  PlayerQuestComp::triggerPostQuest(this, *(_DWORD *)(v3 + 48), is_notify);
  PlayerQuestComp::tryRemoveMpBlockQuest(this, *(_DWORD *)(v3 + 48));
  if ( *(_BYTE *)(((unsigned __int64)&quest_config_ptr->fail_parent >> 3) + 0x7FFF8000) != 0
    && (((unsigned __int8)quest_config_ptr - 67) & 7) >= *(_BYTE *)(((unsigned __int64)&quest_config_ptr->fail_parent >> 3)
                                                                  + 0x7FFF8000) )
  {
    __asan_report_load1(&quest_config_ptr->fail_parent);
  }
  if ( quest_config_ptr->fail_parent )
  {
    if ( *(_BYTE *)(((unsigned __int64)&quest_config_ptr->main_id >> 3) + 0x7FFF8000) != 0
      && (char)((((_BYTE)quest_config_ptr + 12) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&quest_config_ptr->main_id >> 3)
                                                                      + 0x7FFF8000) )
    {
      __asan_report_load4(&quest_config_ptr->main_id);
    }
    PlayerQuestComp::failParentQuest(this, quest_config_ptr->main_id, is_notify);
  }
  common::milog::MiLogStream::create(
    &v21,
    &common::milog::MiLogDefault::default_log_obj_,
    2u,
    "./src/player/quest/player_quest_comp.cpp",
    "internalFailQuest",
    1455);
  v13 = common::milog::MiLogStream::operator<<<char [30],(char *[30])0>(
          &v21,
          (const char (*)[30])"[QUEST] quest fail, quest_id:");
  v14 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v13, (const unsigned int *)(v3 + 48));
  v15 = common::milog::MiLogStream::operator<<<char [6],(char *[6])0>(v14, (const char (*)[6])" uid:");
  if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
    __asan_report_load8(&this->player_);
  val = Player::getUid(this->player_);
  common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v15, &val);
  common::milog::MiLogStream::~MiLogStream(&v21);
  if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
    __asan_report_load8(&this->player_);
  MpComp = Player::getMpComp(this->player_);
  PlayerMpComp::refreshMpModeAvailability(MpComp);
  v9 = 0;
LABEL_23:
  std::shared_ptr<Quest>::~shared_ptr((std::shared_ptr<Quest> *const)(v3 + 64));
  result = v9;
  if ( v22 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8008) = 0;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8008) = -168430091;
  }
  return result;
};

// Line 1463: range 0000000013DD894A-0000000013DD8992
int32_t __cdecl PlayerQuestComp::rollbackParentQuest(
        PlayerQuestComp *const this,
        uint32_t parent_quest_id,
        uint32_t child_quest_id,
        bool is_move_instant,
        bool is_notify)
{
  QuestOperator::rollbackParentQuest(&this->quest_op_, parent_quest_id, child_quest_id, is_move_instant, is_notify);
  return 0;
};

// Line 1469: range 0000000013DD8A6C-0000000013DDA175
__int64 __fastcall PlayerQuestComp::internalRollbackParentQuest(
        PlayerQuestComp *const this,
        uint32_t parent_quest_id,
        uint32_t roll_back_quest_id,
        __int8 is_move_instant,
        __int8 is_notify)
{
  unsigned __int64 v5; // r13
  __int64 v6; // rax
  _DWORD *v7; // r12
  common::milog::MiLogStream *v8; // rax
  common::milog::MiLogStream *v9; // rax
  common::milog::MiLogStream *v10; // rbx
  PlayerMpComp *MpComp; // rax
  common::milog::MiLogStream *v13; // rax
  common::milog::MiLogStream *v14; // rax
  common::milog::MiLogStream *v15; // rbx
  unsigned int v16; // r14d
  common::milog::MiLogStream *v17; // rax
  common::milog::MiLogStream *v18; // rax
  common::milog::MiLogStream *v19; // rax
  common::milog::MiLogStream *v20; // rax
  common::milog::MiLogStream *v21; // rax
  common::milog::MiLogStream *v22; // rax
  common::milog::MiLogStream *v23; // rax
  PlayerBasicComp *BasicComp; // rax
  __gnu_cxx::__normal_iterator<unsigned int const*,std::vector<unsigned int> >::reference v25; // rax
  _DWORD *v26; // rdx
  common::milog::MiLogStream *v27; // rax
  common::milog::MiLogStream *v28; // rax
  common::milog::MiLogStream *v29; // r14
  const data::QuestExcelConfig **v30; // rax
  std::vector<const data::QuestExcelConfig*>::iterator v31; // rax
  PlayerQuestComp::internalRollbackParentQuest::<lambda(const auto:27&, const auto:28&)> v32; // dl
  std::vector<const data::QuestExcelConfig*>::iterator v33; // rax
  unsigned __int64 v34; // rax
  __int64 v35; // rax
  const data::QuestExcelConfig **v36; // rax
  common::milog::MiLogStream *v37; // rax
  char v38; // al
  std::map<unsigned int,unsigned int>::mapped_type *v39; // rax
  uint32_t *v40; // rdx
  char v41; // cl
  std::tuple_element<0,const std::pair<unsigned int const,unsigned int> >::type *v42; // rsi
  __int64 v43; // rcx
  const data::QuestExcelConfig *const *v44; // rax
  const data::QuestExcelConfig *v45; // rax
  char v46; // dl
  std::__shared_ptr_access<Quest,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v47; // rax
  common::milog::MiLogStream *v50; // rax
  Quest *v51; // rax
  PlayerCoopComp *CoopComp; // rax
  PlayerCoopComp *v53; // rax
  std::__shared_ptr_access<Quest,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v54; // rax
  __int64 result; // rax
  std::string v57; // [rsp+0h] [rbp-2C0h]
  const data::QuestExcelConfig **__last; // [rsp+10h] [rbp-2B0h]
  const data::QuestExcelConfig **__lasta; // [rsp+10h] [rbp-2B0h]
  std::allocator<unsigned int> __a; // [rsp+32h] [rbp-28Eh] BYREF
  bool is_meet_roll_back_quest; // [rsp+33h] [rbp-28Dh]
  unsigned int val; // [rsp+34h] [rbp-28Ch] BYREF
  uint32_t safe_rollback_quest_id; // [rsp+38h] [rbp-288h]
  data::QuestState quest_state; // [rsp+3Ch] [rbp-284h]
  uint32_t suite_index; // [rsp+40h] [rbp-280h]
  uint32_t quest_id; // [rsp+44h] [rbp-27Ch]
  const data::MainQuestExcelConfig *parent_quest_config_ptr; // [rsp+48h] [rbp-278h]
  const data::QuestExcelConfig *roll_back_quest_config_ptr; // [rsp+50h] [rbp-270h]
  const std::vector<unsigned int> *__for_range; // [rsp+58h] [rbp-268h]
  std::vector<const data::QuestExcelConfig*> *__for_range_0; // [rsp+60h] [rbp-260h]
  const data::QuestExcelConfig *child_quest_config_ptr; // [rsp+68h] [rbp-258h]
  const std::map<unsigned int,unsigned int> *__for_range_1; // [rsp+70h] [rbp-250h]
  const std::pair<unsigned int const,unsigned int> *v74; // [rsp+78h] [rbp-248h]
  std::tuple_element<0,const std::pair<unsigned int const,unsigned int> >::type *group_id; // [rsp+80h] [rbp-240h]
  std::tuple_element<1,const std::pair<unsigned int const,unsigned int> >::type *_; // [rsp+88h] [rbp-238h]
  std::vector<const data::QuestExcelConfig*> *__for_range_2; // [rsp+90h] [rbp-230h]
  const data::QuestExcelConfig *const *child_quest_config_ptr_0; // [rsp+98h] [rbp-228h]
  const data::QuestExcelConfig *quest_config; // [rsp+A0h] [rbp-220h]
  const std::vector<int> *quest_var_vec; // [rsp+A8h] [rbp-218h]
  std::vector<unsigned int> quest_id_vec; // [rsp+B0h] [rbp-210h] BYREF
  common::milog::MiLogStream v82; // [rsp+D0h] [rbp-1F0h] BYREF
  char v83[464]; // [rsp+F0h] [rbp-1D0h] BYREF

  v57._anon_0._M_local_buf[12] = is_move_instant;
  v57._anon_0._M_local_buf[8] = is_notify;
  v5 = (unsigned __int64)v83;
  v57._M_string_length = (std::string::size_type)v83;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v6 = __asan_stack_malloc_3(416LL);
    if ( v6 )
      v5 = v6;
  }
  *(_QWORD *)v5 = 1102416563LL;
  *(_QWORD *)(v5 + 8) = "11 48 1 11 holder:1506 64 4 19 child_quest_id:1508 80 4 20 parent_quest_id:1468 96 4 23 roll_bac"
                        "k_quest_id:1468 112 8 38 quest_exist_and_is_rewind_predict:1527 144 8 16 config_iter:1528 176 8 "
                        "27 child_quest_config_ptr:1510 208 16 14 quest_ptr:1598 240 16 18 cur_quest_ptr:1622 272 24 27 c"
                        "hild_quest_config_vec:1507 336 48 33 refresh_flow_group_suite_map:1565";
  *(_QWORD *)(v5 + 16) = PlayerQuestComp::internalRollbackParentQuest;
  v7 = (_DWORD *)(v5 >> 3);
  v7[536862720] = -235802127;
  v7[536862721] = -234753551;
  v7[536862722] = -234556924;
  v7[536862723] = 61956;
  v7[536862723] = -234881024;
  v7[536862724] = 62194;
  v7[536862724] = -234881024;
  v7[536862725] = 62194;
  v7[536862725] = -234881024;
  v7[536862726] = 62194;
  v7[536862727] = 62194;
  v7[536862728] = 62194;
  v7[536862729] = -218959360;
  v7[536862730] = 62194;
  v7[536862732] = -202116109;
  *(_DWORD *)(v5 + 80) = parent_quest_id;
  *(_DWORD *)(v5 + 96) = roll_back_quest_id;
  parent_quest_config_ptr = PlayerQuestComp::findPlayerParentQuestExcelConfig(this, *(_DWORD *)(v5 + 80));
  if ( !parent_quest_config_ptr )
  {
    common::milog::MiLogStream::create(
      &v82,
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/player/quest/player_quest_comp.cpp",
      "internalRollbackParentQuest",
      1473);
    v8 = common::milog::MiLogStream::operator<<<char [58],(char *[58])0>(
           &v82,
           (const char (*)[58])"findPlayerParentQuestExcelConfig failed, parent_quest_id:");
    v9 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v8, (const unsigned int *)(v5 + 80));
    v10 = common::milog::MiLogStream::operator<<<char [6],(char *[6])0>(v9, (const char (*)[6])" uid:");
    if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
      __asan_report_load8(&this->player_);
LABEL_28:
    val = Player::getUid(this->player_);
    common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v10, &val);
    common::milog::MiLogStream::~MiLogStream(&v82);
    v16 = -1;
    goto LABEL_126;
  }
  if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
    __asan_report_load8(&this->player_);
  MpComp = Player::getMpComp(this->player_);
  if ( PlayerMpComp::isInMpMode(MpComp) && PlayerQuestComp::isSingleModeParentQuest(this, *(_DWORD *)(v5 + 80)) )
  {
    common::milog::MiLogStream::create(
      &v82,
      &common::milog::MiLogDefault::default_log_obj_,
      1u,
      "./src/player/quest/player_quest_comp.cpp",
      "internalRollbackParentQuest",
      1480);
    v13 = common::milog::MiLogStream::operator<<<char [52],(char *[52])0>(
            &v82,
            (const char (*)[52])"refuse rollback due to in mp mode, parent_quest_id:");
    v14 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v13, (const unsigned int *)(v5 + 80));
    v15 = common::milog::MiLogStream::operator<<<char [6],(char *[6])0>(v14, (const char (*)[6])" uid:");
    if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
      __asan_report_load8(&this->player_);
    val = Player::getUid(this->player_);
    common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v15, &val);
    common::milog::MiLogStream::~MiLogStream(&v82);
    v16 = 0;
  }
  else
  {
    if ( !*(_DWORD *)(v5 + 96) )
      goto LABEL_131;
    roll_back_quest_config_ptr = PlayerQuestComp::findPlayerQuestExcelConfig(this, *(_DWORD *)(v5 + 96));
    if ( !roll_back_quest_config_ptr )
    {
      common::milog::MiLogStream::create(
        &v82,
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/player/quest/player_quest_comp.cpp",
        "internalRollbackParentQuest",
        1490);
      v17 = common::milog::MiLogStream::operator<<<char [55],(char *[55])0>(
              &v82,
              (const char (*)[55])"findPlayerQuestExcelConfig failed, roll_back_quest_id:");
      v18 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v17, (const unsigned int *)(v5 + 96));
      v10 = common::milog::MiLogStream::operator<<<char [6],(char *[6])0>(v18, (const char (*)[6])" uid:");
      if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
        __asan_report_load8(&this->player_);
      goto LABEL_28;
    }
    if ( *(_BYTE *)(((unsigned __int64)&roll_back_quest_config_ptr->is_rewind >> 3) + 0x7FFF8000) != 0
      && (((unsigned __int8)roll_back_quest_config_ptr - 66) & 7) >= *(_BYTE *)(((unsigned __int64)&roll_back_quest_config_ptr->is_rewind >> 3)
                                                                              + 0x7FFF8000) )
    {
      __asan_report_load1(&roll_back_quest_config_ptr->is_rewind);
    }
    if ( !roll_back_quest_config_ptr->is_rewind )
    {
      common::milog::MiLogStream::create(
        &v82,
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/player/quest/player_quest_comp.cpp",
        "internalRollbackParentQuest",
        1496);
      v19 = common::milog::MiLogStream::operator<<<char [49],(char *[49])0>(
              &v82,
              (const char (*)[49])"rollbackQuest is not rewind, roll_back_quest_id:");
      v20 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v19, (const unsigned int *)(v5 + 96));
      v10 = common::milog::MiLogStream::operator<<<char [6],(char *[6])0>(v20, (const char (*)[6])" uid:");
      if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
        __asan_report_load8(&this->player_);
      goto LABEL_28;
    }
    if ( *(_BYTE *)(((unsigned __int64)&roll_back_quest_config_ptr->main_id >> 3) + 0x7FFF8000) != 0
      && (char)((((_BYTE)roll_back_quest_config_ptr + 12) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&roll_back_quest_config_ptr->main_id >> 3)
                                                                                + 0x7FFF8000) )
    {
      __asan_report_load4(&roll_back_quest_config_ptr->main_id);
    }
    if ( roll_back_quest_config_ptr->main_id == *(_DWORD *)(v5 + 80) )
    {
LABEL_131:
      if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
        __asan_report_load8(&this->player_);
      BasicComp = Player::getBasicComp(this->player_);
      PlayerBasicComp::getNextTransNo[abi:cxx11]((std::string *)&v82, BasicComp);
      StatLogUtils::ContextHolder::ContextHolder((StatLogUtils::ContextHolder *const)(v5 + 48), 0x4B1u, v57);
      std::string::~string(&v82);
      std::vector<data::QuestExcelConfig const*>::vector((std::vector<const data::QuestExcelConfig*> *const)(v5 + 272));
      __for_range = &parent_quest_config_ptr->child_quest_list;
      *(std::vector<unsigned int>::const_iterator *)(v5 + 112) = std::vector<unsigned int>::begin(&parent_quest_config_ptr->child_quest_list);
      *(std::vector<unsigned int>::const_iterator *)(v5 + 144) = std::vector<unsigned int>::end(__for_range);
      while ( __gnu_cxx::operator!=<unsigned int const*,std::vector<unsigned int>>(
                (const __gnu_cxx::__normal_iterator<unsigned int const*,std::vector<unsigned int> > *)(v5 + 112),
                (const __gnu_cxx::__normal_iterator<unsigned int const*,std::vector<unsigned int> > *)(v5 + 144)) )
      {
        v25 = __gnu_cxx::__normal_iterator<unsigned int const*,std::vector<unsigned int>>::operator*((const __gnu_cxx::__normal_iterator<unsigned int const*,std::vector<unsigned int> > *const)(v5 + 112));
        v26 = v25;
        if ( *(_BYTE *)(((unsigned __int64)v25 >> 3) + 0x7FFF8000) != 0
          && (char)(((unsigned __int8)v25 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)v25 >> 3) + 0x7FFF8000) )
        {
          __asan_report_load4(v25);
        }
        *(_DWORD *)(v5 + 64) = *v26;
        *(_QWORD *)(v5 + 176) = PlayerQuestComp::findPlayerQuestExcelConfig(this, *(_DWORD *)(v5 + 64));
        if ( !*(_QWORD *)(v5 + 176) )
        {
          common::milog::MiLogStream::create(
            &v82,
            &common::milog::MiLogDefault::default_log_obj_,
            3u,
            "./src/player/quest/player_quest_comp.cpp",
            "internalRollbackParentQuest",
            1513);
          v27 = common::milog::MiLogStream::operator<<<char [45],(char *[45])0>(
                  &v82,
                  (const char (*)[45])"findPlayerQuestExcelConfig failed, quest_id:");
          v28 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                  v27,
                  (const unsigned int *)(v5 + 64));
          v29 = common::milog::MiLogStream::operator<<<char [6],(char *[6])0>(v28, (const char (*)[6])" uid:");
          if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
            __asan_report_load8(&this->player_);
          val = Player::getUid(this->player_);
          common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v29, &val);
          common::milog::MiLogStream::~MiLogStream(&v82);
          v16 = -1;
          goto LABEL_125;
        }
        v30 = std::move<data::QuestExcelConfig const*&>((const data::QuestExcelConfig **)(v5 + 176));
        std::vector<data::QuestExcelConfig const*>::emplace_back<data::QuestExcelConfig const*>(
          (std::vector<const data::QuestExcelConfig*> *const)(v5 + 272),
          v30,
          v30);
        __gnu_cxx::__normal_iterator<unsigned int const*,std::vector<unsigned int>>::operator++((__gnu_cxx::__normal_iterator<unsigned int const*,std::vector<unsigned int> > *const)(v5 + 112));
      }
      __last = std::vector<data::QuestExcelConfig const*>::end((std::vector<const data::QuestExcelConfig*> *const)(v5 + 272))._M_current;
      v31._M_current = std::vector<data::QuestExcelConfig const*>::begin((std::vector<const data::QuestExcelConfig*> *const)(v5 + 272))._M_current;
      std::sort___gnu_cxx::__normal_iterator_const_data::QuestExcelConfig___std::vector_const_data::QuestExcelConfig_____PlayerQuestComp::internalRollbackParentQuest_uint32_t_uint32_t_bool_bool_::_lambda_const_auto_27__const_auto_28_____(
        v31,
        (__gnu_cxx::__normal_iterator<const data::QuestExcelConfig**,std::vector<const data::QuestExcelConfig*> >)__last,
        v32);
      if ( !*(_DWORD *)(v5 + 96) )
      {
        *(_QWORD *)(v5 + 112) = this;
        __lasta = std::vector<data::QuestExcelConfig const*>::end((std::vector<const data::QuestExcelConfig*> *const)(v5 + 272))._M_current;
        v33._M_current = std::vector<data::QuestExcelConfig const*>::begin((std::vector<const data::QuestExcelConfig*> *const)(v5 + 272))._M_current;
        *(__gnu_cxx::__normal_iterator<const data::QuestExcelConfig**,std::vector<const data::QuestExcelConfig*> > *)(v5 + 144) = std::find_if<__gnu_cxx::__normal_iterator<data::QuestExcelConfig const**,std::vector<data::QuestExcelConfig const*>>,PlayerQuestComp::internalRollbackParentQuest(unsigned int,unsigned int,bool,bool)::{lambda(data::QuestExcelConfig const*)#2}>(v33, (__gnu_cxx::__normal_iterator<const data::QuestExcelConfig**,std::vector<const data::QuestExcelConfig*> >)__lasta, *(PlayerQuestComp::internalRollbackParentQuest::<lambda(const data::QuestExcelConfig*)> *)(v5 + 112));
        *(std::vector<const data::QuestExcelConfig*>::iterator *)(v5 + 176) = std::vector<data::QuestExcelConfig const*>::end((std::vector<const data::QuestExcelConfig*> *const)(v5 + 272));
        if ( __gnu_cxx::operator!=<data::QuestExcelConfig const**,std::vector<data::QuestExcelConfig const*>>(
               (const __gnu_cxx::__normal_iterator<const data::QuestExcelConfig**,std::vector<const data::QuestExcelConfig*> > *)(v5 + 144),
               (const __gnu_cxx::__normal_iterator<const data::QuestExcelConfig**,std::vector<const data::QuestExcelConfig*> > *)(v5 + 176)) )
        {
          v34 = (unsigned __int64)__gnu_cxx::__normal_iterator<data::QuestExcelConfig const**,std::vector<data::QuestExcelConfig const*>>::operator*((const __gnu_cxx::__normal_iterator<const data::QuestExcelConfig**,std::vector<const data::QuestExcelConfig*> > *const)(v5 + 144));
          if ( *(_BYTE *)((v34 >> 3) + 0x7FFF8000) )
            v34 = __asan_report_load8(v34);
          v35 = *(_QWORD *)v34;
          if ( *(_BYTE *)(((unsigned __int64)(v35 + 8) >> 3) + 0x7FFF8000) != 0
            && *(_BYTE *)(((unsigned __int64)(v35 + 8) >> 3) + 0x7FFF8000) <= 3 )
          {
            v35 = __asan_report_load4(v35 + 8);
          }
          *(_DWORD *)(v5 + 96) = *(_DWORD *)(v35 + 8);
        }
      }
      if ( *(_DWORD *)(v5 + 96) )
      {
        if ( !std::map<unsigned int,unsigned int>::empty(&parent_quest_config_ptr->flow_min_rewind_order_map) )
        {
          safe_rollback_quest_id = 0;
          is_meet_roll_back_quest = 0;
          __for_range_0 = (std::vector<const data::QuestExcelConfig*> *)(v5 + 272);
          *(std::vector<const data::QuestExcelConfig*>::iterator *)(v5 + 144) = std::vector<data::QuestExcelConfig const*>::begin((std::vector<const data::QuestExcelConfig*> *const)(v5 + 272));
          *(std::vector<const data::QuestExcelConfig*>::iterator *)(v5 + 176) = std::vector<data::QuestExcelConfig const*>::end(__for_range_0);
          while ( __gnu_cxx::operator!=<data::QuestExcelConfig const**,std::vector<data::QuestExcelConfig const*>>(
                    (const __gnu_cxx::__normal_iterator<const data::QuestExcelConfig**,std::vector<const data::QuestExcelConfig*> > *)(v5 + 144),
                    (const __gnu_cxx::__normal_iterator<const data::QuestExcelConfig**,std::vector<const data::QuestExcelConfig*> > *)(v5 + 176)) )
          {
            v36 = __gnu_cxx::__normal_iterator<data::QuestExcelConfig const**,std::vector<data::QuestExcelConfig const*>>::operator*((const __gnu_cxx::__normal_iterator<const data::QuestExcelConfig**,std::vector<const data::QuestExcelConfig*> > *const)(v5 + 144));
            if ( *(_BYTE *)(((unsigned __int64)v36 >> 3) + 0x7FFF8000) )
              v36 = (const data::QuestExcelConfig **)__asan_report_load8(v36);
            child_quest_config_ptr = *v36;
            if ( child_quest_config_ptr )
            {
              if ( *(_BYTE *)(((unsigned __int64)&child_quest_config_ptr->sub_id >> 3) + 0x7FFF8000) != 0
                && *(_BYTE *)(((unsigned __int64)&child_quest_config_ptr->sub_id >> 3) + 0x7FFF8000) <= 3 )
              {
                __asan_report_load4(&child_quest_config_ptr->sub_id);
              }
              if ( child_quest_config_ptr->sub_id == *(_DWORD *)(v5 + 96) )
              {
                is_meet_roll_back_quest = 1;
              }
              else
              {
                if ( !is_meet_roll_back_quest )
                  goto LABEL_71;
                if ( *(_BYTE *)(((unsigned __int64)&child_quest_config_ptr->sub_id >> 3) + 0x7FFF8000) != 0
                  && *(_BYTE *)(((unsigned __int64)&child_quest_config_ptr->sub_id >> 3) + 0x7FFF8000) <= 3 )
                {
                  __asan_report_load4(&child_quest_config_ptr->sub_id);
                }
                if ( !PlayerQuestComp::isQuestExist(this, child_quest_config_ptr->sub_id) )
                  goto LABEL_71;
                if ( *(_BYTE *)(((unsigned __int64)&child_quest_config_ptr->is_rewind >> 3) + 0x7FFF8000) != 0
                  && (((unsigned __int8)child_quest_config_ptr - 66) & 7) >= *(_BYTE *)(((unsigned __int64)&child_quest_config_ptr->is_rewind >> 3)
                                                                                      + 0x7FFF8000) )
                {
                  __asan_report_load1(&child_quest_config_ptr->is_rewind);
                }
                if ( child_quest_config_ptr->is_rewind )
                  v38 = 1;
                else
LABEL_71:
                  v38 = 0;
                if ( v38 )
                {
                  if ( *(_BYTE *)(((unsigned __int64)&child_quest_config_ptr->sub_id >> 3) + 0x7FFF8000) != 0
                    && *(_BYTE *)(((unsigned __int64)&child_quest_config_ptr->sub_id >> 3) + 0x7FFF8000) <= 3 )
                  {
                    __asan_report_load4(&child_quest_config_ptr->sub_id);
                  }
                  quest_state = PlayerQuestComp::getQuestState(this, child_quest_config_ptr->sub_id);
                  if ( (unsigned int)quest_state >= QUEST_STATE_UNFINISHED )
                  {
                    if ( *(_BYTE *)(((unsigned __int64)&child_quest_config_ptr->sub_id >> 3) + 0x7FFF8000) != 0
                      && *(_BYTE *)(((unsigned __int64)&child_quest_config_ptr->sub_id >> 3) + 0x7FFF8000) <= 3 )
                    {
                      __asan_report_load4(&child_quest_config_ptr->sub_id);
                    }
                    safe_rollback_quest_id = child_quest_config_ptr->sub_id;
                    break;
                  }
                }
              }
            }
            else
            {
              common::milog::MiLogStream::create(
                &v82,
                &common::milog::MiLogDefault::default_log_obj_,
                3u,
                "./src/player/quest/player_quest_comp.cpp",
                "internalRollbackParentQuest",
                1547);
              v37 = common::milog::MiLogStream::operator<<<char [52],(char *[52])0>(
                      &v82,
                      (const char (*)[52])"child_quest_config_ptr is nullptr. parent_quest_id:");
              common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                v37,
                (const unsigned int *)(v5 + 80));
              common::milog::MiLogStream::~MiLogStream(&v82);
            }
            __gnu_cxx::__normal_iterator<data::QuestExcelConfig const**,std::vector<data::QuestExcelConfig const*>>::operator++((__gnu_cxx::__normal_iterator<const data::QuestExcelConfig**,std::vector<const data::QuestExcelConfig*> > *const)(v5 + 144));
          }
          std::map<unsigned int,unsigned int>::map((std::map<unsigned int,unsigned int> *const)(v5 + 336));
          __for_range_1 = &parent_quest_config_ptr->flow_min_rewind_order_map;
          *(std::map<unsigned int,unsigned int>::const_iterator *)(v5 + 144) = std::map<unsigned int,unsigned int>::begin(&parent_quest_config_ptr->flow_min_rewind_order_map);
          *(std::map<unsigned int,unsigned int>::const_iterator *)(v5 + 176) = std::map<unsigned int,unsigned int>::end(__for_range_1);
          while ( std::operator!=(
                    (const std::_Rb_tree_const_iterator<std::pair<unsigned int const,unsigned int> >::_Self *)(v5 + 144),
                    (const std::_Rb_tree_const_iterator<std::pair<unsigned int const,unsigned int> >::_Self *)(v5 + 176)) )
          {
            v74 = std::_Rb_tree_const_iterator<std::pair<unsigned int const,unsigned int>>::operator*((const std::_Rb_tree_const_iterator<std::pair<unsigned int const,unsigned int> > *const)(v5 + 144));
            group_id = std::get<0ul,unsigned int const,unsigned int>(v74);
            _ = (std::tuple_element<1,const std::pair<unsigned int const,unsigned int> >::type *)std::get<1ul,unsigned int const,unsigned int>(v74);
            if ( *(_BYTE *)(((unsigned __int64)group_id >> 3) + 0x7FFF8000) != 0
              && (char)(((unsigned __int8)group_id & 7) + 3) >= *(_BYTE *)(((unsigned __int64)group_id >> 3) + 0x7FFF8000) )
            {
              __asan_report_load4(group_id);
            }
            suite_index = PlayerQuestComp::getWorldQuestFlowGroupSuiteIndexByRollbackQuest(
                            this,
                            *group_id,
                            safe_rollback_quest_id);
            if ( suite_index )
            {
              v42 = group_id;
              v39 = std::map<unsigned int,unsigned int>::operator[](
                      (std::map<unsigned int,unsigned int> *const)(v5 + 336),
                      group_id);
              v40 = v39;
              v41 = *(_BYTE *)(((unsigned __int64)v39 >> 3) + 0x7FFF8000);
              LOBYTE(v42) = v41 != 0;
              v43 = (v41 != 0) & (unsigned __int8)((char)(((unsigned __int8)v39 & 7) + 3) >= v41);
              if ( (_BYTE)v43 )
                __asan_report_store4(v39, v42, v39, v43);
              *v40 = suite_index;
            }
            std::_Rb_tree_const_iterator<std::pair<unsigned int const,unsigned int>>::operator++((std::_Rb_tree_const_iterator<std::pair<unsigned int const,unsigned int> > *const)(v5 + 144));
          }
          PlayerQuestComp::refreshWorldQuestFlowGroupSuite(
            this,
            *(_DWORD *)(v5 + 80),
            (const std::map<unsigned int,unsigned int> *)(v5 + 336),
            1);
          std::map<unsigned int,unsigned int>::~map((std::map<unsigned int,unsigned int> *const)(v5 + 336));
        }
        __for_range_2 = (std::vector<const data::QuestExcelConfig*> *)(v5 + 272);
        *(std::vector<const data::QuestExcelConfig*>::iterator *)(v5 + 144) = std::vector<data::QuestExcelConfig const*>::begin((std::vector<const data::QuestExcelConfig*> *const)(v5 + 272));
        *(std::vector<const data::QuestExcelConfig*>::iterator *)(v5 + 176) = std::vector<data::QuestExcelConfig const*>::end(__for_range_2);
        while ( __gnu_cxx::operator!=<data::QuestExcelConfig const**,std::vector<data::QuestExcelConfig const*>>(
                  (const __gnu_cxx::__normal_iterator<const data::QuestExcelConfig**,std::vector<const data::QuestExcelConfig*> > *)(v5 + 144),
                  (const __gnu_cxx::__normal_iterator<const data::QuestExcelConfig**,std::vector<const data::QuestExcelConfig*> > *)(v5 + 176)) )
        {
          v44 = __gnu_cxx::__normal_iterator<data::QuestExcelConfig const**,std::vector<data::QuestExcelConfig const*>>::operator*((const __gnu_cxx::__normal_iterator<const data::QuestExcelConfig**,std::vector<const data::QuestExcelConfig*> > *const)(v5 + 144));
          child_quest_config_ptr_0 = v44;
          if ( *(_BYTE *)(((unsigned __int64)v44 >> 3) + 0x7FFF8000) )
            __asan_report_load8(v44);
          v45 = *child_quest_config_ptr_0;
          v46 = *(_BYTE *)(((unsigned __int64)&(*child_quest_config_ptr_0)->sub_id >> 3) + 0x7FFF8000);
          if ( v46 != 0 && v46 <= 3 )
            v45 = (const data::QuestExcelConfig *)__asan_report_load4(&(*child_quest_config_ptr_0)->sub_id);
          quest_id = v45->sub_id;
          if ( PlayerQuestComp::isQuestExist(this, quest_id) )
          {
            if ( quest_id == *(_DWORD *)(v5 + 96) )
              break;
            PlayerQuestComp::removeQuest(this, quest_id, 2u, v57._anon_0._M_local_buf[8]);
          }
          __gnu_cxx::__normal_iterator<data::QuestExcelConfig const**,std::vector<data::QuestExcelConfig const*>>::operator++((__gnu_cxx::__normal_iterator<const data::QuestExcelConfig**,std::vector<const data::QuestExcelConfig*> > *const)(v5 + 144));
        }
        PlayerQuestComp::findQuest((const PlayerQuestComp *const)(v5 + 208), (__int64)this, *(_DWORD *)(v5 + 96));
        if ( std::operator!=<Quest>((const std::shared_ptr<Quest> *)(v5 + 208), 0LL) )
        {
          v47 = std::__shared_ptr_access<Quest,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Quest,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v5 + 208));
          if ( Quest::getState(v47) != QUEST_STATE_UNSTARTED )
          {
            quest_config = PlayerQuestComp::findPlayerQuestExcelConfig(this, *(_DWORD *)(v5 + 96));
            if ( quest_config && std::vector<data::QuestExec>::empty(&quest_config->begin_exec) )
            {
              common::milog::MiLogStream::create(
                &v82,
                &common::milog::MiLogDefault::default_log_obj_,
                4u,
                "./src/player/quest/player_quest_comp.cpp",
                "internalRollbackParentQuest",
                1605);
              v50 = common::milog::MiLogStream::operator<<<char [56],(char *[56])0>(
                      &v82,
                      (const char (*)[56])"[QUEST] unexpected branch, error!!! roll_back_quest_id:");
              common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                v50,
                (const unsigned int *)(v5 + 96));
              common::milog::MiLogStream::~MiLogStream(&v82);
              v51 = std::__shared_ptr_access<Quest,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Quest,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v5 + 208));
              Quest::resetProgress(v51, v57._anon_0._M_local_buf[8]);
              if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
                __asan_report_load8(&this->player_);
              CoopComp = Player::getCoopComp(this->player_);
              PlayerCoopComp::onRollbackResetProgress(
                CoopComp,
                *(_DWORD *)(v5 + 96),
                (const std::vector<const data::QuestExcelConfig*> *)(v5 + 272));
            }
            else
            {
              if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
                __asan_report_load8(&this->player_);
              v53 = Player::getCoopComp(this->player_);
              PlayerCoopComp::onRollbackRemoveQuest(
                v53,
                *(_DWORD *)(v5 + 96),
                (const std::vector<const data::QuestExcelConfig*> *)(v5 + 272));
              PlayerQuestComp::removeQuest(this, *(_DWORD *)(v5 + 96), 2u, v57._anon_0._M_local_buf[8]);
              PlayerQuestComp::acceptQuest(this, *(_DWORD *)(v5 + 96), 0, v57._anon_0._M_local_buf[8]);
              val = *(_DWORD *)(v5 + 96);
              std::allocator<unsigned int>::allocator(&__a);
              std::vector<unsigned int>::vector(
                &quest_id_vec,
                (std::initializer_list<unsigned int>)__PAIR128__(1LL, &val),
                &__a);
              PlayerQuestComp::updateServerCondMeetStatus(this, &quest_id_vec, v57._anon_0._M_local_buf[8]);
              std::vector<unsigned int>::~vector(&quest_id_vec);
              std::allocator<unsigned int>::~allocator(&__a);
            }
            quest_var_vec = PlayerQuestComp::findQuestVarScriptConfig(this, *(_DWORD *)(v5 + 80), *(_DWORD *)(v5 + 96));
            PlayerQuestComp::rollbackQuestVar(this, *(_DWORD *)(v5 + 96), quest_var_vec, v57._anon_0._M_local_buf[8]);
          }
        }
        PlayerQuestComp::findQuest((const PlayerQuestComp *const)(v5 + 240), (__int64)this, *(_DWORD *)(v5 + 96));
        if ( std::operator!=<Quest>((const std::shared_ptr<Quest> *)(v5 + 240), 0LL) )
        {
          v54 = std::__shared_ptr_access<Quest,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Quest,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v5 + 240));
          if ( Quest::getState(v54) != QUEST_STATE_UNSTARTED )
            PlayerQuestComp::movePosAfterRollbackQuest(this, *(_DWORD *)(v5 + 96), v57._anon_0._M_local_buf[12]);
        }
        std::shared_ptr<Quest>::~shared_ptr((std::shared_ptr<Quest> *const)(v5 + 240));
        std::shared_ptr<Quest>::~shared_ptr((std::shared_ptr<Quest> *const)(v5 + 208));
      }
      v16 = 0;
LABEL_125:
      std::vector<data::QuestExcelConfig const*>::~vector((std::vector<const data::QuestExcelConfig*> *const)(v5 + 272));
      StatLogUtils::ContextHolder::~ContextHolder((StatLogUtils::ContextHolder *const)(v5 + 48));
    }
    else
    {
      common::milog::MiLogStream::create(
        &v82,
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/player/quest/player_quest_comp.cpp",
        "internalRollbackParentQuest",
        1502);
      v21 = common::milog::MiLogStream::operator<<<char [56],(char *[56])0>(
              &v82,
              (const char (*)[56])"internalRollBackParentQuest failed, roll_back_quest_id:");
      v22 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v21, (const unsigned int *)(v5 + 96));
      v23 = common::milog::MiLogStream::operator<<<char [18],(char *[18])0>(
              v22,
              (const char (*)[18])" parent_quest_id:");
      common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v23, (const unsigned int *)(v5 + 80));
      common::milog::MiLogStream::~MiLogStream(&v82);
      v16 = -1;
    }
  }
LABEL_126:
  result = v16;
  if ( v57._M_string_length == v5 )
  {
    *(_QWORD *)((v5 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8008) = 0LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8010) = 0LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8018) = 0LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8020) = 0LL;
    *(_DWORD *)((v5 >> 3) + 0x7FFF8028) = 0;
    *(_DWORD *)((v5 >> 3) + 0x7FFF8030) = 0;
  }
  else
  {
    *(_QWORD *)v5 = 1172321806LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8020) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8028) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v5 >> 3) + 0x7FFF8030) = -168430091;
  }
  return result;
};

// Line 1521: range 0000000013E9FAD8-0000000013E9FBAC
bool __cdecl PlayerQuestComp::internalRollbackParentQuest::_lambda_const_auto_27___const_auto_28___::operator()_const_data::QuestExcelConfig__const_data::QuestExcelConfig__(
        const PlayerQuestComp::internalRollbackParentQuest::<lambda(const auto:27&, const auto:28&)> *const __closure,
        const data::QuestExcelConfig *const *a,
        const data::QuestExcelConfig *const *b)
{
  const data::QuestExcelConfig *v3; // rax
  char v4; // dl
  int32_t order; // esi
  const data::QuestExcelConfig *v6; // rax
  char v7; // dl

  if ( *(_BYTE *)(((unsigned __int64)a >> 3) + 0x7FFF8000) )
    __asan_report_load8(a);
  v3 = *a;
  v4 = *(_BYTE *)(((unsigned __int64)&(*a)->order >> 3) + 0x7FFF8000);
  if ( v4 != 0 && v4 <= 3 )
    v3 = (const data::QuestExcelConfig *)__asan_report_load4(&(*a)->order);
  order = v3->order;
  if ( *(_BYTE *)(((unsigned __int64)b >> 3) + 0x7FFF8000) )
    __asan_report_load8(b);
  v6 = *b;
  v7 = *(_BYTE *)(((unsigned __int64)&(*b)->order >> 3) + 0x7FFF8000);
  if ( v7 != 0 && v7 <= 3 )
    v6 = (const data::QuestExcelConfig *)__asan_report_load4(&(*b)->order);
  return order > v6->order;
};

// Line 1527: range 0000000013DD8994-0000000013DD8A6B
bool __cdecl PlayerQuestComp::internalRollbackParentQuest(unsigned int,unsigned int,bool,bool)::{lambda(data::QuestExcelConfig const*)#2}::operator()(
        const PlayerQuestComp::internalRollbackParentQuest::<lambda(const data::QuestExcelConfig*)> *const __closure,
        const data::QuestExcelConfig *config_ptr)
{
  PlayerQuestComp *this; // rdx

  if ( *(_BYTE *)(((unsigned __int64)__closure >> 3) + 0x7FFF8000) )
    __asan_report_load8(__closure);
  this = __closure->__this;
  if ( *(_BYTE *)(((unsigned __int64)&config_ptr->sub_id >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&config_ptr->sub_id >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4(&config_ptr->sub_id);
  }
  if ( !PlayerQuestComp::isQuestExist(this, config_ptr->sub_id) )
    return 0;
  if ( *(_BYTE *)(((unsigned __int64)&config_ptr->is_rewind >> 3) + 0x7FFF8000) != 0
    && (((unsigned __int8)config_ptr - 66) & 7) >= *(_BYTE *)(((unsigned __int64)&config_ptr->is_rewind >> 3)
                                                            + 0x7FFF8000) )
  {
    __asan_report_load1(&config_ptr->is_rewind);
  }
  return config_ptr->is_rewind;
};

// Line 1635: range 0000000013DDA176-0000000013DDADA3
void __fastcall PlayerQuestComp::movePosAfterRollbackQuest(
        PlayerQuestComp *const this,
        uint32_t roll_back_quest_id,
        bool is_move_instant)
{
  unsigned __int64 v3; // r12
  __int64 v4; // rax
  _DWORD *v5; // r13
  std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v6; // rax
  data::SceneType SceneTypeBySceneId; // eax
  bool isPlayerScene; // r14
  uint32_t SceneComp; // eax
  PlayerDungeonComp *DungeonComp; // rax
  char v11; // al
  common::milog::MiLogStream *v12; // rax
  common::milog::MiLogStream *v13; // rax
  common::milog::MiLogStream *v14; // rax
  __int64 v15; // rcx
  PlayerSceneComp *v16; // r14
  Scene *v17; // rax
  common::milog::MiLogStream *v18; // rax
  common::milog::MiLogStream *v19; // rax
  common::milog::MiLogStream *v20; // rax
  common::milog::MiLogStream *v21; // rax
  common::milog::MiLogStream *v22; // rax
  common::milog::MiLogStream *v23; // rax
  common::milog::MiLogStream *v24; // rax
  common::milog::MiLogStream *v25; // rax
  common::milog::MiLogStream *v26; // r14
  common::milog::MiLogStream *v27; // rax
  common::milog::MiLogStream *v28; // rax
  char v29; // al
  common::milog::MiLogStream *v30; // rax
  common::milog::MiLogStream *v31; // rax
  common::milog::MiLogStream *v32; // rax
  common::milog::MiLogStream *v33; // rax
  common::milog::MiLogStream *v34; // rax
  common::milog::MiLogStream *v35; // rax
  common::milog::MiLogStream *v36; // rax
  common::milog::MiLogStream *v37; // rax
  common::milog::MiLogStream *v38; // rax
  common::milog::MiLogStream *v39; // rax
  common::milog::MiLogStream *v40; // rax
  unsigned int val; // [rsp+14h] [rbp-13Ch] BYREF
  const QuestAvatarScriptConfig *quest_avatar_script_config_ptr; // [rsp+18h] [rbp-138h]
  const Vector3 *pos; // [rsp+20h] [rbp-130h]
  const Vector3 *rot; // [rsp+28h] [rbp-128h]
  std::shared_ptr<Scene> v46; // [rsp+30h] [rbp-120h] BYREF
  common::milog::MiLogStream v47; // [rsp+40h] [rbp-110h] BYREF
  TransferReason p_reason; // [rsp+60h] [rbp-F0h] BYREF
  char v49[176]; // [rsp+A0h] [rbp-B0h] BYREF

  v3 = (unsigned __int64)v49;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_1(128LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "4 48 4 13 scene_id:1642 64 4 23 offline_dungeon_id:1645 80 4 23 roll_back_quest_id:1634 96 16 14 scene_ptr:1646";
  *(_QWORD *)(v3 + 16) = PlayerQuestComp::movePosAfterRollbackQuest;
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = -234556943;
  v5[536862722] = -234556924;
  v5[536862723] = -202178560;
  *(_DWORD *)(v3 + 80) = roll_back_quest_id;
  quest_avatar_script_config_ptr = PlayerQuestComp::findQuestAvatarScriptConfig(this, *(_DWORD *)(v3 + 80));
  if ( quest_avatar_script_config_ptr )
  {
    if ( *(_BYTE *)(((unsigned __int64)quest_avatar_script_config_ptr >> 3) + 0x7FFF8000) != 0
      && *(_BYTE *)(((unsigned __int64)quest_avatar_script_config_ptr >> 3) + 0x7FFF8000) <= 3 )
    {
      __asan_report_load4(quest_avatar_script_config_ptr);
    }
    *(_DWORD *)(v3 + 48) = quest_avatar_script_config_ptr->scene_id;
    pos = &quest_avatar_script_config_ptr->pos;
    rot = &quest_avatar_script_config_ptr->rot;
    if ( *(_BYTE *)(((unsigned __int64)&quest_avatar_script_config_ptr->offline_dungeon_id >> 3) + 0x7FFF8000) != 0
      && *(_BYTE *)(((unsigned __int64)&quest_avatar_script_config_ptr->offline_dungeon_id >> 3) + 0x7FFF8000) <= 3 )
    {
      __asan_report_load4(&quest_avatar_script_config_ptr->offline_dungeon_id);
    }
    *(_DWORD *)(v3 + 64) = quest_avatar_script_config_ptr->offline_dungeon_id;
    std::shared_ptr<Scene>::shared_ptr((std::shared_ptr<Scene> *const)(v3 + 96), 0LL);
    ServiceBox::findService<GameserverService>();
    GameserverService::getConfig((GameserverService *const)&v46);
    v6 = std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false> *const)&v46);
    SceneTypeBySceneId = SceneExcelConfigMgr::getSceneTypeBySceneId(
                           &v6->design_config.txt_config_mgr.scene_config_mgr,
                           *(_DWORD *)(v3 + 48));
    isPlayerScene = SceneExcelConfigMgr::isPlayerScene(SceneTypeBySceneId);
    std::shared_ptr<Config>::~shared_ptr((std::shared_ptr<Config> *const)&v46);
    if ( isPlayerScene )
    {
      if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
        __asan_report_load8(&this->player_);
      SceneComp = (unsigned int)Player::getSceneComp(this->player_);
      PlayerSceneComp::findScene((const PlayerSceneComp *const)&v46, SceneComp);
      std::shared_ptr<Scene>::operator=((std::shared_ptr<Scene> *const)(v3 + 96), &v46);
      std::shared_ptr<Scene>::~shared_ptr(&v46);
    }
    else
    {
      if ( !*(_DWORD *)(v3 + 64) )
        goto LABEL_18;
      if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
        __asan_report_load8(&this->player_);
      DungeonComp = Player::getDungeonComp(this->player_);
      if ( PlayerDungeonComp::getCurDungeonId(DungeonComp) == *(_DWORD *)(v3 + 64) )
        v11 = 1;
      else
LABEL_18:
        v11 = 0;
      if ( !v11 )
      {
        common::milog::MiLogStream::create(
          &v47,
          &common::milog::MiLogDefault::default_log_obj_,
          4u,
          "./src/player/quest/player_quest_comp.cpp",
          "movePosAfterRollbackQuest",
          1658);
        v12 = common::milog::MiLogStream::operator<<<char [51],(char *[51])0>(
                &v47,
                (const char (*)[51])"[QuestRewind] unsupported rewind config, scene_id:");
        v13 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                v12,
                (const unsigned int *)(v3 + 48));
        v14 = common::milog::MiLogStream::operator<<<char [22],(char *[22])0>(
                v13,
                (const char (*)[22])", offline_dungeon_id:");
        common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v14, (const unsigned int *)(v3 + 64));
        common::milog::MiLogStream::~MiLogStream(&v47);
LABEL_51:
        std::shared_ptr<Scene>::~shared_ptr((std::shared_ptr<Scene> *const)(v3 + 96));
        goto LABEL_52;
      }
      if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
        __asan_report_load8(&this->player_);
      Player::getSceneComp(this->player_);
      PlayerSceneComp::getCurScene((const PlayerSceneComp *const)&v46);
      std::shared_ptr<Scene>::operator=((std::shared_ptr<Scene> *const)(v3 + 96), &v46);
      std::shared_ptr<Scene>::~shared_ptr(&v46);
    }
    if ( std::operator!=<Scene>((const std::shared_ptr<Scene> *)(v3 + 96), 0LL) )
    {
      if ( is_move_instant )
      {
        if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
          __asan_report_load8(&this->player_);
        v16 = Player::getSceneComp(this->player_);
        TransferReason::TransferReason(&p_reason, ENTER_REASON_QUEST_ROLLBACK);
        v17 = std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::operator*((const std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 96));
        PlayerSceneComp::jumpToScene(v16, v17, pos, rot, 0, &p_reason);
        TransferReason::~TransferReason(&p_reason);
        common::milog::MiLogStream::create(
          &v47,
          &common::milog::MiLogDefault::default_log_obj_,
          1u,
          "./src/player/quest/player_quest_comp.cpp",
          "movePosAfterRollbackQuest",
          1668);
        v18 = common::milog::MiLogStream::operator<<<char [24],(char *[24])0>(
                &v47,
                (const char (*)[24])"[QuestRewind] quest_id:");
        v19 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                v18,
                (const unsigned int *)(v3 + 80));
        v20 = common::milog::MiLogStream::operator<<<char [26],(char *[26])0>(
                v19,
                (const char (*)[26])" move player to scene_id:");
        v21 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                v20,
                (const unsigned int *)(v3 + 48));
        v22 = common::milog::MiLogStream::operator<<<char [6],(char *[6])0>(v21, (const char (*)[6])" pos:");
        v23 = operator<<(v22, pos);
        v24 = common::milog::MiLogStream::operator<<<char [6],(char *[6])0>(v23, (const char (*)[6])" rot:");
        v25 = operator<<(v24, rot);
        v26 = common::milog::MiLogStream::operator<<<char [6],(char *[6])0>(v25, (const char (*)[6])" uid:");
        if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
          __asan_report_load8(&this->player_);
      }
      else
      {
        if ( *(char *)(((unsigned __int64)&this->is_move_pos_on_login_ >> 3) + 0x7FFF8000) < 0 )
          __asan_report_load1(&this->is_move_pos_on_login_);
        if ( this->is_move_pos_on_login_ )
        {
          common::milog::MiLogStream::create(
            &v47,
            &common::milog::MiLogDefault::default_log_obj_,
            3u,
            "./src/player/quest/player_quest_comp.cpp",
            "movePosAfterRollbackQuest",
            1674);
          v27 = common::milog::MiLogStream::operator<<<char [65],(char *[65])0>(
                  &v47,
                  (const char (*)[65])"[QuestRewind] is_login_move_pos_ has already been set, quest_id:");
          v28 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                  v27,
                  (const unsigned int *)(v3 + 80));
          v26 = common::milog::MiLogStream::operator<<<char [6],(char *[6])0>(v28, (const char (*)[6])" uid:");
          if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
            __asan_report_load8(&this->player_);
        }
        else
        {
          v29 = *(_BYTE *)(((unsigned __int64)&this->is_move_pos_on_login_ >> 3) + 0x7FFF8000);
          if ( v29 < 0 )
          {
            LOBYTE(v15) = v29 != 0;
            __asan_report_store1(&this->is_move_pos_on_login_, 0LL, &this->is_move_pos_on_login_, v15);
          }
          this->is_move_pos_on_login_ = 1;
          std::weak_ptr<Scene>::operator=<Scene>(&this->move_scene_wtr_, (const std::shared_ptr<Scene> *)(v3 + 96));
          if ( *(char *)(((unsigned __int64)&this->move_pos_ >> 3) + 0x7FFF8000) < 0
            || *(_BYTE *)((((unsigned __int64)&this->move_pos_.z + 3) >> 3) + 0x7FFF8000) != 0
            && (((unsigned __int8)this - 125) & 7) >= *(_BYTE *)((((unsigned __int64)&this->move_pos_.z + 3) >> 3)
                                                               + 0x7FFF8000) )
          {
            __asan_report_store_n(&this->move_pos_, 12LL);
          }
          if ( ((unsigned __int8)pos & 7) >= *(_BYTE *)(((unsigned __int64)pos >> 3) + 0x7FFF8000)
            && *(_BYTE *)(((unsigned __int64)pos >> 3) + 0x7FFF8000) != 0
            || *(_BYTE *)((((unsigned __int64)&pos->z + 3) >> 3) + 0x7FFF8000) != 0
            && (((unsigned __int8)pos + 11) & 7) >= *(_BYTE *)((((unsigned __int64)&pos->z + 3) >> 3) + 0x7FFF8000) )
          {
            __asan_report_load_n(pos, 12LL);
          }
          this->move_pos_ = *pos;
          if ( (((unsigned __int8)this - 124) & 7) >= *(_BYTE *)(((unsigned __int64)&this->move_rot_ >> 3) + 0x7FFF8000)
            && *(_BYTE *)(((unsigned __int64)&this->move_rot_ >> 3) + 0x7FFF8000) != 0
            || *(_BYTE *)((((unsigned __int64)&this->move_rot_.z + 3) >> 3) + 0x7FFF8000) != 0
            && (((unsigned __int8)this - 113) & 7) >= *(_BYTE *)((((unsigned __int64)&this->move_rot_.z + 3) >> 3)
                                                               + 0x7FFF8000) )
          {
            __asan_report_store_n(&this->move_rot_, 12LL);
          }
          if ( ((unsigned __int8)rot & 7) >= *(_BYTE *)(((unsigned __int64)rot >> 3) + 0x7FFF8000)
            && *(_BYTE *)(((unsigned __int64)rot >> 3) + 0x7FFF8000) != 0
            || *(_BYTE *)((((unsigned __int64)&rot->z + 3) >> 3) + 0x7FFF8000) != 0
            && (((unsigned __int8)rot + 11) & 7) >= *(_BYTE *)((((unsigned __int64)&rot->z + 3) >> 3) + 0x7FFF8000) )
          {
            __asan_report_load_n(rot, 12LL);
          }
          this->move_rot_ = *rot;
          common::milog::MiLogStream::create(
            &v47,
            &common::milog::MiLogDefault::default_log_obj_,
            1u,
            "./src/player/quest/player_quest_comp.cpp",
            "movePosAfterRollbackQuest",
            1681);
          v30 = common::milog::MiLogStream::operator<<<char [41],(char *[41])0>(
                  &v47,
                  (const char (*)[41])"[QuestRewind] set move onLogin quest_id:");
          v31 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                  v30,
                  (const unsigned int *)(v3 + 80));
          v32 = common::milog::MiLogStream::operator<<<char [26],(char *[26])0>(
                  v31,
                  (const char (*)[26])" move player to scene_id:");
          v33 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                  v32,
                  (const unsigned int *)(v3 + 48));
          v34 = common::milog::MiLogStream::operator<<<char [6],(char *[6])0>(v33, (const char (*)[6])" pos:");
          v35 = operator<<(v34, pos);
          v36 = common::milog::MiLogStream::operator<<<char [6],(char *[6])0>(v35, (const char (*)[6])" rot:");
          v37 = operator<<(v36, rot);
          v26 = common::milog::MiLogStream::operator<<<char [6],(char *[6])0>(v37, (const char (*)[6])" uid:");
          if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
            __asan_report_load8(&this->player_);
        }
      }
      val = Player::getUid(this->player_);
      common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v26, &val);
      common::milog::MiLogStream::~MiLogStream(&v47);
    }
    else
    {
      common::milog::MiLogStream::create(
        &v47,
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/player/quest/player_quest_comp.cpp",
        "movePosAfterRollbackQuest",
        1686);
      v38 = common::milog::MiLogStream::operator<<<char [49],(char *[49])0>(
              &v47,
              (const char (*)[49])"[QuestRewind] find move scene nullptr, scene_id:");
      v39 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v38, (const unsigned int *)(v3 + 48));
      v40 = common::milog::MiLogStream::operator<<<char [22],(char *[22])0>(
              v39,
              (const char (*)[22])", offline_dungeon_id:");
      common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v40, (const unsigned int *)(v3 + 64));
      common::milog::MiLogStream::~MiLogStream(&v47);
    }
    goto LABEL_51;
  }
LABEL_52:
  if ( v49 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
};

// Line 1693: range 0000000013DDADA4-0000000013DDADDD
int32_t __cdecl PlayerQuestComp::removeQuest(
        PlayerQuestComp *const this,
        uint32_t quest_id,
        uint32_t log_remove_type,
        bool is_notify)
{
  QuestOperator::delQuest(&this->quest_op_, quest_id, log_remove_type, is_notify);
  return 0;
};

// Line 1699: range 0000000013DDADDE-0000000013DDB2C0
__int64 __fastcall PlayerQuestComp::internalRemoveQuest(
        PlayerQuestComp *const this,
        __int32 quest_id,
        __int32 log_remove_type,
        __int8 is_notify)
{
  unsigned __int64 v4; // r12
  __int64 v5; // rax
  _DWORD *v6; // r13
  unsigned int v7; // r14d
  common::milog::MiLogStream *v8; // rax
  PlayerBasicComp *BasicComp; // rax
  Quest *v10; // rax
  Quest *v11; // rax
  std::__shared_ptr_access<proto::QuestDelNotify,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v12; // rax
  Player *player; // r14
  PlayerMpComp *MpComp; // rax
  std::__shared_ptr_access<Quest,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v15; // rax
  uint32_t StartTime; // eax
  __int64 result; // rax
  std::string v18; // [rsp+0h] [rbp-110h]
  bool is_notifya; // [rsp+Ch] [rbp-104h]
  uint32_t log_remove_typea; // [rsp+10h] [rbp-100h]
  PlayerQuestComp *thisa; // [rsp+18h] [rbp-F8h]
  const data::QuestExcelConfig *quest_config_ptr; // [rsp+28h] [rbp-E8h]
  std::shared_ptr<proto::QuestDelNotify> __r; // [rsp+30h] [rbp-E0h] BYREF
  common::milog::MiLogStream v24; // [rsp+40h] [rbp-D0h] BYREF
  char v25[176]; // [rsp+60h] [rbp-B0h] BYREF

  *(&v18._anon_0._M_allocated_capacity + 1) = (std::string::size_type)this;
  HIDWORD(v18._anon_0._M_allocated_capacity) = quest_id;
  *(_DWORD *)v18._anon_0._M_local_buf = log_remove_type;
  BYTE4(v18._M_string_length) = is_notify;
  v4 = (unsigned __int64)v25;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v5 = __asan_stack_malloc_1(128LL);
    if ( v5 )
      v4 = v5;
  }
  *(_QWORD *)v4 = 1102416563LL;
  *(_QWORD *)(v4 + 8) = "4 32 1 11 holder:1714 48 4 13 quest_id:1698 64 16 14 quest_ptr:1701 96 16 15 notify_ptr:1746";
  *(_QWORD *)(v4 + 16) = PlayerQuestComp::internalRemoveQuest;
  v6 = (_DWORD *)(v4 >> 3);
  v6[536862720] = -235802127;
  v6[536862721] = -234556927;
  v6[536862722] = -219021312;
  v6[536862723] = -202178560;
  *(_DWORD *)(v4 + 48) = quest_id;
  PlayerQuestComp::findQuest((const PlayerQuestComp *const)(v4 + 64), (__int64)this, *(_DWORD *)(v4 + 48));
  if ( std::operator==<Quest>((const std::shared_ptr<Quest> *)(v4 + 64), 0LL) )
  {
    v7 = 0;
  }
  else
  {
    quest_config_ptr = PlayerQuestComp::findPlayerQuestExcelConfig(this, *(_DWORD *)(v4 + 48));
    if ( quest_config_ptr )
    {
      if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
        __asan_report_load8(&this->player_);
      BasicComp = Player::getBasicComp(this->player_);
      PlayerBasicComp::getNextTransNo[abi:cxx11]((std::string *)&v24, BasicComp);
      StatLogUtils::ContextHolder::ContextHolder((StatLogUtils::ContextHolder *const)(v4 + 32), 0x4B2u, v18);
      std::string::~string(&v24);
      std::map<unsigned int,std::shared_ptr<Quest>>::erase(
        &thisa->quest_map_,
        (const std::map<unsigned int,std::shared_ptr<Quest>>::key_type *)(v4 + 48));
      PlayerQuestComp::unregisterEventQuestMap(thisa, quest_config_ptr);
      v10 = std::__shared_ptr_access<Quest,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Quest,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 64));
      Quest::clearQuestSceneRange(v10);
      v11 = std::__shared_ptr_access<Quest,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Quest,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 64));
      Quest::clearAbilityGroup(v11);
      if ( log_remove_typea == 2 || log_remove_typea == 8 )
        PlayerQuestComp::unregisterOccupiedResource(thisa, quest_config_ptr, 1);
      else
        PlayerQuestComp::triggerPostQuest(thisa, *(_DWORD *)(v4 + 48), is_notifya);
      PlayerQuestComp::tryRemoveMpBlockQuest(thisa, *(_DWORD *)(v4 + 48));
      if ( is_notifya )
      {
        common::tools::perf::make_shared<proto::QuestDelNotify>();
        v12 = std::__shared_ptr_access<proto::QuestDelNotify,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<proto::QuestDelNotify,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 96));
        proto::QuestDelNotify::set_quest_id(v12, *(_DWORD *)(v4 + 48));
        if ( *(_BYTE *)(((unsigned __int64)&thisa->player_ >> 3) + 0x7FFF8000) )
          __asan_report_load8(&thisa->player_);
        player = thisa->player_;
        std::dynamic_pointer_cast<google::protobuf::Message const,proto::QuestDelNotify>(&__r);
        Player::sendMessage(player, (common::minet::ConstMessagePtr *)&__r, 0LL);
        std::shared_ptr<google::protobuf::Message const>::~shared_ptr((std::shared_ptr<const google::protobuf::Message> *const)&__r);
        std::shared_ptr<proto::QuestDelNotify>::~shared_ptr((std::shared_ptr<proto::QuestDelNotify> *const)(v4 + 96));
      }
      if ( *(_BYTE *)(((unsigned __int64)&thisa->player_ >> 3) + 0x7FFF8000) )
        __asan_report_load8(&thisa->player_);
      MpComp = Player::getMpComp(thisa->player_);
      PlayerMpComp::refreshMpModeAvailability(MpComp);
      v15 = std::__shared_ptr_access<Quest,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Quest,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 64));
      StartTime = Quest::getStartTime(v15);
      PlayerQuestComp::logPlayerMissionRemove(thisa, log_remove_typea, 2u, *(_DWORD *)(v4 + 48), StartTime);
      v7 = 0;
      StatLogUtils::ContextHolder::~ContextHolder((StatLogUtils::ContextHolder *const)(v4 + 32));
    }
    else
    {
      common::milog::MiLogStream::create(
        &v24,
        &common::milog::MiLogDefault::default_log_obj_,
        4u,
        "./src/player/quest/player_quest_comp.cpp",
        "internalRemoveQuest",
        1710);
      v8 = common::milog::MiLogStream::operator<<<char [32],(char *[32])0>(
             &v24,
             (const char (*)[32])"findQuestConfig fail. quest_id:");
      common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v8, (const unsigned int *)(v4 + 48));
      common::milog::MiLogStream::~MiLogStream(&v24);
      v7 = -1;
    }
  }
  std::shared_ptr<Quest>::~shared_ptr((std::shared_ptr<Quest> *const)(v4 + 64));
  result = v7;
  if ( v25 == (char *)v4 )
  {
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v4 = 1172321806LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 1760: range 0000000013DDB2C2-0000000013DDB72C
__int64 __fastcall PlayerQuestComp::tryResetParentQuest(
        PlayerQuestComp *const this,
        uint32_t parent_quest_id,
        bool is_notify)
{
  unsigned __int64 v3; // r12
  __int64 v4; // rax
  _DWORD *v5; // r13
  common::milog::MiLogStream *v6; // rax
  unsigned int v7; // r14d
  unsigned int *v8; // rax
  uint32_t *v9; // rdx
  ParentQuest *v10; // rax
  unsigned int *v11; // rax
  uint32_t *v12; // rdx
  __int64 result; // rax
  std::vector<unsigned int>::const_iterator __for_begin; // [rsp+18h] [rbp-F8h] BYREF
  std::vector<unsigned int>::const_iterator __for_end; // [rsp+20h] [rbp-F0h] BYREF
  const data::MainQuestExcelConfig *parent_quest_config_ptr; // [rsp+28h] [rbp-E8h]
  const std::vector<unsigned int> *__for_range; // [rsp+30h] [rbp-E0h]
  const std::vector<unsigned int> *__for_range_0; // [rsp+38h] [rbp-D8h]
  common::milog::MiLogStream v20; // [rsp+40h] [rbp-D0h] BYREF
  char v21[176]; // [rsp+60h] [rbp-B0h] BYREF

  v3 = (unsigned __int64)v21;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_1(128LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "3 48 4 20 parent_quest_id:1759 64 16 7 op:1768 96 16 21 parent_quest_ptr:1774";
  *(_QWORD *)(v3 + 16) = PlayerQuestComp::tryResetParentQuest;
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = -234556943;
  v5[536862722] = -219021312;
  v5[536862723] = -202178560;
  *(_DWORD *)(v3 + 48) = parent_quest_id;
  parent_quest_config_ptr = PlayerQuestComp::findPlayerParentQuestExcelConfig(this, *(_DWORD *)(v3 + 48));
  if ( parent_quest_config_ptr )
  {
    QuestOperatorGuard::QuestOperatorGuard((QuestOperatorGuard *const)(v3 + 64), &this->quest_op_);
    __for_range = &parent_quest_config_ptr->child_quest_list;
    __for_begin._M_current = std::vector<unsigned int>::begin(&parent_quest_config_ptr->child_quest_list)._M_current;
    __for_end._M_current = std::vector<unsigned int>::end(&parent_quest_config_ptr->child_quest_list)._M_current;
    while ( __gnu_cxx::operator!=<unsigned int const*,std::vector<unsigned int>>(&__for_begin, &__for_end) )
    {
      v8 = (unsigned int *)__gnu_cxx::__normal_iterator<unsigned int const*,std::vector<unsigned int>>::operator*(&__for_begin);
      v9 = v8;
      if ( *(_BYTE *)(((unsigned __int64)v8 >> 3) + 0x7FFF8000) != 0
        && (char)(((unsigned __int8)v8 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)v8 >> 3) + 0x7FFF8000) )
      {
        __asan_report_load4(v8);
      }
      PlayerQuestComp::removeQuest(this, *v9, 4u, is_notify);
      __gnu_cxx::__normal_iterator<unsigned int const*,std::vector<unsigned int>>::operator++(&__for_begin);
    }
    PlayerQuestComp::findParentQuest((const PlayerQuestComp *const)(v3 + 96), (__int64)this, *(_DWORD *)(v3 + 48));
    if ( std::operator!=<ParentQuest>((const std::shared_ptr<ParentQuest> *)(v3 + 96), 0LL) )
    {
      v10 = std::__shared_ptr_access<ParentQuest,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<ParentQuest,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 96));
      ParentQuest::clearChildQuestState(v10, is_notify);
    }
    PlayerQuestComp::removeParentQuest(this, *(_DWORD *)(v3 + 48), 1);
    __for_range_0 = &parent_quest_config_ptr->child_quest_list;
    __for_begin._M_current = std::vector<unsigned int>::begin(&parent_quest_config_ptr->child_quest_list)._M_current;
    __for_end._M_current = std::vector<unsigned int>::end(__for_range_0)._M_current;
    while ( __gnu_cxx::operator!=<unsigned int const*,std::vector<unsigned int>>(&__for_begin, &__for_end) )
    {
      v11 = (unsigned int *)__gnu_cxx::__normal_iterator<unsigned int const*,std::vector<unsigned int>>::operator*(&__for_begin);
      v12 = v11;
      if ( *(_BYTE *)(((unsigned __int64)v11 >> 3) + 0x7FFF8000) != 0
        && (char)(((unsigned __int8)v11 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)v11 >> 3) + 0x7FFF8000) )
      {
        __asan_report_load4(v11);
      }
      PlayerQuestComp::acceptQuest(this, *v12, 0, is_notify);
      __gnu_cxx::__normal_iterator<unsigned int const*,std::vector<unsigned int>>::operator++(&__for_begin);
    }
    v7 = 0;
    std::shared_ptr<ParentQuest>::~shared_ptr((std::shared_ptr<ParentQuest> *const)(v3 + 96));
    QuestOperatorGuard::~QuestOperatorGuard((QuestOperatorGuard *const)(v3 + 64));
  }
  else
  {
    common::milog::MiLogStream::create(
      &v20,
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/player/quest/player_quest_comp.cpp",
      "tryResetParentQuest",
      1764);
    v6 = common::milog::MiLogStream::operator<<<char [57],(char *[57])0>(
           &v20,
           (const char (*)[57])"findPlayerParentQuestExcelConfig fails, parent_quest_id:");
    common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v6, (const unsigned int *)(v3 + 48));
    common::milog::MiLogStream::~MiLogStream(&v20);
    v7 = -1;
  }
  result = v7;
  if ( v21 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 1789: range 0000000013DDB72E-0000000013DDB796
void __cdecl PlayerQuestComp::onKillMonster(PlayerQuestComp *const this, const KillMonsterEvent *event)
{
  if ( *(_BYTE *)(((unsigned __int64)&event->monster_id >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&event->monster_id >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4(&event->monster_id);
  }
  PlayerQuestComp::updateQuestContentProgress(this, QUEST_CONTENT_KILL_MONSTER, event->monster_id, UPDATE_ADD, 1u);
};

// Line 1795: range 0000000013DDB798-0000000013DDB9A2
void __cdecl PlayerQuestComp::onCompleteTalk(PlayerQuestComp *const this, const CompleteTalkEvent *event)
{
  QuestExcelConfigMgr *p_quest_config_mgr; // rcx
  common::milog::MiLogStream *v3; // rax
  const data::TalkExcelConfig *talk_config_ptr; // [rsp+18h] [rbp-48h]
  std::shared_ptr<Config> v5; // [rsp+20h] [rbp-40h] BYREF
  common::milog::MiLogStream v6; // [rsp+30h] [rbp-30h] BYREF

  ServiceBox::findService<GameserverService>();
  GameserverService::getConfig((GameserverService *const)&v5);
  p_quest_config_mgr = &std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false> *const)&v5)->design_config.txt_config_mgr.quest_config_mgr;
  if ( *(_BYTE *)(((unsigned __int64)&event->talk_id >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&event->talk_id >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4(&event->talk_id);
  }
  talk_config_ptr = data::QuestExcelConfigMgrBase::findTalkExcelConfig(p_quest_config_mgr, event->talk_id);
  std::shared_ptr<Config>::~shared_ptr(&v5);
  if ( talk_config_ptr )
  {
    PlayerQuestComp::tryAcceptQuestByCond(this, QUEST_COND_COMPLETE_TALK, 1, 0);
    if ( *(_BYTE *)(((unsigned __int64)&event->talk_id >> 3) + 0x7FFF8000) != 0
      && *(_BYTE *)(((unsigned __int64)&event->talk_id >> 3) + 0x7FFF8000) <= 3 )
    {
      __asan_report_load4(&event->talk_id);
    }
    PlayerQuestComp::updateQuestContentProgress(this, QUEST_CONTENT_COMPLETE_TALK, event->talk_id, UPDATE_ADD, 1u);
    if ( *(_BYTE *)(((unsigned __int64)&event->talk_id >> 3) + 0x7FFF8000) != 0
      && *(_BYTE *)(((unsigned __int64)&event->talk_id >> 3) + 0x7FFF8000) <= 3 )
    {
      __asan_report_load4(&event->talk_id);
    }
    PlayerQuestComp::updateQuestContentProgress(this, QUEST_CONTENT_COMPLETE_ANY_TALK, event->talk_id, UPDATE_ADD, 1u);
  }
  else
  {
    common::milog::MiLogStream::create(
      &v6,
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/player/quest/player_quest_comp.cpp",
      "onCompleteTalk",
      1799);
    v3 = common::milog::MiLogStream::operator<<<char [36],(char *[36])0>(
           &v6,
           (const char (*)[36])"findTalkExcelConfig fails, talk_id:");
    common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v3, &event->talk_id);
    common::milog::MiLogStream::~MiLogStream(&v6);
  }
};

// Line 1808: range 0000000013DDB9A4-0000000013DDBA0C
void __cdecl PlayerQuestComp::onMonsterDie(PlayerQuestComp *const this, const MonsterDieEvent *event)
{
  if ( *(_BYTE *)(((unsigned __int64)&event->monster_id >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&event->monster_id >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4(&event->monster_id);
  }
  PlayerQuestComp::updateQuestContentProgress(this, QUEST_CONTENT_MONSTER_DIE, event->monster_id, UPDATE_ADD, 1u);
};

// Line 1814: range 0000000013DDBA0E-0000000013DDBDDB
void __cdecl PlayerQuestComp::onObtainItem(PlayerQuestComp *const this, const ObtainItemEvent *event)
{
  PlayerItemComp *ItemComp; // rcx
  uint32_t item_num; // ecx
  MaterialExcelConfigMgr *p_material_config_mgr; // rcx
  uint32_t v5; // ecx
  uint32_t cur_item_num; // [rsp+14h] [rbp-2Ch]
  const data::MaterialExcelConfig *material_config_ptr; // [rsp+18h] [rbp-28h]
  std::shared_ptr<Config> v8[2]; // [rsp+20h] [rbp-20h] BYREF

  if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
    __asan_report_load8(&this->player_);
  ItemComp = Player::getItemComp(this->player_);
  if ( *(_BYTE *)(((unsigned __int64)&event->item_id >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&event->item_id >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4(&event->item_id);
  }
  cur_item_num = PlayerItemComp::getPackMaterialCount(ItemComp, event->item_id);
  if ( *(_BYTE *)(((unsigned __int64)&event->item_id >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&event->item_id >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4(&event->item_id);
  }
  PlayerQuestComp::updateQuestContentProgress(this, QUEST_CONTENT_OBTAIN_ITEM, event->item_id, UPDATE_SET, cur_item_num);
  if ( *(_BYTE *)(((unsigned __int64)&event->item_num >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)event + 28) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&event->item_num >> 3) + 0x7FFF8000) )
  {
    __asan_report_load4(&event->item_num);
  }
  item_num = event->item_num;
  if ( *(_BYTE *)(((unsigned __int64)&event->item_id >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&event->item_id >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4(&event->item_id);
  }
  PlayerQuestComp::updateQuestContentProgress(
    this,
    QUEST_CONTENT_OBTAIN_VARIOUS_ITEM,
    event->item_id,
    UPDATE_ADD,
    item_num);
  ServiceBox::findService<GameserverService>();
  GameserverService::getConfig((GameserverService *const)v8);
  p_material_config_mgr = &std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false> *const)v8)->design_config.txt_config_mgr.material_config_mgr;
  if ( *(_BYTE *)(((unsigned __int64)&event->item_id >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&event->item_id >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4(&event->item_id);
  }
  material_config_ptr = data::MaterialExcelConfigMgrBase::findMaterialExcelConfig(p_material_config_mgr, event->item_id);
  std::shared_ptr<Config>::~shared_ptr(v8);
  if ( material_config_ptr )
  {
    if ( *(_BYTE *)(((unsigned __int64)&event->item_num >> 3) + 0x7FFF8000) != 0
      && (char)((((_BYTE)event + 28) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&event->item_num >> 3) + 0x7FFF8000) )
    {
      __asan_report_load4(&event->item_num);
    }
    v5 = event->item_num;
    if ( *(_BYTE *)(((unsigned __int64)&material_config_ptr->material_type >> 3) + 0x7FFF8000) != 0
      && (char)((((_BYTE)material_config_ptr + 76) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&material_config_ptr->material_type >> 3)
                                                                         + 0x7FFF8000) )
    {
      __asan_report_load4(&material_config_ptr->material_type);
    }
    PlayerQuestComp::updateQuestContentProgress(
      this,
      QUEST_CONTENT_OBTAIN_MATERIAL_WITH_SUBTYPE,
      material_config_ptr->material_type,
      UPDATE_ADD,
      v5);
  }
  if ( *(_BYTE *)(((unsigned __int64)&event->item_id >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&event->item_id >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4(&event->item_id);
  }
  PlayerQuestComp::updateQuestContentProgress(
    this,
    QUEST_CONTENT_ITEM_LESS_THAN,
    event->item_id,
    cur_item_num,
    UPDATE_SET,
    1u);
  if ( *(_BYTE *)(((unsigned __int64)&event->item_id >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&event->item_id >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4(&event->item_id);
  }
  PlayerQuestComp::tryAcceptQuestByCond(this, QUEST_COND_PACK_HAVE_ITEM, 1, event->item_id);
  if ( *(_BYTE *)(((unsigned __int64)&event->item_id >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&event->item_id >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4(&event->item_id);
  }
  PlayerQuestComp::tryAcceptQuestByCond(this, QUEST_COND_HISTORY_GOT_ANY_ITEM, 1, event->item_id);
};

// Line 1829: range 0000000013DDBDDC-0000000013DDC15F
void __cdecl PlayerQuestComp::onLoseItem(PlayerQuestComp *const this, const LoseItemEvent *event)
{
  PlayerItemComp *ItemComp; // rcx
  uint32_t item_num; // ecx
  MaterialExcelConfigMgr *p_material_config_mgr; // rcx
  uint32_t v5; // ecx
  uint32_t cur_item_num; // [rsp+14h] [rbp-2Ch]
  const data::MaterialExcelConfig *material_config_ptr; // [rsp+18h] [rbp-28h]
  std::shared_ptr<Config> v8[2]; // [rsp+20h] [rbp-20h] BYREF

  if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
    __asan_report_load8(&this->player_);
  ItemComp = Player::getItemComp(this->player_);
  if ( *(_BYTE *)(((unsigned __int64)&event->item_id >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&event->item_id >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4(&event->item_id);
  }
  cur_item_num = PlayerItemComp::getPackMaterialCount(ItemComp, event->item_id);
  if ( *(_BYTE *)(((unsigned __int64)&event->item_id >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&event->item_id >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4(&event->item_id);
  }
  PlayerQuestComp::updateQuestContentProgress(this, QUEST_CONTENT_OBTAIN_ITEM, event->item_id, UPDATE_SET, cur_item_num);
  if ( *(_BYTE *)(((unsigned __int64)&event->item_num >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)event + 28) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&event->item_num >> 3) + 0x7FFF8000) )
  {
    __asan_report_load4(&event->item_num);
  }
  item_num = event->item_num;
  if ( *(_BYTE *)(((unsigned __int64)&event->item_id >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&event->item_id >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4(&event->item_id);
  }
  PlayerQuestComp::updateQuestContentProgress(
    this,
    QUEST_CONTENT_OBTAIN_VARIOUS_ITEM,
    event->item_id,
    UPDATE_SUB,
    item_num);
  ServiceBox::findService<GameserverService>();
  GameserverService::getConfig((GameserverService *const)v8);
  p_material_config_mgr = &std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false> *const)v8)->design_config.txt_config_mgr.material_config_mgr;
  if ( *(_BYTE *)(((unsigned __int64)&event->item_id >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&event->item_id >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4(&event->item_id);
  }
  material_config_ptr = data::MaterialExcelConfigMgrBase::findMaterialExcelConfig(p_material_config_mgr, event->item_id);
  std::shared_ptr<Config>::~shared_ptr(v8);
  if ( material_config_ptr )
  {
    if ( *(_BYTE *)(((unsigned __int64)&event->item_num >> 3) + 0x7FFF8000) != 0
      && (char)((((_BYTE)event + 28) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&event->item_num >> 3) + 0x7FFF8000) )
    {
      __asan_report_load4(&event->item_num);
    }
    v5 = event->item_num;
    if ( *(_BYTE *)(((unsigned __int64)&material_config_ptr->material_type >> 3) + 0x7FFF8000) != 0
      && (char)((((_BYTE)material_config_ptr + 76) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&material_config_ptr->material_type >> 3)
                                                                         + 0x7FFF8000) )
    {
      __asan_report_load4(&material_config_ptr->material_type);
    }
    PlayerQuestComp::updateQuestContentProgress(
      this,
      QUEST_CONTENT_OBTAIN_MATERIAL_WITH_SUBTYPE,
      material_config_ptr->material_type,
      UPDATE_SUB,
      v5);
  }
  if ( *(_BYTE *)(((unsigned __int64)&event->item_id >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&event->item_id >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4(&event->item_id);
  }
  PlayerQuestComp::updateQuestContentProgress(
    this,
    QUEST_CONTENT_ITEM_LESS_THAN,
    event->item_id,
    cur_item_num,
    UPDATE_SET,
    1u);
  if ( *(_BYTE *)(((unsigned __int64)&event->item_id >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&event->item_id >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4(&event->item_id);
  }
  PlayerQuestComp::updateQuestContentProgress(
    this,
    QUEST_CONTENT_ITEM_LESS_THAN_BARGAIN,
    event->item_id,
    cur_item_num,
    UPDATE_SET,
    1u);
};

// Line 1843: range 0000000013DDC160-0000000013DDC2AC
void __cdecl PlayerQuestComp::onTriggerFire(PlayerQuestComp *const this, const TriggerFireEvent *event)
{
  common::milog::MiLogStream *v2; // rax
  common::milog::MiLogStream *v3; // rax
  common::milog::MiLogStream *v4; // rax
  common::milog::MiLogStream *v5; // rcx
  common::milog::MiLogStream v6; // [rsp+10h] [rbp-30h] BYREF

  if ( *(_BYTE *)(((unsigned __int64)&event->trigger_id >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&event->trigger_id >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4(&event->trigger_id);
  }
  PlayerQuestComp::updateQuestContentProgress(this, QUEST_CONTENT_TRIGGER_FIRE, event->trigger_id, UPDATE_ADD, 1u);
  common::milog::MiLogStream::create(
    &v6,
    &common::milog::MiLogDefault::default_log_obj_,
    1u,
    "./src/player/quest/player_quest_comp.cpp",
    "onTriggerFire",
    1845);
  v2 = common::milog::MiLogStream::operator<<<char [36],(char *[36])0>(&v6, (const char (*)[36])off_25162E20);
  v3 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v2, &event->trigger_id);
  v4 = common::milog::MiLogStream::operator<<<char [12],(char *[12])0>(v3, (const char (*)[12])", group_id:");
  v5 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v4, &event->group_id);
  if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
    __asan_report_load8(&this->player_);
  operator<<(v5, this->player_);
  common::milog::MiLogStream::~MiLogStream(&v6);
};

// Line 1849: range 0000000013DDC2AE-0000000013DDC621
void __cdecl PlayerQuestComp::onClearGroupMonster(PlayerQuestComp *const this, const ClearGroupMonsterEvent *event)
{
  unsigned __int64 v2; // r12
  __int64 v3; // rax
  _DWORD *v4; // r13
  common::milog::MiLogStream *v5; // rax
  Scene *v6; // rax
  uint32_t BlockGroupComp; // ecx
  std::__shared_ptr_access<Group,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v8; // rax
  uint32_t ParentQuestId; // r14d
  std::__shared_ptr_access<Group,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v10; // rax
  uint32_t PatternId; // edx
  common::milog::MiLogStream v12; // [rsp+10h] [rbp-B0h] BYREF
  char v13[144]; // [rsp+30h] [rbp-90h] BYREF

  v2 = (unsigned __int64)v13;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_1(96LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "2 32 16 14 scene_ptr:1853 64 16 14 group_ptr:1856";
  *(_QWORD *)(v2 + 16) = PlayerQuestComp::onClearGroupMonster;
  v4 = (_DWORD *)(v2 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = -219021312;
  v4[536862722] = -202178560;
  if ( *(_BYTE *)(((unsigned __int64)&event->group_id >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&event->group_id >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4(&event->group_id);
  }
  PlayerQuestComp::updateQuestContentProgress(this, QUEST_CONTENT_CLEAR_GROUP_MONSTER, event->group_id, UPDATE_ADD, 1u);
  common::milog::MiLogStream::create(
    &v12,
    &common::milog::MiLogDefault::default_log_obj_,
    1u,
    "./src/player/quest/player_quest_comp.cpp",
    "onClearGroupMonster",
    1851);
  v5 = common::milog::MiLogStream::operator<<<char [32],(char *[32])0>(
         &v12,
         (const char (*)[32])"onClearGroupMonster: group_id: ");
  common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v5, &event->group_id);
  common::milog::MiLogStream::~MiLogStream(&v12);
  if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
    __asan_report_load8(&this->player_);
  Player::getSceneComp(this->player_);
  PlayerSceneComp::getMainWorldScene((PlayerSceneComp *const)(v2 + 64));
  std::shared_ptr<Scene>::shared_ptr<PlayerWorldScene,void>(
    (std::shared_ptr<Scene> *const)(v2 + 32),
    (std::shared_ptr<PlayerWorldScene> *)(v2 + 64));
  std::shared_ptr<PlayerWorldScene>::~shared_ptr((std::shared_ptr<PlayerWorldScene> *const)(v2 + 64));
  if ( std::operator!=<Scene>((const std::shared_ptr<Scene> *)(v2 + 32), 0LL) )
  {
    v6 = std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 32));
    BlockGroupComp = (unsigned int)Scene::getBlockGroupComp(v6);
    if ( *(_BYTE *)(((unsigned __int64)&event->group_id >> 3) + 0x7FFF8000) != 0
      && *(_BYTE *)(((unsigned __int64)&event->group_id >> 3) + 0x7FFF8000) <= 3 )
    {
      __asan_report_load4(&event->group_id);
    }
    SceneBlockGroupComp::findPatternGroup((SceneBlockGroupComp *const)(v2 + 64), BlockGroupComp);
    if ( std::operator!=<Group>((const std::shared_ptr<Group> *)(v2 + 64), 0LL) )
    {
      v8 = std::__shared_ptr_access<Group,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Group,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 64));
      ParentQuestId = Group::getParentQuestId(v8);
      v10 = std::__shared_ptr_access<Group,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Group,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 64));
      PatternId = Group::getPatternId(v10);
      PlayerQuestComp::updateQuestContentProgress(
        this,
        QUEST_CONTENT_PATTERN_GROUP_CLEAR_MONSTER,
        PatternId,
        ParentQuestId,
        UPDATE_ADD,
        1u);
    }
    std::shared_ptr<Group>::~shared_ptr((std::shared_ptr<Group> *const)(v2 + 64));
  }
  std::shared_ptr<Scene>::~shared_ptr((std::shared_ptr<Scene> *const)(v2 + 32));
  if ( v13 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8008) = 0;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8008) = -168430091;
  }
};

// Line 1868: range 0000000013DDC622-0000000013DDC6C3
void __cdecl PlayerQuestComp::onManualTransport(PlayerQuestComp *const this, const ManualTransportEvent *event)
{
  common::milog::MiLogStream v2; // [rsp+10h] [rbp-30h] BYREF

  common::milog::MiLogStream::create(
    &v2,
    &common::milog::MiLogDefault::default_log_obj_,
    1u,
    "./src/player/quest/player_quest_comp.cpp",
    "onManualTransport",
    1870);
  common::milog::MiLogStream::operator<<<char [18],(char *[18])0>(&v2, (const char (*)[18])"onManualTransport");
  common::milog::MiLogStream::~MiLogStream(&v2);
  PlayerQuestComp::updateQuestContentProgress(this, QUEST_CONTENT_ANY_MANUAL_TRANSPORT, 0, UPDATE_ADD, 1u);
};

// Line 1876: range 0000000013DDC6C4-0000000013DDC819
void __cdecl PlayerQuestComp::onEnterRogueDungonEvent(
        PlayerQuestComp *const this,
        const PostEnterRogueDungeonEvent *event)
{
  common::milog::MiLogStream *v2; // rax
  common::milog::MiLogStream *v3; // rax
  common::milog::MiLogStream *v4; // rax
  uint32_t stage_id; // ecx
  common::milog::MiLogStream v6; // [rsp+10h] [rbp-30h] BYREF

  common::milog::MiLogStream::create(
    &v6,
    &common::milog::MiLogDefault::default_log_obj_,
    1u,
    "./src/player/quest/player_quest_comp.cpp",
    "onEnterRogueDungonEvent",
    1877);
  v2 = common::milog::MiLogStream::operator<<<char [28],(char *[28])0>(
         &v6,
         (const char (*)[28])"onEnterDungeon dungeon_id: ");
  v3 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v2, &event->dungeon_id);
  v4 = common::milog::MiLogStream::operator<<<char [11],(char *[11])0>(v3, (const char (*)[11])" stage_id:");
  common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v4, &event->stage_id);
  common::milog::MiLogStream::~MiLogStream(&v6);
  if ( *(_BYTE *)(((unsigned __int64)&event->stage_id >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)event + 28) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&event->stage_id >> 3) + 0x7FFF8000) )
  {
    __asan_report_load4(&event->stage_id);
  }
  stage_id = event->stage_id;
  if ( *(_BYTE *)(((unsigned __int64)&event->dungeon_id >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&event->dungeon_id >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4(&event->dungeon_id);
  }
  PlayerQuestComp::updateQuestContentProgress(
    this,
    QUEST_CONTENT_ENTER_ROGUE_DUNGEON,
    event->dungeon_id,
    stage_id,
    UPDATE_ADD,
    1u);
};

// Line 1882: range 0000000013DDC81A-0000000013DDC973
void __cdecl PlayerQuestComp::onEnterDungeon(PlayerQuestComp *const this, const EnterDungeonEvent *event)
{
  common::milog::MiLogStream *v2; // rax
  common::milog::MiLogStream *v3; // rax
  common::milog::MiLogStream *v4; // rax
  common::milog::MiLogStream v5; // [rsp+10h] [rbp-30h] BYREF

  common::milog::MiLogStream::create(
    &v5,
    &common::milog::MiLogDefault::default_log_obj_,
    1u,
    "./src/player/quest/player_quest_comp.cpp",
    "onEnterDungeon",
    1883);
  v2 = common::milog::MiLogStream::operator<<<char [28],(char *[28])0>(
         &v5,
         (const char (*)[28])"onEnterDungeon dungeon_id: ");
  v3 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v2, &event->dungeon_id);
  v4 = common::milog::MiLogStream::operator<<<char [13],(char *[13])0>(v3, (const char (*)[13])" enter_type:");
  common::milog::MiLogStream::operator<<<proto::EnterType,(proto::EnterType*)0>(v4, &event->enter_type);
  common::milog::MiLogStream::~MiLogStream(&v5);
  if ( *(_BYTE *)(((unsigned __int64)&event->enter_type >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)event + 28) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&event->enter_type >> 3) + 0x7FFF8000) )
  {
    __asan_report_load4(&event->enter_type);
  }
  if ( event->enter_type == ENTER_DUNGEON )
  {
    if ( *(_BYTE *)(((unsigned __int64)&event->dungeon_id >> 3) + 0x7FFF8000) != 0
      && *(_BYTE *)(((unsigned __int64)&event->dungeon_id >> 3) + 0x7FFF8000) <= 3 )
    {
      __asan_report_load4(&event->dungeon_id);
    }
    PlayerQuestComp::updateQuestContentProgress(this, QUEST_CONTENT_ENTER_DUNGEON, event->dungeon_id, UPDATE_ADD, 1u);
  }
};

// Line 1892: range 0000000013DDC974-0000000013DDC9DC
void __cdecl PlayerQuestComp::onEnterMyWorld(PlayerQuestComp *const this, const EnterMyWorldEvent *event)
{
  if ( *(_BYTE *)(((unsigned __int64)&event->scene_id >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&event->scene_id >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4(&event->scene_id);
  }
  PlayerQuestComp::updateQuestContentProgress(this, QUEST_CONTENT_ENTER_MY_WORLD, event->scene_id, UPDATE_ADD, 1u);
};

// Line 1897: range 0000000013DDC9DE-0000000013DDCA46
void __cdecl PlayerQuestComp::onEnterMyWorldScene(PlayerQuestComp *const this, const EnterMyWorldSceneEvent *event)
{
  if ( *(_BYTE *)(((unsigned __int64)&event->scene_id >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&event->scene_id >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4(&event->scene_id);
  }
  PlayerQuestComp::updateQuestContentProgress(this, QUEST_CONTENT_ENTER_MY_WORLD_SCENE, event->scene_id, UPDATE_ADD, 1u);
};

// Line 1902: range 0000000013DDCA48-0000000013DDCAB0
void __cdecl PlayerQuestComp::onEnterRoom(PlayerQuestComp *const this, const EnterRoomEvent *event)
{
  if ( *(_BYTE *)(((unsigned __int64)&event->scene_id >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&event->scene_id >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4(&event->scene_id);
  }
  PlayerQuestComp::updateQuestContentProgress(this, QUEST_CONTENT_ENTER_ROOM, event->scene_id, UPDATE_ADD, 1u);
};

// Line 1907: range 0000000013DDCAB2-0000000013DDCB1A
void __cdecl PlayerQuestComp::onEnterMyHomeWorld(PlayerQuestComp *const this, const EnterMyHomeWorldEvent *event)
{
  if ( *(_BYTE *)(((unsigned __int64)&event->scene_id >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&event->scene_id >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4(&event->scene_id);
  }
  PlayerQuestComp::updateQuestContentProgress(this, QUEST_CONTENT_ENTER_MY_HOME_WORLD, event->scene_id, UPDATE_ADD, 1u);
};

// Line 1912: range 0000000013DDCB1C-0000000013DDCDD4
void __cdecl PlayerQuestComp::onFinishDungeon(PlayerQuestComp *const this, const FinishDungeonEvent *event)
{
  std::unordered_map<unsigned int,unsigned int>::mapped_type *v2; // rax
  _DWORD *v3; // rdx
  char v4; // cl
  uint32_t *p_dungeon_id; // rsi
  __int64 v6; // rcx
  DungeonExcelConfigMgr *p_dungeon_config_mgr; // rcx
  const data::DungeonExcelConfig *dungeon_config; // [rsp+18h] [rbp-28h]
  std::shared_ptr<Config> v10[2]; // [rsp+20h] [rbp-20h] BYREF

  p_dungeon_id = &event->dungeon_id;
  v2 = std::unordered_map<unsigned int,unsigned int>::operator[](&this->last_dungeon_settle_map_, p_dungeon_id);
  v3 = v2;
  v4 = *(_BYTE *)(((unsigned __int64)v2 >> 3) + 0x7FFF8000);
  LOBYTE(p_dungeon_id) = v4 != 0;
  v6 = (v4 != 0) & (unsigned __int8)((char)(((unsigned __int8)v2 & 7) + 3) >= v4);
  if ( (_BYTE)v6 )
    __asan_report_store4(v2, p_dungeon_id, v2, v6);
  *v3 = 1;
  if ( *(_BYTE *)(((unsigned __int64)&event->dungeon_id >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&event->dungeon_id >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4(&event->dungeon_id);
  }
  PlayerQuestComp::updateQuestContentProgress(this, QUEST_CONTENT_FINISH_DUNGEON, event->dungeon_id, UPDATE_ADD, 1u);
  ServiceBox::findService<GameserverService>();
  GameserverService::getConfig((GameserverService *const)v10);
  p_dungeon_config_mgr = &std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false> *const)v10)->design_config.txt_config_mgr.dungeon_config_mgr;
  if ( *(_BYTE *)(((unsigned __int64)&event->dungeon_id >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&event->dungeon_id >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4(&event->dungeon_id);
  }
  dungeon_config = data::DungeonExcelConfigMgrBase::findDungeonExcelConfig(p_dungeon_config_mgr, event->dungeon_id);
  std::shared_ptr<Config>::~shared_ptr(v10);
  if ( dungeon_config )
  {
    if ( *(_BYTE *)(((unsigned __int64)&dungeon_config->type >> 3) + 0x7FFF8000) != 0
      && (char)((((_BYTE)dungeon_config + 12) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&dungeon_config->type >> 3)
                                                                    + 0x7FFF8000) )
    {
      __asan_report_load4(&dungeon_config->type);
    }
    if ( dungeon_config->type == DUNGEON_DAILY_FIGHT )
    {
      if ( *(_BYTE *)(((unsigned __int64)&event->dungeon_id >> 3) + 0x7FFF8000) != 0
        && *(_BYTE *)(((unsigned __int64)&event->dungeon_id >> 3) + 0x7FFF8000) <= 3 )
      {
        __asan_report_load4(&event->dungeon_id);
      }
      PlayerQuestComp::updateQuestContentProgress(
        this,
        QUEST_CONTENT_FINISH_DAILY_DUNGEON,
        event->dungeon_id,
        UPDATE_ADD,
        1u);
    }
    else
    {
      if ( *(_BYTE *)(((unsigned __int64)&dungeon_config->type >> 3) + 0x7FFF8000) != 0
        && (char)((((_BYTE)dungeon_config + 12) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&dungeon_config->type >> 3)
                                                                      + 0x7FFF8000) )
      {
        __asan_report_load4(&dungeon_config->type);
      }
      if ( dungeon_config->type == DUNGEON_WEEKLY_FIGHT )
      {
        if ( *(_BYTE *)(((unsigned __int64)&event->dungeon_id >> 3) + 0x7FFF8000) != 0
          && *(_BYTE *)(((unsigned __int64)&event->dungeon_id >> 3) + 0x7FFF8000) <= 3 )
        {
          __asan_report_load4(&event->dungeon_id);
        }
        PlayerQuestComp::updateQuestContentProgress(
          this,
          QUEST_CONTENT_FINISH_WEEKLY_DUNGEON,
          event->dungeon_id,
          UPDATE_ADD,
          1u);
      }
    }
  }
};

// Line 1933: range 0000000013DDCDD6-0000000013DDCE9B
void __cdecl PlayerQuestComp::onFailDungeon(PlayerQuestComp *const this, const FailDungeonEvent *event)
{
  std::unordered_map<unsigned int,unsigned int>::mapped_type *v2; // rax
  _DWORD *v3; // rdx
  char v4; // cl
  uint32_t *p_dungeon_id; // rsi
  __int64 v6; // rcx

  p_dungeon_id = &event->dungeon_id;
  v2 = std::unordered_map<unsigned int,unsigned int>::operator[](&this->last_dungeon_settle_map_, p_dungeon_id);
  v3 = v2;
  v4 = *(_BYTE *)(((unsigned __int64)v2 >> 3) + 0x7FFF8000);
  LOBYTE(p_dungeon_id) = v4 != 0;
  v6 = (v4 != 0) & (unsigned __int8)((char)(((unsigned __int8)v2 & 7) + 3) >= v4);
  if ( (_BYTE)v6 )
    __asan_report_store4(v2, p_dungeon_id, v2, v6);
  *v3 = 2;
  if ( *(_BYTE *)(((unsigned __int64)&event->dungeon_id >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&event->dungeon_id >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4(&event->dungeon_id);
  }
  PlayerQuestComp::updateQuestContentProgress(this, QUEST_CONTENT_FAIL_DUNGEON, event->dungeon_id, UPDATE_ADD, 1u);
};

// Line 1940: range 0000000013DDCE9C-0000000013DDCF04
void __cdecl PlayerQuestComp::onGadgetDie(PlayerQuestComp *const this, const GadgetDieEvent *event)
{
  if ( *(_BYTE *)(((unsigned __int64)&event->gadget_id >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&event->gadget_id >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4(&event->gadget_id);
  }
  PlayerQuestComp::updateQuestContentProgress(this, QUEST_CONTENT_DESTROY_GADGET, event->gadget_id, UPDATE_ADD, 1u);
};

// Line 1945: range 0000000013DDCF06-0000000013DDCF39
void __cdecl PlayerQuestComp::onSetNickName(PlayerQuestComp *const this, const NickNameEvent *event)
{
  PlayerQuestComp::updateQuestContentProgress(this, QUEST_CONTENT_NICK_NAME, 0, UPDATE_ADD, 1u);
};

// Line 1950: range 0000000013DDCF3A-0000000013DDD261
void __cdecl PlayerQuestComp::onSealBattleEnd(PlayerQuestComp *const this, const SealBattleEndEvent *event)
{
  unsigned __int64 v2; // rbx
  __int64 v3; // rax
  unsigned __int64 v4; // r13
  _BOOL4 param1; // [rsp+1Ch] [rbp-A4h]
  std::string v6; // [rsp+20h] [rbp-A0h] BYREF
  char v7[128]; // [rsp+40h] [rbp-80h] BYREF

  v2 = (unsigned __int64)v7;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_1(96LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "1 32 32 14 param_str:1952";
  *(_QWORD *)(v2 + 16) = PlayerQuestComp::onSealBattleEnd;
  v4 = v2 >> 3;
  *(_DWORD *)(v4 + 2147450880) = -235802127;
  *(_DWORD *)(v4 + 2147450888) = -202116109;
  if ( *(_BYTE *)(((unsigned __int64)&event->is_win >> 3) + 0x7FFF8000) != 0
    && (((unsigned __int8)event + 36) & 7) >= *(_BYTE *)(((unsigned __int64)&event->is_win >> 3) + 0x7FFF8000) )
  {
    __asan_report_load1(&event->is_win);
  }
  param1 = event->is_win;
  if ( *(_BYTE *)(((unsigned __int64)&event->scene_id >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&event->scene_id >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4(&event->scene_id);
  }
  std::to_string((std::string *)(v2 + 32), event->scene_id);
  std::string::operator+=(v2 + 32, ",");
  if ( *(_BYTE *)(((unsigned __int64)&event->group_id >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)event + 28) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&event->group_id >> 3) + 0x7FFF8000) )
  {
    __asan_report_load4(&event->group_id);
  }
  std::to_string(&v6, event->group_id);
  std::string::operator+=(v2 + 32, &v6);
  std::string::~string(&v6);
  std::string::operator+=(v2 + 32, ",");
  if ( *(_BYTE *)(((unsigned __int64)&event->config_id >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&event->config_id >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4(&event->config_id);
  }
  std::to_string(&v6, event->config_id);
  std::string::operator+=(v2 + 32, &v6);
  std::string::~string(&v6);
  PlayerQuestComp::updateQuestContentProgress(
    this,
    QUEST_CONTENT_SEAL_BATTLE_RESULT,
    param1,
    0,
    (const std::string *)(v2 + 32),
    UPDATE_ADD,
    1u);
  std::string::~string((void *)(v2 + 32));
  if ( v7 == (char *)v2 )
  {
    *(_DWORD *)((v2 >> 3) + 0x7FFF8000) = 0;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8008) = 0;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8008) = -168430091;
  }
};

// Line 1961: range 0000000013DDD262-0000000013DDD52C
void __cdecl PlayerQuestComp::onWorktopSelect(PlayerQuestComp *const this, const WorktopSelectEvent *event)
{
  unsigned __int64 v2; // rbx
  __int64 v3; // rax
  unsigned __int64 v4; // r13
  std::string v5; // [rsp+10h] [rbp-A0h] BYREF
  char v6[128]; // [rsp+30h] [rbp-80h] BYREF

  v2 = (unsigned __int64)v6;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_1(96LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "1 32 32 14 param_str:1962";
  *(_QWORD *)(v2 + 16) = PlayerQuestComp::onWorktopSelect;
  v4 = v2 >> 3;
  *(_DWORD *)(v4 + 2147450880) = -235802127;
  *(_DWORD *)(v4 + 2147450888) = -202116109;
  if ( *(_BYTE *)(((unsigned __int64)&event->scene_id >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&event->scene_id >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4(&event->scene_id);
  }
  std::to_string((std::string *)(v2 + 32), event->scene_id);
  std::string::operator+=(v2 + 32, ",");
  if ( *(_BYTE *)(((unsigned __int64)&event->group_id >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)event + 28) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&event->group_id >> 3) + 0x7FFF8000) )
  {
    __asan_report_load4(&event->group_id);
  }
  std::to_string(&v5, event->group_id);
  std::string::operator+=(v2 + 32, &v5);
  std::string::~string(&v5);
  std::string::operator+=(v2 + 32, ",");
  if ( *(_BYTE *)(((unsigned __int64)&event->config_id >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&event->config_id >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4(&event->config_id);
  }
  std::to_string(&v5, event->config_id);
  std::string::operator+=(v2 + 32, &v5);
  std::string::~string(&v5);
  PlayerQuestComp::updateQuestContentProgress(
    this,
    QUEST_CONTENT_WORKTOP_SELECT,
    0,
    0,
    (const std::string *)(v2 + 32),
    UPDATE_ADD,
    1u);
  std::string::~string((void *)(v2 + 32));
  if ( v6 == (char *)v2 )
  {
    *(_DWORD *)((v2 >> 3) + 0x7FFF8000) = 0;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8008) = 0;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8008) = -168430091;
  }
};

// Line 1971: range 0000000013DDD52E-0000000013DDD687
void __cdecl PlayerQuestComp::onLuaNotifyQuest(PlayerQuestComp *const this, const LuaNotifyQuestEvent *event)
{
  unsigned __int64 v2; // rbx
  __int64 v3; // rax
  unsigned __int64 v4; // r12
  char v5[96]; // [rsp+10h] [rbp-60h] BYREF

  v2 = (unsigned __int64)v5;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_0(64LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "1 32 4 16 quest_param:1972";
  *(_QWORD *)(v2 + 16) = PlayerQuestComp::onLuaNotifyQuest;
  v4 = v2 >> 3;
  *(_DWORD *)(v4 + 2147450880) = -235802127;
  *(_DWORD *)(v4 + 2147450884) = -202116348;
  *(_DWORD *)(v2 + 32) = 0;
  if ( !common::tools::StringUtils::strToNum<unsigned int>(&event->quest_param, (unsigned int *)(v2 + 32), 1) )
    PlayerQuestComp::setLuaNotifyQuestParam(this, *(_DWORD *)(v2 + 32));
  PlayerQuestComp::updateQuestContentProgress(this, QUEST_CONTENT_LUA_NOTIFY, 0, 0, &event->quest_param, UPDATE_ADD, 1u);
  PlayerQuestComp::tryAcceptQuestByCond(this, QUEST_COND_LUA_NOTIFY, 1, 0);
  PlayerQuestComp::setLuaNotifyQuestParam(this, 0);
  if ( v5 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
  }
};

// Line 1984: range 0000000013DDD688-0000000013DDD6BB
void __cdecl PlayerQuestComp::onTeamDead(PlayerQuestComp *const this, const TeamDeadEvent *event)
{
  PlayerQuestComp::updateQuestContentProgress(this, QUEST_CONTENT_TEAM_DEAD, 0, UPDATE_ADD, 1u);
};

// Line 1989: range 0000000013DDD6BC-0000000013DDD7B3
void __cdecl PlayerQuestComp::onCityLevelup(PlayerQuestComp *const this, const CityLevelupEvent *event)
{
  uint32_t cur_level; // esi
  uint32_t last_level; // ecx

  if ( *(_BYTE *)(((unsigned __int64)&event->cur_level >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&event->cur_level >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4(&event->cur_level);
  }
  cur_level = event->cur_level;
  if ( *(_BYTE *)(((unsigned __int64)&event->last_level >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)event + 36) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&event->last_level >> 3) + 0x7FFF8000) )
  {
    __asan_report_load4(&event->last_level);
  }
  last_level = event->last_level;
  if ( *(_BYTE *)(((unsigned __int64)&event->city_id >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)event + 28) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&event->city_id >> 3) + 0x7FFF8000) )
  {
    __asan_report_load4(&event->city_id);
  }
  PlayerQuestComp::updateQuestContentProgress(
    this,
    QUEST_CONTENT_CITY_LEVEL_UP,
    event->city_id,
    last_level,
    cur_level,
    UPDATE_ADD,
    1u);
};

// Line 1994: range 0000000013DDD7B4-0000000013DDD853
void __cdecl PlayerQuestComp::onPlayerLevelup(PlayerQuestComp *const this, const PlayerLevelupEvent *a2)
{
  PlayerBasicComp *BasicComp; // rax
  uint32_t Level; // edx

  PlayerQuestComp::tryAcceptQuestByCond(this, QUEST_COND_PLAYER_LEVEL_EQUAL_GREATER, 1, 0);
  PlayerQuestComp::tryStartAllQuest(this, 1);
  if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
    __asan_report_load8(&this->player_);
  BasicComp = Player::getBasicComp(this->player_);
  Level = PlayerBasicComp::getLevel(BasicComp);
  PlayerQuestComp::updateQuestContentProgress(this, QUEST_CONTENT_PLAYER_LEVEL_UP, 0, UPDATE_SET, Level);
};

// Line 2002: range 0000000013DDD854-0000000013DDD9BE
void __cdecl PlayerQuestComp::onSkill(PlayerQuestComp *const this, const SkillEvent *event)
{
  common::milog::MiLogStream *v2; // rax
  std::allocator<char> __a; // [rsp+1Bh] [rbp-35h] BYREF
  uint32_t param1; // [rsp+1Ch] [rbp-34h]
  common::milog::MiLogStream v5; // [rsp+20h] [rbp-30h] BYREF

  if ( *(_BYTE *)(((unsigned __int64)&event->skill_id >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&event->skill_id >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4(&event->skill_id);
  }
  param1 = event->skill_id;
  common::milog::MiLogStream::create(
    &v5,
    &common::milog::MiLogDefault::default_log_obj_,
    1u,
    "./src/player/quest/player_quest_comp.cpp",
    "onSkill",
    2005);
  v2 = common::milog::MiLogStream::operator<<<char [34],(char *[34])0>(
         &v5,
         (const char (*)[34])"[QUEST] got skill event skill_id:");
  common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v2, &event->skill_id);
  common::milog::MiLogStream::~MiLogStream(&v5);
  std::allocator<char>::allocator(&__a);
  std::string::basic_string<std::allocator<char>>((std::string *const)&v5, byte_250F2040, &__a);
  PlayerQuestComp::updateQuestContentProgress(
    this,
    QUEST_CONTENT_SKILL,
    param1,
    0,
    (const std::string *)&v5,
    UPDATE_ADD,
    1u);
  std::string::~string(&v5);
  std::allocator<char>::~allocator(&__a);
};

// Line 2011: range 0000000013DDD9C0-0000000013DDDB2A
void __cdecl PlayerQuestComp::onAbilityAvatarSkillStart(
        PlayerQuestComp *const this,
        const AbilityAvatarSkillStartEvent *event)
{
  common::milog::MiLogStream *v2; // rax
  std::allocator<char> __a; // [rsp+1Bh] [rbp-35h] BYREF
  uint32_t param1; // [rsp+1Ch] [rbp-34h]
  common::milog::MiLogStream v5; // [rsp+20h] [rbp-30h] BYREF

  if ( *(_BYTE *)(((unsigned __int64)&event->skill_id >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&event->skill_id >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4(&event->skill_id);
  }
  param1 = event->skill_id;
  common::milog::MiLogStream::create(
    &v5,
    &common::milog::MiLogDefault::default_log_obj_,
    1u,
    "./src/player/quest/player_quest_comp.cpp",
    "onAbilityAvatarSkillStart",
    2014);
  v2 = common::milog::MiLogStream::operator<<<char [47],(char *[47])0>(
         &v5,
         (const char (*)[47])"[QUEST] got skill event from ability skill_id:");
  common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v2, &event->skill_id);
  common::milog::MiLogStream::~MiLogStream(&v5);
  std::allocator<char>::allocator(&__a);
  std::string::basic_string<std::allocator<char>>((std::string *const)&v5, byte_250F2040, &__a);
  PlayerQuestComp::updateQuestContentProgress(
    this,
    QUEST_CONTENT_SKILL,
    param1,
    0,
    (const std::string *)&v5,
    UPDATE_ADD,
    1u);
  std::string::~string(&v5);
  std::allocator<char>::~allocator(&__a);
};

// Line 2020: range 0000000013DDDB2C-0000000013DDE176
void __cdecl PlayerQuestComp::onUnlockTransPoint(PlayerQuestComp *const this, const UnlockTransPointEvent *event)
{
  unsigned __int64 v2; // rbx
  __int64 v3; // rax
  unsigned __int64 v4; // r13
  uint32_t point_id; // ecx
  uint32_t v6; // esi
  char v7; // r14
  char v8; // r15
  unsigned __int64 v9; // rax
  unsigned __int64 v10; // rdx
  const char *v11; // rax
  std::__shared_ptr_access<data::SceneTransPoint,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v12; // rax
  std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v13; // rax
  std::__shared_ptr_access<data::SceneTransPoint,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v14; // rax
  uint32_t type; // edi
  char v16; // [rsp+Fh] [rbp-C1h]
  std::allocator<char> __a; // [rsp+27h] [rbp-A9h] BYREF
  uint32_t area_id; // [rsp+28h] [rbp-A8h]
  uint32_t city_id; // [rsp+2Ch] [rbp-A4h]
  std::shared_ptr<Config> v22; // [rsp+30h] [rbp-A0h] BYREF
  std::string param_str; // [rsp+40h] [rbp-90h] BYREF
  char v24[112]; // [rsp+60h] [rbp-70h] BYREF

  v2 = (unsigned __int64)v24;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_0(64LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "1 32 16 20 trans_point_ptr:2022";
  *(_QWORD *)(v2 + 16) = PlayerQuestComp::onUnlockTransPoint;
  v4 = v2 >> 3;
  *(_DWORD *)(v4 + 2147450880) = -235802127;
  *(_DWORD *)(v4 + 2147450884) = -202178560;
  std::allocator<char>::allocator(&__a);
  std::string::basic_string<std::allocator<char>>(&param_str, byte_250F2040, &__a);
  if ( *(_BYTE *)(((unsigned __int64)&event->point_id >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)event + 28) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&event->point_id >> 3) + 0x7FFF8000) )
  {
    __asan_report_load4(&event->point_id);
  }
  point_id = event->point_id;
  if ( *(_BYTE *)(((unsigned __int64)&event->scene_id >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&event->scene_id >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4(&event->scene_id);
  }
  PlayerQuestComp::updateQuestContentProgress(
    this,
    QUEST_CONTENT_UNLOCK_TRANS_POINT,
    event->scene_id,
    point_id,
    &param_str,
    UPDATE_ADD,
    1u);
  std::string::~string(&param_str);
  std::allocator<char>::~allocator(&__a);
  ServiceBox::findService<GameserverService>();
  GameserverService::getConfig((GameserverService *const)&v22);
  v6 = (unsigned int)std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false> *const)&v22)
     + 93080;
  if ( *(_BYTE *)(((unsigned __int64)&event->point_id >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)event + 28) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&event->point_id >> 3) + 0x7FFF8000) )
  {
    __asan_report_load4(&event->point_id);
  }
  if ( *(_BYTE *)(((unsigned __int64)&event->scene_id >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&event->scene_id >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4(&event->scene_id);
  }
  JsonConfigMgr::findScenePoint<data::SceneTransPoint>((const JsonConfigMgr *const)(v2 + 32), v6, event->scene_id);
  std::shared_ptr<Config>::~shared_ptr(&v22);
  v7 = 0;
  v8 = 0;
  if ( !std::operator!=<data::SceneTransPoint>(0LL, (const std::shared_ptr<data::SceneTransPoint> *)(v2 + 32)) )
    goto LABEL_19;
  std::allocator<char>::allocator(&__a);
  v7 = 1;
  std::string::basic_string<std::allocator<char>>(&param_str, "SceneTransPoint", &__a);
  v8 = 1;
  v9 = (unsigned __int64)std::__shared_ptr_access<data::SceneTransPoint,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<data::SceneTransPoint,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 32));
  if ( *(_BYTE *)((v9 >> 3) + 0x7FFF8000) )
    v9 = __asan_report_load8(v9);
  v10 = *(_QWORD *)v9 + 32LL;
  if ( *(_BYTE *)((v10 >> 3) + 0x7FFF8000) )
    v9 = __asan_report_load8(*(_QWORD *)v9 + 32LL);
  v11 = (const char *)(*(__int64 (__fastcall **)(unsigned __int64))v10)(v9);
  if ( std::operator==<char>(v11, &param_str) )
    v16 = 1;
  else
LABEL_19:
    v16 = 0;
  if ( v8 )
    std::string::~string(&param_str);
  if ( v7 )
    std::allocator<char>::~allocator(&__a);
  if ( v16 )
  {
    v12 = std::__shared_ptr_access<data::SceneTransPoint,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<data::SceneTransPoint,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 32));
    if ( *(_BYTE *)(((unsigned __int64)&v12->area_id >> 3) + 0x7FFF8000) != 0
      && *(_BYTE *)(((unsigned __int64)&v12->area_id >> 3) + 0x7FFF8000) <= 1 )
    {
      v12 = (std::__shared_ptr_access<data::SceneTransPoint,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *)__asan_report_load2(&v12->area_id);
    }
    area_id = v12->area_id;
    ServiceBox::findService<GameserverService>();
    GameserverService::getConfig((GameserverService *const)&v22);
    v13 = std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false> *const)&v22);
    city_id = WorldAreaExcelConfigMgr::findAreaCityId(&v13->design_config.txt_config_mgr.world_area_config_mgr, area_id);
    std::shared_ptr<Config>::~shared_ptr(&v22);
    std::allocator<char>::allocator(&__a);
    std::string::basic_string<std::allocator<char>>(&param_str, byte_250F2040, &__a);
    v14 = std::__shared_ptr_access<data::SceneTransPoint,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<data::SceneTransPoint,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 32));
    if ( *(_BYTE *)(((unsigned __int64)&v14->type >> 3) + 0x7FFF8000) != 0
      && *(_BYTE *)(((unsigned __int64)&v14->type >> 3) + 0x7FFF8000) <= 3 )
    {
      v14 = (std::__shared_ptr_access<data::SceneTransPoint,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *)__asan_report_load4(&v14->type);
    }
    type = v14->type;
    if ( *(_BYTE *)(((unsigned __int64)&event->scene_id >> 3) + 0x7FFF8000) != 0
      && *(_BYTE *)(((unsigned __int64)&event->scene_id >> 3) + 0x7FFF8000) <= 3 )
    {
      type = (_DWORD)event + 24;
      __asan_report_load4(&event->scene_id);
    }
    PlayerQuestComp::updateQuestContentProgress(
      this,
      QUEST_CONTENT_UNLOCK_TRANS_POINT_WITH_TYPE,
      event->scene_id,
      city_id,
      type,
      &param_str,
      UPDATE_ADD,
      1u);
    std::string::~string(&param_str);
    std::allocator<char>::~allocator(&__a);
  }
  std::shared_ptr<data::SceneTransPoint>::~shared_ptr((std::shared_ptr<data::SceneTransPoint> *const)(v2 + 32));
  if ( v24 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
  }
};

// Line 2033: range 0000000013DDE178-0000000013DDE1E0
void __cdecl PlayerQuestComp::onInteractGadget(PlayerQuestComp *const this, const InteractGadgetEvent *event)
{
  if ( *(_BYTE *)(((unsigned __int64)&event->gadget_id >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&event->gadget_id >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4(&event->gadget_id);
  }
  PlayerQuestComp::updateQuestContentProgress(this, QUEST_CONTENT_INTERACT_GADGET, event->gadget_id, UPDATE_ADD, 1u);
};

// Line 2038: range 0000000013DDE1E2-0000000013DDE24A
void __cdecl PlayerQuestComp::onFinishItemGiving(PlayerQuestComp *const this, const FinishItemGivingEvent *event)
{
  if ( *(_BYTE *)(((unsigned __int64)&event->giving_id >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&event->giving_id >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4(&event->giving_id);
  }
  PlayerQuestComp::updateQuestContentProgress(this, QUEST_CONTENT_FINISH_ITEM_GIVING, event->giving_id, UPDATE_SET, 1u);
};

// Line 2043: range 0000000013DDE24C-0000000013DDE2B4
void __cdecl PlayerQuestComp::onDungeonOpenStatue(PlayerQuestComp *const this, const DungeonOpenStatueEvent *event)
{
  if ( *(_BYTE *)(((unsigned __int64)&event->dungeon_id >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&event->dungeon_id >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4(&event->dungeon_id);
  }
  PlayerQuestComp::updateQuestContentProgress(
    this,
    QUEST_CONTENT_DUNGEON_OPEN_STATUE,
    event->dungeon_id,
    UPDATE_ADD,
    1u);
};

// Line 2048: range 0000000013DDE2B6-0000000013DDE362
void __cdecl PlayerQuestComp::onUnlockArea(PlayerQuestComp *const this, const UnlockAreaEvent *event)
{
  uint32_t area_id; // ecx

  if ( *(_BYTE *)(((unsigned __int64)&event->area_id >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)event + 28) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&event->area_id >> 3) + 0x7FFF8000) )
  {
    __asan_report_load4(&event->area_id);
  }
  area_id = event->area_id;
  if ( *(_BYTE *)(((unsigned __int64)&event->scene_id >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&event->scene_id >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4(&event->scene_id);
  }
  PlayerQuestComp::updateQuestContentProgress(this, QUEST_CONTENT_UNLOCK_AREA, event->scene_id, area_id, UPDATE_ADD, 1u);
};

// Line 2053: range 0000000013DDE364-0000000013DDE451
void __cdecl PlayerQuestComp::onChestOpen(PlayerQuestComp *const this, const ChestOpenEvent *event)
{
  uint32_t gadget_id; // esi
  uint32_t deprecated_group_city_id; // ecx

  if ( *(_BYTE *)(((unsigned __int64)&event->gadget_id >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&event->gadget_id >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4(&event->gadget_id);
  }
  gadget_id = event->gadget_id;
  if ( *(_BYTE *)(((unsigned __int64)&event->deprecated_group_city_id >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)event + 44) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&event->deprecated_group_city_id >> 3)
                                                         + 0x7FFF8000) )
  {
    __asan_report_load4(&event->deprecated_group_city_id);
  }
  deprecated_group_city_id = event->deprecated_group_city_id;
  if ( *(_BYTE *)(((unsigned __int64)&event->scene_id >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&event->scene_id >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4(&event->scene_id);
  }
  PlayerQuestComp::updateQuestContentProgress(
    this,
    QUEST_CONTENT_OPEN_CHEST_WITH_GADGET_ID,
    event->scene_id,
    deprecated_group_city_id,
    gadget_id,
    UPDATE_ADD,
    1u);
};

// Line 2058: range 0000000013DDE452-0000000013DDE4FE
void __cdecl PlayerQuestComp::onFinishTowerLevel(PlayerQuestComp *const this, const FinishTowerLevelEvent *event)
{
  uint32_t level_index; // ecx

  if ( *(_BYTE *)(((unsigned __int64)&event->level_index >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)event + 28) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&event->level_index >> 3) + 0x7FFF8000) )
  {
    __asan_report_load4(&event->level_index);
  }
  level_index = event->level_index;
  if ( *(_BYTE *)(((unsigned __int64)&event->floor_index >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&event->floor_index >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4(&event->floor_index);
  }
  PlayerQuestComp::updateQuestContentProgress(
    this,
    QUEST_CONTENT_FINISH_TOWER_LEVEL,
    event->floor_index,
    level_index,
    UPDATE_ADD,
    1u);
};

// Line 2063: range 0000000013DDE500-0000000013DDE604
void __cdecl PlayerQuestComp::onBargainFinish(PlayerQuestComp *const this, const BargainFinishEvent *event)
{
  if ( *(_BYTE *)(((unsigned __int64)&event->is_succ >> 3) + 0x7FFF8000) != 0
    && (((unsigned __int8)event + 28) & 7) >= *(_BYTE *)(((unsigned __int64)&event->is_succ >> 3) + 0x7FFF8000) )
  {
    __asan_report_load1(&event->is_succ);
  }
  if ( event->is_succ )
  {
    if ( *(_BYTE *)(((unsigned __int64)&event->bargain_id >> 3) + 0x7FFF8000) != 0
      && *(_BYTE *)(((unsigned __int64)&event->bargain_id >> 3) + 0x7FFF8000) <= 3 )
    {
      __asan_report_load4(&event->bargain_id);
    }
    PlayerQuestComp::updateQuestContentProgress(this, QUEST_CONTENT_BARGAIN_SUCC, event->bargain_id, UPDATE_SET, 1u);
  }
  else
  {
    if ( *(_BYTE *)(((unsigned __int64)&event->bargain_id >> 3) + 0x7FFF8000) != 0
      && *(_BYTE *)(((unsigned __int64)&event->bargain_id >> 3) + 0x7FFF8000) <= 3 )
    {
      __asan_report_load4(&event->bargain_id);
    }
    PlayerQuestComp::updateQuestContentProgress(this, QUEST_CONTENT_BARGAIN_FAIL, event->bargain_id, UPDATE_SET, 1u);
  }
};

// Line 2075: range 0000000013DDE606-0000000013DDE644
void __cdecl PlayerQuestComp::onUnlockPersonalLine(PlayerQuestComp *const this, const UnlockPersonalLineEvent *event)
{
  PlayerQuestComp::tryAcceptQuestByCond(this, QUEST_COND_PERSONAL_LINE_UNLOCK, 1, 0);
  PlayerQuestComp::tryStartAllQuest(this, 1);
};

// Line 2081: range 0000000013DDE646-0000000013DDE6BA
void __cdecl PlayerQuestComp::onDailyTaskVarUpdateEvent(
        PlayerQuestComp *const this,
        const DailyTaskVarUpdateEvent *event)
{
  PlayerQuestComp::tryAcceptQuestByCond(this, QUEST_COND_DAILY_TASK_VAR_EQ, 1, 0);
  PlayerQuestComp::tryAcceptQuestByCond(this, QUEST_COND_DAILY_TASK_VAR_GT, 1, 0);
  PlayerQuestComp::tryAcceptQuestByCond(this, QUEST_COND_DAILY_TASK_VAR_LT, 1, 0);
  PlayerQuestComp::tryStartAllQuest(this, 1);
};

// Line 2089: range 0000000013DDE6BC-0000000013DDE724
void __cdecl PlayerQuestComp::onActivityTriggerQuestEvent(
        PlayerQuestComp *const this,
        const ActivityTriggerQuestEvent *event)
{
  if ( *(_BYTE *)(((unsigned __int64)&event->activity_id >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&event->activity_id >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4(&event->activity_id);
  }
  PlayerQuestComp::updateQuestContentProgress(
    this,
    QUEST_CONTENT_ACTIVITY_TRIGGER_FAILED,
    event->activity_id,
    UPDATE_SET,
    1u);
};

// Line 2095: range 0000000013DDE726-0000000013DDEAFB
void __fastcall PlayerQuestComp::onQuestVarUpdate(
        PlayerQuestComp *const this,
        uint32_t parent_quest_id,
        bool is_notify)
{
  unsigned __int64 v3; // rbx
  __int64 v4; // rax
  _DWORD *v5; // r13
  common::milog::MiLogStream *v6; // r14
  common::milog::MiLogStream *v7; // rax
  common::milog::MiLogStream *v8; // rax
  unsigned int *v9; // rax
  uint32_t *v10; // rdx
  unsigned int val; // [rsp+18h] [rbp-D8h] BYREF
  uint32_t child_quest_id; // [rsp+1Ch] [rbp-D4h]
  std::vector<unsigned int>::const_iterator __for_begin; // [rsp+20h] [rbp-D0h] BYREF
  std::vector<unsigned int>::const_iterator __for_end; // [rsp+28h] [rbp-C8h] BYREF
  const data::MainQuestExcelConfig *parent_config_ptr; // [rsp+30h] [rbp-C0h]
  const std::vector<unsigned int> *__for_range; // [rsp+38h] [rbp-B8h]
  common::milog::MiLogStream v18; // [rsp+40h] [rbp-B0h] BYREF
  char v19[144]; // [rsp+60h] [rbp-90h] BYREF

  v3 = (unsigned __int64)v19;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_1(96LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "2 48 4 20 parent_quest_id:2094 64 16 10 guard:2103";
  *(_QWORD *)(v3 + 16) = PlayerQuestComp::onQuestVarUpdate;
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = -234556943;
  v5[536862722] = -202178560;
  *(_DWORD *)(v3 + 48) = parent_quest_id;
  parent_config_ptr = PlayerQuestComp::findPlayerParentQuestExcelConfig(this, *(_DWORD *)(v3 + 48));
  if ( parent_config_ptr )
  {
    QuestOperatorGuard::QuestOperatorGuard((QuestOperatorGuard *const)(v3 + 64), &this->quest_op_);
    __for_range = &parent_config_ptr->child_quest_list;
    __for_begin._M_current = std::vector<unsigned int>::begin(&parent_config_ptr->child_quest_list)._M_current;
    __for_end._M_current = std::vector<unsigned int>::end(&parent_config_ptr->child_quest_list)._M_current;
    while ( __gnu_cxx::operator!=<unsigned int const*,std::vector<unsigned int>>(&__for_begin, &__for_end) )
    {
      v9 = (unsigned int *)__gnu_cxx::__normal_iterator<unsigned int const*,std::vector<unsigned int>>::operator*(&__for_begin);
      v10 = v9;
      if ( *(_BYTE *)(((unsigned __int64)v9 >> 3) + 0x7FFF8000) != 0
        && (char)(((unsigned __int8)v9 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)v9 >> 3) + 0x7FFF8000) )
      {
        __asan_report_load4(v9);
      }
      child_quest_id = *v10;
      PlayerQuestComp::acceptQuest(this, child_quest_id, 0, is_notify);
      __gnu_cxx::__normal_iterator<unsigned int const*,std::vector<unsigned int>>::operator++(&__for_begin);
    }
    PlayerQuestComp::updateServerCondMeetStatus(this, &parent_config_ptr->child_quest_list, is_notify);
    PlayerQuestComp::updateQuestContentProgress(
      this,
      QUEST_CONTENT_QUEST_VAR_EQUAL,
      *(_DWORD *)(v3 + 48),
      UPDATE_SET,
      1u);
    PlayerQuestComp::updateQuestContentProgress(
      this,
      QUEST_CONTENT_QUEST_VAR_GREATER,
      *(_DWORD *)(v3 + 48),
      UPDATE_SET,
      1u);
    PlayerQuestComp::updateQuestContentProgress(
      this,
      QUEST_CONTENT_QUEST_VAR_LESS,
      *(_DWORD *)(v3 + 48),
      UPDATE_SET,
      1u);
    QuestOperatorGuard::~QuestOperatorGuard((QuestOperatorGuard *const)(v3 + 64));
  }
  else
  {
    common::milog::MiLogStream::create(
      &v18,
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/player/quest/player_quest_comp.cpp",
      "onQuestVarUpdate",
      2100);
    v6 = common::milog::MiLogStream::operator<<<char [46],(char *[46])0>(
           &v18,
           (const char (*)[46])"findPlayerParentQuestExcelConfig failed, uid:");
    if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
      __asan_report_load8(&this->player_);
    val = Player::getUid(this->player_);
    v7 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v6, &val);
    v8 = common::milog::MiLogStream::operator<<<char [18],(char *[18])0>(v7, (const char (*)[18])" parent_quest_id:");
    common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v8, (const unsigned int *)(v3 + 48));
    common::milog::MiLogStream::~MiLogStream(&v18);
  }
  if ( v19 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8008) = 0;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8008) = -168430091;
  }
};

// Line 2116: range 0000000013DDEAFC-0000000013DDEB1A
void __cdecl PlayerQuestComp::onQuestTimeVarCheckTimer(PlayerQuestComp *const this, uint64_t now_ms)
{
  PlayerQuestComp::updateTimeVarQuest(this);
};

// Line 2121: range 0000000013DDEB1C-0000000013DDEBA2
void __cdecl PlayerQuestComp::updateTimeVarQuest(PlayerQuestComp *const this)
{
  PlayerQuestComp::updateQuestContentProgress(this, QUEST_CONTENT_TIME_VAR_GT_EQ, 0, UPDATE_SET, 1u);
  PlayerQuestComp::updateQuestContentProgress(this, QUEST_CONTENT_TIME_VAR_PASS_DAY, 0, UPDATE_SET, 1u);
  PlayerQuestComp::tryAcceptQuestByCond(this, QUEST_COND_TIME_VAR_GT_EQ, 1, 0);
  PlayerQuestComp::tryAcceptQuestByCond(this, QUEST_COND_TIME_VAR_PASS_DAY, 1, 0);
};

// Line 2129: range 0000000013DDEBA4-0000000013DDEBC2
void __cdecl PlayerQuestComp::onLeaveSceneRangeCheckTimer(PlayerQuestComp *const this, uint64_t now_ms)
{
  PlayerQuestComp::checkLeaveSceneRange(this);
};

// Line 2134: range 0000000013DDEBC4-0000000013DDEBE4
void __cdecl PlayerQuestComp::checkLeaveSceneRange(PlayerQuestComp *const this)
{
  SceneRangeHelper::checkAllSceneRange(&this->scene_range_helper_);
};

// Line 2140: range 0000000013DDEBE6-0000000013DDEC13
void __cdecl PlayerQuestComp::onMainCoopStart(PlayerQuestComp *const this, const MainCoopStartEvent *event)
{
  PlayerQuestComp::tryAcceptQuestByCond(this, QUEST_COND_MAIN_COOP_START, 1, 0);
};

// Line 2145: range 0000000013DDEC14-0000000013DDED31
void __cdecl PlayerQuestComp::onMainCoopSavePoint(PlayerQuestComp *const this, const MainCoopSavePointEvent *event)
{
  uint32_t save_point_id; // ecx

  if ( *(_BYTE *)(((unsigned __int64)&event->save_point_id >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)event + 28) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&event->save_point_id >> 3) + 0x7FFF8000) )
  {
    __asan_report_load4(&event->save_point_id);
  }
  save_point_id = event->save_point_id;
  if ( *(_BYTE *)(((unsigned __int64)&event->main_coop_id >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&event->main_coop_id >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4(&event->main_coop_id);
  }
  PlayerQuestComp::updateQuestContentProgress(
    this,
    QUEST_CONTENT_MAIN_COOP_ENTER_SAVE_POINT,
    event->main_coop_id,
    save_point_id,
    UPDATE_SET,
    1u);
  if ( *(_BYTE *)(((unsigned __int64)&event->main_coop_id >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&event->main_coop_id >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4(&event->main_coop_id);
  }
  PlayerQuestComp::updateQuestContentProgress(
    this,
    QUEST_CONTENT_MAIN_COOP_ENTER_ANY_SAVE_POINT,
    event->main_coop_id,
    UPDATE_ADD,
    1u);
  PlayerQuestComp::tryAcceptQuestByCond(this, QUEST_COND_MAIN_COOP_ENTER_SAVE_POINT, 1, 0);
};

// Line 2152: range 0000000013DDED32-0000000013DDEDDA
void __cdecl PlayerQuestComp::onUseItem(PlayerQuestComp *const this, const UseItemEvent *event)
{
  uint32_t item_num; // ecx

  if ( *(_BYTE *)(((unsigned __int64)&event->item_num >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)event + 28) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&event->item_num >> 3) + 0x7FFF8000) )
  {
    __asan_report_load4(&event->item_num);
  }
  item_num = event->item_num;
  if ( *(_BYTE *)(((unsigned __int64)&event->item_id >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&event->item_id >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4(&event->item_id);
  }
  PlayerQuestComp::updateQuestContentProgress(this, QUEST_CONTENT_USE_ITEM, event->item_id, UPDATE_ADD, item_num);
};

// Line 2157: range 0000000013DDEDDC-0000000013DDEE09
void __cdecl PlayerQuestComp::onChangeClimateArea(PlayerQuestComp *const this, const ChangeClimateAreaEvent *event)
{
  PlayerQuestComp::tryAcceptQuestByCond(this, QUEST_COND_CUR_CLIMATE, 1, 0);
};

// Line 2162: range 0000000013DDEE0A-0000000013DDEF50
void __cdecl PlayerQuestComp::onQuestStateChangeEvent(PlayerQuestComp *const this, const QuestStateChangeEvent *event)
{
  uint32_t quest_state; // ecx
  uint32_t v3; // ecx

  if ( *(_BYTE *)(((unsigned __int64)&event->quest_state >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)event + 28) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&event->quest_state >> 3) + 0x7FFF8000) )
  {
    __asan_report_load4(&event->quest_state);
  }
  quest_state = event->quest_state;
  if ( *(_BYTE *)(((unsigned __int64)&event->quest_id >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&event->quest_id >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4(&event->quest_id);
  }
  PlayerQuestComp::updateQuestContentProgress(
    this,
    QUEST_CONTENT_QUEST_STATE_EQUAL,
    event->quest_id,
    quest_state,
    UPDATE_SET,
    1u);
  if ( *(_BYTE *)(((unsigned __int64)&event->quest_state >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)event + 28) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&event->quest_state >> 3) + 0x7FFF8000) )
  {
    __asan_report_load4(&event->quest_state);
  }
  v3 = event->quest_state;
  if ( *(_BYTE *)(((unsigned __int64)&event->quest_id >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&event->quest_id >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4(&event->quest_id);
  }
  PlayerQuestComp::updateQuestContentProgress(
    this,
    QUEST_CONTENT_QUEST_STATE_NOT_EQUAL,
    event->quest_id,
    v3,
    UPDATE_SET,
    1u);
};

// Line 2168: range 0000000013DDEF52-0000000013DDEFB5
void __cdecl PlayerQuestComp::onQuestGlobalVarUpdateEvent(
        PlayerQuestComp *const this,
        const QuestGlobalVarUpdateEvent *event)
{
  PlayerQuestComp::updateQuestContentProgress(this, QUEST_CONTENT_QUEST_GLOBAL_VAR_EQUAL, UPDATE_SET, 1u);
  PlayerQuestComp::updateQuestContentProgress(this, QUEST_CONTENT_QUEST_GLOBAL_VAR_GREATER, UPDATE_SET, 1u);
  PlayerQuestComp::updateQuestContentProgress(this, QUEST_CONTENT_QUEST_GLOBAL_VAR_LESS, UPDATE_SET, 1u);
};

// Line 2175: range 0000000013DDEFB6-0000000013DDF01E
void __cdecl PlayerQuestComp::onUnlockRecipeEvent(PlayerQuestComp *const this, const UnlockRecipeEvent *event)
{
  if ( *(_BYTE *)(((unsigned __int64)&event->recipe_id >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&event->recipe_id >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4(&event->recipe_id);
  }
  PlayerQuestComp::updateQuestContentProgress(this, QUEST_CONTENT_UNLOCKED_RECIPE, event->recipe_id, UPDATE_SET, 1u);
};

// Line 2180: range 0000000013DDF020-0000000013DDF090
void __cdecl PlayerQuestComp::onFishingSuccEvent(PlayerQuestComp *const this, const FishingSuccEvent *event)
{
  if ( *(_BYTE *)(((unsigned __int64)&event->fish_id >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)event + 28) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&event->fish_id >> 3) + 0x7FFF8000) )
  {
    __asan_report_load4(&event->fish_id);
  }
  PlayerQuestComp::updateQuestContentProgress(this, QUEST_CONTENT_FISHING_SUCC, event->fish_id, UPDATE_ADD, 1u);
};

// Line 2185: range 0000000013DDF092-0000000013DDF0FA
void __cdecl PlayerQuestComp::onUseWidgetEvent(PlayerQuestComp *const this, const UseWidgetEvent *event)
{
  if ( *(_BYTE *)(((unsigned __int64)&event->material_id >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&event->material_id >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4(&event->material_id);
  }
  PlayerQuestComp::updateQuestContentProgress(this, QUEST_CONTENT_USE_WIDGET, event->material_id, UPDATE_ADD, 1u);
};

// Line 2190: range 0000000013DDF0FC-0000000013DDF25C
void __cdecl PlayerQuestComp::onCaptureSuccEvent(PlayerQuestComp *const this, const CaptureSuccEvent *event)
{
  uint32_t monster_id; // ecx

  if ( *(_BYTE *)(((unsigned __int64)&event->monster_id >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&event->monster_id >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4(&event->monster_id);
  }
  PlayerQuestComp::updateQuestContentProgress(this, QUEST_CONTENT_CAPTURE_SUCC, event->monster_id, UPDATE_ADD, 1u);
  if ( *(_BYTE *)(((unsigned __int64)&event->material_id >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)event + 28) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&event->material_id >> 3) + 0x7FFF8000) )
  {
    __asan_report_load4(&event->material_id);
  }
  PlayerQuestComp::updateQuestContentProgress(
    this,
    QUEST_CONTENT_CAPTURE_USE_MATERIAL_LIST,
    event->material_id,
    UPDATE_ADD,
    1u);
  if ( *(_BYTE *)(((unsigned __int64)&event->monster_id >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&event->monster_id >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4(&event->monster_id);
  }
  monster_id = event->monster_id;
  if ( *(_BYTE *)(((unsigned __int64)&event->material_id >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)event + 28) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&event->material_id >> 3) + 0x7FFF8000) )
  {
    __asan_report_load4(&event->material_id);
  }
  PlayerQuestComp::updateQuestContentProgress(
    this,
    QUEST_CONTENT_CAPTURE_USE_CAPTURETAG_LIST,
    event->material_id,
    monster_id,
    UPDATE_ADD,
    1u);
};

// Line 2196: range 0000000013DDF25E-0000000013DDF2CE
void __cdecl PlayerQuestComp::onEnterVehicleEvent(PlayerQuestComp *const this, const EnterVehicleEvent *event)
{
  if ( *(_BYTE *)(((unsigned __int64)&event->vehicle_gadget_id >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)event + 28) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&event->vehicle_gadget_id >> 3)
                                                         + 0x7FFF8000) )
  {
    __asan_report_load4(&event->vehicle_gadget_id);
  }
  PlayerQuestComp::updateQuestContentProgress(
    this,
    QUEST_CONTENT_ENTER_VEHICLE,
    event->vehicle_gadget_id,
    UPDATE_ADD,
    1u);
};

// Line 2201: range 0000000013DDF2D0-0000000013DDF353
void __cdecl PlayerQuestComp::onChangeLevelTagEvent(PlayerQuestComp *const this, const ChangeLevelTagEvent *event)
{
  PlayerQuestComp::tryAcceptQuestByCond(this, QUEST_COND_SCENE_LEVEL_TAG_EQ, 1, 0);
  if ( *(_BYTE *)(((unsigned __int64)&event->target_level_tag_id >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&event->target_level_tag_id >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4(&event->target_level_tag_id);
  }
  PlayerQuestComp::updateQuestContentProgress(
    this,
    QUEST_CONTENT_SCENE_LEVEL_TAG_EQ,
    event->target_level_tag_id,
    UPDATE_SET,
    1u);
};

// Line 2207: range 0000000013DDF354-0000000013DDF412
void __cdecl PlayerQuestComp::onPostEnterSceneEvent(PlayerQuestComp *const this, const PostEnterSceneEvent *event)
{
  if ( *(_BYTE *)(((unsigned __int64)&event->dst_scene_id >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&event->dst_scene_id >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4(&event->dst_scene_id);
  }
  PlayerQuestComp::updateQuestContentProgress(this, QUEST_CONTENT_LEAVE_SCENE, event->dst_scene_id, UPDATE_SET, 1u);
  if ( *(_BYTE *)(((unsigned __int64)&event->dst_scene_id >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&event->dst_scene_id >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4(&event->dst_scene_id);
  }
  PlayerQuestComp::updateQuestContentProgress(
    this,
    QUEST_CONTENT_LEAVE_SCENE_RANGE_AND_ROOM,
    event->dst_scene_id,
    UPDATE_SET,
    1u);
};

// Line 2213: range 0000000013DDF414-0000000013DDF712
void __cdecl PlayerQuestComp::onCrossSceneRangeEvent(PlayerQuestComp *const this, const CrossSceneRangeEvent *event)
{
  common::milog::MiLogStream *v2; // rax
  common::milog::MiLogStream *v3; // rax
  common::milog::MiLogStream *v4; // rax
  common::milog::MiLogStream *v5; // rax
  common::milog::MiLogStream *v6; // rcx
  common::milog::MiLogStream *v7; // rax
  common::milog::MiLogStream *v8; // rax
  std::string *p_dummy_point; // r8
  _BOOL4 is_leave; // esi
  uint32_t radius; // ecx
  std::string *v12; // r8
  _BOOL4 v13; // esi
  uint32_t v14; // ecx
  common::milog::MiLogStream v16; // [rsp+10h] [rbp-30h] BYREF

  common::milog::MiLogStream::create(
    &v16,
    &common::milog::MiLogDefault::default_log_obj_,
    1u,
    "./src/player/quest/player_quest_comp.cpp",
    "onCrossSceneRangeEvent",
    2214);
  v2 = common::milog::MiLogStream::operator<<<char [33],(char *[33])0>(
         &v16,
         (const char (*)[33])"CrossSceneRangeEvent, scene_id: ");
  v3 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v2, &event->scene_id);
  v4 = common::milog::MiLogStream::operator<<<char [10],(char *[10])0>(v3, (const char (*)[10])" radius: ");
  v5 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v4, &event->radius);
  v6 = common::milog::MiLogStream::operator<<<char [12],(char *[12])0>(v5, (const char (*)[12])" is_leave: ");
  if ( *(char *)(((unsigned __int64)&event->is_leave >> 3) + 0x7FFF8000) < 0 )
    __asan_report_load1(&event->is_leave);
  v7 = common::milog::MiLogStream::operator<<(v6, event->is_leave);
  v8 = common::milog::MiLogStream::operator<<<char [15],(char *[15])0>(v7, (const char (*)[15])" dummy_point: ");
  common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v8, &event->dummy_point);
  common::milog::MiLogStream::~MiLogStream(&v16);
  p_dummy_point = &event->dummy_point;
  if ( *(char *)(((unsigned __int64)&event->is_leave >> 3) + 0x7FFF8000) < 0 )
    __asan_report_load1(&event->is_leave);
  is_leave = event->is_leave;
  if ( *(_BYTE *)(((unsigned __int64)&event->radius >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)event + 28) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&event->radius >> 3) + 0x7FFF8000) )
  {
    __asan_report_load4(&event->radius);
  }
  radius = event->radius;
  if ( *(_BYTE *)(((unsigned __int64)&event->scene_id >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&event->scene_id >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4(&event->scene_id);
  }
  PlayerQuestComp::updateQuestContentProgress(
    this,
    QUEST_CONTENT_LEAVE_SCENE_RANGE,
    event->scene_id,
    radius,
    is_leave,
    p_dummy_point,
    UPDATE_SET,
    1u);
  v12 = &event->dummy_point;
  if ( *(char *)(((unsigned __int64)&event->is_leave >> 3) + 0x7FFF8000) < 0 )
    __asan_report_load1(&event->is_leave);
  v13 = event->is_leave;
  if ( *(_BYTE *)(((unsigned __int64)&event->radius >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)event + 28) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&event->radius >> 3) + 0x7FFF8000) )
  {
    __asan_report_load4(&event->radius);
  }
  v14 = event->radius;
  if ( *(_BYTE *)(((unsigned __int64)&event->scene_id >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&event->scene_id >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4(&event->scene_id);
  }
  PlayerQuestComp::updateQuestContentProgress(
    this,
    QUEST_CONTENT_LEAVE_SCENE_RANGE_AND_ROOM,
    event->scene_id,
    v14,
    v13,
    v12,
    UPDATE_SET,
    1u);
};

// Line 2220: range 0000000013DDF714-0000000013DDF77C
void __cdecl PlayerQuestComp::onIrodoriFinishFlowerThemeEvent(
        PlayerQuestComp *const this,
        const IrodoriFinishFlowerThemeEvent *event)
{
  if ( *(_BYTE *)(((unsigned __int64)&event->theme_id >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&event->theme_id >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4(&event->theme_id);
  }
  PlayerQuestComp::updateQuestContentProgress(
    this,
    QUEST_CONTENT_IRODORI_FINISH_FLOWER_COMBINATION,
    event->theme_id,
    UPDATE_SET,
    1u);
};

// Line 2225: range 0000000013DDF77E-0000000013DDF7E6
void __cdecl PlayerQuestComp::onIrodoriPoetryReachMinProgressEvent(
        PlayerQuestComp *const this,
        const IrodoriPoetryReachMinProgressEvent *event)
{
  if ( *(_BYTE *)(((unsigned __int64)&event->theme_id >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&event->theme_id >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4(&event->theme_id);
  }
  PlayerQuestComp::updateQuestContentProgress(
    this,
    QUEST_CONTENT_IRODORI_POETRY_REACH_MIN_PROGRESS,
    event->theme_id,
    UPDATE_SET,
    1u);
};

// Line 2230: range 0000000013DDF7E8-0000000013DDF850
void __cdecl PlayerQuestComp::onIrodoriFinishPoetryThemeEvent(
        PlayerQuestComp *const this,
        const IrodoriFinishPoetryThemeEvent *event)
{
  if ( *(_BYTE *)(((unsigned __int64)&event->theme_id >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&event->theme_id >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4(&event->theme_id);
  }
  PlayerQuestComp::updateQuestContentProgress(
    this,
    QUEST_CONTENT_IRODORI_POETRY_FINISH_FILL_POETRY,
    event->theme_id,
    UPDATE_SET,
    1u);
};

// Line 2235: range 0000000013DDF852-0000000013DDF8FE
void __cdecl PlayerQuestComp::onActivityTriggerUpdateQuestEvent(
        PlayerQuestComp *const this,
        const ActivityTriggerUpdateQuestEvent *event)
{
  uint32_t param; // ecx

  if ( *(_BYTE *)(((unsigned __int64)&event->param >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)event + 28) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&event->param >> 3) + 0x7FFF8000) )
  {
    __asan_report_load4(&event->param);
  }
  param = event->param;
  if ( *(_BYTE *)(((unsigned __int64)&event->activity_id >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&event->activity_id >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4(&event->activity_id);
  }
  PlayerQuestComp::updateQuestContentProgress(
    this,
    QUEST_CONTENT_ACTIVITY_TRIGGER_UPDATE,
    event->activity_id,
    param,
    UPDATE_ADD,
    1u);
};

// Line 2241: range 0000000013DDF900-0000000013DDFA84
void __cdecl PlayerQuestComp::onPlayerEnterRegionEvent(
        PlayerQuestComp *const this,
        const PlayerEnterLeaveRegionEvent *event)
{
  char v2; // bl
  const QuestExcelConfigMgr *p_quest_config_mgr; // rdi
  uint32_t config_id; // edx
  char v5; // r12
  std::shared_ptr<Config> v7[2]; // [rsp+10h] [rbp-20h] BYREF

  v2 = 0;
  if ( *(char *)(((unsigned __int64)&event->is_enter >> 3) + 0x7FFF8000) < 0 )
    __asan_report_load1(&event->is_enter);
  if ( !event->is_enter )
    goto LABEL_10;
  ServiceBox::findService<GameserverService>();
  GameserverService::getConfig((GameserverService *const)v7);
  v2 = 1;
  p_quest_config_mgr = &std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false> *const)v7)->design_config.txt_config_mgr.quest_config_mgr;
  if ( *(_BYTE *)(((unsigned __int64)&event->config_id >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)event + 28) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&event->config_id >> 3) + 0x7FFF8000) )
  {
    p_quest_config_mgr = (const QuestExcelConfigMgr *)&event->config_id;
    __asan_report_load4(&event->config_id);
  }
  config_id = event->config_id;
  if ( *(_BYTE *)(((unsigned __int64)&event->group_id >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&event->group_id >> 3) + 0x7FFF8000) <= 3 )
  {
    p_quest_config_mgr = (const QuestExcelConfigMgr *)&event->group_id;
    __asan_report_load4(&event->group_id);
  }
  if ( QuestExcelConfigMgr::isQuestGroupRegionConfigID(p_quest_config_mgr, event->group_id, config_id) )
    v5 = 1;
  else
LABEL_10:
    v5 = 0;
  if ( v2 )
    std::shared_ptr<Config>::~shared_ptr(v7);
  if ( v5 )
    PlayerQuestComp::tryAcceptQuestByCond(this, QUEST_COND_PLAYER_ENTER_REGION, 1, 0);
};

// Line 2250: range 0000000013DDFA86-0000000013DE01BA
void __cdecl PlayerQuestComp::onGadgetStateChangeEvent(
        PlayerQuestComp *const this,
        const GadgetStateChangeEvent *event)
{
  unsigned __int64 v2; // r12
  __int64 v3; // rax
  _DWORD *v4; // r13
  const QuestExcelConfigMgr *p_quest_config_mgr; // rdi
  uint32_t config_id; // edx
  bool v7; // r14
  common::milog::MiLogStream *v8; // rax
  common::milog::MiLogStream *v9; // rax
  common::milog::MiLogStream *v10; // rax
  Scene *v11; // rax
  uint32_t BlockGroupComp; // ecx
  common::milog::MiLogStream *v13; // rax
  common::milog::MiLogStream *v14; // rax
  common::milog::MiLogStream *v15; // rax
  uint32_t v16; // ecx
  common::milog::MiLogStream *v17; // rax
  common::milog::MiLogStream *v18; // rax
  common::milog::MiLogStream *v19; // rax
  std::__shared_ptr_access<Gadget,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v20; // rax
  uint32_t State; // ecx
  uint32_t v22; // esi
  uint32_t v23; // ecx
  common::milog::MiLogStream v26; // [rsp+10h] [rbp-D0h] BYREF
  char v27[176]; // [rsp+30h] [rbp-B0h] BYREF

  v2 = (unsigned __int64)v27;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_1(128LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "3 32 16 14 scene_ptr:2256 64 16 14 group_ptr:2262 96 16 15 gadget_ptr:2268";
  *(_QWORD *)(v2 + 16) = PlayerQuestComp::onGadgetStateChangeEvent;
  v4 = (_DWORD *)(v2 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = -219021312;
  v4[536862722] = -219021312;
  v4[536862723] = -202178560;
  ServiceBox::findService<GameserverService>();
  GameserverService::getConfig((GameserverService *const)(v2 + 96));
  p_quest_config_mgr = &std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 96))->design_config.txt_config_mgr.quest_config_mgr;
  if ( *(_BYTE *)(((unsigned __int64)&event->config_id >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)event + 28) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&event->config_id >> 3) + 0x7FFF8000) )
  {
    p_quest_config_mgr = (const QuestExcelConfigMgr *)&event->config_id;
    __asan_report_load4(&event->config_id);
  }
  config_id = event->config_id;
  if ( *(_BYTE *)(((unsigned __int64)&event->group_id >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&event->group_id >> 3) + 0x7FFF8000) <= 3 )
  {
    p_quest_config_mgr = (const QuestExcelConfigMgr *)&event->group_id;
    __asan_report_load4(&event->group_id);
  }
  v7 = !QuestExcelConfigMgr::isQuestGroupGadgetConfigID(p_quest_config_mgr, event->group_id, config_id);
  std::shared_ptr<Config>::~shared_ptr((std::shared_ptr<Config> *const)(v2 + 96));
  if ( !v7 )
  {
    if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
      __asan_report_load8(&this->player_);
    Player::getSceneComp(this->player_);
    PlayerSceneComp::getCurScene((const PlayerSceneComp *const)(v2 + 32));
    if ( std::operator==<Scene>((const std::shared_ptr<Scene> *)(v2 + 32), 0LL) )
    {
      common::milog::MiLogStream::create(
        &v26,
        &common::milog::MiLogDefault::default_log_obj_,
        1u,
        "./src/player/quest/player_quest_comp.cpp",
        "onGadgetStateChangeEvent",
        2259);
      v8 = common::milog::MiLogStream::operator<<<char [32],(char *[32])0>(
             &v26,
             (const char (*)[32])"player not in scene, group_id: ");
      v9 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v8, &event->group_id);
      v10 = common::milog::MiLogStream::operator<<<char [21],(char *[21])0>(
              v9,
              (const char (*)[21])", region_config_id: ");
      common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v10, &event->config_id);
      common::milog::MiLogStream::~MiLogStream(&v26);
    }
    else
    {
      v11 = std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 32));
      BlockGroupComp = (unsigned int)Scene::getBlockGroupComp(v11);
      if ( *(_BYTE *)(((unsigned __int64)&event->group_id >> 3) + 0x7FFF8000) != 0
        && *(_BYTE *)(((unsigned __int64)&event->group_id >> 3) + 0x7FFF8000) <= 3 )
      {
        __asan_report_load4(&event->group_id);
      }
      SceneBlockGroupComp::getActiveGroup((SceneBlockGroupComp *const)(v2 + 64), BlockGroupComp);
      if ( std::operator==<Group>((const std::shared_ptr<Group> *)(v2 + 64), 0LL) )
      {
        common::milog::MiLogStream::create(
          &v26,
          &common::milog::MiLogDefault::default_log_obj_,
          1u,
          "./src/player/quest/player_quest_comp.cpp",
          "onGadgetStateChangeEvent",
          2265);
        v13 = common::milog::MiLogStream::operator<<<char [28],(char *[28])0>(
                &v26,
                (const char (*)[28])"group not found, group_id: ");
        v14 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v13, &event->group_id);
        v15 = common::milog::MiLogStream::operator<<<char [21],(char *[21])0>(
                v14,
                (const char (*)[21])", region_config_id: ");
        common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v15, &event->config_id);
        common::milog::MiLogStream::~MiLogStream(&v26);
      }
      else
      {
        v16 = (unsigned int)std::__shared_ptr_access<Group,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Group,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 64));
        if ( *(_BYTE *)(((unsigned __int64)&event->config_id >> 3) + 0x7FFF8000) != 0
          && (char)((((_BYTE)event + 28) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&event->config_id >> 3) + 0x7FFF8000) )
        {
          __asan_report_load4(&event->config_id);
        }
        Group::findEntityByConfigId<Gadget>((Group *const)(v2 + 96), v16);
        if ( std::operator==<Gadget>((const std::shared_ptr<Gadget> *)(v2 + 96), 0LL) )
        {
          common::milog::MiLogStream::create(
            &v26,
            &common::milog::MiLogDefault::default_log_obj_,
            1u,
            "./src/player/quest/player_quest_comp.cpp",
            "onGadgetStateChangeEvent",
            2280);
          v17 = common::milog::MiLogStream::operator<<<char [29],(char *[29])0>(
                  &v26,
                  (const char (*)[29])"region not found, group_id: ");
          v18 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v17, &event->group_id);
          v19 = common::milog::MiLogStream::operator<<<char [21],(char *[21])0>(
                  v18,
                  (const char (*)[21])", region_config_id: ");
          common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v19, &event->config_id);
          common::milog::MiLogStream::~MiLogStream(&v26);
        }
        else
        {
          v20 = std::__shared_ptr_access<Gadget,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Gadget,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 96));
          State = Gadget::getState(v20);
          if ( *(_BYTE *)(((unsigned __int64)&event->state >> 3) + 0x7FFF8000) != 0
            && *(_BYTE *)(((unsigned __int64)&event->state >> 3) + 0x7FFF8000) <= 3 )
          {
            __asan_report_load4(&event->state);
          }
          if ( State == event->state )
          {
            v22 = event->state;
            if ( *(_BYTE *)(((unsigned __int64)&event->config_id >> 3) + 0x7FFF8000) != 0
              && (char)((((_BYTE)event + 28) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&event->config_id >> 3)
                                                                   + 0x7FFF8000) )
            {
              __asan_report_load4(&event->config_id);
            }
            v23 = event->config_id;
            if ( *(_BYTE *)(((unsigned __int64)&event->group_id >> 3) + 0x7FFF8000) != 0
              && *(_BYTE *)(((unsigned __int64)&event->group_id >> 3) + 0x7FFF8000) <= 3 )
            {
              __asan_report_load4(&event->group_id);
            }
            PlayerQuestComp::updateQuestContentProgress(
              this,
              QUEST_CONTENT_GADGET_STATE_CHANGE,
              event->group_id,
              v23,
              v22,
              UPDATE_ADD,
              1u);
          }
        }
        std::shared_ptr<Gadget>::~shared_ptr((std::shared_ptr<Gadget> *const)(v2 + 96));
      }
      std::shared_ptr<Group>::~shared_ptr((std::shared_ptr<Group> *const)(v2 + 64));
    }
    std::shared_ptr<Scene>::~shared_ptr((std::shared_ptr<Scene> *const)(v2 + 32));
  }
  if ( v27 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
};

// Line 2290: range 0000000013DE01BC-0000000013DE01E9
void __cdecl PlayerQuestComp::onAranaraCollectionStateChangeEvent(
        PlayerQuestComp *const this,
        const AranaraCollectionStateChangeEvent *event)
{
  PlayerQuestComp::tryAcceptQuestByCond(this, QUEST_COND_ARANARA_COLLECTION_STATE_EQ, 1, 0);
};

// Line 2295: range 0000000013DE01EA-0000000013DE02A4
void __cdecl PlayerQuestComp::onGCGLevelSettleEvent(PlayerQuestComp *const this, const GCGLevelSettleEvent *event)
{
  int v2; // eax
  uint32_t win_flag; // [rsp+1Ch] [rbp-4h]

  if ( *(char *)(((unsigned __int64)&event->is_win >> 3) + 0x7FFF8000) < 0 )
    __asan_report_load1(&event->is_win);
  if ( event->is_win )
    v2 = 1;
  else
    v2 = 2;
  win_flag = v2;
  if ( *(_BYTE *)(((unsigned __int64)&event->level_id >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&event->level_id >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4(&event->level_id);
  }
  PlayerQuestComp::updateQuestContentProgress(
    this,
    QUEST_CONTENT_GCG_LEVEL_WIN,
    event->level_id,
    win_flag,
    UPDATE_ADD,
    1u);
};

// Line 2301: range 0000000013DE02A6-0000000013DE030E
void __cdecl PlayerQuestComp::onQuestAvatarRenameEvent(
        PlayerQuestComp *const this,
        const QuestAvatarRenameEvent *event)
{
  if ( *(_BYTE *)(((unsigned __int64)&event->rename_id >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&event->rename_id >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4(&event->rename_id);
  }
  PlayerQuestComp::updateQuestContentProgress(
    this,
    QUEST_CONTENT_AVATAR_RENAME_COMPLETE,
    event->rename_id,
    UPDATE_ADD,
    1u);
};

// Line 2307: range 0000000013DE0310-0000000013DE0676
int32_t __cdecl PlayerQuestComp::notifyAllFinishedParentQuest(PlayerQuestComp *const this)
{
  unsigned __int64 v1; // rbx
  __int64 v2; // rax
  unsigned __int64 v3; // r12
  std::__shared_ptr_access<proto::FinishedParentQuestNotify,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v4; // rax
  std::__shared_ptr_access<ParentQuest,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v5; // rax
  common::milog::MiLogStream *v6; // rax
  common::milog::MiLogStream *v7; // rax
  common::milog::MiLogStream *v8; // r14
  Player *player; // r14
  int32_t result; // eax
  unsigned int val; // [rsp+14h] [rbp-DCh] BYREF
  std::map<unsigned int,std::shared_ptr<ParentQuest>>::iterator __for_begin; // [rsp+18h] [rbp-D8h] BYREF
  std::map<unsigned int,std::shared_ptr<ParentQuest>>::iterator __for_end; // [rsp+20h] [rbp-D0h] BYREF
  std::map<unsigned int,std::shared_ptr<ParentQuest>> *__for_range; // [rsp+28h] [rbp-C8h]
  const std::pair<unsigned int const,std::shared_ptr<ParentQuest> > *v15; // [rsp+30h] [rbp-C0h]
  std::tuple_element<0,const std::pair<unsigned int const,std::shared_ptr<ParentQuest> > >::type *parent_quest_id; // [rsp+38h] [rbp-B8h]
  std::tuple_element<1,const std::pair<unsigned int const,std::shared_ptr<ParentQuest> > >::type *parent_quest_ptr; // [rsp+40h] [rbp-B0h]
  proto::ParentQuest *proto_parent_quest; // [rsp+48h] [rbp-A8h]
  std::shared_ptr<proto::FinishedParentQuestNotify> __r; // [rsp+50h] [rbp-A0h] BYREF
  common::milog::MiLogStream v20; // [rsp+60h] [rbp-90h] BYREF
  char v21[112]; // [rsp+80h] [rbp-70h] BYREF

  v1 = (unsigned __int64)v21;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_0(64LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "1 32 16 15 notify_ptr:2308";
  *(_QWORD *)(v1 + 16) = PlayerQuestComp::notifyAllFinishedParentQuest;
  v3 = v1 >> 3;
  *(_DWORD *)(v3 + 2147450880) = -235802127;
  *(_DWORD *)(v3 + 2147450884) = -202178560;
  common::tools::perf::make_shared<proto::FinishedParentQuestNotify>();
  __for_range = &this->parent_quest_map_;
  __for_begin._M_node = std::map<unsigned int,std::shared_ptr<ParentQuest>>::begin(&this->parent_quest_map_)._M_node;
  __for_end._M_node = std::map<unsigned int,std::shared_ptr<ParentQuest>>::end(&this->parent_quest_map_)._M_node;
  while ( std::operator!=(&__for_begin, &__for_end) )
  {
    v15 = std::_Rb_tree_iterator<std::pair<unsigned int const,std::shared_ptr<ParentQuest>>>::operator*(&__for_begin);
    parent_quest_id = std::get<0ul,unsigned int const,std::shared_ptr<ParentQuest>>(v15);
    parent_quest_ptr = (std::tuple_element<1,const std::pair<unsigned int const,std::shared_ptr<ParentQuest> > >::type *)std::get<1ul,unsigned int const,std::shared_ptr<ParentQuest>>(v15);
    v4 = std::__shared_ptr_access<proto::FinishedParentQuestNotify,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<proto::FinishedParentQuestNotify,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v1 + 32));
    proto_parent_quest = proto::FinishedParentQuestNotify::add_parent_quest_list(v4);
    v5 = std::__shared_ptr_access<ParentQuest,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<ParentQuest,(__gnu_cxx::_Lock_policy)2,false,false> *const)parent_quest_ptr);
    if ( ParentQuest::toClient(v5, proto_parent_quest) )
    {
      common::milog::MiLogStream::create(
        &v20,
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/player/quest/player_quest_comp.cpp",
        "notifyAllFinishedParentQuest",
        2316);
      v6 = common::milog::MiLogStream::operator<<<char [47],(char *[47])0>(
             &v20,
             (const char (*)[47])"parent_quest toClient failed, parent_quest_id:");
      v7 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v6, parent_quest_id);
      v8 = common::milog::MiLogStream::operator<<<char [6],(char *[6])0>(v7, (const char (*)[6])" uid:");
      if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
        __asan_report_load8(&this->player_);
      val = Player::getUid(this->player_);
      common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v8, &val);
      common::milog::MiLogStream::~MiLogStream(&v20);
    }
    std::_Rb_tree_iterator<std::pair<unsigned int const,std::shared_ptr<ParentQuest>>>::operator++(&__for_begin);
  }
  if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
    __asan_report_load8(&this->player_);
  player = this->player_;
  std::dynamic_pointer_cast<google::protobuf::Message const,proto::FinishedParentQuestNotify>(&__r);
  Player::sendMessage(player, (common::minet::ConstMessagePtr *)&__r, 0LL);
  std::shared_ptr<google::protobuf::Message const>::~shared_ptr((std::shared_ptr<const google::protobuf::Message> *const)&__r);
  std::shared_ptr<proto::FinishedParentQuestNotify>::~shared_ptr((std::shared_ptr<proto::FinishedParentQuestNotify> *const)(v1 + 32));
  result = 0;
  if ( v21 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 2327: range 0000000013DE0678-0000000013DE0967
int32_t __cdecl PlayerQuestComp::notifyAllQuest(PlayerQuestComp *const this)
{
  unsigned __int64 v1; // rbx
  __int64 v2; // rax
  unsigned __int64 v3; // r12
  std::__shared_ptr_access<proto::QuestListNotify,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v4; // rax
  std::__shared_ptr_access<Quest,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v5; // rax
  int32_t v6; // r14d
  Player *player; // r14
  int32_t result; // eax
  std::map<unsigned int,std::shared_ptr<Quest>>::iterator __for_begin; // [rsp+18h] [rbp-D8h] BYREF
  std::map<unsigned int,std::shared_ptr<Quest>>::iterator __for_end; // [rsp+20h] [rbp-D0h] BYREF
  std::map<unsigned int,std::shared_ptr<Quest>> *__for_range; // [rsp+28h] [rbp-C8h]
  const std::pair<unsigned int const,std::shared_ptr<Quest> > *v12; // [rsp+30h] [rbp-C0h]
  std::tuple_element<0,const std::pair<unsigned int const,std::shared_ptr<Quest> > >::type *quest_id; // [rsp+38h] [rbp-B8h]
  std::tuple_element<1,const std::pair<unsigned int const,std::shared_ptr<Quest> > >::type *quest_ptr; // [rsp+40h] [rbp-B0h]
  proto::Quest *proto_quest; // [rsp+48h] [rbp-A8h]
  std::shared_ptr<proto::QuestListNotify> __r; // [rsp+50h] [rbp-A0h] BYREF
  common::milog::MiLogStream v17; // [rsp+60h] [rbp-90h] BYREF
  char v18[112]; // [rsp+80h] [rbp-70h] BYREF

  v1 = (unsigned __int64)v18;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_0(64LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "1 32 16 15 notify_ptr:2328";
  *(_QWORD *)(v1 + 16) = PlayerQuestComp::notifyAllQuest;
  v3 = v1 >> 3;
  *(_DWORD *)(v3 + 2147450880) = -235802127;
  *(_DWORD *)(v3 + 2147450884) = -202178560;
  common::tools::perf::make_shared<proto::QuestListNotify>();
  __for_range = &this->quest_map_;
  __for_begin._M_node = std::map<unsigned int,std::shared_ptr<Quest>>::begin(&this->quest_map_)._M_node;
  __for_end._M_node = std::map<unsigned int,std::shared_ptr<Quest>>::end(&this->quest_map_)._M_node;
  while ( std::operator!=(&__for_begin, &__for_end) )
  {
    v12 = std::_Rb_tree_iterator<std::pair<unsigned int const,std::shared_ptr<Quest>>>::operator*(&__for_begin);
    quest_id = std::get<0ul,unsigned int const,std::shared_ptr<Quest>>(v12);
    quest_ptr = (std::tuple_element<1,const std::pair<unsigned int const,std::shared_ptr<Quest> > >::type *)std::get<1ul,unsigned int const,std::shared_ptr<Quest>>(v12);
    v4 = std::__shared_ptr_access<proto::QuestListNotify,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<proto::QuestListNotify,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v1 + 32));
    proto_quest = proto::QuestListNotify::add_quest_list(v4);
    v5 = std::__shared_ptr_access<Quest,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Quest,(__gnu_cxx::_Lock_policy)2,false,false> *const)quest_ptr);
    if ( Quest::toClient(v5, proto_quest) )
    {
      common::milog::MiLogStream::create(
        &v17,
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/player/quest/player_quest_comp.cpp",
        "notifyAllQuest",
        2334);
      common::milog::MiLogStream::operator<<<char [15],(char *[15])0>(&v17, (const char (*)[15])"toClient fails");
      common::milog::MiLogStream::~MiLogStream(&v17);
      v6 = -1;
      goto LABEL_12;
    }
    std::_Rb_tree_iterator<std::pair<unsigned int const,std::shared_ptr<Quest>>>::operator++(&__for_begin);
  }
  if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
    __asan_report_load8(&this->player_);
  player = this->player_;
  std::dynamic_pointer_cast<google::protobuf::Message const,proto::QuestListNotify>(&__r);
  v6 = Player::sendMessage(player, (common::minet::ConstMessagePtr *)&__r, 0LL);
  std::shared_ptr<google::protobuf::Message const>::~shared_ptr((std::shared_ptr<const google::protobuf::Message> *const)&__r);
LABEL_12:
  std::shared_ptr<proto::QuestListNotify>::~shared_ptr((std::shared_ptr<proto::QuestListNotify> *const)(v1 + 32));
  result = v6;
  if ( v18 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 2343: range 0000000013DE0968-0000000013DE0A55
int32_t __cdecl PlayerQuestComp::notifyAllData(PlayerQuestComp *const this)
{
  std::__detail::_Node_iterator_base<unsigned int,false>::__node_type *M_cur; // rbx
  std::__detail::_Node_iterator_base<unsigned int,false>::__node_type *v2; // r12
  std::allocator<unsigned int> __a; // [rsp+1Bh] [rbp-35h] BYREF
  int32_t ret; // [rsp+1Ch] [rbp-34h]
  std::vector<unsigned int> quest_id_vec; // [rsp+20h] [rbp-30h] BYREF

  ret = PlayerQuestComp::notifyAllFinishedParentQuest(this);
  ret |= PlayerQuestComp::notifyAllQuest(this);
  M_cur = std::unordered_set<unsigned int>::begin(&this->server_cond_meet_quest_set_)._M_cur;
  v2 = std::unordered_set<unsigned int>::end(&this->server_cond_meet_quest_set_)._M_cur;
  std::allocator<unsigned int>::allocator(&__a);
  std::vector<unsigned int>::vector<std::__detail::_Node_iterator<unsigned int,true,false>,void>(
    &quest_id_vec,
    (std::__detail::_Node_iterator<unsigned int,true,false>)M_cur,
    (std::__detail::_Node_iterator<unsigned int,true,false>)v2,
    &__a);
  PlayerQuestComp::notifyServerCondMeetQuest(this, &quest_id_vec);
  std::vector<unsigned int>::~vector(&quest_id_vec);
  std::allocator<unsigned int>::~allocator(&__a);
  PlayerQuestComp::notifyAllQuestGlobalVar(this);
  return ret;
};

// Line 2353: range 0000000013DE0A56-0000000013DE0CAA
__int64 __fastcall PlayerQuestComp::setChapterStateByQuestId(
        PlayerQuestComp *const this,
        uint32_t quest_id,
        proto::ChapterState chapter_state,
        bool is_notify)
{
  unsigned __int64 v4; // rbx
  __int64 v5; // rax
  unsigned __int64 v6; // r12
  std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v7; // rax
  common::milog::MiLogStream *v8; // rax
  __int64 result; // rax
  const data::QuestExcelConfig *quest_config_ptr; // [rsp+28h] [rbp-98h]
  std::shared_ptr<Config> v13; // [rsp+30h] [rbp-90h] BYREF
  common::milog::MiLogStream v14; // [rsp+40h] [rbp-80h] BYREF
  char v15[96]; // [rsp+60h] [rbp-60h] BYREF

  v4 = (unsigned __int64)v15;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v5 = __asan_stack_malloc_0(64LL);
    if ( v5 )
      v4 = v5;
  }
  *(_QWORD *)v4 = 1102416563LL;
  *(_QWORD *)(v4 + 8) = "1 32 4 13 quest_id:2352";
  *(_QWORD *)(v4 + 16) = PlayerQuestComp::setChapterStateByQuestId;
  v6 = v4 >> 3;
  *(_DWORD *)(v6 + 2147450880) = -235802127;
  *(_DWORD *)(v6 + 2147450884) = -202116348;
  *(_DWORD *)(v4 + 32) = quest_id;
  ServiceBox::findService<GameserverService>();
  GameserverService::getConfig((GameserverService *const)&v13);
  v7 = std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false> *const)&v13);
  quest_config_ptr = data::QuestExcelConfigMgrBase::findQuestExcelConfig(
                       &v7->design_config.txt_config_mgr.quest_config_mgr,
                       *(_DWORD *)(v4 + 32));
  std::shared_ptr<Config>::~shared_ptr(&v13);
  if ( quest_config_ptr )
  {
    if ( *(_BYTE *)(((unsigned __int64)&quest_config_ptr->main_id >> 3) + 0x7FFF8000) != 0
      && (char)((((_BYTE)quest_config_ptr + 12) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&quest_config_ptr->main_id >> 3)
                                                                      + 0x7FFF8000) )
    {
      __asan_report_load4(&quest_config_ptr->main_id);
    }
    PlayerQuestComp::setChapterStateByParentQuestId(this, quest_config_ptr->main_id, chapter_state, is_notify);
    result = 0LL;
  }
  else
  {
    common::milog::MiLogStream::create(
      &v14,
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/player/quest/player_quest_comp.cpp",
      "setChapterStateByQuestId",
      2357);
    v8 = common::milog::MiLogStream::operator<<<char [34],(char *[34])0>(
           &v14,
           (const char (*)[34])"quest config not exist, quest_id:");
    common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v8, (const unsigned int *)(v4 + 32));
    common::milog::MiLogStream::~MiLogStream(&v14);
    result = 0xFFFFFFFFLL;
  }
  if ( v15 == (char *)v4 )
  {
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0LL;
  }
  else
  {
    *(_QWORD *)v4 = 1172321806LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 2366: range 0000000013DE0CAC-0000000013DE14C6
__int64 __fastcall PlayerQuestComp::setChapterStateByParentQuestId(
        PlayerQuestComp *const this,
        uint32_t parent_quest_id,
        proto::ChapterState chapter_state,
        bool is_notify)
{
  unsigned __int64 v4; // r12
  __int64 v5; // rax
  _DWORD *v6; // r13
  std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v7; // rax
  common::milog::MiLogStream *v8; // rax
  common::milog::MiLogStream *v9; // rax
  common::milog::MiLogStream *v10; // rbx
  __int64 result; // rax
  Chapter *v12; // r8
  std::tuple_element<1,std::pair<std::_Rb_tree_iterator<std::pair<unsigned int const,Chapter> >,bool> >::type *v13; // rax
  common::milog::MiLogStream *v14; // rax
  common::milog::MiLogStream *v15; // r14
  common::milog::MiLogStream *v16; // rax
  common::milog::MiLogStream *v17; // rax
  char v18; // bl
  char v19; // r14
  common::milog::MiLogStream *v20; // rbx
  common::milog::MiLogStream *v21; // rax
  common::milog::MiLogStream *v22; // rcx
  unsigned int val; // [rsp+20h] [rbp-110h] BYREF
  int32_t ret; // [rsp+24h] [rbp-10Ch]
  std::_Rb_tree_iterator<std::pair<unsigned int const,Chapter> >::_Self __y; // [rsp+28h] [rbp-108h] BYREF
  const data::ChapterExcelConfig *chapter_config_ptr; // [rsp+30h] [rbp-100h]
  std::tuple_element<0,std::pair<std::_Rb_tree_iterator<std::pair<unsigned int const,Chapter> >,bool> >::type *result_iter; // [rsp+38h] [rbp-F8h]
  std::tuple_element<1,std::pair<std::_Rb_tree_iterator<std::pair<unsigned int const,Chapter> >,bool> >::type *succ; // [rsp+40h] [rbp-F0h]
  Chapter *chapter; // [rsp+48h] [rbp-E8h]
  std::pair<std::_Rb_tree_iterator<std::pair<unsigned int const,Chapter> >,bool> __in; // [rsp+50h] [rbp-E0h] BYREF
  common::milog::MiLogStream v33; // [rsp+60h] [rbp-D0h] BYREF
  char v34[176]; // [rsp+80h] [rbp-B0h] BYREF

  v4 = (unsigned __int64)v34;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v5 = __asan_stack_malloc_1(128LL);
    if ( v5 )
      v4 = v5;
  }
  *(_QWORD *)v4 = 1102416563LL;
  *(_QWORD *)(v4 + 8) = "4 32 4 20 parent_quest_id:2365 48 4 18 chapter_state:2365 64 8 9 iter:2374 96 12 12 chapter:2377";
  *(_QWORD *)(v4 + 16) = PlayerQuestComp::setChapterStateByParentQuestId;
  v6 = (_DWORD *)(v4 >> 3);
  v6[536862720] = -235802127;
  v6[536862721] = -234556924;
  v6[536862722] = -218959360;
  v6[536862723] = -202177536;
  *(_DWORD *)(v4 + 32) = parent_quest_id;
  *(_DWORD *)(v4 + 48) = chapter_state;
  ServiceBox::findService<GameserverService>();
  GameserverService::getConfig((GameserverService *const)&__in);
  v7 = std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false> *const)&__in);
  chapter_config_ptr = QuestExcelConfigMgr::findChapterConfigByParentQuestId(
                         &v7->design_config.txt_config_mgr.quest_config_mgr,
                         *(_DWORD *)(v4 + 32));
  std::shared_ptr<Config>::~shared_ptr((std::shared_ptr<Config> *const)&__in);
  if ( chapter_config_ptr )
  {
    *(std::map<unsigned int,Chapter>::iterator *)(v4 + 64) = std::map<unsigned int,Chapter>::find(
                                                               &this->chapter_map_,
                                                               &chapter_config_ptr->id);
    __y._M_node = std::map<unsigned int,Chapter>::end(&this->chapter_map_)._M_node;
    if ( std::operator==((const std::_Rb_tree_iterator<std::pair<unsigned int const,Chapter> >::_Self *)(v4 + 64), &__y) )
    {
      if ( *(_BYTE *)(((unsigned __int64)&chapter_config_ptr->id >> 3) + 0x7FFF8000) != 0
        && *(_BYTE *)(((unsigned __int64)&chapter_config_ptr->id >> 3) + 0x7FFF8000) <= 3 )
      {
        __asan_report_load4(&chapter_config_ptr->id);
      }
      Chapter::Chapter((Chapter *const)(v4 + 96), chapter_config_ptr->id);
      __in = std::map<unsigned int,Chapter>::emplace<unsigned int const&,Chapter&>(
               &this->chapter_map_,
               &chapter_config_ptr->id,
               (Chapter *)(v4 + 96),
               (const unsigned int *)&this->chapter_map_,
               v12);
      result_iter = std::get<0ul,std::_Rb_tree_iterator<std::pair<unsigned int const,Chapter>>,bool>(&__in);
      v13 = std::get<1ul,std::_Rb_tree_iterator<std::pair<unsigned int const,Chapter>>,bool>(&__in);
      succ = v13;
      if ( *(_BYTE *)(((unsigned __int64)v13 >> 3) + 0x7FFF8000) != 0
        && ((unsigned __int8)v13 & 7) >= *(_BYTE *)(((unsigned __int64)v13 >> 3) + 0x7FFF8000) )
      {
        __asan_report_load1(v13);
      }
      if ( !*succ )
      {
        common::milog::MiLogStream::create(
          &v33,
          &common::milog::MiLogDefault::default_log_obj_,
          3u,
          "./src/player/quest/player_quest_comp.cpp",
          "setChapterStateByParentQuestId",
          2381);
        v14 = common::milog::MiLogStream::operator<<<char [39],(char *[39])0>(&v33, (const char (*)[39])off_25163A00);
        common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v14, &chapter_config_ptr->id);
        common::milog::MiLogStream::~MiLogStream(&v33);
        result = 0xFFFFFFFFLL;
        goto LABEL_38;
      }
      if ( *(_BYTE *)(((unsigned __int64)result_iter >> 3) + 0x7FFF8000) )
        __asan_report_load8(result_iter);
      *(std::tuple_element<0,std::pair<std::_Rb_tree_iterator<std::pair<unsigned int const,Chapter> >,bool> >::type *)(v4 + 64) = (std::tuple_element<0,std::pair<std::_Rb_tree_iterator<std::pair<unsigned int const,Chapter> >,bool> >::type)result_iter->_M_node;
    }
    chapter = &std::_Rb_tree_iterator<std::pair<unsigned int const,Chapter>>::operator->((const std::_Rb_tree_iterator<std::pair<unsigned int const,Chapter> > *const)(v4 + 64))->second;
    if ( Chapter::getChapterState(chapter) > *(_DWORD *)(v4 + 48) )
    {
      common::milog::MiLogStream::create(
        &v33,
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/player/quest/player_quest_comp.cpp",
        "setChapterStateByParentQuestId",
        2391);
      v15 = common::milog::MiLogStream::operator<<<char [29],(char *[29])0>(
              &v33,
              (const char (*)[29])"chapter state fallback from ");
      val = Chapter::getChapterState(chapter);
      v16 = common::milog::MiLogStream::operator<<<proto::ChapterState,(proto::ChapterState*)0>(
              v15,
              (const proto::ChapterState *)&val);
      v17 = common::milog::MiLogStream::operator<<<char [5],(char *[5])0>(v16, (const char (*)[5])off_25163AA0);
      common::milog::MiLogStream::operator<<<proto::ChapterState,(proto::ChapterState*)0>(
        v17,
        (const proto::ChapterState *)(v4 + 48));
      common::milog::MiLogStream::~MiLogStream(&v33);
    }
    if ( Chapter::getChapterState(chapter) != *(_DWORD *)(v4 + 48) )
      Chapter::setIsNotifySent(chapter, 0);
    Chapter::setChapterState(chapter, *(proto::ChapterState *)(v4 + 48));
    ret = 0;
    v18 = 0;
    if ( !is_notify )
      goto LABEL_27;
    if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
      __asan_report_load8(&this->player_);
    Player::getSceneComp(this->player_);
    PlayerSceneComp::getCurScene((const PlayerSceneComp *const)&__in);
    v18 = 1;
    if ( std::operator!=<Scene>((const std::shared_ptr<Scene> *)&__in, 0LL) )
      v19 = 1;
    else
LABEL_27:
      v19 = 0;
    if ( v18 )
      std::shared_ptr<Scene>::~shared_ptr((std::shared_ptr<Scene> *const)&__in);
    if ( v19 )
    {
      if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
        __asan_report_load8(&this->player_);
      ret = Chapter::notifyChapter(chapter, this->player_);
      if ( ret )
      {
        common::milog::MiLogStream::create(
          &v33,
          &common::milog::MiLogDefault::default_log_obj_,
          3u,
          "./src/player/quest/player_quest_comp.cpp",
          "setChapterStateByParentQuestId",
          2406);
        v20 = common::milog::MiLogStream::operator<<<char [35],(char *[35])0>(
                &v33,
                (const char (*)[35])"notify Chapter failed, chapter_id:");
        val = Chapter::getChapterId(chapter);
        v21 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v20, &val);
        v22 = common::milog::MiLogStream::operator<<<char [9],(char *[9])0>(v21, (const char (*)[9])" player:");
        if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
          __asan_report_load8(&this->player_);
        operator<<(v22, this->player_);
        common::milog::MiLogStream::~MiLogStream(&v33);
      }
    }
    result = (unsigned int)ret;
  }
  else
  {
    common::milog::MiLogStream::create(
      &v33,
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/player/quest/player_quest_comp.cpp",
      "setChapterStateByParentQuestId",
      2370);
    v8 = common::milog::MiLogStream::operator<<<char [43],(char *[43])0>(
           &v33,
           (const char (*)[43])"chapter config not exist, parent_quest_id:");
    v9 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v8, (const unsigned int *)(v4 + 32));
    v10 = common::milog::MiLogStream::operator<<<char [6],(char *[6])0>(v9, (const char (*)[6])" uid:");
    if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
      __asan_report_load8(&this->player_);
    val = Player::getUid(this->player_);
    common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v10, &val);
    common::milog::MiLogStream::~MiLogStream(&v33);
    result = 0xFFFFFFFFLL;
  }
LABEL_38:
  if ( v34 == (char *)v4 )
  {
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v4 = 1172321806LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 2413: range 0000000013DE14C8-0000000013DE16A4
int32_t __cdecl PlayerQuestComp::tryNotifyAllBeginChapter(PlayerQuestComp *const this)
{
  common::milog::MiLogStream *v1; // rbx
  common::milog::MiLogStream *v2; // rax
  common::milog::MiLogStream *v3; // rcx
  unsigned int val; // [rsp+1Ch] [rbp-64h] BYREF
  std::map<unsigned int,Chapter>::iterator __for_begin; // [rsp+20h] [rbp-60h] BYREF
  std::map<unsigned int,Chapter>::iterator __for_end; // [rsp+28h] [rbp-58h] BYREF
  std::map<unsigned int,Chapter> *__for_range; // [rsp+30h] [rbp-50h]
  std::pair<unsigned int const,Chapter> *__in; // [rsp+38h] [rbp-48h]
  std::tuple_element<0,std::pair<unsigned int const,Chapter> >::type *_; // [rsp+40h] [rbp-40h]
  std::tuple_element<1,std::pair<unsigned int const,Chapter> >::type *chapter; // [rsp+48h] [rbp-38h]
  common::milog::MiLogStream v12; // [rsp+50h] [rbp-30h] BYREF

  __for_range = &this->chapter_map_;
  __for_begin._M_node = std::map<unsigned int,Chapter>::begin(&this->chapter_map_)._M_node;
  __for_end._M_node = std::map<unsigned int,Chapter>::end(&this->chapter_map_)._M_node;
  while ( std::operator!=(&__for_begin, &__for_end) )
  {
    __in = std::_Rb_tree_iterator<std::pair<unsigned int const,Chapter>>::operator*(&__for_begin);
    _ = std::get<0ul,unsigned int const,Chapter>(__in);
    chapter = std::get<1ul,unsigned int const,Chapter>(__in);
    if ( Chapter::getChapterState(chapter) == CHAPTER_STATE_BEGIN )
    {
      if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
        __asan_report_load8(&this->player_);
      if ( Chapter::notifyChapter(chapter, this->player_) )
      {
        common::milog::MiLogStream::create(
          &v12,
          &common::milog::MiLogDefault::default_log_obj_,
          3u,
          "./src/player/quest/player_quest_comp.cpp",
          "tryNotifyAllBeginChapter",
          2422);
        v1 = common::milog::MiLogStream::operator<<<char [35],(char *[35])0>(
               &v12,
               (const char (*)[35])"notify Chapter failed, chapter_id:");
        val = Chapter::getChapterId(chapter);
        v2 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v1, &val);
        v3 = common::milog::MiLogStream::operator<<<char [9],(char *[9])0>(v2, (const char (*)[9])" player:");
        if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
          __asan_report_load8(&this->player_);
        operator<<(v3, this->player_);
        common::milog::MiLogStream::~MiLogStream(&v12);
      }
    }
    std::_Rb_tree_iterator<std::pair<unsigned int const,Chapter>>::operator++(&__for_begin);
  }
  return 0;
};

// Line 2429: range 0000000013DE16A6-0000000013DE180C
bool __fastcall PlayerQuestComp::isChapterEnd(PlayerQuestComp *const this, uint32_t chapter_id)
{
  unsigned __int64 v2; // rbx
  __int64 v3; // rax
  _DWORD *v4; // r12
  bool result; // al
  std::_Rb_tree_iterator<std::pair<unsigned int const,Chapter> >::pointer v6; // rax
  std::_Rb_tree_iterator<std::pair<unsigned int const,Chapter> >::_Self __y; // [rsp+18h] [rbp-88h] BYREF
  char v8[128]; // [rsp+20h] [rbp-80h] BYREF

  v2 = (unsigned __int64)v8;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_1(96LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "2 48 4 15 chapter_id:2428 64 8 9 iter:2430";
  *(_QWORD *)(v2 + 16) = PlayerQuestComp::isChapterEnd;
  v4 = (_DWORD *)(v2 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = -234556943;
  v4[536862722] = -202116352;
  *(_DWORD *)(v2 + 48) = chapter_id;
  *(std::map<unsigned int,Chapter>::iterator *)(v2 + 64) = std::map<unsigned int,Chapter>::find(
                                                             &this->chapter_map_,
                                                             (const std::map<unsigned int,Chapter>::key_type *)(v2 + 48));
  __y._M_node = std::map<unsigned int,Chapter>::end(&this->chapter_map_)._M_node;
  if ( std::operator==((const std::_Rb_tree_iterator<std::pair<unsigned int const,Chapter> >::_Self *)(v2 + 64), &__y) )
  {
    result = 0;
  }
  else
  {
    v6 = std::_Rb_tree_iterator<std::pair<unsigned int const,Chapter>>::operator->((const std::_Rb_tree_iterator<std::pair<unsigned int const,Chapter> > *const)(v2 + 64));
    result = Chapter::getChapterState(&v6->second) == CHAPTER_STATE_END;
  }
  if ( v8 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8008) = 0;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8008) = -168430091;
  }
  return result;
};

// Line 2440: range 0000000013DE180E-0000000013DE1DF4
__int64 __fastcall PlayerQuestComp::forceAcceptQuestByMUIP(
        PlayerQuestComp *const this,
        uint32_t quest_id,
        bool is_notify)
{
  unsigned __int64 v3; // r12
  __int64 v4; // rax
  _DWORD *v5; // r13
  std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v6; // rax
  common::milog::MiLogStream *v7; // rax
  common::milog::MiLogStream *v8; // rax
  std::__shared_ptr_access<ParentQuest,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v9; // rax
  common::milog::MiLogStream *v11; // rax
  __int64 result; // rax
  int v13; // [rsp+8h] [rbp-108h]
  unsigned int M_array_high; // [rsp+Ch] [rbp-104h]
  std::allocator<unsigned int> __a; // [rsp+27h] [rbp-E9h] BYREF
  std::initializer_list<unsigned int> __l; // [rsp+28h] [rbp-E8h] BYREF
  const data::MainQuestExcelConfig *parent_quest_config_ptr; // [rsp+38h] [rbp-D8h]
  std::vector<unsigned int> quest_id_vec; // [rsp+40h] [rbp-D0h] BYREF
  common::milog::MiLogStream v20; // [rsp+60h] [rbp-B0h] BYREF
  char v21[144]; // [rsp+80h] [rbp-90h] BYREF

  v3 = (unsigned __int64)v21;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_1(96LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "2 48 4 13 quest_id:2439 64 16 21 parent_quest_ptr:2456";
  *(_QWORD *)(v3 + 16) = PlayerQuestComp::forceAcceptQuestByMUIP;
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = -234556943;
  v5[536862722] = -202178560;
  *(_DWORD *)(v3 + 48) = quest_id;
  ServiceBox::findService<GameserverService>();
  GameserverService::getConfig((GameserverService *const)(v3 + 64));
  v6 = std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 64));
  __l._M_len = (std::initializer_list<unsigned int>::size_type)data::QuestExcelConfigMgrBase::findQuestExcelConfig(
                                                                 &v6->design_config.txt_config_mgr.quest_config_mgr,
                                                                 *(_DWORD *)(v3 + 48));
  std::shared_ptr<Config>::~shared_ptr((std::shared_ptr<Config> *const)(v3 + 64));
  if ( __l._M_len )
  {
    if ( *(_BYTE *)(((__l._M_len + 12) >> 3) + 0x7FFF8000) != 0
      && (char)(((LOBYTE(__l._M_len) + 12) & 7) + 3) >= *(_BYTE *)(((__l._M_len + 12) >> 3) + 0x7FFF8000) )
    {
      __asan_report_load4(__l._M_len + 12);
    }
    parent_quest_config_ptr = PlayerQuestComp::findPlayerParentQuestExcelConfig(this, *(_DWORD *)(__l._M_len + 12));
    if ( parent_quest_config_ptr )
    {
      if ( *(_BYTE *)(((unsigned __int64)&parent_quest_config_ptr->repeatable >> 3) + 0x7FFF8000) != 0
        && (((unsigned __int8)parent_quest_config_ptr + 68) & 7) >= *(_BYTE *)(((unsigned __int64)&parent_quest_config_ptr->repeatable >> 3)
                                                                             + 0x7FFF8000) )
      {
        __asan_report_load1(&parent_quest_config_ptr->repeatable);
      }
      if ( parent_quest_config_ptr->repeatable )
        goto LABEL_23;
      if ( *(_BYTE *)(((__l._M_len + 12) >> 3) + 0x7FFF8000) != 0
        && (char)(((LOBYTE(__l._M_len) + 12) & 7) + 3) >= *(_BYTE *)(((__l._M_len + 12) >> 3) + 0x7FFF8000) )
      {
        __asan_report_load4(__l._M_len + 12);
      }
      PlayerQuestComp::findParentQuest(
        (const PlayerQuestComp *const)(v3 + 64),
        (__int64)this,
        *(_DWORD *)(__l._M_len + 12));
      if ( std::operator!=<ParentQuest>((const std::shared_ptr<ParentQuest> *)(v3 + 64), 0LL)
        && (v9 = std::__shared_ptr_access<ParentQuest,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<ParentQuest,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 64)),
            ParentQuest::getParentQuestState(v9) == PARENT_QUEST_STATE_FINISHED) )
      {
        common::milog::MiLogStream::create(
          &v20,
          &common::milog::MiLogDefault::default_log_obj_,
          1u,
          "./src/player/quest/player_quest_comp.cpp",
          "forceAcceptQuestByMUIP",
          2459);
        v11 = common::milog::MiLogStream::operator<<<char [36],(char *[36])0>(
                &v20,
                (const char (*)[36])"parent quest is finished, quest_id:");
        common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v11, (const unsigned int *)(v3 + 48));
        common::milog::MiLogStream::~MiLogStream(&v20);
        M_array_high = -1;
        v13 = 0;
      }
      else
      {
        v13 = 1;
      }
      std::shared_ptr<ParentQuest>::~shared_ptr((std::shared_ptr<ParentQuest> *const)(v3 + 64));
      if ( v13 == 1 )
      {
LABEL_23:
        HIDWORD(__l._M_array) = PlayerQuestComp::acceptQuest(this, *(_DWORD *)(v3 + 48), 1, is_notify);
        LODWORD(__l._M_array) = *(_DWORD *)(v3 + 48);
        std::allocator<unsigned int>::allocator(&__a);
        std::vector<unsigned int>::vector(
          &quest_id_vec,
          (std::initializer_list<unsigned int>)__PAIR128__(1LL, &__l),
          &__a);
        PlayerQuestComp::updateServerCondMeetStatus(this, &quest_id_vec, is_notify);
        std::vector<unsigned int>::~vector(&quest_id_vec);
        std::allocator<unsigned int>::~allocator(&__a);
        M_array_high = HIDWORD(__l._M_array);
      }
    }
    else
    {
      common::milog::MiLogStream::create(
        &v20,
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/player/quest/player_quest_comp.cpp",
        "forceAcceptQuestByMUIP",
        2451);
      v8 = common::milog::MiLogStream::operator<<<char [57],(char *[57])0>(
             &v20,
             (const char (*)[57])"findPlayerParentQuestExcelConfig fails, parent_quest_id:");
      common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
        v8,
        (const unsigned int *)(__l._M_len + 12));
      common::milog::MiLogStream::~MiLogStream(&v20);
      M_array_high = -1;
    }
  }
  else
  {
    common::milog::MiLogStream::create(
      &v20,
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/player/quest/player_quest_comp.cpp",
      "forceAcceptQuestByMUIP",
      2445);
    v7 = common::milog::MiLogStream::operator<<<char [34],(char *[34])0>(
           &v20,
           (const char (*)[34])"quest config not exist, quest_id:");
    common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v7, (const unsigned int *)(v3 + 48));
    common::milog::MiLogStream::~MiLogStream(&v20);
    M_array_high = -1;
  }
  result = M_array_high;
  if ( v21 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8008) = 0;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8008) = -168430091;
  }
  return result;
};

// Line 2470: range 0000000013DE1DF6-0000000013DE1EDD
int32_t __cdecl PlayerQuestComp::forceAcceptQuestByGM(PlayerQuestComp *const this, uint32_t quest_id, bool is_notify)
{
  std::allocator<unsigned int> __a; // [rsp+17h] [rbp-49h] BYREF
  std::initializer_list<unsigned int> __l; // [rsp+18h] [rbp-48h] BYREF

  __l._M_array = (std::initializer_list<unsigned int>::iterator)__PAIR64__(
                                                                  PlayerQuestComp::acceptQuest(
                                                                    this,
                                                                    quest_id,
                                                                    1,
                                                                    is_notify),
                                                                  quest_id);
  std::allocator<unsigned int>::allocator(&__a);
  std::vector<unsigned int>::vector(
    (std::vector<unsigned int> *const)&__l._M_len,
    (std::initializer_list<unsigned int>)__PAIR128__(1LL, &__l),
    &__a);
  PlayerQuestComp::updateServerCondMeetStatus(this, (const std::vector<unsigned int> *)&__l._M_len, is_notify);
  std::vector<unsigned int>::~vector((std::vector<unsigned int> *const)&__l._M_len);
  std::allocator<unsigned int>::~allocator(&__a);
  return HIDWORD(__l._M_array);
};

// Line 2478: range 0000000013DE1EDE-0000000013DE218A
__int64 __fastcall PlayerQuestComp::forceFinishQuestByGM(
        PlayerQuestComp *const this,
        uint32_t quest_id,
        bool is_notify)
{
  unsigned __int64 v3; // r12
  __int64 v4; // rax
  _DWORD *v5; // r13
  common::milog::MiLogStream *v6; // r14
  common::milog::MiLogStream *v7; // rax
  common::milog::MiLogStream *v8; // rax
  unsigned int v9; // r14d
  std::__shared_ptr_access<Quest,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v10; // rax
  Quest *v11; // rax
  __int64 result; // rax
  unsigned int val; // [rsp+1Ch] [rbp-B4h] BYREF
  common::milog::MiLogStream v15; // [rsp+20h] [rbp-B0h] BYREF
  char v16[144]; // [rsp+40h] [rbp-90h] BYREF

  v3 = (unsigned __int64)v16;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_1(96LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "2 48 4 13 quest_id:2477 64 16 14 quest_ptr:2479";
  *(_QWORD *)(v3 + 16) = PlayerQuestComp::forceFinishQuestByGM;
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = -234556943;
  v5[536862722] = -202178560;
  *(_DWORD *)(v3 + 48) = quest_id;
  PlayerQuestComp::findQuest((const PlayerQuestComp *const)(v3 + 64), (__int64)this, *(_DWORD *)(v3 + 48));
  if ( std::operator==<Quest>((const std::shared_ptr<Quest> *)(v3 + 64), 0LL) )
  {
    common::milog::MiLogStream::create(
      &v15,
      &common::milog::MiLogDefault::default_log_obj_,
      1u,
      "./src/player/quest/player_quest_comp.cpp",
      "forceFinishQuestByGM",
      2482);
    v6 = common::milog::MiLogStream::operator<<<char [23],(char *[23])0>(
           &v15,
           (const char (*)[23])"findQuest failed, uid:");
    if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
      __asan_report_load8(&this->player_);
    val = Player::getUid(this->player_);
    v7 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v6, &val);
    v8 = common::milog::MiLogStream::operator<<<char [11],(char *[11])0>(v7, (const char (*)[11])" quest_id:");
    common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v8, (const unsigned int *)(v3 + 48));
    common::milog::MiLogStream::~MiLogStream(&v15);
    v9 = -1;
  }
  else
  {
    v10 = std::__shared_ptr_access<Quest,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Quest,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 64));
    if ( Quest::getState(v10) == QUEST_STATE_UNFINISHED )
    {
      v11 = std::__shared_ptr_access<Quest,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Quest,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 64));
      Quest::finish(v11, is_notify);
      PlayerQuestComp::finishQuest(this, *(_DWORD *)(v3 + 48), is_notify);
    }
    v9 = 0;
  }
  std::shared_ptr<Quest>::~shared_ptr((std::shared_ptr<Quest> *const)(v3 + 64));
  result = v9;
  if ( v16 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8008) = 0;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8008) = -168430091;
  }
  return result;
};

// Line 2497: range 0000000013DE218C-0000000013DE24B8
__int64 __fastcall PlayerQuestComp::forceFinishQuestV2ByGm(
        PlayerQuestComp *const this,
        uint32_t quest_id,
        bool is_notify)
{
  unsigned __int64 v3; // r12
  __int64 v4; // rax
  _DWORD *v5; // r13
  common::milog::MiLogStream *v6; // r14
  common::milog::MiLogStream *v7; // rax
  common::milog::MiLogStream *v8; // rax
  unsigned int v9; // r14d
  std::__shared_ptr_access<Quest,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v10; // rax
  Quest *v11; // rax
  std::set<unsigned int> *v12; // rax
  std::set<unsigned int> *v13; // rax
  __int64 result; // rax
  unsigned int val; // [rsp+1Ch] [rbp-B4h] BYREF
  common::milog::MiLogStream v16; // [rsp+20h] [rbp-B0h] BYREF
  char v17[144]; // [rsp+40h] [rbp-90h] BYREF

  v3 = (unsigned __int64)v17;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_1(96LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "2 48 4 13 quest_id:2496 64 16 14 quest_ptr:2498";
  *(_QWORD *)(v3 + 16) = PlayerQuestComp::forceFinishQuestV2ByGm;
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = -234556943;
  v5[536862722] = -202178560;
  *(_DWORD *)(v3 + 48) = quest_id;
  PlayerQuestComp::findQuest((const PlayerQuestComp *const)(v3 + 64), (__int64)this, *(_DWORD *)(v3 + 48));
  if ( std::operator==<Quest>((const std::shared_ptr<Quest> *)(v3 + 64), 0LL) )
  {
    common::milog::MiLogStream::create(
      &v16,
      &common::milog::MiLogDefault::default_log_obj_,
      1u,
      "./src/player/quest/player_quest_comp.cpp",
      "forceFinishQuestV2ByGm",
      2501);
    v6 = common::milog::MiLogStream::operator<<<char [23],(char *[23])0>(
           &v16,
           (const char (*)[23])"findQuest failed, uid:");
    if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
      __asan_report_load8(&this->player_);
    val = Player::getUid(this->player_);
    v7 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v6, &val);
    v8 = common::milog::MiLogStream::operator<<<char [11],(char *[11])0>(v7, (const char (*)[11])" quest_id:");
    common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v8, (const unsigned int *)(v3 + 48));
    common::milog::MiLogStream::~MiLogStream(&v16);
    v9 = -1;
  }
  else
  {
    v10 = std::__shared_ptr_access<Quest,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Quest,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 64));
    if ( Quest::getState(v10) == QUEST_STATE_UNFINISHED )
    {
      v11 = std::__shared_ptr_access<Quest,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Quest,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 64));
      Quest::setForceFinishFlagByGm(v11, 1);
      val = 0;
      v12 = std::map<data::QuestContentType,std::set<unsigned int>>::operator[](
              &this->event_quest_map_,
              (std::map<data::QuestContentType,std::set<unsigned int>>::key_type *)&val);
      std::set<unsigned int>::insert(v12, (const std::set<unsigned int>::value_type *)(v3 + 48));
      PlayerQuestComp::updateQuestContentProgress(this, QUEST_CONTENT_NONE, 0, UPDATE_ADD, 0);
      val = 0;
      v13 = std::map<data::QuestContentType,std::set<unsigned int>>::operator[](
              &this->event_quest_map_,
              (std::map<data::QuestContentType,std::set<unsigned int>>::key_type *)&val);
      std::set<unsigned int>::erase(v13, (const std::set<unsigned int>::key_type *)(v3 + 48));
    }
    v9 = 0;
  }
  std::shared_ptr<Quest>::~shared_ptr((std::shared_ptr<Quest> *const)(v3 + 64));
  result = v9;
  if ( v17 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8008) = 0;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8008) = -168430091;
  }
  return result;
};

// Line 2522: range 0000000013DE24BA-0000000013DE2D51
__int64 __fastcall PlayerQuestComp::forceAcceptAndFinishParentQuestByGM(
        PlayerQuestComp *const this,
        uint32_t parent_quest_id,
        bool is_notify)
{
  unsigned __int64 v3; // r13
  __int64 v4; // rax
  _DWORD *v5; // r12
  common::milog::MiLogStream *v6; // rax
  unsigned int v7; // r14d
  common::milog::MiLogStream *v8; // rax
  __gnu_cxx::__normal_iterator<unsigned int const*,std::vector<unsigned int> >::reference v9; // rax
  _DWORD *v10; // rdx
  common::milog::MiLogStream *v11; // rax
  common::milog::MiLogStream *v12; // rax
  common::milog::MiLogStream *v13; // r14
  const data::QuestExcelConfig **v14; // rax
  const data::QuestExcelConfig **M_current; // r14
  std::vector<const data::QuestExcelConfig*>::iterator v16; // rax
  PlayerQuestComp::forceAcceptAndFinishParentQuestByGM::<lambda(const auto:29&, const auto:30&)> v17; // dl
  const data::QuestExcelConfig **v18; // rax
  bool v19; // dl
  const data::QuestExec *v20; // r14
  std::vector<data::QuestExec>::const_iterator v21; // rax
  PlayerQuestComp::forceAcceptAndFinishParentQuestByGM::<lambda(const auto:31&)> v22; // dl
  bool v23; // dl
  common::milog::MiLogStream *v24; // rax
  ParentQuest *v25; // rax
  bool v26; // al
  _BOOL4 v27; // r14d
  __int64 result; // rax
  unsigned int val; // [rsp+14h] [rbp-16Ch] BYREF
  std::vector<const data::QuestExcelConfig*>::iterator __for_begin_0; // [rsp+18h] [rbp-168h] BYREF
  std::vector<const data::QuestExcelConfig*>::iterator __for_end_0; // [rsp+20h] [rbp-160h] BYREF
  std::vector<unsigned int>::const_iterator __for_end; // [rsp+28h] [rbp-158h] BYREF
  const data::MainQuestExcelConfig *parent_quest_config_ptr; // [rsp+30h] [rbp-150h]
  const std::vector<unsigned int> *__for_range; // [rsp+38h] [rbp-148h]
  std::vector<const data::QuestExcelConfig*> *__for_range_0; // [rsp+40h] [rbp-140h]
  const data::QuestExcelConfig *quest_config_ptr; // [rsp+48h] [rbp-138h]
  common::milog::MiLogStream v38; // [rsp+50h] [rbp-130h] BYREF
  char v39[272]; // [rsp+70h] [rbp-110h] BYREF

  v3 = (unsigned __int64)v39;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_2(224LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "6 32 4 19 child_quest_id:2540 48 4 20 parent_quest_id:2521 64 8 27 child_quest_config_ptr:2542 9"
                        "6 16 21 parent_quest_ptr:2525 128 16 21 parent_quest_ptr:2571 160 24 27 child_quest_config_vec:2539";
  *(_QWORD *)(v3 + 16) = PlayerQuestComp::forceAcceptAndFinishParentQuestByGM;
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = -234556924;
  v5[536862722] = -218959360;
  v5[536862723] = -219021312;
  v5[536862724] = -219021312;
  v5[536862725] = -218103808;
  v5[536862726] = -202116109;
  *(_DWORD *)(v3 + 48) = parent_quest_id;
  PlayerQuestComp::findParentQuest((const PlayerQuestComp *const)(v3 + 96), (__int64)this, *(_DWORD *)(v3 + 48));
  if ( std::operator==<ParentQuest>((const std::shared_ptr<ParentQuest> *)(v3 + 96), 0LL) )
  {
    common::milog::MiLogStream::create(
      &v38,
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/player/quest/player_quest_comp.cpp",
      "forceAcceptAndFinishParentQuestByGM",
      2528);
    v6 = common::milog::MiLogStream::operator<<<char [28],(char *[28])0>(
           &v38,
           (const char (*)[28])"findParentQuest fails, id: ");
    common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v6, (const unsigned int *)(v3 + 48));
    common::milog::MiLogStream::~MiLogStream(&v38);
    v7 = -1;
  }
  else
  {
    parent_quest_config_ptr = PlayerQuestComp::findPlayerParentQuestExcelConfig(this, *(_DWORD *)(v3 + 48));
    if ( parent_quest_config_ptr )
    {
      std::vector<data::QuestExcelConfig const*>::vector((std::vector<const data::QuestExcelConfig*> *const)(v3 + 160));
      __for_range = &parent_quest_config_ptr->child_quest_list;
      __for_end_0._M_current = (const data::QuestExcelConfig **)std::vector<unsigned int>::begin(&parent_quest_config_ptr->child_quest_list)._M_current;
      __for_end._M_current = std::vector<unsigned int>::end(&parent_quest_config_ptr->child_quest_list)._M_current;
      while ( __gnu_cxx::operator!=<unsigned int const*,std::vector<unsigned int>>(
                (const __gnu_cxx::__normal_iterator<unsigned int const*,std::vector<unsigned int> > *)&__for_end_0,
                &__for_end) )
      {
        v9 = __gnu_cxx::__normal_iterator<unsigned int const*,std::vector<unsigned int>>::operator*((const __gnu_cxx::__normal_iterator<unsigned int const*,std::vector<unsigned int> > *const)&__for_end_0);
        v10 = v9;
        if ( *(_BYTE *)(((unsigned __int64)v9 >> 3) + 0x7FFF8000) != 0
          && (char)(((unsigned __int8)v9 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)v9 >> 3) + 0x7FFF8000) )
        {
          __asan_report_load4(v9);
        }
        *(_DWORD *)(v3 + 32) = *v10;
        *(_QWORD *)(v3 + 64) = PlayerQuestComp::findPlayerQuestExcelConfig(this, *(_DWORD *)(v3 + 32));
        if ( !*(_QWORD *)(v3 + 64) )
        {
          common::milog::MiLogStream::create(
            &v38,
            &common::milog::MiLogDefault::default_log_obj_,
            3u,
            "./src/player/quest/player_quest_comp.cpp",
            "forceAcceptAndFinishParentQuestByGM",
            2545);
          v11 = common::milog::MiLogStream::operator<<<char [45],(char *[45])0>(
                  &v38,
                  (const char (*)[45])"findPlayerQuestExcelConfig failed, quest_id:");
          v12 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                  v11,
                  (const unsigned int *)(v3 + 32));
          v13 = common::milog::MiLogStream::operator<<<char [6],(char *[6])0>(v12, (const char (*)[6])" uid:");
          if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
            __asan_report_load8(&this->player_);
          val = Player::getUid(this->player_);
          common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v13, &val);
          common::milog::MiLogStream::~MiLogStream(&v38);
          v7 = -1;
          goto LABEL_37;
        }
        v14 = std::move<data::QuestExcelConfig const*&>((const data::QuestExcelConfig **)(v3 + 64));
        std::vector<data::QuestExcelConfig const*>::emplace_back<data::QuestExcelConfig const*>(
          (std::vector<const data::QuestExcelConfig*> *const)(v3 + 160),
          v14,
          v14);
        __gnu_cxx::__normal_iterator<unsigned int const*,std::vector<unsigned int>>::operator++((__gnu_cxx::__normal_iterator<unsigned int const*,std::vector<unsigned int> > *const)&__for_end_0);
      }
      M_current = std::vector<data::QuestExcelConfig const*>::end((std::vector<const data::QuestExcelConfig*> *const)(v3 + 160))._M_current;
      v16._M_current = std::vector<data::QuestExcelConfig const*>::begin((std::vector<const data::QuestExcelConfig*> *const)(v3 + 160))._M_current;
      std::sort___gnu_cxx::__normal_iterator_const_data::QuestExcelConfig___std::vector_const_data::QuestExcelConfig_____PlayerQuestComp::forceAcceptAndFinishParentQuestByGM_uint32_t_bool_::_lambda_const_auto_29__const_auto_30_____(
        v16,
        (__gnu_cxx::__normal_iterator<const data::QuestExcelConfig**,std::vector<const data::QuestExcelConfig*> >)M_current,
        v17);
      __for_range_0 = (std::vector<const data::QuestExcelConfig*> *)(v3 + 160);
      __for_begin_0._M_current = std::vector<data::QuestExcelConfig const*>::begin((std::vector<const data::QuestExcelConfig*> *const)(v3 + 160))._M_current;
      __for_end_0._M_current = std::vector<data::QuestExcelConfig const*>::end(__for_range_0)._M_current;
      while ( __gnu_cxx::operator!=<data::QuestExcelConfig const**,std::vector<data::QuestExcelConfig const*>>(
                &__for_begin_0,
                &__for_end_0) )
      {
        v18 = __gnu_cxx::__normal_iterator<data::QuestExcelConfig const**,std::vector<data::QuestExcelConfig const*>>::operator*(&__for_begin_0);
        if ( *(_BYTE *)(((unsigned __int64)v18 >> 3) + 0x7FFF8000) )
          v18 = (const data::QuestExcelConfig **)__asan_report_load8(v18);
        quest_config_ptr = *v18;
        v19 = is_notify;
        if ( *(_BYTE *)(((unsigned __int64)&quest_config_ptr->sub_id >> 3) + 0x7FFF8000) != 0
          && *(_BYTE *)(((unsigned __int64)&quest_config_ptr->sub_id >> 3) + 0x7FFF8000) <= 3 )
        {
          __asan_report_load4(&quest_config_ptr->sub_id);
        }
        PlayerQuestComp::forceAcceptQuestByGM(this, quest_config_ptr->sub_id, v19);
        *(std::vector<data::QuestExec>::const_iterator *)(v3 + 64) = std::vector<data::QuestExec>::end(&quest_config_ptr->finish_exec);
        v20 = std::vector<data::QuestExec>::end(&quest_config_ptr->finish_exec)._M_current;
        v21._M_current = std::vector<data::QuestExec>::begin(&quest_config_ptr->finish_exec)._M_current;
        __for_end._M_current = (const unsigned int *)std::find_if<__gnu_cxx::__normal_iterator<data::QuestExec const*,std::vector<data::QuestExec>>,PlayerQuestComp::forceAcceptAndFinishParentQuestByGM(unsigned int,bool)::{lambda(__gnu_cxx::__normal_iterator<data::QuestExec const*,std::vector<data::QuestExec>> const&)#2}>(
                                                       v21,
                                                       (__gnu_cxx::__normal_iterator<const data::QuestExec*,std::vector<data::QuestExec> >)v20,
                                                       v22)._M_current;
        if ( !__gnu_cxx::operator!=<data::QuestExec const*,std::vector<data::QuestExec>>(
                (const __gnu_cxx::__normal_iterator<const data::QuestExec*,std::vector<data::QuestExec> > *)&__for_end,
                (const __gnu_cxx::__normal_iterator<const data::QuestExec*,std::vector<data::QuestExec> > *)(v3 + 64)) )
        {
          v23 = is_notify;
          if ( *(_BYTE *)(((unsigned __int64)&quest_config_ptr->sub_id >> 3) + 0x7FFF8000) != 0
            && *(_BYTE *)(((unsigned __int64)&quest_config_ptr->sub_id >> 3) + 0x7FFF8000) <= 3 )
          {
            __asan_report_load4(&quest_config_ptr->sub_id);
          }
          if ( (unsigned int)PlayerQuestComp::forceFinishQuestByGM(this, quest_config_ptr->sub_id, v23) )
          {
            common::milog::MiLogStream::create(
              &v38,
              &common::milog::MiLogDefault::default_log_obj_,
              1u,
              "./src/player/quest/player_quest_comp.cpp",
              "forceAcceptAndFinishParentQuestByGM",
              2566);
            v24 = common::milog::MiLogStream::operator<<<char [35],(char *[35])0>(
                    &v38,
                    (const char (*)[35])"forceFinishQuest failed, quest_id:");
            common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v24, &quest_config_ptr->sub_id);
            common::milog::MiLogStream::~MiLogStream(&v38);
          }
          else
          {
            if ( *(_BYTE *)(((unsigned __int64)&quest_config_ptr->main_id >> 3) + 0x7FFF8000) != 0
              && (char)((((_BYTE)quest_config_ptr + 12) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&quest_config_ptr->main_id >> 3)
                                                                              + 0x7FFF8000) )
            {
              __asan_report_load4(&quest_config_ptr->main_id);
            }
            PlayerQuestComp::findParentQuest(
              (const PlayerQuestComp *const)(v3 + 128),
              (__int64)this,
              quest_config_ptr->main_id);
            v26 = 0;
            if ( std::operator!=<ParentQuest>((const std::shared_ptr<ParentQuest> *)(v3 + 128), 0LL) )
            {
              v25 = std::__shared_ptr_access<ParentQuest,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<ParentQuest,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 128));
              if ( ParentQuest::getTotalFinishCount(v25) )
                v26 = 1;
            }
            v27 = !v26;
            std::shared_ptr<ParentQuest>::~shared_ptr((std::shared_ptr<ParentQuest> *const)(v3 + 128));
            if ( !v27 )
              break;
          }
        }
        __gnu_cxx::__normal_iterator<data::QuestExcelConfig const**,std::vector<data::QuestExcelConfig const*>>::operator++(&__for_begin_0);
      }
      v7 = 0;
LABEL_37:
      std::vector<data::QuestExcelConfig const*>::~vector((std::vector<const data::QuestExcelConfig*> *const)(v3 + 160));
    }
    else
    {
      common::milog::MiLogStream::create(
        &v38,
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/player/quest/player_quest_comp.cpp",
        "forceAcceptAndFinishParentQuestByGM",
        2535);
      v8 = common::milog::MiLogStream::operator<<<char [57],(char *[57])0>(
             &v38,
             (const char (*)[57])"findPlayerParentQuestExcelConfig fails, parent_quest_id:");
      common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v8, (const unsigned int *)(v3 + 48));
      common::milog::MiLogStream::~MiLogStream(&v38);
      v7 = -1;
    }
  }
  std::shared_ptr<ParentQuest>::~shared_ptr((std::shared_ptr<ParentQuest> *const)(v3 + 96));
  result = v7;
  if ( v39 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8010) = 0LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8018) = 0;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8018) = -168430091;
  }
  return result;
};

// Line 2552: range 0000000013EA0808-0000000013EA08DC
bool __cdecl PlayerQuestComp::forceAcceptAndFinishParentQuestByGM::_lambda_const_auto_29___const_auto_30___::operator()_const_data::QuestExcelConfig__const_data::QuestExcelConfig__(
        const PlayerQuestComp::forceAcceptAndFinishParentQuestByGM::<lambda(const auto:29&, const auto:30&)> *const __closure,
        const data::QuestExcelConfig *const *a,
        const data::QuestExcelConfig *const *b)
{
  const data::QuestExcelConfig *v3; // rax
  char v4; // dl
  int32_t order; // esi
  const data::QuestExcelConfig *v6; // rax
  char v7; // dl

  if ( *(_BYTE *)(((unsigned __int64)a >> 3) + 0x7FFF8000) )
    __asan_report_load8(a);
  v3 = *a;
  v4 = *(_BYTE *)(((unsigned __int64)&(*a)->order >> 3) + 0x7FFF8000);
  if ( v4 != 0 && v4 <= 3 )
    v3 = (const data::QuestExcelConfig *)__asan_report_load4(&(*a)->order);
  order = v3->order;
  if ( *(_BYTE *)(((unsigned __int64)b >> 3) + 0x7FFF8000) )
    __asan_report_load8(b);
  v6 = *b;
  v7 = *(_BYTE *)(((unsigned __int64)&(*b)->order >> 3) + 0x7FFF8000);
  if ( v7 != 0 && v7 <= 3 )
    v6 = (const data::QuestExcelConfig *)__asan_report_load4(&(*b)->order);
  return order < v6->order;
};

// Line 2559: range 0000000013E9DA4A-0000000013E9DA9B
bool __cdecl PlayerQuestComp::forceAcceptAndFinishParentQuestByGM::_lambda_const_auto_31___::operator()_data::QuestExec_(
        const PlayerQuestComp::forceAcceptAndFinishParentQuestByGM::<lambda(const auto:31&)> *const __closure,
        const data::QuestExec *exec)
{
  if ( *(_BYTE *)(((unsigned __int64)&exec->type >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&exec->type >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4(&exec->type);
  }
  return exec->type == QUEST_EXEC_ROLLBACK_QUEST;
};

// Line 2582: range 0000000013DE2D52-0000000013DE2F88
int32_t __cdecl PlayerQuestComp::dumpParentQuestStateByGM(PlayerQuestComp *const this)
{
  common::milog::MiLogStream *v1; // rax
  common::milog::MiLogStream *v2; // rax
  common::milog::MiLogStream *v3; // rax
  common::milog::MiLogStream *v4; // rax
  std::unordered_map<unsigned int,data::MainQuestExcelConfig>::const_iterator __for_begin; // [rsp+10h] [rbp-70h] BYREF
  std::unordered_map<unsigned int,data::MainQuestExcelConfig>::const_iterator __for_end; // [rsp+18h] [rbp-68h] BYREF
  const std::unordered_map<unsigned int,data::MainQuestExcelConfig> *__for_range; // [rsp+20h] [rbp-60h]
  const std::pair<unsigned int const,data::MainQuestExcelConfig> *v9; // [rsp+28h] [rbp-58h]
  std::tuple_element<0,const std::pair<unsigned int const,data::MainQuestExcelConfig> >::type *parent_quest_id; // [rsp+30h] [rbp-50h]
  std::tuple_element<1,const std::pair<unsigned int const,data::MainQuestExcelConfig> >::type *parent_quest_config; // [rsp+38h] [rbp-48h]
  std::shared_ptr<Config> v12; // [rsp+40h] [rbp-40h] BYREF
  common::milog::MiLogStream v13; // [rsp+50h] [rbp-30h] BYREF

  ServiceBox::findService<GameserverService>();
  GameserverService::getConfig((GameserverService *const)&v12);
  __for_range = &std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false> *const)&v12)->design_config.txt_config_mgr.quest_config_mgr.main_quest_excel_config_map;
  std::shared_ptr<Config>::~shared_ptr(&v12);
  __for_begin._M_cur = std::unordered_map<unsigned int,data::MainQuestExcelConfig>::begin(__for_range)._M_cur;
  __for_end._M_cur = std::unordered_map<unsigned int,data::MainQuestExcelConfig>::end(__for_range)._M_cur;
  while ( std::__detail::operator!=<std::pair<unsigned int const,data::MainQuestExcelConfig>,false>(
            &__for_begin,
            &__for_end) )
  {
    v9 = std::__detail::_Node_const_iterator<std::pair<unsigned int const,data::MainQuestExcelConfig>,false,false>::operator*(&__for_begin);
    parent_quest_id = std::get<0ul,unsigned int const,data::MainQuestExcelConfig>(v9);
    parent_quest_config = (std::tuple_element<1,const std::pair<unsigned int const,data::MainQuestExcelConfig> >::type *)std::get<1ul,unsigned int const,data::MainQuestExcelConfig>(v9);
    if ( *(_BYTE *)(((unsigned __int64)parent_quest_id >> 3) + 0x7FFF8000) != 0
      && (char)(((unsigned __int8)parent_quest_id & 7) + 3) >= *(_BYTE *)(((unsigned __int64)parent_quest_id >> 3)
                                                                        + 0x7FFF8000) )
    {
      __asan_report_load4(parent_quest_id);
    }
    if ( PlayerQuestComp::isParentQuestOnceFinished(this, *parent_quest_id) )
    {
      common::milog::MiLogStream::create(
        &v13,
        &common::milog::MiLogDefault::default_log_obj_,
        1u,
        "./src/player/quest/player_quest_comp.cpp",
        "dumpParentQuestStateByGM",
        2587);
      v1 = common::milog::MiLogStream::operator<<<char [26],(char *[26])0>(
             &v13,
             (const char (*)[26])"[QUEST] parent_quest_id: ");
      v2 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v1, parent_quest_id);
      common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(v2, (const char (*)[16])", state: FINISH");
    }
    else
    {
      common::milog::MiLogStream::create(
        &v13,
        &common::milog::MiLogDefault::default_log_obj_,
        1u,
        "./src/player/quest/player_quest_comp.cpp",
        "dumpParentQuestStateByGM",
        2591);
      v3 = common::milog::MiLogStream::operator<<<char [26],(char *[26])0>(
             &v13,
             (const char (*)[26])"[QUEST] parent_quest_id: ");
      v4 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v3, parent_quest_id);
      common::milog::MiLogStream::operator<<<char [20],(char *[20])0>(v4, (const char (*)[20])", state: NOT FINISH");
    }
    common::milog::MiLogStream::~MiLogStream(&v13);
    std::__detail::_Node_const_iterator<std::pair<unsigned int const,data::MainQuestExcelConfig>,false,false>::operator++(&__for_begin);
  }
  return 0;
};

// Line 2598: range 0000000013DE3B5A-0000000013DE41C2
__int64 __fastcall PlayerQuestComp::forceAcceptAndFinishParentQuestInResCollectionByGM(
        PlayerQuestComp *const this,
        uint32_t res_collection_id,
        bool is_notify)
{
  unsigned __int64 v3; // r12
  __int64 v4; // rax
  _DWORD *v5; // r13
  common::milog::MiLogStream *v6; // rax
  common::milog::MiLogStream *v7; // rax
  common::milog::MiLogStream *v8; // rax
  common::milog::MiLogStream *v9; // rax
  __int64 result; // rax
  std::unordered_map<unsigned int,data::QuestResCollectionExcelConfig>::const_iterator __for_begin; // [rsp+20h] [rbp-100h] BYREF
  std::unordered_map<unsigned int,data::QuestResCollectionExcelConfig>::const_iterator __for_end; // [rsp+28h] [rbp-F8h] BYREF
  const std::unordered_map<unsigned int,data::QuestResCollectionExcelConfig> *__for_range; // [rsp+30h] [rbp-F0h]
  const std::pair<unsigned int const,data::QuestResCollectionExcelConfig> *v15; // [rsp+38h] [rbp-E8h]
  std::tuple_element<0,const std::pair<unsigned int const,data::QuestResCollectionExcelConfig> >::type *quest_res_id; // [rsp+40h] [rbp-E0h]
  std::tuple_element<1,const std::pair<unsigned int const,data::QuestResCollectionExcelConfig> >::type *quest_res_collection_config; // [rsp+48h] [rbp-D8h]
  std::shared_ptr<Config> v18; // [rsp+50h] [rbp-D0h] BYREF
  common::milog::MiLogStream v19; // [rsp+60h] [rbp-C0h] BYREF
  char v20[160]; // [rsp+80h] [rbp-A0h] BYREF

  v3 = (unsigned __int64)v20;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_1(128LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "3 48 4 22 res_collection_id:2597 64 8 40 accpet_and_finish_parent_quest_func:2602 96 16 46 finis"
                        "h_all_parent_quest_in_res_collection:2665";
  *(_QWORD *)(v3 + 16) = PlayerQuestComp::forceAcceptAndFinishParentQuestInResCollectionByGM;
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = -234556943;
  v5[536862722] = -218959360;
  v5[536862723] = -202178560;
  *(_DWORD *)(v3 + 48) = res_collection_id;
  *(_QWORD *)(v3 + 64) = this;
  *(_QWORD *)(v3 + 96) = this;
  *(_QWORD *)(v3 + 104) = *(_QWORD *)(v3 + 64);
  if ( *(_DWORD *)(v3 + 48) )
  {
    PlayerQuestComp::forceAcceptAndFinishParentQuestInResCollectionByGM(unsigned int,bool)::{lambda(unsigned int,bool)#2}::operator()(
      (const PlayerQuestComp::forceAcceptAndFinishParentQuestInResCollectionByGM::<lambda(uint32_t, bool)>_0 *const)(v3 + 96),
      *(_DWORD *)(v3 + 48),
      is_notify);
    if ( !PlayerQuestComp::isQuestResCollectionFinished(this, *(_DWORD *)(v3 + 48)) )
    {
      common::milog::MiLogStream::create(
        &v19,
        &common::milog::MiLogDefault::default_log_obj_,
        4u,
        "./src/player/quest/player_quest_comp.cpp",
        "forceAcceptAndFinishParentQuestInResCollectionByGM",
        2705);
      v6 = common::milog::MiLogStream::operator<<<char [39],(char *[39])0>(
             &v19,
             (const char (*)[39])"[QUEST] not finish res_collection_id: ");
    }
    else
    {
      common::milog::MiLogStream::create(
        &v19,
        &common::milog::MiLogDefault::default_log_obj_,
        1u,
        "./src/player/quest/player_quest_comp.cpp",
        "forceAcceptAndFinishParentQuestInResCollectionByGM",
        2709);
      v6 = common::milog::MiLogStream::operator<<<char [35],(char *[35])0>(
             &v19,
             (const char (*)[35])"[QUEST] finish res_collection_id: ");
    }
    common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v6, (const unsigned int *)(v3 + 48));
    common::milog::MiLogStream::~MiLogStream(&v19);
  }
  else
  {
    ServiceBox::findService<GameserverService>();
    GameserverService::getConfig((GameserverService *const)&v18);
    __for_range = &std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false> *const)&v18)->design_config.txt_config_mgr.quest_config_mgr.quest_res_collection_excel_config_map;
    std::shared_ptr<Config>::~shared_ptr(&v18);
    __for_begin._M_cur = std::unordered_map<unsigned int,data::QuestResCollectionExcelConfig>::begin(__for_range)._M_cur;
    __for_end._M_cur = std::unordered_map<unsigned int,data::QuestResCollectionExcelConfig>::end(__for_range)._M_cur;
    while ( std::__detail::operator!=<std::pair<unsigned int const,data::QuestResCollectionExcelConfig>,false>(
              &__for_begin,
              &__for_end) )
    {
      v15 = std::__detail::_Node_const_iterator<std::pair<unsigned int const,data::QuestResCollectionExcelConfig>,false,false>::operator*(&__for_begin);
      quest_res_id = std::get<0ul,unsigned int const,data::QuestResCollectionExcelConfig>(v15);
      quest_res_collection_config = (std::tuple_element<1,const std::pair<unsigned int const,data::QuestResCollectionExcelConfig> >::type *)std::get<1ul,unsigned int const,data::QuestResCollectionExcelConfig>(v15);
      common::milog::MiLogStream::create(
        &v19,
        &common::milog::MiLogDefault::default_log_obj_,
        1u,
        "./src/player/quest/player_quest_comp.cpp",
        "forceAcceptAndFinishParentQuestInResCollectionByGM",
        2716);
      v7 = common::milog::MiLogStream::operator<<<char [23],(char *[23])0>(
             &v19,
             (const char (*)[23])"[QUEST] quest_res_id: ");
      common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v7, quest_res_id);
      common::milog::MiLogStream::~MiLogStream(&v19);
      if ( *(_BYTE *)(((unsigned __int64)quest_res_id >> 3) + 0x7FFF8000) != 0
        && (char)(((unsigned __int8)quest_res_id & 7) + 3) >= *(_BYTE *)(((unsigned __int64)quest_res_id >> 3)
                                                                       + 0x7FFF8000) )
      {
        __asan_report_load4(quest_res_id);
      }
      if ( PlayerQuestComp::forceAcceptAndFinishParentQuestInResCollectionByGM(unsigned int,bool)::{lambda(unsigned int,bool)#2}::operator()(
             (const PlayerQuestComp::forceAcceptAndFinishParentQuestInResCollectionByGM::<lambda(uint32_t, bool)>_0 *const)(v3 + 96),
             *quest_res_id,
             is_notify) )
      {
        common::milog::MiLogStream::create(
          &v19,
          &common::milog::MiLogDefault::default_log_obj_,
          3u,
          "./src/player/quest/player_quest_comp.cpp",
          "forceAcceptAndFinishParentQuestInResCollectionByGM",
          2720);
        v8 = common::milog::MiLogStream::operator<<<char [72],(char *[72])0>(
               &v19,
               (const char (*)[72])"[QUEST] finish_all_parent_quest_in_res_collection failed. quest_res_id:");
        common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v8, quest_res_id);
        common::milog::MiLogStream::~MiLogStream(&v19);
      }
      if ( *(_BYTE *)(((unsigned __int64)quest_res_id >> 3) + 0x7FFF8000) != 0
        && (char)(((unsigned __int8)quest_res_id & 7) + 3) >= *(_BYTE *)(((unsigned __int64)quest_res_id >> 3)
                                                                       + 0x7FFF8000) )
      {
        __asan_report_load4(quest_res_id);
      }
      if ( !PlayerQuestComp::isQuestResCollectionFinished(this, *quest_res_id) )
      {
        common::milog::MiLogStream::create(
          &v19,
          &common::milog::MiLogDefault::default_log_obj_,
          4u,
          "./src/player/quest/player_quest_comp.cpp",
          "forceAcceptAndFinishParentQuestInResCollectionByGM",
          2725);
        v9 = common::milog::MiLogStream::operator<<<char [39],(char *[39])0>(
               &v19,
               (const char (*)[39])"[QUEST] not finish res_collection_id: ");
      }
      else
      {
        common::milog::MiLogStream::create(
          &v19,
          &common::milog::MiLogDefault::default_log_obj_,
          1u,
          "./src/player/quest/player_quest_comp.cpp",
          "forceAcceptAndFinishParentQuestInResCollectionByGM",
          2729);
        v9 = common::milog::MiLogStream::operator<<<char [35],(char *[35])0>(
               &v19,
               (const char (*)[35])"[QUEST] finish res_collection_id: ");
      }
      common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v9, quest_res_id);
      common::milog::MiLogStream::~MiLogStream(&v19);
      std::__detail::_Node_const_iterator<std::pair<unsigned int const,data::QuestResCollectionExcelConfig>,false,false>::operator++(&__for_begin);
    }
  }
  result = 0LL;
  if ( v20 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 2602: range 0000000013DE2F8A-0000000013DE3672
__int64 __fastcall PlayerQuestComp::forceAcceptAndFinishParentQuestInResCollectionByGM(unsigned int,bool)::{lambda(unsigned int,bool)#1}::operator()(
        unsigned __int64 __closure,
        uint32_t parent_quest_id,
        bool is_notify)
{
  unsigned int v3; // r14d
  unsigned __int64 v4; // r12
  __int64 v5; // rax
  _DWORD *v6; // r13
  common::milog::MiLogStream *v7; // rax
  common::milog::MiLogStream *v8; // rax
  common::milog::MiLogStream *v9; // rax
  __gnu_cxx::__normal_iterator<unsigned int const*,std::vector<unsigned int> >::reference v10; // rax
  _DWORD *v11; // rdx
  std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v12; // rax
  bool v13; // r15
  common::milog::MiLogStream *v14; // rax
  common::milog::MiLogStream *v15; // rax
  common::milog::MiLogStream *v16; // rax
  common::milog::MiLogStream *v17; // rax
  int v18; // r15d
  ParentQuest *v19; // rax
  __int64 result; // rax
  std::vector<unsigned int>::const_iterator __for_begin; // [rsp+30h] [rbp-E0h] BYREF
  std::vector<unsigned int>::const_iterator __for_end; // [rsp+38h] [rbp-D8h] BYREF
  const data::MainQuestExcelConfig *parent_quest_config_ptr; // [rsp+40h] [rbp-D0h]
  const std::vector<unsigned int> *__for_range; // [rsp+48h] [rbp-C8h]
  std::shared_ptr<Config> v26; // [rsp+50h] [rbp-C0h] BYREF
  common::milog::MiLogStream v27; // [rsp+60h] [rbp-B0h] BYREF
  char v28[144]; // [rsp+80h] [rbp-90h] BYREF

  v4 = (unsigned __int64)v28;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v5 = __asan_stack_malloc_1(96LL);
    if ( v5 )
      v4 = v5;
  }
  *(_QWORD *)v4 = 1102416563LL;
  *(_QWORD *)(v4 + 8) = "3 32 4 19 child_quest_id:2627 48 4 20 parent_quest_id:2602 64 16 21 parent_quest_ptr:2642";
  *(_QWORD *)(v4 + 16) = PlayerQuestComp::forceAcceptAndFinishParentQuestInResCollectionByGM(unsigned int,bool)::{lambda(unsigned int,bool)#1}::operator();
  v6 = (_DWORD *)(v4 >> 3);
  v6[536862720] = -235802127;
  v6[536862721] = -234556924;
  v6[536862722] = -202178560;
  *(_DWORD *)(v4 + 48) = parent_quest_id;
  if ( *(_BYTE *)((__closure >> 3) + 0x7FFF8000) )
    __asan_report_load8(__closure);
  if ( PlayerQuestComp::forceClearParentQuestByGM(*(PlayerQuestComp *const *)__closure, *(_DWORD *)(v4 + 48), is_notify) )
  {
    common::milog::MiLogStream::create(
      &v27,
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/player/quest/player_quest_comp.cpp",
      "operator()",
      2610);
    v7 = common::milog::MiLogStream::operator<<<char [58],(char *[58])0>(
           &v27,
           (const char (*)[58])"[QUEST] forceClearParentQuestByGM fails, parent_quest_id:");
    common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v7, (const unsigned int *)(v4 + 48));
    common::milog::MiLogStream::~MiLogStream(&v27);
  }
  if ( *(_BYTE *)((__closure >> 3) + 0x7FFF8000) )
    __asan_report_load8(__closure);
  parent_quest_config_ptr = PlayerQuestComp::findPlayerParentQuestExcelConfig(
                              *(const PlayerQuestComp *const *)__closure,
                              *(_DWORD *)(v4 + 48));
  if ( parent_quest_config_ptr )
  {
    if ( std::vector<unsigned int>::empty(&parent_quest_config_ptr->child_quest_list) )
    {
      common::milog::MiLogStream::create(
        &v27,
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/player/quest/player_quest_comp.cpp",
        "operator()",
        2623);
      v9 = common::milog::MiLogStream::operator<<<char [58],(char *[58])0>(
             &v27,
             (const char (*)[58])"[QUEST] child_quest_list is empty fails. parent_quest_id:");
      common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v9, (const unsigned int *)(v4 + 48));
      common::milog::MiLogStream::~MiLogStream(&v27);
      v3 = -1;
    }
    else
    {
      __for_range = &parent_quest_config_ptr->child_quest_list;
      __for_begin._M_current = std::vector<unsigned int>::begin(&parent_quest_config_ptr->child_quest_list)._M_current;
      __for_end._M_current = std::vector<unsigned int>::end(&parent_quest_config_ptr->child_quest_list)._M_current;
      while ( 1 )
      {
        if ( !__gnu_cxx::operator!=<unsigned int const*,std::vector<unsigned int>>(&__for_begin, &__for_end) )
          goto LABEL_30;
        v10 = __gnu_cxx::__normal_iterator<unsigned int const*,std::vector<unsigned int>>::operator*(&__for_begin);
        v11 = v10;
        if ( *(_BYTE *)(((unsigned __int64)v10 >> 3) + 0x7FFF8000) != 0
          && (char)(((unsigned __int8)v10 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)v10 >> 3) + 0x7FFF8000) )
        {
          __asan_report_load4(v10);
        }
        *(_DWORD *)(v4 + 32) = *v11;
        ServiceBox::findService<GameserverService>();
        GameserverService::getConfig((GameserverService *const)&v26);
        v12 = std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false> *const)&v26);
        v13 = !QuestExcelConfigMgr::isChildQuestParentEntrance(
                 &v12->design_config.txt_config_mgr.quest_config_mgr,
                 *(_DWORD *)(v4 + 48),
                 *(_DWORD *)(v4 + 32));
        std::shared_ptr<Config>::~shared_ptr(&v26);
        if ( !v13 )
          break;
        __gnu_cxx::__normal_iterator<unsigned int const*,std::vector<unsigned int>>::operator++(&__for_begin);
      }
      if ( *(_BYTE *)((__closure >> 3) + 0x7FFF8000) )
        __asan_report_load8(__closure);
      if ( PlayerQuestComp::forceAcceptQuestByGM(*(PlayerQuestComp *const *)__closure, *(_DWORD *)(v4 + 32), is_notify) )
      {
        common::milog::MiLogStream::create(
          &v27,
          &common::milog::MiLogDefault::default_log_obj_,
          3u,
          "./src/player/quest/player_quest_comp.cpp",
          "operator()",
          2637);
        v14 = common::milog::MiLogStream::operator<<<char [51],(char *[51])0>(
                &v27,
                (const char (*)[51])"[QUEST] accept first quest fails. parent_quest_id:");
        v15 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                v14,
                (const unsigned int *)(v4 + 48));
        v16 = common::milog::MiLogStream::operator<<<char [18],(char *[18])0>(
                v15,
                (const char (*)[18])", first_quest_id:");
        common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v16, (const unsigned int *)(v4 + 32));
        common::milog::MiLogStream::~MiLogStream(&v27);
        v3 = -1;
        goto LABEL_31;
      }
      if ( *(_BYTE *)((__closure >> 3) + 0x7FFF8000) )
        __asan_report_load8(__closure);
      PlayerQuestComp::findParentQuest(
        (const PlayerQuestComp *const)(v4 + 64),
        *(_QWORD *)__closure,
        *(_DWORD *)(v4 + 48));
      if ( std::operator==<ParentQuest>((const std::shared_ptr<ParentQuest> *)(v4 + 64), 0LL) )
      {
        common::milog::MiLogStream::create(
          &v27,
          &common::milog::MiLogDefault::default_log_obj_,
          3u,
          "./src/player/quest/player_quest_comp.cpp",
          "operator()",
          2645);
        v17 = common::milog::MiLogStream::operator<<<char [48],(char *[48])0>(
                &v27,
                (const char (*)[48])"[QUEST] findParentQuest fails. parent_quest_id:");
        common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v17, (const unsigned int *)(v4 + 48));
        common::milog::MiLogStream::~MiLogStream(&v27);
        v3 = -1;
        v18 = 0;
      }
      else
      {
        v19 = std::__shared_ptr_access<ParentQuest,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<ParentQuest,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 64));
        ParentQuest::finish(v19, is_notify);
        v18 = 1;
      }
      std::shared_ptr<ParentQuest>::~shared_ptr((std::shared_ptr<ParentQuest> *const)(v4 + 64));
      if ( v18 )
LABEL_30:
        v3 = 0;
    }
  }
  else
  {
    common::milog::MiLogStream::create(
      &v27,
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/player/quest/player_quest_comp.cpp",
      "operator()",
      2616);
    v8 = common::milog::MiLogStream::operator<<<char [65],(char *[65])0>(
           &v27,
           (const char (*)[65])"[QUEST] findPlayerParentQuestExcelConfig fails, parent_quest_id:");
    common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v8, (const unsigned int *)(v4 + 48));
    common::milog::MiLogStream::~MiLogStream(&v27);
    v3 = -1;
  }
LABEL_31:
  result = v3;
  if ( v28 == (char *)v4 )
  {
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0LL;
    *(_DWORD *)((v4 >> 3) + 0x7FFF8008) = 0;
  }
  else
  {
    *(_QWORD *)v4 = 1172321806LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v4 >> 3) + 0x7FFF8008) = -168430091;
  }
  return result;
};

// Line 2665: range 0000000013DE3674-0000000013DE3B59
__int64 __fastcall PlayerQuestComp::forceAcceptAndFinishParentQuestInResCollectionByGM(unsigned int,bool)::{lambda(unsigned int,bool)#2}::operator()(
        unsigned __int64 __closure,
        uint32_t res_collection_id,
        bool is_notify)
{
  unsigned __int64 v3; // rbx
  __int64 v4; // rax
  _DWORD *v5; // r13
  std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v6; // rax
  common::milog::MiLogStream *v7; // rax
  __int64 result; // rax
  std::_Rb_tree_const_iterator<unsigned int>::reference v9; // rax
  _DWORD *v10; // rdx
  common::milog::MiLogStream *v11; // rax
  common::milog::MiLogStream *v12; // rax
  std::set<unsigned int>::iterator __for_begin; // [rsp+20h] [rbp-D0h] BYREF
  std::set<unsigned int>::iterator __for_end; // [rsp+28h] [rbp-C8h] BYREF
  const std::set<unsigned int> *parent_quest_id_set_ptr; // [rsp+30h] [rbp-C0h]
  const std::set<unsigned int> *__for_range; // [rsp+38h] [rbp-B8h]
  std::shared_ptr<Config> v18; // [rsp+40h] [rbp-B0h] BYREF
  common::milog::MiLogStream v19; // [rsp+50h] [rbp-A0h] BYREF
  char v20[128]; // [rsp+70h] [rbp-80h] BYREF

  v3 = (unsigned __int64)v20;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_1(96LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "2 48 4 20 parent_quest_id:2677 64 4 22 res_collection_id:2665";
  *(_QWORD *)(v3 + 16) = PlayerQuestComp::forceAcceptAndFinishParentQuestInResCollectionByGM(unsigned int,bool)::{lambda(unsigned int,bool)#2}::operator();
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = -234556943;
  v5[536862722] = -202116348;
  *(_DWORD *)(v3 + 64) = res_collection_id;
  ServiceBox::findService<GameserverService>();
  GameserverService::getConfig((GameserverService *const)&v18);
  v6 = std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false> *const)&v18);
  parent_quest_id_set_ptr = QuestExcelConfigMgr::findParentQuestIdSetByResCollection(
                              &v6->design_config.txt_config_mgr.quest_config_mgr,
                              *(_DWORD *)(v3 + 64));
  std::shared_ptr<Config>::~shared_ptr(&v18);
  if ( parent_quest_id_set_ptr )
  {
    __for_range = parent_quest_id_set_ptr;
    __for_begin._M_node = std::set<unsigned int>::begin(parent_quest_id_set_ptr)._M_node;
    __for_end._M_node = std::set<unsigned int>::end(parent_quest_id_set_ptr)._M_node;
    while ( std::operator!=(&__for_begin, &__for_end) )
    {
      v9 = std::_Rb_tree_const_iterator<unsigned int>::operator*(&__for_begin);
      v10 = v9;
      if ( *(_BYTE *)(((unsigned __int64)v9 >> 3) + 0x7FFF8000) != 0
        && (char)(((unsigned __int8)v9 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)v9 >> 3) + 0x7FFF8000) )
      {
        __asan_report_load4(v9);
      }
      *(_DWORD *)(v3 + 48) = *v10;
      if ( (unsigned int)PlayerQuestComp::forceAcceptAndFinishParentQuestInResCollectionByGM(unsigned int,bool)::{lambda(unsigned int,bool)#1}::operator()(
                           __closure + 8,
                           *(_DWORD *)(v3 + 48),
                           is_notify) )
      {
        common::milog::MiLogStream::create(
          &v19,
          &common::milog::MiLogDefault::default_log_obj_,
          3u,
          "./src/player/quest/player_quest_comp.cpp",
          "operator()",
          2682);
        v11 = common::milog::MiLogStream::operator<<<char [69],(char *[69])0>(
                &v19,
                (const char (*)[69])"[QUEST] accpet_and_finish_parent_quest_func failed. parent_quest_id:");
        common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v11, (const unsigned int *)(v3 + 48));
        common::milog::MiLogStream::~MiLogStream(&v19);
      }
      if ( *(_BYTE *)((__closure >> 3) + 0x7FFF8000) )
        __asan_report_load8(__closure);
      if ( !PlayerQuestComp::isParentQuestOnceFinished(*(const PlayerQuestComp *const *)__closure, *(_DWORD *)(v3 + 48)) )
      {
        common::milog::MiLogStream::create(
          &v19,
          &common::milog::MiLogDefault::default_log_obj_,
          4u,
          "./src/player/quest/player_quest_comp.cpp",
          "operator()",
          2689);
        v12 = common::milog::MiLogStream::operator<<<char [37],(char *[37])0>(
                &v19,
                (const char (*)[37])"[QUEST] not finish parent_quest_id: ");
      }
      else
      {
        common::milog::MiLogStream::create(
          &v19,
          &common::milog::MiLogDefault::default_log_obj_,
          1u,
          "./src/player/quest/player_quest_comp.cpp",
          "operator()",
          2693);
        v12 = common::milog::MiLogStream::operator<<<char [33],(char *[33])0>(
                &v19,
                (const char (*)[33])"[QUEST] finish parent_quest_id: ");
      }
      common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v12, (const unsigned int *)(v3 + 48));
      common::milog::MiLogStream::~MiLogStream(&v19);
      std::_Rb_tree_const_iterator<unsigned int>::operator++(&__for_begin);
    }
    result = 0LL;
  }
  else
  {
    common::milog::MiLogStream::create(
      &v19,
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/player/quest/player_quest_comp.cpp",
      "operator()",
      2672);
    v7 = common::milog::MiLogStream::operator<<<char [35],(char *[35])0>(
           &v19,
           (const char (*)[35])"[QUEST] Invalid res_collection_id:");
    common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v7, (const unsigned int *)(v3 + 64));
    common::milog::MiLogStream::~MiLogStream(&v19);
    result = 0xFFFFFFFFLL;
  }
  if ( v20 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8008) = 0;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8008) = -168430091;
  }
  return result;
};

// Line 2737: range 0000000013DE41C4-0000000013DE46C1
__int64 __fastcall PlayerQuestComp::forceClearParentQuestByGM(
        PlayerQuestComp *const this,
        uint32_t parent_quest_id,
        bool is_notify)
{
  unsigned __int64 v3; // r12
  __int64 v4; // rax
  _DWORD *v5; // r13
  common::milog::MiLogStream *v6; // rax
  unsigned int v7; // r14d
  common::milog::MiLogStream *v8; // r14
  __gnu_cxx::__normal_iterator<unsigned int const*,std::vector<unsigned int> >::reference v9; // rax
  _DWORD *v10; // rdx
  common::milog::MiLogStream *v11; // rax
  common::milog::MiLogStream *v12; // rax
  ParentQuest *v13; // rax
  __int64 result; // rax
  std::vector<unsigned int>::const_iterator __for_begin; // [rsp+10h] [rbp-D0h] BYREF
  std::vector<unsigned int>::const_iterator __for_end; // [rsp+18h] [rbp-C8h] BYREF
  const data::MainQuestExcelConfig *parent_quest_config_ptr; // [rsp+20h] [rbp-C0h]
  const std::vector<unsigned int> *__for_range; // [rsp+28h] [rbp-B8h]
  common::milog::MiLogStream v20; // [rsp+30h] [rbp-B0h] BYREF
  char v21[144]; // [rsp+50h] [rbp-90h] BYREF

  v3 = (unsigned __int64)v21;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_1(96LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "3 32 4 13 quest_id:2746 48 4 20 parent_quest_id:2736 64 16 21 parent_quest_ptr:2752";
  *(_QWORD *)(v3 + 16) = PlayerQuestComp::forceClearParentQuestByGM;
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = -234556924;
  v5[536862722] = -202178560;
  *(_DWORD *)(v3 + 48) = parent_quest_id;
  parent_quest_config_ptr = PlayerQuestComp::findPlayerParentQuestExcelConfig(this, *(_DWORD *)(v3 + 48));
  if ( parent_quest_config_ptr )
  {
    common::milog::MiLogStream::create(
      &v20,
      &common::milog::MiLogDefault::default_log_obj_,
      1u,
      "./src/player/quest/player_quest_comp.cpp",
      "forceClearParentQuestByGM",
      2745);
    v8 = common::milog::MiLogStream::operator<<<char [28],(char *[28])0>(
           &v20,
           (const char (*)[28])"child_quest_list.size() == ");
    __for_end._M_current = (const unsigned int *)std::vector<unsigned int>::size(&parent_quest_config_ptr->child_quest_list);
    common::milog::MiLogStream::operator<<<unsigned long,(unsigned long *)0>(v8, (const unsigned __int64 *)&__for_end);
    common::milog::MiLogStream::~MiLogStream(&v20);
    __for_range = &parent_quest_config_ptr->child_quest_list;
    __for_begin._M_current = std::vector<unsigned int>::begin(&parent_quest_config_ptr->child_quest_list)._M_current;
    __for_end._M_current = std::vector<unsigned int>::end(__for_range)._M_current;
    while ( __gnu_cxx::operator!=<unsigned int const*,std::vector<unsigned int>>(&__for_begin, &__for_end) )
    {
      v9 = __gnu_cxx::__normal_iterator<unsigned int const*,std::vector<unsigned int>>::operator*(&__for_begin);
      v10 = v9;
      if ( *(_BYTE *)(((unsigned __int64)v9 >> 3) + 0x7FFF8000) != 0
        && (char)(((unsigned __int8)v9 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)v9 >> 3) + 0x7FFF8000) )
      {
        __asan_report_load4(v9);
      }
      *(_DWORD *)(v3 + 32) = *v10;
      common::milog::MiLogStream::create(
        &v20,
        &common::milog::MiLogDefault::default_log_obj_,
        1u,
        "./src/player/quest/player_quest_comp.cpp",
        "forceClearParentQuestByGM",
        2748);
      v11 = common::milog::MiLogStream::operator<<<char [21],(char *[21])0>(
              &v20,
              (const char (*)[21])"remove child quest: ");
      common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v11, (const unsigned int *)(v3 + 32));
      common::milog::MiLogStream::~MiLogStream(&v20);
      PlayerQuestComp::removeQuest(this, *(_DWORD *)(v3 + 32), 3u, is_notify);
      __gnu_cxx::__normal_iterator<unsigned int const*,std::vector<unsigned int>>::operator++(&__for_begin);
    }
    PlayerQuestComp::findParentQuest((const PlayerQuestComp *const)(v3 + 64), (__int64)this, *(_DWORD *)(v3 + 48));
    if ( std::operator!=<ParentQuest>((const std::shared_ptr<ParentQuest> *)(v3 + 64), 0LL) )
    {
      common::milog::MiLogStream::create(
        &v20,
        &common::milog::MiLogDefault::default_log_obj_,
        1u,
        "./src/player/quest/player_quest_comp.cpp",
        "forceClearParentQuestByGM",
        2755);
      v12 = common::milog::MiLogStream::operator<<<char [26],(char *[26])0>(
              &v20,
              (const char (*)[26])"clear Child Quest State: ");
      common::milog::MiLogStream::operator<<(v12, is_notify);
      common::milog::MiLogStream::~MiLogStream(&v20);
      v13 = std::__shared_ptr_access<ParentQuest,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<ParentQuest,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 64));
      ParentQuest::clearChildQuestState(v13, is_notify);
    }
    PlayerQuestComp::removeParentQuest(this, *(_DWORD *)(v3 + 48), 1);
    PlayerQuestComp::tryAcceptQuestByCond(this, QUEST_COND_NONE, is_notify, 0);
    v7 = 0;
    std::shared_ptr<ParentQuest>::~shared_ptr((std::shared_ptr<ParentQuest> *const)(v3 + 64));
  }
  else
  {
    common::milog::MiLogStream::create(
      &v20,
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/player/quest/player_quest_comp.cpp",
      "forceClearParentQuestByGM",
      2742);
    v6 = common::milog::MiLogStream::operator<<<char [57],(char *[57])0>(
           &v20,
           (const char (*)[57])"findPlayerParentQuestExcelConfig fails, parent_quest_id:");
    common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v6, (const unsigned int *)(v3 + 48));
    common::milog::MiLogStream::~MiLogStream(&v20);
    v7 = -1;
  }
  result = v7;
  if ( v21 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8008) = 0;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8008) = -168430091;
  }
  return result;
};

// Line 2767: range 0000000013DE46C2-0000000013DE4743
int32_t __cdecl PlayerQuestComp::forceClearAllQuestByGM(PlayerQuestComp *const this, bool is_notify)
{
  unsigned __int64 v2; // rax

  PlayerQuestComp::clear(this);
  if ( is_notify )
  {
    if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
      __asan_report_load8(this);
    v2 = (unsigned __int64)(this->_vptr_PlayerCompBase + 10);
    if ( *(_BYTE *)((v2 >> 3) + 0x7FFF8000) )
      v2 = __asan_report_load8(this->_vptr_PlayerCompBase + 10);
    (*(void (__fastcall **)(PlayerQuestComp *const))v2)(this);
  }
  return 0;
};

// Line 2778: range 0000000013DE4744-0000000013DE4A79
int32_t __cdecl PlayerQuestComp::forceClearAllRandomQuestByGM(PlayerQuestComp *const this, bool is_notify)
{
  std::set<unsigned int> *v2; // rbx
  __int64 v3; // rax
  _DWORD *v4; // r12
  unsigned int *v5; // rax
  uint32_t *v6; // rdx
  int32_t result; // eax
  std::map<unsigned int,std::shared_ptr<ParentQuest>>::iterator __for_begin; // [rsp+18h] [rbp-E8h] BYREF
  std::map<unsigned int,std::shared_ptr<ParentQuest>>::iterator __for_end; // [rsp+20h] [rbp-E0h] BYREF
  std::map<unsigned int,std::shared_ptr<ParentQuest>> *__for_range; // [rsp+28h] [rbp-D8h]
  std::set<unsigned int> *__for_range_0; // [rsp+30h] [rbp-D0h]
  const std::pair<unsigned int const,std::shared_ptr<ParentQuest> > *v12; // [rsp+38h] [rbp-C8h]
  std::tuple_element<0,const std::pair<unsigned int const,std::shared_ptr<ParentQuest> > >::type *parent_quest_id; // [rsp+40h] [rbp-C0h]
  std::tuple_element<1,const std::pair<unsigned int const,std::shared_ptr<ParentQuest> > >::type *parent_quest_ptr; // [rsp+48h] [rbp-B8h]
  char v15[176]; // [rsp+50h] [rbp-B0h] BYREF

  v2 = (std::set<unsigned int> *)v15;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_1(128LL);
    if ( v3 )
      v2 = (std::set<unsigned int> *)v3;
  }
  *(_QWORD *)v2->_M_t._M_impl.gap0 = 1102416563LL;
  *(_QWORD *)&v2->_M_t._M_impl._M_header._M_color = "1 48 48 28 random_parent_quest_set:2780";
  v2->_M_t._M_impl._M_header._M_parent = (std::_Rb_tree_node_base::_Base_ptr)PlayerQuestComp::forceClearAllRandomQuestByGM;
  v4 = (_DWORD *)((unsigned __int64)v2 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = 61937;
  v4[536862723] = -202116109;
  std::set<unsigned int>::set(v2 + 1);
  __for_range = &this->parent_quest_map_;
  __for_begin._M_node = std::map<unsigned int,std::shared_ptr<ParentQuest>>::begin(&this->parent_quest_map_)._M_node;
  __for_end._M_node = std::map<unsigned int,std::shared_ptr<ParentQuest>>::end(&this->parent_quest_map_)._M_node;
  while ( std::operator!=(&__for_begin, &__for_end) )
  {
    v12 = std::_Rb_tree_iterator<std::pair<unsigned int const,std::shared_ptr<ParentQuest>>>::operator*(&__for_begin);
    parent_quest_id = std::get<0ul,unsigned int const,std::shared_ptr<ParentQuest>>(v12);
    parent_quest_ptr = (std::tuple_element<1,const std::pair<unsigned int const,std::shared_ptr<ParentQuest> > >::type *)std::get<1ul,unsigned int const,std::shared_ptr<ParentQuest>>(v12);
    if ( *(_BYTE *)(((unsigned __int64)parent_quest_id >> 3) + 0x7FFF8000) != 0
      && (char)(((unsigned __int8)parent_quest_id & 7) + 3) >= *(_BYTE *)(((unsigned __int64)parent_quest_id >> 3)
                                                                        + 0x7FFF8000) )
    {
      __asan_report_load4(parent_quest_id);
    }
    if ( PlayerQuestComp::isRandomParentQuest(this, *parent_quest_id) )
      std::set<unsigned int>::insert(v2 + 1, parent_quest_id);
    std::_Rb_tree_iterator<std::pair<unsigned int const,std::shared_ptr<ParentQuest>>>::operator++(&__for_begin);
  }
  __for_range_0 = v2 + 1;
  __for_begin._M_node = (std::_Rb_tree_iterator<std::pair<unsigned int const,std::shared_ptr<ParentQuest> > >::_Base_ptr)std::set<unsigned int>::begin(v2 + 1)._M_node;
  __for_end._M_node = (std::_Rb_tree_iterator<std::pair<unsigned int const,std::shared_ptr<ParentQuest> > >::_Base_ptr)std::set<unsigned int>::end(__for_range_0)._M_node;
  while ( std::operator!=(
            (const std::_Rb_tree_const_iterator<unsigned int>::_Self *)&__for_begin,
            (const std::_Rb_tree_const_iterator<unsigned int>::_Self *)&__for_end) )
  {
    v5 = (unsigned int *)std::_Rb_tree_const_iterator<unsigned int>::operator*((const std::_Rb_tree_const_iterator<unsigned int> *const)&__for_begin);
    v6 = v5;
    if ( *(_BYTE *)(((unsigned __int64)v5 >> 3) + 0x7FFF8000) != 0
      && (char)(((unsigned __int8)v5 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)v5 >> 3) + 0x7FFF8000) )
    {
      __asan_report_load4(v5);
    }
    PlayerQuestComp::tryFailAndRemoveRandomParentQuest(this, *v6, is_notify);
    std::_Rb_tree_const_iterator<unsigned int>::operator++((std::_Rb_tree_const_iterator<unsigned int> *const)&__for_begin);
  }
  std::set<unsigned int>::~set(v2 + 1);
  result = 0;
  if ( v15 == (char *)v2 )
  {
    *(_QWORD *)(((unsigned __int64)v2 >> 3) + 0x7FFF8000) = 0LL;
    *(_DWORD *)(((unsigned __int64)v2 >> 3) + 0x7FFF800C) = 0;
  }
  else
  {
    *(_QWORD *)v2->_M_t._M_impl.gap0 = 1172321806LL;
    *(_QWORD *)(((unsigned __int64)v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)(((unsigned __int64)v2 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 2798: range 0000000013DE4A7A-0000000013DE4AA4
int32_t __cdecl PlayerQuestComp::forceFailQuestByGM(PlayerQuestComp *const this, uint32_t quest_id, bool is_notify)
{
  return PlayerQuestComp::failQuest(this, quest_id, is_notify);
};

// Line 2803: range 0000000013DE4AA6-0000000013DE4AD0
int32_t __cdecl PlayerQuestComp::forceFailParentQuestByGm(
        PlayerQuestComp *const this,
        uint32_t parent_quest_id,
        bool is_notify)
{
  return PlayerQuestComp::failParentQuest(this, parent_quest_id, is_notify);
};

// Line 2808: range 0000000013DE4AD2-0000000013DE4AFD
int32_t __cdecl PlayerQuestComp::forceCancelParentQuestByGm(
        PlayerQuestComp *const this,
        uint32_t parent_quest_id,
        bool is_notify)
{
  return PlayerQuestComp::cancelParentQuest(this, parent_quest_id, 1);
};

// Line 2813: range 0000000013DE4AFE-0000000013DE4BD4
__int64 __fastcall PlayerQuestComp::forceClearChapterByGM(PlayerQuestComp *const this, uint32_t chapter_id)
{
  unsigned __int64 v2; // rbx
  __int64 v3; // rax
  unsigned __int64 v4; // r12
  __int64 result; // rax
  char v6[96]; // [rsp+10h] [rbp-60h] BYREF

  v2 = (unsigned __int64)v6;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_0(64LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "1 32 4 15 chapter_id:2812";
  *(_QWORD *)(v2 + 16) = PlayerQuestComp::forceClearChapterByGM;
  v4 = v2 >> 3;
  *(_DWORD *)(v4 + 2147450880) = -235802127;
  *(_DWORD *)(v4 + 2147450884) = -202116348;
  *(_DWORD *)(v2 + 32) = chapter_id;
  std::map<unsigned int,Chapter>::erase(
    &this->chapter_map_,
    (const std::map<unsigned int,Chapter>::key_type *)(v2 + 32));
  result = 0LL;
  if ( v6 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 2819: range 0000000013DE4BD6-0000000013DE4BFA
int32_t __cdecl PlayerQuestComp::forceClearAllChapterByGM(PlayerQuestComp *const this)
{
  std::map<unsigned int,Chapter>::clear(&this->chapter_map_);
  return 0;
};

// Line 2826: range 0000000013DE4BFC-0000000013DE4DE0
PlayerQuestComp *__fastcall PlayerQuestComp::createQuest(PlayerQuestComp *const this, uint32_t quest_id, int a3)
{
  unsigned __int64 v3; // rbx
  __int64 v4; // rax
  _DWORD *v5; // r12
  common::milog::MiLogStream v8; // [rsp+20h] [rbp-A0h] BYREF
  char v9[128]; // [rsp+40h] [rbp-80h] BYREF

  v3 = (unsigned __int64)v9;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_1(96LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "2 48 4 13 quest_id:2825 64 16 14 quest_ptr:2827";
  *(_QWORD *)(v3 + 16) = PlayerQuestComp::createQuest;
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = -234556943;
  v5[536862722] = -202178560;
  *(_DWORD *)(v3 + 48) = a3;
  common::tools::perf::make_shared<Quest,unsigned int &>((unsigned int *)(v3 + 64), (unsigned int *)(v3 + 48));
  if ( std::operator==<Quest>((const std::shared_ptr<Quest> *)(v3 + 64), 0LL) )
  {
    common::milog::MiLogStream::create(
      &v8,
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/player/quest/player_quest_comp.cpp",
      "createQuest",
      2830);
    common::milog::MiLogStream::operator<<<char [18],(char *[18])0>(&v8, (const char (*)[18])"quest_ptr is null");
    common::milog::MiLogStream::~MiLogStream(&v8);
    std::shared_ptr<Quest>::shared_ptr((std::shared_ptr<Quest> *const)this, 0LL);
  }
  else
  {
    std::shared_ptr<Quest>::shared_ptr((std::shared_ptr<Quest> *const)this, (std::shared_ptr<Quest> *)(v3 + 64));
  }
  std::shared_ptr<Quest>::~shared_ptr((std::shared_ptr<Quest> *const)(v3 + 64));
  if ( v9 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8008) = 0;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8008) = -168430091;
  }
  return this;
};

// Line 2839: range 0000000013DE4DE2-0000000013DE4FC6
PlayerQuestComp *__fastcall PlayerQuestComp::createParentQuest(
        PlayerQuestComp *const this,
        uint32_t parent_quest_id,
        int a3)
{
  unsigned __int64 v3; // rbx
  __int64 v4; // rax
  _DWORD *v5; // r12
  common::milog::MiLogStream v8; // [rsp+20h] [rbp-A0h] BYREF
  char v9[128]; // [rsp+40h] [rbp-80h] BYREF

  v3 = (unsigned __int64)v9;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_1(96LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "2 48 4 20 parent_quest_id:2838 64 16 21 parent_quest_ptr:2840";
  *(_QWORD *)(v3 + 16) = PlayerQuestComp::createParentQuest;
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = -234556943;
  v5[536862722] = -202178560;
  *(_DWORD *)(v3 + 48) = a3;
  common::tools::perf::make_shared<ParentQuest,unsigned int &>((unsigned int *)(v3 + 64), (unsigned int *)(v3 + 48));
  if ( std::operator==<ParentQuest>((const std::shared_ptr<ParentQuest> *)(v3 + 64), 0LL) )
  {
    common::milog::MiLogStream::create(
      &v8,
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/player/quest/player_quest_comp.cpp",
      "createParentQuest",
      2843);
    common::milog::MiLogStream::operator<<<char [25],(char *[25])0>(&v8, (const char (*)[25])"parent_quest_ptr is null");
    common::milog::MiLogStream::~MiLogStream(&v8);
    std::shared_ptr<ParentQuest>::shared_ptr((std::shared_ptr<ParentQuest> *const)this, 0LL);
  }
  else
  {
    std::shared_ptr<ParentQuest>::shared_ptr(
      (std::shared_ptr<ParentQuest> *const)this,
      (std::shared_ptr<ParentQuest> *)(v3 + 64));
  }
  std::shared_ptr<ParentQuest>::~shared_ptr((std::shared_ptr<ParentQuest> *const)(v3 + 64));
  if ( v9 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8008) = 0;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8008) = -168430091;
  }
  return this;
};

// Line 2852: range 0000000013DE4FC8-0000000013DE55C7
int32_t __cdecl PlayerQuestComp::emplaceQuest(PlayerQuestComp *const this, QuestPtr *p_quest_ptr, bool is_notify)
{
  unsigned __int64 v3; // rbx
  __int64 v4; // rax
  unsigned __int64 v5; // r13
  common::milog::MiLogStream *v6; // r12
  int32_t result; // eax
  std::__shared_ptr_access<Quest,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v8; // rax
  std::shared_ptr<Quest> *v9; // r8
  common::milog::MiLogStream *v10; // rax
  std::pair<std::_Rb_tree_iterator<std::pair<unsigned int const,std::shared_ptr<Quest> > >,bool> v11; // rax
  common::milog::MiLogStream *v12; // r14
  common::milog::MiLogStream *v13; // rax
  common::milog::MiLogStream *v14; // rax
  std::__shared_ptr_access<Quest,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v15; // rax
  std::__shared_ptr_access<Quest,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v16; // rax
  uint32_t QuestId; // edx
  Quest *v18; // r12
  Quest *v19; // rax
  unsigned int val; // [rsp+24h] [rbp-ACh] BYREF
  const data::QuestExcelConfig *quest_config_ptr; // [rsp+28h] [rbp-A8h]
  PlayerPtr p_player_ptr; // [rsp+30h] [rbp-A0h] BYREF
  common::milog::MiLogStream v24; // [rsp+40h] [rbp-90h] BYREF
  char v25[112]; // [rsp+60h] [rbp-70h] BYREF

  v3 = (unsigned __int64)v25;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_0(64LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "1 32 4 13 quest_id:2859";
  *(_QWORD *)(v3 + 16) = PlayerQuestComp::emplaceQuest;
  v5 = v3 >> 3;
  *(_DWORD *)(v5 + 2147450880) = -235802127;
  *(_DWORD *)(v5 + 2147450884) = -202116348;
  if ( std::operator==<Quest>(p_quest_ptr, 0LL) )
  {
    common::milog::MiLogStream::create(
      &v24,
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/player/quest/player_quest_comp.cpp",
      "emplaceQuest",
      2855);
    v6 = common::milog::MiLogStream::operator<<<char [26],(char *[26])0>(
           &v24,
           (const char (*)[26])"emplaceQuest failed, uid:");
    if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
      __asan_report_load8(&this->player_);
LABEL_7:
    val = Player::getUid(this->player_);
    common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v6, &val);
    common::milog::MiLogStream::~MiLogStream(&v24);
    result = -1;
    goto LABEL_28;
  }
  v8 = std::__shared_ptr_access<Quest,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Quest,(__gnu_cxx::_Lock_policy)2,false,false> *const)p_quest_ptr);
  *(_DWORD *)(v3 + 32) = Quest::getQuestId(v8);
  if ( !*(_DWORD *)(v3 + 32) )
  {
    common::milog::MiLogStream::create(
      &v24,
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/player/quest/player_quest_comp.cpp",
      "emplaceQuest",
      2862);
    v6 = common::milog::MiLogStream::operator<<<char [20],(char *[20])0>(
           &v24,
           (const char (*)[20])"quest_id is 0, uid:");
    if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
      __asan_report_load8(&this->player_);
    goto LABEL_7;
  }
  quest_config_ptr = PlayerQuestComp::findPlayerQuestExcelConfig(this, *(_DWORD *)(v3 + 32));
  if ( quest_config_ptr )
  {
    v11 = std::map<unsigned int,std::shared_ptr<Quest>>::emplace<unsigned int &,std::shared_ptr<Quest>&>(
            &this->quest_map_,
            (unsigned int *)(v3 + 32),
            p_quest_ptr,
            (unsigned int *)&this->quest_map_,
            v9);
    if ( v11.second )
    {
      PlayerQuestComp::registerEventQuestMap(this, quest_config_ptr);
      v15 = std::__shared_ptr_access<Quest,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Quest,(__gnu_cxx::_Lock_policy)2,false,false> *const)p_quest_ptr);
      if ( Quest::getState(v15) == QUEST_STATE_UNFINISHED )
      {
        PlayerQuestComp::registerOccupiedResource(this, quest_config_ptr);
        if ( *(char *)(((unsigned __int64)&quest_config_ptr->is_mp_block >> 3) + 0x7FFF8000) < 0 )
          __asan_report_load1(&quest_config_ptr->is_mp_block);
        if ( quest_config_ptr->is_mp_block )
        {
          v16 = std::__shared_ptr_access<Quest,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Quest,(__gnu_cxx::_Lock_policy)2,false,false> *const)p_quest_ptr);
          QuestId = Quest::getQuestId(v16);
          PlayerQuestComp::addMpBlockQuest(this, QuestId);
        }
      }
      v18 = std::__shared_ptr_access<Quest,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Quest,(__gnu_cxx::_Lock_policy)2,false,false> *const)p_quest_ptr);
      if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
        __asan_report_load8(&this->player_);
      toThisPtr<Player>((Player *)&p_player_ptr);
      Quest::setOwner(v18, &p_player_ptr);
      std::shared_ptr<Player>::~shared_ptr(&p_player_ptr);
      if ( is_notify )
      {
        v19 = std::__shared_ptr_access<Quest,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Quest,(__gnu_cxx::_Lock_policy)2,false,false> *const)p_quest_ptr);
        Quest::notifyQuest(v19);
      }
      result = 0;
    }
    else
    {
      common::milog::MiLogStream::create(
        &v24,
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/player/quest/player_quest_comp.cpp",
        "emplaceQuest",
        2875);
      v12 = common::milog::MiLogStream::operator<<<char [22],(char *[22])0>(
              &v24,
              (const char (*)[22])"duplicate quest, uid:");
      if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
        __asan_report_load8(&this->player_);
      val = Player::getUid(this->player_);
      v13 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v12, &val);
      v14 = common::milog::MiLogStream::operator<<<char [11],(char *[11])0>(v13, (const char (*)[11])" quest_id:");
      common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v14, (const unsigned int *)(v3 + 32));
      common::milog::MiLogStream::~MiLogStream(&v24);
      result = -1;
    }
  }
  else
  {
    common::milog::MiLogStream::create(
      &v24,
      &common::milog::MiLogDefault::default_log_obj_,
      4u,
      "./src/player/quest/player_quest_comp.cpp",
      "emplaceQuest",
      2869);
    v10 = common::milog::MiLogStream::operator<<<char [32],(char *[32])0>(
            &v24,
            (const char (*)[32])"findQuestConfig fail. quest_id:");
    common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v10, (const unsigned int *)(v3 + 32));
    common::milog::MiLogStream::~MiLogStream(&v24);
    result = -1;
  }
LABEL_28:
  if ( v25 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 2906: range 0000000013DE55C8-0000000013DE602C
int32_t __cdecl PlayerQuestComp::emplaceParentQuest(
        PlayerQuestComp *const this,
        ParentQuestPtr *p_parent_quest_ptr,
        bool is_notify)
{
  unsigned __int64 v3; // r12
  __int64 v4; // rax
  unsigned __int64 v5; // r13
  common::milog::MiLogStream *v6; // r14
  int32_t result; // eax
  std::__shared_ptr_access<ParentQuest,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v8; // rax
  std::__shared_ptr_access<ParentQuest,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v9; // rax
  unsigned int *v10; // rcx
  std::shared_ptr<ParentQuest> *v11; // r8
  std::pair<std::_Rb_tree_iterator<std::pair<unsigned int const,std::shared_ptr<ParentQuest> > >,bool> v12; // rax
  common::milog::MiLogStream *v13; // r14
  common::milog::MiLogStream *v14; // rax
  common::milog::MiLogStream *v15; // r14
  std::__shared_ptr_access<ParentQuest,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v16; // rax
  ParentQuest *v17; // r14
  ParentQuest *v18; // rax
  ParentQuest *v19; // rax
  std::__shared_ptr_access<ParentQuest,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v20; // rax
  unsigned int *v21; // rcx
  data::MainQuestExcelConfig **v22; // r8
  std::pair<std::_Rb_tree_iterator<std::pair<unsigned int const,data::MainQuestExcelConfig*> >,bool> v23; // rax
  common::milog::MiLogStream *v24; // r14
  common::milog::MiLogStream *v25; // rax
  common::milog::MiLogStream *v26; // r14
  std::__shared_ptr_access<ParentQuest,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v27; // rax
  ParentQuest *v28; // rax
  data::QuestExcelConfig **v29; // r8
  std::pair<std::_Rb_tree_iterator<std::pair<unsigned int const,data::QuestExcelConfig*> >,bool> v30; // rax
  common::milog::MiLogStream *v31; // r14
  common::milog::MiLogStream *v32; // rax
  common::milog::MiLogStream *v33; // r14
  std::__shared_ptr_access<ParentQuest,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v34; // rax
  __gnu_cxx::__normal_iterator<unsigned int*,std::vector<unsigned int> >::reference v35; // rax
  _DWORD *v36; // rdx
  __gnu_cxx::__normal_iterator<unsigned int*,std::vector<unsigned int> >::reference v37; // rax
  _DWORD *v38; // rdx
  ParentQuest *v39; // rax
  unsigned int val; // [rsp+2Ch] [rbp-114h] BYREF
  std::map<unsigned int,data::QuestExcelConfig>::iterator __for_begin; // [rsp+30h] [rbp-110h] BYREF
  std::map<unsigned int,data::QuestExcelConfig>::iterator __for_end; // [rsp+38h] [rbp-108h] BYREF
  std::vector<unsigned int>::iterator __for_begin_0; // [rsp+40h] [rbp-100h] BYREF
  std::vector<unsigned int>::iterator __for_end_0; // [rsp+48h] [rbp-F8h] BYREF
  data::MainQuestExcelConfig *parent_quest_config; // [rsp+50h] [rbp-F0h]
  std::map<unsigned int,data::QuestExcelConfig> *quest_config_map; // [rsp+58h] [rbp-E8h]
  std::map<unsigned int,data::QuestExcelConfig> *__for_range; // [rsp+60h] [rbp-E0h]
  std::pair<unsigned int const,data::QuestExcelConfig> *__in; // [rsp+68h] [rbp-D8h]
  std::tuple_element<0,std::pair<unsigned int const,data::QuestExcelConfig> >::type *quest_id; // [rsp+70h] [rbp-D0h]
  std::tuple_element<1,std::pair<unsigned int const,data::QuestExcelConfig> >::type *quest_config; // [rsp+78h] [rbp-C8h]
  std::vector<unsigned int> *__for_range_0; // [rsp+80h] [rbp-C0h]
  std::vector<unsigned int> *__for_range_1; // [rsp+88h] [rbp-B8h]
  std::set<unsigned int> *quest_set_0; // [rsp+90h] [rbp-B0h]
  std::set<unsigned int> *quest_set; // [rsp+98h] [rbp-A8h]
  PlayerPtr p_player_ptr; // [rsp+A0h] [rbp-A0h] BYREF
  common::milog::MiLogStream v57; // [rsp+B0h] [rbp-90h] BYREF
  char v58[112]; // [rsp+D0h] [rbp-70h] BYREF

  v3 = (unsigned __int64)v58;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_0(64LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "1 32 4 17 quest_npc_id:2948";
  *(_QWORD *)(v3 + 16) = PlayerQuestComp::emplaceParentQuest;
  v5 = v3 >> 3;
  *(_DWORD *)(v5 + 2147450880) = -235802127;
  *(_DWORD *)(v5 + 2147450884) = -202116348;
  if ( std::operator==<ParentQuest>(p_parent_quest_ptr, 0LL) )
  {
    common::milog::MiLogStream::create(
      &v57,
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/player/quest/player_quest_comp.cpp",
      "emplaceParentQuest",
      2909);
    v6 = common::milog::MiLogStream::operator<<<char [32],(char *[32])0>(
           &v57,
           (const char (*)[32])"emplaceParentQuest failed, uid:");
    if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
      __asan_report_load8(&this->player_);
LABEL_7:
    *(_DWORD *)(v3 + 32) = Player::getUid(this->player_);
    common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v6, (const unsigned int *)(v3 + 32));
    common::milog::MiLogStream::~MiLogStream(&v57);
    result = -1;
    goto LABEL_43;
  }
  v8 = std::__shared_ptr_access<ParentQuest,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<ParentQuest,(__gnu_cxx::_Lock_policy)2,false,false> *const)p_parent_quest_ptr);
  if ( !ParentQuest::getParentQuestId(v8) )
  {
    common::milog::MiLogStream::create(
      &v57,
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/player/quest/player_quest_comp.cpp",
      "emplaceParentQuest",
      2915);
    v6 = common::milog::MiLogStream::operator<<<char [27],(char *[27])0>(
           &v57,
           (const char (*)[27])"parent_quest_id is 0, uid:");
    if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
      __asan_report_load8(&this->player_);
    goto LABEL_7;
  }
  v9 = std::__shared_ptr_access<ParentQuest,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<ParentQuest,(__gnu_cxx::_Lock_policy)2,false,false> *const)p_parent_quest_ptr);
  *(_DWORD *)(v3 + 32) = ParentQuest::getParentQuestId(v9);
  v12 = std::map<unsigned int,std::shared_ptr<ParentQuest>>::emplace<unsigned int,std::shared_ptr<ParentQuest>&>(
          &this->parent_quest_map_,
          (unsigned int *)(v3 + 32),
          p_parent_quest_ptr,
          v10,
          v11);
  if ( v12.second )
  {
    v17 = std::__shared_ptr_access<ParentQuest,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<ParentQuest,(__gnu_cxx::_Lock_policy)2,false,false> *const)p_parent_quest_ptr);
    if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
      __asan_report_load8(&this->player_);
    toThisPtr<Player>((Player *)&p_player_ptr);
    ParentQuest::setOwner(v17, &p_player_ptr);
    std::shared_ptr<Player>::~shared_ptr(&p_player_ptr);
    v18 = std::__shared_ptr_access<ParentQuest,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<ParentQuest,(__gnu_cxx::_Lock_policy)2,false,false> *const)p_parent_quest_ptr);
    if ( ParentQuest::isRandom(v18) )
    {
      v19 = std::__shared_ptr_access<ParentQuest,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<ParentQuest,(__gnu_cxx::_Lock_policy)2,false,false> *const)p_parent_quest_ptr);
      parent_quest_config = ParentQuest::getRandomParentExcelConfig(v19);
      __for_end_0._M_current = (unsigned int *)parent_quest_config;
      v20 = std::__shared_ptr_access<ParentQuest,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<ParentQuest,(__gnu_cxx::_Lock_policy)2,false,false> *const)p_parent_quest_ptr);
      *(_DWORD *)(v3 + 32) = ParentQuest::getParentQuestId(v20);
      v23 = std::map<unsigned int,data::MainQuestExcelConfig *>::emplace<unsigned int,data::MainQuestExcelConfig *>(
              &this->parent_quest_config_map_,
              (unsigned int *)(v3 + 32),
              (data::MainQuestExcelConfig **)&__for_end_0,
              v21,
              v22);
      if ( !v23.second )
      {
        common::milog::MiLogStream::create(
          &v57,
          &common::milog::MiLogDefault::default_log_obj_,
          4u,
          "./src/player/quest/player_quest_comp.cpp",
          "emplaceParentQuest",
          2933);
        v24 = common::milog::MiLogStream::operator<<<char [36],(char *[36])0>(
                &v57,
                (const char (*)[36])"duplicate parent quest config, uid:");
        if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
          __asan_report_load8(&this->player_);
        val = Player::getUid(this->player_);
        v25 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v24, &val);
        v26 = common::milog::MiLogStream::operator<<<char [18],(char *[18])0>(
                v25,
                (const char (*)[18])" parent_quest_id:");
        v27 = std::__shared_ptr_access<ParentQuest,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<ParentQuest,(__gnu_cxx::_Lock_policy)2,false,false> *const)p_parent_quest_ptr);
        *(_DWORD *)(v3 + 32) = ParentQuest::getParentQuestId(v27);
        common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v26, (const unsigned int *)(v3 + 32));
        common::milog::MiLogStream::~MiLogStream(&v57);
      }
      v28 = std::__shared_ptr_access<ParentQuest,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<ParentQuest,(__gnu_cxx::_Lock_policy)2,false,false> *const)p_parent_quest_ptr);
      quest_config_map = ParentQuest::getRandomQuestExcelConfigMap(v28);
      __for_range = quest_config_map;
      __for_begin._M_node = std::map<unsigned int,data::QuestExcelConfig>::begin(quest_config_map)._M_node;
      __for_end._M_node = std::map<unsigned int,data::QuestExcelConfig>::end(__for_range)._M_node;
      while ( std::operator!=(&__for_begin, &__for_end) )
      {
        __in = std::_Rb_tree_iterator<std::pair<unsigned int const,data::QuestExcelConfig>>::operator*(&__for_begin);
        quest_id = std::get<0ul,unsigned int const,data::QuestExcelConfig>(__in);
        quest_config = std::get<1ul,unsigned int const,data::QuestExcelConfig>(__in);
        __for_end_0._M_current = (unsigned int *)quest_config;
        v30 = std::map<unsigned int,data::QuestExcelConfig *>::emplace<unsigned int const&,data::QuestExcelConfig *>(
                &this->quest_config_map_,
                quest_id,
                (data::QuestExcelConfig **)&__for_end_0,
                (const unsigned int *)&this->quest_config_map_,
                v29);
        if ( !v30.second )
        {
          common::milog::MiLogStream::create(
            &v57,
            &common::milog::MiLogDefault::default_log_obj_,
            4u,
            "./src/player/quest/player_quest_comp.cpp",
            "emplaceParentQuest",
            2941);
          v31 = common::milog::MiLogStream::operator<<<char [36],(char *[36])0>(
                  &v57,
                  (const char (*)[36])"duplicate parent quest config, uid:");
          if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
            __asan_report_load8(&this->player_);
          val = Player::getUid(this->player_);
          v32 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v31, &val);
          v33 = common::milog::MiLogStream::operator<<<char [18],(char *[18])0>(
                  v32,
                  (const char (*)[18])" parent_quest_id:");
          v34 = std::__shared_ptr_access<ParentQuest,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<ParentQuest,(__gnu_cxx::_Lock_policy)2,false,false> *const)p_parent_quest_ptr);
          *(_DWORD *)(v3 + 32) = ParentQuest::getParentQuestId(v34);
          common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v33, (const unsigned int *)(v3 + 32));
          common::milog::MiLogStream::~MiLogStream(&v57);
        }
        __for_range_0 = &quest_config->exclusive_npc_list;
        __for_begin_0._M_current = std::vector<unsigned int>::begin(&quest_config->exclusive_npc_list)._M_current;
        __for_end_0._M_current = std::vector<unsigned int>::end(__for_range_0)._M_current;
        while ( __gnu_cxx::operator!=<unsigned int *,std::vector<unsigned int>>(&__for_begin_0, &__for_end_0) )
        {
          v35 = __gnu_cxx::__normal_iterator<unsigned int *,std::vector<unsigned int>>::operator*(&__for_begin_0);
          v36 = v35;
          if ( *(_BYTE *)(((unsigned __int64)v35 >> 3) + 0x7FFF8000) != 0
            && (char)(((unsigned __int8)v35 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)v35 >> 3) + 0x7FFF8000) )
          {
            __asan_report_load4(v35);
          }
          *(_DWORD *)(v3 + 32) = *v36;
          quest_set = std::map<unsigned int,std::set<unsigned int>>::operator[](
                        &this->exclusive_npc_quest_map_,
                        (const std::map<unsigned int,std::set<unsigned int>>::key_type *)(v3 + 32));
          std::set<unsigned int>::insert(quest_set, quest_id);
          __gnu_cxx::__normal_iterator<unsigned int *,std::vector<unsigned int>>::operator++(&__for_begin_0);
        }
        __for_range_1 = &quest_config->shared_npc_list;
        __for_begin_0._M_current = std::vector<unsigned int>::begin(&quest_config->shared_npc_list)._M_current;
        __for_end_0._M_current = std::vector<unsigned int>::end(__for_range_1)._M_current;
        while ( __gnu_cxx::operator!=<unsigned int *,std::vector<unsigned int>>(&__for_begin_0, &__for_end_0) )
        {
          v37 = __gnu_cxx::__normal_iterator<unsigned int *,std::vector<unsigned int>>::operator*(&__for_begin_0);
          v38 = v37;
          if ( *(_BYTE *)(((unsigned __int64)v37 >> 3) + 0x7FFF8000) != 0
            && (char)(((unsigned __int8)v37 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)v37 >> 3) + 0x7FFF8000) )
          {
            __asan_report_load4(v37);
          }
          *(_DWORD *)(v3 + 32) = *v38;
          quest_set_0 = std::map<unsigned int,std::set<unsigned int>>::operator[](
                          &this->shared_npc_quest_map_,
                          (const std::map<unsigned int,std::set<unsigned int>>::key_type *)(v3 + 32));
          std::set<unsigned int>::insert(quest_set_0, quest_id);
          __gnu_cxx::__normal_iterator<unsigned int *,std::vector<unsigned int>>::operator++(&__for_begin_0);
        }
        std::_Rb_tree_iterator<std::pair<unsigned int const,data::QuestExcelConfig>>::operator++(&__for_begin);
      }
    }
    if ( is_notify )
    {
      v39 = std::__shared_ptr_access<ParentQuest,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<ParentQuest,(__gnu_cxx::_Lock_policy)2,false,false> *const)p_parent_quest_ptr);
      ParentQuest::notifyParentQuest(v39);
    }
    result = 0;
  }
  else
  {
    common::milog::MiLogStream::create(
      &v57,
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/player/quest/player_quest_comp.cpp",
      "emplaceParentQuest",
      2921);
    v13 = common::milog::MiLogStream::operator<<<char [29],(char *[29])0>(
            &v57,
            (const char (*)[29])"duplicate parent quest, uid:");
    if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
      __asan_report_load8(&this->player_);
    val = Player::getUid(this->player_);
    v14 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v13, &val);
    v15 = common::milog::MiLogStream::operator<<<char [18],(char *[18])0>(v14, (const char (*)[18])" parent_quest_id:");
    v16 = std::__shared_ptr_access<ParentQuest,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<ParentQuest,(__gnu_cxx::_Lock_policy)2,false,false> *const)p_parent_quest_ptr);
    *(_DWORD *)(v3 + 32) = ParentQuest::getParentQuestId(v16);
    common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v15, (const unsigned int *)(v3 + 32));
    common::milog::MiLogStream::~MiLogStream(&v57);
    result = -1;
  }
LABEL_43:
  if ( v58 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 2964: range 0000000013DE602E-0000000013DE6064
int32_t __cdecl PlayerQuestComp::removeParentQuest(
        PlayerQuestComp *const this,
        uint32_t parent_quest_id,
        bool is_notify)
{
  QuestOperator::removeParentQuest(&this->quest_op_, parent_quest_id, is_notify);
  return 0;
};

// Line 2970: range 0000000013DE6066-0000000013DE6860
__int64 __fastcall PlayerQuestComp::internalRemoveParentQuest(
        PlayerQuestComp *const this,
        uint32_t parent_quest_id,
        bool is_notify)
{
  unsigned __int64 v3; // r12
  __int64 v4; // rax
  _DWORD *v5; // r13
  common::milog::MiLogStream *v6; // r14
  common::milog::MiLogStream *v7; // rax
  common::milog::MiLogStream *v8; // rax
  ParentQuest *v9; // rax
  std::__shared_ptr_access<ParentQuest,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v10; // rax
  ParentQuest *v11; // rax
  __gnu_cxx::__normal_iterator<unsigned int*,std::vector<unsigned int> >::reference v12; // rax
  _DWORD *v13; // rdx
  common::milog::MiLogStream *v14; // rax
  common::milog::MiLogStream *v15; // rax
  common::milog::MiLogStream *v16; // rax
  common::milog::MiLogStream *v17; // rax
  common::milog::MiLogStream *v18; // rax
  std::set<unsigned int> *v19; // rax
  __gnu_cxx::__normal_iterator<unsigned int*,std::vector<unsigned int> >::reference v20; // rax
  _DWORD *v21; // rdx
  common::milog::MiLogStream *v22; // rax
  common::milog::MiLogStream *v23; // rax
  common::milog::MiLogStream *v24; // rax
  common::milog::MiLogStream *v25; // rax
  common::milog::MiLogStream *v26; // rax
  std::set<unsigned int> *v27; // rax
  common::milog::MiLogStream *v28; // rax
  __int64 result; // rax
  std::map<unsigned int,data::QuestExcelConfig>::iterator __for_begin; // [rsp+18h] [rbp-108h] BYREF
  std::map<unsigned int,data::QuestExcelConfig>::iterator __for_end; // [rsp+20h] [rbp-100h] BYREF
  std::vector<unsigned int>::iterator __for_begin_0; // [rsp+28h] [rbp-F8h] BYREF
  std::vector<unsigned int>::iterator __for_end_0; // [rsp+30h] [rbp-F0h] BYREF
  std::map<unsigned int,data::QuestExcelConfig> *quest_config_map; // [rsp+38h] [rbp-E8h]
  std::map<unsigned int,data::QuestExcelConfig> *__for_range; // [rsp+40h] [rbp-E0h]
  std::pair<unsigned int const,data::QuestExcelConfig> *__in; // [rsp+48h] [rbp-D8h]
  std::tuple_element<0,std::pair<unsigned int const,data::QuestExcelConfig> >::type *quest_id; // [rsp+50h] [rbp-D0h]
  std::tuple_element<1,std::pair<unsigned int const,data::QuestExcelConfig> >::type *quest_config; // [rsp+58h] [rbp-C8h]
  std::vector<unsigned int> *__for_range_0; // [rsp+60h] [rbp-C0h]
  std::vector<unsigned int> *__for_range_1; // [rsp+68h] [rbp-B8h]
  common::milog::MiLogStream v41; // [rsp+70h] [rbp-B0h] BYREF
  char v42[144]; // [rsp+90h] [rbp-90h] BYREF

  v3 = (unsigned __int64)v42;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_1(96LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "3 32 4 17 quest_npc_id:2995 48 4 20 parent_quest_id:2969 64 16 21 parent_quest_ptr:2971";
  *(_QWORD *)(v3 + 16) = PlayerQuestComp::internalRemoveParentQuest;
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = -234556924;
  v5[536862722] = -202178560;
  *(_DWORD *)(v3 + 48) = parent_quest_id;
  PlayerQuestComp::findParentQuest((const PlayerQuestComp *const)(v3 + 64), (__int64)this, *(_DWORD *)(v3 + 48));
  if ( std::operator==<ParentQuest>((const std::shared_ptr<ParentQuest> *)(v3 + 64), 0LL) )
  {
    common::milog::MiLogStream::create(
      &v41,
      &common::milog::MiLogDefault::default_log_obj_,
      1u,
      "./src/player/quest/player_quest_comp.cpp",
      "internalRemoveParentQuest",
      2974);
    v6 = common::milog::MiLogStream::operator<<<char [29],(char *[29])0>(
           &v41,
           (const char (*)[29])"findParentQuest failed, uid:");
    if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
      __asan_report_load8(&this->player_);
    *(_DWORD *)(v3 + 32) = Player::getUid(this->player_);
    v7 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v6, (const unsigned int *)(v3 + 32));
    v8 = common::milog::MiLogStream::operator<<<char [18],(char *[18])0>(v7, (const char (*)[18])" parent_quest_id:");
    common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v8, (const unsigned int *)(v3 + 48));
    common::milog::MiLogStream::~MiLogStream(&v41);
  }
  else
  {
    v9 = std::__shared_ptr_access<ParentQuest,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<ParentQuest,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 64));
    if ( ParentQuest::isRandom(v9) )
    {
      v10 = std::__shared_ptr_access<ParentQuest,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<ParentQuest,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 64));
      *(_DWORD *)(v3 + 32) = ParentQuest::getParentQuestId(v10);
      std::map<unsigned int,data::MainQuestExcelConfig *>::erase(
        &this->parent_quest_config_map_,
        (const std::map<unsigned int,data::MainQuestExcelConfig*>::key_type *)(v3 + 32));
      v11 = std::__shared_ptr_access<ParentQuest,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<ParentQuest,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 64));
      quest_config_map = ParentQuest::getRandomQuestExcelConfigMap(v11);
      __for_range = quest_config_map;
      __for_begin._M_node = std::map<unsigned int,data::QuestExcelConfig>::begin(quest_config_map)._M_node;
      __for_end._M_node = std::map<unsigned int,data::QuestExcelConfig>::end(quest_config_map)._M_node;
      while ( std::operator!=(&__for_begin, &__for_end) )
      {
        __in = std::_Rb_tree_iterator<std::pair<unsigned int const,data::QuestExcelConfig>>::operator*(&__for_begin);
        quest_id = std::get<0ul,unsigned int const,data::QuestExcelConfig>(__in);
        quest_config = std::get<1ul,unsigned int const,data::QuestExcelConfig>(__in);
        std::map<unsigned int,data::QuestExcelConfig *>::erase(&this->quest_config_map_, quest_id);
        __for_range_0 = &quest_config->exclusive_npc_list;
        __for_begin_0._M_current = std::vector<unsigned int>::begin(&quest_config->exclusive_npc_list)._M_current;
        __for_end_0._M_current = std::vector<unsigned int>::end(__for_range_0)._M_current;
        while ( __gnu_cxx::operator!=<unsigned int *,std::vector<unsigned int>>(&__for_begin_0, &__for_end_0) )
        {
          v12 = __gnu_cxx::__normal_iterator<unsigned int *,std::vector<unsigned int>>::operator*(&__for_begin_0);
          v13 = v12;
          if ( *(_BYTE *)(((unsigned __int64)v12 >> 3) + 0x7FFF8000) != 0
            && (char)(((unsigned __int8)v12 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)v12 >> 3) + 0x7FFF8000) )
          {
            __asan_report_load4(v12);
          }
          *(_DWORD *)(v3 + 32) = *v13;
          if ( !common::tools::MiscUtils::isContains<std::map<unsigned int,std::set<unsigned int>>,unsigned int>(
                  &this->exclusive_npc_quest_map_,
                  (const unsigned int *)(v3 + 32)) )
          {
            common::milog::MiLogStream::create(
              &v41,
              &common::milog::MiLogDefault::default_log_obj_,
              3u,
              "./src/player/quest/player_quest_comp.cpp",
              "internalRemoveParentQuest",
              2990);
            v14 = common::milog::MiLogStream::operator<<<char [50],(char *[50])0>(
                    &v41,
                    (const char (*)[50])"exclusive_npc_quest_map_ contains not npc,npc_id:");
            v15 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                    v14,
                    (const unsigned int *)(v3 + 32));
            v16 = common::milog::MiLogStream::operator<<<char [11],(char *[11])0>(v15, (const char (*)[11])" quest_id:");
            v17 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v16, quest_id);
            v18 = common::milog::MiLogStream::operator<<<char [13],(char *[13])0>(
                    v17,
                    (const char (*)[13])"template id:");
            common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v18, &quest_config->sub_id);
            common::milog::MiLogStream::~MiLogStream(&v41);
          }
          else
          {
            v19 = std::map<unsigned int,std::set<unsigned int>>::operator[](
                    &this->exclusive_npc_quest_map_,
                    (const std::map<unsigned int,std::set<unsigned int>>::key_type *)(v3 + 32));
            std::set<unsigned int>::erase(v19, quest_id);
          }
          __gnu_cxx::__normal_iterator<unsigned int *,std::vector<unsigned int>>::operator++(&__for_begin_0);
        }
        __for_range_1 = &quest_config->shared_npc_list;
        __for_begin_0._M_current = std::vector<unsigned int>::begin(&quest_config->shared_npc_list)._M_current;
        __for_end_0._M_current = std::vector<unsigned int>::end(__for_range_1)._M_current;
        while ( __gnu_cxx::operator!=<unsigned int *,std::vector<unsigned int>>(&__for_begin_0, &__for_end_0) )
        {
          v20 = __gnu_cxx::__normal_iterator<unsigned int *,std::vector<unsigned int>>::operator*(&__for_begin_0);
          v21 = v20;
          if ( *(_BYTE *)(((unsigned __int64)v20 >> 3) + 0x7FFF8000) != 0
            && (char)(((unsigned __int8)v20 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)v20 >> 3) + 0x7FFF8000) )
          {
            __asan_report_load4(v20);
          }
          *(_DWORD *)(v3 + 32) = *v21;
          if ( !common::tools::MiscUtils::isContains<std::map<unsigned int,std::set<unsigned int>>,unsigned int>(
                  &this->shared_npc_quest_map_,
                  (const unsigned int *)(v3 + 32)) )
          {
            common::milog::MiLogStream::create(
              &v41,
              &common::milog::MiLogDefault::default_log_obj_,
              3u,
              "./src/player/quest/player_quest_comp.cpp",
              "internalRemoveParentQuest",
              2999);
            v22 = common::milog::MiLogStream::operator<<<char [50],(char *[50])0>(
                    &v41,
                    (const char (*)[50])"exclusive_npc_quest_map_ contains not npc,npc_id:");
            v23 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                    v22,
                    (const unsigned int *)(v3 + 32));
            v24 = common::milog::MiLogStream::operator<<<char [11],(char *[11])0>(v23, (const char (*)[11])" quest_id:");
            v25 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v24, quest_id);
            v26 = common::milog::MiLogStream::operator<<<char [13],(char *[13])0>(
                    v25,
                    (const char (*)[13])"template id:");
            common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v26, &quest_config->sub_id);
            common::milog::MiLogStream::~MiLogStream(&v41);
          }
          else
          {
            v27 = std::map<unsigned int,std::set<unsigned int>>::operator[](
                    &this->shared_npc_quest_map_,
                    (const std::map<unsigned int,std::set<unsigned int>>::key_type *)(v3 + 32));
            std::set<unsigned int>::erase(v27, quest_id);
          }
          __gnu_cxx::__normal_iterator<unsigned int *,std::vector<unsigned int>>::operator++(&__for_begin_0);
        }
        std::_Rb_tree_iterator<std::pair<unsigned int const,data::QuestExcelConfig>>::operator++(&__for_begin);
      }
    }
    std::map<unsigned int,std::shared_ptr<ParentQuest>>::erase(
      &this->parent_quest_map_,
      (const std::map<unsigned int,std::shared_ptr<ParentQuest>>::key_type *)(v3 + 48));
    PlayerQuestComp::refreshWorldQuestFlowGroupsToSecureSuite(this, *(_DWORD *)(v3 + 48));
    common::milog::MiLogStream::create(
      &v41,
      &common::milog::MiLogDefault::default_log_obj_,
      1u,
      "./src/player/quest/player_quest_comp.cpp",
      "internalRemoveParentQuest",
      3010);
    v28 = common::milog::MiLogStream::operator<<<char [45],(char *[45])0>(
            &v41,
            (const char (*)[45])"[QUEST] remove parent quest parent_quest_id:");
    common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v28, (const unsigned int *)(v3 + 48));
    common::milog::MiLogStream::~MiLogStream(&v41);
  }
  std::shared_ptr<ParentQuest>::~shared_ptr((std::shared_ptr<ParentQuest> *const)(v3 + 64));
  result = 0LL;
  if ( v42 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8008) = 0;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8008) = -168430091;
  }
  return result;
};

// Line 3017: range 0000000013DE6862-0000000013DE6F0D
int32_t __cdecl PlayerQuestComp::refreshQuestComp(PlayerQuestComp *const this, bool is_notify)
{
  unsigned __int64 v2; // r12
  __int64 v3; // rax
  _DWORD *v4; // r13
  std::__shared_ptr<TracingMgr,(__gnu_cxx::_Lock_policy)2>::element_type *v5; // rax
  common::milog::MiLogStream *v6; // r14
  std::__shared_ptr<TracingMgr,(__gnu_cxx::_Lock_policy)2>::element_type *v7; // rax
  common::milog::MiLogStream *v8; // r14
  std::__shared_ptr<TracingMgr,(__gnu_cxx::_Lock_policy)2>::element_type *v9; // rax
  common::milog::MiLogStream *v10; // r14
  std::__shared_ptr<TracingMgr,(__gnu_cxx::_Lock_policy)2>::element_type *v11; // rax
  common::milog::MiLogStream *v12; // r14
  std::__shared_ptr<TracingMgr,(__gnu_cxx::_Lock_policy)2>::element_type *v13; // rax
  PlayerMpComp *MpComp; // rax
  common::milog::MiLogStream *v15; // r14
  int32_t result; // eax
  int val; // [rsp+1Ch] [rbp-C4h] BYREF
  opentracing::v3::string_view operation_name; // [rsp+20h] [rbp-C0h] BYREF
  common::milog::MiLogStream v19; // [rsp+30h] [rbp-B0h] BYREF
  char v20[144]; // [rsp+50h] [rbp-90h] BYREF

  v2 = (unsigned __int64)v20;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_1(96LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "2 32 16 10 timer:3018 64 16 20 perf_span_proxy:3045";
  *(_QWORD *)(v2 + 16) = PlayerQuestComp::refreshQuestComp;
  v4 = (_DWORD *)(v2 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = -219021312;
  v4[536862722] = -202178560;
  common::tools::TimeUtils::Timer::Timer((common::tools::TimeUtils::Timer *const)(v2 + 32));
  common::tools::TimeUtils::Timer::reset((common::tools::TimeUtils::Timer *const)(v2 + 32));
  opentracing::v3::string_view::string_view(&operation_name, "refreshAllQuestProgress");
  v5 = std::__shared_ptr<TracingMgr,(__gnu_cxx::_Lock_policy)2>::get(&ResourceBox::tracing_mgr_ptr);
  PerfSpanProxy::PerfSpanProxy((PerfSpanProxy *const)(v2 + 64), v5, operation_name);
  PlayerQuestComp::refreshAllQuestProgress(this, is_notify);
  PerfSpanProxy::~PerfSpanProxy((PerfSpanProxy *const)(v2 + 64));
  common::milog::MiLogStream::create(
    &v19,
    &common::milog::MiLogDefault::default_log_obj_,
    2u,
    "./src/player/quest/player_quest_comp.cpp",
    "refreshQuestComp",
    3025);
  v6 = common::milog::MiLogStream::operator<<<char [37],(char *[37])0>(
         &v19,
         (const char (*)[37])"[PERF] refreshAllQuestProgress cost:");
  val = common::tools::TimeUtils::Timer::time((const common::tools::TimeUtils::Timer *const)(v2 + 32));
  common::milog::MiLogStream::operator<<<int,(int *)0>(v6, &val);
  common::milog::MiLogStream::~MiLogStream(&v19);
  opentracing::v3::string_view::string_view(&operation_name, "tryRollbackAllParentQuest");
  v7 = std::__shared_ptr<TracingMgr,(__gnu_cxx::_Lock_policy)2>::get(&ResourceBox::tracing_mgr_ptr);
  PerfSpanProxy::PerfSpanProxy((PerfSpanProxy *const)(v2 + 64), v7, operation_name);
  PlayerQuestComp::tryRollbackAllParentQuest(this, is_notify);
  PerfSpanProxy::~PerfSpanProxy((PerfSpanProxy *const)(v2 + 64));
  common::milog::MiLogStream::create(
    &v19,
    &common::milog::MiLogDefault::default_log_obj_,
    2u,
    "./src/player/quest/player_quest_comp.cpp",
    "refreshQuestComp",
    3031);
  v8 = common::milog::MiLogStream::operator<<<char [39],(char *[39])0>(
         &v19,
         (const char (*)[39])"[PERF] tryRollbackAllParentQuest cost:");
  val = common::tools::TimeUtils::Timer::time((const common::tools::TimeUtils::Timer *const)(v2 + 32));
  common::milog::MiLogStream::operator<<<int,(int *)0>(v8, &val);
  common::milog::MiLogStream::~MiLogStream(&v19);
  opentracing::v3::string_view::string_view(&operation_name, "tryAcceptQuestByCond");
  v9 = std::__shared_ptr<TracingMgr,(__gnu_cxx::_Lock_policy)2>::get(&ResourceBox::tracing_mgr_ptr);
  PerfSpanProxy::PerfSpanProxy((PerfSpanProxy *const)(v2 + 64), v9, operation_name);
  PlayerQuestComp::tryAcceptQuestByCond(this, QUEST_COND_NONE, is_notify, 0);
  PerfSpanProxy::~PerfSpanProxy((PerfSpanProxy *const)(v2 + 64));
  common::milog::MiLogStream::create(
    &v19,
    &common::milog::MiLogDefault::default_log_obj_,
    2u,
    "./src/player/quest/player_quest_comp.cpp",
    "refreshQuestComp",
    3037);
  v10 = common::milog::MiLogStream::operator<<<char [34],(char *[34])0>(
          &v19,
          (const char (*)[34])"[PERF] tryAcceptQuestByCond cost:");
  val = common::tools::TimeUtils::Timer::time((const common::tools::TimeUtils::Timer *const)(v2 + 32));
  common::milog::MiLogStream::operator<<<int,(int *)0>(v10, &val);
  common::milog::MiLogStream::~MiLogStream(&v19);
  opentracing::v3::string_view::string_view(&operation_name, "tryStartAllQuest");
  v11 = std::__shared_ptr<TracingMgr,(__gnu_cxx::_Lock_policy)2>::get(&ResourceBox::tracing_mgr_ptr);
  PerfSpanProxy::PerfSpanProxy((PerfSpanProxy *const)(v2 + 64), v11, operation_name);
  PlayerQuestComp::tryStartAllQuest(this, is_notify);
  PerfSpanProxy::~PerfSpanProxy((PerfSpanProxy *const)(v2 + 64));
  common::milog::MiLogStream::create(
    &v19,
    &common::milog::MiLogDefault::default_log_obj_,
    2u,
    "./src/player/quest/player_quest_comp.cpp",
    "refreshQuestComp",
    3043);
  v12 = common::milog::MiLogStream::operator<<<char [30],(char *[30])0>(
          &v19,
          (const char (*)[30])"[PERF] tryStartAllQuest cost:");
  val = common::tools::TimeUtils::Timer::time((const common::tools::TimeUtils::Timer *const)(v2 + 32));
  common::milog::MiLogStream::operator<<<int,(int *)0>(v12, &val);
  common::milog::MiLogStream::~MiLogStream(&v19);
  opentracing::v3::string_view::string_view(&operation_name, "refreshMpModeAvailability");
  v13 = std::__shared_ptr<TracingMgr,(__gnu_cxx::_Lock_policy)2>::get(&ResourceBox::tracing_mgr_ptr);
  PerfSpanProxy::PerfSpanProxy((PerfSpanProxy *const)(v2 + 64), v13, operation_name);
  if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
    __asan_report_load8(&this->player_);
  MpComp = Player::getMpComp(this->player_);
  PlayerMpComp::refreshMpModeAvailability(MpComp);
  PerfSpanProxy::~PerfSpanProxy((PerfSpanProxy *const)(v2 + 64));
  common::milog::MiLogStream::create(
    &v19,
    &common::milog::MiLogDefault::default_log_obj_,
    2u,
    "./src/player/quest/player_quest_comp.cpp",
    "refreshQuestComp",
    3048);
  v15 = common::milog::MiLogStream::operator<<<char [28],(char *[28])0>(
          &v19,
          (const char (*)[28])"[PERF] refshQuestComp cost:");
  val = common::tools::TimeUtils::Timer::time((const common::tools::TimeUtils::Timer *const)(v2 + 32));
  common::milog::MiLogStream::operator<<<int,(int *)0>(v15, &val);
  common::milog::MiLogStream::~MiLogStream(&v19);
  common::tools::TimeUtils::Timer::~Timer((common::tools::TimeUtils::Timer *const)(v2 + 32));
  result = 0;
  if ( v20 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8008) = 0;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8008) = -168430091;
  }
  return result;
};

// Line 3056: range 0000000013DE6F0E-0000000013DE7148
int32_t __cdecl PlayerQuestComp::refreshAllQuestProgress(PlayerQuestComp *const this, bool is_notify)
{
  unsigned __int64 v2; // rbx
  __int64 v3; // rax
  unsigned __int64 v4; // r12
  QuestOperator *p_quest_op; // rdi
  bool v6; // cl
  int32_t result; // eax
  std::map<unsigned int,std::shared_ptr<Quest>>::iterator __for_begin; // [rsp+10h] [rbp-A0h] BYREF
  std::map<unsigned int,std::shared_ptr<Quest>>::iterator __for_end; // [rsp+18h] [rbp-98h] BYREF
  std::map<unsigned int,std::shared_ptr<Quest>> *__for_range; // [rsp+20h] [rbp-90h]
  std::pair<unsigned int const,std::shared_ptr<Quest> > *__in; // [rsp+28h] [rbp-88h]
  std::tuple_element<0,std::pair<unsigned int const,std::shared_ptr<Quest> > >::type *quest_id; // [rsp+30h] [rbp-80h]
  std::tuple_element<1,std::pair<unsigned int const,std::shared_ptr<Quest> > >::type *quest_ptr; // [rsp+38h] [rbp-78h]
  char v15[112]; // [rsp+40h] [rbp-70h] BYREF

  v2 = (unsigned __int64)v15;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_0(64LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "1 32 16 10 guard:3057";
  *(_QWORD *)(v2 + 16) = PlayerQuestComp::refreshAllQuestProgress;
  v4 = v2 >> 3;
  *(_DWORD *)(v4 + 2147450880) = -235802127;
  *(_DWORD *)(v4 + 2147450884) = -202178560;
  QuestOperatorGuard::QuestOperatorGuard((QuestOperatorGuard *const)(v2 + 32), &this->quest_op_);
  __for_range = &this->quest_map_;
  __for_begin._M_node = std::map<unsigned int,std::shared_ptr<Quest>>::begin(&this->quest_map_)._M_node;
  __for_end._M_node = std::map<unsigned int,std::shared_ptr<Quest>>::end(&this->quest_map_)._M_node;
  while ( std::operator!=(&__for_begin, &__for_end) )
  {
    __in = std::_Rb_tree_iterator<std::pair<unsigned int const,std::shared_ptr<Quest>>>::operator*(&__for_begin);
    quest_id = std::get<0ul,unsigned int const,std::shared_ptr<Quest>>(__in);
    quest_ptr = std::get<1ul,unsigned int const,std::shared_ptr<Quest>>(__in);
    p_quest_op = &this->quest_op_;
    v6 = is_notify;
    if ( *(_BYTE *)(((unsigned __int64)quest_id >> 3) + 0x7FFF8000) != 0
      && (char)(((unsigned __int8)quest_id & 7) + 3) >= *(_BYTE *)(((unsigned __int64)quest_id >> 3) + 0x7FFF8000) )
    {
      p_quest_op = (QuestOperator *)quest_id;
      __asan_report_load4(quest_id);
    }
    QuestOperator::refreshQuestProgress(p_quest_op, *quest_id, v6);
    std::_Rb_tree_iterator<std::pair<unsigned int const,std::shared_ptr<Quest>>>::operator++(&__for_begin);
  }
  QuestOperator::clearLastDungeonSettleMap(&this->quest_op_);
  QuestOperatorGuard::~QuestOperatorGuard((QuestOperatorGuard *const)(v2 + 32));
  result = 0;
  if ( v15 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 3070: range 0000000013DE714A-0000000013DE7222
void __cdecl PlayerQuestComp::internalClearLastDungeonSettleMap(PlayerQuestComp *const this)
{
  common::milog::MiLogStream *v1; // rbx
  unsigned int val; // [rsp+1Ch] [rbp-34h] BYREF
  common::milog::MiLogStream v3; // [rsp+20h] [rbp-30h] BYREF

  std::unordered_map<unsigned int,unsigned int>::clear(&this->last_dungeon_settle_map_);
  common::milog::MiLogStream::create(
    &v3,
    &common::milog::MiLogDefault::default_log_obj_,
    1u,
    "./src/player/quest/player_quest_comp.cpp",
    "internalClearLastDungeonSettleMap",
    3072);
  v1 = common::milog::MiLogStream::operator<<<char [38],(char *[38])0>(
         &v3,
         (const char (*)[38])"last_dungeon_settle_map_ clear, uid: ");
  if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
    __asan_report_load8(&this->player_);
  val = Player::getUid(this->player_);
  common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v1, &val);
  common::milog::MiLogStream::~MiLogStream(&v3);
};

// Line 3076: range 0000000013DE7224-0000000013DE7468
void __cdecl PlayerQuestComp::tryStartAllQuest(PlayerQuestComp *const this, bool is_notify)
{
  unsigned __int64 v2; // rbx
  __int64 v3; // rax
  unsigned __int64 v4; // r12
  std::__shared_ptr_access<Quest,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v5; // rax
  uint32_t AcceptTime; // esi
  std::map<unsigned int,std::shared_ptr<Quest>>::iterator __for_begin; // [rsp+20h] [rbp-A0h] BYREF
  std::map<unsigned int,std::shared_ptr<Quest>>::iterator __for_end; // [rsp+28h] [rbp-98h] BYREF
  std::map<unsigned int,std::shared_ptr<Quest>> *__for_range; // [rsp+30h] [rbp-90h]
  std::pair<unsigned int const,std::shared_ptr<Quest> > *__in; // [rsp+38h] [rbp-88h]
  std::tuple_element<0,std::pair<unsigned int const,std::shared_ptr<Quest> > >::type *quest_id; // [rsp+40h] [rbp-80h]
  std::tuple_element<1,std::pair<unsigned int const,std::shared_ptr<Quest> > >::type *quest_ptr; // [rsp+48h] [rbp-78h]
  char v14[112]; // [rsp+50h] [rbp-70h] BYREF

  v2 = (unsigned __int64)v14;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_0(64LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "1 32 16 10 guard:3077";
  *(_QWORD *)(v2 + 16) = PlayerQuestComp::tryStartAllQuest;
  v4 = v2 >> 3;
  *(_DWORD *)(v4 + 2147450880) = -235802127;
  *(_DWORD *)(v4 + 2147450884) = -202178560;
  QuestOperatorGuard::QuestOperatorGuard((QuestOperatorGuard *const)(v2 + 32), &this->quest_op_);
  __for_range = &this->quest_map_;
  __for_begin._M_node = std::map<unsigned int,std::shared_ptr<Quest>>::begin(&this->quest_map_)._M_node;
  __for_end._M_node = std::map<unsigned int,std::shared_ptr<Quest>>::end(&this->quest_map_)._M_node;
  while ( std::operator!=(&__for_begin, &__for_end) )
  {
    __in = std::_Rb_tree_iterator<std::pair<unsigned int const,std::shared_ptr<Quest>>>::operator*(&__for_begin);
    quest_id = std::get<0ul,unsigned int const,std::shared_ptr<Quest>>(__in);
    quest_ptr = std::get<1ul,unsigned int const,std::shared_ptr<Quest>>(__in);
    v5 = std::__shared_ptr_access<Quest,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Quest,(__gnu_cxx::_Lock_policy)2,false,false> *const)quest_ptr);
    AcceptTime = Quest::getAcceptTime(v5);
    if ( *(_BYTE *)(((unsigned __int64)quest_id >> 3) + 0x7FFF8000) != 0
      && (char)(((unsigned __int8)quest_id & 7) + 3) >= *(_BYTE *)(((unsigned __int64)quest_id >> 3) + 0x7FFF8000) )
    {
      __asan_report_load4(quest_id);
    }
    QuestOperator::startQuest(&this->quest_op_, *quest_id, AcceptTime, 0, is_notify);
    std::_Rb_tree_iterator<std::pair<unsigned int const,std::shared_ptr<Quest>>>::operator++(&__for_begin);
  }
  QuestOperatorGuard::~QuestOperatorGuard((QuestOperatorGuard *const)(v2 + 32));
  if ( v14 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
  }
};

// Line 3086: range 0000000013DE746A-0000000013DE77CA
void __cdecl PlayerQuestComp::tryStartAllBeginTimeQuest(PlayerQuestComp *const this, bool is_notify)
{
  unsigned __int64 v2; // r12
  __int64 v3; // rax
  _DWORD *v4; // r13
  std::__shared_ptr_access<Quest,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v5; // rax
  std::__shared_ptr_access<Quest,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v7; // rax
  uint32_t AcceptTime; // esi
  std::unordered_map<unsigned int,unsigned int>::const_iterator __for_begin; // [rsp+20h] [rbp-C0h] BYREF
  std::unordered_map<unsigned int,unsigned int>::const_iterator __for_end; // [rsp+28h] [rbp-B8h] BYREF
  const std::unordered_map<unsigned int,unsigned int> *__for_range; // [rsp+30h] [rbp-B0h]
  const std::pair<unsigned int const,unsigned int> *v13; // [rsp+38h] [rbp-A8h]
  std::tuple_element<0,const std::pair<unsigned int const,unsigned int> >::type *quest_id; // [rsp+40h] [rbp-A0h]
  std::tuple_element<1,const std::pair<unsigned int const,unsigned int> >::type *_; // [rsp+48h] [rbp-98h]
  char v16[144]; // [rsp+50h] [rbp-90h] BYREF

  v2 = (unsigned __int64)v16;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_1(96LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "2 32 16 10 guard:3087 64 16 14 quest_ptr:3091";
  *(_QWORD *)(v2 + 16) = PlayerQuestComp::tryStartAllBeginTimeQuest;
  v4 = (_DWORD *)(v2 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = -219021312;
  v4[536862722] = -202178560;
  QuestOperatorGuard::QuestOperatorGuard((QuestOperatorGuard *const)(v2 + 32), &this->quest_op_);
  ServiceBox::findService<GameserverService>();
  GameserverService::getConfig((GameserverService *const)(v2 + 64));
  __for_range = &std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 64))->design_config.txt_config_mgr.quest_config_mgr.quest_need_start_time_map;
  std::shared_ptr<Config>::~shared_ptr((std::shared_ptr<Config> *const)(v2 + 64));
  __for_begin._M_cur = std::unordered_map<unsigned int,unsigned int>::begin(__for_range)._M_cur;
  __for_end._M_cur = std::unordered_map<unsigned int,unsigned int>::end(__for_range)._M_cur;
  while ( std::__detail::operator!=<std::pair<unsigned int const,unsigned int>,false>(&__for_begin, &__for_end) )
  {
    v13 = std::__detail::_Node_const_iterator<std::pair<unsigned int const,unsigned int>,false,false>::operator*(&__for_begin);
    quest_id = std::get<0ul,unsigned int const,unsigned int>(v13);
    _ = (std::tuple_element<1,const std::pair<unsigned int const,unsigned int> >::type *)std::get<1ul,unsigned int const,unsigned int>(v13);
    if ( *(_BYTE *)(((unsigned __int64)quest_id >> 3) + 0x7FFF8000) != 0
      && (char)(((unsigned __int8)quest_id & 7) + 3) >= *(_BYTE *)(((unsigned __int64)quest_id >> 3) + 0x7FFF8000) )
    {
      __asan_report_load4(quest_id);
    }
    PlayerQuestComp::findQuest((const PlayerQuestComp *const)(v2 + 64), (__int64)this, *quest_id);
    if ( std::operator!=<Quest>((const std::shared_ptr<Quest> *)(v2 + 64), 0LL) )
    {
      v5 = std::__shared_ptr_access<Quest,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Quest,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 64));
      if ( Quest::getState(v5) == QUEST_STATE_UNSTARTED )
      {
        v7 = std::__shared_ptr_access<Quest,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Quest,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 64));
        AcceptTime = Quest::getAcceptTime(v7);
        if ( *(_BYTE *)(((unsigned __int64)quest_id >> 3) + 0x7FFF8000) != 0
          && (char)(((unsigned __int8)quest_id & 7) + 3) >= *(_BYTE *)(((unsigned __int64)quest_id >> 3) + 0x7FFF8000) )
        {
          __asan_report_load4(quest_id);
        }
        QuestOperator::startQuest(&this->quest_op_, *quest_id, AcceptTime, 0, is_notify);
      }
    }
    std::shared_ptr<Quest>::~shared_ptr((std::shared_ptr<Quest> *const)(v2 + 64));
    std::__detail::_Node_const_iterator<std::pair<unsigned int const,unsigned int>,false,false>::operator++(&__for_begin);
  }
  QuestOperatorGuard::~QuestOperatorGuard((QuestOperatorGuard *const)(v2 + 32));
  if ( v16 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8008) = 0;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8008) = -168430091;
  }
};

// Line 3099: range 0000000013DE77CC-0000000013DE7A73
void __cdecl PlayerQuestComp::tryRegisterCheckQuestStartTimer(
        PlayerQuestComp *const this,
        uint32_t possible_check_time)
{
  __int64 v2; // rcx
  char v3; // al
  common::milog::MiLogStream *v4; // rcx
  common::milog::MiLogStream *v5; // rbx
  uint32_t now; // [rsp+1Ch] [rbp-54h]
  common::milog::MiLogStream v7; // [rsp+20h] [rbp-50h] BYREF
  common::milog::MiLogStream v8; // [rsp+40h] [rbp-30h] BYREF

  now = common::tools::TimeUtils::getNow();
  if ( possible_check_time >= now )
  {
    if ( *(_BYTE *)(((unsigned __int64)&this->next_check_quest_start_time_ >> 3) + 0x7FFF8000) != 0
      && *(_BYTE *)(((unsigned __int64)&this->next_check_quest_start_time_ >> 3) + 0x7FFF8000) <= 3 )
    {
      __asan_report_load4(&this->next_check_quest_start_time_);
    }
    if ( !this->next_check_quest_start_time_ || possible_check_time < this->next_check_quest_start_time_ )
    {
      common::tools::MiTimer::cancel(&this->check_quest_start_timer_);
      v3 = *(_BYTE *)(((unsigned __int64)&this->next_check_quest_start_time_ >> 3) + 0x7FFF8000);
      if ( v3 != 0 && v3 <= 3 )
      {
        LOBYTE(v2) = v3 != 0;
        __asan_report_store4(
          &this->next_check_quest_start_time_,
          possible_check_time,
          &this->next_check_quest_start_time_,
          v2);
      }
      this->next_check_quest_start_time_ = possible_check_time;
      if ( PlayerUnixTimer::startS(
             &this->check_quest_start_timer_,
             this->next_check_quest_start_time_ - now,
             0,
             "./src/player/quest/player_quest_comp.cpp",
             "tryRegisterCheckQuestStartTimer",
             3112) )
      {
        common::milog::MiLogStream::create(
          &v8,
          &common::milog::MiLogDefault::default_log_obj_,
          3u,
          "./src/player/quest/player_quest_comp.cpp",
          "tryRegisterCheckQuestStartTimer",
          3114);
        v4 = common::milog::MiLogStream::operator<<<char [21],(char *[21])0>(
               &v8,
               (const char (*)[21])" start timer failed!");
        if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
          __asan_report_load8(&this->player_);
        operator<<(v4, this->player_);
        common::milog::MiLogStream::~MiLogStream(&v8);
      }
      common::milog::MiLogStream::create(
        &v7,
        &common::milog::MiLogDefault::default_log_obj_,
        1u,
        "./src/player/quest/player_quest_comp.cpp",
        "tryRegisterCheckQuestStartTimer",
        3116);
      v5 = common::milog::MiLogStream::operator<<<char [49],(char *[49])0>(
             &v7,
             (const char (*)[49])"[QUEST_START_CHECK] next check quest start tiem:");
      if ( *(_BYTE *)(((unsigned __int64)&this->next_check_quest_start_time_ >> 3) + 0x7FFF8000) != 0
        && *(_BYTE *)(((unsigned __int64)&this->next_check_quest_start_time_ >> 3) + 0x7FFF8000) <= 3 )
      {
        __asan_report_load4(&this->next_check_quest_start_time_);
      }
      common::tools::TimeUtils::getStrByTime[abi:cxx11]((std::string *)&v8, this->next_check_quest_start_time_);
      common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v5, (const std::string *)&v8);
      std::string::~string(&v8);
      common::milog::MiLogStream::~MiLogStream(&v7);
    }
  }
};

// Line 3122: range 0000000013DE7A74-0000000013DE7C6B
void __cdecl PlayerQuestComp::onCheckQuestStartTimer(PlayerQuestComp *const this, uint64_t now_ms)
{
  __int64 v2; // rcx
  common::tools::TimeUtils::Timer *v3; // rbx
  __int64 v4; // rax
  unsigned __int64 v5; // r12
  char v6; // al
  common::milog::MiLogStream *v7; // r14
  int val; // [rsp+1Ch] [rbp-94h] BYREF
  common::milog::MiLogStream v9; // [rsp+20h] [rbp-90h] BYREF
  char v10[112]; // [rsp+40h] [rbp-70h] BYREF

  v3 = (common::tools::TimeUtils::Timer *)v10;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_0(64LL);
    if ( v4 )
      v3 = (common::tools::TimeUtils::Timer *)v4;
  }
  v3->start_tv_.tv_sec = 1102416563LL;
  v3->start_tv_.tv_usec = (__suseconds_t)"1 32 16 10 timer:3124";
  v3[1].start_tv_.tv_sec = (__time_t)PlayerQuestComp::onCheckQuestStartTimer;
  v5 = (unsigned __int64)v3 >> 3;
  *(_DWORD *)(v5 + 2147450880) = -235802127;
  *(_DWORD *)(v5 + 2147450884) = -202178560;
  v6 = *(_BYTE *)(((unsigned __int64)&this->next_check_quest_start_time_ >> 3) + 0x7FFF8000);
  if ( v6 != 0 && v6 <= 3 )
  {
    LOBYTE(v2) = v6 != 0;
    __asan_report_store4(&this->next_check_quest_start_time_, now_ms, &this->next_check_quest_start_time_, v2);
  }
  this->next_check_quest_start_time_ = 0;
  common::tools::TimeUtils::Timer::Timer(v3 + 2);
  common::tools::TimeUtils::Timer::reset(v3 + 2);
  PlayerQuestComp::tryStartAllBeginTimeQuest(this, 1);
  common::milog::MiLogStream::create(
    &v9,
    &common::milog::MiLogDefault::default_log_obj_,
    2u,
    "./src/player/quest/player_quest_comp.cpp",
    "onCheckQuestStartTimer",
    3127);
  v7 = common::milog::MiLogStream::operator<<<char [39],(char *[39])0>(
         &v9,
         (const char (*)[39])"[PERF] tryStartAllBeginTimeQuest cost:");
  val = common::tools::TimeUtils::Timer::time(v3 + 2);
  common::milog::MiLogStream::operator<<<int,(int *)0>(v7, &val);
  common::milog::MiLogStream::~MiLogStream(&v9);
  common::tools::TimeUtils::Timer::~Timer(v3 + 2);
  if ( v10 == (char *)v3 )
  {
    *(_QWORD *)(((unsigned __int64)v3 >> 3) + 0x7FFF8000) = 0LL;
  }
  else
  {
    v3->start_tv_.tv_sec = 1172321806LL;
    *(_QWORD *)(((unsigned __int64)v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
  }
};

// Line 3133: range 0000000013DE7C6C-0000000013DE7EC0
void __cdecl PlayerQuestComp::trySettleQuestAfterUpdate(
        PlayerQuestComp *const this,
        QuestPtr *p_quest_ptr,
        bool is_notify)
{
  unsigned __int64 v3; // rbx
  __int64 v4; // rax
  unsigned __int64 v5; // r12
  std::__shared_ptr_access<Quest,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v6; // rax
  std::__shared_ptr_access<Quest,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v7; // rax
  uint32_t QuestId; // ecx
  std::__shared_ptr_access<Quest,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v9; // rax
  std::__shared_ptr_access<Quest,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v10; // rax
  uint32_t v11; // ecx
  common::milog::MiLogStream v13; // [rsp+20h] [rbp-90h] BYREF
  char v14[112]; // [rsp+40h] [rbp-70h] BYREF

  v3 = (unsigned __int64)v14;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_0(64LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "1 32 16 10 guard:3139";
  *(_QWORD *)(v3 + 16) = PlayerQuestComp::trySettleQuestAfterUpdate;
  v5 = v3 >> 3;
  *(_DWORD *)(v5 + 2147450880) = -235802127;
  *(_DWORD *)(v5 + 2147450884) = -202178560;
  if ( std::operator==<Quest>(p_quest_ptr, 0LL) )
  {
    common::milog::MiLogStream::create(
      &v13,
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/player/quest/player_quest_comp.cpp",
      "trySettleQuestAfterUpdate",
      3136);
    common::milog::MiLogStream::operator<<<char [18],(char *[18])0>(&v13, (const char (*)[18])"quest_ptr is null");
    common::milog::MiLogStream::~MiLogStream(&v13);
  }
  else
  {
    QuestOperatorGuard::QuestOperatorGuard((QuestOperatorGuard *const)(v3 + 32), &this->quest_op_);
    v6 = std::__shared_ptr_access<Quest,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Quest,(__gnu_cxx::_Lock_policy)2,false,false> *const)p_quest_ptr);
    if ( Quest::getState(v6) == QUEST_STATE_FINISHED )
    {
      v7 = std::__shared_ptr_access<Quest,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Quest,(__gnu_cxx::_Lock_policy)2,false,false> *const)p_quest_ptr);
      QuestId = Quest::getQuestId(v7);
      PlayerQuestComp::finishQuest(this, QuestId, is_notify);
    }
    else
    {
      v9 = std::__shared_ptr_access<Quest,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Quest,(__gnu_cxx::_Lock_policy)2,false,false> *const)p_quest_ptr);
      if ( Quest::getState(v9) == QUEST_STATE_FAILED )
      {
        v10 = std::__shared_ptr_access<Quest,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Quest,(__gnu_cxx::_Lock_policy)2,false,false> *const)p_quest_ptr);
        v11 = Quest::getQuestId(v10);
        PlayerQuestComp::failQuest(this, v11, is_notify);
      }
    }
    QuestOperatorGuard::~QuestOperatorGuard((QuestOperatorGuard *const)(v3 + 32));
  }
  if ( v14 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
  }
};

// Line 3156: range 0000000013DE7EC2-0000000013DE864C
void __fastcall PlayerQuestComp::triggerPostQuest(PlayerQuestComp *const this, uint32_t pre_task_id, bool is_notify)
{
  unsigned __int64 v3; // r13
  __int64 v4; // rax
  _DWORD *v5; // r12
  common::milog::MiLogStream *v6; // rax
  std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v7; // rax
  unsigned int *v8; // rax
  unsigned int *v9; // rdx
  std::_Rb_tree_const_iterator<unsigned int>::_Base_ptr M_node; // r15
  std::_Rb_tree_const_iterator<unsigned int>::_Base_ptr v11; // r14
  const unsigned int *v12; // rax
  bool v13; // cl
  const unsigned int *M_current; // r15
  const unsigned int *v15; // r14
  common::milog::MiLogStream *v16; // r14
  common::milog::MiLogStream *v17; // rax
  common::milog::MiLogStream *v18; // rax
  unsigned int val; // [rsp+28h] [rbp-148h] BYREF
  unsigned int quest_id; // [rsp+2Ch] [rbp-144h]
  std::set<unsigned int>::iterator __for_begin; // [rsp+30h] [rbp-140h] BYREF
  std::set<unsigned int>::iterator __for_end; // [rsp+38h] [rbp-138h] BYREF
  const data::QuestExcelConfig *quest_config_ptr; // [rsp+40h] [rbp-130h]
  const data::MainQuestExcelConfig *parent_quest_config_ptr; // [rsp+48h] [rbp-128h]
  const std::vector<unsigned int> *__for_range_0; // [rsp+50h] [rbp-120h]
  const unsigned int *quest_id_0; // [rsp+58h] [rbp-118h]
  const std::set<unsigned int> *quest_set_ptr; // [rsp+60h] [rbp-110h]
  const std::set<unsigned int> *__for_range; // [rsp+68h] [rbp-108h]
  std::shared_ptr<Config> v31; // [rsp+70h] [rbp-100h] BYREF
  common::milog::MiLogStream v32; // [rsp+80h] [rbp-F0h] BYREF
  char v33[208]; // [rsp+A0h] [rbp-D0h] BYREF

  v3 = (unsigned __int64)v33;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_2(160LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "4 32 4 20 parent_quest_id:3180 48 4 16 pre_task_id:3155 64 16 10 guard:3157 96 24 17 quest_id_vec:3165";
  *(_QWORD *)(v3 + 16) = PlayerQuestComp::triggerPostQuest;
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = -234556924;
  v5[536862722] = -219021312;
  v5[536862723] = -218103808;
  v5[536862724] = -202116109;
  *(_DWORD *)(v3 + 48) = pre_task_id;
  QuestOperatorGuard::QuestOperatorGuard((QuestOperatorGuard *const)(v3 + 64), &this->quest_op_);
  quest_config_ptr = PlayerQuestComp::findPlayerQuestExcelConfig(this, *(_DWORD *)(v3 + 48));
  if ( quest_config_ptr )
  {
    std::vector<unsigned int>::vector((std::vector<unsigned int> *const)(v3 + 96));
    if ( !PlayerQuestComp::isRandomQuest(this, *(_DWORD *)(v3 + 48)) )
    {
      ServiceBox::findService<GameserverService>();
      GameserverService::getConfig((GameserverService *const)&v31);
      v7 = std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false> *const)&v31);
      quest_set_ptr = QuestExcelConfigMgr::findPostQuestSet(
                        &v7->design_config.txt_config_mgr.quest_config_mgr,
                        *(_DWORD *)(v3 + 48));
      std::shared_ptr<Config>::~shared_ptr(&v31);
      if ( quest_set_ptr )
      {
        __for_range = quest_set_ptr;
        __for_begin._M_node = std::set<unsigned int>::begin(quest_set_ptr)._M_node;
        __for_end._M_node = std::set<unsigned int>::end(quest_set_ptr)._M_node;
        while ( std::operator!=(&__for_begin, &__for_end) )
        {
          v8 = (unsigned int *)std::_Rb_tree_const_iterator<unsigned int>::operator*(&__for_begin);
          v9 = v8;
          if ( *(_BYTE *)(((unsigned __int64)v8 >> 3) + 0x7FFF8000) != 0
            && (char)(((unsigned __int8)v8 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)v8 >> 3) + 0x7FFF8000) )
          {
            __asan_report_load4(v8);
          }
          quest_id = *v9;
          PlayerQuestComp::acceptQuest(this, quest_id, 0, is_notify);
          std::_Rb_tree_const_iterator<unsigned int>::operator++(&__for_begin);
        }
        M_node = std::set<unsigned int>::end(quest_set_ptr)._M_node;
        v11 = std::set<unsigned int>::begin(quest_set_ptr)._M_node;
        __for_begin._M_node = (std::_Rb_tree_const_iterator<unsigned int>::_Base_ptr)std::vector<unsigned int>::end((std::vector<unsigned int> *const)(v3 + 96))._M_current;
        __gnu_cxx::__normal_iterator<unsigned int const*,std::vector<unsigned int>>::__normal_iterator<unsigned int *>(
          (__gnu_cxx::__normal_iterator<unsigned int const*,std::vector<unsigned int> > *const)&__for_end,
          (const __gnu_cxx::__normal_iterator<unsigned int*,std::vector<unsigned int> > *)&__for_begin);
        std::vector<unsigned int>::insert<std::_Rb_tree_const_iterator<unsigned int>,void>(
          (std::vector<unsigned int> *const)(v3 + 96),
          (std::vector<unsigned int>::const_iterator)__for_end._M_node,
          (std::_Rb_tree_const_iterator<unsigned int>)v11,
          (std::_Rb_tree_const_iterator<unsigned int>)M_node);
      }
    }
    else
    {
      *(_DWORD *)(v3 + 32) = PlayerQuestComp::findParentQuestId(this, *(_DWORD *)(v3 + 48));
      parent_quest_config_ptr = PlayerQuestComp::findPlayerParentQuestExcelConfig(this, *(_DWORD *)(v3 + 32));
      if ( parent_quest_config_ptr )
      {
        __for_range_0 = &parent_quest_config_ptr->child_quest_list;
        __for_begin._M_node = (std::_Rb_tree_const_iterator<unsigned int>::_Base_ptr)std::vector<unsigned int>::begin(&parent_quest_config_ptr->child_quest_list)._M_current;
        __for_end._M_node = (std::_Rb_tree_const_iterator<unsigned int>::_Base_ptr)std::vector<unsigned int>::end(&parent_quest_config_ptr->child_quest_list)._M_current;
        while ( __gnu_cxx::operator!=<unsigned int const*,std::vector<unsigned int>>(
                  (const __gnu_cxx::__normal_iterator<unsigned int const*,std::vector<unsigned int> > *)&__for_begin,
                  (const __gnu_cxx::__normal_iterator<unsigned int const*,std::vector<unsigned int> > *)&__for_end) )
        {
          v12 = __gnu_cxx::__normal_iterator<unsigned int const*,std::vector<unsigned int>>::operator*((const __gnu_cxx::__normal_iterator<unsigned int const*,std::vector<unsigned int> > *const)&__for_begin);
          quest_id_0 = v12;
          v13 = is_notify;
          if ( *(_BYTE *)(((unsigned __int64)v12 >> 3) + 0x7FFF8000) != 0
            && (char)(((unsigned __int8)v12 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)v12 >> 3) + 0x7FFF8000) )
          {
            __asan_report_load4(v12);
          }
          PlayerQuestComp::acceptQuest(this, *quest_id_0, 0, v13);
          __gnu_cxx::__normal_iterator<unsigned int const*,std::vector<unsigned int>>::operator++((__gnu_cxx::__normal_iterator<unsigned int const*,std::vector<unsigned int> > *const)&__for_begin);
        }
        M_current = std::vector<unsigned int>::end(&parent_quest_config_ptr->child_quest_list)._M_current;
        v15 = std::vector<unsigned int>::begin(&parent_quest_config_ptr->child_quest_list)._M_current;
        __for_begin._M_node = (std::_Rb_tree_const_iterator<unsigned int>::_Base_ptr)std::vector<unsigned int>::end((std::vector<unsigned int> *const)(v3 + 96))._M_current;
        __gnu_cxx::__normal_iterator<unsigned int const*,std::vector<unsigned int>>::__normal_iterator<unsigned int *>(
          (__gnu_cxx::__normal_iterator<unsigned int const*,std::vector<unsigned int> > *const)&__for_end,
          (const __gnu_cxx::__normal_iterator<unsigned int*,std::vector<unsigned int> > *)&__for_begin);
        std::vector<unsigned int>::insert<__gnu_cxx::__normal_iterator<unsigned int const*,std::vector<unsigned int>>,void>(
          (std::vector<unsigned int> *const)(v3 + 96),
          (std::vector<unsigned int>::const_iterator)__for_end._M_node,
          (__gnu_cxx::__normal_iterator<unsigned int const*,std::vector<unsigned int> >)v15,
          (__gnu_cxx::__normal_iterator<unsigned int const*,std::vector<unsigned int> >)M_current);
      }
      else
      {
        common::milog::MiLogStream::create(
          &v32,
          &common::milog::MiLogDefault::default_log_obj_,
          3u,
          "./src/player/quest/player_quest_comp.cpp",
          "triggerPostQuest",
          3192);
        v16 = common::milog::MiLogStream::operator<<<char [46],(char *[46])0>(
                &v32,
                (const char (*)[46])"findPlayerParentQuestExcelConfig failed, uid:");
        if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
          __asan_report_load8(&this->player_);
        val = Player::getUid(this->player_);
        v17 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v16, &val);
        v18 = common::milog::MiLogStream::operator<<<char [18],(char *[18])0>(
                v17,
                (const char (*)[18])" parent_quest_id:");
        common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v18, (const unsigned int *)(v3 + 32));
        common::milog::MiLogStream::~MiLogStream(&v32);
      }
    }
    PlayerQuestComp::updateServerCondMeetStatus(this, (const std::vector<unsigned int> *)(v3 + 96), is_notify);
    if ( !std::vector<unsigned int>::empty(&quest_config_ptr->exclusive_npc_list)
      || !std::vector<unsigned int>::empty(&quest_config_ptr->exclusive_place_list) )
    {
      PlayerQuestComp::unregisterResource(this, *(_DWORD *)(v3 + 48), 1);
      PlayerQuestComp::notifyOccupiedQuest(
        this,
        *(_DWORD *)(v3 + 48),
        &quest_config_ptr->exclusive_npc_list,
        &quest_config_ptr->exclusive_place_list,
        is_notify);
    }
    std::vector<unsigned int>::~vector((std::vector<unsigned int> *const)(v3 + 96));
  }
  else
  {
    common::milog::MiLogStream::create(
      &v32,
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/player/quest/player_quest_comp.cpp",
      "triggerPostQuest",
      3161);
    v6 = common::milog::MiLogStream::operator<<<char [43],(char *[43])0>(
           &v32,
           (const char (*)[43])"findPlayerQuestExcelConfig fail. quest_id:");
    common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v6, (const unsigned int *)(v3 + 48));
    common::milog::MiLogStream::~MiLogStream(&v32);
  }
  QuestOperatorGuard::~QuestOperatorGuard((QuestOperatorGuard *const)(v3 + 64));
  if ( v33 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8010) = 0;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8010) = -168430091;
  }
};

// Line 3206: range 0000000013DE864E-0000000013DE8A2E
void __fastcall PlayerQuestComp::triggerQuestFinishEvent(PlayerQuestComp *const this, uint32_t quest_id)
{
  unsigned __int64 v2; // r13
  __int64 v3; // rax
  _DWORD *v4; // r12
  common::milog::MiLogStream *v5; // rax
  common::milog::MiLogStream *v6; // rax
  unsigned __int64 v7; // rax
  unsigned __int64 v8; // rdx
  common::milog::MiLogStream v9; // [rsp+10h] [rbp-F0h] BYREF
  char v10[208]; // [rsp+30h] [rbp-D0h] BYREF

  v2 = (unsigned __int64)v10;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_2(160LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "4 48 4 13 quest_id:3205 64 16 10 guard:3207 96 16 19 cur_avatar_ptr:3208 128 16 14 scene_ptr:3214";
  *(_QWORD *)(v2 + 16) = PlayerQuestComp::triggerQuestFinishEvent;
  v4 = (_DWORD *)(v2 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = -234556943;
  v4[536862722] = -219021312;
  v4[536862723] = -219021312;
  v4[536862724] = -202178560;
  *(_DWORD *)(v2 + 48) = quest_id;
  QuestOperatorGuard::QuestOperatorGuard((QuestOperatorGuard *const)(v2 + 64), &this->quest_op_);
  if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
    __asan_report_load8(&this->player_);
  Player::getCurAvatar((Player *const)(v2 + 96));
  if ( std::operator==<Avatar>((const std::shared_ptr<Avatar> *)(v2 + 96), 0LL) )
  {
    common::milog::MiLogStream::create(
      &v9,
      &common::milog::MiLogDefault::default_log_obj_,
      1u,
      "./src/player/quest/player_quest_comp.cpp",
      "triggerQuestFinishEvent",
      3211);
    v5 = common::milog::MiLogStream::operator<<<char [30],(char *[30])0>(
           &v9,
           (const char (*)[30])"getCurAvatar fails, quest_id:");
    common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v5, (const unsigned int *)(v2 + 48));
    common::milog::MiLogStream::~MiLogStream(&v9);
  }
  else
  {
    std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 96));
    Entity::getScene((const Entity *const)(v2 + 128));
    if ( std::operator==<Scene>((const std::shared_ptr<Scene> *)(v2 + 128), 0LL) )
    {
      common::milog::MiLogStream::create(
        &v9,
        &common::milog::MiLogDefault::default_log_obj_,
        1u,
        "./src/player/quest/player_quest_comp.cpp",
        "triggerQuestFinishEvent",
        3217);
      v6 = common::milog::MiLogStream::operator<<<char [26],(char *[26])0>(
             &v9,
             (const char (*)[26])"getScene fails, quest_id:");
      common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v6, (const unsigned int *)(v2 + 48));
      common::milog::MiLogStream::~MiLogStream(&v9);
    }
    else
    {
      v7 = (unsigned __int64)std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 128));
      if ( *(_BYTE *)((v7 >> 3) + 0x7FFF8000) )
        v7 = __asan_report_load8(v7);
      v8 = *(_QWORD *)v7 + 224LL;
      if ( *(_BYTE *)((v8 >> 3) + 0x7FFF8000) )
        v7 = __asan_report_load8(*(_QWORD *)v7 + 224LL);
      (*(void (__fastcall **)(unsigned __int64, _QWORD))v8)(v7, *(unsigned int *)(v2 + 48));
    }
    std::shared_ptr<Scene>::~shared_ptr((std::shared_ptr<Scene> *const)(v2 + 128));
  }
  std::shared_ptr<Avatar>::~shared_ptr((std::shared_ptr<Avatar> *const)(v2 + 96));
  QuestOperatorGuard::~QuestOperatorGuard((QuestOperatorGuard *const)(v2 + 64));
  if ( v10 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8010) = 0;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8010) = -168430091;
  }
};

// Line 3226: range 0000000013DE8A30-0000000013DE8FCC
_BOOL8 __fastcall PlayerQuestComp::canAcceptQuest(PlayerQuestComp *const this, uint32_t quest_id)
{
  _BOOL4 v2; // r14d
  unsigned __int64 v3; // r12
  __int64 v4; // rax
  _DWORD *v5; // r13
  common::milog::MiLogStream *v6; // rax
  common::milog::MiLogStream *v7; // rax
  ParentQuest *v8; // rax
  int v10; // r15d
  PlayerMpComp *MpComp; // rax
  PlayerCoopComp *CoopComp; // rax
  const std::vector<data::QuestCond> *p_accept_cond; // rcx
  PlayerCoopComp *v15; // rax
  char v16; // al
  _BOOL8 result; // rax
  const data::QuestExcelConfig *quest_config_ptr; // [rsp+20h] [rbp-C0h]
  const data::MainQuestExcelConfig *parent_quest_config_ptr; // [rsp+28h] [rbp-B8h]
  common::milog::MiLogStream v20; // [rsp+30h] [rbp-B0h] BYREF
  char v21[144]; // [rsp+50h] [rbp-90h] BYREF

  v3 = (unsigned __int64)v21;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_1(96LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "2 48 4 13 quest_id:3225 64 16 21 parent_quest_ptr:3250";
  *(_QWORD *)(v3 + 16) = PlayerQuestComp::canAcceptQuest;
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = -234556943;
  v5[536862722] = -202178560;
  *(_DWORD *)(v3 + 48) = quest_id;
  if ( PlayerQuestComp::isQuestExist(this, *(_DWORD *)(v3 + 48)) )
  {
    v2 = 0;
  }
  else
  {
    quest_config_ptr = PlayerQuestComp::findPlayerQuestExcelConfig(this, *(_DWORD *)(v3 + 48));
    if ( quest_config_ptr )
    {
      if ( *(_BYTE *)(((unsigned __int64)&quest_config_ptr->main_id >> 3) + 0x7FFF8000) != 0
        && (char)((((_BYTE)quest_config_ptr + 12) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&quest_config_ptr->main_id >> 3)
                                                                        + 0x7FFF8000) )
      {
        __asan_report_load4(&quest_config_ptr->main_id);
      }
      parent_quest_config_ptr = PlayerQuestComp::findPlayerParentQuestExcelConfig(this, quest_config_ptr->main_id);
      if ( parent_quest_config_ptr )
      {
        if ( *(_BYTE *)(((unsigned __int64)&parent_quest_config_ptr->repeatable >> 3) + 0x7FFF8000) != 0
          && (((unsigned __int8)parent_quest_config_ptr + 68) & 7) >= *(_BYTE *)(((unsigned __int64)&parent_quest_config_ptr->repeatable >> 3)
                                                                               + 0x7FFF8000) )
        {
          __asan_report_load1(&parent_quest_config_ptr->repeatable);
        }
        if ( parent_quest_config_ptr->repeatable )
          goto LABEL_51;
        if ( *(_BYTE *)(((unsigned __int64)&quest_config_ptr->main_id >> 3) + 0x7FFF8000) != 0
          && (char)((((_BYTE)quest_config_ptr + 12) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&quest_config_ptr->main_id >> 3)
                                                                          + 0x7FFF8000) )
        {
          __asan_report_load4(&quest_config_ptr->main_id);
        }
        PlayerQuestComp::findParentQuest(
          (const PlayerQuestComp *const)(v3 + 64),
          (__int64)this,
          quest_config_ptr->main_id);
        if ( std::operator!=<ParentQuest>((const std::shared_ptr<ParentQuest> *)(v3 + 64), 0LL)
          && (v8 = std::__shared_ptr_access<ParentQuest,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<ParentQuest,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 64)),
              ParentQuest::getTotalFinishCount(v8)) )
        {
          v2 = 0;
          v10 = 0;
        }
        else
        {
          v10 = 1;
        }
        std::shared_ptr<ParentQuest>::~shared_ptr((std::shared_ptr<ParentQuest> *const)(v3 + 64));
        if ( v10 == 1 )
        {
LABEL_51:
          if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
            __asan_report_load8(&this->player_);
          MpComp = Player::getMpComp(this->player_);
          if ( PlayerMpComp::isInMpMode(MpComp) && PlayerQuestComp::isSingleModeQuest(this, *(_DWORD *)(v3 + 48)) )
          {
            v2 = 0;
          }
          else
          {
            if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
              __asan_report_load8(&this->player_);
            CoopComp = Player::getCoopComp(this->player_);
            if ( !PlayerCoopComp::canAcceptCoopPointNormalQuest(CoopComp, *(_DWORD *)(v3 + 48)) )
            {
              v2 = 0;
            }
            else
            {
              p_accept_cond = &quest_config_ptr->accept_cond;
              if ( *(_BYTE *)(((unsigned __int64)&quest_config_ptr->accept_cond_comb >> 3) + 0x7FFF8000) != 0
                && *(_BYTE *)(((unsigned __int64)&quest_config_ptr->accept_cond_comb >> 3) + 0x7FFF8000) <= 3 )
              {
                __asan_report_load4(&quest_config_ptr->accept_cond_comb);
              }
              if ( PlayerQuestComp::checkCond(
                     this,
                     *(_DWORD *)(v3 + 48),
                     quest_config_ptr->accept_cond_comb,
                     p_accept_cond) )
              {
                goto LABEL_44;
              }
              if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
                __asan_report_load8(&this->player_);
              v15 = Player::getCoopComp(this->player_);
              if ( !PlayerCoopComp::canAcceptCoopPointStartQuest(v15, *(_DWORD *)(v3 + 48)) )
                v16 = 1;
              else
LABEL_44:
                v16 = 0;
              v2 = v16 == 0;
            }
          }
        }
      }
      else
      {
        common::milog::MiLogStream::create(
          &v20,
          &common::milog::MiLogDefault::default_log_obj_,
          3u,
          "./src/player/quest/player_quest_comp.cpp",
          "canAcceptQuest",
          3243);
        v7 = common::milog::MiLogStream::operator<<<char [57],(char *[57])0>(
               &v20,
               (const char (*)[57])"findPlayerParentQuestExcelConfig fails, parent_quest_id:");
        common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v7, &quest_config_ptr->main_id);
        common::milog::MiLogStream::~MiLogStream(&v20);
        v2 = 0;
      }
    }
    else
    {
      common::milog::MiLogStream::create(
        &v20,
        &common::milog::MiLogDefault::default_log_obj_,
        1u,
        "./src/player/quest/player_quest_comp.cpp",
        "canAcceptQuest",
        3237);
      v6 = common::milog::MiLogStream::operator<<<char [44],(char *[44])0>(
             &v20,
             (const char (*)[44])"findPlayerQuestExcelConfig fails, quest_id:");
      common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v6, (const unsigned int *)(v3 + 48));
      common::milog::MiLogStream::~MiLogStream(&v20);
      v2 = 0;
    }
  }
  result = v2;
  if ( v21 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8008) = 0;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8008) = -168430091;
  }
  return result;
};

// Line 3279: range 0000000013DE8FCE-0000000013DE9576
__int64 __fastcall PlayerQuestComp::canStartQuest(PlayerQuestComp *const this, uint32_t quest_id)
{
  unsigned __int64 v2; // r12
  __int64 v3; // rax
  _DWORD *v4; // r13
  common::milog::MiLogStream *v5; // rax
  common::milog::MiLogStream *v6; // rax
  common::milog::MiLogStream *v7; // r14
  std::__shared_ptr_access<Quest,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v8; // rax
  unsigned int v9; // r14d
  common::milog::MiLogStream *v10; // rax
  common::milog::MiLogStream *v11; // rax
  common::milog::MiLogStream *v12; // rax
  common::milog::MiLogStream *v13; // rax
  common::milog::MiLogStream *v14; // rax
  common::milog::MiLogStream *v15; // rax
  __int64 result; // rax
  unsigned int val; // [rsp+18h] [rbp-B8h] BYREF
  uint32_t parent_quest_id; // [rsp+1Ch] [rbp-B4h]
  common::milog::MiLogStream v19; // [rsp+20h] [rbp-B0h] BYREF
  char v20[144]; // [rsp+40h] [rbp-90h] BYREF

  v2 = (unsigned __int64)v20;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_1(96LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "2 48 4 13 quest_id:3278 64 16 14 quest_ptr:3280";
  *(_QWORD *)(v2 + 16) = PlayerQuestComp::canStartQuest;
  v4 = (_DWORD *)(v2 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = -234556943;
  v4[536862722] = -202178560;
  *(_DWORD *)(v2 + 48) = quest_id;
  PlayerQuestComp::findQuest((const PlayerQuestComp *const)(v2 + 64), (__int64)this, *(_DWORD *)(v2 + 48));
  if ( std::operator==<Quest>((const std::shared_ptr<Quest> *)(v2 + 64), 0LL) )
  {
    common::milog::MiLogStream::create(
      &v19,
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/player/quest/player_quest_comp.cpp",
      "canStartQuest",
      3283);
    v5 = common::milog::MiLogStream::operator<<<char [28],(char *[28])0>(
           &v19,
           (const char (*)[28])"findQuest failed, quest_id:");
    v6 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v5, (const unsigned int *)(v2 + 48));
    v7 = common::milog::MiLogStream::operator<<<char [6],(char *[6])0>(v6, (const char (*)[6])" uid:");
    if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
      __asan_report_load8(&this->player_);
LABEL_21:
    val = Player::getUid(this->player_);
    common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v7, &val);
    common::milog::MiLogStream::~MiLogStream(&v19);
    v9 = 0;
    goto LABEL_23;
  }
  v8 = std::__shared_ptr_access<Quest,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Quest,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 64));
  if ( Quest::getState(v8) != QUEST_STATE_UNSTARTED )
  {
    v9 = 0;
    goto LABEL_23;
  }
  parent_quest_id = PlayerQuestComp::findParentQuestId(this, *(_DWORD *)(v2 + 48));
  if ( !PlayerQuestComp::canStartParentQuest(this, parent_quest_id) )
  {
    common::milog::MiLogStream::create(
      &v19,
      &common::milog::MiLogDefault::default_log_obj_,
      1u,
      "./src/player/quest/player_quest_comp.cpp",
      "canStartQuest",
      3296);
    v10 = common::milog::MiLogStream::operator<<<char [37],(char *[37])0>(
            &v19,
            (const char (*)[37])"parent quest cannot start, quest_id:");
    v11 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v10, (const unsigned int *)(v2 + 48));
    v7 = common::milog::MiLogStream::operator<<<char [6],(char *[6])0>(v11, (const char (*)[6])" uid:");
    if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
      __asan_report_load8(&this->player_);
    goto LABEL_21;
  }
  if ( !PlayerQuestComp::checkIsQuestPlaceAllAvailable(this, *(_DWORD *)(v2 + 48)) )
  {
    common::milog::MiLogStream::create(
      &v19,
      &common::milog::MiLogDefault::default_log_obj_,
      1u,
      "./src/player/quest/player_quest_comp.cpp",
      "canStartQuest",
      3303);
    v12 = common::milog::MiLogStream::operator<<<char [46],(char *[46])0>(
            &v19,
            (const char (*)[46])"checkIsQuestPlaceAllAvailable fail, quest_id:");
    v13 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v12, (const unsigned int *)(v2 + 48));
    v7 = common::milog::MiLogStream::operator<<<char [6],(char *[6])0>(v13, (const char (*)[6])" uid:");
    if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
      __asan_report_load8(&this->player_);
    goto LABEL_21;
  }
  if ( !PlayerQuestComp::checkIsQuestNpcAllAvailable(this, *(_DWORD *)(v2 + 48)) )
  {
    common::milog::MiLogStream::create(
      &v19,
      &common::milog::MiLogDefault::default_log_obj_,
      1u,
      "./src/player/quest/player_quest_comp.cpp",
      "canStartQuest",
      3309);
    v14 = common::milog::MiLogStream::operator<<<char [44],(char *[44])0>(
            &v19,
            (const char (*)[44])"checkIsQuestNpcAllAvailable fail, quest_id:");
    v15 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v14, (const unsigned int *)(v2 + 48));
    v7 = common::milog::MiLogStream::operator<<<char [6],(char *[6])0>(v15, (const char (*)[6])" uid:");
    if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
      __asan_report_load8(&this->player_);
    goto LABEL_21;
  }
  v9 = 1;
LABEL_23:
  std::shared_ptr<Quest>::~shared_ptr((std::shared_ptr<Quest> *const)(v2 + 64));
  result = v9;
  if ( v20 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8008) = 0;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8008) = -168430091;
  }
  return result;
};

// Line 3317: range 0000000013DE9578-0000000013DE9AA4
__int64 __fastcall PlayerQuestComp::canStartParentQuest(PlayerQuestComp *const this, uint32_t parent_quest_id)
{
  unsigned __int64 v2; // rbx
  __int64 v3; // rax
  unsigned __int64 v4; // r12
  std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v5; // rax
  uint32_t in_activity_need_player_level; // r14d
  PlayerBasicComp *BasicComp; // rax
  common::milog::MiLogStream *v8; // rax
  common::milog::MiLogStream *v9; // rax
  common::milog::MiLogStream *v10; // r13
  __int64 result; // rax
  uint32_t need_player_level; // r14d
  PlayerBasicComp *v13; // rax
  common::milog::MiLogStream *v14; // rax
  common::milog::MiLogStream *v15; // rax
  time_t Now; // rcx
  unsigned int val; // [rsp+14h] [rbp-ACh] BYREF
  const data::ChapterExcelConfig *chapter_config_ptr; // [rsp+18h] [rbp-A8h]
  std::shared_ptr<Config> v19; // [rsp+20h] [rbp-A0h] BYREF
  common::milog::MiLogStream v20; // [rsp+30h] [rbp-90h] BYREF
  char v21[112]; // [rsp+50h] [rbp-70h] BYREF

  v2 = (unsigned __int64)v21;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_0(64LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "1 32 4 20 parent_quest_id:3316";
  *(_QWORD *)(v2 + 16) = PlayerQuestComp::canStartParentQuest;
  v4 = v2 >> 3;
  *(_DWORD *)(v4 + 2147450880) = -235802127;
  *(_DWORD *)(v4 + 2147450884) = -202116348;
  *(_DWORD *)(v2 + 32) = parent_quest_id;
  ServiceBox::findService<GameserverService>();
  GameserverService::getConfig((GameserverService *const)&v19);
  v5 = std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false> *const)&v19);
  chapter_config_ptr = QuestExcelConfigMgr::findChapterConfigByParentQuestId(
                         &v5->design_config.txt_config_mgr.quest_config_mgr,
                         *(_DWORD *)(v2 + 32));
  std::shared_ptr<Config>::~shared_ptr(&v19);
  if ( !chapter_config_ptr )
    goto LABEL_28;
  if ( *(_BYTE *)(((unsigned __int64)&chapter_config_ptr->id >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&chapter_config_ptr->id >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4(&chapter_config_ptr->id);
  }
  if ( PlayerQuestComp::isChapterPreOpen(this, chapter_config_ptr->id) )
  {
    if ( *(_BYTE *)(((unsigned __int64)&chapter_config_ptr->in_activity_need_player_level >> 3) + 0x7FFF8000) != 0
      && (char)((((_BYTE)chapter_config_ptr + 68) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&chapter_config_ptr->in_activity_need_player_level >> 3)
                                                                        + 0x7FFF8000) )
    {
      __asan_report_load4(&chapter_config_ptr->in_activity_need_player_level);
    }
    in_activity_need_player_level = chapter_config_ptr->in_activity_need_player_level;
    if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
      __asan_report_load8(&this->player_);
    BasicComp = Player::getBasicComp(this->player_);
    if ( in_activity_need_player_level > PlayerBasicComp::getLevel(BasicComp) )
    {
      common::milog::MiLogStream::create(
        &v20,
        &common::milog::MiLogDefault::default_log_obj_,
        1u,
        "./src/player/quest/player_quest_comp.cpp",
        "canStartParentQuest",
        3328);
      v8 = common::milog::MiLogStream::operator<<<char [63],(char *[63])0>(
             &v20,
             (const char (*)[63])"parent quest level not satisfied in activity, parent_quest_id:");
      v9 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v8, (const unsigned int *)(v2 + 32));
      v10 = common::milog::MiLogStream::operator<<<char [6],(char *[6])0>(v9, (const char (*)[6])" uid:");
      if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
        __asan_report_load8(&this->player_);
LABEL_15:
      val = Player::getUid(this->player_);
      common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v10, &val);
      common::milog::MiLogStream::~MiLogStream(&v20);
      result = 0LL;
      goto LABEL_29;
    }
  }
  else
  {
    if ( *(_BYTE *)(((unsigned __int64)&chapter_config_ptr->need_player_level >> 3) + 0x7FFF8000) != 0
      && (char)((((_BYTE)chapter_config_ptr + 20) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&chapter_config_ptr->need_player_level >> 3)
                                                                        + 0x7FFF8000) )
    {
      __asan_report_load4(&chapter_config_ptr->need_player_level);
    }
    need_player_level = chapter_config_ptr->need_player_level;
    if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
      __asan_report_load8(&this->player_);
    v13 = Player::getBasicComp(this->player_);
    if ( need_player_level > PlayerBasicComp::getLevel(v13) )
    {
      common::milog::MiLogStream::create(
        &v20,
        &common::milog::MiLogDefault::default_log_obj_,
        1u,
        "./src/player/quest/player_quest_comp.cpp",
        "canStartParentQuest",
        3336);
      v14 = common::milog::MiLogStream::operator<<<char [51],(char *[51])0>(
              &v20,
              (const char (*)[51])"parent quest level not satisfied, parent_quest_id:");
      v15 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v14, (const unsigned int *)(v2 + 32));
      v10 = common::milog::MiLogStream::operator<<<char [6],(char *[6])0>(v15, (const char (*)[6])" uid:");
      if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
        __asan_report_load8(&this->player_);
      goto LABEL_15;
    }
  }
  Now = common::tools::TimeUtils::getNow();
  if ( *(_BYTE *)(((unsigned __int64)&chapter_config_ptr->need_begin_time >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&chapter_config_ptr->need_begin_time >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4(&chapter_config_ptr->need_begin_time);
  }
  if ( Now < chapter_config_ptr->need_begin_time )
    result = 0LL;
  else
LABEL_28:
    result = 1LL;
LABEL_29:
  if ( v21 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 3354: range 0000000013DE9AA6-0000000013DE9CFF
bool __cdecl PlayerQuestComp::checkCond(
        PlayerQuestComp *const this,
        uint32_t quest_id,
        data::LogicType logic_type,
        const std::vector<data::QuestCond> *cond_vec)
{
  unsigned __int64 v4; // rbx
  __int64 v5; // rax
  _DWORD *v6; // r13
  std::vector<bool>::size_type v7; // rax
  bool v8; // r14
  bool result; // al
  std::vector<data::QuestCond>::const_iterator __for_begin; // [rsp+20h] [rbp-D0h] BYREF
  std::vector<data::QuestCond>::const_iterator __for_end; // [rsp+28h] [rbp-C8h] BYREF
  const std::vector<data::QuestCond> *__for_range; // [rsp+30h] [rbp-C0h]
  const data::QuestCond *cond; // [rsp+38h] [rbp-B8h]
  char v16[176]; // [rsp+40h] [rbp-B0h] BYREF

  v4 = (unsigned __int64)v16;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v5 = __asan_stack_malloc_1(128LL);
    if ( v5 )
      v4 = v5;
  }
  *(_QWORD *)v4 = 1102416563LL;
  *(_QWORD *)(v4 + 8) = "1 48 40 19 cond_check_vec:3360";
  *(_QWORD *)(v4 + 16) = PlayerQuestComp::checkCond;
  v6 = (_DWORD *)(v4 >> 3);
  v6[536862720] = -235802127;
  v6[536862721] = 61937;
  v6[536862722] = -218103808;
  v6[536862723] = -202116109;
  if ( logic_type == LOGIC_NONE )
    logic_type = LOGIC_AND;
  std::vector<bool>::vector((std::vector<bool> *const)(v4 + 48));
  v7 = std::vector<data::QuestCond>::size(cond_vec);
  std::vector<bool>::reserve((std::vector<bool> *const)(v4 + 48), v7);
  __for_range = cond_vec;
  __for_begin._M_current = std::vector<data::QuestCond>::begin(cond_vec)._M_current;
  __for_end._M_current = std::vector<data::QuestCond>::end(cond_vec)._M_current;
  while ( __gnu_cxx::operator!=<data::QuestCond const*,std::vector<data::QuestCond>>(&__for_begin, &__for_end) )
  {
    cond = __gnu_cxx::__normal_iterator<data::QuestCond const*,std::vector<data::QuestCond>>::operator*(&__for_begin);
    if ( PlayerQuestComp::checkCond(this, quest_id, cond) )
      std::vector<bool>::push_back((std::vector<bool> *const)(v4 + 48), 1);
    else
      std::vector<bool>::push_back((std::vector<bool> *const)(v4 + 48), 0);
    __gnu_cxx::__normal_iterator<data::QuestCond const*,std::vector<data::QuestCond>>::operator++(&__for_begin);
  }
  v8 = CommonMiscs::evaluateLogicComb(logic_type, (const std::vector<bool> *)(v4 + 48));
  std::vector<bool>::~vector((std::vector<bool> *const)(v4 + 48));
  result = v8;
  if ( v16 == (char *)v4 )
  {
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v4 = 1172321806LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 3378: range 0000000013DE9D00-0000000013DEE6DD
__int64 __fastcall PlayerQuestComp::checkCond(
        PlayerQuestComp *const this,
        uint32_t quest_id,
        const data::QuestCond *cond)
{
  uint32_t isExpiredScheduleIdInDb; // r12d
  unsigned __int64 v4; // r14
  __int64 v5; // rax
  _DWORD *v6; // r13
  uint32_t *v7; // rax
  uint32_t *v8; // rdx
  data::QuestState *v9; // rax
  data::QuestState *v10; // rdx
  uint32_t *v11; // rax
  uint32_t *v12; // rdx
  data::QuestState *v13; // rax
  data::QuestState *v14; // rdx
  uint32_t *v15; // rax
  uint32_t *v16; // rdx
  uint32_t *v17; // rax
  uint32_t *v18; // rdx
  PlayerItemComp *ItemComp; // rax
  data::ElementType *v20; // rax
  data::ElementType *v21; // rdx
  int v22; // r15d
  unsigned __int64 v23; // rax
  unsigned __int64 v24; // rdx
  data::ElementType *v25; // rax
  data::ElementType *v26; // rdx
  int v27; // r15d
  unsigned __int64 v28; // rax
  unsigned __int64 v29; // rdx
  std::vector<int>::const_reference v30; // rax
  _DWORD *v31; // rdx
  int v32; // r15d
  std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v33; // rax
  uint32_t CityComp; // r12d
  std::vector<int>::const_reference v35; // rax
  std::__shared_ptr_access<City,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v36; // rax
  uint32_t *v37; // rax
  uint32_t *v38; // rdx
  uint32_t *v39; // rax
  uint32_t *v40; // rdx
  uint32_t *v41; // rax
  uint32_t *v42; // rdx
  PlayerItemComp *v43; // rax
  uint32_t *v44; // rax
  uint32_t *v45; // rdx
  PlayerDailyTaskComp *DailyTaskComp; // rax
  uint32_t v47; // eax
  uint32_t *v48; // rax
  uint32_t *v49; // rdx
  std::vector<int>::const_reference v50; // rax
  _DWORD *v51; // rdx
  PlayerBasicComp *BasicComp; // rax
  uint32_t *v53; // rax
  uint32_t *v54; // rdx
  PlayerBasicComp *v55; // rax
  uint32_t *v56; // rax
  uint32_t *v57; // rdx
  PlayerGivingComp *GivingComp; // rax
  uint32_t v59; // eax
  uint32_t *v60; // rax
  uint32_t *v61; // rdx
  uint32_t *v62; // rax
  uint32_t *v63; // rdx
  PlayerGivingComp *v64; // rax
  uint32_t v65; // eax
  __gnu_cxx::__alloc_traits<std::allocator<int>,int>::value_type *v66; // rax
  int32_t *v67; // rdx
  __gnu_cxx::__alloc_traits<std::allocator<int>,int>::value_type *v68; // rax
  int32_t *v69; // rdx
  ParentQuest *v70; // rax
  uint32_t *v71; // rax
  uint32_t *v72; // rdx
  std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v73; // rax
  std::vector<int>::const_reference v74; // rax
  _DWORD *v75; // rdx
  unsigned int *v76; // rax
  uint32_t *v77; // rdx
  PlayerActivityComp *ActivityComp; // rax
  std::vector<int>::const_reference v79; // rax
  _DWORD *v80; // rdx
  unsigned int *v81; // rax
  uint32_t *v82; // rdx
  PlayerActivityComp *v83; // rax
  uint32_t *v84; // rax
  uint32_t *v85; // rdx
  uint32_t *v86; // rax
  uint32_t *v87; // rdx
  std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v88; // rax
  uint32_t v89; // eax
  std::__shared_ptr_access<BaseActivity,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v90; // rax
  std::__shared_ptr_access<BaseActivity,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v92; // rax
  std::__shared_ptr_access<BaseActivity,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v93; // rax
  uint32_t v94; // eax
  uint32_t *v95; // rax
  uint32_t *v96; // rdx
  PlayerDailyTaskComp *v97; // rbx
  uint32_t *v98; // rax
  uint32_t *v99; // rdx
  __gnu_cxx::__alloc_traits<std::allocator<int>,int>::value_type *v100; // rax
  int32_t *v101; // rdx
  std::vector<int>::const_reference v102; // rax
  _DWORD *v103; // rdx
  __gnu_cxx::__alloc_traits<std::allocator<int>,int>::value_type *v104; // rax
  int32_t *v105; // rdx
  __gnu_cxx::__alloc_traits<std::allocator<int>,int>::value_type *v106; // rax
  int *v107; // rdx
  int v108; // ebx
  PlayerTalkComp *TalkComp; // rax
  uint32_t *v110; // rax
  uint32_t *v111; // rdx
  __gnu_cxx::__alloc_traits<std::allocator<int>,int>::value_type *v112; // rax
  int32_t *v113; // rdx
  std::vector<int>::const_reference v114; // rax
  _DWORD *v115; // rdx
  __gnu_cxx::__alloc_traits<std::allocator<int>,int>::value_type *v116; // rax
  int32_t *v117; // rdx
  uint32_t *v118; // rax
  uint32_t *v119; // rdx
  PlayerPersonalLineComp *PersonalLineComp; // rax
  std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v121; // rax
  PlayerReputationComp *ReputationComp; // rax
  uint32_t v123; // eax
  uint32_t *v124; // rax
  uint32_t *v125; // rdx
  PlayerCoopComp *CoopComp; // rax
  uint32_t v127; // eax
  uint32_t *v128; // rax
  uint32_t *v129; // rdx
  uint32_t *v130; // rax
  uint32_t *v131; // rdx
  PlayerCoopComp *v132; // rax
  uint32_t v133; // eax
  __gnu_cxx::__alloc_traits<std::allocator<int>,int>::value_type *v134; // rax
  int *v135; // rdx
  int v136; // ebx
  uint32_t *v137; // rax
  uint32_t *v138; // rdx
  uint32_t *v139; // rax
  uint32_t *v140; // rdx
  PlayerBasicComp *v141; // rax
  PlayerBasicComp *v142; // rax
  uint32_t *v143; // rax
  uint32_t *v144; // rdx
  std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v145; // rax
  bool v146; // r12
  std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v147; // rax
  std::vector<int>::const_reference v148; // rax
  _DWORD *v149; // rdx
  uint32_t *v150; // rax
  uint32_t *v151; // rdx
  uint32_t *v152; // rax
  uint32_t *v153; // rdx
  common::milog::MiLogStream *v154; // rax
  common::milog::MiLogStream *v155; // rax
  common::milog::MiLogStream *v156; // rax
  common::milog::MiLogStream *v157; // rax
  std::vector<int>::const_reference v158; // rax
  _DWORD *v159; // rdx
  uint32_t *v160; // rax
  uint32_t *v161; // rdx
  uint32_t *v162; // rax
  uint32_t *v163; // rdx
  std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v164; // rax
  common::milog::MiLogStream *v165; // rax
  common::milog::MiLogStream *v166; // rax
  common::milog::MiLogStream *v167; // rax
  common::milog::MiLogStream *v168; // rax
  uint32_t *v169; // rax
  uint32_t *v170; // rdx
  PlayerItemComp *v171; // rax
  std::vector<int>::const_reference v172; // rax
  _DWORD *v173; // rdx
  PlayerSceneComp *SceneComp; // rax
  uint32_t v175; // eax
  std::vector<int>::const_reference v176; // rax
  std::vector<int>::const_reference v177; // rax
  Scene *v178; // rax
  uint32_t BlockGroupComp; // eax
  uint32_t v180; // eax
  std::__shared_ptr_access<Region,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v181; // r12
  std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v182; // rax
  uint32_t EntityId; // eax
  std::vector<int>::const_reference v184; // rax
  _DWORD *v185; // rdx
  std::vector<int>::const_reference v186; // rax
  _DWORD *v187; // rdx
  uint32_t *v188; // rax
  uint32_t *v189; // rdx
  PlayerAranaraCollectionComp *AranaraCollectionComp; // rax
  common::milog::MiLogStream *v191; // rax
  common::milog::MiLogStream *v192; // rax
  common::milog::MiLogStream *v193; // rax
  common::milog::MiLogStream *v194; // rax
  common::milog::MiLogStream *v195; // rax
  uint32_t *v196; // rax
  uint32_t *v197; // rdx
  uint32_t *v198; // rax
  uint32_t *v199; // rdx
  PlayerGCGComp *GCGComp; // rax
  GCGBasic *Basic; // rax
  uint32_t v202; // eax
  __int64 result; // rax
  bool is_chapter_pre_open; // [rsp+24h] [rbp-29Ch]
  bool is_unlock; // [rsp+25h] [rbp-29Bh]
  bool is_open; // [rsp+26h] [rbp-29Ah]
  bool is_can_change; // [rsp+27h] [rbp-299h]
  uint32_t climate_area_id; // [rsp+28h] [rbp-298h]
  uint32_t level; // [rsp+2Ch] [rbp-294h]
  uint32_t target_state; // [rsp+30h] [rbp-290h]
  uint32_t schedule_id; // [rsp+34h] [rbp-28Ch]
  uint32_t cond_id_0; // [rsp+38h] [rbp-288h]
  uint32_t item_id_1; // [rsp+48h] [rbp-278h]
  uint32_t cond_is_male; // [rsp+4Ch] [rbp-274h]
  PlayerGenderType player_gender_type; // [rsp+50h] [rbp-270h]
  uint32_t key_0; // [rsp+54h] [rbp-26Ch]
  uint32_t day_delta; // [rsp+58h] [rbp-268h]
  uint32_t time_var; // [rsp+5Ch] [rbp-264h]
  uint32_t now_0; // [rsp+60h] [rbp-260h]
  uint32_t time_offset_sec; // [rsp+64h] [rbp-25Ch]
  uint32_t key; // [rsp+68h] [rbp-258h]
  uint32_t hour_delta; // [rsp+6Ch] [rbp-254h]
  uint32_t schedule_id_0; // [rsp+70h] [rbp-250h]
  uint32_t end_time; // [rsp+74h] [rbp-24Ch]
  uint32_t now; // [rsp+78h] [rbp-248h]
  uint32_t climate_type; // [rsp+7Ch] [rbp-244h]
  uint32_t main_coop_id_0; // [rsp+80h] [rbp-240h]
  uint32_t save_point_id; // [rsp+84h] [rbp-23Ch]
  uint32_t main_coop_id; // [rsp+88h] [rbp-238h]
  uint32_t personal_line_id; // [rsp+8Ch] [rbp-234h]
  uint32_t parent_quest_id_0; // [rsp+90h] [rbp-230h]
  int32_t value_1; // [rsp+98h] [rbp-228h]
  uint32_t daily_task_id; // [rsp+9Ch] [rbp-224h]
  int32_t value_0; // [rsp+A0h] [rbp-220h]
  uint32_t cond_id; // [rsp+A4h] [rbp-21Ch]
  uint32_t activity_id_0; // [rsp+A8h] [rbp-218h]
  uint32_t activity_id; // [rsp+ACh] [rbp-214h]
  int parent_quest_id; // [rsp+B0h] [rbp-210h]
  int32_t index; // [rsp+B4h] [rbp-20Ch]
  int32_t value; // [rsp+B8h] [rbp-208h]
  int32_t quest_var; // [rsp+BCh] [rbp-204h]
  uint32_t giving_id_0; // [rsp+C0h] [rbp-200h]
  uint32_t giving_group_id; // [rsp+C4h] [rbp-1FCh]
  uint32_t giving_id; // [rsp+C8h] [rbp-1F8h]
  uint32_t player_level; // [rsp+CCh] [rbp-1F4h]
  uint32_t open_state_type; // [rsp+D0h] [rbp-1F0h]
  uint32_t task_id; // [rsp+D4h] [rbp-1ECh]
  uint32_t item_id_0; // [rsp+D8h] [rbp-1E8h]
  uint32_t item_count_0; // [rsp+DCh] [rbp-1E4h]
  data::ElementType elem_type_0; // [rsp+E4h] [rbp-1DCh]
  data::ElementType elem_type; // [rsp+E8h] [rbp-1D8h]
  uint32_t item_id; // [rsp+ECh] [rbp-1D4h]
  uint32_t item_count; // [rsp+F0h] [rbp-1D0h]
  uint32_t param_quest_id_0; // [rsp+F8h] [rbp-1C8h]
  data::QuestState quest_state_0; // [rsp+FCh] [rbp-1C4h]
  uint32_t param_quest_id; // [rsp+100h] [rbp-1C0h]
  data::QuestState quest_state; // [rsp+104h] [rbp-1BCh]
  std::unordered_set<unsigned int>::const_iterator __for_begin; // [rsp+108h] [rbp-1B8h] BYREF
  std::unordered_set<unsigned int>::const_iterator __for_end; // [rsp+110h] [rbp-1B0h] BYREF
  const std::vector<int> *__for_range_1; // [rsp+118h] [rbp-1A8h]
  PlayerAvatarComp *avatar_comp; // [rsp+120h] [rbp-1A0h]
  const data::DbActivityScheduleConfigMgr *db_activity_schedule_config; // [rsp+128h] [rbp-198h]
  const data::ChapterExcelConfig *chapter_config_ptr; // [rsp+130h] [rbp-190h]
  const std::unordered_set<unsigned int> *activity_id_set; // [rsp+138h] [rbp-188h]
  const std::unordered_set<unsigned int> *__for_range_0; // [rsp+140h] [rbp-180h]
  const std::unordered_set<unsigned int> *__for_range; // [rsp+148h] [rbp-178h]
  common::milog::MiLogStream v268; // [rsp+150h] [rbp-170h] BYREF
  char v269[336]; // [rsp+170h] [rbp-150h] BYREF

  v4 = (unsigned __int64)v269;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v5 = __asan_stack_malloc_3(288LL);
    if ( v5 )
      v4 = v5;
  }
  *(_QWORD *)v4 = 1102416563LL;
  *(_QWORD *)(v4 + 8) = "9 32 4 20 collection_type:3924 48 4 18 collection_id:3925 64 4 10 state:3927 80 4 13 quest_id:33"
                        "77 96 16 14 scene_ptr:3904 128 16 14 group_ptr:3907 160 16 15 region_ptr:3910 192 16 15 avatar_p"
                        "tr:3912 224 24 21 level_tag_id_vec:3891";
  *(_QWORD *)(v4 + 16) = PlayerQuestComp::checkCond;
  v6 = (_DWORD *)(v4 >> 3);
  v6[536862720] = -235802127;
  v6[536862721] = -234556924;
  v6[536862722] = -234556924;
  v6[536862723] = -219021312;
  v6[536862724] = -219021312;
  v6[536862725] = -219021312;
  v6[536862726] = -219021312;
  v6[536862727] = -218103808;
  v6[536862728] = -202116109;
  *(_DWORD *)(v4 + 80) = quest_id;
  if ( *(_BYTE *)(((unsigned __int64)&cond->type >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&cond->type >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4(&cond->type);
  }
  switch ( cond->type )
  {
    case QUEST_COND_STATE_EQUAL:
      if ( std::vector<int>::size(&cond->param) > 1 )
      {
        v7 = (uint32_t *)std::vector<int>::operator[](&cond->param, 0LL);
        v8 = v7;
        if ( *(_BYTE *)(((unsigned __int64)v7 >> 3) + 0x7FFF8000) != 0
          && (char)(((unsigned __int8)v7 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)v7 >> 3) + 0x7FFF8000) )
        {
          __asan_report_load4(v7);
        }
        param_quest_id = *v8;
        v9 = (data::QuestState *)std::vector<int>::operator[](&cond->param, 1uLL);
        v10 = v9;
        if ( *(_BYTE *)(((unsigned __int64)v9 >> 3) + 0x7FFF8000) != 0
          && (char)(((unsigned __int8)v9 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)v9 >> 3) + 0x7FFF8000) )
        {
          __asan_report_load4(v9);
        }
        quest_state = *v10;
        if ( quest_state != PlayerQuestComp::getQuestState(this, param_quest_id) )
          goto LABEL_431;
        isExpiredScheduleIdInDb = 1;
      }
      else
      {
        common::milog::MiLogStream::create(
          &v268,
          &common::milog::MiLogDefault::default_log_obj_,
          4u,
          "./src/player/quest/player_quest_comp.cpp",
          "checkCond",
          3385);
        common::milog::MiLogStream::operator<<<char [23],(char *[23])0>(
          &v268,
          (const char (*)[23])"param size less than 2");
        common::milog::MiLogStream::~MiLogStream(&v268);
        isExpiredScheduleIdInDb = 0;
      }
      break;
    case QUEST_COND_STATE_NOT_EQUAL:
      if ( std::vector<int>::size(&cond->param) > 1 )
      {
        v11 = (uint32_t *)std::vector<int>::operator[](&cond->param, 0LL);
        v12 = v11;
        if ( *(_BYTE *)(((unsigned __int64)v11 >> 3) + 0x7FFF8000) != 0
          && (char)(((unsigned __int8)v11 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)v11 >> 3) + 0x7FFF8000) )
        {
          __asan_report_load4(v11);
        }
        param_quest_id_0 = *v12;
        v13 = (data::QuestState *)std::vector<int>::operator[](&cond->param, 1uLL);
        v14 = v13;
        if ( *(_BYTE *)(((unsigned __int64)v13 >> 3) + 0x7FFF8000) != 0
          && (char)(((unsigned __int8)v13 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)v13 >> 3) + 0x7FFF8000) )
        {
          __asan_report_load4(v13);
        }
        quest_state_0 = *v14;
        if ( quest_state_0 == PlayerQuestComp::getQuestState(this, param_quest_id_0) )
          goto LABEL_431;
        isExpiredScheduleIdInDb = 1;
      }
      else
      {
        common::milog::MiLogStream::create(
          &v268,
          &common::milog::MiLogDefault::default_log_obj_,
          4u,
          "./src/player/quest/player_quest_comp.cpp",
          "checkCond",
          3400);
        common::milog::MiLogStream::operator<<<char [23],(char *[23])0>(
          &v268,
          (const char (*)[23])"param size less than 2");
        common::milog::MiLogStream::~MiLogStream(&v268);
        isExpiredScheduleIdInDb = 0;
      }
      break;
    case QUEST_COND_PACK_HAVE_ITEM:
      if ( std::vector<int>::size(&cond->param) > 1 )
      {
        v15 = (uint32_t *)std::vector<int>::operator[](&cond->param, 0LL);
        v16 = v15;
        if ( *(_BYTE *)(((unsigned __int64)v15 >> 3) + 0x7FFF8000) != 0
          && (char)(((unsigned __int8)v15 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)v15 >> 3) + 0x7FFF8000) )
        {
          __asan_report_load4(v15);
        }
        item_id = *v16;
        v17 = (uint32_t *)std::vector<int>::operator[](&cond->param, 1uLL);
        v18 = v17;
        if ( *(_BYTE *)(((unsigned __int64)v17 >> 3) + 0x7FFF8000) != 0
          && (char)(((unsigned __int8)v17 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)v17 >> 3) + 0x7FFF8000) )
        {
          __asan_report_load4(v17);
        }
        item_count = *v18;
        if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
          __asan_report_load8(&this->player_);
        ItemComp = Player::getItemComp(this->player_);
        if ( PlayerItemComp::getPackMaterialCount(ItemComp, item_id) < item_count )
          goto LABEL_431;
        isExpiredScheduleIdInDb = 1;
      }
      else
      {
        common::milog::MiLogStream::create(
          &v268,
          &common::milog::MiLogDefault::default_log_obj_,
          4u,
          "./src/player/quest/player_quest_comp.cpp",
          "checkCond",
          3415);
        common::milog::MiLogStream::operator<<<char [23],(char *[23])0>(
          &v268,
          (const char (*)[23])"param size less than 2");
        common::milog::MiLogStream::~MiLogStream(&v268);
        isExpiredScheduleIdInDb = 0;
      }
      break;
    case QUEST_COND_AVATAR_ELEMENT_EQUAL:
      if ( std::vector<int>::empty(&cond->param) )
      {
        common::milog::MiLogStream::create(
          &v268,
          &common::milog::MiLogDefault::default_log_obj_,
          4u,
          "./src/player/quest/player_quest_comp.cpp",
          "checkCond",
          3431);
        common::milog::MiLogStream::operator<<<char [23],(char *[23])0>(
          &v268,
          (const char (*)[23])"param size less than 1");
        common::milog::MiLogStream::~MiLogStream(&v268);
        isExpiredScheduleIdInDb = 0;
      }
      else
      {
        v20 = (data::ElementType *)std::vector<int>::operator[](&cond->param, 0LL);
        v21 = v20;
        if ( *(_BYTE *)(((unsigned __int64)v20 >> 3) + 0x7FFF8000) != 0
          && (char)(((unsigned __int8)v20 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)v20 >> 3) + 0x7FFF8000) )
        {
          __asan_report_load4(v20);
        }
        elem_type = *v21;
        if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
          __asan_report_load8(&this->player_);
        Player::getCurAvatar((Player *const)(v4 + 192));
        if ( std::operator==<Avatar>((const std::shared_ptr<Avatar> *)(v4 + 192), 0LL) )
        {
          common::milog::MiLogStream::create(
            &v268,
            &common::milog::MiLogDefault::default_log_obj_,
            3u,
            "./src/player/quest/player_quest_comp.cpp",
            "checkCond",
            3438);
          common::milog::MiLogStream::operator<<<char [19],(char *[19])0>(
            &v268,
            (const char (*)[19])"getCurAvatar fails");
          common::milog::MiLogStream::~MiLogStream(&v268);
          isExpiredScheduleIdInDb = 0;
          v22 = 0;
        }
        else
        {
          v23 = (unsigned __int64)std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 192));
          if ( *(_BYTE *)((v23 >> 3) + 0x7FFF8000) )
            v23 = __asan_report_load8(v23);
          v24 = *(_QWORD *)v23 + 280LL;
          if ( *(_BYTE *)((v24 >> 3) + 0x7FFF8000) )
            v23 = __asan_report_load8(*(_QWORD *)v23 + 280LL);
          if ( elem_type == (*(unsigned int (__fastcall **)(unsigned __int64))v24)(v23) )
          {
            isExpiredScheduleIdInDb = 1;
            v22 = 0;
          }
          else
          {
            v22 = 1;
          }
        }
        std::shared_ptr<Avatar>::~shared_ptr((std::shared_ptr<Avatar> *const)(v4 + 192));
        if ( v22 )
          goto LABEL_431;
      }
      break;
    case QUEST_COND_AVATAR_ELEMENT_NOT_EQUAL:
      if ( std::vector<int>::empty(&cond->param) )
      {
        common::milog::MiLogStream::create(
          &v268,
          &common::milog::MiLogDefault::default_log_obj_,
          4u,
          "./src/player/quest/player_quest_comp.cpp",
          "checkCond",
          3451);
        common::milog::MiLogStream::operator<<<char [23],(char *[23])0>(
          &v268,
          (const char (*)[23])"param size less than 1");
        common::milog::MiLogStream::~MiLogStream(&v268);
        isExpiredScheduleIdInDb = 0;
      }
      else
      {
        v25 = (data::ElementType *)std::vector<int>::operator[](&cond->param, 0LL);
        v26 = v25;
        if ( *(_BYTE *)(((unsigned __int64)v25 >> 3) + 0x7FFF8000) != 0
          && (char)(((unsigned __int8)v25 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)v25 >> 3) + 0x7FFF8000) )
        {
          __asan_report_load4(v25);
        }
        elem_type_0 = *v26;
        if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
          __asan_report_load8(&this->player_);
        Player::getCurAvatar((Player *const)(v4 + 192));
        if ( std::operator==<Avatar>((const std::shared_ptr<Avatar> *)(v4 + 192), 0LL) )
        {
          common::milog::MiLogStream::create(
            &v268,
            &common::milog::MiLogDefault::default_log_obj_,
            3u,
            "./src/player/quest/player_quest_comp.cpp",
            "checkCond",
            3458);
          common::milog::MiLogStream::operator<<<char [19],(char *[19])0>(
            &v268,
            (const char (*)[19])"getCurAvatar fails");
          common::milog::MiLogStream::~MiLogStream(&v268);
          isExpiredScheduleIdInDb = 0;
          v27 = 0;
        }
        else
        {
          v28 = (unsigned __int64)std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 192));
          if ( *(_BYTE *)((v28 >> 3) + 0x7FFF8000) )
            v28 = __asan_report_load8(v28);
          v29 = *(_QWORD *)v28 + 280LL;
          if ( *(_BYTE *)((v29 >> 3) + 0x7FFF8000) )
            v28 = __asan_report_load8(*(_QWORD *)v28 + 280LL);
          if ( elem_type_0 == (*(unsigned int (__fastcall **)(unsigned __int64))v29)(v28) )
          {
            v27 = 1;
          }
          else
          {
            isExpiredScheduleIdInDb = 1;
            v27 = 0;
          }
        }
        std::shared_ptr<Avatar>::~shared_ptr((std::shared_ptr<Avatar> *const)(v4 + 192));
        if ( v27 )
          goto LABEL_431;
      }
      break;
    case QUEST_COND_AVATAR_CAN_CHANGE_ELEMENT:
      if ( std::vector<int>::empty(&cond->param) )
      {
        common::milog::MiLogStream::create(
          &v268,
          &common::milog::MiLogDefault::default_log_obj_,
          4u,
          "./src/player/quest/player_quest_comp.cpp",
          "checkCond",
          3471);
        common::milog::MiLogStream::operator<<<char [23],(char *[23])0>(
          &v268,
          (const char (*)[23])"param size less than 1");
        common::milog::MiLogStream::~MiLogStream(&v268);
        isExpiredScheduleIdInDb = 0;
      }
      else
      {
        v30 = std::vector<int>::operator[](&cond->param, 0LL);
        v31 = v30;
        if ( *(_BYTE *)(((unsigned __int64)v30 >> 3) + 0x7FFF8000) != 0
          && (char)(((unsigned __int8)v30 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)v30 >> 3) + 0x7FFF8000) )
        {
          __asan_report_load4(v30);
        }
        is_can_change = *v31 != 0;
        if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
          __asan_report_load8(&this->player_);
        Player::getCurAvatar((Player *const)(v4 + 192));
        if ( std::operator==<Avatar>((const std::shared_ptr<Avatar> *)(v4 + 192), 0LL) )
        {
          common::milog::MiLogStream::create(
            &v268,
            &common::milog::MiLogDefault::default_log_obj_,
            3u,
            "./src/player/quest/player_quest_comp.cpp",
            "checkCond",
            3478);
          common::milog::MiLogStream::operator<<<char [19],(char *[19])0>(
            &v268,
            (const char (*)[19])"getCurAvatar fails");
          common::milog::MiLogStream::~MiLogStream(&v268);
          isExpiredScheduleIdInDb = 0;
          v32 = 0;
        }
        else
        {
          v33 = std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 192));
          if ( is_can_change == Avatar::canChangeElement(v33) )
          {
            isExpiredScheduleIdInDb = 1;
            v32 = 0;
          }
          else
          {
            v32 = 1;
          }
        }
        std::shared_ptr<Avatar>::~shared_ptr((std::shared_ptr<Avatar> *const)(v4 + 192));
        if ( v32 )
          goto LABEL_431;
      }
      break;
    case QUEST_COND_CITY_LEVEL_EQUAL_GREATER:
      if ( std::vector<int>::size(&cond->param) > 1 )
      {
        if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
          __asan_report_load8(&this->player_);
        CityComp = (unsigned int)Player::getCityComp(this->player_);
        v35 = std::vector<int>::operator[](&cond->param, 0LL);
        if ( *(_BYTE *)(((unsigned __int64)v35 >> 3) + 0x7FFF8000) != 0
          && (char)(((unsigned __int8)v35 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)v35 >> 3) + 0x7FFF8000) )
        {
          __asan_report_load4(v35);
        }
        PlayerCityComp::findCity((const PlayerCityComp *const)(v4 + 192), CityComp);
        if ( std::operator==<City>(0LL, (const std::shared_ptr<City> *)(v4 + 192)) )
        {
          isExpiredScheduleIdInDb = 0;
        }
        else
        {
          v36 = std::__shared_ptr_access<City,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<City,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 192));
          isExpiredScheduleIdInDb = City::getLevel(v36);
          v37 = (uint32_t *)std::vector<int>::operator[](&cond->param, 1uLL);
          v38 = v37;
          if ( *(_BYTE *)(((unsigned __int64)v37 >> 3) + 0x7FFF8000) != 0
            && (char)(((unsigned __int8)v37 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)v37 >> 3) + 0x7FFF8000) )
          {
            __asan_report_load4(v37);
          }
          LOBYTE(isExpiredScheduleIdInDb) = isExpiredScheduleIdInDb >= *v38;
        }
        std::shared_ptr<City>::~shared_ptr((std::shared_ptr<City> *const)(v4 + 192));
      }
      else
      {
        common::milog::MiLogStream::create(
          &v268,
          &common::milog::MiLogDefault::default_log_obj_,
          4u,
          "./src/player/quest/player_quest_comp.cpp",
          "checkCond",
          3491);
        common::milog::MiLogStream::operator<<<char [15],(char *[15])0>(&v268, (const char (*)[15])"param size < 2");
        common::milog::MiLogStream::~MiLogStream(&v268);
        isExpiredScheduleIdInDb = 0;
      }
      break;
    case QUEST_COND_ITEM_NUM_LESS_THAN:
      if ( std::vector<int>::size(&cond->param) > 1 )
      {
        v39 = (uint32_t *)std::vector<int>::operator[](&cond->param, 0LL);
        v40 = v39;
        if ( *(_BYTE *)(((unsigned __int64)v39 >> 3) + 0x7FFF8000) != 0
          && (char)(((unsigned __int8)v39 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)v39 >> 3) + 0x7FFF8000) )
        {
          __asan_report_load4(v39);
        }
        item_id_0 = *v40;
        v41 = (uint32_t *)std::vector<int>::operator[](&cond->param, 1uLL);
        v42 = v41;
        if ( *(_BYTE *)(((unsigned __int64)v41 >> 3) + 0x7FFF8000) != 0
          && (char)(((unsigned __int8)v41 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)v41 >> 3) + 0x7FFF8000) )
        {
          __asan_report_load4(v41);
        }
        item_count_0 = *v42;
        if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
          __asan_report_load8(&this->player_);
        v43 = Player::getItemComp(this->player_);
        if ( PlayerItemComp::getPackMaterialCount(v43, item_id_0) >= item_count_0 )
          goto LABEL_431;
        isExpiredScheduleIdInDb = 1;
      }
      else
      {
        common::milog::MiLogStream::create(
          &v268,
          &common::milog::MiLogDefault::default_log_obj_,
          4u,
          "./src/player/quest/player_quest_comp.cpp",
          "checkCond",
          3505);
        common::milog::MiLogStream::operator<<<char [23],(char *[23])0>(
          &v268,
          (const char (*)[23])"param size less than 2");
        common::milog::MiLogStream::~MiLogStream(&v268);
        isExpiredScheduleIdInDb = 0;
      }
      break;
    case QUEST_COND_DAILY_TASK_START:
      if ( std::vector<int>::empty(&cond->param) )
      {
        common::milog::MiLogStream::create(
          &v268,
          &common::milog::MiLogDefault::default_log_obj_,
          4u,
          "./src/player/quest/player_quest_comp.cpp",
          "checkCond",
          3521);
        common::milog::MiLogStream::operator<<<char [22],(char *[22])0>(
          &v268,
          (const char (*)[22])"param vector is empty");
        common::milog::MiLogStream::~MiLogStream(&v268);
        isExpiredScheduleIdInDb = 0;
      }
      else
      {
        v44 = (uint32_t *)std::vector<int>::operator[](&cond->param, 0LL);
        v45 = v44;
        if ( *(_BYTE *)(((unsigned __int64)v44 >> 3) + 0x7FFF8000) != 0
          && (char)(((unsigned __int8)v44 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)v44 >> 3) + 0x7FFF8000) )
        {
          __asan_report_load4(v44);
        }
        task_id = *v45;
        if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
          __asan_report_load8(&this->player_);
        DailyTaskComp = Player::getDailyTaskComp(this->player_);
        LOBYTE(v47) = PlayerDailyTaskComp::isDailyTaskStarted(DailyTaskComp, task_id);
        isExpiredScheduleIdInDb = v47;
      }
      break;
    case QUEST_COND_OPEN_STATE_EQUAL:
      if ( std::vector<int>::size(&cond->param) > 1 )
      {
        v48 = (uint32_t *)std::vector<int>::operator[](&cond->param, 0LL);
        v49 = v48;
        if ( *(_BYTE *)(((unsigned __int64)v48 >> 3) + 0x7FFF8000) != 0
          && (char)(((unsigned __int8)v48 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)v48 >> 3) + 0x7FFF8000) )
        {
          __asan_report_load4(v48);
        }
        open_state_type = *v49;
        v50 = std::vector<int>::operator[](&cond->param, 1uLL);
        v51 = v50;
        if ( *(_BYTE *)(((unsigned __int64)v50 >> 3) + 0x7FFF8000) != 0
          && (char)(((unsigned __int8)v50 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)v50 >> 3) + 0x7FFF8000) )
        {
          __asan_report_load4(v50);
        }
        is_open = *v51 != 0;
        if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
          __asan_report_load8(&this->player_);
        BasicComp = Player::getBasicComp(this->player_);
        LOBYTE(isExpiredScheduleIdInDb) = is_open == PlayerBasicComp::isStateOpen(BasicComp, open_state_type);
      }
      else
      {
        common::milog::MiLogStream::create(
          &v268,
          &common::milog::MiLogDefault::default_log_obj_,
          4u,
          "./src/player/quest/player_quest_comp.cpp",
          "checkCond",
          3531);
        common::milog::MiLogStream::operator<<<char [23],(char *[23])0>(
          &v268,
          (const char (*)[23])"param size less than 2");
        common::milog::MiLogStream::~MiLogStream(&v268);
        isExpiredScheduleIdInDb = 0;
      }
      break;
    case QUEST_COND_PLAYER_LEVEL_EQUAL_GREATER:
      if ( std::vector<int>::size(&cond->param) )
      {
        v53 = (uint32_t *)std::vector<int>::operator[](&cond->param, 0LL);
        v54 = v53;
        if ( *(_BYTE *)(((unsigned __int64)v53 >> 3) + 0x7FFF8000) != 0
          && (char)(((unsigned __int8)v53 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)v53 >> 3) + 0x7FFF8000) )
        {
          __asan_report_load4(v53);
        }
        player_level = *v54;
        if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
          __asan_report_load8(&this->player_);
        v55 = Player::getBasicComp(this->player_);
        LOBYTE(isExpiredScheduleIdInDb) = player_level <= PlayerBasicComp::getLevel(v55);
      }
      else
      {
        common::milog::MiLogStream::create(
          &v268,
          &common::milog::MiLogDefault::default_log_obj_,
          4u,
          "./src/player/quest/player_quest_comp.cpp",
          "checkCond",
          3542);
        common::milog::MiLogStream::operator<<<char [23],(char *[23])0>(
          &v268,
          (const char (*)[23])"param size less than 2");
        common::milog::MiLogStream::~MiLogStream(&v268);
        isExpiredScheduleIdInDb = 0;
      }
      break;
    case QUEST_COND_ITEM_GIVING_ACTIVED:
      if ( std::vector<int>::size(&cond->param) )
      {
        v56 = (uint32_t *)std::vector<int>::operator[](&cond->param, 0LL);
        v57 = v56;
        if ( *(_BYTE *)(((unsigned __int64)v56 >> 3) + 0x7FFF8000) != 0
          && (char)(((unsigned __int8)v56 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)v56 >> 3) + 0x7FFF8000) )
        {
          __asan_report_load4(v56);
        }
        giving_id = *v57;
        if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
          __asan_report_load8(&this->player_);
        GivingComp = Player::getGivingComp(this->player_);
        LOBYTE(v59) = PlayerGivingComp::isItemGivingActive(GivingComp, giving_id);
        isExpiredScheduleIdInDb = v59;
      }
      else
      {
        common::milog::MiLogStream::create(
          &v268,
          &common::milog::MiLogDefault::default_log_obj_,
          4u,
          "./src/player/quest/player_quest_comp.cpp",
          "checkCond",
          3552);
        common::milog::MiLogStream::operator<<<char [23],(char *[23])0>(
          &v268,
          (const char (*)[23])"param size less than 1");
        common::milog::MiLogStream::~MiLogStream(&v268);
        isExpiredScheduleIdInDb = 0;
      }
      break;
    case QUEST_COND_ITEM_GIVING_FINISHED:
      if ( std::vector<int>::size(&cond->param) > 1 )
      {
        v60 = (uint32_t *)std::vector<int>::operator[](&cond->param, 0LL);
        v61 = v60;
        if ( *(_BYTE *)(((unsigned __int64)v60 >> 3) + 0x7FFF8000) != 0
          && (char)(((unsigned __int8)v60 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)v60 >> 3) + 0x7FFF8000) )
        {
          __asan_report_load4(v60);
        }
        giving_id_0 = *v61;
        v62 = (uint32_t *)std::vector<int>::operator[](&cond->param, 1uLL);
        v63 = v62;
        if ( *(_BYTE *)(((unsigned __int64)v62 >> 3) + 0x7FFF8000) != 0
          && (char)(((unsigned __int8)v62 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)v62 >> 3) + 0x7FFF8000) )
        {
          __asan_report_load4(v62);
        }
        giving_group_id = *v63;
        if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
          __asan_report_load8(&this->player_);
        v64 = Player::getGivingComp(this->player_);
        LOBYTE(v65) = PlayerGivingComp::isItemGivingFinished(v64, giving_id_0, giving_group_id);
        isExpiredScheduleIdInDb = v65;
      }
      else
      {
        common::milog::MiLogStream::create(
          &v268,
          &common::milog::MiLogDefault::default_log_obj_,
          4u,
          "./src/player/quest/player_quest_comp.cpp",
          "checkCond",
          3562);
        common::milog::MiLogStream::operator<<<char [23],(char *[23])0>(
          &v268,
          (const char (*)[23])"param size less than 1");
        common::milog::MiLogStream::~MiLogStream(&v268);
        isExpiredScheduleIdInDb = 0;
      }
      break;
    case QUEST_COND_QUEST_VAR_EQUAL:
    case QUEST_COND_QUEST_VAR_GREATER:
    case QUEST_COND_QUEST_VAR_LESS:
      if ( std::vector<int>::size(&cond->param) > 1 )
      {
        parent_quest_id = PlayerQuestComp::findParentQuestId(this, *(_DWORD *)(v4 + 80));
        PlayerQuestComp::findParentQuest((const PlayerQuestComp *const)(v4 + 192), (__int64)this, parent_quest_id);
        if ( std::operator==<ParentQuest>((const std::shared_ptr<ParentQuest> *)(v4 + 192), 0LL) )
        {
          isExpiredScheduleIdInDb = 0;
        }
        else
        {
          v66 = (__gnu_cxx::__alloc_traits<std::allocator<int>,int>::value_type *)std::vector<int>::operator[](
                                                                                    &cond->param,
                                                                                    0LL);
          v67 = v66;
          if ( *(_BYTE *)(((unsigned __int64)v66 >> 3) + 0x7FFF8000) != 0
            && (char)(((unsigned __int8)v66 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)v66 >> 3) + 0x7FFF8000) )
          {
            __asan_report_load4(v66);
          }
          index = *v67;
          v68 = (__gnu_cxx::__alloc_traits<std::allocator<int>,int>::value_type *)std::vector<int>::operator[](
                                                                                    &cond->param,
                                                                                    1uLL);
          v69 = v68;
          if ( *(_BYTE *)(((unsigned __int64)v68 >> 3) + 0x7FFF8000) != 0
            && (char)(((unsigned __int8)v68 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)v68 >> 3) + 0x7FFF8000) )
          {
            __asan_report_load4(v68);
          }
          value = *v69;
          v70 = std::__shared_ptr_access<ParentQuest,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<ParentQuest,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 192));
          quest_var = ParentQuest::getQuestVar(v70, index);
          if ( *(_BYTE *)(((unsigned __int64)&cond->type >> 3) + 0x7FFF8000) != 0
            && *(_BYTE *)(((unsigned __int64)&cond->type >> 3) + 0x7FFF8000) <= 3 )
          {
            __asan_report_load4(&cond->type);
          }
          if ( cond->type == QUEST_COND_QUEST_VAR_EQUAL )
          {
            LOBYTE(isExpiredScheduleIdInDb) = quest_var == value;
          }
          else
          {
            if ( *(_BYTE *)(((unsigned __int64)&cond->type >> 3) + 0x7FFF8000) != 0
              && *(_BYTE *)(((unsigned __int64)&cond->type >> 3) + 0x7FFF8000) <= 3 )
            {
              __asan_report_load4(&cond->type);
            }
            if ( cond->type == QUEST_COND_QUEST_VAR_LESS )
            {
              LOBYTE(isExpiredScheduleIdInDb) = quest_var < value;
            }
            else
            {
              if ( *(_BYTE *)(((unsigned __int64)&cond->type >> 3) + 0x7FFF8000) != 0
                && *(_BYTE *)(((unsigned __int64)&cond->type >> 3) + 0x7FFF8000) <= 3 )
              {
                __asan_report_load4(&cond->type);
              }
              if ( cond->type == QUEST_COND_QUEST_VAR_GREATER )
                LOBYTE(isExpiredScheduleIdInDb) = quest_var > value;
              else
                isExpiredScheduleIdInDb = 0;
            }
          }
        }
        std::shared_ptr<ParentQuest>::~shared_ptr((std::shared_ptr<ParentQuest> *const)(v4 + 192));
      }
      else
      {
        common::milog::MiLogStream::create(
          &v268,
          &common::milog::MiLogDefault::default_log_obj_,
          4u,
          "./src/player/quest/player_quest_comp.cpp",
          "checkCond",
          3575);
        common::milog::MiLogStream::operator<<<char [23],(char *[23])0>(
          &v268,
          (const char (*)[23])"param size less than 2");
        common::milog::MiLogStream::~MiLogStream(&v268);
        isExpiredScheduleIdInDb = 0;
      }
      break;
    case QUEST_COND_ACTIVITY_COND:
      if ( std::vector<int>::size(&cond->param) > 1 )
      {
        v71 = (uint32_t *)std::vector<int>::operator[](&cond->param, 0LL);
        v72 = v71;
        if ( *(_BYTE *)(((unsigned __int64)v71 >> 3) + 0x7FFF8000) != 0
          && (char)(((unsigned __int8)v71 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)v71 >> 3) + 0x7FFF8000) )
        {
          __asan_report_load4(v71);
        }
        cond_id = *v72;
        ServiceBox::findService<GameserverService>();
        GameserverService::getConfig((GameserverService *const)(v4 + 192));
        v73 = std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 192));
        activity_id_set = NewActivityExcelConfigMgr::getActivitySetByCondId(
                            &v73->design_config.txt_config_mgr.new_activity_config_mgr,
                            cond_id);
        std::shared_ptr<Config>::~shared_ptr((std::shared_ptr<Config> *const)(v4 + 192));
        v74 = std::vector<int>::operator[](&cond->param, 1uLL);
        v75 = v74;
        if ( *(_BYTE *)(((unsigned __int64)v74 >> 3) + 0x7FFF8000) != 0
          && (char)(((unsigned __int8)v74 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)v74 >> 3) + 0x7FFF8000) )
        {
          __asan_report_load4(v74);
        }
        if ( *v75 == 1 )
        {
          __for_range = activity_id_set;
          __for_begin._M_cur = std::unordered_set<unsigned int>::begin(activity_id_set)._M_cur;
          __for_end._M_cur = std::unordered_set<unsigned int>::end(activity_id_set)._M_cur;
          while ( std::__detail::operator!=<unsigned int,false>(&__for_begin, &__for_end) )
          {
            v76 = (unsigned int *)std::__detail::_Node_const_iterator<unsigned int,true,false>::operator*(&__for_begin);
            v77 = v76;
            if ( *(_BYTE *)(((unsigned __int64)v76 >> 3) + 0x7FFF8000) != 0
              && (char)(((unsigned __int8)v76 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)v76 >> 3) + 0x7FFF8000) )
            {
              __asan_report_load4(v76);
            }
            activity_id = *v77;
            if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
              __asan_report_load8(&this->player_);
            ActivityComp = Player::getActivityComp(this->player_);
            if ( PlayerActivityComp::isActivityCondMeet(ActivityComp, activity_id, cond_id) )
            {
              isExpiredScheduleIdInDb = 1;
              goto LABEL_432;
            }
            std::__detail::_Node_const_iterator<unsigned int,true,false>::operator++(&__for_begin);
          }
        }
        else
        {
          v79 = std::vector<int>::operator[](&cond->param, 1uLL);
          v80 = v79;
          if ( *(_BYTE *)(((unsigned __int64)v79 >> 3) + 0x7FFF8000) != 0
            && (char)(((unsigned __int8)v79 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)v79 >> 3) + 0x7FFF8000) )
          {
            __asan_report_load4(v79);
          }
          if ( *v80 == 2 )
          {
            __for_range_0 = activity_id_set;
            __for_begin._M_cur = std::unordered_set<unsigned int>::begin(activity_id_set)._M_cur;
            __for_end._M_cur = std::unordered_set<unsigned int>::end(activity_id_set)._M_cur;
            while ( std::__detail::operator!=<unsigned int,false>(&__for_begin, &__for_end) )
            {
              v81 = (unsigned int *)std::__detail::_Node_const_iterator<unsigned int,true,false>::operator*(&__for_begin);
              v82 = v81;
              if ( *(_BYTE *)(((unsigned __int64)v81 >> 3) + 0x7FFF8000) != 0
                && (char)(((unsigned __int8)v81 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)v81 >> 3) + 0x7FFF8000) )
              {
                __asan_report_load4(v81);
              }
              activity_id_0 = *v82;
              if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
                __asan_report_load8(&this->player_);
              v83 = Player::getActivityComp(this->player_);
              if ( PlayerActivityComp::isActivityCondExpired(v83, activity_id_0, cond_id) )
              {
                isExpiredScheduleIdInDb = 1;
                goto LABEL_432;
              }
              std::__detail::_Node_const_iterator<unsigned int,true,false>::operator++(&__for_begin);
            }
          }
        }
        isExpiredScheduleIdInDb = 0;
      }
      else
      {
        common::milog::MiLogStream::create(
          &v268,
          &common::milog::MiLogDefault::default_log_obj_,
          4u,
          "./src/player/quest/player_quest_comp.cpp",
          "checkCond",
          3606);
        common::milog::MiLogStream::operator<<<char [23],(char *[23])0>(
          &v268,
          (const char (*)[23])"param size less than 2");
        common::milog::MiLogStream::~MiLogStream(&v268);
        isExpiredScheduleIdInDb = 0;
      }
      break;
    case QUEST_COND_DAILY_TASK_VAR_GT:
    case QUEST_COND_DAILY_TASK_VAR_EQ:
    case QUEST_COND_DAILY_TASK_VAR_LT:
      if ( std::vector<int>::size(&cond->param) > 2 )
      {
        v95 = (uint32_t *)std::vector<int>::operator[](&cond->param, 0LL);
        v96 = v95;
        if ( *(_BYTE *)(((unsigned __int64)v95 >> 3) + 0x7FFF8000) != 0
          && (char)(((unsigned __int8)v95 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)v95 >> 3) + 0x7FFF8000) )
        {
          __asan_report_load4(v95);
        }
        daily_task_id = *v96;
        if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
          __asan_report_load8(&this->player_);
        v97 = Player::getDailyTaskComp(this->player_);
        v98 = (uint32_t *)std::vector<int>::operator[](&cond->param, 1uLL);
        v99 = v98;
        if ( *(_BYTE *)(((unsigned __int64)v98 >> 3) + 0x7FFF8000) != 0
          && (char)(((unsigned __int8)v98 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)v98 >> 3) + 0x7FFF8000) )
        {
          __asan_report_load4(v98);
        }
        value_0 = PlayerDailyTaskComp::getDailyTaskVar(v97, daily_task_id, *v99);
        if ( *(_BYTE *)(((unsigned __int64)&cond->type >> 3) + 0x7FFF8000) != 0
          && *(_BYTE *)(((unsigned __int64)&cond->type >> 3) + 0x7FFF8000) <= 3 )
        {
          __asan_report_load4(&cond->type);
        }
        if ( cond->type == QUEST_COND_DAILY_TASK_VAR_GT )
        {
          v100 = (__gnu_cxx::__alloc_traits<std::allocator<int>,int>::value_type *)std::vector<int>::operator[](
                                                                                     &cond->param,
                                                                                     2uLL);
          v101 = v100;
          if ( *(_BYTE *)(((unsigned __int64)v100 >> 3) + 0x7FFF8000) != 0
            && (char)(((unsigned __int8)v100 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)v100 >> 3) + 0x7FFF8000) )
          {
            __asan_report_load4(v100);
          }
          LOBYTE(isExpiredScheduleIdInDb) = value_0 > *v101;
        }
        else
        {
          if ( *(_BYTE *)(((unsigned __int64)&cond->type >> 3) + 0x7FFF8000) != 0
            && *(_BYTE *)(((unsigned __int64)&cond->type >> 3) + 0x7FFF8000) <= 3 )
          {
            __asan_report_load4(&cond->type);
          }
          if ( cond->type == QUEST_COND_DAILY_TASK_VAR_EQ )
          {
            v102 = std::vector<int>::operator[](&cond->param, 2uLL);
            v103 = v102;
            if ( *(_BYTE *)(((unsigned __int64)v102 >> 3) + 0x7FFF8000) != 0
              && (char)(((unsigned __int8)v102 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)v102 >> 3) + 0x7FFF8000) )
            {
              __asan_report_load4(v102);
            }
            LOBYTE(isExpiredScheduleIdInDb) = value_0 == *v103;
          }
          else
          {
            if ( *(_BYTE *)(((unsigned __int64)&cond->type >> 3) + 0x7FFF8000) != 0
              && *(_BYTE *)(((unsigned __int64)&cond->type >> 3) + 0x7FFF8000) <= 3 )
            {
              __asan_report_load4(&cond->type);
            }
            if ( cond->type != QUEST_COND_DAILY_TASK_VAR_LT )
              goto LABEL_431;
            v104 = (__gnu_cxx::__alloc_traits<std::allocator<int>,int>::value_type *)std::vector<int>::operator[](
                                                                                       &cond->param,
                                                                                       2uLL);
            v105 = v104;
            if ( *(_BYTE *)(((unsigned __int64)v104 >> 3) + 0x7FFF8000) != 0
              && (char)(((unsigned __int8)v104 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)v104 >> 3) + 0x7FFF8000) )
            {
              __asan_report_load4(v104);
            }
            LOBYTE(isExpiredScheduleIdInDb) = value_0 < *v105;
          }
        }
      }
      else
      {
        common::milog::MiLogStream::create(
          &v268,
          &common::milog::MiLogDefault::default_log_obj_,
          4u,
          "./src/player/quest/player_quest_comp.cpp",
          "checkCond",
          3664);
        common::milog::MiLogStream::operator<<<char [23],(char *[23])0>(
          &v268,
          (const char (*)[23])"param size less than 3");
        common::milog::MiLogStream::~MiLogStream(&v268);
        isExpiredScheduleIdInDb = 0;
      }
      break;
    case QUEST_COND_COMPLETE_TALK:
      if ( std::vector<int>::size(&cond->param) )
      {
        v106 = (__gnu_cxx::__alloc_traits<std::allocator<int>,int>::value_type *)std::vector<int>::operator[](
                                                                                   &cond->param,
                                                                                   0LL);
        v107 = v106;
        if ( *(_BYTE *)(((unsigned __int64)v106 >> 3) + 0x7FFF8000) != 0
          && (char)(((unsigned __int8)v106 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)v106 >> 3) + 0x7FFF8000) )
        {
          __asan_report_load4(v106);
        }
        v108 = *v107;
        if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
          __asan_report_load8(&this->player_);
        TalkComp = Player::getTalkComp(this->player_);
        isExpiredScheduleIdInDb = v108 == PlayerTalkComp::getCurTalkId(TalkComp);
      }
      else
      {
        common::milog::MiLogStream::create(
          &v268,
          &common::milog::MiLogDefault::default_log_obj_,
          4u,
          "./src/player/quest/player_quest_comp.cpp",
          "checkCond",
          3687);
        common::milog::MiLogStream::operator<<<char [23],(char *[23])0>(
          &v268,
          (const char (*)[23])"param size less than 1");
        common::milog::MiLogStream::~MiLogStream(&v268);
        isExpiredScheduleIdInDb = 0;
      }
      break;
    case QUEST_COND_QUEST_GLOBAL_VAR_EQUAL:
    case QUEST_COND_QUEST_GLOBAL_VAR_GREATER:
    case QUEST_COND_QUEST_GLOBAL_VAR_LESS:
      if ( std::vector<int>::size(&cond->param) > 1 )
      {
        v110 = (uint32_t *)std::vector<int>::operator[](&cond->param, 0LL);
        v111 = v110;
        if ( *(_BYTE *)(((unsigned __int64)v110 >> 3) + 0x7FFF8000) != 0
          && (char)(((unsigned __int8)v110 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)v110 >> 3) + 0x7FFF8000) )
        {
          __asan_report_load4(v110);
        }
        value_1 = PlayerQuestComp::getGlobalVarValue(this, *v111);
        if ( *(_BYTE *)(((unsigned __int64)&cond->type >> 3) + 0x7FFF8000) != 0
          && *(_BYTE *)(((unsigned __int64)&cond->type >> 3) + 0x7FFF8000) <= 3 )
        {
          __asan_report_load4(&cond->type);
        }
        if ( cond->type == QUEST_COND_QUEST_GLOBAL_VAR_GREATER )
        {
          v112 = (__gnu_cxx::__alloc_traits<std::allocator<int>,int>::value_type *)std::vector<int>::operator[](
                                                                                     &cond->param,
                                                                                     1uLL);
          v113 = v112;
          if ( *(_BYTE *)(((unsigned __int64)v112 >> 3) + 0x7FFF8000) != 0
            && (char)(((unsigned __int8)v112 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)v112 >> 3) + 0x7FFF8000) )
          {
            __asan_report_load4(v112);
          }
          LOBYTE(isExpiredScheduleIdInDb) = value_1 > *v113;
        }
        else
        {
          if ( *(_BYTE *)(((unsigned __int64)&cond->type >> 3) + 0x7FFF8000) != 0
            && *(_BYTE *)(((unsigned __int64)&cond->type >> 3) + 0x7FFF8000) <= 3 )
          {
            __asan_report_load4(&cond->type);
          }
          if ( cond->type == QUEST_COND_QUEST_GLOBAL_VAR_EQUAL )
          {
            v114 = std::vector<int>::operator[](&cond->param, 1uLL);
            v115 = v114;
            if ( *(_BYTE *)(((unsigned __int64)v114 >> 3) + 0x7FFF8000) != 0
              && (char)(((unsigned __int8)v114 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)v114 >> 3) + 0x7FFF8000) )
            {
              __asan_report_load4(v114);
            }
            LOBYTE(isExpiredScheduleIdInDb) = value_1 == *v115;
          }
          else
          {
            if ( *(_BYTE *)(((unsigned __int64)&cond->type >> 3) + 0x7FFF8000) != 0
              && *(_BYTE *)(((unsigned __int64)&cond->type >> 3) + 0x7FFF8000) <= 3 )
            {
              __asan_report_load4(&cond->type);
            }
            if ( cond->type == QUEST_COND_QUEST_GLOBAL_VAR_LESS )
            {
              v116 = (__gnu_cxx::__alloc_traits<std::allocator<int>,int>::value_type *)std::vector<int>::operator[](
                                                                                         &cond->param,
                                                                                         1uLL);
              v117 = v116;
              if ( *(_BYTE *)(((unsigned __int64)v116 >> 3) + 0x7FFF8000) != 0
                && (char)(((unsigned __int8)v116 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)v116 >> 3) + 0x7FFF8000) )
              {
                __asan_report_load4(v116);
              }
              LOBYTE(isExpiredScheduleIdInDb) = value_1 < *v117;
            }
            else
            {
LABEL_431:
              isExpiredScheduleIdInDb = 0;
            }
          }
        }
      }
      else
      {
        common::milog::MiLogStream::create(
          &v268,
          &common::milog::MiLogDefault::default_log_obj_,
          4u,
          "./src/player/quest/player_quest_comp.cpp",
          "checkCond",
          3703);
        common::milog::MiLogStream::operator<<<char [23],(char *[23])0>(
          &v268,
          (const char (*)[23])"param size less than 3");
        common::milog::MiLogStream::~MiLogStream(&v268);
        isExpiredScheduleIdInDb = 0;
      }
      break;
    case QUEST_COND_PERSONAL_LINE_UNLOCK:
      if ( std::vector<int>::size(&cond->param) )
      {
        v118 = (uint32_t *)std::vector<int>::operator[](&cond->param, 0LL);
        v119 = v118;
        if ( *(_BYTE *)(((unsigned __int64)v118 >> 3) + 0x7FFF8000) != 0
          && (char)(((unsigned __int8)v118 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)v118 >> 3) + 0x7FFF8000) )
        {
          __asan_report_load4(v118);
        }
        personal_line_id = *v119;
        if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
          __asan_report_load8(&this->player_);
        PersonalLineComp = Player::getPersonalLineComp(this->player_);
        is_unlock = PlayerPersonalLineComp::isPersonalLineUnlock(PersonalLineComp, personal_line_id);
        is_chapter_pre_open = 0;
        parent_quest_id_0 = PlayerQuestComp::findParentQuestId(this, *(_DWORD *)(v4 + 80));
        ServiceBox::findService<GameserverService>();
        GameserverService::getConfig((GameserverService *const)(v4 + 192));
        v121 = std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 192));
        chapter_config_ptr = QuestExcelConfigMgr::findChapterConfigByParentQuestId(
                               &v121->design_config.txt_config_mgr.quest_config_mgr,
                               parent_quest_id_0);
        std::shared_ptr<Config>::~shared_ptr((std::shared_ptr<Config> *const)(v4 + 192));
        if ( chapter_config_ptr )
        {
          if ( *(_BYTE *)(((unsigned __int64)&chapter_config_ptr->id >> 3) + 0x7FFF8000) != 0
            && *(_BYTE *)(((unsigned __int64)&chapter_config_ptr->id >> 3) + 0x7FFF8000) <= 3 )
          {
            __asan_report_load4(&chapter_config_ptr->id);
          }
          is_chapter_pre_open = PlayerQuestComp::isChapterPreOpen(this, chapter_config_ptr->id);
        }
        isExpiredScheduleIdInDb = is_unlock || is_chapter_pre_open;
      }
      else
      {
        common::milog::MiLogStream::create(
          &v268,
          &common::milog::MiLogDefault::default_log_obj_,
          4u,
          "./src/player/quest/player_quest_comp.cpp",
          "checkCond",
          3726);
        common::milog::MiLogStream::operator<<<char [23],(char *[23])0>(
          &v268,
          (const char (*)[23])"param size less than 1");
        common::milog::MiLogStream::~MiLogStream(&v268);
        isExpiredScheduleIdInDb = 0;
      }
      break;
    case QUEST_COND_CITY_REPUTATION_REQUEST:
      if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
        __asan_report_load8(&this->player_);
      ReputationComp = Player::getReputationComp(this->player_);
      LOBYTE(v123) = PlayerReputationComp::isAcceptedByRequest(ReputationComp, *(_DWORD *)(v4 + 80));
      isExpiredScheduleIdInDb = v123;
      break;
    case QUEST_COND_MAIN_COOP_START:
      if ( std::vector<int>::size(&cond->param) )
      {
        v124 = (uint32_t *)std::vector<int>::operator[](&cond->param, 0LL);
        v125 = v124;
        if ( *(_BYTE *)(((unsigned __int64)v124 >> 3) + 0x7FFF8000) != 0
          && (char)(((unsigned __int8)v124 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)v124 >> 3) + 0x7FFF8000) )
        {
          __asan_report_load4(v124);
        }
        main_coop_id = *v125;
        if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
          __asan_report_load8(&this->player_);
        CoopComp = Player::getCoopComp(this->player_);
        LOBYTE(v127) = PlayerCoopComp::isMainCoopRunning(CoopComp, main_coop_id);
        isExpiredScheduleIdInDb = v127;
      }
      else
      {
        common::milog::MiLogStream::create(
          &v268,
          &common::milog::MiLogDefault::default_log_obj_,
          4u,
          "./src/player/quest/player_quest_comp.cpp",
          "checkCond",
          3749);
        common::milog::MiLogStream::operator<<<char [23],(char *[23])0>(
          &v268,
          (const char (*)[23])"param size less than 1");
        common::milog::MiLogStream::~MiLogStream(&v268);
        isExpiredScheduleIdInDb = 0;
      }
      break;
    case QUEST_COND_MAIN_COOP_ENTER_SAVE_POINT:
      if ( std::vector<int>::size(&cond->param) > 1 )
      {
        v128 = (uint32_t *)std::vector<int>::operator[](&cond->param, 0LL);
        v129 = v128;
        if ( *(_BYTE *)(((unsigned __int64)v128 >> 3) + 0x7FFF8000) != 0
          && (char)(((unsigned __int8)v128 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)v128 >> 3) + 0x7FFF8000) )
        {
          __asan_report_load4(v128);
        }
        main_coop_id_0 = *v129;
        v130 = (uint32_t *)std::vector<int>::operator[](&cond->param, 1uLL);
        v131 = v130;
        if ( *(_BYTE *)(((unsigned __int64)v130 >> 3) + 0x7FFF8000) != 0
          && (char)(((unsigned __int8)v130 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)v130 >> 3) + 0x7FFF8000) )
        {
          __asan_report_load4(v130);
        }
        save_point_id = *v131;
        if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
          __asan_report_load8(&this->player_);
        v132 = Player::getCoopComp(this->player_);
        LOBYTE(v133) = PlayerCoopComp::isMainCoopHasSavePoint(v132, main_coop_id_0, save_point_id);
        isExpiredScheduleIdInDb = v133;
      }
      else
      {
        common::milog::MiLogStream::create(
          &v268,
          &common::milog::MiLogDefault::default_log_obj_,
          4u,
          "./src/player/quest/player_quest_comp.cpp",
          "checkCond",
          3759);
        common::milog::MiLogStream::operator<<<char [23],(char *[23])0>(
          &v268,
          (const char (*)[23])"param size less than 2");
        common::milog::MiLogStream::~MiLogStream(&v268);
        isExpiredScheduleIdInDb = 0;
      }
      break;
    case QUEST_COND_LUA_NOTIFY:
      if ( std::vector<int>::size(&cond->param) )
      {
        v134 = (__gnu_cxx::__alloc_traits<std::allocator<int>,int>::value_type *)std::vector<int>::operator[](
                                                                                   &cond->param,
                                                                                   0LL);
        v135 = v134;
        if ( *(_BYTE *)(((unsigned __int64)v134 >> 3) + 0x7FFF8000) != 0
          && (char)(((unsigned __int8)v134 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)v134 >> 3) + 0x7FFF8000) )
        {
          __asan_report_load4(v134);
        }
        v136 = *v135;
        LOBYTE(isExpiredScheduleIdInDb) = v136 == PlayerQuestComp::getLuaNotifyQuestParam(this);
      }
      else
      {
        common::milog::MiLogStream::create(
          &v268,
          &common::milog::MiLogDefault::default_log_obj_,
          4u,
          "./src/player/quest/player_quest_comp.cpp",
          "checkCond",
          3770);
        common::milog::MiLogStream::operator<<<char [23],(char *[23])0>(
          &v268,
          (const char (*)[23])"param size less than 1");
        common::milog::MiLogStream::~MiLogStream(&v268);
        isExpiredScheduleIdInDb = 0;
      }
      break;
    case QUEST_COND_CUR_CLIMATE:
      if ( std::vector<int>::size(&cond->param) )
      {
        v137 = (uint32_t *)std::vector<int>::operator[](&cond->param, 0LL);
        v138 = v137;
        if ( *(_BYTE *)(((unsigned __int64)v137 >> 3) + 0x7FFF8000) != 0
          && (char)(((unsigned __int8)v137 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)v137 >> 3) + 0x7FFF8000) )
        {
          __asan_report_load4(v137);
        }
        climate_type = *v138;
        climate_area_id = 0;
        if ( std::vector<int>::size(&cond->param) > 1 )
        {
          v139 = (uint32_t *)std::vector<int>::operator[](&cond->param, 1uLL);
          v140 = v139;
          if ( *(_BYTE *)(((unsigned __int64)v139 >> 3) + 0x7FFF8000) != 0
            && (char)(((unsigned __int8)v139 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)v139 >> 3) + 0x7FFF8000) )
          {
            __asan_report_load4(v139);
          }
          climate_area_id = *v140;
        }
        if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
          __asan_report_load8(&this->player_);
        v141 = Player::getBasicComp(this->player_);
        if ( climate_type != PlayerBasicComp::getCurClimateAreaType(v141) )
          goto LABEL_319;
        if ( !climate_area_id )
          goto LABEL_318;
        if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
          __asan_report_load8(&this->player_);
        v142 = Player::getBasicComp(this->player_);
        if ( climate_area_id == PlayerBasicComp::getCurClimateAreaId(v142) )
LABEL_318:
          isExpiredScheduleIdInDb = 1;
        else
LABEL_319:
          isExpiredScheduleIdInDb = 0;
      }
      else
      {
        common::milog::MiLogStream::create(
          &v268,
          &common::milog::MiLogDefault::default_log_obj_,
          4u,
          "./src/player/quest/player_quest_comp.cpp",
          "checkCond",
          3780);
        common::milog::MiLogStream::operator<<<char [23],(char *[23])0>(
          &v268,
          (const char (*)[23])"param size less than 1");
        common::milog::MiLogStream::~MiLogStream(&v268);
        isExpiredScheduleIdInDb = 0;
      }
      break;
    case QUEST_COND_ACTIVITY_END:
      if ( std::vector<int>::size(&cond->param) )
      {
        v143 = (uint32_t *)std::vector<int>::operator[](&cond->param, 0LL);
        v144 = v143;
        if ( *(_BYTE *)(((unsigned __int64)v143 >> 3) + 0x7FFF8000) != 0
          && (char)(((unsigned __int8)v143 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)v143 >> 3) + 0x7FFF8000) )
        {
          __asan_report_load4(v143);
        }
        schedule_id_0 = *v144;
        ServiceBox::findService<GameserverService>();
        GameserverService::getConfig((GameserverService *const)(v4 + 192));
        v145 = std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 192));
        v146 = !NewActivityExcelConfigMgr::isScheduleIdValid(
                  &v145->design_config.txt_config_mgr.new_activity_config_mgr,
                  schedule_id_0);
        std::shared_ptr<Config>::~shared_ptr((std::shared_ptr<Config> *const)(v4 + 192));
        if ( v146 )
        {
          isExpiredScheduleIdInDb = 0;
        }
        else
        {
          ServiceBox::findService<GameserverService>();
          GameserverService::getConfig((GameserverService *const)(v4 + 192));
          v147 = std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 192));
          end_time = NewActivityExcelConfigMgr::getScheduleEndTime(
                       &v147->design_config.txt_config_mgr.new_activity_config_mgr,
                       schedule_id_0,
                       0);
          std::shared_ptr<Config>::~shared_ptr((std::shared_ptr<Config> *const)(v4 + 192));
          now = common::tools::TimeUtils::getNow();
          if ( end_time && now >= end_time )
          {
            isExpiredScheduleIdInDb = 1;
          }
          else
          {
            ServiceBox::findService<GameserverService>();
            GameserverService::getConfig((GameserverService *const)(v4 + 192));
            db_activity_schedule_config = &std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 192))->design_config.db_config_mgr.db_local_config_mgr.activity_schedule_config_mgr;
            std::shared_ptr<Config>::~shared_ptr((std::shared_ptr<Config> *const)(v4 + 192));
            isExpiredScheduleIdInDb = data::DbActivityScheduleConfigMgr::isExpiredScheduleIdInDb(
                                        db_activity_schedule_config,
                                        schedule_id_0);
          }
        }
      }
      else
      {
        common::milog::MiLogStream::create(
          &v268,
          &common::milog::MiLogDefault::default_log_obj_,
          4u,
          "./src/player/quest/player_quest_comp.cpp",
          "checkCond",
          3797);
        common::milog::MiLogStream::operator<<<char [23],(char *[23])0>(
          &v268,
          (const char (*)[23])"param size less than 1");
        common::milog::MiLogStream::~MiLogStream(&v268);
        isExpiredScheduleIdInDb = 0;
      }
      break;
    case QUEST_COND_TIME_VAR_GT_EQ:
      if ( std::vector<int>::size(&cond->param) > 2 )
      {
        v148 = std::vector<int>::operator[](&cond->param, 0LL);
        v149 = v148;
        if ( *(_BYTE *)(((unsigned __int64)v148 >> 3) + 0x7FFF8000) != 0
          && (char)(((unsigned __int8)v148 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)v148 >> 3) + 0x7FFF8000) )
        {
          __asan_report_load4(v148);
        }
        *(_DWORD *)(v4 + 32) = *v149;
        v150 = (uint32_t *)std::vector<int>::operator[](&cond->param, 1uLL);
        v151 = v150;
        if ( *(_BYTE *)(((unsigned __int64)v150 >> 3) + 0x7FFF8000) != 0
          && (char)(((unsigned __int8)v150 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)v150 >> 3) + 0x7FFF8000) )
        {
          __asan_report_load4(v150);
        }
        key = *v151;
        v152 = (uint32_t *)std::vector<int>::operator[](&cond->param, 2uLL);
        v153 = v152;
        if ( *(_BYTE *)(((unsigned __int64)v152 >> 3) + 0x7FFF8000) != 0
          && (char)(((unsigned __int8)v152 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)v152 >> 3) + 0x7FFF8000) )
        {
          __asan_report_load4(v152);
        }
        hour_delta = *v153;
        *(_DWORD *)(v4 + 48) = PlayerQuestComp::getQuestTimeVar(this, *(_DWORD *)(v4 + 32), key);
        if ( *(_DWORD *)(v4 + 48) )
        {
          *(_DWORD *)(v4 + 64) = common::tools::TimeUtils::getNow();
          if ( *(_DWORD *)(v4 + 64) >= *(_DWORD *)(v4 + 48) )
          {
            LOBYTE(isExpiredScheduleIdInDb) = *(_DWORD *)(v4 + 64) - *(_DWORD *)(v4 + 48) >= 3600 * hour_delta;
          }
          else
          {
            common::milog::MiLogStream::create(
              &v268,
              &common::milog::MiLogDefault::default_log_obj_,
              4u,
              "./src/player/quest/player_quest_comp.cpp",
              "checkCond",
              3836);
            v154 = common::milog::MiLogStream::operator<<<char [21],(char *[21])0>(
                     &v268,
                     (const char (*)[21])off_25165DA0);
            v155 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                     v154,
                     (const unsigned int *)(v4 + 64));
            v156 = common::milog::MiLogStream::operator<<<char [12],(char *[12])0>(
                     v155,
                     (const char (*)[12])", time_var:");
            v157 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                     v156,
                     (const unsigned int *)(v4 + 48));
            common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
              v157,
              (const unsigned int *)(v4 + 32));
            common::milog::MiLogStream::~MiLogStream(&v268);
            isExpiredScheduleIdInDb = 0;
          }
        }
        else
        {
          isExpiredScheduleIdInDb = 0;
        }
      }
      else
      {
        common::milog::MiLogStream::create(
          &v268,
          &common::milog::MiLogDefault::default_log_obj_,
          4u,
          "./src/player/quest/player_quest_comp.cpp",
          "checkCond",
          3822);
        common::milog::MiLogStream::operator<<<char [23],(char *[23])0>(
          &v268,
          (const char (*)[23])"param size less than 3");
        common::milog::MiLogStream::~MiLogStream(&v268);
        isExpiredScheduleIdInDb = 0;
      }
      break;
    case QUEST_COND_TIME_VAR_PASS_DAY:
      if ( std::vector<int>::size(&cond->param) > 2 )
      {
        v158 = std::vector<int>::operator[](&cond->param, 0LL);
        v159 = v158;
        if ( *(_BYTE *)(((unsigned __int64)v158 >> 3) + 0x7FFF8000) != 0
          && (char)(((unsigned __int8)v158 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)v158 >> 3) + 0x7FFF8000) )
        {
          __asan_report_load4(v158);
        }
        *(_DWORD *)(v4 + 32) = *v159;
        v160 = (uint32_t *)std::vector<int>::operator[](&cond->param, 1uLL);
        v161 = v160;
        if ( *(_BYTE *)(((unsigned __int64)v160 >> 3) + 0x7FFF8000) != 0
          && (char)(((unsigned __int8)v160 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)v160 >> 3) + 0x7FFF8000) )
        {
          __asan_report_load4(v160);
        }
        key_0 = *v161;
        v162 = (uint32_t *)std::vector<int>::operator[](&cond->param, 2uLL);
        v163 = v162;
        if ( *(_BYTE *)(((unsigned __int64)v162 >> 3) + 0x7FFF8000) != 0
          && (char)(((unsigned __int8)v162 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)v162 >> 3) + 0x7FFF8000) )
        {
          __asan_report_load4(v162);
        }
        day_delta = *v163;
        time_var = PlayerQuestComp::getQuestTimeVar(this, *(_DWORD *)(v4 + 32), key_0);
        if ( time_var )
        {
          now_0 = common::tools::TimeUtils::getNow();
          ServiceBox::findService<GameserverService>();
          GameserverService::getConfig((GameserverService *const)(v4 + 192));
          v164 = std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 192));
          time_offset_sec = ConstValueExcelConfigMgr::getTimeOffsetSec(&v164->design_config.txt_config_mgr.const_value_config_mgr);
          std::shared_ptr<Config>::~shared_ptr((std::shared_ptr<Config> *const)(v4 + 192));
          *(_DWORD *)(v4 + 48) = common::tools::TimeUtils::getTimeDay(now_0, time_offset_sec);
          *(_DWORD *)(v4 + 64) = common::tools::TimeUtils::getTimeDay(time_var, time_offset_sec);
          if ( *(_DWORD *)(v4 + 48) >= *(_DWORD *)(v4 + 64) )
          {
            LOBYTE(isExpiredScheduleIdInDb) = day_delta <= *(_DWORD *)(v4 + 48) - *(_DWORD *)(v4 + 64);
          }
          else
          {
            common::milog::MiLogStream::create(
              &v268,
              &common::milog::MiLogDefault::default_log_obj_,
              4u,
              "./src/player/quest/player_quest_comp.cpp",
              "checkCond",
              3862);
            v165 = common::milog::MiLogStream::operator<<<char [28],(char *[28])0>(
                     &v268,
                     (const char (*)[28])"now_day < var_day. now_day:");
            v166 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                     v165,
                     (const unsigned int *)(v4 + 48));
            v167 = common::milog::MiLogStream::operator<<<char [11],(char *[11])0>(
                     v166,
                     (const char (*)[11])", var_day:");
            v168 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                     v167,
                     (const unsigned int *)(v4 + 64));
            common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
              v168,
              (const unsigned int *)(v4 + 32));
            common::milog::MiLogStream::~MiLogStream(&v268);
            isExpiredScheduleIdInDb = 0;
          }
        }
        else
        {
          isExpiredScheduleIdInDb = 0;
        }
      }
      else
      {
        common::milog::MiLogStream::create(
          &v268,
          &common::milog::MiLogDefault::default_log_obj_,
          4u,
          "./src/player/quest/player_quest_comp.cpp",
          "checkCond",
          3845);
        common::milog::MiLogStream::operator<<<char [23],(char *[23])0>(
          &v268,
          (const char (*)[23])"param size less than 3");
        common::milog::MiLogStream::~MiLogStream(&v268);
        isExpiredScheduleIdInDb = 0;
      }
      break;
    case QUEST_COND_PLAYER_CHOOSE_MALE:
      if ( std::vector<int>::size(&cond->param) )
      {
        if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
          __asan_report_load8(&this->player_);
        avatar_comp = Player::getAvatarComp(this->player_);
        v196 = (uint32_t *)std::vector<int>::operator[](&cond->param, 0LL);
        v197 = v196;
        if ( *(_BYTE *)(((unsigned __int64)v196 >> 3) + 0x7FFF8000) != 0
          && (char)(((unsigned __int8)v196 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)v196 >> 3) + 0x7FFF8000) )
        {
          __asan_report_load4(v196);
        }
        cond_is_male = *v197;
        player_gender_type = PlayerAvatarComp::getPlayerGenderType(avatar_comp);
        isExpiredScheduleIdInDb = cond_is_male == 1 && player_gender_type == PLAYER_GENDER_MALE
                               || !cond_is_male && player_gender_type == PLAYER_GENDER_FEMALE;
      }
      else
      {
        common::milog::MiLogStream::create(
          &v268,
          &common::milog::MiLogDefault::default_log_obj_,
          4u,
          "./src/player/quest/player_quest_comp.cpp",
          "checkCond",
          3939);
        common::milog::MiLogStream::operator<<<char [23],(char *[23])0>(
          &v268,
          (const char (*)[23])"param size less than 1");
        common::milog::MiLogStream::~MiLogStream(&v268);
        isExpiredScheduleIdInDb = 0;
      }
      break;
    case QUEST_COND_HISTORY_GOT_ANY_ITEM:
      if ( std::vector<int>::size(&cond->param) )
      {
        __for_range_1 = &cond->param;
        __for_begin._M_cur = (std::__detail::_Node_iterator_base<unsigned int,false>::__node_type *)std::vector<int>::begin(&cond->param)._M_current;
        __for_end._M_cur = (std::__detail::_Node_iterator_base<unsigned int,false>::__node_type *)std::vector<int>::end(&cond->param)._M_current;
        while ( __gnu_cxx::operator!=<int const*,std::vector<int>>(
                  (const __gnu_cxx::__normal_iterator<int const*,std::vector<int> > *)&__for_begin,
                  (const __gnu_cxx::__normal_iterator<int const*,std::vector<int> > *)&__for_end) )
        {
          v169 = (uint32_t *)__gnu_cxx::__normal_iterator<int const*,std::vector<int>>::operator*((const __gnu_cxx::__normal_iterator<int const*,std::vector<int> > *const)&__for_begin);
          v170 = v169;
          if ( *(_BYTE *)(((unsigned __int64)v169 >> 3) + 0x7FFF8000) != 0
            && (char)(((unsigned __int8)v169 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)v169 >> 3) + 0x7FFF8000) )
          {
            __asan_report_load4(v169);
          }
          item_id_1 = *v170;
          if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
            __asan_report_load8(&this->player_);
          v171 = Player::getItemComp(this->player_);
          if ( PlayerItemComp::hasOnceGotItemById(v171, item_id_1) )
          {
            isExpiredScheduleIdInDb = 1;
            goto LABEL_432;
          }
          __gnu_cxx::__normal_iterator<int const*,std::vector<int>>::operator++((__gnu_cxx::__normal_iterator<int const*,std::vector<int> > *const)&__for_begin);
        }
        isExpiredScheduleIdInDb = 0;
      }
      else
      {
        common::milog::MiLogStream::create(
          &v268,
          &common::milog::MiLogDefault::default_log_obj_,
          4u,
          "./src/player/quest/player_quest_comp.cpp",
          "checkCond",
          3871);
        common::milog::MiLogStream::operator<<<char [23],(char *[23])0>(
          &v268,
          (const char (*)[23])"param size less than 1");
        common::milog::MiLogStream::~MiLogStream(&v268);
        isExpiredScheduleIdInDb = 0;
      }
      break;
    case QUEST_COND_SCENE_LEVEL_TAG_EQ:
      if ( std::vector<int>::empty(&cond->param) )
      {
        common::milog::MiLogStream::create(
          &v268,
          &common::milog::MiLogDefault::default_log_obj_,
          4u,
          "./src/player/quest/player_quest_comp.cpp",
          "checkCond",
          3887);
        common::milog::MiLogStream::operator<<<char [23],(char *[23])0>(
          &v268,
          (const char (*)[23])"param size less than 1");
        common::milog::MiLogStream::~MiLogStream(&v268);
        isExpiredScheduleIdInDb = 0;
      }
      else
      {
        v172 = std::vector<int>::operator[](&cond->param, 0LL);
        v173 = v172;
        if ( *(_BYTE *)(((unsigned __int64)v172 >> 3) + 0x7FFF8000) != 0
          && (char)(((unsigned __int8)v172 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)v172 >> 3) + 0x7FFF8000) )
        {
          __asan_report_load4(v172);
        }
        *(_DWORD *)(v4 + 64) = *v173;
        if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
          __asan_report_load8(&this->player_);
        SceneComp = Player::getSceneComp(this->player_);
        PlayerSceneComp::getCurLevelTagIdVec((std::vector<unsigned int> *)(v4 + 224), SceneComp);
        LOBYTE(v175) = common::tools::MiscUtils::isContains<unsigned int>(
                         (std::vector<unsigned int> *)(v4 + 224),
                         (const unsigned int *)(v4 + 64));
        isExpiredScheduleIdInDb = v175;
        std::vector<unsigned int>::~vector((std::vector<unsigned int> *const)(v4 + 224));
      }
      break;
    case QUEST_COND_PLAYER_ENTER_REGION:
      if ( std::vector<int>::size(&cond->param) > 1 )
      {
        v176 = std::vector<int>::operator[](&cond->param, 0LL);
        if ( *(_BYTE *)(((unsigned __int64)v176 >> 3) + 0x7FFF8000) != 0
          && (char)(((unsigned __int8)v176 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)v176 >> 3) + 0x7FFF8000) )
        {
          __asan_report_load4(v176);
        }
        v177 = std::vector<int>::operator[](&cond->param, 1uLL);
        if ( *(_BYTE *)(((unsigned __int64)v177 >> 3) + 0x7FFF8000) != 0
          && (char)(((unsigned __int8)v177 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)v177 >> 3) + 0x7FFF8000) )
        {
          __asan_report_load4(v177);
        }
        if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
          __asan_report_load8(&this->player_);
        Player::getSceneComp(this->player_);
        PlayerSceneComp::getCurScene((const PlayerSceneComp *const)(v4 + 96));
        if ( std::operator==<Scene>((const std::shared_ptr<Scene> *)(v4 + 96), 0LL) )
        {
          isExpiredScheduleIdInDb = 0;
        }
        else
        {
          v178 = std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 96));
          BlockGroupComp = (unsigned int)Scene::getBlockGroupComp(v178);
          SceneBlockGroupComp::getActiveGroup((SceneBlockGroupComp *const)(v4 + 128), BlockGroupComp);
          if ( std::operator==<Group>((const std::shared_ptr<Group> *)(v4 + 128), 0LL) )
          {
            isExpiredScheduleIdInDb = 0;
          }
          else
          {
            v180 = (unsigned int)std::__shared_ptr_access<Group,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Group,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 128));
            Group::findEntityByConfigId<Region>((Group *const)(v4 + 160), v180);
            if ( std::operator==<Region>((const std::shared_ptr<Region> *)(v4 + 160), 0LL) )
            {
              isExpiredScheduleIdInDb = 0;
            }
            else
            {
              if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
                __asan_report_load8(&this->player_);
              Player::getAvatarComp(this->player_);
              PlayerAvatarComp::getCurAvatar((const PlayerAvatarComp *const)(v4 + 192));
              if ( std::operator==<Avatar>((const std::shared_ptr<Avatar> *)(v4 + 192), 0LL) )
              {
                isExpiredScheduleIdInDb = 0;
              }
              else
              {
                v181 = std::__shared_ptr_access<Region,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Region,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 160));
                v182 = std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 192));
                EntityId = Entity::getEntityId((const Entity *const)v182);
                isExpiredScheduleIdInDb = Region::isEntityInRegion(v181, EntityId);
              }
              std::shared_ptr<Avatar>::~shared_ptr((std::shared_ptr<Avatar> *const)(v4 + 192));
            }
            std::shared_ptr<Region>::~shared_ptr((std::shared_ptr<Region> *const)(v4 + 160));
          }
          std::shared_ptr<Group>::~shared_ptr((std::shared_ptr<Group> *const)(v4 + 128));
        }
        std::shared_ptr<Scene>::~shared_ptr((std::shared_ptr<Scene> *const)(v4 + 96));
      }
      else
      {
        common::milog::MiLogStream::create(
          &v268,
          &common::milog::MiLogDefault::default_log_obj_,
          4u,
          "./src/player/quest/player_quest_comp.cpp",
          "checkCond",
          3898);
        common::milog::MiLogStream::operator<<<char [23],(char *[23])0>(
          &v268,
          (const char (*)[23])"param size less than 2");
        common::milog::MiLogStream::~MiLogStream(&v268);
        isExpiredScheduleIdInDb = 0;
      }
      break;
    case QUEST_COND_ACTIVITY_SCHEDULE_OPEN_AND_COND:
      if ( std::vector<int>::size(&cond->param) > 1 )
      {
        v84 = (uint32_t *)std::vector<int>::operator[](&cond->param, 0LL);
        v85 = v84;
        if ( *(_BYTE *)(((unsigned __int64)v84 >> 3) + 0x7FFF8000) != 0
          && (char)(((unsigned __int8)v84 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)v84 >> 3) + 0x7FFF8000) )
        {
          __asan_report_load4(v84);
        }
        schedule_id = *v85;
        v86 = (uint32_t *)std::vector<int>::operator[](&cond->param, 1uLL);
        v87 = v86;
        if ( *(_BYTE *)(((unsigned __int64)v86 >> 3) + 0x7FFF8000) != 0
          && (char)(((unsigned __int8)v86 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)v86 >> 3) + 0x7FFF8000) )
        {
          __asan_report_load4(v86);
        }
        cond_id_0 = *v87;
        ServiceBox::findService<GameserverService>();
        GameserverService::getConfig((GameserverService *const)(v4 + 192));
        v88 = std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 192));
        NewActivityExcelConfigMgr::getActivityIdByScheduleId(
          &v88->design_config.txt_config_mgr.new_activity_config_mgr,
          schedule_id);
        std::shared_ptr<Config>::~shared_ptr((std::shared_ptr<Config> *const)(v4 + 192));
        if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
          __asan_report_load8(&this->player_);
        v89 = (unsigned int)Player::getActivityComp(this->player_);
        PlayerActivityComp::findBaseActivity((PlayerActivityComp *const)(v4 + 192), v89);
        if ( std::operator==<BaseActivity>(0LL, (const std::shared_ptr<BaseActivity> *)(v4 + 192))
          || (v90 = std::__shared_ptr_access<BaseActivity,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<BaseActivity,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 192)),
              !BaseActivity::isOpening(v90, 0)) )
        {
          isExpiredScheduleIdInDb = 0;
        }
        else
        {
          v92 = std::__shared_ptr_access<BaseActivity,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<BaseActivity,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 192));
          if ( schedule_id == BaseActivity::getScheduleId(v92) )
          {
            v93 = std::__shared_ptr_access<BaseActivity,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<BaseActivity,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 192));
            LOBYTE(v94) = BaseActivity::isMeetCond(v93, cond_id_0);
            isExpiredScheduleIdInDb = v94;
          }
          else
          {
            isExpiredScheduleIdInDb = 0;
          }
        }
        std::shared_ptr<BaseActivity>::~shared_ptr((std::shared_ptr<BaseActivity> *const)(v4 + 192));
      }
      else
      {
        common::milog::MiLogStream::create(
          &v268,
          &common::milog::MiLogDefault::default_log_obj_,
          4u,
          "./src/player/quest/player_quest_comp.cpp",
          "checkCond",
          3640);
        common::milog::MiLogStream::operator<<<char [23],(char *[23])0>(
          &v268,
          (const char (*)[23])"param size less than 2");
        common::milog::MiLogStream::~MiLogStream(&v268);
        isExpiredScheduleIdInDb = 0;
      }
      break;
    case QUEST_COND_ARANARA_COLLECTION_STATE_EQ:
      if ( std::vector<int>::size(&cond->param) > 2 )
      {
        v184 = std::vector<int>::operator[](&cond->param, 0LL);
        v185 = v184;
        if ( *(_BYTE *)(((unsigned __int64)v184 >> 3) + 0x7FFF8000) != 0
          && (char)(((unsigned __int8)v184 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)v184 >> 3) + 0x7FFF8000) )
        {
          __asan_report_load4(v184);
        }
        *(_DWORD *)(v4 + 32) = *v185;
        v186 = std::vector<int>::operator[](&cond->param, 1uLL);
        v187 = v186;
        if ( *(_BYTE *)(((unsigned __int64)v186 >> 3) + 0x7FFF8000) != 0
          && (char)(((unsigned __int8)v186 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)v186 >> 3) + 0x7FFF8000) )
        {
          __asan_report_load4(v186);
        }
        *(_DWORD *)(v4 + 48) = *v187;
        v188 = (uint32_t *)std::vector<int>::operator[](&cond->param, 2uLL);
        v189 = v188;
        if ( *(_BYTE *)(((unsigned __int64)v188 >> 3) + 0x7FFF8000) != 0
          && (char)(((unsigned __int8)v188 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)v188 >> 3) + 0x7FFF8000) )
        {
          __asan_report_load4(v188);
        }
        target_state = *v189;
        *(_DWORD *)(v4 + 64) = 0;
        if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
          __asan_report_load8(&this->player_);
        AranaraCollectionComp = Player::getAranaraCollectionComp(this->player_);
        if ( PlayerAranaraCollectionComp::getCollectionState(
               AranaraCollectionComp,
               *(_DWORD *)(v4 + 32),
               *(_DWORD *)(v4 + 48),
               (uint32_t *)(v4 + 64)) )
        {
          common::milog::MiLogStream::create(
            &v268,
            &common::milog::MiLogDefault::default_log_obj_,
            4u,
            "./src/player/quest/player_quest_comp.cpp",
            "checkCond",
            3930);
          v191 = common::milog::MiLogStream::operator<<<char [35],(char *[35])0>(
                   &v268,
                   (const char (*)[35])"getCollectionState fail, quest_id:");
          v192 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                   v191,
                   (const unsigned int *)(v4 + 80));
          v193 = common::milog::MiLogStream::operator<<<char [18],(char *[18])0>(
                   v192,
                   (const char (*)[18])" collection_type:");
          v194 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                   v193,
                   (const unsigned int *)(v4 + 32));
          v195 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                   v194,
                   (const char (*)[16])" collection_id:");
          common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v195, (const unsigned int *)(v4 + 48));
          common::milog::MiLogStream::~MiLogStream(&v268);
          isExpiredScheduleIdInDb = 0;
        }
        else
        {
          LOBYTE(isExpiredScheduleIdInDb) = target_state == *(_DWORD *)(v4 + 64);
        }
      }
      else
      {
        common::milog::MiLogStream::create(
          &v268,
          &common::milog::MiLogDefault::default_log_obj_,
          4u,
          "./src/player/quest/player_quest_comp.cpp",
          "checkCond",
          3921);
        common::milog::MiLogStream::operator<<<char [23],(char *[23])0>(
          &v268,
          (const char (*)[23])"param size less than 3");
        common::milog::MiLogStream::~MiLogStream(&v268);
        isExpiredScheduleIdInDb = 0;
      }
      break;
    case QUEST_COND_GCG_EXP_OVERFLOW:
      if ( std::vector<int>::size(&cond->param) )
      {
        v198 = (uint32_t *)std::vector<int>::operator[](&cond->param, 0LL);
        v199 = v198;
        if ( *(_BYTE *)(((unsigned __int64)v198 >> 3) + 0x7FFF8000) != 0
          && (char)(((unsigned __int8)v198 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)v198 >> 3) + 0x7FFF8000) )
        {
          __asan_report_load4(v198);
        }
        level = *v199;
        if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
          __asan_report_load8(&this->player_);
        GCGComp = Player::getGCGComp(this->player_);
        Basic = PlayerGCGComp::getBasic(GCGComp);
        LOBYTE(v202) = GCGBasic::isExpOverflow(Basic, level);
        isExpiredScheduleIdInDb = v202;
      }
      else
      {
        common::milog::MiLogStream::create(
          &v268,
          &common::milog::MiLogDefault::default_log_obj_,
          4u,
          "./src/player/quest/player_quest_comp.cpp",
          "checkCond",
          3956);
        common::milog::MiLogStream::operator<<<char [23],(char *[23])0>(
          &v268,
          (const char (*)[23])"param size less than 1");
        common::milog::MiLogStream::~MiLogStream(&v268);
        isExpiredScheduleIdInDb = 0;
      }
      break;
    default:
      isExpiredScheduleIdInDb = 1;
      break;
  }
LABEL_432:
  result = isExpiredScheduleIdInDb;
  if ( v269 == (char *)v4 )
  {
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8008) = 0LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8010) = 0LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8018) = 0LL;
    *(_DWORD *)((v4 >> 3) + 0x7FFF8020) = 0;
  }
  else
  {
    *(_QWORD *)v4 = 1172321806LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v4 >> 3) + 0x7FFF8020) = -168430091;
  }
  return result;
};

// Line 3970: range 0000000013DEE6DE-0000000013DEEBB6
__int64 __fastcall PlayerQuestComp::tryAcceptRandomQuest(
        PlayerQuestComp *const this,
        uint32_t entrance_id,
        bool is_notify)
{
  unsigned __int64 v3; // r13
  __int64 v4; // rax
  _DWORD *v5; // r12
  common::milog::MiLogStream *v6; // r14
  common::milog::MiLogStream *v7; // rax
  common::milog::MiLogStream *v8; // rax
  uint32_t v9; // r14d
  std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v10; // rax
  bool isRandomQuestTemplateSystemClosed; // r14
  common::milog::MiLogStream *v12; // rax
  std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v13; // rax
  bool isRandomQuestTemplateClosed; // r14
  common::milog::MiLogStream *v15; // rax
  common::milog::MiLogStream *v16; // rax
  common::milog::MiLogStream *v17; // rax
  __int64 result; // rax
  unsigned int val; // [rsp+1Ch] [rbp-104h] BYREF
  std::shared_ptr<Config> v21; // [rsp+20h] [rbp-100h] BYREF
  common::milog::MiLogStream v22; // [rsp+30h] [rbp-F0h] BYREF
  char v23[208]; // [rsp+50h] [rbp-D0h] BYREF

  v3 = (unsigned __int64)v23;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_2(160LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "3 32 4 16 entrance_id:3969 48 16 10 guard:3971 80 40 18 template_pair:3973";
  *(_QWORD *)(v3 + 16) = PlayerQuestComp::tryAcceptRandomQuest;
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = 61956;
  v5[536862722] = 62194;
  v5[536862723] = -218103808;
  v5[536862724] = -202116109;
  *(_DWORD *)(v3 + 32) = entrance_id;
  QuestOperatorGuard::QuestOperatorGuard((QuestOperatorGuard *const)(v3 + 48), &this->quest_op_);
  PlayerQuestComp::generateRandomTemplate(
    (std::pair<unsigned int,std::pair<data::LogicType,std::vector<std::shared_ptr<RandomQuestFilter>> > > *)(v3 + 80),
    this,
    *(_DWORD *)(v3 + 32));
  if ( *(_DWORD *)(v3 + 80) )
  {
    ServiceBox::findService<GameserverService>();
    GameserverService::getConfig((GameserverService *const)&v21);
    v10 = std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false> *const)&v21);
    isRandomQuestTemplateSystemClosed = FeatureSwitchMgr::isRandomQuestTemplateSystemClosed(&v10->feature_switch_mgr);
    std::shared_ptr<Config>::~shared_ptr(&v21);
    if ( isRandomQuestTemplateSystemClosed )
    {
      common::milog::MiLogStream::create(
        &v22,
        &common::milog::MiLogDefault::default_log_obj_,
        1u,
        "./src/player/quest/player_quest_comp.cpp",
        "tryAcceptRandomQuest",
        3982);
      v12 = common::milog::MiLogStream::operator<<<char [56],(char *[56])0>(
              &v22,
              (const char (*)[56])"randomQuestTemplate feature switch closed, entrance_id:");
      common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v12, (const unsigned int *)(v3 + 32));
      common::milog::MiLogStream::~MiLogStream(&v22);
      v9 = 0;
    }
    else
    {
      ServiceBox::findService<GameserverService>();
      GameserverService::getConfig((GameserverService *const)&v21);
      v13 = std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false> *const)&v21);
      isRandomQuestTemplateClosed = FeatureSwitchMgr::isRandomQuestTemplateClosed(
                                      &v13->feature_switch_mgr,
                                      *(_DWORD *)(v3 + 80));
      std::shared_ptr<Config>::~shared_ptr(&v21);
      if ( isRandomQuestTemplateClosed )
      {
        common::milog::MiLogStream::create(
          &v22,
          &common::milog::MiLogDefault::default_log_obj_,
          1u,
          "./src/player/quest/player_quest_comp.cpp",
          "tryAcceptRandomQuest",
          3987);
        v15 = common::milog::MiLogStream::operator<<<char [56],(char *[56])0>(
                &v22,
                (const char (*)[56])"randomQuestTemplate feature switch closed, entrance_id:");
        v16 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                v15,
                (const unsigned int *)(v3 + 32));
        v17 = common::milog::MiLogStream::operator<<<char [15],(char *[15])0>(v16, (const char (*)[15])", template_id:");
        common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v17, (const unsigned int *)(v3 + 80));
        common::milog::MiLogStream::~MiLogStream(&v22);
        v9 = 0;
      }
      else
      {
        v9 = PlayerQuestComp::tryAcceptRandomQuestByTemplate(
               this,
               *(_DWORD *)(v3 + 32),
               *(_DWORD *)(v3 + 80),
               (const std::pair<data::LogicType,std::vector<std::shared_ptr<RandomQuestFilter>> > *)(v3 + 88),
               is_notify);
      }
    }
  }
  else
  {
    common::milog::MiLogStream::create(
      &v22,
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/player/quest/player_quest_comp.cpp",
      "tryAcceptRandomQuest",
      3976);
    v6 = common::milog::MiLogStream::operator<<<char [36],(char *[36])0>(
           &v22,
           (const char (*)[36])"generateRandomTemplate failed, uid:");
    if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
      __asan_report_load8(&this->player_);
    val = Player::getUid(this->player_);
    v7 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v6, &val);
    v8 = common::milog::MiLogStream::operator<<<char [14],(char *[14])0>(v7, (const char (*)[14])" entrance_id:");
    common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v8, (const unsigned int *)(v3 + 32));
    common::milog::MiLogStream::~MiLogStream(&v22);
    v9 = 0;
  }
  std::pair<unsigned int,std::pair<data::LogicType,std::vector<std::shared_ptr<RandomQuestFilter>>>>::~pair((std::pair<unsigned int,std::pair<data::LogicType,std::vector<std::shared_ptr<RandomQuestFilter>> > > *const)(v3 + 80));
  QuestOperatorGuard::~QuestOperatorGuard((QuestOperatorGuard *const)(v3 + 48));
  result = v9;
  if ( v23 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8010) = 0;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8010) = -168430091;
  }
  return result;
};

// Line 3994: range 0000000013DEEBB8-0000000013DEF05D
__int64 __fastcall PlayerQuestComp::tryAcceptRandomQuestByTemplate(
        PlayerQuestComp *const this,
        uint32_t entrance_id,
        uint32_t template_id,
        const std::pair<data::LogicType,std::vector<std::shared_ptr<RandomQuestFilter>> > *filter_config,
        bool is_notify)
{
  unsigned __int64 v5; // r13
  __int64 v6; // rax
  _DWORD *v7; // r12
  common::milog::MiLogStream *v8; // r14
  common::milog::MiLogStream *v9; // rax
  common::milog::MiLogStream *v10; // rax
  uint32_t ParentQuestId; // r14d
  common::milog::MiLogStream *v12; // r14
  common::milog::MiLogStream *v13; // rax
  common::milog::MiLogStream *v14; // rax
  std::__shared_ptr_access<ParentQuest,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v15; // rax
  __int64 result; // rax
  unsigned int val; // [rsp+2Ch] [rbp-124h] BYREF
  std::shared_ptr<ParentQuest> p_parent_quest_ptr; // [rsp+30h] [rbp-120h] BYREF
  common::milog::MiLogStream v22; // [rsp+40h] [rbp-110h] BYREF
  char v23[240]; // [rsp+60h] [rbp-F0h] BYREF

  v5 = (unsigned __int64)v23;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v6 = __asan_stack_malloc_2(192LL);
    if ( v6 )
      v5 = v6;
  }
  *(_QWORD *)v5 = 1102416563LL;
  *(_QWORD *)(v5 + 8) = "4 48 4 16 template_id:3993 64 16 10 guard:3995 96 16 28 random_parent_quest_ptr:4003 128 24 15 factor_vec:3996";
  *(_QWORD *)(v5 + 16) = PlayerQuestComp::tryAcceptRandomQuestByTemplate;
  v7 = (_DWORD *)(v5 >> 3);
  v7[536862720] = -235802127;
  v7[536862721] = -234556943;
  v7[536862722] = -219021312;
  v7[536862723] = -219021312;
  v7[536862724] = -218103808;
  v7[536862725] = -202116109;
  *(_DWORD *)(v5 + 48) = template_id;
  QuestOperatorGuard::QuestOperatorGuard((QuestOperatorGuard *const)(v5 + 64), &this->quest_op_);
  std::vector<unsigned int>::vector((std::vector<unsigned int> *const)(v5 + 128));
  if ( PlayerQuestComp::generateRandomSampleMap(
         this,
         *(_DWORD *)(v5 + 48),
         filter_config,
         (std::vector<unsigned int> *)(v5 + 128)) )
  {
    common::milog::MiLogStream::create(
      &v22,
      &common::milog::MiLogDefault::default_log_obj_,
      1u,
      "./src/player/quest/player_quest_comp.cpp",
      "tryAcceptRandomQuestByTemplate",
      3999);
    v8 = common::milog::MiLogStream::operator<<<char [37],(char *[37])0>(
           &v22,
           (const char (*)[37])"generateRandomSampleMap failed, uid:");
    if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
      __asan_report_load8(&this->player_);
    val = Player::getUid(this->player_);
    v9 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v8, &val);
    v10 = common::milog::MiLogStream::operator<<<char [14],(char *[14])0>(v9, (const char (*)[14])" template_id:");
    common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v10, (const unsigned int *)(v5 + 48));
    common::milog::MiLogStream::~MiLogStream(&v22);
    ParentQuestId = 0;
  }
  else
  {
    PlayerQuestComp::generateRandomParentQuest(
      (PlayerQuestComp *const)(v5 + 96),
      (uint32_t)this,
      entrance_id,
      (const std::vector<unsigned int> *)*(unsigned int *)(v5 + 48));
    if ( std::operator==<ParentQuest>((const std::shared_ptr<ParentQuest> *)(v5 + 96), 0LL) )
    {
      common::milog::MiLogStream::create(
        &v22,
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/player/quest/player_quest_comp.cpp",
        "tryAcceptRandomQuestByTemplate",
        4006);
      v12 = common::milog::MiLogStream::operator<<<char [39],(char *[39])0>(
              &v22,
              (const char (*)[39])"generateRandomParentQuest failed, uid:");
      if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
        __asan_report_load8(&this->player_);
      val = Player::getUid(this->player_);
      v13 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v12, &val);
      v14 = common::milog::MiLogStream::operator<<<char [14],(char *[14])0>(v13, (const char (*)[14])" template_id:");
      common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v14, (const unsigned int *)(v5 + 48));
      common::milog::MiLogStream::~MiLogStream(&v22);
      ParentQuestId = 0;
    }
    else
    {
      std::shared_ptr<ParentQuest>::shared_ptr(&p_parent_quest_ptr, (const std::shared_ptr<ParentQuest> *)(v5 + 96));
      PlayerQuestComp::acceptRandomParentQuest(this, &p_parent_quest_ptr, is_notify);
      std::shared_ptr<ParentQuest>::~shared_ptr(&p_parent_quest_ptr);
      v15 = std::__shared_ptr_access<ParentQuest,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<ParentQuest,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v5 + 96));
      ParentQuestId = ParentQuest::getParentQuestId(v15);
    }
    std::shared_ptr<ParentQuest>::~shared_ptr((std::shared_ptr<ParentQuest> *const)(v5 + 96));
  }
  std::vector<unsigned int>::~vector((std::vector<unsigned int> *const)(v5 + 128));
  QuestOperatorGuard::~QuestOperatorGuard((QuestOperatorGuard *const)(v5 + 64));
  result = ParentQuestId;
  if ( v23 == (char *)v5 )
  {
    *(_QWORD *)((v5 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8008) = 0LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8010) = 0LL;
  }
  else
  {
    *(_QWORD *)v5 = 1172321806LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 4017: range 0000000013DEF05E-0000000013DEF0E0
int32_t __cdecl PlayerQuestComp::acceptRandomParentQuest(
        PlayerQuestComp *const this,
        ParentQuestPtr *p_parent_quest_ptr,
        bool is_notify)
{
  std::shared_ptr<ParentQuest> v5; // [rsp+20h] [rbp-20h] BYREF

  std::shared_ptr<ParentQuest>::shared_ptr(&v5, p_parent_quest_ptr);
  QuestOperator::acceptRandomParentQuest(&this->quest_op_, &v5, is_notify);
  std::shared_ptr<ParentQuest>::~shared_ptr(&v5);
  return 0;
};

// Line 4023: range 0000000013DEF0E2-0000000013DEF680
int32_t __cdecl PlayerQuestComp::internalAcceptRandomParentQuest(
        PlayerQuestComp *const this,
        ParentQuestPtr *p_parent_quest_ptr,
        bool is_notify)
{
  common::milog::MiLogStream *v3; // rbx
  ParentQuest *v5; // rax
  common::milog::MiLogStream *v6; // rbx
  common::milog::MiLogStream *v7; // rax
  common::milog::MiLogStream *v8; // rbx
  std::__shared_ptr_access<ParentQuest,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v9; // rax
  bool v10; // bl
  common::milog::MiLogStream *v11; // rbx
  common::milog::MiLogStream *v12; // rax
  common::milog::MiLogStream *v13; // rbx
  std::__shared_ptr_access<ParentQuest,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v14; // rax
  QuestExcelConfigMgr *p_quest_config_mgr; // r12
  std::__shared_ptr_access<ParentQuest,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v16; // rax
  uint32_t ParentQuestId; // eax
  std::__shared_ptr_access<ParentQuest,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v18; // rax
  uint32_t v19; // edx
  bool v20; // r12
  std::__shared_ptr_access<ParentQuest,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v21; // rax
  uint32_t v22; // esi
  ParentQuest *v23; // rax
  std::tuple_element<1,const std::pair<unsigned int const,unsigned int> >::type *v24; // rax
  bool v25; // cl
  unsigned int Uid; // [rsp+20h] [rbp-80h] BYREF
  unsigned int val; // [rsp+24h] [rbp-7Ch] BYREF
  std::map<unsigned int,unsigned int>::const_iterator __for_begin; // [rsp+28h] [rbp-78h] BYREF
  std::map<unsigned int,unsigned int>::const_iterator __for_end; // [rsp+30h] [rbp-70h] BYREF
  const std::map<unsigned int,unsigned int> *quest_id_map; // [rsp+38h] [rbp-68h]
  const std::map<unsigned int,unsigned int> *__for_range; // [rsp+40h] [rbp-60h]
  const std::pair<unsigned int const,unsigned int> *v34; // [rsp+48h] [rbp-58h]
  std::tuple_element<0,const std::pair<unsigned int const,unsigned int> >::type *config_id; // [rsp+50h] [rbp-50h]
  std::tuple_element<1,const std::pair<unsigned int const,unsigned int> >::type *quest_id; // [rsp+58h] [rbp-48h]
  std::shared_ptr<ParentQuest> v37; // [rsp+60h] [rbp-40h] BYREF
  common::milog::MiLogStream v38; // [rsp+70h] [rbp-30h] BYREF

  if ( std::operator==<ParentQuest>(p_parent_quest_ptr, 0LL) )
  {
    common::milog::MiLogStream::create(
      &v38,
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/player/quest/player_quest_comp.cpp",
      "internalAcceptRandomParentQuest",
      4026);
    v3 = common::milog::MiLogStream::operator<<<char [34],(char *[34])0>(
           &v38,
           (const char (*)[34])"parent quest ptr is nullptr, uid:");
    if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
      __asan_report_load8(&this->player_);
    val = Player::getUid(this->player_);
    common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v3, &val);
    common::milog::MiLogStream::~MiLogStream(&v38);
    return -1;
  }
  else
  {
    v5 = std::__shared_ptr_access<ParentQuest,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<ParentQuest,(__gnu_cxx::_Lock_policy)2,false,false> *const)p_parent_quest_ptr);
    if ( !ParentQuest::isRandom(v5) )
    {
      common::milog::MiLogStream::create(
        &v38,
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/player/quest/player_quest_comp.cpp",
        "internalAcceptRandomParentQuest",
        4032);
      v6 = common::milog::MiLogStream::operator<<<char [33],(char *[33])0>(
             &v38,
             (const char (*)[33])"parent quest is not random, uid:");
      if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
        __asan_report_load8(&this->player_);
      Uid = Player::getUid(this->player_);
      v7 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v6, &Uid);
      v8 = common::milog::MiLogStream::operator<<<char [18],(char *[18])0>(v7, (const char (*)[18])" parent_quest_id:");
      v9 = std::__shared_ptr_access<ParentQuest,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<ParentQuest,(__gnu_cxx::_Lock_policy)2,false,false> *const)p_parent_quest_ptr);
      val = ParentQuest::getParentQuestId(v9);
      common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v8, &val);
      common::milog::MiLogStream::~MiLogStream(&v38);
      return -1;
    }
    else
    {
      std::shared_ptr<ParentQuest>::shared_ptr(&v37, p_parent_quest_ptr);
      v10 = PlayerQuestComp::emplaceParentQuest(this, &v37, is_notify) != 0;
      std::shared_ptr<ParentQuest>::~shared_ptr(&v37);
      if ( v10 )
      {
        common::milog::MiLogStream::create(
          &v38,
          &common::milog::MiLogDefault::default_log_obj_,
          3u,
          "./src/player/quest/player_quest_comp.cpp",
          "internalAcceptRandomParentQuest",
          4038);
        v11 = common::milog::MiLogStream::operator<<<char [32],(char *[32])0>(
                &v38,
                (const char (*)[32])"emplaceParentQuest failed, uid:");
        if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
          __asan_report_load8(&this->player_);
        Uid = Player::getUid(this->player_);
        v12 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v11, &Uid);
        v13 = common::milog::MiLogStream::operator<<<char [18],(char *[18])0>(
                v12,
                (const char (*)[18])" parent_quest_id:");
        v14 = std::__shared_ptr_access<ParentQuest,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<ParentQuest,(__gnu_cxx::_Lock_policy)2,false,false> *const)p_parent_quest_ptr);
        val = ParentQuest::getParentQuestId(v14);
        common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v13, &val);
        common::milog::MiLogStream::~MiLogStream(&v38);
        return -1;
      }
      else
      {
        ServiceBox::findService<GameserverService>();
        GameserverService::getConfig((GameserverService *const)&v37);
        p_quest_config_mgr = &std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false> *const)&v37)->design_config.txt_config_mgr.quest_config_mgr;
        v16 = std::__shared_ptr_access<ParentQuest,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<ParentQuest,(__gnu_cxx::_Lock_policy)2,false,false> *const)p_parent_quest_ptr);
        ParentQuestId = ParentQuest::getParentQuestId(v16);
        v20 = 0;
        if ( QuestExcelConfigMgr::isChapterBeginMainQuest(p_quest_config_mgr, ParentQuestId) )
        {
          v18 = std::__shared_ptr_access<ParentQuest,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<ParentQuest,(__gnu_cxx::_Lock_policy)2,false,false> *const)p_parent_quest_ptr);
          v19 = ParentQuest::getParentQuestId(v18);
          if ( (unsigned __int8)PlayerQuestComp::canStartParentQuest(this, v19) != 1 )
            v20 = 1;
        }
        std::shared_ptr<Config>::~shared_ptr((std::shared_ptr<Config> *const)&v37);
        if ( v20 )
        {
          v21 = std::__shared_ptr_access<ParentQuest,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<ParentQuest,(__gnu_cxx::_Lock_policy)2,false,false> *const)p_parent_quest_ptr);
          v22 = ParentQuest::getParentQuestId(v21);
          PlayerQuestComp::setChapterStateByParentQuestId(this, v22, CHAPTER_STATE_UNABLE_TO_BEGIN, is_notify);
        }
        v23 = std::__shared_ptr_access<ParentQuest,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<ParentQuest,(__gnu_cxx::_Lock_policy)2,false,false> *const)p_parent_quest_ptr);
        quest_id_map = ParentQuest::getRandomQuestIdMap(v23);
        __for_range = quest_id_map;
        __for_begin._M_node = std::map<unsigned int,unsigned int>::begin(quest_id_map)._M_node;
        __for_end._M_node = std::map<unsigned int,unsigned int>::end(quest_id_map)._M_node;
        while ( std::operator!=(&__for_begin, &__for_end) )
        {
          v34 = std::_Rb_tree_const_iterator<std::pair<unsigned int const,unsigned int>>::operator*(&__for_begin);
          config_id = std::get<0ul,unsigned int const,unsigned int>(v34);
          v24 = (std::tuple_element<1,const std::pair<unsigned int const,unsigned int> >::type *)std::get<1ul,unsigned int const,unsigned int>(v34);
          quest_id = v24;
          v25 = is_notify;
          if ( *(_BYTE *)(((unsigned __int64)v24 >> 3) + 0x7FFF8000) != 0
            && (char)(((unsigned __int8)v24 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)v24 >> 3) + 0x7FFF8000) )
          {
            __asan_report_load4(v24);
          }
          PlayerQuestComp::acceptQuest(this, *quest_id, 0, v25);
          std::_Rb_tree_const_iterator<std::pair<unsigned int const,unsigned int>>::operator++(&__for_begin);
        }
        return 0;
      }
    }
  }
};

// Line 4060: range 0000000013DEF682-0000000013DEF734
const data::QuestExcelConfig *__cdecl PlayerQuestComp::findPlayerQuestExcelConfig(
        const PlayerQuestComp *const this,
        uint32_t quest_id)
{
  std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v2; // rax
  const data::QuestExcelConfig *QuestExcelConfig; // rbx
  std::shared_ptr<Config> v5[2]; // [rsp+10h] [rbp-20h] BYREF

  if ( PlayerQuestComp::isRandomQuest(this, quest_id) )
    return PlayerQuestComp::findRandomQuestExcelConfig(this, quest_id);
  ServiceBox::findService<GameserverService>();
  GameserverService::getConfig((GameserverService *const)v5);
  v2 = std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false> *const)v5);
  QuestExcelConfig = data::QuestExcelConfigMgrBase::findQuestExcelConfig(
                       &v2->design_config.txt_config_mgr.quest_config_mgr,
                       quest_id);
  std::shared_ptr<Config>::~shared_ptr(v5);
  return QuestExcelConfig;
};

// Line 4072: range 0000000013DEF736-0000000013DEF8AF
const data::QuestExcelConfig *__fastcall PlayerQuestComp::findRandomQuestExcelConfig(
        const PlayerQuestComp *const this,
        uint32_t quest_id)
{
  unsigned __int64 v2; // rbx
  __int64 v3; // rax
  _DWORD *v4; // r12
  const data::QuestExcelConfig *result; // rax
  std::_Rb_tree_const_iterator<std::pair<unsigned int const,data::QuestExcelConfig*> >::pointer v6; // rax
  std::_Rb_tree_const_iterator<std::pair<unsigned int const,data::QuestExcelConfig*> >::_Self __y; // [rsp+18h] [rbp-88h] BYREF
  char v8[128]; // [rsp+20h] [rbp-80h] BYREF

  v2 = (unsigned __int64)v8;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_1(96LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "2 48 4 13 quest_id:4071 64 8 9 iter:4073";
  *(_QWORD *)(v2 + 16) = PlayerQuestComp::findRandomQuestExcelConfig;
  v4 = (_DWORD *)(v2 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = -234556943;
  v4[536862722] = -202116352;
  *(_DWORD *)(v2 + 48) = quest_id;
  *(std::map<unsigned int,data::QuestExcelConfig*>::const_iterator *)(v2 + 64) = std::map<unsigned int,data::QuestExcelConfig *>::find(
                                                                                   &this->quest_config_map_,
                                                                                   (const std::map<unsigned int,data::QuestExcelConfig*>::key_type *)(v2 + 48));
  __y._M_node = std::map<unsigned int,data::QuestExcelConfig *>::end(&this->quest_config_map_)._M_node;
  if ( std::operator==(
         (const std::_Rb_tree_const_iterator<std::pair<unsigned int const,data::QuestExcelConfig*> >::_Self *)(v2 + 64),
         &__y) )
  {
    result = 0LL;
  }
  else
  {
    v6 = std::_Rb_tree_const_iterator<std::pair<unsigned int const,data::QuestExcelConfig *>>::operator->((const std::_Rb_tree_const_iterator<std::pair<unsigned int const,data::QuestExcelConfig*> > *const)(v2 + 64));
    if ( *(_BYTE *)(((unsigned __int64)&v6->second >> 3) + 0x7FFF8000) )
      v6 = (std::_Rb_tree_const_iterator<std::pair<unsigned int const,data::QuestExcelConfig*> >::pointer)__asan_report_load8(&v6->second);
    result = v6->second;
  }
  if ( v8 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8008) = 0;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8008) = -168430091;
  }
  return result;
};

// Line 4085: range 0000000013DEF8B0-0000000013DEF962
const data::MainQuestExcelConfig *__cdecl PlayerQuestComp::findPlayerParentQuestExcelConfig(
        const PlayerQuestComp *const this,
        uint32_t parent_quest_id)
{
  std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v2; // rax
  const data::MainQuestExcelConfig *MainQuestExcelConfig; // rbx
  std::shared_ptr<Config> v5[2]; // [rsp+10h] [rbp-20h] BYREF

  if ( PlayerQuestComp::isRandomParentQuest(this, parent_quest_id) )
    return PlayerQuestComp::findRandomParentQuestExcelConfig(this, parent_quest_id);
  ServiceBox::findService<GameserverService>();
  GameserverService::getConfig((GameserverService *const)v5);
  v2 = std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false> *const)v5);
  MainQuestExcelConfig = data::QuestExcelConfigMgrBase::findMainQuestExcelConfig(
                           &v2->design_config.txt_config_mgr.quest_config_mgr,
                           parent_quest_id);
  std::shared_ptr<Config>::~shared_ptr(v5);
  return MainQuestExcelConfig;
};

// Line 4097: range 0000000013DEF964-0000000013DEFADD
const data::MainQuestExcelConfig *__fastcall PlayerQuestComp::findRandomParentQuestExcelConfig(
        const PlayerQuestComp *const this,
        uint32_t parent_quest_id)
{
  unsigned __int64 v2; // rbx
  __int64 v3; // rax
  _DWORD *v4; // r12
  const data::MainQuestExcelConfig *result; // rax
  std::_Rb_tree_const_iterator<std::pair<unsigned int const,data::MainQuestExcelConfig*> >::pointer v6; // rax
  std::_Rb_tree_const_iterator<std::pair<unsigned int const,data::MainQuestExcelConfig*> >::_Self __y; // [rsp+18h] [rbp-88h] BYREF
  char v8[128]; // [rsp+20h] [rbp-80h] BYREF

  v2 = (unsigned __int64)v8;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_1(96LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "2 48 4 20 parent_quest_id:4096 64 8 9 iter:4098";
  *(_QWORD *)(v2 + 16) = PlayerQuestComp::findRandomParentQuestExcelConfig;
  v4 = (_DWORD *)(v2 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = -234556943;
  v4[536862722] = -202116352;
  *(_DWORD *)(v2 + 48) = parent_quest_id;
  *(std::map<unsigned int,data::MainQuestExcelConfig*>::const_iterator *)(v2 + 64) = std::map<unsigned int,data::MainQuestExcelConfig *>::find(
                                                                                       &this->parent_quest_config_map_,
                                                                                       (const std::map<unsigned int,data::MainQuestExcelConfig*>::key_type *)(v2 + 48));
  __y._M_node = std::map<unsigned int,data::MainQuestExcelConfig *>::end(&this->parent_quest_config_map_)._M_node;
  if ( std::operator==(
         (const std::_Rb_tree_const_iterator<std::pair<unsigned int const,data::MainQuestExcelConfig*> >::_Self *)(v2 + 64),
         &__y) )
  {
    result = 0LL;
  }
  else
  {
    v6 = std::_Rb_tree_const_iterator<std::pair<unsigned int const,data::MainQuestExcelConfig *>>::operator->((const std::_Rb_tree_const_iterator<std::pair<unsigned int const,data::MainQuestExcelConfig*> > *const)(v2 + 64));
    if ( *(_BYTE *)(((unsigned __int64)&v6->second >> 3) + 0x7FFF8000) )
      v6 = (std::_Rb_tree_const_iterator<std::pair<unsigned int const,data::MainQuestExcelConfig*> >::pointer)__asan_report_load8(&v6->second);
    result = v6->second;
  }
  if ( v8 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8008) = 0;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8008) = -168430091;
  }
  return result;
};

// Line 4110: range 0000000013DEFADE-0000000013DEFC8E
const ParentQuestScriptConfig *__cdecl PlayerQuestComp::findParentQuestScriptConfig(
        PlayerQuestComp *const this,
        uint32_t parent_quest_id)
{
  unsigned __int64 v2; // rbx
  __int64 v3; // rax
  unsigned __int64 v4; // r13
  const ParentQuestScriptConfig *RandomParentQuestScriptConfig; // r14
  std::__shared_ptr_access<ParentQuest,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v6; // rax
  std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v7; // rax
  const ParentQuestScriptConfig *result; // rax
  char v9[112]; // [rsp+10h] [rbp-70h] BYREF

  v2 = (unsigned __int64)v9;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_0(64LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "1 32 16 21 parent_quest_ptr:4113";
  *(_QWORD *)(v2 + 16) = PlayerQuestComp::findParentQuestScriptConfig;
  v4 = v2 >> 3;
  *(_DWORD *)(v4 + 2147450880) = -235802127;
  *(_DWORD *)(v4 + 2147450884) = -202178560;
  if ( PlayerQuestComp::isRandomParentQuest(this, parent_quest_id) )
  {
    PlayerQuestComp::findParentQuest((const PlayerQuestComp *const)(v2 + 32), (__int64)this, parent_quest_id);
    if ( std::operator==<ParentQuest>(0LL, (const std::shared_ptr<ParentQuest> *)(v2 + 32)) )
    {
      RandomParentQuestScriptConfig = 0LL;
    }
    else
    {
      v6 = std::__shared_ptr_access<ParentQuest,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<ParentQuest,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 32));
      RandomParentQuestScriptConfig = ParentQuest::findRandomParentQuestScriptConfig(v6);
    }
    std::shared_ptr<ParentQuest>::~shared_ptr((std::shared_ptr<ParentQuest> *const)(v2 + 32));
  }
  else
  {
    ServiceBox::findService<GameserverService>();
    GameserverService::getConfig((GameserverService *const)(v2 + 32));
    v7 = std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 32));
    RandomParentQuestScriptConfig = LuaConfigMgr::findParentQuestScriptConfig(
                                      &v7->design_config.lua_config_mgr,
                                      parent_quest_id);
    std::shared_ptr<Config>::~shared_ptr((std::shared_ptr<Config> *const)(v2 + 32));
  }
  result = RandomParentQuestScriptConfig;
  if ( v9 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 4124: range 0000000013DEFC90-0000000013DEFCCC
const QuestNpcScriptConfig *__cdecl PlayerQuestComp::findQuestNpcScriptConfig(
        PlayerQuestComp *const this,
        uint32_t quest_id,
        uint32_t npc_id)
{
  uint32_t ParentQuestId; // esi

  ParentQuestId = PlayerQuestComp::findParentQuestId(this, quest_id);
  return PlayerQuestComp::findQuestNpcScriptConfig(this, ParentQuestId, quest_id, npc_id);
};

// Line 4130: range 0000000013DEFCCE-0000000013DEFE9B
const QuestNpcScriptConfig *__cdecl PlayerQuestComp::findQuestNpcScriptConfig(
        PlayerQuestComp *const this,
        uint32_t parent_quest_id,
        uint32_t quest_id,
        uint32_t npc_id)
{
  unsigned __int64 v4; // rbx
  __int64 v5; // rax
  unsigned __int64 v6; // r13
  const QuestNpcScriptConfig *RandomQuestNpcData; // r14
  std::__shared_ptr_access<ParentQuest,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v8; // rax
  std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v9; // rax
  const QuestNpcScriptConfig *result; // rax
  char v13[112]; // [rsp+20h] [rbp-70h] BYREF

  v4 = (unsigned __int64)v13;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v5 = __asan_stack_malloc_0(64LL);
    if ( v5 )
      v4 = v5;
  }
  *(_QWORD *)v4 = 1102416563LL;
  *(_QWORD *)(v4 + 8) = "1 32 16 21 parent_quest_ptr:4133";
  *(_QWORD *)(v4 + 16) = PlayerQuestComp::findQuestNpcScriptConfig;
  v6 = v4 >> 3;
  *(_DWORD *)(v6 + 2147450880) = -235802127;
  *(_DWORD *)(v6 + 2147450884) = -202178560;
  if ( PlayerQuestComp::isRandomParentQuest(this, parent_quest_id) )
  {
    PlayerQuestComp::findParentQuest((const PlayerQuestComp *const)(v4 + 32), (__int64)this, parent_quest_id);
    if ( std::operator==<ParentQuest>(0LL, (const std::shared_ptr<ParentQuest> *)(v4 + 32)) )
    {
      RandomQuestNpcData = 0LL;
    }
    else
    {
      v8 = std::__shared_ptr_access<ParentQuest,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<ParentQuest,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 32));
      RandomQuestNpcData = ParentQuest::findRandomQuestNpcData(v8, quest_id, npc_id);
    }
    std::shared_ptr<ParentQuest>::~shared_ptr((std::shared_ptr<ParentQuest> *const)(v4 + 32));
  }
  else
  {
    ServiceBox::findService<GameserverService>();
    GameserverService::getConfig((GameserverService *const)(v4 + 32));
    v9 = std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 32));
    RandomQuestNpcData = LuaConfigMgr::findQuestNpcScriptConfig(
                           &v9->design_config.lua_config_mgr,
                           parent_quest_id,
                           quest_id,
                           npc_id);
    std::shared_ptr<Config>::~shared_ptr((std::shared_ptr<Config> *const)(v4 + 32));
  }
  result = RandomQuestNpcData;
  if ( v13 == (char *)v4 )
  {
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0LL;
  }
  else
  {
    *(_QWORD *)v4 = 1172321806LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 4144: range 0000000013DEFE9C-0000000013DEFED4
const std::vector<int> *__cdecl PlayerQuestComp::findQuestVarScriptConfig(
        PlayerQuestComp *const this,
        uint32_t quest_id)
{
  uint32_t ParentQuestId; // ecx

  ParentQuestId = PlayerQuestComp::findParentQuestId(this, quest_id);
  return PlayerQuestComp::findQuestVarScriptConfig(this, ParentQuestId, quest_id);
};

// Line 4149: range 0000000013DEFED6-0000000013DF00EE
const std::vector<int> *__cdecl PlayerQuestComp::findQuestVarScriptConfig(
        PlayerQuestComp *const this,
        uint32_t parent_quest_id,
        uint32_t quest_id)
{
  unsigned __int64 v3; // rbx
  __int64 v4; // rax
  unsigned __int64 v5; // r13
  std::vector<int> *RandomQuestVarData; // r14
  std::__shared_ptr_access<ParentQuest,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v7; // rax
  std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v8; // rax
  const std::vector<int> *result; // rax
  char v11[112]; // [rsp+10h] [rbp-70h] BYREF

  v3 = (unsigned __int64)v11;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_0(64LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "1 32 16 21 parent_quest_ptr:4153";
  *(_QWORD *)(v3 + 16) = PlayerQuestComp::findQuestVarScriptConfig;
  v5 = v3 >> 3;
  *(_DWORD *)(v5 + 2147450880) = -235802127;
  *(_DWORD *)(v5 + 2147450884) = -202178560;
  if ( !(_BYTE)`guard variable for'PlayerQuestComp::findQuestVarScriptConfig(unsigned int,unsigned int)::dummy_vec
    && __cxa_guard_acquire(&`guard variable for'PlayerQuestComp::findQuestVarScriptConfig(unsigned int,unsigned int)::dummy_vec) )
  {
    std::vector<int>::vector(&PlayerQuestComp::findQuestVarScriptConfig(unsigned int,unsigned int)::dummy_vec);
    __cxa_guard_release(&`guard variable for'PlayerQuestComp::findQuestVarScriptConfig(unsigned int,unsigned int)::dummy_vec);
    __cxa_atexit(
      (void (__fastcall *)(void *))std::vector<int>::~vector,
      &PlayerQuestComp::findQuestVarScriptConfig(unsigned int,unsigned int)::dummy_vec,
      &_dso_handle);
  }
  if ( PlayerQuestComp::isRandomParentQuest(this, parent_quest_id) )
  {
    PlayerQuestComp::findParentQuest((const PlayerQuestComp *const)(v3 + 32), (__int64)this, parent_quest_id);
    if ( std::operator==<ParentQuest>(0LL, (const std::shared_ptr<ParentQuest> *)(v3 + 32)) )
    {
      RandomQuestVarData = &PlayerQuestComp::findQuestVarScriptConfig(unsigned int,unsigned int)::dummy_vec;
    }
    else
    {
      v7 = std::__shared_ptr_access<ParentQuest,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<ParentQuest,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 32));
      RandomQuestVarData = (std::vector<int> *)ParentQuest::findRandomQuestVarData(v7, quest_id);
    }
    std::shared_ptr<ParentQuest>::~shared_ptr((std::shared_ptr<ParentQuest> *const)(v3 + 32));
  }
  else
  {
    ServiceBox::findService<GameserverService>();
    GameserverService::getConfig((GameserverService *const)(v3 + 32));
    v8 = std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 32));
    RandomQuestVarData = (std::vector<int> *)LuaConfigMgr::findQuestVarScriptConfig(
                                               &v8->design_config.lua_config_mgr,
                                               parent_quest_id,
                                               quest_id);
    std::shared_ptr<Config>::~shared_ptr((std::shared_ptr<Config> *const)(v3 + 32));
  }
  result = RandomQuestVarData;
  if ( v11 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 4164: range 0000000013DF00F0-0000000013DF0128
const QuestAvatarScriptConfig *__cdecl PlayerQuestComp::findQuestAvatarScriptConfig(
        PlayerQuestComp *const this,
        uint32_t quest_id)
{
  uint32_t ParentQuestId; // ecx

  ParentQuestId = PlayerQuestComp::findParentQuestId(this, quest_id);
  return PlayerQuestComp::findQuestAvatarScriptConfig(this, ParentQuestId, quest_id);
};

// Line 4169: range 0000000013DF012A-0000000013DF02E8
const QuestAvatarScriptConfig *__cdecl PlayerQuestComp::findQuestAvatarScriptConfig(
        PlayerQuestComp *const this,
        uint32_t parent_quest_id,
        uint32_t quest_id)
{
  unsigned __int64 v3; // rbx
  __int64 v4; // rax
  unsigned __int64 v5; // r13
  const QuestAvatarScriptConfig *RandomQuestAvatarData; // r14
  std::__shared_ptr_access<ParentQuest,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v7; // rax
  std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v8; // rax
  const QuestAvatarScriptConfig *result; // rax
  char v11[112]; // [rsp+10h] [rbp-70h] BYREF

  v3 = (unsigned __int64)v11;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_0(64LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "1 32 16 21 parent_quest_ptr:4172";
  *(_QWORD *)(v3 + 16) = PlayerQuestComp::findQuestAvatarScriptConfig;
  v5 = v3 >> 3;
  *(_DWORD *)(v5 + 2147450880) = -235802127;
  *(_DWORD *)(v5 + 2147450884) = -202178560;
  if ( PlayerQuestComp::isRandomParentQuest(this, parent_quest_id) )
  {
    PlayerQuestComp::findParentQuest((const PlayerQuestComp *const)(v3 + 32), (__int64)this, parent_quest_id);
    if ( std::operator==<ParentQuest>(0LL, (const std::shared_ptr<ParentQuest> *)(v3 + 32)) )
    {
      RandomQuestAvatarData = 0LL;
    }
    else
    {
      v7 = std::__shared_ptr_access<ParentQuest,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<ParentQuest,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 32));
      RandomQuestAvatarData = ParentQuest::findRandomQuestAvatarData(v7, quest_id);
    }
    std::shared_ptr<ParentQuest>::~shared_ptr((std::shared_ptr<ParentQuest> *const)(v3 + 32));
  }
  else
  {
    ServiceBox::findService<GameserverService>();
    GameserverService::getConfig((GameserverService *const)(v3 + 32));
    v8 = std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 32));
    RandomQuestAvatarData = LuaConfigMgr::findQuestAvatarScriptConfig(
                              &v8->design_config.lua_config_mgr,
                              parent_quest_id,
                              quest_id);
    std::shared_ptr<Config>::~shared_ptr((std::shared_ptr<Config> *const)(v3 + 32));
  }
  result = RandomQuestAvatarData;
  if ( v11 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 4186: range 0000000013DF02EA-0000000013DF0A01
std::pair<unsigned int,std::pair<data::LogicType,std::vector<std::shared_ptr<RandomQuestFilter>> > > *__fastcall PlayerQuestComp::generateRandomTemplate(
        std::pair<unsigned int,std::pair<data::LogicType,std::vector<std::shared_ptr<RandomQuestFilter>> > > *retstr,
        PlayerQuestComp *const this,
        uint32_t entrance_id)
{
  unsigned __int64 v3; // r12
  __int64 v4; // rax
  _DWORD *v5; // r13
  std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v6; // rax
  common::milog::MiLogStream *v7; // r14
  common::milog::MiLogStream *v8; // rax
  common::milog::MiLogStream *v9; // rax
  std::vector<data::RandomQuestEntranceExcelConfig>::size_type v10; // r14
  const std::vector<unsigned int> *p_filter_factor; // rdi
  std::vector<std::shared_ptr<RandomQuestFilter>> *v12; // rax
  uint32_t *p_template_id; // rsi
  data::LogicType __x; // [rsp+20h] [rbp-1B0h] BYREF
  unsigned int val; // [rsp+24h] [rbp-1ACh] BYREF
  std::vector<data::RandomQuestFilterConfig>::const_iterator __for_begin; // [rsp+28h] [rbp-1A8h] BYREF
  std::vector<data::RandomQuestFilterConfig>::const_iterator __for_end; // [rsp+30h] [rbp-1A0h] BYREF
  const std::vector<data::RandomQuestEntranceExcelConfig> *entrance_config_vec_ptr; // [rsp+38h] [rbp-198h]
  const std::vector<data::RandomQuestEntranceExcelConfig> *entrance_config_vec; // [rsp+40h] [rbp-190h]
  const data::RandomQuestEntranceExcelConfig *config; // [rsp+48h] [rbp-188h]
  const std::vector<data::RandomQuestFilterConfig> *__for_range; // [rsp+50h] [rbp-180h]
  const data::RandomQuestFilterConfig *filter; // [rsp+58h] [rbp-178h]
  std::shared_ptr<Config> v26; // [rsp+60h] [rbp-170h] BYREF
  common::milog::MiLogStream v27; // [rsp+70h] [rbp-160h] BYREF
  std::pair<int,std::pair<data::LogicType,std::vector<std::shared_ptr<RandomQuestFilter>> > > __p; // [rsp+90h] [rbp-140h] BYREF
  std::pair<int,std::pair<data::LogicType,std::vector<std::shared_ptr<RandomQuestFilter>> > > v29; // [rsp+C0h] [rbp-110h] BYREF
  std::pair<int,std::pair<data::LogicType,std::vector<std::shared_ptr<RandomQuestFilter>> > > v30; // [rsp+F0h] [rbp-E0h] BYREF
  char v31[176]; // [rsp+120h] [rbp-B0h] BYREF

  v3 = (unsigned __int64)v31;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_1(128LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "3 32 4 15 select_idx:4196 48 4 16 entrance_id:4185 64 24 16 filter_list:4187";
  *(_QWORD *)(v3 + 16) = PlayerQuestComp::generateRandomTemplate;
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = -234556924;
  v5[536862722] = -218103808;
  v5[536862723] = -202116109;
  *(_DWORD *)(v3 + 48) = entrance_id;
  std::vector<std::shared_ptr<RandomQuestFilter>>::vector((std::vector<std::shared_ptr<RandomQuestFilter>> *const)(v3 + 64));
  ServiceBox::findService<GameserverService>();
  GameserverService::getConfig((GameserverService *const)&v26);
  v6 = std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false> *const)&v26);
  entrance_config_vec_ptr = QuestExcelConfigMgr::findEntranceConfigVec(
                              &v6->design_config.txt_config_mgr.quest_config_mgr,
                              *(_DWORD *)(v3 + 48));
  std::shared_ptr<Config>::~shared_ptr(&v26);
  if ( entrance_config_vec_ptr )
  {
    entrance_config_vec = entrance_config_vec_ptr;
    *(_DWORD *)(v3 + 32) = 0;
    if ( common::tools::RandomUtils::weightSelectOne<data::RandomQuestEntranceExcelConfig,unsigned int data::RandomQuestEntranceExcelConfig::*>(
           entrance_config_vec,
           (uint32_t *)(v3 + 32),
           (unsigned int *)0xC,
           0) )
    {
      __x = LOGIC_NONE;
      std::make_pair<data::LogicType,std::vector<std::shared_ptr<RandomQuestFilter>> &>(
        (std::pair<data::LogicType,std::vector<std::shared_ptr<RandomQuestFilter>> > *)&v27,
        &__x,
        (std::vector<std::shared_ptr<RandomQuestFilter>> *)(v3 + 64));
      val = 0;
      std::make_pair<int,std::pair<data::LogicType,std::vector<std::shared_ptr<RandomQuestFilter>>>>(
        &v29,
        (int *)&val,
        (std::pair<data::LogicType,std::vector<std::shared_ptr<RandomQuestFilter>> > *)&v27);
      std::pair<unsigned int,std::pair<data::LogicType,std::vector<std::shared_ptr<RandomQuestFilter>>>>::pair<int,std::pair<data::LogicType,std::vector<std::shared_ptr<RandomQuestFilter>>>,true>(
        retstr,
        &v29);
      std::pair<int,std::pair<data::LogicType,std::vector<std::shared_ptr<RandomQuestFilter>>>>::~pair(&v29);
      std::pair<data::LogicType,std::vector<std::shared_ptr<RandomQuestFilter>>>::~pair((std::pair<data::LogicType,std::vector<std::shared_ptr<RandomQuestFilter>> > *const)&v27);
    }
    else
    {
      v10 = *(unsigned int *)(v3 + 32);
      if ( v10 < std::vector<data::RandomQuestEntranceExcelConfig>::size(entrance_config_vec) )
      {
        config = std::vector<data::RandomQuestEntranceExcelConfig>::operator[](
                   entrance_config_vec,
                   *(unsigned int *)(v3 + 32));
        __for_range = &config->filter_list;
        __for_begin._M_current = std::vector<data::RandomQuestFilterConfig>::begin(&config->filter_list)._M_current;
        __for_end._M_current = std::vector<data::RandomQuestFilterConfig>::end(&config->filter_list)._M_current;
        while ( __gnu_cxx::operator!=<data::RandomQuestFilterConfig const*,std::vector<data::RandomQuestFilterConfig>>(
                  &__for_begin,
                  &__for_end) )
        {
          filter = __gnu_cxx::__normal_iterator<data::RandomQuestFilterConfig const*,std::vector<data::RandomQuestFilterConfig>>::operator*(&__for_begin);
          p_filter_factor = (const std::vector<unsigned int> *)&filter->filter_factor;
          if ( *(_BYTE *)(((unsigned __int64)&filter->filter_type >> 3) + 0x7FFF8000) != 0
            && *(_BYTE *)(((unsigned __int64)&filter->filter_type >> 3) + 0x7FFF8000) <= 3 )
          {
            p_filter_factor = (const std::vector<unsigned int> *)&filter->filter_type;
            __asan_report_load4(&filter->filter_type);
          }
          RandomQuestFilter::create(
            (data::RandomQuestFilterType)&v26,
            (const std::string *)(unsigned int)filter->filter_type,
            p_filter_factor);
          std::vector<std::shared_ptr<RandomQuestFilter>>::emplace_back<std::shared_ptr<RandomQuestFilter>>(
            (std::vector<std::shared_ptr<RandomQuestFilter>> *const)(v3 + 64),
            (std::shared_ptr<RandomQuestFilter> *)&v26,
            (std::shared_ptr<RandomQuestFilter> *)&v26);
          std::shared_ptr<RandomQuestFilter>::~shared_ptr((std::shared_ptr<RandomQuestFilter> *const)&v26);
          __gnu_cxx::__normal_iterator<data::RandomQuestFilterConfig const*,std::vector<data::RandomQuestFilterConfig>>::operator++(&__for_begin);
        }
        v12 = std::move<std::vector<std::shared_ptr<RandomQuestFilter>> &>((std::vector<std::shared_ptr<RandomQuestFilter>> *)(v3 + 64));
        std::make_pair<data::LogicType const&,std::vector<std::shared_ptr<RandomQuestFilter>>>(
          (std::pair<data::LogicType,std::vector<std::shared_ptr<RandomQuestFilter>> > *)&v27,
          &config->filter_logic_type,
          v12);
        p_template_id = &config->template_id;
        if ( *(char *)(((unsigned __int64)retstr >> 3) + 0x7FFF8000) < 0
          || *(_BYTE *)((((unsigned __int64)&retstr->second.second._M_impl._M_end_of_storage + 7) >> 3) + 0x7FFF8000) != 0
          && (((unsigned __int8)retstr + 39) & 7) >= *(_BYTE *)((((unsigned __int64)&retstr->second.second._M_impl._M_end_of_storage
                                                                + 7) >> 3)
                                                              + 0x7FFF8000) )
        {
          p_template_id = (uint32_t *)40;
          __asan_report_store_n(retstr, 40LL);
        }
        std::make_pair<unsigned int const&,std::pair<data::LogicType,std::vector<std::shared_ptr<RandomQuestFilter>>>>(
          retstr,
          p_template_id,
          (std::pair<data::LogicType,std::vector<std::shared_ptr<RandomQuestFilter>> > *)&v27);
        std::pair<data::LogicType,std::vector<std::shared_ptr<RandomQuestFilter>>>::~pair((std::pair<data::LogicType,std::vector<std::shared_ptr<RandomQuestFilter>> > *const)&v27);
      }
      else
      {
        __x = LOGIC_NONE;
        std::make_pair<data::LogicType,std::vector<std::shared_ptr<RandomQuestFilter>> &>(
          (std::pair<data::LogicType,std::vector<std::shared_ptr<RandomQuestFilter>> > *)&v27,
          &__x,
          (std::vector<std::shared_ptr<RandomQuestFilter>> *)(v3 + 64));
        val = 0;
        std::make_pair<int,std::pair<data::LogicType,std::vector<std::shared_ptr<RandomQuestFilter>>>>(
          &v30,
          (int *)&val,
          (std::pair<data::LogicType,std::vector<std::shared_ptr<RandomQuestFilter>> > *)&v27);
        std::pair<unsigned int,std::pair<data::LogicType,std::vector<std::shared_ptr<RandomQuestFilter>>>>::pair<int,std::pair<data::LogicType,std::vector<std::shared_ptr<RandomQuestFilter>>>,true>(
          retstr,
          &v30);
        std::pair<int,std::pair<data::LogicType,std::vector<std::shared_ptr<RandomQuestFilter>>>>::~pair(&v30);
        std::pair<data::LogicType,std::vector<std::shared_ptr<RandomQuestFilter>>>::~pair((std::pair<data::LogicType,std::vector<std::shared_ptr<RandomQuestFilter>> > *const)&v27);
      }
    }
  }
  else
  {
    common::milog::MiLogStream::create(
      &v27,
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/player/quest/player_quest_comp.cpp",
      "generateRandomTemplate",
      4191);
    v7 = common::milog::MiLogStream::operator<<<char [35],(char *[35])0>(
           &v27,
           (const char (*)[35])"findEntranceConfigVec failed, uid:");
    if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
      __asan_report_load8(&this->player_);
    val = Player::getUid(this->player_);
    v8 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v7, &val);
    v9 = common::milog::MiLogStream::operator<<<char [14],(char *[14])0>(v8, (const char (*)[14])" entrance_id:");
    common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v9, (const unsigned int *)(v3 + 48));
    common::milog::MiLogStream::~MiLogStream(&v27);
    __x = LOGIC_NONE;
    std::make_pair<data::LogicType,std::vector<std::shared_ptr<RandomQuestFilter>> &>(
      (std::pair<data::LogicType,std::vector<std::shared_ptr<RandomQuestFilter>> > *)&v27,
      &__x,
      (std::vector<std::shared_ptr<RandomQuestFilter>> *)(v3 + 64));
    val = 0;
    std::make_pair<int,std::pair<data::LogicType,std::vector<std::shared_ptr<RandomQuestFilter>>>>(
      &__p,
      (int *)&val,
      (std::pair<data::LogicType,std::vector<std::shared_ptr<RandomQuestFilter>> > *)&v27);
    std::pair<unsigned int,std::pair<data::LogicType,std::vector<std::shared_ptr<RandomQuestFilter>>>>::pair<int,std::pair<data::LogicType,std::vector<std::shared_ptr<RandomQuestFilter>>>,true>(
      retstr,
      &__p);
    std::pair<int,std::pair<data::LogicType,std::vector<std::shared_ptr<RandomQuestFilter>>>>::~pair(&__p);
    std::pair<data::LogicType,std::vector<std::shared_ptr<RandomQuestFilter>>>::~pair((std::pair<data::LogicType,std::vector<std::shared_ptr<RandomQuestFilter>> > *const)&v27);
  }
  std::vector<std::shared_ptr<RandomQuestFilter>>::~vector((std::vector<std::shared_ptr<RandomQuestFilter>> *const)(v3 + 64));
  if ( v31 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return retstr;
};

// Line 4216: range 0000000013DF0A02-0000000013DF16D9
__int64 __fastcall PlayerQuestComp::generateRandomSampleMap(
        PlayerQuestComp *const this,
        uint32_t template_id,
        unsigned __int64 filter_config,
        std::vector<unsigned int> *factor_vec)
{
  unsigned int v4; // r14d
  unsigned __int64 v5; // r12
  __int64 v6; // rax
  _DWORD *v7; // r13
  std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v8; // rax
  common::milog::MiLogStream *v9; // r14
  common::milog::MiLogStream *v10; // rax
  common::milog::MiLogStream *v11; // rax
  QuestExcelConfigMgr *p_quest_config_mgr; // rcx
  common::milog::MiLogStream *v13; // rbx
  common::milog::MiLogStream *v14; // rax
  common::milog::MiLogStream *v15; // rax
  const unsigned int *v16; // r8
  const unsigned int *v17; // r8
  RandomQuestFilter *p_id; // rdi
  uint32_t id; // edx
  unsigned int *p_second; // rax
  common::milog::MiLogStream *v21; // r14
  common::milog::MiLogStream *v22; // rax
  common::milog::MiLogStream *v23; // rax
  common::milog::MiLogStream *v24; // rax
  common::milog::MiLogStream *v25; // rax
  int v26; // r15d
  std::vector<std::pair<unsigned int,unsigned int>>::size_type v27; // r15
  common::milog::MiLogStream *v28; // rax
  common::milog::MiLogStream *v29; // rax
  common::milog::MiLogStream *v30; // r14
  std::vector<std::pair<unsigned int,unsigned int>>::reference v31; // rax
  __int64 result; // rax
  bool is_valid; // [rsp+3Eh] [rbp-192h]
  bool is_logic_or; // [rsp+3Fh] [rbp-191h]
  unsigned int val; // [rsp+40h] [rbp-190h] BYREF
  uint32_t sum_weight; // [rsp+44h] [rbp-18Ch]
  std::vector<data::RandomQuestElem>::const_iterator __for_begin; // [rsp+48h] [rbp-188h] BYREF
  std::vector<data::RandomQuestElem>::const_iterator __for_end; // [rsp+50h] [rbp-180h] BYREF
  std::vector<data::RandomQuestElemPoolExcelConfig>::const_iterator __for_begin_1; // [rsp+58h] [rbp-178h] BYREF
  std::vector<data::RandomQuestElemPoolExcelConfig>::const_iterator __for_end_1; // [rsp+60h] [rbp-170h] BYREF
  std::vector<data::RandomQuestElemPoolExcelConfig>::const_iterator __for_begin_0; // [rsp+68h] [rbp-168h] BYREF
  std::vector<data::RandomQuestElemPoolExcelConfig>::const_iterator __for_end_0; // [rsp+70h] [rbp-160h] BYREF
  const data::RandomQuestTemplateExcelConfig *quest_template_config_ptr; // [rsp+78h] [rbp-158h]
  const std::vector<data::RandomQuestElem> *__for_range; // [rsp+80h] [rbp-150h]
  const data::RandomQuestElem *elem; // [rsp+88h] [rbp-148h]
  const std::vector<std::string> *elem_name; // [rsp+90h] [rbp-140h]
  const unsigned int *elem_pool_id; // [rsp+98h] [rbp-138h]
  const std::vector<data::RandomQuestElemPoolExcelConfig> *elem_pool_vec_ptr; // [rsp+A0h] [rbp-130h]
  const std::vector<data::RandomQuestElemPoolExcelConfig> *elem_pool_vec; // [rsp+A8h] [rbp-128h]
  const std::vector<data::RandomQuestElemPoolExcelConfig> *__for_range_1; // [rsp+B0h] [rbp-120h]
  const data::RandomQuestElemPoolExcelConfig *config_0; // [rsp+B8h] [rbp-118h]
  const std::vector<std::shared_ptr<RandomQuestFilter>> *__for_range_2; // [rsp+C0h] [rbp-110h]
  const std::shared_ptr<RandomQuestFilter> *filter_ptr; // [rsp+C8h] [rbp-108h]
  const std::vector<data::RandomQuestElemPoolExcelConfig> *__for_range_0; // [rsp+D0h] [rbp-100h]
  const data::RandomQuestElemPoolExcelConfig *config; // [rsp+D8h] [rbp-F8h]
  std::vector<std::pair<unsigned int,unsigned int>> *__for_range_3; // [rsp+E0h] [rbp-F0h]
  const std::pair<unsigned int,unsigned int> *p; // [rsp+E8h] [rbp-E8h]
  std::shared_ptr<Config> v61; // [rsp+F0h] [rbp-E0h] BYREF
  common::milog::MiLogStream v62; // [rsp+100h] [rbp-D0h] BYREF
  char v63[176]; // [rsp+120h] [rbp-B0h] BYREF

  v5 = (unsigned __int64)v63;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v6 = __asan_stack_malloc_1(128LL);
    if ( v6 )
      v5 = v6;
  }
  *(_QWORD *)v5 = 1102416563LL;
  *(_QWORD *)(v5 + 8) = "3 32 4 15 select_idx:4288 48 4 16 template_id:4215 64 24 18 id_weight_vec:4237";
  *(_QWORD *)(v5 + 16) = PlayerQuestComp::generateRandomSampleMap;
  v7 = (_DWORD *)(v5 >> 3);
  v7[536862720] = -235802127;
  v7[536862721] = -234556924;
  v7[536862722] = -218103808;
  v7[536862723] = -202116109;
  *(_DWORD *)(v5 + 48) = template_id;
  ServiceBox::findService<GameserverService>();
  GameserverService::getConfig((GameserverService *const)&v61);
  v8 = std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false> *const)&v61);
  quest_template_config_ptr = data::QuestExcelConfigMgrBase::findRandomQuestTemplateExcelConfig(
                                &v8->design_config.txt_config_mgr.quest_config_mgr,
                                *(_DWORD *)(v5 + 48));
  std::shared_ptr<Config>::~shared_ptr(&v61);
  if ( !quest_template_config_ptr )
  {
    common::milog::MiLogStream::create(
      &v62,
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/player/quest/player_quest_comp.cpp",
      "generateRandomSampleMap",
      4220);
    v9 = common::milog::MiLogStream::operator<<<char [48],(char *[48])0>(
           &v62,
           (const char (*)[48])"findRandomQuestTemplateExcelConfig failed, uid:");
    if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
      __asan_report_load8(&this->player_);
    val = Player::getUid(this->player_);
    v10 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v9, &val);
    v11 = common::milog::MiLogStream::operator<<<char [14],(char *[14])0>(v10, (const char (*)[14])" template_id:");
    common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v11, (const unsigned int *)(v5 + 48));
    common::milog::MiLogStream::~MiLogStream(&v62);
    v4 = -1;
    goto LABEL_58;
  }
  __for_range = &quest_template_config_ptr->elem_list;
  __for_begin._M_current = std::vector<data::RandomQuestElem>::begin(&quest_template_config_ptr->elem_list)._M_current;
  __for_end._M_current = std::vector<data::RandomQuestElem>::end(&quest_template_config_ptr->elem_list)._M_current;
  while ( 1 )
  {
    if ( !__gnu_cxx::operator!=<data::RandomQuestElem const*,std::vector<data::RandomQuestElem>>(
            &__for_begin,
            &__for_end) )
    {
      v4 = 0;
      goto LABEL_58;
    }
    elem = __gnu_cxx::__normal_iterator<data::RandomQuestElem const*,std::vector<data::RandomQuestElem>>::operator*(&__for_begin);
    elem_name = &elem->name;
    elem_pool_id = &elem->pool_id;
    ServiceBox::findService<GameserverService>();
    GameserverService::getConfig((GameserverService *const)&v61);
    p_quest_config_mgr = &std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false> *const)&v61)->design_config.txt_config_mgr.quest_config_mgr;
    if ( *(_BYTE *)(((unsigned __int64)elem_pool_id >> 3) + 0x7FFF8000) != 0
      && (char)(((unsigned __int8)elem_pool_id & 7) + 3) >= *(_BYTE *)(((unsigned __int64)elem_pool_id >> 3) + 0x7FFF8000) )
    {
      __asan_report_load4(elem_pool_id);
    }
    elem_pool_vec_ptr = QuestExcelConfigMgr::findElemPoolVec(p_quest_config_mgr, *elem_pool_id);
    std::shared_ptr<Config>::~shared_ptr(&v61);
    if ( !elem_pool_vec_ptr )
      break;
    elem_pool_vec = elem_pool_vec_ptr;
    std::vector<std::pair<unsigned int,unsigned int>>::vector((std::vector<std::pair<unsigned int,unsigned int>> *const)(v5 + 64));
    if ( std::vector<std::shared_ptr<RandomQuestFilter>>::empty((const std::vector<std::shared_ptr<RandomQuestFilter>> *const)(filter_config + 8)) )
    {
      __for_range_0 = elem_pool_vec;
      __for_begin_0._M_current = std::vector<data::RandomQuestElemPoolExcelConfig>::begin(elem_pool_vec)._M_current;
      __for_end_0._M_current = std::vector<data::RandomQuestElemPoolExcelConfig>::end(__for_range_0)._M_current;
      while ( __gnu_cxx::operator!=<data::RandomQuestElemPoolExcelConfig const*,std::vector<data::RandomQuestElemPoolExcelConfig>>(
                &__for_begin_0,
                &__for_end_0) )
      {
        config = __gnu_cxx::__normal_iterator<data::RandomQuestElemPoolExcelConfig const*,std::vector<data::RandomQuestElemPoolExcelConfig>>::operator*(&__for_begin_0);
        std::vector<std::pair<unsigned int,unsigned int>>::emplace_back<unsigned int const&,unsigned int const&>(
          (std::vector<std::pair<unsigned int,unsigned int>> *const)(v5 + 64),
          &config->id,
          &config->weight,
          &config->id,
          v16);
        __gnu_cxx::__normal_iterator<data::RandomQuestElemPoolExcelConfig const*,std::vector<data::RandomQuestElemPoolExcelConfig>>::operator++(&__for_begin_0);
      }
    }
    else
    {
      __for_range_1 = elem_pool_vec;
      __for_begin_1._M_current = std::vector<data::RandomQuestElemPoolExcelConfig>::begin(elem_pool_vec)._M_current;
      __for_end_1._M_current = std::vector<data::RandomQuestElemPoolExcelConfig>::end(__for_range_1)._M_current;
      while ( __gnu_cxx::operator!=<data::RandomQuestElemPoolExcelConfig const*,std::vector<data::RandomQuestElemPoolExcelConfig>>(
                &__for_begin_1,
                &__for_end_1) )
      {
        config_0 = __gnu_cxx::__normal_iterator<data::RandomQuestElemPoolExcelConfig const*,std::vector<data::RandomQuestElemPoolExcelConfig>>::operator*(&__for_begin_1);
        if ( *(_BYTE *)((filter_config >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)((filter_config >> 3) + 0x7FFF8000) <= 3 )
          __asan_report_load4(filter_config);
        is_logic_or = *(_DWORD *)filter_config == 2;
        is_valid = 1;
        __for_range_2 = (const std::vector<std::shared_ptr<RandomQuestFilter>> *)(filter_config + 8);
        __for_begin_0._M_current = (const data::RandomQuestElemPoolExcelConfig *)std::vector<std::shared_ptr<RandomQuestFilter>>::begin((const std::vector<std::shared_ptr<RandomQuestFilter>> *const)(filter_config + 8))._M_current;
        __for_end_0._M_current = (const data::RandomQuestElemPoolExcelConfig *)std::vector<std::shared_ptr<RandomQuestFilter>>::end(__for_range_2)._M_current;
        while ( __gnu_cxx::operator!=<std::shared_ptr<RandomQuestFilter> const*,std::vector<std::shared_ptr<RandomQuestFilter>>>(
                  (const __gnu_cxx::__normal_iterator<const std::shared_ptr<RandomQuestFilter>*,std::vector<std::shared_ptr<RandomQuestFilter>> > *)&__for_begin_0,
                  (const __gnu_cxx::__normal_iterator<const std::shared_ptr<RandomQuestFilter>*,std::vector<std::shared_ptr<RandomQuestFilter>> > *)&__for_end_0) )
        {
          filter_ptr = __gnu_cxx::__normal_iterator<std::shared_ptr<RandomQuestFilter> const*,std::vector<std::shared_ptr<RandomQuestFilter>>>::operator*((const __gnu_cxx::__normal_iterator<const std::shared_ptr<RandomQuestFilter>*,std::vector<std::shared_ptr<RandomQuestFilter>> > *const)&__for_begin_0);
          if ( !std::operator==<RandomQuestFilter>(filter_ptr, 0LL) )
          {
            p_id = std::__shared_ptr_access<RandomQuestFilter,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<RandomQuestFilter,(__gnu_cxx::_Lock_policy)2,false,false> *const)filter_ptr);
            if ( *(_BYTE *)(((unsigned __int64)&config_0->id >> 3) + 0x7FFF8000) != 0
              && *(_BYTE *)(((unsigned __int64)&config_0->id >> 3) + 0x7FFF8000) <= 3 )
            {
              p_id = (RandomQuestFilter *)&config_0->id;
              __asan_report_load4(&config_0->id);
            }
            id = config_0->id;
            if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
            {
              p_id = (RandomQuestFilter *)&this->player_;
              __asan_report_load8(&this->player_);
            }
            is_valid = RandomQuestFilter::isFactorValid(p_id, this->player_, id);
            if ( is_valid && is_logic_or )
              break;
            if ( !is_valid && !is_logic_or )
              break;
          }
          __gnu_cxx::__normal_iterator<std::shared_ptr<RandomQuestFilter> const*,std::vector<std::shared_ptr<RandomQuestFilter>>>::operator++((__gnu_cxx::__normal_iterator<const std::shared_ptr<RandomQuestFilter>*,std::vector<std::shared_ptr<RandomQuestFilter>> > *const)&__for_begin_0);
        }
        if ( is_valid )
          std::vector<std::pair<unsigned int,unsigned int>>::emplace_back<unsigned int const&,unsigned int const&>(
            (std::vector<std::pair<unsigned int,unsigned int>> *const)(v5 + 64),
            &config_0->id,
            &config_0->weight,
            &config_0->id,
            v17);
        __gnu_cxx::__normal_iterator<data::RandomQuestElemPoolExcelConfig const*,std::vector<data::RandomQuestElemPoolExcelConfig>>::operator++(&__for_begin_1);
      }
    }
    sum_weight = 0;
    __for_range_3 = (std::vector<std::pair<unsigned int,unsigned int>> *)(v5 + 64);
    __for_begin_0._M_current = (const data::RandomQuestElemPoolExcelConfig *)std::vector<std::pair<unsigned int,unsigned int>>::begin((std::vector<std::pair<unsigned int,unsigned int>> *const)(v5 + 64))._M_current;
    __for_end_0._M_current = (const data::RandomQuestElemPoolExcelConfig *)std::vector<std::pair<unsigned int,unsigned int>>::end(__for_range_3)._M_current;
    while ( __gnu_cxx::operator!=<std::pair<unsigned int,unsigned int> *,std::vector<std::pair<unsigned int,unsigned int>>>(
              (const __gnu_cxx::__normal_iterator<std::pair<unsigned int,unsigned int>*,std::vector<std::pair<unsigned int,unsigned int>> > *)&__for_begin_0,
              (const __gnu_cxx::__normal_iterator<std::pair<unsigned int,unsigned int>*,std::vector<std::pair<unsigned int,unsigned int>> > *)&__for_end_0) )
    {
      p = __gnu_cxx::__normal_iterator<std::pair<unsigned int,unsigned int> *,std::vector<std::pair<unsigned int,unsigned int>>>::operator*((const __gnu_cxx::__normal_iterator<std::pair<unsigned int,unsigned int>*,std::vector<std::pair<unsigned int,unsigned int>> > *const)&__for_begin_0);
      p_second = &p->second;
      if ( *(_BYTE *)(((unsigned __int64)p_second >> 3) + 0x7FFF8000) != 0
        && (char)(((unsigned __int8)p_second & 7) + 3) >= *(_BYTE *)(((unsigned __int64)p_second >> 3) + 0x7FFF8000) )
      {
        __asan_report_load4(p_second);
      }
      sum_weight += p->second;
      __gnu_cxx::__normal_iterator<std::pair<unsigned int,unsigned int> *,std::vector<std::pair<unsigned int,unsigned int>>>::operator++((__gnu_cxx::__normal_iterator<std::pair<unsigned int,unsigned int>*,std::vector<std::pair<unsigned int,unsigned int>> > *const)&__for_begin_0);
    }
    if ( !sum_weight )
    {
      common::milog::MiLogStream::create(
        &v62,
        &common::milog::MiLogDefault::default_log_obj_,
        1u,
        "./src/player/quest/player_quest_comp.cpp",
        "generateRandomSampleMap",
        4285);
      v21 = common::milog::MiLogStream::operator<<<char [45],(char *[45])0>(
              &v62,
              (const char (*)[45])"weightSelectOne failed, sum weight = 0, uid:");
      if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
        __asan_report_load8(&this->player_);
LABEL_47:
      val = Player::getUid(this->player_);
      v22 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v21, &val);
      v23 = common::milog::MiLogStream::operator<<<char [8],(char *[8])0>(v22, (const char (*)[8])" elem: ");
      v24 = common::milog::MiLogStream::operator<<<std::string>(v23, elem_name);
      v25 = common::milog::MiLogStream::operator<<<char [8],(char *[8])0>(v24, (const char (*)[8])" pool: ");
      common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v25, elem_pool_id);
      common::milog::MiLogStream::~MiLogStream(&v62);
      v4 = -1;
      v26 = 0;
      goto LABEL_55;
    }
    *(_DWORD *)(v5 + 32) = 0;
    if ( common::tools::RandomUtils::weightSelectOne<std::pair<unsigned int,unsigned int>,unsigned int std::pair<unsigned int,unsigned int>::*>(
           (const std::vector<std::pair<unsigned int,unsigned int>> *)(v5 + 64),
           (uint32_t *)(v5 + 32),
           (unsigned int *)4,
           0) )
    {
      common::milog::MiLogStream::create(
        &v62,
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/player/quest/player_quest_comp.cpp",
        "generateRandomSampleMap",
        4291);
      v21 = common::milog::MiLogStream::operator<<<char [29],(char *[29])0>(
              &v62,
              (const char (*)[29])"weightSelectOne failed, uid:");
      if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
        __asan_report_load8(&this->player_);
      goto LABEL_47;
    }
    v27 = *(unsigned int *)(v5 + 32);
    if ( v27 < std::vector<std::pair<unsigned int,unsigned int>>::size((const std::vector<std::pair<unsigned int,unsigned int>> *const)(v5 + 64)) )
    {
      v31 = std::vector<std::pair<unsigned int,unsigned int>>::operator[](
              (std::vector<std::pair<unsigned int,unsigned int>> *const)(v5 + 64),
              *(unsigned int *)(v5 + 32));
      std::vector<unsigned int>::emplace_back<unsigned int &>(factor_vec, (unsigned int *)v31, (unsigned int *)v31);
      v26 = 1;
    }
    else
    {
      common::milog::MiLogStream::create(
        &v62,
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/player/quest/player_quest_comp.cpp",
        "generateRandomSampleMap",
        4297);
      v28 = common::milog::MiLogStream::operator<<<char [11],(char *[11])0>(&v62, (const char (*)[11])"select_id:");
      v29 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v28, (const unsigned int *)(v5 + 32));
      v30 = common::milog::MiLogStream::operator<<<char [20],(char *[20])0>(
              v29,
              (const char (*)[20])" greator than size:");
      __for_end_0._M_current = (const data::RandomQuestElemPoolExcelConfig *)std::vector<data::RandomQuestElemPoolExcelConfig>::size(elem_pool_vec);
      common::milog::MiLogStream::operator<<<unsigned long,(unsigned long *)0>(
        v30,
        (const unsigned __int64 *)&__for_end_0);
      common::milog::MiLogStream::~MiLogStream(&v62);
      v4 = -1;
      v26 = 0;
    }
LABEL_55:
    std::vector<std::pair<unsigned int,unsigned int>>::~vector((std::vector<std::pair<unsigned int,unsigned int>> *const)(v5 + 64));
    if ( v26 != 1 )
      goto LABEL_58;
    __gnu_cxx::__normal_iterator<data::RandomQuestElem const*,std::vector<data::RandomQuestElem>>::operator++(&__for_begin);
  }
  common::milog::MiLogStream::create(
    &v62,
    &common::milog::MiLogDefault::default_log_obj_,
    3u,
    "./src/player/quest/player_quest_comp.cpp",
    "generateRandomSampleMap",
    4232);
  v13 = common::milog::MiLogStream::operator<<<char [29],(char *[29])0>(
          &v62,
          (const char (*)[29])"findElemPoolVec failed, uid:");
  if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
    __asan_report_load8(&this->player_);
  val = Player::getUid(this->player_);
  v14 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v13, &val);
  v15 = common::milog::MiLogStream::operator<<<char [15],(char *[15])0>(v14, (const char (*)[15])" elem_pool_id:");
  common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v15, elem_pool_id);
  common::milog::MiLogStream::~MiLogStream(&v62);
  v4 = -1;
LABEL_58:
  result = v4;
  if ( v63 == (char *)v5 )
  {
    *(_QWORD *)((v5 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v5 = 1172321806LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 4308: range 0000000013DF16DA-0000000013DF1FD1
PlayerQuestComp *__fastcall PlayerQuestComp::generateRandomParentQuest(
        PlayerQuestComp *const this,
        PlayerQuestComp *entrance_id,
        uint32_t template_id,
        const std::vector<unsigned int> *factor_vec,
        const std::vector<unsigned int> *a5)
{
  unsigned __int64 v5; // r13
  __int64 v6; // rax
  _DWORD *v7; // r12
  common::milog::MiLogStream *v8; // r14
  common::milog::MiLogStream *v9; // rax
  common::milog::MiLogStream *v10; // rax
  common::milog::MiLogStream *v11; // r14
  common::milog::MiLogStream *v12; // rax
  common::milog::MiLogStream *v13; // rax
  std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v14; // rax
  common::milog::MiLogStream *v15; // rax
  __gnu_cxx::__normal_iterator<unsigned int const*,std::vector<unsigned int> >::reference v16; // rax
  _DWORD *v17; // rdx
  uint32_t RandomQuestId; // r14d
  std::map<unsigned int,unsigned int>::mapped_type *v19; // rax
  uint32_t *v20; // rdx
  char v21; // cl
  char *v22; // rsi
  __int64 v23; // rcx
  ParentQuest *v24; // rax
  common::milog::MiLogStream *v25; // r14
  ParentQuest *v26; // rax
  common::milog::MiLogStream *v27; // rax
  common::milog::MiLogStream *v28; // rax
  common::milog::MiLogStream *v29; // rax
  int v32; // [rsp+8h] [rbp-158h]
  std::vector<unsigned int>::const_iterator __for_begin; // [rsp+20h] [rbp-140h] BYREF
  std::vector<unsigned int>::const_iterator __for_end; // [rsp+28h] [rbp-138h] BYREF
  const data::RandomMainQuestExcelConfig *random_parent_quest_config_ptr; // [rsp+30h] [rbp-130h]
  const std::vector<unsigned int> *__for_range; // [rsp+38h] [rbp-128h]
  std::shared_ptr<Config> v39; // [rsp+40h] [rbp-120h] BYREF
  common::milog::MiLogStream v40; // [rsp+50h] [rbp-110h] BYREF
  char v41[240]; // [rsp+70h] [rbp-F0h] BYREF

  v32 = (int)factor_vec;
  v5 = (unsigned __int64)v41;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v6 = __asan_stack_malloc_2(192LL);
    if ( v6 )
      v5 = v6;
  }
  *(_QWORD *)v5 = 1102416563LL;
  *(_QWORD *)(v5 + 8) = "5 32 4 20 parent_quest_id:4309 48 4 19 child_quest_id:4331 64 4 16 template_id:4307 80 16 21 par"
                        "ent_quest_ptr:4316 112 48 24 random_quest_id_map:4324";
  *(_QWORD *)(v5 + 16) = PlayerQuestComp::generateRandomParentQuest;
  v7 = (_DWORD *)(v5 >> 3);
  v7[536862720] = -235802127;
  v7[536862721] = -234556924;
  v7[536862722] = 61956;
  v7[536862723] = 62194;
  v7[536862725] = -202116109;
  *(_DWORD *)(v5 + 64) = v32;
  *(_DWORD *)(v5 + 32) = PlayerQuestComp::generateRandomParentQuestId(entrance_id);
  if ( *(_DWORD *)(v5 + 32) > 0x1869Fu )
  {
    PlayerQuestComp::createParentQuest((PlayerQuestComp *const)(v5 + 80), (uint32_t)entrance_id, *(_DWORD *)(v5 + 32));
    if ( std::operator==<ParentQuest>((const std::shared_ptr<ParentQuest> *)(v5 + 80), 0LL) )
    {
      common::milog::MiLogStream::create(
        &v40,
        &common::milog::MiLogDefault::default_log_obj_,
        4u,
        "./src/player/quest/player_quest_comp.cpp",
        "generateRandomParentQuest",
        4319);
      v11 = common::milog::MiLogStream::operator<<<char [31],(char *[31])0>(
              &v40,
              (const char (*)[31])"createParentQuest failed, uid:");
      if ( *(_BYTE *)(((unsigned __int64)&entrance_id->player_ >> 3) + 0x7FFF8000) )
        __asan_report_load8(&entrance_id->player_);
      *(_DWORD *)(v5 + 48) = Player::getUid(entrance_id->player_);
      v12 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v11, (const unsigned int *)(v5 + 48));
      v13 = common::milog::MiLogStream::operator<<<char [18],(char *[18])0>(
              v12,
              (const char (*)[18])" parent_quest_id:");
      common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v13, (const unsigned int *)(v5 + 32));
      common::milog::MiLogStream::~MiLogStream(&v40);
      std::shared_ptr<ParentQuest>::shared_ptr((std::shared_ptr<ParentQuest> *const)this, 0LL);
      goto LABEL_31;
    }
    std::map<unsigned int,unsigned int>::map((std::map<unsigned int,unsigned int> *const)(v5 + 112));
    ServiceBox::findService<GameserverService>();
    GameserverService::getConfig((GameserverService *const)&v39);
    v14 = std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false> *const)&v39);
    random_parent_quest_config_ptr = data::QuestExcelConfigMgrBase::findRandomMainQuestExcelConfig(
                                       &v14->design_config.txt_config_mgr.quest_config_mgr,
                                       *(_DWORD *)(v5 + 64));
    std::shared_ptr<Config>::~shared_ptr(&v39);
    if ( random_parent_quest_config_ptr )
    {
      __for_range = &random_parent_quest_config_ptr->child_quest_list;
      __for_begin._M_current = std::vector<unsigned int>::begin(&random_parent_quest_config_ptr->child_quest_list)._M_current;
      __for_end._M_current = std::vector<unsigned int>::end(&random_parent_quest_config_ptr->child_quest_list)._M_current;
      while ( __gnu_cxx::operator!=<unsigned int const*,std::vector<unsigned int>>(&__for_begin, &__for_end) )
      {
        v16 = __gnu_cxx::__normal_iterator<unsigned int const*,std::vector<unsigned int>>::operator*(&__for_begin);
        v17 = v16;
        if ( *(_BYTE *)(((unsigned __int64)v16 >> 3) + 0x7FFF8000) != 0
          && (char)(((unsigned __int8)v16 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)v16 >> 3) + 0x7FFF8000) )
        {
          __asan_report_load4(v16);
        }
        *(_DWORD *)(v5 + 48) = *v17;
        RandomQuestId = PlayerQuestComp::generateRandomQuestId(entrance_id);
        v22 = (char *)(v5 + 48);
        v19 = std::map<unsigned int,unsigned int>::operator[](
                (std::map<unsigned int,unsigned int> *const)(v5 + 112),
                (const std::map<unsigned int,unsigned int>::key_type *)(v5 + 48));
        v20 = v19;
        v21 = *(_BYTE *)(((unsigned __int64)v19 >> 3) + 0x7FFF8000);
        LOBYTE(v22) = v21 != 0;
        v23 = (v21 != 0) & (unsigned __int8)((char)(((unsigned __int8)v19 & 7) + 3) >= v21);
        if ( (_BYTE)v23 )
          __asan_report_store4(v19, v22, v19, v23);
        *v20 = RandomQuestId;
        __gnu_cxx::__normal_iterator<unsigned int const*,std::vector<unsigned int>>::operator++(&__for_begin);
      }
      v24 = std::__shared_ptr_access<ParentQuest,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<ParentQuest,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v5 + 80));
      if ( ParentQuest::initRandomInfo(
             v24,
             template_id,
             *(_DWORD *)(v5 + 64),
             a5,
             (const std::map<unsigned int,unsigned int> *)(v5 + 112)) )
      {
        common::milog::MiLogStream::create(
          &v40,
          &common::milog::MiLogDefault::default_log_obj_,
          4u,
          "./src/player/quest/player_quest_comp.cpp",
          "generateRandomParentQuest",
          4338);
        v25 = common::milog::MiLogStream::operator<<<char [42],(char *[42])0>(
                &v40,
                (const char (*)[42])"parent_quest initRandomQuest failed, uid:");
        if ( *(_BYTE *)(((unsigned __int64)&entrance_id->player_ >> 3) + 0x7FFF8000) )
          __asan_report_load8(&entrance_id->player_);
      }
      else
      {
        v26 = std::__shared_ptr_access<ParentQuest,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<ParentQuest,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v5 + 80));
        if ( !ParentQuest::onAccept(v26) )
        {
          common::milog::MiLogStream::create(
            &v40,
            &common::milog::MiLogDefault::default_log_obj_,
            1u,
            "./src/player/quest/player_quest_comp.cpp",
            "generateRandomParentQuest",
            4348);
          v27 = common::milog::MiLogStream::operator<<<char [32],(char *[32])0>(
                  &v40,
                  (const char (*)[32])"[RANDOM_QUEST] gen template_id:");
          v28 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                  v27,
                  (const unsigned int *)(v5 + 64));
          v29 = common::milog::MiLogStream::operator<<<char [18],(char *[18])0>(
                  v28,
                  (const char (*)[18])" parent_quest_id:");
          common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v29, (const unsigned int *)(v5 + 32));
          common::milog::MiLogStream::~MiLogStream(&v40);
          std::shared_ptr<ParentQuest>::shared_ptr(
            (std::shared_ptr<ParentQuest> *const)this,
            (std::shared_ptr<ParentQuest> *)(v5 + 80));
          goto LABEL_30;
        }
        common::milog::MiLogStream::create(
          &v40,
          &common::milog::MiLogDefault::default_log_obj_,
          4u,
          "./src/player/quest/player_quest_comp.cpp",
          "generateRandomParentQuest",
          4344);
        v25 = common::milog::MiLogStream::operator<<<char [31],(char *[31])0>(
                &v40,
                (const char (*)[31])"parent_quest init failed, uid:");
        if ( *(_BYTE *)(((unsigned __int64)&entrance_id->player_ >> 3) + 0x7FFF8000) )
          __asan_report_load8(&entrance_id->player_);
      }
      *(_DWORD *)(v5 + 48) = Player::getUid(entrance_id->player_);
      common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v25, (const unsigned int *)(v5 + 48));
      common::milog::MiLogStream::~MiLogStream(&v40);
      std::shared_ptr<ParentQuest>::shared_ptr((std::shared_ptr<ParentQuest> *const)this, 0LL);
    }
    else
    {
      common::milog::MiLogStream::create(
        &v40,
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/player/quest/player_quest_comp.cpp",
        "generateRandomParentQuest",
        4328);
      v15 = common::milog::MiLogStream::operator<<<char [52],(char *[52])0>(
              &v40,
              (const char (*)[52])"findRandomMainQuestExcelConfig failed, template_id:");
      common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v15, (const unsigned int *)(v5 + 64));
      common::milog::MiLogStream::~MiLogStream(&v40);
      std::shared_ptr<ParentQuest>::shared_ptr((std::shared_ptr<ParentQuest> *const)this, 0LL);
    }
LABEL_30:
    std::map<unsigned int,unsigned int>::~map((std::map<unsigned int,unsigned int> *const)(v5 + 112));
LABEL_31:
    std::shared_ptr<ParentQuest>::~shared_ptr((std::shared_ptr<ParentQuest> *const)(v5 + 80));
    goto LABEL_32;
  }
  common::milog::MiLogStream::create(
    &v40,
    &common::milog::MiLogDefault::default_log_obj_,
    4u,
    "./src/player/quest/player_quest_comp.cpp",
    "generateRandomParentQuest",
    4312);
  v8 = common::milog::MiLogStream::operator<<<char [41],(char *[41])0>(
         &v40,
         (const char (*)[41])"generateRandomParentQuestId failed, uid:");
  if ( *(_BYTE *)(((unsigned __int64)&entrance_id->player_ >> 3) + 0x7FFF8000) )
    __asan_report_load8(&entrance_id->player_);
  *(_DWORD *)(v5 + 48) = Player::getUid(entrance_id->player_);
  v9 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v8, (const unsigned int *)(v5 + 48));
  v10 = common::milog::MiLogStream::operator<<<char [19],(char *[19])0>(v9, (const char (*)[19])" random_parent_id:");
  common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v10, (const unsigned int *)(v5 + 32));
  common::milog::MiLogStream::~MiLogStream(&v40);
  std::shared_ptr<ParentQuest>::shared_ptr((std::shared_ptr<ParentQuest> *const)this, 0LL);
LABEL_32:
  if ( v41 == (char *)v5 )
  {
    *(_QWORD *)((v5 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8008) = 0LL;
    *(_DWORD *)((v5 >> 3) + 0x7FFF8014) = 0;
  }
  else
  {
    *(_QWORD *)v5 = 1172321806LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return this;
};

// Line 4354: range 0000000013DF1FD2-0000000013DF20DB
uint32_t __cdecl PlayerQuestComp::generateRandomParentQuestId(PlayerQuestComp *const this)
{
  if ( *(_BYTE *)(((unsigned __int64)&this->last_random_parent_quest_id_ >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->last_random_parent_quest_id_ >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4(&this->last_random_parent_quest_id_);
  }
  if ( this->last_random_parent_quest_id_ <= 0x1869F )
    this->last_random_parent_quest_id_ = 100000;
  if ( *(_BYTE *)(((unsigned __int64)&this->last_random_parent_quest_id_ >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->last_random_parent_quest_id_ >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4(&this->last_random_parent_quest_id_);
  }
  if ( this->last_random_parent_quest_id_ == -1 )
    this->last_random_parent_quest_id_ = 100000;
  if ( *(_BYTE *)(((unsigned __int64)&this->last_random_parent_quest_id_ >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->last_random_parent_quest_id_ >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4(&this->last_random_parent_quest_id_);
  }
  return ++this->last_random_parent_quest_id_;
};

// Line 4370: range 0000000013DF20DC-0000000013DF21FD
uint32_t __cdecl PlayerQuestComp::generateRandomQuestId(PlayerQuestComp *const this)
{
  if ( *(_BYTE *)(((unsigned __int64)&this->last_random_quest_id_ >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)this + 76) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&this->last_random_quest_id_ >> 3)
                                                        + 0x7FFF8000) )
  {
    __asan_report_load4(&this->last_random_quest_id_);
  }
  if ( this->last_random_quest_id_ <= 0x98967F )
    this->last_random_quest_id_ = 10000000;
  if ( *(_BYTE *)(((unsigned __int64)&this->last_random_quest_id_ >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)this + 76) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&this->last_random_quest_id_ >> 3)
                                                        + 0x7FFF8000) )
  {
    __asan_report_load4(&this->last_random_quest_id_);
  }
  if ( this->last_random_quest_id_ == -1 )
    this->last_random_quest_id_ = 10000000;
  if ( *(_BYTE *)(((unsigned __int64)&this->last_random_quest_id_ >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)this + 76) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&this->last_random_quest_id_ >> 3)
                                                        + 0x7FFF8000) )
  {
    __asan_report_load4(&this->last_random_quest_id_);
  }
  return ++this->last_random_quest_id_;
};

// Line 4387: range 0000000013DF21FE-0000000013DF261D
__int64 __fastcall PlayerQuestComp::checkIsQuestNpcAllAvailable(PlayerQuestComp *const this, uint32_t quest_id)
{
  unsigned __int64 v2; // rbx
  __int64 v3; // rax
  unsigned __int64 v4; // r13
  common::milog::MiLogStream *v5; // rax
  unsigned int *v6; // rax
  uint32_t *v7; // rdx
  int v8; // r14d
  std::vector<unsigned int> *i; // r12
  __int64 result; // rax
  unsigned __int8 v11; // [rsp+13h] [rbp-12Dh]
  std::vector<unsigned int>::const_iterator __for_begin_0; // [rsp+30h] [rbp-110h] BYREF
  std::vector<unsigned int>::const_iterator __for_end_0; // [rsp+38h] [rbp-108h] BYREF
  std::initializer_list<std::vector<unsigned int> >::const_iterator __for_begin; // [rsp+40h] [rbp-100h]
  const data::QuestExcelConfig *quest_config_ptr; // [rsp+48h] [rbp-F8h]
  std::initializer_list<std::vector<unsigned int> > *__for_range; // [rsp+50h] [rbp-F0h]
  std::initializer_list<std::vector<unsigned int> >::const_iterator __for_end; // [rsp+58h] [rbp-E8h]
  const std::vector<unsigned int> *required_npc_vec; // [rsp+60h] [rbp-E0h]
  const std::vector<unsigned int> *__for_range_0; // [rsp+68h] [rbp-D8h]
  std::initializer_list<std::vector<unsigned int> > v20; // [rsp+70h] [rbp-D0h] BYREF
  common::milog::MiLogStream v21; // [rsp+80h] [rbp-C0h] BYREF
  std::vector<unsigned int> v22; // [rsp+A0h] [rbp-A0h] BYREF
  std::vector<unsigned int> v23; // [rsp+B8h] [rbp-88h] BYREF
  char v24[112]; // [rsp+D0h] [rbp-70h] BYREF

  v2 = (unsigned __int64)v24;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_0(64LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "1 32 4 13 quest_id:4386";
  *(_QWORD *)(v2 + 16) = PlayerQuestComp::checkIsQuestNpcAllAvailable;
  v4 = v2 >> 3;
  *(_DWORD *)(v4 + 2147450880) = -235802127;
  *(_DWORD *)(v4 + 2147450884) = -202116348;
  *(_DWORD *)(v2 + 32) = quest_id;
  quest_config_ptr = PlayerQuestComp::findPlayerQuestExcelConfig(this, *(_DWORD *)(v2 + 32));
  if ( quest_config_ptr )
  {
    v20._M_len = 2LL;
    std::vector<unsigned int>::vector(&v22, &quest_config_ptr->exclusive_npc_list);
    std::vector<unsigned int>::vector(&v23, &quest_config_ptr->shared_npc_list);
    v20._M_array = &v22;
    __for_range = &v20;
    __for_begin = std::initializer_list<std::vector<unsigned int>>::begin(&v20);
    __for_end = std::initializer_list<std::vector<unsigned int>>::end(&v20);
    while ( __for_begin != __for_end )
    {
      required_npc_vec = __for_begin;
      __for_range_0 = __for_begin;
      __for_begin_0._M_current = std::vector<unsigned int>::begin(__for_begin)._M_current;
      __for_end_0._M_current = std::vector<unsigned int>::end(__for_range_0)._M_current;
      while ( __gnu_cxx::operator!=<unsigned int const*,std::vector<unsigned int>>(&__for_begin_0, &__for_end_0) )
      {
        v6 = (unsigned int *)__gnu_cxx::__normal_iterator<unsigned int const*,std::vector<unsigned int>>::operator*(&__for_begin_0);
        v7 = v6;
        if ( *(_BYTE *)(((unsigned __int64)v6 >> 3) + 0x7FFF8000) != 0
          && (char)(((unsigned __int8)v6 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)v6 >> 3) + 0x7FFF8000) )
        {
          __asan_report_load4(v6);
        }
        if ( PlayerQuestComp::isNpcOccupied(this, *v7, *(_DWORD *)(v2 + 32)) )
        {
          v11 = 0;
          v8 = 0;
          goto LABEL_17;
        }
        __gnu_cxx::__normal_iterator<unsigned int const*,std::vector<unsigned int>>::operator++(&__for_begin_0);
      }
      ++__for_begin;
    }
    v8 = 1;
LABEL_17:
    for ( i = (std::vector<unsigned int> *)v24; i != &v22; std::vector<unsigned int>::~vector(i) )
      --i;
    if ( v8 == 1 )
      v11 = 1;
  }
  else
  {
    common::milog::MiLogStream::create(
      &v21,
      &common::milog::MiLogDefault::default_log_obj_,
      4u,
      "./src/player/quest/player_quest_comp.cpp",
      "checkIsQuestNpcAllAvailable",
      4391);
    v5 = common::milog::MiLogStream::operator<<<char [43],(char *[43])0>(
           &v21,
           (const char (*)[43])"findPlayerQuestExcelConfig fail. quest_id:");
    common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v5, (const unsigned int *)(v2 + 32));
    common::milog::MiLogStream::~MiLogStream(&v21);
    v11 = 0;
  }
  result = v11;
  if ( v24 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 4411: range 0000000013DF261E-0000000013DF2CF4
void __cdecl PlayerQuestComp::tryRollbackSharedQuests(PlayerQuestComp *const this, Quest *quest, bool is_notify)
{
  unsigned __int64 v3; // r13
  __int64 v4; // rax
  _DWORD *v5; // r12
  uint32_t QuestId; // edx
  common::milog::MiLogStream *v7; // r14
  unsigned int *v8; // rax
  uint32_t *v9; // rdx
  std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v10; // rax
  std::_Rb_tree_const_iterator<unsigned int>::reference v11; // rax
  _DWORD *v12; // rdx
  std::__shared_ptr_access<Quest,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v13; // rax
  unsigned int *v15; // rax
  uint32_t *v16; // rdx
  std::_Rb_tree_const_iterator<unsigned int>::_Base_ptr M_node; // r15
  std::_Rb_tree_const_iterator<unsigned int>::_Base_ptr __last; // [rsp+10h] [rbp-190h]
  std::allocator<unsigned int> __a; // [rsp+3Fh] [rbp-161h] BYREF
  uint32_t quest_id; // [rsp+40h] [rbp-160h]
  uint32_t npc_id; // [rsp+44h] [rbp-15Ch]
  std::vector<unsigned int>::const_iterator __for_begin; // [rsp+48h] [rbp-158h] BYREF
  std::vector<unsigned int>::const_iterator __for_end; // [rsp+50h] [rbp-150h] BYREF
  std::set<unsigned int>::iterator __for_begin_0; // [rsp+58h] [rbp-148h] BYREF
  std::set<unsigned int>::iterator __for_end_0; // [rsp+60h] [rbp-140h] BYREF
  const data::QuestExcelConfig *quest_config_ptr; // [rsp+68h] [rbp-138h]
  const std::vector<unsigned int> *__for_range; // [rsp+70h] [rbp-130h]
  std::set<unsigned int> *__for_range_1; // [rsp+78h] [rbp-128h]
  const std::set<unsigned int> *shared_npc_quest_id_set_ptr; // [rsp+80h] [rbp-120h]
  const std::set<unsigned int> *__for_range_0; // [rsp+88h] [rbp-118h]
  std::vector<unsigned int> quest_id_vec; // [rsp+90h] [rbp-110h] BYREF
  common::milog::MiLogStream v33; // [rsp+B0h] [rbp-F0h] BYREF
  char v34[208]; // [rsp+D0h] [rbp-D0h] BYREF

  v3 = (unsigned __int64)v34;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_2(160LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "3 32 4 13 quest_id:4433 48 16 10 guard:4443 80 48 21 shared_quest_set:4424";
  *(_QWORD *)(v3 + 16) = PlayerQuestComp::tryRollbackSharedQuests;
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = 61956;
  v5[536862722] = 62194;
  v5[536862724] = -202116109;
  if ( Quest::getState(quest) == QUEST_STATE_UNFINISHED )
  {
    QuestId = Quest::getQuestId(quest);
    quest_config_ptr = PlayerQuestComp::findPlayerQuestExcelConfig(this, QuestId);
    if ( quest_config_ptr )
    {
      std::set<unsigned int>::set((std::set<unsigned int> *const)(v3 + 80));
      __for_range = &quest_config_ptr->exclusive_npc_list;
      __for_begin._M_current = std::vector<unsigned int>::begin(&quest_config_ptr->exclusive_npc_list)._M_current;
      __for_end._M_current = std::vector<unsigned int>::end(&quest_config_ptr->exclusive_npc_list)._M_current;
      while ( __gnu_cxx::operator!=<unsigned int const*,std::vector<unsigned int>>(&__for_begin, &__for_end) )
      {
        v8 = (unsigned int *)__gnu_cxx::__normal_iterator<unsigned int const*,std::vector<unsigned int>>::operator*(&__for_begin);
        v9 = v8;
        if ( *(_BYTE *)(((unsigned __int64)v8 >> 3) + 0x7FFF8000) != 0
          && (char)(((unsigned __int8)v8 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)v8 >> 3) + 0x7FFF8000) )
        {
          __asan_report_load4(v8);
        }
        npc_id = *v9;
        ServiceBox::findService<GameserverService>();
        GameserverService::getConfig((GameserverService *const)(v3 + 48));
        v10 = std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 48));
        shared_npc_quest_id_set_ptr = QuestExcelConfigMgr::findSharedNpcQuests(
                                        &v10->design_config.txt_config_mgr.quest_config_mgr,
                                        npc_id);
        std::shared_ptr<Config>::~shared_ptr((std::shared_ptr<Config> *const)(v3 + 48));
        if ( shared_npc_quest_id_set_ptr )
        {
          __for_range_0 = shared_npc_quest_id_set_ptr;
          __for_begin_0._M_node = std::set<unsigned int>::begin(shared_npc_quest_id_set_ptr)._M_node;
          __for_end_0._M_node = std::set<unsigned int>::end(__for_range_0)._M_node;
          while ( std::operator!=(&__for_begin_0, &__for_end_0) )
          {
            v11 = std::_Rb_tree_const_iterator<unsigned int>::operator*(&__for_begin_0);
            v12 = v11;
            if ( *(_BYTE *)(((unsigned __int64)v11 >> 3) + 0x7FFF8000) != 0
              && (char)(((unsigned __int8)v11 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)v11 >> 3) + 0x7FFF8000) )
            {
              __asan_report_load4(v11);
            }
            *(_DWORD *)(v3 + 32) = *v12;
            PlayerQuestComp::findQuest((const PlayerQuestComp *const)(v3 + 48), (__int64)this, *(_DWORD *)(v3 + 32));
            if ( std::operator!=<Quest>(0LL, (const std::shared_ptr<Quest> *)(v3 + 48)) )
            {
              v13 = std::__shared_ptr_access<Quest,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Quest,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 48));
              if ( Quest::getState(v13) == QUEST_STATE_UNFINISHED )
                std::set<unsigned int>::insert(
                  (std::set<unsigned int> *const)(v3 + 80),
                  (const std::set<unsigned int>::value_type *)(v3 + 32));
            }
            std::shared_ptr<Quest>::~shared_ptr((std::shared_ptr<Quest> *const)(v3 + 48));
            std::_Rb_tree_const_iterator<unsigned int>::operator++(&__for_begin_0);
          }
        }
        __gnu_cxx::__normal_iterator<unsigned int const*,std::vector<unsigned int>>::operator++(&__for_begin);
      }
      QuestOperatorGuard::QuestOperatorGuard((QuestOperatorGuard *const)(v3 + 48), &this->quest_op_);
      __for_range_1 = (std::set<unsigned int> *)(v3 + 80);
      __for_begin_0._M_node = std::set<unsigned int>::begin((const std::set<unsigned int> *const)(v3 + 80))._M_node;
      __for_end_0._M_node = std::set<unsigned int>::end(__for_range_1)._M_node;
      while ( std::operator!=(&__for_begin_0, &__for_end_0) )
      {
        v15 = (unsigned int *)std::_Rb_tree_const_iterator<unsigned int>::operator*(&__for_begin_0);
        v16 = v15;
        if ( *(_BYTE *)(((unsigned __int64)v15 >> 3) + 0x7FFF8000) != 0
          && (char)(((unsigned __int8)v15 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)v15 >> 3) + 0x7FFF8000) )
        {
          __asan_report_load4(v15);
        }
        quest_id = *v16;
        PlayerQuestComp::removeQuest(this, quest_id, 5u, is_notify);
        PlayerQuestComp::acceptQuest(this, quest_id, 0, is_notify);
        std::_Rb_tree_const_iterator<unsigned int>::operator++(&__for_begin_0);
      }
      M_node = std::set<unsigned int>::begin((const std::set<unsigned int> *const)(v3 + 80))._M_node;
      __last = std::set<unsigned int>::end((const std::set<unsigned int> *const)(v3 + 80))._M_node;
      std::allocator<unsigned int>::allocator(&__a);
      std::vector<unsigned int>::vector<std::_Rb_tree_const_iterator<unsigned int>,void>(
        &quest_id_vec,
        (std::_Rb_tree_const_iterator<unsigned int>)M_node,
        (std::_Rb_tree_const_iterator<unsigned int>)__last,
        &__a);
      PlayerQuestComp::updateServerCondMeetStatus(this, &quest_id_vec, is_notify);
      std::vector<unsigned int>::~vector(&quest_id_vec);
      std::allocator<unsigned int>::~allocator(&__a);
      QuestOperatorGuard::~QuestOperatorGuard((QuestOperatorGuard *const)(v3 + 48));
      std::set<unsigned int>::~set((std::set<unsigned int> *const)(v3 + 80));
    }
    else
    {
      common::milog::MiLogStream::create(
        &v33,
        &common::milog::MiLogDefault::default_log_obj_,
        4u,
        "./src/player/quest/player_quest_comp.cpp",
        "tryRollbackSharedQuests",
        4420);
      v7 = common::milog::MiLogStream::operator<<<char [43],(char *[43])0>(
             &v33,
             (const char (*)[43])"findPlayerQuestExcelConfig fail. quest_id:");
      *(_DWORD *)(v3 + 32) = Quest::getQuestId(quest);
      common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v7, (const unsigned int *)(v3 + 32));
      common::milog::MiLogStream::~MiLogStream(&v33);
    }
  }
  if ( v34 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8008) = 0;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8010) = 0;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8010) = -168430091;
  }
};

// Line 4454: range 0000000013DF2CF6-0000000013DF2D2C
int32_t __cdecl PlayerQuestComp::unregisterResource(PlayerQuestComp *const this, uint32_t quest_id, bool is_notify)
{
  QuestOperator::unregisterResource(&this->quest_op_, quest_id, is_notify);
  return 0;
};

// Line 4460: range 0000000013DF38BE-0000000013DF4557
__int64 __fastcall PlayerQuestComp::internalUnregisterResource(
        PlayerQuestComp *const this,
        uint32_t quest_id,
        bool is_notify)
{
  unsigned __int64 v3; // r13
  __int64 v4; // rax
  _DWORD *v5; // r12
  common::milog::MiLogStream *v6; // rax
  std::__shared_ptr_access<Quest,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v7; // rax
  std::vector<unsigned int>::size_type v9; // rax
  common::milog::MiLogStream *v10; // rax
  unsigned int *v11; // rax
  uint32_t *v12; // rdx
  std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v13; // rax
  __gnu_cxx::__normal_iterator<unsigned int const*,std::vector<unsigned int> >::reference v14; // rax
  _DWORD *v15; // rdx
  std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v16; // rax
  std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v17; // rax
  std::map<unsigned int,std::set<unsigned int>>::mapped_type *v18; // rax
  std::map<unsigned int,std::set<unsigned int>>::mapped_type *v19; // rax
  std::_Rb_tree_const_iterator<unsigned int>::reference v20; // rax
  _DWORD *v21; // rdx
  common::milog::MiLogStream *v22; // rax
  std::_Rb_tree_const_iterator<unsigned int>::_Base_ptr M_node; // r14
  std::reverse_iterator<__gnu_cxx::__normal_iterator<unsigned int*,std::vector<unsigned int> > >::reference v24; // rax
  uint32_t *v25; // rdx
  __int64 result; // rax
  std::allocator<unsigned int> __a; // [rsp+19h] [rbp-227h] BYREF
  bool is_place_need_unregister; // [rsp+1Ah] [rbp-226h]
  bool is_npc_need_unregister; // [rsp+1Bh] [rbp-225h]
  uint32_t place_id; // [rsp+1Ch] [rbp-224h]
  std::vector<unsigned int>::const_iterator __for_end; // [rsp+20h] [rbp-220h] BYREF
  const data::QuestExcelConfig *quest_config; // [rsp+28h] [rbp-218h]
  const std::vector<unsigned int> *__for_range; // [rsp+30h] [rbp-210h]
  const std::vector<unsigned int> *__for_range_0; // [rsp+38h] [rbp-208h]
  const data::QuestExcelConfig *quest_config_ptr; // [rsp+40h] [rbp-200h]
  const std::set<unsigned int> *exclusive_npc_quest_id_set_ptr; // [rsp+48h] [rbp-1F8h]
  const std::set<unsigned int> *shared_npc_quest_id_set_ptr; // [rsp+50h] [rbp-1F0h]
  const std::set<unsigned int> *exclusive_place_quest_id_set_ptr; // [rsp+58h] [rbp-1E8h]
  std::shared_ptr<Config> v39; // [rsp+60h] [rbp-1E0h] BYREF
  common::milog::MiLogStream v40; // [rsp+70h] [rbp-1D0h] BYREF
  char v41[432]; // [rsp+90h] [rbp-1B0h] BYREF

  v3 = (unsigned __int64)v41;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_3(384LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "10 32 4 20 parent_quest_id:4467 48 4 23 candidate_quest_id:4609 64 4 13 quest_id:4459 80 8 9 ite"
                        "r:4607 112 8 9 iter:4634 144 16 14 quest_ptr:4468 176 16 20 start_quest_cmp:4492 208 16 27 check"
                        "_and_add_quest_id:4558 240 24 27 candidate_quest_id_vec:4606 304 48 27 candidate_quest_id_set:4557";
  *(_QWORD *)(v3 + 16) = PlayerQuestComp::internalUnregisterResource;
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = -234556924;
  v5[536862722] = 61956;
  v5[536862722] = -234881024;
  v5[536862723] = 62194;
  v5[536862723] = -234881024;
  v5[536862724] = 62194;
  v5[536862725] = 62194;
  v5[536862726] = 62194;
  v5[536862727] = 62194;
  v5[536862728] = -218959360;
  v5[536862729] = 62194;
  v5[536862731] = -202116109;
  *(_DWORD *)(v3 + 64) = quest_id;
  quest_config = PlayerQuestComp::findPlayerQuestExcelConfig(this, *(_DWORD *)(v3 + 64));
  if ( quest_config )
  {
    if ( *(_BYTE *)(((unsigned __int64)&quest_config->main_id >> 3) + 0x7FFF8000) != 0
      && (char)((((_BYTE)quest_config + 12) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&quest_config->main_id >> 3)
                                                                  + 0x7FFF8000) )
    {
      __asan_report_load4(&quest_config->main_id);
    }
    *(_DWORD *)(v3 + 32) = quest_config->main_id;
    PlayerQuestComp::findQuest((const PlayerQuestComp *const)(v3 + 144), (__int64)this, *(_DWORD *)(v3 + 64));
    if ( !std::operator!=<Quest>((const std::shared_ptr<Quest> *)(v3 + 144), 0LL)
      || (v7 = std::__shared_ptr_access<Quest,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Quest,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 144)),
          Quest::getState(v7) != QUEST_STATE_UNFINISHED) )
    {
      is_place_need_unregister = std::vector<unsigned int>::size(&quest_config->exclusive_place_list) != 0;
      v9 = std::vector<unsigned int>::size(&quest_config->exclusive_npc_list);
      is_npc_need_unregister = v9 != 0;
      if ( v9 || is_place_need_unregister )
      {
        if ( is_place_need_unregister )
          PlayerQuestComp::unregisterOccupiedPlace(this, quest_config, 0);
        if ( is_npc_need_unregister )
          PlayerQuestComp::unregisterOccupiedNpc(this, quest_config, 0);
        *(_QWORD *)(v3 + 176) = this;
        *(_DWORD *)(v3 + 184) = *(_DWORD *)(v3 + 32);
        __for_end._M_current = (const unsigned int *)std::ref<PlayerQuestComp::internalUnregisterResource(unsigned int,bool)::{lambda(unsigned int,unsigned int)#1}>((PlayerQuestComp::internalUnregisterResource::<lambda(uint32_t, uint32_t)> *)(v3 + 176))._M_data;
        std::allocator<unsigned int>::allocator(&__a);
        std::set<unsigned int,std::reference_wrapper<PlayerQuestComp::internalUnregisterResource(unsigned int,bool)::{lambda(unsigned int,unsigned int)#1}>,std::allocator<unsigned int>>::set(
          (std::set<unsigned int,std::reference_wrapper<PlayerQuestComp::internalUnregisterResource(uint32_t,bool)::<lambda(uint32_t,uint32_t)> >,std::allocator<unsigned int> > *const)(v3 + 304),
          (const std::reference_wrapper<PlayerQuestComp::internalUnregisterResource(uint32_t,bool)::<lambda(uint32_t,uint32_t)> > *)&__for_end,
          &__a);
        std::allocator<unsigned int>::~allocator(&__a);
        *(_QWORD *)(v3 + 208) = this;
        *(_QWORD *)(v3 + 216) = v3 + 304;
        __for_range = &quest_config->exclusive_place_list;
        *(std::vector<unsigned int>::const_iterator *)(v3 + 112) = std::vector<unsigned int>::begin(&quest_config->exclusive_place_list);
        __for_end._M_current = std::vector<unsigned int>::end(__for_range)._M_current;
        while ( __gnu_cxx::operator!=<unsigned int const*,std::vector<unsigned int>>(
                  (const __gnu_cxx::__normal_iterator<unsigned int const*,std::vector<unsigned int> > *)(v3 + 112),
                  &__for_end) )
        {
          v11 = (unsigned int *)__gnu_cxx::__normal_iterator<unsigned int const*,std::vector<unsigned int>>::operator*((const __gnu_cxx::__normal_iterator<unsigned int const*,std::vector<unsigned int> > *const)(v3 + 112));
          v12 = v11;
          if ( *(_BYTE *)(((unsigned __int64)v11 >> 3) + 0x7FFF8000) != 0
            && (char)(((unsigned __int8)v11 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)v11 >> 3) + 0x7FFF8000) )
          {
            __asan_report_load4(v11);
          }
          place_id = *v12;
          ServiceBox::findService<GameserverService>();
          GameserverService::getConfig((GameserverService *const)&v39);
          v13 = std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false> *const)&v39);
          exclusive_place_quest_id_set_ptr = QuestExcelConfigMgr::findExclusivePlaceQuests(
                                               &v13->design_config.txt_config_mgr.quest_config_mgr,
                                               place_id);
          std::shared_ptr<Config>::~shared_ptr(&v39);
          if ( exclusive_place_quest_id_set_ptr )
            PlayerQuestComp::internalUnregisterResource(unsigned int,bool)::{lambda(std::set<unsigned int> const&)#2}::operator()(
              (const PlayerQuestComp::internalUnregisterResource::<lambda(const std::set<unsigned int>&)> *const)(v3 + 208),
              exclusive_place_quest_id_set_ptr);
          __gnu_cxx::__normal_iterator<unsigned int const*,std::vector<unsigned int>>::operator++((__gnu_cxx::__normal_iterator<unsigned int const*,std::vector<unsigned int> > *const)(v3 + 112));
        }
        __for_range_0 = &quest_config->exclusive_npc_list;
        *(std::vector<unsigned int>::const_iterator *)(v3 + 112) = std::vector<unsigned int>::begin(&quest_config->exclusive_npc_list);
        __for_end._M_current = std::vector<unsigned int>::end(__for_range_0)._M_current;
        while ( __gnu_cxx::operator!=<unsigned int const*,std::vector<unsigned int>>(
                  (const __gnu_cxx::__normal_iterator<unsigned int const*,std::vector<unsigned int> > *)(v3 + 112),
                  &__for_end) )
        {
          v14 = __gnu_cxx::__normal_iterator<unsigned int const*,std::vector<unsigned int>>::operator*((const __gnu_cxx::__normal_iterator<unsigned int const*,std::vector<unsigned int> > *const)(v3 + 112));
          v15 = v14;
          if ( *(_BYTE *)(((unsigned __int64)v14 >> 3) + 0x7FFF8000) != 0
            && (char)(((unsigned __int8)v14 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)v14 >> 3) + 0x7FFF8000) )
          {
            __asan_report_load4(v14);
          }
          *(_DWORD *)(v3 + 48) = *v15;
          ServiceBox::findService<GameserverService>();
          GameserverService::getConfig((GameserverService *const)&v39);
          v16 = std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false> *const)&v39);
          exclusive_npc_quest_id_set_ptr = QuestExcelConfigMgr::findExclusiveNpcQuests(
                                             &v16->design_config.txt_config_mgr.quest_config_mgr,
                                             *(_DWORD *)(v3 + 48));
          std::shared_ptr<Config>::~shared_ptr(&v39);
          if ( exclusive_npc_quest_id_set_ptr )
            PlayerQuestComp::internalUnregisterResource(unsigned int,bool)::{lambda(std::set<unsigned int> const&)#2}::operator()(
              (const PlayerQuestComp::internalUnregisterResource::<lambda(const std::set<unsigned int>&)> *const)(v3 + 208),
              exclusive_npc_quest_id_set_ptr);
          ServiceBox::findService<GameserverService>();
          GameserverService::getConfig((GameserverService *const)&v39);
          v17 = std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false> *const)&v39);
          shared_npc_quest_id_set_ptr = QuestExcelConfigMgr::findSharedNpcQuests(
                                          &v17->design_config.txt_config_mgr.quest_config_mgr,
                                          *(_DWORD *)(v3 + 48));
          std::shared_ptr<Config>::~shared_ptr(&v39);
          if ( shared_npc_quest_id_set_ptr )
            PlayerQuestComp::internalUnregisterResource(unsigned int,bool)::{lambda(std::set<unsigned int> const&)#2}::operator()(
              (const PlayerQuestComp::internalUnregisterResource::<lambda(const std::set<unsigned int>&)> *const)(v3 + 208),
              shared_npc_quest_id_set_ptr);
          if ( common::tools::MiscUtils::isContains<std::map<unsigned int,std::set<unsigned int>>,unsigned int>(
                 &this->exclusive_npc_quest_map_,
                 (const unsigned int *)(v3 + 48)) )
          {
            v18 = std::map<unsigned int,std::set<unsigned int>>::operator[](
                    &this->exclusive_npc_quest_map_,
                    (const std::map<unsigned int,std::set<unsigned int>>::key_type *)(v3 + 48));
            PlayerQuestComp::internalUnregisterResource(unsigned int,bool)::{lambda(std::set<unsigned int> const&)#2}::operator()(
              (const PlayerQuestComp::internalUnregisterResource::<lambda(const std::set<unsigned int>&)> *const)(v3 + 208),
              v18);
          }
          if ( common::tools::MiscUtils::isContains<std::map<unsigned int,std::set<unsigned int>>,unsigned int>(
                 &this->shared_npc_quest_map_,
                 (const unsigned int *)(v3 + 48)) )
          {
            v19 = std::map<unsigned int,std::set<unsigned int>>::operator[](
                    &this->shared_npc_quest_map_,
                    (const std::map<unsigned int,std::set<unsigned int>>::key_type *)(v3 + 48));
            PlayerQuestComp::internalUnregisterResource(unsigned int,bool)::{lambda(std::set<unsigned int> const&)#2}::operator()(
              (const PlayerQuestComp::internalUnregisterResource::<lambda(const std::set<unsigned int>&)> *const)(v3 + 208),
              v19);
          }
          __gnu_cxx::__normal_iterator<unsigned int const*,std::vector<unsigned int>>::operator++((__gnu_cxx::__normal_iterator<unsigned int const*,std::vector<unsigned int> > *const)(v3 + 112));
        }
        std::vector<unsigned int>::vector((std::vector<unsigned int> *const)(v3 + 240));
        *(std::set<unsigned int,std::reference_wrapper<PlayerQuestComp::internalUnregisterResource(uint32_t,bool)::<lambda(uint32_t,uint32_t)> >,std::allocator<unsigned int> >::iterator *)(v3 + 80) = std::set<unsigned int,std::reference_wrapper<PlayerQuestComp::internalUnregisterResource(unsigned int,bool)::{lambda(unsigned int,unsigned int)#1}>,std::allocator<unsigned int>>::begin((const std::set<unsigned int,std::reference_wrapper<PlayerQuestComp::internalUnregisterResource(uint32_t,bool)::<lambda(uint32_t,uint32_t)> >,std::allocator<unsigned int> > *const)(v3 + 304));
        while ( 1 )
        {
          __for_end._M_current = (const unsigned int *)std::set<unsigned int,std::reference_wrapper<PlayerQuestComp::internalUnregisterResource(unsigned int,bool)::{lambda(unsigned int,unsigned int)#1}>,std::allocator<unsigned int>>::end((const std::set<unsigned int,std::reference_wrapper<PlayerQuestComp::internalUnregisterResource(uint32_t,bool)::<lambda(uint32_t,uint32_t)> >,std::allocator<unsigned int> > *const)(v3 + 304))._M_node;
          if ( !std::operator!=(
                  (const std::_Rb_tree_const_iterator<unsigned int>::_Self *)(v3 + 80),
                  (const std::_Rb_tree_const_iterator<unsigned int>::_Self *)&__for_end) )
            break;
          v20 = std::_Rb_tree_const_iterator<unsigned int>::operator*((const std::_Rb_tree_const_iterator<unsigned int> *const)(v3 + 80));
          v21 = v20;
          if ( *(_BYTE *)(((unsigned __int64)v20 >> 3) + 0x7FFF8000) != 0
            && (char)(((unsigned __int8)v20 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)v20 >> 3) + 0x7FFF8000) )
          {
            __asan_report_load4(v20);
          }
          *(_DWORD *)(v3 + 48) = *v21;
          if ( (unsigned __int8)PlayerQuestComp::canStartQuest(this, *(_DWORD *)(v3 + 48)) == 1 )
          {
            quest_config_ptr = PlayerQuestComp::findPlayerQuestExcelConfig(this, *(_DWORD *)(v3 + 48));
            if ( quest_config_ptr )
            {
              if ( !std::vector<unsigned int>::empty(&quest_config_ptr->exclusive_npc_list) )
              {
                std::vector<unsigned int>::push_back(
                  (std::vector<unsigned int> *const)(v3 + 240),
                  (const std::vector<unsigned int>::value_type *)(v3 + 48));
              }
              else
              {
                M_node = std::set<unsigned int,std::reference_wrapper<PlayerQuestComp::internalUnregisterResource(unsigned int,bool)::{lambda(unsigned int,unsigned int)#1}>,std::allocator<unsigned int>>::end((const std::set<unsigned int,std::reference_wrapper<PlayerQuestComp::internalUnregisterResource(uint32_t,bool)::<lambda(uint32_t,uint32_t)> >,std::allocator<unsigned int> > *const)(v3 + 304))._M_node;
                *(std::vector<unsigned int>::iterator *)(v3 + 112) = std::vector<unsigned int>::end((std::vector<unsigned int> *const)(v3 + 240));
                __gnu_cxx::__normal_iterator<unsigned int const*,std::vector<unsigned int>>::__normal_iterator<unsigned int *>(
                  &__for_end,
                  (const __gnu_cxx::__normal_iterator<unsigned int*,std::vector<unsigned int> > *)(v3 + 112));
                std::vector<unsigned int>::insert<std::_Rb_tree_const_iterator<unsigned int>,void>(
                  (std::vector<unsigned int> *const)(v3 + 240),
                  __for_end,
                  *(std::_Rb_tree_const_iterator<unsigned int> *)(v3 + 80),
                  (std::_Rb_tree_const_iterator<unsigned int>)M_node);
              }
            }
            else
            {
              common::milog::MiLogStream::create(
                &v40,
                &common::milog::MiLogDefault::default_log_obj_,
                4u,
                "./src/player/quest/player_quest_comp.cpp",
                "internalUnregisterResource",
                4618);
              v22 = common::milog::MiLogStream::operator<<<char [43],(char *[43])0>(
                      &v40,
                      (const char (*)[43])"findPlayerQuestExcelConfig fail. quest_id:");
              common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                v22,
                (const unsigned int *)(v3 + 48));
              common::milog::MiLogStream::~MiLogStream(&v40);
            }
          }
          std::_Rb_tree_const_iterator<unsigned int>::operator++((std::_Rb_tree_const_iterator<unsigned int> *const)(v3 + 80));
        }
        std::vector<unsigned int>::rbegin((std::vector<unsigned int> *const)(v3 + 112));
        while ( 1 )
        {
          std::vector<unsigned int>::rend((std::vector<unsigned int> *const)&__for_end);
          if ( !std::operator!=<__gnu_cxx::__normal_iterator<unsigned int *,std::vector<unsigned int>>>(
                  (const std::reverse_iterator<__gnu_cxx::__normal_iterator<unsigned int*,std::vector<unsigned int> > > *)(v3 + 112),
                  (const std::reverse_iterator<__gnu_cxx::__normal_iterator<unsigned int*,std::vector<unsigned int> > > *)&__for_end) )
            break;
          v24 = std::reverse_iterator<__gnu_cxx::__normal_iterator<unsigned int *,std::vector<unsigned int>>>::operator*((const std::reverse_iterator<__gnu_cxx::__normal_iterator<unsigned int*,std::vector<unsigned int> > > *const)(v3 + 112));
          v25 = v24;
          if ( *(_BYTE *)(((unsigned __int64)v24 >> 3) + 0x7FFF8000) != 0
            && (char)(((unsigned __int8)v24 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)v24 >> 3) + 0x7FFF8000) )
          {
            __asan_report_load4(v24);
          }
          PlayerQuestComp::startQuestImm(this, *v25, 1);
          std::reverse_iterator<__gnu_cxx::__normal_iterator<unsigned int *,std::vector<unsigned int>>>::operator++(
            (std::reverse_iterator<__gnu_cxx::__normal_iterator<unsigned int*,std::vector<unsigned int> > > *const)&__for_end,
            v3 + 112);
        }
        std::vector<unsigned int>::~vector((std::vector<unsigned int> *const)(v3 + 240));
        std::set<unsigned int,std::reference_wrapper<PlayerQuestComp::internalUnregisterResource(unsigned int,bool)::{lambda(unsigned int,unsigned int)#1}>,std::allocator<unsigned int>>::~set((std::set<unsigned int,std::reference_wrapper<PlayerQuestComp::internalUnregisterResource(uint32_t,bool)::<lambda(uint32_t,uint32_t)> >,std::allocator<unsigned int> > *const)(v3 + 304));
      }
      else
      {
        common::milog::MiLogStream::create(
          &v40,
          &common::milog::MiLogDefault::default_log_obj_,
          3u,
          "./src/player/quest/player_quest_comp.cpp",
          "internalUnregisterResource",
          4478);
        v10 = common::milog::MiLogStream::operator<<<char [76],(char *[76])0>(
                &v40,
                (const char (*)[76])"exclusive_npc_list and exclusive_place_list all all empty, parent_quest_id:");
        common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v10, (const unsigned int *)(v3 + 32));
        common::milog::MiLogStream::~MiLogStream(&v40);
      }
    }
    std::shared_ptr<Quest>::~shared_ptr((std::shared_ptr<Quest> *const)(v3 + 144));
  }
  else
  {
    common::milog::MiLogStream::create(
      &v40,
      &common::milog::MiLogDefault::default_log_obj_,
      1u,
      "./src/player/quest/player_quest_comp.cpp",
      "internalUnregisterResource",
      4464);
    v6 = common::milog::MiLogStream::operator<<<char [44],(char *[44])0>(
           &v40,
           (const char (*)[44])"findPlayerQuestExcelConfig failed,quest_id:");
    common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v6, (const unsigned int *)(v3 + 64));
    common::milog::MiLogStream::~MiLogStream(&v40);
  }
  result = 0LL;
  if ( v41 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8010) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8018) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8020) = 0LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF802C) = 0;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8020) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8028) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 4492: range 0000000013DF2D2E-0000000013DF3607
__int64 __fastcall PlayerQuestComp::internalUnregisterResource(unsigned int,bool)::{lambda(unsigned int,unsigned int)#1}::operator()(
        unsigned __int64 __closure,
        uint32_t lhs_quest_id,
        uint32_t rhs_quest_id)
{
  uint32_t AcceptTime; // r13d
  unsigned __int64 v4; // r12
  __int64 v5; // rax
  _DWORD *v6; // r14
  common::milog::MiLogStream *v7; // rax
  common::milog::MiLogStream *v8; // rax
  common::milog::MiLogStream *v9; // rax
  const QuestExcelConfigMgr *p_quest_config_mgr; // rdi
  uint32_t main_id; // edx
  const QuestExcelConfigMgr *p_main_id; // rdi
  uint32_t v13; // edx
  uint32_t v14; // ecx
  uint32_t exclusive_npc_priority; // ecx
  common::milog::MiLogStream *v17; // rax
  common::milog::MiLogStream *v18; // rax
  common::milog::MiLogStream *v19; // rax
  std::__shared_ptr_access<Quest,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v20; // rax
  std::__shared_ptr_access<Quest,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v21; // rax
  std::__shared_ptr_access<Quest,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v22; // rax
  std::__shared_ptr_access<Quest,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v23; // rax
  __int64 result; // rax
  unsigned __int8 lhs_is_same_series; // [rsp+18h] [rbp-E8h]
  char rhs_is_same_series; // [rsp+19h] [rbp-E7h]
  bool lhs_is_place_exclusive; // [rsp+1Ah] [rbp-E6h]
  bool lhs_is_npc_exclusive; // [rsp+1Ch] [rbp-E4h]
  bool lhs_is_same_parent; // [rsp+1Eh] [rbp-E2h]
  const data::QuestExcelConfig *lhs_quest_config_ptr; // [rsp+20h] [rbp-E0h]
  const data::QuestExcelConfig *rhs_quest_config_ptr; // [rsp+28h] [rbp-D8h]
  common::milog::MiLogStream v34; // [rsp+30h] [rbp-D0h] BYREF
  char v35[176]; // [rsp+50h] [rbp-B0h] BYREF

  v4 = (unsigned __int64)v35;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v5 = __asan_stack_malloc_1(128LL);
    if ( v5 )
      v4 = v5;
  }
  *(_QWORD *)v4 = 1102416563LL;
  *(_QWORD *)(v4 + 8) = "4 32 4 17 lhs_quest_id:4492 48 4 17 rhs_quest_id:4492 64 16 18 lhs_quest_ptr:4541 96 16 18 rhs_quest_ptr:4542";
  *(_QWORD *)(v4 + 16) = PlayerQuestComp::internalUnregisterResource(unsigned int,bool)::{lambda(unsigned int,unsigned int)#1}::operator();
  v6 = (_DWORD *)(v4 >> 3);
  v6[536862720] = -235802127;
  v6[536862721] = -234556924;
  v6[536862722] = -219021312;
  v6[536862723] = -202178560;
  *(_DWORD *)(v4 + 32) = lhs_quest_id;
  *(_DWORD *)(v4 + 48) = rhs_quest_id;
  if ( *(_BYTE *)((__closure >> 3) + 0x7FFF8000) )
    __asan_report_load8(__closure);
  lhs_quest_config_ptr = PlayerQuestComp::findPlayerQuestExcelConfig(
                           *(const PlayerQuestComp *const *)__closure,
                           *(_DWORD *)(v4 + 32));
  if ( *(_BYTE *)((__closure >> 3) + 0x7FFF8000) )
    __asan_report_load8(__closure);
  rhs_quest_config_ptr = PlayerQuestComp::findPlayerQuestExcelConfig(
                           *(const PlayerQuestComp *const *)__closure,
                           *(_DWORD *)(v4 + 48));
  if ( lhs_quest_config_ptr && rhs_quest_config_ptr )
  {
    ServiceBox::findService<GameserverService>();
    GameserverService::getConfig((GameserverService *const)(v4 + 96));
    p_quest_config_mgr = &std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 96))->design_config.txt_config_mgr.quest_config_mgr;
    if ( *(_BYTE *)(((unsigned __int64)&lhs_quest_config_ptr->main_id >> 3) + 0x7FFF8000) != 0
      && (char)((((_BYTE)lhs_quest_config_ptr + 12) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&lhs_quest_config_ptr->main_id >> 3)
                                                                          + 0x7FFF8000) )
    {
      p_quest_config_mgr = (const QuestExcelConfigMgr *)&lhs_quest_config_ptr->main_id;
      __asan_report_load4(&lhs_quest_config_ptr->main_id);
    }
    main_id = lhs_quest_config_ptr->main_id;
    if ( *(_BYTE *)(((__closure + 8) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((__closure + 8) >> 3) + 0x7FFF8000) <= 3 )
    {
      p_quest_config_mgr = (const QuestExcelConfigMgr *)(__closure + 8);
      __asan_report_load4(__closure + 8);
    }
    lhs_is_same_series = QuestExcelConfigMgr::isSameParentQuestSeries(
                           p_quest_config_mgr,
                           *(_DWORD *)(__closure + 8),
                           main_id);
    std::shared_ptr<Config>::~shared_ptr((std::shared_ptr<Config> *const)(v4 + 96));
    ServiceBox::findService<GameserverService>();
    GameserverService::getConfig((GameserverService *const)(v4 + 96));
    p_main_id = &std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 96))->design_config.txt_config_mgr.quest_config_mgr;
    if ( *(_BYTE *)(((unsigned __int64)&rhs_quest_config_ptr->main_id >> 3) + 0x7FFF8000) != 0
      && (char)((((_BYTE)rhs_quest_config_ptr + 12) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&rhs_quest_config_ptr->main_id >> 3)
                                                                          + 0x7FFF8000) )
    {
      p_main_id = (const QuestExcelConfigMgr *)&rhs_quest_config_ptr->main_id;
      __asan_report_load4(&rhs_quest_config_ptr->main_id);
    }
    v13 = rhs_quest_config_ptr->main_id;
    if ( *(_BYTE *)(((__closure + 8) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((__closure + 8) >> 3) + 0x7FFF8000) <= 3 )
    {
      p_main_id = (const QuestExcelConfigMgr *)(__closure + 8);
      __asan_report_load4(__closure + 8);
    }
    rhs_is_same_series = QuestExcelConfigMgr::isSameParentQuestSeries(p_main_id, *(_DWORD *)(__closure + 8), v13);
    std::shared_ptr<Config>::~shared_ptr((std::shared_ptr<Config> *const)(v4 + 96));
    if ( lhs_is_same_series == rhs_is_same_series )
    {
      lhs_is_place_exclusive = !std::vector<unsigned int>::empty(&lhs_quest_config_ptr->exclusive_place_list);
      if ( lhs_is_place_exclusive == !std::vector<unsigned int>::empty(&rhs_quest_config_ptr->exclusive_place_list) )
      {
        lhs_is_npc_exclusive = !std::vector<unsigned int>::empty(&lhs_quest_config_ptr->exclusive_npc_list);
        if ( lhs_is_npc_exclusive == !std::vector<unsigned int>::empty(&rhs_quest_config_ptr->exclusive_npc_list) )
        {
          if ( *(_BYTE *)(((unsigned __int64)&lhs_quest_config_ptr->main_id >> 3) + 0x7FFF8000) != 0
            && (char)((((_BYTE)lhs_quest_config_ptr + 12) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&lhs_quest_config_ptr->main_id >> 3)
                                                                                + 0x7FFF8000) )
          {
            __asan_report_load4(&lhs_quest_config_ptr->main_id);
          }
          v14 = lhs_quest_config_ptr->main_id;
          if ( *(_BYTE *)(((__closure + 8) >> 3) + 0x7FFF8000) != 0
            && *(_BYTE *)(((__closure + 8) >> 3) + 0x7FFF8000) <= 3 )
          {
            __asan_report_load4(__closure + 8);
          }
          lhs_is_same_parent = v14 == *(_DWORD *)(__closure + 8);
          if ( *(_BYTE *)(((unsigned __int64)&rhs_quest_config_ptr->main_id >> 3) + 0x7FFF8000) != 0
            && (char)((((_BYTE)rhs_quest_config_ptr + 12) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&rhs_quest_config_ptr->main_id >> 3)
                                                                                + 0x7FFF8000) )
          {
            __asan_report_load4(&rhs_quest_config_ptr->main_id);
          }
          if ( lhs_is_same_parent == (rhs_quest_config_ptr->main_id == *(_DWORD *)(__closure + 8)) )
          {
            if ( *(_BYTE *)(((unsigned __int64)&lhs_quest_config_ptr->exclusive_npc_priority >> 3) + 0x7FFF8000) != 0
              && *(_BYTE *)(((unsigned __int64)&lhs_quest_config_ptr->exclusive_npc_priority >> 3) + 0x7FFF8000) <= 3 )
            {
              __asan_report_load4(&lhs_quest_config_ptr->exclusive_npc_priority);
            }
            exclusive_npc_priority = lhs_quest_config_ptr->exclusive_npc_priority;
            if ( *(_BYTE *)(((unsigned __int64)&rhs_quest_config_ptr->exclusive_npc_priority >> 3) + 0x7FFF8000) != 0
              && *(_BYTE *)(((unsigned __int64)&rhs_quest_config_ptr->exclusive_npc_priority >> 3) + 0x7FFF8000) <= 3 )
            {
              __asan_report_load4(&rhs_quest_config_ptr->exclusive_npc_priority);
            }
            if ( exclusive_npc_priority == rhs_quest_config_ptr->exclusive_npc_priority )
            {
              if ( *(_BYTE *)((__closure >> 3) + 0x7FFF8000) )
                __asan_report_load8(__closure);
              PlayerQuestComp::findQuest(
                (const PlayerQuestComp *const)(v4 + 64),
                *(_QWORD *)__closure,
                *(_DWORD *)(v4 + 32));
              PlayerQuestComp::findQuest(
                (const PlayerQuestComp *const)(v4 + 96),
                *(_QWORD *)__closure,
                *(_DWORD *)(v4 + 48));
              if ( std::operator==<Quest>(0LL, (const std::shared_ptr<Quest> *)(v4 + 64))
                || std::operator==<Quest>(0LL, (const std::shared_ptr<Quest> *)(v4 + 96)) )
              {
                common::milog::MiLogStream::create(
                  &v34,
                  &common::milog::MiLogDefault::default_log_obj_,
                  4u,
                  "./src/player/quest/player_quest_comp.cpp",
                  "operator()",
                  4545);
                v17 = common::milog::MiLogStream::operator<<<char [30],(char *[30])0>(
                        &v34,
                        (const char (*)[30])"findQuest fail. lhs_quest_id:");
                v18 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                        v17,
                        (const unsigned int *)(v4 + 32));
                v19 = common::milog::MiLogStream::operator<<<char [15],(char *[15])0>(
                        v18,
                        (const char (*)[15])" rhs_quest_id:");
                common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                  v19,
                  (const unsigned int *)(v4 + 48));
                common::milog::MiLogStream::~MiLogStream(&v34);
                AcceptTime = 0;
              }
              else
              {
                v20 = std::__shared_ptr_access<Quest,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Quest,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 64));
                AcceptTime = Quest::getAcceptTime(v20);
                v21 = std::__shared_ptr_access<Quest,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Quest,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 96));
                if ( AcceptTime == Quest::getAcceptTime(v21) )
                {
                  LOBYTE(AcceptTime) = *(_DWORD *)(v4 + 32) < *(_DWORD *)(v4 + 48);
                }
                else
                {
                  v22 = std::__shared_ptr_access<Quest,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Quest,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 64));
                  AcceptTime = Quest::getAcceptTime(v22);
                  v23 = std::__shared_ptr_access<Quest,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Quest,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 96));
                  LOBYTE(AcceptTime) = AcceptTime < Quest::getAcceptTime(v23);
                }
              }
              std::shared_ptr<Quest>::~shared_ptr((std::shared_ptr<Quest> *const)(v4 + 96));
              std::shared_ptr<Quest>::~shared_ptr((std::shared_ptr<Quest> *const)(v4 + 64));
            }
            else
            {
              LOBYTE(AcceptTime) = lhs_quest_config_ptr->exclusive_npc_priority < rhs_quest_config_ptr->exclusive_npc_priority;
            }
          }
          else
          {
            AcceptTime = lhs_is_same_parent;
          }
        }
        else
        {
          AcceptTime = lhs_is_npc_exclusive;
        }
      }
      else
      {
        AcceptTime = lhs_is_place_exclusive;
      }
    }
    else
    {
      AcceptTime = lhs_is_same_series;
    }
  }
  else
  {
    common::milog::MiLogStream::create(
      &v34,
      &common::milog::MiLogDefault::default_log_obj_,
      4u,
      "./src/player/quest/player_quest_comp.cpp",
      "operator()",
      4498);
    v7 = common::milog::MiLogStream::operator<<<char [47],(char *[47])0>(
           &v34,
           (const char (*)[47])"findPlayerQuestExcelConfig fail. lhs_quest_id:");
    v8 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v7, (const unsigned int *)(v4 + 32));
    v9 = common::milog::MiLogStream::operator<<<char [15],(char *[15])0>(v8, (const char (*)[15])" rhs_quest_id:");
    common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v9, (const unsigned int *)(v4 + 48));
    common::milog::MiLogStream::~MiLogStream(&v34);
    AcceptTime = 0;
  }
  result = AcceptTime;
  if ( v35 == (char *)v4 )
  {
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v4 = 1172321806LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 4558: range 0000000013DF3624-0000000013DF38BC
void __cdecl PlayerQuestComp::internalUnregisterResource(unsigned int,bool)::{lambda(std::set<unsigned int> const&)#2}::operator()(
        const PlayerQuestComp::internalUnregisterResource::<lambda(const std::set<unsigned int>&)> *const __closure,
        const std::set<unsigned int> *quest_id_set)
{
  unsigned __int64 v2; // rbx
  __int64 v3; // rax
  _DWORD *v4; // r13
  std::_Rb_tree_const_iterator<unsigned int>::reference v5; // rax
  _DWORD *v6; // rdx
  std::__shared_ptr_access<Quest,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v7; // rax
  std::set<unsigned int>::iterator __for_begin; // [rsp+18h] [rbp-98h] BYREF
  std::set<unsigned int>::iterator __for_end; // [rsp+20h] [rbp-90h] BYREF
  const std::set<unsigned int> *__for_range; // [rsp+28h] [rbp-88h]
  char v12[128]; // [rsp+30h] [rbp-80h] BYREF

  v2 = (unsigned __int64)v12;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_1(96LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "2 48 4 17 tmp_quest_id:4560 64 16 14 quest_ptr:4562";
  *(_QWORD *)(v2 + 16) = PlayerQuestComp::internalUnregisterResource(unsigned int,bool)::{lambda(std::set<unsigned int> const&)#2}::operator();
  v4 = (_DWORD *)(v2 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = -234556943;
  v4[536862722] = -202178560;
  __for_range = quest_id_set;
  __for_begin._M_node = std::set<unsigned int>::begin(quest_id_set)._M_node;
  __for_end._M_node = std::set<unsigned int>::end(quest_id_set)._M_node;
  while ( std::operator!=(&__for_begin, &__for_end) )
  {
    v5 = std::_Rb_tree_const_iterator<unsigned int>::operator*(&__for_begin);
    v6 = v5;
    if ( *(_BYTE *)(((unsigned __int64)v5 >> 3) + 0x7FFF8000) != 0
      && (char)(((unsigned __int8)v5 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)v5 >> 3) + 0x7FFF8000) )
    {
      __asan_report_load4(v5);
    }
    *(_DWORD *)(v2 + 48) = *v6;
    if ( *(_BYTE *)(((unsigned __int64)__closure >> 3) + 0x7FFF8000) )
      __asan_report_load8(__closure);
    PlayerQuestComp::findQuest(
      (const PlayerQuestComp *const)(v2 + 64),
      (__int64)__closure->__this,
      *(_DWORD *)(v2 + 48));
    if ( std::operator!=<Quest>(0LL, (const std::shared_ptr<Quest> *)(v2 + 64)) )
    {
      v7 = std::__shared_ptr_access<Quest,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Quest,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 64));
      if ( Quest::getState(v7) == QUEST_STATE_UNSTARTED )
      {
        if ( *(_BYTE *)(((unsigned __int64)&__closure->__candidate_quest_id_set >> 3) + 0x7FFF8000) )
          __asan_report_load8(&__closure->__candidate_quest_id_set);
        std::set<unsigned int,std::reference_wrapper<PlayerQuestComp::internalUnregisterResource(unsigned int,bool)::{lambda(unsigned int,unsigned int)#1}>,std::allocator<unsigned int>>::insert(
          __closure->__candidate_quest_id_set,
          (const std::set<unsigned int,std::reference_wrapper<PlayerQuestComp::internalUnregisterResource(uint32_t,bool)::<lambda(uint32_t,uint32_t)> >,std::allocator<unsigned int> >::value_type *)(v2 + 48));
      }
    }
    std::shared_ptr<Quest>::~shared_ptr((std::shared_ptr<Quest> *const)(v2 + 64));
    std::_Rb_tree_const_iterator<unsigned int>::operator++(&__for_begin);
  }
  if ( v12 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8008) = 0;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8008) = -168430091;
  }
};

// Line 4642: range 0000000013DF4558-0000000013DF45A5
int32_t __cdecl PlayerQuestComp::notifyOccupiedQuest(
        PlayerQuestComp *const this,
        uint32_t quest_id,
        const std::vector<unsigned int> *exclusive_npc_id_vec,
        const std::vector<unsigned int> *exclusive_place_id_vec,
        bool is_notify)
{
  if ( !is_notify )
    return 0;
  else
    return QuestOperator::notifyOccupiedQuest(&this->quest_op_, quest_id, exclusive_npc_id_vec, exclusive_place_id_vec);
};

// Line 4652: range 0000000013DF45A6-0000000013DF4D7B
int32_t __cdecl PlayerQuestComp::internalNotifyOccupiedQuest(
        PlayerQuestComp *const this,
        uint32_t quest_id,
        const std::vector<unsigned int> *exclusive_npc_id_vec,
        const std::vector<unsigned int> *exclusive_place_id_vec)
{
  unsigned __int64 v4; // r12
  __int64 v5; // rax
  unsigned __int64 v6; // r13
  unsigned int *v7; // rax
  uint32_t *v8; // rdx
  std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v9; // rax
  unsigned int *v10; // rax
  int *v11; // rdx
  std::__shared_ptr_access<Quest,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v12; // rax
  Quest *v14; // rax
  unsigned int *v15; // rax
  uint32_t *v16; // rdx
  std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v17; // rax
  unsigned int *v18; // rax
  int *v19; // rdx
  std::__shared_ptr_access<Quest,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v20; // rax
  Quest *v22; // rax
  std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v23; // rax
  unsigned int *v24; // rax
  int *v25; // rdx
  std::__shared_ptr_access<Quest,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v26; // rax
  Quest *v28; // rax
  int32_t result; // eax
  uint32_t npc_id; // [rsp+24h] [rbp-CCh]
  uint32_t place_id; // [rsp+30h] [rbp-C0h]
  std::vector<unsigned int>::const_iterator __for_begin; // [rsp+38h] [rbp-B8h] BYREF
  std::vector<unsigned int>::const_iterator __for_end; // [rsp+40h] [rbp-B0h] BYREF
  std::set<unsigned int>::iterator __for_begin_0; // [rsp+48h] [rbp-A8h] BYREF
  std::set<unsigned int>::iterator __for_end_0; // [rsp+50h] [rbp-A0h] BYREF
  const std::vector<unsigned int> *__for_range; // [rsp+58h] [rbp-98h]
  const std::vector<unsigned int> *__for_range_1; // [rsp+60h] [rbp-90h]
  const std::set<unsigned int> *quest_set_ptr_0; // [rsp+68h] [rbp-88h]
  const std::set<unsigned int> *__for_range_2; // [rsp+70h] [rbp-80h]
  const std::set<unsigned int> *__for_range_3; // [rsp+78h] [rbp-78h]
  const std::set<unsigned int> *quest_set_ptr; // [rsp+80h] [rbp-70h]
  const std::set<unsigned int> *__for_range_0; // [rsp+88h] [rbp-68h]
  char v45[96]; // [rsp+90h] [rbp-60h] BYREF

  v4 = (unsigned __int64)v45;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v5 = __asan_stack_malloc_0(64LL);
    if ( v5 )
      v4 = v5;
  }
  *(_QWORD *)v4 = 1102416563LL;
  *(_QWORD *)(v4 + 8) = "1 32 16 14 quest_ptr:4688";
  *(_QWORD *)(v4 + 16) = PlayerQuestComp::internalNotifyOccupiedQuest;
  v6 = v4 >> 3;
  *(_DWORD *)(v6 + 2147450880) = -235802127;
  *(_DWORD *)(v6 + 2147450884) = -202178560;
  __for_range = exclusive_place_id_vec;
  __for_begin._M_current = std::vector<unsigned int>::begin(exclusive_place_id_vec)._M_current;
  __for_end._M_current = std::vector<unsigned int>::end(exclusive_place_id_vec)._M_current;
  while ( __gnu_cxx::operator!=<unsigned int const*,std::vector<unsigned int>>(&__for_begin, &__for_end) )
  {
    v7 = (unsigned int *)__gnu_cxx::__normal_iterator<unsigned int const*,std::vector<unsigned int>>::operator*(&__for_begin);
    v8 = v7;
    if ( *(_BYTE *)(((unsigned __int64)v7 >> 3) + 0x7FFF8000) != 0
      && (char)(((unsigned __int8)v7 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)v7 >> 3) + 0x7FFF8000) )
    {
      __asan_report_load4(v7);
    }
    place_id = *v8;
    ServiceBox::findService<GameserverService>();
    GameserverService::getConfig((GameserverService *const)(v4 + 32));
    v9 = std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 32));
    quest_set_ptr = QuestExcelConfigMgr::findExclusivePlaceQuests(
                      &v9->design_config.txt_config_mgr.quest_config_mgr,
                      place_id);
    std::shared_ptr<Config>::~shared_ptr((std::shared_ptr<Config> *const)(v4 + 32));
    if ( quest_set_ptr )
    {
      __for_range_0 = quest_set_ptr;
      __for_begin_0._M_node = std::set<unsigned int>::begin(quest_set_ptr)._M_node;
      __for_end_0._M_node = std::set<unsigned int>::end(__for_range_0)._M_node;
      while ( std::operator!=(&__for_begin_0, &__for_end_0) )
      {
        v10 = (unsigned int *)std::_Rb_tree_const_iterator<unsigned int>::operator*(&__for_begin_0);
        v11 = (int *)v10;
        if ( *(_BYTE *)(((unsigned __int64)v10 >> 3) + 0x7FFF8000) != 0
          && (char)(((unsigned __int8)v10 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)v10 >> 3) + 0x7FFF8000) )
        {
          __asan_report_load4(v10);
        }
        PlayerQuestComp::findQuest((const PlayerQuestComp *const)(v4 + 32), (__int64)this, *v11);
        if ( std::operator!=<Quest>(0LL, (const std::shared_ptr<Quest> *)(v4 + 32)) )
        {
          v12 = std::__shared_ptr_access<Quest,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Quest,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 32));
          if ( Quest::getState(v12) == QUEST_STATE_UNSTARTED )
          {
            v14 = std::__shared_ptr_access<Quest,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Quest,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 32));
            Quest::notifyQuest(v14);
          }
        }
        std::shared_ptr<Quest>::~shared_ptr((std::shared_ptr<Quest> *const)(v4 + 32));
        std::_Rb_tree_const_iterator<unsigned int>::operator++(&__for_begin_0);
      }
    }
    __gnu_cxx::__normal_iterator<unsigned int const*,std::vector<unsigned int>>::operator++(&__for_begin);
  }
  __for_range_1 = exclusive_npc_id_vec;
  __for_begin._M_current = std::vector<unsigned int>::begin(exclusive_npc_id_vec)._M_current;
  __for_end._M_current = std::vector<unsigned int>::end(__for_range_1)._M_current;
  while ( __gnu_cxx::operator!=<unsigned int const*,std::vector<unsigned int>>(&__for_begin, &__for_end) )
  {
    v15 = (unsigned int *)__gnu_cxx::__normal_iterator<unsigned int const*,std::vector<unsigned int>>::operator*(&__for_begin);
    v16 = v15;
    if ( *(_BYTE *)(((unsigned __int64)v15 >> 3) + 0x7FFF8000) != 0
      && (char)(((unsigned __int8)v15 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)v15 >> 3) + 0x7FFF8000) )
    {
      __asan_report_load4(v15);
    }
    npc_id = *v16;
    ServiceBox::findService<GameserverService>();
    GameserverService::getConfig((GameserverService *const)(v4 + 32));
    v17 = std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 32));
    quest_set_ptr_0 = QuestExcelConfigMgr::findExclusiveNpcQuests(
                        &v17->design_config.txt_config_mgr.quest_config_mgr,
                        npc_id);
    std::shared_ptr<Config>::~shared_ptr((std::shared_ptr<Config> *const)(v4 + 32));
    if ( quest_set_ptr_0 )
    {
      __for_range_2 = quest_set_ptr_0;
      __for_begin_0._M_node = std::set<unsigned int>::begin(quest_set_ptr_0)._M_node;
      __for_end_0._M_node = std::set<unsigned int>::end(__for_range_2)._M_node;
      while ( std::operator!=(&__for_begin_0, &__for_end_0) )
      {
        v18 = (unsigned int *)std::_Rb_tree_const_iterator<unsigned int>::operator*(&__for_begin_0);
        v19 = (int *)v18;
        if ( *(_BYTE *)(((unsigned __int64)v18 >> 3) + 0x7FFF8000) != 0
          && (char)(((unsigned __int8)v18 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)v18 >> 3) + 0x7FFF8000) )
        {
          __asan_report_load4(v18);
        }
        PlayerQuestComp::findQuest((const PlayerQuestComp *const)(v4 + 32), (__int64)this, *v19);
        if ( std::operator!=<Quest>(0LL, (const std::shared_ptr<Quest> *)(v4 + 32)) )
        {
          v20 = std::__shared_ptr_access<Quest,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Quest,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 32));
          if ( Quest::getState(v20) == QUEST_STATE_UNSTARTED )
          {
            v22 = std::__shared_ptr_access<Quest,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Quest,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 32));
            Quest::notifyQuest(v22);
          }
        }
        std::shared_ptr<Quest>::~shared_ptr((std::shared_ptr<Quest> *const)(v4 + 32));
        std::_Rb_tree_const_iterator<unsigned int>::operator++(&__for_begin_0);
      }
    }
    ServiceBox::findService<GameserverService>();
    GameserverService::getConfig((GameserverService *const)(v4 + 32));
    v23 = std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 32));
    quest_set_ptr_0 = QuestExcelConfigMgr::findSharedNpcQuests(
                        &v23->design_config.txt_config_mgr.quest_config_mgr,
                        npc_id);
    std::shared_ptr<Config>::~shared_ptr((std::shared_ptr<Config> *const)(v4 + 32));
    if ( quest_set_ptr_0 )
    {
      __for_range_3 = quest_set_ptr_0;
      __for_begin_0._M_node = std::set<unsigned int>::begin(quest_set_ptr_0)._M_node;
      __for_end_0._M_node = std::set<unsigned int>::end(__for_range_3)._M_node;
      while ( std::operator!=(&__for_begin_0, &__for_end_0) )
      {
        v24 = (unsigned int *)std::_Rb_tree_const_iterator<unsigned int>::operator*(&__for_begin_0);
        v25 = (int *)v24;
        if ( *(_BYTE *)(((unsigned __int64)v24 >> 3) + 0x7FFF8000) != 0
          && (char)(((unsigned __int8)v24 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)v24 >> 3) + 0x7FFF8000) )
        {
          __asan_report_load4(v24);
        }
        PlayerQuestComp::findQuest((const PlayerQuestComp *const)(v4 + 32), (__int64)this, *v25);
        if ( std::operator!=<Quest>(0LL, (const std::shared_ptr<Quest> *)(v4 + 32)) )
        {
          v26 = std::__shared_ptr_access<Quest,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Quest,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 32));
          if ( Quest::getState(v26) == QUEST_STATE_UNSTARTED )
          {
            v28 = std::__shared_ptr_access<Quest,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Quest,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 32));
            Quest::notifyQuest(v28);
          }
        }
        std::shared_ptr<Quest>::~shared_ptr((std::shared_ptr<Quest> *const)(v4 + 32));
        std::_Rb_tree_const_iterator<unsigned int>::operator++(&__for_begin_0);
      }
    }
    __gnu_cxx::__normal_iterator<unsigned int const*,std::vector<unsigned int>>::operator++(&__for_begin);
  }
  result = 0;
  if ( v45 == (char *)v4 )
  {
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0LL;
  }
  else
  {
    *(_QWORD *)v4 = 1172321806LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 4744: range 0000000013DF4D7C-0000000013DF5239
int32_t __cdecl PlayerQuestComp::tryFailAndRemoveRandomParentQuest(
        PlayerQuestComp *const this,
        uint32_t parent_quest_id,
        bool is_notify)
{
  unsigned __int64 v3; // r12
  __int64 v4; // rax
  _DWORD *v5; // r13
  int32_t v6; // r14d
  ParentQuest *v7; // rax
  common::milog::MiLogStream *v8; // r14
  ParentQuest *v9; // rax
  std::tuple_element<1,const std::pair<unsigned int const,unsigned int> >::type *v10; // rax
  std::__shared_ptr_access<Quest,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v11; // rax
  Quest *v12; // rax
  bool v13; // cl
  int32_t result; // eax
  unsigned int val; // [rsp+14h] [rbp-10Ch] BYREF
  std::map<unsigned int,unsigned int>::const_iterator __for_begin; // [rsp+18h] [rbp-108h] BYREF
  std::map<unsigned int,unsigned int>::const_iterator __for_end; // [rsp+20h] [rbp-100h] BYREF
  const std::map<unsigned int,unsigned int> *quest_id_map; // [rsp+28h] [rbp-F8h]
  const std::map<unsigned int,unsigned int> *__for_range; // [rsp+30h] [rbp-F0h]
  const std::pair<unsigned int const,unsigned int> *v21; // [rsp+38h] [rbp-E8h]
  std::tuple_element<0,const std::pair<unsigned int const,unsigned int> >::type *config_id; // [rsp+40h] [rbp-E0h]
  std::tuple_element<1,const std::pair<unsigned int const,unsigned int> >::type *quest_id; // [rsp+48h] [rbp-D8h]
  common::milog::MiLogStream v24; // [rsp+50h] [rbp-D0h] BYREF
  char v25[176]; // [rsp+70h] [rbp-B0h] BYREF

  v3 = (unsigned __int64)v25;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_1(128LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "3 32 16 10 guard:4745 64 16 21 parent_quest_ptr:4746 96 16 14 quest_ptr:4761";
  *(_QWORD *)(v3 + 16) = PlayerQuestComp::tryFailAndRemoveRandomParentQuest;
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = -219021312;
  v5[536862722] = -219021312;
  v5[536862723] = -202178560;
  QuestOperatorGuard::QuestOperatorGuard((QuestOperatorGuard *const)(v3 + 32), &this->quest_op_);
  PlayerQuestComp::findParentQuest((const PlayerQuestComp *const)(v3 + 64), (__int64)this, parent_quest_id);
  if ( std::operator==<ParentQuest>((const std::shared_ptr<ParentQuest> *)(v3 + 64), 0LL) )
  {
    v6 = 0;
  }
  else
  {
    v7 = std::__shared_ptr_access<ParentQuest,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<ParentQuest,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 64));
    if ( !ParentQuest::isRandom(v7) )
    {
      common::milog::MiLogStream::create(
        &v24,
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/player/quest/player_quest_comp.cpp",
        "tryFailAndRemoveRandomParentQuest",
        4753);
      v8 = common::milog::MiLogStream::operator<<<char [36],(char *[36])0>(
             &v24,
             (const char (*)[36])"parent_talk_id is not Random, uid: ");
      if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
        __asan_report_load8(&this->player_);
      val = Player::getUid(this->player_);
      common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v8, &val);
      common::milog::MiLogStream::~MiLogStream(&v24);
      v6 = -1;
    }
    else
    {
      v9 = std::__shared_ptr_access<ParentQuest,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<ParentQuest,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 64));
      quest_id_map = ParentQuest::getRandomQuestIdMap(v9);
      __for_range = quest_id_map;
      __for_begin._M_node = std::map<unsigned int,unsigned int>::begin(quest_id_map)._M_node;
      __for_end._M_node = std::map<unsigned int,unsigned int>::end(quest_id_map)._M_node;
      while ( std::operator!=(&__for_begin, &__for_end) )
      {
        v21 = std::_Rb_tree_const_iterator<std::pair<unsigned int const,unsigned int>>::operator*(&__for_begin);
        config_id = std::get<0ul,unsigned int const,unsigned int>(v21);
        v10 = (std::tuple_element<1,const std::pair<unsigned int const,unsigned int> >::type *)std::get<1ul,unsigned int const,unsigned int>(v21);
        quest_id = v10;
        if ( *(_BYTE *)(((unsigned __int64)v10 >> 3) + 0x7FFF8000) != 0
          && (char)(((unsigned __int8)v10 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)v10 >> 3) + 0x7FFF8000) )
        {
          __asan_report_load4(v10);
        }
        PlayerQuestComp::findQuest((const PlayerQuestComp *const)(v3 + 96), (__int64)this, *quest_id);
        if ( std::operator!=<Quest>((const std::shared_ptr<Quest> *)(v3 + 96), 0LL) )
        {
          v11 = std::__shared_ptr_access<Quest,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Quest,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 96));
          if ( Quest::getState(v11) == QUEST_STATE_UNFINISHED )
          {
            v12 = std::__shared_ptr_access<Quest,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Quest,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 96));
            Quest::fail(v12, is_notify);
          }
          v13 = is_notify;
          if ( *(_BYTE *)(((unsigned __int64)quest_id >> 3) + 0x7FFF8000) != 0
            && (char)(((unsigned __int8)quest_id & 7) + 3) >= *(_BYTE *)(((unsigned __int64)quest_id >> 3) + 0x7FFF8000) )
          {
            __asan_report_load4(quest_id);
          }
          PlayerQuestComp::removeQuest(this, *quest_id, 4u, v13);
        }
        std::shared_ptr<Quest>::~shared_ptr((std::shared_ptr<Quest> *const)(v3 + 96));
        std::_Rb_tree_const_iterator<std::pair<unsigned int const,unsigned int>>::operator++(&__for_begin);
      }
      PlayerQuestComp::removeParentQuest(this, parent_quest_id, is_notify);
      v6 = 0;
    }
  }
  std::shared_ptr<ParentQuest>::~shared_ptr((std::shared_ptr<ParentQuest> *const)(v3 + 64));
  QuestOperatorGuard::~QuestOperatorGuard((QuestOperatorGuard *const)(v3 + 32));
  result = v6;
  if ( v25 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 4780: range 0000000013DF523A-0000000013DF5691
__int64 __fastcall PlayerQuestComp::updateQuestVarByClient(
        PlayerQuestComp *const this,
        uint32_t parent_quest_id,
        const std::vector<proto::QuestVarOp> *op_list)
{
  unsigned __int64 v3; // r13
  __int64 v4; // rax
  _DWORD *v5; // r12
  common::milog::MiLogStream *v6; // rax
  unsigned int v7; // r14d
  ParentQuest *v8; // r14
  uint32_t v9; // eax
  ParentQuest *v10; // r14
  __int64 result; // rax
  std::vector<unsigned int>::value_type __x; // [rsp+28h] [rbp-158h] BYREF
  int32_t ret; // [rsp+2Ch] [rbp-154h]
  std::vector<proto::QuestVarOp>::const_iterator __for_begin; // [rsp+30h] [rbp-150h] BYREF
  std::vector<proto::QuestVarOp>::const_iterator __for_end; // [rsp+38h] [rbp-148h] BYREF
  const std::vector<proto::QuestVarOp> *__for_range; // [rsp+40h] [rbp-140h]
  const proto::QuestVarOp *op; // [rsp+48h] [rbp-138h]
  common::milog::MiLogStream v19; // [rsp+50h] [rbp-130h] BYREF
  char v20[272]; // [rsp+70h] [rbp-110h] BYREF

  v3 = (unsigned __int64)v20;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_2(224LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "5 32 4 10 value:4792 48 4 20 parent_quest_id:4779 64 16 21 parent_quest_ptr:4781 96 24 15 index_"
                        "list:4787 160 24 15 value_list:4788";
  *(_QWORD *)(v3 + 16) = PlayerQuestComp::updateQuestVarByClient;
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = -234556924;
  v5[536862722] = -219021312;
  v5[536862723] = -234881024;
  v5[536862724] = -218959118;
  v5[536862725] = -218103808;
  v5[536862726] = -202116109;
  *(_DWORD *)(v3 + 48) = parent_quest_id;
  PlayerQuestComp::findParentQuest((const PlayerQuestComp *const)(v3 + 64), (__int64)this, *(_DWORD *)(v3 + 48));
  if ( std::operator==<ParentQuest>((const std::shared_ptr<ParentQuest> *)(v3 + 64), 0LL) )
  {
    common::milog::MiLogStream::create(
      &v19,
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/player/quest/player_quest_comp.cpp",
      "updateQuestVarByClient",
      4784);
    v6 = common::milog::MiLogStream::operator<<<char [45],(char *[45])0>(&v19, (const char (*)[45])byte_25167460);
    common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v6, (const unsigned int *)(v3 + 48));
    common::milog::MiLogStream::~MiLogStream(&v19);
    v7 = -1;
  }
  else
  {
    std::vector<unsigned int>::vector((std::vector<unsigned int> *const)(v3 + 96));
    std::vector<int>::vector((std::vector<int> *const)(v3 + 160));
    __for_range = op_list;
    __for_begin._M_current = std::vector<proto::QuestVarOp>::begin(op_list)._M_current;
    __for_end._M_current = std::vector<proto::QuestVarOp>::end(op_list)._M_current;
    while ( __gnu_cxx::operator!=<proto::QuestVarOp const*,std::vector<proto::QuestVarOp>>(&__for_begin, &__for_end) )
    {
      op = __gnu_cxx::__normal_iterator<proto::QuestVarOp const*,std::vector<proto::QuestVarOp>>::operator*(&__for_begin);
      __x = proto::QuestVarOp::index(op);
      std::vector<unsigned int>::push_back((std::vector<unsigned int> *const)(v3 + 96), &__x);
      *(_DWORD *)(v3 + 32) = proto::QuestVarOp::value(op);
      if ( proto::QuestVarOp::is_add(op) )
      {
        v8 = std::__shared_ptr_access<ParentQuest,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<ParentQuest,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 64));
        v9 = proto::QuestVarOp::index(op);
        *(_DWORD *)(v3 + 32) += ParentQuest::getQuestVar(v8, v9);
      }
      std::vector<int>::push_back((std::vector<int> *const)(v3 + 160), (const std::vector<int>::value_type *)(v3 + 32));
      __gnu_cxx::__normal_iterator<proto::QuestVarOp const*,std::vector<proto::QuestVarOp>>::operator++(&__for_begin);
    }
    v10 = std::__shared_ptr_access<ParentQuest,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<ParentQuest,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 64));
    Flag<SetQuestVarOption>::Flag((Flag<SetQuestVarOption> *const)(v3 + 32));
    ret = ParentQuest::setQuestVar(
            v10,
            (const std::vector<unsigned int> *)(v3 + 96),
            (const std::vector<int> *)(v3 + 160),
            *(Flag<SetQuestVarOption> *)(v3 + 32));
    if ( ret )
    {
      v7 = ret;
    }
    else
    {
      PlayerQuestComp::onQuestVarUpdate(this, *(_DWORD *)(v3 + 48), 1);
      v7 = 0;
    }
    std::vector<int>::~vector((std::vector<int> *const)(v3 + 160));
    std::vector<unsigned int>::~vector((std::vector<unsigned int> *const)(v3 + 96));
  }
  std::shared_ptr<ParentQuest>::~shared_ptr((std::shared_ptr<ParentQuest> *const)(v3 + 64));
  result = v7;
  if ( v20 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8010) = 0LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8018) = 0;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8018) = -168430091;
  }
  return result;
};

// Line 4810: range 0000000013DF5692-0000000013DF597A
__int64 __fastcall PlayerQuestComp::updateQuestVarByServer(
        PlayerQuestComp *const this,
        uint32_t parent_quest_id,
        uint32_t index,
        int32_t value,
        bool is_notify)
{
  unsigned __int64 v5; // r12
  __int64 v6; // rax
  _DWORD *v7; // r13
  common::milog::MiLogStream *v8; // rax
  unsigned int v9; // r14d
  ParentQuest *v10; // rax
  common::milog::MiLogStream *v11; // rax
  __int64 result; // rax
  common::milog::MiLogStream v16; // [rsp+20h] [rbp-B0h] BYREF
  char v17[144]; // [rsp+40h] [rbp-90h] BYREF

  v5 = (unsigned __int64)v17;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v6 = __asan_stack_malloc_1(96LL);
    if ( v6 )
      v5 = v6;
  }
  *(_QWORD *)v5 = 1102416563LL;
  *(_QWORD *)(v5 + 8) = "3 32 4 9 flag:4817 48 4 20 parent_quest_id:4809 64 16 21 parent_quest_ptr:4811";
  *(_QWORD *)(v5 + 16) = PlayerQuestComp::updateQuestVarByServer;
  v7 = (_DWORD *)(v5 >> 3);
  v7[536862720] = -235802127;
  v7[536862721] = -234556924;
  v7[536862722] = -202178560;
  *(_DWORD *)(v5 + 48) = parent_quest_id;
  PlayerQuestComp::findParentQuest((const PlayerQuestComp *const)(v5 + 64), (__int64)this, *(_DWORD *)(v5 + 48));
  if ( std::operator==<ParentQuest>((const std::shared_ptr<ParentQuest> *)(v5 + 64), 0LL) )
  {
    common::milog::MiLogStream::create(
      &v16,
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/player/quest/player_quest_comp.cpp",
      "updateQuestVarByServer",
      4814);
    v8 = common::milog::MiLogStream::operator<<<char [45],(char *[45])0>(&v16, (const char (*)[45])byte_25167460);
    common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v8, (const unsigned int *)(v5 + 48));
    common::milog::MiLogStream::~MiLogStream(&v16);
    v9 = -1;
  }
  else
  {
    Flag<SetQuestVarOption>::Flag((Flag<SetQuestVarOption> *const)(v5 + 32), is_add_seq);
    if ( is_notify )
      Flag<SetQuestVarOption>::setOption((Flag<SetQuestVarOption> *const)(v5 + 32), is_notify);
    v10 = std::__shared_ptr_access<ParentQuest,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<ParentQuest,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v5 + 64));
    if ( ParentQuest::setQuestVar(v10, index, value, *(Flag<SetQuestVarOption> *)(v5 + 32)) )
    {
      common::milog::MiLogStream::create(
        &v16,
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/player/quest/player_quest_comp.cpp",
        "updateQuestVarByServer",
        4822);
      v11 = common::milog::MiLogStream::operator<<<char [38],(char *[38])0>(&v16, (const char (*)[38])off_25167560);
      common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v11, (const unsigned int *)(v5 + 48));
      common::milog::MiLogStream::~MiLogStream(&v16);
      v9 = -1;
    }
    else
    {
      PlayerQuestComp::onQuestVarUpdate(this, *(_DWORD *)(v5 + 48), is_notify);
      v9 = 0;
    }
  }
  std::shared_ptr<ParentQuest>::~shared_ptr((std::shared_ptr<ParentQuest> *const)(v5 + 64));
  result = v9;
  if ( v17 == (char *)v5 )
  {
    *(_QWORD *)((v5 >> 3) + 0x7FFF8000) = 0LL;
    *(_DWORD *)((v5 >> 3) + 0x7FFF8008) = 0;
  }
  else
  {
    *(_QWORD *)v5 = 1172321806LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v5 >> 3) + 0x7FFF8008) = -168430091;
  }
  return result;
};

// Line 4830: range 0000000013DF597C-0000000013DF5C4D
__int64 __fastcall PlayerQuestComp::updateQuestVarByGm(
        PlayerQuestComp *const this,
        uint32_t parent_quest_id,
        uint32_t index,
        int32_t value)
{
  unsigned __int64 v4; // r12
  __int64 v5; // rax
  _DWORD *v6; // r13
  common::milog::MiLogStream *v7; // rax
  unsigned int v8; // r14d
  ParentQuest *v9; // r14
  common::milog::MiLogStream *v10; // rax
  __int64 result; // rax
  Flag<SetQuestVarOption> option; // [rsp+2Ch] [rbp-B4h] BYREF
  common::milog::MiLogStream v15; // [rsp+30h] [rbp-B0h] BYREF
  char v16[144]; // [rsp+50h] [rbp-90h] BYREF

  v4 = (unsigned __int64)v16;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v5 = __asan_stack_malloc_1(96LL);
    if ( v5 )
      v4 = v5;
  }
  *(_QWORD *)v4 = 1102416563LL;
  *(_QWORD *)(v4 + 8) = "2 48 4 20 parent_quest_id:4829 64 16 21 parent_quest_ptr:4831";
  *(_QWORD *)(v4 + 16) = PlayerQuestComp::updateQuestVarByGm;
  v6 = (_DWORD *)(v4 >> 3);
  v6[536862720] = -235802127;
  v6[536862721] = -234556943;
  v6[536862722] = -202178560;
  *(_DWORD *)(v4 + 48) = parent_quest_id;
  PlayerQuestComp::findParentQuest((const PlayerQuestComp *const)(v4 + 64), (__int64)this, *(_DWORD *)(v4 + 48));
  if ( std::operator==<ParentQuest>((const std::shared_ptr<ParentQuest> *)(v4 + 64), 0LL) )
  {
    common::milog::MiLogStream::create(
      &v15,
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/player/quest/player_quest_comp.cpp",
      "updateQuestVarByGm",
      4834);
    v7 = common::milog::MiLogStream::operator<<<char [45],(char *[45])0>(&v15, (const char (*)[45])byte_25167460);
    common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v7, (const unsigned int *)(v4 + 48));
    common::milog::MiLogStream::~MiLogStream(&v15);
    v8 = -1;
  }
  else
  {
    v9 = std::__shared_ptr_access<ParentQuest,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<ParentQuest,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 64));
    Flag<SetQuestVarOption>::Flag(&option, is_notify, is_add_seq);
    if ( ParentQuest::setQuestVar(v9, index, value, option) )
    {
      common::milog::MiLogStream::create(
        &v15,
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/player/quest/player_quest_comp.cpp",
        "updateQuestVarByGm",
        4839);
      v10 = common::milog::MiLogStream::operator<<<char [38],(char *[38])0>(&v15, (const char (*)[38])off_25167560);
      common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v10, (const unsigned int *)(v4 + 48));
      common::milog::MiLogStream::~MiLogStream(&v15);
      v8 = -1;
    }
    else
    {
      PlayerQuestComp::onQuestVarUpdate(this, *(_DWORD *)(v4 + 48), 1);
      v8 = 0;
    }
  }
  std::shared_ptr<ParentQuest>::~shared_ptr((std::shared_ptr<ParentQuest> *const)(v4 + 64));
  result = v8;
  if ( v16 == (char *)v4 )
  {
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0LL;
    *(_DWORD *)((v4 >> 3) + 0x7FFF8008) = 0;
  }
  else
  {
    *(_QWORD *)v4 = 1172321806LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v4 >> 3) + 0x7FFF8008) = -168430091;
  }
  return result;
};

// Line 4847: range 0000000013DF5C4E-0000000013DF60DE
int32_t __cdecl PlayerQuestComp::rollbackQuestVar(
        PlayerQuestComp *const this,
        uint32_t quest_id,
        const std::vector<int> *quest_var_vec,
        bool is_notify)
{
  unsigned __int64 v4; // r13
  __int64 v5; // rax
  _DWORD *v6; // r12
  common::milog::MiLogStream *v7; // rax
  int32_t v8; // r14d
  __gnu_cxx::__alloc_traits<std::allocator<int>,int>::value_type *v9; // rax
  int *v10; // rdx
  const std::vector<int>::value_type *v11; // rax
  ParentQuest *v12; // rax
  ParentQuest *v13; // rax
  int32_t result; // eax
  int32_t i; // [rsp+28h] [rbp-138h]
  int32_t ret; // [rsp+2Ch] [rbp-134h]
  common::milog::MiLogStream v19; // [rsp+30h] [rbp-130h] BYREF
  char v20[272]; // [rsp+50h] [rbp-110h] BYREF

  v4 = (unsigned __int64)v20;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v5 = __asan_stack_malloc_2(224LL);
    if ( v5 )
      v4 = v5;
  }
  *(_QWORD *)v4 = 1102416563LL;
  *(_QWORD *)(v4 + 8) = "5 32 4 20 parent_quest_id:4848 48 4 9 flag:4869 64 16 21 parent_quest_ptr:4849 96 24 15 index_li"
                        "st:4855 160 24 15 value_list:4856";
  *(_QWORD *)(v4 + 16) = PlayerQuestComp::rollbackQuestVar;
  v6 = (_DWORD *)(v4 >> 3);
  v6[536862720] = -235802127;
  v6[536862721] = -234556924;
  v6[536862722] = -219021312;
  v6[536862723] = -234881024;
  v6[536862724] = -218959118;
  v6[536862725] = -218103808;
  v6[536862726] = -202116109;
  *(_DWORD *)(v4 + 32) = PlayerQuestComp::findParentQuestId(this, quest_id);
  PlayerQuestComp::findParentQuest((const PlayerQuestComp *const)(v4 + 64), (__int64)this, *(_DWORD *)(v4 + 32));
  if ( std::operator==<ParentQuest>((const std::shared_ptr<ParentQuest> *)(v4 + 64), 0LL) )
  {
    common::milog::MiLogStream::create(
      &v19,
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/player/quest/player_quest_comp.cpp",
      "rollbackQuestVar",
      4852);
    v7 = common::milog::MiLogStream::operator<<<char [45],(char *[45])0>(&v19, (const char (*)[45])byte_25167460);
    common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v7, (const unsigned int *)(v4 + 32));
    common::milog::MiLogStream::~MiLogStream(&v19);
    v8 = -1;
  }
  else
  {
    std::vector<unsigned int>::vector((std::vector<unsigned int> *const)(v4 + 96));
    std::vector<int>::vector((std::vector<int> *const)(v4 + 160));
    for ( i = 0; i < std::vector<int>::size(quest_var_vec); ++i )
    {
      *(_DWORD *)(v4 + 48) = i;
      std::vector<unsigned int>::push_back(
        (std::vector<unsigned int> *const)(v4 + 96),
        (std::vector<unsigned int>::value_type *)(v4 + 48));
      v9 = (__gnu_cxx::__alloc_traits<std::allocator<int>,int>::value_type *)std::vector<int>::operator[](
                                                                               quest_var_vec,
                                                                               i);
      v10 = v9;
      if ( *(_BYTE *)(((unsigned __int64)v9 >> 3) + 0x7FFF8000) != 0
        && (char)(((unsigned __int8)v9 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)v9 >> 3) + 0x7FFF8000) )
      {
        __asan_report_load4(v9);
      }
      if ( *v10 < 0 )
      {
        v12 = std::__shared_ptr_access<ParentQuest,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<ParentQuest,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 64));
        *(_DWORD *)(v4 + 48) = ParentQuest::getQuestVar(v12, i);
        std::vector<int>::push_back((std::vector<int> *const)(v4 + 160), (std::vector<int>::value_type *)(v4 + 48));
      }
      else
      {
        v11 = std::vector<int>::operator[](quest_var_vec, i);
        std::vector<int>::push_back((std::vector<int> *const)(v4 + 160), v11);
      }
    }
    Flag<SetQuestVarOption>::Flag((Flag<SetQuestVarOption> *const)(v4 + 48), is_add_seq);
    if ( is_notify )
      Flag<SetQuestVarOption>::setOption((Flag<SetQuestVarOption> *const)(v4 + 48), is_notify);
    v13 = std::__shared_ptr_access<ParentQuest,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<ParentQuest,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 64));
    ret = ParentQuest::setQuestVar(
            v13,
            (const std::vector<unsigned int> *)(v4 + 96),
            (const std::vector<int> *)(v4 + 160),
            *(Flag<SetQuestVarOption> *)(v4 + 48));
    if ( ret )
    {
      v8 = ret;
    }
    else
    {
      PlayerQuestComp::onQuestVarUpdate(this, *(_DWORD *)(v4 + 32), is_notify);
      v8 = 0;
    }
    std::vector<int>::~vector((std::vector<int> *const)(v4 + 160));
    std::vector<unsigned int>::~vector((std::vector<unsigned int> *const)(v4 + 96));
  }
  std::shared_ptr<ParentQuest>::~shared_ptr((std::shared_ptr<ParentQuest> *const)(v4 + 64));
  result = v8;
  if ( v20 == (char *)v4 )
  {
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8008) = 0LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8010) = 0LL;
    *(_DWORD *)((v4 >> 3) + 0x7FFF8018) = 0;
  }
  else
  {
    *(_QWORD *)v4 = 1172321806LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v4 >> 3) + 0x7FFF8018) = -168430091;
  }
  return result;
};

// Line 4883: range 0000000013DF60E0-0000000013DF6130
void __cdecl PlayerQuestComp::afterQuestOpProcessed(PlayerQuestComp *const this)
{
  PlayerAvatarComp *AvatarComp; // rax

  if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
    __asan_report_load8(&this->player_);
  AvatarComp = Player::getAvatarComp(this->player_);
  PlayerAvatarComp::checkAndClearInvalidTrialAvatar(AvatarComp, 1);
};

// Line 4889: range 0000000013DF6132-0000000013DF6148
bool __cdecl PlayerQuestComp::isRandomParentQuest(const PlayerQuestComp *const this, uint32_t parent_quest_id)
{
  return parent_quest_id > 0x1869F;
};

// Line 4894: range 0000000013DF614A-0000000013DF6160
bool __cdecl PlayerQuestComp::isRandomQuest(const PlayerQuestComp *const this, uint32_t quest_id)
{
  return quest_id > 0x98967F;
};

// Line 4899: range 0000000013DF6162-0000000013DF61AF
bool __cdecl PlayerQuestComp::isMovePosOnLogin(const PlayerQuestComp *const this)
{
  if ( *(char *)(((unsigned __int64)&this->is_move_pos_on_login_ >> 3) + 0x7FFF8000) < 0 )
    __asan_report_load1(&this->is_move_pos_on_login_);
  return this->is_move_pos_on_login_;
};

// Line 4904: range 0000000013DF61B0-0000000013DF6206
void __cdecl PlayerQuestComp::setIsMovePosOnLogin(PlayerQuestComp *const this, bool is_move_pos)
{
  char v2; // al
  bool v3; // cl

  v2 = *(_BYTE *)(((unsigned __int64)&this->is_move_pos_on_login_ >> 3) + 0x7FFF8000);
  if ( v2 < 0 )
  {
    v3 = v2 != 0;
    __asan_report_store1(&this->is_move_pos_on_login_, is_move_pos, &this->is_move_pos_on_login_, v3);
  }
  this->is_move_pos_on_login_ = is_move_pos;
};

// Line 4909: range 0000000013DF6208-0000000013DF6259
ScenePtr __cdecl PlayerQuestComp::getMoveScene(const PlayerQuestComp *const this)
{
  __int64 v1; // rsi
  ScenePtr result; // rax

  if ( *(_WORD *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store16(this, v1, v1 + 872);
  result = std::weak_ptr<Scene>::lock((const std::weak_ptr<Scene> *const)this);
  result._M_ptr = (std::__shared_ptr<Scene,(__gnu_cxx::_Lock_policy)2>::element_type *)this;
  return result;
};

// Line 4914: range 0000000013DF625A-0000000013DF626D
const Vector3 *__cdecl PlayerQuestComp::getMovePos(const PlayerQuestComp *const this)
{
  return &this->move_pos_;
};

// Line 4919: range 0000000013DF626E-0000000013DF6281
const Vector3 *__cdecl PlayerQuestComp::getMoveRot(const PlayerQuestComp *const this)
{
  return &this->move_rot_;
};

// Line 4925: range 0000000013DF6282-0000000013DF66C5
void __cdecl PlayerQuestComp::registerEventQuestMap(
        PlayerQuestComp *const this,
        const data::QuestExcelConfig *quest_config)
{
  int *v2; // rax
  int *v3; // rdx
  std::set<unsigned int> *v4; // rax
  std::set<unsigned int> *v5; // rax
  std::vector<data::QuestContent> *i; // rbx
  std::unordered_map<unsigned int,std::set<unsigned int>>::key_type __k; // [rsp+10h] [rbp-E0h] BYREF
  int item_id; // [rsp+14h] [rbp-DCh]
  std::vector<data::QuestContent>::const_iterator __for_begin_0; // [rsp+18h] [rbp-D8h] BYREF
  std::vector<data::QuestContent>::const_iterator __for_end_0; // [rsp+20h] [rbp-D0h] BYREF
  std::vector<int>::const_iterator __for_begin_1; // [rsp+28h] [rbp-C8h] BYREF
  std::vector<int>::const_iterator __for_end_1; // [rsp+30h] [rbp-C0h] BYREF
  std::initializer_list<std::vector<data::QuestContent> >::const_iterator __for_begin; // [rsp+38h] [rbp-B8h]
  std::initializer_list<std::vector<data::QuestContent> > *__for_range; // [rsp+40h] [rbp-B0h]
  std::initializer_list<std::vector<data::QuestContent> >::const_iterator __for_end; // [rsp+48h] [rbp-A8h]
  const std::vector<data::QuestContent> *quest_content_vec; // [rsp+50h] [rbp-A0h]
  const std::vector<data::QuestContent> *__for_range_0; // [rsp+58h] [rbp-98h]
  const data::QuestContent *quest_content; // [rsp+60h] [rbp-90h]
  const std::vector<int> *__for_range_1; // [rsp+68h] [rbp-88h]
  std::initializer_list<std::vector<data::QuestContent> > v20; // [rsp+70h] [rbp-80h] BYREF
  common::milog::MiLogStream v21; // [rsp+80h] [rbp-70h] BYREF
  std::vector<data::QuestContent> v22; // [rsp+A0h] [rbp-50h] BYREF
  std::vector<data::QuestContent> v23; // [rsp+B8h] [rbp-38h] BYREF
  __int64 v24; // [rsp+D0h] [rbp-20h] BYREF

  v20._M_len = 2LL;
  std::vector<data::QuestContent>::vector(&v22, &quest_config->finish_cond);
  std::vector<data::QuestContent>::vector(&v23, &quest_config->fail_cond);
  v20._M_array = &v22;
  __for_range = &v20;
  __for_begin = std::initializer_list<std::vector<data::QuestContent>>::begin(&v20);
  __for_end = std::initializer_list<std::vector<data::QuestContent>>::end(&v20);
  while ( __for_begin != __for_end )
  {
    quest_content_vec = __for_begin;
    __for_range_0 = __for_begin;
    __for_begin_0._M_current = std::vector<data::QuestContent>::begin(__for_begin)._M_current;
    __for_end_0._M_current = std::vector<data::QuestContent>::end(__for_range_0)._M_current;
    while ( __gnu_cxx::operator!=<data::QuestContent const*,std::vector<data::QuestContent>>(
              &__for_begin_0,
              &__for_end_0) )
    {
      quest_content = __gnu_cxx::__normal_iterator<data::QuestContent const*,std::vector<data::QuestContent>>::operator*(&__for_begin_0);
      if ( *(_BYTE *)(((unsigned __int64)&quest_content->type >> 3) + 0x7FFF8000) != 0
        && *(_BYTE *)(((unsigned __int64)&quest_content->type >> 3) + 0x7FFF8000) <= 3 )
      {
        __asan_report_load4(&quest_content->type);
      }
      if ( PlayerQuestComp::isQuestContentItemRelated(this, quest_content->type) )
      {
        if ( !std::vector<int>::size(&quest_content->param) )
        {
          common::milog::MiLogStream::create(
            &v21,
            &common::milog::MiLogDefault::default_log_obj_,
            3u,
            "./src/player/quest/player_quest_comp.cpp",
            "registerEventQuestMap",
            4934);
          common::milog::MiLogStream::operator<<<char [59],(char *[59])0>(
            &v21,
            (const char (*)[59])"item releated quest_content param size should not be empty");
          common::milog::MiLogStream::~MiLogStream(&v21);
          goto LABEL_18;
        }
        __for_range_1 = &quest_content->param;
        __for_begin_1._M_current = std::vector<int>::begin(&quest_content->param)._M_current;
        __for_end_1._M_current = std::vector<int>::end(__for_range_1)._M_current;
        while ( __gnu_cxx::operator!=<int const*,std::vector<int>>(&__for_begin_1, &__for_end_1) )
        {
          v2 = (int *)__gnu_cxx::__normal_iterator<int const*,std::vector<int>>::operator*(&__for_begin_1);
          v3 = v2;
          if ( *(_BYTE *)(((unsigned __int64)v2 >> 3) + 0x7FFF8000) != 0
            && (char)(((unsigned __int8)v2 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)v2 >> 3) + 0x7FFF8000) )
          {
            __asan_report_load4(v2);
          }
          item_id = *v3;
          __k = item_id;
          v4 = std::unordered_map<unsigned int,std::set<unsigned int>>::operator[](&this->item_event_quest_map_, &__k);
          std::set<unsigned int>::insert(v4, &quest_config->sub_id);
          __gnu_cxx::__normal_iterator<int const*,std::vector<int>>::operator++(&__for_begin_1);
        }
      }
      else
      {
        v5 = std::map<data::QuestContentType,std::set<unsigned int>>::operator[](
               &this->event_quest_map_,
               &quest_content->type);
        std::set<unsigned int>::insert(v5, &quest_config->sub_id);
      }
      __gnu_cxx::__normal_iterator<data::QuestContent const*,std::vector<data::QuestContent>>::operator++(&__for_begin_0);
    }
    ++__for_begin;
  }
LABEL_18:
  for ( i = (std::vector<data::QuestContent> *)&v24; i != &v22; std::vector<data::QuestContent>::~vector(i) )
    --i;
};

// Line 4952: range 0000000013DF66C6-0000000013DF6B09
void __cdecl PlayerQuestComp::unregisterEventQuestMap(
        PlayerQuestComp *const this,
        const data::QuestExcelConfig *quest_config)
{
  int *v2; // rax
  int *v3; // rdx
  std::set<unsigned int> *v4; // rax
  std::set<unsigned int> *v5; // rax
  std::vector<data::QuestContent> *i; // rbx
  std::unordered_map<unsigned int,std::set<unsigned int>>::key_type __k; // [rsp+10h] [rbp-E0h] BYREF
  int item_id; // [rsp+14h] [rbp-DCh]
  std::vector<data::QuestContent>::const_iterator __for_begin_0; // [rsp+18h] [rbp-D8h] BYREF
  std::vector<data::QuestContent>::const_iterator __for_end_0; // [rsp+20h] [rbp-D0h] BYREF
  std::vector<int>::const_iterator __for_begin_1; // [rsp+28h] [rbp-C8h] BYREF
  std::vector<int>::const_iterator __for_end_1; // [rsp+30h] [rbp-C0h] BYREF
  std::initializer_list<std::vector<data::QuestContent> >::const_iterator __for_begin; // [rsp+38h] [rbp-B8h]
  std::initializer_list<std::vector<data::QuestContent> > *__for_range; // [rsp+40h] [rbp-B0h]
  std::initializer_list<std::vector<data::QuestContent> >::const_iterator __for_end; // [rsp+48h] [rbp-A8h]
  const std::vector<data::QuestContent> *quest_content_vec; // [rsp+50h] [rbp-A0h]
  const std::vector<data::QuestContent> *__for_range_0; // [rsp+58h] [rbp-98h]
  const data::QuestContent *quest_content; // [rsp+60h] [rbp-90h]
  const std::vector<int> *__for_range_1; // [rsp+68h] [rbp-88h]
  std::initializer_list<std::vector<data::QuestContent> > v20; // [rsp+70h] [rbp-80h] BYREF
  common::milog::MiLogStream v21; // [rsp+80h] [rbp-70h] BYREF
  std::vector<data::QuestContent> v22; // [rsp+A0h] [rbp-50h] BYREF
  std::vector<data::QuestContent> v23; // [rsp+B8h] [rbp-38h] BYREF
  __int64 v24; // [rsp+D0h] [rbp-20h] BYREF

  v20._M_len = 2LL;
  std::vector<data::QuestContent>::vector(&v22, &quest_config->finish_cond);
  std::vector<data::QuestContent>::vector(&v23, &quest_config->fail_cond);
  v20._M_array = &v22;
  __for_range = &v20;
  __for_begin = std::initializer_list<std::vector<data::QuestContent>>::begin(&v20);
  __for_end = std::initializer_list<std::vector<data::QuestContent>>::end(&v20);
  while ( __for_begin != __for_end )
  {
    quest_content_vec = __for_begin;
    __for_range_0 = __for_begin;
    __for_begin_0._M_current = std::vector<data::QuestContent>::begin(__for_begin)._M_current;
    __for_end_0._M_current = std::vector<data::QuestContent>::end(__for_range_0)._M_current;
    while ( __gnu_cxx::operator!=<data::QuestContent const*,std::vector<data::QuestContent>>(
              &__for_begin_0,
              &__for_end_0) )
    {
      quest_content = __gnu_cxx::__normal_iterator<data::QuestContent const*,std::vector<data::QuestContent>>::operator*(&__for_begin_0);
      if ( *(_BYTE *)(((unsigned __int64)&quest_content->type >> 3) + 0x7FFF8000) != 0
        && *(_BYTE *)(((unsigned __int64)&quest_content->type >> 3) + 0x7FFF8000) <= 3 )
      {
        __asan_report_load4(&quest_content->type);
      }
      if ( PlayerQuestComp::isQuestContentItemRelated(this, quest_content->type) )
      {
        if ( !std::vector<int>::size(&quest_content->param) )
        {
          common::milog::MiLogStream::create(
            &v21,
            &common::milog::MiLogDefault::default_log_obj_,
            3u,
            "./src/player/quest/player_quest_comp.cpp",
            "unregisterEventQuestMap",
            4961);
          common::milog::MiLogStream::operator<<<char [59],(char *[59])0>(
            &v21,
            (const char (*)[59])"item releated quest_content param size should not be empty");
          common::milog::MiLogStream::~MiLogStream(&v21);
          goto LABEL_18;
        }
        __for_range_1 = &quest_content->param;
        __for_begin_1._M_current = std::vector<int>::begin(&quest_content->param)._M_current;
        __for_end_1._M_current = std::vector<int>::end(__for_range_1)._M_current;
        while ( __gnu_cxx::operator!=<int const*,std::vector<int>>(&__for_begin_1, &__for_end_1) )
        {
          v2 = (int *)__gnu_cxx::__normal_iterator<int const*,std::vector<int>>::operator*(&__for_begin_1);
          v3 = v2;
          if ( *(_BYTE *)(((unsigned __int64)v2 >> 3) + 0x7FFF8000) != 0
            && (char)(((unsigned __int8)v2 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)v2 >> 3) + 0x7FFF8000) )
          {
            __asan_report_load4(v2);
          }
          item_id = *v3;
          __k = item_id;
          v4 = std::unordered_map<unsigned int,std::set<unsigned int>>::operator[](&this->item_event_quest_map_, &__k);
          std::set<unsigned int>::erase(v4, &quest_config->sub_id);
          __gnu_cxx::__normal_iterator<int const*,std::vector<int>>::operator++(&__for_begin_1);
        }
      }
      else
      {
        v5 = std::map<data::QuestContentType,std::set<unsigned int>>::operator[](
               &this->event_quest_map_,
               &quest_content->type);
        std::set<unsigned int>::erase(v5, &quest_config->sub_id);
      }
      __gnu_cxx::__normal_iterator<data::QuestContent const*,std::vector<data::QuestContent>>::operator++(&__for_begin_0);
    }
    ++__for_begin;
  }
LABEL_18:
  for ( i = (std::vector<data::QuestContent> *)&v24; i != &v22; std::vector<data::QuestContent>::~vector(i) )
    --i;
};

// Line 4979: range 0000000013DF6B0A-0000000013DF6E27
void __cdecl PlayerQuestComp::registerOccupiedNpc(
        PlayerQuestComp *const this,
        const data::QuestExcelConfig *quest_config)
{
  unsigned __int64 v2; // rbx
  __int64 v3; // rax
  unsigned __int64 v4; // r12
  __gnu_cxx::__normal_iterator<unsigned int const*,std::vector<unsigned int> >::reference v5; // rax
  _DWORD *v6; // rdx
  std::pair<std::_Rb_tree_const_iterator<unsigned int>,bool> v7; // rax
  common::milog::MiLogStream *v8; // rax
  common::milog::MiLogStream *v9; // rax
  common::milog::MiLogStream *v10; // rax
  common::milog::MiLogStream *v11; // rax
  common::milog::MiLogStream *v12; // rax
  std::vector<unsigned int>::const_iterator __for_begin; // [rsp+10h] [rbp-A0h] BYREF
  std::vector<unsigned int>::const_iterator __for_end; // [rsp+18h] [rbp-98h] BYREF
  const std::vector<unsigned int> *__for_range; // [rsp+20h] [rbp-90h]
  std::set<unsigned int> *quest_id_set; // [rsp+28h] [rbp-88h]
  common::milog::MiLogStream v17; // [rsp+30h] [rbp-80h] BYREF
  char v18[96]; // [rsp+50h] [rbp-60h] BYREF

  v2 = (unsigned __int64)v18;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_0(64LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "1 32 4 11 npc_id:4980";
  *(_QWORD *)(v2 + 16) = PlayerQuestComp::registerOccupiedNpc;
  v4 = v2 >> 3;
  *(_DWORD *)(v4 + 2147450880) = -235802127;
  *(_DWORD *)(v4 + 2147450884) = -202116348;
  __for_range = &quest_config->exclusive_npc_list;
  __for_begin._M_current = std::vector<unsigned int>::begin(&quest_config->exclusive_npc_list)._M_current;
  __for_end._M_current = std::vector<unsigned int>::end(&quest_config->exclusive_npc_list)._M_current;
  while ( __gnu_cxx::operator!=<unsigned int const*,std::vector<unsigned int>>(&__for_begin, &__for_end) )
  {
    v5 = __gnu_cxx::__normal_iterator<unsigned int const*,std::vector<unsigned int>>::operator*(&__for_begin);
    v6 = v5;
    if ( *(_BYTE *)(((unsigned __int64)v5 >> 3) + 0x7FFF8000) != 0
      && (char)(((unsigned __int8)v5 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)v5 >> 3) + 0x7FFF8000) )
    {
      __asan_report_load4(v5);
    }
    *(_DWORD *)(v2 + 32) = *v6;
    quest_id_set = std::map<unsigned int,std::set<unsigned int>>::operator[](
                     &this->occupied_npc_map_,
                     (const std::map<unsigned int,std::set<unsigned int>>::key_type *)(v2 + 32));
    v7 = std::set<unsigned int>::insert(quest_id_set, &quest_config->sub_id);
    if ( !v7.second )
    {
      common::milog::MiLogStream::create(
        &v17,
        &common::milog::MiLogDefault::default_log_obj_,
        4u,
        "./src/player/quest/player_quest_comp.cpp",
        "registerOccupiedNpc",
        4985);
      v8 = common::milog::MiLogStream::operator<<<char [25],(char *[25])0>(
             &v17,
             (const char (*)[25])"duplicate occupy npc_id:");
      v9 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v8, (const unsigned int *)(v2 + 32));
      v10 = common::milog::MiLogStream::operator<<<char [11],(char *[11])0>(v9, (const char (*)[11])" quest_id:");
    }
    else
    {
      common::milog::MiLogStream::create(
        &v17,
        &common::milog::MiLogDefault::default_log_obj_,
        1u,
        "./src/player/quest/player_quest_comp.cpp",
        "registerOccupiedNpc",
        4988);
      v11 = common::milog::MiLogStream::operator<<<char [17],(char *[17])0>(
              &v17,
              (const char (*)[17])"register npc_id:");
      v12 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v11, (const unsigned int *)(v2 + 32));
      v10 = common::milog::MiLogStream::operator<<<char [14],(char *[14])0>(v12, (const char (*)[14])off_251678E0);
    }
    common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v10, &quest_config->sub_id);
    common::milog::MiLogStream::~MiLogStream(&v17);
    __gnu_cxx::__normal_iterator<unsigned int const*,std::vector<unsigned int>>::operator++(&__for_begin);
  }
  if ( v18 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
  }
};

// Line 4994: range 0000000013DF6E28-0000000013DF7232
void __cdecl PlayerQuestComp::unregisterOccupiedNpc(
        PlayerQuestComp *const this,
        const data::QuestExcelConfig *quest_config,
        bool is_by_remove)
{
  unsigned __int64 v3; // rbx
  __int64 v4; // rax
  unsigned __int64 v5; // r12
  __gnu_cxx::__normal_iterator<unsigned int const*,std::vector<unsigned int> >::reference v6; // rax
  _DWORD *v7; // rdx
  common::milog::MiLogStream *v9; // rax
  common::milog::MiLogStream *v10; // rax
  common::milog::MiLogStream *v11; // rax
  common::milog::MiLogStream *v12; // rax
  common::milog::MiLogStream *v13; // rax
  common::milog::MiLogStream *v14; // rax
  common::milog::MiLogStream *v15; // rax
  common::milog::MiLogStream *v16; // rax
  std::vector<unsigned int>::const_iterator __for_begin; // [rsp+20h] [rbp-A0h] BYREF
  std::vector<unsigned int>::const_iterator __for_end; // [rsp+28h] [rbp-98h] BYREF
  const std::vector<unsigned int> *__for_range; // [rsp+30h] [rbp-90h]
  std::set<unsigned int> *quest_id_set; // [rsp+38h] [rbp-88h]
  common::milog::MiLogStream v22; // [rsp+40h] [rbp-80h] BYREF
  char v23[96]; // [rsp+60h] [rbp-60h] BYREF

  v3 = (unsigned __int64)v23;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_0(64LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "1 32 4 11 npc_id:4995";
  *(_QWORD *)(v3 + 16) = PlayerQuestComp::unregisterOccupiedNpc;
  v5 = v3 >> 3;
  *(_DWORD *)(v5 + 2147450880) = -235802127;
  *(_DWORD *)(v5 + 2147450884) = -202116348;
  __for_range = &quest_config->exclusive_npc_list;
  __for_begin._M_current = std::vector<unsigned int>::begin(&quest_config->exclusive_npc_list)._M_current;
  __for_end._M_current = std::vector<unsigned int>::end(&quest_config->exclusive_npc_list)._M_current;
  while ( __gnu_cxx::operator!=<unsigned int const*,std::vector<unsigned int>>(&__for_begin, &__for_end) )
  {
    v6 = __gnu_cxx::__normal_iterator<unsigned int const*,std::vector<unsigned int>>::operator*(&__for_begin);
    v7 = v6;
    if ( *(_BYTE *)(((unsigned __int64)v6 >> 3) + 0x7FFF8000) != 0
      && (char)(((unsigned __int8)v6 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)v6 >> 3) + 0x7FFF8000) )
    {
      __asan_report_load4(v6);
    }
    *(_DWORD *)(v3 + 32) = *v7;
    quest_id_set = std::map<unsigned int,std::set<unsigned int>>::operator[](
                     &this->occupied_npc_map_,
                     (const std::map<unsigned int,std::set<unsigned int>>::key_type *)(v3 + 32));
    if ( !common::tools::MiscUtils::isContains<std::set<unsigned int>,unsigned int>(quest_id_set, &quest_config->sub_id)
      && !is_by_remove )
    {
      common::milog::MiLogStream::create(
        &v22,
        &common::milog::MiLogDefault::default_log_obj_,
        1u,
        "./src/player/quest/player_quest_comp.cpp",
        "unregisterOccupiedNpc",
        5000);
      v9 = common::milog::MiLogStream::operator<<<char [8],(char *[8])0>(&v22, (const char (*)[8])"npc_id:");
      v10 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v9, (const unsigned int *)(v3 + 32));
      v11 = common::milog::MiLogStream::operator<<<char [22],(char *[22])0>(
              v10,
              (const char (*)[22])" not found. quest_id:");
    }
    else
    {
      std::set<unsigned int>::erase(quest_id_set, &quest_config->sub_id);
      common::milog::MiLogStream::create(
        &v22,
        &common::milog::MiLogDefault::default_log_obj_,
        1u,
        "./src/player/quest/player_quest_comp.cpp",
        "unregisterOccupiedNpc",
        5004);
      v12 = common::milog::MiLogStream::operator<<<char [19],(char *[19])0>(
              &v22,
              (const char (*)[19])"unregister npc_id:");
      v13 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v12, (const unsigned int *)(v3 + 32));
      v11 = common::milog::MiLogStream::operator<<<char [14],(char *[14])0>(v13, (const char (*)[14])off_251678E0);
    }
    common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v11, &quest_config->sub_id);
    common::milog::MiLogStream::~MiLogStream(&v22);
    __gnu_cxx::__normal_iterator<unsigned int const*,std::vector<unsigned int>>::operator++(&__for_begin);
  }
  common::milog::MiLogStream::create(
    &v22,
    &common::milog::MiLogDefault::default_log_obj_,
    1u,
    "./src/player/quest/player_quest_comp.cpp",
    "unregisterOccupiedNpc",
    5006);
  v14 = common::milog::MiLogStream::operator<<<char [36],(char *[36])0>(
          &v22,
          (const char (*)[36])"unregister npc called  by quest_id:");
  v15 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v14, &quest_config->sub_id);
  v16 = common::milog::MiLogStream::operator<<<char [11],(char *[11])0>(v15, (const char (*)[11])" npc list:");
  common::milog::MiLogStream::operator<<<unsigned int>(v16, &quest_config->exclusive_npc_list);
  common::milog::MiLogStream::~MiLogStream(&v22);
  if ( v23 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
  }
};

// Line 5011: range 0000000013DF7234-0000000013DF772B
void __fastcall PlayerQuestComp::calcLackingNpcList(
        PlayerQuestComp *const this,
        const Quest *quest,
        proto::Quest *proto_quest,
        uint32_t quest_id)
{
  unsigned __int64 v4; // r12
  __int64 v5; // rax
  _DWORD *v6; // r13
  __gnu_cxx::__normal_iterator<unsigned int const*,std::vector<unsigned int> >::reference v7; // rax
  _DWORD *v8; // rdx
  int v9; // r14d
  unsigned int *v10; // rax
  _DWORD *v11; // rdx
  char v12; // cl
  char *v13; // rsi
  __int64 v14; // rcx
  common::milog::MiLogStream *v15; // rax
  common::milog::MiLogStream *v16; // rax
  common::milog::MiLogStream *v17; // rax
  common::milog::MiLogStream *v18; // rax
  common::milog::MiLogStream *v19; // rax
  std::vector<unsigned int> *i; // rbx
  std::vector<unsigned int>::const_iterator __for_begin_0; // [rsp+38h] [rbp-138h] BYREF
  std::vector<unsigned int>::const_iterator __for_end_0; // [rsp+40h] [rbp-130h] BYREF
  std::initializer_list<std::vector<unsigned int> >::const_iterator __for_begin; // [rsp+48h] [rbp-128h]
  const data::QuestExcelConfig *quest_config_ptr; // [rsp+50h] [rbp-120h]
  google::protobuf::Map<unsigned int,unsigned int> *lacked_npc_map; // [rsp+58h] [rbp-118h]
  std::initializer_list<std::vector<unsigned int> > *__for_range; // [rsp+60h] [rbp-110h]
  std::initializer_list<std::vector<unsigned int> >::const_iterator __for_end; // [rsp+68h] [rbp-108h]
  const std::vector<unsigned int> *required_npc_vec; // [rsp+70h] [rbp-100h]
  const std::vector<unsigned int> *__for_range_0; // [rsp+78h] [rbp-F8h]
  std::initializer_list<std::vector<unsigned int> > v32; // [rsp+80h] [rbp-F0h] BYREF
  common::milog::MiLogStream v33; // [rsp+90h] [rbp-E0h] BYREF
  std::vector<unsigned int> v34; // [rsp+B0h] [rbp-C0h] BYREF
  std::vector<unsigned int> v35; // [rsp+C8h] [rbp-A8h] BYREF
  char v36[144]; // [rsp+E0h] [rbp-90h] BYREF

  v4 = (unsigned __int64)v36;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v5 = __asan_stack_malloc_1(96LL);
    if ( v5 )
      v4 = v5;
  }
  *(_QWORD *)v4 = 1102416563LL;
  *(_QWORD *)(v4 + 8) = "3 32 4 11 npc_id:5026 48 4 22 occupied_quest_id:5028 64 4 13 quest_id:5010";
  *(_QWORD *)(v4 + 16) = PlayerQuestComp::calcLackingNpcList;
  v6 = (_DWORD *)(v4 >> 3);
  v6[536862720] = -235802127;
  v6[536862721] = -234556924;
  v6[536862722] = -202116348;
  *(_DWORD *)(v4 + 64) = quest_id;
  if ( Quest::getState(quest) == QUEST_STATE_UNSTARTED )
  {
    quest_config_ptr = Quest::getQuestConfig(quest);
    if ( quest_config_ptr )
    {
      lacked_npc_map = proto::Quest::mutable_lacked_npc_map(proto_quest);
      v32._M_len = 2LL;
      std::vector<unsigned int>::vector(&v34, &quest_config_ptr->shared_npc_list);
      std::vector<unsigned int>::vector(&v35, &quest_config_ptr->exclusive_npc_list);
      v32._M_array = &v34;
      __for_range = &v32;
      __for_begin = std::initializer_list<std::vector<unsigned int>>::begin(&v32);
      __for_end = std::initializer_list<std::vector<unsigned int>>::end(&v32);
      while ( __for_begin != __for_end )
      {
        required_npc_vec = __for_begin;
        __for_range_0 = __for_begin;
        __for_begin_0._M_current = std::vector<unsigned int>::begin(__for_begin)._M_current;
        __for_end_0._M_current = std::vector<unsigned int>::end(__for_range_0)._M_current;
        while ( __gnu_cxx::operator!=<unsigned int const*,std::vector<unsigned int>>(&__for_begin_0, &__for_end_0) )
        {
          v7 = __gnu_cxx::__normal_iterator<unsigned int const*,std::vector<unsigned int>>::operator*(&__for_begin_0);
          v8 = v7;
          if ( *(_BYTE *)(((unsigned __int64)v7 >> 3) + 0x7FFF8000) != 0
            && (char)(((unsigned __int8)v7 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)v7 >> 3) + 0x7FFF8000) )
          {
            __asan_report_load4(v7);
          }
          *(_DWORD *)(v4 + 32) = *v8;
          *(_DWORD *)(v4 + 48) = PlayerQuestComp::getNpcOccupiedQuest(this, *(_DWORD *)(v4 + 32), *(_DWORD *)(v4 + 64));
          if ( *(_DWORD *)(v4 + 48) )
          {
            proto::Quest::add_lacked_npc_list(proto_quest, *(_DWORD *)(v4 + 32));
            v9 = *(_DWORD *)(v4 + 48);
            v13 = (char *)(v4 + 32);
            v10 = google::protobuf::Map<unsigned int,unsigned int>::operator[](
                    lacked_npc_map,
                    (const google::protobuf::Map<unsigned int,unsigned int>::key_type *)(v4 + 32));
            v11 = v10;
            v12 = *(_BYTE *)(((unsigned __int64)v10 >> 3) + 0x7FFF8000);
            LOBYTE(v13) = v12 != 0;
            v14 = (v12 != 0) & (unsigned __int8)((char)(((unsigned __int8)v10 & 7) + 3) >= v12);
            if ( (_BYTE)v14 )
              __asan_report_store4(v10, v13, v10, v14);
            *v11 = v9;
            common::milog::MiLogStream::create(
              &v33,
              &common::milog::MiLogDefault::default_log_obj_,
              1u,
              "./src/player/quest/player_quest_comp.cpp",
              "calcLackingNpcList",
              5033);
            v15 = common::milog::MiLogStream::operator<<<char [17],(char *[17])0>(
                    &v33,
                    (const char (*)[17])"occupied npc id:");
            v16 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                    v15,
                    (const unsigned int *)(v4 + 32));
            v17 = common::milog::MiLogStream::operator<<<char [20],(char *[20])0>(
                    v16,
                    (const char (*)[20])" occupied quest id:");
            v18 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                    v17,
                    (const unsigned int *)(v4 + 48));
            v19 = common::milog::MiLogStream::operator<<<char [11],(char *[11])0>(v18, (const char (*)[11])" quest_id:");
            common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v19, (const unsigned int *)(v4 + 64));
            common::milog::MiLogStream::~MiLogStream(&v33);
          }
          __gnu_cxx::__normal_iterator<unsigned int const*,std::vector<unsigned int>>::operator++(&__for_begin_0);
        }
        ++__for_begin;
      }
      for ( i = (std::vector<unsigned int> *)v36; i != &v34; std::vector<unsigned int>::~vector(i) )
        --i;
    }
  }
  if ( v36 == (char *)v4 )
  {
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0LL;
    *(_DWORD *)((v4 >> 3) + 0x7FFF8008) = 0;
  }
  else
  {
    *(_QWORD *)v4 = 1172321806LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v4 >> 3) + 0x7FFF8008) = -168430091;
  }
};

// Line 5041: range 0000000013DF772C-0000000013DF7F2A
__int64 __fastcall PlayerQuestComp::calcQuestLackingResource(
        PlayerQuestComp *const this,
        uint32_t quest_id,
        proto::GetQuestLackingResourceRsp *rsp_0)
{
  unsigned __int64 v3; // r12
  __int64 v4; // rax
  _DWORD *v5; // r13
  std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v6; // rax
  common::milog::MiLogStream *v7; // rax
  __int64 result; // rax
  __gnu_cxx::__normal_iterator<unsigned int const*,std::vector<unsigned int> >::reference v9; // rax
  _DWORD *v10; // rdx
  int v11; // r14d
  unsigned int *v12; // rax
  _DWORD *v13; // rdx
  char v14; // cl
  char *v15; // rsi
  __int64 v16; // rcx
  common::milog::MiLogStream *v17; // rax
  common::milog::MiLogStream *v18; // rax
  common::milog::MiLogStream *v19; // rax
  common::milog::MiLogStream *v20; // rax
  common::milog::MiLogStream *v21; // rax
  std::vector<unsigned int> *i; // r14
  __gnu_cxx::__normal_iterator<unsigned int const*,std::vector<unsigned int> >::reference v23; // rax
  _DWORD *v24; // rdx
  int v25; // r14d
  unsigned int *v26; // rax
  _DWORD *v27; // rdx
  char v28; // cl
  char *v29; // rsi
  __int64 v30; // rcx
  common::milog::MiLogStream *v31; // rax
  common::milog::MiLogStream *v32; // rax
  common::milog::MiLogStream *v33; // rax
  common::milog::MiLogStream *v34; // rax
  common::milog::MiLogStream *v35; // rax
  std::vector<unsigned int>::const_iterator __for_begin_0; // [rsp+28h] [rbp-148h] BYREF
  std::vector<unsigned int>::const_iterator __for_end_0; // [rsp+30h] [rbp-140h] BYREF
  std::initializer_list<std::vector<unsigned int> >::const_iterator __for_begin; // [rsp+38h] [rbp-138h]
  const data::QuestExcelConfig *quest_config_ptr; // [rsp+40h] [rbp-130h]
  google::protobuf::Map<unsigned int,unsigned int> *lacked_npc_map; // [rsp+48h] [rbp-128h]
  std::initializer_list<std::vector<unsigned int> > *__for_range; // [rsp+50h] [rbp-120h]
  std::initializer_list<std::vector<unsigned int> >::const_iterator __for_end; // [rsp+58h] [rbp-118h]
  const std::vector<unsigned int> *required_npc_vec; // [rsp+60h] [rbp-110h]
  const std::vector<unsigned int> *__for_range_0; // [rsp+68h] [rbp-108h]
  google::protobuf::Map<unsigned int,unsigned int> *lacked_place_map; // [rsp+70h] [rbp-100h]
  const std::vector<unsigned int> *__for_range_1; // [rsp+78h] [rbp-F8h]
  std::shared_ptr<Config> v48; // [rsp+80h] [rbp-F0h] BYREF
  common::milog::MiLogStream v49; // [rsp+90h] [rbp-E0h] BYREF
  std::vector<unsigned int> v50; // [rsp+B0h] [rbp-C0h] BYREF
  std::vector<unsigned int> v51; // [rsp+C8h] [rbp-A8h] BYREF
  char v52[144]; // [rsp+E0h] [rbp-90h] BYREF

  v3 = (unsigned __int64)v52;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_1(96LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "3 32 4 13 place_id:5067 48 4 22 occupied_quest_id:5069 64 4 13 quest_id:5040";
  *(_QWORD *)(v3 + 16) = PlayerQuestComp::calcQuestLackingResource;
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = -234556924;
  v5[536862722] = -202116348;
  *(_DWORD *)(v3 + 64) = quest_id;
  ServiceBox::findService<GameserverService>();
  GameserverService::getConfig((GameserverService *const)&v48);
  v6 = std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false> *const)&v48);
  quest_config_ptr = data::QuestExcelConfigMgrBase::findQuestExcelConfig(
                       &v6->design_config.txt_config_mgr.quest_config_mgr,
                       *(_DWORD *)(v3 + 64));
  std::shared_ptr<Config>::~shared_ptr(&v48);
  if ( quest_config_ptr )
  {
    lacked_npc_map = proto::GetQuestLackingResourceRsp::mutable_lacked_npc_map(rsp_0);
    v48._M_ptr = 0LL;
    v48._M_refcount._M_pi = (std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)2> *)2;
    std::vector<unsigned int>::vector(&v50, &quest_config_ptr->shared_npc_list);
    std::vector<unsigned int>::vector(&v51, &quest_config_ptr->exclusive_npc_list);
    v48._M_ptr = (std::__shared_ptr<Config,(__gnu_cxx::_Lock_policy)2>::element_type *)&v50;
    __for_range = (std::initializer_list<std::vector<unsigned int> > *)&v48;
    __for_begin = std::initializer_list<std::vector<unsigned int>>::begin((const std::initializer_list<std::vector<unsigned int> > *const)&v48);
    __for_end = std::initializer_list<std::vector<unsigned int>>::end((const std::initializer_list<std::vector<unsigned int> > *const)&v48);
    while ( __for_begin != __for_end )
    {
      required_npc_vec = __for_begin;
      __for_range_0 = __for_begin;
      __for_begin_0._M_current = std::vector<unsigned int>::begin(__for_begin)._M_current;
      __for_end_0._M_current = std::vector<unsigned int>::end(__for_range_0)._M_current;
      while ( __gnu_cxx::operator!=<unsigned int const*,std::vector<unsigned int>>(&__for_begin_0, &__for_end_0) )
      {
        v9 = __gnu_cxx::__normal_iterator<unsigned int const*,std::vector<unsigned int>>::operator*(&__for_begin_0);
        v10 = v9;
        if ( *(_BYTE *)(((unsigned __int64)v9 >> 3) + 0x7FFF8000) != 0
          && (char)(((unsigned __int8)v9 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)v9 >> 3) + 0x7FFF8000) )
        {
          __asan_report_load4(v9);
        }
        *(_DWORD *)(v3 + 32) = *v10;
        *(_DWORD *)(v3 + 48) = PlayerQuestComp::getNpcOccupiedQuest(this, *(_DWORD *)(v3 + 32), *(_DWORD *)(v3 + 64));
        if ( *(_DWORD *)(v3 + 48) )
        {
          proto::GetQuestLackingResourceRsp::add_lacked_npc_list(rsp_0, *(_DWORD *)(v3 + 32));
          v11 = *(_DWORD *)(v3 + 48);
          v15 = (char *)(v3 + 32);
          v12 = google::protobuf::Map<unsigned int,unsigned int>::operator[](
                  lacked_npc_map,
                  (const google::protobuf::Map<unsigned int,unsigned int>::key_type *)(v3 + 32));
          v13 = v12;
          v14 = *(_BYTE *)(((unsigned __int64)v12 >> 3) + 0x7FFF8000);
          LOBYTE(v15) = v14 != 0;
          v16 = (v14 != 0) & (unsigned __int8)((char)(((unsigned __int8)v12 & 7) + 3) >= v14);
          if ( (_BYTE)v16 )
            __asan_report_store4(v12, v15, v12, v16);
          *v13 = v11;
          common::milog::MiLogStream::create(
            &v49,
            &common::milog::MiLogDefault::default_log_obj_,
            1u,
            "./src/player/quest/player_quest_comp.cpp",
            "calcQuestLackingResource",
            5060);
          v17 = common::milog::MiLogStream::operator<<<char [17],(char *[17])0>(
                  &v49,
                  (const char (*)[17])"occupied npc id:");
          v18 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                  v17,
                  (const unsigned int *)(v3 + 32));
          v19 = common::milog::MiLogStream::operator<<<char [20],(char *[20])0>(
                  v18,
                  (const char (*)[20])" occupied quest id:");
          v20 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                  v19,
                  (const unsigned int *)(v3 + 48));
          v21 = common::milog::MiLogStream::operator<<<char [11],(char *[11])0>(v20, (const char (*)[11])" quest_id:");
          common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v21, (const unsigned int *)(v3 + 64));
          common::milog::MiLogStream::~MiLogStream(&v49);
        }
        __gnu_cxx::__normal_iterator<unsigned int const*,std::vector<unsigned int>>::operator++(&__for_begin_0);
      }
      ++__for_begin;
    }
    for ( i = (std::vector<unsigned int> *)v52; i != &v50; std::vector<unsigned int>::~vector(i) )
      --i;
    lacked_place_map = proto::GetQuestLackingResourceRsp::mutable_lacked_place_map(rsp_0);
    __for_range_1 = &quest_config_ptr->exclusive_place_list;
    __for_begin_0._M_current = std::vector<unsigned int>::begin(&quest_config_ptr->exclusive_place_list)._M_current;
    __for_end_0._M_current = std::vector<unsigned int>::end(__for_range_1)._M_current;
    while ( __gnu_cxx::operator!=<unsigned int const*,std::vector<unsigned int>>(&__for_begin_0, &__for_end_0) )
    {
      v23 = __gnu_cxx::__normal_iterator<unsigned int const*,std::vector<unsigned int>>::operator*(&__for_begin_0);
      v24 = v23;
      if ( *(_BYTE *)(((unsigned __int64)v23 >> 3) + 0x7FFF8000) != 0
        && (char)(((unsigned __int8)v23 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)v23 >> 3) + 0x7FFF8000) )
      {
        __asan_report_load4(v23);
      }
      *(_DWORD *)(v3 + 32) = *v24;
      *(_DWORD *)(v3 + 48) = PlayerQuestComp::getPlaceOccupiedQuest(this, *(_DWORD *)(v3 + 32), *(_DWORD *)(v3 + 64));
      if ( *(_DWORD *)(v3 + 48) )
      {
        proto::GetQuestLackingResourceRsp::add_lacked_place_list(rsp_0, *(_DWORD *)(v3 + 32));
        v25 = *(_DWORD *)(v3 + 48);
        v29 = (char *)(v3 + 32);
        v26 = google::protobuf::Map<unsigned int,unsigned int>::operator[](
                lacked_place_map,
                (const google::protobuf::Map<unsigned int,unsigned int>::key_type *)(v3 + 32));
        v27 = v26;
        v28 = *(_BYTE *)(((unsigned __int64)v26 >> 3) + 0x7FFF8000);
        LOBYTE(v29) = v28 != 0;
        v30 = (v28 != 0) & (unsigned __int8)((char)(((unsigned __int8)v26 & 7) + 3) >= v28);
        if ( (_BYTE)v30 )
          __asan_report_store4(v26, v29, v26, v30);
        *v27 = v25;
        common::milog::MiLogStream::create(
          &v49,
          &common::milog::MiLogDefault::default_log_obj_,
          1u,
          "./src/player/quest/player_quest_comp.cpp",
          "calcQuestLackingResource",
          5074);
        v31 = common::milog::MiLogStream::operator<<<char [19],(char *[19])0>(
                &v49,
                (const char (*)[19])"occupied place id:");
        v32 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                v31,
                (const unsigned int *)(v3 + 32));
        v33 = common::milog::MiLogStream::operator<<<char [20],(char *[20])0>(
                v32,
                (const char (*)[20])" occupied quest id:");
        v34 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                v33,
                (const unsigned int *)(v3 + 48));
        v35 = common::milog::MiLogStream::operator<<<char [11],(char *[11])0>(v34, (const char (*)[11])" quest_id:");
        common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v35, (const unsigned int *)(v3 + 64));
        common::milog::MiLogStream::~MiLogStream(&v49);
      }
      __gnu_cxx::__normal_iterator<unsigned int const*,std::vector<unsigned int>>::operator++(&__for_begin_0);
    }
    result = 0LL;
  }
  else
  {
    common::milog::MiLogStream::create(
      &v49,
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/player/quest/player_quest_comp.cpp",
      "calcQuestLackingResource",
      5045);
    v7 = common::milog::MiLogStream::operator<<<char [39],(char *[39])0>(
           &v49,
           (const char (*)[39])"findQuestExcelConfig failed, quest_id:");
    common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v7, (const unsigned int *)(v3 + 64));
    common::milog::MiLogStream::~MiLogStream(&v49);
    result = 0xFFFFFFFFLL;
  }
  if ( v52 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8008) = 0;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8008) = -168430091;
  }
  return result;
};

// Line 5082: range 0000000013DF7F2C-0000000013DF8386
__int64 __fastcall PlayerQuestComp::getVideoKeyByParentQuestId(
        PlayerQuestComp *const this,
        uint32_t parent_quest_id,
        proto::GetParentQuestVideoKeyRsp *rsp_0)
{
  unsigned __int64 v3; // r12
  __int64 v4; // rax
  _DWORD *v5; // r13
  common::milog::MiLogStream *v6; // rax
  unsigned int v7; // r14d
  ParentQuest *v8; // rax
  common::milog::MiLogStream *v9; // rax
  std::__shared_ptr_access<ParentQuest,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v10; // rax
  common::milog::MiLogStream *v11; // rax
  common::milog::MiLogStream *v12; // rax
  common::milog::MiLogStream *v13; // r14
  std::__shared_ptr_access<ParentQuest,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v14; // rax
  common::milog::MiLogStream *v15; // rax
  __int64 result; // rax
  data::ParentQuestState val; // [rsp+24h] [rbp-BCh] BYREF
  const data::MainQuestExcelConfig *quest_config_ptr; // [rsp+28h] [rbp-B8h]
  common::milog::MiLogStream v20; // [rsp+30h] [rbp-B0h] BYREF
  char v21[144]; // [rsp+50h] [rbp-90h] BYREF

  v3 = (unsigned __int64)v21;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_1(96LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "2 48 4 20 parent_quest_id:5081 64 16 21 parent_quest_ptr:5083";
  *(_QWORD *)(v3 + 16) = PlayerQuestComp::getVideoKeyByParentQuestId;
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = -234556943;
  v5[536862722] = -202178560;
  *(_DWORD *)(v3 + 48) = parent_quest_id;
  PlayerQuestComp::findParentQuest((const PlayerQuestComp *const)(v3 + 64), (__int64)this, *(_DWORD *)(v3 + 48));
  if ( std::operator==<ParentQuest>(0LL, (const std::shared_ptr<ParentQuest> *)(v3 + 64)) )
  {
    common::milog::MiLogStream::create(
      &v20,
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/player/quest/player_quest_comp.cpp",
      "getVideoKeyByParentQuestId",
      5086);
    v6 = common::milog::MiLogStream::operator<<<char [24],(char *[24])0>(
           &v20,
           (const char (*)[24])"parent quest not found:");
    common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v6, (const unsigned int *)(v3 + 48));
    common::milog::MiLogStream::~MiLogStream(&v20);
    v7 = -1;
  }
  else
  {
    v8 = std::__shared_ptr_access<ParentQuest,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<ParentQuest,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 64));
    if ( ParentQuest::isRandom(v8) )
    {
      common::milog::MiLogStream::create(
        &v20,
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/player/quest/player_quest_comp.cpp",
        "getVideoKeyByParentQuestId",
        5091);
      v9 = common::milog::MiLogStream::operator<<<char [24],(char *[24])0>(
             &v20,
             (const char (*)[24])"parent quest is random:");
      common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v9, (const unsigned int *)(v3 + 48));
      common::milog::MiLogStream::~MiLogStream(&v20);
      v7 = -1;
    }
    else
    {
      v10 = std::__shared_ptr_access<ParentQuest,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<ParentQuest,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 64));
      if ( ParentQuest::getParentQuestState(v10) )
      {
        common::milog::MiLogStream::create(
          &v20,
          &common::milog::MiLogDefault::default_log_obj_,
          3u,
          "./src/player/quest/player_quest_comp.cpp",
          "getVideoKeyByParentQuestId",
          5097);
        v11 = common::milog::MiLogStream::operator<<<char [14],(char *[14])0>(&v20, (const char (*)[14])"parent quest:");
        v12 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                v11,
                (const unsigned int *)(v3 + 48));
        v13 = common::milog::MiLogStream::operator<<<char [8],(char *[8])0>(v12, (const char (*)[8])" state:");
        v14 = std::__shared_ptr_access<ParentQuest,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<ParentQuest,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 64));
        val = ParentQuest::getParentQuestState(v14);
        common::milog::MiLogStream::operator<<<data::ParentQuestState,(data::ParentQuestState*)0>(v13, &val);
        common::milog::MiLogStream::~MiLogStream(&v20);
        v7 = -1;
      }
      else
      {
        quest_config_ptr = PlayerQuestComp::findPlayerParentQuestExcelConfig(this, *(_DWORD *)(v3 + 48));
        if ( quest_config_ptr )
        {
          if ( *(_BYTE *)(((unsigned __int64)&quest_config_ptr->video_key >> 3) + 0x7FFF8000) )
            __asan_report_load8(&quest_config_ptr->video_key);
          proto::GetParentQuestVideoKeyRsp::set_video_key(rsp_0, quest_config_ptr->video_key);
          v7 = 0;
        }
        else
        {
          common::milog::MiLogStream::create(
            &v20,
            &common::milog::MiLogDefault::default_log_obj_,
            3u,
            "./src/player/quest/player_quest_comp.cpp",
            "getVideoKeyByParentQuestId",
            5103);
          v15 = common::milog::MiLogStream::operator<<<char [26],(char *[26])0>(
                  &v20,
                  (const char (*)[26])"parent_quest_ptr is null:");
          common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v15, (const unsigned int *)(v3 + 48));
          common::milog::MiLogStream::~MiLogStream(&v20);
          v7 = -1;
        }
      }
    }
  }
  std::shared_ptr<ParentQuest>::~shared_ptr((std::shared_ptr<ParentQuest> *const)(v3 + 64));
  result = v7;
  if ( v21 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8008) = 0;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8008) = -168430091;
  }
  return result;
};

// Line 5112: range 0000000013DF8388-0000000013DF85CE
void __cdecl PlayerQuestComp::logPlayerMission(
        Player *player,
        MessagePtr *p_log_body_ptr,
        uint32_t mission_type,
        uint32_t quest_id)
{
  unsigned __int64 v4; // rbx
  __int64 v5; // rax
  unsigned __int64 v6; // r12
  PlayerQuestComp *QuestComp; // rax
  PlayerQuestComp *v8; // rax
  std::__shared_ptr_access<proto_log::PlayerLogBodyExtMissionType,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v9; // rcx
  const data::MainQuestExcelConfig *main_quest_config_ptr; // [rsp+28h] [rbp-88h]
  std::shared_ptr<google::protobuf::Message> p_body_ptr; // [rsp+30h] [rbp-80h] BYREF
  std::shared_ptr<google::protobuf::Message> p_body_ext_ptr; // [rsp+40h] [rbp-70h] BYREF
  char v15[96]; // [rsp+50h] [rbp-60h] BYREF

  v4 = (unsigned __int64)v15;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v5 = __asan_stack_malloc_0(64LL);
    if ( v5 )
      v4 = v5;
  }
  *(_QWORD *)v4 = 1102416563LL;
  *(_QWORD *)(v4 + 8) = "1 32 16 21 log_body_ext_ptr:5117";
  *(_QWORD *)(v4 + 16) = PlayerQuestComp::logPlayerMission;
  v6 = v4 >> 3;
  *(_DWORD *)(v6 + 2147450880) = -235802127;
  *(_DWORD *)(v6 + 2147450884) = -202178560;
  if ( mission_type == 2 )
  {
    QuestComp = Player::getQuestComp(player);
    quest_id = PlayerQuestComp::findParentQuestId(QuestComp, quest_id);
  }
  common::tools::perf::make_shared<proto_log::PlayerLogBodyExtMissionType>();
  v8 = Player::getQuestComp(player);
  main_quest_config_ptr = PlayerQuestComp::findPlayerParentQuestExcelConfig(v8, quest_id);
  if ( main_quest_config_ptr )
  {
    v9 = std::__shared_ptr_access<proto_log::PlayerLogBodyExtMissionType,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<proto_log::PlayerLogBodyExtMissionType,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 32));
    if ( *(_BYTE *)(((unsigned __int64)&main_quest_config_ptr->type >> 3) + 0x7FFF8000) != 0
      && (char)((((_BYTE)main_quest_config_ptr + 20) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&main_quest_config_ptr->type >> 3)
                                                                           + 0x7FFF8000) )
    {
      __asan_report_load4(&main_quest_config_ptr->type);
    }
    proto_log::PlayerLogBodyExtMissionType::set_quest_type(v9, main_quest_config_ptr->type);
  }
  std::shared_ptr<google::protobuf::Message>::shared_ptr<proto_log::PlayerLogBodyExtMissionType,void>(
    &p_body_ext_ptr,
    (const std::shared_ptr<proto_log::PlayerLogBodyExtMissionType> *)(v4 + 32));
  std::shared_ptr<google::protobuf::Message>::shared_ptr(&p_body_ptr, p_log_body_ptr);
  Player::printStatLog(player, &p_body_ptr, &p_body_ext_ptr, 0xEu);
  std::shared_ptr<google::protobuf::Message>::~shared_ptr(&p_body_ptr);
  std::shared_ptr<google::protobuf::Message>::~shared_ptr(&p_body_ext_ptr);
  std::shared_ptr<proto_log::PlayerLogBodyExtMissionType>::~shared_ptr((std::shared_ptr<proto_log::PlayerLogBodyExtMissionType> *const)(v4 + 32));
  if ( v15 == (char *)v4 )
  {
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0LL;
  }
  else
  {
    *(_QWORD *)v4 = 1172321806LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
  }
};

// Line 5128: range 0000000013DF85D0-0000000013DF8764
void __cdecl PlayerQuestComp::logPlayerMissionAccept(
        PlayerQuestComp *const this,
        uint32_t mission_type,
        uint32_t quest_id)
{
  unsigned __int64 v3; // rbx
  __int64 v4; // rax
  unsigned __int64 v5; // r13
  std::__shared_ptr_access<proto_log::PlayerLogBodyMissionAccept,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v6; // rax
  std::__shared_ptr_access<proto_log::PlayerLogBodyMissionAccept,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v7; // rax
  std::shared_ptr<google::protobuf::Message> p_log_body_ptr; // [rsp+10h] [rbp-70h] BYREF
  char v10[96]; // [rsp+20h] [rbp-60h] BYREF

  v3 = (unsigned __int64)v10;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_0(64LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "1 32 16 27 mission_accept_log_ptr:5129";
  *(_QWORD *)(v3 + 16) = PlayerQuestComp::logPlayerMissionAccept;
  v5 = v3 >> 3;
  *(_DWORD *)(v5 + 2147450880) = -235802127;
  *(_DWORD *)(v5 + 2147450884) = -202178560;
  common::tools::perf::make_shared<proto_log::PlayerLogBodyMissionAccept>();
  v6 = std::__shared_ptr_access<proto_log::PlayerLogBodyMissionAccept,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<proto_log::PlayerLogBodyMissionAccept,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 32));
  proto_log::PlayerLogBodyMissionAccept::set_mission_type(v6, mission_type);
  v7 = std::__shared_ptr_access<proto_log::PlayerLogBodyMissionAccept,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<proto_log::PlayerLogBodyMissionAccept,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 32));
  proto_log::PlayerLogBodyMissionAccept::set_mission_id(v7, quest_id);
  std::shared_ptr<google::protobuf::Message>::shared_ptr<proto_log::PlayerLogBodyMissionAccept,void>(
    &p_log_body_ptr,
    (const std::shared_ptr<proto_log::PlayerLogBodyMissionAccept> *)(v3 + 32));
  if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
    __asan_report_load8(&this->player_);
  PlayerQuestComp::logPlayerMission(this->player_, &p_log_body_ptr, mission_type, quest_id);
  std::shared_ptr<google::protobuf::Message>::~shared_ptr(&p_log_body_ptr);
  std::shared_ptr<proto_log::PlayerLogBodyMissionAccept>::~shared_ptr((std::shared_ptr<proto_log::PlayerLogBodyMissionAccept> *const)(v3 + 32));
  if ( v10 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
  }
};

// Line 5136: range 0000000013DF8766-0000000013DF88FA
void __cdecl PlayerQuestComp::logPlayerMissionStart(
        PlayerQuestComp *const this,
        uint32_t mission_type,
        uint32_t quest_id)
{
  unsigned __int64 v3; // rbx
  __int64 v4; // rax
  unsigned __int64 v5; // r13
  std::__shared_ptr_access<proto_log::PlayerLogBodyMissionStart,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v6; // rax
  std::__shared_ptr_access<proto_log::PlayerLogBodyMissionStart,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v7; // rax
  std::shared_ptr<google::protobuf::Message> p_log_body_ptr; // [rsp+10h] [rbp-70h] BYREF
  char v10[96]; // [rsp+20h] [rbp-60h] BYREF

  v3 = (unsigned __int64)v10;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_0(64LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "1 32 16 26 mission_start_log_ptr:5137";
  *(_QWORD *)(v3 + 16) = PlayerQuestComp::logPlayerMissionStart;
  v5 = v3 >> 3;
  *(_DWORD *)(v5 + 2147450880) = -235802127;
  *(_DWORD *)(v5 + 2147450884) = -202178560;
  common::tools::perf::make_shared<proto_log::PlayerLogBodyMissionStart>();
  v6 = std::__shared_ptr_access<proto_log::PlayerLogBodyMissionStart,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<proto_log::PlayerLogBodyMissionStart,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 32));
  proto_log::PlayerLogBodyMissionStart::set_mission_type(v6, mission_type);
  v7 = std::__shared_ptr_access<proto_log::PlayerLogBodyMissionStart,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<proto_log::PlayerLogBodyMissionStart,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 32));
  proto_log::PlayerLogBodyMissionStart::set_mission_id(v7, quest_id);
  std::shared_ptr<google::protobuf::Message>::shared_ptr<proto_log::PlayerLogBodyMissionStart,void>(
    &p_log_body_ptr,
    (const std::shared_ptr<proto_log::PlayerLogBodyMissionStart> *)(v3 + 32));
  if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
    __asan_report_load8(&this->player_);
  PlayerQuestComp::logPlayerMission(this->player_, &p_log_body_ptr, mission_type, quest_id);
  std::shared_ptr<google::protobuf::Message>::~shared_ptr(&p_log_body_ptr);
  std::shared_ptr<proto_log::PlayerLogBodyMissionStart>::~shared_ptr((std::shared_ptr<proto_log::PlayerLogBodyMissionStart> *const)(v3 + 32));
  if ( v10 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
  }
};

// Line 5145: range 0000000013DF88FC-0000000013DF8AB6
void __cdecl PlayerQuestComp::logPlayerMissionFinish(
        PlayerQuestComp *const this,
        uint32_t mission_type,
        uint32_t quest_id,
        uint32_t start_time)
{
  unsigned __int64 v4; // rbx
  __int64 v5; // rax
  unsigned __int64 v6; // r13
  std::__shared_ptr_access<proto_log::PlayerLogBodyMissionFinish,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v7; // rax
  std::__shared_ptr_access<proto_log::PlayerLogBodyMissionFinish,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v8; // rax
  std::__shared_ptr_access<proto_log::PlayerLogBodyMissionFinish,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v9; // rax
  std::shared_ptr<google::protobuf::Message> p_log_body_ptr; // [rsp+20h] [rbp-70h] BYREF
  char v13[96]; // [rsp+30h] [rbp-60h] BYREF

  v4 = (unsigned __int64)v13;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v5 = __asan_stack_malloc_0(64LL);
    if ( v5 )
      v4 = v5;
  }
  *(_QWORD *)v4 = 1102416563LL;
  *(_QWORD *)(v4 + 8) = "1 32 16 27 mission_finish_log_ptr:5146";
  *(_QWORD *)(v4 + 16) = PlayerQuestComp::logPlayerMissionFinish;
  v6 = v4 >> 3;
  *(_DWORD *)(v6 + 2147450880) = -235802127;
  *(_DWORD *)(v6 + 2147450884) = -202178560;
  common::tools::perf::make_shared<proto_log::PlayerLogBodyMissionFinish>();
  v7 = std::__shared_ptr_access<proto_log::PlayerLogBodyMissionFinish,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<proto_log::PlayerLogBodyMissionFinish,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 32));
  proto_log::PlayerLogBodyMissionFinish::set_mission_type(v7, mission_type);
  v8 = std::__shared_ptr_access<proto_log::PlayerLogBodyMissionFinish,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<proto_log::PlayerLogBodyMissionFinish,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 32));
  proto_log::PlayerLogBodyMissionFinish::set_mission_id(v8, quest_id);
  v9 = std::__shared_ptr_access<proto_log::PlayerLogBodyMissionFinish,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<proto_log::PlayerLogBodyMissionFinish,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 32));
  proto_log::PlayerLogBodyMissionFinish::set_start_time(v9, start_time);
  std::shared_ptr<google::protobuf::Message>::shared_ptr<proto_log::PlayerLogBodyMissionFinish,void>(
    &p_log_body_ptr,
    (const std::shared_ptr<proto_log::PlayerLogBodyMissionFinish> *)(v4 + 32));
  if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
    __asan_report_load8(&this->player_);
  PlayerQuestComp::logPlayerMission(this->player_, &p_log_body_ptr, mission_type, quest_id);
  std::shared_ptr<google::protobuf::Message>::~shared_ptr(&p_log_body_ptr);
  std::shared_ptr<proto_log::PlayerLogBodyMissionFinish>::~shared_ptr((std::shared_ptr<proto_log::PlayerLogBodyMissionFinish> *const)(v4 + 32));
  if ( v13 == (char *)v4 )
  {
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0LL;
  }
  else
  {
    *(_QWORD *)v4 = 1172321806LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
  }
};

// Line 5155: range 0000000013DF8AB8-0000000013DF8C72
void __cdecl PlayerQuestComp::logPlayerMissionFail(
        PlayerQuestComp *const this,
        uint32_t mission_type,
        uint32_t quest_id,
        uint32_t start_time)
{
  unsigned __int64 v4; // rbx
  __int64 v5; // rax
  unsigned __int64 v6; // r13
  std::__shared_ptr_access<proto_log::PlayerLogBodyMissionFail,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v7; // rax
  std::__shared_ptr_access<proto_log::PlayerLogBodyMissionFail,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v8; // rax
  std::__shared_ptr_access<proto_log::PlayerLogBodyMissionFail,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v9; // rax
  std::shared_ptr<google::protobuf::Message> p_log_body_ptr; // [rsp+20h] [rbp-70h] BYREF
  char v13[96]; // [rsp+30h] [rbp-60h] BYREF

  v4 = (unsigned __int64)v13;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v5 = __asan_stack_malloc_0(64LL);
    if ( v5 )
      v4 = v5;
  }
  *(_QWORD *)v4 = 1102416563LL;
  *(_QWORD *)(v4 + 8) = "1 32 16 25 mission_fail_log_ptr:5156";
  *(_QWORD *)(v4 + 16) = PlayerQuestComp::logPlayerMissionFail;
  v6 = v4 >> 3;
  *(_DWORD *)(v6 + 2147450880) = -235802127;
  *(_DWORD *)(v6 + 2147450884) = -202178560;
  common::tools::perf::make_shared<proto_log::PlayerLogBodyMissionFail>();
  v7 = std::__shared_ptr_access<proto_log::PlayerLogBodyMissionFail,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<proto_log::PlayerLogBodyMissionFail,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 32));
  proto_log::PlayerLogBodyMissionFail::set_mission_type(v7, mission_type);
  v8 = std::__shared_ptr_access<proto_log::PlayerLogBodyMissionFail,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<proto_log::PlayerLogBodyMissionFail,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 32));
  proto_log::PlayerLogBodyMissionFail::set_mission_id(v8, quest_id);
  v9 = std::__shared_ptr_access<proto_log::PlayerLogBodyMissionFail,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<proto_log::PlayerLogBodyMissionFail,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 32));
  proto_log::PlayerLogBodyMissionFail::set_start_time(v9, start_time);
  std::shared_ptr<google::protobuf::Message>::shared_ptr<proto_log::PlayerLogBodyMissionFail,void>(
    &p_log_body_ptr,
    (const std::shared_ptr<proto_log::PlayerLogBodyMissionFail> *)(v4 + 32));
  if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
    __asan_report_load8(&this->player_);
  PlayerQuestComp::logPlayerMission(this->player_, &p_log_body_ptr, mission_type, quest_id);
  std::shared_ptr<google::protobuf::Message>::~shared_ptr(&p_log_body_ptr);
  std::shared_ptr<proto_log::PlayerLogBodyMissionFail>::~shared_ptr((std::shared_ptr<proto_log::PlayerLogBodyMissionFail> *const)(v4 + 32));
  if ( v13 == (char *)v4 )
  {
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0LL;
  }
  else
  {
    *(_QWORD *)v4 = 1172321806LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
  }
};

// Line 5165: range 0000000013DF8C74-0000000013DF8E58
void __cdecl PlayerQuestComp::logPlayerMissionRemove(
        PlayerQuestComp *const this,
        uint32_t mission_remove_type,
        uint32_t mission_type,
        uint32_t quest_id,
        uint32_t start_time)
{
  unsigned __int64 v5; // rbx
  __int64 v6; // rax
  unsigned __int64 v7; // r13
  std::__shared_ptr_access<proto_log::PlayerLogBodyMissionRemove,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v8; // rax
  std::__shared_ptr_access<proto_log::PlayerLogBodyMissionRemove,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v9; // rax
  std::__shared_ptr_access<proto_log::PlayerLogBodyMissionRemove,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v10; // rax
  std::__shared_ptr_access<proto_log::PlayerLogBodyMissionRemove,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v11; // rax
  std::shared_ptr<google::protobuf::Message> p_log_body_ptr; // [rsp+20h] [rbp-70h] BYREF
  char v16[96]; // [rsp+30h] [rbp-60h] BYREF

  v5 = (unsigned __int64)v16;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v6 = __asan_stack_malloc_0(64LL);
    if ( v6 )
      v5 = v6;
  }
  *(_QWORD *)v5 = 1102416563LL;
  *(_QWORD *)(v5 + 8) = "1 32 16 27 mission_remove_log_ptr:5166";
  *(_QWORD *)(v5 + 16) = PlayerQuestComp::logPlayerMissionRemove;
  v7 = v5 >> 3;
  *(_DWORD *)(v7 + 2147450880) = -235802127;
  *(_DWORD *)(v7 + 2147450884) = -202178560;
  common::tools::perf::make_shared<proto_log::PlayerLogBodyMissionRemove>();
  v8 = std::__shared_ptr_access<proto_log::PlayerLogBodyMissionRemove,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<proto_log::PlayerLogBodyMissionRemove,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v5 + 32));
  proto_log::PlayerLogBodyMissionRemove::set_mission_remove_type(v8, mission_remove_type);
  v9 = std::__shared_ptr_access<proto_log::PlayerLogBodyMissionRemove,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<proto_log::PlayerLogBodyMissionRemove,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v5 + 32));
  proto_log::PlayerLogBodyMissionRemove::set_mission_type(v9, mission_type);
  v10 = std::__shared_ptr_access<proto_log::PlayerLogBodyMissionRemove,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<proto_log::PlayerLogBodyMissionRemove,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v5 + 32));
  proto_log::PlayerLogBodyMissionRemove::set_mission_id(v10, quest_id);
  v11 = std::__shared_ptr_access<proto_log::PlayerLogBodyMissionRemove,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<proto_log::PlayerLogBodyMissionRemove,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v5 + 32));
  proto_log::PlayerLogBodyMissionRemove::set_start_time(v11, start_time);
  std::shared_ptr<google::protobuf::Message>::shared_ptr<proto_log::PlayerLogBodyMissionRemove,void>(
    &p_log_body_ptr,
    (const std::shared_ptr<proto_log::PlayerLogBodyMissionRemove> *)(v5 + 32));
  if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
    __asan_report_load8(&this->player_);
  PlayerQuestComp::logPlayerMission(this->player_, &p_log_body_ptr, mission_type, quest_id);
  std::shared_ptr<google::protobuf::Message>::~shared_ptr(&p_log_body_ptr);
  std::shared_ptr<proto_log::PlayerLogBodyMissionRemove>::~shared_ptr((std::shared_ptr<proto_log::PlayerLogBodyMissionRemove> *const)(v5 + 32));
  if ( v16 == (char *)v5 )
  {
    *(_QWORD *)((v5 >> 3) + 0x7FFF8000) = 0LL;
  }
  else
  {
    *(_QWORD *)v5 = 1172321806LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
  }
};

// Line 5176: range 0000000013DF8E5A-0000000013DF9265
__int64 __fastcall PlayerQuestComp::checkAndPushQuestGroupAction(
        PlayerQuestComp *const this,
        uint32_t parent_quest_id,
        uint32_t quest_id,
        data::QuestExec *action)
{
  unsigned __int64 v4; // r13
  __int64 v5; // rax
  _DWORD *v6; // r12
  unsigned int *v7; // r9
  common::milog::MiLogStream *v8; // rax
  int v9; // r14d
  std::__shared_ptr_access<Quest,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v10; // rax
  common::milog::MiLogStream *v11; // rax
  common::milog::MiLogStream *v12; // rax
  common::milog::MiLogStream *v13; // rcx
  __int64 result; // rax
  unsigned int *v15; // [rsp+0h] [rbp-110h]
  const data::QuestExec *v17; // [rsp+10h] [rbp-100h]
  common::milog::MiLogStream v18; // [rsp+20h] [rbp-F0h] BYREF
  char v19[208]; // [rsp+40h] [rbp-D0h] BYREF

  v17 = (const data::QuestExec *)__PAIR64__(parent_quest_id, quest_id);
  v4 = (unsigned __int64)v19;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v5 = __asan_stack_malloc_2(160LL);
    if ( v5 )
      v4 = v5;
  }
  *(_QWORD *)v4 = 1102416563LL;
  *(_QWORD *)(v4 + 8) = "5 48 4 10 state:5182 64 4 20 parent_quest_id:5175 80 4 13 quest_id:5175 96 16 13 coro_ptr:5177 1"
                        "28 16 14 quest_ptr:5185";
  *(_QWORD *)(v4 + 16) = PlayerQuestComp::checkAndPushQuestGroupAction;
  v6 = (_DWORD *)(v4 >> 3);
  v6[536862720] = -235802127;
  v6[536862721] = -234556943;
  v6[536862722] = -234556924;
  v6[536862723] = -219021312;
  v6[536862724] = -202178560;
  *(_DWORD *)(v4 + 64) = parent_quest_id;
  *(_DWORD *)(v4 + 80) = (_DWORD)v17;
  common::minet::Coroutine::thisCoro();
  if ( std::operator!=<common::minet::Coroutine>((const std::shared_ptr<common::minet::Coroutine> *)(v4 + 96), 0LL) )
  {
    HIBYTE(v15) = 0;
  }
  else
  {
    *(_DWORD *)(v4 + 48) = 0;
    if ( !*(_DWORD *)(v4 + 80) )
      goto LABEL_11;
    PlayerQuestComp::findQuest((const PlayerQuestComp *const)(v4 + 128), (__int64)this, *(_DWORD *)(v4 + 80));
    if ( std::operator==<Quest>((const std::shared_ptr<Quest> *)(v4 + 128), 0LL) )
    {
      common::milog::MiLogStream::create(
        &v18,
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/player/quest/player_quest_comp.cpp",
        "checkAndPushQuestGroupAction",
        5188);
      v8 = common::milog::MiLogStream::operator<<<char [28],(char *[28])0>(
             &v18,
             (const char (*)[28])"cannot find quest,quest_id:");
      common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v8, (const unsigned int *)(v4 + 80));
      common::milog::MiLogStream::~MiLogStream(&v18);
      HIBYTE(v15) = 1;
      v9 = 0;
    }
    else
    {
      v10 = std::__shared_ptr_access<Quest,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Quest,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 128));
      *(_DWORD *)(v4 + 48) = Quest::getState(v10);
      v9 = 1;
    }
    std::shared_ptr<Quest>::~shared_ptr((std::shared_ptr<Quest> *const)(v4 + 128));
    if ( v9 == 1 )
    {
LABEL_11:
      if ( *(_BYTE *)(((unsigned __int64)&action->type >> 3) + 0x7FFF8000) != 0
        && *(_BYTE *)(((unsigned __int64)&action->type >> 3) + 0x7FFF8000) <= 3 )
      {
        __asan_report_load4(&action->type);
      }
      if ( action->type == QUEST_EXEC_NOTIFY_GROUP_LUA && *(_DWORD *)(v4 + 48) == 3 )
      {
        common::milog::MiLogStream::create(
          &v18,
          &common::milog::MiLogDefault::default_log_obj_,
          1u,
          "./src/player/quest/player_quest_comp.cpp",
          "checkAndPushQuestGroupAction",
          5196);
        v11 = common::milog::MiLogStream::operator<<<char [23],(char *[23])0>(
                &v18,
                (const char (*)[23])"[TRIGGER_DEBUG] quest:");
        v12 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                v11,
                (const unsigned int *)(v4 + 80));
        v13 = common::milog::MiLogStream::operator<<<char [30],(char *[30])0>(
                v12,
                (const char (*)[30])" done and notify lua. player:");
        if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
          __asan_report_load8(&this->player_);
        operator<<(v13, this->player_);
        common::milog::MiLogStream::~MiLogStream(&v18);
      }
      std::queue<PlayerQuestComp::QuestActionSnapShot>::emplace<unsigned int &,unsigned int &,data::QuestState &,data::QuestExec const&>(
        &this->quest_group_action_list_,
        (unsigned int *)(v4 + 64),
        (unsigned int *)(v4 + 80),
        (data::QuestState *)(v4 + 48),
        action,
        v7,
        v15,
        (data::QuestState *)action,
        v17);
      HIBYTE(v15) = 1;
    }
  }
  std::shared_ptr<common::minet::Coroutine>::~shared_ptr((std::shared_ptr<common::minet::Coroutine> *const)(v4 + 96));
  result = HIBYTE(v15);
  if ( v19 == (char *)v4 )
  {
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8008) = 0LL;
    *(_DWORD *)((v4 >> 3) + 0x7FFF8010) = 0;
  }
  else
  {
    *(_QWORD *)v4 = 1172321806LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v4 >> 3) + 0x7FFF8010) = -168430091;
  }
  return result;
};

// Line 5203: range 0000000013DF9266-0000000013DF974D
void __cdecl PlayerQuestComp::flushQuestGroupAction(PlayerQuestComp *const this)
{
  unsigned __int64 v1; // r12
  __int64 v2; // rax
  _DWORD *v3; // r13
  const PlayerQuestComp::QuestActionSnapShot *v4; // rax
  data::QuestExecType type; // eax
  common::milog::MiLogStream *v6; // rax
  common::milog::MiLogStream *v7; // rax
  common::milog::MiLogStream *v8; // rax
  common::milog::MiLogStream *v9; // r14
  unsigned int val; // [rsp+14h] [rbp-FCh] BYREF
  const data::QuestExec *action; // [rsp+18h] [rbp-F8h]
  common::milog::MiLogStream v12; // [rsp+20h] [rbp-F0h] BYREF
  char v13[208]; // [rsp+40h] [rbp-D0h] BYREF

  v1 = (unsigned __int64)v13;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_2(160LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "2 32 16 15 player_ptr:5209 64 56 13 snapshot:5212";
  *(_QWORD *)(v1 + 16) = PlayerQuestComp::flushQuestGroupAction;
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -219021312;
  v3[536862723] = -218103808;
  v3[536862724] = -202116109;
  if ( !std::queue<PlayerQuestComp::QuestActionSnapShot>::empty(&this->quest_group_action_list_) )
  {
    if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
      __asan_report_load8(&this->player_);
    toThisPtr<Player>((Player *)(v1 + 32));
    while ( 1 )
    {
      if ( std::queue<PlayerQuestComp::QuestActionSnapShot>::empty(&this->quest_group_action_list_) )
      {
        std::shared_ptr<Player>::~shared_ptr((std::shared_ptr<Player> *const)(v1 + 32));
        break;
      }
      v4 = std::queue<PlayerQuestComp::QuestActionSnapShot>::front(&this->quest_group_action_list_);
      PlayerQuestComp::QuestActionSnapShot::QuestActionSnapShot(
        (PlayerQuestComp::QuestActionSnapShot *const)(v1 + 64),
        v4);
      std::queue<PlayerQuestComp::QuestActionSnapShot>::pop(&this->quest_group_action_list_);
      action = (const data::QuestExec *)(v1 + 80);
      if ( *(_BYTE *)(((v1 + 88) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 88) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_load4(v1 + 88);
      type = action->type;
      if ( type == QUEST_EXEC_REFRESH_WORLD_QUEST_FLOW_GROUP_SUITE_BUILTIN )
      {
        PlayerQuestComp::execRefreshWorldQuestFlowGroupSuiteBuiltIn(this, action, *(_DWORD *)(v1 + 64));
        goto LABEL_33;
      }
      if ( type > QUEST_EXEC_REFRESH_WORLD_QUEST_FLOW_GROUP_SUITE_BUILTIN )
        goto LABEL_30;
      if ( type == QUEST_EXEC_REFRESH_WORLD_QUEST_FLOW_GROUP_SUITE )
      {
        PlayerQuestComp::execRefreshWorldQuestFlowGroupSuite(this, action, *(_DWORD *)(v1 + 68));
        goto LABEL_33;
      }
      if ( type > QUEST_EXEC_REFRESH_WORLD_QUEST_FLOW_GROUP_SUITE )
        goto LABEL_30;
      if ( type == QUEST_EXEC_REFRESH_GROUP_SUITE_RANDOM )
      {
        PlayerQuestComp::execRefreshGroupSuiteRandom(this, action, *(_DWORD *)(v1 + 68));
        goto LABEL_33;
      }
      if ( type > QUEST_EXEC_REFRESH_GROUP_SUITE_RANDOM )
        goto LABEL_30;
      if ( type == QUEST_EXEC_REFRESH_GROUP_SUITE )
      {
        PlayerQuestComp::execRefreshGroupSuite(this, action, *(_DWORD *)(v1 + 68));
        goto LABEL_33;
      }
      if ( type > QUEST_EXEC_REFRESH_GROUP_SUITE )
        goto LABEL_30;
      if ( type == QUEST_EXEC_REFRESH_GROUP_MONSTER )
      {
        PlayerQuestComp::execRefreshGroupMonster(this, action, *(_DWORD *)(v1 + 68));
        goto LABEL_33;
      }
      if ( type == QUEST_EXEC_NOTIFY_GROUP_LUA )
      {
        if ( *(_DWORD *)(v1 + 68) )
        {
          PlayerQuestComp::execNotifyGroupLua(this, action, *(data::QuestState *)(v1 + 72), *(_DWORD *)(v1 + 68));
        }
        else
        {
          common::milog::MiLogStream::create(
            &v12,
            &common::milog::MiLogDefault::default_log_obj_,
            3u,
            "./src/player/quest/player_quest_comp.cpp",
            "flushQuestGroupAction",
            5227);
          v6 = common::milog::MiLogStream::operator<<<char [67],(char *[67])0>(
                 &v12,
                 (const char (*)[67])"QUEST_EXEC_NOTIFY_GROUP_LUA quest id cannot be 0, parent_quest_id:");
          common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v6, (const unsigned int *)(v1 + 64));
          common::milog::MiLogStream::~MiLogStream(&v12);
        }
      }
      else
      {
LABEL_30:
        common::milog::MiLogStream::create(
          &v12,
          &common::milog::MiLogDefault::default_log_obj_,
          4u,
          "./src/player/quest/player_quest_comp.cpp",
          "flushQuestGroupAction",
          5256);
        v7 = common::milog::MiLogStream::operator<<<char [24],(char *[24])0>(
               &v12,
               (const char (*)[24])"no support action,type:");
        v8 = common::milog::MiLogStream::operator<<<data::QuestExecType,(data::QuestExecType*)0>(v7, &action->type);
        v9 = common::milog::MiLogStream::operator<<<char [6],(char *[6])0>(v8, (const char (*)[6])" uid:");
        if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
          __asan_report_load8(&this->player_);
        val = Player::getUid(this->player_);
        common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v9, &val);
        common::milog::MiLogStream::~MiLogStream(&v12);
      }
LABEL_33:
      PlayerQuestComp::QuestActionSnapShot::~QuestActionSnapShot((PlayerQuestComp::QuestActionSnapShot *const)(v1 + 64));
    }
  }
  if ( v13 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF800C) = 0LL;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v1 >> 3) + 0x7FFF8010) = -168430091;
  }
};

// Line 5263: range 0000000013DF974E-0000000013DF9D7F
std::vector<ScenePosition> *__fastcall PlayerQuestComp::getNpcConfigPostion(
        std::vector<ScenePosition> *retstr,
        PlayerQuestComp *const this,
        uint32_t npc_id,
        uint32_t quest_id)
{
  unsigned __int64 v4; // r12
  __int64 v5; // rax
  _DWORD *v6; // r13
  std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v7; // rax
  common::milog::MiLogStream *v8; // rax
  common::milog::MiLogStream *v9; // rax
  common::milog::MiLogStream *v10; // rax
  std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v11; // rax
  const ScenePosition *M_current; // r14
  const ScenePosition *v13; // rbx
  std::vector<QuestNpcScriptConfigPosition>::const_iterator __for_begin; // [rsp+28h] [rbp-F8h] BYREF
  std::vector<QuestNpcScriptConfigPosition>::const_iterator __for_end; // [rsp+30h] [rbp-F0h] BYREF
  const data::NpcExcelConfig *npc_excel_config; // [rsp+38h] [rbp-E8h]
  const QuestNpcScriptConfig *npc_script_config; // [rsp+40h] [rbp-E0h]
  const std::vector<ScenePosition> *npc_pos_vec; // [rsp+48h] [rbp-D8h]
  const std::vector<QuestNpcScriptConfigPosition> *__for_range; // [rsp+50h] [rbp-D0h]
  const QuestNpcScriptConfigPosition *npc_pos_config; // [rsp+58h] [rbp-C8h]
  std::shared_ptr<Config> v24; // [rsp+60h] [rbp-C0h] BYREF
  char v25[176]; // [rsp+70h] [rbp-B0h] BYREF

  v4 = (unsigned __int64)v25;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v5 = __asan_stack_malloc_1(128LL);
    if ( v5 )
      v4 = v5;
  }
  *(_QWORD *)v4 = 1102416563LL;
  *(_QWORD *)(v4 + 8) = "3 32 4 11 npc_id:5262 48 4 13 quest_id:5262 64 32 7 sp:5282";
  *(_QWORD *)(v4 + 16) = PlayerQuestComp::getNpcConfigPostion;
  v6 = (_DWORD *)(v4 >> 3);
  v6[536862720] = -235802127;
  v6[536862721] = -234556924;
  v6[536862723] = -202116109;
  *(_DWORD *)(v4 + 32) = npc_id;
  *(_DWORD *)(v4 + 48) = quest_id;
  std::vector<ScenePosition>::vector(retstr);
  ServiceBox::findService<GameserverService>();
  GameserverService::getConfig((GameserverService *const)&v24);
  v7 = std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false> *const)&v24);
  npc_excel_config = data::NpcExcelConfigMgrBase::findNpcExcelConfig(
                       &v7->design_config.txt_config_mgr.npc_config_mgr,
                       *(_DWORD *)(v4 + 32));
  std::shared_ptr<Config>::~shared_ptr(&v24);
  if ( npc_excel_config )
  {
    npc_script_config = PlayerQuestComp::findQuestNpcScriptConfig(this, *(_DWORD *)(v4 + 48), *(_DWORD *)(v4 + 32));
    if ( npc_script_config )
    {
      __for_range = &npc_script_config->pos_list;
      __for_begin._M_current = std::vector<QuestNpcScriptConfigPosition>::begin(&npc_script_config->pos_list)._M_current;
      __for_end._M_current = std::vector<QuestNpcScriptConfigPosition>::end(&npc_script_config->pos_list)._M_current;
      while ( __gnu_cxx::operator!=<QuestNpcScriptConfigPosition const*,std::vector<QuestNpcScriptConfigPosition>>(
                &__for_begin,
                &__for_end) )
      {
        npc_pos_config = __gnu_cxx::__normal_iterator<QuestNpcScriptConfigPosition const*,std::vector<QuestNpcScriptConfigPosition>>::operator*(&__for_begin);
        if ( *(_BYTE *)(((unsigned __int64)&npc_pos_config->scene_id >> 3) + 0x7FFF8000) != 0
          && *(_BYTE *)(((unsigned __int64)&npc_pos_config->scene_id >> 3) + 0x7FFF8000) <= 3 )
        {
          __asan_report_load4(&npc_pos_config->scene_id);
        }
        if ( npc_pos_config->scene_id )
        {
          if ( *(_BYTE *)(((unsigned __int64)&npc_pos_config->scene_id >> 3) + 0x7FFF8000) != 0
            && *(_BYTE *)(((unsigned __int64)&npc_pos_config->scene_id >> 3) + 0x7FFF8000) <= 3 )
          {
            __asan_report_load4(&npc_pos_config->scene_id);
          }
          *(_DWORD *)(v4 + 64) = npc_pos_config->scene_id;
          if ( *(_BYTE *)(((unsigned __int64)&npc_pos_config->room_id >> 3) + 0x7FFF8000) != 0
            && (char)((((_BYTE)npc_pos_config + 60) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&npc_pos_config->room_id >> 3)
                                                                          + 0x7FFF8000) )
          {
            __asan_report_load4(&npc_pos_config->room_id);
          }
          *(_DWORD *)(v4 + 68) = npc_pos_config->room_id;
          if ( (((unsigned __int8)npc_pos_config + 44) & 7) >= *(_BYTE *)(((unsigned __int64)&npc_pos_config->rot >> 3)
                                                                        + 0x7FFF8000)
            && *(_BYTE *)(((unsigned __int64)&npc_pos_config->rot >> 3) + 0x7FFF8000) != 0
            || *(_BYTE *)((((unsigned __int64)&npc_pos_config->rot.z + 3) >> 3) + 0x7FFF8000) != 0
            && (((unsigned __int8)npc_pos_config + 55) & 7) >= *(_BYTE *)((((unsigned __int64)&npc_pos_config->rot.z + 3) >> 3)
                                                                        + 0x7FFF8000) )
          {
            __asan_report_load_n(&npc_pos_config->rot, 12LL);
          }
          *(Vector3 *)(v4 + 72) = npc_pos_config->rot;
          if ( *(char *)(((unsigned __int64)&npc_pos_config->pos >> 3) + 0x7FFF8000) < 0
            || *(_BYTE *)((((unsigned __int64)&npc_pos_config->pos.z + 3) >> 3) + 0x7FFF8000) != 0
            && (((unsigned __int8)npc_pos_config + 43) & 7) >= *(_BYTE *)((((unsigned __int64)&npc_pos_config->pos.z + 3) >> 3)
                                                                        + 0x7FFF8000) )
          {
            __asan_report_load_n(&npc_pos_config->pos, 12LL);
          }
          *(Vector3 *)(v4 + 84) = npc_pos_config->pos;
          std::vector<ScenePosition>::emplace_back<ScenePosition&>(
            retstr,
            (ScenePosition *)(v4 + 64),
            (ScenePosition *)(v4 + 64));
        }
        __gnu_cxx::__normal_iterator<QuestNpcScriptConfigPosition const*,std::vector<QuestNpcScriptConfigPosition>>::operator++(&__for_begin);
      }
    }
    else
    {
      if ( *(_BYTE *)(((unsigned __int64)&npc_excel_config->is_daily >> 3) + 0x7FFF8000) != 0
        && (((unsigned __int8)npc_excel_config - 69) & 7) >= *(_BYTE *)(((unsigned __int64)&npc_excel_config->is_daily >> 3)
                                                                      + 0x7FFF8000) )
      {
        __asan_report_load1(&npc_excel_config->is_daily);
      }
      if ( npc_excel_config->is_daily )
      {
        ServiceBox::findService<GameserverService>();
        GameserverService::getConfig((GameserverService *const)&v24);
        v11 = std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false> *const)&v24);
        npc_pos_vec = JsonConfigMgr::findNpcBornConfig(&v11->design_config.json_config_mgr, *(_DWORD *)(v4 + 32));
        std::shared_ptr<Config>::~shared_ptr(&v24);
        M_current = std::vector<ScenePosition>::end(npc_pos_vec)._M_current;
        v13 = std::vector<ScenePosition>::begin(npc_pos_vec)._M_current;
        __for_begin._M_current = (const QuestNpcScriptConfigPosition *)std::vector<ScenePosition>::end(retstr)._M_current;
        __gnu_cxx::__normal_iterator<ScenePosition const*,std::vector<ScenePosition>>::__normal_iterator<ScenePosition*>(
          (__gnu_cxx::__normal_iterator<const ScenePosition*,std::vector<ScenePosition> > *const)&__for_end,
          (const __gnu_cxx::__normal_iterator<ScenePosition*,std::vector<ScenePosition> > *)&__for_begin);
        std::vector<ScenePosition>::insert<__gnu_cxx::__normal_iterator<ScenePosition const*,std::vector<ScenePosition>>,void>(
          retstr,
          (std::vector<ScenePosition>::const_iterator)__for_end._M_current,
          (__gnu_cxx::__normal_iterator<const ScenePosition*,std::vector<ScenePosition> >)v13,
          (__gnu_cxx::__normal_iterator<const ScenePosition*,std::vector<ScenePosition> >)M_current);
      }
    }
  }
  else
  {
    common::milog::MiLogStream::create(
      (common::milog::MiLogStream *)(v4 + 64),
      &common::milog::MiLogDefault::default_log_obj_,
      4u,
      "./src/player/quest/player_quest_comp.cpp",
      "getNpcConfigPostion",
      5268);
    v8 = common::milog::MiLogStream::operator<<<char [39],(char *[39])0>(
           (common::milog::MiLogStream *const)(v4 + 64),
           (const char (*)[39])"find findNpcExcelConfig failed,npc_id:");
    v9 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v8, (const unsigned int *)(v4 + 32));
    v10 = common::milog::MiLogStream::operator<<<char [12],(char *[12])0>(v9, (const char (*)[12])", quest_id:");
    common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v10, (const unsigned int *)(v4 + 48));
    common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v4 + 64));
  }
  if ( v25 == (char *)v4 )
  {
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0LL;
    *(_DWORD *)((v4 >> 3) + 0x7FFF800C) = 0;
  }
  else
  {
    *(_QWORD *)v4 = 1172321806LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return retstr;
};

// Line 5299: range 0000000013DF9D80-0000000013DF9DAF
bool __cdecl PlayerQuestComp::isQuestContentItemRelated(
        PlayerQuestComp *const this,
        data::QuestContentType content_type)
{
  return content_type == QUEST_CONTENT_OBTAIN_VARIOUS_ITEM
      || content_type <= QUEST_CONTENT_OBTAIN_VARIOUS_ITEM
      && (content_type == QUEST_CONTENT_OBTAIN_ITEM || content_type == QUEST_CONTENT_ITEM_LESS_THAN);
};

// Line 5314: range 0000000013DF9DB0-0000000013DFAAD2
__int64 __fastcall PlayerQuestComp::getNpcOccupiedQuest(
        PlayerQuestComp *const this,
        uint32_t npc_id,
        uint32_t quest_id,
        __m128i a4)
{
  unsigned int v4; // r14d
  unsigned __int64 v5; // r13
  __int64 v6; // rax
  _DWORD *v7; // r12
  common::milog::MiLogStream *v8; // rax
  common::milog::MiLogStream *v9; // rax
  common::milog::MiLogStream *v10; // rax
  std::_Rb_tree_iterator<std::pair<unsigned int const,std::set<unsigned int> > >::pointer v11; // rax
  const unsigned int *v13; // rax
  std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v14; // rax
  common::milog::MiLogStream *v15; // rax
  common::milog::MiLogStream *v16; // rax
  common::milog::MiLogStream *v17; // rax
  common::milog::MiLogStream *v18; // rax
  common::milog::MiLogStream *v19; // rax
  int v20; // r15d
  common::milog::MiLogStream *v21; // rax
  common::milog::MiLogStream *v22; // rax
  common::milog::MiLogStream *v23; // rax
  ScenePosition *v24; // rax
  uint32_t scene_id; // ecx
  uint32_t root_id; // ecx
  std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v27; // rax
  float NpcConflictDistance; // xmm0_4
  float v29; // xmm1_4
  common::milog::MiLogStream *v30; // rax
  common::milog::MiLogStream *v31; // rax
  common::milog::MiLogStream *v32; // rax
  common::milog::MiLogStream *v33; // rax
  common::milog::MiLogStream *v34; // rax
  common::milog::MiLogStream *v35; // rax
  common::milog::MiLogStream *v36; // r14
  std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v37; // rax
  common::milog::MiLogStream *v38; // rax
  common::milog::MiLogStream *v39; // rax
  common::milog::MiLogStream *v40; // rax
  common::milog::MiLogStream *v41; // rax
  __int64 result; // rax
  unsigned int val; // [rsp+2Ch] [rbp-1F4h] BYREF
  uint32_t parent_quest_id; // [rsp+30h] [rbp-1F0h]
  uint32_t parent_occupied_quest_id; // [rsp+34h] [rbp-1ECh]
  std::set<unsigned int>::iterator __for_begin; // [rsp+38h] [rbp-1E8h] BYREF
  std::set<unsigned int>::iterator __for_end; // [rsp+40h] [rbp-1E0h] BYREF
  std::vector<ScenePosition>::iterator __for_begin_0; // [rsp+48h] [rbp-1D8h] BYREF
  std::vector<ScenePosition>::iterator __for_end_0; // [rsp+50h] [rbp-1D0h] BYREF
  std::vector<ScenePosition>::iterator __for_begin_1; // [rsp+58h] [rbp-1C8h] BYREF
  std::vector<ScenePosition>::iterator __for_end_1; // [rsp+60h] [rbp-1C0h] BYREF
  std::set<unsigned int> *__for_range; // [rsp+68h] [rbp-1B8h]
  const unsigned int *occupied_quest_id; // [rsp+70h] [rbp-1B0h]
  const data::NpcExcelConfig *npc_config_ptr; // [rsp+78h] [rbp-1A8h]
  std::vector<ScenePosition> *__for_range_0; // [rsp+80h] [rbp-1A0h]
  ScenePosition *occupied_sp; // [rsp+88h] [rbp-198h]
  std::vector<ScenePosition> *__for_range_1; // [rsp+90h] [rbp-190h]
  ScenePosition *sp_0; // [rsp+98h] [rbp-188h]
  std::shared_ptr<Config> v60; // [rsp+A0h] [rbp-180h] BYREF
  std::vector<ScenePosition> __x; // [rsp+B0h] [rbp-170h] BYREF
  common::milog::MiLogStream v62; // [rsp+D0h] [rbp-150h] BYREF
  char v63[304]; // [rsp+F0h] [rbp-130h] BYREF

  v5 = (unsigned __int64)v63;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v6 = __asan_stack_malloc_2(256LL);
    if ( v6 )
      v5 = v6;
  }
  *(_QWORD *)v5 = 1102416563LL;
  *(_QWORD *)(v5 + 8) = "6 48 4 8 dis:5364 64 4 11 npc_id:5313 80 4 13 quest_id:5313 96 8 7 it:5323 128 24 12 pos_vec:531"
                        "6 192 24 21 occupied_pos_vec:5331";
  *(_QWORD *)(v5 + 16) = PlayerQuestComp::getNpcOccupiedQuest;
  v7 = (_DWORD *)(v5 >> 3);
  v7[536862720] = -235802127;
  v7[536862721] = -234556943;
  v7[536862722] = -234556924;
  v7[536862723] = -218959360;
  v7[536862724] = -234881024;
  v7[536862725] = -218959118;
  v7[536862726] = -218103808;
  v7[536862727] = -202116109;
  *(_DWORD *)(v5 + 64) = npc_id;
  *(_DWORD *)(v5 + 80) = quest_id;
  parent_quest_id = PlayerQuestComp::findParentQuestId(this, *(_DWORD *)(v5 + 80));
  PlayerQuestComp::getNpcConfigPostion(
    (std::vector<ScenePosition> *)(v5 + 128),
    this,
    *(_DWORD *)(v5 + 64),
    *(_DWORD *)(v5 + 80));
  if ( std::vector<ScenePosition>::empty((const std::vector<ScenePosition> *const)(v5 + 128)) )
  {
    common::milog::MiLogStream::create(
      &v62,
      &common::milog::MiLogDefault::default_log_obj_,
      1u,
      "./src/player/quest/player_quest_comp.cpp",
      "getNpcOccupiedQuest",
      5319);
    v8 = common::milog::MiLogStream::operator<<<char [33],(char *[33])0>(
           &v62,
           (const char (*)[33])"cannot find npc postion, npc_id:");
    v9 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v8, (const unsigned int *)(v5 + 64));
    v10 = common::milog::MiLogStream::operator<<<char [12],(char *[12])0>(v9, (const char (*)[12])", quest_id:");
    common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v10, (const unsigned int *)(v5 + 80));
    common::milog::MiLogStream::~MiLogStream(&v62);
    v4 = 0;
  }
  else
  {
    *(std::map<unsigned int,std::set<unsigned int>>::iterator *)(v5 + 96) = std::map<unsigned int,std::set<unsigned int>>::find(
                                                                              &this->occupied_npc_map_,
                                                                              (const std::map<unsigned int,std::set<unsigned int>>::key_type *)(v5 + 64));
    __for_end_1._M_current = (ScenePosition *)std::map<unsigned int,std::set<unsigned int>>::end(&this->occupied_npc_map_)._M_node;
    if ( std::operator!=(
           (const std::_Rb_tree_iterator<std::pair<unsigned int const,std::set<unsigned int> > >::_Self *)(v5 + 96),
           (const std::_Rb_tree_iterator<std::pair<unsigned int const,std::set<unsigned int> > >::_Self *)&__for_end_1) )
    {
      v11 = std::_Rb_tree_iterator<std::pair<unsigned int const,std::set<unsigned int>>>::operator->((const std::_Rb_tree_iterator<std::pair<unsigned int const,std::set<unsigned int> > > *const)(v5 + 96));
      if ( !std::set<unsigned int>::empty(&v11->second) )
      {
        __for_range = &std::_Rb_tree_iterator<std::pair<unsigned int const,std::set<unsigned int>>>::operator->((const std::_Rb_tree_iterator<std::pair<unsigned int const,std::set<unsigned int> > > *const)(v5 + 96))->second;
        __for_begin._M_node = std::set<unsigned int>::begin(__for_range)._M_node;
        __for_end._M_node = std::set<unsigned int>::end(__for_range)._M_node;
        while ( std::operator!=(&__for_begin, &__for_end) )
        {
          v13 = std::_Rb_tree_const_iterator<unsigned int>::operator*(&__for_begin);
          occupied_quest_id = v13;
          if ( *(_BYTE *)(((unsigned __int64)v13 >> 3) + 0x7FFF8000) != 0
            && (char)(((unsigned __int8)v13 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)v13 >> 3) + 0x7FFF8000) )
          {
            __asan_report_load4(v13);
          }
          parent_occupied_quest_id = PlayerQuestComp::findParentQuestId(this, *occupied_quest_id);
          if ( parent_quest_id != parent_occupied_quest_id )
          {
            std::vector<ScenePosition>::vector((std::vector<ScenePosition> *const)(v5 + 192));
            ServiceBox::findService<GameserverService>();
            GameserverService::getConfig((GameserverService *const)&v60);
            v14 = std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false> *const)&v60);
            npc_config_ptr = data::NpcExcelConfigMgrBase::findNpcExcelConfig(
                               &v14->design_config.txt_config_mgr.npc_config_mgr,
                               *(_DWORD *)(v5 + 64));
            std::shared_ptr<Config>::~shared_ptr(&v60);
            if ( !npc_config_ptr )
              goto LABEL_62;
            if ( *(_BYTE *)(((unsigned __int64)&npc_config_ptr->is_daily >> 3) + 0x7FFF8000) != 0
              && (((unsigned __int8)npc_config_ptr - 69) & 7) >= *(_BYTE *)(((unsigned __int64)&npc_config_ptr->is_daily >> 3)
                                                                          + 0x7FFF8000) )
            {
              __asan_report_load1(&npc_config_ptr->is_daily);
            }
            if ( npc_config_ptr->is_daily )
            {
              common::milog::MiLogStream::create(
                &v62,
                &common::milog::MiLogDefault::default_log_obj_,
                1u,
                "./src/player/quest/player_quest_comp.cpp",
                "getNpcOccupiedQuest",
                5344);
              v15 = common::milog::MiLogStream::operator<<<char [20],(char *[20])0>(
                      &v62,
                      (const char (*)[20])off_251684E0);
              v16 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                      v15,
                      (const unsigned int *)(v5 + 64));
              v17 = common::milog::MiLogStream::operator<<<char [21],(char *[21])0>(
                      v16,
                      (const char (*)[21])off_25168520);
              v18 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v17, occupied_quest_id);
              v19 = common::milog::MiLogStream::operator<<<char [15],(char *[15])0>(
                      v18,
                      (const char (*)[15])" now quest_id:");
              common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                v19,
                (const unsigned int *)(v5 + 80));
              common::milog::MiLogStream::~MiLogStream(&v62);
              if ( *(_BYTE *)(((unsigned __int64)occupied_quest_id >> 3) + 0x7FFF8000) != 0
                && (char)(((unsigned __int8)occupied_quest_id & 7) + 3) >= *(_BYTE *)(((unsigned __int64)occupied_quest_id >> 3)
                                                                                    + 0x7FFF8000) )
              {
                __asan_report_load4(occupied_quest_id);
              }
              v4 = *occupied_quest_id;
              v20 = 0;
            }
            else
            {
LABEL_62:
              if ( *(_BYTE *)(((unsigned __int64)occupied_quest_id >> 3) + 0x7FFF8000) != 0
                && (char)(((unsigned __int8)occupied_quest_id & 7) + 3) >= *(_BYTE *)(((unsigned __int64)occupied_quest_id >> 3)
                                                                                    + 0x7FFF8000) )
              {
                __asan_report_load4(occupied_quest_id);
              }
              PlayerQuestComp::getNpcConfigPostion(&__x, this, *(_DWORD *)(v5 + 64), *occupied_quest_id);
              std::vector<ScenePosition>::operator=((std::vector<ScenePosition> *const)(v5 + 192), &__x);
              std::vector<ScenePosition>::~vector(&__x);
              if ( std::vector<ScenePosition>::empty((const std::vector<ScenePosition> *const)(v5 + 192)) )
              {
                common::milog::MiLogStream::create(
                  &v62,
                  &common::milog::MiLogDefault::default_log_obj_,
                  1u,
                  "./src/player/quest/player_quest_comp.cpp",
                  "getNpcOccupiedQuest",
                  5353);
                v21 = common::milog::MiLogStream::operator<<<char [33],(char *[33])0>(
                        &v62,
                        (const char (*)[33])"cannot find npc postion, npc_id:");
                v22 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                        v21,
                        (const unsigned int *)(v5 + 64));
                v23 = common::milog::MiLogStream::operator<<<char [12],(char *[12])0>(
                        v22,
                        (const char (*)[12])", quest_id:");
                common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v23, occupied_quest_id);
                common::milog::MiLogStream::~MiLogStream(&v62);
                v20 = 1;
              }
              else
              {
                __for_range_0 = (std::vector<ScenePosition> *)(v5 + 192);
                __for_begin_0._M_current = std::vector<ScenePosition>::begin((std::vector<ScenePosition> *const)(v5 + 192))._M_current;
                __for_end_0._M_current = std::vector<ScenePosition>::end(__for_range_0)._M_current;
LABEL_28:
                if ( __gnu_cxx::operator!=<ScenePosition *,std::vector<ScenePosition>>(&__for_begin_0, &__for_end_0) )
                {
                  occupied_sp = __gnu_cxx::__normal_iterator<ScenePosition *,std::vector<ScenePosition>>::operator*(&__for_begin_0);
                  __for_range_1 = (std::vector<ScenePosition> *)(v5 + 128);
                  __for_begin_1._M_current = std::vector<ScenePosition>::begin((std::vector<ScenePosition> *const)(v5 + 128))._M_current;
                  __for_end_1._M_current = std::vector<ScenePosition>::end(__for_range_1)._M_current;
                  while ( 1 )
                  {
                    if ( !__gnu_cxx::operator!=<ScenePosition *,std::vector<ScenePosition>>(
                            &__for_begin_1,
                            &__for_end_1) )
                    {
                      __gnu_cxx::__normal_iterator<ScenePosition *,std::vector<ScenePosition>>::operator++(&__for_begin_0);
                      goto LABEL_28;
                    }
                    v24 = __gnu_cxx::__normal_iterator<ScenePosition *,std::vector<ScenePosition>>::operator*(&__for_begin_1);
                    sp_0 = v24;
                    if ( *(_BYTE *)(((unsigned __int64)v24 >> 3) + 0x7FFF8000) != 0
                      && (char)(((unsigned __int8)v24 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)v24 >> 3) + 0x7FFF8000) )
                    {
                      __asan_report_load4(v24);
                    }
                    if ( sp_0->scene_id )
                    {
                      if ( *(_BYTE *)(((unsigned __int64)occupied_sp >> 3) + 0x7FFF8000) != 0
                        && (char)(((unsigned __int8)occupied_sp & 7) + 3) >= *(_BYTE *)(((unsigned __int64)occupied_sp >> 3)
                                                                                      + 0x7FFF8000) )
                      {
                        __asan_report_load4(occupied_sp);
                      }
                      if ( occupied_sp->scene_id )
                      {
                        if ( *(_BYTE *)(((unsigned __int64)sp_0 >> 3) + 0x7FFF8000) != 0
                          && (char)(((unsigned __int8)sp_0 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)sp_0 >> 3)
                                                                                 + 0x7FFF8000) )
                        {
                          __asan_report_load4(sp_0);
                        }
                        scene_id = sp_0->scene_id;
                        if ( *(_BYTE *)(((unsigned __int64)occupied_sp >> 3) + 0x7FFF8000) != 0
                          && (char)(((unsigned __int8)occupied_sp & 7) + 3) >= *(_BYTE *)(((unsigned __int64)occupied_sp >> 3)
                                                                                        + 0x7FFF8000) )
                        {
                          __asan_report_load4(occupied_sp);
                        }
                        if ( scene_id == occupied_sp->scene_id )
                        {
                          if ( *(_BYTE *)(((unsigned __int64)&sp_0->root_id >> 3) + 0x7FFF8000) != 0
                            && (char)((((_BYTE)sp_0 + 4) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&sp_0->root_id >> 3)
                                                                               + 0x7FFF8000) )
                          {
                            __asan_report_load4(&sp_0->root_id);
                          }
                          root_id = sp_0->root_id;
                          if ( *(_BYTE *)(((unsigned __int64)&occupied_sp->root_id >> 3) + 0x7FFF8000) != 0
                            && (char)((((_BYTE)occupied_sp + 4) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&occupied_sp->root_id >> 3)
                                                                                      + 0x7FFF8000) )
                          {
                            __asan_report_load4(&occupied_sp->root_id);
                          }
                          if ( root_id == occupied_sp->root_id )
                          {
                            *(float *)a4.m128i_i32 = getPlaneDistance(&sp_0->pos, &occupied_sp->pos);
                            *(_DWORD *)(v5 + 48) = _mm_cvtsi128_si32(a4);
                            ServiceBox::findService<GameserverService>();
                            GameserverService::getConfig((GameserverService *const)&v60);
                            v27 = std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false> *const)&v60);
                            NpcConflictDistance = (float)(int)ConstValueExcelConfigMgr::getNpcConflictDistance(&v27->design_config.txt_config_mgr.const_value_config_mgr);
                            v29 = *(float *)(v5 + 48);
                            std::shared_ptr<Config>::~shared_ptr(&v60);
                            if ( NpcConflictDistance > v29 )
                              break;
                          }
                        }
                      }
                    }
                    __gnu_cxx::__normal_iterator<ScenePosition *,std::vector<ScenePosition>>::operator++(&__for_begin_1);
                  }
                  common::milog::MiLogStream::create(
                    &v62,
                    &common::milog::MiLogDefault::default_log_obj_,
                    1u,
                    "./src/player/quest/player_quest_comp.cpp",
                    "getNpcOccupiedQuest",
                    5367);
                  v30 = common::milog::MiLogStream::operator<<<char [21],(char *[21])0>(
                          &v62,
                          (const char (*)[21])off_251685A0);
                  v31 = operator<<(v30, &occupied_sp->pos);
                  v32 = common::milog::MiLogStream::operator<<<char [17],(char *[17])0>(
                          v31,
                          (const char (*)[17])" npc script pos:");
                  v33 = operator<<(v32, &sp_0->pos);
                  v34 = common::milog::MiLogStream::operator<<<char [6],(char *[6])0>(v33, (const char (*)[6])" dis:");
                  v35 = common::milog::MiLogStream::operator<<<float,(float *)0>(v34, (const float *)(v5 + 48));
                  v36 = common::milog::MiLogStream::operator<<<char [20],(char *[20])0>(
                          v35,
                          (const char (*)[20])off_25168660);
                  ServiceBox::findService<GameserverService>();
                  GameserverService::getConfig((GameserverService *const)&v60);
                  v37 = std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false> *const)&v60);
                  val = ConstValueExcelConfigMgr::getNpcConflictDistance(&v37->design_config.txt_config_mgr.const_value_config_mgr);
                  v38 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v36, &val);
                  v39 = common::milog::MiLogStream::operator<<<char [20],(char *[20])0>(
                          v38,
                          (const char (*)[20])" occupied_quest_id:");
                  v40 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v39, occupied_quest_id);
                  v41 = common::milog::MiLogStream::operator<<<char [11],(char *[11])0>(
                          v40,
                          (const char (*)[11])" quest id:");
                  common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                    v41,
                    (const unsigned int *)(v5 + 80));
                  std::shared_ptr<Config>::~shared_ptr(&v60);
                  common::milog::MiLogStream::~MiLogStream(&v62);
                  if ( *(_BYTE *)(((unsigned __int64)occupied_quest_id >> 3) + 0x7FFF8000) != 0
                    && (char)(((unsigned __int8)occupied_quest_id & 7) + 3) >= *(_BYTE *)(((unsigned __int64)occupied_quest_id >> 3)
                                                                                        + 0x7FFF8000) )
                  {
                    __asan_report_load4(occupied_quest_id);
                  }
                  v4 = *occupied_quest_id;
                  v20 = 0;
                }
                else
                {
                  v20 = 2;
                }
              }
            }
            std::vector<ScenePosition>::~vector((std::vector<ScenePosition> *const)(v5 + 192));
            if ( !v20 )
              goto LABEL_57;
          }
          std::_Rb_tree_const_iterator<unsigned int>::operator++(&__for_begin);
        }
      }
    }
    v4 = 0;
  }
LABEL_57:
  std::vector<ScenePosition>::~vector((std::vector<ScenePosition> *const)(v5 + 128));
  result = v4;
  if ( v63 == (char *)v5 )
  {
    *(_QWORD *)((v5 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8008) = 0LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8010) = 0LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8018) = 0LL;
  }
  else
  {
    *(_QWORD *)v5 = 1172321806LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 5382: range 0000000013DFAAD4-0000000013DFAB00
bool __cdecl PlayerQuestComp::isNpcOccupied(PlayerQuestComp *const this, uint32_t npc_id, uint32_t quest_id)
{
  __m128i v3; // xmm0

  return (unsigned int)PlayerQuestComp::getNpcOccupiedQuest(this, npc_id, quest_id, v3) != 0;
};

// Line 5387: range 0000000013DFAB02-0000000013DFAD0B
__int64 __fastcall PlayerQuestComp::isNpcOccupied(PlayerQuestComp *const this, uint32_t npc_id)
{
  unsigned __int64 v2; // rbx
  __int64 v3; // rax
  _DWORD *v4; // r12
  std::_Rb_tree_iterator<std::pair<unsigned int const,std::set<unsigned int> > >::pointer v5; // rax
  common::milog::MiLogStream *v7; // rax
  __int64 result; // rax
  std::_Rb_tree_iterator<std::pair<unsigned int const,std::set<unsigned int> > >::_Self __y; // [rsp+18h] [rbp-A8h] BYREF
  common::milog::MiLogStream v10; // [rsp+20h] [rbp-A0h] BYREF
  char v11[128]; // [rsp+40h] [rbp-80h] BYREF

  v2 = (unsigned __int64)v11;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_1(96LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "2 48 4 11 npc_id:5386 64 8 7 it:5388";
  *(_QWORD *)(v2 + 16) = PlayerQuestComp::isNpcOccupied;
  v4 = (_DWORD *)(v2 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = -234556943;
  v4[536862722] = -202116352;
  *(_DWORD *)(v2 + 48) = npc_id;
  *(std::map<unsigned int,std::set<unsigned int>>::iterator *)(v2 + 64) = std::map<unsigned int,std::set<unsigned int>>::find(
                                                                            &this->occupied_npc_map_,
                                                                            (const std::map<unsigned int,std::set<unsigned int>>::key_type *)(v2 + 48));
  __y._M_node = std::map<unsigned int,std::set<unsigned int>>::end(&this->occupied_npc_map_)._M_node;
  if ( std::operator!=(
         (const std::_Rb_tree_iterator<std::pair<unsigned int const,std::set<unsigned int> > >::_Self *)(v2 + 64),
         &__y)
    && (v5 = std::_Rb_tree_iterator<std::pair<unsigned int const,std::set<unsigned int>>>::operator->((const std::_Rb_tree_iterator<std::pair<unsigned int const,std::set<unsigned int> > > *const)(v2 + 64)),
        !std::set<unsigned int>::empty(&v5->second)) )
  {
    common::milog::MiLogStream::create(
      &v10,
      &common::milog::MiLogDefault::default_log_obj_,
      1u,
      "./src/player/quest/player_quest_comp.cpp",
      "isNpcOccupied",
      5391);
    v7 = common::milog::MiLogStream::operator<<<char [23],(char *[23])0>(&v10, (const char (*)[23])off_251687A0);
    common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v7, (const unsigned int *)(v2 + 48));
    common::milog::MiLogStream::~MiLogStream(&v10);
    result = 1LL;
  }
  else
  {
    result = 0LL;
  }
  if ( v11 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8008) = 0;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8008) = -168430091;
  }
  return result;
};

// Line 5399: range 0000000013DFAD0C-0000000013DFB5CF
void __fastcall PlayerQuestComp::execCreatePatternGroup(
        PlayerQuestComp *const this,
        const data::QuestExec *exec,
        uint32_t parent_quest_id)
{
  unsigned __int64 v3; // r12
  __int64 v4; // rax
  _DWORD *v5; // r13
  std::__shared_ptr_access<PlayerWorldScene,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v6; // rax
  const std::string *v7; // rax
  common::milog::MiLogStream *v8; // r14
  const std::string *v9; // rax
  common::milog::MiLogStream *v10; // rax
  std::vector<std::string>::const_reference v11; // rax
  common::milog::MiLogStream *v12; // r14
  const std::string *v13; // rax
  const std::string *v14; // rax
  common::milog::MiLogStream *v16; // r14
  const std::string *v17; // rax
  PlayerWorldScene *v18; // rax
  SceneEncounterComp *EncounterComp; // rax
  Scene *v20; // rax
  SceneBlockGroupComp *BlockGroupComp; // rax
  common::milog::MiLogStream *v22; // rax
  common::milog::MiLogStream *v23; // rax
  common::milog::MiLogStream *v24; // r14
  common::milog::MiLogStream *v25; // r14
  common::milog::MiLogStream *v26; // rax
  common::milog::MiLogStream *v27; // rax
  common::milog::MiLogStream *v28; // rax
  common::milog::MiLogStream *v29; // rax
  common::milog::MiLogStream *v30; // rax
  common::milog::MiLogStream *v31; // rax
  unsigned int val; // [rsp+2Ch] [rbp-E4h] BYREF
  const SceneScriptConfig *scene_config_ptr; // [rsp+30h] [rbp-E0h]
  const DummyPointScriptConfig *point_config_ptr; // [rsp+38h] [rbp-D8h]
  common::milog::MiLogStream v36; // [rsp+40h] [rbp-D0h] BYREF
  char v37[176]; // [rsp+60h] [rbp-B0h] BYREF

  v3 = (unsigned __int64)v37;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_1(128LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "5 32 4 15 pattern_id:5417 48 4 17 revise_level:5429 64 4 13 group_id:5440 80 4 20 parent_quest_i"
                        "d:5398 96 16 20 world_scene_ptr:5400";
  *(_QWORD *)(v3 + 16) = PlayerQuestComp::execCreatePatternGroup;
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = -234556924;
  v5[536862722] = -234556924;
  v5[536862723] = -202178560;
  *(_DWORD *)(v3 + 80) = parent_quest_id;
  if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
    __asan_report_load8(&this->player_);
  Player::getSceneComp(this->player_);
  PlayerSceneComp::getMainWorldScene((PlayerSceneComp *const)(v3 + 96));
  if ( std::operator==<PlayerWorldScene>((const std::shared_ptr<PlayerWorldScene> *)(v3 + 96), 0LL) )
  {
    common::milog::MiLogStream::create(
      &v36,
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/player/quest/player_quest_comp.cpp",
      "execCreatePatternGroup",
      5403);
    common::milog::MiLogStream::operator<<<char [24],(char *[24])0>(&v36, (const char (*)[24])"getMainWorldScene fails");
    common::milog::MiLogStream::~MiLogStream(&v36);
  }
  else
  {
    v6 = std::__shared_ptr_access<PlayerWorldScene,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<PlayerWorldScene,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 96));
    scene_config_ptr = Scene::getScriptConfig((const Scene *const)v6);
    if ( scene_config_ptr )
    {
      if ( std::vector<std::string>::size(&exec->param) > 1 )
      {
        *(_DWORD *)(v3 + 32) = 0;
        v7 = std::vector<std::string>::operator[](&exec->param, 0LL);
        if ( common::tools::StringUtils::strToNum<unsigned int>(v7, (unsigned int *)(v3 + 32), 1) )
        {
          common::milog::MiLogStream::create(
            &v36,
            &common::milog::MiLogDefault::default_log_obj_,
            3u,
            "./src/player/quest/player_quest_comp.cpp",
            "execCreatePatternGroup",
            5420);
          v8 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                 &v36,
                 (const char (*)[16])"exec.param[0]: ");
          v9 = std::vector<std::string>::operator[](&exec->param, 0LL);
          v10 = common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v8, v9);
          common::milog::MiLogStream::operator<<<char [23],(char *[23])0>(v10, (const char (*)[23])off_25168980);
          common::milog::MiLogStream::~MiLogStream(&v36);
        }
        else
        {
          v11 = std::vector<std::string>::operator[](&exec->param, 1uLL);
          std::string::basic_string(&v36, v11);
          point_config_ptr = SceneScriptConfig::findDummyPointScriptConfig(scene_config_ptr, (std::string *)&v36);
          std::string::~string(&v36);
          if ( point_config_ptr )
          {
            *(_DWORD *)(v3 + 48) = 0;
            if ( std::vector<std::string>::size(&exec->param) > 2
              && (v14 = std::vector<std::string>::operator[](&exec->param, 2uLL),
                  common::tools::StringUtils::strToNum<unsigned int>(v14, (unsigned int *)(v3 + 48), 1)) )
            {
              common::milog::MiLogStream::create(
                &v36,
                &common::milog::MiLogDefault::default_log_obj_,
                3u,
                "./src/player/quest/player_quest_comp.cpp",
                "execCreatePatternGroup",
                5432);
              v16 = common::milog::MiLogStream::operator<<<char [31],(char *[31])0>(
                      &v36,
                      (const char (*)[31])"exec.param[2] strToNum fails, ");
              v17 = std::vector<std::string>::operator[](&exec->param, 2uLL);
              common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v16, v17);
              common::milog::MiLogStream::~MiLogStream(&v36);
            }
            else
            {
              if ( !*(_DWORD *)(v3 + 48) )
              {
                v18 = std::__shared_ptr_access<PlayerWorldScene,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<PlayerWorldScene,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 96));
                EncounterComp = PlayerWorldScene::getEncounterComp(v18);
                *(_DWORD *)(v3 + 48) = SceneEncounterComp::getLastZoneLevel(EncounterComp);
              }
              v20 = (Scene *)std::__shared_ptr_access<PlayerWorldScene,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<PlayerWorldScene,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 96));
              BlockGroupComp = Scene::getBlockGroupComp(v20);
              *(_DWORD *)(v3 + 64) = SceneBlockGroupComp::createPatternGroup(
                                       BlockGroupComp,
                                       *(_DWORD *)(v3 + 32),
                                       &point_config_ptr->pos,
                                       *(_DWORD *)(v3 + 48),
                                       *(_DWORD *)(v3 + 80));
              if ( *(_DWORD *)(v3 + 64) )
              {
                common::milog::MiLogStream::create(
                  &v36,
                  &common::milog::MiLogDefault::default_log_obj_,
                  1u,
                  "./src/player/quest/player_quest_comp.cpp",
                  "execCreatePatternGroup",
                  5447);
                v25 = common::milog::MiLogStream::operator<<<char [6],(char *[6])0>(&v36, (const char (*)[6])"uid: ");
                if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
                  __asan_report_load8(&this->player_);
                val = Player::getUid(this->player_);
                v26 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v25, &val);
                v27 = common::milog::MiLogStream::operator<<<char [19],(char *[19])0>(
                        v26,
                        (const char (*)[19])" parent_quest_id: ");
                v28 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                        v27,
                        (const unsigned int *)(v3 + 80));
                v29 = common::milog::MiLogStream::operator<<<char [17],(char *[17])0>(
                        v28,
                        (const char (*)[17])" createPattern: ");
                v30 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                        v29,
                        (const unsigned int *)(v3 + 32));
                v31 = common::milog::MiLogStream::operator<<<char [2],(char *[2])0>(v30, (const char (*)[2])",");
                common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                  v31,
                  (const unsigned int *)(v3 + 64));
                common::milog::MiLogStream::~MiLogStream(&v36);
              }
              else
              {
                common::milog::MiLogStream::create(
                  &v36,
                  &common::milog::MiLogDefault::default_log_obj_,
                  3u,
                  "./src/player/quest/player_quest_comp.cpp",
                  "execCreatePatternGroup",
                  5443);
                v22 = common::milog::MiLogStream::operator<<<char [39],(char *[39])0>(
                        &v36,
                        (const char (*)[39])"createPatternGroup fails, pattern_id: ");
                v23 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                        v22,
                        (const unsigned int *)(v3 + 32));
                v24 = common::milog::MiLogStream::operator<<<char [7],(char *[7])0>(v23, (const char (*)[7])" uid: ");
                if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
                  __asan_report_load8(&this->player_);
                val = Player::getUid(this->player_);
                common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v24, &val);
                common::milog::MiLogStream::~MiLogStream(&v36);
              }
            }
          }
          else
          {
            common::milog::MiLogStream::create(
              &v36,
              &common::milog::MiLogDefault::default_log_obj_,
              3u,
              "./src/player/quest/player_quest_comp.cpp",
              "execCreatePatternGroup",
              5426);
            v12 = common::milog::MiLogStream::operator<<<char [35],(char *[35])0>(
                    &v36,
                    (const char (*)[35])"findDummyPointScriptConfig fails, ");
            v13 = std::vector<std::string>::operator[](&exec->param, 1uLL);
            common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v12, v13);
            common::milog::MiLogStream::~MiLogStream(&v36);
          }
        }
      }
      else
      {
        common::milog::MiLogStream::create(
          &v36,
          &common::milog::MiLogDefault::default_log_obj_,
          3u,
          "./src/player/quest/player_quest_comp.cpp",
          "execCreatePatternGroup",
          5414);
        common::milog::MiLogStream::operator<<<char [24],(char *[24])0>(
          &v36,
          (const char (*)[24])"QuestExec config failed");
        common::milog::MiLogStream::~MiLogStream(&v36);
      }
    }
    else
    {
      common::milog::MiLogStream::create(
        &v36,
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/player/quest/player_quest_comp.cpp",
        "execCreatePatternGroup",
        5409);
      common::milog::MiLogStream::operator<<<char [22],(char *[22])0>(&v36, (const char (*)[22])"getScriptConfig fails");
      common::milog::MiLogStream::~MiLogStream(&v36);
    }
  }
  std::shared_ptr<PlayerWorldScene>::~shared_ptr((std::shared_ptr<PlayerWorldScene> *const)(v3 + 96));
  if ( v37 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
};

// Line 5451: range 0000000013DFB5D0-0000000013DFBB3C
void __fastcall PlayerQuestComp::execRemovePatternGroup(
        PlayerQuestComp *const this,
        const data::QuestExec *exec,
        uint32_t parent_quest_id)
{
  unsigned __int64 v3; // r12
  __int64 v4; // rax
  _DWORD *v5; // r13
  const std::string *v6; // rax
  common::milog::MiLogStream *v7; // r14
  const std::string *v8; // rax
  common::milog::MiLogStream *v9; // rax
  Scene *v10; // rax
  uint32_t BlockGroupComp; // eax
  common::milog::MiLogStream *v12; // rax
  common::milog::MiLogStream *v13; // rax
  common::milog::MiLogStream *v14; // rax
  common::milog::MiLogStream *v15; // rax
  common::milog::MiLogStream *v16; // r14
  Scene *v17; // rax
  SceneBlockGroupComp *v18; // r14
  std::__shared_ptr_access<Group,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v19; // rax
  uint32_t GroupId; // eax
  unsigned int val; // [rsp+2Ch] [rbp-D4h] BYREF
  common::milog::MiLogStream v23; // [rsp+30h] [rbp-D0h] BYREF
  char v24[176]; // [rsp+50h] [rbp-B0h] BYREF

  v3 = (unsigned __int64)v24;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_1(128LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "4 32 4 15 pattern_id:5463 48 4 20 parent_quest_id:5450 64 16 14 scene_ptr:5452 96 16 14 group_ptr:5469";
  *(_QWORD *)(v3 + 16) = PlayerQuestComp::execRemovePatternGroup;
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = -234556924;
  v5[536862722] = -219021312;
  v5[536862723] = -202178560;
  *(_DWORD *)(v3 + 48) = parent_quest_id;
  if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
    __asan_report_load8(&this->player_);
  Player::getSceneComp(this->player_);
  PlayerSceneComp::getMainWorldScene((PlayerSceneComp *const)(v3 + 96));
  std::shared_ptr<Scene>::shared_ptr<PlayerWorldScene,void>(
    (std::shared_ptr<Scene> *const)(v3 + 64),
    (std::shared_ptr<PlayerWorldScene> *)(v3 + 96));
  std::shared_ptr<PlayerWorldScene>::~shared_ptr((std::shared_ptr<PlayerWorldScene> *const)(v3 + 96));
  if ( std::operator==<Scene>((const std::shared_ptr<Scene> *)(v3 + 64), 0LL) )
  {
    common::milog::MiLogStream::create(
      &v23,
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/player/quest/player_quest_comp.cpp",
      "execRemovePatternGroup",
      5455);
    common::milog::MiLogStream::operator<<<char [24],(char *[24])0>(&v23, (const char (*)[24])"getMainWorldScene fails");
    common::milog::MiLogStream::~MiLogStream(&v23);
  }
  else if ( std::vector<std::string>::size(&exec->param) )
  {
    *(_DWORD *)(v3 + 32) = 0;
    v6 = std::vector<std::string>::operator[](&exec->param, 0LL);
    if ( common::tools::StringUtils::strToNum<unsigned int>(v6, (unsigned int *)(v3 + 32), 1) )
    {
      common::milog::MiLogStream::create(
        &v23,
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/player/quest/player_quest_comp.cpp",
        "execRemovePatternGroup",
        5466);
      v7 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(&v23, (const char (*)[16])"exec.param[0]: ");
      v8 = std::vector<std::string>::operator[](&exec->param, 0LL);
      v9 = common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v7, v8);
      common::milog::MiLogStream::operator<<<char [23],(char *[23])0>(v9, (const char (*)[23])off_25168980);
      common::milog::MiLogStream::~MiLogStream(&v23);
    }
    else
    {
      v10 = std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 64));
      BlockGroupComp = (unsigned int)Scene::getBlockGroupComp(v10);
      SceneBlockGroupComp::findPatternGroupByParentQuest(
        (SceneBlockGroupComp *const)(v3 + 96),
        BlockGroupComp,
        *(_DWORD *)(v3 + 48));
      if ( std::operator==<Group>((const std::shared_ptr<Group> *)(v3 + 96), 0LL) )
      {
        common::milog::MiLogStream::create(
          &v23,
          &common::milog::MiLogDefault::default_log_obj_,
          1u,
          "./src/player/quest/player_quest_comp.cpp",
          "execRemovePatternGroup",
          5472);
        v12 = common::milog::MiLogStream::operator<<<char [31],(char *[31])0>(
                &v23,
                (const char (*)[31])"findPatternGroupByParentQuest ");
        v13 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                v12,
                (const unsigned int *)(v3 + 48));
        v14 = common::milog::MiLogStream::operator<<<char [2],(char *[2])0>(v13, (const char (*)[2])",");
        v15 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                v14,
                (const unsigned int *)(v3 + 32));
        v16 = common::milog::MiLogStream::operator<<<char [14],(char *[14])0>(v15, (const char (*)[14])" fails, uid: ");
        if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
          __asan_report_load8(&this->player_);
        val = Player::getUid(this->player_);
        common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v16, &val);
        common::milog::MiLogStream::~MiLogStream(&v23);
      }
      else
      {
        v17 = std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 64));
        v18 = Scene::getBlockGroupComp(v17);
        v19 = std::__shared_ptr_access<Group,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Group,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 96));
        GroupId = Group::getGroupId(v19);
        SceneBlockGroupComp::removePatternGroup(v18, GroupId);
      }
      std::shared_ptr<Group>::~shared_ptr((std::shared_ptr<Group> *const)(v3 + 96));
    }
  }
  else
  {
    common::milog::MiLogStream::create(
      &v23,
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/player/quest/player_quest_comp.cpp",
      "execRemovePatternGroup",
      5460);
    common::milog::MiLogStream::operator<<<char [24],(char *[24])0>(&v23, (const char (*)[24])"QuestExec config failed");
    common::milog::MiLogStream::~MiLogStream(&v23);
  }
  std::shared_ptr<Scene>::~shared_ptr((std::shared_ptr<Scene> *const)(v3 + 64));
  if ( v24 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
};

// Line 5479: range 0000000013DFBB3E-0000000013DFC1B8
void __fastcall PlayerQuestComp::execRefreshGroupMonster(
        PlayerQuestComp *const this,
        const data::QuestExec *exec,
        uint32_t quest_id)
{
  unsigned __int64 v3; // r12
  __int64 v4; // rax
  _DWORD *v5; // r13
  common::milog::MiLogStream *v6; // rax
  common::milog::MiLogStream *v7; // rax
  common::milog::MiLogStream *v8; // rbx
  common::milog::MiLogStream *v9; // r14
  common::milog::MiLogStream *v10; // rax
  common::milog::MiLogStream *v11; // rax
  const std::string *v12; // rax
  common::milog::MiLogStream *v13; // r14
  const std::string *v14; // rax
  common::milog::MiLogStream *v15; // rax
  common::milog::MiLogStream *v16; // r14
  uint32_t v17; // eax
  common::milog::MiLogStream *v18; // r14
  common::milog::MiLogStream *v19; // rax
  common::milog::MiLogStream *v20; // r14
  std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v21; // rax
  common::milog::MiLogStream *v22; // rax
  common::milog::MiLogStream *v23; // rax
  Group *v24; // rax
  unsigned int val; // [rsp+2Ch] [rbp-D4h] BYREF
  common::milog::MiLogStream v27; // [rsp+30h] [rbp-D0h] BYREF
  char v28[176]; // [rsp+50h] [rbp-B0h] BYREF

  v3 = (unsigned __int64)v28;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_1(128LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "4 32 4 19 param_group_id:5491 48 4 13 quest_id:5478 64 16 14 scene_ptr:5485 96 16 14 group_ptr:5497";
  *(_QWORD *)(v3 + 16) = PlayerQuestComp::execRefreshGroupMonster;
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = -234556924;
  v5[536862722] = -219021312;
  v5[536862723] = -202178560;
  *(_DWORD *)(v3 + 48) = quest_id;
  if ( std::vector<std::string>::empty(&exec->param) )
  {
    common::milog::MiLogStream::create(
      &v27,
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/player/quest/player_quest_comp.cpp",
      "execRefreshGroupMonster",
      5482);
    v6 = common::milog::MiLogStream::operator<<<char [15],(char *[15])0>(&v27, (const char (*)[15])"invalid param:");
    v7 = common::milog::MiLogStream::operator<<<std::string>(v6, &exec->param);
    v8 = common::milog::MiLogStream::operator<<<char [6],(char *[6])0>(v7, (const char (*)[6])" uid:");
    if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
      __asan_report_load8(&this->player_);
    val = Player::getUid(this->player_);
    common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v8, &val);
    common::milog::MiLogStream::~MiLogStream(&v27);
  }
  else
  {
    if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
      __asan_report_load8(&this->player_);
    Player::getSceneComp(this->player_);
    PlayerSceneComp::getCurScene((const PlayerSceneComp *const)(v3 + 64));
    if ( std::operator==<Scene>((const std::shared_ptr<Scene> *)(v3 + 64), 0LL) )
    {
      common::milog::MiLogStream::create(
        &v27,
        &common::milog::MiLogDefault::default_log_obj_,
        1u,
        "./src/player/quest/player_quest_comp.cpp",
        "execRefreshGroupMonster",
        5488);
      v9 = common::milog::MiLogStream::operator<<<char [24],(char *[24])0>(
             &v27,
             (const char (*)[24])"getCurScene fails, uid:");
      if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
        __asan_report_load8(&this->player_);
      val = Player::getUid(this->player_);
      v10 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v9, &val);
      v11 = common::milog::MiLogStream::operator<<<char [12],(char *[12])0>(v10, (const char (*)[12])", quest_id:");
      common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v11, (const unsigned int *)(v3 + 48));
      common::milog::MiLogStream::~MiLogStream(&v27);
    }
    else
    {
      *(_DWORD *)(v3 + 32) = 0;
      v12 = std::vector<std::string>::operator[](&exec->param, 0LL);
      if ( common::tools::StringUtils::strToNum<unsigned int>(v12, (unsigned int *)(v3 + 32), 1) )
      {
        common::milog::MiLogStream::create(
          &v27,
          &common::milog::MiLogDefault::default_log_obj_,
          3u,
          "./src/player/quest/player_quest_comp.cpp",
          "execRefreshGroupMonster",
          5494);
        v13 = common::milog::MiLogStream::operator<<<char [17],(char *[17])0>(
                &v27,
                (const char (*)[17])"invalid param 0:");
        v14 = std::vector<std::string>::operator[](&exec->param, 0LL);
        v15 = common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v13, v14);
        v16 = common::milog::MiLogStream::operator<<<char [6],(char *[6])0>(v15, (const char (*)[6])" uid:");
        if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
          __asan_report_load8(&this->player_);
        val = Player::getUid(this->player_);
        common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v16, &val);
        common::milog::MiLogStream::~MiLogStream(&v27);
      }
      else
      {
        v17 = (unsigned int)std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 64));
        Scene::findGroup((Scene *const)(v3 + 96), v17);
        if ( std::operator==<Group>((const std::shared_ptr<Group> *)(v3 + 96), 0LL) )
        {
          common::milog::MiLogStream::create(
            &v27,
            &common::milog::MiLogDefault::default_log_obj_,
            3u,
            "./src/player/quest/player_quest_comp.cpp",
            "execRefreshGroupMonster",
            5500);
          v18 = common::milog::MiLogStream::operator<<<char [23],(char *[23])0>(
                  &v27,
                  (const char (*)[23])"findGroup failed, uid:");
          if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
            __asan_report_load8(&this->player_);
          val = Player::getUid(this->player_);
          v19 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v18, &val);
          v20 = common::milog::MiLogStream::operator<<<char [8],(char *[8])0>(v19, (const char (*)[8])" scene:");
          v21 = std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::operator*((const std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 64));
          v22 = common::milog::MiLogStream::operator<<<Scene,(Scene*)0>(v20, v21);
          v23 = common::milog::MiLogStream::operator<<<char [8],(char *[8])0>(v22, (const char (*)[8])" group:");
          common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v23, (const unsigned int *)(v3 + 32));
          common::milog::MiLogStream::~MiLogStream(&v27);
        }
        else
        {
          v24 = std::__shared_ptr_access<Group,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Group,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 96));
          Group::refreshAllMonsterInGroup(v24);
        }
        std::shared_ptr<Group>::~shared_ptr((std::shared_ptr<Group> *const)(v3 + 96));
      }
    }
    std::shared_ptr<Scene>::~shared_ptr((std::shared_ptr<Scene> *const)(v3 + 64));
  }
  if ( v28 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
};

// Line 5507: range 0000000013DFC1BA-0000000013DFD344
void __fastcall PlayerQuestComp::execNotifyGroupLua(
        PlayerQuestComp *const this,
        const data::QuestExec *exec,
        data::QuestState state,
        uint32_t quest_id)
{
  unsigned __int64 v4; // r13
  __int64 v5; // rax
  _DWORD *v6; // r12
  const std::string *v7; // rax
  common::milog::MiLogStream *v8; // rbx
  const std::string *v9; // rax
  common::milog::MiLogStream *v10; // rax
  const std::string *v11; // rax
  bool v12; // r14
  common::milog::MiLogStream *v13; // r14
  const std::string *v14; // rax
  common::milog::MiLogStream *v15; // rax
  std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v16; // rax
  common::milog::MiLogStream *v17; // rax
  std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v18; // rax
  common::milog::MiLogStream *v19; // rax
  common::milog::MiLogStream *v20; // rax
  common::milog::MiLogStream *v21; // r14
  std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v22; // rax
  uint32_t SceneComp; // eax
  common::milog::MiLogStream *v24; // rax
  common::milog::MiLogStream *v25; // rax
  common::milog::MiLogStream *v26; // r14
  int v27; // eax
  common::milog::MiLogStream *v28; // rax
  common::milog::MiLogStream *v29; // rax
  common::milog::MiLogStream *v30; // rax
  std::__shared_ptr_access<Event,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v31; // rax
  int32_t v32; // r14d
  std::__shared_ptr_access<Event,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v33; // rdx
  char v34; // cl
  common::milog::MiLogStream *v35; // rsi
  __int64 v36; // rcx
  _BOOL4 v37; // r14d
  std::__shared_ptr_access<Event,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v38; // rax
  char v39; // dl
  __int64 v40; // rdx
  uint32_t Uid; // r14d
  std::__shared_ptr_access<Event,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v42; // rdx
  char v43; // cl
  __int64 v44; // rcx
  __gnu_cxx::__normal_iterator<unsigned int*,std::vector<unsigned int> >::reference v45; // rax
  _DWORD *v46; // rdx
  uint32_t v47; // eax
  common::milog::MiLogStream *v48; // rax
  common::milog::MiLogStream *v49; // rax
  common::milog::MiLogStream *v50; // rax
  common::milog::MiLogStream *v51; // rax
  Scene *v52; // rax
  SceneBlockGroupComp *BlockGroupComp; // rax
  std::__shared_ptr_access<Group,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v54; // rax
  Group *v55; // rax
  common::milog::MiLogStream *v56; // rax
  common::milog::MiLogStream *v57; // rax
  common::milog::MiLogStream *v58; // rax
  common::milog::MiLogStream *v59; // rax
  common::milog::MiLogStream *v60; // rax
  common::milog::MiLogStream *v61; // rax
  common::milog::MiLogStream *v62; // rcx
  std::allocator<char> __a; // [rsp+2Dh] [rbp-193h] BYREF
  bool is_group_comp_started; // [rsp+2Eh] [rbp-192h]
  bool group_started; // [rsp+2Fh] [rbp-191h]
  std::vector<unsigned int>::iterator __for_begin; // [rsp+30h] [rbp-190h] BYREF
  std::vector<unsigned int>::iterator __for_end; // [rsp+38h] [rbp-188h] BYREF
  const data::SceneExcelConfig *scene_config_ptr; // [rsp+40h] [rbp-180h]
  std::vector<unsigned int> *__for_range; // [rsp+48h] [rbp-178h]
  std::shared_ptr<Scene> __r; // [rsp+50h] [rbp-170h] BYREF
  std::shared_ptr<Event> event_type; // [rsp+60h] [rbp-160h] BYREF
  common::milog::MiLogStream v74; // [rsp+70h] [rbp-150h] BYREF
  char v75[304]; // [rsp+90h] [rbp-130h] BYREF

  v4 = (unsigned __int64)v75;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v5 = __asan_stack_malloc_2(256LL);
    if ( v5 )
      v4 = v5;
  }
  *(_QWORD *)v4 = 1102416563LL;
  *(_QWORD *)(v4 + 8) = "8 32 4 13 scene_id:5513 48 4 13 group_id:5587 64 4 10 state:5506 80 4 13 quest_id:5506 96 16 14 "
                        "scene_ptr:5531 128 16 14 event_ptr:5562 160 16 14 group_ptr:5589 192 24 17 group_id_vec:5519";
  *(_QWORD *)(v4 + 16) = PlayerQuestComp::execNotifyGroupLua;
  v6 = (_DWORD *)(v4 >> 3);
  v6[536862720] = -235802127;
  v6[536862721] = -234556924;
  v6[536862722] = -234556924;
  v6[536862723] = -219021312;
  v6[536862724] = -219021312;
  v6[536862725] = -219021312;
  v6[536862726] = -218103808;
  v6[536862727] = -202116109;
  *(_DWORD *)(v4 + 64) = state;
  *(_DWORD *)(v4 + 80) = quest_id;
  if ( std::vector<std::string>::size(&exec->param) <= 1 )
  {
    common::milog::MiLogStream::create(
      &v74,
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/player/quest/player_quest_comp.cpp",
      "execNotifyGroupLua",
      5510);
    common::milog::MiLogStream::operator<<<char [24],(char *[24])0>(&v74, (const char (*)[24])"QuestExec config failed");
    common::milog::MiLogStream::~MiLogStream(&v74);
    goto LABEL_61;
  }
  *(_DWORD *)(v4 + 32) = 0;
  v7 = std::vector<std::string>::operator[](&exec->param, 0LL);
  if ( common::tools::StringUtils::strToNum<unsigned int>(v7, (unsigned int *)(v4 + 32), 1) )
  {
    common::milog::MiLogStream::create(
      &v74,
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/player/quest/player_quest_comp.cpp",
      "execNotifyGroupLua",
      5516);
    v8 = common::milog::MiLogStream::operator<<<char [14],(char *[14])0>(&v74, (const char (*)[14])" exec.param: ");
    v9 = std::vector<std::string>::operator[](&exec->param, 0LL);
    v10 = common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v8, v9);
    common::milog::MiLogStream::operator<<<char [13],(char *[13])0>(v10, (const char (*)[13])byte_25168F60);
    common::milog::MiLogStream::~MiLogStream(&v74);
    goto LABEL_61;
  }
  std::vector<unsigned int>::vector((std::vector<unsigned int> *const)(v4 + 192));
  std::allocator<char>::allocator(&__a);
  std::string::basic_string<std::allocator<char>>((std::string *const)&v74, ",", &__a);
  v11 = std::vector<std::string>::operator[](&exec->param, 1uLL);
  v12 = common::tools::StringUtils::splitToList<unsigned int>(
          v11,
          (const std::string *)&v74,
          (std::vector<unsigned int> *)(v4 + 192),
          1) != 0;
  std::string::~string(&v74);
  std::allocator<char>::~allocator(&__a);
  if ( !v12 )
  {
    ServiceBox::findService<GameserverService>();
    GameserverService::getConfig((GameserverService *const)(v4 + 160));
    v16 = std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 160));
    scene_config_ptr = data::SceneExcelConfigMgrBase::findSceneExcelConfig(
                         &v16->design_config.txt_config_mgr.scene_config_mgr,
                         *(_DWORD *)(v4 + 32));
    std::shared_ptr<Config>::~shared_ptr((std::shared_ptr<Config> *const)(v4 + 160));
    if ( !scene_config_ptr )
    {
      common::milog::MiLogStream::create(
        &v74,
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/player/quest/player_quest_comp.cpp",
        "execNotifyGroupLua",
        5528);
      v17 = common::milog::MiLogStream::operator<<<char [40],(char *[40])0>(
              &v74,
              (const char (*)[40])"findSceneExcelConfig failed, scene_id: ");
      common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v17, (const unsigned int *)(v4 + 32));
      common::milog::MiLogStream::~MiLogStream(&v74);
      goto LABEL_60;
    }
    *(_QWORD *)(v4 + 96) = 0LL;
    *(_QWORD *)(v4 + 104) = 0LL;
    if ( *(_BYTE *)(((unsigned __int64)&scene_config_ptr->type >> 3) + 0x7FFF8000) != 0
      && (char)((((_BYTE)scene_config_ptr + 12) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&scene_config_ptr->type >> 3)
                                                                      + 0x7FFF8000) )
    {
      __asan_report_load4(&scene_config_ptr->type);
    }
    if ( scene_config_ptr->type == SCENE_DUNGEON )
    {
      if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
        __asan_report_load8(&this->player_);
      Player::getSceneComp(this->player_);
      PlayerSceneComp::getCurScene((const PlayerSceneComp *const)(v4 + 160));
      std::shared_ptr<Scene>::operator=((std::shared_ptr<Scene> *const)(v4 + 96), (std::shared_ptr<Scene> *)(v4 + 160));
      std::shared_ptr<Scene>::~shared_ptr((std::shared_ptr<Scene> *const)(v4 + 160));
      if ( std::operator==<Scene>(0LL, (const std::shared_ptr<Scene> *)(v4 + 96)) )
      {
        common::milog::MiLogStream::create(
          &v74,
          &common::milog::MiLogDefault::default_log_obj_,
          1u,
          "./src/player/quest/player_quest_comp.cpp",
          "execNotifyGroupLua",
          5537);
        common::milog::MiLogStream::operator<<<char [21],(char *[21])0>(
          &v74,
          (const char (*)[21])"scene_ptr is nullptr");
        common::milog::MiLogStream::~MiLogStream(&v74);
LABEL_59:
        std::shared_ptr<Scene>::~shared_ptr((std::shared_ptr<Scene> *const)(v4 + 96));
        goto LABEL_60;
      }
      v18 = std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 96));
      if ( Scene::getSceneId(v18) != *(_DWORD *)(v4 + 32) )
      {
        common::milog::MiLogStream::create(
          &v74,
          &common::milog::MiLogDefault::default_log_obj_,
          3u,
          "./src/player/quest/player_quest_comp.cpp",
          "execNotifyGroupLua",
          5542);
        v19 = common::milog::MiLogStream::operator<<<char [30],(char *[30])0>(
                &v74,
                (const char (*)[30])"getCurScene is not scene_id: ");
        v20 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                v19,
                (const unsigned int *)(v4 + 32));
        v21 = common::milog::MiLogStream::operator<<<char [13],(char *[13])0>(v20, (const char (*)[13])" cur_scene: ");
        v22 = std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 96));
        *(_DWORD *)(v4 + 48) = Scene::getSceneId(v22);
        common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v21, (const unsigned int *)(v4 + 48));
        common::milog::MiLogStream::~MiLogStream(&v74);
        goto LABEL_59;
      }
    }
    else
    {
      if ( *(_BYTE *)(((unsigned __int64)&scene_config_ptr->type >> 3) + 0x7FFF8000) != 0
        && (char)((((_BYTE)scene_config_ptr + 12) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&scene_config_ptr->type >> 3)
                                                                        + 0x7FFF8000) )
      {
        __asan_report_load4(&scene_config_ptr->type);
      }
      if ( !SceneExcelConfigMgr::isPlayerScene(scene_config_ptr->type) )
      {
        common::milog::MiLogStream::create(
          &v74,
          &common::milog::MiLogDefault::default_log_obj_,
          4u,
          "./src/player/quest/player_quest_comp.cpp",
          "execNotifyGroupLua",
          5557);
        v26 = common::milog::MiLogStream::operator<<<char [20],(char *[20])0>(
                &v74,
                (const char (*)[20])"invalid scene_type:");
        if ( *(_BYTE *)(((unsigned __int64)&scene_config_ptr->type >> 3) + 0x7FFF8000) != 0
          && (char)((((_BYTE)scene_config_ptr + 12) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&scene_config_ptr->type >> 3)
                                                                          + 0x7FFF8000) )
        {
          __asan_report_load4(&scene_config_ptr->type);
        }
        __for_end._M_current = (unsigned int *)data::enumValToStr(scene_config_ptr->type);
        common::milog::MiLogStream::operator<<<char const*,(char const**)0>(v26, (const char *const *)&__for_end);
        common::milog::MiLogStream::~MiLogStream(&v74);
        goto LABEL_59;
      }
      if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
        __asan_report_load8(&this->player_);
      SceneComp = (unsigned int)Player::getSceneComp(this->player_);
      PlayerSceneComp::getPersonalScene((PlayerSceneComp *const)&__r, SceneComp);
      std::shared_ptr<Scene>::operator=((std::shared_ptr<Scene> *const)(v4 + 96), &__r);
      std::shared_ptr<Scene>::~shared_ptr(&__r);
      if ( std::operator==<Scene>((const std::shared_ptr<Scene> *)(v4 + 96), 0LL) )
      {
        common::milog::MiLogStream::create(
          &v74,
          &common::milog::MiLogDefault::default_log_obj_,
          3u,
          "./src/player/quest/player_quest_comp.cpp",
          "execNotifyGroupLua",
          5551);
        v24 = common::milog::MiLogStream::operator<<<char [11],(char *[11])0>(&v74, (const char (*)[11])"findScene ");
        v25 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                v24,
                (const unsigned int *)(v4 + 32));
        common::milog::MiLogStream::operator<<<char [8],(char *[8])0>(v25, (const char (*)[8])" failed");
        common::milog::MiLogStream::~MiLogStream(&v74);
        goto LABEL_59;
      }
    }
    *(_QWORD *)(v4 + 128) = 0LL;
    *(_QWORD *)(v4 + 136) = 0LL;
    v27 = *(_DWORD *)(v4 + 64);
    if ( v27 == 2 )
    {
      EventUtil::createEvent((data::EventType)&event_type);
      std::shared_ptr<Event>::operator=((std::shared_ptr<Event> *const)(v4 + 128), &event_type);
      std::shared_ptr<Event>::~shared_ptr(&event_type);
    }
    else
    {
      if ( v27 < 2 || (unsigned int)(v27 - 3) > 1 )
      {
        common::milog::MiLogStream::create(
          &v74,
          &common::milog::MiLogDefault::default_log_obj_,
          3u,
          "./src/player/quest/player_quest_comp.cpp",
          "execNotifyGroupLua",
          5573);
        v28 = common::milog::MiLogStream::operator<<<char [20],(char *[20])0>(&v74, (const char (*)[20])off_25169180);
        v29 = common::milog::MiLogStream::operator<<<data::QuestState,(data::QuestState*)0>(
                v28,
                (const data::QuestState *)(v4 + 64));
        v30 = common::milog::MiLogStream::operator<<<char [12],(char *[12])0>(v29, (const char (*)[12])" quest_id: ");
        common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v30, (const unsigned int *)(v4 + 80));
        common::milog::MiLogStream::~MiLogStream(&v74);
LABEL_58:
        std::shared_ptr<Event>::~shared_ptr((std::shared_ptr<Event> *const)(v4 + 128));
        goto LABEL_59;
      }
      EventUtil::createEvent((data::EventType)(v4 + 160));
      std::shared_ptr<Event>::operator=((std::shared_ptr<Event> *const)(v4 + 128), (std::shared_ptr<Event> *)(v4 + 160));
      std::shared_ptr<Event>::~shared_ptr((std::shared_ptr<Event> *const)(v4 + 160));
    }
    if ( std::operator==<Event>((const std::shared_ptr<Event> *)(v4 + 128), 0LL) )
    {
      common::milog::MiLogStream::create(
        &v74,
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/player/quest/player_quest_comp.cpp",
        "execNotifyGroupLua",
        5578);
      common::milog::MiLogStream::operator<<<char [37],(char *[37])0>(
        &v74,
        (const char (*)[37])"createEvent EVENT_QUEST_FINISH fails");
      common::milog::MiLogStream::~MiLogStream(&v74);
    }
    else
    {
      std::to_string((std::string *)&v74, *(_DWORD *)(v4 + 80));
      v31 = std::__shared_ptr_access<Event,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Event,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 128));
      v35 = &v74;
      std::string::operator=(&v31->source_name, &v74);
      std::string::~string(&v74);
      v32 = *(_DWORD *)(v4 + 80);
      v33 = std::__shared_ptr_access<Event,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Event,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 128));
      v34 = *(_BYTE *)(((unsigned __int64)&v33->param1 >> 3) + 0x7FFF8000);
      LOBYTE(v35) = v34 != 0;
      v36 = (v34 != 0) & (unsigned __int8)((char)((((_BYTE)v33 + 44) & 7) + 3) >= v34);
      if ( (_BYTE)v36 )
        __asan_report_store4(&v33->param1, v35, v33, v36);
      v33->param1 = v32;
      v37 = *(_DWORD *)(v4 + 64) == 3;
      v38 = std::__shared_ptr_access<Event,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Event,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 128));
      v39 = *(_BYTE *)(((unsigned __int64)&v38->param2 >> 3) + 0x7FFF8000);
      LOBYTE(v35) = v39 != 0;
      v40 = (v39 != 0) & (unsigned __int8)(v39 <= 3);
      if ( (_BYTE)v40 )
        v38 = (std::__shared_ptr_access<Event,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *)__asan_report_store4(&v38->param2, v35, v40, &v38->param2);
      v38->param2 = v37;
      if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
        __asan_report_load8(&this->player_);
      Uid = Player::getUid(this->player_);
      v42 = std::__shared_ptr_access<Event,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Event,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 128));
      v43 = *(_BYTE *)(((unsigned __int64)&v42->uid >> 3) + 0x7FFF8000);
      LOBYTE(v35) = v43 != 0;
      v44 = (v43 != 0) & (unsigned __int8)((char)((((_BYTE)v42 + 60) & 7) + 3) >= v43);
      if ( (_BYTE)v44 )
        __asan_report_store4(&v42->uid, v35, v42, v44);
      v42->uid = Uid;
      __for_range = (std::vector<unsigned int> *)(v4 + 192);
      __for_begin._M_current = std::vector<unsigned int>::begin((std::vector<unsigned int> *const)(v4 + 192))._M_current;
      __for_end._M_current = std::vector<unsigned int>::end(__for_range)._M_current;
      while ( __gnu_cxx::operator!=<unsigned int *,std::vector<unsigned int>>(&__for_begin, &__for_end) )
      {
        v45 = __gnu_cxx::__normal_iterator<unsigned int *,std::vector<unsigned int>>::operator*(&__for_begin);
        v46 = v45;
        if ( *(_BYTE *)(((unsigned __int64)v45 >> 3) + 0x7FFF8000) != 0
          && (char)(((unsigned __int8)v45 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)v45 >> 3) + 0x7FFF8000) )
        {
          __asan_report_load4(v45);
        }
        *(_DWORD *)(v4 + 48) = *v46;
        v47 = (unsigned int)std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 96));
        Scene::findGroup((Scene *const)(v4 + 160), v47);
        if ( std::operator==<Group>((const std::shared_ptr<Group> *)(v4 + 160), 0LL) )
        {
          common::milog::MiLogStream::create(
            &v74,
            &common::milog::MiLogDefault::default_log_obj_,
            1u,
            "./src/player/quest/player_quest_comp.cpp",
            "execNotifyGroupLua",
            5592);
          v48 = common::milog::MiLogStream::operator<<<char [11],(char *[11])0>(&v74, (const char (*)[11])"findGroup ");
          v49 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                  v48,
                  (const unsigned int *)(v4 + 32));
          v50 = common::milog::MiLogStream::operator<<<char [2],(char *[2])0>(v49, (const char (*)[2])":");
          v51 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                  v50,
                  (const unsigned int *)(v4 + 48));
          common::milog::MiLogStream::operator<<<char [8],(char *[8])0>(v51, (const char (*)[8])" failed");
          common::milog::MiLogStream::~MiLogStream(&v74);
        }
        else
        {
          v52 = std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 96));
          BlockGroupComp = Scene::getBlockGroupComp(v52);
          is_group_comp_started = SceneBlockGroupComp::isStarted(BlockGroupComp);
          v54 = std::__shared_ptr_access<Group,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Group,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 160));
          group_started = Group::isStarted(v54);
          v55 = std::__shared_ptr_access<Group,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Group,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 160));
          Group::handleEvent(v55, (EventPtr *)(v4 + 128));
          if ( *(_DWORD *)(v4 + 64) == 3 )
          {
            common::milog::MiLogStream::create(
              &v74,
              &common::milog::MiLogDefault::default_log_obj_,
              1u,
              "./src/player/quest/player_quest_comp.cpp",
              "execNotifyGroupLua",
              5600);
            v56 = common::milog::MiLogStream::operator<<<char [23],(char *[23])0>(
                    &v74,
                    (const char (*)[23])"[TRIGGER_DEBUG] group:");
            v57 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                    v56,
                    (const unsigned int *)(v4 + 48));
            v58 = common::milog::MiLogStream::operator<<<char [9],(char *[9])0>(v57, (const char (*)[9])" start? ");
            v59 = common::milog::MiLogStream::operator<<(v58, group_started);
            v60 = common::milog::MiLogStream::operator<<<char [22],(char *[22])0>(
                    v59,
                    (const char (*)[22])" block_comp started? ");
            v61 = common::milog::MiLogStream::operator<<(v60, is_group_comp_started);
            v62 = common::milog::MiLogStream::operator<<<char [10],(char *[10])0>(v61, (const char (*)[10])" player: ");
            if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
              __asan_report_load8(&this->player_);
            operator<<(v62, this->player_);
            common::milog::MiLogStream::~MiLogStream(&v74);
          }
        }
        std::shared_ptr<Group>::~shared_ptr((std::shared_ptr<Group> *const)(v4 + 160));
        __gnu_cxx::__normal_iterator<unsigned int *,std::vector<unsigned int>>::operator++(&__for_begin);
      }
    }
    goto LABEL_58;
  }
  common::milog::MiLogStream::create(
    &v74,
    &common::milog::MiLogDefault::default_log_obj_,
    3u,
    "./src/player/quest/player_quest_comp.cpp",
    "execNotifyGroupLua",
    5522);
  v13 = common::milog::MiLogStream::operator<<<char [14],(char *[14])0>(&v74, (const char (*)[14])" exec.param: ");
  v14 = std::vector<std::string>::operator[](&exec->param, 1uLL);
  v15 = common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v13, v14);
  common::milog::MiLogStream::operator<<<char [13],(char *[13])0>(v15, (const char (*)[13])byte_25168F60);
  common::milog::MiLogStream::~MiLogStream(&v74);
LABEL_60:
  std::vector<unsigned int>::~vector((std::vector<unsigned int> *const)(v4 + 192));
LABEL_61:
  if ( v75 == (char *)v4 )
  {
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8008) = 0LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8010) = 0LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8018) = 0LL;
  }
  else
  {
    *(_QWORD *)v4 = 1172321806LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
  }
};

// Line 5607: range 0000000013DFD346-0000000013DFE1BB
void __cdecl PlayerQuestComp::execRefreshGroupSuite(
        PlayerQuestComp *const this,
        const data::QuestExec *exec,
        uint32_t quest_id)
{
  unsigned __int64 v3; // r13
  __int64 v4; // rax
  _DWORD *v5; // r12
  const std::string *v6; // rax
  common::milog::MiLogStream *v7; // rbx
  const std::string *v8; // rax
  common::milog::MiLogStream *v9; // rax
  const std::string *v10; // rax
  bool v11; // r14
  common::milog::MiLogStream *v12; // r14
  const std::string *v13; // rax
  common::milog::MiLogStream *v14; // rax
  common::milog::MiLogStream *v15; // r14
  const std::string *v16; // rax
  common::milog::MiLogStream *v17; // rax
  size_t v18; // rax
  std::vector<unsigned int>::reference v19; // rax
  _DWORD *v20; // rdx
  std::vector<unsigned int>::reference v21; // rax
  uint32_t *v22; // rdx
  std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v23; // rax
  common::milog::MiLogStream *v24; // rax
  std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v25; // rax
  common::milog::MiLogStream *v27; // rax
  int v28; // r14d
  uint32_t SceneComp; // eax
  common::milog::MiLogStream *v30; // rax
  common::milog::MiLogStream *v31; // rax
  common::milog::MiLogStream *v32; // r14
  uint32_t v33; // eax
  common::milog::MiLogStream *v34; // rax
  common::milog::MiLogStream *v35; // rax
  common::milog::MiLogStream *v36; // rax
  common::milog::MiLogStream *v37; // rax
  int v38; // r14d
  Group *v39; // rax
  std::allocator<char> v41; // [rsp+22h] [rbp-27Eh] BYREF
  std::allocator<char> __a; // [rsp+23h] [rbp-27Dh] BYREF
  uint32_t suite_id; // [rsp+24h] [rbp-27Ch]
  char *val; // [rsp+28h] [rbp-278h] BYREF
  size_t idx; // [rsp+30h] [rbp-270h]
  const data::SceneExcelConfig *scene_config_ptr; // [rsp+38h] [rbp-268h]
  std::shared_ptr<Scene> __r; // [rsp+40h] [rbp-260h] BYREF
  std::string sep_1; // [rsp+50h] [rbp-250h] BYREF
  common::milog::MiLogStream v49; // [rsp+70h] [rbp-230h] BYREF
  char v50[528]; // [rsp+90h] [rbp-210h] BYREF

  v3 = (unsigned __int64)v50;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_3(480LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "7 32 4 13 scene_id:5614 48 4 13 group_id:5633 64 16 14 scene_ptr:5642 96 16 14 group_ptr:5667 12"
                        "8 24 11 id_vec:5620 192 28 16 log_context:5673 256 160 19 script_context:5676";
  *(_QWORD *)(v3 + 16) = PlayerQuestComp::execRefreshGroupSuite;
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = -234556924;
  v5[536862722] = -219021312;
  v5[536862723] = -219021312;
  v5[536862724] = -234881024;
  v5[536862725] = -218959118;
  v5[536862726] = 0x4000000;
  v5[536862727] = -218959118;
  v5[536862733] = -202116109;
  v5[536862734] = -202116109;
  if ( std::vector<std::string>::size(&exec->param) <= 1 )
  {
    common::milog::MiLogStream::create(
      &v49,
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/player/quest/player_quest_comp.cpp",
      "execRefreshGroupSuite",
      5611);
    common::milog::MiLogStream::operator<<<char [24],(char *[24])0>(&v49, (const char (*)[24])"QuestExec config failed");
    common::milog::MiLogStream::~MiLogStream(&v49);
    goto LABEL_51;
  }
  *(_DWORD *)(v3 + 32) = 0;
  v6 = std::vector<std::string>::operator[](&exec->param, 0LL);
  if ( common::tools::StringUtils::strToNum<unsigned int>(v6, (unsigned int *)(v3 + 32), 1) )
  {
    common::milog::MiLogStream::create(
      &v49,
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/player/quest/player_quest_comp.cpp",
      "execRefreshGroupSuite",
      5617);
    v7 = common::milog::MiLogStream::operator<<<char [14],(char *[14])0>(&v49, (const char (*)[14])" exec.param: ");
    v8 = std::vector<std::string>::operator[](&exec->param, 0LL);
    v9 = common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v7, v8);
    common::milog::MiLogStream::operator<<<char [13],(char *[13])0>(v9, (const char (*)[13])byte_25168F60);
    common::milog::MiLogStream::~MiLogStream(&v49);
    goto LABEL_51;
  }
  std::vector<unsigned int>::vector((std::vector<unsigned int> *const)(v3 + 128));
  std::allocator<char>::allocator(&__a);
  std::string::basic_string<std::allocator<char>>((std::string *const)&v49, ",", &__a);
  std::allocator<char>::allocator(&v41);
  std::string::basic_string<std::allocator<char>>(&sep_1, ";", &v41);
  v10 = std::vector<std::string>::operator[](&exec->param, 1uLL);
  v11 = common::tools::StringUtils::splitToList<unsigned int>(
          v10,
          &sep_1,
          (const std::string *)&v49,
          2u,
          (std::vector<unsigned int> *)(v3 + 128),
          1) != 0;
  std::string::~string(&sep_1);
  std::allocator<char>::~allocator(&v41);
  std::string::~string(&v49);
  std::allocator<char>::~allocator(&__a);
  if ( !v11 )
  {
    if ( std::vector<unsigned int>::size((const std::vector<unsigned int> *const)(v3 + 128)) <= 1 )
    {
      common::milog::MiLogStream::create(
        &v49,
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/player/quest/player_quest_comp.cpp",
        "execRefreshGroupSuite",
        5628);
      v15 = common::milog::MiLogStream::operator<<<char [14],(char *[14])0>(&v49, (const char (*)[14])" exec.param: ");
      v16 = std::vector<std::string>::operator[](&exec->param, 1uLL);
      v17 = common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v15, v16);
      common::milog::MiLogStream::operator<<<char [13],(char *[13])0>(v17, (const char (*)[13])byte_25168F60);
      common::milog::MiLogStream::~MiLogStream(&v49);
      goto LABEL_50;
    }
    for ( idx = 1LL; ; idx += 2LL )
    {
      v18 = std::vector<unsigned int>::size((const std::vector<unsigned int> *const)(v3 + 128));
      if ( idx >= v18 )
        goto LABEL_50;
      v19 = std::vector<unsigned int>::operator[]((std::vector<unsigned int> *const)(v3 + 128), idx - 1);
      v20 = v19;
      if ( *(_BYTE *)(((unsigned __int64)v19 >> 3) + 0x7FFF8000) != 0
        && (char)(((unsigned __int8)v19 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)v19 >> 3) + 0x7FFF8000) )
      {
        __asan_report_load4(v19);
      }
      *(_DWORD *)(v3 + 48) = *v20;
      v21 = std::vector<unsigned int>::operator[]((std::vector<unsigned int> *const)(v3 + 128), idx);
      v22 = v21;
      if ( *(_BYTE *)(((unsigned __int64)v21 >> 3) + 0x7FFF8000) != 0
        && (char)(((unsigned __int8)v21 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)v21 >> 3) + 0x7FFF8000) )
      {
        __asan_report_load4(v21);
      }
      suite_id = *v22;
      ServiceBox::findService<GameserverService>();
      GameserverService::getConfig((GameserverService *const)(v3 + 96));
      v23 = std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 96));
      scene_config_ptr = data::SceneExcelConfigMgrBase::findSceneExcelConfig(
                           &v23->design_config.txt_config_mgr.scene_config_mgr,
                           *(_DWORD *)(v3 + 32));
      std::shared_ptr<Config>::~shared_ptr((std::shared_ptr<Config> *const)(v3 + 96));
      if ( !scene_config_ptr )
      {
        common::milog::MiLogStream::create(
          &v49,
          &common::milog::MiLogDefault::default_log_obj_,
          3u,
          "./src/player/quest/player_quest_comp.cpp",
          "execRefreshGroupSuite",
          5639);
        v24 = common::milog::MiLogStream::operator<<<char [19],(char *[19])0>(
                &v49,
                (const char (*)[19])"scene_id invalid: ");
        common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v24, (const unsigned int *)(v3 + 32));
        common::milog::MiLogStream::~MiLogStream(&v49);
        goto LABEL_50;
      }
      *(_QWORD *)(v3 + 64) = 0LL;
      *(_QWORD *)(v3 + 72) = 0LL;
      if ( *(_BYTE *)(((unsigned __int64)&scene_config_ptr->type >> 3) + 0x7FFF8000) != 0
        && (char)((((_BYTE)scene_config_ptr + 12) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&scene_config_ptr->type >> 3)
                                                                        + 0x7FFF8000) )
      {
        __asan_report_load4(&scene_config_ptr->type);
      }
      if ( scene_config_ptr->type == SCENE_DUNGEON )
        break;
      if ( *(_BYTE *)(((unsigned __int64)&scene_config_ptr->type >> 3) + 0x7FFF8000) != 0
        && (char)((((_BYTE)scene_config_ptr + 12) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&scene_config_ptr->type >> 3)
                                                                        + 0x7FFF8000) )
      {
        __asan_report_load4(&scene_config_ptr->type);
      }
      if ( SceneExcelConfigMgr::isPlayerScene(scene_config_ptr->type) )
      {
        if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
          __asan_report_load8(&this->player_);
        SceneComp = (unsigned int)Player::getSceneComp(this->player_);
        PlayerSceneComp::getPersonalScene((PlayerSceneComp *const)&__r, SceneComp);
        std::shared_ptr<Scene>::operator=((std::shared_ptr<Scene> *const)(v3 + 64), &__r);
        std::shared_ptr<Scene>::~shared_ptr(&__r);
        if ( std::operator==<Scene>((const std::shared_ptr<Scene> *)(v3 + 64), 0LL) )
        {
          common::milog::MiLogStream::create(
            &v49,
            &common::milog::MiLogDefault::default_log_obj_,
            3u,
            "./src/player/quest/player_quest_comp.cpp",
            "execRefreshGroupSuite",
            5657);
          v30 = common::milog::MiLogStream::operator<<<char [11],(char *[11])0>(&v49, (const char (*)[11])"findScene ");
          v31 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                  v30,
                  (const unsigned int *)(v3 + 32));
          common::milog::MiLogStream::operator<<<char [8],(char *[8])0>(v31, (const char (*)[8])" failed");
          common::milog::MiLogStream::~MiLogStream(&v49);
          v28 = 0;
          goto LABEL_47;
        }
LABEL_41:
        v33 = (unsigned int)std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 64));
        Scene::findGroup((Scene *const)(v3 + 96), v33);
        if ( std::operator==<Group>((const std::shared_ptr<Group> *)(v3 + 96), 0LL) )
        {
          common::milog::MiLogStream::create(
            &v49,
            &common::milog::MiLogDefault::default_log_obj_,
            1u,
            "./src/player/quest/player_quest_comp.cpp",
            "execRefreshGroupSuite",
            5670);
          v34 = common::milog::MiLogStream::operator<<<char [11],(char *[11])0>(&v49, (const char (*)[11])"findGroup ");
          v35 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                  v34,
                  (const unsigned int *)(v3 + 32));
          v36 = common::milog::MiLogStream::operator<<<char [2],(char *[2])0>(v35, (const char (*)[2])":");
          v37 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                  v36,
                  (const unsigned int *)(v3 + 48));
          common::milog::MiLogStream::operator<<<char [8],(char *[8])0>(v37, (const char (*)[8])" failed");
          common::milog::MiLogStream::~MiLogStream(&v49);
          v38 = 0;
        }
        else
        {
          SuiteLogContext::SuiteLogContext((SuiteLogContext *const)(v3 + 192));
          *(_DWORD *)(v3 + 192) = 7;
          *(_DWORD *)(v3 + 200) = quest_id;
          ScriptContext::ScriptContext((ScriptContext *const)(v3 + 256));
          v39 = std::__shared_ptr_access<Group,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Group,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 96));
          Group::refresh(v39, (const ScriptContext *)(v3 + 256), *(SuiteLogContext *)(v3 + 192), suite_id, 0);
          ScriptContext::~ScriptContext((ScriptContext *const)(v3 + 256));
          v38 = 1;
        }
        std::shared_ptr<Group>::~shared_ptr((std::shared_ptr<Group> *const)(v3 + 96));
        if ( v38 == 1 )
          v28 = 2;
        else
          v28 = 0;
        goto LABEL_47;
      }
      common::milog::MiLogStream::create(
        &v49,
        &common::milog::MiLogDefault::default_log_obj_,
        4u,
        "./src/player/quest/player_quest_comp.cpp",
        "execRefreshGroupSuite",
        5663);
      v32 = common::milog::MiLogStream::operator<<<char [20],(char *[20])0>(
              &v49,
              (const char (*)[20])"invalid scene_type:");
      if ( *(_BYTE *)(((unsigned __int64)&scene_config_ptr->type >> 3) + 0x7FFF8000) != 0
        && (char)((((_BYTE)scene_config_ptr + 12) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&scene_config_ptr->type >> 3)
                                                                        + 0x7FFF8000) )
      {
        __asan_report_load4(&scene_config_ptr->type);
      }
      val = (char *)data::enumValToStr(scene_config_ptr->type);
      common::milog::MiLogStream::operator<<<char const*,(char const**)0>(v32, (const char *const *)&val);
      common::milog::MiLogStream::~MiLogStream(&v49);
      v28 = 1;
LABEL_47:
      std::shared_ptr<Scene>::~shared_ptr((std::shared_ptr<Scene> *const)(v3 + 64));
      if ( v28 && v28 != 2 )
        goto LABEL_50;
    }
    if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
      __asan_report_load8(&this->player_);
    Player::getSceneComp(this->player_);
    PlayerSceneComp::getCurScene((const PlayerSceneComp *const)(v3 + 96));
    std::shared_ptr<Scene>::operator=((std::shared_ptr<Scene> *const)(v3 + 64), (std::shared_ptr<Scene> *)(v3 + 96));
    std::shared_ptr<Scene>::~shared_ptr((std::shared_ptr<Scene> *const)(v3 + 96));
    if ( std::operator==<Scene>((const std::shared_ptr<Scene> *)(v3 + 64), 0LL)
      || (v25 = std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 64)),
          Scene::getSceneId(v25) != *(_DWORD *)(v3 + 32)) )
    {
      common::milog::MiLogStream::create(
        &v49,
        &common::milog::MiLogDefault::default_log_obj_,
        1u,
        "./src/player/quest/player_quest_comp.cpp",
        "execRefreshGroupSuite",
        5648);
      v27 = common::milog::MiLogStream::operator<<<char [30],(char *[30])0>(
              &v49,
              (const char (*)[30])"getCurScene is not scene_id: ");
      common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v27, (const unsigned int *)(v3 + 32));
      common::milog::MiLogStream::~MiLogStream(&v49);
      v28 = 0;
      goto LABEL_47;
    }
    goto LABEL_41;
  }
  common::milog::MiLogStream::create(
    &v49,
    &common::milog::MiLogDefault::default_log_obj_,
    3u,
    "./src/player/quest/player_quest_comp.cpp",
    "execRefreshGroupSuite",
    5623);
  v12 = common::milog::MiLogStream::operator<<<char [14],(char *[14])0>(&v49, (const char (*)[14])" exec.param: ");
  v13 = std::vector<std::string>::operator[](&exec->param, 1uLL);
  v14 = common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v12, v13);
  common::milog::MiLogStream::operator<<<char [13],(char *[13])0>(v14, (const char (*)[13])byte_25168F60);
  common::milog::MiLogStream::~MiLogStream(&v49);
LABEL_50:
  std::vector<unsigned int>::~vector((std::vector<unsigned int> *const)(v3 + 128));
LABEL_51:
  if ( v50 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8010) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8018) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8034) = 0LL;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8020) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8028) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8030) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8038) = -168430091;
  }
};

// Line 5683: range 0000000013DFE1BC-0000000013DFEF82
void __fastcall PlayerQuestComp::execRefreshGroupSuiteRandom(
        PlayerQuestComp *const this,
        const data::QuestExec *exec,
        uint32_t quest_id)
{
  unsigned __int64 v3; // r13
  __int64 v4; // rax
  _DWORD *v5; // r12
  const std::string *v6; // rax
  common::milog::MiLogStream *v7; // rbx
  const std::string *v8; // rax
  common::milog::MiLogStream *v9; // rax
  const std::string *v10; // rax
  bool v11; // r14
  common::milog::MiLogStream *v12; // r14
  const std::string *v13; // rax
  common::milog::MiLogStream *v14; // rax
  common::milog::MiLogStream *v15; // r14
  const std::string *v16; // rax
  common::milog::MiLogStream *v17; // rax
  std::vector<unsigned int>::reference v18; // rax
  _DWORD *v19; // rdx
  std::vector<unsigned int>::size_type v20; // rax
  std::vector<unsigned int>::reference v21; // rax
  uint32_t *v22; // rdx
  std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v23; // rax
  common::milog::MiLogStream *v24; // rax
  std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v25; // rax
  common::milog::MiLogStream *v27; // rax
  uint32_t SceneComp; // eax
  common::milog::MiLogStream *v29; // rax
  common::milog::MiLogStream *v30; // rax
  common::milog::MiLogStream *v31; // rax
  uint32_t v32; // eax
  common::milog::MiLogStream *v33; // rax
  common::milog::MiLogStream *v34; // rax
  common::milog::MiLogStream *v35; // rax
  common::milog::MiLogStream *v36; // rax
  common::milog::MiLogStream *v37; // rax
  common::milog::MiLogStream *v38; // rax
  Group *v39; // rax
  std::allocator<char> __a; // [rsp+2Bh] [rbp-275h] BYREF
  uint32_t suite_id; // [rsp+2Ch] [rbp-274h]
  size_t rand_idx; // [rsp+30h] [rbp-270h]
  const data::SceneExcelConfig *scene_config_ptr; // [rsp+38h] [rbp-268h]
  std::shared_ptr<Scene> __r; // [rsp+40h] [rbp-260h] BYREF
  common::milog::MiLogStream v46; // [rsp+50h] [rbp-250h] BYREF
  char v47[560]; // [rsp+70h] [rbp-230h] BYREF

  v3 = (unsigned __int64)v47;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_3(512LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "8 48 4 13 scene_id:5693 64 4 13 group_id:5710 80 4 13 quest_id:5682 96 16 14 scene_ptr:5721 128 "
                        "16 14 group_ptr:5746 160 24 11 id_vec:5699 224 28 16 log_context:5752 288 160 19 script_context:5755";
  *(_QWORD *)(v3 + 16) = PlayerQuestComp::execRefreshGroupSuiteRandom;
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = -234556943;
  v5[536862722] = -234556924;
  v5[536862723] = -219021312;
  v5[536862724] = -219021312;
  v5[536862725] = -234881024;
  v5[536862726] = -218959118;
  v5[536862727] = 0x4000000;
  v5[536862728] = -218959118;
  v5[536862734] = -202116109;
  v5[536862735] = -202116109;
  *(_DWORD *)(v3 + 80) = quest_id;
  if ( std::vector<std::string>::size(&exec->param) <= 1 )
  {
    common::milog::MiLogStream::create(
      &v46,
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/player/quest/player_quest_comp.cpp",
      "execRefreshGroupSuiteRandom",
      5689);
    common::milog::MiLogStream::operator<<<char [24],(char *[24])0>(&v46, (const char (*)[24])"QuestExec config failed");
    common::milog::MiLogStream::~MiLogStream(&v46);
    goto LABEL_43;
  }
  *(_DWORD *)(v3 + 48) = 0;
  v6 = std::vector<std::string>::operator[](&exec->param, 0LL);
  if ( common::tools::StringUtils::strToNum<unsigned int>(v6, (unsigned int *)(v3 + 48), 1) )
  {
    common::milog::MiLogStream::create(
      &v46,
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/player/quest/player_quest_comp.cpp",
      "execRefreshGroupSuiteRandom",
      5696);
    v7 = common::milog::MiLogStream::operator<<<char [14],(char *[14])0>(&v46, (const char (*)[14])" exec.param: ");
    v8 = std::vector<std::string>::operator[](&exec->param, 0LL);
    v9 = common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v7, v8);
    common::milog::MiLogStream::operator<<<char [13],(char *[13])0>(v9, (const char (*)[13])byte_25168F60);
    common::milog::MiLogStream::~MiLogStream(&v46);
    goto LABEL_43;
  }
  std::vector<unsigned int>::vector((std::vector<unsigned int> *const)(v3 + 160));
  std::allocator<char>::allocator(&__a);
  std::string::basic_string<std::allocator<char>>((std::string *const)&v46, ",", &__a);
  v10 = std::vector<std::string>::operator[](&exec->param, 1uLL);
  v11 = common::tools::StringUtils::splitToList<unsigned int>(
          v10,
          (const std::string *)&v46,
          (std::vector<unsigned int> *)(v3 + 160),
          1) != 0;
  std::string::~string(&v46);
  std::allocator<char>::~allocator(&__a);
  if ( !v11 )
  {
    if ( std::vector<unsigned int>::size((const std::vector<unsigned int> *const)(v3 + 160)) <= 1 )
    {
      common::milog::MiLogStream::create(
        &v46,
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/player/quest/player_quest_comp.cpp",
        "execRefreshGroupSuiteRandom",
        5707);
      v15 = common::milog::MiLogStream::operator<<<char [14],(char *[14])0>(&v46, (const char (*)[14])" exec.param: ");
      v16 = std::vector<std::string>::operator[](&exec->param, 1uLL);
      v17 = common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v15, v16);
      common::milog::MiLogStream::operator<<<char [13],(char *[13])0>(v17, (const char (*)[13])byte_25168F60);
      common::milog::MiLogStream::~MiLogStream(&v46);
      goto LABEL_42;
    }
    v18 = std::vector<unsigned int>::operator[]((std::vector<unsigned int> *const)(v3 + 160), 0LL);
    v19 = v18;
    if ( *(_BYTE *)(((unsigned __int64)v18 >> 3) + 0x7FFF8000) != 0
      && (char)(((unsigned __int8)v18 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)v18 >> 3) + 0x7FFF8000) )
    {
      __asan_report_load4(v18);
    }
    *(_DWORD *)(v3 + 64) = *v19;
    v20 = std::vector<unsigned int>::size((const std::vector<unsigned int> *const)(v3 + 160));
    rand_idx = common::tools::RandomUtils::rand<unsigned long>(1uLL, v20 - 1);
    v21 = std::vector<unsigned int>::operator[]((std::vector<unsigned int> *const)(v3 + 160), rand_idx);
    v22 = v21;
    if ( *(_BYTE *)(((unsigned __int64)v21 >> 3) + 0x7FFF8000) != 0
      && (char)(((unsigned __int8)v21 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)v21 >> 3) + 0x7FFF8000) )
    {
      __asan_report_load4(v21);
    }
    suite_id = *v22;
    ServiceBox::findService<GameserverService>();
    GameserverService::getConfig((GameserverService *const)(v3 + 128));
    v23 = std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 128));
    scene_config_ptr = data::SceneExcelConfigMgrBase::findSceneExcelConfig(
                         &v23->design_config.txt_config_mgr.scene_config_mgr,
                         *(_DWORD *)(v3 + 48));
    std::shared_ptr<Config>::~shared_ptr((std::shared_ptr<Config> *const)(v3 + 128));
    if ( !scene_config_ptr )
    {
      common::milog::MiLogStream::create(
        &v46,
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/player/quest/player_quest_comp.cpp",
        "execRefreshGroupSuiteRandom",
        5718);
      v24 = common::milog::MiLogStream::operator<<<char [19],(char *[19])0>(
              &v46,
              (const char (*)[19])"scene_id invalid: ");
      common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v24, (const unsigned int *)(v3 + 48));
      common::milog::MiLogStream::~MiLogStream(&v46);
      goto LABEL_42;
    }
    *(_QWORD *)(v3 + 96) = 0LL;
    *(_QWORD *)(v3 + 104) = 0LL;
    if ( *(_BYTE *)(((unsigned __int64)&scene_config_ptr->type >> 3) + 0x7FFF8000) != 0
      && (char)((((_BYTE)scene_config_ptr + 12) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&scene_config_ptr->type >> 3)
                                                                      + 0x7FFF8000) )
    {
      __asan_report_load4(&scene_config_ptr->type);
    }
    if ( scene_config_ptr->type == SCENE_DUNGEON )
    {
      if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
        __asan_report_load8(&this->player_);
      Player::getSceneComp(this->player_);
      PlayerSceneComp::getCurScene((const PlayerSceneComp *const)(v3 + 128));
      std::shared_ptr<Scene>::operator=((std::shared_ptr<Scene> *const)(v3 + 96), (std::shared_ptr<Scene> *)(v3 + 128));
      std::shared_ptr<Scene>::~shared_ptr((std::shared_ptr<Scene> *const)(v3 + 128));
      if ( std::operator==<Scene>((const std::shared_ptr<Scene> *)(v3 + 96), 0LL)
        || (v25 = std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 96)),
            Scene::getSceneId(v25) != *(_DWORD *)(v3 + 48)) )
      {
        common::milog::MiLogStream::create(
          &v46,
          &common::milog::MiLogDefault::default_log_obj_,
          3u,
          "./src/player/quest/player_quest_comp.cpp",
          "execRefreshGroupSuiteRandom",
          5727);
        v27 = common::milog::MiLogStream::operator<<<char [30],(char *[30])0>(
                &v46,
                (const char (*)[30])"getCurScene is not scene_id: ");
        common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v27, (const unsigned int *)(v3 + 48));
        common::milog::MiLogStream::~MiLogStream(&v46);
LABEL_41:
        std::shared_ptr<Scene>::~shared_ptr((std::shared_ptr<Scene> *const)(v3 + 96));
        goto LABEL_42;
      }
    }
    else
    {
      if ( *(_BYTE *)(((unsigned __int64)&scene_config_ptr->type >> 3) + 0x7FFF8000) != 0
        && (char)((((_BYTE)scene_config_ptr + 12) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&scene_config_ptr->type >> 3)
                                                                        + 0x7FFF8000) )
      {
        __asan_report_load4(&scene_config_ptr->type);
      }
      if ( !SceneExcelConfigMgr::isPlayerScene(scene_config_ptr->type) )
      {
        common::milog::MiLogStream::create(
          &v46,
          &common::milog::MiLogDefault::default_log_obj_,
          4u,
          "./src/player/quest/player_quest_comp.cpp",
          "execRefreshGroupSuiteRandom",
          5742);
        v31 = common::milog::MiLogStream::operator<<<char [20],(char *[20])0>(
                &v46,
                (const char (*)[20])"invalid scene_type:");
        common::milog::MiLogStream::operator<<<data::SceneType,(data::SceneType*)0>(v31, &scene_config_ptr->type);
        common::milog::MiLogStream::~MiLogStream(&v46);
        goto LABEL_41;
      }
      if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
        __asan_report_load8(&this->player_);
      SceneComp = (unsigned int)Player::getSceneComp(this->player_);
      PlayerSceneComp::getPersonalScene((PlayerSceneComp *const)&__r, SceneComp);
      std::shared_ptr<Scene>::operator=((std::shared_ptr<Scene> *const)(v3 + 96), &__r);
      std::shared_ptr<Scene>::~shared_ptr(&__r);
      if ( std::operator==<Scene>((const std::shared_ptr<Scene> *)(v3 + 96), 0LL) )
      {
        common::milog::MiLogStream::create(
          &v46,
          &common::milog::MiLogDefault::default_log_obj_,
          3u,
          "./src/player/quest/player_quest_comp.cpp",
          "execRefreshGroupSuiteRandom",
          5736);
        v29 = common::milog::MiLogStream::operator<<<char [11],(char *[11])0>(&v46, (const char (*)[11])"findScene ");
        v30 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                v29,
                (const unsigned int *)(v3 + 48));
        common::milog::MiLogStream::operator<<<char [8],(char *[8])0>(v30, (const char (*)[8])" failed");
        common::milog::MiLogStream::~MiLogStream(&v46);
        goto LABEL_41;
      }
    }
    v32 = (unsigned int)std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 96));
    Scene::findGroup((Scene *const)(v3 + 128), v32);
    if ( std::operator==<Group>((const std::shared_ptr<Group> *)(v3 + 128), 0LL) )
    {
      common::milog::MiLogStream::create(
        &v46,
        &common::milog::MiLogDefault::default_log_obj_,
        1u,
        "./src/player/quest/player_quest_comp.cpp",
        "execRefreshGroupSuiteRandom",
        5749);
      v33 = common::milog::MiLogStream::operator<<<char [11],(char *[11])0>(&v46, (const char (*)[11])"findGroup ");
      v34 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v33, (const unsigned int *)(v3 + 48));
      v35 = common::milog::MiLogStream::operator<<<char [2],(char *[2])0>(v34, (const char (*)[2])":");
      v36 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v35, (const unsigned int *)(v3 + 64));
      v37 = common::milog::MiLogStream::operator<<<char [11],(char *[11])0>(v36, (const char (*)[11])" quest_id:");
      v38 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v37, (const unsigned int *)(v3 + 80));
      common::milog::MiLogStream::operator<<<char [8],(char *[8])0>(v38, (const char (*)[8])" failed");
      common::milog::MiLogStream::~MiLogStream(&v46);
    }
    else
    {
      SuiteLogContext::SuiteLogContext((SuiteLogContext *const)(v3 + 224));
      *(_DWORD *)(v3 + 224) = 7;
      *(_DWORD *)(v3 + 232) = *(_DWORD *)(v3 + 80);
      ScriptContext::ScriptContext((ScriptContext *const)(v3 + 288));
      v39 = std::__shared_ptr_access<Group,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Group,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 128));
      Group::refresh(v39, (const ScriptContext *)(v3 + 288), *(SuiteLogContext *)(v3 + 224), suite_id, 0);
      ScriptContext::~ScriptContext((ScriptContext *const)(v3 + 288));
    }
    std::shared_ptr<Group>::~shared_ptr((std::shared_ptr<Group> *const)(v3 + 128));
    goto LABEL_41;
  }
  common::milog::MiLogStream::create(
    &v46,
    &common::milog::MiLogDefault::default_log_obj_,
    3u,
    "./src/player/quest/player_quest_comp.cpp",
    "execRefreshGroupSuiteRandom",
    5702);
  v12 = common::milog::MiLogStream::operator<<<char [14],(char *[14])0>(&v46, (const char (*)[14])" exec.param: ");
  v13 = std::vector<std::string>::operator[](&exec->param, 1uLL);
  v14 = common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v12, v13);
  common::milog::MiLogStream::operator<<<char [13],(char *[13])0>(v14, (const char (*)[13])byte_25168F60);
  common::milog::MiLogStream::~MiLogStream(&v46);
LABEL_42:
  std::vector<unsigned int>::~vector((std::vector<unsigned int> *const)(v3 + 160));
LABEL_43:
  if ( v47 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8010) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8018) = 0LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8020) = 0;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8038) = 0LL;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8020) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8028) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8030) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8038) = 0xF5F5F5F5F5F5F5F5LL;
  }
};

// Line 5760: range 0000000013DFEF84-0000000013E002DE
void __cdecl PlayerQuestComp::execRefreshDynamicGroupsAndSetInitSuite(
        PlayerQuestComp *const this,
        const data::QuestExec *exec,
        uint32_t quest_id)
{
  unsigned __int64 v3; // r13
  __int64 v4; // rax
  _DWORD *v5; // r12
  common::milog::MiLogStream *v6; // rax
  common::milog::MiLogStream *v7; // rax
  common::milog::MiLogStream *v8; // r14
  const std::string *v9; // rax
  common::milog::MiLogStream *v10; // r14
  const std::string *v11; // rax
  common::milog::MiLogStream *v12; // rax
  common::milog::MiLogStream *v13; // r14
  const std::string *v14; // rax
  common::milog::MiLogStream *v15; // r14
  const std::string *v16; // rax
  common::milog::MiLogStream *v17; // rax
  common::milog::MiLogStream *v18; // r14
  const std::string *v19; // rax
  common::milog::MiLogStream *v20; // rax
  common::milog::MiLogStream *v21; // r14
  const std::string *v22; // rax
  common::milog::MiLogStream *v23; // rax
  const std::string *v24; // rax
  common::milog::MiLogStream *v25; // r14
  const std::string *v26; // rax
  SceneExcelConfigMgr *p_scene_config_mgr; // rcx
  common::milog::MiLogStream *v28; // rax
  common::milog::MiLogStream *v29; // rax
  common::milog::MiLogStream *v30; // rax
  uint32_t SceneComp; // ecx
  common::milog::MiLogStream *v32; // rax
  common::milog::MiLogStream *v33; // rax
  common::milog::MiLogStream *v34; // rax
  Scene *v35; // rax
  SceneBlockGroupComp *BlockGroupComp; // rax
  unsigned __int64 p_M_parent; // rax
  uint32_t v38; // ecx
  common::milog::MiLogStream *v39; // rax
  common::milog::MiLogStream *v40; // rax
  common::milog::MiLogStream *v41; // rax
  common::milog::MiLogStream *v42; // rax
  Group *v43; // rax
  void (__fastcall *v44)(common::milog::MiLogStream *, std::vector<unsigned int> *, _QWORD, _QWORD); // [rsp+8h] [rbp-2F8h]
  bool v45; // [rsp+10h] [rbp-2F0h]
  bool v46; // [rsp+10h] [rbp-2F0h]
  common::milog::MiLogStream *v47; // [rsp+10h] [rbp-2F0h]
  std::vector<unsigned int>::size_type v48; // [rsp+10h] [rbp-2F0h]
  common::milog::MiLogStream *v49; // [rsp+10h] [rbp-2F0h]
  int v50; // [rsp+10h] [rbp-2F0h]
  common::milog::MiLogStream *v51; // [rsp+10h] [rbp-2F0h]
  int v52; // [rsp+10h] [rbp-2F0h]
  std::allocator<char> __a; // [rsp+3Fh] [rbp-2C1h] BYREF
  uint32_t revise_level; // [rsp+40h] [rbp-2C0h]
  uint32_t idx; // [rsp+44h] [rbp-2BCh]
  uint32_t *scene_id; // [rsp+48h] [rbp-2B8h]
  uint32_t *group_id; // [rsp+50h] [rbp-2B0h]
  const data::SceneExcelConfig *scene_config_ptr; // [rsp+58h] [rbp-2A8h]
  std::shared_ptr<Scene> __r; // [rsp+60h] [rbp-2A0h] BYREF
  std::vector<unsigned int> v61; // [rsp+70h] [rbp-290h] BYREF
  common::milog::MiLogStream v62; // [rsp+90h] [rbp-270h] BYREF
  char v63[592]; // [rsp+B0h] [rbp-250h] BYREF

  v3 = (unsigned __int64)v63;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_4(544LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "7 48 4 24 config_revise_level:5786 64 16 14 scene_ptr:5807 96 16 14 group_ptr:5830 128 24 17 sce"
                        "ne_id_vec:5766 192 24 17 group_id_vec:5767 256 28 16 log_context:5836 320 160 19 script_context:5839";
  *(_QWORD *)(v3 + 16) = PlayerQuestComp::execRefreshDynamicGroupsAndSetInitSuite;
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = -234556943;
  v5[536862722] = -219021312;
  v5[536862723] = -219021312;
  v5[536862724] = -234881024;
  v5[536862725] = -218959118;
  v5[536862726] = -234881024;
  v5[536862727] = -218959118;
  v5[536862728] = 0x4000000;
  v5[536862729] = -218959118;
  v5[536862735] = -202116109;
  v5[536862736] = -202116109;
  if ( std::vector<std::string>::size(&exec->param) > 1 )
  {
    std::vector<unsigned int>::vector((std::vector<unsigned int> *const)(v3 + 128));
    std::vector<unsigned int>::vector((std::vector<unsigned int> *const)(v3 + 192));
    std::allocator<char>::allocator(&__a);
    std::string::basic_string<std::allocator<char>>((std::string *const)&v62, ",", &__a);
    v9 = std::vector<std::string>::operator[](&exec->param, 0LL);
    v45 = common::tools::StringUtils::splitToList<unsigned int>(
            v9,
            (const std::string *)&v62,
            (std::vector<unsigned int> *)(v3 + 128),
            1) != 0;
    std::string::~string(&v62);
    std::allocator<char>::~allocator(&__a);
    if ( v45 )
    {
      common::milog::MiLogStream::create(
        &v62,
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/player/quest/player_quest_comp.cpp",
        "execRefreshDynamicGroupsAndSetInitSuite",
        5770);
      v10 = common::milog::MiLogStream::operator<<<char [15],(char *[15])0>(&v62, (const char (*)[15])"invalid param:");
      v11 = std::vector<std::string>::operator[](&exec->param, 0LL);
      v12 = common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v10, v11);
      v13 = common::milog::MiLogStream::operator<<<char [6],(char *[6])0>(v12, (const char (*)[6])" uid:");
      if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
        __asan_report_load8(&this->player_);
LABEL_19:
      *(_DWORD *)(v3 + 48) = Player::getUid(this->player_);
      common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v13, (const unsigned int *)(v3 + 48));
      common::milog::MiLogStream::~MiLogStream(&v62);
LABEL_65:
      std::vector<unsigned int>::~vector((std::vector<unsigned int> *const)(v3 + 192));
      std::vector<unsigned int>::~vector((std::vector<unsigned int> *const)(v3 + 128));
      goto LABEL_66;
    }
    std::allocator<char>::allocator(&__a);
    std::string::basic_string<std::allocator<char>>((std::string *const)&v62, ",", &__a);
    v14 = std::vector<std::string>::operator[](&exec->param, 1uLL);
    v46 = common::tools::StringUtils::splitToList<unsigned int>(
            v14,
            (const std::string *)&v62,
            (std::vector<unsigned int> *)(v3 + 192),
            1) != 0;
    std::string::~string(&v62);
    std::allocator<char>::~allocator(&__a);
    if ( v46 )
    {
      common::milog::MiLogStream::create(
        &v62,
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/player/quest/player_quest_comp.cpp",
        "execRefreshDynamicGroupsAndSetInitSuite",
        5775);
      v15 = common::milog::MiLogStream::operator<<<char [15],(char *[15])0>(&v62, (const char (*)[15])"invalid param:");
      v16 = std::vector<std::string>::operator[](&exec->param, 1uLL);
      v17 = common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v15, v16);
      v13 = common::milog::MiLogStream::operator<<<char [6],(char *[6])0>(v17, (const char (*)[6])" uid:");
      if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
        __asan_report_load8(&this->player_);
      goto LABEL_19;
    }
    v47 = (common::milog::MiLogStream *)std::vector<unsigned int>::size((const std::vector<unsigned int> *const)(v3 + 128));
    if ( v47 != (common::milog::MiLogStream *)std::vector<unsigned int>::size((const std::vector<unsigned int> *const)(v3 + 192)) )
    {
      common::milog::MiLogStream::create(
        &v62,
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/player/quest/player_quest_comp.cpp",
        "execRefreshDynamicGroupsAndSetInitSuite",
        5780);
      v18 = common::milog::MiLogStream::operator<<<char [18],(char *[18])0>(
              &v62,
              (const char (*)[18])"invalid param[0]:");
      v19 = std::vector<std::string>::operator[](&exec->param, 0LL);
      v20 = common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v18, v19);
      v21 = common::milog::MiLogStream::operator<<<char [27],(char *[27])0>(
              v20,
              (const char (*)[27])" size dont equal param[1]:");
      v22 = std::vector<std::string>::operator[](&exec->param, 1uLL);
      v23 = common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v21, v22);
      v13 = common::milog::MiLogStream::operator<<<char [6],(char *[6])0>(v23, (const char (*)[6])" uid:");
      if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
        __asan_report_load8(&this->player_);
      goto LABEL_19;
    }
    revise_level = 0;
    if ( std::vector<std::string>::size(&exec->param) == 3 )
    {
      *(_DWORD *)(v3 + 48) = 0;
      v24 = std::vector<std::string>::operator[](&exec->param, 2uLL);
      if ( common::tools::StringUtils::strToNum<unsigned int>(v24, (unsigned int *)(v3 + 48), 1) )
      {
        common::milog::MiLogStream::create(
          &v62,
          &common::milog::MiLogDefault::default_log_obj_,
          3u,
          "./src/player/quest/player_quest_comp.cpp",
          "execRefreshDynamicGroupsAndSetInitSuite",
          5789);
        v25 = common::milog::MiLogStream::operator<<<char [17],(char *[17])0>(
                &v62,
                (const char (*)[17])"param not valid:");
        v26 = std::vector<std::string>::operator[](&exec->param, 2uLL);
        common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v25, v26);
        common::milog::MiLogStream::~MiLogStream(&v62);
        goto LABEL_65;
      }
      revise_level = *(_DWORD *)(v3 + 48);
    }
    for ( idx = 0; ; ++idx )
    {
      v48 = idx;
      if ( v48 >= std::vector<unsigned int>::size((const std::vector<unsigned int> *const)(v3 + 128)) )
        goto LABEL_65;
      scene_id = std::vector<unsigned int>::operator[]((std::vector<unsigned int> *const)(v3 + 128), idx);
      group_id = std::vector<unsigned int>::operator[]((std::vector<unsigned int> *const)(v3 + 192), idx);
      ServiceBox::findService<GameserverService>();
      GameserverService::getConfig((GameserverService *const)(v3 + 96));
      p_scene_config_mgr = &std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 96))->design_config.txt_config_mgr.scene_config_mgr;
      if ( *(_BYTE *)(((unsigned __int64)scene_id >> 3) + 0x7FFF8000) != 0
        && (char)(((unsigned __int8)scene_id & 7) + 3) >= *(_BYTE *)(((unsigned __int64)scene_id >> 3) + 0x7FFF8000) )
      {
        __asan_report_load4(scene_id);
      }
      scene_config_ptr = data::SceneExcelConfigMgrBase::findSceneExcelConfig(p_scene_config_mgr, *scene_id);
      std::shared_ptr<Config>::~shared_ptr((std::shared_ptr<Config> *const)(v3 + 96));
      if ( !scene_config_ptr )
      {
        common::milog::MiLogStream::create(
          &v62,
          &common::milog::MiLogDefault::default_log_obj_,
          3u,
          "./src/player/quest/player_quest_comp.cpp",
          "execRefreshDynamicGroupsAndSetInitSuite",
          5804);
        v28 = common::milog::MiLogStream::operator<<<char [19],(char *[19])0>(
                &v62,
                (const char (*)[19])"scene_id invalid: ");
        common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v28, scene_id);
        common::milog::MiLogStream::~MiLogStream(&v62);
        continue;
      }
      *(_QWORD *)(v3 + 64) = 0LL;
      *(_QWORD *)(v3 + 72) = 0LL;
      if ( *(_BYTE *)(((unsigned __int64)&scene_config_ptr->type >> 3) + 0x7FFF8000) != 0
        && (char)((((_BYTE)scene_config_ptr + 12) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&scene_config_ptr->type >> 3)
                                                                        + 0x7FFF8000) )
      {
        __asan_report_load4(&scene_config_ptr->type);
      }
      if ( scene_config_ptr->type == SCENE_DUNGEON )
        break;
      if ( *(_BYTE *)(((unsigned __int64)&scene_config_ptr->type >> 3) + 0x7FFF8000) != 0
        && (char)((((_BYTE)scene_config_ptr + 12) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&scene_config_ptr->type >> 3)
                                                                        + 0x7FFF8000) )
      {
        __asan_report_load4(&scene_config_ptr->type);
      }
      if ( SceneExcelConfigMgr::isPlayerScene(scene_config_ptr->type) )
      {
        if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
          __asan_report_load8(&this->player_);
        SceneComp = (unsigned int)Player::getSceneComp(this->player_);
        if ( *(_BYTE *)(((unsigned __int64)scene_id >> 3) + 0x7FFF8000) != 0
          && (char)(((unsigned __int8)scene_id & 7) + 3) >= *(_BYTE *)(((unsigned __int64)scene_id >> 3) + 0x7FFF8000) )
        {
          __asan_report_load4(scene_id);
        }
        PlayerSceneComp::getPersonalScene((PlayerSceneComp *const)&__r, SceneComp);
        std::shared_ptr<Scene>::operator=((std::shared_ptr<Scene> *const)(v3 + 64), &__r);
        std::shared_ptr<Scene>::~shared_ptr(&__r);
        if ( std::operator==<Scene>((const std::shared_ptr<Scene> *)(v3 + 64), 0LL) )
        {
          common::milog::MiLogStream::create(
            &v62,
            &common::milog::MiLogDefault::default_log_obj_,
            3u,
            "./src/player/quest/player_quest_comp.cpp",
            "execRefreshDynamicGroupsAndSetInitSuite",
            5825);
          v33 = common::milog::MiLogStream::operator<<<char [11],(char *[11])0>(&v62, (const char (*)[11])"findScene ");
          v34 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v33, scene_id);
          v49 = common::milog::MiLogStream::operator<<<char [14],(char *[14])0>(
                  v34,
                  (const char (*)[14])" failed, uid:");
          if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
            __asan_report_load8(&this->player_);
          goto LABEL_35;
        }
        v35 = std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 64));
        BlockGroupComp = Scene::getBlockGroupComp(v35);
        v51 = (common::milog::MiLogStream *)BlockGroupComp;
        if ( *(_BYTE *)(((unsigned __int64)BlockGroupComp >> 3) + 0x7FFF8000) )
          __asan_report_load8(BlockGroupComp);
        p_M_parent = (unsigned __int64)&v51->log_->log_level_info_map_._M_t._M_impl._M_header._M_parent;
        if ( *(_BYTE *)((p_M_parent >> 3) + 0x7FFF8000) )
          p_M_parent = __asan_report_load8(&v51->log_->log_level_info_map_._M_t._M_impl._M_header._M_parent);
        v44 = *(void (__fastcall **)(common::milog::MiLogStream *, std::vector<unsigned int> *, _QWORD, _QWORD))p_M_parent;
        if ( *(_BYTE *)(((unsigned __int64)group_id >> 3) + 0x7FFF8000) != 0
          && (char)(((unsigned __int8)group_id & 7) + 3) >= *(_BYTE *)(((unsigned __int64)group_id >> 3) + 0x7FFF8000) )
        {
          __asan_report_load4(group_id);
        }
        *(_DWORD *)(v3 + 48) = *group_id;
        std::allocator<unsigned int>::allocator((std::allocator<unsigned int> *const)&__a);
        std::vector<unsigned int>::vector(
          &v61,
          (std::initializer_list<unsigned int>)__PAIR128__(1LL, v3 + 48),
          (const std::vector<unsigned int>::allocator_type *)&__a);
        v44(v51, &v61, revise_level, 0LL);
        std::vector<unsigned int>::~vector(&v61);
        std::allocator<unsigned int>::~allocator((std::allocator<unsigned int> *const)&__a);
        v38 = (unsigned int)std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 64));
        if ( *(_BYTE *)(((unsigned __int64)group_id >> 3) + 0x7FFF8000) != 0
          && (char)(((unsigned __int8)group_id & 7) + 3) >= *(_BYTE *)(((unsigned __int64)group_id >> 3) + 0x7FFF8000) )
        {
          __asan_report_load4(group_id);
        }
        Scene::findGroup((Scene *const)(v3 + 96), v38);
        if ( std::operator==<Group>((const std::shared_ptr<Group> *)(v3 + 96), 0LL) )
        {
          common::milog::MiLogStream::create(
            &v62,
            &common::milog::MiLogDefault::default_log_obj_,
            3u,
            "./src/player/quest/player_quest_comp.cpp",
            "execRefreshDynamicGroupsAndSetInitSuite",
            5833);
          v39 = common::milog::MiLogStream::operator<<<char [11],(char *[11])0>(&v62, (const char (*)[11])"findGroup ");
          v40 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v39, scene_id);
          v41 = common::milog::MiLogStream::operator<<<char [2],(char *[2])0>(v40, (const char (*)[2])":");
          v42 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v41, group_id);
          common::milog::MiLogStream::operator<<<char [8],(char *[8])0>(v42, (const char (*)[8])" failed");
          common::milog::MiLogStream::~MiLogStream(&v62);
          v52 = 0;
        }
        else
        {
          SuiteLogContext::SuiteLogContext((SuiteLogContext *const)(v3 + 256));
          *(_DWORD *)(v3 + 256) = 7;
          *(_DWORD *)(v3 + 264) = quest_id;
          ScriptContext::ScriptContext((ScriptContext *const)(v3 + 320));
          v43 = std::__shared_ptr_access<Group,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Group,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 96));
          Group::refresh(v43, (const ScriptContext *)(v3 + 320), *(SuiteLogContext *)(v3 + 256));
          ScriptContext::~ScriptContext((ScriptContext *const)(v3 + 320));
          v52 = 1;
        }
        std::shared_ptr<Group>::~shared_ptr((std::shared_ptr<Group> *const)(v3 + 96));
        if ( v52 == 1 )
          v50 = 2;
        else
          v50 = 1;
      }
      else
      {
        common::milog::MiLogStream::create(
          &v62,
          &common::milog::MiLogDefault::default_log_obj_,
          4u,
          "./src/player/quest/player_quest_comp.cpp",
          "execRefreshDynamicGroupsAndSetInitSuite",
          5819);
        v32 = common::milog::MiLogStream::operator<<<char [20],(char *[20])0>(
                &v62,
                (const char (*)[20])"invalid scene_type:");
        common::milog::MiLogStream::operator<<<data::SceneType,(data::SceneType*)0>(v32, &scene_config_ptr->type);
        common::milog::MiLogStream::~MiLogStream(&v62);
        v50 = 0;
      }
LABEL_63:
      std::shared_ptr<Scene>::~shared_ptr((std::shared_ptr<Scene> *const)(v3 + 64));
      if ( !v50 )
        goto LABEL_65;
    }
    common::milog::MiLogStream::create(
      &v62,
      &common::milog::MiLogDefault::default_log_obj_,
      4u,
      "./src/player/quest/player_quest_comp.cpp",
      "execRefreshDynamicGroupsAndSetInitSuite",
      5810);
    v29 = common::milog::MiLogStream::operator<<<char [21],(char *[21])0>(&v62, (const char (*)[21])off_25169800);
    v30 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v29, scene_id);
    v49 = common::milog::MiLogStream::operator<<<char [6],(char *[6])0>(v30, (const char (*)[6])" uid:");
    if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
      __asan_report_load8(&this->player_);
LABEL_35:
    *(_DWORD *)(v3 + 48) = Player::getUid(this->player_);
    common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v49, (const unsigned int *)(v3 + 48));
    common::milog::MiLogStream::~MiLogStream(&v62);
    v50 = 0;
    goto LABEL_63;
  }
  common::milog::MiLogStream::create(
    &v62,
    &common::milog::MiLogDefault::default_log_obj_,
    3u,
    "./src/player/quest/player_quest_comp.cpp",
    "execRefreshDynamicGroupsAndSetInitSuite",
    5763);
  v6 = common::milog::MiLogStream::operator<<<char [15],(char *[15])0>(&v62, (const char (*)[15])"invalid param:");
  v7 = common::milog::MiLogStream::operator<<<std::string>(v6, &exec->param);
  v8 = common::milog::MiLogStream::operator<<<char [6],(char *[6])0>(v7, (const char (*)[6])" uid:");
  if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
    __asan_report_load8(&this->player_);
  *(_DWORD *)(v3 + 48) = Player::getUid(this->player_);
  common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v8, (const unsigned int *)(v3 + 48));
  common::milog::MiLogStream::~MiLogStream(&v62);
LABEL_66:
  if ( v63 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8010) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8018) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8020) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF803C) = 0LL;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8020) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8028) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8030) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8038) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8040) = -168430091;
  }
};

// Line 5845: range 0000000013E002E0-0000000013E01248
void __cdecl PlayerQuestComp::execRefreshWorldQuestFlowGroupSuiteBuiltIn(
        PlayerQuestComp *const this,
        const data::QuestExec *exec,
        uint32_t parent_quest_id)
{
  unsigned __int64 v3; // r13
  __int64 v4; // rax
  _DWORD *v5; // r12
  const std::string *v6; // rax
  bool v7; // r14
  common::milog::MiLogStream *v8; // r14
  const std::string *v9; // rax
  common::milog::MiLogStream *v10; // rax
  common::milog::MiLogStream *v11; // r14
  const std::string *v12; // rax
  common::milog::MiLogStream *v13; // rax
  const std::string *v14; // rax
  common::milog::MiLogStream *v15; // r14
  const std::string *v16; // rax
  common::milog::MiLogStream *v17; // rax
  size_t v18; // rax
  std::vector<unsigned int>::reference v19; // rax
  _DWORD *v20; // rdx
  std::vector<unsigned int>::reference v21; // rax
  _DWORD *v22; // rdx
  common::milog::MiLogStream *v23; // rax
  common::milog::MiLogStream *v24; // rax
  common::milog::MiLogStream *v25; // rax
  common::milog::MiLogStream *v26; // r14
  common::milog::MiLogStream *v27; // rax
  common::milog::MiLogStream *v28; // rax
  uint32_t SceneComp; // eax
  common::milog::MiLogStream *v30; // rax
  common::milog::MiLogStream *v31; // rax
  common::milog::MiLogStream *v32; // rax
  common::milog::MiLogStream *v33; // rax
  common::milog::MiLogStream *v34; // r14
  Scene *v35; // rax
  uint32_t BlockGroupComp; // eax
  common::milog::MiLogStream *v37; // rax
  common::milog::MiLogStream *v38; // rax
  common::milog::MiLogStream *v39; // rax
  common::milog::MiLogStream *v40; // rax
  common::milog::MiLogStream *v41; // rax
  common::milog::MiLogStream *v42; // rax
  common::milog::MiLogStream *v43; // r14
  common::milog::MiLogStream *v44; // rax
  common::milog::MiLogStream *v45; // rax
  common::milog::MiLogStream *v46; // rax
  common::milog::MiLogStream *v47; // rax
  common::milog::MiLogStream *v48; // rax
  common::milog::MiLogStream *v49; // rax
  common::milog::MiLogStream *v50; // r14
  Group *v51; // rax
  std::allocator<char> __a; // [rsp+23h] [rbp-29Dh] BYREF
  unsigned int Uid; // [rsp+24h] [rbp-29Ch] BYREF
  char *val; // [rsp+28h] [rbp-298h] BYREF
  size_t idx; // [rsp+30h] [rbp-290h]
  const LuaConfigMgr *lua_config_mgr; // [rsp+38h] [rbp-288h]
  const TxtConfigMgr *txt_config_mgr; // [rsp+40h] [rbp-280h]
  const data::SceneExcelConfig *scene_config_ptr; // [rsp+48h] [rbp-278h]
  std::string sep_1; // [rsp+50h] [rbp-270h] BYREF
  common::milog::MiLogStream v61; // [rsp+70h] [rbp-250h] BYREF
  char v62[560]; // [rsp+90h] [rbp-230h] BYREF

  v3 = (unsigned __int64)v62;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_3(512LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "9 32 1 13 is_force:5863 48 4 13 group_id:5873 64 4 13 suite_id:5874 80 4 13 scene_id:5876 96 16 "
                        "14 scene_ptr:5891 128 16 14 group_ptr:5898 160 24 11 id_vec:5852 224 28 16 log_context:5905 288 "
                        "160 19 script_context:5908";
  *(_QWORD *)(v3 + 16) = PlayerQuestComp::execRefreshWorldQuestFlowGroupSuiteBuiltIn;
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = -234556927;
  v5[536862722] = -234556924;
  v5[536862723] = -219021312;
  v5[536862724] = -219021312;
  v5[536862725] = -234881024;
  v5[536862726] = -218959118;
  v5[536862727] = 0x4000000;
  v5[536862728] = -218959118;
  v5[536862734] = -202116109;
  v5[536862735] = -202116109;
  if ( std::vector<std::string>::size(&exec->param) > 1 )
  {
    std::vector<unsigned int>::vector((std::vector<unsigned int> *const)(v3 + 160));
    std::allocator<char>::allocator(v3 + 32);
    std::string::basic_string<std::allocator<char>>(
      (std::string *const)&v61,
      ",",
      (const std::allocator<char> *)(v3 + 32));
    std::allocator<char>::allocator(&__a);
    std::string::basic_string<std::allocator<char>>(&sep_1, ";", &__a);
    v6 = std::vector<std::string>::operator[](&exec->param, 0LL);
    v7 = common::tools::StringUtils::splitToList<unsigned int>(
           v6,
           &sep_1,
           (const std::string *)&v61,
           2u,
           (std::vector<unsigned int> *)(v3 + 160),
           1) != 0;
    std::string::~string(&sep_1);
    std::allocator<char>::~allocator(&__a);
    std::string::~string(&v61);
    std::allocator<char>::~allocator(v3 + 32);
    if ( v7 )
    {
      common::milog::MiLogStream::create(
        &v61,
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/player/quest/player_quest_comp.cpp",
        "execRefreshWorldQuestFlowGroupSuiteBuiltIn",
        5855);
      v8 = common::milog::MiLogStream::operator<<<char [24],(char *[24])0>(
             &v61,
             (const char (*)[24])"[WQ_FLOW] exec.param0: ");
      v9 = std::vector<std::string>::operator[](&exec->param, 0LL);
      v10 = common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v8, v9);
      common::milog::MiLogStream::operator<<<char [13],(char *[13])0>(v10, (const char (*)[13])byte_25168F60);
      common::milog::MiLogStream::~MiLogStream(&v61);
    }
    else if ( std::vector<unsigned int>::size((const std::vector<unsigned int> *const)(v3 + 160)) > 1 )
    {
      *(_BYTE *)(v3 + 32) = 0;
      v14 = std::vector<std::string>::operator[](&exec->param, 1uLL);
      if ( common::tools::StringUtils::strToNum<bool>(v14, (bool *)(v3 + 32), 1) )
      {
        common::milog::MiLogStream::create(
          &v61,
          &common::milog::MiLogDefault::default_log_obj_,
          3u,
          "./src/player/quest/player_quest_comp.cpp",
          "execRefreshWorldQuestFlowGroupSuiteBuiltIn",
          5866);
        v15 = common::milog::MiLogStream::operator<<<char [24],(char *[24])0>(
                &v61,
                (const char (*)[24])"[WQ_FLOW] exec.param1: ");
        v16 = std::vector<std::string>::operator[](&exec->param, 1uLL);
        v17 = common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v15, v16);
        common::milog::MiLogStream::operator<<<char [13],(char *[13])0>(v17, (const char (*)[13])byte_25168F60);
        common::milog::MiLogStream::~MiLogStream(&v61);
      }
      else
      {
        ServiceBox::findService<GameserverService>();
        GameserverService::getConfig((GameserverService *const)(v3 + 96));
        lua_config_mgr = &std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 96))->design_config.lua_config_mgr;
        std::shared_ptr<Config>::~shared_ptr((std::shared_ptr<Config> *const)(v3 + 96));
        ServiceBox::findService<GameserverService>();
        GameserverService::getConfig((GameserverService *const)(v3 + 128));
        txt_config_mgr = &std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 128))->design_config.txt_config_mgr;
        std::shared_ptr<Config>::~shared_ptr((std::shared_ptr<Config> *const)(v3 + 128));
        for ( idx = 1LL; ; idx += 2LL )
        {
          v18 = std::vector<unsigned int>::size((const std::vector<unsigned int> *const)(v3 + 160));
          if ( idx >= v18 )
            break;
          v19 = std::vector<unsigned int>::operator[]((std::vector<unsigned int> *const)(v3 + 160), idx - 1);
          v20 = v19;
          if ( *(_BYTE *)(((unsigned __int64)v19 >> 3) + 0x7FFF8000) != 0
            && (char)(((unsigned __int8)v19 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)v19 >> 3) + 0x7FFF8000) )
          {
            __asan_report_load4(v19);
          }
          *(_DWORD *)(v3 + 48) = *v20;
          v21 = std::vector<unsigned int>::operator[]((std::vector<unsigned int> *const)(v3 + 160), idx);
          v22 = v21;
          if ( *(_BYTE *)(((unsigned __int64)v21 >> 3) + 0x7FFF8000) != 0
            && (char)(((unsigned __int8)v21 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)v21 >> 3) + 0x7FFF8000) )
          {
            __asan_report_load4(v21);
          }
          *(_DWORD *)(v3 + 64) = *v22;
          *(_DWORD *)(v3 + 80) = LuaConfigMgr::getSceneIdByGroupId(lua_config_mgr, *(_DWORD *)(v3 + 48));
          scene_config_ptr = data::SceneExcelConfigMgrBase::findSceneExcelConfig(
                               &txt_config_mgr->scene_config_mgr,
                               *(_DWORD *)(v3 + 80));
          if ( !scene_config_ptr )
          {
            common::milog::MiLogStream::create(
              &v61,
              &common::milog::MiLogDefault::default_log_obj_,
              3u,
              "./src/player/quest/player_quest_comp.cpp",
              "execRefreshWorldQuestFlowGroupSuiteBuiltIn",
              5881);
            v23 = common::milog::MiLogStream::operator<<<char [29],(char *[29])0>(
                    &v61,
                    (const char (*)[29])"[WQ_FLOW] scene_id invalid: ");
            v24 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                    v23,
                    (const unsigned int *)(v3 + 80));
            v25 = common::milog::MiLogStream::operator<<<char [12],(char *[12])0>(
                    v24,
                    (const char (*)[12])", group_id:");
            common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v25, (const unsigned int *)(v3 + 48));
            common::milog::MiLogStream::~MiLogStream(&v61);
            break;
          }
          if ( *(_BYTE *)(((unsigned __int64)&scene_config_ptr->type >> 3) + 0x7FFF8000) != 0
            && (char)((((_BYTE)scene_config_ptr + 12) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&scene_config_ptr->type >> 3)
                                                                            + 0x7FFF8000) )
          {
            __asan_report_load4(&scene_config_ptr->type);
          }
          if ( !SceneExcelConfigMgr::isPlayerScene(scene_config_ptr->type) )
          {
            common::milog::MiLogStream::create(
              &v61,
              &common::milog::MiLogDefault::default_log_obj_,
              4u,
              "./src/player/quest/player_quest_comp.cpp",
              "execRefreshWorldQuestFlowGroupSuiteBuiltIn",
              5887);
            v26 = common::milog::MiLogStream::operator<<<char [30],(char *[30])0>(
                    &v61,
                    (const char (*)[30])"[WQ_FLOW] invalid scene_type:");
            if ( *(_BYTE *)(((unsigned __int64)&scene_config_ptr->type >> 3) + 0x7FFF8000) != 0
              && (char)((((_BYTE)scene_config_ptr + 12) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&scene_config_ptr->type >> 3)
                                                                              + 0x7FFF8000) )
            {
              __asan_report_load4(&scene_config_ptr->type);
            }
            val = (char *)data::enumValToStr(scene_config_ptr->type);
            v27 = common::milog::MiLogStream::operator<<<char const*,(char const**)0>(v26, (const char *const *)&val);
            v28 = common::milog::MiLogStream::operator<<<char [12],(char *[12])0>(
                    v27,
                    (const char (*)[12])", group_id:");
            common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v28, (const unsigned int *)(v3 + 48));
            common::milog::MiLogStream::~MiLogStream(&v61);
            break;
          }
          if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
            __asan_report_load8(&this->player_);
          SceneComp = (unsigned int)Player::getSceneComp(this->player_);
          PlayerSceneComp::findScene((const PlayerSceneComp *const)(v3 + 96), SceneComp);
          if ( std::operator==<Scene>((const std::shared_ptr<Scene> *)(v3 + 96), 0LL) )
          {
            common::milog::MiLogStream::create(
              &v61,
              &common::milog::MiLogDefault::default_log_obj_,
              3u,
              "./src/player/quest/player_quest_comp.cpp",
              "execRefreshWorldQuestFlowGroupSuiteBuiltIn",
              5894);
            v30 = common::milog::MiLogStream::operator<<<char [21],(char *[21])0>(
                    &v61,
                    (const char (*)[21])"[WQ_FLOW] findScene ");
            v31 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                    v30,
                    (const unsigned int *)(v3 + 80));
            v32 = common::milog::MiLogStream::operator<<<char [19],(char *[19])0>(
                    v31,
                    (const char (*)[19])" failed, group_id:");
            v33 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                    v32,
                    (const unsigned int *)(v3 + 48));
            v34 = common::milog::MiLogStream::operator<<<char [7],(char *[7])0>(v33, (const char (*)[7])", uid:");
            if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
              __asan_report_load8(&this->player_);
            Uid = Player::getUid(this->player_);
            common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v34, &Uid);
            common::milog::MiLogStream::~MiLogStream(&v61);
          }
          else
          {
            v35 = std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 96));
            BlockGroupComp = (unsigned int)Scene::getBlockGroupComp(v35);
            SceneBlockGroupComp::getActiveGroup((SceneBlockGroupComp *const)(v3 + 128), BlockGroupComp);
            if ( std::operator==<Group>((const std::shared_ptr<Group> *)(v3 + 128), 0LL) )
            {
              common::milog::MiLogStream::create(
                &v61,
                &common::milog::MiLogDefault::default_log_obj_,
                1u,
                "./src/player/quest/player_quest_comp.cpp",
                "execRefreshWorldQuestFlowGroupSuiteBuiltIn",
                5901);
              v37 = common::milog::MiLogStream::operator<<<char [26],(char *[26])0>(
                      &v61,
                      (const char (*)[26])"[WQ_FLOW] getActiveGroup ");
              v38 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                      v37,
                      (const unsigned int *)(v3 + 80));
              v39 = common::milog::MiLogStream::operator<<<char [2],(char *[2])0>(v38, (const char (*)[2])":");
              v40 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                      v39,
                      (const unsigned int *)(v3 + 48));
              v41 = common::milog::MiLogStream::operator<<<char [19],(char *[19])0>(
                      v40,
                      (const char (*)[19])" failed, group_id:");
              v42 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                      v41,
                      (const unsigned int *)(v3 + 48));
              v43 = common::milog::MiLogStream::operator<<<char [7],(char *[7])0>(v42, (const char (*)[7])", uid:");
              if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
                __asan_report_load8(&this->player_);
              Uid = Player::getUid(this->player_);
              common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v43, &Uid);
              common::milog::MiLogStream::~MiLogStream(&v61);
            }
            else
            {
              common::milog::MiLogStream::create(
                &v61,
                &common::milog::MiLogDefault::default_log_obj_,
                1u,
                "./src/player/quest/player_quest_comp.cpp",
                "execRefreshWorldQuestFlowGroupSuiteBuiltIn",
                5904);
              v44 = common::milog::MiLogStream::operator<<<char [37],(char *[37])0>(
                      &v61,
                      (const char (*)[37])"[WQ_FLOW] built_in refresh group_id:");
              v45 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                      v44,
                      (const unsigned int *)(v3 + 48));
              v46 = common::milog::MiLogStream::operator<<<char [12],(char *[12])0>(
                      v45,
                      (const char (*)[12])", suite_id:");
              v47 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                      v46,
                      (const unsigned int *)(v3 + 64));
              v48 = common::milog::MiLogStream::operator<<<char [12],(char *[12])0>(
                      v47,
                      (const char (*)[12])", is_force:");
              v49 = common::milog::MiLogStream::operator<<(v48, *(_BYTE *)(v3 + 32));
              v50 = common::milog::MiLogStream::operator<<<char [7],(char *[7])0>(v49, (const char (*)[7])", uid:");
              if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
                __asan_report_load8(&this->player_);
              Uid = Player::getUid(this->player_);
              common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v50, &Uid);
              common::milog::MiLogStream::~MiLogStream(&v61);
              SuiteLogContext::SuiteLogContext((SuiteLogContext *const)(v3 + 224));
              *(_DWORD *)(v3 + 224) = 13;
              *(_DWORD *)(v3 + 248) = parent_quest_id;
              ScriptContext::ScriptContext((ScriptContext *const)(v3 + 288));
              v51 = std::__shared_ptr_access<Group,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Group,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 128));
              Group::refreshWorldQuestFlowSuite(
                v51,
                (const ScriptContext *)(v3 + 288),
                *(SuiteLogContext *)(v3 + 224),
                *(_DWORD *)(v3 + 64),
                *(_BYTE *)(v3 + 32));
              ScriptContext::~ScriptContext((ScriptContext *const)(v3 + 288));
            }
            std::shared_ptr<Group>::~shared_ptr((std::shared_ptr<Group> *const)(v3 + 128));
          }
          std::shared_ptr<Scene>::~shared_ptr((std::shared_ptr<Scene> *const)(v3 + 96));
        }
      }
    }
    else
    {
      common::milog::MiLogStream::create(
        &v61,
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/player/quest/player_quest_comp.cpp",
        "execRefreshWorldQuestFlowGroupSuiteBuiltIn",
        5860);
      v11 = common::milog::MiLogStream::operator<<<char [24],(char *[24])0>(
              &v61,
              (const char (*)[24])"[WQ_FLOW] exec.param0: ");
      v12 = std::vector<std::string>::operator[](&exec->param, 0LL);
      v13 = common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v11, v12);
      common::milog::MiLogStream::operator<<<char [13],(char *[13])0>(v13, (const char (*)[13])byte_25168F60);
      common::milog::MiLogStream::~MiLogStream(&v61);
    }
    std::vector<unsigned int>::~vector((std::vector<unsigned int> *const)(v3 + 160));
  }
  else
  {
    common::milog::MiLogStream::create(
      &v61,
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/player/quest/player_quest_comp.cpp",
      "execRefreshWorldQuestFlowGroupSuiteBuiltIn",
      5849);
    common::milog::MiLogStream::operator<<<char [34],(char *[34])0>(
      &v61,
      (const char (*)[34])"[WQ_FLOW] QuestExec config failed");
    common::milog::MiLogStream::~MiLogStream(&v61);
  }
  if ( v62 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8010) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8018) = 0LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8020) = 0;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8038) = 0LL;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8020) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8028) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8030) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8038) = 0xF5F5F5F5F5F5F5F5LL;
  }
};

// Line 5914: range 0000000013E0124A-0000000013E020E9
void __cdecl PlayerQuestComp::execRefreshWorldQuestFlowGroupSuite(
        PlayerQuestComp *const this,
        const data::QuestExec *exec,
        uint32_t quest_id)
{
  unsigned __int64 v3; // r13
  __int64 v4; // rax
  _DWORD *v5; // r12
  const std::string *v6; // rax
  bool v7; // r14
  common::milog::MiLogStream *v8; // r14
  const std::string *v9; // rax
  common::milog::MiLogStream *v10; // rax
  common::milog::MiLogStream *v11; // r14
  const std::string *v12; // rax
  common::milog::MiLogStream *v13; // rax
  size_t v14; // rax
  std::vector<unsigned int>::reference v15; // rax
  _DWORD *v16; // rdx
  std::vector<unsigned int>::reference v17; // rax
  _DWORD *v18; // rdx
  common::milog::MiLogStream *v19; // rax
  common::milog::MiLogStream *v20; // rax
  common::milog::MiLogStream *v21; // rax
  common::milog::MiLogStream *v22; // r14
  common::milog::MiLogStream *v23; // rax
  common::milog::MiLogStream *v24; // rax
  uint32_t SceneComp; // eax
  common::milog::MiLogStream *v26; // rax
  common::milog::MiLogStream *v27; // rax
  common::milog::MiLogStream *v28; // rax
  common::milog::MiLogStream *v29; // rax
  common::milog::MiLogStream *v30; // r14
  Scene *v31; // rax
  unsigned __int64 BlockGroupComp; // rax
  unsigned __int64 v33; // rdx
  common::milog::MiLogStream *v34; // rax
  common::milog::MiLogStream *v35; // rax
  common::milog::MiLogStream *v36; // rax
  common::milog::MiLogStream *v37; // rax
  common::milog::MiLogStream *v38; // rax
  common::milog::MiLogStream *v39; // rax
  common::milog::MiLogStream *v40; // r14
  common::milog::MiLogStream *v41; // rax
  common::milog::MiLogStream *v42; // rax
  common::milog::MiLogStream *v43; // rax
  common::milog::MiLogStream *v44; // rax
  common::milog::MiLogStream *v45; // r14
  Group *v46; // rax
  std::allocator<char> v48; // [rsp+22h] [rbp-29Eh] BYREF
  std::allocator<char> __a; // [rsp+23h] [rbp-29Dh] BYREF
  unsigned int Uid; // [rsp+24h] [rbp-29Ch] BYREF
  char *val; // [rsp+28h] [rbp-298h] BYREF
  size_t idx; // [rsp+30h] [rbp-290h]
  const LuaConfigMgr *lua_config_mgr; // [rsp+38h] [rbp-288h]
  const TxtConfigMgr *txt_config_mgr; // [rsp+40h] [rbp-280h]
  const data::SceneExcelConfig *scene_config_ptr; // [rsp+48h] [rbp-278h]
  std::string sep_1; // [rsp+50h] [rbp-270h] BYREF
  common::milog::MiLogStream v57; // [rsp+70h] [rbp-250h] BYREF
  char v58[560]; // [rsp+90h] [rbp-230h] BYREF

  v3 = (unsigned __int64)v58;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_3(512LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "8 48 4 13 group_id:5936 64 4 13 suite_id:5937 80 4 13 scene_id:5939 96 16 14 scene_ptr:5954 128 "
                        "16 14 group_ptr:5961 160 24 11 id_vec:5921 224 28 16 log_context:5968 288 160 19 script_context:5971";
  *(_QWORD *)(v3 + 16) = PlayerQuestComp::execRefreshWorldQuestFlowGroupSuite;
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = -234556943;
  v5[536862722] = -234556924;
  v5[536862723] = -219021312;
  v5[536862724] = -219021312;
  v5[536862725] = -234881024;
  v5[536862726] = -218959118;
  v5[536862727] = 0x4000000;
  v5[536862728] = -218959118;
  v5[536862734] = -202116109;
  v5[536862735] = -202116109;
  if ( std::vector<std::string>::size(&exec->param) )
  {
    std::vector<unsigned int>::vector((std::vector<unsigned int> *const)(v3 + 160));
    std::allocator<char>::allocator(&__a);
    std::string::basic_string<std::allocator<char>>((std::string *const)&v57, ",", &__a);
    std::allocator<char>::allocator(&v48);
    std::string::basic_string<std::allocator<char>>(&sep_1, ";", &v48);
    v6 = std::vector<std::string>::operator[](&exec->param, 0LL);
    v7 = common::tools::StringUtils::splitToList<unsigned int>(
           v6,
           &sep_1,
           (const std::string *)&v57,
           2u,
           (std::vector<unsigned int> *)(v3 + 160),
           1) != 0;
    std::string::~string(&sep_1);
    std::allocator<char>::~allocator(&v48);
    std::string::~string(&v57);
    std::allocator<char>::~allocator(&__a);
    if ( v7 )
    {
      common::milog::MiLogStream::create(
        &v57,
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/player/quest/player_quest_comp.cpp",
        "execRefreshWorldQuestFlowGroupSuite",
        5924);
      v8 = common::milog::MiLogStream::operator<<<char [24],(char *[24])0>(
             &v57,
             (const char (*)[24])"[WQ_FLOW] exec.param0: ");
      v9 = std::vector<std::string>::operator[](&exec->param, 0LL);
      v10 = common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v8, v9);
      common::milog::MiLogStream::operator<<<char [13],(char *[13])0>(v10, (const char (*)[13])byte_25168F60);
      common::milog::MiLogStream::~MiLogStream(&v57);
    }
    else if ( std::vector<unsigned int>::size((const std::vector<unsigned int> *const)(v3 + 160)) > 1 )
    {
      ServiceBox::findService<GameserverService>();
      GameserverService::getConfig((GameserverService *const)(v3 + 96));
      lua_config_mgr = &std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 96))->design_config.lua_config_mgr;
      std::shared_ptr<Config>::~shared_ptr((std::shared_ptr<Config> *const)(v3 + 96));
      ServiceBox::findService<GameserverService>();
      GameserverService::getConfig((GameserverService *const)(v3 + 128));
      txt_config_mgr = &std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 128))->design_config.txt_config_mgr;
      std::shared_ptr<Config>::~shared_ptr((std::shared_ptr<Config> *const)(v3 + 128));
      for ( idx = 1LL; ; idx += 2LL )
      {
        v14 = std::vector<unsigned int>::size((const std::vector<unsigned int> *const)(v3 + 160));
        if ( idx >= v14 )
          break;
        v15 = std::vector<unsigned int>::operator[]((std::vector<unsigned int> *const)(v3 + 160), idx - 1);
        v16 = v15;
        if ( *(_BYTE *)(((unsigned __int64)v15 >> 3) + 0x7FFF8000) != 0
          && (char)(((unsigned __int8)v15 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)v15 >> 3) + 0x7FFF8000) )
        {
          __asan_report_load4(v15);
        }
        *(_DWORD *)(v3 + 48) = *v16;
        v17 = std::vector<unsigned int>::operator[]((std::vector<unsigned int> *const)(v3 + 160), idx);
        v18 = v17;
        if ( *(_BYTE *)(((unsigned __int64)v17 >> 3) + 0x7FFF8000) != 0
          && (char)(((unsigned __int8)v17 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)v17 >> 3) + 0x7FFF8000) )
        {
          __asan_report_load4(v17);
        }
        *(_DWORD *)(v3 + 64) = *v18;
        *(_DWORD *)(v3 + 80) = LuaConfigMgr::getSceneIdByGroupId(lua_config_mgr, *(_DWORD *)(v3 + 48));
        scene_config_ptr = data::SceneExcelConfigMgrBase::findSceneExcelConfig(
                             &txt_config_mgr->scene_config_mgr,
                             *(_DWORD *)(v3 + 80));
        if ( !scene_config_ptr )
        {
          common::milog::MiLogStream::create(
            &v57,
            &common::milog::MiLogDefault::default_log_obj_,
            3u,
            "./src/player/quest/player_quest_comp.cpp",
            "execRefreshWorldQuestFlowGroupSuite",
            5944);
          v19 = common::milog::MiLogStream::operator<<<char [29],(char *[29])0>(
                  &v57,
                  (const char (*)[29])"[WQ_FLOW] scene_id invalid: ");
          v20 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                  v19,
                  (const unsigned int *)(v3 + 80));
          v21 = common::milog::MiLogStream::operator<<<char [12],(char *[12])0>(v20, (const char (*)[12])", group_id:");
          common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v21, (const unsigned int *)(v3 + 48));
          common::milog::MiLogStream::~MiLogStream(&v57);
          break;
        }
        if ( *(_BYTE *)(((unsigned __int64)&scene_config_ptr->type >> 3) + 0x7FFF8000) != 0
          && (char)((((_BYTE)scene_config_ptr + 12) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&scene_config_ptr->type >> 3)
                                                                          + 0x7FFF8000) )
        {
          __asan_report_load4(&scene_config_ptr->type);
        }
        if ( !SceneExcelConfigMgr::isPlayerScene(scene_config_ptr->type) )
        {
          common::milog::MiLogStream::create(
            &v57,
            &common::milog::MiLogDefault::default_log_obj_,
            4u,
            "./src/player/quest/player_quest_comp.cpp",
            "execRefreshWorldQuestFlowGroupSuite",
            5950);
          v22 = common::milog::MiLogStream::operator<<<char [30],(char *[30])0>(
                  &v57,
                  (const char (*)[30])"[WQ_FLOW] invalid scene_type:");
          if ( *(_BYTE *)(((unsigned __int64)&scene_config_ptr->type >> 3) + 0x7FFF8000) != 0
            && (char)((((_BYTE)scene_config_ptr + 12) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&scene_config_ptr->type >> 3)
                                                                            + 0x7FFF8000) )
          {
            __asan_report_load4(&scene_config_ptr->type);
          }
          val = (char *)data::enumValToStr(scene_config_ptr->type);
          v23 = common::milog::MiLogStream::operator<<<char const*,(char const**)0>(v22, (const char *const *)&val);
          v24 = common::milog::MiLogStream::operator<<<char [12],(char *[12])0>(v23, (const char (*)[12])", group_id:");
          common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v24, (const unsigned int *)(v3 + 48));
          common::milog::MiLogStream::~MiLogStream(&v57);
          break;
        }
        if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
          __asan_report_load8(&this->player_);
        SceneComp = (unsigned int)Player::getSceneComp(this->player_);
        PlayerSceneComp::getPersonalScene((PlayerSceneComp *const)(v3 + 96), SceneComp);
        if ( std::operator==<Scene>((const std::shared_ptr<Scene> *)(v3 + 96), 0LL) )
        {
          common::milog::MiLogStream::create(
            &v57,
            &common::milog::MiLogDefault::default_log_obj_,
            3u,
            "./src/player/quest/player_quest_comp.cpp",
            "execRefreshWorldQuestFlowGroupSuite",
            5957);
          v26 = common::milog::MiLogStream::operator<<<char [28],(char *[28])0>(
                  &v57,
                  (const char (*)[28])"[WQ_FLOW] getPersonalScene ");
          v27 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                  v26,
                  (const unsigned int *)(v3 + 80));
          v28 = common::milog::MiLogStream::operator<<<char [19],(char *[19])0>(
                  v27,
                  (const char (*)[19])" failed, group_id:");
          v29 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                  v28,
                  (const unsigned int *)(v3 + 48));
          v30 = common::milog::MiLogStream::operator<<<char [7],(char *[7])0>(v29, (const char (*)[7])", uid:");
          if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
            __asan_report_load8(&this->player_);
          Uid = Player::getUid(this->player_);
          common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v30, &Uid);
          common::milog::MiLogStream::~MiLogStream(&v57);
        }
        else
        {
          v31 = std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 96));
          BlockGroupComp = (unsigned __int64)Scene::getBlockGroupComp(v31);
          if ( *(_BYTE *)((BlockGroupComp >> 3) + 0x7FFF8000) )
            BlockGroupComp = __asan_report_load8(BlockGroupComp);
          v33 = *(_QWORD *)BlockGroupComp + 80LL;
          if ( *(_BYTE *)((v33 >> 3) + 0x7FFF8000) )
            BlockGroupComp = __asan_report_load8(*(_QWORD *)BlockGroupComp + 80LL);
          (*(void (__fastcall **)(unsigned __int64, unsigned __int64, _QWORD, _QWORD, _QWORD, _QWORD))v33)(
            v3 + 128,
            BlockGroupComp,
            *(unsigned int *)(v3 + 48),
            0LL,
            0LL,
            0LL);
          if ( std::operator==<Group>((const std::shared_ptr<Group> *)(v3 + 128), 0LL) )
          {
            common::milog::MiLogStream::create(
              &v57,
              &common::milog::MiLogDefault::default_log_obj_,
              1u,
              "./src/player/quest/player_quest_comp.cpp",
              "execRefreshWorldQuestFlowGroupSuite",
              5964);
            v34 = common::milog::MiLogStream::operator<<<char [21],(char *[21])0>(
                    &v57,
                    (const char (*)[21])"[WQ_FLOW] findGroup ");
            v35 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                    v34,
                    (const unsigned int *)(v3 + 80));
            v36 = common::milog::MiLogStream::operator<<<char [2],(char *[2])0>(v35, (const char (*)[2])":");
            v37 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                    v36,
                    (const unsigned int *)(v3 + 48));
            v38 = common::milog::MiLogStream::operator<<<char [19],(char *[19])0>(
                    v37,
                    (const char (*)[19])" failed, group_id:");
            v39 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                    v38,
                    (const unsigned int *)(v3 + 48));
            v40 = common::milog::MiLogStream::operator<<<char [7],(char *[7])0>(v39, (const char (*)[7])", uid:");
            if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
              __asan_report_load8(&this->player_);
            Uid = Player::getUid(this->player_);
            common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v40, &Uid);
            common::milog::MiLogStream::~MiLogStream(&v57);
          }
          else
          {
            common::milog::MiLogStream::create(
              &v57,
              &common::milog::MiLogDefault::default_log_obj_,
              1u,
              "./src/player/quest/player_quest_comp.cpp",
              "execRefreshWorldQuestFlowGroupSuite",
              5967);
            v41 = common::milog::MiLogStream::operator<<<char [28],(char *[28])0>(
                    &v57,
                    (const char (*)[28])"[WQ_FLOW] refresh group_id:");
            v42 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                    v41,
                    (const unsigned int *)(v3 + 48));
            v43 = common::milog::MiLogStream::operator<<<char [12],(char *[12])0>(
                    v42,
                    (const char (*)[12])", suite_id:");
            v44 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                    v43,
                    (const unsigned int *)(v3 + 64));
            v45 = common::milog::MiLogStream::operator<<<char [7],(char *[7])0>(v44, (const char (*)[7])", uid:");
            if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
              __asan_report_load8(&this->player_);
            Uid = Player::getUid(this->player_);
            common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v45, &Uid);
            common::milog::MiLogStream::~MiLogStream(&v57);
            SuiteLogContext::SuiteLogContext((SuiteLogContext *const)(v3 + 224));
            *(_DWORD *)(v3 + 224) = 7;
            *(_DWORD *)(v3 + 232) = quest_id;
            ScriptContext::ScriptContext((ScriptContext *const)(v3 + 288));
            v46 = std::__shared_ptr_access<Group,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Group,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 128));
            Group::refreshWorldQuestFlowSuite(
              v46,
              (const ScriptContext *)(v3 + 288),
              *(SuiteLogContext *)(v3 + 224),
              *(_DWORD *)(v3 + 64),
              1);
            ScriptContext::~ScriptContext((ScriptContext *const)(v3 + 288));
          }
          std::shared_ptr<Group>::~shared_ptr((std::shared_ptr<Group> *const)(v3 + 128));
        }
        std::shared_ptr<Scene>::~shared_ptr((std::shared_ptr<Scene> *const)(v3 + 96));
      }
    }
    else
    {
      common::milog::MiLogStream::create(
        &v57,
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/player/quest/player_quest_comp.cpp",
        "execRefreshWorldQuestFlowGroupSuite",
        5929);
      v11 = common::milog::MiLogStream::operator<<<char [24],(char *[24])0>(
              &v57,
              (const char (*)[24])"[WQ_FLOW] exec.param0: ");
      v12 = std::vector<std::string>::operator[](&exec->param, 0LL);
      v13 = common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v11, v12);
      common::milog::MiLogStream::operator<<<char [13],(char *[13])0>(v13, (const char (*)[13])byte_25168F60);
      common::milog::MiLogStream::~MiLogStream(&v57);
    }
    std::vector<unsigned int>::~vector((std::vector<unsigned int> *const)(v3 + 160));
  }
  else
  {
    common::milog::MiLogStream::create(
      &v57,
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/player/quest/player_quest_comp.cpp",
      "execRefreshWorldQuestFlowGroupSuite",
      5918);
    common::milog::MiLogStream::operator<<<char [34],(char *[34])0>(
      &v57,
      (const char (*)[34])"[WQ_FLOW] QuestExec config failed");
    common::milog::MiLogStream::~MiLogStream(&v57);
  }
  if ( v58 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8010) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8018) = 0LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8020) = 0;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8038) = 0LL;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8020) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8028) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8030) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8038) = 0xF5F5F5F5F5F5F5F5LL;
  }
};

// Line 5977: range 0000000013E023D2-0000000013E0F40D
void __fastcall PlayerQuestComp::execAction(
        PlayerQuestComp *const this,
        const std::vector<data::QuestExec> *exec_vec,
        uint32_t parent_quest_id,
        uint32_t quest_id)
{
  unsigned __int64 v4; // r13
  __int64 v5; // rax
  _DWORD *v6; // r12
  common::milog::MiLogStream *v7; // rax
  common::milog::MiLogStream *v8; // rax
  common::milog::MiLogStream *v9; // r14
  PlayerItemComp *ItemComp; // rax
  const unsigned int *v11; // rax
  _DWORD *v12; // rdx
  PlayerItemComp *v13; // rax
  common::milog::MiLogStream *v14; // rax
  common::milog::MiLogStream *v15; // rax
  common::milog::MiLogStream *v16; // rax
  common::milog::MiLogStream *v17; // rax
  common::milog::MiLogStream *v18; // rax
  common::milog::MiLogStream *v19; // rax
  const std::string *v20; // rax
  bool v21; // r14
  common::milog::MiLogStream *v22; // r14
  const std::string *v23; // rax
  common::milog::MiLogStream *v24; // rax
  common::milog::MiLogStream *v25; // r14
  common::milog::MiLogStream *v26; // r14
  const std::string *v27; // rax
  common::milog::MiLogStream *v28; // rax
  std::vector<unsigned int>::size_type v29; // r14
  std::vector<unsigned int>::reference v30; // rax
  _DWORD *v31; // rdx
  std::vector<unsigned int>::reference v32; // rax
  _DWORD *v33; // rdx
  PlayerItemComp *v34; // rax
  const unsigned int *v35; // rax
  _DWORD *v36; // rdx
  ItemParam *v37; // rax
  PlayerItemComp *v38; // rax
  common::milog::MiLogStream *v39; // r14
  const std::string *v40; // rax
  bool v41; // r14
  common::milog::MiLogStream *v42; // rax
  common::milog::MiLogStream *v43; // rax
  __gnu_cxx::__normal_iterator<unsigned int*,std::vector<unsigned int> >::reference v44; // rax
  uint32_t *v45; // rdx
  PlayerItemComp *v46; // rax
  PlayerItemComp *v47; // rax
  common::milog::MiLogStream *v48; // r14
  common::milog::MiLogStream *v49; // rax
  common::milog::MiLogStream *v50; // rax
  const std::string *v51; // rax
  common::milog::MiLogStream *v52; // r14
  const std::string *v53; // rax
  common::milog::MiLogStream *v54; // rax
  const std::string *v55; // rax
  bool v56; // r14
  common::milog::MiLogStream *v57; // r14
  const std::string *v58; // rax
  common::milog::MiLogStream *v59; // rax
  common::milog::MiLogStream *v60; // r14
  PlayerSceneComp *SceneComp; // rax
  common::milog::MiLogStream *v62; // rax
  common::milog::MiLogStream *v63; // rax
  const std::string *v64; // rax
  common::milog::MiLogStream *v65; // r14
  const std::string *v66; // rax
  common::milog::MiLogStream *v67; // rax
  const std::string *v68; // rax
  bool v69; // r14
  common::milog::MiLogStream *v70; // r14
  const std::string *v71; // rax
  common::milog::MiLogStream *v72; // rax
  PlayerSceneComp *v73; // rax
  common::milog::MiLogStream *v74; // rax
  common::milog::MiLogStream *v75; // rax
  const std::string *v76; // rax
  common::milog::MiLogStream *v77; // r14
  const std::string *v78; // rax
  common::milog::MiLogStream *v79; // rax
  const std::string *v80; // rax
  bool v81; // r14
  common::milog::MiLogStream *v82; // r14
  const std::string *v83; // rax
  common::milog::MiLogStream *v84; // rax
  PlayerSceneComp *v85; // rax
  common::milog::MiLogStream *v86; // rax
  common::milog::MiLogStream *v87; // rax
  const std::string *v88; // rax
  common::milog::MiLogStream *v89; // r14
  const std::string *v90; // rax
  common::milog::MiLogStream *v91; // rax
  const std::string *v92; // rax
  bool v93; // r14
  common::milog::MiLogStream *v94; // r14
  const std::string *v95; // rax
  common::milog::MiLogStream *v96; // rax
  PlayerSceneComp *v97; // rax
  common::milog::MiLogStream *v98; // rax
  common::milog::MiLogStream *v99; // rax
  const std::string *v100; // rax
  common::milog::MiLogStream *v101; // r14
  const std::string *v102; // rax
  common::milog::MiLogStream *v103; // rax
  common::milog::MiLogStream *v104; // r14
  Avatar *v105; // rax
  common::milog::MiLogStream *v106; // r14
  common::milog::MiLogStream *v107; // rax
  common::milog::MiLogStream *v108; // r14
  std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v109; // rax
  common::milog::MiLogStream *v110; // rax
  common::milog::MiLogStream *v111; // rax
  const std::string *v112; // rax
  common::milog::MiLogStream *v113; // r14
  const std::string *v114; // rax
  common::milog::MiLogStream *v115; // rax
  PlayerAvatarComp *AvatarComp; // rax
  common::milog::MiLogStream *v117; // rax
  common::milog::MiLogStream *v118; // rax
  const std::string *v119; // rax
  common::milog::MiLogStream *v120; // r14
  const std::string *v121; // rax
  common::milog::MiLogStream *v122; // rax
  PlayerAvatarComp *v123; // rax
  common::milog::MiLogStream *v124; // rax
  common::milog::MiLogStream *v125; // rax
  const std::string *v126; // rax
  common::milog::MiLogStream *v127; // r14
  const std::string *v128; // rax
  common::milog::MiLogStream *v129; // rax
  PlayerBasicComp *BasicComp; // rax
  common::milog::MiLogStream *v131; // rax
  common::milog::MiLogStream *v132; // rax
  const std::string *v133; // rax
  common::milog::MiLogStream *v134; // r14
  const std::string *v135; // rax
  common::milog::MiLogStream *v136; // rax
  PlayerBasicComp *v137; // rax
  common::milog::MiLogStream *v138; // rax
  common::milog::MiLogStream *v139; // rax
  const std::string *v140; // rax
  common::milog::MiLogStream *v141; // r14
  const std::string *v142; // rax
  common::milog::MiLogStream *v143; // rax
  const std::string *v144; // rax
  common::milog::MiLogStream *v145; // r14
  const std::string *v146; // rax
  common::milog::MiLogStream *v147; // rax
  PlayerAvatarComp *v148; // rax
  common::milog::MiLogStream *v149; // rax
  common::milog::MiLogStream *v150; // rax
  common::milog::MiLogStream *v151; // rax
  common::milog::MiLogStream *v152; // rax
  common::milog::MiLogStream *v153; // r14
  ParentQuest *v154; // rax
  PlayerBoredComp *BoredComp; // rax
  common::milog::MiLogStream *v156; // rax
  common::milog::MiLogStream *v157; // rax
  const std::string *v158; // rax
  common::milog::MiLogStream *v159; // r14
  const std::string *v160; // rax
  common::milog::MiLogStream *v161; // rax
  std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v162; // rax
  common::milog::MiLogStream *v164; // rax
  common::milog::MiLogStream *v165; // rax
  common::milog::MiLogStream *v166; // rax
  common::milog::MiLogStream *v167; // rax
  common::milog::MiLogStream *v168; // rax
  common::milog::MiLogStream *v169; // rax
  common::milog::MiLogStream *v170; // rax
  common::milog::MiLogStream *v171; // rax
  common::milog::MiLogStream *v172; // rax
  common::milog::MiLogStream *v173; // rax
  uint32_t v174; // r14d
  std::__shared_ptr_access<Quest,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v175; // rax
  data::QuestState State; // eax
  common::milog::MiLogStream *v177; // rax
  common::milog::MiLogStream *v178; // rax
  const std::string *v179; // rax
  common::milog::MiLogStream *v180; // rax
  common::milog::MiLogStream *v181; // rax
  common::milog::MiLogStream *v182; // rax
  PlayerDailyTaskComp *DailyTaskComp; // r14
  std::__shared_ptr_access<Quest,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v184; // rax
  data::QuestState v185; // eax
  common::milog::MiLogStream *v186; // rax
  common::milog::MiLogStream *v187; // rax
  PlayerBasicComp *v188; // rax
  common::milog::MiLogStream *v189; // rax
  common::milog::MiLogStream *v190; // rax
  const std::string *v191; // rax
  common::milog::MiLogStream *v192; // r14
  const std::string *v193; // rax
  common::milog::MiLogStream *v194; // rax
  const std::string *v195; // rax
  bool v196; // r14
  common::milog::MiLogStream *v197; // r14
  const std::string *v198; // rax
  common::milog::MiLogStream *v199; // rax
  PlayerSceneComp *v200; // rax
  common::milog::MiLogStream *v201; // rax
  common::milog::MiLogStream *v202; // rax
  const std::string *v203; // rax
  common::milog::MiLogStream *v204; // rax
  common::milog::MiLogStream *v205; // rax
  common::milog::MiLogStream *v206; // rax
  common::milog::MiLogStream *v207; // rax
  common::milog::MiLogStream *v208; // rax
  PlayerAvatarComp *v209; // rax
  common::milog::MiLogStream *v210; // rax
  common::milog::MiLogStream *v211; // rax
  const std::string *v212; // rax
  PlayerBasicComp *v213; // rax
  common::milog::MiLogStream *v214; // rax
  common::milog::MiLogStream *v215; // rax
  std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v216; // rax
  common::milog::MiLogStream *v217; // rax
  common::milog::MiLogStream *v218; // rax
  common::milog::MiLogStream *v219; // rax
  common::milog::MiLogStream *v220; // rax
  uint32_t v221; // ecx
  common::milog::MiLogStream *v222; // rax
  common::milog::MiLogStream *v223; // rax
  common::milog::MiLogStream *v224; // rax
  common::milog::MiLogStream *v225; // rax
  common::milog::MiLogStream *v226; // r14
  common::milog::MiLogStream *v227; // rcx
  common::milog::MiLogStream *v228; // rax
  common::milog::MiLogStream *v229; // r14
  std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v230; // rax
  common::milog::MiLogStream *v231; // rax
  common::milog::MiLogStream *v232; // rax
  common::milog::MiLogStream *v233; // rax
  common::milog::MiLogStream *v234; // rax
  unsigned __int64 v235; // rax
  unsigned __int64 v236; // rdx
  unsigned __int64 v237; // rax
  unsigned __int64 v238; // rdx
  common::milog::MiLogStream *v239; // rax
  common::milog::MiLogStream *v240; // rax
  common::milog::MiLogStream *v241; // rax
  common::milog::MiLogStream *v242; // rax
  PlayerGivingComp *GivingComp; // rax
  common::milog::MiLogStream *v244; // rax
  common::milog::MiLogStream *v245; // rax
  PlayerGivingComp *v246; // rax
  unsigned int *M_current; // r14
  std::vector<unsigned int>::iterator v248; // rax
  PlayerAvatarComp *v249; // rax
  ParentQuest *v250; // rax
  PlayerAvatarComp *v251; // rax
  ParentQuest *v252; // rax
  common::milog::MiLogStream *v253; // rax
  const std::string *v254; // rax
  common::milog::MiLogStream *v255; // r14
  const std::string *v256; // rax
  ParentQuest *v257; // rax
  common::milog::MiLogStream *v258; // r14
  std::__shared_ptr_access<ParentQuest,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v259; // rax
  const std::string *v260; // rax
  common::milog::MiLogStream *v261; // r14
  const std::string *v262; // rax
  const std::string *v263; // rax
  unsigned int *v264; // r8
  bool *v265; // r9
  common::milog::MiLogStream *v266; // r14
  const std::string *v267; // rax
  PlayerEventComp *EventComp; // r14
  const std::string *v269; // rax
  common::milog::MiLogStream *v270; // r14
  const std::string *v271; // rax
  const std::string *v272; // rax
  unsigned int *v273; // r8
  bool *v274; // r9
  common::milog::MiLogStream *v275; // r14
  const std::string *v276; // rax
  std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v277; // r14
  std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v278; // rax
  float MaxEnergy; // xmm0_4
  const std::string *v280; // rax
  common::milog::MiLogStream *v281; // r14
  const std::string *v282; // rax
  PlayerTalkComp *TalkComp; // rax
  common::milog::MiLogStream *v284; // rax
  const std::string *v285; // rax
  common::milog::MiLogStream *v286; // r14
  const std::string *v287; // rax
  PlayerTalkComp *v288; // rax
  common::milog::MiLogStream *v289; // rax
  common::milog::MiLogStream *v290; // rax
  const std::string *v291; // rax
  bool v292; // r14
  common::milog::MiLogStream *v293; // r14
  const std::string *v294; // rax
  common::milog::MiLogStream *v295; // rax
  std::vector<std::string>::const_reference v296; // rax
  const std::string *v298; // rax
  common::milog::MiLogStream *v299; // rax
  common::milog::MiLogStream *v300; // rax
  LuaConfigMgr *v301; // r14
  std::vector<unsigned int>::reference v302; // rax
  uint32_t *v303; // rdx
  uint32_t v304; // eax
  common::milog::MiLogStream *v305; // r14
  Scene *v306; // rax
  unsigned __int64 v307; // rax
  unsigned __int64 v308; // rdx
  const std::string *v309; // rax
  bool v310; // r14
  common::milog::MiLogStream *v311; // r14
  const std::string *v312; // rax
  common::milog::MiLogStream *v313; // rax
  common::milog::MiLogStream *v314; // rax
  common::milog::MiLogStream *v315; // rax
  const std::string *v316; // rax
  LuaConfigMgr *p_lua_config_mgr; // r14
  std::vector<unsigned int>::reference v318; // rax
  uint32_t *v319; // rdx
  uint32_t v320; // eax
  common::milog::MiLogStream *v321; // rax
  common::milog::MiLogStream *v322; // rax
  common::milog::MiLogStream *v323; // rax
  Scene *v324; // rax
  unsigned __int64 BlockGroupComp; // rax
  unsigned __int64 v326; // rdx
  common::milog::MiLogStream *v327; // rax
  common::milog::MiLogStream *v328; // rax
  ParentQuest *v329; // rax
  unsigned int *v330; // r8
  unsigned int *v331; // r9
  common::milog::MiLogStream *v332; // rax
  unsigned int *v333; // r8
  unsigned int *v334; // r9
  common::milog::MiLogStream *v335; // rax
  const std::string *v336; // rax
  common::milog::MiLogStream *v337; // r14
  const std::string *v338; // rax
  std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v339; // rax
  bool v340; // r14
  common::milog::MiLogStream *v341; // rax
  uint32_t v342; // eax
  Scene *v343; // rax
  const std::string *v344; // rax
  common::milog::MiLogStream *v345; // rax
  unsigned __int64 v346; // rax
  unsigned __int64 v347; // rdx
  common::milog::MiLogStream *v348; // r14
  std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v349; // rax
  std::vector<unsigned int>::size_type v350; // r14
  common::milog::MiLogStream *v351; // rax
  common::milog::MiLogStream *v352; // rax
  common::milog::MiLogStream *v353; // r14
  std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v354; // rax
  __gnu_cxx::__alloc_traits<std::allocator<unsigned int>,unsigned int>::value_type *v355; // rax
  uint32_t *v356; // rdx
  Avatar *v357; // rcx
  common::milog::MiLogStream *v358; // r14
  common::milog::MiLogStream *v359; // rax
  PlayerSceneComp *v360; // rax
  common::milog::MiLogStream *v361; // r14
  common::milog::MiLogStream *v362; // rax
  common::milog::MiLogStream *v363; // rax
  common::milog::MiLogStream *v364; // rax
  common::milog::MiLogStream *v365; // rax
  PlayerSceneComp *v366; // rax
  common::milog::MiLogStream *v367; // rax
  const std::string *v368; // rax
  const std::string *v369; // rax
  common::milog::MiLogStream *v370; // rax
  unsigned int *v371; // r8
  unsigned int *v372; // r9
  common::milog::MiLogStream *v373; // rax
  uint32_t v374; // eax
  common::milog::MiLogStream *v375; // rax
  Scene *v376; // rax
  common::milog::MiLogStream *v377; // rax
  common::milog::MiLogStream *v378; // rax
  common::milog::MiLogStream *v379; // rax
  common::milog::MiLogStream *v380; // rax
  common::milog::MiLogStream *v381; // rax
  common::milog::MiLogStream *v382; // rax
  common::milog::MiLogStream *v383; // rax
  common::milog::MiLogStream *v384; // rcx
  PlayerSceneComp *v385; // rax
  common::milog::MiLogStream *v386; // rax
  common::milog::MiLogStream *v387; // rax
  PlayerSceneComp *v388; // rax
  common::milog::MiLogStream *v389; // rax
  common::milog::MiLogStream *v390; // rax
  PlayerSceneComp *v391; // rax
  common::milog::MiLogStream *v392; // rax
  common::milog::MiLogStream *v393; // rax
  common::milog::MiLogStream *v394; // rax
  common::milog::MiLogStream *v395; // rax
  PlayerSceneComp *v396; // rax
  common::milog::MiLogStream *v397; // rax
  common::milog::MiLogStream *v398; // rax
  common::milog::MiLogStream *v399; // rax
  common::milog::MiLogStream *v400; // rax
  std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v401; // rax
  common::milog::MiLogStream *v402; // rax
  std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v403; // rax
  std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v404; // rax
  bool v405; // r14
  common::milog::MiLogStream *v406; // rax
  common::milog::MiLogStream *v407; // rax
  common::milog::MiLogStream *v408; // rax
  PlayerCoopComp *CoopComp; // r14
  const std::string *v410; // r15
  std::__detail::_Node_const_iterator<std::pair<unsigned int const,unsigned int>,false,false>::pointer v411; // rdx
  unsigned int *p_second; // rax
  common::milog::MiLogStream *v413; // rax
  common::milog::MiLogStream *v414; // rax
  common::milog::MiLogStream *v415; // r14
  std::__detail::_Node_const_iterator<std::pair<unsigned int const,unsigned int>,false,false>::pointer v416; // rax
  common::milog::MiLogStream *v417; // rax
  char v418; // r15
  const std::string *v419; // rax
  const std::string *v420; // rax
  common::milog::MiLogStream *v421; // rax
  std::vector<unsigned int>::size_type v422; // r14
  std::vector<unsigned int>::size_type v423; // r14
  std::vector<unsigned int>::reference v425; // rax
  _DWORD *v426; // rdx
  std::vector<unsigned int>::reference v427; // rax
  _DWORD *v428; // rdx
  std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v429; // rax
  common::milog::MiLogStream *v430; // rax
  common::milog::MiLogStream *v431; // rax
  common::milog::MiLogStream *v432; // rax
  common::milog::MiLogStream *v433; // rax
  common::milog::MiLogStream *v434; // r14
  uint32_t v435; // ecx
  common::milog::MiLogStream *v436; // rax
  common::milog::MiLogStream *v437; // rax
  common::milog::MiLogStream *v438; // rax
  common::milog::MiLogStream *v439; // rax
  common::milog::MiLogStream *v440; // r14
  common::milog::MiLogStream *v441; // rcx
  common::milog::MiLogStream *v442; // rax
  common::milog::MiLogStream *v443; // r14
  std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v444; // rax
  common::milog::MiLogStream *v445; // rax
  common::milog::MiLogStream *v446; // rax
  common::milog::MiLogStream *v447; // rax
  common::milog::MiLogStream *v448; // rax
  common::milog::MiLogStream *v449; // rax
  common::milog::MiLogStream *v450; // rax
  unsigned __int64 v451; // rax
  unsigned __int64 v452; // rdx
  unsigned __int64 v453; // rax
  unsigned __int64 v454; // rdx
  unsigned int *v455; // r8
  unsigned int *v456; // r9
  common::milog::MiLogStream *v457; // rax
  common::milog::MiLogStream *v458; // rax
  PlayerAranaraCollectionComp *AranaraCollectionComp; // rax
  common::milog::MiLogStream *v460; // rax
  common::milog::MiLogStream *v461; // rax
  common::milog::MiLogStream *v462; // rax
  common::milog::MiLogStream *v463; // rax
  common::milog::MiLogStream *v464; // rax
  common::milog::MiLogStream *v465; // rax
  common::milog::MiLogStream *v466; // rax
  common::milog::MiLogStream *v467; // rax
  common::milog::MiLogStream *v468; // rax
  common::milog::MiLogStream *v469; // rax
  const std::string *v470; // rax
  bool v471; // r14
  common::milog::MiLogStream *v472; // r14
  const std::string *v473; // rax
  common::milog::MiLogStream *v474; // rax
  const std::string *v475; // rax
  common::milog::MiLogStream *v476; // r14
  const std::string *v477; // rax
  common::milog::MiLogStream *v478; // rax
  PlayerAvatarComp *v479; // r15
  char v480; // r14
  bool v481; // r14
  common::milog::MiLogStream *v482; // rax
  common::milog::MiLogStream *v483; // rax
  common::milog::MiLogStream *v484; // r14
  ParentQuest *v485; // rax
  common::milog::MiLogStream *v486; // rax
  common::milog::MiLogStream *v487; // rax
  const std::string *v488; // rax
  common::milog::MiLogStream *v489; // r14
  const std::string *v490; // rax
  uint32_t v491; // eax
  common::milog::MiLogStream *v492; // rax
  const std::string *v493; // rax
  common::milog::MiLogStream *v494; // r14
  const std::string *v495; // rax
  PlayerSceneComp *v496; // rax
  PlayerSceneComp *v497; // rax
  common::milog::MiLogStream *v498; // rax
  common::milog::MiLogStream *v499; // rax
  const std::string *v500; // rax
  common::milog::MiLogStream *v501; // r14
  const std::string *v502; // rax
  PlayerAvatarComp *v503; // r14
  bool v504; // [rsp+16h] [rbp-2EAh]
  char v505; // [rsp+17h] [rbp-2E9h]
  bool v506; // [rsp+17h] [rbp-2E9h]
  std::allocator<char> __a; // [rsp+3Ch] [rbp-2C4h] BYREF
  bool is_force_unload; // [rsp+3Dh] [rbp-2C3h]
  bool is_open_weather_area; // [rsp+3Eh] [rbp-2C2h]
  bool is_lock_team; // [rsp+3Fh] [rbp-2C1h]
  uint32_t idx; // [rsp+40h] [rbp-2C0h]
  uint32_t set_value; // [rsp+44h] [rbp-2BCh]
  uint32_t revise_level; // [rsp+48h] [rbp-2B8h]
  uint32_t set_value_0; // [rsp+4Ch] [rbp-2B4h]
  uint32_t i; // [rsp+50h] [rbp-2B0h]
  int ret; // [rsp+54h] [rbp-2ACh]
  uint32_t set_value_2; // [rsp+58h] [rbp-2A8h]
  uint32_t depot_id; // [rsp+5Ch] [rbp-2A4h]
  uint32_t set_value_1; // [rsp+60h] [rbp-2A0h]
  uint32_t item_id; // [rsp+64h] [rbp-29Ch]
  std::vector<data::QuestExec>::const_iterator __for_begin; // [rsp+68h] [rbp-298h] BYREF
  std::vector<data::QuestExec>::const_iterator __for_end; // [rsp+70h] [rbp-290h] BYREF
  std::vector<std::string>::const_iterator __for_begin_0; // [rsp+78h] [rbp-288h] BYREF
  std::vector<std::string>::const_iterator __for_end_0; // [rsp+80h] [rbp-280h] BYREF
  const std::vector<data::QuestExec> *__for_range; // [rsp+88h] [rbp-278h]
  const data::QuestExec *exec; // [rsp+90h] [rbp-270h]
  const data::WeatherExcelConfig *weather_config_ptr_0; // [rsp+98h] [rbp-268h]
  const data::MainQuestExcelConfig *main_quest_config_ptr; // [rsp+A0h] [rbp-260h]
  const data::AvatarExcelConfig *avatar_config_ptr; // [rsp+A8h] [rbp-258h]
  const std::vector<std::string> *__for_range_1; // [rsp+B0h] [rbp-250h]
  const std::string *s; // [rsp+B8h] [rbp-248h]
  std::vector<unsigned int> *__for_range_0; // [rsp+C0h] [rbp-240h]
  const data::WeatherExcelConfig *weather_config_ptr; // [rsp+C8h] [rbp-238h]
  common::milog::MiLogStream v536; // [rsp+D0h] [rbp-230h] BYREF
  char v537[528]; // [rsp+F0h] [rbp-210h] BYREF

  v4 = (unsigned __int64)v537;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v5 = __asan_stack_malloc_3(480LL);
    if ( v5 )
      v4 = v5;
  }
  *(_QWORD *)v4 = 1102416563LL;
  *(_QWORD *)(v4 + 8) = "14 48 1 15 is_flyable:6222 64 4 20 collection_type:7244 80 4 18 collection_id:7245 96 4 17 reviv"
                        "al_type:7359 112 4 15 real_count:6028 128 4 20 parent_quest_id:5976 144 4 13 quest_id:5976 160 8"
                        " 9 iter:7181 192 8 11 reason:6069 224 16 14 scene_ptr:7218 256 16 14 scene_ptr:7329 288 24 24 tr"
                        "ial_avatar_id_vec:7266 352 24 17 point_id_vec:7335 416 32 17 grant_record:7281";
  *(_QWORD *)(v4 + 16) = PlayerQuestComp::execAction;
  v6 = (_DWORD *)(v4 >> 3);
  v6[536862720] = -235802127;
  v6[536862721] = -234753551;
  v6[536862722] = -234556924;
  v6[536862723] = -234556924;
  v6[536862724] = -234556924;
  v6[536862725] = -218959360;
  v6[536862726] = -218959360;
  v6[536862727] = -219021312;
  v6[536862728] = -219021312;
  v6[536862729] = -234881024;
  v6[536862730] = -218959118;
  v6[536862731] = -234881024;
  v6[536862732] = -218959118;
  v6[536862734] = -202116109;
  *(_DWORD *)(v4 + 128) = parent_quest_id;
  *(_DWORD *)(v4 + 144) = quest_id;
  __for_range = exec_vec;
  __for_begin._M_current = std::vector<data::QuestExec>::begin(exec_vec)._M_current;
  __for_end._M_current = std::vector<data::QuestExec>::end(exec_vec)._M_current;
  while ( __gnu_cxx::operator!=<data::QuestExec const*,std::vector<data::QuestExec>>(&__for_begin, &__for_end) )
  {
    exec = __gnu_cxx::__normal_iterator<data::QuestExec const*,std::vector<data::QuestExec>>::operator*(&__for_begin);
    if ( *(_BYTE *)(((unsigned __int64)&exec->type >> 3) + 0x7FFF8000) != 0
      && *(_BYTE *)(((unsigned __int64)&exec->type >> 3) + 0x7FFF8000) <= 3 )
    {
      __asan_report_load4(&exec->type);
    }
    switch ( exec->type )
    {
      case QUEST_EXEC_DEL_PACK_ITEM:
        *(_DWORD *)(v4 + 256) = 0;
        *(_DWORD *)(v4 + 260) = 0;
        *(_DWORD *)(v4 + 264) = 0;
        *(_DWORD *)(v4 + 268) = 0;
        if ( common::tools::StringUtils::strVecToNum<0u,unsigned int,unsigned int &>(
               &exec->param,
               (unsigned int *)(v4 + 256),
               (unsigned int *)(v4 + 260),
               (unsigned int *)&exec->param) )
        {
          common::milog::MiLogStream::create(
            &v536,
            &common::milog::MiLogDefault::default_log_obj_,
            3u,
            "./src/player/quest/player_quest_comp.cpp",
            "execAction",
            5987);
          v7 = common::milog::MiLogStream::operator<<<char [15],(char *[15])0>(
                 &v536,
                 (const char (*)[15])"invalid param:");
          v8 = common::milog::MiLogStream::operator<<<std::string>(v7, &exec->param);
          v9 = common::milog::MiLogStream::operator<<<char [6],(char *[6])0>(v8, (const char (*)[6])" uid:");
          if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
            __asan_report_load8(&this->player_);
          goto LABEL_817;
        }
        if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
          __asan_report_load8(&this->player_);
        ItemComp = Player::getItemComp(this->player_);
        *(_DWORD *)(v4 + 96) = PlayerItemComp::getPackMaterialCount(ItemComp, *(_DWORD *)(v4 + 256));
        v11 = std::min<unsigned int>((const unsigned int *)(v4 + 96), (const unsigned int *)(v4 + 260));
        v12 = v11;
        if ( *(_BYTE *)(((unsigned __int64)v11 >> 3) + 0x7FFF8000) != 0
          && (char)(((unsigned __int8)v11 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)v11 >> 3) + 0x7FFF8000) )
        {
          __asan_report_load4(v11);
        }
        *(_DWORD *)(v4 + 260) = *v12;
        if ( *(_DWORD *)(v4 + 260) )
        {
          SubItemReason::SubItemReason((SubItemReason *const)(v4 + 192), ACTION_REASON_QUEST_ACTION);
          if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
            __asan_report_load8(&this->player_);
          v13 = Player::getItemComp(this->player_);
          if ( PlayerItemComp::subItem(v13, (const ItemParam *)(v4 + 256), (const SubItemReason *)(v4 + 192)) )
          {
            common::milog::MiLogStream::create(
              &v536,
              &common::milog::MiLogDefault::default_log_obj_,
              3u,
              "./src/player/quest/player_quest_comp.cpp",
              "execAction",
              5999);
            v14 = common::milog::MiLogStream::operator<<<char [24],(char *[24])0>(
                    &v536,
                    (const char (*)[24])"delItem fails, item_id:");
            v15 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                    v14,
                    (const unsigned int *)(v4 + 256));
            v16 = common::milog::MiLogStream::operator<<<char [8],(char *[8])0>(v15, (const char (*)[8])" count:");
            v17 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                    v16,
                    (const unsigned int *)(v4 + 260));
            v9 = common::milog::MiLogStream::operator<<<char [6],(char *[6])0>(v17, (const char (*)[6])" uid:");
            if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
              __asan_report_load8(&this->player_);
            goto LABEL_817;
          }
        }
        goto LABEL_818;
      case QUEST_EXEC_UNLOCK_POINT:
        if ( std::vector<std::string>::size(&exec->param) <= 1 )
        {
          common::milog::MiLogStream::create(
            &v536,
            &common::milog::MiLogDefault::default_log_obj_,
            3u,
            "./src/player/quest/player_quest_comp.cpp",
            "execAction",
            6081);
          v49 = common::milog::MiLogStream::operator<<<char [15],(char *[15])0>(
                  &v536,
                  (const char (*)[15])"invalid param:");
          v50 = common::milog::MiLogStream::operator<<<std::string>(v49, &exec->param);
          v9 = common::milog::MiLogStream::operator<<<char [6],(char *[6])0>(v50, (const char (*)[6])" uid:");
          if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
            __asan_report_load8(&this->player_);
          goto LABEL_817;
        }
        *(_DWORD *)(v4 + 96) = 0;
        v51 = std::vector<std::string>::operator[](&exec->param, 0LL);
        if ( common::tools::StringUtils::strToNum<unsigned int>(v51, (unsigned int *)(v4 + 96), 1) )
        {
          common::milog::MiLogStream::create(
            &v536,
            &common::milog::MiLogDefault::default_log_obj_,
            3u,
            "./src/player/quest/player_quest_comp.cpp",
            "execAction",
            6087);
          v52 = common::milog::MiLogStream::operator<<<char [17],(char *[17])0>(
                  &v536,
                  (const char (*)[17])"invalid param 0:");
          v53 = std::vector<std::string>::operator[](&exec->param, 0LL);
          v54 = common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v52, v53);
          v9 = common::milog::MiLogStream::operator<<<char [6],(char *[6])0>(v54, (const char (*)[6])" uid:");
          if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
            __asan_report_load8(&this->player_);
          goto LABEL_817;
        }
        std::vector<unsigned int>::vector((std::vector<unsigned int> *const)(v4 + 352));
        std::allocator<char>::allocator(v4 + 48);
        std::string::basic_string<std::allocator<char>>(
          (std::string *const)&v536,
          ",",
          (const std::allocator<char> *)(v4 + 48));
        v55 = std::vector<std::string>::operator[](&exec->param, 1uLL);
        v56 = common::tools::StringUtils::splitToList<unsigned int>(
                v55,
                (const std::string *)&v536,
                (std::vector<unsigned int> *)(v4 + 352),
                0) != 0;
        std::string::~string(&v536);
        std::allocator<char>::~allocator(v4 + 48);
        if ( v56 )
        {
          common::milog::MiLogStream::create(
            &v536,
            &common::milog::MiLogDefault::default_log_obj_,
            3u,
            "./src/player/quest/player_quest_comp.cpp",
            "execAction",
            6093);
          v57 = common::milog::MiLogStream::operator<<<char [17],(char *[17])0>(
                  &v536,
                  (const char (*)[17])"invalid param 1:");
          v58 = std::vector<std::string>::operator[](&exec->param, 1uLL);
          v59 = common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v57, v58);
          v60 = common::milog::MiLogStream::operator<<<char [6],(char *[6])0>(v59, (const char (*)[6])" uid:");
          if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
            __asan_report_load8(&this->player_);
          goto LABEL_511;
        }
        if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
          __asan_report_load8(&this->player_);
        SceneComp = Player::getSceneComp(this->player_);
        if ( !PlayerSceneComp::unlockPoint(
                SceneComp,
                *(_DWORD *)(v4 + 96),
                (const std::vector<unsigned int> *)(v4 + 352),
                1) )
          goto LABEL_533;
        common::milog::MiLogStream::create(
          &v536,
          &common::milog::MiLogDefault::default_log_obj_,
          3u,
          "./src/player/quest/player_quest_comp.cpp",
          "execAction",
          6098);
        v60 = common::milog::MiLogStream::operator<<<char [24],(char *[24])0>(
                &v536,
                (const char (*)[24])"unlockPoint fails, uid:");
        if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
          __asan_report_load8(&this->player_);
        goto LABEL_511;
      case QUEST_EXEC_UNLOCK_AREA:
        if ( std::vector<std::string>::size(&exec->param) <= 1 )
        {
          common::milog::MiLogStream::create(
            &v536,
            &common::milog::MiLogDefault::default_log_obj_,
            3u,
            "./src/player/quest/player_quest_comp.cpp",
            "execAction",
            6107);
          v62 = common::milog::MiLogStream::operator<<<char [15],(char *[15])0>(
                  &v536,
                  (const char (*)[15])"invalid param:");
          v63 = common::milog::MiLogStream::operator<<<std::string>(v62, &exec->param);
          v9 = common::milog::MiLogStream::operator<<<char [6],(char *[6])0>(v63, (const char (*)[6])" uid:");
          if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
            __asan_report_load8(&this->player_);
          goto LABEL_817;
        }
        *(_DWORD *)(v4 + 96) = 0;
        v64 = std::vector<std::string>::operator[](&exec->param, 0LL);
        if ( common::tools::StringUtils::strToNum<unsigned int>(v64, (unsigned int *)(v4 + 96), 1) )
        {
          common::milog::MiLogStream::create(
            &v536,
            &common::milog::MiLogDefault::default_log_obj_,
            3u,
            "./src/player/quest/player_quest_comp.cpp",
            "execAction",
            6113);
          v65 = common::milog::MiLogStream::operator<<<char [17],(char *[17])0>(
                  &v536,
                  (const char (*)[17])"invalid param 0:");
          v66 = std::vector<std::string>::operator[](&exec->param, 0LL);
          v67 = common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v65, v66);
          v9 = common::milog::MiLogStream::operator<<<char [6],(char *[6])0>(v67, (const char (*)[6])" uid:");
          if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
            __asan_report_load8(&this->player_);
          goto LABEL_817;
        }
        std::vector<unsigned int>::vector((std::vector<unsigned int> *const)(v4 + 352));
        std::allocator<char>::allocator(v4 + 48);
        std::string::basic_string<std::allocator<char>>(
          (std::string *const)&v536,
          ",",
          (const std::allocator<char> *)(v4 + 48));
        v68 = std::vector<std::string>::operator[](&exec->param, 1uLL);
        v69 = common::tools::StringUtils::splitToList<unsigned int>(
                v68,
                (const std::string *)&v536,
                (std::vector<unsigned int> *)(v4 + 352),
                0) != 0;
        std::string::~string(&v536);
        std::allocator<char>::~allocator(v4 + 48);
        if ( v69 )
        {
          common::milog::MiLogStream::create(
            &v536,
            &common::milog::MiLogDefault::default_log_obj_,
            3u,
            "./src/player/quest/player_quest_comp.cpp",
            "execAction",
            6119);
          v70 = common::milog::MiLogStream::operator<<<char [17],(char *[17])0>(
                  &v536,
                  (const char (*)[17])"invalid param 1:");
          v71 = std::vector<std::string>::operator[](&exec->param, 1uLL);
          v72 = common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v70, v71);
          v60 = common::milog::MiLogStream::operator<<<char [6],(char *[6])0>(v72, (const char (*)[6])" uid:");
          if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
            __asan_report_load8(&this->player_);
          goto LABEL_511;
        }
        if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
          __asan_report_load8(&this->player_);
        v73 = Player::getSceneComp(this->player_);
        if ( !PlayerSceneComp::unlockArea(v73, *(_DWORD *)(v4 + 96), (const std::vector<unsigned int> *)(v4 + 352), 1) )
          goto LABEL_533;
        common::milog::MiLogStream::create(
          &v536,
          &common::milog::MiLogDefault::default_log_obj_,
          3u,
          "./src/player/quest/player_quest_comp.cpp",
          "execAction",
          6124);
        v60 = common::milog::MiLogStream::operator<<<char [23],(char *[23])0>(
                &v536,
                (const char (*)[23])"unlockArea fails, uid:");
        if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
          __asan_report_load8(&this->player_);
        goto LABEL_511;
      case QUEST_EXEC_UNLOCK_FORCE:
        if ( std::vector<std::string>::size(&exec->param) <= 1 )
        {
          common::milog::MiLogStream::create(
            &v536,
            &common::milog::MiLogDefault::default_log_obj_,
            3u,
            "./src/player/quest/player_quest_comp.cpp",
            "execAction",
            6133);
          v74 = common::milog::MiLogStream::operator<<<char [15],(char *[15])0>(
                  &v536,
                  (const char (*)[15])"invalid param:");
          v75 = common::milog::MiLogStream::operator<<<std::string>(v74, &exec->param);
          v9 = common::milog::MiLogStream::operator<<<char [6],(char *[6])0>(v75, (const char (*)[6])" uid:");
          if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
            __asan_report_load8(&this->player_);
          goto LABEL_817;
        }
        *(_DWORD *)(v4 + 96) = 0;
        v76 = std::vector<std::string>::operator[](&exec->param, 0LL);
        if ( common::tools::StringUtils::strToNum<unsigned int>(v76, (unsigned int *)(v4 + 96), 1) )
        {
          common::milog::MiLogStream::create(
            &v536,
            &common::milog::MiLogDefault::default_log_obj_,
            3u,
            "./src/player/quest/player_quest_comp.cpp",
            "execAction",
            6139);
          v77 = common::milog::MiLogStream::operator<<<char [17],(char *[17])0>(
                  &v536,
                  (const char (*)[17])"invalid param 0:");
          v78 = std::vector<std::string>::operator[](&exec->param, 0LL);
          v79 = common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v77, v78);
          v9 = common::milog::MiLogStream::operator<<<char [6],(char *[6])0>(v79, (const char (*)[6])" uid:");
          if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
            __asan_report_load8(&this->player_);
          goto LABEL_817;
        }
        std::vector<unsigned int>::vector((std::vector<unsigned int> *const)(v4 + 352));
        std::allocator<char>::allocator(v4 + 48);
        std::string::basic_string<std::allocator<char>>(
          (std::string *const)&v536,
          ",",
          (const std::allocator<char> *)(v4 + 48));
        v80 = std::vector<std::string>::operator[](&exec->param, 1uLL);
        v81 = common::tools::StringUtils::splitToList<unsigned int>(
                v80,
                (const std::string *)&v536,
                (std::vector<unsigned int> *)(v4 + 352),
                0) != 0;
        std::string::~string(&v536);
        std::allocator<char>::~allocator(v4 + 48);
        if ( v81 )
        {
          common::milog::MiLogStream::create(
            &v536,
            &common::milog::MiLogDefault::default_log_obj_,
            3u,
            "./src/player/quest/player_quest_comp.cpp",
            "execAction",
            6145);
          v82 = common::milog::MiLogStream::operator<<<char [17],(char *[17])0>(
                  &v536,
                  (const char (*)[17])"invalid param 1:");
          v83 = std::vector<std::string>::operator[](&exec->param, 1uLL);
          v84 = common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v82, v83);
          v60 = common::milog::MiLogStream::operator<<<char [6],(char *[6])0>(v84, (const char (*)[6])" uid:");
          if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
            __asan_report_load8(&this->player_);
          goto LABEL_511;
        }
        if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
          __asan_report_load8(&this->player_);
        v85 = Player::getSceneComp(this->player_);
        if ( !PlayerSceneComp::unlockForce(v85, *(_DWORD *)(v4 + 96), (const std::vector<unsigned int> *)(v4 + 352), 1) )
          goto LABEL_533;
        common::milog::MiLogStream::create(
          &v536,
          &common::milog::MiLogDefault::default_log_obj_,
          3u,
          "./src/player/quest/player_quest_comp.cpp",
          "execAction",
          6150);
        v60 = common::milog::MiLogStream::operator<<<char [24],(char *[24])0>(
                &v536,
                (const char (*)[24])"unlockForce fails, uid:");
        if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
          __asan_report_load8(&this->player_);
        goto LABEL_511;
      case QUEST_EXEC_LOCK_FORCE:
        if ( std::vector<std::string>::size(&exec->param) <= 1 )
        {
          common::milog::MiLogStream::create(
            &v536,
            &common::milog::MiLogDefault::default_log_obj_,
            3u,
            "./src/player/quest/player_quest_comp.cpp",
            "execAction",
            6159);
          v86 = common::milog::MiLogStream::operator<<<char [15],(char *[15])0>(
                  &v536,
                  (const char (*)[15])"invalid param:");
          v87 = common::milog::MiLogStream::operator<<<std::string>(v86, &exec->param);
          v9 = common::milog::MiLogStream::operator<<<char [6],(char *[6])0>(v87, (const char (*)[6])" uid:");
          if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
            __asan_report_load8(&this->player_);
          goto LABEL_817;
        }
        *(_DWORD *)(v4 + 96) = 0;
        v88 = std::vector<std::string>::operator[](&exec->param, 0LL);
        if ( common::tools::StringUtils::strToNum<unsigned int>(v88, (unsigned int *)(v4 + 96), 1) )
        {
          common::milog::MiLogStream::create(
            &v536,
            &common::milog::MiLogDefault::default_log_obj_,
            3u,
            "./src/player/quest/player_quest_comp.cpp",
            "execAction",
            6165);
          v89 = common::milog::MiLogStream::operator<<<char [17],(char *[17])0>(
                  &v536,
                  (const char (*)[17])"invalid param 0:");
          v90 = std::vector<std::string>::operator[](&exec->param, 0LL);
          v91 = common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v89, v90);
          v9 = common::milog::MiLogStream::operator<<<char [6],(char *[6])0>(v91, (const char (*)[6])" uid:");
          if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
            __asan_report_load8(&this->player_);
          goto LABEL_817;
        }
        std::vector<unsigned int>::vector((std::vector<unsigned int> *const)(v4 + 352));
        std::allocator<char>::allocator(v4 + 48);
        std::string::basic_string<std::allocator<char>>(
          (std::string *const)&v536,
          ",",
          (const std::allocator<char> *)(v4 + 48));
        v92 = std::vector<std::string>::operator[](&exec->param, 1uLL);
        v93 = common::tools::StringUtils::splitToList<unsigned int>(
                v92,
                (const std::string *)&v536,
                (std::vector<unsigned int> *)(v4 + 352),
                0) != 0;
        std::string::~string(&v536);
        std::allocator<char>::~allocator(v4 + 48);
        if ( v93 )
        {
          common::milog::MiLogStream::create(
            &v536,
            &common::milog::MiLogDefault::default_log_obj_,
            3u,
            "./src/player/quest/player_quest_comp.cpp",
            "execAction",
            6171);
          v94 = common::milog::MiLogStream::operator<<<char [17],(char *[17])0>(
                  &v536,
                  (const char (*)[17])"invalid param 1:");
          v95 = std::vector<std::string>::operator[](&exec->param, 1uLL);
          v96 = common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v94, v95);
          v60 = common::milog::MiLogStream::operator<<<char [6],(char *[6])0>(v96, (const char (*)[6])" uid:");
          if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
            __asan_report_load8(&this->player_);
          goto LABEL_511;
        }
        if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
          __asan_report_load8(&this->player_);
        v97 = Player::getSceneComp(this->player_);
        if ( !PlayerSceneComp::lockForce(v97, *(_DWORD *)(v4 + 96), (const std::vector<unsigned int> *)(v4 + 352), 1) )
          goto LABEL_533;
        common::milog::MiLogStream::create(
          &v536,
          &common::milog::MiLogDefault::default_log_obj_,
          3u,
          "./src/player/quest/player_quest_comp.cpp",
          "execAction",
          6176);
        v60 = common::milog::MiLogStream::operator<<<char [22],(char *[22])0>(
                &v536,
                (const char (*)[22])"lockForce fails, uid:");
        if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
          __asan_report_load8(&this->player_);
        goto LABEL_511;
      case QUEST_EXEC_CHANGE_AVATAR_ELEMET:
        if ( std::vector<std::string>::empty(&exec->param) )
        {
          common::milog::MiLogStream::create(
            &v536,
            &common::milog::MiLogDefault::default_log_obj_,
            3u,
            "./src/player/quest/player_quest_comp.cpp",
            "execAction",
            6185);
          v98 = common::milog::MiLogStream::operator<<<char [15],(char *[15])0>(
                  &v536,
                  (const char (*)[15])"invalid param:");
          v99 = common::milog::MiLogStream::operator<<<std::string>(v98, &exec->param);
          v9 = common::milog::MiLogStream::operator<<<char [6],(char *[6])0>(v99, (const char (*)[6])" uid:");
          if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
            __asan_report_load8(&this->player_);
          goto LABEL_817;
        }
        *(_DWORD *)(v4 + 96) = 0;
        v100 = std::vector<std::string>::operator[](&exec->param, 0LL);
        if ( common::tools::StringUtils::strToNum<int>(v100, (int *)(v4 + 96), 1) )
        {
          common::milog::MiLogStream::create(
            &v536,
            &common::milog::MiLogDefault::default_log_obj_,
            3u,
            "./src/player/quest/player_quest_comp.cpp",
            "execAction",
            6191);
          v101 = common::milog::MiLogStream::operator<<<char [17],(char *[17])0>(
                   &v536,
                   (const char (*)[17])"invalid param 0:");
          v102 = std::vector<std::string>::operator[](&exec->param, 0LL);
          v103 = common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v101, v102);
          v9 = common::milog::MiLogStream::operator<<<char [6],(char *[6])0>(v103, (const char (*)[6])" uid:");
          if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
            __asan_report_load8(&this->player_);
          goto LABEL_817;
        }
        if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
          __asan_report_load8(&this->player_);
        Player::getCurAvatar((Player *const)(v4 + 256));
        if ( std::operator==<Avatar>((const std::shared_ptr<Avatar> *)(v4 + 256), 0LL) )
        {
          common::milog::MiLogStream::create(
            &v536,
            &common::milog::MiLogDefault::default_log_obj_,
            3u,
            "./src/player/quest/player_quest_comp.cpp",
            "execAction",
            6197);
          v104 = common::milog::MiLogStream::operator<<<char [25],(char *[25])0>(
                   &v536,
                   (const char (*)[25])"getCurAvatar fails, uid:");
          if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
            __asan_report_load8(&this->player_);
          goto LABEL_169;
        }
        v105 = std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 256));
        if ( Avatar::changeElemType(v105, *(data::ElementType *)(v4 + 96)) )
        {
          common::milog::MiLogStream::create(
            &v536,
            &common::milog::MiLogDefault::default_log_obj_,
            3u,
            "./src/player/quest/player_quest_comp.cpp",
            "execAction",
            6202);
          v106 = common::milog::MiLogStream::operator<<<char [19],(char *[19])0>(
                   &v536,
                   (const char (*)[19])"changeElemType to:");
          *(_QWORD *)(v4 + 192) = data::enumValToStr((data::ElementType)*(_DWORD *)(v4 + 96));
          v107 = common::milog::MiLogStream::operator<<<char const*,(char const**)0>(
                   v106,
                   (const char *const *)(v4 + 192));
          v108 = common::milog::MiLogStream::operator<<<char [8],(char *[8])0>(v107, (const char (*)[8])", fails");
          v109 = std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::operator*((const std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 256));
          common::milog::MiLogStream::operator<<<Avatar,(Avatar*)0>(v108, v109);
          common::milog::MiLogStream::~MiLogStream(&v536);
        }
        goto LABEL_271;
      case QUEST_EXEC_REFRESH_GROUP_MONSTER:
        if ( (unsigned __int8)PlayerQuestComp::checkAndPushQuestGroupAction(
                                this,
                                *(_DWORD *)(v4 + 128),
                                *(_DWORD *)(v4 + 144),
                                (data::QuestExec *)exec) != 1 )
          PlayerQuestComp::execRefreshGroupMonster(this, exec, *(_DWORD *)(v4 + 144));
        goto LABEL_818;
      case QUEST_EXEC_SET_IS_FLYABLE:
        if ( std::vector<std::string>::empty(&exec->param) )
        {
          common::milog::MiLogStream::create(
            &v536,
            &common::milog::MiLogDefault::default_log_obj_,
            3u,
            "./src/player/quest/player_quest_comp.cpp",
            "execAction",
            6219);
          v110 = common::milog::MiLogStream::operator<<<char [15],(char *[15])0>(
                   &v536,
                   (const char (*)[15])"invalid param:");
          v111 = common::milog::MiLogStream::operator<<<std::string>(v110, &exec->param);
          v9 = common::milog::MiLogStream::operator<<<char [6],(char *[6])0>(v111, (const char (*)[6])" uid:");
          if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
            __asan_report_load8(&this->player_);
          goto LABEL_817;
        }
        *(_BYTE *)(v4 + 48) = 0;
        v112 = std::vector<std::string>::operator[](&exec->param, 0LL);
        if ( common::tools::StringUtils::strToNum<bool>(v112, (bool *)(v4 + 48), 1) )
        {
          common::milog::MiLogStream::create(
            &v536,
            &common::milog::MiLogDefault::default_log_obj_,
            3u,
            "./src/player/quest/player_quest_comp.cpp",
            "execAction",
            6225);
          v113 = common::milog::MiLogStream::operator<<<char [17],(char *[17])0>(
                   &v536,
                   (const char (*)[17])"invalid param 0:");
          v114 = std::vector<std::string>::operator[](&exec->param, 0LL);
          v115 = common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v113, v114);
          v9 = common::milog::MiLogStream::operator<<<char [6],(char *[6])0>(v115, (const char (*)[6])" uid:");
          if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
            __asan_report_load8(&this->player_);
          goto LABEL_817;
        }
        if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
          __asan_report_load8(&this->player_);
        AvatarComp = Player::getAvatarComp(this->player_);
        PlayerAvatarComp::setIsFlyable(AvatarComp, *(_BYTE *)(v4 + 48), 1);
        goto LABEL_818;
      case QUEST_EXEC_SET_IS_WEATHER_LOCKED:
        if ( std::vector<std::string>::empty(&exec->param) )
        {
          common::milog::MiLogStream::create(
            &v536,
            &common::milog::MiLogDefault::default_log_obj_,
            3u,
            "./src/player/quest/player_quest_comp.cpp",
            "execAction",
            6251);
          v124 = common::milog::MiLogStream::operator<<<char [15],(char *[15])0>(
                   &v536,
                   (const char (*)[15])"invalid param:");
          v125 = common::milog::MiLogStream::operator<<<std::string>(v124, &exec->param);
          v9 = common::milog::MiLogStream::operator<<<char [6],(char *[6])0>(v125, (const char (*)[6])" uid:");
          if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
            __asan_report_load8(&this->player_);
          goto LABEL_817;
        }
        *(_BYTE *)(v4 + 48) = 0;
        v126 = std::vector<std::string>::operator[](&exec->param, 0LL);
        if ( common::tools::StringUtils::strToNum<bool>(v126, (bool *)(v4 + 48), 1) )
        {
          common::milog::MiLogStream::create(
            &v536,
            &common::milog::MiLogDefault::default_log_obj_,
            3u,
            "./src/player/quest/player_quest_comp.cpp",
            "execAction",
            6257);
          v127 = common::milog::MiLogStream::operator<<<char [17],(char *[17])0>(
                   &v536,
                   (const char (*)[17])"invalid param 0:");
          v128 = std::vector<std::string>::operator[](&exec->param, 0LL);
          v129 = common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v127, v128);
          v9 = common::milog::MiLogStream::operator<<<char [6],(char *[6])0>(v129, (const char (*)[6])" uid:");
          if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
            __asan_report_load8(&this->player_);
          goto LABEL_817;
        }
        if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
          __asan_report_load8(&this->player_);
        BasicComp = Player::getBasicComp(this->player_);
        PlayerBasicComp::setIsWeatherLocked(BasicComp, *(_BYTE *)(v4 + 48), 1);
        goto LABEL_818;
      case QUEST_EXEC_SET_IS_GAME_TIME_LOCKED:
        if ( std::vector<std::string>::empty(&exec->param) )
        {
          common::milog::MiLogStream::create(
            &v536,
            &common::milog::MiLogDefault::default_log_obj_,
            3u,
            "./src/player/quest/player_quest_comp.cpp",
            "execAction",
            6267);
          v131 = common::milog::MiLogStream::operator<<<char [15],(char *[15])0>(
                   &v536,
                   (const char (*)[15])"invalid param:");
          v132 = common::milog::MiLogStream::operator<<<std::string>(v131, &exec->param);
          v9 = common::milog::MiLogStream::operator<<<char [6],(char *[6])0>(v132, (const char (*)[6])" uid:");
          if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
            __asan_report_load8(&this->player_);
          goto LABEL_817;
        }
        *(_BYTE *)(v4 + 48) = 0;
        v133 = std::vector<std::string>::operator[](&exec->param, 0LL);
        if ( common::tools::StringUtils::strToNum<bool>(v133, (bool *)(v4 + 48), 1) )
        {
          common::milog::MiLogStream::create(
            &v536,
            &common::milog::MiLogDefault::default_log_obj_,
            3u,
            "./src/player/quest/player_quest_comp.cpp",
            "execAction",
            6273);
          v134 = common::milog::MiLogStream::operator<<<char [17],(char *[17])0>(
                   &v536,
                   (const char (*)[17])"invalid param 0:");
          v135 = std::vector<std::string>::operator[](&exec->param, 0LL);
          v136 = common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v134, v135);
          v9 = common::milog::MiLogStream::operator<<<char [6],(char *[6])0>(v136, (const char (*)[6])" uid:");
          if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
            __asan_report_load8(&this->player_);
          goto LABEL_817;
        }
        if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
          __asan_report_load8(&this->player_);
        v137 = Player::getBasicComp(this->player_);
        PlayerBasicComp::setIsGameTimeLocked(v137, *(_BYTE *)(v4 + 48));
        goto LABEL_818;
      case QUEST_EXEC_SET_IS_TRANSFERABLE:
        if ( std::vector<std::string>::empty(&exec->param) )
        {
          common::milog::MiLogStream::create(
            &v536,
            &common::milog::MiLogDefault::default_log_obj_,
            3u,
            "./src/player/quest/player_quest_comp.cpp",
            "execAction",
            6235);
          v117 = common::milog::MiLogStream::operator<<<char [15],(char *[15])0>(
                   &v536,
                   (const char (*)[15])"invalid param:");
          v118 = common::milog::MiLogStream::operator<<<std::string>(v117, &exec->param);
          v9 = common::milog::MiLogStream::operator<<<char [6],(char *[6])0>(v118, (const char (*)[6])" uid:");
          if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
            __asan_report_load8(&this->player_);
          goto LABEL_817;
        }
        *(_BYTE *)(v4 + 48) = 0;
        v119 = std::vector<std::string>::operator[](&exec->param, 0LL);
        if ( common::tools::StringUtils::strToNum<bool>(v119, (bool *)(v4 + 48), 1) )
        {
          common::milog::MiLogStream::create(
            &v536,
            &common::milog::MiLogDefault::default_log_obj_,
            3u,
            "./src/player/quest/player_quest_comp.cpp",
            "execAction",
            6241);
          v120 = common::milog::MiLogStream::operator<<<char [17],(char *[17])0>(
                   &v536,
                   (const char (*)[17])"invalid param 0:");
          v121 = std::vector<std::string>::operator[](&exec->param, 0LL);
          v122 = common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v120, v121);
          v9 = common::milog::MiLogStream::operator<<<char [6],(char *[6])0>(v122, (const char (*)[6])" uid:");
          if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
            __asan_report_load8(&this->player_);
          goto LABEL_817;
        }
        if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
          __asan_report_load8(&this->player_);
        v123 = Player::getAvatarComp(this->player_);
        PlayerAvatarComp::setIsTransferable(v123, *(_BYTE *)(v4 + 48), 1);
        goto LABEL_818;
      case QUEST_EXEC_GRANT_TRIAL_AVATAR:
      case QUEST_EXEC_GRANT_TRIAL_AVATAR_AND_LOCK_TEAM:
        if ( std::vector<std::string>::empty(&exec->param) )
        {
          common::milog::MiLogStream::create(
            &v536,
            &common::milog::MiLogDefault::default_log_obj_,
            3u,
            "./src/player/quest/player_quest_comp.cpp",
            "execAction",
            6284);
          v138 = common::milog::MiLogStream::operator<<<char [15],(char *[15])0>(
                   &v536,
                   (const char (*)[15])"invalid param:");
          v139 = common::milog::MiLogStream::operator<<<std::string>(v138, &exec->param);
          v9 = common::milog::MiLogStream::operator<<<char [6],(char *[6])0>(v139, (const char (*)[6])" uid:");
          if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
            __asan_report_load8(&this->player_);
          goto LABEL_817;
        }
        *(_DWORD *)(v4 + 96) = 0;
        v140 = std::vector<std::string>::operator[](&exec->param, 0LL);
        if ( common::tools::StringUtils::strToNum<unsigned int>(v140, (unsigned int *)(v4 + 96), 1) )
        {
          common::milog::MiLogStream::create(
            &v536,
            &common::milog::MiLogDefault::default_log_obj_,
            3u,
            "./src/player/quest/player_quest_comp.cpp",
            "execAction",
            6290);
          v141 = common::milog::MiLogStream::operator<<<char [17],(char *[17])0>(
                   &v536,
                   (const char (*)[17])"invalid param 0:");
          v142 = std::vector<std::string>::operator[](&exec->param, 0LL);
          v143 = common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v141, v142);
          v9 = common::milog::MiLogStream::operator<<<char [6],(char *[6])0>(v143, (const char (*)[6])" uid:");
          if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
            __asan_report_load8(&this->player_);
          goto LABEL_817;
        }
        *(_BYTE *)(v4 + 48) = 0;
        if ( std::vector<std::string>::size(&exec->param) > 1 )
        {
          v144 = std::vector<std::string>::operator[](&exec->param, 1uLL);
          if ( common::tools::StringUtils::strToNum<bool>(v144, (bool *)(v4 + 48), 1) )
          {
            common::milog::MiLogStream::create(
              &v536,
              &common::milog::MiLogDefault::default_log_obj_,
              3u,
              "./src/player/quest/player_quest_comp.cpp",
              "execAction",
              6298);
            v145 = common::milog::MiLogStream::operator<<<char [32],(char *[32])0>(
                     &v536,
                     (const char (*)[32])"invalid is_force_grant param 1:");
            v146 = std::vector<std::string>::operator[](&exec->param, 1uLL);
            v147 = common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v145, v146);
            v9 = common::milog::MiLogStream::operator<<<char [6],(char *[6])0>(v147, (const char (*)[6])" uid:");
            if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
              __asan_report_load8(&this->player_);
            goto LABEL_817;
          }
        }
        proto::TrialAvatarGrantRecord::TrialAvatarGrantRecord((proto::TrialAvatarGrantRecord *const)(v4 + 416));
        proto::TrialAvatarGrantRecord::set_grant_reason((proto::TrialAvatarGrantRecord *const)(v4 + 416), 1u);
        proto::TrialAvatarGrantRecord::set_from_parent_quest_id(
          (proto::TrialAvatarGrantRecord *const)(v4 + 416),
          *(_DWORD *)(v4 + 128));
        if ( *(_BYTE *)(((unsigned __int64)&exec->type >> 3) + 0x7FFF8000) != 0
          && *(_BYTE *)(((unsigned __int64)&exec->type >> 3) + 0x7FFF8000) <= 3 )
        {
          __asan_report_load4(&exec->type);
        }
        is_lock_team = exec->type == QUEST_EXEC_GRANT_TRIAL_AVATAR_AND_LOCK_TEAM;
        if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
          __asan_report_load8(&this->player_);
        v148 = Player::getAvatarComp(this->player_);
        if ( PlayerAvatarComp::setUpTrialAvatarInTeam(
               v148,
               *(_DWORD *)(v4 + 96),
               (const proto::TrialAvatarGrantRecord *)(v4 + 416),
               is_lock_team,
               *(_BYTE *)(v4 + 48)) )
        {
          common::milog::MiLogStream::create(
            &v536,
            &common::milog::MiLogDefault::default_log_obj_,
            3u,
            "./src/player/quest/player_quest_comp.cpp",
            "execAction",
            6308);
          v149 = common::milog::MiLogStream::operator<<<char [48],(char *[48])0>(
                   &v536,
                   (const char (*)[48])"setUpTrialAvatarInTeam failed, trial_avatar_id:");
          v150 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                   v149,
                   (const unsigned int *)(v4 + 96));
          v151 = common::milog::MiLogStream::operator<<<char [17],(char *[17])0>(
                   v150,
                   (const char (*)[17])" is_force_grant:");
          v152 = common::milog::MiLogStream::operator<<(v151, *(_BYTE *)(v4 + 48));
          v153 = common::milog::MiLogStream::operator<<<char [6],(char *[6])0>(v152, (const char (*)[6])" uid:");
          if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
            __asan_report_load8(&this->player_);
          *(_DWORD *)(v4 + 112) = Player::getUid(this->player_);
          common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v153, (const unsigned int *)(v4 + 112));
          common::milog::MiLogStream::~MiLogStream(&v536);
        }
        else if ( is_lock_team )
        {
          PlayerQuestComp::findParentQuest(
            (const PlayerQuestComp *const)(v4 + 256),
            (__int64)this,
            *(_DWORD *)(v4 + 128));
          if ( std::operator!=<ParentQuest>(0LL, (const std::shared_ptr<ParentQuest> *)(v4 + 256)) )
          {
            v154 = std::__shared_ptr_access<ParentQuest,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<ParentQuest,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 256));
            ParentQuest::setIsLockTeam(v154, 1);
          }
          std::shared_ptr<ParentQuest>::~shared_ptr((std::shared_ptr<ParentQuest> *const)(v4 + 256));
        }
        proto::TrialAvatarGrantRecord::~TrialAvatarGrantRecord((proto::TrialAvatarGrantRecord *const)(v4 + 416));
        goto LABEL_818;
      case QUEST_EXEC_OPEN_BORED:
        if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
          __asan_report_load8(&this->player_);
        BoredComp = Player::getBoredComp(this->player_);
        PlayerBoredComp::open(BoredComp, 1);
        goto LABEL_818;
      case QUEST_EXEC_ROLLBACK_QUEST:
        if ( std::vector<std::string>::empty(&exec->param) )
        {
          common::milog::MiLogStream::create(
            &v536,
            &common::milog::MiLogDefault::default_log_obj_,
            3u,
            "./src/player/quest/player_quest_comp.cpp",
            "execAction",
            6331);
          v156 = common::milog::MiLogStream::operator<<<char [15],(char *[15])0>(
                   &v536,
                   (const char (*)[15])"invalid param:");
          v157 = common::milog::MiLogStream::operator<<<std::string>(v156, &exec->param);
          v9 = common::milog::MiLogStream::operator<<<char [6],(char *[6])0>(v157, (const char (*)[6])" uid:");
          if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
            __asan_report_load8(&this->player_);
LABEL_817:
          *(_DWORD *)(v4 + 112) = Player::getUid(this->player_);
          common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v9, (const unsigned int *)(v4 + 112));
          common::milog::MiLogStream::~MiLogStream(&v536);
          goto LABEL_818;
        }
        *(_DWORD *)(v4 + 96) = 0;
        v158 = std::vector<std::string>::operator[](&exec->param, 0LL);
        if ( common::tools::StringUtils::strToNum<unsigned int>(v158, (unsigned int *)(v4 + 96), 1) )
        {
          common::milog::MiLogStream::create(
            &v536,
            &common::milog::MiLogDefault::default_log_obj_,
            3u,
            "./src/player/quest/player_quest_comp.cpp",
            "execAction",
            6337);
          v159 = common::milog::MiLogStream::operator<<<char [17],(char *[17])0>(
                   &v536,
                   (const char (*)[17])"invalid param 0:");
          v160 = std::vector<std::string>::operator[](&exec->param, 0LL);
          v161 = common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v159, v160);
          v9 = common::milog::MiLogStream::operator<<<char [6],(char *[6])0>(v161, (const char (*)[6])" uid:");
          if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
            __asan_report_load8(&this->player_);
          goto LABEL_817;
        }
        if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
          __asan_report_load8(&this->player_);
        Player::getAvatarComp(this->player_);
        PlayerAvatarComp::getCurAvatar((const PlayerAvatarComp *const)(v4 + 256));
        if ( std::operator!=<Avatar>((const std::shared_ptr<Avatar> *)(v4 + 256), 0LL)
          && (v162 = std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 256)),
              Creature::getLifeState(v162) != LIFE_ALIVE) )
        {
          if ( PlayerQuestComp::rollbackParentQuest(this, *(_DWORD *)(v4 + 128), *(_DWORD *)(v4 + 96), 0, 1) )
          {
            common::milog::MiLogStream::create(
              &v536,
              &common::milog::MiLogDefault::default_log_obj_,
              3u,
              "./src/player/quest/player_quest_comp.cpp",
              "execAction",
              6347);
            v164 = common::milog::MiLogStream::operator<<<char [45],(char *[45])0>(
                     &v536,
                     (const char (*)[45])"rollbackParentQuest failed, parent_quest_id:");
            v165 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                     v164,
                     (const unsigned int *)(v4 + 128));
            v166 = common::milog::MiLogStream::operator<<<char [17],(char *[17])0>(
                     v165,
                     (const char (*)[17])" child_quest_id:");
            v167 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                     v166,
                     (const unsigned int *)(v4 + 96));
            v104 = common::milog::MiLogStream::operator<<<char [6],(char *[6])0>(v167, (const char (*)[6])" uid:");
            if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
              __asan_report_load8(&this->player_);
LABEL_169:
            *(_DWORD *)(v4 + 112) = Player::getUid(this->player_);
            common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
              v104,
              (const unsigned int *)(v4 + 112));
            common::milog::MiLogStream::~MiLogStream(&v536);
          }
        }
        else if ( PlayerQuestComp::rollbackParentQuest(this, *(_DWORD *)(v4 + 128), *(_DWORD *)(v4 + 96), 1, 1) )
        {
          common::milog::MiLogStream::create(
            &v536,
            &common::milog::MiLogDefault::default_log_obj_,
            3u,
            "./src/player/quest/player_quest_comp.cpp",
            "execAction",
            6355);
          v168 = common::milog::MiLogStream::operator<<<char [45],(char *[45])0>(
                   &v536,
                   (const char (*)[45])"rollbackParentQuest failed, parent_quest_id:");
          v169 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                   v168,
                   (const unsigned int *)(v4 + 128));
          v170 = common::milog::MiLogStream::operator<<<char [17],(char *[17])0>(
                   v169,
                   (const char (*)[17])" child_quest_id:");
          v171 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                   v170,
                   (const unsigned int *)(v4 + 96));
          v104 = common::milog::MiLogStream::operator<<<char [6],(char *[6])0>(v171, (const char (*)[6])" uid:");
          if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
            __asan_report_load8(&this->player_);
          goto LABEL_169;
        }
LABEL_271:
        std::shared_ptr<Avatar>::~shared_ptr((std::shared_ptr<Avatar> *const)(v4 + 256));
LABEL_818:
        __gnu_cxx::__normal_iterator<data::QuestExec const*,std::vector<data::QuestExec>>::operator++(&__for_begin);
        break;
      case QUEST_EXEC_NOTIFY_GROUP_LUA:
        if ( (unsigned __int8)PlayerQuestComp::checkAndPushQuestGroupAction(
                                this,
                                *(_DWORD *)(v4 + 128),
                                *(_DWORD *)(v4 + 144),
                                (data::QuestExec *)exec) == 1 )
          goto LABEL_818;
        if ( !*(_DWORD *)(v4 + 144) )
        {
          common::milog::MiLogStream::create(
            &v536,
            &common::milog::MiLogDefault::default_log_obj_,
            3u,
            "./src/player/quest/player_quest_comp.cpp",
            "execAction",
            6367);
          v172 = common::milog::MiLogStream::operator<<<char [67],(char *[67])0>(
                   &v536,
                   (const char (*)[67])"QUEST_EXEC_NOTIFY_GROUP_LUA, quest id cannot be 0,parent quest id:");
          common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v172, (const unsigned int *)(v4 + 128));
          common::milog::MiLogStream::~MiLogStream(&v536);
          goto LABEL_818;
        }
        PlayerQuestComp::findQuest((const PlayerQuestComp *const)(v4 + 256), (__int64)this, *(_DWORD *)(v4 + 144));
        if ( std::operator==<Quest>((const std::shared_ptr<Quest> *)(v4 + 256), 0LL) )
        {
          common::milog::MiLogStream::create(
            &v536,
            &common::milog::MiLogDefault::default_log_obj_,
            3u,
            "./src/player/quest/player_quest_comp.cpp",
            "execAction",
            6374);
          v173 = common::milog::MiLogStream::operator<<<char [27],(char *[27])0>(
                   &v536,
                   (const char (*)[27])"findQuest failed,quest_id:");
          common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v173, (const unsigned int *)(v4 + 144));
          common::milog::MiLogStream::~MiLogStream(&v536);
        }
        else
        {
          v174 = *(_DWORD *)(v4 + 144);
          v175 = std::__shared_ptr_access<Quest,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Quest,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 256));
          State = Quest::getState(v175);
          PlayerQuestComp::execNotifyGroupLua(this, exec, State, v174);
        }
        goto LABEL_278;
      case QUEST_EXEC_SET_OPEN_STATE:
        *(_DWORD *)(v4 + 96) = 0;
        *(_BYTE *)(v4 + 48) = 0;
        if ( common::tools::StringUtils::strVecToNum<0u,unsigned int,bool &>(
               &exec->param,
               (unsigned int *)(v4 + 96),
               (bool *)(v4 + 48),
               (bool *)&exec->param) )
        {
          common::milog::MiLogStream::create(
            &v536,
            &common::milog::MiLogDefault::default_log_obj_,
            3u,
            "./src/player/quest/player_quest_comp.cpp",
            "execAction",
            6427);
          v186 = common::milog::MiLogStream::operator<<<char [27],(char *[27])0>(
                   &v536,
                   (const char (*)[27])"strVecToNum failed, param:");
          v187 = common::milog::MiLogStream::operator<<<std::string>(v186, &exec->param);
          v9 = common::milog::MiLogStream::operator<<<char [6],(char *[6])0>(v187, (const char (*)[6])" uid:");
          if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
            __asan_report_load8(&this->player_);
          goto LABEL_817;
        }
        if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
          __asan_report_load8(&this->player_);
        v188 = Player::getBasicComp(this->player_);
        PlayerBasicComp::setOpenState(v188, *(_DWORD *)(v4 + 96), *(unsigned __int8 *)(v4 + 48), 1);
        goto LABEL_818;
      case QUEST_EXEC_LOCK_POINT:
        if ( std::vector<std::string>::size(&exec->param) <= 1 )
        {
          common::milog::MiLogStream::create(
            &v536,
            &common::milog::MiLogDefault::default_log_obj_,
            3u,
            "./src/player/quest/player_quest_comp.cpp",
            "execAction",
            6437);
          v189 = common::milog::MiLogStream::operator<<<char [15],(char *[15])0>(
                   &v536,
                   (const char (*)[15])"invalid param:");
          v190 = common::milog::MiLogStream::operator<<<std::string>(v189, &exec->param);
          v9 = common::milog::MiLogStream::operator<<<char [6],(char *[6])0>(v190, (const char (*)[6])" uid:");
          if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
            __asan_report_load8(&this->player_);
          goto LABEL_817;
        }
        *(_DWORD *)(v4 + 96) = 0;
        v191 = std::vector<std::string>::operator[](&exec->param, 0LL);
        if ( common::tools::StringUtils::strToNum<unsigned int>(v191, (unsigned int *)(v4 + 96), 1) )
        {
          common::milog::MiLogStream::create(
            &v536,
            &common::milog::MiLogDefault::default_log_obj_,
            3u,
            "./src/player/quest/player_quest_comp.cpp",
            "execAction",
            6443);
          v192 = common::milog::MiLogStream::operator<<<char [17],(char *[17])0>(
                   &v536,
                   (const char (*)[17])"invalid param 0:");
          v193 = std::vector<std::string>::operator[](&exec->param, 0LL);
          v194 = common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v192, v193);
          v9 = common::milog::MiLogStream::operator<<<char [6],(char *[6])0>(v194, (const char (*)[6])" uid:");
          if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
            __asan_report_load8(&this->player_);
          goto LABEL_817;
        }
        std::vector<unsigned int>::vector((std::vector<unsigned int> *const)(v4 + 352));
        std::allocator<char>::allocator(v4 + 48);
        std::string::basic_string<std::allocator<char>>(
          (std::string *const)&v536,
          ",",
          (const std::allocator<char> *)(v4 + 48));
        v195 = std::vector<std::string>::operator[](&exec->param, 1uLL);
        v196 = common::tools::StringUtils::splitToList<unsigned int>(
                 v195,
                 (const std::string *)&v536,
                 (std::vector<unsigned int> *)(v4 + 352),
                 0) != 0;
        std::string::~string(&v536);
        std::allocator<char>::~allocator(v4 + 48);
        if ( v196 )
        {
          common::milog::MiLogStream::create(
            &v536,
            &common::milog::MiLogDefault::default_log_obj_,
            3u,
            "./src/player/quest/player_quest_comp.cpp",
            "execAction",
            6449);
          v197 = common::milog::MiLogStream::operator<<<char [17],(char *[17])0>(
                   &v536,
                   (const char (*)[17])"invalid param 1:");
          v198 = std::vector<std::string>::operator[](&exec->param, 1uLL);
          v199 = common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v197, v198);
          v60 = common::milog::MiLogStream::operator<<<char [6],(char *[6])0>(v199, (const char (*)[6])" uid:");
          if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
            __asan_report_load8(&this->player_);
          goto LABEL_511;
        }
        if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
          __asan_report_load8(&this->player_);
        v200 = Player::getSceneComp(this->player_);
        if ( !PlayerSceneComp::lockPoint(v200, *(_DWORD *)(v4 + 96), (const std::vector<unsigned int> *)(v4 + 352), 1) )
          goto LABEL_533;
        common::milog::MiLogStream::create(
          &v536,
          &common::milog::MiLogDefault::default_log_obj_,
          3u,
          "./src/player/quest/player_quest_comp.cpp",
          "execAction",
          6454);
        v60 = common::milog::MiLogStream::operator<<<char [22],(char *[22])0>(
                &v536,
                (const char (*)[22])"lockPoint fails, uid:");
        if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
          __asan_report_load8(&this->player_);
        goto LABEL_511;
      case QUEST_EXEC_DEL_PACK_ITEM_BATCH:
        if ( !std::vector<std::string>::size(&exec->param) )
        {
          common::milog::MiLogStream::create(
            &v536,
            &common::milog::MiLogDefault::default_log_obj_,
            3u,
            "./src/player/quest/player_quest_comp.cpp",
            "execAction",
            6008);
          v18 = common::milog::MiLogStream::operator<<<char [15],(char *[15])0>(
                  &v536,
                  (const char (*)[15])"invalid param:");
          v19 = common::milog::MiLogStream::operator<<<std::string>(v18, &exec->param);
          v9 = common::milog::MiLogStream::operator<<<char [6],(char *[6])0>(v19, (const char (*)[6])" uid:");
          if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
            __asan_report_load8(&this->player_);
          goto LABEL_817;
        }
        std::vector<unsigned int>::vector((std::vector<unsigned int> *const)(v4 + 288));
        std::allocator<char>::allocator(v4 + 48);
        std::string::basic_string<std::allocator<char>>(
          (std::string *const)&v536,
          ":",
          (const std::allocator<char> *)(v4 + 48));
        std::allocator<char>::allocator(&__a);
        std::string::basic_string<std::allocator<char>>((std::string *const)(v4 + 416), ",", &__a);
        v20 = std::vector<std::string>::operator[](&exec->param, 0LL);
        v21 = common::tools::StringUtils::splitToList<unsigned int>(
                v20,
                (const std::string *)(v4 + 416),
                (const std::string *)&v536,
                2u,
                (std::vector<unsigned int> *)(v4 + 288),
                0) != 0;
        std::string::~string((void *)(v4 + 416));
        std::allocator<char>::~allocator(&__a);
        std::string::~string(&v536);
        std::allocator<char>::~allocator(v4 + 48);
        if ( v21 )
        {
          common::milog::MiLogStream::create(
            &v536,
            &common::milog::MiLogDefault::default_log_obj_,
            3u,
            "./src/player/quest/player_quest_comp.cpp",
            "execAction",
            6014);
          v22 = common::milog::MiLogStream::operator<<<char [15],(char *[15])0>(
                  &v536,
                  (const char (*)[15])"invalid param:");
          v23 = std::vector<std::string>::operator[](&exec->param, 0LL);
          v24 = common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v22, v23);
          v25 = common::milog::MiLogStream::operator<<<char [6],(char *[6])0>(v24, (const char (*)[6])" uid:");
          if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
            __asan_report_load8(&this->player_);
          goto LABEL_63;
        }
        if ( (std::vector<unsigned int>::size((const std::vector<unsigned int> *const)(v4 + 288)) & 1) != 0 )
        {
          common::milog::MiLogStream::create(
            &v536,
            &common::milog::MiLogDefault::default_log_obj_,
            3u,
            "./src/player/quest/player_quest_comp.cpp",
            "execAction",
            6019);
          v26 = common::milog::MiLogStream::operator<<<char [15],(char *[15])0>(
                  &v536,
                  (const char (*)[15])"invalid param:");
          v27 = std::vector<std::string>::operator[](&exec->param, 0LL);
          v28 = common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v26, v27);
          v25 = common::milog::MiLogStream::operator<<<char [6],(char *[6])0>(v28, (const char (*)[6])" uid:");
          if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
            __asan_report_load8(&this->player_);
          goto LABEL_63;
        }
        std::vector<ItemParam>::vector((std::vector<ItemParam> *const)(v4 + 352));
        for ( idx = 0; ; idx += 2 )
        {
          v29 = idx;
          if ( v29 >= std::vector<unsigned int>::size((const std::vector<unsigned int> *const)(v4 + 288)) - 1 )
            break;
          *(_DWORD *)(v4 + 256) = 0;
          *(_DWORD *)(v4 + 260) = 0;
          *(_DWORD *)(v4 + 264) = 0;
          *(_DWORD *)(v4 + 268) = 0;
          v30 = std::vector<unsigned int>::operator[]((std::vector<unsigned int> *const)(v4 + 288), idx);
          v31 = v30;
          if ( *(_BYTE *)(((unsigned __int64)v30 >> 3) + 0x7FFF8000) != 0
            && (char)(((unsigned __int8)v30 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)v30 >> 3) + 0x7FFF8000) )
          {
            __asan_report_load4(v30);
          }
          *(_DWORD *)(v4 + 256) = *v31;
          v32 = std::vector<unsigned int>::operator[]((std::vector<unsigned int> *const)(v4 + 288), idx + 1);
          v33 = v32;
          if ( *(_BYTE *)(((unsigned __int64)v32 >> 3) + 0x7FFF8000) != 0
            && (char)(((unsigned __int8)v32 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)v32 >> 3) + 0x7FFF8000) )
          {
            __asan_report_load4(v32);
          }
          *(_DWORD *)(v4 + 260) = *v33;
          if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
            __asan_report_load8(&this->player_);
          v34 = Player::getItemComp(this->player_);
          *(_DWORD *)(v4 + 112) = PlayerItemComp::getPackMaterialCount(v34, *(_DWORD *)(v4 + 256));
          v35 = std::min<unsigned int>((const unsigned int *)(v4 + 112), (const unsigned int *)(v4 + 260));
          v36 = v35;
          if ( *(_BYTE *)(((unsigned __int64)v35 >> 3) + 0x7FFF8000) != 0
            && (char)(((unsigned __int8)v35 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)v35 >> 3) + 0x7FFF8000) )
          {
            __asan_report_load4(v35);
          }
          *(_DWORD *)(v4 + 260) = *v36;
          if ( *(_DWORD *)(v4 + 260) )
          {
            v37 = std::move<ItemParam &>((ItemParam *)(v4 + 256));
            std::vector<ItemParam>::emplace_back<ItemParam>((std::vector<ItemParam> *const)(v4 + 352), v37, v37);
          }
        }
        SubItemReason::SubItemReason((SubItemReason *const)(v4 + 192), ACTION_REASON_QUEST_ACTION);
        if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
          __asan_report_load8(&this->player_);
        v38 = Player::getItemComp(this->player_);
        if ( PlayerItemComp::subItemBatch(
               v38,
               (const std::vector<ItemParam> *)(v4 + 352),
               (const SubItemReason *)(v4 + 192)) )
        {
          common::milog::MiLogStream::create(
            &v536,
            &common::milog::MiLogDefault::default_log_obj_,
            3u,
            "./src/player/quest/player_quest_comp.cpp",
            "execAction",
            6038);
          v39 = common::milog::MiLogStream::operator<<<char [25],(char *[25])0>(
                  &v536,
                  (const char (*)[25])"subItemBatch fails, uid:");
          if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
            __asan_report_load8(&this->player_);
          *(_DWORD *)(v4 + 112) = Player::getUid(this->player_);
          common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v39, (const unsigned int *)(v4 + 112));
          common::milog::MiLogStream::~MiLogStream(&v536);
        }
        goto LABEL_55;
      case QUEST_EXEC_REFRESH_GROUP_SUITE:
        if ( (unsigned __int8)PlayerQuestComp::checkAndPushQuestGroupAction(
                                this,
                                *(_DWORD *)(v4 + 128),
                                *(_DWORD *)(v4 + 144),
                                (data::QuestExec *)exec) != 1 )
          PlayerQuestComp::execRefreshGroupSuite(this, exec, *(_DWORD *)(v4 + 144));
        goto LABEL_818;
      case QUEST_EXEC_REMOVE_TRIAL_AVATAR:
        if ( !std::vector<std::string>::size(&exec->param) )
        {
          common::milog::MiLogStream::create(
            &v536,
            &common::milog::MiLogDefault::default_log_obj_,
            3u,
            "./src/player/quest/player_quest_comp.cpp",
            "execAction",
            6463);
          v201 = common::milog::MiLogStream::operator<<<char [15],(char *[15])0>(
                   &v536,
                   (const char (*)[15])"invalid param:");
          v202 = common::milog::MiLogStream::operator<<<std::string>(v201, &exec->param);
          v9 = common::milog::MiLogStream::operator<<<char [6],(char *[6])0>(v202, (const char (*)[6])" uid:");
          if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
            __asan_report_load8(&this->player_);
          goto LABEL_817;
        }
        *(_DWORD *)(v4 + 112) = 0;
        v203 = std::vector<std::string>::operator[](&exec->param, 0LL);
        common::tools::StringUtils::strToNum<unsigned int>(v203, (unsigned int *)(v4 + 112), 1);
        if ( *(_DWORD *)(v4 + 112) )
        {
          if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
            __asan_report_load8(&this->player_);
          v209 = Player::getAvatarComp(this->player_);
          PlayerAvatarComp::delTrialAvatar(v209, *(_DWORD *)(v4 + 112), 1);
        }
        else
        {
          common::milog::MiLogStream::create(
            &v536,
            &common::milog::MiLogDefault::default_log_obj_,
            1u,
            "./src/player/quest/player_quest_comp.cpp",
            "execAction",
            6470);
          v204 = common::milog::MiLogStream::operator<<<char [17],(char *[17])0>(
                   &v536,
                   (const char (*)[17])"parent_quest_id:");
          v205 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                   v204,
                   (const unsigned int *)(v4 + 128));
          v206 = common::milog::MiLogStream::operator<<<char [11],(char *[11])0>(v205, (const char (*)[11])" quest_id:");
          v207 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                   v206,
                   (const unsigned int *)(v4 + 144));
          v208 = common::milog::MiLogStream::operator<<<char [18],(char *[18])0>(
                   v207,
                   (const char (*)[18])" trial_avatar_id:");
          common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v208, (const unsigned int *)(v4 + 112));
          common::milog::MiLogStream::~MiLogStream(&v536);
        }
        goto LABEL_818;
      case QUEST_EXEC_SET_GAME_TIME:
        if ( !std::vector<std::string>::size(&exec->param) )
        {
          common::milog::MiLogStream::create(
            &v536,
            &common::milog::MiLogDefault::default_log_obj_,
            3u,
            "./src/player/quest/player_quest_comp.cpp",
            "execAction",
            6480);
          v210 = common::milog::MiLogStream::operator<<<char [15],(char *[15])0>(
                   &v536,
                   (const char (*)[15])"invalid param:");
          v211 = common::milog::MiLogStream::operator<<<std::string>(v210, &exec->param);
          v9 = common::milog::MiLogStream::operator<<<char [6],(char *[6])0>(v211, (const char (*)[6])" uid:");
          if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
            __asan_report_load8(&this->player_);
          goto LABEL_817;
        }
        *(_DWORD *)(v4 + 112) = 0;
        v212 = std::vector<std::string>::operator[](&exec->param, 0LL);
        common::tools::StringUtils::strToNum<float>(v212, (float *)(v4 + 112), 1);
        if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
          __asan_report_load8(&this->player_);
        v213 = Player::getBasicComp(this->player_);
        PlayerBasicComp::forceSetGameTime(v213, (int)(float)(60.0 * *(float *)(v4 + 112)), 0, 1);
        goto LABEL_818;
      case QUEST_EXEC_SET_WEATHER_GADGET:
        *(_DWORD *)(v4 + 80) = 0;
        *(_DWORD *)(v4 + 96) = 0;
        if ( common::tools::StringUtils::strVecToNum<0u,unsigned int,unsigned int &>(
               &exec->param,
               (unsigned int *)(v4 + 80),
               (unsigned int *)(v4 + 96),
               (unsigned int *)&exec->param) )
        {
          common::milog::MiLogStream::create(
            &v536,
            &common::milog::MiLogDefault::default_log_obj_,
            3u,
            "./src/player/quest/player_quest_comp.cpp",
            "execAction",
            6494);
          v214 = common::milog::MiLogStream::operator<<<char [25],(char *[25])0>(
                   &v536,
                   (const char (*)[25])"strVecToNum fail. param:");
          v215 = common::milog::MiLogStream::operator<<<std::string>(v214, &exec->param);
          v9 = common::milog::MiLogStream::operator<<<char [6],(char *[6])0>(v215, (const char (*)[6])" uid:");
          if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
            __asan_report_load8(&this->player_);
          goto LABEL_817;
        }
        ServiceBox::findService<GameserverService>();
        GameserverService::getConfig((GameserverService *const)(v4 + 256));
        v216 = std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 256));
        weather_config_ptr = data::WeatherExcelConfigMgrBase::findWeatherExcelConfig(
                               &v216->design_config.txt_config_mgr.weather_config_mgr,
                               *(_DWORD *)(v4 + 80));
        std::shared_ptr<Config>::~shared_ptr((std::shared_ptr<Config> *const)(v4 + 256));
        if ( !weather_config_ptr )
        {
          common::milog::MiLogStream::create(
            &v536,
            &common::milog::MiLogDefault::default_log_obj_,
            3u,
            "./src/player/quest/player_quest_comp.cpp",
            "execAction",
            6500);
          v217 = common::milog::MiLogStream::operator<<<char [45],(char *[45])0>(
                   &v536,
                   (const char (*)[45])"findWeatherExcelConfig fail, height_area_id:");
          v218 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                   v217,
                   (const unsigned int *)(v4 + 80));
          v219 = common::milog::MiLogStream::operator<<<char [11],(char *[11])0>(v218, (const char (*)[11])" quest_id:");
          v220 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                   v219,
                   (const unsigned int *)(v4 + 144));
          v9 = common::milog::MiLogStream::operator<<<char [6],(char *[6])0>(v220, (const char (*)[6])" uid:");
          if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
            __asan_report_load8(&this->player_);
          goto LABEL_817;
        }
        if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
          __asan_report_load8(&this->player_);
        v221 = (unsigned int)Player::getSceneComp(this->player_);
        if ( *(_BYTE *)(((unsigned __int64)&weather_config_ptr->scene_id >> 3) + 0x7FFF8000) != 0
          && *(_BYTE *)(((unsigned __int64)&weather_config_ptr->scene_id >> 3) + 0x7FFF8000) <= 3 )
        {
          __asan_report_load4(&weather_config_ptr->scene_id);
        }
        PlayerSceneComp::getPersonalScene((PlayerSceneComp *const)(v4 + 224), v221);
        if ( std::operator==<Scene>(0LL, (const std::shared_ptr<Scene> *)(v4 + 224)) )
        {
          common::milog::MiLogStream::create(
            &v536,
            &common::milog::MiLogDefault::default_log_obj_,
            3u,
            "./src/player/quest/player_quest_comp.cpp",
            "execAction",
            6506);
          v222 = common::milog::MiLogStream::operator<<<char [26],(char *[26])0>(
                   &v536,
                   (const char (*)[26])"findScene fail, scene_id:");
          v223 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                   v222,
                   &weather_config_ptr->scene_id);
          v224 = common::milog::MiLogStream::operator<<<char [11],(char *[11])0>(v223, (const char (*)[11])" quest_id:");
          v225 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                   v224,
                   (const unsigned int *)(v4 + 144));
          v226 = common::milog::MiLogStream::operator<<<char [6],(char *[6])0>(v225, (const char (*)[6])" uid:");
          if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
            __asan_report_load8(&this->player_);
          *(_DWORD *)(v4 + 112) = Player::getUid(this->player_);
          common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v226, (const unsigned int *)(v4 + 112));
          common::milog::MiLogStream::~MiLogStream(&v536);
        }
        else
        {
          common::milog::MiLogStream::create(
            &v536,
            &common::milog::MiLogDefault::default_log_obj_,
            1u,
            "./src/player/quest/player_quest_comp.cpp",
            "execAction",
            6509);
          v227 = common::milog::MiLogStream::operator<<<char [8],(char *[8])0>(&v536, (const char (*)[8])"player:");
          if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
            __asan_report_load8(&this->player_);
          v228 = operator<<(v227, this->player_);
          v229 = common::milog::MiLogStream::operator<<<char [8],(char *[8])0>(v228, (const char (*)[8])" scene:");
          v230 = std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::operator*((const std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 224));
          v231 = common::milog::MiLogStream::operator<<<Scene,(Scene*)0>(v229, v230);
          v232 = common::milog::MiLogStream::operator<<<char [17],(char *[17])0>(
                   v231,
                   (const char (*)[17])" height_area_id:");
          v233 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                   v232,
                   (const unsigned int *)(v4 + 80));
          v234 = common::milog::MiLogStream::operator<<<char [18],(char *[18])0>(
                   v233,
                   (const char (*)[18])" is_open_weather:");
          common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v234, (const unsigned int *)(v4 + 96));
          common::milog::MiLogStream::~MiLogStream(&v536);
          if ( *(_DWORD *)(v4 + 96) )
          {
            v237 = (unsigned __int64)std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 224));
            if ( *(_BYTE *)((v237 >> 3) + 0x7FFF8000) )
              v237 = __asan_report_load8(v237);
            v238 = *(_QWORD *)v237 + 360LL;
            if ( *(_BYTE *)((v238 >> 3) + 0x7FFF8000) )
              v237 = __asan_report_load8(*(_QWORD *)v237 + 360LL);
            (*(void (__fastcall **)(unsigned __int64, unsigned __int64, _QWORD))v238)(
              v4 + 256,
              v237,
              *(unsigned int *)(v4 + 80));
            std::shared_ptr<WeatherArea>::~shared_ptr((std::shared_ptr<WeatherArea> *const)(v4 + 256));
          }
          else
          {
            v235 = (unsigned __int64)std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 224));
            if ( *(_BYTE *)((v235 >> 3) + 0x7FFF8000) )
              v235 = __asan_report_load8(v235);
            v236 = *(_QWORD *)v235 + 368LL;
            if ( *(_BYTE *)((v236 >> 3) + 0x7FFF8000) )
              v235 = __asan_report_load8(*(_QWORD *)v235 + 368LL);
            (*(void (__fastcall **)(unsigned __int64, _QWORD))v236)(v235, *(unsigned int *)(v4 + 80));
          }
        }
        std::shared_ptr<Scene>::~shared_ptr((std::shared_ptr<Scene> *const)(v4 + 224));
        goto LABEL_818;
      case QUEST_EXEC_ADD_QUEST_PROGRESS:
        *(_DWORD *)(v4 + 80) = 0;
        *(_DWORD *)(v4 + 96) = 0;
        if ( !common::tools::StringUtils::strVecToNum<0u,unsigned int,unsigned int &>(
                &exec->param,
                (unsigned int *)(v4 + 80),
                (unsigned int *)(v4 + 96),
                (unsigned int *)&exec->param) )
        {
          PlayerQuestComp::updateQuestContentProgress(
            this,
            QUEST_CONTENT_ADD_QUEST_PROGRESS,
            *(_DWORD *)(v4 + 80),
            UPDATE_ADD,
            *(_DWORD *)(v4 + 96));
          goto LABEL_818;
        }
        common::milog::MiLogStream::create(
          &v536,
          &common::milog::MiLogDefault::default_log_obj_,
          3u,
          "./src/player/quest/player_quest_comp.cpp",
          "execAction",
          6526);
        v239 = common::milog::MiLogStream::operator<<<char [25],(char *[25])0>(
                 &v536,
                 (const char (*)[25])"strVecToNum fail. param:");
        v240 = common::milog::MiLogStream::operator<<<std::string>(v239, &exec->param);
        v9 = common::milog::MiLogStream::operator<<<char [6],(char *[6])0>(v240, (const char (*)[6])" uid:");
        if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
          __asan_report_load8(&this->player_);
        goto LABEL_817;
      case QUEST_EXEC_NOTIFY_DAILY_TASK:
        *(_DWORD *)(v4 + 96) = 0;
        if ( !std::vector<std::string>::size(&exec->param) )
        {
          common::milog::MiLogStream::create(
            &v536,
            &common::milog::MiLogDefault::default_log_obj_,
            3u,
            "./src/player/quest/player_quest_comp.cpp",
            "execAction",
            6403);
          v177 = common::milog::MiLogStream::operator<<<char [15],(char *[15])0>(
                   &v536,
                   (const char (*)[15])"invalid param:");
          v178 = common::milog::MiLogStream::operator<<<std::string>(v177, &exec->param);
          v9 = common::milog::MiLogStream::operator<<<char [6],(char *[6])0>(v178, (const char (*)[6])" uid:");
          if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
            __asan_report_load8(&this->player_);
          goto LABEL_817;
        }
        v179 = std::vector<std::string>::operator[](&exec->param, 0LL);
        if ( common::tools::StringUtils::strToNum<unsigned int>(v179, (unsigned int *)(v4 + 96), 1) )
        {
          common::milog::MiLogStream::create(
            &v536,
            &common::milog::MiLogDefault::default_log_obj_,
            3u,
            "./src/player/quest/player_quest_comp.cpp",
            "execAction",
            6408);
          v180 = common::milog::MiLogStream::operator<<<char [27],(char *[27])0>(
                   &v536,
                   (const char (*)[27])"strVecToNum failed, param:");
          v181 = common::milog::MiLogStream::operator<<<std::string>(v180, &exec->param);
          v9 = common::milog::MiLogStream::operator<<<char [6],(char *[6])0>(v181, (const char (*)[6])" uid:");
          if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
            __asan_report_load8(&this->player_);
          goto LABEL_817;
        }
        PlayerQuestComp::findQuest((const PlayerQuestComp *const)(v4 + 256), (__int64)this, *(_DWORD *)(v4 + 144));
        if ( std::operator==<Quest>((const std::shared_ptr<Quest> *)(v4 + 256), 0LL) )
        {
          common::milog::MiLogStream::create(
            &v536,
            &common::milog::MiLogDefault::default_log_obj_,
            3u,
            "./src/player/quest/player_quest_comp.cpp",
            "execAction",
            6415);
          v182 = common::milog::MiLogStream::operator<<<char [57],(char *[57])0>(
                   &v536,
                   (const char (*)[57])"QUEST_EXEC_NOTIFY_DAILY_TASK find quest failed,quest id:");
          common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v182, (const unsigned int *)(v4 + 144));
          common::milog::MiLogStream::~MiLogStream(&v536);
        }
        else
        {
          if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
            __asan_report_load8(&this->player_);
          DailyTaskComp = Player::getDailyTaskComp(this->player_);
          v184 = std::__shared_ptr_access<Quest,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Quest,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 256));
          v185 = Quest::getState(v184);
          PlayerDailyTaskComp::onQuestNotify(DailyTaskComp, *(_DWORD *)(v4 + 96), v185);
        }
LABEL_278:
        std::shared_ptr<Quest>::~shared_ptr((std::shared_ptr<Quest> *const)(v4 + 256));
        goto LABEL_818;
      case QUEST_EXEC_CREATE_PATTERN_GROUP:
        PlayerQuestComp::execCreatePatternGroup(this, exec, *(_DWORD *)(v4 + 128));
        goto LABEL_818;
      case QUEST_EXEC_REMOVE_PATTERN_GROUP:
        PlayerQuestComp::execRemovePatternGroup(this, exec, *(_DWORD *)(v4 + 128));
        goto LABEL_818;
      case QUEST_EXEC_REFRESH_GROUP_SUITE_RANDOM:
        if ( (unsigned __int8)PlayerQuestComp::checkAndPushQuestGroupAction(
                                this,
                                *(_DWORD *)(v4 + 128),
                                *(_DWORD *)(v4 + 144),
                                (data::QuestExec *)exec) != 1 )
          PlayerQuestComp::execRefreshGroupSuiteRandom(this, exec, *(_DWORD *)(v4 + 144));
        goto LABEL_818;
      case QUEST_EXEC_ACTIVE_ITEM_GIVING:
        *(_DWORD *)(v4 + 96) = 0;
        if ( common::tools::StringUtils::strVecToNum<0u,unsigned int>(&exec->param, (unsigned int *)(v4 + 96)) )
        {
          common::milog::MiLogStream::create(
            &v536,
            &common::milog::MiLogDefault::default_log_obj_,
            3u,
            "./src/player/quest/player_quest_comp.cpp",
            "execAction",
            6547);
          v241 = common::milog::MiLogStream::operator<<<char [25],(char *[25])0>(
                   &v536,
                   (const char (*)[25])"strVecToNum fail. param:");
          v242 = common::milog::MiLogStream::operator<<<std::string>(v241, &exec->param);
          v9 = common::milog::MiLogStream::operator<<<char [6],(char *[6])0>(v242, (const char (*)[6])" uid:");
          if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
            __asan_report_load8(&this->player_);
          goto LABEL_817;
        }
        if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
          __asan_report_load8(&this->player_);
        GivingComp = Player::getGivingComp(this->player_);
        PlayerGivingComp::activeItemGiving(GivingComp, *(_DWORD *)(v4 + 96));
        goto LABEL_818;
      case QUEST_EXEC_DEL_ALL_SPECIFIC_PACK_ITEM:
        if ( !std::vector<std::string>::size(&exec->param) )
        {
          common::milog::MiLogStream::create(
            &v536,
            &common::milog::MiLogDefault::default_log_obj_,
            3u,
            "./src/player/quest/player_quest_comp.cpp",
            "execAction",
            6047);
          v9 = common::milog::MiLogStream::operator<<<char [18],(char *[18])0>(
                 &v536,
                 (const char (*)[18])"empty param, uid:");
          if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
            __asan_report_load8(&this->player_);
          goto LABEL_817;
        }
        std::vector<unsigned int>::vector((std::vector<unsigned int> *const)(v4 + 288));
        std::allocator<char>::allocator(v4 + 48);
        std::string::basic_string<std::allocator<char>>(
          (std::string *const)&v536,
          ",",
          (const std::allocator<char> *)(v4 + 48));
        v40 = std::vector<std::string>::operator[](&exec->param, 0LL);
        v41 = common::tools::StringUtils::splitToList<unsigned int>(
                v40,
                (const std::string *)&v536,
                (std::vector<unsigned int> *)(v4 + 288),
                0) != 0;
        std::string::~string(&v536);
        std::allocator<char>::~allocator(v4 + 48);
        if ( v41 )
        {
          common::milog::MiLogStream::create(
            &v536,
            &common::milog::MiLogDefault::default_log_obj_,
            3u,
            "./src/player/quest/player_quest_comp.cpp",
            "execAction",
            6053);
          v42 = common::milog::MiLogStream::operator<<<char [15],(char *[15])0>(
                  &v536,
                  (const char (*)[15])"invalid param:");
          v43 = common::milog::MiLogStream::operator<<<std::string>(v42, &exec->param);
          v25 = common::milog::MiLogStream::operator<<<char [6],(char *[6])0>(v43, (const char (*)[6])" uid:");
          if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
            __asan_report_load8(&this->player_);
          goto LABEL_63;
        }
        std::vector<ItemParam>::vector((std::vector<ItemParam> *const)(v4 + 352));
        __for_range_0 = (std::vector<unsigned int> *)(v4 + 288);
        *(std::vector<unsigned int>::iterator *)(v4 + 160) = std::vector<unsigned int>::begin((std::vector<unsigned int> *const)(v4 + 288));
        *(std::vector<unsigned int>::iterator *)(v4 + 192) = std::vector<unsigned int>::end(__for_range_0);
        while ( __gnu_cxx::operator!=<unsigned int *,std::vector<unsigned int>>(
                  (const __gnu_cxx::__normal_iterator<unsigned int*,std::vector<unsigned int> > *)(v4 + 160),
                  (const __gnu_cxx::__normal_iterator<unsigned int*,std::vector<unsigned int> > *)(v4 + 192)) )
        {
          v44 = __gnu_cxx::__normal_iterator<unsigned int *,std::vector<unsigned int>>::operator*((const __gnu_cxx::__normal_iterator<unsigned int*,std::vector<unsigned int> > *const)(v4 + 160));
          v45 = v44;
          if ( *(_BYTE *)(((unsigned __int64)v44 >> 3) + 0x7FFF8000) != 0
            && (char)(((unsigned __int8)v44 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)v44 >> 3) + 0x7FFF8000) )
          {
            __asan_report_load4(v44);
          }
          item_id = *v45;
          *(_DWORD *)(v4 + 256) = 0;
          *(_DWORD *)(v4 + 260) = 0;
          *(_DWORD *)(v4 + 264) = 0;
          *(_DWORD *)(v4 + 268) = 0;
          *(_DWORD *)(v4 + 256) = item_id;
          if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
            __asan_report_load8(&this->player_);
          v46 = Player::getItemComp(this->player_);
          *(_DWORD *)(v4 + 260) = PlayerItemComp::getPackMaterialCount(v46, item_id);
          if ( *(_DWORD *)(v4 + 260) )
            std::vector<ItemParam>::push_back(
              (std::vector<ItemParam> *const)(v4 + 352),
              (const std::vector<ItemParam>::value_type *)(v4 + 256));
          __gnu_cxx::__normal_iterator<unsigned int *,std::vector<unsigned int>>::operator++((__gnu_cxx::__normal_iterator<unsigned int*,std::vector<unsigned int> > *const)(v4 + 160));
        }
        SubItemReason::SubItemReason((SubItemReason *const)(v4 + 192), ACTION_REASON_QUEST_ACTION);
        if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
          __asan_report_load8(&this->player_);
        v47 = Player::getItemComp(this->player_);
        if ( PlayerItemComp::subItemBatch(
               v47,
               (const std::vector<ItemParam> *)(v4 + 352),
               (const SubItemReason *)(v4 + 192)) )
        {
          common::milog::MiLogStream::create(
            &v536,
            &common::milog::MiLogDefault::default_log_obj_,
            3u,
            "./src/player/quest/player_quest_comp.cpp",
            "execAction",
            6072);
          v48 = common::milog::MiLogStream::operator<<<char [25],(char *[25])0>(
                  &v536,
                  (const char (*)[25])"subItemBatch fails, uid:");
          if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
            __asan_report_load8(&this->player_);
          *(_DWORD *)(v4 + 112) = Player::getUid(this->player_);
          common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v48, (const unsigned int *)(v4 + 112));
          common::milog::MiLogStream::~MiLogStream(&v536);
        }
LABEL_55:
        std::vector<ItemParam>::~vector((std::vector<ItemParam> *const)(v4 + 352));
        goto LABEL_774;
      case QUEST_EXEC_ROLLBACK_PARENT_QUEST:
        PlayerQuestComp::tryResetParentQuest(this, *(_DWORD *)(v4 + 128), 1);
        goto LABEL_818;
      case QUEST_EXEC_LOCK_AVATAR_TEAM:
        std::vector<unsigned int>::vector((std::vector<unsigned int> *const)(v4 + 352));
        __for_range_1 = &exec->param;
        __for_begin_0._M_current = std::vector<std::string>::begin(&exec->param)._M_current;
        __for_end_0._M_current = std::vector<std::string>::end(__for_range_1)._M_current;
        while ( __gnu_cxx::operator!=<std::string const*,std::vector<std::string>>(&__for_begin_0, &__for_end_0) )
        {
          s = __gnu_cxx::__normal_iterator<std::string const*,std::vector<std::string>>::operator*(&__for_begin_0);
          if ( !(unsigned __int8)std::string::empty(s) )
          {
            *(_DWORD *)(v4 + 112) = 0;
            if ( !common::tools::StringUtils::strToNum<unsigned int>(s, (unsigned int *)(v4 + 112), 1) )
            {
              M_current = std::vector<unsigned int>::end((std::vector<unsigned int> *const)(v4 + 352))._M_current;
              v248._M_current = std::vector<unsigned int>::begin((std::vector<unsigned int> *const)(v4 + 352))._M_current;
              *(__gnu_cxx::__normal_iterator<unsigned int*,std::vector<unsigned int> > *)(v4 + 192) = std::find<__gnu_cxx::__normal_iterator<unsigned int *,std::vector<unsigned int>>,unsigned int>(v248, (__gnu_cxx::__normal_iterator<unsigned int*,std::vector<unsigned int> >)M_current, (const unsigned int *)(v4 + 112));
              *(std::vector<unsigned int>::iterator *)(v4 + 160) = std::vector<unsigned int>::end((std::vector<unsigned int> *const)(v4 + 352));
              if ( !__gnu_cxx::operator!=<unsigned int *,std::vector<unsigned int>>(
                      (const __gnu_cxx::__normal_iterator<unsigned int*,std::vector<unsigned int> > *)(v4 + 160),
                      (const __gnu_cxx::__normal_iterator<unsigned int*,std::vector<unsigned int> > *)(v4 + 192)) )
                std::vector<unsigned int>::push_back(
                  (std::vector<unsigned int> *const)(v4 + 352),
                  (const std::vector<unsigned int>::value_type *)(v4 + 112));
            }
          }
          __gnu_cxx::__normal_iterator<std::string const*,std::vector<std::string>>::operator++(&__for_begin_0);
        }
        if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
          __asan_report_load8(&this->player_);
        v249 = Player::getAvatarComp(this->player_);
        PlayerAvatarComp::lockTeamAvatarByQuest(
          v249,
          (const std::vector<unsigned int> *)(v4 + 352),
          CHANGE_SCENE_TEAM_REASON_QUEST);
        PlayerQuestComp::findParentQuest((const PlayerQuestComp *const)(v4 + 256), (__int64)this, *(_DWORD *)(v4 + 128));
        if ( std::operator!=<ParentQuest>(0LL, (const std::shared_ptr<ParentQuest> *)(v4 + 256)) )
        {
          v250 = std::__shared_ptr_access<ParentQuest,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<ParentQuest,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 256));
          ParentQuest::setIsLockTeam(v250, 1);
        }
        std::shared_ptr<ParentQuest>::~shared_ptr((std::shared_ptr<ParentQuest> *const)(v4 + 256));
        std::vector<unsigned int>::~vector((std::vector<unsigned int> *const)(v4 + 352));
        goto LABEL_818;
      case QUEST_EXEC_UNLOCK_AVATAR_TEAM:
        if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
          __asan_report_load8(&this->player_);
        v251 = Player::getAvatarComp(this->player_);
        PlayerAvatarComp::unlockTeamAvatarByQuest(v251, CHANGE_SCENE_TEAM_REASON_QUEST);
        PlayerQuestComp::findParentQuest((const PlayerQuestComp *const)(v4 + 256), (__int64)this, *(_DWORD *)(v4 + 128));
        if ( std::operator!=<ParentQuest>(0LL, (const std::shared_ptr<ParentQuest> *)(v4 + 256)) )
        {
          v252 = std::__shared_ptr_access<ParentQuest,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<ParentQuest,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 256));
          ParentQuest::setIsLockTeam(v252, 0);
        }
        goto LABEL_553;
      case QUEST_EXEC_UPDATE_PARENT_QUEST_REWARD_INDEX:
        if ( std::vector<std::string>::empty(&exec->param) )
        {
          common::milog::MiLogStream::create(
            &v536,
            &common::milog::MiLogDefault::default_log_obj_,
            3u,
            "./src/player/quest/player_quest_comp.cpp",
            "execAction",
            6613);
          common::milog::MiLogStream::operator<<<char [19],(char *[19])0>(
            &v536,
            (const char (*)[19])"param vec is empty");
          common::milog::MiLogStream::~MiLogStream(&v536);
          goto LABEL_818;
        }
        PlayerQuestComp::findParentQuest((const PlayerQuestComp *const)(v4 + 256), (__int64)this, *(_DWORD *)(v4 + 128));
        if ( std::operator==<ParentQuest>(0LL, (const std::shared_ptr<ParentQuest> *)(v4 + 256)) )
        {
          common::milog::MiLogStream::create(
            &v536,
            &common::milog::MiLogDefault::default_log_obj_,
            3u,
            "./src/player/quest/player_quest_comp.cpp",
            "execAction",
            6619);
          v253 = common::milog::MiLogStream::operator<<<char [38],(char *[38])0>(
                   &v536,
                   (const char (*)[38])"parent_quest_ptr is nullptr, quest_id");
          common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v253, (const unsigned int *)(v4 + 144));
          common::milog::MiLogStream::~MiLogStream(&v536);
        }
        else
        {
          *(_DWORD *)(v4 + 96) = 0;
          v254 = std::vector<std::string>::operator[](&exec->param, 0LL);
          if ( common::tools::StringUtils::strToNum<unsigned int>(v254, (unsigned int *)(v4 + 96), 1) )
          {
            common::milog::MiLogStream::create(
              &v536,
              &common::milog::MiLogDefault::default_log_obj_,
              3u,
              "./src/player/quest/player_quest_comp.cpp",
              "execAction",
              6625);
            v255 = common::milog::MiLogStream::operator<<<char [17],(char *[17])0>(
                     &v536,
                     (const char (*)[17])"param not valid:");
            v256 = std::vector<std::string>::operator[](&exec->param, 0LL);
            common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v255, v256);
            common::milog::MiLogStream::~MiLogStream(&v536);
          }
          else
          {
            v257 = std::__shared_ptr_access<ParentQuest,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<ParentQuest,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 256));
            if ( ParentQuest::setRewardIndex(v257, *(_DWORD *)(v4 + 96)) )
            {
              common::milog::MiLogStream::create(
                &v536,
                &common::milog::MiLogDefault::default_log_obj_,
                4u,
                "./src/player/quest/player_quest_comp.cpp",
                "execAction",
                6630);
              v258 = common::milog::MiLogStream::operator<<<char [27],(char *[27])0>(
                       &v536,
                       (const char (*)[27])off_2516A920);
              v259 = std::__shared_ptr_access<ParentQuest,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<ParentQuest,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 256));
              *(_DWORD *)(v4 + 112) = ParentQuest::getParentQuestId(v259);
              common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                v258,
                (const unsigned int *)(v4 + 112));
              common::milog::MiLogStream::~MiLogStream(&v536);
            }
          }
        }
        goto LABEL_553;
      case QUEST_EXEC_SET_DAILY_TASK_VAR:
        PlayerQuestComp::execSetDailyTaskVar(this, *(_DWORD *)(v4 + 144), &exec->param);
        goto LABEL_818;
      case QUEST_EXEC_INC_DAILY_TASK_VAR:
        PlayerQuestComp::execIncDailyTaskVar(this, *(_DWORD *)(v4 + 144), &exec->param);
        goto LABEL_818;
      case QUEST_EXEC_DEC_DAILY_TASK_VAR:
        PlayerQuestComp::execDecDailyTaskVar(this, *(_DWORD *)(v4 + 144), &exec->param);
        goto LABEL_818;
      case QUEST_EXEC_ACTIVE_ACTIVITY_COND_STATE:
        if ( std::vector<std::string>::size(&exec->param) <= 1 )
        {
          common::milog::MiLogStream::create(
            &v536,
            &common::milog::MiLogDefault::default_log_obj_,
            3u,
            "./src/player/quest/player_quest_comp.cpp",
            "execAction",
            6638);
          common::milog::MiLogStream::operator<<<char [25],(char *[25])0>(
            &v536,
            (const char (*)[25])"param vec is less than 2");
          common::milog::MiLogStream::~MiLogStream(&v536);
          goto LABEL_818;
        }
        *(_DWORD *)(v4 + 96) = 0;
        v260 = std::vector<std::string>::operator[](&exec->param, 0LL);
        if ( common::tools::StringUtils::strToNum<unsigned int>(v260, (unsigned int *)(v4 + 96), 1) )
        {
          common::milog::MiLogStream::create(
            &v536,
            &common::milog::MiLogDefault::default_log_obj_,
            3u,
            "./src/player/quest/player_quest_comp.cpp",
            "execAction",
            6644);
          v261 = common::milog::MiLogStream::operator<<<char [17],(char *[17])0>(
                   &v536,
                   (const char (*)[17])"param not valid:");
          v262 = std::vector<std::string>::operator[](&exec->param, 0LL);
          common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v261, v262);
          common::milog::MiLogStream::~MiLogStream(&v536);
          goto LABEL_818;
        }
        *(_DWORD *)(v4 + 112) = 0;
        v263 = std::vector<std::string>::operator[](&exec->param, 1uLL);
        if ( common::tools::StringUtils::strToNum<unsigned int>(v263, (unsigned int *)(v4 + 112), 1) )
        {
          common::milog::MiLogStream::create(
            &v536,
            &common::milog::MiLogDefault::default_log_obj_,
            3u,
            "./src/player/quest/player_quest_comp.cpp",
            "execAction",
            6650);
          v266 = common::milog::MiLogStream::operator<<<char [17],(char *[17])0>(
                   &v536,
                   (const char (*)[17])"param not valid:");
          v267 = std::vector<std::string>::operator[](&exec->param, 1uLL);
          common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v266, v267);
          common::milog::MiLogStream::~MiLogStream(&v536);
          goto LABEL_818;
        }
        *(_BYTE *)(v4 + 48) = 1;
        common::tools::perf::make_shared<ChangeCondStateEvent,unsigned int &,unsigned int &,bool>(
          (unsigned int *)(v4 + 256),
          (unsigned int *)(v4 + 96),
          (bool *)(v4 + 112),
          (unsigned int *)(v4 + 48),
          v264,
          v265);
        std::shared_ptr<BaseEvent>::shared_ptr<ChangeCondStateEvent,void>(
          (std::shared_ptr<BaseEvent> *const)(v4 + 224),
          (std::shared_ptr<ChangeCondStateEvent> *)(v4 + 256));
        std::shared_ptr<ChangeCondStateEvent>::~shared_ptr((std::shared_ptr<ChangeCondStateEvent> *const)(v4 + 256));
        if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
          __asan_report_load8(&this->player_);
        goto LABEL_424;
      case QUEST_EXEC_INACTIVE_ACTIVITY_COND_STATE:
        if ( std::vector<std::string>::size(&exec->param) > 1 )
        {
          *(_DWORD *)(v4 + 96) = 0;
          v269 = std::vector<std::string>::operator[](&exec->param, 0LL);
          if ( common::tools::StringUtils::strToNum<unsigned int>(v269, (unsigned int *)(v4 + 96), 1) )
          {
            common::milog::MiLogStream::create(
              &v536,
              &common::milog::MiLogDefault::default_log_obj_,
              3u,
              "./src/player/quest/player_quest_comp.cpp",
              "execAction",
              6670);
            v270 = common::milog::MiLogStream::operator<<<char [17],(char *[17])0>(
                     &v536,
                     (const char (*)[17])"param not valid:");
            v271 = std::vector<std::string>::operator[](&exec->param, 0LL);
            common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v270, v271);
            common::milog::MiLogStream::~MiLogStream(&v536);
          }
          else
          {
            *(_DWORD *)(v4 + 112) = 0;
            v272 = std::vector<std::string>::operator[](&exec->param, 1uLL);
            if ( common::tools::StringUtils::strToNum<unsigned int>(v272, (unsigned int *)(v4 + 112), 1) )
            {
              common::milog::MiLogStream::create(
                &v536,
                &common::milog::MiLogDefault::default_log_obj_,
                3u,
                "./src/player/quest/player_quest_comp.cpp",
                "execAction",
                6676);
              v275 = common::milog::MiLogStream::operator<<<char [17],(char *[17])0>(
                       &v536,
                       (const char (*)[17])"param not valid:");
              v276 = std::vector<std::string>::operator[](&exec->param, 1uLL);
              common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v275, v276);
              common::milog::MiLogStream::~MiLogStream(&v536);
            }
            else
            {
              *(_BYTE *)(v4 + 48) = 0;
              common::tools::perf::make_shared<ChangeCondStateEvent,unsigned int &,unsigned int &,bool>(
                (unsigned int *)(v4 + 256),
                (unsigned int *)(v4 + 96),
                (bool *)(v4 + 112),
                (unsigned int *)(v4 + 48),
                v273,
                v274);
              std::shared_ptr<BaseEvent>::shared_ptr<ChangeCondStateEvent,void>(
                (std::shared_ptr<BaseEvent> *const)(v4 + 224),
                (std::shared_ptr<ChangeCondStateEvent> *)(v4 + 256));
              std::shared_ptr<ChangeCondStateEvent>::~shared_ptr((std::shared_ptr<ChangeCondStateEvent> *const)(v4 + 256));
              if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
                __asan_report_load8(&this->player_);
LABEL_424:
              EventComp = Player::getEventComp(this->player_);
              std::shared_ptr<BaseEvent>::shared_ptr(
                (std::shared_ptr<BaseEvent> *const)(v4 + 256),
                (const std::shared_ptr<BaseEvent> *)(v4 + 224));
              PlayerEventComp::notifyEvent(EventComp, (BaseEventPtr *)(v4 + 256));
              std::shared_ptr<BaseEvent>::~shared_ptr((std::shared_ptr<BaseEvent> *const)(v4 + 256));
              std::shared_ptr<BaseEvent>::~shared_ptr((std::shared_ptr<BaseEvent> *const)(v4 + 224));
            }
          }
        }
        else
        {
          common::milog::MiLogStream::create(
            &v536,
            &common::milog::MiLogDefault::default_log_obj_,
            3u,
            "./src/player/quest/player_quest_comp.cpp",
            "execAction",
            6664);
          common::milog::MiLogStream::operator<<<char [25],(char *[25])0>(
            &v536,
            (const char (*)[25])"param vec is less than 2");
          common::milog::MiLogStream::~MiLogStream(&v536);
        }
        goto LABEL_818;
      case QUEST_EXEC_ADD_CUR_AVATAR_ENERGY:
        if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
          __asan_report_load8(&this->player_);
        Player::getCurAvatar((Player *const)(v4 + 224));
        if ( std::operator!=<Avatar>((const std::shared_ptr<Avatar> *)(v4 + 224), 0LL) )
        {
          v277 = std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 224));
          std::shared_ptr<FightPropNtfParam>::shared_ptr((std::shared_ptr<FightPropNtfParam> *const)(v4 + 256), 0LL);
          v278 = std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 224));
          MaxEnergy = Creature::getMaxEnergy(v278);
          Creature::changeCurEnergy(v277, MaxEnergy, 1, (FightPropNtfParamPtr *)(v4 + 256));
          std::shared_ptr<FightPropNtfParam>::~shared_ptr((std::shared_ptr<FightPropNtfParam> *const)(v4 + 256));
        }
        std::shared_ptr<Avatar>::~shared_ptr((std::shared_ptr<Avatar> *const)(v4 + 224));
        goto LABEL_818;
      case QUEST_EXEC_START_BARGAIN:
        common::milog::MiLogStream::create(
          &v536,
          &common::milog::MiLogDefault::default_log_obj_,
          1u,
          "./src/player/quest/player_quest_comp.cpp",
          "execAction",
          6711);
        common::milog::MiLogStream::operator<<<char [29],(char *[29])0>(
          &v536,
          (const char (*)[29])"[Bargain] exec start_bargain");
        common::milog::MiLogStream::~MiLogStream(&v536);
        if ( std::vector<std::string>::empty(&exec->param) )
        {
          common::milog::MiLogStream::create(
            &v536,
            &common::milog::MiLogDefault::default_log_obj_,
            3u,
            "./src/player/quest/player_quest_comp.cpp",
            "execAction",
            6714);
          common::milog::MiLogStream::operator<<<char [19],(char *[19])0>(
            &v536,
            (const char (*)[19])"param vec is empty");
          common::milog::MiLogStream::~MiLogStream(&v536);
        }
        else
        {
          *(_DWORD *)(v4 + 112) = 0;
          v280 = std::vector<std::string>::operator[](&exec->param, 0LL);
          if ( common::tools::StringUtils::strToNum<unsigned int>(v280, (unsigned int *)(v4 + 112), 1) )
          {
            common::milog::MiLogStream::create(
              &v536,
              &common::milog::MiLogDefault::default_log_obj_,
              3u,
              "./src/player/quest/player_quest_comp.cpp",
              "execAction",
              6720);
            v281 = common::milog::MiLogStream::operator<<<char [17],(char *[17])0>(
                     &v536,
                     (const char (*)[17])"param not valid:");
            v282 = std::vector<std::string>::operator[](&exec->param, 0LL);
            common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v281, v282);
            common::milog::MiLogStream::~MiLogStream(&v536);
          }
          else
          {
            if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
              __asan_report_load8(&this->player_);
            TalkComp = Player::getTalkComp(this->player_);
            if ( PlayerTalkComp::startBargain(TalkComp, *(_DWORD *)(v4 + 112), *(_DWORD *)(v4 + 144)) )
            {
              common::milog::MiLogStream::create(
                &v536,
                &common::milog::MiLogDefault::default_log_obj_,
                3u,
                "./src/player/quest/player_quest_comp.cpp",
                "execAction",
                6726);
              v284 = common::milog::MiLogStream::operator<<<char [33],(char *[33])0>(
                       &v536,
                       (const char (*)[33])"[Bargain] start_bargain failed: ");
              common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                v284,
                (const unsigned int *)(v4 + 112));
              common::milog::MiLogStream::~MiLogStream(&v536);
            }
          }
        }
        goto LABEL_818;
      case QUEST_EXEC_STOP_BARGAIN:
        if ( std::vector<std::string>::empty(&exec->param) )
        {
          common::milog::MiLogStream::create(
            &v536,
            &common::milog::MiLogDefault::default_log_obj_,
            3u,
            "./src/player/quest/player_quest_comp.cpp",
            "execAction",
            6734);
          common::milog::MiLogStream::operator<<<char [19],(char *[19])0>(
            &v536,
            (const char (*)[19])"param vec is empty");
          common::milog::MiLogStream::~MiLogStream(&v536);
        }
        else
        {
          *(_DWORD *)(v4 + 112) = 0;
          v285 = std::vector<std::string>::operator[](&exec->param, 0LL);
          if ( common::tools::StringUtils::strToNum<unsigned int>(v285, (unsigned int *)(v4 + 112), 1) )
          {
            common::milog::MiLogStream::create(
              &v536,
              &common::milog::MiLogDefault::default_log_obj_,
              3u,
              "./src/player/quest/player_quest_comp.cpp",
              "execAction",
              6740);
            v286 = common::milog::MiLogStream::operator<<<char [17],(char *[17])0>(
                     &v536,
                     (const char (*)[17])"param not valid:");
            v287 = std::vector<std::string>::operator[](&exec->param, 0LL);
            common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v286, v287);
            common::milog::MiLogStream::~MiLogStream(&v536);
          }
          else
          {
            if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
              __asan_report_load8(&this->player_);
            v288 = Player::getTalkComp(this->player_);
            if ( PlayerTalkComp::stopBargain(v288, *(_DWORD *)(v4 + 112)) )
            {
              common::milog::MiLogStream::create(
                &v536,
                &common::milog::MiLogDefault::default_log_obj_,
                1u,
                "./src/player/quest/player_quest_comp.cpp",
                "execAction",
                6747);
              v289 = common::milog::MiLogStream::operator<<<char [33],(char *[33])0>(
                       &v536,
                       (const char (*)[33])"[Bargain] start_bargain failed: ");
              common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                v289,
                (const unsigned int *)(v4 + 112));
              common::milog::MiLogStream::~MiLogStream(&v536);
            }
          }
        }
        goto LABEL_818;
      case QUEST_EXEC_SET_QUEST_GLOBAL_VAR:
      case QUEST_EXEC_INC_QUEST_GLOBAL_VAR:
      case QUEST_EXEC_DEC_QUEST_GLOBAL_VAR:
        if ( std::vector<std::string>::empty(&exec->param) )
        {
          common::milog::MiLogStream::create(
            &v536,
            &common::milog::MiLogDefault::default_log_obj_,
            3u,
            "./src/player/quest/player_quest_comp.cpp",
            "execAction",
            6757);
          common::milog::MiLogStream::operator<<<char [19],(char *[19])0>(
            &v536,
            (const char (*)[19])"param vec is empty");
          common::milog::MiLogStream::~MiLogStream(&v536);
        }
        else
        {
          *(_DWORD *)(v4 + 96) = 0;
          *(_DWORD *)(v4 + 112) = 0;
          if ( common::tools::StringUtils::strVecToNum<0u,unsigned int,int &>(
                 &exec->param,
                 (unsigned int *)(v4 + 96),
                 (int *)(v4 + 112),
                 (int *)&exec->param) )
          {
            common::milog::MiLogStream::create(
              &v536,
              &common::milog::MiLogDefault::default_log_obj_,
              3u,
              "./src/player/quest/player_quest_comp.cpp",
              "execAction",
              6764);
            v290 = common::milog::MiLogStream::operator<<<char [17],(char *[17])0>(
                     &v536,
                     (const char (*)[17])"param not valid:");
            common::milog::MiLogStream::operator<<<std::string>(v290, &exec->param);
            common::milog::MiLogStream::~MiLogStream(&v536);
          }
          else
          {
            set_value = PlayerQuestComp::getGlobalVarValue(this, *(_DWORD *)(v4 + 96));
            if ( *(_BYTE *)(((unsigned __int64)&exec->type >> 3) + 0x7FFF8000) != 0
              && *(_BYTE *)(((unsigned __int64)&exec->type >> 3) + 0x7FFF8000) <= 3 )
            {
              __asan_report_load4(&exec->type);
            }
            if ( exec->type == QUEST_EXEC_INC_QUEST_GLOBAL_VAR )
            {
              set_value += *(_DWORD *)(v4 + 112);
            }
            else
            {
              if ( *(_BYTE *)(((unsigned __int64)&exec->type >> 3) + 0x7FFF8000) != 0
                && *(_BYTE *)(((unsigned __int64)&exec->type >> 3) + 0x7FFF8000) <= 3 )
              {
                __asan_report_load4(&exec->type);
              }
              if ( exec->type == QUEST_EXEC_SET_QUEST_GLOBAL_VAR )
              {
                set_value = *(_DWORD *)(v4 + 112);
              }
              else
              {
                if ( *(_BYTE *)(((unsigned __int64)&exec->type >> 3) + 0x7FFF8000) != 0
                  && *(_BYTE *)(((unsigned __int64)&exec->type >> 3) + 0x7FFF8000) <= 3 )
                {
                  __asan_report_load4(&exec->type);
                }
                if ( exec->type == QUEST_EXEC_DEC_QUEST_GLOBAL_VAR )
                  set_value -= *(_DWORD *)(v4 + 112);
              }
            }
            PlayerQuestComp::setGlobalVarValue(this, *(_DWORD *)(v4 + 96), set_value, 1);
          }
        }
        goto LABEL_818;
      case QUEST_EXEC_REGISTER_DYNAMIC_GROUP:
        PlayerQuestComp::execRefreshDynamicGroupsAndSetInitSuite(this, exec, *(_DWORD *)(v4 + 144));
        goto LABEL_818;
      case QUEST_EXEC_UNREGISTER_DYNAMIC_GROUP:
        if ( std::vector<std::string>::empty(&exec->param) )
        {
          common::milog::MiLogStream::create(
            &v536,
            &common::milog::MiLogDefault::default_log_obj_,
            3u,
            "./src/player/quest/player_quest_comp.cpp",
            "execAction",
            6831);
          common::milog::MiLogStream::operator<<<char [19],(char *[19])0>(
            &v536,
            (const char (*)[19])"param vec is empty");
          common::milog::MiLogStream::~MiLogStream(&v536);
          goto LABEL_818;
        }
        std::vector<unsigned int>::vector((std::vector<unsigned int> *const)(v4 + 352));
        std::allocator<char>::allocator(v4 + 48);
        std::string::basic_string<std::allocator<char>>(
          (std::string *const)&v536,
          ",",
          (const std::allocator<char> *)(v4 + 48));
        v309 = std::vector<std::string>::operator[](&exec->param, 0LL);
        v310 = common::tools::StringUtils::splitToList<unsigned int>(
                 v309,
                 (const std::string *)&v536,
                 (std::vector<unsigned int> *)(v4 + 352),
                 1) != 0;
        std::string::~string(&v536);
        std::allocator<char>::~allocator(v4 + 48);
        if ( v310 )
        {
          common::milog::MiLogStream::create(
            &v536,
            &common::milog::MiLogDefault::default_log_obj_,
            3u,
            "./src/player/quest/player_quest_comp.cpp",
            "execAction",
            6837);
          v311 = common::milog::MiLogStream::operator<<<char [15],(char *[15])0>(
                   &v536,
                   (const char (*)[15])"invalid param:");
          v312 = std::vector<std::string>::operator[](&exec->param, 0LL);
          v313 = common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v311, v312);
          v60 = common::milog::MiLogStream::operator<<<char [6],(char *[6])0>(v313, (const char (*)[6])" uid:");
          if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
            __asan_report_load8(&this->player_);
          goto LABEL_511;
        }
        if ( std::vector<unsigned int>::empty((const std::vector<unsigned int> *const)(v4 + 352)) )
        {
          common::milog::MiLogStream::create(
            &v536,
            &common::milog::MiLogDefault::default_log_obj_,
            3u,
            "./src/player/quest/player_quest_comp.cpp",
            "execAction",
            6842);
          v314 = common::milog::MiLogStream::operator<<<char [33],(char *[33])0>(
                   &v536,
                   (const char (*)[33])"group_id_vec is empty, quest_id:");
          v315 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                   v314,
                   (const unsigned int *)(v4 + 144));
          v60 = common::milog::MiLogStream::operator<<<char [6],(char *[6])0>(v315, (const char (*)[6])" uid:");
          if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
            __asan_report_load8(&this->player_);
          goto LABEL_511;
        }
        is_force_unload = 1;
        if ( std::vector<std::string>::size(&exec->param) > 1 )
        {
          *(_DWORD *)(v4 + 112) = 0;
          v316 = std::vector<std::string>::operator[](&exec->param, 1uLL);
          if ( !common::tools::StringUtils::strToNum<unsigned int>(v316, (unsigned int *)(v4 + 112), 1) )
            is_force_unload = *(_DWORD *)(v4 + 112) == 0;
        }
        ServiceBox::findService<GameserverService>();
        GameserverService::getConfig((GameserverService *const)(v4 + 256));
        p_lua_config_mgr = &std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 256))->design_config.lua_config_mgr;
        v318 = std::vector<unsigned int>::operator[]((std::vector<unsigned int> *const)(v4 + 352), 0LL);
        v319 = v318;
        if ( *(_BYTE *)(((unsigned __int64)v318 >> 3) + 0x7FFF8000) != 0
          && (char)(((unsigned __int8)v318 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)v318 >> 3) + 0x7FFF8000) )
        {
          __asan_report_load4(v318);
        }
        *(_DWORD *)(v4 + 96) = LuaConfigMgr::getSceneIdByGroupId(p_lua_config_mgr, *v319);
        std::shared_ptr<Config>::~shared_ptr((std::shared_ptr<Config> *const)(v4 + 256));
        if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
          __asan_report_load8(&this->player_);
        v320 = (unsigned int)Player::getSceneComp(this->player_);
        PlayerSceneComp::getPersonalScene((PlayerSceneComp *const)(v4 + 256), v320);
        if ( std::operator==<Scene>(0LL, (const std::shared_ptr<Scene> *)(v4 + 256)) )
        {
          common::milog::MiLogStream::create(
            &v536,
            &common::milog::MiLogDefault::default_log_obj_,
            3u,
            "./src/player/quest/player_quest_comp.cpp",
            "execAction",
            6860);
          v305 = common::milog::MiLogStream::operator<<<char [5],(char *[5])0>(&v536, (const char (*)[5])"uid:");
          if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
            __asan_report_load8(&this->player_);
          goto LABEL_526;
        }
        v324 = std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 256));
        BlockGroupComp = (unsigned __int64)Scene::getBlockGroupComp(v324);
        if ( *(_BYTE *)((BlockGroupComp >> 3) + 0x7FFF8000) )
          BlockGroupComp = __asan_report_load8(BlockGroupComp);
        v326 = *(_QWORD *)BlockGroupComp + 104LL;
        if ( *(_BYTE *)((v326 >> 3) + 0x7FFF8000) )
          BlockGroupComp = __asan_report_load8(*(_QWORD *)BlockGroupComp + 104LL);
        (*(void (__fastcall **)(unsigned __int64, unsigned __int64, bool))v326)(
          BlockGroupComp,
          v4 + 352,
          is_force_unload);
        goto LABEL_532;
      case QUEST_EXEC_SET_QUEST_VAR:
      case QUEST_EXEC_INC_QUEST_VAR:
      case QUEST_EXEC_DEC_QUEST_VAR:
        if ( std::vector<std::string>::empty(&exec->param) )
        {
          common::milog::MiLogStream::create(
            &v536,
            &common::milog::MiLogDefault::default_log_obj_,
            3u,
            "./src/player/quest/player_quest_comp.cpp",
            "execAction",
            6872);
          common::milog::MiLogStream::operator<<<char [19],(char *[19])0>(
            &v536,
            (const char (*)[19])"param vec is empty");
          common::milog::MiLogStream::~MiLogStream(&v536);
        }
        else
        {
          *(_DWORD *)(v4 + 96) = 0;
          *(_DWORD *)(v4 + 112) = 0;
          if ( common::tools::StringUtils::strVecToNum<0u,unsigned int,int &>(
                 &exec->param,
                 (unsigned int *)(v4 + 96),
                 (int *)(v4 + 112),
                 (int *)&exec->param) )
          {
            common::milog::MiLogStream::create(
              &v536,
              &common::milog::MiLogDefault::default_log_obj_,
              3u,
              "./src/player/quest/player_quest_comp.cpp",
              "execAction",
              6879);
            v327 = common::milog::MiLogStream::operator<<<char [17],(char *[17])0>(
                     &v536,
                     (const char (*)[17])"param not valid:");
            common::milog::MiLogStream::operator<<<std::string>(v327, &exec->param);
            common::milog::MiLogStream::~MiLogStream(&v536);
          }
          else
          {
            PlayerQuestComp::findParentQuest(
              (const PlayerQuestComp *const)(v4 + 256),
              (__int64)this,
              *(_DWORD *)(v4 + 128));
            if ( std::operator==<ParentQuest>(0LL, (const std::shared_ptr<ParentQuest> *)(v4 + 256)) )
            {
              common::milog::MiLogStream::create(
                &v536,
                &common::milog::MiLogDefault::default_log_obj_,
                3u,
                "./src/player/quest/player_quest_comp.cpp",
                "execAction",
                6885);
              v328 = common::milog::MiLogStream::operator<<<char [27],(char *[27])0>(
                       &v536,
                       (const char (*)[27])"parent_quest_ptr is null, ");
              common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                v328,
                (const unsigned int *)(v4 + 128));
              common::milog::MiLogStream::~MiLogStream(&v536);
            }
            else
            {
              v329 = std::__shared_ptr_access<ParentQuest,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<ParentQuest,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 256));
              set_value_0 = ParentQuest::getQuestVar(v329, *(_DWORD *)(v4 + 96));
              if ( *(_BYTE *)(((unsigned __int64)&exec->type >> 3) + 0x7FFF8000) != 0
                && *(_BYTE *)(((unsigned __int64)&exec->type >> 3) + 0x7FFF8000) <= 3 )
              {
                __asan_report_load4(&exec->type);
              }
              if ( exec->type == QUEST_EXEC_INC_QUEST_VAR )
              {
                set_value_0 += *(_DWORD *)(v4 + 112);
              }
              else
              {
                if ( *(_BYTE *)(((unsigned __int64)&exec->type >> 3) + 0x7FFF8000) != 0
                  && *(_BYTE *)(((unsigned __int64)&exec->type >> 3) + 0x7FFF8000) <= 3 )
                {
                  __asan_report_load4(&exec->type);
                }
                if ( exec->type == QUEST_EXEC_SET_QUEST_VAR )
                {
                  set_value_0 = *(_DWORD *)(v4 + 112);
                }
                else
                {
                  if ( *(_BYTE *)(((unsigned __int64)&exec->type >> 3) + 0x7FFF8000) != 0
                    && *(_BYTE *)(((unsigned __int64)&exec->type >> 3) + 0x7FFF8000) <= 3 )
                  {
                    __asan_report_load4(&exec->type);
                  }
                  if ( exec->type == QUEST_EXEC_DEC_QUEST_VAR )
                    set_value_0 -= *(_DWORD *)(v4 + 112);
                }
              }
              PlayerQuestComp::updateQuestVarByServer(this, *(_DWORD *)(v4 + 128), *(_DWORD *)(v4 + 96), set_value_0, 1);
            }
LABEL_553:
            std::shared_ptr<ParentQuest>::~shared_ptr((std::shared_ptr<ParentQuest> *const)(v4 + 256));
          }
        }
        goto LABEL_818;
      case QUEST_EXEC_RANDOM_QUEST_VAR:
        if ( std::vector<std::string>::empty(&exec->param) )
        {
          common::milog::MiLogStream::create(
            &v536,
            &common::milog::MiLogDefault::default_log_obj_,
            3u,
            "./src/player/quest/player_quest_comp.cpp",
            "execAction",
            6909);
          common::milog::MiLogStream::operator<<<char [19],(char *[19])0>(
            &v536,
            (const char (*)[19])"param vec is empty");
          common::milog::MiLogStream::~MiLogStream(&v536);
        }
        else
        {
          *(_DWORD *)(v4 + 80) = 0;
          *(_DWORD *)(v4 + 96) = 0;
          *(_DWORD *)(v4 + 112) = 0;
          if ( common::tools::StringUtils::strVecToNum<0u,unsigned int,unsigned int &,unsigned int &>(
                 &exec->param,
                 (unsigned int *)(v4 + 80),
                 (unsigned int *)(v4 + 96),
                 (unsigned int *)(v4 + 112),
                 v330,
                 v331) )
          {
            common::milog::MiLogStream::create(
              &v536,
              &common::milog::MiLogDefault::default_log_obj_,
              3u,
              "./src/player/quest/player_quest_comp.cpp",
              "execAction",
              6917);
            v332 = common::milog::MiLogStream::operator<<<char [17],(char *[17])0>(
                     &v536,
                     (const char (*)[17])"param not valid:");
            common::milog::MiLogStream::operator<<<std::string>(v332, &exec->param);
            common::milog::MiLogStream::~MiLogStream(&v536);
          }
          else
          {
            set_value_1 = common::tools::RandomUtils::rand<unsigned int>(
                            *(_DWORD *)(v4 + 96),
                            *(_DWORD *)(v4 + 112) - 1);
            PlayerQuestComp::updateQuestVarByServer(this, *(_DWORD *)(v4 + 128), *(_DWORD *)(v4 + 80), set_value_1, 1);
          }
        }
        goto LABEL_818;
      case QUEST_EXEC_RELOAD_SCENE_TAG:
        if ( std::vector<std::string>::empty(&exec->param) )
        {
          common::milog::MiLogStream::create(
            &v536,
            &common::milog::MiLogDefault::default_log_obj_,
            3u,
            "./src/player/quest/player_quest_comp.cpp",
            "execAction",
            6948);
          common::milog::MiLogStream::operator<<<char [19],(char *[19])0>(
            &v536,
            (const char (*)[19])"param vec is empty");
          common::milog::MiLogStream::~MiLogStream(&v536);
          goto LABEL_818;
        }
        *(_DWORD *)(v4 + 112) = 0;
        v336 = std::vector<std::string>::operator[](&exec->param, 0LL);
        if ( common::tools::StringUtils::strToNum<unsigned int>(v336, (unsigned int *)(v4 + 112), 1) )
        {
          common::milog::MiLogStream::create(
            &v536,
            &common::milog::MiLogDefault::default_log_obj_,
            3u,
            "./src/player/quest/player_quest_comp.cpp",
            "execAction",
            6955);
          v337 = common::milog::MiLogStream::operator<<<char [18],(char *[18])0>(
                   &v536,
                   (const char (*)[18])"strToNum failed: ");
          v338 = std::vector<std::string>::operator[](&exec->param, 0LL);
          common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v337, v338);
          common::milog::MiLogStream::~MiLogStream(&v536);
          goto LABEL_818;
        }
        ServiceBox::findService<GameserverService>();
        GameserverService::getConfig((GameserverService *const)(v4 + 256));
        v339 = std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 256));
        v340 = data::SceneExcelConfigMgrBase::findSceneExcelConfig(
                 &v339->design_config.txt_config_mgr.scene_config_mgr,
                 *(_DWORD *)(v4 + 112)) == 0LL;
        std::shared_ptr<Config>::~shared_ptr((std::shared_ptr<Config> *const)(v4 + 256));
        if ( v340 )
        {
          common::milog::MiLogStream::create(
            &v536,
            &common::milog::MiLogDefault::default_log_obj_,
            3u,
            "./src/player/quest/player_quest_comp.cpp",
            "execAction",
            6961);
          v341 = common::milog::MiLogStream::operator<<<char [40],(char *[40])0>(
                   &v536,
                   (const char (*)[40])"findSceneExcelConfig failed, scene_id: ");
          common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v341, (const unsigned int *)(v4 + 112));
          common::milog::MiLogStream::~MiLogStream(&v536);
          goto LABEL_818;
        }
        if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
          __asan_report_load8(&this->player_);
        v342 = (unsigned int)Player::getSceneComp(this->player_);
        PlayerSceneComp::findScene((const PlayerSceneComp *const)(v4 + 256), v342);
        if ( std::operator!=<Scene>((const std::shared_ptr<Scene> *)(v4 + 256), 0LL) )
        {
          v343 = std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 256));
          Scene::notifyClientReloadTerrain(v343, 0LL);
        }
        goto LABEL_805;
      case QUEST_EXEC_REGISTER_DYNAMIC_GROUP_ONLY:
        if ( std::vector<std::string>::empty(&exec->param) )
        {
          common::milog::MiLogStream::create(
            &v536,
            &common::milog::MiLogDefault::default_log_obj_,
            3u,
            "./src/player/quest/player_quest_comp.cpp",
            "execAction",
            6792);
          common::milog::MiLogStream::operator<<<char [19],(char *[19])0>(
            &v536,
            (const char (*)[19])"param vec is empty");
          common::milog::MiLogStream::~MiLogStream(&v536);
          goto LABEL_818;
        }
        std::vector<unsigned int>::vector((std::vector<unsigned int> *const)(v4 + 352));
        std::allocator<char>::allocator(v4 + 48);
        std::string::basic_string<std::allocator<char>>(
          (std::string *const)&v536,
          ",",
          (const std::allocator<char> *)(v4 + 48));
        v291 = std::vector<std::string>::operator[](&exec->param, 0LL);
        v292 = common::tools::StringUtils::splitToList<unsigned int>(
                 v291,
                 (const std::string *)&v536,
                 (std::vector<unsigned int> *)(v4 + 352),
                 1) != 0;
        std::string::~string(&v536);
        std::allocator<char>::~allocator(v4 + 48);
        if ( v292 )
        {
          common::milog::MiLogStream::create(
            &v536,
            &common::milog::MiLogDefault::default_log_obj_,
            3u,
            "./src/player/quest/player_quest_comp.cpp",
            "execAction",
            6798);
          v293 = common::milog::MiLogStream::operator<<<char [15],(char *[15])0>(
                   &v536,
                   (const char (*)[15])"invalid param:");
          v294 = std::vector<std::string>::operator[](&exec->param, 0LL);
          v295 = common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v293, v294);
          v60 = common::milog::MiLogStream::operator<<<char [6],(char *[6])0>(v295, (const char (*)[6])" uid:");
          if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
            __asan_report_load8(&this->player_);
LABEL_511:
          *(_DWORD *)(v4 + 112) = Player::getUid(this->player_);
          common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v60, (const unsigned int *)(v4 + 112));
          common::milog::MiLogStream::~MiLogStream(&v536);
          goto LABEL_533;
        }
        revise_level = 0;
        if ( std::vector<std::string>::size(&exec->param) > 1 )
        {
          v296 = std::vector<std::string>::operator[](&exec->param, 1uLL);
          if ( (unsigned __int8)std::string::empty(v296) != 1 )
          {
            *(_DWORD *)(v4 + 112) = 0;
            v298 = std::vector<std::string>::operator[](&exec->param, 1uLL);
            if ( !common::tools::StringUtils::strToNum<unsigned int>(v298, (unsigned int *)(v4 + 112), 1) )
              revise_level = *(_DWORD *)(v4 + 112);
          }
        }
        if ( std::vector<unsigned int>::empty((const std::vector<unsigned int> *const)(v4 + 352)) )
        {
          common::milog::MiLogStream::create(
            &v536,
            &common::milog::MiLogDefault::default_log_obj_,
            3u,
            "./src/player/quest/player_quest_comp.cpp",
            "execAction",
            6812);
          v299 = common::milog::MiLogStream::operator<<<char [33],(char *[33])0>(
                   &v536,
                   (const char (*)[33])"group_id_vec is empty, quest_id:");
          v300 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                   v299,
                   (const unsigned int *)(v4 + 144));
          v60 = common::milog::MiLogStream::operator<<<char [6],(char *[6])0>(v300, (const char (*)[6])" uid:");
          if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
            __asan_report_load8(&this->player_);
          goto LABEL_511;
        }
        ServiceBox::findService<GameserverService>();
        GameserverService::getConfig((GameserverService *const)(v4 + 256));
        v301 = &std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 256))->design_config.lua_config_mgr;
        v302 = std::vector<unsigned int>::operator[]((std::vector<unsigned int> *const)(v4 + 352), 0LL);
        v303 = v302;
        if ( *(_BYTE *)(((unsigned __int64)v302 >> 3) + 0x7FFF8000) != 0
          && (char)(((unsigned __int8)v302 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)v302 >> 3) + 0x7FFF8000) )
        {
          __asan_report_load4(v302);
        }
        *(_DWORD *)(v4 + 96) = LuaConfigMgr::getSceneIdByGroupId(v301, *v303);
        std::shared_ptr<Config>::~shared_ptr((std::shared_ptr<Config> *const)(v4 + 256));
        if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
          __asan_report_load8(&this->player_);
        v304 = (unsigned int)Player::getSceneComp(this->player_);
        PlayerSceneComp::getPersonalScene((PlayerSceneComp *const)(v4 + 256), v304);
        if ( std::operator==<Scene>(0LL, (const std::shared_ptr<Scene> *)(v4 + 256)) )
        {
          common::milog::MiLogStream::create(
            &v536,
            &common::milog::MiLogDefault::default_log_obj_,
            3u,
            "./src/player/quest/player_quest_comp.cpp",
            "execAction",
            6821);
          v305 = common::milog::MiLogStream::operator<<<char [5],(char *[5])0>(&v536, (const char (*)[5])"uid:");
          if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
            __asan_report_load8(&this->player_);
LABEL_526:
          *(_DWORD *)(v4 + 112) = Player::getUid(this->player_);
          v321 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                   v305,
                   (const unsigned int *)(v4 + 112));
          v322 = common::milog::MiLogStream::operator<<<char [19],(char *[19])0>(
                   v321,
                   (const char (*)[19])" getPersonalScene ");
          v323 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                   v322,
                   (const unsigned int *)(v4 + 96));
          common::milog::MiLogStream::operator<<<char [7],(char *[7])0>(v323, (const char (*)[7])" fails");
          common::milog::MiLogStream::~MiLogStream(&v536);
        }
        else
        {
          v306 = std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 256));
          v307 = (unsigned __int64)Scene::getBlockGroupComp(v306);
          if ( *(_BYTE *)((v307 >> 3) + 0x7FFF8000) )
            v307 = __asan_report_load8(v307);
          v308 = *(_QWORD *)v307 + 96LL;
          if ( *(_BYTE *)((v308 >> 3) + 0x7FFF8000) )
            v307 = __asan_report_load8(*(_QWORD *)v307 + 96LL);
          (*(void (__fastcall **)(unsigned __int64, unsigned __int64, _QWORD, _QWORD))v308)(
            v307,
            v4 + 352,
            revise_level,
            0LL);
        }
LABEL_532:
        std::shared_ptr<Scene>::~shared_ptr((std::shared_ptr<Scene> *const)(v4 + 256));
LABEL_533:
        std::vector<unsigned int>::~vector((std::vector<unsigned int> *const)(v4 + 352));
        goto LABEL_818;
      case QUEST_EXEC_CHANGE_SKILL_DEPOT:
        if ( std::vector<std::string>::empty(&exec->param) )
        {
          common::milog::MiLogStream::create(
            &v536,
            &common::milog::MiLogDefault::default_log_obj_,
            3u,
            "./src/player/quest/player_quest_comp.cpp",
            "execAction",
            6976);
          common::milog::MiLogStream::operator<<<char [19],(char *[19])0>(
            &v536,
            (const char (*)[19])"param vec is empty");
          common::milog::MiLogStream::~MiLogStream(&v536);
          goto LABEL_818;
        }
        *(_DWORD *)(v4 + 96) = 0;
        v344 = std::vector<std::string>::operator[](&exec->param, 0LL);
        if ( common::tools::StringUtils::strToNum<unsigned int>(v344, (unsigned int *)(v4 + 96), 1) )
        {
          common::milog::MiLogStream::create(
            &v536,
            &common::milog::MiLogDefault::default_log_obj_,
            3u,
            "./src/player/quest/player_quest_comp.cpp",
            "execAction",
            6982);
          v345 = common::milog::MiLogStream::operator<<<char [17],(char *[17])0>(
                   &v536,
                   (const char (*)[17])"param not valid:");
          common::milog::MiLogStream::operator<<<std::string>(v345, &exec->param);
          common::milog::MiLogStream::~MiLogStream(&v536);
          goto LABEL_818;
        }
        if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
          __asan_report_load8(&this->player_);
        Player::getCurAvatar((Player *const)(v4 + 256));
        if ( std::operator!=<Avatar>((const std::shared_ptr<Avatar> *)(v4 + 256), 0LL) )
        {
          v346 = (unsigned __int64)std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 256));
          if ( *(_BYTE *)((v346 >> 3) + 0x7FFF8000) )
            v346 = __asan_report_load8(v346);
          v347 = *(_QWORD *)v346 + 312LL;
          if ( *(_BYTE *)((v347 >> 3) + 0x7FFF8000) )
            v346 = __asan_report_load8(*(_QWORD *)v346 + 312LL);
          avatar_config_ptr = (const data::AvatarExcelConfig *)(*(__int64 (__fastcall **)(unsigned __int64))v347)(v346);
          if ( avatar_config_ptr )
          {
            v350 = *(unsigned int *)(v4 + 96);
            if ( v350 < std::vector<unsigned int>::size(&avatar_config_ptr->cand_skill_depot_ids) )
            {
              v355 = (__gnu_cxx::__alloc_traits<std::allocator<unsigned int>,unsigned int>::value_type *)std::vector<unsigned int>::operator[](&avatar_config_ptr->cand_skill_depot_ids, *(unsigned int *)(v4 + 96));
              v356 = v355;
              if ( *(_BYTE *)(((unsigned __int64)v355 >> 3) + 0x7FFF8000) != 0
                && (char)(((unsigned __int8)v355 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)v355 >> 3) + 0x7FFF8000) )
              {
                __asan_report_load4(v355);
              }
              depot_id = *v356;
              v357 = std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 256));
              if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
                __asan_report_load8(&this->player_);
              Avatar::changeSkillDepotId(v357, this->player_, depot_id);
            }
            else
            {
              common::milog::MiLogStream::create(
                &v536,
                &common::milog::MiLogDefault::default_log_obj_,
                1u,
                "./src/player/quest/player_quest_comp.cpp",
                "execAction",
                6996);
              v351 = common::milog::MiLogStream::operator<<<char [36],(char *[36])0>(
                       &v536,
                       (const char (*)[36])"depot_index too large, depot_index:");
              v352 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                       v351,
                       (const unsigned int *)(v4 + 96));
              v353 = common::milog::MiLogStream::operator<<<char [14],(char *[14])0>(
                       v352,
                       (const char (*)[14])", avatar_id: ");
              v354 = std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 256));
              *(_DWORD *)(v4 + 112) = Avatar::getAvatarId(v354);
              common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                v353,
                (const unsigned int *)(v4 + 112));
              common::milog::MiLogStream::~MiLogStream(&v536);
            }
          }
          else
          {
            common::milog::MiLogStream::create(
              &v536,
              &common::milog::MiLogDefault::default_log_obj_,
              3u,
              "./src/player/quest/player_quest_comp.cpp",
              "execAction",
              6991);
            v348 = common::milog::MiLogStream::operator<<<char [38],(char *[38])0>(
                     &v536,
                     (const char (*)[38])"find avatar_config failed avatar_id: ");
            v349 = std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 256));
            *(_DWORD *)(v4 + 112) = Avatar::getAvatarId(v349);
            common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
              v348,
              (const unsigned int *)(v4 + 112));
            common::milog::MiLogStream::~MiLogStream(&v536);
          }
        }
        goto LABEL_271;
      case QUEST_EXEC_ADD_SCENE_TAG:
      case QUEST_EXEC_DEL_SCENE_TAG:
        if ( std::vector<std::string>::size(&exec->param) <= 1 )
        {
          common::milog::MiLogStream::create(
            &v536,
            &common::milog::MiLogDefault::default_log_obj_,
            3u,
            "./src/player/quest/player_quest_comp.cpp",
            "execAction",
            7009);
          v358 = common::milog::MiLogStream::operator<<<char [19],(char *[19])0>(
                   &v536,
                   (const char (*)[19])"action param size ");
          *(_QWORD *)(v4 + 192) = std::vector<std::string>::size(&exec->param);
          v359 = common::milog::MiLogStream::operator<<<unsigned long,(unsigned long *)0>(
                   v358,
                   (const unsigned __int64 *)(v4 + 192));
          common::milog::MiLogStream::operator<<<char [12],(char *[12])0>(v359, (const char (*)[12])off_2516ACA0);
          common::milog::MiLogStream::~MiLogStream(&v536);
          goto LABEL_818;
        }
        *(_DWORD *)(v4 + 80) = 0;
        *(_DWORD *)(v4 + 96) = 0;
        if ( common::tools::StringUtils::strVecToNum<0u,unsigned int,unsigned int &>(
               &exec->param,
               (unsigned int *)(v4 + 80),
               (unsigned int *)(v4 + 96),
               (unsigned int *)&exec->param) )
        {
          common::milog::MiLogStream::create(
            &v536,
            &common::milog::MiLogDefault::default_log_obj_,
            3u,
            "./src/player/quest/player_quest_comp.cpp",
            "execAction",
            7017);
          common::milog::MiLogStream::operator<<<char [19],(char *[19])0>(
            &v536,
            (const char (*)[19])"strVecToNum failed");
          common::milog::MiLogStream::~MiLogStream(&v536);
          goto LABEL_818;
        }
        if ( *(_BYTE *)(((unsigned __int64)&exec->type >> 3) + 0x7FFF8000) != 0
          && *(_BYTE *)(((unsigned __int64)&exec->type >> 3) + 0x7FFF8000) <= 3 )
        {
          __asan_report_load4(&exec->type);
        }
        if ( exec->type == QUEST_EXEC_ADD_SCENE_TAG )
        {
          if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
            __asan_report_load8(&this->player_);
          v360 = Player::getSceneComp(this->player_);
          if ( PlayerSceneComp::addSceneTag(v360, *(_DWORD *)(v4 + 80), *(_DWORD *)(v4 + 96)) )
          {
            common::milog::MiLogStream::create(
              &v536,
              &common::milog::MiLogDefault::default_log_obj_,
              3u,
              "./src/player/quest/player_quest_comp.cpp",
              "execAction",
              7025);
            v361 = common::milog::MiLogStream::operator<<<char [37],(char *[37])0>(
                     &v536,
                     (const char (*)[37])"quest exec addSceneTag failed, uid: ");
            if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
              __asan_report_load8(&this->player_);
LABEL_608:
            *(_DWORD *)(v4 + 112) = Player::getUid(this->player_);
            v362 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                     v361,
                     (const unsigned int *)(v4 + 112));
            v363 = common::milog::MiLogStream::operator<<<char [13],(char *[13])0>(
                     v362,
                     (const char (*)[13])" ,scene_id: ");
            v364 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                     v363,
                     (const unsigned int *)(v4 + 80));
            v365 = common::milog::MiLogStream::operator<<<char [17],(char *[17])0>(
                     v364,
                     (const char (*)[17])" ,scene_tag_id: ");
            common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
              v365,
              (const unsigned int *)(v4 + 96));
            common::milog::MiLogStream::~MiLogStream(&v536);
            goto LABEL_818;
          }
        }
        else
        {
          if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
            __asan_report_load8(&this->player_);
          v366 = Player::getSceneComp(this->player_);
          if ( PlayerSceneComp::delSceneTag(v366, *(_DWORD *)(v4 + 80), *(_DWORD *)(v4 + 96)) )
          {
            common::milog::MiLogStream::create(
              &v536,
              &common::milog::MiLogDefault::default_log_obj_,
              3u,
              "./src/player/quest/player_quest_comp.cpp",
              "execAction",
              7034);
            v361 = common::milog::MiLogStream::operator<<<char [37],(char *[37])0>(
                     &v536,
                     (const char (*)[37])"quest exec delSceneTag failed, uid: ");
            if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
              __asan_report_load8(&this->player_);
            goto LABEL_608;
          }
        }
        goto LABEL_818;
      case QUEST_EXEC_INIT_TIME_VAR:
        if ( std::vector<std::string>::empty(&exec->param) )
        {
          common::milog::MiLogStream::create(
            &v536,
            &common::milog::MiLogDefault::default_log_obj_,
            3u,
            "./src/player/quest/player_quest_comp.cpp",
            "execAction",
            7046);
          common::milog::MiLogStream::operator<<<char [19],(char *[19])0>(
            &v536,
            (const char (*)[19])"param vec is empty");
          common::milog::MiLogStream::~MiLogStream(&v536);
        }
        else
        {
          *(_DWORD *)(v4 + 112) = 0;
          if ( common::tools::StringUtils::strVecToNum<0u,unsigned int>(&exec->param, (unsigned int *)(v4 + 112)) )
          {
            common::milog::MiLogStream::create(
              &v536,
              &common::milog::MiLogDefault::default_log_obj_,
              3u,
              "./src/player/quest/player_quest_comp.cpp",
              "execAction",
              7052);
            common::milog::MiLogStream::operator<<<char [22],(char *[22])0>(
              &v536,
              (const char (*)[22])"time var must be uint");
            common::milog::MiLogStream::~MiLogStream(&v536);
          }
          else if ( PlayerQuestComp::refreshQuestTimeVar(this, *(_DWORD *)(v4 + 128), *(_DWORD *)(v4 + 112)) )
          {
            common::milog::MiLogStream::create(
              &v536,
              &common::milog::MiLogDefault::default_log_obj_,
              3u,
              "./src/player/quest/player_quest_comp.cpp",
              "execAction",
              7057);
            v367 = common::milog::MiLogStream::operator<<<char [47],(char *[47])0>(
                     &v536,
                     (const char (*)[47])"pararefreshQuestTimeVar fail. parent_quest_id:");
            common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
              v367,
              (const unsigned int *)(v4 + 128));
            common::milog::MiLogStream::~MiLogStream(&v536);
          }
        }
        goto LABEL_818;
      case QUEST_EXEC_CLEAR_TIME_VAR:
        if ( std::vector<std::string>::size(&exec->param) > 1 )
        {
          *(_DWORD *)(v4 + 96) = 0;
          *(_DWORD *)(v4 + 112) = 0;
          v368 = std::vector<std::string>::operator[](&exec->param, 0LL);
          if ( common::tools::StringUtils::strToNum<unsigned int>(v368, (unsigned int *)(v4 + 96), 1) )
          {
            common::milog::MiLogStream::create(
              &v536,
              &common::milog::MiLogDefault::default_log_obj_,
              3u,
              "./src/player/quest/player_quest_comp.cpp",
              "execAction",
              7073);
            common::milog::MiLogStream::operator<<<char [29],(char *[29])0>(
              &v536,
              (const char (*)[29])"parent quest id must be uint");
            common::milog::MiLogStream::~MiLogStream(&v536);
          }
          else
          {
            if ( !*(_DWORD *)(v4 + 96) )
              *(_DWORD *)(v4 + 96) = *(_DWORD *)(v4 + 128);
            v369 = std::vector<std::string>::operator[](&exec->param, 1uLL);
            if ( common::tools::StringUtils::strToNum<unsigned int>(v369, (unsigned int *)(v4 + 112), 1) )
            {
              common::milog::MiLogStream::create(
                &v536,
                &common::milog::MiLogDefault::default_log_obj_,
                3u,
                "./src/player/quest/player_quest_comp.cpp",
                "execAction",
                7082);
              common::milog::MiLogStream::operator<<<char [22],(char *[22])0>(
                &v536,
                (const char (*)[22])"time var must be uint");
              common::milog::MiLogStream::~MiLogStream(&v536);
            }
            else if ( PlayerQuestComp::clearQuestTimeVar(this, *(_DWORD *)(v4 + 96), *(_DWORD *)(v4 + 112)) )
            {
              common::milog::MiLogStream::create(
                &v536,
                &common::milog::MiLogDefault::default_log_obj_,
                3u,
                "./src/player/quest/player_quest_comp.cpp",
                "execAction",
                7087);
              v370 = common::milog::MiLogStream::operator<<<char [41],(char *[41])0>(
                       &v536,
                       (const char (*)[41])"clearQuestTimeVar fail. parent_quest_id:");
              common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                v370,
                (const unsigned int *)(v4 + 96));
              common::milog::MiLogStream::~MiLogStream(&v536);
            }
          }
        }
        else
        {
          common::milog::MiLogStream::create(
            &v536,
            &common::milog::MiLogDefault::default_log_obj_,
            3u,
            "./src/player/quest/player_quest_comp.cpp",
            "execAction",
            7066);
          common::milog::MiLogStream::operator<<<char [25],(char *[25])0>(
            &v536,
            (const char (*)[25])"param vec is less than 2");
          common::milog::MiLogStream::~MiLogStream(&v536);
        }
        goto LABEL_818;
      case QUEST_EXEC_MODIFY_CLIMATE_AREA:
        if ( std::vector<std::string>::size(&exec->param) <= 2 )
        {
          common::milog::MiLogStream::create(
            &v536,
            &common::milog::MiLogDefault::default_log_obj_,
            3u,
            "./src/player/quest/player_quest_comp.cpp",
            "execAction",
            7096);
          common::milog::MiLogStream::operator<<<char [25],(char *[25])0>(
            &v536,
            (const char (*)[25])"param vec is less than 3");
          common::milog::MiLogStream::~MiLogStream(&v536);
          goto LABEL_818;
        }
        *(_DWORD *)(v4 + 80) = 0;
        *(_DWORD *)(v4 + 96) = 0;
        *(_DWORD *)(v4 + 112) = 0;
        if ( common::tools::StringUtils::strVecToNum<0u,unsigned int,unsigned int &,unsigned int &>(
               &exec->param,
               (unsigned int *)(v4 + 80),
               (unsigned int *)(v4 + 96),
               (unsigned int *)(v4 + 112),
               v371,
               v372) )
        {
          common::milog::MiLogStream::create(
            &v536,
            &common::milog::MiLogDefault::default_log_obj_,
            3u,
            "./src/player/quest/player_quest_comp.cpp",
            "execAction",
            7104);
          v373 = common::milog::MiLogStream::operator<<<char [30],(char *[30])0>(
                   &v536,
                   (const char (*)[30])"strVecToNum fail, exec.param:");
          common::milog::MiLogStream::operator<<<std::string>(v373, &exec->param);
          common::milog::MiLogStream::~MiLogStream(&v536);
          goto LABEL_818;
        }
        if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
          __asan_report_load8(&this->player_);
        v374 = (unsigned int)Player::getSceneComp(this->player_);
        PlayerSceneComp::findScene((const PlayerSceneComp *const)(v4 + 256), v374);
        if ( std::operator==<Scene>(0LL, (const std::shared_ptr<Scene> *)(v4 + 256)) )
        {
          common::milog::MiLogStream::create(
            &v536,
            &common::milog::MiLogDefault::default_log_obj_,
            3u,
            "./src/player/quest/player_quest_comp.cpp",
            "execAction",
            7110);
          v375 = common::milog::MiLogStream::operator<<<char [26],(char *[26])0>(
                   &v536,
                   (const char (*)[26])"findScene fail, scene_id:");
          common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v375, (const unsigned int *)(v4 + 80));
          common::milog::MiLogStream::~MiLogStream(&v536);
        }
        else
        {
          v376 = std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 256));
          if ( Scene::modifyClimateAreaType(v376, *(_DWORD *)(v4 + 96), *(_DWORD *)(v4 + 112), 0.0) )
          {
            common::milog::MiLogStream::create(
              &v536,
              &common::milog::MiLogDefault::default_log_obj_,
              3u,
              "./src/player/quest/player_quest_comp.cpp",
              "execAction",
              7115);
            v377 = common::milog::MiLogStream::operator<<<char [38],(char *[38])0>(
                     &v536,
                     (const char (*)[38])"modifyClimateAreaType fail, scene_id:");
            v378 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                     v377,
                     (const unsigned int *)(v4 + 80));
            v379 = common::milog::MiLogStream::operator<<<char [18],(char *[18])0>(
                     v378,
                     (const char (*)[18])" climate_area_id:");
            v380 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                     v379,
                     (const unsigned int *)(v4 + 96));
            v381 = common::milog::MiLogStream::operator<<<char [20],(char *[20])0>(
                     v380,
                     (const char (*)[20])" json_climate_type:");
            common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
              v381,
              (const unsigned int *)(v4 + 112));
            common::milog::MiLogStream::~MiLogStream(&v536);
          }
        }
        goto LABEL_805;
      case QUEST_EXEC_CHANGE_MAP_AREA_STATE:
        *(_DWORD *)(v4 + 96) = 0;
        *(_DWORD *)(v4 + 112) = 0;
        if ( common::tools::StringUtils::strVecToNum<0u,unsigned int,unsigned int &>(
               &exec->param,
               (unsigned int *)(v4 + 96),
               (unsigned int *)(v4 + 112),
               (unsigned int *)&exec->param) )
        {
          common::milog::MiLogStream::create(
            &v536,
            &common::milog::MiLogDefault::default_log_obj_,
            3u,
            "./src/player/quest/player_quest_comp.cpp",
            "execAction",
            7126);
          v382 = common::milog::MiLogStream::operator<<<char [30],(char *[30])0>(
                   &v536,
                   (const char (*)[30])"strVecToNum fail, exec.param:");
          v383 = common::milog::MiLogStream::operator<<<std::string>(v382, &exec->param);
          v384 = common::milog::MiLogStream::operator<<<char [9],(char *[9])0>(v383, (const char (*)[9])" player:");
          if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
            __asan_report_load8(&this->player_);
          operator<<(v384, this->player_);
          common::milog::MiLogStream::~MiLogStream(&v536);
        }
        else
        {
          if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
            __asan_report_load8(&this->player_);
          v385 = Player::getSceneComp(this->player_);
          PlayerSceneComp::changeMapAreaInfo(v385, *(_DWORD *)(v4 + 96), *(_DWORD *)(v4 + 112) != 0);
        }
        goto LABEL_818;
      case QUEST_EXEC_DEACTIVE_ITEM_GIVING:
        *(_DWORD *)(v4 + 96) = 0;
        if ( common::tools::StringUtils::strVecToNum<0u,unsigned int>(&exec->param, (unsigned int *)(v4 + 96)) )
        {
          common::milog::MiLogStream::create(
            &v536,
            &common::milog::MiLogDefault::default_log_obj_,
            3u,
            "./src/player/quest/player_quest_comp.cpp",
            "execAction",
            6558);
          v244 = common::milog::MiLogStream::operator<<<char [25],(char *[25])0>(
                   &v536,
                   (const char (*)[25])"strVecToNum fail. param:");
          v245 = common::milog::MiLogStream::operator<<<std::string>(v244, &exec->param);
          v9 = common::milog::MiLogStream::operator<<<char [6],(char *[6])0>(v245, (const char (*)[6])" uid:");
          if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
            __asan_report_load8(&this->player_);
          goto LABEL_817;
        }
        if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
          __asan_report_load8(&this->player_);
        v246 = Player::getGivingComp(this->player_);
        PlayerGivingComp::deactiveItemGiving(v246, *(_DWORD *)(v4 + 96));
        goto LABEL_818;
      case QUEST_EXEC_CHANGE_SCENE_LEVEL_TAG:
        *(_DWORD *)(v4 + 96) = 0;
        if ( common::tools::StringUtils::strVecToNum<0u,unsigned int>(&exec->param, (unsigned int *)(v4 + 96)) )
        {
          common::milog::MiLogStream::create(
            &v536,
            &common::milog::MiLogDefault::default_log_obj_,
            3u,
            "./src/player/quest/player_quest_comp.cpp",
            "execAction",
            7137);
          v386 = common::milog::MiLogStream::operator<<<char [25],(char *[25])0>(
                   &v536,
                   (const char (*)[25])"strVecToNum fail. param:");
          v387 = common::milog::MiLogStream::operator<<<std::string>(v386, &exec->param);
          v9 = common::milog::MiLogStream::operator<<<char [6],(char *[6])0>(v387, (const char (*)[6])" uid:");
          if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
            __asan_report_load8(&this->player_);
          goto LABEL_817;
        }
        if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
          __asan_report_load8(&this->player_);
        v388 = Player::getSceneComp(this->player_);
        PlayerSceneComp::changeToTargetLevelTag(v388, *(_DWORD *)(v4 + 96), 0, 0LL);
        goto LABEL_818;
      case QUEST_EXEC_UNLOCK_PLAYER_WORLD_SCENE:
      case QUEST_EXEC_LOCK_PLAYER_WORLD_SCENE:
        *(_DWORD *)(v4 + 96) = 0;
        if ( common::tools::StringUtils::strVecToNum<0u,unsigned int>(&exec->param, (unsigned int *)(v4 + 96)) )
        {
          common::milog::MiLogStream::create(
            &v536,
            &common::milog::MiLogDefault::default_log_obj_,
            3u,
            "./src/player/quest/player_quest_comp.cpp",
            "execAction",
            7149);
          v389 = common::milog::MiLogStream::operator<<<char [25],(char *[25])0>(
                   &v536,
                   (const char (*)[25])"strVecToNum fail. param:");
          v390 = common::milog::MiLogStream::operator<<<std::string>(v389, &exec->param);
          v9 = common::milog::MiLogStream::operator<<<char [6],(char *[6])0>(v390, (const char (*)[6])" uid:");
          if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
            __asan_report_load8(&this->player_);
          goto LABEL_817;
        }
        if ( *(_BYTE *)(((unsigned __int64)&exec->type >> 3) + 0x7FFF8000) != 0
          && *(_BYTE *)(((unsigned __int64)&exec->type >> 3) + 0x7FFF8000) <= 3 )
        {
          __asan_report_load4(&exec->type);
        }
        if ( exec->type == QUEST_EXEC_LOCK_PLAYER_WORLD_SCENE )
        {
          if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
            __asan_report_load8(&this->player_);
          v391 = Player::getSceneComp(this->player_);
          if ( PlayerSceneComp::lockPlayerWorldScene(v391, *(_DWORD *)(v4 + 96)) )
          {
            common::milog::MiLogStream::create(
              &v536,
              &common::milog::MiLogDefault::default_log_obj_,
              3u,
              "./src/player/quest/player_quest_comp.cpp",
              "execAction",
              7156);
            v392 = common::milog::MiLogStream::operator<<<char [38],(char *[38])0>(
                     &v536,
                     (const char (*)[38])"lockPlayerWorldScene fail, quest_id: ");
            v393 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                     v392,
                     (const unsigned int *)(v4 + 144));
            v394 = common::milog::MiLogStream::operator<<<char [12],(char *[12])0>(
                     v393,
                     (const char (*)[12])" scene_id: ");
            v395 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                     v394,
                     (const unsigned int *)(v4 + 96));
            v9 = common::milog::MiLogStream::operator<<<char [6],(char *[6])0>(v395, (const char (*)[6])" uid:");
            if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
              __asan_report_load8(&this->player_);
            goto LABEL_817;
          }
        }
        else
        {
          if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
            __asan_report_load8(&this->player_);
          v396 = Player::getSceneComp(this->player_);
          if ( PlayerSceneComp::unlockPlayerWorldScene(v396, *(_DWORD *)(v4 + 96)) )
          {
            common::milog::MiLogStream::create(
              &v536,
              &common::milog::MiLogDefault::default_log_obj_,
              3u,
              "./src/player/quest/player_quest_comp.cpp",
              "execAction",
              7163);
            v397 = common::milog::MiLogStream::operator<<<char [40],(char *[40])0>(
                     &v536,
                     (const char (*)[40])"unlockPlayerWorldScene fail, quest_id: ");
            v398 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                     v397,
                     (const unsigned int *)(v4 + 144));
            v399 = common::milog::MiLogStream::operator<<<char [12],(char *[12])0>(
                     v398,
                     (const char (*)[12])" scene_id: ");
            v400 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                     v399,
                     (const unsigned int *)(v4 + 96));
            v9 = common::milog::MiLogStream::operator<<<char [6],(char *[6])0>(v400, (const char (*)[6])" uid:");
            if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
              __asan_report_load8(&this->player_);
            goto LABEL_817;
          }
        }
        goto LABEL_818;
      case QUEST_EXEC_FAIL_MAINCOOP:
        if ( !std::vector<std::string>::size(&exec->param) )
        {
          common::milog::MiLogStream::create(
            &v536,
            &common::milog::MiLogDefault::default_log_obj_,
            3u,
            "./src/player/quest/player_quest_comp.cpp",
            "execAction",
            7172);
          common::milog::MiLogStream::operator<<<char [25],(char *[25])0>(
            &v536,
            (const char (*)[25])"param vec is less than 1");
          common::milog::MiLogStream::~MiLogStream(&v536);
          goto LABEL_818;
        }
        ServiceBox::findService<GameserverService>();
        GameserverService::getConfig((GameserverService *const)(v4 + 256));
        v401 = std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 256));
        main_quest_config_ptr = data::QuestExcelConfigMgrBase::findMainQuestExcelConfig(
                                  &v401->design_config.txt_config_mgr.quest_config_mgr,
                                  *(_DWORD *)(v4 + 128));
        std::shared_ptr<Config>::~shared_ptr((std::shared_ptr<Config> *const)(v4 + 256));
        if ( !main_quest_config_ptr )
        {
          common::milog::MiLogStream::create(
            &v536,
            &common::milog::MiLogDefault::default_log_obj_,
            3u,
            "./src/player/quest/player_quest_comp.cpp",
            "execAction",
            7178);
          v402 = common::milog::MiLogStream::operator<<<char [43],(char *[43])0>(
                   &v536,
                   (const char (*)[43])"findMainQuestExcelConfig failed, quest_id:");
          common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v402, (const unsigned int *)(v4 + 144));
          common::milog::MiLogStream::~MiLogStream(&v536);
          goto LABEL_818;
        }
        ServiceBox::findService<GameserverService>();
        GameserverService::getConfig((GameserverService *const)(v4 + 256));
        v403 = std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 256));
        *(std::unordered_map<unsigned int,unsigned int>::const_iterator *)(v4 + 160) = std::unordered_map<unsigned int,unsigned int>::find(
                                                                                         &v403->design_config.txt_config_mgr.coop_config_mgr.series_to_main_coop_map,
                                                                                         &main_quest_config_ptr->series);
        std::shared_ptr<Config>::~shared_ptr((std::shared_ptr<Config> *const)(v4 + 256));
        ServiceBox::findService<GameserverService>();
        GameserverService::getConfig((GameserverService *const)(v4 + 256));
        v404 = std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 256));
        *(std::unordered_map<unsigned int,unsigned int>::const_iterator *)(v4 + 192) = std::unordered_map<unsigned int,unsigned int>::end(&v404->design_config.txt_config_mgr.coop_config_mgr.series_to_main_coop_map);
        v405 = std::__detail::operator==<std::pair<unsigned int const,unsigned int>,false>(
                 (const std::__detail::_Node_iterator_base<std::pair<unsigned int const,unsigned int>,false> *)(v4 + 160),
                 (const std::__detail::_Node_iterator_base<std::pair<unsigned int const,unsigned int>,false> *)(v4 + 192));
        std::shared_ptr<Config>::~shared_ptr((std::shared_ptr<Config> *const)(v4 + 256));
        if ( v405 )
        {
          common::milog::MiLogStream::create(
            &v536,
            &common::milog::MiLogDefault::default_log_obj_,
            3u,
            "./src/player/quest/player_quest_comp.cpp",
            "execAction",
            7184);
          v406 = common::milog::MiLogStream::operator<<<char [59],(char *[59])0>(
                   &v536,
                   (const char (*)[59])"serise is not in series_to_main_coop_map, parent_quest_id:");
          v407 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                   v406,
                   (const unsigned int *)(v4 + 128));
          v408 = common::milog::MiLogStream::operator<<<char [10],(char *[10])0>(v407, (const char (*)[10])", series:");
          common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v408, &main_quest_config_ptr->series);
          common::milog::MiLogStream::~MiLogStream(&v536);
          goto LABEL_818;
        }
        if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
          __asan_report_load8(&this->player_);
        CoopComp = Player::getCoopComp(this->player_);
        v410 = std::vector<std::string>::operator[](&exec->param, 0LL);
        v411 = std::__detail::_Node_const_iterator<std::pair<unsigned int const,unsigned int>,false,false>::operator->((const std::__detail::_Node_const_iterator<std::pair<unsigned int const,unsigned int>,false,false> *const)(v4 + 160));
        p_second = &v411->second;
        if ( *(_BYTE *)(((unsigned __int64)p_second >> 3) + 0x7FFF8000) != 0
          && (char)(((unsigned __int8)p_second & 7) + 3) >= *(_BYTE *)(((unsigned __int64)p_second >> 3) + 0x7FFF8000) )
        {
          __asan_report_load4(p_second);
        }
        if ( !PlayerCoopComp::tryFailMainCoop(CoopComp, v411->second, v410) )
          goto LABEL_818;
        common::milog::MiLogStream::create(
          &v536,
          &common::milog::MiLogDefault::default_log_obj_,
          1u,
          "./src/player/quest/player_quest_comp.cpp",
          "execAction",
          7189);
        v413 = common::milog::MiLogStream::operator<<<char [33],(char *[33])0>(
                 &v536,
                 (const char (*)[33])"tryFailMainCoop fail, quest_id: ");
        v414 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                 v413,
                 (const unsigned int *)(v4 + 144));
        v415 = common::milog::MiLogStream::operator<<<char [17],(char *[17])0>(
                 v414,
                 (const char (*)[17])", main_coop_id: ");
        v416 = std::__detail::_Node_const_iterator<std::pair<unsigned int const,unsigned int>,false,false>::operator->((const std::__detail::_Node_const_iterator<std::pair<unsigned int const,unsigned int>,false,false> *const)(v4 + 160));
        v417 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v415, &v416->second);
        v9 = common::milog::MiLogStream::operator<<<char [6],(char *[6])0>(v417, (const char (*)[6])" uid:");
        if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
          __asan_report_load8(&this->player_);
        goto LABEL_817;
      case QUEST_EXEC_MODIFY_WEATHER_AREA:
        if ( std::vector<std::string>::size(&exec->param) > 1 )
        {
          std::vector<unsigned int>::vector((std::vector<unsigned int> *const)(v4 + 288));
          std::vector<unsigned int>::vector((std::vector<unsigned int> *const)(v4 + 352));
          v418 = 0;
          v505 = 0;
          std::allocator<char>::allocator(&__a);
          std::string::basic_string<std::allocator<char>>((std::string *const)(v4 + 416), ";", &__a);
          v419 = std::vector<std::string>::operator[](&exec->param, 0LL);
          v504 = 1;
          if ( !common::tools::StringUtils::splitToList<unsigned int>(
                  v419,
                  (const std::string *)(v4 + 416),
                  (std::vector<unsigned int> *)(v4 + 288),
                  0) )
          {
            std::allocator<char>::allocator(v4 + 48);
            v418 = 1;
            std::string::basic_string<std::allocator<char>>(
              (std::string *const)&v536,
              ";",
              (const std::allocator<char> *)(v4 + 48));
            v505 = 1;
            v420 = std::vector<std::string>::operator[](&exec->param, 1uLL);
            if ( !common::tools::StringUtils::splitToList<unsigned int>(
                    v420,
                    (const std::string *)&v536,
                    (std::vector<unsigned int> *)(v4 + 352),
                    0) )
              v504 = 0;
          }
          if ( v505 )
            std::string::~string(&v536);
          if ( v418 )
            std::allocator<char>::~allocator(v4 + 48);
          std::string::~string((void *)(v4 + 416));
          std::allocator<char>::~allocator(&__a);
          if ( v504 )
          {
            common::milog::MiLogStream::create(
              &v536,
              &common::milog::MiLogDefault::default_log_obj_,
              3u,
              "./src/player/quest/player_quest_comp.cpp",
              "execAction",
              7205);
            v421 = common::milog::MiLogStream::operator<<<char [28],(char *[28])0>(
                     &v536,
                     (const char (*)[28])"parse param fail, quest_id:");
            common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
              v421,
              (const unsigned int *)(v4 + 144));
            common::milog::MiLogStream::~MiLogStream(&v536);
          }
          else
          {
            for ( i = 0; ; ++i )
            {
              v422 = i;
              if ( v422 >= std::vector<unsigned int>::size((const std::vector<unsigned int> *const)(v4 + 288)) )
                break;
              v423 = i;
              if ( v423 >= std::vector<unsigned int>::size((const std::vector<unsigned int> *const)(v4 + 352)) )
                break;
              v425 = std::vector<unsigned int>::operator[]((std::vector<unsigned int> *const)(v4 + 288), i);
              v426 = v425;
              if ( *(_BYTE *)(((unsigned __int64)v425 >> 3) + 0x7FFF8000) != 0
                && (char)(((unsigned __int8)v425 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)v425 >> 3) + 0x7FFF8000) )
              {
                __asan_report_load4(v425);
              }
              *(_DWORD *)(v4 + 96) = *v426;
              v427 = std::vector<unsigned int>::operator[]((std::vector<unsigned int> *const)(v4 + 352), i);
              v428 = v427;
              if ( *(_BYTE *)(((unsigned __int64)v427 >> 3) + 0x7FFF8000) != 0
                && (char)(((unsigned __int8)v427 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)v427 >> 3) + 0x7FFF8000) )
              {
                __asan_report_load4(v427);
              }
              is_open_weather_area = *v428 != 0;
              ServiceBox::findService<GameserverService>();
              GameserverService::getConfig((GameserverService *const)(v4 + 256));
              v429 = std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 256));
              weather_config_ptr_0 = data::WeatherExcelConfigMgrBase::findWeatherExcelConfig(
                                       &v429->design_config.txt_config_mgr.weather_config_mgr,
                                       *(_DWORD *)(v4 + 96));
              std::shared_ptr<Config>::~shared_ptr((std::shared_ptr<Config> *const)(v4 + 256));
              if ( weather_config_ptr_0 )
              {
                if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
                  __asan_report_load8(&this->player_);
                v435 = (unsigned int)Player::getSceneComp(this->player_);
                if ( *(_BYTE *)(((unsigned __int64)&weather_config_ptr_0->scene_id >> 3) + 0x7FFF8000) != 0
                  && *(_BYTE *)(((unsigned __int64)&weather_config_ptr_0->scene_id >> 3) + 0x7FFF8000) <= 3 )
                {
                  __asan_report_load4(&weather_config_ptr_0->scene_id);
                }
                PlayerSceneComp::getPersonalScene((PlayerSceneComp *const)(v4 + 224), v435);
                if ( std::operator==<Scene>(0LL, (const std::shared_ptr<Scene> *)(v4 + 224)) )
                {
                  common::milog::MiLogStream::create(
                    &v536,
                    &common::milog::MiLogDefault::default_log_obj_,
                    3u,
                    "./src/player/quest/player_quest_comp.cpp",
                    "execAction",
                    7221);
                  v436 = common::milog::MiLogStream::operator<<<char [26],(char *[26])0>(
                           &v536,
                           (const char (*)[26])"findScene fail, scene_id:");
                  v437 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                           v436,
                           &weather_config_ptr_0->scene_id);
                  v438 = common::milog::MiLogStream::operator<<<char [11],(char *[11])0>(
                           v437,
                           (const char (*)[11])" quest_id:");
                  v439 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                           v438,
                           (const unsigned int *)(v4 + 144));
                  v440 = common::milog::MiLogStream::operator<<<char [6],(char *[6])0>(v439, (const char (*)[6])" uid:");
                  if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
                    __asan_report_load8(&this->player_);
                  *(_DWORD *)(v4 + 112) = Player::getUid(this->player_);
                  common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                    v440,
                    (const unsigned int *)(v4 + 112));
                  common::milog::MiLogStream::~MiLogStream(&v536);
                }
                else
                {
                  common::milog::MiLogStream::create(
                    &v536,
                    &common::milog::MiLogDefault::default_log_obj_,
                    1u,
                    "./src/player/quest/player_quest_comp.cpp",
                    "execAction",
                    7224);
                  v441 = common::milog::MiLogStream::operator<<<char [8],(char *[8])0>(
                           &v536,
                           (const char (*)[8])"player:");
                  if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
                    __asan_report_load8(&this->player_);
                  v442 = operator<<(v441, this->player_);
                  v443 = common::milog::MiLogStream::operator<<<char [8],(char *[8])0>(
                           v442,
                           (const char (*)[8])" scene:");
                  v444 = std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::operator*((const std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 224));
                  v445 = common::milog::MiLogStream::operator<<<Scene,(Scene*)0>(v443, v444);
                  v446 = common::milog::MiLogStream::operator<<<char [17],(char *[17])0>(
                           v445,
                           (const char (*)[17])" height_area_id:");
                  v447 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                           v446,
                           (const unsigned int *)(v4 + 96));
                  v448 = common::milog::MiLogStream::operator<<<char [23],(char *[23])0>(
                           v447,
                           (const char (*)[23])" is_open_weather_area:");
                  v449 = common::milog::MiLogStream::operator<<(v448, is_open_weather_area);
                  v450 = common::milog::MiLogStream::operator<<<char [11],(char *[11])0>(
                           v449,
                           (const char (*)[11])" quest_id:");
                  common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                    v450,
                    (const unsigned int *)(v4 + 144));
                  common::milog::MiLogStream::~MiLogStream(&v536);
                  if ( is_open_weather_area )
                  {
                    v451 = (unsigned __int64)std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 224));
                    if ( *(_BYTE *)((v451 >> 3) + 0x7FFF8000) )
                      v451 = __asan_report_load8(v451);
                    v452 = *(_QWORD *)v451 + 360LL;
                    if ( *(_BYTE *)((v452 >> 3) + 0x7FFF8000) )
                      v451 = __asan_report_load8(*(_QWORD *)v451 + 360LL);
                    (*(void (__fastcall **)(unsigned __int64, unsigned __int64, _QWORD))v452)(
                      v4 + 256,
                      v451,
                      *(unsigned int *)(v4 + 96));
                    std::shared_ptr<WeatherArea>::~shared_ptr((std::shared_ptr<WeatherArea> *const)(v4 + 256));
                  }
                  else
                  {
                    v453 = (unsigned __int64)std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 224));
                    if ( *(_BYTE *)((v453 >> 3) + 0x7FFF8000) )
                      v453 = __asan_report_load8(v453);
                    v454 = *(_QWORD *)v453 + 368LL;
                    if ( *(_BYTE *)((v454 >> 3) + 0x7FFF8000) )
                      v453 = __asan_report_load8(*(_QWORD *)v453 + 368LL);
                    (*(void (__fastcall **)(unsigned __int64, _QWORD))v454)(v453, *(unsigned int *)(v4 + 96));
                  }
                }
                std::shared_ptr<Scene>::~shared_ptr((std::shared_ptr<Scene> *const)(v4 + 224));
              }
              else
              {
                common::milog::MiLogStream::create(
                  &v536,
                  &common::milog::MiLogDefault::default_log_obj_,
                  3u,
                  "./src/player/quest/player_quest_comp.cpp",
                  "execAction",
                  7215);
                v430 = common::milog::MiLogStream::operator<<<char [45],(char *[45])0>(
                         &v536,
                         (const char (*)[45])"findWeatherExcelConfig fail, height_area_id:");
                v431 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                         v430,
                         (const unsigned int *)(v4 + 96));
                v432 = common::milog::MiLogStream::operator<<<char [11],(char *[11])0>(
                         v431,
                         (const char (*)[11])" quest_id:");
                v433 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                         v432,
                         (const unsigned int *)(v4 + 144));
                v434 = common::milog::MiLogStream::operator<<<char [6],(char *[6])0>(v433, (const char (*)[6])" uid:");
                if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
                  __asan_report_load8(&this->player_);
                *(_DWORD *)(v4 + 112) = Player::getUid(this->player_);
                common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                  v434,
                  (const unsigned int *)(v4 + 112));
                common::milog::MiLogStream::~MiLogStream(&v536);
              }
            }
          }
          std::vector<unsigned int>::~vector((std::vector<unsigned int> *const)(v4 + 352));
          std::vector<unsigned int>::~vector((std::vector<unsigned int> *const)(v4 + 288));
        }
        else
        {
          common::milog::MiLogStream::create(
            &v536,
            &common::milog::MiLogDefault::default_log_obj_,
            3u,
            "./src/player/quest/player_quest_comp.cpp",
            "execAction",
            7197);
          common::milog::MiLogStream::operator<<<char [25],(char *[25])0>(
            &v536,
            (const char (*)[25])"param vec is less than 2");
          common::milog::MiLogStream::~MiLogStream(&v536);
        }
        goto LABEL_818;
      case QUEST_EXEC_MODIFY_ARANARA_COLLECTION_STATE:
        if ( std::vector<std::string>::size(&exec->param) <= 2 )
        {
          common::milog::MiLogStream::create(
            &v536,
            &common::milog::MiLogDefault::default_log_obj_,
            3u,
            "./src/player/quest/player_quest_comp.cpp",
            "execAction",
            7241);
          common::milog::MiLogStream::operator<<<char [25],(char *[25])0>(
            &v536,
            (const char (*)[25])"param vec is less than 3");
          common::milog::MiLogStream::~MiLogStream(&v536);
          goto LABEL_818;
        }
        *(_DWORD *)(v4 + 64) = 0;
        *(_DWORD *)(v4 + 80) = 0;
        *(_DWORD *)(v4 + 96) = 0;
        if ( common::tools::StringUtils::strVecToNum<0u,unsigned int,unsigned int &,unsigned int &>(
               &exec->param,
               (unsigned int *)(v4 + 64),
               (unsigned int *)(v4 + 80),
               (unsigned int *)(v4 + 96),
               v455,
               v456) )
        {
          common::milog::MiLogStream::create(
            &v536,
            &common::milog::MiLogDefault::default_log_obj_,
            3u,
            "./src/player/quest/player_quest_comp.cpp",
            "execAction",
            7249);
          v457 = common::milog::MiLogStream::operator<<<char [25],(char *[25])0>(
                   &v536,
                   (const char (*)[25])"strVecToNum fail. param:");
          v458 = common::milog::MiLogStream::operator<<<std::string>(v457, &exec->param);
          v9 = common::milog::MiLogStream::operator<<<char [6],(char *[6])0>(v458, (const char (*)[6])" uid:");
          if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
            __asan_report_load8(&this->player_);
          goto LABEL_817;
        }
        if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
          __asan_report_load8(&this->player_);
        AranaraCollectionComp = Player::getAranaraCollectionComp(this->player_);
        if ( !PlayerAranaraCollectionComp::modifyCollectionState(
                AranaraCollectionComp,
                *(_DWORD *)(v4 + 64),
                *(_DWORD *)(v4 + 80),
                *(_DWORD *)(v4 + 96)) )
          goto LABEL_818;
        common::milog::MiLogStream::create(
          &v536,
          &common::milog::MiLogDefault::default_log_obj_,
          3u,
          "./src/player/quest/player_quest_comp.cpp",
          "execAction",
          7254);
        v460 = common::milog::MiLogStream::operator<<<char [38],(char *[38])0>(
                 &v536,
                 (const char (*)[38])"modifyCollectionState fail, quest_id:");
        v461 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                 v460,
                 (const unsigned int *)(v4 + 144));
        v462 = common::milog::MiLogStream::operator<<<char [18],(char *[18])0>(
                 v461,
                 (const char (*)[18])" collection_type:");
        v463 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                 v462,
                 (const unsigned int *)(v4 + 64));
        v464 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                 v463,
                 (const char (*)[16])" collection_id:");
        v465 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                 v464,
                 (const unsigned int *)(v4 + 80));
        v466 = common::milog::MiLogStream::operator<<<char [15],(char *[15])0>(
                 v465,
                 (const char (*)[15])" target_state:");
        v467 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                 v466,
                 (const unsigned int *)(v4 + 96));
        v9 = common::milog::MiLogStream::operator<<<char [6],(char *[6])0>(v467, (const char (*)[6])" uid:");
        if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
          __asan_report_load8(&this->player_);
        goto LABEL_817;
      case QUEST_EXEC_GRANT_TRIAL_AVATAR_BATCH_AND_LOCK_TEAM:
        if ( !std::vector<std::string>::empty(&exec->param) )
        {
          std::vector<unsigned int>::vector((std::vector<unsigned int> *const)(v4 + 288));
          std::allocator<char>::allocator(v4 + 48);
          std::string::basic_string<std::allocator<char>>(
            (std::string *const)&v536,
            ",",
            (const std::allocator<char> *)(v4 + 48));
          v470 = std::vector<std::string>::operator[](&exec->param, 0LL);
          v471 = common::tools::StringUtils::splitToList<unsigned int>(
                   v470,
                   (const std::string *)&v536,
                   (std::vector<unsigned int> *)(v4 + 288),
                   0) != 0;
          std::string::~string(&v536);
          std::allocator<char>::~allocator(v4 + 48);
          if ( v471 )
          {
            common::milog::MiLogStream::create(
              &v536,
              &common::milog::MiLogDefault::default_log_obj_,
              3u,
              "./src/player/quest/player_quest_comp.cpp",
              "execAction",
              7269);
            v472 = common::milog::MiLogStream::operator<<<char [17],(char *[17])0>(
                     &v536,
                     (const char (*)[17])"invalid param 0:");
            v473 = std::vector<std::string>::operator[](&exec->param, 0LL);
            v474 = common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v472, v473);
            v25 = common::milog::MiLogStream::operator<<<char [6],(char *[6])0>(v474, (const char (*)[6])" uid:");
            if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
              __asan_report_load8(&this->player_);
            goto LABEL_63;
          }
          *(_BYTE *)(v4 + 48) = 0;
          if ( std::vector<std::string>::size(&exec->param) > 1
            && (v475 = std::vector<std::string>::operator[](&exec->param, 1uLL),
                common::tools::StringUtils::strToNum<bool>(v475, (bool *)(v4 + 48), 1)) )
          {
            common::milog::MiLogStream::create(
              &v536,
              &common::milog::MiLogDefault::default_log_obj_,
              3u,
              "./src/player/quest/player_quest_comp.cpp",
              "execAction",
              7277);
            v476 = common::milog::MiLogStream::operator<<<char [32],(char *[32])0>(
                     &v536,
                     (const char (*)[32])"invalid is_force_grant param 1:");
            v477 = std::vector<std::string>::operator[](&exec->param, 1uLL);
            v478 = common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v476, v477);
            v25 = common::milog::MiLogStream::operator<<<char [6],(char *[6])0>(v478, (const char (*)[6])" uid:");
            if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
              __asan_report_load8(&this->player_);
LABEL_63:
            *(_DWORD *)(v4 + 112) = Player::getUid(this->player_);
            common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
              v25,
              (const unsigned int *)(v4 + 112));
            common::milog::MiLogStream::~MiLogStream(&v536);
          }
          else
          {
            proto::TrialAvatarGrantRecord::TrialAvatarGrantRecord((proto::TrialAvatarGrantRecord *const)(v4 + 416));
            proto::TrialAvatarGrantRecord::set_grant_reason((proto::TrialAvatarGrantRecord *const)(v4 + 416), 1u);
            proto::TrialAvatarGrantRecord::set_from_parent_quest_id(
              (proto::TrialAvatarGrantRecord *const)(v4 + 416),
              *(_DWORD *)(v4 + 128));
            if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
              __asan_report_load8(&this->player_);
            v479 = Player::getAvatarComp(this->player_);
            v480 = *(_BYTE *)(v4 + 48);
            std::vector<unsigned int>::vector(
              (std::vector<unsigned int> *const)(v4 + 352),
              (const std::vector<unsigned int> *)(v4 + 288));
            v481 = PlayerAvatarComp::setUpTrialAvatarVecInTeamAndLockTeam(
                     v479,
                     (std::vector<unsigned int> *)(v4 + 352),
                     (const proto::TrialAvatarGrantRecord *)(v4 + 416),
                     v480) != 0;
            std::vector<unsigned int>::~vector((std::vector<unsigned int> *const)(v4 + 352));
            if ( v481 )
            {
              common::milog::MiLogStream::create(
                &v536,
                &common::milog::MiLogDefault::default_log_obj_,
                3u,
                "./src/player/quest/player_quest_comp.cpp",
                "execAction",
                7287);
              v482 = common::milog::MiLogStream::operator<<<char [55],(char *[55])0>(
                       &v536,
                       (const char (*)[55])"setUpTrialAvatarVecInTeam failed, trial_avatar_id_vec:");
              v483 = common::milog::MiLogStream::operator<<<unsigned int>(
                       v482,
                       (const std::vector<unsigned int> *)(v4 + 288));
              v484 = common::milog::MiLogStream::operator<<<char [6],(char *[6])0>(v483, (const char (*)[6])" uid:");
              if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
                __asan_report_load8(&this->player_);
              *(_DWORD *)(v4 + 112) = Player::getUid(this->player_);
              common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                v484,
                (const unsigned int *)(v4 + 112));
              common::milog::MiLogStream::~MiLogStream(&v536);
            }
            else
            {
              PlayerQuestComp::findParentQuest(
                (const PlayerQuestComp *const)(v4 + 256),
                (__int64)this,
                *(_DWORD *)(v4 + 128));
              if ( std::operator!=<ParentQuest>(0LL, (const std::shared_ptr<ParentQuest> *)(v4 + 256)) )
              {
                v485 = std::__shared_ptr_access<ParentQuest,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<ParentQuest,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 256));
                ParentQuest::setIsLockTeam(v485, 1);
              }
              std::shared_ptr<ParentQuest>::~shared_ptr((std::shared_ptr<ParentQuest> *const)(v4 + 256));
            }
            proto::TrialAvatarGrantRecord::~TrialAvatarGrantRecord((proto::TrialAvatarGrantRecord *const)(v4 + 416));
          }
LABEL_774:
          std::vector<unsigned int>::~vector((std::vector<unsigned int> *const)(v4 + 288));
          goto LABEL_818;
        }
        common::milog::MiLogStream::create(
          &v536,
          &common::milog::MiLogDefault::default_log_obj_,
          3u,
          "./src/player/quest/player_quest_comp.cpp",
          "execAction",
          7263);
        v468 = common::milog::MiLogStream::operator<<<char [15],(char *[15])0>(
                 &v536,
                 (const char (*)[15])"invalid param:");
        v469 = common::milog::MiLogStream::operator<<<std::string>(v468, &exec->param);
        v9 = common::milog::MiLogStream::operator<<<char [6],(char *[6])0>(v469, (const char (*)[6])" uid:");
        if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
          __asan_report_load8(&this->player_);
        goto LABEL_817;
      case QUEST_EXEC_REFRESH_WORLD_QUEST_FLOW_GROUP_SUITE:
        if ( (unsigned __int8)PlayerQuestComp::checkAndPushQuestGroupAction(
                                this,
                                *(_DWORD *)(v4 + 128),
                                *(_DWORD *)(v4 + 144),
                                (data::QuestExec *)exec) != 1 )
          PlayerQuestComp::execRefreshWorldQuestFlowGroupSuite(this, exec, *(_DWORD *)(v4 + 144));
        goto LABEL_818;
      case QUEST_EXEC_HIDE_SCENE_POINT:
      case QUEST_EXEC_UNHIDE_SCENE_POINT:
        if ( std::vector<std::string>::size(&exec->param) <= 1 )
        {
          common::milog::MiLogStream::create(
            &v536,
            &common::milog::MiLogDefault::default_log_obj_,
            3u,
            "./src/player/quest/player_quest_comp.cpp",
            "execAction",
            7320);
          v486 = common::milog::MiLogStream::operator<<<char [15],(char *[15])0>(
                   &v536,
                   (const char (*)[15])"invalid param:");
          v487 = common::milog::MiLogStream::operator<<<std::string>(v486, &exec->param);
          v9 = common::milog::MiLogStream::operator<<<char [6],(char *[6])0>(v487, (const char (*)[6])" uid:");
          if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
            __asan_report_load8(&this->player_);
          goto LABEL_817;
        }
        *(_DWORD *)(v4 + 112) = 0;
        v488 = std::vector<std::string>::operator[](&exec->param, 0LL);
        if ( common::tools::StringUtils::strToNum<unsigned int>(v488, (unsigned int *)(v4 + 112), 1) )
        {
          common::milog::MiLogStream::create(
            &v536,
            &common::milog::MiLogDefault::default_log_obj_,
            3u,
            "./src/player/quest/player_quest_comp.cpp",
            "execAction",
            7326);
          v489 = common::milog::MiLogStream::operator<<<char [24],(char *[24])0>(
                   &v536,
                   (const char (*)[24])"strToNum failed, param:");
          v490 = std::vector<std::string>::operator[](&exec->param, 0LL);
          common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v489, v490);
          common::milog::MiLogStream::~MiLogStream(&v536);
        }
        else
        {
          if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
            __asan_report_load8(&this->player_);
          v491 = (unsigned int)Player::getSceneComp(this->player_);
          PlayerSceneComp::findScene((const PlayerSceneComp *const)(v4 + 256), v491);
          if ( std::operator==<Scene>(0LL, (const std::shared_ptr<Scene> *)(v4 + 256)) )
          {
            common::milog::MiLogStream::create(
              &v536,
              &common::milog::MiLogDefault::default_log_obj_,
              3u,
              "./src/player/quest/player_quest_comp.cpp",
              "execAction",
              7332);
            v492 = common::milog::MiLogStream::operator<<<char [28],(char *[28])0>(
                     &v536,
                     (const char (*)[28])"findScene failed, scene_id:");
            common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
              v492,
              (const unsigned int *)(v4 + 112));
            common::milog::MiLogStream::~MiLogStream(&v536);
          }
          else
          {
            std::vector<unsigned int>::vector((std::vector<unsigned int> *const)(v4 + 352));
            std::allocator<char>::allocator(v4 + 48);
            std::string::basic_string<std::allocator<char>>(
              (std::string *const)&v536,
              ",",
              (const std::allocator<char> *)(v4 + 48));
            v493 = std::vector<std::string>::operator[](&exec->param, 1uLL);
            v506 = common::tools::StringUtils::splitToList<unsigned int>(
                     v493,
                     (const std::string *)&v536,
                     (std::vector<unsigned int> *)(v4 + 352),
                     0)
                || std::vector<unsigned int>::empty((const std::vector<unsigned int> *const)(v4 + 352));
            std::string::~string(&v536);
            std::allocator<char>::~allocator(v4 + 48);
            if ( v506 )
            {
              common::milog::MiLogStream::create(
                &v536,
                &common::milog::MiLogDefault::default_log_obj_,
                3u,
                "./src/player/quest/player_quest_comp.cpp",
                "execAction",
                7338);
              v494 = common::milog::MiLogStream::operator<<<char [27],(char *[27])0>(
                       &v536,
                       (const char (*)[27])"splitToList failed, param:");
              v495 = std::vector<std::string>::operator[](&exec->param, 0LL);
              common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v494, v495);
              common::milog::MiLogStream::~MiLogStream(&v536);
            }
            else
            {
              if ( *(_BYTE *)(((unsigned __int64)&exec->type >> 3) + 0x7FFF8000) != 0
                && *(_BYTE *)(((unsigned __int64)&exec->type >> 3) + 0x7FFF8000) <= 3 )
              {
                __asan_report_load4(&exec->type);
              }
              if ( exec->type == QUEST_EXEC_UNHIDE_SCENE_POINT )
              {
                if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
                  __asan_report_load8(&this->player_);
                v496 = Player::getSceneComp(this->player_);
                PlayerSceneComp::unhidePoint(
                  v496,
                  *(_DWORD *)(v4 + 112),
                  (const std::vector<unsigned int> *)(v4 + 352),
                  1);
              }
              else
              {
                if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
                  __asan_report_load8(&this->player_);
                v497 = Player::getSceneComp(this->player_);
                PlayerSceneComp::hidePoint(
                  v497,
                  *(_DWORD *)(v4 + 112),
                  (const std::vector<unsigned int> *)(v4 + 352),
                  1);
              }
            }
            std::vector<unsigned int>::~vector((std::vector<unsigned int> *const)(v4 + 352));
          }
LABEL_805:
          std::shared_ptr<Scene>::~shared_ptr((std::shared_ptr<Scene> *const)(v4 + 256));
        }
        goto LABEL_818;
      case QUEST_EXEC_REFRESH_WORLD_QUEST_FLOW_GROUP_SUITE_BUILTIN:
        if ( (unsigned __int8)PlayerQuestComp::checkAndPushQuestGroupAction(
                                this,
                                *(_DWORD *)(v4 + 128),
                                *(_DWORD *)(v4 + 144),
                                (data::QuestExec *)exec) != 1 )
          PlayerQuestComp::execRefreshWorldQuestFlowGroupSuiteBuiltIn(this, exec, *(_DWORD *)(v4 + 128));
        goto LABEL_818;
      case QUEST_EXEC_RANDOM_CLOSED_QUEST_VAR:
        if ( std::vector<std::string>::empty(&exec->param) )
        {
          common::milog::MiLogStream::create(
            &v536,
            &common::milog::MiLogDefault::default_log_obj_,
            3u,
            "./src/player/quest/player_quest_comp.cpp",
            "execAction",
            6928);
          common::milog::MiLogStream::operator<<<char [19],(char *[19])0>(
            &v536,
            (const char (*)[19])"param vec is empty");
          common::milog::MiLogStream::~MiLogStream(&v536);
        }
        else
        {
          *(_DWORD *)(v4 + 80) = 0;
          *(_DWORD *)(v4 + 96) = 0;
          *(_DWORD *)(v4 + 112) = 0;
          if ( common::tools::StringUtils::strVecToNum<0u,unsigned int,unsigned int &,unsigned int &>(
                 &exec->param,
                 (unsigned int *)(v4 + 80),
                 (unsigned int *)(v4 + 96),
                 (unsigned int *)(v4 + 112),
                 v333,
                 v334) )
          {
            common::milog::MiLogStream::create(
              &v536,
              &common::milog::MiLogDefault::default_log_obj_,
              3u,
              "./src/player/quest/player_quest_comp.cpp",
              "execAction",
              6936);
            v335 = common::milog::MiLogStream::operator<<<char [17],(char *[17])0>(
                     &v536,
                     (const char (*)[17])"param not valid:");
            common::milog::MiLogStream::operator<<<std::string>(v335, &exec->param);
            common::milog::MiLogStream::~MiLogStream(&v536);
          }
          else
          {
            set_value_2 = common::tools::RandomUtils::rand<unsigned int>(*(_DWORD *)(v4 + 96), *(_DWORD *)(v4 + 112));
            PlayerQuestComp::updateQuestVarByServer(this, *(_DWORD *)(v4 + 128), *(_DWORD *)(v4 + 80), set_value_2, 1);
          }
        }
        goto LABEL_818;
      case QUEST_EXEC_OPTIONAL_REVIVAL_TEAM:
        if ( !std::vector<std::string>::size(&exec->param) )
        {
          common::milog::MiLogStream::create(
            &v536,
            &common::milog::MiLogDefault::default_log_obj_,
            3u,
            "./src/player/quest/player_quest_comp.cpp",
            "execAction",
            7356);
          v498 = common::milog::MiLogStream::operator<<<char [15],(char *[15])0>(
                   &v536,
                   (const char (*)[15])"invalid param:");
          v499 = common::milog::MiLogStream::operator<<<std::string>(v498, &exec->param);
          v9 = common::milog::MiLogStream::operator<<<char [6],(char *[6])0>(v499, (const char (*)[6])" uid:");
          if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
            __asan_report_load8(&this->player_);
          goto LABEL_817;
        }
        *(_DWORD *)(v4 + 96) = 0;
        v500 = std::vector<std::string>::operator[](&exec->param, 0LL);
        if ( common::tools::StringUtils::strToNum<unsigned int>(v500, (unsigned int *)(v4 + 96), 1) )
        {
          common::milog::MiLogStream::create(
            &v536,
            &common::milog::MiLogDefault::default_log_obj_,
            3u,
            "./src/player/quest/player_quest_comp.cpp",
            "execAction",
            7362);
          v501 = common::milog::MiLogStream::operator<<<char [24],(char *[24])0>(
                   &v536,
                   (const char (*)[24])"strToNum failed, param:");
          v502 = std::vector<std::string>::operator[](&exec->param, 0LL);
          common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v501, v502);
          common::milog::MiLogStream::~MiLogStream(&v536);
          goto LABEL_818;
        }
        if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
          __asan_report_load8(&this->player_);
        v503 = Player::getAvatarComp(this->player_);
        std::function<ForeachPolicy ()(Avatar &)>::function<PlayerQuestComp::execAction(std::vector<data::QuestExec> const&,unsigned int,unsigned int)::{lambda(Avatar &)#1},void,void>(
          (std::function<ForeachPolicy(Avatar&)> *const)&v536,
          (PlayerQuestComp::execAction::<lambda(Avatar&)>)(v4 + 96));
        ret = PlayerAvatarComp::foreachMyAvatarInSceneTeam(v503, (std::function<ForeachPolicy(Avatar&)> *)&v536);
        std::function<ForeachPolicy ()(Avatar &)>::~function((std::function<ForeachPolicy(Avatar&)> *const)&v536);
        if ( !ret )
          goto LABEL_818;
        common::milog::MiLogStream::create(
          &v536,
          &common::milog::MiLogDefault::default_log_obj_,
          3u,
          "./src/player/quest/player_quest_comp.cpp",
          "execAction",
          7402);
        v9 = common::milog::MiLogStream::operator<<<char [30],(char *[30])0>(
               &v536,
               (const char (*)[30])"foreachSceneTeam fails, uid: ");
        if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
          __asan_report_load8(&this->player_);
        goto LABEL_817;
      default:
        goto LABEL_818;
    }
  }
  if ( v537 == (char *)v4 )
  {
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8008) = 0LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8010) = 0LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8018) = 0LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8020) = 0LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8028) = 0LL;
    *(_DWORD *)((v4 >> 3) + 0x7FFF8030) = 0;
    *(_DWORD *)((v4 >> 3) + 0x7FFF8038) = 0;
  }
  else
  {
    *(_QWORD *)v4 = 1172321806LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8020) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8028) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8030) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v4 >> 3) + 0x7FFF8038) = -168430091;
  }
};

// Line 7365: range 0000000013E020EA-0000000013E023D0
ForeachPolicy __cdecl PlayerQuestComp::execAction(std::vector<data::QuestExec> const&,unsigned int,unsigned int)::{lambda(Avatar &)#1}::operator()(
        const PlayerQuestComp::execAction::<lambda(Avatar&)> *const __closure,
        Avatar *avatar)
{
  std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v2; // rax
  uint32_t *revival_type; // rdx
  unsigned int v4; // eax
  float v5; // xmm0_4
  float MaxEnergy; // xmm0_4
  common::milog::MiLogStream *v7; // rcx
  int hp_percent; // [rsp+1Ch] [rbp-44h]
  std::shared_ptr<Config> v10; // [rsp+20h] [rbp-40h] BYREF
  common::milog::MiLogStream v11; // [rsp+30h] [rbp-30h] BYREF

  if ( Creature::getLifeState(avatar) == LIFE_DEAD )
  {
    ServiceBox::findService<GameserverService>();
    GameserverService::getConfig((GameserverService *const)&v10);
    v2 = std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false> *const)&v10);
    hp_percent = ConstValueExcelConfigMgr::getHurtReviveHpPercent(&v2->design_config.txt_config_mgr.const_value_config_mgr);
    std::shared_ptr<Config>::~shared_ptr(&v10);
    Creature::setCurHpPercent(avatar, (float)hp_percent, CHANGE_HP_ADD_REVIVE, 1);
    Avatar::clearSpeed(avatar);
    Avatar::setLifeAlive(avatar, 0x72u, 0LL, 1);
  }
  if ( *(_BYTE *)(((unsigned __int64)__closure >> 3) + 0x7FFF8000) )
    __asan_report_load8(__closure);
  revival_type = __closure->__revival_type;
  if ( *(_BYTE *)(((unsigned __int64)__closure->__revival_type >> 3) + 0x7FFF8000) != 0
    && (char)(((__int64)__closure->__revival_type & 7) + 3) >= *(_BYTE *)(((unsigned __int64)__closure->__revival_type >> 3)
                                                                        + 0x7FFF8000) )
  {
    __asan_report_load4(__closure->__revival_type);
  }
  v4 = *revival_type;
  if ( *revival_type == 3 )
  {
    Creature::setCurHpFull(avatar, 1);
    std::shared_ptr<FightPropNtfParam>::shared_ptr((std::shared_ptr<FightPropNtfParam> *const)&v10, 0LL);
    MaxEnergy = Creature::getMaxEnergy(avatar);
    Creature::setCurEnergy(avatar, MaxEnergy, 1, (FightPropNtfParamPtr *)&v10);
    std::shared_ptr<FightPropNtfParam>::~shared_ptr((std::shared_ptr<FightPropNtfParam> *const)&v10);
    return 0;
  }
  if ( v4 <= 3 )
  {
    if ( v4 == 1 )
    {
      Creature::setCurHpFull(avatar, 1);
      return 0;
    }
    if ( v4 == 2 )
    {
      std::shared_ptr<FightPropNtfParam>::shared_ptr((std::shared_ptr<FightPropNtfParam> *const)&v10, 0LL);
      v5 = Creature::getMaxEnergy(avatar);
      Creature::setCurEnergy(avatar, v5, 1, (FightPropNtfParamPtr *)&v10);
      std::shared_ptr<FightPropNtfParam>::~shared_ptr((std::shared_ptr<FightPropNtfParam> *const)&v10);
      return 0;
    }
  }
  common::milog::MiLogStream::create(
    &v11,
    &common::milog::MiLogDefault::default_log_obj_,
    3u,
    "./src/player/quest/player_quest_comp.cpp",
    "operator()",
    7394);
  v7 = common::milog::MiLogStream::operator<<<char [22],(char *[22])0>(
         &v11,
         (const char (*)[22])"invalid revival_type:");
  if ( *(_BYTE *)(((unsigned __int64)__closure >> 3) + 0x7FFF8000) )
    __asan_report_load8(__closure);
  common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v7, __closure->__revival_type);
  common::milog::MiLogStream::~MiLogStream(&v11);
  return 0;
};

// Line 7414: range 0000000013E0F40E-0000000013E0F888
void __fastcall PlayerQuestComp::execSetDailyTaskVar(
        PlayerQuestComp *const this,
        uint32_t quest_id,
        const std::vector<std::string> *params)
{
  unsigned __int64 v3; // r12
  __int64 v4; // rax
  _DWORD *v5; // r13
  common::milog::MiLogStream *v6; // rbx
  const std::string *v7; // rax
  const std::string *v8; // rax
  const std::string *v9; // rax
  common::milog::MiLogStream *v11; // rax
  PlayerDailyTaskComp *DailyTaskComp; // rax
  common::milog::MiLogStream *v13; // rax
  common::milog::MiLogStream *v14; // rax
  unsigned int val; // [rsp+2Ch] [rbp-C4h] BYREF
  common::milog::MiLogStream v17; // [rsp+30h] [rbp-C0h] BYREF
  char v18[160]; // [rsp+50h] [rbp-A0h] BYREF

  v3 = (unsigned __int64)v18;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_1(128LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "4 48 4 12 task_id:7421 64 4 10 index:7421 80 4 10 value:7422 96 4 13 quest_id:7413";
  *(_QWORD *)(v3 + 16) = PlayerQuestComp::execSetDailyTaskVar;
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = -234556943;
  v5[536862722] = -234556924;
  v5[536862723] = -202116348;
  *(_DWORD *)(v3 + 96) = quest_id;
  if ( std::vector<std::string>::size(params) <= 2 )
  {
    common::milog::MiLogStream::create(
      &v17,
      &common::milog::MiLogDefault::default_log_obj_,
      4u,
      "./src/player/quest/player_quest_comp.cpp",
      "execSetDailyTaskVar",
      7418);
    v6 = common::milog::MiLogStream::operator<<<char [52],(char *[52])0>(
           &v17,
           (const char (*)[52])"SetDailyTaskVar: task_id + index(0~4) + value uid: ");
    if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
      __asan_report_load8(&this->player_);
LABEL_20:
    val = Player::getUid(this->player_);
    common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v6, &val);
    common::milog::MiLogStream::~MiLogStream(&v17);
    goto LABEL_21;
  }
  *(_DWORD *)(v3 + 48) = 0;
  *(_DWORD *)(v3 + 64) = 0;
  *(_DWORD *)(v3 + 80) = 0;
  v7 = std::vector<std::string>::operator[](params, 0LL);
  if ( common::tools::StringUtils::strToNum<unsigned int>(v7, (unsigned int *)(v3 + 48), 1)
    || (v8 = std::vector<std::string>::operator[](params, 1uLL),
        common::tools::StringUtils::strToNum<unsigned int>(v8, (unsigned int *)(v3 + 64), 1))
    || (v9 = std::vector<std::string>::operator[](params, 2uLL),
        common::tools::StringUtils::strToNum<int>(v9, (int *)(v3 + 80), 1)) )
  {
    common::milog::MiLogStream::create(
      &v17,
      &common::milog::MiLogDefault::default_log_obj_,
      4u,
      "./src/player/quest/player_quest_comp.cpp",
      "execSetDailyTaskVar",
      7427);
    v11 = common::milog::MiLogStream::operator<<<char [40],(char *[40])0>(
            &v17,
            (const char (*)[40])"StringUtils::strToNum fails, quest_id: ");
    common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v11, (const unsigned int *)(v3 + 96));
    common::milog::MiLogStream::~MiLogStream(&v17);
    goto LABEL_21;
  }
  if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
    __asan_report_load8(&this->player_);
  DailyTaskComp = Player::getDailyTaskComp(this->player_);
  if ( PlayerDailyTaskComp::setDailyTaskVar(
         DailyTaskComp,
         *(_DWORD *)(v3 + 48),
         *(_DWORD *)(v3 + 64),
         *(_DWORD *)(v3 + 80)) )
  {
    common::milog::MiLogStream::create(
      &v17,
      &common::milog::MiLogDefault::default_log_obj_,
      4u,
      "./src/player/quest/player_quest_comp.cpp",
      "execSetDailyTaskVar",
      7432);
    v13 = common::milog::MiLogStream::operator<<<char [33],(char *[33])0>(
            &v17,
            (const char (*)[33])"setDailyTaskVar fails, quest_id:");
    v14 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v13, (const unsigned int *)(v3 + 96));
    v6 = common::milog::MiLogStream::operator<<<char [7],(char *[7])0>(v14, (const char (*)[7])" uid: ");
    if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
      __asan_report_load8(&this->player_);
    goto LABEL_20;
  }
LABEL_21:
  if ( v18 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
};

// Line 7437: range 0000000013E0F88A-0000000013E0FD15
void __fastcall PlayerQuestComp::execIncDailyTaskVar(
        PlayerQuestComp *const this,
        uint32_t quest_id,
        const std::vector<std::string> *params)
{
  unsigned __int64 v3; // r12
  __int64 v4; // rax
  _DWORD *v5; // r13
  common::milog::MiLogStream *v6; // rbx
  const std::string *v7; // rax
  const std::string *v8; // rax
  common::milog::MiLogStream *v10; // rax
  PlayerDailyTaskComp *DailyTaskComp; // rax
  PlayerDailyTaskComp *v12; // rax
  common::milog::MiLogStream *v13; // rax
  common::milog::MiLogStream *v14; // rax
  unsigned int val; // [rsp+28h] [rbp-A8h] BYREF
  int32_t var; // [rsp+2Ch] [rbp-A4h]
  common::milog::MiLogStream v18; // [rsp+30h] [rbp-A0h] BYREF
  char v19[128]; // [rsp+50h] [rbp-80h] BYREF

  v3 = (unsigned __int64)v19;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_1(96LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "3 32 4 12 task_id:7444 48 4 10 index:7444 64 4 13 quest_id:7436";
  *(_QWORD *)(v3 + 16) = PlayerQuestComp::execIncDailyTaskVar;
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = -234556924;
  v5[536862722] = -202116348;
  *(_DWORD *)(v3 + 64) = quest_id;
  if ( std::vector<std::string>::size(params) <= 1 )
  {
    common::milog::MiLogStream::create(
      &v18,
      &common::milog::MiLogDefault::default_log_obj_,
      4u,
      "./src/player/quest/player_quest_comp.cpp",
      "execIncDailyTaskVar",
      7441);
    v6 = common::milog::MiLogStream::operator<<<char [53],(char *[53])0>(
           &v18,
           (const char (*)[53])"incDailyTaskVar: task_id + index(0~4) + value, uid: ");
    if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
      __asan_report_load8(&this->player_);
LABEL_21:
    val = Player::getUid(this->player_);
    common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v6, &val);
    common::milog::MiLogStream::~MiLogStream(&v18);
    goto LABEL_22;
  }
  *(_DWORD *)(v3 + 32) = 0;
  *(_DWORD *)(v3 + 48) = 0;
  v7 = std::vector<std::string>::operator[](params, 0LL);
  if ( common::tools::StringUtils::strToNum<unsigned int>(v7, (unsigned int *)(v3 + 32), 1)
    || (v8 = std::vector<std::string>::operator[](params, 1uLL),
        common::tools::StringUtils::strToNum<unsigned int>(v8, (unsigned int *)(v3 + 48), 1)) )
  {
    common::milog::MiLogStream::create(
      &v18,
      &common::milog::MiLogDefault::default_log_obj_,
      4u,
      "./src/player/quest/player_quest_comp.cpp",
      "execIncDailyTaskVar",
      7447);
    v10 = common::milog::MiLogStream::operator<<<char [40],(char *[40])0>(
            &v18,
            (const char (*)[40])"StringUtils::strToNum fails, quest_id: ");
    common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v10, (const unsigned int *)(v3 + 64));
    common::milog::MiLogStream::~MiLogStream(&v18);
    goto LABEL_22;
  }
  if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
    __asan_report_load8(&this->player_);
  DailyTaskComp = Player::getDailyTaskComp(this->player_);
  var = PlayerDailyTaskComp::getDailyTaskVar(DailyTaskComp, *(_DWORD *)(v3 + 32), *(_DWORD *)(v3 + 48)) + 1;
  if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
    __asan_report_load8(&this->player_);
  v12 = Player::getDailyTaskComp(this->player_);
  if ( PlayerDailyTaskComp::setDailyTaskVar(v12, *(_DWORD *)(v3 + 32), *(_DWORD *)(v3 + 48), var) )
  {
    common::milog::MiLogStream::create(
      &v18,
      &common::milog::MiLogDefault::default_log_obj_,
      4u,
      "./src/player/quest/player_quest_comp.cpp",
      "execIncDailyTaskVar",
      7454);
    v13 = common::milog::MiLogStream::operator<<<char [33],(char *[33])0>(
            &v18,
            (const char (*)[33])"setDailyTaskVar fails, quest_id:");
    v14 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v13, (const unsigned int *)(v3 + 64));
    v6 = common::milog::MiLogStream::operator<<<char [7],(char *[7])0>(v14, (const char (*)[7])" uid: ");
    if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
      __asan_report_load8(&this->player_);
    goto LABEL_21;
  }
LABEL_22:
  if ( v19 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8008) = 0;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8008) = -168430091;
  }
};

// Line 7459: range 0000000013E0FD16-0000000013E10147
void __fastcall PlayerQuestComp::execDecDailyTaskVar(
        PlayerQuestComp *const this,
        uint32_t quest_id,
        const std::vector<std::string> *params)
{
  unsigned __int64 v3; // r12
  __int64 v4; // rax
  _DWORD *v5; // r13
  const std::string *v6; // rax
  const std::string *v7; // rax
  common::milog::MiLogStream *v9; // rax
  PlayerDailyTaskComp *DailyTaskComp; // rax
  PlayerDailyTaskComp *v11; // rax
  common::milog::MiLogStream *v12; // rax
  common::milog::MiLogStream *v13; // rax
  common::milog::MiLogStream *v14; // rbx
  unsigned int val; // [rsp+28h] [rbp-A8h] BYREF
  int32_t var; // [rsp+2Ch] [rbp-A4h]
  common::milog::MiLogStream v18; // [rsp+30h] [rbp-A0h] BYREF
  char v19[128]; // [rsp+50h] [rbp-80h] BYREF

  v3 = (unsigned __int64)v19;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_1(96LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "3 32 4 12 task_id:7466 48 4 10 index:7466 64 4 13 quest_id:7458";
  *(_QWORD *)(v3 + 16) = PlayerQuestComp::execDecDailyTaskVar;
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = -234556924;
  v5[536862722] = -202116348;
  *(_DWORD *)(v3 + 64) = quest_id;
  if ( std::vector<std::string>::size(params) > 1 )
  {
    *(_DWORD *)(v3 + 32) = 0;
    *(_DWORD *)(v3 + 48) = 0;
    v6 = std::vector<std::string>::operator[](params, 0LL);
    if ( common::tools::StringUtils::strToNum<unsigned int>(v6, (unsigned int *)(v3 + 32), 1)
      || (v7 = std::vector<std::string>::operator[](params, 1uLL),
          common::tools::StringUtils::strToNum<unsigned int>(v7, (unsigned int *)(v3 + 48), 1)) )
    {
      common::milog::MiLogStream::create(
        &v18,
        &common::milog::MiLogDefault::default_log_obj_,
        4u,
        "./src/player/quest/player_quest_comp.cpp",
        "execDecDailyTaskVar",
        7470);
      v9 = common::milog::MiLogStream::operator<<<char [40],(char *[40])0>(
             &v18,
             (const char (*)[40])"StringUtils::strToNum fails, quest_id: ");
      common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v9, (const unsigned int *)(v3 + 64));
      common::milog::MiLogStream::~MiLogStream(&v18);
    }
    else
    {
      if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
        __asan_report_load8(&this->player_);
      DailyTaskComp = Player::getDailyTaskComp(this->player_);
      var = PlayerDailyTaskComp::getDailyTaskVar(DailyTaskComp, *(_DWORD *)(v3 + 32), *(_DWORD *)(v3 + 48)) - 1;
      if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
        __asan_report_load8(&this->player_);
      v11 = Player::getDailyTaskComp(this->player_);
      if ( PlayerDailyTaskComp::setDailyTaskVar(v11, *(_DWORD *)(v3 + 32), *(_DWORD *)(v3 + 48), var) )
      {
        common::milog::MiLogStream::create(
          &v18,
          &common::milog::MiLogDefault::default_log_obj_,
          4u,
          "./src/player/quest/player_quest_comp.cpp",
          "execDecDailyTaskVar",
          7477);
        v12 = common::milog::MiLogStream::operator<<<char [33],(char *[33])0>(
                &v18,
                (const char (*)[33])"setDailyTaskVar fails, quest_id:");
        v13 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                v12,
                (const unsigned int *)(v3 + 64));
        v14 = common::milog::MiLogStream::operator<<<char [7],(char *[7])0>(v13, (const char (*)[7])" uid: ");
        if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
          __asan_report_load8(&this->player_);
        val = Player::getUid(this->player_);
        common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v14, &val);
        common::milog::MiLogStream::~MiLogStream(&v18);
      }
    }
  }
  else
  {
    common::milog::MiLogStream::create(
      &v18,
      &common::milog::MiLogDefault::default_log_obj_,
      4u,
      "./src/player/quest/player_quest_comp.cpp",
      "execDecDailyTaskVar",
      7463);
    common::milog::MiLogStream::operator<<<char [46],(char *[46])0>(
      &v18,
      (const char (*)[46])"DecDailyTaskVar: task_id + index(0~4) + value");
    common::milog::MiLogStream::~MiLogStream(&v18);
  }
  if ( v19 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8008) = 0;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8008) = -168430091;
  }
};

// Line 7482: range 0000000013E10148-0000000013E1015B
bool __cdecl PlayerQuestComp::isClientAcceptCond(PlayerQuestComp *const this, data::QuestCondType cond_type)
{
  return cond_type == QUEST_COND_COMPLETE_TALK;
};

// Line 7488: range 0000000013E101DC-0000000013E10ABA
void __cdecl PlayerQuestComp::updateServerCondMeetStatus(
        PlayerQuestComp *const this,
        const std::vector<unsigned int> *quest_id_vec,
        bool is_notify)
{
  unsigned __int64 v3; // r13
  __int64 v4; // rax
  _DWORD *v5; // r12
  std::vector<unsigned int>::size_type v6; // rax
  __gnu_cxx::__normal_iterator<unsigned int const*,std::vector<unsigned int> >::reference v7; // rax
  _DWORD *v8; // rdx
  const data::QuestCond *M_current; // r14
  std::vector<data::QuestCond>::const_iterator v10; // rax
  ParentQuest *v11; // rax
  int v13; // r14d
  std::vector<bool>::size_type v14; // rax
  std::vector<bool>::size_type v15; // rax
  bool v16; // r14
  bool real_result; // [rsp+23h] [rbp-1DDh]
  data::LogicType logic_type; // [rsp+24h] [rbp-1DCh]
  std::vector<unsigned int>::const_iterator __for_begin; // [rsp+28h] [rbp-1D8h] BYREF
  std::vector<unsigned int>::const_iterator __for_end; // [rsp+30h] [rbp-1D0h] BYREF
  std::vector<data::QuestCond>::const_iterator __for_begin_0; // [rsp+38h] [rbp-1C8h] BYREF
  std::vector<data::QuestCond>::const_iterator __for_end_0; // [rsp+40h] [rbp-1C0h] BYREF
  const std::vector<unsigned int> *__for_range; // [rsp+48h] [rbp-1B8h]
  const data::QuestExcelConfig *quest_config_ptr; // [rsp+50h] [rbp-1B0h]
  const data::MainQuestExcelConfig *parent_quest_config_ptr; // [rsp+58h] [rbp-1A8h]
  const std::vector<data::QuestCond> *__for_range_0; // [rsp+60h] [rbp-1A0h]
  const data::QuestCond *cond; // [rsp+68h] [rbp-198h]
  char v29[400]; // [rsp+70h] [rbp-190h] BYREF

  v3 = (unsigned __int64)v29;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_3(352LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "6 48 4 13 quest_id:7495 64 8 15 check_func:7491 96 16 21 parent_quest_ptr:7525 128 24 24 notify_"
                        "quest_id_vec:7489 192 40 19 cond_check_vec:7538 272 40 26 client_true_check_vec:7539";
  *(_QWORD *)(v3 + 16) = PlayerQuestComp::updateServerCondMeetStatus;
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = -234556943;
  v5[536862722] = -218959360;
  v5[536862723] = -219021312;
  v5[536862724] = -234881024;
  v5[536862725] = -218959118;
  v5[536862727] = -218959360;
  v5[536862728] = 62194;
  v5[536862729] = -218103808;
  v5[536862730] = -202116109;
  std::vector<unsigned int>::vector((std::vector<unsigned int> *const)(v3 + 128));
  v6 = std::vector<unsigned int>::size(quest_id_vec);
  std::vector<unsigned int>::reserve((std::vector<unsigned int> *const)(v3 + 128), v6);
  *(_QWORD *)(v3 + 64) = this;
  __for_range = quest_id_vec;
  __for_begin._M_current = std::vector<unsigned int>::begin(quest_id_vec)._M_current;
  __for_end._M_current = std::vector<unsigned int>::end(quest_id_vec)._M_current;
  while ( __gnu_cxx::operator!=<unsigned int const*,std::vector<unsigned int>>(&__for_begin, &__for_end) )
  {
    v7 = __gnu_cxx::__normal_iterator<unsigned int const*,std::vector<unsigned int>>::operator*(&__for_begin);
    v8 = v7;
    if ( *(_BYTE *)(((unsigned __int64)v7 >> 3) + 0x7FFF8000) != 0
      && (char)(((unsigned __int8)v7 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)v7 >> 3) + 0x7FFF8000) )
    {
      __asan_report_load4(v7);
    }
    *(_DWORD *)(v3 + 48) = *v8;
    quest_config_ptr = PlayerQuestComp::findPlayerQuestExcelConfig(this, *(_DWORD *)(v3 + 48));
    if ( quest_config_ptr )
    {
      __for_end_0._M_current = std::vector<data::QuestCond>::end(&quest_config_ptr->accept_cond)._M_current;
      M_current = std::vector<data::QuestCond>::end(&quest_config_ptr->accept_cond)._M_current;
      v10._M_current = std::vector<data::QuestCond>::begin(&quest_config_ptr->accept_cond)._M_current;
      __for_begin_0._M_current = std::find_if<__gnu_cxx::__normal_iterator<data::QuestCond const*,std::vector<data::QuestCond>>,PlayerQuestComp::updateServerCondMeetStatus(std::vector const&<unsigned int,std::allocator<unsigned int>>,bool)::{lambda(data::QuestCond const&)#1}>(
                                   v10,
                                   (__gnu_cxx::__normal_iterator<const data::QuestCond*,std::vector<data::QuestCond> >)M_current,
                                   *(PlayerQuestComp::updateServerCondMeetStatus::<lambda(const data::QuestCond&)> *)(v3 + 64))._M_current;
      if ( !__gnu_cxx::operator==<data::QuestCond const*,std::vector<data::QuestCond>>(&__for_begin_0, &__for_end_0) )
      {
        std::unordered_set<unsigned int>::erase(
          &this->server_cond_meet_quest_set_,
          (const std::unordered_set<unsigned int>::key_type *)(v3 + 48));
        std::vector<unsigned int>::push_back(
          (std::vector<unsigned int> *const)(v3 + 128),
          (const std::vector<unsigned int>::value_type *)(v3 + 48));
        if ( PlayerQuestComp::isQuestExist(this, *(_DWORD *)(v3 + 48)) )
          goto LABEL_11;
        if ( *(_BYTE *)(((unsigned __int64)&quest_config_ptr->main_id >> 3) + 0x7FFF8000) != 0
          && (char)((((_BYTE)quest_config_ptr + 12) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&quest_config_ptr->main_id >> 3)
                                                                          + 0x7FFF8000) )
        {
          __asan_report_load4(&quest_config_ptr->main_id);
        }
        parent_quest_config_ptr = PlayerQuestComp::findPlayerParentQuestExcelConfig(this, quest_config_ptr->main_id);
        if ( !parent_quest_config_ptr )
        {
LABEL_11:
          std::unordered_set<unsigned int>::erase(
            &this->server_cond_meet_quest_set_,
            (const std::unordered_set<unsigned int>::key_type *)(v3 + 48));
        }
        else
        {
          if ( *(_BYTE *)(((unsigned __int64)&parent_quest_config_ptr->repeatable >> 3) + 0x7FFF8000) != 0
            && (((unsigned __int8)parent_quest_config_ptr + 68) & 7) >= *(_BYTE *)(((unsigned __int64)&parent_quest_config_ptr->repeatable >> 3)
                                                                                 + 0x7FFF8000) )
          {
            __asan_report_load1(&parent_quest_config_ptr->repeatable);
          }
          if ( parent_quest_config_ptr->repeatable )
            goto LABEL_28;
          if ( *(_BYTE *)(((unsigned __int64)&quest_config_ptr->main_id >> 3) + 0x7FFF8000) != 0
            && (char)((((_BYTE)quest_config_ptr + 12) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&quest_config_ptr->main_id >> 3)
                                                                            + 0x7FFF8000) )
          {
            __asan_report_load4(&quest_config_ptr->main_id);
          }
          PlayerQuestComp::findParentQuest(
            (const PlayerQuestComp *const)(v3 + 96),
            (__int64)this,
            quest_config_ptr->main_id);
          if ( std::operator!=<ParentQuest>((const std::shared_ptr<ParentQuest> *)(v3 + 96), 0LL)
            && (v11 = std::__shared_ptr_access<ParentQuest,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<ParentQuest,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 96)),
                ParentQuest::getTotalFinishCount(v11)) )
          {
            std::unordered_set<unsigned int>::erase(
              &this->server_cond_meet_quest_set_,
              (const std::unordered_set<unsigned int>::key_type *)(v3 + 48));
            v13 = 0;
          }
          else
          {
            v13 = 1;
          }
          std::shared_ptr<ParentQuest>::~shared_ptr((std::shared_ptr<ParentQuest> *const)(v3 + 96));
          if ( v13 == 1 )
          {
LABEL_28:
            if ( *(_BYTE *)(((unsigned __int64)&quest_config_ptr->accept_cond_comb >> 3) + 0x7FFF8000) != 0
              && *(_BYTE *)(((unsigned __int64)&quest_config_ptr->accept_cond_comb >> 3) + 0x7FFF8000) <= 3 )
            {
              __asan_report_load4(&quest_config_ptr->accept_cond_comb);
            }
            logic_type = quest_config_ptr->accept_cond_comb;
            if ( logic_type == LOGIC_NONE )
              logic_type = LOGIC_AND;
            std::vector<bool>::vector((std::vector<bool> *const)(v3 + 192));
            std::vector<bool>::vector((std::vector<bool> *const)(v3 + 272));
            v14 = std::vector<data::QuestCond>::size(&quest_config_ptr->accept_cond);
            std::vector<bool>::reserve((std::vector<bool> *const)(v3 + 192), v14);
            v15 = std::vector<data::QuestCond>::size(&quest_config_ptr->accept_cond);
            std::vector<bool>::reserve((std::vector<bool> *const)(v3 + 272), v15);
            __for_range_0 = &quest_config_ptr->accept_cond;
            __for_begin_0._M_current = std::vector<data::QuestCond>::begin(&quest_config_ptr->accept_cond)._M_current;
            __for_end_0._M_current = std::vector<data::QuestCond>::end(__for_range_0)._M_current;
            while ( __gnu_cxx::operator!=<data::QuestCond const*,std::vector<data::QuestCond>>(
                      &__for_begin_0,
                      &__for_end_0) )
            {
              cond = __gnu_cxx::__normal_iterator<data::QuestCond const*,std::vector<data::QuestCond>>::operator*(&__for_begin_0);
              real_result = (unsigned __int8)PlayerQuestComp::checkCond(this, *(_DWORD *)(v3 + 48), cond) != 0;
              std::vector<bool>::push_back((std::vector<bool> *const)(v3 + 192), real_result);
              if ( *(_BYTE *)(((unsigned __int64)&cond->type >> 3) + 0x7FFF8000) != 0
                && *(_BYTE *)(((unsigned __int64)&cond->type >> 3) + 0x7FFF8000) <= 3 )
              {
                __asan_report_load4(&cond->type);
              }
              if ( PlayerQuestComp::isClientAcceptCond(this, cond->type) )
                std::vector<bool>::push_back((std::vector<bool> *const)(v3 + 272), 1);
              else
                std::vector<bool>::push_back((std::vector<bool> *const)(v3 + 272), real_result);
              __gnu_cxx::__normal_iterator<data::QuestCond const*,std::vector<data::QuestCond>>::operator++(&__for_begin_0);
            }
            v16 = CommonMiscs::evaluateLogicComb(logic_type, (const std::vector<bool> *)(v3 + 192));
            if ( v16 == CommonMiscs::evaluateLogicComb(logic_type, (const std::vector<bool> *)(v3 + 272)) )
              std::unordered_set<unsigned int>::erase(
                &this->server_cond_meet_quest_set_,
                (const std::unordered_set<unsigned int>::key_type *)(v3 + 48));
            else
              std::unordered_set<unsigned int>::insert(
                &this->server_cond_meet_quest_set_,
                (const std::unordered_set<unsigned int>::value_type *)(v3 + 48));
            std::vector<bool>::~vector((std::vector<bool> *const)(v3 + 272));
            std::vector<bool>::~vector((std::vector<bool> *const)(v3 + 192));
          }
        }
      }
    }
    __gnu_cxx::__normal_iterator<unsigned int const*,std::vector<unsigned int>>::operator++(&__for_begin);
  }
  if ( is_notify )
    PlayerQuestComp::notifyServerCondMeetQuest(this, (const std::vector<unsigned int> *)(v3 + 128));
  std::vector<unsigned int>::~vector((std::vector<unsigned int> *const)(v3 + 128));
  if ( v29 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8010) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF801C) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8024) = 0LL;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8020) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8028) = -168430091;
  }
};

// Line 7491: range 0000000013E1015C-0000000013E101DA
bool __cdecl PlayerQuestComp::updateServerCondMeetStatus(std::vector<unsigned int> const&,bool)::{lambda(data::QuestCond const&)#1}::operator()(
        const PlayerQuestComp::updateServerCondMeetStatus::<lambda(const data::QuestCond&)> *const __closure,
        const data::QuestCond *cond)
{
  PlayerQuestComp *this; // rdx

  if ( *(_BYTE *)(((unsigned __int64)__closure >> 3) + 0x7FFF8000) )
    __asan_report_load8(__closure);
  this = __closure->__this;
  if ( *(_BYTE *)(((unsigned __int64)&cond->type >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&cond->type >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4(&cond->type);
  }
  return PlayerQuestComp::isClientAcceptCond(this, cond->type);
};

// Line 7575: range 0000000013E10ABC-0000000013E10D37
void __cdecl PlayerQuestComp::notifyServerCondMeetQuest(
        PlayerQuestComp *const this,
        const std::vector<unsigned int> *quest_id_vec)
{
  unsigned __int64 v2; // r12
  __int64 v3; // rax
  _DWORD *v4; // r13
  __gnu_cxx::__normal_iterator<unsigned int const*,std::vector<unsigned int> >::reference v5; // rax
  _DWORD *v6; // rdx
  std::vector<unsigned int>::const_iterator __for_begin; // [rsp+18h] [rbp-D8h] BYREF
  std::vector<unsigned int>::const_iterator __for_end; // [rsp+20h] [rbp-D0h] BYREF
  const std::vector<unsigned int> *__for_range; // [rsp+28h] [rbp-C8h]
  char v10[192]; // [rsp+30h] [rbp-C0h] BYREF

  v2 = (unsigned __int64)v10;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_2(160LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "2 48 4 13 quest_id:7577 64 64 11 notify:7576";
  *(_QWORD *)(v2 + 16) = PlayerQuestComp::notifyServerCondMeetQuest;
  v4 = (_DWORD *)(v2 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = -234556943;
  v4[536862724] = -202116109;
  proto::ServerCondMeetQuestListUpdateNotify::ServerCondMeetQuestListUpdateNotify((proto::ServerCondMeetQuestListUpdateNotify *const)(v2 + 64));
  __for_range = quest_id_vec;
  __for_begin._M_current = std::vector<unsigned int>::begin(quest_id_vec)._M_current;
  __for_end._M_current = std::vector<unsigned int>::end(quest_id_vec)._M_current;
  while ( __gnu_cxx::operator!=<unsigned int const*,std::vector<unsigned int>>(&__for_begin, &__for_end) )
  {
    v5 = __gnu_cxx::__normal_iterator<unsigned int const*,std::vector<unsigned int>>::operator*(&__for_begin);
    v6 = v5;
    if ( *(_BYTE *)(((unsigned __int64)v5 >> 3) + 0x7FFF8000) != 0
      && (char)(((unsigned __int8)v5 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)v5 >> 3) + 0x7FFF8000) )
    {
      __asan_report_load4(v5);
    }
    *(_DWORD *)(v2 + 48) = *v6;
    if ( common::tools::MiscUtils::isContains<std::unordered_set<unsigned int>,unsigned int>(
           &this->server_cond_meet_quest_set_,
           (const unsigned int *)(v2 + 48)) )
    {
      proto::ServerCondMeetQuestListUpdateNotify::add_add_quest_id_list(
        (proto::ServerCondMeetQuestListUpdateNotify *const)(v2 + 64),
        *(_DWORD *)(v2 + 48));
    }
    else
    {
      proto::ServerCondMeetQuestListUpdateNotify::add_del_quest_id_list(
        (proto::ServerCondMeetQuestListUpdateNotify *const)(v2 + 64),
        *(_DWORD *)(v2 + 48));
    }
    __gnu_cxx::__normal_iterator<unsigned int const*,std::vector<unsigned int>>::operator++(&__for_begin);
  }
  if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
    __asan_report_load8(&this->player_);
  Player::sendProto(this->player_, (const google::protobuf::Message *)(v2 + 64));
  proto::ServerCondMeetQuestListUpdateNotify::~ServerCondMeetQuestListUpdateNotify((proto::ServerCondMeetQuestListUpdateNotify *const)(v2 + 64));
  if ( v10 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8010) = 0;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8010) = -168430091;
  }
};

// Line 7593: range 0000000013E10D38-0000000013E10DA2
void __cdecl PlayerQuestComp::notifyAllQuestGlobalVar(PlayerQuestComp *const this)
{
  std::vector<unsigned int> key_vec; // [rsp+10h] [rbp-30h] BYREF

  common::tools::MiscUtils::getAllMapKeys<std::unordered_map<unsigned int,int>>(&key_vec, &this->quest_global_var_map_);
  PlayerQuestComp::notifyQuestGlobalVar(this, &key_vec);
  std::vector<unsigned int>::~vector(&key_vec);
};

// Line 7598: range 0000000013E10DA4-0000000013E11024
void __cdecl PlayerQuestComp::notifyQuestGlobalVar(
        PlayerQuestComp *const this,
        const std::vector<unsigned int> *key_vec)
{
  unsigned __int64 v2; // rbx
  __int64 v3; // rax
  _DWORD *v4; // r12
  unsigned int *v5; // rax
  uint32_t *v6; // rdx
  google::protobuf::int32 GlobalVarValue; // eax
  uint32_t key; // [rsp+1Ch] [rbp-C4h]
  std::vector<unsigned int>::const_iterator __for_begin; // [rsp+20h] [rbp-C0h] BYREF
  std::vector<unsigned int>::const_iterator __for_end; // [rsp+28h] [rbp-B8h] BYREF
  const std::vector<unsigned int> *__for_range; // [rsp+30h] [rbp-B0h]
  proto::QuestGlobalVar *var; // [rsp+38h] [rbp-A8h]
  char v13[160]; // [rsp+40h] [rbp-A0h] BYREF

  v2 = (unsigned __int64)v13;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_1(128LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "1 48 48 11 notify:7599";
  *(_QWORD *)(v2 + 16) = PlayerQuestComp::notifyQuestGlobalVar;
  v4 = (_DWORD *)(v2 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = 61937;
  v4[536862723] = -202116109;
  proto::QuestGlobalVarNotify::QuestGlobalVarNotify((proto::QuestGlobalVarNotify *const)(v2 + 48));
  __for_range = key_vec;
  __for_begin._M_current = std::vector<unsigned int>::begin(key_vec)._M_current;
  __for_end._M_current = std::vector<unsigned int>::end(key_vec)._M_current;
  while ( __gnu_cxx::operator!=<unsigned int const*,std::vector<unsigned int>>(&__for_begin, &__for_end) )
  {
    v5 = (unsigned int *)__gnu_cxx::__normal_iterator<unsigned int const*,std::vector<unsigned int>>::operator*(&__for_begin);
    v6 = v5;
    if ( *(_BYTE *)(((unsigned __int64)v5 >> 3) + 0x7FFF8000) != 0
      && (char)(((unsigned __int8)v5 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)v5 >> 3) + 0x7FFF8000) )
    {
      __asan_report_load4(v5);
    }
    key = *v6;
    var = proto::QuestGlobalVarNotify::add_var_list((proto::QuestGlobalVarNotify *const)(v2 + 48));
    proto::QuestGlobalVar::set_key(var, key);
    GlobalVarValue = PlayerQuestComp::getGlobalVarValue(this, key);
    proto::QuestGlobalVar::set_value(var, GlobalVarValue);
    __gnu_cxx::__normal_iterator<unsigned int const*,std::vector<unsigned int>>::operator++(&__for_begin);
  }
  if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
    __asan_report_load8(&this->player_);
  Player::sendProto(this->player_, (const google::protobuf::Message *)(v2 + 48));
  proto::QuestGlobalVarNotify::~QuestGlobalVarNotify((proto::QuestGlobalVarNotify *const)(v2 + 48));
  if ( v13 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF800C) = 0;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
};

// Line 7610: range 0000000013E11026-0000000013E11315
__int64 __fastcall PlayerQuestComp::getGlobalVarValue(const PlayerQuestComp *const this, uint32_t key)
{
  unsigned __int64 v2; // rbx
  __int64 v3; // rax
  _DWORD *v4; // r12
  std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v5; // rax
  common::milog::MiLogStream *v6; // rax
  __int64 result; // rax
  std::__detail::_Node_const_iterator<std::pair<unsigned int const,int>,false,false>::pointer v8; // rdx
  int *p_second; // rax
  std::__detail::_Node_iterator_base<std::pair<unsigned int const,int>,false> __y; // [rsp+10h] [rbp-C0h] BYREF
  const data::QuestGlobalVarConfig *value_config_ptr; // [rsp+18h] [rbp-B8h]
  std::shared_ptr<Config> v12; // [rsp+20h] [rbp-B0h] BYREF
  common::milog::MiLogStream v13; // [rsp+30h] [rbp-A0h] BYREF
  char v14[128]; // [rsp+50h] [rbp-80h] BYREF

  v2 = (unsigned __int64)v14;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_1(96LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "2 48 4 8 key:7609 64 8 9 iter:7617";
  *(_QWORD *)(v2 + 16) = PlayerQuestComp::getGlobalVarValue;
  v4 = (_DWORD *)(v2 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = -234556943;
  v4[536862722] = -202116352;
  *(_DWORD *)(v2 + 48) = key;
  ServiceBox::findService<GameserverService>();
  GameserverService::getConfig((GameserverService *const)&v12);
  v5 = std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false> *const)&v12);
  value_config_ptr = data::QuestExcelConfigMgrBase::findQuestGlobalVarConfig(
                       &v5->design_config.txt_config_mgr.quest_config_mgr,
                       *(_DWORD *)(v2 + 48));
  std::shared_ptr<Config>::~shared_ptr(&v12);
  if ( value_config_ptr )
  {
    *(std::unordered_map<unsigned int,int>::const_iterator *)(v2 + 64) = std::unordered_map<unsigned int,int>::find(
                                                                           &this->quest_global_var_map_,
                                                                           (const std::unordered_map<unsigned int,int>::key_type *)(v2 + 48));
    __y._M_cur = std::unordered_map<unsigned int,int>::end(&this->quest_global_var_map_)._M_cur;
    if ( std::__detail::operator==<std::pair<unsigned int const,int>,false>(
           (const std::__detail::_Node_iterator_base<std::pair<unsigned int const,int>,false> *)(v2 + 64),
           &__y) )
    {
      if ( *(_BYTE *)(((unsigned __int64)&value_config_ptr->default_value >> 3) + 0x7FFF8000) != 0
        && (char)((((_BYTE)value_config_ptr + 12) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&value_config_ptr->default_value >> 3)
                                                                        + 0x7FFF8000) )
      {
        __asan_report_load4(&value_config_ptr->default_value);
      }
      result = (unsigned int)value_config_ptr->default_value;
    }
    else
    {
      v8 = std::__detail::_Node_const_iterator<std::pair<unsigned int const,int>,false,false>::operator->((const std::__detail::_Node_const_iterator<std::pair<unsigned int const,int>,false,false> *const)(v2 + 64));
      p_second = &v8->second;
      if ( *(_BYTE *)(((unsigned __int64)p_second >> 3) + 0x7FFF8000) != 0
        && (char)(((unsigned __int8)p_second & 7) + 3) >= *(_BYTE *)(((unsigned __int64)p_second >> 3) + 0x7FFF8000) )
      {
        __asan_report_load4(p_second);
      }
      result = (unsigned int)v8->second;
    }
  }
  else
  {
    common::milog::MiLogStream::create(
      &v13,
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/player/quest/player_quest_comp.cpp",
      "getGlobalVarValue",
      7614);
    v6 = common::milog::MiLogStream::operator<<<char [25],(char *[25])0>(
           &v13,
           (const char (*)[25])"cannot find config: key:");
    common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v6, (const unsigned int *)(v2 + 48));
    common::milog::MiLogStream::~MiLogStream(&v13);
    result = 0LL;
  }
  if ( v14 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8008) = 0;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8008) = -168430091;
  }
  return result;
};

// Line 7626: range 0000000013E11316-0000000013E117B3
void __fastcall PlayerQuestComp::setGlobalVarValue(
        PlayerQuestComp *const this,
        uint32_t key,
        int32_t value,
        bool is_notify)
{
  unsigned __int64 v4; // r12
  __int64 v5; // rax
  _DWORD *v6; // r13
  std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v7; // rax
  common::milog::MiLogStream *v8; // rax
  std::unordered_map<unsigned int,int>::mapped_type *v9; // rax
  _DWORD *v10; // rdx
  char v11; // cl
  char *v12; // rsi
  __int64 v13; // rcx
  PlayerEventComp *EventComp; // r14
  int *v15; // r8
  int *v16; // r9
  int v17; // [rsp+8h] [rbp-118h]
  std::allocator<unsigned int> __a; // [rsp+23h] [rbp-FDh] BYREF
  std::initializer_list<unsigned int> __l; // [rsp+24h] [rbp-FCh] BYREF
  std::shared_ptr<Config> v22; // [rsp+40h] [rbp-E0h] BYREF
  std::vector<unsigned int> key_vec; // [rsp+50h] [rbp-D0h] BYREF
  common::milog::MiLogStream v24; // [rsp+70h] [rbp-B0h] BYREF
  char v25[144]; // [rsp+90h] [rbp-90h] BYREF

  v4 = (unsigned __int64)v25;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v5 = __asan_stack_malloc_1(96LL);
    if ( v5 )
      v4 = v5;
  }
  *(_QWORD *)v4 = 1102416563LL;
  *(_QWORD *)(v4 + 8) = "3 32 4 14 old_value:7633 48 4 8 key:7625 64 4 10 value:7625";
  *(_QWORD *)(v4 + 16) = PlayerQuestComp::setGlobalVarValue;
  v6 = (_DWORD *)(v4 >> 3);
  v6[536862720] = -235802127;
  v6[536862721] = -234556924;
  v6[536862722] = -202116348;
  *(_DWORD *)(v4 + 48) = key;
  *(_DWORD *)(v4 + 64) = value;
  ServiceBox::findService<GameserverService>();
  GameserverService::getConfig((GameserverService *const)&v22);
  v7 = std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false> *const)&v22);
  *(std::initializer_list<unsigned int>::iterator *)((char *)&__l._M_array + 4) = (std::initializer_list<unsigned int>::iterator)data::QuestExcelConfigMgrBase::findQuestGlobalVarConfig(&v7->design_config.txt_config_mgr.quest_config_mgr, *(_DWORD *)(v4 + 48));
  std::shared_ptr<Config>::~shared_ptr(&v22);
  if ( *(std::initializer_list<unsigned int>::iterator *)((char *)&__l._M_array + 4) )
  {
    *(_DWORD *)(v4 + 32) = PlayerQuestComp::getGlobalVarValue(this, *(_DWORD *)(v4 + 48));
    v17 = *(_DWORD *)(v4 + 64);
    v12 = (char *)(v4 + 48);
    v9 = std::unordered_map<unsigned int,int>::operator[](
           &this->quest_global_var_map_,
           (const std::unordered_map<unsigned int,int>::key_type *)(v4 + 48));
    v10 = v9;
    v11 = *(_BYTE *)(((unsigned __int64)v9 >> 3) + 0x7FFF8000);
    LOBYTE(v12) = v11 != 0;
    v13 = (v11 != 0) & (unsigned __int8)((char)(((unsigned __int8)v9 & 7) + 3) >= v11);
    if ( (_BYTE)v13 )
      __asan_report_store4(v9, v12, v9, v13);
    *v10 = v17;
    if ( is_notify )
    {
      LODWORD(__l._M_array) = *(_DWORD *)(v4 + 48);
      std::allocator<unsigned int>::allocator(&__a);
      std::vector<unsigned int>::vector(&key_vec, (std::initializer_list<unsigned int>)__PAIR128__(1LL, &__l), &__a);
      PlayerQuestComp::notifyQuestGlobalVar(this, &key_vec);
      std::vector<unsigned int>::~vector(&key_vec);
      std::allocator<unsigned int>::~allocator(&__a);
    }
    if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
      __asan_report_load8(&this->player_);
    EventComp = Player::getEventComp(this->player_);
    common::tools::perf::make_shared<QuestGlobalVarUpdateEvent,unsigned int &,int &,int &>(
      (unsigned int *)&__l._M_len + 1,
      (int *)(v4 + 48),
      (int *)(v4 + 32),
      (unsigned int *)(v4 + 64),
      v15,
      v16);
    std::shared_ptr<BaseEvent>::shared_ptr<QuestGlobalVarUpdateEvent,void>(
      (std::shared_ptr<BaseEvent> *const)&v22,
      (std::shared_ptr<QuestGlobalVarUpdateEvent> *)((char *)&__l._M_len + 4));
    PlayerEventComp::notifyEvent(EventComp, (BaseEventPtr *)&v22);
    std::shared_ptr<BaseEvent>::~shared_ptr((std::shared_ptr<BaseEvent> *const)&v22);
    std::shared_ptr<QuestGlobalVarUpdateEvent>::~shared_ptr((std::shared_ptr<QuestGlobalVarUpdateEvent> *const)((char *)&__l._M_len + 4));
    PlayerQuestComp::tryAcceptQuestByCond(this, QUEST_COND_QUEST_GLOBAL_VAR_EQUAL, is_notify, 0);
    PlayerQuestComp::tryAcceptQuestByCond(this, QUEST_COND_QUEST_GLOBAL_VAR_GREATER, is_notify, 0);
    PlayerQuestComp::tryAcceptQuestByCond(this, QUEST_COND_QUEST_GLOBAL_VAR_LESS, is_notify, 0);
  }
  else
  {
    common::milog::MiLogStream::create(
      &v24,
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/player/quest/player_quest_comp.cpp",
      "setGlobalVarValue",
      7630);
    v8 = common::milog::MiLogStream::operator<<<char [25],(char *[25])0>(
           &v24,
           (const char (*)[25])"cannot find config: key:");
    common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v8, (const unsigned int *)(v4 + 48));
    common::milog::MiLogStream::~MiLogStream(&v24);
  }
  if ( v25 == (char *)v4 )
  {
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0LL;
    *(_DWORD *)((v4 >> 3) + 0x7FFF8008) = 0;
  }
  else
  {
    *(_QWORD *)v4 = 1172321806LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v4 >> 3) + 0x7FFF8008) = -168430091;
  }
};

// Line 7647: range 0000000013E117B4-0000000013E11979
void __fastcall PlayerQuestComp::setGlobalVarValueByGm(PlayerQuestComp *const this, uint32_t key, int32_t value)
{
  unsigned __int64 v3; // rbx
  __int64 v4; // rax
  _DWORD *v5; // r12
  common::milog::MiLogStream *v6; // rax
  common::milog::MiLogStream *v7; // rax
  common::milog::MiLogStream *v8; // rax
  common::milog::MiLogStream v10; // [rsp+10h] [rbp-A0h] BYREF
  char v11[128]; // [rsp+30h] [rbp-80h] BYREF

  v3 = (unsigned __int64)v11;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_1(96LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "2 48 4 8 key:7646 64 4 10 value:7646";
  *(_QWORD *)(v3 + 16) = PlayerQuestComp::setGlobalVarValueByGm;
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = -234556943;
  v5[536862722] = -202116348;
  *(_DWORD *)(v3 + 48) = key;
  *(_DWORD *)(v3 + 64) = value;
  PlayerQuestComp::setGlobalVarValue(this, *(_DWORD *)(v3 + 48), *(_DWORD *)(v3 + 64), 1);
  common::milog::MiLogStream::create(
    &v10,
    &common::milog::MiLogDefault::default_log_obj_,
    1u,
    "./src/player/quest/player_quest_comp.cpp",
    "setGlobalVarValueByGm",
    7649);
  v6 = common::milog::MiLogStream::operator<<<char [32],(char *[32])0>(
         &v10,
         (const char (*)[32])"[GM] set global var value, key:");
  v7 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v6, (const unsigned int *)(v3 + 48));
  v8 = common::milog::MiLogStream::operator<<<char [8],(char *[8])0>(v7, (const char (*)[8])" value:");
  common::milog::MiLogStream::operator<<<int,(int *)0>(v8, (const int *)(v3 + 64));
  common::milog::MiLogStream::~MiLogStream(&v10);
  if ( v11 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8008) = 0;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8008) = -168430091;
  }
};

// Line 7654: range 0000000013E1197A-0000000013E11ADB
std::vector<unsigned int> *__cdecl PlayerQuestComp::getQuestUnlockCombineData(
        std::vector<unsigned int> *retstr,
        PlayerQuestComp *const this)
{
  std::unordered_map<unsigned int,std::pair<unsigned int,unsigned int>>::const_iterator __for_begin; // [rsp+10h] [rbp-50h] BYREF
  std::unordered_map<unsigned int,std::pair<unsigned int,unsigned int>>::const_iterator __for_end; // [rsp+18h] [rbp-48h] BYREF
  const std::unordered_map<unsigned int,std::pair<unsigned int,unsigned int>> *__for_range; // [rsp+20h] [rbp-40h]
  const std::pair<unsigned int const,std::pair<unsigned int,unsigned int> > *v6; // [rsp+28h] [rbp-38h]
  std::tuple_element<0,const std::pair<unsigned int const,std::pair<unsigned int,unsigned int> > >::type *combine_id; // [rsp+30h] [rbp-30h]
  std::tuple_element<1,const std::pair<unsigned int const,std::pair<unsigned int,unsigned int> > >::type *quest_pair; // [rsp+38h] [rbp-28h]
  std::shared_ptr<Config> v9[2]; // [rsp+40h] [rbp-20h] BYREF

  std::vector<unsigned int>::vector(retstr);
  ServiceBox::findService<GameserverService>();
  GameserverService::getConfig((GameserverService *const)v9);
  __for_range = &std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false> *const)v9)->design_config.txt_config_mgr.combine_config_mgr.combine_to_quest_map_;
  std::shared_ptr<Config>::~shared_ptr(v9);
  __for_begin._M_cur = std::unordered_map<unsigned int,std::pair<unsigned int,unsigned int>>::begin(__for_range)._M_cur;
  __for_end._M_cur = std::unordered_map<unsigned int,std::pair<unsigned int,unsigned int>>::end(__for_range)._M_cur;
  while ( std::__detail::operator!=<std::pair<unsigned int const,std::pair<unsigned int,unsigned int>>,false>(
            &__for_begin,
            &__for_end) )
  {
    v6 = std::__detail::_Node_const_iterator<std::pair<unsigned int const,std::pair<unsigned int,unsigned int>>,false,false>::operator*(&__for_begin);
    combine_id = std::get<0ul,unsigned int const,std::pair<unsigned int,unsigned int>>(v6);
    quest_pair = (std::tuple_element<1,const std::pair<unsigned int const,std::pair<unsigned int,unsigned int> > >::type *)std::get<1ul,unsigned int const,std::pair<unsigned int,unsigned int>>(v6);
    if ( *(_BYTE *)(((unsigned __int64)combine_id >> 3) + 0x7FFF8000) != 0
      && (char)(((unsigned __int8)combine_id & 7) + 3) >= *(_BYTE *)(((unsigned __int64)combine_id >> 3) + 0x7FFF8000) )
    {
      __asan_report_load4(combine_id);
    }
    if ( PlayerQuestComp::isUnlockCombineByQuest(this, *combine_id) )
      std::vector<unsigned int>::push_back(retstr, combine_id);
    std::__detail::_Node_const_iterator<std::pair<unsigned int const,std::pair<unsigned int,unsigned int>>,false,false>::operator++(&__for_begin);
  }
  return retstr;
};

// Line 7667: range 0000000013E11ADC-0000000013E11C3D
std::vector<unsigned int> *__cdecl PlayerQuestComp::getQuestUnlockForgeData(
        std::vector<unsigned int> *retstr,
        PlayerQuestComp *const this)
{
  std::unordered_map<unsigned int,std::pair<unsigned int,unsigned int>>::const_iterator __for_begin; // [rsp+10h] [rbp-50h] BYREF
  std::unordered_map<unsigned int,std::pair<unsigned int,unsigned int>>::const_iterator __for_end; // [rsp+18h] [rbp-48h] BYREF
  const std::unordered_map<unsigned int,std::pair<unsigned int,unsigned int>> *__for_range; // [rsp+20h] [rbp-40h]
  const std::pair<unsigned int const,std::pair<unsigned int,unsigned int> > *v6; // [rsp+28h] [rbp-38h]
  std::tuple_element<0,const std::pair<unsigned int const,std::pair<unsigned int,unsigned int> > >::type *forge_id; // [rsp+30h] [rbp-30h]
  std::tuple_element<1,const std::pair<unsigned int const,std::pair<unsigned int,unsigned int> > >::type *quest_pair; // [rsp+38h] [rbp-28h]
  std::shared_ptr<Config> v9[2]; // [rsp+40h] [rbp-20h] BYREF

  std::vector<unsigned int>::vector(retstr);
  ServiceBox::findService<GameserverService>();
  GameserverService::getConfig((GameserverService *const)v9);
  __for_range = &std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false> *const)v9)->design_config.txt_config_mgr.forge_config_mgr.forge_to_quest_map_;
  std::shared_ptr<Config>::~shared_ptr(v9);
  __for_begin._M_cur = std::unordered_map<unsigned int,std::pair<unsigned int,unsigned int>>::begin(__for_range)._M_cur;
  __for_end._M_cur = std::unordered_map<unsigned int,std::pair<unsigned int,unsigned int>>::end(__for_range)._M_cur;
  while ( std::__detail::operator!=<std::pair<unsigned int const,std::pair<unsigned int,unsigned int>>,false>(
            &__for_begin,
            &__for_end) )
  {
    v6 = std::__detail::_Node_const_iterator<std::pair<unsigned int const,std::pair<unsigned int,unsigned int>>,false,false>::operator*(&__for_begin);
    forge_id = std::get<0ul,unsigned int const,std::pair<unsigned int,unsigned int>>(v6);
    quest_pair = (std::tuple_element<1,const std::pair<unsigned int const,std::pair<unsigned int,unsigned int> > >::type *)std::get<1ul,unsigned int const,std::pair<unsigned int,unsigned int>>(v6);
    if ( *(_BYTE *)(((unsigned __int64)forge_id >> 3) + 0x7FFF8000) != 0
      && (char)(((unsigned __int8)forge_id & 7) + 3) >= *(_BYTE *)(((unsigned __int64)forge_id >> 3) + 0x7FFF8000) )
    {
      __asan_report_load4(forge_id);
    }
    if ( PlayerQuestComp::isUnlockForgeByQuest(this, *forge_id) )
      std::vector<unsigned int>::push_back(retstr, forge_id);
    std::__detail::_Node_const_iterator<std::pair<unsigned int const,std::pair<unsigned int,unsigned int>>,false,false>::operator++(&__for_begin);
  }
  return retstr;
};

// Line 7680: range 0000000013E11C3E-0000000013E1236D
_BOOL8 __fastcall PlayerQuestComp::isUnlockCombineByQuest(PlayerQuestComp *const this, uint32_t combine_id)
{
  unsigned __int64 v2; // r13
  __int64 v3; // rax
  _DWORD *v4; // r12
  std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v5; // rax
  bool v6; // r14
  _BOOL4 v7; // r14d
  std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v8; // rax
  std::__shared_ptr_access<ParentQuest,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v9; // rax
  std::__shared_ptr_access<Quest,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v10; // rax
  std::__shared_ptr_access<Quest,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v11; // rax
  std::__shared_ptr_access<ParentQuest,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v13; // rax
  std::__shared_ptr_access<Quest,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v14; // rax
  std::__shared_ptr_access<Quest,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v15; // rax
  bool v17; // al
  common::milog::MiLogStream *v18; // rax
  common::milog::MiLogStream *v19; // rax
  common::milog::MiLogStream *v20; // rax
  common::milog::MiLogStream *v21; // rax
  common::milog::MiLogStream *v22; // rax
  common::milog::MiLogStream *v23; // rax
  common::milog::MiLogStream *v24; // rax
  common::milog::MiLogStream *v25; // rax
  common::milog::MiLogStream *v26; // rax
  common::milog::MiLogStream *v27; // rax
  common::milog::MiLogStream *v28; // rax
  _BOOL8 result; // rax
  bool is_start_quest_started; // [rsp+1Dh] [rbp-133h]
  bool is_end_quest_ended; // [rsp+1Eh] [rbp-132h]
  bool res; // [rsp+1Fh] [rbp-131h]
  int start_parent_id; // [rsp+20h] [rbp-130h]
  int end_parent_id; // [rsp+24h] [rbp-12Ch]
  const std::pair<unsigned int,unsigned int> *quest_pair; // [rsp+28h] [rbp-128h]
  uint32_t *end_quest_id; // [rsp+38h] [rbp-118h]
  common::milog::MiLogStream v37; // [rsp+40h] [rbp-110h] BYREF
  char v38[240]; // [rsp+60h] [rbp-F0h] BYREF

  v2 = (unsigned __int64)v38;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_2(192LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "5 48 4 15 combine_id:7679 64 16 20 start_quest_ptr:7690 96 16 18 end_quest_ptr:7691 128 16 27 st"
                        "art_parent_quest_ptr:7692 160 16 25 end_parent_quest_ptr:7693";
  *(_QWORD *)(v2 + 16) = PlayerQuestComp::isUnlockCombineByQuest;
  v4 = (_DWORD *)(v2 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = -234556943;
  v4[536862722] = -219021312;
  v4[536862723] = -219021312;
  v4[536862724] = -219021312;
  v4[536862725] = -202178560;
  *(_DWORD *)(v2 + 48) = combine_id;
  ServiceBox::findService<GameserverService>();
  GameserverService::getConfig((GameserverService *const)(v2 + 160));
  v5 = std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 160));
  v6 = !common::tools::MiscUtils::isContains<std::unordered_map<unsigned int,std::pair<unsigned int,unsigned int>> const,unsigned int>(
          &v5->design_config.txt_config_mgr.combine_config_mgr.combine_to_quest_map_,
          (const unsigned int *)(v2 + 48));
  std::shared_ptr<Config>::~shared_ptr((std::shared_ptr<Config> *const)(v2 + 160));
  if ( v6 )
  {
    v7 = 0;
  }
  else
  {
    ServiceBox::findService<GameserverService>();
    GameserverService::getConfig((GameserverService *const)(v2 + 160));
    v8 = std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 160));
    quest_pair = std::unordered_map<unsigned int,std::pair<unsigned int,unsigned int>>::at(
                   &v8->design_config.txt_config_mgr.combine_config_mgr.combine_to_quest_map_,
                   (const std::unordered_map<unsigned int,std::pair<unsigned int,unsigned int>>::key_type *)(v2 + 48));
    std::shared_ptr<Config>::~shared_ptr((std::shared_ptr<Config> *const)(v2 + 160));
    end_quest_id = &quest_pair->second;
    if ( *(_BYTE *)(((unsigned __int64)quest_pair >> 3) + 0x7FFF8000) != 0
      && (char)(((unsigned __int8)quest_pair & 7) + 3) >= *(_BYTE *)(((unsigned __int64)quest_pair >> 3) + 0x7FFF8000) )
    {
      __asan_report_load4(quest_pair);
    }
    start_parent_id = PlayerQuestComp::findParentQuestId(this, quest_pair->first);
    if ( *(_BYTE *)(((unsigned __int64)end_quest_id >> 3) + 0x7FFF8000) != 0
      && (char)(((unsigned __int8)end_quest_id & 7) + 3) >= *(_BYTE *)(((unsigned __int64)end_quest_id >> 3) + 0x7FFF8000) )
    {
      __asan_report_load4(end_quest_id);
    }
    end_parent_id = PlayerQuestComp::findParentQuestId(this, *end_quest_id);
    if ( *(_BYTE *)(((unsigned __int64)quest_pair >> 3) + 0x7FFF8000) != 0
      && (char)(((unsigned __int8)quest_pair & 7) + 3) >= *(_BYTE *)(((unsigned __int64)quest_pair >> 3) + 0x7FFF8000) )
    {
      __asan_report_load4(quest_pair);
    }
    PlayerQuestComp::findQuest((const PlayerQuestComp *const)(v2 + 64), (__int64)this, quest_pair->first);
    if ( *(_BYTE *)(((unsigned __int64)end_quest_id >> 3) + 0x7FFF8000) != 0
      && (char)(((unsigned __int8)end_quest_id & 7) + 3) >= *(_BYTE *)(((unsigned __int64)end_quest_id >> 3) + 0x7FFF8000) )
    {
      __asan_report_load4(end_quest_id);
    }
    PlayerQuestComp::findQuest((const PlayerQuestComp *const)(v2 + 96), (__int64)this, *end_quest_id);
    PlayerQuestComp::findParentQuest((const PlayerQuestComp *const)(v2 + 128), (__int64)this, start_parent_id);
    PlayerQuestComp::findParentQuest((const PlayerQuestComp *const)(v2 + 160), (__int64)this, end_parent_id);
    is_start_quest_started = 0;
    is_end_quest_ended = 0;
    if ( std::operator!=<ParentQuest>((const std::shared_ptr<ParentQuest> *)(v2 + 128), 0LL) )
    {
      v9 = std::__shared_ptr_access<ParentQuest,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<ParentQuest,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 128));
      if ( ParentQuest::getParentQuestState(v9) )
      {
        is_start_quest_started = 1;
      }
      else if ( std::operator!=<Quest>((const std::shared_ptr<Quest> *)(v2 + 64), 0LL) )
      {
        v10 = std::__shared_ptr_access<Quest,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Quest,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 64));
        if ( Quest::getState(v10) != QUEST_STATE_UNSTARTED )
        {
          v11 = std::__shared_ptr_access<Quest,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Quest,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 64));
          if ( Quest::getState(v11) )
            is_start_quest_started = 1;
        }
      }
    }
    if ( std::operator!=<ParentQuest>((const std::shared_ptr<ParentQuest> *)(v2 + 160), 0LL) )
    {
      v13 = std::__shared_ptr_access<ParentQuest,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<ParentQuest,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 160));
      if ( ParentQuest::getParentQuestState(v13) )
      {
        is_end_quest_ended = 1;
      }
      else if ( std::operator!=<Quest>((const std::shared_ptr<Quest> *)(v2 + 96), 0LL) )
      {
        v14 = std::__shared_ptr_access<Quest,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Quest,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 96));
        if ( Quest::getState(v14) == QUEST_STATE_FINISHED
          || (v15 = std::__shared_ptr_access<Quest,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Quest,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 96)),
              Quest::getState(v15) == QUEST_STATE_FAILED) )
        {
          is_end_quest_ended = 1;
        }
      }
    }
    v17 = is_start_quest_started && !is_end_quest_ended;
    res = v17;
    common::milog::MiLogStream::create(
      &v37,
      &common::milog::MiLogDefault::default_log_obj_,
      1u,
      "./src/player/quest/player_quest_comp.cpp",
      "isUnlockCombineByQuest",
      7731);
    v18 = common::milog::MiLogStream::operator<<<char [13],(char *[13])0>(&v37, (const char (*)[13])"combine_id: ");
    v19 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v18, (const unsigned int *)(v2 + 48));
    v20 = common::milog::MiLogStream::operator<<<char [7],(char *[7])0>(v19, (const char (*)[7])", res:");
    v21 = common::milog::MiLogStream::operator<<(v20, res);
    v22 = common::milog::MiLogStream::operator<<<char [26],(char *[26])0>(
            v21,
            (const char (*)[26])", is_start_quest_started:");
    v23 = common::milog::MiLogStream::operator<<(v22, is_start_quest_started);
    v24 = common::milog::MiLogStream::operator<<<char [22],(char *[22])0>(
            v23,
            (const char (*)[22])", is_end_quest_ended:");
    v25 = common::milog::MiLogStream::operator<<(v24, is_end_quest_ended);
    v26 = common::milog::MiLogStream::operator<<<char [18],(char *[18])0>(v25, (const char (*)[18])", start_quest_id:");
    v27 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v26, (const unsigned int *)quest_pair);
    v28 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(v27, (const char (*)[16])", end_quest_id:");
    common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v28, end_quest_id);
    common::milog::MiLogStream::~MiLogStream(&v37);
    v7 = res;
    std::shared_ptr<ParentQuest>::~shared_ptr((std::shared_ptr<ParentQuest> *const)(v2 + 160));
    std::shared_ptr<ParentQuest>::~shared_ptr((std::shared_ptr<ParentQuest> *const)(v2 + 128));
    std::shared_ptr<Quest>::~shared_ptr((std::shared_ptr<Quest> *const)(v2 + 96));
    std::shared_ptr<Quest>::~shared_ptr((std::shared_ptr<Quest> *const)(v2 + 64));
  }
  result = v7;
  if ( v38 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8010) = 0LL;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 7742: range 0000000013E1236E-0000000013E12A9D
_BOOL8 __fastcall PlayerQuestComp::isUnlockForgeByQuest(PlayerQuestComp *const this, uint32_t forge_id)
{
  unsigned __int64 v2; // r13
  __int64 v3; // rax
  _DWORD *v4; // r12
  std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v5; // rax
  bool v6; // r14
  _BOOL4 v7; // r14d
  std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v8; // rax
  std::__shared_ptr_access<ParentQuest,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v9; // rax
  std::__shared_ptr_access<Quest,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v10; // rax
  std::__shared_ptr_access<Quest,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v11; // rax
  std::__shared_ptr_access<ParentQuest,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v13; // rax
  std::__shared_ptr_access<Quest,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v14; // rax
  std::__shared_ptr_access<Quest,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v15; // rax
  bool v17; // al
  common::milog::MiLogStream *v18; // rax
  common::milog::MiLogStream *v19; // rax
  common::milog::MiLogStream *v20; // rax
  common::milog::MiLogStream *v21; // rax
  common::milog::MiLogStream *v22; // rax
  common::milog::MiLogStream *v23; // rax
  common::milog::MiLogStream *v24; // rax
  common::milog::MiLogStream *v25; // rax
  common::milog::MiLogStream *v26; // rax
  common::milog::MiLogStream *v27; // rax
  common::milog::MiLogStream *v28; // rax
  _BOOL8 result; // rax
  bool is_start_quest_started; // [rsp+1Dh] [rbp-133h]
  bool is_end_quest_ended; // [rsp+1Eh] [rbp-132h]
  bool res; // [rsp+1Fh] [rbp-131h]
  int start_parent_id; // [rsp+20h] [rbp-130h]
  int end_parent_id; // [rsp+24h] [rbp-12Ch]
  const std::pair<unsigned int,unsigned int> *quest_pair; // [rsp+28h] [rbp-128h]
  uint32_t *end_quest_id; // [rsp+38h] [rbp-118h]
  common::milog::MiLogStream v37; // [rsp+40h] [rbp-110h] BYREF
  char v38[240]; // [rsp+60h] [rbp-F0h] BYREF

  v2 = (unsigned __int64)v38;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_2(192LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "5 48 4 13 forge_id:7741 64 16 20 start_quest_ptr:7752 96 16 18 end_quest_ptr:7753 128 16 27 star"
                        "t_parent_quest_ptr:7754 160 16 25 end_parent_quest_ptr:7755";
  *(_QWORD *)(v2 + 16) = PlayerQuestComp::isUnlockForgeByQuest;
  v4 = (_DWORD *)(v2 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = -234556943;
  v4[536862722] = -219021312;
  v4[536862723] = -219021312;
  v4[536862724] = -219021312;
  v4[536862725] = -202178560;
  *(_DWORD *)(v2 + 48) = forge_id;
  ServiceBox::findService<GameserverService>();
  GameserverService::getConfig((GameserverService *const)(v2 + 160));
  v5 = std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 160));
  v6 = !common::tools::MiscUtils::isContains<std::unordered_map<unsigned int,std::pair<unsigned int,unsigned int>> const,unsigned int>(
          &v5->design_config.txt_config_mgr.forge_config_mgr.forge_to_quest_map_,
          (const unsigned int *)(v2 + 48));
  std::shared_ptr<Config>::~shared_ptr((std::shared_ptr<Config> *const)(v2 + 160));
  if ( v6 )
  {
    v7 = 0;
  }
  else
  {
    ServiceBox::findService<GameserverService>();
    GameserverService::getConfig((GameserverService *const)(v2 + 160));
    v8 = std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 160));
    quest_pair = std::unordered_map<unsigned int,std::pair<unsigned int,unsigned int>>::at(
                   &v8->design_config.txt_config_mgr.forge_config_mgr.forge_to_quest_map_,
                   (const std::unordered_map<unsigned int,std::pair<unsigned int,unsigned int>>::key_type *)(v2 + 48));
    std::shared_ptr<Config>::~shared_ptr((std::shared_ptr<Config> *const)(v2 + 160));
    end_quest_id = &quest_pair->second;
    if ( *(_BYTE *)(((unsigned __int64)quest_pair >> 3) + 0x7FFF8000) != 0
      && (char)(((unsigned __int8)quest_pair & 7) + 3) >= *(_BYTE *)(((unsigned __int64)quest_pair >> 3) + 0x7FFF8000) )
    {
      __asan_report_load4(quest_pair);
    }
    start_parent_id = PlayerQuestComp::findParentQuestId(this, quest_pair->first);
    if ( *(_BYTE *)(((unsigned __int64)end_quest_id >> 3) + 0x7FFF8000) != 0
      && (char)(((unsigned __int8)end_quest_id & 7) + 3) >= *(_BYTE *)(((unsigned __int64)end_quest_id >> 3) + 0x7FFF8000) )
    {
      __asan_report_load4(end_quest_id);
    }
    end_parent_id = PlayerQuestComp::findParentQuestId(this, *end_quest_id);
    if ( *(_BYTE *)(((unsigned __int64)quest_pair >> 3) + 0x7FFF8000) != 0
      && (char)(((unsigned __int8)quest_pair & 7) + 3) >= *(_BYTE *)(((unsigned __int64)quest_pair >> 3) + 0x7FFF8000) )
    {
      __asan_report_load4(quest_pair);
    }
    PlayerQuestComp::findQuest((const PlayerQuestComp *const)(v2 + 64), (__int64)this, quest_pair->first);
    if ( *(_BYTE *)(((unsigned __int64)end_quest_id >> 3) + 0x7FFF8000) != 0
      && (char)(((unsigned __int8)end_quest_id & 7) + 3) >= *(_BYTE *)(((unsigned __int64)end_quest_id >> 3) + 0x7FFF8000) )
    {
      __asan_report_load4(end_quest_id);
    }
    PlayerQuestComp::findQuest((const PlayerQuestComp *const)(v2 + 96), (__int64)this, *end_quest_id);
    PlayerQuestComp::findParentQuest((const PlayerQuestComp *const)(v2 + 128), (__int64)this, start_parent_id);
    PlayerQuestComp::findParentQuest((const PlayerQuestComp *const)(v2 + 160), (__int64)this, end_parent_id);
    is_start_quest_started = 0;
    is_end_quest_ended = 0;
    if ( std::operator!=<ParentQuest>((const std::shared_ptr<ParentQuest> *)(v2 + 128), 0LL) )
    {
      v9 = std::__shared_ptr_access<ParentQuest,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<ParentQuest,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 128));
      if ( ParentQuest::getParentQuestState(v9) )
      {
        is_start_quest_started = 1;
      }
      else if ( std::operator!=<Quest>((const std::shared_ptr<Quest> *)(v2 + 64), 0LL) )
      {
        v10 = std::__shared_ptr_access<Quest,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Quest,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 64));
        if ( Quest::getState(v10) != QUEST_STATE_UNSTARTED )
        {
          v11 = std::__shared_ptr_access<Quest,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Quest,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 64));
          if ( Quest::getState(v11) )
            is_start_quest_started = 1;
        }
      }
    }
    if ( std::operator!=<ParentQuest>((const std::shared_ptr<ParentQuest> *)(v2 + 160), 0LL) )
    {
      v13 = std::__shared_ptr_access<ParentQuest,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<ParentQuest,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 160));
      if ( ParentQuest::getParentQuestState(v13) )
      {
        is_end_quest_ended = 1;
      }
      else if ( std::operator!=<Quest>((const std::shared_ptr<Quest> *)(v2 + 96), 0LL) )
      {
        v14 = std::__shared_ptr_access<Quest,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Quest,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 96));
        if ( Quest::getState(v14) == QUEST_STATE_FINISHED
          || (v15 = std::__shared_ptr_access<Quest,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Quest,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 96)),
              Quest::getState(v15) == QUEST_STATE_FAILED) )
        {
          is_end_quest_ended = 1;
        }
      }
    }
    v17 = is_start_quest_started && !is_end_quest_ended;
    res = v17;
    common::milog::MiLogStream::create(
      &v37,
      &common::milog::MiLogDefault::default_log_obj_,
      1u,
      "./src/player/quest/player_quest_comp.cpp",
      "isUnlockForgeByQuest",
      7792);
    v18 = common::milog::MiLogStream::operator<<<char [11],(char *[11])0>(&v37, (const char (*)[11])"forge_id: ");
    v19 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v18, (const unsigned int *)(v2 + 48));
    v20 = common::milog::MiLogStream::operator<<<char [7],(char *[7])0>(v19, (const char (*)[7])", res:");
    v21 = common::milog::MiLogStream::operator<<(v20, res);
    v22 = common::milog::MiLogStream::operator<<<char [26],(char *[26])0>(
            v21,
            (const char (*)[26])", is_start_quest_started:");
    v23 = common::milog::MiLogStream::operator<<(v22, is_start_quest_started);
    v24 = common::milog::MiLogStream::operator<<<char [22],(char *[22])0>(
            v23,
            (const char (*)[22])", is_end_quest_ended:");
    v25 = common::milog::MiLogStream::operator<<(v24, is_end_quest_ended);
    v26 = common::milog::MiLogStream::operator<<<char [18],(char *[18])0>(v25, (const char (*)[18])", start_quest_id:");
    v27 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v26, (const unsigned int *)quest_pair);
    v28 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(v27, (const char (*)[16])", end_quest_id:");
    common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v28, end_quest_id);
    common::milog::MiLogStream::~MiLogStream(&v37);
    v7 = res;
    std::shared_ptr<ParentQuest>::~shared_ptr((std::shared_ptr<ParentQuest> *const)(v2 + 160));
    std::shared_ptr<ParentQuest>::~shared_ptr((std::shared_ptr<ParentQuest> *const)(v2 + 128));
    std::shared_ptr<Quest>::~shared_ptr((std::shared_ptr<Quest> *const)(v2 + 96));
    std::shared_ptr<Quest>::~shared_ptr((std::shared_ptr<Quest> *const)(v2 + 64));
  }
  result = v7;
  if ( v38 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8010) = 0LL;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 7803: range 0000000013E12A9E-0000000013E12CB1
_BOOL8 __fastcall PlayerQuestComp::isChapterPreOpen(PlayerQuestComp *const this, uint32_t chapter_id)
{
  unsigned __int64 v2; // rbx
  __int64 v3; // rax
  unsigned __int64 v4; // r12
  _BOOL8 result; // rax
  std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v6; // rax
  PlayerActivityComp *ActivityComp; // rax
  uint32_t activity_id; // [rsp+14h] [rbp-7Ch]
  const data::ChapterExcelConfig *chapter_config_ptr; // [rsp+18h] [rbp-78h]
  std::shared_ptr<Config> v10; // [rsp+20h] [rbp-70h] BYREF
  char v11[96]; // [rsp+30h] [rbp-60h] BYREF

  v2 = (unsigned __int64)v11;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_0(64LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "1 32 4 15 chapter_id:7802";
  *(_QWORD *)(v2 + 16) = PlayerQuestComp::isChapterPreOpen;
  v4 = v2 >> 3;
  *(_DWORD *)(v4 + 2147450880) = -235802127;
  *(_DWORD *)(v4 + 2147450884) = -202116348;
  *(_DWORD *)(v2 + 32) = chapter_id;
  if ( common::tools::MiscUtils::isContains<std::unordered_set<unsigned int>,unsigned int>(
         &this->pre_open_chapter_id_set_,
         (const unsigned int *)(v2 + 32)) )
  {
    result = 1LL;
  }
  else
  {
    ServiceBox::findService<GameserverService>();
    GameserverService::getConfig((GameserverService *const)&v10);
    v6 = std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false> *const)&v10);
    chapter_config_ptr = data::QuestExcelConfigMgrBase::findChapterExcelConfig(
                           &v6->design_config.txt_config_mgr.quest_config_mgr,
                           *(_DWORD *)(v2 + 32));
    std::shared_ptr<Config>::~shared_ptr(&v10);
    if ( chapter_config_ptr )
    {
      if ( *(_BYTE *)(((unsigned __int64)&chapter_config_ptr->related_activity_id >> 3) + 0x7FFF8000) != 0
        && *(_BYTE *)(((unsigned __int64)&chapter_config_ptr->related_activity_id >> 3) + 0x7FFF8000) <= 3 )
      {
        __asan_report_load4(&chapter_config_ptr->related_activity_id);
      }
      activity_id = chapter_config_ptr->related_activity_id;
      if ( activity_id )
      {
        if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
          __asan_report_load8(&this->player_);
        ActivityComp = Player::getActivityComp(this->player_);
        result = PlayerActivityComp::isActivityOpen(ActivityComp, activity_id);
      }
      else
      {
        result = 0LL;
      }
    }
    else
    {
      result = 0LL;
    }
  }
  if ( v11 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 7826: range 0000000013E12CB2-0000000013E12E78
void __cdecl PlayerQuestComp::tryRecordChapterPreOpenByQuestId(PlayerQuestComp *const this, uint32_t quest_id)
{
  unsigned __int64 v2; // rbx
  __int64 v3; // rax
  unsigned __int64 v4; // r12
  std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v5; // rax
  uint32_t parent_quest_id; // [rsp+14h] [rbp-7Ch]
  const data::ChapterExcelConfig *chapter_config_ptr; // [rsp+18h] [rbp-78h]
  std::shared_ptr<Config> v8; // [rsp+20h] [rbp-70h] BYREF
  char v9[96]; // [rsp+30h] [rbp-60h] BYREF

  v2 = (unsigned __int64)v9;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_0(64LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "1 32 4 15 chapter_id:7833";
  *(_QWORD *)(v2 + 16) = PlayerQuestComp::tryRecordChapterPreOpenByQuestId;
  v4 = v2 >> 3;
  *(_DWORD *)(v4 + 2147450880) = -235802127;
  *(_DWORD *)(v4 + 2147450884) = -202116348;
  parent_quest_id = PlayerQuestComp::findParentQuestId(this, quest_id);
  ServiceBox::findService<GameserverService>();
  GameserverService::getConfig((GameserverService *const)&v8);
  v5 = std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false> *const)&v8);
  chapter_config_ptr = QuestExcelConfigMgr::findChapterConfigByParentQuestId(
                         &v5->design_config.txt_config_mgr.quest_config_mgr,
                         parent_quest_id);
  std::shared_ptr<Config>::~shared_ptr(&v8);
  if ( chapter_config_ptr )
  {
    if ( *(_BYTE *)(((unsigned __int64)&chapter_config_ptr->id >> 3) + 0x7FFF8000) != 0
      && *(_BYTE *)(((unsigned __int64)&chapter_config_ptr->id >> 3) + 0x7FFF8000) <= 3 )
    {
      __asan_report_load4(&chapter_config_ptr->id);
    }
    *(_DWORD *)(v2 + 32) = chapter_config_ptr->id;
    if ( PlayerQuestComp::isChapterPreOpen(this, *(_DWORD *)(v2 + 32)) )
      std::unordered_set<unsigned int>::insert(
        &this->pre_open_chapter_id_set_,
        (const std::unordered_set<unsigned int>::value_type *)(v2 + 32));
  }
  if ( v9 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
  }
};

// Line 7844: range 0000000013E12E7A-0000000013E13197
void __cdecl PlayerQuestComp::registerOccupiedPlace(
        PlayerQuestComp *const this,
        const data::QuestExcelConfig *quest_config)
{
  unsigned __int64 v2; // rbx
  __int64 v3; // rax
  unsigned __int64 v4; // r12
  __gnu_cxx::__normal_iterator<unsigned int const*,std::vector<unsigned int> >::reference v5; // rax
  _DWORD *v6; // rdx
  std::pair<std::_Rb_tree_const_iterator<unsigned int>,bool> v7; // rax
  common::milog::MiLogStream *v8; // rax
  common::milog::MiLogStream *v9; // rax
  common::milog::MiLogStream *v10; // rax
  common::milog::MiLogStream *v11; // rax
  common::milog::MiLogStream *v12; // rax
  std::vector<unsigned int>::const_iterator __for_begin; // [rsp+10h] [rbp-A0h] BYREF
  std::vector<unsigned int>::const_iterator __for_end; // [rsp+18h] [rbp-98h] BYREF
  const std::vector<unsigned int> *__for_range; // [rsp+20h] [rbp-90h]
  std::set<unsigned int> *quest_id_set; // [rsp+28h] [rbp-88h]
  common::milog::MiLogStream v17; // [rsp+30h] [rbp-80h] BYREF
  char v18[96]; // [rsp+50h] [rbp-60h] BYREF

  v2 = (unsigned __int64)v18;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_0(64LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "1 32 4 13 place_id:7845";
  *(_QWORD *)(v2 + 16) = PlayerQuestComp::registerOccupiedPlace;
  v4 = v2 >> 3;
  *(_DWORD *)(v4 + 2147450880) = -235802127;
  *(_DWORD *)(v4 + 2147450884) = -202116348;
  __for_range = &quest_config->exclusive_place_list;
  __for_begin._M_current = std::vector<unsigned int>::begin(&quest_config->exclusive_place_list)._M_current;
  __for_end._M_current = std::vector<unsigned int>::end(&quest_config->exclusive_place_list)._M_current;
  while ( __gnu_cxx::operator!=<unsigned int const*,std::vector<unsigned int>>(&__for_begin, &__for_end) )
  {
    v5 = __gnu_cxx::__normal_iterator<unsigned int const*,std::vector<unsigned int>>::operator*(&__for_begin);
    v6 = v5;
    if ( *(_BYTE *)(((unsigned __int64)v5 >> 3) + 0x7FFF8000) != 0
      && (char)(((unsigned __int8)v5 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)v5 >> 3) + 0x7FFF8000) )
    {
      __asan_report_load4(v5);
    }
    *(_DWORD *)(v2 + 32) = *v6;
    quest_id_set = std::map<unsigned int,std::set<unsigned int>>::operator[](
                     &this->occupied_place_map_,
                     (const std::map<unsigned int,std::set<unsigned int>>::key_type *)(v2 + 32));
    v7 = std::set<unsigned int>::insert(quest_id_set, &quest_config->sub_id);
    if ( !v7.second )
    {
      common::milog::MiLogStream::create(
        &v17,
        &common::milog::MiLogDefault::default_log_obj_,
        4u,
        "./src/player/quest/player_quest_comp.cpp",
        "registerOccupiedPlace",
        7850);
      v8 = common::milog::MiLogStream::operator<<<char [33],(char *[33])0>(
             &v17,
             (const char (*)[33])"duplicate quest occupy place_id:");
      v9 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v8, (const unsigned int *)(v2 + 32));
      v10 = common::milog::MiLogStream::operator<<<char [11],(char *[11])0>(v9, (const char (*)[11])" quest_id:");
    }
    else
    {
      common::milog::MiLogStream::create(
        &v17,
        &common::milog::MiLogDefault::default_log_obj_,
        1u,
        "./src/player/quest/player_quest_comp.cpp",
        "registerOccupiedPlace",
        7853);
      v11 = common::milog::MiLogStream::operator<<<char [19],(char *[19])0>(
              &v17,
              (const char (*)[19])"register place_id:");
      v12 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v11, (const unsigned int *)(v2 + 32));
      v10 = common::milog::MiLogStream::operator<<<char [14],(char *[14])0>(v12, (const char (*)[14])off_251678E0);
    }
    common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v10, &quest_config->sub_id);
    common::milog::MiLogStream::~MiLogStream(&v17);
    __gnu_cxx::__normal_iterator<unsigned int const*,std::vector<unsigned int>>::operator++(&__for_begin);
  }
  if ( v18 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
  }
};

// Line 7858: range 0000000013E13198-0000000013E134F6
void __cdecl PlayerQuestComp::unregisterOccupiedPlace(
        PlayerQuestComp *const this,
        const data::QuestExcelConfig *quest_config,
        bool is_by_remove)
{
  unsigned __int64 v3; // rbx
  __int64 v4; // rax
  unsigned __int64 v5; // r12
  __gnu_cxx::__normal_iterator<unsigned int const*,std::vector<unsigned int> >::reference v6; // rax
  _DWORD *v7; // rdx
  common::milog::MiLogStream *v9; // rax
  common::milog::MiLogStream *v10; // rax
  common::milog::MiLogStream *v11; // rax
  common::milog::MiLogStream *v12; // rax
  common::milog::MiLogStream *v13; // rax
  std::vector<unsigned int>::const_iterator __for_begin; // [rsp+20h] [rbp-A0h] BYREF
  std::vector<unsigned int>::const_iterator __for_end; // [rsp+28h] [rbp-98h] BYREF
  const std::vector<unsigned int> *__for_range; // [rsp+30h] [rbp-90h]
  std::set<unsigned int> *quest_id_set; // [rsp+38h] [rbp-88h]
  common::milog::MiLogStream v19; // [rsp+40h] [rbp-80h] BYREF
  char v20[96]; // [rsp+60h] [rbp-60h] BYREF

  v3 = (unsigned __int64)v20;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_0(64LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "1 32 4 13 place_id:7859";
  *(_QWORD *)(v3 + 16) = PlayerQuestComp::unregisterOccupiedPlace;
  v5 = v3 >> 3;
  *(_DWORD *)(v5 + 2147450880) = -235802127;
  *(_DWORD *)(v5 + 2147450884) = -202116348;
  __for_range = &quest_config->exclusive_place_list;
  __for_begin._M_current = std::vector<unsigned int>::begin(&quest_config->exclusive_place_list)._M_current;
  __for_end._M_current = std::vector<unsigned int>::end(&quest_config->exclusive_place_list)._M_current;
  while ( __gnu_cxx::operator!=<unsigned int const*,std::vector<unsigned int>>(&__for_begin, &__for_end) )
  {
    v6 = __gnu_cxx::__normal_iterator<unsigned int const*,std::vector<unsigned int>>::operator*(&__for_begin);
    v7 = v6;
    if ( *(_BYTE *)(((unsigned __int64)v6 >> 3) + 0x7FFF8000) != 0
      && (char)(((unsigned __int8)v6 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)v6 >> 3) + 0x7FFF8000) )
    {
      __asan_report_load4(v6);
    }
    *(_DWORD *)(v3 + 32) = *v7;
    quest_id_set = std::map<unsigned int,std::set<unsigned int>>::operator[](
                     &this->occupied_place_map_,
                     (const std::map<unsigned int,std::set<unsigned int>>::key_type *)(v3 + 32));
    if ( !common::tools::MiscUtils::isContains<std::set<unsigned int>,unsigned int>(quest_id_set, &quest_config->sub_id)
      && !is_by_remove )
    {
      common::milog::MiLogStream::create(
        &v19,
        &common::milog::MiLogDefault::default_log_obj_,
        1u,
        "./src/player/quest/player_quest_comp.cpp",
        "unregisterOccupiedPlace",
        7864);
      v9 = common::milog::MiLogStream::operator<<<char [10],(char *[10])0>(&v19, (const char (*)[10])"place_id:");
      v10 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v9, (const unsigned int *)(v3 + 32));
      v11 = common::milog::MiLogStream::operator<<<char [22],(char *[22])0>(
              v10,
              (const char (*)[22])" not found. quest_id:");
    }
    else
    {
      std::set<unsigned int>::erase(quest_id_set, &quest_config->sub_id);
      common::milog::MiLogStream::create(
        &v19,
        &common::milog::MiLogDefault::default_log_obj_,
        1u,
        "./src/player/quest/player_quest_comp.cpp",
        "unregisterOccupiedPlace",
        7868);
      v12 = common::milog::MiLogStream::operator<<<char [21],(char *[21])0>(
              &v19,
              (const char (*)[21])"unregister place_id:");
      v13 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v12, (const unsigned int *)(v3 + 32));
      v11 = common::milog::MiLogStream::operator<<<char [14],(char *[14])0>(v13, (const char (*)[14])off_251678E0);
    }
    common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v11, &quest_config->sub_id);
    common::milog::MiLogStream::~MiLogStream(&v19);
    __gnu_cxx::__normal_iterator<unsigned int const*,std::vector<unsigned int>>::operator++(&__for_begin);
  }
  if ( v20 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
  }
};

// Line 7874: range 0000000013E134F8-0000000013E13760
__int64 __fastcall PlayerQuestComp::checkIsQuestPlaceAllAvailable(PlayerQuestComp *const this, uint32_t quest_id)
{
  unsigned __int64 v2; // rbx
  __int64 v3; // rax
  unsigned __int64 v4; // r12
  common::milog::MiLogStream *v5; // rax
  __int64 result; // rax
  unsigned int *v7; // rax
  uint32_t *v8; // rdx
  std::vector<unsigned int>::const_iterator __for_begin; // [rsp+20h] [rbp-A0h] BYREF
  std::vector<unsigned int>::const_iterator __for_end; // [rsp+28h] [rbp-98h] BYREF
  const data::QuestExcelConfig *quest_config_ptr; // [rsp+30h] [rbp-90h]
  const std::vector<unsigned int> *__for_range; // [rsp+38h] [rbp-88h]
  common::milog::MiLogStream v13; // [rsp+40h] [rbp-80h] BYREF
  char v14[96]; // [rsp+60h] [rbp-60h] BYREF

  v2 = (unsigned __int64)v14;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_0(64LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "1 32 4 13 quest_id:7873";
  *(_QWORD *)(v2 + 16) = PlayerQuestComp::checkIsQuestPlaceAllAvailable;
  v4 = v2 >> 3;
  *(_DWORD *)(v4 + 2147450880) = -235802127;
  *(_DWORD *)(v4 + 2147450884) = -202116348;
  *(_DWORD *)(v2 + 32) = quest_id;
  quest_config_ptr = PlayerQuestComp::findPlayerQuestExcelConfig(this, *(_DWORD *)(v2 + 32));
  if ( quest_config_ptr )
  {
    __for_range = &quest_config_ptr->exclusive_place_list;
    __for_begin._M_current = std::vector<unsigned int>::begin(&quest_config_ptr->exclusive_place_list)._M_current;
    __for_end._M_current = std::vector<unsigned int>::end(&quest_config_ptr->exclusive_place_list)._M_current;
    while ( __gnu_cxx::operator!=<unsigned int const*,std::vector<unsigned int>>(&__for_begin, &__for_end) )
    {
      v7 = (unsigned int *)__gnu_cxx::__normal_iterator<unsigned int const*,std::vector<unsigned int>>::operator*(&__for_begin);
      v8 = v7;
      if ( *(_BYTE *)(((unsigned __int64)v7 >> 3) + 0x7FFF8000) != 0
        && (char)(((unsigned __int8)v7 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)v7 >> 3) + 0x7FFF8000) )
      {
        __asan_report_load4(v7);
      }
      if ( PlayerQuestComp::isPlaceOccupied(this, *v8, *(_DWORD *)(v2 + 32)) )
      {
        result = 0LL;
        goto LABEL_14;
      }
      __gnu_cxx::__normal_iterator<unsigned int const*,std::vector<unsigned int>>::operator++(&__for_begin);
    }
    result = 1LL;
  }
  else
  {
    common::milog::MiLogStream::create(
      &v13,
      &common::milog::MiLogDefault::default_log_obj_,
      4u,
      "./src/player/quest/player_quest_comp.cpp",
      "checkIsQuestPlaceAllAvailable",
      7878);
    v5 = common::milog::MiLogStream::operator<<<char [43],(char *[43])0>(
           &v13,
           (const char (*)[43])"findPlayerQuestExcelConfig fail. quest_id:");
    common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v5, (const unsigned int *)(v2 + 32));
    common::milog::MiLogStream::~MiLogStream(&v13);
    result = 0LL;
  }
LABEL_14:
  if ( v14 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 7893: range 0000000013E13762-0000000013E1378E
bool __cdecl PlayerQuestComp::isPlaceOccupied(PlayerQuestComp *const this, uint32_t place_id, uint32_t quest_id)
{
  return PlayerQuestComp::getPlaceOccupiedQuest(this, place_id, quest_id) != 0;
};

// Line 7898: range 0000000013E13790-0000000013E13B0F
void __fastcall PlayerQuestComp::calcLackingPlaceList(
        PlayerQuestComp *const this,
        const Quest *quest,
        proto::Quest *proto_quest,
        uint32_t quest_id)
{
  unsigned __int64 v4; // r12
  __int64 v5; // rax
  _DWORD *v6; // r13
  __gnu_cxx::__normal_iterator<unsigned int const*,std::vector<unsigned int> >::reference v7; // rax
  _DWORD *v8; // rdx
  int v9; // r14d
  unsigned int *v10; // rax
  _DWORD *v11; // rdx
  char v12; // cl
  char *v13; // rsi
  __int64 v14; // rcx
  common::milog::MiLogStream *v15; // rax
  common::milog::MiLogStream *v16; // rax
  common::milog::MiLogStream *v17; // rax
  common::milog::MiLogStream *v18; // rax
  common::milog::MiLogStream *v19; // rax
  std::vector<unsigned int>::const_iterator __for_begin; // [rsp+28h] [rbp-D8h] BYREF
  std::vector<unsigned int>::const_iterator __for_end; // [rsp+30h] [rbp-D0h] BYREF
  const data::QuestExcelConfig *quest_config_ptr; // [rsp+38h] [rbp-C8h]
  google::protobuf::Map<unsigned int,unsigned int> *lacked_place_map; // [rsp+40h] [rbp-C0h]
  const std::vector<unsigned int> *__for_range; // [rsp+48h] [rbp-B8h]
  common::milog::MiLogStream v27; // [rsp+50h] [rbp-B0h] BYREF
  char v28[144]; // [rsp+70h] [rbp-90h] BYREF

  v4 = (unsigned __int64)v28;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v5 = __asan_stack_malloc_1(96LL);
    if ( v5 )
      v4 = v5;
  }
  *(_QWORD *)v4 = 1102416563LL;
  *(_QWORD *)(v4 + 8) = "3 32 4 13 place_id:7911 48 4 22 occupied_quest_id:7913 64 4 13 quest_id:7897";
  *(_QWORD *)(v4 + 16) = PlayerQuestComp::calcLackingPlaceList;
  v6 = (_DWORD *)(v4 >> 3);
  v6[536862720] = -235802127;
  v6[536862721] = -234556924;
  v6[536862722] = -202116348;
  *(_DWORD *)(v4 + 64) = quest_id;
  if ( Quest::getState(quest) == QUEST_STATE_UNSTARTED )
  {
    quest_config_ptr = Quest::getQuestConfig(quest);
    if ( quest_config_ptr )
    {
      lacked_place_map = proto::Quest::mutable_lacked_place_map(proto_quest);
      __for_range = &quest_config_ptr->exclusive_place_list;
      __for_begin._M_current = std::vector<unsigned int>::begin(&quest_config_ptr->exclusive_place_list)._M_current;
      __for_end._M_current = std::vector<unsigned int>::end(&quest_config_ptr->exclusive_place_list)._M_current;
      while ( __gnu_cxx::operator!=<unsigned int const*,std::vector<unsigned int>>(&__for_begin, &__for_end) )
      {
        v7 = __gnu_cxx::__normal_iterator<unsigned int const*,std::vector<unsigned int>>::operator*(&__for_begin);
        v8 = v7;
        if ( *(_BYTE *)(((unsigned __int64)v7 >> 3) + 0x7FFF8000) != 0
          && (char)(((unsigned __int8)v7 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)v7 >> 3) + 0x7FFF8000) )
        {
          __asan_report_load4(v7);
        }
        *(_DWORD *)(v4 + 32) = *v8;
        *(_DWORD *)(v4 + 48) = PlayerQuestComp::getPlaceOccupiedQuest(this, *(_DWORD *)(v4 + 32), *(_DWORD *)(v4 + 64));
        if ( *(_DWORD *)(v4 + 48) )
        {
          proto::Quest::add_lacked_place_list(proto_quest, *(_DWORD *)(v4 + 32));
          v9 = *(_DWORD *)(v4 + 48);
          v13 = (char *)(v4 + 32);
          v10 = google::protobuf::Map<unsigned int,unsigned int>::operator[](
                  lacked_place_map,
                  (const google::protobuf::Map<unsigned int,unsigned int>::key_type *)(v4 + 32));
          v11 = v10;
          v12 = *(_BYTE *)(((unsigned __int64)v10 >> 3) + 0x7FFF8000);
          LOBYTE(v13) = v12 != 0;
          v14 = (v12 != 0) & (unsigned __int8)((char)(((unsigned __int8)v10 & 7) + 3) >= v12);
          if ( (_BYTE)v14 )
            __asan_report_store4(v10, v13, v10, v14);
          *v11 = v9;
          common::milog::MiLogStream::create(
            &v27,
            &common::milog::MiLogDefault::default_log_obj_,
            1u,
            "./src/player/quest/player_quest_comp.cpp",
            "calcLackingPlaceList",
            7918);
          v15 = common::milog::MiLogStream::operator<<<char [19],(char *[19])0>(
                  &v27,
                  (const char (*)[19])"occupied place id:");
          v16 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                  v15,
                  (const unsigned int *)(v4 + 32));
          v17 = common::milog::MiLogStream::operator<<<char [20],(char *[20])0>(
                  v16,
                  (const char (*)[20])" occupied quest id:");
          v18 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                  v17,
                  (const unsigned int *)(v4 + 48));
          v19 = common::milog::MiLogStream::operator<<<char [11],(char *[11])0>(v18, (const char (*)[11])" quest_id:");
          common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v19, (const unsigned int *)(v4 + 64));
          common::milog::MiLogStream::~MiLogStream(&v27);
        }
        __gnu_cxx::__normal_iterator<unsigned int const*,std::vector<unsigned int>>::operator++(&__for_begin);
      }
    }
  }
  if ( v28 == (char *)v4 )
  {
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0LL;
    *(_DWORD *)((v4 >> 3) + 0x7FFF8008) = 0;
  }
  else
  {
    *(_QWORD *)v4 = 1172321806LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v4 >> 3) + 0x7FFF8008) = -168430091;
  }
};

// Line 7924: range 0000000013E13B10-0000000013E13F39
__int64 __fastcall PlayerQuestComp::getPlaceOccupiedQuest(
        PlayerQuestComp *const this,
        uint32_t place_id,
        uint32_t quest_id)
{
  unsigned __int64 v3; // r12
  __int64 v4; // rax
  _DWORD *v5; // r13
  std::_Rb_tree_iterator<std::pair<unsigned int const,std::set<unsigned int> > >::pointer v6; // rax
  std::_Rb_tree_const_iterator<unsigned int>::reference v8; // rax
  _DWORD *v9; // rdx
  common::milog::MiLogStream *v10; // r14
  std::_Rb_tree_iterator<std::pair<unsigned int const,std::set<unsigned int> > >::pointer v11; // rax
  common::milog::MiLogStream *v12; // rax
  common::milog::MiLogStream *v13; // rax
  common::milog::MiLogStream *v14; // rax
  common::milog::MiLogStream *v15; // rax
  common::milog::MiLogStream *v16; // rax
  __int64 result; // rax
  bool is_same_parent; // [rsp+1Fh] [rbp-F1h]
  uint32_t parent_quest_id; // [rsp+20h] [rbp-F0h]
  std::set<unsigned int>::iterator __for_begin; // [rsp+28h] [rbp-E8h] BYREF
  std::set<unsigned int>::iterator __for_end; // [rsp+30h] [rbp-E0h] BYREF
  std::set<unsigned int> *__for_range; // [rsp+38h] [rbp-D8h]
  common::milog::MiLogStream v24; // [rsp+40h] [rbp-D0h] BYREF
  char v25[176]; // [rsp+60h] [rbp-B0h] BYREF

  v3 = (unsigned __int64)v25;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_1(128LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "4 48 4 22 occupied_quest_id:7930 64 4 13 place_id:7923 80 4 13 quest_id:7923 96 8 9 iter:7926";
  *(_QWORD *)(v3 + 16) = PlayerQuestComp::getPlaceOccupiedQuest;
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = -234556943;
  v5[536862722] = -234556924;
  v5[536862723] = -202116352;
  *(_DWORD *)(v3 + 64) = place_id;
  *(_DWORD *)(v3 + 80) = quest_id;
  parent_quest_id = PlayerQuestComp::findParentQuestId(this, *(_DWORD *)(v3 + 80));
  *(std::map<unsigned int,std::set<unsigned int>>::iterator *)(v3 + 96) = std::map<unsigned int,std::set<unsigned int>>::find(
                                                                            &this->occupied_place_map_,
                                                                            (const std::map<unsigned int,std::set<unsigned int>>::key_type *)(v3 + 64));
  is_same_parent = 0;
  __for_end._M_node = std::map<unsigned int,std::set<unsigned int>>::end(&this->occupied_place_map_)._M_node;
  if ( std::operator!=(
         (const std::_Rb_tree_iterator<std::pair<unsigned int const,std::set<unsigned int> > >::_Self *)(v3 + 96),
         (const std::_Rb_tree_iterator<std::pair<unsigned int const,std::set<unsigned int> > >::_Self *)&__for_end) )
  {
    v6 = std::_Rb_tree_iterator<std::pair<unsigned int const,std::set<unsigned int>>>::operator->((const std::_Rb_tree_iterator<std::pair<unsigned int const,std::set<unsigned int> > > *const)(v3 + 96));
    if ( !std::set<unsigned int>::empty(&v6->second) )
    {
      __for_range = &std::_Rb_tree_iterator<std::pair<unsigned int const,std::set<unsigned int>>>::operator->((const std::_Rb_tree_iterator<std::pair<unsigned int const,std::set<unsigned int> > > *const)(v3 + 96))->second;
      __for_begin._M_node = std::set<unsigned int>::begin(__for_range)._M_node;
      __for_end._M_node = std::set<unsigned int>::end(__for_range)._M_node;
      while ( std::operator!=(&__for_begin, &__for_end) )
      {
        v8 = std::_Rb_tree_const_iterator<unsigned int>::operator*(&__for_begin);
        v9 = v8;
        if ( *(_BYTE *)(((unsigned __int64)v8 >> 3) + 0x7FFF8000) != 0
          && (char)(((unsigned __int8)v8 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)v8 >> 3) + 0x7FFF8000) )
        {
          __asan_report_load4(v8);
        }
        *(_DWORD *)(v3 + 48) = *v9;
        if ( parent_quest_id != PlayerQuestComp::findParentQuestId(this, *(_DWORD *)(v3 + 48)) )
        {
          if ( is_same_parent )
          {
            common::milog::MiLogStream::create(
              &v24,
              &common::milog::MiLogDefault::default_log_obj_,
              4u,
              "./src/player/quest/player_quest_comp.cpp",
              "getPlaceOccupiedQuest",
              7942);
            v10 = common::milog::MiLogStream::operator<<<char [51],(char *[51])0>(
                    &v24,
                    (const char (*)[51])"2 different quest occupied place_id, quest_id_set:");
            v11 = std::_Rb_tree_iterator<std::pair<unsigned int const,std::set<unsigned int>>>::operator->((const std::_Rb_tree_iterator<std::pair<unsigned int const,std::set<unsigned int> > > *const)(v3 + 96));
            common::milog::MiLogStream::operator<<<unsigned int>(v10, &v11->second);
            common::milog::MiLogStream::~MiLogStream(&v24);
          }
          common::milog::MiLogStream::create(
            &v24,
            &common::milog::MiLogDefault::default_log_obj_,
            1u,
            "./src/player/quest/player_quest_comp.cpp",
            "getPlaceOccupiedQuest",
            7945);
          v12 = common::milog::MiLogStream::operator<<<char [53],(char *[53])0>(
                  &v24,
                  (const char (*)[53])"quest_id need place but place is occupied, place_id:");
          v13 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                  v12,
                  (const unsigned int *)(v3 + 64));
          v14 = common::milog::MiLogStream::operator<<<char [12],(char *[12])0>(v13, (const char (*)[12])", quest_id:");
          v15 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                  v14,
                  (const unsigned int *)(v3 + 80));
          v16 = common::milog::MiLogStream::operator<<<char [21],(char *[21])0>(
                  v15,
                  (const char (*)[21])", occupied_quest_id:");
          common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v16, (const unsigned int *)(v3 + 48));
          common::milog::MiLogStream::~MiLogStream(&v24);
          result = *(unsigned int *)(v3 + 48);
          goto LABEL_19;
        }
        is_same_parent = 1;
        std::_Rb_tree_const_iterator<unsigned int>::operator++(&__for_begin);
      }
    }
  }
  result = 0LL;
LABEL_19:
  if ( v25 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 7954: range 0000000013E13F3A-0000000013E13F72
void __cdecl PlayerQuestComp::registerOccupiedResource(
        PlayerQuestComp *const this,
        const data::QuestExcelConfig *quest_config)
{
  PlayerQuestComp::registerOccupiedPlace(this, quest_config);
  PlayerQuestComp::registerOccupiedNpc(this, quest_config);
};

// Line 7960: range 0000000013E13F74-0000000013E13FB9
void __cdecl PlayerQuestComp::unregisterOccupiedResource(
        PlayerQuestComp *const this,
        const data::QuestExcelConfig *quest_config,
        bool is_by_remove)
{
  PlayerQuestComp::unregisterOccupiedPlace(this, quest_config, is_by_remove);
  PlayerQuestComp::unregisterOccupiedNpc(this, quest_config, is_by_remove);
};

// Line 7966: range 0000000013E13FBA-0000000013E142E1
void __fastcall PlayerQuestComp::tryRemoveCoopPointQuest(PlayerQuestComp *const this, uint32_t coop_point_id)
{
  unsigned __int64 v2; // rbx
  __int64 v3; // rax
  unsigned __int64 v4; // r12
  std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v5; // rax
  bool v6; // r14
  std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v7; // rax
  unsigned int *v8; // rax
  uint32_t *v9; // rdx
  uint32_t quest_id; // [rsp+14h] [rbp-BCh]
  std::set<unsigned int>::iterator __for_begin; // [rsp+18h] [rbp-B8h] BYREF
  std::set<unsigned int>::iterator __for_end; // [rsp+20h] [rbp-B0h] BYREF
  const std::set<unsigned int> *__for_range; // [rsp+28h] [rbp-A8h]
  std::shared_ptr<Config> v14; // [rsp+30h] [rbp-A0h] BYREF
  common::milog::MiLogStream v15; // [rsp+40h] [rbp-90h] BYREF
  char v16[112]; // [rsp+60h] [rbp-70h] BYREF

  v2 = (unsigned __int64)v16;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_0(64LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "1 32 4 18 coop_point_id:7965";
  *(_QWORD *)(v2 + 16) = PlayerQuestComp::tryRemoveCoopPointQuest;
  v4 = v2 >> 3;
  *(_DWORD *)(v4 + 2147450880) = -235802127;
  *(_DWORD *)(v4 + 2147450884) = -202116348;
  *(_DWORD *)(v2 + 32) = coop_point_id;
  ServiceBox::findService<GameserverService>();
  GameserverService::getConfig((GameserverService *const)&v14);
  v5 = std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false> *const)&v14);
  v6 = !common::tools::MiscUtils::isContains<std::unordered_map<unsigned int,std::set<unsigned int>> const,unsigned int>(
          &v5->design_config.txt_config_mgr.quest_config_mgr.coop_point_to_quest_map,
          (const unsigned int *)(v2 + 32));
  std::shared_ptr<Config>::~shared_ptr(&v14);
  if ( v6 )
  {
    common::milog::MiLogStream::create(
      &v15,
      &common::milog::MiLogDefault::default_log_obj_,
      4u,
      "./src/player/quest/player_quest_comp.cpp",
      "tryRemoveCoopPointQuest",
      7969);
    common::milog::MiLogStream::operator<<<char [25],(char *[25])0>(
      &v15,
      (const char (*)[25])"coop_point have no quest");
    common::milog::MiLogStream::~MiLogStream(&v15);
  }
  else
  {
    ServiceBox::findService<GameserverService>();
    GameserverService::getConfig((GameserverService *const)&v14);
    v7 = std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false> *const)&v14);
    __for_range = std::unordered_map<unsigned int,std::set<unsigned int>>::at(
                    &v7->design_config.txt_config_mgr.quest_config_mgr.coop_point_to_quest_map,
                    (const std::unordered_map<unsigned int,std::set<unsigned int>>::key_type *)(v2 + 32));
    std::shared_ptr<Config>::~shared_ptr(&v14);
    __for_begin._M_node = std::set<unsigned int>::begin(__for_range)._M_node;
    __for_end._M_node = std::set<unsigned int>::end(__for_range)._M_node;
    while ( std::operator!=(&__for_begin, &__for_end) )
    {
      v8 = (unsigned int *)std::_Rb_tree_const_iterator<unsigned int>::operator*(&__for_begin);
      v9 = v8;
      if ( *(_BYTE *)(((unsigned __int64)v8 >> 3) + 0x7FFF8000) != 0
        && (char)(((unsigned __int8)v8 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)v8 >> 3) + 0x7FFF8000) )
      {
        __asan_report_load4(v8);
      }
      quest_id = *v9;
      PlayerQuestComp::removeQuest(this, *v9, 8u, 1);
      PlayerQuestComp::removeQuestState(this, quest_id);
      std::_Rb_tree_const_iterator<unsigned int>::operator++(&__for_begin);
    }
  }
  if ( v16 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
  }
};

// Line 7982: range 0000000013E142E2-0000000013E1441A
void __cdecl PlayerQuestComp::removeQuestState(PlayerQuestComp *const this, uint32_t quest_id)
{
  unsigned __int64 v2; // rbx
  __int64 v3; // rax
  unsigned __int64 v4; // r12
  int ParentQuestId; // eax
  ParentQuest *v6; // rax
  char v7[96]; // [rsp+10h] [rbp-60h] BYREF

  v2 = (unsigned __int64)v7;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_0(64LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "1 32 16 21 parent_quest_ptr:7983";
  *(_QWORD *)(v2 + 16) = PlayerQuestComp::removeQuestState;
  v4 = v2 >> 3;
  *(_DWORD *)(v4 + 2147450880) = -235802127;
  *(_DWORD *)(v4 + 2147450884) = -202178560;
  ParentQuestId = PlayerQuestComp::findParentQuestId(this, quest_id);
  PlayerQuestComp::findParentQuest((const PlayerQuestComp *const)(v2 + 32), (__int64)this, ParentQuestId);
  if ( std::operator!=<ParentQuest>((const std::shared_ptr<ParentQuest> *)(v2 + 32), 0LL) )
  {
    v6 = std::__shared_ptr_access<ParentQuest,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<ParentQuest,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 32));
    ParentQuest::delChildQuestState(v6, quest_id);
  }
  std::shared_ptr<ParentQuest>::~shared_ptr((std::shared_ptr<ParentQuest> *const)(v2 + 32));
  if ( v7 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
  }
};

// Line 7991: range 0000000013E1441C-0000000013E145A4
void __cdecl PlayerQuestComp::notifyCancelFinishParentQuest(PlayerQuestComp *const this, uint32_t parent_quest_id)
{
  unsigned __int64 v2; // rbx
  __int64 v3; // rax
  unsigned __int64 v4; // r12
  std::__shared_ptr_access<proto::CancelFinishParentQuestNotify,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v5; // rax
  Player *player; // r14
  std::shared_ptr<proto::CancelFinishParentQuestNotify> __r; // [rsp+10h] [rbp-80h] BYREF
  char v8[112]; // [rsp+20h] [rbp-70h] BYREF

  v2 = (unsigned __int64)v8;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_0(64LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "1 32 16 15 notify_ptr:7992";
  *(_QWORD *)(v2 + 16) = PlayerQuestComp::notifyCancelFinishParentQuest;
  v4 = v2 >> 3;
  *(_DWORD *)(v4 + 2147450880) = -235802127;
  *(_DWORD *)(v4 + 2147450884) = -202178560;
  common::tools::perf::make_shared<proto::CancelFinishParentQuestNotify>();
  v5 = std::__shared_ptr_access<proto::CancelFinishParentQuestNotify,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<proto::CancelFinishParentQuestNotify,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 32));
  proto::CancelFinishParentQuestNotify::set_parent_quest_id(v5, parent_quest_id);
  if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
    __asan_report_load8(&this->player_);
  player = this->player_;
  std::dynamic_pointer_cast<google::protobuf::Message const,proto::CancelFinishParentQuestNotify>(&__r);
  Player::sendMessage(player, (common::minet::ConstMessagePtr *)&__r, 0LL);
  std::shared_ptr<google::protobuf::Message const>::~shared_ptr((std::shared_ptr<const google::protobuf::Message> *const)&__r);
  std::shared_ptr<proto::CancelFinishParentQuestNotify>::~shared_ptr((std::shared_ptr<proto::CancelFinishParentQuestNotify> *const)(v2 + 32));
  if ( v8 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
  }
};

// Line 7998: range 0000000013E145A6-0000000013E1472B
void __cdecl PlayerQuestComp::tryStartCheckQuestTimeVarTimer(PlayerQuestComp *const this)
{
  common::milog::MiLogStream *v1; // rcx
  common::milog::MiLogStream v2; // [rsp+10h] [rbp-30h] BYREF

  if ( !common::tools::MiTimer::isActive(&this->check_quest_time_var_timer_) )
  {
    common::milog::MiLogStream::create(
      &v2,
      &common::milog::MiLogDefault::default_log_obj_,
      1u,
      "./src/player/quest/player_quest_comp.cpp",
      "tryStartCheckQuestTimeVarTimer",
      8001);
    common::milog::MiLogStream::operator<<<char [34],(char *[34])0>(
      &v2,
      (const char (*)[34])"start check_quest_time_var_timer_");
    common::milog::MiLogStream::~MiLogStream(&v2);
    if ( PlayerUnixTimer::startS(
           &this->check_quest_time_var_timer_,
           0x12Cu,
           1,
           "./src/player/quest/player_quest_comp.cpp",
           "tryStartCheckQuestTimeVarTimer",
           8002) )
    {
      common::milog::MiLogStream::create(
        &v2,
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/player/quest/player_quest_comp.cpp",
        "tryStartCheckQuestTimeVarTimer",
        8004);
      v1 = common::milog::MiLogStream::operator<<<char [21],(char *[21])0>(
             &v2,
             (const char (*)[21])" start timer failed!");
      if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
        __asan_report_load8(&this->player_);
      operator<<(v1, this->player_);
      common::milog::MiLogStream::~MiLogStream(&v2);
    }
    PlayerQuestComp::updateTimeVarQuest(this);
  }
};

// Line 8012: range 0000000013E1472C-0000000013E149CB
__int64 __fastcall PlayerQuestComp::refreshQuestTimeVar(
        PlayerQuestComp *const this,
        uint32_t parent_quest_id,
        uint32_t key)
{
  unsigned __int64 v3; // rbx
  __int64 v4; // rax
  _DWORD *v5; // r13
  common::milog::MiLogStream *v6; // rax
  unsigned int v7; // r14d
  ParentQuest *v8; // rax
  common::milog::MiLogStream *v9; // rax
  __int64 result; // rax
  common::milog::MiLogStream v12; // [rsp+10h] [rbp-B0h] BYREF
  char v13[144]; // [rsp+30h] [rbp-90h] BYREF

  v3 = (unsigned __int64)v13;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_1(96LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "2 48 4 20 parent_quest_id:8011 64 16 21 parent_quest_ptr:8013";
  *(_QWORD *)(v3 + 16) = PlayerQuestComp::refreshQuestTimeVar;
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = -234556943;
  v5[536862722] = -202178560;
  *(_DWORD *)(v3 + 48) = parent_quest_id;
  PlayerQuestComp::findParentQuest((const PlayerQuestComp *const)(v3 + 64), (__int64)this, *(_DWORD *)(v3 + 48));
  if ( std::operator==<ParentQuest>((const std::shared_ptr<ParentQuest> *)(v3 + 64), 0LL) )
  {
    common::milog::MiLogStream::create(
      &v12,
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/player/quest/player_quest_comp.cpp",
      "refreshQuestTimeVar",
      8016);
    v6 = common::milog::MiLogStream::operator<<<char [45],(char *[45])0>(&v12, (const char (*)[45])byte_25167460);
    common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v6, (const unsigned int *)(v3 + 48));
    common::milog::MiLogStream::~MiLogStream(&v12);
    v7 = -1;
  }
  else
  {
    v8 = std::__shared_ptr_access<ParentQuest,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<ParentQuest,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 64));
    if ( ParentQuest::refreshQuestTimeVar(v8, key) )
    {
      common::milog::MiLogStream::create(
        &v12,
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/player/quest/player_quest_comp.cpp",
        "refreshQuestTimeVar",
        8021);
      v9 = common::milog::MiLogStream::operator<<<char [44],(char *[44])0>(
             &v12,
             (const char (*)[44])"refreshQuestTimeVar failed,parent quest id:");
      common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v9, (const unsigned int *)(v3 + 48));
      common::milog::MiLogStream::~MiLogStream(&v12);
      v7 = -1;
    }
    else
    {
      PlayerQuestComp::tryStartCheckQuestTimeVarTimer(this);
      v7 = 0;
    }
  }
  std::shared_ptr<ParentQuest>::~shared_ptr((std::shared_ptr<ParentQuest> *const)(v3 + 64));
  result = v7;
  if ( v13 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8008) = 0;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8008) = -168430091;
  }
  return result;
};

// Line 8029: range 0000000013E149CC-0000000013E14C5C
__int64 __fastcall PlayerQuestComp::clearQuestTimeVar(
        PlayerQuestComp *const this,
        uint32_t parent_quest_id,
        uint32_t key)
{
  unsigned __int64 v3; // rbx
  __int64 v4; // rax
  _DWORD *v5; // r13
  common::milog::MiLogStream *v6; // rax
  unsigned int v7; // r14d
  ParentQuest *v8; // rax
  common::milog::MiLogStream *v9; // rax
  __int64 result; // rax
  common::milog::MiLogStream v12; // [rsp+10h] [rbp-B0h] BYREF
  char v13[144]; // [rsp+30h] [rbp-90h] BYREF

  v3 = (unsigned __int64)v13;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_1(96LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "2 48 4 20 parent_quest_id:8028 64 16 21 parent_quest_ptr:8030";
  *(_QWORD *)(v3 + 16) = PlayerQuestComp::clearQuestTimeVar;
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = -234556943;
  v5[536862722] = -202178560;
  *(_DWORD *)(v3 + 48) = parent_quest_id;
  PlayerQuestComp::findParentQuest((const PlayerQuestComp *const)(v3 + 64), (__int64)this, *(_DWORD *)(v3 + 48));
  if ( std::operator==<ParentQuest>((const std::shared_ptr<ParentQuest> *)(v3 + 64), 0LL) )
  {
    common::milog::MiLogStream::create(
      &v12,
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/player/quest/player_quest_comp.cpp",
      "clearQuestTimeVar",
      8033);
    v6 = common::milog::MiLogStream::operator<<<char [45],(char *[45])0>(&v12, (const char (*)[45])byte_25167460);
    common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v6, (const unsigned int *)(v3 + 48));
    common::milog::MiLogStream::~MiLogStream(&v12);
    v7 = -1;
  }
  else
  {
    v8 = std::__shared_ptr_access<ParentQuest,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<ParentQuest,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 64));
    if ( ParentQuest::clearQuestTimeVar(v8, key) )
    {
      common::milog::MiLogStream::create(
        &v12,
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/player/quest/player_quest_comp.cpp",
        "clearQuestTimeVar",
        8038);
      v9 = common::milog::MiLogStream::operator<<<char [42],(char *[42])0>(
             &v12,
             (const char (*)[42])"clearQuestTimeVar failed,parent quest id:");
      common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v9, (const unsigned int *)(v3 + 48));
      common::milog::MiLogStream::~MiLogStream(&v12);
      v7 = -1;
    }
    else
    {
      v7 = 0;
    }
  }
  std::shared_ptr<ParentQuest>::~shared_ptr((std::shared_ptr<ParentQuest> *const)(v3 + 64));
  result = v7;
  if ( v13 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8008) = 0;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8008) = -168430091;
  }
  return result;
};

// Line 8045: range 0000000013E14C5E-0000000013E14E5B
__int64 __fastcall PlayerQuestComp::getQuestTimeVar(
        const PlayerQuestComp *const this,
        uint32_t parent_quest_id,
        uint32_t key)
{
  unsigned __int64 v3; // rbx
  __int64 v4; // rax
  _DWORD *v5; // r12
  common::milog::MiLogStream *v6; // rax
  uint32_t QuestTimeVar; // r14d
  std::__shared_ptr_access<ParentQuest,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v8; // rax
  __int64 result; // rax
  common::milog::MiLogStream v11; // [rsp+10h] [rbp-B0h] BYREF
  char v12[144]; // [rsp+30h] [rbp-90h] BYREF

  v3 = (unsigned __int64)v12;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_1(96LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "2 48 4 20 parent_quest_id:8044 64 16 21 parent_quest_ptr:8046";
  *(_QWORD *)(v3 + 16) = PlayerQuestComp::getQuestTimeVar;
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = -234556943;
  v5[536862722] = -202178560;
  *(_DWORD *)(v3 + 48) = parent_quest_id;
  PlayerQuestComp::findParentQuest((const PlayerQuestComp *const)(v3 + 64), (__int64)this, *(_DWORD *)(v3 + 48));
  if ( std::operator==<ParentQuest>((const std::shared_ptr<ParentQuest> *)(v3 + 64), 0LL) )
  {
    common::milog::MiLogStream::create(
      &v11,
      &common::milog::MiLogDefault::default_log_obj_,
      1u,
      "./src/player/quest/player_quest_comp.cpp",
      "getQuestTimeVar",
      8049);
    v6 = common::milog::MiLogStream::operator<<<char [45],(char *[45])0>(&v11, (const char (*)[45])byte_25167460);
    common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v6, (const unsigned int *)(v3 + 48));
    common::milog::MiLogStream::~MiLogStream(&v11);
    QuestTimeVar = 0;
  }
  else
  {
    v8 = std::__shared_ptr_access<ParentQuest,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<ParentQuest,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 64));
    QuestTimeVar = ParentQuest::getQuestTimeVar(v8, key);
  }
  std::shared_ptr<ParentQuest>::~shared_ptr((std::shared_ptr<ParentQuest> *const)(v3 + 64));
  result = QuestTimeVar;
  if ( v12 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8008) = 0;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8008) = -168430091;
  }
  return result;
};

// Line 8056: range 0000000013E14E5C-0000000013E1512F
__int64 __fastcall PlayerQuestComp::setQuestTimeVarByGM(
        PlayerQuestComp *const this,
        uint32_t parent_quest_id,
        uint32_t key,
        uint32_t value)
{
  unsigned __int64 v4; // rbx
  __int64 v5; // rax
  _DWORD *v6; // r13
  common::milog::MiLogStream *v7; // rax
  unsigned int v8; // r14d
  ParentQuest *v9; // rax
  common::milog::MiLogStream *v10; // rax
  __int64 result; // rax
  common::milog::MiLogStream v14; // [rsp+20h] [rbp-B0h] BYREF
  char v15[144]; // [rsp+40h] [rbp-90h] BYREF

  v4 = (unsigned __int64)v15;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v5 = __asan_stack_malloc_1(96LL);
    if ( v5 )
      v4 = v5;
  }
  *(_QWORD *)v4 = 1102416563LL;
  *(_QWORD *)(v4 + 8) = "2 48 4 20 parent_quest_id:8055 64 16 21 parent_quest_ptr:8057";
  *(_QWORD *)(v4 + 16) = PlayerQuestComp::setQuestTimeVarByGM;
  v6 = (_DWORD *)(v4 >> 3);
  v6[536862720] = -235802127;
  v6[536862721] = -234556943;
  v6[536862722] = -202178560;
  *(_DWORD *)(v4 + 48) = parent_quest_id;
  PlayerQuestComp::findParentQuest((const PlayerQuestComp *const)(v4 + 64), (__int64)this, *(_DWORD *)(v4 + 48));
  if ( std::operator==<ParentQuest>((const std::shared_ptr<ParentQuest> *)(v4 + 64), 0LL) )
  {
    common::milog::MiLogStream::create(
      &v14,
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/player/quest/player_quest_comp.cpp",
      "setQuestTimeVarByGM",
      8060);
    v7 = common::milog::MiLogStream::operator<<<char [45],(char *[45])0>(&v14, (const char (*)[45])byte_25167460);
    common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v7, (const unsigned int *)(v4 + 48));
    common::milog::MiLogStream::~MiLogStream(&v14);
    v8 = -1;
  }
  else
  {
    v9 = std::__shared_ptr_access<ParentQuest,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<ParentQuest,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 64));
    if ( ParentQuest::setQuestTimeVarByGM(v9, key, value) )
    {
      common::milog::MiLogStream::create(
        &v14,
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/player/quest/player_quest_comp.cpp",
        "setQuestTimeVarByGM",
        8065);
      v10 = common::milog::MiLogStream::operator<<<char [44],(char *[44])0>(
              &v14,
              (const char (*)[44])"setQuestTimeVarByGM failed,parent quest id:");
      common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v10, (const unsigned int *)(v4 + 48));
      common::milog::MiLogStream::~MiLogStream(&v14);
      v8 = -1;
    }
    else
    {
      if ( common::tools::MiTimer::isActive(&this->check_quest_time_var_timer_) )
        PlayerQuestComp::updateTimeVarQuest(this);
      PlayerQuestComp::tryStartCheckQuestTimeVarTimer(this);
      v8 = 0;
    }
  }
  std::shared_ptr<ParentQuest>::~shared_ptr((std::shared_ptr<ParentQuest> *const)(v4 + 64));
  result = v8;
  if ( v15 == (char *)v4 )
  {
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0LL;
    *(_DWORD *)((v4 >> 3) + 0x7FFF8008) = 0;
  }
  else
  {
    *(_QWORD *)v4 = 1172321806LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v4 >> 3) + 0x7FFF8008) = -168430091;
  }
  return result;
};

// Line 8078: range 0000000013E15130-0000000013E152B5
void __cdecl PlayerQuestComp::tryStartLeaveSceneRangeCheckTimer(PlayerQuestComp *const this)
{
  common::milog::MiLogStream *v1; // rcx
  common::milog::MiLogStream v2; // [rsp+10h] [rbp-30h] BYREF

  if ( !common::tools::MiTimer::isActive(&this->check_leave_scene_range_timer_) )
  {
    common::milog::MiLogStream::create(
      &v2,
      &common::milog::MiLogDefault::default_log_obj_,
      1u,
      "./src/player/quest/player_quest_comp.cpp",
      "tryStartLeaveSceneRangeCheckTimer",
      8081);
    common::milog::MiLogStream::operator<<<char [37],(char *[37])0>(
      &v2,
      (const char (*)[37])"start check_leave_scene_range_timer_");
    common::milog::MiLogStream::~MiLogStream(&v2);
    if ( PlayerUnixTimer::startS(
           &this->check_leave_scene_range_timer_,
           1u,
           1,
           "./src/player/quest/player_quest_comp.cpp",
           "tryStartLeaveSceneRangeCheckTimer",
           8082) )
    {
      common::milog::MiLogStream::create(
        &v2,
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/player/quest/player_quest_comp.cpp",
        "tryStartLeaveSceneRangeCheckTimer",
        8084);
      v1 = common::milog::MiLogStream::operator<<<char [21],(char *[21])0>(
             &v2,
             (const char (*)[21])" start timer failed!");
      if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
        __asan_report_load8(&this->player_);
      operator<<(v1, this->player_);
      common::milog::MiLogStream::~MiLogStream(&v2);
    }
    PlayerQuestComp::checkLeaveSceneRange(this);
  }
};

// Line 8093: range 0000000013E152B6-0000000013E1576C
__int64 __fastcall PlayerQuestComp::tryAcceptRandomQuestByTemplateByGM(
        PlayerQuestComp *const this,
        uint32_t entrance_id,
        uint32_t template_id,
        const std::pair<data::LogicType,std::vector<std::shared_ptr<RandomQuestFilter>> > *filter_config,
        const std::unordered_map<unsigned int,unsigned int> *factor_map,
        bool is_notify)
{
  unsigned __int64 v6; // r13
  __int64 v7; // rax
  _DWORD *v8; // r12
  common::milog::MiLogStream *v9; // r14
  common::milog::MiLogStream *v10; // rax
  common::milog::MiLogStream *v11; // rax
  uint32_t ParentQuestId; // r14d
  common::milog::MiLogStream *v13; // r14
  common::milog::MiLogStream *v14; // rax
  common::milog::MiLogStream *v15; // rax
  std::__shared_ptr_access<ParentQuest,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v16; // rax
  __int64 result; // rax
  unsigned int val; // [rsp+3Ch] [rbp-124h] BYREF
  std::shared_ptr<ParentQuest> p_parent_quest_ptr; // [rsp+40h] [rbp-120h] BYREF
  common::milog::MiLogStream v24; // [rsp+50h] [rbp-110h] BYREF
  char v25[240]; // [rsp+70h] [rbp-F0h] BYREF

  v6 = (unsigned __int64)v25;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v7 = __asan_stack_malloc_2(192LL);
    if ( v7 )
      v6 = v7;
  }
  *(_QWORD *)v6 = 1102416563LL;
  *(_QWORD *)(v6 + 8) = "4 48 4 16 template_id:8092 64 16 10 guard:8094 96 16 28 random_parent_quest_ptr:8102 128 24 15 factor_vec:8095";
  *(_QWORD *)(v6 + 16) = PlayerQuestComp::tryAcceptRandomQuestByTemplateByGM;
  v8 = (_DWORD *)(v6 >> 3);
  v8[536862720] = -235802127;
  v8[536862721] = -234556943;
  v8[536862722] = -219021312;
  v8[536862723] = -219021312;
  v8[536862724] = -218103808;
  v8[536862725] = -202116109;
  *(_DWORD *)(v6 + 48) = template_id;
  QuestOperatorGuard::QuestOperatorGuard((QuestOperatorGuard *const)(v6 + 64), &this->quest_op_);
  std::vector<unsigned int>::vector((std::vector<unsigned int> *const)(v6 + 128));
  if ( PlayerQuestComp::generateRandomSampleMapByGM(
         this,
         *(_DWORD *)(v6 + 48),
         filter_config,
         factor_map,
         (std::vector<unsigned int> *)(v6 + 128)) )
  {
    common::milog::MiLogStream::create(
      &v24,
      &common::milog::MiLogDefault::default_log_obj_,
      1u,
      "./src/player/quest/player_quest_comp.cpp",
      "tryAcceptRandomQuestByTemplateByGM",
      8098);
    v9 = common::milog::MiLogStream::operator<<<char [37],(char *[37])0>(
           &v24,
           (const char (*)[37])"generateRandomSampleMap failed, uid:");
    if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
      __asan_report_load8(&this->player_);
    val = Player::getUid(this->player_);
    v10 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v9, &val);
    v11 = common::milog::MiLogStream::operator<<<char [14],(char *[14])0>(v10, (const char (*)[14])" template_id:");
    common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v11, (const unsigned int *)(v6 + 48));
    common::milog::MiLogStream::~MiLogStream(&v24);
    ParentQuestId = 0;
  }
  else
  {
    PlayerQuestComp::generateRandomParentQuest(
      (PlayerQuestComp *const)(v6 + 96),
      this,
      entrance_id,
      (const std::vector<unsigned int> *)*(unsigned int *)(v6 + 48),
      (const std::vector<unsigned int> *)(v6 + 128));
    if ( std::operator==<ParentQuest>((const std::shared_ptr<ParentQuest> *)(v6 + 96), 0LL) )
    {
      common::milog::MiLogStream::create(
        &v24,
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/player/quest/player_quest_comp.cpp",
        "tryAcceptRandomQuestByTemplateByGM",
        8105);
      v13 = common::milog::MiLogStream::operator<<<char [39],(char *[39])0>(
              &v24,
              (const char (*)[39])"generateRandomParentQuest failed, uid:");
      if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
        __asan_report_load8(&this->player_);
      val = Player::getUid(this->player_);
      v14 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v13, &val);
      v15 = common::milog::MiLogStream::operator<<<char [14],(char *[14])0>(v14, (const char (*)[14])" template_id:");
      common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v15, (const unsigned int *)(v6 + 48));
      common::milog::MiLogStream::~MiLogStream(&v24);
      ParentQuestId = 0;
    }
    else
    {
      std::shared_ptr<ParentQuest>::shared_ptr(&p_parent_quest_ptr, (const std::shared_ptr<ParentQuest> *)(v6 + 96));
      PlayerQuestComp::acceptRandomParentQuest(this, &p_parent_quest_ptr, is_notify);
      std::shared_ptr<ParentQuest>::~shared_ptr(&p_parent_quest_ptr);
      v16 = std::__shared_ptr_access<ParentQuest,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<ParentQuest,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v6 + 96));
      ParentQuestId = ParentQuest::getParentQuestId(v16);
    }
    std::shared_ptr<ParentQuest>::~shared_ptr((std::shared_ptr<ParentQuest> *const)(v6 + 96));
  }
  std::vector<unsigned int>::~vector((std::vector<unsigned int> *const)(v6 + 128));
  QuestOperatorGuard::~QuestOperatorGuard((QuestOperatorGuard *const)(v6 + 64));
  result = ParentQuestId;
  if ( v25 == (char *)v6 )
  {
    *(_QWORD *)((v6 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v6 >> 3) + 0x7FFF8008) = 0LL;
    *(_QWORD *)((v6 >> 3) + 0x7FFF8010) = 0LL;
  }
  else
  {
    *(_QWORD *)v6 = 1172321806LL;
    *(_QWORD *)((v6 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v6 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v6 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 8116: range 0000000013E1576E-0000000013E16618
__int64 __fastcall PlayerQuestComp::generateRandomSampleMapByGM(
        PlayerQuestComp *const this,
        uint32_t template_id,
        unsigned __int64 filter_config,
        const std::unordered_map<unsigned int,unsigned int> *factor_map,
        std::vector<unsigned int> *factor_vec)
{
  unsigned int v5; // r14d
  unsigned __int64 v6; // r13
  __int64 v7; // rax
  _DWORD *v8; // r12
  std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v9; // rax
  common::milog::MiLogStream *v10; // r14
  common::milog::MiLogStream *v11; // rax
  common::milog::MiLogStream *v12; // rax
  QuestExcelConfigMgr *p_quest_config_mgr; // rcx
  common::milog::MiLogStream *v14; // r14
  common::milog::MiLogStream *v15; // rax
  common::milog::MiLogStream *v16; // rax
  std::__detail::_Node_const_iterator<std::pair<unsigned int const,unsigned int>,false,false>::pointer v17; // rdx
  unsigned int *p_second; // rax
  const unsigned int *v19; // r8
  const unsigned int *v20; // r8
  RandomQuestFilter *p_id; // rdi
  uint32_t id; // edx
  unsigned int *v23; // rax
  common::milog::MiLogStream *v24; // r14
  common::milog::MiLogStream *v25; // rax
  common::milog::MiLogStream *v26; // rax
  common::milog::MiLogStream *v27; // rax
  common::milog::MiLogStream *v28; // rax
  int v29; // r15d
  std::vector<std::pair<unsigned int,unsigned int>>::size_type v30; // r15
  common::milog::MiLogStream *v31; // rax
  common::milog::MiLogStream *v32; // rax
  common::milog::MiLogStream *v33; // r14
  std::vector<std::pair<unsigned int,unsigned int>>::reference v34; // rax
  __int64 result; // rax
  bool flag; // [rsp+31h] [rbp-1DFh]
  bool is_valid; // [rsp+32h] [rbp-1DEh]
  bool is_logic_or; // [rsp+33h] [rbp-1DDh]
  uint32_t sum_weight; // [rsp+34h] [rbp-1DCh]
  std::vector<data::RandomQuestElem>::const_iterator __for_begin; // [rsp+38h] [rbp-1D8h] BYREF
  std::vector<data::RandomQuestElem>::const_iterator __for_end; // [rsp+40h] [rbp-1D0h] BYREF
  std::vector<data::RandomQuestElemPoolExcelConfig>::const_iterator __for_begin_1; // [rsp+48h] [rbp-1C8h] BYREF
  std::vector<data::RandomQuestElemPoolExcelConfig>::const_iterator __for_end_1; // [rsp+50h] [rbp-1C0h] BYREF
  std::vector<data::RandomQuestElemPoolExcelConfig>::const_iterator __for_begin_0; // [rsp+58h] [rbp-1B8h] BYREF
  std::vector<data::RandomQuestElemPoolExcelConfig>::const_iterator __for_end_0; // [rsp+60h] [rbp-1B0h] BYREF
  const data::RandomQuestTemplateExcelConfig *quest_template_config_ptr; // [rsp+68h] [rbp-1A8h]
  const std::vector<data::RandomQuestElem> *__for_range; // [rsp+70h] [rbp-1A0h]
  const data::RandomQuestElem *elem; // [rsp+78h] [rbp-198h]
  const std::vector<std::string> *elem_name; // [rsp+80h] [rbp-190h]
  const unsigned int *elem_pool_id; // [rsp+88h] [rbp-188h]
  const std::vector<data::RandomQuestElemPoolExcelConfig> *elem_pool_vec_ptr; // [rsp+90h] [rbp-180h]
  const std::vector<data::RandomQuestElemPoolExcelConfig> *elem_pool_vec; // [rsp+98h] [rbp-178h]
  const std::vector<data::RandomQuestElemPoolExcelConfig> *__for_range_0; // [rsp+A0h] [rbp-170h]
  const data::RandomQuestElemPoolExcelConfig *config; // [rsp+A8h] [rbp-168h]
  const std::vector<data::RandomQuestElemPoolExcelConfig> *__for_range_2; // [rsp+B0h] [rbp-160h]
  const data::RandomQuestElemPoolExcelConfig *config_1; // [rsp+B8h] [rbp-158h]
  const std::vector<std::shared_ptr<RandomQuestFilter>> *__for_range_3; // [rsp+C0h] [rbp-150h]
  const std::shared_ptr<RandomQuestFilter> *filter_ptr; // [rsp+C8h] [rbp-148h]
  const std::vector<data::RandomQuestElemPoolExcelConfig> *__for_range_1; // [rsp+D0h] [rbp-140h]
  const data::RandomQuestElemPoolExcelConfig *config_0; // [rsp+D8h] [rbp-138h]
  std::vector<std::pair<unsigned int,unsigned int>> *__for_range_4; // [rsp+E0h] [rbp-130h]
  const std::pair<unsigned int,unsigned int> *p; // [rsp+E8h] [rbp-128h]
  std::shared_ptr<Config> v67; // [rsp+F0h] [rbp-120h] BYREF
  common::milog::MiLogStream v68; // [rsp+100h] [rbp-110h] BYREF
  char v69[240]; // [rsp+120h] [rbp-F0h] BYREF

  v6 = (unsigned __int64)v69;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v7 = __asan_stack_malloc_2(192LL);
    if ( v7 )
      v6 = v7;
  }
  *(_QWORD *)v6 = 1102416563LL;
  *(_QWORD *)(v6 + 8) = "5 48 4 15 select_idx:8209 64 4 14 sample_id:8142 80 4 16 template_id:8115 96 8 13 map_iter:8138 "
                        "128 24 18 id_weight_vec:8158";
  *(_QWORD *)(v6 + 16) = PlayerQuestComp::generateRandomSampleMapByGM;
  v8 = (_DWORD *)(v6 >> 3);
  v8[536862720] = -235802127;
  v8[536862721] = -234556943;
  v8[536862722] = -234556924;
  v8[536862723] = -218959360;
  v8[536862724] = -218103808;
  v8[536862725] = -202116109;
  *(_DWORD *)(v6 + 80) = template_id;
  ServiceBox::findService<GameserverService>();
  GameserverService::getConfig((GameserverService *const)&v67);
  v9 = std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false> *const)&v67);
  quest_template_config_ptr = data::QuestExcelConfigMgrBase::findRandomQuestTemplateExcelConfig(
                                &v9->design_config.txt_config_mgr.quest_config_mgr,
                                *(_DWORD *)(v6 + 80));
  std::shared_ptr<Config>::~shared_ptr(&v67);
  if ( !quest_template_config_ptr )
  {
    common::milog::MiLogStream::create(
      &v68,
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/player/quest/player_quest_comp.cpp",
      "generateRandomSampleMapByGM",
      8120);
    v10 = common::milog::MiLogStream::operator<<<char [48],(char *[48])0>(
            &v68,
            (const char (*)[48])"findRandomQuestTemplateExcelConfig failed, uid:");
    if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
      __asan_report_load8(&this->player_);
    *(_DWORD *)(v6 + 64) = Player::getUid(this->player_);
    v11 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v10, (const unsigned int *)(v6 + 64));
    v12 = common::milog::MiLogStream::operator<<<char [14],(char *[14])0>(v11, (const char (*)[14])" template_id:");
    common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v12, (const unsigned int *)(v6 + 80));
    common::milog::MiLogStream::~MiLogStream(&v68);
    v5 = -1;
    goto LABEL_70;
  }
  __for_range = &quest_template_config_ptr->elem_list;
  __for_begin._M_current = std::vector<data::RandomQuestElem>::begin(&quest_template_config_ptr->elem_list)._M_current;
  __for_end._M_current = std::vector<data::RandomQuestElem>::end(&quest_template_config_ptr->elem_list)._M_current;
  while ( 1 )
  {
    if ( !__gnu_cxx::operator!=<data::RandomQuestElem const*,std::vector<data::RandomQuestElem>>(
            &__for_begin,
            &__for_end) )
    {
      v5 = 0;
      goto LABEL_70;
    }
    elem = __gnu_cxx::__normal_iterator<data::RandomQuestElem const*,std::vector<data::RandomQuestElem>>::operator*(&__for_begin);
    elem_name = &elem->name;
    elem_pool_id = &elem->pool_id;
    ServiceBox::findService<GameserverService>();
    GameserverService::getConfig((GameserverService *const)&v67);
    p_quest_config_mgr = &std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false> *const)&v67)->design_config.txt_config_mgr.quest_config_mgr;
    if ( *(_BYTE *)(((unsigned __int64)elem_pool_id >> 3) + 0x7FFF8000) != 0
      && (char)(((unsigned __int8)elem_pool_id & 7) + 3) >= *(_BYTE *)(((unsigned __int64)elem_pool_id >> 3) + 0x7FFF8000) )
    {
      __asan_report_load4(elem_pool_id);
    }
    elem_pool_vec_ptr = QuestExcelConfigMgr::findElemPoolVec(p_quest_config_mgr, *elem_pool_id);
    std::shared_ptr<Config>::~shared_ptr(&v67);
    if ( !elem_pool_vec_ptr )
      break;
    elem_pool_vec = elem_pool_vec_ptr;
    *(std::unordered_map<unsigned int,unsigned int>::const_iterator *)(v6 + 96) = std::unordered_map<unsigned int,unsigned int>::find(
                                                                                    factor_map,
                                                                                    elem_pool_id);
    __for_end_0._M_current = (const data::RandomQuestElemPoolExcelConfig *)std::unordered_map<unsigned int,unsigned int>::end(factor_map)._M_cur;
    if ( std::__detail::operator!=<std::pair<unsigned int const,unsigned int>,false>(
           (const std::__detail::_Node_iterator_base<std::pair<unsigned int const,unsigned int>,false> *)(v6 + 96),
           (const std::__detail::_Node_iterator_base<std::pair<unsigned int const,unsigned int>,false> *)&__for_end_0) )
    {
      flag = 0;
      v17 = std::__detail::_Node_const_iterator<std::pair<unsigned int const,unsigned int>,false,false>::operator->((const std::__detail::_Node_const_iterator<std::pair<unsigned int const,unsigned int>,false,false> *const)(v6 + 96));
      p_second = &v17->second;
      if ( *(_BYTE *)(((unsigned __int64)p_second >> 3) + 0x7FFF8000) != 0
        && (char)(((unsigned __int8)p_second & 7) + 3) >= *(_BYTE *)(((unsigned __int64)p_second >> 3) + 0x7FFF8000) )
      {
        __asan_report_load4(p_second);
      }
      *(_DWORD *)(v6 + 64) = v17->second;
      __for_range_0 = elem_pool_vec;
      __for_begin_0._M_current = std::vector<data::RandomQuestElemPoolExcelConfig>::begin(elem_pool_vec)._M_current;
      __for_end_0._M_current = std::vector<data::RandomQuestElemPoolExcelConfig>::end(__for_range_0)._M_current;
      while ( __gnu_cxx::operator!=<data::RandomQuestElemPoolExcelConfig const*,std::vector<data::RandomQuestElemPoolExcelConfig>>(
                &__for_begin_0,
                &__for_end_0) )
      {
        config = __gnu_cxx::__normal_iterator<data::RandomQuestElemPoolExcelConfig const*,std::vector<data::RandomQuestElemPoolExcelConfig>>::operator*(&__for_begin_0);
        if ( *(_BYTE *)(((unsigned __int64)&config->id >> 3) + 0x7FFF8000) != 0
          && *(_BYTE *)(((unsigned __int64)&config->id >> 3) + 0x7FFF8000) <= 3 )
        {
          __asan_report_load4(&config->id);
        }
        if ( config->id == *(_DWORD *)(v6 + 64) )
        {
          flag = 1;
          break;
        }
        __gnu_cxx::__normal_iterator<data::RandomQuestElemPoolExcelConfig const*,std::vector<data::RandomQuestElemPoolExcelConfig>>::operator++(&__for_begin_0);
      }
      if ( flag )
      {
        std::vector<unsigned int>::emplace_back<unsigned int &>(
          factor_vec,
          (unsigned int *)(v6 + 64),
          (unsigned int *)(v6 + 64));
        goto LABEL_68;
      }
    }
    std::vector<std::pair<unsigned int,unsigned int>>::vector((std::vector<std::pair<unsigned int,unsigned int>> *const)(v6 + 128));
    if ( std::vector<std::shared_ptr<RandomQuestFilter>>::empty((const std::vector<std::shared_ptr<RandomQuestFilter>> *const)(filter_config + 8)) )
    {
      __for_range_1 = elem_pool_vec;
      __for_begin_0._M_current = std::vector<data::RandomQuestElemPoolExcelConfig>::begin(elem_pool_vec)._M_current;
      __for_end_0._M_current = std::vector<data::RandomQuestElemPoolExcelConfig>::end(__for_range_1)._M_current;
      while ( __gnu_cxx::operator!=<data::RandomQuestElemPoolExcelConfig const*,std::vector<data::RandomQuestElemPoolExcelConfig>>(
                &__for_begin_0,
                &__for_end_0) )
      {
        config_0 = __gnu_cxx::__normal_iterator<data::RandomQuestElemPoolExcelConfig const*,std::vector<data::RandomQuestElemPoolExcelConfig>>::operator*(&__for_begin_0);
        std::vector<std::pair<unsigned int,unsigned int>>::emplace_back<unsigned int const&,unsigned int const&>(
          (std::vector<std::pair<unsigned int,unsigned int>> *const)(v6 + 128),
          &config_0->id,
          &config_0->weight,
          &config_0->id,
          v19);
        __gnu_cxx::__normal_iterator<data::RandomQuestElemPoolExcelConfig const*,std::vector<data::RandomQuestElemPoolExcelConfig>>::operator++(&__for_begin_0);
      }
    }
    else
    {
      __for_range_2 = elem_pool_vec;
      __for_begin_1._M_current = std::vector<data::RandomQuestElemPoolExcelConfig>::begin(elem_pool_vec)._M_current;
      __for_end_1._M_current = std::vector<data::RandomQuestElemPoolExcelConfig>::end(__for_range_2)._M_current;
      while ( __gnu_cxx::operator!=<data::RandomQuestElemPoolExcelConfig const*,std::vector<data::RandomQuestElemPoolExcelConfig>>(
                &__for_begin_1,
                &__for_end_1) )
      {
        config_1 = __gnu_cxx::__normal_iterator<data::RandomQuestElemPoolExcelConfig const*,std::vector<data::RandomQuestElemPoolExcelConfig>>::operator*(&__for_begin_1);
        if ( *(_BYTE *)((filter_config >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)((filter_config >> 3) + 0x7FFF8000) <= 3 )
          __asan_report_load4(filter_config);
        is_logic_or = *(_DWORD *)filter_config == 2;
        is_valid = 1;
        __for_range_3 = (const std::vector<std::shared_ptr<RandomQuestFilter>> *)(filter_config + 8);
        __for_begin_0._M_current = (const data::RandomQuestElemPoolExcelConfig *)std::vector<std::shared_ptr<RandomQuestFilter>>::begin((const std::vector<std::shared_ptr<RandomQuestFilter>> *const)(filter_config + 8))._M_current;
        __for_end_0._M_current = (const data::RandomQuestElemPoolExcelConfig *)std::vector<std::shared_ptr<RandomQuestFilter>>::end(__for_range_3)._M_current;
        while ( __gnu_cxx::operator!=<std::shared_ptr<RandomQuestFilter> const*,std::vector<std::shared_ptr<RandomQuestFilter>>>(
                  (const __gnu_cxx::__normal_iterator<const std::shared_ptr<RandomQuestFilter>*,std::vector<std::shared_ptr<RandomQuestFilter>> > *)&__for_begin_0,
                  (const __gnu_cxx::__normal_iterator<const std::shared_ptr<RandomQuestFilter>*,std::vector<std::shared_ptr<RandomQuestFilter>> > *)&__for_end_0) )
        {
          filter_ptr = __gnu_cxx::__normal_iterator<std::shared_ptr<RandomQuestFilter> const*,std::vector<std::shared_ptr<RandomQuestFilter>>>::operator*((const __gnu_cxx::__normal_iterator<const std::shared_ptr<RandomQuestFilter>*,std::vector<std::shared_ptr<RandomQuestFilter>> > *const)&__for_begin_0);
          if ( !std::operator==<RandomQuestFilter>(filter_ptr, 0LL) )
          {
            p_id = std::__shared_ptr_access<RandomQuestFilter,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<RandomQuestFilter,(__gnu_cxx::_Lock_policy)2,false,false> *const)filter_ptr);
            if ( *(_BYTE *)(((unsigned __int64)&config_1->id >> 3) + 0x7FFF8000) != 0
              && *(_BYTE *)(((unsigned __int64)&config_1->id >> 3) + 0x7FFF8000) <= 3 )
            {
              p_id = (RandomQuestFilter *)&config_1->id;
              __asan_report_load4(&config_1->id);
            }
            id = config_1->id;
            if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
            {
              p_id = (RandomQuestFilter *)&this->player_;
              __asan_report_load8(&this->player_);
            }
            is_valid = RandomQuestFilter::isFactorValid(p_id, this->player_, id);
            if ( is_valid && is_logic_or )
              break;
            if ( !is_valid && !is_logic_or )
              break;
          }
          __gnu_cxx::__normal_iterator<std::shared_ptr<RandomQuestFilter> const*,std::vector<std::shared_ptr<RandomQuestFilter>>>::operator++((__gnu_cxx::__normal_iterator<const std::shared_ptr<RandomQuestFilter>*,std::vector<std::shared_ptr<RandomQuestFilter>> > *const)&__for_begin_0);
        }
        if ( is_valid )
          std::vector<std::pair<unsigned int,unsigned int>>::emplace_back<unsigned int const&,unsigned int const&>(
            (std::vector<std::pair<unsigned int,unsigned int>> *const)(v6 + 128),
            &config_1->id,
            &config_1->weight,
            &config_1->id,
            v20);
        __gnu_cxx::__normal_iterator<data::RandomQuestElemPoolExcelConfig const*,std::vector<data::RandomQuestElemPoolExcelConfig>>::operator++(&__for_begin_1);
      }
    }
    sum_weight = 0;
    __for_range_4 = (std::vector<std::pair<unsigned int,unsigned int>> *)(v6 + 128);
    __for_begin_0._M_current = (const data::RandomQuestElemPoolExcelConfig *)std::vector<std::pair<unsigned int,unsigned int>>::begin((std::vector<std::pair<unsigned int,unsigned int>> *const)(v6 + 128))._M_current;
    __for_end_0._M_current = (const data::RandomQuestElemPoolExcelConfig *)std::vector<std::pair<unsigned int,unsigned int>>::end(__for_range_4)._M_current;
    while ( __gnu_cxx::operator!=<std::pair<unsigned int,unsigned int> *,std::vector<std::pair<unsigned int,unsigned int>>>(
              (const __gnu_cxx::__normal_iterator<std::pair<unsigned int,unsigned int>*,std::vector<std::pair<unsigned int,unsigned int>> > *)&__for_begin_0,
              (const __gnu_cxx::__normal_iterator<std::pair<unsigned int,unsigned int>*,std::vector<std::pair<unsigned int,unsigned int>> > *)&__for_end_0) )
    {
      p = __gnu_cxx::__normal_iterator<std::pair<unsigned int,unsigned int> *,std::vector<std::pair<unsigned int,unsigned int>>>::operator*((const __gnu_cxx::__normal_iterator<std::pair<unsigned int,unsigned int>*,std::vector<std::pair<unsigned int,unsigned int>> > *const)&__for_begin_0);
      v23 = &p->second;
      if ( *(_BYTE *)(((unsigned __int64)v23 >> 3) + 0x7FFF8000) != 0
        && (char)(((unsigned __int8)v23 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)v23 >> 3) + 0x7FFF8000) )
      {
        __asan_report_load4(v23);
      }
      sum_weight += p->second;
      __gnu_cxx::__normal_iterator<std::pair<unsigned int,unsigned int> *,std::vector<std::pair<unsigned int,unsigned int>>>::operator++((__gnu_cxx::__normal_iterator<std::pair<unsigned int,unsigned int>*,std::vector<std::pair<unsigned int,unsigned int>> > *const)&__for_begin_0);
    }
    if ( !sum_weight )
    {
      common::milog::MiLogStream::create(
        &v68,
        &common::milog::MiLogDefault::default_log_obj_,
        1u,
        "./src/player/quest/player_quest_comp.cpp",
        "generateRandomSampleMapByGM",
        8206);
      v24 = common::milog::MiLogStream::operator<<<char [45],(char *[45])0>(
              &v68,
              (const char (*)[45])"weightSelectOne failed, sum weight = 0, uid:");
      if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
        __asan_report_load8(&this->player_);
LABEL_59:
      *(_DWORD *)(v6 + 64) = Player::getUid(this->player_);
      v25 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v24, (const unsigned int *)(v6 + 64));
      v26 = common::milog::MiLogStream::operator<<<char [8],(char *[8])0>(v25, (const char (*)[8])" elem: ");
      v27 = common::milog::MiLogStream::operator<<<std::string>(v26, elem_name);
      v28 = common::milog::MiLogStream::operator<<<char [8],(char *[8])0>(v27, (const char (*)[8])" pool: ");
      common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v28, elem_pool_id);
      common::milog::MiLogStream::~MiLogStream(&v68);
      v5 = -1;
      v29 = 0;
      goto LABEL_67;
    }
    *(_DWORD *)(v6 + 48) = 0;
    if ( common::tools::RandomUtils::weightSelectOne<std::pair<unsigned int,unsigned int>,unsigned int std::pair<unsigned int,unsigned int>::*>(
           (const std::vector<std::pair<unsigned int,unsigned int>> *)(v6 + 128),
           (uint32_t *)(v6 + 48),
           (unsigned int *)4,
           0) )
    {
      common::milog::MiLogStream::create(
        &v68,
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/player/quest/player_quest_comp.cpp",
        "generateRandomSampleMapByGM",
        8212);
      v24 = common::milog::MiLogStream::operator<<<char [29],(char *[29])0>(
              &v68,
              (const char (*)[29])"weightSelectOne failed, uid:");
      if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
        __asan_report_load8(&this->player_);
      goto LABEL_59;
    }
    v30 = *(unsigned int *)(v6 + 48);
    if ( v30 < std::vector<std::pair<unsigned int,unsigned int>>::size((const std::vector<std::pair<unsigned int,unsigned int>> *const)(v6 + 128)) )
    {
      v34 = std::vector<std::pair<unsigned int,unsigned int>>::operator[](
              (std::vector<std::pair<unsigned int,unsigned int>> *const)(v6 + 128),
              *(unsigned int *)(v6 + 48));
      std::vector<unsigned int>::emplace_back<unsigned int &>(factor_vec, (unsigned int *)v34, (unsigned int *)v34);
      v29 = 1;
    }
    else
    {
      common::milog::MiLogStream::create(
        &v68,
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/player/quest/player_quest_comp.cpp",
        "generateRandomSampleMapByGM",
        8218);
      v31 = common::milog::MiLogStream::operator<<<char [11],(char *[11])0>(&v68, (const char (*)[11])"select_id:");
      v32 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v31, (const unsigned int *)(v6 + 48));
      v33 = common::milog::MiLogStream::operator<<<char [20],(char *[20])0>(
              v32,
              (const char (*)[20])" greator than size:");
      __for_end_0._M_current = (const data::RandomQuestElemPoolExcelConfig *)std::vector<data::RandomQuestElemPoolExcelConfig>::size(elem_pool_vec);
      common::milog::MiLogStream::operator<<<unsigned long,(unsigned long *)0>(
        v33,
        (const unsigned __int64 *)&__for_end_0);
      common::milog::MiLogStream::~MiLogStream(&v68);
      v5 = -1;
      v29 = 0;
    }
LABEL_67:
    std::vector<std::pair<unsigned int,unsigned int>>::~vector((std::vector<std::pair<unsigned int,unsigned int>> *const)(v6 + 128));
    if ( v29 != 1 )
      goto LABEL_70;
LABEL_68:
    __gnu_cxx::__normal_iterator<data::RandomQuestElem const*,std::vector<data::RandomQuestElem>>::operator++(&__for_begin);
  }
  common::milog::MiLogStream::create(
    &v68,
    &common::milog::MiLogDefault::default_log_obj_,
    3u,
    "./src/player/quest/player_quest_comp.cpp",
    "generateRandomSampleMapByGM",
    8132);
  v14 = common::milog::MiLogStream::operator<<<char [29],(char *[29])0>(
          &v68,
          (const char (*)[29])"findElemPoolVec failed, uid:");
  if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
    __asan_report_load8(&this->player_);
  *(_DWORD *)(v6 + 64) = Player::getUid(this->player_);
  v15 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v14, (const unsigned int *)(v6 + 64));
  v16 = common::milog::MiLogStream::operator<<<char [15],(char *[15])0>(v15, (const char (*)[15])" elem_pool_id:");
  common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v16, elem_pool_id);
  common::milog::MiLogStream::~MiLogStream(&v68);
  v5 = -1;
LABEL_70:
  result = v5;
  if ( v69 == (char *)v6 )
  {
    *(_QWORD *)((v6 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v6 >> 3) + 0x7FFF8008) = 0LL;
    *(_QWORD *)((v6 >> 3) + 0x7FFF8010) = 0LL;
  }
  else
  {
    *(_QWORD *)v6 = 1172321806LL;
    *(_QWORD *)((v6 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v6 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v6 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 8229: range 0000000013E1661A-0000000013E17232
__int64 __fastcall PlayerQuestComp::setFinishParentQuestChildStateByMUIP(
        PlayerQuestComp *const this,
        uint32_t quest_id,
        uint32_t state,
        bool is_notify)
{
  unsigned __int64 v4; // r13
  __int64 v5; // rax
  _DWORD *v6; // r12
  common::milog::MiLogStream *v7; // rax
  common::milog::MiLogStream *v8; // rax
  common::milog::MiLogStream *v9; // rbx
  unsigned int v10; // r14d
  common::milog::MiLogStream *v11; // rax
  common::milog::MiLogStream *v12; // rax
  std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v13; // rax
  common::milog::MiLogStream *v14; // rax
  common::milog::MiLogStream *v15; // rax
  common::milog::MiLogStream *v16; // rbx
  common::milog::MiLogStream *v17; // rax
  common::milog::MiLogStream *v18; // rax
  common::milog::MiLogStream *v19; // r14
  std::__shared_ptr_access<ParentQuest,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v20; // rax
  common::milog::MiLogStream *v21; // r14
  std::__shared_ptr_access<ParentQuest,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v22; // rax
  common::milog::MiLogStream *v23; // rax
  common::milog::MiLogStream *v24; // rax
  common::milog::MiLogStream *v25; // rax
  ParentQuest *v26; // rax
  common::milog::MiLogStream *v27; // rax
  common::milog::MiLogStream *v28; // rax
  std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v29; // rax
  unsigned int *v30; // rax
  unsigned int *v31; // rdx
  std::_Rb_tree_const_iterator<unsigned int>::_Base_ptr M_node; // r15
  std::_Rb_tree_const_iterator<unsigned int>::_Base_ptr v33; // r14
  __int64 result; // rax
  unsigned int val; // [rsp+20h] [rbp-150h] BYREF
  unsigned int post_quest_id; // [rsp+24h] [rbp-14Ch]
  std::set<unsigned int>::iterator __for_begin; // [rsp+28h] [rbp-148h] BYREF
  std::set<unsigned int>::iterator __for_end; // [rsp+30h] [rbp-140h] BYREF
  const data::QuestExcelConfig *quest_config_ptr; // [rsp+38h] [rbp-138h]
  const std::set<unsigned int> *quest_set_ptr; // [rsp+40h] [rbp-130h]
  const std::set<unsigned int> *__for_range; // [rsp+48h] [rbp-128h]
  std::shared_ptr<Config> v44; // [rsp+50h] [rbp-120h] BYREF
  common::milog::MiLogStream v45; // [rsp+60h] [rbp-110h] BYREF
  char v46[240]; // [rsp+80h] [rbp-F0h] BYREF

  v4 = (unsigned __int64)v46;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v5 = __asan_stack_malloc_2(192LL);
    if ( v5 )
      v4 = v5;
  }
  *(_QWORD *)v4 = 1102416563LL;
  *(_QWORD *)(v4 + 8) = "6 32 4 20 parent_quest_id:8248 48 4 16 quest_state:8261 64 4 13 quest_id:8228 80 4 10 state:8228"
                        " 96 16 21 parent_quest_ptr:8249 128 24 17 quest_id_vec:8274";
  *(_QWORD *)(v4 + 16) = PlayerQuestComp::setFinishParentQuestChildStateByMUIP;
  v6 = (_DWORD *)(v4 >> 3);
  v6[536862720] = -235802127;
  v6[536862721] = -234556924;
  v6[536862722] = -234556924;
  v6[536862723] = -219021312;
  v6[536862724] = -218103808;
  v6[536862725] = -202116109;
  *(_DWORD *)(v4 + 64) = quest_id;
  *(_DWORD *)(v4 + 80) = state;
  if ( *(_DWORD *)(v4 + 80) != 3 && *(_DWORD *)(v4 + 80) != 4 )
  {
    common::milog::MiLogStream::create(
      &v45,
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/player/quest/player_quest_comp.cpp",
      "setFinishParentQuestChildStateByMUIP",
      8233);
    v7 = common::milog::MiLogStream::operator<<<char [21],(char *[21])0>(&v45, (const char (*)[21])off_2516CE20);
    v8 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v7, (const unsigned int *)(v4 + 80));
    v9 = common::milog::MiLogStream::operator<<<char [7],(char *[7])0>(v8, (const char (*)[7])", uid:");
    if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
      __asan_report_load8(&this->player_);
LABEL_8:
    val = Player::getUid(this->player_);
    common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v9, &val);
    common::milog::MiLogStream::~MiLogStream(&v45);
    v10 = -1;
    goto LABEL_45;
  }
  if ( PlayerQuestComp::isRandomQuest(this, *(_DWORD *)(v4 + 64)) )
  {
    common::milog::MiLogStream::create(
      &v45,
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/player/quest/player_quest_comp.cpp",
      "setFinishParentQuestChildStateByMUIP",
      8239);
    v11 = common::milog::MiLogStream::operator<<<char [37],(char *[37])0>(&v45, (const char (*)[37])off_2516CE60);
    v12 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v11, (const unsigned int *)(v4 + 64));
    v9 = common::milog::MiLogStream::operator<<<char [7],(char *[7])0>(v12, (const char (*)[7])", uid:");
    if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
      __asan_report_load8(&this->player_);
    goto LABEL_8;
  }
  ServiceBox::findService<GameserverService>();
  GameserverService::getConfig((GameserverService *const)&v44);
  v13 = std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false> *const)&v44);
  quest_config_ptr = data::QuestExcelConfigMgrBase::findQuestExcelConfig(
                       &v13->design_config.txt_config_mgr.quest_config_mgr,
                       *(_DWORD *)(v4 + 64));
  std::shared_ptr<Config>::~shared_ptr(&v44);
  if ( quest_config_ptr )
  {
    if ( *(_BYTE *)(((unsigned __int64)&quest_config_ptr->main_id >> 3) + 0x7FFF8000) != 0
      && (char)((((_BYTE)quest_config_ptr + 12) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&quest_config_ptr->main_id >> 3)
                                                                      + 0x7FFF8000) )
    {
      __asan_report_load4(&quest_config_ptr->main_id);
    }
    *(_DWORD *)(v4 + 32) = quest_config_ptr->main_id;
    PlayerQuestComp::findParentQuest((const PlayerQuestComp *const)(v4 + 96), (__int64)this, *(_DWORD *)(v4 + 32));
    if ( std::operator==<ParentQuest>((const std::shared_ptr<ParentQuest> *)(v4 + 96), 0LL) )
    {
      common::milog::MiLogStream::create(
        &v45,
        &common::milog::MiLogDefault::default_log_obj_,
        1u,
        "./src/player/quest/player_quest_comp.cpp",
        "setFinishParentQuestChildStateByMUIP",
        8252);
      v17 = common::milog::MiLogStream::operator<<<char [44],(char *[44])0>(&v45, (const char (*)[44])byte_2516CEC0);
      v18 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v17, (const unsigned int *)(v4 + 32));
      v19 = common::milog::MiLogStream::operator<<<char [7],(char *[7])0>(v18, (const char (*)[7])", uid:");
      if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
        __asan_report_load8(&this->player_);
    }
    else
    {
      v20 = std::__shared_ptr_access<ParentQuest,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<ParentQuest,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 96));
      if ( ParentQuest::getParentQuestState(v20) == PARENT_QUEST_STATE_FINISHED )
      {
        *(_DWORD *)(v4 + 48) = PlayerQuestComp::getQuestState(this, *(_DWORD *)(v4 + 64));
        if ( *(_DWORD *)(v4 + 48) == 3 || *(_DWORD *)(v4 + 48) == 4 )
        {
          common::milog::MiLogStream::create(
            &v45,
            &common::milog::MiLogDefault::default_log_obj_,
            3u,
            "./src/player/quest/player_quest_comp.cpp",
            "setFinishParentQuestChildStateByMUIP",
            8265);
          v24 = common::milog::MiLogStream::operator<<<char [68],(char *[68])0>(
                  &v45,
                  (const char (*)[68])"Quest state is already finished or failed, do nothing, quest_state:");
          v25 = common::milog::MiLogStream::operator<<<data::QuestState,(data::QuestState*)0>(
                  v24,
                  (const data::QuestState *)(v4 + 48));
          v19 = common::milog::MiLogStream::operator<<<char [7],(char *[7])0>(v25, (const char (*)[7])", uid:");
          if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
            __asan_report_load8(&this->player_);
        }
        else
        {
          v26 = std::__shared_ptr_access<ParentQuest,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<ParentQuest,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 96));
          if ( !ParentQuest::setQuestStateByMUIP(v26, *(_DWORD *)(v4 + 64), *(data::QuestState *)(v4 + 80)) )
          {
            std::vector<unsigned int>::vector((std::vector<unsigned int> *const)(v4 + 128));
            ServiceBox::findService<GameserverService>();
            GameserverService::getConfig((GameserverService *const)&v44);
            v29 = std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false> *const)&v44);
            quest_set_ptr = QuestExcelConfigMgr::findPostQuestSet(
                              &v29->design_config.txt_config_mgr.quest_config_mgr,
                              *(_DWORD *)(v4 + 64));
            std::shared_ptr<Config>::~shared_ptr(&v44);
            if ( quest_set_ptr )
            {
              __for_range = quest_set_ptr;
              __for_begin._M_node = std::set<unsigned int>::begin(quest_set_ptr)._M_node;
              __for_end._M_node = std::set<unsigned int>::end(quest_set_ptr)._M_node;
              while ( std::operator!=(&__for_begin, &__for_end) )
              {
                v30 = (unsigned int *)std::_Rb_tree_const_iterator<unsigned int>::operator*(&__for_begin);
                v31 = v30;
                if ( *(_BYTE *)(((unsigned __int64)v30 >> 3) + 0x7FFF8000) != 0
                  && (char)(((unsigned __int8)v30 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)v30 >> 3) + 0x7FFF8000) )
                {
                  __asan_report_load4(v30);
                }
                post_quest_id = *v31;
                PlayerQuestComp::acceptQuest(this, post_quest_id, 0, is_notify);
                std::_Rb_tree_const_iterator<unsigned int>::operator++(&__for_begin);
              }
              M_node = std::set<unsigned int>::end(quest_set_ptr)._M_node;
              v33 = std::set<unsigned int>::begin(quest_set_ptr)._M_node;
              __for_begin._M_node = (std::_Rb_tree_const_iterator<unsigned int>::_Base_ptr)std::vector<unsigned int>::end((std::vector<unsigned int> *const)(v4 + 128))._M_current;
              __gnu_cxx::__normal_iterator<unsigned int const*,std::vector<unsigned int>>::__normal_iterator<unsigned int *>(
                (__gnu_cxx::__normal_iterator<unsigned int const*,std::vector<unsigned int> > *const)&__for_end,
                (const __gnu_cxx::__normal_iterator<unsigned int*,std::vector<unsigned int> > *)&__for_begin);
              std::vector<unsigned int>::insert<std::_Rb_tree_const_iterator<unsigned int>,void>(
                (std::vector<unsigned int> *const)(v4 + 128),
                (std::vector<unsigned int>::const_iterator)__for_end._M_node,
                (std::_Rb_tree_const_iterator<unsigned int>)v33,
                (std::_Rb_tree_const_iterator<unsigned int>)M_node);
            }
            PlayerQuestComp::updateServerCondMeetStatus(this, (const std::vector<unsigned int> *)(v4 + 128), is_notify);
            v10 = 0;
            std::vector<unsigned int>::~vector((std::vector<unsigned int> *const)(v4 + 128));
            goto LABEL_44;
          }
          common::milog::MiLogStream::create(
            &v45,
            &common::milog::MiLogDefault::default_log_obj_,
            3u,
            "./src/player/quest/player_quest_comp.cpp",
            "setFinishParentQuestChildStateByMUIP",
            8270);
          v27 = common::milog::MiLogStream::operator<<<char [45],(char *[45])0>(
                  &v45,
                  (const char (*)[45])"setQuestStateByMUIP failed, parent quest id:");
          v28 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                  v27,
                  (const unsigned int *)(v4 + 32));
          v19 = common::milog::MiLogStream::operator<<<char [7],(char *[7])0>(v28, (const char (*)[7])", uid:");
          if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
            __asan_report_load8(&this->player_);
        }
      }
      else
      {
        common::milog::MiLogStream::create(
          &v45,
          &common::milog::MiLogDefault::default_log_obj_,
          1u,
          "./src/player/quest/player_quest_comp.cpp",
          "setFinishParentQuestChildStateByMUIP",
          8258);
        v21 = common::milog::MiLogStream::operator<<<char [34],(char *[34])0>(&v45, (const char (*)[34])off_2516CF20);
        v22 = std::__shared_ptr_access<ParentQuest,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<ParentQuest,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 96));
        *(_DWORD *)(v4 + 48) = ParentQuest::getParentQuestState(v22);
        v23 = common::milog::MiLogStream::operator<<<data::ParentQuestState,(data::ParentQuestState*)0>(
                v21,
                (const data::ParentQuestState *)(v4 + 48));
        v19 = common::milog::MiLogStream::operator<<<char [7],(char *[7])0>(v23, (const char (*)[7])", uid:");
        if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
          __asan_report_load8(&this->player_);
      }
    }
    val = Player::getUid(this->player_);
    common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v19, &val);
    common::milog::MiLogStream::~MiLogStream(&v45);
    v10 = -1;
LABEL_44:
    std::shared_ptr<ParentQuest>::~shared_ptr((std::shared_ptr<ParentQuest> *const)(v4 + 96));
    goto LABEL_45;
  }
  common::milog::MiLogStream::create(
    &v45,
    &common::milog::MiLogDefault::default_log_obj_,
    3u,
    "./src/player/quest/player_quest_comp.cpp",
    "setFinishParentQuestChildStateByMUIP",
    8245);
  v14 = common::milog::MiLogStream::operator<<<char [34],(char *[34])0>(
          &v45,
          (const char (*)[34])"quest config not exist, quest_id:");
  v15 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v14, (const unsigned int *)(v4 + 64));
  v16 = common::milog::MiLogStream::operator<<<char [7],(char *[7])0>(v15, (const char (*)[7])", uid:");
  if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
    __asan_report_load8(&this->player_);
  val = Player::getUid(this->player_);
  common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v16, &val);
  common::milog::MiLogStream::~MiLogStream(&v45);
  v10 = -1;
LABEL_45:
  result = v10;
  if ( v46 == (char *)v4 )
  {
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8008) = 0LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8010) = 0LL;
  }
  else
  {
    *(_QWORD *)v4 = 1172321806LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 8289: range 0000000013E17234-0000000013E172B6
void __cdecl PlayerQuestComp::addQuestSceneRange(
        PlayerQuestComp *const this,
        uint32_t quest_id,
        uint32_t scene_id,
        uint32_t radius,
        std::string *p_dummy_point)
{
  std::string v7; // [rsp+20h] [rbp-30h] BYREF

  std::string::basic_string(&v7, p_dummy_point);
  SceneRangeHelper::addQuestSceneRange(&this->scene_range_helper_, quest_id, scene_id, radius, &v7);
  std::string::~string(&v7);
};

// Line 8294: range 0000000013E172B8-0000000013E172E1
void __cdecl PlayerQuestComp::clearQuestSceneRange(PlayerQuestComp *const this, uint32_t quest_id)
{
  SceneRangeHelper::clearQuestSceneRange(&this->scene_range_helper_, quest_id);
};

// Line 8299: range 0000000013E172E2-0000000013E17694
bool __fastcall PlayerQuestComp::isNotInSceneRange(
        PlayerQuestComp *const this,
        uint32_t scene_id,
        uint32_t radius,
        std::string *p_dummy_point)
{
  unsigned __int64 v4; // rbx
  __int64 v5; // rax
  _DWORD *v6; // r12
  std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v7; // rax
  common::milog::MiLogStream *v8; // rax
  bool result; // al
  common::milog::MiLogStream *v10; // rax
  const SceneScriptConfig *scene_script_config_ptr; // [rsp+20h] [rbp-C0h]
  const DummyPointScriptConfig *point_config_ptr; // [rsp+28h] [rbp-B8h]
  std::shared_ptr<Config> v15; // [rsp+30h] [rbp-B0h] BYREF
  common::milog::MiLogStream v16; // [rsp+40h] [rbp-A0h] BYREF
  char v17[128]; // [rsp+60h] [rbp-80h] BYREF

  v4 = (unsigned __int64)v17;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v5 = __asan_stack_malloc_1(96LL);
    if ( v5 )
      v4 = v5;
  }
  *(_QWORD *)v4 = 1102416563LL;
  *(_QWORD *)(v4 + 8) = "2 48 4 13 scene_id:8298 64 12 20 dummy_point_pos:8313";
  *(_QWORD *)(v4 + 16) = PlayerQuestComp::isNotInSceneRange;
  v6 = (_DWORD *)(v4 >> 3);
  v6[536862720] = -235802127;
  v6[536862721] = -234556943;
  v6[536862722] = -202177536;
  *(_DWORD *)(v4 + 48) = scene_id;
  ServiceBox::findService<GameserverService>();
  GameserverService::getConfig((GameserverService *const)&v15);
  v7 = std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false> *const)&v15);
  scene_script_config_ptr = LuaConfigMgr::findSceneScriptConfig(&v7->design_config.lua_config_mgr, *(_DWORD *)(v4 + 48));
  std::shared_ptr<Config>::~shared_ptr(&v15);
  if ( scene_script_config_ptr )
  {
    std::string::basic_string(&v16, p_dummy_point);
    point_config_ptr = SceneScriptConfig::findDummyPointScriptConfig(scene_script_config_ptr, (std::string *)&v16);
    std::string::~string(&v16);
    if ( point_config_ptr )
    {
      if ( ((unsigned __int8)point_config_ptr & 7) >= *(_BYTE *)(((unsigned __int64)point_config_ptr >> 3) + 0x7FFF8000)
        && *(_BYTE *)(((unsigned __int64)point_config_ptr >> 3) + 0x7FFF8000) != 0
        || *(_BYTE *)((((unsigned __int64)&point_config_ptr->pos.z + 3) >> 3) + 0x7FFF8000) != 0
        && (((unsigned __int8)point_config_ptr + 11) & 7) >= *(_BYTE *)((((unsigned __int64)&point_config_ptr->pos.z + 3) >> 3)
                                                                      + 0x7FFF8000) )
      {
        __asan_report_load_n(point_config_ptr, 12LL);
      }
      *(_QWORD *)(v4 + 64) = *(_QWORD *)&point_config_ptr->pos.x;
      *(float *)(v4 + 72) = point_config_ptr->pos.z;
      result = PlayerQuestComp::isNotInSceneRange(this, *(_DWORD *)(v4 + 48), radius, (const Vector3 *)(v4 + 64));
    }
    else
    {
      common::milog::MiLogStream::create(
        &v16,
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/player/quest/player_quest_comp.cpp",
        "isNotInSceneRange",
        8310);
      v10 = common::milog::MiLogStream::operator<<<char [35],(char *[35])0>(
              &v16,
              (const char (*)[35])"findDummyPointScriptConfig fails, ");
      common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v10, p_dummy_point);
      common::milog::MiLogStream::~MiLogStream(&v16);
      result = 0;
    }
  }
  else
  {
    common::milog::MiLogStream::create(
      &v16,
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/player/quest/player_quest_comp.cpp",
      "isNotInSceneRange",
      8304);
    v8 = common::milog::MiLogStream::operator<<<char [39],(char *[39])0>(
           &v16,
           (const char (*)[39])"SceneScriptConfig not find, scene_id: ");
    common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v8, (const unsigned int *)(v4 + 48));
    common::milog::MiLogStream::~MiLogStream(&v16);
    result = 0;
  }
  if ( v17 == (char *)v4 )
  {
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0LL;
    *(_DWORD *)((v4 >> 3) + 0x7FFF8008) = 0;
  }
  else
  {
    *(_QWORD *)v4 = 1172321806LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v4 >> 3) + 0x7FFF8008) = -168430091;
  }
  return result;
};

// Line 8318: range 0000000013E17696-0000000013E17A33
// local variable allocation has failed, the output may be wrong!
bool __cdecl PlayerQuestComp::isNotInSceneRange(
        PlayerQuestComp *const this,
        uint32_t scene_id,
        uint32_t radius,
        const Vector3 *dummy_point_pos)
{
  __m128i v4; // xmm1
  unsigned __int64 v5; // rbx
  __int64 v6; // rax
  _DWORD *v7; // r12
  PlayerSceneComp *SceneComp; // rax
  bool v9; // r14
  common::milog::MiLogStream *v10; // r14
  std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v11; // rax
  __int64 v12; // xmm0_8
  __int64 v13; // xmm0_8
  bool result; // al
  unsigned int val; // [rsp+2Ch] [rbp-C4h] BYREF
  float distance; // [rsp+30h] [rbp-C0h]
  Vector3 v19; // [rsp+34h] [rbp-BCh] BYREF
  common::milog::MiLogStream v20; // [rsp+40h] [rbp-B0h] BYREF
  char v21[144]; // [rsp+60h] [rbp-90h] BYREF

  v5 = (unsigned __int64)v21;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v6 = __asan_stack_malloc_1(96LL);
    if ( v6 )
      v5 = v6;
  }
  *(_QWORD *)v5 = 1102416563LL;
  *(_QWORD *)(v5 + 8) = "2 32 12 15 avatar_pos:8334 64 16 14 scene_ptr:8324";
  *(_QWORD *)(v5 + 16) = PlayerQuestComp::isNotInSceneRange;
  v7 = (_DWORD *)(v5 >> 3);
  v7[536862720] = -235802127;
  v7[536862721] = -219020288;
  v7[536862722] = -202178560;
  if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
    __asan_report_load8(&this->player_);
  SceneComp = Player::getSceneComp(this->player_);
  if ( PlayerSceneComp::isInTransfer(SceneComp) )
  {
    v9 = 0;
  }
  else
  {
    if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
      __asan_report_load8(&this->player_);
    Player::getSceneComp(this->player_);
    PlayerSceneComp::getCurScene((const PlayerSceneComp *const)(v5 + 64));
    if ( std::operator==<Scene>(0LL, (const std::shared_ptr<Scene> *)(v5 + 64)) )
    {
      common::milog::MiLogStream::create(
        &v20,
        &common::milog::MiLogDefault::default_log_obj_,
        1u,
        "./src/player/quest/player_quest_comp.cpp",
        "isNotInSceneRange",
        8327);
      v10 = common::milog::MiLogStream::operator<<<char [23],(char *[23])0>(
              &v20,
              (const char (*)[23])"getCurScene fail, uid:");
      if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
        __asan_report_load8(&this->player_);
      val = Player::getUid(this->player_);
      common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v10, &val);
      common::milog::MiLogStream::~MiLogStream(&v20);
      v9 = 0;
    }
    else
    {
      v11 = std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v5 + 64));
      if ( scene_id == Scene::getSceneId(v11) )
      {
        if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
          __asan_report_load8(&this->player_);
        *(Vector3 *)((char *)&v4 - 8) = Player::getPosition(this->player_);
        *(_QWORD *)(v5 + 32) = v12;
        *(_DWORD *)(v5 + 40) = v4.m128i_i32[0];
        *(Vector3 *)((char *)&v4 - 8) = operator-((const Vector3 *)(v5 + 32), dummy_point_pos);
        *(_QWORD *)&v19.x = v13;
        LODWORD(v19.z) = v4.m128i_i32[0];
        Vector3::getLength(&v19);
        distance = COERCE_FLOAT(_mm_cvtsi128_si32(v4));
        v9 = distance > (float)(int)radius;
      }
      else
      {
        v9 = 1;
      }
    }
    std::shared_ptr<Scene>::~shared_ptr((std::shared_ptr<Scene> *const)(v5 + 64));
  }
  result = v9;
  if ( v21 == (char *)v5 )
  {
    *(_QWORD *)((v5 >> 3) + 0x7FFF8000) = 0LL;
    *(_DWORD *)((v5 >> 3) + 0x7FFF8008) = 0;
  }
  else
  {
    *(_QWORD *)v5 = 1172321806LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v5 >> 3) + 0x7FFF8008) = -168430091;
  }
  return result;
};

// Line 8344: range 0000000013E17C1E-0000000013E181E7
__int64 __fastcall PlayerQuestComp::getWorldQuestSafeRollbackQuestId(
        const PlayerQuestComp *const this,
        uint32_t parent_quest_id)
{
  unsigned __int64 v2; // r13
  __int64 v3; // rax
  _DWORD *v4; // r12
  common::milog::MiLogStream *v5; // rax
  common::milog::MiLogStream *v6; // rax
  common::milog::MiLogStream *v7; // rbx
  uint32_t v8; // r14d
  __gnu_cxx::__normal_iterator<unsigned int const*,std::vector<unsigned int> >::reference v9; // rax
  _DWORD *v10; // rdx
  common::milog::MiLogStream *v11; // rax
  common::milog::MiLogStream *v12; // rax
  common::milog::MiLogStream *v13; // r14
  const data::QuestExcelConfig **M_current; // r14
  std::vector<const data::QuestExcelConfig*>::iterator v15; // rax
  PlayerQuestComp::getWorldQuestSafeRollbackQuestId::<lambda(const auto:32&, const auto:33&)> v16; // dl
  const data::QuestExcelConfig **v17; // r14
  std::vector<const data::QuestExcelConfig*>::iterator v18; // rax
  unsigned __int64 v19; // rax
  __int64 v20; // rax
  __int64 result; // rax
  unsigned int val; // [rsp+18h] [rbp-148h] BYREF
  uint32_t rollback_quest_id; // [rsp+1Ch] [rbp-144h]
  const data::MainQuestExcelConfig *parent_quest_config_ptr; // [rsp+20h] [rbp-140h]
  const std::vector<unsigned int> *__for_range; // [rsp+28h] [rbp-138h]
  common::milog::MiLogStream v26; // [rsp+30h] [rbp-130h] BYREF
  char v27[272]; // [rsp+50h] [rbp-110h] BYREF

  v2 = (unsigned __int64)v27;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_2(224LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "6 32 4 19 child_quest_id:8354 48 4 20 parent_quest_id:8343 64 8 48 quest_exist_and_start_and_is_"
                        "rewind_predict:8371 96 8 16 config_iter:8382 128 8 27 child_quest_config_ptr:8356 160 24 27 chil"
                        "d_quest_config_vec:8353";
  *(_QWORD *)(v2 + 16) = PlayerQuestComp::getWorldQuestSafeRollbackQuestId;
  v4 = (_DWORD *)(v2 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = -234556924;
  v4[536862722] = -218959360;
  v4[536862723] = -218959360;
  v4[536862724] = -218959360;
  v4[536862725] = -218103808;
  v4[536862726] = -202116109;
  *(_DWORD *)(v2 + 48) = parent_quest_id;
  rollback_quest_id = 0;
  parent_quest_config_ptr = PlayerQuestComp::findPlayerParentQuestExcelConfig(this, *(_DWORD *)(v2 + 48));
  if ( parent_quest_config_ptr )
  {
    std::vector<data::QuestExcelConfig const*>::vector((std::vector<const data::QuestExcelConfig*> *const)(v2 + 160));
    __for_range = &parent_quest_config_ptr->child_quest_list;
    *(std::vector<unsigned int>::const_iterator *)(v2 + 64) = std::vector<unsigned int>::begin(&parent_quest_config_ptr->child_quest_list);
    *(std::vector<unsigned int>::const_iterator *)(v2 + 96) = std::vector<unsigned int>::end(__for_range);
    while ( __gnu_cxx::operator!=<unsigned int const*,std::vector<unsigned int>>(
              (const __gnu_cxx::__normal_iterator<unsigned int const*,std::vector<unsigned int> > *)(v2 + 64),
              (const __gnu_cxx::__normal_iterator<unsigned int const*,std::vector<unsigned int> > *)(v2 + 96)) )
    {
      v9 = __gnu_cxx::__normal_iterator<unsigned int const*,std::vector<unsigned int>>::operator*((const __gnu_cxx::__normal_iterator<unsigned int const*,std::vector<unsigned int> > *const)(v2 + 64));
      v10 = v9;
      if ( *(_BYTE *)(((unsigned __int64)v9 >> 3) + 0x7FFF8000) != 0
        && (char)(((unsigned __int8)v9 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)v9 >> 3) + 0x7FFF8000) )
      {
        __asan_report_load4(v9);
      }
      *(_DWORD *)(v2 + 32) = *v10;
      *(_QWORD *)(v2 + 128) = PlayerQuestComp::findPlayerQuestExcelConfig(this, *(_DWORD *)(v2 + 32));
      if ( !*(_QWORD *)(v2 + 128) )
      {
        common::milog::MiLogStream::create(
          &v26,
          &common::milog::MiLogDefault::default_log_obj_,
          3u,
          "./src/player/quest/player_quest_comp.cpp",
          "getWorldQuestSafeRollbackQuestId",
          8359);
        v11 = common::milog::MiLogStream::operator<<<char [55],(char *[55])0>(
                &v26,
                (const char (*)[55])"[WQ_FLOW] findPlayerQuestExcelConfig failed, quest_id:");
        v12 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                v11,
                (const unsigned int *)(v2 + 32));
        v13 = common::milog::MiLogStream::operator<<<char [6],(char *[6])0>(v12, (const char (*)[6])" uid:");
        if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
          __asan_report_load8(&this->player_);
        val = Player::getUid(this->player_);
        common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v13, &val);
        common::milog::MiLogStream::~MiLogStream(&v26);
        v8 = 0;
        goto LABEL_24;
      }
      std::vector<data::QuestExcelConfig const*>::emplace_back<data::QuestExcelConfig const*&>(
        (std::vector<const data::QuestExcelConfig*> *const)(v2 + 160),
        (const data::QuestExcelConfig **)(v2 + 128),
        (const data::QuestExcelConfig **)(v2 + 128));
      __gnu_cxx::__normal_iterator<unsigned int const*,std::vector<unsigned int>>::operator++((__gnu_cxx::__normal_iterator<unsigned int const*,std::vector<unsigned int> > *const)(v2 + 64));
    }
    M_current = std::vector<data::QuestExcelConfig const*>::end((std::vector<const data::QuestExcelConfig*> *const)(v2 + 160))._M_current;
    v15._M_current = std::vector<data::QuestExcelConfig const*>::begin((std::vector<const data::QuestExcelConfig*> *const)(v2 + 160))._M_current;
    std::sort___gnu_cxx::__normal_iterator_const_data::QuestExcelConfig___std::vector_const_data::QuestExcelConfig_____PlayerQuestComp::getWorldQuestSafeRollbackQuestId_uint32_t__const::_lambda_const_auto_32__const_auto_33_____(
      v15,
      (__gnu_cxx::__normal_iterator<const data::QuestExcelConfig**,std::vector<const data::QuestExcelConfig*> >)M_current,
      v16);
    *(_QWORD *)(v2 + 64) = this;
    v17 = std::vector<data::QuestExcelConfig const*>::end((std::vector<const data::QuestExcelConfig*> *const)(v2 + 160))._M_current;
    v18._M_current = std::vector<data::QuestExcelConfig const*>::begin((std::vector<const data::QuestExcelConfig*> *const)(v2 + 160))._M_current;
    *(__gnu_cxx::__normal_iterator<const data::QuestExcelConfig**,std::vector<const data::QuestExcelConfig*> > *)(v2 + 96) = std::find_if<__gnu_cxx::__normal_iterator<data::QuestExcelConfig const**,std::vector<data::QuestExcelConfig const*>>,PlayerQuestComp::getWorldQuestSafeRollbackQuestId(unsigned int)::{lambda(data::QuestExcelConfig const*)#2}>(v18, (__gnu_cxx::__normal_iterator<const data::QuestExcelConfig**,std::vector<const data::QuestExcelConfig*> >)v17, *(PlayerQuestComp::getWorldQuestSafeRollbackQuestId::<lambda(const data::QuestExcelConfig*)> *)(v2 + 64));
    *(std::vector<const data::QuestExcelConfig*>::iterator *)(v2 + 128) = std::vector<data::QuestExcelConfig const*>::end((std::vector<const data::QuestExcelConfig*> *const)(v2 + 160));
    if ( __gnu_cxx::operator!=<data::QuestExcelConfig const**,std::vector<data::QuestExcelConfig const*>>(
           (const __gnu_cxx::__normal_iterator<const data::QuestExcelConfig**,std::vector<const data::QuestExcelConfig*> > *)(v2 + 96),
           (const __gnu_cxx::__normal_iterator<const data::QuestExcelConfig**,std::vector<const data::QuestExcelConfig*> > *)(v2 + 128)) )
    {
      v19 = (unsigned __int64)__gnu_cxx::__normal_iterator<data::QuestExcelConfig const**,std::vector<data::QuestExcelConfig const*>>::operator*((const __gnu_cxx::__normal_iterator<const data::QuestExcelConfig**,std::vector<const data::QuestExcelConfig*> > *const)(v2 + 96));
      if ( *(_BYTE *)((v19 >> 3) + 0x7FFF8000) )
        v19 = __asan_report_load8(v19);
      v20 = *(_QWORD *)v19;
      if ( *(_BYTE *)(((unsigned __int64)(v20 + 8) >> 3) + 0x7FFF8000) != 0
        && *(_BYTE *)(((unsigned __int64)(v20 + 8) >> 3) + 0x7FFF8000) <= 3 )
      {
        v20 = __asan_report_load4(v20 + 8);
      }
      rollback_quest_id = *(_DWORD *)(v20 + 8);
    }
    v8 = rollback_quest_id;
LABEL_24:
    std::vector<data::QuestExcelConfig const*>::~vector((std::vector<const data::QuestExcelConfig*> *const)(v2 + 160));
  }
  else
  {
    common::milog::MiLogStream::create(
      &v26,
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/player/quest/player_quest_comp.cpp",
      "getWorldQuestSafeRollbackQuestId",
      8350);
    v5 = common::milog::MiLogStream::operator<<<char [68],(char *[68])0>(
           &v26,
           (const char (*)[68])"[WQ_FLOW] findPlayerParentQuestExcelConfig failed, parent_quest_id:");
    v6 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v5, (const unsigned int *)(v2 + 48));
    v7 = common::milog::MiLogStream::operator<<<char [6],(char *[6])0>(v6, (const char (*)[6])" uid:");
    if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
      __asan_report_load8(&this->player_);
    val = Player::getUid(this->player_);
    common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v7, &val);
    common::milog::MiLogStream::~MiLogStream(&v26);
    v8 = 0;
  }
  result = v8;
  if ( v27 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8010) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8018) = 0;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8018) = -168430091;
  }
  return result;
};

// Line 8367: range 0000000013EA1650-0000000013EA1724
bool __cdecl PlayerQuestComp::getWorldQuestSafeRollbackQuestId::_lambda_const_auto_32___const_auto_33___::operator()_const_data::QuestExcelConfig__const_data::QuestExcelConfig__(
        const PlayerQuestComp::getWorldQuestSafeRollbackQuestId::<lambda(const auto:32&, const auto:33&)> *const __closure,
        const data::QuestExcelConfig *const *a,
        const data::QuestExcelConfig *const *b)
{
  const data::QuestExcelConfig *v3; // rax
  char v4; // dl
  int32_t order; // esi
  const data::QuestExcelConfig *v6; // rax
  char v7; // dl

  if ( *(_BYTE *)(((unsigned __int64)a >> 3) + 0x7FFF8000) )
    __asan_report_load8(a);
  v3 = *a;
  v4 = *(_BYTE *)(((unsigned __int64)&(*a)->order >> 3) + 0x7FFF8000);
  if ( v4 != 0 && v4 <= 3 )
    v3 = (const data::QuestExcelConfig *)__asan_report_load4(&(*a)->order);
  order = v3->order;
  if ( *(_BYTE *)(((unsigned __int64)b >> 3) + 0x7FFF8000) )
    __asan_report_load8(b);
  v6 = *b;
  v7 = *(_BYTE *)(((unsigned __int64)&(*b)->order >> 3) + 0x7FFF8000);
  if ( v7 != 0 && v7 <= 3 )
    v6 = (const data::QuestExcelConfig *)__asan_report_load4(&(*b)->order);
  return order > v6->order;
};

// Line 8371: range 0000000013E17A34-0000000013E17C1C
bool __cdecl PlayerQuestComp::getWorldQuestSafeRollbackQuestId(unsigned int)const::{lambda(data::QuestExcelConfig const*)#2}::operator()(
        const PlayerQuestComp::getWorldQuestSafeRollbackQuestId::<lambda(const data::QuestExcelConfig*)> *const __closure,
        const data::QuestExcelConfig *config_ptr)
{
  const PlayerQuestComp *this; // rdx
  const PlayerQuestComp *v4; // rdx
  bool is_started; // [rsp+1Bh] [rbp-35h]
  common::milog::MiLogStream v6; // [rsp+20h] [rbp-30h] BYREF

  if ( config_ptr )
  {
    if ( *(_BYTE *)(((unsigned __int64)__closure >> 3) + 0x7FFF8000) )
      __asan_report_load8(__closure);
    this = __closure->__this;
    if ( *(_BYTE *)(((unsigned __int64)&config_ptr->sub_id >> 3) + 0x7FFF8000) != 0
      && *(_BYTE *)(((unsigned __int64)&config_ptr->sub_id >> 3) + 0x7FFF8000) <= 3 )
    {
      __asan_report_load4(&config_ptr->sub_id);
    }
    is_started = (unsigned int)PlayerQuestComp::getQuestState(this, config_ptr->sub_id) >= QUEST_STATE_UNFINISHED;
    if ( *(_BYTE *)(((unsigned __int64)__closure >> 3) + 0x7FFF8000) )
      __asan_report_load8(__closure);
    v4 = __closure->__this;
    if ( *(_BYTE *)(((unsigned __int64)&config_ptr->sub_id >> 3) + 0x7FFF8000) != 0
      && *(_BYTE *)(((unsigned __int64)&config_ptr->sub_id >> 3) + 0x7FFF8000) <= 3 )
    {
      __asan_report_load4(&config_ptr->sub_id);
    }
    if ( !PlayerQuestComp::isQuestExist(v4, config_ptr->sub_id) )
      return 0;
    if ( *(_BYTE *)(((unsigned __int64)&config_ptr->is_rewind >> 3) + 0x7FFF8000) != 0
      && (((unsigned __int8)config_ptr - 66) & 7) >= *(_BYTE *)(((unsigned __int64)&config_ptr->is_rewind >> 3)
                                                              + 0x7FFF8000) )
    {
      __asan_report_load1(&config_ptr->is_rewind);
    }
    return config_ptr->is_rewind && is_started;
  }
  else
  {
    common::milog::MiLogStream::create(
      &v6,
      &common::milog::MiLogDefault::default_log_obj_,
      4u,
      "./src/player/quest/player_quest_comp.cpp",
      "operator()",
      8375);
    common::milog::MiLogStream::operator<<<char [35],(char *[35])0>(
      &v6,
      (const char (*)[35])"[WQ_FLOW] quest_config_ptr is null");
    common::milog::MiLogStream::~MiLogStream(&v6);
    return 0;
  }
};

// Line 8392: range 0000000013E181E8-0000000013E18A8B
__int64 __fastcall PlayerQuestComp::getWorldQuestFlowGroupInitSuiteIndex(
        const PlayerQuestComp *const this,
        uint32_t group_id)
{
  unsigned __int64 v2; // r12
  __int64 v3; // rax
  _DWORD *v4; // r13
  std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v5; // rax
  common::milog::MiLogStream *v6; // rax
  uint32_t secure_suite_index; // r14d
  common::milog::MiLogStream *v8; // rax
  common::milog::MiLogStream *v9; // rax
  common::milog::MiLogStream *v10; // rax
  common::milog::MiLogStream *v11; // rax
  common::milog::MiLogStream *v12; // rax
  common::milog::MiLogStream *v13; // rax
  common::milog::MiLogStream *v14; // rax
  common::milog::MiLogStream *v15; // rax
  common::milog::MiLogStream *v16; // rax
  common::milog::MiLogStream *v17; // rax
  common::milog::MiLogStream *v18; // rbx
  common::milog::MiLogStream *v19; // rax
  common::milog::MiLogStream *v20; // rax
  common::milog::MiLogStream *v21; // rax
  common::milog::MiLogStream *v22; // rax
  common::milog::MiLogStream *v23; // r14
  std::__shared_ptr_access<ParentQuest,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v24; // rax
  common::milog::MiLogStream *v25; // rax
  common::milog::MiLogStream *v26; // rax
  common::milog::MiLogStream *v27; // rax
  common::milog::MiLogStream *v28; // rax
  common::milog::MiLogStream *v29; // r14
  __int64 result; // rax
  int val; // [rsp+1Ch] [rbp-D4h] BYREF
  unsigned int Uid; // [rsp+20h] [rbp-D0h] BYREF
  uint32_t safe_rollback_quest_id; // [rsp+24h] [rbp-CCh]
  const GroupScriptConfig *group_script_config_ptr; // [rsp+28h] [rbp-C8h]
  const data::MainQuestExcelConfig *parent_quest_config_ptr; // [rsp+30h] [rbp-C0h]
  const QuestExcelConfigMgr *quest_config_mgr; // [rsp+38h] [rbp-B8h]
  common::milog::MiLogStream v37; // [rsp+40h] [rbp-B0h] BYREF
  char v38[144]; // [rsp+60h] [rbp-90h] BYREF

  v2 = (unsigned __int64)v38;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_1(96LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "3 32 4 20 parent_quest_id:8399 48 4 13 group_id:8391 64 16 21 parent_quest_ptr:8418";
  *(_QWORD *)(v2 + 16) = PlayerQuestComp::getWorldQuestFlowGroupInitSuiteIndex;
  v4 = (_DWORD *)(v2 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = -234556924;
  v4[536862722] = -202178560;
  *(_DWORD *)(v2 + 48) = group_id;
  ServiceBox::findService<GameserverService>();
  GameserverService::getConfig((GameserverService *const)(v2 + 64));
  v5 = std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 64));
  group_script_config_ptr = LuaConfigMgr::findGroupScriptConfig(&v5->design_config.lua_config_mgr, *(_DWORD *)(v2 + 48));
  std::shared_ptr<Config>::~shared_ptr((std::shared_ptr<Config> *const)(v2 + 64));
  if ( group_script_config_ptr )
  {
    if ( *(_BYTE *)(((unsigned __int64)&group_script_config_ptr->father_quest_id >> 3) + 0x7FFF8000) != 0
      && *(_BYTE *)(((unsigned __int64)&group_script_config_ptr->father_quest_id >> 3) + 0x7FFF8000) <= 3 )
    {
      __asan_report_load4(&group_script_config_ptr->father_quest_id);
    }
    *(_DWORD *)(v2 + 32) = group_script_config_ptr->father_quest_id;
    parent_quest_config_ptr = PlayerQuestComp::findPlayerParentQuestExcelConfig(this, *(_DWORD *)(v2 + 32));
    if ( parent_quest_config_ptr )
    {
      if ( !common::tools::MiscUtils::isContains<std::map<unsigned int,unsigned int> const,unsigned int>(
              &parent_quest_config_ptr->flow_min_rewind_order_map,
              (const unsigned int *)(v2 + 48)) )
      {
        common::milog::MiLogStream::create(
          &v37,
          &common::milog::MiLogDefault::default_log_obj_,
          4u,
          "./src/player/quest/player_quest_comp.cpp",
          "getWorldQuestFlowGroupInitSuiteIndex",
          8408);
        v11 = common::milog::MiLogStream::operator<<<char [56],(char *[56])0>(
                &v37,
                (const char (*)[56])"[WQ_FLOW] parent quest not bind group, parent_quest_id:");
        v12 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                v11,
                (const unsigned int *)(v2 + 32));
        v13 = common::milog::MiLogStream::operator<<<char [13],(char *[13])0>(v12, (const char (*)[13])", group_id: ");
        common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v13, (const unsigned int *)(v2 + 48));
        common::milog::MiLogStream::~MiLogStream(&v37);
        secure_suite_index = 0;
      }
      else if ( !PlayerQuestComp::isGroupLinkedByWorldQuest(this, *(_DWORD *)(v2 + 32), *(_DWORD *)(v2 + 48)) )
      {
        common::milog::MiLogStream::create(
          &v37,
          &common::milog::MiLogDefault::default_log_obj_,
          1u,
          "./src/player/quest/player_quest_comp.cpp",
          "getWorldQuestFlowGroupInitSuiteIndex",
          8414);
        v14 = common::milog::MiLogStream::operator<<<char [68],(char *[68])0>(
                &v37,
                (const char (*)[68])"[WQ_FLOW] getWorldQuestFlowGroupInitSuiteIndex not linked group_id:");
        v15 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                v14,
                (const unsigned int *)(v2 + 48));
        v16 = common::milog::MiLogStream::operator<<<char [15],(char *[15])0>(v15, (const char (*)[15])", suite_index:");
        val = 0;
        v17 = common::milog::MiLogStream::operator<<<int,(int *)0>(v16, &val);
        v18 = common::milog::MiLogStream::operator<<<char [7],(char *[7])0>(v17, (const char (*)[7])", uid:");
        if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
          __asan_report_load8(&this->player_);
        Uid = Player::getUid(this->player_);
        common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v18, &Uid);
        common::milog::MiLogStream::~MiLogStream(&v37);
        secure_suite_index = 0;
      }
      else
      {
        ServiceBox::findService<GameserverService>();
        GameserverService::getConfig((GameserverService *const)(v2 + 64));
        quest_config_mgr = &std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 64))->design_config.txt_config_mgr.quest_config_mgr;
        std::shared_ptr<Config>::~shared_ptr((std::shared_ptr<Config> *const)(v2 + 64));
        PlayerQuestComp::findParentQuest((const PlayerQuestComp *const)(v2 + 64), (__int64)this, *(_DWORD *)(v2 + 32));
        if ( std::operator==<ParentQuest>(0LL, (const std::shared_ptr<ParentQuest> *)(v2 + 64)) )
        {
          common::milog::MiLogStream::create(
            &v37,
            &common::milog::MiLogDefault::default_log_obj_,
            1u,
            "./src/player/quest/player_quest_comp.cpp",
            "getWorldQuestFlowGroupInitSuiteIndex",
            8422);
          v19 = common::milog::MiLogStream::operator<<<char [75],(char *[75])0>(
                  &v37,
                  (const char (*)[75])"[WQ_FLOW] getWorldQuestFlowGroupInitSuiteIndex parent_quest null group_id:");
          v20 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                  v19,
                  (const unsigned int *)(v2 + 48));
          v21 = common::milog::MiLogStream::operator<<<char [15],(char *[15])0>(
                  v20,
                  (const char (*)[15])", suite_index:");
          v22 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                  v21,
                  &group_script_config_ptr->secure_suite_index);
          v23 = common::milog::MiLogStream::operator<<<char [7],(char *[7])0>(v22, (const char (*)[7])", uid:");
          if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
            __asan_report_load8(&this->player_);
          Uid = Player::getUid(this->player_);
          common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v23, &Uid);
          common::milog::MiLogStream::~MiLogStream(&v37);
          if ( *(_BYTE *)(((unsigned __int64)&group_script_config_ptr->secure_suite_index >> 3) + 0x7FFF8000) != 0
            && *(_BYTE *)(((unsigned __int64)&group_script_config_ptr->secure_suite_index >> 3) + 0x7FFF8000) <= 3 )
          {
            __asan_report_load4(&group_script_config_ptr->secure_suite_index);
          }
          secure_suite_index = group_script_config_ptr->secure_suite_index;
        }
        else
        {
          v24 = std::__shared_ptr_access<ParentQuest,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<ParentQuest,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 64));
          if ( ParentQuest::getParentQuestState(v24) )
          {
            common::milog::MiLogStream::create(
              &v37,
              &common::milog::MiLogDefault::default_log_obj_,
              1u,
              "./src/player/quest/player_quest_comp.cpp",
              "getWorldQuestFlowGroupInitSuiteIndex",
              8428);
            v25 = common::milog::MiLogStream::operator<<<char [79],(char *[79])0>(
                    &v37,
                    (const char (*)[79])"[WQ_FLOW] getWorldQuestFlowGroupInitSuiteIndex parent_quest finished group_id:");
            v26 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                    v25,
                    (const unsigned int *)(v2 + 48));
            v27 = common::milog::MiLogStream::operator<<<char [15],(char *[15])0>(
                    v26,
                    (const char (*)[15])", suite_index:");
            val = 0;
            v28 = common::milog::MiLogStream::operator<<<int,(int *)0>(v27, &val);
            v29 = common::milog::MiLogStream::operator<<<char [7],(char *[7])0>(v28, (const char (*)[7])", uid:");
            if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
              __asan_report_load8(&this->player_);
            Uid = Player::getUid(this->player_);
            common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v29, &Uid);
            common::milog::MiLogStream::~MiLogStream(&v37);
            secure_suite_index = 0;
          }
          else
          {
            safe_rollback_quest_id = PlayerQuestComp::getWorldQuestSafeRollbackQuestId(this, *(_DWORD *)(v2 + 32));
            secure_suite_index = PlayerQuestComp::getWorldQuestFlowGroupSuiteIndexByRollbackQuest(
                                   this,
                                   *(_DWORD *)(v2 + 48),
                                   safe_rollback_quest_id);
          }
        }
        std::shared_ptr<ParentQuest>::~shared_ptr((std::shared_ptr<ParentQuest> *const)(v2 + 64));
      }
    }
    else
    {
      common::milog::MiLogStream::create(
        &v37,
        &common::milog::MiLogDefault::default_log_obj_,
        4u,
        "./src/player/quest/player_quest_comp.cpp",
        "getWorldQuestFlowGroupInitSuiteIndex",
        8403);
      v8 = common::milog::MiLogStream::operator<<<char [67],(char *[67])0>(
             &v37,
             (const char (*)[67])"[WQ_FLOW] findPlayerParentQuestExcelConfig fails, parent_quest_id:");
      v9 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v8, (const unsigned int *)(v2 + 32));
      v10 = common::milog::MiLogStream::operator<<<char [13],(char *[13])0>(v9, (const char (*)[13])", group_id: ");
      common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v10, (const unsigned int *)(v2 + 48));
      common::milog::MiLogStream::~MiLogStream(&v37);
      secure_suite_index = 0;
    }
  }
  else
  {
    common::milog::MiLogStream::create(
      &v37,
      &common::milog::MiLogDefault::default_log_obj_,
      4u,
      "./src/player/quest/player_quest_comp.cpp",
      "getWorldQuestFlowGroupInitSuiteIndex",
      8396);
    v6 = common::milog::MiLogStream::operator<<<char [50],(char *[50])0>(
           &v37,
           (const char (*)[50])"[WQ_FLOW] findGroupScriptConfig fails, group_id: ");
    common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v6, (const unsigned int *)(v2 + 48));
    common::milog::MiLogStream::~MiLogStream(&v37);
    secure_suite_index = 0;
  }
  result = secure_suite_index;
  if ( v38 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8008) = 0;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8008) = -168430091;
  }
  return result;
};

// Line 8437: range 0000000013E18A8C-0000000013E19838
__int64 __fastcall PlayerQuestComp::getWorldQuestFlowGroupSuiteIndexByRollbackQuest(
        const PlayerQuestComp *const this,
        uint32_t group_id,
        uint32_t rollback_quest_id)
{
  unsigned __int64 v3; // r12
  __int64 v4; // rax
  _DWORD *v5; // r13
  std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v6; // rax
  common::milog::MiLogStream *v7; // rax
  __int64 result; // rax
  common::milog::MiLogStream *v9; // rax
  common::milog::MiLogStream *v10; // rax
  common::milog::MiLogStream *v11; // rax
  common::milog::MiLogStream *v12; // rax
  common::milog::MiLogStream *v13; // rax
  common::milog::MiLogStream *v14; // rax
  std::_Rb_tree_const_iterator<std::pair<unsigned int const,unsigned int> >::pointer v15; // rdx
  unsigned int *p_second; // rax
  common::milog::MiLogStream *v17; // rax
  common::milog::MiLogStream *v18; // rax
  common::milog::MiLogStream *v19; // rax
  common::milog::MiLogStream *v20; // rax
  common::milog::MiLogStream *v21; // rbx
  common::milog::MiLogStream *v22; // rax
  common::milog::MiLogStream *v23; // rax
  common::milog::MiLogStream *v24; // rax
  common::milog::MiLogStream *v25; // rax
  common::milog::MiLogStream *v26; // rbx
  common::milog::MiLogStream *v27; // rax
  common::milog::MiLogStream *v28; // rax
  common::milog::MiLogStream *v29; // rax
  common::milog::MiLogStream *v30; // rax
  common::milog::MiLogStream *v31; // rax
  common::milog::MiLogStream *v32; // rax
  common::milog::MiLogStream *v33; // rbx
  common::milog::MiLogStream *v34; // rax
  common::milog::MiLogStream *v35; // rax
  common::milog::MiLogStream *v36; // rbx
  common::milog::MiLogStream *v37; // rax
  common::milog::MiLogStream *v38; // rax
  common::milog::MiLogStream *v39; // rax
  common::milog::MiLogStream *v40; // rax
  common::milog::MiLogStream *v41; // rax
  common::milog::MiLogStream *v42; // rax
  common::milog::MiLogStream *v43; // rbx
  common::milog::MiLogStream *v44; // rax
  common::milog::MiLogStream *v45; // rax
  common::milog::MiLogStream *v46; // rax
  common::milog::MiLogStream *v47; // rax
  int val; // [rsp+1Ch] [rbp-114h] BYREF
  unsigned int Uid; // [rsp+20h] [rbp-110h] BYREF
  uint32_t min_rewind_order; // [rsp+24h] [rbp-10Ch]
  const GroupScriptConfig *group_script_config_ptr; // [rsp+28h] [rbp-108h]
  const data::MainQuestExcelConfig *parent_quest_config_ptr; // [rsp+30h] [rbp-100h]
  const QuestExcelConfigMgr *quest_config_mgr; // [rsp+38h] [rbp-F8h]
  std::tuple_element<0,std::pair<int,unsigned int> >::type *retcode; // [rsp+40h] [rbp-F0h]
  std::tuple_element<1,std::pair<int,unsigned int> >::type *suite_index; // [rsp+48h] [rbp-E8h]
  const data::QuestExcelConfig *rollback_quest_config_ptr; // [rsp+50h] [rbp-E0h]
  std::pair<int,unsigned int> __in; // [rsp+58h] [rbp-D8h] BYREF
  std::shared_ptr<Config> v59; // [rsp+60h] [rbp-D0h] BYREF
  common::milog::MiLogStream v60; // [rsp+70h] [rbp-C0h] BYREF
  char v61[160]; // [rsp+90h] [rbp-A0h] BYREF

  v3 = (unsigned __int64)v61;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_1(128LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "4 48 4 20 parent_quest_id:8444 64 4 13 group_id:8436 80 4 22 rollback_quest_id:8436 96 8 9 iter:8451";
  *(_QWORD *)(v3 + 16) = PlayerQuestComp::getWorldQuestFlowGroupSuiteIndexByRollbackQuest;
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = -234556943;
  v5[536862722] = -234556924;
  v5[536862723] = -202116352;
  *(_DWORD *)(v3 + 64) = group_id;
  *(_DWORD *)(v3 + 80) = rollback_quest_id;
  ServiceBox::findService<GameserverService>();
  GameserverService::getConfig((GameserverService *const)&v59);
  v6 = std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false> *const)&v59);
  group_script_config_ptr = LuaConfigMgr::findGroupScriptConfig(&v6->design_config.lua_config_mgr, *(_DWORD *)(v3 + 64));
  std::shared_ptr<Config>::~shared_ptr(&v59);
  if ( !group_script_config_ptr )
  {
    common::milog::MiLogStream::create(
      &v60,
      &common::milog::MiLogDefault::default_log_obj_,
      4u,
      "./src/player/quest/player_quest_comp.cpp",
      "getWorldQuestFlowGroupSuiteIndexByRollbackQuest",
      8441);
    v7 = common::milog::MiLogStream::operator<<<char [50],(char *[50])0>(
           &v60,
           (const char (*)[50])"[WQ_FLOW] findGroupScriptConfig fails, group_id: ");
    common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v7, (const unsigned int *)(v3 + 64));
    common::milog::MiLogStream::~MiLogStream(&v60);
    result = 0LL;
    goto LABEL_47;
  }
  if ( *(_BYTE *)(((unsigned __int64)&group_script_config_ptr->father_quest_id >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&group_script_config_ptr->father_quest_id >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4(&group_script_config_ptr->father_quest_id);
  }
  *(_DWORD *)(v3 + 48) = group_script_config_ptr->father_quest_id;
  parent_quest_config_ptr = PlayerQuestComp::findPlayerParentQuestExcelConfig(this, *(_DWORD *)(v3 + 48));
  if ( !parent_quest_config_ptr )
  {
    common::milog::MiLogStream::create(
      &v60,
      &common::milog::MiLogDefault::default_log_obj_,
      4u,
      "./src/player/quest/player_quest_comp.cpp",
      "getWorldQuestFlowGroupSuiteIndexByRollbackQuest",
      8448);
    v9 = common::milog::MiLogStream::operator<<<char [67],(char *[67])0>(
           &v60,
           (const char (*)[67])"[WQ_FLOW] findPlayerParentQuestExcelConfig fails, parent_quest_id:");
    v10 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v9, (const unsigned int *)(v3 + 48));
    v11 = common::milog::MiLogStream::operator<<<char [13],(char *[13])0>(v10, (const char (*)[13])", group_id: ");
    common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v11, (const unsigned int *)(v3 + 64));
    common::milog::MiLogStream::~MiLogStream(&v60);
    result = 0LL;
    goto LABEL_47;
  }
  *(std::map<unsigned int,unsigned int>::const_iterator *)(v3 + 96) = std::map<unsigned int,unsigned int>::find(
                                                                        &parent_quest_config_ptr->flow_min_rewind_order_map,
                                                                        (const std::map<unsigned int,unsigned int>::key_type *)(v3 + 64));
  __in = (std::pair<int,unsigned int>)std::map<unsigned int,unsigned int>::end(&parent_quest_config_ptr->flow_min_rewind_order_map)._M_node;
  if ( std::operator==(
         (const std::_Rb_tree_const_iterator<std::pair<unsigned int const,unsigned int> >::_Self *)(v3 + 96),
         (const std::_Rb_tree_const_iterator<std::pair<unsigned int const,unsigned int> >::_Self *)&__in) )
  {
    common::milog::MiLogStream::create(
      &v60,
      &common::milog::MiLogDefault::default_log_obj_,
      4u,
      "./src/player/quest/player_quest_comp.cpp",
      "getWorldQuestFlowGroupSuiteIndexByRollbackQuest",
      8454);
    v12 = common::milog::MiLogStream::operator<<<char [56],(char *[56])0>(
            &v60,
            (const char (*)[56])"[WQ_FLOW] parent quest not bind group, parent_quest_id:");
    v13 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v12, (const unsigned int *)(v3 + 48));
    v14 = common::milog::MiLogStream::operator<<<char [13],(char *[13])0>(v13, (const char (*)[13])", group_id: ");
    common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v14, (const unsigned int *)(v3 + 64));
    common::milog::MiLogStream::~MiLogStream(&v60);
    result = 0LL;
    goto LABEL_47;
  }
  v15 = std::_Rb_tree_const_iterator<std::pair<unsigned int const,unsigned int>>::operator->((const std::_Rb_tree_const_iterator<std::pair<unsigned int const,unsigned int> > *const)(v3 + 96));
  p_second = &v15->second;
  if ( *(_BYTE *)(((unsigned __int64)p_second >> 3) + 0x7FFF8000) != 0
    && (char)(((unsigned __int8)p_second & 7) + 3) >= *(_BYTE *)(((unsigned __int64)p_second >> 3) + 0x7FFF8000) )
  {
    __asan_report_load4(p_second);
  }
  min_rewind_order = v15->second;
  if ( !PlayerQuestComp::isGroupLinkedByWorldQuest(this, *(_DWORD *)(v3 + 48), *(_DWORD *)(v3 + 64)) )
  {
    common::milog::MiLogStream::create(
      &v60,
      &common::milog::MiLogDefault::default_log_obj_,
      1u,
      "./src/player/quest/player_quest_comp.cpp",
      "getWorldQuestFlowGroupSuiteIndexByRollbackQuest",
      8461);
    v17 = common::milog::MiLogStream::operator<<<char [79],(char *[79])0>(
            &v60,
            (const char (*)[79])"[WQ_FLOW] getWorldQuestFlowGroupSuiteIndexByRollbackQuest not linked group_id:");
    v18 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v17, (const unsigned int *)(v3 + 64));
    v19 = common::milog::MiLogStream::operator<<<char [15],(char *[15])0>(v18, (const char (*)[15])", suite_index:");
    val = 0;
    v20 = common::milog::MiLogStream::operator<<<int,(int *)0>(v19, &val);
    v21 = common::milog::MiLogStream::operator<<<char [7],(char *[7])0>(v20, (const char (*)[7])", uid:");
    if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
      __asan_report_load8(&this->player_);
LABEL_46:
    Uid = Player::getUid(this->player_);
    common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v21, &Uid);
    common::milog::MiLogStream::~MiLogStream(&v60);
    result = 0LL;
    goto LABEL_47;
  }
  ServiceBox::findService<GameserverService>();
  GameserverService::getConfig((GameserverService *const)&v59);
  quest_config_mgr = &std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false> *const)&v59)->design_config.txt_config_mgr.quest_config_mgr;
  std::shared_ptr<Config>::~shared_ptr(&v59);
  if ( *(_DWORD *)(v3 + 80) )
  {
    __in = QuestExcelConfigMgr::getQuestBindFlowGroupSuiteIndex(
             quest_config_mgr,
             *(_DWORD *)(v3 + 80),
             *(_DWORD *)(v3 + 64));
    retcode = std::get<0ul,int,unsigned int>(&__in);
    suite_index = std::get<1ul,int,unsigned int>(&__in);
    if ( *(_BYTE *)(((unsigned __int64)retcode >> 3) + 0x7FFF8000) != 0
      && (char)(((unsigned __int8)retcode & 7) + 3) >= *(_BYTE *)(((unsigned __int64)retcode >> 3) + 0x7FFF8000) )
    {
      __asan_report_load4(retcode);
    }
    if ( *retcode )
    {
      rollback_quest_config_ptr = PlayerQuestComp::findPlayerQuestExcelConfig(this, *(_DWORD *)(v3 + 80));
      if ( rollback_quest_config_ptr )
      {
        if ( *(_BYTE *)(((unsigned __int64)&rollback_quest_config_ptr->order >> 3) + 0x7FFF8000) != 0
          && *(_BYTE *)(((unsigned __int64)&rollback_quest_config_ptr->order >> 3) + 0x7FFF8000) <= 3 )
        {
          __asan_report_load4(&rollback_quest_config_ptr->order);
        }
        if ( min_rewind_order <= rollback_quest_config_ptr->order )
        {
          common::milog::MiLogStream::create(
            &v60,
            &common::milog::MiLogDefault::default_log_obj_,
            1u,
            "./src/player/quest/player_quest_comp.cpp",
            "getWorldQuestFlowGroupSuiteIndexByRollbackQuest",
            8501);
          v44 = common::milog::MiLogStream::operator<<<char [75],(char *[75])0>(
                  &v60,
                  (const char (*)[75])"[WQ_FLOW] getWorldQuestFlowGroupSuiteIndexByRollbackQuest  other group_id:");
          v45 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                  v44,
                  (const unsigned int *)(v3 + 64));
          v46 = common::milog::MiLogStream::operator<<<char [15],(char *[15])0>(
                  v45,
                  (const char (*)[15])", suite_index:");
          val = 0;
          v47 = common::milog::MiLogStream::operator<<<int,(int *)0>(v46, &val);
          v21 = common::milog::MiLogStream::operator<<<char [7],(char *[7])0>(v47, (const char (*)[7])", uid:");
          if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
            __asan_report_load8(&this->player_);
          goto LABEL_46;
        }
        common::milog::MiLogStream::create(
          &v60,
          &common::milog::MiLogDefault::default_log_obj_,
          1u,
          "./src/player/quest/player_quest_comp.cpp",
          "getWorldQuestFlowGroupSuiteIndexByRollbackQuest",
          8494);
        v37 = common::milog::MiLogStream::operator<<<char [89],(char *[89])0>(
                &v60,
                (const char (*)[89])"[WQ_FLOW] getWorldQuestFlowGroupSuiteIndexByRollbackQuest < min_order rollback_quest_id:");
        v38 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                v37,
                (const unsigned int *)(v3 + 80));
        v39 = common::milog::MiLogStream::operator<<<char [12],(char *[12])0>(v38, (const char (*)[12])", group_id:");
        v40 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                v39,
                (const unsigned int *)(v3 + 64));
        v41 = common::milog::MiLogStream::operator<<<char [15],(char *[15])0>(v40, (const char (*)[15])", suite_index:");
        v42 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                v41,
                &group_script_config_ptr->secure_suite_index);
        v43 = common::milog::MiLogStream::operator<<<char [7],(char *[7])0>(v42, (const char (*)[7])", uid:");
        if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
          __asan_report_load8(&this->player_);
        Uid = Player::getUid(this->player_);
        common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v43, &Uid);
        common::milog::MiLogStream::~MiLogStream(&v60);
        if ( *(_BYTE *)(((unsigned __int64)&group_script_config_ptr->secure_suite_index >> 3) + 0x7FFF8000) != 0
          && *(_BYTE *)(((unsigned __int64)&group_script_config_ptr->secure_suite_index >> 3) + 0x7FFF8000) <= 3 )
        {
          __asan_report_load4(&group_script_config_ptr->secure_suite_index);
        }
        result = group_script_config_ptr->secure_suite_index;
      }
      else
      {
        common::milog::MiLogStream::create(
          &v60,
          &common::milog::MiLogDefault::default_log_obj_,
          4u,
          "./src/player/quest/player_quest_comp.cpp",
          "getWorldQuestFlowGroupSuiteIndexByRollbackQuest",
          8487);
        v34 = common::milog::MiLogStream::operator<<<char [55],(char *[55])0>(
                &v60,
                (const char (*)[55])"[WQ_FLOW] findPlayerQuestExcelConfig failed, quest_id:");
        v35 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                v34,
                (const unsigned int *)(v3 + 80));
        v36 = common::milog::MiLogStream::operator<<<char [6],(char *[6])0>(v35, (const char (*)[6])" uid:");
        if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
          __asan_report_load8(&this->player_);
        Uid = Player::getUid(this->player_);
        common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v36, &Uid);
        common::milog::MiLogStream::~MiLogStream(&v60);
        result = 0LL;
      }
    }
    else
    {
      common::milog::MiLogStream::create(
        &v60,
        &common::milog::MiLogDefault::default_log_obj_,
        1u,
        "./src/player/quest/player_quest_comp.cpp",
        "getWorldQuestFlowGroupSuiteIndexByRollbackQuest",
        8478);
      v27 = common::milog::MiLogStream::operator<<<char [87],(char *[87])0>(
              &v60,
              (const char (*)[87])"[WQ_FLOW] getWorldQuestFlowGroupSuiteIndexByRollbackQuest find disk rollback_quest_id:");
      v28 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v27, (const unsigned int *)(v3 + 80));
      v29 = common::milog::MiLogStream::operator<<<char [12],(char *[12])0>(v28, (const char (*)[12])", group_id:");
      v30 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v29, (const unsigned int *)(v3 + 64));
      v31 = common::milog::MiLogStream::operator<<<char [15],(char *[15])0>(v30, (const char (*)[15])", suite_index:");
      v32 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v31, suite_index);
      v33 = common::milog::MiLogStream::operator<<<char [7],(char *[7])0>(v32, (const char (*)[7])", uid:");
      if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
        __asan_report_load8(&this->player_);
      Uid = Player::getUid(this->player_);
      common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v33, &Uid);
      common::milog::MiLogStream::~MiLogStream(&v60);
      if ( *(_BYTE *)(((unsigned __int64)suite_index >> 3) + 0x7FFF8000) != 0
        && (char)(((unsigned __int8)suite_index & 7) + 3) >= *(_BYTE *)(((unsigned __int64)suite_index >> 3) + 0x7FFF8000) )
      {
        __asan_report_load4(suite_index);
      }
      result = *suite_index;
    }
  }
  else
  {
    common::milog::MiLogStream::create(
      &v60,
      &common::milog::MiLogDefault::default_log_obj_,
      1u,
      "./src/player/quest/player_quest_comp.cpp",
      "getWorldQuestFlowGroupSuiteIndexByRollbackQuest",
      8468);
    v22 = common::milog::MiLogStream::operator<<<char [88],(char *[88])0>(
            &v60,
            (const char (*)[88])"[WQ_FLOW] getWorldQuestFlowGroupSuiteIndexByRollbackQuest rollback_quest null group_id:");
    v23 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v22, (const unsigned int *)(v3 + 64));
    v24 = common::milog::MiLogStream::operator<<<char [15],(char *[15])0>(v23, (const char (*)[15])", suite_index:");
    v25 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
            v24,
            &group_script_config_ptr->secure_suite_index);
    v26 = common::milog::MiLogStream::operator<<<char [7],(char *[7])0>(v25, (const char (*)[7])", uid:");
    if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
      __asan_report_load8(&this->player_);
    Uid = Player::getUid(this->player_);
    common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v26, &Uid);
    common::milog::MiLogStream::~MiLogStream(&v60);
    if ( *(_BYTE *)(((unsigned __int64)&group_script_config_ptr->secure_suite_index >> 3) + 0x7FFF8000) != 0
      && *(_BYTE *)(((unsigned __int64)&group_script_config_ptr->secure_suite_index >> 3) + 0x7FFF8000) <= 3 )
    {
      __asan_report_load4(&group_script_config_ptr->secure_suite_index);
    }
    result = group_script_config_ptr->secure_suite_index;
  }
LABEL_47:
  if ( v61 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 8506: range 0000000013E1983A-0000000013E199B1
bool __fastcall PlayerQuestComp::isGroupLinkedByWorldQuest(
        const PlayerQuestComp *const this,
        uint32_t parent_quest_id,
        uint32_t group_id)
{
  unsigned __int64 v3; // rbx
  __int64 v4; // rax
  _DWORD *v5; // r12
  bool result; // al
  std::_Rb_tree_const_iterator<std::pair<unsigned int const,std::set<unsigned int> > >::pointer v7; // rax
  std::_Rb_tree_const_iterator<std::pair<unsigned int const,std::set<unsigned int> > >::_Self __y; // [rsp+18h] [rbp-88h] BYREF
  char v10[128]; // [rsp+20h] [rbp-80h] BYREF

  v3 = (unsigned __int64)v10;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_1(96LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "3 32 4 20 parent_quest_id:8505 48 4 13 group_id:8505 64 8 9 iter:8507";
  *(_QWORD *)(v3 + 16) = PlayerQuestComp::isGroupLinkedByWorldQuest;
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = -234556924;
  v5[536862722] = -202116352;
  *(_DWORD *)(v3 + 32) = parent_quest_id;
  *(_DWORD *)(v3 + 48) = group_id;
  *(std::map<unsigned int,std::set<unsigned int>>::const_iterator *)(v3 + 64) = std::map<unsigned int,std::set<unsigned int>>::find(
                                                                                  &this->wq_parent_quest_linked_group_map_,
                                                                                  (const std::map<unsigned int,std::set<unsigned int>>::key_type *)(v3 + 32));
  __y._M_node = std::map<unsigned int,std::set<unsigned int>>::end(&this->wq_parent_quest_linked_group_map_)._M_node;
  if ( std::operator==(
         (const std::_Rb_tree_const_iterator<std::pair<unsigned int const,std::set<unsigned int> > >::_Self *)(v3 + 64),
         &__y) )
  {
    result = 0;
  }
  else
  {
    v7 = std::_Rb_tree_const_iterator<std::pair<unsigned int const,std::set<unsigned int>>>::operator->((const std::_Rb_tree_const_iterator<std::pair<unsigned int const,std::set<unsigned int> > > *const)(v3 + 64));
    result = common::tools::MiscUtils::isContains<std::set<unsigned int> const,unsigned int>(
               &v7->second,
               (const unsigned int *)(v3 + 48));
  }
  if ( v10 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8008) = 0;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8008) = -168430091;
  }
  return result;
};

// Line 8516: range 0000000013E199B2-0000000013E19C55
void __fastcall PlayerQuestComp::setGroupLinkedByWorldQuest(
        PlayerQuestComp *const this,
        uint32_t parent_quest_id,
        uint32_t group_id)
{
  unsigned __int64 v3; // r12
  __int64 v4; // rax
  _DWORD *v5; // r13
  common::milog::MiLogStream *v6; // rax
  common::milog::MiLogStream *v7; // rax
  common::milog::MiLogStream *v8; // rax
  common::milog::MiLogStream *v9; // rax
  common::milog::MiLogStream *v10; // r14
  std::set<unsigned int> *v11; // rax
  unsigned int val; // [rsp+1Ch] [rbp-B4h] BYREF
  common::milog::MiLogStream v14; // [rsp+20h] [rbp-B0h] BYREF
  char v15[144]; // [rsp+40h] [rbp-90h] BYREF

  v3 = (unsigned __int64)v15;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_1(96LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "3 32 4 20 parent_quest_id:8515 48 4 13 group_id:8515 64 16 21 parent_quest_ptr:8517";
  *(_QWORD *)(v3 + 16) = PlayerQuestComp::setGroupLinkedByWorldQuest;
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = -234556924;
  v5[536862722] = -202178560;
  *(_DWORD *)(v3 + 32) = parent_quest_id;
  *(_DWORD *)(v3 + 48) = group_id;
  PlayerQuestComp::findParentQuest((const PlayerQuestComp *const)(v3 + 64), (__int64)this, *(_DWORD *)(v3 + 32));
  if ( std::operator==<ParentQuest>((const std::shared_ptr<ParentQuest> *)(v3 + 64), 0LL) )
  {
    common::milog::MiLogStream::create(
      &v14,
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/player/quest/player_quest_comp.cpp",
      "setGroupLinkedByWorldQuest",
      8520);
    v6 = common::milog::MiLogStream::operator<<<char [50],(char *[50])0>(
           &v14,
           (const char (*)[50])"[WQ_FLOW] findParentQuest failed parent_quest_id:");
    v7 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v6, (const unsigned int *)(v3 + 32));
    v8 = common::milog::MiLogStream::operator<<<char [12],(char *[12])0>(v7, (const char (*)[12])", group_id:");
    v9 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v8, (const unsigned int *)(v3 + 48));
    v10 = common::milog::MiLogStream::operator<<<char [7],(char *[7])0>(v9, (const char (*)[7])", uid:");
    if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
      __asan_report_load8(&this->player_);
    val = Player::getUid(this->player_);
    common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v10, &val);
    common::milog::MiLogStream::~MiLogStream(&v14);
  }
  else
  {
    v11 = std::map<unsigned int,std::set<unsigned int>>::operator[](
            &this->wq_parent_quest_linked_group_map_,
            (const std::map<unsigned int,std::set<unsigned int>>::key_type *)(v3 + 32));
    std::set<unsigned int>::insert(v11, (const std::set<unsigned int>::value_type *)(v3 + 48));
  }
  std::shared_ptr<ParentQuest>::~shared_ptr((std::shared_ptr<ParentQuest> *const)(v3 + 64));
  if ( v15 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8008) = 0;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8008) = -168430091;
  }
};

// Line 8527: range 0000000013E19C56-0000000013E1A319
void __cdecl PlayerQuestComp::refreshWorldQuestFlowGroupSuite(
        PlayerQuestComp *const this,
        uint32_t parent_quest_id,
        const std::map<unsigned int,unsigned int> *refresh_flow_group_suite_map,
        bool is_force)
{
  unsigned __int64 v4; // r13
  __int64 v5; // rax
  _DWORD *v6; // r12
  common::milog::MiLogStream *v7; // rax
  common::milog::MiLogStream *v8; // rax
  common::milog::MiLogStream *v9; // rax
  common::milog::MiLogStream *v10; // rax
  common::milog::MiLogStream *v11; // r14
  const char *v12; // rax
  data::QuestExec *v13; // rax
  std::allocator<char> __a; // [rsp+2Bh] [rbp-205h] BYREF
  unsigned int val; // [rsp+2Ch] [rbp-204h] BYREF
  std::map<unsigned int,unsigned int>::const_iterator __for_begin; // [rsp+30h] [rbp-200h] BYREF
  std::map<unsigned int,unsigned int>::const_iterator __for_end; // [rsp+38h] [rbp-1F8h] BYREF
  const std::map<unsigned int,unsigned int> *__for_range; // [rsp+40h] [rbp-1F0h]
  const std::pair<unsigned int const,unsigned int> *v21; // [rsp+48h] [rbp-1E8h]
  std::tuple_element<0,const std::pair<unsigned int const,unsigned int> >::type *group_id; // [rsp+50h] [rbp-1E0h]
  std::tuple_element<1,const std::pair<unsigned int const,unsigned int> >::type *suite_index; // [rsp+58h] [rbp-1D8h]
  std::string __lhs; // [rsp+60h] [rbp-1D0h] BYREF
  std::string v25; // [rsp+80h] [rbp-1B0h] BYREF
  std::string __rhs; // [rsp+A0h] [rbp-190h] BYREF
  char v27[368]; // [rsp+C0h] [rbp-170h] BYREF

  v4 = (unsigned __int64)v27;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v5 = __asan_stack_malloc_3(320LL);
    if ( v5 )
      v4 = v5;
  }
  *(_QWORD *)v4 = 1102416563LL;
  *(_QWORD *)(v4 + 8) = "4 48 24 32 refresh_flow_suite_exec_vec:8534 112 32 15 param_str0:8537 176 32 15 param_str1:8547 "
                        "240 40 34 refresh_flow_group_suite_exec:8535";
  *(_QWORD *)(v4 + 16) = PlayerQuestComp::refreshWorldQuestFlowGroupSuite;
  v6 = (_DWORD *)(v4 >> 3);
  v6[536862720] = -235802127;
  v6[536862721] = 61937;
  v6[536862722] = -218959360;
  v6[536862723] = 62194;
  v6[536862724] = -219021312;
  v6[536862725] = 62194;
  v6[536862726] = -219021312;
  v6[536862727] = 62194;
  v6[536862728] = -218103808;
  v6[536862729] = -202116109;
  if ( !std::map<unsigned int,unsigned int>::empty(refresh_flow_group_suite_map) )
  {
    std::vector<data::QuestExec>::vector((std::vector<data::QuestExec> *const)(v4 + 48));
    data::QuestExec::QuestExec((data::QuestExec *const)(v4 + 240));
    *(_DWORD *)(v4 + 248) = 74;
    std::string::basic_string(v4 + 112);
    __for_range = refresh_flow_group_suite_map;
    __for_begin._M_node = std::map<unsigned int,unsigned int>::begin(refresh_flow_group_suite_map)._M_node;
    __for_end._M_node = std::map<unsigned int,unsigned int>::end(refresh_flow_group_suite_map)._M_node;
    while ( std::operator!=(&__for_begin, &__for_end) )
    {
      v21 = std::_Rb_tree_const_iterator<std::pair<unsigned int const,unsigned int>>::operator*(&__for_begin);
      group_id = std::get<0ul,unsigned int const,unsigned int>(v21);
      suite_index = (std::tuple_element<1,const std::pair<unsigned int const,unsigned int> >::type *)std::get<1ul,unsigned int const,unsigned int>(v21);
      if ( (unsigned __int8)std::string::empty(v4 + 112) != 1 )
        std::string::operator+=(v4 + 112, ";");
      if ( *(_BYTE *)(((unsigned __int64)suite_index >> 3) + 0x7FFF8000) != 0
        && (char)(((unsigned __int8)suite_index & 7) + 3) >= *(_BYTE *)(((unsigned __int64)suite_index >> 3) + 0x7FFF8000) )
      {
        __asan_report_load4(suite_index);
      }
      common::tools::StringUtils::numToStr<unsigned int>(&__rhs, *suite_index);
      if ( *(_BYTE *)(((unsigned __int64)group_id >> 3) + 0x7FFF8000) != 0
        && (char)(((unsigned __int8)group_id & 7) + 3) >= *(_BYTE *)(((unsigned __int64)group_id >> 3) + 0x7FFF8000) )
      {
        __asan_report_load4(group_id);
      }
      common::tools::StringUtils::numToStr<unsigned int>(&__lhs, *group_id);
      std::operator+<char>(&v25, &__lhs, ",");
      std::operator+<char>((std::string *)(v4 + 176), &v25, &__rhs);
      std::string::operator+=(v4 + 112, v4 + 176);
      std::string::~string((void *)(v4 + 176));
      std::string::~string(&v25);
      std::string::~string(&__lhs);
      std::string::~string(&__rhs);
      common::milog::MiLogStream::create(
        (common::milog::MiLogStream *)(v4 + 176),
        &common::milog::MiLogDefault::default_log_obj_,
        1u,
        "./src/player/quest/player_quest_comp.cpp",
        "refreshWorldQuestFlowGroupSuite",
        8545);
      v7 = common::milog::MiLogStream::operator<<<char [52],(char *[52])0>(
             (common::milog::MiLogStream *const)(v4 + 176),
             (const char (*)[52])"[WQ_FLOW] refreshWorldQuestFlowGroupSuite group_id:");
      v8 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v7, group_id);
      v9 = common::milog::MiLogStream::operator<<<char [15],(char *[15])0>(v8, (const char (*)[15])", suite_index:");
      v10 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v9, suite_index);
      v11 = common::milog::MiLogStream::operator<<<char [7],(char *[7])0>(v10, (const char (*)[7])", uid:");
      if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
        __asan_report_load8(&this->player_);
      val = Player::getUid(this->player_);
      common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v11, &val);
      common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v4 + 176));
      std::_Rb_tree_const_iterator<std::pair<unsigned int const,unsigned int>>::operator++(&__for_begin);
    }
    std::allocator<char>::allocator(&__a);
    if ( is_force )
      v12 = "1";
    else
      v12 = "0";
    std::string::basic_string<std::allocator<char>>((std::string *const)(v4 + 176), v12, &__a);
    std::allocator<char>::~allocator(&__a);
    std::vector<std::string>::emplace_back<std::string&>(
      (std::vector<std::string> *const)(v4 + 256),
      (std::string *)(v4 + 112),
      (std::string *)(v4 + 256));
    std::vector<std::string>::emplace_back<std::string&>(
      (std::vector<std::string> *const)(v4 + 256),
      (std::string *)(v4 + 176),
      (std::string *)(v4 + 256));
    v13 = std::move<data::QuestExec &>((data::QuestExec *)(v4 + 240));
    std::vector<data::QuestExec>::emplace_back<data::QuestExec>(
      (std::vector<data::QuestExec> *const)(v4 + 48),
      v13,
      v13);
    PlayerQuestComp::execAction(this, (const std::vector<data::QuestExec> *)(v4 + 48), parent_quest_id, 0);
    std::string::~string((void *)(v4 + 176));
    std::string::~string((void *)(v4 + 112));
    data::QuestExec::~QuestExec((data::QuestExec *const)(v4 + 240));
    std::vector<data::QuestExec>::~vector((std::vector<data::QuestExec> *const)(v4 + 48));
  }
  if ( v27 == (char *)v4 )
  {
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8008) = 0LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8010) = 0LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8018) = 0LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8020) = 0LL;
  }
  else
  {
    *(_QWORD *)v4 = 1172321806LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8020) = 0xF5F5F5F5F5F5F5F5LL;
  }
};

// Line 8555: range 0000000013E1A31A-0000000013E1A996
void __fastcall PlayerQuestComp::refreshWorldQuestFlowGroupsToSecureSuite(
        PlayerQuestComp *const this,
        uint32_t parent_quest_id)
{
  unsigned __int64 v2; // r13
  __int64 v3; // rax
  _DWORD *v4; // r12
  common::milog::MiLogStream *v5; // rax
  common::milog::MiLogStream *v6; // rax
  common::milog::MiLogStream *v7; // rbx
  LuaConfigMgr *p_lua_config_mgr; // rcx
  common::milog::MiLogStream *v9; // rax
  int v10; // r14d
  std::map<unsigned int,unsigned int>::mapped_type *v11; // rax
  _DWORD *v12; // rdx
  char v13; // cl
  std::tuple_element<0,const std::pair<unsigned int const,unsigned int> >::type *v14; // rsi
  __int64 v15; // rcx
  common::milog::MiLogStream *v16; // rax
  common::milog::MiLogStream *v17; // rax
  common::milog::MiLogStream *v18; // rax
  common::milog::MiLogStream *v19; // rax
  common::milog::MiLogStream *v20; // r14
  unsigned int val; // [rsp+1Ch] [rbp-164h] BYREF
  std::map<unsigned int,unsigned int>::const_iterator __for_begin; // [rsp+20h] [rbp-160h] BYREF
  std::map<unsigned int,unsigned int>::const_iterator __for_end; // [rsp+28h] [rbp-158h] BYREF
  const data::MainQuestExcelConfig *parent_quest_config_ptr; // [rsp+30h] [rbp-150h]
  const std::map<unsigned int,unsigned int> *__for_range; // [rsp+38h] [rbp-148h]
  const std::pair<unsigned int const,unsigned int> *v26; // [rsp+40h] [rbp-140h]
  std::tuple_element<0,const std::pair<unsigned int const,unsigned int> >::type *group_id; // [rsp+48h] [rbp-138h]
  std::tuple_element<1,const std::pair<unsigned int const,unsigned int> >::type *_; // [rsp+50h] [rbp-130h]
  const GroupScriptConfig *group_script_config_ptr; // [rsp+58h] [rbp-128h]
  std::shared_ptr<Config> v30; // [rsp+60h] [rbp-120h] BYREF
  common::milog::MiLogStream v31; // [rsp+70h] [rbp-110h] BYREF
  common::milog::MiLogStream v32; // [rsp+90h] [rbp-F0h] BYREF
  char v33[208]; // [rsp+B0h] [rbp-D0h] BYREF

  v2 = (unsigned __int64)v33;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_2(160LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "3 48 4 16 suite_index:8582 64 4 20 parent_quest_id:8554 80 48 33 refresh_flow_group_suite_map:8573";
  *(_QWORD *)(v2 + 16) = PlayerQuestComp::refreshWorldQuestFlowGroupsToSecureSuite;
  v4 = (_DWORD *)(v2 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = -234556943;
  v4[536862722] = 61956;
  v4[536862724] = -202116109;
  *(_DWORD *)(v2 + 64) = parent_quest_id;
  if ( !PlayerQuestComp::isRandomParentQuest(this, *(_DWORD *)(v2 + 64)) )
  {
    parent_quest_config_ptr = PlayerQuestComp::findPlayerParentQuestExcelConfig(this, *(_DWORD *)(v2 + 64));
    if ( parent_quest_config_ptr )
    {
      if ( !std::map<unsigned int,unsigned int>::empty(&parent_quest_config_ptr->flow_min_rewind_order_map) )
      {
        std::map<unsigned int,unsigned int>::map((std::map<unsigned int,unsigned int> *const)(v2 + 80));
        __for_range = &parent_quest_config_ptr->flow_min_rewind_order_map;
        __for_begin._M_node = std::map<unsigned int,unsigned int>::begin(&parent_quest_config_ptr->flow_min_rewind_order_map)._M_node;
        __for_end._M_node = std::map<unsigned int,unsigned int>::end(&parent_quest_config_ptr->flow_min_rewind_order_map)._M_node;
        while ( std::operator!=(&__for_begin, &__for_end) )
        {
          v26 = std::_Rb_tree_const_iterator<std::pair<unsigned int const,unsigned int>>::operator*(&__for_begin);
          group_id = std::get<0ul,unsigned int const,unsigned int>(v26);
          _ = (std::tuple_element<1,const std::pair<unsigned int const,unsigned int> >::type *)std::get<1ul,unsigned int const,unsigned int>(v26);
          ServiceBox::findService<GameserverService>();
          GameserverService::getConfig((GameserverService *const)&v30);
          p_lua_config_mgr = &std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false> *const)&v30)->design_config.lua_config_mgr;
          if ( *(_BYTE *)(((unsigned __int64)group_id >> 3) + 0x7FFF8000) != 0
            && (char)(((unsigned __int8)group_id & 7) + 3) >= *(_BYTE *)(((unsigned __int64)group_id >> 3) + 0x7FFF8000) )
          {
            __asan_report_load4(group_id);
          }
          group_script_config_ptr = LuaConfigMgr::findGroupScriptConfig(p_lua_config_mgr, *group_id);
          std::shared_ptr<Config>::~shared_ptr(&v30);
          if ( !group_script_config_ptr )
          {
            common::milog::MiLogStream::create(
              &v31,
              &common::milog::MiLogDefault::default_log_obj_,
              4u,
              "./src/player/quest/player_quest_comp.cpp",
              "refreshWorldQuestFlowGroupsToSecureSuite",
              8579);
            v9 = common::milog::MiLogStream::operator<<<char [50],(char *[50])0>(
                   &v31,
                   (const char (*)[50])"[WQ_FLOW] findGroupScriptConfig fails, group_id: ");
            common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v9, group_id);
            common::milog::MiLogStream::~MiLogStream(&v31);
            goto LABEL_24;
          }
          if ( *(_BYTE *)(((unsigned __int64)&group_script_config_ptr->secure_suite_index >> 3) + 0x7FFF8000) != 0
            && *(_BYTE *)(((unsigned __int64)&group_script_config_ptr->secure_suite_index >> 3) + 0x7FFF8000) <= 3 )
          {
            __asan_report_load4(&group_script_config_ptr->secure_suite_index);
          }
          *(_DWORD *)(v2 + 48) = group_script_config_ptr->secure_suite_index;
          v10 = *(_DWORD *)(v2 + 48);
          v14 = group_id;
          v11 = std::map<unsigned int,unsigned int>::operator[](
                  (std::map<unsigned int,unsigned int> *const)(v2 + 80),
                  group_id);
          v12 = v11;
          v13 = *(_BYTE *)(((unsigned __int64)v11 >> 3) + 0x7FFF8000);
          LOBYTE(v14) = v13 != 0;
          v15 = (v13 != 0) & (unsigned __int8)((char)(((unsigned __int8)v11 & 7) + 3) >= v13);
          if ( (_BYTE)v15 )
            __asan_report_store4(v11, v14, v11, v15);
          *v12 = v10;
          common::milog::MiLogStream::create(
            &v32,
            &common::milog::MiLogDefault::default_log_obj_,
            1u,
            "./src/player/quest/player_quest_comp.cpp",
            "refreshWorldQuestFlowGroupsToSecureSuite",
            8584);
          v16 = common::milog::MiLogStream::operator<<<char [61],(char *[61])0>(
                  &v32,
                  (const char (*)[61])"[WQ_FLOW] refreshWorldQuestFlowGroupsToSecureSuite group_id:");
          v17 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v16, group_id);
          v18 = common::milog::MiLogStream::operator<<<char [15],(char *[15])0>(
                  v17,
                  (const char (*)[15])", suite_index:");
          v19 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                  v18,
                  (const unsigned int *)(v2 + 48));
          v20 = common::milog::MiLogStream::operator<<<char [7],(char *[7])0>(v19, (const char (*)[7])", uid:");
          if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
            __asan_report_load8(&this->player_);
          val = Player::getUid(this->player_);
          common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v20, &val);
          common::milog::MiLogStream::~MiLogStream(&v32);
          std::_Rb_tree_const_iterator<std::pair<unsigned int const,unsigned int>>::operator++(&__for_begin);
        }
        PlayerQuestComp::refreshWorldQuestFlowGroupSuite(
          this,
          *(_DWORD *)(v2 + 64),
          (const std::map<unsigned int,unsigned int> *)(v2 + 80),
          1);
LABEL_24:
        std::map<unsigned int,unsigned int>::~map((std::map<unsigned int,unsigned int> *const)(v2 + 80));
      }
    }
    else
    {
      common::milog::MiLogStream::create(
        &v32,
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/player/quest/player_quest_comp.cpp",
        "refreshWorldQuestFlowGroupsToSecureSuite",
        8564);
      v5 = common::milog::MiLogStream::operator<<<char [68],(char *[68])0>(
             &v32,
             (const char (*)[68])"[WQ_FLOW] findPlayerParentQuestExcelConfig failed, parent_quest_id:");
      v6 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v5, (const unsigned int *)(v2 + 64));
      v7 = common::milog::MiLogStream::operator<<<char [6],(char *[6])0>(v6, (const char (*)[6])" uid:");
      if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
        __asan_report_load8(&this->player_);
      val = Player::getUid(this->player_);
      common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v7, &val);
      common::milog::MiLogStream::~MiLogStream(&v32);
    }
  }
  if ( v33 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8008) = 0;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8010) = 0;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8010) = -168430091;
  }
};

// Line 8590: range 0000000013E1A998-0000000013E1AB8F
__int64 __fastcall PlayerQuestComp::interpretInferenceWord(PlayerQuestComp *const this, uint32_t word_id)
{
  unsigned __int64 v2; // rbx
  __int64 v3; // rax
  _DWORD *v4; // r13
  common::milog::MiLogStream *v5; // rax
  unsigned int v6; // r14d
  ParentQuest *v7; // rax
  __int64 result; // rax
  common::milog::MiLogStream v9; // [rsp+10h] [rbp-B0h] BYREF
  char v10[144]; // [rsp+30h] [rbp-90h] BYREF

  v2 = (unsigned __int64)v10;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_1(96LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "2 48 4 12 word_id:8589 64 16 21 parent_quest_ptr:8591";
  *(_QWORD *)(v2 + 16) = PlayerQuestComp::interpretInferenceWord;
  v4 = (_DWORD *)(v2 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = -234556943;
  v4[536862722] = -202178560;
  *(_DWORD *)(v2 + 48) = word_id;
  PlayerQuestComp::findUnfinishedInferenceWordParentQuest((const PlayerQuestComp *const)(v2 + 64), (uint32_t)this);
  if ( std::operator==<ParentQuest>(0LL, (const std::shared_ptr<ParentQuest> *)(v2 + 64)) )
  {
    common::milog::MiLogStream::create(
      &v9,
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/player/quest/player_quest_comp.cpp",
      "interpretInferenceWord",
      8594);
    v5 = common::milog::MiLogStream::operator<<<char [57],(char *[57])0>(
           &v9,
           (const char (*)[57])"findUnfinishedInferenceWordParentQuest nullptr, word_id:");
    common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v5, (const unsigned int *)(v2 + 48));
    common::milog::MiLogStream::~MiLogStream(&v9);
    v6 = -1;
  }
  else
  {
    v7 = std::__shared_ptr_access<ParentQuest,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<ParentQuest,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 64));
    v6 = ParentQuest::interpretInferenceWord(v7, *(_DWORD *)(v2 + 48));
  }
  std::shared_ptr<ParentQuest>::~shared_ptr((std::shared_ptr<ParentQuest> *const)(v2 + 64));
  result = v6;
  if ( v10 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8008) = 0;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8008) = -168430091;
  }
  return result;
};

// Line 8601: range 0000000013E1AB90-0000000013E1AD93
__int64 __fastcall PlayerQuestComp::associateInferenceWord(
        PlayerQuestComp *const this,
        uint32_t base_word_id,
        uint32_t associate_word_id)
{
  unsigned __int64 v3; // rbx
  __int64 v4; // rax
  _DWORD *v5; // r13
  common::milog::MiLogStream *v6; // rax
  unsigned int v7; // r14d
  ParentQuest *v8; // rax
  __int64 result; // rax
  common::milog::MiLogStream v11; // [rsp+10h] [rbp-B0h] BYREF
  char v12[144]; // [rsp+30h] [rbp-90h] BYREF

  v3 = (unsigned __int64)v12;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_1(96LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "2 48 4 17 base_word_id:8600 64 16 21 parent_quest_ptr:8602";
  *(_QWORD *)(v3 + 16) = PlayerQuestComp::associateInferenceWord;
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = -234556943;
  v5[536862722] = -202178560;
  *(_DWORD *)(v3 + 48) = base_word_id;
  PlayerQuestComp::findUnfinishedInferenceWordParentQuest((const PlayerQuestComp *const)(v3 + 64), (uint32_t)this);
  if ( std::operator==<ParentQuest>(0LL, (const std::shared_ptr<ParentQuest> *)(v3 + 64)) )
  {
    common::milog::MiLogStream::create(
      &v11,
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/player/quest/player_quest_comp.cpp",
      "associateInferenceWord",
      8605);
    v6 = common::milog::MiLogStream::operator<<<char [57],(char *[57])0>(
           &v11,
           (const char (*)[57])"findUnfinishedInferenceWordParentQuest nullptr, word_id:");
    common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v6, (const unsigned int *)(v3 + 48));
    common::milog::MiLogStream::~MiLogStream(&v11);
    v7 = -1;
  }
  else
  {
    v8 = std::__shared_ptr_access<ParentQuest,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<ParentQuest,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 64));
    v7 = ParentQuest::associateInferenceWord(v8, *(_DWORD *)(v3 + 48), associate_word_id);
  }
  std::shared_ptr<ParentQuest>::~shared_ptr((std::shared_ptr<ParentQuest> *const)(v3 + 64));
  result = v7;
  if ( v12 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8008) = 0;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8008) = -168430091;
  }
  return result;
};

// Line 8612: range 0000000013E1AD94-0000000013E1AF99
__int64 __fastcall PlayerQuestComp::submitInferenceWord(
        PlayerQuestComp *const this,
        uint32_t word_id,
        uint32_t *conclusion_id)
{
  unsigned __int64 v3; // rbx
  __int64 v4; // rax
  _DWORD *v5; // r13
  common::milog::MiLogStream *v6; // rax
  unsigned int v7; // r14d
  ParentQuest *v8; // rax
  __int64 result; // rax
  common::milog::MiLogStream v11; // [rsp+20h] [rbp-B0h] BYREF
  char v12[144]; // [rsp+40h] [rbp-90h] BYREF

  v3 = (unsigned __int64)v12;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_1(96LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "2 48 4 12 word_id:8611 64 16 21 parent_quest_ptr:8613";
  *(_QWORD *)(v3 + 16) = PlayerQuestComp::submitInferenceWord;
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = -234556943;
  v5[536862722] = -202178560;
  *(_DWORD *)(v3 + 48) = word_id;
  PlayerQuestComp::findUnfinishedInferenceWordParentQuest((const PlayerQuestComp *const)(v3 + 64), (uint32_t)this);
  if ( std::operator==<ParentQuest>(0LL, (const std::shared_ptr<ParentQuest> *)(v3 + 64)) )
  {
    common::milog::MiLogStream::create(
      &v11,
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/player/quest/player_quest_comp.cpp",
      "submitInferenceWord",
      8616);
    v6 = common::milog::MiLogStream::operator<<<char [57],(char *[57])0>(
           &v11,
           (const char (*)[57])"findUnfinishedInferenceWordParentQuest nullptr, word_id:");
    common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v6, (const unsigned int *)(v3 + 48));
    common::milog::MiLogStream::~MiLogStream(&v11);
    v7 = -1;
  }
  else
  {
    v8 = std::__shared_ptr_access<ParentQuest,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<ParentQuest,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 64));
    v7 = ParentQuest::submitInferenceWord(v8, *(_DWORD *)(v3 + 48), conclusion_id);
  }
  std::shared_ptr<ParentQuest>::~shared_ptr((std::shared_ptr<ParentQuest> *const)(v3 + 64));
  result = v7;
  if ( v12 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8008) = 0;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8008) = -168430091;
  }
  return result;
};

// Line 8623: range 0000000013E1AF9A-0000000013E1B281
const PlayerQuestComp *__fastcall PlayerQuestComp::findUnfinishedInferenceWordParentQuest(
        const PlayerQuestComp *const this,
        __int64 word_id,
        int a3)
{
  unsigned __int64 v3; // r12
  __int64 v4; // rax
  _DWORD *v5; // r13
  std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v6; // rax
  std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v7; // rax
  bool v8; // r14
  std::__detail::_Node_const_iterator<std::pair<unsigned int const,unsigned int>,false,false>::pointer v9; // rdx
  unsigned int *p_second; // rax
  std::__shared_ptr_access<ParentQuest,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v11; // rax
  std::__detail::_Node_iterator_base<std::pair<unsigned int const,unsigned int>,false> __y; // [rsp+28h] [rbp-B8h] BYREF
  char v15[176]; // [rsp+30h] [rbp-B0h] BYREF

  v3 = (unsigned __int64)v15;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_1(128LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "3 48 4 12 word_id:8622 64 8 9 iter:8624 96 16 21 parent_quest_ptr:8629";
  *(_QWORD *)(v3 + 16) = PlayerQuestComp::findUnfinishedInferenceWordParentQuest;
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = -234556943;
  v5[536862722] = -218959360;
  v5[536862723] = -202178560;
  *(_DWORD *)(v3 + 48) = a3;
  ServiceBox::findService<GameserverService>();
  GameserverService::getConfig((GameserverService *const)(v3 + 96));
  v6 = std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 96));
  *(std::unordered_map<unsigned int,unsigned int>::const_iterator *)(v3 + 64) = std::unordered_map<unsigned int,unsigned int>::find(
                                                                                  &v6->design_config.txt_config_mgr.inference_config_mgr.word_to_parent_quest_map,
                                                                                  (const std::unordered_map<unsigned int,unsigned int>::key_type *)(v3 + 48));
  std::shared_ptr<Config>::~shared_ptr((std::shared_ptr<Config> *const)(v3 + 96));
  ServiceBox::findService<GameserverService>();
  GameserverService::getConfig((GameserverService *const)(v3 + 96));
  v7 = std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 96));
  __y._M_cur = std::unordered_map<unsigned int,unsigned int>::end(&v7->design_config.txt_config_mgr.inference_config_mgr.word_to_parent_quest_map)._M_cur;
  v8 = std::__detail::operator==<std::pair<unsigned int const,unsigned int>,false>(
         (const std::__detail::_Node_iterator_base<std::pair<unsigned int const,unsigned int>,false> *)(v3 + 64),
         &__y);
  std::shared_ptr<Config>::~shared_ptr((std::shared_ptr<Config> *const)(v3 + 96));
  if ( v8 )
  {
    std::shared_ptr<ParentQuest>::shared_ptr((std::shared_ptr<ParentQuest> *const)this, 0LL);
  }
  else
  {
    v9 = std::__detail::_Node_const_iterator<std::pair<unsigned int const,unsigned int>,false,false>::operator->((const std::__detail::_Node_const_iterator<std::pair<unsigned int const,unsigned int>,false,false> *const)(v3 + 64));
    p_second = &v9->second;
    if ( *(_BYTE *)(((unsigned __int64)p_second >> 3) + 0x7FFF8000) != 0
      && (char)(((unsigned __int8)p_second & 7) + 3) >= *(_BYTE *)(((unsigned __int64)p_second >> 3) + 0x7FFF8000) )
    {
      __asan_report_load4(p_second);
    }
    PlayerQuestComp::findParentQuest((const PlayerQuestComp *const)(v3 + 96), word_id, v9->second);
    if ( std::operator==<ParentQuest>(0LL, (const std::shared_ptr<ParentQuest> *)(v3 + 96))
      || (v11 = std::__shared_ptr_access<ParentQuest,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<ParentQuest,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 96)),
          ParentQuest::getParentQuestState(v11)) )
    {
      std::shared_ptr<ParentQuest>::shared_ptr((std::shared_ptr<ParentQuest> *const)this, 0LL);
    }
    else
    {
      std::shared_ptr<ParentQuest>::shared_ptr(
        (std::shared_ptr<ParentQuest> *const)this,
        (std::shared_ptr<ParentQuest> *)(v3 + 96));
    }
    std::shared_ptr<ParentQuest>::~shared_ptr((std::shared_ptr<ParentQuest> *const)(v3 + 96));
  }
  if ( v15 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return this;
};

// Line 8643: range 0000000013E1B282-0000000013E1BB8D
__int64 __fastcall PlayerQuestComp::checkQuestAvatarRename(
        PlayerQuestComp *const this,
        uint32_t rename_id,
        const std::string *avatar_name)
{
  unsigned __int64 v3; // r13
  __int64 v4; // rax
  _DWORD *v5; // r12
  std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v6; // rax
  common::milog::MiLogStream *v7; // rax
  unsigned int v8; // r14d
  PlayerBasicComp *BasicComp; // rax
  common::milog::MiLogStream *v10; // r14
  common::milog::MiLogStream *v11; // rax
  PlayerAvatarComp *AvatarComp; // rax
  common::milog::MiLogStream *v13; // r14
  PlayerAvatarComp *v14; // rax
  common::milog::MiLogStream *v15; // rax
  common::milog::MiLogStream *v16; // rax
  common::milog::MiLogStream *v17; // rax
  common::milog::MiLogStream *v18; // r14
  __int64 result; // rax
  std::allocator<char> __a; // [rsp+2Fh] [rbp-121h] BYREF
  unsigned int val; // [rsp+30h] [rbp-120h] BYREF
  int32_t ret; // [rsp+34h] [rbp-11Ch]
  char *v24; // [rsp+38h] [rbp-118h] BYREF
  const data::AvatarRenameExcelConfig *rename_config_ptr; // [rsp+40h] [rbp-110h]
  const AvatarRenameData *rename_data_ptr; // [rsp+48h] [rbp-108h]
  std::shared_ptr<Config> v27; // [rsp+50h] [rbp-100h] BYREF
  common::milog::MiLogStream v28; // [rsp+60h] [rbp-F0h] BYREF
  char v29[208]; // [rsp+80h] [rbp-D0h] BYREF

  v3 = (unsigned __int64)v29;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_2(160LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "4 48 4 14 avatar_id:8652 64 4 16 quest_state:8665 80 4 14 rename_id:8642 96 32 17 trimmed_name:8650";
  *(_QWORD *)(v3 + 16) = PlayerQuestComp::checkQuestAvatarRename;
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = -234556943;
  v5[536862722] = -234556924;
  v5[536862724] = -202116109;
  *(_DWORD *)(v3 + 80) = rename_id;
  ServiceBox::findService<GameserverService>();
  GameserverService::getConfig((GameserverService *const)&v27);
  v6 = std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false> *const)&v27);
  rename_config_ptr = data::RenameExcelConfigMgrBase::findAvatarRenameExcelConfig(
                        &v6->design_config.txt_config_mgr.rename_config_mgr,
                        *(_DWORD *)(v3 + 80));
  std::shared_ptr<Config>::~shared_ptr(&v27);
  if ( rename_config_ptr )
  {
    std::allocator<char>::allocator(&__a);
    std::string::basic_string<std::allocator<char>>((std::string *const)&v28, off_2516E2C0, &__a);
    common::tools::StringUtils::trim((std::string *)(v3 + 96), avatar_name, (const std::string *)&v28, 1);
    std::string::~string(&v28);
    std::allocator<char>::~allocator(&__a);
    if ( *(_BYTE *)(((unsigned __int64)&rename_config_ptr->related_avatar_id >> 3) + 0x7FFF8000) != 0
      && *(_BYTE *)(((unsigned __int64)&rename_config_ptr->related_avatar_id >> 3) + 0x7FFF8000) <= 3 )
    {
      __asan_report_load4(&rename_config_ptr->related_avatar_id);
    }
    *(_DWORD *)(v3 + 48) = rename_config_ptr->related_avatar_id;
    if ( *(_BYTE *)(((unsigned __int64)&rename_config_ptr->type >> 3) + 0x7FFF8000) != 0
      && (char)((((_BYTE)rename_config_ptr + 12) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&rename_config_ptr->type >> 3)
                                                                       + 0x7FFF8000) )
    {
      __asan_report_load4(&rename_config_ptr->type);
    }
    if ( rename_config_ptr->type == AVATAR_RENAME_TYPE_WANDERER )
    {
      if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
        __asan_report_load8(&this->player_);
      BasicComp = Player::getBasicComp(this->player_);
      ret = PlayerBasicComp::checkNickName(BasicComp, (const std::string *)(v3 + 96));
      if ( ret )
      {
        common::milog::MiLogStream::create(
          &v28,
          &common::milog::MiLogDefault::default_log_obj_,
          1u,
          "./src/player/quest/player_quest_comp.cpp",
          "checkQuestAvatarRename",
          8661);
        v10 = common::milog::MiLogStream::operator<<<char [27],(char *[27])0>(
                &v28,
                (const char (*)[27])"checkNickName failed, uid:");
        if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
          __asan_report_load8(&this->player_);
        val = Player::getUid(this->player_);
        common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v10, &val);
        common::milog::MiLogStream::~MiLogStream(&v28);
        v8 = ret;
      }
      else
      {
        if ( *(_BYTE *)(((unsigned __int64)&rename_config_ptr->rename_quest_id >> 3) + 0x7FFF8000) != 0
          && *(_BYTE *)(((unsigned __int64)&rename_config_ptr->rename_quest_id >> 3) + 0x7FFF8000) <= 3 )
        {
          __asan_report_load4(&rename_config_ptr->rename_quest_id);
        }
        *(_DWORD *)(v3 + 64) = PlayerQuestComp::getQuestState(this, rename_config_ptr->rename_quest_id);
        if ( *(_DWORD *)(v3 + 64) == 2 )
        {
          if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
            __asan_report_load8(&this->player_);
          AvatarComp = Player::getAvatarComp(this->player_);
          rename_data_ptr = PlayerAvatarComp::findAvatarRenameData(AvatarComp, *(_DWORD *)(v3 + 48));
          if ( !rename_data_ptr )
            goto LABEL_44;
          if ( *(_BYTE *)(((unsigned __int64)&rename_data_ptr->has_set_by_quest >> 3) + 0x7FFF8000) != 0
            && (((unsigned __int8)rename_data_ptr + 4) & 7) >= *(_BYTE *)(((unsigned __int64)&rename_data_ptr->has_set_by_quest >> 3)
                                                                        + 0x7FFF8000) )
          {
            __asan_report_load1(&rename_data_ptr->has_set_by_quest);
          }
          if ( rename_data_ptr->has_set_by_quest )
          {
            common::milog::MiLogStream::create(
              &v28,
              &common::milog::MiLogDefault::default_log_obj_,
              1u,
              "./src/player/quest/player_quest_comp.cpp",
              "checkQuestAvatarRename",
              8676);
            v13 = common::milog::MiLogStream::operator<<<char [45],(char *[45])0>(
                    &v28,
                    (const char (*)[45])"wanderer name has already set by quest, uid:");
            if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
              __asan_report_load8(&this->player_);
            val = Player::getUid(this->player_);
            common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v13, &val);
            common::milog::MiLogStream::~MiLogStream(&v28);
            v8 = -1;
          }
          else
          {
LABEL_44:
            if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
              __asan_report_load8(&this->player_);
            v14 = Player::getAvatarComp(this->player_);
            if ( !PlayerAvatarComp::isIpValidAvatarName(v14, *(_DWORD *)(v3 + 48), (const std::string *)(v3 + 96)) )
            {
              common::milog::MiLogStream::create(
                &v28,
                &common::milog::MiLogDefault::default_log_obj_,
                1u,
                "./src/player/quest/player_quest_comp.cpp",
                "checkQuestAvatarRename",
                8682);
              v15 = common::milog::MiLogStream::operator<<<char [45],(char *[45])0>(
                      &v28,
                      (const char (*)[45])"avatar name is in IP black list, avatar_id: ");
              v16 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                      v15,
                      (const unsigned int *)(v3 + 48));
              v17 = common::milog::MiLogStream::operator<<<char [9],(char *[9])0>(v16, (const char (*)[9])", name: ");
              common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v17, (const std::string *)(v3 + 96));
              common::milog::MiLogStream::~MiLogStream(&v28);
              v8 = 177;
            }
            else
            {
              v8 = 0;
            }
          }
        }
        else
        {
          common::milog::MiLogStream::create(
            &v28,
            &common::milog::MiLogDefault::default_log_obj_,
            3u,
            "./src/player/quest/player_quest_comp.cpp",
            "checkQuestAvatarRename",
            8668);
          v11 = common::milog::MiLogStream::operator<<<char [46],(char *[46])0>(
                  &v28,
                  (const char (*)[46])"wanderer quest state not right, quest state: ");
          common::milog::MiLogStream::operator<<<data::QuestState,(data::QuestState*)0>(
            v11,
            (const data::QuestState *)(v3 + 64));
          common::milog::MiLogStream::~MiLogStream(&v28);
          v8 = -1;
        }
      }
    }
    else
    {
      common::milog::MiLogStream::create(
        &v28,
        &common::milog::MiLogDefault::default_log_obj_,
        4u,
        "./src/player/quest/player_quest_comp.cpp",
        "checkQuestAvatarRename",
        8689);
      v18 = common::milog::MiLogStream::operator<<<char [22],(char *[22])0>(
              &v28,
              (const char (*)[22])"unknown rename type: ");
      if ( *(_BYTE *)(((unsigned __int64)&rename_config_ptr->type >> 3) + 0x7FFF8000) != 0
        && (char)((((_BYTE)rename_config_ptr + 12) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&rename_config_ptr->type >> 3)
                                                                         + 0x7FFF8000) )
      {
        __asan_report_load4(&rename_config_ptr->type);
      }
      v24 = (char *)data::enumValToStr(rename_config_ptr->type);
      common::milog::MiLogStream::operator<<<char const*,(char const**)0>(v18, (const char *const *)&v24);
      common::milog::MiLogStream::~MiLogStream(&v28);
      v8 = -1;
    }
    std::string::~string((void *)(v3 + 96));
  }
  else
  {
    common::milog::MiLogStream::create(
      &v28,
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/player/quest/player_quest_comp.cpp",
      "checkQuestAvatarRename",
      8647);
    v7 = common::milog::MiLogStream::operator<<<char [39],(char *[39])0>(
           &v28,
           (const char (*)[39])"cannot find rename config, rename_id: ");
    common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v7, (const unsigned int *)(v3 + 80));
    common::milog::MiLogStream::~MiLogStream(&v28);
    v8 = -1;
  }
  result = v8;
  if ( v29 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8008) = 0;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8010) = 0;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8010) = -168430091;
  }
  return result;
};
