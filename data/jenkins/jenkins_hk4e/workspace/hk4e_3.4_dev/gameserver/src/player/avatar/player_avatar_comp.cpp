// File: /data/jenkins/jenkins_hk4e/workspace/hk4e_3.4_dev/gameserver/src/player/avatar/player_avatar_comp.cpp

// Line 74: range 0000000017163BEA-0000000017163C5D
int32_t __cdecl AvatarTeamEntity::initAbility(AvatarTeamEntity *const this, Scene *scene)
{
  ScenePtr p_scene_ptr; // [rsp+10h] [rbp-20h] BYREF

  toThisPtr<Scene>((Scene *)&p_scene_ptr);
  AbilityComp::init(&this->ability_comp_, &p_scene_ptr);
  std::shared_ptr<Scene>::~shared_ptr(&p_scene_ptr);
  return 0;
};

// Line 83: range 0000000017163C5E-0000000017163D9E
int32_t __cdecl AvatarTeamEntity::toClient(AvatarTeamEntity *const this, proto::TeamEnterSceneInfo *enter_info)
{
  common::milog::MiLogStream *v2; // rdx
  proto::AbilityControlBlock *v4; // rax
  proto::AbilitySyncStateInfo *ability_info; // [rsp+18h] [rbp-38h]
  common::milog::MiLogStream v6; // [rsp+20h] [rbp-30h] BYREF

  if ( *(_BYTE *)(((unsigned __int64)&this->baseclass_0[256] >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->baseclass_0[256] >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4(&this->baseclass_0[256]);
  }
  proto::TeamEnterSceneInfo::set_team_entity_id(enter_info, *(_DWORD *)&this->baseclass_0[256]);
  ability_info = proto::TeamEnterSceneInfo::mutable_team_ability_info(enter_info);
  if ( AbilityComp::toClient(&this->ability_comp_, ability_info) )
  {
    common::milog::MiLogStream::create(
      &v6,
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/player/avatar/player_avatar_comp.cpp",
      "toClient",
      88);
    v2 = common::milog::MiLogStream::operator<<<char [23],(char *[23])0>(
           &v6,
           (const char (*)[23])"ability toClient fails");
    common::milog::MiLogStream::operator<<<AvatarTeamEntity,(AvatarTeamEntity*)0>(v2, this);
    common::milog::MiLogStream::~MiLogStream(&v6);
    return -1;
  }
  else
  {
    v4 = proto::TeamEnterSceneInfo::mutable_ability_control_block(enter_info);
    AbilityComp::getProtoAbilityControlBlock(&this->ability_comp_, v4);
    return 0;
  }
};

// Line 96: range 0000000017163DA0-00000000171640A2
int32_t __cdecl AvatarTeamEntity::toClient(const AvatarTeamEntity *const this, proto::TeamEntityInfo *info)
{
  unsigned __int64 v2; // rbx
  __int64 v3; // rax
  unsigned __int64 v4; // r12
  common::milog::MiLogStream *v5; // rdx
  int32_t v6; // r14d
  std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v7; // r14
  uint32_t PlayerUid; // eax
  uint32_t PeerId; // edx
  common::milog::MiLogStream *v10; // rdx
  int32_t result; // eax
  proto::AbilitySyncStateInfo *ability_info; // [rsp+18h] [rbp-98h]
  common::milog::MiLogStream v13; // [rsp+20h] [rbp-90h] BYREF
  char v14[112]; // [rsp+40h] [rbp-70h] BYREF

  v2 = (unsigned __int64)v14;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_0(64LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "1 32 16 12 scene_ptr:98";
  *(_QWORD *)(v2 + 16) = AvatarTeamEntity::toClient;
  v4 = v2 >> 3;
  *(_DWORD *)(v4 + 2147450880) = -235802127;
  *(_DWORD *)(v4 + 2147450884) = -202178560;
  if ( *(_BYTE *)(((unsigned __int64)&this->baseclass_0[256] >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->baseclass_0[256] >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4(&this->baseclass_0[256]);
  }
  proto::TeamEntityInfo::set_team_entity_id(info, *(_DWORD *)&this->baseclass_0[256]);
  Entity::getScene((const Entity *const)(v2 + 32));
  if ( std::operator==<Scene>(0LL, (const std::shared_ptr<Scene> *)(v2 + 32)) )
  {
    common::milog::MiLogStream::create(
      &v13,
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/player/avatar/player_avatar_comp.cpp",
      "toClient",
      101);
    v5 = common::milog::MiLogStream::operator<<<char [19],(char *[19])0>(&v13, (const char (*)[19])"scene_ptr is null!");
    common::milog::MiLogStream::operator<<<AvatarTeamEntity,(AvatarTeamEntity*)0>(v5, this);
    common::milog::MiLogStream::~MiLogStream(&v13);
    v6 = -1;
  }
  else
  {
    v7 = std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 32));
    PlayerUid = Entity::getPlayerUid((const Entity *const)this);
    PeerId = Scene::getPeerId(v7, PlayerUid);
    proto::TeamEntityInfo::set_authority_peer_id(info, PeerId);
    ability_info = proto::TeamEntityInfo::mutable_team_ability_info(info);
    if ( AbilityComp::toClient(&this->ability_comp_, ability_info) )
    {
      common::milog::MiLogStream::create(
        &v13,
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/player/avatar/player_avatar_comp.cpp",
        "toClient",
        108);
      v10 = common::milog::MiLogStream::operator<<<char [23],(char *[23])0>(
              &v13,
              (const char (*)[23])"ability toClient fails");
      common::milog::MiLogStream::operator<<<AvatarTeamEntity,(AvatarTeamEntity*)0>(v10, this);
      common::milog::MiLogStream::~MiLogStream(&v13);
      v6 = -1;
    }
    else
    {
      v6 = 0;
    }
  }
  std::shared_ptr<Scene>::~shared_ptr((std::shared_ptr<Scene> *const)(v2 + 32));
  result = v6;
  if ( v14 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 120: range 00000000171640A4-00000000171641B7
void __cdecl AvatarRenameAuditData::fromBin(AvatarRenameAuditData *const this, const proto::AvatarRenameAuditBin *bin)
{
  const std::string *v2; // rsi
  __int64 v3; // rdx
  char v4; // al
  uint32_t v5; // ecx
  char v6; // dl
  __int64 v7; // rdx
  __int64 v8; // rdx
  char v9; // al

  v2 = proto::AvatarRenameAuditBin::avatar_name[abi:cxx11](bin);
  std::string::operator=(this, v2);
  v3 = proto::AvatarRenameAuditBin::submit_time(bin);
  v4 = *(_BYTE *)(((unsigned __int64)&this->submit_time >> 3) + 0x7FFF8000);
  if ( v4 != 0 && v4 <= 3 )
  {
    LOBYTE(v2) = v4 != 0;
    __asan_report_store4(&this->submit_time, v2, v3);
  }
  this->submit_time = v3;
  v5 = proto::AvatarRenameAuditBin::audit_state(bin);
  v6 = *(_BYTE *)(((unsigned __int64)&this->audit_state >> 3) + 0x7FFF8000);
  LOBYTE(v2) = v6 != 0;
  v7 = (v6 != 0) & (unsigned __int8)((char)((((_BYTE)this + 36) & 7) + 3) >= v6);
  if ( (_BYTE)v7 )
    __asan_report_store4(&this->audit_state, v2, v7);
  this->audit_state = v5;
  v8 = proto::AvatarRenameAuditBin::source_type(bin);
  v9 = *(_BYTE *)(((unsigned __int64)&this->source_type >> 3) + 0x7FFF8000);
  if ( v9 != 0 && v9 <= 3 )
  {
    LOBYTE(v2) = v9 != 0;
    __asan_report_store4(&this->source_type, v2, v8);
  }
  this->source_type = v8;
};

// Line 128: range 00000000171641B8-00000000171642BD
void __cdecl AvatarRenameAuditData::toBin(const AvatarRenameAuditData *const this, proto::AvatarRenameAuditBin *bin)
{
  proto::AvatarRenameAuditBin::set_avatar_name(bin, &this->avatar_name);
  if ( *(_BYTE *)(((unsigned __int64)&this->submit_time >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->submit_time >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4(&this->submit_time);
  }
  proto::AvatarRenameAuditBin::set_submit_time(bin, this->submit_time);
  if ( *(_BYTE *)(((unsigned __int64)&this->audit_state >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)this + 36) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&this->audit_state >> 3) + 0x7FFF8000) )
  {
    __asan_report_load4(&this->audit_state);
  }
  proto::AvatarRenameAuditBin::set_audit_state(bin, this->audit_state);
  if ( *(_BYTE *)(((unsigned __int64)&this->source_type >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->source_type >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4(&this->source_type);
  }
  proto::AvatarRenameAuditBin::set_source_type(bin, this->source_type);
};

// Line 136: range 00000000171642BE-000000001716439A
void __cdecl AvatarRenameAuditData::clear(AvatarRenameAuditData *const this)
{
  __int64 v1; // rsi
  uint32_t *p_submit_time; // rdx
  __int64 v3; // rsi
  __int64 v4; // rdx

  std::string::clear(this);
  p_submit_time = &this->submit_time;
  if ( *(_BYTE *)(((unsigned __int64)p_submit_time >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)p_submit_time >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_store4(&this->submit_time, v1, p_submit_time);
  }
  this->submit_time = 0;
  v3 = (((_BYTE)this + 36) & 7u) + 3;
  v4 = (*(_BYTE *)(((unsigned __int64)&this->audit_state >> 3) + 0x7FFF8000) != 0) & (unsigned __int8)((char)((((_BYTE)this + 36) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&this->audit_state >> 3) + 0x7FFF8000));
  if ( (_BYTE)v4 )
    __asan_report_store4(&this->audit_state, v3, v4);
  this->audit_state = 0;
  if ( *(_BYTE *)(((unsigned __int64)&this->source_type >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->source_type >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_store4(&this->source_type, v3, &this->source_type);
  }
  this->source_type = 0;
};

// Line 144: range 000000001716439C-0000000017164487
void __cdecl AvatarRenameData::fromBin(AvatarRenameData *const this, const proto::AvatarRenameBin *bin)
{
  __int64 v2; // rdx
  char v3; // al
  bool has_set_by_quest; // cl
  char v5; // dl
  __int64 v6; // rdx
  const std::string *v7; // rax
  const proto::AvatarRenameAuditBin *v8; // rax
  const proto::AvatarRenameBin *bina; // [rsp+0h] [rbp-20h]

  bina = bin;
  v2 = proto::AvatarRenameBin::avatar_id(bin);
  v3 = *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000);
  if ( v3 != 0 && v3 <= 3 )
  {
    LOBYTE(bin) = v3 != 0;
    __asan_report_store4(this, bin, v2);
  }
  this->avatar_id = v2;
  has_set_by_quest = proto::AvatarRenameBin::has_set_by_quest(bina);
  v5 = *(_BYTE *)(((unsigned __int64)&this->has_set_by_quest >> 3) + 0x7FFF8000);
  LOBYTE(bin) = v5 != 0;
  v6 = (v5 != 0) & (unsigned __int8)((((unsigned __int8)this + 4) & 7) >= v5);
  if ( (_BYTE)v6 )
    __asan_report_store1(&this->has_set_by_quest, bin, v6);
  this->has_set_by_quest = has_set_by_quest;
  v7 = proto::AvatarRenameBin::cur_avatar_name[abi:cxx11](bina);
  std::string::operator=(&this->cur_avatar_name, v7);
  v8 = proto::AvatarRenameBin::rename_audit_data(bina);
  AvatarRenameAuditData::fromBin(&this->audit_data, v8);
};

// Line 152: range 0000000017164488-000000001716456A
void __cdecl AvatarRenameData::toBin(const AvatarRenameData *const this, proto::AvatarRenameBin *bin)
{
  proto::AvatarRenameAuditBin *v2; // rax

  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4(this);
  }
  proto::AvatarRenameBin::set_avatar_id(bin, this->avatar_id);
  if ( *(_BYTE *)(((unsigned __int64)&this->has_set_by_quest >> 3) + 0x7FFF8000) != 0
    && (((unsigned __int8)this + 4) & 7) >= *(_BYTE *)(((unsigned __int64)&this->has_set_by_quest >> 3) + 0x7FFF8000) )
  {
    __asan_report_load1(&this->has_set_by_quest);
  }
  proto::AvatarRenameBin::set_has_set_by_quest(bin, this->has_set_by_quest);
  proto::AvatarRenameBin::set_cur_avatar_name(bin, &this->cur_avatar_name);
  v2 = proto::AvatarRenameBin::mutable_rename_audit_data(bin);
  AvatarRenameAuditData::toBin(&this->audit_data, v2);
};

// Line 160: range 000000001716456C-00000000171646CE
// local variable allocation has failed, the output may be wrong!
void __cdecl AvatarRenameData::init(AvatarRenameData *const this, uint32_t target_avatar_id)
{
  common::milog::MiLogStream *v2; // rdx
  __int64 v3; // rsi
  __int64 v4; // rdx
  uint32_t target_avatar_ida; // [rsp+4h] [rbp-3Ch]
  common::milog::MiLogStream v6; // [rsp+10h] [rbp-30h] BYREF

  target_avatar_ida = target_avatar_id;
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4(this);
  }
  if ( this->avatar_id )
  {
    common::milog::MiLogStream::create(
      &v6,
      &common::milog::MiLogDefault::default_log_obj_,
      4u,
      "./src/player/avatar/player_avatar_comp.cpp",
      "init",
      163);
    v2 = common::milog::MiLogStream::operator<<<char [55],(char *[55])0>(
           &v6,
           (const char (*)[55])"AvatarRenameData alreadly been initialized, avatar_id:");
    *(_QWORD *)&target_avatar_id = this;
    common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v2, &this->avatar_id);
    common::milog::MiLogStream::~MiLogStream(&v6);
  }
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_store4(this, *(_QWORD *)&target_avatar_id, this);
  }
  this->avatar_id = target_avatar_ida;
  v3 = ((_BYTE)this + 4) & 7;
  v4 = (*(_BYTE *)(((unsigned __int64)&this->has_set_by_quest >> 3) + 0x7FFF8000) != 0) & (unsigned __int8)((char)v3 >= *(_BYTE *)(((unsigned __int64)&this->has_set_by_quest >> 3) + 0x7FFF8000));
  if ( (_BYTE)v4 )
    __asan_report_store1(&this->has_set_by_quest, v3, v4);
  this->has_set_by_quest = 0;
  std::string::clear(&this->cur_avatar_name);
  AvatarRenameAuditData::clear(&this->audit_data);
};

// Line 172: range 00000000171646D0-000000001716473C
void __cdecl AvatarRenameData::toClient(const AvatarRenameData *const this, proto::AvatarRenameInfo *rename_info)
{
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4(this);
  }
  proto::AvatarRenameInfo::set_avatar_id(rename_info, this->avatar_id);
  proto::AvatarRenameInfo::set_avatar_name(rename_info, &this->cur_avatar_name);
};

// Line 178: range 000000001716473E-000000001716487B
void __cdecl AvatarRenameData::setCurAuditAvatarName(
        AvatarRenameData *const this,
        const std::string *avatar_name,
        const proto::AvatarRenameAuditSourceType *type)
{
  __int64 Now; // rsi
  uint32_t *p_submit_time; // rdx
  __int64 v5; // rdx
  __int64 v6; // rsi

  AvatarRenameAuditData::clear(&this->audit_data);
  std::string::operator=(&this->audit_data, avatar_name);
  Now = (unsigned int)common::tools::TimeUtils::getNow();
  p_submit_time = &this->audit_data.submit_time;
  if ( *(_BYTE *)(((unsigned __int64)p_submit_time >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)p_submit_time >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_store4(&this->audit_data.submit_time, Now, p_submit_time);
  }
  this->audit_data.submit_time = Now;
  v5 = (*(_BYTE *)(((unsigned __int64)&this->audit_data.audit_state >> 3) + 0x7FFF8000) != 0) & (unsigned __int8)((char)((((_BYTE)this + 76) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&this->audit_data.audit_state >> 3) + 0x7FFF8000));
  if ( (_BYTE)v5 )
    __asan_report_store4(&this->audit_data.audit_state, (((_BYTE)this + 76) & 7u) + 3, v5);
  this->audit_data.audit_state = 1;
  if ( *(_BYTE *)(((unsigned __int64)type >> 3) + 0x7FFF8000) != 0
    && (char)(((unsigned __int8)type & 7) + 3) >= *(_BYTE *)(((unsigned __int64)type >> 3) + 0x7FFF8000) )
  {
    __asan_report_load4(type);
  }
  v6 = *(unsigned int *)type;
  if ( *(_BYTE *)(((unsigned __int64)&this->audit_data.source_type >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->audit_data.source_type >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_store4(&this->audit_data.source_type, v6, &this->audit_data.source_type);
  }
  this->audit_data.source_type = v6;
};

// Line 195: range 000000001716487C-0000000017166699
int32_t __cdecl PlayerAvatarComp::fromBin(PlayerAvatarComp *const this, const proto::PlayerDataBin *player_data_bin)
{
  int32_t v2; // r14d
  unsigned __int64 v3; // r13
  __int64 v4; // rax
  _DWORD *v5; // r12
  common::milog::MiLogStream *v6; // rcx
  common::milog::MiLogStream *v7; // rcx
  google::protobuf::uint32 v8; // r15d
  uint32_t v9; // eax
  common::milog::MiLogStream *v10; // r14
  common::milog::MiLogStream *v11; // rax
  common::milog::MiLogStream *v12; // rcx
  int v13; // r15d
  unsigned __int64 v14; // rax
  unsigned __int64 v15; // rdx
  common::milog::MiLogStream *v16; // r14
  common::milog::MiLogStream *v17; // rax
  bool v18; // r15
  common::milog::MiLogStream *v19; // r14
  std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v20; // rax
  common::milog::MiLogStream *v21; // rax
  common::milog::MiLogStream *v22; // rcx
  std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v23; // rax
  uint64_t Guid; // rax
  google::protobuf::Map<unsigned int,proto::AvatarTeamBin>::const_iterator *p_for_end; // rsi
  const std::string *v26; // rax
  std::vector<long unsigned int> *AvatarVec; // rax
  uint64_t v28; // rax
  __int64 v29; // rdx
  char v30; // al
  common::milog::MiLogStream *v31; // rax
  Buff *v32; // rax
  common::milog::MiLogStream *v33; // rax
  Buff *v34; // rax
  std::shared_ptr<Buff> *v35; // r8
  common::milog::MiLogStream *v36; // rax
  char *v37; // rsi
  common::milog::MiLogStream *v38; // rcx
  common::milog::MiLogStream *v39; // rax
  Buff *v40; // rax
  common::milog::MiLogStream *v41; // rax
  Buff *v42; // rax
  std::shared_ptr<Buff> *v43; // r8
  common::milog::MiLogStream *v44; // rax
  uint64_t v45; // rax
  bool is_spring_auto_use; // cl
  char v47; // dl
  __int64 v48; // rdx
  __int64 v49; // rdx
  char v50; // al
  __int64 backgroud_avatar_recover_time; // rdx
  char v52; // al
  bool is_flyable; // cl
  char v54; // dl
  __int64 v55; // rdx
  bool is_transferable; // cl
  char v57; // dl
  __int64 v58; // rdx
  uint64_t avatar_guid; // rcx
  uint64_t v60; // rax
  google::protobuf::uint32 v61; // edi
  __int64 v62; // rsi
  __int64 v63; // rdx
  uint32_t server_buff_uid; // ecx
  char v65; // dl
  __int64 v66; // rdx
  __int64 v67; // rdx
  char v68; // al
  const proto::AvatarBin *v69; // rax
  const proto::AvatarSnapshotBin *v70; // r8
  std::pair<std::_Rb_tree_iterator<std::pair<long unsigned int const,proto::AvatarSnapshotBin> >,bool> v71; // rax
  common::milog::MiLogStream *v72; // rax
  common::milog::MiLogStream *v73; // rax
  common::milog::MiLogStream *v74; // rax
  common::milog::MiLogStream *v75; // r14
  common::milog::MiLogStream *v76; // rax
  common::milog::MiLogStream *v77; // rcx
  char *v78; // rsi
  AvatarRenameData *v79; // r8
  std::pair<std::_Rb_tree_iterator<std::pair<unsigned int const,AvatarRenameData> >,bool> v80; // rax
  common::milog::MiLogStream *v81; // rax
  common::milog::MiLogStream *v82; // rax
  common::milog::MiLogStream *v83; // rax
  common::milog::MiLogStream *v84; // r14
  common::milog::MiLogStream *v85; // rax
  common::milog::MiLogStream *v86; // rcx
  __int64 time_count; // rdx
  char v88; // al
  uint32_t limit_time; // ecx
  char v90; // dl
  __int64 v91; // rdx
  __int64 avatar_rename_time; // rdx
  char v93; // al
  int32_t result; // eax
  char __args_0[10]; // [rsp+2Eh] [rbp-2E2h] BYREF
  google::protobuf::RepeatedPtrField<proto::AvatarRenameBin>::const_iterator __for_begin_6; // [rsp+38h] [rbp-2D8h] BYREF
  google::protobuf::RepeatedField<long unsigned int>::const_iterator __for_begin_1; // [rsp+40h] [rbp-2D0h]
  google::protobuf::RepeatedField<long unsigned int>::const_iterator __for_begin_2; // [rsp+48h] [rbp-2C8h]
  google::protobuf::RepeatedField<unsigned int>::const_iterator __for_begin_3; // [rsp+50h] [rbp-2C0h]
  google::protobuf::RepeatedField<unsigned int>::const_iterator __for_begin_4; // [rsp+58h] [rbp-2B8h]
  google::protobuf::RepeatedField<unsigned int>::const_iterator __for_begin; // [rsp+60h] [rbp-2B0h]
  const proto::PlayerAvatarCompBin *proto_comp; // [rsp+68h] [rbp-2A8h]
  const google::protobuf::RepeatedPtrField<proto::AvatarBin> *proto_avatar_list; // [rsp+70h] [rbp-2A0h]
  uint64_t cur_avatar_guid; // [rsp+78h] [rbp-298h]
  const google::protobuf::RepeatedPtrField<proto::AvatarBin> *__for_range; // [rsp+80h] [rbp-290h]
  const google::protobuf::Map<unsigned int,proto::AvatarTeamBin> *team_map; // [rsp+88h] [rbp-288h]
  const google::protobuf::Map<unsigned int,proto::AvatarTeamBin> *__for_range_0; // [rsp+90h] [rbp-280h]
  const google::protobuf::RepeatedField<long unsigned int> *__for_range_2; // [rsp+98h] [rbp-278h]
  google::protobuf::RepeatedField<long unsigned int>::const_iterator __for_end_1; // [rsp+A0h] [rbp-270h]
  const google::protobuf::Map<unsigned int,proto::AvatarBuffBin> *__for_range_3; // [rsp+A8h] [rbp-268h]
  const google::protobuf::RepeatedPtrField<proto::AvatarBuffBin> *__for_range_4; // [rsp+B0h] [rbp-260h]
  const google::protobuf::RepeatedField<unsigned int> *__for_range_5; // [rsp+B8h] [rbp-258h]
  google::protobuf::RepeatedField<unsigned int>::const_iterator __for_end_2; // [rsp+C0h] [rbp-250h]
  const google::protobuf::RepeatedField<unsigned int> *__for_range_6; // [rsp+C8h] [rbp-248h]
  google::protobuf::RepeatedField<unsigned int>::const_iterator __for_end_3; // [rsp+D0h] [rbp-240h]
  const google::protobuf::RepeatedPtrField<proto::AvatarSnapshotBin> *__for_range_7; // [rsp+D8h] [rbp-238h]
  const google::protobuf::RepeatedField<unsigned int> *__for_range_8; // [rsp+E0h] [rbp-230h]
  google::protobuf::RepeatedField<unsigned int>::const_iterator __for_end_5; // [rsp+E8h] [rbp-228h]
  const google::protobuf::RepeatedPtrField<proto::AvatarRenameBin> *__for_range_9; // [rsp+F0h] [rbp-220h]
  const proto::AvatarRenameBin *rename_bin; // [rsp+F8h] [rbp-218h]
  const proto::AvatarSnapshotBin *snapshot_bin; // [rsp+100h] [rbp-210h]
  const proto::AvatarBuffBin *buff_bin; // [rsp+108h] [rbp-208h]
  const unsigned int *p_buff_id; // [rsp+110h] [rbp-200h]
  const unsigned int *p_team_id; // [rsp+118h] [rbp-1F8h]
  AvatarTeam *avatar_team; // [rsp+120h] [rbp-1F0h]
  const google::protobuf::RepeatedField<long unsigned int> *__for_range_1; // [rsp+128h] [rbp-1E8h]
  google::protobuf::RepeatedField<long unsigned int>::const_iterator __for_end_0; // [rsp+130h] [rbp-1E0h]
  const proto::AvatarBin *avatar_bin; // [rsp+138h] [rbp-1D8h]
  google::protobuf::Map<unsigned int,proto::AvatarTeamBin>::const_iterator __for_begin_0; // [rsp+140h] [rbp-1D0h] BYREF
  google::protobuf::Map<unsigned int,proto::AvatarTeamBin>::const_iterator __for_end; // [rsp+160h] [rbp-1B0h] BYREF
  common::milog::MiLogStream v132; // [rsp+180h] [rbp-190h] BYREF
  common::milog::MiLogStream v133; // [rsp+1A0h] [rbp-170h] BYREF
  char v134[336]; // [rsp+1C0h] [rbp-150h] BYREF

  v3 = (unsigned __int64)v134;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_3(288LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "5 48 4 18 backup_team_id:340 64 8 15 avatar_guid:242 96 16 14 avatar_ptr:216 128 16 12 buff_ptr:"
                        "289 160 88 15 rename_data:347";
  *(_QWORD *)(v3 + 16) = PlayerAvatarComp::fromBin;
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = -234556943;
  v5[536862722] = -218959360;
  v5[536862723] = -219021312;
  v5[536862724] = -219021312;
  v5[536862727] = -218103808;
  v5[536862728] = -202116109;
  if ( !proto::PlayerDataBin::has_avatar_bin(player_data_bin) )
  {
    common::milog::MiLogStream::create(
      &v133,
      &common::milog::MiLogDefault::default_log_obj_,
      1u,
      "./src/player/avatar/player_avatar_comp.cpp",
      "fromBin",
      198);
    v6 = common::milog::MiLogStream::operator<<<char [21],(char *[21])0>(
           &v133,
           (const char (*)[21])"avatar data is empty");
    if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
      __asan_report_load8(&this->player_);
    operator<<(v6, this->player_);
    common::milog::MiLogStream::~MiLogStream(&v133);
    v2 = 0;
    goto LABEL_132;
  }
  proto_comp = proto::PlayerDataBin::avatar_bin(player_data_bin);
  proto_avatar_list = proto::PlayerAvatarCompBin::avatar_list(proto_comp);
  if ( google::protobuf::RepeatedPtrField<proto::AvatarBin>::empty(proto_avatar_list) )
  {
    common::milog::MiLogStream::create(
      &v133,
      &common::milog::MiLogDefault::default_log_obj_,
      4u,
      "./src/player/avatar/player_avatar_comp.cpp",
      "fromBin",
      208);
    v7 = common::milog::MiLogStream::operator<<<char [27],(char *[27])0>(
           &v133,
           (const char (*)[27])"proto_avatar_list is empty");
    if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
      __asan_report_load8(&this->player_);
    operator<<(v7, this->player_);
    common::milog::MiLogStream::~MiLogStream(&v133);
    v2 = -1;
    goto LABEL_132;
  }
  cur_avatar_guid = proto::PlayerAvatarCompBin::cur_avatar_guid(proto_comp);
  __for_range = proto_avatar_list;
  __for_begin_6.it_ = google::protobuf::RepeatedPtrField<proto::AvatarBin>::begin(proto_avatar_list).it_;
  *(google::protobuf::RepeatedPtrField<proto::AvatarBin>::const_iterator *)(v3 + 64) = google::protobuf::RepeatedPtrField<proto::AvatarBin>::end(proto_avatar_list);
  while ( google::protobuf::internal::RepeatedPtrIterator<proto::AvatarBin const>::operator!=(
            (const google::protobuf::internal::RepeatedPtrIterator<const proto::AvatarBin> *const)&__for_begin_6,
            (const google::protobuf::internal::RepeatedPtrIterator<const proto::AvatarBin>::iterator *)(v3 + 64)) )
  {
    avatar_bin = google::protobuf::internal::RepeatedPtrIterator<proto::AvatarBin const>::operator*((const google::protobuf::internal::RepeatedPtrIterator<const proto::AvatarBin> *const)&__for_begin_6);
    proto::AvatarBin::guid(avatar_bin);
    v8 = proto::AvatarBin::avatar_id(avatar_bin);
    v9 = proto::AvatarBin::avatar_type(avatar_bin);
    PlayerAvatarComp::createAvatar((PlayerAvatarComp *const)(v3 + 96), (uint32_t)this, v9, v8);
    if ( std::operator==<Avatar>((const std::shared_ptr<Avatar> *)(v3 + 96), 0LL) )
    {
      common::milog::MiLogStream::create(
        &v132,
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/player/avatar/player_avatar_comp.cpp",
        "fromBin",
        219);
      v10 = common::milog::MiLogStream::operator<<<char [32],(char *[32])0>(
              &v132,
              (const char (*)[32])"createAvatar fails, avatar_bin:");
      google::protobuf::Message::ShortDebugString[abi:cxx11](
        (std::string *)&v133,
        &avatar_bin->google::protobuf::Message);
      v11 = common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v10, (const std::string *)&v133);
      v12 = common::milog::MiLogStream::operator<<<char [9],(char *[9])0>(v11, (const char (*)[9])" player:");
      if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
        __asan_report_load8(&this->player_);
LABEL_17:
      operator<<(v12, this->player_);
      std::string::~string(&v133);
      common::milog::MiLogStream::~MiLogStream(&v132);
      v2 = -1;
      v13 = 0;
      goto LABEL_33;
    }
    v14 = (unsigned __int64)std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 96));
    if ( *(_BYTE *)((v14 >> 3) + 0x7FFF8000) )
      v14 = __asan_report_load8(v14);
    v15 = *(_QWORD *)v14 + 440LL;
    if ( *(_BYTE *)((v15 >> 3) + 0x7FFF8000) )
      v14 = __asan_report_load8(*(_QWORD *)v14 + 440LL);
    if ( (*(unsigned int (__fastcall **)(unsigned __int64, const proto::AvatarBin *))v15)(v14, avatar_bin) )
    {
      common::milog::MiLogStream::create(
        &v132,
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/player/avatar/player_avatar_comp.cpp",
        "fromBin",
        224);
      v16 = common::milog::MiLogStream::operator<<<char [35],(char *[35])0>(
              &v132,
              (const char (*)[35])"avatar fromBin failed, avatar_bin:");
      google::protobuf::Message::ShortDebugString[abi:cxx11](
        (std::string *)&v133,
        &avatar_bin->google::protobuf::Message);
      v17 = common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v16, (const std::string *)&v133);
      v12 = common::milog::MiLogStream::operator<<<char [9],(char *[9])0>(v17, (const char (*)[9])" player:");
      if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
        __asan_report_load8(&this->player_);
      goto LABEL_17;
    }
    std::shared_ptr<Avatar>::shared_ptr(
      (std::shared_ptr<Avatar> *const)(v3 + 128),
      (const std::shared_ptr<Avatar> *)(v3 + 96));
    v18 = PlayerAvatarComp::emplaceAvatar(this, (AvatarPtr *)(v3 + 128)) != 0;
    std::shared_ptr<Avatar>::~shared_ptr((std::shared_ptr<Avatar> *const)(v3 + 128));
    if ( v18 )
    {
      common::milog::MiLogStream::create(
        &v133,
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/player/avatar/player_avatar_comp.cpp",
        "fromBin",
        229);
      v19 = common::milog::MiLogStream::operator<<<char [29],(char *[29])0>(
              &v133,
              (const char (*)[29])"emplaceAvatar fails, avatar:");
      v20 = std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::operator*((const std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 96));
      v21 = common::milog::MiLogStream::operator<<<Avatar,(Avatar*)0>(v19, v20);
      v22 = common::milog::MiLogStream::operator<<<char [9],(char *[9])0>(v21, (const char (*)[9])" player:");
      if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
        __asan_report_load8(&this->player_);
      operator<<(v22, this->player_);
      common::milog::MiLogStream::~MiLogStream(&v133);
      v2 = -1;
      v13 = 0;
    }
    else
    {
      v23 = std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 96));
      Guid = Avatar::getGuid(v23);
      if ( cur_avatar_guid == Guid )
        std::shared_ptr<Avatar>::operator=(&this->cur_avatar_ptr_, (const std::shared_ptr<Avatar> *)(v3 + 96));
      v13 = 1;
    }
LABEL_33:
    std::shared_ptr<Avatar>::~shared_ptr((std::shared_ptr<Avatar> *const)(v3 + 96));
    if ( v13 != 1 )
      goto LABEL_132;
    google::protobuf::internal::RepeatedPtrIterator<proto::AvatarBin const>::operator++((google::protobuf::internal::RepeatedPtrIterator<const proto::AvatarBin> *const)&__for_begin_6);
  }
  team_map = proto::PlayerAvatarCompBin::team_map(proto_comp);
  __for_range_0 = team_map;
  google::protobuf::Map<unsigned int,proto::AvatarTeamBin>::begin(&__for_begin_0, team_map);
  google::protobuf::Map<unsigned int,proto::AvatarTeamBin>::end(&__for_end, __for_range_0);
  while ( 1 )
  {
    p_for_end = &__for_end;
    if ( !google::protobuf::operator!=(&__for_begin_0, &__for_end) )
      break;
    p_team_id = (const unsigned int *)google::protobuf::Map<unsigned int,proto::AvatarTeamBin>::const_iterator::operator*(&__for_begin_0);
    avatar_team = std::map<unsigned int,AvatarTeam>::operator[](&this->avatar_team_map_, p_team_id);
    v26 = proto::AvatarTeamBin::team_name[abi:cxx11]((const proto::AvatarTeamBin *const)(p_team_id + 2));
    AvatarTeam::setTeamName(avatar_team, v26);
    __for_range_1 = proto::AvatarTeamBin::avatar_guid_list((const proto::AvatarTeamBin *const)(p_team_id + 2));
    __for_begin_1 = google::protobuf::RepeatedField<unsigned long>::begin(__for_range_1);
    __for_end_0 = google::protobuf::RepeatedField<unsigned long>::end(__for_range_1);
    while ( __for_begin_1 != __for_end_0 )
    {
      if ( *(_BYTE *)(((unsigned __int64)__for_begin_1 >> 3) + 0x7FFF8000) )
        __asan_report_load8(__for_begin_1);
      *(_QWORD *)(v3 + 64) = *__for_begin_1;
      AvatarVec = AvatarTeam::getAvatarVec(avatar_team);
      std::vector<unsigned long>::push_back(AvatarVec, (const std::vector<long unsigned int>::value_type *)(v3 + 64));
      ++__for_begin_1;
    }
    v28 = proto::AvatarTeamBin::last_cur_avatar_guid((const proto::AvatarTeamBin *const)(p_team_id + 2));
    AvatarTeam::setLastCurAvatarGuid(avatar_team, v28);
    google::protobuf::Map<unsigned int,proto::AvatarTeamBin>::const_iterator::operator++(&__for_begin_0);
  }
  v29 = proto::PlayerAvatarCompBin::cur_team_id(proto_comp);
  v30 = *(_BYTE *)(((unsigned __int64)&this->cur_avatar_team_id_ >> 3) + 0x7FFF8000);
  if ( v30 != 0 && v30 <= 3 )
  {
    LOBYTE(p_for_end) = v30 != 0;
    __asan_report_store4(&this->cur_avatar_team_id_, p_for_end, v29);
  }
  this->cur_avatar_team_id_ = v29;
  __for_range_2 = proto::PlayerAvatarCompBin::temp_avatar_guid_list(proto_comp);
  __for_begin_2 = google::protobuf::RepeatedField<unsigned long>::begin(__for_range_2);
  __for_end_1 = google::protobuf::RepeatedField<unsigned long>::end(__for_range_2);
  while ( __for_begin_2 != __for_end_1 )
  {
    if ( *(_BYTE *)(((unsigned __int64)__for_begin_2 >> 3) + 0x7FFF8000) )
      __asan_report_load8(__for_begin_2);
    *(_QWORD *)(v3 + 64) = *__for_begin_2;
    std::unordered_set<unsigned long>::insert(
      &this->temp_avatar_guid_set_,
      (const std::unordered_set<long unsigned int>::value_type *)(v3 + 64));
    ++__for_begin_2;
  }
  __args_0[1] = 0;
  __for_range_3 = proto::PlayerAvatarCompBin::avatar_team_buff_map(proto_comp);
  google::protobuf::Map<unsigned int,proto::AvatarBuffBin>::begin(
    (google::protobuf::Map<unsigned int,proto::AvatarBuffBin>::const_iterator *)&__for_begin_0,
    __for_range_3);
  google::protobuf::Map<unsigned int,proto::AvatarBuffBin>::end(
    (google::protobuf::Map<unsigned int,proto::AvatarBuffBin>::const_iterator *)&__for_end,
    __for_range_3);
  while ( google::protobuf::operator!=(
            (const google::protobuf::Map<unsigned int,proto::AvatarBuffBin>::const_iterator *)&__for_begin_0,
            (const google::protobuf::Map<unsigned int,proto::AvatarBuffBin>::const_iterator *)&__for_end) )
  {
    p_buff_id = (const unsigned int *)google::protobuf::Map<unsigned int,proto::AvatarBuffBin>::const_iterator::operator*((const google::protobuf::Map<unsigned int,proto::AvatarBuffBin>::const_iterator *const)&__for_begin_0);
    *(_WORD *)__args_0 = 257;
    common::tools::perf::make_shared<Buff,unsigned int const&,bool>(
      (const unsigned int *)(v3 + 128),
      (bool *)p_buff_id,
      (const unsigned int *)__args_0,
      (bool *)p_buff_id);
    if ( std::operator==<Buff>((const std::shared_ptr<Buff> *)(v3 + 128), 0LL) )
    {
      common::milog::MiLogStream::create(
        &v133,
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/player/avatar/player_avatar_comp.cpp",
        "fromBin",
        265);
      v31 = common::milog::MiLogStream::operator<<<char [27],(char *[27])0>(
              &v133,
              (const char (*)[27])"buff_ptr is null, buff_id:");
      common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v31, p_buff_id);
      common::milog::MiLogStream::~MiLogStream(&v133);
    }
    else
    {
      v32 = std::__shared_ptr_access<Buff,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Buff,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 128));
      if ( Buff::init(v32) )
      {
        common::milog::MiLogStream::create(
          &v133,
          &common::milog::MiLogDefault::default_log_obj_,
          3u,
          "./src/player/avatar/player_avatar_comp.cpp",
          "fromBin",
          270);
        v33 = common::milog::MiLogStream::operator<<<char [25],(char *[25])0>(
                &v133,
                (const char (*)[25])"buff init fail, buff_id:");
        common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v33, p_buff_id);
        common::milog::MiLogStream::~MiLogStream(&v133);
      }
      else
      {
        v34 = std::__shared_ptr_access<Buff,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Buff,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 128));
        if ( Buff::fromBin(v34, (const proto::AvatarBuffBin *)(p_buff_id + 2)) )
        {
          common::milog::MiLogStream::create(
            &v133,
            &common::milog::MiLogDefault::default_log_obj_,
            3u,
            "./src/player/avatar/player_avatar_comp.cpp",
            "fromBin",
            275);
          v36 = common::milog::MiLogStream::operator<<<char [24],(char *[24])0>(
                  &v133,
                  (const char (*)[24])"fromBin fails, buff_id:");
          common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v36, p_buff_id);
          common::milog::MiLogStream::~MiLogStream(&v133);
        }
        else
        {
          std::multimap<unsigned int,std::shared_ptr<Buff>>::emplace<unsigned int const&,std::shared_ptr<Buff>&>(
            &this->avatar_team_buff_mmap_,
            p_buff_id,
            (std::shared_ptr<Buff> *)(v3 + 128),
            (const unsigned int *)&this->avatar_team_buff_mmap_,
            v35);
        }
      }
    }
    std::shared_ptr<Buff>::~shared_ptr((std::shared_ptr<Buff> *const)(v3 + 128));
    google::protobuf::Map<unsigned int,proto::AvatarBuffBin>::const_iterator::operator++((google::protobuf::Map<unsigned int,proto::AvatarBuffBin>::const_iterator *const)&__for_begin_0);
  }
  __for_range_4 = proto::PlayerAvatarCompBin::avatar_team_buff_list(proto_comp);
  __for_begin_6.it_ = google::protobuf::RepeatedPtrField<proto::AvatarBuffBin>::begin(__for_range_4).it_;
  *(google::protobuf::RepeatedPtrField<proto::AvatarBuffBin>::const_iterator *)(v3 + 64) = google::protobuf::RepeatedPtrField<proto::AvatarBuffBin>::end(__for_range_4);
  while ( 1 )
  {
    v37 = (char *)(v3 + 64);
    if ( !google::protobuf::internal::RepeatedPtrIterator<proto::AvatarBuffBin const>::operator!=(
            (const google::protobuf::internal::RepeatedPtrIterator<const proto::AvatarBuffBin> *const)&__for_begin_6,
            (const google::protobuf::internal::RepeatedPtrIterator<const proto::AvatarBuffBin>::iterator *)(v3 + 64)) )
      break;
    buff_bin = google::protobuf::internal::RepeatedPtrIterator<proto::AvatarBuffBin const>::operator*((const google::protobuf::internal::RepeatedPtrIterator<const proto::AvatarBuffBin> *const)&__for_begin_6);
    if ( __args_0[1] )
    {
      common::milog::MiLogStream::create(
        &v133,
        &common::milog::MiLogDefault::default_log_obj_,
        4u,
        "./src/player/avatar/player_avatar_comp.cpp",
        "fromBin",
        285);
      v38 = common::milog::MiLogStream::operator<<<char [38],(char *[38])0>(&v133, (const char (*)[38])off_2603A1C0);
      if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
        __asan_report_load8(&this->player_);
      operator<<(v38, this->player_);
      common::milog::MiLogStream::~MiLogStream(&v133);
      v2 = -1;
      goto LABEL_132;
    }
    *(_DWORD *)(v3 + 48) = proto::AvatarBuffBin::buff_id(buff_bin);
    __args_0[0] = 1;
    common::tools::perf::make_shared<Buff,unsigned int &,bool>(
      (unsigned int *)(v3 + 128),
      (bool *)(v3 + 48),
      (unsigned int *)__args_0,
      (bool *)(v3 + 48));
    if ( std::operator==<Buff>((const std::shared_ptr<Buff> *)(v3 + 128), 0LL) )
    {
      common::milog::MiLogStream::create(
        &v133,
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/player/avatar/player_avatar_comp.cpp",
        "fromBin",
        292);
      v39 = common::milog::MiLogStream::operator<<<char [27],(char *[27])0>(
              &v133,
              (const char (*)[27])"buff_ptr is null, buff_id:");
      common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v39, (const unsigned int *)(v3 + 48));
      common::milog::MiLogStream::~MiLogStream(&v133);
    }
    else
    {
      v40 = std::__shared_ptr_access<Buff,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Buff,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 128));
      if ( Buff::init(v40) )
      {
        common::milog::MiLogStream::create(
          &v133,
          &common::milog::MiLogDefault::default_log_obj_,
          3u,
          "./src/player/avatar/player_avatar_comp.cpp",
          "fromBin",
          297);
        v41 = common::milog::MiLogStream::operator<<<char [25],(char *[25])0>(
                &v133,
                (const char (*)[25])"buff init fail, buff_id:");
        common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v41, (const unsigned int *)(v3 + 48));
        common::milog::MiLogStream::~MiLogStream(&v133);
      }
      else
      {
        v42 = std::__shared_ptr_access<Buff,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Buff,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 128));
        if ( Buff::fromBin(v42, buff_bin) )
        {
          common::milog::MiLogStream::create(
            &v133,
            &common::milog::MiLogDefault::default_log_obj_,
            3u,
            "./src/player/avatar/player_avatar_comp.cpp",
            "fromBin",
            302);
          v44 = common::milog::MiLogStream::operator<<<char [24],(char *[24])0>(
                  &v133,
                  (const char (*)[24])"fromBin fails, buff_id:");
          common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v44, (const unsigned int *)(v3 + 48));
          common::milog::MiLogStream::~MiLogStream(&v133);
        }
        else
        {
          std::multimap<unsigned int,std::shared_ptr<Buff>>::emplace<unsigned int &,std::shared_ptr<Buff>&>(
            &this->avatar_team_buff_mmap_,
            (unsigned int *)(v3 + 48),
            (std::shared_ptr<Buff> *)(v3 + 128),
            (unsigned int *)&this->avatar_team_buff_mmap_,
            v43);
        }
      }
    }
    std::shared_ptr<Buff>::~shared_ptr((std::shared_ptr<Buff> *const)(v3 + 128));
    google::protobuf::internal::RepeatedPtrIterator<proto::AvatarBuffBin const>::operator++((google::protobuf::internal::RepeatedPtrIterator<const proto::AvatarBuffBin> *const)&__for_begin_6);
  }
  v45 = proto::PlayerAvatarCompBin::last_change_avatar_time(proto_comp);
  if ( *(_BYTE *)(((unsigned __int64)&this->last_change_avatar_time_ms_ >> 3) + 0x7FFF8000) )
    v45 = __asan_report_store8(&this->last_change_avatar_time_ms_, v37);
  this->last_change_avatar_time_ms_ = v45;
  is_spring_auto_use = proto::PlayerAvatarCompBin::is_spring_auto_use(proto_comp);
  v47 = *(_BYTE *)(((unsigned __int64)&this->is_spring_auto_use_ >> 3) + 0x7FFF8000);
  LOBYTE(v37) = v47 != 0;
  v48 = (v47 != 0) & (unsigned __int8)((((unsigned __int8)this + 68) & 7) >= v47);
  if ( (_BYTE)v48 )
    __asan_report_store1(&this->is_spring_auto_use_, v37, v48);
  this->is_spring_auto_use_ = is_spring_auto_use;
  v49 = proto::PlayerAvatarCompBin::spring_auto_use_percent(proto_comp);
  v50 = *(_BYTE *)(((unsigned __int64)&this->spring_auto_use_percent_ >> 3) + 0x7FFF8000);
  if ( v50 != 0 && v50 <= 3 )
  {
    LOBYTE(v37) = v50 != 0;
    __asan_report_store4(&this->spring_auto_use_percent_, v37, v49);
  }
  this->spring_auto_use_percent_ = v49;
  backgroud_avatar_recover_time = proto::PlayerAvatarCompBin::last_backgroud_avatar_recover_time(proto_comp);
  v52 = *(_BYTE *)(((unsigned __int64)&this->last_backgroud_avatar_recover_time_ >> 3) + 0x7FFF8000);
  if ( v52 != 0 && v52 <= 3 )
  {
    LOBYTE(v37) = v52 != 0;
    __asan_report_store4(&this->last_backgroud_avatar_recover_time_, v37, backgroud_avatar_recover_time);
  }
  this->last_backgroud_avatar_recover_time_ = backgroud_avatar_recover_time;
  is_flyable = proto::PlayerAvatarCompBin::is_flyable(proto_comp);
  v54 = *(_BYTE *)(((unsigned __int64)&this->is_flyable_ >> 3) + 0x7FFF8000);
  LOBYTE(v37) = v54 != 0;
  v55 = (v54 != 0) & (unsigned __int8)((((unsigned __int8)this + 113) & 7) >= v54);
  if ( (_BYTE)v55 )
    __asan_report_store1(&this->is_flyable_, v37, v55);
  this->is_flyable_ = is_flyable;
  is_transferable = proto::PlayerAvatarCompBin::is_transferable(proto_comp);
  v57 = *(_BYTE *)(((unsigned __int64)&this->is_transferable_ >> 3) + 0x7FFF8000);
  LOBYTE(v37) = v57 != 0;
  v58 = (v57 != 0) & (unsigned __int8)((((unsigned __int8)this + 114) & 7) >= v57);
  if ( (_BYTE)v58 )
    __asan_report_store1(&this->is_transferable_, v37, v58);
  this->is_transferable_ = is_transferable;
  avatar_guid = proto::PlayerAvatarCompBin::last_avatar_guid(proto_comp);
  if ( *(_BYTE *)(((unsigned __int64)&this->last_avatar_guid_ >> 3) + 0x7FFF8000) )
    __asan_report_store8(&this->last_avatar_guid_, v37);
  this->last_avatar_guid_ = avatar_guid;
  v60 = proto::PlayerAvatarCompBin::choose_avatar_guid(proto_comp);
  if ( *(_BYTE *)(((unsigned __int64)&this->choose_avatar_guid_ >> 3) + 0x7FFF8000) )
    v60 = __asan_report_store8(&this->choose_avatar_guid_, v37);
  this->choose_avatar_guid_ = v60;
  v61 = proto::PlayerAvatarCompBin::die_type(proto_comp);
  v62 = (((_BYTE)this + 76) & 7u) + 3;
  v63 = (*(_BYTE *)(((unsigned __int64)&this->die_type_ >> 3) + 0x7FFF8000) != 0) & (unsigned __int8)((char)((((_BYTE)this + 76) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&this->die_type_ >> 3) + 0x7FFF8000));
  if ( (_BYTE)v63 )
  {
    v61 = (_DWORD)this + 76;
    __asan_report_store4(&this->die_type_, v62, v63);
  }
  this->die_type_ = v61;
  server_buff_uid = proto::PlayerAvatarCompBin::last_server_buff_uid(proto_comp);
  v65 = *(_BYTE *)(((unsigned __int64)&this->last_server_buff_uid_ >> 3) + 0x7FFF8000);
  LOBYTE(v62) = v65 != 0;
  v66 = (v65 != 0) & (unsigned __int8)((char)((((_BYTE)this + 20) & 7) + 3) >= v65);
  if ( (_BYTE)v66 )
    __asan_report_store4(&this->last_server_buff_uid_, v62, v66);
  this->last_server_buff_uid_ = server_buff_uid;
  v67 = proto::PlayerAvatarCompBin::total_expedition_num(proto_comp);
  v68 = *(_BYTE *)(((unsigned __int64)&this->total_expedition_num_ >> 3) + 0x7FFF8000);
  if ( v68 != 0 && v68 <= 3 )
  {
    LOBYTE(v62) = v68 != 0;
    __asan_report_store4(&this->total_expedition_num_, v62, v67);
  }
  this->total_expedition_num_ = v67;
  __for_range_5 = proto::PlayerAvatarCompBin::owned_flycloak_list(proto_comp);
  __for_begin_3 = google::protobuf::RepeatedField<unsigned int>::begin(__for_range_5);
  __for_end_2 = google::protobuf::RepeatedField<unsigned int>::end(__for_range_5);
  while ( __for_begin_3 != __for_end_2 )
  {
    if ( *(_BYTE *)(((unsigned __int64)__for_begin_3 >> 3) + 0x7FFF8000) != 0
      && (char)(((unsigned __int8)__for_begin_3 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)__for_begin_3 >> 3)
                                                                      + 0x7FFF8000) )
    {
      __asan_report_load4(__for_begin_3);
    }
    *(_DWORD *)(v3 + 48) = *__for_begin_3;
    std::set<unsigned int>::emplace<unsigned int const&>(
      &this->owned_flycloak_set_,
      (const unsigned int *)(v3 + 48),
      (const unsigned int *)&this->owned_flycloak_set_);
    ++__for_begin_3;
  }
  __for_range_6 = proto::PlayerAvatarCompBin::owned_costume_id_list(proto_comp);
  __for_begin_4 = google::protobuf::RepeatedField<unsigned int>::begin(__for_range_6);
  __for_end_3 = google::protobuf::RepeatedField<unsigned int>::end(__for_range_6);
  while ( __for_begin_4 != __for_end_3 )
  {
    if ( *(_BYTE *)(((unsigned __int64)__for_begin_4 >> 3) + 0x7FFF8000) != 0
      && (char)(((unsigned __int8)__for_begin_4 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)__for_begin_4 >> 3)
                                                                      + 0x7FFF8000) )
    {
      __asan_report_load4(__for_begin_4);
    }
    *(_DWORD *)(v3 + 48) = *__for_begin_4;
    std::set<unsigned int>::insert(&this->owned_costume_set_, (const std::set<unsigned int>::value_type *)(v3 + 48));
    ++__for_begin_4;
  }
  __for_range_7 = proto::PlayerAvatarCompBin::avatar_snapshot_list(proto_comp);
  *(google::protobuf::RepeatedPtrField<proto::AvatarSnapshotBin>::const_iterator *)&__args_0[2] = google::protobuf::RepeatedPtrField<proto::AvatarSnapshotBin>::begin(__for_range_7);
  __for_begin_6.it_ = google::protobuf::RepeatedPtrField<proto::AvatarSnapshotBin>::end(__for_range_7).it_;
  while ( google::protobuf::internal::RepeatedPtrIterator<proto::AvatarSnapshotBin const>::operator!=(
            (const google::protobuf::internal::RepeatedPtrIterator<const proto::AvatarSnapshotBin> *const)&__args_0[2],
            (const google::protobuf::internal::RepeatedPtrIterator<const proto::AvatarSnapshotBin>::iterator *)&__for_begin_6) )
  {
    snapshot_bin = google::protobuf::internal::RepeatedPtrIterator<proto::AvatarSnapshotBin const>::operator*((const google::protobuf::internal::RepeatedPtrIterator<const proto::AvatarSnapshotBin> *const)&__args_0[2]);
    v69 = proto::AvatarSnapshotBin::avatar_bin(snapshot_bin);
    *(_QWORD *)(v3 + 64) = proto::AvatarBin::guid(v69);
    v71 = std::map<unsigned long,proto::AvatarSnapshotBin>::emplace<unsigned long &,proto::AvatarSnapshotBin const&>(
            &this->avatar_snapshot_map_,
            (unsigned __int64 *)(v3 + 64),
            snapshot_bin,
            (unsigned __int64 *)&this->avatar_snapshot_map_,
            v70);
    if ( !v71.second )
    {
      common::milog::MiLogStream::create(
        &v132,
        &common::milog::MiLogDefault::default_log_obj_,
        4u,
        "./src/player/avatar/player_avatar_comp.cpp",
        "fromBin",
        335);
      v72 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
              &v132,
              (const char (*)[16])"duplicate guid:");
      v73 = common::milog::MiLogStream::operator<<<unsigned long,(unsigned long *)0>(
              v72,
              (const unsigned __int64 *)(v3 + 64));
      v74 = common::milog::MiLogStream::operator<<<char [25],(char *[25])0>(v73, (const char (*)[25])off_2603A260);
      v75 = common::milog::MiLogStream::operator<<<char [15],(char *[15])0>(v74, (const char (*)[15])" snapshot_bin:");
      google::protobuf::Message::ShortDebugString[abi:cxx11](
        (std::string *)&v133,
        &snapshot_bin->google::protobuf::Message);
      v76 = common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v75, (const std::string *)&v133);
      v77 = common::milog::MiLogStream::operator<<<char [9],(char *[9])0>(v76, (const char (*)[9])" player:");
      if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
        __asan_report_load8(&this->player_);
      operator<<(v77, this->player_);
      std::string::~string(&v133);
      common::milog::MiLogStream::~MiLogStream(&v132);
    }
    google::protobuf::internal::RepeatedPtrIterator<proto::AvatarSnapshotBin const>::operator++((google::protobuf::internal::RepeatedPtrIterator<const proto::AvatarSnapshotBin> *const)&__args_0[2]);
  }
  __for_range_8 = proto::PlayerAvatarCompBin::backup_team_id_order_list(proto_comp);
  __for_begin = google::protobuf::RepeatedField<unsigned int>::begin(__for_range_8);
  __for_end_5 = google::protobuf::RepeatedField<unsigned int>::end(__for_range_8);
  while ( __for_begin != __for_end_5 )
  {
    if ( *(_BYTE *)(((unsigned __int64)__for_begin >> 3) + 0x7FFF8000) != 0
      && (char)(((unsigned __int8)__for_begin & 7) + 3) >= *(_BYTE *)(((unsigned __int64)__for_begin >> 3) + 0x7FFF8000) )
    {
      __asan_report_load4(__for_begin);
    }
    *(_DWORD *)(v3 + 48) = *__for_begin;
    std::list<unsigned int>::emplace_back<unsigned int &>(
      &this->backup_team_id_order_list_,
      (unsigned int *)(v3 + 48),
      (unsigned int *)&this->backup_team_id_order_list_);
    ++__for_begin;
  }
  __for_range_9 = proto::PlayerAvatarCompBin::avatar_rename_list(proto_comp);
  __for_begin_6.it_ = google::protobuf::RepeatedPtrField<proto::AvatarRenameBin>::begin(__for_range_9).it_;
  *(google::protobuf::RepeatedPtrField<proto::AvatarRenameBin>::const_iterator *)(v3 + 64) = google::protobuf::RepeatedPtrField<proto::AvatarRenameBin>::end(__for_range_9);
  while ( 1 )
  {
    v78 = (char *)(v3 + 64);
    if ( !google::protobuf::internal::RepeatedPtrIterator<proto::AvatarRenameBin const>::operator!=(
            &__for_begin_6,
            (const google::protobuf::internal::RepeatedPtrIterator<const proto::AvatarRenameBin>::iterator *)(v3 + 64)) )
      break;
    rename_bin = google::protobuf::internal::RepeatedPtrIterator<proto::AvatarRenameBin const>::operator*(&__for_begin_6);
    AvatarRenameData::AvatarRenameData((AvatarRenameData *const)(v3 + 160));
    AvatarRenameData::fromBin((AvatarRenameData *const)(v3 + 160), rename_bin);
    v80 = std::map<unsigned int,AvatarRenameData>::emplace<unsigned int &,AvatarRenameData&>(
            &this->avatar_rename_data_map_,
            (unsigned int *)(v3 + 160),
            (AvatarRenameData *)(v3 + 160),
            (unsigned int *)&this->avatar_rename_data_map_,
            v79);
    if ( !v80.second )
    {
      common::milog::MiLogStream::create(
        &v132,
        &common::milog::MiLogDefault::default_log_obj_,
        4u,
        "./src/player/avatar/player_avatar_comp.cpp",
        "fromBin",
        351);
      v81 = common::milog::MiLogStream::operator<<<char [21],(char *[21])0>(
              &v132,
              (const char (*)[21])"duplicate avatar_id:");
      v82 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
              v81,
              (const unsigned int *)(v3 + 160));
      v83 = common::milog::MiLogStream::operator<<<char [28],(char *[28])0>(v82, (const char (*)[28])off_2603A320);
      v84 = common::milog::MiLogStream::operator<<<char [13],(char *[13])0>(v83, (const char (*)[13])" rename_bin:");
      google::protobuf::Message::ShortDebugString[abi:cxx11](
        (std::string *)&v133,
        &rename_bin->google::protobuf::Message);
      v85 = common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v84, (const std::string *)&v133);
      v86 = common::milog::MiLogStream::operator<<<char [9],(char *[9])0>(v85, (const char (*)[9])" player:");
      if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
        __asan_report_load8(&this->player_);
      operator<<(v86, this->player_);
      std::string::~string(&v133);
      common::milog::MiLogStream::~MiLogStream(&v132);
    }
    AvatarRenameData::~AvatarRenameData((AvatarRenameData *const)(v3 + 160));
    google::protobuf::internal::RepeatedPtrIterator<proto::AvatarRenameBin const>::operator++(&__for_begin_6);
  }
  time_count = proto::PlayerAvatarCompBin::avatar_rename_during_last_time_count(proto_comp);
  v88 = *(_BYTE *)(((unsigned __int64)&this->avatar_rename_during_last_time_count_ >> 3) + 0x7FFF8000);
  if ( v88 != 0 && v88 <= 3 )
  {
    LOBYTE(v78) = v88 != 0;
    __asan_report_store4(&this->avatar_rename_during_last_time_count_, v78, time_count);
  }
  this->avatar_rename_during_last_time_count_ = time_count;
  limit_time = proto::PlayerAvatarCompBin::avatar_rename_next_limit_time(proto_comp);
  v90 = *(_BYTE *)(((unsigned __int64)&this->avatar_rename_next_limit_time_ >> 3) + 0x7FFF8000);
  LOBYTE(v78) = v90 != 0;
  v91 = (v90 != 0) & (unsigned __int8)((char)((((_BYTE)this - 68) & 7) + 3) >= v90);
  if ( (_BYTE)v91 )
    __asan_report_store4(&this->avatar_rename_next_limit_time_, v78, v91);
  this->avatar_rename_next_limit_time_ = limit_time;
  avatar_rename_time = proto::PlayerAvatarCompBin::next_avatar_rename_time(proto_comp);
  v93 = *(_BYTE *)(((unsigned __int64)&this->next_avatar_rename_time_ >> 3) + 0x7FFF8000);
  if ( v93 != 0 && v93 <= 3 )
  {
    LOBYTE(v78) = v93 != 0;
    __asan_report_store4(&this->next_avatar_rename_time_, v78, avatar_rename_time);
  }
  this->next_avatar_rename_time_ = avatar_rename_time;
  v2 = 0;
LABEL_132:
  result = v2;
  if ( v134 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8010) = 0;
    *(_QWORD *)((v3 >> 3) + 0x7FFF801C) = 0LL;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8020) = -168430091;
  }
  return result;
};

// Line 363: range 000000001716669A-00000000171678AD
int32_t __cdecl PlayerAvatarComp::toBin(PlayerAvatarComp *const this, proto::PlayerDataBin *player_data_bin)
{
  common::milog::MiLogStream *v3; // rax
  unsigned __int64 v4; // rax
  unsigned __int64 v5; // rdx
  common::milog::MiLogStream *v6; // rax
  common::milog::MiLogStream *v7; // rcx
  std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v8; // rax
  uint64_t v9; // rax
  std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v10; // rax
  const Vector3 *Position; // rbx
  proto::VectorBin *v12; // rax
  std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v13; // rax
  const Vector3 *Rotation; // rbx
  proto::VectorBin *v15; // rax
  const std::string *v16; // rax
  uint64_t *v17; // rax
  uint64_t LastCurAvatarGuid; // rax
  unsigned __int64 *v19; // rax
  PlayerBasicComp *BasicComp; // rax
  std::__shared_ptr_access<Buff,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v21; // rax
  std::__shared_ptr_access<Buff,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v22; // rax
  std::__shared_ptr_access<Buff,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v24; // rax
  common::milog::MiLogStream *v25; // rax
  unsigned int *v26; // rax
  google::protobuf::uint32 *v27; // rdx
  unsigned int *v28; // rax
  google::protobuf::uint32 *v29; // rdx
  proto::AvatarSnapshotBin *v30; // rax
  std::_List_iterator<unsigned int>::reference v31; // rax
  google::protobuf::uint32 *v32; // rdx
  std::map<unsigned int,AvatarTeam>::iterator __for_begin_0; // [rsp+20h] [rbp-160h] BYREF
  std::map<unsigned int,AvatarTeam>::iterator __for_end_0; // [rsp+28h] [rbp-158h] BYREF
  std::map<long unsigned int,std::shared_ptr<Avatar>>::iterator __for_begin; // [rsp+30h] [rbp-150h] BYREF
  std::map<long unsigned int,std::shared_ptr<Avatar>>::iterator __for_end; // [rsp+38h] [rbp-148h] BYREF
  proto::PlayerAvatarCompBin *proto_comp; // [rsp+40h] [rbp-140h]
  std::map<long unsigned int,std::shared_ptr<Avatar>> *__for_range; // [rsp+48h] [rbp-138h]
  google::protobuf::Map<unsigned int,proto::AvatarTeamBin> *team_map; // [rsp+50h] [rbp-130h]
  std::map<unsigned int,AvatarTeam> *__for_range_0; // [rsp+58h] [rbp-128h]
  std::unordered_set<long unsigned int> *__for_range_2; // [rsp+60h] [rbp-120h]
  uint64_t player_time_ms; // [rsp+68h] [rbp-118h]
  std::multimap<unsigned int,std::shared_ptr<Buff>> *__for_range_3; // [rsp+70h] [rbp-110h]
  std::set<unsigned int> *__for_range_4; // [rsp+78h] [rbp-108h]
  std::set<unsigned int> *__for_range_5; // [rsp+80h] [rbp-100h]
  std::map<long unsigned int,proto::AvatarSnapshotBin> *__for_range_6; // [rsp+88h] [rbp-F8h]
  std::list<unsigned int> *__for_range_7; // [rsp+90h] [rbp-F0h]
  std::map<unsigned int,AvatarRenameData> *__for_range_8; // [rsp+98h] [rbp-E8h]
  const std::pair<unsigned int const,AvatarRenameData> *v49; // [rsp+A0h] [rbp-E0h]
  std::tuple_element<0,const std::pair<unsigned int const,AvatarRenameData> >::type *avatar_id; // [rsp+A8h] [rbp-D8h]
  std::tuple_element<1,const std::pair<unsigned int const,AvatarRenameData> >::type *rename_data; // [rsp+B0h] [rbp-D0h]
  proto::AvatarRenameBin *rename_bin; // [rsp+B8h] [rbp-C8h]
  const std::pair<long unsigned int const,proto::AvatarSnapshotBin> *v53; // [rsp+C0h] [rbp-C0h]
  std::tuple_element<0,const std::pair<long unsigned int const,proto::AvatarSnapshotBin> >::type *_; // [rsp+C8h] [rbp-B8h]
  std::tuple_element<1,const std::pair<long unsigned int const,proto::AvatarSnapshotBin> >::type *avatar_snapshot_bin; // [rsp+D0h] [rbp-B0h]
  const std::pair<unsigned int const,std::shared_ptr<Buff> > *v56; // [rsp+D8h] [rbp-A8h]
  std::tuple_element<0,const std::pair<unsigned int const,std::shared_ptr<Buff> > >::type *buff_id; // [rsp+E0h] [rbp-A0h]
  std::tuple_element<1,const std::pair<unsigned int const,std::shared_ptr<Buff> > >::type *buff_ptr; // [rsp+E8h] [rbp-98h]
  proto::AvatarBuffBin *buff_bin; // [rsp+F0h] [rbp-90h]
  unsigned __int64 avatar_guid; // [rsp+F8h] [rbp-88h]
  const std::pair<unsigned int const,AvatarTeam> *v61; // [rsp+100h] [rbp-80h]
  std::tuple_element<0,const std::pair<unsigned int const,AvatarTeam> >::type *team_id; // [rsp+108h] [rbp-78h]
  std::tuple_element<1,const std::pair<unsigned int const,AvatarTeam> >::type *team; // [rsp+110h] [rbp-70h]
  proto::AvatarTeamBin *avatar_team; // [rsp+118h] [rbp-68h]
  const std::vector<long unsigned int> *__for_range_1; // [rsp+120h] [rbp-60h]
  uint64_t guid_0; // [rsp+128h] [rbp-58h]
  const std::pair<long unsigned int const,std::shared_ptr<Avatar> > *v67; // [rsp+130h] [rbp-50h]
  std::tuple_element<0,const std::pair<long unsigned int const,std::shared_ptr<Avatar> > >::type *guid; // [rsp+138h] [rbp-48h]
  std::tuple_element<1,const std::pair<long unsigned int const,std::shared_ptr<Avatar> > >::type *avatar_ptr; // [rsp+140h] [rbp-40h]
  proto::AvatarBin *avatar_bin; // [rsp+148h] [rbp-38h]
  common::milog::MiLogStream v71; // [rsp+150h] [rbp-30h] BYREF

  if ( !PlayerAvatarComp::getAvatarCount(this) )
    return 0;
  proto_comp = proto::PlayerDataBin::mutable_avatar_bin(player_data_bin);
  __for_range = &this->avatar_map_;
  __for_begin._M_node = std::map<unsigned long,std::shared_ptr<Avatar>>::begin(&this->avatar_map_)._M_node;
  __for_end._M_node = std::map<unsigned long,std::shared_ptr<Avatar>>::end(&this->avatar_map_)._M_node;
  while ( std::operator!=(&__for_begin, &__for_end) )
  {
    v67 = std::_Rb_tree_iterator<std::pair<unsigned long const,std::shared_ptr<Avatar>>>::operator*(&__for_begin);
    guid = std::get<0ul,unsigned long const,std::shared_ptr<Avatar>>(v67);
    avatar_ptr = (std::tuple_element<1,const std::pair<long unsigned int const,std::shared_ptr<Avatar> > >::type *)std::get<1ul,unsigned long const,std::shared_ptr<Avatar>>(v67);
    if ( std::operator==<Avatar>(avatar_ptr, 0LL) )
    {
      common::milog::MiLogStream::create(
        &v71,
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/player/avatar/player_avatar_comp.cpp",
        "toBin",
        378);
      v3 = common::milog::MiLogStream::operator<<<char [29],(char *[29])0>(
             &v71,
             (const char (*)[29])"avatar_ptr is nullptr, guid:");
      common::milog::MiLogStream::operator<<<unsigned long,(unsigned long *)0>(v3, guid);
      common::milog::MiLogStream::~MiLogStream(&v71);
      return -1;
    }
    avatar_bin = proto::PlayerAvatarCompBin::add_avatar_list(proto_comp);
    v4 = (unsigned __int64)std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false> *const)avatar_ptr);
    if ( *(_BYTE *)((v4 >> 3) + 0x7FFF8000) )
      v4 = __asan_report_load8(v4);
    v5 = *(_QWORD *)v4 + 448LL;
    if ( *(_BYTE *)((v5 >> 3) + 0x7FFF8000) )
      v4 = __asan_report_load8(*(_QWORD *)v4 + 448LL);
    if ( (*(unsigned int (__fastcall **)(unsigned __int64, proto::AvatarBin *))v5)(v4, avatar_bin) )
    {
      common::milog::MiLogStream::create(
        &v71,
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/player/avatar/player_avatar_comp.cpp",
        "toBin",
        384);
      v6 = common::milog::MiLogStream::operator<<<char [27],(char *[27])0>(
             &v71,
             (const char (*)[27])"avatar toBin failed, guid:");
      common::milog::MiLogStream::operator<<<unsigned long,(unsigned long *)0>(v6, guid);
      common::milog::MiLogStream::~MiLogStream(&v71);
      return -1;
    }
    std::_Rb_tree_iterator<std::pair<unsigned long const,std::shared_ptr<Avatar>>>::operator++(&__for_begin);
  }
  if ( std::operator==<Avatar>(&this->cur_avatar_ptr_, 0LL) )
  {
    common::milog::MiLogStream::create(
      &v71,
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/player/avatar/player_avatar_comp.cpp",
      "toBin",
      392);
    v7 = common::milog::MiLogStream::operator<<<char [24],(char *[24])0>(
           &v71,
           (const char (*)[24])"cur_avatar_ptr_ is null");
    if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
      __asan_report_load8(&this->player_);
    operator<<(v7, this->player_);
    common::milog::MiLogStream::~MiLogStream(&v71);
  }
  else
  {
    v8 = std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false> *const)&this->cur_avatar_ptr_);
    v9 = Avatar::getGuid(v8);
    proto::PlayerAvatarCompBin::set_cur_avatar_guid(proto_comp, v9);
    v10 = std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false> *const)&this->cur_avatar_ptr_);
    Position = Entity::getPosition((const Entity *const)v10);
    v12 = proto::PlayerAvatarCompBin::mutable_pb_only_cur_pos(proto_comp);
    Vector3::toBin(Position, v12);
    v13 = std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false> *const)&this->cur_avatar_ptr_);
    Rotation = Entity::getRotation((const Entity *const)v13);
    v15 = proto::PlayerAvatarCompBin::mutable_pb_only_cur_rot(proto_comp);
    Vector3::toBin(Rotation, v15);
  }
  team_map = proto::PlayerAvatarCompBin::mutable_team_map(proto_comp);
  __for_range_0 = &this->avatar_team_map_;
  __for_begin_0._M_node = std::map<unsigned int,AvatarTeam>::begin(&this->avatar_team_map_)._M_node;
  __for_end_0._M_node = std::map<unsigned int,AvatarTeam>::end(__for_range_0)._M_node;
  while ( std::operator!=(&__for_begin_0, &__for_end_0) )
  {
    v61 = std::_Rb_tree_iterator<std::pair<unsigned int const,AvatarTeam>>::operator*(&__for_begin_0);
    team_id = std::get<0ul,unsigned int const,AvatarTeam>(v61);
    team = (std::tuple_element<1,const std::pair<unsigned int const,AvatarTeam> >::type *)std::get<1ul,unsigned int const,AvatarTeam>(v61);
    avatar_team = google::protobuf::Map<unsigned int,proto::AvatarTeamBin>::operator[](team_map, team_id);
    v16 = AvatarTeam::getTeamName[abi:cxx11](team);
    proto::AvatarTeamBin::set_team_name(avatar_team, v16);
    __for_range_1 = AvatarTeam::getAvatarVec(team);
    __for_begin._M_node = (std::_Rb_tree_iterator<std::pair<long unsigned int const,std::shared_ptr<Avatar> > >::_Base_ptr)std::vector<unsigned long>::begin(__for_range_1)._M_current;
    __for_end._M_node = (std::_Rb_tree_iterator<std::pair<long unsigned int const,std::shared_ptr<Avatar> > >::_Base_ptr)std::vector<unsigned long>::end(__for_range_1)._M_current;
    while ( __gnu_cxx::operator!=<unsigned long const*,std::vector<unsigned long>>(
              (const __gnu_cxx::__normal_iterator<long unsigned int const*,std::vector<long unsigned int> > *)&__for_begin,
              (const __gnu_cxx::__normal_iterator<long unsigned int const*,std::vector<long unsigned int> > *)&__for_end) )
    {
      v17 = (uint64_t *)__gnu_cxx::__normal_iterator<unsigned long const*,std::vector<unsigned long>>::operator*((const __gnu_cxx::__normal_iterator<long unsigned int const*,std::vector<long unsigned int> > *const)&__for_begin);
      if ( *(_BYTE *)(((unsigned __int64)v17 >> 3) + 0x7FFF8000) )
        v17 = (uint64_t *)__asan_report_load8(v17);
      guid_0 = *v17;
      proto::AvatarTeamBin::add_avatar_guid_list(avatar_team, guid_0);
      __gnu_cxx::__normal_iterator<unsigned long const*,std::vector<unsigned long>>::operator++((__gnu_cxx::__normal_iterator<long unsigned int const*,std::vector<long unsigned int> > *const)&__for_begin);
    }
    LastCurAvatarGuid = AvatarTeam::getLastCurAvatarGuid(team);
    proto::AvatarTeamBin::set_last_cur_avatar_guid(avatar_team, LastCurAvatarGuid);
    std::_Rb_tree_iterator<std::pair<unsigned int const,AvatarTeam>>::operator++(&__for_begin_0);
  }
  __for_range_2 = &this->temp_avatar_guid_set_;
  __for_begin._M_node = (std::_Rb_tree_iterator<std::pair<long unsigned int const,std::shared_ptr<Avatar> > >::_Base_ptr)std::unordered_set<unsigned long>::begin(&this->temp_avatar_guid_set_)._M_cur;
  __for_end._M_node = (std::_Rb_tree_iterator<std::pair<long unsigned int const,std::shared_ptr<Avatar> > >::_Base_ptr)std::unordered_set<unsigned long>::end(__for_range_2)._M_cur;
  while ( std::__detail::operator!=<unsigned long,false>(
            (const std::__detail::_Node_iterator_base<long unsigned int,false> *)&__for_begin,
            (const std::__detail::_Node_iterator_base<long unsigned int,false> *)&__for_end) )
  {
    v19 = (unsigned __int64 *)std::__detail::_Node_iterator<unsigned long,true,false>::operator*((const std::__detail::_Node_iterator<long unsigned int,true,false> *const)&__for_begin);
    if ( *(_BYTE *)(((unsigned __int64)v19 >> 3) + 0x7FFF8000) )
      v19 = (unsigned __int64 *)__asan_report_load8(v19);
    avatar_guid = *v19;
    proto::PlayerAvatarCompBin::add_temp_avatar_guid_list(proto_comp, avatar_guid);
    std::__detail::_Node_iterator<unsigned long,true,false>::operator++((std::__detail::_Node_iterator<long unsigned int,true,false> *const)&__for_begin);
  }
  if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
    __asan_report_load8(&this->player_);
  BasicComp = Player::getBasicComp(this->player_);
  player_time_ms = PlayerBasicComp::getPlayerTimeMs(BasicComp);
  __for_range_3 = &this->avatar_team_buff_mmap_;
  __for_begin._M_node = std::multimap<unsigned int,std::shared_ptr<Buff>>::begin(&this->avatar_team_buff_mmap_)._M_node;
  __for_end._M_node = std::multimap<unsigned int,std::shared_ptr<Buff>>::end(__for_range_3)._M_node;
  while ( std::operator!=(
            (const std::_Rb_tree_iterator<std::pair<unsigned int const,std::shared_ptr<Buff> > >::_Self *)&__for_begin,
            (const std::_Rb_tree_iterator<std::pair<unsigned int const,std::shared_ptr<Buff> > >::_Self *)&__for_end) )
  {
    v56 = std::_Rb_tree_iterator<std::pair<unsigned int const,std::shared_ptr<Buff>>>::operator*((const std::_Rb_tree_iterator<std::pair<unsigned int const,std::shared_ptr<Buff> > > *const)&__for_begin);
    buff_id = std::get<0ul,unsigned int const,std::shared_ptr<Buff>>(v56);
    buff_ptr = (std::tuple_element<1,const std::pair<unsigned int const,std::shared_ptr<Buff> > >::type *)std::get<1ul,unsigned int const,std::shared_ptr<Buff>>(v56);
    if ( !std::operator==<Buff>(buff_ptr, 0LL) )
    {
      v21 = std::__shared_ptr_access<Buff,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Buff,(__gnu_cxx::_Lock_policy)2,false,false> *const)buff_ptr);
      if ( Buff::getIsPersistent(v21) )
      {
        v22 = std::__shared_ptr_access<Buff,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Buff,(__gnu_cxx::_Lock_policy)2,false,false> *const)buff_ptr);
        if ( !Buff::isExpired(v22, player_time_ms) )
        {
          buff_bin = proto::PlayerAvatarCompBin::add_avatar_team_buff_list(proto_comp);
          v24 = std::__shared_ptr_access<Buff,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Buff,(__gnu_cxx::_Lock_policy)2,false,false> *const)buff_ptr);
          if ( Buff::toBin(v24, player_time_ms, buff_bin) )
          {
            common::milog::MiLogStream::create(
              &v71,
              &common::milog::MiLogDefault::default_log_obj_,
              3u,
              "./src/player/avatar/player_avatar_comp.cpp",
              "toBin",
              429);
            v25 = common::milog::MiLogStream::operator<<<char [22],(char *[22])0>(
                    &v71,
                    (const char (*)[22])"toBin fails, buff_id:");
            common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v25, buff_id);
            common::milog::MiLogStream::~MiLogStream(&v71);
            return -1;
          }
        }
      }
    }
    std::_Rb_tree_iterator<std::pair<unsigned int const,std::shared_ptr<Buff>>>::operator++((std::_Rb_tree_iterator<std::pair<unsigned int const,std::shared_ptr<Buff> > > *const)&__for_begin);
  }
  if ( *(_BYTE *)(((unsigned __int64)&this->cur_avatar_team_id_ >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->cur_avatar_team_id_ >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4(&this->cur_avatar_team_id_);
  }
  proto::PlayerAvatarCompBin::set_cur_team_id(proto_comp, this->cur_avatar_team_id_);
  if ( *(_BYTE *)(((unsigned __int64)&this->last_change_avatar_time_ms_ >> 3) + 0x7FFF8000) )
    __asan_report_load8(&this->last_change_avatar_time_ms_);
  proto::PlayerAvatarCompBin::set_last_change_avatar_time(proto_comp, this->last_change_avatar_time_ms_);
  if ( *(_BYTE *)(((unsigned __int64)&this->is_spring_auto_use_ >> 3) + 0x7FFF8000) != 0
    && (((unsigned __int8)this + 68) & 7) >= *(_BYTE *)(((unsigned __int64)&this->is_spring_auto_use_ >> 3) + 0x7FFF8000) )
  {
    __asan_report_load1(&this->is_spring_auto_use_);
  }
  proto::PlayerAvatarCompBin::set_is_spring_auto_use(proto_comp, this->is_spring_auto_use_);
  if ( *(_BYTE *)(((unsigned __int64)&this->spring_auto_use_percent_ >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->spring_auto_use_percent_ >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4(&this->spring_auto_use_percent_);
  }
  proto::PlayerAvatarCompBin::set_spring_auto_use_percent(proto_comp, this->spring_auto_use_percent_);
  if ( *(_BYTE *)(((unsigned __int64)&this->last_backgroud_avatar_recover_time_ >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->last_backgroud_avatar_recover_time_ >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4(&this->last_backgroud_avatar_recover_time_);
  }
  proto::PlayerAvatarCompBin::set_last_backgroud_avatar_recover_time(
    proto_comp,
    this->last_backgroud_avatar_recover_time_);
  if ( *(_BYTE *)(((unsigned __int64)&this->is_flyable_ >> 3) + 0x7FFF8000) != 0
    && (((unsigned __int8)this + 113) & 7) >= *(_BYTE *)(((unsigned __int64)&this->is_flyable_ >> 3) + 0x7FFF8000) )
  {
    __asan_report_load1(&this->is_flyable_);
  }
  proto::PlayerAvatarCompBin::set_is_flyable(proto_comp, this->is_flyable_);
  if ( *(_BYTE *)(((unsigned __int64)&this->is_transferable_ >> 3) + 0x7FFF8000) != 0
    && (((unsigned __int8)this + 114) & 7) >= *(_BYTE *)(((unsigned __int64)&this->is_transferable_ >> 3) + 0x7FFF8000) )
  {
    __asan_report_load1(&this->is_transferable_);
  }
  proto::PlayerAvatarCompBin::set_is_transferable(proto_comp, this->is_transferable_);
  if ( *(_BYTE *)(((unsigned __int64)&this->last_avatar_guid_ >> 3) + 0x7FFF8000) )
    __asan_report_load8(&this->last_avatar_guid_);
  proto::PlayerAvatarCompBin::set_last_avatar_guid(proto_comp, this->last_avatar_guid_);
  if ( *(_BYTE *)(((unsigned __int64)&this->choose_avatar_guid_ >> 3) + 0x7FFF8000) )
    __asan_report_load8(&this->choose_avatar_guid_);
  proto::PlayerAvatarCompBin::set_choose_avatar_guid(proto_comp, this->choose_avatar_guid_);
  if ( *(_BYTE *)(((unsigned __int64)&this->die_type_ >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)this + 76) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&this->die_type_ >> 3) + 0x7FFF8000) )
  {
    __asan_report_load4(&this->die_type_);
  }
  proto::PlayerAvatarCompBin::set_die_type(proto_comp, this->die_type_);
  if ( *(_BYTE *)(((unsigned __int64)&this->last_server_buff_uid_ >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)this + 20) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&this->last_server_buff_uid_ >> 3)
                                                        + 0x7FFF8000) )
  {
    __asan_report_load4(&this->last_server_buff_uid_);
  }
  proto::PlayerAvatarCompBin::set_last_server_buff_uid(proto_comp, this->last_server_buff_uid_);
  if ( *(_BYTE *)(((unsigned __int64)&this->total_expedition_num_ >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->total_expedition_num_ >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4(&this->total_expedition_num_);
  }
  proto::PlayerAvatarCompBin::set_total_expedition_num(proto_comp, this->total_expedition_num_);
  __for_range_4 = &this->owned_flycloak_set_;
  __for_begin._M_node = (std::_Rb_tree_iterator<std::pair<long unsigned int const,std::shared_ptr<Avatar> > >::_Base_ptr)std::set<unsigned int>::begin(&this->owned_flycloak_set_)._M_node;
  __for_end._M_node = (std::_Rb_tree_iterator<std::pair<long unsigned int const,std::shared_ptr<Avatar> > >::_Base_ptr)std::set<unsigned int>::end(__for_range_4)._M_node;
  while ( std::operator!=(
            (const std::_Rb_tree_const_iterator<unsigned int>::_Self *)&__for_begin,
            (const std::_Rb_tree_const_iterator<unsigned int>::_Self *)&__for_end) )
  {
    v26 = (unsigned int *)std::_Rb_tree_const_iterator<unsigned int>::operator*((const std::_Rb_tree_const_iterator<unsigned int> *const)&__for_begin);
    v27 = v26;
    if ( *(_BYTE *)(((unsigned __int64)v26 >> 3) + 0x7FFF8000) != 0
      && (char)(((unsigned __int8)v26 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)v26 >> 3) + 0x7FFF8000) )
    {
      __asan_report_load4(v26);
    }
    proto::PlayerAvatarCompBin::add_owned_flycloak_list(proto_comp, *v27);
    std::_Rb_tree_const_iterator<unsigned int>::operator++((std::_Rb_tree_const_iterator<unsigned int> *const)&__for_begin);
  }
  __for_range_5 = &this->owned_costume_set_;
  __for_begin._M_node = (std::_Rb_tree_iterator<std::pair<long unsigned int const,std::shared_ptr<Avatar> > >::_Base_ptr)std::set<unsigned int>::begin(&this->owned_costume_set_)._M_node;
  __for_end._M_node = (std::_Rb_tree_iterator<std::pair<long unsigned int const,std::shared_ptr<Avatar> > >::_Base_ptr)std::set<unsigned int>::end(__for_range_5)._M_node;
  while ( std::operator!=(
            (const std::_Rb_tree_const_iterator<unsigned int>::_Self *)&__for_begin,
            (const std::_Rb_tree_const_iterator<unsigned int>::_Self *)&__for_end) )
  {
    v28 = (unsigned int *)std::_Rb_tree_const_iterator<unsigned int>::operator*((const std::_Rb_tree_const_iterator<unsigned int> *const)&__for_begin);
    v29 = v28;
    if ( *(_BYTE *)(((unsigned __int64)v28 >> 3) + 0x7FFF8000) != 0
      && (char)(((unsigned __int8)v28 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)v28 >> 3) + 0x7FFF8000) )
    {
      __asan_report_load4(v28);
    }
    proto::PlayerAvatarCompBin::add_owned_costume_id_list(proto_comp, *v29);
    std::_Rb_tree_const_iterator<unsigned int>::operator++((std::_Rb_tree_const_iterator<unsigned int> *const)&__for_begin);
  }
  __for_range_6 = &this->avatar_snapshot_map_;
  __for_begin._M_node = std::map<unsigned long,proto::AvatarSnapshotBin>::begin(&this->avatar_snapshot_map_)._M_node;
  __for_end._M_node = std::map<unsigned long,proto::AvatarSnapshotBin>::end(__for_range_6)._M_node;
  while ( std::operator!=(
            (const std::_Rb_tree_iterator<std::pair<long unsigned int const,proto::AvatarSnapshotBin> >::_Self *)&__for_begin,
            (const std::_Rb_tree_iterator<std::pair<long unsigned int const,proto::AvatarSnapshotBin> >::_Self *)&__for_end) )
  {
    v53 = std::_Rb_tree_iterator<std::pair<unsigned long const,proto::AvatarSnapshotBin>>::operator*((const std::_Rb_tree_iterator<std::pair<long unsigned int const,proto::AvatarSnapshotBin> > *const)&__for_begin);
    _ = std::get<0ul,unsigned long const,proto::AvatarSnapshotBin>(v53);
    avatar_snapshot_bin = (std::tuple_element<1,const std::pair<long unsigned int const,proto::AvatarSnapshotBin> >::type *)std::get<1ul,unsigned long const,proto::AvatarSnapshotBin>(v53);
    v30 = proto::PlayerAvatarCompBin::add_avatar_snapshot_list(proto_comp);
    proto::AvatarSnapshotBin::CopyFrom(v30, avatar_snapshot_bin);
    std::_Rb_tree_iterator<std::pair<unsigned long const,proto::AvatarSnapshotBin>>::operator++((std::_Rb_tree_iterator<std::pair<long unsigned int const,proto::AvatarSnapshotBin> > *const)&__for_begin);
  }
  __for_range_7 = &this->backup_team_id_order_list_;
  __for_begin._M_node = (std::_Rb_tree_iterator<std::pair<long unsigned int const,std::shared_ptr<Avatar> > >::_Base_ptr)std::list<unsigned int>::begin(&this->backup_team_id_order_list_)._M_node;
  __for_end._M_node = (std::_Rb_tree_iterator<std::pair<long unsigned int const,std::shared_ptr<Avatar> > >::_Base_ptr)std::list<unsigned int>::end(__for_range_7)._M_node;
  while ( std::operator!=(
            (const std::_List_iterator<unsigned int>::_Self *)&__for_begin,
            (const std::_List_iterator<unsigned int>::_Self *)&__for_end) )
  {
    v31 = std::_List_iterator<unsigned int>::operator*((const std::_List_iterator<unsigned int> *const)&__for_begin);
    v32 = v31;
    if ( *(_BYTE *)(((unsigned __int64)v31 >> 3) + 0x7FFF8000) != 0
      && (char)(((unsigned __int8)v31 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)v31 >> 3) + 0x7FFF8000) )
    {
      __asan_report_load4(v31);
    }
    proto::PlayerAvatarCompBin::add_backup_team_id_order_list(proto_comp, *v32);
    std::_List_iterator<unsigned int>::operator++((std::_List_iterator<unsigned int> *const)&__for_begin);
  }
  __for_range_8 = &this->avatar_rename_data_map_;
  __for_begin._M_node = std::map<unsigned int,AvatarRenameData>::begin(&this->avatar_rename_data_map_)._M_node;
  __for_end._M_node = std::map<unsigned int,AvatarRenameData>::end(__for_range_8)._M_node;
  while ( std::operator!=(
            (const std::_Rb_tree_iterator<std::pair<unsigned int const,AvatarRenameData> >::_Self *)&__for_begin,
            (const std::_Rb_tree_iterator<std::pair<unsigned int const,AvatarRenameData> >::_Self *)&__for_end) )
  {
    v49 = std::_Rb_tree_iterator<std::pair<unsigned int const,AvatarRenameData>>::operator*((const std::_Rb_tree_iterator<std::pair<unsigned int const,AvatarRenameData> > *const)&__for_begin);
    avatar_id = std::get<0ul,unsigned int const,AvatarRenameData>(v49);
    rename_data = (std::tuple_element<1,const std::pair<unsigned int const,AvatarRenameData> >::type *)std::get<1ul,unsigned int const,AvatarRenameData>(v49);
    rename_bin = proto::PlayerAvatarCompBin::add_avatar_rename_list(proto_comp);
    AvatarRenameData::toBin(rename_data, rename_bin);
    std::_Rb_tree_iterator<std::pair<unsigned int const,AvatarRenameData>>::operator++((std::_Rb_tree_iterator<std::pair<unsigned int const,AvatarRenameData> > *const)&__for_begin);
  }
  if ( *(_BYTE *)(((unsigned __int64)&this->avatar_rename_during_last_time_count_ >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->avatar_rename_during_last_time_count_ >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4(&this->avatar_rename_during_last_time_count_);
  }
  proto::PlayerAvatarCompBin::set_avatar_rename_during_last_time_count(
    proto_comp,
    this->avatar_rename_during_last_time_count_);
  if ( *(_BYTE *)(((unsigned __int64)&this->avatar_rename_next_limit_time_ >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)this - 68) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&this->avatar_rename_next_limit_time_ >> 3)
                                                        + 0x7FFF8000) )
  {
    __asan_report_load4(&this->avatar_rename_next_limit_time_);
  }
  proto::PlayerAvatarCompBin::set_avatar_rename_next_limit_time(proto_comp, this->avatar_rename_next_limit_time_);
  if ( *(_BYTE *)(((unsigned __int64)&this->next_avatar_rename_time_ >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->next_avatar_rename_time_ >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4(&this->next_avatar_rename_time_);
  }
  proto::PlayerAvatarCompBin::set_next_avatar_rename_time(proto_comp, this->next_avatar_rename_time_);
  return 0;
};

// Line 481: range 00000000171678AE-00000000171685A8
int32_t __cdecl PlayerAvatarComp::init(PlayerAvatarComp *const this)
{
  unsigned __int64 v1; // rbx
  __int64 v2; // rax
  _DWORD *v3; // r13
  int32_t result; // eax
  common::milog::MiLogStream *v5; // r12
  common::milog::MiLogStream *v6; // rax
  unsigned __int64 v7; // rax
  unsigned __int64 v8; // rdx
  common::milog::MiLogStream *v9; // rax
  AvatarTeam *v10; // rax
  std::vector<long unsigned int> *AvatarVec; // rax
  common::milog::MiLogStream *v12; // r14
  common::milog::MiLogStream *v13; // rax
  common::milog::MiLogStream *v14; // rax
  common::milog::MiLogStream *v15; // r14
  unsigned int *p_val; // rsi
  unsigned __int64 v17; // rax
  uint32_t v18; // ecx
  char v19; // al
  AvatarTeam *v20; // rax
  common::milog::MiLogStream *v21; // r14
  common::milog::MiLogStream *v22; // rax
  common::milog::MiLogStream *v23; // rax
  common::milog::MiLogStream *v24; // r14
  unsigned __int64 v25; // rax
  common::milog::MiLogStream *v26; // rax
  common::milog::MiLogStream *v27; // rax
  common::milog::MiLogStream *v28; // r14
  int v29; // r14d
  common::milog::MiLogStream *v30; // r12
  unsigned int val; // [rsp+1Ch] [rbp-F4h] BYREF
  std::map<long unsigned int,std::shared_ptr<Avatar>>::iterator __for_begin; // [rsp+20h] [rbp-F0h] BYREF
  std::map<long unsigned int,std::shared_ptr<Avatar>>::iterator __for_end; // [rsp+28h] [rbp-E8h] BYREF
  std::map<long unsigned int,std::shared_ptr<Avatar>> *__for_range; // [rsp+30h] [rbp-E0h]
  std::vector<long unsigned int> *cur_team_avatar_vec; // [rsp+38h] [rbp-D8h]
  std::vector<long unsigned int> *__for_range_0; // [rsp+40h] [rbp-D0h]
  const std::pair<long unsigned int const,std::shared_ptr<Avatar> > *v37; // [rsp+48h] [rbp-C8h]
  std::tuple_element<0,const std::pair<long unsigned int const,std::shared_ptr<Avatar> > >::type *guid; // [rsp+50h] [rbp-C0h]
  std::tuple_element<1,const std::pair<long unsigned int const,std::shared_ptr<Avatar> > >::type *avatar_ptr; // [rsp+58h] [rbp-B8h]
  common::milog::MiLogStream v40; // [rsp+60h] [rbp-B0h] BYREF
  char v41[144]; // [rsp+80h] [rbp-90h] BYREF

  v1 = (unsigned __int64)v41;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_1(96LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "2 32 8 8 guid:532 64 16 19 temp_avatar_ptr:534";
  *(_QWORD *)(v1 + 16) = PlayerAvatarComp::init;
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -218959360;
  v3[536862722] = -202178560;
  PlayerAvatarComp::initEventObservers(this);
  if ( PlayerAvatarComp::getAvatarCount(this) )
  {
    if ( *(_BYTE *)(((unsigned __int64)&this->choose_avatar_guid_ >> 3) + 0x7FFF8000) )
      __asan_report_load8(&this->choose_avatar_guid_);
    if ( this->choose_avatar_guid_ )
    {
      __for_range = &this->avatar_map_;
      __for_begin._M_node = std::map<unsigned long,std::shared_ptr<Avatar>>::begin(&this->avatar_map_)._M_node;
      __for_end._M_node = std::map<unsigned long,std::shared_ptr<Avatar>>::end(&this->avatar_map_)._M_node;
      while ( std::operator!=(&__for_begin, &__for_end) )
      {
        v37 = std::_Rb_tree_iterator<std::pair<unsigned long const,std::shared_ptr<Avatar>>>::operator*(&__for_begin);
        guid = std::get<0ul,unsigned long const,std::shared_ptr<Avatar>>(v37);
        avatar_ptr = (std::tuple_element<1,const std::pair<long unsigned int const,std::shared_ptr<Avatar> > >::type *)std::get<1ul,unsigned long const,std::shared_ptr<Avatar>>(v37);
        if ( std::operator==<Avatar>(avatar_ptr, 0LL) )
        {
          common::milog::MiLogStream::create(
            &v40,
            &common::milog::MiLogDefault::default_log_obj_,
            3u,
            "./src/player/avatar/player_avatar_comp.cpp",
            "init",
            501);
          v6 = common::milog::MiLogStream::operator<<<char [29],(char *[29])0>(
                 &v40,
                 (const char (*)[29])"avatar_ptr is nullptr, guid:");
          common::milog::MiLogStream::operator<<<unsigned long,(unsigned long *)0>(v6, guid);
          common::milog::MiLogStream::~MiLogStream(&v40);
          result = -1;
          goto LABEL_58;
        }
        v7 = (unsigned __int64)std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false> *const)avatar_ptr);
        if ( *(_BYTE *)((v7 >> 3) + 0x7FFF8000) )
          v7 = __asan_report_load8(v7);
        v8 = *(_QWORD *)v7 + 408LL;
        if ( *(_BYTE *)((v8 >> 3) + 0x7FFF8000) )
          v7 = __asan_report_load8(*(_QWORD *)v7 + 408LL);
        if ( (*(unsigned int (__fastcall **)(unsigned __int64, _QWORD))v8)(v7, 0LL) )
        {
          common::milog::MiLogStream::create(
            &v40,
            &common::milog::MiLogDefault::default_log_obj_,
            3u,
            "./src/player/avatar/player_avatar_comp.cpp",
            "init",
            506);
          v9 = common::milog::MiLogStream::operator<<<char [26],(char *[26])0>(
                 &v40,
                 (const char (*)[26])"avatar init failed, guid:");
          common::milog::MiLogStream::operator<<<unsigned long,(unsigned long *)0>(v9, guid);
          common::milog::MiLogStream::~MiLogStream(&v40);
          result = -1;
          goto LABEL_58;
        }
        std::_Rb_tree_iterator<std::pair<unsigned long const,std::shared_ptr<Avatar>>>::operator++(&__for_begin);
      }
      if ( std::map<unsigned int,AvatarTeam>::empty(&this->avatar_team_map_) )
      {
        v10 = std::map<unsigned int,AvatarTeam>::operator[](&this->avatar_team_map_, &PlayerAvatarComp::INIT_TEAM_ID);
        AvatarVec = AvatarTeam::getAvatarVec(v10);
        std::vector<unsigned long>::emplace_back<unsigned long &>(
          AvatarVec,
          &this->choose_avatar_guid_,
          (unsigned __int64 *)AvatarVec);
        common::milog::MiLogStream::create(
          &v40,
          &common::milog::MiLogDefault::default_log_obj_,
          3u,
          "./src/player/avatar/player_avatar_comp.cpp",
          "init",
          515);
        v12 = common::milog::MiLogStream::operator<<<char [35],(char *[35])0>(
                &v40,
                (const char (*)[35])"avatar_team_map empty player_uid: ");
        if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
          __asan_report_load8(&this->player_);
        val = Player::getUid(this->player_);
        common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v12, &val);
        common::milog::MiLogStream::~MiLogStream(&v40);
      }
      __for_end._M_node = std::map<unsigned int,AvatarTeam>::end(&this->avatar_team_map_)._M_node;
      __for_begin._M_node = std::map<unsigned int,AvatarTeam>::find(&this->avatar_team_map_, &this->cur_avatar_team_id_)._M_node;
      if ( std::operator==(
             (const std::_Rb_tree_iterator<std::pair<unsigned int const,AvatarTeam> >::_Self *)&__for_begin,
             (const std::_Rb_tree_iterator<std::pair<unsigned int const,AvatarTeam> >::_Self *)&__for_end) )
      {
        common::milog::MiLogStream::create(
          &v40,
          &common::milog::MiLogDefault::default_log_obj_,
          3u,
          "./src/player/avatar/player_avatar_comp.cpp",
          "init",
          519);
        v13 = common::milog::MiLogStream::operator<<<char [20],(char *[20])0>(
                &v40,
                (const char (*)[20])"cur_avatar_team_id:");
        v14 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v13, &this->cur_avatar_team_id_);
        v15 = common::milog::MiLogStream::operator<<<char [30],(char *[30])0>(
                v14,
                (const char (*)[30])" not in team_map player_uid: ");
        if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
          __asan_report_load8(&this->player_);
        val = Player::getUid(this->player_);
        p_val = &val;
        common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v15, &val);
        common::milog::MiLogStream::~MiLogStream(&v40);
        __for_end._M_node = std::map<unsigned int,AvatarTeam>::begin(&this->avatar_team_map_)._M_node;
        v17 = (unsigned __int64)std::_Rb_tree_iterator<std::pair<unsigned int const,AvatarTeam>>::operator->((const std::_Rb_tree_iterator<std::pair<unsigned int const,AvatarTeam> > *const)&__for_end);
        if ( *(_BYTE *)((v17 >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)((v17 >> 3) + 0x7FFF8000) <= 3 )
          v17 = __asan_report_load4(v17);
        v18 = *(_DWORD *)v17;
        v19 = *(_BYTE *)(((unsigned __int64)&this->cur_avatar_team_id_ >> 3) + 0x7FFF8000);
        if ( v19 != 0 && v19 <= 3 )
        {
          LOBYTE(p_val) = v19 != 0;
          __asan_report_store4(&this->cur_avatar_team_id_, p_val, &this->cur_avatar_team_id_);
        }
        this->cur_avatar_team_id_ = v18;
      }
      v20 = std::map<unsigned int,AvatarTeam>::operator[](&this->avatar_team_map_, &this->cur_avatar_team_id_);
      cur_team_avatar_vec = AvatarTeam::getAvatarVec(v20);
      if ( std::vector<unsigned long>::empty(cur_team_avatar_vec) )
      {
        std::vector<unsigned long>::emplace_back<unsigned long &>(
          cur_team_avatar_vec,
          &this->choose_avatar_guid_,
          &this->choose_avatar_guid_);
        common::milog::MiLogStream::create(
          &v40,
          &common::milog::MiLogDefault::default_log_obj_,
          3u,
          "./src/player/avatar/player_avatar_comp.cpp",
          "init",
          526);
        v21 = common::milog::MiLogStream::operator<<<char [42],(char *[42])0>(
                &v40,
                (const char (*)[42])"cur_avatar_team avatar empty player_uid: ");
        if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
          __asan_report_load8(&this->player_);
        val = Player::getUid(this->player_);
        v22 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v21, &val);
        v23 = common::milog::MiLogStream::operator<<<char [22],(char *[22])0>(
                v22,
                (const char (*)[22])" cur_avatar_team_id: ");
        common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v23, &this->cur_avatar_team_id_);
        common::milog::MiLogStream::~MiLogStream(&v40);
      }
      if ( !std::operator==<Avatar>(&this->cur_avatar_ptr_, 0LL) )
        goto LABEL_57;
      common::milog::MiLogStream::create(
        &v40,
        &common::milog::MiLogDefault::default_log_obj_,
        1u,
        "./src/player/avatar/player_avatar_comp.cpp",
        "init",
        531);
      v24 = common::milog::MiLogStream::operator<<<char [39],(char *[39])0>(
              &v40,
              (const char (*)[39])"cur_avatar_ptr is nullptr player_uid: ");
      if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
        __asan_report_load8(&this->player_);
      val = Player::getUid(this->player_);
      common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v24, &val);
      common::milog::MiLogStream::~MiLogStream(&v40);
      __for_range_0 = cur_team_avatar_vec;
      __for_begin._M_node = (std::_Rb_tree_iterator<std::pair<long unsigned int const,std::shared_ptr<Avatar> > >::_Base_ptr)std::vector<unsigned long>::begin(cur_team_avatar_vec)._M_current;
      __for_end._M_node = (std::_Rb_tree_iterator<std::pair<long unsigned int const,std::shared_ptr<Avatar> > >::_Base_ptr)std::vector<unsigned long>::end(__for_range_0)._M_current;
      while ( __gnu_cxx::operator!=<unsigned long *,std::vector<unsigned long>>(
                (const __gnu_cxx::__normal_iterator<long unsigned int*,std::vector<long unsigned int> > *)&__for_begin,
                (const __gnu_cxx::__normal_iterator<long unsigned int*,std::vector<long unsigned int> > *)&__for_end) )
      {
        v25 = (unsigned __int64)__gnu_cxx::__normal_iterator<unsigned long *,std::vector<unsigned long>>::operator*((const __gnu_cxx::__normal_iterator<long unsigned int*,std::vector<long unsigned int> > *const)&__for_begin);
        if ( *(_BYTE *)((v25 >> 3) + 0x7FFF8000) )
          v25 = __asan_report_load8(v25);
        *(_QWORD *)(v1 + 32) = *(_QWORD *)v25;
        PlayerAvatarComp::findAvatar((const PlayerAvatarComp *const)(v1 + 64), (uint64_t)this);
        if ( std::operator!=<Avatar>((const std::shared_ptr<Avatar> *)(v1 + 64), 0LL) )
        {
          std::shared_ptr<Avatar>::operator=(&this->cur_avatar_ptr_, (const std::shared_ptr<Avatar> *)(v1 + 64));
          common::milog::MiLogStream::create(
            &v40,
            &common::milog::MiLogDefault::default_log_obj_,
            2u,
            "./src/player/avatar/player_avatar_comp.cpp",
            "init",
            538);
          v26 = common::milog::MiLogStream::operator<<<char [22],(char *[22])0>(&v40, (const char (*)[22])off_2603A760);
          v27 = common::milog::MiLogStream::operator<<<unsigned long,(unsigned long *)0>(
                  v26,
                  (const unsigned __int64 *)(v1 + 32));
          v28 = common::milog::MiLogStream::operator<<<char [14],(char *[14])0>(
                  v27,
                  (const char (*)[14])" player_uid: ");
          if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
            __asan_report_load8(&this->player_);
          val = Player::getUid(this->player_);
          common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v28, &val);
          common::milog::MiLogStream::~MiLogStream(&v40);
          v29 = 0;
        }
        else
        {
          v29 = 1;
        }
        std::shared_ptr<Avatar>::~shared_ptr((std::shared_ptr<Avatar> *const)(v1 + 64));
        if ( v29 != 1 )
          break;
        __gnu_cxx::__normal_iterator<unsigned long *,std::vector<unsigned long>>::operator++((__gnu_cxx::__normal_iterator<long unsigned int*,std::vector<long unsigned int> > *const)&__for_begin);
      }
      if ( std::operator==<Avatar>(&this->cur_avatar_ptr_, 0LL) )
      {
        common::milog::MiLogStream::create(
          &v40,
          &common::milog::MiLogDefault::default_log_obj_,
          4u,
          "./src/player/avatar/player_avatar_comp.cpp",
          "init",
          544);
        v30 = common::milog::MiLogStream::operator<<<char [47],(char *[47])0>(
                &v40,
                (const char (*)[47])"cur_avatar_ptr is nullptr finally player_uid: ");
        if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
          __asan_report_load8(&this->player_);
        val = Player::getUid(this->player_);
        common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v30, &val);
        common::milog::MiLogStream::~MiLogStream(&v40);
        result = -1;
      }
      else
      {
LABEL_57:
        result = 0;
      }
    }
    else
    {
      common::milog::MiLogStream::create(
        &v40,
        &common::milog::MiLogDefault::default_log_obj_,
        4u,
        "./src/player/avatar/player_avatar_comp.cpp",
        "init",
        492);
      v5 = common::milog::MiLogStream::operator<<<char [36],(char *[36])0>(
             &v40,
             (const char (*)[36])"choose_avatar_guid = 0 player_uid: ");
      if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
        __asan_report_load8(&this->player_);
      val = Player::getUid(this->player_);
      common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v5, &val);
      common::milog::MiLogStream::~MiLogStream(&v40);
      result = -1;
    }
  }
  else
  {
    result = 0;
  }
LABEL_58:
  if ( v41 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_DWORD *)((v1 >> 3) + 0x7FFF8008) = 0;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v1 >> 3) + 0x7FFF8008) = -168430091;
  }
  return result;
};

// Line 554: range 00000000171685AA-0000000017168DFE
int32_t __cdecl PlayerAvatarComp::onLogin(PlayerAvatarComp *const this, bool is_new_player)
{
  unsigned __int64 v2; // r12
  __int64 v3; // rax
  unsigned __int64 v4; // r13
  unsigned int *v5; // rcx
  AvatarTeam *v6; // r8
  PlayerSocialComp *SocialComp; // rax
  const std::pair<long unsigned int const,std::shared_ptr<Avatar> > *v8; // rax
  unsigned __int64 v9; // rax
  unsigned __int64 v10; // rdx
  common::milog::MiLogStream *v12; // r14
  int32_t result; // eax
  std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v16; // rax
  __int64 v17; // rdx
  __int64 v18; // rdx
  std::map<long unsigned int,std::shared_ptr<Avatar>>::iterator __for_begin; // [rsp+18h] [rbp-128h] BYREF
  std::map<long unsigned int,std::shared_ptr<Avatar>>::iterator __for_end; // [rsp+20h] [rbp-120h] BYREF
  std::map<long unsigned int,std::shared_ptr<Avatar>> *__for_range; // [rsp+28h] [rbp-118h]
  std::tuple_element<0,std::pair<long unsigned int const,std::shared_ptr<Avatar> > >::type *guid; // [rsp+30h] [rbp-110h]
  std::tuple_element<1,std::pair<long unsigned int const,std::shared_ptr<Avatar> > >::type *avatar_ptr; // [rsp+38h] [rbp-108h]
  std::shared_ptr<Config> v24; // [rsp+40h] [rbp-100h] BYREF
  std::pair<long unsigned int const,std::shared_ptr<Avatar> > __in; // [rsp+50h] [rbp-F0h] BYREF
  common::milog::MiLogStream v26; // [rsp+70h] [rbp-D0h] BYREF
  AvatarTeam v27; // [rsp+90h] [rbp-B0h] BYREF
  char v28[112]; // [rsp+D0h] [rbp-70h] BYREF

  v2 = (unsigned __int64)v28;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_0(64LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "1 32 4 23 default_flycloak_id:590";
  *(_QWORD *)(v2 + 16) = PlayerAvatarComp::onLogin;
  v4 = v2 >> 3;
  *(_DWORD *)(v4 + 2147450880) = -235802127;
  *(_DWORD *)(v4 + 2147450884) = -202116348;
  for ( *(_DWORD *)(v2 + 32) = 1; *(_DWORD *)(v2 + 32) <= 4u; ++*(_DWORD *)(v2 + 32) )
  {
    if ( !common::tools::MiscUtils::isContains<std::map<unsigned int,AvatarTeam>,unsigned int>(
            &this->avatar_team_map_,
            (const unsigned int *)(v2 + 32)) )
    {
      memset(&v27, 0, sizeof(v27));
      AvatarTeam::AvatarTeam(&v27);
      std::map<unsigned int,AvatarTeam>::emplace<unsigned int &,AvatarTeam>(
        &this->avatar_team_map_,
        (unsigned int *)(v2 + 32),
        &v27,
        v5,
        v6);
      AvatarTeam::~AvatarTeam(&v27);
    }
  }
  PlayerAvatarComp::checkAndClearInvalidInformalAvatarOnLogin(this);
  if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
    __asan_report_load8(&this->player_);
  SocialComp = Player::getSocialComp(this->player_);
  PlayerSocialComp::checkRefreshLoginOnBirthday(SocialComp);
  __for_range = &this->avatar_map_;
  __for_begin._M_node = std::map<unsigned long,std::shared_ptr<Avatar>>::begin(&this->avatar_map_)._M_node;
  __for_end._M_node = std::map<unsigned long,std::shared_ptr<Avatar>>::end(&this->avatar_map_)._M_node;
  while ( std::operator!=(&__for_begin, &__for_end) )
  {
    v8 = std::_Rb_tree_iterator<std::pair<unsigned long const,std::shared_ptr<Avatar>>>::operator*(&__for_begin);
    std::pair<unsigned long const,std::shared_ptr<Avatar>>::pair(&__in, v8);
    guid = std::get<0ul,unsigned long const,std::shared_ptr<Avatar>>(&__in);
    avatar_ptr = std::get<1ul,unsigned long const,std::shared_ptr<Avatar>>(&__in);
    v9 = (unsigned __int64)std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false> *const)avatar_ptr);
    if ( *(_BYTE *)((v9 >> 3) + 0x7FFF8000) )
      v9 = __asan_report_load8(v9);
    v10 = *(_QWORD *)v9 + 424LL;
    if ( *(_BYTE *)((v10 >> 3) + 0x7FFF8000) )
      v9 = __asan_report_load8(*(_QWORD *)v9 + 424LL);
    (*(void (__fastcall **)(unsigned __int64))v10)(v9);
    std::pair<unsigned long const,std::shared_ptr<Avatar>>::~pair(&__in);
    std::_Rb_tree_iterator<std::pair<unsigned long const,std::shared_ptr<Avatar>>>::operator++(&__for_begin);
  }
  if ( !common::tools::MiTimer::isActive(&this->avatar_state_timer_)
    && PlayerUnixTimer::startS(
         &this->avatar_state_timer_,
         1u,
         1,
         "./src/player/avatar/player_avatar_comp.cpp",
         "onLogin",
         572) )
  {
    common::milog::MiLogStream::create(
      &v26,
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/player/avatar/player_avatar_comp.cpp",
      "onLogin",
      574);
    v12 = common::milog::MiLogStream::operator<<<char [38],(char *[38])0>(
            &v26,
            (const char (*)[38])"avatar_state_timer start failed, uid:");
    if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
      __asan_report_load8(&this->player_);
LABEL_41:
    *(_DWORD *)(v2 + 32) = Player::getUid(this->player_);
    common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v12, (const unsigned int *)(v2 + 32));
    common::milog::MiLogStream::~MiLogStream(&v26);
    result = -1;
    goto LABEL_49;
  }
  if ( !common::tools::MiTimer::isActive(&this->avatar_log_timer_)
    && PlayerUnixTimer::startS(
         &this->avatar_log_timer_,
         0xAu,
         1,
         "./src/player/avatar/player_avatar_comp.cpp",
         "onLogin",
         578) )
  {
    common::milog::MiLogStream::create(
      &v26,
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/player/avatar/player_avatar_comp.cpp",
      "onLogin",
      580);
    v12 = common::milog::MiLogStream::operator<<<char [38],(char *[38])0>(
            &v26,
            (const char (*)[38])"avatar_state_timer start failed, uid:");
    if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
      __asan_report_load8(&this->player_);
    goto LABEL_41;
  }
  if ( !common::tools::MiTimer::isActive(&this->buff_timer_)
    && PlayerTimer::startMS(&this->buff_timer_, 0xC8u, 1, "./src/player/avatar/player_avatar_comp.cpp", "onLogin", 584) )
  {
    common::milog::MiLogStream::create(
      &v26,
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/player/avatar/player_avatar_comp.cpp",
      "onLogin",
      586);
    v12 = common::milog::MiLogStream::operator<<<char [31],(char *[31])0>(
            &v26,
            (const char (*)[31])"buff_timer_ start failed, uid:");
    if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
      __asan_report_load8(&this->player_);
    goto LABEL_41;
  }
  ServiceBox::findService<GameserverService>();
  GameserverService::getConfig((GameserverService *const)&v24);
  v16 = std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false> *const)&v24);
  *(_DWORD *)(v2 + 32) = ConstValueExcelConfigMgr::getDefaultFlycloakId(&v16->design_config.txt_config_mgr.const_value_config_mgr);
  std::shared_ptr<Config>::~shared_ptr(&v24);
  if ( !common::tools::MiscUtils::isContains<std::set<unsigned int>,unsigned int>(
          &this->owned_flycloak_set_,
          (const unsigned int *)(v2 + 32)) )
    std::set<unsigned int>::emplace<unsigned int &>(
      &this->owned_flycloak_set_,
      (unsigned int *)(v2 + 32),
      (unsigned int *)(v2 + 32));
  PlayerAvatarComp::tryAddDefaultUnlockCostume(this);
  v17 = (*(_BYTE *)(((unsigned __int64)&this->client_report_move_speed_over_limit_count_ >> 3) + 0x7FFF8000) != 0) & (unsigned __int8)((char)((((_BYTE)this + 28) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&this->client_report_move_speed_over_limit_count_ >> 3) + 0x7FFF8000));
  if ( (_BYTE)v17 )
    __asan_report_store4(&this->client_report_move_speed_over_limit_count_, (((_BYTE)this + 28) & 7u) + 3, v17);
  this->client_report_move_speed_over_limit_count_ = 0;
  v18 = (*(_BYTE *)(((unsigned __int64)&this->client_sgv_anticheat_log_count_ >> 3) + 0x7FFF8000) != 0) & (unsigned __int8)((char)((((_BYTE)this + 100) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&this->client_sgv_anticheat_log_count_ >> 3) + 0x7FFF8000));
  if ( (_BYTE)v18 )
    __asan_report_store4(&this->client_sgv_anticheat_log_count_, (((_BYTE)this + 100) & 7u) + 3, v18);
  this->client_sgv_anticheat_log_count_ = 0;
  result = 0;
LABEL_49:
  if ( v28 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 603: range 0000000017168E00-0000000017169337
void __cdecl PlayerAvatarComp::initEventObservers(PlayerAvatarComp *const this)
{
  unsigned __int64 p_M_last; // r13
  __int64 v2; // rax
  _DWORD *v3; // r14
  PlayerEventComp *event_comp; // [rsp+68h] [rbp-108h]
  PlayerEventComp v5; // [rsp+70h] [rbp-100h] BYREF

  p_M_last = (unsigned __int64)&v5.event_center_.context_.pending_que_.c._M_impl._M_finish._M_last;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_1(96LL);
    if ( v2 )
      p_M_last = v2;
  }
  *(_QWORD *)p_M_last = 1102416563LL;
  *(_QWORD *)(p_M_last + 8) = "2 32 16 12 this_ptr:604 64 16 12 this_wtr:610";
  *(_QWORD *)(p_M_last + 16) = PlayerAvatarComp::initEventObservers;
  v3 = (_DWORD *)(p_M_last >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -219021312;
  v3[536862722] = -202178560;
  toThisPtr<PlayerAvatarComp>((PlayerAvatarComp *)(p_M_last + 32));
  if ( std::operator==<PlayerAvatarComp>(0LL, (const std::shared_ptr<PlayerAvatarComp> *)(p_M_last + 32)) )
  {
    common::milog::MiLogStream::create(
      (common::milog::MiLogStream *)&v5.event_center_.context_.pending_que_.c._M_impl._M_start._M_last,
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/player/avatar/player_avatar_comp.cpp",
      "initEventObservers",
      607);
    common::milog::MiLogStream::operator<<<char [48],(char *[48])0>(
      (common::milog::MiLogStream *const)&v5.event_center_.context_.pending_que_.c._M_impl._M_start._M_last,
      (const char (*)[48])"dynamic_pointer_cast to PlayerAvatarComp failed");
    common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)&v5.event_center_.context_.pending_que_.c._M_impl._M_start._M_last);
  }
  else
  {
    std::weak_ptr<PlayerAvatarComp>::weak_ptr<PlayerAvatarComp,void>(
      (std::weak_ptr<PlayerAvatarComp> *const)(p_M_last + 64),
      (const std::shared_ptr<PlayerAvatarComp> *)(p_M_last + 32));
    if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
      __asan_report_load8(&this->player_);
    event_comp = Player::getEventComp(this->player_);
    std::weak_ptr<PlayerAvatarComp>::weak_ptr(
      (std::weak_ptr<PlayerAvatarComp> *const)&v5.event_center_.context_.pending_que_.c._M_impl._M_start,
      (const std::weak_ptr<PlayerAvatarComp> *)(p_M_last + 64));
    PlayerEventComp::registerObserver<PlayerAvatarComp,WorldPlayerChangeEvent>(
      &v5,
      (std::weak_ptr<PlayerAvatarComp> *)event_comp,
      (void (*)(PlayerAvatarComp *, const WorldPlayerChangeEvent *))&v5.event_center_.context_.pending_que_.c._M_impl._M_start);
    std::weak_ptr<Observer>::~weak_ptr((std::weak_ptr<Observer> *const)&v5);
    std::weak_ptr<PlayerAvatarComp>::~weak_ptr((std::weak_ptr<PlayerAvatarComp> *const)&v5.event_center_.context_.pending_que_.c._M_impl._M_start);
    std::weak_ptr<PlayerAvatarComp>::weak_ptr(
      (std::weak_ptr<PlayerAvatarComp> *const)&v5.event_center_.context_.pending_que_.c._M_impl._M_start,
      (const std::weak_ptr<PlayerAvatarComp> *)(p_M_last + 64));
    PlayerEventComp::registerObserver<PlayerAvatarComp,FinishDungeonEvent>(
      (PlayerEventComp *const)&v5._M_weak_this._M_refcount,
      (std::weak_ptr<PlayerAvatarComp> *)event_comp,
      (void (*)(PlayerAvatarComp *, const FinishDungeonEvent *))&v5.event_center_.context_.pending_que_.c._M_impl._M_start);
    std::weak_ptr<Observer>::~weak_ptr((std::weak_ptr<Observer> *const)&v5._M_weak_this._M_refcount);
    std::weak_ptr<PlayerAvatarComp>::~weak_ptr((std::weak_ptr<PlayerAvatarComp> *const)&v5.event_center_.context_.pending_que_.c._M_impl._M_start);
    std::weak_ptr<PlayerAvatarComp>::weak_ptr(
      (std::weak_ptr<PlayerAvatarComp> *const)&v5.event_center_.context_.pending_que_.c._M_impl._M_start,
      (const std::weak_ptr<PlayerAvatarComp> *)(p_M_last + 64));
    PlayerEventComp::registerObserver<PlayerAvatarComp,UnlockTransPointEvent>(
      (PlayerEventComp *const)&v5.event_center_,
      (std::weak_ptr<PlayerAvatarComp> *)event_comp,
      (void (*)(PlayerAvatarComp *, const UnlockTransPointEvent *))&v5.event_center_.context_.pending_que_.c._M_impl._M_start);
    std::weak_ptr<Observer>::~weak_ptr((std::weak_ptr<Observer> *const)&v5.event_center_);
    std::weak_ptr<PlayerAvatarComp>::~weak_ptr((std::weak_ptr<PlayerAvatarComp> *const)&v5.event_center_.context_.pending_que_.c._M_impl._M_start);
    std::weak_ptr<PlayerAvatarComp>::weak_ptr(
      (std::weak_ptr<PlayerAvatarComp> *const)&v5.event_center_.context_.pending_que_.c._M_impl._M_start,
      (const std::weak_ptr<PlayerAvatarComp> *)(p_M_last + 64));
    PlayerEventComp::registerObserver<PlayerAvatarComp,FinishQuestEvent>(
      (PlayerEventComp *const)&v5.event_center_.context_.pending_que_,
      (std::weak_ptr<PlayerAvatarComp> *)event_comp,
      (void (*)(PlayerAvatarComp *, const FinishQuestEvent *))&v5.event_center_.context_.pending_que_.c._M_impl._M_start);
    std::weak_ptr<Observer>::~weak_ptr((std::weak_ptr<Observer> *const)&v5.event_center_.context_.pending_que_);
    std::weak_ptr<PlayerAvatarComp>::~weak_ptr((std::weak_ptr<PlayerAvatarComp> *const)&v5.event_center_.context_.pending_que_.c._M_impl._M_start);
    std::weak_ptr<PlayerAvatarComp>::weak_ptr(
      (std::weak_ptr<PlayerAvatarComp> *const)&v5.event_center_.context_.pending_que_,
      (const std::weak_ptr<PlayerAvatarComp> *)(p_M_last + 64));
    PlayerEventComp::registerObserver<PlayerAvatarComp,FinishParentQuestEvent>(
      (PlayerEventComp *const)&v5.event_center_.context_.pending_que_.c._M_impl._M_start,
      (std::weak_ptr<PlayerAvatarComp> *)event_comp,
      (void (*)(PlayerAvatarComp *, const FinishParentQuestEvent *))&v5.event_center_.context_.pending_que_);
    std::weak_ptr<Observer>::~weak_ptr((std::weak_ptr<Observer> *const)&v5.event_center_.context_.pending_que_.c._M_impl._M_start);
    std::weak_ptr<PlayerAvatarComp>::~weak_ptr((std::weak_ptr<PlayerAvatarComp> *const)&v5.event_center_.context_.pending_que_);
    std::weak_ptr<PlayerAvatarComp>::~weak_ptr((std::weak_ptr<PlayerAvatarComp> *const)(p_M_last + 64));
  }
  std::shared_ptr<PlayerAvatarComp>::~shared_ptr((std::shared_ptr<PlayerAvatarComp> *const)(p_M_last + 32));
  if ( &v5.event_center_.context_.pending_que_.c._M_impl._M_finish._M_last == (std::_Deque_iterator<std::variant<std::weak_ptr<Observer>,std::shared_ptr<BaseEvent> >,std::variant<std::weak_ptr<Observer>,std::shared_ptr<BaseEvent> >&,std::variant<std::weak_ptr<Observer>,std::shared_ptr<BaseEvent> >*>::_Elt_pointer *)p_M_last )
  {
    *(_QWORD *)((p_M_last >> 3) + 0x7FFF8000) = 0LL;
    *(_DWORD *)((p_M_last >> 3) + 0x7FFF8008) = 0;
  }
  else
  {
    *(_QWORD *)p_M_last = 1172321806LL;
    *(_QWORD *)((p_M_last >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((p_M_last >> 3) + 0x7FFF8008) = -168430091;
  }
};

// Line 622: range 0000000017169338-000000001716A091
void __cdecl PlayerAvatarComp::onWorldPlayerChangeEvent(
        PlayerAvatarComp *const this,
        const WorldPlayerChangeEvent *event)
{
  unsigned __int64 v2; // r13
  __int64 v3; // rax
  _DWORD *v4; // r12
  common::milog::MiLogStream *v5; // rax
  common::milog::MiLogStream *v6; // rax
  common::milog::MiLogStream *v7; // rax
  common::milog::MiLogStream *v8; // rax
  common::milog::MiLogStream *v9; // rax
  common::milog::MiLogStream *v10; // rax
  common::milog::MiLogStream *v11; // r14
  PlayerMpComp *MpComp; // rax
  bool v14; // r14
  common::milog::MiLogStream *v15; // rcx
  Scene *v16; // rax
  SceneGalleryComp *GalleryComp; // r14
  uint32_t Uid; // eax
  common::milog::MiLogStream *v19; // rcx
  SceneTeam *v20; // r14
  uint32_t v21; // eax
  char v22; // al
  std::__shared_ptr_access<SceneTeam,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v23; // r14
  uint32_t v24; // eax
  std::__shared_ptr_access<SceneTeam,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v25; // r14
  uint32_t v26; // eax
  uint32_t *v27; // rax
  uint32_t *v28; // rdx
  std::vector<long unsigned int>::size_type v29; // rax
  std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v31; // rax
  unsigned __int64 *M_current; // r14
  std::vector<long unsigned int>::iterator v33; // rax
  common::milog::MiLogStream *v34; // r14
  std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v35; // rax
  common::milog::MiLogStream *v36; // rax
  common::milog::MiLogStream *v37; // rax
  unsigned __int64 v38; // rax
  std::vector<long unsigned int>::size_type v39; // rax
  std::vector<long unsigned int>::size_type v40; // rax
  std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v41; // rax
  uint64_t Guid; // rdi
  unsigned int val; // [rsp+14h] [rbp-1BCh] BYREF
  uint32_t allow_num; // [rsp+18h] [rbp-1B8h]
  uint32_t old_size; // [rsp+1Ch] [rbp-1B4h]
  std::vector<long unsigned int>::const_iterator __for_begin; // [rsp+20h] [rbp-1B0h] BYREF
  std::vector<long unsigned int>::const_iterator __for_end; // [rsp+28h] [rbp-1A8h] BYREF
  const AvatarTeam *avatar_team_ptr; // [rsp+30h] [rbp-1A0h]
  const std::vector<long unsigned int> *__for_range; // [rsp+38h] [rbp-198h]
  common::milog::MiLogStream v51; // [rsp+40h] [rbp-190h] BYREF
  char v52[368]; // [rsp+60h] [rbp-170h] BYREF

  v2 = (unsigned __int64)v52;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_3(320LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "8 48 4 17 max_allow_num:663 64 8 15 avatar_guid:694 96 16 13 world_ptr:633 128 16 18 cur_avatar_"
                        "ptr:634 160 16 17 cur_scene_ptr:646 192 16 18 scene_team_ptr:655 224 16 14 avatar_ptr:700 256 24"
                        " 12 guid_vec:661";
  *(_QWORD *)(v2 + 16) = PlayerAvatarComp::onWorldPlayerChangeEvent;
  v4 = (_DWORD *)(v2 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = -234556943;
  v4[536862722] = -218959360;
  v4[536862723] = -219021312;
  v4[536862724] = -219021312;
  v4[536862725] = -219021312;
  v4[536862726] = -219021312;
  v4[536862727] = -219021312;
  v4[536862728] = -218103808;
  v4[536862729] = -202116109;
  common::milog::MiLogStream::create(
    &v51,
    &common::milog::MiLogDefault::default_log_obj_,
    1u,
    "./src/player/avatar/player_avatar_comp.cpp",
    "onWorldPlayerChangeEvent",
    624);
  v5 = common::milog::MiLogStream::operator<<<char [25],(char *[25])0>(
         &v51,
         (const char (*)[25])"[WORLD_PLAYER] last num:");
  v6 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v5, &event->last_num);
  v7 = common::milog::MiLogStream::operator<<<char [9],(char *[9])0>(v6, (const char (*)[9])" cur_num");
  v8 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v7, &event->cur_num);
  v9 = common::milog::MiLogStream::operator<<<char [8],(char *[8])0>(v8, (const char (*)[8])" owner:");
  v10 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v9, &event->owner_uid);
  v11 = common::milog::MiLogStream::operator<<<char [5],(char *[5])0>(v10, (const char (*)[5])" me:");
  if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
    __asan_report_load8(&this->player_);
  val = Player::getUid(this->player_);
  common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v11, &val);
  common::milog::MiLogStream::~MiLogStream(&v51);
  if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
    __asan_report_load8(&this->player_);
  MpComp = Player::getMpComp(this->player_);
  if ( PlayerMpComp::isInMpMode(MpComp) )
  {
    if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
      __asan_report_load8(&this->player_);
    Player::getSceneComp(this->player_);
    PlayerSceneComp::getCurWorld((const PlayerSceneComp *const)(v2 + 96));
    PlayerAvatarComp::getCurAvatar((const PlayerAvatarComp *const)(v2 + 128));
    if ( !std::operator==<World>((const std::shared_ptr<World> *)(v2 + 96), 0LL)
      && !std::operator==<Avatar>((const std::shared_ptr<Avatar> *)(v2 + 128), 0LL) )
    {
      if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
        __asan_report_load8(&this->player_);
      Player::getSceneComp(this->player_);
      PlayerSceneComp::getDestScene((const PlayerSceneComp *const)(v2 + 224));
      v14 = std::operator!=<Scene>((const std::shared_ptr<Scene> *)(v2 + 224), 0LL);
      std::shared_ptr<Scene>::~shared_ptr((std::shared_ptr<Scene> *const)(v2 + 224));
      if ( v14 )
      {
        common::milog::MiLogStream::create(
          &v51,
          &common::milog::MiLogDefault::default_log_obj_,
          1u,
          "./src/player/avatar/player_avatar_comp.cpp",
          "onWorldPlayerChangeEvent",
          642);
        v15 = common::milog::MiLogStream::operator<<<char [38],(char *[38])0>(
                &v51,
                (const char (*)[38])"in transfer, skip add avatar,player_:");
        if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
          __asan_report_load8(&this->player_);
        operator<<(v15, this->player_);
        common::milog::MiLogStream::~MiLogStream(&v51);
      }
      else
      {
        if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
          __asan_report_load8(&this->player_);
        Player::getSceneComp(this->player_);
        PlayerSceneComp::getCurScene((const PlayerSceneComp *const)(v2 + 160));
        if ( !std::operator!=<Scene>(0LL, (const std::shared_ptr<Scene> *)(v2 + 160)) )
          goto LABEL_31;
        v16 = std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 160));
        GalleryComp = Scene::getGalleryComp(v16);
        if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
          __asan_report_load8(&this->player_);
        Uid = Player::getUid(this->player_);
        if ( SceneGalleryComp::isForbidAppendAvatar(GalleryComp, Uid) )
        {
          common::milog::MiLogStream::create(
            &v51,
            &common::milog::MiLogDefault::default_log_obj_,
            1u,
            "./src/player/avatar/player_avatar_comp.cpp",
            "onWorldPlayerChangeEvent",
            651);
          v19 = common::milog::MiLogStream::operator<<<char [37],(char *[37])0>(
                  &v51,
                  (const char (*)[37])"in gallery, skip add avatar,player_:");
          if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
            __asan_report_load8(&this->player_);
          operator<<(v19, this->player_);
          common::milog::MiLogStream::~MiLogStream(&v51);
        }
        else
        {
LABEL_31:
          std::__shared_ptr_access<World,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<World,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 96));
          World::getSceneTeam((World *const)(v2 + 192));
          if ( std::operator==<SceneTeam>((const std::shared_ptr<SceneTeam> *)(v2 + 192), 0LL) )
            goto LABEL_35;
          v20 = std::__shared_ptr_access<SceneTeam,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<SceneTeam,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 192));
          if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
            __asan_report_load8(&this->player_);
          v21 = Player::getUid(this->player_);
          if ( !SceneTeam::isPlayerSceneTeamIdenticalToThis(v20, v21) )
LABEL_35:
            v22 = 1;
          else
            v22 = 0;
          if ( !v22 )
          {
            v23 = std::__shared_ptr_access<SceneTeam,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<SceneTeam,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 192));
            if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
              __asan_report_load8(&this->player_);
            v24 = Player::getUid(this->player_);
            SceneTeam::getAvatarGuidVec((std::vector<long unsigned int> *)(v2 + 256), v23, v24);
            *(_DWORD *)(v2 + 48) = 4;
            v25 = std::__shared_ptr_access<SceneTeam,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<SceneTeam,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 192));
            if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
              __asan_report_load8(&this->player_);
            v26 = Player::getUid(this->player_);
            val = SceneTeam::getAllowAvatarNum(v25, v26);
            v27 = (uint32_t *)std::min<unsigned int>(&val, (const unsigned int *)(v2 + 48));
            v28 = v27;
            if ( *(_BYTE *)(((unsigned __int64)v27 >> 3) + 0x7FFF8000) != 0
              && (char)(((unsigned __int8)v27 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)v27 >> 3) + 0x7FFF8000) )
            {
              __asan_report_load4(v27);
            }
            allow_num = *v28;
            if ( !std::vector<unsigned long>::empty((const std::vector<long unsigned int> *const)(v2 + 256)) )
            {
              v29 = std::vector<unsigned long>::size((const std::vector<long unsigned int> *const)(v2 + 256));
              if ( v29 < allow_num )
              {
                v31 = std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 128));
                __for_begin._M_current = (const unsigned __int64 *)Avatar::getGuid(v31);
                M_current = std::vector<unsigned long>::end((std::vector<long unsigned int> *const)(v2 + 256))._M_current;
                v33._M_current = std::vector<unsigned long>::begin((std::vector<long unsigned int> *const)(v2 + 256))._M_current;
                __for_end._M_current = std::find<__gnu_cxx::__normal_iterator<unsigned long *,std::vector<unsigned long>>,unsigned long>(
                                         v33,
                                         (__gnu_cxx::__normal_iterator<long unsigned int*,std::vector<long unsigned int> >)M_current,
                                         (const unsigned __int64 *)&__for_begin)._M_current;
                *(std::vector<long unsigned int>::iterator *)(v2 + 64) = std::vector<unsigned long>::end((std::vector<long unsigned int> *const)(v2 + 256));
                if ( __gnu_cxx::operator==<unsigned long *,std::vector<unsigned long>>(
                       (const __gnu_cxx::__normal_iterator<long unsigned int*,std::vector<long unsigned int> > *)(v2 + 64),
                       (const __gnu_cxx::__normal_iterator<long unsigned int*,std::vector<long unsigned int> > *)&__for_end) )
                {
                  common::milog::MiLogStream::create(
                    &v51,
                    &common::milog::MiLogDefault::default_log_obj_,
                    3u,
                    "./src/player/avatar/player_avatar_comp.cpp",
                    "onWorldPlayerChangeEvent",
                    672);
                  v34 = common::milog::MiLogStream::operator<<<char [11],(char *[11])0>(
                          &v51,
                          (const char (*)[11])off_2603AD20);
                  v35 = std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 128));
                  __for_end._M_current = (const unsigned __int64 *)Avatar::getGuid(v35);
                  v36 = common::milog::MiLogStream::operator<<<unsigned long,(unsigned long *)0>(
                          v34,
                          (const unsigned __int64 *)&__for_end);
                  v37 = common::milog::MiLogStream::operator<<<char [20],(char *[20])0>(
                          v36,
                          (const char (*)[20])" not in scene team:");
                  common::milog::MiLogStream::operator<<<unsigned long>(
                    v37,
                    (const std::vector<long unsigned int> *)(v2 + 256));
                  common::milog::MiLogStream::~MiLogStream(&v51);
                }
                else
                {
                  old_size = std::vector<unsigned long>::size((const std::vector<long unsigned int> *const)(v2 + 256));
                  if ( *(_BYTE *)(((unsigned __int64)&this->cur_avatar_team_id_ >> 3) + 0x7FFF8000) != 0
                    && *(_BYTE *)(((unsigned __int64)&this->cur_avatar_team_id_ >> 3) + 0x7FFF8000) <= 3 )
                  {
                    __asan_report_load4(&this->cur_avatar_team_id_);
                  }
                  avatar_team_ptr = PlayerAvatarComp::findAvatarTeam(this, this->cur_avatar_team_id_);
                  if ( avatar_team_ptr )
                  {
                    __for_range = AvatarTeam::getAvatarVec(avatar_team_ptr);
                    __for_begin._M_current = std::vector<unsigned long>::begin(__for_range)._M_current;
                    __for_end._M_current = std::vector<unsigned long>::end(__for_range)._M_current;
                    while ( __gnu_cxx::operator!=<unsigned long const*,std::vector<unsigned long>>(
                              &__for_begin,
                              &__for_end) )
                    {
                      v38 = (unsigned __int64)__gnu_cxx::__normal_iterator<unsigned long const*,std::vector<unsigned long>>::operator*(&__for_begin);
                      if ( *(_BYTE *)((v38 >> 3) + 0x7FFF8000) )
                        v38 = __asan_report_load8(v38);
                      *(_QWORD *)(v2 + 64) = *(_QWORD *)v38;
                      v39 = std::vector<unsigned long>::size((const std::vector<long unsigned int> *const)(v2 + 256));
                      if ( v39 >= allow_num )
                        break;
                      PlayerAvatarComp::findFormalAvatar((const PlayerAvatarComp *const)(v2 + 224), (uint64_t)this);
                      if ( !std::operator==<FormalAvatar>((const std::shared_ptr<FormalAvatar> *)(v2 + 224), 0LL)
                        && !common::tools::MiscUtils::isContains<std::unordered_set<unsigned long>,unsigned long>(
                              &this->temp_avatar_guid_set_,
                              (const unsigned __int64 *)(v2 + 64))
                        && !common::tools::MiscUtils::isContains<unsigned long>(
                              (std::vector<long unsigned int> *)(v2 + 256),
                              (const unsigned __int64 *)(v2 + 64)) )
                      {
                        std::vector<unsigned long>::push_back(
                          (std::vector<long unsigned int> *const)(v2 + 256),
                          (const std::vector<long unsigned int>::value_type *)(v2 + 64));
                      }
                      std::shared_ptr<FormalAvatar>::~shared_ptr((std::shared_ptr<FormalAvatar> *const)(v2 + 224));
                      __gnu_cxx::__normal_iterator<unsigned long const*,std::vector<unsigned long>>::operator++(&__for_begin);
                    }
                  }
                  v40 = std::vector<unsigned long>::size((const std::vector<long unsigned int> *const)(v2 + 256));
                  if ( v40 != old_size )
                  {
                    if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
                      __asan_report_load8(&this->player_);
                    Player::getSceneComp(this->player_);
                    PlayerSceneComp::getCurScene((const PlayerSceneComp *const)(v2 + 224));
                    v41 = std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 128));
                    Guid = Avatar::getGuid(v41);
                    PlayerAvatarComp::setSceneTeamAndAddToScene(
                      this,
                      (const std::vector<long unsigned int> *)(v2 + 256),
                      Guid,
                      (ScenePtr *)(v2 + 224),
                      CHANGE_SCENE_TEAM_REASON_MP_PLAYER_LEAVE);
                    std::shared_ptr<Scene>::~shared_ptr((std::shared_ptr<Scene> *const)(v2 + 224));
                  }
                }
              }
            }
            std::vector<unsigned long>::~vector((std::vector<long unsigned int> *const)(v2 + 256));
          }
          std::shared_ptr<SceneTeam>::~shared_ptr((std::shared_ptr<SceneTeam> *const)(v2 + 192));
        }
        std::shared_ptr<Scene>::~shared_ptr((std::shared_ptr<Scene> *const)(v2 + 160));
      }
    }
    std::shared_ptr<Avatar>::~shared_ptr((std::shared_ptr<Avatar> *const)(v2 + 128));
    std::shared_ptr<World>::~shared_ptr((std::shared_ptr<World> *const)(v2 + 96));
  }
  if ( v52 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8010) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8018) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8020) = 0LL;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8020) = 0xF5F5F5F5F5F5F5F5LL;
  }
};

// Line 763: range 000000001716A092-000000001716A226
void __cdecl PlayerAvatarComp::onFinishDungeonEvent(PlayerAvatarComp *const this, const FinishDungeonEvent *event)
{
  const std::unordered_map<unsigned int,std::unordered_set<unsigned int>> *p_fetter_dungeon_avatars_map; // rdi
  std::allocator<data::FetterCondType> __a; // [rsp+1Bh] [rbp-55h] BYREF
  std::initializer_list<data::FetterCondType> __l; // [rsp+1Ch] [rbp-54h] BYREF
  std::vector<data::FetterCondType> fetter_cond_type_vec; // [rsp+30h] [rbp-40h] BYREF

  if ( *(_BYTE *)(((unsigned __int64)&event->is_first_pass >> 3) + 0x7FFF8000) != 0
    && (((unsigned __int8)event + 28) & 7) >= *(_BYTE *)(((unsigned __int64)&event->is_first_pass >> 3) + 0x7FFF8000) )
  {
    __asan_report_load1(&event->is_first_pass);
  }
  if ( event->is_first_pass )
  {
    LODWORD(__l._M_array) = 3;
    std::allocator<data::FetterCondType>::allocator(&__a);
    std::vector<data::FetterCondType>::vector(
      &fetter_cond_type_vec,
      (std::initializer_list<data::FetterCondType>)__PAIR128__(1LL, &__l),
      &__a);
    ServiceBox::findService<GameserverService>();
    GameserverService::getConfig((GameserverService *const)((char *)&__l._M_array + 4));
    p_fetter_dungeon_avatars_map = &std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::operator->(
                                      (const std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false> *const)&__l._M_array
                                    + 4)->design_config.txt_config_mgr.fetter_config_mgr.fetter_dungeon_avatars_map;
    if ( *(_BYTE *)(((unsigned __int64)&event->dungeon_id >> 3) + 0x7FFF8000) != 0
      && *(_BYTE *)(((unsigned __int64)&event->dungeon_id >> 3) + 0x7FFF8000) <= 3 )
    {
      p_fetter_dungeon_avatars_map = (const std::unordered_map<unsigned int,std::unordered_set<unsigned int>> *)&event->dungeon_id;
      __asan_report_load4(&event->dungeon_id);
    }
    PlayerAvatarComp::checkFetterRelatedAvatars(
      this,
      event->dungeon_id,
      p_fetter_dungeon_avatars_map,
      &fetter_cond_type_vec);
    std::shared_ptr<Config>::~shared_ptr((std::shared_ptr<Config> *const)((char *)&__l._M_array + 4));
    std::vector<data::FetterCondType>::~vector(&fetter_cond_type_vec);
    std::allocator<data::FetterCondType>::~allocator(&__a);
  }
};

// Line 772: range 000000001716A228-000000001716A386
void __cdecl PlayerAvatarComp::onUnlockTransPointEvent(
        PlayerAvatarComp *const this,
        const UnlockTransPointEvent *event)
{
  const std::unordered_map<unsigned int,std::unordered_set<unsigned int>> *p_fetter_point_avatars_map; // rdi
  std::allocator<data::FetterCondType> __a; // [rsp+13h] [rbp-5Dh] BYREF
  std::initializer_list<data::FetterCondType> __l; // [rsp+14h] [rbp-5Ch] BYREF
  std::vector<data::FetterCondType> fetter_cond_type_vec; // [rsp+30h] [rbp-40h] BYREF

  __l._M_array = (std::initializer_list<data::FetterCondType>::iterator)0x500000004LL;
  LODWORD(__l._M_len) = 12;
  std::allocator<data::FetterCondType>::allocator(&__a);
  std::vector<data::FetterCondType>::vector(
    &fetter_cond_type_vec,
    (std::initializer_list<data::FetterCondType>)__PAIR128__(3LL, &__l),
    &__a);
  ServiceBox::findService<GameserverService>();
  GameserverService::getConfig((GameserverService *const)((char *)&__l._M_len + 4));
  p_fetter_point_avatars_map = &std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::operator->(
                                  (const std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false> *const)&__l._M_len
                                + 4)->design_config.txt_config_mgr.fetter_config_mgr.fetter_point_avatars_map;
  if ( *(_BYTE *)(((unsigned __int64)&event->point_id >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)event + 28) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&event->point_id >> 3) + 0x7FFF8000) )
  {
    p_fetter_point_avatars_map = (const std::unordered_map<unsigned int,std::unordered_set<unsigned int>> *)&event->point_id;
    __asan_report_load4(&event->point_id);
  }
  PlayerAvatarComp::checkFetterRelatedAvatars(this, event->point_id, p_fetter_point_avatars_map, &fetter_cond_type_vec);
  std::shared_ptr<Config>::~shared_ptr((std::shared_ptr<Config> *const)((char *)&__l._M_len + 4));
  std::vector<data::FetterCondType>::~vector(&fetter_cond_type_vec);
  std::allocator<data::FetterCondType>::~allocator(&__a);
};

// Line 777: range 000000001716A388-000000001716A4D0
void __cdecl PlayerAvatarComp::onFinishQuestEvent(PlayerAvatarComp *const this, const FinishQuestEvent *event)
{
  const std::unordered_map<unsigned int,std::unordered_set<unsigned int>> *p_fetter_quest_avatars_map; // rdi
  std::allocator<data::FetterCondType> __a; // [rsp+1Bh] [rbp-55h] BYREF
  std::initializer_list<data::FetterCondType> __l; // [rsp+1Ch] [rbp-54h] BYREF
  std::vector<data::FetterCondType> fetter_cond_type_vec; // [rsp+30h] [rbp-40h] BYREF

  LODWORD(__l._M_array) = 6;
  std::allocator<data::FetterCondType>::allocator(&__a);
  std::vector<data::FetterCondType>::vector(
    &fetter_cond_type_vec,
    (std::initializer_list<data::FetterCondType>)__PAIR128__(1LL, &__l),
    &__a);
  ServiceBox::findService<GameserverService>();
  GameserverService::getConfig((GameserverService *const)((char *)&__l._M_array + 4));
  p_fetter_quest_avatars_map = &std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::operator->(
                                  (const std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false> *const)&__l._M_array
                                + 4)->design_config.txt_config_mgr.fetter_config_mgr.fetter_quest_avatars_map;
  if ( *(_BYTE *)(((unsigned __int64)&event->quest_id >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&event->quest_id >> 3) + 0x7FFF8000) <= 3 )
  {
    p_fetter_quest_avatars_map = (const std::unordered_map<unsigned int,std::unordered_set<unsigned int>> *)&event->quest_id;
    __asan_report_load4(&event->quest_id);
  }
  PlayerAvatarComp::checkFetterRelatedAvatars(this, event->quest_id, p_fetter_quest_avatars_map, &fetter_cond_type_vec);
  std::shared_ptr<Config>::~shared_ptr((std::shared_ptr<Config> *const)((char *)&__l._M_array + 4));
  std::vector<data::FetterCondType>::~vector(&fetter_cond_type_vec);
  std::allocator<data::FetterCondType>::~allocator(&__a);
};

// Line 782: range 000000001716A4D2-000000001716A61A
void __cdecl PlayerAvatarComp::onFinishParentQuestEvent(
        PlayerAvatarComp *const this,
        const FinishParentQuestEvent *event)
{
  const std::unordered_map<unsigned int,std::unordered_set<unsigned int>> *p_fetter_parent_quest_avatars_map; // rdi
  std::allocator<data::FetterCondType> __a; // [rsp+1Bh] [rbp-55h] BYREF
  std::initializer_list<data::FetterCondType> __l; // [rsp+1Ch] [rbp-54h] BYREF
  std::vector<data::FetterCondType> fetter_cond_type_vec; // [rsp+30h] [rbp-40h] BYREF

  LODWORD(__l._M_array) = 11;
  std::allocator<data::FetterCondType>::allocator(&__a);
  std::vector<data::FetterCondType>::vector(
    &fetter_cond_type_vec,
    (std::initializer_list<data::FetterCondType>)__PAIR128__(1LL, &__l),
    &__a);
  ServiceBox::findService<GameserverService>();
  GameserverService::getConfig((GameserverService *const)((char *)&__l._M_array + 4));
  p_fetter_parent_quest_avatars_map = &std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::operator->(
                                         (const std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false> *const)&__l._M_array
                                       + 4)->design_config.txt_config_mgr.fetter_config_mgr.fetter_parent_quest_avatars_map;
  if ( *(_BYTE *)(((unsigned __int64)&event->parent_quest_id >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&event->parent_quest_id >> 3) + 0x7FFF8000) <= 3 )
  {
    p_fetter_parent_quest_avatars_map = (const std::unordered_map<unsigned int,std::unordered_set<unsigned int>> *)&event->parent_quest_id;
    __asan_report_load4(&event->parent_quest_id);
  }
  PlayerAvatarComp::checkFetterRelatedAvatars(
    this,
    event->parent_quest_id,
    p_fetter_parent_quest_avatars_map,
    &fetter_cond_type_vec);
  std::shared_ptr<Config>::~shared_ptr((std::shared_ptr<Config> *const)((char *)&__l._M_array + 4));
  std::vector<data::FetterCondType>::~vector(&fetter_cond_type_vec);
  std::allocator<data::FetterCondType>::~allocator(&__a);
};

// Line 788: range 000000001716A61C-000000001716A7C5
int32_t __cdecl PlayerAvatarComp::onLogout(PlayerAvatarComp *const this)
{
  __int64 v1; // rsi
  unsigned __int64 v2; // rax
  unsigned __int64 v3; // rdx
  const std::pair<long unsigned int const,std::shared_ptr<Avatar> > *v4; // rax
  Avatar *v5; // rax
  std::map<long unsigned int,std::shared_ptr<Avatar>>::iterator __for_begin; // [rsp+18h] [rbp-58h] BYREF
  std::map<long unsigned int,std::shared_ptr<Avatar>>::iterator __for_end; // [rsp+20h] [rbp-50h] BYREF
  std::map<long unsigned int,std::shared_ptr<Avatar>> *__for_range; // [rsp+28h] [rbp-48h]
  std::tuple_element<0,std::pair<long unsigned int const,std::shared_ptr<Avatar> > >::type *guid; // [rsp+30h] [rbp-40h]
  std::tuple_element<1,std::pair<long unsigned int const,std::shared_ptr<Avatar> > >::type *avatar_ptr; // [rsp+38h] [rbp-38h]
  std::pair<long unsigned int const,std::shared_ptr<Avatar> > __in; // [rsp+40h] [rbp-30h] BYREF

  if ( *(_BYTE *)(((unsigned __int64)&this->last_avatar_die_time_ >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->last_avatar_die_time_ >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_store4(&this->last_avatar_die_time_, v1, &this->last_avatar_die_time_);
  }
  this->last_avatar_die_time_ = 0;
  if ( std::operator!=<Avatar>(&this->cur_avatar_ptr_, 0LL) )
  {
    v2 = (unsigned __int64)std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false> *const)&this->cur_avatar_ptr_);
    if ( *(_BYTE *)((v2 >> 3) + 0x7FFF8000) )
      v2 = __asan_report_load8(v2);
    v3 = *(_QWORD *)v2 + 128LL;
    if ( *(_BYTE *)((v3 >> 3) + 0x7FFF8000) )
      v2 = __asan_report_load8(*(_QWORD *)v2 + 128LL);
    (*(void (__fastcall **)(unsigned __int64, VisionContext *))v3)(v2, &VisionContext::miss_context);
  }
  __for_range = &this->avatar_map_;
  __for_begin._M_node = std::map<unsigned long,std::shared_ptr<Avatar>>::begin(&this->avatar_map_)._M_node;
  __for_end._M_node = std::map<unsigned long,std::shared_ptr<Avatar>>::end(&this->avatar_map_)._M_node;
  while ( std::operator!=(&__for_begin, &__for_end) )
  {
    v4 = std::_Rb_tree_iterator<std::pair<unsigned long const,std::shared_ptr<Avatar>>>::operator*(&__for_begin);
    std::pair<unsigned long const,std::shared_ptr<Avatar>>::pair(&__in, v4);
    guid = std::get<0ul,unsigned long const,std::shared_ptr<Avatar>>(&__in);
    avatar_ptr = std::get<1ul,unsigned long const,std::shared_ptr<Avatar>>(&__in);
    v5 = std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false> *const)avatar_ptr);
    Avatar::resetReviveInfo(v5);
    std::pair<unsigned long const,std::shared_ptr<Avatar>>::~pair(&__in);
    std::_Rb_tree_iterator<std::pair<unsigned long const,std::shared_ptr<Avatar>>>::operator++(&__for_begin);
  }
  return 0;
};

// Line 809: range 000000001716A7C6-000000001716A934
void __cdecl PlayerAvatarComp::onDailyRefresh(PlayerAvatarComp *const this)
{
  PlayerSocialComp *SocialComp; // rax
  const std::pair<long unsigned int const,std::shared_ptr<Avatar> > *v2; // rax
  unsigned __int64 v3; // rax
  unsigned __int64 v4; // rdx
  std::map<long unsigned int,std::shared_ptr<Avatar>>::iterator __for_begin; // [rsp+18h] [rbp-58h] BYREF
  std::map<long unsigned int,std::shared_ptr<Avatar>>::iterator __for_end; // [rsp+20h] [rbp-50h] BYREF
  std::map<long unsigned int,std::shared_ptr<Avatar>> *__for_range; // [rsp+28h] [rbp-48h]
  std::tuple_element<0,std::pair<long unsigned int const,std::shared_ptr<Avatar> > >::type *guid; // [rsp+30h] [rbp-40h]
  std::tuple_element<1,std::pair<long unsigned int const,std::shared_ptr<Avatar> > >::type *avatar_ptr; // [rsp+38h] [rbp-38h]
  std::pair<long unsigned int const,std::shared_ptr<Avatar> > __in; // [rsp+40h] [rbp-30h] BYREF

  if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
    __asan_report_load8(&this->player_);
  SocialComp = Player::getSocialComp(this->player_);
  PlayerSocialComp::checkRefreshLoginOnBirthday(SocialComp);
  __for_range = &this->avatar_map_;
  __for_begin._M_node = std::map<unsigned long,std::shared_ptr<Avatar>>::begin(&this->avatar_map_)._M_node;
  __for_end._M_node = std::map<unsigned long,std::shared_ptr<Avatar>>::end(&this->avatar_map_)._M_node;
  while ( std::operator!=(&__for_begin, &__for_end) )
  {
    v2 = std::_Rb_tree_iterator<std::pair<unsigned long const,std::shared_ptr<Avatar>>>::operator*(&__for_begin);
    std::pair<unsigned long const,std::shared_ptr<Avatar>>::pair(&__in, v2);
    guid = std::get<0ul,unsigned long const,std::shared_ptr<Avatar>>(&__in);
    avatar_ptr = std::get<1ul,unsigned long const,std::shared_ptr<Avatar>>(&__in);
    v3 = (unsigned __int64)std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false> *const)avatar_ptr);
    if ( *(_BYTE *)((v3 >> 3) + 0x7FFF8000) )
      v3 = __asan_report_load8(v3);
    v4 = *(_QWORD *)v3 + 480LL;
    if ( *(_BYTE *)((v4 >> 3) + 0x7FFF8000) )
      v3 = __asan_report_load8(*(_QWORD *)v3 + 480LL);
    (*(void (__fastcall **)(unsigned __int64))v4)(v3);
    std::pair<unsigned long const,std::shared_ptr<Avatar>>::~pair(&__in);
    std::_Rb_tree_iterator<std::pair<unsigned long const,std::shared_ptr<Avatar>>>::operator++(&__for_begin);
  }
};

// Line 819: range 000000001716A936-000000001716AC03
void __cdecl PlayerAvatarComp::refreshAllAvatarFetterOnSetBirthday(PlayerAvatarComp *const this)
{
  unsigned __int64 v1; // rbx
  __int64 v2; // rax
  unsigned __int64 v3; // r13
  const std::pair<long unsigned int const,std::shared_ptr<Avatar> > *v4; // rax
  std::__shared_ptr_access<FormalAvatar,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v5; // rax
  FetterComp *FetterComp; // [rsp+10h] [rbp-F0h]
  std::allocator<data::FetterCondType> __a; // [rsp+23h] [rbp-DDh] BYREF
  _DWORD __l[5]; // [rsp+24h] [rbp-DCh] BYREF
  std::map<long unsigned int,std::shared_ptr<Avatar>> *__for_range; // [rsp+38h] [rbp-C8h]
  std::tuple_element<0,std::pair<long unsigned int const,std::shared_ptr<Avatar> > >::type *guid; // [rsp+40h] [rbp-C0h]
  std::tuple_element<1,std::pair<long unsigned int const,std::shared_ptr<Avatar> > >::type *avatar_ptr; // [rsp+48h] [rbp-B8h]
  std::pair<long unsigned int const,std::shared_ptr<Avatar> > __in; // [rsp+50h] [rbp-B0h] BYREF
  std::vector<data::FetterCondType> fetter_cond_type_vec; // [rsp+70h] [rbp-90h] BYREF
  char v14[112]; // [rsp+90h] [rbp-70h] BYREF

  v1 = (unsigned __int64)v14;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_0(64LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "1 32 16 21 formal_avatar_ptr:822";
  *(_QWORD *)(v1 + 16) = PlayerAvatarComp::refreshAllAvatarFetterOnSetBirthday;
  v3 = v1 >> 3;
  *(_DWORD *)(v3 + 2147450880) = -235802127;
  *(_DWORD *)(v3 + 2147450884) = -202178560;
  __for_range = &this->avatar_map_;
  *(std::map<long unsigned int,std::shared_ptr<Avatar>>::iterator *)&__l[1] = std::map<unsigned long,std::shared_ptr<Avatar>>::begin(&this->avatar_map_);
  *(std::map<long unsigned int,std::shared_ptr<Avatar>>::iterator *)&__l[3] = std::map<unsigned long,std::shared_ptr<Avatar>>::end(&this->avatar_map_);
  while ( std::operator!=(
            (const std::_Rb_tree_iterator<std::pair<long unsigned int const,std::shared_ptr<Avatar> > >::_Self *)&__l[1],
            (const std::_Rb_tree_iterator<std::pair<long unsigned int const,std::shared_ptr<Avatar> > >::_Self *)&__l[3]) )
  {
    v4 = std::_Rb_tree_iterator<std::pair<unsigned long const,std::shared_ptr<Avatar>>>::operator*((const std::_Rb_tree_iterator<std::pair<long unsigned int const,std::shared_ptr<Avatar> > > *const)&__l[1]);
    std::pair<unsigned long const,std::shared_ptr<Avatar>>::pair(&__in, v4);
    guid = std::get<0ul,unsigned long const,std::shared_ptr<Avatar>>(&__in);
    avatar_ptr = std::get<1ul,unsigned long const,std::shared_ptr<Avatar>>(&__in);
    std::dynamic_pointer_cast<FormalAvatar,Avatar>((const std::shared_ptr<Avatar> *)(v1 + 32));
    if ( std::operator!=<FormalAvatar>(0LL, (const std::shared_ptr<FormalAvatar> *)(v1 + 32)) )
    {
      v5 = std::__shared_ptr_access<FormalAvatar,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<FormalAvatar,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v1 + 32));
      FetterComp = FormalAvatar::getFetterComp(v5);
      __l[0] = 8;
      std::allocator<data::FetterCondType>::allocator(&__a);
      std::vector<data::FetterCondType>::vector(
        &fetter_cond_type_vec,
        (std::initializer_list<data::FetterCondType>)__PAIR128__(1LL, __l),
        &__a);
      FetterComp::checkRefreshFetterCompAndNotifyClient(FetterComp, &fetter_cond_type_vec);
      std::vector<data::FetterCondType>::~vector(&fetter_cond_type_vec);
      std::allocator<data::FetterCondType>::~allocator(&__a);
    }
    std::shared_ptr<FormalAvatar>::~shared_ptr((std::shared_ptr<FormalAvatar> *const)(v1 + 32));
    std::pair<unsigned long const,std::shared_ptr<Avatar>>::~pair(&__in);
    std::_Rb_tree_iterator<std::pair<unsigned long const,std::shared_ptr<Avatar>>>::operator++((std::_Rb_tree_iterator<std::pair<long unsigned int const,std::shared_ptr<Avatar> > > *const)&__l[1]);
  }
  if ( v14 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
  }
};

// Line 832: range 000000001716AC04-000000001716AEEC
bool __cdecl PlayerAvatarComp::isAvatarSwitchClosed(PlayerAvatarComp *const this, AvatarPtr *p_avatar_ptr)
{
  std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v2; // rax
  bool isAvatarSystemClosed; // bl
  common::milog::MiLogStream *v5; // rbx
  FeatureSwitchMgr *p_feature_switch_mgr; // rbx
  std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v7; // rax
  uint32_t AvatarId; // eax
  common::milog::MiLogStream *v9; // rbx
  std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v10; // rax
  common::milog::MiLogStream *v11; // rax
  unsigned int val; // [rsp+1Ch] [rbp-44h] BYREF
  std::shared_ptr<Config> v13; // [rsp+20h] [rbp-40h] BYREF
  common::milog::MiLogStream v14; // [rsp+30h] [rbp-30h] BYREF

  ServiceBox::findService<GameserverService>();
  GameserverService::getConfig((GameserverService *const)&v13);
  v2 = std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false> *const)&v13);
  isAvatarSystemClosed = FeatureSwitchMgr::isAvatarSystemClosed(&v2->feature_switch_mgr);
  std::shared_ptr<Config>::~shared_ptr(&v13);
  if ( isAvatarSystemClosed )
  {
    common::milog::MiLogStream::create(
      &v14,
      &common::milog::MiLogDefault::default_log_obj_,
      1u,
      "./src/player/avatar/player_avatar_comp.cpp",
      "isAvatarSwitchClosed",
      835);
    common::milog::MiLogStream::operator<<<char [37],(char *[37])0>(
      &v14,
      (const char (*)[37])"[FEATURE_SWITCH] AvatarSystem closed");
    common::milog::MiLogStream::~MiLogStream(&v14);
    return 1;
  }
  else if ( std::operator==<Avatar>(0LL, p_avatar_ptr) )
  {
    common::milog::MiLogStream::create(
      &v14,
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/player/avatar/player_avatar_comp.cpp",
      "isAvatarSwitchClosed",
      841);
    v5 = common::milog::MiLogStream::operator<<<char [26],(char *[26])0>(
           &v14,
           (const char (*)[26])"avatar_ptr nullptr, uid: ");
    if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
      __asan_report_load8(&this->player_);
    val = Player::getUid(this->player_);
    common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v5, &val);
    common::milog::MiLogStream::~MiLogStream(&v14);
    return 0;
  }
  else
  {
    ServiceBox::findService<GameserverService>();
    GameserverService::getConfig((GameserverService *const)&v13);
    p_feature_switch_mgr = &std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false> *const)&v13)->feature_switch_mgr;
    v7 = std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false> *const)p_avatar_ptr);
    AvatarId = Avatar::getAvatarId(v7);
    LOBYTE(p_feature_switch_mgr) = FeatureSwitchMgr::isAvatarClosed(p_feature_switch_mgr, AvatarId);
    std::shared_ptr<Config>::~shared_ptr(&v13);
    if ( (_BYTE)p_feature_switch_mgr )
    {
      common::milog::MiLogStream::create(
        &v14,
        &common::milog::MiLogDefault::default_log_obj_,
        1u,
        "./src/player/avatar/player_avatar_comp.cpp",
        "isAvatarSwitchClosed",
        846);
      v9 = common::milog::MiLogStream::operator<<<char [42],(char *[42])0>(
             &v14,
             (const char (*)[42])"[FEATURE_SWITCH] AvatarSystem avatar_id: ");
      v10 = std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false> *const)p_avatar_ptr);
      val = Avatar::getAvatarId(v10);
      v11 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v9, &val);
      common::milog::MiLogStream::operator<<<char [8],(char *[8])0>(v11, (const char (*)[8])" closed");
      common::milog::MiLogStream::~MiLogStream(&v14);
      return 1;
    }
    else
    {
      return 0;
    }
  }
};

// Line 853: range 000000001716AEEE-000000001716B0EC
bool __cdecl PlayerAvatarComp::isAvatarSwitchClosed(PlayerAvatarComp *const this, Avatar *avatar)
{
  std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v2; // rax
  bool isAvatarSystemClosed; // bl
  FeatureSwitchMgr *p_feature_switch_mgr; // rbx
  uint32_t AvatarId; // eax
  common::milog::MiLogStream *v7; // rbx
  common::milog::MiLogStream *v8; // rax
  unsigned int val; // [rsp+1Ch] [rbp-44h] BYREF
  std::shared_ptr<Config> v10; // [rsp+20h] [rbp-40h] BYREF
  common::milog::MiLogStream v11; // [rsp+30h] [rbp-30h] BYREF

  ServiceBox::findService<GameserverService>();
  GameserverService::getConfig((GameserverService *const)&v10);
  v2 = std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false> *const)&v10);
  isAvatarSystemClosed = FeatureSwitchMgr::isAvatarSystemClosed(&v2->feature_switch_mgr);
  std::shared_ptr<Config>::~shared_ptr(&v10);
  if ( isAvatarSystemClosed )
  {
    common::milog::MiLogStream::create(
      &v11,
      &common::milog::MiLogDefault::default_log_obj_,
      1u,
      "./src/player/avatar/player_avatar_comp.cpp",
      "isAvatarSwitchClosed",
      856);
    common::milog::MiLogStream::operator<<<char [37],(char *[37])0>(
      &v11,
      (const char (*)[37])"[FEATURE_SWITCH] AvatarSystem closed");
    common::milog::MiLogStream::~MiLogStream(&v11);
    return 1;
  }
  else
  {
    ServiceBox::findService<GameserverService>();
    GameserverService::getConfig((GameserverService *const)&v10);
    p_feature_switch_mgr = &std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false> *const)&v10)->feature_switch_mgr;
    AvatarId = Avatar::getAvatarId(avatar);
    LOBYTE(p_feature_switch_mgr) = FeatureSwitchMgr::isAvatarClosed(p_feature_switch_mgr, AvatarId);
    std::shared_ptr<Config>::~shared_ptr(&v10);
    if ( (_BYTE)p_feature_switch_mgr )
    {
      common::milog::MiLogStream::create(
        &v11,
        &common::milog::MiLogDefault::default_log_obj_,
        1u,
        "./src/player/avatar/player_avatar_comp.cpp",
        "isAvatarSwitchClosed",
        861);
      v7 = common::milog::MiLogStream::operator<<<char [42],(char *[42])0>(
             &v11,
             (const char (*)[42])"[FEATURE_SWITCH] AvatarSystem avatar_id: ");
      val = Avatar::getAvatarId(avatar);
      v8 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v7, &val);
      common::milog::MiLogStream::operator<<<char [8],(char *[8])0>(v8, (const char (*)[8])" closed");
      common::milog::MiLogStream::~MiLogStream(&v11);
      return 1;
    }
    else
    {
      return 0;
    }
  }
};

// Line 869: range 000000001716B30A-000000001716BF68
int32_t __cdecl PlayerAvatarComp::notifyAllData(PlayerAvatarComp *const this)
{
  unsigned __int64 v1; // r13
  __int64 v2; // rax
  _DWORD *v3; // r12
  int32_t v4; // r14d
  std::__shared_ptr_access<proto::AvatarDataNotify,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v5; // rax
  proto::AvatarTeam *v6; // r14
  const std::string *v7; // rax
  uint64_t *v8; // rax
  proto::AvatarTeam *v9; // rax
  unsigned __int64 *v10; // rax
  std::__shared_ptr_access<proto::AvatarDataNotify,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v11; // rax
  std::__shared_ptr_access<proto::AvatarDataNotify,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v12; // rcx
  std::__shared_ptr_access<proto::AvatarDataNotify,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v13; // r14
  uint64_t ChooseAvatarGuid; // rax
  unsigned int *v15; // rax
  uint32_t *v16; // rdx
  std::__shared_ptr_access<proto::AvatarDataNotify,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v17; // rax
  unsigned int *v18; // rax
  uint32_t *v19; // rdx
  std::__shared_ptr_access<proto::AvatarDataNotify,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v20; // rax
  std::_List_iterator<unsigned int>::reference v21; // rax
  uint32_t *v22; // rdx
  std::__shared_ptr_access<proto::AvatarDataNotify,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v23; // rax
  std::__shared_ptr_access<proto::AvatarDataNotify,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v24; // rax
  Player *player; // r14
  std::__shared_ptr_access<proto::AvatarExpeditionDataNotify,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v26; // rax
  Player *v27; // r14
  Player *v28; // r14
  int32_t result; // eax
  int32_t ret; // [rsp+18h] [rbp-1B8h]
  uint32_t backup_team_id; // [rsp+1Ch] [rbp-1B4h]
  uint32_t costume_id; // [rsp+20h] [rbp-1B0h]
  uint32_t flycloak_id; // [rsp+24h] [rbp-1ACh]
  std::map<unsigned int,AvatarTeam>::iterator __for_begin; // [rsp+28h] [rbp-1A8h] BYREF
  std::map<unsigned int,AvatarTeam>::iterator __for_end; // [rsp+30h] [rbp-1A0h] BYREF
  std::vector<long unsigned int>::iterator __for_begin_0; // [rsp+38h] [rbp-198h] BYREF
  std::vector<long unsigned int>::iterator __for_end_0; // [rsp+40h] [rbp-190h] BYREF
  google::protobuf::Map<unsigned int,proto::AvatarTeam> *avatar_team_map; // [rsp+48h] [rbp-188h]
  std::map<unsigned int,AvatarTeam> *__for_range; // [rsp+50h] [rbp-180h]
  std::unordered_set<long unsigned int> *__for_range_1; // [rsp+58h] [rbp-178h]
  std::set<unsigned int> *__for_range_2; // [rsp+60h] [rbp-170h]
  std::set<unsigned int> *__for_range_3; // [rsp+68h] [rbp-168h]
  std::list<unsigned int> *__for_range_4; // [rsp+70h] [rbp-160h]
  std::map<unsigned int,AvatarRenameData> *__for_range_5; // [rsp+78h] [rbp-158h]
  google::protobuf::Map<long unsigned int,proto::AvatarExpeditionInfo> *expedition_info_map; // [rsp+80h] [rbp-150h]
  const std::pair<unsigned int const,AvatarRenameData> *v46; // [rsp+88h] [rbp-148h]
  std::tuple_element<0,const std::pair<unsigned int const,AvatarRenameData> >::type *avatar_id; // [rsp+90h] [rbp-140h]
  std::tuple_element<1,const std::pair<unsigned int const,AvatarRenameData> >::type *rename_data; // [rsp+98h] [rbp-138h]
  proto::AvatarRenameInfo *rename_info; // [rsp+A0h] [rbp-130h]
  unsigned __int64 guid_0; // [rsp+A8h] [rbp-128h]
  std::pair<unsigned int const,AvatarTeam> *p; // [rsp+B0h] [rbp-120h]
  AvatarTeam *avatar_list; // [rsp+B8h] [rbp-118h]
  std::vector<long unsigned int> *__for_range_0; // [rsp+C0h] [rbp-110h]
  uint64_t guid; // [rsp+C8h] [rbp-108h]
  std::shared_ptr<proto::AvatarDataNotify> __r; // [rsp+D0h] [rbp-100h] BYREF
  std::function<ForeachPolicy(const Avatar&)> p_func; // [rsp+E0h] [rbp-F0h] BYREF
  char v57[208]; // [rsp+100h] [rbp-D0h] BYREF

  v1 = (unsigned __int64)v57;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_2(160LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "4 48 4 11 team_id:893 64 16 14 notify_ptr:870 96 16 30 expedition_data_notify_ptr:936 128 16 29 "
                        "satiation_data_notify_ptr:949";
  *(_QWORD *)(v1 + 16) = PlayerAvatarComp::notifyAllData;
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234556943;
  v3[536862722] = -219021312;
  v3[536862723] = -219021312;
  v3[536862724] = -202178560;
  common::tools::perf::make_shared<proto::AvatarDataNotify>();
  std::shared_ptr<proto::AvatarDataNotify>::shared_ptr(
    &__r,
    (const std::shared_ptr<proto::AvatarDataNotify> *)(v1 + 64));
  std::function<ForeachPolicy ()(Avatar const&)>::function<PlayerAvatarComp::notifyAllData(void)::{lambda(Avatar const&)#1},void,void>(
    &p_func,
    (PlayerAvatarComp::notifyAllData::<lambda(const Avatar&)> *)&__r);
  ret = PlayerAvatarComp::foreachAvatar(this, &p_func);
  std::function<ForeachPolicy ()(Avatar const&)>::~function(&p_func);
  PlayerAvatarComp::notifyAllData(void)::{lambda(Avatar const&)#1}::~Avatar((PlayerAvatarComp::notifyAllData::<lambda(const Avatar&)> *const)&__r);
  if ( ret )
  {
    common::milog::MiLogStream::create(
      (common::milog::MiLogStream *)&p_func,
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/player/avatar/player_avatar_comp.cpp",
      "notifyAllData",
      885);
    common::milog::MiLogStream::operator<<<char [20],(char *[20])0>(
      (common::milog::MiLogStream *const)&p_func,
      (const char (*)[20])"foreachAvatar fails");
    common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)&p_func);
    v4 = -1;
  }
  else
  {
    v5 = std::__shared_ptr_access<proto::AvatarDataNotify,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<proto::AvatarDataNotify,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v1 + 64));
    avatar_team_map = proto::AvatarDataNotify::mutable_avatar_team_map(v5);
    __for_range = &this->avatar_team_map_;
    __for_begin._M_node = std::map<unsigned int,AvatarTeam>::begin(&this->avatar_team_map_)._M_node;
    __for_end._M_node = std::map<unsigned int,AvatarTeam>::end(&this->avatar_team_map_)._M_node;
    while ( std::operator!=(&__for_begin, &__for_end) )
    {
      p = std::_Rb_tree_iterator<std::pair<unsigned int const,AvatarTeam>>::operator*(&__for_begin);
      if ( *(_BYTE *)(((unsigned __int64)p >> 3) + 0x7FFF8000) != 0
        && *(_BYTE *)(((unsigned __int64)p >> 3) + 0x7FFF8000) <= 3 )
      {
        __asan_report_load4(p);
      }
      *(_DWORD *)(v1 + 48) = p->first;
      avatar_list = &p->second;
      v6 = google::protobuf::Map<unsigned int,proto::AvatarTeam>::operator[](
             avatar_team_map,
             (const google::protobuf::Map<unsigned int,proto::AvatarTeam>::key_type *)(v1 + 48));
      v7 = AvatarTeam::getTeamName[abi:cxx11](avatar_list);
      proto::AvatarTeam::set_team_name(v6, v7);
      __for_range_0 = AvatarTeam::getAvatarVec(avatar_list);
      __for_begin_0._M_current = std::vector<unsigned long>::begin(__for_range_0)._M_current;
      __for_end_0._M_current = std::vector<unsigned long>::end(__for_range_0)._M_current;
      while ( __gnu_cxx::operator!=<unsigned long *,std::vector<unsigned long>>(&__for_begin_0, &__for_end_0) )
      {
        v8 = __gnu_cxx::__normal_iterator<unsigned long *,std::vector<unsigned long>>::operator*(&__for_begin_0);
        if ( *(_BYTE *)(((unsigned __int64)v8 >> 3) + 0x7FFF8000) )
          v8 = (uint64_t *)__asan_report_load8(v8);
        guid = *v8;
        v9 = google::protobuf::Map<unsigned int,proto::AvatarTeam>::operator[](
               avatar_team_map,
               (const google::protobuf::Map<unsigned int,proto::AvatarTeam>::key_type *)(v1 + 48));
        proto::AvatarTeam::add_avatar_guid_list(v9, guid);
        __gnu_cxx::__normal_iterator<unsigned long *,std::vector<unsigned long>>::operator++(&__for_begin_0);
      }
      std::_Rb_tree_iterator<std::pair<unsigned int const,AvatarTeam>>::operator++(&__for_begin);
    }
    __for_range_1 = &this->temp_avatar_guid_set_;
    __for_begin_0._M_current = (unsigned __int64 *)std::unordered_set<unsigned long>::begin(&this->temp_avatar_guid_set_)._M_cur;
    __for_end_0._M_current = (unsigned __int64 *)std::unordered_set<unsigned long>::end(__for_range_1)._M_cur;
    while ( std::__detail::operator!=<unsigned long,false>(
              (const std::__detail::_Node_iterator_base<long unsigned int,false> *)&__for_begin_0,
              (const std::__detail::_Node_iterator_base<long unsigned int,false> *)&__for_end_0) )
    {
      v10 = (unsigned __int64 *)std::__detail::_Node_iterator<unsigned long,true,false>::operator*((const std::__detail::_Node_iterator<long unsigned int,true,false> *const)&__for_begin_0);
      if ( *(_BYTE *)(((unsigned __int64)v10 >> 3) + 0x7FFF8000) )
        v10 = (unsigned __int64 *)__asan_report_load8(v10);
      guid_0 = *v10;
      v11 = std::__shared_ptr_access<proto::AvatarDataNotify,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<proto::AvatarDataNotify,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v1 + 64));
      proto::AvatarDataNotify::add_temp_avatar_guid_list(v11, guid_0);
      std::__detail::_Node_iterator<unsigned long,true,false>::operator++((std::__detail::_Node_iterator<long unsigned int,true,false> *const)&__for_begin_0);
    }
    v12 = std::__shared_ptr_access<proto::AvatarDataNotify,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<proto::AvatarDataNotify,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v1 + 64));
    if ( *(_BYTE *)(((unsigned __int64)&this->cur_avatar_team_id_ >> 3) + 0x7FFF8000) != 0
      && *(_BYTE *)(((unsigned __int64)&this->cur_avatar_team_id_ >> 3) + 0x7FFF8000) <= 3 )
    {
      __asan_report_load4(&this->cur_avatar_team_id_);
    }
    proto::AvatarDataNotify::set_cur_avatar_team_id(v12, this->cur_avatar_team_id_);
    v13 = std::__shared_ptr_access<proto::AvatarDataNotify,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<proto::AvatarDataNotify,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v1 + 64));
    ChooseAvatarGuid = PlayerAvatarComp::getChooseAvatarGuid(this);
    proto::AvatarDataNotify::set_choose_avatar_guid(v13, ChooseAvatarGuid);
    __for_range_2 = &this->owned_flycloak_set_;
    __for_begin_0._M_current = (unsigned __int64 *)std::set<unsigned int>::begin(&this->owned_flycloak_set_)._M_node;
    __for_end_0._M_current = (unsigned __int64 *)std::set<unsigned int>::end(__for_range_2)._M_node;
    while ( std::operator!=(
              (const std::_Rb_tree_const_iterator<unsigned int>::_Self *)&__for_begin_0,
              (const std::_Rb_tree_const_iterator<unsigned int>::_Self *)&__for_end_0) )
    {
      v15 = (unsigned int *)std::_Rb_tree_const_iterator<unsigned int>::operator*((const std::_Rb_tree_const_iterator<unsigned int> *const)&__for_begin_0);
      v16 = v15;
      if ( *(_BYTE *)(((unsigned __int64)v15 >> 3) + 0x7FFF8000) != 0
        && (char)(((unsigned __int8)v15 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)v15 >> 3) + 0x7FFF8000) )
      {
        __asan_report_load4(v15);
      }
      flycloak_id = *v16;
      v17 = std::__shared_ptr_access<proto::AvatarDataNotify,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<proto::AvatarDataNotify,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v1 + 64));
      proto::AvatarDataNotify::add_owned_flycloak_list(v17, flycloak_id);
      std::_Rb_tree_const_iterator<unsigned int>::operator++((std::_Rb_tree_const_iterator<unsigned int> *const)&__for_begin_0);
    }
    __for_range_3 = &this->owned_costume_set_;
    __for_begin_0._M_current = (unsigned __int64 *)std::set<unsigned int>::begin(&this->owned_costume_set_)._M_node;
    __for_end_0._M_current = (unsigned __int64 *)std::set<unsigned int>::end(__for_range_3)._M_node;
    while ( std::operator!=(
              (const std::_Rb_tree_const_iterator<unsigned int>::_Self *)&__for_begin_0,
              (const std::_Rb_tree_const_iterator<unsigned int>::_Self *)&__for_end_0) )
    {
      v18 = (unsigned int *)std::_Rb_tree_const_iterator<unsigned int>::operator*((const std::_Rb_tree_const_iterator<unsigned int> *const)&__for_begin_0);
      v19 = v18;
      if ( *(_BYTE *)(((unsigned __int64)v18 >> 3) + 0x7FFF8000) != 0
        && (char)(((unsigned __int8)v18 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)v18 >> 3) + 0x7FFF8000) )
      {
        __asan_report_load4(v18);
      }
      costume_id = *v19;
      v20 = std::__shared_ptr_access<proto::AvatarDataNotify,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<proto::AvatarDataNotify,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v1 + 64));
      proto::AvatarDataNotify::add_owned_costume_list(v20, costume_id);
      std::_Rb_tree_const_iterator<unsigned int>::operator++((std::_Rb_tree_const_iterator<unsigned int> *const)&__for_begin_0);
    }
    __for_range_4 = &this->backup_team_id_order_list_;
    __for_begin_0._M_current = (unsigned __int64 *)std::list<unsigned int>::begin(&this->backup_team_id_order_list_)._M_node;
    __for_end_0._M_current = (unsigned __int64 *)std::list<unsigned int>::end(__for_range_4)._M_node;
    while ( std::operator!=(
              (const std::_List_iterator<unsigned int>::_Self *)&__for_begin_0,
              (const std::_List_iterator<unsigned int>::_Self *)&__for_end_0) )
    {
      v21 = std::_List_iterator<unsigned int>::operator*((const std::_List_iterator<unsigned int> *const)&__for_begin_0);
      v22 = v21;
      if ( *(_BYTE *)(((unsigned __int64)v21 >> 3) + 0x7FFF8000) != 0
        && (char)(((unsigned __int8)v21 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)v21 >> 3) + 0x7FFF8000) )
      {
        __asan_report_load4(v21);
      }
      backup_team_id = *v22;
      v23 = std::__shared_ptr_access<proto::AvatarDataNotify,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<proto::AvatarDataNotify,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v1 + 64));
      proto::AvatarDataNotify::add_backup_avatar_team_order_list(v23, backup_team_id);
      std::_List_iterator<unsigned int>::operator++((std::_List_iterator<unsigned int> *const)&__for_begin_0);
    }
    __for_range_5 = &this->avatar_rename_data_map_;
    __for_begin_0._M_current = (unsigned __int64 *)std::map<unsigned int,AvatarRenameData>::begin(&this->avatar_rename_data_map_)._M_node;
    __for_end_0._M_current = (unsigned __int64 *)std::map<unsigned int,AvatarRenameData>::end(__for_range_5)._M_node;
    while ( std::operator!=(
              (const std::_Rb_tree_iterator<std::pair<unsigned int const,AvatarRenameData> >::_Self *)&__for_begin_0,
              (const std::_Rb_tree_iterator<std::pair<unsigned int const,AvatarRenameData> >::_Self *)&__for_end_0) )
    {
      v46 = std::_Rb_tree_iterator<std::pair<unsigned int const,AvatarRenameData>>::operator*((const std::_Rb_tree_iterator<std::pair<unsigned int const,AvatarRenameData> > *const)&__for_begin_0);
      avatar_id = std::get<0ul,unsigned int const,AvatarRenameData>(v46);
      rename_data = (std::tuple_element<1,const std::pair<unsigned int const,AvatarRenameData> >::type *)std::get<1ul,unsigned int const,AvatarRenameData>(v46);
      v24 = std::__shared_ptr_access<proto::AvatarDataNotify,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<proto::AvatarDataNotify,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v1 + 64));
      rename_info = proto::AvatarDataNotify::add_avatar_rename_list(v24);
      AvatarRenameData::toClient(rename_data, rename_info);
      std::_Rb_tree_iterator<std::pair<unsigned int const,AvatarRenameData>>::operator++((std::_Rb_tree_iterator<std::pair<unsigned int const,AvatarRenameData> > *const)&__for_begin_0);
    }
    if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
      __asan_report_load8(&this->player_);
    player = this->player_;
    std::dynamic_pointer_cast<google::protobuf::Message const,proto::AvatarDataNotify>(&__r);
    Player::sendMessage(player, (common::minet::ConstMessagePtr *)&__r, 0LL);
    std::shared_ptr<google::protobuf::Message const>::~shared_ptr((std::shared_ptr<const google::protobuf::Message> *const)&__r);
    common::tools::perf::make_shared<proto::AvatarExpeditionDataNotify>();
    v26 = std::__shared_ptr_access<proto::AvatarExpeditionDataNotify,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<proto::AvatarExpeditionDataNotify,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v1 + 96));
    expedition_info_map = proto::AvatarExpeditionDataNotify::mutable_expedition_info_map(v26);
    std::function<ForeachPolicy ()(FormalAvatar const&)>::function<PlayerAvatarComp::notifyAllData(void)::{lambda(FormalAvatar const&)#2},void,void>(
      (std::function<ForeachPolicy(const FormalAvatar&)> *const)&p_func,
      (PlayerAvatarComp::notifyAllData::<lambda(const FormalAvatar&)>)expedition_info_map);
    PlayerAvatarComp::foreachFormalAvatar(this, (std::function<ForeachPolicy(const FormalAvatar&)> *)&p_func);
    std::function<ForeachPolicy ()(FormalAvatar const&)>::~function((std::function<ForeachPolicy(const FormalAvatar&)> *const)&p_func);
    if ( !google::protobuf::Map<unsigned long,proto::AvatarExpeditionInfo>::empty(expedition_info_map) )
    {
      if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
        __asan_report_load8(&this->player_);
      v27 = this->player_;
      std::dynamic_pointer_cast<google::protobuf::Message const,proto::AvatarExpeditionDataNotify>((const std::shared_ptr<proto::AvatarExpeditionDataNotify> *)&__r);
      Player::sendMessage(v27, (common::minet::ConstMessagePtr *)&__r, 0LL);
      std::shared_ptr<google::protobuf::Message const>::~shared_ptr((std::shared_ptr<const google::protobuf::Message> *const)&__r);
    }
    common::tools::perf::make_shared<proto::AvatarSatiationDataNotify>();
    std::shared_ptr<proto::AvatarSatiationDataNotify>::shared_ptr(
      (std::shared_ptr<proto::AvatarSatiationDataNotify> *const)&__r,
      (const std::shared_ptr<proto::AvatarSatiationDataNotify> *)(v1 + 128));
    std::function<ForeachPolicy ()(Avatar const&)>::function<PlayerAvatarComp::notifyAllData(void)::{lambda(Avatar const&)#3},void,void>(
      &p_func,
      (PlayerAvatarComp::notifyAllData::<lambda(const Avatar&)>_0 *)&__r);
    PlayerAvatarComp::foreachAvatar(this, &p_func);
    std::function<ForeachPolicy ()(Avatar const&)>::~function(&p_func);
    PlayerAvatarComp::notifyAllData(void)::{lambda(Avatar const&)#3}::~Avatar((PlayerAvatarComp::notifyAllData::<lambda(const Avatar&)>_0 *const)&__r);
    if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
      __asan_report_load8(&this->player_);
    v28 = this->player_;
    std::dynamic_pointer_cast<google::protobuf::Message const,proto::AvatarSatiationDataNotify>((const std::shared_ptr<proto::AvatarSatiationDataNotify> *)&__r);
    Player::sendMessage(v28, (common::minet::ConstMessagePtr *)&__r, 0LL);
    std::shared_ptr<google::protobuf::Message const>::~shared_ptr((std::shared_ptr<const google::protobuf::Message> *const)&__r);
    v4 = 0;
    std::shared_ptr<proto::AvatarSatiationDataNotify>::~shared_ptr((std::shared_ptr<proto::AvatarSatiationDataNotify> *const)(v1 + 128));
    std::shared_ptr<proto::AvatarExpeditionDataNotify>::~shared_ptr((std::shared_ptr<proto::AvatarExpeditionDataNotify> *const)(v1 + 96));
  }
  std::shared_ptr<proto::AvatarDataNotify>::~shared_ptr((std::shared_ptr<proto::AvatarDataNotify> *const)(v1 + 64));
  result = v4;
  if ( v57 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0LL;
    *(_DWORD *)((v1 >> 3) + 0x7FFF8010) = 0;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v1 >> 3) + 0x7FFF8010) = -168430091;
  }
  return result;
};

// Line 872: range 000000001716B0EE-000000001716B210
ForeachPolicy __cdecl PlayerAvatarComp::notifyAllData(void)::{lambda(Avatar const&)#1}::operator()(
        const PlayerAvatarComp::notifyAllData::<lambda(const Avatar&)> *const __closure,
        const Avatar *avatar)
{
  EquipComp *EquipComp; // rax
  std::__shared_ptr_access<proto::AvatarDataNotify,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v3; // rax
  unsigned __int64 v4; // rax
  proto::AvatarInfo *avatar_info; // [rsp+18h] [rbp-38h]
  common::milog::MiLogStream v7; // [rsp+20h] [rbp-30h] BYREF

  EquipComp = Avatar::getEquipComp(avatar);
  EquipComp::updateAffixCdTime(EquipComp);
  v3 = std::__shared_ptr_access<proto::AvatarDataNotify,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<proto::AvatarDataNotify,(__gnu_cxx::_Lock_policy)2,false,false> *const)__closure);
  avatar_info = proto::AvatarDataNotify::add_avatar_list(v3);
  if ( *(_BYTE *)(((unsigned __int64)avatar >> 3) + 0x7FFF8000) )
    __asan_report_load8(avatar);
  v4 = *(_QWORD *)avatar->baseclass_0 + 472LL;
  if ( *(_BYTE *)((v4 >> 3) + 0x7FFF8000) )
    v4 = __asan_report_load8(*(_QWORD *)avatar->baseclass_0 + 472LL);
  if ( !(*(unsigned int (__fastcall **)(const Avatar *, proto::AvatarInfo *))v4)(avatar, avatar_info) )
    return 0;
  common::milog::MiLogStream::create(
    &v7,
    &common::milog::MiLogDefault::default_log_obj_,
    3u,
    "./src/player/avatar/player_avatar_comp.cpp",
    "operator()",
    878);
  common::milog::MiLogStream::operator<<<char [15],(char *[15])0>(&v7, (const char (*)[15])"toClient fails");
  common::milog::MiLogStream::~MiLogStream(&v7);
  return 1;
};

// Line 872: range 00000000171F29CE-00000000171F29F3
void __cdecl PlayerAvatarComp::notifyAllData(void)::{lambda(Avatar const&)#1}::Avatar(
        PlayerAvatarComp::notifyAllData::<lambda(const Avatar&)> *const this,
        PlayerAvatarComp::notifyAllData::<lambda(const Avatar&)> *a2)
{
  std::shared_ptr<proto::AvatarDataNotify>::shared_ptr(&this->__notify_ptr, &a2->__notify_ptr);
};

// Line 872: range 00000000171F2ABE-00000000171F2AE3
void __cdecl PlayerAvatarComp::notifyAllData(void)::{lambda(Avatar const&)#1}::Avatar(
        PlayerAvatarComp::notifyAllData::<lambda(const Avatar&)> *const this,
        const PlayerAvatarComp::notifyAllData::<lambda(const Avatar&)> *a2)
{
  std::shared_ptr<proto::AvatarDataNotify>::shared_ptr(&this->__notify_ptr, &a2->__notify_ptr);
};

// Line 872: range 000000001716B212-000000001716B22C
void __cdecl PlayerAvatarComp::notifyAllData(void)::{lambda(Avatar const&)#1}::~Avatar(
        PlayerAvatarComp::notifyAllData::<lambda(const Avatar&)> *const this)
{
  std::shared_ptr<proto::AvatarDataNotify>::~shared_ptr(&this->__notify_ptr);
};

// Line 938: range 000000001716B22E-000000001716B2AF
ForeachPolicy __cdecl PlayerAvatarComp::notifyAllData(void)::{lambda(FormalAvatar const&)#2}::operator()(
        const PlayerAvatarComp::notifyAllData::<lambda(const FormalAvatar&)> *const __closure,
        const FormalAvatar *formal_avatar)
{
  ExpeditionComp *ExpeditionComp; // r12
  google::protobuf::Map<long unsigned int,proto::AvatarExpeditionInfo> *expedition_info_map; // rbx
  proto::AvatarExpeditionInfo *v4; // rax
  google::protobuf::Map<long unsigned int,proto::AvatarExpeditionInfo>::key_type key[3]; // [rsp+18h] [rbp-18h] BYREF

  ExpeditionComp = FormalAvatar::getExpeditionComp(formal_avatar);
  if ( *(_BYTE *)(((unsigned __int64)__closure >> 3) + 0x7FFF8000) )
    __asan_report_load8(__closure);
  expedition_info_map = __closure->__expedition_info_map;
  key[0] = Avatar::getGuid(formal_avatar);
  v4 = google::protobuf::Map<unsigned long,proto::AvatarExpeditionInfo>::operator[](expedition_info_map, key);
  ExpeditionComp::toClientInfo(ExpeditionComp, v4);
  return 0;
};

// Line 950: range 000000001716B2B0-000000001716B2EC
ForeachPolicy __cdecl PlayerAvatarComp::notifyAllData(void)::{lambda(Avatar const&)#3}::operator()(
        const PlayerAvatarComp::notifyAllData::<lambda(const Avatar&)>_0 *const __closure,
        const Avatar *avatar)
{
  proto::AvatarSatiationDataNotify *v2; // rax
  proto::AvatarSatiationData *v3; // rdx

  v2 = std::__shared_ptr_access<proto::AvatarSatiationDataNotify,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<proto::AvatarSatiationDataNotify,(__gnu_cxx::_Lock_policy)2,false,false> *const)__closure);
  v3 = proto::AvatarSatiationDataNotify::add_satiation_data_list(v2);
  Avatar::getProtoSatiationData(avatar, v3);
  return 0;
};

// Line 950: range 00000000171F2D42-00000000171F2D67
void __cdecl PlayerAvatarComp::notifyAllData(void)::{lambda(Avatar const&)#3}::Avatar(
        PlayerAvatarComp::notifyAllData::<lambda(const Avatar&)>_0 *const this,
        PlayerAvatarComp::notifyAllData::<lambda(const Avatar&)>_0 *a2)
{
  std::shared_ptr<proto::AvatarSatiationDataNotify>::shared_ptr(
    &this->__satiation_data_notify_ptr,
    &a2->__satiation_data_notify_ptr);
};

// Line 950: range 00000000171F2E32-00000000171F2E57
void __cdecl PlayerAvatarComp::notifyAllData(void)::{lambda(Avatar const&)#3}::Avatar(
        PlayerAvatarComp::notifyAllData::<lambda(const Avatar&)>_0 *const this,
        const PlayerAvatarComp::notifyAllData::<lambda(const Avatar&)>_0 *a2)
{
  std::shared_ptr<proto::AvatarSatiationDataNotify>::shared_ptr(
    &this->__satiation_data_notify_ptr,
    &a2->__satiation_data_notify_ptr);
};

// Line 950: range 000000001716B2EE-000000001716B308
void __cdecl PlayerAvatarComp::notifyAllData(void)::{lambda(Avatar const&)#3}::~Avatar(
        PlayerAvatarComp::notifyAllData::<lambda(const Avatar&)>_0 *const this)
{
  std::shared_ptr<proto::AvatarSatiationDataNotify>::~shared_ptr(&this->__satiation_data_notify_ptr);
};

// Line 961: range 000000001716BF6A-000000001716BF78
int32_t __cdecl PlayerAvatarComp::onFirstLogin(PlayerAvatarComp *const this)
{
  return 0;
};

// Line 1000: range 000000001716BF7A-000000001716C463
int32_t __cdecl PlayerAvatarComp::onDisconnect(PlayerAvatarComp *const this)
{
  unsigned __int64 v1; // rbx
  __int64 v2; // rax
  unsigned __int64 v3; // r12
  Buff *v4; // r14
  PlayerBasicComp *BasicComp; // rax
  uint64_t PlayerTimeMs; // rax
  const std::pair<long unsigned int const,std::shared_ptr<Avatar> > *v7; // rax
  unsigned __int64 v8; // rax
  unsigned __int64 v9; // rdx
  unsigned __int64 v10; // rax
  unsigned __int64 v11; // rdx
  __int64 v12; // rsi
  __int64 v13; // rdx
  int32_t result; // eax
  std::multimap<unsigned int,std::shared_ptr<Buff>>::iterator __for_begin; // [rsp+18h] [rbp-D8h] BYREF
  std::multimap<unsigned int,std::shared_ptr<Buff>>::iterator __for_end; // [rsp+20h] [rbp-D0h] BYREF
  std::multimap<unsigned int,std::shared_ptr<Buff>> *__for_range; // [rsp+28h] [rbp-C8h]
  std::map<long unsigned int,std::shared_ptr<Avatar>> *__for_range_0; // [rsp+30h] [rbp-C0h]
  std::tuple_element<0,std::pair<long unsigned int const,std::shared_ptr<Avatar> > >::type *guid; // [rsp+38h] [rbp-B8h]
  std::tuple_element<1,std::pair<long unsigned int const,std::shared_ptr<Avatar> > >::type *avatar_ptr; // [rsp+40h] [rbp-B0h]
  std::pair<unsigned int const,std::shared_ptr<Buff> > *__in; // [rsp+48h] [rbp-A8h]
  std::tuple_element<0,std::pair<unsigned int const,std::shared_ptr<Buff> > >::type *_; // [rsp+50h] [rbp-A0h]
  std::tuple_element<1,std::pair<unsigned int const,std::shared_ptr<Buff> > >::type *buff_ptr; // [rsp+58h] [rbp-98h]
  std::pair<long unsigned int const,std::shared_ptr<Avatar> > v24; // [rsp+60h] [rbp-90h] BYREF
  char v25[112]; // [rsp+80h] [rbp-70h] BYREF

  v1 = (unsigned __int64)v25;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_0(64LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "1 32 16 19 cur_avatar_ptr:1019";
  *(_QWORD *)(v1 + 16) = PlayerAvatarComp::onDisconnect;
  v3 = v1 >> 3;
  *(_DWORD *)(v3 + 2147450880) = -235802127;
  *(_DWORD *)(v3 + 2147450884) = -202178560;
  __for_range = &this->avatar_team_buff_mmap_;
  __for_begin._M_node = std::multimap<unsigned int,std::shared_ptr<Buff>>::begin(&this->avatar_team_buff_mmap_)._M_node;
  __for_end._M_node = std::multimap<unsigned int,std::shared_ptr<Buff>>::end(&this->avatar_team_buff_mmap_)._M_node;
  while ( std::operator!=(&__for_begin, &__for_end) )
  {
    __in = std::_Rb_tree_iterator<std::pair<unsigned int const,std::shared_ptr<Buff>>>::operator*(&__for_begin);
    _ = std::get<0ul,unsigned int const,std::shared_ptr<Buff>>(__in);
    buff_ptr = std::get<1ul,unsigned int const,std::shared_ptr<Buff>>(__in);
    if ( std::operator!=<Buff>(buff_ptr, 0LL) )
    {
      v4 = std::__shared_ptr_access<Buff,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Buff,(__gnu_cxx::_Lock_policy)2,false,false> *const)buff_ptr);
      if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
        __asan_report_load8(&this->player_);
      BasicComp = Player::getBasicComp(this->player_);
      PlayerTimeMs = PlayerBasicComp::getPlayerTimeMs(BasicComp);
      Buff::pause(v4, PlayerTimeMs);
    }
    std::_Rb_tree_iterator<std::pair<unsigned int const,std::shared_ptr<Buff>>>::operator++(&__for_begin);
  }
  if ( *(char *)(((unsigned __int64)&this->is_team_buff_recovered_ >> 3) + 0x7FFF8000) < 0 )
    __asan_report_store1(&this->is_team_buff_recovered_, &__for_end, &this->is_team_buff_recovered_);
  this->is_team_buff_recovered_ = 0;
  std::vector<unsigned long>::clear(&this->quest_lock_team_avatar_guid_vec_);
  __for_range_0 = &this->avatar_map_;
  __for_begin._M_node = std::map<unsigned long,std::shared_ptr<Avatar>>::begin(&this->avatar_map_)._M_node;
  __for_end._M_node = std::map<unsigned long,std::shared_ptr<Avatar>>::end(__for_range_0)._M_node;
  while ( std::operator!=(
            (const std::_Rb_tree_iterator<std::pair<long unsigned int const,std::shared_ptr<Avatar> > >::_Self *)&__for_begin,
            (const std::_Rb_tree_iterator<std::pair<long unsigned int const,std::shared_ptr<Avatar> > >::_Self *)&__for_end) )
  {
    v7 = std::_Rb_tree_iterator<std::pair<unsigned long const,std::shared_ptr<Avatar>>>::operator*((const std::_Rb_tree_iterator<std::pair<long unsigned int const,std::shared_ptr<Avatar> > > *const)&__for_begin);
    std::pair<unsigned long const,std::shared_ptr<Avatar>>::pair(&v24, v7);
    guid = std::get<0ul,unsigned long const,std::shared_ptr<Avatar>>(&v24);
    avatar_ptr = std::get<1ul,unsigned long const,std::shared_ptr<Avatar>>(&v24);
    v8 = (unsigned __int64)std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false> *const)avatar_ptr);
    if ( *(_BYTE *)((v8 >> 3) + 0x7FFF8000) )
      v8 = __asan_report_load8(v8);
    v9 = *(_QWORD *)v8 + 432LL;
    if ( *(_BYTE *)((v9 >> 3) + 0x7FFF8000) )
      v8 = __asan_report_load8(*(_QWORD *)v8 + 432LL);
    (*(void (__fastcall **)(unsigned __int64))v9)(v8);
    std::pair<unsigned long const,std::shared_ptr<Avatar>>::~pair(&v24);
    std::_Rb_tree_iterator<std::pair<unsigned long const,std::shared_ptr<Avatar>>>::operator++((std::_Rb_tree_iterator<std::pair<long unsigned int const,std::shared_ptr<Avatar> > > *const)&__for_begin);
  }
  if ( std::operator!=<Avatar>(&this->cur_avatar_ptr_, 0LL) )
  {
    std::shared_ptr<Avatar>::shared_ptr((std::shared_ptr<Avatar> *const)(v1 + 32), &this->cur_avatar_ptr_);
    v10 = (unsigned __int64)std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v1 + 32));
    if ( *(_BYTE *)((v10 >> 3) + 0x7FFF8000) )
      v10 = __asan_report_load8(v10);
    v11 = *(_QWORD *)v10 + 128LL;
    if ( *(_BYTE *)((v11 >> 3) + 0x7FFF8000) )
      v10 = __asan_report_load8(*(_QWORD *)v10 + 128LL);
    (*(void (__fastcall **)(unsigned __int64, VisionContext *))v11)(v10, &VisionContext::miss_context);
    std::shared_ptr<Avatar>::~shared_ptr((std::shared_ptr<Avatar> *const)(v1 + 32));
  }
  v12 = ((_BYTE)this + 116) & 7;
  v13 = (*(_BYTE *)(((unsigned __int64)&this->is_reconnect_flag_ >> 3) + 0x7FFF8000) != 0) & (unsigned __int8)((char)v12 >= *(_BYTE *)(((unsigned __int64)&this->is_reconnect_flag_ >> 3) + 0x7FFF8000));
  if ( (_BYTE)v13 )
    __asan_report_store1(&this->is_reconnect_flag_, v12, v13);
  this->is_reconnect_flag_ = 1;
  PlayerAvatarComp::checkAndFlushRecordedMoveSpeedOverLimitLog(this, 1);
  PlayerAvatarComp::checkAndFlushRecordedSceneTimeMoveSpeedOverLimitLog(this, 1);
  PlayerAvatarComp::clearFrameAttackCountOnDisconnect(this);
  result = 0;
  if ( v25 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 1036: range 000000001716C464-000000001716C9B9
__int64 __fastcall PlayerAvatarComp::setBornAvatar(PlayerAvatarComp *const this, __int64 avatar_id)
{
  unsigned __int64 v2; // r12
  __int64 v3; // rax
  _DWORD *v4; // r13
  unsigned int v5; // r14d
  common::milog::MiLogStream *v6; // rax
  AvatarTeam *v7; // rax
  common::milog::MiLogStream *v8; // rax
  common::milog::MiLogStream *v9; // rax
  common::milog::MiLogStream *v10; // r14
  std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v11; // rax
  uint64_t Guid; // rax
  std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v13; // rax
  __int64 Now; // rsi
  __int64 result; // rax
  unsigned int val; // [rsp+1Ch] [rbp-D4h] BYREF
  std::vector<long unsigned int>::value_type __x; // [rsp+20h] [rbp-D0h] BYREF
  std::vector<long unsigned int> *avatar_team_vec; // [rsp+28h] [rbp-C8h]
  std::shared_ptr<FormalAvatar> __r; // [rsp+30h] [rbp-C0h] BYREF
  common::milog::MiLogStream v20; // [rsp+40h] [rbp-B0h] BYREF
  char v21[144]; // [rsp+60h] [rbp-90h] BYREF

  v2 = (unsigned __int64)v21;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_1(96LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "2 48 4 14 avatar_id:1035 64 16 15 avatar_ptr:1053";
  *(_QWORD *)(v2 + 16) = PlayerAvatarComp::setBornAvatar;
  v4 = (_DWORD *)(v2 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = -234556943;
  v4[536862722] = -202178560;
  *(_DWORD *)(v2 + 48) = avatar_id;
  if ( PlayerAvatarComp::getAvatarCount(this) )
  {
    common::milog::MiLogStream::create(
      &v20,
      &common::milog::MiLogDefault::default_log_obj_,
      4u,
      "./src/player/avatar/player_avatar_comp.cpp",
      "setBornAvatar",
      1040);
    common::milog::MiLogStream::operator()(&v20, off_2603B0C0);
    common::milog::MiLogStream::~MiLogStream(&v20);
    v5 = -1;
  }
  else if ( *(_DWORD *)(v2 + 48) == 10000007 || *(_DWORD *)(v2 + 48) == 10000005 )
  {
    if ( *(_BYTE *)(((unsigned __int64)&this->cur_avatar_team_id_ >> 3) + 0x7FFF8000) != 0
      && *(_BYTE *)(((unsigned __int64)&this->cur_avatar_team_id_ >> 3) + 0x7FFF8000) <= 3 )
    {
      __asan_report_store4(&this->cur_avatar_team_id_, avatar_id, &this->cur_avatar_team_id_);
    }
    this->cur_avatar_team_id_ = 1;
    v7 = std::map<unsigned int,AvatarTeam>::operator[](&this->avatar_team_map_, &PlayerAvatarComp::INIT_TEAM_ID);
    avatar_team_vec = AvatarTeam::getAvatarVec(v7);
    PlayerAvatarComp::addFormalAvatar((PlayerAvatarComp *const)&__r, (uint32_t)this, *(_DWORD *)(v2 + 48), 0, 1u);
    std::shared_ptr<Avatar>::shared_ptr<FormalAvatar,void>((std::shared_ptr<Avatar> *const)(v2 + 64), &__r);
    std::shared_ptr<FormalAvatar>::~shared_ptr(&__r);
    if ( std::operator==<Avatar>(0LL, (const std::shared_ptr<Avatar> *)(v2 + 64)) )
    {
      common::milog::MiLogStream::create(
        &v20,
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/player/avatar/player_avatar_comp.cpp",
        "setBornAvatar",
        1056);
      v8 = common::milog::MiLogStream::operator<<<char [34],(char *[34])0>(
             &v20,
             (const char (*)[34])"addFormalAvatar fails, avatar_id:");
      v9 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v8, (const unsigned int *)(v2 + 48));
      v10 = common::milog::MiLogStream::operator<<<char [6],(char *[6])0>(v9, (const char (*)[6])" uid:");
      if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
        __asan_report_load8(&this->player_);
      val = Player::getUid(this->player_);
      common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v10, &val);
      common::milog::MiLogStream::~MiLogStream(&v20);
      v5 = -1;
    }
    else
    {
      if ( std::operator==<Avatar>(&this->cur_avatar_ptr_, 0LL) )
        std::shared_ptr<Avatar>::operator=(&this->cur_avatar_ptr_, (const std::shared_ptr<Avatar> *)(v2 + 64));
      v11 = std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 64));
      Guid = Avatar::getGuid(v11);
      PlayerAvatarComp::setChooseAvatarGuid(this, Guid);
      v13 = std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 64));
      __x = Avatar::getGuid(v13);
      std::vector<unsigned long>::push_back(avatar_team_vec, &__x);
      Now = (unsigned int)common::tools::TimeUtils::getNow();
      if ( *(_BYTE *)(((unsigned __int64)&this->last_backgroud_avatar_recover_time_ >> 3) + 0x7FFF8000) != 0
        && *(_BYTE *)(((unsigned __int64)&this->last_backgroud_avatar_recover_time_ >> 3) + 0x7FFF8000) <= 3 )
      {
        __asan_report_store4(
          &this->last_backgroud_avatar_recover_time_,
          Now,
          &this->last_backgroud_avatar_recover_time_);
      }
      this->last_backgroud_avatar_recover_time_ = Now;
      if ( *(_BYTE *)(((unsigned __int64)&this->spring_auto_use_percent_ >> 3) + 0x7FFF8000) != 0
        && *(_BYTE *)(((unsigned __int64)&this->spring_auto_use_percent_ >> 3) + 0x7FFF8000) <= 3 )
      {
        __asan_report_store4(&this->spring_auto_use_percent_, Now, &this->spring_auto_use_percent_);
      }
      this->spring_auto_use_percent_ = 50;
      v5 = 0;
    }
    std::shared_ptr<Avatar>::~shared_ptr((std::shared_ptr<Avatar> *const)(v2 + 64));
  }
  else
  {
    common::milog::MiLogStream::create(
      &v20,
      &common::milog::MiLogDefault::default_log_obj_,
      4u,
      "./src/player/avatar/player_avatar_comp.cpp",
      "setBornAvatar",
      1046);
    v6 = common::milog::MiLogStream::operator<<<char [32],(char *[32])0>(
           &v20,
           (const char (*)[32])"invalid born avatar, avatar_id:");
    common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v6, (const unsigned int *)(v2 + 48));
    common::milog::MiLogStream::~MiLogStream(&v20);
    v5 = -1;
  }
  result = v5;
  if ( v21 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8008) = 0;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8008) = -168430091;
  }
  return result;
};

// Line 1072: range 000000001716C9BA-000000001716DB5B
__int64 __fastcall PlayerAvatarComp::checkAvatarUpgrade(
        PlayerAvatarComp *const this,
        uint64_t avatar_guid,
        uint32_t item_id,
        uint32_t count,
        __m128i a5)
{
  unsigned __int64 v5; // r13
  __int64 v6; // rax
  _DWORD *v7; // r12
  common::milog::MiLogStream *v8; // rax
  unsigned int v9; // r14d
  common::milog::MiLogStream *v10; // rax
  bool isAvatarSwitchClosed; // r14
  std::__shared_ptr_access<FormalAvatar,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v12; // rax
  uint32_t Level; // r14d
  FormalAvatar *v14; // rax
  common::milog::MiLogStream *v15; // r14
  common::milog::MiLogStream *v16; // rax
  common::milog::MiLogStream *v17; // rax
  common::milog::MiLogStream *v18; // rax
  common::milog::MiLogStream *v19; // r14
  std::__shared_ptr_access<FormalAvatar,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v20; // rax
  std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v21; // rax
  common::milog::MiLogStream *v22; // rax
  common::milog::MiLogStream *v23; // rax
  common::milog::MiLogStream *v24; // rax
  std::vector<data::ItemUseConfig>::const_reference v25; // rax
  common::milog::MiLogStream *v26; // rax
  std::vector<data::ItemUseConfig>::const_reference v27; // rax
  common::milog::MiLogStream *v28; // rax
  unsigned __int64 v29; // rax
  unsigned __int64 v30; // rdx
  common::milog::MiLogStream *v31; // r14
  std::__shared_ptr_access<FormalAvatar,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v32; // rax
  std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v33; // rax
  common::milog::MiLogStream *v34; // rax
  common::milog::MiLogStream *v35; // rax
  common::tools::StringStream<common::tools::FixedBuffer<4096> > *v36; // rax
  common::tools::StringStream<common::tools::FixedBuffer<4096> > *v37; // rax
  Player *player; // r14
  float *v39; // rax
  float *v40; // rdx
  const unsigned int *v41; // rax
  _DWORD *v42; // rdx
  PlayerItemComp *ItemComp; // rax
  common::milog::MiLogStream *v44; // rax
  common::milog::MiLogStream *v45; // rax
  common::milog::MiLogStream *v46; // rax
  AvatarExcelConfigMgr *p_avatar_config_mgr; // r14
  FormalAvatar *v48; // rax
  uint32_t MaxLevel; // eax
  FormalAvatar *v50; // rax
  SelectType v51; // r14d
  std::__shared_ptr_access<FormalAvatar,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v53; // rax
  common::milog::MiLogStream *v54; // rax
  common::milog::MiLogStream *v55; // rcx
  common::milog::MiLogStream *v56; // rax
  common::milog::MiLogStream *v57; // rax
  common::milog::MiLogStream *v58; // rax
  common::milog::MiLogStream *v59; // rax
  common::milog::MiLogStream *v60; // rax
  common::milog::MiLogStream *v61; // rax
  common::milog::MiLogStream *v62; // rax
  common::milog::MiLogStream *v63; // rax
  __int64 result; // rax
  float scoin_ratio; // [rsp+28h] [rbp-1A8h]
  int32_t ret; // [rsp+2Ch] [rbp-1A4h]
  const data::MaterialExcelConfig *material_config_ptr; // [rsp+30h] [rbp-1A0h]
  const data::AvatarExcelConfig *avatar_config_ptr; // [rsp+38h] [rbp-198h]
  common::milog::MiLogStream v71; // [rsp+40h] [rbp-190h] BYREF
  char v72[368]; // [rsp+60h] [rbp-170h] BYREF

  v5 = (unsigned __int64)v72;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v6 = __asan_stack_malloc_3(320LL);
    if ( v6 )
      v5 = v6;
  }
  *(_QWORD *)v5 = 1102416563LL;
  *(_QWORD *)(v5 + 8) = "12 32 4 8 exp:1124 48 4 17 quality_type:1138 64 4 12 add_exp:1149 80 4 15 scoin_cost:1150 96 4 1"
                        "2 max_exp:1164 112 4 21 avatar_total_exp:1165 128 4 12 item_id:1071 144 4 10 count:1071 160 8 16"
                        " avatar_guid:1071 192 16 22 formal_avatar_ptr:1079 224 16 8 oss:1143 256 24 19 item_param_vec:1153";
  *(_QWORD *)(v5 + 16) = PlayerAvatarComp::checkAvatarUpgrade;
  v7 = (_DWORD *)(v5 >> 3);
  v7[536862720] = -235802127;
  v7[536862721] = -234556924;
  v7[536862722] = -234556924;
  v7[536862723] = -234556924;
  v7[536862724] = -234556924;
  v7[536862725] = -218959360;
  v7[536862726] = -219021312;
  v7[536862727] = -219021312;
  v7[536862728] = -218103808;
  v7[536862729] = -202116109;
  *(_QWORD *)(v5 + 160) = avatar_guid;
  *(_DWORD *)(v5 + 128) = item_id;
  *(_DWORD *)(v5 + 144) = count;
  if ( *(_DWORD *)(v5 + 144) )
  {
    PlayerAvatarComp::findFormalAvatar((const PlayerAvatarComp *const)(v5 + 192), (uint64_t)this);
    if ( std::operator==<FormalAvatar>((const std::shared_ptr<FormalAvatar> *)(v5 + 192), 0LL) )
    {
      common::milog::MiLogStream::create(
        &v71,
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/player/avatar/player_avatar_comp.cpp",
        "checkAvatarUpgrade",
        1082);
      v10 = common::milog::MiLogStream::operator<<<char [32],(char *[32])0>(
              &v71,
              (const char (*)[32])"findAvatar failed, avatar_guid:");
      common::milog::MiLogStream::operator<<<unsigned long,(unsigned long *)0>(
        v10,
        (const unsigned __int64 *)(v5 + 160));
      common::milog::MiLogStream::~MiLogStream(&v71);
      v9 = -1;
    }
    else
    {
      std::shared_ptr<Avatar>::shared_ptr<FormalAvatar,void>(
        (std::shared_ptr<Avatar> *const)(v5 + 224),
        (const std::shared_ptr<FormalAvatar> *)(v5 + 192));
      isAvatarSwitchClosed = PlayerAvatarComp::isAvatarSwitchClosed(this, (AvatarPtr *)(v5 + 224));
      std::shared_ptr<Avatar>::~shared_ptr((std::shared_ptr<Avatar> *const)(v5 + 224));
      if ( isAvatarSwitchClosed )
      {
        v9 = 142;
      }
      else
      {
        v12 = std::__shared_ptr_access<FormalAvatar,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<FormalAvatar,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v5 + 192));
        Level = Creature::getLevel(v12);
        v14 = std::__shared_ptr_access<FormalAvatar,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<FormalAvatar,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v5 + 192));
        if ( Level < FormalAvatar::getMaxLevel(v14) )
        {
          ServiceBox::findService<GameserverService>();
          GameserverService::getConfig((GameserverService *const)(v5 + 224));
          v21 = std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v5 + 224));
          material_config_ptr = data::MaterialExcelConfigMgrBase::findMaterialExcelConfig(
                                  &v21->design_config.txt_config_mgr.material_config_mgr,
                                  *(_DWORD *)(v5 + 128));
          std::shared_ptr<Config>::~shared_ptr((std::shared_ptr<Config> *const)(v5 + 224));
          if ( material_config_ptr )
          {
            if ( *(_BYTE *)(((unsigned __int64)&material_config_ptr->material_type >> 3) + 0x7FFF8000) != 0
              && (char)((((_BYTE)material_config_ptr + 76) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&material_config_ptr->material_type >> 3)
                                                                                 + 0x7FFF8000) )
            {
              __asan_report_load4(&material_config_ptr->material_type);
            }
            if ( material_config_ptr->material_type == MATERIAL_EXP_FRUIT )
            {
              if ( std::vector<data::ItemUseConfig>::size(&material_config_ptr->item_use) == 1 )
              {
                v25 = std::vector<data::ItemUseConfig>::operator[](&material_config_ptr->item_use, 0LL);
                if ( *(_BYTE *)(((unsigned __int64)&v25->use_op >> 3) + 0x7FFF8000) != 0
                  && *(_BYTE *)(((unsigned __int64)&v25->use_op >> 3) + 0x7FFF8000) <= 3 )
                {
                  v25 = (std::vector<data::ItemUseConfig>::const_reference)__asan_report_load4(&v25->use_op);
                }
                if ( v25->use_op == ITEM_USE_ADD_EXP )
                {
                  *(_DWORD *)(v5 + 32) = 0;
                  v27 = std::vector<data::ItemUseConfig>::operator[](&material_config_ptr->item_use, 0LL);
                  if ( common::tools::StringUtils::strVecToNum<0u,unsigned int>(
                         &v27->use_param,
                         (unsigned int *)(v5 + 32)) )
                  {
                    common::milog::MiLogStream::create(
                      &v71,
                      &common::milog::MiLogDefault::default_log_obj_,
                      3u,
                      "./src/player/avatar/player_avatar_comp.cpp",
                      "checkAvatarUpgrade",
                      1127);
                    v28 = common::milog::MiLogStream::operator<<<char [28],(char *[28])0>(
                            &v71,
                            (const char (*)[28])"strVecToNum fails, item_id:");
                    common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                      v28,
                      (const unsigned int *)(v5 + 128));
                    common::milog::MiLogStream::~MiLogStream(&v71);
                    v9 = -1;
                  }
                  else
                  {
                    v29 = (unsigned __int64)std::__shared_ptr_access<FormalAvatar,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<FormalAvatar,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v5 + 192));
                    if ( *(_BYTE *)((v29 >> 3) + 0x7FFF8000) )
                      v29 = __asan_report_load8(v29);
                    v30 = *(_QWORD *)v29 + 312LL;
                    if ( *(_BYTE *)((v30 >> 3) + 0x7FFF8000) )
                      v29 = __asan_report_load8(*(_QWORD *)v29 + 312LL);
                    avatar_config_ptr = (const data::AvatarExcelConfig *)(*(__int64 (__fastcall **)(unsigned __int64))v30)(v29);
                    if ( avatar_config_ptr )
                    {
                      if ( *(_BYTE *)(((unsigned __int64)&avatar_config_ptr->quality_type >> 3) + 0x7FFF8000) != 0
                        && *(_BYTE *)(((unsigned __int64)&avatar_config_ptr->quality_type >> 3) + 0x7FFF8000) <= 3 )
                      {
                        __asan_report_load4(&avatar_config_ptr->quality_type);
                      }
                      *(_DWORD *)(v5 + 48) = avatar_config_ptr->quality_type;
                      ServiceBox::findService<GameserverService>();
                      GameserverService::getConfig((GameserverService *const)(v5 + 224));
                      v33 = std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v5 + 224));
                      *(float *)a5.m128i_i32 = ConstValueExcelConfigMgr::getAvatarUpgradeCostRatio(
                                                 &v33->design_config.txt_config_mgr.const_value_config_mgr,
                                                 *(data::QualityType *)(v5 + 48));
                      scoin_ratio = COERCE_FLOAT(_mm_cvtsi128_si32(a5));
                      std::shared_ptr<Config>::~shared_ptr((std::shared_ptr<Config> *const)(v5 + 224));
                      if ( std::fabs(scoin_ratio) > 0.00000011920929 )
                      {
                        *(_DWORD *)(v5 + 64) = SAFE_MULTIPLY<unsigned int,unsigned int>(
                                                 *(_DWORD *)(v5 + 32),
                                                 *(_DWORD *)(v5 + 144));
                        *(float *)(v5 + 112) = (float)(int)std::numeric_limits<unsigned int>::max();
                        *(float *)(v5 + 96) = (float)*(int *)(v5 + 64) * scoin_ratio;
                        v39 = (float *)std::min<float>((const float *)(v5 + 96), (const float *)(v5 + 112));
                        v40 = v39;
                        if ( *(_BYTE *)(((unsigned __int64)v39 >> 3) + 0x7FFF8000) != 0
                          && (char)(((unsigned __int8)v39 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)v39 >> 3)
                                                                                + 0x7FFF8000) )
                        {
                          __asan_report_load4(v39);
                        }
                        *(_DWORD *)(v5 + 80) = (int)*v40;
                        *(_DWORD *)(v5 + 112) = 1;
                        v41 = std::max<unsigned int>((const unsigned int *)(v5 + 112), (const unsigned int *)(v5 + 80));
                        v42 = v41;
                        if ( *(_BYTE *)(((unsigned __int64)v41 >> 3) + 0x7FFF8000) != 0
                          && (char)(((unsigned __int8)v41 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)v41 >> 3)
                                                                                + 0x7FFF8000) )
                        {
                          __asan_report_load4(v41);
                        }
                        *(_DWORD *)(v5 + 80) = *v42;
                        std::vector<ItemParam>::vector((std::vector<ItemParam> *const)(v5 + 256));
                        *(_DWORD *)(v5 + 224) = *(_DWORD *)(v5 + 128);
                        *(_DWORD *)(v5 + 228) = *(_DWORD *)(v5 + 144);
                        *(_DWORD *)(v5 + 232) = 0;
                        *(_DWORD *)(v5 + 236) = 0;
                        std::vector<ItemParam>::push_back(
                          (std::vector<ItemParam> *const)(v5 + 256),
                          (std::vector<ItemParam>::value_type *)(v5 + 224));
                        *(_DWORD *)(v5 + 224) = 202;
                        *(_DWORD *)(v5 + 228) = *(_DWORD *)(v5 + 80);
                        *(_DWORD *)(v5 + 232) = 0;
                        *(_DWORD *)(v5 + 236) = 0;
                        std::vector<ItemParam>::push_back(
                          (std::vector<ItemParam> *const)(v5 + 256),
                          (std::vector<ItemParam>::value_type *)(v5 + 224));
                        if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
                          __asan_report_load8(&this->player_);
                        ItemComp = Player::getItemComp(this->player_);
                        ret = PlayerItemComp::checkSubItemBatch(ItemComp, (const std::vector<ItemParam> *)(v5 + 256));
                        if ( ret )
                        {
                          common::milog::MiLogStream::create(
                            &v71,
                            &common::milog::MiLogDefault::default_log_obj_,
                            1u,
                            "./src/player/avatar/player_avatar_comp.cpp",
                            "checkAvatarUpgrade",
                            1159);
                          v44 = common::milog::MiLogStream::operator<<<char [35],(char *[35])0>(
                                  &v71,
                                  (const char (*)[35])"checkSubItemBatch failed, item_id:");
                          v45 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                                  v44,
                                  (const unsigned int *)(v5 + 128));
                          v46 = common::milog::MiLogStream::operator<<<char [8],(char *[8])0>(
                                  v45,
                                  (const char (*)[8])" count:");
                          common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                            v46,
                            (const unsigned int *)(v5 + 144));
                          common::milog::MiLogStream::~MiLogStream(&v71);
                          v9 = ret;
                        }
                        else
                        {
                          ServiceBox::findService<GameserverService>();
                          GameserverService::getConfig((GameserverService *const)(v5 + 224));
                          p_avatar_config_mgr = &std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v5 + 224))->design_config.txt_config_mgr.avatar_config_mgr;
                          v48 = std::__shared_ptr_access<FormalAvatar,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<FormalAvatar,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v5 + 192));
                          MaxLevel = FormalAvatar::getMaxLevel(v48);
                          *(_DWORD *)(v5 + 96) = AvatarExcelConfigMgr::getTotalExpToLevel(p_avatar_config_mgr, MaxLevel);
                          std::shared_ptr<Config>::~shared_ptr((std::shared_ptr<Config> *const)(v5 + 224));
                          v50 = std::__shared_ptr_access<FormalAvatar,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<FormalAvatar,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v5 + 192));
                          *(_DWORD *)(v5 + 112) = FormalAvatar::getTotalExp(v50);
                          if ( *(_DWORD *)(v5 + 32)
                            && (v51 = SAFE_ADD<unsigned int,unsigned int>(*(_DWORD *)(v5 + 96), *(_DWORD *)(v5 + 32)),
                                v51 <= SAFE_ADD<unsigned int,unsigned int>(*(_DWORD *)(v5 + 112), *(_DWORD *)(v5 + 64))) )
                          {
                            common::milog::MiLogStream::create(
                              &v71,
                              &common::milog::MiLogDefault::default_log_obj_,
                              1u,
                              "./src/player/avatar/player_avatar_comp.cpp",
                              "checkAvatarUpgrade",
                              1168);
                            v53 = std::__shared_ptr_access<FormalAvatar,(__gnu_cxx::_Lock_policy)2,false,false>::operator*((const std::__shared_ptr_access<FormalAvatar,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v5 + 192));
                            v54 = common::milog::MiLogStream::operator<<<FormalAvatar,(FormalAvatar*)0>(&v71, v53);
                            v55 = common::milog::MiLogStream::operator<<<char [9],(char *[9])0>(
                                    v54,
                                    (const char (*)[9])" player:");
                            if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
                              __asan_report_load8(&this->player_);
                            v56 = operator<<(v55, this->player_);
                            v57 = common::milog::MiLogStream::operator<<<char [10],(char *[10])0>(
                                    v56,
                                    (const char (*)[10])" max_exp:");
                            v58 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                                    v57,
                                    (const unsigned int *)(v5 + 96));
                            v59 = common::milog::MiLogStream::operator<<<char [6],(char *[6])0>(
                                    v58,
                                    (const char (*)[6])" exp:");
                            v60 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                                    v59,
                                    (const unsigned int *)(v5 + 32));
                            v61 = common::milog::MiLogStream::operator<<<char [19],(char *[19])0>(
                                    v60,
                                    (const char (*)[19])" avatar_total_exp:");
                            v62 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                                    v61,
                                    (const unsigned int *)(v5 + 112));
                            v63 = common::milog::MiLogStream::operator<<<char [10],(char *[10])0>(
                                    v62,
                                    (const char (*)[10])" add_exp:");
                            common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                              v63,
                              (const unsigned int *)(v5 + 64));
                            common::milog::MiLogStream::~MiLogStream(&v71);
                            v9 = -1;
                          }
                          else
                          {
                            v9 = 0;
                          }
                        }
                        std::vector<ItemParam>::~vector((std::vector<ItemParam> *const)(v5 + 256));
                      }
                      else
                      {
                        common::milog::MiLogStream::create(
                          &v71,
                          &common::milog::MiLogDefault::default_log_obj_,
                          4u,
                          "./src/player/avatar/player_avatar_comp.cpp",
                          "checkAvatarUpgrade",
                          1142);
                        v34 = common::milog::MiLogStream::operator<<<char [14],(char *[14])0>(&v71, "quality_type:");
                        v35 = common::milog::MiLogStream::operator<<<data::QualityType,(data::QualityType*)0>(
                                v34,
                                (const data::QualityType *)(v5 + 48));
                        common::milog::MiLogStream::operator<<<char [18],(char *[18])0>(v35, " scoin ratio is 0");
                        common::milog::MiLogStream::~MiLogStream(&v71);
                        common::tools::StringStream<common::tools::FixedBuffer<4096>>::StringStream((common::tools::StringStream<common::tools::FixedBuffer<4096> > *const)(v5 + 224));
                        v36 = common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(
                                (common::tools::StringStream<common::tools::FixedBuffer<4096> > *const)(v5 + 224),
                                aQualityType[0]);
                        v37 = common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(
                                v36,
                                *(_DWORD *)(v5 + 48));
                        common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(
                          v37,
                          aScoinRatioIs0[0]);
                        if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
                          __asan_report_load8(&this->player_);
                        player = this->player_;
                        common::tools::StringStream<common::tools::FixedBuffer<4096>>::str[abi:cxx11](
                          (std::string *)&v71,
                          (common::tools::StringStream<common::tools::FixedBuffer<4096> > *const)(v5 + 224));
                        Player::notifyGMServerLog(player, SERVER_LOG_NONE, LOG_LEVEL_ERROR_0, (const std::string *)&v71);
                        std::string::~string(&v71);
                        v9 = -1;
                        common::tools::StringStream<common::tools::FixedBuffer<4096>>::~StringStream((common::tools::StringStream<common::tools::FixedBuffer<4096> > *const)(v5 + 224));
                      }
                    }
                    else
                    {
                      common::milog::MiLogStream::create(
                        &v71,
                        &common::milog::MiLogDefault::default_log_obj_,
                        3u,
                        "./src/player/avatar/player_avatar_comp.cpp",
                        "checkAvatarUpgrade",
                        1134);
                      v31 = common::milog::MiLogStream::operator<<<char [25],(char *[25])0>(
                              &v71,
                              (const char (*)[25])"getConfig fails, avatar:");
                      v32 = std::__shared_ptr_access<FormalAvatar,(__gnu_cxx::_Lock_policy)2,false,false>::operator*((const std::__shared_ptr_access<FormalAvatar,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v5 + 192));
                      common::milog::MiLogStream::operator<<<FormalAvatar,(FormalAvatar*)0>(v31, v32);
                      common::milog::MiLogStream::~MiLogStream(&v71);
                      v9 = -1;
                    }
                  }
                }
                else
                {
                  common::milog::MiLogStream::create(
                    &v71,
                    &common::milog::MiLogDefault::default_log_obj_,
                    3u,
                    "./src/player/avatar/player_avatar_comp.cpp",
                    "checkAvatarUpgrade",
                    1120);
                  v26 = common::milog::MiLogStream::operator<<<char [51],(char *[51])0>(
                          &v71,
                          (const char (*)[51])"Material UseConfig use_op is not ADD_EXP, item_id:");
                  common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                    v26,
                    (const unsigned int *)(v5 + 128));
                  common::milog::MiLogStream::~MiLogStream(&v71);
                  v9 = -1;
                }
              }
              else
              {
                common::milog::MiLogStream::create(
                  &v71,
                  &common::milog::MiLogDefault::default_log_obj_,
                  3u,
                  "./src/player/avatar/player_avatar_comp.cpp",
                  "checkAvatarUpgrade",
                  1114);
                v24 = common::milog::MiLogStream::operator<<<char [43],(char *[43])0>(
                        &v71,
                        (const char (*)[43])"Material UseConfig is not size 1, item_id:");
                common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                  v24,
                  (const unsigned int *)(v5 + 128));
                common::milog::MiLogStream::~MiLogStream(&v71);
                v9 = -1;
              }
            }
            else
            {
              common::milog::MiLogStream::create(
                &v71,
                &common::milog::MiLogDefault::default_log_obj_,
                3u,
                "./src/player/avatar/player_avatar_comp.cpp",
                "checkAvatarUpgrade",
                1108);
              v23 = common::milog::MiLogStream::operator<<<char [49],(char *[49])0>(
                      &v71,
                      (const char (*)[49])"MaterialType is not MATERIAL_EXP_FRUIT, item_id:");
              common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                v23,
                (const unsigned int *)(v5 + 128));
              common::milog::MiLogStream::~MiLogStream(&v71);
              v9 = -1;
            }
          }
          else
          {
            common::milog::MiLogStream::create(
              &v71,
              &common::milog::MiLogDefault::default_log_obj_,
              3u,
              "./src/player/avatar/player_avatar_comp.cpp",
              "checkAvatarUpgrade",
              1102);
            v22 = common::milog::MiLogStream::operator<<<char [41],(char *[41])0>(
                    &v71,
                    (const char (*)[41])"findMaterialExcelConfig failed, item_id:");
            common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
              v22,
              (const unsigned int *)(v5 + 128));
            common::milog::MiLogStream::~MiLogStream(&v71);
            v9 = -1;
          }
        }
        else
        {
          common::milog::MiLogStream::create(
            &v71,
            &common::milog::MiLogDefault::default_log_obj_,
            1u,
            "./src/player/avatar/player_avatar_comp.cpp",
            "checkAvatarUpgrade",
            1095);
          v15 = common::milog::MiLogStream::operator<<<char [29],(char *[29])0>(
                  &v71,
                  (const char (*)[29])"avatar reach max_level, uid:");
          if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
            __asan_report_load8(&this->player_);
          *(_DWORD *)(v5 + 112) = Player::getUid(this->player_);
          v16 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                  v15,
                  (const unsigned int *)(v5 + 112));
          v17 = common::milog::MiLogStream::operator<<<char [14],(char *[14])0>(
                  v16,
                  (const char (*)[14])" avatar_guid:");
          v18 = common::milog::MiLogStream::operator<<<unsigned long,(unsigned long *)0>(
                  v17,
                  (const unsigned __int64 *)(v5 + 160));
          v19 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                  v18,
                  (const char (*)[16])" formal_avatar:");
          v20 = std::__shared_ptr_access<FormalAvatar,(__gnu_cxx::_Lock_policy)2,false,false>::operator*((const std::__shared_ptr_access<FormalAvatar,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v5 + 192));
          common::milog::MiLogStream::operator<<<FormalAvatar,(FormalAvatar*)0>(v19, v20);
          common::milog::MiLogStream::~MiLogStream(&v71);
          v9 = -1;
        }
      }
    }
    std::shared_ptr<FormalAvatar>::~shared_ptr((std::shared_ptr<FormalAvatar> *const)(v5 + 192));
  }
  else
  {
    common::milog::MiLogStream::create(
      &v71,
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/player/avatar/player_avatar_comp.cpp",
      "checkAvatarUpgrade",
      1075);
    v8 = common::milog::MiLogStream::operator<<<char [30],(char *[30])0>(
           &v71,
           (const char (*)[30])"item count is 0, avatar_guid:");
    common::milog::MiLogStream::operator<<<unsigned long,(unsigned long *)0>(v8, (const unsigned __int64 *)(v5 + 160));
    common::milog::MiLogStream::~MiLogStream(&v71);
    v9 = 647;
  }
  result = v9;
  if ( v72 == (char *)v5 )
  {
    *(_QWORD *)((v5 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8008) = 0LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8010) = 0LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8018) = 0LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8020) = 0LL;
  }
  else
  {
    *(_QWORD *)v5 = 1172321806LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8020) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 1176: range 000000001716DB5C-000000001716E8DE
void __fastcall PlayerAvatarComp::avatarUpgrade(
        PlayerAvatarComp *const this,
        __int64 avatar_guid,
        __int32 item_id,
        __int32 count,
        __m128i a5)
{
  unsigned __int64 v5; // r13
  __int64 v6; // rax
  _DWORD *v7; // r12
  PlayerBasicComp *BasicComp; // rax
  common::milog::MiLogStream *v9; // rax
  std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v10; // rax
  common::milog::MiLogStream *v11; // rax
  common::milog::MiLogStream *v12; // rax
  common::milog::MiLogStream *v13; // rax
  std::vector<data::ItemUseConfig>::const_reference v14; // rax
  common::milog::MiLogStream *v15; // rax
  std::vector<data::ItemUseConfig>::const_reference v16; // rax
  common::milog::MiLogStream *v17; // rax
  unsigned __int64 v18; // rax
  unsigned __int64 v19; // rdx
  common::milog::MiLogStream *v20; // r14
  std::__shared_ptr_access<FormalAvatar,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v21; // rax
  std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v22; // rax
  float *v23; // rax
  float *v24; // rdx
  const unsigned int *v25; // rax
  _DWORD *v26; // rdx
  PlayerItemComp *ItemComp; // rax
  common::milog::MiLogStream *v28; // rax
  common::milog::MiLogStream *v29; // rax
  common::milog::MiLogStream *v30; // rax
  PlayerItemComp *v31; // r14
  unsigned __int64 v32; // rax
  unsigned __int64 v33; // rdx
  std::string v34; // [rsp+0h] [rbp-1F0h]
  PlayerAvatarComp *thisa; // [rsp+18h] [rbp-1D8h]
  float __a; // [rsp+20h] [rbp-1D0h] BYREF
  float __b; // [rsp+24h] [rbp-1CCh] BYREF
  float scoin_ratio; // [rsp+28h] [rbp-1C8h]
  data::QualityType quality_type; // [rsp+2Ch] [rbp-1C4h]
  uint32_t add_exp; // [rsp+30h] [rbp-1C0h]
  const data::MaterialExcelConfig *material_config_ptr; // [rsp+38h] [rbp-1B8h]
  const data::AvatarExcelConfig *avatar_config_ptr; // [rsp+40h] [rbp-1B0h]
  SubItemReason reason; // [rsp+48h] [rbp-1A8h] BYREF
  std::shared_ptr<Config> v45; // [rsp+50h] [rbp-1A0h] BYREF
  std::string v46; // [rsp+60h] [rbp-190h] BYREF
  char v47[368]; // [rsp+80h] [rbp-170h] BYREF

  *(&v34._anon_0._M_allocated_capacity + 1) = (std::string::size_type)this;
  v34._anon_0._M_allocated_capacity = avatar_guid;
  HIDWORD(v34._M_string_length) = item_id;
  LODWORD(v34._M_string_length) = count;
  v5 = (unsigned __int64)v47;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v6 = __asan_stack_malloc_3(320LL);
    if ( v6 )
      v5 = v6;
  }
  *(_QWORD *)v5 = 1102416563LL;
  *(_QWORD *)(v5 + 8) = "9 48 1 11 holder:1177 64 4 8 exp:1211 80 4 15 scoin_cost:1233 96 4 12 item_id:1175 112 4 10 coun"
                        "t:1175 128 8 16 avatar_guid:1175 160 16 22 formal_avatar_ptr:1179 192 24 19 item_param_vec:1236 "
                        "256 24 11 reason:1246";
  *(_QWORD *)(v5 + 16) = PlayerAvatarComp::avatarUpgrade;
  v7 = (_DWORD *)(v5 >> 3);
  v7[536862720] = -235802127;
  v7[536862721] = -234753551;
  v7[536862722] = -234556924;
  v7[536862723] = -234556924;
  v7[536862724] = -218959360;
  v7[536862725] = -219021312;
  v7[536862726] = -234881024;
  v7[536862727] = -218959118;
  v7[536862728] = -218103808;
  v7[536862729] = -202116109;
  *(_QWORD *)(v5 + 128) = avatar_guid;
  *(_DWORD *)(v5 + 96) = HIDWORD(v34._M_string_length);
  *(_DWORD *)(v5 + 112) = v34._M_string_length;
  if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
    __asan_report_load8(&this->player_);
  BasicComp = Player::getBasicComp(this->player_);
  PlayerBasicComp::getNextTransNo[abi:cxx11](&v46, BasicComp);
  StatLogUtils::ContextHolder::ContextHolder((StatLogUtils::ContextHolder *const)(v5 + 48), 0x647u, v34);
  std::string::~string(&v46);
  PlayerAvatarComp::findFormalAvatar((const PlayerAvatarComp *const)(v5 + 160), (uint64_t)thisa);
  if ( std::operator==<FormalAvatar>((const std::shared_ptr<FormalAvatar> *)(v5 + 160), 0LL) )
  {
    common::milog::MiLogStream::create(
      (common::milog::MiLogStream *)&v46,
      &common::milog::MiLogDefault::default_log_obj_,
      4u,
      "./src/player/avatar/player_avatar_comp.cpp",
      "avatarUpgrade",
      1182);
    v9 = common::milog::MiLogStream::operator<<<char [32],(char *[32])0>(
           (common::milog::MiLogStream *const)&v46,
           (const char (*)[32])"findAvatar failed, avatar_guid:");
    common::milog::MiLogStream::operator<<<unsigned long,(unsigned long *)0>(v9, (const unsigned __int64 *)(v5 + 128));
    common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)&v46);
  }
  else
  {
    ServiceBox::findService<GameserverService>();
    GameserverService::getConfig((GameserverService *const)&v45);
    v10 = std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false> *const)&v45);
    material_config_ptr = data::MaterialExcelConfigMgrBase::findMaterialExcelConfig(
                            &v10->design_config.txt_config_mgr.material_config_mgr,
                            *(_DWORD *)(v5 + 96));
    std::shared_ptr<Config>::~shared_ptr(&v45);
    if ( material_config_ptr )
    {
      if ( *(_BYTE *)(((unsigned __int64)&material_config_ptr->material_type >> 3) + 0x7FFF8000) != 0
        && (char)((((_BYTE)material_config_ptr + 76) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&material_config_ptr->material_type >> 3)
                                                                           + 0x7FFF8000) )
      {
        __asan_report_load4(&material_config_ptr->material_type);
      }
      if ( material_config_ptr->material_type == MATERIAL_EXP_FRUIT )
      {
        if ( std::vector<data::ItemUseConfig>::size(&material_config_ptr->item_use) == 1 )
        {
          v14 = std::vector<data::ItemUseConfig>::operator[](&material_config_ptr->item_use, 0LL);
          if ( *(_BYTE *)(((unsigned __int64)&v14->use_op >> 3) + 0x7FFF8000) != 0
            && *(_BYTE *)(((unsigned __int64)&v14->use_op >> 3) + 0x7FFF8000) <= 3 )
          {
            v14 = (std::vector<data::ItemUseConfig>::const_reference)__asan_report_load4(&v14->use_op);
          }
          if ( v14->use_op == ITEM_USE_ADD_EXP )
          {
            *(_DWORD *)(v5 + 64) = 0;
            v16 = std::vector<data::ItemUseConfig>::operator[](&material_config_ptr->item_use, 0LL);
            if ( common::tools::StringUtils::strVecToNum<0u,unsigned int>(&v16->use_param, (unsigned int *)(v5 + 64)) )
            {
              common::milog::MiLogStream::create(
                (common::milog::MiLogStream *)&v46,
                &common::milog::MiLogDefault::default_log_obj_,
                4u,
                "./src/player/avatar/player_avatar_comp.cpp",
                "avatarUpgrade",
                1214);
              v17 = common::milog::MiLogStream::operator<<<char [28],(char *[28])0>(
                      (common::milog::MiLogStream *const)&v46,
                      (const char (*)[28])"strVecToNum fails, item_id:");
              common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                v17,
                (const unsigned int *)(v5 + 96));
              common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)&v46);
            }
            else
            {
              v18 = (unsigned __int64)std::__shared_ptr_access<FormalAvatar,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<FormalAvatar,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v5 + 160));
              if ( *(_BYTE *)((v18 >> 3) + 0x7FFF8000) )
                v18 = __asan_report_load8(v18);
              v19 = *(_QWORD *)v18 + 312LL;
              if ( *(_BYTE *)((v19 >> 3) + 0x7FFF8000) )
                v18 = __asan_report_load8(*(_QWORD *)v18 + 312LL);
              avatar_config_ptr = (const data::AvatarExcelConfig *)(*(__int64 (__fastcall **)(unsigned __int64))v19)(v18);
              if ( avatar_config_ptr )
              {
                if ( *(_BYTE *)(((unsigned __int64)&avatar_config_ptr->quality_type >> 3) + 0x7FFF8000) != 0
                  && *(_BYTE *)(((unsigned __int64)&avatar_config_ptr->quality_type >> 3) + 0x7FFF8000) <= 3 )
                {
                  __asan_report_load4(&avatar_config_ptr->quality_type);
                }
                quality_type = avatar_config_ptr->quality_type;
                ServiceBox::findService<GameserverService>();
                GameserverService::getConfig((GameserverService *const)&v45);
                v22 = std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false> *const)&v45);
                *(float *)a5.m128i_i32 = ConstValueExcelConfigMgr::getAvatarUpgradeCostRatio(
                                           &v22->design_config.txt_config_mgr.const_value_config_mgr,
                                           quality_type);
                scoin_ratio = COERCE_FLOAT(_mm_cvtsi128_si32(a5));
                std::shared_ptr<Config>::~shared_ptr(&v45);
                if ( std::fabs(scoin_ratio) <= 0.00000011920929 )
                  scoin_ratio = 0.2;
                add_exp = SAFE_MULTIPLY<unsigned int,unsigned int>(*(_DWORD *)(v5 + 64), *(_DWORD *)(v5 + 112));
                __b = (float)(int)std::numeric_limits<unsigned int>::max();
                __a = (float)((float)(int)add_exp * scoin_ratio) + 0.00000011920929;
                v23 = (float *)std::min<float>(&__a, &__b);
                v24 = v23;
                if ( *(_BYTE *)(((unsigned __int64)v23 >> 3) + 0x7FFF8000) != 0
                  && (char)(((unsigned __int8)v23 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)v23 >> 3) + 0x7FFF8000) )
                {
                  __asan_report_load4(v23);
                }
                *(_DWORD *)(v5 + 80) = (int)*v24;
                LODWORD(__b) = 1;
                v25 = std::max<unsigned int>((const unsigned int *)&__b, (const unsigned int *)(v5 + 80));
                v26 = v25;
                if ( *(_BYTE *)(((unsigned __int64)v25 >> 3) + 0x7FFF8000) != 0
                  && (char)(((unsigned __int8)v25 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)v25 >> 3) + 0x7FFF8000) )
                {
                  __asan_report_load4(v25);
                }
                *(_DWORD *)(v5 + 80) = *v26;
                std::vector<ItemParam>::vector((std::vector<ItemParam> *const)(v5 + 192));
                LODWORD(v45._M_ptr) = *(_DWORD *)(v5 + 96);
                HIDWORD(v45._M_ptr) = *(_DWORD *)(v5 + 112);
                v45._M_refcount._M_pi = 0LL;
                std::vector<ItemParam>::push_back(
                  (std::vector<ItemParam> *const)(v5 + 192),
                  (std::vector<ItemParam>::value_type *)&v45);
                LODWORD(v45._M_ptr) = 202;
                HIDWORD(v45._M_ptr) = *(_DWORD *)(v5 + 80);
                v45._M_refcount._M_pi = 0LL;
                std::vector<ItemParam>::push_back(
                  (std::vector<ItemParam> *const)(v5 + 192),
                  (std::vector<ItemParam>::value_type *)&v45);
                if ( *(_BYTE *)(((unsigned __int64)&thisa->player_ >> 3) + 0x7FFF8000) )
                  __asan_report_load8(&thisa->player_);
                ItemComp = Player::getItemComp(thisa->player_);
                if ( PlayerItemComp::checkSubItemBatch(ItemComp, (const std::vector<ItemParam> *)(v5 + 192)) )
                {
                  common::milog::MiLogStream::create(
                    (common::milog::MiLogStream *)&v46,
                    &common::milog::MiLogDefault::default_log_obj_,
                    3u,
                    "./src/player/avatar/player_avatar_comp.cpp",
                    "avatarUpgrade",
                    1242);
                  v28 = common::milog::MiLogStream::operator<<<char [35],(char *[35])0>(
                          (common::milog::MiLogStream *const)&v46,
                          (const char (*)[35])"checkSubItemBatch failed, item_id:");
                  v29 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                          v28,
                          (const unsigned int *)(v5 + 96));
                  v30 = common::milog::MiLogStream::operator<<<char [8],(char *[8])0>(v29, (const char (*)[8])" count:");
                  common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                    v30,
                    (const unsigned int *)(v5 + 112));
                  common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)&v46);
                }
                else
                {
                  ActionReason::ActionReason(
                    (ActionReason *const)(v5 + 256),
                    ACTION_REASON_AVATAR_UPGRADE,
                    ITEM_LIMIT_UNLIMITED);
                  if ( *(_BYTE *)(((unsigned __int64)&thisa->player_ >> 3) + 0x7FFF8000) )
                    __asan_report_load8(&thisa->player_);
                  v31 = Player::getItemComp(thisa->player_);
                  SubItemReason::SubItemReason(&reason, (const ActionReason *)(v5 + 256));
                  PlayerItemComp::subItemBatch(v31, (const std::vector<ItemParam> *)(v5 + 192), &reason);
                  v32 = (unsigned __int64)std::__shared_ptr_access<FormalAvatar,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<FormalAvatar,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v5 + 160));
                  if ( *(_BYTE *)((v32 >> 3) + 0x7FFF8000) )
                    v32 = __asan_report_load8(v32);
                  v33 = *(_QWORD *)v32 + 520LL;
                  if ( *(_BYTE *)((v33 >> 3) + 0x7FFF8000) )
                    v32 = __asan_report_load8(*(_QWORD *)v32 + 520LL);
                  (*(void (__fastcall **)(unsigned __int64, _QWORD, unsigned __int64, __int64, _QWORD, _QWORD))v33)(
                    v32,
                    add_exp,
                    v5 + 256,
                    1LL,
                    *(unsigned int *)(v5 + 96),
                    *(unsigned int *)(v5 + 112));
                }
                std::vector<ItemParam>::~vector((std::vector<ItemParam> *const)(v5 + 192));
              }
              else
              {
                common::milog::MiLogStream::create(
                  (common::milog::MiLogStream *)&v46,
                  &common::milog::MiLogDefault::default_log_obj_,
                  4u,
                  "./src/player/avatar/player_avatar_comp.cpp",
                  "avatarUpgrade",
                  1221);
                v20 = common::milog::MiLogStream::operator<<<char [25],(char *[25])0>(
                        (common::milog::MiLogStream *const)&v46,
                        (const char (*)[25])"getConfig fails, avatar:");
                v21 = std::__shared_ptr_access<FormalAvatar,(__gnu_cxx::_Lock_policy)2,false,false>::operator*((const std::__shared_ptr_access<FormalAvatar,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v5 + 160));
                common::milog::MiLogStream::operator<<<FormalAvatar,(FormalAvatar*)0>(v20, v21);
                common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)&v46);
              }
            }
          }
          else
          {
            common::milog::MiLogStream::create(
              (common::milog::MiLogStream *)&v46,
              &common::milog::MiLogDefault::default_log_obj_,
              4u,
              "./src/player/avatar/player_avatar_comp.cpp",
              "avatarUpgrade",
              1207);
            v15 = common::milog::MiLogStream::operator<<<char [51],(char *[51])0>(
                    (common::milog::MiLogStream *const)&v46,
                    (const char (*)[51])"Material UseConfig use_op is not ADD_EXP, item_id:");
            common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v15, (const unsigned int *)(v5 + 96));
            common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)&v46);
          }
        }
        else
        {
          common::milog::MiLogStream::create(
            (common::milog::MiLogStream *)&v46,
            &common::milog::MiLogDefault::default_log_obj_,
            4u,
            "./src/player/avatar/player_avatar_comp.cpp",
            "avatarUpgrade",
            1201);
          v13 = common::milog::MiLogStream::operator<<<char [43],(char *[43])0>(
                  (common::milog::MiLogStream *const)&v46,
                  (const char (*)[43])"Material UseConfig is not size 1, item_id:");
          common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v13, (const unsigned int *)(v5 + 96));
          common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)&v46);
        }
      }
      else
      {
        common::milog::MiLogStream::create(
          (common::milog::MiLogStream *)&v46,
          &common::milog::MiLogDefault::default_log_obj_,
          4u,
          "./src/player/avatar/player_avatar_comp.cpp",
          "avatarUpgrade",
          1195);
        v12 = common::milog::MiLogStream::operator<<<char [49],(char *[49])0>(
                (common::milog::MiLogStream *const)&v46,
                (const char (*)[49])"MaterialType is not MATERIAL_EXP_FRUIT, item_id:");
        common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v12, (const unsigned int *)(v5 + 96));
        common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)&v46);
      }
    }
    else
    {
      common::milog::MiLogStream::create(
        (common::milog::MiLogStream *)&v46,
        &common::milog::MiLogDefault::default_log_obj_,
        4u,
        "./src/player/avatar/player_avatar_comp.cpp",
        "avatarUpgrade",
        1189);
      v11 = common::milog::MiLogStream::operator<<<char [41],(char *[41])0>(
              (common::milog::MiLogStream *const)&v46,
              (const char (*)[41])"findMaterialExcelConfig failed, item_id:");
      common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v11, (const unsigned int *)(v5 + 96));
      common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)&v46);
    }
  }
  std::shared_ptr<FormalAvatar>::~shared_ptr((std::shared_ptr<FormalAvatar> *const)(v5 + 160));
  StatLogUtils::ContextHolder::~ContextHolder((StatLogUtils::ContextHolder *const)(v5 + 48));
  if ( v47 == (char *)v5 )
  {
    *(_QWORD *)((v5 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8008) = 0LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8010) = 0LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8018) = 0LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8020) = 0LL;
  }
  else
  {
    *(_QWORD *)v5 = 1172321806LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8020) = 0xF5F5F5F5F5F5F5F5LL;
  }
};

// Line 1255: range 000000001716E8E0-000000001716ED9F
__int64 __fastcall PlayerAvatarComp::checkAvatarPromote(PlayerAvatarComp *const this, uint64_t avatar_guid)
{
  unsigned __int64 v2; // r12
  __int64 v3; // rax
  _DWORD *v4; // r13
  PlayerBasicComp *BasicComp; // rax
  common::milog::MiLogStream *v6; // rbx
  unsigned int v7; // r14d
  common::milog::MiLogStream *v8; // rax
  common::milog::MiLogStream *v9; // rax
  common::milog::MiLogStream *v10; // rcx
  bool isAvatarSwitchClosed; // r14
  FormalAvatar *v12; // rax
  common::milog::MiLogStream *v13; // rax
  common::milog::MiLogStream *v14; // rax
  common::milog::MiLogStream *v15; // rcx
  __int64 result; // rax
  unsigned int val; // [rsp+18h] [rbp-C8h] BYREF
  int32_t ret; // [rsp+1Ch] [rbp-C4h]
  std::shared_ptr<Avatar> p_avatar_ptr; // [rsp+20h] [rbp-C0h] BYREF
  common::milog::MiLogStream v20; // [rsp+30h] [rbp-B0h] BYREF
  char v21[144]; // [rsp+50h] [rbp-90h] BYREF

  v2 = (unsigned __int64)v21;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_1(96LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "2 32 8 16 avatar_guid:1254 64 16 22 formal_avatar_ptr:1263";
  *(_QWORD *)(v2 + 16) = PlayerAvatarComp::checkAvatarPromote;
  v4 = (_DWORD *)(v2 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = -218959360;
  v4[536862722] = -202178560;
  *(_QWORD *)(v2 + 32) = avatar_guid;
  if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
    __asan_report_load8(&this->player_);
  BasicComp = Player::getBasicComp(this->player_);
  if ( !PlayerBasicComp::isStateOpen(BasicComp, 3u) )
  {
    common::milog::MiLogStream::create(
      &v20,
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/player/avatar/player_avatar_comp.cpp",
      "checkAvatarPromote",
      1259);
    v6 = common::milog::MiLogStream::operator<<<char [42],(char *[42])0>(
           &v20,
           (const char (*)[42])"OPEN_STATE_AVATAR_PROMOTE is locked. uid:");
    if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
      __asan_report_load8(&this->player_);
    val = Player::getUid(this->player_);
    common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v6, &val);
    common::milog::MiLogStream::~MiLogStream(&v20);
    v7 = 141;
  }
  else
  {
    PlayerAvatarComp::findFormalAvatar((const PlayerAvatarComp *const)(v2 + 64), (uint64_t)this);
    if ( std::operator==<FormalAvatar>((const std::shared_ptr<FormalAvatar> *)(v2 + 64), 0LL) )
    {
      common::milog::MiLogStream::create(
        &v20,
        &common::milog::MiLogDefault::default_log_obj_,
        1u,
        "./src/player/avatar/player_avatar_comp.cpp",
        "checkAvatarPromote",
        1266);
      v8 = common::milog::MiLogStream::operator<<<char [32],(char *[32])0>(
             &v20,
             (const char (*)[32])"findAvatar failed, avatar_guid:");
      v9 = common::milog::MiLogStream::operator<<<unsigned long,(unsigned long *)0>(
             v8,
             (const unsigned __int64 *)(v2 + 32));
      v10 = common::milog::MiLogStream::operator<<<char [6],(char *[6])0>(v9, (const char (*)[6])" uid:");
      if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
        __asan_report_load8(&this->player_);
      operator<<(v10, this->player_);
      common::milog::MiLogStream::~MiLogStream(&v20);
      v7 = -1;
    }
    else
    {
      std::shared_ptr<Avatar>::shared_ptr<FormalAvatar,void>(
        &p_avatar_ptr,
        (const std::shared_ptr<FormalAvatar> *)(v2 + 64));
      isAvatarSwitchClosed = PlayerAvatarComp::isAvatarSwitchClosed(this, &p_avatar_ptr);
      std::shared_ptr<Avatar>::~shared_ptr(&p_avatar_ptr);
      if ( isAvatarSwitchClosed )
      {
        v7 = 142;
      }
      else
      {
        v12 = std::__shared_ptr_access<FormalAvatar,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<FormalAvatar,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 64));
        ret = FormalAvatar::checkUpgradePromoteLevel(v12);
        if ( ret )
        {
          common::milog::MiLogStream::create(
            &v20,
            &common::milog::MiLogDefault::default_log_obj_,
            1u,
            "./src/player/avatar/player_avatar_comp.cpp",
            "checkAvatarPromote",
            1279);
          v13 = common::milog::MiLogStream::operator<<<char [46],(char *[46])0>(
                  &v20,
                  (const char (*)[46])"checkUpgradePromoteLevel failed, avatar_guid:");
          v14 = common::milog::MiLogStream::operator<<<unsigned long,(unsigned long *)0>(
                  v13,
                  (const unsigned __int64 *)(v2 + 32));
          v15 = common::milog::MiLogStream::operator<<<char [10],(char *[10])0>(v14, (const char (*)[10])" player_:");
          if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
            __asan_report_load8(&this->player_);
          operator<<(v15, this->player_);
          common::milog::MiLogStream::~MiLogStream(&v20);
          v7 = ret;
        }
        else
        {
          v7 = 0;
        }
      }
    }
    std::shared_ptr<FormalAvatar>::~shared_ptr((std::shared_ptr<FormalAvatar> *const)(v2 + 64));
  }
  result = v7;
  if ( v21 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8008) = 0;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8008) = -168430091;
  }
  return result;
};

// Line 1287: range 000000001716EDA0-000000001716F2B9
__int64 __fastcall PlayerAvatarComp::avatarPromote(PlayerAvatarComp *const this, __int64 avatar_guid)
{
  unsigned __int64 v2; // r13
  __int64 v3; // rax
  _DWORD *v4; // r12
  PlayerBasicComp *BasicComp; // rax
  common::milog::MiLogStream *v6; // rax
  common::milog::MiLogStream *v7; // rax
  common::milog::MiLogStream *v8; // rcx
  unsigned int v9; // r14d
  std::__shared_ptr_access<FormalAvatar,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v10; // rax
  std::__shared_ptr_access<FormalAvatar,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v11; // rax
  FormalAvatar *v12; // rax
  common::milog::MiLogStream *v13; // rax
  common::milog::MiLogStream *v14; // rax
  common::milog::MiLogStream *v15; // rcx
  __int64 result; // rax
  std::string v17; // [rsp+0h] [rbp-190h]
  PlayerAvatarComp *thisa; // [rsp+8h] [rbp-188h]
  int32_t ret; // [rsp+1Ch] [rbp-174h]
  std::string v20; // [rsp+20h] [rbp-170h] BYREF
  char v21[336]; // [rsp+40h] [rbp-150h] BYREF

  v17._M_string_length = (std::string::size_type)this;
  v17._M_dataplus._M_p = (std::string::pointer)avatar_guid;
  v2 = (unsigned __int64)v21;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_3(288LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "5 48 1 11 holder:1288 64 8 16 avatar_guid:1286 96 16 22 formal_avatar_ptr:1292 128 48 21 fight_p"
                        "rop_guard:1289 208 48 26 refresh_ability_guard:1290";
  *(_QWORD *)(v2 + 16) = PlayerAvatarComp::avatarPromote;
  v4 = (_DWORD *)(v2 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = -234753551;
  v4[536862722] = -218959360;
  v4[536862723] = -219021312;
  v4[536862725] = -219021312;
  v4[536862726] = 62194;
  v4[536862728] = -202116109;
  *(_QWORD *)(v2 + 64) = avatar_guid;
  if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
    __asan_report_load8(&this->player_);
  BasicComp = Player::getBasicComp(this->player_);
  PlayerBasicComp::getNextTransNo[abi:cxx11](&v20, BasicComp);
  StatLogUtils::ContextHolder::ContextHolder((StatLogUtils::ContextHolder *const)(v2 + 48), 0x646u, v17);
  std::string::~string(&v20);
  FightPropGuard::FightPropGuard((FightPropGuard *const)(v2 + 128));
  RefreshAbilityGuard::RefreshAbilityGuard((RefreshAbilityGuard *const)(v2 + 208));
  PlayerAvatarComp::findFormalAvatar((const PlayerAvatarComp *const)(v2 + 96), (uint64_t)thisa);
  if ( std::operator==<FormalAvatar>((const std::shared_ptr<FormalAvatar> *)(v2 + 96), 0LL) )
  {
    common::milog::MiLogStream::create(
      (common::milog::MiLogStream *)&v20,
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/player/avatar/player_avatar_comp.cpp",
      "avatarPromote",
      1295);
    v6 = common::milog::MiLogStream::operator<<<char [32],(char *[32])0>(
           (common::milog::MiLogStream *const)&v20,
           (const char (*)[32])"findAvatar failed, avatar_guid:");
    v7 = common::milog::MiLogStream::operator<<<unsigned long,(unsigned long *)0>(
           v6,
           (const unsigned __int64 *)(v2 + 64));
    v8 = common::milog::MiLogStream::operator<<<char [6],(char *[6])0>(v7, (const char (*)[6])" uid:");
    if ( *(_BYTE *)(((unsigned __int64)&thisa->player_ >> 3) + 0x7FFF8000) )
      __asan_report_load8(&thisa->player_);
    operator<<(v8, thisa->player_);
    common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)&v20);
    v9 = -1;
  }
  else
  {
    v10 = std::__shared_ptr_access<FormalAvatar,(__gnu_cxx::_Lock_policy)2,false,false>::operator*((const std::__shared_ptr_access<FormalAvatar,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 96));
    FightPropGuard::addCreature((FightPropGuard *const)(v2 + 128), v10, 0);
    v11 = std::__shared_ptr_access<FormalAvatar,(__gnu_cxx::_Lock_policy)2,false,false>::operator*((const std::__shared_ptr_access<FormalAvatar,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 96));
    RefreshAbilityGuard::addCreature((RefreshAbilityGuard *const)(v2 + 208), v11);
    v12 = std::__shared_ptr_access<FormalAvatar,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<FormalAvatar,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 96));
    ret = FormalAvatar::upgradePromoteLevel(v12);
    if ( ret )
    {
      common::milog::MiLogStream::create(
        (common::milog::MiLogStream *)&v20,
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/player/avatar/player_avatar_comp.cpp",
        "avatarPromote",
        1304);
      v13 = common::milog::MiLogStream::operator<<<char [41],(char *[41])0>(
              (common::milog::MiLogStream *const)&v20,
              (const char (*)[41])"upgradePromoteLevel failed, avatar_guid:");
      v14 = common::milog::MiLogStream::operator<<<unsigned long,(unsigned long *)0>(
              v13,
              (const unsigned __int64 *)(v2 + 64));
      v15 = common::milog::MiLogStream::operator<<<char [9],(char *[9])0>(v14, (const char (*)[9])" player:");
      if ( *(_BYTE *)(((unsigned __int64)&thisa->player_ >> 3) + 0x7FFF8000) )
        __asan_report_load8(&thisa->player_);
      operator<<(v15, thisa->player_);
      common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)&v20);
      v9 = ret;
    }
    else
    {
      v9 = 0;
    }
  }
  std::shared_ptr<FormalAvatar>::~shared_ptr((std::shared_ptr<FormalAvatar> *const)(v2 + 96));
  RefreshAbilityGuard::~RefreshAbilityGuard((RefreshAbilityGuard *const)(v2 + 208));
  FightPropGuard::~FightPropGuard((FightPropGuard *const)(v2 + 128));
  StatLogUtils::ContextHolder::~ContextHolder((StatLogUtils::ContextHolder *const)(v2 + 48));
  result = v9;
  if ( v21 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8014) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8020) = 0;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8020) = -168430091;
  }
  return result;
};

// Line 1312: range 000000001716F2BA-000000001716F3F1
int32_t __cdecl PlayerAvatarComp::setIsFlyable(PlayerAvatarComp *const this, bool is_flyable, bool is_notify)
{
  __int64 v4; // rsi
  __int64 v5; // rdx
  Player *player; // rbx
  proto::PropValue prop_value; // [rsp+10h] [rbp-40h] BYREF

  if ( *(_BYTE *)(((unsigned __int64)&this->is_flyable_ >> 3) + 0x7FFF8000) != 0
    && (((unsigned __int8)this + 113) & 7) >= *(_BYTE *)(((unsigned __int64)&this->is_flyable_ >> 3) + 0x7FFF8000) )
  {
    __asan_report_load1(&this->is_flyable_);
  }
  if ( is_flyable == this->is_flyable_ )
    return 0;
  v4 = ((_BYTE)this + 113) & 7;
  v5 = (*(_BYTE *)(((unsigned __int64)&this->is_flyable_ >> 3) + 0x7FFF8000) != 0) & (unsigned __int8)((char)v4 >= *(_BYTE *)(((unsigned __int64)&this->is_flyable_ >> 3) + 0x7FFF8000));
  if ( (_BYTE)v5 )
    __asan_report_store1(&this->is_flyable_, v4, v5);
  this->is_flyable_ = is_flyable;
  if ( is_notify )
  {
    if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
      __asan_report_load8(&this->player_);
    player = this->player_;
    buildIntProp(&prop_value, 0x2716u, is_flyable);
    Player::notifyPlayerProp(player, &prop_value);
    proto::PropValue::~PropValue(&prop_value);
  }
  return 0;
};

// Line 1327: range 000000001716F3F2-000000001716F529
int32_t __cdecl PlayerAvatarComp::setIsTransferable(PlayerAvatarComp *const this, bool is_transferable, bool is_notify)
{
  __int64 v4; // rsi
  __int64 v5; // rdx
  Player *player; // rbx
  proto::PropValue prop_value; // [rsp+10h] [rbp-40h] BYREF

  if ( *(_BYTE *)(((unsigned __int64)&this->is_transferable_ >> 3) + 0x7FFF8000) != 0
    && (((unsigned __int8)this + 114) & 7) >= *(_BYTE *)(((unsigned __int64)&this->is_transferable_ >> 3) + 0x7FFF8000) )
  {
    __asan_report_load1(&this->is_transferable_);
  }
  if ( is_transferable == this->is_transferable_ )
    return 0;
  v4 = ((_BYTE)this + 114) & 7;
  v5 = (*(_BYTE *)(((unsigned __int64)&this->is_transferable_ >> 3) + 0x7FFF8000) != 0) & (unsigned __int8)((char)v4 >= *(_BYTE *)(((unsigned __int64)&this->is_transferable_ >> 3) + 0x7FFF8000));
  if ( (_BYTE)v5 )
    __asan_report_store1(&this->is_transferable_, v4, v5);
  this->is_transferable_ = is_transferable;
  if ( is_notify )
  {
    if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
      __asan_report_load8(&this->player_);
    player = this->player_;
    buildIntProp(&prop_value, 0x2719u, is_transferable);
    Player::notifyPlayerProp(player, &prop_value);
    proto::PropValue::~PropValue(&prop_value);
  }
  return 0;
};

// Line 1343: range 000000001716F52A-000000001716F6B7
const PlayerAvatarComp *__fastcall PlayerAvatarComp::findAvatar(
        const PlayerAvatarComp *const this,
        uint64_t guid,
        __int64 a3)
{
  unsigned __int64 v3; // rbx
  __int64 v4; // rax
  _DWORD *v5; // r12
  std::_Rb_tree_const_iterator<std::pair<long unsigned int const,std::shared_ptr<Avatar> > >::pointer v6; // rax
  std::_Rb_tree_const_iterator<std::pair<long unsigned int const,std::shared_ptr<Avatar> > >::_Self __y; // [rsp+28h] [rbp-88h] BYREF
  char v10[128]; // [rsp+30h] [rbp-80h] BYREF

  v3 = (unsigned __int64)v10;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_1(96LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "2 32 8 9 iter:1344 64 8 9 guid:1342";
  *(_QWORD *)(v3 + 16) = PlayerAvatarComp::findAvatar;
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = -218959360;
  v5[536862722] = -202116352;
  *(_QWORD *)(v3 + 64) = a3;
  *(std::map<long unsigned int,std::shared_ptr<Avatar>>::const_iterator *)(v3 + 32) = std::map<unsigned long,std::shared_ptr<Avatar>>::find(
                                                                                        (const std::map<long unsigned int,std::shared_ptr<Avatar>> *const)(guid + 128),
                                                                                        (const std::map<long unsigned int,std::shared_ptr<Avatar>>::key_type *)(v3 + 64));
  __y._M_node = std::map<unsigned long,std::shared_ptr<Avatar>>::end((const std::map<long unsigned int,std::shared_ptr<Avatar>> *const)(guid + 128))._M_node;
  if ( std::operator!=(
         (const std::_Rb_tree_const_iterator<std::pair<long unsigned int const,std::shared_ptr<Avatar> > >::_Self *)(v3 + 32),
         &__y) )
  {
    v6 = std::_Rb_tree_const_iterator<std::pair<unsigned long const,std::shared_ptr<Avatar>>>::operator->((const std::_Rb_tree_const_iterator<std::pair<long unsigned int const,std::shared_ptr<Avatar> > > *const)(v3 + 32));
    std::shared_ptr<Avatar>::shared_ptr((std::shared_ptr<Avatar> *const)this, &v6->second);
  }
  else
  {
    std::shared_ptr<Avatar>::shared_ptr((std::shared_ptr<Avatar> *const)this, 0LL);
  }
  if ( v10 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8008) = 0;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8008) = -168430091;
  }
  return this;
};

// Line 1354: range 000000001716F6B8-000000001716F86A
const PlayerAvatarComp *__fastcall PlayerAvatarComp::findFormalAvatar(
        const PlayerAvatarComp *const this,
        uint64_t guid,
        __int64 a3)
{
  unsigned __int64 v3; // rbx
  __int64 v4; // rax
  _DWORD *v5; // r12
  std::_Rb_tree_const_iterator<std::pair<long unsigned int const,std::shared_ptr<Avatar> > >::_Self __y; // [rsp+28h] [rbp-88h] BYREF
  char v9[128]; // [rsp+30h] [rbp-80h] BYREF

  v3 = (unsigned __int64)v9;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_1(96LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "2 32 8 9 iter:1355 64 8 9 guid:1353";
  *(_QWORD *)(v3 + 16) = PlayerAvatarComp::findFormalAvatar;
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = -218959360;
  v5[536862722] = -202116352;
  *(_QWORD *)(v3 + 64) = a3;
  *(std::map<long unsigned int,std::shared_ptr<Avatar>>::const_iterator *)(v3 + 32) = std::map<unsigned long,std::shared_ptr<Avatar>>::find(
                                                                                        (const std::map<long unsigned int,std::shared_ptr<Avatar>> *const)(guid + 128),
                                                                                        (const std::map<long unsigned int,std::shared_ptr<Avatar>>::key_type *)(v3 + 64));
  __y._M_node = std::map<unsigned long,std::shared_ptr<Avatar>>::end((const std::map<long unsigned int,std::shared_ptr<Avatar>> *const)(guid + 128))._M_node;
  if ( std::operator==(
         (const std::_Rb_tree_const_iterator<std::pair<long unsigned int const,std::shared_ptr<Avatar> > >::_Self *)(v3 + 32),
         &__y) )
  {
    std::shared_ptr<FormalAvatar>::shared_ptr((std::shared_ptr<FormalAvatar> *const)this, 0LL);
  }
  else
  {
    std::_Rb_tree_const_iterator<std::pair<unsigned long const,std::shared_ptr<Avatar>>>::operator->((const std::_Rb_tree_const_iterator<std::pair<long unsigned int const,std::shared_ptr<Avatar> > > *const)(v3 + 32));
    if ( *(_WORD *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
      __asan_report_store16(this);
    std::dynamic_pointer_cast<FormalAvatar,Avatar>((const std::shared_ptr<Avatar> *)this);
  }
  if ( v9 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8008) = 0;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8008) = -168430091;
  }
  return this;
};

// Line 1365: range 000000001716F86C-000000001716FA8E
// local variable allocation has failed, the output may be wrong!
FormalAvatarPtr __cdecl PlayerAvatarComp::findFormalAvatarByAvatarId(
        const PlayerAvatarComp *const this,
        uint32_t avatar_id)
{
  uint32_t v2; // edx
  unsigned __int64 v3; // rbx
  __int64 v4; // rax
  unsigned __int64 v5; // r13
  std::__shared_ptr_access<FormalAvatar,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v6; // rax
  int v8; // r14d
  FormalAvatarPtr result; // rax
  uint32_t avatar_ida; // [rsp+Ch] [rbp-B4h]
  std::map<long unsigned int,std::shared_ptr<Avatar>>::const_iterator __for_begin; // [rsp+20h] [rbp-A0h] BYREF
  std::map<long unsigned int,std::shared_ptr<Avatar>>::const_iterator __for_end; // [rsp+28h] [rbp-98h] BYREF
  const std::map<long unsigned int,std::shared_ptr<Avatar>> *__for_range; // [rsp+30h] [rbp-90h]
  const std::pair<long unsigned int const,std::shared_ptr<Avatar> > *v14; // [rsp+38h] [rbp-88h]
  std::tuple_element<0,const std::pair<long unsigned int const,std::shared_ptr<Avatar> > >::type *guid; // [rsp+40h] [rbp-80h]
  std::tuple_element<1,const std::pair<long unsigned int const,std::shared_ptr<Avatar> > >::type *avatar_ptr; // [rsp+48h] [rbp-78h]
  char v17[112]; // [rsp+50h] [rbp-70h] BYREF

  avatar_ida = v2;
  v3 = (unsigned __int64)v17;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_0(64LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "1 32 16 22 formal_avatar_ptr:1368";
  *(_QWORD *)(v3 + 16) = PlayerAvatarComp::findFormalAvatarByAvatarId;
  v5 = v3 >> 3;
  *(_DWORD *)(v5 + 2147450880) = -235802127;
  *(_DWORD *)(v5 + 2147450884) = -202178560;
  __for_range = (const std::map<long unsigned int,std::shared_ptr<Avatar>> *)(*(_QWORD *)&avatar_id + 128LL);
  __for_begin._M_node = std::map<unsigned long,std::shared_ptr<Avatar>>::begin((const std::map<long unsigned int,std::shared_ptr<Avatar>> *const)(*(_QWORD *)&avatar_id + 128LL))._M_node;
  __for_end._M_node = std::map<unsigned long,std::shared_ptr<Avatar>>::end((const std::map<long unsigned int,std::shared_ptr<Avatar>> *const)(*(_QWORD *)&avatar_id + 128LL))._M_node;
  while ( std::operator!=(&__for_begin, &__for_end) )
  {
    v14 = std::_Rb_tree_const_iterator<std::pair<unsigned long const,std::shared_ptr<Avatar>>>::operator*(&__for_begin);
    guid = std::get<0ul,unsigned long const,std::shared_ptr<Avatar>>(v14);
    avatar_ptr = (std::tuple_element<1,const std::pair<long unsigned int const,std::shared_ptr<Avatar> > >::type *)std::get<1ul,unsigned long const,std::shared_ptr<Avatar>>(v14);
    std::dynamic_pointer_cast<FormalAvatar,Avatar>((const std::shared_ptr<Avatar> *)(v3 + 32));
    if ( std::operator!=<FormalAvatar>(0LL, (const std::shared_ptr<FormalAvatar> *)(v3 + 32))
      && (v6 = std::__shared_ptr_access<FormalAvatar,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<FormalAvatar,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 32)),
          avatar_ida == Avatar::getAvatarId(v6)) )
    {
      std::shared_ptr<FormalAvatar>::shared_ptr(
        (std::shared_ptr<FormalAvatar> *const)this,
        (std::shared_ptr<FormalAvatar> *)(v3 + 32));
      v8 = 0;
    }
    else
    {
      v8 = 1;
    }
    std::shared_ptr<FormalAvatar>::~shared_ptr((std::shared_ptr<FormalAvatar> *const)(v3 + 32));
    if ( v8 != 1 )
      goto LABEL_16;
    std::_Rb_tree_const_iterator<std::pair<unsigned long const,std::shared_ptr<Avatar>>>::operator++(&__for_begin);
  }
  std::shared_ptr<FormalAvatar>::shared_ptr((std::shared_ptr<FormalAvatar> *const)this, 0LL);
LABEL_16:
  if ( v17 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
  }
  result._M_ptr = (std::__shared_ptr<FormalAvatar,(__gnu_cxx::_Lock_policy)2>::element_type *)this;
  return result;
};

// Line 1379: range 000000001716FA90-000000001716FCB2
// local variable allocation has failed, the output may be wrong!
TrialAvatarPtr __cdecl PlayerAvatarComp::findTrialAvatarByAvatarId(
        const PlayerAvatarComp *const this,
        uint32_t avatar_id)
{
  uint32_t v2; // edx
  unsigned __int64 v3; // rbx
  __int64 v4; // rax
  unsigned __int64 v5; // r13
  std::__shared_ptr_access<TrialAvatar,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v6; // rax
  int v8; // r14d
  TrialAvatarPtr result; // rax
  uint32_t avatar_ida; // [rsp+Ch] [rbp-B4h]
  std::map<long unsigned int,std::shared_ptr<Avatar>>::const_iterator __for_begin; // [rsp+20h] [rbp-A0h] BYREF
  std::map<long unsigned int,std::shared_ptr<Avatar>>::const_iterator __for_end; // [rsp+28h] [rbp-98h] BYREF
  const std::map<long unsigned int,std::shared_ptr<Avatar>> *__for_range; // [rsp+30h] [rbp-90h]
  const std::pair<long unsigned int const,std::shared_ptr<Avatar> > *v14; // [rsp+38h] [rbp-88h]
  std::tuple_element<0,const std::pair<long unsigned int const,std::shared_ptr<Avatar> > >::type *guid; // [rsp+40h] [rbp-80h]
  std::tuple_element<1,const std::pair<long unsigned int const,std::shared_ptr<Avatar> > >::type *avatar_ptr; // [rsp+48h] [rbp-78h]
  char v17[112]; // [rsp+50h] [rbp-70h] BYREF

  avatar_ida = v2;
  v3 = (unsigned __int64)v17;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_0(64LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "1 32 16 21 trial_avatar_ptr:1382";
  *(_QWORD *)(v3 + 16) = PlayerAvatarComp::findTrialAvatarByAvatarId;
  v5 = v3 >> 3;
  *(_DWORD *)(v5 + 2147450880) = -235802127;
  *(_DWORD *)(v5 + 2147450884) = -202178560;
  __for_range = (const std::map<long unsigned int,std::shared_ptr<Avatar>> *)(*(_QWORD *)&avatar_id + 128LL);
  __for_begin._M_node = std::map<unsigned long,std::shared_ptr<Avatar>>::begin((const std::map<long unsigned int,std::shared_ptr<Avatar>> *const)(*(_QWORD *)&avatar_id + 128LL))._M_node;
  __for_end._M_node = std::map<unsigned long,std::shared_ptr<Avatar>>::end((const std::map<long unsigned int,std::shared_ptr<Avatar>> *const)(*(_QWORD *)&avatar_id + 128LL))._M_node;
  while ( std::operator!=(&__for_begin, &__for_end) )
  {
    v14 = std::_Rb_tree_const_iterator<std::pair<unsigned long const,std::shared_ptr<Avatar>>>::operator*(&__for_begin);
    guid = std::get<0ul,unsigned long const,std::shared_ptr<Avatar>>(v14);
    avatar_ptr = (std::tuple_element<1,const std::pair<long unsigned int const,std::shared_ptr<Avatar> > >::type *)std::get<1ul,unsigned long const,std::shared_ptr<Avatar>>(v14);
    std::dynamic_pointer_cast<TrialAvatar,Avatar>((const std::shared_ptr<Avatar> *)(v3 + 32));
    if ( std::operator!=<TrialAvatar>(0LL, (const std::shared_ptr<TrialAvatar> *)(v3 + 32))
      && (v6 = std::__shared_ptr_access<TrialAvatar,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<TrialAvatar,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 32)),
          avatar_ida == Avatar::getAvatarId(v6)) )
    {
      std::shared_ptr<TrialAvatar>::shared_ptr(
        (std::shared_ptr<TrialAvatar> *const)this,
        (std::shared_ptr<TrialAvatar> *)(v3 + 32));
      v8 = 0;
    }
    else
    {
      v8 = 1;
    }
    std::shared_ptr<TrialAvatar>::~shared_ptr((std::shared_ptr<TrialAvatar> *const)(v3 + 32));
    if ( v8 != 1 )
      goto LABEL_16;
    std::_Rb_tree_const_iterator<std::pair<unsigned long const,std::shared_ptr<Avatar>>>::operator++(&__for_begin);
  }
  std::shared_ptr<TrialAvatar>::shared_ptr((std::shared_ptr<TrialAvatar> *const)this, 0LL);
LABEL_16:
  if ( v17 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
  }
  result._M_ptr = (std::__shared_ptr<TrialAvatar,(__gnu_cxx::_Lock_policy)2>::element_type *)this;
  return result;
};

// Line 1393: range 000000001716FCB4-000000001716FD0E
uint32_t __cdecl PlayerAvatarComp::getLastChangeAvatarSceneTime(PlayerAvatarComp *const this, Scene *scene)
{
  uint32_t change_scene_time_ms; // [rsp+14h] [rbp-1Ch]
  uint64_t now_ms; // [rsp+18h] [rbp-18h]

  now_ms = common::tools::TimeUtils::getNowMs();
  change_scene_time_ms = 0;
  if ( now_ms > Scene::getBeginTime(scene) )
    return now_ms - Scene::getBeginTime(scene);
  return change_scene_time_ms;
};

// Line 1402: range 000000001716FD10-0000000017170313
__int64 __fastcall PlayerAvatarComp::checkChangeCurAvatar(PlayerAvatarComp *const this, uint64_t guid)
{
  unsigned __int64 v2; // r12
  __int64 v3; // rax
  _DWORD *v4; // r13
  common::milog::MiLogStream *v5; // rcx
  unsigned int v6; // r14d
  std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v7; // rax
  std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v8; // rax
  common::milog::MiLogStream *v9; // rbx
  std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v10; // rax
  common::milog::MiLogStream *v11; // rax
  common::milog::MiLogStream *v12; // rcx
  std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v13; // rax
  common::milog::MiLogStream *v14; // r14
  std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v15; // rax
  std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v16; // rax
  common::milog::MiLogStream *v17; // r14
  std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v18; // rax
  __int64 result; // rax
  uint32_t change_avatar_cd_time; // [rsp+14h] [rbp-CCh]
  uint64_t now_ms; // [rsp+18h] [rbp-C8h]
  std::shared_ptr<Config> v22; // [rsp+20h] [rbp-C0h] BYREF
  common::milog::MiLogStream v23; // [rsp+30h] [rbp-B0h] BYREF
  char v24[144]; // [rsp+50h] [rbp-90h] BYREF

  v2 = (unsigned __int64)v24;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_1(96LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "2 32 8 9 guid:1401 64 16 15 avatar_ptr:1417";
  *(_QWORD *)(v2 + 16) = PlayerAvatarComp::checkChangeCurAvatar;
  v4 = (_DWORD *)(v2 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = -218959360;
  v4[536862722] = -202178560;
  *(_QWORD *)(v2 + 32) = guid;
  if ( std::operator==<Avatar>(&this->cur_avatar_ptr_, 0LL) )
  {
    common::milog::MiLogStream::create(
      &v23,
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/player/avatar/player_avatar_comp.cpp",
      "checkChangeCurAvatar",
      1405);
    v5 = common::milog::MiLogStream::operator<<<char [24],(char *[24])0>(
           &v23,
           (const char (*)[24])"cur_avatar_ptr_ is null");
    if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
      __asan_report_load8(&this->player_);
    operator<<(v5, this->player_);
    common::milog::MiLogStream::~MiLogStream(&v23);
    v6 = -1;
  }
  else
  {
    v7 = std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false> *const)&this->cur_avatar_ptr_);
    if ( Avatar::getGuid(v7) == *(_QWORD *)(v2 + 32) )
    {
      v6 = 0;
    }
    else
    {
      v8 = std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false> *const)&this->cur_avatar_ptr_);
      if ( Creature::getLifeState(v8) == LIFE_ALIVE )
      {
        PlayerAvatarComp::findAvatar((const PlayerAvatarComp *const)(v2 + 64), (uint64_t)this, *(_QWORD *)(v2 + 32));
        if ( std::operator==<Avatar>((const std::shared_ptr<Avatar> *)(v2 + 64), 0LL) )
        {
          common::milog::MiLogStream::create(
            &v23,
            &common::milog::MiLogDefault::default_log_obj_,
            3u,
            "./src/player/avatar/player_avatar_comp.cpp",
            "checkChangeCurAvatar",
            1420);
          v11 = common::milog::MiLogStream::operator<<<char [24],(char *[24])0>(
                  &v23,
                  (const char (*)[24])"findAvatar fails, guid:");
          v12 = common::milog::MiLogStream::operator<<<unsigned long,(unsigned long *)0>(
                  v11,
                  (const unsigned __int64 *)(v2 + 32));
          if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
            __asan_report_load8(&this->player_);
          operator<<(v12, this->player_);
          common::milog::MiLogStream::~MiLogStream(&v23);
          v6 = 104;
        }
        else
        {
          v13 = std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 64));
          if ( Creature::getLifeState(v13) == LIFE_ALIVE )
          {
            ServiceBox::findService<GameserverService>();
            GameserverService::getConfig((GameserverService *const)&v22);
            v16 = std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false> *const)&v22);
            change_avatar_cd_time = ConstValueExcelConfigMgr::getChangeAvatarCd(&v16->design_config.txt_config_mgr.const_value_config_mgr);
            std::shared_ptr<Config>::~shared_ptr(&v22);
            now_ms = common::tools::TimeUtils::getNowMs();
            if ( *(_BYTE *)(((unsigned __int64)&this->last_change_avatar_time_ms_ >> 3) + 0x7FFF8000) )
              __asan_report_load8(&this->last_change_avatar_time_ms_);
            if ( this->last_change_avatar_time_ms_
              && now_ms < this->last_change_avatar_time_ms_ + 1000 * (unsigned __int64)change_avatar_cd_time )
            {
              common::milog::MiLogStream::create(
                &v23,
                &common::milog::MiLogDefault::default_log_obj_,
                1u,
                "./src/player/avatar/player_avatar_comp.cpp",
                "checkChangeCurAvatar",
                1432);
              v17 = common::milog::MiLogStream::operator<<<char [22],(char *[22])0>(
                      &v23,
                      (const char (*)[22])"avatar is still in cd");
              v18 = std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::operator*((const std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 64));
              common::milog::MiLogStream::operator<<<Avatar,(Avatar*)0>(v17, v18);
              common::milog::MiLogStream::~MiLogStream(&v23);
              v6 = 101;
            }
            else
            {
              v6 = 0;
            }
          }
          else
          {
            common::milog::MiLogStream::create(
              &v23,
              &common::milog::MiLogDefault::default_log_obj_,
              1u,
              "./src/player/avatar/player_avatar_comp.cpp",
              "checkChangeCurAvatar",
              1425);
            v14 = common::milog::MiLogStream::operator<<<char [29],(char *[29])0>(
                    &v23,
                    (const char (*)[29])"[AVATAR] avatar is not alive");
            v15 = std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::operator*((const std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 64));
            common::milog::MiLogStream::operator<<<Avatar,(Avatar*)0>(v14, v15);
            common::milog::MiLogStream::~MiLogStream(&v23);
            v6 = 102;
          }
        }
        std::shared_ptr<Avatar>::~shared_ptr((std::shared_ptr<Avatar> *const)(v2 + 64));
      }
      else
      {
        common::milog::MiLogStream::create(
          &v23,
          &common::milog::MiLogDefault::default_log_obj_,
          1u,
          "./src/player/avatar/player_avatar_comp.cpp",
          "checkChangeCurAvatar",
          1414);
        v9 = common::milog::MiLogStream::operator<<<char [29],(char *[29])0>(
               &v23,
               (const char (*)[29])"[AVATAR] avatar is not alive");
        v10 = std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::operator*((const std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false> *const)&this->cur_avatar_ptr_);
        common::milog::MiLogStream::operator<<<Avatar,(Avatar*)0>(v9, v10);
        common::milog::MiLogStream::~MiLogStream(&v23);
        v6 = 119;
      }
    }
  }
  result = v6;
  if ( v24 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8008) = 0;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8008) = -168430091;
  }
  return result;
};

// Line 1440: range 0000000017170314-0000000017171263
__int64 __fastcall PlayerAvatarComp::changeCurAvatar(PlayerAvatarComp *const this, uint64_t guid, bool is_notify)
{
  unsigned __int64 v3; // r13
  __int64 v4; // rax
  _DWORD *v5; // r12
  common::milog::MiLogStream *v6; // rax
  common::milog::MiLogStream *v7; // rax
  common::milog::MiLogStream *v8; // rcx
  unsigned int v9; // r14d
  std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v10; // rax
  unsigned __int64 v11; // rax
  unsigned __int64 v12; // rdx
  __int64 v13; // rsi
  uint64_t v14; // rdx
  common::milog::MiLogStream *v15; // rax
  common::milog::MiLogStream *v16; // rcx
  std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v17; // rax
  std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v18; // r14
  unsigned __int64 v19; // rax
  void (__fastcall *v20)(std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *, const Vector3 *); // r15
  std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v21; // rax
  const Vector3 *Position; // rax
  Entity *v23; // r14
  std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v24; // rax
  const Vector3 *Rotation; // rax
  Entity *v26; // r14
  std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v27; // rax
  uint32_t RoomId; // eax
  Avatar *v29; // r14
  std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v30; // rax
  const Vector3 *LastValidPos; // rax
  Avatar *v32; // r14
  std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v33; // rax
  const Vector3 *LastValidRot; // rax
  Avatar *v35; // r14
  std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v36; // rax
  uint64_t LastValidTime; // rax
  Avatar *v38; // rax
  proto::VisionType v39; // eax
  std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v40; // rax
  std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v42; // rax
  std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v43; // r14
  unsigned __int64 v44; // rax
  unsigned int (__fastcall *v45)(std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *, std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *, unsigned __int64); // r15
  std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v46; // rax
  common::milog::MiLogStream *v47; // r14
  std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v48; // rax
  std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v49; // rax
  common::milog::MiLogStream *v50; // r14
  std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v51; // rax
  std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v52; // rax
  std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v53; // rax
  std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v54; // r14
  unsigned __int64 v55; // rax
  unsigned int (__fastcall *v56)(std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *, std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *, unsigned __int64); // r15
  std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v57; // rsi
  common::milog::MiLogStream *v58; // r14
  Scene *v59; // rax
  common::milog::MiLogStream *v60; // rax
  common::milog::MiLogStream *v61; // rax
  common::milog::MiLogStream *v62; // r14
  Player *player; // r14
  PlayerMpComp *MpComp; // rax
  PlayerQuestComp *QuestComp; // rax
  PlayerQuestComp *v68; // rax
  PlayerQuestComp *v69; // rax
  PlayerEventComp *EventComp; // r14
  __int64 result; // rax
  unsigned int val; // [rsp+20h] [rbp-1F0h] BYREF
  proto::VisionType vision_type; // [rsp+24h] [rbp-1ECh]
  uint64_t now_ms; // [rsp+28h] [rbp-1E8h]
  AvatarTeam *avatar_team_ptr; // [rsp+30h] [rbp-1E0h]
  const std::vector<long unsigned int> *avatar_vec; // [rsp+38h] [rbp-1D8h]
  std::shared_ptr<ChangeAvatarEvent> __r; // [rsp+40h] [rbp-1D0h] BYREF
  common::milog::MiLogStream v79; // [rsp+50h] [rbp-1C0h] BYREF
  proto::PropValue prop_value; // [rsp+70h] [rbp-1A0h] BYREF
  char v81[368]; // [rsp+A0h] [rbp-170h] BYREF

  v3 = (unsigned __int64)v81;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_3(320LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "9 48 4 34 last_change_avatar_scene_time:1510 64 8 13 old_guid:1446 96 8 9 guid:1439 128 12 22 di"
                        "sappear_context:1473 160 12 19 appear_context:1498 192 16 19 old_avatar_ptr:1447 224 16 15 avata"
                        "r_ptr:1454 256 16 14 scene_ptr:1469 288 16 14 event_ptr:1531";
  *(_QWORD *)(v3 + 16) = PlayerAvatarComp::changeCurAvatar;
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = -234556943;
  v5[536862722] = -218959360;
  v5[536862723] = -218959360;
  v5[536862724] = -219020288;
  v5[536862725] = -219020288;
  v5[536862726] = -219021312;
  v5[536862727] = -219021312;
  v5[536862728] = -219021312;
  v5[536862729] = -202178560;
  *(_QWORD *)(v3 + 96) = guid;
  if ( !std::operator==<Avatar>(&this->cur_avatar_ptr_, 0LL) )
  {
    v10 = std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false> *const)&this->cur_avatar_ptr_);
    *(_QWORD *)(v3 + 64) = Avatar::getGuid(v10);
    std::shared_ptr<Avatar>::shared_ptr((std::shared_ptr<Avatar> *const)(v3 + 192), &this->cur_avatar_ptr_);
    v11 = (unsigned __int64)std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false> *const)&this->cur_avatar_ptr_);
    if ( *(_BYTE *)((v11 >> 3) + 0x7FFF8000) )
      v11 = __asan_report_load8(v11);
    v12 = *(_QWORD *)v11 + 400LL;
    v13 = *(unsigned __int8 *)((v12 >> 3) + 0x7FFF8000);
    if ( (_BYTE)v13 )
      v11 = __asan_report_load8(*(_QWORD *)v11 + 400LL);
    if ( (*(unsigned int (__fastcall **)(unsigned __int64))v12)(v11) == 1 )
    {
      v14 = *(_QWORD *)(v3 + 64);
      if ( *(_BYTE *)(((unsigned __int64)&this->last_avatar_guid_ >> 3) + 0x7FFF8000) )
        __asan_report_store8(&this->last_avatar_guid_, v13);
      this->last_avatar_guid_ = v14;
    }
    PlayerAvatarComp::findAvatar((const PlayerAvatarComp *const)(v3 + 224), (uint64_t)this, *(_QWORD *)(v3 + 96));
    if ( std::operator==<Avatar>((const std::shared_ptr<Avatar> *)(v3 + 224), 0LL) )
    {
      common::milog::MiLogStream::create(
        &v79,
        &common::milog::MiLogDefault::default_log_obj_,
        4u,
        "./src/player/avatar/player_avatar_comp.cpp",
        "changeCurAvatar",
        1457);
      v15 = common::milog::MiLogStream::operator<<<char [24],(char *[24])0>(
              &v79,
              (const char (*)[24])"findAvatar fails, guid:");
      v16 = common::milog::MiLogStream::operator<<<unsigned long,(unsigned long *)0>(
              v15,
              (const unsigned __int64 *)(v3 + 96));
      if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
        __asan_report_load8(&this->player_);
      operator<<(v16, this->player_);
      common::milog::MiLogStream::~MiLogStream(&v79);
      v9 = -1;
      goto LABEL_78;
    }
    now_ms = common::tools::TimeUtils::getNowMs();
    v17 = std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 224));
    v18 = v17;
    if ( *(_BYTE *)(((unsigned __int64)v17 >> 3) + 0x7FFF8000) )
      __asan_report_load8(v17);
    v19 = *(_QWORD *)v18->baseclass_0 + 80LL;
    if ( *(_BYTE *)((v19 >> 3) + 0x7FFF8000) )
      v19 = __asan_report_load8(*(_QWORD *)v18->baseclass_0 + 80LL);
    v20 = *(void (__fastcall **)(std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *, const Vector3 *))v19;
    v21 = std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false> *const)&this->cur_avatar_ptr_);
    Position = Entity::getPosition((const Entity *const)v21);
    v20(v18, Position);
    v23 = (Entity *)std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 224));
    v24 = std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false> *const)&this->cur_avatar_ptr_);
    Rotation = Entity::getRotation((const Entity *const)v24);
    Entity::setRotation(v23, Rotation);
    v26 = (Entity *)std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 224));
    v27 = std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false> *const)&this->cur_avatar_ptr_);
    RoomId = Entity::getRoomId((const Entity *const)v27);
    Entity::setRoomId(v26, RoomId);
    v29 = std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 224));
    v30 = std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false> *const)&this->cur_avatar_ptr_);
    LastValidPos = Avatar::getLastValidPos(v30);
    Avatar::setLastValidPos(v29, LastValidPos);
    v32 = std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 224));
    v33 = std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false> *const)&this->cur_avatar_ptr_);
    LastValidRot = Avatar::getLastValidRot(v33);
    Avatar::setLastValidRot(v32, LastValidRot);
    v35 = std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 224));
    v36 = std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false> *const)&this->cur_avatar_ptr_);
    LastValidTime = Avatar::getLastValidTime(v36);
    Avatar::setLastValidTime(v35, LastValidTime);
    v38 = std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 224));
    Avatar::clearSpeed(v38);
    std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false> *const)&this->cur_avatar_ptr_);
    Entity::getScene((const Entity *const)(v3 + 256));
    if ( is_notify )
      v39 = VISION_REPLACE;
    else
      v39 = VISION_REPLACE_NO_NOTIFY;
    vision_type = v39;
    if ( std::operator!=<Scene>((const std::shared_ptr<Scene> *)(v3 + 256), 0LL)
      && (v40 = std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false> *const)&this->cur_avatar_ptr_),
          Entity::isOnScene((const Entity *const)v40)) )
    {
      VisionContext::VisionContext((VisionContext *const)(v3 + 128), vision_type);
      v42 = std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 256));
      v43 = v42;
      if ( *(_BYTE *)(((unsigned __int64)v42 >> 3) + 0x7FFF8000) )
        __asan_report_load8(v42);
      v44 = (unsigned __int64)(v43->_vptr_DescribalBase + 14);
      if ( *(_BYTE *)((v44 >> 3) + 0x7FFF8000) )
        v44 = __asan_report_load8(v43->_vptr_DescribalBase + 14);
      v45 = *(unsigned int (__fastcall **)(std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *, std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *, unsigned __int64))v44;
      v46 = std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::operator*((const std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false> *const)&this->cur_avatar_ptr_);
      if ( v45(v43, v46, v3 + 128) )
      {
        common::milog::MiLogStream::create(
          &v79,
          &common::milog::MiLogDefault::default_log_obj_,
          3u,
          "./src/player/avatar/player_avatar_comp.cpp",
          "changeCurAvatar",
          1475);
        v47 = common::milog::MiLogStream::operator<<<char [22],(char *[22])0>(
                &v79,
                (const char (*)[22])"entityDisappear fails");
        v48 = std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::operator*((const std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 224));
        common::milog::MiLogStream::operator<<<Avatar,(Avatar*)0>(v47, v48);
        common::milog::MiLogStream::~MiLogStream(&v79);
      }
      v49 = std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 224));
      if ( !Entity::getEntityId((const Entity *const)v49) )
      {
        common::milog::MiLogStream::create(
          &v79,
          &common::milog::MiLogDefault::default_log_obj_,
          3u,
          "./src/player/avatar/player_avatar_comp.cpp",
          "changeCurAvatar",
          1480);
        v50 = common::milog::MiLogStream::operator<<<char [44],(char *[44])0>(
                &v79,
                (const char (*)[44])"changeCurAvatar fails.avatar entityid is 0.");
        v51 = std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::operator*((const std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 224));
        common::milog::MiLogStream::operator<<<Avatar,(Avatar*)0>(v50, v51);
        common::milog::MiLogStream::~MiLogStream(&v79);
        v9 = -1;
LABEL_77:
        std::shared_ptr<Scene>::~shared_ptr((std::shared_ptr<Scene> *const)(v3 + 256));
LABEL_78:
        std::shared_ptr<Avatar>::~shared_ptr((std::shared_ptr<Avatar> *const)(v3 + 224));
        std::shared_ptr<Avatar>::~shared_ptr((std::shared_ptr<Avatar> *const)(v3 + 192));
        goto LABEL_79;
      }
      std::shared_ptr<Avatar>::operator=(&this->cur_avatar_ptr_, (const std::shared_ptr<Avatar> *)(v3 + 224));
      VisionContext::VisionContext((VisionContext *const)(v3 + 160), vision_type);
      v52 = std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 192));
      *(_DWORD *)(v3 + 164) = Entity::getEntityId((const Entity *const)v52);
      v53 = std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 256));
      v54 = v53;
      if ( *(_BYTE *)(((unsigned __int64)v53 >> 3) + 0x7FFF8000) )
        __asan_report_load8(v53);
      v55 = (unsigned __int64)(v54->_vptr_DescribalBase + 13);
      if ( *(_BYTE *)((v55 >> 3) + 0x7FFF8000) )
        v55 = __asan_report_load8(v54->_vptr_DescribalBase + 13);
      v56 = *(unsigned int (__fastcall **)(std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *, std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *, unsigned __int64))v55;
      v57 = std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::operator*((const std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false> *const)&this->cur_avatar_ptr_);
      if ( v56(v54, v57, v3 + 160) )
      {
        common::milog::MiLogStream::create(
          &v79,
          &common::milog::MiLogDefault::default_log_obj_,
          3u,
          "./src/player/avatar/player_avatar_comp.cpp",
          "changeCurAvatar",
          1501);
        v58 = common::milog::MiLogStream::operator<<<char [19],(char *[19])0>(
                &v79,
                (const char (*)[19])"entityAppear fails");
        v57 = std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::operator*((const std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 224));
        common::milog::MiLogStream::operator<<<Avatar,(Avatar*)0>(v58, v57);
        common::milog::MiLogStream::~MiLogStream(&v79);
      }
    }
    else
    {
      v57 = (std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *)(v3 + 224);
      std::shared_ptr<Avatar>::operator=(&this->cur_avatar_ptr_, (const std::shared_ptr<Avatar> *)(v3 + 224));
    }
    if ( *(_BYTE *)(((unsigned __int64)&this->last_change_avatar_time_ms_ >> 3) + 0x7FFF8000) )
      __asan_report_store8(&this->last_change_avatar_time_ms_, v57);
    this->last_change_avatar_time_ms_ = now_ms;
    if ( std::operator!=<Scene>((const std::shared_ptr<Scene> *)(v3 + 256), 0LL) )
    {
      v59 = std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::operator*((const std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 256));
      *(_DWORD *)(v3 + 48) = PlayerAvatarComp::getLastChangeAvatarSceneTime(this, v59);
      common::milog::MiLogStream::create(
        &v79,
        &common::milog::MiLogDefault::default_log_obj_,
        1u,
        "./src/player/avatar/player_avatar_comp.cpp",
        "changeCurAvatar",
        1511);
      v60 = common::milog::MiLogStream::operator<<<char [36],(char *[36])0>(
              &v79,
              (const char (*)[36])"[cd] last_change_avatar_scene_time:");
      v61 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v60, (const unsigned int *)(v3 + 48));
      v62 = common::milog::MiLogStream::operator<<<char [6],(char *[6])0>(v61, (const char (*)[6])" uid:");
      if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
        __asan_report_load8(&this->player_);
      val = Player::getUid(this->player_);
      common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v62, &val);
      common::milog::MiLogStream::~MiLogStream(&v79);
      if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
        __asan_report_load8(&this->player_);
      player = this->player_;
      buildIntProp(&prop_value, 0x2711u, *(unsigned int *)(v3 + 48));
      Player::notifyPlayerProp(player, &prop_value);
      proto::PropValue::~PropValue(&prop_value);
    }
    avatar_team_ptr = PlayerAvatarComp::findCurAvatarTeam(this);
    if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
      __asan_report_load8(&this->player_);
    MpComp = Player::getMpComp(this->player_);
    if ( !PlayerMpComp::isInMpMode(MpComp) && avatar_team_ptr )
    {
      avatar_vec = AvatarTeam::getAvatarVec(avatar_team_ptr);
      if ( common::tools::MiscUtils::isContains<std::unordered_set<unsigned long>,unsigned long>(
             &this->temp_avatar_guid_set_,
             (const unsigned __int64 *)(v3 + 96))
        || common::tools::MiscUtils::isContains<unsigned long>(avatar_vec, (const unsigned __int64 *)(v3 + 96)) )
      {
        AvatarTeam::setLastCurAvatarGuid(avatar_team_ptr, *(_QWORD *)(v3 + 96));
      }
    }
    if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
      __asan_report_load8(&this->player_);
    QuestComp = Player::getQuestComp(this->player_);
    PlayerQuestComp::tryAcceptQuestByCond(QuestComp, QUEST_COND_AVATAR_CAN_CHANGE_ELEMENT, 1, 0);
    if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
      __asan_report_load8(&this->player_);
    v68 = Player::getQuestComp(this->player_);
    PlayerQuestComp::tryAcceptQuestByCond(v68, QUEST_COND_AVATAR_ELEMENT_EQUAL, 1, 0);
    if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
      __asan_report_load8(&this->player_);
    v69 = Player::getQuestComp(this->player_);
    PlayerQuestComp::tryAcceptQuestByCond(v69, QUEST_COND_AVATAR_ELEMENT_NOT_EQUAL, 1, 0);
    common::tools::perf::make_shared<ChangeAvatarEvent,unsigned long &,unsigned long &>(
      (unsigned __int64 *)&__r,
      (unsigned __int64 *)(v3 + 64),
      (unsigned __int64 *)(v3 + 96),
      (unsigned __int64 *)(v3 + 64));
    std::shared_ptr<BaseEvent>::shared_ptr<ChangeAvatarEvent,void>((std::shared_ptr<BaseEvent> *const)(v3 + 288), &__r);
    std::shared_ptr<ChangeAvatarEvent>::~shared_ptr(&__r);
    if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
      __asan_report_load8(&this->player_);
    EventComp = Player::getEventComp(this->player_);
    std::shared_ptr<BaseEvent>::shared_ptr(
      (std::shared_ptr<BaseEvent> *const)&__r,
      (const std::shared_ptr<BaseEvent> *)(v3 + 288));
    PlayerEventComp::notifyEvent(EventComp, (BaseEventPtr *)&__r);
    std::shared_ptr<BaseEvent>::~shared_ptr((std::shared_ptr<BaseEvent> *const)&__r);
    v9 = 0;
    std::shared_ptr<BaseEvent>::~shared_ptr((std::shared_ptr<BaseEvent> *const)(v3 + 288));
    goto LABEL_77;
  }
  common::milog::MiLogStream::create(
    &v79,
    &common::milog::MiLogDefault::default_log_obj_,
    4u,
    "./src/player/avatar/player_avatar_comp.cpp",
    "changeCurAvatar",
    1443);
  v6 = common::milog::MiLogStream::operator<<<char [34],(char *[34])0>(
         &v79,
         (const char (*)[34])"cur_avatar_ptr_ is nullptr, guid:");
  v7 = common::milog::MiLogStream::operator<<<unsigned long,(unsigned long *)0>(v6, (const unsigned __int64 *)(v3 + 96));
  v8 = common::milog::MiLogStream::operator<<<char [9],(char *[9])0>(v7, (const char (*)[9])" player:");
  if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
    __asan_report_load8(&this->player_);
  operator<<(v8, this->player_);
  common::milog::MiLogStream::~MiLogStream(&v79);
  v9 = -1;
LABEL_79:
  result = v9;
  if ( v81 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8010) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8018) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8020) = 0LL;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8020) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 1538: range 0000000017171264-00000000171712A9
bool __cdecl PlayerAvatarComp::isCurAvatarOnScene(PlayerAvatarComp *const this)
{
  std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v2; // rax

  if ( std::operator==<Avatar>(&this->cur_avatar_ptr_, 0LL) )
    return 0;
  v2 = std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false> *const)&this->cur_avatar_ptr_);
  return Entity::isOnScene((const Entity *const)v2);
};

// Line 1546: range 00000000171712AA-000000001717152B
__int64 __fastcall PlayerAvatarComp::isMyAvatarInSceneTeam(PlayerAvatarComp *const this, uint64_t guid)
{
  unsigned __int64 v2; // rbx
  __int64 v3; // rax
  _DWORD *v4; // r13
  common::milog::MiLogStream *v5; // rax
  common::milog::MiLogStream *v6; // rax
  common::milog::MiLogStream *v7; // rax
  common::milog::MiLogStream *v8; // rcx
  common::milog::MiLogStream *v9; // rax
  common::milog::MiLogStream *v10; // rax
  unsigned int v11; // r15d
  __int64 result; // rax
  common::milog::MiLogStream v13; // [rsp+10h] [rbp-D0h] BYREF
  char v14[176]; // [rsp+30h] [rbp-B0h] BYREF

  v2 = (unsigned __int64)v14;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_1(128LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "2 32 8 9 guid:1545 64 24 13 guid_vec:1547";
  *(_QWORD *)(v2 + 16) = PlayerAvatarComp::isMyAvatarInSceneTeam;
  v4 = (_DWORD *)(v2 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = -218959360;
  v4[536862722] = -218103808;
  v4[536862723] = -202116109;
  *(_QWORD *)(v2 + 32) = guid;
  PlayerAvatarComp::getMyAvatarTeamInSceneTeam((std::vector<long unsigned int> *)(v2 + 64), this);
  if ( !common::tools::MiscUtils::isContains<unsigned long>(
          (std::vector<long unsigned int> *)(v2 + 64),
          (const unsigned __int64 *)(v2 + 32)) )
  {
    common::milog::MiLogStream::create(
      &v13,
      &common::milog::MiLogDefault::default_log_obj_,
      1u,
      "./src/player/avatar/player_avatar_comp.cpp",
      "isMyAvatarInSceneTeam",
      1550);
    v5 = common::milog::MiLogStream::operator<<<char [6],(char *[6])0>(&v13, (const char (*)[6])"guid:");
    v6 = common::milog::MiLogStream::operator<<<unsigned long,(unsigned long *)0>(
           v5,
           (const unsigned __int64 *)(v2 + 32));
    v7 = common::milog::MiLogStream::operator<<<char [28],(char *[28])0>(v6, (const char (*)[28])off_2603C1A0);
    v8 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v7, &this->cur_avatar_team_id_);
    if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
      __asan_report_load8(&this->player_);
    v9 = operator<<(v8, this->player_);
    v10 = common::milog::MiLogStream::operator<<<char [12],(char *[12])0>(v9, (const char (*)[12])", guid_vec:");
    common::milog::MiLogStream::operator<<<unsigned long>(v10, (const std::vector<long unsigned int> *)(v2 + 64));
    common::milog::MiLogStream::~MiLogStream(&v13);
    v11 = 0;
  }
  else
  {
    v11 = 1;
  }
  std::vector<unsigned long>::~vector((std::vector<long unsigned int> *const)(v2 + 64));
  result = v11;
  if ( v14 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 1559: range 000000001717152C-0000000017171FF8
PlayerAvatarComp *__fastcall PlayerAvatarComp::addFormalAvatar(
        PlayerAvatarComp *const this,
        PlayerAvatarComp *avatar_id,
        int is_notify,
        uint32_t add_avatar_reason,
        uint32_t action_reason,
        uint32_t a6)
{
  unsigned __int64 v6; // r13
  __int64 v7; // rax
  _DWORD *v8; // r12
  common::milog::MiLogStream *v9; // rax
  common::milog::MiLogStream *v10; // rax
  common::milog::MiLogStream *v11; // rcx
  std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v12; // rax
  common::milog::MiLogStream *v13; // rax
  common::milog::MiLogStream *v14; // rax
  std::__shared_ptr_access<FormalAvatar,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v15; // r14
  std::__shared_ptr_access<FormalAvatar,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *p_skill_depot_id; // rdi
  std::__shared_ptr_access<FormalAvatar,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v17; // rax
  std::__shared_ptr_access<FormalAvatar,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v18; // rax
  uint32_t ItemComp; // esi
  common::milog::MiLogStream *v20; // rax
  std::__shared_ptr_access<FormalAvatar,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v21; // rax
  EquipComp *EquipComp; // r14
  std::__shared_ptr_access<Item,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v23; // rax
  uint64_t Guid; // rax
  common::milog::MiLogStream *v25; // rax
  unsigned __int64 v26; // rax
  unsigned __int64 v27; // rdx
  common::milog::MiLogStream *v28; // rax
  std::__shared_ptr_access<FormalAvatar,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v29; // rax
  unsigned __int64 v30; // rax
  unsigned __int64 v31; // rdx
  std::__shared_ptr_access<FormalAvatar,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v32; // rax
  common::milog::MiLogStream *v33; // rax
  char is_notifya; // [rsp+8h] [rbp-168h]
  const data::AvatarExcelConfig *avatar_config_ptr; // [rsp+28h] [rbp-148h]
  PlayerPtr p_player_ptr; // [rsp+30h] [rbp-140h] BYREF
  common::milog::MiLogStream v43; // [rsp+40h] [rbp-130h] BYREF
  char v44[272]; // [rsp+60h] [rbp-110h] BYREF

  is_notifya = add_avatar_reason;
  v6 = (unsigned __int64)v44;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v7 = __asan_stack_malloc_2(224LL);
    if ( v7 )
      v6 = v7;
  }
  *(_QWORD *)v6 = 1102416563LL;
  *(_QWORD *)(v6 + 8) = "5 48 4 14 avatar_id:1558 64 16 15 avatar_ptr:1581 96 16 22 formal_avatar_ptr:1582 128 16 13 item"
                        "_ptr:1595 160 24 11 reason:1594";
  *(_QWORD *)(v6 + 16) = PlayerAvatarComp::addFormalAvatar;
  v8 = (_DWORD *)(v6 >> 3);
  v8[536862720] = -235802127;
  v8[536862721] = -234556943;
  v8[536862722] = -219021312;
  v8[536862723] = -219021312;
  v8[536862724] = -219021312;
  v8[536862725] = -218103808;
  v8[536862726] = -202116109;
  *(_DWORD *)(v6 + 48) = is_notify;
  if ( PlayerAvatarComp::hasAvatar(avatar_id, AVATAR_TYPE_FORMAL, *(_DWORD *)(v6 + 48)) )
  {
    common::milog::MiLogStream::create(
      &v43,
      &common::milog::MiLogDefault::default_log_obj_,
      1u,
      "./src/player/avatar/player_avatar_comp.cpp",
      "addFormalAvatar",
      1562);
    v9 = common::milog::MiLogStream::operator<<<char [25],(char *[25])0>(
           &v43,
           (const char (*)[25])"formal avatar avatar_id:");
    v10 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v9, (const unsigned int *)(v6 + 48));
    v11 = common::milog::MiLogStream::operator<<<char [15],(char *[15])0>(v10, (const char (*)[15])" already exist");
    if ( *(_BYTE *)(((unsigned __int64)&avatar_id->player_ >> 3) + 0x7FFF8000) )
      __asan_report_load8(&avatar_id->player_);
    operator<<(v11, avatar_id->player_);
    common::milog::MiLogStream::~MiLogStream(&v43);
    std::shared_ptr<FormalAvatar>::shared_ptr((std::shared_ptr<FormalAvatar> *const)this, 0LL);
  }
  else
  {
    ServiceBox::findService<GameserverService>();
    GameserverService::getConfig((GameserverService *const)(v6 + 128));
    v12 = std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v6 + 128));
    avatar_config_ptr = data::AvatarExcelConfigMgrBase::findAvatarExcelConfig(
                          &v12->design_config.txt_config_mgr.avatar_config_mgr,
                          *(_DWORD *)(v6 + 48));
    std::shared_ptr<Config>::~shared_ptr((std::shared_ptr<Config> *const)(v6 + 128));
    if ( avatar_config_ptr )
    {
      PlayerAvatarComp::createAvatar(
        (PlayerAvatarComp *const)(v6 + 64),
        (uint32_t)avatar_id,
        1u,
        *(unsigned int *)(v6 + 48));
      std::dynamic_pointer_cast<FormalAvatar,Avatar>((const std::shared_ptr<Avatar> *)(v6 + 96));
      if ( std::operator==<FormalAvatar>((const std::shared_ptr<FormalAvatar> *)(v6 + 96), 0LL) )
      {
        common::milog::MiLogStream::create(
          &v43,
          &common::milog::MiLogDefault::default_log_obj_,
          3u,
          "./src/player/avatar/player_avatar_comp.cpp",
          "addFormalAvatar",
          1585);
        v14 = common::milog::MiLogStream::operator<<<char [31],(char *[31])0>(
                &v43,
                (const char (*)[31])"createAvatar fails, avatar_id:");
        common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v14, (const unsigned int *)(v6 + 48));
        common::milog::MiLogStream::~MiLogStream(&v43);
        std::shared_ptr<FormalAvatar>::shared_ptr((std::shared_ptr<FormalAvatar> *const)this, 0LL);
      }
      else
      {
        v15 = std::__shared_ptr_access<FormalAvatar,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<FormalAvatar,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v6 + 96));
        if ( *(_BYTE *)(((unsigned __int64)&avatar_id->player_ >> 3) + 0x7FFF8000) )
          __asan_report_load8(&avatar_id->player_);
        toThisPtr<Player>((Player *)&p_player_ptr);
        Avatar::setPlayer(v15, &p_player_ptr);
        std::shared_ptr<Player>::~shared_ptr(&p_player_ptr);
        p_skill_depot_id = std::__shared_ptr_access<FormalAvatar,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<FormalAvatar,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v6 + 96));
        if ( *(_BYTE *)(((unsigned __int64)&avatar_config_ptr->skill_depot_id >> 3) + 0x7FFF8000) != 0
          && (char)((((_BYTE)avatar_config_ptr + 60) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&avatar_config_ptr->skill_depot_id >> 3)
                                                                           + 0x7FFF8000) )
        {
          p_skill_depot_id = (std::__shared_ptr_access<FormalAvatar,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *)&avatar_config_ptr->skill_depot_id;
          __asan_report_load4(&avatar_config_ptr->skill_depot_id);
        }
        Avatar::setSkillDepotId(p_skill_depot_id, avatar_config_ptr->skill_depot_id);
        v17 = std::__shared_ptr_access<FormalAvatar,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<FormalAvatar,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v6 + 96));
        Creature::setLevel(v17, 1u);
        v18 = std::__shared_ptr_access<FormalAvatar,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<FormalAvatar,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v6 + 96));
        Creature::setLifeState(v18, LIFE_ALIVE);
        ActionReason::ActionReason((ActionReason *const)(v6 + 160), ACTION_REASON_ADD_AVATAR, ITEM_LIMIT_UNLIMITED);
        if ( *(_BYTE *)(((unsigned __int64)&avatar_id->player_ >> 3) + 0x7FFF8000) )
          __asan_report_load8(&avatar_id->player_);
        ItemComp = (unsigned int)Player::getItemComp(avatar_id->player_);
        if ( *(_BYTE *)(((unsigned __int64)&avatar_config_ptr->initial_weapon >> 3) + 0x7FFF8000) != 0
          && (char)((((_BYTE)avatar_config_ptr + 52) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&avatar_config_ptr->initial_weapon >> 3)
                                                                           + 0x7FFF8000) )
        {
          __asan_report_load4(&avatar_config_ptr->initial_weapon);
        }
        PlayerItemComp::forceAddEquipByAddAvatar(
          (PlayerItemComp *const)(v6 + 128),
          ItemComp,
          (const ActionReason *)avatar_config_ptr->initial_weapon);
        if ( std::operator==<Item>((const std::shared_ptr<Item> *)(v6 + 128), 0LL) )
        {
          common::milog::MiLogStream::create(
            &v43,
            &common::milog::MiLogDefault::default_log_obj_,
            3u,
            "./src/player/avatar/player_avatar_comp.cpp",
            "addFormalAvatar",
            1598);
          v20 = common::milog::MiLogStream::operator<<<char [31],(char *[31])0>(
                  &v43,
                  (const char (*)[31])"forceAddItem failed, weapon_id");
          common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
            v20,
            &avatar_config_ptr->initial_weapon);
          common::milog::MiLogStream::~MiLogStream(&v43);
          std::shared_ptr<FormalAvatar>::shared_ptr((std::shared_ptr<FormalAvatar> *const)this, 0LL);
        }
        else
        {
          v21 = std::__shared_ptr_access<FormalAvatar,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<FormalAvatar,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v6 + 96));
          EquipComp = Avatar::getEquipComp(v21);
          v23 = std::__shared_ptr_access<Item,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Item,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v6 + 128));
          Guid = Item::getGuid(v23);
          if ( EquipComp::setInitWeapon(EquipComp, Guid) )
          {
            common::milog::MiLogStream::create(
              &v43,
              &common::milog::MiLogDefault::default_log_obj_,
              3u,
              "./src/player/avatar/player_avatar_comp.cpp",
              "addFormalAvatar",
              1603);
            v25 = common::milog::MiLogStream::operator<<<char [33],(char *[33])0>(
                    &v43,
                    (const char (*)[33])"setInitWeapon failed, avatar_id:");
            common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v25, (const unsigned int *)(v6 + 48));
            common::milog::MiLogStream::~MiLogStream(&v43);
            std::shared_ptr<FormalAvatar>::shared_ptr((std::shared_ptr<FormalAvatar> *const)this, 0LL);
          }
          else
          {
            v26 = (unsigned __int64)std::__shared_ptr_access<FormalAvatar,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<FormalAvatar,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v6 + 96));
            if ( *(_BYTE *)((v26 >> 3) + 0x7FFF8000) )
              v26 = __asan_report_load8(v26);
            v27 = *(_QWORD *)v26 + 408LL;
            if ( *(_BYTE *)((v27 >> 3) + 0x7FFF8000) )
              v26 = __asan_report_load8(*(_QWORD *)v26 + 408LL);
            if ( (*(unsigned int (__fastcall **)(unsigned __int64, __int64))v27)(v26, 1LL) )
            {
              common::milog::MiLogStream::create(
                &v43,
                &common::milog::MiLogDefault::default_log_obj_,
                3u,
                "./src/player/avatar/player_avatar_comp.cpp",
                "addFormalAvatar",
                1609);
              v28 = common::milog::MiLogStream::operator<<<char [42],(char *[42])0>(
                      &v43,
                      (const char (*)[42])"formal_avatar_ptr init failed, avatar_id:");
              common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                v28,
                (const unsigned int *)(v6 + 48));
              common::milog::MiLogStream::~MiLogStream(&v43);
              std::shared_ptr<FormalAvatar>::shared_ptr((std::shared_ptr<FormalAvatar> *const)this, 0LL);
            }
            else
            {
              v29 = std::__shared_ptr_access<FormalAvatar,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<FormalAvatar,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v6 + 96));
              Creature::setCurHpFull(v29, 1);
              v30 = (unsigned __int64)std::__shared_ptr_access<FormalAvatar,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<FormalAvatar,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v6 + 96));
              if ( *(_BYTE *)((v30 >> 3) + 0x7FFF8000) )
                v30 = __asan_report_load8(v30);
              v31 = *(_QWORD *)v30 + 512LL;
              if ( *(_BYTE *)((v31 >> 3) + 0x7FFF8000) )
                v30 = __asan_report_load8(*(_QWORD *)v30 + 512LL);
              (*(void (__fastcall **)(unsigned __int64))v31)(v30);
              v32 = std::__shared_ptr_access<FormalAvatar,(__gnu_cxx::_Lock_policy)2,false,false>::operator*((const std::__shared_ptr_access<FormalAvatar,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v6 + 96));
              if ( PlayerAvatarComp::addAvatar(avatar_id, v32, is_notifya, action_reason, a6) )
              {
                common::milog::MiLogStream::create(
                  &v43,
                  &common::milog::MiLogDefault::default_log_obj_,
                  3u,
                  "./src/player/avatar/player_avatar_comp.cpp",
                  "addFormalAvatar",
                  1618);
                v33 = common::milog::MiLogStream::operator<<<char [29],(char *[29])0>(
                        &v43,
                        (const char (*)[29])"addAvatar failed, avatar_id:");
                common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                  v33,
                  (const unsigned int *)(v6 + 48));
                common::milog::MiLogStream::~MiLogStream(&v43);
                std::shared_ptr<FormalAvatar>::shared_ptr((std::shared_ptr<FormalAvatar> *const)this, 0LL);
              }
              else
              {
                std::shared_ptr<FormalAvatar>::shared_ptr(
                  (std::shared_ptr<FormalAvatar> *const)this,
                  (std::shared_ptr<FormalAvatar> *)(v6 + 96));
              }
            }
          }
        }
        std::shared_ptr<Item>::~shared_ptr((std::shared_ptr<Item> *const)(v6 + 128));
      }
      std::shared_ptr<FormalAvatar>::~shared_ptr((std::shared_ptr<FormalAvatar> *const)(v6 + 96));
      std::shared_ptr<Avatar>::~shared_ptr((std::shared_ptr<Avatar> *const)(v6 + 64));
    }
    else
    {
      common::milog::MiLogStream::create(
        &v43,
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/player/avatar/player_avatar_comp.cpp",
        "addFormalAvatar",
        1569);
      v13 = common::milog::MiLogStream::operator<<<char [35],(char *[35])0>(
              &v43,
              (const char (*)[35])"findAvatarConfig fails, avatar_id:");
      common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v13, (const unsigned int *)(v6 + 48));
      common::milog::MiLogStream::~MiLogStream(&v43);
      std::shared_ptr<FormalAvatar>::shared_ptr((std::shared_ptr<FormalAvatar> *const)this, 0LL);
    }
  }
  if ( v44 == (char *)v6 )
  {
    *(_QWORD *)((v6 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v6 >> 3) + 0x7FFF8008) = 0LL;
    *(_QWORD *)((v6 >> 3) + 0x7FFF8010) = 0LL;
    *(_DWORD *)((v6 >> 3) + 0x7FFF8018) = 0;
  }
  else
  {
    *(_QWORD *)v6 = 1172321806LL;
    *(_QWORD *)((v6 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v6 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v6 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v6 >> 3) + 0x7FFF8018) = -168430091;
  }
  return this;
};

// Line 1626: range 0000000017171FFA-0000000017172CCC
int32_t __cdecl PlayerAvatarComp::addAvatar(
        PlayerAvatarComp *const this,
        Avatar *avatar,
        bool is_notify,
        uint32_t add_avatar_reason,
        uint32_t action_reason)
{
  int32_t v5; // r14d
  unsigned __int64 v6; // r13
  __int64 v7; // rax
  _DWORD *v8; // r12
  PlayerBasicComp *BasicComp; // rax
  bool v10; // r15
  AvatarTeam *v11; // rax
  std::vector<long unsigned int> *AvatarVec; // rax
  uint64_t *v13; // rax
  unsigned __int64 v14; // rax
  PlayerMpComp *MpComp; // rax
  char v16; // al
  std::__shared_ptr_access<proto::AvatarAddNotify,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v17; // rax
  unsigned __int64 v18; // rax
  int v19; // r15d
  std::__shared_ptr_access<proto::AvatarAddNotify,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v20; // rax
  Player *player; // r15
  std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v22; // rax
  std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v23; // rax
  common::milog::MiLogStream *v24; // r14
  int v25; // r15d
  std::__shared_ptr_access<proto_log::PlayerLogBodyAddAvatar,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v26; // r14
  uint32_t AvatarId; // eax
  unsigned __int64 v28; // rax
  std::__shared_ptr_access<proto_log::PlayerLogBodyAddAvatar,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v29; // rax
  std::__shared_ptr_access<proto_log::PlayerLogBodyAddAvatar,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v30; // rax
  std::__shared_ptr_access<proto_log::PlayerLogBodyAddAvatar,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v31; // rax
  Player *v32; // r14
  PlayerEventComp *EventComp; // r14
  int32_t result; // eax
  std::string v35; // [rsp+0h] [rbp-1D0h]
  char *v36; // [rsp+8h] [rbp-1C8h]
  uint32_t action_reasona; // [rsp+14h] [rbp-1BCh]
  uint32_t add_avatar_reasona; // [rsp+18h] [rbp-1B8h]
  bool is_notifya; // [rsp+1Ch] [rbp-1B4h]
  bool is_formal_avatar; // [rsp+3Ah] [rbp-196h]
  bool enter_saved_team; // [rsp+3Bh] [rbp-195h]
  unsigned int val; // [rsp+3Ch] [rbp-194h] BYREF
  uint32_t team_avatar_count; // [rsp+40h] [rbp-190h]
  uint32_t quality_type; // [rsp+44h] [rbp-18Ch]
  std::vector<long unsigned int>::iterator __for_begin; // [rsp+48h] [rbp-188h] BYREF
  std::vector<long unsigned int>::iterator __for_end; // [rsp+50h] [rbp-180h] BYREF
  uint64_t guid; // [rsp+58h] [rbp-178h]
  std::vector<long unsigned int> *__for_range; // [rsp+60h] [rbp-170h]
  proto::AvatarInfo *avatar_info; // [rsp+68h] [rbp-168h]
  uint64_t avatar_guid; // [rsp+70h] [rbp-160h]
  const data::AvatarExcelConfig *avatar_config_ptr; // [rsp+78h] [rbp-158h]
  std::string v52; // [rsp+80h] [rbp-150h] BYREF
  char v53[304]; // [rsp+A0h] [rbp-130h] BYREF

  *((_DWORD *)&v35._anon_0._M_allocated_capacity + 2) = add_avatar_reason;
  HIDWORD(v35._anon_0._M_allocated_capacity) = action_reason;
  v35._anon_0._M_local_buf[12] = is_notify;
  v6 = (unsigned __int64)v53;
  v35._M_string_length = (std::string::size_type)v53;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v7 = __asan_stack_malloc_2(256LL);
    if ( v7 )
      v6 = v7;
  }
  *(_QWORD *)v6 = 1102416563LL;
  *(_QWORD *)(v6 + 8) = "6 48 1 11 holder:1627 64 16 15 avatar_ptr:1628 96 16 23 add_avatar_log_ptr:1680 128 16 14 event_"
                        "ptr:1692 160 16 22 formal_avatar_ptr:1640 192 24 20 cur_avatar_team:1636";
  *(_QWORD *)(v6 + 16) = PlayerAvatarComp::addAvatar;
  v8 = (_DWORD *)(v6 >> 3);
  v8[536862720] = -235802127;
  v8[536862721] = -234753551;
  v8[536862722] = -219021312;
  v8[536862723] = -219021312;
  v8[536862724] = -219021312;
  v8[536862725] = -219021312;
  v8[536862726] = -218103808;
  v8[536862727] = -202116109;
  if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
    __asan_report_load8(&this->player_);
  BasicComp = Player::getBasicComp(this->player_);
  PlayerBasicComp::getNextTransNo[abi:cxx11](&v52, BasicComp);
  StatLogUtils::ContextHolder::ContextHolder((StatLogUtils::ContextHolder *const)(v6 + 48), 0x453u, v35);
  std::string::~string(&v52);
  toThisPtr<Avatar>((Avatar *)(v6 + 64));
  std::shared_ptr<Avatar>::shared_ptr(
    (std::shared_ptr<Avatar> *const)(v6 + 160),
    (const std::shared_ptr<Avatar> *)(v6 + 64));
  v10 = PlayerAvatarComp::emplaceAvatar(this, (AvatarPtr *)(v6 + 160)) != 0;
  std::shared_ptr<Avatar>::~shared_ptr((std::shared_ptr<Avatar> *const)(v6 + 160));
  if ( v10 )
  {
    common::milog::MiLogStream::create(
      (common::milog::MiLogStream *)&v52,
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/player/avatar/player_avatar_comp.cpp",
      "addAvatar",
      1631);
    common::milog::MiLogStream::operator<<<char [21],(char *[21])0>(
      (common::milog::MiLogStream *const)&v52,
      (const char (*)[21])"emplaceAvatar failed");
    common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)&v52);
    v5 = -1;
  }
  else
  {
    if ( !is_notifya )
      goto LABEL_51;
    v11 = std::map<unsigned int,AvatarTeam>::operator[](&this->avatar_team_map_, &this->cur_avatar_team_id_);
    AvatarVec = AvatarTeam::getAvatarVec(v11);
    std::vector<unsigned long>::vector((std::vector<long unsigned int> *const)(v6 + 192), AvatarVec);
    team_avatar_count = 0;
    __for_range = (std::vector<long unsigned int> *)(v6 + 192);
    __for_begin._M_current = std::vector<unsigned long>::begin((std::vector<long unsigned int> *const)(v6 + 192))._M_current;
    __for_end._M_current = std::vector<unsigned long>::end((std::vector<long unsigned int> *const)(v6 + 192))._M_current;
    while ( __gnu_cxx::operator!=<unsigned long *,std::vector<unsigned long>>(&__for_begin, &__for_end) )
    {
      v13 = __gnu_cxx::__normal_iterator<unsigned long *,std::vector<unsigned long>>::operator*(&__for_begin);
      if ( *(_BYTE *)(((unsigned __int64)v13 >> 3) + 0x7FFF8000) )
        v13 = (uint64_t *)__asan_report_load8(v13);
      avatar_guid = *v13;
      PlayerAvatarComp::findFormalAvatar((const PlayerAvatarComp *const)(v6 + 160), (uint64_t)this, avatar_guid);
      if ( std::operator!=<FormalAvatar>(0LL, (const std::shared_ptr<FormalAvatar> *)(v6 + 160)) )
        ++team_avatar_count;
      std::shared_ptr<FormalAvatar>::~shared_ptr((std::shared_ptr<FormalAvatar> *const)(v6 + 160));
      __gnu_cxx::__normal_iterator<unsigned long *,std::vector<unsigned long>>::operator++(&__for_begin);
    }
    if ( *(_BYTE *)(((unsigned __int64)avatar >> 3) + 0x7FFF8000) )
      __asan_report_load8(avatar);
    v14 = *(_QWORD *)avatar->baseclass_0 + 400LL;
    if ( *(_BYTE *)((v14 >> 3) + 0x7FFF8000) )
      v14 = __asan_report_load8(*(_QWORD *)avatar->baseclass_0 + 400LL);
    is_formal_avatar = (*(unsigned int (__fastcall **)(Avatar *))v14)(avatar) == 1;
    if ( team_avatar_count > 3
      || !is_formal_avatar
      || !std::vector<unsigned long>::empty(&this->quest_lock_team_avatar_guid_vec_)
      || !std::vector<unsigned long>::empty(&this->lock_team_avatar_guid_vec_) )
    {
      goto LABEL_28;
    }
    if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
      __asan_report_load8(&this->player_);
    MpComp = Player::getMpComp(this->player_);
    if ( !PlayerMpComp::isInMpMode(MpComp) )
      v16 = 1;
    else
LABEL_28:
      v16 = 0;
    enter_saved_team = v16;
    common::tools::perf::make_shared<proto::AvatarAddNotify>();
    v17 = std::__shared_ptr_access<proto::AvatarAddNotify,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<proto::AvatarAddNotify,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v6 + 128));
    avatar_info = proto::AvatarAddNotify::mutable_avatar(v17);
    if ( *(_BYTE *)(((unsigned __int64)avatar >> 3) + 0x7FFF8000) )
      __asan_report_load8(avatar);
    v18 = *(_QWORD *)avatar->baseclass_0 + 472LL;
    if ( *(_BYTE *)((v18 >> 3) + 0x7FFF8000) )
      v18 = __asan_report_load8(*(_QWORD *)avatar->baseclass_0 + 472LL);
    if ( (*(unsigned int (__fastcall **)(Avatar *, proto::AvatarInfo *))v18)(avatar, avatar_info) )
    {
      common::milog::MiLogStream::create(
        (common::milog::MiLogStream *)&v52,
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/player/avatar/player_avatar_comp.cpp",
        "addAvatar",
        1657);
      common::milog::MiLogStream::operator<<<char [15],(char *[15])0>(
        (common::milog::MiLogStream *const)&v52,
        (const char (*)[15])"toClient fails");
      common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)&v52);
      v5 = 0;
      v19 = 0;
    }
    else
    {
      v20 = std::__shared_ptr_access<proto::AvatarAddNotify,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<proto::AvatarAddNotify,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v6 + 128));
      proto::AvatarAddNotify::set_is_in_team(v20, enter_saved_team);
      if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
        __asan_report_load8(&this->player_);
      player = this->player_;
      std::dynamic_pointer_cast<google::protobuf::Message const,proto::AvatarAddNotify>((const std::shared_ptr<proto::AvatarAddNotify> *)(v6 + 160));
      Player::sendMessage(player, (common::minet::ConstMessagePtr *)(v6 + 160), 0LL);
      std::shared_ptr<google::protobuf::Message const>::~shared_ptr((std::shared_ptr<const google::protobuf::Message> *const)(v6 + 160));
      if ( !enter_saved_team )
        goto LABEL_49;
      v22 = std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v6 + 64));
      __for_end._M_current = (unsigned __int64 *)Avatar::getGuid(v22);
      std::vector<unsigned long>::emplace_back<unsigned long>(
        (std::vector<long unsigned int> *const)(v6 + 192),
        (unsigned __int64 *)&__for_end,
        (unsigned __int64 *)&__for_end);
      guid = 0LL;
      PlayerAvatarComp::getCurAvatar((const PlayerAvatarComp *const)(v6 + 160));
      if ( std::operator!=<Avatar>(0LL, (const std::shared_ptr<Avatar> *)(v6 + 160)) )
      {
        v23 = std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v6 + 160));
        guid = Avatar::getGuid(v23);
      }
      if ( *(_BYTE *)(((unsigned __int64)&this->cur_avatar_team_id_ >> 3) + 0x7FFF8000) != 0
        && *(_BYTE *)(((unsigned __int64)&this->cur_avatar_team_id_ >> 3) + 0x7FFF8000) <= 3 )
      {
        __asan_report_load4(&this->cur_avatar_team_id_);
      }
      if ( PlayerAvatarComp::setUpAvatarTeam(
             this,
             this->cur_avatar_team_id_,
             (const std::vector<long unsigned int> *)(v6 + 192),
             guid) )
      {
        common::milog::MiLogStream::create(
          (common::milog::MiLogStream *)&v52,
          &common::milog::MiLogDefault::default_log_obj_,
          3u,
          "./src/player/avatar/player_avatar_comp.cpp",
          "addAvatar",
          1674);
        v24 = common::milog::MiLogStream::operator<<<char [28],(char *[28])0>(
                (common::milog::MiLogStream *const)&v52,
                (const char (*)[28])"saveAvatarTeam failed, uid:");
        if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
          __asan_report_load8(&this->player_);
        val = Player::getUid(this->player_);
        common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v24, &val);
        common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)&v52);
        v5 = 0;
        v25 = 0;
      }
      else
      {
        v25 = 1;
      }
      std::shared_ptr<Avatar>::~shared_ptr((std::shared_ptr<Avatar> *const)(v6 + 160));
      if ( v25 == 1 )
LABEL_49:
        v19 = 1;
      else
        v19 = 0;
    }
    std::shared_ptr<proto::AvatarAddNotify>::~shared_ptr((std::shared_ptr<proto::AvatarAddNotify> *const)(v6 + 128));
    std::vector<unsigned long>::~vector((std::vector<long unsigned int> *const)(v6 + 192));
    if ( v19 == 1 )
    {
LABEL_51:
      common::tools::perf::make_shared<proto_log::PlayerLogBodyAddAvatar>();
      v26 = std::__shared_ptr_access<proto_log::PlayerLogBodyAddAvatar,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<proto_log::PlayerLogBodyAddAvatar,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v6 + 96));
      AvatarId = Avatar::getAvatarId(avatar);
      proto_log::PlayerLogBodyAddAvatar::set_avatar_id(v26, AvatarId);
      if ( *(_BYTE *)(((unsigned __int64)avatar >> 3) + 0x7FFF8000) )
        __asan_report_load8(avatar);
      v28 = *(_QWORD *)avatar->baseclass_0 + 312LL;
      if ( *(_BYTE *)((v28 >> 3) + 0x7FFF8000) )
        v28 = __asan_report_load8(*(_QWORD *)avatar->baseclass_0 + 312LL);
      avatar_config_ptr = (const data::AvatarExcelConfig *)(*(__int64 (__fastcall **)(Avatar *))v28)(avatar);
      if ( avatar_config_ptr )
      {
        if ( *(_BYTE *)(((unsigned __int64)&avatar_config_ptr->quality_type >> 3) + 0x7FFF8000) != 0
          && *(_BYTE *)(((unsigned __int64)&avatar_config_ptr->quality_type >> 3) + 0x7FFF8000) <= 3 )
        {
          __asan_report_load4(&avatar_config_ptr->quality_type);
        }
        quality_type = avatar_config_ptr->quality_type;
        v29 = std::__shared_ptr_access<proto_log::PlayerLogBodyAddAvatar,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<proto_log::PlayerLogBodyAddAvatar,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v6 + 96));
        proto_log::PlayerLogBodyAddAvatar::set_avatar_quality(v29, quality_type);
      }
      v30 = std::__shared_ptr_access<proto_log::PlayerLogBodyAddAvatar,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<proto_log::PlayerLogBodyAddAvatar,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v6 + 96));
      proto_log::PlayerLogBodyAddAvatar::set_add_avatar_reason(v30, add_avatar_reasona);
      v31 = std::__shared_ptr_access<proto_log::PlayerLogBodyAddAvatar,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<proto_log::PlayerLogBodyAddAvatar,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v6 + 96));
      proto_log::PlayerLogBodyAddAvatar::set_action_reason(v31, action_reasona);
      if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
        __asan_report_load8(&this->player_);
      v32 = this->player_;
      std::shared_ptr<google::protobuf::Message>::shared_ptr(
        (std::shared_ptr<google::protobuf::Message> *const)(v6 + 160),
        0LL);
      std::shared_ptr<google::protobuf::Message>::shared_ptr<proto_log::PlayerLogBodyAddAvatar,void>(
        (std::shared_ptr<google::protobuf::Message> *const)(v6 + 128),
        (const std::shared_ptr<proto_log::PlayerLogBodyAddAvatar> *)(v6 + 96));
      Player::printStatLog(v32, (MessagePtr *)(v6 + 128), (MessagePtr *)(v6 + 160), 0xEu);
      std::shared_ptr<google::protobuf::Message>::~shared_ptr((std::shared_ptr<google::protobuf::Message> *const)(v6 + 128));
      std::shared_ptr<google::protobuf::Message>::~shared_ptr((std::shared_ptr<google::protobuf::Message> *const)(v6 + 160));
      val = Avatar::getAvatarId(avatar);
      common::tools::perf::make_shared<ObtainAvatarEvent,unsigned int>((unsigned int *)(v6 + 160), &val);
      std::shared_ptr<BaseEvent>::shared_ptr<ObtainAvatarEvent,void>(
        (std::shared_ptr<BaseEvent> *const)(v6 + 128),
        (std::shared_ptr<ObtainAvatarEvent> *)(v6 + 160));
      std::shared_ptr<ObtainAvatarEvent>::~shared_ptr((std::shared_ptr<ObtainAvatarEvent> *const)(v6 + 160));
      if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
        __asan_report_load8(&this->player_);
      EventComp = Player::getEventComp(this->player_);
      std::shared_ptr<BaseEvent>::shared_ptr(
        (std::shared_ptr<BaseEvent> *const)(v6 + 160),
        (const std::shared_ptr<BaseEvent> *)(v6 + 128));
      PlayerEventComp::notifyEvent(EventComp, (BaseEventPtr *)(v6 + 160));
      std::shared_ptr<BaseEvent>::~shared_ptr((std::shared_ptr<BaseEvent> *const)(v6 + 160));
      v5 = 0;
      std::shared_ptr<BaseEvent>::~shared_ptr((std::shared_ptr<BaseEvent> *const)(v6 + 128));
      std::shared_ptr<proto_log::PlayerLogBodyAddAvatar>::~shared_ptr((std::shared_ptr<proto_log::PlayerLogBodyAddAvatar> *const)(v6 + 96));
    }
  }
  std::shared_ptr<Avatar>::~shared_ptr((std::shared_ptr<Avatar> *const)(v6 + 64));
  StatLogUtils::ContextHolder::~ContextHolder((StatLogUtils::ContextHolder *const)(v6 + 48));
  result = v5;
  if ( v36 == (char *)v6 )
  {
    *(_QWORD *)((v6 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v6 >> 3) + 0x7FFF8008) = 0LL;
    *(_QWORD *)((v6 >> 3) + 0x7FFF8010) = 0LL;
    *(_QWORD *)((v6 >> 3) + 0x7FFF8018) = 0LL;
  }
  else
  {
    *(_QWORD *)v6 = 1172321806LL;
    *(_QWORD *)((v6 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v6 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v6 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v6 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 1699: range 0000000017172CCE-0000000017173830
__int64 __fastcall PlayerAvatarComp::delAvatar(PlayerAvatarComp *const this, uint32_t avatar_id, bool is_notify)
{
  unsigned int v3; // r14d
  unsigned __int64 v4; // r13
  __int64 v5; // rax
  _DWORD *v6; // r12
  std::_Rb_tree_iterator<std::pair<long unsigned int const,std::shared_ptr<Avatar> > >::pointer v7; // rax
  std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v8; // rax
  common::milog::MiLogStream *v9; // r14
  std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v10; // rax
  int v11; // r15d
  Scene *v12; // r15
  Avatar *v13; // rax
  unsigned __int64 v14; // rax
  std::__shared_ptr_access<proto::AvatarDelNotify,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v15; // r15
  std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v16; // rax
  uint64_t Guid; // rax
  std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v18; // rax
  common::milog::MiLogStream *v19; // r14
  common::milog::MiLogStream *v20; // rax
  common::milog::MiLogStream *v21; // rax
  common::milog::MiLogStream *v22; // rax
  unsigned __int64 v23; // rax
  unsigned __int64 *M_current; // r14
  std::vector<long unsigned int>::iterator v25; // rax
  std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v26; // rax
  uint64_t v27; // rax
  Player *player; // r14
  unsigned __int64 v29; // rax
  PlayerSceneComp *SceneComp; // rax
  PlayerEventComp *EventComp; // r14
  unsigned __int64 *v32; // r8
  proto::AvatarType *v33; // r9
  __int64 result; // rax
  unsigned int val; // [rsp+24h] [rbp-1ECh] BYREF
  std::map<unsigned int,AvatarTeam>::iterator __for_begin; // [rsp+28h] [rbp-1E8h] BYREF
  std::map<unsigned int,AvatarTeam>::iterator __for_end; // [rsp+30h] [rbp-1E0h] BYREF
  std::set<long unsigned int>::iterator __for_begin_0; // [rsp+38h] [rbp-1D8h] BYREF
  std::set<long unsigned int>::iterator __for_end_0; // [rsp+40h] [rbp-1D0h] BYREF
  __gnu_cxx::__normal_iterator<long unsigned int*,std::vector<long unsigned int> > __i; // [rsp+48h] [rbp-1C8h] BYREF
  std::set<long unsigned int>::iterator __for_end_1; // [rsp+50h] [rbp-1C0h] BYREF
  std::map<unsigned int,AvatarTeam> *__for_range; // [rsp+58h] [rbp-1B8h]
  std::set<long unsigned int> *__for_range_1; // [rsp+60h] [rbp-1B0h]
  std::pair<unsigned int const,AvatarTeam> *p; // [rsp+68h] [rbp-1A8h]
  std::vector<long unsigned int> *avatar_team_vec; // [rsp+70h] [rbp-1A0h]
  std::set<long unsigned int> *__for_range_0; // [rsp+78h] [rbp-198h]
  common::milog::MiLogStream v48; // [rsp+80h] [rbp-190h] BYREF
  char v49[368]; // [rsp+A0h] [rbp-170h] BYREF

  v4 = (unsigned __int64)v49;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v5 = __asan_stack_malloc_3(320LL);
    if ( v5 )
      v4 = v5;
  }
  *(_QWORD *)v4 = 1102416563LL;
  *(_QWORD *)(v4 + 8) = "8 32 4 14 avatar_id:1698 48 8 9 guid:1743 80 8 9 guid:1750 112 8 9 guid:1718 144 16 19 del_notif"
                        "y_ptr:1701 176 16 15 avatar_ptr:1704 208 16 14 scene_ptr:1713 240 48 13 guid_set:1700";
  *(_QWORD *)(v4 + 16) = PlayerAvatarComp::delAvatar;
  v6 = (_DWORD *)(v4 >> 3);
  v6[536862720] = -235802127;
  v6[536862721] = 61956;
  v6[536862721] = -234881024;
  v6[536862722] = 62194;
  v6[536862722] = -234881024;
  v6[536862723] = 62194;
  v6[536862723] = -234881024;
  v6[536862724] = 62194;
  v6[536862725] = 62194;
  v6[536862726] = 62194;
  v6[536862727] = 62194;
  v6[536862729] = -202116109;
  *(_DWORD *)(v4 + 32) = avatar_id;
  std::set<unsigned long>::set((std::set<long unsigned int> *const)(v4 + 240));
  common::tools::perf::make_shared<proto::AvatarDelNotify>();
  *(std::map<long unsigned int,std::shared_ptr<Avatar>>::iterator *)(v4 + 80) = std::map<unsigned long,std::shared_ptr<Avatar>>::begin(&this->avatar_map_);
  while ( 1 )
  {
    __for_end_1._M_node = std::map<unsigned long,std::shared_ptr<Avatar>>::end(&this->avatar_map_)._M_node;
    if ( !std::operator!=(
            (const std::_Rb_tree_iterator<std::pair<long unsigned int const,std::shared_ptr<Avatar> > >::_Self *)(v4 + 80),
            (const std::_Rb_tree_iterator<std::pair<long unsigned int const,std::shared_ptr<Avatar> > >::_Self *)&__for_end_1) )
      break;
    v7 = std::_Rb_tree_iterator<std::pair<unsigned long const,std::shared_ptr<Avatar>>>::operator->((const std::_Rb_tree_iterator<std::pair<long unsigned int const,std::shared_ptr<Avatar> > > *const)(v4 + 80));
    std::shared_ptr<Avatar>::shared_ptr((std::shared_ptr<Avatar> *const)(v4 + 176), &v7->second);
    v8 = std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 176));
    if ( Avatar::getAvatarId(v8) != *(_DWORD *)(v4 + 32) )
    {
      std::_Rb_tree_iterator<std::pair<unsigned long const,std::shared_ptr<Avatar>>>::operator++((std::_Rb_tree_iterator<std::pair<long unsigned int const,std::shared_ptr<Avatar> > > *const)(v4 + 80));
LABEL_15:
      v11 = 1;
      goto LABEL_16;
    }
    if ( !std::operator==<Avatar,Avatar>((const std::shared_ptr<Avatar> *)(v4 + 176), &this->cur_avatar_ptr_) )
    {
      std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 176));
      Entity::getScene((const Entity *const)(v4 + 208));
      if ( std::operator!=<Scene>((const std::shared_ptr<Scene> *)(v4 + 208), 0LL) )
      {
        v12 = std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 208));
        v13 = std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::operator*((const std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 176));
        Scene::delAvatarAndWeaponEntity(v12, v13);
      }
      v14 = (unsigned __int64)std::_Rb_tree_iterator<std::pair<unsigned long const,std::shared_ptr<Avatar>>>::operator->((const std::_Rb_tree_iterator<std::pair<long unsigned int const,std::shared_ptr<Avatar> > > *const)(v4 + 80));
      if ( *(_BYTE *)((v14 >> 3) + 0x7FFF8000) )
        v14 = __asan_report_load8(v14);
      *(_QWORD *)(v4 + 112) = *(_QWORD *)v14;
      *(std::map<long unsigned int,std::shared_ptr<Avatar>>::iterator *)(v4 + 80) = std::map<unsigned long,std::shared_ptr<Avatar>>::erase[abi:cxx11](
                                                                                      &this->avatar_map_,
                                                                                      *(std::map<long unsigned int,std::shared_ptr<Avatar>>::iterator *)(v4 + 80));
      std::set<unsigned long>::erase(
        &this->trial_avatar_guid_set_,
        (const std::set<long unsigned int>::key_type *)(v4 + 112));
      v15 = std::__shared_ptr_access<proto::AvatarDelNotify,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<proto::AvatarDelNotify,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 144));
      v16 = std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 176));
      Guid = Avatar::getGuid(v16);
      proto::AvatarDelNotify::add_avatar_guid_list(v15, Guid);
      v18 = std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 176));
      __for_end_1._M_node = (std::_Rb_tree_const_iterator<long unsigned int>::_Base_ptr)Avatar::getGuid(v18);
      std::set<unsigned long>::insert(
        (std::set<long unsigned int> *const)(v4 + 240),
        (std::set<long unsigned int>::value_type *)&__for_end_1);
      std::shared_ptr<Scene>::~shared_ptr((std::shared_ptr<Scene> *const)(v4 + 208));
      goto LABEL_15;
    }
    common::milog::MiLogStream::create(
      &v48,
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/player/avatar/player_avatar_comp.cpp",
      "delAvatar",
      1709);
    v9 = common::milog::MiLogStream::operator<<<char [21],(char *[21])0>(&v48, (const char (*)[21])off_2603C7C0);
    v10 = std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::operator*((const std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 176));
    common::milog::MiLogStream::operator<<<Avatar,(Avatar*)0>(v9, v10);
    common::milog::MiLogStream::~MiLogStream(&v48);
    v3 = 105;
    v11 = 0;
LABEL_16:
    std::shared_ptr<Avatar>::~shared_ptr((std::shared_ptr<Avatar> *const)(v4 + 176));
    if ( v11 != 1 )
      goto LABEL_46;
  }
  if ( std::operator==<Avatar>(&this->cur_avatar_ptr_, 0LL) )
  {
    common::milog::MiLogStream::create(
      &v48,
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/player/avatar/player_avatar_comp.cpp",
      "delAvatar",
      1731);
    v19 = common::milog::MiLogStream::operator<<<char [26],(char *[26])0>(&v48, (const char (*)[26])off_2603C800);
    if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
      __asan_report_load8(&this->player_);
    val = Player::getUid(this->player_);
    v20 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v19, &val);
    v21 = common::milog::MiLogStream::operator<<<char [12],(char *[12])0>(v20, (const char (*)[12])" avatar_id:");
    common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v21, (const unsigned int *)(v4 + 32));
    common::milog::MiLogStream::~MiLogStream(&v48);
    v3 = -1;
  }
  else if ( std::set<unsigned long>::empty((const std::set<long unsigned int> *const)(v4 + 240)) )
  {
    common::milog::MiLogStream::create(
      &v48,
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/player/avatar/player_avatar_comp.cpp",
      "delAvatar",
      1736);
    v22 = common::milog::MiLogStream::operator<<<char [19],(char *[19])0>(&v48, (const char (*)[19])off_2603C880);
    common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v22, (const unsigned int *)(v4 + 32));
    common::milog::MiLogStream::~MiLogStream(&v48);
    v3 = 104;
  }
  else
  {
    __for_range = &this->avatar_team_map_;
    __for_begin._M_node = std::map<unsigned int,AvatarTeam>::begin(&this->avatar_team_map_)._M_node;
    __for_end._M_node = std::map<unsigned int,AvatarTeam>::end(__for_range)._M_node;
    while ( std::operator!=(&__for_begin, &__for_end) )
    {
      p = std::_Rb_tree_iterator<std::pair<unsigned int const,AvatarTeam>>::operator*(&__for_begin);
      avatar_team_vec = AvatarTeam::getAvatarVec(&p->second);
      __for_range_0 = (std::set<long unsigned int> *)(v4 + 240);
      __for_begin_0._M_node = std::set<unsigned long>::begin((const std::set<long unsigned int> *const)(v4 + 240))._M_node;
      __for_end_0._M_node = std::set<unsigned long>::end(__for_range_0)._M_node;
      while ( std::operator!=(&__for_begin_0, &__for_end_0) )
      {
        v23 = (unsigned __int64)std::_Rb_tree_const_iterator<unsigned long>::operator*(&__for_begin_0);
        if ( *(_BYTE *)((v23 >> 3) + 0x7FFF8000) )
          v23 = __asan_report_load8(v23);
        *(_QWORD *)(v4 + 48) = *(_QWORD *)v23;
        *(std::vector<long unsigned int>::iterator *)(v4 + 80) = std::vector<unsigned long>::end(avatar_team_vec);
        __gnu_cxx::__normal_iterator<unsigned long const*,std::vector<unsigned long>>::__normal_iterator<unsigned long *>(
          (__gnu_cxx::__normal_iterator<long unsigned int const*,std::vector<long unsigned int> > *const)&__for_end_1,
          (const __gnu_cxx::__normal_iterator<long unsigned int*,std::vector<long unsigned int> > *)(v4 + 80));
        M_current = std::vector<unsigned long>::end(avatar_team_vec)._M_current;
        v25._M_current = std::vector<unsigned long>::begin(avatar_team_vec)._M_current;
        __i._M_current = std::remove<__gnu_cxx::__normal_iterator<unsigned long *,std::vector<unsigned long>>,unsigned long>(
                           v25,
                           (__gnu_cxx::__normal_iterator<long unsigned int*,std::vector<long unsigned int> >)M_current,
                           (const unsigned __int64 *)(v4 + 48))._M_current;
        __gnu_cxx::__normal_iterator<unsigned long const*,std::vector<unsigned long>>::__normal_iterator<unsigned long *>(
          (__gnu_cxx::__normal_iterator<long unsigned int const*,std::vector<long unsigned int> > *const)(v4 + 112),
          &__i);
        std::vector<unsigned long>::erase(
          avatar_team_vec,
          *(std::vector<long unsigned int>::const_iterator *)(v4 + 112),
          (std::vector<long unsigned int>::const_iterator)__for_end_1._M_node);
        std::_Rb_tree_const_iterator<unsigned long>::operator++(&__for_begin_0);
      }
      std::_Rb_tree_iterator<std::pair<unsigned int const,AvatarTeam>>::operator++(&__for_begin);
    }
    v26 = std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false> *const)&this->cur_avatar_ptr_);
    v27 = Avatar::getGuid(v26);
    PlayerAvatarComp::syncCurAvatarTeamToSceneTeam(this, v27, CHANGE_SCENE_TEAM_REASON_SET_UP_AVATAR_TEAM);
    if ( is_notify )
    {
      if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
        __asan_report_load8(&this->player_);
      player = this->player_;
      std::dynamic_pointer_cast<google::protobuf::Message const,proto::AvatarDelNotify>((const std::shared_ptr<proto::AvatarDelNotify> *)(v4 + 208));
      Player::sendMessage(player, (common::minet::ConstMessagePtr *)(v4 + 208), 0LL);
      std::shared_ptr<google::protobuf::Message const>::~shared_ptr((std::shared_ptr<const google::protobuf::Message> *const)(v4 + 208));
    }
    __for_range_1 = (std::set<long unsigned int> *)(v4 + 240);
    *(std::set<long unsigned int>::iterator *)(v4 + 112) = std::set<unsigned long>::begin((const std::set<long unsigned int> *const)(v4 + 240));
    __for_end_1._M_node = std::set<unsigned long>::end(__for_range_1)._M_node;
    while ( std::operator!=((const std::_Rb_tree_const_iterator<long unsigned int>::_Self *)(v4 + 112), &__for_end_1) )
    {
      v29 = (unsigned __int64)std::_Rb_tree_const_iterator<unsigned long>::operator*((const std::_Rb_tree_const_iterator<long unsigned int> *const)(v4 + 112));
      if ( *(_BYTE *)((v29 >> 3) + 0x7FFF8000) )
        v29 = __asan_report_load8(v29);
      *(_QWORD *)(v4 + 80) = *(_QWORD *)v29;
      if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
        __asan_report_load8(&this->player_);
      SceneComp = Player::getSceneComp(this->player_);
      PlayerSceneComp::onDelAvatar(SceneComp, *(_QWORD *)(v4 + 80));
      if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
        __asan_report_load8(&this->player_);
      EventComp = Player::getEventComp(this->player_);
      val = 1;
      common::tools::perf::make_shared<DelAvatarEvent,unsigned int &,unsigned long &,proto::AvatarType>(
        (unsigned int *)(v4 + 176),
        (unsigned __int64 *)(v4 + 32),
        (proto::AvatarType *)(v4 + 80),
        &val,
        v32,
        v33);
      std::shared_ptr<BaseEvent>::shared_ptr<DelAvatarEvent,void>(
        (std::shared_ptr<BaseEvent> *const)(v4 + 208),
        (std::shared_ptr<DelAvatarEvent> *)(v4 + 176));
      PlayerEventComp::notifyEvent(EventComp, (BaseEventPtr *)(v4 + 208));
      std::shared_ptr<BaseEvent>::~shared_ptr((std::shared_ptr<BaseEvent> *const)(v4 + 208));
      std::shared_ptr<DelAvatarEvent>::~shared_ptr((std::shared_ptr<DelAvatarEvent> *const)(v4 + 176));
      std::_Rb_tree_const_iterator<unsigned long>::operator++((std::_Rb_tree_const_iterator<long unsigned int> *const)(v4 + 112));
    }
    v3 = 0;
  }
LABEL_46:
  std::shared_ptr<proto::AvatarDelNotify>::~shared_ptr((std::shared_ptr<proto::AvatarDelNotify> *const)(v4 + 144));
  std::set<unsigned long>::~set((std::set<long unsigned int> *const)(v4 + 240));
  result = v3;
  if ( v49 == (char *)v4 )
  {
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8008) = 0LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8010) = 0LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8018) = 0LL;
    *(_DWORD *)((v4 >> 3) + 0x7FFF8024) = 0;
  }
  else
  {
    *(_QWORD *)v4 = 1172321806LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8020) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 1761: range 0000000017173832-0000000017173B08
int32_t __cdecl PlayerAvatarComp::foreachAvatar(
        const PlayerAvatarComp *const this,
        std::function<ForeachPolicy(const Avatar&)> *p_func)
{
  int32_t v2; // r15d
  unsigned __int64 v3; // r13
  __int64 v4; // rax
  _DWORD *v5; // r12
  const std::weak_ptr<Avatar> *v6; // rax
  int v7; // r14d
  std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v8; // rdx
  int v9; // r14d
  int32_t result; // eax
  std::vector<std::weak_ptr<Avatar>>::iterator __for_begin; // [rsp+28h] [rbp-E8h] BYREF
  std::vector<std::weak_ptr<Avatar>>::iterator __for_end; // [rsp+30h] [rbp-E0h] BYREF
  std::vector<std::weak_ptr<Avatar>> *__for_range; // [rsp+38h] [rbp-D8h]
  char v14[208]; // [rsp+40h] [rbp-D0h] BYREF

  v3 = (unsigned __int64)v14;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_2(160LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "3 32 16 15 avatar_wtr:1763 64 16 15 avatar_ptr:1765 96 24 15 avatar_vec:1762";
  *(_QWORD *)(v3 + 16) = PlayerAvatarComp::foreachAvatar;
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = -219021312;
  v5[536862722] = -219021312;
  v5[536862723] = -218103808;
  v5[536862724] = -202116109;
  PlayerAvatarComp::getAllAvatarVec((std::vector<std::weak_ptr<Avatar>> *)(v3 + 96), this);
  __for_range = (std::vector<std::weak_ptr<Avatar>> *)(v3 + 96);
  __for_begin._M_current = std::vector<std::weak_ptr<Avatar>>::begin((std::vector<std::weak_ptr<Avatar>> *const)(v3 + 96))._M_current;
  __for_end._M_current = std::vector<std::weak_ptr<Avatar>>::end((std::vector<std::weak_ptr<Avatar>> *const)(v3 + 96))._M_current;
  while ( __gnu_cxx::operator!=<std::weak_ptr<Avatar> *,std::vector<std::weak_ptr<Avatar>>>(&__for_begin, &__for_end) )
  {
    v6 = __gnu_cxx::__normal_iterator<std::weak_ptr<Avatar> *,std::vector<std::weak_ptr<Avatar>>>::operator*(&__for_begin);
    std::weak_ptr<Avatar>::weak_ptr((std::weak_ptr<Avatar> *const)(v3 + 32), v6);
    std::weak_ptr<Avatar>::lock((const std::weak_ptr<Avatar> *const)(v3 + 64));
    if ( std::operator==<Avatar>((const std::shared_ptr<Avatar> *)(v3 + 64), 0LL) )
    {
      v7 = 0;
    }
    else
    {
      v8 = std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::operator*((const std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 64));
      if ( std::function<ForeachPolicy ()(Avatar const&)>::operator()(p_func, v8) )
      {
        v2 = -1;
        v7 = 1;
      }
      else
      {
        v7 = 2;
      }
    }
    std::shared_ptr<Avatar>::~shared_ptr((std::shared_ptr<Avatar> *const)(v3 + 64));
    if ( v7 )
    {
      if ( v7 == 2 )
        v9 = 2;
      else
        v9 = 1;
    }
    else
    {
      v9 = 0;
    }
    std::weak_ptr<Avatar>::~weak_ptr((std::weak_ptr<Avatar> *const)(v3 + 32));
    if ( v9 && v9 != 2 )
      goto LABEL_20;
    __gnu_cxx::__normal_iterator<std::weak_ptr<Avatar> *,std::vector<std::weak_ptr<Avatar>>>::operator++(&__for_begin);
  }
  v2 = 0;
LABEL_20:
  std::vector<std::weak_ptr<Avatar>>::~vector((std::vector<std::weak_ptr<Avatar>> *const)(v3 + 96));
  result = v2;
  if ( v14 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8010) = 0;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8010) = -168430091;
  }
  return result;
};

// Line 1780: range 0000000017173B0A-0000000017173D35
int32_t __cdecl PlayerAvatarComp::foreachFormalAvatar(
        const PlayerAvatarComp *const this,
        std::function<ForeachPolicy(const FormalAvatar&)> *p_func)
{
  int32_t v2; // r15d
  unsigned __int64 v3; // rbx
  __int64 v4; // rax
  unsigned __int64 v5; // r13
  int v6; // r14d
  std::__shared_ptr_access<FormalAvatar,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v7; // rdx
  int32_t result; // eax
  std::map<long unsigned int,std::shared_ptr<Avatar>>::const_iterator __for_begin; // [rsp+20h] [rbp-A0h] BYREF
  std::map<long unsigned int,std::shared_ptr<Avatar>>::const_iterator __for_end; // [rsp+28h] [rbp-98h] BYREF
  const std::map<long unsigned int,std::shared_ptr<Avatar>> *__for_range; // [rsp+30h] [rbp-90h]
  const std::pair<long unsigned int const,std::shared_ptr<Avatar> > *v12; // [rsp+38h] [rbp-88h]
  std::tuple_element<0,const std::pair<long unsigned int const,std::shared_ptr<Avatar> > >::type *avatar_guid; // [rsp+40h] [rbp-80h]
  std::tuple_element<1,const std::pair<long unsigned int const,std::shared_ptr<Avatar> > >::type *avatar_ptr; // [rsp+48h] [rbp-78h]
  char v15[112]; // [rsp+50h] [rbp-70h] BYREF

  v3 = (unsigned __int64)v15;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_0(64LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "1 32 16 22 formal_avatar_ptr:1783";
  *(_QWORD *)(v3 + 16) = PlayerAvatarComp::foreachFormalAvatar;
  v5 = v3 >> 3;
  *(_DWORD *)(v5 + 2147450880) = -235802127;
  *(_DWORD *)(v5 + 2147450884) = -202178560;
  __for_range = &this->avatar_map_;
  __for_begin._M_node = std::map<unsigned long,std::shared_ptr<Avatar>>::begin(&this->avatar_map_)._M_node;
  __for_end._M_node = std::map<unsigned long,std::shared_ptr<Avatar>>::end(&this->avatar_map_)._M_node;
  while ( std::operator!=(&__for_begin, &__for_end) )
  {
    v12 = std::_Rb_tree_const_iterator<std::pair<unsigned long const,std::shared_ptr<Avatar>>>::operator*(&__for_begin);
    avatar_guid = std::get<0ul,unsigned long const,std::shared_ptr<Avatar>>(v12);
    avatar_ptr = (std::tuple_element<1,const std::pair<long unsigned int const,std::shared_ptr<Avatar> > >::type *)std::get<1ul,unsigned long const,std::shared_ptr<Avatar>>(v12);
    std::dynamic_pointer_cast<FormalAvatar,Avatar>((const std::shared_ptr<Avatar> *)(v3 + 32));
    if ( std::operator==<FormalAvatar>((const std::shared_ptr<FormalAvatar> *)(v3 + 32), 0LL) )
    {
      v6 = 0;
    }
    else
    {
      v7 = std::__shared_ptr_access<FormalAvatar,(__gnu_cxx::_Lock_policy)2,false,false>::operator*((const std::__shared_ptr_access<FormalAvatar,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 32));
      if ( std::function<ForeachPolicy ()(FormalAvatar const&)>::operator()(p_func, v7) )
      {
        v2 = -1;
        v6 = 1;
      }
      else
      {
        v6 = 2;
      }
    }
    std::shared_ptr<FormalAvatar>::~shared_ptr((std::shared_ptr<FormalAvatar> *const)(v3 + 32));
    if ( v6 && v6 != 2 )
      goto LABEL_15;
    std::_Rb_tree_const_iterator<std::pair<unsigned long const,std::shared_ptr<Avatar>>>::operator++(&__for_begin);
  }
  v2 = 0;
LABEL_15:
  result = v2;
  if ( v15 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 1798: range 0000000017173D36-00000000171742FA
int32_t __cdecl PlayerAvatarComp::foreachFormalAvatarByLevelSort(
        const PlayerAvatarComp *const this,
        std::function<ForeachPolicy(const FormalAvatar&)> *p_func)
{
  unsigned __int64 v2; // r12
  __int64 v3; // rax
  _DWORD *v4; // r13
  std::map<long unsigned int,std::shared_ptr<Avatar>>::size_type v5; // rax
  std::__shared_ptr_access<FormalAvatar,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v6; // rax
  std::__shared_ptr_access<FormalAvatar,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v7; // rax
  unsigned __int64 v8; // rax
  unsigned __int64 v9; // rdx
  std::__shared_ptr_access<FormalAvatar,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v10; // rax
  std::vector<unsigned int> *v11; // r8
  std::pair<std::shared_ptr<FormalAvatar>,std::vector<unsigned int> > *M_current; // r14
  std::vector<std::pair<std::shared_ptr<FormalAvatar>,std::vector<unsigned int> >>::iterator v13; // rax
  PlayerAvatarComp::foreachFormalAvatarByLevelSort::<lambda(const auto:24&, const auto:25&)> v14; // dl
  std::__shared_ptr_access<FormalAvatar,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v15; // rdx
  int32_t v16; // r14d
  int32_t result; // eax
  std::allocator<unsigned int> __a; // [rsp+2Bh] [rbp-155h] BYREF
  uint32_t avatar_id; // [rsp+2Ch] [rbp-154h]
  std::map<long unsigned int,std::shared_ptr<Avatar>>::const_iterator __for_begin; // [rsp+30h] [rbp-150h] BYREF
  std::map<long unsigned int,std::shared_ptr<Avatar>>::const_iterator __for_end; // [rsp+38h] [rbp-148h] BYREF
  const AvatarExcelConfigMgr *config_mgr; // [rsp+40h] [rbp-140h]
  const std::map<long unsigned int,std::shared_ptr<Avatar>> *__for_range; // [rsp+48h] [rbp-138h]
  std::vector<std::pair<std::shared_ptr<FormalAvatar>,std::vector<unsigned int> >> *__for_range_0; // [rsp+50h] [rbp-130h]
  const std::pair<std::shared_ptr<FormalAvatar>,std::vector<unsigned int> > *v25; // [rsp+58h] [rbp-128h]
  std::tuple_element<0,const std::pair<std::shared_ptr<FormalAvatar>,std::vector<unsigned int> > >::type *formal_avatar_ptr; // [rsp+60h] [rbp-120h]
  std::tuple_element<1,const std::pair<std::shared_ptr<FormalAvatar>,std::vector<unsigned int> > >::type *_; // [rsp+68h] [rbp-118h]
  const std::pair<long unsigned int const,std::shared_ptr<Avatar> > *v28; // [rsp+70h] [rbp-110h]
  std::tuple_element<0,const std::pair<long unsigned int const,std::shared_ptr<Avatar> > >::type *avatar_guid; // [rsp+78h] [rbp-108h]
  std::tuple_element<1,const std::pair<long unsigned int const,std::shared_ptr<Avatar> > >::type *avatar_ptr; // [rsp+80h] [rbp-100h]
  const data::AvatarExcelConfig *avatar_config_ptr; // [rsp+88h] [rbp-F8h]
  std::initializer_list<unsigned int> __l; // [rsp+90h] [rbp-F0h] BYREF
  uint32_t v33; // [rsp+A0h] [rbp-E0h]
  std::vector<unsigned int> v34; // [rsp+B0h] [rbp-D0h] BYREF
  char v35[176]; // [rsp+D0h] [rbp-B0h] BYREF

  v2 = (unsigned __int64)v35;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_1(128LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "2 32 16 22 formal_avatar_ptr:1804 64 24 29 formal_avatar_weight_vec:1800";
  *(_QWORD *)(v2 + 16) = PlayerAvatarComp::foreachFormalAvatarByLevelSort;
  v4 = (_DWORD *)(v2 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = -219021312;
  v4[536862722] = -218103808;
  v4[536862723] = -202116109;
  ServiceBox::findService<GameserverService>();
  GameserverService::getConfig((GameserverService *const)(v2 + 32));
  config_mgr = &std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 32))->design_config.txt_config_mgr.avatar_config_mgr;
  std::shared_ptr<Config>::~shared_ptr((std::shared_ptr<Config> *const)(v2 + 32));
  std::vector<std::pair<std::shared_ptr<FormalAvatar>,std::vector<unsigned int>>>::vector((std::vector<std::pair<std::shared_ptr<FormalAvatar>,std::vector<unsigned int> >> *const)(v2 + 64));
  v5 = std::map<unsigned long,std::shared_ptr<Avatar>>::size(&this->avatar_map_);
  std::vector<std::pair<std::shared_ptr<FormalAvatar>,std::vector<unsigned int>>>::reserve(
    (std::vector<std::pair<std::shared_ptr<FormalAvatar>,std::vector<unsigned int> >> *const)(v2 + 64),
    v5);
  __for_range = &this->avatar_map_;
  __for_begin._M_node = std::map<unsigned long,std::shared_ptr<Avatar>>::begin(&this->avatar_map_)._M_node;
  __for_end._M_node = std::map<unsigned long,std::shared_ptr<Avatar>>::end(&this->avatar_map_)._M_node;
  while ( std::operator!=(&__for_begin, &__for_end) )
  {
    v28 = std::_Rb_tree_const_iterator<std::pair<unsigned long const,std::shared_ptr<Avatar>>>::operator*(&__for_begin);
    avatar_guid = std::get<0ul,unsigned long const,std::shared_ptr<Avatar>>(v28);
    avatar_ptr = (std::tuple_element<1,const std::pair<long unsigned int const,std::shared_ptr<Avatar> > >::type *)std::get<1ul,unsigned long const,std::shared_ptr<Avatar>>(v28);
    std::dynamic_pointer_cast<FormalAvatar,Avatar>((const std::shared_ptr<Avatar> *)(v2 + 32));
    if ( !std::operator==<FormalAvatar>((const std::shared_ptr<FormalAvatar> *)(v2 + 32), 0LL) )
    {
      v6 = std::__shared_ptr_access<FormalAvatar,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<FormalAvatar,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 32));
      avatar_id = Avatar::getAvatarId(v6);
      avatar_config_ptr = data::AvatarExcelConfigMgrBase::findAvatarExcelConfig(config_mgr, avatar_id);
      if ( avatar_config_ptr )
      {
        v7 = std::__shared_ptr_access<FormalAvatar,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<FormalAvatar,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 32));
        LODWORD(__l._M_array) = Creature::getLevel(v7);
        if ( *(_BYTE *)(((unsigned __int64)&avatar_config_ptr->quality_type >> 3) + 0x7FFF8000) != 0
          && *(_BYTE *)(((unsigned __int64)&avatar_config_ptr->quality_type >> 3) + 0x7FFF8000) <= 3 )
        {
          __asan_report_load4(&avatar_config_ptr->quality_type);
        }
        HIDWORD(__l._M_array) = avatar_config_ptr->quality_type;
        v8 = (unsigned __int64)std::__shared_ptr_access<FormalAvatar,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<FormalAvatar,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 32));
        if ( *(_BYTE *)((v8 >> 3) + 0x7FFF8000) )
          v8 = __asan_report_load8(v8);
        v9 = *(_QWORD *)v8 + 280LL;
        if ( *(_BYTE *)((v9 >> 3) + 0x7FFF8000) )
          v8 = __asan_report_load8(*(_QWORD *)v8 + 280LL);
        LODWORD(__l._M_len) = (*(__int64 (__fastcall **)(unsigned __int64))v9)(v8);
        v10 = std::__shared_ptr_access<FormalAvatar,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<FormalAvatar,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 32));
        HIDWORD(__l._M_len) = Avatar::getPromoteLevel(v10);
        v33 = avatar_id;
        std::allocator<unsigned int>::allocator(&__a);
        std::vector<unsigned int>::vector(&v34, (std::initializer_list<unsigned int>)__PAIR128__(5LL, &__l), &__a);
        std::vector<std::pair<std::shared_ptr<FormalAvatar>,std::vector<unsigned int>>>::emplace_back<std::shared_ptr<FormalAvatar>&,std::vector<unsigned int>>(
          (std::vector<std::pair<std::shared_ptr<FormalAvatar>,std::vector<unsigned int> >> *const)(v2 + 64),
          (std::shared_ptr<FormalAvatar> *)(v2 + 32),
          &v34,
          (std::shared_ptr<FormalAvatar> *)(v2 + 32),
          v11);
        std::vector<unsigned int>::~vector(&v34);
        std::allocator<unsigned int>::~allocator(&__a);
      }
    }
    std::shared_ptr<FormalAvatar>::~shared_ptr((std::shared_ptr<FormalAvatar> *const)(v2 + 32));
    std::_Rb_tree_const_iterator<std::pair<unsigned long const,std::shared_ptr<Avatar>>>::operator++(&__for_begin);
  }
  M_current = std::vector<std::pair<std::shared_ptr<FormalAvatar>,std::vector<unsigned int>>>::end((std::vector<std::pair<std::shared_ptr<FormalAvatar>,std::vector<unsigned int> >> *const)(v2 + 64))._M_current;
  v13._M_current = std::vector<std::pair<std::shared_ptr<FormalAvatar>,std::vector<unsigned int>>>::begin((std::vector<std::pair<std::shared_ptr<FormalAvatar>,std::vector<unsigned int> >> *const)(v2 + 64))._M_current;
  std::sort___gnu_cxx::__normal_iterator_std::pair_std::shared_ptr_FormalAvatar__std::vector_unsigned_int_____std::vector_std::pair_std::shared_ptr_FormalAvatar__std::vector_unsigned_int________PlayerAvatarComp::foreachFormalAvatarByLevelSort_std::function_ForeachPolicy_const_FormalAvatar_____const::_lambda_const_auto_24__const_auto_25_____(
    v13,
    (__gnu_cxx::__normal_iterator<std::pair<std::shared_ptr<FormalAvatar>,std::vector<unsigned int> >*,std::vector<std::pair<std::shared_ptr<FormalAvatar>,std::vector<unsigned int> >> >)M_current,
    v14);
  __for_range_0 = (std::vector<std::pair<std::shared_ptr<FormalAvatar>,std::vector<unsigned int> >> *)(v2 + 64);
  __for_begin._M_node = (std::_Rb_tree_const_iterator<std::pair<long unsigned int const,std::shared_ptr<Avatar> > >::_Base_ptr)std::vector<std::pair<std::shared_ptr<FormalAvatar>,std::vector<unsigned int>>>::begin((std::vector<std::pair<std::shared_ptr<FormalAvatar>,std::vector<unsigned int> >> *const)(v2 + 64))._M_current;
  __for_end._M_node = (std::_Rb_tree_const_iterator<std::pair<long unsigned int const,std::shared_ptr<Avatar> > >::_Base_ptr)std::vector<std::pair<std::shared_ptr<FormalAvatar>,std::vector<unsigned int>>>::end(__for_range_0)._M_current;
  while ( __gnu_cxx::operator!=<std::pair<std::shared_ptr<FormalAvatar>,std::vector<unsigned int>> *,std::vector<std::pair<std::shared_ptr<FormalAvatar>,std::vector<unsigned int>>>>(
            (const __gnu_cxx::__normal_iterator<std::pair<std::shared_ptr<FormalAvatar>,std::vector<unsigned int> >*,std::vector<std::pair<std::shared_ptr<FormalAvatar>,std::vector<unsigned int> >> > *)&__for_begin,
            (const __gnu_cxx::__normal_iterator<std::pair<std::shared_ptr<FormalAvatar>,std::vector<unsigned int> >*,std::vector<std::pair<std::shared_ptr<FormalAvatar>,std::vector<unsigned int> >> > *)&__for_end) )
  {
    v25 = __gnu_cxx::__normal_iterator<std::pair<std::shared_ptr<FormalAvatar>,std::vector<unsigned int>> *,std::vector<std::pair<std::shared_ptr<FormalAvatar>,std::vector<unsigned int>>>>::operator*((const __gnu_cxx::__normal_iterator<std::pair<std::shared_ptr<FormalAvatar>,std::vector<unsigned int> >*,std::vector<std::pair<std::shared_ptr<FormalAvatar>,std::vector<unsigned int> >> > *const)&__for_begin);
    formal_avatar_ptr = (std::tuple_element<0,const std::pair<std::shared_ptr<FormalAvatar>,std::vector<unsigned int> > >::type *)std::get<0ul,std::shared_ptr<FormalAvatar>,std::vector<unsigned int>>(v25);
    _ = (std::tuple_element<1,const std::pair<std::shared_ptr<FormalAvatar>,std::vector<unsigned int> > >::type *)std::get<1ul,std::shared_ptr<FormalAvatar>,std::vector<unsigned int>>(v25);
    v15 = std::__shared_ptr_access<FormalAvatar,(__gnu_cxx::_Lock_policy)2,false,false>::operator*((const std::__shared_ptr_access<FormalAvatar,(__gnu_cxx::_Lock_policy)2,false,false> *const)formal_avatar_ptr);
    if ( std::function<ForeachPolicy ()(FormalAvatar const&)>::operator()(p_func, v15) )
    {
      v16 = -1;
      goto LABEL_22;
    }
    __gnu_cxx::__normal_iterator<std::pair<std::shared_ptr<FormalAvatar>,std::vector<unsigned int>> *,std::vector<std::pair<std::shared_ptr<FormalAvatar>,std::vector<unsigned int>>>>::operator++((__gnu_cxx::__normal_iterator<std::pair<std::shared_ptr<FormalAvatar>,std::vector<unsigned int> >*,std::vector<std::pair<std::shared_ptr<FormalAvatar>,std::vector<unsigned int> >> > *const)&__for_begin);
  }
  v16 = 0;
LABEL_22:
  std::vector<std::pair<std::shared_ptr<FormalAvatar>,std::vector<unsigned int>>>::~vector((std::vector<std::pair<std::shared_ptr<FormalAvatar>,std::vector<unsigned int> >> *const)(v2 + 64));
  result = v16;
  if ( v35 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 1825: range 00000000171F85B6-00000000171F8788
bool __cdecl PlayerAvatarComp::foreachFormalAvatarByLevelSort::_lambda_const_auto_24___const_auto_25___::operator()_std::pair_std::shared_ptr_FormalAvatar__std::vector_unsigned_int____std::pair_std::shared_ptr_FormalAvatar__std::vector_unsigned_int_____(
        const PlayerAvatarComp::foreachFormalAvatarByLevelSort::<lambda(const auto:24&, const auto:25&)> *const __closure,
        const std::pair<std::shared_ptr<FormalAvatar>,std::vector<unsigned int> > *lhs,
        const std::pair<std::shared_ptr<FormalAvatar>,std::vector<unsigned int> > *rhs)
{
  __gnu_cxx::__alloc_traits<std::allocator<unsigned int>,unsigned int>::value_type *v4; // rax
  int *v5; // rdx
  int v6; // ebx
  std::vector<unsigned int>::const_reference v7; // rax
  _DWORD *v8; // rdx
  __gnu_cxx::__alloc_traits<std::allocator<unsigned int>,unsigned int>::value_type *v9; // rax
  unsigned int *v10; // rdx
  unsigned int v11; // ebx
  __gnu_cxx::__alloc_traits<std::allocator<unsigned int>,unsigned int>::value_type *v12; // rax
  unsigned int *v13; // rdx
  size_t i; // [rsp+28h] [rbp-28h]
  std::vector<unsigned int> *lhs_weight; // [rsp+30h] [rbp-20h]
  std::vector<unsigned int> *rhs_weight; // [rsp+38h] [rbp-18h]

  lhs_weight = &lhs->second;
  rhs_weight = &rhs->second;
  for ( i = 0LL; ; ++i )
  {
    if ( i >= std::vector<unsigned int>::size(lhs_weight) || i >= std::vector<unsigned int>::size(rhs_weight) )
      return 0;
    v4 = (__gnu_cxx::__alloc_traits<std::allocator<unsigned int>,unsigned int>::value_type *)std::vector<unsigned int>::operator[](
                                                                                               lhs_weight,
                                                                                               i);
    v5 = (int *)v4;
    if ( *(_BYTE *)(((unsigned __int64)v4 >> 3) + 0x7FFF8000) != 0
      && (char)(((unsigned __int8)v4 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)v4 >> 3) + 0x7FFF8000) )
    {
      __asan_report_load4(v4);
    }
    v6 = *v5;
    v7 = std::vector<unsigned int>::operator[](rhs_weight, i);
    v8 = v7;
    if ( *(_BYTE *)(((unsigned __int64)v7 >> 3) + 0x7FFF8000) != 0
      && (char)(((unsigned __int8)v7 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)v7 >> 3) + 0x7FFF8000) )
    {
      __asan_report_load4(v7);
    }
    if ( v6 != *v8 )
      break;
  }
  v9 = (__gnu_cxx::__alloc_traits<std::allocator<unsigned int>,unsigned int>::value_type *)std::vector<unsigned int>::operator[](
                                                                                             lhs_weight,
                                                                                             i);
  v10 = v9;
  if ( *(_BYTE *)(((unsigned __int64)v9 >> 3) + 0x7FFF8000) != 0
    && (char)(((unsigned __int8)v9 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)v9 >> 3) + 0x7FFF8000) )
  {
    __asan_report_load4(v9);
  }
  v11 = *v10;
  v12 = (__gnu_cxx::__alloc_traits<std::allocator<unsigned int>,unsigned int>::value_type *)std::vector<unsigned int>::operator[](
                                                                                              rhs_weight,
                                                                                              i);
  v13 = v12;
  if ( *(_BYTE *)(((unsigned __int64)v12 >> 3) + 0x7FFF8000) != 0
    && (char)(((unsigned __int8)v12 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)v12 >> 3) + 0x7FFF8000) )
  {
    __asan_report_load4(v12);
  }
  return v11 > *v13;
};

// Line 1849: range 00000000171742FC-000000001717442D
std::vector<std::weak_ptr<Avatar>> *__cdecl PlayerAvatarComp::getAllAvatarVec(
        std::vector<std::weak_ptr<Avatar>> *retstr,
        const PlayerAvatarComp *const this)
{
  std::vector<std::weak_ptr<Avatar>>::size_type v2; // rdx
  std::map<long unsigned int,std::shared_ptr<Avatar>>::const_iterator __for_begin; // [rsp+10h] [rbp-50h] BYREF
  std::map<long unsigned int,std::shared_ptr<Avatar>>::const_iterator __for_end; // [rsp+18h] [rbp-48h] BYREF
  const std::map<long unsigned int,std::shared_ptr<Avatar>> *__for_range; // [rsp+20h] [rbp-40h]
  const std::pair<long unsigned int const,std::shared_ptr<Avatar> > *v7; // [rsp+28h] [rbp-38h]
  std::tuple_element<0,const std::pair<long unsigned int const,std::shared_ptr<Avatar> > >::type *avatar_id; // [rsp+30h] [rbp-30h]
  std::tuple_element<1,const std::pair<long unsigned int const,std::shared_ptr<Avatar> > >::type *avatar_ptr; // [rsp+38h] [rbp-28h]
  std::weak_ptr<Avatar> __x; // [rsp+40h] [rbp-20h] BYREF

  std::vector<std::weak_ptr<Avatar>>::vector(retstr);
  v2 = std::map<unsigned long,std::shared_ptr<Avatar>>::size(&this->avatar_map_);
  std::vector<std::weak_ptr<Avatar>>::reserve(retstr, v2);
  __for_range = &this->avatar_map_;
  __for_begin._M_node = std::map<unsigned long,std::shared_ptr<Avatar>>::begin(&this->avatar_map_)._M_node;
  __for_end._M_node = std::map<unsigned long,std::shared_ptr<Avatar>>::end(&this->avatar_map_)._M_node;
  while ( std::operator!=(&__for_begin, &__for_end) )
  {
    v7 = std::_Rb_tree_const_iterator<std::pair<unsigned long const,std::shared_ptr<Avatar>>>::operator*(&__for_begin);
    avatar_id = std::get<0ul,unsigned long const,std::shared_ptr<Avatar>>(v7);
    avatar_ptr = (std::tuple_element<1,const std::pair<long unsigned int const,std::shared_ptr<Avatar> > >::type *)std::get<1ul,unsigned long const,std::shared_ptr<Avatar>>(v7);
    std::weak_ptr<Avatar>::weak_ptr<Avatar,void>(&__x, avatar_ptr);
    std::vector<std::weak_ptr<Avatar>>::push_back(retstr, &__x);
    std::weak_ptr<Avatar>::~weak_ptr(&__x);
    std::_Rb_tree_const_iterator<std::pair<unsigned long const,std::shared_ptr<Avatar>>>::operator++(&__for_begin);
  }
  return retstr;
};

// Line 1861: range 000000001717442E-0000000017174902
__int64 __fastcall PlayerAvatarComp::foreachAvatarInSaveTeam(
        PlayerAvatarComp *const this,
        uint32_t team_id,
        std::function<ForeachPolicy(Avatar&)> *p_func)
{
  unsigned int v3; // r15d
  unsigned __int64 v4; // r13
  __int64 v5; // rax
  _DWORD *v6; // r12
  common::milog::MiLogStream *v7; // rax
  std::_Rb_tree_iterator<std::pair<unsigned int const,AvatarTeam> >::pointer v8; // rax
  std::vector<long unsigned int> *AvatarVec; // rax
  unsigned __int64 v10; // rax
  common::milog::MiLogStream *v11; // rax
  common::milog::MiLogStream *v12; // rcx
  int v13; // r14d
  Avatar *v14; // rax
  __int64 result; // rax
  std::vector<long unsigned int>::iterator __for_begin; // [rsp+28h] [rbp-148h] BYREF
  std::vector<long unsigned int>::iterator __for_end; // [rsp+30h] [rbp-140h] BYREF
  std::vector<long unsigned int> *__for_range; // [rsp+38h] [rbp-138h]
  common::milog::MiLogStream v20; // [rsp+40h] [rbp-130h] BYREF
  char v21[272]; // [rsp+60h] [rbp-110h] BYREF

  v4 = (unsigned __int64)v21;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v5 = __asan_stack_malloc_2(224LL);
    if ( v5 )
      v4 = v5;
  }
  *(_QWORD *)v4 = 1102416563LL;
  *(_QWORD *)(v4 + 8) = "5 48 4 12 team_id:1860 64 8 7 it:1862 96 8 9 guid:1870 128 16 15 avatar_ptr:1872 160 24 13 guid_vec:1869";
  *(_QWORD *)(v4 + 16) = PlayerAvatarComp::foreachAvatarInSaveTeam;
  v6 = (_DWORD *)(v4 >> 3);
  v6[536862720] = -235802127;
  v6[536862721] = -234556943;
  v6[536862722] = -218959360;
  v6[536862723] = -218959360;
  v6[536862724] = -219021312;
  v6[536862725] = -218103808;
  v6[536862726] = -202116109;
  *(_DWORD *)(v4 + 48) = team_id;
  *(std::map<unsigned int,AvatarTeam>::iterator *)(v4 + 64) = std::map<unsigned int,AvatarTeam>::find(
                                                                &this->avatar_team_map_,
                                                                (const std::map<unsigned int,AvatarTeam>::key_type *)(v4 + 48));
  __for_end._M_current = (unsigned __int64 *)std::map<unsigned int,AvatarTeam>::end(&this->avatar_team_map_)._M_node;
  if ( std::operator==(
         (const std::_Rb_tree_iterator<std::pair<unsigned int const,AvatarTeam> >::_Self *)(v4 + 64),
         (const std::_Rb_tree_iterator<std::pair<unsigned int const,AvatarTeam> >::_Self *)&__for_end) )
  {
    common::milog::MiLogStream::create(
      &v20,
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/player/avatar/player_avatar_comp.cpp",
      "foreachAvatarInSaveTeam",
      1865);
    v7 = common::milog::MiLogStream::operator<<<char [20],(char *[20])0>(&v20, (const char (*)[20])off_2603CA40);
    common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v7, (const unsigned int *)(v4 + 48));
    common::milog::MiLogStream::~MiLogStream(&v20);
    v3 = 120;
  }
  else
  {
    v8 = std::_Rb_tree_iterator<std::pair<unsigned int const,AvatarTeam>>::operator->((const std::_Rb_tree_iterator<std::pair<unsigned int const,AvatarTeam> > *const)(v4 + 64));
    AvatarVec = AvatarTeam::getAvatarVec(&v8->second);
    std::vector<unsigned long>::vector((std::vector<long unsigned int> *const)(v4 + 160), AvatarVec);
    __for_range = (std::vector<long unsigned int> *)(v4 + 160);
    __for_begin._M_current = std::vector<unsigned long>::begin((std::vector<long unsigned int> *const)(v4 + 160))._M_current;
    __for_end._M_current = std::vector<unsigned long>::end(__for_range)._M_current;
    while ( __gnu_cxx::operator!=<unsigned long *,std::vector<unsigned long>>(&__for_begin, &__for_end) )
    {
      v10 = (unsigned __int64)__gnu_cxx::__normal_iterator<unsigned long *,std::vector<unsigned long>>::operator*(&__for_begin);
      if ( *(_BYTE *)((v10 >> 3) + 0x7FFF8000) )
        v10 = __asan_report_load8(v10);
      *(_QWORD *)(v4 + 96) = *(_QWORD *)v10;
      PlayerAvatarComp::findAvatar((const PlayerAvatarComp *const)(v4 + 128), (uint64_t)this, *(_QWORD *)(v4 + 96));
      if ( std::operator==<Avatar>((const std::shared_ptr<Avatar> *)(v4 + 128), 0LL) )
      {
        common::milog::MiLogStream::create(
          &v20,
          &common::milog::MiLogDefault::default_log_obj_,
          3u,
          "./src/player/avatar/player_avatar_comp.cpp",
          "foreachAvatarInSaveTeam",
          1875);
        v11 = common::milog::MiLogStream::operator<<<char [24],(char *[24])0>(
                &v20,
                (const char (*)[24])"findAvatar fails, guid:");
        v12 = common::milog::MiLogStream::operator<<<unsigned long,(unsigned long *)0>(
                v11,
                (const unsigned __int64 *)(v4 + 96));
        if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
          __asan_report_load8(&this->player_);
        operator<<(v12, this->player_);
        common::milog::MiLogStream::~MiLogStream(&v20);
        v13 = 0;
      }
      else
      {
        v14 = std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::operator*((const std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 128));
        if ( std::function<ForeachPolicy ()(Avatar &)>::operator()(p_func, v14) )
        {
          v3 = 1;
          v13 = 1;
        }
        else
        {
          v13 = 2;
        }
      }
      std::shared_ptr<Avatar>::~shared_ptr((std::shared_ptr<Avatar> *const)(v4 + 128));
      if ( v13 && v13 != 2 )
        goto LABEL_21;
      __gnu_cxx::__normal_iterator<unsigned long *,std::vector<unsigned long>>::operator++(&__for_begin);
    }
    v3 = 0;
LABEL_21:
    std::vector<unsigned long>::~vector((std::vector<long unsigned int> *const)(v4 + 160));
  }
  result = v3;
  if ( v21 == (char *)v4 )
  {
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8008) = 0LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8010) = 0LL;
    *(_DWORD *)((v4 >> 3) + 0x7FFF8018) = 0;
  }
  else
  {
    *(_QWORD *)v4 = 1172321806LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v4 >> 3) + 0x7FFF8018) = -168430091;
  }
  return result;
};

// Line 1886: range 0000000017174904-0000000017174A88
int32_t __cdecl PlayerAvatarComp::foreachAvatarInSceneTeam(
        PlayerAvatarComp *const this,
        std::function<ForeachPolicy(Avatar&)> *p_func)
{
  unsigned __int64 v2; // rbx
  __int64 v3; // rax
  unsigned __int64 v4; // r12
  int32_t v5; // r14d
  SceneTeam *v6; // r14
  int32_t result; // eax
  std::function<ForeachPolicy(Avatar&)> v8; // [rsp+10h] [rbp-90h] BYREF
  char v9[112]; // [rsp+30h] [rbp-70h] BYREF

  v2 = (unsigned __int64)v9;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_0(64LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "1 32 16 19 scene_team_ptr:1887";
  *(_QWORD *)(v2 + 16) = PlayerAvatarComp::foreachAvatarInSceneTeam;
  v4 = v2 >> 3;
  *(_DWORD *)(v4 + 2147450880) = -235802127;
  *(_DWORD *)(v4 + 2147450884) = -202178560;
  PlayerAvatarComp::findSceneTeam((PlayerAvatarComp *const)(v2 + 32));
  if ( std::operator==<SceneTeam>((const std::shared_ptr<SceneTeam> *)(v2 + 32), 0LL) )
  {
    v5 = -1;
  }
  else
  {
    v6 = std::__shared_ptr_access<SceneTeam,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<SceneTeam,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 32));
    std::function<ForeachPolicy ()(Avatar &)>::function(&v8, p_func);
    SceneTeam::foreachAvatar(v6, &v8);
    std::function<ForeachPolicy ()(Avatar &)>::~function(&v8);
    v5 = 0;
  }
  std::shared_ptr<SceneTeam>::~shared_ptr((std::shared_ptr<SceneTeam> *const)(v2 + 32));
  result = v5;
  if ( v9 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 1898: range 0000000017174A8A-0000000017174C50
int32_t __cdecl PlayerAvatarComp::foreachMyAvatarInSceneTeam(
        PlayerAvatarComp *const this,
        std::function<ForeachPolicy(Avatar&)> *p_func)
{
  unsigned __int64 v2; // rbx
  __int64 v3; // rax
  unsigned __int64 v4; // r12
  int32_t v5; // r14d
  SceneTeam *v6; // r14
  uint32_t Uid; // eax
  int32_t result; // eax
  std::function<ForeachPolicy(Avatar&)> v9; // [rsp+10h] [rbp-90h] BYREF
  char v10[112]; // [rsp+30h] [rbp-70h] BYREF

  v2 = (unsigned __int64)v10;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_0(64LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "1 32 16 19 scene_team_ptr:1899";
  *(_QWORD *)(v2 + 16) = PlayerAvatarComp::foreachMyAvatarInSceneTeam;
  v4 = v2 >> 3;
  *(_DWORD *)(v4 + 2147450880) = -235802127;
  *(_DWORD *)(v4 + 2147450884) = -202178560;
  PlayerAvatarComp::findSceneTeam((PlayerAvatarComp *const)(v2 + 32));
  if ( std::operator==<SceneTeam>((const std::shared_ptr<SceneTeam> *)(v2 + 32), 0LL) )
  {
    v5 = -1;
  }
  else
  {
    v6 = std::__shared_ptr_access<SceneTeam,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<SceneTeam,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 32));
    std::function<ForeachPolicy ()(Avatar &)>::function(&v9, p_func);
    if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
      __asan_report_load8(&this->player_);
    Uid = Player::getUid(this->player_);
    SceneTeam::foreachAvatar(v6, Uid, &v9);
    std::function<ForeachPolicy ()(Avatar &)>::~function(&v9);
    v5 = 0;
  }
  std::shared_ptr<SceneTeam>::~shared_ptr((std::shared_ptr<SceneTeam> *const)(v2 + 32));
  result = v5;
  if ( v10 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 1910: range 0000000017174CB6-0000000017175151
int32_t __cdecl PlayerAvatarComp::foreachBackgroundAvatar(
        PlayerAvatarComp *const this,
        std::function<ForeachPolicy(Avatar&)> *p_func)
{
  int32_t v2; // r15d
  unsigned __int64 v3; // r13
  __int64 v4; // rax
  _DWORD *v5; // r12
  std::vector<std::weak_ptr<Avatar>>::size_type v6; // rax
  int v7; // r14d
  Avatar *v8; // rdx
  int32_t result; // eax
  std::map<long unsigned int,std::shared_ptr<Avatar>>::iterator __for_begin; // [rsp+20h] [rbp-180h] BYREF
  std::map<long unsigned int,std::shared_ptr<Avatar>>::iterator __for_end; // [rsp+28h] [rbp-178h] BYREF
  std::vector<std::weak_ptr<Avatar>>::iterator __for_begin_0; // [rsp+30h] [rbp-170h] BYREF
  std::vector<std::weak_ptr<Avatar>>::iterator __for_end_0; // [rsp+38h] [rbp-168h] BYREF
  std::map<long unsigned int,std::shared_ptr<Avatar>> *__for_range; // [rsp+40h] [rbp-160h]
  std::vector<std::weak_ptr<Avatar>> *__for_range_0; // [rsp+48h] [rbp-158h]
  std::weak_ptr<Avatar> *avatar_wtr; // [rsp+50h] [rbp-150h]
  std::pair<long unsigned int const,std::shared_ptr<Avatar> > *__in; // [rsp+58h] [rbp-148h]
  std::tuple_element<0,std::pair<long unsigned int const,std::shared_ptr<Avatar> > >::type *avatar_id; // [rsp+60h] [rbp-140h]
  std::tuple_element<1,std::pair<long unsigned int const,std::shared_ptr<Avatar> > >::type *avatar_ptr; // [rsp+68h] [rbp-138h]
  std::function<ForeachPolicy(Avatar&)> v20; // [rsp+70h] [rbp-130h] BYREF
  char v21[272]; // [rsp+90h] [rbp-110h] BYREF

  v3 = (unsigned __int64)v21;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_2(224LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "3 48 16 15 avatar_ptr:1928 80 24 15 avatar_vec:1918 144 48 21 exclude_guid_set:1911";
  *(_QWORD *)(v3 + 16) = PlayerAvatarComp::foreachBackgroundAvatar;
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = 61937;
  v5[536862722] = 62194;
  v5[536862723] = -218959360;
  v5[536862724] = 62194;
  v5[536862726] = -202116109;
  std::set<unsigned long>::set((std::set<long unsigned int> *const)(v3 + 144));
  std::function<ForeachPolicy ()(Avatar &)>::function<PlayerAvatarComp::foreachBackgroundAvatar(std::function<ForeachPolicy ()(Avatar &)>)::{lambda(Avatar &)#1},void,void>(
    &v20,
    (PlayerAvatarComp::foreachBackgroundAvatar::<lambda(Avatar&)>)(v3 + 144));
  PlayerAvatarComp::foreachMyAvatarInSceneTeam(this, &v20);
  std::function<ForeachPolicy ()(Avatar &)>::~function(&v20);
  std::vector<std::weak_ptr<Avatar>>::vector((std::vector<std::weak_ptr<Avatar>> *const)(v3 + 80));
  v6 = std::map<unsigned long,std::shared_ptr<Avatar>>::size(&this->avatar_map_);
  std::vector<std::weak_ptr<Avatar>>::reserve((std::vector<std::weak_ptr<Avatar>> *const)(v3 + 80), v6);
  __for_range = &this->avatar_map_;
  __for_begin._M_node = std::map<unsigned long,std::shared_ptr<Avatar>>::begin(&this->avatar_map_)._M_node;
  __for_end._M_node = std::map<unsigned long,std::shared_ptr<Avatar>>::end(&this->avatar_map_)._M_node;
  while ( std::operator!=(&__for_begin, &__for_end) )
  {
    __in = std::_Rb_tree_iterator<std::pair<unsigned long const,std::shared_ptr<Avatar>>>::operator*(&__for_begin);
    avatar_id = std::get<0ul,unsigned long const,std::shared_ptr<Avatar>>(__in);
    avatar_ptr = std::get<1ul,unsigned long const,std::shared_ptr<Avatar>>(__in);
    __for_end_0._M_current = (std::weak_ptr<Avatar> *)std::set<unsigned long>::end((const std::set<long unsigned int> *const)(v3 + 144))._M_node;
    __for_begin_0._M_current = (std::weak_ptr<Avatar> *)std::set<unsigned long>::find(
                                                          (std::set<long unsigned int> *const)(v3 + 144),
                                                          avatar_id)._M_node;
    if ( !std::operator!=(
            (const std::_Rb_tree_const_iterator<long unsigned int>::_Self *)&__for_begin_0,
            (const std::_Rb_tree_const_iterator<long unsigned int>::_Self *)&__for_end_0) )
      std::vector<std::weak_ptr<Avatar>>::emplace_back<std::shared_ptr<Avatar> &>(
        (std::vector<std::weak_ptr<Avatar>> *const)(v3 + 80),
        avatar_ptr,
        avatar_ptr);
    std::_Rb_tree_iterator<std::pair<unsigned long const,std::shared_ptr<Avatar>>>::operator++(&__for_begin);
  }
  __for_range_0 = (std::vector<std::weak_ptr<Avatar>> *)(v3 + 80);
  __for_begin_0._M_current = std::vector<std::weak_ptr<Avatar>>::begin((std::vector<std::weak_ptr<Avatar>> *const)(v3 + 80))._M_current;
  __for_end_0._M_current = std::vector<std::weak_ptr<Avatar>>::end(__for_range_0)._M_current;
  while ( __gnu_cxx::operator!=<std::weak_ptr<Avatar> *,std::vector<std::weak_ptr<Avatar>>>(
            &__for_begin_0,
            &__for_end_0) )
  {
    avatar_wtr = __gnu_cxx::__normal_iterator<std::weak_ptr<Avatar> *,std::vector<std::weak_ptr<Avatar>>>::operator*(&__for_begin_0);
    std::weak_ptr<Avatar>::lock((const std::weak_ptr<Avatar> *const)(v3 + 48));
    if ( std::operator==<Avatar>((const std::shared_ptr<Avatar> *)(v3 + 48), 0LL) )
    {
      v7 = 0;
    }
    else
    {
      v8 = std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::operator*((const std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 48));
      if ( std::function<ForeachPolicy ()(Avatar &)>::operator()(p_func, v8) )
      {
        v2 = 1;
        v7 = 1;
      }
      else
      {
        v7 = 2;
      }
    }
    std::shared_ptr<Avatar>::~shared_ptr((std::shared_ptr<Avatar> *const)(v3 + 48));
    if ( v7 && v7 != 2 )
      goto LABEL_20;
    __gnu_cxx::__normal_iterator<std::weak_ptr<Avatar> *,std::vector<std::weak_ptr<Avatar>>>::operator++(&__for_begin_0);
  }
  v2 = 0;
LABEL_20:
  std::vector<std::weak_ptr<Avatar>>::~vector((std::vector<std::weak_ptr<Avatar>> *const)(v3 + 80));
  std::set<unsigned long>::~set((std::set<long unsigned int> *const)(v3 + 144));
  result = v2;
  if ( v21 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8010) = 0;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8018) = 0;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8018) = -168430091;
  }
  return result;
};

// Line 1912: range 0000000017174C52-0000000017174CB5
ForeachPolicy __cdecl PlayerAvatarComp::foreachBackgroundAvatar(std::function<ForeachPolicy ()(Avatar &)>)::{lambda(Avatar &)#1}::operator()(
        const PlayerAvatarComp::foreachBackgroundAvatar::<lambda(Avatar&)> *const __closure,
        Avatar *avatar)
{
  std::set<long unsigned int> *exclude_guid_set; // rbx
  std::set<long unsigned int>::value_type __x[3]; // [rsp+18h] [rbp-18h] BYREF

  if ( *(_BYTE *)(((unsigned __int64)__closure >> 3) + 0x7FFF8000) )
    __asan_report_load8(__closure);
  exclude_guid_set = __closure->__exclude_guid_set;
  __x[0] = Avatar::getGuid(avatar);
  std::set<unsigned long>::insert(exclude_guid_set, __x);
  return 0;
};

// Line 1943: range 0000000017175152-00000000171754DA
int32_t __cdecl PlayerAvatarComp::addMyAvatarExpForTeam(
        PlayerAvatarComp *const this,
        uint32_t exp,
        const ActionReason *reason,
        bool is_notify)
{
  unsigned __int64 v4; // r12
  __int64 v5; // rax
  _DWORD *v6; // r13
  uint64_t *v7; // rax
  unsigned __int64 v8; // rax
  unsigned __int64 v9; // rdx
  common::milog::MiLogStream *v10; // r14
  std::__shared_ptr_access<FormalAvatar,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v11; // rax
  int32_t result; // eax
  std::unordered_set<long unsigned int>::iterator __for_begin; // [rsp+20h] [rbp-110h] BYREF
  std::unordered_set<long unsigned int>::iterator __for_end; // [rsp+28h] [rbp-108h] BYREF
  std::unordered_set<long unsigned int> *__for_range; // [rsp+30h] [rbp-100h]
  uint64_t guid; // [rsp+38h] [rbp-F8h]
  common::milog::MiLogStream v19; // [rsp+40h] [rbp-F0h] BYREF
  char v20[208]; // [rsp+60h] [rbp-D0h] BYREF

  v4 = (unsigned __int64)v20;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v5 = __asan_stack_malloc_2(160LL);
    if ( v5 )
      v4 = v5;
  }
  *(_QWORD *)v4 = 1102416563LL;
  *(_QWORD *)(v4 + 8) = "2 32 16 15 avatar_ptr:1947 64 56 20 avatar_guid_set:1944";
  *(_QWORD *)(v4 + 16) = PlayerAvatarComp::addMyAvatarExpForTeam;
  v6 = (_DWORD *)(v4 >> 3);
  v6[536862720] = -235802127;
  v6[536862721] = -219021312;
  v6[536862723] = -218103808;
  v6[536862724] = -202116109;
  PlayerAvatarComp::getMyAvatarGuidSetForTeamProduct((std::unordered_set<long unsigned int> *)(v4 + 64), this);
  __for_range = (std::unordered_set<long unsigned int> *)(v4 + 64);
  __for_begin._M_cur = std::unordered_set<unsigned long>::begin((std::unordered_set<long unsigned int> *const)(v4 + 64))._M_cur;
  __for_end._M_cur = std::unordered_set<unsigned long>::end((std::unordered_set<long unsigned int> *const)(v4 + 64))._M_cur;
  while ( std::__detail::operator!=<unsigned long,false>(&__for_begin, &__for_end) )
  {
    v7 = (uint64_t *)std::__detail::_Node_iterator<unsigned long,true,false>::operator*(&__for_begin);
    if ( *(_BYTE *)(((unsigned __int64)v7 >> 3) + 0x7FFF8000) )
      v7 = (uint64_t *)__asan_report_load8(v7);
    guid = *v7;
    PlayerAvatarComp::findFormalAvatar((const PlayerAvatarComp *const)(v4 + 32), (uint64_t)this, guid);
    if ( !std::operator==<FormalAvatar>((const std::shared_ptr<FormalAvatar> *)(v4 + 32), 0LL) )
    {
      v8 = (unsigned __int64)std::__shared_ptr_access<FormalAvatar,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<FormalAvatar,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 32));
      if ( *(_BYTE *)((v8 >> 3) + 0x7FFF8000) )
        v8 = __asan_report_load8(v8);
      v9 = *(_QWORD *)v8 + 520LL;
      if ( *(_BYTE *)((v9 >> 3) + 0x7FFF8000) )
        v8 = __asan_report_load8(*(_QWORD *)v8 + 520LL);
      if ( (*(unsigned int (__fastcall **)(unsigned __int64, _QWORD, const ActionReason *, bool, _QWORD, _QWORD))v9)(
             v8,
             exp,
             reason,
             is_notify,
             0LL,
             0LL) )
      {
        common::milog::MiLogStream::create(
          &v19,
          &common::milog::MiLogDefault::default_log_obj_,
          3u,
          "./src/player/avatar/player_avatar_comp.cpp",
          "addMyAvatarExpForTeam",
          1954);
        v10 = common::milog::MiLogStream::operator<<<char [21],(char *[21])0>(
                &v19,
                (const char (*)[21])"addExp fails avatar:");
        v11 = std::__shared_ptr_access<FormalAvatar,(__gnu_cxx::_Lock_policy)2,false,false>::operator*((const std::__shared_ptr_access<FormalAvatar,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 32));
        common::milog::MiLogStream::operator<<<FormalAvatar,(FormalAvatar*)0>(v10, v11);
        common::milog::MiLogStream::~MiLogStream(&v19);
      }
    }
    std::shared_ptr<FormalAvatar>::~shared_ptr((std::shared_ptr<FormalAvatar> *const)(v4 + 32));
    std::__detail::_Node_iterator<unsigned long,true,false>::operator++(&__for_begin);
  }
  std::unordered_set<unsigned long>::~unordered_set((std::unordered_set<long unsigned int> *const)(v4 + 64));
  result = 0;
  if ( v20 == (char *)v4 )
  {
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF800C) = 0LL;
  }
  else
  {
    *(_QWORD *)v4 = 1172321806LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v4 >> 3) + 0x7FFF8010) = -168430091;
  }
  return result;
};

// Line 1962: range 00000000171755B4-0000000017175717
uint32_t __cdecl PlayerAvatarComp::getFetterLevelGreaterAvatarNum(
        const PlayerAvatarComp *const this,
        uint32_t fetter_level)
{
  unsigned __int64 v2; // rbx
  __int64 v3; // rax
  unsigned __int64 v4; // r14
  uint32_t result; // eax
  std::function<ForeachPolicy(const FormalAvatar&)> p_func; // [rsp+20h] [rbp-90h] BYREF
  char v7[112]; // [rsp+40h] [rbp-70h] BYREF
  PlayerAvatarComp::getFetterLevelGreaterAvatarNum::<lambda(const FormalAvatar&)> v8; // 0:rsi.8,8:edx.4

  v2 = (unsigned __int64)v7;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_0(64LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "1 32 4 14 total_num:1963";
  *(_QWORD *)(v2 + 16) = PlayerAvatarComp::getFetterLevelGreaterAvatarNum;
  v4 = v2 >> 3;
  *(_DWORD *)(v4 + 2147450880) = -235802127;
  *(_DWORD *)(v4 + 2147450884) = -202116348;
  *(_DWORD *)(v2 + 32) = 0;
  v8.__fetter_level = fetter_level;
  v8.__total_num = (uint32_t *)(v2 + 32);
  std::function<ForeachPolicy ()(FormalAvatar const&)>::function<PlayerAvatarComp::getFetterLevelGreaterAvatarNum(unsigned int)::{lambda(FormalAvatar const&)#1},void,void>(
    &p_func,
    v8);
  PlayerAvatarComp::foreachFormalAvatar(this, &p_func);
  std::function<ForeachPolicy ()(FormalAvatar const&)>::~function(&p_func);
  result = *(_DWORD *)(v2 + 32);
  if ( v7 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 1964: range 00000000171754DC-00000000171755B2
ForeachPolicy __cdecl PlayerAvatarComp::getFetterLevelGreaterAvatarNum(unsigned int)const::{lambda(FormalAvatar const&)#1}::operator()(
        const PlayerAvatarComp::getFetterLevelGreaterAvatarNum::<lambda(const FormalAvatar&)> *const __closure,
        const FormalAvatar *avatar)
{
  FetterComp *FetterComp; // rax
  uint32_t Level; // ecx
  uint32_t *total_num; // rax

  FetterComp = FormalAvatar::getFetterComp(avatar);
  Level = FetterComp::getLevel(FetterComp);
  if ( *(_BYTE *)(((unsigned __int64)&__closure->__fetter_level >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&__closure->__fetter_level >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4(&__closure->__fetter_level);
  }
  if ( Level >= __closure->__fetter_level )
  {
    if ( *(_BYTE *)(((unsigned __int64)__closure >> 3) + 0x7FFF8000) )
      __asan_report_load8(__closure);
    total_num = __closure->__total_num;
    if ( *(_BYTE *)(((unsigned __int64)__closure->__total_num >> 3) + 0x7FFF8000) != 0
      && (char)(((__int64)__closure->__total_num & 7) + 3) >= *(_BYTE *)(((unsigned __int64)__closure->__total_num >> 3)
                                                                       + 0x7FFF8000) )
    {
      total_num = (uint32_t *)__asan_report_load4(__closure->__total_num);
    }
    ++*total_num;
  }
  return 0;
};

// Line 1977: range 0000000017175718-0000000017175F42
__int64 __fastcall PlayerAvatarComp::setUpAvatarTeam(
        PlayerAvatarComp *const this,
        __int32 team_id,
        const std::vector<long unsigned int> *avatar_guid_vec,
        __int64 target_avatar_guid)
{
  unsigned __int64 v4; // r13
  __int64 v5; // rax
  _DWORD *v6; // r12
  PlayerBasicComp *BasicComp; // rax
  common::milog::MiLogStream *v8; // rcx
  unsigned int v9; // r14d
  common::milog::MiLogStream *v10; // rax
  const unsigned __int64 *M_current; // r14
  std::vector<long unsigned int>::const_iterator v12; // rax
  common::milog::MiLogStream *v14; // rax
  common::milog::MiLogStream *v15; // rax
  AvatarTeam *v16; // rax
  PlayerMpComp *MpComp; // rax
  char v18; // al
  __int64 result; // rax
  std::string v20; // [rsp+0h] [rbp-150h]
  const std::vector<long unsigned int> *avatar_guid_veca; // [rsp+8h] [rbp-148h]
  PlayerAvatarComp *thisa; // [rsp+18h] [rbp-138h]
  int32_t ret; // [rsp+24h] [rbp-12Ch]
  int32_t reta; // [rsp+24h] [rbp-12Ch]
  __gnu_cxx::__normal_iterator<long unsigned int const*,std::vector<long unsigned int> > __lhs; // [rsp+28h] [rbp-128h] BYREF
  __gnu_cxx::__normal_iterator<long unsigned int const*,std::vector<long unsigned int> > __rhs; // [rsp+30h] [rbp-120h] BYREF
  std::vector<long unsigned int> *cur_team; // [rsp+38h] [rbp-118h]
  std::string v28; // [rsp+40h] [rbp-110h] BYREF
  char v29[240]; // [rsp+60h] [rbp-F0h] BYREF

  *(&v20._anon_0._M_allocated_capacity + 1) = (std::string::size_type)this;
  HIDWORD(v20._anon_0._M_allocated_capacity) = team_id;
  v20._M_string_length = (std::string::size_type)avatar_guid_vec;
  v20._M_dataplus._M_p = (std::string::pointer)target_avatar_guid;
  v4 = (unsigned __int64)v29;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v5 = __asan_stack_malloc_2(192LL);
    if ( v5 )
      v4 = v5;
  }
  *(_QWORD *)v4 = 1102416563LL;
  *(_QWORD *)(v4 + 8) = "5 32 1 11 holder:1978 48 4 12 team_id:1976 64 8 23 target_avatar_guid:1976 96 16 22 target_avata"
                        "r_ptr:1992 128 24 13 old_team:2020";
  *(_QWORD *)(v4 + 16) = PlayerAvatarComp::setUpAvatarTeam;
  v6 = (_DWORD *)(v4 >> 3);
  v6[536862720] = -235802127;
  v6[536862721] = -234556927;
  v6[536862722] = -218959360;
  v6[536862723] = -219021312;
  v6[536862724] = -218103808;
  v6[536862725] = -202116109;
  *(_DWORD *)(v4 + 48) = team_id;
  *(_QWORD *)(v4 + 64) = v20._M_dataplus._M_p;
  if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
    __asan_report_load8(&this->player_);
  BasicComp = Player::getBasicComp(this->player_);
  PlayerBasicComp::getNextTransNo[abi:cxx11](&v28, BasicComp);
  StatLogUtils::ContextHolder::ContextHolder((StatLogUtils::ContextHolder *const)(v4 + 32), 0x454u, v20);
  std::string::~string(&v28);
  if ( std::operator==<Avatar>(&thisa->cur_avatar_ptr_, 0LL) )
  {
    common::milog::MiLogStream::create(
      (common::milog::MiLogStream *)&v28,
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/player/avatar/player_avatar_comp.cpp",
      "setUpAvatarTeam",
      1981);
    v8 = common::milog::MiLogStream::operator<<<char [24],(char *[24])0>(
           (common::milog::MiLogStream *const)&v28,
           (const char (*)[24])"cur_avatar_ptr_ is null");
    if ( *(_BYTE *)(((unsigned __int64)&thisa->player_ >> 3) + 0x7FFF8000) )
      __asan_report_load8(&thisa->player_);
    operator<<(v8, thisa->player_);
    common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)&v28);
    v9 = -1;
  }
  else
  {
    ret = PlayerAvatarComp::checkAvatarTeamCanSetUp(thisa, *(_DWORD *)(v4 + 48), avatar_guid_veca);
    if ( ret )
    {
      common::milog::MiLogStream::create(
        (common::milog::MiLogStream *)&v28,
        &common::milog::MiLogDefault::default_log_obj_,
        1u,
        "./src/player/avatar/player_avatar_comp.cpp",
        "setUpAvatarTeam",
        1988);
      common::milog::MiLogStream::operator<<<char [31],(char *[31])0>(
        (common::milog::MiLogStream *const)&v28,
        (const char (*)[31])"checkAvatarTeamCanSetUp failed");
      common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)&v28);
      v9 = ret;
    }
    else
    {
      PlayerAvatarComp::findAvatar((const PlayerAvatarComp *const)(v4 + 96), (uint64_t)thisa, *(_QWORD *)(v4 + 64));
      if ( std::operator==<Avatar>((const std::shared_ptr<Avatar> *)(v4 + 96), 0LL) )
      {
        common::milog::MiLogStream::create(
          (common::milog::MiLogStream *)&v28,
          &common::milog::MiLogDefault::default_log_obj_,
          1u,
          "./src/player/avatar/player_avatar_comp.cpp",
          "setUpAvatarTeam",
          1995);
        v10 = common::milog::MiLogStream::operator<<<char [25],(char *[25])0>(
                (common::milog::MiLogStream *const)&v28,
                (const char (*)[25])off_2603CD20);
        common::milog::MiLogStream::operator<<<unsigned long,(unsigned long *)0>(
          v10,
          (const unsigned __int64 *)(v4 + 64));
        common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)&v28);
        v9 = 104;
      }
      else
      {
        if ( *(_BYTE *)(((unsigned __int64)&thisa->cur_avatar_team_id_ >> 3) + 0x7FFF8000) != 0
          && *(_BYTE *)(((unsigned __int64)&thisa->cur_avatar_team_id_ >> 3) + 0x7FFF8000) <= 3 )
        {
          __asan_report_load4(&thisa->cur_avatar_team_id_);
        }
        if ( thisa->cur_avatar_team_id_ == *(_DWORD *)(v4 + 48)
          && !common::tools::MiscUtils::isContains<std::unordered_set<unsigned long>,unsigned long>(
                &thisa->temp_avatar_guid_set_,
                (const unsigned __int64 *)(v4 + 64))
          && (__rhs._M_current = std::vector<unsigned long>::end(avatar_guid_veca)._M_current,
              M_current = std::vector<unsigned long>::end(avatar_guid_veca)._M_current,
              v12._M_current = std::vector<unsigned long>::begin(avatar_guid_veca)._M_current,
              __lhs._M_current = std::find<__gnu_cxx::__normal_iterator<unsigned long const*,std::vector<unsigned long>>,unsigned long>(
                                   v12,
                                   (__gnu_cxx::__normal_iterator<long unsigned int const*,std::vector<long unsigned int> >)M_current,
                                   (const unsigned __int64 *)(v4 + 64))._M_current,
              __gnu_cxx::operator==<unsigned long const*,std::vector<unsigned long>>(&__lhs, &__rhs)) )
        {
          common::milog::MiLogStream::create(
            (common::milog::MiLogStream *)&v28,
            &common::milog::MiLogDefault::default_log_obj_,
            3u,
            "./src/player/avatar/player_avatar_comp.cpp",
            "setUpAvatarTeam",
            2005);
          v14 = common::milog::MiLogStream::operator<<<char [33],(char *[33])0>(
                  (common::milog::MiLogStream *const)&v28,
                  (const char (*)[33])off_2603CD60);
          common::milog::MiLogStream::operator<<<unsigned long,(unsigned long *)0>(
            v14,
            (const unsigned __int64 *)(v4 + 64));
          common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)&v28);
          v9 = 122;
        }
        else
        {
          reta = PlayerAvatarComp::checkChangeCurAvatar(thisa, *(_QWORD *)(v4 + 64));
          if ( reta )
          {
            common::milog::MiLogStream::create(
              (common::milog::MiLogStream *)&v28,
              &common::milog::MiLogDefault::default_log_obj_,
              1u,
              "./src/player/avatar/player_avatar_comp.cpp",
              "setUpAvatarTeam",
              2013);
            v15 = common::milog::MiLogStream::operator<<<char [35],(char *[35])0>(
                    (common::milog::MiLogStream *const)&v28,
                    (const char (*)[35])"checkChangeCurAvatar failed, guid:");
            common::milog::MiLogStream::operator<<<unsigned long,(unsigned long *)0>(
              v15,
              (const unsigned __int64 *)(v4 + 64));
            common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)&v28);
            v9 = reta;
          }
          else
          {
            v16 = std::map<unsigned int,AvatarTeam>::operator[](
                    &thisa->avatar_team_map_,
                    (const std::map<unsigned int,AvatarTeam>::key_type *)(v4 + 48));
            cur_team = AvatarTeam::getAvatarVec(v16);
            std::vector<unsigned long>::vector((std::vector<long unsigned int> *const)(v4 + 128));
            std::vector<unsigned long>::swap((std::vector<long unsigned int> *const)(v4 + 128), cur_team);
            std::vector<unsigned long>::operator=(cur_team, avatar_guid_veca);
            PlayerAvatarComp::notifyAvatarTeam(thisa, *(_DWORD *)(v4 + 48));
            if ( *(_BYTE *)(((unsigned __int64)&thisa->cur_avatar_team_id_ >> 3) + 0x7FFF8000) != 0
              && *(_BYTE *)(((unsigned __int64)&thisa->cur_avatar_team_id_ >> 3) + 0x7FFF8000) <= 3 )
            {
              __asan_report_load4(&thisa->cur_avatar_team_id_);
            }
            if ( thisa->cur_avatar_team_id_ != *(_DWORD *)(v4 + 48) )
              goto LABEL_32;
            if ( *(_BYTE *)(((unsigned __int64)&thisa->player_ >> 3) + 0x7FFF8000) )
              __asan_report_load8(&thisa->player_);
            MpComp = Player::getMpComp(thisa->player_);
            if ( !PlayerMpComp::isInMpMode(MpComp) )
              v18 = 1;
            else
LABEL_32:
              v18 = 0;
            if ( v18 )
              PlayerAvatarComp::syncCurAvatarTeamToSceneTeam(
                thisa,
                *(_QWORD *)(v4 + 64),
                CHANGE_SCENE_TEAM_REASON_SET_UP_AVATAR_TEAM);
            PlayerAvatarComp::logSetUpAvatarTeam(
              thisa,
              *(_DWORD *)(v4 + 48),
              (const std::vector<long unsigned int> *)(v4 + 128));
            v9 = 0;
            std::vector<unsigned long>::~vector((std::vector<long unsigned int> *const)(v4 + 128));
          }
        }
      }
      std::shared_ptr<Avatar>::~shared_ptr((std::shared_ptr<Avatar> *const)(v4 + 96));
    }
  }
  StatLogUtils::ContextHolder::~ContextHolder((StatLogUtils::ContextHolder *const)(v4 + 32));
  result = v9;
  if ( v29 == (char *)v4 )
  {
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8008) = 0LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8010) = 0LL;
  }
  else
  {
    *(_QWORD *)v4 = 1172321806LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 2036: range 0000000017175F44-0000000017176C3B
int32_t __cdecl PlayerAvatarComp::setSceneTeamAndAddToScene(
        PlayerAvatarComp *const this,
        const std::vector<long unsigned int> *avatar_vec,
        uint64_t appear_avatar_guid,
        ScenePtr *p_dest_scene_ptr,
        proto_log::ChangeSceneTeamReason reason)
{
  unsigned __int64 v5; // r13
  __int64 v6; // rax
  _DWORD *v7; // r12
  common::milog::MiLogStream *v8; // rbx
  int32_t v9; // r14d
  unsigned __int64 v10; // rax
  unsigned __int64 v11; // rdx
  common::milog::MiLogStream *v12; // r14
  std::__shared_ptr_access<SceneTeam,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v13; // r14
  uint32_t Uid; // eax
  SceneTeam *v15; // r14
  Scene *v16; // r15
  uint32_t v17; // eax
  common::milog::MiLogStream *v18; // r14
  std::__shared_ptr_access<SceneTeam,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v19; // r14
  uint32_t v20; // eax
  std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v21; // rax
  PlayerAvatarComp *AvatarComp; // rax
  common::milog::MiLogStream *v24; // rax
  common::milog::MiLogStream *v25; // rax
  common::milog::MiLogStream *v26; // r14
  SceneTeam *v27; // rax
  common::milog::MiLogStream *v28; // rax
  common::milog::MiLogStream *v29; // rax
  common::milog::MiLogStream *v30; // rax
  common::milog::MiLogStream *v31; // rax
  common::milog::MiLogStream *v32; // rax
  common::milog::MiLogStream *v33; // rax
  common::milog::MiLogStream *v34; // r14
  unsigned __int64 v35; // rax
  unsigned __int64 *M_current; // r14
  std::vector<long unsigned int>::iterator v37; // rax
  Avatar *v38; // rax
  std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v39; // rax
  SkillComp *SkillComp; // rax
  unsigned __int64 v41; // rax
  unsigned __int64 *v42; // r14
  std::vector<long unsigned int>::iterator v43; // rax
  Scene *v44; // r14
  Avatar *v45; // rax
  int32_t result; // eax
  unsigned int val; // [rsp+3Ch] [rbp-1C4h] BYREF
  std::vector<long unsigned int>::iterator __for_begin; // [rsp+40h] [rbp-1C0h] BYREF
  std::vector<long unsigned int>::iterator __for_end; // [rsp+48h] [rbp-1B8h] BYREF
  __gnu_cxx::__normal_iterator<long unsigned int*,std::vector<long unsigned int> > __rhs; // [rsp+50h] [rbp-1B0h] BYREF
  __gnu_cxx::__normal_iterator<long unsigned int*,std::vector<long unsigned int> > __lhs; // [rsp+58h] [rbp-1A8h] BYREF
  std::vector<long unsigned int> *__for_range; // [rsp+60h] [rbp-1A0h]
  std::vector<long unsigned int> *__for_range_0; // [rsp+68h] [rbp-198h]
  common::milog::MiLogStream v57; // [rsp+70h] [rbp-190h] BYREF
  char v58[368]; // [rsp+90h] [rbp-170h] BYREF

  v5 = (unsigned __int64)v58;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v6 = __asan_stack_malloc_3(320LL);
    if ( v6 )
      v5 = v6;
  }
  *(_QWORD *)v5 = 1102416563LL;
  *(_QWORD *)(v5 + 8) = "7 48 4 8 ret:2061 64 8 9 guid:2092 96 16 19 scene_team_ptr:2042 128 16 19 cur_avatar_ptr:2058 16"
                        "0 16 15 avatar_ptr:2098 192 24 13 old_team:2049 256 24 13 cur_team:2056";
  *(_QWORD *)(v5 + 16) = PlayerAvatarComp::setSceneTeamAndAddToScene;
  v7 = (_DWORD *)(v5 >> 3);
  v7[536862720] = -235802127;
  v7[536862721] = -234556943;
  v7[536862722] = -218959360;
  v7[536862723] = -219021312;
  v7[536862724] = -219021312;
  v7[536862725] = -219021312;
  v7[536862726] = -234881024;
  v7[536862727] = -218959118;
  v7[536862728] = -218103808;
  v7[536862729] = -202116109;
  if ( std::operator==<Scene>(p_dest_scene_ptr, 0LL) )
  {
    common::milog::MiLogStream::create(
      &v57,
      &common::milog::MiLogDefault::default_log_obj_,
      1u,
      "./src/player/avatar/player_avatar_comp.cpp",
      "setSceneTeamAndAddToScene",
      2039);
    v8 = common::milog::MiLogStream::operator<<<char [33],(char *[33])0>(
           &v57,
           (const char (*)[33])"dest_scene_ptr is nullptr, uid: ");
    if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
      __asan_report_load8(&this->player_);
    val = Player::getUid(this->player_);
    common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v8, &val);
    common::milog::MiLogStream::~MiLogStream(&v57);
    v9 = -1;
  }
  else
  {
    v10 = (unsigned __int64)std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false> *const)p_dest_scene_ptr);
    if ( *(_BYTE *)((v10 >> 3) + 0x7FFF8000) )
      v10 = __asan_report_load8(v10);
    v11 = *(_QWORD *)v10 + 280LL;
    if ( *(_BYTE *)((v11 >> 3) + 0x7FFF8000) )
      v10 = __asan_report_load8(*(_QWORD *)v10 + 280LL);
    (*(void (__fastcall **)(unsigned __int64, unsigned __int64))v11)(v5 + 96, v10);
    if ( std::operator==<SceneTeam>((const std::shared_ptr<SceneTeam> *)(v5 + 96), 0LL) )
    {
      common::milog::MiLogStream::create(
        &v57,
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/player/avatar/player_avatar_comp.cpp",
        "setSceneTeamAndAddToScene",
        2045);
      v12 = common::milog::MiLogStream::operator<<<char [27],(char *[27])0>(
              &v57,
              (const char (*)[27])"findSceneTeam fails, uid: ");
      if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
        __asan_report_load8(&this->player_);
      val = Player::getUid(this->player_);
      common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v12, &val);
      common::milog::MiLogStream::~MiLogStream(&v57);
      v9 = -1;
    }
    else
    {
      v13 = std::__shared_ptr_access<SceneTeam,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<SceneTeam,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v5 + 96));
      if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
        __asan_report_load8(&this->player_);
      Uid = Player::getUid(this->player_);
      SceneTeam::getAvatarGuidVec((std::vector<long unsigned int> *)(v5 + 192), v13, Uid);
      v15 = std::__shared_ptr_access<SceneTeam,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<SceneTeam,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v5 + 96));
      v16 = std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::operator*((const std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false> *const)p_dest_scene_ptr);
      if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
        __asan_report_load8(&this->player_);
      v17 = Player::getUid(this->player_);
      if ( SceneTeam::setPlayerAvatarTeamAndAddToScene(v15, v17, avatar_vec, appear_avatar_guid, v16, reason, 0) )
      {
        common::milog::MiLogStream::create(
          &v57,
          &common::milog::MiLogDefault::default_log_obj_,
          3u,
          "./src/player/avatar/player_avatar_comp.cpp",
          "setSceneTeamAndAddToScene",
          2052);
        v18 = common::milog::MiLogStream::operator<<<char [45],(char *[45])0>(
                &v57,
                (const char (*)[45])"setPlayerAvatarTeamAndAddToScene fails, uid:");
        if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
          __asan_report_load8(&this->player_);
        val = Player::getUid(this->player_);
        common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v18, &val);
        common::milog::MiLogStream::~MiLogStream(&v57);
        v9 = -1;
      }
      else
      {
        v19 = std::__shared_ptr_access<SceneTeam,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<SceneTeam,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v5 + 96));
        if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
          __asan_report_load8(&this->player_);
        v20 = Player::getUid(this->player_);
        SceneTeam::getAvatarGuidVec((std::vector<long unsigned int> *)(v5 + 256), v19, v20);
        PlayerAvatarComp::getCurAvatar((const PlayerAvatarComp *const)(v5 + 128));
        if ( !std::operator!=<Avatar>((const std::shared_ptr<Avatar> *)(v5 + 128), 0LL) )
          goto LABEL_37;
        v21 = std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v5 + 128));
        if ( appear_avatar_guid == Avatar::getGuid(v21) )
          goto LABEL_37;
        if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
          __asan_report_load8(&this->player_);
        AvatarComp = Player::getAvatarComp(this->player_);
        *(_DWORD *)(v5 + 48) = PlayerAvatarComp::changeCurAvatar(AvatarComp, appear_avatar_guid, 0);
        if ( *(_DWORD *)(v5 + 48) )
        {
          common::milog::MiLogStream::create(
            &v57,
            &common::milog::MiLogDefault::default_log_obj_,
            3u,
            "./src/player/avatar/player_avatar_comp.cpp",
            "setSceneTeamAndAddToScene",
            2064);
          v24 = common::milog::MiLogStream::operator<<<char [28],(char *[28])0>(
                  &v57,
                  (const char (*)[28])"changeCurAvatar fails, ret:");
          v25 = common::milog::MiLogStream::operator<<<int,(int *)0>(v24, (const int *)(v5 + 48));
          v26 = common::milog::MiLogStream::operator<<<char [7],(char *[7])0>(v25, (const char (*)[7])", uid:");
          if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
            __asan_report_load8(&this->player_);
          val = Player::getUid(this->player_);
          common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v26, &val);
          common::milog::MiLogStream::~MiLogStream(&v57);
          v9 = *(_DWORD *)(v5 + 48);
        }
        else
        {
LABEL_37:
          v27 = std::__shared_ptr_access<SceneTeam,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<SceneTeam,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v5 + 96));
          SceneTeam::notifySceneTeamUpdate(v27);
          common::milog::MiLogStream::create(
            &v57,
            &common::milog::MiLogDefault::default_log_obj_,
            1u,
            "./src/player/avatar/player_avatar_comp.cpp",
            "setSceneTeamAndAddToScene",
            2072);
          v28 = common::milog::MiLogStream::operator<<<char [42],(char *[42])0>(
                  &v57,
                  (const char (*)[42])"setSceneTeamAndAddToScene set_avatar_vec:");
          v29 = common::milog::MiLogStream::operator<<<unsigned long>(v28, avatar_vec);
          v30 = common::milog::MiLogStream::operator<<<char [11],(char *[11])0>(v29, (const char (*)[11])" old_team:");
          v31 = common::milog::MiLogStream::operator<<<unsigned long>(
                  v30,
                  (const std::vector<long unsigned int> *)(v5 + 192));
          v32 = common::milog::MiLogStream::operator<<<char [12],(char *[12])0>(v31, (const char (*)[12])", cur_team:");
          v33 = common::milog::MiLogStream::operator<<<unsigned long>(
                  v32,
                  (const std::vector<long unsigned int> *)(v5 + 256));
          v34 = common::milog::MiLogStream::operator<<<char [7],(char *[7])0>(v33, (const char (*)[7])", uid:");
          if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
            __asan_report_load8(&this->player_);
          val = Player::getUid(this->player_);
          common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v34, &val);
          common::milog::MiLogStream::~MiLogStream(&v57);
          __for_range = (std::vector<long unsigned int> *)(v5 + 256);
          __for_begin._M_current = std::vector<unsigned long>::begin((std::vector<long unsigned int> *const)(v5 + 256))._M_current;
          __for_end._M_current = std::vector<unsigned long>::end(__for_range)._M_current;
          while ( __gnu_cxx::operator!=<unsigned long *,std::vector<unsigned long>>(&__for_begin, &__for_end) )
          {
            v35 = (unsigned __int64)__gnu_cxx::__normal_iterator<unsigned long *,std::vector<unsigned long>>::operator*(&__for_begin);
            if ( *(_BYTE *)((v35 >> 3) + 0x7FFF8000) )
              v35 = __asan_report_load8(v35);
            *(_QWORD *)(v5 + 64) = *(_QWORD *)v35;
            M_current = std::vector<unsigned long>::end((std::vector<long unsigned int> *const)(v5 + 192))._M_current;
            v37._M_current = std::vector<unsigned long>::begin((std::vector<long unsigned int> *const)(v5 + 192))._M_current;
            __rhs._M_current = std::find<__gnu_cxx::__normal_iterator<unsigned long *,std::vector<unsigned long>>,unsigned long>(
                                 v37,
                                 (__gnu_cxx::__normal_iterator<long unsigned int*,std::vector<long unsigned int> >)M_current,
                                 (const unsigned __int64 *)(v5 + 64))._M_current;
            __lhs._M_current = std::vector<unsigned long>::end((std::vector<long unsigned int> *const)(v5 + 192))._M_current;
            if ( !__gnu_cxx::operator!=<unsigned long *,std::vector<unsigned long>>(&__lhs, &__rhs) )
            {
              PlayerAvatarComp::findAvatar(
                (const PlayerAvatarComp *const)(v5 + 160),
                (uint64_t)this,
                *(_QWORD *)(v5 + 64));
              if ( std::operator!=<Avatar>((const std::shared_ptr<Avatar> *)(v5 + 160), 0LL) )
              {
                v38 = std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v5 + 160));
                Avatar::clearAllModifier(v38);
                v39 = std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v5 + 160));
                SkillComp = Avatar::getSkillComp(v39);
                SkillComp::notifySkillInfo(SkillComp);
              }
              std::shared_ptr<Avatar>::~shared_ptr((std::shared_ptr<Avatar> *const)(v5 + 160));
            }
            __gnu_cxx::__normal_iterator<unsigned long *,std::vector<unsigned long>>::operator++(&__for_begin);
          }
          __for_range_0 = (std::vector<long unsigned int> *)(v5 + 192);
          __for_begin._M_current = std::vector<unsigned long>::begin((std::vector<long unsigned int> *const)(v5 + 192))._M_current;
          __for_end._M_current = std::vector<unsigned long>::end(__for_range_0)._M_current;
          while ( __gnu_cxx::operator!=<unsigned long *,std::vector<unsigned long>>(&__for_begin, &__for_end) )
          {
            v41 = (unsigned __int64)__gnu_cxx::__normal_iterator<unsigned long *,std::vector<unsigned long>>::operator*(&__for_begin);
            if ( *(_BYTE *)((v41 >> 3) + 0x7FFF8000) )
              v41 = __asan_report_load8(v41);
            *(_QWORD *)(v5 + 64) = *(_QWORD *)v41;
            v42 = std::vector<unsigned long>::end((std::vector<long unsigned int> *const)(v5 + 256))._M_current;
            v43._M_current = std::vector<unsigned long>::begin((std::vector<long unsigned int> *const)(v5 + 256))._M_current;
            __lhs._M_current = std::find<__gnu_cxx::__normal_iterator<unsigned long *,std::vector<unsigned long>>,unsigned long>(
                                 v43,
                                 (__gnu_cxx::__normal_iterator<long unsigned int*,std::vector<long unsigned int> >)v42,
                                 (const unsigned __int64 *)(v5 + 64))._M_current;
            __rhs._M_current = std::vector<unsigned long>::end((std::vector<long unsigned int> *const)(v5 + 256))._M_current;
            if ( !__gnu_cxx::operator!=<unsigned long *,std::vector<unsigned long>>(&__rhs, &__lhs) )
            {
              PlayerAvatarComp::findAvatar(
                (const PlayerAvatarComp *const)(v5 + 160),
                (uint64_t)this,
                *(_QWORD *)(v5 + 64));
              if ( std::operator!=<Avatar>((const std::shared_ptr<Avatar> *)(v5 + 160), 0LL) )
              {
                v44 = std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false> *const)p_dest_scene_ptr);
                v45 = std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::operator*((const std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v5 + 160));
                Scene::delAvatarAndWeaponEntity(v44, v45);
              }
              std::shared_ptr<Avatar>::~shared_ptr((std::shared_ptr<Avatar> *const)(v5 + 160));
            }
            __gnu_cxx::__normal_iterator<unsigned long *,std::vector<unsigned long>>::operator++(&__for_begin);
          }
          v9 = 0;
        }
        std::shared_ptr<Avatar>::~shared_ptr((std::shared_ptr<Avatar> *const)(v5 + 128));
        std::vector<unsigned long>::~vector((std::vector<long unsigned int> *const)(v5 + 256));
      }
      std::vector<unsigned long>::~vector((std::vector<long unsigned int> *const)(v5 + 192));
    }
    std::shared_ptr<SceneTeam>::~shared_ptr((std::shared_ptr<SceneTeam> *const)(v5 + 96));
  }
  result = v9;
  if ( v58 == (char *)v5 )
  {
    *(_QWORD *)((v5 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8008) = 0LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8010) = 0LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8018) = 0LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8020) = 0LL;
  }
  else
  {
    *(_QWORD *)v5 = 1172321806LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8020) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 2109: range 0000000017176C3C-00000000171772DF
__int64 __fastcall PlayerAvatarComp::syncCurAvatarTeamToSceneTeam(
        PlayerAvatarComp *const this,
        uint64_t target_avatar_guid,
        proto_log::ChangeSceneTeamReason reason)
{
  unsigned __int64 v3; // r13
  __int64 v4; // rax
  _DWORD *v5; // r12
  common::milog::MiLogStream *v6; // rax
  common::milog::MiLogStream *v7; // rax
  common::milog::MiLogStream *v8; // r14
  unsigned int v9; // r14d
  unsigned __int64 *M_current; // r14
  std::vector<long unsigned int>::iterator v11; // rax
  common::milog::MiLogStream *v12; // rax
  common::milog::MiLogStream *v13; // rax
  common::milog::MiLogStream *v14; // r14
  common::milog::MiLogStream *v15; // rax
  common::milog::MiLogStream *v16; // rax
  common::milog::MiLogStream *v17; // r14
  bool v18; // r14
  common::milog::MiLogStream *v19; // rax
  common::milog::MiLogStream *v20; // rax
  __int64 result; // rax
  unsigned int val; // [rsp+2Ch] [rbp-114h] BYREF
  __gnu_cxx::__normal_iterator<long unsigned int*,std::vector<long unsigned int> > __lhs; // [rsp+30h] [rbp-110h] BYREF
  __gnu_cxx::__normal_iterator<long unsigned int*,std::vector<long unsigned int> > __rhs; // [rsp+38h] [rbp-108h] BYREF
  std::shared_ptr<Scene> p_dest_scene_ptr; // [rsp+40h] [rbp-100h] BYREF
  common::milog::MiLogStream v27; // [rsp+50h] [rbp-F0h] BYREF
  char v28[208]; // [rsp+70h] [rbp-D0h] BYREF

  v3 = (unsigned __int64)v28;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_2(160LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "3 32 8 23 target_avatar_guid:2108 64 16 14 scene_ptr:2123 96 24 13 cur_team:2110";
  *(_QWORD *)(v3 + 16) = PlayerAvatarComp::syncCurAvatarTeamToSceneTeam;
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = -218959360;
  v5[536862722] = -219021312;
  v5[536862723] = -218103808;
  v5[536862724] = -202116109;
  *(_QWORD *)(v3 + 32) = target_avatar_guid;
  PlayerAvatarComp::getCurAvatarTeamWithTempAvatar((std::vector<long unsigned int> *)(v3 + 96), this);
  if ( std::vector<unsigned long>::empty((const std::vector<long unsigned int> *const)(v3 + 96)) )
  {
    common::milog::MiLogStream::create(
      &v27,
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/player/avatar/player_avatar_comp.cpp",
      "syncCurAvatarTeamToSceneTeam",
      2113);
    v6 = common::milog::MiLogStream::operator<<<char [36],(char *[36])0>(
           &v27,
           (const char (*)[36])"cur_team empty, target_avatar_guid:");
    v7 = common::milog::MiLogStream::operator<<<unsigned long,(unsigned long *)0>(
           v6,
           (const unsigned __int64 *)(v3 + 32));
    v8 = common::milog::MiLogStream::operator<<<char [7],(char *[7])0>(v7, (const char (*)[7])", uid:");
    if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
      __asan_report_load8(&this->player_);
    val = Player::getUid(this->player_);
    common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v8, &val);
    common::milog::MiLogStream::~MiLogStream(&v27);
    v9 = -1;
    goto LABEL_24;
  }
  __rhs._M_current = std::vector<unsigned long>::end((std::vector<long unsigned int> *const)(v3 + 96))._M_current;
  M_current = std::vector<unsigned long>::end((std::vector<long unsigned int> *const)(v3 + 96))._M_current;
  v11._M_current = std::vector<unsigned long>::begin((std::vector<long unsigned int> *const)(v3 + 96))._M_current;
  __lhs._M_current = std::find<__gnu_cxx::__normal_iterator<unsigned long *,std::vector<unsigned long>>,unsigned long>(
                       v11,
                       (__gnu_cxx::__normal_iterator<long unsigned int*,std::vector<long unsigned int> >)M_current,
                       (const unsigned __int64 *)(v3 + 32))._M_current;
  if ( !__gnu_cxx::operator==<unsigned long *,std::vector<unsigned long>>(&__lhs, &__rhs) )
  {
    if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
      __asan_report_load8(&this->player_);
    Player::getSceneComp(this->player_);
    PlayerSceneComp::getCurScene((const PlayerSceneComp *const)(v3 + 64));
    if ( std::operator==<Scene>((const std::shared_ptr<Scene> *)(v3 + 64), 0LL) )
    {
      common::milog::MiLogStream::create(
        &v27,
        &common::milog::MiLogDefault::default_log_obj_,
        1u,
        "./src/player/avatar/player_avatar_comp.cpp",
        "syncCurAvatarTeamToSceneTeam",
        2126);
      v15 = common::milog::MiLogStream::operator<<<char [39],(char *[39])0>(
              &v27,
              (const char (*)[39])"getCurScene fails, target_avatar_guid:");
      v16 = common::milog::MiLogStream::operator<<<unsigned long,(unsigned long *)0>(
              v15,
              (const unsigned __int64 *)(v3 + 32));
      v17 = common::milog::MiLogStream::operator<<<char [7],(char *[7])0>(v16, (const char (*)[7])", uid:");
      if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
        __asan_report_load8(&this->player_);
    }
    else
    {
      std::shared_ptr<Scene>::shared_ptr(&p_dest_scene_ptr, (const std::shared_ptr<Scene> *)(v3 + 64));
      v18 = PlayerAvatarComp::setSceneTeamAndAddToScene(
              this,
              (const std::vector<long unsigned int> *)(v3 + 96),
              *(_QWORD *)(v3 + 32),
              &p_dest_scene_ptr,
              reason) != 0;
      std::shared_ptr<Scene>::~shared_ptr(&p_dest_scene_ptr);
      if ( !v18 )
      {
        v9 = 0;
        goto LABEL_23;
      }
      common::milog::MiLogStream::create(
        &v27,
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/player/avatar/player_avatar_comp.cpp",
        "syncCurAvatarTeamToSceneTeam",
        2131);
      v19 = common::milog::MiLogStream::operator<<<char [53],(char *[53])0>(
              &v27,
              (const char (*)[53])"setSceneTeamAndAddToScene fails, target_avatar_guid:");
      v20 = common::milog::MiLogStream::operator<<<unsigned long,(unsigned long *)0>(
              v19,
              (const unsigned __int64 *)(v3 + 32));
      v17 = common::milog::MiLogStream::operator<<<char [7],(char *[7])0>(v20, (const char (*)[7])", uid:");
      if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
        __asan_report_load8(&this->player_);
    }
    val = Player::getUid(this->player_);
    common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v17, &val);
    common::milog::MiLogStream::~MiLogStream(&v27);
    v9 = -1;
LABEL_23:
    std::shared_ptr<Scene>::~shared_ptr((std::shared_ptr<Scene> *const)(v3 + 64));
    goto LABEL_24;
  }
  common::milog::MiLogStream::create(
    &v27,
    &common::milog::MiLogDefault::default_log_obj_,
    3u,
    "./src/player/avatar/player_avatar_comp.cpp",
    "syncCurAvatarTeamToSceneTeam",
    2119);
  v12 = common::milog::MiLogStream::operator<<<char [56],(char *[56])0>(
          &v27,
          (const char (*)[56])"target avatar guid not in cur team, target_avatar_guid:");
  v13 = common::milog::MiLogStream::operator<<<unsigned long,(unsigned long *)0>(
          v12,
          (const unsigned __int64 *)(v3 + 32));
  v14 = common::milog::MiLogStream::operator<<<char [7],(char *[7])0>(v13, (const char (*)[7])", uid:");
  if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
    __asan_report_load8(&this->player_);
  val = Player::getUid(this->player_);
  common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v14, &val);
  common::milog::MiLogStream::~MiLogStream(&v27);
  v9 = -1;
LABEL_24:
  std::vector<unsigned long>::~vector((std::vector<long unsigned int> *const)(v3 + 96));
  result = v9;
  if ( v28 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8010) = 0;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8010) = -168430091;
  }
  return result;
};

// Line 2139: range 00000000171772E0-0000000017177438
AvatarTeam *__fastcall PlayerAvatarComp::findAvatarTeam(PlayerAvatarComp *const this, uint32_t team_id)
{
  unsigned __int64 v2; // rbx
  __int64 v3; // rax
  _DWORD *v4; // r12
  AvatarTeam *result; // rax
  std::_Rb_tree_iterator<std::pair<unsigned int const,AvatarTeam> >::_Self __y; // [rsp+18h] [rbp-88h] BYREF
  char v7[128]; // [rsp+20h] [rbp-80h] BYREF

  v2 = (unsigned __int64)v7;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_1(96LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "2 48 4 12 team_id:2138 64 8 7 it:2140";
  *(_QWORD *)(v2 + 16) = PlayerAvatarComp::findAvatarTeam;
  v4 = (_DWORD *)(v2 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = -234556943;
  v4[536862722] = -202116352;
  *(_DWORD *)(v2 + 48) = team_id;
  *(std::map<unsigned int,AvatarTeam>::iterator *)(v2 + 64) = std::map<unsigned int,AvatarTeam>::find(
                                                                &this->avatar_team_map_,
                                                                (const std::map<unsigned int,AvatarTeam>::key_type *)(v2 + 48));
  __y._M_node = std::map<unsigned int,AvatarTeam>::end(&this->avatar_team_map_)._M_node;
  if ( std::operator!=(
         (const std::_Rb_tree_iterator<std::pair<unsigned int const,AvatarTeam> >::_Self *)(v2 + 64),
         &__y) )
  {
    result = &std::_Rb_tree_iterator<std::pair<unsigned int const,AvatarTeam>>::operator->((const std::_Rb_tree_iterator<std::pair<unsigned int const,AvatarTeam> > *const)(v2 + 64))->second;
  }
  else
  {
    result = 0LL;
  }
  if ( v7 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8008) = 0;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8008) = -168430091;
  }
  return result;
};

// Line 2148: range 000000001717743A-000000001717799D
std::vector<long unsigned int> *__cdecl PlayerAvatarComp::getAvatarTeamWithTempAvatar(
        std::vector<long unsigned int> *retstr,
        PlayerAvatarComp *const this,
        uint32_t team_id)
{
  unsigned __int64 v3; // r13
  __int64 v4; // rax
  _DWORD *v5; // r12
  unsigned __int64 *v6; // rax
  std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v7; // rax
  unsigned __int64 v8; // rax
  std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v9; // rax
  unsigned __int64 v10; // rax
  std::set<unsigned int>::value_type __x; // [rsp+24h] [rbp-12Ch] BYREF
  std::unordered_set<long unsigned int>::iterator __for_begin; // [rsp+28h] [rbp-128h] BYREF
  std::unordered_set<long unsigned int>::iterator __for_end; // [rsp+30h] [rbp-120h] BYREF
  std::unordered_set<long unsigned int> *__for_range; // [rsp+38h] [rbp-118h]
  const AvatarTeam *avatar_team_ptr; // [rsp+40h] [rbp-110h]
  const std::vector<long unsigned int> *__for_range_0; // [rsp+48h] [rbp-108h]
  std::unordered_set<long unsigned int> *__for_range_1; // [rsp+50h] [rbp-100h]
  unsigned __int64 avatar_guid; // [rsp+58h] [rbp-F8h]
  char v21[240]; // [rsp+60h] [rbp-F0h] BYREF

  v3 = (unsigned __int64)v21;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_2(192LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "3 48 8 16 avatar_guid:2183 80 16 15 avatar_ptr:2167 112 48 23 temp_avatar_id_set:2150";
  *(_QWORD *)(v3 + 16) = PlayerAvatarComp::getAvatarTeamWithTempAvatar;
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = 61937;
  v5[536862721] = -234881024;
  v5[536862722] = 62194;
  v5[536862723] = 62194;
  v5[536862725] = -202116109;
  std::set<unsigned int>::set((std::set<unsigned int> *const)(v3 + 112));
  __for_range = &this->temp_avatar_guid_set_;
  __for_begin._M_cur = std::unordered_set<unsigned long>::begin(&this->temp_avatar_guid_set_)._M_cur;
  __for_end._M_cur = std::unordered_set<unsigned long>::end(&this->temp_avatar_guid_set_)._M_cur;
  while ( std::__detail::operator!=<unsigned long,false>(&__for_begin, &__for_end) )
  {
    v6 = (unsigned __int64 *)std::__detail::_Node_iterator<unsigned long,true,false>::operator*(&__for_begin);
    if ( *(_BYTE *)(((unsigned __int64)v6 >> 3) + 0x7FFF8000) )
      v6 = (unsigned __int64 *)__asan_report_load8(v6);
    avatar_guid = *v6;
    PlayerAvatarComp::findAvatar((const PlayerAvatarComp *const)(v3 + 80), (uint64_t)this, avatar_guid);
    if ( std::operator!=<Avatar>((const std::shared_ptr<Avatar> *)(v3 + 80), 0LL) )
    {
      v7 = std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 80));
      __x = Avatar::getAvatarId(v7);
      std::set<unsigned int>::insert((std::set<unsigned int> *const)(v3 + 112), &__x);
    }
    std::shared_ptr<Avatar>::~shared_ptr((std::shared_ptr<Avatar> *const)(v3 + 80));
    std::__detail::_Node_iterator<unsigned long,true,false>::operator++(&__for_begin);
  }
  std::vector<unsigned long>::vector(retstr);
  avatar_team_ptr = PlayerAvatarComp::findAvatarTeam(this, team_id);
  if ( avatar_team_ptr )
  {
    __for_range_0 = AvatarTeam::getAvatarVec(avatar_team_ptr);
    __for_begin._M_cur = (std::__detail::_Node_iterator_base<long unsigned int,false>::__node_type *)std::vector<unsigned long>::begin(__for_range_0)._M_current;
    __for_end._M_cur = (std::__detail::_Node_iterator_base<long unsigned int,false>::__node_type *)std::vector<unsigned long>::end(__for_range_0)._M_current;
    while ( __gnu_cxx::operator!=<unsigned long const*,std::vector<unsigned long>>(
              (const __gnu_cxx::__normal_iterator<long unsigned int const*,std::vector<long unsigned int> > *)&__for_begin,
              (const __gnu_cxx::__normal_iterator<long unsigned int const*,std::vector<long unsigned int> > *)&__for_end) )
    {
      v8 = (unsigned __int64)__gnu_cxx::__normal_iterator<unsigned long const*,std::vector<unsigned long>>::operator*((const __gnu_cxx::__normal_iterator<long unsigned int const*,std::vector<long unsigned int> > *const)&__for_begin);
      if ( *(_BYTE *)((v8 >> 3) + 0x7FFF8000) )
        v8 = __asan_report_load8(v8);
      *(_QWORD *)(v3 + 48) = *(_QWORD *)v8;
      PlayerAvatarComp::findAvatar((const PlayerAvatarComp *const)(v3 + 80), (uint64_t)this, *(_QWORD *)(v3 + 48));
      if ( !std::operator==<Avatar>((const std::shared_ptr<Avatar> *)(v3 + 80), 0LL)
        && !common::tools::MiscUtils::isContains<std::unordered_set<unsigned long>,unsigned long>(
              &this->temp_avatar_guid_set_,
              (const unsigned __int64 *)(v3 + 48)) )
      {
        v9 = std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 80));
        __x = Avatar::getAvatarId(v9);
        if ( !common::tools::MiscUtils::isContains<std::set<unsigned int>,unsigned int>(
                (std::set<unsigned int> *)(v3 + 112),
                &__x) )
          std::vector<unsigned long>::push_back(retstr, (const std::vector<long unsigned int>::value_type *)(v3 + 48));
      }
      std::shared_ptr<Avatar>::~shared_ptr((std::shared_ptr<Avatar> *const)(v3 + 80));
      __gnu_cxx::__normal_iterator<unsigned long const*,std::vector<unsigned long>>::operator++((__gnu_cxx::__normal_iterator<long unsigned int const*,std::vector<long unsigned int> > *const)&__for_begin);
    }
  }
  __for_range_1 = &this->temp_avatar_guid_set_;
  __for_begin._M_cur = std::unordered_set<unsigned long>::begin(&this->temp_avatar_guid_set_)._M_cur;
  __for_end._M_cur = std::unordered_set<unsigned long>::end(__for_range_1)._M_cur;
  while ( std::__detail::operator!=<unsigned long,false>(&__for_begin, &__for_end) )
  {
    v10 = (unsigned __int64)std::__detail::_Node_iterator<unsigned long,true,false>::operator*(&__for_begin);
    if ( *(_BYTE *)((v10 >> 3) + 0x7FFF8000) )
      v10 = __asan_report_load8(v10);
    *(_QWORD *)(v3 + 48) = *(_QWORD *)v10;
    std::vector<unsigned long>::push_back(retstr, (const std::vector<long unsigned int>::value_type *)(v3 + 48));
    std::__detail::_Node_iterator<unsigned long,true,false>::operator++(&__for_begin);
  }
  std::set<unsigned int>::~set((std::set<unsigned int> *const)(v3 + 112));
  if ( v21 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8014) = 0;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return retstr;
};

// Line 2191: range 000000001717799E-0000000017177DC1
void __fastcall PlayerAvatarComp::notifyAvatarTeam(const PlayerAvatarComp *const this, uint32_t team_id)
{
  unsigned __int64 v2; // r12
  __int64 v3; // rax
  _DWORD *v4; // r13
  std::__shared_ptr_access<proto::AvatarTeamUpdateNotify,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v5; // rax
  proto::AvatarTeam *v6; // r14
  std::_Rb_tree_const_iterator<std::pair<unsigned int const,AvatarTeam> >::pointer v7; // rax
  const std::string *v8; // rax
  std::_Rb_tree_const_iterator<std::pair<unsigned int const,AvatarTeam> >::pointer v9; // rax
  unsigned __int64 *v10; // rax
  proto::AvatarTeam *v11; // rax
  unsigned __int64 *v12; // rax
  std::__shared_ptr_access<proto::AvatarTeamUpdateNotify,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v13; // rax
  Player *player; // r14
  std::vector<long unsigned int>::const_iterator __for_begin; // [rsp+18h] [rbp-F8h] BYREF
  std::vector<long unsigned int>::const_iterator __for_end; // [rsp+20h] [rbp-F0h] BYREF
  google::protobuf::Map<unsigned int,proto::AvatarTeam> *avatar_team_map; // [rsp+28h] [rbp-E8h]
  const std::vector<long unsigned int> *__for_range; // [rsp+30h] [rbp-E0h]
  unsigned __int64 guid; // [rsp+38h] [rbp-D8h]
  const std::unordered_set<long unsigned int> *__for_range_0; // [rsp+40h] [rbp-D0h]
  unsigned __int64 guid_0; // [rsp+48h] [rbp-C8h]
  std::shared_ptr<proto::AvatarTeamUpdateNotify> __r; // [rsp+50h] [rbp-C0h] BYREF
  char v23[176]; // [rsp+60h] [rbp-B0h] BYREF

  v2 = (unsigned __int64)v23;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_1(128LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "3 48 4 12 team_id:2190 64 8 7 it:2193 96 16 15 notify_ptr:2192";
  *(_QWORD *)(v2 + 16) = PlayerAvatarComp::notifyAvatarTeam;
  v4 = (_DWORD *)(v2 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = -234556943;
  v4[536862722] = -218959360;
  v4[536862723] = -202178560;
  *(_DWORD *)(v2 + 48) = team_id;
  common::tools::perf::make_shared<proto::AvatarTeamUpdateNotify>();
  *(std::map<unsigned int,AvatarTeam>::const_iterator *)(v2 + 64) = std::map<unsigned int,AvatarTeam>::find(
                                                                      &this->avatar_team_map_,
                                                                      (const std::map<unsigned int,AvatarTeam>::key_type *)(v2 + 48));
  __for_end._M_current = (const unsigned __int64 *)std::map<unsigned int,AvatarTeam>::end(&this->avatar_team_map_)._M_node;
  if ( std::operator!=(
         (const std::_Rb_tree_const_iterator<std::pair<unsigned int const,AvatarTeam> >::_Self *)(v2 + 64),
         (const std::_Rb_tree_const_iterator<std::pair<unsigned int const,AvatarTeam> >::_Self *)&__for_end) )
  {
    v5 = std::__shared_ptr_access<proto::AvatarTeamUpdateNotify,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<proto::AvatarTeamUpdateNotify,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 96));
    avatar_team_map = proto::AvatarTeamUpdateNotify::mutable_avatar_team_map(v5);
    v6 = google::protobuf::Map<unsigned int,proto::AvatarTeam>::operator[](
           avatar_team_map,
           (const google::protobuf::Map<unsigned int,proto::AvatarTeam>::key_type *)(v2 + 48));
    v7 = std::_Rb_tree_const_iterator<std::pair<unsigned int const,AvatarTeam>>::operator->((const std::_Rb_tree_const_iterator<std::pair<unsigned int const,AvatarTeam> > *const)(v2 + 64));
    v8 = AvatarTeam::getTeamName[abi:cxx11](&v7->second);
    proto::AvatarTeam::set_team_name(v6, v8);
    v9 = std::_Rb_tree_const_iterator<std::pair<unsigned int const,AvatarTeam>>::operator->((const std::_Rb_tree_const_iterator<std::pair<unsigned int const,AvatarTeam> > *const)(v2 + 64));
    __for_range = AvatarTeam::getAvatarVec(&v9->second);
    __for_begin._M_current = std::vector<unsigned long>::begin(__for_range)._M_current;
    __for_end._M_current = std::vector<unsigned long>::end(__for_range)._M_current;
    while ( __gnu_cxx::operator!=<unsigned long const*,std::vector<unsigned long>>(&__for_begin, &__for_end) )
    {
      v10 = (unsigned __int64 *)__gnu_cxx::__normal_iterator<unsigned long const*,std::vector<unsigned long>>::operator*(&__for_begin);
      if ( *(_BYTE *)(((unsigned __int64)v10 >> 3) + 0x7FFF8000) )
        v10 = (unsigned __int64 *)__asan_report_load8(v10);
      guid = *v10;
      v11 = google::protobuf::Map<unsigned int,proto::AvatarTeam>::operator[](
              avatar_team_map,
              (const google::protobuf::Map<unsigned int,proto::AvatarTeam>::key_type *)(v2 + 48));
      proto::AvatarTeam::add_avatar_guid_list(v11, guid);
      __gnu_cxx::__normal_iterator<unsigned long const*,std::vector<unsigned long>>::operator++(&__for_begin);
    }
  }
  __for_range_0 = &this->temp_avatar_guid_set_;
  __for_begin._M_current = (const unsigned __int64 *)std::unordered_set<unsigned long>::begin(&this->temp_avatar_guid_set_)._M_cur;
  __for_end._M_current = (const unsigned __int64 *)std::unordered_set<unsigned long>::end(__for_range_0)._M_cur;
  while ( std::__detail::operator!=<unsigned long,false>(
            (const std::__detail::_Node_iterator_base<long unsigned int,false> *)&__for_begin,
            (const std::__detail::_Node_iterator_base<long unsigned int,false> *)&__for_end) )
  {
    v12 = (unsigned __int64 *)std::__detail::_Node_const_iterator<unsigned long,true,false>::operator*((const std::__detail::_Node_const_iterator<long unsigned int,true,false> *const)&__for_begin);
    if ( *(_BYTE *)(((unsigned __int64)v12 >> 3) + 0x7FFF8000) )
      v12 = (unsigned __int64 *)__asan_report_load8(v12);
    guid_0 = *v12;
    v13 = std::__shared_ptr_access<proto::AvatarTeamUpdateNotify,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<proto::AvatarTeamUpdateNotify,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 96));
    proto::AvatarTeamUpdateNotify::add_temp_avatar_guid_list(v13, guid_0);
    std::__detail::_Node_const_iterator<unsigned long,true,false>::operator++((std::__detail::_Node_const_iterator<long unsigned int,true,false> *const)&__for_begin);
  }
  if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
    __asan_report_load8(&this->player_);
  player = this->player_;
  std::dynamic_pointer_cast<google::protobuf::Message const,proto::AvatarTeamUpdateNotify>(&__r);
  Player::sendMessage(player, (common::minet::ConstMessagePtr *)&__r, 0LL);
  std::shared_ptr<google::protobuf::Message const>::~shared_ptr((std::shared_ptr<const google::protobuf::Message> *const)&__r);
  std::shared_ptr<proto::AvatarTeamUpdateNotify>::~shared_ptr((std::shared_ptr<proto::AvatarTeamUpdateNotify> *const)(v2 + 96));
  if ( v23 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
};

// Line 2212: range 0000000017177DC2-0000000017177DE1
void __cdecl PlayerAvatarComp::notifyTempAvatarTeam(const PlayerAvatarComp *const this)
{
  PlayerAvatarComp::notifyAvatarTeam(this, 0);
};

// Line 2219: range 0000000017177DE2-0000000017178044
std::vector<long unsigned int> *__cdecl PlayerAvatarComp::getMyAvatarTeamInSceneTeam(
        std::vector<long unsigned int> *retstr,
        PlayerAvatarComp *const this)
{
  unsigned __int64 v2; // rbx
  __int64 v3; // rax
  unsigned __int64 v4; // r12
  std::__shared_ptr_access<SceneTeam,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v5; // r14
  uint32_t Uid; // esi
  char v8[112]; // [rsp+10h] [rbp-70h] BYREF

  v2 = (unsigned __int64)v8;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_0(64LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "1 32 16 19 scene_team_ptr:2220";
  *(_QWORD *)(v2 + 16) = PlayerAvatarComp::getMyAvatarTeamInSceneTeam;
  v4 = v2 >> 3;
  *(_DWORD *)(v4 + 2147450880) = -235802127;
  *(_DWORD *)(v4 + 2147450884) = -202178560;
  PlayerAvatarComp::findSceneTeam((PlayerAvatarComp *const)(v2 + 32));
  if ( std::operator!=<SceneTeam>((const std::shared_ptr<SceneTeam> *)(v2 + 32), 0LL) )
  {
    v5 = std::__shared_ptr_access<SceneTeam,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<SceneTeam,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 32));
    if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
      __asan_report_load8(&this->player_);
    Uid = Player::getUid(this->player_);
    if ( *(char *)(((unsigned __int64)retstr >> 3) + 0x7FFF8000) < 0
      || *(_BYTE *)((((unsigned __int64)&retstr->_M_impl._M_end_of_storage + 7) >> 3) + 0x7FFF8000) != 0
      && (((unsigned __int8)retstr + 23) & 7) >= *(_BYTE *)((((unsigned __int64)&retstr->_M_impl._M_end_of_storage + 7) >> 3)
                                                          + 0x7FFF8000) )
    {
      Uid = 24;
      __asan_report_store_n(retstr, 24LL);
    }
    SceneTeam::getAvatarGuidVec(retstr, v5, Uid);
  }
  else
  {
    if ( *(char *)(((unsigned __int64)retstr >> 3) + 0x7FFF8000) < 0
      || *(_BYTE *)((((unsigned __int64)&retstr->_M_impl._M_end_of_storage + 7) >> 3) + 0x7FFF8000) != 0
      && (((unsigned __int8)retstr + 23) & 7) >= *(_BYTE *)((((unsigned __int64)&retstr->_M_impl._M_end_of_storage + 7) >> 3)
                                                          + 0x7FFF8000) )
    {
      __asan_report_store_n(retstr, 24LL);
    }
    retstr->_M_impl._M_start = 0LL;
    retstr->_M_impl._M_finish = 0LL;
    retstr->_M_impl._M_end_of_storage = 0LL;
    std::vector<unsigned long>::vector(retstr);
  }
  std::shared_ptr<SceneTeam>::~shared_ptr((std::shared_ptr<SceneTeam> *const)(v2 + 32));
  if ( v8 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return retstr;
};

// Line 2230: range 0000000017178046-00000000171787DB
__int64 __fastcall PlayerAvatarComp::removeCurTeamAvatar(
        PlayerAvatarComp *const this,
        uint64_t guid,
        unsigned __int64 is_removed)
{
  unsigned __int64 v3; // r13
  __int64 v4; // rax
  _DWORD *v5; // r12
  unsigned __int64 v6; // rsi
  __int64 v7; // rdx
  common::milog::MiLogStream *v8; // rbx
  unsigned int v9; // r14d
  std::vector<long unsigned int> *AvatarVec; // rax
  unsigned __int64 *M_current; // r14
  std::vector<long unsigned int>::iterator v12; // rax
  std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v13; // rax
  unsigned __int64 *v14; // rax
  std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v15; // rax
  uint64_t v16; // rax
  __int64 v17; // rcx
  common::milog::MiLogStream *v18; // r14
  common::milog::MiLogStream *v19; // rax
  common::milog::MiLogStream *v20; // rax
  common::milog::MiLogStream *v21; // rax
  common::milog::MiLogStream *v22; // rax
  unsigned __int64 v23; // rsi
  __int64 v24; // rdx
  __int64 result; // rax
  unsigned int val; // [rsp+24h] [rbp-13Ch] BYREF
  std::vector<long unsigned int>::iterator __for_begin; // [rsp+28h] [rbp-138h] BYREF
  uint64_t new_cur_avatar_guid; // [rsp+30h] [rbp-130h]
  AvatarTeam *cur_avatar_team_ptr; // [rsp+38h] [rbp-128h]
  std::vector<long unsigned int> *__for_range; // [rsp+40h] [rbp-120h]
  unsigned __int64 use_guid; // [rsp+48h] [rbp-118h]
  common::milog::MiLogStream v33; // [rsp+50h] [rbp-110h] BYREF
  char v34[240]; // [rsp+70h] [rbp-F0h] BYREF

  v3 = (unsigned __int64)v34;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_2(192LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "4 32 8 7 it:2244 64 8 23 target_avatar_guid:2271 96 8 9 guid:2229 128 24 23 temp_team_guid_vec:2243";
  *(_QWORD *)(v3 + 16) = PlayerAvatarComp::removeCurTeamAvatar;
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = -218959360;
  v5[536862722] = -218959360;
  v5[536862723] = -218959360;
  v5[536862724] = -218103808;
  v5[536862725] = -202116109;
  *(_QWORD *)(v3 + 96) = guid;
  v6 = is_removed & 7;
  v7 = (*(_BYTE *)((is_removed >> 3) + 0x7FFF8000) != 0) & (unsigned __int8)((char)v6 >= *(_BYTE *)((is_removed >> 3)
                                                                                                  + 0x7FFF8000));
  if ( (_BYTE)v7 )
    __asan_report_store1(is_removed, v6, v7);
  *(_BYTE *)is_removed = 0;
  if ( std::operator==<Avatar>(&this->cur_avatar_ptr_, 0LL) )
  {
    common::milog::MiLogStream::create(
      &v33,
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/player/avatar/player_avatar_comp.cpp",
      "removeCurTeamAvatar",
      2234);
    v8 = common::milog::MiLogStream::operator<<<char [33],(char *[33])0>(
           &v33,
           (const char (*)[33])"cur_avatar_ptr null player_uid: ");
    if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
      __asan_report_load8(&this->player_);
LABEL_9:
    val = Player::getUid(this->player_);
    common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v8, &val);
    common::milog::MiLogStream::~MiLogStream(&v33);
    v9 = -1;
    goto LABEL_41;
  }
  cur_avatar_team_ptr = PlayerAvatarComp::findCurAvatarTeam(this);
  if ( !cur_avatar_team_ptr )
  {
    common::milog::MiLogStream::create(
      &v33,
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/player/avatar/player_avatar_comp.cpp",
      "removeCurTeamAvatar",
      2240);
    v8 = common::milog::MiLogStream::operator<<<char [39],(char *[39])0>(
           &v33,
           (const char (*)[39])"find cur avatar team null player_uid: ");
    if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
      __asan_report_load8(&this->player_);
    goto LABEL_9;
  }
  AvatarVec = AvatarTeam::getAvatarVec(cur_avatar_team_ptr);
  std::vector<unsigned long>::vector((std::vector<long unsigned int> *const)(v3 + 128), AvatarVec);
  M_current = std::vector<unsigned long>::end((std::vector<long unsigned int> *const)(v3 + 128))._M_current;
  v12._M_current = std::vector<unsigned long>::begin((std::vector<long unsigned int> *const)(v3 + 128))._M_current;
  *(__gnu_cxx::__normal_iterator<long unsigned int*,std::vector<long unsigned int> > *)(v3 + 32) = std::find<__gnu_cxx::__normal_iterator<unsigned long *,std::vector<unsigned long>>,unsigned long>(
                                                                                                     v12,
                                                                                                     (__gnu_cxx::__normal_iterator<long unsigned int*,std::vector<long unsigned int> >)M_current,
                                                                                                     (const unsigned __int64 *)(v3 + 96));
  *(std::vector<long unsigned int>::iterator *)(v3 + 64) = std::vector<unsigned long>::end((std::vector<long unsigned int> *const)(v3 + 128));
  if ( __gnu_cxx::operator==<unsigned long *,std::vector<unsigned long>>(
         (const __gnu_cxx::__normal_iterator<long unsigned int*,std::vector<long unsigned int> > *)(v3 + 32),
         (const __gnu_cxx::__normal_iterator<long unsigned int*,std::vector<long unsigned int> > *)(v3 + 64)) )
  {
    v9 = 0;
  }
  else
  {
    __gnu_cxx::__normal_iterator<unsigned long const*,std::vector<unsigned long>>::__normal_iterator<unsigned long *>(
      (__gnu_cxx::__normal_iterator<long unsigned int const*,std::vector<long unsigned int> > *const)(v3 + 64),
      (const __gnu_cxx::__normal_iterator<long unsigned int*,std::vector<long unsigned int> > *)(v3 + 32));
    std::vector<unsigned long>::erase(
      (std::vector<long unsigned int> *const)(v3 + 128),
      *(std::vector<long unsigned int>::const_iterator *)(v3 + 64));
    if ( std::vector<unsigned long>::empty((const std::vector<long unsigned int> *const)(v3 + 128)) )
      std::vector<unsigned long>::emplace_back<unsigned long &>(
        (std::vector<long unsigned int> *const)(v3 + 128),
        &this->choose_avatar_guid_,
        &this->choose_avatar_guid_);
    new_cur_avatar_guid = 0LL;
    v13 = std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false> *const)&this->cur_avatar_ptr_);
    if ( Avatar::getGuid(v13) != *(_QWORD *)(v3 + 96) )
      goto LABEL_28;
    __for_range = (std::vector<long unsigned int> *)(v3 + 128);
    __for_begin._M_current = std::vector<unsigned long>::begin((std::vector<long unsigned int> *const)(v3 + 128))._M_current;
    *(std::vector<long unsigned int>::iterator *)(v3 + 64) = std::vector<unsigned long>::end((std::vector<long unsigned int> *const)(v3 + 128));
    while ( __gnu_cxx::operator!=<unsigned long *,std::vector<unsigned long>>(
              &__for_begin,
              (const __gnu_cxx::__normal_iterator<long unsigned int*,std::vector<long unsigned int> > *)(v3 + 64)) )
    {
      v14 = __gnu_cxx::__normal_iterator<unsigned long *,std::vector<unsigned long>>::operator*(&__for_begin);
      if ( *(_BYTE *)(((unsigned __int64)v14 >> 3) + 0x7FFF8000) )
        v14 = (unsigned __int64 *)__asan_report_load8(v14);
      use_guid = *v14;
      if ( !(unsigned int)PlayerAvatarComp::checkChangeCurAvatar(this, use_guid) )
      {
        new_cur_avatar_guid = use_guid;
        break;
      }
      __gnu_cxx::__normal_iterator<unsigned long *,std::vector<unsigned long>>::operator++(&__for_begin);
    }
    if ( new_cur_avatar_guid )
    {
LABEL_28:
      if ( new_cur_avatar_guid )
      {
        v16 = new_cur_avatar_guid;
      }
      else
      {
        v15 = std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false> *const)&this->cur_avatar_ptr_);
        v16 = Avatar::getGuid(v15);
      }
      *(_QWORD *)(v3 + 64) = v16;
      v17 = *(_QWORD *)(v3 + 64);
      if ( *(_BYTE *)(((unsigned __int64)&this->cur_avatar_team_id_ >> 3) + 0x7FFF8000) != 0
        && *(_BYTE *)(((unsigned __int64)&this->cur_avatar_team_id_ >> 3) + 0x7FFF8000) <= 3 )
      {
        __asan_report_load4(&this->cur_avatar_team_id_);
      }
      if ( (unsigned int)PlayerAvatarComp::setUpAvatarTeam(
                           this,
                           this->cur_avatar_team_id_,
                           (const std::vector<long unsigned int> *)(v3 + 128),
                           v17) )
      {
        common::milog::MiLogStream::create(
          &v33,
          &common::milog::MiLogDefault::default_log_obj_,
          3u,
          "./src/player/avatar/player_avatar_comp.cpp",
          "removeCurTeamAvatar",
          2274);
        v18 = common::milog::MiLogStream::operator<<<char [30],(char *[30])0>(
                &v33,
                (const char (*)[30])" set team failed player_uid: ");
        if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
          __asan_report_load8(&this->player_);
        val = Player::getUid(this->player_);
        v19 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v18, &val);
        v20 = common::milog::MiLogStream::operator<<<char [11],(char *[11])0>(v19, (const char (*)[11])" team_id: ");
        v21 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v20, &this->cur_avatar_team_id_);
        v22 = common::milog::MiLogStream::operator<<<char [15],(char *[15])0>(v21, (const char (*)[15])" target_guid: ");
        common::milog::MiLogStream::operator<<<unsigned long,(unsigned long *)0>(
          v22,
          (const unsigned __int64 *)(v3 + 64));
        common::milog::MiLogStream::~MiLogStream(&v33);
        v9 = -1;
      }
      else
      {
        v23 = is_removed & 7;
        v24 = (*(_BYTE *)((is_removed >> 3) + 0x7FFF8000) != 0) & (unsigned __int8)((char)v23 >= *(_BYTE *)((is_removed >> 3) + 0x7FFF8000));
        if ( (_BYTE)v24 )
          __asan_report_store1(is_removed, v23, v24);
        *(_BYTE *)is_removed = 1;
        v9 = 0;
      }
    }
    else
    {
      v9 = 127;
    }
  }
  std::vector<unsigned long>::~vector((std::vector<long unsigned int> *const)(v3 + 128));
LABEL_41:
  result = v9;
  if ( v34 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8010) = 0LL;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 2285: range 00000000171787DC-000000001717899C
AvatarPtr __cdecl PlayerAvatarComp::getMyFirstAvatarInSceneTeam(PlayerAvatarComp *const this)
{
  PlayerAvatarComp *v1; // rsi
  unsigned __int64 v2; // rbx
  __int64 v3; // rax
  _DWORD *v4; // r12
  unsigned __int64 v5; // rax
  __int64 v6; // rdx
  AvatarPtr result; // rax
  char v8[128]; // [rsp+10h] [rbp-80h] BYREF

  v2 = (unsigned __int64)v8;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_1(96LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "1 32 24 20 avatar_team_vec:2286";
  *(_QWORD *)(v2 + 16) = PlayerAvatarComp::getMyFirstAvatarInSceneTeam;
  v4 = (_DWORD *)(v2 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = -218103808;
  v4[536862722] = -202116109;
  PlayerAvatarComp::getMyAvatarTeamInSceneTeam((std::vector<long unsigned int> *)(v2 + 32), v1);
  if ( std::vector<unsigned long>::empty((const std::vector<long unsigned int> *const)(v2 + 32)) )
  {
    std::shared_ptr<Avatar>::shared_ptr((std::shared_ptr<Avatar> *const)this, 0LL);
  }
  else
  {
    v5 = (unsigned __int64)std::vector<unsigned long>::operator[]((std::vector<long unsigned int> *const)(v2 + 32), 0LL);
    if ( *(_BYTE *)((v5 >> 3) + 0x7FFF8000) )
      v5 = __asan_report_load8(v5);
    v6 = *(_QWORD *)v5;
    if ( *(_WORD *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
      __asan_report_store16(this);
    PlayerAvatarComp::findAvatar(this, (uint64_t)v1, v6);
  }
  std::vector<unsigned long>::~vector((std::vector<long unsigned int> *const)(v2 + 32));
  if ( v8 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8008) = 0;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8008) = -168430091;
  }
  result._M_ptr = (std::__shared_ptr<Avatar,(__gnu_cxx::_Lock_policy)2>::element_type *)this;
  return result;
};

// Line 2297: range 0000000017178A5C-00000000171790D7
int32_t __cdecl PlayerAvatarComp::onAvatarDie(
        PlayerAvatarComp *const this,
        ChangeHpContext *context,
        proto::PlayerDieType die_type,
        uint32_t murderer_entity_id,
        Avatar *avatar)
{
  unsigned __int64 v5; // r13
  __int64 v6; // rax
  _DWORD *v7; // r12
  common::milog::MiLogStream *v8; // rdx
  int32_t v9; // r14d
  __int64 v10; // rsi
  __int64 v11; // rdx
  char *v12; // rsi
  std::__shared_ptr_access<Creature,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v13; // rax
  uint32_t EntityId; // ecx
  char v15; // dl
  __int64 v16; // rdx
  __int64 Now; // rsi
  PlayerSceneComp *SceneComp; // r14
  const std::shared_ptr<Group> *v19; // rax
  Group *v20; // rax
  ChallengeComp *ChallengeComp; // rcx
  Scene *v22; // rax
  SceneMultistagePlayComp *MultistagePlayComp; // r14
  uint32_t Uid; // eax
  Scene *v25; // rax
  SceneGalleryComp *GalleryComp; // rcx
  int32_t result; // eax
  std::set<std::shared_ptr<Group>,std::owner_less<std::shared_ptr<Group> >,std::allocator<std::shared_ptr<Group> > >::iterator __for_begin; // [rsp+28h] [rbp-108h] BYREF
  std::set<std::shared_ptr<Group>,std::owner_less<std::shared_ptr<Group> >,std::allocator<std::shared_ptr<Group> > >::iterator __for_end; // [rsp+30h] [rbp-100h] BYREF
  std::set<std::shared_ptr<Group>,std::owner_less<std::shared_ptr<Group> >,std::allocator<std::shared_ptr<Group> > > *__for_range; // [rsp+38h] [rbp-F8h]
  common::milog::MiLogStream v35; // [rsp+40h] [rbp-F0h] BYREF
  char v36[208]; // [rsp+60h] [rbp-D0h] BYREF

  v5 = (unsigned __int64)v36;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v6 = __asan_stack_malloc_2(160LL);
    if ( v6 )
      v5 = v6;
  }
  *(_QWORD *)v5 = 1102416563LL;
  *(_QWORD *)(v5 + 8) = "2 48 16 18 cur_scene_ptr:2331 80 48 18 group_ptr_set:2316";
  *(_QWORD *)(v5 + 16) = PlayerAvatarComp::onAvatarDie;
  v7 = (_DWORD *)(v5 >> 3);
  v7[536862720] = -235802127;
  v7[536862721] = 61937;
  v7[536862722] = 62194;
  v7[536862724] = -202116109;
  if ( Creature::getLifeState(avatar) == LIFE_DEAD )
  {
    v10 = (((_BYTE)this + 76) & 7u) + 3;
    v11 = (*(_BYTE *)(((unsigned __int64)&this->die_type_ >> 3) + 0x7FFF8000) != 0) & (unsigned __int8)((char)((((_BYTE)this + 76) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&this->die_type_ >> 3) + 0x7FFF8000));
    if ( (_BYTE)v11 )
      __asan_report_store4(&this->die_type_, v10, v11);
    this->die_type_ = die_type;
    if ( *(_BYTE *)(((unsigned __int64)&this->murderer_entity_id_ >> 3) + 0x7FFF8000) != 0
      && *(_BYTE *)(((unsigned __int64)&this->murderer_entity_id_ >> 3) + 0x7FFF8000) <= 3 )
    {
      __asan_report_store4(&this->murderer_entity_id_, v10, &this->murderer_entity_id_);
    }
    this->murderer_entity_id_ = murderer_entity_id;
    if ( std::operator!=<Creature>(0LL, &context->attacker_ptr) )
    {
      std::__shared_ptr_access<Creature,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Creature,(__gnu_cxx::_Lock_policy)2,false,false> *const)&context->attacker_ptr);
      Creature::findTopOwnerOrSelf((Creature *const)(v5 + 48));
      v12 = (char *)(v5 + 48);
      if ( std::operator!=<Creature>(0LL, (const std::shared_ptr<Creature> *)(v5 + 48)) )
      {
        v13 = std::__shared_ptr_access<Creature,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Creature,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v5 + 48));
        EntityId = Entity::getEntityId((const Entity *const)v13);
        v15 = *(_BYTE *)(((unsigned __int64)&this->murderer_top_owner_entity_id_ >> 3) + 0x7FFF8000);
        LOBYTE(v12) = v15 != 0;
        v16 = (v15 != 0) & (unsigned __int8)((char)((((_BYTE)this - 60) & 7) + 3) >= v15);
        if ( (_BYTE)v16 )
          __asan_report_store4(&this->murderer_top_owner_entity_id_, v12, v16);
        this->murderer_top_owner_entity_id_ = EntityId;
      }
      std::shared_ptr<Creature>::~shared_ptr((std::shared_ptr<Creature> *const)(v5 + 48));
    }
    Now = (unsigned int)common::tools::TimeUtils::getNow();
    if ( *(_BYTE *)(((unsigned __int64)&this->last_avatar_die_time_ >> 3) + 0x7FFF8000) != 0
      && *(_BYTE *)(((unsigned __int64)&this->last_avatar_die_time_ >> 3) + 0x7FFF8000) <= 3 )
    {
      __asan_report_store4(&this->last_avatar_die_time_, Now, &this->last_avatar_die_time_);
    }
    this->last_avatar_die_time_ = Now;
    std::set<std::shared_ptr<Group>,std::owner_less<std::shared_ptr<Group>>,std::allocator<std::shared_ptr<Group>>>::set((std::set<std::shared_ptr<Group>,std::owner_less<std::shared_ptr<Group> >,std::allocator<std::shared_ptr<Group> > > *const)(v5 + 80));
    if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
      __asan_report_load8(&this->player_);
    SceneComp = Player::getSceneComp(this->player_);
    std::function<ForeachPolicy ()(Challenge &)>::function<PlayerAvatarComp::onAvatarDie(ChangeHpContext &,proto::PlayerDieType,unsigned int,Avatar &)::{lambda(Challenge &)#1},void,void>(
      (std::function<ForeachPolicy(Challenge&)> *const)&v35,
      (PlayerAvatarComp::onAvatarDie::<lambda(Challenge&)>)(v5 + 80));
    PlayerSceneComp::foreachChallenge(SceneComp, (std::function<ForeachPolicy(Challenge&)> *)&v35);
    std::function<ForeachPolicy ()(Challenge &)>::~function((std::function<ForeachPolicy(Challenge&)> *const)&v35);
    __for_range = (std::set<std::shared_ptr<Group>,std::owner_less<std::shared_ptr<Group> >,std::allocator<std::shared_ptr<Group> > > *)(v5 + 80);
    __for_begin._M_node = std::set<std::shared_ptr<Group>,std::owner_less<std::shared_ptr<Group>>,std::allocator<std::shared_ptr<Group>>>::begin((const std::set<std::shared_ptr<Group>,std::owner_less<std::shared_ptr<Group> >,std::allocator<std::shared_ptr<Group> > > *const)(v5 + 80))._M_node;
    __for_end._M_node = std::set<std::shared_ptr<Group>,std::owner_less<std::shared_ptr<Group>>,std::allocator<std::shared_ptr<Group>>>::end((const std::set<std::shared_ptr<Group>,std::owner_less<std::shared_ptr<Group> >,std::allocator<std::shared_ptr<Group> > > *const)(v5 + 80))._M_node;
    while ( std::operator!=(&__for_begin, &__for_end) )
    {
      v19 = std::_Rb_tree_const_iterator<std::shared_ptr<Group>>::operator*(&__for_begin);
      std::shared_ptr<Group>::shared_ptr((std::shared_ptr<Group> *const)(v5 + 48), v19);
      if ( std::operator!=<Group>((const std::shared_ptr<Group> *)(v5 + 48), 0LL) )
      {
        v20 = std::__shared_ptr_access<Group,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Group,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v5 + 48));
        ChallengeComp = Group::getChallengeComp(v20);
        ChallengeComp::onAvatarDie(ChallengeComp, context, avatar);
      }
      std::shared_ptr<Group>::~shared_ptr((std::shared_ptr<Group> *const)(v5 + 48));
      std::_Rb_tree_const_iterator<std::shared_ptr<Group>>::operator++(&__for_begin);
    }
    if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
      __asan_report_load8(&this->player_);
    Player::getSceneComp(this->player_);
    PlayerSceneComp::getCurScene((const PlayerSceneComp *const)(v5 + 48));
    if ( std::operator!=<Scene>((const std::shared_ptr<Scene> *)(v5 + 48), 0LL) )
    {
      v22 = std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v5 + 48));
      MultistagePlayComp = Scene::getMultistagePlayComp(v22);
      if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
        __asan_report_load8(&this->player_);
      Uid = Player::getUid(this->player_);
      SceneMultistagePlayComp::onAvatarDie(MultistagePlayComp, Uid);
      v25 = std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v5 + 48));
      GalleryComp = Scene::getGalleryComp(v25);
      if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
        __asan_report_load8(&this->player_);
      SceneGalleryComp::onAvatarDie(GalleryComp, this->player_);
    }
    v9 = 0;
    std::shared_ptr<Scene>::~shared_ptr((std::shared_ptr<Scene> *const)(v5 + 48));
    std::set<std::shared_ptr<Group>,std::owner_less<std::shared_ptr<Group>>,std::allocator<std::shared_ptr<Group>>>::~set((std::set<std::shared_ptr<Group>,std::owner_less<std::shared_ptr<Group> >,std::allocator<std::shared_ptr<Group> > > *const)(v5 + 80));
  }
  else
  {
    common::milog::MiLogStream::create(
      &v35,
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/player/avatar/player_avatar_comp.cpp",
      "onAvatarDie",
      2300);
    v8 = common::milog::MiLogStream::operator<<<char [19],(char *[19])0>(&v35, (const char (*)[19])"invalid life state");
    common::milog::MiLogStream::operator<<<Avatar,(Avatar*)0>(v8, avatar);
    common::milog::MiLogStream::~MiLogStream(&v35);
    v9 = -1;
  }
  result = v9;
  if ( v36 == (char *)v5 )
  {
    *(_QWORD *)((v5 >> 3) + 0x7FFF8000) = 0LL;
    *(_DWORD *)((v5 >> 3) + 0x7FFF8008) = 0;
    *(_DWORD *)((v5 >> 3) + 0x7FFF8010) = 0;
  }
  else
  {
    *(_QWORD *)v5 = 1172321806LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v5 >> 3) + 0x7FFF8010) = -168430091;
  }
  return result;
};

// Line 2317: range 000000001717899E-0000000017178A5B
ForeachPolicy __cdecl PlayerAvatarComp::onAvatarDie(ChangeHpContext &,proto::PlayerDieType,unsigned int,Avatar &)::{lambda(Challenge &)#1}::operator()(
        const PlayerAvatarComp::onAvatarDie::<lambda(Challenge&)> *const __closure,
        Challenge *challenge)
{
  std::set<std::shared_ptr<Group>,std::owner_less<std::shared_ptr<Group> >,std::allocator<std::shared_ptr<Group> > > *group_ptr_set; // rbx
  std::enable_shared_from_this<Group> v4; // [rsp+10h] [rbp-20h] BYREF

  if ( *(_BYTE *)(((unsigned __int64)__closure >> 3) + 0x7FFF8000) )
    __asan_report_load8(__closure);
  group_ptr_set = __closure->__group_ptr_set;
  if ( *(_BYTE *)(((unsigned __int64)&challenge->group_ >> 3) + 0x7FFF8000) )
    __asan_report_load8(&challenge->group_);
  std::enable_shared_from_this<Group>::shared_from_this(&v4);
  std::set<std::shared_ptr<Group>,std::owner_less<std::shared_ptr<Group>>,std::allocator<std::shared_ptr<Group>>>::insert(
    group_ptr_set,
    (std::set<std::shared_ptr<Group>,std::owner_less<std::shared_ptr<Group> >,std::allocator<std::shared_ptr<Group> > >::value_type *)&v4);
  std::shared_ptr<Group>::~shared_ptr((std::shared_ptr<Group> *const)&v4);
  return 0;
};

// Line 2343: range 00000000171791B2-00000000171796A6
int32_t __cdecl PlayerAvatarComp::allAvatarDie(PlayerAvatarComp *const this, proto::PlayerDieType die_type)
{
  unsigned __int64 v2; // rbx
  __int64 v3; // rax
  _DWORD *v4; // r13
  int32_t v5; // r14d
  common::milog::MiLogStream *v6; // r14
  std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v7; // rax
  __int64 Now; // rsi
  __int64 v9; // rsi
  __int64 v10; // rdx
  __int64 v11; // rdx
  int32_t result; // eax
  int32_t ret; // [rsp+1Ch] [rbp-114h]
  common::milog::MiLogStream v15; // [rsp+20h] [rbp-110h] BYREF
  char v16[240]; // [rsp+40h] [rbp-F0h] BYREF

  v2 = (unsigned __int64)v16;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_2(192LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "2 32 16 14 scene_ptr:2349 64 96 15 hp_context:2355";
  *(_QWORD *)(v2 + 16) = PlayerAvatarComp::allAvatarDie;
  v4 = (_DWORD *)(v2 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = -219021312;
  v4[536862725] = -202116109;
  if ( std::operator==<Avatar>(&this->cur_avatar_ptr_, 0LL) )
  {
    common::milog::MiLogStream::create(
      &v15,
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/player/avatar/player_avatar_comp.cpp",
      "allAvatarDie",
      2346);
    common::milog::MiLogStream::operator<<<char [24],(char *[24])0>(&v15, (const char (*)[24])"cur_avatar_ptr_ is null");
    common::milog::MiLogStream::~MiLogStream(&v15);
    v5 = -1;
  }
  else
  {
    std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false> *const)&this->cur_avatar_ptr_);
    Entity::getScene((const Entity *const)(v2 + 32));
    if ( std::operator==<Scene>((const std::shared_ptr<Scene> *)(v2 + 32), 0LL) )
    {
      common::milog::MiLogStream::create(
        &v15,
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/player/avatar/player_avatar_comp.cpp",
        "allAvatarDie",
        2352);
      v6 = common::milog::MiLogStream::operator<<<char [15],(char *[15])0>(&v15, (const char (*)[15])"getScene fails");
      v7 = std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::operator*((const std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false> *const)&this->cur_avatar_ptr_);
      common::milog::MiLogStream::operator<<<Avatar,(Avatar*)0>(v6, v7);
      common::milog::MiLogStream::~MiLogStream(&v15);
      v5 = -1;
    }
    else
    {
      ChangeHpContext::ChangeHpContext((ChangeHpContext *const)(v2 + 64));
      *(_DWORD *)(v2 + 68) = die_type;
      std::function<ForeachPolicy ()(Avatar &)>::function<PlayerAvatarComp::allAvatarDie(proto::PlayerDieType)::{lambda(Avatar &)#1},void,void>(
        (std::function<ForeachPolicy(Avatar&)> *const)&v15,
        (PlayerAvatarComp::allAvatarDie::<lambda(Avatar&)>)(v2 + 64));
      ret = PlayerAvatarComp::foreachMyAvatarInSceneTeam(this, (std::function<ForeachPolicy(Avatar&)> *)&v15);
      std::function<ForeachPolicy ()(Avatar &)>::~function((std::function<ForeachPolicy(Avatar&)> *const)&v15);
      if ( ret )
      {
        common::milog::MiLogStream::create(
          &v15,
          &common::milog::MiLogDefault::default_log_obj_,
          3u,
          "./src/player/avatar/player_avatar_comp.cpp",
          "allAvatarDie",
          2366);
        common::milog::MiLogStream::operator<<<char [33],(char *[33])0>(
          &v15,
          (const char (*)[33])"foreachMyAvatarInSceneTeam fails");
        common::milog::MiLogStream::~MiLogStream(&v15);
        v5 = -1;
      }
      else
      {
        Now = (unsigned int)common::tools::TimeUtils::getNow();
        if ( *(_BYTE *)(((unsigned __int64)&this->last_avatar_die_time_ >> 3) + 0x7FFF8000) != 0
          && *(_BYTE *)(((unsigned __int64)&this->last_avatar_die_time_ >> 3) + 0x7FFF8000) <= 3 )
        {
          __asan_report_store4(&this->last_avatar_die_time_, Now, &this->last_avatar_die_time_);
        }
        this->last_avatar_die_time_ = Now;
        v9 = (((_BYTE)this + 76) & 7u) + 3;
        v10 = (*(_BYTE *)(((unsigned __int64)&this->die_type_ >> 3) + 0x7FFF8000) != 0) & (unsigned __int8)((char)((((_BYTE)this + 76) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&this->die_type_ >> 3) + 0x7FFF8000));
        if ( (_BYTE)v10 )
          __asan_report_store4(&this->die_type_, v9, v10);
        this->die_type_ = die_type;
        if ( *(_BYTE *)(((unsigned __int64)&this->murderer_entity_id_ >> 3) + 0x7FFF8000) != 0
          && *(_BYTE *)(((unsigned __int64)&this->murderer_entity_id_ >> 3) + 0x7FFF8000) <= 3 )
        {
          __asan_report_store4(&this->murderer_entity_id_, v9, &this->murderer_entity_id_);
        }
        this->murderer_entity_id_ = 0;
        v11 = (*(_BYTE *)(((unsigned __int64)&this->murderer_top_owner_entity_id_ >> 3) + 0x7FFF8000) != 0) & (unsigned __int8)((char)((((_BYTE)this - 60) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&this->murderer_top_owner_entity_id_ >> 3) + 0x7FFF8000));
        if ( (_BYTE)v11 )
          __asan_report_store4(&this->murderer_top_owner_entity_id_, (((_BYTE)this - 60) & 7u) + 3, v11);
        this->murderer_top_owner_entity_id_ = 0;
        v5 = 0;
      }
      ChangeHpContext::~ChangeHpContext((ChangeHpContext *const)(v2 + 64));
    }
    std::shared_ptr<Scene>::~shared_ptr((std::shared_ptr<Scene> *const)(v2 + 32));
  }
  result = v5;
  if ( v16 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8014) = 0;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 2357: range 00000000171790D8-00000000171791B1
ForeachPolicy __cdecl PlayerAvatarComp::allAvatarDie(proto::PlayerDieType)::{lambda(Avatar &)#1}::operator()(
        const PlayerAvatarComp::allAvatarDie::<lambda(Avatar&)> *const __closure,
        Avatar *avatar)
{
  Avatar *v2; // rax
  unsigned __int64 v3; // rax
  void (__fastcall *v4)(Avatar *, ChangeHpContext *); // rcx

  v2 = avatar;
  if ( *(_BYTE *)(((unsigned __int64)__closure >> 3) + 0x7FFF8000) )
    v2 = (Avatar *)__asan_report_load8(__closure);
  Creature::changeLifeState(v2, LIFE_DEAD, __closure->__hp_context, 1);
  if ( *(_BYTE *)(((unsigned __int64)avatar >> 3) + 0x7FFF8000) )
    __asan_report_load8(avatar);
  v3 = *(_QWORD *)avatar->baseclass_0 + 256LL;
  if ( *(_BYTE *)((v3 >> 3) + 0x7FFF8000) )
    v3 = __asan_report_load8(*(_QWORD *)avatar->baseclass_0 + 256LL);
  v4 = *(void (__fastcall **)(Avatar *, ChangeHpContext *))v3;
  if ( *(_BYTE *)(((unsigned __int64)__closure >> 3) + 0x7FFF8000) )
    __asan_report_load8(__closure);
  v4(avatar, __closure->__hp_context);
  return 0;
};

// Line 2379: range 000000001717973C-0000000017179852
bool __cdecl PlayerAvatarComp::isAllAvatarDead(PlayerAvatarComp *const this)
{
  unsigned __int64 v1; // rbx
  __int64 v2; // rax
  unsigned __int64 v3; // r12
  bool result; // al
  std::function<ForeachPolicy(Avatar&)> p_func; // [rsp+10h] [rbp-80h] BYREF
  char v6[96]; // [rsp+30h] [rbp-60h] BYREF

  v1 = (unsigned __int64)v6;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_0(64LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "1 32 1 16 is_all_dead:2380";
  *(_QWORD *)(v1 + 16) = PlayerAvatarComp::isAllAvatarDead;
  v3 = v1 >> 3;
  *(_DWORD *)(v3 + 2147450880) = -235802127;
  *(_DWORD *)(v3 + 2147450884) = -202116351;
  *(_BYTE *)(v1 + 32) = 1;
  std::function<ForeachPolicy ()(Avatar &)>::function<PlayerAvatarComp::isAllAvatarDead(void)::{lambda(Avatar &)#1},void,void>(
    &p_func,
    (PlayerAvatarComp::isAllAvatarDead::<lambda(Avatar&)>)(v1 + 32));
  PlayerAvatarComp::foreachMyAvatarInSceneTeam(this, &p_func);
  std::function<ForeachPolicy ()(Avatar &)>::~function(&p_func);
  result = *(_BYTE *)(v1 + 32);
  if ( v6 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 2381: range 00000000171796A8-000000001717973A
ForeachPolicy __cdecl PlayerAvatarComp::isAllAvatarDead(void)::{lambda(Avatar &)#1}::operator()(
        const PlayerAvatarComp::isAllAvatarDead::<lambda(Avatar&)> *const __closure,
        Avatar *avatar)
{
  bool *is_all_dead; // rdx
  char v3; // cl

  if ( Creature::getLifeState(avatar) != LIFE_ALIVE )
    return 0;
  if ( *(_BYTE *)(((unsigned __int64)__closure >> 3) + 0x7FFF8000) )
    __asan_report_load8(__closure);
  is_all_dead = __closure->__is_all_dead;
  v3 = *(_BYTE *)(((unsigned __int64)__closure->__is_all_dead >> 3) + 0x7FFF8000);
  if ( v3 != 0 && ((__int64)__closure->__is_all_dead & 7) >= v3 )
  {
    LOBYTE(avatar) = v3 != 0;
    __asan_report_store1(__closure->__is_all_dead, avatar, is_all_dead);
  }
  *is_all_dead = 0;
  return 1;
};

// Line 2394: range 0000000017179954-0000000017179B14
bool __cdecl PlayerAvatarComp::isRevivableAfterAllDead(PlayerAvatarComp *const this)
{
  __m128i v1; // xmm0
  unsigned __int64 v2; // rbx
  __int64 v3; // rax
  unsigned __int64 v4; // r14
  std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v5; // rax
  bool result; // al
  std::shared_ptr<Config> v7; // [rsp+20h] [rbp-A0h] BYREF
  std::function<ForeachPolicy(Avatar&)> p_func; // [rsp+30h] [rbp-90h] BYREF
  char v9[112]; // [rsp+50h] [rbp-70h] BYREF
  PlayerAvatarComp::isRevivableAfterAllDead::<lambda(Avatar&)> v10; // 0:rsi.8,8:xmm0_4.4

  v2 = (unsigned __int64)v9;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_0(64LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "1 32 1 17 is_revivable:2396";
  *(_QWORD *)(v2 + 16) = PlayerAvatarComp::isRevivableAfterAllDead;
  v4 = v2 >> 3;
  *(_DWORD *)(v4 + 2147450880) = -235802127;
  *(_DWORD *)(v4 + 2147450884) = -202116351;
  ServiceBox::findService<GameserverService>();
  GameserverService::getConfig((GameserverService *const)&v7);
  v5 = std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false> *const)&v7);
  *(float *)v1.m128i_i32 = ConstValueExcelConfigMgr::getNoHurtDieSubHpPercent(&v5->design_config.txt_config_mgr.const_value_config_mgr);
  std::shared_ptr<Config>::~shared_ptr(&v7);
  *(_BYTE *)(v2 + 32) = 0;
  LODWORD(v10.__sub_hp_percent) = _mm_cvtsi128_si32((__m128i)(unsigned int)_mm_cvtsi128_si32(v1));
  v10.__is_revivable = (bool *)(v2 + 32);
  std::function<ForeachPolicy ()(Avatar &)>::function<PlayerAvatarComp::isRevivableAfterAllDead(void)::{lambda(Avatar &)#1},void,void>(
    &p_func,
    v10);
  PlayerAvatarComp::foreachMyAvatarInSceneTeam(this, &p_func);
  std::function<ForeachPolicy ()(Avatar &)>::~function(&p_func);
  result = *(_BYTE *)(v2 + 32);
  if ( v9 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 2397: range 0000000017179854-0000000017179953
ForeachPolicy __cdecl PlayerAvatarComp::isRevivableAfterAllDead(void)::{lambda(Avatar &)#1}::operator()(
        const PlayerAvatarComp::isRevivableAfterAllDead::<lambda(Avatar&)> *const __closure,
        Avatar *avatar)
{
  float MaxHp; // xmm0_4
  bool *is_revivable; // rdx
  char v4; // cl
  float CurHp; // [rsp+Ch] [rbp-14h]

  CurHp = Creature::getCurHp(avatar);
  MaxHp = Creature::getMaxHp(avatar);
  if ( *(_BYTE *)(((unsigned __int64)&__closure->__sub_hp_percent >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&__closure->__sub_hp_percent >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4(&__closure->__sub_hp_percent);
  }
  if ( (float)(CurHp - (float)((float)(MaxHp * __closure->__sub_hp_percent) / 100.0)) <= 0.0099999998 )
    return 0;
  if ( *(_BYTE *)(((unsigned __int64)__closure >> 3) + 0x7FFF8000) )
    __asan_report_load8(__closure);
  is_revivable = __closure->__is_revivable;
  v4 = *(_BYTE *)(((unsigned __int64)__closure->__is_revivable >> 3) + 0x7FFF8000);
  if ( v4 != 0 && ((__int64)__closure->__is_revivable & 7) >= v4 )
  {
    LOBYTE(avatar) = v4 != 0;
    __asan_report_store1(__closure->__is_revivable, avatar, is_revivable);
  }
  *is_revivable = 1;
  return 1;
};

// Line 2413: range 0000000017179B16-000000001717A90C
int32_t __cdecl PlayerAvatarComp::procAfterAvatarDie(PlayerAvatarComp *const this, const Vector3 *reborn_pos)
{
  __m128i v2; // xmm0
  unsigned __int64 v3; // r13
  __int64 v4; // rax
  _DWORD *v5; // r12
  int32_t v6; // r14d
  std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v7; // rax
  common::milog::MiLogStream *v8; // rbx
  std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v9; // rax
  common::milog::MiLogStream *v10; // rax
  common::milog::MiLogStream *v11; // rcx
  common::milog::MiLogStream *v12; // r14
  std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v13; // rax
  common::milog::MiLogStream *v14; // r14
  Avatar *v15; // rax
  common::milog::MiLogStream *v16; // r14
  std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v17; // rax
  std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v18; // rax
  std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v19; // rax
  std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v21; // rax
  std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v22; // rax
  std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v23; // r14
  std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v24; // rax
  float ReviveHpAfterDie; // xmm0_4
  std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v26; // rax
  std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v27; // rax
  uint32_t v28; // eax
  Avatar *v29; // rax
  Avatar *v30; // rax
  std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v31; // rax
  AbilityComp *AbilityComp; // r14
  unsigned __int64 v33; // rax
  unsigned __int64 v34; // rdx
  std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v35; // rax
  uint32_t EntityId; // eax
  common::milog::MiLogStream *v37; // rcx
  PlayerDungeonComp *DungeonComp; // rax
  uint32_t murderer_entity_id; // esi
  PlayerEventComp *EventComp; // r14
  int32_t result; // eax
  unsigned int val; // [rsp+14h] [rbp-15Ch] BYREF
  float hp_amount; // [rsp+18h] [rbp-158h]
  float old_hp; // [rsp+1Ch] [rbp-154h]
  float heal_hp_amount; // [rsp+20h] [rbp-150h]
  uint32_t source_entity_id; // [rsp+24h] [rbp-14Ch]
  PlayerDungeonComp *dungeon_comp; // [rsp+28h] [rbp-148h]
  std::shared_ptr<FightPropNtfParam> p_param_ptr; // [rsp+30h] [rbp-140h] BYREF
  common::milog::MiLogStream v49; // [rsp+40h] [rbp-130h] BYREF
  char v50[272]; // [rsp+60h] [rbp-110h] BYREF

  v3 = (unsigned __int64)v50;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_2(224LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "3 32 16 18 cur_scene_ptr:2426 64 16 14 event_ptr:2508 96 96 12 context:2450";
  *(_QWORD *)(v3 + 16) = PlayerAvatarComp::procAfterAvatarDie;
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = -219021312;
  v5[536862722] = -219021312;
  v5[536862726] = -202116109;
  if ( std::operator==<Avatar>(&this->cur_avatar_ptr_, 0LL) )
  {
    common::milog::MiLogStream::create(
      &v49,
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/player/avatar/player_avatar_comp.cpp",
      "procAfterAvatarDie",
      2416);
    common::milog::MiLogStream::operator<<<char [24],(char *[24])0>(&v49, (const char (*)[24])"cur_avatar_ptr_ is null");
    common::milog::MiLogStream::~MiLogStream(&v49);
    v6 = 104;
    goto LABEL_68;
  }
  v7 = std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false> *const)&this->cur_avatar_ptr_);
  if ( Entity::isOnScene((const Entity *const)v7) )
  {
    if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
      __asan_report_load8(&this->player_);
    Player::getSceneComp(this->player_);
    PlayerSceneComp::getCurScene((const PlayerSceneComp *const)(v3 + 32));
    if ( std::operator==<Scene>((const std::shared_ptr<Scene> *)(v3 + 32), 0LL) )
    {
      common::milog::MiLogStream::create(
        &v49,
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/player/avatar/player_avatar_comp.cpp",
        "procAfterAvatarDie",
        2429);
      v12 = common::milog::MiLogStream::operator<<<char [25],(char *[25])0>(
              &v49,
              (const char (*)[25])"getCurScene failed, uid:");
      if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
        __asan_report_load8(&this->player_);
      val = Player::getUid(this->player_);
      common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v12, &val);
      common::milog::MiLogStream::~MiLogStream(&v49);
      v6 = 103;
      goto LABEL_67;
    }
    v13 = std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false> *const)&this->cur_avatar_ptr_);
    if ( Creature::getLifeState(v13) == LIFE_ALIVE )
    {
      common::milog::MiLogStream::create(
        &v49,
        &common::milog::MiLogDefault::default_log_obj_,
        2u,
        "./src/player/avatar/player_avatar_comp.cpp",
        "procAfterAvatarDie",
        2435);
      v14 = common::milog::MiLogStream::operator<<<char [29],(char *[29])0>(
              &v49,
              (const char (*)[29])"cur_avatar is not dead, uid:");
      if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
        __asan_report_load8(&this->player_);
      val = Player::getUid(this->player_);
      common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v14, &val);
      common::milog::MiLogStream::~MiLogStream(&v49);
      v6 = -1;
      goto LABEL_67;
    }
    v15 = std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false> *const)&this->cur_avatar_ptr_);
    Avatar::clearAllModifier(v15);
    common::milog::MiLogStream::create(
      &v49,
      &common::milog::MiLogDefault::default_log_obj_,
      1u,
      "./src/player/avatar/player_avatar_comp.cpp",
      "procAfterAvatarDie",
      2441);
    v16 = common::milog::MiLogStream::operator<<<char [9],(char *[9])0>(&v49, (const char (*)[9])"avatar_:");
    v17 = std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::operator*((const std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false> *const)&this->cur_avatar_ptr_);
    common::milog::MiLogStream::operator<<<Avatar,(Avatar*)0>(v16, v17);
    common::milog::MiLogStream::~MiLogStream(&v49);
    if ( *(_BYTE *)(((unsigned __int64)&this->die_type_ >> 3) + 0x7FFF8000) != 0
      && (char)((((_BYTE)this + 76) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&this->die_type_ >> 3) + 0x7FFF8000) )
    {
      __asan_report_load4(&this->die_type_);
    }
    if ( !isNoHurtDie(this->die_type_) )
    {
      v18 = std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false> *const)&this->cur_avatar_ptr_);
      if ( Avatar::getIsReviveAfterDie(v18) )
      {
        v19 = std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false> *const)&this->cur_avatar_ptr_);
        if ( !Avatar::isBanRevive(v19) )
        {
          v21 = std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false> *const)&this->cur_avatar_ptr_);
          *(float *)v2.m128i_i32 = Avatar::getReviveHpAfterDie(v21);
          LODWORD(hp_amount) = _mm_cvtsi128_si32(v2);
          v22 = std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false> *const)&this->cur_avatar_ptr_);
          *(float *)v2.m128i_i32 = Creature::getCurHp(v22);
          old_hp = COERCE_FLOAT(_mm_cvtsi128_si32(v2));
          v23 = std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false> *const)&this->cur_avatar_ptr_);
          std::shared_ptr<FightPropNtfParam>::shared_ptr(&p_param_ptr, 0LL);
          v24 = std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false> *const)&this->cur_avatar_ptr_);
          ReviveHpAfterDie = Avatar::getReviveHpAfterDie(v24);
          Creature::changeCurHp(v23, ReviveHpAfterDie, CHANGE_HP_ADD_REVIVE, 1, &p_param_ptr);
          std::shared_ptr<FightPropNtfParam>::~shared_ptr(&p_param_ptr);
          v26 = std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false> *const)&this->cur_avatar_ptr_);
          heal_hp_amount = Creature::getCurHp(v26) - old_hp;
          ChangeHpContext::ChangeHpContext((ChangeHpContext *const)(v3 + 96));
          v27 = std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false> *const)&this->cur_avatar_ptr_);
          source_entity_id = Avatar::getReviveSourceEntityId(v27);
          if ( source_entity_id )
          {
            v28 = (unsigned int)std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 32));
            Scene::findEntity<Creature>((const Scene *const)(v3 + 64), v28);
            std::shared_ptr<Creature>::operator=(
              (std::shared_ptr<Creature> *const)(v3 + 104),
              (std::shared_ptr<Creature> *)(v3 + 64));
            std::shared_ptr<Creature>::~shared_ptr((std::shared_ptr<Creature> *const)(v3 + 64));
          }
          v29 = std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false> *const)&this->cur_avatar_ptr_);
          Avatar::setLifeAlive(v29, 0x68u, (ChangeHpContext *)(v3 + 96), 1);
          v30 = std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false> *const)&this->cur_avatar_ptr_);
          Avatar::resetReviveInfo(v30);
          v31 = std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false> *const)&this->cur_avatar_ptr_);
          AbilityComp = Creature::getAbilityComp(v31);
          v33 = (unsigned __int64)std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false> *const)&this->cur_avatar_ptr_);
          if ( *(_BYTE *)((v33 >> 3) + 0x7FFF8000) )
            v33 = __asan_report_load8(v33);
          v34 = *(_QWORD *)v33 + 152LL;
          if ( *(_BYTE *)((v34 >> 3) + 0x7FFF8000) )
            v33 = __asan_report_load8(*(_QWORD *)v33 + 152LL);
          (*(void (__fastcall **)(std::shared_ptr<FightPropNtfParam> *, unsigned __int64))v34)(&p_param_ptr, v33);
          v35 = std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false> *const)&this->cur_avatar_ptr_);
          EntityId = Entity::getEntityId((const Entity *const)v35);
          AbilityComp::notifyClientBeingHealed(
            AbilityComp,
            source_entity_id,
            EntityId,
            hp_amount,
            heal_hp_amount,
            (PlayerPtr *)&p_param_ptr);
          std::shared_ptr<Player>::~shared_ptr((std::shared_ptr<Player> *const)&p_param_ptr);
          v6 = 0;
          ChangeHpContext::~ChangeHpContext((ChangeHpContext *const)(v3 + 96));
          goto LABEL_67;
        }
      }
    }
    if ( !PlayerAvatarComp::isAllAvatarDead(this) )
    {
      if ( PlayerAvatarComp::replaceWithAliveAvatar(this, reborn_pos) )
      {
        common::milog::MiLogStream::create(
          &v49,
          &common::milog::MiLogDefault::default_log_obj_,
          3u,
          "./src/player/avatar/player_avatar_comp.cpp",
          "procAfterAvatarDie",
          2469);
        v37 = common::milog::MiLogStream::operator<<<char [30],(char *[30])0>(
                &v49,
                (const char (*)[30])"replaceWithAliveAvatar failed");
        if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
          __asan_report_load8(&this->player_);
        operator<<(v37, this->player_);
        common::milog::MiLogStream::~MiLogStream(&v49);
        v6 = -1;
      }
      else
      {
        v6 = 0;
      }
      goto LABEL_67;
    }
    if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
      __asan_report_load8(&this->player_);
    DungeonComp = Player::getDungeonComp(this->player_);
    if ( !PlayerDungeonComp::isInDungeon(DungeonComp) )
    {
      common::tools::perf::make_shared<TeamDeadEvent>();
      std::shared_ptr<BaseEvent>::shared_ptr<TeamDeadEvent,void>(
        (std::shared_ptr<BaseEvent> *const)(v3 + 64),
        (std::shared_ptr<TeamDeadEvent> *)&p_param_ptr);
      std::shared_ptr<TeamDeadEvent>::~shared_ptr((std::shared_ptr<TeamDeadEvent> *const)&p_param_ptr);
      if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
        __asan_report_load8(&this->player_);
      EventComp = Player::getEventComp(this->player_);
      std::shared_ptr<BaseEvent>::shared_ptr(
        (std::shared_ptr<BaseEvent> *const)&p_param_ptr,
        (const std::shared_ptr<BaseEvent> *)(v3 + 64));
      PlayerEventComp::notifyEvent(EventComp, (BaseEventPtr *)&p_param_ptr);
      std::shared_ptr<BaseEvent>::~shared_ptr((std::shared_ptr<BaseEvent> *const)&p_param_ptr);
      if ( PlayerAvatarComp::isRevivableAfterAllDead(this) )
        v6 = PlayerAvatarComp::rebornTeam(this);
      else
        v6 = PlayerAvatarComp::notifyAllAvatarDie(this);
      std::shared_ptr<BaseEvent>::~shared_ptr((std::shared_ptr<BaseEvent> *const)(v3 + 64));
      goto LABEL_67;
    }
    if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
      __asan_report_load8(&this->player_);
    dungeon_comp = Player::getDungeonComp(this->player_);
    if ( PlayerDungeonComp::isDungeonSceneUnSettled(dungeon_comp) )
    {
      if ( !PlayerAvatarComp::isRevivableAfterAllDead(this) )
      {
        if ( *(_BYTE *)(((unsigned __int64)&this->murderer_entity_id_ >> 3) + 0x7FFF8000) != 0
          && *(_BYTE *)(((unsigned __int64)&this->murderer_entity_id_ >> 3) + 0x7FFF8000) <= 3 )
        {
          __asan_report_load4(&this->murderer_entity_id_);
        }
        murderer_entity_id = this->murderer_entity_id_;
        if ( *(_BYTE *)(((unsigned __int64)&this->die_type_ >> 3) + 0x7FFF8000) != 0
          && (char)((((_BYTE)this + 76) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&this->die_type_ >> 3) + 0x7FFF8000) )
        {
          __asan_report_load4(&this->die_type_);
        }
        v6 = PlayerDungeonComp::onAllAvatarDie(dungeon_comp, this->die_type_, murderer_entity_id);
        goto LABEL_67;
      }
      if ( *(_BYTE *)(((unsigned __int64)&this->die_type_ >> 3) + 0x7FFF8000) != 0
        && (char)((((_BYTE)this + 76) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&this->die_type_ >> 3) + 0x7FFF8000) )
      {
        __asan_report_load4(&this->die_type_);
      }
    }
    else
    {
      if ( !PlayerAvatarComp::isRevivableAfterAllDead(this) )
      {
        v6 = PlayerDungeonComp::quitCurDungeon(dungeon_comp, DUNGEON_QUIT_REASON_ALL_DIED);
        goto LABEL_67;
      }
      if ( *(_BYTE *)(((unsigned __int64)&this->die_type_ >> 3) + 0x7FFF8000) != 0
        && (char)((((_BYTE)this + 76) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&this->die_type_ >> 3) + 0x7FFF8000) )
      {
        __asan_report_load4(&this->die_type_);
      }
    }
    v6 = PlayerDungeonComp::reviveBySlip(dungeon_comp, this->die_type_);
LABEL_67:
    std::shared_ptr<Scene>::~shared_ptr((std::shared_ptr<Scene> *const)(v3 + 32));
    goto LABEL_68;
  }
  common::milog::MiLogStream::create(
    &v49,
    &common::milog::MiLogDefault::default_log_obj_,
    1u,
    "./src/player/avatar/player_avatar_comp.cpp",
    "procAfterAvatarDie",
    2422);
  v8 = common::milog::MiLogStream::operator<<<char [40],(char *[40])0>(&v49, (const char (*)[40])off_2603D920);
  v9 = std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::operator*((const std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false> *const)&this->cur_avatar_ptr_);
  v10 = common::milog::MiLogStream::operator<<<Avatar,(Avatar*)0>(v8, v9);
  v11 = common::milog::MiLogStream::operator<<<char [9],(char *[9])0>(v10, (const char (*)[9])" player:");
  if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
    __asan_report_load8(&this->player_);
  operator<<(v11, this->player_);
  common::milog::MiLogStream::~MiLogStream(&v49);
  v6 = 103;
LABEL_68:
  result = v6;
  if ( v50 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8008) = 0;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8018) = 0;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8018) = -168430091;
  }
  return result;
};

// Line 2524: range 000000001717A90E-000000001717AF83
int32_t __cdecl PlayerAvatarComp::notifyAllAvatarDie(PlayerAvatarComp *const this)
{
  unsigned __int64 v1; // r13
  __int64 v2; // rax
  _DWORD *v3; // r12
  common::milog::MiLogStream *v4; // r14
  int32_t v5; // r14d
  std::__shared_ptr_access<proto::WorldPlayerDieNotify,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v6; // rcx
  unsigned __int64 v7; // rax
  unsigned __int64 v8; // rdx
  void (__fastcall *v9)(unsigned __int64, unsigned __int64, _QWORD); // r8
  unsigned __int64 v10; // rax
  unsigned __int64 v11; // rdx
  std::__shared_ptr_access<proto::WorldPlayerDieNotify,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v12; // r14
  std::__shared_ptr_access<Monster,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v13; // rax
  uint32_t MonsterId; // eax
  unsigned __int64 v15; // rax
  unsigned __int64 v16; // rdx
  std::__shared_ptr_access<proto::WorldPlayerDieNotify,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v17; // r14
  std::__shared_ptr_access<Gadget,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v18; // rax
  uint32_t GadgetId; // eax
  Player *player; // r14
  int32_t result; // eax
  unsigned int val; // [rsp+1Ch] [rbp-F4h] BYREF
  common::milog::MiLogStream v23; // [rsp+20h] [rbp-F0h] BYREF
  char v24[208]; // [rsp+40h] [rbp-D0h] BYREF

  v1 = (unsigned __int64)v24;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_2(160LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "4 32 16 18 cur_scene_ptr:2525 64 16 15 notify_ptr:2532 96 16 24 murderer_entity_ptr:2536 128 16 "
                        "16 monster_ptr:2541";
  *(_QWORD *)(v1 + 16) = PlayerAvatarComp::notifyAllAvatarDie;
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -219021312;
  v3[536862722] = -219021312;
  v3[536862723] = -219021312;
  v3[536862724] = -202178560;
  if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
    __asan_report_load8(&this->player_);
  Player::getSceneComp(this->player_);
  PlayerSceneComp::getCurScene((const PlayerSceneComp *const)(v1 + 32));
  if ( std::operator==<Scene>((const std::shared_ptr<Scene> *)(v1 + 32), 0LL) )
  {
    common::milog::MiLogStream::create(
      &v23,
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/player/avatar/player_avatar_comp.cpp",
      "notifyAllAvatarDie",
      2528);
    v4 = common::milog::MiLogStream::operator<<<char [25],(char *[25])0>(
           &v23,
           (const char (*)[25])"getCurScene failed, uid:");
    if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
      __asan_report_load8(&this->player_);
    val = Player::getUid(this->player_);
    common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v4, &val);
    common::milog::MiLogStream::~MiLogStream(&v23);
    v5 = -1;
  }
  else
  {
    common::tools::perf::make_shared<proto::WorldPlayerDieNotify>();
    v6 = std::__shared_ptr_access<proto::WorldPlayerDieNotify,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<proto::WorldPlayerDieNotify,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v1 + 64));
    if ( *(_BYTE *)(((unsigned __int64)&this->die_type_ >> 3) + 0x7FFF8000) != 0
      && (char)((((_BYTE)this + 76) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&this->die_type_ >> 3) + 0x7FFF8000) )
    {
      __asan_report_load4(&this->die_type_);
    }
    proto::WorldPlayerDieNotify::set_die_type(v6, this->die_type_);
    if ( *(_BYTE *)(((unsigned __int64)&this->murderer_entity_id_ >> 3) + 0x7FFF8000) != 0
      && *(_BYTE *)(((unsigned __int64)&this->murderer_entity_id_ >> 3) + 0x7FFF8000) <= 3 )
    {
      __asan_report_load4(&this->murderer_entity_id_);
    }
    if ( this->murderer_entity_id_ )
    {
      v7 = (unsigned __int64)std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v1 + 32));
      if ( *(_BYTE *)((v7 >> 3) + 0x7FFF8000) )
        v7 = __asan_report_load8(v7);
      v8 = *(_QWORD *)v7 + 120LL;
      if ( *(_BYTE *)((v8 >> 3) + 0x7FFF8000) )
        v7 = __asan_report_load8(*(_QWORD *)v7 + 120LL);
      v9 = *(void (__fastcall **)(unsigned __int64, unsigned __int64, _QWORD))v8;
      if ( *(_BYTE *)(((unsigned __int64)&this->murderer_entity_id_ >> 3) + 0x7FFF8000) != 0
        && *(_BYTE *)(((unsigned __int64)&this->murderer_entity_id_ >> 3) + 0x7FFF8000) <= 3 )
      {
        v7 = __asan_report_load4(&this->murderer_entity_id_);
      }
      v9(v1 + 96, v7, this->murderer_entity_id_);
      if ( std::operator!=<Entity>((const std::shared_ptr<Entity> *)(v1 + 96), 0LL) )
      {
        v10 = (unsigned __int64)std::__shared_ptr_access<Entity,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Entity,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v1 + 96));
        if ( *(_BYTE *)((v10 >> 3) + 0x7FFF8000) )
          v10 = __asan_report_load8(v10);
        v11 = *(_QWORD *)v10 + 24LL;
        if ( *(_BYTE *)((v11 >> 3) + 0x7FFF8000) )
          v10 = __asan_report_load8(*(_QWORD *)v10 + 24LL);
        if ( (*(unsigned int (__fastcall **)(unsigned __int64))v11)(v10) == 2 )
        {
          std::dynamic_pointer_cast<Monster,Entity>((const std::shared_ptr<Entity> *)(v1 + 128));
          if ( std::operator!=<Monster>(0LL, (const std::shared_ptr<Monster> *)(v1 + 128)) )
          {
            v12 = std::__shared_ptr_access<proto::WorldPlayerDieNotify,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<proto::WorldPlayerDieNotify,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v1 + 64));
            v13 = std::__shared_ptr_access<Monster,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Monster,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v1 + 128));
            MonsterId = Monster::getMonsterId(v13);
            proto::WorldPlayerDieNotify::set_monster_id(v12, MonsterId);
          }
          std::shared_ptr<Monster>::~shared_ptr((std::shared_ptr<Monster> *const)(v1 + 128));
        }
        else
        {
          v15 = (unsigned __int64)std::__shared_ptr_access<Entity,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Entity,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v1 + 96));
          if ( *(_BYTE *)((v15 >> 3) + 0x7FFF8000) )
            v15 = __asan_report_load8(v15);
          v16 = *(_QWORD *)v15 + 24LL;
          if ( *(_BYTE *)((v16 >> 3) + 0x7FFF8000) )
            v15 = __asan_report_load8(*(_QWORD *)v15 + 24LL);
          if ( (*(unsigned int (__fastcall **)(unsigned __int64))v16)(v15) == 4 )
          {
            std::dynamic_pointer_cast<Gadget,Entity>((const std::shared_ptr<Entity> *)(v1 + 128));
            if ( std::operator!=<Gadget>(0LL, (const std::shared_ptr<Gadget> *)(v1 + 128)) )
            {
              v17 = std::__shared_ptr_access<proto::WorldPlayerDieNotify,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<proto::WorldPlayerDieNotify,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v1 + 64));
              v18 = std::__shared_ptr_access<Gadget,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Gadget,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v1 + 128));
              GadgetId = Gadget::getGadgetId(v18);
              proto::WorldPlayerDieNotify::set_gadget_id(v17, GadgetId);
            }
            std::shared_ptr<Gadget>::~shared_ptr((std::shared_ptr<Gadget> *const)(v1 + 128));
          }
        }
      }
      std::shared_ptr<Entity>::~shared_ptr((std::shared_ptr<Entity> *const)(v1 + 96));
    }
    if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
      __asan_report_load8(&this->player_);
    player = this->player_;
    std::dynamic_pointer_cast<google::protobuf::Message const,proto::WorldPlayerDieNotify>((const std::shared_ptr<proto::WorldPlayerDieNotify> *)(v1 + 128));
    Player::sendMessage(player, (common::minet::ConstMessagePtr *)(v1 + 128), 0LL);
    std::shared_ptr<google::protobuf::Message const>::~shared_ptr((std::shared_ptr<const google::protobuf::Message> *const)(v1 + 128));
    v5 = 0;
    std::shared_ptr<proto::WorldPlayerDieNotify>::~shared_ptr((std::shared_ptr<proto::WorldPlayerDieNotify> *const)(v1 + 64));
  }
  std::shared_ptr<Scene>::~shared_ptr((std::shared_ptr<Scene> *const)(v1 + 32));
  result = v5;
  if ( v24 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0LL;
    *(_DWORD *)((v1 >> 3) + 0x7FFF8010) = 0;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v1 >> 3) + 0x7FFF8010) = -168430091;
  }
  return result;
};

// Line 2564: range 000000001717AF84-000000001717BF04
int32_t __cdecl PlayerAvatarComp::replaceWithAliveAvatar(PlayerAvatarComp *const this, const Vector3 *reborn_pos)
{
  int32_t v2; // r15d
  unsigned __int64 v3; // r13
  __int64 v4; // rax
  _DWORD *v5; // r12
  common::milog::MiLogStream *v6; // rbx
  common::milog::MiLogStream *v7; // r14
  std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v8; // rax
  common::milog::MiLogStream *v9; // r14
  unsigned __int64 v10; // rax
  common::milog::MiLogStream *v11; // rax
  int v12; // r14d
  std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v13; // rax
  Avatar *v14; // rax
  std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v15; // rdx
  unsigned __int64 v16; // rax
  unsigned __int64 v17; // rdx
  std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v18; // rax
  const Vector3 *Position; // rdx
  Scene *v20; // r14
  Entity *v21; // rcx
  common::milog::MiLogStream *v22; // r14
  std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v23; // rax
  common::milog::MiLogStream *v24; // r14
  common::milog::MiLogStream *v25; // r14
  std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v26; // rax
  std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v27; // rax
  std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v28; // r14
  unsigned __int64 v29; // rax
  void (__fastcall *v30)(std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *, const Vector3 *); // r15
  std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v31; // rax
  const Vector3 *v32; // rax
  Entity *v33; // r14
  std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v34; // rax
  const Vector3 *Rotation; // rax
  Avatar *v36; // r14
  std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v37; // rax
  const Vector3 *LastValidPos; // rax
  Avatar *v39; // r14
  std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v40; // rax
  const Vector3 *LastValidRot; // rax
  std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v42; // rax
  std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v43; // r14
  unsigned __int64 v44; // rax
  unsigned int (__fastcall *v45)(std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *, std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *, unsigned __int64); // r15
  std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v46; // rax
  common::milog::MiLogStream *v47; // r14
  std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v48; // rax
  common::milog::MiLogStream *v49; // r14
  std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v50; // rax
  common::milog::MiLogStream *v51; // rax
  common::milog::MiLogStream *v52; // r14
  std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v53; // rax
  std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v54; // rax
  std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v55; // rax
  std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v56; // r14
  unsigned __int64 v57; // rax
  unsigned int (__fastcall *v58)(std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *, std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *, unsigned __int64); // r15
  std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v59; // rax
  common::milog::MiLogStream *v60; // r14
  std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v61; // rax
  std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v62; // rax
  PlayerEventComp *EventComp; // r14
  int32_t result; // eax
  unsigned int val; // [rsp+2Ch] [rbp-1E4h] BYREF
  std::vector<long unsigned int>::iterator __for_begin; // [rsp+30h] [rbp-1E0h] BYREF
  std::vector<long unsigned int>::iterator __for_end; // [rsp+38h] [rbp-1D8h] BYREF
  unsigned __int64 __args_1; // [rsp+40h] [rbp-1D0h] BYREF
  std::vector<long unsigned int> *__for_range; // [rsp+48h] [rbp-1C8h]
  std::shared_ptr<ChangeAvatarEvent> __r; // [rsp+50h] [rbp-1C0h] BYREF
  common::milog::MiLogStream v71; // [rsp+60h] [rbp-1B0h] BYREF
  common::milog::MiLogStream v72; // [rsp+80h] [rbp-190h] BYREF
  char v73[368]; // [rsp+A0h] [rbp-170h] BYREF

  v3 = (unsigned __int64)v73;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_3(320LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "8 32 8 9 guid:2586 64 12 22 disappear_context:2615 96 12 19 appear_context:2622 128 16 18 cur_sc"
                        "ene_ptr:2571 160 16 15 avatar_ptr:2588 192 16 19 old_avatar_ptr:2619 224 16 14 event_ptr:2627 25"
                        "6 24 20 avatar_team_vec:2584";
  *(_QWORD *)(v3 + 16) = PlayerAvatarComp::replaceWithAliveAvatar;
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = -218959360;
  v5[536862722] = -219020288;
  v5[536862723] = -219020288;
  v5[536862724] = -219021312;
  v5[536862725] = -219021312;
  v5[536862726] = -219021312;
  v5[536862727] = -219021312;
  v5[536862728] = -218103808;
  v5[536862729] = -202116109;
  if ( std::operator==<Avatar>(0LL, &this->cur_avatar_ptr_) )
  {
    common::milog::MiLogStream::create(
      &v72,
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/player/avatar/player_avatar_comp.cpp",
      "replaceWithAliveAvatar",
      2567);
    v6 = common::milog::MiLogStream::operator<<<char [32],(char *[32])0>(
           &v72,
           (const char (*)[32])"cur_avatar_ptr is nullptr, uid:");
    if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
      __asan_report_load8(&this->player_);
    val = Player::getUid(this->player_);
    common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v6, &val);
    common::milog::MiLogStream::~MiLogStream(&v72);
    v2 = -1;
  }
  else
  {
    if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
      __asan_report_load8(&this->player_);
    Player::getSceneComp(this->player_);
    PlayerSceneComp::getCurScene((const PlayerSceneComp *const)(v3 + 128));
    if ( std::operator==<Scene>((const std::shared_ptr<Scene> *)(v3 + 128), 0LL) )
    {
      common::milog::MiLogStream::create(
        &v72,
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/player/avatar/player_avatar_comp.cpp",
        "replaceWithAliveAvatar",
        2574);
      v7 = common::milog::MiLogStream::operator<<<char [25],(char *[25])0>(
             &v72,
             (const char (*)[25])"getCurScene failed, uid:");
      if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
        __asan_report_load8(&this->player_);
      val = Player::getUid(this->player_);
      common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v7, &val);
      common::milog::MiLogStream::~MiLogStream(&v72);
      v2 = -1;
    }
    else
    {
      v8 = std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false> *const)&this->cur_avatar_ptr_);
      if ( Creature::getLifeState(v8) == LIFE_ALIVE )
      {
        common::milog::MiLogStream::create(
          &v72,
          &common::milog::MiLogDefault::default_log_obj_,
          1u,
          "./src/player/avatar/player_avatar_comp.cpp",
          "replaceWithAliveAvatar",
          2580);
        v9 = common::milog::MiLogStream::operator<<<char [36],(char *[36])0>(
               &v72,
               (const char (*)[36])"cur_avatar_ptr_ is LIFE_ALIVE, uid:");
        if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
          __asan_report_load8(&this->player_);
        val = Player::getUid(this->player_);
        common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v9, &val);
        common::milog::MiLogStream::~MiLogStream(&v72);
        v2 = 0;
      }
      else
      {
        PlayerAvatarComp::getMyAvatarTeamInSceneTeam((std::vector<long unsigned int> *)(v3 + 256), this);
        if ( *(_BYTE *)(((unsigned __int64)&this->last_avatar_die_time_ >> 3) + 0x7FFF8000) != 0
          && *(_BYTE *)(((unsigned __int64)&this->last_avatar_die_time_ >> 3) + 0x7FFF8000) <= 3 )
        {
          __asan_report_store4(&this->last_avatar_die_time_, this, &this->last_avatar_die_time_);
        }
        this->last_avatar_die_time_ = 0;
        __for_range = (std::vector<long unsigned int> *)(v3 + 256);
        __for_begin._M_current = std::vector<unsigned long>::begin((std::vector<long unsigned int> *const)(v3 + 256))._M_current;
        __for_end._M_current = std::vector<unsigned long>::end((std::vector<long unsigned int> *const)(v3 + 256))._M_current;
        while ( __gnu_cxx::operator!=<unsigned long *,std::vector<unsigned long>>(&__for_begin, &__for_end) )
        {
          v10 = (unsigned __int64)__gnu_cxx::__normal_iterator<unsigned long *,std::vector<unsigned long>>::operator*(&__for_begin);
          if ( *(_BYTE *)((v10 >> 3) + 0x7FFF8000) )
            v10 = __asan_report_load8(v10);
          *(_QWORD *)(v3 + 32) = *(_QWORD *)v10;
          PlayerAvatarComp::findAvatar((const PlayerAvatarComp *const)(v3 + 160), (uint64_t)this, *(_QWORD *)(v3 + 32));
          if ( std::operator==<Avatar>((const std::shared_ptr<Avatar> *)(v3 + 160), 0LL) )
          {
            common::milog::MiLogStream::create(
              &v72,
              &common::milog::MiLogDefault::default_log_obj_,
              3u,
              "./src/player/avatar/player_avatar_comp.cpp",
              "replaceWithAliveAvatar",
              2591);
            v11 = common::milog::MiLogStream::operator<<<char [24],(char *[24])0>(
                    &v72,
                    (const char (*)[24])"findAvatar fails, guid:");
            common::milog::MiLogStream::operator<<<unsigned long,(unsigned long *)0>(
              v11,
              (const unsigned __int64 *)(v3 + 32));
            common::milog::MiLogStream::~MiLogStream(&v72);
            v12 = 0;
          }
          else
          {
            v13 = std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 160));
            if ( Creature::getLifeState(v13) == LIFE_ALIVE )
            {
              v14 = std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 160));
              Avatar::clearSpeed(v14);
              v15 = std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 128));
              if ( Scene::isPosValid(v15, reborn_pos) )
              {
                v16 = (unsigned __int64)std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 160));
                if ( *(_BYTE *)((v16 >> 3) + 0x7FFF8000) )
                  v16 = __asan_report_load8(v16);
                v17 = *(_QWORD *)v16 + 80LL;
                if ( *(_BYTE *)((v17 >> 3) + 0x7FFF8000) )
                  v16 = __asan_report_load8(*(_QWORD *)v16 + 80LL);
                (*(void (__fastcall **)(unsigned __int64, const Vector3 *))v17)(v16, reborn_pos);
                v18 = std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false> *const)&this->cur_avatar_ptr_);
                Position = Entity::getPosition((const Entity *const)v18);
                if ( operator!=(Position, reborn_pos) )
                {
                  v20 = std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 128));
                  v21 = (Entity *)std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::operator*((const std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false> *const)&this->cur_avatar_ptr_);
                  if ( Scene::entityMoveTo(v20, v21, reborn_pos) )
                  {
                    common::milog::MiLogStream::create(
                      &v72,
                      &common::milog::MiLogDefault::default_log_obj_,
                      3u,
                      "./src/player/avatar/player_avatar_comp.cpp",
                      "replaceWithAliveAvatar",
                      2604);
                    v22 = common::milog::MiLogStream::operator<<<char [19],(char *[19])0>(
                            &v72,
                            (const char (*)[19])"entityMoveTo fails");
                    v23 = std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::operator*((const std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false> *const)&this->cur_avatar_ptr_);
                    common::milog::MiLogStream::operator<<<Avatar,(Avatar*)0>(v22, v23);
                    common::milog::MiLogStream::~MiLogStream(&v72);
                  }
                }
              }
              else
              {
                common::milog::MiLogStream::create(
                  &v71,
                  &common::milog::MiLogDefault::default_log_obj_,
                  3u,
                  "./src/player/avatar/player_avatar_comp.cpp",
                  "replaceWithAliveAvatar",
                  2609);
                v24 = common::milog::MiLogStream::operator<<<char [25],(char *[25])0>(
                        &v71,
                        (const char (*)[25])"reborn_pos is not valid:");
                Vector3::toString[abi:cxx11]((std::string *)&v72, reborn_pos);
                v25 = common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(
                        v24,
                        (const std::string *)&v72);
                v26 = std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::operator*((const std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false> *const)&this->cur_avatar_ptr_);
                common::milog::MiLogStream::operator<<<Avatar,(Avatar*)0>(v25, v26);
                std::string::~string(&v72);
                common::milog::MiLogStream::~MiLogStream(&v71);
                v27 = std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 160));
                v28 = v27;
                if ( *(_BYTE *)(((unsigned __int64)v27 >> 3) + 0x7FFF8000) )
                  __asan_report_load8(v27);
                v29 = *(_QWORD *)v28->baseclass_0 + 80LL;
                if ( *(_BYTE *)((v29 >> 3) + 0x7FFF8000) )
                  v29 = __asan_report_load8(*(_QWORD *)v28->baseclass_0 + 80LL);
                v30 = *(void (__fastcall **)(std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *, const Vector3 *))v29;
                v31 = std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false> *const)&this->cur_avatar_ptr_);
                v32 = Entity::getPosition((const Entity *const)v31);
                v30(v28, v32);
              }
              v33 = (Entity *)std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 160));
              v34 = std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false> *const)&this->cur_avatar_ptr_);
              Rotation = Entity::getRotation((const Entity *const)v34);
              Entity::setRotation(v33, Rotation);
              v36 = std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 160));
              v37 = std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false> *const)&this->cur_avatar_ptr_);
              LastValidPos = Avatar::getLastValidPos(v37);
              Avatar::setLastValidPos(v36, LastValidPos);
              v39 = std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 160));
              v40 = std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false> *const)&this->cur_avatar_ptr_);
              LastValidRot = Avatar::getLastValidRot(v40);
              Avatar::setLastValidRot(v39, LastValidRot);
              VisionContext::VisionContext((VisionContext *const)(v3 + 64), VISION_REPLACE_DIE);
              v42 = std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 128));
              v43 = v42;
              if ( *(_BYTE *)(((unsigned __int64)v42 >> 3) + 0x7FFF8000) )
                __asan_report_load8(v42);
              v44 = (unsigned __int64)(v43->_vptr_DescribalBase + 14);
              if ( *(_BYTE *)((v44 >> 3) + 0x7FFF8000) )
                v44 = __asan_report_load8(v43->_vptr_DescribalBase + 14);
              v45 = *(unsigned int (__fastcall **)(std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *, std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *, unsigned __int64))v44;
              v46 = std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::operator*((const std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false> *const)&this->cur_avatar_ptr_);
              if ( v45(v43, v46, v3 + 64) )
              {
                common::milog::MiLogStream::create(
                  &v72,
                  &common::milog::MiLogDefault::default_log_obj_,
                  3u,
                  "./src/player/avatar/player_avatar_comp.cpp",
                  "replaceWithAliveAvatar",
                  2617);
                v47 = common::milog::MiLogStream::operator<<<char [22],(char *[22])0>(
                        &v72,
                        (const char (*)[22])"entityDisappear fails");
                v48 = std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::operator*((const std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false> *const)&this->cur_avatar_ptr_);
                common::milog::MiLogStream::operator<<<Avatar,(Avatar*)0>(v47, v48);
                common::milog::MiLogStream::~MiLogStream(&v72);
              }
              std::shared_ptr<Avatar>::shared_ptr((std::shared_ptr<Avatar> *const)(v3 + 192), &this->cur_avatar_ptr_);
              std::shared_ptr<Avatar>::operator=(&this->cur_avatar_ptr_, (const std::shared_ptr<Avatar> *)(v3 + 160));
              common::milog::MiLogStream::create(
                &v72,
                &common::milog::MiLogDefault::default_log_obj_,
                1u,
                "./src/player/avatar/player_avatar_comp.cpp",
                "replaceWithAliveAvatar",
                2621);
              v49 = common::milog::MiLogStream::operator<<<char [37],(char *[37])0>(
                      &v72,
                      (const char (*)[37])"[AVATAR] current avatar change from ");
              v50 = std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::operator*((const std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 192));
              v51 = common::milog::MiLogStream::operator<<<Avatar,(Avatar*)0>(v49, v50);
              v52 = common::milog::MiLogStream::operator<<<char [5],(char *[5])0>(v51, (const char (*)[5])off_2603DDE0);
              v53 = std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::operator*((const std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 160));
              common::milog::MiLogStream::operator<<<Avatar,(Avatar*)0>(v52, v53);
              common::milog::MiLogStream::~MiLogStream(&v72);
              VisionContext::VisionContext((VisionContext *const)(v3 + 96), VISION_REPLACE_DIE);
              v54 = std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false> *const)&this->cur_avatar_ptr_);
              *(_DWORD *)(v3 + 100) = Entity::getEntityId((const Entity *const)v54);
              v55 = std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 128));
              v56 = v55;
              if ( *(_BYTE *)(((unsigned __int64)v55 >> 3) + 0x7FFF8000) )
                __asan_report_load8(v55);
              v57 = (unsigned __int64)(v56->_vptr_DescribalBase + 13);
              if ( *(_BYTE *)((v57 >> 3) + 0x7FFF8000) )
                v57 = __asan_report_load8(v56->_vptr_DescribalBase + 13);
              v58 = *(unsigned int (__fastcall **)(std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *, std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *, unsigned __int64))v57;
              v59 = std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::operator*((const std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 160));
              if ( v58(v56, v59, v3 + 96) )
              {
                common::milog::MiLogStream::create(
                  &v72,
                  &common::milog::MiLogDefault::default_log_obj_,
                  3u,
                  "./src/player/avatar/player_avatar_comp.cpp",
                  "replaceWithAliveAvatar",
                  2625);
                v60 = common::milog::MiLogStream::operator<<<char [19],(char *[19])0>(
                        &v72,
                        (const char (*)[19])"entityAppear fails");
                v61 = std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::operator*((const std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 160));
                common::milog::MiLogStream::operator<<<Avatar,(Avatar*)0>(v60, v61);
                common::milog::MiLogStream::~MiLogStream(&v72);
              }
              v62 = std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 192));
              __args_1 = Avatar::getGuid(v62);
              common::tools::perf::make_shared<ChangeAvatarEvent,unsigned long,unsigned long &>(
                (unsigned __int64 *)&__r,
                &__args_1,
                (unsigned __int64 *)(v3 + 32),
                &__args_1);
              std::shared_ptr<BaseEvent>::shared_ptr<ChangeAvatarEvent,void>(
                (std::shared_ptr<BaseEvent> *const)(v3 + 224),
                &__r);
              std::shared_ptr<ChangeAvatarEvent>::~shared_ptr(&__r);
              if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
                __asan_report_load8(&this->player_);
              EventComp = Player::getEventComp(this->player_);
              std::shared_ptr<BaseEvent>::shared_ptr(
                (std::shared_ptr<BaseEvent> *const)&__r,
                (const std::shared_ptr<BaseEvent> *)(v3 + 224));
              PlayerEventComp::notifyEvent(EventComp, (BaseEventPtr *)&__r);
              std::shared_ptr<BaseEvent>::~shared_ptr((std::shared_ptr<BaseEvent> *const)&__r);
              v2 = 0;
              std::shared_ptr<BaseEvent>::~shared_ptr((std::shared_ptr<BaseEvent> *const)(v3 + 224));
              std::shared_ptr<Avatar>::~shared_ptr((std::shared_ptr<Avatar> *const)(v3 + 192));
              v12 = 1;
            }
            else
            {
              v12 = 2;
            }
          }
          std::shared_ptr<Avatar>::~shared_ptr((std::shared_ptr<Avatar> *const)(v3 + 160));
          if ( v12 && v12 != 2 )
            goto LABEL_60;
          __gnu_cxx::__normal_iterator<unsigned long *,std::vector<unsigned long>>::operator++(&__for_begin);
        }
        v2 = -1;
LABEL_60:
        std::vector<unsigned long>::~vector((std::vector<long unsigned int> *const)(v3 + 256));
      }
    }
    std::shared_ptr<Scene>::~shared_ptr((std::shared_ptr<Scene> *const)(v3 + 128));
  }
  result = v2;
  if ( v73 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8010) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8018) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8020) = 0LL;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8020) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 2641: range 000000001717BF06-000000001717C68F
int32_t __cdecl PlayerAvatarComp::rebornTeam(PlayerAvatarComp *const this)
{
  unsigned __int64 v1; // r12
  __int64 v2; // rax
  _DWORD *v3; // r13
  int32_t v4; // r14d
  common::milog::MiLogStream *v5; // r14
  bool v7; // r14
  common::milog::MiLogStream *v8; // r14
  common::milog::MiLogStream *v9; // rax
  PlayerBasicComp *BasicComp; // rax
  PlayerRegionalPlayComp *RegionalPlayComp; // rax
  Player *player; // r14
  common::milog::MiLogStream *v13; // r14
  std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v14; // rax
  common::milog::MiLogStream *v15; // r14
  int32_t result; // eax
  bool is_trans_to_normal_point; // [rsp+17h] [rbp-E9h]
  unsigned int val; // [rsp+18h] [rbp-E8h] BYREF
  int32_t ret; // [rsp+1Ch] [rbp-E4h]
  std::shared_ptr<Scene> p_cur_scene_ptr; // [rsp+20h] [rbp-E0h] BYREF
  common::milog::MiLogStream v21; // [rsp+30h] [rbp-D0h] BYREF
  char v22[176]; // [rsp+50h] [rbp-B0h] BYREF

  v1 = (unsigned __int64)v22;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_1(128LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "3 32 12 15 reborn_pos:2662 64 12 15 reborn_rot:2662 96 16 18 cur_scene_ptr:2648";
  *(_QWORD *)(v1 + 16) = PlayerAvatarComp::rebornTeam;
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -219020288;
  v3[536862722] = -219020288;
  v3[536862723] = -202178560;
  if ( std::operator==<Avatar>(&this->cur_avatar_ptr_, 0LL) )
  {
    common::milog::MiLogStream::create(
      &v21,
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/player/avatar/player_avatar_comp.cpp",
      "rebornTeam",
      2644);
    common::milog::MiLogStream::operator<<<char [24],(char *[24])0>(&v21, (const char (*)[24])"cur_avatar_ptr_ is null");
    common::milog::MiLogStream::~MiLogStream(&v21);
    v4 = -1;
  }
  else
  {
    if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
      __asan_report_load8(&this->player_);
    Player::getSceneComp(this->player_);
    PlayerSceneComp::getCurScene((const PlayerSceneComp *const)(v1 + 96));
    if ( std::operator==<Scene>((const std::shared_ptr<Scene> *)(v1 + 96), 0LL) )
    {
      common::milog::MiLogStream::create(
        &v21,
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/player/avatar/player_avatar_comp.cpp",
        "rebornTeam",
        2651);
      v5 = common::milog::MiLogStream::operator<<<char [31],(char *[31])0>(
             &v21,
             (const char (*)[31])"cur_scene_ptr is nullptr, uid:");
      if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
        __asan_report_load8(&this->player_);
      val = Player::getUid(this->player_);
      common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v5, &val);
      common::milog::MiLogStream::~MiLogStream(&v21);
      v4 = -1;
    }
    else
    {
      is_trans_to_normal_point = 0;
      if ( *(_BYTE *)(((unsigned __int64)&this->die_type_ >> 3) + 0x7FFF8000) != 0
        && (char)((((_BYTE)this + 76) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&this->die_type_ >> 3) + 0x7FFF8000) )
      {
        __asan_report_load4(&this->die_type_);
      }
      if ( isNoHurtDie(this->die_type_) && PlayerAvatarComp::isRevivableAfterAllDead(this) )
        is_trans_to_normal_point = 1;
      Vector3::Vector3((Vector3 *const)(v1 + 32), 0.0, 0.0, 0.0);
      Vector3::Vector3((Vector3 *const)(v1 + 64), 0.0, 0.0, 0.0);
      std::shared_ptr<Scene>::shared_ptr(&p_cur_scene_ptr, (const std::shared_ptr<Scene> *)(v1 + 96));
      v7 = PlayerAvatarComp::findRebornPositionRotation(
             this,
             is_trans_to_normal_point,
             &p_cur_scene_ptr,
             (Vector3 *)(v1 + 32),
             (Vector3 *)(v1 + 64)) != 0;
      std::shared_ptr<Scene>::~shared_ptr(&p_cur_scene_ptr);
      if ( v7 )
      {
        common::milog::MiLogStream::create(
          &v21,
          &common::milog::MiLogDefault::default_log_obj_,
          3u,
          "./src/player/avatar/player_avatar_comp.cpp",
          "rebornTeam",
          2665);
        v8 = common::milog::MiLogStream::operator<<<char [33],(char *[33])0>(
               &v21,
               (const char (*)[33])"findRebornPositionRotation uid: ");
        if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
          __asan_report_load8(&this->player_);
        val = Player::getUid(this->player_);
        v9 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v8, &val);
        common::milog::MiLogStream::operator<<<char [8],(char *[8])0>(v9, (const char (*)[8])" failed");
        common::milog::MiLogStream::~MiLogStream(&v21);
        v4 = -1;
      }
      else
      {
        if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
          __asan_report_load8(&this->player_);
        BasicComp = Player::getBasicComp(this->player_);
        PlayerBasicComp::resetCurClimateMeter(BasicComp, 1);
        if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
          __asan_report_load8(&this->player_);
        RegionalPlayComp = Player::getRegionalPlayComp(this->player_);
        PlayerRegionalPlayComp::onRebornTeam(RegionalPlayComp);
        if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
          __asan_report_load8(&this->player_);
        player = this->player_;
        std::shared_ptr<Scene>::shared_ptr(&p_cur_scene_ptr, (const std::shared_ptr<Scene> *)(v1 + 96));
        ret = Player::beginEnterScene(
                player,
                &p_cur_scene_ptr,
                (const Vector3 *)(v1 + 32),
                (const Vector3 *)(v1 + 64),
                ENTER_GOTO,
                VISION_REBORN,
                0,
                0,
                ENTER_REASON_REVIVAL);
        std::shared_ptr<Scene>::~shared_ptr(&p_cur_scene_ptr);
        if ( ret )
        {
          common::milog::MiLogStream::create(
            &v21,
            &common::milog::MiLogDefault::default_log_obj_,
            3u,
            "./src/player/avatar/player_avatar_comp.cpp",
            "rebornTeam",
            2678);
          v13 = common::milog::MiLogStream::operator<<<char [27],(char *[27])0>(
                  &v21,
                  (const char (*)[27])"beginTransToScenePos fails");
          v14 = std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::operator*((const std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false> *const)&this->cur_avatar_ptr_);
          common::milog::MiLogStream::operator<<<Avatar,(Avatar*)0>(v13, v14);
          common::milog::MiLogStream::~MiLogStream(&v21);
          v4 = ret;
        }
        else
        {
          common::milog::MiLogStream::create(
            &v21,
            &common::milog::MiLogDefault::default_log_obj_,
            2u,
            "./src/player/avatar/player_avatar_comp.cpp",
            "rebornTeam",
            2682);
          v15 = common::milog::MiLogStream::operator<<<char [33],(char *[33])0>(
                  &v21,
                  (const char (*)[33])"[REBORN] rebornTeam succed, uid:");
          if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
            __asan_report_load8(&this->player_);
          val = Player::getUid(this->player_);
          common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v15, &val);
          common::milog::MiLogStream::~MiLogStream(&v21);
          v4 = 0;
        }
      }
    }
    std::shared_ptr<Scene>::~shared_ptr((std::shared_ptr<Scene> *const)(v1 + 96));
  }
  result = v4;
  if ( v22 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 2687: range 000000001717C690-000000001717E3B3
int32_t __cdecl PlayerAvatarComp::findRebornPositionRotation(
        PlayerAvatarComp *const this,
        bool is_trans_to_normal_point,
        ScenePtr *p_cur_scene_ptr,
        Vector3 *reborn_pos,
        Vector3 *reborn_rot)
{
  int32_t v5; // r14d
  unsigned __int64 v6; // r13
  __int64 v7; // rax
  _DWORD *v8; // r12
  common::milog::MiLogStream *v9; // rbx
  const Vector3 *MovePos; // rdx
  const Vector3 *MoveRot; // rdx
  common::milog::MiLogStream *v13; // r14
  int v14; // r15d
  common::milog::MiLogStream *v15; // r15
  std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v16; // rax
  std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v17; // rax
  common::milog::MiLogStream *v18; // rax
  uint32_t v19; // r14d
  common::milog::MiLogStream *v20; // r14
  common::milog::MiLogStream *v21; // r14
  common::milog::MiLogStream *v22; // rax
  common::milog::MiLogStream *v23; // r14
  std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v24; // rax
  common::milog::MiLogStream *v25; // r14
  std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v26; // rax
  Scene *v27; // rax
  SceneTransferGuardComp *TransferGuardComp; // r14
  uint32_t Uid; // eax
  Scene *v30; // rax
  SceneTransferGuardComp *v31; // r14
  uint32_t v32; // esi
  char v33; // al
  common::milog::MiLogStream *v34; // r14
  common::milog::MiLogStream *v35; // rax
  common::milog::MiLogStream *v36; // rdx
  common::milog::MiLogStream *v37; // rax
  common::milog::MiLogStream *v38; // rdx
  Scene *v39; // rax
  SceneMultistagePlayComp *MultistagePlayComp; // r14
  uint32_t v41; // esi
  Scene *v42; // rax
  Player *v43; // rax
  PlayerMpPlayComp *MpPlayComp; // rax
  common::milog::MiLogStream *v46; // rdx
  common::milog::MiLogStream *v47; // rax
  common::milog::MiLogStream *v48; // rax
  common::milog::MiLogStream *v49; // rax
  common::milog::MiLogStream *v50; // rax
  common::milog::MiLogStream *v51; // rax
  common::milog::MiLogStream *v52; // r14
  Player *v53; // rax
  PlayerScenePlayComp *ScenePlayComp; // rax
  common::milog::MiLogStream *v56; // rdx
  common::milog::MiLogStream *v57; // rax
  common::milog::MiLogStream *v58; // rax
  common::milog::MiLogStream *v59; // rax
  common::milog::MiLogStream *v60; // rax
  common::milog::MiLogStream *v61; // rax
  Scene *v62; // rax
  SceneGalleryComp *GalleryComp; // rcx
  common::milog::MiLogStream *v65; // rdx
  common::milog::MiLogStream *v66; // rax
  common::milog::MiLogStream *v67; // rax
  common::milog::MiLogStream *v68; // rax
  common::milog::MiLogStream *v69; // rax
  common::milog::MiLogStream *v70; // rax
  std::__shared_ptr_access<SceneTransferAwaiter,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v71; // rax
  std::__shared_ptr_access<SceneTransferAwaiter,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v72; // r14
  uint32_t v73; // eax
  unsigned __int64 v74; // rax
  unsigned __int64 v75; // rdx
  char v76; // al
  common::milog::MiLogStream *v77; // rdx
  common::milog::MiLogStream *v78; // rax
  common::milog::MiLogStream *v79; // rax
  common::milog::MiLogStream *v80; // rax
  common::milog::MiLogStream *v81; // rax
  common::milog::MiLogStream *v82; // rax
  PlayerSceneComp *SceneComp; // rax
  int32_t result; // eax
  bool is_trans_to_normal_pointa; // [rsp+24h] [rbp-14Ch]
  bool point_found; // [rsp+33h] [rbp-13Dh]
  unsigned int val; // [rsp+34h] [rbp-13Ch] BYREF
  PlayerQuestComp *quest_comp; // [rsp+38h] [rbp-138h]
  const SceneScriptConfig *scene_script_config_ptr; // [rsp+40h] [rbp-130h]
  const Vector3 *cur_pos; // [rsp+48h] [rbp-128h]
  const Vector3 *last_valid_pos; // [rsp+50h] [rbp-120h]
  const Vector3 *last_valid_rot; // [rsp+58h] [rbp-118h]
  common::milog::MiLogStream v96; // [rsp+60h] [rbp-110h] BYREF
  common::milog::MiLogStream v97; // [rsp+80h] [rbp-F0h] BYREF
  char v98[208]; // [rsp+A0h] [rbp-D0h] BYREF

  is_trans_to_normal_pointa = is_trans_to_normal_point;
  v6 = (unsigned __int64)v98;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v7 = __asan_stack_malloc_2(160LL);
    if ( v7 )
      v6 = v7;
  }
  *(_QWORD *)v6 = 1102416563LL;
  *(_QWORD *)(v6 + 8) = "4 48 4 13 scene_id:2718 64 16 24 player_location_ptr:2726 96 16 19 own_player_ptr:2777 128 16 16"
                        " awaiter_ptr:2778";
  *(_QWORD *)(v6 + 16) = PlayerAvatarComp::findRebornPositionRotation;
  v8 = (_DWORD *)(v6 >> 3);
  v8[536862720] = -235802127;
  v8[536862721] = -234556943;
  v8[536862722] = -219021312;
  v8[536862723] = -219021312;
  v8[536862724] = -202178560;
  if ( std::operator==<Avatar>(0LL, &this->cur_avatar_ptr_) )
  {
    common::milog::MiLogStream::create(
      &v97,
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/player/avatar/player_avatar_comp.cpp",
      "findRebornPositionRotation",
      2690);
    common::milog::MiLogStream::operator<<<char [27],(char *[27])0>(
      &v97,
      (const char (*)[27])"cur_avatar_ptr_ is nullptr");
    common::milog::MiLogStream::~MiLogStream(&v97);
    v5 = -1;
    goto LABEL_138;
  }
  if ( std::operator==<Scene>(0LL, p_cur_scene_ptr) )
  {
    common::milog::MiLogStream::create(
      &v97,
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/player/avatar/player_avatar_comp.cpp",
      "findRebornPositionRotation",
      2695);
    v9 = common::milog::MiLogStream::operator<<<char [31],(char *[31])0>(
           &v97,
           (const char (*)[31])"cur_scene_ptr is nullptr, uid:");
    if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
      __asan_report_load8(&this->player_);
    val = Player::getUid(this->player_);
    common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v9, &val);
    common::milog::MiLogStream::~MiLogStream(&v97);
    v5 = -1;
    goto LABEL_138;
  }
  if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
    __asan_report_load8(&this->player_);
  quest_comp = Player::getQuestComp(this->player_);
  if ( !PlayerQuestComp::isMovePosOnLogin(quest_comp) )
    goto LABEL_33;
  PlayerQuestComp::setIsMovePosOnLogin(quest_comp, 0);
  PlayerQuestComp::getMoveScene((const PlayerQuestComp *const)(v6 + 128));
  PlayerQuestComp::resetMoveSceneWtr(quest_comp);
  if ( std::operator!=<Scene>((const std::shared_ptr<Scene> *)(v6 + 128), 0LL)
    && std::operator==<Scene,Scene>((const std::shared_ptr<Scene> *)(v6 + 128), p_cur_scene_ptr) )
  {
    MovePos = PlayerQuestComp::getMovePos(quest_comp);
    if ( ((unsigned __int8)reborn_pos & 7) >= *(_BYTE *)(((unsigned __int64)reborn_pos >> 3) + 0x7FFF8000)
      && *(_BYTE *)(((unsigned __int64)reborn_pos >> 3) + 0x7FFF8000) != 0
      || *(_BYTE *)((((unsigned __int64)&reborn_pos->z + 3) >> 3) + 0x7FFF8000) != 0
      && (((unsigned __int8)reborn_pos + 11) & 7) >= *(_BYTE *)((((unsigned __int64)&reborn_pos->z + 3) >> 3)
                                                              + 0x7FFF8000) )
    {
      __asan_report_store_n(reborn_pos, 12LL);
    }
    if ( ((unsigned __int8)MovePos & 7) >= *(_BYTE *)(((unsigned __int64)MovePos >> 3) + 0x7FFF8000)
      && *(_BYTE *)(((unsigned __int64)MovePos >> 3) + 0x7FFF8000) != 0
      || *(_BYTE *)((((unsigned __int64)&MovePos->z + 3) >> 3) + 0x7FFF8000) != 0
      && (((unsigned __int8)MovePos + 11) & 7) >= *(_BYTE *)((((unsigned __int64)&MovePos->z + 3) >> 3) + 0x7FFF8000) )
    {
      __asan_report_load_n(MovePos, 12LL);
    }
    *(_QWORD *)&reborn_pos->x = *(_QWORD *)&MovePos->x;
    reborn_pos->z = MovePos->z;
    MoveRot = PlayerQuestComp::getMoveRot(quest_comp);
    if ( ((unsigned __int8)reborn_rot & 7) >= *(_BYTE *)(((unsigned __int64)reborn_rot >> 3) + 0x7FFF8000)
      && *(_BYTE *)(((unsigned __int64)reborn_rot >> 3) + 0x7FFF8000) != 0
      || *(_BYTE *)((((unsigned __int64)&reborn_rot->z + 3) >> 3) + 0x7FFF8000) != 0
      && (((unsigned __int8)reborn_rot + 11) & 7) >= *(_BYTE *)((((unsigned __int64)&reborn_rot->z + 3) >> 3)
                                                              + 0x7FFF8000) )
    {
      __asan_report_store_n(reborn_rot, 12LL);
    }
    if ( ((unsigned __int8)MoveRot & 7) >= *(_BYTE *)(((unsigned __int64)MoveRot >> 3) + 0x7FFF8000)
      && *(_BYTE *)(((unsigned __int64)MoveRot >> 3) + 0x7FFF8000) != 0
      || *(_BYTE *)((((unsigned __int64)&MoveRot->z + 3) >> 3) + 0x7FFF8000) != 0
      && (((unsigned __int8)MoveRot + 11) & 7) >= *(_BYTE *)((((unsigned __int64)&MoveRot->z + 3) >> 3) + 0x7FFF8000) )
    {
      __asan_report_load_n(MoveRot, 12LL);
    }
    *(_QWORD *)&reborn_rot->x = *(_QWORD *)&MoveRot->x;
    reborn_rot->z = MoveRot->z;
    common::milog::MiLogStream::create(
      &v97,
      &common::milog::MiLogDefault::default_log_obj_,
      1u,
      "./src/player/avatar/player_avatar_comp.cpp",
      "findRebornPositionRotation",
      2709);
    v13 = common::milog::MiLogStream::operator<<<char [46],(char *[46])0>(
            &v97,
            (const char (*)[46])"rebornTeam to postion because of rewind, uid:");
    if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
      __asan_report_load8(&this->player_);
    val = Player::getUid(this->player_);
    common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v13, &val);
    common::milog::MiLogStream::~MiLogStream(&v97);
    v5 = 0;
    v14 = 0;
  }
  else
  {
    common::milog::MiLogStream::create(
      &v97,
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/player/avatar/player_avatar_comp.cpp",
      "findRebornPositionRotation",
      2714);
    v15 = common::milog::MiLogStream::operator<<<char [33],(char *[33])0>(
            &v97,
            (const char (*)[33])"rebornTeam scene not match, uid:");
    if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
      __asan_report_load8(&this->player_);
    val = Player::getUid(this->player_);
    common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v15, &val);
    common::milog::MiLogStream::~MiLogStream(&v97);
    v14 = 1;
  }
  std::shared_ptr<Scene>::~shared_ptr((std::shared_ptr<Scene> *const)(v6 + 128));
  if ( v14 == 1 )
  {
LABEL_33:
    v16 = std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false> *const)p_cur_scene_ptr);
    *(_DWORD *)(v6 + 48) = Scene::getSceneId(v16);
    ServiceBox::findService<GameserverService>();
    GameserverService::getConfig((GameserverService *const)(v6 + 128));
    v17 = std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v6 + 128));
    scene_script_config_ptr = LuaConfigMgr::findSceneScriptConfig(
                                &v17->design_config.lua_config_mgr,
                                *(_DWORD *)(v6 + 48));
    std::shared_ptr<Config>::~shared_ptr((std::shared_ptr<Config> *const)(v6 + 128));
    if ( !scene_script_config_ptr )
    {
      common::milog::MiLogStream::create(
        &v97,
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/player/avatar/player_avatar_comp.cpp",
        "findRebornPositionRotation",
        2722);
      v18 = common::milog::MiLogStream::operator<<<char [39],(char *[39])0>(
              &v97,
              (const char (*)[39])"findSceneScriptConfig fails, scene_id:");
      common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v18, (const unsigned int *)(v6 + 48));
      common::milog::MiLogStream::~MiLogStream(&v97);
      v5 = -1;
      goto LABEL_138;
    }
    v19 = (unsigned int)std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false> *const)p_cur_scene_ptr);
    if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
      __asan_report_load8(&this->player_);
    Player::getUid(this->player_);
    Scene::getPlayerLocation((Scene *const)(v6 + 64), v19);
    if ( std::operator==<ScenePlayerLocation>((const std::shared_ptr<ScenePlayerLocation> *)(v6 + 64), 0LL) )
    {
      common::milog::MiLogStream::create(
        &v97,
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/player/avatar/player_avatar_comp.cpp",
        "findRebornPositionRotation",
        2729);
      v20 = common::milog::MiLogStream::operator<<<char [32],(char *[32])0>(
              &v97,
              (const char (*)[32])"findPlayerLocation failed, uid:");
      if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
        __asan_report_load8(&this->player_);
      val = Player::getUid(this->player_);
      common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v20, &val);
      common::milog::MiLogStream::~MiLogStream(&v97);
      if ( ((unsigned __int8)reborn_pos & 7) >= *(_BYTE *)(((unsigned __int64)reborn_pos >> 3) + 0x7FFF8000)
        && *(_BYTE *)(((unsigned __int64)reborn_pos >> 3) + 0x7FFF8000) != 0
        || *(_BYTE *)((((unsigned __int64)&reborn_pos->z + 3) >> 3) + 0x7FFF8000) != 0
        && (((unsigned __int8)reborn_pos + 11) & 7) >= *(_BYTE *)((((unsigned __int64)&reborn_pos->z + 3) >> 3)
                                                                + 0x7FFF8000) )
      {
        __asan_report_store_n(reborn_pos, 12LL);
      }
      if ( (((unsigned __int8)scene_script_config_ptr - 52) & 7) >= *(_BYTE *)(((unsigned __int64)&scene_script_config_ptr->born_pos >> 3)
                                                                             + 0x7FFF8000)
        && *(_BYTE *)(((unsigned __int64)&scene_script_config_ptr->born_pos >> 3) + 0x7FFF8000) != 0
        || *(_BYTE *)((((unsigned __int64)&scene_script_config_ptr->born_pos.z + 3) >> 3) + 0x7FFF8000) != 0
        && (((unsigned __int8)scene_script_config_ptr - 41) & 7) >= *(_BYTE *)((((unsigned __int64)&scene_script_config_ptr->born_pos.z
                                                                               + 3) >> 3)
                                                                             + 0x7FFF8000) )
      {
        __asan_report_load_n(&scene_script_config_ptr->born_pos, 12LL);
      }
      *reborn_pos = scene_script_config_ptr->born_pos;
      if ( ((unsigned __int8)reborn_rot & 7) >= *(_BYTE *)(((unsigned __int64)reborn_rot >> 3) + 0x7FFF8000)
        && *(_BYTE *)(((unsigned __int64)reborn_rot >> 3) + 0x7FFF8000) != 0
        || *(_BYTE *)((((unsigned __int64)&reborn_rot->z + 3) >> 3) + 0x7FFF8000) != 0
        && (((unsigned __int8)reborn_rot + 11) & 7) >= *(_BYTE *)((((unsigned __int64)&reborn_rot->z + 3) >> 3)
                                                                + 0x7FFF8000) )
      {
        __asan_report_store_n(reborn_rot, 12LL);
      }
      if ( *(char *)(((unsigned __int64)&scene_script_config_ptr->born_rot >> 3) + 0x7FFF8000) < 0
        || *(_BYTE *)((((unsigned __int64)&scene_script_config_ptr->born_rot.z + 3) >> 3) + 0x7FFF8000) != 0
        && (((unsigned __int8)scene_script_config_ptr - 29) & 7) >= *(_BYTE *)((((unsigned __int64)&scene_script_config_ptr->born_rot.z
                                                                               + 3) >> 3)
                                                                             + 0x7FFF8000) )
      {
        __asan_report_load_n(&scene_script_config_ptr->born_rot, 12LL);
      }
      *reborn_rot = scene_script_config_ptr->born_rot;
      v5 = 0;
LABEL_137:
      std::shared_ptr<ScenePlayerLocation>::~shared_ptr((std::shared_ptr<ScenePlayerLocation> *const)(v6 + 64));
      goto LABEL_138;
    }
    cur_pos = (const Vector3 *)std::__shared_ptr_access<ScenePlayerLocation,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<ScenePlayerLocation,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v6 + 64));
    last_valid_pos = &std::__shared_ptr_access<ScenePlayerLocation,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<ScenePlayerLocation,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v6 + 64))->last_valid_pos;
    last_valid_rot = &std::__shared_ptr_access<ScenePlayerLocation,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<ScenePlayerLocation,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v6 + 64))->last_valid_rot;
    if ( is_trans_to_normal_point )
    {
      if ( !SceneScriptConfig::isPosValid(scene_script_config_ptr, last_valid_pos) )
      {
        common::milog::MiLogStream::create(
          &v96,
          &common::milog::MiLogDefault::default_log_obj_,
          3u,
          "./src/player/avatar/player_avatar_comp.cpp",
          "findRebornPositionRotation",
          2743);
        v21 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                &v96,
                (const char (*)[16])"last_valid_pos ");
        Vector3::toString[abi:cxx11]((std::string *)&v97, last_valid_pos);
        v22 = common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v21, (const std::string *)&v97);
        v23 = common::milog::MiLogStream::operator<<<char [12],(char *[12])0>(v22, (const char (*)[12])off_2603E240);
        v24 = std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::operator*((const std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false> *const)&this->cur_avatar_ptr_);
        common::milog::MiLogStream::operator<<<Avatar,(Avatar*)0>(v23, v24);
        std::string::~string(&v97);
        common::milog::MiLogStream::~MiLogStream(&v96);
        is_trans_to_normal_pointa = 0;
      }
      else if ( getDistance(last_valid_pos, cur_pos) < 0.1 )
      {
        common::milog::MiLogStream::create(
          &v97,
          &common::milog::MiLogDefault::default_log_obj_,
          1u,
          "./src/player/avatar/player_avatar_comp.cpp",
          "findRebornPositionRotation",
          2748);
        v25 = common::milog::MiLogStream::operator<<<char [31],(char *[31])0>(
                &v97,
                (const char (*)[31])"last_valid_pos is near cur pos");
        v26 = std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::operator*((const std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false> *const)&this->cur_avatar_ptr_);
        common::milog::MiLogStream::operator<<<Avatar,(Avatar*)0>(v25, v26);
        common::milog::MiLogStream::~MiLogStream(&v97);
        is_trans_to_normal_pointa = 0;
      }
    }
    point_found = 0;
    v27 = std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false> *const)p_cur_scene_ptr);
    TransferGuardComp = Scene::getTransferGuardComp(v27);
    if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
      __asan_report_load8(&this->player_);
    Uid = Player::getUid(this->player_);
    if ( !SceneTransferGuardComp::isCanSetPlayerRebornPosAndRot(TransferGuardComp, Uid) )
      goto LABEL_61;
    v30 = std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false> *const)p_cur_scene_ptr);
    v31 = Scene::getTransferGuardComp(v30);
    if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
      __asan_report_load8(&this->player_);
    v32 = Player::getUid(this->player_);
    if ( SceneTransferGuardComp::findPlayerPosAndRot(v31, v32, reborn_pos, reborn_rot) )
LABEL_61:
      v33 = 0;
    else
      v33 = 1;
    if ( v33 )
    {
      common::milog::MiLogStream::create(
        &v97,
        &common::milog::MiLogDefault::default_log_obj_,
        1u,
        "./src/player/avatar/player_avatar_comp.cpp",
        "findRebornPositionRotation",
        2759);
      v34 = common::milog::MiLogStream::operator<<<char [41],(char *[41])0>(
              &v97,
              (const char (*)[41])"transfer guard set reborn pos succ, uid:");
      if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
        __asan_report_load8(&this->player_);
      val = Player::getUid(this->player_);
      v35 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v34, &val);
      v36 = common::milog::MiLogStream::operator<<<char [7],(char *[7])0>(v35, (const char (*)[7])", pos:");
      v37 = operator<<(v36, reborn_pos);
      v38 = common::milog::MiLogStream::operator<<<char [7],(char *[7])0>(v37, (const char (*)[7])", rot:");
      operator<<(v38, reborn_rot);
      common::milog::MiLogStream::~MiLogStream(&v97);
      point_found = 1;
      goto LABEL_126;
    }
    v39 = std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false> *const)p_cur_scene_ptr);
    MultistagePlayComp = Scene::getMultistagePlayComp(v39);
    if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
      __asan_report_load8(&this->player_);
    v41 = Player::getUid(this->player_);
    if ( !SceneMultistagePlayComp::findPlayerPosAndRot(MultistagePlayComp, v41, reborn_pos, reborn_rot) )
    {
      point_found = 1;
LABEL_126:
      if ( !point_found )
      {
        if ( ((unsigned __int8)reborn_pos & 7) >= *(_BYTE *)(((unsigned __int64)reborn_pos >> 3) + 0x7FFF8000)
          && *(_BYTE *)(((unsigned __int64)reborn_pos >> 3) + 0x7FFF8000) != 0
          || *(_BYTE *)((((unsigned __int64)&reborn_pos->z + 3) >> 3) + 0x7FFF8000) != 0
          && (((unsigned __int8)reborn_pos + 11) & 7) >= *(_BYTE *)((((unsigned __int64)&reborn_pos->z + 3) >> 3)
                                                                  + 0x7FFF8000) )
        {
          __asan_report_store_n(reborn_pos, 12LL);
        }
        if ( (((unsigned __int8)scene_script_config_ptr - 52) & 7) >= *(_BYTE *)(((unsigned __int64)&scene_script_config_ptr->born_pos >> 3)
                                                                               + 0x7FFF8000)
          && *(_BYTE *)(((unsigned __int64)&scene_script_config_ptr->born_pos >> 3) + 0x7FFF8000) != 0
          || *(_BYTE *)((((unsigned __int64)&scene_script_config_ptr->born_pos.z + 3) >> 3) + 0x7FFF8000) != 0
          && (((unsigned __int8)scene_script_config_ptr - 41) & 7) >= *(_BYTE *)((((unsigned __int64)&scene_script_config_ptr->born_pos.z
                                                                                 + 3) >> 3)
                                                                               + 0x7FFF8000) )
        {
          __asan_report_load_n(&scene_script_config_ptr->born_pos, 12LL);
        }
        *reborn_pos = scene_script_config_ptr->born_pos;
        if ( ((unsigned __int8)reborn_rot & 7) >= *(_BYTE *)(((unsigned __int64)reborn_rot >> 3) + 0x7FFF8000)
          && *(_BYTE *)(((unsigned __int64)reborn_rot >> 3) + 0x7FFF8000) != 0
          || *(_BYTE *)((((unsigned __int64)&reborn_rot->z + 3) >> 3) + 0x7FFF8000) != 0
          && (((unsigned __int8)reborn_rot + 11) & 7) >= *(_BYTE *)((((unsigned __int64)&reborn_rot->z + 3) >> 3)
                                                                  + 0x7FFF8000) )
        {
          __asan_report_store_n(reborn_rot, 12LL);
        }
        if ( *(char *)(((unsigned __int64)&scene_script_config_ptr->born_rot >> 3) + 0x7FFF8000) < 0
          || *(_BYTE *)((((unsigned __int64)&scene_script_config_ptr->born_rot.z + 3) >> 3) + 0x7FFF8000) != 0
          && (((unsigned __int8)scene_script_config_ptr - 29) & 7) >= *(_BYTE *)((((unsigned __int64)&scene_script_config_ptr->born_rot.z
                                                                                 + 3) >> 3)
                                                                               + 0x7FFF8000) )
        {
          __asan_report_load_n(&scene_script_config_ptr->born_rot, 12LL);
        }
        *reborn_rot = scene_script_config_ptr->born_rot;
      }
      v5 = 0;
      goto LABEL_137;
    }
    if ( is_trans_to_normal_pointa )
    {
      if ( ((unsigned __int8)reborn_pos & 7) >= *(_BYTE *)(((unsigned __int64)reborn_pos >> 3) + 0x7FFF8000)
        && *(_BYTE *)(((unsigned __int64)reborn_pos >> 3) + 0x7FFF8000) != 0
        || *(_BYTE *)((((unsigned __int64)&reborn_pos->z + 3) >> 3) + 0x7FFF8000) != 0
        && (((unsigned __int8)reborn_pos + 11) & 7) >= *(_BYTE *)((((unsigned __int64)&reborn_pos->z + 3) >> 3)
                                                                + 0x7FFF8000) )
      {
        __asan_report_store_n(reborn_pos, 12LL);
      }
      if ( ((unsigned __int8)last_valid_pos & 7) >= *(_BYTE *)(((unsigned __int64)last_valid_pos >> 3) + 0x7FFF8000)
        && *(_BYTE *)(((unsigned __int64)last_valid_pos >> 3) + 0x7FFF8000) != 0
        || *(_BYTE *)((((unsigned __int64)&last_valid_pos->z + 3) >> 3) + 0x7FFF8000) != 0
        && (((unsigned __int8)last_valid_pos + 11) & 7) >= *(_BYTE *)((((unsigned __int64)&last_valid_pos->z + 3) >> 3)
                                                                    + 0x7FFF8000) )
      {
        __asan_report_load_n(last_valid_pos, 12LL);
      }
      *reborn_pos = *last_valid_pos;
      if ( ((unsigned __int8)reborn_rot & 7) >= *(_BYTE *)(((unsigned __int64)reborn_rot >> 3) + 0x7FFF8000)
        && *(_BYTE *)(((unsigned __int64)reborn_rot >> 3) + 0x7FFF8000) != 0
        || *(_BYTE *)((((unsigned __int64)&reborn_rot->z + 3) >> 3) + 0x7FFF8000) != 0
        && (((unsigned __int8)reborn_rot + 11) & 7) >= *(_BYTE *)((((unsigned __int64)&reborn_rot->z + 3) >> 3)
                                                                + 0x7FFF8000) )
      {
        __asan_report_store_n(reborn_rot, 12LL);
      }
      if ( ((unsigned __int8)last_valid_rot & 7) >= *(_BYTE *)(((unsigned __int64)last_valid_rot >> 3) + 0x7FFF8000)
        && *(_BYTE *)(((unsigned __int64)last_valid_rot >> 3) + 0x7FFF8000) != 0
        || *(_BYTE *)((((unsigned __int64)&last_valid_rot->z + 3) >> 3) + 0x7FFF8000) != 0
        && (((unsigned __int8)last_valid_rot + 11) & 7) >= *(_BYTE *)((((unsigned __int64)&last_valid_rot->z + 3) >> 3)
                                                                    + 0x7FFF8000) )
      {
        __asan_report_load_n(last_valid_rot, 12LL);
      }
      *reborn_rot = *last_valid_rot;
      point_found = 1;
      goto LABEL_126;
    }
    std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false> *const)p_cur_scene_ptr);
    Scene::getOwnPlayer((const Scene *const)(v6 + 96));
    v42 = std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false> *const)p_cur_scene_ptr);
    Scene::getGalleryComp(v42);
    SceneGalleryComp::getSceneTransferAwaiter((const SceneGalleryComp *const)(v6 + 128));
    if ( std::operator!=<Player>((const std::shared_ptr<Player> *)(v6 + 96), 0LL)
      && (v43 = std::__shared_ptr_access<Player,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Player,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v6 + 96)),
          MpPlayComp = Player::getMpPlayComp(v43),
          !PlayerMpPlayComp::findNearestRebornPosRot(MpPlayComp, *(_DWORD *)(v6 + 48), cur_pos, reborn_pos, reborn_rot)) )
    {
      common::milog::MiLogStream::create(
        &v97,
        &common::milog::MiLogDefault::default_log_obj_,
        2u,
        "./src/player/avatar/player_avatar_comp.cpp",
        "findRebornPositionRotation",
        2781);
      v46 = common::milog::MiLogStream::operator<<<char [24],(char *[24])0>(
              &v97,
              (const char (*)[24])"findNearestRebornPoint:");
      v47 = common::milog::MiLogStream::operator<<<float,(float *)0>(v46, &reborn_pos->x);
      v48 = common::milog::MiLogStream::operator<<<char [2],(char *[2])0>(v47, (const char (*)[2])",");
      v49 = common::milog::MiLogStream::operator<<<float,(float *)0>(v48, &reborn_pos->y);
      v50 = common::milog::MiLogStream::operator<<<char [2],(char *[2])0>(v49, (const char (*)[2])",");
      v51 = common::milog::MiLogStream::operator<<<float,(float *)0>(v50, &reborn_pos->z);
      v52 = common::milog::MiLogStream::operator<<<char [6],(char *[6])0>(v51, (const char (*)[6])" uid:");
      if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
        __asan_report_load8(&this->player_);
    }
    else if ( std::operator!=<Player>((const std::shared_ptr<Player> *)(v6 + 96), 0LL)
           && (v53 = std::__shared_ptr_access<Player,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Player,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v6 + 96)),
               ScenePlayComp = Player::getScenePlayComp(v53),
               !PlayerScenePlayComp::findNearestRebornPosRot(
                  ScenePlayComp,
                  *(_DWORD *)(v6 + 48),
                  cur_pos,
                  reborn_pos,
                  reborn_rot)) )
    {
      common::milog::MiLogStream::create(
        &v97,
        &common::milog::MiLogDefault::default_log_obj_,
        2u,
        "./src/player/avatar/player_avatar_comp.cpp",
        "findRebornPositionRotation",
        2786);
      v56 = common::milog::MiLogStream::operator<<<char [34],(char *[34])0>(
              &v97,
              (const char (*)[34])"ScenePlay findNearestRebornPoint:");
      v57 = common::milog::MiLogStream::operator<<<float,(float *)0>(v56, &reborn_pos->x);
      v58 = common::milog::MiLogStream::operator<<<char [2],(char *[2])0>(v57, (const char (*)[2])",");
      v59 = common::milog::MiLogStream::operator<<<float,(float *)0>(v58, &reborn_pos->y);
      v60 = common::milog::MiLogStream::operator<<<char [2],(char *[2])0>(v59, (const char (*)[2])",");
      v61 = common::milog::MiLogStream::operator<<<float,(float *)0>(v60, &reborn_pos->z);
      v52 = common::milog::MiLogStream::operator<<<char [6],(char *[6])0>(v61, (const char (*)[6])" uid:");
      if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
        __asan_report_load8(&this->player_);
    }
    else if ( std::operator!=<Scene>(p_cur_scene_ptr, 0LL)
           && (v62 = std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false> *const)p_cur_scene_ptr),
               GalleryComp = Scene::getGalleryComp(v62),
               !SceneGalleryComp::findGalleryRebornPosRot(GalleryComp, reborn_pos, reborn_rot)) )
    {
      common::milog::MiLogStream::create(
        &v97,
        &common::milog::MiLogDefault::default_log_obj_,
        2u,
        "./src/player/avatar/player_avatar_comp.cpp",
        "findRebornPositionRotation",
        2791);
      v65 = common::milog::MiLogStream::operator<<<char [29],(char *[29])0>(
              &v97,
              (const char (*)[29])"ScenePlay findGalleryPosRot:");
      v66 = common::milog::MiLogStream::operator<<<float,(float *)0>(v65, &reborn_pos->x);
      v67 = common::milog::MiLogStream::operator<<<char [2],(char *[2])0>(v66, (const char (*)[2])",");
      v68 = common::milog::MiLogStream::operator<<<float,(float *)0>(v67, &reborn_pos->y);
      v69 = common::milog::MiLogStream::operator<<<char [2],(char *[2])0>(v68, (const char (*)[2])",");
      v70 = common::milog::MiLogStream::operator<<<float,(float *)0>(v69, &reborn_pos->z);
      v52 = common::milog::MiLogStream::operator<<<char [6],(char *[6])0>(v70, (const char (*)[6])" uid:");
      if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
        __asan_report_load8(&this->player_);
    }
    else
    {
      if ( !std::operator!=<Scene>(p_cur_scene_ptr, 0LL) )
        goto LABEL_116;
      if ( !std::operator!=<SceneTransferAwaiter>((const std::shared_ptr<SceneTransferAwaiter> *)(v6 + 128), 0LL) )
        goto LABEL_116;
      v71 = std::__shared_ptr_access<SceneTransferAwaiter,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<SceneTransferAwaiter,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v6 + 128));
      if ( !SceneTransferAwaiter::isActive(v71) )
        goto LABEL_116;
      v72 = std::__shared_ptr_access<SceneTransferAwaiter,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<SceneTransferAwaiter,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v6 + 128));
      if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
        __asan_report_load8(&this->player_);
      v73 = Player::getUid(this->player_);
      if ( !SceneTransferAwaiter::isContainsPlayer(v72, v73) )
        goto LABEL_116;
      v74 = (unsigned __int64)std::__shared_ptr_access<SceneTransferAwaiter,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<SceneTransferAwaiter,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v6 + 128));
      if ( *(_BYTE *)((v74 >> 3) + 0x7FFF8000) )
        v74 = __asan_report_load8(v74);
      v75 = *(_QWORD *)v74 + 88LL;
      if ( *(_BYTE *)((v75 >> 3) + 0x7FFF8000) )
        v74 = __asan_report_load8(*(_QWORD *)v74 + 88LL);
      if ( !(*(unsigned int (__fastcall **)(unsigned __int64, Vector3 *, Vector3 *))v75)(v74, reborn_pos, reborn_rot) )
        v76 = 1;
      else
LABEL_116:
        v76 = 0;
      if ( !v76 )
      {
        if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
          __asan_report_load8(&this->player_);
        SceneComp = Player::getSceneComp(this->player_);
        if ( !PlayerSceneComp::getNearestUnlockedSceneTransPoint(
                SceneComp,
                *(_DWORD *)(v6 + 48),
                cur_pos,
                reborn_pos,
                reborn_rot) )
          point_found = 1;
        goto LABEL_125;
      }
      common::milog::MiLogStream::create(
        &v97,
        &common::milog::MiLogDefault::default_log_obj_,
        2u,
        "./src/player/avatar/player_avatar_comp.cpp",
        "findRebornPositionRotation",
        2796);
      v77 = common::milog::MiLogStream::operator<<<char [40],(char *[40])0>(
              &v97,
              (const char (*)[40])"SceneTransferAwaiter findGalleryPosRot:");
      v78 = common::milog::MiLogStream::operator<<<float,(float *)0>(v77, &reborn_pos->x);
      v79 = common::milog::MiLogStream::operator<<<char [2],(char *[2])0>(v78, (const char (*)[2])",");
      v80 = common::milog::MiLogStream::operator<<<float,(float *)0>(v79, &reborn_pos->y);
      v81 = common::milog::MiLogStream::operator<<<char [2],(char *[2])0>(v80, (const char (*)[2])",");
      v82 = common::milog::MiLogStream::operator<<<float,(float *)0>(v81, &reborn_pos->z);
      v52 = common::milog::MiLogStream::operator<<<char [6],(char *[6])0>(v82, (const char (*)[6])" uid:");
      if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
        __asan_report_load8(&this->player_);
    }
    val = Player::getUid(this->player_);
    common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v52, &val);
    common::milog::MiLogStream::~MiLogStream(&v97);
    point_found = 1;
LABEL_125:
    std::shared_ptr<SceneTransferAwaiter>::~shared_ptr((std::shared_ptr<SceneTransferAwaiter> *const)(v6 + 128));
    std::shared_ptr<Player>::~shared_ptr((std::shared_ptr<Player> *const)(v6 + 96));
    goto LABEL_126;
  }
LABEL_138:
  result = v5;
  if ( v98 == (char *)v6 )
  {
    *(_QWORD *)((v6 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v6 >> 3) + 0x7FFF8008) = 0LL;
    *(_DWORD *)((v6 >> 3) + 0x7FFF8010) = 0;
  }
  else
  {
    *(_QWORD *)v6 = 1172321806LL;
    *(_QWORD *)((v6 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v6 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v6 >> 3) + 0x7FFF8010) = -168430091;
  }
  return result;
};

// Line 2818: range 000000001717E400-000000001717EE59
int32_t __cdecl PlayerAvatarComp::replaceWithRebornAvatar(PlayerAvatarComp *const this, proto::VisionType vision_type)
{
  __m128i v2; // xmm0
  unsigned __int64 v3; // rbx
  __int64 v4; // rax
  _DWORD *v5; // r12
  int32_t v7; // r14d
  std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v8; // rax
  common::milog::MiLogStream *v9; // r14
  std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v10; // rax
  std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v11; // r14
  unsigned __int64 v12; // rax
  __int64 (__fastcall *v13)(std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *, std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *, VisionContext *); // r15
  std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v14; // rax
  common::milog::MiLogStream *v15; // r14
  std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v16; // rax
  common::milog::MiLogStream *v17; // r14
  std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v18; // rax
  common::milog::MiLogStream *v19; // rax
  common::milog::MiLogStream *v20; // r14
  std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v21; // rax
  common::milog::MiLogStream *v22; // rax
  common::milog::MiLogStream *v23; // r14
  std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v24; // rax
  common::milog::MiLogStream *v25; // r14
  std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v26; // rax
  common::milog::MiLogStream *v27; // rax
  common::milog::MiLogStream *v28; // r14
  std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v29; // rax
  common::milog::MiLogStream *v30; // rax
  common::milog::MiLogStream *v31; // r14
  std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v32; // rax
  std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v33; // rax
  std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v34; // r14
  unsigned __int64 v35; // rax
  void (__fastcall *v36)(std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *, const Vector3 *); // r15
  std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v37; // rax
  const Vector3 *Position; // rax
  Entity *v39; // r14
  std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v40; // rax
  const Vector3 *Rotation; // rax
  Avatar *v42; // r14
  std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v43; // rax
  const Vector3 *LastValidPos; // rax
  Avatar *v45; // r14
  std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v46; // rax
  const Vector3 *LastValidRot; // rax
  Avatar *v48; // rax
  std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v49; // rax
  std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v50; // r14
  unsigned __int64 v51; // rax
  __int64 (__fastcall *v52)(std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *, std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *, VisionContext *); // r15
  std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v53; // rax
  common::milog::MiLogStream *v54; // r14
  std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v55; // rax
  int32_t result; // eax
  unsigned int AvatarId; // [rsp+28h] [rbp-E8h] BYREF
  float v58; // [rsp+2Ch] [rbp-E4h] BYREF
  unsigned int val; // [rsp+30h] [rbp-E0h] BYREF
  int32_t ret; // [rsp+34h] [rbp-DCh]
  PlayerSceneComp *scene_comp; // [rsp+38h] [rbp-D8h]
  VisionContext v62; // [rsp+44h] [rbp-CCh] BYREF
  std::shared_ptr<Avatar> __r; // [rsp+50h] [rbp-C0h] BYREF
  common::milog::MiLogStream v64; // [rsp+60h] [rbp-B0h] BYREF
  char v65[144]; // [rsp+80h] [rbp-90h] BYREF

  v3 = (unsigned __int64)v65;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_1(96LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "2 32 16 18 cur_scene_ptr:2830 64 16 19 old_avatar_ptr:2866";
  *(_QWORD *)(v3 + 16) = PlayerAvatarComp::replaceWithRebornAvatar;
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = -219021312;
  v5[536862722] = -202178560;
  if ( std::operator==<Avatar>(0LL, &this->reborn_avatar_ptr_) || std::operator==<Avatar>(0LL, &this->cur_avatar_ptr_) )
  {
    v7 = 0;
  }
  else
  {
    v8 = std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false> *const)&this->cur_avatar_ptr_);
    if ( Creature::getLifeState(v8) == LIFE_DEAD )
    {
      if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
        __asan_report_load8(&this->player_);
      scene_comp = Player::getSceneComp(this->player_);
      PlayerSceneComp::getCurScene((const PlayerSceneComp *const)(v3 + 32));
      if ( std::operator==<Scene>(0LL, (const std::shared_ptr<Scene> *)(v3 + 32)) )
      {
        common::milog::MiLogStream::create(
          &v64,
          &common::milog::MiLogDefault::default_log_obj_,
          3u,
          "./src/player/avatar/player_avatar_comp.cpp",
          "replaceWithRebornAvatar",
          2833);
        v9 = common::milog::MiLogStream::operator<<<char [28],(char *[28])0>(
               &v64,
               (const char (*)[28])"cur_scene_ptr is null, uid:");
        if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
          __asan_report_load8(&this->player_);
        val = Player::getUid(this->player_);
        common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v9, &val);
        common::milog::MiLogStream::~MiLogStream(&v64);
        v7 = -1;
      }
      else
      {
        v10 = std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 32));
        v11 = v10;
        if ( *(_BYTE *)(((unsigned __int64)v10 >> 3) + 0x7FFF8000) )
          __asan_report_load8(v10);
        v12 = (unsigned __int64)(v11->_vptr_DescribalBase + 14);
        if ( *(_BYTE *)((v12 >> 3) + 0x7FFF8000) )
          v12 = __asan_report_load8(v11->_vptr_DescribalBase + 14);
        v13 = *(__int64 (__fastcall **)(std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *, std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *, VisionContext *))v12;
        VisionContext::VisionContext(&v62, VISION_DIE);
        v14 = std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::operator*((const std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false> *const)&this->cur_avatar_ptr_);
        ret = v13(v11, v14, &v62);
        if ( ret )
        {
          common::milog::MiLogStream::create(
            &v64,
            &common::milog::MiLogDefault::default_log_obj_,
            3u,
            "./src/player/avatar/player_avatar_comp.cpp",
            "replaceWithRebornAvatar",
            2840);
          v15 = common::milog::MiLogStream::operator<<<char [22],(char *[22])0>(
                  &v64,
                  (const char (*)[22])"entityDisappear fails");
          v16 = std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::operator*((const std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false> *const)&this->cur_avatar_ptr_);
          common::milog::MiLogStream::operator<<<Avatar,(Avatar*)0>(v15, v16);
          common::milog::MiLogStream::~MiLogStream(&v64);
          v7 = -1;
        }
        else
        {
          common::milog::MiLogStream::create(
            &v64,
            &common::milog::MiLogDefault::default_log_obj_,
            1u,
            "./src/player/avatar/player_avatar_comp.cpp",
            "replaceWithRebornAvatar",
            2843);
          v17 = common::milog::MiLogStream::operator<<<char [17],(char *[17])0>(
                  &v64,
                  (const char (*)[17])"entityDisappear ");
          v18 = std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false> *const)&this->cur_avatar_ptr_);
          AvatarId = Avatar::getAvatarId(v18);
          v19 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v17, &AvatarId);
          v20 = common::milog::MiLogStream::operator<<<char [5],(char *[5])0>(v19, (const char (*)[5])" hp:");
          v21 = std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false> *const)&this->cur_avatar_ptr_);
          *(float *)v2.m128i_i32 = Creature::getCurHp(v21);
          LODWORD(v58) = _mm_cvtsi128_si32(v2);
          v22 = common::milog::MiLogStream::operator<<<float,(float *)0>(v20, &v58);
          v23 = common::milog::MiLogStream::operator<<<char [12],(char *[12])0>(v22, (const char (*)[12])" entityid: ");
          v24 = std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false> *const)&this->cur_avatar_ptr_);
          val = Entity::getEntityId((const Entity *const)v24);
          common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v23, &val);
          common::milog::MiLogStream::~MiLogStream(&v64);
          std::function<ForeachPolicy ()(Avatar &)>::function<PlayerAvatarComp::replaceWithRebornAvatar(proto::VisionType)::{lambda(Avatar &)#1},void,void>(
            (std::function<ForeachPolicy(Avatar&)> *const)&v64,
            (PlayerAvatarComp::replaceWithRebornAvatar::<lambda(Avatar&)>)&val);
          PlayerAvatarComp::foreachMyAvatarInSceneTeam(this, (std::function<ForeachPolicy(Avatar&)> *)&v64);
          std::function<ForeachPolicy ()(Avatar &)>::~function((std::function<ForeachPolicy(Avatar&)> *const)&v64);
          common::milog::MiLogStream::create(
            &v64,
            &common::milog::MiLogDefault::default_log_obj_,
            1u,
            "./src/player/avatar/player_avatar_comp.cpp",
            "replaceWithRebornAvatar",
            2854);
          v25 = common::milog::MiLogStream::operator<<<char [14],(char *[14])0>(
                  &v64,
                  (const char (*)[14])"entityAppear ");
          v26 = std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false> *const)&this->reborn_avatar_ptr_);
          AvatarId = Avatar::getAvatarId(v26);
          v27 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v25, &AvatarId);
          v28 = common::milog::MiLogStream::operator<<<char [6],(char *[6])0>(v27, (const char (*)[6])" hp: ");
          v29 = std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false> *const)&this->reborn_avatar_ptr_);
          *(float *)v2.m128i_i32 = Creature::getCurHp(v29);
          LODWORD(v58) = _mm_cvtsi128_si32(v2);
          v30 = common::milog::MiLogStream::operator<<<float,(float *)0>(v28, &v58);
          v31 = common::milog::MiLogStream::operator<<<char [12],(char *[12])0>(v30, (const char (*)[12])" entityid: ");
          v32 = std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false> *const)&this->reborn_avatar_ptr_);
          val = Entity::getEntityId((const Entity *const)v32);
          common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v31, &val);
          common::milog::MiLogStream::~MiLogStream(&v64);
          v33 = std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false> *const)&this->reborn_avatar_ptr_);
          v34 = v33;
          if ( *(_BYTE *)(((unsigned __int64)v33 >> 3) + 0x7FFF8000) )
            __asan_report_load8(v33);
          v35 = *(_QWORD *)v34->baseclass_0 + 80LL;
          if ( *(_BYTE *)((v35 >> 3) + 0x7FFF8000) )
            v35 = __asan_report_load8(*(_QWORD *)v34->baseclass_0 + 80LL);
          v36 = *(void (__fastcall **)(std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *, const Vector3 *))v35;
          v37 = std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false> *const)&this->cur_avatar_ptr_);
          Position = Entity::getPosition((const Entity *const)v37);
          v36(v34, Position);
          v39 = (Entity *)std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false> *const)&this->reborn_avatar_ptr_);
          v40 = std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false> *const)&this->cur_avatar_ptr_);
          Rotation = Entity::getRotation((const Entity *const)v40);
          Entity::setRotation(v39, Rotation);
          v42 = std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false> *const)&this->reborn_avatar_ptr_);
          v43 = std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false> *const)&this->cur_avatar_ptr_);
          LastValidPos = Avatar::getLastValidPos(v43);
          Avatar::setLastValidPos(v42, LastValidPos);
          v45 = std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false> *const)&this->reborn_avatar_ptr_);
          v46 = std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false> *const)&this->cur_avatar_ptr_);
          LastValidRot = Avatar::getLastValidRot(v46);
          Avatar::setLastValidRot(v45, LastValidRot);
          v48 = std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false> *const)&this->reborn_avatar_ptr_);
          Avatar::clearSpeed(v48);
          v49 = std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 32));
          v50 = v49;
          if ( *(_BYTE *)(((unsigned __int64)v49 >> 3) + 0x7FFF8000) )
            __asan_report_load8(v49);
          v51 = (unsigned __int64)(v50->_vptr_DescribalBase + 13);
          if ( *(_BYTE *)((v51 >> 3) + 0x7FFF8000) )
            v51 = __asan_report_load8(v50->_vptr_DescribalBase + 13);
          v52 = *(__int64 (__fastcall **)(std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *, std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *, VisionContext *))v51;
          VisionContext::VisionContext(&v62, vision_type);
          v53 = std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::operator*((const std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false> *const)&this->reborn_avatar_ptr_);
          ret = v52(v50, v53, &v62);
          if ( ret )
          {
            common::milog::MiLogStream::create(
              &v64,
              &common::milog::MiLogDefault::default_log_obj_,
              3u,
              "./src/player/avatar/player_avatar_comp.cpp",
              "replaceWithRebornAvatar",
              2863);
            v54 = common::milog::MiLogStream::operator<<<char [19],(char *[19])0>(
                    &v64,
                    (const char (*)[19])"entityAppear fails");
            v55 = std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::operator*((const std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false> *const)&this->reborn_avatar_ptr_);
            common::milog::MiLogStream::operator<<<Avatar,(Avatar*)0>(v54, v55);
            common::milog::MiLogStream::~MiLogStream(&v64);
            v7 = -1;
          }
          else
          {
            std::shared_ptr<Avatar>::shared_ptr((std::shared_ptr<Avatar> *const)(v3 + 64), &this->cur_avatar_ptr_);
            std::shared_ptr<Avatar>::operator=(&this->cur_avatar_ptr_, &this->reborn_avatar_ptr_);
            std::shared_ptr<Avatar>::shared_ptr(&__r, 0LL);
            std::shared_ptr<Avatar>::operator=(&this->reborn_avatar_ptr_, &__r);
            std::shared_ptr<Avatar>::~shared_ptr(&__r);
            v7 = 0;
            std::shared_ptr<Avatar>::~shared_ptr((std::shared_ptr<Avatar> *const)(v3 + 64));
          }
        }
      }
      std::shared_ptr<Scene>::~shared_ptr((std::shared_ptr<Scene> *const)(v3 + 32));
    }
    else
    {
      common::milog::MiLogStream::create(
        &v64,
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/player/avatar/player_avatar_comp.cpp",
        "replaceWithRebornAvatar",
        2826);
      common::milog::MiLogStream::operator<<<char [39],(char *[39])0>(
        &v64,
        (const char (*)[39])"cur_avatar_ptr_ LifeState != LIFE_DEAD");
      common::milog::MiLogStream::~MiLogStream(&v64);
      v7 = 0;
    }
  }
  result = v7;
  if ( v65 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8008) = 0;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8008) = -168430091;
  }
  return result;
};

// Line 2846: range 000000001717E3B4-000000001717E3FF
ForeachPolicy __cdecl PlayerAvatarComp::replaceWithRebornAvatar(proto::VisionType)::{lambda(Avatar &)#1}::operator()(
        const PlayerAvatarComp::replaceWithRebornAvatar::<lambda(Avatar&)> *const __closure,
        Avatar *avatar)
{
  if ( Creature::getCurHp(avatar) > 0.0 )
    Avatar::setLifeAlive(avatar, 0x69u, 0LL, 1);
  return 0;
};

// Line 2875: range 000000001717EE5A-000000001717F519
void __cdecl PlayerAvatarComp::checkAvatarState(PlayerAvatarComp *const this, uint64_t now_ms)
{
  unsigned __int64 v2; // r13
  __int64 v3; // rax
  _DWORD *v4; // r12
  common::milog::MiLogStream *v5; // rcx
  common::milog::MiLogStream *v6; // rcx
  std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v7; // rax
  uint32_t SceneId; // r14d
  Avatar *v9; // rax
  std::__shared_ptr_access<data::SceneTransPoint,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v11; // rdx
  std::__shared_ptr_access<data::SceneTransPoint,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v12; // rdx
  std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v13; // rax
  PlayerWorldScene *v14; // rdx
  std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v15; // rax
  PlayerBasicComp *BasicComp; // rax
  Avatar *v18; // rax
  uint32_t now; // [rsp+18h] [rbp-138h]
  uint32_t enter_first_trans_point_time; // [rsp+1Ch] [rbp-134h]
  uint32_t spring_recover_delay_time; // [rsp+20h] [rbp-130h]
  uint32_t time_ms; // [rsp+24h] [rbp-12Ch]
  const PlayerSceneComp *scene_comp; // [rsp+28h] [rbp-128h]
  std::tuple<bool&,std::shared_ptr<data::SceneTransPoint>&> v24; // [rsp+30h] [rbp-120h] BYREF
  std::tuple<bool,std::shared_ptr<data::SceneTransPoint> > __in; // [rsp+40h] [rbp-110h] BYREF
  common::milog::MiLogStream v26; // [rsp+60h] [rbp-F0h] BYREF
  char v27[208]; // [rsp+80h] [rbp-D0h] BYREF

  v2 = (unsigned __int64)v27;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_2(160LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "4 48 1 14 is_nearby:2897 64 16 14 scene_ptr:2883 96 16 20 world_scene_ptr:2890 128 16 20 trans_point_ptr:2898";
  *(_QWORD *)(v2 + 16) = PlayerAvatarComp::checkAvatarState;
  v4 = (_DWORD *)(v2 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = -234753551;
  v4[536862722] = -219021312;
  v4[536862723] = -219021312;
  v4[536862724] = -202178560;
  now = common::tools::TimeUtils::getNow();
  if ( std::operator==<Avatar>(&this->cur_avatar_ptr_, 0LL) )
  {
    common::milog::MiLogStream::create(
      &v26,
      &common::milog::MiLogDefault::default_log_obj_,
      1u,
      "./src/player/avatar/player_avatar_comp.cpp",
      "checkAvatarState",
      2879);
    v5 = common::milog::MiLogStream::operator<<<char [24],(char *[24])0>(
           &v26,
           (const char (*)[24])"cur_avatar_ptr_ is null");
    if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
      __asan_report_load8(&this->player_);
    operator<<(v5, this->player_);
    common::milog::MiLogStream::~MiLogStream(&v26);
  }
  else
  {
    if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
      __asan_report_load8(&this->player_);
    scene_comp = Player::getSceneComp(this->player_);
    PlayerSceneComp::getCurScene((const PlayerSceneComp *const)(v2 + 64));
    if ( std::operator==<Scene>((const std::shared_ptr<Scene> *)(v2 + 64), 0LL) )
    {
      common::milog::MiLogStream::create(
        &v26,
        &common::milog::MiLogDefault::default_log_obj_,
        1u,
        "./src/player/avatar/player_avatar_comp.cpp",
        "checkAvatarState",
        2887);
      v6 = common::milog::MiLogStream::operator<<<char [18],(char *[18])0>(
             &v26,
             (const char (*)[18])"getCurScene fails");
      if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
        __asan_report_load8(&this->player_);
      operator<<(v6, this->player_);
      common::milog::MiLogStream::~MiLogStream(&v26);
    }
    else
    {
      std::dynamic_pointer_cast<PlayerWorldScene,Scene>((const std::shared_ptr<Scene> *)(v2 + 96));
      if ( std::operator!=<PlayerWorldScene>((const std::shared_ptr<PlayerWorldScene> *)(v2 + 96), 0LL) )
      {
        enter_first_trans_point_time = PlayerSceneComp::getEnterFirstTransPointTime(scene_comp);
        if ( enter_first_trans_point_time )
        {
          *(_BYTE *)(v2 + 48) = 0;
          std::shared_ptr<data::SceneTransPoint>::shared_ptr(
            (std::shared_ptr<data::SceneTransPoint> *const)(v2 + 128),
            0LL);
          v7 = std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 64));
          SceneId = Scene::getSceneId(v7);
          v9 = std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::operator*((const std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false> *const)&this->cur_avatar_ptr_);
          PlayerAvatarComp::isNearbyUnlockedTower(&__in, this, v9, SceneId);
          std::tie<bool,std::shared_ptr<data::SceneTransPoint>>(
            (bool *)&v24,
            (std::shared_ptr<data::SceneTransPoint> *)(v2 + 48),
            (bool *)(v2 + 128),
            (std::shared_ptr<data::SceneTransPoint> *)(v2 + 48));
          std::tuple<bool &,std::shared_ptr<data::SceneTransPoint> &>::operator=<bool,std::shared_ptr<data::SceneTransPoint>>(
            &v24,
            &__in);
          std::tuple<bool,std::shared_ptr<data::SceneTransPoint>>::~tuple(&__in);
          if ( *(_BYTE *)(v2 + 48)
            && std::operator!=<data::SceneTransPoint>(0LL, (const std::shared_ptr<data::SceneTransPoint> *)(v2 + 128)) )
          {
            v11 = std::__shared_ptr_access<data::SceneTransPoint,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<data::SceneTransPoint,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 128));
            if ( *(_BYTE *)(((unsigned __int64)&v11->is_forbid_avatar_revive >> 3) + 0x7FFF8000) != 0
              && (((unsigned __int8)v11 - 84) & 7) >= *(_BYTE *)(((unsigned __int64)&v11->is_forbid_avatar_revive >> 3)
                                                               + 0x7FFF8000) )
            {
              __asan_report_load1(&v11->is_forbid_avatar_revive);
            }
            if ( !v11->is_forbid_avatar_revive )
              PlayerAvatarComp::reviveAllAvatarByFirstTransPoint(this);
            v12 = std::__shared_ptr_access<data::SceneTransPoint,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<data::SceneTransPoint,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 128));
            if ( *(_BYTE *)(((unsigned __int64)&v12->is_forbid_avatar_auto_use_spring >> 3) + 0x7FFF8000) != 0
              && (((unsigned __int8)v12 - 83) & 7) >= *(_BYTE *)(((unsigned __int64)&v12->is_forbid_avatar_auto_use_spring >> 3)
                                                               + 0x7FFF8000) )
            {
              __asan_report_load1(&v12->is_forbid_avatar_auto_use_spring);
            }
            if ( !v12->is_forbid_avatar_auto_use_spring )
            {
              ServiceBox::findService<GameserverService>();
              GameserverService::getConfig((GameserverService *const)&v24);
              v13 = std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false> *const)&v24);
              spring_recover_delay_time = ConstValueExcelConfigMgr::getSpringAutoRecoverDelay(&v13->design_config.txt_config_mgr.const_value_config_mgr);
              std::shared_ptr<Config>::~shared_ptr((std::shared_ptr<Config> *const)&v24);
              if ( now > enter_first_trans_point_time + spring_recover_delay_time )
              {
                v14 = std::__shared_ptr_access<PlayerWorldScene,(__gnu_cxx::_Lock_policy)2,false,false>::operator*((const std::__shared_ptr_access<PlayerWorldScene,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 96));
                PlayerAvatarComp::autoUseSpringForMyAvatar(this, v14);
              }
            }
          }
          std::shared_ptr<data::SceneTransPoint>::~shared_ptr((std::shared_ptr<data::SceneTransPoint> *const)(v2 + 128));
        }
      }
      if ( std::operator!=<Avatar>(&this->cur_avatar_ptr_, 0LL) )
      {
        v15 = std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false> *const)&this->cur_avatar_ptr_);
        if ( Entity::isOnScene((const Entity *const)v15) )
        {
          if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
            __asan_report_load8(&this->player_);
          BasicComp = Player::getBasicComp(this->player_);
          time_ms = PlayerBasicComp::getPlayerTimeMs(BasicComp);
          v18 = std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false> *const)&this->cur_avatar_ptr_);
          Avatar::tryTriggerFlyAndDashWatcher(v18, time_ms);
        }
      }
      std::shared_ptr<PlayerWorldScene>::~shared_ptr((std::shared_ptr<PlayerWorldScene> *const)(v2 + 96));
    }
    std::shared_ptr<Scene>::~shared_ptr((std::shared_ptr<Scene> *const)(v2 + 64));
  }
  if ( v27 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8010) = 0;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8010) = -168430091;
  }
};

// Line 2938: range 000000001717F7AC-000000001717FA83
void __cdecl PlayerAvatarComp::autoUseSpringForMyAvatar(PlayerAvatarComp *const this, PlayerWorldScene *world_scene)
{
  unsigned __int64 v2; // rbx
  __int64 v3; // rax
  unsigned __int64 v4; // r13
  common::milog::MiLogStream *v5; // rdx
  Player *v6; // rax
  PlayerAvatarComp *AvatarComp; // rax
  PlayerSceneComp *SceneComp; // rax
  common::milog::MiLogStream v9; // [rsp+20h] [rbp-C0h] BYREF
  PlayerAvatarComp::autoUseSpringForMyAvatar::<lambda(Avatar&)> p___f; // [rsp+40h] [rbp-A0h] BYREF
  char v11[112]; // [rsp+70h] [rbp-70h] BYREF

  v2 = (unsigned __int64)v11;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_0(64LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "1 32 16 19 own_player_ptr:2939";
  *(_QWORD *)(v2 + 16) = PlayerAvatarComp::autoUseSpringForMyAvatar;
  v4 = v2 >> 3;
  *(_DWORD *)(v4 + 2147450880) = -235802127;
  *(_DWORD *)(v4 + 2147450884) = -202178560;
  Scene::getOwnPlayer((const Scene *const)(v2 + 32));
  if ( std::operator==<Player>(0LL, (const std::shared_ptr<Player> *)(v2 + 32)) )
  {
    common::milog::MiLogStream::create(
      &v9,
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/player/avatar/player_avatar_comp.cpp",
      "autoUseSpringForMyAvatar",
      2942);
    v5 = common::milog::MiLogStream::operator<<<char [32],(char *[32])0>(
           &v9,
           (const char (*)[32])"getOwnPlayer fail, world_scene:");
    common::milog::MiLogStream::operator<<<PlayerWorldScene,(PlayerWorldScene*)0>(v5, world_scene);
    common::milog::MiLogStream::~MiLogStream(&v9);
  }
  else
  {
    v6 = std::__shared_ptr_access<Player,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Player,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 32));
    AvatarComp = Player::getAvatarComp(v6);
    if ( PlayerAvatarComp::getIsSpringAutoUse(AvatarComp) )
    {
      if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
        __asan_report_load8(&this->player_);
      SceneComp = Player::getSceneComp(this->player_);
      p___f.__this = this;
      p___f.__point_id = PlayerSceneComp::getFirstTransPointId(SceneComp);
      p___f.__world_scene = world_scene;
      std::shared_ptr<Player>::shared_ptr(&p___f.__own_player_ptr, (const std::shared_ptr<Player> *)(v2 + 32));
      std::function<ForeachPolicy ()(Avatar &)>::function<PlayerAvatarComp::autoUseSpringForMyAvatar(PlayerWorldScene &)::{lambda(Avatar &)#1},void,void>(
        (std::function<ForeachPolicy(Avatar&)> *const)&v9,
        &p___f);
      PlayerAvatarComp::foreachMyAvatarInSceneTeam(this, (std::function<ForeachPolicy(Avatar&)> *)&v9);
      std::function<ForeachPolicy ()(Avatar &)>::~function((std::function<ForeachPolicy(Avatar&)> *const)&v9);
      PlayerAvatarComp::autoUseSpringForMyAvatar(PlayerWorldScene &)::{lambda(Avatar &)#1}::~Avatar(&p___f);
    }
  }
  std::shared_ptr<Player>::~shared_ptr((std::shared_ptr<Player> *const)(v2 + 32));
  if ( v11 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
  }
};

// Line 2948: range 000000001717F51A-000000001717F78B
ForeachPolicy __cdecl PlayerAvatarComp::autoUseSpringForMyAvatar(PlayerWorldScene &)::{lambda(Avatar &)#1}::operator()(
        const PlayerAvatarComp::autoUseSpringForMyAvatar::<lambda(Avatar&)> *const __closure,
        Avatar *avatar)
{
  unsigned __int64 v2; // rbx
  __int64 v3; // rax
  unsigned __int64 v4; // r13
  ForeachPolicy result; // eax
  Player *v6; // rax
  PlayerAvatarComp *AvatarComp; // rax
  common::milog::MiLogStream *v8; // rdx
  common::milog::MiLogStream v9; // [rsp+10h] [rbp-80h] BYREF
  char v10[96]; // [rsp+30h] [rbp-60h] BYREF

  v2 = (unsigned __int64)v10;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_0(64LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "1 32 12 14 use_param:2954";
  *(_QWORD *)(v2 + 16) = PlayerAvatarComp::autoUseSpringForMyAvatar(PlayerWorldScene &)::{lambda(Avatar &)#1}::operator();
  v4 = v2 >> 3;
  *(_DWORD *)(v4 + 2147450880) = -235802127;
  *(_DWORD *)(v4 + 2147450884) = -202177536;
  if ( *(_BYTE *)(((unsigned __int64)&__closure->__world_scene >> 3) + 0x7FFF8000) )
    __asan_report_load8(&__closure->__world_scene);
  if ( PlayerWorldScene::getCurSpringVolume(__closure->__world_scene) >= 0.00000011920929 )
  {
    *(_BYTE *)(v2 + 32) = 0;
    *(_DWORD *)(v2 + 36) = 0;
    *(_DWORD *)(v2 + 40) = 0;
    *(_BYTE *)(v2 + 32) = 1;
    v6 = std::__shared_ptr_access<Player,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Player,(__gnu_cxx::_Lock_policy)2,false,false> *const)&__closure->__own_player_ptr);
    AvatarComp = Player::getAvatarComp(v6);
    *(_DWORD *)(v2 + 36) = PlayerAvatarComp::getSpringAutoUsePercent(AvatarComp);
    if ( *(_BYTE *)(((unsigned __int64)&__closure->__point_id >> 3) + 0x7FFF8000) != 0
      && *(_BYTE *)(((unsigned __int64)&__closure->__point_id >> 3) + 0x7FFF8000) <= 3 )
    {
      __asan_report_load4(&__closure->__point_id);
    }
    *(_DWORD *)(v2 + 40) = __closure->__point_id;
    if ( *(_BYTE *)(((unsigned __int64)&__closure->__world_scene >> 3) + 0x7FFF8000) )
      __asan_report_load8(&__closure->__world_scene);
    if ( Avatar::useSpring(avatar, __closure->__world_scene, (const SpringUseParam *)(v2 + 32)) )
    {
      common::milog::MiLogStream::create(
        &v9,
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/player/avatar/player_avatar_comp.cpp",
        "operator()",
        2960);
      v8 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(&v9, (const char (*)[16])"useSpring fails");
      common::milog::MiLogStream::operator<<<Avatar,(Avatar*)0>(v8, avatar);
      common::milog::MiLogStream::~MiLogStream(&v9);
    }
    result = FOREACH_CONTINUE;
  }
  else
  {
    result = FOREACH_BREAK;
  }
  if ( v10 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 2948: range 00000000171F3D14-00000000171F3E60
void __cdecl PlayerAvatarComp::autoUseSpringForMyAvatar(PlayerWorldScene &)::{lambda(Avatar &)#1}::Avatar(
        PlayerAvatarComp::autoUseSpringForMyAvatar::<lambda(Avatar&)> *const this,
        PlayerAvatarComp::autoUseSpringForMyAvatar::<lambda(Avatar&)> *a2)
{
  PlayerAvatarComp *v2; // rdx
  uint32_t point_id; // ecx
  char v4; // al
  PlayerWorldScene *world_scene; // rdx
  PlayerAvatarComp::autoUseSpringForMyAvatar::<lambda(Avatar&)> *v6; // [rsp+0h] [rbp-10h]

  v6 = a2;
  if ( *(_BYTE *)(((unsigned __int64)a2 >> 3) + 0x7FFF8000) )
    __asan_report_load8(a2);
  v2 = a2->__this;
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, a2);
  this->__this = v2;
  if ( *(_BYTE *)(((unsigned __int64)&a2->__point_id >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&a2->__point_id >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4(&a2->__point_id);
  }
  point_id = a2->__point_id;
  v4 = *(_BYTE *)(((unsigned __int64)&this->__point_id >> 3) + 0x7FFF8000);
  LOBYTE(a2) = v4 != 0;
  if ( v4 != 0 && v4 <= 3 )
    __asan_report_store4(&this->__point_id, a2, &this->__point_id);
  this->__point_id = point_id;
  if ( *(_BYTE *)(((unsigned __int64)&v6->__world_scene >> 3) + 0x7FFF8000) )
    __asan_report_load8(&v6->__world_scene);
  world_scene = v6->__world_scene;
  if ( *(_BYTE *)(((unsigned __int64)&this->__world_scene >> 3) + 0x7FFF8000) )
    __asan_report_store8(&this->__world_scene, a2);
  this->__world_scene = world_scene;
  std::shared_ptr<Player>::shared_ptr(&this->__own_player_ptr, &v6->__own_player_ptr);
};

// Line 2948: range 00000000171F3F2C-00000000171F4078
void __cdecl PlayerAvatarComp::autoUseSpringForMyAvatar(PlayerWorldScene &)::{lambda(Avatar &)#1}::Avatar(
        PlayerAvatarComp::autoUseSpringForMyAvatar::<lambda(Avatar&)> *const this,
        const PlayerAvatarComp::autoUseSpringForMyAvatar::<lambda(Avatar&)> *a2)
{
  PlayerAvatarComp *v2; // rdx
  uint32_t point_id; // ecx
  char v4; // al
  PlayerWorldScene *world_scene; // rdx
  const PlayerAvatarComp::autoUseSpringForMyAvatar::<lambda(Avatar&)> *v6; // [rsp+0h] [rbp-10h]

  v6 = a2;
  if ( *(_BYTE *)(((unsigned __int64)a2 >> 3) + 0x7FFF8000) )
    __asan_report_load8(a2);
  v2 = a2->__this;
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, a2);
  this->__this = v2;
  if ( *(_BYTE *)(((unsigned __int64)&a2->__point_id >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&a2->__point_id >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4(&a2->__point_id);
  }
  point_id = a2->__point_id;
  v4 = *(_BYTE *)(((unsigned __int64)&this->__point_id >> 3) + 0x7FFF8000);
  LOBYTE(a2) = v4 != 0;
  if ( v4 != 0 && v4 <= 3 )
    __asan_report_store4(&this->__point_id, a2, &this->__point_id);
  this->__point_id = point_id;
  if ( *(_BYTE *)(((unsigned __int64)&v6->__world_scene >> 3) + 0x7FFF8000) )
    __asan_report_load8(&v6->__world_scene);
  world_scene = v6->__world_scene;
  if ( *(_BYTE *)(((unsigned __int64)&this->__world_scene >> 3) + 0x7FFF8000) )
    __asan_report_store8(&this->__world_scene, a2);
  this->__world_scene = world_scene;
  std::shared_ptr<Player>::shared_ptr(&this->__own_player_ptr, &v6->__own_player_ptr);
};

// Line 2948: range 000000001717F78C-000000001717F7AA
void __cdecl PlayerAvatarComp::autoUseSpringForMyAvatar(PlayerWorldScene &)::{lambda(Avatar &)#1}::~Avatar(
        PlayerAvatarComp::autoUseSpringForMyAvatar::<lambda(Avatar&)> *const this)
{
  std::shared_ptr<Player>::~shared_ptr(&this->__own_player_ptr);
};

// Line 2969: range 000000001717FADE-000000001717FB5F
void __cdecl PlayerAvatarComp::checkAvatarBuff(PlayerAvatarComp *const this, uint64_t player_time_ms)
{
  std::function<ForeachPolicy(Avatar&)> p_func; // [rsp+10h] [rbp-30h] BYREF

  common::tools::MiscUtils::erase_if<unsigned int,std::shared_ptr<Buff>,PlayerAvatarComp::checkAvatarBuff(unsigned long)::{lambda(unsigned int &)#1}>(
    &this->avatar_team_buff_mmap_,
    (PlayerAvatarComp::checkAvatarBuff::<lambda(auto:26&)>)player_time_ms);
  std::function<ForeachPolicy ()(Avatar &)>::function<PlayerAvatarComp::checkAvatarBuff(unsigned long)::{lambda(Avatar &)#2},void,void>(
    &p_func,
    (PlayerAvatarComp::checkAvatarBuff::<lambda(Avatar&)>)player_time_ms);
  PlayerAvatarComp::foreachMyAvatarInSceneTeam(this, &p_func);
  std::function<ForeachPolicy ()(Avatar &)>::~function(&p_func);
};

// Line 2971: range 00000000171E9FC8-00000000171EA03F
bool __cdecl PlayerAvatarComp::checkAvatarBuff::_lambda_auto_26___::operator()_std::pair_unsigned_int_const_std::shared_ptr_Buff_____(
        const PlayerAvatarComp::checkAvatarBuff::<lambda(auto:26&)> *const __closure,
        std::pair<unsigned int const,std::shared_ptr<Buff> > *p)
{
  std::__shared_ptr_access<Buff,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v3; // rcx

  if ( std::operator==<Buff>(&p->second, 0LL) )
    return 1;
  v3 = std::__shared_ptr_access<Buff,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Buff,(__gnu_cxx::_Lock_policy)2,false,false> *const)&p->second);
  if ( *(_BYTE *)(((unsigned __int64)__closure >> 3) + 0x7FFF8000) )
    __asan_report_load8(__closure);
  return Buff::isExpired(v3, __closure->__player_time_ms);
};

// Line 2982: range 000000001717FA84-000000001717FADC
ForeachPolicy __cdecl PlayerAvatarComp::checkAvatarBuff(unsigned long)::{lambda(Avatar &)#2}::operator()(
        const PlayerAvatarComp::checkAvatarBuff::<lambda(Avatar&)> *const __closure,
        Avatar *avatar)
{
  BuffComp *BuffComp; // rcx

  BuffComp = Avatar::getBuffComp(avatar);
  if ( *(_BYTE *)(((unsigned __int64)__closure >> 3) + 0x7FFF8000) )
    __asan_report_load8(__closure);
  BuffComp::onMsTimer(BuffComp, __closure->__player_time_ms);
  return 0;
};

// Line 2991: range 000000001717FB60-000000001717FCE7
int32_t __cdecl PlayerAvatarComp::clear(PlayerAvatarComp *const this)
{
  std::shared_ptr<Avatar> *p_r; // rsi
  unsigned __int64 v2; // rax
  unsigned __int64 v3; // rdx
  std::shared_ptr<Avatar> __r; // [rsp+10h] [rbp-10h] BYREF

  p_r = 0LL;
  if ( std::operator!=<Avatar>(&this->cur_avatar_ptr_, 0LL) )
  {
    v2 = (unsigned __int64)std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false> *const)&this->cur_avatar_ptr_);
    if ( *(_BYTE *)((v2 >> 3) + 0x7FFF8000) )
      v2 = __asan_report_load8(v2);
    v3 = *(_QWORD *)v2 + 128LL;
    if ( *(_BYTE *)((v3 >> 3) + 0x7FFF8000) )
      v2 = __asan_report_load8(*(_QWORD *)v2 + 128LL);
    (*(void (__fastcall **)(unsigned __int64, VisionContext *))v3)(v2, &VisionContext::miss_context);
    std::shared_ptr<Avatar>::shared_ptr(&__r, 0LL);
    p_r = &__r;
    std::shared_ptr<Avatar>::operator=(&this->cur_avatar_ptr_, &__r);
    std::shared_ptr<Avatar>::~shared_ptr(&__r);
  }
  std::map<unsigned long,std::shared_ptr<Avatar>>::clear(&this->avatar_map_);
  std::set<unsigned long>::clear(&this->trial_avatar_guid_set_);
  std::map<unsigned int,AvatarTeam>::clear(&this->avatar_team_map_);
  std::unordered_set<unsigned long>::clear(&this->temp_avatar_guid_set_);
  if ( *(_BYTE *)(((unsigned __int64)&this->cur_avatar_team_id_ >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->cur_avatar_team_id_ >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_store4(&this->cur_avatar_team_id_, p_r, &this->cur_avatar_team_id_);
  }
  this->cur_avatar_team_id_ = 0;
  if ( *(_BYTE *)(((unsigned __int64)&this->last_change_avatar_time_ms_ >> 3) + 0x7FFF8000) )
    __asan_report_store8(&this->last_change_avatar_time_ms_, p_r);
  this->last_change_avatar_time_ms_ = 0LL;
  return 0;
};

// Line 3008: range 000000001717FDB4-000000001717FECF
uint32_t __cdecl PlayerAvatarComp::getAvatarAvgLevelInSceneTeam(PlayerAvatarComp *const this)
{
  unsigned __int64 v1; // rbx
  __int64 v2; // rax
  unsigned __int64 v3; // r12
  uint32_t result; // eax
  std::function<ForeachPolicy(Avatar&)> p_func; // [rsp+10h] [rbp-80h] BYREF
  char v6[96]; // [rsp+30h] [rbp-60h] BYREF

  v1 = (unsigned __int64)v6;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_0(64LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "1 32 4 16 total_level:3009";
  *(_QWORD *)(v1 + 16) = PlayerAvatarComp::getAvatarAvgLevelInSceneTeam;
  v3 = v1 >> 3;
  *(_DWORD *)(v3 + 2147450880) = -235802127;
  *(_DWORD *)(v3 + 2147450884) = -202116348;
  *(_DWORD *)(v1 + 32) = 0;
  std::function<ForeachPolicy ()(Avatar &)>::function<PlayerAvatarComp::getAvatarAvgLevelInSceneTeam(void)::{lambda(Avatar &)#1},void,void>(
    &p_func,
    (PlayerAvatarComp::getAvatarAvgLevelInSceneTeam::<lambda(Avatar&)>)(v1 + 32));
  PlayerAvatarComp::foreachAvatarInSceneTeam(this, &p_func);
  std::function<ForeachPolicy ()(Avatar &)>::~function(&p_func);
  result = *(_DWORD *)(v1 + 32) >> 2;
  if ( v6 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 3010: range 000000001717FCE8-000000001717FDB3
ForeachPolicy __cdecl PlayerAvatarComp::getAvatarAvgLevelInSceneTeam(void)::{lambda(Avatar &)#1}::operator()(
        const PlayerAvatarComp::getAvatarAvgLevelInSceneTeam::<lambda(Avatar&)> *const __closure,
        Avatar *avatar)
{
  uint32_t Level; // esi
  uint32_t *total_level; // rdx
  uint32_t v4; // ecx
  uint32_t *v5; // rdx
  __int64 v6; // rsi

  Level = Creature::getLevel(avatar);
  if ( *(_BYTE *)(((unsigned __int64)__closure >> 3) + 0x7FFF8000) )
    __asan_report_load8(__closure);
  total_level = __closure->__total_level;
  if ( *(_BYTE *)(((unsigned __int64)__closure->__total_level >> 3) + 0x7FFF8000) != 0
    && (char)(((__int64)__closure->__total_level & 7) + 3) >= *(_BYTE *)(((unsigned __int64)__closure->__total_level >> 3)
                                                                       + 0x7FFF8000) )
  {
    __asan_report_load4(__closure->__total_level);
  }
  v4 = *total_level;
  v5 = __closure->__total_level;
  v6 = v4 + Level;
  if ( *(_BYTE *)(((unsigned __int64)__closure->__total_level >> 3) + 0x7FFF8000) != 0
    && (char)(((__int64)__closure->__total_level & 7) + 3) >= *(_BYTE *)(((unsigned __int64)__closure->__total_level >> 3)
                                                                       + 0x7FFF8000) )
  {
    __asan_report_store4(__closure->__total_level, v6, v5);
  }
  *v5 = v6;
  return 0;
};

// Line 3024: range 000000001717FED0-000000001717FF60
void __cdecl PlayerAvatarComp::onEnterFirstTransPointRegion(
        PlayerAvatarComp *const this,
        uint32_t point_id,
        bool is_forbid_revive_avatar)
{
  uint32_t now; // [rsp+14h] [rbp-Ch]
  PlayerSceneComp *scene_comp; // [rsp+18h] [rbp-8h]

  if ( !is_forbid_revive_avatar )
    PlayerAvatarComp::reviveAllAvatarByFirstTransPoint(this);
  now = common::tools::TimeUtils::getNow();
  if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
    __asan_report_load8(&this->player_);
  scene_comp = Player::getSceneComp(this->player_);
  PlayerSceneComp::setFirstTransPointId(scene_comp, point_id);
  PlayerSceneComp::setEnterFirstTransPointTime(scene_comp, now);
};

// Line 3037: range 000000001717FF62-000000001717FFCE
void __cdecl PlayerAvatarComp::onExitFirstTransPointRegion(PlayerAvatarComp *const this, uint32_t point_id)
{
  PlayerSceneComp *scene_comp; // [rsp+18h] [rbp-8h]

  if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
    __asan_report_load8(&this->player_);
  scene_comp = Player::getSceneComp(this->player_);
  PlayerSceneComp::setFirstTransPointId(scene_comp, 0);
  PlayerSceneComp::setEnterFirstTransPointTime(scene_comp, 0);
};

// Line 3045: range 000000001717FFD0-00000000171807A7
std::tuple<bool,std::shared_ptr<data::SceneTransPoint> > *__fastcall PlayerAvatarComp::isNearbyUnlockedTower(
        std::tuple<bool,std::shared_ptr<data::SceneTransPoint> > *retstr,
        PlayerAvatarComp *const this,
        const Entity *avatar,
        uint32_t scene_id)
{
  unsigned __int64 v4; // r12
  __int64 v5; // rax
  _DWORD *v6; // r13
  PlayerSceneComp *SceneComp; // rax
  unsigned int v8; // eax
  common::milog::MiLogStream *v9; // rax
  common::milog::MiLogStream *v10; // rax
  common::milog::MiLogStream *v11; // rax
  common::milog::MiLogStream *v12; // rax
  common::milog::MiLogStream *v13; // r14
  PlayerSceneComp *v14; // rax
  std::shared_ptr<data::SceneTransPoint> *v15; // r8
  std::__shared_ptr_access<data::SceneTransPoint,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v16; // rax
  common::milog::MiLogStream *v17; // rax
  common::milog::MiLogStream *v18; // rax
  common::milog::MiLogStream *v19; // rax
  common::milog::MiLogStream *v20; // rax
  common::milog::MiLogStream *v21; // r14
  std::shared_ptr<data::SceneTransPoint> *v22; // r8
  std::__shared_ptr_access<data::SceneTransPoint,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v23; // rax
  const Vector3 *Position; // rax
  std::shared_ptr<data::SceneTransPoint> *v25; // r8
  unsigned int val; // [rsp+24h] [rbp-FCh] BYREF
  bool __args_0[8]; // [rsp+28h] [rbp-F8h] BYREF
  Vector3 pos2; // [rsp+34h] [rbp-ECh] BYREF
  std::tuple<bool,std::nullptr_t> __in; // [rsp+40h] [rbp-E0h] BYREF
  common::milog::MiLogStream v33; // [rsp+50h] [rbp-D0h] BYREF
  char v34[176]; // [rsp+70h] [rbp-B0h] BYREF

  v4 = (unsigned __int64)v34;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v5 = __asan_stack_malloc_1(128LL);
    if ( v5 )
      v4 = v5;
  }
  *(_QWORD *)v4 = 1102416563LL;
  *(_QWORD *)(v4 + 8) = "4 48 1 14 is_nearby:3068 64 4 13 point_id:3046 80 4 13 scene_id:3044 96 16 20 trans_point_ptr:3052";
  *(_QWORD *)(v4 + 16) = PlayerAvatarComp::isNearbyUnlockedTower;
  v6 = (_DWORD *)(v4 >> 3);
  v6[536862720] = -235802127;
  v6[536862721] = -234753551;
  v6[536862722] = -234556924;
  v6[536862723] = -202178560;
  *(_DWORD *)(v4 + 80) = scene_id;
  if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
    __asan_report_load8(&this->player_);
  SceneComp = Player::getSceneComp(this->player_);
  *(_DWORD *)(v4 + 64) = PlayerSceneComp::getFirstTransPointId(SceneComp);
  if ( *(_DWORD *)(v4 + 64) )
  {
    ServiceBox::findService<GameserverService>();
    GameserverService::getConfig((GameserverService *const)&__in);
    v8 = (unsigned int)std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false> *const)&__in);
    JsonConfigMgr::findScenePoint<data::SceneTransPoint>(
      (const JsonConfigMgr *const)(v4 + 96),
      v8 + 93080,
      *(_DWORD *)(v4 + 80));
    std::shared_ptr<Config>::~shared_ptr((std::shared_ptr<Config> *const)&__in);
    if ( std::operator==<data::SceneTransPoint>(0LL, (const std::shared_ptr<data::SceneTransPoint> *)(v4 + 96)) )
    {
      common::milog::MiLogStream::create(
        &v33,
        &common::milog::MiLogDefault::default_log_obj_,
        1u,
        "./src/player/avatar/player_avatar_comp.cpp",
        "isNearbyUnlockedTower",
        3055);
      v9 = common::milog::MiLogStream::operator<<<char [23],(char *[23])0>(
             &v33,
             (const char (*)[23])"findScenePoint fails, ");
      v10 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v9, (const unsigned int *)(v4 + 80));
      v11 = common::milog::MiLogStream::operator<<<char [2],(char *[2])0>(v10, (const char (*)[2])":");
      v12 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v11, (const unsigned int *)(v4 + 64));
      v13 = common::milog::MiLogStream::operator<<<char [6],(char *[6])0>(v12, (const char (*)[6])" uid:");
      if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
        __asan_report_load8(&this->player_);
      val = Player::getUid(this->player_);
      common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v13, &val);
      common::milog::MiLogStream::~MiLogStream(&v33);
      *(_QWORD *)__args_0 = 0LL;
      *(_BYTE *)(v4 + 48) = 0;
      std::make_tuple<bool,decltype(nullptr)>((bool *)&__in, (void *)(v4 + 48), __args_0, (void *)(v4 + 48));
      std::tuple<bool,std::shared_ptr<data::SceneTransPoint>>::tuple<bool,decltype(nullptr),true>(retstr, &__in);
    }
    else
    {
      if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
        __asan_report_load8(&this->player_);
      v14 = Player::getSceneComp(this->player_);
      if ( !PlayerSceneComp::isPointUnlocked(v14, *(_DWORD *)(v4 + 80), *(_DWORD *)(v4 + 64)) )
      {
        *(_BYTE *)(v4 + 48) = 0;
        if ( *(char *)(((unsigned __int64)retstr >> 3) + 0x7FFF8000) < 0
          || *(_BYTE *)(((unsigned __int64)(&retstr->std::_Head_base<0,bool,false> + 7) >> 3) + 0x7FFF8000) != 0
          && (((unsigned __int8)retstr + 23) & 7) >= *(_BYTE *)(((unsigned __int64)(&retstr->std::_Head_base<0,bool,false>
                                                                                  + 7) >> 3)
                                                              + 0x7FFF8000) )
        {
          __asan_report_store_n(retstr, 24LL);
        }
        std::make_tuple<bool,std::shared_ptr<data::SceneTransPoint> &>(
          retstr,
          (bool *)(v4 + 48),
          (std::shared_ptr<data::SceneTransPoint> *)(v4 + 96),
          (bool *)(v4 + 48),
          v15);
      }
      else
      {
        v16 = std::__shared_ptr_access<data::SceneTransPoint,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<data::SceneTransPoint,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 96));
        if ( *(_BYTE *)(((unsigned __int64)&v16->type >> 3) + 0x7FFF8000) != 0
          && *(_BYTE *)(((unsigned __int64)&v16->type >> 3) + 0x7FFF8000) <= 3 )
        {
          v16 = (std::__shared_ptr_access<data::SceneTransPoint,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *)__asan_report_load4(&v16->type);
        }
        if ( v16->type == TOWER )
        {
          v23 = std::__shared_ptr_access<data::SceneTransPoint,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<data::SceneTransPoint,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 96));
          Vector3::Vector3(&pos2, &v23->pos);
          Position = Entity::getPosition(avatar);
          *(_BYTE *)(v4 + 48) = getPlaneDistance(Position, &pos2) < 30.0;
          if ( *(char *)(((unsigned __int64)retstr >> 3) + 0x7FFF8000) < 0
            || *(_BYTE *)(((unsigned __int64)(&retstr->std::_Head_base<0,bool,false> + 7) >> 3) + 0x7FFF8000) != 0
            && (((unsigned __int8)retstr + 23) & 7) >= *(_BYTE *)(((unsigned __int64)(&retstr->std::_Head_base<0,bool,false>
                                                                                    + 7) >> 3)
                                                                + 0x7FFF8000) )
          {
            __asan_report_store_n(retstr, 24LL);
          }
          std::make_tuple<bool &,std::shared_ptr<data::SceneTransPoint> &>(
            retstr,
            (bool *)(v4 + 48),
            (std::shared_ptr<data::SceneTransPoint> *)(v4 + 96),
            (bool *)(v4 + 48),
            v25);
        }
        else
        {
          common::milog::MiLogStream::create(
            &v33,
            &common::milog::MiLogDefault::default_log_obj_,
            1u,
            "./src/player/avatar/player_avatar_comp.cpp",
            "isNearbyUnlockedTower",
            3065);
          v17 = common::milog::MiLogStream::operator<<<char [37],(char *[37])0>(
                  &v33,
                  (const char (*)[37])"transpoint is not a tower, scene_id:");
          v18 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                  v17,
                  (const unsigned int *)(v4 + 80));
          v19 = common::milog::MiLogStream::operator<<<char [12],(char *[12])0>(v18, (const char (*)[12])", point_id:");
          v20 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                  v19,
                  (const unsigned int *)(v4 + 64));
          v21 = common::milog::MiLogStream::operator<<<char [7],(char *[7])0>(v20, (const char (*)[7])", uid:");
          if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
            __asan_report_load8(&this->player_);
          val = Player::getUid(this->player_);
          common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v21, &val);
          common::milog::MiLogStream::~MiLogStream(&v33);
          *(_BYTE *)(v4 + 48) = 0;
          if ( *(char *)(((unsigned __int64)retstr >> 3) + 0x7FFF8000) < 0
            || *(_BYTE *)(((unsigned __int64)(&retstr->std::_Head_base<0,bool,false> + 7) >> 3) + 0x7FFF8000) != 0
            && (((unsigned __int8)retstr + 23) & 7) >= *(_BYTE *)(((unsigned __int64)(&retstr->std::_Head_base<0,bool,false>
                                                                                    + 7) >> 3)
                                                                + 0x7FFF8000) )
          {
            __asan_report_store_n(retstr, 24LL);
          }
          std::make_tuple<bool,std::shared_ptr<data::SceneTransPoint> &>(
            retstr,
            (bool *)(v4 + 48),
            (std::shared_ptr<data::SceneTransPoint> *)(v4 + 96),
            (bool *)(v4 + 48),
            v22);
        }
      }
    }
    std::shared_ptr<data::SceneTransPoint>::~shared_ptr((std::shared_ptr<data::SceneTransPoint> *const)(v4 + 96));
  }
  else
  {
    common::milog::MiLogStream::create(
      &v33,
      &common::milog::MiLogDefault::default_log_obj_,
      2u,
      "./src/player/avatar/player_avatar_comp.cpp",
      "isNearbyUnlockedTower",
      3049);
    common::milog::MiLogStream::operator<<<char [14],(char *[14])0>(&v33, (const char (*)[14])"point_id is 0");
    common::milog::MiLogStream::~MiLogStream(&v33);
    *(_QWORD *)__args_0 = 0LL;
    *(_BYTE *)(v4 + 48) = 0;
    std::make_tuple<bool,decltype(nullptr)>((bool *)&__in, (void *)(v4 + 48), __args_0, (void *)(v4 + 48));
    std::tuple<bool,std::shared_ptr<data::SceneTransPoint>>::tuple<bool,decltype(nullptr),true>(retstr, &__in);
  }
  if ( v34 == (char *)v4 )
  {
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v4 = 1172321806LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return retstr;
};

// Line 3074: range 0000000017180A4A-0000000017180E14
int32_t __cdecl PlayerAvatarComp::refreshBackgroundAvatar(
        PlayerAvatarComp *const this,
        proto::RefreshBackgroundAvatarRsp *rsp_0)
{
  __m128i v2; // xmm0
  std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v3; // rax
  std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v4; // rax
  common::milog::MiLogStream *v6; // rcx
  PlayerAvatarComp::refreshBackgroundAvatar::<lambda(Avatar&)> v7; // [rsp-20h] [rbp-B0h]
  signed int diff_time; // [rsp+1Ch] [rbp-74h]
  int recover_intervel; // [rsp+20h] [rbp-70h]
  float recover_percent; // [rsp+24h] [rbp-6Ch]
  uint32_t now; // [rsp+28h] [rbp-68h]
  std::shared_ptr<Config> v12; // [rsp+30h] [rbp-60h] BYREF
  std::function<ForeachPolicy(Avatar&)> p_func; // [rsp+40h] [rbp-50h] BYREF
  common::milog::MiLogStream v14; // [rsp+60h] [rbp-30h] BYREF

  ServiceBox::findService<GameserverService>();
  GameserverService::getConfig((GameserverService *const)&v12);
  v3 = std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false> *const)&v12);
  recover_intervel = ConstValueExcelConfigMgr::getBackAvatarAutoRecoverInterval(&v3->design_config.txt_config_mgr.const_value_config_mgr);
  std::shared_ptr<Config>::~shared_ptr(&v12);
  ServiceBox::findService<GameserverService>();
  GameserverService::getConfig((GameserverService *const)&v12);
  v4 = std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false> *const)&v12);
  *(float *)v2.m128i_i32 = ConstValueExcelConfigMgr::getBackAvatarAutoRecoverPercent(&v4->design_config.txt_config_mgr.const_value_config_mgr);
  recover_percent = COERCE_FLOAT(_mm_cvtsi128_si32(v2));
  std::shared_ptr<Config>::~shared_ptr(&v12);
  if ( recover_intervel )
  {
    if ( *(_BYTE *)(((unsigned __int64)&this->last_backgroud_avatar_recover_time_ >> 3) + 0x7FFF8000) != 0
      && *(_BYTE *)(((unsigned __int64)&this->last_backgroud_avatar_recover_time_ >> 3) + 0x7FFF8000) <= 3 )
    {
      __asan_report_load4(&this->last_backgroud_avatar_recover_time_);
    }
    if ( this->last_backgroud_avatar_recover_time_ )
    {
      now = common::tools::TimeUtils::getNow();
      diff_time = 0;
      if ( *(_BYTE *)(((unsigned __int64)&this->last_backgroud_avatar_recover_time_ >> 3) + 0x7FFF8000) != 0
        && *(_BYTE *)(((unsigned __int64)&this->last_backgroud_avatar_recover_time_ >> 3) + 0x7FFF8000) <= 3 )
      {
        __asan_report_load4(&this->last_backgroud_avatar_recover_time_);
      }
      if ( now > this->last_backgroud_avatar_recover_time_ )
        diff_time = now - this->last_backgroud_avatar_recover_time_;
      v14.log_ = (common::milog::MiLog *)__PAIR64__(
                                           (float)((float)diff_time * recover_percent) / (float)recover_intervel,
                                           recover_intervel);
      *(float *)&v14.ostr_ptr_._M_ptr = recover_percent;
      v14.ostr_ptr_._M_refcount._M_pi = (std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)2> *)rsp_0;
      v14.ostr_ = (common::milog::MilogStringStream *)this;
      v7.__this = this;
      v7.__rsp = rsp_0;
      *(_OWORD *)&v7.__recover_intervel = __PAIR128__(
                                            (unsigned __int64)v14.ostr_ptr_._M_ptr,
                                            __PAIR64__(
                                              (float)((float)diff_time * recover_percent) / (float)recover_intervel,
                                              recover_intervel));
      std::function<ForeachPolicy ()(Avatar &)>::function<PlayerAvatarComp::refreshBackgroundAvatar(proto::RefreshBackgroundAvatarRsp &)::{lambda(Avatar &)#1},void,void>(
        &p_func,
        v7);
      PlayerAvatarComp::foreachBackgroundAvatar(this, &p_func);
      std::function<ForeachPolicy ()(Avatar &)>::~function(&p_func);
      if ( *(_BYTE *)(((unsigned __int64)&this->last_backgroud_avatar_recover_time_ >> 3) + 0x7FFF8000) != 0
        && *(_BYTE *)(((unsigned __int64)&this->last_backgroud_avatar_recover_time_ >> 3) + 0x7FFF8000) <= 3 )
      {
        __asan_report_store4(
          &this->last_backgroud_avatar_recover_time_,
          &p_func,
          &this->last_backgroud_avatar_recover_time_);
      }
      this->last_backgroud_avatar_recover_time_ = now;
      return 0;
    }
    else
    {
      common::milog::MiLogStream::create(
        &v14,
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/player/avatar/player_avatar_comp.cpp",
        "refreshBackgroundAvatar",
        3084);
      v6 = common::milog::MiLogStream::operator<<<char [41],(char *[41])0>(
             &v14,
             (const char (*)[41])"last_backgroud_avatar_recover_time_ is 0");
      if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
        __asan_report_load8(&this->player_);
      operator<<(v6, this->player_);
      common::milog::MiLogStream::~MiLogStream(&v14);
      return -1;
    }
  }
  else
  {
    common::milog::MiLogStream::create(
      &v14,
      &common::milog::MiLogDefault::default_log_obj_,
      4u,
      "./src/player/avatar/player_avatar_comp.cpp",
      "refreshBackgroundAvatar",
      3079);
    common::milog::MiLogStream::operator<<<char [22],(char *[22])0>(&v14, (const char (*)[22])"recover_intervel is 0");
    common::milog::MiLogStream::~MiLogStream(&v14);
    return -1;
  }
};

// Line 3094: range 00000000171807A8-0000000017180A49
ForeachPolicy __cdecl PlayerAvatarComp::refreshBackgroundAvatar(proto::RefreshBackgroundAvatarRsp &)::{lambda(Avatar &)#1}::operator()(
        const PlayerAvatarComp::refreshBackgroundAvatar::<lambda(Avatar&)> *const __closure,
        Avatar *avatar)
{
  unsigned __int64 v2; // rax
  Avatar *v4; // rcx
  __m128i v5; // xmm0
  float v6; // xmm0_4
  google::protobuf::Map<long unsigned int,unsigned int>::key_type *p_key; // rsi
  unsigned int *v8; // rax
  uint32_t *v9; // rdx
  char v10; // cl
  float cur_hp; // [rsp+14h] [rbp-2Ch]
  float max_hp; // [rsp+18h] [rbp-28h]
  uint32_t left_recover_time; // [rsp+1Ch] [rbp-24h]
  google::protobuf::Map<long unsigned int,unsigned int>::key_type key; // [rsp+20h] [rbp-20h] BYREF
  google::protobuf::Map<long unsigned int,unsigned int> *hp_full_time_map; // [rsp+28h] [rbp-18h]

  if ( *(_BYTE *)(((unsigned __int64)avatar >> 3) + 0x7FFF8000) )
    __asan_report_load8(avatar);
  v2 = *(_QWORD *)avatar->baseclass_0 + 400LL;
  if ( *(_BYTE *)((v2 >> 3) + 0x7FFF8000) )
    v2 = __asan_report_load8(*(_QWORD *)avatar->baseclass_0 + 400LL);
  if ( (*(unsigned int (__fastcall **)(Avatar *))v2)(avatar) == 3 )
    return 0;
  Avatar::setLifeAlive(avatar, 0x6Au, 0LL, 1);
  v4 = avatar;
  if ( *(_BYTE *)(((unsigned __int64)&__closure->__add_hp_percent >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)__closure + 4) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&__closure->__add_hp_percent >> 3)
                                                            + 0x7FFF8000) )
  {
    __asan_report_load4(&__closure->__add_hp_percent);
  }
  v5 = _mm_cvtsi32_si128(LODWORD(__closure->__add_hp_percent));
  Creature::changeCurHpPercent(v4, *(float *)v5.m128i_i32, CHANGE_HP_ADD_BACKGROUND, 1);
  *(float *)v5.m128i_i32 = Creature::getCurHp(avatar);
  cur_hp = COERCE_FLOAT(_mm_cvtsi128_si32(v5));
  *(float *)v5.m128i_i32 = Creature::getMaxHp(avatar);
  max_hp = COERCE_FLOAT(_mm_cvtsi128_si32(v5));
  if ( cur_hp >= max_hp )
    return 0;
  if ( *(_BYTE *)(((unsigned __int64)__closure >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)__closure >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4(__closure);
  }
  v6 = 100.0 * (float)((float)(max_hp - cur_hp) * (float)(int)__closure->__recover_intervel);
  if ( *(_BYTE *)(((unsigned __int64)&__closure->__recover_percent >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&__closure->__recover_percent >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4(&__closure->__recover_percent);
  }
  left_recover_time = (int)(float)(v6 / (float)(__closure->__recover_percent * max_hp));
  if ( *(_BYTE *)(((unsigned __int64)&__closure->__rsp >> 3) + 0x7FFF8000) )
    __asan_report_load8(&__closure->__rsp);
  hp_full_time_map = proto::RefreshBackgroundAvatarRsp::mutable_hp_full_time_map(__closure->__rsp);
  key = Avatar::getGuid(avatar);
  p_key = &key;
  v8 = google::protobuf::Map<unsigned long,unsigned int>::operator[](hp_full_time_map, &key);
  v9 = v8;
  v10 = *(_BYTE *)(((unsigned __int64)v8 >> 3) + 0x7FFF8000);
  if ( v10 != 0 && (char)(((unsigned __int8)v8 & 7) + 3) >= v10 )
  {
    LOBYTE(p_key) = v10 != 0;
    __asan_report_store4(v8, p_key, v8);
  }
  *v9 = left_recover_time;
  return 0;
};

// Line 3120: range 00000000171811D4-0000000017181428
void __cdecl PlayerAvatarComp::reviveAllAvatarByFirstTransPoint(PlayerAvatarComp *const this)
{
  unsigned __int64 v1; // rbx
  __int64 v2; // rax
  unsigned __int64 v3; // r14
  std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v4; // rax
  std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v5; // rax
  uint32_t SceneId; // [rsp+14h] [rbp-BCh]
  bool is_show_message; // [rsp+2Fh] [rbp-A1h]
  std::shared_ptr<Config> v8; // [rsp+30h] [rbp-A0h] BYREF
  std::function<ForeachPolicy(Avatar&)> p_func; // [rsp+40h] [rbp-90h] BYREF
  char v10[112]; // [rsp+60h] [rbp-70h] BYREF
  PlayerAvatarComp::reviveAllAvatarByFirstTransPoint::<lambda(Avatar&)> v11; // 0:rsi.8,8:dl.1

  v1 = (unsigned __int64)v10;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_0(64LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "1 32 16 14 scene_ptr:3123";
  *(_QWORD *)(v1 + 16) = PlayerAvatarComp::reviveAllAvatarByFirstTransPoint;
  v3 = v1 >> 3;
  *(_DWORD *)(v3 + 2147450880) = -235802127;
  *(_DWORD *)(v3 + 2147450884) = -202178560;
  is_show_message = 1;
  if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
    __asan_report_load8(&this->player_);
  Player::getSceneComp(this->player_);
  PlayerSceneComp::getCurScene((const PlayerSceneComp *const)(v1 + 32));
  if ( std::operator!=<Scene>(0LL, (const std::shared_ptr<Scene> *)(v1 + 32)) )
  {
    v4 = std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v1 + 32));
    SceneId = Scene::getSceneId(v4);
    ServiceBox::findService<GameserverService>();
    GameserverService::getConfig((GameserverService *const)&v8);
    v5 = std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false> *const)&v8);
    LOBYTE(SceneId) = SceneId != TxtConfigMgr::getDefaultWorldMainSceneId(&v5->design_config.txt_config_mgr);
    std::shared_ptr<Config>::~shared_ptr(&v8);
    if ( (_BYTE)SceneId )
      is_show_message = 0;
  }
  v11.__is_show_message = is_show_message;
  v11.__this = this;
  std::function<ForeachPolicy ()(Avatar &)>::function<PlayerAvatarComp::reviveAllAvatarByFirstTransPoint(void)::{lambda(Avatar &)#1},void,void>(
    &p_func,
    v11);
  PlayerAvatarComp::foreachMyAvatarInSceneTeam(this, &p_func);
  std::function<ForeachPolicy ()(Avatar &)>::~function(&p_func);
  std::shared_ptr<Scene>::~shared_ptr((std::shared_ptr<Scene> *const)(v1 + 32));
  if ( v10 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
  }
};

// Line 3132: range 0000000017180E16-00000000171811D2
ForeachPolicy __cdecl PlayerAvatarComp::reviveAllAvatarByFirstTransPoint(void)::{lambda(Avatar &)#1}::operator()(
        const PlayerAvatarComp::reviveAllAvatarByFirstTransPoint::<lambda(Avatar&)> *const __closure,
        Avatar *avatar)
{
  unsigned __int64 v2; // rbx
  __int64 v3; // rax
  unsigned __int64 v4; // r13
  char v5; // r14
  AvatarPtr *p_cur_avatar_ptr; // r15
  char v7; // r15
  std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v8; // rax
  std::__shared_ptr_access<proto::ShowMessageNotify,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v9; // rax
  std::__shared_ptr_access<proto::ShowMessageNotify,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v10; // rax
  uint32_t AvatarId; // edx
  PlayerAvatarComp *this; // rax
  Player *player; // r14
  ForeachPolicy result; // eax
  int hp_percent; // [rsp+24h] [rbp-8Ch]
  proto::MsgParam *proto_param; // [rsp+28h] [rbp-88h]
  std::shared_ptr<Avatar> __a; // [rsp+30h] [rbp-80h] BYREF
  char v18[112]; // [rsp+40h] [rbp-70h] BYREF

  v2 = (unsigned __int64)v18;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_0(64LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "1 32 16 15 notify_ptr:3142";
  *(_QWORD *)(v2 + 16) = PlayerAvatarComp::reviveAllAvatarByFirstTransPoint(void)::{lambda(Avatar &)#1}::operator();
  v4 = v2 >> 3;
  *(_DWORD *)(v4 + 2147450880) = -235802127;
  *(_DWORD *)(v4 + 2147450884) = -202178560;
  v5 = 0;
  if ( Creature::getLifeState(avatar) != LIFE_DEAD )
    goto LABEL_9;
  if ( *(_BYTE *)(((unsigned __int64)__closure >> 3) + 0x7FFF8000) )
    __asan_report_load8(__closure);
  p_cur_avatar_ptr = &__closure->__this->cur_avatar_ptr_;
  toThisPtr<Avatar>((Avatar *)&__a);
  v5 = 1;
  if ( std::operator!=<Avatar,Avatar>(&__a, p_cur_avatar_ptr) )
    v7 = 1;
  else
LABEL_9:
    v7 = 0;
  if ( v5 )
    std::shared_ptr<Avatar>::~shared_ptr(&__a);
  if ( v7 )
  {
    ServiceBox::findService<GameserverService>();
    GameserverService::getConfig((GameserverService *const)&__a);
    v8 = std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false> *const)&__a);
    hp_percent = ConstValueExcelConfigMgr::getHurtReviveHpPercent(&v8->design_config.txt_config_mgr.const_value_config_mgr);
    std::shared_ptr<Config>::~shared_ptr((std::shared_ptr<Config> *const)&__a);
    Creature::setCurHpPercent(avatar, (float)hp_percent, CHANGE_HP_ADD_STATUE, 1);
    Avatar::clearSpeed(avatar);
    Avatar::setLifeAlive(avatar, 0x6Bu, 0LL, 1);
    if ( *(char *)(((unsigned __int64)&__closure->__is_show_message >> 3) + 0x7FFF8000) < 0 )
      __asan_report_load1(&__closure->__is_show_message);
    if ( __closure->__is_show_message )
    {
      common::tools::perf::make_shared<proto::ShowMessageNotify>();
      v9 = std::__shared_ptr_access<proto::ShowMessageNotify,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<proto::ShowMessageNotify,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 32));
      proto::ShowMessageNotify::set_msg_id(v9, MSG_AVATAR_REVIVE_BY_STATUE);
      v10 = std::__shared_ptr_access<proto::ShowMessageNotify,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<proto::ShowMessageNotify,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 32));
      proto_param = proto::ShowMessageNotify::add_params(v10);
      AvatarId = Avatar::getAvatarId(avatar);
      proto::MsgParam::set_int_param(proto_param, AvatarId);
      if ( *(_BYTE *)(((unsigned __int64)__closure >> 3) + 0x7FFF8000) )
        __asan_report_load8(__closure);
      this = __closure->__this;
      if ( *(_BYTE *)(((unsigned __int64)&__closure->__this->player_ >> 3) + 0x7FFF8000) )
        this = (PlayerAvatarComp *)__asan_report_load8(&__closure->__this->player_);
      player = this->player_;
      std::dynamic_pointer_cast<google::protobuf::Message const,proto::ShowMessageNotify>((const std::shared_ptr<proto::ShowMessageNotify> *)&__a);
      Player::sendMessage(player, (common::minet::ConstMessagePtr *)&__a, 0LL);
      std::shared_ptr<google::protobuf::Message const>::~shared_ptr((std::shared_ptr<const google::protobuf::Message> *const)&__a);
      std::shared_ptr<proto::ShowMessageNotify>::~shared_ptr((std::shared_ptr<proto::ShowMessageNotify> *const)(v2 + 32));
    }
  }
  result = FOREACH_CONTINUE;
  if ( v18 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 3155: range 000000001718142A-0000000017181447
uint32_t __cdecl PlayerAvatarComp::getAvatarCount(PlayerAvatarComp *const this)
{
  return std::map<unsigned long,std::shared_ptr<Avatar>>::size(&this->avatar_map_);
};

// Line 3160: range 0000000017181448-00000000171819D5
PlayerAvatarComp *__fastcall PlayerAvatarComp::createTrialAvatar(
        PlayerAvatarComp *const this,
        __int64 trial_avatar_id,
        int is_inherit,
        bool a4)
{
  unsigned __int64 v4; // r12
  __int64 v5; // rax
  _DWORD *v6; // r13
  std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v7; // rax
  common::milog::MiLogStream *v8; // rax
  common::milog::MiLogStream *v9; // rax
  std::__shared_ptr_access<TrialAvatar,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v10; // r14
  TrialAvatar *v11; // rax
  TrialAvatar *v12; // rax
  common::milog::MiLogStream *v13; // rax
  std::__shared_ptr_access<TrialAvatar,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v14; // rax
  unsigned __int64 v15; // rax
  unsigned __int64 v16; // rdx
  const data::TrialAvatarExcelConfig *trial_avatar_config_ptr; // [rsp+28h] [rbp-E8h]
  std::shared_ptr<Player> v21; // [rsp+30h] [rbp-E0h] BYREF
  common::milog::MiLogStream v22; // [rsp+40h] [rbp-D0h] BYREF
  char v23[176]; // [rsp+60h] [rbp-B0h] BYREF

  v4 = (unsigned __int64)v23;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v5 = __asan_stack_malloc_1(128LL);
    if ( v5 )
      v4 = v5;
  }
  *(_QWORD *)v4 = 1102416563LL;
  *(_QWORD *)(v4 + 8) = "3 48 4 20 trial_avatar_id:3159 64 16 15 avatar_ptr:3169 96 16 21 trial_avatar_ptr:3170";
  *(_QWORD *)(v4 + 16) = PlayerAvatarComp::createTrialAvatar;
  v6 = (_DWORD *)(v4 >> 3);
  v6[536862720] = -235802127;
  v6[536862721] = -234556943;
  v6[536862722] = -219021312;
  v6[536862723] = -202178560;
  *(_DWORD *)(v4 + 48) = is_inherit;
  ServiceBox::findService<GameserverService>();
  GameserverService::getConfig((GameserverService *const)&v21);
  v7 = std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false> *const)&v21);
  trial_avatar_config_ptr = data::TrialAvatarExcelConfigMgrBase::findTrialAvatarExcelConfig(
                              &v7->design_config.txt_config_mgr.trial_avatar_config_mgr,
                              *(_DWORD *)(v4 + 48));
  std::shared_ptr<Config>::~shared_ptr((std::shared_ptr<Config> *const)&v21);
  if ( trial_avatar_config_ptr )
  {
    if ( *(_BYTE *)(((unsigned __int64)&trial_avatar_config_ptr->avatar.avatar_id >> 3) + 0x7FFF8000) != 0
      && *(_BYTE *)(((unsigned __int64)&trial_avatar_config_ptr->avatar.avatar_id >> 3) + 0x7FFF8000) <= 3 )
    {
      __asan_report_load4(&trial_avatar_config_ptr->avatar.avatar_id);
    }
    PlayerAvatarComp::createAvatar(
      (PlayerAvatarComp *const)(v4 + 64),
      trial_avatar_id,
      2u,
      trial_avatar_config_ptr->avatar.avatar_id);
    std::dynamic_pointer_cast<TrialAvatar,Avatar>((const std::shared_ptr<Avatar> *)(v4 + 96));
    if ( std::operator==<TrialAvatar>((const std::shared_ptr<TrialAvatar> *)(v4 + 96), 0LL) )
    {
      common::milog::MiLogStream::create(
        &v22,
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/player/avatar/player_avatar_comp.cpp",
        "createTrialAvatar",
        3173);
      v9 = common::milog::MiLogStream::operator<<<char [37],(char *[37])0>(
             &v22,
             (const char (*)[37])"createAvatar fails, trial_avatar_id:");
      common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v9, (const unsigned int *)(v4 + 48));
      common::milog::MiLogStream::~MiLogStream(&v22);
      std::shared_ptr<TrialAvatar>::shared_ptr((std::shared_ptr<TrialAvatar> *const)this, 0LL);
    }
    else
    {
      v10 = std::__shared_ptr_access<TrialAvatar,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<TrialAvatar,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 96));
      if ( *(_BYTE *)(((unsigned __int64)(trial_avatar_id + 24) >> 3) + 0x7FFF8000) )
        __asan_report_load8(trial_avatar_id + 24);
      toThisPtr<Player>((Player *)&v21);
      Avatar::setPlayer(v10, &v21);
      std::shared_ptr<Player>::~shared_ptr(&v21);
      v11 = std::__shared_ptr_access<TrialAvatar,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<TrialAvatar,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 96));
      TrialAvatar::setTrialAvatarId(v11, *(_DWORD *)(v4 + 48));
      v12 = std::__shared_ptr_access<TrialAvatar,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<TrialAvatar,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 96));
      if ( TrialAvatar::initByCreate(v12, a4) )
      {
        common::milog::MiLogStream::create(
          &v22,
          &common::milog::MiLogDefault::default_log_obj_,
          3u,
          "./src/player/avatar/player_avatar_comp.cpp",
          "createTrialAvatar",
          3180);
        v13 = common::milog::MiLogStream::operator<<<char [42],(char *[42])0>(
                &v22,
                (const char (*)[42])"TrialAvatar init failed, trial_avatar_id:");
        common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v13, (const unsigned int *)(v4 + 48));
        common::milog::MiLogStream::~MiLogStream(&v22);
        std::shared_ptr<TrialAvatar>::shared_ptr((std::shared_ptr<TrialAvatar> *const)this, 0LL);
      }
      else
      {
        v14 = std::__shared_ptr_access<TrialAvatar,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<TrialAvatar,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 96));
        Creature::setCurHpFull(v14, 1);
        v15 = (unsigned __int64)std::__shared_ptr_access<TrialAvatar,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<TrialAvatar,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 96));
        if ( *(_BYTE *)((v15 >> 3) + 0x7FFF8000) )
          v15 = __asan_report_load8(v15);
        v16 = *(_QWORD *)v15 + 512LL;
        if ( *(_BYTE *)((v16 >> 3) + 0x7FFF8000) )
          v15 = __asan_report_load8(*(_QWORD *)v15 + 512LL);
        (*(void (__fastcall **)(unsigned __int64))v16)(v15);
        std::shared_ptr<TrialAvatar>::shared_ptr(
          (std::shared_ptr<TrialAvatar> *const)this,
          (std::shared_ptr<TrialAvatar> *)(v4 + 96));
      }
    }
    std::shared_ptr<TrialAvatar>::~shared_ptr((std::shared_ptr<TrialAvatar> *const)(v4 + 96));
    std::shared_ptr<Avatar>::~shared_ptr((std::shared_ptr<Avatar> *const)(v4 + 64));
  }
  else
  {
    common::milog::MiLogStream::create(
      &v22,
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/player/avatar/player_avatar_comp.cpp",
      "createTrialAvatar",
      3165);
    v8 = common::milog::MiLogStream::operator<<<char [52],(char *[52])0>(
           &v22,
           (const char (*)[52])"findTrialAvatarExcelConfig failed, trial_avatar_id:");
    common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v8, (const unsigned int *)(v4 + 48));
    common::milog::MiLogStream::~MiLogStream(&v22);
    std::shared_ptr<TrialAvatar>::shared_ptr((std::shared_ptr<TrialAvatar> *const)this, 0LL);
  }
  if ( v23 == (char *)v4 )
  {
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v4 = 1172321806LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return this;
};

// Line 3190: range 00000000171819D6-0000000017181E34
TrialAvatarPtr __cdecl PlayerAvatarComp::addTrialAvatar(
        PlayerAvatarComp *const this,
        TrialAvatarPtr *p_trial_avatar_ptr,
        const proto::TrialAvatarGrantRecord *grant_record)
{
  const proto::TrialAvatarGrantRecord *v3; // rcx
  unsigned __int64 v4; // rbx
  __int64 v5; // rax
  unsigned __int64 v6; // r12
  TrialAvatarPtr result; // rax
  int v8; // eax
  common::milog::MiLogStream *v10; // r13
  std::__shared_ptr_access<TrialAvatar,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v11; // rax
  std::__shared_ptr_access<TrialAvatar,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v12; // rax
  common::milog::MiLogStream *v13; // rax
  TrialAvatar *v14; // rdx
  std::__shared_ptr_access<TrialAvatar,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v15; // rsi
  common::milog::MiLogStream *v16; // r13
  std::__shared_ptr_access<TrialAvatar,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v17; // rax
  const proto::TrialAvatarGrantRecord *grant_recorda; // [rsp+0h] [rbp-B0h]
  unsigned int val; // [rsp+2Ch] [rbp-84h] BYREF
  common::milog::MiLogStream v22; // [rsp+30h] [rbp-80h] BYREF
  char v23[96]; // [rsp+50h] [rbp-60h] BYREF

  grant_recorda = v3;
  v4 = (unsigned __int64)v23;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v5 = __asan_stack_malloc_0(64LL);
    if ( v5 )
      v4 = v5;
  }
  *(_QWORD *)v4 = 1102416563LL;
  *(_QWORD *)(v4 + 8) = "1 32 4 14 avatar_id:3203";
  *(_QWORD *)(v4 + 16) = PlayerAvatarComp::addTrialAvatar;
  v6 = v4 >> 3;
  *(_DWORD *)(v6 + 2147450880) = -235802127;
  *(_DWORD *)(v6 + 2147450884) = -202116348;
  if ( std::operator==<TrialAvatar>((const std::shared_ptr<TrialAvatar> *)grant_record, 0LL) )
  {
    common::milog::MiLogStream::create(
      &v22,
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/player/avatar/player_avatar_comp.cpp",
      "addTrialAvatar",
      3193);
    common::milog::MiLogStream::operator<<<char [28],(char *[28])0>(
      &v22,
      (const char (*)[28])"trial_avatar_ptr is nullptr");
    common::milog::MiLogStream::~MiLogStream(&v22);
    std::shared_ptr<TrialAvatar>::shared_ptr((std::shared_ptr<TrialAvatar> *const)this, 0LL);
  }
  else if ( !proto::TrialAvatarGrantRecord::grant_reason(grant_recorda)
         || (v8 = proto::TrialAvatarGrantRecord::grant_reason(grant_recorda),
             !proto::TrialAvatarGrantRecord::GrantReason_IsValid(v8)) )
  {
    common::milog::MiLogStream::create(
      &v22,
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/player/avatar/player_avatar_comp.cpp",
      "addTrialAvatar",
      3199);
    v10 = common::milog::MiLogStream::operator<<<char [44],(char *[44])0>(
            &v22,
            (const char (*)[44])"grant_reason is nos valid, trial_avatar_id:");
    v11 = std::__shared_ptr_access<TrialAvatar,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<TrialAvatar,(__gnu_cxx::_Lock_policy)2,false,false> *const)grant_record);
    val = TrialAvatar::getTrialAvatarId(v11);
    common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v10, &val);
    common::milog::MiLogStream::~MiLogStream(&v22);
    std::shared_ptr<TrialAvatar>::shared_ptr((std::shared_ptr<TrialAvatar> *const)this, 0LL);
  }
  else
  {
    v12 = std::__shared_ptr_access<TrialAvatar,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<TrialAvatar,(__gnu_cxx::_Lock_policy)2,false,false> *const)grant_record);
    *(_DWORD *)(v4 + 32) = Avatar::getAvatarId(v12);
    if ( PlayerAvatarComp::hasAvatar(
           (PlayerAvatarComp *const)p_trial_avatar_ptr,
           AVATAR_TYPE_TRIAL,
           *(_DWORD *)(v4 + 32)) )
    {
      common::milog::MiLogStream::create(
        &v22,
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/player/avatar/player_avatar_comp.cpp",
        "addTrialAvatar",
        3207);
      v13 = common::milog::MiLogStream::operator<<<char [40],(char *[40])0>(
              &v22,
              (const char (*)[40])"trial avatar has been owned, avatar_id:");
      common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v13, (const unsigned int *)(v4 + 32));
      common::milog::MiLogStream::~MiLogStream(&v22);
      std::shared_ptr<TrialAvatar>::shared_ptr((std::shared_ptr<TrialAvatar> *const)this, 0LL);
    }
    else
    {
      v14 = std::__shared_ptr_access<TrialAvatar,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<TrialAvatar,(__gnu_cxx::_Lock_policy)2,false,false> *const)grant_record);
      TrialAvatar::setGrantRecord(v14, grant_recorda);
      v15 = std::__shared_ptr_access<TrialAvatar,(__gnu_cxx::_Lock_policy)2,false,false>::operator*((const std::__shared_ptr_access<TrialAvatar,(__gnu_cxx::_Lock_policy)2,false,false> *const)grant_record);
      if ( PlayerAvatarComp::addAvatar((PlayerAvatarComp *const)p_trial_avatar_ptr, v15, 1, 2u, 0) )
      {
        common::milog::MiLogStream::create(
          &v22,
          &common::milog::MiLogDefault::default_log_obj_,
          3u,
          "./src/player/avatar/player_avatar_comp.cpp",
          "addTrialAvatar",
          3215);
        v16 = common::milog::MiLogStream::operator<<<char [34],(char *[34])0>(
                &v22,
                (const char (*)[34])"addAvatar fails, trial_avatar_id:");
        v17 = std::__shared_ptr_access<TrialAvatar,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<TrialAvatar,(__gnu_cxx::_Lock_policy)2,false,false> *const)grant_record);
        val = TrialAvatar::getTrialAvatarId(v17);
        common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v16, &val);
        common::milog::MiLogStream::~MiLogStream(&v22);
        std::shared_ptr<TrialAvatar>::shared_ptr((std::shared_ptr<TrialAvatar> *const)this, 0LL);
      }
      else
      {
        std::shared_ptr<TrialAvatar>::shared_ptr(
          (std::shared_ptr<TrialAvatar> *const)this,
          (std::shared_ptr<TrialAvatar> *)grant_record);
      }
    }
  }
  if ( v23 == (char *)v4 )
  {
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0LL;
  }
  else
  {
    *(_QWORD *)v4 = 1172321806LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
  }
  result._M_ptr = (std::__shared_ptr<TrialAvatar,(__gnu_cxx::_Lock_policy)2>::element_type *)this;
  return result;
};

// Line 3223: range 0000000017181E36-0000000017181FB7
// local variable allocation has failed, the output may be wrong!
TrialAvatarPtr __cdecl PlayerAvatarComp::grantTrialAvatar(
        PlayerAvatarComp *const this,
        uint32_t trial_avatar_id,
        const proto::TrialAvatarGrantRecord *grant_record,
        bool is_inherit)
{
  bool v4; // r8
  unsigned __int64 p_grant_reason; // rbx
  __int64 v6; // rax
  unsigned __int64 v7; // r12
  TrialAvatarPtr result; // rax
  bool is_inherita; // [rsp+8h] [rbp-88h]
  int trial_avatar_ida; // [rsp+Ch] [rbp-84h]
  proto::TrialAvatarGrantRecord v11[3]; // [rsp+20h] [rbp-70h] BYREF

  trial_avatar_ida = (int)grant_record;
  is_inherita = v4;
  p_grant_reason = (unsigned __int64)&v11[0].grant_reason_;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v6 = __asan_stack_malloc_0(64LL);
    if ( v6 )
      p_grant_reason = v6;
  }
  *(_QWORD *)p_grant_reason = 1102416563LL;
  *(_QWORD *)(p_grant_reason + 8) = "1 32 16 21 trial_avatar_ptr:3224";
  *(_QWORD *)(p_grant_reason + 16) = PlayerAvatarComp::grantTrialAvatar;
  v7 = p_grant_reason >> 3;
  *(_DWORD *)(v7 + 2147450880) = -235802127;
  *(_DWORD *)(v7 + 2147450884) = -202178560;
  PlayerAvatarComp::createTrialAvatar(
    (PlayerAvatarComp *const)(p_grant_reason + 32),
    *(__int64 *)&trial_avatar_id,
    trial_avatar_ida,
    is_inherita);
  std::shared_ptr<TrialAvatar>::shared_ptr(
    (std::shared_ptr<TrialAvatar> *const)v11,
    (const std::shared_ptr<TrialAvatar> *)(p_grant_reason + 32));
  if ( *(_WORD *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store16(this);
  PlayerAvatarComp::addTrialAvatar(this, *(TrialAvatarPtr **)&trial_avatar_id, v11);
  std::shared_ptr<TrialAvatar>::~shared_ptr((std::shared_ptr<TrialAvatar> *const)v11);
  std::shared_ptr<TrialAvatar>::~shared_ptr((std::shared_ptr<TrialAvatar> *const)(p_grant_reason + 32));
  if ( &v11[0].grant_reason_ == (google::protobuf::uint32 *)p_grant_reason )
  {
    *(_QWORD *)((p_grant_reason >> 3) + 0x7FFF8000) = 0LL;
  }
  else
  {
    *(_QWORD *)p_grant_reason = 1172321806LL;
    *(_QWORD *)((p_grant_reason >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
  }
  result._M_ptr = (std::__shared_ptr<TrialAvatar,(__gnu_cxx::_Lock_policy)2>::element_type *)this;
  return result;
};

// Line 3230: range 0000000017182004-0000000017182FA9
__int64 __fastcall PlayerAvatarComp::delTrialAvatar(
        PlayerAvatarComp *const this,
        __int32 trial_avatar_id,
        __int8 is_notify)
{
  unsigned int v3; // r14d
  unsigned __int64 v4; // r13
  __int64 v5; // rax
  _DWORD *v6; // r12
  std::__shared_ptr_access<TrialAvatar,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v7; // rax
  int v9; // r15d
  common::milog::MiLogStream *v10; // rax
  common::milog::MiLogStream *v11; // rax
  common::milog::MiLogStream *v12; // r14
  std::__shared_ptr_access<TrialAvatar,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v13; // rax
  PlayerBasicComp *BasicComp; // rax
  std::__shared_ptr_access<TrialAvatar,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v15; // rax
  std::__shared_ptr_access<TrialAvatar,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v16; // rax
  common::milog::MiLogStream *v17; // rax
  common::milog::MiLogStream *v18; // rax
  common::milog::MiLogStream *v19; // r15
  std::__shared_ptr_access<TrialAvatar,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v20; // rax
  common::milog::MiLogStream *v21; // rax
  common::milog::MiLogStream *v22; // rax
  common::milog::MiLogStream *v23; // rax
  common::milog::MiLogStream *v24; // r15
  unsigned __int64 *v25; // rax
  _BOOL4 v26; // r15d
  const std::shared_ptr<Avatar> *v27; // rax
  std::shared_ptr<Avatar> *M_current; // r15
  std::vector<std::shared_ptr<Avatar>>::iterator v29; // rax
  PlayerAvatarComp::delTrialAvatar::<lambda(AvatarPtr&)> v30; // dl
  const std::shared_ptr<Avatar> *v31; // rax
  int v32; // r15d
  std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v33; // rax
  std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v34; // rax
  Avatar *v35; // rax
  std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v36; // rax
  std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v37; // rax
  Scene *v38; // r14
  std::__shared_ptr_access<TrialAvatar,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v39; // rax
  std::__shared_ptr_access<proto::AvatarDelNotify,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v40; // rax
  Player *v41; // r14
  PlayerSceneComp *SceneComp; // rax
  PlayerEventComp *EventComp; // r14
  unsigned __int64 *v44; // r8
  proto::AvatarType *v45; // r9
  __int64 result; // rax
  std::string v47; // [rsp+0h] [rbp-280h]
  unsigned int AvatarId; // [rsp+2Ch] [rbp-254h] BYREF
  unsigned int val; // [rsp+30h] [rbp-250h] BYREF
  float revive_hp_percent; // [rsp+34h] [rbp-24Ch]
  std::map<long unsigned int,std::shared_ptr<Avatar>>::iterator __for_end; // [rsp+38h] [rbp-248h] BYREF
  uint64_t replace_avatar_guid; // [rsp+40h] [rbp-240h]
  uint64_t appear_avatar_guid; // [rsp+48h] [rbp-238h]
  std::map<long unsigned int,std::shared_ptr<Avatar>> *__for_range; // [rsp+50h] [rbp-230h]
  const std::pair<long unsigned int const,std::shared_ptr<Avatar> > *v55; // [rsp+58h] [rbp-228h]
  std::tuple_element<0,const std::pair<long unsigned int const,std::shared_ptr<Avatar> > >::type *guid; // [rsp+60h] [rbp-220h]
  std::tuple_element<1,const std::pair<long unsigned int const,std::shared_ptr<Avatar> > >::type *avatar_ptr; // [rsp+68h] [rbp-218h]
  std::vector<long unsigned int> *__for_range_0; // [rsp+70h] [rbp-210h]
  unsigned __int64 avatar_guid; // [rsp+78h] [rbp-208h]
  std::shared_ptr<FormalAvatar> __r; // [rsp+80h] [rbp-200h] BYREF
  common::milog::MiLogStream v61; // [rsp+90h] [rbp-1F0h] BYREF
  char v62[464]; // [rsp+B0h] [rbp-1D0h] BYREF

  *(&v47._anon_0._M_allocated_capacity + 1) = (std::string::size_type)this;
  HIDWORD(v47._anon_0._M_allocated_capacity) = trial_avatar_id;
  v47._anon_0._M_local_buf[0] = is_notify;
  v4 = (unsigned __int64)v62;
  v47._M_string_length = (std::string::size_type)v62;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v5 = __asan_stack_malloc_3(416LL);
    if ( v5 )
      v4 = v5;
  }
  *(_QWORD *)v4 = 1102416563LL;
  *(_QWORD *)(v4 + 8) = "11 32 1 11 holder:3250 48 4 20 trial_avatar_id:3229 64 8 22 trial_avatar_guid:3248 96 8 20 cur_a"
                        "vatar_guid:3266 128 8 15 alive_iter:3293 160 16 21 trial_avatar_ptr:3231 192 16 14 scene_ptr:332"
                        "3 224 16 15 avatar_ptr:3292 256 16 26 temp_trial_avatar_ptr:3234 288 24 13 cur_team:3267 352 24 "
                        "19 avatar_ptr_vec:3276";
  *(_QWORD *)(v4 + 16) = PlayerAvatarComp::delTrialAvatar;
  v6 = (_DWORD *)(v4 >> 3);
  v6[536862720] = -235802127;
  v6[536862721] = -234556927;
  v6[536862722] = -218959360;
  v6[536862723] = -218959360;
  v6[536862724] = -218959360;
  v6[536862725] = -219021312;
  v6[536862726] = -219021312;
  v6[536862727] = -219021312;
  v6[536862728] = -219021312;
  v6[536862729] = -234881024;
  v6[536862730] = -218959118;
  v6[536862731] = -218103808;
  v6[536862732] = -202116109;
  *(_DWORD *)(v4 + 48) = trial_avatar_id;
  std::shared_ptr<TrialAvatar>::shared_ptr((std::shared_ptr<TrialAvatar> *const)(v4 + 160), 0LL);
  __for_range = &this->avatar_map_;
  *(std::map<long unsigned int,std::shared_ptr<Avatar>>::iterator *)(v4 + 128) = std::map<unsigned long,std::shared_ptr<Avatar>>::begin(&this->avatar_map_);
  __for_end._M_node = std::map<unsigned long,std::shared_ptr<Avatar>>::end(__for_range)._M_node;
  while ( std::operator!=(
            (const std::_Rb_tree_iterator<std::pair<long unsigned int const,std::shared_ptr<Avatar> > >::_Self *)(v4 + 128),
            &__for_end) )
  {
    v55 = std::_Rb_tree_iterator<std::pair<unsigned long const,std::shared_ptr<Avatar>>>::operator*((const std::_Rb_tree_iterator<std::pair<long unsigned int const,std::shared_ptr<Avatar> > > *const)(v4 + 128));
    guid = std::get<0ul,unsigned long const,std::shared_ptr<Avatar>>(v55);
    avatar_ptr = (std::tuple_element<1,const std::pair<long unsigned int const,std::shared_ptr<Avatar> > >::type *)std::get<1ul,unsigned long const,std::shared_ptr<Avatar>>(v55);
    std::dynamic_pointer_cast<TrialAvatar,Avatar>((const std::shared_ptr<Avatar> *)(v4 + 256));
    if ( std::operator!=<TrialAvatar>(0LL, (const std::shared_ptr<TrialAvatar> *)(v4 + 256))
      && (v7 = std::__shared_ptr_access<TrialAvatar,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<TrialAvatar,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 256)),
          TrialAvatar::getTrialAvatarId(v7) == *(_DWORD *)(v4 + 48)) )
    {
      std::shared_ptr<TrialAvatar>::operator=(
        (std::shared_ptr<TrialAvatar> *const)(v4 + 160),
        (const std::shared_ptr<TrialAvatar> *)(v4 + 256));
      v9 = 0;
    }
    else
    {
      v9 = 1;
    }
    std::shared_ptr<TrialAvatar>::~shared_ptr((std::shared_ptr<TrialAvatar> *const)(v4 + 256));
    if ( v9 != 1 )
      break;
    std::_Rb_tree_iterator<std::pair<unsigned long const,std::shared_ptr<Avatar>>>::operator++((std::_Rb_tree_iterator<std::pair<long unsigned int const,std::shared_ptr<Avatar> > > *const)(v4 + 128));
  }
  if ( !std::operator==<TrialAvatar>((const std::shared_ptr<TrialAvatar> *)(v4 + 160), 0LL) )
  {
    v13 = std::__shared_ptr_access<TrialAvatar,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<TrialAvatar,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 160));
    *(_QWORD *)(v4 + 64) = Avatar::getGuid(v13);
    if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
      __asan_report_load8(&this->player_);
    BasicComp = Player::getBasicComp(this->player_);
    PlayerBasicComp::getNextTransNo[abi:cxx11]((std::string *)&v61, BasicComp);
    StatLogUtils::ContextHolder::ContextHolder((StatLogUtils::ContextHolder *const)(v4 + 32), 0x456u, v47);
    std::string::~string(&v61);
    std::unordered_set<unsigned long>::erase(
      (std::unordered_set<long unsigned int> *const)(*(&v47._anon_0._M_allocated_capacity + 1) + 320),
      (const std::unordered_set<long unsigned int>::key_type *)(v4 + 64));
    PlayerAvatarComp::notifyTempAvatarTeam(*((const PlayerAvatarComp *const *)&v47._anon_0._M_allocated_capacity + 1));
    common::tools::MiscUtils::removeValues<std::vector<unsigned long>,unsigned long>(
      (std::vector<long unsigned int> *)(*(&v47._anon_0._M_allocated_capacity + 1) + 376),
      (const unsigned __int64 *)(v4 + 64));
    common::tools::MiscUtils::removeValues<std::vector<unsigned long>,unsigned long>(
      (std::vector<long unsigned int> *)(*(&v47._anon_0._M_allocated_capacity + 1) + 400),
      (const unsigned __int64 *)(v4 + 64));
    v15 = std::__shared_ptr_access<TrialAvatar,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<TrialAvatar,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 160));
    __for_end._M_node = (std::_Rb_tree_iterator<std::pair<long unsigned int const,std::shared_ptr<Avatar> > >::_Base_ptr)Avatar::getGuid(v15);
    std::map<unsigned long,std::shared_ptr<Avatar>>::erase(
      (std::map<long unsigned int,std::shared_ptr<Avatar>> *const)(*(&v47._anon_0._M_allocated_capacity + 1) + 128),
      (const std::map<long unsigned int,std::shared_ptr<Avatar>>::key_type *)&__for_end);
    v16 = std::__shared_ptr_access<TrialAvatar,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<TrialAvatar,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 160));
    __for_end._M_node = (std::_Rb_tree_iterator<std::pair<long unsigned int const,std::shared_ptr<Avatar> > >::_Base_ptr)Avatar::getGuid(v16);
    std::set<unsigned long>::erase(
      (std::set<long unsigned int> *const)(*(&v47._anon_0._M_allocated_capacity + 1) + 176),
      (const std::set<long unsigned int>::key_type *)&__for_end);
    common::milog::MiLogStream::create(
      &v61,
      &common::milog::MiLogDefault::default_log_obj_,
      1u,
      "./src/player/avatar/player_avatar_comp.cpp",
      "delTrialAvatar",
      3262);
    v17 = common::milog::MiLogStream::operator<<<char [38],(char *[38])0>(
            &v61,
            (const char (*)[38])"remove trial avatar, trial_avatar_id:");
    v18 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v17, (const unsigned int *)(v4 + 48));
    v19 = common::milog::MiLogStream::operator<<<char [13],(char *[13])0>(v18, (const char (*)[13])", avatar_id:");
    v20 = std::__shared_ptr_access<TrialAvatar,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<TrialAvatar,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 160));
    AvatarId = Avatar::getAvatarId(v20);
    v21 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v19, &AvatarId);
    v22 = common::milog::MiLogStream::operator<<<char [21],(char *[21])0>(
            v21,
            (const char (*)[21])", trial_avatar_guid:");
    v23 = common::milog::MiLogStream::operator<<<unsigned long,(unsigned long *)0>(
            v22,
            (const unsigned __int64 *)(v4 + 64));
    v24 = common::milog::MiLogStream::operator<<<char [6],(char *[6])0>(v23, (const char (*)[6])" uid:");
    if ( *(_BYTE *)(((*(&v47._anon_0._M_allocated_capacity + 1) + 24) >> 3) + 0x7FFF8000) )
      __asan_report_load8(*(&v47._anon_0._M_allocated_capacity + 1) + 24);
    val = Player::getUid(*(const Player *const *)(*(&v47._anon_0._M_allocated_capacity + 1) + 24));
    common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v24, &val);
    common::milog::MiLogStream::~MiLogStream(&v61);
    replace_avatar_guid = 0LL;
    *(_QWORD *)(v4 + 96) = PlayerAvatarComp::getCurAvatarGuid(*((const PlayerAvatarComp *const *)&v47._anon_0._M_allocated_capacity
                                                              + 1));
    PlayerAvatarComp::getCurAvatarTeamWithTempAvatar(
      (std::vector<long unsigned int> *)(v4 + 288),
      *((PlayerAvatarComp *const *)&v47._anon_0._M_allocated_capacity + 1));
    if ( common::tools::MiscUtils::isContains<unsigned long>(
           (std::vector<long unsigned int> *)(v4 + 288),
           (const unsigned __int64 *)(v4 + 96)) )
    {
      replace_avatar_guid = *(_QWORD *)(v4 + 96);
    }
    else
    {
      std::vector<std::shared_ptr<Avatar>>::vector((std::vector<std::shared_ptr<Avatar>> *const)(v4 + 352));
      __for_range_0 = (std::vector<long unsigned int> *)(v4 + 288);
      *(std::vector<long unsigned int>::iterator *)(v4 + 128) = std::vector<unsigned long>::begin((std::vector<long unsigned int> *const)(v4 + 288));
      __for_end._M_node = (std::_Rb_tree_iterator<std::pair<long unsigned int const,std::shared_ptr<Avatar> > >::_Base_ptr)std::vector<unsigned long>::end(__for_range_0)._M_current;
      while ( __gnu_cxx::operator!=<unsigned long *,std::vector<unsigned long>>(
                (const __gnu_cxx::__normal_iterator<long unsigned int*,std::vector<long unsigned int> > *)(v4 + 128),
                (const __gnu_cxx::__normal_iterator<long unsigned int*,std::vector<long unsigned int> > *)&__for_end) )
      {
        v25 = __gnu_cxx::__normal_iterator<unsigned long *,std::vector<unsigned long>>::operator*((const __gnu_cxx::__normal_iterator<long unsigned int*,std::vector<long unsigned int> > *const)(v4 + 128));
        if ( *(_BYTE *)(((unsigned __int64)v25 >> 3) + 0x7FFF8000) )
          v25 = (unsigned __int64 *)__asan_report_load8(v25);
        avatar_guid = *v25;
        PlayerAvatarComp::findFormalAvatar(
          (const PlayerAvatarComp *const)&__r,
          *(&v47._anon_0._M_allocated_capacity + 1),
          avatar_guid);
        std::shared_ptr<Avatar>::shared_ptr<FormalAvatar,void>((std::shared_ptr<Avatar> *const)(v4 + 256), &__r);
        std::shared_ptr<FormalAvatar>::~shared_ptr(&__r);
        if ( std::operator!=<Avatar>((const std::shared_ptr<Avatar> *)(v4 + 256), 0LL) )
          std::vector<std::shared_ptr<Avatar>>::emplace_back<std::shared_ptr<Avatar>&>(
            (std::vector<std::shared_ptr<Avatar>> *const)(v4 + 352),
            (std::shared_ptr<Avatar> *)(v4 + 256),
            (std::shared_ptr<Avatar> *)(v4 + 256));
        std::shared_ptr<Avatar>::~shared_ptr((std::shared_ptr<Avatar> *const)(v4 + 256));
        __gnu_cxx::__normal_iterator<unsigned long *,std::vector<unsigned long>>::operator++((__gnu_cxx::__normal_iterator<long unsigned int*,std::vector<long unsigned int> > *const)(v4 + 128));
      }
      if ( std::vector<std::shared_ptr<Avatar>>::empty((const std::vector<std::shared_ptr<Avatar>> *const)(v4 + 352)) )
      {
        common::milog::MiLogStream::create(
          &v61,
          &common::milog::MiLogDefault::default_log_obj_,
          3u,
          "./src/player/avatar/player_avatar_comp.cpp",
          "delTrialAvatar",
          3288);
        common::milog::MiLogStream::operator<<<char [37],(char *[37])0>(
          &v61,
          (const char (*)[37])"cannot find valid avatar in cur team");
        common::milog::MiLogStream::~MiLogStream(&v61);
        v3 = -1;
        v26 = 0;
      }
      else
      {
        __for_end._M_node = (std::_Rb_tree_iterator<std::pair<long unsigned int const,std::shared_ptr<Avatar> > >::_Base_ptr)std::vector<std::shared_ptr<Avatar>>::begin((std::vector<std::shared_ptr<Avatar>> *const)(v4 + 352))._M_current;
        v27 = __gnu_cxx::__normal_iterator<std::shared_ptr<Avatar> *,std::vector<std::shared_ptr<Avatar>>>::operator*((const __gnu_cxx::__normal_iterator<std::shared_ptr<Avatar>*,std::vector<std::shared_ptr<Avatar>> > *const)&__for_end);
        std::shared_ptr<Avatar>::shared_ptr((std::shared_ptr<Avatar> *const)(v4 + 224), v27);
        M_current = std::vector<std::shared_ptr<Avatar>>::end((std::vector<std::shared_ptr<Avatar>> *const)(v4 + 352))._M_current;
        v29._M_current = std::vector<std::shared_ptr<Avatar>>::begin((std::vector<std::shared_ptr<Avatar>> *const)(v4 + 352))._M_current;
        *(__gnu_cxx::__normal_iterator<std::shared_ptr<Avatar>*,std::vector<std::shared_ptr<Avatar>> > *)(v4 + 128) = std::find_if<__gnu_cxx::__normal_iterator<std::shared_ptr<Avatar> *,std::vector<std::shared_ptr<Avatar>>>,PlayerAvatarComp::delTrialAvatar(unsigned int,bool)::{lambda(std::shared_ptr<Avatar>&)#1}>(v29, (__gnu_cxx::__normal_iterator<std::shared_ptr<Avatar>*,std::vector<std::shared_ptr<Avatar>> >)M_current, v30);
        __for_end._M_node = (std::_Rb_tree_iterator<std::pair<long unsigned int const,std::shared_ptr<Avatar> > >::_Base_ptr)std::vector<std::shared_ptr<Avatar>>::end((std::vector<std::shared_ptr<Avatar>> *const)(v4 + 352))._M_current;
        if ( __gnu_cxx::operator!=<std::shared_ptr<Avatar> *,std::vector<std::shared_ptr<Avatar>>>(
               (const __gnu_cxx::__normal_iterator<std::shared_ptr<Avatar>*,std::vector<std::shared_ptr<Avatar>> > *)(v4 + 128),
               (const __gnu_cxx::__normal_iterator<std::shared_ptr<Avatar>*,std::vector<std::shared_ptr<Avatar>> > *)&__for_end) )
        {
          v31 = __gnu_cxx::__normal_iterator<std::shared_ptr<Avatar> *,std::vector<std::shared_ptr<Avatar>>>::operator*((const __gnu_cxx::__normal_iterator<std::shared_ptr<Avatar>*,std::vector<std::shared_ptr<Avatar>> > *const)(v4 + 128));
          std::shared_ptr<Avatar>::operator=((std::shared_ptr<Avatar> *const)(v4 + 224), v31);
        }
        if ( std::operator==<Avatar>((const std::shared_ptr<Avatar> *)(v4 + 224), 0LL) )
        {
          common::milog::MiLogStream::create(
            &v61,
            &common::milog::MiLogDefault::default_log_obj_,
            3u,
            "./src/player/avatar/player_avatar_comp.cpp",
            "delTrialAvatar",
            3301);
          common::milog::MiLogStream::operator<<<char [37],(char *[37])0>(
            &v61,
            (const char (*)[37])"cannot find valid avatar in cur team");
          common::milog::MiLogStream::~MiLogStream(&v61);
          v3 = -1;
          v32 = 0;
        }
        else
        {
          v33 = std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 224));
          if ( Creature::getLifeState(v33) == LIFE_DEAD )
          {
            ServiceBox::findService<GameserverService>();
            GameserverService::getConfig((GameserverService *const)(v4 + 256));
            v34 = std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 256));
            revive_hp_percent = (float)(int)ConstValueExcelConfigMgr::getHurtReviveHpPercent(&v34->design_config.txt_config_mgr.const_value_config_mgr);
            std::shared_ptr<Config>::~shared_ptr((std::shared_ptr<Config> *const)(v4 + 256));
            v35 = std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 224));
            Avatar::setLifeAlive(v35, 0x6Du, 0LL, 1);
            v36 = std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 224));
            Creature::setCurHpPercent(v36, revive_hp_percent, CHANGE_HP_ADD_REVIVE, 1);
          }
          v37 = std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 224));
          replace_avatar_guid = Avatar::getGuid(v37);
          v32 = 1;
        }
        std::shared_ptr<Avatar>::~shared_ptr((std::shared_ptr<Avatar> *const)(v4 + 224));
        v26 = v32 == 1;
      }
      std::vector<std::shared_ptr<Avatar>>::~vector((std::vector<std::shared_ptr<Avatar>> *const)(v4 + 352));
      if ( !v26 )
        goto LABEL_56;
    }
    appear_avatar_guid = 0LL;
    if ( replace_avatar_guid )
      appear_avatar_guid = replace_avatar_guid;
    PlayerAvatarComp::syncCurAvatarTeamToSceneTeam(
      *((PlayerAvatarComp *const *)&v47._anon_0._M_allocated_capacity + 1),
      appear_avatar_guid,
      CHANGE_SCENE_TEAM_REASON_TEMP_TEAM_CHANGE);
    std::__shared_ptr_access<TrialAvatar,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<TrialAvatar,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 160));
    Entity::getScene((const Entity *const)(v4 + 192));
    if ( std::operator!=<Scene>((const std::shared_ptr<Scene> *)(v4 + 192), 0LL) )
    {
      v38 = std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 192));
      v39 = std::__shared_ptr_access<TrialAvatar,(__gnu_cxx::_Lock_policy)2,false,false>::operator*((const std::__shared_ptr_access<TrialAvatar,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 160));
      Scene::delAvatarAndWeaponEntity(v38, v39);
    }
    if ( v47._anon_0._M_local_buf[0] )
    {
      common::tools::perf::make_shared<proto::AvatarDelNotify>();
      v40 = std::__shared_ptr_access<proto::AvatarDelNotify,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<proto::AvatarDelNotify,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 224));
      proto::AvatarDelNotify::add_avatar_guid_list(v40, *(_QWORD *)(v4 + 64));
      if ( *(_BYTE *)(((*(&v47._anon_0._M_allocated_capacity + 1) + 24) >> 3) + 0x7FFF8000) )
        __asan_report_load8(*(&v47._anon_0._M_allocated_capacity + 1) + 24);
      v41 = *(Player **)(*(&v47._anon_0._M_allocated_capacity + 1) + 24);
      std::dynamic_pointer_cast<google::protobuf::Message const,proto::AvatarDelNotify>((const std::shared_ptr<proto::AvatarDelNotify> *)(v4 + 256));
      Player::sendMessage(v41, (common::minet::ConstMessagePtr *)(v4 + 256), 0LL);
      std::shared_ptr<google::protobuf::Message const>::~shared_ptr((std::shared_ptr<const google::protobuf::Message> *const)(v4 + 256));
      std::shared_ptr<proto::AvatarDelNotify>::~shared_ptr((std::shared_ptr<proto::AvatarDelNotify> *const)(v4 + 224));
    }
    if ( *(_BYTE *)(((*(&v47._anon_0._M_allocated_capacity + 1) + 24) >> 3) + 0x7FFF8000) )
      __asan_report_load8(*(&v47._anon_0._M_allocated_capacity + 1) + 24);
    SceneComp = Player::getSceneComp(*(Player *const *)(*(&v47._anon_0._M_allocated_capacity + 1) + 24));
    PlayerSceneComp::onDelAvatar(SceneComp, *(_QWORD *)(v4 + 64));
    if ( *(_BYTE *)(((*(&v47._anon_0._M_allocated_capacity + 1) + 24) >> 3) + 0x7FFF8000) )
      __asan_report_load8(*(&v47._anon_0._M_allocated_capacity + 1) + 24);
    EventComp = Player::getEventComp(*(Player *const *)(*(&v47._anon_0._M_allocated_capacity + 1) + 24));
    val = 2;
    common::tools::perf::make_shared<DelAvatarEvent,unsigned int &,unsigned long &,proto::AvatarType>(
      (unsigned int *)(v4 + 224),
      (unsigned __int64 *)(v4 + 48),
      (proto::AvatarType *)(v4 + 64),
      &val,
      v44,
      v45);
    std::shared_ptr<BaseEvent>::shared_ptr<DelAvatarEvent,void>(
      (std::shared_ptr<BaseEvent> *const)(v4 + 256),
      (std::shared_ptr<DelAvatarEvent> *)(v4 + 224));
    PlayerEventComp::notifyEvent(EventComp, (BaseEventPtr *)(v4 + 256));
    std::shared_ptr<BaseEvent>::~shared_ptr((std::shared_ptr<BaseEvent> *const)(v4 + 256));
    std::shared_ptr<DelAvatarEvent>::~shared_ptr((std::shared_ptr<DelAvatarEvent> *const)(v4 + 224));
    v3 = 0;
    std::shared_ptr<Scene>::~shared_ptr((std::shared_ptr<Scene> *const)(v4 + 192));
LABEL_56:
    std::vector<unsigned long>::~vector((std::vector<long unsigned int> *const)(v4 + 288));
    StatLogUtils::ContextHolder::~ContextHolder((StatLogUtils::ContextHolder *const)(v4 + 32));
    goto LABEL_57;
  }
  common::milog::MiLogStream::create(
    &v61,
    &common::milog::MiLogDefault::default_log_obj_,
    1u,
    "./src/player/avatar/player_avatar_comp.cpp",
    "delTrialAvatar",
    3244);
  v10 = common::milog::MiLogStream::operator<<<char [41],(char *[41])0>(
          &v61,
          (const char (*)[41])"trial avatar not found. trial_avatar_id:");
  v11 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v10, (const unsigned int *)(v4 + 48));
  v12 = common::milog::MiLogStream::operator<<<char [6],(char *[6])0>(v11, (const char (*)[6])" uid:");
  if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
    __asan_report_load8(&this->player_);
  val = Player::getUid(this->player_);
  common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v12, &val);
  common::milog::MiLogStream::~MiLogStream(&v61);
  v3 = -1;
LABEL_57:
  std::shared_ptr<TrialAvatar>::~shared_ptr((std::shared_ptr<TrialAvatar> *const)(v4 + 160));
  result = v3;
  if ( v47._M_string_length == v4 )
  {
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8008) = 0LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8010) = 0LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8018) = 0LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8020) = 0LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8028) = 0LL;
    *(_DWORD *)((v4 >> 3) + 0x7FFF8030) = 0;
  }
  else
  {
    *(_QWORD *)v4 = 1172321806LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8020) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8028) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v4 >> 3) + 0x7FFF8030) = -168430091;
  }
  return result;
};

// Line 3294: range 0000000017181FB8-0000000017182003
bool __cdecl PlayerAvatarComp::delTrialAvatar(unsigned int,bool)::{lambda(std::shared_ptr<Avatar> &)#1}::operator()(
        const PlayerAvatarComp::delTrialAvatar::<lambda(AvatarPtr&)> *const __closure,
        AvatarPtr *ptr)
{
  std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v2; // rax
  bool result; // al

  result = 0;
  if ( std::operator!=<Avatar>(ptr, 0LL) )
  {
    v2 = std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false> *const)ptr);
    if ( Creature::getLifeState(v2) == LIFE_ALIVE )
      return 1;
  }
  return result;
};

// Line 3342: range 0000000017182FAA-0000000017183B8C
__int64 __fastcall PlayerAvatarComp::setUpTrialAvatarInTeam(
        PlayerAvatarComp *const this,
        uint32_t trial_avatar_id,
        const proto::TrialAvatarGrantRecord *grant_record,
        bool is_lock_team,
        __int8 is_force_grant)
{
  unsigned int v5; // r14d
  unsigned __int64 v6; // r13
  __int64 v7; // rax
  _DWORD *v8; // r12
  PlayerBasicComp *BasicComp; // rax
  std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v10; // rax
  common::milog::MiLogStream *v11; // rax
  common::milog::MiLogStream *v12; // rax
  common::milog::MiLogStream *v13; // rcx
  std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v14; // rax
  uint64_t Guid; // rax
  std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v16; // rax
  std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v17; // rax
  float v18; // xmm0_4
  std::__shared_ptr_access<TrialAvatar,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v19; // rax
  std::__shared_ptr_access<TrialAvatar,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v20; // rax
  float v21; // xmm0_4
  char v22; // al
  common::milog::MiLogStream *v23; // rax
  std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v24; // rax
  std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v25; // rax
  std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v26; // rax
  Avatar *v27; // rax
  std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v28; // rax
  std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v29; // rax
  int v30; // r15d
  std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v31; // rax
  uint64_t v32; // rax
  bool v33; // r15
  common::milog::MiLogStream *v34; // rax
  common::milog::MiLogStream *v35; // rax
  std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v36; // rax
  uint64_t v37; // rax
  std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v38; // rax
  uint64_t v39; // rax
  __int64 result; // rax
  std::string v41; // [rsp+0h] [rbp-1B0h]
  char *v42; // [rsp+0h] [rbp-1B0h]
  float v43; // [rsp+Ch] [rbp-1A4h]
  float b; // [rsp+10h] [rbp-1A0h]
  float ba; // [rsp+10h] [rbp-1A0h]
  bool is_force_granta; // [rsp+14h] [rbp-19Ch]
  std::allocator<long unsigned int> __a; // [rsp+3Fh] [rbp-171h] BYREF
  std::unordered_set<long unsigned int>::value_type __x; // [rsp+40h] [rbp-170h] BYREF
  const data::TrialAvatarExcelConfig *trial_avatar_config_ptr; // [rsp+48h] [rbp-168h]
  std::shared_ptr<Scene> v51; // [rsp+50h] [rbp-160h] BYREF
  std::string v52; // [rsp+60h] [rbp-150h] BYREF
  char v53[304]; // [rsp+80h] [rbp-130h] BYREF

  *(&v41._anon_0._M_allocated_capacity + 1) = (std::string::size_type)grant_record;
  v41._anon_0._M_local_buf[4] = is_force_grant;
  v6 = (unsigned __int64)v53;
  v41._M_dataplus._M_p = v53;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v7 = __asan_stack_malloc_2(256LL);
    if ( v7 )
      v6 = v7;
  }
  *(_QWORD *)v6 = 1102416563LL;
  *(_QWORD *)(v6 + 8) = "7 48 1 11 holder:3343 64 4 14 avatar_id:3350 80 4 20 trial_avatar_id:3341 96 16 15 avatar_ptr:33"
                        "52 128 16 21 trial_avatar_ptr:3353 160 16 14 scene_ptr:3400 192 24 13 guid_vec:3391";
  *(_QWORD *)(v6 + 16) = PlayerAvatarComp::setUpTrialAvatarInTeam;
  v8 = (_DWORD *)(v6 >> 3);
  v8[536862720] = -235802127;
  v8[536862721] = -234753551;
  v8[536862722] = -234556924;
  v8[536862723] = -219021312;
  v8[536862724] = -219021312;
  v8[536862725] = -219021312;
  v8[536862726] = -218103808;
  v8[536862727] = -202116109;
  *(_DWORD *)(v6 + 80) = trial_avatar_id;
  if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
    __asan_report_load8(&this->player_);
  BasicComp = Player::getBasicComp(this->player_);
  PlayerBasicComp::getNextTransNo[abi:cxx11](&v52, BasicComp);
  StatLogUtils::ContextHolder::ContextHolder((StatLogUtils::ContextHolder *const)(v6 + 48), 0x455u, v41);
  std::string::~string(&v52);
  ServiceBox::findService<GameserverService>();
  GameserverService::getConfig((GameserverService *const)&v51);
  v10 = std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false> *const)&v51);
  trial_avatar_config_ptr = data::TrialAvatarExcelConfigMgrBase::findTrialAvatarExcelConfig(
                              &v10->design_config.txt_config_mgr.trial_avatar_config_mgr,
                              *(_DWORD *)(v6 + 80));
  std::shared_ptr<Config>::~shared_ptr((std::shared_ptr<Config> *const)&v51);
  if ( !trial_avatar_config_ptr )
  {
    common::milog::MiLogStream::create(
      (common::milog::MiLogStream *)&v52,
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/player/avatar/player_avatar_comp.cpp",
      "setUpTrialAvatarInTeam",
      3347);
    v11 = common::milog::MiLogStream::operator<<<char [52],(char *[52])0>(
            (common::milog::MiLogStream *const)&v52,
            (const char (*)[52])"findTrialAvatarExcelConfig failed, trial_avatar_id:");
    common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v11, (const unsigned int *)(v6 + 80));
    common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)&v52);
    v5 = -1;
    goto LABEL_42;
  }
  if ( *(_BYTE *)(((unsigned __int64)&trial_avatar_config_ptr->avatar.avatar_id >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&trial_avatar_config_ptr->avatar.avatar_id >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4(&trial_avatar_config_ptr->avatar.avatar_id);
  }
  *(_DWORD *)(v6 + 64) = trial_avatar_config_ptr->avatar.avatar_id;
  PlayerAvatarComp::findFormalAvatarByAvatarId((const PlayerAvatarComp *const)(v6 + 160), (uint32_t)this);
  std::shared_ptr<Avatar>::shared_ptr<FormalAvatar,void>(
    (std::shared_ptr<Avatar> *const)(v6 + 96),
    (std::shared_ptr<FormalAvatar> *)(v6 + 160));
  std::shared_ptr<FormalAvatar>::~shared_ptr((std::shared_ptr<FormalAvatar> *const)(v6 + 160));
  PlayerAvatarComp::createTrialAvatar((PlayerAvatarComp *const)(v6 + 128), (__int64)this, *(_DWORD *)(v6 + 80), 0);
  if ( std::operator==<TrialAvatar>((const std::shared_ptr<TrialAvatar> *)(v6 + 128), 0LL) )
  {
    common::milog::MiLogStream::create(
      (common::milog::MiLogStream *)&v52,
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/player/avatar/player_avatar_comp.cpp",
      "setUpTrialAvatarInTeam",
      3356);
    v12 = common::milog::MiLogStream::operator<<<char [43],(char *[43])0>(
            (common::milog::MiLogStream *const)&v52,
            (const char (*)[43])"createTrialAvatar failed. trial_avatar_id:");
    v13 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v12, (const unsigned int *)(v6 + 80));
    if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
      __asan_report_load8(&this->player_);
    operator<<(v13, this->player_);
    common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)&v52);
    v5 = -1;
  }
  else
  {
    if ( std::operator==<Avatar>((const std::shared_ptr<Avatar> *)(v6 + 96), 0LL) )
      goto LABEL_18;
    v14 = std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v6 + 96));
    Guid = Avatar::getGuid(v14);
    if ( (unsigned __int8)PlayerAvatarComp::isMyAvatarInSceneTeam(this, Guid) != 1 )
      goto LABEL_18;
    if ( is_force_granta )
      goto LABEL_18;
    v16 = std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v6 + 96));
    b = Avatar::calcCombatForceComparisonFactor(v16);
    v17 = std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v6 + 96));
    v18 = Avatar::calcAvatarCombatForce(v17);
    ba = SAFE_MULTIPLY<float,float>(v18, b);
    v19 = std::__shared_ptr_access<TrialAvatar,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<TrialAvatar,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v6 + 128));
    v43 = Avatar::calcCombatForceComparisonFactor(v19);
    v20 = std::__shared_ptr_access<TrialAvatar,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<TrialAvatar,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v6 + 128));
    v21 = Avatar::calcAvatarCombatForce(v20);
    if ( SAFE_MULTIPLY<float,float>(v21, v43) > ba )
LABEL_18:
      v22 = 1;
    else
      v22 = 0;
    if ( v22 )
    {
      std::shared_ptr<TrialAvatar>::shared_ptr(
        (std::shared_ptr<TrialAvatar> *const)(v6 + 160),
        (const std::shared_ptr<TrialAvatar> *)(v6 + 128));
      PlayerAvatarComp::addTrialAvatar(
        (PlayerAvatarComp *const)&v51,
        (TrialAvatarPtr *)this,
        (const proto::TrialAvatarGrantRecord *)(v6 + 160));
      std::shared_ptr<Avatar>::operator=<TrialAvatar>(
        (std::shared_ptr<Avatar> *const)(v6 + 96),
        (std::shared_ptr<TrialAvatar> *)&v51);
      std::shared_ptr<TrialAvatar>::~shared_ptr((std::shared_ptr<TrialAvatar> *const)&v51);
      std::shared_ptr<TrialAvatar>::~shared_ptr((std::shared_ptr<TrialAvatar> *const)(v6 + 160));
    }
    if ( std::operator==<Avatar>((const std::shared_ptr<Avatar> *)(v6 + 96), 0LL) )
    {
      common::milog::MiLogStream::create(
        (common::milog::MiLogStream *)&v52,
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/player/avatar/player_avatar_comp.cpp",
        "setUpTrialAvatarInTeam",
        3372);
      v23 = common::milog::MiLogStream::operator<<<char [38],(char *[38])0>(
              (common::milog::MiLogStream *const)&v52,
              (const char (*)[38])"getAvatarPtr failed, trial_avatar_id:");
      common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v23, (const unsigned int *)(v6 + 64));
      common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)&v52);
      v5 = -1;
    }
    else
    {
      v24 = std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v6 + 96));
      if ( !Avatar::isFormal(v24) )
      {
        v25 = std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v6 + 96));
        __x = Avatar::getGuid(v25);
        std::unordered_set<unsigned long>::insert(&this->temp_avatar_guid_set_, &__x);
        PlayerAvatarComp::notifyTempAvatarTeam(this);
      }
      v26 = std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v6 + 96));
      if ( Creature::getLifeState(v26) == LIFE_DEAD )
      {
        v27 = std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v6 + 96));
        Avatar::setLifeAlive(v27, 0x6Cu, 0LL, 1);
        v28 = std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v6 + 96));
        Creature::setCurHpFull(v28, 1);
      }
      if ( is_lock_team )
      {
        std::allocator<unsigned long>::allocator(&__a);
        v29 = std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v6 + 96));
        __x = Avatar::getGuid(v29);
        std::vector<unsigned long>::vector((std::vector<long unsigned int> *const)(v6 + 192), 1uLL, &__x, &__a);
        std::allocator<unsigned long>::~allocator(&__a);
        std::vector<unsigned long>::operator=(
          &this->quest_lock_team_avatar_guid_vec_,
          (const std::vector<long unsigned int> *)(v6 + 192));
        if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
          __asan_report_load8(&this->player_);
        Player::getSceneComp(this->player_);
        PlayerSceneComp::getCurScene((const PlayerSceneComp *const)(v6 + 160));
        if ( std::operator==<Scene>(0LL, (const std::shared_ptr<Scene> *)(v6 + 160)) )
        {
          common::milog::MiLogStream::create(
            (common::milog::MiLogStream *)&v52,
            &common::milog::MiLogDefault::default_log_obj_,
            1u,
            "./src/player/avatar/player_avatar_comp.cpp",
            "setUpTrialAvatarInTeam",
            3403);
          common::milog::MiLogStream::operator<<<char [18],(char *[18])0>(
            (common::milog::MiLogStream *const)&v52,
            (const char (*)[18])off_2603F4A0);
          common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)&v52);
          v5 = 0;
          v30 = 0;
        }
        else
        {
          std::shared_ptr<Scene>::shared_ptr(&v51, (const std::shared_ptr<Scene> *)(v6 + 160));
          v31 = std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v6 + 96));
          v32 = Avatar::getGuid(v31);
          v33 = PlayerAvatarComp::setSceneTeamAndAddToScene(
                  this,
                  (const std::vector<long unsigned int> *)(v6 + 192),
                  v32,
                  &v51,
                  CHANGE_SCENE_TEAM_REASON_TEMP_TEAM_CHANGE) != 0;
          std::shared_ptr<Scene>::~shared_ptr(&v51);
          if ( v33 )
          {
            common::milog::MiLogStream::create(
              (common::milog::MiLogStream *)&v52,
              &common::milog::MiLogDefault::default_log_obj_,
              3u,
              "./src/player/avatar/player_avatar_comp.cpp",
              "setUpTrialAvatarInTeam",
              3408);
            v34 = common::milog::MiLogStream::operator<<<char [48],(char *[48])0>(
                    (common::milog::MiLogStream *const)&v52,
                    (const char (*)[48])off_2603F4E0);
            common::milog::MiLogStream::operator<<<unsigned long>(
              v34,
              (const std::vector<long unsigned int> *)(v6 + 192));
            common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)&v52);
            v5 = -1;
            v30 = 0;
          }
          else
          {
            common::milog::MiLogStream::create(
              (common::milog::MiLogStream *)&v52,
              &common::milog::MiLogDefault::default_log_obj_,
              1u,
              "./src/player/avatar/player_avatar_comp.cpp",
              "setUpTrialAvatarInTeam",
              3411);
            v35 = common::milog::MiLogStream::operator<<<char [53],(char *[53])0>(
                    (common::milog::MiLogStream *const)&v52,
                    (const char (*)[53])off_2603F540);
            common::milog::MiLogStream::operator<<<unsigned long>(
              v35,
              (const std::vector<long unsigned int> *)(v6 + 192));
            common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)&v52);
            v30 = 1;
          }
        }
        std::shared_ptr<Scene>::~shared_ptr((std::shared_ptr<Scene> *const)(v6 + 160));
        std::vector<unsigned long>::~vector((std::vector<long unsigned int> *const)(v6 + 192));
        if ( v30 != 1 )
          goto LABEL_41;
      }
      else
      {
        v36 = std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v6 + 96));
        v37 = Avatar::getGuid(v36);
        if ( (unsigned __int8)PlayerAvatarComp::isMyAvatarInSceneTeam(this, v37) != 1 )
        {
          v38 = std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v6 + 96));
          v39 = Avatar::getGuid(v38);
          PlayerAvatarComp::syncCurAvatarTeamToSceneTeam(this, v39, CHANGE_SCENE_TEAM_REASON_TEMP_TEAM_CHANGE);
        }
      }
      v5 = 0;
    }
  }
LABEL_41:
  std::shared_ptr<TrialAvatar>::~shared_ptr((std::shared_ptr<TrialAvatar> *const)(v6 + 128));
  std::shared_ptr<Avatar>::~shared_ptr((std::shared_ptr<Avatar> *const)(v6 + 96));
LABEL_42:
  StatLogUtils::ContextHolder::~ContextHolder((StatLogUtils::ContextHolder *const)(v6 + 48));
  result = v5;
  if ( v42 == (char *)v6 )
  {
    *(_QWORD *)((v6 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v6 >> 3) + 0x7FFF8008) = 0LL;
    *(_QWORD *)((v6 >> 3) + 0x7FFF8010) = 0LL;
    *(_QWORD *)((v6 >> 3) + 0x7FFF8018) = 0LL;
  }
  else
  {
    *(_QWORD *)v6 = 1172321806LL;
    *(_QWORD *)((v6 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v6 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v6 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v6 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 3425: range 0000000017183B8E-0000000017184B49
int32_t __cdecl PlayerAvatarComp::setUpTrialAvatarVecInTeamAndLockTeam(
        PlayerAvatarComp *const this,
        std::vector<unsigned int> *p_trial_avatar_vec,
        const proto::TrialAvatarGrantRecord *grant_record,
        bool is_force_grant)
{
  unsigned __int64 v4; // r13
  __int64 v5; // rax
  _DWORD *v6; // r12
  PlayerBasicComp *BasicComp; // rax
  TrialAvatarExcelConfigMgr *p_trial_avatar_config_mgr; // rcx
  common::milog::MiLogStream *v9; // rax
  common::milog::MiLogStream *v10; // rax
  int v11; // r14d
  std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v12; // rax
  uint64_t v13; // rdx
  std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v14; // rax
  std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v15; // rax
  float v16; // xmm0_4
  std::__shared_ptr_access<TrialAvatar,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v17; // rax
  std::__shared_ptr_access<TrialAvatar,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v18; // rax
  float v19; // xmm0_4
  char v20; // al
  common::milog::MiLogStream *v21; // rax
  std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v22; // rax
  common::milog::MiLogStream *v23; // rax
  std::vector<long unsigned int>::size_type v24; // r14
  common::milog::MiLogStream *v26; // rax
  int32_t v27; // r14d
  const unsigned __int64 *v28; // rax
  common::milog::MiLogStream *v29; // rax
  int v30; // r14d
  std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v31; // rax
  std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v32; // rax
  std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v33; // rax
  Avatar *v34; // rax
  std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v35; // rax
  uint64_t *v36; // rax
  bool v37; // r14
  common::milog::MiLogStream *v38; // rax
  common::milog::MiLogStream *v39; // rax
  int32_t result; // eax
  std::string v41; // [rsp+0h] [rbp-1D0h]
  float v42; // [rsp+Ch] [rbp-1C4h]
  float b; // [rsp+10h] [rbp-1C0h]
  float ba; // [rsp+10h] [rbp-1C0h]
  bool is_force_granta; // [rsp+14h] [rbp-1BCh]
  std::vector<unsigned int>::iterator __for_begin; // [rsp+30h] [rbp-1A0h] BYREF
  std::vector<unsigned int>::iterator __for_end; // [rsp+38h] [rbp-198h] BYREF
  std::vector<long unsigned int>::value_type __x; // [rsp+40h] [rbp-190h] BYREF
  std::vector<unsigned int> *__for_range; // [rsp+48h] [rbp-188h]
  const unsigned int *trial_avatar_id; // [rsp+50h] [rbp-180h]
  const data::TrialAvatarExcelConfig *trial_avatar_config_ptr; // [rsp+58h] [rbp-178h]
  std::vector<long unsigned int> *__for_range_0; // [rsp+60h] [rbp-170h]
  const unsigned __int64 *guid; // [rsp+68h] [rbp-168h]
  std::shared_ptr<FormalAvatar> __r; // [rsp+70h] [rbp-160h] BYREF
  std::string v55; // [rsp+80h] [rbp-150h] BYREF
  char v56[304]; // [rsp+A0h] [rbp-130h] BYREF

  *(&v41._anon_0._M_allocated_capacity + 1) = (std::string::size_type)grant_record;
  v41._anon_0._M_local_buf[4] = is_force_grant;
  v4 = (unsigned __int64)v56;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v5 = __asan_stack_malloc_2(256LL);
    if ( v5 )
      v4 = v5;
  }
  *(_QWORD *)v4 = 1102416563LL;
  *(_QWORD *)(v4 + 8) = "7 32 1 11 holder:3426 48 4 14 avatar_id:3436 64 16 15 avatar_ptr:3438 96 16 21 trial_avatar_ptr:"
                        "3439 128 16 14 scene_ptr:3509 160 16 15 avatar_ptr:3486 192 24 13 guid_vec:3427";
  *(_QWORD *)(v4 + 16) = PlayerAvatarComp::setUpTrialAvatarVecInTeamAndLockTeam;
  v6 = (_DWORD *)(v4 >> 3);
  v6[536862720] = -235802127;
  v6[536862721] = -234556927;
  v6[536862722] = -219021312;
  v6[536862723] = -219021312;
  v6[536862724] = -219021312;
  v6[536862725] = -219021312;
  v6[536862726] = -218103808;
  v6[536862727] = -202116109;
  if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
    __asan_report_load8(&this->player_);
  BasicComp = Player::getBasicComp(this->player_);
  PlayerBasicComp::getNextTransNo[abi:cxx11](&v55, BasicComp);
  StatLogUtils::ContextHolder::ContextHolder((StatLogUtils::ContextHolder *const)(v4 + 32), 0x455u, v41);
  std::string::~string(&v55);
  std::vector<unsigned long>::vector((std::vector<long unsigned int> *const)(v4 + 192));
  __for_range = p_trial_avatar_vec;
  __for_begin._M_current = std::vector<unsigned int>::begin(p_trial_avatar_vec)._M_current;
  __for_end._M_current = std::vector<unsigned int>::end(p_trial_avatar_vec)._M_current;
  while ( __gnu_cxx::operator!=<unsigned int *,std::vector<unsigned int>>(&__for_begin, &__for_end) )
  {
    trial_avatar_id = __gnu_cxx::__normal_iterator<unsigned int *,std::vector<unsigned int>>::operator*(&__for_begin);
    ServiceBox::findService<GameserverService>();
    GameserverService::getConfig((GameserverService *const)(v4 + 128));
    p_trial_avatar_config_mgr = &std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 128))->design_config.txt_config_mgr.trial_avatar_config_mgr;
    if ( *(_BYTE *)(((unsigned __int64)trial_avatar_id >> 3) + 0x7FFF8000) != 0
      && (char)(((unsigned __int8)trial_avatar_id & 7) + 3) >= *(_BYTE *)(((unsigned __int64)trial_avatar_id >> 3)
                                                                        + 0x7FFF8000) )
    {
      __asan_report_load4(trial_avatar_id);
    }
    trial_avatar_config_ptr = data::TrialAvatarExcelConfigMgrBase::findTrialAvatarExcelConfig(
                                p_trial_avatar_config_mgr,
                                *trial_avatar_id);
    std::shared_ptr<Config>::~shared_ptr((std::shared_ptr<Config> *const)(v4 + 128));
    if ( !trial_avatar_config_ptr )
    {
      common::milog::MiLogStream::create(
        (common::milog::MiLogStream *)&v55,
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/player/avatar/player_avatar_comp.cpp",
        "setUpTrialAvatarVecInTeamAndLockTeam",
        3433);
      v9 = common::milog::MiLogStream::operator<<<char [52],(char *[52])0>(
             (common::milog::MiLogStream *const)&v55,
             (const char (*)[52])"findTrialAvatarExcelConfig failed, trial_avatar_id:");
      common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v9, trial_avatar_id);
      common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)&v55);
      break;
    }
    if ( *(_BYTE *)(((unsigned __int64)&trial_avatar_config_ptr->avatar.avatar_id >> 3) + 0x7FFF8000) != 0
      && *(_BYTE *)(((unsigned __int64)&trial_avatar_config_ptr->avatar.avatar_id >> 3) + 0x7FFF8000) <= 3 )
    {
      __asan_report_load4(&trial_avatar_config_ptr->avatar.avatar_id);
    }
    *(_DWORD *)(v4 + 48) = trial_avatar_config_ptr->avatar.avatar_id;
    PlayerAvatarComp::findFormalAvatarByAvatarId((const PlayerAvatarComp *const)&__r, (uint32_t)this);
    std::shared_ptr<Avatar>::shared_ptr<FormalAvatar,void>((std::shared_ptr<Avatar> *const)(v4 + 64), &__r);
    std::shared_ptr<FormalAvatar>::~shared_ptr(&__r);
    if ( *(_BYTE *)(((unsigned __int64)trial_avatar_id >> 3) + 0x7FFF8000) != 0
      && (char)(((unsigned __int8)trial_avatar_id & 7) + 3) >= *(_BYTE *)(((unsigned __int64)trial_avatar_id >> 3)
                                                                        + 0x7FFF8000) )
    {
      __asan_report_load4(trial_avatar_id);
    }
    PlayerAvatarComp::createTrialAvatar((PlayerAvatarComp *const)(v4 + 96), (__int64)this, *trial_avatar_id, 0);
    if ( std::operator==<TrialAvatar>((const std::shared_ptr<TrialAvatar> *)(v4 + 96), 0LL) )
    {
      common::milog::MiLogStream::create(
        (common::milog::MiLogStream *)&v55,
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/player/avatar/player_avatar_comp.cpp",
        "setUpTrialAvatarVecInTeamAndLockTeam",
        3442);
      v10 = common::milog::MiLogStream::operator<<<char [43],(char *[43])0>(
              (common::milog::MiLogStream *const)&v55,
              (const char (*)[43])"createTrialAvatar failed. trial_avatar_id:");
      common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v10, trial_avatar_id);
      common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)&v55);
      v11 = 0;
    }
    else
    {
      if ( std::operator==<Avatar>((const std::shared_ptr<Avatar> *)(v4 + 64), 0LL) )
        goto LABEL_22;
      v12 = std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 64));
      v13 = Avatar::getGuid(v12);
      if ( (unsigned __int8)PlayerAvatarComp::isMyAvatarInSceneTeam(this, v13) != 1 )
        goto LABEL_22;
      if ( is_force_granta )
        goto LABEL_22;
      v14 = std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 64));
      b = Avatar::calcCombatForceComparisonFactor(v14);
      v15 = std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 64));
      v16 = Avatar::calcAvatarCombatForce(v15);
      ba = SAFE_MULTIPLY<float,float>(v16, b);
      v17 = std::__shared_ptr_access<TrialAvatar,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<TrialAvatar,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 96));
      v42 = Avatar::calcCombatForceComparisonFactor(v17);
      v18 = std::__shared_ptr_access<TrialAvatar,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<TrialAvatar,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 96));
      v19 = Avatar::calcAvatarCombatForce(v18);
      if ( SAFE_MULTIPLY<float,float>(v19, v42) > ba )
LABEL_22:
        v20 = 1;
      else
        v20 = 0;
      if ( v20 )
      {
        std::shared_ptr<TrialAvatar>::shared_ptr(
          (std::shared_ptr<TrialAvatar> *const)(v4 + 128),
          (const std::shared_ptr<TrialAvatar> *)(v4 + 96));
        PlayerAvatarComp::addTrialAvatar(
          (PlayerAvatarComp *const)(v4 + 160),
          (TrialAvatarPtr *)this,
          (const proto::TrialAvatarGrantRecord *)(v4 + 128));
        std::shared_ptr<Avatar>::operator=<TrialAvatar>(
          (std::shared_ptr<Avatar> *const)(v4 + 64),
          (std::shared_ptr<TrialAvatar> *)(v4 + 160));
        std::shared_ptr<TrialAvatar>::~shared_ptr((std::shared_ptr<TrialAvatar> *const)(v4 + 160));
        std::shared_ptr<TrialAvatar>::~shared_ptr((std::shared_ptr<TrialAvatar> *const)(v4 + 128));
      }
      if ( std::operator==<Avatar>((const std::shared_ptr<Avatar> *)(v4 + 64), 0LL) )
      {
        common::milog::MiLogStream::create(
          (common::milog::MiLogStream *)&v55,
          &common::milog::MiLogDefault::default_log_obj_,
          3u,
          "./src/player/avatar/player_avatar_comp.cpp",
          "setUpTrialAvatarVecInTeamAndLockTeam",
          3457);
        v21 = common::milog::MiLogStream::operator<<<char [38],(char *[38])0>(
                (common::milog::MiLogStream *const)&v55,
                (const char (*)[38])"getAvatarPtr failed, trial_avatar_id:");
        common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v21, (const unsigned int *)(v4 + 48));
        common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)&v55);
        v11 = 0;
      }
      else
      {
        v22 = std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 64));
        __x = Avatar::getGuid(v22);
        std::vector<unsigned long>::push_back((std::vector<long unsigned int> *const)(v4 + 192), &__x);
        v11 = 1;
      }
    }
    std::shared_ptr<TrialAvatar>::~shared_ptr((std::shared_ptr<TrialAvatar> *const)(v4 + 96));
    std::shared_ptr<Avatar>::~shared_ptr((std::shared_ptr<Avatar> *const)(v4 + 64));
    if ( v11 != 1 )
      break;
    __gnu_cxx::__normal_iterator<unsigned int *,std::vector<unsigned int>>::operator++(&__for_begin);
  }
  common::milog::MiLogStream::create(
    (common::milog::MiLogStream *)&v55,
    &common::milog::MiLogDefault::default_log_obj_,
    1u,
    "./src/player/avatar/player_avatar_comp.cpp",
    "setUpTrialAvatarVecInTeamAndLockTeam",
    3464);
  v23 = common::milog::MiLogStream::operator<<<char [48],(char *[48])0>(
          (common::milog::MiLogStream *const)&v55,
          (const char (*)[48])"setUpTrialAvatarVecInTeamAndLockTeam, guid_vec:");
  common::milog::MiLogStream::operator<<<unsigned long>(v23, (const std::vector<long unsigned int> *)(v4 + 192));
  common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)&v55);
  if ( !std::vector<unsigned long>::empty((const std::vector<long unsigned int> *const)(v4 + 192)) )
  {
    v24 = std::vector<unsigned long>::size((const std::vector<long unsigned int> *const)(v4 + 192));
    if ( v24 != std::vector<unsigned int>::size(p_trial_avatar_vec) )
    {
      if ( PlayerAvatarComp::delInformalAvatarBatchAndReplaceByAvatarTeam(
             this,
             (const std::vector<long unsigned int> *)(v4 + 192)) )
      {
        common::milog::MiLogStream::create(
          (common::milog::MiLogStream *)&v55,
          &common::milog::MiLogDefault::default_log_obj_,
          3u,
          "./src/player/avatar/player_avatar_comp.cpp",
          "setUpTrialAvatarVecInTeamAndLockTeam",
          3471);
        v26 = common::milog::MiLogStream::operator<<<char [63],(char *[63])0>(
                (common::milog::MiLogStream *const)&v55,
                (const char (*)[63])"delInformalAvatarBatchAndReplaceByAvatarTeam failed, guid_vec:");
        common::milog::MiLogStream::operator<<<unsigned long>(v26, (const std::vector<long unsigned int> *)(v4 + 192));
        common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)&v55);
      }
      common::milog::MiLogStream::create(
        (common::milog::MiLogStream *)&v55,
        &common::milog::MiLogDefault::default_log_obj_,
        1u,
        "./src/player/avatar/player_avatar_comp.cpp",
        "setUpTrialAvatarVecInTeamAndLockTeam",
        3473);
      common::milog::MiLogStream::operator<<<char [50],(char *[50])0>(
        (common::milog::MiLogStream *const)&v55,
        (const char (*)[50])off_2603F780);
      common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)&v55);
      std::vector<unsigned long>::clear((std::vector<long unsigned int> *const)(v4 + 192));
    }
  }
  if ( std::vector<unsigned long>::empty((const std::vector<long unsigned int> *const)(v4 + 192)) )
  {
    common::milog::MiLogStream::create(
      (common::milog::MiLogStream *)&v55,
      &common::milog::MiLogDefault::default_log_obj_,
      1u,
      "./src/player/avatar/player_avatar_comp.cpp",
      "setUpTrialAvatarVecInTeamAndLockTeam",
      3480);
    common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
      (common::milog::MiLogStream *const)&v55,
      (const char (*)[16])"guid_vec empty.");
    common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)&v55);
    v27 = -1;
  }
  else
  {
    __for_range_0 = (std::vector<long unsigned int> *)(v4 + 192);
    __for_begin._M_current = (unsigned int *)std::vector<unsigned long>::begin((std::vector<long unsigned int> *const)(v4 + 192))._M_current;
    __for_end._M_current = (unsigned int *)std::vector<unsigned long>::end(__for_range_0)._M_current;
    while ( __gnu_cxx::operator!=<unsigned long *,std::vector<unsigned long>>(
              (const __gnu_cxx::__normal_iterator<long unsigned int*,std::vector<long unsigned int> > *)&__for_begin,
              (const __gnu_cxx::__normal_iterator<long unsigned int*,std::vector<long unsigned int> > *)&__for_end) )
    {
      v28 = __gnu_cxx::__normal_iterator<unsigned long *,std::vector<unsigned long>>::operator*((const __gnu_cxx::__normal_iterator<long unsigned int*,std::vector<long unsigned int> > *const)&__for_begin);
      guid = v28;
      if ( *(_BYTE *)(((unsigned __int64)v28 >> 3) + 0x7FFF8000) )
        __asan_report_load8(v28);
      PlayerAvatarComp::findAvatar((const PlayerAvatarComp *const)(v4 + 160), (uint64_t)this, *guid);
      if ( std::operator==<Avatar>((const std::shared_ptr<Avatar> *)(v4 + 160), 0LL) )
      {
        common::milog::MiLogStream::create(
          (common::milog::MiLogStream *)&v55,
          &common::milog::MiLogDefault::default_log_obj_,
          4u,
          "./src/player/avatar/player_avatar_comp.cpp",
          "setUpTrialAvatarVecInTeamAndLockTeam",
          3489);
        v29 = common::milog::MiLogStream::operator<<<char [38],(char *[38])0>(
                (common::milog::MiLogStream *const)&v55,
                (const char (*)[38])"getAvatarPtr failed, trial_avatar_id:");
        common::milog::MiLogStream::operator<<<unsigned long,(unsigned long *)0>(v29, guid);
        common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)&v55);
        v30 = 0;
      }
      else
      {
        v31 = std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 160));
        if ( !Avatar::isFormal(v31) )
        {
          v32 = std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 160));
          __x = Avatar::getGuid(v32);
          std::unordered_set<unsigned long>::insert(&this->temp_avatar_guid_set_, &__x);
          PlayerAvatarComp::notifyTempAvatarTeam(this);
        }
        v33 = std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 160));
        if ( Creature::getLifeState(v33) == LIFE_DEAD )
        {
          v34 = std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 160));
          Avatar::setLifeAlive(v34, 0x6Cu, 0LL, 1);
          v35 = std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 160));
          Creature::setCurHpFull(v35, 1);
        }
        v30 = 1;
      }
      std::shared_ptr<Avatar>::~shared_ptr((std::shared_ptr<Avatar> *const)(v4 + 160));
      if ( v30 != 1 )
        break;
      __gnu_cxx::__normal_iterator<unsigned long *,std::vector<unsigned long>>::operator++((__gnu_cxx::__normal_iterator<long unsigned int*,std::vector<long unsigned int> > *const)&__for_begin);
    }
    std::vector<unsigned long>::operator=(
      &this->quest_lock_team_avatar_guid_vec_,
      (const std::vector<long unsigned int> *)(v4 + 192));
    if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
      __asan_report_load8(&this->player_);
    Player::getSceneComp(this->player_);
    PlayerSceneComp::getCurScene((const PlayerSceneComp *const)(v4 + 128));
    if ( std::operator==<Scene>(0LL, (const std::shared_ptr<Scene> *)(v4 + 128)) )
    {
      common::milog::MiLogStream::create(
        (common::milog::MiLogStream *)&v55,
        &common::milog::MiLogDefault::default_log_obj_,
        1u,
        "./src/player/avatar/player_avatar_comp.cpp",
        "setUpTrialAvatarVecInTeamAndLockTeam",
        3512);
      common::milog::MiLogStream::operator<<<char [18],(char *[18])0>(
        (common::milog::MiLogStream *const)&v55,
        (const char (*)[18])off_2603F4A0);
      common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)&v55);
      v27 = 0;
    }
    else
    {
      std::shared_ptr<Scene>::shared_ptr(
        (std::shared_ptr<Scene> *const)(v4 + 160),
        (const std::shared_ptr<Scene> *)(v4 + 128));
      v36 = std::vector<unsigned long>::operator[]((std::vector<long unsigned int> *const)(v4 + 192), 0LL);
      if ( *(_BYTE *)(((unsigned __int64)v36 >> 3) + 0x7FFF8000) )
        v36 = (uint64_t *)__asan_report_load8(v36);
      v37 = PlayerAvatarComp::setSceneTeamAndAddToScene(
              this,
              (const std::vector<long unsigned int> *)(v4 + 192),
              *v36,
              (ScenePtr *)(v4 + 160),
              CHANGE_SCENE_TEAM_REASON_TEMP_TEAM_CHANGE) != 0;
      std::shared_ptr<Scene>::~shared_ptr((std::shared_ptr<Scene> *const)(v4 + 160));
      if ( v37 )
      {
        common::milog::MiLogStream::create(
          (common::milog::MiLogStream *)&v55,
          &common::milog::MiLogDefault::default_log_obj_,
          3u,
          "./src/player/avatar/player_avatar_comp.cpp",
          "setUpTrialAvatarVecInTeamAndLockTeam",
          3518);
        v38 = common::milog::MiLogStream::operator<<<char [48],(char *[48])0>(
                (common::milog::MiLogStream *const)&v55,
                (const char (*)[48])off_2603F4E0);
        common::milog::MiLogStream::operator<<<unsigned long>(v38, (const std::vector<long unsigned int> *)(v4 + 192));
        common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)&v55);
        v27 = -1;
      }
      else
      {
        common::milog::MiLogStream::create(
          (common::milog::MiLogStream *)&v55,
          &common::milog::MiLogDefault::default_log_obj_,
          1u,
          "./src/player/avatar/player_avatar_comp.cpp",
          "setUpTrialAvatarVecInTeamAndLockTeam",
          3521);
        v39 = common::milog::MiLogStream::operator<<<char [53],(char *[53])0>(
                (common::milog::MiLogStream *const)&v55,
                (const char (*)[53])off_2603F540);
        common::milog::MiLogStream::operator<<<unsigned long>(v39, (const std::vector<long unsigned int> *)(v4 + 192));
        common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)&v55);
        v27 = 0;
      }
    }
    std::shared_ptr<Scene>::~shared_ptr((std::shared_ptr<Scene> *const)(v4 + 128));
  }
  std::vector<unsigned long>::~vector((std::vector<long unsigned int> *const)(v4 + 192));
  StatLogUtils::ContextHolder::~ContextHolder((StatLogUtils::ContextHolder *const)(v4 + 32));
  result = v27;
  if ( v56 == (char *)v4 )
  {
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8008) = 0LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8010) = 0LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8018) = 0LL;
  }
  else
  {
    *(_QWORD *)v4 = 1172321806LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 3527: range 0000000017184B4A-0000000017184C97
bool __cdecl PlayerAvatarComp::hasAvatar(
        PlayerAvatarComp *const this,
        proto::AvatarType avatar_type,
        uint32_t avatar_id)
{
  unsigned __int64 v3; // rax
  unsigned __int64 v4; // rdx
  std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v5; // rax
  char v6; // al
  std::map<long unsigned int,std::shared_ptr<Avatar>>::iterator __for_begin; // [rsp+10h] [rbp-30h] BYREF
  std::map<long unsigned int,std::shared_ptr<Avatar>>::iterator __for_end; // [rsp+18h] [rbp-28h] BYREF
  std::map<long unsigned int,std::shared_ptr<Avatar>> *__for_range; // [rsp+20h] [rbp-20h]
  const std::pair<long unsigned int const,std::shared_ptr<Avatar> > *v12; // [rsp+28h] [rbp-18h]
  std::tuple_element<0,const std::pair<long unsigned int const,std::shared_ptr<Avatar> > >::type *guid; // [rsp+30h] [rbp-10h]
  std::tuple_element<1,const std::pair<long unsigned int const,std::shared_ptr<Avatar> > >::type *avatar_ptr; // [rsp+38h] [rbp-8h]

  __for_range = &this->avatar_map_;
  __for_begin._M_node = std::map<unsigned long,std::shared_ptr<Avatar>>::begin(&this->avatar_map_)._M_node;
  __for_end._M_node = std::map<unsigned long,std::shared_ptr<Avatar>>::end(&this->avatar_map_)._M_node;
  while ( std::operator!=(&__for_begin, &__for_end) )
  {
    v12 = std::_Rb_tree_iterator<std::pair<unsigned long const,std::shared_ptr<Avatar>>>::operator*(&__for_begin);
    guid = std::get<0ul,unsigned long const,std::shared_ptr<Avatar>>(v12);
    avatar_ptr = (std::tuple_element<1,const std::pair<long unsigned int const,std::shared_ptr<Avatar> > >::type *)std::get<1ul,unsigned long const,std::shared_ptr<Avatar>>(v12);
    if ( !std::operator!=<Avatar>(0LL, avatar_ptr) )
      goto LABEL_11;
    v3 = (unsigned __int64)std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false> *const)avatar_ptr);
    if ( *(_BYTE *)((v3 >> 3) + 0x7FFF8000) )
      v3 = __asan_report_load8(v3);
    v4 = *(_QWORD *)v3 + 400LL;
    if ( *(_BYTE *)((v4 >> 3) + 0x7FFF8000) )
      v3 = __asan_report_load8(*(_QWORD *)v3 + 400LL);
    if ( avatar_type == (*(unsigned int (__fastcall **)(unsigned __int64))v4)(v3)
      && (v5 = std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false> *const)avatar_ptr),
          avatar_id == Avatar::getAvatarId(v5)) )
    {
      v6 = 1;
    }
    else
    {
LABEL_11:
      v6 = 0;
    }
    if ( v6 )
      return 1;
    std::_Rb_tree_iterator<std::pair<unsigned long const,std::shared_ptr<Avatar>>>::operator++(&__for_begin);
  }
  return 0;
};

// Line 3540: range 0000000017184C98-00000000171851F7
void __cdecl PlayerAvatarComp::onAvatarLogTimer(PlayerAvatarComp *const this, uint64_t now_ms)
{
  unsigned __int64 v2; // rbx
  __int64 v3; // rax
  unsigned __int64 v4; // r13
  uint32_t v5; // ecx
  uint32_t v6; // ecx
  uint32_t v7; // ecx
  __int64 v8; // rsi
  std::__shared_ptr_access<proto_log::AntiCheatBodyMoveSpeedOverLimit,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v9; // rax
  std::__shared_ptr_access<proto_log::AntiCheatBodyMoveSpeedOverLimit,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v10; // rcx
  std::__shared_ptr_access<proto_log::AntiCheatBodyMoveSpeedOverLimit,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v11; // rcx
  std::__shared_ptr_access<proto_log::AntiCheatBodyMoveSpeedOverLimit,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v12; // rcx
  Player *player; // r14
  __int64 v14; // rsi
  __int64 v15; // rdx
  uint32_t now; // [rsp+1Ch] [rbp-84h]
  std::shared_ptr<google::protobuf::Message> p_body_ptr; // [rsp+20h] [rbp-80h] BYREF
  char v18[112]; // [rsp+30h] [rbp-70h] BYREF

  v2 = (unsigned __int64)v18;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_0(64LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "1 32 16 12 log_ptr:3556";
  *(_QWORD *)(v2 + 16) = PlayerAvatarComp::onAvatarLogTimer;
  v4 = v2 >> 3;
  *(_DWORD *)(v4 + 2147450880) = -235802127;
  *(_DWORD *)(v4 + 2147450884) = -202178560;
  now = now_ms / 0x3E8;
  v5 = now + 5;
  if ( *(_BYTE *)(((unsigned __int64)&this->last_refresh_hp_log_time_ >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->last_refresh_hp_log_time_ >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4(&this->last_refresh_hp_log_time_);
  }
  if ( v5 >= this->last_refresh_hp_log_time_ + 60 )
  {
    this->last_refresh_hp_log_time_ = now;
    PlayerAvatarComp::refreshAvatarHpChangeLogs(this);
  }
  v6 = now + 5;
  if ( *(_BYTE *)(((unsigned __int64)&this->last_refresh_info_time_ >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)this - 92) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&this->last_refresh_info_time_ >> 3)
                                                        + 0x7FFF8000) )
  {
    __asan_report_load4(&this->last_refresh_info_time_);
  }
  if ( v6 >= this->last_refresh_info_time_ + 300 )
  {
    this->last_refresh_info_time_ = now;
    PlayerAvatarComp::refreshAvatarInfoLogs(this);
  }
  v7 = now + 5;
  if ( *(_BYTE *)(((unsigned __int64)&this->last_refresh_force_move_time_ >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->last_refresh_force_move_time_ >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4(&this->last_refresh_force_move_time_);
  }
  if ( v7 >= this->last_refresh_force_move_time_ + 60 )
  {
    v8 = (((_BYTE)this + 76) & 7u) + 3;
    if ( *(_BYTE *)(((unsigned __int64)&this->force_drag_move_count_ >> 3) + 0x7FFF8000) != 0
      && (char)((((_BYTE)this + 76) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&this->force_drag_move_count_ >> 3)
                                                          + 0x7FFF8000) )
    {
      __asan_report_load4(&this->force_drag_move_count_);
    }
    if ( this->force_drag_move_count_ )
    {
      common::tools::perf::make_shared<proto_log::AntiCheatBodyMoveSpeedOverLimit>();
      v9 = std::__shared_ptr_access<proto_log::AntiCheatBodyMoveSpeedOverLimit,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<proto_log::AntiCheatBodyMoveSpeedOverLimit,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 32));
      proto_log::AntiCheatBodyMoveSpeedOverLimit::set_is_only_record_move_count(v9, 1u);
      v10 = std::__shared_ptr_access<proto_log::AntiCheatBodyMoveSpeedOverLimit,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<proto_log::AntiCheatBodyMoveSpeedOverLimit,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 32));
      if ( *(_BYTE *)(((unsigned __int64)&this->last_refresh_force_move_time_ >> 3) + 0x7FFF8000) != 0
        && *(_BYTE *)(((unsigned __int64)&this->last_refresh_force_move_time_ >> 3) + 0x7FFF8000) <= 3 )
      {
        __asan_report_load4(&this->last_refresh_force_move_time_);
      }
      proto_log::AntiCheatBodyMoveSpeedOverLimit::set_last_refresh_force_move_time(
        v10,
        this->last_refresh_force_move_time_);
      v11 = std::__shared_ptr_access<proto_log::AntiCheatBodyMoveSpeedOverLimit,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<proto_log::AntiCheatBodyMoveSpeedOverLimit,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 32));
      if ( *(_BYTE *)(((unsigned __int64)&this->force_drag_move_count_ >> 3) + 0x7FFF8000) != 0
        && (char)((((_BYTE)this + 76) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&this->force_drag_move_count_ >> 3)
                                                            + 0x7FFF8000) )
      {
        __asan_report_load4(&this->force_drag_move_count_);
      }
      proto_log::AntiCheatBodyMoveSpeedOverLimit::set_force_drag_move_count(v11, this->force_drag_move_count_);
      v12 = std::__shared_ptr_access<proto_log::AntiCheatBodyMoveSpeedOverLimit,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<proto_log::AntiCheatBodyMoveSpeedOverLimit,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 32));
      if ( *(_BYTE *)(((unsigned __int64)&this->total_move_count_ >> 3) + 0x7FFF8000) != 0
        && *(_BYTE *)(((unsigned __int64)&this->total_move_count_ >> 3) + 0x7FFF8000) <= 3 )
      {
        __asan_report_load4(&this->total_move_count_);
      }
      proto_log::AntiCheatBodyMoveSpeedOverLimit::set_total_move_count(v12, this->total_move_count_);
      if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
        __asan_report_load8(&this->player_);
      player = this->player_;
      std::shared_ptr<google::protobuf::Message>::shared_ptr<proto_log::AntiCheatBodyMoveSpeedOverLimit,void>(
        &p_body_ptr,
        (const std::shared_ptr<proto_log::AntiCheatBodyMoveSpeedOverLimit> *)(v2 + 32));
      v8 = 5LL;
      Player::printAntiCheatLog(player, ANTI_CHEAT_ACTION_MOVE_SPEED_OVER_LIMIT, &p_body_ptr);
      std::shared_ptr<google::protobuf::Message>::~shared_ptr(&p_body_ptr);
      std::shared_ptr<proto_log::AntiCheatBodyMoveSpeedOverLimit>::~shared_ptr((std::shared_ptr<proto_log::AntiCheatBodyMoveSpeedOverLimit> *const)(v2 + 32));
    }
    if ( *(_BYTE *)(((unsigned __int64)&this->last_refresh_force_move_time_ >> 3) + 0x7FFF8000) != 0
      && *(_BYTE *)(((unsigned __int64)&this->last_refresh_force_move_time_ >> 3) + 0x7FFF8000) <= 3 )
    {
      __asan_report_store4(&this->last_refresh_force_move_time_, v8, &this->last_refresh_force_move_time_);
    }
    this->last_refresh_force_move_time_ = now;
    v14 = (((_BYTE)this + 76) & 7u) + 3;
    v15 = (*(_BYTE *)(((unsigned __int64)&this->force_drag_move_count_ >> 3) + 0x7FFF8000) != 0) & (unsigned __int8)((char)((((_BYTE)this + 76) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&this->force_drag_move_count_ >> 3) + 0x7FFF8000));
    if ( (_BYTE)v15 )
      __asan_report_store4(&this->force_drag_move_count_, v14, v15);
    this->force_drag_move_count_ = 0;
    if ( *(_BYTE *)(((unsigned __int64)&this->total_move_count_ >> 3) + 0x7FFF8000) != 0
      && *(_BYTE *)(((unsigned __int64)&this->total_move_count_ >> 3) + 0x7FFF8000) <= 3 )
    {
      __asan_report_store4(&this->total_move_count_, v14, &this->total_move_count_);
    }
    this->total_move_count_ = 0;
  }
  if ( v18 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
  }
};

// Line 3571: range 00000000171851F8-000000001718551C
// local variable allocation has failed, the output may be wrong!
void __cdecl PlayerAvatarComp::refreshAvatarHpChangeLogs(PlayerAvatarComp *const this)
{
  unsigned __int64 v1; // rbx
  __int64 v2; // rax
  unsigned __int64 v3; // r12
  PlayerBasicComp *BasicComp; // rax
  Player *v5; // r14
  std::string v6; // [rsp+0h] [rbp-F0h] OVERLAPPED BYREF
  std::unordered_map<std::string,std::shared_ptr<proto_log::PlayerLogBodyAvatarHpChange>> *__for_range; // [rsp+20h] [rbp-D0h]
  const std::pair<const std::string,std::shared_ptr<proto_log::PlayerLogBodyAvatarHpChange> > *v8; // [rsp+28h] [rbp-C8h]
  std::tuple_element<0,const std::pair<const std::string,std::shared_ptr<proto_log::PlayerLogBodyAvatarHpChange> > >::type *_; // [rsp+30h] [rbp-C0h]
  std::tuple_element<1,const std::pair<const std::string,std::shared_ptr<proto_log::PlayerLogBodyAvatarHpChange> > >::type *hp_change_log_ptr; // [rsp+38h] [rbp-B8h]
  std::shared_ptr<google::protobuf::Message> p_body_ptr; // [rsp+40h] [rbp-B0h] BYREF
  std::shared_ptr<google::protobuf::Message> p_body_ext_ptr; // [rsp+50h] [rbp-A0h] BYREF
  std::string v13; // [rsp+60h] [rbp-90h] BYREF
  char v14[112]; // [rsp+80h] [rbp-70h] BYREF

  v6._M_string_length = (std::string::size_type)this;
  v1 = (unsigned __int64)v14;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_0(64LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "1 32 1 11 holder:3576";
  *(_QWORD *)(v1 + 16) = PlayerAvatarComp::refreshAvatarHpChangeLogs;
  v3 = v1 >> 3;
  *(_DWORD *)(v3 + 2147450880) = -235802127;
  *(_DWORD *)(v3 + 2147450884) = -202116351;
  if ( !std::unordered_map<std::string,std::shared_ptr<proto_log::PlayerLogBodyAvatarHpChange>>::empty((const std::unordered_map<std::string,std::shared_ptr<proto_log::PlayerLogBodyAvatarHpChange>> *const)(v6._M_string_length + 824)) )
  {
    if ( *(_BYTE *)(((v6._M_string_length + 24) >> 3) + 0x7FFF8000) )
      __asan_report_load8(v6._M_string_length + 24);
    BasicComp = Player::getBasicComp(*(Player *const *)(v6._M_string_length + 24));
    PlayerBasicComp::getNextTransNo[abi:cxx11](&v13, BasicComp);
    StatLogUtils::ContextHolder::ContextHolder((StatLogUtils::ContextHolder *const)(v1 + 32), 0x515u, v6);
    std::string::~string(&v13);
    __for_range = (std::unordered_map<std::string,std::shared_ptr<proto_log::PlayerLogBodyAvatarHpChange>> *)(v6._M_string_length + 824);
    *(std::unordered_map<std::string,std::shared_ptr<proto_log::PlayerLogBodyAvatarHpChange>>::iterator *)v6._anon_0._M_local_buf = std::unordered_map<std::string,std::shared_ptr<proto_log::PlayerLogBodyAvatarHpChange>>::begin((std::unordered_map<std::string,std::shared_ptr<proto_log::PlayerLogBodyAvatarHpChange>> *const)(v6._M_string_length + 824));
    *((std::unordered_map<std::string,std::shared_ptr<proto_log::PlayerLogBodyAvatarHpChange>>::iterator *)&v6._anon_0._M_allocated_capacity
    + 1) = std::unordered_map<std::string,std::shared_ptr<proto_log::PlayerLogBodyAvatarHpChange>>::end((std::unordered_map<std::string,std::shared_ptr<proto_log::PlayerLogBodyAvatarHpChange>> *const)(v6._M_string_length + 824));
    while ( std::__detail::operator!=<std::pair<std::string const,std::shared_ptr<proto_log::PlayerLogBodyAvatarHpChange>>,true>(
              (const std::__detail::_Node_iterator_base<std::pair<const std::string,std::shared_ptr<proto_log::PlayerLogBodyAvatarHpChange> >,true> *)&v6._anon_0,
              (const std::__detail::_Node_iterator_base<std::pair<const std::string,std::shared_ptr<proto_log::PlayerLogBodyAvatarHpChange> >,true> *)&v6._anon_0._M_allocated_capacity
            + 1) )
    {
      v8 = std::__detail::_Node_iterator<std::pair<std::string const,std::shared_ptr<proto_log::PlayerLogBodyAvatarHpChange>>,false,true>::operator*((const std::__detail::_Node_iterator<std::pair<const std::string,std::shared_ptr<proto_log::PlayerLogBodyAvatarHpChange> >,false,true> *const)&v6._anon_0);
      _ = std::get<0ul,std::string const,std::shared_ptr<proto_log::PlayerLogBodyAvatarHpChange>>(v8);
      hp_change_log_ptr = (std::tuple_element<1,const std::pair<const std::string,std::shared_ptr<proto_log::PlayerLogBodyAvatarHpChange> > >::type *)std::get<1ul,std::string const,std::shared_ptr<proto_log::PlayerLogBodyAvatarHpChange>>(v8);
      if ( *(_BYTE *)(((v6._M_string_length + 24) >> 3) + 0x7FFF8000) )
        __asan_report_load8(v6._M_string_length + 24);
      v5 = *(Player **)(v6._M_string_length + 24);
      std::shared_ptr<google::protobuf::Message>::shared_ptr(&p_body_ext_ptr, 0LL);
      std::shared_ptr<google::protobuf::Message>::shared_ptr<proto_log::PlayerLogBodyAvatarHpChange,void>(
        &p_body_ptr,
        hp_change_log_ptr);
      Player::printStatLog(v5, &p_body_ptr, &p_body_ext_ptr, 0xEu);
      std::shared_ptr<google::protobuf::Message>::~shared_ptr(&p_body_ptr);
      std::shared_ptr<google::protobuf::Message>::~shared_ptr(&p_body_ext_ptr);
      std::__detail::_Node_iterator<std::pair<std::string const,std::shared_ptr<proto_log::PlayerLogBodyAvatarHpChange>>,false,true>::operator++((std::__detail::_Node_iterator<std::pair<const std::string,std::shared_ptr<proto_log::PlayerLogBodyAvatarHpChange> >,false,true> *const)&v6._anon_0);
    }
    std::unordered_map<std::string,std::shared_ptr<proto_log::PlayerLogBodyAvatarHpChange>>::clear((std::unordered_map<std::string,std::shared_ptr<proto_log::PlayerLogBodyAvatarHpChange>> *const)(v6._M_string_length + 824));
    StatLogUtils::ContextHolder::~ContextHolder((StatLogUtils::ContextHolder *const)(v1 + 32));
  }
  if ( v14 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
  }
};

// Line 3586: range 000000001718551E-0000000017185963
// local variable allocation has failed, the output may be wrong!
void __cdecl PlayerAvatarComp::refreshAvatarInfoLogs(PlayerAvatarComp *const this)
{
  unsigned __int64 v1; // r13
  __int64 v2; // rax
  _DWORD *v3; // r12
  PlayerBasicComp *BasicComp; // rax
  const std::weak_ptr<Avatar> *v5; // rax
  Avatar *v6; // r14
  std::__shared_ptr_access<proto_log::PlayerLogBodyAvatarInfo,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v7; // rax
  proto_log::AvatarLog *v8; // rax
  Player *v9; // r14
  std::string v10; // [rsp+0h] [rbp-140h] OVERLAPPED BYREF
  std::set<std::weak_ptr<Avatar>,std::owner_less<std::weak_ptr<Avatar> >,std::allocator<std::weak_ptr<Avatar> > >::iterator __for_end; // [rsp+20h] [rbp-120h] BYREF
  std::set<std::weak_ptr<Avatar>,std::owner_less<std::weak_ptr<Avatar> >,std::allocator<std::weak_ptr<Avatar> > > *__for_range; // [rsp+28h] [rbp-118h]
  std::shared_ptr<google::protobuf::Message> p_body_ptr; // [rsp+30h] [rbp-110h] BYREF
  std::shared_ptr<google::protobuf::Message> p_body_ext_ptr; // [rsp+40h] [rbp-100h] BYREF
  std::string v15; // [rsp+50h] [rbp-F0h] BYREF
  char v16[208]; // [rsp+70h] [rbp-D0h] BYREF

  v10._M_string_length = (std::string::size_type)this;
  v1 = (unsigned __int64)v16;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_2(160LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "4 48 1 11 holder:3591 64 16 15 avatar_wtr:3592 96 16 15 avatar_ptr:3594 128 16 12 log_ptr:3599";
  *(_QWORD *)(v1 + 16) = PlayerAvatarComp::refreshAvatarInfoLogs;
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234753551;
  v3[536862722] = -219021312;
  v3[536862723] = -219021312;
  v3[536862724] = -202178560;
  if ( !std::set<std::weak_ptr<Avatar>,std::owner_less<std::weak_ptr<Avatar>>,std::allocator<std::weak_ptr<Avatar>>>::empty((const std::set<std::weak_ptr<Avatar>,std::owner_less<std::weak_ptr<Avatar> >,std::allocator<std::weak_ptr<Avatar> > > *const)(v10._M_string_length + 880)) )
  {
    if ( *(_BYTE *)(((v10._M_string_length + 24) >> 3) + 0x7FFF8000) )
      __asan_report_load8(v10._M_string_length + 24);
    BasicComp = Player::getBasicComp(*(Player *const *)(v10._M_string_length + 24));
    PlayerBasicComp::getNextTransNo[abi:cxx11](&v15, BasicComp);
    StatLogUtils::ContextHolder::ContextHolder((StatLogUtils::ContextHolder *const)(v1 + 48), 0x45Eu, v10);
    std::string::~string(&v15);
    __for_range = (std::set<std::weak_ptr<Avatar>,std::owner_less<std::weak_ptr<Avatar> >,std::allocator<std::weak_ptr<Avatar> > > *)(v10._M_string_length + 880);
    *((std::set<std::weak_ptr<Avatar>,std::owner_less<std::weak_ptr<Avatar> >,std::allocator<std::weak_ptr<Avatar> > >::iterator *)&v10._anon_0._M_allocated_capacity
    + 1) = std::set<std::weak_ptr<Avatar>,std::owner_less<std::weak_ptr<Avatar>>,std::allocator<std::weak_ptr<Avatar>>>::begin((const std::set<std::weak_ptr<Avatar>,std::owner_less<std::weak_ptr<Avatar> >,std::allocator<std::weak_ptr<Avatar> > > *const)(v10._M_string_length + 880));
    __for_end._M_node = std::set<std::weak_ptr<Avatar>,std::owner_less<std::weak_ptr<Avatar>>,std::allocator<std::weak_ptr<Avatar>>>::end((const std::set<std::weak_ptr<Avatar>,std::owner_less<std::weak_ptr<Avatar> >,std::allocator<std::weak_ptr<Avatar> > > *const)(v10._M_string_length + 880))._M_node;
    while ( std::operator!=(
              (const std::_Rb_tree_const_iterator<std::weak_ptr<Avatar> >::_Self *)&v10._anon_0._M_allocated_capacity
            + 1,
              &__for_end) )
    {
      v5 = std::_Rb_tree_const_iterator<std::weak_ptr<Avatar>>::operator*((const std::_Rb_tree_const_iterator<std::weak_ptr<Avatar> > *const)&v10._anon_0._M_allocated_capacity + 1);
      std::weak_ptr<Avatar>::weak_ptr((std::weak_ptr<Avatar> *const)(v1 + 64), v5);
      std::weak_ptr<Avatar>::lock((const std::weak_ptr<Avatar> *const)(v1 + 96));
      if ( !std::operator==<Avatar>(0LL, (const std::shared_ptr<Avatar> *)(v1 + 96)) )
      {
        common::tools::perf::make_shared<proto_log::PlayerLogBodyAvatarInfo>();
        v6 = std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v1 + 96));
        v7 = std::__shared_ptr_access<proto_log::PlayerLogBodyAvatarInfo,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<proto_log::PlayerLogBodyAvatarInfo,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v1 + 128));
        v8 = proto_log::PlayerLogBodyAvatarInfo::mutable_avatar_log(v7);
        Avatar::getAvatarLog(v6, v8);
        if ( *(_BYTE *)(((v10._M_string_length + 24) >> 3) + 0x7FFF8000) )
          __asan_report_load8(v10._M_string_length + 24);
        v9 = *(Player **)(v10._M_string_length + 24);
        std::shared_ptr<google::protobuf::Message>::shared_ptr(&p_body_ext_ptr, 0LL);
        std::shared_ptr<google::protobuf::Message>::shared_ptr<proto_log::PlayerLogBodyAvatarInfo,void>(
          &p_body_ptr,
          (const std::shared_ptr<proto_log::PlayerLogBodyAvatarInfo> *)(v1 + 128));
        Player::printStatLog(v9, &p_body_ptr, &p_body_ext_ptr, 0xEu);
        std::shared_ptr<google::protobuf::Message>::~shared_ptr(&p_body_ptr);
        std::shared_ptr<google::protobuf::Message>::~shared_ptr(&p_body_ext_ptr);
        std::shared_ptr<proto_log::PlayerLogBodyAvatarInfo>::~shared_ptr((std::shared_ptr<proto_log::PlayerLogBodyAvatarInfo> *const)(v1 + 128));
      }
      std::shared_ptr<Avatar>::~shared_ptr((std::shared_ptr<Avatar> *const)(v1 + 96));
      std::weak_ptr<Avatar>::~weak_ptr((std::weak_ptr<Avatar> *const)(v1 + 64));
      std::_Rb_tree_const_iterator<std::weak_ptr<Avatar>>::operator++((std::_Rb_tree_const_iterator<std::weak_ptr<Avatar> > *const)&v10._anon_0._M_allocated_capacity + 1);
    }
    std::set<std::weak_ptr<Avatar>,std::owner_less<std::weak_ptr<Avatar>>,std::allocator<std::weak_ptr<Avatar>>>::clear((std::set<std::weak_ptr<Avatar>,std::owner_less<std::weak_ptr<Avatar> >,std::allocator<std::weak_ptr<Avatar> > > *const)(v10._M_string_length + 880));
    StatLogUtils::ContextHolder::~ContextHolder((StatLogUtils::ContextHolder *const)(v1 + 48));
  }
  if ( v16 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0LL;
    *(_DWORD *)((v1 >> 3) + 0x7FFF8010) = 0;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v1 >> 3) + 0x7FFF8010) = -168430091;
  }
};

// Line 3608: range 0000000017185964-0000000017185990
void __cdecl PlayerAvatarComp::recordAvatarInfoLogs(PlayerAvatarComp *const this, AvatarWtr *p_avatar_wtr)
{
  std::set<std::weak_ptr<Avatar>,std::owner_less<std::weak_ptr<Avatar>>,std::allocator<std::weak_ptr<Avatar>>>::insert(
    &this->avatar_info_change_set_,
    p_avatar_wtr);
};

// Line 3614: range 0000000017185992-0000000017185E0C
void __cdecl PlayerAvatarComp::recordAvatarHpChangeLogs(
        PlayerAvatarComp *const this,
        std::shared_ptr<proto_log::PlayerLogBodyAvatarHpChange> *p_hp_change_log_ptr,
        float delta_hp)
{
  unsigned __int64 v3; // rbx
  __int64 v4; // rax
  unsigned __int64 v5; // r12
  std::__shared_ptr_access<proto_log::PlayerLogBodyAvatarHpChange,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v6; // rax
  std::shared_ptr<proto_log::PlayerLogBodyAvatarHpChange> *v7; // r8
  common::milog::MiLogStream *v8; // r14
  std::__shared_ptr_access<proto_log::PlayerLogBodyAvatarHpChange,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v9; // rax
  common::milog::MiLogStream *v10; // rax
  common::milog::MiLogStream *v11; // rcx
  std::tuple_element<1,std::pair<std::__detail::_Node_iterator<std::pair<const std::string,std::shared_ptr<proto_log::PlayerLogBodyAvatarHpChange> >,false,true>,bool> >::type *v12; // rax
  std::shared_ptr<proto_log::PlayerLogBodyAvatarHpChange> *p_second; // rdx
  proto_log::PlayerLogBodyAvatarHpChange *v15; // r14
  std::__shared_ptr_access<proto_log::PlayerLogBodyAvatarHpChange,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v16; // rax
  float v17; // xmm0_4
  int v18; // eax
  std::__detail::_Node_iterator_base<std::pair<const std::string,std::shared_ptr<proto_log::PlayerLogBodyAvatarHpChange> >,true> __y; // [rsp+28h] [rbp-F8h] BYREF
  std::tuple_element<0,std::pair<std::__detail::_Node_iterator<std::pair<const std::string,std::shared_ptr<proto_log::PlayerLogBodyAvatarHpChange> >,false,true>,bool> >::type *iter; // [rsp+30h] [rbp-F0h]
  std::tuple_element<1,std::pair<std::__detail::_Node_iterator<std::pair<const std::string,std::shared_ptr<proto_log::PlayerLogBodyAvatarHpChange> >,false,true>,bool> >::type *inserted; // [rsp+38h] [rbp-E8h]
  std::pair<std::__detail::_Node_iterator<std::pair<const std::string,std::shared_ptr<proto_log::PlayerLogBodyAvatarHpChange> >,false,true>,bool> __in; // [rsp+40h] [rbp-E0h] BYREF
  common::milog::MiLogStream v24; // [rsp+50h] [rbp-D0h] BYREF
  std::string val; // [rsp+70h] [rbp-B0h] BYREF
  char v26[144]; // [rsp+90h] [rbp-90h] BYREF

  v3 = (unsigned __int64)v26;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_1(96LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "1 32 32 22 hp_change_log_str:3619";
  *(_QWORD *)(v3 + 16) = PlayerAvatarComp::recordAvatarHpChangeLogs;
  v5 = v3 >> 3;
  *(_DWORD *)(v5 + 2147450880) = -235802127;
  *(_DWORD *)(v5 + 2147450888) = -202116109;
  if ( !std::operator==<proto_log::PlayerLogBodyAvatarHpChange>(0LL, p_hp_change_log_ptr) )
  {
    std::string::basic_string(v3 + 32);
    v6 = std::__shared_ptr_access<proto_log::PlayerLogBodyAvatarHpChange,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<proto_log::PlayerLogBodyAvatarHpChange,(__gnu_cxx::_Lock_policy)2,false,false> *const)p_hp_change_log_ptr);
    if ( !google::protobuf::MessageLite::SerializeToString(v6, (std::string *)(v3 + 32)) )
    {
      common::milog::MiLogStream::create(
        &v24,
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/player/avatar/player_avatar_comp.cpp",
        "recordAvatarHpChangeLogs",
        3622);
      v8 = common::milog::MiLogStream::operator<<<char [39],(char *[39])0>(
             &v24,
             (const char (*)[39])"SerializeToString fail, hp_change_log:");
      v9 = std::__shared_ptr_access<proto_log::PlayerLogBodyAvatarHpChange,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<proto_log::PlayerLogBodyAvatarHpChange,(__gnu_cxx::_Lock_policy)2,false,false> *const)p_hp_change_log_ptr);
      google::protobuf::Message::ShortDebugString[abi:cxx11](&val, v9);
      v10 = common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v8, &val);
      v11 = common::milog::MiLogStream::operator<<<char [9],(char *[9])0>(v10, (const char (*)[9])" player:");
      if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
        __asan_report_load8(&this->player_);
      operator<<(v11, this->player_);
      std::string::~string(&val);
      common::milog::MiLogStream::~MiLogStream(&v24);
    }
    else
    {
      __in = std::unordered_map<std::string,std::shared_ptr<proto_log::PlayerLogBodyAvatarHpChange>>::emplace<std::string&,std::shared_ptr<proto_log::PlayerLogBodyAvatarHpChange>&>(
               &this->avatar_hp_change_log_map_,
               (std::string *)(v3 + 32),
               p_hp_change_log_ptr,
               (std::string *)&this->avatar_hp_change_log_map_,
               v7);
      iter = std::get<0ul,std::__detail::_Node_iterator<std::pair<std::string const,std::shared_ptr<proto_log::PlayerLogBodyAvatarHpChange>>,false,true>,bool>(&__in);
      v12 = std::get<1ul,std::__detail::_Node_iterator<std::pair<std::string const,std::shared_ptr<proto_log::PlayerLogBodyAvatarHpChange>>,false,true>,bool>(&__in);
      inserted = v12;
      if ( *(_BYTE *)(((unsigned __int64)v12 >> 3) + 0x7FFF8000) != 0
        && ((unsigned __int8)v12 & 7) >= *(_BYTE *)(((unsigned __int64)v12 >> 3) + 0x7FFF8000) )
      {
        __asan_report_load1(v12);
      }
      if ( !*inserted )
      {
        __y._M_cur = std::unordered_map<std::string,std::shared_ptr<proto_log::PlayerLogBodyAvatarHpChange>>::end(&this->avatar_hp_change_log_map_)._M_cur;
        if ( std::__detail::operator!=<std::pair<std::string const,std::shared_ptr<proto_log::PlayerLogBodyAvatarHpChange>>,true>(
               iter,
               &__y) )
        {
          p_second = &std::__detail::_Node_iterator<std::pair<std::string const,std::shared_ptr<proto_log::PlayerLogBodyAvatarHpChange>>,false,true>::operator->(iter)->second;
          std::shared_ptr<proto_log::PlayerLogBodyAvatarHpChange>::operator=(p_hp_change_log_ptr, p_second);
        }
      }
      if ( std::operator!=<proto_log::PlayerLogBodyAvatarHpChange>(0LL, p_hp_change_log_ptr) )
      {
        v15 = std::__shared_ptr_access<proto_log::PlayerLogBodyAvatarHpChange,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<proto_log::PlayerLogBodyAvatarHpChange,(__gnu_cxx::_Lock_policy)2,false,false> *const)p_hp_change_log_ptr);
        v16 = std::__shared_ptr_access<proto_log::PlayerLogBodyAvatarHpChange,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<proto_log::PlayerLogBodyAvatarHpChange,(__gnu_cxx::_Lock_policy)2,false,false> *const)p_hp_change_log_ptr);
        if ( delta_hp >= 0.0 )
        {
          v18 = proto_log::PlayerLogBodyAvatarHpChange::hp_add(v16);
          proto_log::PlayerLogBodyAvatarHpChange::set_hp_add(v15, (unsigned int)(int)(float)((float)v18 + delta_hp));
        }
        else
        {
          v17 = (float)(int)proto_log::PlayerLogBodyAvatarHpChange::hp_minus(v16);
          proto_log::PlayerLogBodyAvatarHpChange::set_hp_minus(v15, (int)(float)(v17 - delta_hp));
        }
      }
    }
    std::string::~string((void *)(v3 + 32));
  }
  if ( v26 == (char *)v3 )
  {
    *(_DWORD *)((v3 >> 3) + 0x7FFF8000) = 0;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8008) = 0;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8008) = -168430091;
  }
};

// Line 3644: range 0000000017185E0E-0000000017186EBB
bool __cdecl PlayerAvatarComp::isTrialAvatarNeedToKeep(PlayerAvatarComp *const this, TrialAvatar *trial_avatar)
{
  bool v2; // r14
  unsigned __int64 v3; // r13
  __int64 v4; // rax
  _DWORD *v5; // r12
  const proto::TrialAvatarGrantRecordBin *GrantRecordBin; // rax
  std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v7; // rax
  std::_Rb_tree_const_iterator<unsigned int>::reference v8; // rax
  _DWORD *v9; // rdx
  PlayerQuestComp *QuestComp; // rax
  common::milog::MiLogStream *v11; // rax
  common::milog::MiLogStream *v12; // rax
  common::milog::MiLogStream *v13; // rax
  common::milog::MiLogStream *v14; // rax
  PlayerTrialAvatarComp *v15; // rax
  int v16; // r15d
  DungeonScene *v17; // rax
  int v19; // r15d
  DungeonScene *v20; // rax
  int v22; // r15d
  DungeonScene *v23; // rax
  int v25; // r15d
  DungeonScene *v26; // rax
  int v28; // r15d
  Scene *v29; // rax
  SceneGalleryComp *GalleryComp; // r15
  uint32_t Uid; // eax
  int v32; // r15d
  DungeonScene *v33; // rax
  int v35; // r15d
  DungeonScene *v36; // rax
  int v38; // r15d
  DungeonScene *v39; // rax
  int v41; // r15d
  Scene *v42; // rax
  SceneGalleryComp *v43; // r15
  uint32_t v44; // eax
  int v45; // r15d
  DungeonScene *v46; // rax
  int v48; // r15d
  common::milog::MiLogStream *v49; // rax
  common::milog::MiLogStream *v50; // rax
  common::milog::MiLogStream *v51; // rdx
  common::milog::MiLogStream *v52; // rax
  common::milog::MiLogStream *v53; // rcx
  bool result; // al
  PlayerTrialAvatarComp *TrialAvatarComp; // [rsp+8h] [rbp-128h]
  char v56; // [rsp+8h] [rbp-128h]
  std::set<unsigned int>::iterator __for_begin; // [rsp+20h] [rbp-110h] BYREF
  std::set<unsigned int>::iterator __for_end; // [rsp+28h] [rbp-108h] BYREF
  const std::set<unsigned int> *quest_id_set; // [rsp+30h] [rbp-100h]
  const std::set<unsigned int> *__for_range; // [rsp+38h] [rbp-F8h]
  common::milog::MiLogStream v61; // [rsp+40h] [rbp-F0h] BYREF
  char v62[208]; // [rsp+60h] [rbp-D0h] BYREF

  v3 = (unsigned __int64)v62;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_2(160LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "5 48 4 20 trial_avatar_id:3645 64 4 17 grant_reason:3646 80 4 13 quest_id:3656 96 16 18 cur_scen"
                        "e_ptr:3754 128 16 18 cur_scene_ptr:3776";
  *(_QWORD *)(v3 + 16) = PlayerAvatarComp::isTrialAvatarNeedToKeep;
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = -234556943;
  v5[536862722] = -234556924;
  v5[536862723] = -219021312;
  v5[536862724] = -202178560;
  *(_DWORD *)(v3 + 48) = TrialAvatar::getTrialAvatarId(trial_avatar);
  GrantRecordBin = TrialAvatar::getGrantRecordBin(trial_avatar);
  *(_DWORD *)(v3 + 64) = proto::TrialAvatarGrantRecordBin::grant_reason(GrantRecordBin);
  switch ( *(_DWORD *)(v3 + 64) )
  {
    case 1:
      ServiceBox::findService<GameserverService>();
      GameserverService::getConfig((GameserverService *const)(v3 + 128));
      v7 = std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 128));
      quest_id_set = QuestExcelConfigMgr::findTrialAvatarQuests(
                       &v7->design_config.txt_config_mgr.quest_config_mgr,
                       *(_DWORD *)(v3 + 48));
      std::shared_ptr<Config>::~shared_ptr((std::shared_ptr<Config> *const)(v3 + 128));
      if ( !quest_id_set )
        goto LABEL_142;
      __for_range = quest_id_set;
      __for_begin._M_node = std::set<unsigned int>::begin(quest_id_set)._M_node;
      __for_end._M_node = std::set<unsigned int>::end(quest_id_set)._M_node;
      while ( 1 )
      {
        if ( !std::operator!=(&__for_begin, &__for_end) )
          goto LABEL_142;
        v8 = std::_Rb_tree_const_iterator<unsigned int>::operator*(&__for_begin);
        v9 = v8;
        if ( *(_BYTE *)(((unsigned __int64)v8 >> 3) + 0x7FFF8000) != 0
          && (char)(((unsigned __int8)v8 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)v8 >> 3) + 0x7FFF8000) )
        {
          __asan_report_load4(v8);
        }
        *(_DWORD *)(v3 + 80) = *v9;
        if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
          __asan_report_load8(&this->player_);
        QuestComp = Player::getQuestComp(this->player_);
        if ( PlayerQuestComp::getQuestState(QuestComp, *(_DWORD *)(v3 + 80)) == QUEST_STATE_UNFINISHED )
          break;
        std::_Rb_tree_const_iterator<unsigned int>::operator++(&__for_begin);
      }
      common::milog::MiLogStream::create(
        &v61,
        &common::milog::MiLogDefault::default_log_obj_,
        1u,
        "./src/player/avatar/player_avatar_comp.cpp",
        "isTrialAvatarNeedToKeep",
        3661);
      v11 = common::milog::MiLogStream::operator<<<char [25],(char *[25])0>(
              &v61,
              (const char (*)[25])"[TRIAL AVATAR] quest_id:");
      v12 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v11, (const unsigned int *)(v3 + 80));
      v13 = common::milog::MiLogStream::operator<<<char [30],(char *[30])0>(
              v12,
              (const char (*)[30])" unfinished, trial_avatar_id:");
      v14 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v13, (const unsigned int *)(v3 + 48));
      common::milog::MiLogStream::operator<<<char [9],(char *[9])0>(v14, (const char (*)[9])" keeped.");
      common::milog::MiLogStream::~MiLogStream(&v61);
      v2 = 1;
      break;
    case 2:
    case 3:
      if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
        __asan_report_load8(&this->player_);
      Player::getSceneComp(this->player_);
      PlayerSceneComp::getCurScene((const PlayerSceneComp *const)(v3 + 96));
      if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
        __asan_report_load8(&this->player_);
      TrialAvatarComp = Player::getTrialAvatarComp(this->player_);
      std::shared_ptr<Scene>::shared_ptr(
        (std::shared_ptr<Scene> *const)(v3 + 128),
        (const std::shared_ptr<Scene> *)(v3 + 96));
      if ( !PlayerTrialAvatarComp::isTrialAvatarDungeon(TrialAvatarComp, (ScenePtr *)(v3 + 128)) )
        goto LABEL_24;
      if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
        __asan_report_load8(&this->player_);
      v15 = Player::getTrialAvatarComp(this->player_);
      if ( PlayerTrialAvatarComp::isActiveTrialAvatarId(v15, *(_DWORD *)(v3 + 48)) )
        v56 = 1;
      else
LABEL_24:
        v56 = 0;
      std::shared_ptr<Scene>::~shared_ptr((std::shared_ptr<Scene> *const)(v3 + 128));
      if ( v56 )
      {
        v2 = 1;
        v16 = 0;
      }
      else
      {
        v16 = 1;
      }
      std::shared_ptr<Scene>::~shared_ptr((std::shared_ptr<Scene> *const)(v3 + 96));
      if ( v16 )
        goto LABEL_142;
      break;
    case 4:
      if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
        __asan_report_load8(&this->player_);
      Player::getSceneComp(this->player_);
      PlayerSceneComp::getCurScene((const PlayerSceneComp *const)(v3 + 96));
      std::dynamic_pointer_cast<DungeonScene,Scene>((const std::shared_ptr<Scene> *)(v3 + 128));
      if ( std::operator!=<DungeonScene>(0LL, (const std::shared_ptr<DungeonScene> *)(v3 + 128))
        && (v17 = std::__shared_ptr_access<DungeonScene,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<DungeonScene,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 128)),
            DungeonScene::isEnterByMistTrialActivity(v17)) )
      {
        v2 = 1;
        v19 = 0;
      }
      else
      {
        v19 = 1;
      }
      std::shared_ptr<DungeonScene>::~shared_ptr((std::shared_ptr<DungeonScene> *const)(v3 + 128));
      std::shared_ptr<Scene>::~shared_ptr((std::shared_ptr<Scene> *const)(v3 + 96));
      if ( v19 )
        goto LABEL_142;
      break;
    case 5:
      if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
        __asan_report_load8(&this->player_);
      Player::getSceneComp(this->player_);
      PlayerSceneComp::getCurScene((const PlayerSceneComp *const)(v3 + 96));
      std::dynamic_pointer_cast<DungeonScene,Scene>((const std::shared_ptr<Scene> *)(v3 + 128));
      if ( std::operator!=<DungeonScene>(0LL, (const std::shared_ptr<DungeonScene> *)(v3 + 128))
        && (v20 = std::__shared_ptr_access<DungeonScene,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<DungeonScene,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 128)),
            DungeonScene::isEnterBySumoActivity(v20)) )
      {
        v2 = 1;
        v22 = 0;
      }
      else
      {
        v22 = 1;
      }
      std::shared_ptr<DungeonScene>::~shared_ptr((std::shared_ptr<DungeonScene> *const)(v3 + 128));
      std::shared_ptr<Scene>::~shared_ptr((std::shared_ptr<Scene> *const)(v3 + 96));
      if ( v22 )
        goto LABEL_142;
      break;
    case 6:
      if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
        __asan_report_load8(&this->player_);
      Player::getSceneComp(this->player_);
      PlayerSceneComp::getCurScene((const PlayerSceneComp *const)(v3 + 96));
      std::dynamic_pointer_cast<DungeonScene,Scene>((const std::shared_ptr<Scene> *)(v3 + 128));
      if ( std::operator!=<DungeonScene>(0LL, (const std::shared_ptr<DungeonScene> *)(v3 + 128))
        && (v23 = std::__shared_ptr_access<DungeonScene,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<DungeonScene,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 128)),
            DungeonScene::isEnterByPotionActivity(v23)) )
      {
        v2 = 1;
        v25 = 0;
      }
      else
      {
        v25 = 1;
      }
      std::shared_ptr<DungeonScene>::~shared_ptr((std::shared_ptr<DungeonScene> *const)(v3 + 128));
      std::shared_ptr<Scene>::~shared_ptr((std::shared_ptr<Scene> *const)(v3 + 96));
      if ( v25 )
        goto LABEL_142;
      break;
    case 7:
      if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
        __asan_report_load8(&this->player_);
      Player::getSceneComp(this->player_);
      PlayerSceneComp::getCurScene((const PlayerSceneComp *const)(v3 + 96));
      std::dynamic_pointer_cast<DungeonScene,Scene>((const std::shared_ptr<Scene> *)(v3 + 128));
      if ( std::operator!=<DungeonScene>(0LL, (const std::shared_ptr<DungeonScene> *)(v3 + 128))
        && (v26 = std::__shared_ptr_access<DungeonScene,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<DungeonScene,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 128)),
            DungeonScene::isEnterByCrystalLinkActivity(v26)) )
      {
        v2 = 1;
        v28 = 0;
      }
      else
      {
        v28 = 1;
      }
      std::shared_ptr<DungeonScene>::~shared_ptr((std::shared_ptr<DungeonScene> *const)(v3 + 128));
      std::shared_ptr<Scene>::~shared_ptr((std::shared_ptr<Scene> *const)(v3 + 96));
      if ( v28 )
        goto LABEL_142;
      break;
    case 8:
      if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
        __asan_report_load8(&this->player_);
      Player::getSceneComp(this->player_);
      PlayerSceneComp::getCurScene((const PlayerSceneComp *const)(v3 + 128));
      if ( !std::operator!=<Scene>(0LL, (const std::shared_ptr<Scene> *)(v3 + 128)) )
        goto LABEL_81;
      v29 = std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 128));
      GalleryComp = Scene::getGalleryComp(v29);
      if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
        __asan_report_load8(&this->player_);
      Uid = Player::getUid(this->player_);
      if ( SceneGalleryComp::isPlayerInStartedGallery<IrodoriMasterGallery>(GalleryComp, Uid) )
      {
        v2 = 1;
        v32 = 0;
      }
      else
      {
LABEL_81:
        v32 = 1;
      }
      std::shared_ptr<Scene>::~shared_ptr((std::shared_ptr<Scene> *const)(v3 + 128));
      if ( v32 )
        goto LABEL_142;
      break;
    case 9:
      v2 = 1;
      break;
    case 0xA:
      if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
        __asan_report_load8(&this->player_);
      Player::getSceneComp(this->player_);
      PlayerSceneComp::getCurScene<DungeonScene>((PlayerSceneComp *const)(v3 + 128));
      if ( std::operator!=<DungeonScene>((const std::shared_ptr<DungeonScene> *)(v3 + 128), 0LL)
        && (v33 = std::__shared_ptr_access<DungeonScene,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<DungeonScene,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 128)),
            DungeonScene::isEnterByInstableSprayActivity(v33)) )
      {
        v2 = 1;
        v35 = 0;
      }
      else
      {
        v35 = 1;
      }
      std::shared_ptr<DungeonScene>::~shared_ptr((std::shared_ptr<DungeonScene> *const)(v3 + 128));
      if ( v35 )
        goto LABEL_142;
      break;
    case 0xB:
      if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
        __asan_report_load8(&this->player_);
      Player::getSceneComp(this->player_);
      PlayerSceneComp::getCurScene((const PlayerSceneComp *const)(v3 + 96));
      std::dynamic_pointer_cast<DungeonScene,Scene>((const std::shared_ptr<Scene> *)(v3 + 128));
      if ( std::operator!=<DungeonScene>(0LL, (const std::shared_ptr<DungeonScene> *)(v3 + 128))
        && (v39 = std::__shared_ptr_access<DungeonScene,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<DungeonScene,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 128)),
            DungeonScene::isEnterByMuqadasPotionActivity(v39)) )
      {
        v2 = 1;
        v41 = 0;
      }
      else
      {
        v41 = 1;
      }
      std::shared_ptr<DungeonScene>::~shared_ptr((std::shared_ptr<DungeonScene> *const)(v3 + 128));
      std::shared_ptr<Scene>::~shared_ptr((std::shared_ptr<Scene> *const)(v3 + 96));
      if ( v41 )
        goto LABEL_142;
      break;
    case 0xC:
      if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
        __asan_report_load8(&this->player_);
      Player::getSceneComp(this->player_);
      PlayerSceneComp::getCurScene((const PlayerSceneComp *const)(v3 + 128));
      if ( !std::operator!=<Scene>(0LL, (const std::shared_ptr<Scene> *)(v3 + 128)) )
        goto LABEL_125;
      v42 = std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 128));
      v43 = Scene::getGalleryComp(v42);
      if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
        __asan_report_load8(&this->player_);
      v44 = Player::getUid(this->player_);
      if ( SceneGalleryComp::isPlayerInStartedGallery<VintageHuntingGallery>(v43, v44) )
      {
        v2 = 1;
        v45 = 0;
      }
      else
      {
LABEL_125:
        v45 = 1;
      }
      std::shared_ptr<Scene>::~shared_ptr((std::shared_ptr<Scene> *const)(v3 + 128));
      if ( v45 )
        goto LABEL_142;
      break;
    case 0xD:
      if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
        __asan_report_load8(&this->player_);
      Player::getSceneComp(this->player_);
      PlayerSceneComp::getCurScene<DungeonScene>((PlayerSceneComp *const)(v3 + 128));
      if ( std::operator!=<DungeonScene>((const std::shared_ptr<DungeonScene> *)(v3 + 128), 0LL)
        && (v36 = std::__shared_ptr_access<DungeonScene,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<DungeonScene,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 128)),
            DungeonScene::isEnterByCharAmusementActivity(v36)) )
      {
        v2 = 1;
        v38 = 0;
      }
      else
      {
        v38 = 1;
      }
      std::shared_ptr<DungeonScene>::~shared_ptr((std::shared_ptr<DungeonScene> *const)(v3 + 128));
      if ( v38 )
        goto LABEL_142;
      break;
    case 0xE:
      if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
        __asan_report_load8(&this->player_);
      Player::getSceneComp(this->player_);
      PlayerSceneComp::getCurScene<DungeonScene>((PlayerSceneComp *const)(v3 + 128));
      if ( std::operator!=<DungeonScene>((const std::shared_ptr<DungeonScene> *)(v3 + 128), 0LL)
        && (v46 = std::__shared_ptr_access<DungeonScene,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<DungeonScene,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 128)),
            DungeonScene::isEnterByDuelHeartActivity(v46)) )
      {
        v2 = 1;
        v48 = 0;
      }
      else
      {
        v48 = 1;
      }
      std::shared_ptr<DungeonScene>::~shared_ptr((std::shared_ptr<DungeonScene> *const)(v3 + 128));
      if ( v48 )
        goto LABEL_142;
      break;
    default:
      common::milog::MiLogStream::create(
        &v61,
        &common::milog::MiLogDefault::default_log_obj_,
        1u,
        "./src/player/avatar/player_avatar_comp.cpp",
        "isTrialAvatarNeedToKeep",
        3785);
      v49 = common::milog::MiLogStream::operator<<<char [14],(char *[14])0>(&v61, (const char (*)[14])"grant_reason:");
      v50 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v49, (const unsigned int *)(v3 + 64));
      v51 = common::milog::MiLogStream::operator<<<char [15],(char *[15])0>(v50, (const char (*)[15])" trial_avatar:");
      v52 = common::milog::MiLogStream::operator<<<TrialAvatar,(TrialAvatar*)0>(v51, trial_avatar);
      v53 = common::milog::MiLogStream::operator<<<char [9],(char *[9])0>(v52, (const char (*)[9])" player:");
      if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
        __asan_report_load8(&this->player_);
      operator<<(v53, this->player_);
      common::milog::MiLogStream::~MiLogStream(&v61);
LABEL_142:
      v2 = 0;
      break;
  }
  result = v2;
  if ( v62 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8010) = 0;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8010) = -168430091;
  }
  return result;
};

// Line 3793: range 0000000017186EBC-0000000017187317
__int64 __fastcall PlayerAvatarComp::isMirrorAvatarOrSnapshotNeedToKeep(
        PlayerAvatarComp *const this,
        signed int avatar_snapshot_type,
        uint64_t guid)
{
  unsigned int v3; // r14d
  unsigned __int64 v4; // r12
  __int64 v5; // rax
  _DWORD *v6; // r13
  DungeonScene *v7; // rax
  int v9; // r15d
  DungeonScene *v10; // rax
  int v12; // r15d
  common::milog::MiLogStream *v13; // rax
  common::milog::MiLogStream *v14; // rax
  common::milog::MiLogStream *v15; // rax
  __int64 result; // rax
  unsigned int val; // [rsp+2Ch] [rbp-D4h] BYREF
  common::milog::MiLogStream v19; // [rsp+30h] [rbp-D0h] BYREF
  char v20[176]; // [rsp+50h] [rbp-B0h] BYREF

  v4 = (unsigned __int64)v20;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v5 = __asan_stack_malloc_1(128LL);
    if ( v5 )
      v4 = v5;
  }
  *(_QWORD *)v4 = 1102416563LL;
  *(_QWORD *)(v4 + 8) = "3 32 8 9 guid:3792 64 16 18 cur_scene_ptr:3814 96 16 22 dungeon_scene_ptr:3815";
  *(_QWORD *)(v4 + 16) = PlayerAvatarComp::isMirrorAvatarOrSnapshotNeedToKeep;
  v6 = (_DWORD *)(v4 >> 3);
  v6[536862720] = -235802127;
  v6[536862721] = -218959360;
  v6[536862722] = -219021312;
  v6[536862723] = -202178560;
  *(_QWORD *)(v4 + 32) = guid;
  if ( avatar_snapshot_type == 3 )
  {
    if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
      __asan_report_load8(&this->player_);
    Player::getSceneComp(this->player_);
    PlayerSceneComp::getCurScene((const PlayerSceneComp *const)(v4 + 64));
    std::dynamic_pointer_cast<DungeonScene,Scene>((const std::shared_ptr<Scene> *)(v4 + 96));
    if ( std::operator!=<DungeonScene>(0LL, (const std::shared_ptr<DungeonScene> *)(v4 + 96))
      && (v10 = std::__shared_ptr_access<DungeonScene,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<DungeonScene,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 96)),
          DungeonScene::isEnterByTeamChainActivity(v10)) )
    {
      v3 = 1;
      v12 = 0;
    }
    else
    {
      v12 = 1;
    }
    std::shared_ptr<DungeonScene>::~shared_ptr((std::shared_ptr<DungeonScene> *const)(v4 + 96));
    std::shared_ptr<Scene>::~shared_ptr((std::shared_ptr<Scene> *const)(v4 + 64));
    if ( !v12 )
      goto LABEL_35;
LABEL_34:
    v3 = 0;
    goto LABEL_35;
  }
  if ( avatar_snapshot_type > 3 )
  {
LABEL_33:
    common::milog::MiLogStream::create(
      &v19,
      &common::milog::MiLogDefault::default_log_obj_,
      4u,
      "./src/player/avatar/player_avatar_comp.cpp",
      "isMirrorAvatarOrSnapshotNeedToKeep",
      3823);
    v13 = common::milog::MiLogStream::operator<<<char [35],(char *[35])0>(
            &v19,
            (const char (*)[35])"keep unknown avatar_snapshot_type:");
    val = avatar_snapshot_type;
    v14 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v13, &val);
    v15 = common::milog::MiLogStream::operator<<<char [7],(char *[7])0>(v14, (const char (*)[7])" guid:");
    common::milog::MiLogStream::operator<<<unsigned long,(unsigned long *)0>(v15, (const unsigned __int64 *)(v4 + 32));
    common::milog::MiLogStream::~MiLogStream(&v19);
    v3 = 1;
    goto LABEL_35;
  }
  if ( avatar_snapshot_type <= 1 )
  {
    if ( avatar_snapshot_type >= 0 )
    {
      v3 = 1;
      goto LABEL_35;
    }
    goto LABEL_33;
  }
  if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
    __asan_report_load8(&this->player_);
  Player::getSceneComp(this->player_);
  PlayerSceneComp::getCurScene((const PlayerSceneComp *const)(v4 + 64));
  std::dynamic_pointer_cast<DungeonScene,Scene>((const std::shared_ptr<Scene> *)(v4 + 96));
  if ( std::operator!=<DungeonScene>(0LL, (const std::shared_ptr<DungeonScene> *)(v4 + 96))
    && (v7 = std::__shared_ptr_access<DungeonScene,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<DungeonScene,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 96)),
        DungeonScene::isEnterByMistTrialActivity(v7)) )
  {
    v3 = 1;
    v9 = 0;
  }
  else
  {
    v9 = 1;
  }
  std::shared_ptr<DungeonScene>::~shared_ptr((std::shared_ptr<DungeonScene> *const)(v4 + 96));
  std::shared_ptr<Scene>::~shared_ptr((std::shared_ptr<Scene> *const)(v4 + 64));
  if ( v9 )
    goto LABEL_34;
LABEL_35:
  result = v3;
  if ( v20 == (char *)v4 )
  {
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v4 = 1172321806LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 3830: range 0000000017187318-0000000017188112
void __cdecl PlayerAvatarComp::checkAndClearInvalidInformalAvatarOnLogin(PlayerAvatarComp *const this)
{
  unsigned __int64 v1; // r13
  __int64 v2; // rax
  _DWORD *v3; // r12
  const std::pair<long unsigned int const,std::shared_ptr<Avatar> > *v4; // rax
  common::milog::MiLogStream *v5; // rax
  common::milog::MiLogStream *v6; // rax
  common::milog::MiLogStream *v7; // rcx
  unsigned __int64 v8; // rax
  unsigned __int64 v9; // rdx
  int v10; // eax
  common::milog::MiLogStream *v11; // r14
  std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v12; // rax
  common::milog::MiLogStream *v13; // rax
  common::milog::MiLogStream *v14; // rax
  common::milog::MiLogStream *v15; // rax
  common::milog::MiLogStream *v16; // rcx
  TrialAvatar *v17; // rdx
  std::__shared_ptr_access<TrialAvatar,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v18; // rax
  common::milog::MiLogStream *v19; // r14
  std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v20; // rax
  common::milog::MiLogStream *v21; // rax
  common::milog::MiLogStream *v22; // rax
  common::milog::MiLogStream *v23; // rax
  common::milog::MiLogStream *v24; // rcx
  std::__shared_ptr_access<MirrorAvatar,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v25; // rax
  std::__shared_ptr_access<MirrorAvatar,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v26; // rax
  uint64_t v27; // rdx
  std::vector<long unsigned int> *v28; // rax
  common::milog::MiLogStream *v29; // rax
  common::milog::MiLogStream *v30; // rax
  common::milog::MiLogStream *v31; // rax
  common::milog::MiLogStream *v32; // rax
  std::vector<long unsigned int> *v33; // rax
  common::milog::MiLogStream *v34; // rax
  common::milog::MiLogStream *v35; // rax
  common::milog::MiLogStream *v36; // rcx
  __gnu_cxx::__normal_iterator<unsigned int*,std::vector<unsigned int> >::reference v37; // rax
  uint32_t *v38; // rdx
  common::milog::MiLogStream *v39; // rax
  common::milog::MiLogStream *v40; // rax
  common::milog::MiLogStream *v41; // rcx
  std::vector<unsigned int>::value_type __x; // [rsp+10h] [rbp-1D0h] BYREF
  uint32_t trial_avatar_id; // [rsp+14h] [rbp-1CCh]
  proto::AvatarSnapshotType avatar_snapshot_type_0; // [rsp+18h] [rbp-1C8h]
  proto::AvatarSnapshotType avatar_snapshot_type; // [rsp+1Ch] [rbp-1C4h]
  std::map<long unsigned int,std::shared_ptr<Avatar>>::iterator __for_begin; // [rsp+20h] [rbp-1C0h] BYREF
  std::map<long unsigned int,std::shared_ptr<Avatar>>::iterator __for_end; // [rsp+28h] [rbp-1B8h] BYREF
  std::map<long unsigned int,std::shared_ptr<Avatar>> *__for_range; // [rsp+30h] [rbp-1B0h]
  std::map<long unsigned int,proto::AvatarSnapshotBin> *__for_range_0; // [rsp+38h] [rbp-1A8h]
  std::vector<unsigned int> *__for_range_1; // [rsp+40h] [rbp-1A0h]
  std::map<unsigned int,std::vector<long unsigned int>> *__for_range_2; // [rsp+48h] [rbp-198h]
  const std::pair<unsigned int const,std::vector<long unsigned int> > *v52; // [rsp+50h] [rbp-190h]
  std::tuple_element<0,const std::pair<unsigned int const,std::vector<long unsigned int> > >::type *avatar_snapshot_type_1; // [rsp+58h] [rbp-188h]
  std::tuple_element<1,const std::pair<unsigned int const,std::vector<long unsigned int> > >::type *guid_vec; // [rsp+60h] [rbp-180h]
  const std::pair<long unsigned int const,proto::AvatarSnapshotBin> *v55; // [rsp+68h] [rbp-178h]
  std::tuple_element<0,const std::pair<long unsigned int const,proto::AvatarSnapshotBin> >::type *guid_0; // [rsp+70h] [rbp-170h]
  std::tuple_element<1,const std::pair<long unsigned int const,proto::AvatarSnapshotBin> >::type *avatar_snapshot_bin; // [rsp+78h] [rbp-168h]
  std::tuple_element<0,std::pair<long unsigned int const,std::shared_ptr<Avatar> > >::type *guid; // [rsp+80h] [rbp-160h]
  std::tuple_element<1,std::pair<long unsigned int const,std::shared_ptr<Avatar> > >::type *avatar_ptr; // [rsp+88h] [rbp-158h]
  std::pair<long unsigned int const,std::shared_ptr<Avatar> > __in; // [rsp+90h] [rbp-150h] BYREF
  common::milog::MiLogStream v61; // [rsp+B0h] [rbp-130h] BYREF
  char v62[272]; // [rsp+D0h] [rbp-110h] BYREF

  v1 = (unsigned __int64)v62;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_2(224LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "4 32 4 16 avatar_type:3840 48 16 22 mirror_avatar_ptr:3861 80 24 28 del_trial_avatar_id_vec:3831"
                        " 144 48 44 del_mirror_avatar_or_snapshot_guids_map:3832";
  *(_QWORD *)(v1 + 16) = PlayerAvatarComp::checkAndClearInvalidInformalAvatarOnLogin;
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = 61956;
  v3[536862722] = 62194;
  v3[536862723] = -218959360;
  v3[536862724] = 62194;
  v3[536862726] = -202116109;
  std::vector<unsigned int>::vector((std::vector<unsigned int> *const)(v1 + 80));
  std::map<unsigned int,std::vector<unsigned long>>::map((std::map<unsigned int,std::vector<long unsigned int>> *const)(v1 + 144));
  __for_range = &this->avatar_map_;
  __for_begin._M_node = std::map<unsigned long,std::shared_ptr<Avatar>>::begin(&this->avatar_map_)._M_node;
  __for_end._M_node = std::map<unsigned long,std::shared_ptr<Avatar>>::end(&this->avatar_map_)._M_node;
  while ( std::operator!=(&__for_begin, &__for_end) )
  {
    v4 = std::_Rb_tree_iterator<std::pair<unsigned long const,std::shared_ptr<Avatar>>>::operator*(&__for_begin);
    std::pair<unsigned long const,std::shared_ptr<Avatar>>::pair(&__in, v4);
    guid = std::get<0ul,unsigned long const,std::shared_ptr<Avatar>>(&__in);
    avatar_ptr = std::get<1ul,unsigned long const,std::shared_ptr<Avatar>>(&__in);
    if ( std::operator==<Avatar>(avatar_ptr, 0LL) )
    {
      common::milog::MiLogStream::create(
        &v61,
        &common::milog::MiLogDefault::default_log_obj_,
        4u,
        "./src/player/avatar/player_avatar_comp.cpp",
        "checkAndClearInvalidInformalAvatarOnLogin",
        3837);
      v5 = common::milog::MiLogStream::operator<<<char [22],(char *[22])0>(
             &v61,
             (const char (*)[22])"avatar is null, guid:");
      v6 = common::milog::MiLogStream::operator<<<unsigned long,(unsigned long *)0>(v5, guid);
      v7 = common::milog::MiLogStream::operator<<<char [9],(char *[9])0>(v6, (const char (*)[9])" player:");
      if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
        __asan_report_load8(&this->player_);
LABEL_9:
      operator<<(v7, this->player_);
      common::milog::MiLogStream::~MiLogStream(&v61);
      goto LABEL_35;
    }
    v8 = (unsigned __int64)std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false> *const)avatar_ptr);
    if ( *(_BYTE *)((v8 >> 3) + 0x7FFF8000) )
      v8 = __asan_report_load8(v8);
    v9 = *(_QWORD *)v8 + 400LL;
    if ( *(_BYTE *)((v9 >> 3) + 0x7FFF8000) )
      v8 = __asan_report_load8(*(_QWORD *)v8 + 400LL);
    *(_DWORD *)(v1 + 32) = (*(__int64 (__fastcall **)(unsigned __int64))v9)(v8);
    v10 = *(_DWORD *)(v1 + 32);
    if ( v10 == 3 )
    {
      std::dynamic_pointer_cast<MirrorAvatar,Avatar>((const std::shared_ptr<Avatar> *)(v1 + 48));
      if ( std::operator==<MirrorAvatar>((const std::shared_ptr<MirrorAvatar> *)(v1 + 48), 0LL) )
      {
        common::milog::MiLogStream::create(
          &v61,
          &common::milog::MiLogDefault::default_log_obj_,
          4u,
          "./src/player/avatar/player_avatar_comp.cpp",
          "checkAndClearInvalidInformalAvatarOnLogin",
          3864);
        v19 = common::milog::MiLogStream::operator<<<char [31],(char *[31])0>(
                &v61,
                (const char (*)[31])"to mirror_avatar fail, avatar:");
        v20 = std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::operator*((const std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false> *const)avatar_ptr);
        v21 = common::milog::MiLogStream::operator<<<Avatar,(Avatar*)0>(v19, v20);
        v22 = common::milog::MiLogStream::operator<<<char [7],(char *[7])0>(v21, (const char (*)[7])" guid:");
        v23 = common::milog::MiLogStream::operator<<<unsigned long,(unsigned long *)0>(v22, guid);
        v24 = common::milog::MiLogStream::operator<<<char [9],(char *[9])0>(v23, (const char (*)[9])" player:");
        if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
          __asan_report_load8(&this->player_);
        operator<<(v24, this->player_);
        common::milog::MiLogStream::~MiLogStream(&v61);
      }
      else
      {
        v25 = std::__shared_ptr_access<MirrorAvatar,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<MirrorAvatar,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v1 + 48));
        avatar_snapshot_type = MirrorAvatar::getAvatarSnapshotType(v25);
        v26 = std::__shared_ptr_access<MirrorAvatar,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<MirrorAvatar,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v1 + 48));
        v27 = Avatar::getGuid(v26);
        if ( (unsigned __int8)PlayerAvatarComp::isMirrorAvatarOrSnapshotNeedToKeep(this, avatar_snapshot_type, v27) != 1 )
        {
          __x = avatar_snapshot_type;
          v28 = std::map<unsigned int,std::vector<unsigned long>>::operator[](
                  (std::map<unsigned int,std::vector<long unsigned int>> *const)(v1 + 144),
                  &__x);
          std::vector<unsigned long>::push_back(v28, guid);
        }
      }
      std::shared_ptr<MirrorAvatar>::~shared_ptr((std::shared_ptr<MirrorAvatar> *const)(v1 + 48));
    }
    else
    {
      if ( v10 > 3 )
        goto LABEL_32;
      if ( v10 != 1 )
      {
        if ( v10 != 2 )
        {
LABEL_32:
          common::milog::MiLogStream::create(
            &v61,
            &common::milog::MiLogDefault::default_log_obj_,
            4u,
            "./src/player/avatar/player_avatar_comp.cpp",
            "checkAndClearInvalidInformalAvatarOnLogin",
            3875);
          v29 = common::milog::MiLogStream::operator<<<char [21],(char *[21])0>(
                  &v61,
                  (const char (*)[21])"invalid avatar_type:");
          v30 = common::milog::MiLogStream::operator<<<proto::AvatarType,(proto::AvatarType*)0>(
                  v29,
                  (const proto::AvatarType *)(v1 + 32));
          v31 = common::milog::MiLogStream::operator<<<char [7],(char *[7])0>(v30, (const char (*)[7])" guid:");
          v32 = common::milog::MiLogStream::operator<<<unsigned long,(unsigned long *)0>(v31, guid);
          v7 = common::milog::MiLogStream::operator<<<char [9],(char *[9])0>(v32, (const char (*)[9])" player:");
          if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
            __asan_report_load8(&this->player_);
          goto LABEL_9;
        }
        std::dynamic_pointer_cast<TrialAvatar,Avatar>((const std::shared_ptr<Avatar> *)(v1 + 48));
        if ( std::operator==<TrialAvatar>((const std::shared_ptr<TrialAvatar> *)(v1 + 48), 0LL) )
        {
          common::milog::MiLogStream::create(
            &v61,
            &common::milog::MiLogDefault::default_log_obj_,
            4u,
            "./src/player/avatar/player_avatar_comp.cpp",
            "checkAndClearInvalidInformalAvatarOnLogin",
            3850);
          v11 = common::milog::MiLogStream::operator<<<char [30],(char *[30])0>(
                  &v61,
                  (const char (*)[30])"to trial_avatar fail, avatar:");
          v12 = std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::operator*((const std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false> *const)avatar_ptr);
          v13 = common::milog::MiLogStream::operator<<<Avatar,(Avatar*)0>(v11, v12);
          v14 = common::milog::MiLogStream::operator<<<char [7],(char *[7])0>(v13, (const char (*)[7])" guid:");
          v15 = common::milog::MiLogStream::operator<<<unsigned long,(unsigned long *)0>(v14, guid);
          v16 = common::milog::MiLogStream::operator<<<char [9],(char *[9])0>(v15, (const char (*)[9])" player:");
          if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
            __asan_report_load8(&this->player_);
          operator<<(v16, this->player_);
          common::milog::MiLogStream::~MiLogStream(&v61);
        }
        else
        {
          v17 = std::__shared_ptr_access<TrialAvatar,(__gnu_cxx::_Lock_policy)2,false,false>::operator*((const std::__shared_ptr_access<TrialAvatar,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v1 + 48));
          if ( !PlayerAvatarComp::isTrialAvatarNeedToKeep(this, v17) )
          {
            v18 = std::__shared_ptr_access<TrialAvatar,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<TrialAvatar,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v1 + 48));
            __x = TrialAvatar::getTrialAvatarId(v18);
            std::vector<unsigned int>::push_back((std::vector<unsigned int> *const)(v1 + 80), &__x);
          }
        }
        std::shared_ptr<TrialAvatar>::~shared_ptr((std::shared_ptr<TrialAvatar> *const)(v1 + 48));
      }
    }
LABEL_35:
    std::pair<unsigned long const,std::shared_ptr<Avatar>>::~pair(&__in);
    std::_Rb_tree_iterator<std::pair<unsigned long const,std::shared_ptr<Avatar>>>::operator++(&__for_begin);
  }
  __for_range_0 = &this->avatar_snapshot_map_;
  __for_begin._M_node = std::map<unsigned long,proto::AvatarSnapshotBin>::begin(&this->avatar_snapshot_map_)._M_node;
  __for_end._M_node = std::map<unsigned long,proto::AvatarSnapshotBin>::end(__for_range_0)._M_node;
  while ( std::operator!=(
            (const std::_Rb_tree_iterator<std::pair<long unsigned int const,proto::AvatarSnapshotBin> >::_Self *)&__for_begin,
            (const std::_Rb_tree_iterator<std::pair<long unsigned int const,proto::AvatarSnapshotBin> >::_Self *)&__for_end) )
  {
    v55 = std::_Rb_tree_iterator<std::pair<unsigned long const,proto::AvatarSnapshotBin>>::operator*((const std::_Rb_tree_iterator<std::pair<long unsigned int const,proto::AvatarSnapshotBin> > *const)&__for_begin);
    guid_0 = std::get<0ul,unsigned long const,proto::AvatarSnapshotBin>(v55);
    avatar_snapshot_bin = (std::tuple_element<1,const std::pair<long unsigned int const,proto::AvatarSnapshotBin> >::type *)std::get<1ul,unsigned long const,proto::AvatarSnapshotBin>(v55);
    avatar_snapshot_type_0 = proto::AvatarSnapshotBin::avatar_snapshot_type(avatar_snapshot_bin);
    if ( *(_BYTE *)(((unsigned __int64)guid_0 >> 3) + 0x7FFF8000) )
      __asan_report_load8(guid_0);
    if ( (unsigned __int8)PlayerAvatarComp::isMirrorAvatarOrSnapshotNeedToKeep(this, avatar_snapshot_type_0, *guid_0) != 1 )
    {
      __x = avatar_snapshot_type_0;
      v33 = std::map<unsigned int,std::vector<unsigned long>>::operator[](
              (std::map<unsigned int,std::vector<long unsigned int>> *const)(v1 + 144),
              &__x);
      std::vector<unsigned long>::push_back(v33, guid_0);
    }
    std::_Rb_tree_iterator<std::pair<unsigned long const,proto::AvatarSnapshotBin>>::operator++((std::_Rb_tree_iterator<std::pair<long unsigned int const,proto::AvatarSnapshotBin> > *const)&__for_begin);
  }
  if ( !std::vector<unsigned int>::empty((const std::vector<unsigned int> *const)(v1 + 80)) )
  {
    common::milog::MiLogStream::create(
      &v61,
      &common::milog::MiLogDefault::default_log_obj_,
      1u,
      "./src/player/avatar/player_avatar_comp.cpp",
      "checkAndClearInvalidInformalAvatarOnLogin",
      3890);
    v34 = common::milog::MiLogStream::operator<<<char [25],(char *[25])0>(
            &v61,
            (const char (*)[25])"del_trial_avatar_id_vec:");
    v35 = common::milog::MiLogStream::operator<<<unsigned int>(v34, (const std::vector<unsigned int> *)(v1 + 80));
    v36 = common::milog::MiLogStream::operator<<<char [9],(char *[9])0>(v35, (const char (*)[9])" player:");
    if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
      __asan_report_load8(&this->player_);
    operator<<(v36, this->player_);
    common::milog::MiLogStream::~MiLogStream(&v61);
    __for_range_1 = (std::vector<unsigned int> *)(v1 + 80);
    __for_begin._M_node = (std::_Rb_tree_iterator<std::pair<long unsigned int const,std::shared_ptr<Avatar> > >::_Base_ptr)std::vector<unsigned int>::begin((std::vector<unsigned int> *const)(v1 + 80))._M_current;
    __for_end._M_node = (std::_Rb_tree_iterator<std::pair<long unsigned int const,std::shared_ptr<Avatar> > >::_Base_ptr)std::vector<unsigned int>::end(__for_range_1)._M_current;
    while ( __gnu_cxx::operator!=<unsigned int *,std::vector<unsigned int>>(
              (const __gnu_cxx::__normal_iterator<unsigned int*,std::vector<unsigned int> > *)&__for_begin,
              (const __gnu_cxx::__normal_iterator<unsigned int*,std::vector<unsigned int> > *)&__for_end) )
    {
      v37 = __gnu_cxx::__normal_iterator<unsigned int *,std::vector<unsigned int>>::operator*((const __gnu_cxx::__normal_iterator<unsigned int*,std::vector<unsigned int> > *const)&__for_begin);
      v38 = v37;
      if ( *(_BYTE *)(((unsigned __int64)v37 >> 3) + 0x7FFF8000) != 0
        && (char)(((unsigned __int8)v37 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)v37 >> 3) + 0x7FFF8000) )
      {
        __asan_report_load4(v37);
      }
      trial_avatar_id = *v38;
      PlayerAvatarComp::delTrialAvatar(this, trial_avatar_id, 0);
      __gnu_cxx::__normal_iterator<unsigned int *,std::vector<unsigned int>>::operator++((__gnu_cxx::__normal_iterator<unsigned int*,std::vector<unsigned int> > *const)&__for_begin);
    }
  }
  if ( !std::map<unsigned int,std::vector<unsigned long>>::empty((const std::map<unsigned int,std::vector<long unsigned int>> *const)(v1 + 144)) )
  {
    common::milog::MiLogStream::create(
      &v61,
      &common::milog::MiLogDefault::default_log_obj_,
      1u,
      "./src/player/avatar/player_avatar_comp.cpp",
      "checkAndClearInvalidInformalAvatarOnLogin",
      3898);
    v39 = common::milog::MiLogStream::operator<<<char [41],(char *[41])0>(
            &v61,
            (const char (*)[41])"del_mirror_avatar_or_snapshot_guids_map:");
    v40 = common::milog::MiLogStream::operator<<<unsigned int,std::vector<unsigned long>>(
            v39,
            (const std::map<unsigned int,std::vector<long unsigned int>> *)(v1 + 144));
    v41 = common::milog::MiLogStream::operator<<<char [9],(char *[9])0>(v40, (const char (*)[9])" player:");
    if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
      __asan_report_load8(&this->player_);
    operator<<(v41, this->player_);
    common::milog::MiLogStream::~MiLogStream(&v61);
    __for_range_2 = (std::map<unsigned int,std::vector<long unsigned int>> *)(v1 + 144);
    __for_begin._M_node = std::map<unsigned int,std::vector<unsigned long>>::begin((std::map<unsigned int,std::vector<long unsigned int>> *const)(v1 + 144))._M_node;
    __for_end._M_node = std::map<unsigned int,std::vector<unsigned long>>::end(__for_range_2)._M_node;
    while ( std::operator!=(
              (const std::_Rb_tree_iterator<std::pair<unsigned int const,std::vector<long unsigned int> > >::_Self *)&__for_begin,
              (const std::_Rb_tree_iterator<std::pair<unsigned int const,std::vector<long unsigned int> > >::_Self *)&__for_end) )
    {
      v52 = std::_Rb_tree_iterator<std::pair<unsigned int const,std::vector<unsigned long>>>::operator*((const std::_Rb_tree_iterator<std::pair<unsigned int const,std::vector<long unsigned int> > > *const)&__for_begin);
      avatar_snapshot_type_1 = std::get<0ul,unsigned int const,std::vector<unsigned long>>(v52);
      guid_vec = (std::tuple_element<1,const std::pair<unsigned int const,std::vector<long unsigned int> > >::type *)std::get<1ul,unsigned int const,std::vector<unsigned long>>(v52);
      if ( *(_BYTE *)(((unsigned __int64)avatar_snapshot_type_1 >> 3) + 0x7FFF8000) != 0
        && (char)(((unsigned __int8)avatar_snapshot_type_1 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)avatar_snapshot_type_1 >> 3)
                                                                                 + 0x7FFF8000) )
      {
        __asan_report_load4(avatar_snapshot_type_1);
      }
      PlayerAvatarComp::delInformalAvatarOrSnapshotBatch(
        this,
        (proto::AvatarSnapshotType)*avatar_snapshot_type_1,
        guid_vec);
      std::_Rb_tree_iterator<std::pair<unsigned int const,std::vector<unsigned long>>>::operator++((std::_Rb_tree_iterator<std::pair<unsigned int const,std::vector<long unsigned int> > > *const)&__for_begin);
    }
  }
  std::map<unsigned int,std::vector<unsigned long>>::~map((std::map<unsigned int,std::vector<long unsigned int>> *const)(v1 + 144));
  std::vector<unsigned int>::~vector((std::vector<unsigned int> *const)(v1 + 80));
  if ( v62 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0LL;
    *(_DWORD *)((v1 >> 3) + 0x7FFF8010) = 0;
    *(_DWORD *)((v1 >> 3) + 0x7FFF8018) = 0;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v1 >> 3) + 0x7FFF8018) = -168430091;
  }
};

// Line 3907: range 0000000017188114-0000000017188499
void __cdecl PlayerAvatarComp::checkAndClearInvalidTrialAvatar(PlayerAvatarComp *const this, bool is_notify)
{
  unsigned __int64 v2; // r12
  __int64 v3; // rax
  _DWORD *v4; // r13
  uint64_t *v5; // rax
  TrialAvatar *v6; // rdx
  std::__shared_ptr_access<TrialAvatar,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v7; // rax
  __gnu_cxx::__normal_iterator<unsigned int*,std::vector<unsigned int> >::reference v8; // rax
  unsigned int *v9; // rdx
  std::vector<unsigned int>::value_type __x; // [rsp+10h] [rbp-E0h] BYREF
  unsigned int del_id; // [rsp+14h] [rbp-DCh]
  std::set<long unsigned int>::iterator __for_begin; // [rsp+18h] [rbp-D8h] BYREF
  std::set<long unsigned int>::iterator __for_end; // [rsp+20h] [rbp-D0h] BYREF
  std::set<long unsigned int> *__for_range; // [rsp+28h] [rbp-C8h]
  std::vector<unsigned int> *__for_range_0; // [rsp+30h] [rbp-C0h]
  uint64_t guid; // [rsp+38h] [rbp-B8h]
  char v17[176]; // [rsp+40h] [rbp-B0h] BYREF

  v2 = (unsigned __int64)v17;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_1(128LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "2 32 16 21 trial_avatar_ptr:3911 64 24 15 del_id_vec:3908";
  *(_QWORD *)(v2 + 16) = PlayerAvatarComp::checkAndClearInvalidTrialAvatar;
  v4 = (_DWORD *)(v2 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = -219021312;
  v4[536862722] = -218103808;
  v4[536862723] = -202116109;
  std::vector<unsigned int>::vector((std::vector<unsigned int> *const)(v2 + 64));
  __for_range = &this->trial_avatar_guid_set_;
  __for_begin._M_node = std::set<unsigned long>::begin(&this->trial_avatar_guid_set_)._M_node;
  __for_end._M_node = std::set<unsigned long>::end(&this->trial_avatar_guid_set_)._M_node;
  while ( std::operator!=(&__for_begin, &__for_end) )
  {
    v5 = (uint64_t *)std::_Rb_tree_const_iterator<unsigned long>::operator*(&__for_begin);
    if ( *(_BYTE *)(((unsigned __int64)v5 >> 3) + 0x7FFF8000) )
      v5 = (uint64_t *)__asan_report_load8(v5);
    guid = *v5;
    PlayerAvatarComp::findAvatar<TrialAvatar>((const PlayerAvatarComp *const)(v2 + 32), (uint64_t)this);
    if ( !std::operator==<TrialAvatar>((const std::shared_ptr<TrialAvatar> *)(v2 + 32), 0LL) )
    {
      v6 = std::__shared_ptr_access<TrialAvatar,(__gnu_cxx::_Lock_policy)2,false,false>::operator*((const std::__shared_ptr_access<TrialAvatar,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 32));
      if ( !PlayerAvatarComp::isTrialAvatarNeedToKeep(this, v6) )
      {
        v7 = std::__shared_ptr_access<TrialAvatar,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<TrialAvatar,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 32));
        __x = TrialAvatar::getTrialAvatarId(v7);
        std::vector<unsigned int>::push_back((std::vector<unsigned int> *const)(v2 + 64), &__x);
      }
    }
    std::shared_ptr<TrialAvatar>::~shared_ptr((std::shared_ptr<TrialAvatar> *const)(v2 + 32));
    std::_Rb_tree_const_iterator<unsigned long>::operator++(&__for_begin);
  }
  __for_range_0 = (std::vector<unsigned int> *)(v2 + 64);
  __for_begin._M_node = (std::_Rb_tree_const_iterator<long unsigned int>::_Base_ptr)std::vector<unsigned int>::begin((std::vector<unsigned int> *const)(v2 + 64))._M_current;
  __for_end._M_node = (std::_Rb_tree_const_iterator<long unsigned int>::_Base_ptr)std::vector<unsigned int>::end(__for_range_0)._M_current;
  while ( __gnu_cxx::operator!=<unsigned int *,std::vector<unsigned int>>(
            (const __gnu_cxx::__normal_iterator<unsigned int*,std::vector<unsigned int> > *)&__for_begin,
            (const __gnu_cxx::__normal_iterator<unsigned int*,std::vector<unsigned int> > *)&__for_end) )
  {
    v8 = __gnu_cxx::__normal_iterator<unsigned int *,std::vector<unsigned int>>::operator*((const __gnu_cxx::__normal_iterator<unsigned int*,std::vector<unsigned int> > *const)&__for_begin);
    v9 = v8;
    if ( *(_BYTE *)(((unsigned __int64)v8 >> 3) + 0x7FFF8000) != 0
      && (char)(((unsigned __int8)v8 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)v8 >> 3) + 0x7FFF8000) )
    {
      __asan_report_load4(v8);
    }
    del_id = *v9;
    PlayerAvatarComp::delTrialAvatar(this, del_id, is_notify);
    __gnu_cxx::__normal_iterator<unsigned int *,std::vector<unsigned int>>::operator++((__gnu_cxx::__normal_iterator<unsigned int*,std::vector<unsigned int> > *const)&__for_begin);
  }
  std::vector<unsigned int>::~vector((std::vector<unsigned int> *const)(v2 + 64));
  if ( v17 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
};

// Line 3928: range 000000001718849A-000000001718901A
__int64 __fastcall PlayerAvatarComp::avatarChangeElementType(
        PlayerAvatarComp *const this,
        uint32_t scene_id,
        uint32_t area_id)
{
  unsigned __int64 v3; // r12
  __int64 v4; // rax
  _DWORD *v5; // r13
  common::milog::MiLogStream *v6; // r14
  unsigned int v7; // r14d
  std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v8; // rax
  common::milog::MiLogStream *v9; // rax
  common::milog::MiLogStream *v10; // rax
  common::milog::MiLogStream *v11; // rax
  common::milog::MiLogStream *v12; // r14
  std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v13; // rax
  common::milog::MiLogStream *v14; // rax
  common::milog::MiLogStream *v15; // r14
  std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v16; // rax
  common::milog::MiLogStream *v17; // rax
  common::milog::MiLogStream *v18; // rax
  Scene *v19; // rax
  common::milog::MiLogStream *v20; // r14
  common::milog::MiLogStream *v21; // rax
  common::milog::MiLogStream *v22; // rax
  common::milog::MiLogStream *v23; // rax
  std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v24; // rax
  common::milog::MiLogStream *v25; // rax
  common::milog::MiLogStream *v26; // rax
  common::milog::MiLogStream *v27; // rax
  common::milog::MiLogStream *v28; // rax
  common::milog::MiLogStream *v29; // rax
  unsigned __int64 v30; // rax
  unsigned __int64 v31; // rdx
  common::milog::MiLogStream *v32; // r14
  std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v33; // rax
  common::milog::MiLogStream *v34; // r14
  std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v35; // rax
  Avatar *v36; // rcx
  __int64 result; // rax
  unsigned int SceneId; // [rsp+10h] [rbp-E0h] BYREF
  unsigned int val; // [rsp+14h] [rbp-DCh] BYREF
  PlayerSceneComp *scene_cmp; // [rsp+18h] [rbp-D8h]
  const data::WorldAreaConfig *area_config_ptr; // [rsp+20h] [rbp-D0h]
  const data::AvatarExcelConfig *avatar_config_ptr; // [rsp+28h] [rbp-C8h]
  std::shared_ptr<Config> v44; // [rsp+30h] [rbp-C0h] BYREF
  common::milog::MiLogStream v45; // [rsp+40h] [rbp-B0h] BYREF
  char v46[144]; // [rsp+60h] [rbp-90h] BYREF

  v3 = (unsigned __int64)v46;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_1(96LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "3 32 4 13 scene_id:3927 48 4 12 area_id:3927 64 16 14 scene_ptr:3930";
  *(_QWORD *)(v3 + 16) = PlayerAvatarComp::avatarChangeElementType;
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = -234556924;
  v5[536862722] = -202178560;
  *(_DWORD *)(v3 + 32) = scene_id;
  *(_DWORD *)(v3 + 48) = area_id;
  if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
    __asan_report_load8(&this->player_);
  scene_cmp = Player::getSceneComp(this->player_);
  PlayerSceneComp::getCurScene((const PlayerSceneComp *const)(v3 + 64));
  if ( std::operator==<Scene>((const std::shared_ptr<Scene> *)(v3 + 64), 0LL) )
  {
    common::milog::MiLogStream::create(
      &v45,
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/player/avatar/player_avatar_comp.cpp",
      "avatarChangeElementType",
      3933);
    v6 = common::milog::MiLogStream::operator<<<char [25],(char *[25])0>(
           &v45,
           (const char (*)[25])"getCurScene failed, uid:");
    if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
      __asan_report_load8(&this->player_);
    val = Player::getUid(this->player_);
    common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v6, &val);
    common::milog::MiLogStream::~MiLogStream(&v45);
    v7 = -1;
  }
  else
  {
    v8 = std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 64));
    if ( Scene::getSceneId(v8) == *(_DWORD *)(v3 + 32) )
    {
      v16 = std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 64));
      if ( Scene::getSceneType(v16) == SCENE_WORLD )
      {
        v19 = std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 64));
        if ( !Scene::isAreaUnlocked(v19, *(_DWORD *)(v3 + 48)) )
        {
          common::milog::MiLogStream::create(
            &v45,
            &common::milog::MiLogDefault::default_log_obj_,
            3u,
            "./src/player/avatar/player_avatar_comp.cpp",
            "avatarChangeElementType",
            3948);
          v20 = common::milog::MiLogStream::operator<<<char [6],(char *[6])0>(&v45, (const char (*)[6])"uid: ");
          if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
            __asan_report_load8(&this->player_);
          val = Player::getUid(this->player_);
          v21 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v20, &val);
          v22 = common::milog::MiLogStream::operator<<<char [11],(char *[11])0>(v21, (const char (*)[11])" area_id: ");
          v23 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                  v22,
                  (const unsigned int *)(v3 + 48));
          common::milog::MiLogStream::operator<<<char [22],(char *[22])0>(
            v23,
            (const char (*)[22])" isAreaUnlocked false");
          common::milog::MiLogStream::~MiLogStream(&v45);
          v7 = 508;
        }
        else
        {
          ServiceBox::findService<GameserverService>();
          GameserverService::getConfig((GameserverService *const)&v44);
          v24 = std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false> *const)&v44);
          area_config_ptr = WorldAreaExcelConfigMgr::findFirstLevelWorldAreaConfig(
                              &v24->design_config.txt_config_mgr.world_area_config_mgr,
                              *(_DWORD *)(v3 + 48));
          std::shared_ptr<Config>::~shared_ptr(&v44);
          if ( area_config_ptr )
          {
            if ( *(_BYTE *)(((unsigned __int64)&area_config_ptr->area_type >> 3) + 0x7FFF8000) != 0
              && *(_BYTE *)(((unsigned __int64)&area_config_ptr->area_type >> 3) + 0x7FFF8000) <= 3 )
            {
              __asan_report_load4(&area_config_ptr->area_type);
            }
            if ( area_config_ptr->area_type == LEVEL_1 )
            {
              if ( *(_BYTE *)(((unsigned __int64)&area_config_ptr->element_type >> 3) + 0x7FFF8000) != 0
                && (char)((((_BYTE)area_config_ptr + 36) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&area_config_ptr->element_type >> 3)
                                                                               + 0x7FFF8000) )
              {
                __asan_report_load4(&area_config_ptr->element_type);
              }
              if ( area_config_ptr->element_type )
              {
                if ( std::operator==<Avatar>(&this->cur_avatar_ptr_, 0LL) )
                {
                  common::milog::MiLogStream::create(
                    &v45,
                    &common::milog::MiLogDefault::default_log_obj_,
                    3u,
                    "./src/player/avatar/player_avatar_comp.cpp",
                    "avatarChangeElementType",
                    3970);
                  common::milog::MiLogStream::operator<<<char [27],(char *[27])0>(
                    &v45,
                    (const char (*)[27])"cur_avatar_ptr_ is nullptr");
                  common::milog::MiLogStream::~MiLogStream(&v45);
                  v7 = -1;
                }
                else
                {
                  v30 = (unsigned __int64)std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false> *const)&this->cur_avatar_ptr_);
                  if ( *(_BYTE *)((v30 >> 3) + 0x7FFF8000) )
                    v30 = __asan_report_load8(v30);
                  v31 = *(_QWORD *)v30 + 312LL;
                  if ( *(_BYTE *)((v31 >> 3) + 0x7FFF8000) )
                    v30 = __asan_report_load8(*(_QWORD *)v30 + 312LL);
                  avatar_config_ptr = (const data::AvatarExcelConfig *)(*(__int64 (__fastcall **)(unsigned __int64))v31)(v30);
                  if ( avatar_config_ptr )
                  {
                    if ( *(_BYTE *)(((unsigned __int64)&avatar_config_ptr->avatar_identity_type >> 3) + 0x7FFF8000) != 0
                      && *(_BYTE *)(((unsigned __int64)&avatar_config_ptr->avatar_identity_type >> 3) + 0x7FFF8000) <= 3 )
                    {
                      __asan_report_load4(&avatar_config_ptr->avatar_identity_type);
                    }
                    if ( avatar_config_ptr->avatar_identity_type )
                    {
                      common::milog::MiLogStream::create(
                        &v45,
                        &common::milog::MiLogDefault::default_log_obj_,
                        3u,
                        "./src/player/avatar/player_avatar_comp.cpp",
                        "avatarChangeElementType",
                        3982);
                      v34 = common::milog::MiLogStream::operator<<<char [63],(char *[63])0>(
                              &v45,
                              (const char (*)[63])"avatar_identity_type is not AVATAR_IDENTITY_MASTER, avatar_id:");
                      v35 = std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false> *const)&this->cur_avatar_ptr_);
                      val = Avatar::getAvatarId(v35);
                      common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v34, &val);
                      common::milog::MiLogStream::~MiLogStream(&v45);
                      v7 = -1;
                    }
                    else
                    {
                      v36 = std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false> *const)&this->cur_avatar_ptr_);
                      if ( *(_BYTE *)(((unsigned __int64)&area_config_ptr->element_type >> 3) + 0x7FFF8000) != 0
                        && (char)((((_BYTE)area_config_ptr + 36) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&area_config_ptr->element_type >> 3)
                                                                                       + 0x7FFF8000) )
                      {
                        __asan_report_load4(&area_config_ptr->element_type);
                      }
                      v7 = Avatar::changeElemType(v36, area_config_ptr->element_type);
                    }
                  }
                  else
                  {
                    common::milog::MiLogStream::create(
                      &v45,
                      &common::milog::MiLogDefault::default_log_obj_,
                      3u,
                      "./src/player/avatar/player_avatar_comp.cpp",
                      "avatarChangeElementType",
                      3976);
                    v32 = common::milog::MiLogStream::operator<<<char [38],(char *[38])0>(
                            &v45,
                            (const char (*)[38])"find avatar_config failed avatar_id: ");
                    v33 = std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false> *const)&this->cur_avatar_ptr_);
                    val = Avatar::getAvatarId(v33);
                    common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v32, &val);
                    common::milog::MiLogStream::~MiLogStream(&v45);
                    v7 = -1;
                  }
                }
              }
              else
              {
                common::milog::MiLogStream::create(
                  &v45,
                  &common::milog::MiLogDefault::default_log_obj_,
                  3u,
                  "./src/player/avatar/player_avatar_comp.cpp",
                  "avatarChangeElementType",
                  3964);
                v28 = common::milog::MiLogStream::operator<<<char [10],(char *[10])0>(
                        &v45,
                        (const char (*)[10])"area_id: ");
                v29 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                        v28,
                        (const unsigned int *)(v3 + 48));
                common::milog::MiLogStream::operator<<<char [22],(char *[22])0>(
                  v29,
                  (const char (*)[22])" element_type is None");
                common::milog::MiLogStream::~MiLogStream(&v45);
                v7 = -1;
              }
            }
            else
            {
              common::milog::MiLogStream::create(
                &v45,
                &common::milog::MiLogDefault::default_log_obj_,
                3u,
                "./src/player/avatar/player_avatar_comp.cpp",
                "avatarChangeElementType",
                3959);
              v26 = common::milog::MiLogStream::operator<<<char [10],(char *[10])0>(
                      &v45,
                      (const char (*)[10])"area_id: ");
              v27 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                      v26,
                      (const unsigned int *)(v3 + 48));
              common::milog::MiLogStream::operator<<<char [21],(char *[21])0>(v27, (const char (*)[21])off_260402E0);
              common::milog::MiLogStream::~MiLogStream(&v45);
              v7 = -1;
            }
          }
          else
          {
            common::milog::MiLogStream::create(
              &v45,
              &common::milog::MiLogDefault::default_log_obj_,
              3u,
              "./src/player/avatar/player_avatar_comp.cpp",
              "avatarChangeElementType",
              3954);
            v25 = common::milog::MiLogStream::operator<<<char [46],(char *[46])0>(
                    &v45,
                    (const char (*)[46])"findFirstLevelWorldAreaConfig fail, area_id: ");
            common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v25, (const unsigned int *)(v3 + 48));
            common::milog::MiLogStream::~MiLogStream(&v45);
            v7 = -1;
          }
        }
      }
      else
      {
        common::milog::MiLogStream::create(
          &v45,
          &common::milog::MiLogDefault::default_log_obj_,
          3u,
          "./src/player/avatar/player_avatar_comp.cpp",
          "avatarChangeElementType",
          3943);
        v17 = common::milog::MiLogStream::operator<<<char [10],(char *[10])0>(&v45, (const char (*)[10])"scene_id ");
        v18 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                v17,
                (const unsigned int *)(v3 + 32));
        common::milog::MiLogStream::operator<<<char [31],(char *[31])0>(v18, (const char (*)[31])off_26040180);
        common::milog::MiLogStream::~MiLogStream(&v45);
        v7 = -1;
      }
    }
    else
    {
      common::milog::MiLogStream::create(
        &v45,
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/player/avatar/player_avatar_comp.cpp",
        "avatarChangeElementType",
        3938);
      v9 = common::milog::MiLogStream::operator<<<char [26],(char *[26])0>(
             &v45,
             (const char (*)[26])"scene_id is not cur_scene");
      v10 = common::milog::MiLogStream::operator<<<char [11],(char *[11])0>(v9, (const char (*)[11])" scene_id:");
      v11 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v10, (const unsigned int *)(v3 + 32));
      v12 = common::milog::MiLogStream::operator<<<char [19],(char *[19])0>(
              v11,
              (const char (*)[19])" current scene_id:");
      v13 = std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 64));
      SceneId = Scene::getSceneId(v13);
      v14 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v12, &SceneId);
      v15 = common::milog::MiLogStream::operator<<<char [6],(char *[6])0>(v14, (const char (*)[6])" uid:");
      if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
        __asan_report_load8(&this->player_);
      val = Player::getUid(this->player_);
      common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v15, &val);
      common::milog::MiLogStream::~MiLogStream(&v45);
      v7 = -1;
    }
  }
  std::shared_ptr<Scene>::~shared_ptr((std::shared_ptr<Scene> *const)(v3 + 64));
  result = v7;
  if ( v46 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8008) = 0;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8008) = -168430091;
  }
  return result;
};

// Line 3990: range 000000001718901C-0000000017189389
int32_t __cdecl PlayerAvatarComp::emplaceAvatar(PlayerAvatarComp *const this, AvatarPtr *p_avatar_ptr)
{
  common::milog::MiLogStream *v2; // rbx
  std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v4; // rax
  std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v5; // rax
  unsigned __int64 *v6; // rcx
  std::shared_ptr<Avatar> *v7; // r8
  std::pair<std::_Rb_tree_iterator<std::pair<long unsigned int const,std::shared_ptr<Avatar> > >,bool> v8; // rax
  common::milog::MiLogStream *v9; // rbx
  unsigned __int64 v10; // rax
  unsigned __int64 v11; // rdx
  std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v12; // rax
  unsigned int val; // [rsp+14h] [rbp-3Ch] BYREF
  std::set<long unsigned int>::value_type __x; // [rsp+18h] [rbp-38h] BYREF
  common::milog::MiLogStream v15; // [rsp+20h] [rbp-30h] BYREF

  if ( std::operator==<Avatar>(p_avatar_ptr, 0LL) )
  {
    common::milog::MiLogStream::create(
      &v15,
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/player/avatar/player_avatar_comp.cpp",
      "emplaceAvatar",
      3993);
    v2 = common::milog::MiLogStream::operator<<<char [28],(char *[28])0>(
           &v15,
           (const char (*)[28])"avatar_ptr is nullptr, uid:");
    if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
      __asan_report_load8(&this->player_);
LABEL_4:
    val = Player::getUid(this->player_);
    common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v2, &val);
    common::milog::MiLogStream::~MiLogStream(&v15);
    return -1;
  }
  v4 = std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false> *const)p_avatar_ptr);
  if ( !Avatar::getGuid(v4) )
  {
    common::milog::MiLogStream::create(
      &v15,
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/player/avatar/player_avatar_comp.cpp",
      "emplaceAvatar",
      3999);
    v2 = common::milog::MiLogStream::operator<<<char [27],(char *[27])0>(
           &v15,
           (const char (*)[27])"avatar_ptr guid is 0, uid:");
    if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
      __asan_report_load8(&this->player_);
    goto LABEL_4;
  }
  v5 = std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false> *const)p_avatar_ptr);
  __x = Avatar::getGuid(v5);
  v8 = std::map<unsigned long,std::shared_ptr<Avatar>>::emplace<unsigned long,std::shared_ptr<Avatar>&>(
         &this->avatar_map_,
         &__x,
         p_avatar_ptr,
         v6,
         v7);
  if ( v8.second )
  {
    v10 = (unsigned __int64)std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false> *const)p_avatar_ptr);
    if ( *(_BYTE *)((v10 >> 3) + 0x7FFF8000) )
      v10 = __asan_report_load8(v10);
    v11 = *(_QWORD *)v10 + 400LL;
    if ( *(_BYTE *)((v11 >> 3) + 0x7FFF8000) )
      v10 = __asan_report_load8(*(_QWORD *)v10 + 400LL);
    if ( (*(unsigned int (__fastcall **)(unsigned __int64))v11)(v10) == 2 )
    {
      v12 = std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false> *const)p_avatar_ptr);
      __x = Avatar::getGuid(v12);
      std::set<unsigned long>::insert(&this->trial_avatar_guid_set_, &__x);
    }
    return 0;
  }
  else
  {
    common::milog::MiLogStream::create(
      &v15,
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/player/avatar/player_avatar_comp.cpp",
      "emplaceAvatar",
      4005);
    v9 = common::milog::MiLogStream::operator<<<char [28],(char *[28])0>(
           &v15,
           (const char (*)[28])"emplace Avatar failed, uid:");
    if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
      __asan_report_load8(&this->player_);
    val = Player::getUid(this->player_);
    common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v9, &val);
    common::milog::MiLogStream::~MiLogStream(&v15);
    return -1;
  }
};

// Line 4020: range 000000001718938A-0000000017189B93
PlayerAvatarComp *__fastcall PlayerAvatarComp::createAvatar(
        PlayerAvatarComp *const this,
        __int64 avatar_type,
        uint32_t avatar_id,
        uint64_t avatar_guid,
        uint64_t a5)
{
  unsigned __int64 v5; // r12
  __int64 v6; // rax
  _DWORD *v7; // r13
  unsigned int v8; // eax
  common::milog::MiLogStream *v9; // rax
  common::milog::MiLogStream *v10; // rax
  common::milog::MiLogStream *v11; // rcx
  common::milog::MiLogStream *v12; // rax
  common::milog::MiLogStream *v13; // rax
  common::milog::MiLogStream *v14; // rax
  common::milog::MiLogStream *v15; // rax
  common::milog::MiLogStream *v16; // r14
  unsigned __int64 v17; // rax
  unsigned __int64 v18; // rdx
  common::milog::MiLogStream *v19; // rax
  common::milog::MiLogStream *v20; // rax
  common::milog::MiLogStream *v21; // rax
  common::milog::MiLogStream *v22; // rax
  PlayerBasicComp *BasicComp; // rax
  common::milog::MiLogStream *v24; // rax
  common::milog::MiLogStream *v25; // rax
  common::milog::MiLogStream *v26; // rax
  common::milog::MiLogStream *v27; // rax
  Avatar *v28; // rax
  Avatar *v29; // r14
  Avatar *v30; // r14
  uint32_t Now; // eax
  int v34; // [rsp+8h] [rbp-118h]
  unsigned int val; // [rsp+2Ch] [rbp-F4h] BYREF
  std::shared_ptr<FormalAvatar> __r; // [rsp+30h] [rbp-F0h] BYREF
  std::shared_ptr<TrialAvatar> v38; // [rsp+40h] [rbp-E0h] BYREF
  std::shared_ptr<MirrorAvatar> v39; // [rsp+50h] [rbp-D0h] BYREF
  PlayerPtr p_player_ptr; // [rsp+60h] [rbp-C0h] BYREF
  common::milog::MiLogStream v41; // [rsp+70h] [rbp-B0h] BYREF
  char v42[144]; // [rsp+90h] [rbp-90h] BYREF

  v34 = avatar_guid;
  v5 = (unsigned __int64)v42;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v6 = __asan_stack_malloc_1(96LL);
    if ( v6 )
      v5 = v6;
  }
  *(_QWORD *)v5 = 1102416563LL;
  *(_QWORD *)(v5 + 8) = "3 32 4 16 avatar_type:4019 48 4 14 avatar_id:4019 64 16 15 avatar_ptr:4021";
  *(_QWORD *)(v5 + 16) = PlayerAvatarComp::createAvatar;
  v7 = (_DWORD *)(v5 >> 3);
  v7[536862720] = -235802127;
  v7[536862721] = -234556924;
  v7[536862722] = -202178560;
  *(_DWORD *)(v5 + 32) = avatar_id;
  *(_DWORD *)(v5 + 48) = v34;
  *(_QWORD *)(v5 + 64) = 0LL;
  *(_QWORD *)(v5 + 72) = 0LL;
  v8 = *(_DWORD *)(v5 + 32);
  if ( v8 == 3 )
  {
    common::tools::perf::make_shared<MirrorAvatar,unsigned int &>((unsigned int *)&v39, (unsigned int *)(v5 + 48));
    std::shared_ptr<Avatar>::operator=<MirrorAvatar>((std::shared_ptr<Avatar> *const)(v5 + 64), &v39);
    std::shared_ptr<MirrorAvatar>::~shared_ptr(&v39);
  }
  else
  {
    if ( v8 > 3 )
      goto LABEL_12;
    if ( v8 == 1 )
    {
      common::tools::perf::make_shared<FormalAvatar,unsigned int &>((unsigned int *)&__r, (unsigned int *)(v5 + 48));
      std::shared_ptr<Avatar>::operator=<FormalAvatar>((std::shared_ptr<Avatar> *const)(v5 + 64), &__r);
      std::shared_ptr<FormalAvatar>::~shared_ptr(&__r);
      goto LABEL_15;
    }
    if ( v8 == 2 )
    {
      common::tools::perf::make_shared<TrialAvatar,unsigned int &>((unsigned int *)&v38, (unsigned int *)(v5 + 48));
      std::shared_ptr<Avatar>::operator=<TrialAvatar>((std::shared_ptr<Avatar> *const)(v5 + 64), &v38);
      std::shared_ptr<TrialAvatar>::~shared_ptr(&v38);
    }
    else
    {
LABEL_12:
      common::milog::MiLogStream::create(
        &v41,
        &common::milog::MiLogDefault::default_log_obj_,
        4u,
        "./src/player/avatar/player_avatar_comp.cpp",
        "createAvatar",
        4034);
      v9 = common::milog::MiLogStream::operator<<<char [21],(char *[21])0>(
             &v41,
             (const char (*)[21])"unknown avatar_type:");
      v10 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v9, (const unsigned int *)(v5 + 32));
      v11 = common::milog::MiLogStream::operator<<<char [9],(char *[9])0>(v10, (const char (*)[9])" player:");
      if ( *(_BYTE *)(((unsigned __int64)(avatar_type + 24) >> 3) + 0x7FFF8000) )
        __asan_report_load8(avatar_type + 24);
      operator<<(v11, *(const Player **)(avatar_type + 24));
      common::milog::MiLogStream::~MiLogStream(&v41);
    }
  }
LABEL_15:
  if ( std::operator==<Avatar>((const std::shared_ptr<Avatar> *)(v5 + 64), 0LL) )
  {
    common::milog::MiLogStream::create(
      &v41,
      &common::milog::MiLogDefault::default_log_obj_,
      4u,
      "./src/player/avatar/player_avatar_comp.cpp",
      "createAvatar",
      4039);
    v12 = common::milog::MiLogStream::operator<<<char [33],(char *[33])0>(
            &v41,
            (const char (*)[33])"createvatar failed, avatar_type:");
    v13 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v12, (const unsigned int *)(v5 + 32));
    v14 = common::milog::MiLogStream::operator<<<char [12],(char *[12])0>(v13, (const char (*)[12])" avatar_id:");
    v15 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v14, (const unsigned int *)(v5 + 48));
    v16 = common::milog::MiLogStream::operator<<<char [6],(char *[6])0>(v15, (const char (*)[6])" uid:");
    if ( *(_BYTE *)(((unsigned __int64)(avatar_type + 24) >> 3) + 0x7FFF8000) )
      __asan_report_load8(avatar_type + 24);
LABEL_34:
    val = Player::getUid(*(const Player *const *)(avatar_type + 24));
    common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v16, &val);
    common::milog::MiLogStream::~MiLogStream(&v41);
    std::shared_ptr<Avatar>::shared_ptr((std::shared_ptr<Avatar> *const)this, 0LL);
    goto LABEL_38;
  }
  v17 = (unsigned __int64)std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v5 + 64));
  if ( *(_BYTE *)((v17 >> 3) + 0x7FFF8000) )
    v17 = __asan_report_load8(v17);
  v18 = *(_QWORD *)v17 + 416LL;
  if ( *(_BYTE *)((v18 >> 3) + 0x7FFF8000) )
    v17 = __asan_report_load8(*(_QWORD *)v17 + 416LL);
  if ( (*(unsigned int (__fastcall **)(unsigned __int64))v18)(v17) )
  {
    common::milog::MiLogStream::create(
      &v41,
      &common::milog::MiLogDefault::default_log_obj_,
      4u,
      "./src/player/avatar/player_avatar_comp.cpp",
      "createAvatar",
      4044);
    v19 = common::milog::MiLogStream::operator<<<char [43],(char *[43])0>(
            &v41,
            (const char (*)[43])"avatar constructComps failed, avatar_type:");
    v20 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v19, (const unsigned int *)(v5 + 32));
    v21 = common::milog::MiLogStream::operator<<<char [12],(char *[12])0>(v20, (const char (*)[12])" avatar_id:");
    v22 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v21, (const unsigned int *)(v5 + 48));
    v16 = common::milog::MiLogStream::operator<<<char [6],(char *[6])0>(v22, (const char (*)[6])" uid:");
    if ( *(_BYTE *)(((unsigned __int64)(avatar_type + 24) >> 3) + 0x7FFF8000) )
      __asan_report_load8(avatar_type + 24);
    goto LABEL_34;
  }
  if ( !a5 )
  {
    if ( *(_BYTE *)(((unsigned __int64)(avatar_type + 24) >> 3) + 0x7FFF8000) )
      __asan_report_load8(avatar_type + 24);
    BasicComp = Player::getBasicComp(*(Player *const *)(avatar_type + 24));
    a5 = PlayerBasicComp::genGuid(BasicComp, GUID_AVATAR);
  }
  if ( !a5 )
  {
    common::milog::MiLogStream::create(
      &v41,
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/player/avatar/player_avatar_comp.cpp",
      "createAvatar",
      4054);
    v24 = common::milog::MiLogStream::operator<<<char [29],(char *[29])0>(
            &v41,
            (const char (*)[29])"genGuid failed, avatar_type:");
    v25 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v24, (const unsigned int *)(v5 + 32));
    v26 = common::milog::MiLogStream::operator<<<char [12],(char *[12])0>(v25, (const char (*)[12])" avatar_id:");
    v27 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v26, (const unsigned int *)(v5 + 48));
    v16 = common::milog::MiLogStream::operator<<<char [6],(char *[6])0>(v27, (const char (*)[6])" uid:");
    if ( *(_BYTE *)(((unsigned __int64)(avatar_type + 24) >> 3) + 0x7FFF8000) )
      __asan_report_load8(avatar_type + 24);
    goto LABEL_34;
  }
  v28 = std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v5 + 64));
  Avatar::setGuid(v28, a5);
  v29 = std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v5 + 64));
  if ( *(_BYTE *)(((unsigned __int64)(avatar_type + 24) >> 3) + 0x7FFF8000) )
    __asan_report_load8(avatar_type + 24);
  toPtr<Player,Player>((Player *)&p_player_ptr);
  Avatar::setPlayer(v29, &p_player_ptr);
  std::shared_ptr<Player>::~shared_ptr(&p_player_ptr);
  v30 = std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v5 + 64));
  Now = common::tools::TimeUtils::getNow();
  Avatar::setBornTime(v30, Now);
  std::shared_ptr<Avatar>::shared_ptr((std::shared_ptr<Avatar> *const)this, (std::shared_ptr<Avatar> *)(v5 + 64));
LABEL_38:
  std::shared_ptr<Avatar>::~shared_ptr((std::shared_ptr<Avatar> *const)(v5 + 64));
  if ( v42 == (char *)v5 )
  {
    *(_QWORD *)((v5 >> 3) + 0x7FFF8000) = 0LL;
    *(_DWORD *)((v5 >> 3) + 0x7FFF8008) = 0;
  }
  else
  {
    *(_QWORD *)v5 = 1172321806LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v5 >> 3) + 0x7FFF8008) = -168430091;
  }
  return this;
};

// Line 4065: range 0000000017189B94-0000000017189BB3
uint32_t __cdecl PlayerAvatarComp::getMonsterAlertCount(PlayerAvatarComp *const this)
{
  return std::set<unsigned int>::size(&this->alert_monster_set_);
};

// Line 4071: range 0000000017189BB4-0000000017189C85
bool __fastcall PlayerAvatarComp::isMonsterExitInAlertSet(PlayerAvatarComp *const this, uint32_t monster_entity_id)
{
  unsigned __int64 v2; // rbx
  __int64 v3; // rax
  unsigned __int64 v4; // r12
  bool result; // al
  char v6[96]; // [rsp+10h] [rbp-60h] BYREF

  v2 = (unsigned __int64)v6;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_0(64LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "1 32 4 22 monster_entity_id:4070";
  *(_QWORD *)(v2 + 16) = PlayerAvatarComp::isMonsterExitInAlertSet;
  v4 = v2 >> 3;
  *(_DWORD *)(v4 + 2147450880) = -235802127;
  *(_DWORD *)(v4 + 2147450884) = -202116348;
  *(_DWORD *)(v2 + 32) = monster_entity_id;
  result = common::tools::MiscUtils::isContains<std::set<unsigned int>,unsigned int>(
             &this->alert_monster_set_,
             (const unsigned int *)(v2 + 32));
  if ( v6 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 4078: range 0000000017189C86-0000000017189D2C
void __cdecl PlayerAvatarComp::getDiffMonsterAlertSet(
        PlayerAvatarComp *const this,
        const std::set<unsigned int> *new_alert_set,
        std::set<unsigned int> *new_set_have_not)
{
  std::set<unsigned int>::iterator __for_begin; // [rsp+20h] [rbp-20h] BYREF
  std::set<unsigned int>::iterator __for_end; // [rsp+28h] [rbp-18h] BYREF
  std::set<unsigned int> *__for_range; // [rsp+30h] [rbp-10h]
  const unsigned int *monster_id; // [rsp+38h] [rbp-8h]

  __for_range = &this->alert_monster_set_;
  __for_begin._M_node = std::set<unsigned int>::begin(&this->alert_monster_set_)._M_node;
  __for_end._M_node = std::set<unsigned int>::end(&this->alert_monster_set_)._M_node;
  while ( std::operator!=(&__for_begin, &__for_end) )
  {
    monster_id = std::_Rb_tree_const_iterator<unsigned int>::operator*(&__for_begin);
    if ( !common::tools::MiscUtils::isContains<std::set<unsigned int> const,unsigned int>(new_alert_set, monster_id) )
      std::set<unsigned int>::insert(new_set_have_not, monster_id);
    std::_Rb_tree_const_iterator<unsigned int>::operator++(&__for_begin);
  }
};

// Line 4091: range 0000000017189D2E-000000001718A3A9
void __fastcall PlayerAvatarComp::onMonsterAlertChange(
        PlayerAvatarComp *const this,
        bool is_alert,
        std::__shared_ptr_access<Monster,(__gnu_cxx::_Lock_policy)2,false,false> *p_monster_ptr,
        uint32_t monster_entity_id,
        uint32_t combat_end_reason,
        const ChangeHpContext *change_hp_context_ptr)
{
  unsigned __int64 v6; // r12
  __int64 v7; // rax
  _DWORD *v8; // rbx
  uint32_t Uid; // eax
  __int64 v11; // rax
  __int64 v12; // r14
  time_t Now; // rax
  __int64 v14; // rax
  __int64 v15; // rax
  Monster *v16; // rax
  PlayerEventComp *EventComp; // r14
  std::__shared_ptr_access<Monster,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v19; // rax
  PlayerEventComp *v20; // r13
  common::milog::MiLogStream *v21; // r13
  unsigned __int64 val; // [rsp+38h] [rbp-278h] BYREF
  std::shared_ptr<Monster> v27; // [rsp+40h] [rbp-270h] BYREF
  std::shared_ptr<BaseEvent> p_event_ptr; // [rsp+50h] [rbp-260h] BYREF
  common::milog::MiLogStream v29; // [rsp+60h] [rbp-250h] BYREF
  char v30[560]; // [rsp+80h] [rbp-230h] BYREF

  v6 = (unsigned __int64)v30;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v7 = __asan_stack_malloc_3(512LL);
    if ( v7 )
      v6 = v7;
  }
  *(_QWORD *)v6 = 1102416563LL;
  *(_QWORD *)(v6 + 8) = "2 32 4 22 monster_entity_id:4089 48 392 7 ss:4097";
  *(_QWORD *)(v6 + 16) = PlayerAvatarComp::onMonsterAlertChange;
  v8 = (_DWORD *)(v6 >> 3);
  v8[536862720] = -235802127;
  v8[536862721] = 61956;
  v8[536862733] = -218103808;
  v8[536862734] = -202116109;
  v8[536862735] = -202116109;
  *(_DWORD *)(v6 + 32) = monster_entity_id;
  if ( is_alert )
  {
    if ( std::set<unsigned int>::empty(&this->alert_monster_set_)
      && std::operator!=<Monster>((const std::shared_ptr<Monster> *)p_monster_ptr, 0LL) )
    {
      std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream(v6 + 48);
      if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
        __asan_report_load8(&this->player_);
      Uid = Player::getUid(this->player_);
      v11 = std::ostream::operator<<(v6 + 64, Uid);
      v12 = std::operator<<<std::char_traits<char>>(v11, "-");
      Now = common::tools::TimeUtils::getNow();
      v14 = std::ostream::operator<<(v12, Now);
      v15 = std::operator<<<std::char_traits<char>>(v14, "-");
      std::ostream::operator<<(
        v15,
        ++PlayerAvatarComp::onMonsterAlertChange(bool,std::shared_ptr<Monster>,unsigned int,unsigned int,ChangeHpContext const*)::transaction_id);
      std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::str(&v29, v6 + 48);
      std::string::operator=(&this->cur_combat_transaction_, &v29);
      std::string::~string(&v29);
      if ( *(char *)(((unsigned __int64)&this->is_changed_equip_ >> 3) + 0x7FFF8000) < 0 )
        __asan_report_store1(&this->is_changed_equip_, &v29, &this->is_changed_equip_);
      this->is_changed_equip_ = 0;
      v16 = std::__shared_ptr_access<Monster,(__gnu_cxx::_Lock_policy)2,false,false>::operator*(p_monster_ptr);
      PlayerAvatarComp::logCombatStart(this, v16);
      if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
        __asan_report_load8(&this->player_);
      EventComp = Player::getEventComp(this->player_);
      common::tools::perf::make_shared<EnterCombatEvent,std::shared_ptr<Monster> &>(
        &v27,
        (std::shared_ptr<Monster> *)p_monster_ptr);
      std::shared_ptr<BaseEvent>::shared_ptr<EnterCombatEvent,void>(
        &p_event_ptr,
        (std::shared_ptr<EnterCombatEvent> *)&v27);
      PlayerEventComp::notifyEvent(EventComp, &p_event_ptr);
      std::shared_ptr<BaseEvent>::~shared_ptr(&p_event_ptr);
      std::shared_ptr<EnterCombatEvent>::~shared_ptr((std::shared_ptr<EnterCombatEvent> *const)&v27);
      std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream(v6 + 48);
    }
    std::set<unsigned int>::insert(&this->alert_monster_set_, (const std::set<unsigned int>::value_type *)(v6 + 32));
  }
  else if ( !std::set<unsigned int>::empty(&this->alert_monster_set_) )
  {
    std::set<unsigned int>::erase(&this->alert_monster_set_, (const std::set<unsigned int>::key_type *)(v6 + 32));
    if ( std::set<unsigned int>::empty(&this->alert_monster_set_) )
    {
      if ( std::operator!=<Monster>(0LL, (const std::shared_ptr<Monster> *)p_monster_ptr) && change_hp_context_ptr )
      {
        v19 = std::__shared_ptr_access<Monster,(__gnu_cxx::_Lock_policy)2,false,false>::operator*(p_monster_ptr);
        StatLogReporter::onCreatureDoHurt(v19, change_hp_context_ptr);
      }
      PlayerAvatarComp::logCombatEnd(this, combat_end_reason);
      std::string::clear(&this->cur_combat_transaction_);
      if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
        __asan_report_load8(&this->player_);
      v20 = Player::getEventComp(this->player_);
      common::tools::perf::make_shared<LeaveCombatEvent>();
      std::shared_ptr<BaseEvent>::shared_ptr<LeaveCombatEvent,void>(
        &p_event_ptr,
        (std::shared_ptr<LeaveCombatEvent> *)&v27);
      PlayerEventComp::notifyEvent(v20, &p_event_ptr);
      std::shared_ptr<BaseEvent>::~shared_ptr(&p_event_ptr);
      std::shared_ptr<LeaveCombatEvent>::~shared_ptr((std::shared_ptr<LeaveCombatEvent> *const)&v27);
    }
  }
  common::milog::MiLogStream::create(
    &v29,
    &common::milog::MiLogDefault::default_log_obj_,
    1u,
    "./src/player/avatar/player_avatar_comp.cpp",
    "onMonsterAlertChange",
    4123);
  v21 = common::milog::MiLogStream::operator<<<char [25],(char *[25])0>(
          &v29,
          (const char (*)[25])"alert_monster_set count:");
  val = std::set<unsigned int>::size(&this->alert_monster_set_);
  common::milog::MiLogStream::operator<<<unsigned long,(unsigned long *)0>(v21, &val);
  common::milog::MiLogStream::~MiLogStream(&v29);
  if ( v30 == (char *)v6 )
  {
    *(_QWORD *)((v6 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v6 >> 3) + 0x7FFF8034) = 0LL;
    *(_DWORD *)((v6 >> 3) + 0x7FFF803C) = 0;
  }
  else
  {
    *(_QWORD *)v6 = 1172321806LL;
    *(_QWORD *)((v6 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v6 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v6 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v6 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v6 >> 3) + 0x7FFF8020) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v6 >> 3) + 0x7FFF8028) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v6 >> 3) + 0x7FFF8030) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v6 >> 3) + 0x7FFF8038) = 0xF5F5F5F5F5F5F5F5LL;
  }
};

// Line 4129: range 000000001718A3AA-000000001718A4DB
void __cdecl PlayerAvatarComp::clearMonsterAlertCount(PlayerAvatarComp *const this)
{
  PlayerEventComp *EventComp; // rbx
  std::shared_ptr<LeaveCombatEvent> __r; // [rsp+10h] [rbp-30h] BYREF
  std::shared_ptr<BaseEvent> p_event_ptr; // [rsp+20h] [rbp-20h] BYREF

  PlayerAvatarComp::clearFromMonsterThreat(this);
  std::set<unsigned int>::clear(&this->alert_monster_set_);
  if ( (unsigned __int8)std::string::empty(&this->cur_combat_transaction_) != 1 )
  {
    PlayerAvatarComp::logCombatEnd(this, 3u);
    std::string::clear(&this->cur_combat_transaction_);
    if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
      __asan_report_load8(&this->player_);
    EventComp = Player::getEventComp(this->player_);
    common::tools::perf::make_shared<LeaveCombatEvent>();
    std::shared_ptr<BaseEvent>::shared_ptr<LeaveCombatEvent,void>(&p_event_ptr, &__r);
    PlayerEventComp::notifyEvent(EventComp, &p_event_ptr);
    std::shared_ptr<BaseEvent>::~shared_ptr(&p_event_ptr);
    std::shared_ptr<LeaveCombatEvent>::~shared_ptr(&__r);
  }
  PlayerAvatarComp::refreshAvatarHpChangeLogs(this);
  PlayerAvatarComp::refreshAvatarInfoLogs(this);
};

// Line 4143: range 000000001718A540-000000001718AD39
void __cdecl PlayerAvatarComp::clearFromMonsterThreat(PlayerAvatarComp *const this)
{
  unsigned __int64 v1; // r13
  __int64 v2; // rax
  _DWORD *v3; // r12
  PlayerSceneComp *SceneComp; // rax
  PlayerSceneComp *v5; // rax
  PlayerSceneComp *v6; // rax
  char v7; // al
  unsigned int *v8; // rax
  unsigned int *v9; // rdx
  uint32_t v10; // eax
  Entity *v11; // rax
  std::_Rb_tree_const_iterator<unsigned int>::reference v12; // rax
  _DWORD *v13; // rdx
  google::protobuf::Map<unsigned int,unsigned int>::iterator::pointer v14; // rax
  uint32_t *v15; // rdx
  unsigned __int64 v16; // rax
  unsigned __int64 v17; // rdx
  bool v18; // r14
  const google::protobuf::Map<unsigned int,unsigned int>::InnerMap *m; // rdx
  std::__shared_ptr_access<Monster,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v20; // rax
  google::protobuf::Map<unsigned int,unsigned int>::iterator v21; // [rsp+0h] [rbp-200h] BYREF
  PlayerAvatarComp *thisa; // [rsp+28h] [rbp-1D8h]
  bool is_no_threat; // [rsp+3Fh] [rbp-1C1h]
  unsigned int entity_id; // [rsp+40h] [rbp-1C0h]
  uint32_t entity_id_0; // [rsp+44h] [rbp-1BCh]
  std::set<unsigned int>::iterator __for_begin; // [rsp+48h] [rbp-1B8h] BYREF
  std::set<unsigned int>::iterator __for_end; // [rsp+50h] [rbp-1B0h] BYREF
  std::set<unsigned int>::iterator __for_begin_0; // [rsp+58h] [rbp-1A8h] BYREF
  std::set<unsigned int>::iterator __for_end_0; // [rsp+60h] [rbp-1A0h] BYREF
  std::set<unsigned int> *__for_range; // [rsp+68h] [rbp-198h]
  SceneEntityAiInfo *ai_info; // [rsp+70h] [rbp-190h]
  std::set<unsigned int> *__for_range_0; // [rsp+78h] [rbp-188h]
  std::shared_ptr<Entity> __a; // [rsp+80h] [rbp-180h] BYREF
  google::protobuf::Map<unsigned int,unsigned int>::iterator b; // [rsp+90h] [rbp-170h] BYREF
  std::function<ForeachPolicy(Avatar&)> p_func; // [rsp+B0h] [rbp-150h] BYREF
  char v36[304]; // [rsp+D0h] [rbp-130h] BYREF

  thisa = this;
  v1 = (unsigned __int64)v36;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_2(256LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "5 32 4 14 entity_id:4164 48 16 14 scene_ptr:4145 80 16 16 monster_ptr:4158 112 24 9 iter:4170 17"
                        "6 48 18 entity_id_set:4150";
  *(_QWORD *)(v1 + 16) = PlayerAvatarComp::clearFromMonsterThreat;
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = 61956;
  v3[536862722] = 62194;
  v3[536862723] = 62194;
  v3[536862724] = -218959360;
  v3[536862725] = 62194;
  v3[536862727] = -202116109;
  if ( *(_BYTE *)(((unsigned __int64)&thisa->player_ >> 3) + 0x7FFF8000) )
    __asan_report_load8(&thisa->player_);
  Player::getSceneComp(thisa->player_);
  PlayerSceneComp::getCurScene((const PlayerSceneComp *const)(v1 + 48));
  if ( std::operator==<Scene>(0LL, (const std::shared_ptr<Scene> *)(v1 + 48)) )
    goto LABEL_16;
  if ( *(_BYTE *)(((unsigned __int64)&thisa->player_ >> 3) + 0x7FFF8000) )
    __asan_report_load8(&thisa->player_);
  SceneComp = Player::getSceneComp(thisa->player_);
  if ( PlayerSceneComp::getIsClientRelogin(SceneComp) )
    goto LABEL_16;
  if ( *(_BYTE *)(((unsigned __int64)&thisa->player_ >> 3) + 0x7FFF8000) )
    __asan_report_load8(&thisa->player_);
  v5 = Player::getSceneComp(thisa->player_);
  if ( PlayerSceneComp::getIsEnterRelogin(v5) )
    goto LABEL_16;
  if ( *(_BYTE *)(((unsigned __int64)&thisa->player_ >> 3) + 0x7FFF8000) )
    __asan_report_load8(&thisa->player_);
  v6 = Player::getSceneComp(thisa->player_);
  if ( PlayerSceneComp::getDestEnterReason(v6) == ENTER_REASON_REVIVAL )
LABEL_16:
    v7 = 1;
  else
    v7 = 0;
  if ( !v7 )
  {
    std::set<unsigned int>::set((std::set<unsigned int> *const)(v1 + 176));
    std::function<ForeachPolicy ()(Avatar &)>::function<PlayerAvatarComp::clearFromMonsterThreat(void)::{lambda(Avatar &)#1},void,void>(
      &p_func,
      (PlayerAvatarComp::clearFromMonsterThreat::<lambda(Avatar&)>)(v1 + 176));
    PlayerAvatarComp::foreachMyAvatarInSceneTeam(thisa, &p_func);
    std::function<ForeachPolicy ()(Avatar &)>::~function(&p_func);
    __for_range = &thisa->alert_monster_set_;
    __for_begin._M_node = std::set<unsigned int>::begin(&thisa->alert_monster_set_)._M_node;
    __for_end._M_node = std::set<unsigned int>::end(&thisa->alert_monster_set_)._M_node;
    while ( std::operator!=(&__for_begin, &__for_end) )
    {
      v8 = (unsigned int *)std::_Rb_tree_const_iterator<unsigned int>::operator*(&__for_begin);
      v9 = v8;
      if ( *(_BYTE *)(((unsigned __int64)v8 >> 3) + 0x7FFF8000) != 0
        && (char)(((unsigned __int8)v8 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)v8 >> 3) + 0x7FFF8000) )
      {
        __asan_report_load4(v8);
      }
      entity_id = *v9;
      v10 = (unsigned int)std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v1 + 48));
      Scene::findEntity<Monster>((const Scene *const)(v1 + 80), v10);
      if ( !std::operator==<Monster>(0LL, (const std::shared_ptr<Monster> *)(v1 + 80)) )
      {
        v11 = (Entity *)std::__shared_ptr_access<Monster,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Monster,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v1 + 80));
        ai_info = Entity::getEntityAiInfo(v11);
        __for_range_0 = (std::set<unsigned int> *)(v1 + 176);
        __for_begin_0._M_node = std::set<unsigned int>::begin((const std::set<unsigned int> *const)(v1 + 176))._M_node;
        __for_end_0._M_node = std::set<unsigned int>::end(__for_range_0)._M_node;
        while ( std::operator!=(&__for_begin_0, &__for_end_0) )
        {
          v12 = std::_Rb_tree_const_iterator<unsigned int>::operator*(&__for_begin_0);
          v13 = v12;
          if ( *(_BYTE *)(((unsigned __int64)v12 >> 3) + 0x7FFF8000) != 0
            && (char)(((unsigned __int8)v12 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)v12 >> 3) + 0x7FFF8000) )
          {
            __asan_report_load4(v12);
          }
          *(_DWORD *)(v1 + 32) = *v13;
          google::protobuf::Map<unsigned int,unsigned int>::erase(
            &ai_info->ai_threat_map,
            (const google::protobuf::Map<unsigned int,unsigned int>::key_type *)(v1 + 32));
          std::_Rb_tree_const_iterator<unsigned int>::operator++(&__for_begin_0);
        }
        is_no_threat = 1;
        google::protobuf::Map<unsigned int,unsigned int>::begin(
          (google::protobuf::Map<unsigned int,unsigned int>::iterator *)(v1 + 112),
          &ai_info->ai_threat_map);
        while ( 1 )
        {
          google::protobuf::Map<unsigned int,unsigned int>::end(&b, &ai_info->ai_threat_map);
          if ( !google::protobuf::operator!=(
                  (const google::protobuf::Map<unsigned int,unsigned int>::iterator *)(v1 + 112),
                  &b) )
            break;
          v14 = google::protobuf::Map<unsigned int,unsigned int>::iterator::operator->((const google::protobuf::Map<unsigned int,unsigned int>::iterator *const)(v1 + 112));
          v15 = (uint32_t *)v14;
          if ( *(_BYTE *)(((unsigned __int64)v14 >> 3) + 0x7FFF8000) != 0
            && (char)(((unsigned __int8)v14 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)v14 >> 3) + 0x7FFF8000) )
          {
            __asan_report_load4(v14);
          }
          entity_id_0 = *v15;
          v16 = (unsigned __int64)std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v1 + 48));
          if ( *(_BYTE *)((v16 >> 3) + 0x7FFF8000) )
            v16 = __asan_report_load8(v16);
          v17 = *(_QWORD *)v16 + 120LL;
          if ( *(_BYTE *)((v17 >> 3) + 0x7FFF8000) )
            v16 = __asan_report_load8(*(_QWORD *)v16 + 120LL);
          (*(void (__fastcall **)(std::shared_ptr<Entity> *, unsigned __int64, _QWORD))v17)(&__a, v16, entity_id_0);
          v18 = std::operator!=<Entity>(0LL, &__a);
          std::shared_ptr<Entity>::~shared_ptr(&__a);
          if ( v18 )
          {
            is_no_threat = 0;
            google::protobuf::Map<unsigned int,unsigned int>::iterator::operator++(
              &b,
              (google::protobuf::Map<unsigned int,unsigned int>::iterator *const)(v1 + 112),
              0);
          }
          else
          {
            google::protobuf::Map<unsigned int,unsigned int>::erase(
              &v21,
              &ai_info->ai_threat_map,
              *(google::protobuf::Map<unsigned int,unsigned int>::iterator *)(v1 + 112));
            m = v21.it_.m_;
            *(_QWORD *)(v1 + 112) = v21.it_.node_;
            *(_QWORD *)(v1 + 120) = m;
            *(_QWORD *)(v1 + 128) = v21.it_.bucket_index_;
          }
        }
        if ( is_no_threat )
        {
          v20 = std::__shared_ptr_access<Monster,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Monster,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v1 + 80));
          Creature::setCurHpFull(v20, 1);
          if ( *(_BYTE *)(((unsigned __int64)&ai_info->cur_tactic >> 3) + 0x7FFF8000) != 0
            && *(_BYTE *)(((unsigned __int64)&ai_info->cur_tactic >> 3) + 0x7FFF8000) <= 3 )
          {
            __asan_report_store4(&ai_info->cur_tactic, 1LL, &ai_info->cur_tactic);
          }
          ai_info->cur_tactic = 7;
        }
      }
      std::shared_ptr<Monster>::~shared_ptr((std::shared_ptr<Monster> *const)(v1 + 80));
      std::_Rb_tree_const_iterator<unsigned int>::operator++(&__for_begin);
    }
    std::set<unsigned int>::~set((std::set<unsigned int> *const)(v1 + 176));
  }
  std::shared_ptr<Scene>::~shared_ptr((std::shared_ptr<Scene> *const)(v1 + 48));
  if ( v36 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8010) = 0LL;
    *(_DWORD *)((v1 >> 3) + 0x7FFF801C) = 0;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
  }
};

// Line 4151: range 000000001718A4DC-000000001718A53E
ForeachPolicy __cdecl PlayerAvatarComp::clearFromMonsterThreat(void)::{lambda(Avatar &)#1}::operator()(
        const PlayerAvatarComp::clearFromMonsterThreat::<lambda(Avatar&)> *const __closure,
        Avatar *avatar)
{
  std::set<unsigned int> *entity_id_set; // rbx
  std::set<unsigned int>::value_type __x[5]; // [rsp+1Ch] [rbp-14h] BYREF

  if ( *(_BYTE *)(((unsigned __int64)__closure >> 3) + 0x7FFF8000) )
    __asan_report_load8(__closure);
  entity_id_set = __closure->__entity_id_set;
  __x[0] = Entity::getEntityId((const Entity *const)avatar);
  std::set<unsigned int>::insert(entity_id_set, __x);
  return 0;
};

// Line 4195: range 000000001718ADF2-000000001718B16B
// local variable allocation has failed, the output may be wrong!
void __cdecl PlayerAvatarComp::logCombatStart(PlayerAvatarComp *const this, Monster *monster)
{
  unsigned __int64 v2; // r12
  __int64 v3; // rax
  _DWORD *v4; // r13
  PlayerBasicComp *BasicComp; // rax
  std::__shared_ptr_access<proto_log::PlayerLogBodyCombatStart,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v6; // r14
  const std::string *v7; // rax
  std::__shared_ptr_access<proto_log::PlayerLogBodyCombatStart,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v8; // rax
  proto_log::EntityLog *v9; // rax
  std::__shared_ptr_access<proto_log::PlayerLogBodyCombatStart,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v10; // r14
  float v11; // xmm0_4
  Player *v12; // r14
  std::string monstera; // [rsp+0h] [rbp-E0h] OVERLAPPED BYREF
  std::shared_ptr<google::protobuf::Message> p_body_ext_ptr; // [rsp+20h] [rbp-C0h] BYREF
  std::string v15; // [rsp+30h] [rbp-B0h] BYREF
  char v16[144]; // [rsp+50h] [rbp-90h] BYREF

  monstera._M_string_length = (std::string::size_type)this;
  monstera._M_dataplus._M_p = (std::string::pointer)monster;
  v2 = (unsigned __int64)v16;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_1(96LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "2 48 1 11 holder:4196 64 16 25 combat_start_log_ptr:4197";
  *(_QWORD *)(v2 + 16) = PlayerAvatarComp::logCombatStart;
  v4 = (_DWORD *)(v2 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = -234753551;
  v4[536862722] = -202178560;
  if ( *(_BYTE *)(((monstera._M_string_length + 24) >> 3) + 0x7FFF8000) )
    __asan_report_load8(monstera._M_string_length + 24);
  BasicComp = Player::getBasicComp(*(Player *const *)(monstera._M_string_length + 24));
  PlayerBasicComp::getNextTransNo[abi:cxx11](&v15, BasicComp);
  StatLogUtils::ContextHolder::ContextHolder((StatLogUtils::ContextHolder *const)(v2 + 48), 0x51Bu, monstera);
  std::string::~string(&v15);
  common::tools::perf::make_shared<proto_log::PlayerLogBodyCombatStart>();
  v6 = std::__shared_ptr_access<proto_log::PlayerLogBodyCombatStart,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<proto_log::PlayerLogBodyCombatStart,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 64));
  v7 = PlayerAvatarComp::getCombatTransaction[abi:cxx11]((const PlayerAvatarComp *const)monstera._M_string_length);
  proto_log::PlayerLogBodyCombatStart::set_combat_transaction(v6, v7);
  std::function<ForeachPolicy ()(Avatar &)>::function<PlayerAvatarComp::logCombatStart(Monster &)::{lambda(Avatar &)#1},void,void>(
    (std::function<ForeachPolicy(Avatar&)> *const)&v15,
    (PlayerAvatarComp::logCombatStart::<lambda(Avatar&)>)(v2 + 64));
  PlayerAvatarComp::foreachMyAvatarInSceneTeam(
    (PlayerAvatarComp *const)monstera._M_string_length,
    (std::function<ForeachPolicy(Avatar&)> *)&v15);
  std::function<ForeachPolicy ()(Avatar &)>::~function((std::function<ForeachPolicy(Avatar&)> *const)&v15);
  v8 = std::__shared_ptr_access<proto_log::PlayerLogBodyCombatStart,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<proto_log::PlayerLogBodyCombatStart,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 64));
  v9 = proto_log::PlayerLogBodyCombatStart::mutable_monster_log(v8);
  Entity::getEntityLog((Entity *const)monstera._M_dataplus._M_p, v9);
  v10 = std::__shared_ptr_access<proto_log::PlayerLogBodyCombatStart,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<proto_log::PlayerLogBodyCombatStart,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 64));
  v11 = PlayerAvatarComp::calcPlayerCombatForce((const PlayerAvatarComp *const)monstera._M_string_length);
  proto_log::PlayerLogBodyCombatStart::set_player_combat_force(v10, (int)(float)(v11 + 0.5));
  if ( *(_BYTE *)(((monstera._M_string_length + 24) >> 3) + 0x7FFF8000) )
    __asan_report_load8(monstera._M_string_length + 24);
  v12 = *(Player **)(monstera._M_string_length + 24);
  std::shared_ptr<google::protobuf::Message>::shared_ptr(&p_body_ext_ptr, 0LL);
  std::shared_ptr<google::protobuf::Message>::shared_ptr<proto_log::PlayerLogBodyCombatStart,void>(
    (std::shared_ptr<google::protobuf::Message> *const)&monstera._anon_0,
    (const std::shared_ptr<proto_log::PlayerLogBodyCombatStart> *)(v2 + 64));
  Player::printStatLog(v12, (MessagePtr *)&monstera._anon_0, &p_body_ext_ptr, 0xEu);
  std::shared_ptr<google::protobuf::Message>::~shared_ptr((std::shared_ptr<google::protobuf::Message> *const)&monstera._anon_0);
  std::shared_ptr<google::protobuf::Message>::~shared_ptr(&p_body_ext_ptr);
  std::shared_ptr<proto_log::PlayerLogBodyCombatStart>::~shared_ptr((std::shared_ptr<proto_log::PlayerLogBodyCombatStart> *const)(v2 + 64));
  StatLogUtils::ContextHolder::~ContextHolder((StatLogUtils::ContextHolder *const)(v2 + 48));
  if ( v16 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8008) = 0;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8008) = -168430091;
  }
};

// Line 4199: range 000000001718AD3A-000000001718ADF1
ForeachPolicy __cdecl PlayerAvatarComp::logCombatStart(Monster &)::{lambda(Avatar &)#1}::operator()(
        const PlayerAvatarComp::logCombatStart::<lambda(Avatar&)> *const __closure,
        Avatar *avatar)
{
  std::__shared_ptr_access<proto_log::PlayerLogBodyCombatStart,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v2; // rax
  uint32_t AvatarId; // edx
  uint32_t Level; // edx
  float MaxHp; // xmm0_4
  proto_log::CombatAvatarLog *combat_avatar_log; // [rsp+18h] [rbp-8h]

  if ( *(_BYTE *)(((unsigned __int64)__closure >> 3) + 0x7FFF8000) )
    __asan_report_load8(__closure);
  v2 = std::__shared_ptr_access<proto_log::PlayerLogBodyCombatStart,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<proto_log::PlayerLogBodyCombatStart,(__gnu_cxx::_Lock_policy)2,false,false> *const)__closure->__combat_start_log_ptr);
  combat_avatar_log = proto_log::PlayerLogBodyCombatStart::add_avatar_log_list(v2);
  AvatarId = Avatar::getAvatarId(avatar);
  proto_log::CombatAvatarLog::set_avatar_id(combat_avatar_log, AvatarId);
  Level = Creature::getLevel(avatar);
  proto_log::CombatAvatarLog::set_avatar_level(combat_avatar_log, Level);
  MaxHp = Creature::getMaxHp(avatar);
  proto_log::CombatAvatarLog::set_hp(combat_avatar_log, (int)(float)(MaxHp + 0.5));
  return 0;
};

// Line 4214: range 000000001718B16C-000000001718B4AA
// local variable allocation has failed, the output may be wrong!
void __cdecl PlayerAvatarComp::logCombatEnd(PlayerAvatarComp *const this, uint32_t combat_end_reason)
{
  unsigned __int64 v2; // r12
  __int64 v3; // rax
  _DWORD *v4; // r13
  PlayerBasicComp *BasicComp; // rax
  std::__shared_ptr_access<proto_log::PlayerLogBodyCombatEnd,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v6; // r14
  const std::string *v7; // rax
  std::__shared_ptr_access<proto_log::PlayerLogBodyCombatEnd,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v8; // rcx
  std::__shared_ptr_access<proto_log::PlayerLogBodyCombatEnd,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v9; // rax
  Player *v10; // r14
  std::string v11; // [rsp+0h] [rbp-E0h] OVERLAPPED BYREF
  std::shared_ptr<google::protobuf::Message> p_body_ext_ptr; // [rsp+20h] [rbp-C0h] BYREF
  std::string v13; // [rsp+30h] [rbp-B0h] BYREF
  char v14[144]; // [rsp+50h] [rbp-90h] BYREF

  v11._M_string_length = (std::string::size_type)this;
  HIDWORD(v11._M_dataplus._M_p) = combat_end_reason;
  v2 = (unsigned __int64)v14;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_1(96LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "2 48 1 11 holder:4215 64 16 23 combat_end_log_ptr:4216";
  *(_QWORD *)(v2 + 16) = PlayerAvatarComp::logCombatEnd;
  v4 = (_DWORD *)(v2 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = -234753551;
  v4[536862722] = -202178560;
  if ( *(_BYTE *)(((v11._M_string_length + 24) >> 3) + 0x7FFF8000) )
    __asan_report_load8(v11._M_string_length + 24);
  BasicComp = Player::getBasicComp(*(Player *const *)(v11._M_string_length + 24));
  PlayerBasicComp::getNextTransNo[abi:cxx11](&v13, BasicComp);
  StatLogUtils::ContextHolder::ContextHolder((StatLogUtils::ContextHolder *const)(v2 + 48), 0x51Cu, v11);
  std::string::~string(&v13);
  common::tools::perf::make_shared<proto_log::PlayerLogBodyCombatEnd>();
  v6 = std::__shared_ptr_access<proto_log::PlayerLogBodyCombatEnd,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<proto_log::PlayerLogBodyCombatEnd,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 64));
  v7 = PlayerAvatarComp::getCombatTransaction[abi:cxx11]((const PlayerAvatarComp *const)v11._M_string_length);
  proto_log::PlayerLogBodyCombatEnd::set_combat_transaction(v6, v7);
  v8 = std::__shared_ptr_access<proto_log::PlayerLogBodyCombatEnd,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<proto_log::PlayerLogBodyCombatEnd,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 64));
  if ( *(char *)(((v11._M_string_length + 112) >> 3) + 0x7FFF8000) < 0 )
    __asan_report_load1(v11._M_string_length + 112);
  proto_log::PlayerLogBodyCombatEnd::set_is_changed_equip(v8, *(unsigned __int8 *)(v11._M_string_length + 112));
  v9 = std::__shared_ptr_access<proto_log::PlayerLogBodyCombatEnd,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<proto_log::PlayerLogBodyCombatEnd,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 64));
  proto_log::PlayerLogBodyCombatEnd::set_combat_end_reason(v9, HIDWORD(v11._M_dataplus._M_p));
  if ( *(_BYTE *)(((v11._M_string_length + 24) >> 3) + 0x7FFF8000) )
    __asan_report_load8(v11._M_string_length + 24);
  v10 = *(Player **)(v11._M_string_length + 24);
  std::shared_ptr<google::protobuf::Message>::shared_ptr(&p_body_ext_ptr, 0LL);
  std::shared_ptr<google::protobuf::Message>::shared_ptr<proto_log::PlayerLogBodyCombatEnd,void>(
    (std::shared_ptr<google::protobuf::Message> *const)&v11._anon_0,
    (const std::shared_ptr<proto_log::PlayerLogBodyCombatEnd> *)(v2 + 64));
  Player::printStatLog(v10, (MessagePtr *)&v11._anon_0, &p_body_ext_ptr, 0xEu);
  std::shared_ptr<google::protobuf::Message>::~shared_ptr((std::shared_ptr<google::protobuf::Message> *const)&v11._anon_0);
  std::shared_ptr<google::protobuf::Message>::~shared_ptr(&p_body_ext_ptr);
  std::shared_ptr<proto_log::PlayerLogBodyCombatEnd>::~shared_ptr((std::shared_ptr<proto_log::PlayerLogBodyCombatEnd> *const)(v2 + 64));
  StatLogUtils::ContextHolder::~ContextHolder((StatLogUtils::ContextHolder *const)(v2 + 48));
  if ( v14 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8008) = 0;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8008) = -168430091;
  }
};

// Line 4224: range 000000001718B4AC-000000001718B9E1
void __fastcall PlayerAvatarComp::logSetUpAvatarTeam(
        PlayerAvatarComp *const this,
        uint32_t team_id,
        const std::vector<long unsigned int> *old_avatar_guid_vec)
{
  unsigned __int64 v3; // r12
  __int64 v4; // rax
  _DWORD *v5; // r13
  common::milog::MiLogStream *v6; // rax
  std::__shared_ptr_access<proto_log::PlayerLogBodySetUpAvatarTeam,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v7; // rax
  unsigned __int64 *v8; // rax
  std::__shared_ptr_access<proto_log::PlayerLogBodySetUpAvatarTeam,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v9; // r14
  std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v10; // rax
  uint32_t AvatarId; // eax
  unsigned __int64 *v12; // rax
  std::__shared_ptr_access<proto_log::PlayerLogBodySetUpAvatarTeam,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v13; // r14
  std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v14; // rax
  uint32_t v15; // eax
  Player *player; // r14
  std::vector<long unsigned int>::const_iterator __for_begin; // [rsp+28h] [rbp-118h] BYREF
  std::vector<long unsigned int>::const_iterator __for_end; // [rsp+30h] [rbp-110h] BYREF
  const AvatarTeam *avatar_team_ptr; // [rsp+38h] [rbp-108h]
  const std::vector<long unsigned int> *__for_range; // [rsp+40h] [rbp-100h]
  const std::vector<long unsigned int> *__for_range_0; // [rsp+48h] [rbp-F8h]
  unsigned __int64 guid_0; // [rsp+50h] [rbp-F0h]
  unsigned __int64 guid; // [rsp+58h] [rbp-E8h]
  std::shared_ptr<google::protobuf::Message> p_body_ptr; // [rsp+60h] [rbp-E0h] BYREF
  common::milog::MiLogStream v26; // [rsp+70h] [rbp-D0h] BYREF
  char v27[176]; // [rsp+90h] [rbp-B0h] BYREF

  v3 = (unsigned __int64)v27;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_1(128LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "3 48 4 12 team_id:4223 64 16 12 log_ptr:4225 96 16 15 avatar_ptr:4235";
  *(_QWORD *)(v3 + 16) = PlayerAvatarComp::logSetUpAvatarTeam;
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = -234556943;
  v5[536862722] = -219021312;
  v5[536862723] = -202178560;
  *(_DWORD *)(v3 + 48) = team_id;
  common::tools::perf::make_shared<proto_log::PlayerLogBodySetUpAvatarTeam>();
  avatar_team_ptr = PlayerAvatarComp::findAvatarTeam(this, *(_DWORD *)(v3 + 48));
  if ( avatar_team_ptr )
  {
    v7 = std::__shared_ptr_access<proto_log::PlayerLogBodySetUpAvatarTeam,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<proto_log::PlayerLogBodySetUpAvatarTeam,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 64));
    proto_log::PlayerLogBodySetUpAvatarTeam::set_team_id(v7, *(_DWORD *)(v3 + 48));
    __for_range = old_avatar_guid_vec;
    __for_begin._M_current = std::vector<unsigned long>::begin(old_avatar_guid_vec)._M_current;
    __for_end._M_current = std::vector<unsigned long>::end(old_avatar_guid_vec)._M_current;
    while ( __gnu_cxx::operator!=<unsigned long const*,std::vector<unsigned long>>(&__for_begin, &__for_end) )
    {
      v8 = (unsigned __int64 *)__gnu_cxx::__normal_iterator<unsigned long const*,std::vector<unsigned long>>::operator*(&__for_begin);
      if ( *(_BYTE *)(((unsigned __int64)v8 >> 3) + 0x7FFF8000) )
        v8 = (unsigned __int64 *)__asan_report_load8(v8);
      guid = *v8;
      PlayerAvatarComp::findAvatar((const PlayerAvatarComp *const)(v3 + 96), (uint64_t)this, guid);
      if ( std::operator!=<Avatar>((const std::shared_ptr<Avatar> *)(v3 + 96), 0LL) )
      {
        v9 = std::__shared_ptr_access<proto_log::PlayerLogBodySetUpAvatarTeam,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<proto_log::PlayerLogBodySetUpAvatarTeam,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 64));
        v10 = std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 96));
        AvatarId = Avatar::getAvatarId(v10);
        proto_log::PlayerLogBodySetUpAvatarTeam::add_before_avatar_id_list(v9, AvatarId);
      }
      std::shared_ptr<Avatar>::~shared_ptr((std::shared_ptr<Avatar> *const)(v3 + 96));
      __gnu_cxx::__normal_iterator<unsigned long const*,std::vector<unsigned long>>::operator++(&__for_begin);
    }
    __for_range_0 = AvatarTeam::getAvatarVec(avatar_team_ptr);
    __for_begin._M_current = std::vector<unsigned long>::begin(__for_range_0)._M_current;
    __for_end._M_current = std::vector<unsigned long>::end(__for_range_0)._M_current;
    while ( __gnu_cxx::operator!=<unsigned long const*,std::vector<unsigned long>>(&__for_begin, &__for_end) )
    {
      v12 = (unsigned __int64 *)__gnu_cxx::__normal_iterator<unsigned long const*,std::vector<unsigned long>>::operator*(&__for_begin);
      if ( *(_BYTE *)(((unsigned __int64)v12 >> 3) + 0x7FFF8000) )
        v12 = (unsigned __int64 *)__asan_report_load8(v12);
      guid_0 = *v12;
      PlayerAvatarComp::findAvatar((const PlayerAvatarComp *const)(v3 + 96), (uint64_t)this, guid_0);
      if ( std::operator!=<Avatar>((const std::shared_ptr<Avatar> *)(v3 + 96), 0LL) )
      {
        v13 = std::__shared_ptr_access<proto_log::PlayerLogBodySetUpAvatarTeam,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<proto_log::PlayerLogBodySetUpAvatarTeam,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 64));
        v14 = std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 96));
        v15 = Avatar::getAvatarId(v14);
        proto_log::PlayerLogBodySetUpAvatarTeam::add_cur_avatar_id_list(v13, v15);
      }
      std::shared_ptr<Avatar>::~shared_ptr((std::shared_ptr<Avatar> *const)(v3 + 96));
      __gnu_cxx::__normal_iterator<unsigned long const*,std::vector<unsigned long>>::operator++(&__for_begin);
    }
    if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
      __asan_report_load8(&this->player_);
    player = this->player_;
    std::shared_ptr<google::protobuf::Message>::shared_ptr(
      (std::shared_ptr<google::protobuf::Message> *const)(v3 + 96),
      0LL);
    std::shared_ptr<google::protobuf::Message>::shared_ptr<proto_log::PlayerLogBodySetUpAvatarTeam,void>(
      &p_body_ptr,
      (const std::shared_ptr<proto_log::PlayerLogBodySetUpAvatarTeam> *)(v3 + 64));
    Player::printStatLog(player, &p_body_ptr, (MessagePtr *)(v3 + 96), 0xEu);
    std::shared_ptr<google::protobuf::Message>::~shared_ptr(&p_body_ptr);
    std::shared_ptr<google::protobuf::Message>::~shared_ptr((std::shared_ptr<google::protobuf::Message> *const)(v3 + 96));
  }
  else
  {
    common::milog::MiLogStream::create(
      &v26,
      &common::milog::MiLogDefault::default_log_obj_,
      4u,
      "./src/player/avatar/player_avatar_comp.cpp",
      "logSetUpAvatarTeam",
      4229);
    v6 = common::milog::MiLogStream::operator<<<char [17],(char *[17])0>(&v26, (const char (*)[17])"invalid team_id:");
    common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v6, (const unsigned int *)(v3 + 48));
    common::milog::MiLogStream::~MiLogStream(&v26);
  }
  std::shared_ptr<proto_log::PlayerLogBodySetUpAvatarTeam>::~shared_ptr((std::shared_ptr<proto_log::PlayerLogBodySetUpAvatarTeam> *const)(v3 + 64));
  if ( v27 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
};

// Line 4253: range 000000001718B9E2-000000001718BF60
void __fastcall PlayerAvatarComp::logChooseCurAvatarTeam(PlayerAvatarComp *const this, uint32_t before_team_id)
{
  unsigned __int64 v2; // r12
  __int64 v3; // rax
  _DWORD *v4; // r13
  common::milog::MiLogStream *v5; // rax
  std::__shared_ptr_access<proto_log::PlayerLogBodyChooseCurAvatarTeam,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v6; // rax
  unsigned __int64 *v7; // rax
  std::__shared_ptr_access<proto_log::PlayerLogBodyChooseCurAvatarTeam,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v8; // r14
  std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v9; // rax
  uint32_t AvatarId; // eax
  std::__shared_ptr_access<proto_log::PlayerLogBodyChooseCurAvatarTeam,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v11; // r14
  uint32_t CurAvatarTeamId; // eax
  unsigned __int64 *v13; // rax
  std::__shared_ptr_access<proto_log::PlayerLogBodyChooseCurAvatarTeam,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v14; // r14
  std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v15; // rax
  uint32_t v16; // eax
  Player *player; // r14
  std::vector<long unsigned int>::const_iterator __for_begin; // [rsp+10h] [rbp-120h] BYREF
  std::vector<long unsigned int>::const_iterator __for_end; // [rsp+18h] [rbp-118h] BYREF
  const AvatarTeam *before_avatar_team_ptr; // [rsp+20h] [rbp-110h]
  const AvatarTeam *cur_avatar_team_ptr; // [rsp+28h] [rbp-108h]
  const std::vector<long unsigned int> *__for_range; // [rsp+30h] [rbp-100h]
  const std::vector<long unsigned int> *__for_range_0; // [rsp+38h] [rbp-F8h]
  unsigned __int64 guid_0; // [rsp+40h] [rbp-F0h]
  unsigned __int64 guid; // [rsp+48h] [rbp-E8h]
  std::shared_ptr<google::protobuf::Message> p_body_ptr; // [rsp+50h] [rbp-E0h] BYREF
  common::milog::MiLogStream v27; // [rsp+60h] [rbp-D0h] BYREF
  char v28[176]; // [rsp+80h] [rbp-B0h] BYREF

  v2 = (unsigned __int64)v28;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_1(128LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "3 48 4 19 before_team_id:4252 64 16 12 log_ptr:4254 96 16 15 avatar_ptr:4265";
  *(_QWORD *)(v2 + 16) = PlayerAvatarComp::logChooseCurAvatarTeam;
  v4 = (_DWORD *)(v2 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = -234556943;
  v4[536862722] = -219021312;
  v4[536862723] = -202178560;
  *(_DWORD *)(v2 + 48) = before_team_id;
  common::tools::perf::make_shared<proto_log::PlayerLogBodyChooseCurAvatarTeam>();
  before_avatar_team_ptr = PlayerAvatarComp::findAvatarTeam(this, *(_DWORD *)(v2 + 48));
  cur_avatar_team_ptr = PlayerAvatarComp::findCurAvatarTeam(this);
  if ( before_avatar_team_ptr && cur_avatar_team_ptr )
  {
    v6 = std::__shared_ptr_access<proto_log::PlayerLogBodyChooseCurAvatarTeam,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<proto_log::PlayerLogBodyChooseCurAvatarTeam,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 64));
    proto_log::PlayerLogBodyChooseCurAvatarTeam::set_before_team_id(v6, *(_DWORD *)(v2 + 48));
    __for_range = AvatarTeam::getAvatarVec(before_avatar_team_ptr);
    __for_begin._M_current = std::vector<unsigned long>::begin(__for_range)._M_current;
    __for_end._M_current = std::vector<unsigned long>::end(__for_range)._M_current;
    while ( __gnu_cxx::operator!=<unsigned long const*,std::vector<unsigned long>>(&__for_begin, &__for_end) )
    {
      v7 = (unsigned __int64 *)__gnu_cxx::__normal_iterator<unsigned long const*,std::vector<unsigned long>>::operator*(&__for_begin);
      if ( *(_BYTE *)(((unsigned __int64)v7 >> 3) + 0x7FFF8000) )
        v7 = (unsigned __int64 *)__asan_report_load8(v7);
      guid = *v7;
      PlayerAvatarComp::findAvatar((const PlayerAvatarComp *const)(v2 + 96), (uint64_t)this, guid);
      if ( std::operator!=<Avatar>((const std::shared_ptr<Avatar> *)(v2 + 96), 0LL) )
      {
        v8 = std::__shared_ptr_access<proto_log::PlayerLogBodyChooseCurAvatarTeam,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<proto_log::PlayerLogBodyChooseCurAvatarTeam,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 64));
        v9 = std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 96));
        AvatarId = Avatar::getAvatarId(v9);
        proto_log::PlayerLogBodyChooseCurAvatarTeam::add_before_avatar_id_list(v8, AvatarId);
      }
      std::shared_ptr<Avatar>::~shared_ptr((std::shared_ptr<Avatar> *const)(v2 + 96));
      __gnu_cxx::__normal_iterator<unsigned long const*,std::vector<unsigned long>>::operator++(&__for_begin);
    }
    v11 = std::__shared_ptr_access<proto_log::PlayerLogBodyChooseCurAvatarTeam,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<proto_log::PlayerLogBodyChooseCurAvatarTeam,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 64));
    CurAvatarTeamId = PlayerAvatarComp::getCurAvatarTeamId(this);
    proto_log::PlayerLogBodyChooseCurAvatarTeam::set_cur_team_id(v11, CurAvatarTeamId);
    __for_range_0 = AvatarTeam::getAvatarVec(cur_avatar_team_ptr);
    __for_begin._M_current = std::vector<unsigned long>::begin(__for_range_0)._M_current;
    __for_end._M_current = std::vector<unsigned long>::end(__for_range_0)._M_current;
    while ( __gnu_cxx::operator!=<unsigned long const*,std::vector<unsigned long>>(&__for_begin, &__for_end) )
    {
      v13 = (unsigned __int64 *)__gnu_cxx::__normal_iterator<unsigned long const*,std::vector<unsigned long>>::operator*(&__for_begin);
      if ( *(_BYTE *)(((unsigned __int64)v13 >> 3) + 0x7FFF8000) )
        v13 = (unsigned __int64 *)__asan_report_load8(v13);
      guid_0 = *v13;
      PlayerAvatarComp::findAvatar((const PlayerAvatarComp *const)(v2 + 96), (uint64_t)this, guid_0);
      if ( std::operator!=<Avatar>((const std::shared_ptr<Avatar> *)(v2 + 96), 0LL) )
      {
        v14 = std::__shared_ptr_access<proto_log::PlayerLogBodyChooseCurAvatarTeam,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<proto_log::PlayerLogBodyChooseCurAvatarTeam,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 64));
        v15 = std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 96));
        v16 = Avatar::getAvatarId(v15);
        proto_log::PlayerLogBodyChooseCurAvatarTeam::add_cur_avatar_id_list(v14, v16);
      }
      std::shared_ptr<Avatar>::~shared_ptr((std::shared_ptr<Avatar> *const)(v2 + 96));
      __gnu_cxx::__normal_iterator<unsigned long const*,std::vector<unsigned long>>::operator++(&__for_begin);
    }
    if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
      __asan_report_load8(&this->player_);
    player = this->player_;
    std::shared_ptr<google::protobuf::Message>::shared_ptr(
      (std::shared_ptr<google::protobuf::Message> *const)(v2 + 96),
      0LL);
    std::shared_ptr<google::protobuf::Message>::shared_ptr<proto_log::PlayerLogBodyChooseCurAvatarTeam,void>(
      &p_body_ptr,
      (const std::shared_ptr<proto_log::PlayerLogBodyChooseCurAvatarTeam> *)(v2 + 64));
    Player::printStatLog(player, &p_body_ptr, (MessagePtr *)(v2 + 96), 0xEu);
    std::shared_ptr<google::protobuf::Message>::~shared_ptr(&p_body_ptr);
    std::shared_ptr<google::protobuf::Message>::~shared_ptr((std::shared_ptr<google::protobuf::Message> *const)(v2 + 96));
  }
  else
  {
    common::milog::MiLogStream::create(
      &v27,
      &common::milog::MiLogDefault::default_log_obj_,
      4u,
      "./src/player/avatar/player_avatar_comp.cpp",
      "logChooseCurAvatarTeam",
      4259);
    v5 = common::milog::MiLogStream::operator<<<char [28],(char *[28])0>(
           &v27,
           (const char (*)[28])"invalid cur/before_team_id:");
    common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v5, (const unsigned int *)(v2 + 48));
    common::milog::MiLogStream::~MiLogStream(&v27);
  }
  std::shared_ptr<proto_log::PlayerLogBodyChooseCurAvatarTeam>::~shared_ptr((std::shared_ptr<proto_log::PlayerLogBodyChooseCurAvatarTeam> *const)(v2 + 64));
  if ( v28 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
};

// Line 4285: range 000000001718C038-000000001718C4D2
float __cdecl PlayerAvatarComp::calcPlayerCombatForce(const PlayerAvatarComp *const this)
{
  std::map<data::ElementType,std::vector<float>> *v1; // rbx
  __int64 v2; // rax
  _DWORD *v3; // r12
  float *M_current; // r14
  std::vector<float>::iterator v5; // rax
  std::greater<float> v6; // dl
  size_t v7; // rax
  size_t v8; // rax
  std::vector<float>::reference v10; // rax
  float *v11; // rdx
  __gnu_cxx::__alloc_traits<std::allocator<float>,float>::value_type *v12; // rax
  float *v13; // rdx
  const float *v14; // r14
  std::vector<float>::const_iterator v15; // rax
  float result; // xmm0_4
  float v17; // [rsp+4h] [rbp-13Ch]
  float v18; // [rsp+4h] [rbp-13Ch]
  float combat_force; // [rsp+10h] [rbp-130h]
  float total_weight; // [rsp+14h] [rbp-12Ch]
  std::map<data::ElementType,std::vector<float>>::const_iterator __for_begin; // [rsp+18h] [rbp-128h] BYREF
  std::map<data::ElementType,std::vector<float>>::const_iterator __for_end; // [rsp+20h] [rbp-120h] BYREF
  size_t idx; // [rsp+28h] [rbp-118h]
  const ConstValueExcelConfigMgr *const_value_config_mgr; // [rsp+30h] [rbp-110h]
  const std::map<data::ElementType,std::vector<float>> *__for_range; // [rsp+38h] [rbp-108h]
  const std::pair<const data::ElementType,std::vector<float> > *v26; // [rsp+40h] [rbp-100h]
  std::tuple_element<0,const std::pair<const data::ElementType,std::vector<float> > >::type *element_type; // [rsp+48h] [rbp-F8h]
  std::tuple_element<1,const std::pair<const data::ElementType,std::vector<float> > >::type *param_vec; // [rsp+50h] [rbp-F0h]
  std::vector<float> *force_vec; // [rsp+58h] [rbp-E8h]
  std::shared_ptr<Config> v30; // [rsp+60h] [rbp-E0h] BYREF
  std::function<ForeachPolicy(const Avatar&)> p_func; // [rsp+70h] [rbp-D0h] BYREF
  char v32[176]; // [rsp+90h] [rbp-B0h] BYREF

  v1 = (std::map<data::ElementType,std::vector<float>> *)v32;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_1(128LL);
    if ( v2 )
      v1 = (std::map<data::ElementType,std::vector<float>> *)v2;
  }
  *(_QWORD *)v1->_M_t._M_impl.gap0 = 1102416563LL;
  *(_QWORD *)&v1->_M_t._M_impl._M_header._M_color = "1 48 48 28 avatar_combat_force_map:4286";
  v1->_M_t._M_impl._M_header._M_parent = (std::_Rb_tree_node_base::_Base_ptr)PlayerAvatarComp::calcPlayerCombatForce;
  v3 = (_DWORD *)((unsigned __int64)v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = 61937;
  v3[536862723] = -202116109;
  std::map<data::ElementType,std::vector<float>>::map(v1 + 1);
  std::function<ForeachPolicy ()(Avatar const&)>::function<PlayerAvatarComp::calcPlayerCombatForce(void)::{lambda(Avatar const&)#1},void,void>(
    &p_func,
    (PlayerAvatarComp::calcPlayerCombatForce::<lambda(const Avatar&)>)&v1[1]);
  PlayerAvatarComp::foreachAvatar(this, &p_func);
  std::function<ForeachPolicy ()(Avatar const&)>::~function(&p_func);
  combat_force = 0.0;
  total_weight = 0.0;
  ServiceBox::findService<GameserverService>();
  GameserverService::getConfig((GameserverService *const)&v30);
  const_value_config_mgr = &std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false> *const)&v30)->design_config.txt_config_mgr.const_value_config_mgr;
  std::shared_ptr<Config>::~shared_ptr(&v30);
  __for_range = ConstValueExcelConfigMgr::getPlayerForceParamMap(const_value_config_mgr);
  __for_begin._M_node = std::map<data::ElementType,std::vector<float>>::begin(__for_range)._M_node;
  __for_end._M_node = std::map<data::ElementType,std::vector<float>>::end(__for_range)._M_node;
  while ( std::operator!=(&__for_begin, &__for_end) )
  {
    v26 = std::_Rb_tree_const_iterator<std::pair<data::ElementType const,std::vector<float>>>::operator*(&__for_begin);
    element_type = std::get<0ul,data::ElementType const,std::vector<float>>(v26);
    param_vec = (std::tuple_element<1,const std::pair<const data::ElementType,std::vector<float> > >::type *)std::get<1ul,data::ElementType const,std::vector<float>>(v26);
    force_vec = std::map<data::ElementType,std::vector<float>>::operator[](v1 + 1, element_type);
    M_current = std::vector<float>::end(force_vec)._M_current;
    *(std::vector<float>::iterator *)&v5._M_current = (std::vector<float>::iterator)std::vector<float>::begin(force_vec)._M_current;
    std::sort<__gnu_cxx::__normal_iterator<float *,std::vector<float>>,std::greater<float>>(
      v5,
      (__gnu_cxx::__normal_iterator<float*,std::vector<float> >)M_current,
      v6);
    for ( idx = 0LL; ; ++idx )
    {
      v7 = std::vector<float>::size(force_vec);
      if ( idx >= v7 )
        break;
      v8 = std::vector<float>::size(param_vec);
      if ( idx >= v8 )
        break;
      v10 = std::vector<float>::operator[](force_vec, idx);
      v11 = v10;
      if ( *(_BYTE *)(((unsigned __int64)v10 >> 3) + 0x7FFF8000) != 0
        && (char)(((unsigned __int8)v10 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)v10 >> 3) + 0x7FFF8000) )
      {
        __asan_report_load4(v10);
      }
      v17 = *v11;
      v12 = (__gnu_cxx::__alloc_traits<std::allocator<float>,float>::value_type *)std::vector<float>::operator[](
                                                                                    param_vec,
                                                                                    idx);
      v13 = v12;
      if ( *(_BYTE *)(((unsigned __int64)v12 >> 3) + 0x7FFF8000) != 0
        && (char)(((unsigned __int8)v12 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)v12 >> 3) + 0x7FFF8000) )
      {
        __asan_report_load4(v12);
      }
      combat_force = (float)(*v13 * v17) + combat_force;
    }
    v14 = std::vector<float>::end(param_vec)._M_current;
    *(std::vector<float>::const_iterator *)&v15._M_current = (std::vector<float>::const_iterator)std::vector<float>::begin(param_vec)._M_current;
    total_weight = std::accumulate<__gnu_cxx::__normal_iterator<float const*,std::vector<float>>,float>(
                     v15,
                     (__gnu_cxx::__normal_iterator<float const*,std::vector<float> >)v14,
                     0.0)
                 + total_weight;
    std::_Rb_tree_const_iterator<std::pair<data::ElementType const,std::vector<float>>>::operator++(&__for_begin);
  }
  if ( total_weight == 0.0 )
    v18 = 0.0;
  else
    v18 = combat_force / total_weight;
  std::map<data::ElementType,std::vector<float>>::~map(v1 + 1);
  result = v18;
  if ( v32 == (char *)v1 )
  {
    *(_QWORD *)(((unsigned __int64)v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_DWORD *)(((unsigned __int64)v1 >> 3) + 0x7FFF800C) = 0;
  }
  else
  {
    *(_QWORD *)v1->_M_t._M_impl.gap0 = 1172321806LL;
    *(_QWORD *)(((unsigned __int64)v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)(((unsigned __int64)v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 4287: range 000000001718BF62-000000001718C037
ForeachPolicy __cdecl PlayerAvatarComp::calcPlayerCombatForce(void)const::{lambda(Avatar const&)#1}::operator()(
        const PlayerAvatarComp::calcPlayerCombatForce::<lambda(const Avatar&)> *const __closure,
        const Avatar *avatar)
{
  __m128i v2; // xmm0
  std::map<data::ElementType,std::vector<float>> *avatar_combat_force_map; // rbx
  unsigned __int64 v4; // rax
  std::vector<float> *v5; // rbx
  std::map<data::ElementType,std::vector<float>>::key_type __k; // [rsp+18h] [rbp-18h] BYREF
  std::vector<float>::value_type __x[5]; // [rsp+1Ch] [rbp-14h] BYREF

  if ( *(_BYTE *)(((unsigned __int64)__closure >> 3) + 0x7FFF8000) )
    __asan_report_load8(__closure);
  avatar_combat_force_map = __closure->__avatar_combat_force_map;
  if ( *(_BYTE *)(((unsigned __int64)avatar >> 3) + 0x7FFF8000) )
    __asan_report_load8(avatar);
  v4 = *(_QWORD *)avatar->baseclass_0 + 280LL;
  if ( *(_BYTE *)((v4 >> 3) + 0x7FFF8000) )
    v4 = __asan_report_load8(*(_QWORD *)avatar->baseclass_0 + 280LL);
  __k = (*(unsigned int (__fastcall **)(const Avatar *))v4)(avatar);
  v5 = std::map<data::ElementType,std::vector<float>>::operator[](avatar_combat_force_map, &__k);
  *(float *)v2.m128i_i32 = Avatar::calcAvatarCombatForce(avatar);
  LODWORD(__x[0]) = _mm_cvtsi128_si32(v2);
  std::vector<float>::push_back(v5, __x);
  return 0;
};

// Line 4314: range 000000001718C4D4-000000001718C5DB
void __fastcall PlayerAvatarComp::onEnterGroupSight(
        PlayerAvatarComp *const this,
        GroupWtr *p_group_wtr,
        uint32_t group_id)
{
  unsigned __int64 v3; // rbx
  __int64 v4; // rax
  unsigned __int64 v5; // r12
  std::weak_ptr<Group> *v6; // rax
  char v8[96]; // [rsp+20h] [rbp-60h] BYREF

  v3 = (unsigned __int64)v8;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_0(64LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "1 32 4 13 group_id:4313";
  *(_QWORD *)(v3 + 16) = PlayerAvatarComp::onEnterGroupSight;
  v5 = v3 >> 3;
  *(_DWORD *)(v5 + 2147450880) = -235802127;
  *(_DWORD *)(v5 + 2147450884) = -202116348;
  *(_DWORD *)(v3 + 32) = group_id;
  std::set<std::weak_ptr<Group>,std::owner_less<std::weak_ptr<Group>>,std::allocator<std::weak_ptr<Group>>>::insert(
    &this->group_wtr_set_,
    p_group_wtr);
  v6 = std::unordered_map<unsigned int,std::weak_ptr<Group>>::operator[](
         &this->group_wtr_map_,
         (const std::unordered_map<unsigned int,std::weak_ptr<Group>>::key_type *)(v3 + 32));
  std::weak_ptr<Group>::operator=(v6, p_group_wtr);
  if ( v8 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
  }
};

// Line 4320: range 000000001718C5DC-000000001718C6D1
void __fastcall PlayerAvatarComp::onExitGroupSight(
        PlayerAvatarComp *const this,
        GroupWtr *p_group_wtr,
        uint32_t group_id)
{
  unsigned __int64 v3; // rbx
  __int64 v4; // rax
  unsigned __int64 v5; // r12
  char v7[96]; // [rsp+20h] [rbp-60h] BYREF

  v3 = (unsigned __int64)v7;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_0(64LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "1 32 4 13 group_id:4319";
  *(_QWORD *)(v3 + 16) = PlayerAvatarComp::onExitGroupSight;
  v5 = v3 >> 3;
  *(_DWORD *)(v5 + 2147450880) = -235802127;
  *(_DWORD *)(v5 + 2147450884) = -202116348;
  *(_DWORD *)(v3 + 32) = group_id;
  std::set<std::weak_ptr<Group>,std::owner_less<std::weak_ptr<Group>>,std::allocator<std::weak_ptr<Group>>>::erase(
    &this->group_wtr_set_,
    p_group_wtr);
  std::unordered_map<unsigned int,std::weak_ptr<Group>>::erase(
    &this->group_wtr_map_,
    (const std::unordered_map<unsigned int,std::weak_ptr<Group>>::key_type *)(v3 + 32));
  if ( v7 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
  }
};

// Line 4326: range 000000001718C6D2-000000001718CBC5
void __cdecl PlayerAvatarComp::onLeaveScene(PlayerAvatarComp *const this)
{
  std::set<unsigned int> *v1; // rbx
  __int64 v2; // rax
  _DWORD *v3; // r12
  BuffExcelConfigMgr *p_buff_config_mgr; // rcx
  bool isBuffIdDelWhenLeaveScene; // r14
  Buff *v6; // r14
  PlayerBasicComp *BasicComp; // rax
  uint64_t PlayerTimeMs; // rax
  unsigned int *v9; // rax
  uint32_t *v10; // rdx
  common::milog::MiLogStream *v11; // rax
  std::multimap<unsigned int,std::shared_ptr<Buff>>::iterator __for_begin; // [rsp+18h] [rbp-118h] BYREF
  std::multimap<unsigned int,std::shared_ptr<Buff>>::iterator __for_end; // [rsp+20h] [rbp-110h] BYREF
  std::multimap<unsigned int,std::shared_ptr<Buff>> *__for_range; // [rsp+28h] [rbp-108h]
  std::set<unsigned int> *__for_range_0; // [rsp+30h] [rbp-100h]
  std::pair<unsigned int const,std::shared_ptr<Buff> > *__in; // [rsp+38h] [rbp-F8h]
  std::tuple_element<0,std::pair<unsigned int const,std::shared_ptr<Buff> > >::type *buff_id; // [rsp+40h] [rbp-F0h]
  std::tuple_element<1,std::pair<unsigned int const,std::shared_ptr<Buff> > >::type *buff_ptr; // [rsp+48h] [rbp-E8h]
  std::shared_ptr<Config> v19; // [rsp+50h] [rbp-E0h] BYREF
  common::milog::MiLogStream v20; // [rsp+60h] [rbp-D0h] BYREF
  char v21[176]; // [rsp+80h] [rbp-B0h] BYREF

  v1 = (std::set<unsigned int> *)v21;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_1(128LL);
    if ( v2 )
      v1 = (std::set<unsigned int> *)v2;
  }
  *(_QWORD *)v1->_M_t._M_impl.gap0 = 1102416563LL;
  *(_QWORD *)&v1->_M_t._M_impl._M_header._M_color = "1 48 48 23 to_del_buff_id_set:4327";
  v1->_M_t._M_impl._M_header._M_parent = (std::_Rb_tree_node_base::_Base_ptr)PlayerAvatarComp::onLeaveScene;
  v3 = (_DWORD *)((unsigned __int64)v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = 61937;
  v3[536862723] = -202116109;
  std::set<unsigned int>::set(v1 + 1);
  __for_range = &this->avatar_team_buff_mmap_;
  __for_begin._M_node = std::multimap<unsigned int,std::shared_ptr<Buff>>::begin(&this->avatar_team_buff_mmap_)._M_node;
  __for_end._M_node = std::multimap<unsigned int,std::shared_ptr<Buff>>::end(&this->avatar_team_buff_mmap_)._M_node;
  while ( std::operator!=(&__for_begin, &__for_end) )
  {
    __in = std::_Rb_tree_iterator<std::pair<unsigned int const,std::shared_ptr<Buff>>>::operator*(&__for_begin);
    buff_id = std::get<0ul,unsigned int const,std::shared_ptr<Buff>>(__in);
    buff_ptr = std::get<1ul,unsigned int const,std::shared_ptr<Buff>>(__in);
    ServiceBox::findService<GameserverService>();
    GameserverService::getConfig((GameserverService *const)&v19);
    p_buff_config_mgr = &std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false> *const)&v19)->design_config.txt_config_mgr.buff_config_mgr;
    if ( *(_BYTE *)(((unsigned __int64)buff_id >> 3) + 0x7FFF8000) != 0
      && (char)(((unsigned __int8)buff_id & 7) + 3) >= *(_BYTE *)(((unsigned __int64)buff_id >> 3) + 0x7FFF8000) )
    {
      __asan_report_load4(buff_id);
    }
    isBuffIdDelWhenLeaveScene = BuffExcelConfigMgr::isBuffIdDelWhenLeaveScene(p_buff_config_mgr, *buff_id);
    std::shared_ptr<Config>::~shared_ptr(&v19);
    if ( isBuffIdDelWhenLeaveScene )
      std::set<unsigned int>::insert(v1 + 1, buff_id);
    if ( std::operator!=<Buff>(buff_ptr, 0LL) )
    {
      v6 = std::__shared_ptr_access<Buff,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Buff,(__gnu_cxx::_Lock_policy)2,false,false> *const)buff_ptr);
      if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
        __asan_report_load8(&this->player_);
      BasicComp = Player::getBasicComp(this->player_);
      PlayerTimeMs = PlayerBasicComp::getPlayerTimeMs(BasicComp);
      Buff::pause(v6, PlayerTimeMs);
    }
    std::_Rb_tree_iterator<std::pair<unsigned int const,std::shared_ptr<Buff>>>::operator++(&__for_begin);
  }
  __for_range_0 = v1 + 1;
  __for_begin._M_node = (std::_Rb_tree_iterator<std::pair<unsigned int const,std::shared_ptr<Buff> > >::_Base_ptr)std::set<unsigned int>::begin(v1 + 1)._M_node;
  __for_end._M_node = (std::_Rb_tree_iterator<std::pair<unsigned int const,std::shared_ptr<Buff> > >::_Base_ptr)std::set<unsigned int>::end(__for_range_0)._M_node;
  while ( std::operator!=(
            (const std::_Rb_tree_const_iterator<unsigned int>::_Self *)&__for_begin,
            (const std::_Rb_tree_const_iterator<unsigned int>::_Self *)&__for_end) )
  {
    v9 = (unsigned int *)std::_Rb_tree_const_iterator<unsigned int>::operator*((const std::_Rb_tree_const_iterator<unsigned int> *const)&__for_begin);
    v10 = v9;
    if ( *(_BYTE *)(((unsigned __int64)v9 >> 3) + 0x7FFF8000) != 0
      && (char)(((unsigned __int8)v9 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)v9 >> 3) + 0x7FFF8000) )
    {
      __asan_report_load4(v9);
    }
    PlayerAvatarComp::delTeamBuff(this, *v10);
    std::_Rb_tree_const_iterator<unsigned int>::operator++((std::_Rb_tree_const_iterator<unsigned int> *const)&__for_begin);
  }
  common::milog::MiLogStream::create(
    &v20,
    &common::milog::MiLogDefault::default_log_obj_,
    1u,
    "./src/player/avatar/player_avatar_comp.cpp",
    "onLeaveScene",
    4343);
  v11 = common::milog::MiLogStream::operator<<<char [32],(char *[32])0>(
          &v20,
          (const char (*)[32])"delBuff onLeaveScene, buff_set:");
  common::milog::MiLogStream::operator<<<unsigned int>(v11, v1 + 1);
  common::milog::MiLogStream::~MiLogStream(&v20);
  if ( *(char *)(((unsigned __int64)&this->is_team_buff_recovered_ >> 3) + 0x7FFF8000) < 0 )
    __asan_report_store1(&this->is_team_buff_recovered_, &v1[1], &this->is_team_buff_recovered_);
  this->is_team_buff_recovered_ = 0;
  PlayerAvatarComp::clearMonsterAlertCount(this);
  std::set<std::weak_ptr<Group>,std::owner_less<std::weak_ptr<Group>>,std::allocator<std::weak_ptr<Group>>>::clear(&this->group_wtr_set_);
  std::unordered_map<unsigned int,std::weak_ptr<Group>>::clear(&this->group_wtr_map_);
  PlayerAvatarComp::clearFrameAttackCount(this);
  std::set<unsigned int>::~set(v1 + 1);
  if ( v21 == (char *)v1 )
  {
    *(_QWORD *)(((unsigned __int64)v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_DWORD *)(((unsigned __int64)v1 >> 3) + 0x7FFF800C) = 0;
  }
  else
  {
    *(_QWORD *)v1->_M_t._M_impl.gap0 = 1172321806LL;
    *(_QWORD *)(((unsigned __int64)v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)(((unsigned __int64)v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
};

// Line 4352: range 000000001718CBC6-000000001718CEE9
void __cdecl PlayerAvatarComp::onDungeonSettle(PlayerAvatarComp *const this)
{
  unsigned __int64 v1; // r13
  __int64 v2; // rax
  _DWORD *v3; // r12
  const std::weak_ptr<Group> *v4; // rax
  Group *v5; // rax
  ChallengeComp *ChallengeComp; // r14
  std::set<std::weak_ptr<Group>,std::owner_less<std::weak_ptr<Group> >,std::allocator<std::weak_ptr<Group> > >::iterator __for_begin; // [rsp+18h] [rbp-118h] BYREF
  std::set<std::weak_ptr<Group>,std::owner_less<std::weak_ptr<Group> >,std::allocator<std::weak_ptr<Group> > >::iterator __for_end; // [rsp+20h] [rbp-110h] BYREF
  std::set<std::weak_ptr<Group>,std::owner_less<std::weak_ptr<Group> >,std::allocator<std::weak_ptr<Group> > > *__for_range; // [rsp+28h] [rbp-108h]
  PlayerPtr p_player_ptr; // [rsp+30h] [rbp-100h] BYREF
  char v11[240]; // [rsp+40h] [rbp-F0h] BYREF

  v1 = (unsigned __int64)v11;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_2(192LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "3 48 16 14 group_wtr:4354 80 16 14 group_ptr:4356 112 48 18 group_wtr_set:4353";
  *(_QWORD *)(v1 + 16) = PlayerAvatarComp::onDungeonSettle;
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = 61937;
  v3[536862722] = 62194;
  v3[536862723] = 62194;
  v3[536862725] = -202116109;
  std::set<std::weak_ptr<Group>,std::owner_less<std::weak_ptr<Group>>,std::allocator<std::weak_ptr<Group>>>::set(
    (std::set<std::weak_ptr<Group>,std::owner_less<std::weak_ptr<Group> >,std::allocator<std::weak_ptr<Group> > > *const)(v1 + 112),
    &this->group_wtr_set_);
  __for_range = (std::set<std::weak_ptr<Group>,std::owner_less<std::weak_ptr<Group> >,std::allocator<std::weak_ptr<Group> > > *)(v1 + 112);
  __for_begin._M_node = std::set<std::weak_ptr<Group>,std::owner_less<std::weak_ptr<Group>>,std::allocator<std::weak_ptr<Group>>>::begin((const std::set<std::weak_ptr<Group>,std::owner_less<std::weak_ptr<Group> >,std::allocator<std::weak_ptr<Group> > > *const)(v1 + 112))._M_node;
  __for_end._M_node = std::set<std::weak_ptr<Group>,std::owner_less<std::weak_ptr<Group>>,std::allocator<std::weak_ptr<Group>>>::end((const std::set<std::weak_ptr<Group>,std::owner_less<std::weak_ptr<Group> >,std::allocator<std::weak_ptr<Group> > > *const)(v1 + 112))._M_node;
  while ( std::operator!=(&__for_begin, &__for_end) )
  {
    v4 = std::_Rb_tree_const_iterator<std::weak_ptr<Group>>::operator*(&__for_begin);
    std::weak_ptr<Group>::weak_ptr((std::weak_ptr<Group> *const)(v1 + 48), v4);
    std::weak_ptr<Group>::lock((const std::weak_ptr<Group> *const)(v1 + 80));
    if ( std::operator!=<Group>((const std::shared_ptr<Group> *)(v1 + 80), 0LL) )
    {
      v5 = std::__shared_ptr_access<Group,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Group,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v1 + 80));
      ChallengeComp = Group::getChallengeComp(v5);
      if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
        __asan_report_load8(&this->player_);
      toPtr<Player,Player>((Player *)&p_player_ptr);
      ChallengeComp::notifyOnGuestExit(ChallengeComp, &p_player_ptr);
      std::shared_ptr<Player>::~shared_ptr(&p_player_ptr);
    }
    std::shared_ptr<Group>::~shared_ptr((std::shared_ptr<Group> *const)(v1 + 80));
    std::weak_ptr<Group>::~weak_ptr((std::weak_ptr<Group> *const)(v1 + 48));
    std::_Rb_tree_const_iterator<std::weak_ptr<Group>>::operator++(&__for_begin);
  }
  std::set<std::weak_ptr<Group>,std::owner_less<std::weak_ptr<Group>>,std::allocator<std::weak_ptr<Group>>>::clear(&this->group_wtr_set_);
  std::unordered_map<unsigned int,std::weak_ptr<Group>>::clear(&this->group_wtr_map_);
  std::set<std::weak_ptr<Group>,std::owner_less<std::weak_ptr<Group>>,std::allocator<std::weak_ptr<Group>>>::~set((std::set<std::weak_ptr<Group>,std::owner_less<std::weak_ptr<Group> >,std::allocator<std::weak_ptr<Group> > > *const)(v1 + 112));
  if ( v11 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0LL;
    *(_DWORD *)((v1 >> 3) + 0x7FFF8014) = 0;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
  }
};

// Line 4368: range 000000001718CEEA-000000001718D17E
void __cdecl PlayerAvatarComp::finishAllUnfinishedChallenges(
        PlayerAvatarComp *const this,
        uint32_t exclude_father_index)
{
  unsigned __int64 v2; // r13
  __int64 v3; // rax
  _DWORD *v4; // r12
  const std::weak_ptr<Group> *v5; // rax
  Group *v6; // rax
  ChallengeComp *ChallengeComp; // rax
  std::set<std::weak_ptr<Group>,std::owner_less<std::weak_ptr<Group> >,std::allocator<std::weak_ptr<Group> > >::iterator __for_begin; // [rsp+18h] [rbp-F8h] BYREF
  std::set<std::weak_ptr<Group>,std::owner_less<std::weak_ptr<Group> >,std::allocator<std::weak_ptr<Group> > >::iterator __for_end; // [rsp+20h] [rbp-F0h] BYREF
  std::set<std::weak_ptr<Group>,std::owner_less<std::weak_ptr<Group> >,std::allocator<std::weak_ptr<Group> > > *__for_range; // [rsp+28h] [rbp-E8h]
  char v11[224]; // [rsp+30h] [rbp-E0h] BYREF

  v2 = (unsigned __int64)v11;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_2(192LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "3 48 16 14 group_wtr:4370 80 16 14 group_ptr:4372 112 48 18 group_wtr_set:4369";
  *(_QWORD *)(v2 + 16) = PlayerAvatarComp::finishAllUnfinishedChallenges;
  v4 = (_DWORD *)(v2 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = 61937;
  v4[536862722] = 62194;
  v4[536862723] = 62194;
  v4[536862725] = -202116109;
  std::set<std::weak_ptr<Group>,std::owner_less<std::weak_ptr<Group>>,std::allocator<std::weak_ptr<Group>>>::set(
    (std::set<std::weak_ptr<Group>,std::owner_less<std::weak_ptr<Group> >,std::allocator<std::weak_ptr<Group> > > *const)(v2 + 112),
    &this->group_wtr_set_);
  __for_range = (std::set<std::weak_ptr<Group>,std::owner_less<std::weak_ptr<Group> >,std::allocator<std::weak_ptr<Group> > > *)(v2 + 112);
  __for_begin._M_node = std::set<std::weak_ptr<Group>,std::owner_less<std::weak_ptr<Group>>,std::allocator<std::weak_ptr<Group>>>::begin((const std::set<std::weak_ptr<Group>,std::owner_less<std::weak_ptr<Group> >,std::allocator<std::weak_ptr<Group> > > *const)(v2 + 112))._M_node;
  __for_end._M_node = std::set<std::weak_ptr<Group>,std::owner_less<std::weak_ptr<Group>>,std::allocator<std::weak_ptr<Group>>>::end((const std::set<std::weak_ptr<Group>,std::owner_less<std::weak_ptr<Group> >,std::allocator<std::weak_ptr<Group> > > *const)(v2 + 112))._M_node;
  while ( std::operator!=(&__for_begin, &__for_end) )
  {
    v5 = std::_Rb_tree_const_iterator<std::weak_ptr<Group>>::operator*(&__for_begin);
    std::weak_ptr<Group>::weak_ptr((std::weak_ptr<Group> *const)(v2 + 48), v5);
    std::weak_ptr<Group>::lock((const std::weak_ptr<Group> *const)(v2 + 80));
    if ( std::operator!=<Group>((const std::shared_ptr<Group> *)(v2 + 80), 0LL) )
    {
      v6 = std::__shared_ptr_access<Group,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Group,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 80));
      ChallengeComp = Group::getChallengeComp(v6);
      ChallengeComp::finishUnfinishedChallenges(
        ChallengeComp,
        NONE,
        exclude_father_index,
        PlayerLogBodyChallengeFinish_FinishType_EXIT_SIGHT);
    }
    std::shared_ptr<Group>::~shared_ptr((std::shared_ptr<Group> *const)(v2 + 80));
    std::weak_ptr<Group>::~weak_ptr((std::weak_ptr<Group> *const)(v2 + 48));
    std::_Rb_tree_const_iterator<std::weak_ptr<Group>>::operator++(&__for_begin);
  }
  std::set<std::weak_ptr<Group>,std::owner_less<std::weak_ptr<Group>>,std::allocator<std::weak_ptr<Group>>>::~set((std::set<std::weak_ptr<Group>,std::owner_less<std::weak_ptr<Group> >,std::allocator<std::weak_ptr<Group> > > *const)(v2 + 112));
  if ( v11 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8014) = 0;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
  }
};

// Line 4382: range 000000001718D180-000000001718D410
void __cdecl PlayerAvatarComp::onAvatarFrozen(PlayerAvatarComp *const this, Avatar *avatar)
{
  unsigned __int64 v2; // r13
  __int64 v3; // rax
  _DWORD *v4; // r12
  const std::weak_ptr<Group> *v5; // rax
  Group *v6; // rax
  ChallengeComp *ChallengeComp; // rdx
  std::set<std::weak_ptr<Group>,std::owner_less<std::weak_ptr<Group> >,std::allocator<std::weak_ptr<Group> > >::iterator __for_begin; // [rsp+18h] [rbp-F8h] BYREF
  std::set<std::weak_ptr<Group>,std::owner_less<std::weak_ptr<Group> >,std::allocator<std::weak_ptr<Group> > >::iterator __for_end; // [rsp+20h] [rbp-F0h] BYREF
  std::set<std::weak_ptr<Group>,std::owner_less<std::weak_ptr<Group> >,std::allocator<std::weak_ptr<Group> > > *__for_range; // [rsp+28h] [rbp-E8h]
  char v11[224]; // [rsp+30h] [rbp-E0h] BYREF

  v2 = (unsigned __int64)v11;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_2(192LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "3 48 16 14 group_wtr:4384 80 16 14 group_ptr:4386 112 48 18 group_wtr_set:4383";
  *(_QWORD *)(v2 + 16) = PlayerAvatarComp::onAvatarFrozen;
  v4 = (_DWORD *)(v2 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = 61937;
  v4[536862722] = 62194;
  v4[536862723] = 62194;
  v4[536862725] = -202116109;
  std::set<std::weak_ptr<Group>,std::owner_less<std::weak_ptr<Group>>,std::allocator<std::weak_ptr<Group>>>::set(
    (std::set<std::weak_ptr<Group>,std::owner_less<std::weak_ptr<Group> >,std::allocator<std::weak_ptr<Group> > > *const)(v2 + 112),
    &this->group_wtr_set_);
  __for_range = (std::set<std::weak_ptr<Group>,std::owner_less<std::weak_ptr<Group> >,std::allocator<std::weak_ptr<Group> > > *)(v2 + 112);
  __for_begin._M_node = std::set<std::weak_ptr<Group>,std::owner_less<std::weak_ptr<Group>>,std::allocator<std::weak_ptr<Group>>>::begin((const std::set<std::weak_ptr<Group>,std::owner_less<std::weak_ptr<Group> >,std::allocator<std::weak_ptr<Group> > > *const)(v2 + 112))._M_node;
  __for_end._M_node = std::set<std::weak_ptr<Group>,std::owner_less<std::weak_ptr<Group>>,std::allocator<std::weak_ptr<Group>>>::end((const std::set<std::weak_ptr<Group>,std::owner_less<std::weak_ptr<Group> >,std::allocator<std::weak_ptr<Group> > > *const)(v2 + 112))._M_node;
  while ( std::operator!=(&__for_begin, &__for_end) )
  {
    v5 = std::_Rb_tree_const_iterator<std::weak_ptr<Group>>::operator*(&__for_begin);
    std::weak_ptr<Group>::weak_ptr((std::weak_ptr<Group> *const)(v2 + 48), v5);
    std::weak_ptr<Group>::lock((const std::weak_ptr<Group> *const)(v2 + 80));
    if ( std::operator!=<Group>(0LL, (const std::shared_ptr<Group> *)(v2 + 80)) )
    {
      v6 = std::__shared_ptr_access<Group,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Group,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 80));
      ChallengeComp = Group::getChallengeComp(v6);
      ChallengeComp::onAvatarFrozen(ChallengeComp, avatar);
    }
    std::shared_ptr<Group>::~shared_ptr((std::shared_ptr<Group> *const)(v2 + 80));
    std::weak_ptr<Group>::~weak_ptr((std::weak_ptr<Group> *const)(v2 + 48));
    std::_Rb_tree_const_iterator<std::weak_ptr<Group>>::operator++(&__for_begin);
  }
  std::set<std::weak_ptr<Group>,std::owner_less<std::weak_ptr<Group>>,std::allocator<std::weak_ptr<Group>>>::~set((std::set<std::weak_ptr<Group>,std::owner_less<std::weak_ptr<Group> >,std::allocator<std::weak_ptr<Group> > > *const)(v2 + 112));
  if ( v11 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8014) = 0;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
  }
};

// Line 4397: range 000000001718D412-000000001718D652
std::unordered_set<long unsigned int> *__cdecl PlayerAvatarComp::getMyAvatarGuidSetForTeamProduct(
        std::unordered_set<long unsigned int> *retstr,
        PlayerAvatarComp *const this)
{
  unsigned __int64 v2; // rbx
  __int64 v3; // rax
  _DWORD *v4; // r12
  unsigned __int64 *M_current; // r14
  unsigned __int64 *v6; // rcx
  PlayerMpComp *MpComp; // rax
  const std::vector<long unsigned int> *AvatarVec; // rax
  const unsigned __int64 *v9; // r14
  const std::vector<long unsigned int> *v10; // rax
  const unsigned __int64 *v11; // rcx
  AvatarTeam *avatar_team_ptr; // [rsp+18h] [rbp-98h]
  char v14[144]; // [rsp+20h] [rbp-90h] BYREF

  v2 = (unsigned __int64)v14;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_1(96LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "1 32 24 20 avatar_team_vec:4399";
  *(_QWORD *)(v2 + 16) = PlayerAvatarComp::getMyAvatarGuidSetForTeamProduct;
  v4 = (_DWORD *)(v2 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = -218103808;
  v4[536862722] = -202116109;
  std::unordered_set<unsigned long>::unordered_set(retstr);
  PlayerAvatarComp::getMyAvatarTeamInSceneTeam((std::vector<long unsigned int> *)(v2 + 32), this);
  M_current = std::vector<unsigned long>::end((std::vector<long unsigned int> *const)(v2 + 32))._M_current;
  v6 = std::vector<unsigned long>::begin((std::vector<long unsigned int> *const)(v2 + 32))._M_current;
  std::unordered_set<unsigned long>::insert<__gnu_cxx::__normal_iterator<unsigned long *,std::vector<unsigned long>>>(
    retstr,
    (__gnu_cxx::__normal_iterator<long unsigned int*,std::vector<long unsigned int> >)v6,
    (__gnu_cxx::__normal_iterator<long unsigned int*,std::vector<long unsigned int> >)M_current);
  if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
    __asan_report_load8(&this->player_);
  MpComp = Player::getMpComp(this->player_);
  if ( !PlayerMpComp::isInMpMode(MpComp) )
  {
    avatar_team_ptr = PlayerAvatarComp::findCurAvatarTeam(this);
    if ( avatar_team_ptr )
    {
      AvatarVec = AvatarTeam::getAvatarVec(avatar_team_ptr);
      v9 = std::vector<unsigned long>::end(AvatarVec)._M_current;
      v10 = AvatarTeam::getAvatarVec(avatar_team_ptr);
      v11 = std::vector<unsigned long>::begin(v10)._M_current;
      std::unordered_set<unsigned long>::insert<__gnu_cxx::__normal_iterator<unsigned long const*,std::vector<unsigned long>>>(
        retstr,
        (__gnu_cxx::__normal_iterator<long unsigned int const*,std::vector<long unsigned int> >)v11,
        (__gnu_cxx::__normal_iterator<long unsigned int const*,std::vector<long unsigned int> >)v9);
    }
  }
  std::vector<unsigned long>::~vector((std::vector<long unsigned int> *const)(v2 + 32));
  if ( v14 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8008) = 0;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8008) = -168430091;
  }
  return retstr;
};

// Line 4414: range 000000001718D654-000000001718DC36
void __cdecl PlayerAvatarComp::addMyAvatarFetterExpForTeam(
        PlayerAvatarComp *const this,
        uint32_t add_num,
        const ActionReason *reason)
{
  unsigned __int64 v3; // r13
  __int64 v4; // rax
  _DWORD *v5; // r12
  unsigned __int64 v6; // rax
  common::milog::MiLogStream *v7; // rax
  unsigned __int64 v8; // rax
  unsigned __int64 v9; // rdx
  common::milog::MiLogStream *v10; // r14
  std::__shared_ptr_access<FormalAvatar,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v11; // rax
  std::__shared_ptr_access<FormalAvatar,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v12; // rax
  FetterComp *FetterComp; // rax
  std::__shared_ptr_access<FormalAvatar,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v14; // rax
  FetterComp *v15; // r14
  std::__shared_ptr_access<proto::AvatarFetterDataNotify,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v16; // rax
  google::protobuf::Map<long unsigned int,proto::AvatarFetterInfo> *v17; // rax
  proto::AvatarFetterInfo *v18; // rax
  std::__shared_ptr_access<proto::AvatarFetterDataNotify,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v19; // rax
  google::protobuf::Map<long unsigned int,proto::AvatarFetterInfo> *v20; // rax
  Player *player; // r14
  unsigned int val; // [rsp+2Ch] [rbp-154h] BYREF
  std::unordered_set<long unsigned int>::iterator __for_begin; // [rsp+30h] [rbp-150h] BYREF
  std::unordered_set<long unsigned int>::iterator __for_end; // [rsp+38h] [rbp-148h] BYREF
  std::unordered_set<long unsigned int> *__for_range; // [rsp+40h] [rbp-140h]
  const data::AvatarExcelConfig *avatar_config_ptr; // [rsp+48h] [rbp-138h]
  common::milog::MiLogStream v28; // [rsp+50h] [rbp-130h] BYREF
  char v29[272]; // [rsp+70h] [rbp-110h] BYREF

  v3 = (unsigned __int64)v29;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_2(224LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "4 32 8 9 guid:4417 64 16 15 notify_ptr:4416 96 16 22 formal_avatar_ptr:4419 128 56 20 avatar_guid_set:4415";
  *(_QWORD *)(v3 + 16) = PlayerAvatarComp::addMyAvatarFetterExpForTeam;
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = -218959360;
  v5[536862722] = -219021312;
  v5[536862723] = -219021312;
  v5[536862725] = -218103808;
  v5[536862726] = -202116109;
  PlayerAvatarComp::getMyAvatarGuidSetForTeamProduct((std::unordered_set<long unsigned int> *)(v3 + 128), this);
  common::tools::perf::make_shared<proto::AvatarFetterDataNotify>();
  __for_range = (std::unordered_set<long unsigned int> *)(v3 + 128);
  __for_begin._M_cur = std::unordered_set<unsigned long>::begin((std::unordered_set<long unsigned int> *const)(v3 + 128))._M_cur;
  __for_end._M_cur = std::unordered_set<unsigned long>::end((std::unordered_set<long unsigned int> *const)(v3 + 128))._M_cur;
  while ( std::__detail::operator!=<unsigned long,false>(&__for_begin, &__for_end) )
  {
    v6 = (unsigned __int64)std::__detail::_Node_iterator<unsigned long,true,false>::operator*(&__for_begin);
    if ( *(_BYTE *)((v6 >> 3) + 0x7FFF8000) )
      v6 = __asan_report_load8(v6);
    *(_QWORD *)(v3 + 32) = *(_QWORD *)v6;
    PlayerAvatarComp::findFormalAvatar((const PlayerAvatarComp *const)(v3 + 96), (uint64_t)this, *(_QWORD *)(v3 + 32));
    if ( std::operator==<FormalAvatar>((const std::shared_ptr<FormalAvatar> *)(v3 + 96), 0LL) )
    {
      common::milog::MiLogStream::create(
        &v28,
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/player/avatar/player_avatar_comp.cpp",
        "addMyAvatarFetterExpForTeam",
        4422);
      v7 = common::milog::MiLogStream::operator<<<char [30],(char *[30])0>(
             &v28,
             (const char (*)[30])"findFormalAvatar fails, guid:");
      common::milog::MiLogStream::operator<<<unsigned long,(unsigned long *)0>(v7, (const unsigned __int64 *)(v3 + 32));
      common::milog::MiLogStream::~MiLogStream(&v28);
    }
    else
    {
      v8 = (unsigned __int64)std::__shared_ptr_access<FormalAvatar,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<FormalAvatar,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 96));
      if ( *(_BYTE *)((v8 >> 3) + 0x7FFF8000) )
        v8 = __asan_report_load8(v8);
      v9 = *(_QWORD *)v8 + 312LL;
      if ( *(_BYTE *)((v9 >> 3) + 0x7FFF8000) )
        v8 = __asan_report_load8(*(_QWORD *)v8 + 312LL);
      avatar_config_ptr = (const data::AvatarExcelConfig *)(*(__int64 (__fastcall **)(unsigned __int64))v9)(v8);
      if ( avatar_config_ptr )
      {
        if ( *(_BYTE *)(((unsigned __int64)&avatar_config_ptr->avatar_identity_type >> 3) + 0x7FFF8000) != 0
          && *(_BYTE *)(((unsigned __int64)&avatar_config_ptr->avatar_identity_type >> 3) + 0x7FFF8000) <= 3 )
        {
          __asan_report_load4(&avatar_config_ptr->avatar_identity_type);
        }
        if ( avatar_config_ptr->avatar_identity_type )
        {
          v12 = std::__shared_ptr_access<FormalAvatar,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<FormalAvatar,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 96));
          FetterComp = FormalAvatar::getFetterComp(v12);
          if ( FetterComp::addExpNumber(FetterComp, add_num, reason) )
          {
            v14 = std::__shared_ptr_access<FormalAvatar,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<FormalAvatar,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 96));
            v15 = FormalAvatar::getFetterComp(v14);
            v16 = std::__shared_ptr_access<proto::AvatarFetterDataNotify,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<proto::AvatarFetterDataNotify,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 64));
            v17 = proto::AvatarFetterDataNotify::mutable_fetter_info_map(v16);
            v18 = google::protobuf::Map<unsigned long,proto::AvatarFetterInfo>::operator[](
                    v17,
                    (const google::protobuf::Map<long unsigned int,proto::AvatarFetterInfo>::key_type *)(v3 + 32));
            FetterComp::toClientFetterInfo(v15, v18);
          }
        }
      }
      else
      {
        common::milog::MiLogStream::create(
          &v28,
          &common::milog::MiLogDefault::default_log_obj_,
          3u,
          "./src/player/avatar/player_avatar_comp.cpp",
          "addMyAvatarFetterExpForTeam",
          4428);
        v10 = common::milog::MiLogStream::operator<<<char [38],(char *[38])0>(
                &v28,
                (const char (*)[38])"find avatar_config failed avatar_id: ");
        v11 = std::__shared_ptr_access<FormalAvatar,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<FormalAvatar,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 96));
        val = Avatar::getAvatarId(v11);
        common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v10, &val);
        common::milog::MiLogStream::~MiLogStream(&v28);
      }
    }
    std::shared_ptr<FormalAvatar>::~shared_ptr((std::shared_ptr<FormalAvatar> *const)(v3 + 96));
    std::__detail::_Node_iterator<unsigned long,true,false>::operator++(&__for_begin);
  }
  v19 = std::__shared_ptr_access<proto::AvatarFetterDataNotify,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<proto::AvatarFetterDataNotify,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 64));
  v20 = proto::AvatarFetterDataNotify::mutable_fetter_info_map(v19);
  if ( !google::protobuf::Map<unsigned long,proto::AvatarFetterInfo>::empty(v20) )
  {
    if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
      __asan_report_load8(&this->player_);
    player = this->player_;
    std::dynamic_pointer_cast<google::protobuf::Message const,proto::AvatarFetterDataNotify>((const std::shared_ptr<proto::AvatarFetterDataNotify> *)(v3 + 96));
    Player::sendMessage(player, (common::minet::ConstMessagePtr *)(v3 + 96), 0LL);
    std::shared_ptr<google::protobuf::Message const>::~shared_ptr((std::shared_ptr<const google::protobuf::Message> *const)(v3 + 96));
  }
  std::shared_ptr<proto::AvatarFetterDataNotify>::~shared_ptr((std::shared_ptr<proto::AvatarFetterDataNotify> *const)(v3 + 64));
  std::unordered_set<unsigned long>::~unordered_set((std::unordered_set<long unsigned int> *const)(v3 + 128));
  if ( v29 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8014) = 0LL;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8018) = -168430091;
  }
};

// Line 4448: range 000000001718DC38-000000001718E1A5
void __cdecl PlayerAvatarComp::addMyAvatarFetterExpForIds(
        PlayerAvatarComp *const this,
        uint32_t add_num,
        const std::set<unsigned int> *avatar_id_set,
        const ActionReason *reason)
{
  unsigned __int64 v4; // r12
  __int64 v5; // rax
  _DWORD *v6; // r13
  std::_Rb_tree_const_iterator<unsigned int>::reference v7; // rax
  _DWORD *v8; // rdx
  common::milog::MiLogStream *v9; // rax
  unsigned __int64 v10; // rax
  unsigned __int64 v11; // rdx
  common::milog::MiLogStream *v12; // rax
  std::__shared_ptr_access<FormalAvatar,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v13; // rax
  FetterComp *FetterComp; // rax
  std::__shared_ptr_access<FormalAvatar,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v15; // rax
  FetterComp *v16; // r14
  std::__shared_ptr_access<proto::AvatarFetterDataNotify,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v17; // rax
  google::protobuf::Map<long unsigned int,proto::AvatarFetterInfo> *v18; // r15
  std::__shared_ptr_access<FormalAvatar,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v19; // rax
  proto::AvatarFetterInfo *v20; // rax
  std::__shared_ptr_access<proto::AvatarFetterDataNotify,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v21; // rax
  google::protobuf::Map<long unsigned int,proto::AvatarFetterInfo> *v22; // rax
  Player *player; // r14
  std::set<unsigned int>::iterator __for_begin; // [rsp+38h] [rbp-F8h] BYREF
  std::set<unsigned int>::iterator __for_end; // [rsp+40h] [rbp-F0h] BYREF
  google::protobuf::Map<long unsigned int,proto::AvatarFetterInfo>::key_type key; // [rsp+48h] [rbp-E8h] BYREF
  const std::set<unsigned int> *__for_range; // [rsp+50h] [rbp-E0h]
  const data::AvatarExcelConfig *avatar_config_ptr; // [rsp+58h] [rbp-D8h]
  common::milog::MiLogStream v31; // [rsp+60h] [rbp-D0h] BYREF
  char v32[176]; // [rsp+80h] [rbp-B0h] BYREF

  v4 = (unsigned __int64)v32;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v5 = __asan_stack_malloc_1(128LL);
    if ( v5 )
      v4 = v5;
  }
  *(_QWORD *)v4 = 1102416563LL;
  *(_QWORD *)(v4 + 8) = "3 48 4 14 avatar_id:4450 64 16 15 notify_ptr:4449 96 16 22 formal_avatar_ptr:4452";
  *(_QWORD *)(v4 + 16) = PlayerAvatarComp::addMyAvatarFetterExpForIds;
  v6 = (_DWORD *)(v4 >> 3);
  v6[536862720] = -235802127;
  v6[536862721] = -234556943;
  v6[536862722] = -219021312;
  v6[536862723] = -202178560;
  common::tools::perf::make_shared<proto::AvatarFetterDataNotify>();
  __for_range = avatar_id_set;
  __for_begin._M_node = std::set<unsigned int>::begin(avatar_id_set)._M_node;
  __for_end._M_node = std::set<unsigned int>::end(avatar_id_set)._M_node;
  while ( std::operator!=(&__for_begin, &__for_end) )
  {
    v7 = std::_Rb_tree_const_iterator<unsigned int>::operator*(&__for_begin);
    v8 = v7;
    if ( *(_BYTE *)(((unsigned __int64)v7 >> 3) + 0x7FFF8000) != 0
      && (char)(((unsigned __int8)v7 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)v7 >> 3) + 0x7FFF8000) )
    {
      __asan_report_load4(v7);
    }
    *(_DWORD *)(v4 + 48) = *v8;
    PlayerAvatarComp::findFormalAvatarByAvatarId((const PlayerAvatarComp *const)(v4 + 96), (uint32_t)this);
    if ( std::operator==<FormalAvatar>((const std::shared_ptr<FormalAvatar> *)(v4 + 96), 0LL) )
    {
      common::milog::MiLogStream::create(
        &v31,
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/player/avatar/player_avatar_comp.cpp",
        "addMyAvatarFetterExpForIds",
        4455);
      v9 = common::milog::MiLogStream::operator<<<char [35],(char *[35])0>(
             &v31,
             (const char (*)[35])"findFormalAvatar fails, avatar_id:");
      common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v9, (const unsigned int *)(v4 + 48));
      common::milog::MiLogStream::~MiLogStream(&v31);
    }
    else
    {
      v10 = (unsigned __int64)std::__shared_ptr_access<FormalAvatar,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<FormalAvatar,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 96));
      if ( *(_BYTE *)((v10 >> 3) + 0x7FFF8000) )
        v10 = __asan_report_load8(v10);
      v11 = *(_QWORD *)v10 + 312LL;
      if ( *(_BYTE *)((v11 >> 3) + 0x7FFF8000) )
        v10 = __asan_report_load8(*(_QWORD *)v10 + 312LL);
      avatar_config_ptr = (const data::AvatarExcelConfig *)(*(__int64 (__fastcall **)(unsigned __int64))v11)(v10);
      if ( avatar_config_ptr )
      {
        if ( *(_BYTE *)(((unsigned __int64)&avatar_config_ptr->avatar_identity_type >> 3) + 0x7FFF8000) != 0
          && *(_BYTE *)(((unsigned __int64)&avatar_config_ptr->avatar_identity_type >> 3) + 0x7FFF8000) <= 3 )
        {
          __asan_report_load4(&avatar_config_ptr->avatar_identity_type);
        }
        if ( avatar_config_ptr->avatar_identity_type )
        {
          v13 = std::__shared_ptr_access<FormalAvatar,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<FormalAvatar,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 96));
          FetterComp = FormalAvatar::getFetterComp(v13);
          if ( FetterComp::addExpNumber(FetterComp, add_num, reason) )
          {
            v15 = std::__shared_ptr_access<FormalAvatar,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<FormalAvatar,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 96));
            v16 = FormalAvatar::getFetterComp(v15);
            v17 = std::__shared_ptr_access<proto::AvatarFetterDataNotify,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<proto::AvatarFetterDataNotify,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 64));
            v18 = proto::AvatarFetterDataNotify::mutable_fetter_info_map(v17);
            v19 = std::__shared_ptr_access<FormalAvatar,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<FormalAvatar,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 96));
            key = Avatar::getGuid(v19);
            v20 = google::protobuf::Map<unsigned long,proto::AvatarFetterInfo>::operator[](v18, &key);
            FetterComp::toClientFetterInfo(v16, v20);
          }
        }
      }
      else
      {
        common::milog::MiLogStream::create(
          &v31,
          &common::milog::MiLogDefault::default_log_obj_,
          3u,
          "./src/player/avatar/player_avatar_comp.cpp",
          "addMyAvatarFetterExpForIds",
          4461);
        v12 = common::milog::MiLogStream::operator<<<char [38],(char *[38])0>(
                &v31,
                (const char (*)[38])"find avatar_config failed avatar_id: ");
        common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v12, (const unsigned int *)(v4 + 48));
        common::milog::MiLogStream::~MiLogStream(&v31);
      }
    }
    std::shared_ptr<FormalAvatar>::~shared_ptr((std::shared_ptr<FormalAvatar> *const)(v4 + 96));
    std::_Rb_tree_const_iterator<unsigned int>::operator++(&__for_begin);
  }
  v21 = std::__shared_ptr_access<proto::AvatarFetterDataNotify,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<proto::AvatarFetterDataNotify,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 64));
  v22 = proto::AvatarFetterDataNotify::mutable_fetter_info_map(v21);
  if ( !google::protobuf::Map<unsigned long,proto::AvatarFetterInfo>::empty(v22) )
  {
    if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
      __asan_report_load8(&this->player_);
    player = this->player_;
    std::dynamic_pointer_cast<google::protobuf::Message const,proto::AvatarFetterDataNotify>((const std::shared_ptr<proto::AvatarFetterDataNotify> *)(v4 + 96));
    Player::sendMessage(player, (common::minet::ConstMessagePtr *)(v4 + 96), 0LL);
    std::shared_ptr<google::protobuf::Message const>::~shared_ptr((std::shared_ptr<const google::protobuf::Message> *const)(v4 + 96));
  }
  std::shared_ptr<proto::AvatarFetterDataNotify>::~shared_ptr((std::shared_ptr<proto::AvatarFetterDataNotify> *const)(v4 + 64));
  if ( v32 == (char *)v4 )
  {
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v4 = 1172321806LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
};

// Line 4481: range 000000001718E1A6-000000001718E27E
std::vector<long unsigned int> *__cdecl PlayerAvatarComp::getAllAvatarGuids(
        std::vector<long unsigned int> *retstr,
        PlayerAvatarComp *const this)
{
  std::map<long unsigned int,std::shared_ptr<Avatar>>::iterator __for_begin; // [rsp+10h] [rbp-40h] BYREF
  std::map<long unsigned int,std::shared_ptr<Avatar>>::iterator __for_end; // [rsp+18h] [rbp-38h] BYREF
  std::map<long unsigned int,std::shared_ptr<Avatar>> *__for_range; // [rsp+20h] [rbp-30h]
  std::pair<long unsigned int const,std::shared_ptr<Avatar> > *__in; // [rsp+28h] [rbp-28h]
  std::tuple_element<0,std::pair<long unsigned int const,std::shared_ptr<Avatar> > >::type *guid; // [rsp+30h] [rbp-20h]
  std::tuple_element<1,std::pair<long unsigned int const,std::shared_ptr<Avatar> > >::type *avatar_ptr; // [rsp+38h] [rbp-18h]

  std::vector<unsigned long>::vector(retstr);
  __for_range = &this->avatar_map_;
  __for_begin._M_node = std::map<unsigned long,std::shared_ptr<Avatar>>::begin(&this->avatar_map_)._M_node;
  __for_end._M_node = std::map<unsigned long,std::shared_ptr<Avatar>>::end(&this->avatar_map_)._M_node;
  while ( std::operator!=(&__for_begin, &__for_end) )
  {
    __in = std::_Rb_tree_iterator<std::pair<unsigned long const,std::shared_ptr<Avatar>>>::operator*(&__for_begin);
    guid = std::get<0ul,unsigned long const,std::shared_ptr<Avatar>>(__in);
    avatar_ptr = std::get<1ul,unsigned long const,std::shared_ptr<Avatar>>(__in);
    std::vector<unsigned long>::push_back(retstr, guid);
    std::_Rb_tree_iterator<std::pair<unsigned long const,std::shared_ptr<Avatar>>>::operator++(&__for_begin);
  }
  return retstr;
};

// Line 4491: range 000000001718E280-000000001718E48B
uint32_t __cdecl PlayerAvatarComp::getAvatarExpeditionNotNoneCount(PlayerAvatarComp *const this)
{
  unsigned __int64 v1; // rbx
  __int64 v2; // rax
  unsigned __int64 v3; // r13
  std::__shared_ptr_access<FormalAvatar,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v4; // rax
  ExpeditionComp *ExpeditionComp; // rax
  uint32_t result; // eax
  uint32_t count; // [rsp+1Ch] [rbp-A4h]
  std::map<long unsigned int,std::shared_ptr<Avatar>>::iterator __for_begin; // [rsp+20h] [rbp-A0h] BYREF
  std::map<long unsigned int,std::shared_ptr<Avatar>>::iterator __for_end; // [rsp+28h] [rbp-98h] BYREF
  std::map<long unsigned int,std::shared_ptr<Avatar>> *__for_range; // [rsp+30h] [rbp-90h]
  std::pair<long unsigned int const,std::shared_ptr<Avatar> > *__in; // [rsp+38h] [rbp-88h]
  std::tuple_element<0,std::pair<long unsigned int const,std::shared_ptr<Avatar> > >::type *guid; // [rsp+40h] [rbp-80h]
  std::tuple_element<1,std::pair<long unsigned int const,std::shared_ptr<Avatar> > >::type *avatar_ptr; // [rsp+48h] [rbp-78h]
  char v14[112]; // [rsp+50h] [rbp-70h] BYREF

  v1 = (unsigned __int64)v14;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_0(64LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "1 32 16 22 formal_avatar_ptr:4495";
  *(_QWORD *)(v1 + 16) = PlayerAvatarComp::getAvatarExpeditionNotNoneCount;
  v3 = v1 >> 3;
  *(_DWORD *)(v3 + 2147450880) = -235802127;
  *(_DWORD *)(v3 + 2147450884) = -202178560;
  count = 0;
  __for_range = &this->avatar_map_;
  __for_begin._M_node = std::map<unsigned long,std::shared_ptr<Avatar>>::begin(&this->avatar_map_)._M_node;
  __for_end._M_node = std::map<unsigned long,std::shared_ptr<Avatar>>::end(&this->avatar_map_)._M_node;
  while ( std::operator!=(&__for_begin, &__for_end) )
  {
    __in = std::_Rb_tree_iterator<std::pair<unsigned long const,std::shared_ptr<Avatar>>>::operator*(&__for_begin);
    guid = std::get<0ul,unsigned long const,std::shared_ptr<Avatar>>(__in);
    avatar_ptr = std::get<1ul,unsigned long const,std::shared_ptr<Avatar>>(__in);
    std::dynamic_pointer_cast<FormalAvatar,Avatar>((const std::shared_ptr<Avatar> *)(v1 + 32));
    if ( !std::operator==<FormalAvatar>(0LL, (const std::shared_ptr<FormalAvatar> *)(v1 + 32)) )
    {
      v4 = std::__shared_ptr_access<FormalAvatar,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<FormalAvatar,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v1 + 32));
      ExpeditionComp = FormalAvatar::getExpeditionComp(v4);
      if ( ExpeditionComp::isExpeditionNotNone(ExpeditionComp) )
        ++count;
    }
    std::shared_ptr<FormalAvatar>::~shared_ptr((std::shared_ptr<FormalAvatar> *const)(v1 + 32));
    std::_Rb_tree_iterator<std::pair<unsigned long const,std::shared_ptr<Avatar>>>::operator++(&__for_begin);
  }
  result = count;
  if ( v14 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 4509: range 000000001718E48C-000000001718E6DF
bool __cdecl PlayerAvatarComp::isExpeditionIdInNoneState(PlayerAvatarComp *const this, uint32_t id)
{
  unsigned __int64 v2; // rbx
  __int64 v3; // rax
  unsigned __int64 v4; // r13
  int v5; // r14d
  std::__shared_ptr_access<FormalAvatar,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v6; // rax
  ExpeditionComp *ExpeditionComp; // rax
  std::__shared_ptr_access<FormalAvatar,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v8; // rax
  ExpeditionComp *v9; // rax
  bool result; // al
  bool v12; // [rsp+3h] [rbp-ADh]
  std::map<long unsigned int,std::shared_ptr<Avatar>>::iterator __for_begin; // [rsp+10h] [rbp-A0h] BYREF
  std::map<long unsigned int,std::shared_ptr<Avatar>>::iterator __for_end; // [rsp+18h] [rbp-98h] BYREF
  std::map<long unsigned int,std::shared_ptr<Avatar>> *__for_range; // [rsp+20h] [rbp-90h]
  std::pair<long unsigned int const,std::shared_ptr<Avatar> > *__in; // [rsp+28h] [rbp-88h]
  std::tuple_element<0,std::pair<long unsigned int const,std::shared_ptr<Avatar> > >::type *guid; // [rsp+30h] [rbp-80h]
  std::tuple_element<1,std::pair<long unsigned int const,std::shared_ptr<Avatar> > >::type *avatar_ptr; // [rsp+38h] [rbp-78h]
  char v19[112]; // [rsp+40h] [rbp-70h] BYREF

  v2 = (unsigned __int64)v19;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_0(64LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "1 32 16 22 formal_avatar_ptr:4512";
  *(_QWORD *)(v2 + 16) = PlayerAvatarComp::isExpeditionIdInNoneState;
  v4 = v2 >> 3;
  *(_DWORD *)(v4 + 2147450880) = -235802127;
  *(_DWORD *)(v4 + 2147450884) = -202178560;
  __for_range = &this->avatar_map_;
  __for_begin._M_node = std::map<unsigned long,std::shared_ptr<Avatar>>::begin(&this->avatar_map_)._M_node;
  __for_end._M_node = std::map<unsigned long,std::shared_ptr<Avatar>>::end(&this->avatar_map_)._M_node;
  while ( std::operator!=(&__for_begin, &__for_end) )
  {
    __in = std::_Rb_tree_iterator<std::pair<unsigned long const,std::shared_ptr<Avatar>>>::operator*(&__for_begin);
    guid = std::get<0ul,unsigned long const,std::shared_ptr<Avatar>>(__in);
    avatar_ptr = std::get<1ul,unsigned long const,std::shared_ptr<Avatar>>(__in);
    std::dynamic_pointer_cast<FormalAvatar,Avatar>((const std::shared_ptr<Avatar> *)(v2 + 32));
    if ( std::operator==<FormalAvatar>(0LL, (const std::shared_ptr<FormalAvatar> *)(v2 + 32)) )
    {
      v5 = 0;
    }
    else
    {
      v6 = std::__shared_ptr_access<FormalAvatar,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<FormalAvatar,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 32));
      ExpeditionComp = FormalAvatar::getExpeditionComp(v6);
      if ( ExpeditionComp::isExpeditionNotNone(ExpeditionComp)
        && (v8 = std::__shared_ptr_access<FormalAvatar,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<FormalAvatar,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 32)),
            v9 = FormalAvatar::getExpeditionComp(v8),
            id == ExpeditionComp::getExpeditionId(v9)) )
      {
        v12 = 0;
        v5 = 1;
      }
      else
      {
        v5 = 2;
      }
    }
    std::shared_ptr<FormalAvatar>::~shared_ptr((std::shared_ptr<FormalAvatar> *const)(v2 + 32));
    if ( v5 && v5 != 2 )
      goto LABEL_19;
    std::_Rb_tree_iterator<std::pair<unsigned long const,std::shared_ptr<Avatar>>>::operator++(&__for_begin);
  }
  v12 = 1;
LABEL_19:
  result = v12;
  if ( v19 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 4526: range 000000001718E6E0-000000001718E8B2
uint32_t __cdecl PlayerAvatarComp::getAvatarExpeditionCountLimit(PlayerAvatarComp *const this)
{
  unsigned __int64 v1; // rbx
  __int64 v2; // rax
  unsigned __int64 v3; // r13
  std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v4; // rax
  bool v5; // r14
  uint32_t result; // eax
  PlayerExcelConfigMgr *p_player_config_mgr; // r14
  Player *Player; // rax
  PlayerBasicComp *BasicComp; // rax
  uint32_t Level; // eax
  std::shared_ptr<Config> v11; // [rsp+10h] [rbp-80h] BYREF
  char v12[112]; // [rsp+20h] [rbp-70h] BYREF

  v1 = (unsigned __int64)v12;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_0(64LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "1 32 4 16 count_limit:4527";
  *(_QWORD *)(v1 + 16) = PlayerAvatarComp::getAvatarExpeditionCountLimit;
  v3 = v1 >> 3;
  *(_DWORD *)(v3 + 2147450880) = -235802127;
  *(_DWORD *)(v3 + 2147450884) = -202116348;
  *(_DWORD *)(v1 + 32) = 0;
  ServiceBox::findService<GameserverService>();
  GameserverService::getConfig((GameserverService *const)&v11);
  v4 = std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false> *const)&v11);
  v5 = ConstValueExcelConfigMgr::findConstValue<unsigned int>(
         &v4->design_config.txt_config_mgr.const_value_config_mgr,
         CONST_VALUE_EXPEDITION_INIT_LIMIT,
         (unsigned int *)(v1 + 32)) != 0;
  std::shared_ptr<Config>::~shared_ptr(&v11);
  if ( v5 )
  {
    result = 0;
  }
  else
  {
    ServiceBox::findService<GameserverService>();
    GameserverService::getConfig((GameserverService *const)&v11);
    p_player_config_mgr = &std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false> *const)&v11)->design_config.txt_config_mgr.player_config_mgr;
    Player = PlayerCompBase::getPlayer(this);
    BasicComp = Player::getBasicComp(Player);
    Level = PlayerBasicComp::getLevel(BasicComp);
    *(_DWORD *)(v1 + 32) += PlayerExcelConfigMgr::getExpeditionLimitAddByPlayerLevel(p_player_config_mgr, Level);
    std::shared_ptr<Config>::~shared_ptr(&v11);
    result = *(_DWORD *)(v1 + 32);
  }
  if ( v12 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 4537: range 000000001718E8B4-000000001718F2A4
__int64 __fastcall PlayerAvatarComp::checkAvatarTeamCanSetUp(
        PlayerAvatarComp *const this,
        uint32_t team_id,
        const std::vector<long unsigned int> *avatar_guid_vec)
{
  unsigned int v3; // r14d
  unsigned __int64 v4; // r13
  __int64 v5; // rax
  _DWORD *v6; // r12
  common::milog::MiLogStream *v7; // rax
  common::milog::MiLogStream *v8; // rbx
  common::milog::MiLogStream *v9; // rcx
  unsigned __int64 v10; // rax
  std::pair<std::__detail::_Node_iterator<long unsigned int,true,false>,bool> v11; // rax
  common::milog::MiLogStream *v12; // rax
  common::milog::MiLogStream *v13; // rax
  std::_Rb_tree_iterator<std::pair<long unsigned int const,std::shared_ptr<Avatar> > >::pointer v14; // rax
  common::milog::MiLogStream *v15; // rax
  int v16; // r15d
  bool isAvatarSwitchClosed; // r15
  unsigned __int64 v18; // rax
  unsigned __int64 v19; // rax
  __int64 result; // rax
  std::vector<long unsigned int>::const_iterator __for_begin; // [rsp+28h] [rbp-228h] BYREF
  std::vector<long unsigned int>::const_iterator __for_end; // [rsp+30h] [rbp-220h] BYREF
  const std::vector<long unsigned int> *__for_range; // [rsp+38h] [rbp-218h]
  const std::vector<long unsigned int> *__for_range_0; // [rsp+40h] [rbp-210h]
  std::unordered_set<long unsigned int> *__for_range_1; // [rsp+48h] [rbp-208h]
  std::shared_ptr<Avatar> p_avatar_ptr; // [rsp+50h] [rbp-200h] BYREF
  common::milog::MiLogStream v28; // [rsp+60h] [rbp-1F0h] BYREF
  common::milog::MiLogStream v29; // [rsp+80h] [rbp-1D0h] BYREF
  char v30[432]; // [rsp+A0h] [rbp-1B0h] BYREF

  v4 = (unsigned __int64)v30;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v5 = __asan_stack_malloc_3(384LL);
    if ( v5 )
      v4 = v5;
  }
  *(_QWORD *)v4 = 1102416563LL;
  *(_QWORD *)(v4 + 8) = "8 48 4 12 team_id:4536 64 8 7 it:4539 96 8 9 guid:4551 128 8 9 guid:4593 160 8 7 it:4560 192 16 "
                        "15 avatar_ptr:4566 224 24 30 avatar_guid_with_temp_vec:4584 288 56 16 avatar_uset:4550";
  *(_QWORD *)(v4 + 16) = PlayerAvatarComp::checkAvatarTeamCanSetUp;
  v6 = (_DWORD *)(v4 >> 3);
  v6[536862720] = -235802127;
  v6[536862721] = -234556943;
  v6[536862722] = -218959360;
  v6[536862723] = -218959360;
  v6[536862724] = -218959360;
  v6[536862725] = -218959360;
  v6[536862726] = -219021312;
  v6[536862727] = -234881024;
  v6[536862728] = -218959118;
  v6[536862730] = -218103808;
  v6[536862731] = -202116109;
  *(_DWORD *)(v4 + 48) = team_id;
  *(std::map<unsigned int,AvatarTeam>::iterator *)(v4 + 64) = std::map<unsigned int,AvatarTeam>::find(
                                                                &this->avatar_team_map_,
                                                                (const std::map<unsigned int,AvatarTeam>::key_type *)(v4 + 48));
  __for_end._M_current = (const unsigned __int64 *)std::map<unsigned int,AvatarTeam>::end(&this->avatar_team_map_)._M_node;
  if ( std::operator==(
         (const std::_Rb_tree_iterator<std::pair<unsigned int const,AvatarTeam> >::_Self *)(v4 + 64),
         (const std::_Rb_tree_iterator<std::pair<unsigned int const,AvatarTeam> >::_Self *)&__for_end) )
  {
    common::milog::MiLogStream::create(
      &v29,
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/player/avatar/player_avatar_comp.cpp",
      "checkAvatarTeamCanSetUp",
      4542);
    v7 = common::milog::MiLogStream::operator<<<char [28],(char *[28])0>(&v29, (const char (*)[28])off_26040FE0);
    common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v7, (const unsigned int *)(v4 + 48));
    common::milog::MiLogStream::~MiLogStream(&v29);
    v3 = 120;
  }
  else if ( std::vector<unsigned long>::size(avatar_guid_vec) <= 4 )
  {
    std::unordered_set<unsigned long>::unordered_set((std::unordered_set<long unsigned int> *const)(v4 + 288));
    __for_range = avatar_guid_vec;
    __for_begin._M_current = std::vector<unsigned long>::begin(avatar_guid_vec)._M_current;
    *(std::vector<long unsigned int>::const_iterator *)(v4 + 128) = std::vector<unsigned long>::end(__for_range);
    while ( __gnu_cxx::operator!=<unsigned long const*,std::vector<unsigned long>>(
              &__for_begin,
              (const __gnu_cxx::__normal_iterator<long unsigned int const*,std::vector<long unsigned int> > *)(v4 + 128)) )
    {
      v10 = (unsigned __int64)__gnu_cxx::__normal_iterator<unsigned long const*,std::vector<unsigned long>>::operator*(&__for_begin);
      if ( *(_BYTE *)((v10 >> 3) + 0x7FFF8000) )
        v10 = __asan_report_load8(v10);
      *(_QWORD *)(v4 + 96) = *(_QWORD *)v10;
      v11 = std::unordered_set<unsigned long>::emplace<unsigned long &>(
              (std::unordered_set<long unsigned int> *const)(v4 + 288),
              (unsigned __int64 *)(v4 + 96),
              (unsigned __int64 *)(v4 + 96));
      if ( !v11.second )
      {
        common::milog::MiLogStream::create(
          &v28,
          &common::milog::MiLogDefault::default_log_obj_,
          1u,
          "./src/player/avatar/player_avatar_comp.cpp",
          "checkAvatarTeamCanSetUp",
          4556);
        v12 = common::milog::MiLogStream::operator<<<char [23],(char *[23])0>(
                &v28,
                (const char (*)[23])"duplicate avatar guid:");
        common::milog::MiLogStream::operator<<<unsigned long,(unsigned long *)0>(
          v12,
          (const unsigned __int64 *)(v4 + 96));
        common::milog::MiLogStream::~MiLogStream(&v28);
        v3 = 106;
        goto LABEL_42;
      }
      *(std::map<long unsigned int,std::shared_ptr<Avatar>>::iterator *)(v4 + 160) = std::map<unsigned long,std::shared_ptr<Avatar>>::find(
                                                                                       &this->avatar_map_,
                                                                                       (const std::map<long unsigned int,std::shared_ptr<Avatar>>::key_type *)(v4 + 96));
      __for_end._M_current = (const unsigned __int64 *)std::map<unsigned long,std::shared_ptr<Avatar>>::end(&this->avatar_map_)._M_node;
      if ( std::operator==(
             (const std::_Rb_tree_iterator<std::pair<long unsigned int const,std::shared_ptr<Avatar> > >::_Self *)(v4 + 160),
             (const std::_Rb_tree_iterator<std::pair<long unsigned int const,std::shared_ptr<Avatar> > >::_Self *)&__for_end) )
      {
        common::milog::MiLogStream::create(
          &v29,
          &common::milog::MiLogDefault::default_log_obj_,
          3u,
          "./src/player/avatar/player_avatar_comp.cpp",
          "checkAvatarTeamCanSetUp",
          4563);
        v13 = common::milog::MiLogStream::operator<<<char [27],(char *[27])0>(&v29, (const char (*)[27])off_260410C0);
        common::milog::MiLogStream::operator<<<unsigned long,(unsigned long *)0>(
          v13,
          (const unsigned __int64 *)(v4 + 96));
        common::milog::MiLogStream::~MiLogStream(&v29);
        v3 = 104;
        goto LABEL_42;
      }
      v14 = std::_Rb_tree_iterator<std::pair<unsigned long const,std::shared_ptr<Avatar>>>::operator->((const std::_Rb_tree_iterator<std::pair<long unsigned int const,std::shared_ptr<Avatar> > > *const)(v4 + 160));
      std::shared_ptr<Avatar>::shared_ptr((std::shared_ptr<Avatar> *const)(v4 + 192), &v14->second);
      if ( std::operator==<Avatar>(0LL, (const std::shared_ptr<Avatar> *)(v4 + 192)) )
      {
        common::milog::MiLogStream::create(
          &v29,
          &common::milog::MiLogDefault::default_log_obj_,
          3u,
          "./src/player/avatar/player_avatar_comp.cpp",
          "checkAvatarTeamCanSetUp",
          4569);
        v15 = common::milog::MiLogStream::operator<<<char [26],(char *[26])0>(
                &v29,
                (const char (*)[26])"avatar_ptr nullptr, guid:");
        common::milog::MiLogStream::operator<<<unsigned long,(unsigned long *)0>(
          v15,
          (const unsigned __int64 *)(v4 + 96));
        common::milog::MiLogStream::~MiLogStream(&v29);
        v3 = -1;
        v16 = 0;
      }
      else
      {
        std::shared_ptr<Avatar>::shared_ptr(&p_avatar_ptr, (const std::shared_ptr<Avatar> *)(v4 + 192));
        isAvatarSwitchClosed = PlayerAvatarComp::isAvatarSwitchClosed(this, &p_avatar_ptr);
        std::shared_ptr<Avatar>::~shared_ptr(&p_avatar_ptr);
        if ( isAvatarSwitchClosed )
        {
          v3 = 142;
          v16 = 0;
        }
        else
        {
          v16 = 1;
        }
      }
      std::shared_ptr<Avatar>::~shared_ptr((std::shared_ptr<Avatar> *const)(v4 + 192));
      if ( v16 != 1 )
        goto LABEL_42;
      __gnu_cxx::__normal_iterator<unsigned long const*,std::vector<unsigned long>>::operator++(&__for_begin);
    }
    if ( *(_BYTE *)(((unsigned __int64)&this->cur_avatar_team_id_ >> 3) + 0x7FFF8000) != 0
      && *(_BYTE *)(((unsigned __int64)&this->cur_avatar_team_id_ >> 3) + 0x7FFF8000) <= 3 )
    {
      __asan_report_load4(&this->cur_avatar_team_id_);
    }
    if ( this->cur_avatar_team_id_ == *(_DWORD *)(v4 + 48) )
    {
      std::vector<unsigned long>::vector((std::vector<long unsigned int> *const)(v4 + 224));
      __for_range_0 = avatar_guid_vec;
      *(std::vector<long unsigned int>::const_iterator *)(v4 + 160) = std::vector<unsigned long>::begin(avatar_guid_vec);
      __for_end._M_current = std::vector<unsigned long>::end(__for_range_0)._M_current;
      while ( __gnu_cxx::operator!=<unsigned long const*,std::vector<unsigned long>>(
                (const __gnu_cxx::__normal_iterator<long unsigned int const*,std::vector<long unsigned int> > *)(v4 + 160),
                &__for_end) )
      {
        v18 = (unsigned __int64)__gnu_cxx::__normal_iterator<unsigned long const*,std::vector<unsigned long>>::operator*((const __gnu_cxx::__normal_iterator<long unsigned int const*,std::vector<long unsigned int> > *const)(v4 + 160));
        if ( *(_BYTE *)((v18 >> 3) + 0x7FFF8000) )
          v18 = __asan_report_load8(v18);
        *(_QWORD *)(v4 + 128) = *(_QWORD *)v18;
        if ( !common::tools::MiscUtils::isContains<std::unordered_set<unsigned long>,unsigned long>(
                &this->temp_avatar_guid_set_,
                (const unsigned __int64 *)(v4 + 128)) )
          std::vector<unsigned long>::push_back(
            (std::vector<long unsigned int> *const)(v4 + 224),
            (const std::vector<long unsigned int>::value_type *)(v4 + 128));
        __gnu_cxx::__normal_iterator<unsigned long const*,std::vector<unsigned long>>::operator++((__gnu_cxx::__normal_iterator<long unsigned int const*,std::vector<long unsigned int> > *const)(v4 + 160));
      }
      __for_range_1 = &this->temp_avatar_guid_set_;
      *(std::unordered_set<long unsigned int>::iterator *)(v4 + 160) = std::unordered_set<unsigned long>::begin(&this->temp_avatar_guid_set_);
      __for_end._M_current = (const unsigned __int64 *)std::unordered_set<unsigned long>::end(__for_range_1)._M_cur;
      while ( std::__detail::operator!=<unsigned long,false>(
                (const std::__detail::_Node_iterator_base<long unsigned int,false> *)(v4 + 160),
                (const std::__detail::_Node_iterator_base<long unsigned int,false> *)&__for_end) )
      {
        v19 = (unsigned __int64)std::__detail::_Node_iterator<unsigned long,true,false>::operator*((const std::__detail::_Node_iterator<long unsigned int,true,false> *const)(v4 + 160));
        if ( *(_BYTE *)((v19 >> 3) + 0x7FFF8000) )
          v19 = __asan_report_load8(v19);
        *(_QWORD *)(v4 + 128) = *(_QWORD *)v19;
        std::vector<unsigned long>::push_back(
          (std::vector<long unsigned int> *const)(v4 + 224),
          (const std::vector<long unsigned int>::value_type *)(v4 + 128));
        std::__detail::_Node_iterator<unsigned long,true,false>::operator++((std::__detail::_Node_iterator<long unsigned int,true,false> *const)(v4 + 160));
      }
      v3 = PlayerAvatarComp::checkAvatarTeamCanJoinSceneTeam(this, (const std::vector<long unsigned int> *)(v4 + 224));
      std::vector<unsigned long>::~vector((std::vector<long unsigned int> *const)(v4 + 224));
    }
    else
    {
      v3 = 0;
    }
LABEL_42:
    std::unordered_set<unsigned long>::~unordered_set((std::unordered_set<long unsigned int> *const)(v4 + 288));
  }
  else
  {
    common::milog::MiLogStream::create(
      &v29,
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/player/avatar/player_avatar_comp.cpp",
      "checkAvatarTeamCanSetUp",
      4547);
    v8 = common::milog::MiLogStream::operator<<<char [33],(char *[33])0>(
           &v29,
           (const char (*)[33])"avatar_guid_list_size too large:");
    __for_end._M_current = (const unsigned __int64 *)std::vector<unsigned long>::size(avatar_guid_vec);
    v9 = common::milog::MiLogStream::operator<<<unsigned long,(unsigned long *)0>(
           v8,
           (const unsigned __int64 *)&__for_end);
    if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
      __asan_report_load8(&this->player_);
    operator<<(v9, this->player_);
    common::milog::MiLogStream::~MiLogStream(&v29);
    v3 = -1;
  }
  result = v3;
  if ( v30 == (char *)v4 )
  {
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8008) = 0LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8010) = 0LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8018) = 0LL;
    *(_DWORD *)((v4 >> 3) + 0x7FFF8020) = 0;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8028) = 0LL;
  }
  else
  {
    *(_QWORD *)v4 = 1172321806LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8020) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8028) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 4602: range 000000001718F2A6-000000001718F7D5
int32_t __cdecl PlayerAvatarComp::checkAvatarTeamCanJoinSceneTeam(
        PlayerAvatarComp *const this,
        const std::vector<long unsigned int> *avatar_guid_vec)
{
  int32_t v2; // r14d
  unsigned __int64 v3; // r13
  __int64 v4; // rax
  _DWORD *v5; // r12
  unsigned __int64 v6; // rax
  common::milog::MiLogStream *v7; // rax
  common::milog::MiLogStream *v8; // rax
  int v9; // r15d
  std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v10; // rax
  int32_t result; // eax
  bool is_all_avatar_dead; // [rsp+26h] [rbp-12Ah]
  bool is_all_avatar_invalid_as_cur_avatar; // [rsp+27h] [rbp-129h]
  std::vector<long unsigned int>::const_iterator __for_begin; // [rsp+28h] [rbp-128h] BYREF
  std::vector<long unsigned int>::const_iterator __for_end; // [rsp+30h] [rbp-120h] BYREF
  const std::vector<long unsigned int> *__for_range; // [rsp+38h] [rbp-118h]
  common::milog::MiLogStream v17; // [rsp+40h] [rbp-110h] BYREF
  char v18[240]; // [rsp+60h] [rbp-F0h] BYREF

  v3 = (unsigned __int64)v18;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_2(192LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "3 48 8 9 guid:4606 80 16 15 avatar_ptr:4615 112 48 20 unique_guid_set:4605";
  *(_QWORD *)(v3 + 16) = PlayerAvatarComp::checkAvatarTeamCanJoinSceneTeam;
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = 61937;
  v5[536862721] = -234881024;
  v5[536862722] = 62194;
  v5[536862723] = 62194;
  v5[536862725] = -202116109;
  is_all_avatar_dead = 1;
  is_all_avatar_invalid_as_cur_avatar = 1;
  std::set<unsigned long>::set((std::set<long unsigned int> *const)(v3 + 112));
  __for_range = avatar_guid_vec;
  __for_begin._M_current = std::vector<unsigned long>::begin(avatar_guid_vec)._M_current;
  __for_end._M_current = std::vector<unsigned long>::end(avatar_guid_vec)._M_current;
  while ( __gnu_cxx::operator!=<unsigned long const*,std::vector<unsigned long>>(&__for_begin, &__for_end) )
  {
    v6 = (unsigned __int64)__gnu_cxx::__normal_iterator<unsigned long const*,std::vector<unsigned long>>::operator*(&__for_begin);
    if ( *(_BYTE *)((v6 >> 3) + 0x7FFF8000) )
      v6 = __asan_report_load8(v6);
    *(_QWORD *)(v3 + 48) = *(_QWORD *)v6;
    if ( common::tools::MiscUtils::isContains<std::set<unsigned long>,unsigned long>(
           (std::set<long unsigned int> *)(v3 + 112),
           (const unsigned __int64 *)(v3 + 48)) )
    {
      common::milog::MiLogStream::create(
        &v17,
        &common::milog::MiLogDefault::default_log_obj_,
        1u,
        "./src/player/avatar/player_avatar_comp.cpp",
        "checkAvatarTeamCanJoinSceneTeam",
        4611);
      v7 = common::milog::MiLogStream::operator<<<char [21],(char *[21])0>(
             &v17,
             (const char (*)[21])"avatar repeat, guid:");
      common::milog::MiLogStream::operator<<<unsigned long,(unsigned long *)0>(v7, (const unsigned __int64 *)(v3 + 48));
      common::milog::MiLogStream::~MiLogStream(&v17);
      v2 = 106;
      goto LABEL_24;
    }
    PlayerAvatarComp::findAvatar((const PlayerAvatarComp *const)(v3 + 80), (uint64_t)this, *(_QWORD *)(v3 + 48));
    if ( std::operator==<Avatar>((const std::shared_ptr<Avatar> *)(v3 + 80), 0LL) )
    {
      common::milog::MiLogStream::create(
        &v17,
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/player/avatar/player_avatar_comp.cpp",
        "checkAvatarTeamCanJoinSceneTeam",
        4618);
      v8 = common::milog::MiLogStream::operator<<<char [27],(char *[27])0>(&v17, (const char (*)[27])off_260410C0);
      common::milog::MiLogStream::operator<<<unsigned long,(unsigned long *)0>(v8, (const unsigned __int64 *)(v3 + 48));
      common::milog::MiLogStream::~MiLogStream(&v17);
      v2 = 104;
      v9 = 0;
    }
    else
    {
      v10 = std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 80));
      if ( Creature::getLifeState(v10) == LIFE_ALIVE )
        is_all_avatar_dead = 0;
      if ( !(unsigned int)PlayerAvatarComp::checkChangeCurAvatar(this, *(_QWORD *)(v3 + 48)) )
        is_all_avatar_invalid_as_cur_avatar = 0;
      std::set<unsigned long>::insert(
        (std::set<long unsigned int> *const)(v3 + 112),
        (const std::set<long unsigned int>::value_type *)(v3 + 48));
      v9 = 1;
    }
    std::shared_ptr<Avatar>::~shared_ptr((std::shared_ptr<Avatar> *const)(v3 + 80));
    if ( v9 != 1 )
      goto LABEL_24;
    __gnu_cxx::__normal_iterator<unsigned long const*,std::vector<unsigned long>>::operator++(&__for_begin);
  }
  if ( is_all_avatar_dead )
  {
    common::milog::MiLogStream::create(
      &v17,
      &common::milog::MiLogDefault::default_log_obj_,
      1u,
      "./src/player/avatar/player_avatar_comp.cpp",
      "checkAvatarTeamCanJoinSceneTeam",
      4637);
    common::milog::MiLogStream::operator<<<char [19],(char *[19])0>(&v17, (const char (*)[19])"no avatar is alive");
    common::milog::MiLogStream::~MiLogStream(&v17);
    v2 = 102;
  }
  else if ( is_all_avatar_invalid_as_cur_avatar )
  {
    common::milog::MiLogStream::create(
      &v17,
      &common::milog::MiLogDefault::default_log_obj_,
      1u,
      "./src/player/avatar/player_avatar_comp.cpp",
      "checkAvatarTeamCanJoinSceneTeam",
      4642);
    common::milog::MiLogStream::operator<<<char [33],(char *[33])0>(&v17, (const char (*)[33])off_26041260);
    common::milog::MiLogStream::~MiLogStream(&v17);
    v2 = -1;
  }
  else
  {
    v2 = 0;
  }
LABEL_24:
  std::set<unsigned long>::~set((std::set<long unsigned int> *const)(v3 + 112));
  result = v2;
  if ( v18 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8014) = 0;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 4649: range 000000001718F7D6-000000001718FAD5
SceneTeamPtr __cdecl PlayerAvatarComp::findSceneTeam(PlayerAvatarComp *const this)
{
  __int64 v1; // rsi
  unsigned __int64 v2; // r12
  __int64 v3; // rax
  _DWORD *v4; // r13
  unsigned __int64 v5; // rax
  unsigned __int64 v6; // rdx
  int v7; // r14d
  SceneTeamPtr result; // rax
  char v9[144]; // [rsp+10h] [rbp-90h] BYREF

  v2 = (unsigned __int64)v9;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_1(96LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "2 32 16 14 scene_ptr:4650 64 16 14 world_ptr:4659";
  *(_QWORD *)(v2 + 16) = PlayerAvatarComp::findSceneTeam;
  v4 = (_DWORD *)(v2 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = -219021312;
  v4[536862722] = -202178560;
  if ( *(_BYTE *)(((unsigned __int64)(v1 + 24) >> 3) + 0x7FFF8000) )
    __asan_report_load8(v1 + 24);
  Player::getSceneComp(*(Player *const *)(v1 + 24));
  PlayerSceneComp::getCurScene((const PlayerSceneComp *const)(v2 + 32));
  if ( !std::operator!=<Scene>((const std::shared_ptr<Scene> *)(v2 + 32), 0LL) )
    goto LABEL_29;
  v5 = (unsigned __int64)std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 32));
  if ( *(_BYTE *)((v5 >> 3) + 0x7FFF8000) )
    v5 = __asan_report_load8(v5);
  v6 = *(_QWORD *)v5 + 280LL;
  if ( *(_BYTE *)((v6 >> 3) + 0x7FFF8000) )
    v5 = __asan_report_load8(*(_QWORD *)v5 + 280LL);
  (*(void (__fastcall **)(unsigned __int64, unsigned __int64))v6)(v2 + 64, v5);
  if ( std::operator!=<SceneTeam>((const std::shared_ptr<SceneTeam> *)(v2 + 64), 0LL) )
  {
    std::shared_ptr<SceneTeam>::shared_ptr(
      (std::shared_ptr<SceneTeam> *const)this,
      (std::shared_ptr<SceneTeam> *)(v2 + 64));
    v7 = 0;
  }
  else
  {
    v7 = 1;
  }
  std::shared_ptr<SceneTeam>::~shared_ptr((std::shared_ptr<SceneTeam> *const)(v2 + 64));
  if ( v7 == 1 )
  {
LABEL_29:
    if ( *(_BYTE *)(((unsigned __int64)(v1 + 24) >> 3) + 0x7FFF8000) )
      __asan_report_load8(v1 + 24);
    Player::getSceneComp(*(Player *const *)(v1 + 24));
    PlayerSceneComp::getCurWorld((const PlayerSceneComp *const)(v2 + 64));
    if ( std::operator!=<World>((const std::shared_ptr<World> *)(v2 + 64), 0LL) )
    {
      std::__shared_ptr_access<World,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<World,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 64));
      if ( *(_WORD *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
        __asan_report_store16(this);
      World::getSceneTeam((World *const)this);
    }
    else
    {
      std::shared_ptr<SceneTeam>::shared_ptr((std::shared_ptr<SceneTeam> *const)this, 0LL);
    }
    std::shared_ptr<World>::~shared_ptr((std::shared_ptr<World> *const)(v2 + 64));
  }
  std::shared_ptr<Scene>::~shared_ptr((std::shared_ptr<Scene> *const)(v2 + 32));
  if ( v9 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8008) = 0;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8008) = -168430091;
  }
  result._M_ptr = (std::__shared_ptr<SceneTeam,(__gnu_cxx::_Lock_policy)2>::element_type *)this;
  return result;
};

// Line 4669: range 000000001718FAD6-000000001718FC02
AvatarPtr __cdecl PlayerAvatarComp::findArbitraryAvatar(PlayerAvatarComp *const this)
{
  __int64 v1; // rsi
  unsigned __int64 v2; // rbx
  __int64 v3; // rax
  unsigned __int64 v4; // r12
  std::shared_ptr<Avatar> *p_second; // rdx
  AvatarPtr result; // rax
  std::_Rb_tree_iterator<std::pair<long unsigned int const,std::shared_ptr<Avatar> > >::_Self __y; // [rsp+18h] [rbp-68h] BYREF
  char v8[96]; // [rsp+20h] [rbp-60h] BYREF

  v2 = (unsigned __int64)v8;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_0(64LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "1 32 8 9 iter:4670";
  *(_QWORD *)(v2 + 16) = PlayerAvatarComp::findArbitraryAvatar;
  v4 = v2 >> 3;
  *(_DWORD *)(v4 + 2147450880) = -235802127;
  *(_DWORD *)(v4 + 2147450884) = -202116352;
  *(std::map<long unsigned int,std::shared_ptr<Avatar>>::iterator *)(v2 + 32) = std::map<unsigned long,std::shared_ptr<Avatar>>::begin((std::map<long unsigned int,std::shared_ptr<Avatar>> *const)(v1 + 128));
  __y._M_node = std::map<unsigned long,std::shared_ptr<Avatar>>::end((std::map<long unsigned int,std::shared_ptr<Avatar>> *const)(v1 + 128))._M_node;
  if ( std::operator!=(
         (const std::_Rb_tree_iterator<std::pair<long unsigned int const,std::shared_ptr<Avatar> > >::_Self *)(v2 + 32),
         &__y) )
  {
    p_second = &std::_Rb_tree_iterator<std::pair<unsigned long const,std::shared_ptr<Avatar>>>::operator->((const std::_Rb_tree_iterator<std::pair<long unsigned int const,std::shared_ptr<Avatar> > > *const)(v2 + 32))->second;
    std::shared_ptr<Avatar>::shared_ptr((std::shared_ptr<Avatar> *const)this, p_second);
  }
  else
  {
    std::shared_ptr<Avatar>::shared_ptr((std::shared_ptr<Avatar> *const)this, 0LL);
  }
  if ( v8 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
  }
  result._M_ptr = (std::__shared_ptr<Avatar,(__gnu_cxx::_Lock_policy)2>::element_type *)this;
  return result;
};

// Line 4681: range 000000001718FC04-0000000017190760
int32_t __cdecl PlayerAvatarComp::addMirrorAvatars(
        PlayerAvatarComp *const this,
        const std::vector<long unsigned int> *formal_guid_vec,
        std::vector<long unsigned int> *mirror_guid_vec,
        proto::AvatarSnapshotType avatar_snapshot_type)
{
  int32_t v4; // r15d
  unsigned __int64 v5; // r13
  __int64 v6; // rax
  _DWORD *v7; // r12
  std::vector<long unsigned int>::size_type v8; // rax
  unsigned __int64 v9; // rax
  common::milog::MiLogStream *v10; // rax
  common::milog::MiLogStream *v11; // rax
  common::milog::MiLogStream *v12; // rcx
  _BOOL4 v13; // r14d
  std::__shared_ptr_access<FormalAvatar,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v14; // rax
  uint32_t AvatarId; // eax
  common::milog::MiLogStream *v16; // r14
  std::__shared_ptr_access<FormalAvatar,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v17; // rax
  common::milog::MiLogStream *v18; // rax
  common::milog::MiLogStream *v19; // rcx
  int v20; // r14d
  MirrorAvatar *v21; // r14
  std::__shared_ptr_access<FormalAvatar,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v22; // rax
  common::milog::MiLogStream *v23; // r14
  std::__shared_ptr_access<FormalAvatar,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v24; // rax
  common::milog::MiLogStream *v25; // rax
  std::vector<long unsigned int>::size_type v26; // rdx
  const std::shared_ptr<MirrorAvatar> *v27; // rax
  int v28; // r14d
  bool v29; // r14
  common::milog::MiLogStream *v30; // r14
  std::__shared_ptr_access<MirrorAvatar,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v31; // rax
  common::milog::MiLogStream *v32; // rax
  common::milog::MiLogStream *v33; // rcx
  std::__shared_ptr_access<MirrorAvatar,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v34; // rax
  std::__shared_ptr_access<proto::AvatarAddNotify,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v35; // rax
  unsigned __int64 v36; // rax
  unsigned __int64 v37; // rdx
  common::milog::MiLogStream *v38; // r14
  std::__shared_ptr_access<MirrorAvatar,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v39; // rax
  common::milog::MiLogStream *v40; // rax
  common::milog::MiLogStream *v41; // rcx
  int v42; // r14d
  Player *player; // r14
  int32_t result; // eax
  std::vector<std::shared_ptr<MirrorAvatar>>::iterator __for_end_0; // [rsp+38h] [rbp-158h] BYREF
  std::vector<long unsigned int>::const_iterator __for_end; // [rsp+40h] [rbp-150h] BYREF
  const std::vector<long unsigned int> *__for_range; // [rsp+48h] [rbp-148h]
  std::vector<std::shared_ptr<MirrorAvatar>> *__for_range_0; // [rsp+50h] [rbp-140h]
  proto::AvatarInfo *avatar_info; // [rsp+58h] [rbp-138h]
  common::milog::MiLogStream v52; // [rsp+60h] [rbp-130h] BYREF
  char v53[272]; // [rsp+80h] [rbp-110h] BYREF

  v5 = (unsigned __int64)v53;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v6 = __asan_stack_malloc_2(224LL);
    if ( v6 )
      v5 = v6;
  }
  *(_QWORD *)v5 = 1102416563LL;
  *(_QWORD *)(v5 + 8) = "5 32 8 9 guid:4684 64 16 22 mirror_avatar_ptr:4707 96 16 19 add_notify_ptr:4719 128 16 22 mirror"
                        "_avatar_ptr:4693 160 24 22 mirror_avatar_vec:4682";
  *(_QWORD *)(v5 + 16) = PlayerAvatarComp::addMirrorAvatars;
  v7 = (_DWORD *)(v5 >> 3);
  v7[536862720] = -235802127;
  v7[536862721] = -218959360;
  v7[536862722] = -219021312;
  v7[536862723] = -219021312;
  v7[536862724] = -219021312;
  v7[536862725] = -218103808;
  v7[536862726] = -202116109;
  std::vector<std::shared_ptr<MirrorAvatar>>::vector((std::vector<std::shared_ptr<MirrorAvatar>> *const)(v5 + 160));
  v8 = std::vector<unsigned long>::size(formal_guid_vec);
  std::vector<std::shared_ptr<MirrorAvatar>>::reserve((std::vector<std::shared_ptr<MirrorAvatar>> *const)(v5 + 160), v8);
  __for_range = formal_guid_vec;
  __for_end_0._M_current = (std::shared_ptr<MirrorAvatar> *)std::vector<unsigned long>::begin(formal_guid_vec)._M_current;
  __for_end._M_current = std::vector<unsigned long>::end(formal_guid_vec)._M_current;
  while ( __gnu_cxx::operator!=<unsigned long const*,std::vector<unsigned long>>(
            (const __gnu_cxx::__normal_iterator<long unsigned int const*,std::vector<long unsigned int> > *)&__for_end_0,
            &__for_end) )
  {
    v9 = (unsigned __int64)__gnu_cxx::__normal_iterator<unsigned long const*,std::vector<unsigned long>>::operator*((const __gnu_cxx::__normal_iterator<long unsigned int const*,std::vector<long unsigned int> > *const)&__for_end_0);
    if ( *(_BYTE *)((v9 >> 3) + 0x7FFF8000) )
      v9 = __asan_report_load8(v9);
    *(_QWORD *)(v5 + 32) = *(_QWORD *)v9;
    PlayerAvatarComp::findFormalAvatar((const PlayerAvatarComp *const)(v5 + 64), (uint64_t)this, *(_QWORD *)(v5 + 32));
    if ( !std::operator==<FormalAvatar>(0LL, (const std::shared_ptr<FormalAvatar> *)(v5 + 64)) )
    {
      v14 = std::__shared_ptr_access<FormalAvatar,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<FormalAvatar,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v5 + 64));
      AvatarId = Avatar::getAvatarId(v14);
      PlayerAvatarComp::createAvatar((PlayerAvatarComp *const)(v5 + 96), (__int64)this, 3u, AvatarId, 0LL);
      std::dynamic_pointer_cast<MirrorAvatar,Avatar>((const std::shared_ptr<Avatar> *)(v5 + 128));
      if ( std::operator==<MirrorAvatar>(0LL, (const std::shared_ptr<MirrorAvatar> *)(v5 + 128)) )
      {
        common::milog::MiLogStream::create(
          &v52,
          &common::milog::MiLogDefault::default_log_obj_,
          4u,
          "./src/player/avatar/player_avatar_comp.cpp",
          "addMirrorAvatars",
          4696);
        v16 = common::milog::MiLogStream::operator<<<char [42],(char *[42])0>(
                &v52,
                (const char (*)[42])"craete mirror avatar fail, formal_avatar:");
        v17 = std::__shared_ptr_access<FormalAvatar,(__gnu_cxx::_Lock_policy)2,false,false>::operator*((const std::__shared_ptr_access<FormalAvatar,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v5 + 64));
        v18 = common::milog::MiLogStream::operator<<<FormalAvatar,(FormalAvatar*)0>(v16, v17);
        v19 = common::milog::MiLogStream::operator<<<char [9],(char *[9])0>(v18, (const char (*)[9])" player:");
        if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
          __asan_report_load8(&this->player_);
        goto LABEL_15;
      }
      v21 = std::__shared_ptr_access<MirrorAvatar,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<MirrorAvatar,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v5 + 128));
      v22 = std::__shared_ptr_access<FormalAvatar,(__gnu_cxx::_Lock_policy)2,false,false>::operator*((const std::__shared_ptr_access<FormalAvatar,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v5 + 64));
      if ( MirrorAvatar::initByAvatar(v21, v22, avatar_snapshot_type) )
      {
        common::milog::MiLogStream::create(
          &v52,
          &common::milog::MiLogDefault::default_log_obj_,
          3u,
          "./src/player/avatar/player_avatar_comp.cpp",
          "addMirrorAvatars",
          4701);
        v23 = common::milog::MiLogStream::operator<<<char [40],(char *[40])0>(
                &v52,
                (const char (*)[40])"init mirror avatar fail, formal_avatar:");
        v24 = std::__shared_ptr_access<FormalAvatar,(__gnu_cxx::_Lock_policy)2,false,false>::operator*((const std::__shared_ptr_access<FormalAvatar,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v5 + 64));
        v25 = common::milog::MiLogStream::operator<<<FormalAvatar,(FormalAvatar*)0>(v23, v24);
        v19 = common::milog::MiLogStream::operator<<<char [9],(char *[9])0>(v25, (const char (*)[9])" player:");
        if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
          __asan_report_load8(&this->player_);
LABEL_15:
        operator<<(v19, this->player_);
        common::milog::MiLogStream::~MiLogStream(&v52);
        v4 = -1;
        v20 = 0;
      }
      else
      {
        std::vector<std::shared_ptr<MirrorAvatar>>::push_back(
          (std::vector<std::shared_ptr<MirrorAvatar>> *const)(v5 + 160),
          (const std::vector<std::shared_ptr<MirrorAvatar>>::value_type *)(v5 + 128));
        v20 = 1;
      }
      std::shared_ptr<MirrorAvatar>::~shared_ptr((std::shared_ptr<MirrorAvatar> *const)(v5 + 128));
      std::shared_ptr<Avatar>::~shared_ptr((std::shared_ptr<Avatar> *const)(v5 + 96));
      v13 = v20 == 1;
      goto LABEL_22;
    }
    common::milog::MiLogStream::create(
      &v52,
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/player/avatar/player_avatar_comp.cpp",
      "addMirrorAvatars",
      4689);
    v10 = common::milog::MiLogStream::operator<<<char [29],(char *[29])0>(
            &v52,
            (const char (*)[29])"findFormalAvatar fail, guid:");
    v11 = common::milog::MiLogStream::operator<<<unsigned long,(unsigned long *)0>(
            v10,
            (const unsigned __int64 *)(v5 + 32));
    v12 = common::milog::MiLogStream::operator<<<char [9],(char *[9])0>(v11, (const char (*)[9])" player:");
    if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
      __asan_report_load8(&this->player_);
    operator<<(v12, this->player_);
    common::milog::MiLogStream::~MiLogStream(&v52);
    v4 = -1;
    v13 = 0;
LABEL_22:
    std::shared_ptr<FormalAvatar>::~shared_ptr((std::shared_ptr<FormalAvatar> *const)(v5 + 64));
    if ( !v13 )
      goto LABEL_50;
    __gnu_cxx::__normal_iterator<unsigned long const*,std::vector<unsigned long>>::operator++((__gnu_cxx::__normal_iterator<long unsigned int const*,std::vector<long unsigned int> > *const)&__for_end_0);
  }
  v26 = std::vector<std::shared_ptr<MirrorAvatar>>::size((const std::vector<std::shared_ptr<MirrorAvatar>> *const)(v5 + 160));
  std::vector<unsigned long>::reserve(mirror_guid_vec, v26);
  __for_range_0 = (std::vector<std::shared_ptr<MirrorAvatar>> *)(v5 + 160);
  *(std::vector<std::shared_ptr<MirrorAvatar>>::iterator *)(v5 + 32) = std::vector<std::shared_ptr<MirrorAvatar>>::begin((std::vector<std::shared_ptr<MirrorAvatar>> *const)(v5 + 160));
  __for_end_0._M_current = std::vector<std::shared_ptr<MirrorAvatar>>::end(__for_range_0)._M_current;
  while ( __gnu_cxx::operator!=<std::shared_ptr<MirrorAvatar> *,std::vector<std::shared_ptr<MirrorAvatar>>>(
            (const __gnu_cxx::__normal_iterator<std::shared_ptr<MirrorAvatar>*,std::vector<std::shared_ptr<MirrorAvatar>> > *)(v5 + 32),
            &__for_end_0) )
  {
    v27 = __gnu_cxx::__normal_iterator<std::shared_ptr<MirrorAvatar> *,std::vector<std::shared_ptr<MirrorAvatar>>>::operator*((const __gnu_cxx::__normal_iterator<std::shared_ptr<MirrorAvatar>*,std::vector<std::shared_ptr<MirrorAvatar>> > *const)(v5 + 32));
    std::shared_ptr<MirrorAvatar>::shared_ptr((std::shared_ptr<MirrorAvatar> *const)(v5 + 64), v27);
    if ( std::operator==<MirrorAvatar>(0LL, (const std::shared_ptr<MirrorAvatar> *)(v5 + 64)) )
    {
      v28 = 0;
    }
    else
    {
      std::shared_ptr<Avatar>::shared_ptr<MirrorAvatar,void>(
        (std::shared_ptr<Avatar> *const)(v5 + 128),
        (const std::shared_ptr<MirrorAvatar> *)(v5 + 64));
      v29 = PlayerAvatarComp::emplaceAvatar(this, (AvatarPtr *)(v5 + 128)) != 0;
      std::shared_ptr<Avatar>::~shared_ptr((std::shared_ptr<Avatar> *const)(v5 + 128));
      if ( v29 )
      {
        common::milog::MiLogStream::create(
          &v52,
          &common::milog::MiLogDefault::default_log_obj_,
          4u,
          "./src/player/avatar/player_avatar_comp.cpp",
          "addMirrorAvatars",
          4715);
        v30 = common::milog::MiLogStream::operator<<<char [35],(char *[35])0>(
                &v52,
                (const char (*)[35])"emplaceAvatar fail, mirror_avatar:");
        v31 = std::__shared_ptr_access<MirrorAvatar,(__gnu_cxx::_Lock_policy)2,false,false>::operator*((const std::__shared_ptr_access<MirrorAvatar,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v5 + 64));
        v32 = common::milog::MiLogStream::operator<<<MirrorAvatar,(MirrorAvatar*)0>(v30, v31);
        v33 = common::milog::MiLogStream::operator<<<char [9],(char *[9])0>(v32, (const char (*)[9])" player:");
        if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
          __asan_report_load8(&this->player_);
        operator<<(v33, this->player_);
        common::milog::MiLogStream::~MiLogStream(&v52);
        v4 = -1;
        v28 = 1;
      }
      else
      {
        v34 = std::__shared_ptr_access<MirrorAvatar,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<MirrorAvatar,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v5 + 64));
        __for_end._M_current = (const unsigned __int64 *)Avatar::getGuid(v34);
        std::vector<unsigned long>::push_back(mirror_guid_vec, (std::vector<long unsigned int>::value_type *)&__for_end);
        common::tools::perf::make_shared<proto::AvatarAddNotify>();
        v35 = std::__shared_ptr_access<proto::AvatarAddNotify,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<proto::AvatarAddNotify,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v5 + 96));
        avatar_info = proto::AvatarAddNotify::mutable_avatar(v35);
        v36 = (unsigned __int64)std::__shared_ptr_access<MirrorAvatar,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<MirrorAvatar,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v5 + 64));
        if ( *(_BYTE *)((v36 >> 3) + 0x7FFF8000) )
          v36 = __asan_report_load8(v36);
        v37 = *(_QWORD *)v36 + 472LL;
        if ( *(_BYTE *)((v37 >> 3) + 0x7FFF8000) )
          v36 = __asan_report_load8(*(_QWORD *)v36 + 472LL);
        if ( (*(unsigned int (__fastcall **)(unsigned __int64, proto::AvatarInfo *))v37)(v36, avatar_info) )
        {
          common::milog::MiLogStream::create(
            &v52,
            &common::milog::MiLogDefault::default_log_obj_,
            3u,
            "./src/player/avatar/player_avatar_comp.cpp",
            "addMirrorAvatars",
            4723);
          v38 = common::milog::MiLogStream::operator<<<char [31],(char *[31])0>(
                  &v52,
                  (const char (*)[31])"toClient fails, mirror_avatar:");
          v39 = std::__shared_ptr_access<MirrorAvatar,(__gnu_cxx::_Lock_policy)2,false,false>::operator*((const std::__shared_ptr_access<MirrorAvatar,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v5 + 64));
          v40 = common::milog::MiLogStream::operator<<<MirrorAvatar,(MirrorAvatar*)0>(v38, v39);
          v41 = common::milog::MiLogStream::operator<<<char [9],(char *[9])0>(v40, (const char (*)[9])" player:");
          if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
            __asan_report_load8(&this->player_);
          operator<<(v41, this->player_);
          common::milog::MiLogStream::~MiLogStream(&v52);
          v42 = 0;
        }
        else
        {
          if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
            __asan_report_load8(&this->player_);
          player = this->player_;
          std::dynamic_pointer_cast<google::protobuf::Message const,proto::AvatarAddNotify>((const std::shared_ptr<proto::AvatarAddNotify> *)(v5 + 128));
          Player::sendMessage(player, (common::minet::ConstMessagePtr *)(v5 + 128), 0LL);
          std::shared_ptr<google::protobuf::Message const>::~shared_ptr((std::shared_ptr<const google::protobuf::Message> *const)(v5 + 128));
          v42 = 1;
        }
        std::shared_ptr<proto::AvatarAddNotify>::~shared_ptr((std::shared_ptr<proto::AvatarAddNotify> *const)(v5 + 96));
        if ( v42 == 1 )
          v28 = 2;
        else
          v28 = 0;
      }
    }
    std::shared_ptr<MirrorAvatar>::~shared_ptr((std::shared_ptr<MirrorAvatar> *const)(v5 + 64));
    if ( v28 && v28 != 2 )
      goto LABEL_50;
    __gnu_cxx::__normal_iterator<std::shared_ptr<MirrorAvatar> *,std::vector<std::shared_ptr<MirrorAvatar>>>::operator++((__gnu_cxx::__normal_iterator<std::shared_ptr<MirrorAvatar>*,std::vector<std::shared_ptr<MirrorAvatar>> > *const)(v5 + 32));
  }
  v4 = 0;
LABEL_50:
  std::vector<std::shared_ptr<MirrorAvatar>>::~vector((std::vector<std::shared_ptr<MirrorAvatar>> *const)(v5 + 160));
  result = v4;
  if ( v53 == (char *)v5 )
  {
    *(_QWORD *)((v5 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8008) = 0LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8010) = 0LL;
    *(_DWORD *)((v5 >> 3) + 0x7FFF8018) = 0;
  }
  else
  {
    *(_QWORD *)v5 = 1172321806LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v5 >> 3) + 0x7FFF8018) = -168430091;
  }
  return result;
};

// Line 4733: range 0000000017190762-00000000171911A9
__int64 __fastcall PlayerAvatarComp::saveAvatarSnapshotBatch(
        PlayerAvatarComp *const this,
        proto::AvatarSnapshotType snapshot_type,
        const std::vector<std::shared_ptr<Avatar>> *avatar_vec,
        std::vector<long unsigned int> *snapshot_guid_vec)
{
  unsigned int v4; // r14d
  unsigned __int64 v5; // r13
  __int64 v6; // rax
  _DWORD *v7; // r12
  common::milog::MiLogStream *v9; // rax
  common::milog::MiLogStream *v10; // rax
  common::milog::MiLogStream *v11; // rcx
  const std::shared_ptr<Avatar> *v12; // rax
  common::milog::MiLogStream *v13; // rcx
  _BOOL4 v14; // r15d
  PlayerBasicComp *BasicComp; // rax
  common::milog::MiLogStream *v17; // rax
  common::milog::MiLogStream *v18; // rax
  std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v19; // rax
  common::milog::MiLogStream *v20; // r14
  std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v21; // rax
  common::milog::MiLogStream *v22; // rax
  common::milog::MiLogStream *v23; // rcx
  int v24; // r15d
  std::remove_reference<proto::AvatarSnapshotBin&>::type *v25; // rax
  const proto::AvatarBin *v26; // rax
  proto::AvatarSnapshotBin *v27; // rax
  unsigned __int64 *v28; // rcx
  proto::AvatarSnapshotBin *v29; // r8
  std::pair<std::_Rb_tree_iterator<std::pair<long unsigned int const,proto::AvatarSnapshotBin> >,bool> v30; // rax
  common::milog::MiLogStream *v31; // rax
  common::milog::MiLogStream *v32; // rax
  common::milog::MiLogStream *v33; // rcx
  common::milog::MiLogStream *v34; // r14
  common::milog::MiLogStream *v35; // rax
  common::milog::MiLogStream *v36; // r14
  __int64 result; // rax
  int val; // [rsp+34h] [rbp-19Ch] BYREF
  std::vector<std::shared_ptr<Avatar>>::const_iterator __for_begin; // [rsp+38h] [rbp-198h] BYREF
  std::vector<std::shared_ptr<Avatar>>::const_iterator __for_end; // [rsp+40h] [rbp-190h] BYREF
  const std::vector<std::shared_ptr<Avatar>> *__for_range; // [rsp+48h] [rbp-188h]
  std::vector<proto::AvatarSnapshotBin> *__for_range_0; // [rsp+50h] [rbp-180h]
  proto::AvatarSnapshotBin *snapshot_bin; // [rsp+58h] [rbp-178h]
  common::milog::MiLogStream v46; // [rsp+60h] [rbp-170h] BYREF
  char v47[336]; // [rsp+80h] [rbp-150h] BYREF

  v5 = (unsigned __int64)v47;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v6 = __asan_stack_malloc_3(288LL);
    if ( v6 )
      v5 = v6;
  }
  *(_QWORD *)v5 = 1102416563LL;
  *(_QWORD *)(v5 + 8) = "6 48 4 18 snapshot_type:4732 64 8 9 guid:4748 96 16 10 timer:4739 128 16 15 avatar_ptr:4741 160 "
                        "24 17 snapshot_vec:4740 224 32 17 snapshot_bin:4754";
  *(_QWORD *)(v5 + 16) = PlayerAvatarComp::saveAvatarSnapshotBatch;
  v7 = (_DWORD *)(v5 >> 3);
  v7[536862720] = -235802127;
  v7[536862721] = -234556943;
  v7[536862722] = -218959360;
  v7[536862723] = -219021312;
  v7[536862724] = -219021312;
  v7[536862725] = -234881024;
  v7[536862726] = -218959118;
  v7[536862728] = -202116109;
  *(_DWORD *)(v5 + 48) = snapshot_type;
  if ( !proto::AvatarSnapshotType_IsValid(*(_DWORD *)(v5 + 48)) || !*(_DWORD *)(v5 + 48) )
  {
    common::milog::MiLogStream::create(
      &v46,
      &common::milog::MiLogDefault::default_log_obj_,
      4u,
      "./src/player/avatar/player_avatar_comp.cpp",
      "saveAvatarSnapshotBatch",
      4736);
    v9 = common::milog::MiLogStream::operator<<<char [23],(char *[23])0>(
           &v46,
           (const char (*)[23])"invalid snapshot_type:");
    v10 = common::milog::MiLogStream::operator<<<proto::AvatarSnapshotType,(proto::AvatarSnapshotType*)0>(
            v9,
            (const proto::AvatarSnapshotType *)(v5 + 48));
    v11 = common::milog::MiLogStream::operator<<<char [9],(char *[9])0>(v10, (const char (*)[9])" player:");
    if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
      __asan_report_load8(&this->player_);
    operator<<(v11, this->player_);
    common::milog::MiLogStream::~MiLogStream(&v46);
    v4 = -1;
    goto LABEL_45;
  }
  common::tools::TimeUtils::Timer::Timer((common::tools::TimeUtils::Timer *const)(v5 + 96));
  std::vector<proto::AvatarSnapshotBin>::vector((std::vector<proto::AvatarSnapshotBin> *const)(v5 + 160));
  __for_range = avatar_vec;
  __for_begin._M_current = std::vector<std::shared_ptr<Avatar>>::begin(avatar_vec)._M_current;
  __for_end._M_current = std::vector<std::shared_ptr<Avatar>>::end(avatar_vec)._M_current;
  while ( __gnu_cxx::operator!=<std::shared_ptr<Avatar> const*,std::vector<std::shared_ptr<Avatar>>>(
            &__for_begin,
            &__for_end) )
  {
    v12 = __gnu_cxx::__normal_iterator<std::shared_ptr<Avatar> const*,std::vector<std::shared_ptr<Avatar>>>::operator*(&__for_begin);
    std::shared_ptr<Avatar>::shared_ptr((std::shared_ptr<Avatar> *const)(v5 + 128), v12);
    if ( std::operator==<Avatar>(0LL, (const std::shared_ptr<Avatar> *)(v5 + 128)) )
    {
      common::milog::MiLogStream::create(
        &v46,
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/player/avatar/player_avatar_comp.cpp",
        "saveAvatarSnapshotBatch",
        4745);
      v13 = common::milog::MiLogStream::operator<<<char [28],(char *[28])0>(
              &v46,
              (const char (*)[28])"avatar_ptr is null, player:");
      if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
        __asan_report_load8(&this->player_);
LABEL_17:
      operator<<(v13, this->player_);
      common::milog::MiLogStream::~MiLogStream(&v46);
      v4 = -1;
      v14 = 0;
      goto LABEL_34;
    }
    if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
      __asan_report_load8(&this->player_);
    BasicComp = Player::getBasicComp(this->player_);
    *(_QWORD *)(v5 + 64) = PlayerBasicComp::genGuid(BasicComp, GUID_AVATAR);
    if ( !*(_QWORD *)(v5 + 64)
      || common::tools::MiscUtils::isContains<std::map<unsigned long,proto::AvatarSnapshotBin>,unsigned long>(
           &this->avatar_snapshot_map_,
           (const unsigned __int64 *)(v5 + 64)) )
    {
      common::milog::MiLogStream::create(
        &v46,
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/player/avatar/player_avatar_comp.cpp",
        "saveAvatarSnapshotBatch",
        4751);
      v17 = common::milog::MiLogStream::operator<<<char [20],(char *[20])0>(
              &v46,
              (const char (*)[20])"genGuid fail! guid:");
      v18 = common::milog::MiLogStream::operator<<<unsigned long,(unsigned long *)0>(
              v17,
              (const unsigned __int64 *)(v5 + 64));
      v13 = common::milog::MiLogStream::operator<<<char [9],(char *[9])0>(v18, (const char (*)[9])" player:");
      if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
        __asan_report_load8(&this->player_);
      goto LABEL_17;
    }
    proto::AvatarSnapshotBin::AvatarSnapshotBin((proto::AvatarSnapshotBin *const)(v5 + 224));
    v19 = std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v5 + 128));
    if ( Avatar::toSnapshot(
           v19,
           *(proto::AvatarSnapshotType *)(v5 + 48),
           *(_QWORD *)(v5 + 64),
           (proto::AvatarSnapshotBin *)(v5 + 224)) )
    {
      common::milog::MiLogStream::create(
        &v46,
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/player/avatar/player_avatar_comp.cpp",
        "saveAvatarSnapshotBatch",
        4757);
      v20 = common::milog::MiLogStream::operator<<<char [25],(char *[25])0>(
              &v46,
              (const char (*)[25])"toSnapshot fail, avatar:");
      v21 = std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::operator*((const std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v5 + 128));
      v22 = common::milog::MiLogStream::operator<<<Avatar,(Avatar*)0>(v20, v21);
      v23 = common::milog::MiLogStream::operator<<<char [9],(char *[9])0>(v22, (const char (*)[9])" player:");
      if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
        __asan_report_load8(&this->player_);
      operator<<(v23, this->player_);
      common::milog::MiLogStream::~MiLogStream(&v46);
      v4 = -1;
      v24 = 0;
    }
    else
    {
      v25 = std::move<proto::AvatarSnapshotBin &>((proto::AvatarSnapshotBin *)(v5 + 224));
      std::vector<proto::AvatarSnapshotBin>::push_back((std::vector<proto::AvatarSnapshotBin> *const)(v5 + 160), v25);
      v24 = 1;
    }
    proto::AvatarSnapshotBin::~AvatarSnapshotBin((proto::AvatarSnapshotBin *const)(v5 + 224));
    v14 = v24 == 1;
LABEL_34:
    std::shared_ptr<Avatar>::~shared_ptr((std::shared_ptr<Avatar> *const)(v5 + 128));
    if ( !v14 )
      goto LABEL_44;
    __gnu_cxx::__normal_iterator<std::shared_ptr<Avatar> const*,std::vector<std::shared_ptr<Avatar>>>::operator++(&__for_begin);
  }
  __for_range_0 = (std::vector<proto::AvatarSnapshotBin> *)(v5 + 160);
  __for_begin._M_current = (const std::shared_ptr<Avatar> *)std::vector<proto::AvatarSnapshotBin>::begin((std::vector<proto::AvatarSnapshotBin> *const)(v5 + 160))._M_current;
  __for_end._M_current = (const std::shared_ptr<Avatar> *)std::vector<proto::AvatarSnapshotBin>::end(__for_range_0)._M_current;
  while ( 1 )
  {
    if ( !__gnu_cxx::operator!=<proto::AvatarSnapshotBin *,std::vector<proto::AvatarSnapshotBin>>(
            (const __gnu_cxx::__normal_iterator<proto::AvatarSnapshotBin*,std::vector<proto::AvatarSnapshotBin> > *)&__for_begin,
            (const __gnu_cxx::__normal_iterator<proto::AvatarSnapshotBin*,std::vector<proto::AvatarSnapshotBin> > *)&__for_end) )
    {
      common::milog::MiLogStream::create(
        &v46,
        &common::milog::MiLogDefault::default_log_obj_,
        1u,
        "./src/player/avatar/player_avatar_comp.cpp",
        "saveAvatarSnapshotBatch",
        4772);
      v34 = common::milog::MiLogStream::operator<<<char [8],(char *[8])0>(&v46, (const char (*)[8])"create ");
      *(_QWORD *)(v5 + 64) = std::vector<std::shared_ptr<Avatar>>::size(avatar_vec);
      v35 = common::milog::MiLogStream::operator<<<unsigned long,(unsigned long *)0>(
              v34,
              (const unsigned __int64 *)(v5 + 64));
      v36 = common::milog::MiLogStream::operator<<<char [29],(char *[29])0>(
              v35,
              (const char (*)[29])" avatar snapshots cost_time:");
      val = common::tools::TimeUtils::Timer::time((const common::tools::TimeUtils::Timer *const)(v5 + 96));
      common::milog::MiLogStream::operator<<<int,(int *)0>(v36, &val);
      common::milog::MiLogStream::~MiLogStream(&v46);
      v4 = 0;
      goto LABEL_44;
    }
    snapshot_bin = __gnu_cxx::__normal_iterator<proto::AvatarSnapshotBin *,std::vector<proto::AvatarSnapshotBin>>::operator*((const __gnu_cxx::__normal_iterator<proto::AvatarSnapshotBin*,std::vector<proto::AvatarSnapshotBin> > *const)&__for_begin);
    v26 = proto::AvatarSnapshotBin::avatar_bin(snapshot_bin);
    *(_QWORD *)(v5 + 64) = proto::AvatarBin::guid(v26);
    v27 = std::move<proto::AvatarSnapshotBin &>(snapshot_bin);
    v30 = std::map<unsigned long,proto::AvatarSnapshotBin>::emplace<unsigned long &,proto::AvatarSnapshotBin>(
            &this->avatar_snapshot_map_,
            (unsigned __int64 *)(v5 + 64),
            v27,
            v28,
            v29);
    if ( !v30.second )
      break;
    std::vector<unsigned long>::push_back(
      snapshot_guid_vec,
      (const std::vector<long unsigned int>::value_type *)(v5 + 64));
    __gnu_cxx::__normal_iterator<proto::AvatarSnapshotBin *,std::vector<proto::AvatarSnapshotBin>>::operator++((__gnu_cxx::__normal_iterator<proto::AvatarSnapshotBin*,std::vector<proto::AvatarSnapshotBin> > *const)&__for_begin);
  }
  common::milog::MiLogStream::create(
    &v46,
    &common::milog::MiLogDefault::default_log_obj_,
    4u,
    "./src/player/avatar/player_avatar_comp.cpp",
    "saveAvatarSnapshotBatch",
    4767);
  v31 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(&v46, (const char (*)[16])"duplicate guid:");
  v32 = common::milog::MiLogStream::operator<<<unsigned long,(unsigned long *)0>(
          v31,
          (const unsigned __int64 *)(v5 + 64));
  v33 = common::milog::MiLogStream::operator<<<char [9],(char *[9])0>(v32, (const char (*)[9])" player:");
  if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
    __asan_report_load8(&this->player_);
  operator<<(v33, this->player_);
  common::milog::MiLogStream::~MiLogStream(&v46);
  v4 = -1;
LABEL_44:
  std::vector<proto::AvatarSnapshotBin>::~vector((std::vector<proto::AvatarSnapshotBin> *const)(v5 + 160));
  common::tools::TimeUtils::Timer::~Timer((common::tools::TimeUtils::Timer *const)(v5 + 96));
LABEL_45:
  result = v4;
  if ( v47 == (char *)v5 )
  {
    *(_QWORD *)((v5 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8008) = 0LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8010) = 0LL;
    *(_DWORD *)((v5 >> 3) + 0x7FFF8018) = 0;
    *(_DWORD *)((v5 >> 3) + 0x7FFF8020) = 0;
  }
  else
  {
    *(_QWORD *)v5 = 1172321806LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v5 >> 3) + 0x7FFF8020) = -168430091;
  }
  return result;
};

// Line 4777: range 00000000171911AA-0000000017191DD5
PlayerAvatarComp *__fastcall PlayerAvatarComp::findMirrorAvatarOrCreateFromSnapshot(
        PlayerAvatarComp *const this,
        PlayerAvatarComp *snapshot_type,
        uint64_t guid,
        __int64 a4)
{
  unsigned __int64 v4; // r13
  __int64 v5; // rax
  _DWORD *v6; // r12
  common::milog::MiLogStream *v7; // rax
  common::milog::MiLogStream *v8; // rax
  common::milog::MiLogStream *v9; // r14
  const proto::AvatarBin *v10; // rax
  common::milog::MiLogStream *v11; // rax
  common::milog::MiLogStream *v12; // rax
  common::milog::MiLogStream *v13; // rax
  common::milog::MiLogStream *v14; // rax
  common::milog::MiLogStream *v15; // rcx
  std::__shared_ptr_access<MirrorAvatar,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v16; // rax
  std::__shared_ptr_access<MirrorAvatar,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v17; // r14
  unsigned __int64 v18; // rax
  unsigned int (__fastcall *v19)(std::__shared_ptr_access<MirrorAvatar,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *, const proto::AvatarBin *); // r15
  const proto::AvatarBin *v20; // rax
  common::milog::MiLogStream *v21; // rax
  common::milog::MiLogStream *v22; // rax
  common::milog::MiLogStream *v23; // rax
  common::milog::MiLogStream *v24; // rax
  unsigned __int64 v25; // rax
  unsigned __int64 v26; // rdx
  common::milog::MiLogStream *v27; // rax
  common::milog::MiLogStream *v28; // rax
  common::milog::MiLogStream *v29; // rax
  common::milog::MiLogStream *v30; // rax
  bool v31; // r14
  common::milog::MiLogStream *v32; // r14
  std::__shared_ptr_access<MirrorAvatar,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v33; // rax
  common::milog::MiLogStream *v34; // rax
  std::__shared_ptr_access<MirrorAvatar,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v35; // rax
  std::__shared_ptr_access<MirrorAvatar,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v36; // r14
  unsigned __int64 v37; // rax
  void (__fastcall *v38)(std::__shared_ptr_access<MirrorAvatar,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *, proto::AvatarInfo *); // r15
  std::__shared_ptr_access<proto::AvatarAddNotify,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v39; // rax
  proto::AvatarInfo *v40; // rax
  Player *player; // r14
  common::milog::MiLogStream *v42; // rax
  common::milog::MiLogStream *v43; // rax
  common::milog::MiLogStream *v44; // r14
  int v47; // [rsp+1Ch] [rbp-1B4h]
  unsigned int val; // [rsp+3Ch] [rbp-194h] BYREF
  std::_Rb_tree_iterator<std::pair<long unsigned int const,proto::AvatarSnapshotBin> >::_Self __y; // [rsp+40h] [rbp-190h] BYREF
  const proto::AvatarSnapshotBin *snapshot_bin; // [rsp+48h] [rbp-188h]
  std::shared_ptr<Avatar> p_avatar_ptr; // [rsp+50h] [rbp-180h] BYREF
  common::milog::MiLogStream v52; // [rsp+60h] [rbp-170h] BYREF
  char v53[336]; // [rsp+80h] [rbp-150h] BYREF

  v47 = guid;
  v4 = (unsigned __int64)v53;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v5 = __asan_stack_malloc_3(288LL);
    if ( v5 )
      v4 = v5;
  }
  *(_QWORD *)v4 = 1102416563LL;
  *(_QWORD *)(v4 + 8) = "9 32 4 14 avatar_id:4795 48 4 18 snapshot_type:4776 64 8 9 iter:4784 96 8 9 guid:4776 128 16 19 "
                        "old_avatar_ptr:4778 160 16 10 timer:4783 192 16 15 avatar_ptr:4796 224 16 22 mirror_avatar_ptr:4"
                        "797 256 16 19 add_notify_ptr:4819";
  *(_QWORD *)(v4 + 16) = PlayerAvatarComp::findMirrorAvatarOrCreateFromSnapshot;
  v6 = (_DWORD *)(v4 >> 3);
  v6[536862720] = -235802127;
  v6[536862721] = -234556924;
  v6[536862722] = -218959360;
  v6[536862723] = -218959360;
  v6[536862724] = -219021312;
  v6[536862725] = -219021312;
  v6[536862726] = -219021312;
  v6[536862727] = -219021312;
  v6[536862728] = -202178560;
  *(_DWORD *)(v4 + 48) = v47;
  *(_QWORD *)(v4 + 96) = a4;
  PlayerAvatarComp::findAvatar((const PlayerAvatarComp *const)(v4 + 128), (uint64_t)snapshot_type, *(_QWORD *)(v4 + 96));
  if ( !std::operator!=<Avatar>(0LL, (const std::shared_ptr<Avatar> *)(v4 + 128)) )
  {
    common::tools::TimeUtils::Timer::Timer((common::tools::TimeUtils::Timer *const)(v4 + 160));
    *(std::map<long unsigned int,proto::AvatarSnapshotBin>::iterator *)(v4 + 64) = std::map<unsigned long,proto::AvatarSnapshotBin>::find(
                                                                                     &snapshot_type->avatar_snapshot_map_,
                                                                                     (const std::map<long unsigned int,proto::AvatarSnapshotBin>::key_type *)(v4 + 96));
    __y._M_node = std::map<unsigned long,proto::AvatarSnapshotBin>::end(&snapshot_type->avatar_snapshot_map_)._M_node;
    if ( std::operator==(
           (const std::_Rb_tree_iterator<std::pair<long unsigned int const,proto::AvatarSnapshotBin> >::_Self *)(v4 + 64),
           &__y) )
    {
      std::shared_ptr<MirrorAvatar>::shared_ptr((std::shared_ptr<MirrorAvatar> *const)this, 0LL);
LABEL_44:
      common::tools::TimeUtils::Timer::~Timer((common::tools::TimeUtils::Timer *const)(v4 + 160));
      goto LABEL_45;
    }
    snapshot_bin = &std::_Rb_tree_iterator<std::pair<unsigned long const,proto::AvatarSnapshotBin>>::operator->((const std::_Rb_tree_iterator<std::pair<long unsigned int const,proto::AvatarSnapshotBin> > *const)(v4 + 64))->second;
    if ( proto::AvatarSnapshotBin::avatar_snapshot_type(snapshot_bin) != *(_DWORD *)(v4 + 48) )
    {
      common::milog::MiLogStream::create(
        &v52,
        &common::milog::MiLogDefault::default_log_obj_,
        4u,
        "./src/player/avatar/player_avatar_comp.cpp",
        "findMirrorAvatarOrCreateFromSnapshot",
        4792);
      v7 = common::milog::MiLogStream::operator<<<char [47],(char *[47])0>(
             &v52,
             (const char (*)[47])"avatar_snapshot_type not match! snapshot_type:");
      v8 = common::milog::MiLogStream::operator<<<proto::AvatarSnapshotType,(proto::AvatarSnapshotType*)0>(
             v7,
             (const proto::AvatarSnapshotType *)(v4 + 48));
      v9 = common::milog::MiLogStream::operator<<<char [9],(char *[9])0>(v8, (const char (*)[9])" expect:");
      val = proto::AvatarSnapshotBin::avatar_snapshot_type(snapshot_bin);
      common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v9, &val);
      common::milog::MiLogStream::~MiLogStream(&v52);
      std::shared_ptr<MirrorAvatar>::shared_ptr((std::shared_ptr<MirrorAvatar> *const)this, 0LL);
      goto LABEL_44;
    }
    v10 = proto::AvatarSnapshotBin::avatar_bin(snapshot_bin);
    *(_DWORD *)(v4 + 32) = proto::AvatarBin::avatar_id(v10);
    PlayerAvatarComp::createAvatar(
      (PlayerAvatarComp *const)(v4 + 192),
      (__int64)snapshot_type,
      3u,
      *(unsigned int *)(v4 + 32),
      0LL);
    std::dynamic_pointer_cast<MirrorAvatar,Avatar>((const std::shared_ptr<Avatar> *)(v4 + 224));
    if ( std::operator==<MirrorAvatar>(0LL, (const std::shared_ptr<MirrorAvatar> *)(v4 + 224)) )
    {
      common::milog::MiLogStream::create(
        &v52,
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/player/avatar/player_avatar_comp.cpp",
        "findMirrorAvatarOrCreateFromSnapshot",
        4800);
      v11 = common::milog::MiLogStream::operator<<<char [38],(char *[38])0>(
              &v52,
              (const char (*)[38])"create mirror avatar fail, avatar_id:");
      v12 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v11, (const unsigned int *)(v4 + 32));
      v13 = common::milog::MiLogStream::operator<<<char [7],(char *[7])0>(v12, (const char (*)[7])" guid:");
      v14 = common::milog::MiLogStream::operator<<<unsigned long,(unsigned long *)0>(
              v13,
              (const unsigned __int64 *)(v4 + 96));
      v15 = common::milog::MiLogStream::operator<<<char [9],(char *[9])0>(v14, (const char (*)[9])" player:");
      if ( *(_BYTE *)(((unsigned __int64)&snapshot_type->player_ >> 3) + 0x7FFF8000) )
        __asan_report_load8(&snapshot_type->player_);
    }
    else
    {
      v16 = std::__shared_ptr_access<MirrorAvatar,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<MirrorAvatar,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 224));
      v17 = v16;
      if ( *(_BYTE *)(((unsigned __int64)v16 >> 3) + 0x7FFF8000) )
        __asan_report_load8(v16);
      v18 = *(_QWORD *)v17->baseclass_0 + 440LL;
      if ( *(_BYTE *)((v18 >> 3) + 0x7FFF8000) )
        v18 = __asan_report_load8(*(_QWORD *)v17->baseclass_0 + 440LL);
      v19 = *(unsigned int (__fastcall **)(std::__shared_ptr_access<MirrorAvatar,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *, const proto::AvatarBin *))v18;
      v20 = proto::AvatarSnapshotBin::avatar_bin(snapshot_bin);
      if ( v19(v17, v20) )
      {
        common::milog::MiLogStream::create(
          &v52,
          &common::milog::MiLogDefault::default_log_obj_,
          3u,
          "./src/player/avatar/player_avatar_comp.cpp",
          "findMirrorAvatarOrCreateFromSnapshot",
          4805);
        v21 = common::milog::MiLogStream::operator<<<char [37],(char *[37])0>(
                &v52,
                (const char (*)[37])"clone mirror avatar fail, avatar_id:");
        v22 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                v21,
                (const unsigned int *)(v4 + 32));
        v23 = common::milog::MiLogStream::operator<<<char [7],(char *[7])0>(v22, (const char (*)[7])" guid:");
        v24 = common::milog::MiLogStream::operator<<<unsigned long,(unsigned long *)0>(
                v23,
                (const unsigned __int64 *)(v4 + 96));
        v15 = common::milog::MiLogStream::operator<<<char [9],(char *[9])0>(v24, (const char (*)[9])" player:");
        if ( *(_BYTE *)(((unsigned __int64)&snapshot_type->player_ >> 3) + 0x7FFF8000) )
          __asan_report_load8(&snapshot_type->player_);
      }
      else
      {
        v25 = (unsigned __int64)std::__shared_ptr_access<MirrorAvatar,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<MirrorAvatar,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 224));
        if ( *(_BYTE *)((v25 >> 3) + 0x7FFF8000) )
          v25 = __asan_report_load8(v25);
        v26 = *(_QWORD *)v25 + 408LL;
        if ( *(_BYTE *)((v26 >> 3) + 0x7FFF8000) )
          v25 = __asan_report_load8(*(_QWORD *)v25 + 408LL);
        if ( (*(unsigned int (__fastcall **)(unsigned __int64, _QWORD))v26)(v25, 0LL) )
        {
          common::milog::MiLogStream::create(
            &v52,
            &common::milog::MiLogDefault::default_log_obj_,
            3u,
            "./src/player/avatar/player_avatar_comp.cpp",
            "findMirrorAvatarOrCreateFromSnapshot",
            4810);
          v27 = common::milog::MiLogStream::operator<<<char [36],(char *[36])0>(
                  &v52,
                  (const char (*)[36])"init mirror avatar fail, avatar_id:");
          v28 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                  v27,
                  (const unsigned int *)(v4 + 32));
          v29 = common::milog::MiLogStream::operator<<<char [7],(char *[7])0>(v28, (const char (*)[7])" guid:");
          v30 = common::milog::MiLogStream::operator<<<unsigned long,(unsigned long *)0>(
                  v29,
                  (const unsigned __int64 *)(v4 + 96));
          v15 = common::milog::MiLogStream::operator<<<char [9],(char *[9])0>(v30, (const char (*)[9])" player:");
          if ( *(_BYTE *)(((unsigned __int64)&snapshot_type->player_ >> 3) + 0x7FFF8000) )
            __asan_report_load8(&snapshot_type->player_);
        }
        else
        {
          std::shared_ptr<Avatar>::shared_ptr<MirrorAvatar,void>(
            &p_avatar_ptr,
            (const std::shared_ptr<MirrorAvatar> *)(v4 + 224));
          v31 = PlayerAvatarComp::emplaceAvatar(snapshot_type, &p_avatar_ptr) != 0;
          std::shared_ptr<Avatar>::~shared_ptr(&p_avatar_ptr);
          if ( !v31 )
          {
            std::map<unsigned long,proto::AvatarSnapshotBin>::erase(
              &snapshot_type->avatar_snapshot_map_,
              (const std::map<long unsigned int,proto::AvatarSnapshotBin>::key_type *)(v4 + 96));
            common::tools::perf::make_shared<proto::AvatarAddNotify>();
            v35 = std::__shared_ptr_access<MirrorAvatar,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<MirrorAvatar,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 224));
            v36 = v35;
            if ( *(_BYTE *)(((unsigned __int64)v35 >> 3) + 0x7FFF8000) )
              __asan_report_load8(v35);
            v37 = *(_QWORD *)v36->baseclass_0 + 472LL;
            if ( *(_BYTE *)((v37 >> 3) + 0x7FFF8000) )
              v37 = __asan_report_load8(*(_QWORD *)v36->baseclass_0 + 472LL);
            v38 = *(void (__fastcall **)(std::__shared_ptr_access<MirrorAvatar,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *, proto::AvatarInfo *))v37;
            v39 = std::__shared_ptr_access<proto::AvatarAddNotify,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<proto::AvatarAddNotify,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 256));
            v40 = proto::AvatarAddNotify::mutable_avatar(v39);
            v38(v36, v40);
            if ( *(_BYTE *)(((unsigned __int64)&snapshot_type->player_ >> 3) + 0x7FFF8000) )
              __asan_report_load8(&snapshot_type->player_);
            player = snapshot_type->player_;
            std::dynamic_pointer_cast<google::protobuf::Message const,proto::AvatarAddNotify>((const std::shared_ptr<proto::AvatarAddNotify> *)&p_avatar_ptr);
            Player::sendMessage(player, (common::minet::ConstMessagePtr *)&p_avatar_ptr, 0LL);
            std::shared_ptr<google::protobuf::Message const>::~shared_ptr((std::shared_ptr<const google::protobuf::Message> *const)&p_avatar_ptr);
            common::milog::MiLogStream::create(
              &v52,
              &common::milog::MiLogDefault::default_log_obj_,
              1u,
              "./src/player/avatar/player_avatar_comp.cpp",
              "findMirrorAvatarOrCreateFromSnapshot",
              4822);
            v42 = common::milog::MiLogStream::operator<<<char [15],(char *[15])0>(
                    &v52,
                    (const char (*)[15])"create avatar:");
            v43 = common::milog::MiLogStream::operator<<<unsigned long,(unsigned long *)0>(
                    v42,
                    (const unsigned __int64 *)(v4 + 96));
            v44 = common::milog::MiLogStream::operator<<<char [26],(char *[26])0>(
                    v43,
                    (const char (*)[26])" from snapshot cost_time:");
            val = common::tools::TimeUtils::Timer::time((const common::tools::TimeUtils::Timer *const)(v4 + 160));
            common::milog::MiLogStream::operator<<<int,(int *)0>(v44, (const int *)&val);
            common::milog::MiLogStream::~MiLogStream(&v52);
            std::shared_ptr<MirrorAvatar>::shared_ptr(
              (std::shared_ptr<MirrorAvatar> *const)this,
              (std::shared_ptr<MirrorAvatar> *)(v4 + 224));
            std::shared_ptr<proto::AvatarAddNotify>::~shared_ptr((std::shared_ptr<proto::AvatarAddNotify> *const)(v4 + 256));
            goto LABEL_43;
          }
          common::milog::MiLogStream::create(
            &v52,
            &common::milog::MiLogDefault::default_log_obj_,
            4u,
            "./src/player/avatar/player_avatar_comp.cpp",
            "findMirrorAvatarOrCreateFromSnapshot",
            4815);
          v32 = common::milog::MiLogStream::operator<<<char [35],(char *[35])0>(
                  &v52,
                  (const char (*)[35])"emplaceAvatar fail, mirror_avatar:");
          v33 = std::__shared_ptr_access<MirrorAvatar,(__gnu_cxx::_Lock_policy)2,false,false>::operator*((const std::__shared_ptr_access<MirrorAvatar,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 224));
          v34 = common::milog::MiLogStream::operator<<<MirrorAvatar,(MirrorAvatar*)0>(v32, v33);
          v15 = common::milog::MiLogStream::operator<<<char [9],(char *[9])0>(v34, (const char (*)[9])" player:");
          if ( *(_BYTE *)(((unsigned __int64)&snapshot_type->player_ >> 3) + 0x7FFF8000) )
            __asan_report_load8(&snapshot_type->player_);
        }
      }
    }
    operator<<(v15, snapshot_type->player_);
    common::milog::MiLogStream::~MiLogStream(&v52);
    std::shared_ptr<MirrorAvatar>::shared_ptr((std::shared_ptr<MirrorAvatar> *const)this, 0LL);
LABEL_43:
    std::shared_ptr<MirrorAvatar>::~shared_ptr((std::shared_ptr<MirrorAvatar> *const)(v4 + 224));
    std::shared_ptr<Avatar>::~shared_ptr((std::shared_ptr<Avatar> *const)(v4 + 192));
    goto LABEL_44;
  }
  if ( *(_WORD *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store16(this);
  std::dynamic_pointer_cast<MirrorAvatar,Avatar>((const std::shared_ptr<Avatar> *)this);
LABEL_45:
  std::shared_ptr<Avatar>::~shared_ptr((std::shared_ptr<Avatar> *const)(v4 + 128));
  if ( v53 == (char *)v4 )
  {
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8008) = 0LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8010) = 0LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8018) = 0LL;
    *(_DWORD *)((v4 >> 3) + 0x7FFF8020) = 0;
  }
  else
  {
    *(_QWORD *)v4 = 1172321806LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v4 >> 3) + 0x7FFF8020) = -168430091;
  }
  return this;
};

// Line 4827: range 0000000017191DD6-000000001719262B
__int64 __fastcall PlayerAvatarComp::delInformalAvatarOrSnapshotBatch(
        PlayerAvatarComp *const this,
        proto::AvatarSnapshotType snapshot_type,
        const std::vector<long unsigned int> *guid_vec)
{
  unsigned int v3; // r14d
  unsigned __int64 v4; // r13
  __int64 v5; // rax
  _DWORD *v6; // r12
  unsigned __int64 v7; // rax
  std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v8; // rax
  common::milog::MiLogStream *v9; // r14
  std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v10; // rax
  common::milog::MiLogStream *v11; // rax
  common::milog::MiLogStream *v12; // rax
  int v13; // r15d
  common::milog::MiLogStream *v14; // rax
  common::milog::MiLogStream *v15; // rax
  common::milog::MiLogStream *v16; // rax
  common::milog::MiLogStream *v17; // rax
  common::milog::MiLogStream *v18; // r14
  unsigned __int64 v19; // rax
  common::milog::MiLogStream *v20; // rax
  common::milog::MiLogStream *v21; // rax
  common::milog::MiLogStream *v22; // rax
  __int64 result; // rax
  unsigned int val; // [rsp+24h] [rbp-1BCh] BYREF
  std::vector<long unsigned int>::const_iterator __for_begin; // [rsp+28h] [rbp-1B8h] BYREF
  std::vector<long unsigned int>::iterator __for_end; // [rsp+30h] [rbp-1B0h] BYREF
  const std::vector<long unsigned int> *__for_range; // [rsp+38h] [rbp-1A8h]
  std::vector<long unsigned int> *__for_range_0; // [rsp+40h] [rbp-1A0h]
  const proto::AvatarSnapshotBin *snapshot_bin; // [rsp+48h] [rbp-198h]
  common::milog::MiLogStream v31; // [rsp+50h] [rbp-190h] BYREF
  char v32[368]; // [rsp+70h] [rbp-170h] BYREF

  v4 = (unsigned __int64)v32;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v5 = __asan_stack_malloc_3(320LL);
    if ( v5 )
      v4 = v5;
  }
  *(_QWORD *)v4 = 1102416563LL;
  *(_QWORD *)(v4 + 8) = "7 48 4 18 snapshot_type:4826 64 8 9 guid:4830 96 8 9 guid:4859 128 8 9 iter:4844 160 16 15 avata"
                        "r_ptr:4832 192 24 29 informal_avatar_guid_vec:4828 256 24 22 snapshot_guid_vec:4829";
  *(_QWORD *)(v4 + 16) = PlayerAvatarComp::delInformalAvatarOrSnapshotBatch;
  v6 = (_DWORD *)(v4 >> 3);
  v6[536862720] = -235802127;
  v6[536862721] = -234556943;
  v6[536862722] = -218959360;
  v6[536862723] = -218959360;
  v6[536862724] = -218959360;
  v6[536862725] = -219021312;
  v6[536862726] = -234881024;
  v6[536862727] = -218959118;
  v6[536862728] = -218103808;
  v6[536862729] = -202116109;
  *(_DWORD *)(v4 + 48) = snapshot_type;
  std::vector<unsigned long>::vector((std::vector<long unsigned int> *const)(v4 + 192));
  std::vector<unsigned long>::vector((std::vector<long unsigned int> *const)(v4 + 256));
  __for_range = guid_vec;
  __for_begin._M_current = std::vector<unsigned long>::begin(guid_vec)._M_current;
  *(std::vector<long unsigned int>::const_iterator *)(v4 + 96) = std::vector<unsigned long>::end(guid_vec);
  while ( __gnu_cxx::operator!=<unsigned long const*,std::vector<unsigned long>>(
            &__for_begin,
            (const __gnu_cxx::__normal_iterator<long unsigned int const*,std::vector<long unsigned int> > *)(v4 + 96)) )
  {
    v7 = (unsigned __int64)__gnu_cxx::__normal_iterator<unsigned long const*,std::vector<unsigned long>>::operator*(&__for_begin);
    if ( *(_BYTE *)((v7 >> 3) + 0x7FFF8000) )
      v7 = __asan_report_load8(v7);
    *(_QWORD *)(v4 + 64) = *(_QWORD *)v7;
    PlayerAvatarComp::findAvatar((const PlayerAvatarComp *const)(v4 + 160), (uint64_t)this, *(_QWORD *)(v4 + 64));
    if ( std::operator!=<Avatar>(0LL, (const std::shared_ptr<Avatar> *)(v4 + 160)) )
    {
      v8 = std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 160));
      if ( Avatar::isFormal(v8) )
      {
        common::milog::MiLogStream::create(
          &v31,
          &common::milog::MiLogDefault::default_log_obj_,
          4u,
          "./src/player/avatar/player_avatar_comp.cpp",
          "delInformalAvatarOrSnapshotBatch",
          4837);
        v9 = common::milog::MiLogStream::operator<<<char [26],(char *[26])0>(
               &v31,
               (const char (*)[26])"avatar is formal, avatar:");
        v10 = std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::operator*((const std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 160));
        v11 = common::milog::MiLogStream::operator<<<Avatar,(Avatar*)0>(v9, v10);
        v12 = common::milog::MiLogStream::operator<<<char [7],(char *[7])0>(v11, (const char (*)[7])" guid:");
        common::milog::MiLogStream::operator<<<unsigned long,(unsigned long *)0>(
          v12,
          (const unsigned __int64 *)(v4 + 64));
        common::milog::MiLogStream::~MiLogStream(&v31);
        v3 = -1;
        v13 = 0;
        goto LABEL_19;
      }
      std::vector<unsigned long>::push_back(
        (std::vector<long unsigned int> *const)(v4 + 192),
        (const std::vector<long unsigned int>::value_type *)(v4 + 64));
    }
    else
    {
      *(std::map<long unsigned int,proto::AvatarSnapshotBin>::iterator *)(v4 + 128) = std::map<unsigned long,proto::AvatarSnapshotBin>::find(
                                                                                        &this->avatar_snapshot_map_,
                                                                                        (const std::map<long unsigned int,proto::AvatarSnapshotBin>::key_type *)(v4 + 64));
      __for_end._M_current = (unsigned __int64 *)std::map<unsigned long,proto::AvatarSnapshotBin>::end(&this->avatar_snapshot_map_)._M_node;
      if ( std::operator==(
             (const std::_Rb_tree_iterator<std::pair<long unsigned int const,proto::AvatarSnapshotBin> >::_Self *)(v4 + 128),
             (const std::_Rb_tree_iterator<std::pair<long unsigned int const,proto::AvatarSnapshotBin> >::_Self *)&__for_end) )
      {
        common::milog::MiLogStream::create(
          &v31,
          &common::milog::MiLogDefault::default_log_obj_,
          4u,
          "./src/player/avatar/player_avatar_comp.cpp",
          "delInformalAvatarOrSnapshotBatch",
          4847);
        v14 = common::milog::MiLogStream::operator<<<char [6],(char *[6])0>(&v31, (const char (*)[6])"guid:");
        v15 = common::milog::MiLogStream::operator<<<unsigned long,(unsigned long *)0>(
                v14,
                (const unsigned __int64 *)(v4 + 64));
        common::milog::MiLogStream::operator<<<char [28],(char *[28])0>(
          v15,
          (const char (*)[28])" avatar_snapshot not found!");
        common::milog::MiLogStream::~MiLogStream(&v31);
        v3 = -1;
LABEL_17:
        v13 = 0;
        goto LABEL_19;
      }
      snapshot_bin = &std::_Rb_tree_iterator<std::pair<unsigned long const,proto::AvatarSnapshotBin>>::operator->((const std::_Rb_tree_iterator<std::pair<long unsigned int const,proto::AvatarSnapshotBin> > *const)(v4 + 128))->second;
      if ( proto::AvatarSnapshotBin::avatar_snapshot_type(snapshot_bin) != *(_DWORD *)(v4 + 48) )
      {
        common::milog::MiLogStream::create(
          &v31,
          &common::milog::MiLogDefault::default_log_obj_,
          4u,
          "./src/player/avatar/player_avatar_comp.cpp",
          "delInformalAvatarOrSnapshotBatch",
          4853);
        v16 = common::milog::MiLogStream::operator<<<char [47],(char *[47])0>(
                &v31,
                (const char (*)[47])"avatar_snapshot_type not match! snapshot_type:");
        v17 = common::milog::MiLogStream::operator<<<proto::AvatarSnapshotType,(proto::AvatarSnapshotType*)0>(
                v16,
                (const proto::AvatarSnapshotType *)(v4 + 48));
        v18 = common::milog::MiLogStream::operator<<<char [9],(char *[9])0>(v17, (const char (*)[9])" expect:");
        val = proto::AvatarSnapshotBin::avatar_snapshot_type(snapshot_bin);
        common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v18, &val);
        common::milog::MiLogStream::~MiLogStream(&v31);
        v3 = -1;
        goto LABEL_17;
      }
      std::vector<unsigned long>::push_back(
        (std::vector<long unsigned int> *const)(v4 + 256),
        (const std::vector<long unsigned int>::value_type *)(v4 + 64));
    }
    v13 = 1;
LABEL_19:
    std::shared_ptr<Avatar>::~shared_ptr((std::shared_ptr<Avatar> *const)(v4 + 160));
    if ( v13 != 1 )
      goto LABEL_32;
    __gnu_cxx::__normal_iterator<unsigned long const*,std::vector<unsigned long>>::operator++(&__for_begin);
  }
  __for_range_0 = (std::vector<long unsigned int> *)(v4 + 256);
  *(std::vector<long unsigned int>::iterator *)(v4 + 128) = std::vector<unsigned long>::begin((std::vector<long unsigned int> *const)(v4 + 256));
  __for_end._M_current = std::vector<unsigned long>::end(__for_range_0)._M_current;
  while ( __gnu_cxx::operator!=<unsigned long *,std::vector<unsigned long>>(
            (const __gnu_cxx::__normal_iterator<long unsigned int*,std::vector<long unsigned int> > *)(v4 + 128),
            &__for_end) )
  {
    v19 = (unsigned __int64)__gnu_cxx::__normal_iterator<unsigned long *,std::vector<unsigned long>>::operator*((const __gnu_cxx::__normal_iterator<long unsigned int*,std::vector<long unsigned int> > *const)(v4 + 128));
    if ( *(_BYTE *)((v19 >> 3) + 0x7FFF8000) )
      v19 = __asan_report_load8(v19);
    *(_QWORD *)(v4 + 96) = *(_QWORD *)v19;
    if ( !std::map<unsigned long,proto::AvatarSnapshotBin>::erase(
            &this->avatar_snapshot_map_,
            (const std::map<long unsigned int,proto::AvatarSnapshotBin>::key_type *)(v4 + 96)) )
    {
      common::milog::MiLogStream::create(
        &v31,
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/player/avatar/player_avatar_comp.cpp",
        "delInformalAvatarOrSnapshotBatch",
        4863);
      v20 = common::milog::MiLogStream::operator<<<char [6],(char *[6])0>(&v31, (const char (*)[6])"guid:");
      v21 = common::milog::MiLogStream::operator<<<unsigned long,(unsigned long *)0>(
              v20,
              (const unsigned __int64 *)(v4 + 96));
      common::milog::MiLogStream::operator<<<char [27],(char *[27])0>(
        v21,
        (const char (*)[27])" avatar_snapshot not found");
      common::milog::MiLogStream::~MiLogStream(&v31);
    }
    __gnu_cxx::__normal_iterator<unsigned long *,std::vector<unsigned long>>::operator++((__gnu_cxx::__normal_iterator<long unsigned int*,std::vector<long unsigned int> > *const)(v4 + 128));
  }
  if ( !std::vector<unsigned long>::empty((const std::vector<long unsigned int> *const)(v4 + 192))
    && PlayerAvatarComp::delInformalAvatarBatchAndReplaceByAvatarTeam(
         this,
         (const std::vector<long unsigned int> *)(v4 + 192)) )
  {
    common::milog::MiLogStream::create(
      &v31,
      &common::milog::MiLogDefault::default_log_obj_,
      4u,
      "./src/player/avatar/player_avatar_comp.cpp",
      "delInformalAvatarOrSnapshotBatch",
      4870);
    v22 = common::milog::MiLogStream::operator<<<char [77],(char *[77])0>(
            &v31,
            (const char (*)[77])"delInformalAvatarBatchAndReplaceByAvatarTeam fail, informal_avatar_guid_vec:");
    common::milog::MiLogStream::operator<<<unsigned long>(v22, (const std::vector<long unsigned int> *)(v4 + 192));
    common::milog::MiLogStream::~MiLogStream(&v31);
    v3 = -1;
  }
  else
  {
    v3 = 0;
  }
LABEL_32:
  std::vector<unsigned long>::~vector((std::vector<long unsigned int> *const)(v4 + 256));
  std::vector<unsigned long>::~vector((std::vector<long unsigned int> *const)(v4 + 192));
  result = v3;
  if ( v32 == (char *)v4 )
  {
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8008) = 0LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8010) = 0LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8018) = 0LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8020) = 0LL;
  }
  else
  {
    *(_QWORD *)v4 = 1172321806LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8020) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 4878: range 000000001719262C-0000000017192900
std::_Rb_tree_const_iterator<std::pair<long unsigned int const,proto::AvatarSnapshotBin> >::_Base_ptr __fastcall PlayerAvatarComp::getAvatarProfilePicFromAvatarOrSnapshot(
        const PlayerAvatarComp *const this,
        uint64_t guid)
{
  unsigned __int64 v2; // r12
  __int64 v3; // rax
  _DWORD *v4; // r13
  std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v5; // rax
  std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v6; // rax
  std::_Rb_tree_const_iterator<std::pair<long unsigned int const,proto::AvatarSnapshotBin> >::_Base_ptr M_node; // r14
  std::_Rb_tree_const_iterator<std::pair<long unsigned int const,proto::AvatarSnapshotBin> >::pointer v8; // rax
  const proto::AvatarBin *v9; // rax
  std::_Rb_tree_const_iterator<std::pair<long unsigned int const,proto::AvatarSnapshotBin> >::pointer v10; // rax
  const proto::AvatarBin *v11; // rax
  std::_Rb_tree_const_iterator<std::pair<long unsigned int const,proto::AvatarSnapshotBin> >::_Base_ptr result; // rax
  unsigned int __x; // [rsp+18h] [rbp-C8h] BYREF
  unsigned int __y; // [rsp+1Ch] [rbp-C4h] BYREF
  std::pair<int,int> __p; // [rsp+20h] [rbp-C0h] BYREF
  std::_Rb_tree_const_iterator<std::pair<long unsigned int const,proto::AvatarSnapshotBin> >::_Self v16; // [rsp+28h] [rbp-B8h] BYREF
  char v17[176]; // [rsp+30h] [rbp-B0h] BYREF

  v2 = (unsigned __int64)v17;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_1(128LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "3 32 8 9 iter:4884 64 8 9 guid:4877 96 16 15 avatar_ptr:4879";
  *(_QWORD *)(v2 + 16) = PlayerAvatarComp::getAvatarProfilePicFromAvatarOrSnapshot;
  v4 = (_DWORD *)(v2 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = -218959360;
  v4[536862722] = -218959360;
  v4[536862723] = -202178560;
  *(_QWORD *)(v2 + 64) = guid;
  PlayerAvatarComp::findAvatar((const PlayerAvatarComp *const)(v2 + 96), (uint64_t)this, *(_QWORD *)(v2 + 64));
  if ( std::operator!=<Avatar>(0LL, (const std::shared_ptr<Avatar> *)(v2 + 96)) )
  {
    v5 = std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 96));
    __y = Avatar::getCostumeId(v5);
    v6 = std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 96));
    __x = Avatar::getAvatarId(v6);
    M_node = (std::_Rb_tree_const_iterator<std::pair<long unsigned int const,proto::AvatarSnapshotBin> >::_Base_ptr)std::make_pair<unsigned int,unsigned int>(&__x, &__y);
  }
  else
  {
    *(std::map<long unsigned int,proto::AvatarSnapshotBin>::const_iterator *)(v2 + 32) = std::map<unsigned long,proto::AvatarSnapshotBin>::find(
                                                                                           &this->avatar_snapshot_map_,
                                                                                           (const std::map<long unsigned int,proto::AvatarSnapshotBin>::key_type *)(v2 + 64));
    v16._M_node = std::map<unsigned long,proto::AvatarSnapshotBin>::end(&this->avatar_snapshot_map_)._M_node;
    if ( std::operator!=(
           (const std::_Rb_tree_const_iterator<std::pair<long unsigned int const,proto::AvatarSnapshotBin> >::_Self *)(v2 + 32),
           &v16) )
    {
      v8 = std::_Rb_tree_const_iterator<std::pair<unsigned long const,proto::AvatarSnapshotBin>>::operator->((const std::_Rb_tree_const_iterator<std::pair<long unsigned int const,proto::AvatarSnapshotBin> > *const)(v2 + 32));
      v9 = proto::AvatarSnapshotBin::avatar_bin(&v8->second);
      __y = proto::AvatarBin::costume_id(v9);
      v10 = std::_Rb_tree_const_iterator<std::pair<unsigned long const,proto::AvatarSnapshotBin>>::operator->((const std::_Rb_tree_const_iterator<std::pair<long unsigned int const,proto::AvatarSnapshotBin> > *const)(v2 + 32));
      v11 = proto::AvatarSnapshotBin::avatar_bin(&v10->second);
      __x = proto::AvatarBin::avatar_id(v11);
      M_node = (std::_Rb_tree_const_iterator<std::pair<long unsigned int const,proto::AvatarSnapshotBin> >::_Base_ptr)std::make_pair<unsigned int,unsigned int>(&__x, &__y);
    }
    else
    {
      __y = 0;
      __x = 0;
      __p = std::make_pair<int,int>((int *)&__x, (int *)&__y);
      std::pair<unsigned int,unsigned int>::pair<int,int,true>((std::pair<unsigned int,unsigned int> *const)&v16, &__p);
      M_node = v16._M_node;
    }
  }
  std::shared_ptr<Avatar>::~shared_ptr((std::shared_ptr<Avatar> *const)(v2 + 96));
  result = M_node;
  if ( v17 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 4893: range 0000000017192902-00000000171929D6
proto::AvatarSnapshotBin *__fastcall PlayerAvatarComp::findSavedAvatarSnapshot(
        PlayerAvatarComp *const this,
        uint64_t guid)
{
  unsigned __int64 v2; // rbx
  __int64 v3; // rax
  unsigned __int64 v4; // r12
  proto::AvatarSnapshotBin *result; // rax
  char v6[96]; // [rsp+10h] [rbp-60h] BYREF

  v2 = (unsigned __int64)v6;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_0(64LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "1 32 8 9 guid:4892";
  *(_QWORD *)(v2 + 16) = PlayerAvatarComp::findSavedAvatarSnapshot;
  v4 = v2 >> 3;
  *(_DWORD *)(v4 + 2147450880) = -235802127;
  *(_DWORD *)(v4 + 2147450884) = -202116352;
  *(_QWORD *)(v2 + 32) = guid;
  result = common::tools::MiscUtils::findMapValuePointer<std::map<unsigned long,proto::AvatarSnapshotBin>>(
             &this->avatar_snapshot_map_,
             (const std::map<long unsigned int,proto::AvatarSnapshotBin>::key_type *)(v2 + 32));
  if ( v6 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 4899: range 00000000171929D8-0000000017193D6C
__int64 __fastcall PlayerAvatarComp::delInformalAvatar(
        PlayerAvatarComp *const this,
        uint64_t del_avatar_guid,
        uint64_t replace_avatar_guid,
        bool is_notify)
{
  unsigned __int64 v4; // r13
  __int64 v5; // rax
  _DWORD *v6; // r12
  common::milog::MiLogStream *v7; // rax
  common::milog::MiLogStream *v8; // rax
  common::milog::MiLogStream *v9; // rcx
  unsigned int v10; // r14d
  common::milog::MiLogStream *v11; // rax
  common::milog::MiLogStream *v12; // rax
  std::_Rb_tree_iterator<std::pair<long unsigned int const,std::shared_ptr<Avatar> > >::pointer v13; // rax
  common::milog::MiLogStream *v14; // rax
  common::milog::MiLogStream *v15; // rax
  common::milog::MiLogStream *v16; // rcx
  std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v17; // rax
  common::milog::MiLogStream *v18; // rax
  common::milog::MiLogStream *v19; // rax
  common::milog::MiLogStream *v20; // rax
  common::milog::MiLogStream *v21; // rax
  common::milog::MiLogStream *v22; // rcx
  common::milog::MiLogStream *v24; // rax
  common::milog::MiLogStream *v25; // rax
  common::milog::MiLogStream *v26; // rax
  common::milog::MiLogStream *v27; // rax
  common::milog::MiLogStream *v28; // rcx
  std::vector<long unsigned int> *AvatarVec; // rax
  std::vector<long unsigned int> *v30; // rax
  std::vector<long unsigned int> *v31; // rax
  std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v33; // rax
  uint64_t Guid; // rax
  std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v35; // rax
  std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v36; // rax
  std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v37; // rax
  std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v39; // rax
  Avatar *v40; // rax
  std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v41; // rax
  std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v42; // rax
  uint64_t v43; // rax
  Scene *v44; // r14
  Avatar *v45; // rax
  std::__shared_ptr_access<proto::AvatarDelNotify,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v46; // rax
  Player *player; // r14
  PlayerSceneComp *SceneComp; // rax
  PlayerEventComp *EventComp; // r14
  unsigned __int64 v50; // rax
  unsigned __int64 v51; // rdx
  std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v52; // rax
  unsigned __int64 *v53; // r8
  proto::AvatarType *v54; // r9
  common::milog::MiLogStream *v55; // rax
  common::milog::MiLogStream *v56; // rax
  common::milog::MiLogStream *v57; // r14
  std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v58; // rax
  common::milog::MiLogStream *v59; // rax
  common::milog::MiLogStream *v60; // r14
  __int64 result; // rax
  unsigned int __args_0[2]; // [rsp+24h] [rbp-23Ch] BYREF
  float revive_hp_percent; // [rsp+2Ch] [rbp-234h]
  std::map<unsigned int,AvatarTeam>::iterator __for_begin; // [rsp+30h] [rbp-230h] BYREF
  std::map<unsigned int,AvatarTeam>::iterator __for_end; // [rsp+38h] [rbp-228h] BYREF
  std::map<unsigned int,AvatarTeam> *__for_range; // [rsp+40h] [rbp-220h]
  std::pair<unsigned int const,AvatarTeam> *__in; // [rsp+48h] [rbp-218h]
  std::tuple_element<0,std::pair<unsigned int const,AvatarTeam> >::type *team_id; // [rsp+50h] [rbp-210h]
  std::tuple_element<1,std::pair<unsigned int const,AvatarTeam> >::type *avatar_team; // [rsp+58h] [rbp-208h]
  std::shared_ptr<Scene> v72; // [rsp+60h] [rbp-200h] BYREF
  common::milog::MiLogStream v73; // [rsp+70h] [rbp-1F0h] BYREF
  char v74[464]; // [rsp+90h] [rbp-1D0h] BYREF

  v4 = (unsigned __int64)v74;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v5 = __asan_stack_malloc_3(416LL);
    if ( v5 )
      v4 = v5;
  }
  *(_QWORD *)v4 = 1102416563LL;
  *(_QWORD *)(v4 + 8) = "10 32 8 9 iter:4900 64 8 20 del_avatar_guid:4898 96 8 24 replace_avatar_guid:4898 128 16 19 del_"
                        "avatar_ptr:4913 160 16 19 cur_avatar_ptr:4928 192 16 23 replace_avatar_ptr:4936 224 16 14 scene_"
                        "ptr:5000 256 16 15 notify_ptr:5008 288 24 31 scene_team_avatar_guid_vec:4980 352 24 35 old_scene"
                        "_team_avatar_guid_vec:4981";
  *(_QWORD *)(v4 + 16) = PlayerAvatarComp::delInformalAvatar;
  v6 = (_DWORD *)(v4 >> 3);
  v6[536862720] = -235802127;
  v6[536862721] = -218959360;
  v6[536862722] = -218959360;
  v6[536862723] = -218959360;
  v6[536862724] = -219021312;
  v6[536862725] = -219021312;
  v6[536862726] = -219021312;
  v6[536862727] = -219021312;
  v6[536862728] = -219021312;
  v6[536862729] = -234881024;
  v6[536862730] = -218959118;
  v6[536862731] = -218103808;
  v6[536862732] = -202116109;
  *(_QWORD *)(v4 + 64) = del_avatar_guid;
  *(_QWORD *)(v4 + 96) = replace_avatar_guid;
  *(std::map<long unsigned int,std::shared_ptr<Avatar>>::iterator *)(v4 + 32) = std::map<unsigned long,std::shared_ptr<Avatar>>::find(
                                                                                  &this->avatar_map_,
                                                                                  (const std::map<long unsigned int,std::shared_ptr<Avatar>>::key_type *)(v4 + 64));
  __for_end._M_node = std::map<unsigned long,std::shared_ptr<Avatar>>::end(&this->avatar_map_)._M_node;
  if ( std::operator==(
         (const std::_Rb_tree_iterator<std::pair<long unsigned int const,std::shared_ptr<Avatar> > >::_Self *)(v4 + 32),
         (const std::_Rb_tree_iterator<std::pair<long unsigned int const,std::shared_ptr<Avatar> > >::_Self *)&__for_end) )
  {
    common::milog::MiLogStream::create(
      &v73,
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/player/avatar/player_avatar_comp.cpp",
      "delInformalAvatar",
      4903);
    v7 = common::milog::MiLogStream::operator<<<char [35],(char *[35])0>(
           &v73,
           (const char (*)[35])"avatar not found, del_avatar_guid:");
    v8 = common::milog::MiLogStream::operator<<<unsigned long,(unsigned long *)0>(
           v7,
           (const unsigned __int64 *)(v4 + 64));
    v9 = common::milog::MiLogStream::operator<<<char [9],(char *[9])0>(v8, (const char (*)[9])" player:");
    if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
      __asan_report_load8(&this->player_);
LABEL_7:
    operator<<(v9, this->player_);
    common::milog::MiLogStream::~MiLogStream(&v73);
    v10 = -1;
    goto LABEL_87;
  }
  if ( *(_QWORD *)(v4 + 64) == *(_QWORD *)(v4 + 96) )
  {
    common::milog::MiLogStream::create(
      &v73,
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/player/avatar/player_avatar_comp.cpp",
      "delInformalAvatar",
      4909);
    v11 = common::milog::MiLogStream::operator<<<char [57],(char *[57])0>(
            &v73,
            (const char (*)[57])"del_avatar_guid == replace_avatar_guid, del_avatar_guid:");
    v12 = common::milog::MiLogStream::operator<<<unsigned long,(unsigned long *)0>(
            v11,
            (const unsigned __int64 *)(v4 + 64));
    v9 = common::milog::MiLogStream::operator<<<char [9],(char *[9])0>(v12, (const char (*)[9])" player:");
    if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
      __asan_report_load8(&this->player_);
    goto LABEL_7;
  }
  v13 = std::_Rb_tree_iterator<std::pair<unsigned long const,std::shared_ptr<Avatar>>>::operator->((const std::_Rb_tree_iterator<std::pair<long unsigned int const,std::shared_ptr<Avatar> > > *const)(v4 + 32));
  std::shared_ptr<Avatar>::shared_ptr((std::shared_ptr<Avatar> *const)(v4 + 128), &v13->second);
  if ( std::operator==<Avatar>(0LL, (const std::shared_ptr<Avatar> *)(v4 + 128)) )
  {
    common::milog::MiLogStream::create(
      &v73,
      &common::milog::MiLogDefault::default_log_obj_,
      4u,
      "./src/player/avatar/player_avatar_comp.cpp",
      "delInformalAvatar",
      4916);
    v14 = common::milog::MiLogStream::operator<<<char [41],(char *[41])0>(
            &v73,
            (const char (*)[41])"del_avatar_ptr is null, del_avatar_guid:");
    v15 = common::milog::MiLogStream::operator<<<unsigned long,(unsigned long *)0>(
            v14,
            (const unsigned __int64 *)(v4 + 64));
    v16 = common::milog::MiLogStream::operator<<<char [9],(char *[9])0>(v15, (const char (*)[9])" player:");
    if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
      __asan_report_load8(&this->player_);
  }
  else
  {
    v17 = std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 128));
    if ( !Avatar::isFormal(v17) )
    {
      PlayerAvatarComp::getCurAvatar((const PlayerAvatarComp *const)(v4 + 160));
      if ( std::operator==<Avatar>(0LL, (const std::shared_ptr<Avatar> *)(v4 + 160)) )
      {
        common::milog::MiLogStream::create(
          &v73,
          &common::milog::MiLogDefault::default_log_obj_,
          4u,
          "./src/player/avatar/player_avatar_comp.cpp",
          "delInformalAvatar",
          4931);
        v20 = common::milog::MiLogStream::operator<<<char [36],(char *[36])0>(
                &v73,
                (const char (*)[36])"getCurAvatar fail, del_avatar_guid:");
        v21 = common::milog::MiLogStream::operator<<<unsigned long,(unsigned long *)0>(
                v20,
                (const unsigned __int64 *)(v4 + 64));
        v22 = common::milog::MiLogStream::operator<<<char [9],(char *[9])0>(v21, (const char (*)[9])" player:");
        if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
          __asan_report_load8(&this->player_);
        operator<<(v22, this->player_);
        common::milog::MiLogStream::~MiLogStream(&v73);
        v10 = -1;
      }
      else
      {
        std::shared_ptr<Avatar>::shared_ptr((std::shared_ptr<Avatar> *const)(v4 + 192), 0LL);
        if ( std::operator!=<Avatar,Avatar>((const std::shared_ptr<Avatar> *)(v4 + 128), &this->cur_avatar_ptr_) )
          std::shared_ptr<Avatar>::operator=((std::shared_ptr<Avatar> *const)(v4 + 192), &this->cur_avatar_ptr_);
        if ( !*(_QWORD *)(v4 + 96)
          && std::operator==<Avatar,Avatar>((const std::shared_ptr<Avatar> *)(v4 + 128), &this->cur_avatar_ptr_) )
        {
          *(_QWORD *)(v4 + 96) = PlayerAvatarComp::findReplaceAvatar(this, *(_QWORD *)(v4 + 64));
        }
        if ( *(_QWORD *)(v4 + 96) )
        {
          PlayerAvatarComp::findAvatar((const PlayerAvatarComp *const)(v4 + 256), (uint64_t)this, *(_QWORD *)(v4 + 96));
          std::shared_ptr<Avatar>::operator=(
            (std::shared_ptr<Avatar> *const)(v4 + 192),
            (std::shared_ptr<Avatar> *)(v4 + 256));
          std::shared_ptr<Avatar>::~shared_ptr((std::shared_ptr<Avatar> *const)(v4 + 256));
        }
        if ( std::operator==<Avatar>(0LL, (const std::shared_ptr<Avatar> *)(v4 + 192)) )
        {
          common::milog::MiLogStream::create(
            &v73,
            &common::milog::MiLogDefault::default_log_obj_,
            4u,
            "./src/player/avatar/player_avatar_comp.cpp",
            "delInformalAvatar",
            4951);
          v24 = common::milog::MiLogStream::operator<<<char [49],(char *[49])0>(
                  &v73,
                  (const char (*)[49])"replace_avatar_ptr is null, replace_avatar_guid:");
          v25 = common::milog::MiLogStream::operator<<<unsigned long,(unsigned long *)0>(
                  v24,
                  (const unsigned __int64 *)(v4 + 96));
          v26 = common::milog::MiLogStream::operator<<<char [18],(char *[18])0>(
                  v25,
                  (const char (*)[18])" del_avatar_guid:");
          v27 = common::milog::MiLogStream::operator<<<unsigned long,(unsigned long *)0>(
                  v26,
                  (const unsigned __int64 *)(v4 + 64));
          v28 = common::milog::MiLogStream::operator<<<char [9],(char *[9])0>(v27, (const char (*)[9])" player:");
          if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
            __asan_report_load8(&this->player_);
          operator<<(v28, this->player_);
          common::milog::MiLogStream::~MiLogStream(&v73);
          v10 = -1;
        }
        else
        {
          std::map<unsigned long,std::shared_ptr<Avatar>>::erase[abi:cxx11](
            &this->avatar_map_,
            *(std::map<long unsigned int,std::shared_ptr<Avatar>>::iterator *)(v4 + 32));
          std::set<unsigned long>::erase(
            &this->trial_avatar_guid_set_,
            (const std::set<long unsigned int>::key_type *)(v4 + 64));
          if ( std::unordered_set<unsigned long>::erase(
                 &this->temp_avatar_guid_set_,
                 (const std::unordered_set<long unsigned int>::key_type *)(v4 + 64)) )
          {
            PlayerAvatarComp::notifyTempAvatarTeam(this);
          }
          __for_range = &this->avatar_team_map_;
          __for_begin._M_node = std::map<unsigned int,AvatarTeam>::begin(&this->avatar_team_map_)._M_node;
          __for_end._M_node = std::map<unsigned int,AvatarTeam>::end(__for_range)._M_node;
          while ( std::operator!=(&__for_begin, &__for_end) )
          {
            __in = std::_Rb_tree_iterator<std::pair<unsigned int const,AvatarTeam>>::operator*(&__for_begin);
            team_id = std::get<0ul,unsigned int const,AvatarTeam>(__in);
            avatar_team = std::get<1ul,unsigned int const,AvatarTeam>(__in);
            AvatarVec = AvatarTeam::getAvatarVec(avatar_team);
            if ( common::tools::MiscUtils::isContains<unsigned long>(AvatarVec, (const unsigned __int64 *)(v4 + 64)) )
            {
              v30 = AvatarTeam::getAvatarVec(avatar_team);
              common::tools::MiscUtils::removeValues<std::vector<unsigned long>,unsigned long>(
                v30,
                (const unsigned __int64 *)(v4 + 64));
              if ( *(_BYTE *)(((unsigned __int64)team_id >> 3) + 0x7FFF8000) != 0
                && (char)(((unsigned __int8)team_id & 7) + 3) >= *(_BYTE *)(((unsigned __int64)team_id >> 3) + 0x7FFF8000) )
              {
                __asan_report_load4(team_id);
              }
              if ( *team_id == 1 )
              {
                v31 = AvatarTeam::getAvatarVec(avatar_team);
                if ( std::vector<unsigned long>::empty(v31) )
                {
                  v33 = std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 192));
                  Guid = Avatar::getGuid(v33);
                  AvatarTeam::addAvatar(avatar_team, Guid);
                }
              }
              if ( *(_BYTE *)(((unsigned __int64)team_id >> 3) + 0x7FFF8000) != 0
                && (char)(((unsigned __int8)team_id & 7) + 3) >= *(_BYTE *)(((unsigned __int64)team_id >> 3) + 0x7FFF8000) )
              {
                __asan_report_load4(team_id);
              }
              PlayerAvatarComp::notifyAvatarTeam(this, *team_id);
            }
            std::_Rb_tree_iterator<std::pair<unsigned int const,AvatarTeam>>::operator++(&__for_begin);
          }
          PlayerAvatarComp::getMyAvatarTeamInSceneTeam((std::vector<long unsigned int> *)(v4 + 288), this);
          std::vector<unsigned long>::vector(
            (std::vector<long unsigned int> *const)(v4 + 352),
            (const std::vector<long unsigned int> *)(v4 + 288));
          common::tools::MiscUtils::removeValues<std::vector<unsigned long>,unsigned long>(
            (std::vector<long unsigned int> *)(v4 + 288),
            (const unsigned __int64 *)(v4 + 64));
          v35 = std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 192));
          __for_end._M_node = (std::_Rb_tree_iterator<std::pair<unsigned int const,AvatarTeam> >::_Base_ptr)Avatar::getGuid(v35);
          if ( !common::tools::MiscUtils::isContains<unsigned long>(
                  (std::vector<long unsigned int> *)(v4 + 288),
                  (const unsigned __int64 *)&__for_end) )
          {
            v36 = std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 192));
            __for_end._M_node = (std::_Rb_tree_iterator<std::pair<unsigned int const,AvatarTeam> >::_Base_ptr)Avatar::getGuid(v36);
            std::vector<unsigned long>::push_back(
              (std::vector<long unsigned int> *const)(v4 + 288),
              (std::vector<long unsigned int>::value_type *)&__for_end);
          }
          if ( std::operator!=<unsigned long,std::allocator<unsigned long>>(
                 (const std::vector<long unsigned int> *)(v4 + 288),
                 (const std::vector<long unsigned int> *)(v4 + 352)) )
          {
            if ( std::operator!=<Avatar,Avatar>(
                   (const std::shared_ptr<Avatar> *)(v4 + 160),
                   (const std::shared_ptr<Avatar> *)(v4 + 192)) )
            {
              v37 = std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 192));
              if ( Creature::getLifeState(v37) == LIFE_DEAD )
              {
                ServiceBox::findService<GameserverService>();
                GameserverService::getConfig((GameserverService *const)&v72);
                v39 = std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false> *const)&v72);
                revive_hp_percent = (float)(int)ConstValueExcelConfigMgr::getHurtReviveHpPercent(&v39->design_config.txt_config_mgr.const_value_config_mgr);
                std::shared_ptr<Config>::~shared_ptr((std::shared_ptr<Config> *const)&v72);
                v40 = std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 192));
                Avatar::setLifeAlive(v40, 0x6Du, 0LL, 1);
                v41 = std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 192));
                Creature::setCurHpPercent(v41, revive_hp_percent, CHANGE_HP_ADD_REVIVE, 1);
              }
            }
            if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
              __asan_report_load8(&this->player_);
            Player::getSceneComp(this->player_);
            PlayerSceneComp::getCurScene((const PlayerSceneComp *const)&v72);
            v42 = std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 192));
            v43 = Avatar::getGuid(v42);
            PlayerAvatarComp::setSceneTeamAndAddToScene(
              this,
              (const std::vector<long unsigned int> *)(v4 + 288),
              v43,
              &v72,
              CHANGE_SCENE_TEAM_REASON_DEL_AVATAR);
            std::shared_ptr<Scene>::~shared_ptr(&v72);
          }
          std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 128));
          Entity::getScene((const Entity *const)(v4 + 224));
          if ( std::operator!=<Scene>((const std::shared_ptr<Scene> *)(v4 + 224), 0LL) )
          {
            v44 = std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 224));
            v45 = std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::operator*((const std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 128));
            Scene::delAvatarAndWeaponEntity(v44, v45);
          }
          if ( is_notify )
          {
            common::tools::perf::make_shared<proto::AvatarDelNotify>();
            v46 = std::__shared_ptr_access<proto::AvatarDelNotify,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<proto::AvatarDelNotify,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 256));
            proto::AvatarDelNotify::add_avatar_guid_list(v46, *(_QWORD *)(v4 + 64));
            if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
              __asan_report_load8(&this->player_);
            player = this->player_;
            std::dynamic_pointer_cast<google::protobuf::Message const,proto::AvatarDelNotify>((const std::shared_ptr<proto::AvatarDelNotify> *)&v72);
            Player::sendMessage(player, (common::minet::ConstMessagePtr *)&v72, 0LL);
            std::shared_ptr<google::protobuf::Message const>::~shared_ptr((std::shared_ptr<const google::protobuf::Message> *const)&v72);
            std::shared_ptr<proto::AvatarDelNotify>::~shared_ptr((std::shared_ptr<proto::AvatarDelNotify> *const)(v4 + 256));
          }
          if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
            __asan_report_load8(&this->player_);
          SceneComp = Player::getSceneComp(this->player_);
          PlayerSceneComp::onDelAvatar(SceneComp, *(_QWORD *)(v4 + 64));
          if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
            __asan_report_load8(&this->player_);
          EventComp = Player::getEventComp(this->player_);
          v50 = (unsigned __int64)std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 128));
          if ( *(_BYTE *)((v50 >> 3) + 0x7FFF8000) )
            v50 = __asan_report_load8(v50);
          v51 = *(_QWORD *)v50 + 400LL;
          if ( *(_BYTE *)((v51 >> 3) + 0x7FFF8000) )
            v50 = __asan_report_load8(*(_QWORD *)v50 + 400LL);
          __args_0[1] = (*(__int64 (__fastcall **)(unsigned __int64))v51)(v50);
          v52 = std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 128));
          __args_0[0] = Avatar::getAvatarId(v52);
          common::tools::perf::make_shared<DelAvatarEvent,unsigned int,unsigned long &,proto::AvatarType>(
            (unsigned int *)(v4 + 256),
            (unsigned __int64 *)__args_0,
            (proto::AvatarType *)(v4 + 64),
            &__args_0[1],
            v53,
            v54);
          std::shared_ptr<BaseEvent>::shared_ptr<DelAvatarEvent,void>(
            (std::shared_ptr<BaseEvent> *const)&v72,
            (std::shared_ptr<DelAvatarEvent> *)(v4 + 256));
          PlayerEventComp::notifyEvent(EventComp, (BaseEventPtr *)&v72);
          std::shared_ptr<BaseEvent>::~shared_ptr((std::shared_ptr<BaseEvent> *const)&v72);
          std::shared_ptr<DelAvatarEvent>::~shared_ptr((std::shared_ptr<DelAvatarEvent> *const)(v4 + 256));
          common::milog::MiLogStream::create(
            &v73,
            &common::milog::MiLogDefault::default_log_obj_,
            1u,
            "./src/player/avatar/player_avatar_comp.cpp",
            "delInformalAvatar",
            5016);
          v55 = common::milog::MiLogStream::operator<<<char [36],(char *[36])0>(
                  &v73,
                  (const char (*)[36])"delInformalAvatar, del_avatar_guid:");
          v56 = common::milog::MiLogStream::operator<<<unsigned long,(unsigned long *)0>(
                  v55,
                  (const unsigned __int64 *)(v4 + 64));
          v57 = common::milog::MiLogStream::operator<<<char [30],(char *[30])0>(
                  v56,
                  (const char (*)[30])", actual replace_avatar_guid:");
          v58 = std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 192));
          __for_end._M_node = (std::_Rb_tree_iterator<std::pair<unsigned int const,AvatarTeam> >::_Base_ptr)Avatar::getGuid(v58);
          v59 = common::milog::MiLogStream::operator<<<unsigned long,(unsigned long *)0>(
                  v57,
                  (const unsigned __int64 *)&__for_end);
          v60 = common::milog::MiLogStream::operator<<<char [7],(char *[7])0>(v59, (const char (*)[7])", uid:");
          if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
            __asan_report_load8(&this->player_);
          __args_0[1] = Player::getUid(this->player_);
          common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v60, &__args_0[1]);
          common::milog::MiLogStream::~MiLogStream(&v73);
          v10 = 0;
          std::shared_ptr<Scene>::~shared_ptr((std::shared_ptr<Scene> *const)(v4 + 224));
          std::vector<unsigned long>::~vector((std::vector<long unsigned int> *const)(v4 + 352));
          std::vector<unsigned long>::~vector((std::vector<long unsigned int> *const)(v4 + 288));
        }
        std::shared_ptr<Avatar>::~shared_ptr((std::shared_ptr<Avatar> *const)(v4 + 192));
      }
      std::shared_ptr<Avatar>::~shared_ptr((std::shared_ptr<Avatar> *const)(v4 + 160));
      goto LABEL_86;
    }
    common::milog::MiLogStream::create(
      &v73,
      &common::milog::MiLogDefault::default_log_obj_,
      4u,
      "./src/player/avatar/player_avatar_comp.cpp",
      "delInformalAvatar",
      4923);
    v18 = common::milog::MiLogStream::operator<<<char [50],(char *[50])0>(
            &v73,
            (const char (*)[50])"should not delete formal avatar, del_avatar_guid:");
    v19 = common::milog::MiLogStream::operator<<<unsigned long,(unsigned long *)0>(
            v18,
            (const unsigned __int64 *)(v4 + 64));
    v16 = common::milog::MiLogStream::operator<<<char [9],(char *[9])0>(v19, (const char (*)[9])" player:");
    if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
      __asan_report_load8(&this->player_);
  }
  operator<<(v16, this->player_);
  common::milog::MiLogStream::~MiLogStream(&v73);
  v10 = -1;
LABEL_86:
  std::shared_ptr<Avatar>::~shared_ptr((std::shared_ptr<Avatar> *const)(v4 + 128));
LABEL_87:
  result = v10;
  if ( v74 == (char *)v4 )
  {
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8008) = 0LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8010) = 0LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8018) = 0LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8020) = 0LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8028) = 0LL;
    *(_DWORD *)((v4 >> 3) + 0x7FFF8030) = 0;
  }
  else
  {
    *(_QWORD *)v4 = 1172321806LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8020) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8028) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v4 >> 3) + 0x7FFF8030) = -168430091;
  }
  return result;
};

// Line 5023: range 0000000017193D6E-0000000017194488
int32_t __cdecl PlayerAvatarComp::delInformalAvatarBatch(
        PlayerAvatarComp *const this,
        const std::vector<long unsigned int> *del_avatar_guid_vec,
        uint64_t replace_avatar_guid,
        bool is_notify)
{
  unsigned __int64 v4; // r12
  __int64 v5; // rax
  _DWORD *v6; // r13
  common::milog::MiLogStream *v7; // rcx
  int32_t v8; // r14d
  unsigned __int64 v9; // rax
  common::milog::MiLogStream *v10; // rax
  common::milog::MiLogStream *v11; // rax
  common::milog::MiLogStream *v12; // rcx
  int v13; // r14d
  std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v14; // rax
  unsigned __int64 v15; // rax
  common::milog::MiLogStream *v16; // rax
  common::milog::MiLogStream *v17; // rax
  common::milog::MiLogStream *v18; // rcx
  std::__shared_ptr_access<proto::AvatarDelNotify,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v19; // rax
  Player *player; // r14
  int32_t result; // eax
  int32_t ret; // [rsp+2Ch] [rbp-114h]
  std::vector<long unsigned int>::iterator __for_begin; // [rsp+30h] [rbp-110h] BYREF
  std::vector<long unsigned int>::iterator __for_end; // [rsp+38h] [rbp-108h] BYREF
  std::vector<long unsigned int> *__for_range; // [rsp+40h] [rbp-100h]
  const std::vector<long unsigned int> *__for_range_0; // [rsp+48h] [rbp-F8h]
  std::vector<long unsigned int> v28; // [rsp+50h] [rbp-F0h] BYREF
  common::milog::MiLogStream v29; // [rsp+70h] [rbp-D0h] BYREF
  char v30[176]; // [rsp+90h] [rbp-B0h] BYREF

  v4 = (unsigned __int64)v30;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v5 = __asan_stack_malloc_1(128LL);
    if ( v5 )
      v4 = v5;
  }
  *(_QWORD *)v4 = 1102416563LL;
  *(_QWORD *)(v4 + 8) = "3 32 8 16 avatar_guid:5052 64 16 15 notify_ptr:5051 96 16 15 avatar_ptr:5033";
  *(_QWORD *)(v4 + 16) = PlayerAvatarComp::delInformalAvatarBatch;
  v6 = (_DWORD *)(v4 >> 3);
  v6[536862720] = -235802127;
  v6[536862721] = -218959360;
  v6[536862722] = -219021312;
  v6[536862723] = -202178560;
  if ( std::vector<unsigned long>::empty(del_avatar_guid_vec) )
  {
    common::milog::MiLogStream::create(
      &v29,
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/player/avatar/player_avatar_comp.cpp",
      "delInformalAvatarBatch",
      5026);
    v7 = common::milog::MiLogStream::operator<<<char [38],(char *[38])0>(
           &v29,
           (const char (*)[38])"del_avatar_guid_vec is empty, player:");
    if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
      __asan_report_load8(&this->player_);
    operator<<(v7, this->player_);
    common::milog::MiLogStream::~MiLogStream(&v29);
    v8 = -1;
  }
  else
  {
    if ( !replace_avatar_guid )
    {
      PlayerAvatarComp::getCurAvatarTeamWithTempAvatar(&v28, this);
      __for_range = &v28;
      __for_begin._M_current = std::vector<unsigned long>::begin(&v28)._M_current;
      __for_end._M_current = std::vector<unsigned long>::end(&v28)._M_current;
      while ( __gnu_cxx::operator!=<unsigned long *,std::vector<unsigned long>>(&__for_begin, &__for_end) )
      {
        v9 = (unsigned __int64)__gnu_cxx::__normal_iterator<unsigned long *,std::vector<unsigned long>>::operator*(&__for_begin);
        if ( *(_BYTE *)((v9 >> 3) + 0x7FFF8000) )
          v9 = __asan_report_load8(v9);
        *(_QWORD *)(v4 + 32) = *(_QWORD *)v9;
        PlayerAvatarComp::findAvatar((const PlayerAvatarComp *const)(v4 + 96), (uint64_t)this, *(_QWORD *)(v4 + 32));
        if ( std::operator==<Avatar>(0LL, (const std::shared_ptr<Avatar> *)(v4 + 96)) )
        {
          common::milog::MiLogStream::create(
            &v29,
            &common::milog::MiLogDefault::default_log_obj_,
            3u,
            "./src/player/avatar/player_avatar_comp.cpp",
            "delInformalAvatarBatch",
            5036);
          v10 = common::milog::MiLogStream::operator<<<char [33],(char *[33])0>(
                  &v29,
                  (const char (*)[33])"avatar_ptr is null, avatar_guid:");
          v11 = common::milog::MiLogStream::operator<<<unsigned long,(unsigned long *)0>(
                  v10,
                  (const unsigned __int64 *)(v4 + 32));
          v12 = common::milog::MiLogStream::operator<<<char [9],(char *[9])0>(v11, (const char (*)[9])" player:");
          if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
            __asan_report_load8(&this->player_);
          operator<<(v12, this->player_);
          common::milog::MiLogStream::~MiLogStream(&v29);
          v13 = 0;
        }
        else
        {
          v14 = std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 96));
          if ( Creature::getLifeState(v14) == LIFE_ALIVE )
          {
            replace_avatar_guid = *(_QWORD *)(v4 + 32);
            v13 = 1;
          }
          else
          {
            v13 = 2;
          }
        }
        std::shared_ptr<Avatar>::~shared_ptr((std::shared_ptr<Avatar> *const)(v4 + 96));
        if ( v13 )
        {
          if ( v13 != 2 )
            break;
        }
        __gnu_cxx::__normal_iterator<unsigned long *,std::vector<unsigned long>>::operator++(&__for_begin);
      }
      std::vector<unsigned long>::~vector(&v28);
      if ( !replace_avatar_guid )
      {
        if ( *(_BYTE *)(((unsigned __int64)&this->choose_avatar_guid_ >> 3) + 0x7FFF8000) )
          __asan_report_load8(&this->choose_avatar_guid_);
        replace_avatar_guid = this->choose_avatar_guid_;
      }
    }
    ret = 0;
    common::tools::perf::make_shared<proto::AvatarDelNotify>();
    __for_range_0 = del_avatar_guid_vec;
    __for_begin._M_current = (unsigned __int64 *)std::vector<unsigned long>::begin(del_avatar_guid_vec)._M_current;
    __for_end._M_current = (unsigned __int64 *)std::vector<unsigned long>::end(__for_range_0)._M_current;
    while ( __gnu_cxx::operator!=<unsigned long const*,std::vector<unsigned long>>(
              (const __gnu_cxx::__normal_iterator<long unsigned int const*,std::vector<long unsigned int> > *)&__for_begin,
              (const __gnu_cxx::__normal_iterator<long unsigned int const*,std::vector<long unsigned int> > *)&__for_end) )
    {
      v15 = (unsigned __int64)__gnu_cxx::__normal_iterator<unsigned long const*,std::vector<unsigned long>>::operator*((const __gnu_cxx::__normal_iterator<long unsigned int const*,std::vector<long unsigned int> > *const)&__for_begin);
      if ( *(_BYTE *)((v15 >> 3) + 0x7FFF8000) )
        v15 = __asan_report_load8(v15);
      *(_QWORD *)(v4 + 32) = *(_QWORD *)v15;
      if ( (unsigned int)PlayerAvatarComp::delInformalAvatar(this, *(_QWORD *)(v4 + 32), replace_avatar_guid, 0) )
      {
        common::milog::MiLogStream::create(
          &v29,
          &common::milog::MiLogDefault::default_log_obj_,
          3u,
          "./src/player/avatar/player_avatar_comp.cpp",
          "delInformalAvatarBatch",
          5056);
        v16 = common::milog::MiLogStream::operator<<<char [37],(char *[37])0>(
                &v29,
                (const char (*)[37])"delInformalAvatar fail, avatar_guid:");
        v17 = common::milog::MiLogStream::operator<<<unsigned long,(unsigned long *)0>(
                v16,
                (const unsigned __int64 *)(v4 + 32));
        v18 = common::milog::MiLogStream::operator<<<char [9],(char *[9])0>(v17, (const char (*)[9])" player:");
        if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
          __asan_report_load8(&this->player_);
        operator<<(v18, this->player_);
        common::milog::MiLogStream::~MiLogStream(&v29);
        ret = -1;
      }
      else
      {
        v19 = std::__shared_ptr_access<proto::AvatarDelNotify,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<proto::AvatarDelNotify,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 64));
        proto::AvatarDelNotify::add_avatar_guid_list(v19, *(_QWORD *)(v4 + 32));
      }
      __gnu_cxx::__normal_iterator<unsigned long const*,std::vector<unsigned long>>::operator++((__gnu_cxx::__normal_iterator<long unsigned int const*,std::vector<long unsigned int> > *const)&__for_begin);
    }
    if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
      __asan_report_load8(&this->player_);
    player = this->player_;
    std::dynamic_pointer_cast<google::protobuf::Message const,proto::AvatarDelNotify>((const std::shared_ptr<proto::AvatarDelNotify> *)(v4 + 96));
    Player::sendMessage(player, (common::minet::ConstMessagePtr *)(v4 + 96), 0LL);
    std::shared_ptr<google::protobuf::Message const>::~shared_ptr((std::shared_ptr<const google::protobuf::Message> *const)(v4 + 96));
    v8 = ret;
    std::shared_ptr<proto::AvatarDelNotify>::~shared_ptr((std::shared_ptr<proto::AvatarDelNotify> *const)(v4 + 64));
  }
  result = v8;
  if ( v30 == (char *)v4 )
  {
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v4 = 1172321806LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 5067: range 0000000017194DA4-00000000171955C0
int32_t __cdecl PlayerAvatarComp::delInformalAvatarBatchAndReplaceByAvatarTeam(
        PlayerAvatarComp *const this,
        const std::vector<long unsigned int> *del_avatar_guid_vec)
{
  unsigned __int64 v2; // r13
  __int64 v3; // rax
  _DWORD *v4; // r12
  common::milog::MiLogStream *v5; // rcx
  int32_t v6; // r14d
  unsigned __int64 *M_current; // r14
  std::vector<long unsigned int>::iterator v8; // rax
  unsigned __int64 v9; // rax
  std::vector<long unsigned int> *AvatarVec; // rax
  uint64_t LastCurAvatarGuid; // rax
  std::_Rb_tree_const_iterator<long unsigned int>::_Base_ptr M_node; // r14
  std::set<long unsigned int>::iterator v13; // rax
  uint64_t CurAvatarGuid; // rax
  unsigned __int64 v15; // rax
  bool v16; // r14
  common::milog::MiLogStream *v17; // rax
  int32_t result; // eax
  std::allocator<long unsigned int> __a; // [rsp+1Fh] [rbp-231h] BYREF
  std::vector<long unsigned int>::const_iterator __for_begin; // [rsp+20h] [rbp-230h] BYREF
  std::vector<long unsigned int>::const_iterator __for_end; // [rsp+28h] [rbp-228h] BYREF
  uint64_t appear_avatar_guid; // [rsp+30h] [rbp-220h]
  const std::vector<long unsigned int> *__for_range; // [rsp+38h] [rbp-218h]
  AvatarTeam *avatar_team_ptr; // [rsp+40h] [rbp-210h]
  const std::vector<long unsigned int> *__for_range_0; // [rsp+48h] [rbp-208h]
  std::shared_ptr<Avatar> v26; // [rsp+50h] [rbp-200h] BYREF
  common::milog::MiLogStream v27; // [rsp+60h] [rbp-1F0h] BYREF
  char v28[464]; // [rsp+80h] [rbp-1D0h] BYREF

  v2 = (unsigned __int64)v28;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_3(416LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "7 32 8 30 select_appear_avatar_guid:5075 64 8 34 try_change_current_scene_team:5101 96 8 9 guid:"
                        "5155 128 24 31 scene_team_avatar_guid_vec:5125 192 24 22 left_del_guid_vec:5154 256 48 31 scene_"
                        "team_avatar_guid_set:5126 336 48 25 rest_avatar_guid_set:5127";
  *(_QWORD *)(v2 + 16) = PlayerAvatarComp::delInformalAvatarBatchAndReplaceByAvatarTeam;
  v4 = (_DWORD *)(v2 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = -218959360;
  v4[536862722] = -218959360;
  v4[536862723] = -218959360;
  v4[536862724] = -234881024;
  v4[536862725] = -218959118;
  v4[536862726] = -234881024;
  v4[536862727] = -218959118;
  v4[536862729] = -219021312;
  v4[536862730] = 62194;
  v4[536862732] = -202116109;
  if ( std::vector<unsigned long>::empty(del_avatar_guid_vec) )
  {
    common::milog::MiLogStream::create(
      &v27,
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/player/avatar/player_avatar_comp.cpp",
      "delInformalAvatarBatchAndReplaceByAvatarTeam",
      5070);
    v5 = common::milog::MiLogStream::operator<<<char [38],(char *[38])0>(
           &v27,
           (const char (*)[38])"del_avatar_guid_vec is empty, player:");
    if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
      __asan_report_load8(&this->player_);
    operator<<(v5, this->player_);
    common::milog::MiLogStream::~MiLogStream(&v27);
    v6 = -1;
  }
  else
  {
    *(_QWORD *)(v2 + 32) = this;
    *(_QWORD *)(v2 + 64) = this;
    PlayerAvatarComp::getMyAvatarTeamInSceneTeam((std::vector<long unsigned int> *)(v2 + 128), this);
    M_current = std::vector<unsigned long>::end((std::vector<long unsigned int> *const)(v2 + 128))._M_current;
    v8._M_current = std::vector<unsigned long>::begin((std::vector<long unsigned int> *const)(v2 + 128))._M_current;
    std::set<unsigned long>::set<__gnu_cxx::__normal_iterator<unsigned long *,std::vector<unsigned long>>>(
      (std::set<long unsigned int> *const)(v2 + 256),
      v8,
      (__gnu_cxx::__normal_iterator<long unsigned int*,std::vector<long unsigned int> >)M_current);
    std::set<unsigned long>::set(
      (std::set<long unsigned int> *const)(v2 + 336),
      (const std::set<long unsigned int> *)(v2 + 256));
    __for_range = del_avatar_guid_vec;
    __for_begin._M_current = std::vector<unsigned long>::begin(del_avatar_guid_vec)._M_current;
    __for_end._M_current = std::vector<unsigned long>::end(del_avatar_guid_vec)._M_current;
    while ( __gnu_cxx::operator!=<unsigned long const*,std::vector<unsigned long>>(&__for_begin, &__for_end) )
    {
      v9 = (unsigned __int64)__gnu_cxx::__normal_iterator<unsigned long const*,std::vector<unsigned long>>::operator*(&__for_begin);
      if ( *(_BYTE *)((v9 >> 3) + 0x7FFF8000) )
        v9 = __asan_report_load8(v9);
      *(_QWORD *)(v2 + 96) = *(_QWORD *)v9;
      std::set<unsigned long>::erase(
        (std::set<long unsigned int> *const)(v2 + 336),
        (const std::set<long unsigned int>::key_type *)(v2 + 96));
      __gnu_cxx::__normal_iterator<unsigned long const*,std::vector<unsigned long>>::operator++(&__for_begin);
    }
    appear_avatar_guid = 0LL;
    if ( std::set<unsigned long>::empty((const std::set<long unsigned int> *const)(v2 + 336)) )
    {
      avatar_team_ptr = PlayerAvatarComp::findCurAvatarTeam(this);
      if ( avatar_team_ptr )
      {
        AvatarVec = AvatarTeam::getAvatarVec(avatar_team_ptr);
        std::vector<unsigned long>::vector((std::vector<long unsigned int> *const)(v2 + 192), AvatarVec);
        LastCurAvatarGuid = AvatarTeam::getLastCurAvatarGuid(avatar_team_ptr);
        appear_avatar_guid = PlayerAvatarComp::delInformalAvatarBatchAndReplaceByAvatarTeam(std::vector<unsigned long> const&)::{lambda(std::vector<unsigned long> const&,unsigned long)#1}::operator()(
                               (const PlayerAvatarComp::delInformalAvatarBatchAndReplaceByAvatarTeam::<lambda(const std::vector<long unsigned int>&, uint64_t)> *const)(v2 + 32),
                               (const std::vector<long unsigned int> *)(v2 + 192),
                               LastCurAvatarGuid);
        PlayerAvatarComp::delInformalAvatarBatchAndReplaceByAvatarTeam(std::vector<unsigned long> const&)::{lambda(std::vector<unsigned long> const&,unsigned long)#2}::operator()(
          (const PlayerAvatarComp::delInformalAvatarBatchAndReplaceByAvatarTeam::<lambda(const std::vector<long unsigned int>&, uint64_t)> *const)(v2 + 64),
          (const std::vector<long unsigned int> *)(v2 + 192),
          appear_avatar_guid);
        std::vector<unsigned long>::~vector((std::vector<long unsigned int> *const)(v2 + 192));
      }
    }
    else
    {
      std::allocator<unsigned long>::allocator(&__a);
      M_node = std::set<unsigned long>::end((const std::set<long unsigned int> *const)(v2 + 336))._M_node;
      v13._M_node = std::set<unsigned long>::begin((const std::set<long unsigned int> *const)(v2 + 336))._M_node;
      std::vector<unsigned long>::vector<std::_Rb_tree_const_iterator<unsigned long>,void>(
        (std::vector<long unsigned int> *const)(v2 + 192),
        v13,
        (std::_Rb_tree_const_iterator<long unsigned int>)M_node,
        &__a);
      std::allocator<unsigned long>::~allocator(&__a);
      CurAvatarGuid = PlayerAvatarComp::getCurAvatarGuid(this);
      appear_avatar_guid = PlayerAvatarComp::delInformalAvatarBatchAndReplaceByAvatarTeam(std::vector<unsigned long> const&)::{lambda(std::vector<unsigned long> const&,unsigned long)#1}::operator()(
                             (const PlayerAvatarComp::delInformalAvatarBatchAndReplaceByAvatarTeam::<lambda(const std::vector<long unsigned int>&, uint64_t)> *const)(v2 + 32),
                             (const std::vector<long unsigned int> *)(v2 + 192),
                             CurAvatarGuid);
      if ( std::operator!=<unsigned long,std::less<unsigned long>,std::allocator<unsigned long>>(
             (const std::set<long unsigned int> *)(v2 + 336),
             (const std::set<long unsigned int> *)(v2 + 256)) )
      {
        PlayerAvatarComp::delInformalAvatarBatchAndReplaceByAvatarTeam(std::vector<unsigned long> const&)::{lambda(std::vector<unsigned long> const&,unsigned long)#2}::operator()(
          (const PlayerAvatarComp::delInformalAvatarBatchAndReplaceByAvatarTeam::<lambda(const std::vector<long unsigned int>&, uint64_t)> *const)(v2 + 64),
          (const std::vector<long unsigned int> *)(v2 + 192),
          appear_avatar_guid);
      }
      std::vector<unsigned long>::~vector((std::vector<long unsigned int> *const)(v2 + 192));
    }
    std::vector<unsigned long>::vector((std::vector<long unsigned int> *const)(v2 + 192));
    __for_range_0 = del_avatar_guid_vec;
    __for_begin._M_current = std::vector<unsigned long>::begin(del_avatar_guid_vec)._M_current;
    __for_end._M_current = std::vector<unsigned long>::end(__for_range_0)._M_current;
    while ( __gnu_cxx::operator!=<unsigned long const*,std::vector<unsigned long>>(&__for_begin, &__for_end) )
    {
      v15 = (unsigned __int64)__gnu_cxx::__normal_iterator<unsigned long const*,std::vector<unsigned long>>::operator*(&__for_begin);
      if ( *(_BYTE *)((v15 >> 3) + 0x7FFF8000) )
        v15 = __asan_report_load8(v15);
      *(_QWORD *)(v2 + 96) = *(_QWORD *)v15;
      PlayerAvatarComp::findAvatar((const PlayerAvatarComp *const)&v26, (uint64_t)this, *(_QWORD *)(v2 + 96));
      v16 = std::operator!=<Avatar>(0LL, &v26);
      std::shared_ptr<Avatar>::~shared_ptr(&v26);
      if ( v16 )
      {
        std::vector<unsigned long>::push_back(
          (std::vector<long unsigned int> *const)(v2 + 192),
          (const std::vector<long unsigned int>::value_type *)(v2 + 96));
      }
      else
      {
        common::milog::MiLogStream::create(
          &v27,
          &common::milog::MiLogDefault::default_log_obj_,
          1u,
          "./src/player/avatar/player_avatar_comp.cpp",
          "delInformalAvatarBatchAndReplaceByAvatarTeam",
          5163);
        v17 = common::milog::MiLogStream::operator<<<char [39],(char *[39])0>(
                &v27,
                (const char (*)[39])"avatar is delete by quest check, guid:");
        common::milog::MiLogStream::operator<<<unsigned long,(unsigned long *)0>(
          v17,
          (const unsigned __int64 *)(v2 + 96));
        common::milog::MiLogStream::~MiLogStream(&v27);
      }
      __gnu_cxx::__normal_iterator<unsigned long const*,std::vector<unsigned long>>::operator++(&__for_begin);
    }
    if ( std::vector<unsigned long>::empty((const std::vector<long unsigned int> *const)(v2 + 192)) )
      v6 = 0;
    else
      v6 = PlayerAvatarComp::delInformalAvatarBatch(
             this,
             (const std::vector<long unsigned int> *)(v2 + 192),
             appear_avatar_guid,
             1);
    std::vector<unsigned long>::~vector((std::vector<long unsigned int> *const)(v2 + 192));
    std::set<unsigned long>::~set((std::set<long unsigned int> *const)(v2 + 336));
    std::set<unsigned long>::~set((std::set<long unsigned int> *const)(v2 + 256));
    std::vector<unsigned long>::~vector((std::vector<long unsigned int> *const)(v2 + 128));
  }
  result = v6;
  if ( v28 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8010) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8018) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8024) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8030) = 0;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8020) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8028) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8030) = -168430091;
  }
  return result;
};

// Line 5075: range 000000001719448A-00000000171947FE
uint64_t __fastcall PlayerAvatarComp::delInformalAvatarBatchAndReplaceByAvatarTeam(std::vector<unsigned long> const&)::{lambda(std::vector<unsigned long> const&,unsigned long)#1}::operator()(
        unsigned __int64 __closure,
        const std::vector<long unsigned int> *avatar_guid_vec,
        uint64_t candidate_appear_avatar_guid)
{
  uint64_t v3; // r14
  unsigned __int64 v4; // r12
  __int64 v5; // rax
  _DWORD *v6; // r13
  std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v7; // rax
  int v9; // r15d
  uint64_t *v10; // rax
  std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v11; // rax
  int v13; // r15d
  std::vector<long unsigned int>::const_reference v14; // rax
  uint64_t result; // rax
  std::vector<long unsigned int>::const_iterator __for_begin; // [rsp+20h] [rbp-B0h] BYREF
  std::vector<long unsigned int>::const_iterator __for_end; // [rsp+28h] [rbp-A8h] BYREF
  const std::vector<long unsigned int> *__for_range; // [rsp+30h] [rbp-A0h]
  uint64_t avatar_guid; // [rsp+38h] [rbp-98h]
  char v21[144]; // [rsp+40h] [rbp-90h] BYREF

  v4 = (unsigned __int64)v21;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v5 = __asan_stack_malloc_1(96LL);
    if ( v5 )
      v4 = v5;
  }
  *(_QWORD *)v4 = 1102416563LL;
  *(_QWORD *)(v4 + 8) = "2 32 8 33 candidate_appear_avatar_guid:5075 64 16 15 avatar_ptr:5091";
  *(_QWORD *)(v4 + 16) = PlayerAvatarComp::delInformalAvatarBatchAndReplaceByAvatarTeam(std::vector<unsigned long> const&)::{lambda(std::vector<unsigned long> const&,unsigned long)#1}::operator();
  v6 = (_DWORD *)(v4 >> 3);
  v6[536862720] = -235802127;
  v6[536862721] = -218959360;
  v6[536862722] = -202178560;
  *(_QWORD *)(v4 + 32) = candidate_appear_avatar_guid;
  if ( std::vector<unsigned long>::empty(avatar_guid_vec) )
  {
    v3 = 0LL;
  }
  else
  {
    if ( !common::tools::MiscUtils::isContains<unsigned long>(avatar_guid_vec, (const unsigned __int64 *)(v4 + 32)) )
      goto LABEL_17;
    if ( *(_BYTE *)((__closure >> 3) + 0x7FFF8000) )
      __asan_report_load8(__closure);
    PlayerAvatarComp::findAvatar((const PlayerAvatarComp *const)(v4 + 64), *(_QWORD *)__closure, *(_QWORD *)(v4 + 32));
    if ( std::operator!=<Avatar>(0LL, (const std::shared_ptr<Avatar> *)(v4 + 64))
      && (v7 = std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 64)),
          Creature::getLifeState(v7) == LIFE_ALIVE) )
    {
      v3 = *(_QWORD *)(v4 + 32);
      v9 = 0;
    }
    else
    {
      v9 = 1;
    }
    std::shared_ptr<Avatar>::~shared_ptr((std::shared_ptr<Avatar> *const)(v4 + 64));
    if ( v9 == 1 )
    {
LABEL_17:
      __for_range = avatar_guid_vec;
      __for_begin._M_current = std::vector<unsigned long>::begin(avatar_guid_vec)._M_current;
      __for_end._M_current = std::vector<unsigned long>::end(avatar_guid_vec)._M_current;
      while ( __gnu_cxx::operator!=<unsigned long const*,std::vector<unsigned long>>(&__for_begin, &__for_end) )
      {
        v10 = (uint64_t *)__gnu_cxx::__normal_iterator<unsigned long const*,std::vector<unsigned long>>::operator*(&__for_begin);
        if ( *(_BYTE *)(((unsigned __int64)v10 >> 3) + 0x7FFF8000) )
          v10 = (uint64_t *)__asan_report_load8(v10);
        avatar_guid = *v10;
        if ( *(_BYTE *)((__closure >> 3) + 0x7FFF8000) )
          __asan_report_load8(__closure);
        PlayerAvatarComp::findAvatar((const PlayerAvatarComp *const)(v4 + 64), *(_QWORD *)__closure, avatar_guid);
        if ( std::operator!=<Avatar>(0LL, (const std::shared_ptr<Avatar> *)(v4 + 64))
          && (v11 = std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 64)),
              Creature::getLifeState(v11) == LIFE_ALIVE) )
        {
          v3 = avatar_guid;
          v13 = 0;
        }
        else
        {
          v13 = 1;
        }
        std::shared_ptr<Avatar>::~shared_ptr((std::shared_ptr<Avatar> *const)(v4 + 64));
        if ( v13 != 1 )
          goto LABEL_35;
        __gnu_cxx::__normal_iterator<unsigned long const*,std::vector<unsigned long>>::operator++(&__for_begin);
      }
      v14 = std::vector<unsigned long>::operator[](avatar_guid_vec, 0LL);
      if ( *(_BYTE *)(((unsigned __int64)v14 >> 3) + 0x7FFF8000) )
        v14 = (std::vector<long unsigned int>::const_reference)__asan_report_load8(v14);
      v3 = *v14;
    }
  }
LABEL_35:
  result = v3;
  if ( v21 == (char *)v4 )
  {
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0LL;
    *(_DWORD *)((v4 >> 3) + 0x7FFF8008) = 0;
  }
  else
  {
    *(_QWORD *)v4 = 1172321806LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v4 >> 3) + 0x7FFF8008) = -168430091;
  }
  return result;
};

// Line 5101: range 0000000017194800-0000000017194DA2
void __cdecl PlayerAvatarComp::delInformalAvatarBatchAndReplaceByAvatarTeam(std::vector<unsigned long> const&)::{lambda(std::vector<unsigned long> const&,unsigned long)#2}::operator()(
        const PlayerAvatarComp::delInformalAvatarBatchAndReplaceByAvatarTeam::<lambda(const std::vector<long unsigned int>&, uint64_t)> *const __closure,
        const std::vector<long unsigned int> *avatar_guid_vec,
        uint64_t appear_avatar_guid)
{
  unsigned __int64 v3; // r12
  __int64 v4; // rax
  _DWORD *v5; // r13
  common::milog::MiLogStream *v6; // rdx
  common::milog::MiLogStream *v7; // rax
  common::milog::MiLogStream *v8; // rdi
  PlayerAvatarComp *v9; // rax
  PlayerAvatarComp *this; // rax
  common::milog::MiLogStream *v11; // rdx
  common::milog::MiLogStream *v12; // rax
  common::milog::MiLogStream *p_player; // rdi
  PlayerAvatarComp *v14; // rax
  std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v15; // rax
  std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v17; // rax
  Avatar *v18; // rax
  std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v19; // rax
  PlayerAvatarComp *v20; // r14
  float revive_hp_percent; // [rsp+2Ch] [rbp-C4h]
  std::shared_ptr<Scene> v24; // [rsp+30h] [rbp-C0h] BYREF
  common::milog::MiLogStream v25; // [rsp+40h] [rbp-B0h] BYREF
  char v26[144]; // [rsp+60h] [rbp-90h] BYREF

  v3 = (unsigned __int64)v26;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_1(96LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "2 32 16 14 scene_ptr:5108 64 16 22 appear_avatar_ptr:5114";
  *(_QWORD *)(v3 + 16) = PlayerAvatarComp::delInformalAvatarBatchAndReplaceByAvatarTeam(std::vector<unsigned long> const&)::{lambda(std::vector<unsigned long> const&,unsigned long)#2}::operator();
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = -219021312;
  v5[536862722] = -202178560;
  if ( appear_avatar_guid )
  {
    if ( *(_BYTE *)(((unsigned __int64)__closure >> 3) + 0x7FFF8000) )
      __asan_report_load8(__closure);
    this = __closure->__this;
    if ( *(_BYTE *)(((unsigned __int64)&__closure->__this->player_ >> 3) + 0x7FFF8000) )
      this = (PlayerAvatarComp *)__asan_report_load8(&__closure->__this->player_);
    Player::getSceneComp(this->player_);
    PlayerSceneComp::getCurScene((const PlayerSceneComp *const)(v3 + 32));
    if ( std::operator==<Scene>(0LL, (const std::shared_ptr<Scene> *)(v3 + 32)) )
    {
      common::milog::MiLogStream::create(
        &v25,
        &common::milog::MiLogDefault::default_log_obj_,
        1u,
        "./src/player/avatar/player_avatar_comp.cpp",
        "operator()",
        5111);
      v11 = common::milog::MiLogStream::operator<<<char [70],(char *[70])0>(
              &v25,
              (const char (*)[70])"cur_scene is null, not to change current scene team, avatar_guid_vec:");
      v12 = common::milog::MiLogStream::operator<<<unsigned long>(v11, avatar_guid_vec);
      p_player = common::milog::MiLogStream::operator<<<char [9],(char *[9])0>(v12, (const char (*)[9])" player:");
      if ( *(_BYTE *)(((unsigned __int64)__closure >> 3) + 0x7FFF8000) )
      {
        p_player = (common::milog::MiLogStream *)__closure;
        __asan_report_load8(__closure);
      }
      v14 = __closure->__this;
      if ( *(_BYTE *)(((unsigned __int64)&__closure->__this->player_ >> 3) + 0x7FFF8000) )
      {
        p_player = (common::milog::MiLogStream *)&__closure->__this->player_;
        v14 = (PlayerAvatarComp *)__asan_report_load8(p_player);
      }
      operator<<(p_player, v14->player_);
      common::milog::MiLogStream::~MiLogStream(&v25);
    }
    else
    {
      if ( *(_BYTE *)(((unsigned __int64)__closure >> 3) + 0x7FFF8000) )
        __asan_report_load8(__closure);
      PlayerAvatarComp::findAvatar(
        (const PlayerAvatarComp *const)(v3 + 64),
        (uint64_t)__closure->__this,
        appear_avatar_guid);
      if ( std::operator!=<Avatar>(0LL, (const std::shared_ptr<Avatar> *)(v3 + 64)) )
      {
        v15 = std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 64));
        if ( Creature::getLifeState(v15) == LIFE_DEAD )
        {
          ServiceBox::findService<GameserverService>();
          GameserverService::getConfig((GameserverService *const)&v24);
          v17 = std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false> *const)&v24);
          revive_hp_percent = (float)(int)ConstValueExcelConfigMgr::getHurtReviveHpPercent(&v17->design_config.txt_config_mgr.const_value_config_mgr);
          std::shared_ptr<Config>::~shared_ptr((std::shared_ptr<Config> *const)&v24);
          v18 = std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 64));
          Avatar::setLifeAlive(v18, 0x6Du, 0LL, 1);
          v19 = std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 64));
          Creature::setCurHpPercent(v19, revive_hp_percent, CHANGE_HP_ADD_REVIVE, 1);
        }
      }
      if ( *(_BYTE *)(((unsigned __int64)__closure >> 3) + 0x7FFF8000) )
        __asan_report_load8(__closure);
      v20 = __closure->__this;
      std::shared_ptr<Scene>::shared_ptr(&v24, (const std::shared_ptr<Scene> *)(v3 + 32));
      PlayerAvatarComp::setSceneTeamAndAddToScene(
        v20,
        avatar_guid_vec,
        appear_avatar_guid,
        &v24,
        CHANGE_SCENE_TEAM_REASON_DEL_AVATAR);
      std::shared_ptr<Scene>::~shared_ptr(&v24);
      std::shared_ptr<Avatar>::~shared_ptr((std::shared_ptr<Avatar> *const)(v3 + 64));
    }
    std::shared_ptr<Scene>::~shared_ptr((std::shared_ptr<Scene> *const)(v3 + 32));
  }
  else
  {
    common::milog::MiLogStream::create(
      &v25,
      &common::milog::MiLogDefault::default_log_obj_,
      1u,
      "./src/player/avatar/player_avatar_comp.cpp",
      "operator()",
      5105);
    v6 = common::milog::MiLogStream::operator<<<char [76],(char *[76])0>(
           &v25,
           (const char (*)[76])"appear_avatar_guid is 0, not to change current scene team, avatar_guid_vec:");
    v7 = common::milog::MiLogStream::operator<<<unsigned long>(v6, avatar_guid_vec);
    v8 = common::milog::MiLogStream::operator<<<char [9],(char *[9])0>(v7, (const char (*)[9])" player:");
    if ( *(_BYTE *)(((unsigned __int64)__closure >> 3) + 0x7FFF8000) )
    {
      v8 = (common::milog::MiLogStream *)__closure;
      __asan_report_load8(__closure);
    }
    v9 = __closure->__this;
    if ( *(_BYTE *)(((unsigned __int64)&__closure->__this->player_ >> 3) + 0x7FFF8000) )
    {
      v8 = (common::milog::MiLogStream *)&__closure->__this->player_;
      v9 = (PlayerAvatarComp *)__asan_report_load8(v8);
    }
    operator<<(v8, v9->player_);
    common::milog::MiLogStream::~MiLogStream(&v25);
  }
  if ( v26 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8008) = 0;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8008) = -168430091;
  }
};

// Line 5175: range 000000001719597A-0000000017195B11
uint64_t __cdecl PlayerAvatarComp::findReplaceAvatar(PlayerAvatarComp *const this, uint64_t exclude_avatar_guid)
{
  unsigned __int64 v2; // rbx
  __int64 v3; // rax
  unsigned __int64 v4; // r12
  uint64_t v5; // r13
  uint64_t result; // rax
  uint64_t avatar_guid; // [rsp+18h] [rbp-88h]
  std::vector<long unsigned int> avatar_guid_vec; // [rsp+20h] [rbp-80h] BYREF
  char v9[96]; // [rsp+40h] [rbp-60h] BYREF

  v2 = (unsigned __int64)v9;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_0(64LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "1 32 16 36 find_replace_avatar_in_guid_vec:5177";
  *(_QWORD *)(v2 + 16) = PlayerAvatarComp::findReplaceAvatar;
  v4 = v2 >> 3;
  *(_DWORD *)(v4 + 2147450880) = -235802127;
  *(_DWORD *)(v4 + 2147450884) = -202178560;
  *(_QWORD *)(v2 + 32) = exclude_avatar_guid;
  *(_QWORD *)(v2 + 40) = this;
  PlayerAvatarComp::getMyAvatarTeamInSceneTeam(&avatar_guid_vec, this);
  avatar_guid = PlayerAvatarComp::findReplaceAvatar(unsigned long)::{lambda(std::vector<unsigned long> const&)#1}::operator()(
                  (const PlayerAvatarComp::findReplaceAvatar::<lambda(const std::vector<long unsigned int>&)> *const)(v2 + 32),
                  &avatar_guid_vec);
  std::vector<unsigned long>::~vector(&avatar_guid_vec);
  if ( avatar_guid )
  {
    v5 = avatar_guid;
  }
  else
  {
    PlayerAvatarComp::getCurAvatarTeamWithTempAvatar(&avatar_guid_vec, this);
    v5 = PlayerAvatarComp::findReplaceAvatar(unsigned long)::{lambda(std::vector<unsigned long> const&)#1}::operator()(
           (const PlayerAvatarComp::findReplaceAvatar::<lambda(const std::vector<long unsigned int>&)> *const)(v2 + 32),
           &avatar_guid_vec);
    std::vector<unsigned long>::~vector(&avatar_guid_vec);
  }
  result = v5;
  if ( v9 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 5177: range 00000000171955C2-0000000017195979
uint64_t __cdecl PlayerAvatarComp::findReplaceAvatar(unsigned long)::{lambda(std::vector<unsigned long> const&)#1}::operator()(
        const PlayerAvatarComp::findReplaceAvatar::<lambda(const std::vector<long unsigned int>&)> *const __closure,
        const std::vector<long unsigned int> *avatar_guid_vec)
{
  uint64_t v2; // r15
  unsigned __int64 v3; // r12
  __int64 v4; // rax
  _DWORD *v5; // r13
  unsigned __int64 v6; // rax
  __int64 v7; // rcx
  common::milog::MiLogStream *v8; // rax
  common::milog::MiLogStream *v9; // rax
  common::milog::MiLogStream *p_this; // rdi
  PlayerAvatarComp *this; // rax
  int v12; // r14d
  std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v13; // rax
  uint64_t result; // rax
  std::vector<long unsigned int>::const_iterator __for_begin; // [rsp+20h] [rbp-D0h] BYREF
  std::vector<long unsigned int>::const_iterator __for_end; // [rsp+28h] [rbp-C8h] BYREF
  uint64_t last_valid_avatar_guid; // [rsp+30h] [rbp-C0h]
  const std::vector<long unsigned int> *__for_range; // [rsp+38h] [rbp-B8h]
  common::milog::MiLogStream v20; // [rsp+40h] [rbp-B0h] BYREF
  char v21[144]; // [rsp+60h] [rbp-90h] BYREF

  v3 = (unsigned __int64)v21;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_1(96LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "2 32 8 16 avatar_guid:5181 64 16 15 avatar_ptr:5188";
  *(_QWORD *)(v3 + 16) = PlayerAvatarComp::findReplaceAvatar(unsigned long)::{lambda(std::vector<unsigned long> const&)#1}::operator();
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = -218959360;
  v5[536862722] = -202178560;
  last_valid_avatar_guid = 0LL;
  __for_range = avatar_guid_vec;
  __for_begin._M_current = std::vector<unsigned long>::begin(avatar_guid_vec)._M_current;
  __for_end._M_current = std::vector<unsigned long>::end(avatar_guid_vec)._M_current;
  while ( __gnu_cxx::operator!=<unsigned long const*,std::vector<unsigned long>>(&__for_begin, &__for_end) )
  {
    v6 = (unsigned __int64)__gnu_cxx::__normal_iterator<unsigned long const*,std::vector<unsigned long>>::operator*(&__for_begin);
    if ( *(_BYTE *)((v6 >> 3) + 0x7FFF8000) )
      v6 = __asan_report_load8(v6);
    *(_QWORD *)(v3 + 32) = *(_QWORD *)v6;
    v7 = *(_QWORD *)(v3 + 32);
    if ( *(_BYTE *)(((unsigned __int64)__closure >> 3) + 0x7FFF8000) )
      __asan_report_load8(__closure);
    if ( v7 != __closure->__exclude_avatar_guid )
    {
      if ( *(_BYTE *)(((unsigned __int64)&__closure->__this >> 3) + 0x7FFF8000) )
        __asan_report_load8(&__closure->__this);
      PlayerAvatarComp::findAvatar(
        (const PlayerAvatarComp *const)(v3 + 64),
        (uint64_t)__closure->__this,
        *(_QWORD *)(v3 + 32));
      if ( std::operator==<Avatar>(0LL, (const std::shared_ptr<Avatar> *)(v3 + 64)) )
      {
        common::milog::MiLogStream::create(
          &v20,
          &common::milog::MiLogDefault::default_log_obj_,
          3u,
          "./src/player/avatar/player_avatar_comp.cpp",
          "operator()",
          5191);
        v8 = common::milog::MiLogStream::operator<<<char [33],(char *[33])0>(
               &v20,
               (const char (*)[33])"avatar_ptr is null, avatar_guid:");
        v9 = common::milog::MiLogStream::operator<<<unsigned long,(unsigned long *)0>(
               v8,
               (const unsigned __int64 *)(v3 + 32));
        p_this = common::milog::MiLogStream::operator<<<char [9],(char *[9])0>(v9, (const char (*)[9])" player:");
        if ( *(_BYTE *)(((unsigned __int64)&__closure->__this >> 3) + 0x7FFF8000) )
        {
          p_this = (common::milog::MiLogStream *)&__closure->__this;
          __asan_report_load8(&__closure->__this);
        }
        this = __closure->__this;
        if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
        {
          p_this = (common::milog::MiLogStream *)&this->player_;
          this = (PlayerAvatarComp *)__asan_report_load8(&this->player_);
        }
        operator<<(p_this, this->player_);
        common::milog::MiLogStream::~MiLogStream(&v20);
        v12 = 0;
      }
      else
      {
        v13 = std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 64));
        if ( Creature::getLifeState(v13) == LIFE_ALIVE )
        {
          v2 = *(_QWORD *)(v3 + 32);
          v12 = 1;
        }
        else
        {
          last_valid_avatar_guid = *(_QWORD *)(v3 + 32);
          v12 = 2;
        }
      }
      std::shared_ptr<Avatar>::~shared_ptr((std::shared_ptr<Avatar> *const)(v3 + 64));
      if ( v12 )
      {
        if ( v12 != 2 )
          goto LABEL_26;
      }
    }
    __gnu_cxx::__normal_iterator<unsigned long const*,std::vector<unsigned long>>::operator++(&__for_begin);
  }
  v2 = last_valid_avatar_guid;
LABEL_26:
  result = v2;
  if ( v21 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8008) = 0;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8008) = -168430091;
  }
  return result;
};

// Line 5216: range 0000000017195B12-00000000171963DE
int32_t __cdecl PlayerAvatarComp::lockTeamAvatarByQuest(
        PlayerAvatarComp *const this,
        const std::vector<unsigned int> *avatar_id_vec,
        proto_log::ChangeSceneTeamReason reason)
{
  unsigned __int64 v3; // r13
  __int64 v4; // rax
  _DWORD *v5; // r12
  __gnu_cxx::__normal_iterator<unsigned int const*,std::vector<unsigned int> >::reference v6; // rax
  std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v7; // rax
  std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v8; // rax
  float v9; // xmm0_4
  std::__shared_ptr_access<TrialAvatar,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v10; // rax
  std::__shared_ptr_access<TrialAvatar,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v11; // rax
  float v12; // xmm0_4
  char v13; // al
  __int64 ChooseAvatarGuid; // rax
  std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v15; // rax
  std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v16; // rax
  std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v17; // rax
  std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v18; // rax
  Avatar *v19; // rax
  Avatar *v20; // rax
  std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v21; // rax
  common::milog::MiLogStream *v22; // rdx
  int32_t v23; // r14d
  common::milog::MiLogStream *v24; // rdx
  uint64_t *v25; // rax
  bool v26; // r14
  common::milog::MiLogStream *v27; // rax
  int32_t result; // eax
  float v29; // [rsp+4h] [rbp-16Ch]
  float b; // [rsp+8h] [rbp-168h]
  float ba; // [rsp+8h] [rbp-168h]
  float revive_hp_percent; // [rsp+2Ch] [rbp-144h]
  std::vector<unsigned int>::const_iterator __for_begin; // [rsp+30h] [rbp-140h] BYREF
  std::vector<unsigned int>::const_iterator __for_end; // [rsp+38h] [rbp-138h] BYREF
  unsigned __int64 value; // [rsp+40h] [rbp-130h] BYREF
  const std::vector<unsigned int> *__for_range; // [rsp+48h] [rbp-128h]
  std::shared_ptr<FormalAvatar> __r; // [rsp+50h] [rbp-120h] BYREF
  std::shared_ptr<FormalAvatar> v39; // [rsp+60h] [rbp-110h] BYREF
  std::shared_ptr<Scene> v40; // [rsp+70h] [rbp-100h] BYREF
  common::milog::MiLogStream v41; // [rsp+80h] [rbp-F0h] BYREF
  char v42[208]; // [rsp+A0h] [rbp-D0h] BYREF

  v3 = (unsigned __int64)v42;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_2(160LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "3 32 16 15 avatar_ptr:5223 64 16 14 scene_ptr:5265 96 24 13 guid_vec:5217";
  *(_QWORD *)(v3 + 16) = PlayerAvatarComp::lockTeamAvatarByQuest;
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = -219021312;
  v5[536862722] = -219021312;
  v5[536862723] = -218103808;
  v5[536862724] = -202116109;
  std::vector<unsigned long>::vector((std::vector<long unsigned int> *const)(v3 + 96));
  __for_range = avatar_id_vec;
  __for_begin._M_current = std::vector<unsigned int>::begin(avatar_id_vec)._M_current;
  __for_end._M_current = std::vector<unsigned int>::end(avatar_id_vec)._M_current;
  while ( __gnu_cxx::operator!=<unsigned int const*,std::vector<unsigned int>>(&__for_begin, &__for_end) )
  {
    v6 = __gnu_cxx::__normal_iterator<unsigned int const*,std::vector<unsigned int>>::operator*(&__for_begin);
    if ( *(_BYTE *)(((unsigned __int64)v6 >> 3) + 0x7FFF8000) != 0
      && (char)(((unsigned __int8)v6 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)v6 >> 3) + 0x7FFF8000) )
    {
      __asan_report_load4(v6);
    }
    PlayerAvatarComp::findFormalAvatarByAvatarId((const PlayerAvatarComp *const)&__r, (uint32_t)this);
    std::shared_ptr<Avatar>::shared_ptr<FormalAvatar,void>((std::shared_ptr<Avatar> *const)(v3 + 32), &__r);
    std::shared_ptr<FormalAvatar>::~shared_ptr(&__r);
    PlayerAvatarComp::findTrialAvatarByAvatarId((const PlayerAvatarComp *const)(v3 + 64), (uint32_t)this);
    if ( std::operator==<Avatar>(0LL, (const std::shared_ptr<Avatar> *)(v3 + 32)) )
      goto LABEL_11;
    if ( !std::operator!=<TrialAvatar>(0LL, (const std::shared_ptr<TrialAvatar> *)(v3 + 64)) )
      goto LABEL_12;
    v7 = std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 32));
    b = Avatar::calcCombatForceComparisonFactor(v7);
    v8 = std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 32));
    v9 = Avatar::calcAvatarCombatForce(v8);
    ba = SAFE_MULTIPLY<float,float>(v9, b);
    v10 = std::__shared_ptr_access<TrialAvatar,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<TrialAvatar,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 64));
    v29 = Avatar::calcCombatForceComparisonFactor(v10);
    v11 = std::__shared_ptr_access<TrialAvatar,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<TrialAvatar,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 64));
    v12 = Avatar::calcAvatarCombatForce(v11);
    if ( SAFE_MULTIPLY<float,float>(v12, v29) > ba )
LABEL_11:
      v13 = 1;
    else
LABEL_12:
      v13 = 0;
    if ( v13 )
      std::shared_ptr<Avatar>::operator=<TrialAvatar>(
        (std::shared_ptr<Avatar> *const)(v3 + 32),
        (const std::shared_ptr<TrialAvatar> *)(v3 + 64));
    if ( std::operator==<Avatar>(0LL, (const std::shared_ptr<Avatar> *)(v3 + 32)) )
    {
      ChooseAvatarGuid = PlayerAvatarComp::getChooseAvatarGuid(this);
      PlayerAvatarComp::findFormalAvatar((const PlayerAvatarComp *const)&v39, (uint64_t)this, ChooseAvatarGuid);
      std::shared_ptr<Avatar>::operator=<FormalAvatar>((std::shared_ptr<Avatar> *const)(v3 + 32), &v39);
      std::shared_ptr<FormalAvatar>::~shared_ptr(&v39);
    }
    if ( !std::operator==<Avatar>(0LL, (const std::shared_ptr<Avatar> *)(v3 + 32)) )
    {
      v15 = std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 32));
      value = Avatar::getGuid(v15);
      if ( !common::tools::MiscUtils::isContains<unsigned long>((std::vector<long unsigned int> *)(v3 + 96), &value) )
      {
        v16 = std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 32));
        if ( Creature::getLifeState(v16) == LIFE_DEAD )
        {
          ServiceBox::findService<GameserverService>();
          GameserverService::getConfig((GameserverService *const)&v40);
          v17 = std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false> *const)&v40);
          revive_hp_percent = (float)(int)ConstValueExcelConfigMgr::getHurtReviveHpPercent(&v17->design_config.txt_config_mgr.const_value_config_mgr);
          std::shared_ptr<Config>::~shared_ptr((std::shared_ptr<Config> *const)&v40);
          v18 = std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 32));
          Creature::setCurHpPercent(v18, revive_hp_percent, CHANGE_HP_ADD_REVIVE, 1);
          v19 = std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 32));
          Avatar::clearSpeed(v19);
          v20 = std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 32));
          Avatar::setLifeAlive(v20, 0x66u, 0LL, 1);
        }
        v21 = std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 32));
        value = Avatar::getGuid(v21);
        std::vector<unsigned long>::push_back((std::vector<long unsigned int> *const)(v3 + 96), &value);
      }
    }
    std::shared_ptr<TrialAvatar>::~shared_ptr((std::shared_ptr<TrialAvatar> *const)(v3 + 64));
    std::shared_ptr<Avatar>::~shared_ptr((std::shared_ptr<Avatar> *const)(v3 + 32));
    __gnu_cxx::__normal_iterator<unsigned int const*,std::vector<unsigned int>>::operator++(&__for_begin);
  }
  if ( std::vector<unsigned long>::empty((const std::vector<long unsigned int> *const)(v3 + 96)) )
  {
    common::milog::MiLogStream::create(
      &v41,
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/player/avatar/player_avatar_comp.cpp",
      "lockTeamAvatarByQuest",
      5255);
    v22 = common::milog::MiLogStream::operator<<<char [49],(char *[49])0>(
            &v41,
            (const char (*)[49])"lock avatar team no valid avatar, avatar_id_vec:");
    common::milog::MiLogStream::operator<<<unsigned int>(v22, avatar_id_vec);
    common::milog::MiLogStream::~MiLogStream(&v41);
    v23 = -1;
  }
  else if ( PlayerAvatarComp::checkAvatarTeamCanJoinSceneTeam(this, (const std::vector<long unsigned int> *)(v3 + 96)) )
  {
    common::milog::MiLogStream::create(
      &v41,
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/player/avatar/player_avatar_comp.cpp",
      "lockTeamAvatarByQuest",
      5260);
    v24 = common::milog::MiLogStream::operator<<<char [61],(char *[61])0>(
            &v41,
            (const char (*)[61])"lock avatar team  valid avatar in scene team, avatar_id_vec:");
    common::milog::MiLogStream::operator<<<unsigned int>(v24, avatar_id_vec);
    common::milog::MiLogStream::~MiLogStream(&v41);
    v23 = -1;
  }
  else
  {
    std::vector<unsigned long>::operator=(
      &this->quest_lock_team_avatar_guid_vec_,
      (const std::vector<long unsigned int> *)(v3 + 96));
    if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
      __asan_report_load8(&this->player_);
    Player::getSceneComp(this->player_);
    PlayerSceneComp::getCurScene((const PlayerSceneComp *const)(v3 + 64));
    if ( std::operator==<Scene>(0LL, (const std::shared_ptr<Scene> *)(v3 + 64)) )
    {
      v23 = 0;
    }
    else
    {
      std::shared_ptr<Scene>::shared_ptr(&v40, (const std::shared_ptr<Scene> *)(v3 + 64));
      v25 = std::vector<unsigned long>::operator[]((std::vector<long unsigned int> *const)(v3 + 96), 0LL);
      if ( *(_BYTE *)(((unsigned __int64)v25 >> 3) + 0x7FFF8000) )
        v25 = (uint64_t *)__asan_report_load8(v25);
      v26 = PlayerAvatarComp::setSceneTeamAndAddToScene(
              this,
              (const std::vector<long unsigned int> *)(v3 + 96),
              *v25,
              &v40,
              reason) != 0;
      std::shared_ptr<Scene>::~shared_ptr(&v40);
      if ( v26 )
      {
        common::milog::MiLogStream::create(
          &v41,
          &common::milog::MiLogDefault::default_log_obj_,
          3u,
          "./src/player/avatar/player_avatar_comp.cpp",
          "lockTeamAvatarByQuest",
          5272);
        v27 = common::milog::MiLogStream::operator<<<char [48],(char *[48])0>(&v41, (const char (*)[48])off_2603F4E0);
        common::milog::MiLogStream::operator<<<unsigned long>(v27, (const std::vector<long unsigned int> *)(v3 + 96));
        common::milog::MiLogStream::~MiLogStream(&v41);
        v23 = -1;
      }
      else
      {
        v23 = 0;
      }
    }
    std::shared_ptr<Scene>::~shared_ptr((std::shared_ptr<Scene> *const)(v3 + 64));
  }
  std::vector<unsigned long>::~vector((std::vector<long unsigned int> *const)(v3 + 96));
  result = v23;
  if ( v42 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8010) = 0;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8010) = -168430091;
  }
  return result;
};

// Line 5279: range 00000000171963E0-0000000017196B04
int32_t __cdecl PlayerAvatarComp::unlockTeamAvatarByQuest(
        PlayerAvatarComp *const this,
        proto_log::ChangeSceneTeamReason reason)
{
  unsigned __int64 v2; // r13
  __int64 v3; // rax
  _DWORD *v4; // r12
  int32_t v5; // r14d
  uint32_t CurAvatarTeamId; // eax
  unsigned __int64 *v7; // rax
  std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v8; // rax
  std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v10; // rax
  std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v11; // rax
  Avatar *v12; // rax
  Avatar *v13; // rax
  common::milog::MiLogStream *v14; // rax
  unsigned __int64 *v15; // rax
  common::milog::MiLogStream *v16; // rcx
  common::milog::MiLogStream *v17; // rax
  int32_t result; // eax
  float revive_hp_percent; // [rsp+14h] [rbp-13Ch]
  std::vector<long unsigned int>::iterator __for_begin; // [rsp+18h] [rbp-138h] BYREF
  std::vector<long unsigned int>::iterator __for_end; // [rsp+20h] [rbp-130h] BYREF
  uint64_t guid; // [rsp+28h] [rbp-128h]
  std::vector<long unsigned int> *__for_range; // [rsp+30h] [rbp-120h]
  std::vector<long unsigned int> *__for_range_0; // [rsp+38h] [rbp-118h]
  unsigned __int64 avatar_guid; // [rsp+40h] [rbp-110h]
  unsigned __int64 guid_0; // [rsp+48h] [rbp-108h]
  std::shared_ptr<Config> v27; // [rsp+50h] [rbp-100h] BYREF
  common::milog::MiLogStream v28; // [rsp+60h] [rbp-F0h] BYREF
  char v29[208]; // [rsp+80h] [rbp-D0h] BYREF

  v2 = (unsigned __int64)v29;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_2(160LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "3 48 4 12 retcode:5304 64 16 15 avatar_ptr:5293 96 24 13 team_vec:5290";
  *(_QWORD *)(v2 + 16) = PlayerAvatarComp::unlockTeamAvatarByQuest;
  v4 = (_DWORD *)(v2 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = -234556943;
  v4[536862722] = -219021312;
  v4[536862723] = -218103808;
  v4[536862724] = -202116109;
  if ( std::vector<unsigned long>::empty(&this->quest_lock_team_avatar_guid_vec_) )
  {
    common::milog::MiLogStream::create(
      &v28,
      &common::milog::MiLogDefault::default_log_obj_,
      1u,
      "./src/player/avatar/player_avatar_comp.cpp",
      "unlockTeamAvatarByQuest",
      5282);
    common::milog::MiLogStream::operator<<<char [29],(char *[29])0>(
      &v28,
      (const char (*)[29])"lock team empty, do nothing.");
    common::milog::MiLogStream::~MiLogStream(&v28);
    v5 = 0;
  }
  else
  {
    std::vector<unsigned long>::clear(&this->quest_lock_team_avatar_guid_vec_);
    CurAvatarTeamId = PlayerAvatarComp::getCurAvatarTeamId(this);
    PlayerAvatarComp::getAvatarTeamWithTempAvatar((std::vector<long unsigned int> *)(v2 + 96), this, CurAvatarTeamId);
    __for_range = (std::vector<long unsigned int> *)(v2 + 96);
    __for_begin._M_current = std::vector<unsigned long>::begin((std::vector<long unsigned int> *const)(v2 + 96))._M_current;
    __for_end._M_current = std::vector<unsigned long>::end((std::vector<long unsigned int> *const)(v2 + 96))._M_current;
    while ( __gnu_cxx::operator!=<unsigned long *,std::vector<unsigned long>>(&__for_begin, &__for_end) )
    {
      v7 = __gnu_cxx::__normal_iterator<unsigned long *,std::vector<unsigned long>>::operator*(&__for_begin);
      if ( *(_BYTE *)(((unsigned __int64)v7 >> 3) + 0x7FFF8000) )
        v7 = (unsigned __int64 *)__asan_report_load8(v7);
      guid_0 = *v7;
      PlayerAvatarComp::findAvatar((const PlayerAvatarComp *const)(v2 + 64), (uint64_t)this, guid_0);
      if ( std::operator!=<Avatar>((const std::shared_ptr<Avatar> *)(v2 + 64), 0LL) )
      {
        v8 = std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 64));
        if ( Creature::getLifeState(v8) == LIFE_DEAD )
        {
          ServiceBox::findService<GameserverService>();
          GameserverService::getConfig((GameserverService *const)&v27);
          v10 = std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false> *const)&v27);
          revive_hp_percent = (float)(int)ConstValueExcelConfigMgr::getHurtReviveHpPercent(&v10->design_config.txt_config_mgr.const_value_config_mgr);
          std::shared_ptr<Config>::~shared_ptr(&v27);
          v11 = std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 64));
          Creature::setCurHpPercent(v11, revive_hp_percent, CHANGE_HP_ADD_REVIVE, 1);
          v12 = std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 64));
          Avatar::clearSpeed(v12);
          v13 = std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 64));
          Avatar::setLifeAlive(v13, 0x66u, 0LL, 1);
        }
      }
      std::shared_ptr<Avatar>::~shared_ptr((std::shared_ptr<Avatar> *const)(v2 + 64));
      __gnu_cxx::__normal_iterator<unsigned long *,std::vector<unsigned long>>::operator++(&__for_begin);
    }
    *(_DWORD *)(v2 + 48) = PlayerAvatarComp::checkAvatarTeamCanJoinSceneTeam(
                             this,
                             (const std::vector<long unsigned int> *)(v2 + 96));
    if ( *(_DWORD *)(v2 + 48) )
    {
      common::milog::MiLogStream::create(
        &v28,
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/player/avatar/player_avatar_comp.cpp",
        "unlockTeamAvatarByQuest",
        5307);
      v14 = common::milog::MiLogStream::operator<<<char [46],(char *[46])0>(&v28, (const char (*)[46])off_26042AA0);
      common::milog::MiLogStream::operator<<<int,(int *)0>(v14, (const int *)(v2 + 48));
      common::milog::MiLogStream::~MiLogStream(&v28);
      v5 = *(_DWORD *)(v2 + 48);
    }
    else
    {
      guid = 0LL;
      __for_range_0 = (std::vector<long unsigned int> *)(v2 + 96);
      __for_begin._M_current = std::vector<unsigned long>::begin((std::vector<long unsigned int> *const)(v2 + 96))._M_current;
      __for_end._M_current = std::vector<unsigned long>::end(__for_range_0)._M_current;
      while ( __gnu_cxx::operator!=<unsigned long *,std::vector<unsigned long>>(&__for_begin, &__for_end) )
      {
        v15 = __gnu_cxx::__normal_iterator<unsigned long *,std::vector<unsigned long>>::operator*(&__for_begin);
        if ( *(_BYTE *)(((unsigned __int64)v15 >> 3) + 0x7FFF8000) )
          v15 = (unsigned __int64 *)__asan_report_load8(v15);
        avatar_guid = *v15;
        if ( !(unsigned int)PlayerAvatarComp::checkChangeCurAvatar(this, avatar_guid) )
        {
          guid = avatar_guid;
          break;
        }
        __gnu_cxx::__normal_iterator<unsigned long *,std::vector<unsigned long>>::operator++(&__for_begin);
      }
      if ( guid )
      {
        if ( (unsigned int)PlayerAvatarComp::syncCurAvatarTeamToSceneTeam(this, guid, reason) )
        {
          common::milog::MiLogStream::create(
            &v28,
            &common::milog::MiLogDefault::default_log_obj_,
            3u,
            "./src/player/avatar/player_avatar_comp.cpp",
            "unlockTeamAvatarByQuest",
            5326);
          common::milog::MiLogStream::operator<<<char [26],(char *[26])0>(
            &v28,
            (const char (*)[26])"sync cur avatar team fail");
          common::milog::MiLogStream::~MiLogStream(&v28);
          v5 = -1;
        }
        else
        {
          v5 = 0;
        }
      }
      else
      {
        common::milog::MiLogStream::create(
          &v28,
          &common::milog::MiLogDefault::default_log_obj_,
          3u,
          "./src/player/avatar/player_avatar_comp.cpp",
          "unlockTeamAvatarByQuest",
          5321);
        v16 = common::milog::MiLogStream::operator<<<char [30],(char *[30])0>(
                &v28,
                (const char (*)[30])"checkChangeCurAvatar, player:");
        if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
          __asan_report_load8(&this->player_);
        v17 = operator<<(v16, this->player_);
        common::milog::MiLogStream::operator<<<char [9],(char *[9])0>(v17, (const char (*)[9])" guid: 0");
        common::milog::MiLogStream::~MiLogStream(&v28);
        v5 = -1;
      }
    }
    std::vector<unsigned long>::~vector((std::vector<long unsigned int> *const)(v2 + 96));
  }
  result = v5;
  if ( v29 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8010) = 0;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8010) = -168430091;
  }
  return result;
};

// Line 5333: range 0000000017196B06-0000000017196F77
__int64 __fastcall PlayerAvatarComp::addServerBuff(PlayerAvatarComp *const this, uint32_t buff_id, uint32_t buff_time)
{
  unsigned __int64 v3; // r12
  __int64 v4; // rax
  _DWORD *v5; // r13
  std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v6; // rax
  common::milog::MiLogStream *v7; // rax
  unsigned int v8; // r14d
  data::ServerBuffType server_buff_type; // eax
  common::milog::MiLogStream *v10; // rax
  std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v11; // rax
  BuffComp *BuffComp; // rax
  common::milog::MiLogStream *v13; // rax
  common::milog::MiLogStream *v14; // rax
  common::milog::MiLogStream *v15; // rax
  __int64 result; // rax
  const data::BuffExcelConfig *buff_config_ptr; // [rsp+18h] [rbp-B8h]
  common::milog::MiLogStream v19; // [rsp+20h] [rbp-B0h] BYREF
  char v20[144]; // [rsp+40h] [rbp-90h] BYREF

  v3 = (unsigned __int64)v20;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_1(96LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "2 48 4 12 buff_id:5332 64 16 19 cur_avatar_ptr:5348";
  *(_QWORD *)(v3 + 16) = PlayerAvatarComp::addServerBuff;
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = -234556943;
  v5[536862722] = -202178560;
  *(_DWORD *)(v3 + 48) = buff_id;
  ServiceBox::findService<GameserverService>();
  GameserverService::getConfig((GameserverService *const)(v3 + 64));
  v6 = std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 64));
  buff_config_ptr = data::BuffExcelConfigMgrBase::findBuffExcelConfig(
                      &v6->design_config.txt_config_mgr.buff_config_mgr,
                      *(_DWORD *)(v3 + 48));
  std::shared_ptr<Config>::~shared_ptr((std::shared_ptr<Config> *const)(v3 + 64));
  if ( buff_config_ptr )
  {
    if ( *(_BYTE *)(((unsigned __int64)&buff_config_ptr->server_buff_type >> 3) + 0x7FFF8000) != 0
      && (char)((((_BYTE)buff_config_ptr + 12) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&buff_config_ptr->server_buff_type >> 3)
                                                                     + 0x7FFF8000) )
    {
      __asan_report_load4(&buff_config_ptr->server_buff_type);
    }
    server_buff_type = buff_config_ptr->server_buff_type;
    if ( server_buff_type == SERVER_BUFF_AVATAR )
    {
      if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
        __asan_report_load8(&this->player_);
      Player::getCurAvatar((Player *const)(v3 + 64));
      if ( std::operator==<Avatar>((const std::shared_ptr<Avatar> *)(v3 + 64), 0LL) )
      {
        common::milog::MiLogStream::create(
          &v19,
          &common::milog::MiLogDefault::default_log_obj_,
          3u,
          "./src/player/avatar/player_avatar_comp.cpp",
          "addServerBuff",
          5351);
        v10 = common::milog::MiLogStream::operator<<<char [53],(char *[53])0>(
                &v19,
                (const char (*)[53])"addServerBuff fails, cur avatar is nullptr, buff_id:");
        common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v10, (const unsigned int *)(v3 + 48));
        common::milog::MiLogStream::~MiLogStream(&v19);
        v8 = -1;
      }
      else
      {
        v11 = std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 64));
        BuffComp = Avatar::getBuffComp(v11);
        v8 = BuffComp::addBuff(BuffComp, *(_DWORD *)(v3 + 48), buff_time);
      }
      std::shared_ptr<Avatar>::~shared_ptr((std::shared_ptr<Avatar> *const)(v3 + 64));
    }
    else if ( server_buff_type == SERVER_BUFF_TEAM )
    {
      v8 = PlayerAvatarComp::addTeamBuff(this, *(_DWORD *)(v3 + 48), buff_time);
    }
    else
    {
      common::milog::MiLogStream::create(
        &v19,
        &common::milog::MiLogDefault::default_log_obj_,
        4u,
        "./src/player/avatar/player_avatar_comp.cpp",
        "addServerBuff",
        5358);
      v13 = common::milog::MiLogStream::operator<<<char [40],(char *[40])0>(
              &v19,
              (const char (*)[40])"addServerBuff fails, invalid buff_type:");
      v14 = common::milog::MiLogStream::operator<<<data::ServerBuffType,(data::ServerBuffType*)0>(
              v13,
              &buff_config_ptr->server_buff_type);
      v15 = common::milog::MiLogStream::operator<<<char [11],(char *[11])0>(v14, (const char (*)[11])", buff_id:");
      common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v15, (const unsigned int *)(v3 + 48));
      common::milog::MiLogStream::~MiLogStream(&v19);
      v8 = -1;
    }
  }
  else
  {
    common::milog::MiLogStream::create(
      &v19,
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/player/avatar/player_avatar_comp.cpp",
      "addServerBuff",
      5337);
    v7 = common::milog::MiLogStream::operator<<<char [36],(char *[36])0>(
           &v19,
           (const char (*)[36])"findBuffExcelConfig fails, buff_id:");
    common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v7, (const unsigned int *)(v3 + 48));
    common::milog::MiLogStream::~MiLogStream(&v19);
    v8 = -1;
  }
  result = v8;
  if ( v20 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8008) = 0;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8008) = -168430091;
  }
  return result;
};

// Line 5366: range 0000000017197032-000000001719816A
__int64 __fastcall PlayerAvatarComp::addTeamBuff(PlayerAvatarComp *const this, uint32_t buff_id, uint32_t buff_time)
{
  unsigned __int64 v3; // r13
  __int64 v4; // rax
  _DWORD *v5; // r12
  std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v6; // rax
  common::milog::MiLogStream *v7; // rax
  unsigned int v8; // r14d
  common::milog::MiLogStream *v9; // rax
  common::milog::MiLogStream *v10; // rax
  common::milog::MiLogStream *v11; // rax
  PlayerBasicComp *BasicComp; // rax
  data::BuffStackType stack_type; // eax
  std::_Rb_tree_iterator<std::pair<unsigned int const,std::shared_ptr<Buff> > >::pointer v14; // rax
  Buff *v15; // rax
  common::milog::MiLogStream *v16; // rax
  common::milog::MiLogStream *v17; // rcx
  common::milog::MiLogStream *v18; // rax
  uint32_t v19; // edx
  common::milog::MiLogStream *v20; // rax
  Buff *v21; // rax
  common::milog::MiLogStream *v22; // rax
  Buff *v23; // r14
  uint32_t NextServerBuffUid; // eax
  Buff *v25; // rcx
  Buff *v26; // rax
  common::milog::MiLogStream *v27; // rax
  common::milog::MiLogStream *v28; // rcx
  common::milog::MiLogStream *v29; // rax
  common::milog::MiLogStream *v30; // rax
  common::milog::MiLogStream *v31; // rax
  common::milog::MiLogStream *v32; // rax
  common::milog::MiLogStream *v33; // rcx
  std::shared_ptr<Buff> *v34; // r8
  __int64 v35; // r14
  std::__shared_ptr_access<Buff,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v36; // rax
  uint32_t BuffId; // eax
  __int64 v38; // rax
  common::milog::MiLogStream *v39; // r14
  common::milog::MiLogStream *v40; // rax
  common::milog::MiLogStream *v41; // rcx
  common::milog::MiLogStream *v42; // rax
  common::milog::MiLogStream *v43; // r14
  common::milog::MiLogStream *v44; // rax
  common::milog::MiLogStream *v45; // rax
  common::milog::MiLogStream *v46; // rax
  common::milog::MiLogStream *v47; // rax
  common::milog::MiLogStream *v48; // rcx
  __int64 result; // rax
  char __args_0[9]; // [rsp+17h] [rbp-329h] BYREF
  const data::BuffExcelConfig *buff_config_ptr; // [rsp+20h] [rbp-320h]
  uint64_t player_time_ms; // [rsp+28h] [rbp-318h]
  std::multimap<unsigned int,std::shared_ptr<Buff>> *__for_range; // [rsp+30h] [rbp-310h]
  const std::pair<unsigned int const,std::shared_ptr<Buff> > *v55; // [rsp+38h] [rbp-308h]
  std::tuple_element<0,const std::pair<unsigned int const,std::shared_ptr<Buff> > >::type *_; // [rsp+40h] [rbp-300h]
  std::tuple_element<1,const std::pair<unsigned int const,std::shared_ptr<Buff> > >::type *buff_ptr; // [rsp+48h] [rbp-2F8h]
  common::milog::MiLogStream v58; // [rsp+50h] [rbp-2F0h] BYREF
  common::milog::MiLogStream v59; // [rsp+70h] [rbp-2D0h] BYREF
  char v60[688]; // [rsp+90h] [rbp-2B0h] BYREF

  v3 = (unsigned __int64)v60;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_4(640LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "7 32 4 15 buff_count:5477 48 4 12 buff_id:5365 64 4 14 buff_time:5365 80 8 7 it:5403 112 16 13 b"
                        "uff_ptr:5431 144 16 13 buff_ptr:5406 176 392 7 ss:5467";
  *(_QWORD *)(v3 + 16) = PlayerAvatarComp::addTeamBuff;
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = -234556924;
  v5[536862722] = 61956;
  v5[536862722] = -234881024;
  v5[536862723] = 62194;
  v5[536862724] = 62194;
  v5[536862725] = 62194;
  v5[536862737] = -218103808;
  v5[536862738] = -202116109;
  v5[536862739] = -202116109;
  *(_DWORD *)(v3 + 48) = buff_id;
  *(_DWORD *)(v3 + 64) = buff_time;
  ServiceBox::findService<GameserverService>();
  GameserverService::getConfig((GameserverService *const)(v3 + 144));
  v6 = std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 144));
  buff_config_ptr = data::BuffExcelConfigMgrBase::findBuffExcelConfig(
                      &v6->design_config.txt_config_mgr.buff_config_mgr,
                      *(_DWORD *)(v3 + 48));
  std::shared_ptr<Config>::~shared_ptr((std::shared_ptr<Config> *const)(v3 + 144));
  if ( !buff_config_ptr )
  {
    common::milog::MiLogStream::create(
      &v59,
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/player/avatar/player_avatar_comp.cpp",
      "addTeamBuff",
      5371);
    v7 = common::milog::MiLogStream::operator<<<char [36],(char *[36])0>(
           &v59,
           (const char (*)[36])"findBuffExcelConfig fails, buff_id:");
    common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v7, (const unsigned int *)(v3 + 48));
    common::milog::MiLogStream::~MiLogStream(&v59);
    v8 = -1;
    goto LABEL_66;
  }
  if ( *(_BYTE *)(((unsigned __int64)&buff_config_ptr->server_buff_type >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)buff_config_ptr + 12) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&buff_config_ptr->server_buff_type >> 3)
                                                                   + 0x7FFF8000) )
  {
    __asan_report_load4(&buff_config_ptr->server_buff_type);
  }
  if ( buff_config_ptr->server_buff_type != SERVER_BUFF_TEAM )
  {
    common::milog::MiLogStream::create(
      &v59,
      &common::milog::MiLogDefault::default_log_obj_,
      4u,
      "./src/player/avatar/player_avatar_comp.cpp",
      "addTeamBuff",
      5376);
    v9 = common::milog::MiLogStream::operator<<<char [26],(char *[26])0>(
           &v59,
           (const char (*)[26])"invalid server_buff_type:");
    v10 = common::milog::MiLogStream::operator<<<data::ServerBuffType,(data::ServerBuffType*)0>(
            v9,
            &buff_config_ptr->server_buff_type);
    v11 = common::milog::MiLogStream::operator<<<char [11],(char *[11])0>(v10, (const char (*)[11])", buff_id:");
    common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v11, (const unsigned int *)(v3 + 48));
    common::milog::MiLogStream::~MiLogStream(&v59);
    v8 = -1;
    goto LABEL_66;
  }
  if ( *(_BYTE *)(((unsigned __int64)&buff_config_ptr->time >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)buff_config_ptr + 84) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&buff_config_ptr->time >> 3)
                                                                   + 0x7FFF8000) )
  {
    __asan_report_load4(&buff_config_ptr->time);
  }
  if ( buff_config_ptr->time >= 0.0 )
  {
    if ( !*(_DWORD *)(v3 + 64) )
    {
      if ( *(_BYTE *)(((unsigned __int64)&buff_config_ptr->time >> 3) + 0x7FFF8000) != 0
        && (char)((((_BYTE)buff_config_ptr + 84) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&buff_config_ptr->time >> 3)
                                                                       + 0x7FFF8000) )
      {
        __asan_report_load4(&buff_config_ptr->time);
      }
      *(_DWORD *)(v3 + 64) = (int)(float)(1000.0 * buff_config_ptr->time);
    }
  }
  else
  {
    *(_DWORD *)(v3 + 64) = -1;
  }
  if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
    __asan_report_load8(&this->player_);
  BasicComp = Player::getBasicComp(this->player_);
  player_time_ms = PlayerBasicComp::getPlayerTimeMs(BasicComp);
  if ( *(_BYTE *)(((unsigned __int64)&buff_config_ptr->stack_type >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&buff_config_ptr->stack_type >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4(&buff_config_ptr->stack_type);
  }
  stack_type = buff_config_ptr->stack_type;
  if ( stack_type == BUFF_STACK )
    goto LABEL_37;
  if ( stack_type > BUFF_STACK )
    goto LABEL_36;
  if ( stack_type == BUFF_REFRESH )
  {
    if ( PlayerAvatarComp::isHasTeamBuff(this, *(_DWORD *)(v3 + 48)) )
      PlayerAvatarComp::delTeamBuff(this, *(_DWORD *)(v3 + 48));
    goto LABEL_37;
  }
  if ( stack_type != BUFF_EXTEND )
  {
LABEL_36:
    common::milog::MiLogStream::create(
      &v59,
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/player/avatar/player_avatar_comp.cpp",
      "addTeamBuff",
      5423);
    v18 = common::milog::MiLogStream::operator<<<char [24],(char *[24])0>(
            &v59,
            (const char (*)[24])"unsupported stack_type:");
    common::milog::MiLogStream::operator<<<data::BuffStackType,(data::BuffStackType*)0>(
      v18,
      &buff_config_ptr->stack_type);
    common::milog::MiLogStream::~MiLogStream(&v59);
    goto LABEL_37;
  }
  *(std::multimap<unsigned int,std::shared_ptr<Buff>>::iterator *)(v3 + 80) = std::multimap<unsigned int,std::shared_ptr<Buff>>::find(
                                                                                &this->avatar_team_buff_mmap_,
                                                                                (const std::multimap<unsigned int,std::shared_ptr<Buff>>::key_type *)(v3 + 48));
  *(std::multimap<unsigned int,std::shared_ptr<Buff>>::iterator *)&__args_0[1] = std::multimap<unsigned int,std::shared_ptr<Buff>>::end(&this->avatar_team_buff_mmap_);
  if ( !std::operator!=(
          (const std::_Rb_tree_iterator<std::pair<unsigned int const,std::shared_ptr<Buff> > >::_Self *)(v3 + 80),
          (const std::_Rb_tree_iterator<std::pair<unsigned int const,std::shared_ptr<Buff> > >::_Self *)&__args_0[1]) )
  {
LABEL_37:
    v19 = *(_DWORD *)(v3 + 48);
    if ( *(_BYTE *)(((unsigned __int64)&buff_config_ptr->group_id >> 3) + 0x7FFF8000) != 0
      && *(_BYTE *)(((unsigned __int64)&buff_config_ptr->group_id >> 3) + 0x7FFF8000) <= 3 )
    {
      __asan_report_load4(&buff_config_ptr->group_id);
    }
    PlayerAvatarComp::delAllBuffByGroupId(this, buff_config_ptr->group_id, v19);
    __args_0[0] = 1;
    common::tools::perf::make_shared<Buff,unsigned int &,bool>(
      (unsigned int *)(v3 + 112),
      (bool *)(v3 + 48),
      (unsigned int *)__args_0,
      (bool *)(v3 + 48));
    if ( std::operator==<Buff>((const std::shared_ptr<Buff> *)(v3 + 112), 0LL) )
    {
      common::milog::MiLogStream::create(
        &v59,
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/player/avatar/player_avatar_comp.cpp",
        "addTeamBuff",
        5434);
      v20 = common::milog::MiLogStream::operator<<<char [27],(char *[27])0>(
              &v59,
              (const char (*)[27])"buff_ptr is null, buff_id:");
      common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v20, (const unsigned int *)(v3 + 48));
      common::milog::MiLogStream::~MiLogStream(&v59);
      v8 = -1;
    }
    else
    {
      v21 = std::__shared_ptr_access<Buff,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Buff,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 112));
      if ( Buff::init(v21) )
      {
        common::milog::MiLogStream::create(
          &v59,
          &common::milog::MiLogDefault::default_log_obj_,
          3u,
          "./src/player/avatar/player_avatar_comp.cpp",
          "addTeamBuff",
          5439);
        v22 = common::milog::MiLogStream::operator<<<char [25],(char *[25])0>(
                &v59,
                (const char (*)[25])"buff init fail, buff_id:");
        common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v22, (const unsigned int *)(v3 + 48));
        common::milog::MiLogStream::~MiLogStream(&v59);
        v8 = -1;
      }
      else
      {
        v23 = std::__shared_ptr_access<Buff,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Buff,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 112));
        NextServerBuffUid = PlayerAvatarComp::getNextServerBuffUid(this);
        Buff::setBuffUid(v23, NextServerBuffUid);
        v25 = std::__shared_ptr_access<Buff,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Buff,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 112));
        if ( *(_BYTE *)(((unsigned __int64)&buff_config_ptr->server_buff_type >> 3) + 0x7FFF8000) != 0
          && (char)((((_BYTE)buff_config_ptr + 12) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&buff_config_ptr->server_buff_type >> 3)
                                                                         + 0x7FFF8000) )
        {
          __asan_report_load4(&buff_config_ptr->server_buff_type);
        }
        Buff::setBuffType(v25, buff_config_ptr->server_buff_type);
        v26 = std::__shared_ptr_access<Buff,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Buff,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 112));
        if ( Buff::start(v26, *(_DWORD *)(v3 + 64), player_time_ms) )
        {
          common::milog::MiLogStream::create(
            &v59,
            &common::milog::MiLogDefault::default_log_obj_,
            3u,
            "./src/player/avatar/player_avatar_comp.cpp",
            "addTeamBuff",
            5446);
          v27 = common::milog::MiLogStream::operator<<<char [22],(char *[22])0>(
                  &v59,
                  (const char (*)[22])"start fails, buff_id:");
          v28 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                  v27,
                  (const unsigned int *)(v3 + 48));
          if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
            __asan_report_load8(&this->player_);
          operator<<(v28, this->player_);
          common::milog::MiLogStream::~MiLogStream(&v59);
          v8 = -1;
        }
        else
        {
          common::milog::MiLogStream::create(
            &v59,
            &common::milog::MiLogDefault::default_log_obj_,
            1u,
            "./src/player/avatar/player_avatar_comp.cpp",
            "addTeamBuff",
            5450);
          v29 = common::milog::MiLogStream::operator<<<char [21],(char *[21])0>(
                  &v59,
                  (const char (*)[21])"addTeamBuff buff_id:");
          v30 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                  v29,
                  (const unsigned int *)(v3 + 48));
          v31 = common::milog::MiLogStream::operator<<<char [12],(char *[12])0>(v30, (const char (*)[12])" buff_time:");
          v32 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                  v31,
                  (const unsigned int *)(v3 + 64));
          v33 = common::milog::MiLogStream::operator<<<char [9],(char *[9])0>(v32, (const char (*)[9])" player:");
          if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
            __asan_report_load8(&this->player_);
          operator<<(v33, this->player_);
          common::milog::MiLogStream::~MiLogStream(&v59);
          std::multimap<unsigned int,std::shared_ptr<Buff>>::emplace<unsigned int &,std::shared_ptr<Buff>&>(
            &this->avatar_team_buff_mmap_,
            (unsigned int *)(v3 + 48),
            (std::shared_ptr<Buff> *)(v3 + 112),
            (unsigned int *)&this->avatar_team_buff_mmap_,
            v34);
          std::shared_ptr<Buff>::shared_ptr(
            (std::shared_ptr<Buff> *const)(v3 + 144),
            (const std::shared_ptr<Buff> *)(v3 + 112));
          std::function<ForeachPolicy ()(Avatar &)>::function<PlayerAvatarComp::addTeamBuff(unsigned int,unsigned int)::{lambda(Avatar &)#1},void,void>(
            (std::function<ForeachPolicy(Avatar&)> *const)&v59,
            (PlayerAvatarComp::addTeamBuff::<lambda(Avatar&)> *)(v3 + 144));
          PlayerAvatarComp::foreachMyAvatarInSceneTeam(this, (std::function<ForeachPolicy(Avatar&)> *)&v59);
          std::function<ForeachPolicy ()(Avatar &)>::~function((std::function<ForeachPolicy(Avatar&)> *const)&v59);
          PlayerAvatarComp::addTeamBuff(unsigned int,unsigned int)::{lambda(Avatar &)#1}::~Avatar((PlayerAvatarComp::addTeamBuff::<lambda(Avatar&)> *const)(v3 + 144));
          PlayerAvatarComp::checkAvatarBuff(this, player_time_ms);
          if ( std::multimap<unsigned int,std::shared_ptr<Buff>>::size(&this->avatar_team_buff_mmap_) > 0x14 )
          {
            std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream(v3 + 176);
            __for_range = &this->avatar_team_buff_mmap_;
            *(std::multimap<unsigned int,std::shared_ptr<Buff>>::iterator *)(v3 + 80) = std::multimap<unsigned int,std::shared_ptr<Buff>>::begin(&this->avatar_team_buff_mmap_);
            *(std::multimap<unsigned int,std::shared_ptr<Buff>>::iterator *)&__args_0[1] = std::multimap<unsigned int,std::shared_ptr<Buff>>::end(__for_range);
            while ( std::operator!=(
                      (const std::_Rb_tree_iterator<std::pair<unsigned int const,std::shared_ptr<Buff> > >::_Self *)(v3 + 80),
                      (const std::_Rb_tree_iterator<std::pair<unsigned int const,std::shared_ptr<Buff> > >::_Self *)&__args_0[1]) )
            {
              v55 = std::_Rb_tree_iterator<std::pair<unsigned int const,std::shared_ptr<Buff>>>::operator*((const std::_Rb_tree_iterator<std::pair<unsigned int const,std::shared_ptr<Buff> > > *const)(v3 + 80));
              _ = std::get<0ul,unsigned int const,std::shared_ptr<Buff>>(v55);
              buff_ptr = (std::tuple_element<1,const std::pair<unsigned int const,std::shared_ptr<Buff> > >::type *)std::get<1ul,unsigned int const,std::shared_ptr<Buff>>(v55);
              if ( std::operator!=<Buff>(buff_ptr, 0LL) )
              {
                v35 = std::operator<<<std::char_traits<char>>(v3 + 192, "buff_id:");
                v36 = std::__shared_ptr_access<Buff,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Buff,(__gnu_cxx::_Lock_policy)2,false,false> *const)buff_ptr);
                BuffId = Buff::getBuffId(v36);
                v38 = std::ostream::operator<<(v35, BuffId);
                std::operator<<<std::char_traits<char>>(v38, "\n");
              }
              std::_Rb_tree_iterator<std::pair<unsigned int const,std::shared_ptr<Buff>>>::operator++((std::_Rb_tree_iterator<std::pair<unsigned int const,std::shared_ptr<Buff> > > *const)(v3 + 80));
            }
            common::milog::MiLogStream::create(
              &v58,
              &common::milog::MiLogDefault::default_log_obj_,
              3u,
              "./src/player/avatar/player_avatar_comp.cpp",
              "addTeamBuff",
              5475);
            v39 = common::milog::MiLogStream::operator<<<char [26],(char *[26])0>(
                    &v58,
                    (const char (*)[26])off_26043080);
            *(_QWORD *)&__args_0[1] = std::multimap<unsigned int,std::shared_ptr<Buff>>::size(&this->avatar_team_buff_mmap_);
            v40 = common::milog::MiLogStream::operator<<<unsigned long,(unsigned long *)0>(
                    v39,
                    (const unsigned __int64 *)&__args_0[1]);
            v41 = common::milog::MiLogStream::operator<<<char [10],(char *[10])0>(v40, (const char (*)[10])", player:");
            if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
              __asan_report_load8(&this->player_);
            v42 = operator<<(v41, this->player_);
            v43 = common::milog::MiLogStream::operator<<<char [9],(char *[9])0>(v42, (const char (*)[9])"\n buffs:");
            std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::str(&v59, v3 + 176);
            common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v43, (const std::string *)&v59);
            std::string::~string(&v59);
            common::milog::MiLogStream::~MiLogStream(&v58);
            std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream(v3 + 176);
          }
          *(_DWORD *)(v3 + 32) = std::multimap<unsigned int,std::shared_ptr<Buff>>::count(
                                   &this->avatar_team_buff_mmap_,
                                   (const std::multimap<unsigned int,std::shared_ptr<Buff>>::key_type *)(v3 + 48));
          if ( *(_DWORD *)(v3 + 32) > 3u )
          {
            common::milog::MiLogStream::create(
              &v59,
              &common::milog::MiLogDefault::default_log_obj_,
              3u,
              "./src/player/avatar/player_avatar_comp.cpp",
              "addTeamBuff",
              5481);
            v44 = common::milog::MiLogStream::operator<<<char [28],(char *[28])0>(
                    &v59,
                    (const char (*)[28])off_26043140);
            v45 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                    v44,
                    (const unsigned int *)(v3 + 48));
            v46 = common::milog::MiLogStream::operator<<<char [9],(char *[9])0>(v45, (const char (*)[9])", count:");
            v47 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                    v46,
                    (const unsigned int *)(v3 + 32));
            v48 = common::milog::MiLogStream::operator<<<char [10],(char *[10])0>(v47, (const char (*)[10])", player:");
            if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
              __asan_report_load8(&this->player_);
            operator<<(v48, this->player_);
            common::milog::MiLogStream::~MiLogStream(&v59);
          }
          v8 = 0;
        }
      }
    }
    std::shared_ptr<Buff>::~shared_ptr((std::shared_ptr<Buff> *const)(v3 + 112));
    goto LABEL_66;
  }
  v14 = std::_Rb_tree_iterator<std::pair<unsigned int const,std::shared_ptr<Buff>>>::operator->((const std::_Rb_tree_iterator<std::pair<unsigned int const,std::shared_ptr<Buff> > > *const)(v3 + 80));
  std::shared_ptr<Buff>::shared_ptr((std::shared_ptr<Buff> *const)(v3 + 144), &v14->second);
  v15 = std::__shared_ptr_access<Buff,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Buff,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 144));
  if ( Buff::extend(v15, *(_DWORD *)(v3 + 64)) )
  {
    common::milog::MiLogStream::create(
      &v59,
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/player/avatar/player_avatar_comp.cpp",
      "addTeamBuff",
      5409);
    v16 = common::milog::MiLogStream::operator<<<char [28],(char *[28])0>(
            &v59,
            (const char (*)[28])"refreshTime fails, buff_id:");
    v17 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v16, (const unsigned int *)(v3 + 48));
    if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
      __asan_report_load8(&this->player_);
    operator<<(v17, this->player_);
    common::milog::MiLogStream::~MiLogStream(&v59);
    v8 = -1;
  }
  else
  {
    v8 = 0;
  }
  std::shared_ptr<Buff>::~shared_ptr((std::shared_ptr<Buff> *const)(v3 + 144));
LABEL_66:
  result = v8;
  if ( v60 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8010) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8044) = 0LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF804C) = 0;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8020) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8028) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8030) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8038) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8040) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8048) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 5454: range 0000000017196F78-0000000017197015
ForeachPolicy __cdecl PlayerAvatarComp::addTeamBuff(unsigned int,unsigned int)::{lambda(Avatar &)#1}::operator()(
        const PlayerAvatarComp::addTeamBuff::<lambda(Avatar&)> *const __closure,
        Avatar *avatar)
{
  Buff *v2; // rbx
  uint64_t Guid; // rax
  BuffComp *BuffComp; // rbx
  std::shared_ptr<Buff> v6; // [rsp+10h] [rbp-20h] BYREF

  v2 = std::__shared_ptr_access<Buff,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Buff,(__gnu_cxx::_Lock_policy)2,false,false> *const)__closure);
  Guid = Avatar::getGuid(avatar);
  Buff::addOnAddedAvatar(v2, Guid);
  BuffComp = Avatar::getBuffComp(avatar);
  std::shared_ptr<Buff>::shared_ptr(&v6, &__closure->__buff_ptr);
  BuffComp::addBuff(BuffComp, &v6);
  std::shared_ptr<Buff>::~shared_ptr(&v6);
  return 0;
};

// Line 5454: range 00000000171F5102-00000000171F5127
void __cdecl PlayerAvatarComp::addTeamBuff(unsigned int,unsigned int)::{lambda(Avatar &)#1}::Avatar(
        PlayerAvatarComp::addTeamBuff::<lambda(Avatar&)> *const this,
        PlayerAvatarComp::addTeamBuff::<lambda(Avatar&)> *a2)
{
  std::shared_ptr<Buff>::shared_ptr(&this->__buff_ptr, &a2->__buff_ptr);
};

// Line 5454: range 00000000171F51F2-00000000171F5217
void __cdecl PlayerAvatarComp::addTeamBuff(unsigned int,unsigned int)::{lambda(Avatar &)#1}::Avatar(
        PlayerAvatarComp::addTeamBuff::<lambda(Avatar&)> *const this,
        const PlayerAvatarComp::addTeamBuff::<lambda(Avatar&)> *a2)
{
  std::shared_ptr<Buff>::shared_ptr(&this->__buff_ptr, &a2->__buff_ptr);
};

// Line 5454: range 0000000017197016-0000000017197030
void __cdecl PlayerAvatarComp::addTeamBuff(unsigned int,unsigned int)::{lambda(Avatar &)#1}::~Avatar(
        PlayerAvatarComp::addTeamBuff::<lambda(Avatar&)> *const this)
{
  std::shared_ptr<Buff>::~shared_ptr(&this->__buff_ptr);
};

// Line 5487: range 0000000017198236-00000000171986EC
__int64 __fastcall PlayerAvatarComp::delTeamBuff(PlayerAvatarComp *const this, uint32_t buff_id)
{
  unsigned __int64 v2; // r13
  __int64 v3; // rax
  _DWORD *v4; // r12
  common::milog::MiLogStream *v5; // rax
  __int64 result; // rax
  std::_Rb_tree_iterator<std::pair<unsigned int const,std::shared_ptr<Buff> > >::pointer v7; // rax
  common::milog::MiLogStream *v8; // rax
  common::milog::MiLogStream *v9; // rax
  common::milog::MiLogStream *v10; // rcx
  common::milog::MiLogStream *v11; // rax
  common::milog::MiLogStream *v12; // rax
  common::milog::MiLogStream *v13; // rcx
  common::milog::MiLogStream v14; // [rsp+10h] [rbp-E0h] BYREF
  char v15[192]; // [rsp+30h] [rbp-C0h] BYREF

  v2 = (unsigned __int64)v15;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_2(160LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "4 48 4 12 buff_id:5486 64 8 9 iter:5494 96 16 14 iter_pair:5488 128 16 13 buff_ptr:5496";
  *(_QWORD *)(v2 + 16) = PlayerAvatarComp::delTeamBuff;
  v4 = (_DWORD *)(v2 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = -234556943;
  v4[536862722] = -218959360;
  v4[536862723] = -219021312;
  v4[536862724] = -202178560;
  *(_DWORD *)(v2 + 48) = buff_id;
  *(std::pair<std::_Rb_tree_iterator<std::pair<unsigned int const,std::shared_ptr<Buff> > >,std::_Rb_tree_iterator<std::pair<unsigned int const,std::shared_ptr<Buff> > > > *)(v2 + 96) = std::multimap<unsigned int,std::shared_ptr<Buff>>::equal_range(&this->avatar_team_buff_mmap_, (const std::multimap<unsigned int,std::shared_ptr<Buff>>::key_type *)(v2 + 48));
  if ( std::operator==(
         (const std::_Rb_tree_iterator<std::pair<unsigned int const,std::shared_ptr<Buff> > >::_Self *)(v2 + 96),
         (const std::_Rb_tree_iterator<std::pair<unsigned int const,std::shared_ptr<Buff> > >::_Self *)(v2 + 104)) )
  {
    common::milog::MiLogStream::create(
      &v14,
      &common::milog::MiLogDefault::default_log_obj_,
      1u,
      "./src/player/avatar/player_avatar_comp.cpp",
      "delTeamBuff",
      5491);
    v5 = common::milog::MiLogStream::operator<<<char [20],(char *[20])0>(&v14, (const char (*)[20])off_26043260);
    common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v5, (const unsigned int *)(v2 + 48));
    common::milog::MiLogStream::~MiLogStream(&v14);
    result = 0LL;
  }
  else
  {
    *(_QWORD *)(v2 + 64) = *(_QWORD *)(v2 + 96);
    while ( std::operator!=(
              (const std::_Rb_tree_iterator<std::pair<unsigned int const,std::shared_ptr<Buff> > >::_Self *)(v2 + 64),
              (const std::_Rb_tree_iterator<std::pair<unsigned int const,std::shared_ptr<Buff> > >::_Self *)(v2 + 104)) )
    {
      v7 = std::_Rb_tree_iterator<std::pair<unsigned int const,std::shared_ptr<Buff>>>::operator->((const std::_Rb_tree_iterator<std::pair<unsigned int const,std::shared_ptr<Buff> > > *const)(v2 + 64));
      std::shared_ptr<Buff>::shared_ptr((std::shared_ptr<Buff> *const)(v2 + 128), &v7->second);
      *(std::multimap<unsigned int,std::shared_ptr<Buff>>::iterator *)(v2 + 64) = std::multimap<unsigned int,std::shared_ptr<Buff>>::erase[abi:cxx11](
                                                                                    &this->avatar_team_buff_mmap_,
                                                                                    *(std::multimap<unsigned int,std::shared_ptr<Buff>>::iterator *)(v2 + 64));
      if ( std::operator==<Buff>((const std::shared_ptr<Buff> *)(v2 + 128), 0LL) )
      {
        common::milog::MiLogStream::create(
          &v14,
          &common::milog::MiLogDefault::default_log_obj_,
          3u,
          "./src/player/avatar/player_avatar_comp.cpp",
          "delTeamBuff",
          5500);
        v8 = common::milog::MiLogStream::operator<<<char [27],(char *[27])0>(
               &v14,
               (const char (*)[27])"buff_ptr is null, buff_id:");
        v9 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v8, (const unsigned int *)(v2 + 48));
        v10 = common::milog::MiLogStream::operator<<<char [9],(char *[9])0>(v9, (const char (*)[9])" player:");
        if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
          __asan_report_load8(&this->player_);
        operator<<(v10, this->player_);
        common::milog::MiLogStream::~MiLogStream(&v14);
      }
      std::shared_ptr<Buff>::~shared_ptr((std::shared_ptr<Buff> *const)(v2 + 128));
    }
    common::milog::MiLogStream::create(
      &v14,
      &common::milog::MiLogDefault::default_log_obj_,
      1u,
      "./src/player/avatar/player_avatar_comp.cpp",
      "delTeamBuff",
      5503);
    v11 = common::milog::MiLogStream::operator<<<char [22],(char *[22])0>(
            &v14,
            (const char (*)[22])"delTeamBuff buff_id: ");
    v12 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v11, (const unsigned int *)(v2 + 48));
    v13 = common::milog::MiLogStream::operator<<<char [10],(char *[10])0>(v12, (const char (*)[10])", player:");
    if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
      __asan_report_load8(&this->player_);
    operator<<(v13, this->player_);
    common::milog::MiLogStream::~MiLogStream(&v14);
    std::function<ForeachPolicy ()(Avatar &)>::function<PlayerAvatarComp::delTeamBuff(unsigned int)::{lambda(Avatar &)#1},void,void>(
      (std::function<ForeachPolicy(Avatar&)> *const)&v14,
      *(PlayerAvatarComp::delTeamBuff::<lambda(Avatar&)> *)(v2 + 48));
    PlayerAvatarComp::foreachMyAvatarInSceneTeam(this, (std::function<ForeachPolicy(Avatar&)> *)&v14);
    std::function<ForeachPolicy ()(Avatar &)>::~function((std::function<ForeachPolicy(Avatar&)> *const)&v14);
    result = 0LL;
  }
  if ( v15 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8010) = 0;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8010) = -168430091;
  }
  return result;
};

// Line 5504: range 000000001719816C-0000000017198234
ForeachPolicy __cdecl PlayerAvatarComp::delTeamBuff(unsigned int)::{lambda(Avatar &)#1}::operator()(
        const PlayerAvatarComp::delTeamBuff::<lambda(Avatar&)> *const __closure,
        Avatar *avatar)
{
  BuffComp *BuffComp; // rcx
  BuffComp *v3; // rcx

  BuffComp = Avatar::getBuffComp(avatar);
  if ( *(_BYTE *)(((unsigned __int64)__closure >> 3) + 0x7FFF8000) != 0
    && (char)(((unsigned __int8)__closure & 7) + 3) >= *(_BYTE *)(((unsigned __int64)__closure >> 3) + 0x7FFF8000) )
  {
    __asan_report_load4(__closure);
  }
  if ( BuffComp::isHasBuff(BuffComp, __closure->__buff_id) )
  {
    v3 = Avatar::getBuffComp(avatar);
    if ( *(_BYTE *)(((unsigned __int64)__closure >> 3) + 0x7FFF8000) != 0
      && (char)(((unsigned __int8)__closure & 7) + 3) >= *(_BYTE *)(((unsigned __int64)__closure >> 3) + 0x7FFF8000) )
    {
      __asan_report_load4(__closure);
    }
    BuffComp::delBuff(v3, __closure->__buff_id);
  }
  return 0;
};

// Line 5517: range 00000000171986EE-0000000017198A39
void __cdecl PlayerAvatarComp::delAllBuffByGroupId(
        PlayerAvatarComp *const this,
        uint32_t group_id,
        uint32_t except_buff_id)
{
  std::set<unsigned int> *v3; // rbx
  __int64 v4; // rax
  _DWORD *v5; // r12
  std::__shared_ptr_access<Buff,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v6; // rax
  unsigned int *v7; // rax
  uint32_t *v8; // rdx
  std::multimap<unsigned int,std::shared_ptr<Buff>>::iterator __for_begin; // [rsp+18h] [rbp-D8h] BYREF
  std::multimap<unsigned int,std::shared_ptr<Buff>>::iterator __for_end; // [rsp+20h] [rbp-D0h] BYREF
  std::multimap<unsigned int,std::shared_ptr<Buff>> *__for_range; // [rsp+28h] [rbp-C8h]
  std::set<unsigned int> *__for_range_0; // [rsp+30h] [rbp-C0h]
  const std::pair<unsigned int const,std::shared_ptr<Buff> > *v14; // [rsp+38h] [rbp-B8h]
  std::tuple_element<0,const std::pair<unsigned int const,std::shared_ptr<Buff> > >::type *buff_id; // [rsp+40h] [rbp-B0h]
  std::tuple_element<1,const std::pair<unsigned int const,std::shared_ptr<Buff> > >::type *buff_ptr; // [rsp+48h] [rbp-A8h]
  char v17[160]; // [rsp+50h] [rbp-A0h] BYREF

  v3 = (std::set<unsigned int> *)v17;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_1(128LL);
    if ( v4 )
      v3 = (std::set<unsigned int> *)v4;
  }
  *(_QWORD *)v3->_M_t._M_impl.gap0 = 1102416563LL;
  *(_QWORD *)&v3->_M_t._M_impl._M_header._M_color = "1 48 48 23 to_del_buff_id_set:5523";
  v3->_M_t._M_impl._M_header._M_parent = (std::_Rb_tree_node_base::_Base_ptr)PlayerAvatarComp::delAllBuffByGroupId;
  v5 = (_DWORD *)((unsigned __int64)v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = 61937;
  v5[536862723] = -202116109;
  if ( group_id )
  {
    std::set<unsigned int>::set(v3 + 1);
    __for_range = &this->avatar_team_buff_mmap_;
    __for_begin._M_node = std::multimap<unsigned int,std::shared_ptr<Buff>>::begin(&this->avatar_team_buff_mmap_)._M_node;
    __for_end._M_node = std::multimap<unsigned int,std::shared_ptr<Buff>>::end(&this->avatar_team_buff_mmap_)._M_node;
    while ( std::operator!=(&__for_begin, &__for_end) )
    {
      v14 = std::_Rb_tree_iterator<std::pair<unsigned int const,std::shared_ptr<Buff>>>::operator*(&__for_begin);
      buff_id = std::get<0ul,unsigned int const,std::shared_ptr<Buff>>(v14);
      buff_ptr = (std::tuple_element<1,const std::pair<unsigned int const,std::shared_ptr<Buff> > >::type *)std::get<1ul,unsigned int const,std::shared_ptr<Buff>>(v14);
      if ( *(_BYTE *)(((unsigned __int64)buff_id >> 3) + 0x7FFF8000) != 0
        && (char)(((unsigned __int8)buff_id & 7) + 3) >= *(_BYTE *)(((unsigned __int64)buff_id >> 3) + 0x7FFF8000) )
      {
        __asan_report_load4(buff_id);
      }
      if ( except_buff_id != *buff_id )
      {
        v6 = std::__shared_ptr_access<Buff,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Buff,(__gnu_cxx::_Lock_policy)2,false,false> *const)buff_ptr);
        if ( group_id == Buff::getGroupId(v6) )
          std::set<unsigned int>::insert(v3 + 1, buff_id);
      }
      std::_Rb_tree_iterator<std::pair<unsigned int const,std::shared_ptr<Buff>>>::operator++(&__for_begin);
    }
    __for_range_0 = v3 + 1;
    __for_begin._M_node = (std::_Rb_tree_iterator<std::pair<unsigned int const,std::shared_ptr<Buff> > >::_Base_ptr)std::set<unsigned int>::begin(v3 + 1)._M_node;
    __for_end._M_node = (std::_Rb_tree_iterator<std::pair<unsigned int const,std::shared_ptr<Buff> > >::_Base_ptr)std::set<unsigned int>::end(__for_range_0)._M_node;
    while ( std::operator!=(
              (const std::_Rb_tree_const_iterator<unsigned int>::_Self *)&__for_begin,
              (const std::_Rb_tree_const_iterator<unsigned int>::_Self *)&__for_end) )
    {
      v7 = (unsigned int *)std::_Rb_tree_const_iterator<unsigned int>::operator*((const std::_Rb_tree_const_iterator<unsigned int> *const)&__for_begin);
      v8 = v7;
      if ( *(_BYTE *)(((unsigned __int64)v7 >> 3) + 0x7FFF8000) != 0
        && (char)(((unsigned __int8)v7 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)v7 >> 3) + 0x7FFF8000) )
      {
        __asan_report_load4(v7);
      }
      PlayerAvatarComp::delTeamBuff(this, *v8);
      std::_Rb_tree_const_iterator<unsigned int>::operator++((std::_Rb_tree_const_iterator<unsigned int> *const)&__for_begin);
    }
    std::set<unsigned int>::~set(v3 + 1);
  }
  if ( v17 == (char *)v3 )
  {
    *(_QWORD *)(((unsigned __int64)v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_DWORD *)(((unsigned __int64)v3 >> 3) + 0x7FFF800C) = 0;
  }
  else
  {
    *(_QWORD *)v3->_M_t._M_impl.gap0 = 1172321806LL;
    *(_QWORD *)(((unsigned __int64)v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)(((unsigned __int64)v3 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
};

// Line 5542: range 0000000017198A66-0000000017198AD4
void __cdecl PlayerAvatarComp::delAllBuffs(PlayerAvatarComp *const this)
{
  PlayerAvatarComp::delAllBuffs::<lambda(Avatar&)> v1; // si
  std::function<ForeachPolicy(Avatar&)> p_func; // [rsp+20h] [rbp-30h] BYREF

  std::multimap<unsigned int,std::shared_ptr<Buff>>::clear(&this->avatar_team_buff_mmap_);
  std::function<ForeachPolicy ()(Avatar &)>::function<PlayerAvatarComp::delAllBuffs(void)::{lambda(Avatar &)#1},void,void>(
    &p_func,
    v1);
  PlayerAvatarComp::foreachMyAvatarInSceneTeam(this, &p_func);
  std::function<ForeachPolicy ()(Avatar &)>::~function(&p_func);
};

// Line 5544: range 0000000017198A3A-0000000017198A64
ForeachPolicy __cdecl PlayerAvatarComp::delAllBuffs(void)::{lambda(Avatar &)#1}::operator()(
        const PlayerAvatarComp::delAllBuffs::<lambda(Avatar&)> *const __closure,
        Avatar *avatar)
{
  BuffComp *BuffComp; // rax

  BuffComp = Avatar::getBuffComp(avatar);
  BuffComp::delAllBuffs(BuffComp);
  return 0;
};

// Line 5552: range 0000000017198AD6-0000000017198BA7
std::multimap<unsigned int,std::shared_ptr<Buff>>::size_type __fastcall PlayerAvatarComp::getTeamBuffCount(
        const PlayerAvatarComp *const this,
        uint32_t buff_id)
{
  unsigned __int64 v2; // rbx
  __int64 v3; // rax
  unsigned __int64 v4; // r12
  std::multimap<unsigned int,std::shared_ptr<Buff>>::size_type result; // rax
  char v6[96]; // [rsp+10h] [rbp-60h] BYREF

  v2 = (unsigned __int64)v6;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_0(64LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "1 32 4 12 buff_id:5551";
  *(_QWORD *)(v2 + 16) = PlayerAvatarComp::getTeamBuffCount;
  v4 = v2 >> 3;
  *(_DWORD *)(v4 + 2147450880) = -235802127;
  *(_DWORD *)(v4 + 2147450884) = -202116348;
  *(_DWORD *)(v2 + 32) = buff_id;
  result = std::multimap<unsigned int,std::shared_ptr<Buff>>::count(
             &this->avatar_team_buff_mmap_,
             (const std::multimap<unsigned int,std::shared_ptr<Buff>>::key_type *)(v2 + 32));
  if ( v6 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 5557: range 0000000017198BA8-0000000017198D34
int32_t __cdecl PlayerAvatarComp::addAllTeamBuffToAvatar(PlayerAvatarComp *const this, Avatar *avatar)
{
  PlayerBasicComp *BasicComp; // rax
  std::__shared_ptr_access<Buff,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v3; // rax
  BuffComp *BuffComp; // rbx
  std::multimap<unsigned int,std::shared_ptr<Buff>>::iterator __for_begin; // [rsp+18h] [rbp-58h] BYREF
  std::multimap<unsigned int,std::shared_ptr<Buff>>::iterator __for_end; // [rsp+20h] [rbp-50h] BYREF
  uint64_t player_time_ms; // [rsp+28h] [rbp-48h]
  std::multimap<unsigned int,std::shared_ptr<Buff>> *__for_range; // [rsp+30h] [rbp-40h]
  const std::pair<unsigned int const,std::shared_ptr<Buff> > *v11; // [rsp+38h] [rbp-38h]
  std::tuple_element<0,const std::pair<unsigned int const,std::shared_ptr<Buff> > >::type *buff_id; // [rsp+40h] [rbp-30h]
  std::tuple_element<1,const std::pair<unsigned int const,std::shared_ptr<Buff> > >::type *buff_ptr; // [rsp+48h] [rbp-28h]
  std::shared_ptr<Buff> p_buff_ptr; // [rsp+50h] [rbp-20h] BYREF

  if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
    __asan_report_load8(&this->player_);
  BasicComp = Player::getBasicComp(this->player_);
  player_time_ms = PlayerBasicComp::getPlayerTimeMs(BasicComp);
  __for_range = &this->avatar_team_buff_mmap_;
  __for_begin._M_node = std::multimap<unsigned int,std::shared_ptr<Buff>>::begin(&this->avatar_team_buff_mmap_)._M_node;
  __for_end._M_node = std::multimap<unsigned int,std::shared_ptr<Buff>>::end(&this->avatar_team_buff_mmap_)._M_node;
  while ( std::operator!=(&__for_begin, &__for_end) )
  {
    v11 = std::_Rb_tree_iterator<std::pair<unsigned int const,std::shared_ptr<Buff>>>::operator*(&__for_begin);
    buff_id = std::get<0ul,unsigned int const,std::shared_ptr<Buff>>(v11);
    buff_ptr = (std::tuple_element<1,const std::pair<unsigned int const,std::shared_ptr<Buff> > >::type *)std::get<1ul,unsigned int const,std::shared_ptr<Buff>>(v11);
    if ( !std::operator==<Buff>(buff_ptr, 0LL) )
    {
      v3 = std::__shared_ptr_access<Buff,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Buff,(__gnu_cxx::_Lock_policy)2,false,false> *const)buff_ptr);
      if ( !Buff::isExpired(v3, player_time_ms) )
      {
        BuffComp = Avatar::getBuffComp(avatar);
        std::shared_ptr<Buff>::shared_ptr(&p_buff_ptr, buff_ptr);
        BuffComp::addBuff(BuffComp, &p_buff_ptr);
        std::shared_ptr<Buff>::~shared_ptr(&p_buff_ptr);
      }
    }
    std::_Rb_tree_iterator<std::pair<unsigned int const,std::shared_ptr<Buff>>>::operator++(&__for_begin);
  }
  return 0;
};

// Line 5571: range 0000000017198D36-0000000017199033
int32_t __cdecl PlayerAvatarComp::delAllTeamBuffFromAvatar(PlayerAvatarComp *const this, Avatar *avatar)
{
  std::set<unsigned int> *v2; // rbx
  __int64 v3; // rax
  _DWORD *v4; // r12
  unsigned int *v5; // rax
  uint32_t *v6; // rdx
  BuffComp *BuffComp; // rax
  int32_t result; // eax
  uint32_t buff_id_0; // [rsp+14h] [rbp-ECh]
  std::multimap<unsigned int,std::shared_ptr<Buff>>::iterator __for_begin; // [rsp+18h] [rbp-E8h] BYREF
  std::multimap<unsigned int,std::shared_ptr<Buff>>::iterator __for_end; // [rsp+20h] [rbp-E0h] BYREF
  std::multimap<unsigned int,std::shared_ptr<Buff>> *__for_range; // [rsp+28h] [rbp-D8h]
  std::set<unsigned int> *__for_range_0; // [rsp+30h] [rbp-D0h]
  const std::pair<unsigned int const,std::shared_ptr<Buff> > *v14; // [rsp+38h] [rbp-C8h]
  std::tuple_element<0,const std::pair<unsigned int const,std::shared_ptr<Buff> > >::type *buff_id; // [rsp+40h] [rbp-C0h]
  std::tuple_element<1,const std::pair<unsigned int const,std::shared_ptr<Buff> > >::type *buff_ptr; // [rsp+48h] [rbp-B8h]
  char v17[176]; // [rsp+50h] [rbp-B0h] BYREF

  v2 = (std::set<unsigned int> *)v17;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_1(128LL);
    if ( v3 )
      v2 = (std::set<unsigned int> *)v3;
  }
  *(_QWORD *)v2->_M_t._M_impl.gap0 = 1102416563LL;
  *(_QWORD *)&v2->_M_t._M_impl._M_header._M_color = "1 48 48 23 to_del_buff_id_set:5572";
  v2->_M_t._M_impl._M_header._M_parent = (std::_Rb_tree_node_base::_Base_ptr)PlayerAvatarComp::delAllTeamBuffFromAvatar;
  v4 = (_DWORD *)((unsigned __int64)v2 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = 61937;
  v4[536862723] = -202116109;
  std::set<unsigned int>::set(v2 + 1);
  __for_range = &this->avatar_team_buff_mmap_;
  __for_begin._M_node = std::multimap<unsigned int,std::shared_ptr<Buff>>::begin(&this->avatar_team_buff_mmap_)._M_node;
  __for_end._M_node = std::multimap<unsigned int,std::shared_ptr<Buff>>::end(&this->avatar_team_buff_mmap_)._M_node;
  while ( std::operator!=(&__for_begin, &__for_end) )
  {
    v14 = std::_Rb_tree_iterator<std::pair<unsigned int const,std::shared_ptr<Buff>>>::operator*(&__for_begin);
    buff_id = std::get<0ul,unsigned int const,std::shared_ptr<Buff>>(v14);
    buff_ptr = (std::tuple_element<1,const std::pair<unsigned int const,std::shared_ptr<Buff> > >::type *)std::get<1ul,unsigned int const,std::shared_ptr<Buff>>(v14);
    if ( !std::operator==<Buff>(buff_ptr, 0LL) )
      std::set<unsigned int>::insert(v2 + 1, buff_id);
    std::_Rb_tree_iterator<std::pair<unsigned int const,std::shared_ptr<Buff>>>::operator++(&__for_begin);
  }
  __for_range_0 = v2 + 1;
  __for_begin._M_node = (std::_Rb_tree_iterator<std::pair<unsigned int const,std::shared_ptr<Buff> > >::_Base_ptr)std::set<unsigned int>::begin(v2 + 1)._M_node;
  __for_end._M_node = (std::_Rb_tree_iterator<std::pair<unsigned int const,std::shared_ptr<Buff> > >::_Base_ptr)std::set<unsigned int>::end(__for_range_0)._M_node;
  while ( std::operator!=(
            (const std::_Rb_tree_const_iterator<unsigned int>::_Self *)&__for_begin,
            (const std::_Rb_tree_const_iterator<unsigned int>::_Self *)&__for_end) )
  {
    v5 = (unsigned int *)std::_Rb_tree_const_iterator<unsigned int>::operator*((const std::_Rb_tree_const_iterator<unsigned int> *const)&__for_begin);
    v6 = v5;
    if ( *(_BYTE *)(((unsigned __int64)v5 >> 3) + 0x7FFF8000) != 0
      && (char)(((unsigned __int8)v5 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)v5 >> 3) + 0x7FFF8000) )
    {
      __asan_report_load4(v5);
    }
    buff_id_0 = *v6;
    BuffComp = Avatar::getBuffComp(avatar);
    BuffComp::delBuff(BuffComp, buff_id_0);
    std::_Rb_tree_const_iterator<unsigned int>::operator++((std::_Rb_tree_const_iterator<unsigned int> *const)&__for_begin);
  }
  std::set<unsigned int>::~set(v2 + 1);
  result = 0;
  if ( v17 == (char *)v2 )
  {
    *(_QWORD *)(((unsigned __int64)v2 >> 3) + 0x7FFF8000) = 0LL;
    *(_DWORD *)(((unsigned __int64)v2 >> 3) + 0x7FFF800C) = 0;
  }
  else
  {
    *(_QWORD *)v2->_M_t._M_impl.gap0 = 1172321806LL;
    *(_QWORD *)(((unsigned __int64)v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)(((unsigned __int64)v2 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 5589: range 000000001719925C-0000000017199442
void __cdecl PlayerAvatarComp::tryRecoverAllTeamBuff(PlayerAvatarComp *const this)
{
  __int64 v1; // rsi
  PlayerBasicComp *BasicComp; // rax
  Buff *v3; // rax
  std::multimap<unsigned int,std::shared_ptr<Buff>>::iterator __for_begin; // [rsp+18h] [rbp-68h] BYREF
  std::multimap<unsigned int,std::shared_ptr<Buff>>::iterator __for_end; // [rsp+20h] [rbp-60h] BYREF
  uint64_t player_time_ms; // [rsp+28h] [rbp-58h]
  std::multimap<unsigned int,std::shared_ptr<Buff>> *__for_range; // [rsp+30h] [rbp-50h]
  std::pair<unsigned int const,std::shared_ptr<Buff> > *__in; // [rsp+38h] [rbp-48h]
  std::tuple_element<0,std::pair<unsigned int const,std::shared_ptr<Buff> > >::type *buff_id; // [rsp+40h] [rbp-40h]
  std::tuple_element<1,std::pair<unsigned int const,std::shared_ptr<Buff> > >::type *buff_ptr; // [rsp+48h] [rbp-38h]
  std::function<ForeachPolicy(Avatar&)> p_func; // [rsp+50h] [rbp-30h] BYREF

  if ( *(char *)(((unsigned __int64)&this->is_team_buff_recovered_ >> 3) + 0x7FFF8000) < 0 )
    __asan_report_load1(&this->is_team_buff_recovered_);
  if ( !this->is_team_buff_recovered_ )
  {
    if ( *(char *)(((unsigned __int64)&this->is_team_buff_recovered_ >> 3) + 0x7FFF8000) < 0 )
      __asan_report_store1(&this->is_team_buff_recovered_, v1, &this->is_team_buff_recovered_);
    this->is_team_buff_recovered_ = 1;
    if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
      __asan_report_load8(&this->player_);
    BasicComp = Player::getBasicComp(this->player_);
    player_time_ms = PlayerBasicComp::getPlayerTimeMs(BasicComp);
    __for_range = &this->avatar_team_buff_mmap_;
    __for_begin._M_node = std::multimap<unsigned int,std::shared_ptr<Buff>>::begin(&this->avatar_team_buff_mmap_)._M_node;
    __for_end._M_node = std::multimap<unsigned int,std::shared_ptr<Buff>>::end(&this->avatar_team_buff_mmap_)._M_node;
    while ( std::operator!=(&__for_begin, &__for_end) )
    {
      __in = std::_Rb_tree_iterator<std::pair<unsigned int const,std::shared_ptr<Buff>>>::operator*(&__for_begin);
      buff_id = std::get<0ul,unsigned int const,std::shared_ptr<Buff>>(__in);
      buff_ptr = std::get<1ul,unsigned int const,std::shared_ptr<Buff>>(__in);
      if ( std::operator!=<Buff>(buff_ptr, 0LL) )
      {
        v3 = std::__shared_ptr_access<Buff,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Buff,(__gnu_cxx::_Lock_policy)2,false,false> *const)buff_ptr);
        Buff::recover(v3, player_time_ms);
      }
      std::_Rb_tree_iterator<std::pair<unsigned int const,std::shared_ptr<Buff>>>::operator++(&__for_begin);
    }
    std::function<ForeachPolicy ()(Avatar &)>::function<PlayerAvatarComp::tryRecoverAllTeamBuff(void)::{lambda(Avatar &)#1},void,void>(
      &p_func,
      (PlayerAvatarComp::tryRecoverAllTeamBuff::<lambda(Avatar&)>)this);
    PlayerAvatarComp::foreachMyAvatarInSceneTeam(this, &p_func);
    std::function<ForeachPolicy ()(Avatar &)>::~function(&p_func);
  }
};

// Line 5604: range 0000000017199034-000000001719925A
ForeachPolicy __cdecl PlayerAvatarComp::tryRecoverAllTeamBuff(void)::{lambda(Avatar &)#1}::operator()(
        const PlayerAvatarComp::tryRecoverAllTeamBuff::<lambda(Avatar&)> *const __closure,
        Avatar *avatar)
{
  PlayerAvatarComp *this; // rax
  PlayerBasicComp *BasicComp; // rax
  std::__shared_ptr_access<Buff,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v4; // rax
  BuffComp *BuffComp; // rbx
  std::__shared_ptr_access<Buff,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v7; // rax
  uint32_t BuffUid; // r12d
  std::__shared_ptr_access<Buff,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v9; // rax
  uint32_t BuffId; // eax
  BuffComp *v11; // rbx
  std::multimap<unsigned int,std::shared_ptr<Buff>>::iterator __for_begin; // [rsp+18h] [rbp-58h] BYREF
  std::multimap<unsigned int,std::shared_ptr<Buff>>::iterator __for_end; // [rsp+20h] [rbp-50h] BYREF
  uint64_t player_time_ms; // [rsp+28h] [rbp-48h]
  std::multimap<unsigned int,std::shared_ptr<Buff>> *__for_range; // [rsp+30h] [rbp-40h]
  const std::pair<unsigned int const,std::shared_ptr<Buff> > *v17; // [rsp+38h] [rbp-38h]
  std::tuple_element<0,const std::pair<unsigned int const,std::shared_ptr<Buff> > >::type *buff_id; // [rsp+40h] [rbp-30h]
  std::tuple_element<1,const std::pair<unsigned int const,std::shared_ptr<Buff> > >::type *buff_ptr; // [rsp+48h] [rbp-28h]
  std::shared_ptr<Buff> p_buff_ptr; // [rsp+50h] [rbp-20h] BYREF

  if ( *(_BYTE *)(((unsigned __int64)__closure >> 3) + 0x7FFF8000) )
    __asan_report_load8(__closure);
  this = __closure->__this;
  if ( *(_BYTE *)(((unsigned __int64)&__closure->__this->player_ >> 3) + 0x7FFF8000) )
    this = (PlayerAvatarComp *)__asan_report_load8(&__closure->__this->player_);
  BasicComp = Player::getBasicComp(this->player_);
  player_time_ms = PlayerBasicComp::getPlayerTimeMs(BasicComp);
  if ( *(_BYTE *)(((unsigned __int64)__closure >> 3) + 0x7FFF8000) )
    __asan_report_load8(__closure);
  __for_range = &__closure->__this->avatar_team_buff_mmap_;
  __for_begin._M_node = std::multimap<unsigned int,std::shared_ptr<Buff>>::begin(__for_range)._M_node;
  __for_end._M_node = std::multimap<unsigned int,std::shared_ptr<Buff>>::end(__for_range)._M_node;
  while ( std::operator!=(&__for_begin, &__for_end) )
  {
    v17 = std::_Rb_tree_iterator<std::pair<unsigned int const,std::shared_ptr<Buff>>>::operator*(&__for_begin);
    buff_id = std::get<0ul,unsigned int const,std::shared_ptr<Buff>>(v17);
    buff_ptr = (std::tuple_element<1,const std::pair<unsigned int const,std::shared_ptr<Buff> > >::type *)std::get<1ul,unsigned int const,std::shared_ptr<Buff>>(v17);
    if ( !std::operator==<Buff>(buff_ptr, 0LL) )
    {
      v4 = std::__shared_ptr_access<Buff,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Buff,(__gnu_cxx::_Lock_policy)2,false,false> *const)buff_ptr);
      if ( !Buff::isExpired(v4, player_time_ms) )
      {
        BuffComp = Avatar::getBuffComp(avatar);
        v7 = std::__shared_ptr_access<Buff,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Buff,(__gnu_cxx::_Lock_policy)2,false,false> *const)buff_ptr);
        BuffUid = Buff::getBuffUid(v7);
        v9 = std::__shared_ptr_access<Buff,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Buff,(__gnu_cxx::_Lock_policy)2,false,false> *const)buff_ptr);
        BuffId = Buff::getBuffId(v9);
        if ( !BuffComp::isHasBuff(BuffComp, BuffId, BuffUid) )
        {
          v11 = Avatar::getBuffComp(avatar);
          std::shared_ptr<Buff>::shared_ptr(&p_buff_ptr, buff_ptr);
          BuffComp::addBuff(v11, &p_buff_ptr);
          std::shared_ptr<Buff>::~shared_ptr(&p_buff_ptr);
        }
      }
    }
    std::_Rb_tree_iterator<std::pair<unsigned int const,std::shared_ptr<Buff>>>::operator++(&__for_begin);
  }
  return 0;
};

// Line 5625: range 0000000017199444-000000001719983E
std::string *__cdecl PlayerAvatarComp::getSbuffInfoByGm[abi:cxx11](
        std::string *retstr,
        const PlayerAvatarComp *const this)
{
  unsigned __int64 v2; // r12
  __int64 v3; // rax
  _DWORD *v4; // rbx
  bool is_first; // [rsp+1Fh] [rbp-271h]
  std::multimap<unsigned int,std::shared_ptr<Buff>>::const_iterator __for_begin; // [rsp+20h] [rbp-270h] BYREF
  std::multimap<unsigned int,std::shared_ptr<Buff>>::const_iterator __for_end; // [rsp+28h] [rbp-268h] BYREF
  const std::multimap<unsigned int,std::shared_ptr<Buff>> *__for_range; // [rsp+30h] [rbp-260h]
  const std::pair<unsigned int const,std::shared_ptr<Buff> > *v10; // [rsp+38h] [rbp-258h]
  std::tuple_element<0,const std::pair<unsigned int const,std::shared_ptr<Buff> > >::type *sbuff_id; // [rsp+40h] [rbp-250h]
  std::tuple_element<1,const std::pair<unsigned int const,std::shared_ptr<Buff> > >::type *_; // [rsp+48h] [rbp-248h]
  common::milog::MiLogStream v13; // [rsp+50h] [rbp-240h] BYREF
  char v14[544]; // [rsp+70h] [rbp-220h] BYREF

  v2 = (unsigned __int64)v14;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_3(512LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "1 48 392 7 ss:5626";
  *(_QWORD *)(v2 + 16) = PlayerAvatarComp::getSbuffInfoByGm[abi:cxx11];
  v4 = (_DWORD *)(v2 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = 61937;
  v4[536862733] = -218103808;
  v4[536862734] = -202116109;
  v4[536862735] = -202116109;
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream(v2 + 48);
  std::operator<<<std::char_traits<char>>(v2 + 64, "{");
  is_first = 1;
  __for_range = &this->avatar_team_buff_mmap_;
  __for_begin._M_node = std::multimap<unsigned int,std::shared_ptr<Buff>>::begin(&this->avatar_team_buff_mmap_)._M_node;
  __for_end._M_node = std::multimap<unsigned int,std::shared_ptr<Buff>>::end(&this->avatar_team_buff_mmap_)._M_node;
  while ( std::operator!=(&__for_begin, &__for_end) )
  {
    v10 = std::_Rb_tree_const_iterator<std::pair<unsigned int const,std::shared_ptr<Buff>>>::operator*(&__for_begin);
    sbuff_id = std::get<0ul,unsigned int const,std::shared_ptr<Buff>>(v10);
    _ = (std::tuple_element<1,const std::pair<unsigned int const,std::shared_ptr<Buff> > >::type *)std::get<1ul,unsigned int const,std::shared_ptr<Buff>>(v10);
    if ( !is_first )
      std::operator<<<std::char_traits<char>>(v2 + 64, ",");
    is_first = 0;
    if ( *(_BYTE *)(((unsigned __int64)sbuff_id >> 3) + 0x7FFF8000) != 0
      && (char)(((unsigned __int8)sbuff_id & 7) + 3) >= *(_BYTE *)(((unsigned __int64)sbuff_id >> 3) + 0x7FFF8000) )
    {
      __asan_report_load4(sbuff_id);
    }
    std::ostream::operator<<(v2 + 64, *sbuff_id);
    std::_Rb_tree_const_iterator<std::pair<unsigned int const,std::shared_ptr<Buff>>>::operator++(&__for_begin);
  }
  std::operator<<<std::char_traits<char>>(v2 + 64, "}");
  if ( *(char *)(((unsigned __int64)retstr >> 3) + 0x7FFF8000) < 0
    || *(_BYTE *)((((unsigned __int64)&retstr->_anon_0._M_allocated_capacity + 15) >> 3) + 0x7FFF8000) != 0
    && (((unsigned __int8)retstr + 31) & 7) >= *(_BYTE *)((((unsigned __int64)&retstr->_anon_0._M_allocated_capacity + 15) >> 3)
                                                        + 0x7FFF8000) )
  {
    __asan_report_store_n(retstr, 32LL);
  }
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::str(retstr, v2 + 48);
  common::milog::MiLogStream::create(
    &v13,
    &common::milog::MiLogDefault::default_log_obj_,
    1u,
    "./src/player/avatar/player_avatar_comp.cpp",
    "getSbuffInfoByGm",
    5637);
  common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(&v13, retstr);
  common::milog::MiLogStream::~MiLogStream(&v13);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream(v2 + 48);
  if ( v14 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8034) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF803C) = 0;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8020) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8028) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8030) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8038) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return retstr;
};

// Line 5643: range 0000000017199840-00000000171998A2
void __cdecl PlayerAvatarComp::setIsAllowUseSkill(PlayerAvatarComp *const this, bool is_allow_use_skill)
{
  __int64 v2; // rsi
  __int64 v3; // rdx

  v2 = ((_BYTE)this + 115) & 7;
  v3 = (*(_BYTE *)(((unsigned __int64)&this->is_allow_use_skill_ >> 3) + 0x7FFF8000) != 0) & (unsigned __int8)((char)v2 >= *(_BYTE *)(((unsigned __int64)&this->is_allow_use_skill_ >> 3) + 0x7FFF8000));
  if ( (_BYTE)v3 )
    __asan_report_store1(&this->is_allow_use_skill_, v2, v3);
  this->is_allow_use_skill_ = is_allow_use_skill;
  PlayerAvatarComp::notifyAllowUseSkill(this);
};

// Line 5649: range 00000000171998A4-0000000017199A4E
void __cdecl PlayerAvatarComp::notifyAllowUseSkill(PlayerAvatarComp *const this)
{
  unsigned __int64 v1; // rbx
  __int64 v2; // rax
  _DWORD *v3; // r12
  char v4[128]; // [rsp+10h] [rbp-80h] BYREF

  v1 = (unsigned __int64)v4;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_1(96LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "1 32 24 11 notify:5650";
  *(_QWORD *)(v1 + 16) = PlayerAvatarComp::notifyAllowUseSkill;
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -218103808;
  v3[536862722] = -202116109;
  proto::CanUseSkillNotify::CanUseSkillNotify((proto::CanUseSkillNotify *const)(v1 + 32));
  if ( *(_BYTE *)(((unsigned __int64)&this->is_allow_use_skill_ >> 3) + 0x7FFF8000) != 0
    && (((unsigned __int8)this + 115) & 7) >= *(_BYTE *)(((unsigned __int64)&this->is_allow_use_skill_ >> 3) + 0x7FFF8000) )
  {
    __asan_report_load1(&this->is_allow_use_skill_);
  }
  proto::CanUseSkillNotify::set_is_can_use_skill((proto::CanUseSkillNotify *const)(v1 + 32), this->is_allow_use_skill_);
  if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
    __asan_report_load8(&this->player_);
  Player::sendProto(this->player_, (const google::protobuf::Message *)(v1 + 32));
  proto::CanUseSkillNotify::~CanUseSkillNotify((proto::CanUseSkillNotify *const)(v1 + 32));
  if ( v4 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_DWORD *)((v1 >> 3) + 0x7FFF8008) = 0;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v1 >> 3) + 0x7FFF8008) = -168430091;
  }
};

// Line 5657: range 0000000017199A50-000000001719AFB2
__int64 __fastcall PlayerAvatarComp::checkMoveSpeed(
        PlayerAvatarComp *const this,
        const Entity *avatar,
        proto::MotionState motion_state,
        unsigned __int64 pos)
{
  unsigned __int64 v4; // r13
  __int64 v5; // rax
  _DWORD *v6; // r12
  std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v7; // rax
  bool v8; // r14
  __int64 result; // rax
  ConstValueExcelConfigMgr *p_const_value_config_mgr; // rcx
  std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v11; // rax
  bool v12; // r14
  __int64 v13; // rdx
  PlayerSceneComp *SceneComp; // rax
  PlayerSceneComp *v15; // rax
  __int64 v16; // rcx
  uint64_t *v17; // rax
  __m128i v18; // xmm1
  float v19; // xmm0_4
  __m128i v20; // xmm0
  ConstValueExcelConfigMgr *v21; // rcx
  common::milog::MiLogStream *v22; // rax
  common::milog::MiLogStream *v23; // rax
  common::milog::MiLogStream *v24; // rax
  common::milog::MiLogStream *v25; // rax
  common::milog::MiLogStream *v26; // rax
  common::milog::MiLogStream *v27; // rax
  common::milog::MiLogStream *v28; // rax
  common::milog::MiLogStream *v29; // rax
  common::milog::MiLogStream *v30; // rax
  std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v31; // rdx
  std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v32; // rdx
  uint32_t AvatarId; // eax
  std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v34; // rax
  std::__shared_ptr_access<proto_log::AntiCheatBodyMoveSpeedOverLimit,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v35; // rax
  std::__shared_ptr_access<proto_log::AntiCheatBodyMoveSpeedOverLimit,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v36; // rcx
  std::__shared_ptr_access<proto_log::AntiCheatBodyMoveSpeedOverLimit,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v37; // rax
  std::__shared_ptr_access<proto_log::AntiCheatBodyMoveSpeedOverLimit,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v38; // rax
  std::__shared_ptr_access<proto_log::AntiCheatBodyMoveSpeedOverLimit,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v39; // rcx
  std::__shared_ptr_access<proto_log::AntiCheatBodyMoveSpeedOverLimit,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v40; // rcx
  std::__shared_ptr_access<proto_log::AntiCheatBodyMoveSpeedOverLimit,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v41; // rcx
  std::__shared_ptr_access<proto_log::AntiCheatBodyMoveSpeedOverLimit,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v42; // rcx
  std::__shared_ptr_access<proto_log::AntiCheatBodyMoveSpeedOverLimit,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v43; // rcx
  std::__shared_ptr_access<proto_log::AntiCheatBodyMoveSpeedOverLimit,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v44; // rcx
  std::__shared_ptr_access<proto_log::AntiCheatBodyMoveSpeedOverLimit,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v45; // rcx
  std::__shared_ptr_access<proto_log::AntiCheatBodyMoveSpeedOverLimit,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v46; // rcx
  std::__shared_ptr_access<proto_log::AntiCheatBodyMoveSpeedOverLimit,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v47; // rcx
  std::__shared_ptr_access<proto_log::AntiCheatBodyMoveSpeedOverLimit,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v48; // rax
  std::__shared_ptr_access<proto_log::AntiCheatBodyMoveSpeedOverLimit,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v49; // rax
  std::__shared_ptr_access<proto_log::AntiCheatBodyMoveSpeedOverLimit,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v50; // rax
  std::__shared_ptr_access<proto_log::AntiCheatBodyMoveSpeedOverLimit,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v51; // rax
  std::__shared_ptr_access<proto_log::AntiCheatBodyMoveSpeedOverLimit,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v52; // r14
  std::__shared_ptr_access<proto_log::AntiCheatBodyMoveSpeedOverLimit,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v53; // rax
  google::protobuf::uint32 v54; // eax
  PlayerSceneComp *v55; // rax
  uint64_t v56; // rdx
  uint64_t last_check_move_speed_time_ms; // r14
  GameserverService *v58; // rsi
  std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v59; // rax
  uint64_t v60; // rdx
  unsigned __int64 Position; // rax
  __int64 v62; // rdx
  float MoveSpeedLimit; // [rsp+8h] [rbp-148h]
  bool is_kick_out; // [rsp+22h] [rbp-12Eh]
  bool is_drag_back; // [rsp+23h] [rbp-12Dh]
  uint32_t move_type; // [rsp+24h] [rbp-12Ch]
  unsigned int ret; // [rsp+28h] [rbp-128h]
  uint32_t avatar_id; // [rsp+2Ch] [rbp-124h]
  unsigned __int64 __a; // [rsp+30h] [rbp-120h] BYREF
  unsigned __int64 __b; // [rsp+38h] [rbp-118h] BYREF
  uint64_t diff_ms; // [rsp+40h] [rbp-110h]
  std::shared_ptr<proto_log::AntiCheatBodyMoveSpeedOverLimit> *log_ptr; // [rsp+48h] [rbp-108h]
  std::shared_ptr<Config> v76; // [rsp+50h] [rbp-100h] BYREF
  common::milog::MiLogStream v77; // [rsp+60h] [rbp-F0h] BYREF
  char v78[208]; // [rsp+80h] [rbp-D0h] BYREF

  v4 = (unsigned __int64)v78;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v5 = __asan_stack_malloc_2(160LL);
    if ( v5 )
      v4 = v5;
  }
  *(_QWORD *)v4 = 1102416563LL;
  *(_QWORD *)(v4 + 8) = "5 48 4 10 speed:5734 64 4 16 speed_limit:5735 80 4 17 motion_state:5656 96 8 11 now_ms:5717 128 "
                        "16 15 avatar_ptr:5749";
  *(_QWORD *)(v4 + 16) = PlayerAvatarComp::checkMoveSpeed;
  v6 = (_DWORD *)(v4 >> 3);
  v6[536862720] = -235802127;
  v6[536862721] = -234556943;
  v6[536862722] = -234556924;
  v6[536862723] = -218959360;
  v6[536862724] = -202178560;
  *(_DWORD *)(v4 + 80) = motion_state;
  ServiceBox::findService<GameserverService>();
  GameserverService::getConfig((GameserverService *const)&v76);
  v7 = std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false> *const)&v76);
  if ( *(char *)(((unsigned __int64)&v7->security_config.is_move_speed_check_open >> 3) + 0x7FFF8000) < 0 )
    v7 = (std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *)__asan_report_load1(&v7->security_config.is_move_speed_check_open);
  v8 = !v7->security_config.is_move_speed_check_open;
  std::shared_ptr<Config>::~shared_ptr(&v76);
  if ( v8 )
  {
    result = 0LL;
  }
  else
  {
    if ( *(_BYTE *)(((unsigned __int64)&this->total_move_count_ >> 3) + 0x7FFF8000) != 0
      && *(_BYTE *)(((unsigned __int64)&this->total_move_count_ >> 3) + 0x7FFF8000) <= 3 )
    {
      __asan_report_load4(&this->total_move_count_);
    }
    ++this->total_move_count_;
    move_type = 0;
    switch ( *(_DWORD *)(v4 + 80) )
    {
      case 6:
      case 0x21:
        move_type = 1;
        goto LABEL_20;
      case 0xD:
        move_type = 3;
        goto LABEL_20;
      case 0xE:
      case 0xF:
      case 0x10:
      case 0x11:
        move_type = 2;
        goto LABEL_20;
      case 0x17:
        move_type = 4;
        goto LABEL_20;
      case 0x2B:
      case 0x2C:
        PlayerAvatarComp::resetMoveSpeedCheck(this);
        if ( *(_BYTE *)(((unsigned __int64)&this->force_drag_move_count_ >> 3) + 0x7FFF8000) != 0
          && (char)((((_BYTE)this + 76) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&this->force_drag_move_count_ >> 3)
                                                              + 0x7FFF8000) )
        {
          __asan_report_load4(&this->force_drag_move_count_);
        }
        ++this->force_drag_move_count_;
        result = 0LL;
        break;
      case 0x30:
        move_type = 5;
        goto LABEL_20;
      case 0x31:
        move_type = 6;
        goto LABEL_20;
      default:
LABEL_20:
        ServiceBox::findService<GameserverService>();
        GameserverService::getConfig((GameserverService *const)(v4 + 128));
        p_const_value_config_mgr = &std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 128))->design_config.txt_config_mgr.const_value_config_mgr;
        if ( *(_BYTE *)(((unsigned __int64)&this->last_check_fastest_move_type_ >> 3) + 0x7FFF8000) != 0
          && (char)((((_BYTE)this + 52) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&this->last_check_fastest_move_type_ >> 3)
                                                              + 0x7FFF8000) )
        {
          __asan_report_load4(&this->last_check_fastest_move_type_);
        }
        MoveSpeedLimit = ConstValueExcelConfigMgr::getMoveSpeedLimit(
                           p_const_value_config_mgr,
                           this->last_check_fastest_move_type_);
        ServiceBox::findService<GameserverService>();
        GameserverService::getConfig((GameserverService *const)&v76);
        v11 = std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false> *const)&v76);
        v12 = ConstValueExcelConfigMgr::getMoveSpeedLimit(
                &v11->design_config.txt_config_mgr.const_value_config_mgr,
                move_type) > MoveSpeedLimit;
        std::shared_ptr<Config>::~shared_ptr(&v76);
        std::shared_ptr<Config>::~shared_ptr((std::shared_ptr<Config> *const)(v4 + 128));
        if ( v12 )
        {
          v13 = (*(_BYTE *)(((unsigned __int64)&this->last_check_fastest_move_type_ >> 3) + 0x7FFF8000) != 0) & (unsigned __int8)((char)((((_BYTE)this + 52) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&this->last_check_fastest_move_type_ >> 3) + 0x7FFF8000));
          if ( (_BYTE)v13 )
            __asan_report_store4(&this->last_check_fastest_move_type_, (((_BYTE)this + 52) & 7u) + 3, v13);
          this->last_check_fastest_move_type_ = move_type;
        }
        *(_QWORD *)(v4 + 96) = common::tools::TimeUtils::getNowMs();
        if ( *(_BYTE *)(((unsigned __int64)&this->last_check_move_speed_time_ms_ >> 3) + 0x7FFF8000) )
          __asan_report_load8(&this->last_check_move_speed_time_ms_);
        if ( this->last_check_move_speed_time_ms_ )
        {
          ret = 0;
          if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
            __asan_report_load8(&this->player_);
          SceneComp = Player::getSceneComp(this->player_);
          if ( !PlayerSceneComp::isInTransfer(SceneComp) )
          {
            if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
              __asan_report_load8(&this->player_);
            v15 = Player::getSceneComp(this->player_);
            if ( !PlayerSceneComp::getIsHasTransferMarkForSpeedCheck(v15) )
            {
              v16 = *(_QWORD *)(v4 + 96);
              if ( *(_BYTE *)(((unsigned __int64)&this->last_check_move_speed_time_ms_ >> 3) + 0x7FFF8000) )
                __asan_report_load8(&this->last_check_move_speed_time_ms_);
              __b = v16 - this->last_check_move_speed_time_ms_;
              __a = 1000LL;
              v17 = (uint64_t *)std::max<unsigned long>(&__a, &__b);
              if ( *(_BYTE *)(((unsigned __int64)v17 >> 3) + 0x7FFF8000) )
                v17 = (uint64_t *)__asan_report_load8(v17);
              diff_ms = *v17;
              v18 = (__m128i)0x447A0000u;
              *(float *)v18.m128i_i32 = 1000.0
                                      * getPlaneDistance((const Vector3 *)pos, &this->last_check_move_speed_pos_);
              if ( (diff_ms & 0x8000000000000000LL) != 0LL )
                v19 = (float)(int)(diff_ms & 1 | (diff_ms >> 1)) + (float)(int)(diff_ms & 1 | (diff_ms >> 1));
              else
                v19 = (float)(int)diff_ms;
              *(float *)v18.m128i_i32 = *(float *)v18.m128i_i32 / v19;
              v20 = v18;
              *(_DWORD *)(v4 + 48) = v18.m128i_i32[0];
              ServiceBox::findService<GameserverService>();
              GameserverService::getConfig((GameserverService *const)&v76);
              v21 = &std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false> *const)&v76)->design_config.txt_config_mgr.const_value_config_mgr;
              if ( *(_BYTE *)(((unsigned __int64)&this->last_check_fastest_move_type_ >> 3) + 0x7FFF8000) != 0
                && (char)((((_BYTE)this + 52) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&this->last_check_fastest_move_type_ >> 3)
                                                                    + 0x7FFF8000) )
              {
                __asan_report_load4(&this->last_check_fastest_move_type_);
              }
              *(float *)v20.m128i_i32 = ConstValueExcelConfigMgr::getMoveSpeedLimit(
                                          v21,
                                          this->last_check_fastest_move_type_);
              *(_DWORD *)(v4 + 64) = _mm_cvtsi128_si32(v20);
              std::shared_ptr<Config>::~shared_ptr(&v76);
              common::milog::MiLogStream::create(
                &v77,
                &common::milog::MiLogDefault::default_log_obj_,
                1u,
                "./src/player/avatar/player_avatar_comp.cpp",
                "checkMoveSpeed",
                5738);
              v22 = common::milog::MiLogStream::operator<<<char [8],(char *[8])0>(&v77, (const char (*)[8])"now_ms:");
              v23 = common::milog::MiLogStream::operator<<<unsigned long,(unsigned long *)0>(
                      v22,
                      (const unsigned __int64 *)(v4 + 96));
              v24 = common::milog::MiLogStream::operator<<<char [8],(char *[8])0>(v23, (const char (*)[8])" speed:");
              v25 = common::milog::MiLogStream::operator<<<float,(float *)0>(v24, (const float *)(v4 + 48));
              v26 = common::milog::MiLogStream::operator<<<char [14],(char *[14])0>(
                      v25,
                      (const char (*)[14])" speed_limit:");
              v27 = common::milog::MiLogStream::operator<<<float,(float *)0>(v26, (const float *)(v4 + 64));
              v28 = common::milog::MiLogStream::operator<<<char [12],(char *[12])0>(
                      v27,
                      (const char (*)[12])" move_type:");
              v29 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                      v28,
                      &this->last_check_fastest_move_type_);
              v30 = common::milog::MiLogStream::operator<<<char [15],(char *[15])0>(
                      v29,
                      (const char (*)[15])" motion_state:");
              common::milog::MiLogStream::operator<<<proto::MotionState,(proto::MotionState*)0>(
                v30,
                (const proto::MotionState *)(v4 + 80));
              common::milog::MiLogStream::~MiLogStream(&v77);
              if ( *(float *)(v4 + 48) > *(float *)(v4 + 64) )
              {
                ServiceBox::findService<GameserverService>();
                GameserverService::getConfig((GameserverService *const)&v76);
                v31 = std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false> *const)&v76);
                if ( *(_BYTE *)(((unsigned __int64)&v31->security_config.is_move_speed_check_kick_player >> 3)
                              + 0x7FFF8000) != 0
                  && (((unsigned __int8)v31 - 63) & 7) >= *(_BYTE *)(((unsigned __int64)&v31->security_config.is_move_speed_check_kick_player >> 3)
                                                                   + 0x7FFF8000) )
                {
                  __asan_report_load1(&v31->security_config.is_move_speed_check_kick_player);
                }
                is_kick_out = v31->security_config.is_move_speed_check_kick_player;
                std::shared_ptr<Config>::~shared_ptr(&v76);
                ServiceBox::findService<GameserverService>();
                GameserverService::getConfig((GameserverService *const)&v76);
                v32 = std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false> *const)&v76);
                if ( *(_BYTE *)(((unsigned __int64)&v32->security_config.is_move_speed_check_drag_player >> 3)
                              + 0x7FFF8000) != 0
                  && (((unsigned __int8)v32 - 62) & 7) >= *(_BYTE *)(((unsigned __int64)&v32->security_config.is_move_speed_check_drag_player >> 3)
                                                                   + 0x7FFF8000) )
                {
                  __asan_report_load1(&v32->security_config.is_move_speed_check_drag_player);
                }
                is_drag_back = v32->security_config.is_move_speed_check_drag_player;
                std::shared_ptr<Config>::~shared_ptr(&v76);
                PlayerAvatarComp::checkAndFlushRecordedMoveSpeedOverLimitLog(this, 0);
                log_ptr = &this->anti_cheat_body_move_speed_over_limit_log_ptr_;
                if ( std::operator==<proto_log::AntiCheatBodyMoveSpeedOverLimit>(
                       0LL,
                       &this->anti_cheat_body_move_speed_over_limit_log_ptr_) )
                {
                  PlayerAvatarComp::getCurAvatar((const PlayerAvatarComp *const)(v4 + 128));
                  if ( std::operator==<Avatar>((const std::shared_ptr<Avatar> *)(v4 + 128), 0LL) )
                  {
                    AvatarId = 0;
                  }
                  else
                  {
                    v34 = std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 128));
                    AvatarId = Avatar::getAvatarId(v34);
                  }
                  avatar_id = AvatarId;
                  common::tools::perf::make_shared<proto_log::AntiCheatBodyMoveSpeedOverLimit>();
                  std::shared_ptr<proto_log::AntiCheatBodyMoveSpeedOverLimit>::operator=(
                    log_ptr,
                    (std::shared_ptr<proto_log::AntiCheatBodyMoveSpeedOverLimit> *)&v76);
                  std::shared_ptr<proto_log::AntiCheatBodyMoveSpeedOverLimit>::~shared_ptr((std::shared_ptr<proto_log::AntiCheatBodyMoveSpeedOverLimit> *const)&v76);
                  v35 = std::__shared_ptr_access<proto_log::AntiCheatBodyMoveSpeedOverLimit,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<proto_log::AntiCheatBodyMoveSpeedOverLimit,(__gnu_cxx::_Lock_policy)2,false,false> *const)log_ptr);
                  proto_log::AntiCheatBodyMoveSpeedOverLimit::set_avatar_id(v35, avatar_id);
                  v36 = std::__shared_ptr_access<proto_log::AntiCheatBodyMoveSpeedOverLimit,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<proto_log::AntiCheatBodyMoveSpeedOverLimit,(__gnu_cxx::_Lock_policy)2,false,false> *const)log_ptr);
                  if ( *(_BYTE *)(((unsigned __int64)&this->last_check_fastest_move_type_ >> 3) + 0x7FFF8000) != 0
                    && (char)((((_BYTE)this + 52) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&this->last_check_fastest_move_type_ >> 3)
                                                                        + 0x7FFF8000) )
                  {
                    __asan_report_load4(&this->last_check_fastest_move_type_);
                  }
                  proto_log::AntiCheatBodyMoveSpeedOverLimit::set_move_type(v36, this->last_check_fastest_move_type_);
                  v37 = std::__shared_ptr_access<proto_log::AntiCheatBodyMoveSpeedOverLimit,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<proto_log::AntiCheatBodyMoveSpeedOverLimit,(__gnu_cxx::_Lock_policy)2,false,false> *const)log_ptr);
                  proto_log::AntiCheatBodyMoveSpeedOverLimit::set_move_speed(v37, *(float *)(v4 + 48));
                  v38 = std::__shared_ptr_access<proto_log::AntiCheatBodyMoveSpeedOverLimit,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<proto_log::AntiCheatBodyMoveSpeedOverLimit,(__gnu_cxx::_Lock_policy)2,false,false> *const)log_ptr);
                  proto_log::AntiCheatBodyMoveSpeedOverLimit::set_move_speed_limit(v38, *(float *)(v4 + 64));
                  v39 = std::__shared_ptr_access<proto_log::AntiCheatBodyMoveSpeedOverLimit,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<proto_log::AntiCheatBodyMoveSpeedOverLimit,(__gnu_cxx::_Lock_policy)2,false,false> *const)log_ptr);
                  if ( *(_BYTE *)(((unsigned __int64)&this->last_check_move_speed_pos_ >> 3) + 0x7FFF8000) != 0
                    && *(_BYTE *)(((unsigned __int64)&this->last_check_move_speed_pos_ >> 3) + 0x7FFF8000) <= 3 )
                  {
                    __asan_report_load4(&this->last_check_move_speed_pos_);
                  }
                  proto_log::AntiCheatBodyMoveSpeedOverLimit::set_pre_x(v39, this->last_check_move_speed_pos_.x);
                  v40 = std::__shared_ptr_access<proto_log::AntiCheatBodyMoveSpeedOverLimit,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<proto_log::AntiCheatBodyMoveSpeedOverLimit,(__gnu_cxx::_Lock_policy)2,false,false> *const)log_ptr);
                  if ( *(_BYTE *)(((unsigned __int64)&this->last_check_move_speed_pos_.y >> 3) + 0x7FFF8000) != 0
                    && (char)((((_BYTE)this + 44) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&this->last_check_move_speed_pos_.y >> 3)
                                                                        + 0x7FFF8000) )
                  {
                    __asan_report_load4(&this->last_check_move_speed_pos_.y);
                  }
                  proto_log::AntiCheatBodyMoveSpeedOverLimit::set_pre_y(v40, this->last_check_move_speed_pos_.y);
                  v41 = std::__shared_ptr_access<proto_log::AntiCheatBodyMoveSpeedOverLimit,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<proto_log::AntiCheatBodyMoveSpeedOverLimit,(__gnu_cxx::_Lock_policy)2,false,false> *const)log_ptr);
                  if ( *(_BYTE *)(((unsigned __int64)&this->last_check_move_speed_pos_.z >> 3) + 0x7FFF8000) != 0
                    && *(_BYTE *)(((unsigned __int64)&this->last_check_move_speed_pos_.z >> 3) + 0x7FFF8000) <= 3 )
                  {
                    __asan_report_load4(&this->last_check_move_speed_pos_.z);
                  }
                  proto_log::AntiCheatBodyMoveSpeedOverLimit::set_pre_z(v41, this->last_check_move_speed_pos_.z);
                  v42 = std::__shared_ptr_access<proto_log::AntiCheatBodyMoveSpeedOverLimit,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<proto_log::AntiCheatBodyMoveSpeedOverLimit,(__gnu_cxx::_Lock_policy)2,false,false> *const)log_ptr);
                  if ( *(_BYTE *)((pos >> 3) + 0x7FFF8000) != 0
                    && (char)((pos & 7) + 3) >= *(_BYTE *)((pos >> 3) + 0x7FFF8000) )
                  {
                    __asan_report_load4(pos);
                  }
                  proto_log::AntiCheatBodyMoveSpeedOverLimit::set_cur_x(v42, *(float *)pos);
                  v43 = std::__shared_ptr_access<proto_log::AntiCheatBodyMoveSpeedOverLimit,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<proto_log::AntiCheatBodyMoveSpeedOverLimit,(__gnu_cxx::_Lock_policy)2,false,false> *const)log_ptr);
                  if ( *(_BYTE *)(((pos + 4) >> 3) + 0x7FFF8000) != 0
                    && (char)(((pos + 4) & 7) + 3) >= *(_BYTE *)(((pos + 4) >> 3) + 0x7FFF8000) )
                  {
                    __asan_report_load4(pos + 4);
                  }
                  proto_log::AntiCheatBodyMoveSpeedOverLimit::set_cur_y(v43, *(float *)(pos + 4));
                  v44 = std::__shared_ptr_access<proto_log::AntiCheatBodyMoveSpeedOverLimit,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<proto_log::AntiCheatBodyMoveSpeedOverLimit,(__gnu_cxx::_Lock_policy)2,false,false> *const)log_ptr);
                  if ( *(_BYTE *)(((pos + 8) >> 3) + 0x7FFF8000) != 0
                    && (char)(((pos + 8) & 7) + 3) >= *(_BYTE *)(((pos + 8) >> 3) + 0x7FFF8000) )
                  {
                    __asan_report_load4(pos + 8);
                  }
                  proto_log::AntiCheatBodyMoveSpeedOverLimit::set_cur_z(v44, *(float *)(pos + 8));
                  v45 = std::__shared_ptr_access<proto_log::AntiCheatBodyMoveSpeedOverLimit,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<proto_log::AntiCheatBodyMoveSpeedOverLimit,(__gnu_cxx::_Lock_policy)2,false,false> *const)log_ptr);
                  if ( *(_BYTE *)(((unsigned __int64)&this->last_refresh_force_move_time_ >> 3) + 0x7FFF8000) != 0
                    && *(_BYTE *)(((unsigned __int64)&this->last_refresh_force_move_time_ >> 3) + 0x7FFF8000) <= 3 )
                  {
                    __asan_report_load4(&this->last_refresh_force_move_time_);
                  }
                  proto_log::AntiCheatBodyMoveSpeedOverLimit::set_last_refresh_force_move_time(
                    v45,
                    this->last_refresh_force_move_time_);
                  v46 = std::__shared_ptr_access<proto_log::AntiCheatBodyMoveSpeedOverLimit,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<proto_log::AntiCheatBodyMoveSpeedOverLimit,(__gnu_cxx::_Lock_policy)2,false,false> *const)log_ptr);
                  if ( *(_BYTE *)(((unsigned __int64)&this->force_drag_move_count_ >> 3) + 0x7FFF8000) != 0
                    && (char)((((_BYTE)this + 76) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&this->force_drag_move_count_ >> 3)
                                                                        + 0x7FFF8000) )
                  {
                    __asan_report_load4(&this->force_drag_move_count_);
                  }
                  proto_log::AntiCheatBodyMoveSpeedOverLimit::set_force_drag_move_count(
                    v46,
                    this->force_drag_move_count_);
                  v47 = std::__shared_ptr_access<proto_log::AntiCheatBodyMoveSpeedOverLimit,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<proto_log::AntiCheatBodyMoveSpeedOverLimit,(__gnu_cxx::_Lock_policy)2,false,false> *const)log_ptr);
                  if ( *(_BYTE *)(((unsigned __int64)&this->total_move_count_ >> 3) + 0x7FFF8000) != 0
                    && *(_BYTE *)(((unsigned __int64)&this->total_move_count_ >> 3) + 0x7FFF8000) <= 3 )
                  {
                    __asan_report_load4(&this->total_move_count_);
                  }
                  proto_log::AntiCheatBodyMoveSpeedOverLimit::set_total_move_count(v47, this->total_move_count_);
                  v48 = std::__shared_ptr_access<proto_log::AntiCheatBodyMoveSpeedOverLimit,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<proto_log::AntiCheatBodyMoveSpeedOverLimit,(__gnu_cxx::_Lock_policy)2,false,false> *const)log_ptr);
                  proto_log::AntiCheatBodyMoveSpeedOverLimit::set_is_kicked_out(v48, is_kick_out);
                  v49 = std::__shared_ptr_access<proto_log::AntiCheatBodyMoveSpeedOverLimit,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<proto_log::AntiCheatBodyMoveSpeedOverLimit,(__gnu_cxx::_Lock_policy)2,false,false> *const)log_ptr);
                  proto_log::AntiCheatBodyMoveSpeedOverLimit::set_is_draged_back(v49, is_drag_back);
                  v50 = std::__shared_ptr_access<proto_log::AntiCheatBodyMoveSpeedOverLimit,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<proto_log::AntiCheatBodyMoveSpeedOverLimit,(__gnu_cxx::_Lock_policy)2,false,false> *const)log_ptr);
                  proto_log::AntiCheatBodyMoveSpeedOverLimit::set_motion_state(v50, *(_DWORD *)(v4 + 80));
                  v51 = std::__shared_ptr_access<proto_log::AntiCheatBodyMoveSpeedOverLimit,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<proto_log::AntiCheatBodyMoveSpeedOverLimit,(__gnu_cxx::_Lock_policy)2,false,false> *const)log_ptr);
                  proto_log::AntiCheatBodyMoveSpeedOverLimit::set_record_time(v51, *(_QWORD *)(v4 + 96) / 0x3E8uLL);
                  std::shared_ptr<Avatar>::~shared_ptr((std::shared_ptr<Avatar> *const)(v4 + 128));
                }
                if ( std::operator!=<proto_log::AntiCheatBodyMoveSpeedOverLimit>(0LL, log_ptr) )
                {
                  v52 = std::__shared_ptr_access<proto_log::AntiCheatBodyMoveSpeedOverLimit,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<proto_log::AntiCheatBodyMoveSpeedOverLimit,(__gnu_cxx::_Lock_policy)2,false,false> *const)log_ptr);
                  v53 = std::__shared_ptr_access<proto_log::AntiCheatBodyMoveSpeedOverLimit,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<proto_log::AntiCheatBodyMoveSpeedOverLimit,(__gnu_cxx::_Lock_policy)2,false,false> *const)log_ptr);
                  v54 = proto_log::AntiCheatBodyMoveSpeedOverLimit::record_count(v53);
                  proto_log::AntiCheatBodyMoveSpeedOverLimit::set_record_count(v52, v54 + 1);
                }
                if ( is_kick_out )
                {
                  if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
                    __asan_report_load8(&this->player_);
                  Player::disconnectSession(this->player_, 0xDu);
                }
                if ( is_drag_back )
                  ret = -1;
              }
            }
            else
            {
              if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
                __asan_report_load8(&this->player_);
              v55 = Player::getSceneComp(this->player_);
              PlayerSceneComp::setIsHasTransferMarkForSpeedCheck(v55, 0);
              v56 = *(_QWORD *)(v4 + 96);
              if ( *(_BYTE *)(((unsigned __int64)&this->last_check_move_speed_time_ms_ >> 3) + 0x7FFF8000) )
                __asan_report_store8(&this->last_check_move_speed_time_ms_, 0LL);
              this->last_check_move_speed_time_ms_ = v56;
              if ( *(char *)(((unsigned __int64)&this->last_check_move_speed_pos_ >> 3) + 0x7FFF8000) < 0
                || *(_BYTE *)((((unsigned __int64)&this->last_check_move_speed_pos_.z + 3) >> 3) + 0x7FFF8000) != 0
                && (((unsigned __int8)this + 51) & 7) >= *(_BYTE *)((((unsigned __int64)&this->last_check_move_speed_pos_.z
                                                                    + 3) >> 3)
                                                                  + 0x7FFF8000) )
              {
                __asan_report_store_n(&this->last_check_move_speed_pos_, 12LL);
              }
              if ( (char)(pos & 7) >= *(_BYTE *)((pos >> 3) + 0x7FFF8000) && *(_BYTE *)((pos >> 3) + 0x7FFF8000) != 0
                || *(_BYTE *)(((pos + 11) >> 3) + 0x7FFF8000) != 0
                && (char)((pos + 11) & 7) >= *(_BYTE *)(((pos + 11) >> 3) + 0x7FFF8000) )
              {
                __asan_report_load_n(pos, 12LL);
              }
              this->last_check_move_speed_pos_ = *(Vector3 *)pos;
            }
          }
          if ( *(_BYTE *)(((unsigned __int64)&this->last_check_move_speed_time_ms_ >> 3) + 0x7FFF8000) )
            __asan_report_load8(&this->last_check_move_speed_time_ms_);
          last_check_move_speed_time_ms = this->last_check_move_speed_time_ms_;
          v58 = ServiceBox::findService<GameserverService>();
          GameserverService::getConfig((GameserverService *const)&v76);
          v59 = std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false> *const)&v76);
          LOBYTE(last_check_move_speed_time_ms) = last_check_move_speed_time_ms
                                                + ConstValueExcelConfigMgr::getMoveSpeedCheckIntervalTimeMs(&v59->design_config.txt_config_mgr.const_value_config_mgr) < *(_QWORD *)(v4 + 96);
          std::shared_ptr<Config>::~shared_ptr(&v76);
          if ( (_BYTE)last_check_move_speed_time_ms )
          {
            v60 = *(_QWORD *)(v4 + 96);
            if ( *(_BYTE *)(((unsigned __int64)&this->last_check_move_speed_time_ms_ >> 3) + 0x7FFF8000) )
              __asan_report_store8(&this->last_check_move_speed_time_ms_, v58);
            this->last_check_move_speed_time_ms_ = v60;
            if ( ret )
              Position = (unsigned __int64)Entity::getPosition(avatar);
            else
              Position = pos;
            if ( *(char *)(((unsigned __int64)&this->last_check_move_speed_pos_ >> 3) + 0x7FFF8000) < 0
              || *(_BYTE *)((((unsigned __int64)&this->last_check_move_speed_pos_.z + 3) >> 3) + 0x7FFF8000) != 0
              && (((unsigned __int8)this + 51) & 7) >= *(_BYTE *)((((unsigned __int64)&this->last_check_move_speed_pos_.z
                                                                  + 3) >> 3)
                                                                + 0x7FFF8000) )
            {
              Position = __asan_report_store_n(&this->last_check_move_speed_pos_, 12LL);
            }
            if ( (char)(Position & 7) >= *(_BYTE *)((Position >> 3) + 0x7FFF8000)
              && *(_BYTE *)((Position >> 3) + 0x7FFF8000) != 0
              || *(_BYTE *)(((Position + 11) >> 3) + 0x7FFF8000) != 0
              && (char)((Position + 11) & 7) >= *(_BYTE *)(((Position + 11) >> 3) + 0x7FFF8000) )
            {
              Position = __asan_report_load_n(Position, 12LL);
            }
            this->last_check_move_speed_pos_ = *(Vector3 *)Position;
            if ( *(_BYTE *)(((unsigned __int64)&this->last_check_fastest_move_type_ >> 3) + 0x7FFF8000) != 0
              && (char)((((_BYTE)this + 52) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&this->last_check_fastest_move_type_ >> 3)
                                                                  + 0x7FFF8000) )
            {
              __asan_report_load4(&this->last_check_fastest_move_type_);
            }
            v62 = (*(_BYTE *)(((unsigned __int64)&this->last_check_fastest_move_type_ >> 3) + 0x7FFF8000) != 0) & (unsigned __int8)((char)((((_BYTE)this + 52) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&this->last_check_fastest_move_type_ >> 3) + 0x7FFF8000));
            if ( (_BYTE)v62 )
              __asan_report_store4(&this->last_check_fastest_move_type_, (((_BYTE)this + 52) & 7u) + 3, v62);
            this->last_check_fastest_move_type_ = move_type;
          }
          result = ret;
        }
        else
        {
          this->last_check_move_speed_time_ms_ = *(_QWORD *)(v4 + 96);
          if ( *(char *)(((unsigned __int64)&this->last_check_move_speed_pos_ >> 3) + 0x7FFF8000) < 0
            || *(_BYTE *)((((unsigned __int64)&this->last_check_move_speed_pos_.z + 3) >> 3) + 0x7FFF8000) != 0
            && (((unsigned __int8)this + 51) & 7) >= *(_BYTE *)((((unsigned __int64)&this->last_check_move_speed_pos_.z
                                                                + 3) >> 3)
                                                              + 0x7FFF8000) )
          {
            __asan_report_store_n(&this->last_check_move_speed_pos_, 12LL);
          }
          if ( (char)(pos & 7) >= *(_BYTE *)((pos >> 3) + 0x7FFF8000) && *(_BYTE *)((pos >> 3) + 0x7FFF8000) != 0
            || *(_BYTE *)(((pos + 11) >> 3) + 0x7FFF8000) != 0
            && (char)((pos + 11) & 7) >= *(_BYTE *)(((pos + 11) >> 3) + 0x7FFF8000) )
          {
            __asan_report_load_n(pos, 12LL);
          }
          this->last_check_move_speed_pos_ = *(Vector3 *)pos;
          result = 0LL;
        }
        break;
    }
  }
  if ( v78 == (char *)v4 )
  {
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8008) = 0LL;
    *(_DWORD *)((v4 >> 3) + 0x7FFF8010) = 0;
  }
  else
  {
    *(_QWORD *)v4 = 1172321806LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v4 >> 3) + 0x7FFF8010) = -168430091;
  }
  return result;
};

// Line 5811: range 000000001719AFB4-000000001719C1AF
__int64 __fastcall PlayerAvatarComp::checkSceneTimeMoveSpeed(
        PlayerAvatarComp *const this,
        const Entity *avatar,
        proto::MotionState motion_state,
        const uint32_t scene_time_ms,
        const Vector3 *pos)
{
  unsigned __int64 v5; // r12
  __int64 v6; // rax
  _DWORD *v7; // r13
  GameserverService *v8; // rsi
  std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v9; // rdx
  bool v10; // r14
  __int64 result; // rax
  uint32_t v12; // ecx
  char v13; // al
  PlayerSceneComp *SceneComp; // rax
  PlayerSceneComp *v15; // rax
  int v16; // ecx
  unsigned int *v17; // rax
  signed int *v18; // rdx
  __m128i v19; // xmm1
  __m128i v20; // xmm0
  std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v21; // rax
  common::milog::MiLogStream *v22; // rax
  common::milog::MiLogStream *v23; // rax
  common::milog::MiLogStream *v24; // rax
  common::milog::MiLogStream *v25; // rax
  common::milog::MiLogStream *v26; // rax
  common::milog::MiLogStream *v27; // rax
  common::milog::MiLogStream *v28; // rax
  std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v29; // rdx
  std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v30; // rdx
  uint32_t AvatarId; // eax
  std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v32; // rax
  std::__shared_ptr_access<proto_log::AntiCheatBodySceneTimeMoveSpeedOverLimit,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v33; // rax
  std::__shared_ptr_access<proto_log::AntiCheatBodySceneTimeMoveSpeedOverLimit,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v34; // rax
  std::__shared_ptr_access<proto_log::AntiCheatBodySceneTimeMoveSpeedOverLimit,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v35; // rax
  std::__shared_ptr_access<proto_log::AntiCheatBodySceneTimeMoveSpeedOverLimit,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v36; // rcx
  std::__shared_ptr_access<proto_log::AntiCheatBodySceneTimeMoveSpeedOverLimit,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v37; // rcx
  std::__shared_ptr_access<proto_log::AntiCheatBodySceneTimeMoveSpeedOverLimit,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v38; // rcx
  std::__shared_ptr_access<proto_log::AntiCheatBodySceneTimeMoveSpeedOverLimit,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v39; // rcx
  std::__shared_ptr_access<proto_log::AntiCheatBodySceneTimeMoveSpeedOverLimit,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v40; // rcx
  std::__shared_ptr_access<proto_log::AntiCheatBodySceneTimeMoveSpeedOverLimit,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v41; // rcx
  std::__shared_ptr_access<proto_log::AntiCheatBodySceneTimeMoveSpeedOverLimit,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v42; // rax
  std::__shared_ptr_access<proto_log::AntiCheatBodySceneTimeMoveSpeedOverLimit,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v43; // rax
  std::__shared_ptr_access<proto_log::AntiCheatBodySceneTimeMoveSpeedOverLimit,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v44; // rax
  std::__shared_ptr_access<proto_log::AntiCheatBodySceneTimeMoveSpeedOverLimit,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v45; // rax
  std::__shared_ptr_access<proto_log::AntiCheatBodySceneTimeMoveSpeedOverLimit,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v46; // r14
  google::protobuf::uint32 Now; // eax
  std::__shared_ptr_access<proto_log::AntiCheatBodySceneTimeMoveSpeedOverLimit,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v48; // r14
  std::__shared_ptr_access<proto_log::AntiCheatBodySceneTimeMoveSpeedOverLimit,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v49; // rax
  google::protobuf::uint32 v50; // eax
  PlayerSceneComp *v51; // rax
  uint32_t v52; // ecx
  char v53; // al
  uint64_t v54; // r14
  GameserverService *v55; // rsi
  std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v56; // rax
  bool v57; // r14
  uint32_t v58; // ecx
  char v59; // al
  unsigned __int64 Position; // rax
  __int64 scene_time_last_check_move_speed_time_ms; // [rsp+8h] [rbp-128h]
  bool is_kick_out; // [rsp+3Ah] [rbp-F6h]
  bool is_drag_back; // [rsp+3Bh] [rbp-F5h]
  unsigned int ret; // [rsp+3Ch] [rbp-F4h]
  signed int diff_ms; // [rsp+40h] [rbp-F0h]
  uint32_t avatar_id; // [rsp+44h] [rbp-ECh]
  std::shared_ptr<proto_log::AntiCheatBodySceneTimeMoveSpeedOverLimit> *log_ptr; // [rsp+48h] [rbp-E8h]
  std::shared_ptr<Config> v72; // [rsp+50h] [rbp-E0h] BYREF
  common::milog::MiLogStream v73; // [rsp+60h] [rbp-D0h] BYREF
  char v74[176]; // [rsp+80h] [rbp-B0h] BYREF

  v5 = (unsigned __int64)v74;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v6 = __asan_stack_malloc_1(128LL);
    if ( v6 )
      v5 = v6;
  }
  *(_QWORD *)v5 = 1102416563LL;
  *(_QWORD *)(v5 + 8) = "5 32 4 10 speed:5849 48 4 16 speed_limit:5850 64 4 17 motion_state:5810 80 4 18 scene_time_ms:58"
                        "10 96 16 15 avatar_ptr:5864";
  *(_QWORD *)(v5 + 16) = PlayerAvatarComp::checkSceneTimeMoveSpeed;
  v7 = (_DWORD *)(v5 >> 3);
  v7[536862720] = -235802127;
  v7[536862721] = -234556924;
  v7[536862722] = -234556924;
  v7[536862723] = -202178560;
  *(_DWORD *)(v5 + 64) = motion_state;
  *(_DWORD *)(v5 + 80) = scene_time_ms;
  v8 = ServiceBox::findService<GameserverService>();
  GameserverService::getConfig((GameserverService *const)&v72);
  v9 = std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false> *const)&v72);
  if ( *(_BYTE *)(((unsigned __int64)&v9->security_config.is_scene_time_move_speed_check_open >> 3) + 0x7FFF8000) != 0
    && (((unsigned __int8)v9 - 61) & 7) >= *(_BYTE *)(((unsigned __int64)&v9->security_config.is_scene_time_move_speed_check_open >> 3)
                                                    + 0x7FFF8000) )
  {
    __asan_report_load1(&v9->security_config.is_scene_time_move_speed_check_open);
  }
  v10 = !v9->security_config.is_scene_time_move_speed_check_open;
  std::shared_ptr<Config>::~shared_ptr(&v72);
  if ( v10 )
  {
    result = 0LL;
  }
  else if ( *(_DWORD *)(v5 + 80) )
  {
    if ( *(_BYTE *)(((unsigned __int64)&this->scene_time_last_check_move_speed_time_ms_ >> 3) + 0x7FFF8000) != 0
      && *(_BYTE *)(((unsigned __int64)&this->scene_time_last_check_move_speed_time_ms_ >> 3) + 0x7FFF8000) <= 3 )
    {
      __asan_report_load4(&this->scene_time_last_check_move_speed_time_ms_);
    }
    if ( this->scene_time_last_check_move_speed_time_ms_ )
    {
      if ( *(_BYTE *)(((unsigned __int64)&this->scene_time_last_check_move_speed_time_ms_ >> 3) + 0x7FFF8000) != 0
        && *(_BYTE *)(((unsigned __int64)&this->scene_time_last_check_move_speed_time_ms_ >> 3) + 0x7FFF8000) <= 3 )
      {
        __asan_report_load4(&this->scene_time_last_check_move_speed_time_ms_);
      }
      if ( this->scene_time_last_check_move_speed_time_ms_ <= *(_DWORD *)(v5 + 80) )
      {
        if ( *(_DWORD *)(v5 + 64) == 44 || *(_DWORD *)(v5 + 64) == 43 )
        {
          v12 = *(_DWORD *)(v5 + 80);
          v13 = *(_BYTE *)(((unsigned __int64)&this->scene_time_last_check_move_speed_time_ms_ >> 3) + 0x7FFF8000);
          if ( v13 != 0 && v13 <= 3 )
          {
            LOBYTE(v8) = v13 != 0;
            __asan_report_store4(
              &this->scene_time_last_check_move_speed_time_ms_,
              v8,
              &this->scene_time_last_check_move_speed_time_ms_);
          }
          this->scene_time_last_check_move_speed_time_ms_ = v12;
          if ( (((unsigned __int8)this + 60) & 7) >= *(_BYTE *)(((unsigned __int64)&this->scene_time_last_check_move_speed_pos_ >> 3)
                                                              + 0x7FFF8000)
            && *(_BYTE *)(((unsigned __int64)&this->scene_time_last_check_move_speed_pos_ >> 3) + 0x7FFF8000) != 0
            || *(_BYTE *)((((unsigned __int64)&this->scene_time_last_check_move_speed_pos_.z + 3) >> 3) + 0x7FFF8000) != 0
            && (((unsigned __int8)this + 71) & 7) >= *(_BYTE *)((((unsigned __int64)&this->scene_time_last_check_move_speed_pos_.z
                                                                + 3) >> 3)
                                                              + 0x7FFF8000) )
          {
            __asan_report_store_n(&this->scene_time_last_check_move_speed_pos_, 12LL);
          }
          if ( ((unsigned __int8)pos & 7) >= *(_BYTE *)(((unsigned __int64)pos >> 3) + 0x7FFF8000)
            && *(_BYTE *)(((unsigned __int64)pos >> 3) + 0x7FFF8000) != 0
            || *(_BYTE *)((((unsigned __int64)&pos->z + 3) >> 3) + 0x7FFF8000) != 0
            && (((unsigned __int8)pos + 11) & 7) >= *(_BYTE *)((((unsigned __int64)&pos->z + 3) >> 3) + 0x7FFF8000) )
          {
            __asan_report_load_n(pos, 12LL);
          }
          this->scene_time_last_check_move_speed_pos_ = *pos;
          result = 0LL;
        }
        else
        {
          ret = 0;
          if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
            __asan_report_load8(&this->player_);
          SceneComp = Player::getSceneComp(this->player_);
          if ( !PlayerSceneComp::isInTransfer(SceneComp) )
          {
            if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
              __asan_report_load8(&this->player_);
            v15 = Player::getSceneComp(this->player_);
            if ( !PlayerSceneComp::getIsHasTransferMarkForSceneTimeSpeedCheck(v15) )
            {
              v16 = *(_DWORD *)(v5 + 80);
              if ( *(_BYTE *)(((unsigned __int64)&this->scene_time_last_check_move_speed_time_ms_ >> 3) + 0x7FFF8000) != 0
                && *(_BYTE *)(((unsigned __int64)&this->scene_time_last_check_move_speed_time_ms_ >> 3) + 0x7FFF8000) <= 3 )
              {
                __asan_report_load4(&this->scene_time_last_check_move_speed_time_ms_);
              }
              *(_DWORD *)(v5 + 48) = v16 - this->scene_time_last_check_move_speed_time_ms_;
              *(_DWORD *)(v5 + 32) = 1000;
              v17 = (unsigned int *)std::max<unsigned int>(
                                      (const unsigned int *)(v5 + 32),
                                      (const unsigned int *)(v5 + 48));
              v18 = (signed int *)v17;
              if ( *(_BYTE *)(((unsigned __int64)v17 >> 3) + 0x7FFF8000) != 0
                && (char)(((unsigned __int8)v17 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)v17 >> 3) + 0x7FFF8000) )
              {
                __asan_report_load4(v17);
              }
              diff_ms = *v18;
              v19 = (__m128i)0x447A0000u;
              *(float *)v19.m128i_i32 = (float)(1000.0
                                              * getPlaneDistance(pos, &this->scene_time_last_check_move_speed_pos_))
                                      / (float)diff_ms;
              v20 = v19;
              *(_DWORD *)(v5 + 32) = v19.m128i_i32[0];
              ServiceBox::findService<GameserverService>();
              GameserverService::getConfig((GameserverService *const)&v72);
              v21 = std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false> *const)&v72);
              *(float *)v20.m128i_i32 = ConstValueExcelConfigMgr::getMoveSpeedLimit(
                                          &v21->design_config.txt_config_mgr.const_value_config_mgr,
                                          0);
              *(_DWORD *)(v5 + 48) = _mm_cvtsi128_si32(v20);
              std::shared_ptr<Config>::~shared_ptr(&v72);
              common::milog::MiLogStream::create(
                &v73,
                &common::milog::MiLogDefault::default_log_obj_,
                1u,
                "./src/player/avatar/player_avatar_comp.cpp",
                "checkSceneTimeMoveSpeed",
                5853);
              v22 = common::milog::MiLogStream::operator<<<char [15],(char *[15])0>(
                      &v73,
                      (const char (*)[15])"scene_time_ms:");
              v23 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                      v22,
                      (const unsigned int *)(v5 + 80));
              v24 = common::milog::MiLogStream::operator<<<char [8],(char *[8])0>(v23, (const char (*)[8])" speed:");
              v25 = common::milog::MiLogStream::operator<<<float,(float *)0>(v24, (const float *)(v5 + 32));
              v26 = common::milog::MiLogStream::operator<<<char [14],(char *[14])0>(
                      v25,
                      (const char (*)[14])" speed_limit:");
              v27 = common::milog::MiLogStream::operator<<<float,(float *)0>(v26, (const float *)(v5 + 48));
              v28 = common::milog::MiLogStream::operator<<<char [15],(char *[15])0>(
                      v27,
                      (const char (*)[15])" motion_state:");
              common::milog::MiLogStream::operator<<<proto::MotionState,(proto::MotionState*)0>(
                v28,
                (const proto::MotionState *)(v5 + 64));
              common::milog::MiLogStream::~MiLogStream(&v73);
              if ( *(float *)(v5 + 32) > *(float *)(v5 + 48) )
              {
                ServiceBox::findService<GameserverService>();
                GameserverService::getConfig((GameserverService *const)&v72);
                v29 = std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false> *const)&v72);
                if ( *(_BYTE *)(((unsigned __int64)&v29->security_config.is_scene_time_move_speed_check_kick_player >> 3)
                              + 0x7FFF8000) != 0
                  && (((unsigned __int8)v29 - 60) & 7) >= *(_BYTE *)(((unsigned __int64)&v29->security_config.is_scene_time_move_speed_check_kick_player >> 3)
                                                                   + 0x7FFF8000) )
                {
                  __asan_report_load1(&v29->security_config.is_scene_time_move_speed_check_kick_player);
                }
                is_kick_out = v29->security_config.is_scene_time_move_speed_check_kick_player;
                std::shared_ptr<Config>::~shared_ptr(&v72);
                ServiceBox::findService<GameserverService>();
                GameserverService::getConfig((GameserverService *const)&v72);
                v30 = std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false> *const)&v72);
                if ( *(_BYTE *)(((unsigned __int64)&v30->security_config.is_scene_time_move_speed_check_drag_player >> 3)
                              + 0x7FFF8000) != 0
                  && (((unsigned __int8)v30 - 59) & 7) >= *(_BYTE *)(((unsigned __int64)&v30->security_config.is_scene_time_move_speed_check_drag_player >> 3)
                                                                   + 0x7FFF8000) )
                {
                  __asan_report_load1(&v30->security_config.is_scene_time_move_speed_check_drag_player);
                }
                is_drag_back = v30->security_config.is_scene_time_move_speed_check_drag_player;
                std::shared_ptr<Config>::~shared_ptr(&v72);
                PlayerAvatarComp::checkAndFlushRecordedSceneTimeMoveSpeedOverLimitLog(this, 0);
                log_ptr = &this->anti_cheat_body_scene_time_move_speed_over_limit_log_ptr_;
                if ( std::operator==<proto_log::AntiCheatBodySceneTimeMoveSpeedOverLimit>(
                       0LL,
                       &this->anti_cheat_body_scene_time_move_speed_over_limit_log_ptr_) )
                {
                  PlayerAvatarComp::getCurAvatar((const PlayerAvatarComp *const)(v5 + 96));
                  if ( std::operator==<Avatar>((const std::shared_ptr<Avatar> *)(v5 + 96), 0LL) )
                  {
                    AvatarId = 0;
                  }
                  else
                  {
                    v32 = std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v5 + 96));
                    AvatarId = Avatar::getAvatarId(v32);
                  }
                  avatar_id = AvatarId;
                  common::tools::perf::make_shared<proto_log::AntiCheatBodySceneTimeMoveSpeedOverLimit>();
                  std::shared_ptr<proto_log::AntiCheatBodySceneTimeMoveSpeedOverLimit>::operator=(
                    log_ptr,
                    (std::shared_ptr<proto_log::AntiCheatBodySceneTimeMoveSpeedOverLimit> *)&v72);
                  std::shared_ptr<proto_log::AntiCheatBodySceneTimeMoveSpeedOverLimit>::~shared_ptr((std::shared_ptr<proto_log::AntiCheatBodySceneTimeMoveSpeedOverLimit> *const)&v72);
                  v33 = std::__shared_ptr_access<proto_log::AntiCheatBodySceneTimeMoveSpeedOverLimit,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<proto_log::AntiCheatBodySceneTimeMoveSpeedOverLimit,(__gnu_cxx::_Lock_policy)2,false,false> *const)log_ptr);
                  proto_log::AntiCheatBodySceneTimeMoveSpeedOverLimit::set_avatar_id(v33, avatar_id);
                  v34 = std::__shared_ptr_access<proto_log::AntiCheatBodySceneTimeMoveSpeedOverLimit,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<proto_log::AntiCheatBodySceneTimeMoveSpeedOverLimit,(__gnu_cxx::_Lock_policy)2,false,false> *const)log_ptr);
                  proto_log::AntiCheatBodySceneTimeMoveSpeedOverLimit::set_move_speed(v34, *(float *)(v5 + 32));
                  v35 = std::__shared_ptr_access<proto_log::AntiCheatBodySceneTimeMoveSpeedOverLimit,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<proto_log::AntiCheatBodySceneTimeMoveSpeedOverLimit,(__gnu_cxx::_Lock_policy)2,false,false> *const)log_ptr);
                  proto_log::AntiCheatBodySceneTimeMoveSpeedOverLimit::set_move_speed_limit(v35, *(float *)(v5 + 48));
                  v36 = std::__shared_ptr_access<proto_log::AntiCheatBodySceneTimeMoveSpeedOverLimit,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<proto_log::AntiCheatBodySceneTimeMoveSpeedOverLimit,(__gnu_cxx::_Lock_policy)2,false,false> *const)log_ptr);
                  if ( *(_BYTE *)(((unsigned __int64)&this->scene_time_last_check_move_speed_pos_ >> 3) + 0x7FFF8000) != 0
                    && (char)((((_BYTE)this + 60) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&this->scene_time_last_check_move_speed_pos_ >> 3)
                                                                        + 0x7FFF8000) )
                  {
                    __asan_report_load4(&this->scene_time_last_check_move_speed_pos_);
                  }
                  proto_log::AntiCheatBodySceneTimeMoveSpeedOverLimit::set_pre_x(
                    v36,
                    this->scene_time_last_check_move_speed_pos_.x);
                  v37 = std::__shared_ptr_access<proto_log::AntiCheatBodySceneTimeMoveSpeedOverLimit,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<proto_log::AntiCheatBodySceneTimeMoveSpeedOverLimit,(__gnu_cxx::_Lock_policy)2,false,false> *const)log_ptr);
                  if ( *(_BYTE *)(((unsigned __int64)&this->scene_time_last_check_move_speed_pos_.y >> 3) + 0x7FFF8000) != 0
                    && *(_BYTE *)(((unsigned __int64)&this->scene_time_last_check_move_speed_pos_.y >> 3) + 0x7FFF8000) <= 3 )
                  {
                    __asan_report_load4(&this->scene_time_last_check_move_speed_pos_.y);
                  }
                  proto_log::AntiCheatBodySceneTimeMoveSpeedOverLimit::set_pre_y(
                    v37,
                    this->scene_time_last_check_move_speed_pos_.y);
                  v38 = std::__shared_ptr_access<proto_log::AntiCheatBodySceneTimeMoveSpeedOverLimit,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<proto_log::AntiCheatBodySceneTimeMoveSpeedOverLimit,(__gnu_cxx::_Lock_policy)2,false,false> *const)log_ptr);
                  if ( *(_BYTE *)(((unsigned __int64)&this->scene_time_last_check_move_speed_pos_.z >> 3) + 0x7FFF8000) != 0
                    && (char)((((_BYTE)this + 68) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&this->scene_time_last_check_move_speed_pos_.z >> 3)
                                                                        + 0x7FFF8000) )
                  {
                    __asan_report_load4(&this->scene_time_last_check_move_speed_pos_.z);
                  }
                  proto_log::AntiCheatBodySceneTimeMoveSpeedOverLimit::set_pre_z(
                    v38,
                    this->scene_time_last_check_move_speed_pos_.z);
                  v39 = std::__shared_ptr_access<proto_log::AntiCheatBodySceneTimeMoveSpeedOverLimit,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<proto_log::AntiCheatBodySceneTimeMoveSpeedOverLimit,(__gnu_cxx::_Lock_policy)2,false,false> *const)log_ptr);
                  if ( *(_BYTE *)(((unsigned __int64)pos >> 3) + 0x7FFF8000) != 0
                    && (char)(((unsigned __int8)pos & 7) + 3) >= *(_BYTE *)(((unsigned __int64)pos >> 3) + 0x7FFF8000) )
                  {
                    __asan_report_load4(pos);
                  }
                  proto_log::AntiCheatBodySceneTimeMoveSpeedOverLimit::set_cur_x(v39, pos->x);
                  v40 = std::__shared_ptr_access<proto_log::AntiCheatBodySceneTimeMoveSpeedOverLimit,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<proto_log::AntiCheatBodySceneTimeMoveSpeedOverLimit,(__gnu_cxx::_Lock_policy)2,false,false> *const)log_ptr);
                  if ( *(_BYTE *)(((unsigned __int64)&pos->y >> 3) + 0x7FFF8000) != 0
                    && (char)((((_BYTE)pos + 4) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&pos->y >> 3) + 0x7FFF8000) )
                  {
                    __asan_report_load4(&pos->y);
                  }
                  proto_log::AntiCheatBodySceneTimeMoveSpeedOverLimit::set_cur_y(v40, pos->y);
                  v41 = std::__shared_ptr_access<proto_log::AntiCheatBodySceneTimeMoveSpeedOverLimit,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<proto_log::AntiCheatBodySceneTimeMoveSpeedOverLimit,(__gnu_cxx::_Lock_policy)2,false,false> *const)log_ptr);
                  if ( *(_BYTE *)(((unsigned __int64)&pos->z >> 3) + 0x7FFF8000) != 0
                    && (char)((((_BYTE)pos + 8) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&pos->z >> 3) + 0x7FFF8000) )
                  {
                    __asan_report_load4(&pos->z);
                  }
                  proto_log::AntiCheatBodySceneTimeMoveSpeedOverLimit::set_cur_z(v41, pos->z);
                  v42 = std::__shared_ptr_access<proto_log::AntiCheatBodySceneTimeMoveSpeedOverLimit,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<proto_log::AntiCheatBodySceneTimeMoveSpeedOverLimit,(__gnu_cxx::_Lock_policy)2,false,false> *const)log_ptr);
                  proto_log::AntiCheatBodySceneTimeMoveSpeedOverLimit::set_is_kicked_out(v42, is_kick_out);
                  v43 = std::__shared_ptr_access<proto_log::AntiCheatBodySceneTimeMoveSpeedOverLimit,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<proto_log::AntiCheatBodySceneTimeMoveSpeedOverLimit,(__gnu_cxx::_Lock_policy)2,false,false> *const)log_ptr);
                  proto_log::AntiCheatBodySceneTimeMoveSpeedOverLimit::set_is_draged_back(v43, is_drag_back);
                  v44 = std::__shared_ptr_access<proto_log::AntiCheatBodySceneTimeMoveSpeedOverLimit,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<proto_log::AntiCheatBodySceneTimeMoveSpeedOverLimit,(__gnu_cxx::_Lock_policy)2,false,false> *const)log_ptr);
                  proto_log::AntiCheatBodySceneTimeMoveSpeedOverLimit::set_motion_state(v44, *(_DWORD *)(v5 + 64));
                  v45 = std::__shared_ptr_access<proto_log::AntiCheatBodySceneTimeMoveSpeedOverLimit,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<proto_log::AntiCheatBodySceneTimeMoveSpeedOverLimit,(__gnu_cxx::_Lock_policy)2,false,false> *const)log_ptr);
                  proto_log::AntiCheatBodySceneTimeMoveSpeedOverLimit::set_record_scene_time(
                    v45,
                    *(_DWORD *)(v5 + 80) / 0x3E8u);
                  v46 = std::__shared_ptr_access<proto_log::AntiCheatBodySceneTimeMoveSpeedOverLimit,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<proto_log::AntiCheatBodySceneTimeMoveSpeedOverLimit,(__gnu_cxx::_Lock_policy)2,false,false> *const)log_ptr);
                  Now = common::tools::TimeUtils::getNow();
                  proto_log::AntiCheatBodySceneTimeMoveSpeedOverLimit::set_record_time(v46, Now);
                  std::shared_ptr<Avatar>::~shared_ptr((std::shared_ptr<Avatar> *const)(v5 + 96));
                }
                if ( std::operator!=<proto_log::AntiCheatBodySceneTimeMoveSpeedOverLimit>(0LL, log_ptr) )
                {
                  v48 = std::__shared_ptr_access<proto_log::AntiCheatBodySceneTimeMoveSpeedOverLimit,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<proto_log::AntiCheatBodySceneTimeMoveSpeedOverLimit,(__gnu_cxx::_Lock_policy)2,false,false> *const)log_ptr);
                  v49 = std::__shared_ptr_access<proto_log::AntiCheatBodySceneTimeMoveSpeedOverLimit,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<proto_log::AntiCheatBodySceneTimeMoveSpeedOverLimit,(__gnu_cxx::_Lock_policy)2,false,false> *const)log_ptr);
                  v50 = proto_log::AntiCheatBodySceneTimeMoveSpeedOverLimit::record_count(v49);
                  proto_log::AntiCheatBodySceneTimeMoveSpeedOverLimit::set_record_count(v48, v50 + 1);
                }
                if ( is_kick_out )
                {
                  if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
                    __asan_report_load8(&this->player_);
                  Player::disconnectSession(this->player_, 0xDu);
                }
                if ( is_drag_back )
                  ret = -1;
              }
            }
            else
            {
              if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
                __asan_report_load8(&this->player_);
              v51 = Player::getSceneComp(this->player_);
              PlayerSceneComp::setIsHasTransferMarkForSceneTimeSpeedCheck(v51, 0);
              v52 = *(_DWORD *)(v5 + 80);
              v53 = *(_BYTE *)(((unsigned __int64)&this->scene_time_last_check_move_speed_time_ms_ >> 3) + 0x7FFF8000);
              if ( v53 != 0 && v53 <= 3 )
                __asan_report_store4(
                  &this->scene_time_last_check_move_speed_time_ms_,
                  v53 != 0,
                  &this->scene_time_last_check_move_speed_time_ms_);
              this->scene_time_last_check_move_speed_time_ms_ = v52;
              if ( (((unsigned __int8)this + 60) & 7) >= *(_BYTE *)(((unsigned __int64)&this->scene_time_last_check_move_speed_pos_ >> 3)
                                                                  + 0x7FFF8000)
                && *(_BYTE *)(((unsigned __int64)&this->scene_time_last_check_move_speed_pos_ >> 3) + 0x7FFF8000) != 0
                || *(_BYTE *)((((unsigned __int64)&this->scene_time_last_check_move_speed_pos_.z + 3) >> 3) + 0x7FFF8000) != 0
                && (((unsigned __int8)this + 71) & 7) >= *(_BYTE *)((((unsigned __int64)&this->scene_time_last_check_move_speed_pos_.z
                                                                    + 3) >> 3)
                                                                  + 0x7FFF8000) )
              {
                __asan_report_store_n(&this->scene_time_last_check_move_speed_pos_, 12LL);
              }
              if ( ((unsigned __int8)pos & 7) >= *(_BYTE *)(((unsigned __int64)pos >> 3) + 0x7FFF8000)
                && *(_BYTE *)(((unsigned __int64)pos >> 3) + 0x7FFF8000) != 0
                || *(_BYTE *)((((unsigned __int64)&pos->z + 3) >> 3) + 0x7FFF8000) != 0
                && (((unsigned __int8)pos + 11) & 7) >= *(_BYTE *)((((unsigned __int64)&pos->z + 3) >> 3) + 0x7FFF8000) )
              {
                __asan_report_load_n(pos, 12LL);
              }
              this->scene_time_last_check_move_speed_pos_ = *pos;
            }
          }
          v54 = *(unsigned int *)(v5 + 80);
          if ( *(_BYTE *)(((unsigned __int64)&this->scene_time_last_check_move_speed_time_ms_ >> 3) + 0x7FFF8000) != 0
            && *(_BYTE *)(((unsigned __int64)&this->scene_time_last_check_move_speed_time_ms_ >> 3) + 0x7FFF8000) <= 3 )
          {
            __asan_report_load4(&this->scene_time_last_check_move_speed_time_ms_);
          }
          scene_time_last_check_move_speed_time_ms = this->scene_time_last_check_move_speed_time_ms_;
          v55 = ServiceBox::findService<GameserverService>();
          GameserverService::getConfig((GameserverService *const)&v72);
          v56 = std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false> *const)&v72);
          v57 = v54 > scene_time_last_check_move_speed_time_ms
                    + ConstValueExcelConfigMgr::getMoveSpeedCheckIntervalTimeMs(&v56->design_config.txt_config_mgr.const_value_config_mgr);
          std::shared_ptr<Config>::~shared_ptr(&v72);
          if ( v57 )
          {
            v58 = *(_DWORD *)(v5 + 80);
            v59 = *(_BYTE *)(((unsigned __int64)&this->scene_time_last_check_move_speed_time_ms_ >> 3) + 0x7FFF8000);
            if ( v59 != 0 && v59 <= 3 )
            {
              LOBYTE(v55) = v59 != 0;
              __asan_report_store4(
                &this->scene_time_last_check_move_speed_time_ms_,
                v55,
                &this->scene_time_last_check_move_speed_time_ms_);
            }
            this->scene_time_last_check_move_speed_time_ms_ = v58;
            if ( ret )
              Position = (unsigned __int64)Entity::getPosition(avatar);
            else
              Position = (unsigned __int64)pos;
            if ( (((unsigned __int8)this + 60) & 7) >= *(_BYTE *)(((unsigned __int64)&this->scene_time_last_check_move_speed_pos_ >> 3)
                                                                + 0x7FFF8000)
              && *(_BYTE *)(((unsigned __int64)&this->scene_time_last_check_move_speed_pos_ >> 3) + 0x7FFF8000) != 0
              || *(_BYTE *)((((unsigned __int64)&this->scene_time_last_check_move_speed_pos_.z + 3) >> 3) + 0x7FFF8000) != 0
              && (((unsigned __int8)this + 71) & 7) >= *(_BYTE *)((((unsigned __int64)&this->scene_time_last_check_move_speed_pos_.z
                                                                  + 3) >> 3)
                                                                + 0x7FFF8000) )
            {
              Position = __asan_report_store_n(&this->scene_time_last_check_move_speed_pos_, 12LL);
            }
            if ( (char)(Position & 7) >= *(_BYTE *)((Position >> 3) + 0x7FFF8000)
              && *(_BYTE *)((Position >> 3) + 0x7FFF8000) != 0
              || *(_BYTE *)(((Position + 11) >> 3) + 0x7FFF8000) != 0
              && (char)((Position + 11) & 7) >= *(_BYTE *)(((Position + 11) >> 3) + 0x7FFF8000) )
            {
              Position = __asan_report_load_n(Position, 12LL);
            }
            this->scene_time_last_check_move_speed_pos_ = *(Vector3 *)Position;
          }
          result = ret;
        }
      }
      else
      {
        result = 0LL;
      }
    }
    else
    {
      this->scene_time_last_check_move_speed_time_ms_ = *(_DWORD *)(v5 + 80);
      if ( (((unsigned __int8)this + 60) & 7) >= *(_BYTE *)(((unsigned __int64)&this->scene_time_last_check_move_speed_pos_ >> 3)
                                                          + 0x7FFF8000)
        && *(_BYTE *)(((unsigned __int64)&this->scene_time_last_check_move_speed_pos_ >> 3) + 0x7FFF8000) != 0
        || *(_BYTE *)((((unsigned __int64)&this->scene_time_last_check_move_speed_pos_.z + 3) >> 3) + 0x7FFF8000) != 0
        && (((unsigned __int8)this + 71) & 7) >= *(_BYTE *)((((unsigned __int64)&this->scene_time_last_check_move_speed_pos_.z
                                                            + 3) >> 3)
                                                          + 0x7FFF8000) )
      {
        __asan_report_store_n(&this->scene_time_last_check_move_speed_pos_, 12LL);
      }
      if ( ((unsigned __int8)pos & 7) >= *(_BYTE *)(((unsigned __int64)pos >> 3) + 0x7FFF8000)
        && *(_BYTE *)(((unsigned __int64)pos >> 3) + 0x7FFF8000) != 0
        || *(_BYTE *)((((unsigned __int64)&pos->z + 3) >> 3) + 0x7FFF8000) != 0
        && (((unsigned __int8)pos + 11) & 7) >= *(_BYTE *)((((unsigned __int64)&pos->z + 3) >> 3) + 0x7FFF8000) )
      {
        __asan_report_load_n(pos, 12LL);
      }
      this->scene_time_last_check_move_speed_pos_ = *pos;
      result = 0LL;
    }
  }
  else
  {
    result = 0LL;
  }
  if ( v74 == (char *)v5 )
  {
    *(_QWORD *)((v5 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v5 = 1172321806LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 5913: range 000000001719C1B0-000000001719C6E2
void __cdecl PlayerAvatarComp::checkAndRecordClientReportMoveSpeedOverLimit(
        PlayerAvatarComp *const this,
        proto::MotionState motion_state,
        const Vector3 *pos,
        MotionContext *motion_context)
{
  unsigned __int64 v4; // r12
  __int64 v5; // rax
  unsigned __int64 v6; // r13
  uint32_t v7; // r14d
  std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v8; // rax
  bool v9; // r14
  std::__shared_ptr_access<proto_log::AntiCheatBodyClientReportMoveSpeedOverLimit,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v10; // rax
  proto_log::PositionLog *v11; // rcx
  std::__shared_ptr_access<proto_log::AntiCheatBodyClientReportMoveSpeedOverLimit,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v12; // rax
  proto_log::PositionLog *v13; // rcx
  std::__shared_ptr_access<proto_log::AntiCheatBodyClientReportMoveSpeedOverLimit,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v14; // rax
  proto_log::PositionLog *v15; // rcx
  std::__shared_ptr_access<proto_log::AntiCheatBodyClientReportMoveSpeedOverLimit,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v16; // rax
  std::__shared_ptr_access<proto_log::AntiCheatBodyClientReportMoveSpeedOverLimit,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v17; // rax
  std::__shared_ptr_access<proto_log::AntiCheatBodyClientReportMoveSpeedOverLimit,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v18; // rax
  std::__shared_ptr_access<proto_log::AntiCheatBodyClientReportMoveSpeedOverLimit,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v19; // rax
  Player *player; // r14
  uint32_t i; // [rsp+20h] [rbp-90h]
  uint32_t mask; // [rsp+24h] [rbp-8Ch]
  uint32_t maska; // [rsp+24h] [rbp-8Ch]
  uint64_t interval_velocity; // [rsp+28h] [rbp-88h]
  std::shared_ptr<google::protobuf::Message> v27; // [rsp+30h] [rbp-80h] BYREF
  char v28[112]; // [rsp+40h] [rbp-70h] BYREF

  v4 = (unsigned __int64)v28;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v5 = __asan_stack_malloc_0(64LL);
    if ( v5 )
      v4 = v5;
  }
  *(_QWORD *)v4 = 1102416563LL;
  *(_QWORD *)(v4 + 8) = "1 32 16 12 log_ptr:5932";
  *(_QWORD *)(v4 + 16) = PlayerAvatarComp::checkAndRecordClientReportMoveSpeedOverLimit;
  v6 = v4 >> 3;
  *(_DWORD *)(v6 + 2147450880) = -235802127;
  *(_DWORD *)(v6 + 2147450884) = -202178560;
  if ( *(_BYTE *)(((unsigned __int64)&motion_context->interval_velocity >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)motion_context + 20) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&motion_context->interval_velocity >> 3)
                                                                  + 0x7FFF8000) )
  {
    __asan_report_load4(&motion_context->interval_velocity);
  }
  if ( motion_context->interval_velocity )
  {
    if ( *(_BYTE *)(((unsigned __int64)&this->client_report_move_speed_over_limit_count_ >> 3) + 0x7FFF8000) != 0
      && (char)((((_BYTE)this + 28) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&this->client_report_move_speed_over_limit_count_ >> 3)
                                                          + 0x7FFF8000) )
    {
      __asan_report_load4(&this->client_report_move_speed_over_limit_count_);
    }
    v7 = ++this->client_report_move_speed_over_limit_count_;
    ServiceBox::findService<GameserverService>();
    GameserverService::getConfig((GameserverService *const)&v27);
    v8 = std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false> *const)&v27);
    if ( *(_BYTE *)(((unsigned __int64)&v8->security_config.client_report_move_speed_over_limit_max_count >> 3)
                  + 0x7FFF8000) != 0
      && *(_BYTE *)(((unsigned __int64)&v8->security_config.client_report_move_speed_over_limit_max_count >> 3)
                  + 0x7FFF8000) <= 3 )
    {
      v8 = (std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *)__asan_report_load4(&v8->security_config.client_report_move_speed_over_limit_max_count);
    }
    v9 = v7 > v8->security_config.client_report_move_speed_over_limit_max_count;
    std::shared_ptr<Config>::~shared_ptr((std::shared_ptr<Config> *const)&v27);
    if ( !v9 )
    {
      if ( *(_BYTE *)(((unsigned __int64)&motion_context->interval_velocity >> 3) + 0x7FFF8000) != 0
        && (char)((((_BYTE)motion_context + 20) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&motion_context->interval_velocity >> 3)
                                                                      + 0x7FFF8000) )
      {
        __asan_report_load4(&motion_context->interval_velocity);
      }
      interval_velocity = motion_context->interval_velocity;
      for ( i = 0; i <= 3; ++i )
      {
        mask = (unsigned __int16)interval_velocity;
        interval_velocity >>= 16;
        if ( mask )
        {
          common::tools::perf::make_shared<proto_log::AntiCheatBodyClientReportMoveSpeedOverLimit>();
          v10 = std::__shared_ptr_access<proto_log::AntiCheatBodyClientReportMoveSpeedOverLimit,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<proto_log::AntiCheatBodyClientReportMoveSpeedOverLimit,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 32));
          v11 = proto_log::AntiCheatBodyClientReportMoveSpeedOverLimit::mutable_pos(v10);
          if ( *(_BYTE *)(((unsigned __int64)pos >> 3) + 0x7FFF8000) != 0
            && (char)(((unsigned __int8)pos & 7) + 3) >= *(_BYTE *)(((unsigned __int64)pos >> 3) + 0x7FFF8000) )
          {
            __asan_report_load4(pos);
          }
          proto_log::PositionLog::set_x(v11, (int)pos->x);
          v12 = std::__shared_ptr_access<proto_log::AntiCheatBodyClientReportMoveSpeedOverLimit,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<proto_log::AntiCheatBodyClientReportMoveSpeedOverLimit,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 32));
          v13 = proto_log::AntiCheatBodyClientReportMoveSpeedOverLimit::mutable_pos(v12);
          if ( *(_BYTE *)(((unsigned __int64)&pos->y >> 3) + 0x7FFF8000) != 0
            && (char)((((_BYTE)pos + 4) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&pos->y >> 3) + 0x7FFF8000) )
          {
            __asan_report_load4(&pos->y);
          }
          proto_log::PositionLog::set_y(v13, (int)pos->y);
          v14 = std::__shared_ptr_access<proto_log::AntiCheatBodyClientReportMoveSpeedOverLimit,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<proto_log::AntiCheatBodyClientReportMoveSpeedOverLimit,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 32));
          v15 = proto_log::AntiCheatBodyClientReportMoveSpeedOverLimit::mutable_pos(v14);
          if ( *(_BYTE *)(((unsigned __int64)&pos->z >> 3) + 0x7FFF8000) != 0
            && (char)((((_BYTE)pos + 8) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&pos->z >> 3) + 0x7FFF8000) )
          {
            __asan_report_load4(&pos->z);
          }
          proto_log::PositionLog::set_z(v15, (int)pos->z);
          v16 = std::__shared_ptr_access<proto_log::AntiCheatBodyClientReportMoveSpeedOverLimit,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<proto_log::AntiCheatBodyClientReportMoveSpeedOverLimit,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 32));
          proto_log::AntiCheatBodyClientReportMoveSpeedOverLimit::set_motion_state(v16, motion_state);
          v17 = std::__shared_ptr_access<proto_log::AntiCheatBodyClientReportMoveSpeedOverLimit,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<proto_log::AntiCheatBodyClientReportMoveSpeedOverLimit,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 32));
          proto_log::AntiCheatBodyClientReportMoveSpeedOverLimit::set_brief_acc(v17, mask & 0xF);
          maska = mask >> 4;
          v18 = std::__shared_ptr_access<proto_log::AntiCheatBodyClientReportMoveSpeedOverLimit,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<proto_log::AntiCheatBodyClientReportMoveSpeedOverLimit,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 32));
          proto_log::AntiCheatBodyClientReportMoveSpeedOverLimit::set_brief_motion_state(v18, maska & 7);
          v19 = std::__shared_ptr_access<proto_log::AntiCheatBodyClientReportMoveSpeedOverLimit,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<proto_log::AntiCheatBodyClientReportMoveSpeedOverLimit,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 32));
          proto_log::AntiCheatBodyClientReportMoveSpeedOverLimit::set_brief_speed(v19, maska >> 3);
          if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
            __asan_report_load8(&this->player_);
          player = this->player_;
          std::shared_ptr<google::protobuf::Message>::shared_ptr<proto_log::AntiCheatBodyClientReportMoveSpeedOverLimit,void>(
            &v27,
            (const std::shared_ptr<proto_log::AntiCheatBodyClientReportMoveSpeedOverLimit> *)(v4 + 32));
          Player::printAntiCheatLog(player, ANTI_CHEAT_ACTION_CLIENT_REPORT_MOVE_SPEED_OVER_LIMIT, &v27);
          std::shared_ptr<google::protobuf::Message>::~shared_ptr(&v27);
          std::shared_ptr<proto_log::AntiCheatBodyClientReportMoveSpeedOverLimit>::~shared_ptr((std::shared_ptr<proto_log::AntiCheatBodyClientReportMoveSpeedOverLimit> *const)(v4 + 32));
        }
      }
    }
  }
  if ( v28 == (char *)v4 )
  {
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0LL;
  }
  else
  {
    *(_QWORD *)v4 = 1172321806LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
  }
};

// Line 5948: range 000000001719C6E4-000000001719C70A
void __cdecl PlayerAvatarComp::resetAllMoveSpeedCheck(PlayerAvatarComp *const this)
{
  PlayerAvatarComp::resetMoveSpeedCheck(this);
  PlayerAvatarComp::resetSceneTimeMoveSpeedCheck(this);
};

// Line 5954: range 000000001719C70C-000000001719C7FE
void __cdecl PlayerAvatarComp::resetSceneTimeMoveSpeedCheck(PlayerAvatarComp *const this)
{
  __int64 v1; // rsi
  Vector3 v2; // [rsp+14h] [rbp-Ch] BYREF

  if ( *(_BYTE *)(((unsigned __int64)&this->scene_time_last_check_move_speed_time_ms_ >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->scene_time_last_check_move_speed_time_ms_ >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_store4(
      &this->scene_time_last_check_move_speed_time_ms_,
      v1,
      &this->scene_time_last_check_move_speed_time_ms_);
  }
  this->scene_time_last_check_move_speed_time_ms_ = 0;
  Vector3::Vector3(&v2, 0.0, 0.0, 0.0);
  if ( (((unsigned __int8)this + 60) & 7) >= *(_BYTE *)(((unsigned __int64)&this->scene_time_last_check_move_speed_pos_ >> 3)
                                                      + 0x7FFF8000)
    && *(_BYTE *)(((unsigned __int64)&this->scene_time_last_check_move_speed_pos_ >> 3) + 0x7FFF8000) != 0
    || *(_BYTE *)((((unsigned __int64)&this->scene_time_last_check_move_speed_pos_.z + 3) >> 3) + 0x7FFF8000) != 0
    && (((unsigned __int8)this + 71) & 7) >= *(_BYTE *)((((unsigned __int64)&this->scene_time_last_check_move_speed_pos_.z
                                                        + 3) >> 3)
                                                      + 0x7FFF8000) )
  {
    __asan_report_store_n(&this->scene_time_last_check_move_speed_pos_, 12LL);
  }
  this->scene_time_last_check_move_speed_pos_ = v2;
};

// Line 5960: range 000000001719C800-000000001719C929
void __cdecl PlayerAvatarComp::resetMoveSpeedCheck(PlayerAvatarComp *const this)
{
  __int64 v1; // rsi
  __int64 v2; // rdx
  Vector3 v3; // [rsp+14h] [rbp-Ch] BYREF

  if ( *(_BYTE *)(((unsigned __int64)&this->last_check_move_speed_time_ms_ >> 3) + 0x7FFF8000) )
    __asan_report_store8(&this->last_check_move_speed_time_ms_, v1);
  this->last_check_move_speed_time_ms_ = 0LL;
  Vector3::Vector3(&v3, 0.0, 0.0, 0.0);
  if ( *(char *)(((unsigned __int64)&this->last_check_move_speed_pos_ >> 3) + 0x7FFF8000) < 0
    || *(_BYTE *)((((unsigned __int64)&this->last_check_move_speed_pos_.z + 3) >> 3) + 0x7FFF8000) != 0
    && (((unsigned __int8)this + 51) & 7) >= *(_BYTE *)((((unsigned __int64)&this->last_check_move_speed_pos_.z + 3) >> 3)
                                                      + 0x7FFF8000) )
  {
    __asan_report_store_n(&this->last_check_move_speed_pos_, 12LL);
  }
  this->last_check_move_speed_pos_ = v3;
  v2 = (*(_BYTE *)(((unsigned __int64)&this->last_check_fastest_move_type_ >> 3) + 0x7FFF8000) != 0) & (unsigned __int8)((char)((((_BYTE)this + 52) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&this->last_check_fastest_move_type_ >> 3) + 0x7FFF8000));
  if ( (_BYTE)v2 )
    __asan_report_store4(&this->last_check_fastest_move_type_, (((_BYTE)this + 52) & 7u) + 3, v2);
  this->last_check_fastest_move_type_ = 0;
};

// Line 5967: range 000000001719C92A-000000001719CB68
void __cdecl PlayerAvatarComp::checkAndFlushRecordedMoveSpeedOverLimitLog(
        PlayerAvatarComp *const this,
        bool is_on_disconnect)
{
  char v2; // bl
  uint32_t last_record_anti_cheat_body_move_speed_over_limit_time; // r12d
  std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v4; // rax
  char v5; // r12
  __int64 p_anti_cheat_body_move_speed_over_limit_log_ptr; // rsi
  Player *player; // rbx
  uint32_t v8; // ecx
  char v9; // dl
  __int64 v10; // rdx
  uint32_t now; // [rsp+1Ch] [rbp-24h]
  std::shared_ptr<proto_log::AntiCheatBodyMoveSpeedOverLimit> v13[2]; // [rsp+20h] [rbp-20h] BYREF

  now = common::tools::TimeUtils::getNow();
  v2 = 0;
  if ( is_on_disconnect )
    goto LABEL_6;
  if ( *(_BYTE *)(((unsigned __int64)&this->last_record_anti_cheat_body_move_speed_over_limit_time_ >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)this - 12) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&this->last_record_anti_cheat_body_move_speed_over_limit_time_ >> 3)
                                                        + 0x7FFF8000) )
  {
    __asan_report_load4(&this->last_record_anti_cheat_body_move_speed_over_limit_time_);
  }
  last_record_anti_cheat_body_move_speed_over_limit_time = this->last_record_anti_cheat_body_move_speed_over_limit_time_;
  ServiceBox::findService<GameserverService>();
  GameserverService::getConfig((GameserverService *const)v13);
  v2 = 1;
  v4 = std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false> *const)v13);
  if ( now < last_record_anti_cheat_body_move_speed_over_limit_time
           + ConstValueExcelConfigMgr::getCheckMoveSpeedAnticheatLogInterval(&v4->design_config.txt_config_mgr.const_value_config_mgr) )
    v5 = 1;
  else
LABEL_6:
    v5 = 0;
  if ( v2 )
    std::shared_ptr<Config>::~shared_ptr((std::shared_ptr<Config> *const)v13);
  if ( !v5 )
  {
    p_anti_cheat_body_move_speed_over_limit_log_ptr = (__int64)&this->anti_cheat_body_move_speed_over_limit_log_ptr_;
    if ( std::operator!=<proto_log::AntiCheatBodyMoveSpeedOverLimit>(
           0LL,
           &this->anti_cheat_body_move_speed_over_limit_log_ptr_) )
    {
      if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
        __asan_report_load8(&this->player_);
      player = this->player_;
      std::shared_ptr<google::protobuf::Message>::shared_ptr<proto_log::AntiCheatBodyMoveSpeedOverLimit,void>(
        (std::shared_ptr<google::protobuf::Message> *const)v13,
        &this->anti_cheat_body_move_speed_over_limit_log_ptr_);
      p_anti_cheat_body_move_speed_over_limit_log_ptr = 5LL;
      Player::printAntiCheatLog(player, ANTI_CHEAT_ACTION_MOVE_SPEED_OVER_LIMIT, (MessagePtr *)v13);
      std::shared_ptr<google::protobuf::Message>::~shared_ptr((std::shared_ptr<google::protobuf::Message> *const)v13);
    }
    if ( is_on_disconnect )
      v8 = 0;
    else
      v8 = now;
    v9 = *(_BYTE *)(((unsigned __int64)&this->last_record_anti_cheat_body_move_speed_over_limit_time_ >> 3) + 0x7FFF8000);
    LOBYTE(p_anti_cheat_body_move_speed_over_limit_log_ptr) = v9 != 0;
    v10 = (v9 != 0) & (unsigned __int8)((char)((((_BYTE)this - 12) & 7) + 3) >= v9);
    if ( (_BYTE)v10 )
      __asan_report_store4(
        &this->last_record_anti_cheat_body_move_speed_over_limit_time_,
        p_anti_cheat_body_move_speed_over_limit_log_ptr,
        v10);
    this->last_record_anti_cheat_body_move_speed_over_limit_time_ = v8;
    std::shared_ptr<proto_log::AntiCheatBodyMoveSpeedOverLimit>::shared_ptr(v13, 0LL);
    std::shared_ptr<proto_log::AntiCheatBodyMoveSpeedOverLimit>::operator=(
      &this->anti_cheat_body_move_speed_over_limit_log_ptr_,
      v13);
    std::shared_ptr<proto_log::AntiCheatBodyMoveSpeedOverLimit>::~shared_ptr(v13);
  }
};

// Line 5982: range 000000001719CB6A-000000001719CD98
void __cdecl PlayerAvatarComp::checkAndFlushRecordedSceneTimeMoveSpeedOverLimitLog(
        PlayerAvatarComp *const this,
        bool is_on_disconnect)
{
  char v2; // bl
  uint32_t last_record_anti_cheat_body_scene_time_move_speed_over_limit_time; // r12d
  std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v4; // rax
  char v5; // r12
  __int64 p_anti_cheat_body_scene_time_move_speed_over_limit_log_ptr; // rsi
  Player *player; // rbx
  __int64 v8; // rdx
  char v9; // al
  uint32_t now; // [rsp+1Ch] [rbp-24h]
  std::shared_ptr<proto_log::AntiCheatBodySceneTimeMoveSpeedOverLimit> v12[2]; // [rsp+20h] [rbp-20h] BYREF

  now = common::tools::TimeUtils::getNow();
  v2 = 0;
  if ( is_on_disconnect )
    goto LABEL_6;
  if ( *(_BYTE *)(((unsigned __int64)&this->last_record_anti_cheat_body_scene_time_move_speed_over_limit_time_ >> 3)
                + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->last_record_anti_cheat_body_scene_time_move_speed_over_limit_time_ >> 3)
                + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4(&this->last_record_anti_cheat_body_scene_time_move_speed_over_limit_time_);
  }
  last_record_anti_cheat_body_scene_time_move_speed_over_limit_time = this->last_record_anti_cheat_body_scene_time_move_speed_over_limit_time_;
  ServiceBox::findService<GameserverService>();
  GameserverService::getConfig((GameserverService *const)v12);
  v2 = 1;
  v4 = std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false> *const)v12);
  if ( now < last_record_anti_cheat_body_scene_time_move_speed_over_limit_time
           + ConstValueExcelConfigMgr::getCheckSceneTimeMoveSpeedAnticheatLogInterval(&v4->design_config.txt_config_mgr.const_value_config_mgr) )
    v5 = 1;
  else
LABEL_6:
    v5 = 0;
  if ( v2 )
    std::shared_ptr<Config>::~shared_ptr((std::shared_ptr<Config> *const)v12);
  if ( !v5 )
  {
    p_anti_cheat_body_scene_time_move_speed_over_limit_log_ptr = (__int64)&this->anti_cheat_body_scene_time_move_speed_over_limit_log_ptr_;
    if ( std::operator!=<proto_log::AntiCheatBodySceneTimeMoveSpeedOverLimit>(
           0LL,
           &this->anti_cheat_body_scene_time_move_speed_over_limit_log_ptr_) )
    {
      if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
        __asan_report_load8(&this->player_);
      player = this->player_;
      std::shared_ptr<google::protobuf::Message>::shared_ptr<proto_log::AntiCheatBodySceneTimeMoveSpeedOverLimit,void>(
        (std::shared_ptr<google::protobuf::Message> *const)v12,
        &this->anti_cheat_body_scene_time_move_speed_over_limit_log_ptr_);
      p_anti_cheat_body_scene_time_move_speed_over_limit_log_ptr = 20LL;
      Player::printAntiCheatLog(player, ANTI_CHEAT_ACTION_SCENE_TIME_MOVE_SPEED_OVER_LIMIT, (MessagePtr *)v12);
      std::shared_ptr<google::protobuf::Message>::~shared_ptr((std::shared_ptr<google::protobuf::Message> *const)v12);
    }
    if ( is_on_disconnect )
      v8 = 0LL;
    else
      v8 = now;
    v9 = *(_BYTE *)(((unsigned __int64)&this->last_record_anti_cheat_body_scene_time_move_speed_over_limit_time_ >> 3)
                  + 0x7FFF8000);
    if ( v9 != 0 && v9 <= 3 )
    {
      LOBYTE(p_anti_cheat_body_scene_time_move_speed_over_limit_log_ptr) = v9 != 0;
      __asan_report_store4(
        &this->last_record_anti_cheat_body_scene_time_move_speed_over_limit_time_,
        p_anti_cheat_body_scene_time_move_speed_over_limit_log_ptr,
        v8);
    }
    this->last_record_anti_cheat_body_scene_time_move_speed_over_limit_time_ = v8;
    std::shared_ptr<proto_log::AntiCheatBodySceneTimeMoveSpeedOverLimit>::shared_ptr(v12, 0LL);
    std::shared_ptr<proto_log::AntiCheatBodySceneTimeMoveSpeedOverLimit>::operator=(
      &this->anti_cheat_body_scene_time_move_speed_over_limit_log_ptr_,
      v12);
    std::shared_ptr<proto_log::AntiCheatBodySceneTimeMoveSpeedOverLimit>::~shared_ptr(v12);
  }
};

// Line 5997: range 000000001719CD9A-000000001719CE09
bool __cdecl PlayerAvatarComp::checkAttackDamageAntiCheatReportFreqValid(PlayerAvatarComp *const this)
{
  uint32_t Now; // ecx
  AttackDamageReportConfig *attack_damage_report_config; // [rsp+18h] [rbp-28h]
  std::shared_ptr<Config> v4[2]; // [rsp+20h] [rbp-20h] BYREF

  ServiceBox::findService<GameserverService>();
  GameserverService::getConfig((GameserverService *const)v4);
  attack_damage_report_config = &std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false> *const)v4)->security_config.attack_damage_report_config;
  std::shared_ptr<Config>::~shared_ptr(v4);
  Now = common::tools::TimeUtils::getNow();
  return SecurityUtils::checkAndUpdateAntiCheatLogCountRecord(
           (const BaseAntiCheatLogConfig *)attack_damage_report_config,
           Now,
           &this->attack_damage_anticheat_record_);
};

// Line 6003: range 000000001719CE0A-000000001719D2F2
// local variable allocation has failed, the output may be wrong!
__int64 __fastcall PlayerAvatarComp::addFlycloak(PlayerAvatarComp *const this, uint32_t flycloak_id, uint32_t reason)
{
  unsigned __int64 v3; // r12
  __int64 v4; // rax
  _DWORD *v5; // r13
  std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v6; // rax
  bool v7; // r14
  common::milog::MiLogStream *v8; // rax
  __int64 result; // rax
  std::pair<std::_Rb_tree_const_iterator<unsigned int>,bool> v10; // rax
  std::__shared_ptr_access<proto::AvatarGainFlycloakNotify,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v11; // rax
  Player *v12; // r14
  PlayerBasicComp *BasicComp; // rax
  std::__shared_ptr_access<proto_log::PlayerLogBodyAvatarGainFlycloak,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v14; // rax
  std::__shared_ptr_access<proto_log::PlayerLogBodyAvatarGainFlycloak,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v15; // rax
  Player *v16; // r14
  std::string reasona; // [rsp+0h] [rbp-100h] OVERLAPPED BYREF
  std::shared_ptr<google::protobuf::Message> v18; // [rsp+20h] [rbp-E0h] BYREF
  common::milog::MiLogStream v19; // [rsp+30h] [rbp-D0h] BYREF
  char v20[176]; // [rsp+50h] [rbp-B0h] BYREF

  reasona._M_string_length = (std::string::size_type)this;
  reasona._M_dataplus._M_p = (std::string::pointer)__PAIR64__(flycloak_id, reason);
  v3 = (unsigned __int64)v20;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_1(128LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "4 32 1 11 holder:6016 48 4 16 flycloak_id:6002 64 16 15 notify_ptr:6012 96 16 12 log_ptr:6017";
  *(_QWORD *)(v3 + 16) = PlayerAvatarComp::addFlycloak;
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = -234556927;
  v5[536862722] = -219021312;
  v5[536862723] = -202178560;
  *(_DWORD *)(v3 + 48) = HIDWORD(reasona._M_dataplus._M_p);
  ServiceBox::findService<GameserverService>();
  GameserverService::getConfig((GameserverService *const)&v18);
  v6 = std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false> *const)&v18);
  v7 = data::AvatarFashionExcelConfigMgrBase::findAvatarFlycloakExcelConfig(
         &v6->design_config.txt_config_mgr.avatar_fashion_config_mgr,
         *(_DWORD *)(v3 + 48)) == 0LL;
  std::shared_ptr<Config>::~shared_ptr((std::shared_ptr<Config> *const)&v18);
  if ( v7 )
  {
    common::milog::MiLogStream::create(
      &v19,
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/player/avatar/player_avatar_comp.cpp",
      "addFlycloak",
      6007);
    v8 = common::milog::MiLogStream::operator<<<char [34],(char *[34])0>(
           &v19,
           (const char (*)[34])"flycloak not found, flycloak_id: ");
    common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v8, (const unsigned int *)(v3 + 48));
    common::milog::MiLogStream::~MiLogStream(&v19);
    result = 162LL;
  }
  else
  {
    v10 = std::set<unsigned int>::emplace<unsigned int &>(
            (std::set<unsigned int> *const)(reasona._M_string_length + 1112),
            (unsigned int *)(v3 + 48),
            (unsigned int *)(reasona._M_string_length + 1112));
    if ( v10.second )
    {
      common::tools::perf::make_shared<proto::AvatarGainFlycloakNotify>();
      v11 = std::__shared_ptr_access<proto::AvatarGainFlycloakNotify,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<proto::AvatarGainFlycloakNotify,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 64));
      proto::AvatarGainFlycloakNotify::set_flycloak_id(v11, *(_DWORD *)(v3 + 48));
      if ( *(_BYTE *)(((reasona._M_string_length + 24) >> 3) + 0x7FFF8000) )
        __asan_report_load8(reasona._M_string_length + 24);
      v12 = *(Player **)(reasona._M_string_length + 24);
      std::dynamic_pointer_cast<google::protobuf::Message const,proto::AvatarGainFlycloakNotify>((const std::shared_ptr<proto::AvatarGainFlycloakNotify> *)&v18);
      Player::sendMessage(v12, (common::minet::ConstMessagePtr *)&v18, 0LL);
      std::shared_ptr<google::protobuf::Message const>::~shared_ptr((std::shared_ptr<const google::protobuf::Message> *const)&v18);
      if ( *(_BYTE *)(((reasona._M_string_length + 24) >> 3) + 0x7FFF8000) )
        __asan_report_load8(reasona._M_string_length + 24);
      BasicComp = Player::getBasicComp(*(Player *const *)(reasona._M_string_length + 24));
      PlayerBasicComp::getNextTransNo[abi:cxx11]((std::string *)&v19, BasicComp);
      StatLogUtils::ContextHolder::ContextHolder((StatLogUtils::ContextHolder *const)(v3 + 32), 0x653u, reasona);
      std::string::~string(&v19);
      common::tools::perf::make_shared<proto_log::PlayerLogBodyAvatarGainFlycloak>();
      v14 = std::__shared_ptr_access<proto_log::PlayerLogBodyAvatarGainFlycloak,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<proto_log::PlayerLogBodyAvatarGainFlycloak,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 96));
      proto_log::PlayerLogBodyAvatarGainFlycloak::set_flycloak_id(v14, *(_DWORD *)(v3 + 48));
      v15 = std::__shared_ptr_access<proto_log::PlayerLogBodyAvatarGainFlycloak,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<proto_log::PlayerLogBodyAvatarGainFlycloak,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 96));
      proto_log::PlayerLogBodyAvatarGainFlycloak::set_gain_reason(
        v15,
        (google::protobuf::uint32)reasona._M_dataplus._M_p);
      if ( *(_BYTE *)(((reasona._M_string_length + 24) >> 3) + 0x7FFF8000) )
        __asan_report_load8(reasona._M_string_length + 24);
      v16 = *(Player **)(reasona._M_string_length + 24);
      std::shared_ptr<google::protobuf::Message>::shared_ptr(&v18, 0LL);
      std::shared_ptr<google::protobuf::Message>::shared_ptr<proto_log::PlayerLogBodyAvatarGainFlycloak,void>(
        (std::shared_ptr<google::protobuf::Message> *const)&reasona._anon_0,
        (const std::shared_ptr<proto_log::PlayerLogBodyAvatarGainFlycloak> *)(v3 + 96));
      Player::printStatLog(v16, (MessagePtr *)&reasona._anon_0, &v18, 0xEu);
      std::shared_ptr<google::protobuf::Message>::~shared_ptr((std::shared_ptr<google::protobuf::Message> *const)&reasona._anon_0);
      std::shared_ptr<google::protobuf::Message>::~shared_ptr(&v18);
      std::shared_ptr<proto_log::PlayerLogBodyAvatarGainFlycloak>::~shared_ptr((std::shared_ptr<proto_log::PlayerLogBodyAvatarGainFlycloak> *const)(v3 + 96));
      StatLogUtils::ContextHolder::~ContextHolder((StatLogUtils::ContextHolder *const)(v3 + 32));
      std::shared_ptr<proto::AvatarGainFlycloakNotify>::~shared_ptr((std::shared_ptr<proto::AvatarGainFlycloakNotify> *const)(v3 + 64));
    }
    result = 0LL;
  }
  if ( v20 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 6026: range 000000001719D382-000000001719D49A
uint32_t __cdecl PlayerAvatarComp::getFullSatiationTeamAvatarNum(PlayerAvatarComp *const this)
{
  unsigned __int64 v1; // rbx
  __int64 v2; // rax
  unsigned __int64 v3; // r12
  uint32_t result; // eax
  std::function<ForeachPolicy(Avatar&)> p_func; // [rsp+10h] [rbp-80h] BYREF
  char v6[96]; // [rsp+30h] [rbp-60h] BYREF

  v1 = (unsigned __int64)v6;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_0(64LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "1 32 4 14 total_num:6027";
  *(_QWORD *)(v1 + 16) = PlayerAvatarComp::getFullSatiationTeamAvatarNum;
  v3 = v1 >> 3;
  *(_DWORD *)(v3 + 2147450880) = -235802127;
  *(_DWORD *)(v3 + 2147450884) = -202116348;
  *(_DWORD *)(v1 + 32) = 0;
  std::function<ForeachPolicy ()(Avatar &)>::function<PlayerAvatarComp::getFullSatiationTeamAvatarNum(void)::{lambda(Avatar &)#1},void,void>(
    &p_func,
    (PlayerAvatarComp::getFullSatiationTeamAvatarNum::<lambda(Avatar&)>)(v1 + 32));
  PlayerAvatarComp::foreachMyAvatarInSceneTeam(this, &p_func);
  std::function<ForeachPolicy ()(Avatar &)>::~function(&p_func);
  result = *(_DWORD *)(v1 + 32);
  if ( v6 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 6028: range 000000001719D2F4-000000001719D380
ForeachPolicy __cdecl PlayerAvatarComp::getFullSatiationTeamAvatarNum(void)::{lambda(Avatar &)#1}::operator()(
        const PlayerAvatarComp::getFullSatiationTeamAvatarNum::<lambda(Avatar&)> *const __closure,
        Avatar *avatar)
{
  uint32_t *total_num; // rax

  if ( Avatar::isSatiationFull(avatar) )
  {
    if ( *(_BYTE *)(((unsigned __int64)__closure >> 3) + 0x7FFF8000) )
      __asan_report_load8(__closure);
    total_num = __closure->__total_num;
    if ( *(_BYTE *)(((unsigned __int64)__closure->__total_num >> 3) + 0x7FFF8000) != 0
      && (char)(((__int64)__closure->__total_num & 7) + 3) >= *(_BYTE *)(((unsigned __int64)__closure->__total_num >> 3)
                                                                       + 0x7FFF8000) )
    {
      total_num = (uint32_t *)__asan_report_load4(__closure->__total_num);
    }
    ++*total_num;
  }
  return 0;
};

// Line 6041: range 000000001719D49C-000000001719D8A3
void __cdecl PlayerAvatarComp::gmShowAvatarsBornTime(PlayerAvatarComp *const this)
{
  unsigned __int64 v1; // r12
  __int64 v2; // rax
  _DWORD *v3; // rbx
  AvatarExcelConfigMgr *p_avatar_config_mgr; // r14
  std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v5; // rax
  uint32_t AvatarId; // eax
  __int64 v7; // rax
  __int64 v8; // r14
  std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v9; // rax
  uint32_t BornTime; // eax
  __int64 v11; // rax
  Player *player; // r14
  std::map<long unsigned int,std::shared_ptr<Avatar>>::iterator __for_begin; // [rsp+18h] [rbp-298h] BYREF
  std::map<long unsigned int,std::shared_ptr<Avatar>>::iterator __for_end; // [rsp+20h] [rbp-290h] BYREF
  std::map<long unsigned int,std::shared_ptr<Avatar>> *__for_range; // [rsp+28h] [rbp-288h]
  std::pair<long unsigned int const,std::shared_ptr<Avatar> > *__in; // [rsp+30h] [rbp-280h]
  std::tuple_element<0,std::pair<long unsigned int const,std::shared_ptr<Avatar> > >::type *guid; // [rsp+38h] [rbp-278h]
  std::tuple_element<1,std::pair<long unsigned int const,std::shared_ptr<Avatar> > >::type *avatar_ptr; // [rsp+40h] [rbp-270h]
  const data::AvatarExcelConfig *avatar_conf_ptr; // [rsp+48h] [rbp-268h]
  std::shared_ptr<Config> v20; // [rsp+50h] [rbp-260h] BYREF
  std::string server_log; // [rsp+60h] [rbp-250h] BYREF
  char v22[560]; // [rsp+80h] [rbp-230h] BYREF

  v1 = (unsigned __int64)v22;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_3(512LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "1 48 392 7 ss:6042";
  *(_QWORD *)(v1 + 16) = PlayerAvatarComp::gmShowAvatarsBornTime;
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = 61937;
  v3[536862733] = -218103808;
  v3[536862734] = -202116109;
  v3[536862735] = -202116109;
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream(v1 + 48);
  __for_range = &this->avatar_map_;
  __for_begin._M_node = std::map<unsigned long,std::shared_ptr<Avatar>>::begin(&this->avatar_map_)._M_node;
  __for_end._M_node = std::map<unsigned long,std::shared_ptr<Avatar>>::end(&this->avatar_map_)._M_node;
  while ( std::operator!=(&__for_begin, &__for_end) )
  {
    __in = std::_Rb_tree_iterator<std::pair<unsigned long const,std::shared_ptr<Avatar>>>::operator*(&__for_begin);
    guid = std::get<0ul,unsigned long const,std::shared_ptr<Avatar>>(__in);
    avatar_ptr = std::get<1ul,unsigned long const,std::shared_ptr<Avatar>>(__in);
    if ( !std::operator==<Avatar>(avatar_ptr, 0LL) )
    {
      ServiceBox::findService<GameserverService>();
      GameserverService::getConfig((GameserverService *const)&v20);
      p_avatar_config_mgr = &std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false> *const)&v20)->design_config.txt_config_mgr.avatar_config_mgr;
      v5 = std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false> *const)avatar_ptr);
      AvatarId = Avatar::getAvatarId(v5);
      avatar_conf_ptr = data::AvatarExcelConfigMgrBase::findAvatarExcelConfig(p_avatar_config_mgr, AvatarId);
      std::shared_ptr<Config>::~shared_ptr(&v20);
      if ( avatar_conf_ptr )
      {
        v7 = std::operator<<<char>(v1 + 64, &avatar_conf_ptr->name);
        v8 = std::operator<<<std::char_traits<char>>(v7, &unk_26043920);
        v9 = std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false> *const)avatar_ptr);
        BornTime = Avatar::getBornTime(v9);
        common::tools::TimeUtils::getStrByTime[abi:cxx11](&server_log, BornTime);
        v11 = std::operator<<<char>(v8, &server_log);
        std::ostream::operator<<(v11, &std::endl<char,std::char_traits<char>>);
        std::string::~string(&server_log);
      }
    }
    std::_Rb_tree_iterator<std::pair<unsigned long const,std::shared_ptr<Avatar>>>::operator++(&__for_begin);
  }
  if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
    __asan_report_load8(&this->player_);
  player = this->player_;
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::str(&server_log, v1 + 48);
  Player::notifyGMServerLog(player, SERVER_LOG_NONE, LOG_LEVEL_WARNING_0, &server_log);
  std::string::~string(&server_log);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream(v1 + 48);
  if ( v22 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8034) = 0LL;
    *(_DWORD *)((v1 >> 3) + 0x7FFF803C) = 0;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8020) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8028) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8030) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8038) = 0xF5F5F5F5F5F5F5F5LL;
  }
};

// Line 6058: range 000000001719D8A4-000000001719DB97
void __fastcall PlayerAvatarComp::checkFetterRelatedAvatars(
        const PlayerAvatarComp *const this,
        uint32_t config_id,
        const std::unordered_map<unsigned int,std::unordered_set<unsigned int>> *fetter_related_avatars_map,
        const std::vector<data::FetterCondType> *fetter_cond_type_vec)
{
  unsigned __int64 v4; // r12
  __int64 v5; // rax
  _DWORD *v6; // r13
  std::__shared_ptr_access<FormalAvatar,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v7; // rax
  std::__shared_ptr_access<FormalAvatar,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v9; // rax
  FetterComp *FetterComp; // rax
  unsigned int value; // [rsp+24h] [rbp-DCh] BYREF
  std::map<long unsigned int,std::shared_ptr<Avatar>>::const_iterator __for_begin; // [rsp+28h] [rbp-D8h] BYREF
  std::map<long unsigned int,std::shared_ptr<Avatar>>::const_iterator __for_end; // [rsp+30h] [rbp-D0h] BYREF
  const std::unordered_set<unsigned int> *related_avatar_id_set; // [rsp+38h] [rbp-C8h]
  const std::map<long unsigned int,std::shared_ptr<Avatar>> *__for_range; // [rsp+40h] [rbp-C0h]
  const std::pair<long unsigned int const,std::shared_ptr<Avatar> > *v18; // [rsp+48h] [rbp-B8h]
  std::tuple_element<0,const std::pair<long unsigned int const,std::shared_ptr<Avatar> > >::type *avatar_guid; // [rsp+50h] [rbp-B0h]
  std::tuple_element<1,const std::pair<long unsigned int const,std::shared_ptr<Avatar> > >::type *avatar_ptr; // [rsp+58h] [rbp-A8h]
  char v21[160]; // [rsp+60h] [rbp-A0h] BYREF

  v4 = (unsigned __int64)v21;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v5 = __asan_stack_malloc_1(128LL);
    if ( v5 )
      v4 = v5;
  }
  *(_QWORD *)v4 = 1102416563LL;
  *(_QWORD *)(v4 + 8) = "3 48 4 14 config_id:6057 64 8 9 iter:6059 96 16 22 formal_avatar_ptr:6067";
  *(_QWORD *)(v4 + 16) = PlayerAvatarComp::checkFetterRelatedAvatars;
  v6 = (_DWORD *)(v4 >> 3);
  v6[536862720] = -235802127;
  v6[536862721] = -234556943;
  v6[536862722] = -218959360;
  v6[536862723] = -202178560;
  *(_DWORD *)(v4 + 48) = config_id;
  *(std::unordered_map<unsigned int,std::unordered_set<unsigned int>>::const_iterator *)(v4 + 64) = std::unordered_map<unsigned int,std::unordered_set<unsigned int>>::find(fetter_related_avatars_map, (const std::unordered_map<unsigned int,std::unordered_set<unsigned int>>::key_type *)(v4 + 48));
  __for_end._M_node = (std::_Rb_tree_const_iterator<std::pair<long unsigned int const,std::shared_ptr<Avatar> > >::_Base_ptr)std::unordered_map<unsigned int,std::unordered_set<unsigned int>>::end(fetter_related_avatars_map)._M_cur;
  if ( !std::__detail::operator==<std::pair<unsigned int const,std::unordered_set<unsigned int>>,false>(
          (const std::__detail::_Node_iterator_base<std::pair<unsigned int const,std::unordered_set<unsigned int> >,false> *)(v4 + 64),
          (const std::__detail::_Node_iterator_base<std::pair<unsigned int const,std::unordered_set<unsigned int> >,false> *)&__for_end) )
  {
    related_avatar_id_set = &std::__detail::_Node_const_iterator<std::pair<unsigned int const,std::unordered_set<unsigned int>>,false,false>::operator->((const std::__detail::_Node_const_iterator<std::pair<unsigned int const,std::unordered_set<unsigned int> >,false,false> *const)(v4 + 64))->second;
    __for_range = &this->avatar_map_;
    __for_begin._M_node = std::map<unsigned long,std::shared_ptr<Avatar>>::begin(&this->avatar_map_)._M_node;
    __for_end._M_node = std::map<unsigned long,std::shared_ptr<Avatar>>::end(__for_range)._M_node;
    while ( std::operator!=(&__for_begin, &__for_end) )
    {
      v18 = std::_Rb_tree_const_iterator<std::pair<unsigned long const,std::shared_ptr<Avatar>>>::operator*(&__for_begin);
      avatar_guid = std::get<0ul,unsigned long const,std::shared_ptr<Avatar>>(v18);
      avatar_ptr = (std::tuple_element<1,const std::pair<long unsigned int const,std::shared_ptr<Avatar> > >::type *)std::get<1ul,unsigned long const,std::shared_ptr<Avatar>>(v18);
      std::dynamic_pointer_cast<FormalAvatar,Avatar>((const std::shared_ptr<Avatar> *)(v4 + 96));
      if ( std::operator!=<FormalAvatar>(0LL, (const std::shared_ptr<FormalAvatar> *)(v4 + 96)) )
      {
        v7 = std::__shared_ptr_access<FormalAvatar,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<FormalAvatar,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 96));
        value = Avatar::getAvatarId(v7);
        if ( common::tools::MiscUtils::isContains<std::unordered_set<unsigned int> const,unsigned int>(
               related_avatar_id_set,
               &value) )
        {
          v9 = std::__shared_ptr_access<FormalAvatar,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<FormalAvatar,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 96));
          FetterComp = FormalAvatar::getFetterComp(v9);
          FetterComp::checkRefreshFetterCompAndNotifyClient(FetterComp, fetter_cond_type_vec);
        }
      }
      std::shared_ptr<FormalAvatar>::~shared_ptr((std::shared_ptr<FormalAvatar> *const)(v4 + 96));
      std::_Rb_tree_const_iterator<std::pair<unsigned long const,std::shared_ptr<Avatar>>>::operator++(&__for_begin);
    }
  }
  if ( v21 == (char *)v4 )
  {
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v4 = 1172321806LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
};

// Line 6076: range 000000001719DB98-000000001719DCB3
bool __cdecl PlayerAvatarComp::isKilledByEntity(const PlayerAvatarComp *const this, uint32_t entity_id)
{
  common::milog::MiLogStream v3; // [rsp+10h] [rbp-30h] BYREF

  common::milog::MiLogStream::create(
    &v3,
    &common::milog::MiLogDefault::default_log_obj_,
    1u,
    "./src/player/avatar/player_avatar_comp.cpp",
    "isKilledByEntity",
    6078);
  if ( *(_BYTE *)(((unsigned __int64)&this->murderer_top_owner_entity_id_ >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)this - 60) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&this->murderer_top_owner_entity_id_ >> 3)
                                                        + 0x7FFF8000) )
  {
    __asan_report_load4(&this->murderer_top_owner_entity_id_);
  }
  common::milog::MiLogStream::operator()(&v3, off_26043A00, this->murderer_top_owner_entity_id_, entity_id);
  common::milog::MiLogStream::~MiLogStream(&v3);
  if ( *(_BYTE *)(((unsigned __int64)&this->murderer_top_owner_entity_id_ >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)this - 60) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&this->murderer_top_owner_entity_id_ >> 3)
                                                        + 0x7FFF8000) )
  {
    __asan_report_load4(&this->murderer_top_owner_entity_id_);
  }
  return entity_id == this->murderer_top_owner_entity_id_;
};

// Line 6084: range 000000001719DCB4-000000001719DE66
PlayerAvatarComp *__fastcall PlayerAvatarComp::queryActiveGroup(PlayerAvatarComp *const this, __int64 group_id, int a3)
{
  unsigned __int64 v3; // rbx
  __int64 v4; // rax
  _DWORD *v5; // r12
  std::__detail::_Node_iterator_base<std::pair<unsigned int const,std::weak_ptr<Group> >,false> __y; // [rsp+28h] [rbp-88h] BYREF
  char v9[128]; // [rsp+30h] [rbp-80h] BYREF

  v3 = (unsigned __int64)v9;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_1(96LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "2 48 4 13 group_id:6083 64 8 9 iter:6085";
  *(_QWORD *)(v3 + 16) = PlayerAvatarComp::queryActiveGroup;
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = -234556943;
  v5[536862722] = -202116352;
  *(_DWORD *)(v3 + 48) = a3;
  *(std::unordered_map<unsigned int,std::weak_ptr<Group>>::iterator *)(v3 + 64) = std::unordered_map<unsigned int,std::weak_ptr<Group>>::find(
                                                                                    (std::unordered_map<unsigned int,std::weak_ptr<Group>> *const)(group_id + 592),
                                                                                    (const std::unordered_map<unsigned int,std::weak_ptr<Group>>::key_type *)(v3 + 48));
  __y._M_cur = std::unordered_map<unsigned int,std::weak_ptr<Group>>::end((std::unordered_map<unsigned int,std::weak_ptr<Group>> *const)(group_id + 592))._M_cur;
  if ( std::__detail::operator==<std::pair<unsigned int const,std::weak_ptr<Group>>,false>(
         (const std::__detail::_Node_iterator_base<std::pair<unsigned int const,std::weak_ptr<Group> >,false> *)(v3 + 64),
         &__y) )
  {
    std::shared_ptr<Group>::shared_ptr((std::shared_ptr<Group> *const)this, 0LL);
  }
  else
  {
    std::__detail::_Node_iterator<std::pair<unsigned int const,std::weak_ptr<Group>>,false,false>::operator->((const std::__detail::_Node_iterator<std::pair<unsigned int const,std::weak_ptr<Group> >,false,false> *const)(v3 + 64));
    if ( *(_WORD *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
      __asan_report_store16(this);
    std::weak_ptr<Group>::lock((const std::weak_ptr<Group> *const)this);
  }
  if ( v9 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8008) = 0;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8008) = -168430091;
  }
  return this;
};

// Line 6095: range 000000001719DE68-000000001719E75A
__int64 __fastcall PlayerAvatarComp::takeAvatarPromoteReward(
        PlayerAvatarComp *const this,
        uint64_t guid,
        uint32_t promote_level,
        uint32_t *reward_id)
{
  unsigned __int64 v4; // r13
  __int64 v5; // rax
  _DWORD *v6; // r12
  common::milog::MiLogStream *v7; // rax
  unsigned int v8; // r14d
  AvatarExcelConfigMgr *p_avatar_config_mgr; // r14
  std::__shared_ptr_access<FormalAvatar,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v10; // rax
  uint32_t AvatarId; // eax
  common::milog::MiLogStream *v12; // r14
  std::__shared_ptr_access<FormalAvatar,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v13; // rax
  common::milog::MiLogStream *v14; // rax
  common::milog::MiLogStream *v15; // rax
  std::__shared_ptr_access<FormalAvatar,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v16; // rax
  common::milog::MiLogStream *v17; // rax
  common::milog::MiLogStream *v18; // rax
  common::milog::MiLogStream *v19; // r14
  std::__shared_ptr_access<FormalAvatar,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v20; // rax
  AvatarExcelConfigMgr *v21; // r15
  uint32_t v22; // r14d
  std::__shared_ptr_access<FormalAvatar,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v23; // rax
  uint32_t v24; // eax
  common::milog::MiLogStream *v25; // r14
  std::__shared_ptr_access<FormalAvatar,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v26; // rax
  common::milog::MiLogStream *v27; // rax
  common::milog::MiLogStream *v28; // rax
  common::milog::MiLogStream *v29; // rax
  common::milog::MiLogStream *v30; // r14
  std::__shared_ptr_access<FormalAvatar,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v31; // rax
  FormalAvatar *v32; // rax
  common::milog::MiLogStream *v33; // rax
  common::milog::MiLogStream *v34; // rax
  common::milog::MiLogStream *v35; // rax
  PlayerItemComp *ItemComp; // rcx
  common::milog::MiLogStream *v37; // rax
  PlayerItemComp *v38; // rdi
  FormalAvatar *v39; // rax
  __int64 result; // rax
  unsigned int val; // [rsp+38h] [rbp-138h] BYREF
  int32_t ret; // [rsp+3Ch] [rbp-134h]
  unsigned __int64 v45; // [rsp+40h] [rbp-130h] BYREF
  const data::AvatarExcelConfig *avatar_config_ptr; // [rsp+48h] [rbp-128h]
  std::shared_ptr<Config> v47; // [rsp+50h] [rbp-120h] BYREF
  common::milog::MiLogStream v48; // [rsp+60h] [rbp-110h] BYREF
  char v49[240]; // [rsp+80h] [rbp-F0h] BYREF

  v4 = (unsigned __int64)v49;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v5 = __asan_stack_malloc_2(192LL);
    if ( v5 )
      v4 = v5;
  }
  *(_QWORD *)v4 = 1102416563LL;
  *(_QWORD *)(v4 + 8) = "4 48 4 18 promote_level:6094 64 8 9 guid:6094 96 16 22 formal_avatar_ptr:6096 128 24 18 action_reason:6129";
  *(_QWORD *)(v4 + 16) = PlayerAvatarComp::takeAvatarPromoteReward;
  v6 = (_DWORD *)(v4 >> 3);
  v6[536862720] = -235802127;
  v6[536862721] = -234556943;
  v6[536862722] = -218959360;
  v6[536862723] = -219021312;
  v6[536862724] = -218103808;
  v6[536862725] = -202116109;
  *(_QWORD *)(v4 + 64) = guid;
  *(_DWORD *)(v4 + 48) = promote_level;
  PlayerAvatarComp::findFormalAvatar((const PlayerAvatarComp *const)(v4 + 96), (uint64_t)this, *(_QWORD *)(v4 + 64));
  if ( std::operator==<FormalAvatar>(0LL, (const std::shared_ptr<FormalAvatar> *)(v4 + 96)) )
  {
    common::milog::MiLogStream::create(
      &v48,
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/player/avatar/player_avatar_comp.cpp",
      "takeAvatarPromoteReward",
      6099);
    v7 = common::milog::MiLogStream::operator<<<char [31],(char *[31])0>(
           &v48,
           (const char (*)[31])"findFormalAvatar failed, guid:");
    common::milog::MiLogStream::operator<<<unsigned long,(unsigned long *)0>(v7, (const unsigned __int64 *)(v4 + 64));
    common::milog::MiLogStream::~MiLogStream(&v48);
    v8 = -1;
  }
  else
  {
    ServiceBox::findService<GameserverService>();
    GameserverService::getConfig((GameserverService *const)&v47);
    p_avatar_config_mgr = &std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false> *const)&v47)->design_config.txt_config_mgr.avatar_config_mgr;
    v10 = std::__shared_ptr_access<FormalAvatar,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<FormalAvatar,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 96));
    AvatarId = Avatar::getAvatarId(v10);
    avatar_config_ptr = data::AvatarExcelConfigMgrBase::findAvatarExcelConfig(p_avatar_config_mgr, AvatarId);
    std::shared_ptr<Config>::~shared_ptr(&v47);
    if ( avatar_config_ptr )
    {
      v16 = std::__shared_ptr_access<FormalAvatar,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<FormalAvatar,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 96));
      if ( Avatar::getPromoteLevel(v16) >= *(_DWORD *)(v4 + 48) )
      {
        ServiceBox::findService<GameserverService>();
        GameserverService::getConfig((GameserverService *const)&v47);
        v21 = &std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false> *const)&v47)->design_config.txt_config_mgr.avatar_config_mgr;
        v22 = *(_DWORD *)(v4 + 48);
        v23 = std::__shared_ptr_access<FormalAvatar,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<FormalAvatar,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 96));
        v24 = Avatar::getAvatarId(v23);
        ret = AvatarExcelConfigMgr::findAvatarPromoteReward(v21, v24, v22, reward_id);
        std::shared_ptr<Config>::~shared_ptr(&v47);
        if ( ret )
        {
          common::milog::MiLogStream::create(
            &v48,
            &common::milog::MiLogDefault::default_log_obj_,
            3u,
            "./src/player/avatar/player_avatar_comp.cpp",
            "takeAvatarPromoteReward",
            6118);
          v25 = common::milog::MiLogStream::operator<<<char [43],(char *[43])0>(
                  &v48,
                  (const char (*)[43])"findAvatarPromoteReward failed, avatar_id:");
          v26 = std::__shared_ptr_access<FormalAvatar,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<FormalAvatar,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 96));
          val = Avatar::getAvatarId(v26);
          v27 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v25, &val);
          v28 = common::milog::MiLogStream::operator<<<char [17],(char *[17])0>(
                  v27,
                  (const char (*)[17])", promote_level:");
          v29 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                  v28,
                  (const unsigned int *)(v4 + 48));
          v30 = common::milog::MiLogStream::operator<<<char [8],(char *[8])0>(v29, (const char (*)[8])", guid:");
          v31 = std::__shared_ptr_access<FormalAvatar,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<FormalAvatar,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 96));
          v45 = Avatar::getGuid(v31);
          common::milog::MiLogStream::operator<<<unsigned long,(unsigned long *)0>(v30, &v45);
          common::milog::MiLogStream::~MiLogStream(&v48);
          v8 = -1;
        }
        else
        {
          v32 = std::__shared_ptr_access<FormalAvatar,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<FormalAvatar,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 96));
          if ( FormalAvatar::isHasTakenPromoteReward(v32, *(_DWORD *)(v4 + 48)) )
          {
            common::milog::MiLogStream::create(
              &v48,
              &common::milog::MiLogDefault::default_log_obj_,
              1u,
              "./src/player/avatar/player_avatar_comp.cpp",
              "takeAvatarPromoteReward",
              6124);
            v33 = common::milog::MiLogStream::operator<<<char [41],(char *[41])0>(
                    &v48,
                    (const char (*)[41])"promote reward has taken, promote_level:");
            v34 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                    v33,
                    (const unsigned int *)(v4 + 48));
            v35 = common::milog::MiLogStream::operator<<<char [8],(char *[8])0>(v34, (const char (*)[8])", guid:");
            common::milog::MiLogStream::operator<<<unsigned long,(unsigned long *)0>(
              v35,
              (const unsigned __int64 *)(v4 + 64));
            common::milog::MiLogStream::~MiLogStream(&v48);
            v8 = -1;
          }
          else
          {
            ActionReason::ActionReason(
              (ActionReason *const)(v4 + 128),
              ACTION_REASION_AVATAR_PROMOTE_REWARD,
              ITEM_LIMIT_AVATAR_PROMOTE_REWARD);
            if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
              __asan_report_load8(&this->player_);
            ItemComp = Player::getItemComp(this->player_);
            if ( *(_BYTE *)(((unsigned __int64)reward_id >> 3) + 0x7FFF8000) != 0
              && (char)(((unsigned __int8)reward_id & 7) + 3) >= *(_BYTE *)(((unsigned __int64)reward_id >> 3)
                                                                          + 0x7FFF8000) )
            {
              __asan_report_load4(reward_id);
            }
            ret = PlayerItemComp::checkGrantReward(ItemComp, *reward_id, (const ActionReason *)(v4 + 128));
            if ( ret )
            {
              common::milog::MiLogStream::create(
                &v48,
                &common::milog::MiLogDefault::default_log_obj_,
                3u,
                "./src/player/avatar/player_avatar_comp.cpp",
                "takeAvatarPromoteReward",
                6133);
              v37 = common::milog::MiLogStream::operator<<<char [36],(char *[36])0>(
                      &v48,
                      (const char (*)[36])"checkGrantReward failed, reward_id:");
              common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v37, reward_id);
              common::milog::MiLogStream::~MiLogStream(&v48);
              v8 = ret;
            }
            else
            {
              if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
                __asan_report_load8(&this->player_);
              v38 = Player::getItemComp(this->player_);
              if ( *(_BYTE *)(((unsigned __int64)reward_id >> 3) + 0x7FFF8000) != 0
                && (char)(((unsigned __int8)reward_id & 7) + 3) >= *(_BYTE *)(((unsigned __int64)reward_id >> 3)
                                                                            + 0x7FFF8000) )
              {
                v38 = (PlayerItemComp *)reward_id;
                __asan_report_load4(reward_id);
              }
              PlayerItemComp::grantReward(v38, *reward_id, (const ActionReason *)(v4 + 128), 0LL);
              v39 = std::__shared_ptr_access<FormalAvatar,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<FormalAvatar,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 96));
              FormalAvatar::recordTakenPromoteReward(v39, *(_DWORD *)(v4 + 48));
              v8 = 0;
            }
          }
        }
      }
      else
      {
        common::milog::MiLogStream::create(
          &v48,
          &common::milog::MiLogDefault::default_log_obj_,
          3u,
          "./src/player/avatar/player_avatar_comp.cpp",
          "takeAvatarPromoteReward",
          6111);
        v17 = common::milog::MiLogStream::operator<<<char [72],(char *[72])0>(
                &v48,
                (const char (*)[72])"promote_level great than cur avatar promote_level, input_promote_level:");
        v18 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                v17,
                (const unsigned int *)(v4 + 48));
        v19 = common::milog::MiLogStream::operator<<<char [21],(char *[21])0>(
                v18,
                (const char (*)[21])", cur_promote_level:");
        v20 = std::__shared_ptr_access<FormalAvatar,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<FormalAvatar,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 96));
        val = Avatar::getPromoteLevel(v20);
        common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v19, &val);
        common::milog::MiLogStream::~MiLogStream(&v48);
        v8 = -1;
      }
    }
    else
    {
      common::milog::MiLogStream::create(
        &v48,
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/player/avatar/player_avatar_comp.cpp",
        "takeAvatarPromoteReward",
        6105);
      v12 = common::milog::MiLogStream::operator<<<char [38],(char *[38])0>(
              &v48,
              (const char (*)[38])"avatar_config_ptr nullptr, avatar_id:");
      v13 = std::__shared_ptr_access<FormalAvatar,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<FormalAvatar,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 96));
      val = Avatar::getAvatarId(v13);
      v14 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v12, &val);
      v15 = common::milog::MiLogStream::operator<<<char [8],(char *[8])0>(v14, (const char (*)[8])", guid:");
      common::milog::MiLogStream::operator<<<unsigned long,(unsigned long *)0>(v15, (const unsigned __int64 *)(v4 + 64));
      common::milog::MiLogStream::~MiLogStream(&v48);
      v8 = -1;
    }
  }
  std::shared_ptr<FormalAvatar>::~shared_ptr((std::shared_ptr<FormalAvatar> *const)(v4 + 96));
  result = v8;
  if ( v49 == (char *)v4 )
  {
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8008) = 0LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8010) = 0LL;
  }
  else
  {
    *(_QWORD *)v4 = 1172321806LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 6143: range 000000001719E75C-000000001719E940
bool __cdecl PlayerAvatarComp::isDieInvincible(const PlayerAvatarComp *const this)
{
  unsigned __int64 v1; // rbx
  __int64 v2; // rax
  unsigned __int64 v3; // r12
  std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v4; // rax
  uint64_t v5; // r14
  PlayerBasicComp *BasicComp; // rax
  bool v7; // r14
  bool result; // al
  uint32_t die_invincible_duration; // [rsp+1Ch] [rbp-84h]
  std::shared_ptr<Config> v10; // [rsp+20h] [rbp-80h] BYREF
  char v11[112]; // [rsp+30h] [rbp-70h] BYREF

  v1 = (unsigned __int64)v11;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_0(64LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "1 32 16 15 config_ptr:6144";
  *(_QWORD *)(v1 + 16) = PlayerAvatarComp::isDieInvincible;
  v3 = v1 >> 3;
  *(_DWORD *)(v3 + 2147450880) = -235802127;
  *(_DWORD *)(v3 + 2147450884) = -202178560;
  ServiceBox::findService<GameserverService>();
  GameserverService::getConfig((GameserverService *const)(v1 + 32));
  ServiceBox::findService<GameserverService>();
  GameserverService::getConfig((GameserverService *const)&v10);
  v4 = std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false> *const)&v10);
  die_invincible_duration = ConstValueExcelConfigMgr::getDieInvincibleDuration(&v4->design_config.txt_config_mgr.const_value_config_mgr);
  std::shared_ptr<Config>::~shared_ptr(&v10);
  if ( *(_BYTE *)(((unsigned __int64)&this->last_die_invincible_time_ms_ >> 3) + 0x7FFF8000) )
    __asan_report_load8(&this->last_die_invincible_time_ms_);
  v5 = this->last_die_invincible_time_ms_ + die_invincible_duration;
  if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
    __asan_report_load8(&this->player_);
  BasicComp = Player::getBasicComp(this->player_);
  v7 = v5 > PlayerBasicComp::getPlayerTimeMs(BasicComp);
  std::shared_ptr<Config>::~shared_ptr((std::shared_ptr<Config> *const)(v1 + 32));
  result = v7;
  if ( v11 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 6154: range 000000001719E942-000000001719E9C0
void __cdecl PlayerAvatarComp::dieInvincible(PlayerAvatarComp *const this)
{
  __int64 v1; // rsi
  PlayerBasicComp *BasicComp; // rax
  uint64_t PlayerTimeMs; // rax

  if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
    __asan_report_load8(&this->player_);
  BasicComp = Player::getBasicComp(this->player_);
  PlayerTimeMs = PlayerBasicComp::getPlayerTimeMs(BasicComp);
  if ( *(_BYTE *)(((unsigned __int64)&this->last_die_invincible_time_ms_ >> 3) + 0x7FFF8000) )
    PlayerTimeMs = __asan_report_store8(&this->last_die_invincible_time_ms_, v1);
  this->last_die_invincible_time_ms_ = PlayerTimeMs;
};

// Line 6160: range 000000001719E9C2-000000001719EF37
void __cdecl PlayerAvatarComp::notifyShowAvatarInfo(PlayerAvatarComp *const this, uint64_t now_ms)
{
  unsigned __int64 v2; // r13
  __int64 v3; // rax
  _DWORD *v4; // r12
  PlayerSocialComp *SocialComp; // rax
  __gnu_cxx::__normal_iterator<unsigned int*,std::vector<unsigned int> >::reference v6; // rax
  _DWORD *v7; // rdx
  std::__shared_ptr_access<FormalAvatar,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v8; // rax
  std::__shared_ptr_access<FormalAvatar,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v9; // r14
  unsigned __int64 v10; // rax
  unsigned int (__fastcall *v11)(std::__shared_ptr_access<FormalAvatar,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *, proto::ShowAvatarInfo *); // r15
  proto::ShowAvatarInfo *v12; // rax
  common::milog::MiLogStream *v13; // r14
  std::__shared_ptr_access<FormalAvatar,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v14; // rax
  common::milog::MiLogStream *v15; // rax
  common::milog::MiLogStream *v16; // rax
  common::milog::MiLogStream *v17; // r14
  unsigned int val; // [rsp+24h] [rbp-14Ch] BYREF
  std::vector<unsigned int>::iterator __for_begin; // [rsp+28h] [rbp-148h] BYREF
  std::vector<unsigned int>::iterator __for_end; // [rsp+30h] [rbp-140h] BYREF
  std::vector<unsigned int> *__for_range; // [rsp+38h] [rbp-138h]
  common::milog::MiLogStream v22; // [rsp+40h] [rbp-130h] BYREF
  char v23[272]; // [rsp+60h] [rbp-110h] BYREF

  v2 = (unsigned __int64)v23;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_2(224LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "4 32 4 14 avatar_id:6163 48 16 22 formal_avatar_ptr:6165 80 24 20 show_avatar_vec:6162 144 48 11 notify:6161";
  *(_QWORD *)(v2 + 16) = PlayerAvatarComp::notifyShowAvatarInfo;
  v4 = (_DWORD *)(v2 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = 61956;
  v4[536862722] = 62194;
  v4[536862723] = -218959360;
  v4[536862724] = 62194;
  v4[536862726] = -202116109;
  proto::ServerUpdateShowAvatarInfoNotify::ServerUpdateShowAvatarInfoNotify((proto::ServerUpdateShowAvatarInfoNotify *const)(v2 + 144));
  if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
    __asan_report_load8(&this->player_);
  SocialComp = Player::getSocialComp(this->player_);
  PlayerSocialComp::getShowAvatarVec((std::vector<unsigned int> *)(v2 + 80), SocialComp);
  __for_range = (std::vector<unsigned int> *)(v2 + 80);
  __for_begin._M_current = std::vector<unsigned int>::begin((std::vector<unsigned int> *const)(v2 + 80))._M_current;
  __for_end._M_current = std::vector<unsigned int>::end((std::vector<unsigned int> *const)(v2 + 80))._M_current;
  while ( __gnu_cxx::operator!=<unsigned int *,std::vector<unsigned int>>(&__for_begin, &__for_end) )
  {
    v6 = __gnu_cxx::__normal_iterator<unsigned int *,std::vector<unsigned int>>::operator*(&__for_begin);
    v7 = v6;
    if ( *(_BYTE *)(((unsigned __int64)v6 >> 3) + 0x7FFF8000) != 0
      && (char)(((unsigned __int8)v6 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)v6 >> 3) + 0x7FFF8000) )
    {
      __asan_report_load4(v6);
    }
    *(_DWORD *)(v2 + 32) = *v7;
    PlayerAvatarComp::findFormalAvatarByAvatarId((const PlayerAvatarComp *const)(v2 + 48), (uint32_t)this);
    if ( std::operator!=<FormalAvatar>(0LL, (const std::shared_ptr<FormalAvatar> *)(v2 + 48)) )
    {
      v8 = std::__shared_ptr_access<FormalAvatar,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<FormalAvatar,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 48));
      v9 = v8;
      if ( *(_BYTE *)(((unsigned __int64)v8 >> 3) + 0x7FFF8000) )
        __asan_report_load8(v8);
      v10 = *(_QWORD *)v9->baseclass_0 + 504LL;
      if ( *(_BYTE *)((v10 >> 3) + 0x7FFF8000) )
        v10 = __asan_report_load8(*(_QWORD *)v9->baseclass_0 + 504LL);
      v11 = *(unsigned int (__fastcall **)(std::__shared_ptr_access<FormalAvatar,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *, proto::ShowAvatarInfo *))v10;
      v12 = proto::ServerUpdateShowAvatarInfoNotify::add_show_avatar_info_list((proto::ServerUpdateShowAvatarInfoNotify *const)(v2 + 144));
      if ( v11(v9, v12) )
      {
        common::milog::MiLogStream::create(
          &v22,
          &common::milog::MiLogDefault::default_log_obj_,
          3u,
          "./src/player/avatar/player_avatar_comp.cpp",
          "notifyShowAvatarInfo",
          6170);
        v13 = common::milog::MiLogStream::operator<<<char [36],(char *[36])0>(
                &v22,
                (const char (*)[36])"toShowAvatarInfo failed, avatar_id:");
        v14 = std::__shared_ptr_access<FormalAvatar,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<FormalAvatar,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 48));
        val = Avatar::getAvatarId(v14);
        common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v13, &val);
        common::milog::MiLogStream::~MiLogStream(&v22);
      }
    }
    else
    {
      common::milog::MiLogStream::create(
        &v22,
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/player/avatar/player_avatar_comp.cpp",
        "notifyShowAvatarInfo",
        6175);
      v15 = common::milog::MiLogStream::operator<<<char [38],(char *[38])0>(
              &v22,
              (const char (*)[38])"formal_avatar_ptr is null, avatar_id:");
      v16 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v15, (const unsigned int *)(v2 + 32));
      v17 = common::milog::MiLogStream::operator<<<char [6],(char *[6])0>(v16, (const char (*)[6])" uid:");
      if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
        __asan_report_load8(&this->player_);
      val = Player::getUid(this->player_);
      common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v17, &val);
      common::milog::MiLogStream::~MiLogStream(&v22);
    }
    std::shared_ptr<FormalAvatar>::~shared_ptr((std::shared_ptr<FormalAvatar> *const)(v2 + 48));
    __gnu_cxx::__normal_iterator<unsigned int *,std::vector<unsigned int>>::operator++(&__for_begin);
  }
  if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
    __asan_report_load8(&this->player_);
  sendProtoToSocialService<proto::ServerUpdateShowAvatarInfoNotify>(
    this->player_,
    (proto::ServerUpdateShowAvatarInfoNotify *)(v2 + 144));
  std::vector<unsigned int>::~vector((std::vector<unsigned int> *const)(v2 + 80));
  proto::ServerUpdateShowAvatarInfoNotify::~ServerUpdateShowAvatarInfoNotify((proto::ServerUpdateShowAvatarInfoNotify *const)(v2 + 144));
  if ( v23 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8010) = 0;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8018) = 0;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8018) = -168430091;
  }
};

// Line 6182: range 000000001719EF38-000000001719F213
__int64 __fastcall PlayerAvatarComp::fillAvatarShowInfo(
        PlayerAvatarComp *const this,
        uint32_t avatar_id,
        proto::ShowAvatarInfo *show_avatar_info)
{
  unsigned __int64 v3; // rbx
  __int64 v4; // rax
  _DWORD *v5; // r13
  common::milog::MiLogStream *v6; // rax
  unsigned int v7; // r14d
  unsigned __int64 v8; // rax
  unsigned __int64 v9; // rdx
  common::milog::MiLogStream *v10; // rax
  __int64 result; // rax
  common::milog::MiLogStream v13; // [rsp+20h] [rbp-B0h] BYREF
  char v14[144]; // [rsp+40h] [rbp-90h] BYREF

  v3 = (unsigned __int64)v14;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_1(96LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "2 48 4 14 avatar_id:6181 64 16 22 formal_avatar_ptr:6183";
  *(_QWORD *)(v3 + 16) = PlayerAvatarComp::fillAvatarShowInfo;
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = -234556943;
  v5[536862722] = -202178560;
  *(_DWORD *)(v3 + 48) = avatar_id;
  PlayerAvatarComp::findFormalAvatarByAvatarId((const PlayerAvatarComp *const)(v3 + 64), (uint32_t)this);
  if ( std::operator==<FormalAvatar>((const std::shared_ptr<FormalAvatar> *)(v3 + 64), 0LL) )
  {
    common::milog::MiLogStream::create(
      &v13,
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/player/avatar/player_avatar_comp.cpp",
      "fillAvatarShowInfo",
      6186);
    v6 = common::milog::MiLogStream::operator<<<char [38],(char *[38])0>(
           &v13,
           (const char (*)[38])"cannot find formal avatar, avatar_id:");
    common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v6, (const unsigned int *)(v3 + 48));
    common::milog::MiLogStream::~MiLogStream(&v13);
    v7 = -1;
  }
  else
  {
    v8 = (unsigned __int64)std::__shared_ptr_access<FormalAvatar,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<FormalAvatar,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 64));
    if ( *(_BYTE *)((v8 >> 3) + 0x7FFF8000) )
      v8 = __asan_report_load8(v8);
    v9 = *(_QWORD *)v8 + 504LL;
    if ( *(_BYTE *)((v9 >> 3) + 0x7FFF8000) )
      v8 = __asan_report_load8(*(_QWORD *)v8 + 504LL);
    if ( (*(unsigned int (__fastcall **)(unsigned __int64, proto::ShowAvatarInfo *))v9)(v8, show_avatar_info) )
    {
      common::milog::MiLogStream::create(
        &v13,
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/player/avatar/player_avatar_comp.cpp",
        "fillAvatarShowInfo",
        6191);
      v10 = common::milog::MiLogStream::operator<<<char [36],(char *[36])0>(
              &v13,
              (const char (*)[36])"toShowAvatarInfo failed, avatar_id:");
      common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v10, (const unsigned int *)(v3 + 48));
      common::milog::MiLogStream::~MiLogStream(&v13);
      v7 = -1;
    }
    else
    {
      v7 = 0;
    }
  }
  std::shared_ptr<FormalAvatar>::~shared_ptr((std::shared_ptr<FormalAvatar> *const)(v3 + 64));
  result = v7;
  if ( v14 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8008) = 0;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8008) = -168430091;
  }
  return result;
};

// Line 6198: range 000000001719F214-000000001719F358
void __cdecl PlayerAvatarComp::tryAddDefaultUnlockCostume(PlayerAvatarComp *const this)
{
  std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v1; // rax
  unsigned int *v2; // rax
  uint32_t *v3; // rdx
  uint32_t costume_id; // [rsp+1Ch] [rbp-44h]
  std::set<unsigned int>::iterator __for_begin; // [rsp+20h] [rbp-40h] BYREF
  std::set<unsigned int>::iterator __for_end; // [rsp+28h] [rbp-38h] BYREF
  const std::set<unsigned int> *default_unlock_set; // [rsp+30h] [rbp-30h]
  const std::set<unsigned int> *__for_range; // [rsp+38h] [rbp-28h]
  std::shared_ptr<Config> v9[2]; // [rsp+40h] [rbp-20h] BYREF

  ServiceBox::findService<GameserverService>();
  GameserverService::getConfig((GameserverService *const)v9);
  v1 = std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false> *const)v9);
  default_unlock_set = AvatarFashionExcelConfigMgr::getDefaultUnlockCostumeSet(&v1->design_config.txt_config_mgr.avatar_fashion_config_mgr);
  std::shared_ptr<Config>::~shared_ptr(v9);
  __for_range = default_unlock_set;
  __for_begin._M_node = std::set<unsigned int>::begin(default_unlock_set)._M_node;
  __for_end._M_node = std::set<unsigned int>::end(default_unlock_set)._M_node;
  while ( std::operator!=(&__for_begin, &__for_end) )
  {
    v2 = (unsigned int *)std::_Rb_tree_const_iterator<unsigned int>::operator*(&__for_begin);
    v3 = v2;
    if ( *(_BYTE *)(((unsigned __int64)v2 >> 3) + 0x7FFF8000) != 0
      && (char)(((unsigned __int8)v2 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)v2 >> 3) + 0x7FFF8000) )
    {
      __asan_report_load4(v2);
    }
    costume_id = *v3;
    if ( !PlayerAvatarComp::isHasCostumeId(this, *v3) )
      PlayerAvatarComp::addCostume(this, costume_id, 0x46Cu);
    std::_Rb_tree_const_iterator<unsigned int>::operator++(&__for_begin);
  }
};

// Line 6210: range 000000001719F35A-000000001719F6E7
void __cdecl PlayerAvatarComp::avatarChangeCostume(
        PlayerAvatarComp *const this,
        const proto::AvatarChangeCostumeReq *req,
        proto::AvatarChangeCostumeRsp *rsp_0)
{
  unsigned __int64 v3; // rbx
  __int64 v4; // rax
  unsigned __int64 v5; // r12
  PlayerDungeonComp *DungeonComp; // rax
  PlayerAvatarComp *AvatarComp; // rax
  std::__shared_ptr_access<FormalAvatar,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v8; // rax
  google::protobuf::uint32 costume_id; // [rsp+20h] [rbp-A0h]
  google::protobuf::int32 ret; // [rsp+24h] [rbp-9Ch]
  uint64_t guid; // [rsp+28h] [rbp-98h]
  common::milog::MiLogStream v13; // [rsp+30h] [rbp-90h] BYREF
  char v14[112]; // [rsp+50h] [rbp-70h] BYREF

  v3 = (unsigned __int64)v14;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_0(64LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "1 32 16 22 formal_avatar_ptr:6225";
  *(_QWORD *)(v3 + 16) = PlayerAvatarComp::avatarChangeCostume;
  v5 = v3 >> 3;
  *(_DWORD *)(v5 + 2147450880) = -235802127;
  *(_DWORD *)(v5 + 2147450884) = -202178560;
  if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
    __asan_report_load8(&this->player_);
  DungeonComp = Player::getDungeonComp(this->player_);
  if ( PlayerDungeonComp::isInDungeon(DungeonComp) )
  {
    common::milog::MiLogStream::create(
      &v13,
      &common::milog::MiLogDefault::default_log_obj_,
      1u,
      "./src/player/avatar/player_avatar_comp.cpp",
      "avatarChangeCostume",
      6213);
    common::milog::MiLogStream::operator<<<char [19],(char *[19])0>(&v13, (const char (*)[19])"player in dungeon.");
    common::milog::MiLogStream::~MiLogStream(&v13);
    proto::AvatarChangeCostumeRsp::set_retcode(rsp_0, 158);
  }
  else
  {
    if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
      __asan_report_load8(&this->player_);
    AvatarComp = Player::getAvatarComp(this->player_);
    if ( PlayerAvatarComp::isInCombat(AvatarComp) )
    {
      common::milog::MiLogStream::create(
        &v13,
        &common::milog::MiLogDefault::default_log_obj_,
        1u,
        "./src/player/avatar/player_avatar_comp.cpp",
        "avatarChangeCostume",
        6219);
      common::milog::MiLogStream::operator<<<char [21],(char *[21])0>(&v13, (const char (*)[21])"avatar in in combat.");
      common::milog::MiLogStream::~MiLogStream(&v13);
      proto::AvatarChangeCostumeRsp::set_retcode(rsp_0, 128);
    }
    else
    {
      guid = proto::AvatarChangeCostumeReq::avatar_guid(req);
      costume_id = proto::AvatarChangeCostumeReq::costume_id(req);
      PlayerAvatarComp::findFormalAvatar((const PlayerAvatarComp *const)(v3 + 32), (uint64_t)this, guid);
      if ( std::operator==<FormalAvatar>(0LL, (const std::shared_ptr<FormalAvatar> *)(v3 + 32)) )
      {
        proto::AvatarChangeCostumeRsp::set_retcode(rsp_0, 115);
      }
      else
      {
        v8 = std::__shared_ptr_access<FormalAvatar,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<FormalAvatar,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 32));
        ret = Avatar::wearCostume(v8, costume_id);
        proto::AvatarChangeCostumeRsp::set_avatar_guid(rsp_0, guid);
        proto::AvatarChangeCostumeRsp::set_costume_id(rsp_0, costume_id);
        proto::AvatarChangeCostumeRsp::set_retcode(rsp_0, ret);
      }
      std::shared_ptr<FormalAvatar>::~shared_ptr((std::shared_ptr<FormalAvatar> *const)(v3 + 32));
    }
  }
  if ( v14 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
  }
};

// Line 6239: range 000000001719F6E8-000000001719F7EB
bool __fastcall PlayerAvatarComp::isHasCostumeId(const PlayerAvatarComp *const this, uint32_t costume_id)
{
  unsigned __int64 v2; // rbx
  __int64 v3; // rax
  unsigned __int64 v4; // r12
  bool result; // al
  std::_Rb_tree_const_iterator<unsigned int>::_Self __x; // [rsp+10h] [rbp-70h] BYREF
  std::_Rb_tree_const_iterator<unsigned int>::_Self __y; // [rsp+18h] [rbp-68h] BYREF
  char v8[96]; // [rsp+20h] [rbp-60h] BYREF

  v2 = (unsigned __int64)v8;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_0(64LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "1 32 4 15 costume_id:6238";
  *(_QWORD *)(v2 + 16) = PlayerAvatarComp::isHasCostumeId;
  v4 = v2 >> 3;
  *(_DWORD *)(v4 + 2147450880) = -235802127;
  *(_DWORD *)(v4 + 2147450884) = -202116348;
  *(_DWORD *)(v2 + 32) = costume_id;
  __y._M_node = std::set<unsigned int>::end(&this->owned_costume_set_)._M_node;
  __x._M_node = std::set<unsigned int>::find(
                  &this->owned_costume_set_,
                  (const std::set<unsigned int>::key_type *)(v2 + 32))._M_node;
  result = std::operator!=(&__x, &__y);
  if ( v8 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 6244: range 000000001719F7EC-000000001719FE30
__int64 __fastcall PlayerAvatarComp::addCostume(PlayerAvatarComp *const this, uint32_t costume_id, uint32_t reason)
{
  unsigned __int64 v3; // r13
  __int64 v4; // rax
  _DWORD *v5; // r12
  std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v6; // rax
  common::milog::MiLogStream *v7; // rax
  unsigned int v8; // r14d
  common::milog::MiLogStream *v9; // rax
  PlayerBasicComp *BasicComp; // rax
  std::__shared_ptr_access<proto_log::PlayerLogBodyAvatarGainCostume,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v11; // rax
  std::__shared_ptr_access<proto_log::PlayerLogBodyAvatarGainCostume,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v12; // rax
  std::__shared_ptr_access<proto_log::PlayerLogBodyAvatarGainCostume,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v13; // rax
  std::__shared_ptr_access<proto_log::PlayerLogBodyAvatarGainCostume,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v14; // rax
  Player *player; // r14
  __int64 result; // rax
  std::string reasona; // [rsp+0h] [rbp-130h]
  google::protobuf::uint32 reasonb; // [rsp+0h] [rbp-130h]
  PlayerAvatarComp *thisa; // [rsp+8h] [rbp-128h]
  google::protobuf::uint32 avatar_id; // [rsp+10h] [rbp-120h]
  google::protobuf::uint32 quality; // [rsp+14h] [rbp-11Ch]
  std::shared_ptr<google::protobuf::Message> p_body_ptr; // [rsp+20h] [rbp-110h] BYREF
  std::shared_ptr<google::protobuf::Message> v23; // [rsp+30h] [rbp-100h] BYREF
  common::milog::MiLogStream v24; // [rsp+40h] [rbp-F0h] BYREF
  char v25[208]; // [rsp+60h] [rbp-D0h] BYREF

  reasona._M_string_length = (std::string::size_type)this;
  reasona._M_dataplus._M_p = (std::string::pointer)__PAIR64__(costume_id, reason);
  v3 = (unsigned __int64)v25;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_2(160LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "4 32 1 11 holder:6264 48 4 15 costume_id:6243 64 16 12 log_ptr:6265 96 24 11 notify:6258";
  *(_QWORD *)(v3 + 16) = PlayerAvatarComp::addCostume;
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = -234556927;
  v5[536862722] = -219021312;
  v5[536862723] = -218103808;
  v5[536862724] = -202116109;
  *(_DWORD *)(v3 + 48) = costume_id;
  ServiceBox::findService<GameserverService>();
  GameserverService::getConfig((GameserverService *const)&v23);
  v6 = std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false> *const)&v23);
  *(&reasona._anon_0._M_allocated_capacity + 1) = (std::string::size_type)data::AvatarFashionExcelConfigMgrBase::findAvatarCostumeExcelConfig(
                                                                            &v6->design_config.txt_config_mgr.avatar_fashion_config_mgr,
                                                                            *(_DWORD *)(v3 + 48));
  std::shared_ptr<Config>::~shared_ptr((std::shared_ptr<Config> *const)&v23);
  if ( *(&reasona._anon_0._M_allocated_capacity + 1) )
  {
    if ( PlayerAvatarComp::isHasCostumeId(this, *(_DWORD *)(v3 + 48)) )
    {
      common::milog::MiLogStream::create(
        &v24,
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/player/avatar/player_avatar_comp.cpp",
        "addCostume",
        6254);
      v9 = common::milog::MiLogStream::operator<<<char [29],(char *[29])0>(
             &v24,
             (const char (*)[29])"already active. costume_id: ");
      common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v9, (const unsigned int *)(v3 + 48));
      common::milog::MiLogStream::~MiLogStream(&v24);
      v8 = 0;
    }
    else
    {
      std::set<unsigned int>::insert(&this->owned_costume_set_, (const std::set<unsigned int>::value_type *)(v3 + 48));
      proto::AvatarGainCostumeNotify::AvatarGainCostumeNotify((proto::AvatarGainCostumeNotify *const)(v3 + 96));
      proto::AvatarGainCostumeNotify::set_costume_id(
        (proto::AvatarGainCostumeNotify *const)(v3 + 96),
        *(_DWORD *)(v3 + 48));
      if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
        __asan_report_load8(&this->player_);
      Player::sendProto(this->player_, (const google::protobuf::Message *)(v3 + 96));
      if ( *(_BYTE *)(((*(&reasona._anon_0._M_allocated_capacity + 1) + 20) >> 3) + 0x7FFF8000) != 0
        && (char)(((reasona._anon_0._M_local_buf[8] + 20) & 7) + 3) >= *(_BYTE *)(((*(&reasona._anon_0._M_allocated_capacity
                                                                                    + 1)
                                                                                  + 20) >> 3)
                                                                                + 0x7FFF8000) )
      {
        __asan_report_load4(*(&reasona._anon_0._M_allocated_capacity + 1) + 20);
      }
      *(_DWORD *)reasona._anon_0._M_local_buf = *(_DWORD *)(*(&reasona._anon_0._M_allocated_capacity + 1) + 20);
      if ( *(_BYTE *)(((*(&reasona._anon_0._M_allocated_capacity + 1) + 304) >> 3) + 0x7FFF8000) != 0
        && *(_BYTE *)(((*(&reasona._anon_0._M_allocated_capacity + 1) + 304) >> 3) + 0x7FFF8000) <= 3 )
      {
        __asan_report_load4(*(&reasona._anon_0._M_allocated_capacity + 1) + 304);
      }
      HIDWORD(reasona._anon_0._M_allocated_capacity) = *(_DWORD *)(*(&reasona._anon_0._M_allocated_capacity + 1) + 304);
      if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
        __asan_report_load8(&this->player_);
      BasicComp = Player::getBasicComp(this->player_);
      PlayerBasicComp::getNextTransNo[abi:cxx11]((std::string *)&v24, BasicComp);
      StatLogUtils::ContextHolder::ContextHolder((StatLogUtils::ContextHolder *const)(v3 + 32), 0x655u, reasona);
      std::string::~string(&v24);
      common::tools::perf::make_shared<proto_log::PlayerLogBodyAvatarGainCostume>();
      v11 = std::__shared_ptr_access<proto_log::PlayerLogBodyAvatarGainCostume,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<proto_log::PlayerLogBodyAvatarGainCostume,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 64));
      proto_log::PlayerLogBodyAvatarGainCostume::set_fashion_id(v11, *(_DWORD *)(v3 + 48));
      v12 = std::__shared_ptr_access<proto_log::PlayerLogBodyAvatarGainCostume,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<proto_log::PlayerLogBodyAvatarGainCostume,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 64));
      proto_log::PlayerLogBodyAvatarGainCostume::set_avatar_id(v12, avatar_id);
      v13 = std::__shared_ptr_access<proto_log::PlayerLogBodyAvatarGainCostume,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<proto_log::PlayerLogBodyAvatarGainCostume,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 64));
      proto_log::PlayerLogBodyAvatarGainCostume::set_quality(v13, quality);
      v14 = std::__shared_ptr_access<proto_log::PlayerLogBodyAvatarGainCostume,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<proto_log::PlayerLogBodyAvatarGainCostume,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 64));
      proto_log::PlayerLogBodyAvatarGainCostume::set_reason(v14, reasonb);
      if ( *(_BYTE *)(((unsigned __int64)&thisa->player_ >> 3) + 0x7FFF8000) )
        __asan_report_load8(&thisa->player_);
      player = thisa->player_;
      std::shared_ptr<google::protobuf::Message>::shared_ptr(&v23, 0LL);
      std::shared_ptr<google::protobuf::Message>::shared_ptr<proto_log::PlayerLogBodyAvatarGainCostume,void>(
        &p_body_ptr,
        (const std::shared_ptr<proto_log::PlayerLogBodyAvatarGainCostume> *)(v3 + 64));
      Player::printStatLog(player, &p_body_ptr, &v23, 0xEu);
      std::shared_ptr<google::protobuf::Message>::~shared_ptr(&p_body_ptr);
      std::shared_ptr<google::protobuf::Message>::~shared_ptr(&v23);
      std::shared_ptr<proto_log::PlayerLogBodyAvatarGainCostume>::~shared_ptr((std::shared_ptr<proto_log::PlayerLogBodyAvatarGainCostume> *const)(v3 + 64));
      StatLogUtils::ContextHolder::~ContextHolder((StatLogUtils::ContextHolder *const)(v3 + 32));
      v8 = 0;
      proto::AvatarGainCostumeNotify::~AvatarGainCostumeNotify((proto::AvatarGainCostumeNotify *const)(v3 + 96));
    }
  }
  else
  {
    common::milog::MiLogStream::create(
      &v24,
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/player/avatar/player_avatar_comp.cpp",
      "addCostume",
      6248);
    v7 = common::milog::MiLogStream::operator<<<char [32],(char *[32])0>(
           &v24,
           (const char (*)[32])"costume not found, costume_id: ");
    common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v7, (const unsigned int *)(v3 + 48));
    common::milog::MiLogStream::~MiLogStream(&v24);
    v8 = 5;
  }
  result = v8;
  if ( v25 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8010) = 0;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8010) = -168430091;
  }
  return result;
};

// Line 6276: range 000000001719FE32-000000001719FE52
void __cdecl PlayerAvatarComp::gmClearCostume(PlayerAvatarComp *const this)
{
  std::set<unsigned int>::clear(&this->owned_costume_set_);
};

// Line 6281: range 000000001719FE54-000000001719FFA0
PlayerGenderType __cdecl PlayerAvatarComp::getPlayerGenderType(PlayerAvatarComp *const this)
{
  unsigned __int64 v1; // rbx
  __int64 v2; // rax
  unsigned __int64 v3; // r12
  PlayerGenderType v4; // r14d
  std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v5; // rax
  PlayerGenderType result; // eax
  char v7[112]; // [rsp+10h] [rbp-70h] BYREF

  v1 = (unsigned __int64)v7;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_0(64LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "1 32 16 15 avatar_ptr:6282";
  *(_QWORD *)(v1 + 16) = PlayerAvatarComp::getPlayerGenderType;
  v3 = v1 >> 3;
  *(_DWORD *)(v3 + 2147450880) = -235802127;
  *(_DWORD *)(v3 + 2147450884) = -202178560;
  if ( *(_BYTE *)(((unsigned __int64)&this->choose_avatar_guid_ >> 3) + 0x7FFF8000) )
    __asan_report_load8(&this->choose_avatar_guid_);
  PlayerAvatarComp::findAvatar((const PlayerAvatarComp *const)(v1 + 32), (uint64_t)this, this->choose_avatar_guid_);
  if ( std::operator==<Avatar>(0LL, (const std::shared_ptr<Avatar> *)(v1 + 32)) )
  {
    v4 = PLAYER_GENDER_NONE;
  }
  else
  {
    v5 = std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v1 + 32));
    if ( Avatar::getAvatarId(v5) == 10000005 )
      v4 = PLAYER_GENDER_MALE;
    else
      v4 = PLAYER_GENDER_FEMALE;
  }
  std::shared_ptr<Avatar>::~shared_ptr((std::shared_ptr<Avatar> *const)(v1 + 32));
  result = v4;
  if ( v7 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 6292: range 000000001719FFA2-00000000171A0019
AvatarPtr __cdecl PlayerAvatarComp::getPlayerAvatarPtr(PlayerAvatarComp *const this)
{
  uint64_t v1; // rsi
  __int64 v2; // rdx
  AvatarPtr result; // rax

  if ( *(_BYTE *)(((v1 + 104) >> 3) + 0x7FFF8000) )
    __asan_report_load8(v1 + 104);
  v2 = *(_QWORD *)(v1 + 104);
  if ( *(_WORD *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store16(this);
  PlayerAvatarComp::findAvatar(this, v1, v2);
  result._M_ptr = (std::__shared_ptr<Avatar,(__gnu_cxx::_Lock_policy)2>::element_type *)this;
  return result;
};

// Line 6297: range 00000000171A001A-00000000171A0261
int32_t __cdecl PlayerAvatarComp::checkAvatarGuidVecAllFormal(
        PlayerAvatarComp *const this,
        const std::vector<long unsigned int> *guid_vec)
{
  unsigned __int64 v2; // rbx
  __int64 v3; // rax
  unsigned __int64 v4; // r12
  unsigned __int64 v5; // rax
  bool v6; // r14
  common::milog::MiLogStream *v7; // rax
  int32_t result; // eax
  std::vector<long unsigned int>::const_iterator __for_begin; // [rsp+18h] [rbp-B8h] BYREF
  std::vector<long unsigned int>::const_iterator __for_end; // [rsp+20h] [rbp-B0h] BYREF
  const std::vector<long unsigned int> *__for_range; // [rsp+28h] [rbp-A8h]
  std::shared_ptr<FormalAvatar> __a; // [rsp+30h] [rbp-A0h] BYREF
  common::milog::MiLogStream v13; // [rsp+40h] [rbp-90h] BYREF
  char v14[112]; // [rsp+60h] [rbp-70h] BYREF

  v2 = (unsigned __int64)v14;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_0(64LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "1 32 8 9 guid:6298";
  *(_QWORD *)(v2 + 16) = PlayerAvatarComp::checkAvatarGuidVecAllFormal;
  v4 = v2 >> 3;
  *(_DWORD *)(v4 + 2147450880) = -235802127;
  *(_DWORD *)(v4 + 2147450884) = -202116352;
  __for_range = guid_vec;
  __for_begin._M_current = std::vector<unsigned long>::begin(guid_vec)._M_current;
  __for_end._M_current = std::vector<unsigned long>::end(guid_vec)._M_current;
  while ( __gnu_cxx::operator!=<unsigned long const*,std::vector<unsigned long>>(&__for_begin, &__for_end) )
  {
    v5 = (unsigned __int64)__gnu_cxx::__normal_iterator<unsigned long const*,std::vector<unsigned long>>::operator*(&__for_begin);
    if ( *(_BYTE *)((v5 >> 3) + 0x7FFF8000) )
      v5 = __asan_report_load8(v5);
    *(_QWORD *)(v2 + 32) = *(_QWORD *)v5;
    PlayerAvatarComp::findFormalAvatar((const PlayerAvatarComp *const)&__a, (uint64_t)this, *(_QWORD *)(v2 + 32));
    v6 = std::operator==<FormalAvatar>(0LL, &__a);
    std::shared_ptr<FormalAvatar>::~shared_ptr(&__a);
    if ( v6 )
    {
      common::milog::MiLogStream::create(
        &v13,
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/player/avatar/player_avatar_comp.cpp",
        "checkAvatarGuidVecAllFormal",
        6302);
      v7 = common::milog::MiLogStream::operator<<<char [38],(char *[38])0>(
             &v13,
             (const char (*)[38])"findFormalAvatar failed, avatar_guid:");
      common::milog::MiLogStream::operator<<<unsigned long,(unsigned long *)0>(v7, (const unsigned __int64 *)(v2 + 32));
      common::milog::MiLogStream::~MiLogStream(&v13);
      result = -1;
      goto LABEL_12;
    }
    __gnu_cxx::__normal_iterator<unsigned long const*,std::vector<unsigned long>>::operator++(&__for_begin);
  }
  result = 0;
LABEL_12:
  if ( v14 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 6310: range 00000000171A0262-00000000171A036F
uint32_t __cdecl PlayerAvatarComp::getCurAvatarId(const PlayerAvatarComp *const this)
{
  unsigned __int64 v1; // rbx
  __int64 v2; // rax
  unsigned __int64 v3; // r12
  uint32_t AvatarId; // r14d
  std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v5; // rax
  uint32_t result; // eax
  char v7[112]; // [rsp+10h] [rbp-70h] BYREF

  v1 = (unsigned __int64)v7;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_0(64LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "1 32 16 15 avatar_ptr:6311";
  *(_QWORD *)(v1 + 16) = PlayerAvatarComp::getCurAvatarId;
  v3 = v1 >> 3;
  *(_DWORD *)(v3 + 2147450880) = -235802127;
  *(_DWORD *)(v3 + 2147450884) = -202178560;
  PlayerAvatarComp::getCurAvatar((const PlayerAvatarComp *const)(v1 + 32));
  if ( std::operator==<Avatar>(0LL, (const std::shared_ptr<Avatar> *)(v1 + 32)) )
  {
    AvatarId = 0;
  }
  else
  {
    v5 = std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v1 + 32));
    AvatarId = Avatar::getAvatarId(v5);
  }
  std::shared_ptr<Avatar>::~shared_ptr((std::shared_ptr<Avatar> *const)(v1 + 32));
  result = AvatarId;
  if ( v7 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 6320: range 00000000171A0370-00000000171A047D
uint64_t __cdecl PlayerAvatarComp::getCurAvatarGuid(const PlayerAvatarComp *const this)
{
  unsigned __int64 v1; // rbx
  __int64 v2; // rax
  unsigned __int64 v3; // r12
  uint64_t Guid; // r14
  std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v5; // rax
  uint64_t result; // rax
  char v7[112]; // [rsp+10h] [rbp-70h] BYREF

  v1 = (unsigned __int64)v7;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_0(64LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "1 32 16 15 avatar_ptr:6321";
  *(_QWORD *)(v1 + 16) = PlayerAvatarComp::getCurAvatarGuid;
  v3 = v1 >> 3;
  *(_DWORD *)(v3 + 2147450880) = -235802127;
  *(_DWORD *)(v3 + 2147450884) = -202178560;
  PlayerAvatarComp::getCurAvatar((const PlayerAvatarComp *const)(v1 + 32));
  if ( std::operator==<Avatar>(0LL, (const std::shared_ptr<Avatar> *)(v1 + 32)) )
  {
    Guid = 0LL;
  }
  else
  {
    v5 = std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v1 + 32));
    Guid = Avatar::getGuid(v5);
  }
  std::shared_ptr<Avatar>::~shared_ptr((std::shared_ptr<Avatar> *const)(v1 + 32));
  result = Guid;
  if ( v7 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 6332: range 00000000171A047E-00000000171A12CA
void __cdecl PlayerAvatarComp::recordFrameAttackCount(
        PlayerAvatarComp *const this,
        Creature *attacker,
        Creature *target)
{
  unsigned __int64 v3; // r13
  __int64 v4; // rax
  _DWORD *v5; // r12
  char *v6; // rsi
  common::milog::MiLogStream *v7; // rdx
  std::__shared_ptr_access<HurtContext,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v8; // rax
  uint32_t frame_num; // ecx
  std::__shared_ptr_access<HurtContext,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v10; // rax
  uint32_t v11; // ecx
  char v12; // al
  unsigned __int64 v13; // rax
  void (__fastcall **v14)(__int64, unsigned __int64); // rdx
  unsigned __int64 v15; // rax
  unsigned __int64 v16; // rdx
  int v17; // eax
  unsigned __int64 v18; // rax
  void (__fastcall **v19)(__int64, unsigned __int64); // rdx
  std::__shared_ptr_access<Creature,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v20; // rax
  unsigned int *v21; // r9
  std::unordered_map<std::tuple<unsigned int,unsigned int,unsigned int,unsigned int>,unsigned int,boost::hash<std::tuple<unsigned int,unsigned int,unsigned int,unsigned int> >,std::equal_to<std::tuple<unsigned int,unsigned int,unsigned int,unsigned int> >,std::allocator<std::pair<const std::tuple<unsigned int,unsigned int,unsigned int,unsigned int>,unsigned int> > >::size_type v22; // rcx
  int *v23; // r8
  uint32_t v24; // ecx
  uint32_t v25; // ecx
  uint32_t qiandaogua_anticheat_log_count; // ecx
  std::__shared_ptr_access<proto_log::AntiCheatBodyQiandaoguaCheckFail,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v27; // rcx
  std::__shared_ptr_access<proto_log::AntiCheatBodyQiandaoguaCheckFail,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v28; // rcx
  std::__shared_ptr_access<proto_log::AntiCheatBodyQiandaoguaCheckFail,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v29; // rcx
  std::__shared_ptr_access<proto_log::AntiCheatBodyQiandaoguaCheckFail,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v30; // rax
  proto_log::EntityLog *v31; // rax
  std::__shared_ptr_access<proto_log::AntiCheatBodyQiandaoguaCheckFail,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v32; // rax
  proto_log::EntityLog *v33; // rax
  std::__shared_ptr_access<proto_log::AntiCheatBodyQiandaoguaCheckFail,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v34; // r14
  const unsigned int *v35; // rax
  _DWORD *v36; // rdx
  std::__shared_ptr_access<proto_log::AntiCheatBodyQiandaoguaCheckFail,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v37; // rax
  std::__shared_ptr_access<proto_log::AntiCheatBodyQiandaoguaCheckFail,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v38; // r14
  std::__shared_ptr_access<ActorAbility,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v39; // rax
  const std::string *v40; // rax
  std::__shared_ptr_access<proto_log::AntiCheatBodyQiandaoguaCheckFail,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v41; // r14
  std::__shared_ptr_access<ActorModifier,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v42; // rax
  const std::string *v43; // rax
  std::__shared_ptr_access<proto_log::AntiCheatBodyQiandaoguaCheckFail,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v44; // rcx
  std::__shared_ptr_access<proto_log::AntiCheatBodyQiandaoguaCheckFail,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v45; // rax
  Entity *v46; // r14
  std::__shared_ptr_access<proto_log::AntiCheatBodyQiandaoguaCheckFail,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v47; // rax
  proto_log::EntityLog *v48; // rax
  Player *player; // r14
  const unsigned int *v50; // [rsp+0h] [rbp-1A0h]
  Creature *targetb; // [rsp+8h] [rbp-198h]
  unsigned int v54; // [rsp+28h] [rbp-178h] BYREF
  unsigned int EntityId; // [rsp+2Ch] [rbp-174h] BYREF
  std::__detail::_Node_iterator_base<std::pair<const std::tuple<unsigned int,unsigned int,unsigned int,unsigned int>,unsigned int>,true> __y; // [rsp+30h] [rbp-170h] BYREF
  const CheckQiandaoguaConfig *config; // [rsp+38h] [rbp-168h]
  const AttackResult *attack_result; // [rsp+40h] [rbp-160h]
  uint32_t *attack_count; // [rsp+48h] [rbp-158h]
  common::milog::MiLogStream v60; // [rsp+50h] [rbp-150h] BYREF
  char v61[304]; // [rsp+70h] [rbp-130h] BYREF

  v3 = (unsigned __int64)v61;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_2(256LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "7 48 4 29 modifier_owner_entity_id:6369 64 8 9 iter:6380 96 16 21 hurt_context_ptr:6339 128 16 2"
                        "2 ability_owner_ptr:6352 160 16 23 frame_attack_index:6379 192 16 12 log_ptr:6402 224 16 17 creature_ptr:6372";
  *(_QWORD *)(v3 + 16) = PlayerAvatarComp::recordFrameAttackCount;
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = -234556943;
  v5[536862722] = -218959360;
  v5[536862723] = -219021312;
  v5[536862724] = -219021312;
  v5[536862725] = -219021312;
  v5[536862726] = -219021312;
  v5[536862727] = -202178560;
  ServiceBox::findService<GameserverService>();
  GameserverService::getConfig((GameserverService *const)(v3 + 224));
  config = &std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 224))->security_config.check_qiandaogua_config;
  std::shared_ptr<Config>::~shared_ptr((std::shared_ptr<Config> *const)(v3 + 224));
  if ( *(_BYTE *)(((unsigned __int64)config >> 3) + 0x7FFF8000) != 0
    && ((unsigned __int8)config & 7) >= *(_BYTE *)(((unsigned __int64)config >> 3) + 0x7FFF8000) )
  {
    __asan_report_load1(config);
  }
  if ( config->is_enable )
  {
    Creature::getHurtContext((const Creature *const)(v3 + 96));
    v6 = (char *)(v3 + 96);
    if ( std::operator==<HurtContext>(0LL, (const std::shared_ptr<HurtContext> *)(v3 + 96)) )
    {
      common::milog::MiLogStream::create(
        &v60,
        &common::milog::MiLogDefault::default_log_obj_,
        4u,
        "./src/player/avatar/player_avatar_comp.cpp",
        "recordFrameAttackCount",
        6342);
      v7 = common::milog::MiLogStream::operator<<<char [39],(char *[39])0>(
             &v60,
             (const char (*)[39])"hurt_context_ptr is nullptr, creature:");
      common::milog::MiLogStream::operator<<<Creature,(Creature*)0>(v7, target);
      common::milog::MiLogStream::~MiLogStream(&v60);
    }
    else
    {
      attack_result = (const AttackResult *)std::__shared_ptr_access<HurtContext,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<HurtContext,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 96));
      v8 = std::__shared_ptr_access<HurtContext,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<HurtContext,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 96));
      if ( *(_BYTE *)(((unsigned __int64)&v8->frame_num >> 3) + 0x7FFF8000) != 0
        && *(_BYTE *)(((unsigned __int64)&v8->frame_num >> 3) + 0x7FFF8000) <= 3 )
      {
        v8 = (std::__shared_ptr_access<HurtContext,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *)__asan_report_load4(&v8->frame_num);
      }
      frame_num = v8->frame_num;
      if ( *(_BYTE *)(((unsigned __int64)&this->frame_num_ >> 3) + 0x7FFF8000) != 0
        && *(_BYTE *)(((unsigned __int64)&this->frame_num_ >> 3) + 0x7FFF8000) <= 3 )
      {
        __asan_report_load4(&this->frame_num_);
      }
      if ( frame_num != this->frame_num_ )
      {
        PlayerAvatarComp::clearFrameAttackCount(this);
        v10 = std::__shared_ptr_access<HurtContext,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<HurtContext,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 96));
        if ( *(_BYTE *)(((unsigned __int64)&v10->frame_num >> 3) + 0x7FFF8000) != 0
          && *(_BYTE *)(((unsigned __int64)&v10->frame_num >> 3) + 0x7FFF8000) <= 3 )
        {
          v10 = (std::__shared_ptr_access<HurtContext,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *)__asan_report_load4(&v10->frame_num);
        }
        v11 = v10->frame_num;
        v12 = *(_BYTE *)(((unsigned __int64)&this->frame_num_ >> 3) + 0x7FFF8000);
        if ( v12 != 0 && v12 <= 3 )
        {
          LOBYTE(v6) = v12 != 0;
          __asan_report_store4(&this->frame_num_, v6, &this->frame_num_);
        }
        this->frame_num_ = v11;
      }
      *(_QWORD *)(v3 + 128) = 0LL;
      *(_QWORD *)(v3 + 136) = 0LL;
      if ( !std::operator!=<ActorAbility>(0LL, &attack_result->ability_ptr) )
        goto LABEL_32;
      v13 = (unsigned __int64)std::__shared_ptr_access<ActorAbility,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<ActorAbility,(__gnu_cxx::_Lock_policy)2,false,false> *const)&attack_result->ability_ptr);
      if ( *(_BYTE *)((v13 >> 3) + 0x7FFF8000) )
        v13 = __asan_report_load8(v13);
      v14 = *(void (__fastcall ***)(__int64, unsigned __int64))v13;
      if ( *(_BYTE *)((*(_QWORD *)v13 >> 3) + 0x7FFF8000LL) )
        v13 = __asan_report_load8(*(_QWORD *)v13);
      (*v14)(v3 + 192, v13);
      std::shared_ptr<Creature>::operator=(
        (std::shared_ptr<Creature> *const)(v3 + 128),
        (std::shared_ptr<Creature> *)(v3 + 192));
      std::shared_ptr<Creature>::~shared_ptr((std::shared_ptr<Creature> *const)(v3 + 192));
      if ( !std::operator!=<Creature>(0LL, (const std::shared_ptr<Creature> *)(v3 + 128)) )
        goto LABEL_32;
      v15 = (unsigned __int64)std::__shared_ptr_access<Creature,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Creature,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 128));
      if ( *(_BYTE *)((v15 >> 3) + 0x7FFF8000) )
        v15 = __asan_report_load8(v15);
      v16 = *(_QWORD *)v15 + 32LL;
      if ( *(_BYTE *)((v16 >> 3) + 0x7FFF8000) )
        v15 = __asan_report_load8(*(_QWORD *)v15 + 32LL);
      v17 = (*(__int64 (__fastcall **)(unsigned __int64))v16)(v15);
      if ( v17 != 11 && v17 != 42 )
      {
LABEL_32:
        *(_DWORD *)(v3 + 48) = 0;
        if ( std::operator!=<ActorModifier>(0LL, &attack_result->modifier_ptr) )
        {
          v18 = (unsigned __int64)std::__shared_ptr_access<ActorModifier,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<ActorModifier,(__gnu_cxx::_Lock_policy)2,false,false> *const)&attack_result->modifier_ptr);
          if ( *(_BYTE *)((v18 >> 3) + 0x7FFF8000) )
            v18 = __asan_report_load8(v18);
          v19 = *(void (__fastcall ***)(__int64, unsigned __int64))v18;
          if ( *(_BYTE *)((*(_QWORD *)v18 >> 3) + 0x7FFF8000LL) )
            v18 = __asan_report_load8(*(_QWORD *)v18);
          (*v19)(v3 + 224, v18);
          if ( std::operator!=<Creature>(0LL, (const std::shared_ptr<Creature> *)(v3 + 224)) )
          {
            v20 = std::__shared_ptr_access<Creature,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Creature,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 224));
            *(_DWORD *)(v3 + 48) = Entity::getEntityId((const Entity *const)v20);
          }
          std::shared_ptr<Creature>::~shared_ptr((std::shared_ptr<Creature> *const)(v3 + 224));
        }
        EntityId = Entity::getEntityId((const Entity *const)target);
        v54 = Entity::getEntityId((const Entity *const)attacker);
        std::make_tuple<unsigned int,unsigned int,unsigned int const&,unsigned int &>(
          (unsigned int *)(v3 + 160),
          &v54,
          &EntityId,
          &attack_result->attack_id,
          (unsigned int *)(v3 + 48),
          v21,
          v50,
          (unsigned int *)target);
        *(std::unordered_map<std::tuple<unsigned int,unsigned int,unsigned int,unsigned int>,unsigned int,boost::hash<std::tuple<unsigned int,unsigned int,unsigned int,unsigned int> >,std::equal_to<std::tuple<unsigned int,unsigned int,unsigned int,unsigned int> >,std::allocator<std::pair<const std::tuple<unsigned int,unsigned int,unsigned int,unsigned int>,unsigned int> > >::iterator *)(v3 + 64) = std::unordered_map<std::tuple<unsigned int,unsigned int,unsigned int,unsigned int>,unsigned int,boost::hash<std::tuple<unsigned int,unsigned int,unsigned int,unsigned int>>,std::equal_to<std::tuple<unsigned int,unsigned int,unsigned int,unsigned int>>,std::allocator<std::pair<std::tuple<unsigned int,unsigned int,unsigned int,unsigned int> const,unsigned int>>>::end(&this->frame_attack_count_map_);
        v22 = std::unordered_map<std::tuple<unsigned int,unsigned int,unsigned int,unsigned int>,unsigned int,boost::hash<std::tuple<unsigned int,unsigned int,unsigned int,unsigned int>>,std::equal_to<std::tuple<unsigned int,unsigned int,unsigned int,unsigned int>>,std::allocator<std::pair<std::tuple<unsigned int,unsigned int,unsigned int,unsigned int> const,unsigned int>>>::size(&this->frame_attack_count_map_);
        if ( *(_BYTE *)(((unsigned __int64)&config->record_entry_limit >> 3) + 0x7FFF8000) != 0
          && (char)((((_BYTE)config + 8) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&config->record_entry_limit >> 3)
                                                               + 0x7FFF8000) )
        {
          __asan_report_load4(&config->record_entry_limit);
        }
        if ( v22 < config->record_entry_limit )
        {
          EntityId = 0;
          *(std::pair<std::__detail::_Node_iterator<std::pair<const std::tuple<unsigned int,unsigned int,unsigned int,unsigned int>,unsigned int>,false,true>,bool> *)(v3 + 224) = std::unordered_map<std::tuple<unsigned int,unsigned int,unsigned int,unsigned int>,unsigned int,boost::hash<std::tuple<unsigned int,unsigned int,unsigned int,unsigned int>>,std::equal_to<std::tuple<unsigned int,unsigned int,unsigned int,unsigned int>>,std::allocator<std::pair<std::tuple<unsigned int,unsigned int,unsigned int,unsigned int> const,unsigned int>>>::emplace<std::tuple<unsigned int,unsigned int,unsigned int,unsigned int>&,int>(&this->frame_attack_count_map_, (std::tuple<unsigned int,unsigned int,unsigned int,unsigned int> *)(v3 + 160), (int *)&EntityId, (std::tuple<unsigned int,unsigned int,unsigned int,unsigned int> *)&this->frame_attack_count_map_, v23);
          *(_QWORD *)(v3 + 64) = *(_QWORD *)(v3 + 224);
        }
        else
        {
          *(std::unordered_map<std::tuple<unsigned int,unsigned int,unsigned int,unsigned int>,unsigned int,boost::hash<std::tuple<unsigned int,unsigned int,unsigned int,unsigned int> >,std::equal_to<std::tuple<unsigned int,unsigned int,unsigned int,unsigned int> >,std::allocator<std::pair<const std::tuple<unsigned int,unsigned int,unsigned int,unsigned int>,unsigned int> > >::iterator *)(v3 + 64) = std::unordered_map<std::tuple<unsigned int,unsigned int,unsigned int,unsigned int>,unsigned int,boost::hash<std::tuple<unsigned int,unsigned int,unsigned int,unsigned int>>,std::equal_to<std::tuple<unsigned int,unsigned int,unsigned int,unsigned int>>,std::allocator<std::pair<std::tuple<unsigned int,unsigned int,unsigned int,unsigned int> const,unsigned int>>>::find(&this->frame_attack_count_map_, (const std::unordered_map<std::tuple<unsigned int,unsigned int,unsigned int,unsigned int>,unsigned int,boost::hash<std::tuple<unsigned int,unsigned int,unsigned int,unsigned int> >,std::equal_to<std::tuple<unsigned int,unsigned int,unsigned int,unsigned int> >,std::allocator<std::pair<const std::tuple<unsigned int,unsigned int,unsigned int,unsigned int>,unsigned int> > >::key_type *)(v3 + 160));
        }
        __y._M_cur = std::unordered_map<std::tuple<unsigned int,unsigned int,unsigned int,unsigned int>,unsigned int,boost::hash<std::tuple<unsigned int,unsigned int,unsigned int,unsigned int>>,std::equal_to<std::tuple<unsigned int,unsigned int,unsigned int,unsigned int>>,std::allocator<std::pair<std::tuple<unsigned int,unsigned int,unsigned int,unsigned int> const,unsigned int>>>::end(&this->frame_attack_count_map_)._M_cur;
        if ( !std::__detail::operator==<std::pair<std::tuple<unsigned int,unsigned int,unsigned int,unsigned int> const,unsigned int>,true>(
                (const std::__detail::_Node_iterator_base<std::pair<const std::tuple<unsigned int,unsigned int,unsigned int,unsigned int>,unsigned int>,true> *)(v3 + 64),
                &__y) )
        {
          attack_count = &std::__detail::_Node_iterator<std::pair<std::tuple<unsigned int,unsigned int,unsigned int,unsigned int> const,unsigned int>,false,true>::operator->((const std::__detail::_Node_iterator<std::pair<const std::tuple<unsigned int,unsigned int,unsigned int,unsigned int>,unsigned int>,false,true> *const)(v3 + 64))->second;
          if ( *(_BYTE *)(((unsigned __int64)attack_count >> 3) + 0x7FFF8000) != 0
            && (char)(((unsigned __int8)attack_count & 7) + 3) >= *(_BYTE *)(((unsigned __int64)attack_count >> 3)
                                                                           + 0x7FFF8000) )
          {
            __asan_report_load4(attack_count);
          }
          v24 = ++*attack_count;
          if ( *(_BYTE *)(((unsigned __int64)&this->max_attack_count_ >> 3) + 0x7FFF8000) != 0
            && *(_BYTE *)(((unsigned __int64)&this->max_attack_count_ >> 3) + 0x7FFF8000) <= 3 )
          {
            __asan_report_load4(&this->max_attack_count_);
          }
          if ( v24 > this->max_attack_count_ )
            this->max_attack_count_ = *attack_count;
          if ( *(_BYTE *)(((unsigned __int64)attack_count >> 3) + 0x7FFF8000) != 0
            && (char)(((unsigned __int8)attack_count & 7) + 3) >= *(_BYTE *)(((unsigned __int64)attack_count >> 3)
                                                                           + 0x7FFF8000) )
          {
            __asan_report_load4(attack_count);
          }
          v25 = *attack_count;
          if ( *(_BYTE *)(((unsigned __int64)&config->attack_count_limit >> 3) + 0x7FFF8000) != 0
            && (char)((((_BYTE)config + 4) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&config->attack_count_limit >> 3)
                                                                 + 0x7FFF8000) )
          {
            __asan_report_load4(&config->attack_count_limit);
          }
          if ( v25 > config->attack_count_limit )
          {
            if ( *(_BYTE *)(((unsigned __int64)&this->qiandaogua_anticheat_log_count_ >> 3) + 0x7FFF8000) != 0
              && (char)((((_BYTE)this + 92) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&this->qiandaogua_anticheat_log_count_ >> 3)
                                                                  + 0x7FFF8000) )
            {
              __asan_report_load4(&this->qiandaogua_anticheat_log_count_);
            }
            qiandaogua_anticheat_log_count = this->qiandaogua_anticheat_log_count_;
            if ( *(_BYTE *)(((unsigned __int64)&config->anticheat_log_limit >> 3) + 0x7FFF8000) != 0
              && (char)((((_BYTE)config + 12) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&config->anticheat_log_limit >> 3)
                                                                    + 0x7FFF8000) )
            {
              __asan_report_load4(&config->anticheat_log_limit);
            }
            if ( qiandaogua_anticheat_log_count < config->anticheat_log_limit )
            {
              ++this->qiandaogua_anticheat_log_count_;
              common::tools::perf::make_shared<proto_log::AntiCheatBodyQiandaoguaCheckFail>();
              v27 = std::__shared_ptr_access<proto_log::AntiCheatBodyQiandaoguaCheckFail,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<proto_log::AntiCheatBodyQiandaoguaCheckFail,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 192));
              if ( *(_BYTE *)(((unsigned __int64)attack_count >> 3) + 0x7FFF8000) != 0
                && (char)(((unsigned __int8)attack_count & 7) + 3) >= *(_BYTE *)(((unsigned __int64)attack_count >> 3)
                                                                               + 0x7FFF8000) )
              {
                __asan_report_load4(attack_count);
              }
              proto_log::AntiCheatBodyQiandaoguaCheckFail::set_attack_count(v27, *attack_count);
              v28 = std::__shared_ptr_access<proto_log::AntiCheatBodyQiandaoguaCheckFail,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<proto_log::AntiCheatBodyQiandaoguaCheckFail,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 192));
              if ( *(_BYTE *)(((unsigned __int64)&this->frame_num_ >> 3) + 0x7FFF8000) != 0
                && *(_BYTE *)(((unsigned __int64)&this->frame_num_ >> 3) + 0x7FFF8000) <= 3 )
              {
                __asan_report_load4(&this->frame_num_);
              }
              proto_log::AntiCheatBodyQiandaoguaCheckFail::set_frame_num(v28, this->frame_num_);
              v29 = std::__shared_ptr_access<proto_log::AntiCheatBodyQiandaoguaCheckFail,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<proto_log::AntiCheatBodyQiandaoguaCheckFail,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 192));
              if ( *(_BYTE *)(((unsigned __int64)&attack_result->attack_id >> 3) + 0x7FFF8000) != 0
                && (char)((((_BYTE)attack_result + 36) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&attack_result->attack_id >> 3)
                                                                             + 0x7FFF8000) )
              {
                __asan_report_load4(&attack_result->attack_id);
              }
              proto_log::AntiCheatBodyQiandaoguaCheckFail::set_attack_id(v29, attack_result->attack_id);
              v30 = std::__shared_ptr_access<proto_log::AntiCheatBodyQiandaoguaCheckFail,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<proto_log::AntiCheatBodyQiandaoguaCheckFail,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 192));
              v31 = proto_log::AntiCheatBodyQiandaoguaCheckFail::mutable_source_entity(v30);
              Entity::getEntityLog((Entity *const)attacker, v31);
              v32 = std::__shared_ptr_access<proto_log::AntiCheatBodyQiandaoguaCheckFail,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<proto_log::AntiCheatBodyQiandaoguaCheckFail,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 192));
              v33 = proto_log::AntiCheatBodyQiandaoguaCheckFail::mutable_target_entity(v32);
              Entity::getEntityLog((Entity *const)targetb, v33);
              if ( std::optional<unsigned int>::has_value(&attack_result->gadget_damage_action_idx_opt) )
              {
                v34 = std::__shared_ptr_access<proto_log::AntiCheatBodyQiandaoguaCheckFail,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<proto_log::AntiCheatBodyQiandaoguaCheckFail,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 192));
                v35 = std::optional<unsigned int>::value(&attack_result->gadget_damage_action_idx_opt);
                v36 = v35;
                if ( *(_BYTE *)(((unsigned __int64)v35 >> 3) + 0x7FFF8000) != 0
                  && (char)(((unsigned __int8)v35 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)v35 >> 3) + 0x7FFF8000) )
                {
                  __asan_report_load4(v35);
                }
                proto_log::AntiCheatBodyQiandaoguaCheckFail::set_gadget_damage_action_idx(v34, *v36 + 1);
              }
              v37 = std::__shared_ptr_access<proto_log::AntiCheatBodyQiandaoguaCheckFail,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<proto_log::AntiCheatBodyQiandaoguaCheckFail,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 192));
              proto_log::AntiCheatBodyQiandaoguaCheckFail::set_anim_event_id(v37, &attack_result->anim_event_id);
              if ( std::operator!=<ActorAbility>(0LL, &attack_result->ability_ptr) )
              {
                v38 = std::__shared_ptr_access<proto_log::AntiCheatBodyQiandaoguaCheckFail,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<proto_log::AntiCheatBodyQiandaoguaCheckFail,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 192));
                v39 = std::__shared_ptr_access<ActorAbility,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<ActorAbility,(__gnu_cxx::_Lock_policy)2,false,false> *const)&attack_result->ability_ptr);
                v40 = ActorAbility::getName[abi:cxx11](v39);
                proto_log::AntiCheatBodyQiandaoguaCheckFail::set_ability_name(v38, v40);
              }
              if ( std::operator!=<ActorModifier>(0LL, &attack_result->modifier_ptr) )
              {
                v41 = std::__shared_ptr_access<proto_log::AntiCheatBodyQiandaoguaCheckFail,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<proto_log::AntiCheatBodyQiandaoguaCheckFail,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 192));
                v42 = std::__shared_ptr_access<ActorModifier,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<ActorModifier,(__gnu_cxx::_Lock_policy)2,false,false> *const)&attack_result->modifier_ptr);
                v43 = ActorModifier::getName[abi:cxx11](v42);
                proto_log::AntiCheatBodyQiandaoguaCheckFail::set_modifier_name(v41, v43);
              }
              v44 = std::__shared_ptr_access<proto_log::AntiCheatBodyQiandaoguaCheckFail,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<proto_log::AntiCheatBodyQiandaoguaCheckFail,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 192));
              if ( *(_BYTE *)(((unsigned __int64)&attack_result->local_id >> 3) + 0x7FFF8000) != 0
                && *(_BYTE *)(((unsigned __int64)&attack_result->local_id >> 3) + 0x7FFF8000) <= 3 )
              {
                __asan_report_load4(&attack_result->local_id);
              }
              proto_log::AntiCheatBodyQiandaoguaCheckFail::set_local_id(v44, attack_result->local_id);
              v45 = std::__shared_ptr_access<proto_log::AntiCheatBodyQiandaoguaCheckFail,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<proto_log::AntiCheatBodyQiandaoguaCheckFail,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 192));
              proto_log::AntiCheatBodyQiandaoguaCheckFail::set_attack_tag(v45, &attack_result->attack_tag);
              if ( std::operator!=<Creature>(0LL, (const std::shared_ptr<Creature> *)(v3 + 128)) )
              {
                v46 = (Entity *)std::__shared_ptr_access<Creature,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Creature,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 128));
                v47 = std::__shared_ptr_access<proto_log::AntiCheatBodyQiandaoguaCheckFail,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<proto_log::AntiCheatBodyQiandaoguaCheckFail,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 192));
                v48 = proto_log::AntiCheatBodyQiandaoguaCheckFail::mutable_ability_owner(v47);
                Entity::getEntityLog(v46, v48);
              }
              if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
                __asan_report_load8(&this->player_);
              player = this->player_;
              std::shared_ptr<google::protobuf::Message>::shared_ptr<proto_log::AntiCheatBodyQiandaoguaCheckFail,void>(
                (std::shared_ptr<google::protobuf::Message> *const)(v3 + 224),
                (const std::shared_ptr<proto_log::AntiCheatBodyQiandaoguaCheckFail> *)(v3 + 192));
              Player::printAntiCheatLog(player, ANTI_CHEAT_ACTION_QIANDAOGUA_CHECK_FAIL, (MessagePtr *)(v3 + 224));
              std::shared_ptr<google::protobuf::Message>::~shared_ptr((std::shared_ptr<google::protobuf::Message> *const)(v3 + 224));
              std::shared_ptr<proto_log::AntiCheatBodyQiandaoguaCheckFail>::~shared_ptr((std::shared_ptr<proto_log::AntiCheatBodyQiandaoguaCheckFail> *const)(v3 + 192));
            }
          }
        }
      }
      std::shared_ptr<Creature>::~shared_ptr((std::shared_ptr<Creature> *const)(v3 + 128));
    }
    std::shared_ptr<HurtContext>::~shared_ptr((std::shared_ptr<HurtContext> *const)(v3 + 96));
  }
  if ( v61 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8010) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8018) = 0LL;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
  }
};

// Line 6432: range 00000000171A12CC-00000000171A132F
void __cdecl PlayerAvatarComp::clearFrameAttackCount(PlayerAvatarComp *const this)
{
  __int64 v1; // rsi
  uint32_t *p_frame_num; // rdx

  std::unordered_map<std::tuple<unsigned int,unsigned int,unsigned int,unsigned int>,unsigned int,boost::hash<std::tuple<unsigned int,unsigned int,unsigned int,unsigned int>>,std::equal_to<std::tuple<unsigned int,unsigned int,unsigned int,unsigned int>>,std::allocator<std::pair<std::tuple<unsigned int,unsigned int,unsigned int,unsigned int> const,unsigned int>>>::clear(&this->frame_attack_count_map_);
  p_frame_num = &this->frame_num_;
  if ( *(_BYTE *)(((unsigned __int64)p_frame_num >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)p_frame_num >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_store4(&this->frame_num_, v1, p_frame_num);
  }
  this->frame_num_ = 0;
};

// Line 6438: range 00000000171A1330-00000000171A14A8
void __cdecl PlayerAvatarComp::clearFrameAttackCountOnDisconnect(PlayerAvatarComp *const this)
{
  common::milog::MiLogStream *v1; // rax
  common::milog::MiLogStream *v2; // rax
  common::milog::MiLogStream *v3; // rcx
  __int64 v4; // rsi
  __int64 v5; // rdx
  common::milog::MiLogStream v6; // [rsp+10h] [rbp-30h] BYREF

  common::milog::MiLogStream::create(
    &v6,
    &common::milog::MiLogDefault::default_log_obj_,
    1u,
    "./src/player/avatar/player_avatar_comp.cpp",
    "clearFrameAttackCountOnDisconnect",
    6439);
  v1 = common::milog::MiLogStream::operator<<<char [18],(char *[18])0>(&v6, (const char (*)[18])"max_attack_count:");
  v2 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v1, &this->max_attack_count_);
  v3 = common::milog::MiLogStream::operator<<<char [9],(char *[9])0>(v2, (const char (*)[9])" player:");
  if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
    __asan_report_load8(&this->player_);
  operator<<(v3, this->player_);
  common::milog::MiLogStream::~MiLogStream(&v6);
  PlayerAvatarComp::clearFrameAttackCount(this);
  v4 = (((_BYTE)this + 92) & 7u) + 3;
  v5 = (*(_BYTE *)(((unsigned __int64)&this->qiandaogua_anticheat_log_count_ >> 3) + 0x7FFF8000) != 0) & (unsigned __int8)((char)((((_BYTE)this + 92) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&this->qiandaogua_anticheat_log_count_ >> 3) + 0x7FFF8000));
  if ( (_BYTE)v5 )
    __asan_report_store4(&this->qiandaogua_anticheat_log_count_, v4, v5);
  this->qiandaogua_anticheat_log_count_ = 0;
  if ( *(_BYTE *)(((unsigned __int64)&this->max_attack_count_ >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->max_attack_count_ >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_store4(&this->max_attack_count_, v4, &this->max_attack_count_);
  }
  this->max_attack_count_ = 0;
};

// Line 6446: range 00000000171A14AA-00000000171A15AD
void __cdecl PlayerAvatarComp::triggerCombatEnd(PlayerAvatarComp *const this, data::CombatEndType end_type)
{
  common::milog::MiLogStream *v2; // rbx
  std::__shared_ptr_access<AvatarTeamEntity,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v3; // rax
  std::unordered_set<unsigned int>::value_type __x; // [rsp+14h] [rbp-3Ch] BYREF
  char *val; // [rsp+18h] [rbp-38h] BYREF
  common::milog::MiLogStream v6; // [rsp+20h] [rbp-30h] BYREF

  if ( !std::operator==<AvatarTeamEntity>(0LL, &this->team_entity_ptr_) )
  {
    if ( end_type && end_type <= COMBAT_END_CRYSTAL_LINK_HALF_LEVEL_END )
    {
      v3 = std::__shared_ptr_access<AvatarTeamEntity,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<AvatarTeamEntity,(__gnu_cxx::_Lock_policy)2,false,false> *const)&this->team_entity_ptr_);
      __x = end_type;
      std::unordered_set<unsigned int>::insert(&v3->unfinished_combat_end_type_set_, &__x);
      PlayerAvatarComp::tryNotifyUnfinishedCombatEndList(this);
    }
    else
    {
      common::milog::MiLogStream::create(
        &v6,
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/player/avatar/player_avatar_comp.cpp",
        "triggerCombatEnd",
        6453);
      v2 = common::milog::MiLogStream::operator<<<char [18],(char *[18])0>(&v6, (const char (*)[18])"invalid end_type:");
      val = (char *)data::enumValToStr(end_type);
      common::milog::MiLogStream::operator<<<char const*,(char const**)0>(v2, (const char *const *)&val);
      common::milog::MiLogStream::~MiLogStream(&v6);
    }
  }
};

// Line 6461: range 00000000171A15AE-00000000171A185E
void __cdecl PlayerAvatarComp::onClientFinishedCombatEndList(
        PlayerAvatarComp *const this,
        const std::vector<unsigned int> *type_vec)
{
  unsigned __int64 v2; // rbx
  __int64 v3; // rax
  unsigned __int64 v4; // r12
  __gnu_cxx::__normal_iterator<unsigned int const*,std::vector<unsigned int> >::reference v5; // rax
  _DWORD *v6; // rdx
  std::__shared_ptr_access<AvatarTeamEntity,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v7; // rax
  common::milog::MiLogStream *v8; // rdx
  std::vector<unsigned int>::const_iterator __for_begin; // [rsp+18h] [rbp-98h] BYREF
  std::vector<unsigned int>::const_iterator __for_end; // [rsp+20h] [rbp-90h] BYREF
  const std::vector<unsigned int> *__for_range; // [rsp+28h] [rbp-88h]
  common::milog::MiLogStream v12; // [rsp+30h] [rbp-80h] BYREF
  char v13[96]; // [rsp+50h] [rbp-60h] BYREF

  v2 = (unsigned __int64)v13;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_0(64LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "1 32 4 9 type:6467";
  *(_QWORD *)(v2 + 16) = PlayerAvatarComp::onClientFinishedCombatEndList;
  v4 = v2 >> 3;
  *(_DWORD *)(v4 + 2147450880) = -235802127;
  *(_DWORD *)(v4 + 2147450884) = -202116348;
  if ( std::operator==<AvatarTeamEntity>(0LL, &this->team_entity_ptr_) )
  {
    common::milog::MiLogStream::create(
      &v12,
      &common::milog::MiLogDefault::default_log_obj_,
      1u,
      "./src/player/avatar/player_avatar_comp.cpp",
      "onClientFinishedCombatEndList",
      6464);
    common::milog::MiLogStream::operator<<<char [21],(char *[21])0>(&v12, (const char (*)[21])"current team nullptr");
    common::milog::MiLogStream::~MiLogStream(&v12);
  }
  else
  {
    __for_range = type_vec;
    __for_begin._M_current = std::vector<unsigned int>::begin(type_vec)._M_current;
    __for_end._M_current = std::vector<unsigned int>::end(type_vec)._M_current;
    while ( __gnu_cxx::operator!=<unsigned int const*,std::vector<unsigned int>>(&__for_begin, &__for_end) )
    {
      v5 = __gnu_cxx::__normal_iterator<unsigned int const*,std::vector<unsigned int>>::operator*(&__for_begin);
      v6 = v5;
      if ( *(_BYTE *)(((unsigned __int64)v5 >> 3) + 0x7FFF8000) != 0
        && (char)(((unsigned __int8)v5 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)v5 >> 3) + 0x7FFF8000) )
      {
        __asan_report_load4(v5);
      }
      *(_DWORD *)(v2 + 32) = *v6;
      v7 = std::__shared_ptr_access<AvatarTeamEntity,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<AvatarTeamEntity,(__gnu_cxx::_Lock_policy)2,false,false> *const)&this->team_entity_ptr_);
      std::unordered_set<unsigned int>::erase(
        &v7->unfinished_combat_end_type_set_,
        (const std::unordered_set<unsigned int>::key_type *)(v2 + 32));
      __gnu_cxx::__normal_iterator<unsigned int const*,std::vector<unsigned int>>::operator++(&__for_begin);
    }
    common::milog::MiLogStream::create(
      &v12,
      &common::milog::MiLogDefault::default_log_obj_,
      1u,
      "./src/player/avatar/player_avatar_comp.cpp",
      "onClientFinishedCombatEndList",
      6471);
    v8 = common::milog::MiLogStream::operator<<<char [45],(char *[45])0>(
           &v12,
           (const char (*)[45])"client remove combat end modifier, type_vec:");
    common::milog::MiLogStream::operator<<<unsigned int>(v8, type_vec);
    common::milog::MiLogStream::~MiLogStream(&v12);
  }
  if ( v13 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
  }
};

// Line 6475: range 00000000171A1860-00000000171A1A54
void __cdecl PlayerAvatarComp::tryNotifyUnfinishedCombatEndList(PlayerAvatarComp *const this)
{
  unsigned __int64 v1; // rbx
  __int64 v2; // rax
  _DWORD *v3; // r12
  std::__shared_ptr_access<AvatarTeamEntity,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v4; // rax
  google::protobuf::RepeatedField<unsigned int> *v5; // r14
  std::__shared_ptr_access<AvatarTeamEntity,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v6; // rax
  char v7[176]; // [rsp+10h] [rbp-B0h] BYREF

  v1 = (unsigned __int64)v7;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_1(128LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "1 48 40 11 notify:6484";
  *(_QWORD *)(v1 + 16) = PlayerAvatarComp::tryNotifyUnfinishedCombatEndList;
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = 61937;
  v3[536862722] = -218103808;
  v3[536862723] = -202116109;
  if ( !std::operator==<AvatarTeamEntity>(0LL, &this->team_entity_ptr_) )
  {
    v4 = std::__shared_ptr_access<AvatarTeamEntity,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<AvatarTeamEntity,(__gnu_cxx::_Lock_policy)2,false,false> *const)&this->team_entity_ptr_);
    if ( !std::unordered_set<unsigned int>::empty(&v4->unfinished_combat_end_type_set_) )
    {
      proto::ServerCombatEndNotify::ServerCombatEndNotify((proto::ServerCombatEndNotify *const)(v1 + 48));
      v5 = proto::ServerCombatEndNotify::mutable_combat_end_type_list((proto::ServerCombatEndNotify *const)(v1 + 48));
      v6 = std::__shared_ptr_access<AvatarTeamEntity,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<AvatarTeamEntity,(__gnu_cxx::_Lock_policy)2,false,false> *const)&this->team_entity_ptr_);
      common::tools::MiscUtils::setToRepeated<std::unordered_set<unsigned int>,unsigned int>(
        &v6->unfinished_combat_end_type_set_,
        v5);
      if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
        __asan_report_load8(&this->player_);
      Player::sendProto(this->player_, (const google::protobuf::Message *)(v1 + 48));
      proto::ServerCombatEndNotify::~ServerCombatEndNotify((proto::ServerCombatEndNotify *const)(v1 + 48));
    }
  }
  if ( v7 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
};

// Line 6490: range 00000000171A1A56-00000000171A29F5
__int64 __fastcall PlayerAvatarComp::lockTeamAvatar(
        PlayerAvatarComp *const this,
        uint64_t appear_guid,
        const std::vector<long unsigned int> *avatar_guid_vec,
        proto_log::ChangeSceneTeamReason reason)
{
  unsigned int v4; // r14d
  unsigned __int64 v5; // r13
  __int64 v6; // rax
  _DWORD *v7; // r12
  common::milog::MiLogStream *v8; // rax
  common::milog::MiLogStream *v9; // rax
  PlayerMpComp *MpComp; // rax
  common::milog::MiLogStream *v11; // rax
  std::vector<long unsigned int>::size_type v12; // r15
  uint32_t Uid; // eax
  common::milog::MiLogStream *v14; // r14
  std::__shared_ptr_access<SceneTeam,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v15; // r15
  uint32_t v16; // eax
  common::milog::MiLogStream *v17; // rax
  common::milog::MiLogStream *v18; // r14
  unsigned __int64 v19; // rax
  common::milog::MiLogStream *v20; // rax
  int v21; // r15d
  unsigned __int64 v22; // rax
  unsigned __int64 v23; // rdx
  unsigned __int64 v24; // rax
  unsigned __int64 v25; // rdx
  char v26; // al
  common::milog::MiLogStream *v27; // rax
  common::milog::MiLogStream *v28; // rax
  common::milog::MiLogStream *v29; // r14
  unsigned __int64 v30; // rax
  unsigned __int64 v31; // rdx
  std::pair<std::__detail::_Node_iterator<long unsigned int,true,false>,bool> v32; // rax
  common::milog::MiLogStream *v33; // rax
  common::milog::MiLogStream *v34; // rax
  common::milog::MiLogStream *v35; // rax
  std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v36; // rax
  std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v37; // rax
  std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v38; // rax
  Avatar *v39; // rax
  Avatar *v40; // rax
  const unsigned __int64 *M_current; // r14
  std::vector<long unsigned int>::const_iterator v42; // rax
  common::milog::MiLogStream *v43; // rax
  common::milog::MiLogStream *v44; // rax
  common::milog::MiLogStream *v45; // rax
  common::milog::MiLogStream *v46; // rax
  bool v47; // r14
  common::milog::MiLogStream *v48; // rax
  __int64 result; // rax
  SceneTeam *v50; // [rsp+8h] [rbp-1A8h]
  unsigned int val; // [rsp+30h] [rbp-180h] BYREF
  float revive_hp_percent; // [rsp+34h] [rbp-17Ch]
  std::vector<long unsigned int>::const_iterator __for_begin; // [rsp+38h] [rbp-178h] BYREF
  std::vector<long unsigned int>::const_iterator __for_end; // [rsp+40h] [rbp-170h] BYREF
  const std::vector<long unsigned int> *__for_range; // [rsp+48h] [rbp-168h]
  std::shared_ptr<Scene> v58; // [rsp+50h] [rbp-160h] BYREF
  common::milog::MiLogStream v59; // [rsp+60h] [rbp-150h] BYREF
  char v60[304]; // [rsp+80h] [rbp-130h] BYREF

  v5 = (unsigned __int64)v60;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v6 = __asan_stack_malloc_2(256LL);
    if ( v6 )
      v5 = v6;
  }
  *(_QWORD *)v5 = 1102416563LL;
  *(_QWORD *)(v5 + 8) = "5 32 8 9 guid:6526 64 8 16 appear_guid:6489 96 16 19 scene_team_ptr:6513 128 16 14 scene_ptr:656"
                        "1 160 56 13 guid_set:6525";
  *(_QWORD *)(v5 + 16) = PlayerAvatarComp::lockTeamAvatar;
  v7 = (_DWORD *)(v5 >> 3);
  v7[536862720] = -235802127;
  v7[536862721] = -218959360;
  v7[536862722] = -218959360;
  v7[536862723] = -219021312;
  v7[536862724] = -219021312;
  v7[536862726] = -218103808;
  v7[536862727] = -202116109;
  *(_QWORD *)(v5 + 64) = appear_guid;
  if ( !std::vector<unsigned long>::empty(&this->quest_lock_team_avatar_guid_vec_) )
  {
    common::milog::MiLogStream::create(
      &v59,
      &common::milog::MiLogDefault::default_log_obj_,
      1u,
      "./src/player/avatar/player_avatar_comp.cpp",
      "lockTeamAvatar",
      6493);
    v8 = common::milog::MiLogStream::operator<<<char [50],(char *[50])0>(
           &v59,
           (const char (*)[50])"current team avatar is locked by quest, guid_vec:");
    common::milog::MiLogStream::operator<<<unsigned long>(v8, &this->quest_lock_team_avatar_guid_vec_);
    common::milog::MiLogStream::~MiLogStream(&v59);
    v4 = 159;
  }
  else if ( !std::vector<unsigned long>::empty(&this->lock_team_avatar_guid_vec_) )
  {
    common::milog::MiLogStream::create(
      &v59,
      &common::milog::MiLogDefault::default_log_obj_,
      1u,
      "./src/player/avatar/player_avatar_comp.cpp",
      "lockTeamAvatar",
      6498);
    v9 = common::milog::MiLogStream::operator<<<char [41],(char *[41])0>(
           &v59,
           (const char (*)[41])"current team avatar is locked, guid_vec:");
    common::milog::MiLogStream::operator<<<unsigned long>(v9, &this->lock_team_avatar_guid_vec_);
    common::milog::MiLogStream::~MiLogStream(&v59);
    v4 = 171;
  }
  else
  {
    if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
      __asan_report_load8(&this->player_);
    MpComp = Player::getMpComp(this->player_);
    if ( PlayerMpComp::isInMpMode(MpComp) )
    {
      common::milog::MiLogStream::create(
        &v59,
        &common::milog::MiLogDefault::default_log_obj_,
        1u,
        "./src/player/avatar/player_avatar_comp.cpp",
        "lockTeamAvatar",
        6504);
      common::milog::MiLogStream::operator<<<char [46],(char *[46])0>(
        &v59,
        (const char (*)[46])"player is in mp mode, cannot lock team avatar");
      common::milog::MiLogStream::~MiLogStream(&v59);
      v4 = -1;
    }
    else if ( std::vector<unsigned long>::empty(avatar_guid_vec) )
    {
      common::milog::MiLogStream::create(
        &v59,
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/player/avatar/player_avatar_comp.cpp",
        "lockTeamAvatar",
        6510);
      v11 = common::milog::MiLogStream::operator<<<char [42],(char *[42])0>(
              &v59,
              (const char (*)[42])"lock avatar team size 0, avatar_guid_vec:");
      common::milog::MiLogStream::operator<<<unsigned long>(v11, avatar_guid_vec);
      common::milog::MiLogStream::~MiLogStream(&v59);
      v4 = -1;
    }
    else
    {
      PlayerAvatarComp::findSceneTeam((PlayerAvatarComp *const)(v5 + 96));
      if ( std::operator==<SceneTeam>(0LL, (const std::shared_ptr<SceneTeam> *)(v5 + 96)) )
      {
        common::milog::MiLogStream::create(
          &v59,
          &common::milog::MiLogDefault::default_log_obj_,
          3u,
          "./src/player/avatar/player_avatar_comp.cpp",
          "lockTeamAvatar",
          6516);
        common::milog::MiLogStream::operator<<<char [22],(char *[22])0>(
          &v59,
          (const char (*)[22])"findSceneTeam nullptr");
        common::milog::MiLogStream::~MiLogStream(&v59);
        v4 = -1;
      }
      else
      {
        v12 = std::vector<unsigned long>::size(avatar_guid_vec);
        v50 = std::__shared_ptr_access<SceneTeam,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<SceneTeam,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v5 + 96));
        if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
          __asan_report_load8(&this->player_);
        Uid = Player::getUid(this->player_);
        if ( v12 <= SceneTeam::getAllowAvatarNum(v50, Uid) )
        {
          std::unordered_set<unsigned long>::unordered_set((std::unordered_set<long unsigned int> *const)(v5 + 160));
          __for_range = avatar_guid_vec;
          __for_begin._M_current = std::vector<unsigned long>::begin(avatar_guid_vec)._M_current;
          __for_end._M_current = std::vector<unsigned long>::end(avatar_guid_vec)._M_current;
          while ( __gnu_cxx::operator!=<unsigned long const*,std::vector<unsigned long>>(&__for_begin, &__for_end) )
          {
            v19 = (unsigned __int64)__gnu_cxx::__normal_iterator<unsigned long const*,std::vector<unsigned long>>::operator*(&__for_begin);
            if ( *(_BYTE *)((v19 >> 3) + 0x7FFF8000) )
              v19 = __asan_report_load8(v19);
            *(_QWORD *)(v5 + 32) = *(_QWORD *)v19;
            PlayerAvatarComp::findAvatar(
              (const PlayerAvatarComp *const)(v5 + 128),
              (uint64_t)this,
              *(_QWORD *)(v5 + 32));
            if ( std::operator==<Avatar>(0LL, (const std::shared_ptr<Avatar> *)(v5 + 128)) )
            {
              common::milog::MiLogStream::create(
                &v59,
                &common::milog::MiLogDefault::default_log_obj_,
                3u,
                "./src/player/avatar/player_avatar_comp.cpp",
                "lockTeamAvatar",
                6531);
              v20 = common::milog::MiLogStream::operator<<<char [26],(char *[26])0>(
                      &v59,
                      (const char (*)[26])"findAvatar nullptr, guid:");
              common::milog::MiLogStream::operator<<<unsigned long,(unsigned long *)0>(
                v20,
                (const unsigned __int64 *)(v5 + 32));
              common::milog::MiLogStream::~MiLogStream(&v59);
              v4 = -1;
              v21 = 0;
            }
            else
            {
              v22 = (unsigned __int64)std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v5 + 128));
              if ( *(_BYTE *)((v22 >> 3) + 0x7FFF8000) )
                v22 = __asan_report_load8(v22);
              v23 = *(_QWORD *)v22 + 400LL;
              if ( *(_BYTE *)((v23 >> 3) + 0x7FFF8000) )
                v22 = __asan_report_load8(*(_QWORD *)v22 + 400LL);
              if ( (*(unsigned int (__fastcall **)(unsigned __int64))v23)(v22) == 1 )
                goto LABEL_39;
              v24 = (unsigned __int64)std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v5 + 128));
              if ( *(_BYTE *)((v24 >> 3) + 0x7FFF8000) )
                v24 = __asan_report_load8(v24);
              v25 = *(_QWORD *)v24 + 400LL;
              if ( *(_BYTE *)((v25 >> 3) + 0x7FFF8000) )
                v24 = __asan_report_load8(*(_QWORD *)v24 + 400LL);
              if ( (*(unsigned int (__fastcall **)(unsigned __int64))v25)(v24) == 2 )
LABEL_39:
                v26 = 0;
              else
                v26 = 1;
              if ( v26 )
              {
                common::milog::MiLogStream::create(
                  &v59,
                  &common::milog::MiLogDefault::default_log_obj_,
                  3u,
                  "./src/player/avatar/player_avatar_comp.cpp",
                  "lockTeamAvatar",
                  6536);
                v27 = common::milog::MiLogStream::operator<<<char [27],(char *[27])0>(
                        &v59,
                        (const char (*)[27])"invalid avatar type, guid:");
                v28 = common::milog::MiLogStream::operator<<<unsigned long,(unsigned long *)0>(
                        v27,
                        (const unsigned __int64 *)(v5 + 32));
                v29 = common::milog::MiLogStream::operator<<<char [8],(char *[8])0>(v28, (const char (*)[8])", type:");
                v30 = (unsigned __int64)std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v5 + 128));
                if ( *(_BYTE *)((v30 >> 3) + 0x7FFF8000) )
                  v30 = __asan_report_load8(v30);
                v31 = *(_QWORD *)v30 + 400LL;
                if ( *(_BYTE *)((v31 >> 3) + 0x7FFF8000) )
                  v30 = __asan_report_load8(*(_QWORD *)v30 + 400LL);
                val = (*(__int64 (__fastcall **)(unsigned __int64))v31)(v30);
                common::milog::MiLogStream::operator<<<proto::AvatarType,(proto::AvatarType*)0>(
                  v29,
                  (const proto::AvatarType *)&val);
                common::milog::MiLogStream::~MiLogStream(&v59);
                v4 = -1;
                v21 = 0;
              }
              else
              {
                v32 = std::unordered_set<unsigned long>::insert(
                        (std::unordered_set<long unsigned int> *const)(v5 + 160),
                        (const std::unordered_set<long unsigned int>::value_type *)(v5 + 32));
                if ( !v32.second )
                {
                  common::milog::MiLogStream::create(
                    &v59,
                    &common::milog::MiLogDefault::default_log_obj_,
                    3u,
                    "./src/player/avatar/player_avatar_comp.cpp",
                    "lockTeamAvatar",
                    6541);
                  v33 = common::milog::MiLogStream::operator<<<char [34],(char *[34])0>(
                          &v59,
                          (const char (*)[34])"duplicate guid in guid_vec, guid:");
                  v34 = common::milog::MiLogStream::operator<<<unsigned long,(unsigned long *)0>(
                          v33,
                          (const unsigned __int64 *)(v5 + 32));
                  v35 = common::milog::MiLogStream::operator<<<char [12],(char *[12])0>(
                          v34,
                          (const char (*)[12])", guid_vec:");
                  common::milog::MiLogStream::operator<<<unsigned long>(v35, avatar_guid_vec);
                  common::milog::MiLogStream::~MiLogStream(&v59);
                  v4 = -1;
                  v21 = 0;
                }
                else
                {
                  v36 = std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v5 + 128));
                  if ( Creature::getLifeState(v36) == LIFE_DEAD )
                  {
                    ServiceBox::findService<GameserverService>();
                    GameserverService::getConfig((GameserverService *const)&v58);
                    v37 = std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false> *const)&v58);
                    revive_hp_percent = (float)(int)ConstValueExcelConfigMgr::getHurtReviveHpPercent(&v37->design_config.txt_config_mgr.const_value_config_mgr);
                    std::shared_ptr<Config>::~shared_ptr((std::shared_ptr<Config> *const)&v58);
                    v38 = std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v5 + 128));
                    Creature::setCurHpPercent(v38, revive_hp_percent, CHANGE_HP_ADD_REVIVE, 1);
                    v39 = std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v5 + 128));
                    Avatar::clearSpeed(v39);
                    v40 = std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v5 + 128));
                    Avatar::setLifeAlive(v40, 0x66u, 0LL, 1);
                  }
                  v21 = 1;
                }
              }
            }
            std::shared_ptr<Avatar>::~shared_ptr((std::shared_ptr<Avatar> *const)(v5 + 128));
            if ( v21 != 1 )
              goto LABEL_63;
            __gnu_cxx::__normal_iterator<unsigned long const*,std::vector<unsigned long>>::operator++(&__for_begin);
          }
          __for_end._M_current = std::vector<unsigned long>::end(avatar_guid_vec)._M_current;
          M_current = std::vector<unsigned long>::end(avatar_guid_vec)._M_current;
          v42._M_current = std::vector<unsigned long>::begin(avatar_guid_vec)._M_current;
          __for_begin._M_current = std::find<__gnu_cxx::__normal_iterator<unsigned long const*,std::vector<unsigned long>>,unsigned long>(
                                     v42,
                                     (__gnu_cxx::__normal_iterator<long unsigned int const*,std::vector<long unsigned int> >)M_current,
                                     (const unsigned __int64 *)(v5 + 64))._M_current;
          if ( __gnu_cxx::operator==<unsigned long const*,std::vector<unsigned long>>(&__for_begin, &__for_end) )
          {
            common::milog::MiLogStream::create(
              &v59,
              &common::milog::MiLogDefault::default_log_obj_,
              3u,
              "./src/player/avatar/player_avatar_comp.cpp",
              "lockTeamAvatar",
              6554);
            v43 = common::milog::MiLogStream::operator<<<char [38],(char *[38])0>(
                    &v59,
                    (const char (*)[38])"appear guid is not in guid_vec, guid:");
            v44 = common::milog::MiLogStream::operator<<<unsigned long,(unsigned long *)0>(
                    v43,
                    (const unsigned __int64 *)(v5 + 64));
            v45 = common::milog::MiLogStream::operator<<<char [12],(char *[12])0>(
                    v44,
                    (const char (*)[12])", guid_vec:");
            common::milog::MiLogStream::operator<<<unsigned long>(v45, avatar_guid_vec);
            common::milog::MiLogStream::~MiLogStream(&v59);
            v4 = -1;
          }
          else
          {
            std::vector<unsigned long>::operator=(&this->lock_team_avatar_guid_vec_, avatar_guid_vec);
            common::milog::MiLogStream::create(
              &v59,
              &common::milog::MiLogDefault::default_log_obj_,
              1u,
              "./src/player/avatar/player_avatar_comp.cpp",
              "lockTeamAvatar",
              6559);
            v46 = common::milog::MiLogStream::operator<<<char [28],(char *[28])0>(
                    &v59,
                    (const char (*)[28])"lock team avatar, guid_vec:");
            common::milog::MiLogStream::operator<<<unsigned long>(v46, avatar_guid_vec);
            common::milog::MiLogStream::~MiLogStream(&v59);
            if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
              __asan_report_load8(&this->player_);
            Player::getSceneComp(this->player_);
            PlayerSceneComp::getCurScene((const PlayerSceneComp *const)(v5 + 128));
            if ( std::operator==<Scene>(0LL, (const std::shared_ptr<Scene> *)(v5 + 128)) )
            {
              v4 = 0;
            }
            else
            {
              std::shared_ptr<Scene>::shared_ptr(&v58, (const std::shared_ptr<Scene> *)(v5 + 128));
              v47 = PlayerAvatarComp::setSceneTeamAndAddToScene(
                      this,
                      avatar_guid_vec,
                      *(_QWORD *)(v5 + 64),
                      &v58,
                      reason) != 0;
              std::shared_ptr<Scene>::~shared_ptr(&v58);
              if ( v47 )
              {
                common::milog::MiLogStream::create(
                  &v59,
                  &common::milog::MiLogDefault::default_log_obj_,
                  3u,
                  "./src/player/avatar/player_avatar_comp.cpp",
                  "lockTeamAvatar",
                  6568);
                v48 = common::milog::MiLogStream::operator<<<char [55],(char *[55])0>(
                        &v59,
                        (const char (*)[55])off_26044CA0);
                common::milog::MiLogStream::operator<<<unsigned long>(v48, avatar_guid_vec);
                common::milog::MiLogStream::~MiLogStream(&v59);
                v4 = -1;
              }
              else
              {
                v4 = 0;
              }
            }
            std::shared_ptr<Scene>::~shared_ptr((std::shared_ptr<Scene> *const)(v5 + 128));
          }
LABEL_63:
          std::unordered_set<unsigned long>::~unordered_set((std::unordered_set<long unsigned int> *const)(v5 + 160));
        }
        else
        {
          common::milog::MiLogStream::create(
            &v59,
            &common::milog::MiLogDefault::default_log_obj_,
            3u,
            "./src/player/avatar/player_avatar_comp.cpp",
            "lockTeamAvatar",
            6521);
          v14 = common::milog::MiLogStream::operator<<<char [29],(char *[29])0>(
                  &v59,
                  (const char (*)[29])"scene team allow avatar num:");
          v15 = std::__shared_ptr_access<SceneTeam,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<SceneTeam,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v5 + 96));
          if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
            __asan_report_load8(&this->player_);
          v16 = Player::getUid(this->player_);
          val = SceneTeam::getAllowAvatarNum(v15, v16);
          v17 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v14, &val);
          v18 = common::milog::MiLogStream::operator<<<char [12],(char *[12])0>(v17, (const char (*)[12])", lock_num:");
          __for_end._M_current = (const unsigned __int64 *)std::vector<unsigned long>::size(avatar_guid_vec);
          common::milog::MiLogStream::operator<<<unsigned long,(unsigned long *)0>(
            v18,
            (const unsigned __int64 *)&__for_end);
          common::milog::MiLogStream::~MiLogStream(&v59);
          v4 = -1;
        }
      }
      std::shared_ptr<SceneTeam>::~shared_ptr((std::shared_ptr<SceneTeam> *const)(v5 + 96));
    }
  }
  result = v4;
  if ( v60 == (char *)v5 )
  {
    *(_QWORD *)((v5 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8008) = 0LL;
    *(_DWORD *)((v5 >> 3) + 0x7FFF8010) = 0;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8018) = 0LL;
  }
  else
  {
    *(_QWORD *)v5 = 1172321806LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 6575: range 00000000171A29F6-00000000171A2B50
int32_t __cdecl PlayerAvatarComp::unlockTeamAvatar(
        PlayerAvatarComp *const this,
        proto_log::ChangeSceneTeamReason reason)
{
  PlayerMpComp *MpComp; // rax
  common::milog::MiLogStream v4; // [rsp+10h] [rbp-30h] BYREF

  if ( std::vector<unsigned long>::empty(&this->lock_team_avatar_guid_vec_) )
  {
    common::milog::MiLogStream::create(
      &v4,
      &common::milog::MiLogDefault::default_log_obj_,
      1u,
      "./src/player/avatar/player_avatar_comp.cpp",
      "unlockTeamAvatar",
      6578);
    common::milog::MiLogStream::operator<<<char [29],(char *[29])0>(
      &v4,
      (const char (*)[29])"lock team empty, do nothing.");
    common::milog::MiLogStream::~MiLogStream(&v4);
    return 0;
  }
  else
  {
    std::vector<unsigned long>::clear(&this->lock_team_avatar_guid_vec_);
    if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
      __asan_report_load8(&this->player_);
    MpComp = Player::getMpComp(this->player_);
    PlayerMpComp::refreshMpModeAvailability(MpComp);
    common::milog::MiLogStream::create(
      &v4,
      &common::milog::MiLogDefault::default_log_obj_,
      1u,
      "./src/player/avatar/player_avatar_comp.cpp",
      "unlockTeamAvatar",
      6584);
    common::milog::MiLogStream::operator<<<char [22],(char *[22])0>(&v4, (const char (*)[22])"unlockTeamAvatar succ");
    common::milog::MiLogStream::~MiLogStream(&v4);
    return 0;
  }
};

// Line 6589: range 00000000171A2B52-00000000171A2D0A
std::pair<int,std::vector<unsigned int> > *__cdecl PlayerAvatarComp::checkMpModeAvailability(
        std::pair<int,std::vector<unsigned int> > *retstr,
        const PlayerAvatarComp *const this)
{
  proto::Retcode __x; // [rsp+1Ch] [rbp-54h] BYREF
  std::vector<unsigned int> __y; // [rsp+20h] [rbp-50h] BYREF
  common::milog::MiLogStream v5; // [rsp+40h] [rbp-30h] BYREF

  if ( !std::vector<unsigned long>::empty(&this->lock_team_avatar_guid_vec_) )
  {
    common::milog::MiLogStream::create(
      &v5,
      &common::milog::MiLogDefault::default_log_obj_,
      1u,
      "./src/player/avatar/player_avatar_comp.cpp",
      "checkMpModeAvailability",
      6592);
    common::milog::MiLogStream::operator<<<char [20],(char *[20])0>(&v5, (const char (*)[20])"team avatar is lock");
    common::milog::MiLogStream::~MiLogStream(&v5);
    memset(&__y, 0, sizeof(__y));
    std::vector<unsigned int>::vector(&__y);
    __x = RET_IS_IN_LOCK_AVATAR;
  }
  else
  {
    memset(&__y, 0, sizeof(__y));
    std::vector<unsigned int>::vector(&__y);
    __x = RET_SUCC;
  }
  std::make_pair<proto::Retcode,std::vector<unsigned int>>(
    (std::pair<proto::Retcode,std::vector<unsigned int> > *)&v5,
    &__x,
    &__y);
  std::pair<int,std::vector<unsigned int>>::pair<proto::Retcode,std::vector<unsigned int>,true>(
    retstr,
    (std::pair<proto::Retcode,std::vector<unsigned int> > *)&v5);
  std::pair<proto::Retcode,std::vector<unsigned int>>::~pair((std::pair<proto::Retcode,std::vector<unsigned int> > *const)&v5);
  std::vector<unsigned int>::~vector(&__y);
  return retstr;
};

// Line 6600: range 00000000171A2D0C-00000000171A2D30
bool __cdecl PlayerAvatarComp::isFormalTeam(PlayerAvatarComp *const this, uint32_t team_id)
{
  return team_id && team_id <= 4;
};

// Line 6606: range 00000000171A2D32-00000000171A2E31
_BOOL8 __fastcall PlayerAvatarComp::isValidBackupTeam(PlayerAvatarComp *const this, uint32_t team_id)
{
  unsigned __int64 v2; // rbx
  __int64 v3; // rax
  unsigned __int64 v4; // r12
  _BOOL8 result; // rax
  char v6[96]; // [rsp+10h] [rbp-60h] BYREF

  v2 = (unsigned __int64)v6;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_0(64LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "1 32 4 12 team_id:6605";
  *(_QWORD *)(v2 + 16) = PlayerAvatarComp::isValidBackupTeam;
  v4 = v2 >> 3;
  *(_DWORD *)(v4 + 2147450880) = -235802127;
  *(_DWORD *)(v4 + 2147450884) = -202116348;
  *(_DWORD *)(v2 + 32) = team_id;
  result = !PlayerAvatarComp::isFormalTeam(this, *(_DWORD *)(v2 + 32))
        && common::tools::MiscUtils::isContains<std::map<unsigned int,AvatarTeam>,unsigned int>(
             &this->avatar_team_map_,
             (const unsigned int *)(v2 + 32));
  if ( v6 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 6612: range 00000000171A2E32-00000000171A341E
void __cdecl PlayerAvatarComp::notifyAvatarTeamAllData(PlayerAvatarComp *const this)
{
  unsigned __int64 v1; // rbx
  __int64 v2; // rax
  unsigned __int64 v3; // r13
  common::milog::MiLogStream *v4; // r14
  std::__shared_ptr_access<proto::AvatarTeamAllDataNotify,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v5; // rax
  proto::AvatarTeam *v6; // r14
  const std::string *v7; // rax
  unsigned __int64 *v8; // rax
  proto::AvatarTeam *v9; // rax
  unsigned __int64 *v10; // rax
  std::__shared_ptr_access<proto::AvatarTeamAllDataNotify,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v11; // rax
  std::_List_iterator<unsigned int>::reference v12; // rax
  unsigned int *v13; // rdx
  std::__shared_ptr_access<proto::AvatarTeamAllDataNotify,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v14; // rax
  Player *player; // r14
  unsigned int val; // [rsp+18h] [rbp-118h] BYREF
  unsigned int backup_team_id; // [rsp+1Ch] [rbp-114h]
  std::map<unsigned int,AvatarTeam>::iterator __for_begin; // [rsp+20h] [rbp-110h] BYREF
  std::map<unsigned int,AvatarTeam>::iterator __for_end; // [rsp+28h] [rbp-108h] BYREF
  std::vector<long unsigned int>::const_iterator __for_begin_0; // [rsp+30h] [rbp-100h] BYREF
  std::vector<long unsigned int>::const_iterator __for_end_0; // [rsp+38h] [rbp-F8h] BYREF
  std::map<unsigned int,AvatarTeam> *__for_range; // [rsp+40h] [rbp-F0h]
  std::unordered_set<long unsigned int> *__for_range_1; // [rsp+48h] [rbp-E8h]
  std::list<unsigned int> *__for_range_2; // [rsp+50h] [rbp-E0h]
  unsigned __int64 guid_0; // [rsp+58h] [rbp-D8h]
  const std::pair<unsigned int const,AvatarTeam> *v26; // [rsp+60h] [rbp-D0h]
  std::tuple_element<0,const std::pair<unsigned int const,AvatarTeam> >::type *team_id; // [rsp+68h] [rbp-C8h]
  std::tuple_element<1,const std::pair<unsigned int const,AvatarTeam> >::type *avatar_team; // [rsp+70h] [rbp-C0h]
  google::protobuf::Map<unsigned int,proto::AvatarTeam> *proto_team_map; // [rsp+78h] [rbp-B8h]
  const std::vector<long unsigned int> *__for_range_0; // [rsp+80h] [rbp-B0h]
  unsigned __int64 guid; // [rsp+88h] [rbp-A8h]
  std::shared_ptr<proto::AvatarTeamAllDataNotify> __r; // [rsp+90h] [rbp-A0h] BYREF
  common::milog::MiLogStream v33; // [rsp+A0h] [rbp-90h] BYREF
  char v34[112]; // [rsp+C0h] [rbp-70h] BYREF

  v1 = (unsigned __int64)v34;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_0(64LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "1 32 16 15 notify_ptr:6613";
  *(_QWORD *)(v1 + 16) = PlayerAvatarComp::notifyAvatarTeamAllData;
  v3 = v1 >> 3;
  *(_DWORD *)(v3 + 2147450880) = -235802127;
  *(_DWORD *)(v3 + 2147450884) = -202178560;
  common::tools::perf::make_shared<proto::AvatarTeamAllDataNotify>();
  if ( std::operator==<proto::AvatarTeamAllDataNotify>(
         0LL,
         (const std::shared_ptr<proto::AvatarTeamAllDataNotify> *)(v1 + 32)) )
  {
    common::milog::MiLogStream::create(
      &v33,
      &common::milog::MiLogDefault::default_log_obj_,
      4u,
      "./src/player/avatar/player_avatar_comp.cpp",
      "notifyAvatarTeamAllData",
      6616);
    v4 = common::milog::MiLogStream::operator<<<char [66],(char *[66])0>(
           &v33,
           (const char (*)[66])"MAKE_SHARED<proto::AvatarTeamAllDataNotify> return nullptr, uid: ");
    if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
      __asan_report_load8(&this->player_);
    val = Player::getUid(this->player_);
    common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v4, &val);
    common::milog::MiLogStream::~MiLogStream(&v33);
  }
  else
  {
    __for_range = &this->avatar_team_map_;
    __for_begin._M_node = std::map<unsigned int,AvatarTeam>::begin(&this->avatar_team_map_)._M_node;
    __for_end._M_node = std::map<unsigned int,AvatarTeam>::end(&this->avatar_team_map_)._M_node;
    while ( std::operator!=(&__for_begin, &__for_end) )
    {
      v26 = std::_Rb_tree_iterator<std::pair<unsigned int const,AvatarTeam>>::operator*(&__for_begin);
      team_id = std::get<0ul,unsigned int const,AvatarTeam>(v26);
      avatar_team = (std::tuple_element<1,const std::pair<unsigned int const,AvatarTeam> >::type *)std::get<1ul,unsigned int const,AvatarTeam>(v26);
      v5 = std::__shared_ptr_access<proto::AvatarTeamAllDataNotify,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<proto::AvatarTeamAllDataNotify,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v1 + 32));
      proto_team_map = proto::AvatarTeamAllDataNotify::mutable_avatar_team_map(v5);
      v6 = google::protobuf::Map<unsigned int,proto::AvatarTeam>::operator[](proto_team_map, team_id);
      v7 = AvatarTeam::getTeamName[abi:cxx11](avatar_team);
      proto::AvatarTeam::set_team_name(v6, v7);
      __for_range_0 = AvatarTeam::getAvatarVec(avatar_team);
      __for_begin_0._M_current = std::vector<unsigned long>::begin(__for_range_0)._M_current;
      __for_end_0._M_current = std::vector<unsigned long>::end(__for_range_0)._M_current;
      while ( __gnu_cxx::operator!=<unsigned long const*,std::vector<unsigned long>>(&__for_begin_0, &__for_end_0) )
      {
        v8 = (unsigned __int64 *)__gnu_cxx::__normal_iterator<unsigned long const*,std::vector<unsigned long>>::operator*(&__for_begin_0);
        if ( *(_BYTE *)(((unsigned __int64)v8 >> 3) + 0x7FFF8000) )
          v8 = (unsigned __int64 *)__asan_report_load8(v8);
        guid = *v8;
        v9 = google::protobuf::Map<unsigned int,proto::AvatarTeam>::operator[](proto_team_map, team_id);
        proto::AvatarTeam::add_avatar_guid_list(v9, guid);
        __gnu_cxx::__normal_iterator<unsigned long const*,std::vector<unsigned long>>::operator++(&__for_begin_0);
      }
      std::_Rb_tree_iterator<std::pair<unsigned int const,AvatarTeam>>::operator++(&__for_begin);
    }
    __for_range_1 = &this->temp_avatar_guid_set_;
    __for_begin_0._M_current = (const unsigned __int64 *)std::unordered_set<unsigned long>::begin(&this->temp_avatar_guid_set_)._M_cur;
    __for_end_0._M_current = (const unsigned __int64 *)std::unordered_set<unsigned long>::end(__for_range_1)._M_cur;
    while ( std::__detail::operator!=<unsigned long,false>(
              (const std::__detail::_Node_iterator_base<long unsigned int,false> *)&__for_begin_0,
              (const std::__detail::_Node_iterator_base<long unsigned int,false> *)&__for_end_0) )
    {
      v10 = (unsigned __int64 *)std::__detail::_Node_iterator<unsigned long,true,false>::operator*((const std::__detail::_Node_iterator<long unsigned int,true,false> *const)&__for_begin_0);
      if ( *(_BYTE *)(((unsigned __int64)v10 >> 3) + 0x7FFF8000) )
        v10 = (unsigned __int64 *)__asan_report_load8(v10);
      guid_0 = *v10;
      v11 = std::__shared_ptr_access<proto::AvatarTeamAllDataNotify,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<proto::AvatarTeamAllDataNotify,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v1 + 32));
      proto::AvatarTeamAllDataNotify::add_temp_avatar_guid_list(v11, guid_0);
      std::__detail::_Node_iterator<unsigned long,true,false>::operator++((std::__detail::_Node_iterator<long unsigned int,true,false> *const)&__for_begin_0);
    }
    __for_range_2 = &this->backup_team_id_order_list_;
    __for_begin_0._M_current = (const unsigned __int64 *)std::list<unsigned int>::begin(&this->backup_team_id_order_list_)._M_node;
    __for_end_0._M_current = (const unsigned __int64 *)std::list<unsigned int>::end(__for_range_2)._M_node;
    while ( std::operator!=(
              (const std::_List_iterator<unsigned int>::_Self *)&__for_begin_0,
              (const std::_List_iterator<unsigned int>::_Self *)&__for_end_0) )
    {
      v12 = std::_List_iterator<unsigned int>::operator*((const std::_List_iterator<unsigned int> *const)&__for_begin_0);
      v13 = v12;
      if ( *(_BYTE *)(((unsigned __int64)v12 >> 3) + 0x7FFF8000) != 0
        && (char)(((unsigned __int8)v12 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)v12 >> 3) + 0x7FFF8000) )
      {
        __asan_report_load4(v12);
      }
      backup_team_id = *v13;
      v14 = std::__shared_ptr_access<proto::AvatarTeamAllDataNotify,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<proto::AvatarTeamAllDataNotify,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v1 + 32));
      proto::AvatarTeamAllDataNotify::add_backup_avatar_team_order_list(v14, backup_team_id);
      std::_List_iterator<unsigned int>::operator++((std::_List_iterator<unsigned int> *const)&__for_begin_0);
    }
    if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
      __asan_report_load8(&this->player_);
    player = this->player_;
    std::dynamic_pointer_cast<google::protobuf::Message const,proto::AvatarTeamAllDataNotify>(&__r);
    Player::sendMessage(player, (common::minet::ConstMessagePtr *)&__r, 0LL);
    std::shared_ptr<google::protobuf::Message const>::~shared_ptr((std::shared_ptr<const google::protobuf::Message> *const)&__r);
  }
  std::shared_ptr<proto::AvatarTeamAllDataNotify>::~shared_ptr((std::shared_ptr<proto::AvatarTeamAllDataNotify> *const)(v1 + 32));
  if ( v34 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
  }
};

// Line 6642: range 00000000171A3420-00000000171A3903
int32_t __cdecl PlayerAvatarComp::checkAndAddBackupAvatarTeam(PlayerAvatarComp *const this)
{
  unsigned __int64 v1; // rbx
  __int64 v2; // rax
  unsigned __int64 v3; // r13
  common::milog::MiLogStream *v4; // r12
  int32_t result; // eax
  common::milog::MiLogStream *v6; // r12
  common::milog::MiLogStream *v7; // rax
  common::milog::MiLogStream *v8; // rax
  common::milog::MiLogStream *v9; // rax
  common::milog::MiLogStream *v10; // r12
  unsigned int *v11; // rcx
  AvatarTeam *v12; // r8
  std::pair<std::_Rb_tree_iterator<std::pair<unsigned int const,AvatarTeam> >,bool> v13; // rax
  bool v14; // r14
  common::milog::MiLogStream *v15; // rax
  common::milog::MiLogStream *v16; // rax
  common::milog::MiLogStream *v17; // r12
  unsigned int val; // [rsp+14h] [rbp-DCh] BYREF
  unsigned __int64 v19; // [rsp+18h] [rbp-D8h] BYREF
  common::milog::MiLogStream v20; // [rsp+20h] [rbp-D0h] BYREF
  AvatarTeam v21; // [rsp+40h] [rbp-B0h] BYREF
  char v22[112]; // [rsp+80h] [rbp-70h] BYREF

  v1 = (unsigned __int64)v22;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_0(64LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "1 32 4 19 backup_team_id:6649";
  *(_QWORD *)(v1 + 16) = PlayerAvatarComp::checkAndAddBackupAvatarTeam;
  v3 = v1 >> 3;
  *(_DWORD *)(v3 + 2147450880) = -235802127;
  *(_DWORD *)(v3 + 2147450884) = -202116348;
  if ( std::map<unsigned int,AvatarTeam>::size(&this->avatar_team_map_) <= 9 )
  {
    *(_DWORD *)(v1 + 32) = PlayerAvatarComp::generateBackupTeamId(this);
    if ( *(_DWORD *)(v1 + 32) )
    {
      memset(&v21, 0, sizeof(v21));
      AvatarTeam::AvatarTeam(&v21);
      v13 = std::map<unsigned int,AvatarTeam>::emplace<unsigned int &,AvatarTeam>(
              &this->avatar_team_map_,
              (unsigned int *)(v1 + 32),
              &v21,
              v11,
              v12);
      v14 = !v13.second;
      AvatarTeam::~AvatarTeam(&v21);
      if ( v14 )
      {
        common::milog::MiLogStream::create(
          &v20,
          &common::milog::MiLogDefault::default_log_obj_,
          3u,
          "./src/player/avatar/player_avatar_comp.cpp",
          "checkAndAddBackupAvatarTeam",
          6660);
        v15 = common::milog::MiLogStream::operator<<<char [37],(char *[37])0>(
                &v20,
                (const char (*)[37])"generated duplicate backup_team_id: ");
        v16 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                v15,
                (const unsigned int *)(v1 + 32));
        v17 = common::milog::MiLogStream::operator<<<char [8],(char *[8])0>(v16, (const char (*)[8])", uid: ");
        if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
          __asan_report_load8(&this->player_);
        val = Player::getUid(this->player_);
        common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v17, &val);
        common::milog::MiLogStream::~MiLogStream(&v20);
        result = -1;
      }
      else
      {
        PlayerAvatarComp::onAddBackupAvatarTeam(this, *(_DWORD *)(v1 + 32));
        result = 0;
      }
    }
    else
    {
      common::milog::MiLogStream::create(
        &v20,
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/player/avatar/player_avatar_comp.cpp",
        "checkAndAddBackupAvatarTeam",
        6653);
      v6 = common::milog::MiLogStream::operator<<<char [53],(char *[53])0>(
             &v20,
             (const char (*)[53])"generateBackupTeamId failed, avatar_team_map_ size: ");
      v19 = std::map<unsigned int,AvatarTeam>::size(&this->avatar_team_map_);
      v7 = common::milog::MiLogStream::operator<<<unsigned long,(unsigned long *)0>(v6, &v19);
      v8 = common::milog::MiLogStream::operator<<<char [23],(char *[23])0>(
             v7,
             (const char (*)[23])", MAX_BACKUP_TEAM_ID: ");
      v9 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
             v8,
             &PlayerAvatarComp::MAX_BACKUP_TEAM_ID);
      v10 = common::milog::MiLogStream::operator<<<char [8],(char *[8])0>(v9, (const char (*)[8])", uid: ");
      if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
        __asan_report_load8(&this->player_);
      val = Player::getUid(this->player_);
      common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v10, &val);
      common::milog::MiLogStream::~MiLogStream(&v20);
      result = -1;
    }
  }
  else
  {
    common::milog::MiLogStream::create(
      &v20,
      &common::milog::MiLogDefault::default_log_obj_,
      1u,
      "./src/player/avatar/player_avatar_comp.cpp",
      "checkAndAddBackupAvatarTeam",
      6645);
    v4 = common::milog::MiLogStream::operator<<<char [27],(char *[27])0>(
           &v20,
           (const char (*)[27])"backup team is full, uid: ");
    if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
      __asan_report_load8(&this->player_);
    val = Player::getUid(this->player_);
    common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v4, &val);
    common::milog::MiLogStream::~MiLogStream(&v20);
    result = 172;
  }
  if ( v22 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 6667: range 00000000171A3904-00000000171A3C3F
__int64 __fastcall PlayerAvatarComp::checkAndDelBackupAvatarTeam(PlayerAvatarComp *const this, uint32_t backup_team_id)
{
  unsigned __int64 v2; // rbx
  __int64 v3; // rax
  unsigned __int64 v4; // r13
  common::milog::MiLogStream *v5; // rax
  common::milog::MiLogStream *v6; // rax
  common::milog::MiLogStream *v7; // r12
  __int64 result; // rax
  common::milog::MiLogStream *v9; // rax
  common::milog::MiLogStream *v10; // rax
  common::milog::MiLogStream *v11; // r12
  unsigned int val; // [rsp+1Ch] [rbp-84h] BYREF
  common::milog::MiLogStream v13; // [rsp+20h] [rbp-80h] BYREF
  char v14[96]; // [rsp+40h] [rbp-60h] BYREF

  v2 = (unsigned __int64)v14;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_0(64LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "1 32 4 19 backup_team_id:6666";
  *(_QWORD *)(v2 + 16) = PlayerAvatarComp::checkAndDelBackupAvatarTeam;
  v4 = v2 >> 3;
  *(_DWORD *)(v4 + 2147450880) = -235802127;
  *(_DWORD *)(v4 + 2147450884) = -202116348;
  *(_DWORD *)(v2 + 32) = backup_team_id;
  if ( !PlayerAvatarComp::isValidBackupTeam(this, *(_DWORD *)(v2 + 32)) )
  {
    common::milog::MiLogStream::create(
      &v13,
      &common::milog::MiLogDefault::default_log_obj_,
      1u,
      "./src/player/avatar/player_avatar_comp.cpp",
      "checkAndDelBackupAvatarTeam",
      6670);
    v5 = common::milog::MiLogStream::operator<<<char [46],(char *[46])0>(
           &v13,
           (const char (*)[46])"backup_team_id is not valid, backup_team_id: ");
    v6 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v5, (const unsigned int *)(v2 + 32));
    v7 = common::milog::MiLogStream::operator<<<char [8],(char *[8])0>(v6, (const char (*)[8])", uid: ");
    if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
      __asan_report_load8(&this->player_);
    val = Player::getUid(this->player_);
    common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v7, &val);
    common::milog::MiLogStream::~MiLogStream(&v13);
    result = 173LL;
  }
  else
  {
    if ( *(_BYTE *)(((unsigned __int64)&this->cur_avatar_team_id_ >> 3) + 0x7FFF8000) != 0
      && *(_BYTE *)(((unsigned __int64)&this->cur_avatar_team_id_ >> 3) + 0x7FFF8000) <= 3 )
    {
      __asan_report_load4(&this->cur_avatar_team_id_);
    }
    if ( this->cur_avatar_team_id_ == *(_DWORD *)(v2 + 32) )
    {
      common::milog::MiLogStream::create(
        &v13,
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/player/avatar/player_avatar_comp.cpp",
        "checkAndDelBackupAvatarTeam",
        6676);
      v9 = common::milog::MiLogStream::operator<<<char [56],(char *[56])0>(
             &v13,
             (const char (*)[56])"backup_team_id cannot be current team, backup_team_id: ");
      v10 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v9, (const unsigned int *)(v2 + 32));
      v11 = common::milog::MiLogStream::operator<<<char [8],(char *[8])0>(v10, (const char (*)[8])", uid: ");
      if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
        __asan_report_load8(&this->player_);
      val = Player::getUid(this->player_);
      common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v11, &val);
      common::milog::MiLogStream::~MiLogStream(&v13);
      result = 174LL;
    }
    else
    {
      std::map<unsigned int,AvatarTeam>::erase(
        &this->avatar_team_map_,
        (const std::map<unsigned int,AvatarTeam>::key_type *)(v2 + 32));
      PlayerAvatarComp::onDelBackupAvatarTeam(this, *(_DWORD *)(v2 + 32));
      result = 0LL;
    }
  }
  if ( v14 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 6685: range 00000000171A3C40-00000000171A3D1E
void __fastcall PlayerAvatarComp::onAddBackupAvatarTeam(PlayerAvatarComp *const this, uint32_t backup_team_id)
{
  unsigned __int64 v2; // rbx
  __int64 v3; // rax
  unsigned __int64 v4; // r12
  char v5[96]; // [rsp+10h] [rbp-60h] BYREF

  v2 = (unsigned __int64)v5;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_0(64LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "1 32 4 19 backup_team_id:6684";
  *(_QWORD *)(v2 + 16) = PlayerAvatarComp::onAddBackupAvatarTeam;
  v4 = v2 >> 3;
  *(_DWORD *)(v4 + 2147450880) = -235802127;
  *(_DWORD *)(v4 + 2147450884) = -202116348;
  *(_DWORD *)(v2 + 32) = backup_team_id;
  std::list<unsigned int>::emplace_back<unsigned int &>(
    &this->backup_team_id_order_list_,
    (unsigned int *)(v2 + 32),
    (unsigned int *)(v2 + 32));
  PlayerAvatarComp::notifyAvatarTeamAllData(this);
  if ( v5 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
  }
};

// Line 6692: range 00000000171A3D20-00000000171A3DFE
void __fastcall PlayerAvatarComp::onDelBackupAvatarTeam(PlayerAvatarComp *const this, uint32_t backup_team_id)
{
  unsigned __int64 v2; // rbx
  __int64 v3; // rax
  unsigned __int64 v4; // r12
  char v5[96]; // [rsp+10h] [rbp-60h] BYREF

  v2 = (unsigned __int64)v5;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_0(64LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "1 32 4 19 backup_team_id:6691";
  *(_QWORD *)(v2 + 16) = PlayerAvatarComp::onDelBackupAvatarTeam;
  v4 = v2 >> 3;
  *(_DWORD *)(v4 + 2147450880) = -235802127;
  *(_DWORD *)(v4 + 2147450884) = -202116348;
  *(_DWORD *)(v2 + 32) = backup_team_id;
  std::list<unsigned int>::remove(
    &this->backup_team_id_order_list_,
    (const std::list<unsigned int>::value_type *)(v2 + 32));
  PlayerAvatarComp::notifyAvatarTeamAllData(this);
  if ( v5 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
  }
};

// Line 6699: range 00000000171A3E00-00000000171A3EFF
uint32_t __cdecl PlayerAvatarComp::generateBackupTeamId(PlayerAvatarComp *const this)
{
  unsigned __int64 v1; // rbx
  __int64 v2; // rax
  unsigned __int64 v3; // r13
  uint32_t result; // eax
  char v5[96]; // [rsp+10h] [rbp-60h] BYREF

  v1 = (unsigned __int64)v5;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_0(64LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "1 32 4 19 backup_team_id:6704";
  *(_QWORD *)(v1 + 16) = PlayerAvatarComp::generateBackupTeamId;
  v3 = v1 >> 3;
  *(_DWORD *)(v3 + 2147450880) = -235802127;
  *(_DWORD *)(v3 + 2147450884) = -202116348;
  for ( *(_DWORD *)(v1 + 32) = 5; *(_DWORD *)(v1 + 32) <= 0xAu; ++*(_DWORD *)(v1 + 32) )
  {
    if ( !common::tools::MiscUtils::isContains<std::map<unsigned int,AvatarTeam>,unsigned int>(
            &this->avatar_team_map_,
            (const unsigned int *)(v1 + 32)) )
    {
      result = *(_DWORD *)(v1 + 32);
      goto LABEL_10;
    }
  }
  result = 0;
LABEL_10:
  if ( v5 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 6716: range 00000000171A3F00-00000000171A4058
const AvatarRenameData *__fastcall PlayerAvatarComp::findAvatarRenameData(
        const PlayerAvatarComp *const this,
        uint32_t avatar_id)
{
  unsigned __int64 v2; // rbx
  __int64 v3; // rax
  _DWORD *v4; // r12
  const AvatarRenameData *result; // rax
  std::_Rb_tree_const_iterator<std::pair<unsigned int const,AvatarRenameData> >::_Self __y; // [rsp+18h] [rbp-88h] BYREF
  char v7[128]; // [rsp+20h] [rbp-80h] BYREF

  v2 = (unsigned __int64)v7;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_1(96LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "2 48 4 14 avatar_id:6715 64 8 9 iter:6717";
  *(_QWORD *)(v2 + 16) = PlayerAvatarComp::findAvatarRenameData;
  v4 = (_DWORD *)(v2 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = -234556943;
  v4[536862722] = -202116352;
  *(_DWORD *)(v2 + 48) = avatar_id;
  *(std::map<unsigned int,AvatarRenameData>::const_iterator *)(v2 + 64) = std::map<unsigned int,AvatarRenameData>::find(
                                                                            &this->avatar_rename_data_map_,
                                                                            (const std::map<unsigned int,AvatarRenameData>::key_type *)(v2 + 48));
  __y._M_node = std::map<unsigned int,AvatarRenameData>::end(&this->avatar_rename_data_map_)._M_node;
  if ( std::operator!=(
         (const std::_Rb_tree_const_iterator<std::pair<unsigned int const,AvatarRenameData> >::_Self *)(v2 + 64),
         &__y) )
  {
    result = &std::_Rb_tree_const_iterator<std::pair<unsigned int const,AvatarRenameData>>::operator->((const std::_Rb_tree_const_iterator<std::pair<unsigned int const,AvatarRenameData> > *const)(v2 + 64))->second;
  }
  else
  {
    result = 0LL;
  }
  if ( v7 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8008) = 0;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8008) = -168430091;
  }
  return result;
};

// Line 6726: range 00000000171A405A-00000000171A4265
void __fastcall PlayerAvatarComp::tryInitAvatarRenameData(PlayerAvatarComp *const this, uint32_t avatar_id)
{
  unsigned __int64 v2; // r13
  __int64 v3; // rax
  _DWORD *v4; // rbx
  AvatarRenameData *v5; // r8
  std::_Rb_tree_iterator<std::pair<unsigned int const,AvatarRenameData> >::_Self __y; // [rsp+18h] [rbp-108h] BYREF
  char v7[256]; // [rsp+20h] [rbp-100h] BYREF

  v2 = (unsigned __int64)v7;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_2(224LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "3 48 4 14 avatar_id:6725 64 8 9 iter:6727 96 88 16 rename_data:6730";
  *(_QWORD *)(v2 + 16) = PlayerAvatarComp::tryInitAvatarRenameData;
  v4 = (_DWORD *)(v2 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = -234556943;
  v4[536862722] = -218959360;
  v4[536862725] = -218103808;
  v4[536862726] = -202116109;
  *(_DWORD *)(v2 + 48) = avatar_id;
  *(std::map<unsigned int,AvatarRenameData>::iterator *)(v2 + 64) = std::map<unsigned int,AvatarRenameData>::find(
                                                                      &this->avatar_rename_data_map_,
                                                                      (const std::map<unsigned int,AvatarRenameData>::key_type *)(v2 + 48));
  __y._M_node = std::map<unsigned int,AvatarRenameData>::end(&this->avatar_rename_data_map_)._M_node;
  if ( std::operator==(
         (const std::_Rb_tree_iterator<std::pair<unsigned int const,AvatarRenameData> >::_Self *)(v2 + 64),
         &__y) )
  {
    AvatarRenameData::AvatarRenameData((AvatarRenameData *const)(v2 + 96));
    AvatarRenameData::init((AvatarRenameData *const)(v2 + 96), *(_DWORD *)(v2 + 48));
    std::map<unsigned int,AvatarRenameData>::emplace<unsigned int &,AvatarRenameData&>(
      &this->avatar_rename_data_map_,
      (unsigned int *)(v2 + 48),
      (AvatarRenameData *)(v2 + 96),
      (unsigned int *)&this->avatar_rename_data_map_,
      v5);
    AvatarRenameData::~AvatarRenameData((AvatarRenameData *const)(v2 + 96));
  }
  if ( v7 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8008) = 0;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8014) = 0LL;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8018) = -168430091;
  }
};

// Line 6737: range 00000000171A4266-00000000171A4A38
__int64 __fastcall PlayerAvatarComp::setAvatarRenameByQuest(
        PlayerAvatarComp *const this,
        __int32 rename_id,
        __int32 avatar_id,
        const std::string *name)
{
  unsigned __int64 v4; // r13
  __int64 v5; // rax
  _DWORD *v6; // r12
  __int64 v7; // rsi
  std::_Rb_tree_iterator<std::pair<unsigned int const,AvatarRenameData> >::pointer v8; // rax
  __int64 v9; // rsi
  __int64 v10; // rdx
  PlayerEventComp *EventComp; // r14
  std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v12; // rax
  common::milog::MiLogStream *v13; // rax
  common::milog::MiLogStream *v14; // rax
  common::milog::MiLogStream *v15; // rax
  PlayerBasicComp *BasicComp; // rax
  std::__shared_ptr_access<proto_log::PlayerLogBodyQuestAvatarRename,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v17; // rax
  std::__shared_ptr_access<proto_log::PlayerLogBodyQuestAvatarRename,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v18; // r14
  bool hasAvatar; // al
  std::__shared_ptr_access<proto_log::PlayerLogBodyQuestAvatarRename,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v20; // rax
  Player *player; // r14
  unsigned int v22; // r14d
  common::milog::MiLogStream *v23; // rax
  __int64 result; // rax
  std::string v25; // [rsp+0h] [rbp-190h]
  PlayerAvatarComp *thisa; // [rsp+18h] [rbp-178h]
  proto::AvatarRenameAuditSourceType type; // [rsp+2Ch] [rbp-164h] BYREF
  std::_Rb_tree_iterator<std::pair<unsigned int const,AvatarRenameData> >::_Self __y; // [rsp+30h] [rbp-160h] BYREF
  AvatarRenameData *rename_data; // [rsp+38h] [rbp-158h]
  std::shared_ptr<QuestAvatarRenameEvent> __r; // [rsp+40h] [rbp-150h] BYREF
  std::shared_ptr<BaseEvent> p_event_ptr; // [rsp+50h] [rbp-140h] BYREF
  std::string s; // [rsp+60h] [rbp-130h] BYREF
  char v33[272]; // [rsp+80h] [rbp-110h] BYREF

  *(&v25._anon_0._M_allocated_capacity + 1) = (std::string::size_type)this;
  HIDWORD(v25._anon_0._M_allocated_capacity) = rename_id;
  *(_DWORD *)v25._anon_0._M_local_buf = avatar_id;
  v25._M_string_length = (std::string::size_type)name;
  v4 = (unsigned __int64)v33;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v5 = __asan_stack_malloc_2(224LL);
    if ( v5 )
      v4 = v5;
  }
  *(_QWORD *)v4 = 1102416563LL;
  *(_QWORD *)(v4 + 8) = "6 48 1 11 holder:6758 64 4 14 rename_id:6736 80 4 14 avatar_id:6736 96 8 9 iter:6741 128 16 12 l"
                        "og_ptr:6759 160 32 17 trimmed_name:6740";
  *(_QWORD *)(v4 + 16) = PlayerAvatarComp::setAvatarRenameByQuest;
  v6 = (_DWORD *)(v4 >> 3);
  v6[536862720] = -235802127;
  v6[536862721] = -234753551;
  v6[536862722] = -234556924;
  v6[536862723] = -218959360;
  v6[536862724] = -219021312;
  v6[536862726] = -202116109;
  *(_DWORD *)(v4 + 64) = rename_id;
  *(_DWORD *)(v4 + 80) = *(_DWORD *)v25._anon_0._M_local_buf;
  v7 = *(unsigned int *)(v4 + 80);
  PlayerAvatarComp::tryInitAvatarRenameData(this, v7);
  std::allocator<char>::allocator(v4 + 48, v7);
  std::string::basic_string<std::allocator<char>>(&s, off_26045360, (const std::allocator<char> *)(v4 + 48));
  common::tools::StringUtils::trim((std::string *)(v4 + 160), (const std::string *)v25._M_string_length, &s, 1);
  std::string::~string(&s);
  std::allocator<char>::~allocator(v4 + 48);
  *(std::map<unsigned int,AvatarRenameData>::iterator *)(v4 + 96) = std::map<unsigned int,AvatarRenameData>::find(
                                                                      &this->avatar_rename_data_map_,
                                                                      (const std::map<unsigned int,AvatarRenameData>::key_type *)(v4 + 80));
  __y._M_node = std::map<unsigned int,AvatarRenameData>::end(&this->avatar_rename_data_map_)._M_node;
  if ( std::operator!=(
         (const std::_Rb_tree_iterator<std::pair<unsigned int const,AvatarRenameData> >::_Self *)(v4 + 96),
         &__y) )
  {
    v8 = std::_Rb_tree_iterator<std::pair<unsigned int const,AvatarRenameData>>::operator->((const std::_Rb_tree_iterator<std::pair<unsigned int const,AvatarRenameData> > *const)(v4 + 96));
    rename_data = &v8->second;
    std::string::operator=(&v8->second.cur_avatar_name, v4 + 160);
    v9 = ((_BYTE)rename_data + 4) & 7;
    v10 = (*(_BYTE *)(((unsigned __int64)&rename_data->has_set_by_quest >> 3) + 0x7FFF8000) != 0) & (unsigned __int8)((char)v9 >= *(_BYTE *)(((unsigned __int64)&rename_data->has_set_by_quest >> 3) + 0x7FFF8000));
    if ( (_BYTE)v10 )
      __asan_report_store1(&rename_data->has_set_by_quest, v9, v10);
    rename_data->has_set_by_quest = 1;
    if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
      __asan_report_load8(&this->player_);
    EventComp = Player::getEventComp(this->player_);
    common::tools::perf::make_shared<QuestAvatarRenameEvent,unsigned int &>(
      (unsigned int *)&__r,
      (unsigned int *)(v4 + 64));
    std::shared_ptr<BaseEvent>::shared_ptr<QuestAvatarRenameEvent,void>(&p_event_ptr, &__r);
    PlayerEventComp::notifyEvent(EventComp, &p_event_ptr);
    std::shared_ptr<BaseEvent>::~shared_ptr(&p_event_ptr);
    std::shared_ptr<QuestAvatarRenameEvent>::~shared_ptr(&__r);
    PlayerAvatarComp::notifyAvatarRenameData(this);
    ServiceBox::findService<GameserverService>();
    GameserverService::getConfig((GameserverService *const)&p_event_ptr);
    v12 = std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false> *const)&p_event_ptr);
    LOBYTE(EventComp) = !FeatureSwitchMgr::isQuestAvatarRenameAuditClosed(&v12->feature_switch_mgr);
    std::shared_ptr<Config>::~shared_ptr((std::shared_ptr<Config> *const)&p_event_ptr);
    if ( (_BYTE)EventComp )
    {
      type = AVATAR_RENAME_AUDIT_SOURCE_QUEST;
      PlayerAvatarComp::asyncAvatarRenameAuditRequest(this, rename_data, &type);
    }
    common::milog::MiLogStream::create(
      (common::milog::MiLogStream *)&s,
      &common::milog::MiLogDefault::default_log_obj_,
      1u,
      "./src/player/avatar/player_avatar_comp.cpp",
      "setAvatarRenameByQuest",
      6756);
    v13 = common::milog::MiLogStream::operator<<<char [41],(char *[41])0>(
            (common::milog::MiLogStream *const)&s,
            (const char (*)[41])"setAvatarRenameByQuest succ, avatar_id: ");
    v14 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v13, (const unsigned int *)(v4 + 80));
    v15 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(v14, (const char (*)[16])", avatar_name: ");
    common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v15, (const std::string *)(v4 + 160));
    common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)&s);
    if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
      __asan_report_load8(&this->player_);
    BasicComp = Player::getBasicComp(this->player_);
    PlayerBasicComp::getNextTransNo[abi:cxx11](&s, BasicComp);
    StatLogUtils::ContextHolder::ContextHolder((StatLogUtils::ContextHolder *const)(v4 + 48), 0x658u, v25);
    std::string::~string(&s);
    common::tools::perf::make_shared<proto_log::PlayerLogBodyQuestAvatarRename>();
    v17 = std::__shared_ptr_access<proto_log::PlayerLogBodyQuestAvatarRename,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<proto_log::PlayerLogBodyQuestAvatarRename,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 128));
    proto_log::PlayerLogBodyQuestAvatarRename::set_avatar_id(v17, *(_DWORD *)(v4 + 80));
    v18 = std::__shared_ptr_access<proto_log::PlayerLogBodyQuestAvatarRename,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<proto_log::PlayerLogBodyQuestAvatarRename,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 128));
    hasAvatar = PlayerAvatarComp::hasAvatar(thisa, AVATAR_TYPE_FORMAL, *(_DWORD *)(v4 + 80));
    proto_log::PlayerLogBodyQuestAvatarRename::set_is_own(v18, hasAvatar);
    v20 = std::__shared_ptr_access<proto_log::PlayerLogBodyQuestAvatarRename,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<proto_log::PlayerLogBodyQuestAvatarRename,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 128));
    proto_log::PlayerLogBodyQuestAvatarRename::set_after_name(v20, (const std::string *)(v4 + 160));
    if ( *(_BYTE *)(((unsigned __int64)&thisa->player_ >> 3) + 0x7FFF8000) )
      __asan_report_load8(&thisa->player_);
    player = thisa->player_;
    std::shared_ptr<google::protobuf::Message>::shared_ptr(
      (std::shared_ptr<google::protobuf::Message> *const)&p_event_ptr,
      0LL);
    std::shared_ptr<google::protobuf::Message>::shared_ptr<proto_log::PlayerLogBodyQuestAvatarRename,void>(
      (std::shared_ptr<google::protobuf::Message> *const)&__r,
      (const std::shared_ptr<proto_log::PlayerLogBodyQuestAvatarRename> *)(v4 + 128));
    Player::printStatLog(player, (MessagePtr *)&__r, (MessagePtr *)&p_event_ptr, 0xEu);
    std::shared_ptr<google::protobuf::Message>::~shared_ptr((std::shared_ptr<google::protobuf::Message> *const)&__r);
    std::shared_ptr<google::protobuf::Message>::~shared_ptr((std::shared_ptr<google::protobuf::Message> *const)&p_event_ptr);
    v22 = 0;
    std::shared_ptr<proto_log::PlayerLogBodyQuestAvatarRename>::~shared_ptr((std::shared_ptr<proto_log::PlayerLogBodyQuestAvatarRename> *const)(v4 + 128));
    StatLogUtils::ContextHolder::~ContextHolder((StatLogUtils::ContextHolder *const)(v4 + 48));
  }
  else
  {
    common::milog::MiLogStream::create(
      (common::milog::MiLogStream *)&s,
      &common::milog::MiLogDefault::default_log_obj_,
      4u,
      "./src/player/avatar/player_avatar_comp.cpp",
      "setAvatarRenameByQuest",
      6768);
    v23 = common::milog::MiLogStream::operator<<<char [53],(char *[53])0>(
            (common::milog::MiLogStream *const)&s,
            (const char (*)[53])"cannot find avatarRenameData after init, avatar_id: ");
    common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v23, (const unsigned int *)(v4 + 80));
    common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)&s);
    v22 = -1;
  }
  std::string::~string((void *)(v4 + 160));
  result = v22;
  if ( v33 == (char *)v4 )
  {
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8008) = 0LL;
    *(_DWORD *)((v4 >> 3) + 0x7FFF8010) = 0;
    *(_DWORD *)((v4 >> 3) + 0x7FFF8018) = 0;
  }
  else
  {
    *(_QWORD *)v4 = 1172321806LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v4 >> 3) + 0x7FFF8018) = -168430091;
  }
  return result;
};

// Line 6774: range 00000000171A4A3A-00000000171A4C93
void __cdecl PlayerAvatarComp::notifyAvatarRenameData(PlayerAvatarComp *const this)
{
  unsigned __int64 v1; // rbx
  __int64 v2; // rax
  unsigned __int64 v3; // r12
  std::__shared_ptr_access<proto::AvatarRenameInfoNotify,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v4; // rax
  Player *player; // r14
  std::map<unsigned int,AvatarRenameData>::iterator __for_begin; // [rsp+18h] [rbp-B8h] BYREF
  std::map<unsigned int,AvatarRenameData>::iterator __for_end; // [rsp+20h] [rbp-B0h] BYREF
  std::map<unsigned int,AvatarRenameData> *__for_range; // [rsp+28h] [rbp-A8h]
  const std::pair<unsigned int const,AvatarRenameData> *v9; // [rsp+30h] [rbp-A0h]
  std::tuple_element<0,const std::pair<unsigned int const,AvatarRenameData> >::type *avatar_id; // [rsp+38h] [rbp-98h]
  std::tuple_element<1,const std::pair<unsigned int const,AvatarRenameData> >::type *rename_data; // [rsp+40h] [rbp-90h]
  proto::AvatarRenameInfo *rename_info; // [rsp+48h] [rbp-88h]
  std::shared_ptr<proto::AvatarRenameInfoNotify> __r; // [rsp+50h] [rbp-80h] BYREF
  char v14[112]; // [rsp+60h] [rbp-70h] BYREF

  v1 = (unsigned __int64)v14;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_0(64LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "1 32 16 15 notify_ptr:6775";
  *(_QWORD *)(v1 + 16) = PlayerAvatarComp::notifyAvatarRenameData;
  v3 = v1 >> 3;
  *(_DWORD *)(v3 + 2147450880) = -235802127;
  *(_DWORD *)(v3 + 2147450884) = -202178560;
  common::tools::perf::make_shared<proto::AvatarRenameInfoNotify>();
  __for_range = &this->avatar_rename_data_map_;
  __for_begin._M_node = std::map<unsigned int,AvatarRenameData>::begin(&this->avatar_rename_data_map_)._M_node;
  __for_end._M_node = std::map<unsigned int,AvatarRenameData>::end(&this->avatar_rename_data_map_)._M_node;
  while ( std::operator!=(&__for_begin, &__for_end) )
  {
    v9 = std::_Rb_tree_iterator<std::pair<unsigned int const,AvatarRenameData>>::operator*(&__for_begin);
    avatar_id = std::get<0ul,unsigned int const,AvatarRenameData>(v9);
    rename_data = (std::tuple_element<1,const std::pair<unsigned int const,AvatarRenameData> >::type *)std::get<1ul,unsigned int const,AvatarRenameData>(v9);
    v4 = std::__shared_ptr_access<proto::AvatarRenameInfoNotify,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<proto::AvatarRenameInfoNotify,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v1 + 32));
    rename_info = proto::AvatarRenameInfoNotify::add_avatar_rename_list(v4);
    AvatarRenameData::toClient(rename_data, rename_info);
    std::_Rb_tree_iterator<std::pair<unsigned int const,AvatarRenameData>>::operator++(&__for_begin);
  }
  if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
    __asan_report_load8(&this->player_);
  player = this->player_;
  std::dynamic_pointer_cast<google::protobuf::Message const,proto::AvatarRenameInfoNotify>(&__r);
  Player::sendMessage(player, (common::minet::ConstMessagePtr *)&__r, 0LL);
  std::shared_ptr<google::protobuf::Message const>::~shared_ptr((std::shared_ptr<const google::protobuf::Message> *const)&__r);
  std::shared_ptr<proto::AvatarRenameInfoNotify>::~shared_ptr((std::shared_ptr<proto::AvatarRenameInfoNotify> *const)(v1 + 32));
  if ( v14 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
  }
};

// Line 6785: range 00000000171A4C94-00000000171A5879
__int64 __fastcall PlayerAvatarComp::checkItemAvatarRename(
        PlayerAvatarComp *const this,
        uint32_t rename_id,
        const std::string *avatar_name)
{
  unsigned __int64 v3; // r13
  __int64 v4; // rax
  _DWORD *v5; // r12
  std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v6; // rax
  __int64 v7; // rsi
  common::milog::MiLogStream *v8; // rax
  unsigned int v9; // r14d
  PlayerItemComp *ItemComp; // rax
  common::milog::MiLogStream *v11; // r14
  PlayerBasicComp *BasicComp; // rax
  common::milog::MiLogStream *v13; // r14
  common::milog::MiLogStream *v14; // r14
  common::milog::MiLogStream *v15; // r14
  common::milog::MiLogStream *v16; // rax
  common::milog::MiLogStream *v17; // rax
  common::milog::MiLogStream *v18; // rax
  PlayerQuestComp *QuestComp; // rcx
  common::milog::MiLogStream *v20; // rax
  common::milog::MiLogStream *v21; // rax
  common::milog::MiLogStream *v22; // rax
  common::milog::MiLogStream *v23; // rax
  common::milog::MiLogStream *v24; // rax
  common::milog::MiLogStream *v25; // rax
  common::milog::MiLogStream *v26; // r14
  __int64 result; // rax
  std::allocator<char> __a; // [rsp+23h] [rbp-12Dh] BYREF
  int32_t ret; // [rsp+24h] [rbp-12Ch]
  char *val; // [rsp+28h] [rbp-128h] BYREF
  const data::AvatarRenameExcelConfig *rename_config_ptr; // [rsp+30h] [rbp-120h]
  const AvatarRenameData *rename_data_ptr; // [rsp+38h] [rbp-118h]
  common::milog::MiLogStream v34; // [rsp+40h] [rbp-110h] BYREF
  char v35[240]; // [rsp+60h] [rbp-F0h] BYREF

  v3 = (unsigned __int64)v35;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_2(192LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "5 48 4 14 avatar_id:6794 64 4 16 quest_state:6839 80 4 14 rename_id:6784 96 16 10 param:6800 128"
                        " 32 17 trimmed_name:6792";
  *(_QWORD *)(v3 + 16) = PlayerAvatarComp::checkItemAvatarRename;
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = -234556943;
  v5[536862722] = -234556924;
  v5[536862723] = -219021312;
  v5[536862725] = -202116109;
  *(_DWORD *)(v3 + 80) = rename_id;
  ServiceBox::findService<GameserverService>();
  GameserverService::getConfig((GameserverService *const)(v3 + 96));
  v6 = std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 96));
  v7 = *(unsigned int *)(v3 + 80);
  rename_config_ptr = data::RenameExcelConfigMgrBase::findAvatarRenameExcelConfig(
                        &v6->design_config.txt_config_mgr.rename_config_mgr,
                        v7);
  std::shared_ptr<Config>::~shared_ptr((std::shared_ptr<Config> *const)(v3 + 96));
  if ( !rename_config_ptr )
  {
    common::milog::MiLogStream::create(
      &v34,
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/player/avatar/player_avatar_comp.cpp",
      "checkItemAvatarRename",
      6789);
    v8 = common::milog::MiLogStream::operator<<<char [39],(char *[39])0>(
           &v34,
           (const char (*)[39])"cannot find rename config, rename_id: ");
    common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v8, (const unsigned int *)(v3 + 80));
    common::milog::MiLogStream::~MiLogStream(&v34);
    v9 = -1;
    goto LABEL_48;
  }
  std::allocator<char>::allocator(&__a, v7);
  std::string::basic_string<std::allocator<char>>((std::string *const)&v34, off_26045360, &__a);
  common::tools::StringUtils::trim((std::string *)(v3 + 128), avatar_name, (const std::string *)&v34, 1);
  std::string::~string(&v34);
  std::allocator<char>::~allocator(&__a);
  if ( *(_BYTE *)(((unsigned __int64)&rename_config_ptr->related_avatar_id >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&rename_config_ptr->related_avatar_id >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4(&rename_config_ptr->related_avatar_id);
  }
  *(_DWORD *)(v3 + 48) = rename_config_ptr->related_avatar_id;
  if ( *(_BYTE *)(((unsigned __int64)&rename_config_ptr->type >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)rename_config_ptr + 12) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&rename_config_ptr->type >> 3)
                                                                     + 0x7FFF8000) )
  {
    __asan_report_load4(&rename_config_ptr->type);
  }
  if ( rename_config_ptr->type != AVATAR_RENAME_TYPE_WANDERER )
  {
    common::milog::MiLogStream::create(
      &v34,
      &common::milog::MiLogDefault::default_log_obj_,
      4u,
      "./src/player/avatar/player_avatar_comp.cpp",
      "checkItemAvatarRename",
      6856);
    v26 = common::milog::MiLogStream::operator<<<char [22],(char *[22])0>(
            &v34,
            (const char (*)[22])"unknown rename type: ");
    if ( *(_BYTE *)(((unsigned __int64)&rename_config_ptr->type >> 3) + 0x7FFF8000) != 0
      && (char)((((_BYTE)rename_config_ptr + 12) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&rename_config_ptr->type >> 3)
                                                                       + 0x7FFF8000) )
    {
      __asan_report_load4(&rename_config_ptr->type);
    }
    val = (char *)data::enumValToStr(rename_config_ptr->type);
    common::milog::MiLogStream::operator<<<char const*,(char const**)0>(v26, (const char *const *)&val);
    common::milog::MiLogStream::~MiLogStream(&v34);
    v9 = -1;
    goto LABEL_47;
  }
  *(_QWORD *)(v3 + 96) = 0LL;
  *(_QWORD *)(v3 + 104) = 0LL;
  *(_DWORD *)(v3 + 100) = 1;
  if ( *(_BYTE *)(((unsigned __int64)&rename_config_ptr->rename_item_id >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)rename_config_ptr + 20) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&rename_config_ptr->rename_item_id >> 3)
                                                                     + 0x7FFF8000) )
  {
    __asan_report_load4(&rename_config_ptr->rename_item_id);
  }
  *(_DWORD *)(v3 + 96) = rename_config_ptr->rename_item_id;
  if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
    __asan_report_load8(&this->player_);
  ItemComp = Player::getItemComp(this->player_);
  if ( PlayerItemComp::checkSubItem(ItemComp, (const ItemParam *)(v3 + 96)) )
  {
    common::milog::MiLogStream::create(
      &v34,
      &common::milog::MiLogDefault::default_log_obj_,
      1u,
      "./src/player/avatar/player_avatar_comp.cpp",
      "checkItemAvatarRename",
      6804);
    v11 = common::milog::MiLogStream::operator<<<char [42],(char *[42])0>(
            &v34,
            (const char (*)[42])"wanderer rename item is not enough!, uid:");
    if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
      __asan_report_load8(&this->player_);
    *(_DWORD *)(v3 + 64) = Player::getUid(this->player_);
    common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v11, (const unsigned int *)(v3 + 64));
    common::milog::MiLogStream::~MiLogStream(&v34);
    v9 = 609;
    goto LABEL_47;
  }
  if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
    __asan_report_load8(&this->player_);
  BasicComp = Player::getBasicComp(this->player_);
  ret = PlayerBasicComp::checkNickName(BasicComp, (const std::string *)(v3 + 128));
  if ( ret )
  {
    common::milog::MiLogStream::create(
      &v34,
      &common::milog::MiLogDefault::default_log_obj_,
      1u,
      "./src/player/avatar/player_avatar_comp.cpp",
      "checkItemAvatarRename",
      6811);
    v13 = common::milog::MiLogStream::operator<<<char [27],(char *[27])0>(
            &v34,
            (const char (*)[27])"checkNickName failed, uid:");
    if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
      __asan_report_load8(&this->player_);
    *(_DWORD *)(v3 + 64) = Player::getUid(this->player_);
    common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v13, (const unsigned int *)(v3 + 64));
    common::milog::MiLogStream::~MiLogStream(&v34);
    v9 = ret;
    goto LABEL_47;
  }
  rename_data_ptr = PlayerAvatarComp::findAvatarRenameData(this, *(_DWORD *)(v3 + 48));
  if ( !rename_data_ptr )
  {
    common::milog::MiLogStream::create(
      &v34,
      &common::milog::MiLogDefault::default_log_obj_,
      4u,
      "./src/player/avatar/player_avatar_comp.cpp",
      "checkItemAvatarRename",
      6820);
    v14 = common::milog::MiLogStream::operator<<<char [49],(char *[49])0>(
            &v34,
            (const char (*)[49])"wanderer item rename happened before quest, uid:");
    if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
      __asan_report_load8(&this->player_);
    *(_DWORD *)(v3 + 64) = Player::getUid(this->player_);
    common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v14, (const unsigned int *)(v3 + 64));
    common::milog::MiLogStream::~MiLogStream(&v34);
LABEL_35:
    if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
      __asan_report_load8(&this->player_);
    QuestComp = Player::getQuestComp(this->player_);
    if ( *(_BYTE *)(((unsigned __int64)&rename_config_ptr->rename_pre_quest_id >> 3) + 0x7FFF8000) != 0
      && (char)((((_BYTE)rename_config_ptr + 28) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&rename_config_ptr->rename_pre_quest_id >> 3)
                                                                       + 0x7FFF8000) )
    {
      __asan_report_load4(&rename_config_ptr->rename_pre_quest_id);
    }
    *(_DWORD *)(v3 + 64) = PlayerQuestComp::getQuestState(QuestComp, rename_config_ptr->rename_pre_quest_id);
    if ( *(_DWORD *)(v3 + 64) == 3 )
    {
      if ( !PlayerAvatarComp::isIpValidAvatarName(this, *(_DWORD *)(v3 + 48), (const std::string *)(v3 + 128)) )
      {
        common::milog::MiLogStream::create(
          &v34,
          &common::milog::MiLogDefault::default_log_obj_,
          1u,
          "./src/player/avatar/player_avatar_comp.cpp",
          "checkItemAvatarRename",
          6849);
        v23 = common::milog::MiLogStream::operator<<<char [45],(char *[45])0>(
                &v34,
                (const char (*)[45])"avatar name is in IP black list, avatar_id: ");
        v24 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                v23,
                (const unsigned int *)(v3 + 48));
        v25 = common::milog::MiLogStream::operator<<<char [9],(char *[9])0>(v24, (const char (*)[9])", name: ");
        common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v25, (const std::string *)(v3 + 128));
        common::milog::MiLogStream::~MiLogStream(&v34);
        v9 = 177;
      }
      else
      {
        v9 = 0;
      }
    }
    else
    {
      common::milog::MiLogStream::create(
        &v34,
        &common::milog::MiLogDefault::default_log_obj_,
        4u,
        "./src/player/avatar/player_avatar_comp.cpp",
        "checkItemAvatarRename",
        6842);
      v20 = common::milog::MiLogStream::operator<<<char [48],(char *[48])0>(
              &v34,
              (const char (*)[48])"wanderer item use without finishing pre-quest: ");
      v21 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
              v20,
              &rename_config_ptr->rename_pre_quest_id);
      v22 = common::milog::MiLogStream::operator<<<char [14],(char *[14])0>(v21, (const char (*)[14])"quest state: ");
      common::milog::MiLogStream::operator<<<data::QuestState,(data::QuestState*)0>(
        v22,
        (const data::QuestState *)(v3 + 64));
      common::milog::MiLogStream::~MiLogStream(&v34);
      v9 = -1;
    }
    goto LABEL_47;
  }
  if ( !AvatarRenameData::isNotInAudit(rename_data_ptr) )
  {
    common::milog::MiLogStream::create(
      &v34,
      &common::milog::MiLogDefault::default_log_obj_,
      1u,
      "./src/player/avatar/player_avatar_comp.cpp",
      "checkItemAvatarRename",
      6828);
    v15 = common::milog::MiLogStream::operator<<<char [44],(char *[44])0>(
            &v34,
            (const char (*)[44])"wanderer item rename is during audit!, uid:");
    if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
      __asan_report_load8(&this->player_);
    *(_DWORD *)(v3 + 64) = Player::getUid(this->player_);
    common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v15, (const unsigned int *)(v3 + 64));
    common::milog::MiLogStream::~MiLogStream(&v34);
    v9 = 176;
    goto LABEL_47;
  }
  if ( !std::operator==<char>((const std::string *)(v3 + 128), &rename_data_ptr->cur_avatar_name) )
    goto LABEL_35;
  common::milog::MiLogStream::create(
    &v34,
    &common::milog::MiLogDefault::default_log_obj_,
    1u,
    "./src/player/avatar/player_avatar_comp.cpp",
    "checkItemAvatarRename",
    6834);
  v16 = common::milog::MiLogStream::operator<<<char [19],(char *[19])0>(&v34, (const char (*)[19])"same avatar name: ");
  v17 = common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v16, (const std::string *)(v3 + 128));
  v18 = common::milog::MiLogStream::operator<<<char [14],(char *[14])0>(v17, (const char (*)[14])", rename_id: ");
  common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v18, (const unsigned int *)(v3 + 80));
  common::milog::MiLogStream::~MiLogStream(&v34);
  v9 = 136;
LABEL_47:
  std::string::~string((void *)(v3 + 128));
LABEL_48:
  result = v9;
  if ( v35 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8014) = 0;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 6864: range 00000000171A587A-00000000171A59AF
bool __cdecl PlayerAvatarComp::isIpValidAvatarName(
        PlayerAvatarComp *const this,
        uint32_t avatar_id,
        const std::string *avatar_name)
{
  std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v3; // rax
  common::milog::MiLogStream *v5; // rbx
  unsigned __int64 val; // [rsp+20h] [rbp-50h] BYREF
  const std::set<std::string> *invalid_name_set_ptr; // [rsp+28h] [rbp-48h]
  std::shared_ptr<Config> v9; // [rsp+30h] [rbp-40h] BYREF
  common::milog::MiLogStream v10; // [rsp+40h] [rbp-30h] BYREF

  ServiceBox::findService<GameserverService>();
  GameserverService::getConfig((GameserverService *const)&v9);
  v3 = std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false> *const)&v9);
  invalid_name_set_ptr = RenameExcelConfigMgr::findAvatarInvalidNameByAvatarId[abi:cxx11](
                           &v3->design_config.txt_config_mgr.rename_config_mgr,
                           avatar_id);
  std::shared_ptr<Config>::~shared_ptr(&v9);
  if ( !invalid_name_set_ptr )
    return 1;
  common::milog::MiLogStream::create(
    &v10,
    &common::milog::MiLogDefault::default_log_obj_,
    1u,
    "./src/player/avatar/player_avatar_comp.cpp",
    "isIpValidAvatarName",
    6870);
  v5 = common::milog::MiLogStream::operator<<<char [24],(char *[24])0>(
         &v10,
         (const char (*)[24])"invalid_name_set size: ");
  val = std::set<std::string>::size(invalid_name_set_ptr);
  common::milog::MiLogStream::operator<<<unsigned long,(unsigned long *)0>(v5, &val);
  common::milog::MiLogStream::~MiLogStream(&v10);
  return !common::tools::MiscUtils::isContains<std::set<std::string> const,std::string>(
            invalid_name_set_ptr,
            avatar_name);
};

// Line 6875: range 00000000171A59B0-00000000171A5BB2
void __cdecl PlayerAvatarComp::checkAndAutoResetAllIPBlackListAvatarName(PlayerAvatarComp *const this)
{
  std::string *p_cur_avatar_name; // rsi
  char v2; // al
  common::milog::MiLogStream *v3; // rax
  common::milog::MiLogStream *v4; // rax
  std::map<unsigned int,AvatarRenameData>::iterator __for_begin; // [rsp+10h] [rbp-60h] BYREF
  std::map<unsigned int,AvatarRenameData>::iterator __for_end; // [rsp+18h] [rbp-58h] BYREF
  std::map<unsigned int,AvatarRenameData> *__for_range; // [rsp+20h] [rbp-50h]
  const std::pair<unsigned int const,AvatarRenameData> *v8; // [rsp+28h] [rbp-48h]
  std::tuple_element<0,const std::pair<unsigned int const,AvatarRenameData> >::type *avatar_id; // [rsp+30h] [rbp-40h]
  std::tuple_element<1,const std::pair<unsigned int const,AvatarRenameData> >::type *avatar_data; // [rsp+38h] [rbp-38h]
  common::milog::MiLogStream v11; // [rsp+40h] [rbp-30h] BYREF

  __for_range = &this->avatar_rename_data_map_;
  __for_begin._M_node = std::map<unsigned int,AvatarRenameData>::begin(&this->avatar_rename_data_map_)._M_node;
  __for_end._M_node = std::map<unsigned int,AvatarRenameData>::end(&this->avatar_rename_data_map_)._M_node;
  while ( std::operator!=(&__for_begin, &__for_end) )
  {
    v8 = std::_Rb_tree_iterator<std::pair<unsigned int const,AvatarRenameData>>::operator*(&__for_begin);
    avatar_id = std::get<0ul,unsigned int const,AvatarRenameData>(v8);
    avatar_data = (std::tuple_element<1,const std::pair<unsigned int const,AvatarRenameData> >::type *)std::get<1ul,unsigned int const,AvatarRenameData>(v8);
    if ( (unsigned __int8)std::string::empty(&avatar_data->cur_avatar_name) == 1 )
      goto LABEL_8;
    p_cur_avatar_name = &avatar_data->cur_avatar_name;
    if ( *(_BYTE *)(((unsigned __int64)avatar_id >> 3) + 0x7FFF8000) != 0
      && (char)(((unsigned __int8)avatar_id & 7) + 3) >= *(_BYTE *)(((unsigned __int64)avatar_id >> 3) + 0x7FFF8000) )
    {
      __asan_report_load4(avatar_id);
    }
    if ( !PlayerAvatarComp::isIpValidAvatarName(this, *avatar_id, p_cur_avatar_name) )
      v2 = 1;
    else
LABEL_8:
      v2 = 0;
    if ( v2 )
    {
      common::milog::MiLogStream::create(
        &v11,
        &common::milog::MiLogDefault::default_log_obj_,
        1u,
        "./src/player/avatar/player_avatar_comp.cpp",
        "checkAndAutoResetAllIPBlackListAvatarName",
        6881);
      v3 = common::milog::MiLogStream::operator<<<char [21],(char *[21])0>(
             &v11,
             (const char (*)[21])"IP black_list name: ");
      v4 = common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v3, &avatar_data->cur_avatar_name);
      common::milog::MiLogStream::operator<<<char [18],(char *[18])0>(v4, (const char (*)[18])" need to be reset");
      common::milog::MiLogStream::~MiLogStream(&v11);
      if ( *(_BYTE *)(((unsigned __int64)avatar_id >> 3) + 0x7FFF8000) != 0
        && (char)(((unsigned __int8)avatar_id & 7) + 3) >= *(_BYTE *)(((unsigned __int64)avatar_id >> 3) + 0x7FFF8000) )
      {
        __asan_report_load4(avatar_id);
      }
      PlayerAvatarComp::resetAvatarRename(this, *avatar_id, RESET_AVATAR_RENAME_REASON_IP_BLACK_LIST);
    }
    std::_Rb_tree_iterator<std::pair<unsigned int const,AvatarRenameData>>::operator++(&__for_begin);
  }
};

// Line 6888: range 00000000171A5BB4-00000000171A5DC1
int32_t __cdecl PlayerAvatarComp::checkAllAvatarRenameByGm(PlayerAvatarComp *const this)
{
  std::string *p_cur_avatar_name; // rsi
  common::milog::MiLogStream *v2; // rax
  common::milog::MiLogStream *v3; // rbx
  std::map<unsigned int,AvatarRenameData>::iterator __for_begin; // [rsp+10h] [rbp-60h] BYREF
  std::map<unsigned int,AvatarRenameData>::iterator __for_end; // [rsp+18h] [rbp-58h] BYREF
  std::map<unsigned int,AvatarRenameData> *__for_range; // [rsp+20h] [rbp-50h]
  const std::pair<unsigned int const,AvatarRenameData> *v8; // [rsp+28h] [rbp-48h]
  std::tuple_element<0,const std::pair<unsigned int const,AvatarRenameData> >::type *avatar_id; // [rsp+30h] [rbp-40h]
  std::tuple_element<1,const std::pair<unsigned int const,AvatarRenameData> >::type *avatar_data; // [rsp+38h] [rbp-38h]
  common::milog::MiLogStream v11; // [rsp+40h] [rbp-30h] BYREF

  __for_range = &this->avatar_rename_data_map_;
  __for_begin._M_node = std::map<unsigned int,AvatarRenameData>::begin(&this->avatar_rename_data_map_)._M_node;
  __for_end._M_node = std::map<unsigned int,AvatarRenameData>::end(&this->avatar_rename_data_map_)._M_node;
  while ( std::operator!=(&__for_begin, &__for_end) )
  {
    v8 = std::_Rb_tree_iterator<std::pair<unsigned int const,AvatarRenameData>>::operator*(&__for_begin);
    avatar_id = std::get<0ul,unsigned int const,AvatarRenameData>(v8);
    avatar_data = (std::tuple_element<1,const std::pair<unsigned int const,AvatarRenameData> >::type *)std::get<1ul,unsigned int const,AvatarRenameData>(v8);
    p_cur_avatar_name = &avatar_data->cur_avatar_name;
    if ( *(_BYTE *)(((unsigned __int64)avatar_id >> 3) + 0x7FFF8000) != 0
      && (char)(((unsigned __int8)avatar_id & 7) + 3) >= *(_BYTE *)(((unsigned __int64)avatar_id >> 3) + 0x7FFF8000) )
    {
      __asan_report_load4(avatar_id);
    }
    if ( !PlayerAvatarComp::isIpValidAvatarName(this, *avatar_id, p_cur_avatar_name) )
    {
      common::milog::MiLogStream::create(
        &v11,
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/player/avatar/player_avatar_comp.cpp",
        "checkAllAvatarRenameByGm",
        6893);
      v2 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(&v11, (const char (*)[16])"wrong IP name: ");
      common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v2, &avatar_data->cur_avatar_name);
      common::milog::MiLogStream::~MiLogStream(&v11);
    }
    std::_Rb_tree_iterator<std::pair<unsigned int const,AvatarRenameData>>::operator++(&__for_begin);
  }
  common::milog::MiLogStream::create(
    &v11,
    &common::milog::MiLogDefault::default_log_obj_,
    1u,
    "./src/player/avatar/player_avatar_comp.cpp",
    "checkAllAvatarRenameByGm",
    6896);
  v3 = common::milog::MiLogStream::operator<<<char [34],(char *[34])0>(
         &v11,
         (const char (*)[34])"size of avatar_rename_data_map_: ");
  __for_end._M_node = (std::_Rb_tree_iterator<std::pair<unsigned int const,AvatarRenameData> >::_Base_ptr)std::map<unsigned int,AvatarRenameData>::size(&this->avatar_rename_data_map_);
  common::milog::MiLogStream::operator<<<unsigned long,(unsigned long *)0>(v3, (const unsigned __int64 *)&__for_end);
  common::milog::MiLogStream::~MiLogStream(&v11);
  return 0;
};

// Line 6901: range 00000000171A5DC2-00000000171A632E
void __fastcall PlayerAvatarComp::setAuditAvatarData(
        PlayerAvatarComp *const this,
        uint32_t avatar_id,
        const std::string *avatar_name,
        const proto::AvatarRenameAuditSourceType *type)
{
  unsigned __int64 v4; // r13
  __int64 v5; // rax
  _DWORD *v6; // r12
  __int64 v7; // rsi
  std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v8; // rax
  bool isItemAvatarRenameAuditClosed; // r14
  common::milog::MiLogStream *v10; // rax
  common::milog::MiLogStream *v11; // rax
  common::milog::MiLogStream *v12; // rax
  common::milog::MiLogStream *v13; // rax
  common::milog::MiLogStream *v14; // rax
  common::milog::MiLogStream *v15; // rax
  common::milog::MiLogStream *v16; // rax
  std::allocator<char> __a; // [rsp+27h] [rbp-119h] BYREF
  proto::AvatarRenameAuditSourceType v20; // [rsp+28h] [rbp-118h] BYREF
  uint32_t submit_time; // [rsp+2Ch] [rbp-114h]
  std::_Rb_tree_iterator<std::pair<unsigned int const,AvatarRenameData> >::_Self __y; // [rsp+30h] [rbp-110h] BYREF
  AvatarRenameData *rename_data; // [rsp+38h] [rbp-108h]
  std::shared_ptr<Config> v24; // [rsp+40h] [rbp-100h] BYREF
  std::string s; // [rsp+50h] [rbp-F0h] BYREF
  char v26[208]; // [rsp+70h] [rbp-D0h] BYREF

  v4 = (unsigned __int64)v26;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v5 = __asan_stack_malloc_2(160LL);
    if ( v5 )
      v4 = v5;
  }
  *(_QWORD *)v4 = 1102416563LL;
  *(_QWORD *)(v4 + 8) = "3 48 4 14 avatar_id:6900 64 8 9 iter:6904 96 32 17 trimmed_name:6903";
  *(_QWORD *)(v4 + 16) = PlayerAvatarComp::setAuditAvatarData;
  v6 = (_DWORD *)(v4 >> 3);
  v6[536862720] = -235802127;
  v6[536862721] = -234556943;
  v6[536862722] = -218959360;
  v6[536862724] = -202116109;
  *(_DWORD *)(v4 + 48) = avatar_id;
  v7 = *(unsigned int *)(v4 + 48);
  PlayerAvatarComp::tryInitAvatarRenameData(this, v7);
  std::allocator<char>::allocator(&__a, v7);
  std::string::basic_string<std::allocator<char>>(&s, off_26045360, &__a);
  common::tools::StringUtils::trim((std::string *)(v4 + 96), avatar_name, &s, 1);
  std::string::~string(&s);
  std::allocator<char>::~allocator(&__a);
  *(std::map<unsigned int,AvatarRenameData>::iterator *)(v4 + 64) = std::map<unsigned int,AvatarRenameData>::find(
                                                                      &this->avatar_rename_data_map_,
                                                                      (const std::map<unsigned int,AvatarRenameData>::key_type *)(v4 + 48));
  __y._M_node = std::map<unsigned int,AvatarRenameData>::end(&this->avatar_rename_data_map_)._M_node;
  if ( std::operator!=(
         (const std::_Rb_tree_iterator<std::pair<unsigned int const,AvatarRenameData> >::_Self *)(v4 + 64),
         &__y) )
  {
    rename_data = &std::_Rb_tree_iterator<std::pair<unsigned int const,AvatarRenameData>>::operator->((const std::_Rb_tree_iterator<std::pair<unsigned int const,AvatarRenameData> > *const)(v4 + 64))->second;
    ServiceBox::findService<GameserverService>();
    GameserverService::getConfig((GameserverService *const)&v24);
    v8 = std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false> *const)&v24);
    isItemAvatarRenameAuditClosed = FeatureSwitchMgr::isItemAvatarRenameAuditClosed(&v8->feature_switch_mgr);
    std::shared_ptr<Config>::~shared_ptr(&v24);
    if ( isItemAvatarRenameAuditClosed )
    {
      std::string::operator=(&rename_data->cur_avatar_name, v4 + 96);
      PlayerAvatarComp::notifyAvatarRenameData(this);
      common::milog::MiLogStream::create(
        (common::milog::MiLogStream *)&s,
        &common::milog::MiLogDefault::default_log_obj_,
        1u,
        "./src/player/avatar/player_avatar_comp.cpp",
        "setAuditAvatarData",
        6913);
      v10 = common::milog::MiLogStream::operator<<<char [41],(char *[41])0>(
              (common::milog::MiLogStream *const)&s,
              (const char (*)[41])"direct set avatar name succ, avatar_id: ");
      v11 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v10, (const unsigned int *)(v4 + 48));
      v12 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(v11, (const char (*)[16])", avatar_name: ");
      common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v12, (const std::string *)(v4 + 96));
      common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)&s);
    }
    else
    {
      AvatarRenameData::setCurAuditAvatarName(rename_data, (const std::string *)(v4 + 96), type);
      if ( *(_BYTE *)(((unsigned __int64)&rename_data->audit_data.submit_time >> 3) + 0x7FFF8000) != 0
        && *(_BYTE *)(((unsigned __int64)&rename_data->audit_data.submit_time >> 3) + 0x7FFF8000) <= 3 )
      {
        __asan_report_load4(&rename_data->audit_data.submit_time);
      }
      submit_time = rename_data->audit_data.submit_time;
      v20 = AVATAR_RENAME_AUDIT_SOURCE_ITEM;
      PlayerAvatarComp::asyncAvatarRenameAuditRequest(this, rename_data, &v20);
      common::milog::MiLogStream::create(
        (common::milog::MiLogStream *)&s,
        &common::milog::MiLogDefault::default_log_obj_,
        1u,
        "./src/player/avatar/player_avatar_comp.cpp",
        "setAuditAvatarData",
        6921);
      v13 = common::milog::MiLogStream::operator<<<char [37],(char *[37])0>(
              (common::milog::MiLogStream *const)&s,
              (const char (*)[37])"setAuditAvatarData succ, avatar_id: ");
      v14 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v13, (const unsigned int *)(v4 + 48));
      v15 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(v14, (const char (*)[16])", avatar_name: ");
      common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v15, (const std::string *)(v4 + 96));
      common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)&s);
      PlayerAvatarComp::updateAvatarRenameCoolDown(this);
    }
  }
  else
  {
    common::milog::MiLogStream::create(
      (common::milog::MiLogStream *)&s,
      &common::milog::MiLogDefault::default_log_obj_,
      4u,
      "./src/player/avatar/player_avatar_comp.cpp",
      "setAuditAvatarData",
      6929);
    v16 = common::milog::MiLogStream::operator<<<char [53],(char *[53])0>(
            (common::milog::MiLogStream *const)&s,
            (const char (*)[53])"cannot find avatarRenameData after init, avatar_id: ");
    common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v16, (const unsigned int *)(v4 + 48));
    common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)&s);
  }
  std::string::~string((void *)(v4 + 96));
  if ( v26 == (char *)v4 )
  {
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0LL;
    *(_DWORD *)((v4 >> 3) + 0x7FFF8008) = 0;
    *(_DWORD *)((v4 >> 3) + 0x7FFF8010) = 0;
  }
  else
  {
    *(_QWORD *)v4 = 1172321806LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v4 >> 3) + 0x7FFF8010) = -168430091;
  }
};

// Line 6935: range 00000000171A6330-00000000171A67F3
void __cdecl PlayerAvatarComp::checkAndAutoFailAvatarRenameAudit(PlayerAvatarComp *const this)
{
  std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v1; // rax
  bool isQuestAvatarRenameAuditClosed; // bl
  uint32_t *p_audit_state; // rax
  std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v4; // rax
  unsigned int AvatarRenameAutoFailTime; // eax
  unsigned int v6; // eax
  uint32_t source_type; // ecx
  common::milog::MiLogStream *v8; // rax
  common::milog::MiLogStream *v9; // rax
  common::milog::MiLogStream *v10; // rax
  common::milog::MiLogStream *v11; // rax
  common::milog::MiLogStream *v12; // rcx
  common::milog::MiLogStream *v13; // rax
  common::milog::MiLogStream *v14; // rax
  common::milog::MiLogStream *v15; // rax
  common::milog::MiLogStream *v16; // rax
  unsigned int submit_time; // [rsp+18h] [rbp-88h]
  uint32_t auto_fail_time; // [rsp+1Ch] [rbp-84h]
  std::map<unsigned int,AvatarRenameData>::iterator __for_begin; // [rsp+20h] [rbp-80h] BYREF
  std::map<unsigned int,AvatarRenameData>::iterator __for_end; // [rsp+28h] [rbp-78h] BYREF
  std::map<unsigned int,AvatarRenameData> *__for_range; // [rsp+30h] [rbp-70h]
  const std::pair<unsigned int const,AvatarRenameData> *v22; // [rsp+38h] [rbp-68h]
  std::tuple_element<0,const std::pair<unsigned int const,AvatarRenameData> >::type *avatar_id; // [rsp+40h] [rbp-60h]
  std::tuple_element<1,const std::pair<unsigned int const,AvatarRenameData> >::type *rename_data; // [rsp+48h] [rbp-58h]
  const AvatarRenameAuditData *audit_data; // [rsp+50h] [rbp-50h]
  const std::string *avatar_name; // [rsp+58h] [rbp-48h]
  std::shared_ptr<Config> v27; // [rsp+60h] [rbp-40h] BYREF
  common::milog::MiLogStream v28; // [rsp+70h] [rbp-30h] BYREF

  ServiceBox::findService<GameserverService>();
  GameserverService::getConfig((GameserverService *const)&v27);
  v1 = std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false> *const)&v27);
  isQuestAvatarRenameAuditClosed = FeatureSwitchMgr::isQuestAvatarRenameAuditClosed(&v1->feature_switch_mgr);
  std::shared_ptr<Config>::~shared_ptr(&v27);
  if ( !isQuestAvatarRenameAuditClosed )
  {
    __for_range = &this->avatar_rename_data_map_;
    __for_begin._M_node = std::map<unsigned int,AvatarRenameData>::begin(&this->avatar_rename_data_map_)._M_node;
    __for_end._M_node = std::map<unsigned int,AvatarRenameData>::end(&this->avatar_rename_data_map_)._M_node;
    while ( std::operator!=(&__for_begin, &__for_end) )
    {
      v22 = std::_Rb_tree_iterator<std::pair<unsigned int const,AvatarRenameData>>::operator*(&__for_begin);
      avatar_id = std::get<0ul,unsigned int const,AvatarRenameData>(v22);
      rename_data = (std::tuple_element<1,const std::pair<unsigned int const,AvatarRenameData> >::type *)std::get<1ul,unsigned int const,AvatarRenameData>(v22);
      audit_data = &rename_data->audit_data;
      p_audit_state = &rename_data->audit_data.audit_state;
      if ( *(_BYTE *)(((unsigned __int64)p_audit_state >> 3) + 0x7FFF8000) != 0
        && (char)(((unsigned __int8)p_audit_state & 7) + 3) >= *(_BYTE *)(((unsigned __int64)p_audit_state >> 3)
                                                                        + 0x7FFF8000) )
      {
        __asan_report_load4(p_audit_state);
      }
      if ( audit_data->audit_state == 1 )
      {
        if ( *(_BYTE *)(((unsigned __int64)&audit_data->submit_time >> 3) + 0x7FFF8000) != 0
          && *(_BYTE *)(((unsigned __int64)&audit_data->submit_time >> 3) + 0x7FFF8000) <= 3 )
        {
          __asan_report_load4(&audit_data->submit_time);
        }
        submit_time = audit_data->submit_time;
        ServiceBox::findService<GameserverService>();
        GameserverService::getConfig((GameserverService *const)&v27);
        v4 = std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false> *const)&v27);
        AvatarRenameAutoFailTime = ConstValueExcelConfigMgr::getAvatarRenameAutoFailTime(&v4->design_config.txt_config_mgr.const_value_config_mgr);
        v6 = SAFE_MULTIPLY<int,unsigned int>(3600, AvatarRenameAutoFailTime);
        auto_fail_time = SAFE_ADD<unsigned int,unsigned int>(submit_time, v6);
        std::shared_ptr<Config>::~shared_ptr(&v27);
        if ( common::tools::TimeUtils::getNow() >= auto_fail_time )
        {
          avatar_name = &audit_data->avatar_name;
          if ( *(_BYTE *)(((unsigned __int64)&audit_data->source_type >> 3) + 0x7FFF8000) != 0
            && *(_BYTE *)(((unsigned __int64)&audit_data->source_type >> 3) + 0x7FFF8000) <= 3 )
          {
            __asan_report_load4(&audit_data->source_type);
          }
          source_type = audit_data->source_type;
          if ( *(_BYTE *)(((unsigned __int64)avatar_id >> 3) + 0x7FFF8000) != 0
            && (char)(((unsigned __int8)avatar_id & 7) + 3) >= *(_BYTE *)(((unsigned __int64)avatar_id >> 3) + 0x7FFF8000) )
          {
            __asan_report_load4(avatar_id);
          }
          if ( PlayerAvatarComp::handleAvatarRenameAuditResult(this, *avatar_id, avatar_name, 0, source_type) )
          {
            common::milog::MiLogStream::create(
              &v28,
              &common::milog::MiLogDefault::default_log_obj_,
              3u,
              "./src/player/avatar/player_avatar_comp.cpp",
              "checkAndAutoFailAvatarRenameAudit",
              6955);
            v8 = common::milog::MiLogStream::operator<<<char [63],(char *[63])0>(
                   &v28,
                   (const char (*)[63])"handleAvatarRenameAuditResult fail when auto fail, avatar_id: ");
            v9 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v8, avatar_id);
            v10 = common::milog::MiLogStream::operator<<<char [9],(char *[9])0>(v9, (const char (*)[9])", name: ");
            v11 = common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v10, avatar_name);
            v12 = common::milog::MiLogStream::operator<<<char [12],(char *[12])0>(
                    v11,
                    (const char (*)[12])", player_: ");
            if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
              __asan_report_load8(&this->player_);
          }
          else
          {
            common::milog::MiLogStream::create(
              &v28,
              &common::milog::MiLogDefault::default_log_obj_,
              1u,
              "./src/player/avatar/player_avatar_comp.cpp",
              "checkAndAutoFailAvatarRenameAudit",
              6959);
            v13 = common::milog::MiLogStream::operator<<<char [29],(char *[29])0>(
                    &v28,
                    (const char (*)[29])"Auto fail audit, avatar_id: ");
            v14 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v13, avatar_id);
            v15 = common::milog::MiLogStream::operator<<<char [9],(char *[9])0>(v14, (const char (*)[9])", name: ");
            v16 = common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v15, avatar_name);
            v12 = common::milog::MiLogStream::operator<<<char [12],(char *[12])0>(
                    v16,
                    (const char (*)[12])", player_: ");
            if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
              __asan_report_load8(&this->player_);
          }
          operator<<(v12, this->player_);
          common::milog::MiLogStream::~MiLogStream(&v28);
        }
      }
      std::_Rb_tree_iterator<std::pair<unsigned int const,AvatarRenameData>>::operator++(&__for_begin);
    }
  }
};

// Line 6966: range 00000000171A67F4-00000000171A7AFB
__int64 __fastcall PlayerAvatarComp::handleAvatarRenameAuditResult(
        PlayerAvatarComp *const this,
        uint32_t avatar_id,
        const std::string *avatar_name,
        bool is_succ,
        uint32_t source_type)
{
  unsigned int v5; // r14d
  unsigned __int64 v6; // r13
  __int64 v7; // rax
  _DWORD *v8; // r12
  common::milog::MiLogStream *v9; // rax
  std::_Rb_tree_iterator<std::pair<unsigned int const,AvatarRenameData> >::pointer v10; // rax
  uint32_t *p_audit_state; // rax
  common::milog::MiLogStream *v12; // rax
  common::milog::MiLogStream *v13; // rax
  common::milog::MiLogStream *v14; // rax
  common::milog::MiLogStream *v15; // rax
  common::milog::MiLogStream *v16; // rax
  common::milog::MiLogStream *v17; // rax
  common::milog::MiLogStream *v18; // rax
  common::milog::MiLogStream *v19; // rax
  common::milog::MiLogStream *v20; // rax
  std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v21; // rax
  common::milog::MiLogStream *v22; // rax
  common::milog::MiLogStream *v23; // rax
  common::milog::MiLogStream *v24; // rax
  common::milog::MiLogStream *v25; // rax
  common::milog::MiLogStream *v26; // rax
  common::milog::MiLogStream *v27; // rax
  common::milog::MiLogStream *v28; // rcx
  std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)2> *v29; // rdx
  PlayerMailComp *MailComp; // rax
  common::milog::MiLogStream *v31; // r14
  common::milog::MiLogStream *v32; // rax
  common::milog::MiLogStream *v33; // rax
  int v34; // r15d
  common::milog::MiLogStream *v35; // rax
  common::milog::MiLogStream *v36; // rax
  common::milog::MiLogStream *v37; // rax
  common::milog::MiLogStream *v38; // rax
  common::milog::MiLogStream *v39; // rax
  common::milog::MiLogStream *v40; // rax
  common::milog::MiLogStream *v41; // rcx
  common::milog::MiLogStream *v42; // r14
  common::milog::MiLogStream *v43; // rax
  common::milog::MiLogStream *v44; // rax
  common::milog::MiLogStream *v45; // rax
  common::milog::MiLogStream *v46; // rax
  common::milog::MiLogStream *v47; // rax
  common::milog::MiLogStream *v48; // rax
  common::milog::MiLogStream *v49; // rcx
  PlayerBasicComp *BasicComp; // rax
  std::__shared_ptr_access<proto_log::PlayerLogBodyItemAvatarRename,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v51; // rax
  std::__shared_ptr_access<proto_log::PlayerLogBodyItemAvatarRename,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v52; // r14
  bool hasAvatar; // al
  std::__shared_ptr_access<proto_log::PlayerLogBodyItemAvatarRename,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v54; // rax
  std::__shared_ptr_access<proto_log::PlayerLogBodyItemAvatarRename,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v55; // rax
  std::__shared_ptr_access<proto_log::PlayerLogBodyItemAvatarRename,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v56; // rax
  Player *player; // r14
  __int64 result; // rax
  std::string v59; // [rsp+0h] [rbp-2D0h]
  unsigned int val; // [rsp+48h] [rbp-288h] BYREF
  int32_t ret; // [rsp+4Ch] [rbp-284h]
  std::_Rb_tree_iterator<std::pair<unsigned int const,AvatarRenameData> >::_Self __y; // [rsp+50h] [rbp-280h] BYREF
  AvatarRenameData *rename_data; // [rsp+58h] [rbp-278h]
  AvatarRenameAuditData *audit_data; // [rsp+60h] [rbp-270h]
  const data::AvatarRenameExcelConfig *rename_config_ptr; // [rsp+68h] [rbp-268h]
  std::shared_ptr<google::protobuf::Message> v69; // [rsp+70h] [rbp-260h] BYREF
  common::milog::MiLogStream v70; // [rsp+80h] [rbp-250h] BYREF
  char v71[560]; // [rsp+A0h] [rbp-230h] BYREF

  v6 = (unsigned __int64)v71;
  v59._M_string_length = (std::string::size_type)v71;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v7 = __asan_stack_malloc_3(512LL);
    if ( v7 )
      v6 = v7;
  }
  *(_QWORD *)v6 = 1102416563LL;
  *(_QWORD *)(v6 + 8) = "12 32 1 11 holder:7053 48 4 19 mail_config_id:7027 64 4 14 avatar_id:6965 80 4 16 source_type:69"
                        "65 96 8 9 iter:6967 128 16 12 log_ptr:7054 160 16 15 item_param:7028 192 24 19 item_param_vec:70"
                        "29 256 24 17 argument_vec:7030 320 24 11 reason:7031 384 32 16 before_name:7000 448 32 15 audit_name:7001";
  *(_QWORD *)(v6 + 16) = PlayerAvatarComp::handleAvatarRenameAuditResult;
  v8 = (_DWORD *)(v6 >> 3);
  v8[536862720] = -235802127;
  v8[536862721] = -234556927;
  v8[536862722] = -234556924;
  v8[536862723] = -218959360;
  v8[536862724] = -219021312;
  v8[536862725] = -219021312;
  v8[536862726] = -234881024;
  v8[536862727] = -218959118;
  v8[536862728] = -234881024;
  v8[536862729] = -218959118;
  v8[536862730] = -234881024;
  v8[536862731] = -218959118;
  v8[536862733] = -218959118;
  v8[536862735] = -202116109;
  *(_DWORD *)(v6 + 64) = avatar_id;
  *(_DWORD *)(v6 + 80) = source_type;
  *(std::map<unsigned int,AvatarRenameData>::iterator *)(v6 + 96) = std::map<unsigned int,AvatarRenameData>::find(
                                                                      &this->avatar_rename_data_map_,
                                                                      (const std::map<unsigned int,AvatarRenameData>::key_type *)(v6 + 64));
  __y._M_node = std::map<unsigned int,AvatarRenameData>::end(&this->avatar_rename_data_map_)._M_node;
  if ( std::operator==(
         (const std::_Rb_tree_iterator<std::pair<unsigned int const,AvatarRenameData> >::_Self *)(v6 + 96),
         &__y) )
  {
    common::milog::MiLogStream::create(
      &v70,
      &common::milog::MiLogDefault::default_log_obj_,
      4u,
      "./src/player/avatar/player_avatar_comp.cpp",
      "handleAvatarRenameAuditResult",
      6970);
    v9 = common::milog::MiLogStream::operator<<<char [58],(char *[58])0>(
           &v70,
           (const char (*)[58])"cannot find avatarRenameData handling result, avatar_id: ");
    common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v9, (const unsigned int *)(v6 + 64));
    common::milog::MiLogStream::~MiLogStream(&v70);
    v5 = -1;
    goto LABEL_55;
  }
  v10 = std::_Rb_tree_iterator<std::pair<unsigned int const,AvatarRenameData>>::operator->((const std::_Rb_tree_iterator<std::pair<unsigned int const,AvatarRenameData> > *const)(v6 + 96));
  rename_data = &v10->second;
  audit_data = &v10->second.audit_data;
  p_audit_state = &v10->second.audit_data.audit_state;
  if ( *(_BYTE *)(((unsigned __int64)p_audit_state >> 3) + 0x7FFF8000) != 0
    && (char)(((unsigned __int8)p_audit_state & 7) + 3) >= *(_BYTE *)(((unsigned __int64)p_audit_state >> 3) + 0x7FFF8000) )
  {
    __asan_report_load4(p_audit_state);
  }
  if ( audit_data->audit_state != 1 )
  {
    common::milog::MiLogStream::create(
      &v70,
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/player/avatar/player_avatar_comp.cpp",
      "handleAvatarRenameAuditResult",
      6978);
    v12 = common::milog::MiLogStream::operator<<<char [38],(char *[38])0>(
            &v70,
            (const char (*)[38])"audit state is not right, avatar_id: ");
    v13 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v12, (const unsigned int *)(v6 + 64));
    v14 = common::milog::MiLogStream::operator<<<char [15],(char *[15])0>(v13, (const char (*)[15])", audit_state:");
    common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v14, &audit_data->audit_state);
    common::milog::MiLogStream::~MiLogStream(&v70);
    v5 = -1;
    goto LABEL_55;
  }
  if ( std::operator!=<char>(avatar_name, &audit_data->avatar_name) )
  {
    common::milog::MiLogStream::create(
      &v70,
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/player/avatar/player_avatar_comp.cpp",
      "handleAvatarRenameAuditResult",
      6984);
    v15 = common::milog::MiLogStream::operator<<<char [30],(char *[30])0>(
            &v70,
            (const char (*)[30])"name not match, result_name: ");
    v16 = common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v15, avatar_name);
    v17 = common::milog::MiLogStream::operator<<<char [18],(char *[18])0>(v16, (const char (*)[18])" auditting_name: ");
    common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v17, &audit_data->avatar_name);
    common::milog::MiLogStream::~MiLogStream(&v70);
    v5 = -1;
    goto LABEL_55;
  }
  if ( *(_BYTE *)(((unsigned __int64)&audit_data->source_type >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&audit_data->source_type >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4(&audit_data->source_type);
  }
  if ( audit_data->source_type != *(_DWORD *)(v6 + 80) )
  {
    common::milog::MiLogStream::create(
      &v70,
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/player/avatar/player_avatar_comp.cpp",
      "handleAvatarRenameAuditResult",
      6990);
    v18 = common::milog::MiLogStream::operator<<<char [37],(char *[37])0>(
            &v70,
            (const char (*)[37])"source_type not match, result_type: ");
    v19 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v18, (const unsigned int *)(v6 + 80));
    v20 = common::milog::MiLogStream::operator<<<char [18],(char *[18])0>(v19, (const char (*)[18])" auditting_type: ");
    common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v20, &audit_data->source_type);
    common::milog::MiLogStream::~MiLogStream(&v70);
    v5 = -1;
    goto LABEL_55;
  }
  ServiceBox::findService<GameserverService>();
  GameserverService::getConfig((GameserverService *const)&v69);
  v21 = std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false> *const)&v69);
  rename_config_ptr = RenameExcelConfigMgr::findAvatarRenameExcelConfigByAvatarId(
                        &v21->design_config.txt_config_mgr.rename_config_mgr,
                        *(_DWORD *)(v6 + 64));
  std::shared_ptr<Config>::~shared_ptr((std::shared_ptr<Config> *const)&v69);
  if ( !rename_config_ptr )
  {
    common::milog::MiLogStream::create(
      &v70,
      &common::milog::MiLogDefault::default_log_obj_,
      4u,
      "./src/player/avatar/player_avatar_comp.cpp",
      "handleAvatarRenameAuditResult",
      6996);
    v22 = common::milog::MiLogStream::operator<<<char [39],(char *[39])0>(
            &v70,
            (const char (*)[39])"cannot find rename config, avatar_id: ");
    common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v22, (const unsigned int *)(v6 + 64));
    common::milog::MiLogStream::~MiLogStream(&v70);
    v5 = -1;
    goto LABEL_55;
  }
  std::string::basic_string(v6 + 384, &rename_data->cur_avatar_name);
  std::string::basic_string(v6 + 448, avatar_name);
  if ( *(_BYTE *)(((unsigned __int64)&rename_config_ptr->type >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)rename_config_ptr + 12) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&rename_config_ptr->type >> 3)
                                                                     + 0x7FFF8000) )
  {
    __asan_report_load4(&rename_config_ptr->type);
  }
  if ( rename_config_ptr->type != AVATAR_RENAME_TYPE_WANDERER )
  {
    common::milog::MiLogStream::create(
      &v70,
      &common::milog::MiLogDefault::default_log_obj_,
      4u,
      "./src/player/avatar/player_avatar_comp.cpp",
      "handleAvatarRenameAuditResult",
      7046);
    v42 = common::milog::MiLogStream::operator<<<char [22],(char *[22])0>(
            &v70,
            (const char (*)[22])"unknown rename type: ");
    if ( *(_BYTE *)(((unsigned __int64)&rename_config_ptr->type >> 3) + 0x7FFF8000) != 0
      && (char)((((_BYTE)rename_config_ptr + 12) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&rename_config_ptr->type >> 3)
                                                                       + 0x7FFF8000) )
    {
      __asan_report_load4(&rename_config_ptr->type);
    }
    __y._M_node = (std::_Rb_tree_iterator<std::pair<unsigned int const,AvatarRenameData> >::_Base_ptr)data::enumValToStr(rename_config_ptr->type);
    common::milog::MiLogStream::operator<<<char const*,(char const**)0>(v42, (const char *const *)&__y);
    common::milog::MiLogStream::~MiLogStream(&v70);
    v5 = -1;
    goto LABEL_54;
  }
  if ( *(_BYTE *)(((unsigned __int64)&audit_data->source_type >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&audit_data->source_type >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4(&audit_data->source_type);
  }
  if ( audit_data->source_type != 1 )
  {
    common::milog::MiLogStream::create(
      &v70,
      &common::milog::MiLogDefault::default_log_obj_,
      4u,
      "./src/player/avatar/player_avatar_comp.cpp",
      "handleAvatarRenameAuditResult",
      7009);
    v23 = common::milog::MiLogStream::operator<<<char [38],(char *[38])0>(
            &v70,
            (const char (*)[38])"unknown wanderer rename source_type: ");
    common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v23, &audit_data->source_type);
    common::milog::MiLogStream::~MiLogStream(&v70);
  }
  if ( is_succ )
  {
    std::string::operator=(&rename_data->cur_avatar_name, audit_data);
    AvatarRenameAuditData::clear(audit_data);
    common::milog::MiLogStream::create(
      &v70,
      &common::milog::MiLogDefault::default_log_obj_,
      1u,
      "./src/player/avatar/player_avatar_comp.cpp",
      "handleAvatarRenameAuditResult",
      7017);
    v24 = common::milog::MiLogStream::operator<<<char [40],(char *[40])0>(
            &v70,
            (const char (*)[40])"avatar rename audit passed, avatar_id: ");
    v25 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v24, (const unsigned int *)(v6 + 64));
    v26 = common::milog::MiLogStream::operator<<<char [9],(char *[9])0>(v25, (const char (*)[9])", name: ");
    v27 = common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v26, &rename_data->cur_avatar_name);
    v28 = common::milog::MiLogStream::operator<<<char [12],(char *[12])0>(v27, (const char (*)[12])", player_: ");
    if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
      __asan_report_load8(&this->player_);
    operator<<(v28, this->player_);
    common::milog::MiLogStream::~MiLogStream(&v70);
    PlayerAvatarComp::notifyAvatarRenameData(this);
  }
  else
  {
    AvatarRenameAuditData::clear(audit_data);
    if ( *(_BYTE *)(((unsigned __int64)&rename_config_ptr->audit_fail_mail_id >> 3) + 0x7FFF8000) != 0
      && *(_BYTE *)(((unsigned __int64)&rename_config_ptr->audit_fail_mail_id >> 3) + 0x7FFF8000) <= 3 )
    {
      __asan_report_load4(&rename_config_ptr->audit_fail_mail_id);
    }
    *(_DWORD *)(v6 + 48) = rename_config_ptr->audit_fail_mail_id;
    *(_QWORD *)(v6 + 160) = 0LL;
    *(_QWORD *)(v6 + 168) = 0LL;
    *(_DWORD *)(v6 + 164) = 1;
    if ( *(_BYTE *)(((unsigned __int64)&rename_config_ptr->rename_item_id >> 3) + 0x7FFF8000) != 0
      && (char)((((_BYTE)rename_config_ptr + 20) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&rename_config_ptr->rename_item_id >> 3)
                                                                       + 0x7FFF8000) )
    {
      __asan_report_load4(&rename_config_ptr->rename_item_id);
    }
    *(_DWORD *)(v6 + 160) = rename_config_ptr->rename_item_id;
    std::allocator<ItemParam>::allocator((std::allocator<ItemParam> *const)(v6 + 32));
    v29 = *(std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)2> **)(v6 + 168);
    v69._M_ptr = *(std::__shared_ptr<google::protobuf::Message,(__gnu_cxx::_Lock_policy)2>::element_type **)(v6 + 160);
    v69._M_refcount._M_pi = v29;
    v59._anon_0._M_allocated_capacity = (std::string::size_type)&v69;
    *(&v59._anon_0._M_allocated_capacity + 1) = 1LL;
    std::vector<ItemParam>::vector(
      (std::vector<ItemParam> *const)(v6 + 192),
      (std::initializer_list<ItemParam>)__PAIR128__(1LL, &v69),
      (const std::vector<ItemParam>::allocator_type *)(v6 + 32));
    std::allocator<ItemParam>::~allocator((std::allocator<ItemParam> *const)(v6 + 32));
    std::vector<std::string>::vector((std::vector<std::string> *const)(v6 + 256));
    ActionReason::ActionReason(
      (ActionReason *const)(v6 + 320),
      ACTION_REASON_AVATAR_RENAME_AUDIT_FAILED,
      ITEM_LIMIT_AVATAR_RENAME);
    if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
      __asan_report_load8(&this->player_);
    MailComp = Player::getMailComp(this->player_);
    ret = PlayerMailComp::addMailById(
            MailComp,
            *(_DWORD *)(v6 + 48),
            0x14u,
            (const std::vector<ItemParam> *)(v6 + 192),
            (const std::vector<std::string> *)(v6 + 256),
            (const ActionReason *)(v6 + 320));
    if ( ret )
    {
      common::milog::MiLogStream::create(
        &v70,
        &common::milog::MiLogDefault::default_log_obj_,
        4u,
        "./src/player/avatar/player_avatar_comp.cpp",
        "handleAvatarRenameAuditResult",
        7035);
      v31 = common::milog::MiLogStream::operator<<<char [25],(char *[25])0>(
              &v70,
              (const char (*)[25])"addMailById failed, uid:");
      if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
        __asan_report_load8(&this->player_);
      val = Player::getUid(this->player_);
      v32 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v31, &val);
      v33 = common::milog::MiLogStream::operator<<<char [17],(char *[17])0>(v32, (const char (*)[17])" mail_config_id:");
      common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v33, (const unsigned int *)(v6 + 48));
      common::milog::MiLogStream::~MiLogStream(&v70);
      v5 = ret;
      v34 = 0;
    }
    else
    {
      common::milog::MiLogStream::create(
        &v70,
        &common::milog::MiLogDefault::default_log_obj_,
        1u,
        "./src/player/avatar/player_avatar_comp.cpp",
        "handleAvatarRenameAuditResult",
        7038);
      v35 = common::milog::MiLogStream::operator<<<char [40],(char *[40])0>(
              &v70,
              (const char (*)[40])"avatar rename audit failed, avatar_id: ");
      v36 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v35, (const unsigned int *)(v6 + 64));
      v37 = common::milog::MiLogStream::operator<<<char [15],(char *[15])0>(v36, (const char (*)[15])", audit_name: ");
      v38 = common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v37, (const std::string *)(v6 + 448));
      v39 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(v38, (const char (*)[16])", source_type: ");
      v40 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v39, (const unsigned int *)(v6 + 80));
      v41 = common::milog::MiLogStream::operator<<<char [12],(char *[12])0>(v40, (const char (*)[12])", player_: ");
      if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
        __asan_report_load8(&this->player_);
      operator<<(v41, this->player_);
      common::milog::MiLogStream::~MiLogStream(&v70);
      v34 = 1;
    }
    std::vector<std::string>::~vector((std::vector<std::string> *const)(v6 + 256));
    std::vector<ItemParam>::~vector((std::vector<ItemParam> *const)(v6 + 192));
    if ( v34 != 1 )
      goto LABEL_54;
  }
  common::milog::MiLogStream::create(
    &v70,
    &common::milog::MiLogDefault::default_log_obj_,
    1u,
    "./src/player/avatar/player_avatar_comp.cpp",
    "handleAvatarRenameAuditResult",
    7050);
  v43 = common::milog::MiLogStream::operator<<<char [39],(char *[39])0>(
          &v70,
          (const char (*)[39])"onAvatarRenameAuditResult, avatar_id: ");
  v44 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v43, (const unsigned int *)(v6 + 64));
  v45 = common::milog::MiLogStream::operator<<<char [12],(char *[12])0>(v44, (const char (*)[12])", is_succ: ");
  v46 = common::milog::MiLogStream::operator<<(v45, is_succ);
  v47 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(v46, (const char (*)[16])", source_type: ");
  v48 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v47, (const unsigned int *)(v6 + 80));
  v49 = common::milog::MiLogStream::operator<<<char [11],(char *[11])0>(v48, (const char (*)[11])", player: ");
  if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
    __asan_report_load8(&this->player_);
  operator<<(v49, this->player_);
  common::milog::MiLogStream::~MiLogStream(&v70);
  if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
    __asan_report_load8(&this->player_);
  BasicComp = Player::getBasicComp(this->player_);
  PlayerBasicComp::getNextTransNo[abi:cxx11]((std::string *)&v70, BasicComp);
  StatLogUtils::ContextHolder::ContextHolder((StatLogUtils::ContextHolder *const)(v6 + 32), 0x659u, v59);
  std::string::~string(&v70);
  common::tools::perf::make_shared<proto_log::PlayerLogBodyItemAvatarRename>();
  v51 = std::__shared_ptr_access<proto_log::PlayerLogBodyItemAvatarRename,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<proto_log::PlayerLogBodyItemAvatarRename,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v6 + 128));
  proto_log::PlayerLogBodyItemAvatarRename::set_avatar_id(v51, *(_DWORD *)(v6 + 64));
  v52 = std::__shared_ptr_access<proto_log::PlayerLogBodyItemAvatarRename,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<proto_log::PlayerLogBodyItemAvatarRename,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v6 + 128));
  hasAvatar = PlayerAvatarComp::hasAvatar(this, AVATAR_TYPE_FORMAL, *(_DWORD *)(v6 + 64));
  proto_log::PlayerLogBodyItemAvatarRename::set_is_own(v52, hasAvatar);
  v54 = std::__shared_ptr_access<proto_log::PlayerLogBodyItemAvatarRename,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<proto_log::PlayerLogBodyItemAvatarRename,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v6 + 128));
  proto_log::PlayerLogBodyItemAvatarRename::set_before_name(v54, (const std::string *)(v6 + 384));
  v55 = std::__shared_ptr_access<proto_log::PlayerLogBodyItemAvatarRename,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<proto_log::PlayerLogBodyItemAvatarRename,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v6 + 128));
  proto_log::PlayerLogBodyItemAvatarRename::set_audit_name(v55, (const std::string *)(v6 + 448));
  v56 = std::__shared_ptr_access<proto_log::PlayerLogBodyItemAvatarRename,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<proto_log::PlayerLogBodyItemAvatarRename,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v6 + 128));
  proto_log::PlayerLogBodyItemAvatarRename::set_result(v56, is_succ);
  if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
    __asan_report_load8(&this->player_);
  player = this->player_;
  std::shared_ptr<google::protobuf::Message>::shared_ptr(&v69, 0LL);
  std::shared_ptr<google::protobuf::Message>::shared_ptr<proto_log::PlayerLogBodyItemAvatarRename,void>(
    (std::shared_ptr<google::protobuf::Message> *const)(v6 + 160),
    (const std::shared_ptr<proto_log::PlayerLogBodyItemAvatarRename> *)(v6 + 128));
  Player::printStatLog(player, (MessagePtr *)(v6 + 160), &v69, 0xEu);
  std::shared_ptr<google::protobuf::Message>::~shared_ptr((std::shared_ptr<google::protobuf::Message> *const)(v6 + 160));
  std::shared_ptr<google::protobuf::Message>::~shared_ptr(&v69);
  v5 = 0;
  std::shared_ptr<proto_log::PlayerLogBodyItemAvatarRename>::~shared_ptr((std::shared_ptr<proto_log::PlayerLogBodyItemAvatarRename> *const)(v6 + 128));
  StatLogUtils::ContextHolder::~ContextHolder((StatLogUtils::ContextHolder *const)(v6 + 32));
LABEL_54:
  std::string::~string((void *)(v6 + 448));
  std::string::~string((void *)(v6 + 384));
LABEL_55:
  result = v5;
  if ( v59._M_string_length == v6 )
  {
    *(_QWORD *)((v6 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v6 >> 3) + 0x7FFF8008) = 0LL;
    *(_QWORD *)((v6 >> 3) + 0x7FFF8010) = 0LL;
    *(_QWORD *)((v6 >> 3) + 0x7FFF8018) = 0LL;
    *(_QWORD *)((v6 >> 3) + 0x7FFF8020) = 0LL;
    *(_QWORD *)((v6 >> 3) + 0x7FFF8028) = 0LL;
    *(_DWORD *)((v6 >> 3) + 0x7FFF8034) = 0;
    *(_DWORD *)((v6 >> 3) + 0x7FFF803C) = 0;
  }
  else
  {
    *(_QWORD *)v6 = 1172321806LL;
    *(_QWORD *)((v6 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v6 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v6 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v6 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v6 >> 3) + 0x7FFF8020) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v6 >> 3) + 0x7FFF8028) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v6 >> 3) + 0x7FFF8030) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v6 >> 3) + 0x7FFF8038) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 7065: range 00000000171A7AFC-00000000171A8A3A
void __fastcall PlayerAvatarComp::resetAvatarRename(PlayerAvatarComp *const this, __int32 avatar_id, __int32 reason)
{
  unsigned __int64 v3; // r13
  __int64 v4; // rax
  _DWORD *v5; // r12
  std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v6; // rax
  common::milog::MiLogStream *v7; // rax
  common::milog::MiLogStream *v8; // rax
  std::_Rb_tree_iterator<std::pair<unsigned int const,AvatarRenameData> >::pointer v9; // rax
  common::milog::MiLogStream *v10; // rax
  common::milog::MiLogStream *v11; // rax
  common::milog::MiLogStream *v12; // rax
  common::milog::MiLogStream *v13; // rax
  common::milog::MiLogStream *v14; // rax
  common::milog::MiLogStream *v15; // rax
  common::milog::MiLogStream *v16; // rax
  common::milog::MiLogStream *v17; // rcx
  int v18; // eax
  PlayerMailComp *v19; // rax
  common::milog::MiLogStream *v20; // r14
  common::milog::MiLogStream *v21; // rax
  common::milog::MiLogStream *v22; // rax
  common::milog::MiLogStream *v23; // rax
  std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)2> *v24; // rdx
  PlayerMailComp *MailComp; // rax
  common::milog::MiLogStream *v26; // rax
  PlayerBasicComp *BasicComp; // rax
  std::__shared_ptr_access<proto_log::PlayerLogBodyResetAvatarRename,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v28; // rax
  std::__shared_ptr_access<proto_log::PlayerLogBodyResetAvatarRename,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v29; // r14
  bool hasAvatar; // al
  std::__shared_ptr_access<proto_log::PlayerLogBodyResetAvatarRename,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v31; // rax
  std::__shared_ptr_access<proto_log::PlayerLogBodyResetAvatarRename,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v32; // rax
  Player *v33; // r14
  std::string v34; // [rsp+0h] [rbp-270h]
  unsigned int val; // [rsp+2Ch] [rbp-244h] BYREF
  std::_Rb_tree_iterator<std::pair<unsigned int const,AvatarRenameData> >::_Self __y; // [rsp+38h] [rbp-238h] BYREF
  const data::AvatarRenameExcelConfig *rename_config_ptr; // [rsp+40h] [rbp-230h]
  AvatarRenameData *rename_data; // [rsp+48h] [rbp-228h]
  std::shared_ptr<google::protobuf::Message> v41; // [rsp+50h] [rbp-220h] BYREF
  common::milog::MiLogStream v42; // [rsp+60h] [rbp-210h] BYREF
  char v43[496]; // [rsp+80h] [rbp-1F0h] BYREF

  *(&v34._anon_0._M_allocated_capacity + 1) = (std::string::size_type)this;
  HIDWORD(v34._anon_0._M_allocated_capacity) = avatar_id;
  *(_DWORD *)v34._anon_0._M_local_buf = reason;
  v3 = (unsigned __int64)v43;
  v34._M_string_length = (std::string::size_type)v43;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_3(448LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "11 32 1 11 holder:7135 48 4 19 mail_config_id:7113 64 4 14 avatar_id:7064 80 4 11 reason:7064 96"
                        " 8 9 iter:7072 128 16 12 log_ptr:7136 160 16 15 item_param:7114 192 24 19 item_param_vec:7115 25"
                        "6 24 17 argument_vec:7116 320 24 18 action_reason:7117 384 32 16 before_name:7086";
  *(_QWORD *)(v3 + 16) = PlayerAvatarComp::resetAvatarRename;
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = -234556927;
  v5[536862722] = -234556924;
  v5[536862723] = -218959360;
  v5[536862724] = -219021312;
  v5[536862725] = -219021312;
  v5[536862726] = -234881024;
  v5[536862727] = -218959118;
  v5[536862728] = -234881024;
  v5[536862729] = -218959118;
  v5[536862730] = -234881024;
  v5[536862731] = -218959118;
  v5[536862733] = -202116109;
  *(_DWORD *)(v3 + 64) = avatar_id;
  *(_DWORD *)(v3 + 80) = *(_DWORD *)v34._anon_0._M_local_buf;
  ServiceBox::findService<GameserverService>();
  GameserverService::getConfig((GameserverService *const)&v41);
  v6 = std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false> *const)&v41);
  rename_config_ptr = RenameExcelConfigMgr::findAvatarRenameExcelConfigByAvatarId(
                        &v6->design_config.txt_config_mgr.rename_config_mgr,
                        *(_DWORD *)(v3 + 64));
  std::shared_ptr<Config>::~shared_ptr((std::shared_ptr<Config> *const)&v41);
  if ( !rename_config_ptr )
  {
    common::milog::MiLogStream::create(
      &v42,
      &common::milog::MiLogDefault::default_log_obj_,
      4u,
      "./src/player/avatar/player_avatar_comp.cpp",
      "resetAvatarRename",
      7069);
    v7 = common::milog::MiLogStream::operator<<<char [39],(char *[39])0>(
           &v42,
           (const char (*)[39])"cannot find rename config, avatar_id: ");
    common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v7, (const unsigned int *)(v3 + 64));
    common::milog::MiLogStream::~MiLogStream(&v42);
    goto LABEL_42;
  }
  *(std::map<unsigned int,AvatarRenameData>::iterator *)(v3 + 96) = std::map<unsigned int,AvatarRenameData>::find(
                                                                      &this->avatar_rename_data_map_,
                                                                      (const std::map<unsigned int,AvatarRenameData>::key_type *)(v3 + 64));
  __y._M_node = std::map<unsigned int,AvatarRenameData>::end(&this->avatar_rename_data_map_)._M_node;
  if ( std::operator==(
         (const std::_Rb_tree_iterator<std::pair<unsigned int const,AvatarRenameData> >::_Self *)(v3 + 96),
         &__y) )
  {
    common::milog::MiLogStream::create(
      &v42,
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/player/avatar/player_avatar_comp.cpp",
      "resetAvatarRename",
      7075);
    v8 = common::milog::MiLogStream::operator<<<char [65],(char *[65])0>(
           &v42,
           (const char (*)[65])"cannot find avatarRenameData when resetAvatarRename, avatar_id: ");
    common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v8, (const unsigned int *)(v3 + 64));
    common::milog::MiLogStream::~MiLogStream(&v42);
    goto LABEL_42;
  }
  v9 = std::_Rb_tree_iterator<std::pair<unsigned int const,AvatarRenameData>>::operator->((const std::_Rb_tree_iterator<std::pair<unsigned int const,AvatarRenameData> > *const)(v3 + 96));
  rename_data = &v9->second;
  if ( (unsigned __int8)std::string::empty(&v9->second.cur_avatar_name) )
  {
    common::milog::MiLogStream::create(
      &v42,
      &common::milog::MiLogDefault::default_log_obj_,
      1u,
      "./src/player/avatar/player_avatar_comp.cpp",
      "resetAvatarRename",
      7082);
    v10 = common::milog::MiLogStream::operator<<<char [41],(char *[41])0>(
            &v42,
            (const char (*)[41])"duplicate reset avatar name, avatar_id: ");
    common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v10, (const unsigned int *)(v3 + 64));
    common::milog::MiLogStream::~MiLogStream(&v42);
    goto LABEL_42;
  }
  std::string::basic_string(v3 + 384, &rename_data->cur_avatar_name);
  common::milog::MiLogStream::create(
    &v42,
    &common::milog::MiLogDefault::default_log_obj_,
    1u,
    "./src/player/avatar/player_avatar_comp.cpp",
    "resetAvatarRename",
    7087);
  v11 = common::milog::MiLogStream::operator<<<char [31],(char *[31])0>(
          &v42,
          (const char (*)[31])"resetAvatarRename, avatar_id: ");
  v12 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v11, (const unsigned int *)(v3 + 64));
  v13 = common::milog::MiLogStream::operator<<<char [14],(char *[14])0>(v12, (const char (*)[14])", prev_name: ");
  v14 = common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v13, (const std::string *)(v3 + 384));
  v15 = common::milog::MiLogStream::operator<<<char [10],(char *[10])0>(v14, (const char (*)[10])" reason: ");
  v16 = common::milog::MiLogStream::operator<<<proto::ResetAvatarRenameReason,(proto::ResetAvatarRenameReason*)0>(
          v15,
          (const proto::ResetAvatarRenameReason *)(v3 + 80));
  v17 = common::milog::MiLogStream::operator<<<char [11],(char *[11])0>(v16, (const char (*)[11])", player: ");
  if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
    __asan_report_load8(&this->player_);
  operator<<(v17, this->player_);
  common::milog::MiLogStream::~MiLogStream(&v42);
  std::string::clear(&rename_data->cur_avatar_name);
  PlayerAvatarComp::notifyAvatarRenameData(this);
  v18 = *(_DWORD *)(v3 + 80);
  if ( v18 == 1 )
  {
    if ( *(_BYTE *)(((unsigned __int64)&rename_config_ptr->ip_reset_mail_id >> 3) + 0x7FFF8000) != 0
      && *(_BYTE *)(((unsigned __int64)&rename_config_ptr->ip_reset_mail_id >> 3) + 0x7FFF8000) <= 3 )
    {
      __asan_report_load4(&rename_config_ptr->ip_reset_mail_id);
    }
    *(_DWORD *)(v3 + 48) = rename_config_ptr->ip_reset_mail_id;
    *(_QWORD *)(v3 + 160) = 0LL;
    *(_QWORD *)(v3 + 168) = 0LL;
    *(_DWORD *)(v3 + 164) = 1;
    if ( *(_BYTE *)(((unsigned __int64)&rename_config_ptr->rename_item_id >> 3) + 0x7FFF8000) != 0
      && (char)((((_BYTE)rename_config_ptr + 20) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&rename_config_ptr->rename_item_id >> 3)
                                                                       + 0x7FFF8000) )
    {
      __asan_report_load4(&rename_config_ptr->rename_item_id);
    }
    *(_DWORD *)(v3 + 160) = rename_config_ptr->rename_item_id;
    std::allocator<ItemParam>::allocator((std::allocator<ItemParam> *const)(v3 + 32));
    v24 = *(std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)2> **)(v3 + 168);
    v41._M_ptr = *(std::__shared_ptr<google::protobuf::Message,(__gnu_cxx::_Lock_policy)2>::element_type **)(v3 + 160);
    v41._M_refcount._M_pi = v24;
    std::vector<ItemParam>::vector(
      (std::vector<ItemParam> *const)(v3 + 192),
      (std::initializer_list<ItemParam>)__PAIR128__(1LL, &v41),
      (const std::vector<ItemParam>::allocator_type *)(v3 + 32));
    std::allocator<ItemParam>::~allocator((std::allocator<ItemParam> *const)(v3 + 32));
    std::vector<std::string>::vector((std::vector<std::string> *const)(v3 + 256));
    ActionReason::ActionReason(
      (ActionReason *const)(v3 + 320),
      ACTION_REASON_AVATAR_RENAME_RESET,
      ITEM_LIMIT_AVATAR_RENAME);
    if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
      __asan_report_load8(&this->player_);
    MailComp = Player::getMailComp(this->player_);
    if ( !PlayerMailComp::addMailById(
            MailComp,
            *(_DWORD *)(v3 + 48),
            0x15u,
            (const std::vector<ItemParam> *)(v3 + 192),
            (const std::vector<std::string> *)(v3 + 256),
            (const ActionReason *)(v3 + 320)) )
    {
      common::milog::MiLogStream::create(
        &v42,
        &common::milog::MiLogDefault::default_log_obj_,
        1u,
        "./src/player/avatar/player_avatar_comp.cpp",
        "resetAvatarRename",
        7124);
      common::milog::MiLogStream::operator<<<char [40],(char *[40])0>(
        &v42,
        (const char (*)[40])"send reset avatar rename mail with item");
      common::milog::MiLogStream::~MiLogStream(&v42);
      goto LABEL_24;
    }
    common::milog::MiLogStream::create(
      &v42,
      &common::milog::MiLogDefault::default_log_obj_,
      4u,
      "./src/player/avatar/player_avatar_comp.cpp",
      "resetAvatarRename",
      7121);
    v20 = common::milog::MiLogStream::operator<<<char [25],(char *[25])0>(
            &v42,
            (const char (*)[25])"addMailById failed, uid:");
    if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
      __asan_report_load8(&this->player_);
  }
  else
  {
    if ( v18 <= 0 || (unsigned int)(v18 - 2) > 1 )
    {
      common::milog::MiLogStream::create(
        &v42,
        &common::milog::MiLogDefault::default_log_obj_,
        4u,
        "./src/player/avatar/player_avatar_comp.cpp",
        "resetAvatarRename",
        7130);
      v26 = common::milog::MiLogStream::operator<<<char [17],(char *[17])0>(
              &v42,
              (const char (*)[17])"unknown reason: ");
      common::milog::MiLogStream::operator<<<proto::ResetAvatarRenameReason,(proto::ResetAvatarRenameReason*)0>(
        v26,
        (const proto::ResetAvatarRenameReason *)(v3 + 80));
      common::milog::MiLogStream::~MiLogStream(&v42);
      goto LABEL_37;
    }
    if ( *(_BYTE *)(((unsigned __int64)&rename_config_ptr->reset_mail_id >> 3) + 0x7FFF8000) != 0
      && (char)((((_BYTE)rename_config_ptr + 60) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&rename_config_ptr->reset_mail_id >> 3)
                                                                       + 0x7FFF8000) )
    {
      __asan_report_load4(&rename_config_ptr->reset_mail_id);
    }
    *(_DWORD *)(v3 + 48) = rename_config_ptr->reset_mail_id;
    std::vector<ItemParam>::vector((std::vector<ItemParam> *const)(v3 + 192));
    std::vector<std::string>::vector((std::vector<std::string> *const)(v3 + 256));
    ActionReason::ActionReason((ActionReason *const)(v3 + 320), ACTION_REASON_AVATAR_RENAME_RESET, ITEM_LIMIT_NONE);
    if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
      __asan_report_load8(&this->player_);
    v19 = Player::getMailComp(this->player_);
    if ( !PlayerMailComp::addMailById(
            v19,
            *(_DWORD *)(v3 + 48),
            0x15u,
            (const std::vector<ItemParam> *)(v3 + 192),
            (const std::vector<std::string> *)(v3 + 256),
            (const ActionReason *)(v3 + 320)) )
    {
      common::milog::MiLogStream::create(
        &v42,
        &common::milog::MiLogDefault::default_log_obj_,
        1u,
        "./src/player/avatar/player_avatar_comp.cpp",
        "resetAvatarRename",
        7107);
      v23 = common::milog::MiLogStream::operator<<<char [53],(char *[53])0>(
              &v42,
              (const char (*)[53])"send reset avatar rename mail without item, reason: ");
      common::milog::MiLogStream::operator<<<proto::ResetAvatarRenameReason,(proto::ResetAvatarRenameReason*)0>(
        v23,
        (const proto::ResetAvatarRenameReason *)(v3 + 80));
      common::milog::MiLogStream::~MiLogStream(&v42);
      goto LABEL_24;
    }
    common::milog::MiLogStream::create(
      &v42,
      &common::milog::MiLogDefault::default_log_obj_,
      4u,
      "./src/player/avatar/player_avatar_comp.cpp",
      "resetAvatarRename",
      7104);
    v20 = common::milog::MiLogStream::operator<<<char [25],(char *[25])0>(
            &v42,
            (const char (*)[25])"addMailById failed, uid:");
    if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
      __asan_report_load8(&this->player_);
  }
  val = Player::getUid(this->player_);
  v21 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v20, &val);
  v22 = common::milog::MiLogStream::operator<<<char [17],(char *[17])0>(v21, (const char (*)[17])" mail_config_id:");
  common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v22, (const unsigned int *)(v3 + 48));
  common::milog::MiLogStream::~MiLogStream(&v42);
LABEL_24:
  std::vector<std::string>::~vector((std::vector<std::string> *const)(v3 + 256));
  std::vector<ItemParam>::~vector((std::vector<ItemParam> *const)(v3 + 192));
LABEL_37:
  if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
    __asan_report_load8(&this->player_);
  BasicComp = Player::getBasicComp(this->player_);
  PlayerBasicComp::getNextTransNo[abi:cxx11]((std::string *)&v42, BasicComp);
  StatLogUtils::ContextHolder::ContextHolder((StatLogUtils::ContextHolder *const)(v3 + 32), 0x65Au, v34);
  std::string::~string(&v42);
  common::tools::perf::make_shared<proto_log::PlayerLogBodyResetAvatarRename>();
  v28 = std::__shared_ptr_access<proto_log::PlayerLogBodyResetAvatarRename,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<proto_log::PlayerLogBodyResetAvatarRename,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 128));
  proto_log::PlayerLogBodyResetAvatarRename::set_avatar_id(v28, *(_DWORD *)(v3 + 64));
  v29 = std::__shared_ptr_access<proto_log::PlayerLogBodyResetAvatarRename,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<proto_log::PlayerLogBodyResetAvatarRename,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 128));
  hasAvatar = PlayerAvatarComp::hasAvatar(
                *((PlayerAvatarComp *const *)&v34._anon_0._M_allocated_capacity + 1),
                AVATAR_TYPE_FORMAL,
                *(_DWORD *)(v3 + 64));
  proto_log::PlayerLogBodyResetAvatarRename::set_is_own(v29, hasAvatar);
  v31 = std::__shared_ptr_access<proto_log::PlayerLogBodyResetAvatarRename,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<proto_log::PlayerLogBodyResetAvatarRename,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 128));
  proto_log::PlayerLogBodyResetAvatarRename::set_before_name(v31, (const std::string *)(v3 + 384));
  v32 = std::__shared_ptr_access<proto_log::PlayerLogBodyResetAvatarRename,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<proto_log::PlayerLogBodyResetAvatarRename,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 128));
  proto_log::PlayerLogBodyResetAvatarRename::set_reason(v32, *(_DWORD *)(v3 + 80));
  if ( *(_BYTE *)(((*(&v34._anon_0._M_allocated_capacity + 1) + 24) >> 3) + 0x7FFF8000) )
    __asan_report_load8(*(&v34._anon_0._M_allocated_capacity + 1) + 24);
  v33 = *(Player **)(*(&v34._anon_0._M_allocated_capacity + 1) + 24);
  std::shared_ptr<google::protobuf::Message>::shared_ptr(&v41, 0LL);
  std::shared_ptr<google::protobuf::Message>::shared_ptr<proto_log::PlayerLogBodyResetAvatarRename,void>(
    (std::shared_ptr<google::protobuf::Message> *const)(v3 + 160),
    (const std::shared_ptr<proto_log::PlayerLogBodyResetAvatarRename> *)(v3 + 128));
  Player::printStatLog(v33, (MessagePtr *)(v3 + 160), &v41, 0xEu);
  std::shared_ptr<google::protobuf::Message>::~shared_ptr((std::shared_ptr<google::protobuf::Message> *const)(v3 + 160));
  std::shared_ptr<google::protobuf::Message>::~shared_ptr(&v41);
  std::shared_ptr<proto_log::PlayerLogBodyResetAvatarRename>::~shared_ptr((std::shared_ptr<proto_log::PlayerLogBodyResetAvatarRename> *const)(v3 + 128));
  StatLogUtils::ContextHolder::~ContextHolder((StatLogUtils::ContextHolder *const)(v3 + 32));
  std::string::~string((void *)(v3 + 384));
LABEL_42:
  if ( v34._M_string_length == v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8010) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8018) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8020) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8028) = 0LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8034) = 0;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8020) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8028) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8030) = 0xF5F5F5F5F5F5F5F5LL;
  }
};

// Line 7145: range 00000000171A8A3C-00000000171A8E9A
void __cdecl PlayerAvatarComp::updateAvatarRenameCoolDown(PlayerAvatarComp *const this)
{
  GameserverService *v1; // rsi
  unsigned int AvatarRenameLastTime; // eax
  unsigned int v3; // ebx
  __int64 Now; // rax
  uint32_t v5; // edi
  __int64 v6; // rdx
  time_t v7; // rcx
  char v8; // dl
  unsigned int v9; // eax
  unsigned int v10; // ebx
  __int64 v11; // rax
  uint32_t v12; // edi
  __int64 v13; // rdx
  uint32_t avatar_rename_during_last_time_count; // ebx
  unsigned int AvatarRenamePunishTime; // eax
  unsigned int v16; // ebx
  __int64 v17; // rax
  __int64 v18; // rsi
  common::milog::MiLogStream *v19; // rax
  unsigned int AvatarRenameCdInterval; // eax
  unsigned int v21; // ebx
  __int64 v22; // rax
  __int64 v23; // rsi
  ConstValueExcelConfigMgr *const_value_mgr; // [rsp+18h] [rbp-48h]
  std::shared_ptr<Config> v26; // [rsp+20h] [rbp-40h] BYREF
  common::milog::MiLogStream v27; // [rsp+30h] [rbp-30h] BYREF

  v1 = ServiceBox::findService<GameserverService>();
  GameserverService::getConfig((GameserverService *const)&v26);
  const_value_mgr = &std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false> *const)&v26)->design_config.txt_config_mgr.const_value_config_mgr;
  std::shared_ptr<Config>::~shared_ptr(&v26);
  if ( *(_BYTE *)(((unsigned __int64)&this->avatar_rename_during_last_time_count_ >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->avatar_rename_during_last_time_count_ >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4(&this->avatar_rename_during_last_time_count_);
  }
  if ( !this->avatar_rename_during_last_time_count_ )
  {
    AvatarRenameLastTime = ConstValueExcelConfigMgr::getAvatarRenameLastTime(const_value_mgr);
    v3 = SAFE_MULTIPLY<int,unsigned int>(60, AvatarRenameLastTime);
    Now = common::tools::TimeUtils::getNow();
    v5 = SAFE_ADD<long,unsigned int>(Now, v3);
    v1 = (GameserverService *)((((_BYTE)this - 68) & 7u) + 3);
    v6 = (*(_BYTE *)(((unsigned __int64)&this->avatar_rename_next_limit_time_ >> 3) + 0x7FFF8000) != 0) & (unsigned __int8)((char)((((_BYTE)this - 68) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&this->avatar_rename_next_limit_time_ >> 3) + 0x7FFF8000));
    if ( (_BYTE)v6 )
    {
      v5 = (_DWORD)this + 1468;
      __asan_report_store4(&this->avatar_rename_next_limit_time_, v1, v6);
    }
    this->avatar_rename_next_limit_time_ = v5;
  }
  v7 = common::tools::TimeUtils::getNow();
  v8 = *(_BYTE *)(((unsigned __int64)&this->avatar_rename_next_limit_time_ >> 3) + 0x7FFF8000);
  LOBYTE(v1) = v8 != 0;
  if ( v8 != 0 && (char)((((_BYTE)this - 68) & 7) + 3) >= v8 )
    __asan_report_load4(&this->avatar_rename_next_limit_time_);
  if ( v7 >= this->avatar_rename_next_limit_time_ )
  {
    if ( *(_BYTE *)(((unsigned __int64)&this->avatar_rename_during_last_time_count_ >> 3) + 0x7FFF8000) != 0
      && *(_BYTE *)(((unsigned __int64)&this->avatar_rename_during_last_time_count_ >> 3) + 0x7FFF8000) <= 3 )
    {
      __asan_report_store4(
        &this->avatar_rename_during_last_time_count_,
        v1,
        &this->avatar_rename_during_last_time_count_);
    }
    this->avatar_rename_during_last_time_count_ = 1;
    v9 = ConstValueExcelConfigMgr::getAvatarRenameLastTime(const_value_mgr);
    v10 = SAFE_MULTIPLY<int,unsigned int>(60, v9);
    v11 = common::tools::TimeUtils::getNow();
    v12 = SAFE_ADD<long,unsigned int>(v11, v10);
    v13 = (*(_BYTE *)(((unsigned __int64)&this->avatar_rename_next_limit_time_ >> 3) + 0x7FFF8000) != 0) & (unsigned __int8)((char)((((_BYTE)this - 68) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&this->avatar_rename_next_limit_time_ >> 3) + 0x7FFF8000));
    if ( (_BYTE)v13 )
    {
      v12 = (_DWORD)this + 1468;
      __asan_report_store4(&this->avatar_rename_next_limit_time_, (((_BYTE)this - 68) & 7u) + 3, v13);
    }
    this->avatar_rename_next_limit_time_ = v12;
  }
  else
  {
    if ( *(_BYTE *)(((unsigned __int64)&this->avatar_rename_during_last_time_count_ >> 3) + 0x7FFF8000) != 0
      && *(_BYTE *)(((unsigned __int64)&this->avatar_rename_during_last_time_count_ >> 3) + 0x7FFF8000) <= 3 )
    {
      __asan_report_load4(&this->avatar_rename_during_last_time_count_);
    }
    ++this->avatar_rename_during_last_time_count_;
  }
  if ( *(_BYTE *)(((unsigned __int64)&this->avatar_rename_during_last_time_count_ >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->avatar_rename_during_last_time_count_ >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4(&this->avatar_rename_during_last_time_count_);
  }
  avatar_rename_during_last_time_count = this->avatar_rename_during_last_time_count_;
  if ( avatar_rename_during_last_time_count < ConstValueExcelConfigMgr::getAvatarRenameLimitNum(const_value_mgr) )
  {
    AvatarRenameCdInterval = ConstValueExcelConfigMgr::getAvatarRenameCdInterval(const_value_mgr);
    v21 = SAFE_MULTIPLY<int,unsigned int>(60, AvatarRenameCdInterval);
    v22 = common::tools::TimeUtils::getNow();
    v23 = (unsigned int)SAFE_ADD<long,unsigned int>(v22, v21);
    if ( *(_BYTE *)(((unsigned __int64)&this->next_avatar_rename_time_ >> 3) + 0x7FFF8000) != 0
      && *(_BYTE *)(((unsigned __int64)&this->next_avatar_rename_time_ >> 3) + 0x7FFF8000) <= 3 )
    {
      __asan_report_store4(&this->next_avatar_rename_time_, v23, &this->next_avatar_rename_time_);
    }
    this->next_avatar_rename_time_ = v23;
  }
  else
  {
    AvatarRenamePunishTime = ConstValueExcelConfigMgr::getAvatarRenamePunishTime(const_value_mgr);
    v16 = SAFE_MULTIPLY<int,unsigned int>(60, AvatarRenamePunishTime);
    v17 = common::tools::TimeUtils::getNow();
    v18 = (unsigned int)SAFE_ADD<long,unsigned int>(v17, v16);
    if ( *(_BYTE *)(((unsigned __int64)&this->next_avatar_rename_time_ >> 3) + 0x7FFF8000) != 0
      && *(_BYTE *)(((unsigned __int64)&this->next_avatar_rename_time_ >> 3) + 0x7FFF8000) <= 3 )
    {
      __asan_report_store4(&this->next_avatar_rename_time_, v18, &this->next_avatar_rename_time_);
    }
    this->next_avatar_rename_time_ = v18;
    if ( *(_BYTE *)(((unsigned __int64)&this->avatar_rename_during_last_time_count_ >> 3) + 0x7FFF8000) != 0
      && *(_BYTE *)(((unsigned __int64)&this->avatar_rename_during_last_time_count_ >> 3) + 0x7FFF8000) <= 3 )
    {
      __asan_report_store4(
        &this->avatar_rename_during_last_time_count_,
        v18,
        &this->avatar_rename_during_last_time_count_);
    }
    this->avatar_rename_during_last_time_count_ = 0;
    common::milog::MiLogStream::create(
      &v27,
      &common::milog::MiLogDefault::default_log_obj_,
      1u,
      "./src/player/avatar/player_avatar_comp.cpp",
      "updateAvatarRenameCoolDown",
      7171);
    v19 = common::milog::MiLogStream::operator<<<char [68],(char *[68])0>(
            &v27,
            (const char (*)[68])"updateAvatarRenameCoolDown purnish time, next_avatar_rename_time_: ");
    common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v19, &this->next_avatar_rename_time_);
    common::milog::MiLogStream::~MiLogStream(&v27);
  }
};

// Line 7182: range 00000000171A91BA-00000000171AA822
void __cdecl PlayerAvatarComp::asyncAvatarRenameAuditRequest(
        const PlayerAvatarComp *const this,
        const AvatarRenameData *rename_data,
        const proto::AvatarRenameAuditSourceType *type)
{
  unsigned __int64 v3; // r13
  __int64 v4; // rax
  _DWORD *v5; // r12
  RenameExcelConfigMgr *p_rename_config_mgr; // rcx
  common::milog::MiLogStream *v7; // rdx
  const std::string *v8; // rax
  unsigned int Uid; // eax
  std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v10; // rax
  std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v11; // rax
  uint32_t v12; // eax
  std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v13; // rax
  unsigned int AvatarRenameAutoFailTime; // eax
  unsigned int v15; // ecx
  common::milog::MiLogStream *v16; // rdx
  unsigned int v17; // eax
  const std::string *v18; // rax
  std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v19; // rax
  common::milog::MiLogStream *v20; // r14
  common::milog::MiLogStream *v21; // r14
  int v22; // r14d
  const char *v23; // rsi
  common::milog::MiLogStream *v24; // rax
  common::milog::MiLogStream *v25; // rax
  common::milog::MiLogStream *v26; // rax
  common::milog::MiLogStream *v27; // rax
  common::milog::MiLogStream *v28; // rax
  common::milog::MiLogStream *v29; // rax
  common::milog::MiLogStream *v30; // rax
  common::milog::MiLogStream *v31; // rax
  common::milog::MiLogStream *v32; // rax
  common::milog::MiLogStream *v33; // rax
  common::milog::MiLogStream *v34; // rax
  common::milog::MiLogStream *v35; // rax
  common::milog::MiLogStream *v36; // rax
  common::milog::MiLogStream *v37; // rax
  common::milog::MiLogStream *v38; // rax
  common::milog::MiLogStream *v39; // rax
  common::milog::MiLogStream *v40; // rax
  GameserverService *v41; // r14
  bool v42; // r14
  common::milog::MiLogStream *v43; // rax
  common::milog::MiLogStream *v44; // r14
  int v45; // [rsp+0h] [rbp-470h]
  int val; // [rsp+20h] [rbp-450h] BYREF
  uint32_t auto_fail_time; // [rsp+24h] [rbp-44Ch]
  const data::AvatarRenameExcelConfig *rename_config_ptr; // [rsp+28h] [rbp-448h]
  const AvatarRenameAuditConfig *audit_config; // [rsp+30h] [rbp-440h]
  proto::AvatarRenameContentAuditField *source_rename_audit_field; // [rsp+38h] [rbp-438h]
  proto::AvatarRenameAuditContent *source_rename_audit_data; // [rsp+40h] [rbp-430h]
  proto::ContentAuditAuxiliaryField *uid_auxiliary_field; // [rsp+48h] [rbp-428h]
  proto::ContentAuditAuxiliaryField *rename_id_auxiliary_field; // [rsp+50h] [rbp-420h]
  proto::ContentAuditAuxiliaryField *avatar_id_auxiliary_field; // [rsp+58h] [rbp-418h]
  proto::ContentAuditAuxiliaryField *source_type_auxiliary_field; // [rsp+60h] [rbp-410h]
  proto::ContentAuditAuxiliaryField *aid_auxiliary_field; // [rsp+68h] [rbp-408h]
  proto::ContentAuditAuxiliaryField *region_auxiliary_field; // [rsp+70h] [rbp-400h]
  proto::ContentAuditAuxiliaryField *lang_auxiliary_field; // [rsp+78h] [rbp-3F8h]
  std::string __lhs; // [rsp+80h] [rbp-3F0h] BYREF
  std::string __rhs; // [rsp+A0h] [rbp-3D0h] BYREF
  std::string v62; // [rsp+C0h] [rbp-3B0h] BYREF
  common::milog::MiLogStream v63; // [rsp+E0h] [rbp-390h] BYREF
  char v64[880]; // [rsp+100h] [rbp-370h] BYREF

  v3 = (unsigned __int64)v64;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_4(832LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "10 48 1 22 response_callback:7300 64 4 12 options:7256 80 16 18 request_timer:7183 112 16 15 con"
                        "fig_ptr:7184 144 16 18 to_json_timer:7262 176 32 16 json_string:7260 240 32 12 msg_str:7282 304 "
                        "40 15 status_ret:7263 384 112 16 audit_proto:7198 528 240 17 http_request:7272";
  *(_QWORD *)(v3 + 16) = PlayerAvatarComp::asyncAvatarRenameAuditRequest;
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = -234753551;
  v5[536862722] = 61956;
  v5[536862723] = 62194;
  v5[536862724] = 62194;
  v5[536862725] = 62194;
  v5[536862726] = -219021312;
  v5[536862727] = 62194;
  v5[536862728] = -219021312;
  v5[536862729] = 62194;
  v5[536862730] = -234881024;
  v5[536862731] = -218959118;
  v5[536862735] = -219021312;
  v5[536862736] = 62194;
  v5[536862744] = -202116109;
  v5[536862745] = -202116109;
  common::tools::TimeUtils::Timer::Timer((common::tools::TimeUtils::Timer *const)(v3 + 80));
  ServiceBox::findService<GameserverService>();
  GameserverService::getConfig((GameserverService *const)(v3 + 112));
  if ( std::operator==<Config>((const std::shared_ptr<Config> *)(v3 + 112), 0LL) )
  {
    common::milog::MiLogStream::create(
      &v63,
      &common::milog::MiLogDefault::default_log_obj_,
      4u,
      "./src/player/avatar/player_avatar_comp.cpp",
      "asyncAvatarRenameAuditRequest",
      7187);
    common::milog::MiLogStream::operator<<<char [17],(char *[17])0>(&v63, (const char (*)[17])"getConfig error.");
    common::milog::MiLogStream::~MiLogStream(&v63);
    goto LABEL_55;
  }
  ServiceBox::findService<GameserverService>();
  GameserverService::getConfig((GameserverService *const)(v3 + 144));
  p_rename_config_mgr = &std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 144))->design_config.txt_config_mgr.rename_config_mgr;
  if ( *(_BYTE *)(((unsigned __int64)rename_data >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)rename_data >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4(rename_data);
  }
  rename_config_ptr = RenameExcelConfigMgr::findAvatarRenameExcelConfigByAvatarId(
                        p_rename_config_mgr,
                        rename_data->avatar_id);
  std::shared_ptr<Config>::~shared_ptr((std::shared_ptr<Config> *const)(v3 + 144));
  if ( !rename_config_ptr )
  {
    common::milog::MiLogStream::create(
      &v63,
      &common::milog::MiLogDefault::default_log_obj_,
      4u,
      "./src/player/avatar/player_avatar_comp.cpp",
      "asyncAvatarRenameAuditRequest",
      7193);
    v7 = common::milog::MiLogStream::operator<<<char [39],(char *[39])0>(
           &v63,
           (const char (*)[39])"cannot find rename config, avatar_id: ");
    common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v7, &rename_data->avatar_id);
    common::milog::MiLogStream::~MiLogStream(&v63);
    goto LABEL_55;
  }
  audit_config = &std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 112))->avatar_rename_audit_config_;
  proto::AvatarRenameAuditData::AvatarRenameAuditData((proto::AvatarRenameAuditData *const)(v3 + 384));
  if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
    __asan_report_load8(&this->player_);
  v8 = Player::getAccountUid[abi:cxx11](this->player_);
  proto::AvatarRenameAuditData::set_aid((proto::AvatarRenameAuditData *const)(v3 + 384), v8);
  if ( *(_BYTE *)(((unsigned __int64)&rename_config_ptr->rename_id >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&rename_config_ptr->rename_id >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4(&rename_config_ptr->rename_id);
  }
  std::to_string((std::string *)(v3 + 240), rename_config_ptr->rename_id);
  if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
    __asan_report_load8(&this->player_);
  Uid = Player::getUid(this->player_);
  std::to_string(&__rhs, Uid);
  v10 = std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 112));
  std::operator+<char>(&__lhs, &v10->region_name, "_");
  std::operator+<char>(&v62, &__lhs, &__rhs);
  std::operator+<char>((std::string *)(v3 + 176), &v62, "_");
  std::operator+<char>((std::string *)&v63, (std::string *)(v3 + 176), (std::string *)(v3 + 240));
  proto::AvatarRenameAuditData::set_entity_id((proto::AvatarRenameAuditData *const)(v3 + 384), (std::string *)&v63);
  std::string::~string(&v63);
  std::string::~string((void *)(v3 + 176));
  std::string::~string(&v62);
  std::string::~string(&__lhs);
  std::string::~string(&__rhs);
  std::string::~string((void *)(v3 + 240));
  proto::AvatarRenameAuditData::set_lang((proto::AvatarRenameAuditData *const)(v3 + 384), &audit_config->language);
  v11 = std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 112));
  proto::AvatarRenameAuditData::set_region((proto::AvatarRenameAuditData *const)(v3 + 384), &v11->region_name);
  if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
    __asan_report_load8(&this->player_);
  v12 = Player::getUid(this->player_);
  proto::AvatarRenameAuditData::set_uid((proto::AvatarRenameAuditData *const)(v3 + 384), v12);
  source_rename_audit_field = proto::AvatarRenameAuditData::add_audit_field_list((proto::AvatarRenameAuditData *const)(v3 + 384));
  proto::AvatarRenameContentAuditField::set_name(source_rename_audit_field, "name");
  source_rename_audit_data = proto::AvatarRenameContentAuditField::add_segment_list(source_rename_audit_field);
  proto::AvatarRenameAuditContent::set_type(source_rename_audit_data, "text");
  if ( *(_BYTE *)(((unsigned __int64)type >> 3) + 0x7FFF8000) != 0
    && (char)(((unsigned __int8)type & 7) + 3) >= *(_BYTE *)(((unsigned __int64)type >> 3) + 0x7FFF8000) )
  {
    __asan_report_load4(type);
  }
  if ( *type == AVATAR_RENAME_AUDIT_SOURCE_ITEM )
  {
    ServiceBox::findService<GameserverService>();
    GameserverService::getConfig((GameserverService *const)(v3 + 144));
    v13 = std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 144));
    AvatarRenameAutoFailTime = ConstValueExcelConfigMgr::getAvatarRenameAutoFailTime(&v13->design_config.txt_config_mgr.const_value_config_mgr);
    v15 = SAFE_MULTIPLY<int,unsigned int>(3600, AvatarRenameAutoFailTime);
    if ( *(_BYTE *)(((unsigned __int64)&rename_data->audit_data.submit_time >> 3) + 0x7FFF8000) != 0
      && *(_BYTE *)(((unsigned __int64)&rename_data->audit_data.submit_time >> 3) + 0x7FFF8000) <= 3 )
    {
      __asan_report_load4(&rename_data->audit_data.submit_time);
    }
    auto_fail_time = SAFE_ADD<unsigned int,unsigned int>(rename_data->audit_data.submit_time, v15);
    std::shared_ptr<Config>::~shared_ptr((std::shared_ptr<Config> *const)(v3 + 144));
    proto::AvatarRenameAuditContent::set_content(source_rename_audit_data, &rename_data->audit_data.avatar_name);
    proto::AvatarRenameAuditContent::set_auto_fail_time(source_rename_audit_data, auto_fail_time);
    proto::AvatarRenameAuditData::set_queue_key(
      (proto::AvatarRenameAuditData *const)(v3 + 384),
      &audit_config->item_queue_key);
    goto LABEL_27;
  }
  if ( *type == AVATAR_RENAME_AUDIT_SOURCE_QUEST )
  {
    proto::AvatarRenameAuditContent::set_content(source_rename_audit_data, &rename_data->cur_avatar_name);
    proto::AvatarRenameAuditData::set_queue_key(
      (proto::AvatarRenameAuditData *const)(v3 + 384),
      &audit_config->quest_queue_key);
LABEL_27:
    uid_auxiliary_field = proto::AvatarRenameAuditData::add_aux_field_list((proto::AvatarRenameAuditData *const)(v3 + 384));
    proto::ContentAuditAuxiliaryField::set_name(uid_auxiliary_field, off_260389E0);
    if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
      __asan_report_load8(&this->player_);
    v17 = Player::getUid(this->player_);
    std::to_string((std::string *)&v63, v17);
    proto::ContentAuditAuxiliaryField::set_value(uid_auxiliary_field, (std::string *)&v63);
    std::string::~string(&v63);
    rename_id_auxiliary_field = proto::AvatarRenameAuditData::add_aux_field_list((proto::AvatarRenameAuditData *const)(v3 + 384));
    proto::ContentAuditAuxiliaryField::set_name(rename_id_auxiliary_field, "rename_id");
    if ( *(_BYTE *)(((unsigned __int64)&rename_config_ptr->rename_id >> 3) + 0x7FFF8000) != 0
      && *(_BYTE *)(((unsigned __int64)&rename_config_ptr->rename_id >> 3) + 0x7FFF8000) <= 3 )
    {
      __asan_report_load4(&rename_config_ptr->rename_id);
    }
    std::to_string((std::string *)&v63, rename_config_ptr->rename_id);
    proto::ContentAuditAuxiliaryField::set_value(rename_id_auxiliary_field, (std::string *)&v63);
    std::string::~string(&v63);
    avatar_id_auxiliary_field = proto::AvatarRenameAuditData::add_aux_field_list((proto::AvatarRenameAuditData *const)(v3 + 384));
    proto::ContentAuditAuxiliaryField::set_name(avatar_id_auxiliary_field, "avatar_id");
    if ( *(_BYTE *)(((unsigned __int64)rename_data >> 3) + 0x7FFF8000) != 0
      && *(_BYTE *)(((unsigned __int64)rename_data >> 3) + 0x7FFF8000) <= 3 )
    {
      __asan_report_load4(rename_data);
    }
    std::to_string((std::string *)&v63, rename_data->avatar_id);
    proto::ContentAuditAuxiliaryField::set_value(avatar_id_auxiliary_field, (std::string *)&v63);
    std::string::~string(&v63);
    source_type_auxiliary_field = proto::AvatarRenameAuditData::add_aux_field_list((proto::AvatarRenameAuditData *const)(v3 + 384));
    proto::ContentAuditAuxiliaryField::set_name(source_type_auxiliary_field, "source_type");
    if ( *(_BYTE *)(((unsigned __int64)type >> 3) + 0x7FFF8000) != 0
      && (char)(((unsigned __int8)type & 7) + 3) >= *(_BYTE *)(((unsigned __int64)type >> 3) + 0x7FFF8000) )
    {
      __asan_report_load4(type);
    }
    std::to_string((std::string *)&v63, *type);
    proto::ContentAuditAuxiliaryField::set_value(source_type_auxiliary_field, (std::string *)&v63);
    std::string::~string(&v63);
    aid_auxiliary_field = proto::AvatarRenameAuditData::add_aux_field_list((proto::AvatarRenameAuditData *const)(v3 + 384));
    proto::ContentAuditAuxiliaryField::set_name(aid_auxiliary_field, off_26038A20);
    if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
      __asan_report_load8(&this->player_);
    v18 = Player::getAccountUid[abi:cxx11](this->player_);
    proto::ContentAuditAuxiliaryField::set_value(aid_auxiliary_field, v18);
    region_auxiliary_field = proto::AvatarRenameAuditData::add_aux_field_list((proto::AvatarRenameAuditData *const)(v3 + 384));
    proto::ContentAuditAuxiliaryField::set_name(region_auxiliary_field, "region");
    v19 = std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 112));
    proto::ContentAuditAuxiliaryField::set_value(region_auxiliary_field, &v19->region_name);
    lang_auxiliary_field = proto::AvatarRenameAuditData::add_aux_field_list((proto::AvatarRenameAuditData *const)(v3 + 384));
    proto::ContentAuditAuxiliaryField::set_name(lang_auxiliary_field, "lang");
    proto::ContentAuditAuxiliaryField::set_value(lang_auxiliary_field, &audit_config->language);
    google::protobuf::util::JsonPrintOptions::JsonPrintOptions((google::protobuf::util::JsonPrintOptions *const)(v3 + 64));
    *(_BYTE *)(v3 + 65) = 1;
    *(_BYTE *)(v3 + 67) = 1;
    *(_BYTE *)(v3 + 66) = 1;
    std::string::basic_string(v3 + 176);
    common::tools::TimeUtils::Timer::Timer((common::tools::TimeUtils::Timer *const)(v3 + 144));
    google::protobuf::util::MessageToJsonString(
      (google::protobuf::util::Status *)(v3 + 304),
      (google::protobuf::Message *)(v3 + 384),
      v45,
      (void *)type,
      (int)rename_data,
      (char)this,
      val,
      (void *)rename_config_ptr);
    common::milog::MiLogStream::create(
      &v63,
      &common::milog::MiLogDefault::default_log_obj_,
      1u,
      "./src/player/avatar/player_avatar_comp.cpp",
      "asyncAvatarRenameAuditRequest",
      7264);
    v20 = common::milog::MiLogStream::operator<<<char [27],(char *[27])0>(
            &v63,
            (const char (*)[27])"MessageToJsonString cost: ");
    val = common::tools::TimeUtils::Timer::time((const common::tools::TimeUtils::Timer *const)(v3 + 144));
    common::milog::MiLogStream::operator<<<int,(int *)0>(v20, &val);
    common::milog::MiLogStream::~MiLogStream(&v63);
    if ( !google::protobuf::util::Status::ok((const google::protobuf::util::Status *const)(v3 + 304)) )
    {
      common::milog::MiLogStream::create(
        (common::milog::MiLogStream *)(v3 + 240),
        &common::milog::MiLogDefault::default_log_obj_,
        4u,
        "./src/player/avatar/player_avatar_comp.cpp",
        "asyncAvatarRenameAuditRequest",
        7267);
      v21 = common::milog::MiLogStream::operator<<<char [34],(char *[34])0>(
              (common::milog::MiLogStream *const)(v3 + 240),
              (const char (*)[34])"MessageToJsonString fails, proto:");
      google::protobuf::Message::ShortDebugString[abi:cxx11](
        (std::string *)&v63,
        (google::protobuf::Message *)(v3 + 384));
      common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v21, (const std::string *)&v63);
      std::string::~string(&v63);
      common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v3 + 240));
      v22 = 0;
    }
    else
    {
      v22 = 1;
    }
    google::protobuf::util::Status::~Status((google::protobuf::util::Status *const)(v3 + 304));
    common::tools::TimeUtils::Timer::~Timer((common::tools::TimeUtils::Timer *const)(v3 + 144));
    if ( v22 == 1 )
    {
      common::minet::http_client::HttpRequest::HttpRequest((common::minet::http_client::HttpRequest *const)(v3 + 528));
      std::string::operator=(v3 + 528, audit_config);
      std::string::operator=(v3 + 560, &audit_config->port);
      *(_DWORD *)(v3 + 752) = 1;
      *(_DWORD *)(v3 + 756) = 1;
      if ( *(char *)(((unsigned __int64)&audit_config->is_ssl >> 3) + 0x7FFF8000) < 0 )
        __asan_report_load1(&audit_config->is_ssl);
      *(_BYTE *)(v3 + 760) = audit_config->is_ssl;
      std::string::operator=(v3 + 592, &audit_config->uri);
      std::string::operator=(v3 + 720, v3 + 176);
      std::string::basic_string(v3 + 240);
      if ( common::minet::http_client::HttpUtils::serializeHttpRequest(
             (const common::minet::http_client::HttpRequest *)(v3 + 528),
             (std::string *)(v3 + 240)) )
      {
        common::milog::MiLogStream::create(
          &v63,
          &common::milog::MiLogDefault::default_log_obj_,
          4u,
          "./src/player/avatar/player_avatar_comp.cpp",
          "asyncAvatarRenameAuditRequest",
          7285);
        v23 = "serializeHttpRequest fail";
        common::milog::MiLogStream::operator<<<char [26],(char *[26])0>(
          &v63,
          (const char (*)[26])"serializeHttpRequest fail");
      }
      else
      {
        common::milog::MiLogStream::create(
          &v63,
          &common::milog::MiLogDefault::default_log_obj_,
          1u,
          "./src/player/avatar/player_avatar_comp.cpp",
          "asyncAvatarRenameAuditRequest",
          7289);
        v24 = common::milog::MiLogStream::operator<<<char [19],(char *[19])0>(
                &v63,
                (const char (*)[19])"http_request host:");
        v25 = common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v24, (const std::string *)(v3 + 528));
        v26 = common::milog::MiLogStream::operator<<<char [7],(char *[7])0>(v25, (const char (*)[7])" port:");
        v27 = common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v26, (const std::string *)(v3 + 560));
        v28 = common::milog::MiLogStream::operator<<<char [6],(char *[6])0>(v27, (const char (*)[6])" uri:");
        v29 = common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v28, (const std::string *)(v3 + 592));
        v30 = common::milog::MiLogStream::operator<<<char [9],(char *[9])0>(v29, (const char (*)[9])" method:");
        v31 = common::milog::MiLogStream::operator<<<common::minet::http_client::HttpMethod,(common::minet::http_client::HttpMethod*)0>(
                v30,
                (const common::minet::http_client::HttpMethod *)(v3 + 752));
        v32 = common::milog::MiLogStream::operator<<<char [10],(char *[10])0>(v31, (const char (*)[10])" version:");
        v33 = common::milog::MiLogStream::operator<<<common::minet::http_client::HttpVersion,(common::minet::http_client::HttpVersion*)0>(
                v32,
                (const common::minet::http_client::HttpVersion *)(v3 + 756));
        v34 = common::milog::MiLogStream::operator<<<char [9],(char *[9])0>(v33, (const char (*)[9])" is_ssl:");
        v35 = common::milog::MiLogStream::operator<<(v34, *(_BYTE *)(v3 + 760));
        v36 = common::milog::MiLogStream::operator<<<char [7],(char *[7])0>(v35, (const char (*)[7])" body:");
        v37 = common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v36, (const std::string *)(v3 + 720));
        v38 = common::milog::MiLogStream::operator<<<char [11],(char *[11])0>(v37, (const char (*)[11])" head_map:");
        v39 = common::milog::MiLogStream::operator<<<std::string,std::string>(
                v38,
                (const std::map<std::string,std::string> *)(v3 + 624));
        v40 = common::milog::MiLogStream::operator<<<char [10],(char *[10])0>(v39, (const char (*)[10])" msg_str:");
        LOBYTE(v23) = v3 - 16;
        common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v40, (const std::string *)(v3 + 240));
      }
      common::milog::MiLogStream::~MiLogStream(&v63);
      v41 = ServiceBox::findService<GameserverService>();
      std::function<void ()(common::minet::http_client::HttpRetcode,common::minet::http_client::HttpRequest &&,common::minet::http_client::HttpResponse &&)>::function<PlayerAvatarComp::asyncAvatarRenameAuditRequest(AvatarRenameData const&,proto::AvatarRenameAuditSourceType const&)::{lambda(common::minet::http_client::HttpRetcode,common::minet::http_client::HttpRequest &,common::minet::http_client::HttpResponse)#1},void,void>(
        (std::function<void(common::minet::http_client::HttpRetcode,common::minet::http_client::HttpRequest&&,common::minet::http_client::HttpResponse&&)> *const)&v63,
        (PlayerAvatarComp::asyncAvatarRenameAuditRequest::<lambda(common::minet::http_client::HttpRetcode, common::minet::http_client::HttpRequest&&, common::minet::http_client::HttpResponse&&)>)v23);
      if ( *(_BYTE *)(((unsigned __int64)&audit_config->timeout >> 3) + 0x7FFF8000) != 0
        && (char)((((_BYTE)audit_config + 100) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&audit_config->timeout >> 3)
                                                                     + 0x7FFF8000) )
      {
        __asan_report_load4(&audit_config->timeout);
      }
      v42 = GameserverService::asyncHttpRequest(
              v41,
              (const common::minet::http_client::HttpRequest *)(v3 + 528),
              audit_config->timeout,
              6u,
              (common::minet::http_client::ResponseCallBackFunc *)&v63) != 0;
      std::function<void ()(common::minet::http_client::HttpRetcode,common::minet::http_client::HttpRequest &&,common::minet::http_client::HttpResponse &&)>::~function((std::function<void(common::minet::http_client::HttpRetcode,common::minet::http_client::HttpRequest&&,common::minet::http_client::HttpResponse&&)> *const)&v63);
      if ( v42 )
      {
        common::milog::MiLogStream::create(
          &v63,
          &common::milog::MiLogDefault::default_log_obj_,
          4u,
          "./src/player/avatar/player_avatar_comp.cpp",
          "asyncAvatarRenameAuditRequest",
          7312);
        v43 = common::milog::MiLogStream::operator<<<char [34],(char *[34])0>(
                &v63,
                (const char (*)[34])"asyncHttpRequest fail, http body:");
        common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v43, (const std::string *)(v3 + 720));
        common::milog::MiLogStream::~MiLogStream(&v63);
      }
      common::milog::MiLogStream::create(
        &v63,
        &common::milog::MiLogDefault::default_log_obj_,
        1u,
        "./src/player/avatar/player_avatar_comp.cpp",
        "asyncAvatarRenameAuditRequest",
        7314);
      v44 = common::milog::MiLogStream::operator<<<char [15],(char *[15])0>(&v63, (const char (*)[15])"request cost: ");
      val = common::tools::TimeUtils::Timer::time((const common::tools::TimeUtils::Timer *const)(v3 + 80));
      common::milog::MiLogStream::operator<<<int,(int *)0>(v44, &val);
      common::milog::MiLogStream::~MiLogStream(&v63);
      std::string::~string((void *)(v3 + 240));
      common::minet::http_client::HttpRequest::~HttpRequest((common::minet::http_client::HttpRequest *const)(v3 + 528));
    }
    std::string::~string((void *)(v3 + 176));
    goto LABEL_54;
  }
  common::milog::MiLogStream::create(
    &v63,
    &common::milog::MiLogDefault::default_log_obj_,
    4u,
    "./src/player/avatar/player_avatar_comp.cpp",
    "asyncAvatarRenameAuditRequest",
    7229);
  v16 = common::milog::MiLogStream::operator<<<char [22],(char *[22])0>(
          &v63,
          (const char (*)[22])"unknown source_type: ");
  common::milog::MiLogStream::operator<<<proto::AvatarRenameAuditSourceType,(proto::AvatarRenameAuditSourceType*)0>(
    v16,
    type);
  common::milog::MiLogStream::~MiLogStream(&v63);
LABEL_54:
  proto::AvatarRenameAuditData::~AvatarRenameAuditData((proto::AvatarRenameAuditData *const)(v3 + 384));
LABEL_55:
  std::shared_ptr<Config>::~shared_ptr((std::shared_ptr<Config> *const)(v3 + 112));
  common::tools::TimeUtils::Timer::~Timer((common::tools::TimeUtils::Timer *const)(v3 + 80));
  if ( v64 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8010) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8018) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8020) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8028) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF803C) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8060) = 0LL;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8020) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8028) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8030) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8038) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8040) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8048) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8050) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8058) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8060) = 0xF5F5F5F5F5F5F5F5LL;
  }
};

// Line 7300: range 00000000171A8E9C-00000000171A91B9
void __fastcall PlayerAvatarComp::asyncAvatarRenameAuditRequest(AvatarRenameData const&,proto::AvatarRenameAuditSourceType const&)const::{lambda(common::minet::http_client::HttpRetcode,common::minet::http_client::HttpRequest &&,common::minet::http_client::HttpResponse &&)#1}::operator()(
        const PlayerAvatarComp::asyncAvatarRenameAuditRequest::<lambda(common::minet::http_client::HttpRetcode, common::minet::http_client::HttpRequest&&, common::minet::http_client::HttpResponse&&)> *const __closure,
        common::minet::http_client::HttpRetcode http_retcode,
        common::minet::http_client::HttpRequest *http_request,
        unsigned __int64 http_response)
{
  unsigned __int64 v4; // rbx
  __int64 v5; // rax
  unsigned __int64 v6; // r12
  common::milog::MiLogStream *v7; // rax
  common::milog::MiLogStream *v8; // rax
  common::milog::MiLogStream *v9; // rax
  common::milog::MiLogStream *v10; // rax
  common::milog::MiLogStream *v11; // rax
  common::milog::MiLogStream *v12; // rax
  common::milog::MiLogStream *v13; // rax
  common::milog::MiLogStream *v14; // r13
  common::milog::MiLogStream *v15; // rax
  common::milog::MiLogStream *v16; // rax
  common::milog::MiLogStream *v17; // rax
  common::milog::MiLogStream *v18; // rax
  common::milog::MiLogStream *v19; // rax
  common::milog::MiLogStream *v20; // rax
  unsigned __int64 val; // [rsp+28h] [rbp-88h] BYREF
  common::milog::MiLogStream v24; // [rsp+30h] [rbp-80h] BYREF
  char v25[96]; // [rsp+50h] [rbp-60h] BYREF

  v4 = (unsigned __int64)v25;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v5 = __asan_stack_malloc_0(64LL);
    if ( v5 )
      v4 = v5;
  }
  *(_QWORD *)v4 = 1102416563LL;
  *(_QWORD *)(v4 + 8) = "1 32 4 17 http_retcode:7300";
  *(_QWORD *)(v4 + 16) = PlayerAvatarComp::asyncAvatarRenameAuditRequest(AvatarRenameData const&,proto::AvatarRenameAuditSourceType const&)const::{lambda(common::minet::http_client::HttpRetcode,common::minet::http_client::HttpRequest &&,common::minet::http_client::HttpResponse &&)#1}::operator();
  v6 = v4 >> 3;
  *(_DWORD *)(v6 + 2147450880) = -235802127;
  *(_DWORD *)(v6 + 2147450884) = -202116348;
  *(_DWORD *)(v4 + 32) = http_retcode;
  if ( *(_DWORD *)(v4 + 32) )
    goto LABEL_8;
  if ( *(_BYTE *)((http_response >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)((http_response >> 3) + 0x7FFF8000) <= 3 )
    __asan_report_load4(http_response);
  if ( *(_DWORD *)http_response != 200 )
  {
LABEL_8:
    common::milog::MiLogStream::create(
      &v24,
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/player/avatar/player_avatar_comp.cpp",
      "operator()",
      7304);
    v7 = common::milog::MiLogStream::operator<<<char [50],(char *[50])0>(
           &v24,
           (const char (*)[50])"asyncAvatarRenameAuditRequest fail. http_retcode:");
    v8 = common::milog::MiLogStream::operator<<<common::minet::http_client::HttpRetcode,(common::minet::http_client::HttpRetcode*)0>(
           v7,
           (const common::minet::http_client::HttpRetcode *)(v4 + 32));
    v9 = common::milog::MiLogStream::operator<<<char [23],(char *[23])0>(
           v8,
           (const char (*)[23])" \n http_response.body:");
    v10 = common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(
            v9,
            (const std::string *)(http_response + 56));
    v11 = common::milog::MiLogStream::operator<<<char [24],(char *[24])0>(
            v10,
            (const char (*)[24])" \nhttp_response.status:");
    common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v11, (const unsigned int *)http_response);
    common::milog::MiLogStream::~MiLogStream(&v24);
  }
  common::milog::MiLogStream::create(
    &v24,
    &common::milog::MiLogDefault::default_log_obj_,
    1u,
    "./src/player/avatar/player_avatar_comp.cpp",
    "operator()",
    7307);
  v12 = common::milog::MiLogStream::operator<<<char [63],(char *[63])0>(
          &v24,
          (const char (*)[63])"asyncAvatarRenameAuditRequest response_callback: http_retcode:");
  v13 = common::milog::MiLogStream::operator<<<common::minet::http_client::HttpRetcode,(common::minet::http_client::HttpRetcode*)0>(
          v12,
          (const common::minet::http_client::HttpRetcode *)(v4 + 32));
  v14 = common::milog::MiLogStream::operator<<<char [27],(char *[27])0>(
          v13,
          (const char (*)[27])" \n http_request.body size:");
  val = std::string::size(&http_request->body);
  v15 = common::milog::MiLogStream::operator<<<unsigned long,(unsigned long *)0>(v14, &val);
  v16 = common::milog::MiLogStream::operator<<<char [24],(char *[24])0>(
          v15,
          (const char (*)[24])" \nhttp_response.status:");
  v17 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v16, (const unsigned int *)http_response);
  v18 = common::milog::MiLogStream::operator<<<char [26],(char *[26])0>(
          v17,
          (const char (*)[26])" \nhttp_response.head_map:");
  v19 = common::milog::MiLogStream::operator<<<std::string,std::string>(
          v18,
          (const std::map<std::string,std::string> *)(http_response + 8));
  v20 = common::milog::MiLogStream::operator<<<char [22],(char *[22])0>(
          v19,
          (const char (*)[22])" \nhttp_response.body:");
  common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v20, (const std::string *)(http_response + 56));
  common::milog::MiLogStream::~MiLogStream(&v24);
  if ( v25 == (char *)v4 )
  {
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0LL;
  }
  else
  {
    *(_QWORD *)v4 = 1172321806LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
  }
};

// Line 7319: range 00000000171AA824-00000000171AAA3F
void __fastcall PlayerAvatarComp::clearQuestRenameRecordByGm(PlayerAvatarComp *const this, uint32_t avatar_id)
{
  unsigned __int64 v2; // rbx
  __int64 v3; // rax
  _DWORD *v4; // r12
  std::_Rb_tree_iterator<std::pair<unsigned int const,AvatarRenameData> >::_Self *p_y; // rsi
  std::_Rb_tree_iterator<std::pair<unsigned int const,AvatarRenameData> >::pointer v6; // rdx
  char v7; // cl
  common::milog::MiLogStream *v8; // rax
  std::_Rb_tree_iterator<std::pair<unsigned int const,AvatarRenameData> >::_Self __y; // [rsp+18h] [rbp-A8h] BYREF
  common::milog::MiLogStream v10; // [rsp+20h] [rbp-A0h] BYREF
  char v11[128]; // [rsp+40h] [rbp-80h] BYREF

  v2 = (unsigned __int64)v11;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_1(96LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "2 48 4 14 avatar_id:7318 64 8 9 iter:7320";
  *(_QWORD *)(v2 + 16) = PlayerAvatarComp::clearQuestRenameRecordByGm;
  v4 = (_DWORD *)(v2 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = -234556943;
  v4[536862722] = -202116352;
  *(_DWORD *)(v2 + 48) = avatar_id;
  *(std::map<unsigned int,AvatarRenameData>::iterator *)(v2 + 64) = std::map<unsigned int,AvatarRenameData>::find(
                                                                      &this->avatar_rename_data_map_,
                                                                      (const std::map<unsigned int,AvatarRenameData>::key_type *)(v2 + 48));
  __y._M_node = std::map<unsigned int,AvatarRenameData>::end(&this->avatar_rename_data_map_)._M_node;
  p_y = &__y;
  if ( std::operator!=(
         (const std::_Rb_tree_iterator<std::pair<unsigned int const,AvatarRenameData> >::_Self *)(v2 + 64),
         &__y) )
  {
    v6 = std::_Rb_tree_iterator<std::pair<unsigned int const,AvatarRenameData>>::operator->((const std::_Rb_tree_iterator<std::pair<unsigned int const,AvatarRenameData> > *const)(v2 + 64));
    v7 = *(_BYTE *)(((unsigned __int64)&v6->second.has_set_by_quest >> 3) + 0x7FFF8000);
    if ( v7 != 0 && (((unsigned __int8)v6 + 12) & 7) >= v7 )
    {
      LOBYTE(p_y) = v7 != 0;
      __asan_report_store1(&v6->second.has_set_by_quest, p_y, v6);
    }
    v6->second.has_set_by_quest = 0;
    common::milog::MiLogStream::create(
      &v10,
      &common::milog::MiLogDefault::default_log_obj_,
      1u,
      "./src/player/avatar/player_avatar_comp.cpp",
      "clearQuestRenameRecordByGm",
      7324);
    v8 = common::milog::MiLogStream::operator<<<char [45],(char *[45])0>(
           &v10,
           (const char (*)[45])"clearQuestRenameRecordByGm succ, avatar_id: ");
    common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v8, (const unsigned int *)(v2 + 48));
    common::milog::MiLogStream::~MiLogStream(&v10);
  }
  if ( v11 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8008) = 0;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8008) = -168430091;
  }
};

// Line 7329: range 00000000171AAA40-00000000171AAE5F
__int64 __fastcall PlayerAvatarComp::avatarRenameAuditResultByGm(
        PlayerAvatarComp *const this,
        uint32_t avatar_id,
        bool is_succ)
{
  unsigned __int64 v3; // rbx
  __int64 v4; // rax
  _DWORD *v5; // r13
  std::_Rb_tree_iterator<std::pair<unsigned int const,AvatarRenameData> >::pointer v6; // rax
  common::milog::MiLogStream *v7; // rax
  common::milog::MiLogStream *v8; // rax
  common::milog::MiLogStream *v9; // rax
  common::milog::MiLogStream *v10; // rax
  common::milog::MiLogStream *v11; // rcx
  __int64 result; // rax
  common::milog::MiLogStream *v13; // rax
  common::milog::MiLogStream *v14; // rax
  common::milog::MiLogStream *v15; // rax
  common::milog::MiLogStream *v16; // rax
  std::_Rb_tree_iterator<std::pair<unsigned int const,AvatarRenameData> >::_Self __y; // [rsp+10h] [rbp-B0h] BYREF
  const AvatarRenameAuditData *audit_data; // [rsp+18h] [rbp-A8h]
  common::milog::MiLogStream v20; // [rsp+20h] [rbp-A0h] BYREF
  char v21[128]; // [rsp+40h] [rbp-80h] BYREF

  v3 = (unsigned __int64)v21;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_1(96LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "2 48 4 14 avatar_id:7328 64 8 9 iter:7330";
  *(_QWORD *)(v3 + 16) = PlayerAvatarComp::avatarRenameAuditResultByGm;
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = -234556943;
  v5[536862722] = -202116352;
  *(_DWORD *)(v3 + 48) = avatar_id;
  *(std::map<unsigned int,AvatarRenameData>::iterator *)(v3 + 64) = std::map<unsigned int,AvatarRenameData>::find(
                                                                      &this->avatar_rename_data_map_,
                                                                      (const std::map<unsigned int,AvatarRenameData>::key_type *)(v3 + 48));
  __y._M_node = std::map<unsigned int,AvatarRenameData>::end(&this->avatar_rename_data_map_)._M_node;
  if ( std::operator!=(
         (const std::_Rb_tree_iterator<std::pair<unsigned int const,AvatarRenameData> >::_Self *)(v3 + 64),
         &__y) )
  {
    v6 = std::_Rb_tree_iterator<std::pair<unsigned int const,AvatarRenameData>>::operator->((const std::_Rb_tree_iterator<std::pair<unsigned int const,AvatarRenameData> > *const)(v3 + 64));
    audit_data = &v6->second.audit_data;
    if ( *(_BYTE *)(((unsigned __int64)&v6->second.audit_data.source_type >> 3) + 0x7FFF8000) != 0
      && *(_BYTE *)(((unsigned __int64)&v6->second.audit_data.source_type >> 3) + 0x7FFF8000) <= 3 )
    {
      __asan_report_load4(&v6->second.audit_data.source_type);
    }
    if ( (unsigned int)PlayerAvatarComp::handleAvatarRenameAuditResult(
                         this,
                         *(_DWORD *)(v3 + 48),
                         &audit_data->avatar_name,
                         is_succ,
                         audit_data->source_type) )
    {
      common::milog::MiLogStream::create(
        &v20,
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/player/avatar/player_avatar_comp.cpp",
        "avatarRenameAuditResultByGm",
        7336);
      v7 = common::milog::MiLogStream::operator<<<char [50],(char *[50])0>(
             &v20,
             (const char (*)[50])"handleAvatarRenameAuditResult failed, avatar_id: ");
      v8 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v7, (const unsigned int *)(v3 + 48));
      v9 = common::milog::MiLogStream::operator<<<char [9],(char *[9])0>(v8, (const char (*)[9])", name: ");
      v10 = common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v9, &audit_data->avatar_name);
      v11 = common::milog::MiLogStream::operator<<<char [12],(char *[12])0>(v10, (const char (*)[12])", player_: ");
      if ( *(_BYTE *)(((unsigned __int64)&this->player_ >> 3) + 0x7FFF8000) )
        __asan_report_load8(&this->player_);
      operator<<(v11, this->player_);
      common::milog::MiLogStream::~MiLogStream(&v20);
      result = 0xFFFFFFFFLL;
    }
    else
    {
      common::milog::MiLogStream::create(
        &v20,
        &common::milog::MiLogDefault::default_log_obj_,
        1u,
        "./src/player/avatar/player_avatar_comp.cpp",
        "avatarRenameAuditResultByGm",
        7340);
      v13 = common::milog::MiLogStream::operator<<<char [46],(char *[46])0>(
              &v20,
              (const char (*)[46])"avatarRenameAuditResultByGm succ, avatar_id: ");
      v14 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v13, (const unsigned int *)(v3 + 48));
      v15 = common::milog::MiLogStream::operator<<<char [12],(char *[12])0>(v14, (const char (*)[12])", is_succ: ");
      common::milog::MiLogStream::operator<<(v15, is_succ);
      common::milog::MiLogStream::~MiLogStream(&v20);
      result = 0LL;
    }
  }
  else
  {
    common::milog::MiLogStream::create(
      &v20,
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/player/avatar/player_avatar_comp.cpp",
      "avatarRenameAuditResultByGm",
      7344);
    v16 = common::milog::MiLogStream::operator<<<char [47],(char *[47])0>(
            &v20,
            (const char (*)[47])"cannot find auditing rename data, avatar_id : ");
    common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v16, (const unsigned int *)(v3 + 48));
    common::milog::MiLogStream::~MiLogStream(&v20);
    result = 0xFFFFFFFFLL;
  }
  if ( v21 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8008) = 0;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8008) = -168430091;
  }
  return result;
};

// Line 7352: range 00000000171AAE60-00000000171AB0A4
void __fastcall PlayerAvatarComp::setAvatarRenameByGm(
        PlayerAvatarComp *const this,
        uint32_t avatar_id,
        const std::string *target_name)
{
  unsigned __int64 v3; // rbx
  __int64 v4; // rax
  _DWORD *v5; // r12
  std::_Rb_tree_iterator<std::pair<unsigned int const,AvatarRenameData> >::pointer v6; // rax
  common::milog::MiLogStream *v7; // rax
  common::milog::MiLogStream *v8; // rax
  common::milog::MiLogStream *v9; // rax
  std::_Rb_tree_iterator<std::pair<unsigned int const,AvatarRenameData> >::_Self __y; // [rsp+28h] [rbp-A8h] BYREF
  common::milog::MiLogStream v12; // [rsp+30h] [rbp-A0h] BYREF
  char v13[128]; // [rsp+50h] [rbp-80h] BYREF

  v3 = (unsigned __int64)v13;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_1(96LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "2 48 4 14 avatar_id:7351 64 8 9 iter:7354";
  *(_QWORD *)(v3 + 16) = PlayerAvatarComp::setAvatarRenameByGm;
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = -234556943;
  v5[536862722] = -202116352;
  *(_DWORD *)(v3 + 48) = avatar_id;
  PlayerAvatarComp::tryInitAvatarRenameData(this, *(_DWORD *)(v3 + 48));
  *(std::map<unsigned int,AvatarRenameData>::iterator *)(v3 + 64) = std::map<unsigned int,AvatarRenameData>::find(
                                                                      &this->avatar_rename_data_map_,
                                                                      (const std::map<unsigned int,AvatarRenameData>::key_type *)(v3 + 48));
  __y._M_node = std::map<unsigned int,AvatarRenameData>::end(&this->avatar_rename_data_map_)._M_node;
  if ( std::operator!=(
         (const std::_Rb_tree_iterator<std::pair<unsigned int const,AvatarRenameData> >::_Self *)(v3 + 64),
         &__y) )
  {
    v6 = std::_Rb_tree_iterator<std::pair<unsigned int const,AvatarRenameData>>::operator->((const std::_Rb_tree_iterator<std::pair<unsigned int const,AvatarRenameData> > *const)(v3 + 64));
    std::string::operator=(&v6->second.cur_avatar_name, target_name);
    PlayerAvatarComp::notifyAvatarRenameData(this);
    common::milog::MiLogStream::create(
      &v12,
      &common::milog::MiLogDefault::default_log_obj_,
      1u,
      "./src/player/avatar/player_avatar_comp.cpp",
      "setAvatarRenameByGm",
      7359);
    v7 = common::milog::MiLogStream::operator<<<char [38],(char *[38])0>(
           &v12,
           (const char (*)[38])"setAvatarRenameByGm succ, avatar_id: ");
    v8 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v7, (const unsigned int *)(v3 + 48));
    v9 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(v8, (const char (*)[16])", avatar_name: ");
    common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v9, target_name);
    common::milog::MiLogStream::~MiLogStream(&v12);
  }
  if ( v13 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8008) = 0;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8008) = -168430091;
  }
};

// Line 7364: range 00000000171AB0A6-00000000171AB185
void __cdecl PlayerAvatarComp::clearAvatarRenameCdByGm(PlayerAvatarComp *const this)
{
  __int64 v1; // rsi
  __int64 v2; // rsi
  __int64 v3; // rdx

  if ( *(_BYTE *)(((unsigned __int64)&this->avatar_rename_during_last_time_count_ >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->avatar_rename_during_last_time_count_ >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_store4(&this->avatar_rename_during_last_time_count_, v1, &this->avatar_rename_during_last_time_count_);
  }
  this->avatar_rename_during_last_time_count_ = 0;
  v2 = (((_BYTE)this - 68) & 7u) + 3;
  v3 = (*(_BYTE *)(((unsigned __int64)&this->avatar_rename_next_limit_time_ >> 3) + 0x7FFF8000) != 0) & (unsigned __int8)((char)((((_BYTE)this - 68) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&this->avatar_rename_next_limit_time_ >> 3) + 0x7FFF8000));
  if ( (_BYTE)v3 )
    __asan_report_store4(&this->avatar_rename_next_limit_time_, v2, v3);
  this->avatar_rename_next_limit_time_ = 0;
  if ( *(_BYTE *)(((unsigned __int64)&this->next_avatar_rename_time_ >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->next_avatar_rename_time_ >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_store4(&this->next_avatar_rename_time_, v2, &this->next_avatar_rename_time_);
  }
  this->next_avatar_rename_time_ = 0;
};
